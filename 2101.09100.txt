K. Kishida (Ed.): Fourth International Conference
on Applied Category Theory (ACT 2021).
EPTCS 372, 2022, pp. 59–71, doi:10.4204/EPTCS.372.5
A Categorical Semantics for Bounded Petri Nets
Fabrizio Genovese
0000-0001-7792-1375
University of Pisa & Statebox
fabrizio.romano.genovese@gmail.com
Fosco Loregian
0000-0003-3052-465X
Tallinn University of Technology
fosco.loregian@gmail.com
Daniele Palombi
0000-0002-8107-5439
Sapienza University of Rome
danielepalombi@protonmail.com
We provide a categorical semantics for bounded Petri nets, both in the collective- and individual-
token philosophies. In both cases, we describe the process of bounding a net both internally (just
constructing new categories of executions of a net using comonads) and externally (using lax-monoidal-
lax functors). Our external semantics is non-local, meaning that tokens are endowed with properties
that say something about the global state of the net. We then prove, in both cases, that the internal and
external constructions are equivalent, by using machinery built on top of the Grothendieck construction.
The individual-token case is harder, as it requires a more explicit reliance on abstract methods.
Acknowledgements
The ﬁrst author was supported by the project MIUR PRIN 2017FTXR7S “IT-
MaTTerS” and by the Independent Ethvestigator Program.
The second author was supported by the ESF funded Estonian IT Academy research measure (project
2014-2020.4.05.19-0001).
A video presentation of this paper can be found on Youtube at mv4dyTNgz60.
1
Introduction
A Petri net is a simple thing: it consists of places – depicted as circles – and transitions – depicted as
squares and connected to places by inbound and outbound arrows. Places are seen as holding resources,
called tokens and represented by black circles, while transitions are seen as processes that convert a pre-
determined amount of some resource into a pre-determined amount of some other resource, as prescribed
by the connecting arrows. The action of a transition on tokens is called ﬁring. Sequences of ﬁrings are
called executions, with an example depicted below.
This innocent deﬁnition [17] has proven very useful in domains ranging from concurrency[12, 19], where
it is used to represent resource ﬂow in distributed computing, to chemistry [18, 3], where it models
chemical reactions. In both cases, it becomes important to characterize which sequences of transitions
carry a given distribution of tokens for the net – called marking – to some other marking. Here is where the
similitude between applications specializes: for instance, in chemistry, tokens represent molecules/atoms
of a given type speciﬁed by the place in which they live. Two tokens in the same place are physically
indistinguishable, and we do not care which token is consumed by a ﬁxed transition. In computer science

60
Bounded Petri Nets
applications – e.g. [22] – tokens are instead seen as terms of a given type, and it is important to distinguish
between them. These two philosophies are called collective-token and individual-token philosophies,
respectively [11].
In any case, one other important question is to establish when a given Petri net is bounded, meaning
that starting from a given marking, no place will hold more than a pre-determined number of tokens
throughout any possible ﬁring [18]. Traditionally, there is a simple way of turning any net into a bounded
one: we double-up the places adding what we call anti-places (depicted in red), and edit transitions so
that each input (output) from (to) a place is now paired with a corresponding output (input) to (from) the
corresponding anti-place:
It is easy to see that for any marking, the amount of tokens in each anti-place will determine the maximum
number of tokens the corresponding place can hold through any execution, and vice-versa.
Building on the long-standing tradition of looking at Petri nets through a categorical lens [15], we
want to give a category-theoretic interpretation of this process, both in the collective-token philosophy
and in the individual-token one. In each case, we will provide two different categorical ways to bound a
net, which we will call internal and external, respectively. Then, we will prove that internal and external
bounding are conceptually the same thing, generalizing a technique already established in [10]. Notably,
in doing so, we will employ a new kind of categorical semantics for Petri nets, which we call non-local [9],
where tokens come endowed with information concerning the global properties of the net itself.
2
Petri nets and their executions
Notation 1. Let S be a set; denote with S⊕the set of multisets over S. Multiset sum will be denoted with
⊕, and difference (only partially deﬁned) with ⊖. S⊕with ⊕and the empty multiset is isomorphic to the
free commutative monoid on S.
Deﬁnition 1 (Petri net). A Petri net is a couple functions T
s,t
−→S⊕for some sets T and S, called the set of
places and transitions of the net, respectively.
Deﬁnition 2 (Markings and ﬁrings). A marking for a net T
s,t
−→S⊕is an element of S⊕, representing a
distribution of tokens in the net places. A transition u is enabled in a marking M if M ⊖s(u) is deﬁned.
An enabled transition can ﬁre, moving tokens in the net. Firing is considered an atomic event, and the
marking resulting from ﬁring u in M is M ⊖s(u)⊕t(u).
As we said, depending on whether we want to consider tokens as indistinguishable or not, we can
interpret nets under two different philosophies, traditionally called collective-token and individual-token,
respectively. Category theory is helpful in pinpointing precisely the meaning of this distinction by
providing different notions for the category of executions of a given net. In the collective-token philosophy,
the executions of a Petri net are taken to be morphisms in a commutative monoidal category – a category
whose monoid of objects is commutative:
Deﬁnition 3 (Category of executions – collective-token philosophy). Let N : T
s,t
−→S⊕be a Petri net. We
can generate a free commutative strict monoidal category (FCSMC), C(N), as follows:

Genovese, Loregian, Palombi
61
• The monoid of objects is S⊕.
• Morphisms are generated by T: each u ∈T corresponds to a morphism generator su u−→tu;
morphisms are obtained by considering all the formal (monoidal) compositions of generators and
identities.
A detailed description of this construction can be found in [14].
Example 1. In Deﬁnition 3 objects represent markings of a net: A⊕A⊕B means “two tokens in A and
one token in B”. Morphisms represent executions of a net, mapping markings to markings. A marking is
reachable from another one if and only if there is a morphism between them.
p1
t
p2
v
u
p3
p4
p1
t
p2
v
u
p3
p4
p1
t
p2
v
u
p3
p4
p1
t
p2
v
u
p3
p4
t
v
u
p1
p2
p3
p3
p2
p3
p4
p2
p4
p3
As for the individual-token philosophy, we obtain a suitable semantics by relaxing the commutativity
requirement in Deﬁnition 3.
Deﬁnition 4 (Category of executions – individual-token philosophy). Let N : T
s,t
−→S⊕be a Petri net. We
can generate a free symmetric strict monoidal category (FSSMC), F(N), as follows:
• The monoid of objects is S⊗, the set of strings over S. Monoidal product of objects A,B, denoted
A⊗B, is given by string concatenation.
• Morphisms are generated by T: each u ∈T corresponds to a morphism generator su u−→tu, where
su,tu are obtained by choosing some ordering on their underlying multisets; morphisms are
obtained by considering all the formal horizontal and vertical compositions of generators, identities
and symmetries.
A detailed description of this construction can be found in [7].
Example 2. The interpretation of Deﬁnition 4 is as in Deﬁnition 3, but now switching tokens around is not
anymore a trivial operation. For instance, the following morphisms are considered different in Deﬁnition 4,
and equal in Deﬁnition 3:
A
B
B
C
f
g
A
B
B
C
f
g
A great deal of work has been devoted to understanding how categories of Petri nets and categories of
(commutative, symmetric) strict monoidal categories are related [15, 20, 8, 2, 4, 6, 1]. We will not focus

62
Bounded Petri Nets
on these issues in this paper; instead, we will be interested in recovering the idea of “bounding a net” as a
functor between the category of executions of a net and some other category.
The approach we pursue will be very similar to the one we already adopted for coloured nets in [10],
with the difference that the functors here will have to be lax-monoidal-lax, something we already partially
exploited in [9]. For obvious reasons, we start from the collective-token case, which is simpler.
3
Bound semantics in the collective-token philosophy
We brieﬂy described the process of turning a Petri net into a bounded one in Section 1. Categorically, this
process can be implemented in the executions semantics, as follows.
Deﬁnition 5 (Internal bound semantics – collective-token philosphy). Let N be a Petri net, and consider
C(N), its corresponding FCSMC. The internal bound semantics of N in the collective-token philosophy is
given by the FCSMC CB(N) generated as follows:
• For each generating object A in C(N), we introduce object generators A+, A−.
• For each generating morphism
Ln
i=1 Ai
u−→Lm
j=1 B j
in C(N), we introduce a morphism generator:
Lm∨n
i=1
 A+
i ⊕Bi− u−→Lm∨n
i=1
 A−
i ⊕Bi+
where we adopt the convention that, if n < m (respectively n > m), then An+1,...,Am (respectively
Bm1,...,Bn) are taken to be equal to I, the monoidal unit, and m∨n := max{m,n}.
Example 3. Notice that by deﬁnition, every FCSMC is presented by a Petri net. Following Deﬁnition 5,
it is easy to see that if we consider N to be the net in Section 1, then CB(N) is presented exactly by the
bounded net we na¨ıvely associated to it. Indeed, generating objects of type A+ represent a token in the
place A of the net while generating objects of type A−represent tokens in the corresponding anti-place.
Generating morphisms of CB(N) have inputs and outputs exactly as the transitions in the net obtained by
bounding N.
Proposition 1. The assignment C(N) 7→CB(N) deﬁnes a comonad in the category of FCMSCs and strict
monoidal functors between them, FCSMC.
Proof. First of all, we have to prove that the procedure is functorial. For any strict monoidal functor
F : C(N) →C(M) we deﬁne the action on morphisms CB(F) : CB(N) →CB(M) as the following monoidal
functor:
• If for a generating object A of C(N) it is FA = B, then CB(F)A+ = B+ and CB(F)A−= B−.
• If for a generating morphism t of C(N) it is Ft = u, then CB(F)t = u.
Identities and compositions are clearly respected, making CB( ) an endofunctor in FCSMC. As a counit,
on each component N we deﬁne the strict monoidal functor εN : CB(N) →C(N) sending:
• The generating object A+ to A, and the generating object A−to I, the monoidal unit of C(N).
• A generating morphism
Lm∨n
i=1
 A+
i ⊕Bi− u−→Lm∨n
i=1
 A−
i ⊕Bi+
to the generating morphism
Ln
i=1 Ai
u−→Lm
j=1 B j.

Genovese, Loregian, Palombi
63
The procedure is natural in the choice of N, making ε into a natural transformation CB( ) →idFCSMC.
As for the comultiplication, on each component N we deﬁne the strict monoidal functor δN : CB(N) →
CB(CB(N)) sending:
• the generating object A+ to the generating object A++ ⊕A=;
• the generating object A−to the generating object A∓⊕A±;
• a generating morphism of CB(N)
Lm∨n
i=1
 A+
i ⊕Bi− u−→Lm∨n
i=1
 A−
i ⊕Bi+
to the generating morphism CB(CB(N))
Lm∨n
i=1
 A++
i
⊕A=
i ⊕B±
i ⊕B∓
i
 u−→Lm∨n
i=1
 A∓
i ⊕A±
i ⊕B=
i ⊕B++
i

The naturality of δ, its coassociativity and the fact that ε is a counit are all straightforward to
check.
In the spirit of [10], our goal is now to frame this comonad into a bigger context, one of Petri nets with
a semantics attached to them. A semantics for a Petri net is just a functor from its category of executions
(modulo choice of token philosophy) to some other monoidal category S .
In [10], this functor was required to be strict monoidal. This backed up the interpretation that a
semantics “attaches extra information to tokens”, which is then used by the transitions in a suitable way.
Here, we require this functor to be lax-monoidal-lax. Laxity amounts to saying that we can attach
non-local information to tokens: they may “know” something about the overall state of the net, and the
laxator represents the process of “tokens joining knowledge”. If this sounds handwavy, we guarantee it
will be made clear shortly.
Deﬁnition 6 (Non-local semantics – collective-token philosophy). Let N be a Petri net and let S be a
monoidal bicategory [21]. A Petri net with a commutative non-local semantics is a couple
 N,N♯
with
N♯a lax-monoidal-lax functor C(N) →S .
A morphism
 N,N♯
→
 M,M♯
of Petri nets with commutative semantics is a strict monoidal functor
C(N) F−→C(M) making the obvious triangle commute. We denote the category of Petri nets with a non-local
commutative semantics with PetriS .
We now show how we can encode the information of a net being bounded as some particular kind of
non-local semantics.
Notation 2. Let Span be the monoidal bicategory of sets, spans and span morphisms. A morphism A →B
in Span consists of a set S and a pair of functions A ←S →B. When we need to notationally extract this
information from f, we write A
f1
←−Sf
f2
−→B. We sometimes consider a span as a morphism f : Sf →A×B,
thus we may write f(s) = (a,b) for s ∈Sf with f1(s) = a and f2(s) = b. Recall moreover that a 2-cell in
Span f ⇒g is a function θ : Sf →Sg such that f = θ #g.
Remark 1. In a free commutative (resp. symmetric) strict monoidal category, there are no equations
between generators. As such, even if a morphism can be decomposed in a composition of tensors of
generators (and symmetries) in multiple ways, the generators used – as well as how many times they are
used – is an invariant of this decomposition. Given this, there exists a well-deﬁned function
χ : HomF(N)
n generator mor-
phisms of F(N)⊕
o
mapping each morphism f to a multiset counting how many times each morphism generator is used in the
decomposition of f.

64
Bounded Petri Nets
Deﬁnition 7 (External bound semantics – collective-token philosphy). Given a Petri net N : T
s,t
−→S⊕,
deﬁne the following functor N♯: C(N) →Span, which is lax-monoidal-lax (see 2):
• Each object A of C(N) is mapped to the set S⊕, the set of objects of C(N).
• Each morphism A
f−→B is sent to the span:
S⊕
t←−χ(f)−1 s−→S⊕
with s,t denoting source and target, respectively, of a morphism in C(N).
Proposition 2. The functor of Deﬁnition 7 is lax-monoidal-lax. The class of N♯for all Petri nets N as
in Deﬁnition 7 form a subcategory of PetriSpan, which we call PetriSpan
B
.
Proof. Since χ(idA) is the empty multiset, and identities and symmetries coincide, χ(idA)−1 coincides
with the set of objects of C(N), and identities are preserved strictly. As for composition, the laxating
2-cell is given by the obvious inclusion χ(f)−1 ×S⊕χ(g)−1 →χ(f #g)−1 obtained by composition. A
very similar argument holds for the monoidal product noticing that χ(f #g) = χ(f ⊕g). The coherence
conditions are tedious to check but straightforward, given that the structure of the laxators is very
simple.1
Example 4. We now try to shed some light on Deﬁnition 7. Consider the net below. It has three places,
which according to Deﬁnition 7 are all sent to the set of multisets over themselves. We interpret tokens
as endowed with elements of such a set. These represent markings on the anti-places of the net. In our
example below, the token in p1 “knows” that there is one token in the anti-place p−
1 and four tokens in the
anti-place p−
3 , while p2 “knows” that there are three tokens in p−
1 and p−
2 , and two in p−
3 . The laxator
allows us to consider these two tokens as a unique entity, with their respective “local pieces of knowledge”
summing up.
p1
p2
p3
u1
u2
p1 : 1
p2 : 0
p3 : 4
p1 : 3
p2 : 3
p3 : 2
p1
p2
p3
u1
u2
p1 : 4
p2 : 3
p3 : 6
Laxator
Transitions u1,u2 generate the morphisms of the category of executions of the net. Looking at our deﬁnition,
u1 is mapped to the span function that subtracts p3 from the multiset in input and adds p2 to it. This
represents the ﬂow of anti-tokens, which goes in the opposite way with respect to the ﬂow of tokens of u1.
This again backs up our intuition since anti-places are wired to transitions in the opposite way of their
corresponding places.
3.1
Internalization
We have deﬁned two different kinds of bound semantics for Petri nets in the collective-token philosophy,
speciﬁed by Deﬁnition 5 and Deﬁnition 7. The former is labelled internal because places and anti-places
are all put together in the same category, while the latter is labelled external since the information about
bounded tokens is encoded in a functor. We now show that the two approaches are one and the same.
1If this seems strange, recall Example 2. As objects commute, morphisms in C(C) obey a very weak causal ﬂow, and
composition and monoidal product are quite similar.

Genovese, Loregian, Palombi
65
Theorem 1. Let
 N,N♯
be an object of PetriSpan
B
. The category CB(N) of Deﬁnition 5 is isomorphic to
the category
R N♯deﬁned as follows:
• Objects of
R N♯are couples (X,x) where X is an object of C and x ∈N♯X.
• Morphisms (X,x) →(Y,y) of
R N♯are couples (f,s) with f : X →Y a morphism of C and s ∈SN♯f
such that N♯f(s) = (x,y).
Proof. Leveraging on the equivalence of categories:
Γ : Cat/C(N) ≃Catl[C(N),Span] :
R
(more details in Deﬁnitions 10 and 11 and Theorem 2), it is sufﬁcient to consider the counit εN : CB(N) →
C(N) of Proposition 1, and to notice that ΓεN = N♯. Then Theorem 2 guarantees that
R ΓεN ≃εN, from
which the thesis follows.
4
Bound semantics in the individual-token philosophy
We now want to generalize the results of Section 3 to the individual-token philosophy. In doing so, we will
also prove the worthiness of the categorical approach: deﬁning external semantics in the individual-token
case is considerably harder, but instead of having to do so explicitly, we will be relying on abstract results
from higher category theory.
Deﬁnition 8 (Internal bound semantics – individual-token philosphy). Let N be a Petri net, and consider
F(N), its corresponding FSSMC. The internal bound semantics of N in the individual-token philosophy is
given by the FSSMC FB (N) generated by the same information of Deﬁnition 5.
Even if Deﬁnition 5 and 8 look nearly identical, things are instantly complicated by the presence of
symmetries. Indeed, proving comonadicity without resorting to abstract methods becomes very hard, as
all naturality squares require carefully —and consistently— selecting symmetries to commute.
Proposition 3. The assignment FB ( ): F(N) 7→FB (N) deﬁnes a comonad in the category of FCMSCs
and strict monoidal functors between them, FSSMC.
Proof. As we will prove in Theorem 3, the category FB (N) ﬁts in a pullback
FB (N)
Span•
F(N)
Span
Q
εN
U
N♯
We will use the universal property of such pullback to ﬁnd a comultiplication and a counit map and to
show the comonad laws; an evident candidate to be a counit is the arrow εN : FB (N) →F(N); a candidate
comultiplication map αN : FB (N) ⇒F2
B (N) is obtained from the diagram below as the unique red arrow
ﬁlling the diagram
FB (N)
F2
B (N)
Span•
FB (N)
Span
α
Q
Q1
ε1
U
N♯1

66
Bounded Petri Nets
Here, N♯
1 is the common value of the diagonal εN # N♯= Q #U as in Section 4, and the pair (Q1,ε1) is
obtained iterating the pullback of Section 4.
Now that we have the candidate maps (obviously natural in their component N, because they are
deﬁned via a universal property that is functorial in F(N)), we recall the comonad laws in the component
N:
FB (N)
F2
B (N)
F2
B (N)
F3
B (N)
αN
αN
αFB(N)
FB(αN)
F2
B (N)
FB (N)
FB (N)
F2
B (N)
FB(εN)
εFB(N)
αN
αN
The laws are shown as follows:
• The coassociativity requires us to compute the arrows FB (αN) and αFB(N): First, we build the
deﬁnition of F3
B (N), as the upper left corner in the diagram
F3
B (N)
Span•
F2
B (N)
Span•
FB (N)
Span•
F(N)
Span
Q2
ε2
αFB(N)
Q1
ε1
αN
Q
εN
U
N♯
Now, according to the deﬁnitions, αFB(N) is the arrow working as a right inverse of ε2, whereas
FB (αN) results from the diagram
FB (N)
F3
B (N)
Span•
F2
B (N)
Span•
F2
B (N)
Span
FB (N)
Span
αN
Q2
ε2
U
Q1
ε1
FB(αN)
U
N♯2
N♯1
αN
The coassociativity property is implied from the fact that
(
αN #αFB(N) #ε2 = αN #FB (αN)#ε2
αN #αFB(N) #Q2 = αN #FB (αN)#Q2
(1)

Genovese, Loregian, Palombi
67
since the projection maps (ε2,Q) from a pullback are jointly monic (as always when computing a
limit). Eq. (1) holds because of the commutative conditions found so far:
αN #αFB(N) #ε2 = αN #idF2
B(N)
= idFB(N) #αN
= αN #ε1 #αN
= αN #FB (αN)#ε2
αN #αFB(N) #Q2 = αN #αFB(N) #Q2 #idSpan•
= αN #αFB(N) #ε2 #Q1
= αN #idF2
B(N) #Q1
= αN #Q1 #idSpan•
= αN #FB (αN)#Q2
• The left and right counit laws follow from a similar chain of reasoning, and all in all from the
deﬁnition of the counit and comultiplication.
As for the commutative case, we now want to provide a semantics that is the external counterpart
of Deﬁnition 8. Deﬁnition 6 can be ported almost verbatim:
Deﬁnition 9 (Non-local semantics – individual-token philosophy). Let N be a Petri net and let S be a
monoidal bicategory. A Petri net with a non-local semantics is a couple
 N,N♯
with N♯a lax-monoidal-lax
functor F(N) →S .
A morphism
 N,N♯
→
 M,M♯
of Petri nets with non-local semantics is a strict monoidal functor
F(N) F−→F(M) making the obvious triangle commute. Overloading notation, we denote the category of
Petri nets with a non-local semantics with PetriS .
Yet, actually producing a lax-monoidal-lax functor F(N) →Span akin to the one in Deﬁnition 7 is
not as easy: As pointed out in Example 2, in the commutative case, it does not really matter which object
we apply a given morphism to, but only how many objects of some sort are turned into objects of some
other sort. This allowed us to represent morphisms between anti-places using spans with the preimage of
χ in their tips, and kept things manageable at the level of intuition.
When non-trivial symmetries are around, the causal relationship between morphisms becomes mean-
ingful: for instance, f #g and f ⊗g will, in general, act very differently on objects. Moreover, looking at
the ﬁbre of χ over a morphism generator f, we can describe it quite explicitly as the set of all (possibly
empty) stackings of string diagrams
h
σE
σW
σNE
σN
σNW
σSE
σS
σSW
where various symmetries σW,σE,σNE,... “surround” f on each side. If f is an identity, say over an object
A, then χ−1(1A) coincides with the set of all symmetries of F(N), making it clear that a lax-monoidal-lax
semantics for the individual-token case will not preserve identities strictly.

68
Bounded Petri Nets
4.1
External semantics via abstract machinery
With such a great deal of technicality, generalizing Deﬁnition 5 “manually” can easily go wrong. As we
did already in [9], we solve the problem by inverting our reasoning: We will use abstract machinery to
obtain a lax-monoidal-lax functor from the counit FB (N) →F(N) of the comonad in Proposition 3, in
such a way that the isomorphism with FB (N) will be guaranteed after internalizing.
Deﬁnition 10 (Total category [16]). Let C be a 1-category, regarded as a locally discrete bicategory, and
let F : C →Span be a lax-monoidal-lax functor. The total category of F is the 1-category
R F deﬁned as
the pullback (in Cat)
R F
Span•
C
Span
εF
U
F
where Span• is the bicategory of spans between pointed sets, and U is the forgetful functor. More
concretely,
R F is deﬁned as the category2 where
• 0-cells of
R F are couples (X,x) where X is a 0-cell of C and x ∈FX;
• 1-cells (X,x) →(Y,y) of
R F are couples (f,s) where f : X →Y is a 1-cell of C and s ∈SF f with
F f(s) = (x,y).
Representing a span as a function (S,s) →(X ×Y,(x,y)) between (pointed) sets, a morphism is a pair
(f,s) such that F f : s 7→(x,y).
Deﬁnition 11. Let C and D be 1-categories, and let F : D →C be a functor. There is a lax functor
ΓF : C →Span, with C regarded as a locally discrete bicategory, deﬁned as follows:
• On objects, C ∈C is mapped to the set {D ∈D |FD = C}.
• On morphisms, C
f−→C′ in C is mapped to the span:
{D ∈D |FD = C} dom
←−−{g ∈D |Fg = f} cod
−−→

D ∈D
FD = C′	
The following fact was ﬁrst observed by J. B´enabou in [5] (see also [13, Th. 5.4.5]), where instead of
Span there is the bicategory of profunctors:
Theorem 2 ([16]). For any category C , there is an equivalence of categories
Γ : Cat/C ≃Catl[C ,Span] :
R
where the right hand side is the 1-category of lax monoidal functors and functional (i.e. whose components
are all functions) natural transformations, and
R , Γ are deﬁned as in Deﬁnition 10 and Deﬁnition 11,
respectively. In particular, for F : D →C ,
R ΓF is isomorphic to D.
Relying upon Deﬁnition 11, we are ready to deﬁne our external semantics.
Deﬁnition 12 (External bound semantics – individual-token philosphy). We deﬁne a lax-monoidal-lax
functor N♯: F(N) →Span as ΓεN, where εN : FB (N) →F(N) is the functor sending any anti-place to
the monoidal unit, and generating morphisms to themselves.
Proposition 4. The functor of Deﬁnition 12 is lax-monoidal-lax.
2All 2-cells are identities, due to the 2-discreteness of C .

Genovese, Loregian, Palombi
69
Proof. That N♯is lax is true by deﬁnition. We need to prove that it laxly preserves the monoidal structure.
This is readily done by noticing that N♯sends all objects to the set of multisets on the set of object
generators of FB (N) which are of the form A−. This set is isomorphic to S⊗, the set of objects of F(N),
and we obtain an obvious laxator S⊗×S⊗→S⊗by concatenating strings.
The laxator diagram commutes only up to a 2-cell, which is to be expected given that we are working
with lax functors. This 2-cell is readily obtained from the following inclusion
{h ∈D |Fh = f ⊗g} ⊆{h ∈D |Fh = f}×{h ∈D |Fh = g}
between the span tips of N♯(f ⊗g) and N♯f ×N♯g, respectively.
Theorem 3. Let
 N,N♯
be an object of PetriSpan
B
. The category FB (N) of Deﬁnition 5 is isomorphic to
the category resulting from the following pullback in Cat:
R N♯
Span•
F(N)
Span
εN♯
U
N♯
where Span• is the bicategory of spans between pointed sets, and U is the forgetful functor. Explicitly:
• Objects of
R N♯are couples (X,x) where X is an object of C and x ∈N♯X.
• Morphisms (X,x) →(Y,y) of
R N♯are couples (f,s) with f : X →Y a morphism of C and s ∈SN♯f
such that N♯f(s) = (x,y).
Proof. Unrolling deﬁnitions, this is just Theorem 2.
5
Conclusion and future work
In this work, we proved how the functorial semantics approach developed in [10] to model guarded nets
can be generalized to include other traditionally familiar constructions such as bounding. To achieve
such a result, we reﬁned a technique already developed in [9] by endowing nets with a lax-monoidal-lax
functorial semantics. This improvement is a conceptually relevant leap: if in [10] strong monoidal functors
endowed tokens with properties that could be only locally true, in [9] and here tokens can be endowed
with properties about the global state of the net (such as distributions of tokens in other places). The laxity
requirement, which translates into the possibility to consider ensembles of tokens as a single thing, builds
a tension between the intrinsic local nature of tokens and their global properties.
Mathematically, our main contribution consists in proving how the formalism of functorial semantics
is mature enough to scale to complicated situations, such as non-local semantics, in the presence of
symmetries; this requires adopting a higher-categorical point of view, and resorting to the entirely abstract
description of many constructions that we were able to implement naively in the collective-token case.
As for directions for future work, we want to investigate what else our formalism can cover, hierarchic
nets [12] and nets with inhibitor arcs [24, 23] being the most promising candidates. In general, we are
now convinced of the following fact, which we consider a signiﬁcative conceptual contribution:
Studying the categorical semantics of extensions of Petri nets amounts to classifying lax functors
C →Span from a free (commutative, symmetric) monoidal category C .

70
Bounded Petri Nets
References
[1]
J. C. Baez, F. Genovese, J. Master, and M. Shulman. Categories of Nets. 2021. DOI: https :
//doi.org/10.48550/arXiv.2101.04238. arXiv: 2101.04238 [cs, math] (cit. on p. 61).
[2]
J. C. Baez and J. Master. “Open Petri Nets”. In: Mathematical Structures in Computer Science 30.3
(2020), pp. 314–341. DOI: https://doi.org/10.1017/S0960129520000043. arXiv: 1808.05415
(cit. on p. 61).
[3]
J. C. Baez and B. S. Pollard. “A Compositional Framework for Reaction Networks”. In: Re-
views in Mathematical Physics 29.09 (2017), p. 1750028. DOI: https://doi.org/10.1142/
S0129055X17500283. arXiv: 1704.02051 (cit. on p. 59).
[4]
P. Baldan, F. Bonchi, and F. Gadducci. “Encoding Asynchronous Interactions Using Open Petri
Nets”. In: CONCUR 2009 - Concurrency Theory. Ed. by M. Bravetti and G. Zavattaro. Vol. 5710.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2009, pp. 99–114. DOI: https://doi.org/10.
1007/978-3-642-04081-8˙8 (cit. on p. 61).
[5]
J. B´enabou. “Introduction to Bicategories”. In: J. B´enabou, R. Davis, A. Dold, J. Isbell, S. MacLane,
U. Oberst, and J. E. Roos. Reports of the Midwest Category Seminar. Vol. 47. Berlin, Heidelberg:
Springer Berlin Heidelberg, 1967, pp. 1–77. DOI: https://doi.org/10.1007/BFb0074299 (cit. on
p. 68).
[6]
R. Bruni, H. Melgratti, U. Montanari, and P. Sobocinski. “Connector Algebras for C/E and P/T
Nets’ Interactions”. In: Logical Methods in Computer Science 9.3 (2013). Ed. by J.-P. Katoen. DOI:
https://doi.org/10.2168/lmcs-9(3:16)2013. arXiv: 1307.0204 (cit. on p. 61).
[7]
F. Genovese, A. Gryzlov, J. Herold, M. Perone, E. Post, and A. Videla. Computational Petri Nets:
Adjunctions Considered Harmful. 2019. DOI: https://doi.org/10.48550/arXiv.1904.12974.
arXiv: 1904.12974 [cs, math] (cit. on p. 61).
[8]
F. Genovese and J. Herold. “Executions in (Semi-)Integer Petri Nets Are Compact Closed Cate-
gories”. In: Electronic Proceedings in Theoretical Computer Science 287 (2019), pp. 127–144. DOI:
https://doi.org/10.4204/EPTCS.287.7 (cit. on p. 61).
[9]
F. Genovese, F. Loregian, and D. Palombi. Nets with Mana: A Framework for Chemical Reaction
Modelling. Ed. by F. Gadducci and T. Kehrer. 2021. DOI: https://doi.org/10.1007/978-3-030-
78946-6˙10 (cit. on pp. 60, 62, 68, 69).
[10]
F. Genovese and D. I. Spivak. “A Categorical Semantics for Guarded Petri Nets”. In: Graph
Transformation. Ed. by F. Gadducci and T. Kehrer. Vol. 12150. Lecture Notes in Computer Science.
Cham: Springer International Publishing, 2020, pp. 57–74. DOI: https://doi.org/10.1007/978-
3-030-51372-6˙4 (cit. on pp. 60, 62, 63, 69).
[11]
R. J. van Glabbeek. “Petri Nets, Conﬁguration Structures and Higher Dimensional Automata”.
In: CONCUR’99 Concurrency Theory. Ed. by J. C. M. Baeten and S. Mauw. Vol. 1664. Lecture
Notes in Computer Science. Berlin, Heidelberg: Springer Berlin Heidelberg, 1999, pp. 21–27. DOI:
https://doi.org/10.1007/3-540-48320-9˙3 (cit. on p. 60).
[12]
K. Jensen and L. M. Kristensen. Coloured Petri Nets. Berlin, Heidelberg: Springer Berlin Heidel-
berg, 2009. DOI: https://doi.org/10.1007/b95112 (cit. on pp. 59, 69).
[13]
F. Loregian. “Coend Calculus”. In: London Mathematical Society Lecture Note Series 468 (2021).
ISBN 9781108746120. DOI: 10.1017/9781108778657.006 (cit. on p. 68).

Genovese, Loregian, Palombi
71
[14]
J. Master. “Petri Nets Based on Lawvere Theories”. In: Mathematical Structures in Computer
Science 30.7 (2020), pp. 833–864. DOI: 10.1017/S0960129520000262. arXiv: 1904.09091 (cit. on
p. 61).
[15]
J. Meseguer and U. Montanari. “Petri Nets Are Monoids”. In: Information and Computation 88.2
(1990), pp. 105–155. DOI: https://doi.org/10.1016/0890-5401(90)90013-8 (cit. on pp. 60,
61).
[16]
D. Pavlovi´c and S. Abramsky. “Specifying Interaction Categories”. In: Category Theory and
Computer Science. Ed. by E. Moggi and G. Rosolini. Vol. 1290. Lecture Notes in Computer
Science. Berlin, Heidelberg: Springer Berlin Heidelberg, 1997, pp. 147–158. DOI: https://doi.
org/10.1007/BFb0026986 (cit. on p. 68).
[17]
C. Petri and W. Reisig. Petri Net. Scholarpedia. 2008. URL: http://www.scholarpedia.org/
article/Petri˙net (cit. on p. 59).
[18]
W. Reisig. Understanding Petri Nets: Modeling Techniques, Analysis Methods, Case Studies. Berlin,
Heidelberg: Springer-Verlag, 2013. 230 pp. DOI: https://doi.org/10.1007/978-3-642-33278-4
(cit. on pp. 59, 60).
[19]
R.-C. Riemann. Modelling of Concurrent Systems: Structural and Semantical Methods in the High
Level Petri Net Calculus. Munchen: Herbert Utz Verlag, 1999. 252 pp. (cit. on p. 59).
[20]
V. Sassone. “On the Category of Petri Net Computations”. In: TAPSOFT ’95: Theory and Practice
of Software Development. Ed. by P. D. Mosses, M. Nielsen, and M. I. Schwartzbach. Red. by
G. Goos, J. Hartmanis, and J. Leeuwen. Vol. 915. Berlin, Heidelberg: Springer Berlin Heidelberg,
1995, pp. 334–348. DOI: https://doi.org/10.1007/3-540-59293-8˙205 (cit. on p. 61).
[21]
C. J. Schommer-Pries. The Classiﬁcation of Two-Dimensional Extended Topological Field Theories.
2014. DOI: https://doi.org/10.48550/arXiv.1112.1000. arXiv: 1112.1000 [math] (cit. on
p. 63).
[22]
Statebox Team. The Mathematical Speciﬁcation of the Statebox Language. 2019. DOI: https:
//doi.org/10.48550/arXiv.1906.07629. arXiv: 1906.07629 [cs, math] (cit. on p. 60).
[23]
D. A. Zaitsev. “Universal Petri Net”. In: Cybernetics and Systems Analysis 48.4 (2012), pp. 498–
511. DOI: https://doi.org/10.1007/s10559-012-9429-4 (cit. on p. 69).
[24]
D. A. Zaitsev. A Small Universal Petri net. 2013. DOI: https://doi.org/10.4204/EPTCS.128.22.
arXiv: 1309.1274 (cit. on p. 69).

