Under consideration for publication in J. Functional Programming
1
FUNCTIONAL PEARL
Applicative programming with eﬀects
CONOR MCBRIDE
University of Nottingham
ROSS PATERSON
City University, London
Abstract
In this paper, we introduce Applicative functors—an abstract characterisation of an ap-
plicative style of eﬀectful programming, weaker than Monads and hence more widespread.
Indeed, it is the ubiquity of this programming pattern that drew us to the abstraction.
We retrace our steps in this paper, introducing the applicative pattern by diverse exam-
ples, then abstracting it to deﬁne the Applicative type class and introducing a bracket
notation which interprets the normal application syntax in the idiom of an Applicative
functor. Further, we develop the properties of applicative functors and the generic opera-
tions they support. We close by identifying the categorical structure of applicative functors
and examining their relationship both with Monads and with Arrows.
1 Introduction
This is the story of a pattern that popped up time and again in our daily work,
programming in Haskell (Peyton Jones, 2003), until the temptation to abstract it
became irresistable. Let us illustrate with some examples.
Sequencing commands One often wants to execute a sequence of commands and
collect the sequence of their responses, and indeed there is such a function in the
Haskell Prelude (here specialised to IO):
sequence :: [IO a ] →IO [a ]
sequence
[ ]
= return [ ]
sequence (c : cs) = do
x ←c
xs ←sequence cs
return (x : xs)
In the (c : cs) case, we collect the values of some eﬀectful computations, which we
then use as the arguments to a pure function (:). We could avoid the need for names
to wire these values through to their point of usage if we had a kind of ‘eﬀectful
application’. Fortunately, exactly such a thing lives in the standard Monad library:

2
Conor McBride and Ross Paterson
ap :: Monad m ⇒m (a →b) →m a →m b
ap mf mx = do
f ←mf
x ←mx
return (f x)
Using this function we could rewrite sequence as:
sequence :: [IO a ] →IO [a ]
sequence
[ ]
= return [ ]
sequence (c : cs) = return (:) ‘ap‘ c ‘ap‘ sequence cs
where the return operation, which every Monad must provide, lifts pure values to
the eﬀectful world, whilst ap provides ‘application’ within it.
Except for the noise of the returns and aps, this deﬁnition is in a fairly standard
applicative style, even though eﬀects are present.
Transposing ‘matrices’ Suppose we represent matrices (somewhat approximately)
by lists of lists. A common operation on matrices is transposition1.
transpose :: [[a ]] →[[a ]]
transpose
[ ]
= repeat [ ]
transpose (xs : xss) = zipWith (:) xs (transpose xss)
Now, the binary zipWith is one of a family of operations that ‘vectorise’ pure func-
tions. As Daniel Fridlender and Mia Indrika (2000) point out, the entire family can
be generated from repeat, which generates an inﬁnite stream from its argument,
and zapp, a kind of ‘zippy’ application.
repeat :: a →[a ]
repeat x = x : repeat x
zapp :: [a →b] →[a ] →[b]
zapp (f : fs) (x : xs) = f x : zapp fs xs
zapp
= [ ]
The general scheme is as follows:
zipWithn :: (a1 →· · · →an →b) →[a1] →· · · →[an] →[b]
zipWithn f xs1 . . . xsn = repeat f ‘zapp‘ xs1 ‘zapp‘ . . . ‘zapp‘ xsn
In particular, transposition becomes
transpose :: [[a ]] →[[a ]]
transpose
[ ]
= repeat [ ]
transpose (xs : xss) = repeat (:) ‘zapp‘ xs ‘zapp‘ transpose xss
Except for the noise of the repeats and zapps, this deﬁnition is in a fairly standard
applicative style, even though we are working with vectors.
Evaluating expressions When implementing an evaluator for a language of expres-
sions, it is customary to pass around an environment, giving values to the free
variables. Here is a very simple example
1 This function diﬀers from the one in the standard library in its treatment of ragged lists

Functional pearl
3
data Exp v = Var v
| Val Int
| Add (Exp v) (Exp v)
eval :: Exp v →Env v →Int
eval (Var x)
γ = fetch x γ
eval (Val i)
γ = i
eval (Add p q) γ = eval p γ + eval q γ
where Env v is some notion of environment and fetch x projects the value for the
variable x.
We can eliminate the clutter of the explicitly threaded environment with a little
help from some very old friends, designed for this purpose:
eval :: Exp v →Env v →Int
eval (Var x)
= fetch x
eval (Val i)
= K i
eval (Add p q) = K (+) ‘S‘ eval p ‘S‘ eval q
where
K :: a →env →a
K x γ = x
S :: (env →a →b) →(env →a) →(env →b)
S ef es γ = (ef γ) (es γ)
Except for the noise of the K and S combinators2, this deﬁnition of eval is in a
fairly standard applicative style, even though we are abstracting an environment.
2 The Applicative class
We have seen three examples of this ‘pure function applied to funny arguments’
pattern in apparently quite diverse ﬁelds—let us now abstract out what they have
in common. In each example, there is a type constructor f that embeds the usual
notion of value, but supports its own peculiar way of giving meaning to the usual
applicative language—its idiom. We correspondingly introduce the Applicative class:
inﬁxl 4 ⊛
class Applicative f where
pure :: a →f a
(⊛) :: f (a →b) →f a →f b
This class generalises S and K from threading an environment to threading an eﬀect
in general.
We shall require the following laws for applicative functors:
identity
pure id ⊛u = u
composition
pure (·) ⊛u ⊛v ⊛w = u ⊛(v ⊛w)
homomorphism
pure f ⊛pure x = pure (f x)
interchange
u ⊛pure x = pure (λf →f x) ⊛u
2 also known as the return and ap of the environment Monad

4
Conor McBride and Ross Paterson
The idea is that pure embeds pure computations into the pure fragment of an
eﬀectful world—the resulting computations may thus be shunted around freely, as
long as the order of the genuinely eﬀectful computations is preserved.
You can easily check that applicative functors are indeed functors, with the fol-
lowing action on functions:
(<$>) :: Applicative f ⇒(a →b) →f a →f b
f <$> u = pure f ⊛u
Moreover, any expression built from the Applicative combinators can be transformed
to a canonical form in which a single pure function is ‘applied’ to the eﬀectful parts
in depth-ﬁrst order:
pure f ⊛u1 ⊛. . . ⊛un
This canonical form captures the essence of Applicative programming: computa-
tions have a ﬁxed structure, given by the pure function, and a sequence of sub-
computations, given by the eﬀectful arguments. We therefore ﬁnd it convenient, at
least within this paper, to write this form using a special bracket notation,
Jf u1 . . . un K
indicating a shift into the idiom of an Applicative functor, where a pure function is
applied to a sequence of eﬀectful arguments using the appropriate ⊛. Our intention
is to give an indication that eﬀects are present, whilst retaining readability of code.
Given Haskell extended with multi-parameter type classes, enthusiasts for over-
loading may replace ‘J’ and ‘K’ by identiﬁers iI and Ii with the right behaviour3.
The IO monad, and indeed any Monad, can be made Applicative by taking pure =
return and (⊛) = ap. We could alternatively use the variant of ap that performs
the computations in the opposite order, but we shall keep to the left-to-right order
in this paper. Sometimes we can implement the Applicative interface a little more
directly, as with (→) env:
instance Applicative ((→) env) where
pure x
= λγ →x
-- K
ef ⊛ex = λγ →(ef γ) (ex γ)
-- S
With these instances, sequence and eval become:
sequence :: [IO a ] →IO [a ]
sequence
[ ]
= J[ ]K
sequence (c : cs) = J(:) c (sequence cs)K
eval :: Exp v →Env v →Int
eval (Var x)
= fetch x
eval (Val i)
= Ji K
eval (Add p q) = J(+) (eval p) (eval q)K
If we want to do the same for our transpose example, we shall have to avoid the
3 Hint: Deﬁne an overloaded function applicative u v1 . . . vn Ii = u ⊛v1 ⊛. . . ⊛vn

Functional pearl
5
library’s ‘list of successes’ (Wadler, 1985) monad and take instead an instance
Applicative [ ] that supports ‘vectorisation’, where pure = repeat and (⊛) = zapp,
yielding
transpose :: [[a ]] →[[a ]]
transpose
[ ]
= J[ ]K
transpose (xs : xss) = J(:) xs (transpose xss)K
In fact, repeat and zapp are not the return and ap of any Monad.
3 Traversing data structures
Have you noticed that sequence and transpose now look rather alike? The details
that distinguish the two programs are inferred by the compiler from their types.
Both are instances of the applicative distributor for lists:
dist :: Applicative f ⇒[f a ] →f [a ]
dist [ ]
= J[ ]K
dist (v : vs) = J(:) v (dist vs)K
Distribution is often used together with ‘map’. For example, given the monadic
‘failure-propagation’ applicative functor for Maybe, we can map some failure-prone
operation (a function in a →Maybe b) across a list of inputs in such a way that
any individual failure causes failure overall.
ﬂakyMap :: (a →Maybe b) →[a ] →Maybe [b]
ﬂakyMap f ss = dist (fmap f ss)
As you can see, ﬂakyMap traverses ss twice—once to apply f , and again to collect the
results. More generally, it is preferable to deﬁne this applicative mapping operation
directly, with a single traversal:
traverse :: Applicative f ⇒(a →f b) →[a ] →f [b]
traverse f
[ ]
= J[ ]K
traverse f (x : xs) = J(:) (f x) (traverse f xs)K
This is just the way you would implement the ordinary fmap for lists, but with
the right-hand sides wrapped in J· · ·K, shifting them into the idiom. Just like fmap,
traverse is a useful gadget to have for many data structures, hence we introduce the
type class Traversable, capturing functorial data structures through which we can
thread an applicative computation:
class Traversable t where
traverse :: Applicative f ⇒(a →f b) →t a
→f (t b)
dist
:: Applicative f ⇒
t (f a) →f (t a)
dist
= traverse id
Of course, we can recover an ordinary ‘map’ operator by taking f to be the identity—
the simple applicative functor in which all computations are pure:
newtype Id a = An{an :: a }

6
Conor McBride and Ross Paterson
Haskell’s newtype declarations allow us to shunt the syntax of types around with-
out changing the run-time notion of value or incurring any run-time cost. The
‘labelled ﬁeld’ notation deﬁnes the projection an::Id a →a at the same time as the
constructor An :: a →Id a. The usual applicative functor has the usual application:
instance Applicative Id where
pure
= An
An f ⊛An x = An (f x)
So, with the newtype signalling which Applicative functor to thread, we have
fmap f = an · traverse (An · f )
Meertens (1998) deﬁned generic dist-like operators, families of functions of type
t (f a) →f (t a) for every regular functor t (that is, ‘ordinary’ uniform datatype
constructors with one parameter, constructed by recursive sums of products). His
conditions on f are satisﬁed by applicative functors, so the regular type constructors
can all be made instances of Traversable. The rule-of-thumb for traverse is ‘like fmap
but with J· · ·K on the right’. For example, here is the deﬁnition for trees:
data Tree a = Leaf | Node (Tree a) a (Tree a)
instance Traversable Tree where
traverse f
Leaf
= JLeaf K
traverse f (Node l x r) = JNode (traverse f l) (f x) (traverse f r)K
This construction even works for non-regular types. However, not every Functor
is Traversable. For example, the functor (→) env cannot in general be Traversable.
To see why, take env = Integer and try to distribute the Maybe functor!
Although Meertens did suggest that threading monads might always work, his
primary motivation was to generalise reduction or ‘crush’ operators, such as ﬂat-
tening trees and summing lists. We shall turn to these in the next section.
4 Monoids are phantom Applicative functors
The data that one may sensibly accumulate have the Monoid structure:
class Monoid o where
∅
:: o
(⊕) :: o →o →o
such that ‘⊕’ is an associative operation with identity ∅. The functional program-
ming world is full of monoids—numeric types (with respect to zero and plus, or one
and times), lists with respect to [ ] and ++, and many others—so generic technology
for working with them could well prove to be useful. Fortunately, every monoid
induces an applicative functor, albeit in a slightly peculiar way:
newtype Accy o a = Acc{acc :: o}
Accy o a is a phantom type (Leijen & Meijer, 1999)—its values have nothing to do
with a, but it does yield the applicative functor of accumulating computations:

Functional pearl
7
instance Monoid o ⇒Applicative (Accy o) where
pure
= Acc ∅
Acc o1 ⊛Acc o2 = Acc (o1 ⊕o2)
Now reduction or ‘crushing’ is just a special kind of traversal, in the same way as
with any other applicative functor, just as Meertens suggested:
accumulate :: (Traversable t, Monoid o) ⇒(a →o) →t a →o
accumulate f = acc · traverse (Acc · f )
reduce :: (Traversable t, Monoid o) ⇒t o →o
reduce = accumulate id
Operations like ﬂattening and concatenation become straightforward:
ﬂatten :: Tree a →[a ]
ﬂatten = accumulate (:[ ])
concat :: [[a ]] →[a ]
concat = reduce
We can extract even more work from instance inference if we use the type system
to distinguish diﬀerent monoids available for a given datatype. Here, we use the
disjunctive structure of Bool to test for the presence of an element satisfying a
given predicate:
newtype Mighty = Might{might :: Bool}
instance Monoid Mighty where
∅
= Might False
Might x ⊕Might y = Might (x ∨y)
any :: Traversable t ⇒(a →Bool) →t a →Bool
any p = might · accumulate (Might · p)
Now any · (≡) behaves just as the elem function for lists, but it can also tell
whether a variable from v occurs free in an Exp v. Of course, Bool also has a
conjunctive Musty structure, which is just as easy to exploit.
5 Applicative versus Monad?
We have seen that every Monad can be made Applicative via return and ap. Indeed,
two of our three introductory examples of applicative functors involved the IO
monad and the environment monad (→) env. However the Applicative structure we
deﬁned on lists is not monadic, and nor is Accy o (unless o is the trivial one-point
monoid): return can deliver ∅, but if you try to deﬁne
(>>=) :: Accy o a →(a →Accy o b) →Accy o b
you’ll ﬁnd it tricky to extract an a from the ﬁrst argument to supply to the second—
all you get is an o. The ⊛for Accy o is not the ap of a monad.
So now we know: there are strictly more Applicative functors than Monads. Should
we just throw the Monad class away and use Applicative instead? Of course not! The
reason there are fewer monads is just that the Monad structure is more powerful.
Intuitively, the (>>=)::m a →(a →m b) →m b of some Monad m allows the value
returned by one computation to inﬂuence the choice of another, whereas ⊛keeps

8
Conor McBride and Ross Paterson
the structure of a computation ﬁxed, just sequencing the eﬀects. For example, one
may write
miﬀy :: Monad m ⇒m Bool →m a →m a →m a
miﬀy mb mt me = do
b ←mb
if b then mt else me
so that the value of mb will choose between the computations mt and me, perform-
ing only one, whilst
iﬀy :: Applicative f ⇒f Bool →f a →f a →f a
iﬀy fb ft fe = Jcond fb ft fe K where
cond b t e = if b then t else e
performs the eﬀects of all three computations, using the value of fb to choose only
between the values of ft and fe. This can be a bad thing: for example,
iﬀy JTrueK Jt K Nothing = Nothing
because the ‘else’ computation fails, even though its value is not needed, but
miﬀy JTrueK Jt K Nothing = Jt K
However, if you are working with miﬀy, it is probably because the condition
is an expression with eﬀectful components, so the idiom syntax provides quite a
convenient extension to the monadic toolkit:
miﬀy J(⩽) getSpeed getSpeedLimit K stepOnIt checkMirror
The moral is this: if you’ve got an Applicative functor, that’s good; if you’ve also
got a Monad, that’s even better! And the dual of the moral is this: if you want a
Monad, that’s good; if you only want an Applicative functor, that’s even better!
One situation where the full power of monads is not always required is parsing, for
which R¨ojemo (1995) proposed a interface including the equivalents of pure and ‘⊛’
as an alternative to monadic parsers (Hutton & Meijer, 1998). Several ingenious
non-monadic implementations have been developed by Swierstra and colleagues
(Swierstra & Duponcheel, 1996; Baars et al., 2004). Because the structure of these
parsers is independent of the results of parsing, these implementations are able to
analyse the grammar lazily and generate very eﬃcient parsers.
Composing applicative functors The weakness of applicative functors makes them
easier to construct from components. In particular, although only certain pairs of
monads are composable (Barr & Wells, 1984), the Applicative class is closed under
composition,
newtype (f ◦g) a = Comp{comp :: (f (g a))}
just by lifting the inner Applicative operations to the outer layer:
instance (Applicative f , Applicative g) ⇒Applicative (f ◦g) where
pure x
= Comp J(pure x)K
Comp fs ⊛Comp xs = Comp J(⊛) fs xs K

Functional pearl
9
As a consequence, the composition of two monads may not be a monad, but it is
certainly applicative. For example, both Maybe ◦IO and IO ◦Maybe are applicative:
IO◦Maybe is an applicative functor in which computations have a notion of ‘failure’
and ‘prioritised choice’, even if their ‘real world’ side-eﬀects cannot be undone. Note
that IO and Maybe may also be composed as monads (though not vice versa), but the
applicative functor determined by the composed monad diﬀers from the composed
applicative functor: the binding power of the monad allows the second IO action to
be aborted if the ﬁrst returns a failure.
We began this section by observing that Accy o is not a monad. However, given
Monoid o, it can be deﬁned as the composition of two applicative functors derived
from monads—which two, we leave as an exercise.
Accumulating exceptions The following type may be used to model exceptions:
data Except err a = OK a | Failed err
A Monad instance for this type must abort the computation on the ﬁrst error, as
there is then no value to pass to the second argument of ‘>>=’. However with the
Applicative interface we can continue in the face of errors:
instance Monoid err ⇒Applicative (Except err) where
pure
= OK
OK f ⊛OK x
= OK (f x)
OK f ⊛Failed err
= Failed err
Failed err ⊛OK x
= Failed err
Failed err 1 ⊛Failed err 2 = Failed (err 1 ⊕err 2)
This could be used to collect errors by using the list monoid (as in unpublished
work by Duncan Coutts), or to summarise them in some way.
6 Applicative functors and Arrows
To handle situations where monads were inapplicable, Hughes (2000) deﬁned an
interface that he called arrows, deﬁned by the following class with nine axioms:
class Arrow (⇝) where
arr
:: (a →b) →(a ⇝b)
(≫) :: (a ⇝b) →(b ⇝c) →(a ⇝c)
ﬁrst :: (a ⇝b) →((a, c) ⇝(b, c))
Examples include ordinary ‘→’, Kleisli arrows of monads and comonads, and stream
processors. Equivalent structures called Freyd-categories had been independently
developed to structure denotational semantics (Power & Robinson, 1997).
There are similarities to the Applicative interface, with arr generalising pure. As
with ‘⊛’, the ‘≫’ operation does not allow the result of the ﬁrst computation to
aﬀect the choice of the second. However it does arrange for that result to be fed to
the second computation.
By ﬁxing the ﬁrst argument of an arrow type, we obtain an applicative functor,
generalising the environment functor we saw earlier:

10
Conor McBride and Ross Paterson
newtype EnvArrow (⇝) env a = Env (env ⇝a)
instance Arrow (⇝) ⇒Applicative (EnvArrow (⇝) env) where
pure x
= Env (arr (const x))
Env u ⊛Env v = Env (u△v ≫arr (λ(f , x) →f x))
where u△v = arr dup ≫ﬁrst u ≫arr swap ≫ﬁrst v ≫arr swap
dup a = (a, a)
swap (a, b) = (b, a)
In the other direction, each applicative functor deﬁnes an arrow constructor that
adds static information to an existing arrow:
newtype StaticArrow f (⇝) a b = Static (f (a ⇝b))
instance (Applicative f , Arrow (⇝)) ⇒Arrow (StaticArrow f (⇝)) where
arr f
= Static J(arr f )K
Static f ≫Static g = Static J(≫) f g K
ﬁrst (Static f )
= Static Jﬁrst f K
To date, most applications of the extra generality provided by arrows over monads
have been either various forms of process, in which components may consume mul-
tiple inputs, or computing static properties of components. Indeed one of Hughes’s
motivations was the parsers of Swierstra and Duponcheel (1996). It may turn out
that applicative functors are more convenient for applications of the second class.
7 Applicative functors, categorically
The Applicative class features the asymmetrical operation ‘⊛’, but there is an equiv-
alent symmetrical deﬁnition.
class Functor f ⇒Monoidal f where
unit :: f ()
(⋆) :: f a →f b →f (a, b)
These operations are clearly deﬁnable for any Applicative functor:
unit
:: Applicative f ⇒f ()
unit
= pure ()
(⋆)
:: Applicative f ⇒f a →f b →f (a, b)
fa ⋆fb = J(, ) fa fb K
Moreover, we can recover the Applicative interface from Monoidal as follows:
pure
:: Monoidal f ⇒a →f a
pure x
= fmap (λ
→x)
unit
(⊛)
:: Monoidal f ⇒f (a →b) →f a →f b
mf ⊛mx = fmap (λ(f , x) →f x) (mf ⋆mx)
The laws of Applicative given in Section 2 are equivalent to the usual Functor laws,
plus the following laws of Monoidal:

Functional pearl
11
naturality of ⋆
fmap (f × g) (u ⋆v) = fmap f u ⋆fmap g v
left identity
fmap snd (unit ⋆v) = v
right identity
fmap fst (u ⋆unit) = u
associativity
fmap assoc (u ⋆(v ⋆w)) = (u ⋆v) ⋆w
for the functions
(×) :: (a →b) →(c →d) →(a, c) →(b, d)
(f × g) (x, y) = (f x, g y)
assoc :: (a, (b, c)) →((a, b), c)
assoc (a, (b, c)) = ((a, b), c)
Fans of category theory will recognise the above laws as the properties of a lax
monoidal functor for the monoidal structure given by products. However the functor
composition and naturality equations are actually stronger than their categorical
counterparts. This is because we are working in a higher-order language, in which
function expressions may include variables from the environment, as in the above
deﬁnition of pure for Monoidal functors. In the ﬁrst-order language of category
theory, such data ﬂow must be explicitly plumbed using functors with tensorial
strength, an arrow:
tAB : A × F B −→F (A × B)
satisfying standard equations. The natural transformation m corresponding to ‘⋆’
must also respect the strength:
(A × B) × (F C × F D)
∼=
(A × F C) × (B × F D)
(A × B) × m
y
yt × t
(A × B) × F (C × D)
F (A × C) × F (B × D)
t
y
ym
F ((A × B) × (C × D))
∼=
F ((A × C) × (B × D))
Note that B and F C swap places in the above diagram: strong naturality implies
commutativity with pure computations.
Thus in categorical terms applicative functors are strong lax monoidal functors.
Every strong monad determines two of them, as the deﬁnition is symmetrical. The
Monoidal laws and the above deﬁnition of pure imply that pure computations com-
mute past eﬀects:
fmap swap (pure x ⋆u) = u ⋆pure x
The proof (an exercise) makes essential use of higher-order functions.
8 Conclusions
We have identiﬁed Applicative functors, an abstract notion of eﬀectful computation
lying between Arrow and Monad in strength. Every Monad is an Applicative func-
tor, but signiﬁcantly, the Applicative class is closed under composition, allowing
computations such as accumulation in a Monoid to be characterised in this way.

12
Conor McBride and Ross Paterson
Given the wide variety of Applicative functors, it becomes increasingly useful
to abstract Traversable functors—container structures through which Applicative
actions may be threaded. Combining these abstractions yields a small but highly
generic toolkit whose power we have barely begun to explore. We use these tools by
writing types that not merely structure the storage of data, but also the properties
of data that we intend to exploit.
The explosion of categorical structure in functional programming: monads, comon-
ads, arrows and now applicative functors should not, we suggest, be a cause for
alarm. Why should we not proﬁt from whatever structure we can sniﬀout, ab-
stract and re-use? The challenge is to avoid a chaotic proliferation of peculiar and
incompatible notations. If we want to rationalise the notational impact of all these
structures, perhaps we should try to recycle the notation we already possess. Our
J f u1 . . . un K notation does minimal damage, showing when the existing syntax
for applicative programming should be interpreted with an eﬀectful twist.
Acknowledgements McBride is funded by EPSRC grant EP/C512022/1. We thank
Thorsten Altenkirch, Duncan Coutts, Jeremy Gibbons, Peter Hancock, Simon Pey-
ton Jones, Doaitse Swierstra and Phil Wadler for their help and encouragement.
References
Baars, A.I., L¨oh, A., & Swierstra, S.D. (2004). Parsing permutation phrases. Journal of
functional programming, 14(6), 635–646.
Barr, Michael, & Wells, Charles. (1984). Toposes, triples and theories. Grundlehren der
Mathematischen Wissenschaften, no. 278. New York: Springer. Chap. 9.
Fridlender, Daniel, & Indrika, Mia. (2000).
Do we need dependent types?
Journal of
Functional Programming, 10(4), 409–415.
Hughes, John. (2000). Generalising monads to arrows. Science of computer programming,
37(May), 67–111.
Hutton, Graham, & Meijer, Erik. (1998). Monadic parsing in Haskell. Journal of functional
programming, 8(4), 437–444.
Leijen, Daan, & Meijer, Erik. 1999 (Oct.). Domain speciﬁc embedded compilers. 2nd
conference on domain-speciﬁc languages (DSL). USENIX, Austin TX, USA. Available
from http://www.cs.uu.nl/people/daan/papers/dsec.ps.
Meertens, Lambert. 1998 (June). Functor pulling. Workshop on generic programming
(WGP’98).
Peyton Jones, Simon (ed). (2003). Haskell 98 language and libraries: The revised report.
Cambridge University Press.
Power, John, & Robinson, Edmund. (1997). Premonoidal categories and notions of com-
putation. Mathematical structures in computer science, 7(5), 453–468.
R¨ojemo, Niklas. (1995). Garbage collection and memory eﬃciency. Ph.D. thesis, Chalmers.
Swierstra, S. Doaitse, & Duponcheel, Luc. (1996). Deterministic, error-correcting combi-
nator parsers. Pages 184–207 of: Launchbury, John, Meijer, Erik, & Sheard, Tim (eds),
Advanced functional programming. LNCS, vol. 1129. Springer.
Wadler, Philip. (1985). How to replace failure by a list of successes. Pages 113–128 of:
Jouannaud, Jean-Pierre (ed), Functional programming languages and computer archi-
tecture. LNCS, vol. 201. Springer.

