Compilation for Quantum Computing on Chiplets
Hezi Zhang1, Keyi Yin1, Anbang Wu1, Hassan Shapourian2, Alireza Shabani2 and Yufei Ding1
1University of California, San Diego
2Cisco Quantum Lab
Abstract—Chiplet architecture is an emerging architecture
for quantum computing that could significantly increase qubit
resources with its great scalability and modularity. However, as
the computing scale increases, communication between qubits
would become a more severe bottleneck due to the long routing
distances. In this paper, we trade ancillary qubits for program
concurrency by proposing a multi-entry communication highway
mechanism, and building a compilation framework to efficiently
manage and utilize the highway resources. Our evaluation shows
that this framework significantly outperforms the baseline ap-
proach in both the circuit depth and the number of operations
on some typical quantum benchmarks, leading to a more efficient
and less error-prone compilation of quantum programs.
I. INTRODUCTION
The past decade has witnessed exciting breakthroughs of
quantum computing technologies on various hardware plat-
forms [1], [2], [3], [4], [5], [6], [7], with the superconducting
platform being one of the leading candidates. However, the
complexity of building increasingly larger devices [8], [9] and
the capacity limitation of individual cryogenic dilution refrig-
erators [10], [11] lead to extreme challenges for eventually
realizing a giant superconducting quantum chip. Moreover, the
fabrication yields will also decline as the number of qubits
on the chip increases, leading to a significant increase in
manufacturing costs. To realize large-scale quantum comput-
ers, a modular system linking processors together, either with
long-range or short-range links [12], [13], [14], [15], [16], is
required.
Recently, there has been significant research interest [17],
[18], [19], [20] in the modular architecture that connects
nearby small quantum processors, known as chiplets, due to
advancements in short-range inter-chip connections on super-
conducting platforms [21], [22], [23], [24], [25]. These chiplets
form a multi-chip processor that offers a middle ground be-
tween monolithic computing and long-range distributed quan-
tum networks. This approach will enable 1-10 thousand qubits
in the near term [26], with physical gate error rates ranging
from 1e-4 (e.g. single-qubit gates [27]) to 1e-2 (e.g. cross-chip
links [25]). It is essential to acknowledge that this computing
scale remains a considerable distance from reaching the real-
world fault-tolerant quantum computing, as the 1-10 thousand
physical qubits could accommodate only several long-lived
logical qubits [28] and the gate error rates are still above
the fault-tolerant threshold [29]. However, it already has the
potential to significantly advance the capabilities of near-term
quantum computing and empower a range of applications in
the NISQ era.
Despite the significant leap in scale, this emerging chiplet
architecture presents a new set of challenges which requires
novel techniques in compilation of quantum programs. First,
with the increased computing scale comes longer execution
time of quantum programs, which places a higher demand on
the decoherence time of the qubits. Second, the use of different
technologies for on-chip and cross-chip connections introduces
heterogeneity in their characteristics, with the fidelity of
cross-chip connections typically lower than that of on-chip
connections. Third, in contrast to the possibility of all-to-
all connectivity between processors in long-range distributed
quantum computing, cross-chip connections in the chiplet
architecture are subject to constraints that limit connectivity
to neighboring chiplets only, and these cross-chip connections
may be sparser than on-chip ones. These challenges cannot be
addressed directly by existing compilers which are designed
and tailored for either monolithic or (long-range) distributed
quantum computing for the following reasons.
On one hand, compilation techniques for monolithic quan-
tum computing is not efficient at the scale of computing on
chiplets. Monolithic compilers rely on insertion of SWAP gates
to route qubits of each gate toward each other [30], thus
enabling the multi-qubit gate execution between distant qubits.
However, the routing paths of qubits increase with the scale
of computing, and the qubits may route back and forth if they
are involved in multiple gates. Hence this approach would
result in significant latency that soon becomes intolerable for
the chiplet architecture. Moreover, these compilers do not take
into account the discrepancy between fidelities of on-chip and
cross-chip connections.
On the other hand, compilation techniques for distributed
quantum computing cannot be effectively applied to the chiplet
architecture either. Distributed compilers focus on minimiz-
ing the long-range communications, with the motivation that
remote gates between processors are much more expensive
than the local ones within each processor. However, this
should not be the only objective for compilation on the chiplet
architecture, as the discrepancy between on-chip connections
and cross-chip connections is not as significant as that in the
distributed quantum computing. Furthermore, these compilers
usually make some assumptions that are not applicable to
the chiplet architecture, such as an all-to-all connectivity
among different processors or easy access to the dedicated
communication qubits from any data qubit.
In this paper, we investigate the optimization of quan-
tum program compilation for the chiplet architecture to re-
arXiv:2305.05149v2  [quant-ph]  16 Oct 2023

veal the sweet spot between monolithic quantum computing
and distributed quantum computing. The insight is that the
aforementioned challenges can be overcome by innovative
compilation techniques being novel at three levels. First, the
computing paradigm with the circuit model can be extended to
trade additional ancillary qubits for more concurrency of gate
execution, thus reducing the execution time and mitigating the
increasing demand for coherence time. Second, the communi-
cation between data qubits can be boosted through an efficient
communication mechanism over the ancillary qubits, so that
ancillary qubits can be allocated in an architecture-aware
manner and states on these ancillary qubits can be prepared in
a fast way. Third, gates in a program can be scheduled by a
compiler to execute with or without the ancillary qubits based
on their patterns in the program, with their qubits routed by
the compiler accordingly to respect the conncetivity constraints
within or among the chiplets.
To this end, we propose a compilation framework that
incorporates optimizations at all these three levels. At the
level of computing paradigm, we adopt a hybrid of gate-
based computing and measurement-based computing by in-
corporating ancillary qubits. In particular, the ancillary qubits
operate in a measurement-based manner, taking advantage of
the recent advancement of dynamic circuit [31], while the
regular data qubits remain in their purely gate-based manner.
This hybrid paradigm enables a tradeoff between additional
qubit resources and program concurrency by leveraging the
outstanding concurrency of the protocol in [32] (Figure 3). To
make a balance between a maximal concurrency and a minimal
wait time for ancillary resources, we dynamically rewrite the
circuit to aggregate gates suitable for concurrent execution,
selecting the ones with the highest potential of concurrency as
the top candidates.
At the level of communication mechanism, we abstract
the ancillary qubits into an adjustable multi-entry communica-
tion highway and provide a mechanism that enables efficient
utilization of the highway with minimized qubit overhead. The
highway forms a communication channel on the software level
without the need of hardware modification, which spans across
the chiplets to enable concurrent gate execution regardless
of the distances among the involved qubits. The mechanism
we propose achieves the efficiency by a protocol that allows
fast preparation of entangled states on the highway, thereby
reducing the wait time for the highway resources. Moreover,
this mechanism reduces the qubit overhead in an architecture-
aware manner by allocating the ancillary qubits in a sparse
structure with the help of bridge gates while keeping an eye
on the distinction between on-chip and cross chip links.
At the level of program compilation, we fully exploit the
highway resources with a dynamic scheduling of gates and an
efficient routing of relevant qubits that maximize the sharing of
highway resources. In particular, the periods of communication
protocols are determined dynamically based on the communi-
cation demand to accommodate as many gates as possible in
each round, allowing a temporal sharing of highway resource
among gates. The routing addresses the hardware connectivity
constraints with optimizations from two aspects. First, we
route necessary qubits towards nearby highway in a way that
ensures the earliest execution of their gates. Second, we route
those gates through the highway in a way that minimizes the
lengths of routing paths by allowing spatial sharing of highway
resources among qubits. To summarize, our contributions in
this paper are listed as follows:
• We propose a hybrid computing paradigm that allows
measurement-based operations on additional ancillary
qubits to trade qubit resources for program concurrency,
thus mitigating the enhanced demand for coherence time
by larger scale of quantum computing.
• We abstract the ancillary qubits into an adjustable multi-
entry communication highway at the software level, and
propose a communication mechanism for architecture-
aware allocation of highway with small overhead and fast
preparation of entangled states on the highway.
• We perform compilation optimizations with a dynamic
scheduling of communication protocols and efficient rout-
ing of relevant qubits under the connectivity constraints,
allowing for temporal and spatial sharing of highway
resources to fully exploit the highway.
• We demonstrate a corresponding compilation framework
that significantly outperforms the baseline in both the
circuit depth and the number of operations. The eval-
uation results show a trend of reduced qubit overhead
and increased outperformance as the computing scale
increases, suggesting the scalibility of our framework.
II. BACKGROUND AND RELATED WORK
A. Quantum Computing Basics
1) Entangled States
Entangled states can serve as valuable resources for quan-
tum computational tasks. For example, the GHZ states can be
used to facilitate qubit communication over long distances. To
prepare an N-qubit GHZ state, one can start with N qubits in
the state |0⟩, and apply a chain of CNOT gates as illustrated
in Figure 1(a), with the blue dots connected by wavy lines
standing for the GHZ state. Another example is the utilization
of cluster states, a pure quantum state of qubits arranged in
a lattice G = (V, E), enables universal computation in the
measurement-based quantum computing (MBQC) model. To
prepare a cluster state, one can initialize all qubits in G to
the |+⟩state and then apply CZ gates between each pair of
neighboring qubits in graph G. A 1-dim example is illustrated
in Figure 1(b), with the blue dots connected by straight lines
standing for the cluster state.
2) Quantum Gates
In the circuit model of quantum computing, qubits are
manipulated by quantum gates such as the 1-qubit Hadamard
gate and 2-qubit CNOT gate. By arranging these basic gates
appropriately, it is possible to abstract higher-level gates for
communicating quantum data between qubits. For instance, a
SWAP gate can exchange the states of two qubits, which can
be achieved by 3 CNOT gates as illustrated in Figure 2(a).

H
| 〉
+
| 〉
+
| 〉
+
|0〉
|0〉
|0〉
|0〉
| 〉
+
(a) GHZ state
(b) cluster state
Fig. 1. GHZ state and cluster state preparation.
A bridge gate can perform an effective CNOT between two
qubits that cannot interact with each other directly, through the
use of a third qubit. This can be accomplished using 4 CNOT
gates as depicted in Figure 2(b). These gates play an important
role in addressing the connectivity constraints between qubits
on the hardware, and are widely used in various compilation
frameworks.
(a) SWAP gate
(b) Bridge gate
Fig. 2. SWAP and bridge gates.
3) Quantum Measurement
Quantum measurement is a fundamental operation that
allows us to extract information about the state of a quan-
tum system. While measurements of quantum circuits are
traditionally performed in a delay-to-the-end manner, recent
advancement of hardware technologies [31] has enabled dy-
namic circuits with mid-circuit measurements. This allows a
seamless incorporation of real-time classical communication
into quantum circuits, and will greatly increase the variety of
circuits that can be executed on near-term quantum hardware,
forming an important part of many quantum applications in
the future.
B. Quantum Architecture and Compiler
1) Monolithic Quantum Computing
Monolithic architecture is the simplest architecture for
quantum computing that presents a self-contained system on
a single chip. However, it faces extreme challenges in its
scalability [19], as the increasing number of qubits would
increase the noise, reduce the yield rate of manufacturing,
and eventually push the capability of cooling and control
technologies to their limit.
Compilation for monolithic quantum computing is responsi-
ble for transforming quantum circuits to a form that complies
with the constraints of the underlying hardware. In particular,
it addresses the connectivity constraints among physical qubits
by routing logical qubits involved in the same gate to physical
qubits that are directly connected on the hardware. On state-
of-the-art compilers [30], [33], [34], [35], this is achieved by
insertion of SWAP or bridge gates into the circuit. However,
as the scale of computing increases, this compilation approach
will become inefficient, because the increasingly long paths of
SWAP routing will result in significant latency and harm the
overall fidelity.
2) Distributed Quantum Networks
A distributed architecture for quantum computing, also
known as a distributed quantum network, comprises multi-
ple processing nodes that are physically separated across a
considerable distance. While quantum channels across the
nodes can be realized by the microwave-to-optical (M2O)
internode links [36], [37], [38], [39], [40], [41], these links are
typically much noisier and slower than the connections within
each node [12], [19]. Moreover, the internode communica-
tions rely on complex protocols [42], [43], usually including
the preparation, distribution and measurement of EPR pairs.
Consequently, remote operations conducted across the nodes
are considered much more expensive than the local ones.
Compilers for the distributed architecture primarily focuses
on minimizing the number of these expensive remote opera-
tions. This objective can be achieved by an efficient utilization
of entangled states among different nodes. For example, [32]
proposes a protocol that enables simultaneous data control on
multiple nodes with the help of a pre-established GHZ state.
This protocol is shown in Figure 3, with the dark blue nodes
connected by wavy lines standing for the GHZ state. The three
entangled qubits q0, q4, q7 in the GHZ state are distributed
to three different nodes, with the first node containing qubits
{q0, q1, q2, q3}, the second node containing {q4, q5, q6} and the
third one containing {q7, q8, q9}. By entangling control qubit
q1 with a qubit q0 in the GHZ state, conducting a measurement
on q0 with Pauli corrections on all the other qubits in the
GHZ state, q1 involves its data into the entangled state, and
enables simultaneous control gates over qubits on all the three
nodes. However, in distributed compilers [44], [45], [46], [47],
certain assumptions are usually made, such as that each node
may communicate with any other node in the network, and
the data qubits on each node can easily access the dedicated
communication qubits on the same node.
X
X
H
H
Z
+
Fig. 3. Communication Protocol.
3) Chiplet Architecture
The chiplet architecture for quantum computing integrates
multiple small, locally-connected chips, known as chiplets, to
form a multi-chip module (MCM). This can be achieved by
linking separate physical modules to a larger carrier chip or
interposer using flip-chip bonds, as demonstrated in [25], or by
using cryogenic links to create a small-scale intranet to connect

devices in different refrigerators, as shown in [23]. The chiplet
architecture offers greater scalability than the monolithic archi-
tecture, as the smaller size of the chiplets results in higher yield
and lower fabrication costs, and reduces the complexity of
design verification and post-fabrication testing. Furthermore,
it has better performance than the distributed architecture, as
the short-range cross-chip connections can be made with lower
latency and higher fidelity compared to long-range internode
links.
Recent research on the architecture side has shown the
potential of chiplet architecture to exceed the performance
of monolithic architecture on near-term hardware [19] and
demonstrated the feasibility of scaling quantum computing
through modularity by analysis of yield and gate perfor-
mance [20]. However, there is still much work to be done
on the compilation side.
C. Communication between qubits
Quantum communication takes place via the movement of
qubits or the transfer of their quantum states. [48] studies
a qubit wire composed of a line of qubits, facilitating com-
munication through swapping channels or teleportation. This
research analyzes the fabrication challenges using solid-state
silicon technology and associated classical control logic. [49]
investigates the construction of reliable quantum channels with
ion trap technology. This work explores the combination of
ballistic ion movement and quantum teleportation with entan-
glement purification for long-distance qubit communication,
addressing the routing problem for distributing EPR pairs.
[50] demonstrates on-chip genuine multipartite entanglement
and quantum teleportation in silicon by coherently controlling
an integrated network of microresonator nonlinear single-
photon sources and linear optic multiqubit entangling circuits.
[51] proposes a multi-core architecture that utilizes dedicated
communication qubits and specialized physical channels to
perform inter-core quantum communication via quantum tele-
portation. [52] incorporates the teleportation protocol in qubit
mapping. But due to the lack of optimization, their compiler
[53] can only handle small-scale circuits, thus not applicable
for the chiplet architecture.
Although quantum communication schemes over long dis-
tances have been described in the literature above, what has
been missing is an efficient management of communication
resources that allows different operations to share and utilize
the available resources to their full potential. Our work fills
this gap by conceptualizing the communication resources to
an adjustable multi-entry communication highway (MECH).
In this model, different qubits and gates can simultaneously
access and share the resources, entering and exiting the
highway at various points along it based on their needs. The
automatic rewriting of input circuits, the efficient preparation
and consumption of entanglement on the highway, and the
precise management of the timing and trajectories of accessing
the highway, all handled by our compiler, enhance the over-
all communication efficiency. Furthermore, as this highway
channel is purely software-driven, it can be readily adjusted
in response to the available qubits and to accommodate archi-
tectural heterogeneity.
III. OVERVIEW: BUILDING HIGHWAYS ON CHIPLETS
As quantum computing scales up with the help of the emerging
chiplet architecture, efficient communication between qubits
would become a critical challenge. The increasing routing
distances between qubits can lead to significant overhead in
executing quantum programs, limiting the scale of programs
that could be run within the coherence time. To overcome
this challenge, a high-speed communication channel needs to
be built on the chiplets to facilitate efficient communication
between distant qubits, akin to building highways across cities
to enable long-range transportation.
Our insight is that this high-speed communication channel
can be built on the software side, by enabling concurrency
between gate execution regardless of the distances among the
involved qubits. Specifically, the concurrency is achieved by
resolving the following two challenges. First, gate execution in
the superconducting quantum computing system can not reach
its maximum concurrency due to the hardware constraints.
While in principle, execution of commutable gates in a circuit
do not have dependency on each other, on the superconductive
platform they have to be executed sequentially if they share
common qubits. Second, communications between distant
qubits are usually achieved through insertion of sequential
SWAP gates between them. When qubits are involved in
multiple gates, they often have to be routed back and forth,
preventing the concurrent execution among those gates.
To build the communication channel, we provide an ap-
proach that allocates some of the qubits as ancillary qubits and
establishes entanglements among them. These entanglements
can then be utilized as a computing resource to connect distant
qubits and enhance the concurrency of their operations. In
particular, we make use of the communication protocol as
shown in Figure 3 which allows simultaneous execution of
controlled gates sharing the same control qubit. Controlled
gates sharing the same target qubit can also utilize this protocol
by transforming themselves to controlled gates sharing the
same control, which will be more clear in later sections.
The GHZ states required by the protocol are formed on the
ancillary qubits, which are allocated close to each on the hard-
ware, forming a computational highway across the chiplets. By
sacrificing a small portion of qubit resources, which is not as
scarce as in monolithic computing with the highly scalable
chiplet architecture, we can trade for more concurrency using
this protocol originally proposed for distributed computing.
To illustrate the computation process at the presence of
highway, Figure 4 shows an example of executing the circuit
in Figure 4(a) on a chiplet architecture in Figure 4(c). The
architecture consists of 3x3 chiplets each containing 5x5
qubits, with the highlighted qubits in dark blue being the
ancillary qubits that form a highway across the chiplets. In
the circuit (4(a)), gates {C21, C23, C24}, gates {C65, C67, C68}
and gates {C43, C48, C41, C47} are three sets of commutable
gates that can be executed concurrently via the utilization of
highway. Thus we aggregate them into multi-target controlled

Len-9 GHZ
Len-9 GHZ
Len-19 GHZ
1
2
3
highway
(b)
(c)
(a)
data qubit
(d)
qubit chiplet
Fig. 4. Computation process on chiplets at the presence of highway (dark blue paths in (c)). Commutable gates in circuit (a) are aggregated to multi-target
control gates (b) and executed simultaneously on the highway (d).
gates C2_134, C6_578 and C4_1378 (shown with corresponding
colors in 4(b)) while keeping the other gates (i.e., gates C25
and C76 in black) as their original forms. At t = 1, the CNOT
components in C2_134 and C6_578 are executed concurrently
on two segments of GHZ states (orange and deep magenta
segments in 4(d), respectively), while at t = 4, the CNOT
components in C4_1378 are executed concurrently on a new
GHZ state prepared between t = 1 and t = 4 (green segment
4(d)). In contrast, the other gates are executed individually by
bringing their qubits together using SWAP gates (t = 2 and
t = 3 in 4(d)). We omit the details of scheduling and routing
here and will discuss them in later sections.
IV. HYBRID COMPUTING PARADIGM
Chiplet architecture is a highly scalable architecture that can
provide massive qubit resources for NISQ devices. This not
only leads to a leap of computing scale, but can also revolu-
tionize the quantum computing model by allowing a portion
of the qubits to become ancillary qubits. When combined
with the mid-circuit measurement technology, these ancillary
qubits can be utilized to increase the concurrency of circuit
execution, which is particularly crucial when operating at the
scale enabled by the chiplet architecture. This is because as the
scale increases, program execution time naturally increases,
thereby posing a considerable challenge to program fidelity
due to qubit decoherence. While this can be mitigated by the
hardware advancements aimed at extending coherence time,
we emphasize the vital role of software optimization, which
addresses the problem in a more cost-effective manner.
To take advantage of the ancillary qubits, we extend the
circuit model to a hybrid paradigm that allows different
manners of computation on different types of qubits. Specif-
ically, computation on the ancillary qubits is performed in
a measurement-intensive manner, while computation on the
regular qubits, which we call data qubits, remains in the
purely gate-based manner. This hybrid paradigm allows the
ancillary qubits to facilitate gate execution between data qubits
through a communication protocol depicted in Figure 3. The
protocol enables the simultaneous execution of control gates
that share the same control qubit by consuming pre-established
GHZ states among the ancillary qubits through 1-qubit mea-
surements. Given the prevalence of these controlled gates
in quantum programs, the integration of additional ancillary
qubits can significantly enhance program concurrency.
With this extended computing paradigm, concepts in the
circuit model need to be extended as well. In the circuit model,
gates with overlapping qubtis are considered as dependent
since execution of one gate must wait for the end of another
gate. This dependency relation forms a directed acyclic graph,
and the gates having no predecessors in this graph form a
front layer. To reflect the ability of simultaneous execution of
controlled gates in the extended paradigm, we call two gates
logically independent as long as they are commutable in the
circuit. Controlled gates that do not logically depend on any
unexecuted gates can be aggregated to multi-target controlled
gates if they share the same control qubits. These multi-target
controlled gates should also be included in the front layer as
they have the potential to become executable with the help of
ancillary qubits. As a result, we define an extended front layer
as the union of aggregated multi-target gates and the remaining
gates in the original front layer which are not involved in the
aggregation. The algorithm of forming the extended front layer
is shown in Algorithm 1.
In the aggregation process, we want to maximize the number

Algorithm 1: Extended Front Layer
Input: Set of Logically Resolved Gates R,
Front Layer F, cutoff k.
Output: Extended Font Layer E.
1 E.local = F;
2 E.highway = ∅;
3 for gate in F do
4
c = gate.control, t = gate.target;
5
Sc = {r | r ∈R && r.control == c};
6
St = {r | r ∈R && r.target == t};
7
if len(Sc) ≥len(St) then
8
gate.commt = Sc;
9
else
10
gate.commt = St;
11
end
12
R = R −gate.commt;
13 end
14 H = {gates with top k longest commt};
15 for gate in H do
16
m = combine(gate, gate.commt);
17
E.local.remove(gate);
18
E.highway.add(m);
19 end
20 return E;
of gates involved in the aggregation to maximize the potential
concurrency. But due to the capacity limit of the ancillary
qubits, these aggregated gates may suffer from a long wait
time if all of them are assigned to be executed with ancillary
qubits. To make a balance, we optimize the gate aggregation
in the following way. First, we maximize the number of targets
of the aggregated gates by allowing the rewriting of the circuit.
For example, this can include propagaing 1-qubit gates through
CNOT gates, commuting CNOT gates with each other, and
transforming CNOT gates sharing the same target qubit to
CNOT gates sharing the same control qubit. These rules are
summarized in Figure 5 and serve as useful, but not exhaustive,
guides for optimizing the aggregation process. Second, we
bound the number of multi-target gates in the extended front
layer by retaining only the best several candidates. This can
be achieved by ranking the aggregated gates based on their
numbers of target qubits, selecting the top k candidates as
highway gates, with the remaining gates recovered to original
two-qubit controlled gates. The parameter k makes a tradeoff
between maximizing the utilization of the ancillary qubits and
minimizing the congestion caused by the limited capacity.
Typically it can be set to a value such that the total number
of targets is equal to the maximum capacity of the highway.
V. EFFICIENT COMMUNICATION MECHANISM
The concurrency of the communication protocol shown in
Figure 3 comes from the consumption of pre-established
entanglement among the qubits. To lay a foundation for an
efficient utilization of ancillary qubits, we propose a mech-
anism for the entanglement preparation among the ancillary
qubits and the allocation of ancillary qubits onto the chiplet
architecture.
An efficient implementation of the protocol in Figure 3 calls
for a fast preparation of GHZ states. However, a straight-
forward preparation via chaining the qubits with CNOTs
H
H
H
H
H
H
H
H
（a）
（b）
（c）
（d）
（e）
Fig. 5. Several useful but not exhaustive curcuit rewriting rules for optimizing
the concurrent gates aggregation.
X
X
=1
=1
|0〉
|0〉
highway
qubit
state
(a)
(b)
cluster
bit
XOR
+
0
cat
state
+
+
+
0
0
+
+
+
=1
Fig. 6. Efficient preparation of cat states.
would result in a significant latency which is proportional
to the number of entangled ancillary qubits. To address this
challenge, we propose an efficient preparation strategy that
allows a constant-time preparation by leveraging the mid-
circuit measurement technology. In particular, this is achieved
by three steps. First, we prepare an n−qubit cluster state in a
highly parallel manner, establishing entanglements among the
highway qubits along a highway path. Second, we perform
measurements on half of the entangled qubits, forcing the
other half of the qubits to form a
n
2 −GHZ state. Third, a
longer GHZ state (e.g. n−qubit GHZ state) can be formed
by re-entangling the measured highway qubits, which can
be performed efficiently by applying parallel CNOT gates
controlled by the n
2 −GHZ state.
Figure 6 illustrates this process with an example of 6-qubit
state preparation. It entangles 6 qubits in an initial |+⟩⊗6 state
to a 6-qubit cat state as following. First, it prepares them to
a cluster state by applying CZ gates between each pair of
neighboring qubits, which can be done in two parallel groups.
Second, every other qubit is measured in an X-basis, followed
by Pauli operations according to the measurement outcomes.
Pauli operations on the unmeasured qubits correct the state
to a cat state, while those on the measured qubits reinitialize
each of them to a |0⟩state. The third step is applying a CNOT
between each pair of neighboring qubits, which are supposed
to consists of one measured qubit and one unmeasured qubit.
Let the measured one being control and the unmeasured being
target, this third step will eventually involve all qubits to a cat
state. On a hardware with native CNOT gates, this can be
transformed to a circuit in Fig.6.
When it comes to the allocation of ancillary qubits, there

(c)
(d)
+
+
+
0
0
0
+
0
+
+
0
0
+
0
+
0
cat
state
(b)
cluster
state
highway
qubit
interval
qubit
bridge
gate
(a)
Fig. 7. Partially interleaving highway structure (a) with its efficient GHZ state preparation (b), and interleaving highway structure (c) with its efficient GHZ
state preparation (d).
are three challenges we need to address. First, the efficient
preparation scheme would not be applicable for distant ancil-
lary qubits due to the connetivity constraint on the hardware.
For example, the circuit in Figure 6 can be directly executed
only when the ancillary qubits are adjacent to each other in
the coupling graph. Second, the presence of ancillary qubits
inevitably reduces the number of qubits that can be used as
data qubits since the total number of qubits is limited. Thus
we need to minimize this qubit overhead so that it does not
significantly affects the scale up of computing on the chiplets.
Third, as the cross-chip connections have lower fidelity than
the on-chip ones, the layout of ancillary qubits should be
designed to take this heterogeneity into account and minimize
the use of cross-chip connections.
To resolve the first challenge, ancillary qubits should be
allocated close to each other on the hardware. For example,
a series of ancillary qubits can be allocated adjacent to
each other, forming a consecutive path that enables direct
application of CNOT gates among the ancillary qubits. We
refer to this layout as a highway to indicate its speedup
for gate execution, and refer to the ancillary qubits forming
the highway as highway qubits. The highway should span
across chiplets to make sure that it can be accessed easily
by data qubits and facilitate communications between distant
qubits. To maintain the proximity between highway qubits, we
allocate the highway qubits prior to the computation and fix
their layout throughout the computation.
The second challenge can be tackled by making the highway
structure sparser with the help of bridge gates. Instead of
being strictly consecutive, the highway can also be structured
in a partially interleaving or interleaving manner, as shown
in Figure 7. In the partially interleaving case (7(a)), the
highway is composed by interleaved sections, where each
section contains consecutive qubits. The interleaving structure
(7(c)) is similar, but instead of divided into sections, the
highway qubits are interleaved throughout the entire highway.
In these structures, the interleaved qubits can be entangled
by bridge gates, still with a great concurrency. The concrete
circuit of preparing GHZ states on these highway structures
are shown in Figure 7(b),7(d), respectively. The intervals of
this interleave can be chosen according to the available qubit
resources and the scale of computing.
As for the third challenge, as each cross-chip gate can
introduce errors equivalent to several on-chip gates, it is
imperative to minimize their usage during the preparation of
the highway entanglement. We address this by allowing an ad-
hoc dense structures on the edges of each chiplet, so that the
entanglement among highway qubits on different chiplets can
be created by a direct CNOT instead of a bridge gate. These
ad-hoc highway qubits help balance the tradeoff between qubit
overhead and highway performance. They can also be added
on other vital locations whenever necessary, such as being
placed around the center of crossroads to reduce the latency
of entangled state preparation.
Intuitively, larger circuits should be able tolerate sparser
highway qubits and longer distances from data qubits to the
highway, because the increasing benefits of the highway model
can compensate for the overhead as the circuit scales up. This
intuition will be confirmed by experiments in Section VII. This
enables the significant suppression of qubit overhead for large
circuits by the utilization of bridge gates.
VI. ROUTING AND SCHEDULING STRATEGIES
To optimize the utilization of highway resources, it is crucial
to ensure an efficient implementation of highway gates and re-
duce the latency of communication protocols on the highway.
By highway gates, we refer to the gates executed through the
highway, while by local gates, we refer to the gates regulary
executed without the highway. Since each highway gate is a
multi-target controlled gate aggregated from multiple 2-qubit
controlled gates, we refer to each of these 2-qubit controlled
gates as a gate component of the highway gate.
For efficient implementation of highway gates, there are
two major challenges, arising from the hardware constraint
and the highway mechanism, respectively. First, due to the
connectivity constraints, the execution of a highway gate
requires each of its control and target qubits to be adjacent
to a highway qubit. Second, the efficient preparation of each
GHZ state involves CNOTs along a path of qubits, which is not
allowed to overlap with paths of other GHZ states. We refer
to these paths required by executions of highway gates as the

t = 1
t = 2
Idle highway qubit
data qubit
Busy highway qubit
t = 3
Measurement
Preparation
Fig. 8. Dynamic period of highway communication according to traffic demand.
highway paths occupied by corresponding gates. For example,
in Figure 4, the highway paths of C2_134 (orange gate in 4(b))
and C6_578 (deep magenta gate in 4(b)) are disjoint to each
other.
The first challenge can be overcome by a routing process
that brings qubtis of highway gates towards the highway.
Our insight is that each qubit involved in the highway gates
should be routed to a nearby highway entrance that enables the
earliest execution of its gate. In particular, routing towards the
highway is achieved by inserting SWAP gates along a path
that connects the qubit to the highway, where the highway
qubit at which the qubit arrives the highway is referred to
as its entrance to the highway. To find an optimal highway
entrance, each data qubit in the highway gates searches for
candidate entrances from its nearby highway qubits. Given
the current accumulated depth on the data qubit, its arrival
time to each candidate entrance can be obtained by finding the
shortest paths to the candidate, denoted as tarr. Compared with
the time that each candidate can become available from their
current occupancy, denoted as tava, we can get the data qubit’s
earliest execution time on each candidate entrance, which is
texe = max{tarr, tava}. Then the candidate with the earliest
texe is selected as the entrance for the data qubit. This entrance
assignment is performed on data qubits in an ascending order
of their shortest distance to the highway. In this way, we allow
data qubits furthuer from highway to reuse the routing paths of
closer data qubits, minimizing the conflicts between the local
routing paths.
The second challenge can be addressed by a routing through
the highway that finds the optimal highway path for each
highway gate. Our insight is that the length of the highway
path for a highway gate can be minimized by maximizing the
reuse of highway paths among the its different components.
Specifically, each component of the highway gate is assigned
a highway path that occupies the least number of additional
highway qubtis. This can be achieved by a shortest path search
between the component’s control entrance and target entrance,
with the weights of edges between occupied highway qubits
set as 0. In this process, if the highway path of a component
has to occupy a highway qubit that is already occupied by
components of a different highway gate, then the component is
temporarily not executable and has to wait for those occupied
highway qubits to be released. This highway path assignment
is performed for all components of each highway gate, in
descending order of the number of components in the highway
gates. Then the highway paths of components in the same
highway gate are merged into a whole path, with paths of
different highway gates occupying disjoint segments on the
highway.
To reduce the latency of communication protocols on the
highway, our insight is that a dynamic scheduling can be
employed to reuse the GHZ states, thus amortizing the latency
to all the highway gates. During the highway communication,
entanglements are periodically prepared and consumed, with
each round executing a group of gates via the communication
protocol. We allow a dynamic period for each round of
highway communication depending on the traffic demand so
that more gates can share the highway in the same round.
Figure 8 illustrate this with an example where 5 data qubits
contending for 3 entangled highway qubits. Although 3 of the
qubits can be executed at t = 1, this round of communication
waits until t = 3 so that the other 2 qubits can be executed
at t = 2 and t = 3. Then by destroying the entanglement
with measurements on the highway qubits at t = 4, this round
of communication ends and the highway qubits become free
to prepare for the next round. This dynamic period allows
different target qubits of a highway gate to share the same
highway entrance at different times, thus reducing the total
number of rounds required. The period of each round is
determined by waiting on more gates until a new round with
an overlapping highway path is needed by other gates. After a
new round is scheduled, subsequent highway gates can still be
added to this round if their arrival times are within the range
of its period, but they can no longer request to increase the
period.
VII. EVALUATION
A. Experiment Setup
Baseline We implement the baseline by applying state-of-the-
art compilation techniques in Qiskit [30]. We experiment with
both optimization level 2 and level 3, taking the superior
outcome as our baseline. For level 3, we used the noise
adaptive layout, wherein the error rate of cross-chip CNOTs
was set larger than on-chip CNOTs.
Benchmark programs We select Quantum Fourier transform
(QFT), quantum approximate optimization algorithm (QAOA),
Variational Quantum Eigensolver (VQE) and Bernstein Vazi-
rani (BV) algorithm as our benchmarks. For QAOA, we
choose the graph maxcut problem on randomly generated
graphs. Specifically, the graphs are generated by randomly

connecting half of all its possible edges. For VQE, we follow
the commonly used full-entanglement ansatz, which proves to
be an expressive ansatz [54], [55]. For BV, we select the secret
strings randomly, with approximately half of the digits being 0
and half being 1. In table I, we list the number of data qubits,
the number of total qubits, the size of each chiplet and the
size of the chiplet array for these benchmarks.
TABLE I
ARCHITECTURE SETTINGS.
name
#data
qubits
#total
qubits
chiplet
size
chiplet
array
program-261
261
324
6x6
3x3
program-360
360
441
7x7
3x3
program-495
495
576
8x8
3x3
program-648
648
729
9x9
3x3
Metric The first metric we consider is the depth of the
compiled circuit, as it represents the latency of the program
execution and is also essential for the mitigation of decoher-
ence. When couting the circuit depth, we only focused on
the 2-qubit CNOT gates and measurements, while ignoring
the 1-qubit gates and classical operations as they are much
faster. We count each measurement operation as a depth larger
than 1 as it may have more latency than gate operations. The
second metric we consider is the number of the most error-
prone operations, including on-chip CNOT gates, cross-chip
CNOT gates and measurements. We address the difference in
their error rates based on the fact that when these error rates
are small, the overall error rate is
error_rate = 1 −
Y
i
(1 −pi)ni =
X
i
nipi + O(p2
i )
where ni is the number of the ith operation, and pi is its
error rate. Specifically, we define an effective number of CNOT
gates, abbreviated as ‘eff_CNOT’,
#eff_CNOTs = #on_chip_CNOTs
+ pcross
pon
× #cross_chip_CNOTs
+ pmeas
pon
× #measurements
where pon, pcross and pmeas are the error rates of on-chip
CNOTs, cross-chip CNOTs and measurements, respectively.
Coupling Structure Our experiments are performed for
chiplets of various structures, including square, hexagon,
heavy-square and heavy-hexagon. The concrete coupling struc-
tures of them are shown in Figure 9, with the black edges
indicating the on-chip connections and the red edges indicating
the cross-chip connections.
B. Experiment Result
In this subsection, we demonstrate the performance and scal-
ability of our framework. We adopt a rate 7.4 for pcross/pon
according to recent fidelities [25], [27]. For measurements,
we adopt a ratio pmeas/pon = 2.2 based on recent fidelities
[56] as well as the fidelities on IBM hardware [57]. Each
Square
Hexagon
Heavy
Hexagon
Heavy
Square
Name
Building blocks
Single chiplet
Connected chiplets
Fig. 9. Different structures for chiplet architecture. Black lines indicate on-
chip connections, red lines indicate cross-chip connections.
measurement is counted as a depth of 2 [57]. These param-
eters will be varied in the sensitivity analysis later. In this
subsection, we focus on the square coupling structure. Other
coupling structures will be explored in sensitivity analysis too.
a) Performance
Table II shows the results of the baseline and our framework
on the chiplets with square structure. The chiplets are arranged
in a 3x3 array, with the size of each chiplet varying from 6x6
to 9x9. It can be seen that our framework significantly reduces
both the circuit depth and the effective number of CNOT
gates compared to the baseline. On average (geomean), the
circuit depth is reduced by 69.05%, and the effective number
of CNOTs is reduced by 27.25%. Among the benchmarks,
BV has the most significant improvements, because all the
CNOT gates in a BV circuit share the same control qubit.
Furthermore, as the chiplet size increases, the qubit overhead
decreases from 19.4% to 11.1%. This reduction suggests that
sparser highway qubits and longer distances from data qubits
to the highway are more tolerable for larger-scale circuits.
b) Scalability
Besides the demonstration on varying sizes of chiplets, we
demonstrate the scalability of our framework by evaluating on
varying numbers of chiplets. Figure 10 shows the improve-
ments in the circuit depth (10(a)) and the effective number
of CNOTs (10(b)) by our framework on 2x2, 2x3, 3x3 and
3x4 chiplet arrays, with the size of each chiplet being fixed
as 7x7. It can be seen that our framework not only achieves
significant improvement in performance, but the improvement
also increases as the number of chiplets increases. This trend
suggests that the highway model will play a critical role in the
way of achieving tens of thousands of qubits with the chiplet
architecture.

TABLE II
THE RESULTS OF OUR FRAMEWORK AND ITS RELATIVE PERFORMANCE TO THE BASELINE.
Name
Baseline
Depth
Framework
Depth
Depth
Improvement
Baseline
eff_CNOTs
Framework
eff_CNOTs
eff_CNOTs
Improvement
Highway
Qubit %
QFT-261
16,835
7,516
55.35%
319,238
216,333
32.23%
19.4%
QAOA-261
14,309
5,976
58.24%
206,289
151,907
26.36%
19.4%
VQE-261
13,734
6,155
55.18%
257,777
179,352
30.42%
19.4%
BV-261
437
21
95.19%
1,553
1,034
33.42%
19.4%
QFT-360
27,517
10,869
60.50%
572,053
417,543
27.01%
18.4%
QAOA-360
20,230
8,785
56.57%
380,336
286,593
24.65%
18.4%
VQE-360
22,586
8,801
61.03%
463,921
353,388
23.83%
18.4%
BV-360
630
22
96.51%
2,137
1,415
33.79%
18.4%
QFT-495
49,028
18,292
62.69%
1,097,304
801,453
26.96%
14.1%
QAOA-495
30,059
13,880
53.82%
701,167
525,464
25.06%
14.1%
VQE-495
40,500
15,264
62.31%
893,740
677,230
24.23%
14.1%
BV-495
895
27
96.98%
2,874
1,908
33.61%
14.1%
QFT-648
80,044
25,113
68.63%
1,782,917
1,435,069
19.51%
11.1%
QAOA-648
44,265
19,201
56.62%
1,189,667
898,664
24.46%
11.1%
VQE-648
66,489
21,114
68.24%
1,459,580
1,222,466
16.25%
11.1%
BV-648
1,188
26
97.81%
3,782
2,485
34.29%
11.1%
4
6
9
12
number of chiplets
0.3
0.4
0.5
0.6
0.7
0.8
0.9
depth improvement
QFT
QAOA
VQE
BV
(a)
4
6
9
12
number of chiplets
0.0
0.1
0.2
0.3
0.4
eff_CNOTs improvement
QFT
QAOA
VQE
BV
(b)
Fig. 10. Improvement in performance for increasing number of chiplets.
C. Sensitivity Analysis
In this section, we analyze the effects of the latency and fidelity
of measurements, the highway bandwidth and the coupling
structure on our framework.
a) Measurement latency and fidelity
To evaluate the effect of measurement latency and fidelity,
we vary these two parameters on a 3x3 array of 7x7 chiplets.
Figure 11(a)(b) shows the impact of measurement latency on
the circuit depth and the impact of measurement fidelity on
the number of effective CNOT gates, respectively. As can
be seen, the circuit depth improvement is not sensitive to
the measurement latency. This is because the measurements
only affect the latency of preparation and consumption of
GHZ states, which is not so significant as the measurements
are performed in parallel. Moreover, the dynamic period of
highway shuttles also enables a reuse of GHZ states, which
further reduces the latency. The number of effective CNOT
is slightly more sensitive to the fidelity of measurements.
However, our framework still outperforms the baseline when
the error rate ratio between measurements and on-chip CNOTs
is up to 5.
b) Highway Bandwidth
To explore the effect of highway bandwidth, Figure 12
shows the performance of our framework on a 3x3 array of
9x9 chiplets when the bandwidth is as before (highway qubits
being 11%), doubled (highway qubits being 20%) and tripled
(highway qubits being 26%). For comparison, the circuit
depth (12(a)) and the number of effective CNOTs (12(b))
are normalized by those of the baseline. It can be seen that
the normalized depth drops significantly when the bandwidth
is doubled, but then slightly increases when the bandwidth
is tripled. This is because although a larger bandwidth can
enable more currency if demanded, it also separate data qubits
more apart from each other, thus increasing the overhead
for local communication without the highway. Similarly, the
normalized number of effective CNOTs also increases slightly
when it is tripled. This increase comes from the overhead that
more entanglement and measurement operations need to be
performed in the construction of highway.

1
2
3
4
5
latency ratio (meas/CNOT)
0.0
0.2
0.4
0.6
0.8
depth improvement
QFT
QAOA
VQE
BV
(a)
0.5
1.0
2.0
3.0
4.0
5.0
error rate ratio (meas/CNOT)
0.0
0.2
0.4
eff_CNOTs improvement
QFT
QAOA
VQE
BV
(b)
Fig. 11.
Improvement in performance for varying latency and fidelity of
measurements.
QFT
QAOA
VQE
BV
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
normalized depth
single: 11%
double: 20%
triple: 26%
(a)
QFT
QAOA
VQE
BV
0.0
0.2
0.4
0.6
0.8
1.0
1.2
normalized eff_CNOTs
single: 11%
double: 20%
triple: 26%
(b)
Fig. 12. Performance of compiled circuits normalized by that of the baseline
approach for highways with different bandwidths.
c) Coupling Structure
To demonstrate the generality of our framework, Figure 13
shows the performance of our framework on chiplets when
sq-360
hex-312
heavy-sq-351
heavy-hex-336
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
normalized depth
QFT
QAOA
VQE
BV
(a)
sq-360
hex-312
heavy-sq-351
heavy-hex-336
0.0
0.2
0.4
0.6
0.8
1.0
1.2
normalized eff_CNOTs
QFT
QAOA
VQE
BV
(b)
Fig. 13. Performance of compiled circuits normalized by that of the baseline
approach for chiplets with various coupling structures.
the coupling structures are square, hexagon, heavy square
and heavy hexagon. For comparison, the circuit depth (13(a))
and the number of effective CNOTs (13(b)) are normalized
by those of the baseline. It can be seen that our framework
achieves similar levels of improvements in performance for
all of these structures. This suggests the appilcability of our
framework for general coupling structures.
VIII. CONCLUSION
In this work, we provide in-depth analysis and discussion of
the unique challenges for compilation of quantum programs
on the chiplet architecture. We propose a highway model to
facilitate quantum computing at the larger scale enabled by
the chiplet architecture and propose a compilation framework
to efficiently build and utilize the highway on the chiplets.
With this being said, we believe that there is still significant
potential for fully exploring the entire optimization space,
such as extension of highway protocol and mechanism, more
elaborate designs of highway layouts, and more efficient
routing and scheduling processes. We hope that our work
could attract more effort from the computer architecture and
compiler community to explore the advantages of the chiplet
architecture and overcome the unique challenges.
IX. ACKNOWLEDGEMENT
We thank the anonymous reviewers for their valuable and
constructive feedback. This work is supported in part by Cisco
Research, NSF 2048144, NSF 2138437 and Robert N.Noyce
Trust.

REFERENCES
[1] Frank Arute, Kunal Arya, Ryan Babbush, Dave Bacon, Joseph Bardin,
Rami Barends, Rupak Biswas, Sergio Boixo, Fernando Brandao, David
Buell, Brian Burkett, Yu Chen, Zijun Chen, Ben Chiaro, Roberto
Collins, William Courtney, Andrew Dunsworth, Edward Farhi, Brooks
Foxen, and John Martinis. Quantum supremacy using a programmable
superconducting processor.
Nature, 574:505–510, 10 2019.
doi:
10.1038/s41586-019-1666-5.
[2] Gary Mooney, Gregory White, Charles Hill, and Lloyd Hollenberg.
Whole-device entanglement in a 65-qubit superconducting quantum
computer.
Advanced Quantum Technologies, 4:2100061, 09 2021.
doi:10.1002/qute.202100061.
[3] Yulin Wu, Wan-Su Bao, Sirui Cao, Fusheng Chen, Ming-cheng Chen,
Xiawei Chen, Tung-Hsun Chung, Hui Deng, Yajie Du, Daojin Fan,
Ming Gong, Cheng Guo, Guo Chu, Shaojun Guo, Lianchen Han,
Linyin Hong, He-Liang Huang, Yong-Heng Huo, Liping Li, and Jian-
Wei Pan. Strong quantum computational advantage using a supercon-
ducting quantum processor.
Physical Review Letters, 127, 10 2021.
doi:10.1103/PhysRevLett.127.180501.
[4] J. Zhang, Guido Pagano, P. Hess, A. Kyprianidis, Patrick Becker,
H. Kaplan, A. Gorshkov, Zhe-Xuan Gong, and C. Monroe. Observation
of a many-body dynamical phase transition with a 53-qubit quantum
simulator. Nature, 551, 11 2017. doi:10.1038/nature24654.
[5] Sepehr Ebadi, Tout Wang, Harry Levine, Alexander Keesling, Giulia
Semeghini, Ahmed Omran, Dolev Bluvstein, Rhine Samajdar, Hannes
Pichler, Wen Wei Ho, Soonwon Choi, Subir Sachdev, Markus Greiner,
Vladan Vuletic, and Mikhail Lukin. Quantum phases of matter on a
256-atom programmable quantum simulator. Nature, 595:227–232, 07
2021. doi:10.1038/s41586-021-03582-4.
[6] Han-Sen Zhong, Hui Wang, Yu-Hao Deng, Ming-cheng Chen, Li-
Chao Peng, Yi-Han Luo, Jian Qin, Dian Wu, Xing Ding, Yi Hu,
Peng Hu, Xiao-Yan Yang, Wei-Jun Zhang, Hao Li, Li Yuxuan, Xiao
Jiang, Lin Gan, Guangwen Yang, L. You, and Jian-Wei Pan. Quantum
computational advantage using photons.
Science (New York, N.Y.),
370:1460–1463, 12 2020. doi:10.1126/science.abe8770.
[7] J. Arrazola, Ville Bergholm, K. Brádler, T. Bromley, M. Collins,
I. Dhand, A. Fumagalli, T. Gerrits, A. Goussev, Lukas Helt, J. Hundal,
T. Isacsson, Robert Israel, J. Izaac, S. Jahangiri, R. Janik, N. Killoran,
S. Kumar, J. Lavoie, and Y. Zhang. Quantum circuits with many photons
on a programmable nanophotonic chip. Nature, 591:54–60, 03 2021.
doi:10.1038/s41586-021-03202-1.
[8] Jared Hertzberg, Eric Zhang, Sami Rosenblatt, Easwar Magesan, John
Smolin, Jeng-Bang Yau, Vivekananda Adiga, Martin Sandberg, Markus
Brink, Jerry Chow, and Jason Orcutt.
Laser-annealing josephson
junctions for yielding scaled-up superconducting quantum processors.
npj Quantum Information, 7:129, 08 2021. doi:10.1038/s41534-021-
00464-5.
[9] Michel H Devoret, Andreas Wallraff, and John M Martinis. Supercon-
ducting qubits: A short review. 2004. arXiv:cond-mat/0411174.
[10] Sebastian Krinner, Simon Storz, Philipp Kurpiers, P. Magnard, Johannes
Heinsoo, R. Keller, J. Lütolf, C. Eichler, and Andreas Wallraff. En-
gineering cryogenic setups for 100-qubit scale superconducting circuit
systems. EPJ Quantum Technology, 6, 05 2019. doi:10.1140/epjqt/
s40507-019-0072-0.
[11] James
Ang,
Gabriella
Carini,
Yanzhu
Chen,
Isaac
Chuang,
Michael Austin DeMarco, Sophia E Economou, Alec Eickbusch, Andrei
Faraon, Kai-Mei Fu, Steven M Girvin, et al. Architectures for multinode
superconducting quantum computers. 2022. arXiv:2212.06167.
[12] David Awschalom, Karl Berggren, Hannes Bernien, Sunil Bhave, Lin-
coln Carr, Paul Davids, Sophia Economou, Dirk Englund, Andrei
Faraon, Martin Fejer, Saikat Guha, Martin Gustafsson, Evelyn Hu, Liang
Jiang, Jungsang Kim, Boris Korzh, Prem Kumar, Paul Kwiat, Marko
Loncar, and Zheshen Zhang. Development of quantum interconnects
(quics) for next-generation information technologies. PRX Quantum, 2,
02 2021. doi:10.1103/PRXQuantum.2.017002.
[13] Lars Steffen, Yves Salathé, M Oppliger, Philipp Kurpiers, M Baur,
Christian Lang, C Eichler, Gabriel Puebla-Hellmann, Arkady Fedorov,
and Andreas Wallraff. Deterministic quantum teleportation with feed-
forward in a solid state system. Nature, 500:319–22, 08 2013.
doi:
10.1038/nature12422.
[14] Kevin Chou, Jacob Blumoff, Christopher Wang, Philip Reinhold,
Christopher Axline, Yvonne Gao, L. Frunzio, M. Devoret, Liang Jiang,
and R. Schoelkopf.
Deterministic teleportation of a quantum gate
between two logical qubits.
Nature, 561, 09 2018.
doi:10.1038/
s41586-018-0470-y.
[15] Yong Wan, Daniel Kienzler, Stephen Erickson, Karl Mayer, Ting Tan,
Jenny Wu, Hilma Vasconcelos, Scott Glancy, Emanuel Knill, David
Wineland, A. Wilson, and Dietrich Leibfried. Quantum gate teleportation
between separated qubits in a trapped-ion processor. Science, 364:875–
878, 05 2019. doi:10.1126/science.aaw9415.
[16] B. Hensen, H. Bernien, A. Dréau, Andreas Reiserer, Norbert Kalb,
M. Blok, J. Ruitenberg, R. Vermeulen, R. Schouten, Carlos Abel-
lan, Waldimar Amaya, V. Pruneri, Morgan Mitchell, M. Markham,
Daniel Twitchen, David Elkouss, Stephanie Wehner, Tim Taminiau,
and R. Hanson. Loophole-free bell inequality violation using electron
spins separated by 1.3 kilometres.
Nature, 526, 10 2015.
doi:
10.1038/nature15759.
[17] Teresa Brecht, Wolfgang Pfaff, Chen Wang, Luigi Frunzio, Michel De-
voret, and Robert Schoelkopf. Multilayer microwave integrated quantum
circuits for scalable quantum computing. npj Quantum Information, 2,
09 2015. doi:10.1038/npjqi.2016.2.
[18] Jerry Chow. Quantum intranet. IET Quantum Communication, 2:26–27,
04 2021. doi:10.1049/qtc2.12002.
[19] N LaRacuente, KN Smith, P Imany, KL Silverman, and FT Chong.
Modeling short-range microwave networks to scale superconducting
quantum computation. 2023. arXiv:2201.08825.
[20] Kaitlin Smith, Gokul Ravi, Jonathan Baker, and Frederic Chong. Scaling
superconducting quantum computers with chiplet architectures. pages
1092–1109, 10 2022. doi:10.1109/MICRO56248.2022.00078.
[21] Philipp Kurpiers, Paul Magnard, Theo Walter, Baptiste Royer, Marek
Pechal, Johannes Heinsoo, Yves Salathé, Abdulkadir Akin, Simon Storz,
Jean-Claude Besse, Simone Gasparinetti, Alexandre Blais, and Andreas
Wallraff. Deterministic quantum state transfer and generation of remote
entanglement using microwave photons. Nature, 558, 06 2018. doi:
10.1038/s41586-018-0195-y.
[22] Youpeng Zhong, Hung-Shen Chang, Audrey Bienfait, Étienne Dumur,
Ming-Han Chou, Christopher Conner, Joel Grebel, Rhys Povey, Haox-
iong Yan, David Schuster, and Andrew Cleland. Deterministic multi-
qubit entanglement in a quantum network.
Nature, 590:571–575, 02
2021. doi:10.1038/s41586-021-03288-7.
[23] P. Magnard, Simon Storz, Philipp Kurpiers, J. Schär, F. Marxer, J. Lütolf,
T. Walter, Jean-Claude Besse, Mihai Gabureac, K. Reuer, Abdulkadir
Akin, B. Royer, A. Blais, and Andreas Wallraff. Microwave quantum
link between superconducting circuits housed in spatially separated
cryogenic systems.
Physical Review Letters, 125, 12 2020.
doi:
10.1103/PhysRevLett.125.260502.
[24] Chao Zhou, Pinlei Lu, Matthieu Praquin, Tzu-Chiao Chien, Ryan
Kaufman, Xi Cao, Mingkang Xia, Roger Mong, Wolfgang Pfaff, David
Pekker, et al. A modular quantum computer based on a quantum state
router. 2021. arXiv:2109.06848.
[25] Alysson Gold, J. Paquette, Anna Stockklauser, Matthew Reagor,
M. Alam, Andrew Bestwick, Nicolas Didier, Ani Nersisyan, Feyza
Oruc, Armin Razavi, Ben Scharmann, Eyob Sete, Biswajit Sur, Davide
Venturelli, Cody Winkleblack, Filip Wudarski, Mike Harburn, and
Chad Rigetti. Entanglement across separate silicon dies in a modular
superconducting qubit device. npj Quantum Information, 7:142, 09 2021.
doi:10.1038/s41534-021-00484-1.
[26] Jay Gambetta. Expanding the ibm quantum roadmap to anticipate the
future of quantum-centric supercomputing.
https://research.ibm.com/
blog/ibm-quantum-roadmap-2025.
[27] A high-fidelity, two-qubit cross-resonance gate using interference cou-
plers.
https://research.ibm.com/publications/a-high-fidelity-two-qubit-
cross-resonance-gate-using-interference-couplers.
[28] Hartmut Neven. Suppressing quantum errors by scaling a surface code
logical qubit. https://ai.googleblog.com/2023/02/suppressing-quantum-
errors-by-scaling.html.
[29] Austin Fowler, Matteo Mariantoni, John Martinis, and Andrew Cleland.
Surface codes: Towards practical large-scale quantum computation.
Physical Review A, 86, 08 2012. doi:10.1103/PhysRevA.86.032324.
[30] Qiskit contributors.
Qiskit: An open-source framework for quantum
computing, 2023. doi:10.5281/zenodo.2573505.
[31] A. Córcoles, Maika Takita, Ken Inoue, Scott Lekuch, Zlatko Minev,
Jerry Chow, and Jay Gambetta. Exploiting dynamic quantum circuits
in a quantum algorithm with superconducting qubits. Physical Review
Letters, 127, 08 2021. doi:10.1103/PhysRevLett.127.100501.

[32] Anocha Yimsiriwattana and Jr Lomonaco. Generalized ghz states and
distributed quantum computing.
03 2004.
doi:10.1090/conm/381/
07096.
[33] Matthew Amy and Vlad Gheorghiu.
staq - a full-stack quantum
processing toolkit.
Quantum Science and Technology, 5, 05 2020.
doi:10.1088/2058-9565/ab9359.
[34] Nader Khammassi, Imran Ashraf, Hans van Someren, Razvan Nane,
Anneriet Krol, M. Rol, Lingling Lao, Koen Bertels, and Carmen
Almudever.
Openql: A portable quantum programming framework
for quantum accelerators. ACM Journal on Emerging Technologies in
Computing Systems, 18:1–24, 01 2022. doi:10.1145/3474222.
[35] Seyon Sivarajah, Silas Dilkes, Alexander Cowtan, Will Simmons, Alec
Edgington, and Ross Duncan. t|ket〉: A retargetable compiler for nisq
devices. Quantum Science and Technology, 6, 04 2020. doi:10.1088/
2058-9565/ab8e92.
[36] Xu Han, Wei Fu, Chang-Ling Zou, Liang Jiang, and Hong Tang.
Microwave-optical frequency conversion.
Optica, 8, 06 2021.
doi:
10.1364/OPTICA.425414.
[37] Gershon Kurizki, P. Bertet, Yuimaru Kubo, Klaus Mølmer, David
Petrosyan, Peter Rabl, and Jörg Schmiedmayer. Quantum technologies
with hybrid systems. Proceedings of the National Academy of Sciences,
112:3866, 03 2015. doi:10.1073/pnas.1419326112.
[38] Nicholas Lambert, Alfredo Rueda, Florian Sedlmeir, and Harald Schwe-
fel. Coherent conversion between microwave and optical photons—an
overview of physical implementations. Advanced Quantum Technolo-
gies, 3, 12 2019. doi:10.1002/qute.201900077.
[39] Nikolai Lauk, Neil Sinclair, Sh Barzanjeh, Jacob Covey, Mark Saffman,
Maria Spiropulu, and Christoph Simon.
Perspectives on quantum
transduction.
Quantum Science and Technology, 5, 02 2020.
doi:
10.1088/2058-9565/ab788a.
[40] A. Clerk, K. Lehnert, P. Bertet, Renato Petta, and Y. Nakamura. Hybrid
quantum systems with circuit quantum electrodynamics. Nature Physics,
16:1–11, 03 2020. doi:10.1038/s41567-020-0797-9.
[41] Mohammad Mirhosseini, Alp Sipahigil, Mahmoud Kalaee, and Oskar
Painter. Superconducting qubit to optical photon transduction. Nature,
588:599–603, 12 2020. doi:10.1038/s41586-020-3038-6.
[42] A. Pirker and W. Dür.
A quantum network stack and protocols
for reliable entanglement-based networks.
New Journal of Physics,
21(3):033003, March 2019. arXiv:1810.03556, doi:10.1088/1367-
2630/ab05f7.
[43] Axel Dahlberg, Matthew Skrzypczyk, Tim Coopmans, Leon Wubben,
Filip Rozpedek, Matteo Pompili, Arian Stolk, Przemysław Pawełczak,
Robert Knegjens, Julio de Oliveira Filho, Ronald Hanson, and Stephanie
Wehner. A Link Layer Protocol for Quantum Networks. arXiv e-prints,
page arXiv:1903.09778, March 2019. arXiv:1903.09778.
[44] Jonathan Baker, Casey Duckering, Alexander Hoover, and Frederic
Chong. Time-sliced quantum circuit partitioning for modular architec-
tures. pages 98–107, 05 2020. doi:10.1145/3387902.3392617.
[45] Davide Ferrari, Angela Sara Cacciapuoti, Michele Amoretti, and Mar-
cello Caleffi.
Compiler design for distributed quantum computing.
IEEE Transactions on Quantum Engineering, PP:1–1, 01 2021. doi:
10.1109/TQE.2021.3053921.
[46] Stephen Diadamo, Marco Ghibaudi, and James Cruise.
Distributed
quantum computing and network control for accelerated vqe.
IEEE
Transactions on Quantum Engineering, PP:1–1, 02 2021. doi:10.1109/
TQE.2021.3057908.
[47] Anbang Wu, Hezi Zhang, Gushu Li, Alireza Shabani, Yuan Xie, and
Yufei Ding. Autocomm: A framework for enabling efficient commu-
nication in distributed quantum programs. pages 1027–1041, 10 2022.
doi:10.1109/MICRO56248.2022.00074.
[48] Mark Oskin, Frederic Chong, Isaak Chuang, and John Kubiatowicz.
Building quantum wires: The long and the short of it. volume 31, pages
374–385, 01 2003. doi:10.1109/ISCA.2003.1207015.
[49] N. Isailovic, Y. Patel, M. Whitney, and John Kubiatowicz. Intercon-
nection networks for scalable quantum computers. volume 2006, pages
366–377, 02 2006. doi:10.1109/ISCA.2006.24.
[50] Daniel Llewellyn, Yunhong Ding, Imad Faruque, Stefano Paesani,
Davide Bacco, Raffaele Santagati, Yan-Jun Qian, Yan Li, Yun-Feng
Xiao, Marcus Huber, Mehul Malik, Gary Sinclair, Xiaoqi Zhou, Karsten
Rottwitt, Jeremy O’Brien, John Rarity, Qihuang Gong, Leif Oxenlowe,
Jianwei Wang, and Mark Thompson. Chip-to-chip quantum teleportation
and multi-photon entanglement in silicon. Nature Physics, 16:1–6, 02
2020. doi:10.1038/s41567-019-0727-x.
[51] Rodrigo Santiago, Sergi Abadal, Carmen Almudéver, and Eduard Alar-
cón. Modelling short-range quantum teleportation for scalable multi-
core quantum computing architectures.
pages 1–7, 09 2021.
doi:
10.1145/3477206.3477461.
[52] Stefan Hillmich, Alwin Zulehner, and Robert Wille. Exploiting quantum
teleportation in quantum circuit mapping.
pages 792–797, 01 2021.
doi:10.1145/3394885.3431604.
[53] Mqt qmap - a tool for quantum circuit mapping written in c++. https:
//github.com/cda-tum/mqt-qmap.
[54] Max Alteg, Baptiste Chevalier, Octave Mestoudjian, and Johan-Luca
Rossi. Study of adaptative derivative-assemble pseudo-trotter ansatzes
in vqe through qiskit api. 2022. arXiv:2210.15438.
[55] Jia-Bin You, Dax Enshan Koh, Jian Feng Kong, Wen-Jun Ding,
Ching Eng Png, and Lin Wu. Exploring variational quantum eigensolver
ansatzes for the long-range xy model. 2021. arXiv:2109.00288.
[56] Liangyu Chen, Hang-Xi Li, Yong Lu, Christopher Warren, Christian
Križan, Sandoko Kosen, Marcus Rommel, Shahnawaz Ahmed, Amr Os-
man, Janka Biznárová, Anita Fadavi, Benjamin Lienhard, Marco Caputo,
Kestutis Grigoras, Leif Grönberg, Joonas Govenius, Anton Kockum,
Per Delsing, Jonas Bylander, and Giovanna Tancredi. Transmon qubit
readout fidelity at the threshold for quantum error correction without
a quantum-limited amplifier.
npj Quantum Information, 9, 03 2023.
doi:10.1038/s41534-023-00689-6.
[57] Ibm quantum. https://quantum-computing.ibm.com.

