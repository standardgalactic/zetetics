Review Articles 
South African Journal of Science 95, May 1999 
219 
Language theory and its applications in science 
B. Swart' 
This paper 
an overview of the mathematical description of 
languages and of some of the latest applications that these theories 
of grammars and languages have found in computer science, con-
trol theory, engineering and biology. It shows the poulble intrinsic 
role of mathematiCS and computation 11'1 the very essence of IHe. 
'When we study human language, we are 
what some 
might call the #human essence", the distinctive qualities of mind that 
are, so far as we know, unique to [humanityl.' Naom Chomsky.1 
'God created the world 
a word, 
'''''''''''U'A~ly ... ' The Talmud. 
The study of language has always fascinated people. When and 
where did language arise, and how do we combine words to 
form sentences that are understood by others? 
to describe the laws (grammars) of 
languages. Some have also tried to find laws that pertain to all 
a universal grammar. In this regard Chomsky pio-
mathematical study of 
and grammars in 
the 1950s.2 His idea was to formulate, in an axiomatic way, the 
grammars that generate languages by conSidering languages as 
sets of strings of symbols. The symbolic nature of mathematics 
provides an ideal framework for such a study. 
It was soon realized that these symbols need not only be the 
words from the vocabulary of a natural language, but that they 
':>v,,,·.:>cci,'\nc in a computer language, the events in 
a 
cells of an 
or the basic units of 
DNA. The formalization of languages and grammars thus gave 
rise to concepts and techniques that are able to model a variety of 
phenomena from linguistics to biology and engineering. 
I 
a short description of 
structure &,'''«''«'''''' 
some results in 
theory, 
then discuss 
application. One concerns the very important 
of control, 
and another is at the cutting edge of computing and DNA 
language and grammar 
Basic theory 
The idea of language is to combine words in a particular order 
to form 
and 
to form sentences. This is done 
according to the rules 
and comprises the 
of 
a language. In a natural 
one is also lnTPr>","'lI 
phonology (sounds) and 
in the 
of sentences 
In this discussion we limit ourselves to the formal-
ization of the syntax of natural languages, as initiated 
Chomsky.2 The reader is also referred to books on the subject. 
Languages are considered as possibly infinite sets of strings of 
symbols drawn from a finite vocabulary V. Let V* denote the 
Kleene closure of V, that is, the set of all 
of 
boIs from V, 
the 
string E. A language L is 
a 
subset of V*(Lc V*) where the 
correspond to sentences 
and the symbols to words. If the language is to be useful, its 
'Department 01 Mathematics and 
0002. South Africa. E-mail: h.~ ....... I1.iiln.n ...... l 
sentences should exhibit some order. In this case the '''''1'.'''''1'.''-
O'P"PTJ'lt,,·cI from the rules of a grammar. 
structure 
can be seen as a quadruple G == 
< V, N, S, F >, where 
the so-called non-terminal vocabulary 
SEN is the start 
and F is a finite set 
The non-terminal symbols 
to assign structure to sentences 
and the rules in F are ofthe form: P -t Q where P, Q E (V U N)* 
and P contains at least one non-terminal symbol. 
This means that in any string of symbols, if P J'lnnp'~T~ 
rewritten as 
This forms a step in a derivation, 
'~'. A 
complete derivation starts with S and ends in a string of symbols 
(words) from Vand is denoted by'~ *'. 
The 
a grammar G is then: 
L(G) == {roE V*: S::::::> *ro}, 
i.e. all strings or sentences in V* that can be derived from S 
repeatedly applying rules of the grammar G. The rules are 
applied by rewriting non-terminals, one at a time (sequentially). 
Example 1 
Let G = < V, N, 5, F > with V 
,aR, b}; N 
B}and 
F;; {S -t aL S aK, S -t B, B -t b}. 
Then a 
derivation is: 
It is easy to see that L(G) = {(aL)" b(aR)" : n ;z: O}. 
The structure 
Grammars can be classified according to the 
chy in order of increasing generative capacity. The 
are: 
grammars, context-free (CF) grammars, context-
sensitive grammars and unrestricted rewrite systems, and their 
ca"acltit~S are determined 
the restrictions on the rewriting 
of the 
grammars: 
Regular grammars: P -t w Q where P, Q E Nand WE V*. 
Context-free grammars: aPll -t R where R E (Vu N)*, PEN. 
Context-sensitive grammars: aP13 -taTJ.l where CI, 13" E (V U 
N)* and P, T E (VuN)* excluding the empty string. 
Unrestricted rewrite system: P -t Q with no restrictions on P, Q 
E (VuN)*. 
languages are £3 
lar), £2 (context-free), 
(context-sensitive) and £oi 
c 
c 
£1 C £0' The regular languages are simple and easy to describe. 
They can all be expressed in terms of Kleene closure, concatena-
tion Goining together) and union of 
It is straightfor-
ward to show that natural languages are not regular. The 
context-free grammars are well-researched and -understood, 
but since the 1980s it has been 
that 
are not 
adequate for the description of natural languages. 
in 
Swiss-German, Dutch, Bambara, etc. show that mildly context-
sensitive grammars are probably needed if one wants to fit 
natural 
into the Chomsky framework. A wide 
Reproduced by Sabinet Gateway under licence granted by the Publisher (dated 2010).

220 
South African Journal 01 Science 95, May 1999 
Review Articles 
of other grammars has been developed to extend context-free 
grammars and to describe different linguistic 
head 
grammars, 
grammars, 
grammars, 
categorial grammars, to name but a few. 
The notion of control can also be applied to grammars 
the 
application of rules in the derivation of sentences is controlled so 
that a very 
is generated. Since control is 
a very 
science and 
we 
will now 
Control languages 
The idea is to control the application of rules of a grammar G 
so that a sublanguage of L(G} is generated which is more 
cific. This was developed by Arto Saloma a." He has 
example, that 
control to context-free grammars can 
extend their capacity so that non-con text-free 
can be 
obtained. 
Definitions 
Let G = < V, 
5, F > be a grammar with the rules in F labelled 
by A f2, ... fn. Choose control language C as a regular expression 
over these rules. Then U C is a control word of derivation D if 
and only if 
(i) D is of the form A ::::> B with A == RIA'R2 and B 
and 
with A' ~ B' a rule in F labelled U(= fi' for some i = 1, ... n) or 
(ii) D is of the form A ::::>* B::::>* E and U == UjUz where UI and Uz 
are control words of A =! Band B ::::>* E respe<:nvety 
The language geraeralted 
G with control C is then 
E 
5 =! U) is a derivation with associated control 
word U E 
We are particularly interested in using regular control because 
of its simplicity. 
control increases the 
capacity of context-free 
which is rather nice since CF 
grammars are precisely 
whose capacity we would like to 
increase (though not to the full capacity of context-sensitive 
grammars,[l being too large a class to be of interest in practice). 
Example 2 
The non-context-free indexed language L = {a"b"c": n :?: O} can 
be 
from a context-free grammar G with 
control. In fact, let the rules of G be: 
fl: 5~ABC 
f·:C~cC 
f7:C~E 
Choose regular control 
ThenL(G,q == 
: n :::; O}. 
Note that without control 
L(G) == 
We have given the rudiments 
theory: vocabularies 
of symbols, rules and "n""·~,tif'.,,, like Kleene closure, union, con-
catenation. With these 
tools we can now venture into other 
worlds. 
Application in computer science and automata theory 
first application of the theories developed via 
for naturallanguages was 
rather obviously) in the 
of formal programming 
and computers. From the 
1960s onwards the 
of formal languages has been devel-
oped p ... rpn(;IV~'IV l.'I.t:guli:lC 
are useful in the 
of 
lexical 
"""'''''''' pattern 
and 
searching. I....OntE~xt··m::e grammars are very important in 
ing parsers and 
and in other 
cations. 
to Example 1 above, we see that, 
at and aR with 
and right brackets '(' and ')' rp~:np,r+i,,,.h we 
have a way of 
brackets -
essential in programming 
languages. 
Finite state machines 
A finite automaton has a finite number of internal states, the 
transitions between which are determined by the 
The 
inputs are the 
of the 
being read by the machine. 
The outputs can 
or rejection of a 
voltages 
to 0 or 1. S'W;trlhin 
pIes of finite automata 
The class of 
[3 of regular 
Example 3 
The language {a"b : n :?: O} is accepted by the 
ton: 
It can also be visualized as a head reading from a 
ing its state and 
one symbol to the right to scan the next 
symbol. 
Pushdown automata 
The pushdown automaton is essentially a finite automaton 
with a stack. Certain symbols can be added to or removed from 
the stack (last-in-first-out). If the 
has been read and the 
stack is empty, acceptance is 
The advantage of the 
stack is that it can operate as a 
device, allowing one 
to 
strings like a"U', or 
which cannot be 
finite automaton. 
of COIlteJ(t-tree l<HI)!;U.,~""<::"" 
machines 
The mostfamous of all mathematical models of automata is the 
Turing machine, named for Alan 
(1936). It is considered 
to be the formalization of any 
and by Church's hy-
nl'\th~"'," equivalent to our 
notion of a computer. It can 
visualized as in the second 
with an infinite tape and 
the head able to read, write 
erase and move left and 
The class of languages 
machine is the 
class 
Le. a Turing machine 
any 
that can 
be described 
a 
structure grammar. For 
more information, see the papers cited in refs 3--5. 
Reproduced by Sabinet Gateway under licence granted by the Publisher (dated 2010).

Review Articles 
South African Journal of Science 95, May 1999 
221 
Application in engineering (control theory) 
The use of languages in the modelling and control of discrete 
event 
systems in the field of electrical t::1l1t;'1lt::t::' 
''''U''''''f,'' and Wonham in the late 
Discrete event dynamic systems 
A discrete event 
system 
evolves 
to 
the 
occurrence of events. We can 
of 
sv,,, ... ,,,,,, in communications, rrt~""'""''''r1 
10~;tStlCS etc. Events like 'arrival' and 
, on' and off', 
cause transitions between the states of the system 
called 
Such 
can often not be modelled 
differential or 
grammars G == < '\{ 
5, T >. In this 
case V denotes the set of events, N the set of states of the 
5 the initial state and T gives the transitions between states. L(G) 
is the set of all 
of events representing the evolution of the 
or the operation of the plant. 
Example 4 
A buffer G has cal,a(:lty one. This means that the arrival of an 
item must be followed 
a departure before the next arrival. 
LetV= 
SsE and 
{a, d} : N == {empty, 
trarlslUons t (E,a) = F, t(F,d) = E. The latter 
describes the transition of the 
in state 
to state 
'full' after 
event 'arrival' and the transition from 
'full'to 
after event 'departure'. 
Then L(G) 
v {(ad)" a} : n 2: 0, models the behaviour of 
the buffer and G can be 
as a regular grammar or fi-
nite automaton. 
Supervisory control 
The idea is to influence the evolution of the 
constructing a 
which disables certain events or tran-
sitions between certain states so that a desired behaviour is 
attained. For 
wish to control our buffer so that 
it is empty after any 
events. That is, the desired behav-
iour is {(ad)" : n 2: O} 
should prevent strings 
(ad)"a from {)('rllrrln 
The control of 
has similarities with the control 
language C above. For a brief comparison, see Swart.9 The 
control of DEDSs as modelled 
languages has developed into 
an elegant theory with 
like controllability, optimal 
control, 
and 
desired behaviour. Since 
the particulars are 
of this paper, I refer the 
reader to ref. 10. It is remarkable 
the discussion of natural 
languages has 
technological area of 
control of c""to,rnc 
Application in biology 
Uevel,oornelltal biology 
Here we apply our mathematical framework for languages to 
multicellular 
The 
work was done by 
Aristid Lindenmayer in the late 1960s.11 
(terminal) symbols 
of vocabulary V now 
cells: a cell is in a particular state 
and may change to a new state or divide into new cells. A set of 
strings of symbols then describes the life and development of the 
organism as it grows. 
There are two main differences between the usual 
theory and the 
developmental C""""rYlC 
first is that there are usually no non-terminal (auxiliary) symbols. 
Each step in a 
and 
the 
valid string 
the 
of the VAl,'''''''''''' 
difference is that rules are 
simultaneously to all symbols 
in a string. This means we 
instead of sequential 
rewriting described in Basic 
Parallel rewriting here is in 
the spirit of Herman and 
12 where each symbol is 
rewritten at each 
ExampleS 
Consider an alga with mosaic 
This means a cell 
is not influenced by what is going on in the rest of the organism. 
Assume thatacell may adopt five 
states so that V = {O, 1, 
2,3,4}. 
Let the rules be as follows: 
o -+ 10 
1 -+ 32 
2 -+ 3(4) 
3 -+ 3 
4 -+ 5 
5 -+ 30. 
This means a cell in state 0 divides into two cells in states 1 and 
I'p",..,pcti'U'plu a cell in state 4 
into state 5 and so on. 
K,."rv.,t., indicate that the enclosed 
is the 
branch, If we take a 
cell in state 4, the 
follows: 
4 ::::::> 5 ::::::> 30::::::> 310::::::> 33210::::::> 
333(5)33(4)3210. 
The derivation represents seven 
with new branches being 
at 
Schematically, from a single cell 0 in state 4, we obtain some-
thing like this: 
For a comprehensive discussion of this 
OZ,?" tJf>rQ" 12 
DNA computing 
see Herman and 
A 
strand of DNA can be modelled as a 
V 
C, 
where the symbols reD,resent 
four nucleotide bases adenine, guanine, cytosine 
A DNA 
sequence like CCYGA encodes information and 
aOlDm:an.on of a 
bio-operation like annealing, leads to 
,.,n., ............ ,"'v structure of a double-helix DNA molecule and to 
matter. 
on work in language theory13,14 on modelling DNA 
recombination 
operation, we were 
intro-
duced to the 
world of DNA computing by Leonard 
Adleman. He realized that enzymes acting on DNA 
simulate mathematical computations and in 1994 he 
an 
instance of the Directed Hamiltonian Path Problem -
a famous 
NP-complete 
in mathematics -
using DNA 
enzymes and test tubes! 
about one week of laboratory 
work. 
So in this case we do not apply mathematics to solve a 0101021-
cal problem, we use 
to solve a problem in mathematics. 
Details and further references can be found in Kari16 and 
Pisanti.
17 We give a short 
of Adleman's eX1pelimlent: 
Reproduced by Sabinet Gateway under licence granted by the Publisher (dated 2010).

222 
South African Journal of Science 95, May 1999 
Review Articles 
Adleman's computation for a seven-node directed 
We first note that a directed graph with deSignated vertices v., 
and VOUI has a Hamiltonian path if and only if there exists a 
sequence of edges el, ... ek that begins with 
ends with VOU1 and 
visits every other vertex 
once. The following graph has 
such a Hamiltonian path (sequence of edges), namely el , e2 .. • e6• 
Now we encode each vertex by a random 20-nucleotide strand 
and create a DNA 
for each oriented edge el , ... ,e9 
taking the second 
of the source vertex sequence, with 
the first half of the 
vertex sequence. For example, if Vi<> 
is encoded by 
and Vz by 
GGACTCTITAGCCACTGTCA, then edge el is represented by 
DNA sequence ACTGGGTAACGGACTCTTTA. 
mIXIng 
together a solution containing 
of the 'edge-sequences' 
with a solution containing copies 
complementary 
to 'vertex-sequences', we find that the 
(pasting) process 
DNA molecules encoding 
paths through the 
graph. 
By the 
chain reaction, 
phoresis and 
only strands pnN\,iino-
that begin with 
and visit every node 
once, are retained. If such 
the final {eSi£-ruoe, 
their DNA sequence provides the Hamiltonian path; if no 
strands remain, there is no Hamiltonian path. 
Theoretically, it appears that DNA computing could yield 
tremendous advantages from the point of view of 
(106 
times faster than the fastest 
energy efficiency 
(1010 times more efficient than su percom puters) and information 
(1012 times more bits per cubic nanometre). But there are 
aUI~stilcms that must be asked: what kind of problem can be 
DNA 
Is it possible to 
a program-
computer? 
Ldln<:e-!;Ciut: problems may be iml)ossiblle 
and errors that occur 
the 
of 
numbers of DNA strands. 
also that Adleman 
problem. 
Some answers to the 
are obtained 
language theory. 
It has been proved that DNA computations can simulate the 
behaviour of a Turing 
namely any 
can be 
generated 
the splicing model of DNA 
('cut-
ting' and 'pasting' of strands performed by enzymes). See 
Pisanti17 and Paun.14 
have also been described for 
the 
Problem and for breaking the US 
Methods of evolution 
Data Encryption Standard. A ",~,.", ...... ,;u. .... ,.nO' .. ,,",_ 
ming language called DNA-Pascal has even been prE~se11te,d, 
many practical obstacles remain and we should not expect DNA 
computers to 
electronic 
In the meantime, 
hi'l,'W,.u<.r we are 
much about biomolecular rnlm1"lI1t,,"_ 
tion and the ability of organisms to handle information. We have 
also uncovered a completely new way ofthinkingabout compu-
tation. 
Conclusion 
Although I have 
and other technical details 
to a minimum, it can 
seen that the mathematical t1p'<U"r ..... rln" 
of natural languages has penetrated 
science. It has 
led us from the fascination of words to new ways of looking at 
control and at computing, even new ways of seeing mathematics 
and life itself. The two quotes 
in the introduction could be 
re-read together with the following observation of Kari:16 'The 
fact that phenomena 
inside living nrc'"n;"n,,, 
and ",:>'u"",,. ..... 
Received 3 February. Accepted 23 March 1999. 
1. Chomsky N. (1972). Languageand Mind. Harcourt Brace Jovanovich, New York. 
2. Chomsky N. (1957). Syntactic Structures. Mouton, The Hague. 
3. Harrison MA. (1978). Introduction to Formal Language Theory. Addison-Wesley, 
Mass. 
5. 
Nlnthematical Models in Unguis-
lies, Kluwer, Dordrecht. 
6. Salomaa A. (1m). Formal Languages. ACM Monograph Series, Academic Press, 
New York. 
7. 
8. 
9. 
Systems. Kluwer, Dm'drechL 
11. Lindenmayer A. (1967). An axiom system for the development of filamentous 
olg,.m',IIl>. Abstracts of 3rd Inl. Congress 011 wgic, Methodology and Philosophy of 
127-128. 
12. Herman G.T. and Rozenberg G. (1975). Developmental Systems and Languages. 
North-Holland, Amsterdam. 
l3. Head 'I (1987). Formal language theory and DNA: an dlldlYblbOI 
14. Paun 
Bulletin 57, 
recombinant behaviours. Bull. NInth. m",mro .. ". 
A challenge lor formal language 
15. Adleman L (1994). Molecular computation of solutions to combinatorial 
pru'"",mb. Science 266, 1021-1024. 
16. 
DNA computing: arrival of biological mathematics. The Mathe-
l .. tpl'Ii""'"fn 19, 9-21. 
DNA computing: a survey. EATCS Bulletin 64, 188-213. 
All 
discoveries have in their wake a revision of pre-existing ideas, and it is often 
upon us with humility that our 
interpretations 
are but tentative and determined by the state of knowledge for the 
The confident assertiveness of 
one period becomes the doubt of another and the rejection 
Particularly is this found to be the case in our 
interpretations of vital phenomena, which, from their very 
so far 
and perhaps no section of 
nature studies so forctblyillustrates this as the problem of evolution. All accept the historical fact of descent, but as to its causes and methods all 
of assertiveness, doubt and 
have passed through since Darwin first 
it upon an 
world of thinkers. 
all this uncertainty, one cannol withstand the 
to view one's work in 
of evolutionary 
to cherish the 
a"'~u.v,,,tointerpret 
In the 
DlOloglGll pn,,, ,,, .... , f,n<> would, 
rash to pin one's 
wholly to anyone 
of evolution to the 
of aU 
others. There is 
wisdom 
recent insistence of Professor W. E. Ritter that the ways of evolution are many, not one. 
Professor JE. Duerden of Rhodes University, South African Journal of Science, 20,357 (1924), 
Reproduced by Sabinet Gateway under licence granted by the Publisher (dated 2010).

