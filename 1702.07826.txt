Rationalization: A Neural Machine Translation Approach to Generating Natural
Language Explanations
Upol Ehsan ∗†, Brent Harrison ∗‡, Larry Chan†, and Mark Riedl†
†Georgia Institute of Technology, Atlanta, GA, USA
‡University of Kentucky, Lexington, KY, USA
ehsanu@gatech.edu,
harrison@cs.uky.edu,
larrychan@gatech.edu,
riedl@cc.gatech.edu
Abstract
We introduce AI rationalization, an approach for generating
explanations of autonomous system behavior as if a human
had performed the behavior. We describe a rationalization
technique that uses neural machine translation to translate
internal state-action representations of an autonomous agent
into natural language. We evaluate our technique in the Frog-
ger game environment, training an autonomous game playing
agent to rationalize its action choices using natural language.
A natural language training corpus is collected from human
players thinking out loud as they play the game. We motivate
the use of rationalization as an approach to explanation gen-
eration and show the results of two experiments evaluating
the effectiveness of rationalization. Results of these evalua-
tions show that neural machine translation is able to accu-
rately generate rationalizations that describe agent behavior,
and that rationalizations are more satisfying to humans than
other alternative methods of explanation.
Introduction
Autonomous systems must make complex sequential deci-
sions in the face of uncertainty. Explainable AI refers to
artiﬁcial intelligence and machine learning techniques that
can provide human understandable justiﬁcation for their be-
havior. With the proliferation of AI in everyday use, ex-
plainability is important in situations where human opera-
tors work alongside autonomous and semi-autonomous sys-
tems because it can help build rapport, conﬁdence, and un-
derstanding between the agent and its operator. For instance,
a non-expert human collaborating with a robot for a search
and rescue mission requires conﬁdence in the robot’s action.
In the event of failure—or if the agent performs unexpected
behaviors—it is natural for the human operator to want to
know why. Explanations help the human operator understand
why an agent failed to achieve a goal or the circumstances
whereby the behavior of the agent deviated from the expec-
tations of the human operator. They may then take appropri-
ate remedial action: trying again, providing more training to
machine learning algorithms controlling the agent, reporting
bugs to the manufacturer, etc.
∗Harrison and Ehsan equally contributed to this work
Copyright c⃝2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.
Explanation differs from interpretability, which is a fea-
ture of an algorithm or representation that affords inspection
for the purposes of understanding behavior or results. While
there has been work done recently on the interpretability
of neural networks (Yosinski et al. 2015; Zeiler and Fergus
2014), these studies mainly focus on interpretability for ex-
perts on non-sequential problems. Explanation, on the other
hand, focuses on sequential problems, is grounded in natural
language communication, and is theorized to be more use-
ful for non-AI-experts who need to operate autonomous or
semi-autonomous systems.
In this paper we introduce a new approach to explainable
AI: AI rationalization. AI rationalization is a process of pro-
ducing an explanation for agent behavior as if a human had
performed the behavior. AI rationalization is based on the
observation that there are times when humans may not have
full conscious access to reasons for their behavior and conse-
quently may not give explanations that literally reveal how
a decision was made. In these situations, it is more likely
that humans create plausible explanations on the spot when
pressed. However, we accept human-generated rationaliza-
tions as providing some lay insight into the mind of the other.
AI rationalization has a number of potential beneﬁts over
other explainability techniques: (1) by communicating like
humans, rationalizations are naturally accessible and intu-
itive to humans, especially non-experts (2) humanlike com-
munication between autonomous systems and human oper-
ators may afford human factors advantages such as higher
degrees of satisfaction, conﬁdence, rapport, and willingness
to use autonomous systems; (3) rationalization is fast, sac-
riﬁcing absolute accuracy for real-time response, appropri-
ate for real-time human-agent collaboration. Should deeper,
more accurate explanations or interpretations be necessary,
rationalizations may need to be supplemented by other ex-
planation, interpretation, or visualization techniques.
We propose a technique for AI rationalization that treats
the generation of explanations as a problem of translation
between ad-hoc representations of states and actions in an
autonomous system’s environment and natural language. To
do this, we ﬁrst collect a corpus of natural language utter-
ances from people performing the learning task. We then
use these utterances along with state information to train an
encoder-decoder neural network to translate between state-
action information and natural language.
arXiv:1702.07826v2  [cs.AI]  19 Dec 2017

To evaluate this system, we explore how AI rationaliza-
tion can be applied to an agent that plays the game Frogger.
This environment is notable because conventional learning
algorithms, such as reinforcement learning, do not learn to
play Frogger like human players, and our target audience
would not be expected to understand the speciﬁc informa-
tion about how an agent learns to play this game or why it
makes certain decisions during execution. We evaluate our
approach by measuring how well it can generate rationaliza-
tions that accurately describe the current context of the Frog-
ger environment. We also examine how humans view ratio-
nalizations by measuring how satisfying rationalizations are
compared to other baseline explanation techniques. The con-
tributions of our paper are as follows:
• We introduce the concept of AI rationalization as an ap-
proach to explainable AI.
• We describe a technique for generating rationalizations
that treats explanation generation as a language transla-
tion problem from internal state to natural language.
• We report on an experiment using semi-synthetic data to
assess the accuracy of the translation technique.
• We analyze how types of rationalization impact human
satisfaction and use these ﬁndings to inform design con-
siderations of current and future explainable agents.
Background and Related Work
For a model to be interpretable it must be possible for hu-
mans to explain why it generates certain outputs or behaves
in a certain way. Inherently, some machine learning tech-
niques produce models that are more interpretable than oth-
ers. For sequential decision making problems, there is often
no clear guidance on what makes a good explanation. For
an agent using Q-learning (Watkins and Dayan 1992), for
example, explanations of decisions could range from “the
action had the highest Q value given this state” to “I have
explored numerous possible future state-action trajectories
from this point and deemed this action to be the most likely
to achieve the highest expected reward according to iterative
application of the Bellman update equation.”
An alternate approach to creating interpretable machine
learning models involves creating separate models of ex-
plainability that are often built on top of black box tech-
niques such as neural networks. These approaches, some-
times called model-agnostic (Ribeiro, Singh, and Guestrin
2016; Zeiler and Fergus 2014; Yosinski et al. 2015) ap-
proaches, allow greater ﬂexibility in model selection since
they enable black-box models to become interpretable.
Other approaches seek to learn a naturally interpretable
model which describes predictions that were made (Krause,
Perer, and Ng 2016) or by intelligently modifying model in-
puts so that resulting models can describe how outputs are
affected (Ribeiro, Singh, and Guestrin 2016).
Explainable AI has been explored in the context of ad-hoc
techniques for transforming simulation logs to explanations
(van Lent, Fisher, and Mancuso 2004), intelligent tutoring
systems (Core et al. 2006), transforming AI plans into nat-
ural language (van Lent et al. 2005), and translating mul-
tiagent communication policies into natural language (An-
dreas, Dragan, and Klein 2017). Our work differs in that the
generated rationalizations do not need to be truly represen-
tative of the algorithm’s decision-making process. This is a
novel way of applying explainable AI techniques to sequen-
tial decision-making in stochastic domains.
AI Rationalization
Rationalization is a form of explanation that attempts to jus-
tify or explain an action or behavior based on how a human
would explain a similar behavior. Whereas explanation im-
plies an accurate account of the underlying decision-making
process, AI rationalization seeks to generate explanations
that closely resemble those that a human would most likely
give were he or she in full control of an agent or robot.
We hypothesize that rationalizations will be more accessible
to humans that lack the signiﬁcant amount of background
knowledge necessary to interpret explanations and that the
use of rationalizations will result in a greater sense of trust
or satisfaction on the part of the user. While Rationaliza-
tions generated by an autonomous or semi-autonomous sys-
tem need not accurately reﬂect the true decision-making pro-
cess underlying the agent system, they must still give some
amount of insight into what the agent is doing.
Our approach for translating representations of states and
actions to natural language consists of two general steps.
First, we must create a training corpus of natural language
and state-action pairs. Second, we use this corpus to train an
encoder-decoder network to translate the state-action infor-
mation to natural language (workﬂow in Figure 1).
Training Corpus
Our technique requires a training corpus that consists of
state-action pairs annotated with natural language explana-
tions. To create this corpus, we ask people to complete the
agent task’s in a virtual environment and “think aloud” as
they complete the task. We record the visited states and per-
formed actions along with the natural language utterances
of critical states and actions. This method of corpus cre-
ation ensures that the annotations gathered are associated
with speciﬁc states and actions. In essence we create paral-
lel corpora, one of which contains state representations and
actions, the other containing natural language utterances.
The precise representation of states and actions in the au-
tonomous system does not matter as long as they can be
converted to strings in a consistent fashion. Our approach
emphasizes that it should not matter how the state represen-
tation is structured and the human operator should not need
to know how to interpret it.
Translation from Internal Representation to
Natural Language
We use encoder-decoder networks to translate between com-
plex state and action information and natural language ra-
tionalizations. Encoder-decoder networks, which have pri-
marily been used in machine translation and dialogue sys-
tems, are a generative architecture comprised of two compo-
nent networks that learn how to translate an input sequence

Figure 1: The workﬂow for our proposed neural machine translation approach to rationalization generation.
X = (x1, ..., xT ) into an output sequence Y = (y1, ..., yT ′).
The ﬁrst component network, the encoder, is a recurrent neu-
ral network (RNN) that learns to encode the input vector
X into a ﬁxed length context vector v. This vector is then
used as input into the second component network, the de-
coder, which is a RNN that learns how to iteratively decode
this vector into the target output Y . We speciﬁcally use an
encoder-decoder network with an added attention mecha-
nism (Luong, Pham, and Manning 2015).
Experiments
In this work, we test the following two hypotheses:
1. Encoder-Decoder networks can accurately generate ratio-
nalizations that ﬁt the current situational context of the
learning environment and
2. Humans will ﬁnd rationalizations more satisfying than
other forms of explainability
To test these hypotheses, we perform two evaluations in an
implementation of the popular arcade game, Frogger. We
chose Frogger as an experimental domain because computer
games have been demonstrated to be good stepping stones
toward real-world stochastic environments (Laird and van
Lent 2001; Mnih et al. 2015) and because Frogger is fast-
paced, has a reasonably rich state space, and yet can be
learned optimally without too much trouble.
Rationalization Generation Study Methodology
Evaluating natural language generation is challenging; ut-
terances can be “correct” even if they do not exactly match
known utterances from a testing dataset. To facilitate the
assessment of rationalizations generated by our technique,
we devised a technique whereby semi-synthetic natural lan-
guage was paired against state-action representations inter-
nal to an autonomous system. The semi-synthetic language
was produced by observing humans “thinking out loud”
while performing a task and then creating grammar that re-
produced and generalized the utterances (described below).
This enables us to use the grammar to evaluate the accu-
racy of our system since we can compare the rationaliza-
tions produced by our system to the most likely rule that
would have generated that utterance in the grammar. Similar
approaches involving the use of semi-synthetic corpora have
been adopted in scenarios, such as text understanding (We-
Figure 2: Testing and training maps made with 25% obsta-
cles (left), 50% obstacles (center), and 75% obstacles (right).
ston et al. 2015), where ground truth is necessary to evaluate
the system.
We conducted the experiments by generating rationaliza-
tions for states and actions in a custom implementation of
the game Frogger. In this environment, the agent must nav-
igate from the bottom of the map to the top while avoiding
obstacles in the environment. The actions available to the
agent in this environment are movement actions in the four
cardinal directions and action for standing still.
We evaluate our rationalization technique against two
baselines. The ﬁrst baseline, the random baseline, randomly
selects any sentence that can be generated by the testing
grammar as a rationalization. The second baseline, the ma-
jority vote baseline, always selects sentences associated with
the rule that is most commonly used to generate rationaliza-
tions on a given map.
Below we will discuss the process for creating the gram-
mar, our training/test sets, and the results of this evaluation
in more detail.
Grammar Creation
In order to translate between state in-
formation and natural language, we ﬁrst need ground truth
rationalizations that can be associated explicitly with state
and action information. To generate this information, we
used crowdsourcing to gather a set of gameplay videos
of 12 human participants from 3 continents playing Frog-
ger while engaging in a think-aloud protocol, following
the work by (Dorst and Cross 2001; Fonteyn, Kuipers, and
Grobe 1993).

After players completed the game, they uploaded their
gameplay video to an online speech transcription service
and assigned their own utterances to speciﬁc actions. This
layer of self-validation in the data collection process facili-
tates the robustness of the data. This process produced 225
action-rationalization trace pairs of gameplay.
We then used these action-rationalization annotations to
construct a grammar for generating synthetic sentences,
grounded in natural language. This grammar uses a set of
rules based on in-game behavior of the Frogger agent to gen-
erate rationalizations that resemble the crowdsourced data
gathered previously. Since the grammar contains the rules
that govern when certain rationalizations are generated, it al-
lows us to compare automatically generated rationalizations
against a ground-truth that one would not normally have if
the entire training corpus was crowdsourced.
Training and Test Set Generation
Since we use a gram-
mar to produce ground truth rationalizations, one can in-
terpret the role of the encoder-decoder network as learning
to reproduce the grammar. In order to train the network to
do this, we use the grammar to generate rationalizations for
each state in the environment. The rules that the grammar
uses to generate rationalizations are based on a combina-
tion of the world state and the action taken. Speciﬁcally, the
grammar uses the following triple to determine which ra-
tionalizations to generate: (s1, a, s2). Here, s1 is the initial
state, a is the action performed in s1, and s2 is the resulting
state of the world after action a is executed. States s1 and s2
consist of the (x, y) coordinates of the agent and the current
layout of grid environment. We use the grammar to generate
a rationalization for each possible (s1, a, s2) triple in the en-
vironment and then group these examples according to their
associated grammar rules. For evaluation, we take 20% of
the examples in each of these clusters and set them aside for
testing. This ensures that the testing set contains a represen-
tative sample of the parent population while still containing
example triples associated with each rule in the grammar.
To aid in training we duplicate the remaining training ex-
amples until the training set contains 1000 examples per
grammar rule and then inject noise into these training sam-
ples in order to help avoid overﬁtting. Recall that the in-
put to the encoder-decoder network is a triple of the form
(s1, a, s2) where s1 and s2 are states. To inject noise, we
randomly select 30% of the rows in this map representation
for both s1 and s2 and redact them by replacing them with a
dummy value.
To evaluate how our technique for rationalization per-
forms under different environmental conditions, we devel-
oped three different maps. The ﬁrst map was randomly gen-
erated by ﬁlling 25% of the bottom with car obstacles and
ﬁlling 25% of the top with log platforms. The second map
was 50% cars/logs and the third map was 75% cars/logs (see
Figure 2). For the remainder of the paper, we refer to these
maps as the 25% map, the 50% map, and the 75% map re-
spectively. We also ensured that it was possible to complete
each of these maps to act as a loose control on map quality.
Training and Testing the Network
The parallel corpus of
state-action representations and natural language are used to
train an encoder-decoder neural translation algorithm based
on (Luong, Pham, and Manning 2015). We use a 2-layered
encoder-decoder network with attention using long short-
term memory (LSTM) nodes with a hidden node size of 300.
We train the network for 50 epochs and then use it to gener-
ate rationalizations for each triple in the testing set.
To evaluate the accuracy of the encoder-decoder network,
we need to have a way to associate the sentence generated by
our model with a rule that exists in our grammar. The gen-
erative nature of encoder-decoder networks makes this dif-
ﬁcult as its output may accurately describe the world state,
but not completely align with the test example’s output. To
determine the rule most likely to be associated with the gen-
erated output, we use BLEU score (Papineni et al. 2002) to
calculate sentence similarity between the sentence generated
by our predictive model with each sentence that can be gen-
erated by the grammar and record the sentence that achieves
the highest score. We then identify which rule in the gram-
mar could generate this sentence and use that to calculate
accuracy. If this rule matches the rule that was used to pro-
duce the test sentence then we say that it was a match.
Accuracy is deﬁned as the percentage of the predictions
that matched their associated test example. We discard any
predicted sentence with a BLEU score below 0.7 when com-
pared to the set of all generated sentences. This threshold
is put in place to ensure that low quality rationalizations in
terms of language syntax do not get erroneously matched to
rules in the grammar.
It is possible for a generated sentence to be associated
with more than one rule in the grammar if, for example,
multiple rules achieve the same, highest BLEU score. If the
rule that generated the testing sentence matches at least one
of the rules associated with the generated sentence, then we
count this as a match.
Rationalization Generation Results
The results of our
experiments validating our ﬁrst hypothesis can be found in
Table . As can be seen in the table, the encoder-decoder
network was able to consistently outperform both the ran-
dom baseline and majority baseline models. Comparing the
maps to each other, the encoder-decoder network produced
the highest accuracy when generating rationalizations for the
75% map, followed by the 25% map and the 50% map re-
spectively. To evaluate the signiﬁcance of the observed dif-
ferences between these models, we ran a chi-squared test
between the models produced by the encoder-decoder net-
work and random predictor as well as between the encoder-
decoder network models and the majority classiﬁer. Each
difference was deemed to be statistically signiﬁcant (p <
0.05) across all three maps.
Rationalization Generation Discussion
The models pro-
duced by the encoder-decoder network signiﬁcantly outper-
formed the baseline models in terms of accuracy percent-
age. This means that this network was able to better learn
when it was appropriate to generate certain rationalizations
when compared to the random and majority baseline models.
Given the nature of our test set as well, this gives evidence to
the claim that these models can generalize to unseen states
as well. While it is not surprising that encoder-decoder net-

Table 1: Accuracy values for Frogger environments with dif-
ferent obstacle densities. Accuracy values for sentences pro-
duced by the encoder-decoder network (full) signiﬁcantly
outperform those generated by a random model and a ma-
jority classiﬁer as determined by a chi-square test.
Map
Full
Random
Majority vote
25% obstacles
0.777
0.00
0.168
50% obstacles
0.687
0.00
0.204
75% obstacles
0.80
0.00
0.178
works were able to outperform these baselines, the margin
of difference between these models is worth noting. The per-
formances of both the random and majority classiﬁers are a
testament to the complexity of this problem.
These results give strong support to our claim that our
technique for creating AI rationalizations using neural ma-
chine translation can accurately produce rationalizations that
are appropriate to a given situation.
Rationalization Satisfaction Study Methodology
The results of our previous study indicate that our tech-
nique is effective at producing appropriate rationalizations.
This evaluation is meant to validate our second hypothe-
sis that humans would ﬁnd rationalizations more satisfying
than other types of explanation for sequential decision mak-
ing problems. To do this, we asked people to rank and jus-
tify their relative satisfaction with explanations generated by
three agents (described below) as each performs the same
task in identical ways, only differing in the way they express
themselves. The three agents are:
• The rationalizing robot, uses our neural translation ap-
proach to generate explanations.
• The action-declaring robot, states its action without any
justiﬁcation. For instance, it states “I will move right”.
• The numerical robot, simply outputs utility values with no
natural language rationalizations.
We will discuss our human subjects protocol and experimen-
tal results below.
Participants
Fifty-three adults (age range = 22 – 64
years, M = 34.1, SD = 9.38) were recruited from Ama-
zon Mechanical Turk (AMT) through a management ser-
vice called TurkPrime (Litman, Robinson, and Abberbock
2017). Twenty-one percent of the participants were women,
and only three countries were reported when the participants
were asked what country they reside in. Of these, 91% of
people reported that they live in the United States.
Procedure
After reading a brief description of our study
and consenting to participate, participants were introduced
to a hypothetical high-stakes scenario. In this scenario, the
participant must remain inside a protective dome and rely on
autonomous agents to retrieve food packages necessary for
survival. The environment is essentially a “re-skinned” ver-
sion of Frogger (see ﬁgure 3) that is contextually appropriate
for the high-stakes hypothetical scenario. To avoid effects of
Figure 3: The rationalizing robot navigating the modiﬁed
Frogger environment
Figure 4: Count of 1st, 2nd, and 3rd place ratings given to each
robot. The rationalization robot received the most 1st place,
the action-declaring robot received the most 2nd place, and
the numeric robot received the most 3rd place ratings.
preconceived notions, we did not use the agents’ descrip-
tive names in the study; we introduced the agents as “Robot
A” for the rationalizing robot, “Robot B” for the action-
declaring robot, and “Robot C” for the numerical robot.
Next, the participants watched a series of six videos in
two groups of three: three depicting the agents succeeding
and three showing them failing. Participants were quasi-
randomly assigned to one of the 12 possible presentation
orderings, such that each ordering was designed to have the
same number of participants. After watching the videos, par-
ticipants were asked to rank their satisfaction with the ex-
pressions given by each of the three agents and to justify
their choices in their own words.
Satisfaction Results and Analysis
Figure 4 shows that
the rationalizing robot (Robot A) received the most 1st place
ratings, the action-declaring robot (Robot B) received the
most 2nd place ratings, and the numerical robot (Robot C)
received the most 3rd place ratings. To determine whether
any of these differences in satisfaction ratings were signiﬁ-
cant, we conducted a non-parametric Friedman test of differ-
ences among repeated measures. This yielded a Chi-square
value of 45.481, which was signiﬁcant (p < 0.001).

To determine which of the ratings differences were
signiﬁcant, we made pairwise comparisons between the
agents, using the Wilcoxon-Nemenyi-McDonald-Thompson
test (Hollander, Wolfe, and Chicken 2013). All three com-
parisons yielded a signiﬁcant difference in ratings. The sat-
isfaction ratings for the rationalization robot were signiﬁ-
cantly higher than those for both the action-declaring robot
(p = 0.0059) as well as the numerical robot (p < 0.001).
Furthermore, the ratings for the action-declaring robot were
signiﬁcantly higher than those for the numeric robot (p <
0.001).
We also analyzed the justiﬁcations that participants pro-
vided for their rankings using approaches inspired by the-
matic analysis (Aronson 1995) and grounded theory (Strauss
and Corbin 1994). Starting with an open coding scheme, we
developed a set of codes that covered various reasonings be-
hind the ranking of the robots. Using the codes as analytic
lenses, we clustered them under emergent themes, which
shed light into the dimensions of satisfaction. Through an
iterative process performed until consensus was reached, we
distilled the most relevant themes into insights that can be
used to understand the “whys” behind satisfaction of expla-
nations. In our discussion of these responses, we refer to par-
ticipants using the following abbreviation: P1 is used to refer
to participant 1, P2 is used to refer to participant 2, etc.
Findings and Discussion
As we hypothesized, the ratio-
nalizing agent’s explanations were rated higher than were
those of the other two agents, implying that rationaliza-
tion enhances satisfaction over action-declaring, natural lan-
guage description and over numeric expressions.
In addition to the preference for a natural language sub-
strate, four attributes emerged from our thematic analy-
sis that characterize prototypical satisfactory rationalization:
explanatory power, relatability, ludic nature, and adequate
detail. These same attributes can be used to distinguish the
rationalizing robot from the action-declaring robot.
In terms of explanatory power, the rationalizing robot’s
ability to explain its actions was the most cited reasons for its
superior placement in the satisfaction rankings. Human ra-
tionalizations allow us to form a theory of mind for the other
(Goldman and others 2012), enabling us to better understand
motivations and actions of others. Similarly, the rationaliz-
ing robot’s ability to show participants “...what it’s doing
and why” (P6) enabled them to “...get into [the rational-
izing robot’s] mind” (P17), boosting satisfaction and conﬁ-
dence. Despite using natural language, the action declaring
robot yielded dissatisfaction. As P38 puts it, “[The action-
declaring robot] explained almost nothing...which was dis-
appointing.” The explanatory attribute of the rationalizing
robot reduces friction of communication and results in im-
proved satisfaction.
With respect to relatability, the personality expressed
through rationalizing robot’s explanation allowed partici-
pants to relate to it:
[The rationalizing robot] was relatable. He felt like a
friend rather than a robot. I had a connection with [it]
that would not be possible with the other 2 robots be-
cause of his built-in personality. (P21)
Participants also engaged with the rationalizing robot’s ludic
quality, expressing their appreciation of its perceived play-
fulness: “[The rationalizing robot] was fun and entertaining.
I couldn’t wait to see what he would say next!” (P2).
A rationalization yields higher satisfaction if it is ade-
quately detailed. The action-declaring robot, despite its lack
of explainability, received some positive comments. People
who preferred the action-declaring robot over the rational-
izing robot claimed that “[the rationalizing robot] talks too
much” (P47), the action-declaring robot is “nice and simple”
(P48), and that they “would like to experience a combination
of [the action-declaring robot] and [the rationalizing robot]”
(P41). Context permitting, there is a need to balance level of
detail with information overload.
These ﬁndings also align with our proposed beneﬁts of AI
Rationalization, especially in terms accessible explanations
that are intuitive to the non-expert. We also observed how
the human-centered communication style facilitates higher
degrees of rapport. The insights not only help evaluate the
quality of responses generated by our system, but also sheds
light into design considerations that can be used to build the
next generation of explainable agents.
Future Work
Our next step is to build on our current work and investi-
gate hypotheses about how types of rationalizations impact
human preferences of AI agents in terms of conﬁdence, per-
ceived intelligence, tolerance to failure, etc. To address these
questions, it will be necessary to conduct experiments simi-
lar to the one described above. It will be interesting to see
how inaccurate rationalizations can be before feelings of
conﬁdence and rapport are signiﬁcantly affected. Our exper-
imental methodology can be adapted to inject increasingly
more error into the rationalizations and understand human
preferences.
Conclusions
AI rationalization provides a new lens through which we can
explore the realms of Explainable AI. As society and AI in-
tegrates further, we envision the increase in human operators
who will want to know why an agent does what it does in an
intuitive and accessible manner.
We have shown that creating rationalizations using neu-
ral machine translation techniques produces rationalizations
with accuracies above baselines. We have also shown that ra-
tionalizations produced using this technique were more sat-
isfying than other alternative means of explanation.
Rationalization allows autonomous systems to be relat-
able and human-like in their decision-making when their in-
ternal processes can be non-intuitive. We believe that AI ra-
tionalization can be an important step towards the democra-
tization of real-world commercial robotic systems in health-
care, accessibility, personal services, and military teamwork.
References
[Andreas, Dragan, and Klein 2017] Andreas,
J.;
Dragan,
A. D.; and Klein, D. 2017. Translating neuralese. CoRR
abs/1704.06960.

[Aronson 1995] Aronson, J. 1995. A pragmatic view of the-
matic analysis. The qualitative report 2(1):1–3.
[Core et al. 2006] Core, M.; Lane, H. C.; van Lent, M.; Gom-
boc, D.; Solomon, S.; and Rosenberg, M. 2006. Building
Explainable Artiﬁcial Intelligence Systems. In Proceedings
of the 18th Innovative Applications of Artiﬁcial Intelligence
Conference.
[Dorst and Cross 2001] Dorst, K., and Cross, N. 2001. Cre-
ativity in the design process: co-evolution of problem–
solution. Design studies 22(5):425–437.
[Fonteyn, Kuipers, and Grobe 1993] Fonteyn,
M.
E.;
Kuipers, B.; and Grobe, S. J. 1993. A description of think
aloud method and protocol analysis.
Qualitative Health
Research 3(4):430–441.
[Goldman and others 2012] Goldman, A. I., et al. 2012. The-
ory of mind. The Oxford handbook of philosophy of cogni-
tive science 402–424.
[Hollander, Wolfe, and Chicken 2013] Hollander,
M.;
Wolfe, D. A.; and Chicken, E.
2013.
Nonparametric
statistical methods. John Wiley & Sons.
[Krause, Perer, and Ng 2016] Krause, J.; Perer, A.; and Ng,
K.
2016.
Interacting with predictions: Visual inspection
of black-box machine learning models. In Proceedings of
the 2016 CHI Conference on Human Factors in Computing
Systems, 5686–5697. ACM.
[Laird and van Lent 2001] Laird, J., and van Lent, M. 2001.
Human-level ais killer application: Interactive computer
games. AI Magazine 22(2):15–25.
[Litman, Robinson, and Abberbock 2017] Litman,
L.;
Robinson, J.; and Abberbock, T. 2017. Turkprime. com:
A versatile crowdsourcing data acquisition platform for
the behavioral sciences.
Behavior research methods
49(2):433–442.
[Luong, Pham, and Manning 2015] Luong, M.-T.; Pham, H.;
and Manning, C. D. 2015. Effective approaches to attention-
based neural machine translation.
In Proceedings of the
2015 Conference on Empirical Methods in Natural Lan-
guage Processing, 1412–1421. Lisbon, Portugal: Associa-
tion for Computational Linguistics.
[Mnih et al. 2015] Mnih, V.; Kavukcuoglu, K.; Silver, D.;
Rusu, A.; Veness, J.; Bellemare, M.; Graves, A.; Ried-
miller, M.; Fidjeland, A.; Ostrovski, G.; Petersen, S.; Beat-
tie, C.; Sadik, A.; Antonoglou, I.; King, H.; Kumaran, D.;
Wierstra, D.; Legg, S.; and Hassabis, D. 2015. Human-
level control through deep reinforcement learning. Nature
518(7540):529533.
[Papineni et al. 2002] Papineni, K.; Roukos, S.; Ward, T.;
and Zhu, W.-J. 2002. Bleu: a method for automatic evalua-
tion of machine translation. In Proceedings of the 40th an-
nual meeting on association for computational linguistics,
311–318. Association for Computational Linguistics.
[Ribeiro, Singh, and Guestrin 2016] Ribeiro, M. T.; Singh,
S.; and Guestrin, C. 2016. Why should i trust you?: Explain-
ing the predictions of any classiﬁer. In Proceedings of the
22nd ACM SIGKDD International Conference on Knowl-
edge Discovery and Data Mining, 1135–1144. ACM.
[Strauss and Corbin 1994] Strauss, A., and Corbin, J. 1994.
Grounded theory methodology. Handbook of qualitative re-
search 17:273–85.
[van Lent et al. 2005] van Lent, M.; ; Carpenter, P.; McAlin-
den, R.; and Brobst, P. 2005. Increasing replayability with
deliberative and reactive planning.
In 1st Conference on
Artiﬁcial Intelligence and Interactive Digital Entertainment
(AIIDE), 135–140.
[van Lent, Fisher, and Mancuso 2004] van Lent, M.; Fisher,
W.; and Mancuso, M. 2004. An explainable artiﬁcial in-
telligence system for small-unit tactical behavior. In Pro-
ceedings of the 16th conference on Innovative Applications
of Artiﬁcal Intelligence.
[Watkins and Dayan 1992] Watkins, C., and Dayan, P. 1992.
Q-learning. Machine Learning 8(3-4):279292.
[Weston et al. 2015] Weston, J.; Bordes, A.; Chopra, S.;
Rush, A. M.; van Merri¨enboer, B.; Joulin, A.; and Mikolov,
T. 2015. Towards ai-complete question answering: A set of
prerequisite toy tasks. arXiv preprint arXiv:1502.05698.
[Yosinski et al. 2015] Yosinski, J.; Clune, J.; Fuchs, T.; and
Lipson, H. 2015. Understanding neural networks through
deep visualization. In In ICML Workshop on Deep Learning.
Citeseer.
[Zeiler and Fergus 2014] Zeiler, M. D., and Fergus, R.
2014.
Visualizing and understanding convolutional net-
works. In European conference on computer vision, 818–
833. Springer.

