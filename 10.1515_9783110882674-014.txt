Lambek Categorial Grammar 
and the Autonomy Thesis* 
Michael Moortgat 
0. SUMMARY 
Standard generative approaches to language structure distinguish a number 
of autonomous levels of representation accounting for the properties of 
semantic, morphological, syntactic and phonological structure in an in-
dependent way. As a result of the autonomy thesis, the fit between levels 
is not perfect and additional non-trivial readjustment principles are needed 
to govern the mapping between them. As an alternative this paper presents 
a flexible categorial grammar (Lambek's 1958 directional type calculus) 
and investigates what this theory of grammar has to say about the mapping 
between levels of representation. The crucial property of the Lambek 
calculus is structural completeness: 
given a set of initial (lexical) type 
assignments to the subparts of an expression, the resulting type can be 
derived for any grouping of the subexpressions into constituents. That 
is, in the Lambek calculus the notion of autonomous syntactic constituent 
structure disappears. The observable structure that remains is the auto-
nomous prosodic organization of the string: the intonational rather than 
the syntactic phrasing. The Lambek calculus suggests that the prosodic 
structure of an expression can be directly interpreted semantically, without 
the mediating agency of morphosyntactic constituents differing from the 
prosodic constituents. The autonomy of syntax, from this perspective, is 
replaced by the autonomy of types: the informational content of syntactic 
constituent structure in a conventional phrase structure approach is trans-
mitted to the internal structure of the types in a flexible categorial system, 
and the valid type transitions preserve this information. 
The structure of the paper is as follows. Section 1 outlines the category 
* The material from this paper was presented at the Max Planck Institut fur Psycholinguistik 
(Nijmegen) and at a seminar on categorial grammar at Tilburg University. I thank the members 
of these audiences, and those of the Utrecht symposium Morphology & Modularity, for 
their comments and criticism. The ideas presented here owe much to the work of Bach, 
Schmerling and Oehrle on the relationship between prosodic and syntactic structure. The 
generalization of categorial theory which these authors propose derives from a flexible theory 
of operations (besides concatenation) - in the Lambek system the flexibility is localized 
in the type calculus. 

234 M. Moortgat 
system and the reduction system of the Lambek calculus. Recursive 
generalizations of the reduction laws are introduced, which are valid as 
a corollary of the structural completeness of the calculus. Sections 2 to 
4 investigate rebracketing phenomena from the perspective of the gene-
ralized reduction laws. The appendix contains explicit proofs for specific 
reduction theorems discussed in the text. 
1. STANDARD VERSUS GENERALIZED CATEGORIAL GRAMMAR 
A categorial calculus is defined by its category system and its reduction 
system. It is customary to regard the category system as the inductive 
closure of a finite set of basic categories under a set of category-forming 
operations. Let the alphabet of the category system consist of BASCAT 
(the set of basic category symbols), and the connectives '/' and 
(right-
division and left-division, respectively), plus parentheses. Now we can define 
CAT, the set of well-formed categories, or syntactic types (these notions 
will be used interchangeably here). CAT is the inductive closure of BASCAT 
under the operations R/ and R\, defined as follows: For any two strings 
X, Y over the alphabet, 
(1) 
R/(X, Y) = (X/Y), 
R\(X, Y) = (Y\X). 
We will interpret a category (X/Y) (or (Y\X)) as a functor with domain 
Y and range X. The connective indicates whether the functor looks for 
the domain category to the right ('/') or to the left ('\'). In other words, 
the ordering of our complex categories will invariably have the domain 
subtype under the fraction sign. In order to make the intended interpretation 
abundantly clear, a category graph (in the style of Gazdar & Pullum 1987) 
might be helpful. Below is a graph for the category S/(NP\S), a category 
that would be suitable for subject NP's regarded as functors looking for 
a VP ( = NP\S) to give an S. Observe that the categories are recursively 
structured objects: domain and range are category-valued attributes. This 
property will be fully exploited in the generalization of the reduction laws 
to be introduced shortly. 

Lambek Categorial Grammar 
235 
(2) 
connective: / 
domain: 
connective: \ 
domain: 
bascat: NP 
range: 
bascat: S 
range: 
bascat: S 
Standard categorial grammar agrees with X-bar phrase structure theory 
in modelling head constituents as functors, with the subcategorized ar-
guments) as domain, and as range the projected phrase when the arguments 
are satisfied. It is surprising that, given the characterization of heads as 
functors, the combinatorics of standard categorial grammar or X-bar phrase 
structure theory remains essentially trivial: it is restricted to application 
of the functor to its argument (in the X-bar case satisfaction of subca-
tegorization requirements in the sister domain of the head). This restriction 
to functional application is responsible for the equivalence of standard 
categorial grammars and context-free phrase structure grammars (cf. Bar-
Hillel, Gaifman & Shamir 1960). 
The generalized versions of categorial grammar that have been proposed 
can be viewed as attempts to design a flexible categorial theory with a 
natural combinatorics for functor expressions. It has become clear in recent 
years that the paradigm case of such a flexible category system is the 
type calculus proposed in Lambek (1958). The system can be presented 
in a variety of equivalent ways. We choose here for the Gentzen sequent 
calculus which Lambek uses to establish the completeness of the system. 
The Gentzen format will provide us with a tool to prove the validity of 
a number of non-standard reduction laws that will be introduced in the 
course of this paper. Apart from that, it is the most illuminating presentation 
to gain a working knowledge of Lambek categorial systems. 
(3) 
System L: Gentzen sequent calculus for Lambek's (1958) directi-
onal system. (Type-forming connectives:'/' and 'V; X, Y, Z are 
types, T, U, V sequences of types, T non-empty) 
Axioms: X => X 
Inference Rules: 
[/¡right] 
if T,Y => X 
then 
X/Y 
[/¡left] 
if T=» Y and U,X, V=> Z 
then U,X/Y,T,V^ 
Z 
ifY,r=>X 
[Vright] 
then r=> Y\X 
if T Y and 17,X, V => Z [Vleft] 
then 
U,T,Y\X,F=>Z 

236 M. Moortgat 
A sequent, in (3), is a pair Antecedent => Succedent, where the antecedent 
is a sequence of types, the succedent a single type. The sequent calculus 
gives content to the notion 'validly derives' (written ' =>'). Axioms of the 
calculus are trivial sequents of the form X=>X, which cannot fail to be 
valid. In order to prove the validity of a non-trivial sequent Ai,...., A„ => X, 
we apply the inference rules of L which reflect the semantics of the type-
forming connectives, in this case'/' and 'Y. The left rules have two premises, 
i.e. they cause the proof tree to split in two branches; the right rules are 
one-premise rules which do not cause branching. Observe that each inference 
rule removes a connective either from the antecedent (the /, Yleft rules), 
or from the succedent (the /, Yright rules). Assuming that we work with 
finite sequents, the procedure of removing connectives will eventually 
terminate. We have a demonstration of the validity of the sequent if all 
the leaves of the proof tree are labeled with axioms. The reader is referred 
to Lambek (1958) for the relation between the Gentzen approach and 
the alternative formulations of the categorial calculus. In order not to 
obscure the linguistic points of this paper with a forest of proof trees, 
I have collected the proofs of critical reduction laws in the Appendix. 
The trusting reader can skip this material, although a glance at it might 
facilitate the understanding of what follows. 
Restricting our attention to binary and unary reduction laws, repre-
sentative theorems for the system L are T1 to T5 given in (4), with their 
usual names and the abbreviations we will add to derivation trees. The 
left column has right application as the main connective, the right column 
left application. The division rule T5 is the characteristic theorem of L, 
i.e. the theorem which distinguishes this system from weaker categorial 
calculi. Dropping T5 from L results in what is known as the system F 
(Cohen's 1967 Free Categorial Calculus, cf. Zielonka 1978). F minus T4 
and T3 gives the system K (Karlgren 1978), and K minus T2, of course, 
the standard categorial system AB (after Ajdukiewicz 1935 and Bar-Hillel 
1960). The reader is referred to Zwarts (1986) for a lucid exposition of 
the linguistic properties of the systems AB up to F, and to Van Benthem 
(1986) for foundational aspects of the categorial spectrum. 
(4) 
Reduction laws 
Tl: X/Y.Y => X 
Y,Y\X =» X 
(Application [A]) 
T2: X/Y.Y/Z => X/Z 
Z\Y,Y\X => Z\X 
(Composition [C]) 
T3: (Y\X)/Z => Y\(X/Z) Y\(X/Z) => (Y\X)/Z (Commutativity [Coram]) 
T4: Y => X/(Y\X) 
Y => (X/Y)\X 
(Lifting [L]) 
T5: X/Y => (X/Z)/(Y/Z) Y\X => (Z\Y)\(Z\X) 
(Division [D]) 

Lambek Categorial Grammar 
237 
For the remainder of this paper, two properties of the directional Lambek 
calculus are important (a positive one and a negative one): the system 
L is structurally complete, and it is permutation-free. 
1.1. Structural Completeness 
In L an expression does not belong just to one type (category) but to 
a family of related types. The lexical assignment function associates an 
expression with a basic type (abstracting away from lexical ambiguity, 
of course); from this basic assignment derived types can be generated with 
an interpretation which is completely reducible to the interpretation of 
the basic type. As a corollary of the above, a string of atoms (morphemes) 
is associated not just with one constituent structure, but with a set of 
simultaneous representations reflecting the different ways the string can 
be reduced. Buszkowski (1988, references cited there) has shown that L 
is structurally complete, in the following sense: If a sequence of categories 
Xi, ..., Xn reduces to Y, there is a reduction to Y for any bracketing of 
Xi, ..., Xn into constituents. Among these representations, there is no 
privileged one as far as the categorial calculus is concerned. Compare 
the left and the right-branching derivations for the prepositional phrase 
below in (5a) with the lexical type assignment, in (5b) with a lifted type 
for N which turns this element into the main functor. (Derived nodes 
are annotated with the combinatory rule used to get them; leaves carry 
the lexical type assignment.) 
(5) 
a. 
PP,[A] 
i 
NP,[A] 
PP/NP 
in 
in 
PP/NP 
I 
NP/N 
de 
the 
NP/N 
1 
N 
tuin 
garden 
N 
b. 
PP,[A] 
PP/NP 
in 
in 
PP/NP 
NP/N 
de 
the 
NP/N 
PP/N,[C] 
(PP/N)\PP,[L] 
N 
tuin 
garden 
N 
PP/N,[C] 
PP,[A] 
(NP/N)\NP,[L] 
NP,[A] 
(PP/NP)\PP, [L] 
PP,[A] 

238 M. Moortgat 
As a consequence of the structural completeness of L, the reduction laws 
can be recursively generalized, mirroring the recursive structure of the 
categories. Consider the following generalized versions of binary cancel-
lation and unary type lifting. 
(6) 
Recursive cancellation [RC]: 
a. 
X/Y,Y => X 
a'. Y,Y\X => X 
b. 
Z,X/Y=>W/Y 
b\ 
Y\X,Z=>Y\W 
ifZ,X=>W 
ifX,Z=>W 
Recursive lifting [RL]: 
c. 
X=>Y/(X\Y) 
c'. X => (Y/X)\Y 
d. 
X => Z/(X\Y) 
d\ X => (Y/X)\Z 
if Y 
Z 
if Y=»Z 
The generalizations as usual come in pairs, (6a-d) taking care of right 
division as the main connective, (6a'-d') for left division. The non-recursive 
boundary clause for generalized cancellation is simple functional application 
(clause 6a); for generalized lifting it is the elementary lifting of T4 (clause 
6c); The recursive clauses (6b and 6d) make it possible to access subtypes 
of the categories involved in the rules until the boundary case is reached. 
Recursive cancellation collapses into one compact scheme the effects 
of simple application (Tl), simple composition (T2), commutativity (T3) 
and division (T5). Let us illustrate this with an example. A standard 
categorial system cannot combine the subject NP of the following sentence 
with the rest until first the complete VP (= NP\S) has been derived by 
two calls to rightward functional application. 
(7) 
Mary 
put 
the book on the table 
NP 
((NP\S)/PP)/NP 
NP 
PP 
But the generalized cancellation law can immediately combine the adjacent 
elements Mary and put. The path through the recursion is schematically 
represented in the diagram below. At each level, the applicable clause 
of [RC] is indicated, and the instantiation of the variables in the definition 
of [RC] to the subtypes of our example. Example 1 in the Appendix gives 
a Gentzen proof for this type transition, and its interpretation. 

Lambek Categorial Grammar 
239 
(8) 
NP,(((NP\S)/PP)/NP) => ((S/PP)/NP)? 
(i) 
NP,((NP\S)/PP) => (S/PP) 
(ii) 
NP,(NP\S) => S 
(iii) 
true 
true 
true 
(i) 
6b: 
Z=NP,Y=NP,X=(NP\S)/PP,W=S/PP 
(ii) 6b: 
Z=NP,Y=PP,X=NP\S,W=S 
(iii) 6a': 
Y=NP,X=S 
Intuitively, the recursive generalization of cancellation allows one to 
combine two adjacent elements over an arbitrary number of interventing 
brackets in a conventional CF labelled bracketing. The condition is that 
the two elements must contain as subtypes a functor and an argument 
category which can be cancelled by simple application: one could not 
combine, say, NP and AP. But the generalized lifting law always allows 
one to satisfy this condition by turning argument expressions into functors 
of arbitrary complexity. For example, the atomic N category for tuin 
('garden') in the tree above could be lifted by [RL] into a functor 
(NP/N)\((PP/NP)\PP), i.e. a functor which looks to the left for a 
determiner (NP/N) and a preposition (PP/NP) to give a prepositional phrase 
(PP). And on this lifted type, tuin could directly combine with a verb 
taking a PP complement (PPWP e.g. zitten, 'to sit') through [RC], Here 
is how we step through the definition of [RL] in this case. 
(9) 
N => ((NP/N)\((PP/NP)\PP)? 
NP => ((PP/NP)\PP)? 
true 
true 
(i) 
6d': 
X=N,Y=NP,Z=(PP/NP)\PP 
(ii) 6c': 
X=NP,Y=PP 
The recursive reduction laws illustrate in a particularly clear way what 
the property of structural completeness means. In the sequel, we will present 
categorial derivations in terms of the more familiar laws T1 to T5 where 
possible; the reader should bear in mind that they are equivalent to the 
more elegant derivations based solely on [RC] and [RL]. The discussion 
of cliticization in Section 3 presents examples which crucially rely on the 
generalizing power of [RC] and [RL]. 
(i) 
(ii) 

240 M. Moortgat 
1.2. Order Preservation 
The system L does not allow one to derive discontinuous dependencies 
(viewed as permutations of a 'basic' ordering): the valid combinatory 
operations in L preserve directionality. Van Benthem (1988, 1986 and 
elsewhere) has studied a non-directional variant of the Lambek calculus 
(System L*) which allows one to derive discontinuous dependencies, but 
which turns out to be too strong from a linguistic point of view. L* is 
permutation-closed: if a sequence of categories Xi, ...., X„ reduces to Y, 
then all permutations of Xi, ...., Xn will also reduce to Y (Van Benthem 
1988). In Moortgat (1988) it is suggested to derive discontinuous depen-
dencies by a disharmonic version of the Composition rule (C*), which 
combines functors with opposed directionalities. C* is not validly derivable 
within L, i.e. it is an extra axiom extending this system. 
(10) 
[C*] 
X/Y, Z\Y=>Z\X 
Y/Z, Y\X => X/Z 
It can be shown that by itself, the system L with C* added to it collapses 
into L*, but C* can be lexically constrained, i.e. only lexically restricted 
classes of morphemes have access to the strong Composition rule. Call 
the main functor in a composition rule the functor whose domain category 
gets cancelled, and the secondary functor the one whose range category 
gets eliminated in the result. We can expect two cases of lexical government 
of the mixed composition law: C* can be licensed either by the main functor 
or by the secondary functor. 
The Dutch verb-raising construction (cf. Steedman 1985) is a typical 
example of C* keyed to the main functor. The verb-raising trigger (i.e. 
the main functor) penetrates into its domain. On the other hand, the 
argument functor is the licensing element for C* in morphological com-
plement inheritance constructions (affixation with a directionality conflict 
between affix and base (cf. Moortgat 1984)). The connection between base 
and complement in these cases is characterized as a loose bond, which 
can be broken by the affix. 
(11) 
a. 
tevreden 
heid 
met 
NP 
indebted 
ness 
to 
NP 
A/PP 
ANN 
PP 
I 
| 
I 
N/PP,[C*] 
b. 
that 
he 
a 
book 
wants 
read 
dat 
hij 
een 
boek 
wil 
lezen 
NP 
VP/VP 
NPWP 
' 
1 
1 
NP\VP,[C*] 

Lambek Categorial Grammar 
241 
The study of discontinuity falls outside the scope of this article. For the 
rest of this paper, we will assume that a lexically constrained C* introduces 
just the right amount of permutation disturbance required by discontinuous 
dependencies in an otherwise well-ordered system, and we will concentrate 
on rebracketing phenomena from the perspective of the order-preserving 
system L. 
1.3. Boolean Evidence 
As corollary of the structural completeness of L, any string of adjacent 
elements can be collected into a 'constituent' by appropriate type transitions 
of the initial assignments. It may seem at first sight that this property 
makes the system too expressive. The strongest support for the flexible 
constituent concept comes from the study of type shifting and the Boolean 
connectives. The theory of generalized coordination (Keenan & Faltz 1985, 
Partee & Rooth 1983) predicts that the unorthodox constituents derivable 
within L can show up in conjunction with constituents of the same type. 
Work on recalcitrant coordination phenomena (non-constituent conjunc-
tion, right-node raising, cf. Dowty 1988, Steedman 1985, Zwarts 1986) 
indicates that indeed one needs more than the rigid constituency of standard 
phrase-structure approaches. See the examples in (12), all cases of con-
junction of equal types in a flexible categorial syntax. 
(12) 
a. 
John gave (a book to Mary) and (a record to Susan) 
b. 
Mary painted (the chair red) and (the table blue) 
c. 
(John bought) and (Mary sold) a worthless old car 
d. 
(John leans against) but (Mary hides behind) the strong oak 
In the following sections we will apply the Boolean argumentation to 
mismatches between the prosodic and the morphosyntactic organisation, 
first in a number of so-called rebracketing cases. Then we turn to the 
field of cliticization restructuring, where the recursive generalization of 
the combinatory laws comes into play, which is characteristic for L, and 
absent from subsystems such as F. 
2. PROSODIC PHRASING VERSUS MORPHOSYNTACTIC PHRASING 
The Lambek calculus suggests a way to eliminate so-called mismatches 
between levels of representation, i.e. between ultimately the (autonomous) 
prosodic representation, and the semantic representation (or an isomor-
phous morphosyntactic representation). The basic type assignments de-
termine the government relations between the elements; these semantic 

242 M. Moortgat 
dependencies are preserved (modulo scope ambiguities) by the valid 
combinatory operations. As a result, the prosodic structure itself can be 
directly interpreted compositionally. The level of autonomous syntax turns 
out to be a dispensible artefact between the two indispensible levels of 
sound and meaning. 
As a first innocent illustration of this point, we turn to the much discussed 
mismatch between intonational and syntactic phrasing in complex noun 
phrases with postnominal modifiers, such as the lettering on the cover of 
the book (see for example Selkirk 1980, Neijt 1984). On the uncontroversial 
assumption that articles and prepositions are proclitics prosodically, the 
phonological component will break up the noun phrase in the three prosodic 
subphrases the lettering, on the cover, of the book. This intonational phrasing 
is at odds with the uniformly left-branching structure which would be 
assigned by the phrase-structure syntax. What I would like to suggest is 
that the motivation for this left-branching syntactic representation is in 
the end semantic in nature. Semantically, the postnominal prepositional 
phrases are restricting functions, in the sense of Keenan & Faltz (1985): 
cover of the book entails (is a subset of, given that nouns denote sets) 
cover; lettering on the cover of the book entails lettering. To get the proper 
interpretation of the complete noun phrase, we want these restricting 
functions to be in the scope of the determiner. The syntactic structure 
generated by a conventional phrase structure grammar offers a level of 
representation where semantic scope can be defined in terms of the structural 
notion c-command. 
To convince oneself of the necessity of a semantic level of representation 
where the modifiers are in the scope of the determiner, consider polarity 
environments. The Dutch negative polarity item ook maar is licensed by 
(a subset of the) monotone decreasing (downward entailing) functions (cf. 
Zwarts 1986). The grammaticality of the examples below is accounted for 
on the assumption that the postnominal prepositional phrases are in the 
scope of the determiners geen ('no') and alle ('all'), which are monotone 
decreasing in their first (nominal) argument. (A functor / is downward 
entailing if for X < (entails) Y, f(Y) < f(X), e.g. father < man but no 
man < no father). 
(13) 
a. 
Geen schaker met ook maar enig begrip voor het spel zal deze 
pion slaan 
(No player with any-at-all knowledge of the game will take 
this pawn) 
b. 
Alle schakers met ook maar enige ervaring vermijden deze 
opening 
(All players with any-at-all experience avoid this opening) 

Lambek Categorial Grammar 
243 
From the point of view of the Lambek calculus, the semantic facts 
concerning determiner scope do not legitimate conclusions about the 
syntactic bracketing of the expression. The structural completeness of the 
calculus guarantees that a reading with the indicated scope relations is 
derivable for any bracketing of the string into constituents. The alternative 
(simultaneous) analyses for (13) illustrate this point. On top is a pure 
applicative derivation, structurally isomorphic to the conventional phrase 
structure analysis. The bottom derivation is semantically equivalent to the 
top analysis, since the combinatory operations preserve semantic structure. 
But the bracketing of the latter derivation coincides with the intonational 
phrasing. See Example 2 in the Appendix for an explicit proof and semantic 
interpretation. 
Discussing this example, Neijt remarks that "the set of rules that map 
syntactic structures into phonological ones are by no means trivial, nor 
easy to construct", and that "it is tempting to neglect syntactic structure 
altogether, and to solely base the definition of the phonological phrase 
on the distinction between lexical items and non-lexical ones" (Neijt 
1984:181). The Lambek calculus offers a promising perspective for such 
a line of research, since syntactic information the prosodic grammar might 
refer to is reflected in the type structure of the individual elements, whereas 
the actual grouping of these elements in syntactic constituents is irrelevant 
for the phonological phrasing. 

244 M. Moortgat 
(14) 
NP,[A] 
N,[A] 
N\N,[A] 
NP,[A] 
N,[A] 
N\N, [A] 
NP,[A] 
NP/N 
N 
(N\N)/NP NP/N 
N 
(N\N)/NP NP/N 
N 
the 
lettering 
on 
the 
cover 
of 
the 
book 
NP/N 
N 
(N\N)/NP 
NP/N 
N 
(N\N)/NP 
NP/N 
N 
N/(N\N),[L] 
„ 
L 
NP/(N\N),[C] 
N/(N\N),[L] 
I 
I 
NP,[A] 
NP/(N\N),[C] 
I 
N\N,[A] 
(N\N)/(N\N),[C] 
I 
NP,[A] 
N\N,[A] 
l 
(i.e., the lettering, on the lifted reading of lettering is a function 
with N\N domain and NP range. The N\N modifier will end up 
modifying lettering on its initial non-lifted lexical type assignment 
N.) 

Lambek Categorial Grammar 
245 
3. MORPHOLOGICAL BRACKETING PARADOXES 
The above situation, transposed to the level of word structure, fits the 
description of the morphological bracketing paradoxes, a more explosive 
area of theoretical activity. In cases like ungrammaticality, 
model theoretic, 
transformational grammarian, phonological evidence requires a right-bran-
ching structure: the stress-affecting suffix and its base form a much tighter 
prosodic unit than the combination of the suffixed base with a prefix 
(;un + grammaticality), 
a left compound member {model + theoretic), or even 
a syntactic modifier (transformational grammarian). 
But the semantic 
structure assigned to these examples has to be left-branching in theories 
where semantic scope is defined in terms of c-command: the suffix meaning 
is to be added in compositional fashion to the complex expressions 
ungrammatical, 
model theory and transformational 
grammar, not just to 
grammatical, 
theory and grammar. As in the complex noun phrase case 
of the previous section, the structural completeness of the Lambek calculus 
guarantees that there is a representation which combines the bracketing 
properties of the phonological representation with the required wide scope 
of the suffixes. See (15) and Example 3 in the Appendix. 
(15) 
'North' 
Noord 
N/N 
'Korea' 
korea 
N 
I 
(N/N)\N, [L] 
'an' 
aans 
N \ A 
(N/N)\A,[C] 
A, [A] 
(prosodic structure: 
right-branching; 
semantics 
left-branching 
UFT(korea): 
XX.X(korea), 
X 
a 
variable 
of 
type 
t(N/N); 
COMP(aanj, LIFT {korea)): XX. 
aans{X{korea)).) 
The morphological bracketing paradoxes are instructive to highlight a 
property of the Lambek approach which is absent from competing solutions 
to this type of mismatch: the independence of bracketing and semantic 
scope. In phrase structure approaches to the paradoxes in the line of Pesetsky 
(1985), Sproat (this volume), the suffixes are interpreted at a level of semantic 
structure ('Logical Form'), where they are sisters of the material they have 

246 M. Moortgat 
in their scope. The phonological structure itself violates c-selection, and 
cannot be interpreted compositionally. Semantic scope, in the Lambek 
theory, is independent of bracketing or constituent structure. The scope 
of an expression is determined by the unary rules of type lifting, rather 
than by the binary combinatory rules which determine the bracketing into 
constituents. 
The virtue of separating semantic scope from constituent structure 
appears when one considers more complex cases of the bracketing paradoxes 
where affix scope can interact with the Boolean connectives, giving rise 
to real scope ambiguities. Morphological gapping phenomena (to use the 
deletion metaphor) are cases in point: 
(16) 
a. 
zwart- en rood gestreept 
(black- and red stripe + ed) 
b. 
peper- en zout kleur ig 
(pepper- and salt colour + ed) 
c. 
noord- en zuid korea aans 
(north- and south korea + an) 
d. 
natuur- en cultuur filosof isch 
(nature- and culture philosophy + ic) 
A sentence like ze houdt van zwart- en rood-gestreepte dassen ('she loves 
black- and red-striped ties') is ambiguous between a reading where the 
affix (meaning 'with') has scope over the conjunction ('she loves ties with 
black and red stripes') and a reading with wide scope conjunction and 
narrow scope affix ('she loves ties with black stripes and ties with red 
stripes'). (17) shows the minimal semantic machinery to derive this scope 
ambiguity. For the wide scope affix reading, we take the Boolean meet 
of the left compound members at their basic N/N lexical type. The 
incomplete right member striped is derived exactly as in the case of (15) 
above by functional composition of the affix with a lifted base stripe. 
That is, the right member is the functor which is applied to the meet 
of the N/N left members; the conjunction ends up within the scope of 
the affix. For the second reading, with the conjunction having scope over 
the affix, we lift the left compound members from their lexical N/N type 
to functors with expressions like striped as domain, and we take the Boolean 
meet of these higher order A/((N/N)\A) functors. In applying the higher 
order conjunction to its argument striped, the affix gets distributed over 
the conjuncts, and is interpreted within the scope of and. 

Lambek Categorial Grammar 
(17) 
Affix scope and Boolean conjunction 
247 
A,[A] 
N/N,[MEET] 
N/N 
black 
N/N 
and 
N/N 
red 
N/N 
(N/N)\A,[C] 
(N/N)\N,[L] 
N 
N\A 
stripe 
ed 
N 
N\A 
A/((N/N)\A),[L] 
A/((N/N)\A),[L] (N/N)\N,[L] 
(N/N)\A, [C] 
A/((N/N)\A), [MEET] 
i 
| 
A,[A] 
(Top derivation: N/N conjunction. Wide scope affix -ed ('with'), 
narrow scope and: 
ed[black(stripe)/\red(stripe)]. 
Bottom : A/((N/N)\A) conjunction, i.e. MEET(LIFT(WacA:), 
LIFT (red)). Wide scope and, narrow scope -ed: ed(black(stripe)) 
A ed(red(stripe)).) 
The derivations in (17) are simplified somewhat to illustrate the main point 
clearly. For example, the Boolean conjunction is introduced syncatego-
rematically, where we should give it the type (X\X)/X, for arbitrary X, 
Also, as indicated above, the derivations represent the minimal semantic 
structure for the observed scope ambiguity. This structure can be rebrac-
keted to model the prosodic phrasing ((black-)(and(red-striped))) by type 
shifting techniques which will be familiar by now. 

248 M. Moortgat 
Two conclusions can be drawn from the Boolean evidence. First, the 
semantically incomplete right member of the synthetic compound has to 
be represented as a semantic object ('constituent') in the interpretation, 
if it is to partake in the scope ambiguity in the way indicated. This is 
not the case in theories where the paradoxical affix is rebracketed in the 
semantics to become a sister of the combination left member + base. Second, 
the ambiguity depends on the complexity order of the types combined 
by the Boolean connective (lexical or raised type). The function of type-
raising here is radically different from Pesetsky-style affix-raising. The latter 
is a forced move to get one interpretation for an otherwise uninterpretable 
phonological structure; the former a free type transition which creates 
a scope ambiguity. 
4. CLITICIZATION: ENGLISH AUXILIARY AND GENITIVE 'S 
As a final example of the impact of structural completeness, we will consider 
the restructuring involved in English 3rd singular auxiliary and genitive 
's cliticization. These forms of cliticization have been presented as par-
ticularly dramatic cases of mismatch between the prosodic and the syntactic/ 
semantic organization of an expression. The clitic has phrasal scope but 
it attaches to the right-peripheral word of the phrase preceding it: 
(18) 
a. 
the queen of England's hat 
b. 
the queen of England's here 
Sadock (1985) claims in connection with such examples that it is unclear 
how the clitic-host combination could be assigned an independent meaning 
such that the clitic has the proper (phrasal) scope, unless one resorts to 
the postulation of otherwise unmotivated syntactic/semantic rules. 
We will focus the discussion on 's auxiliary cliticization, as it is the 
more dramatic of the two cases: auxiliary cliticization involves migration 
of the clitic from the VP to the subject NP domain, and cliticization to 
the right peripheral element of that NP. The general derivation strategy 
we will present carries over to genitive's cliticization, which exhibits only 
the latter phenomenon (on the assumption that genitive 's is of type 
NP\(NP/N), i.e. maps a noun phrase into an expression of determiner 
type). 
In Zwicky's 1977 terminology, auxiliary's is a simple clitic, not a special 
one with a distribution distinct from that of the corresponding full form. 
Since simple cliticization is a form of rebracketing, the structural com-
pleteness of the Lambek calculus guarantees that the clitic-host combination 
can be assigned the proper independent meaning, on the basis of the type-

Lambek Categorial Grammar 
249 
shifting rules already introduced. (Notice that special clitics would still 
require a lexically derived type which violates the order-preserving con-
straint on the system L, in line with the remarks made in Section 1 on 
the treatment of discontinuity.) The interesting property of the cliticization 
cases is that they appeal to the type-shifting calculus in its full generality, 
i.e. to the recursive generalizations of the reduction laws. 
Consider first the simple case, where the subject is a one-word phrase, 
as in (19) below. Assume that the full form is has the lexical type (NP\S)/XP, 
i.e. it maps XP into VP ( = NP\S) it 'belongs' to the VP semantically. 
Assume further that the lexical entry for the reduced form 's has the same 
initial type assignment (the full and reduced forms denote the same 
function), but that the entry includes the independent prosodic charac-
terization of's as an enclitic. Nothing more need be said in the associative 
calculus to account for the migration of the clitic from the VP to the 
NP domain. For example, by the valid commutative law (T3 in (4)) a 
right-oriented functor with left-oriented range can be shifted to a seman-
tically equivalent left-oriented functor with right-oriented range. The type 
shift is triggered by the fact that's, as an enclitic, must associate to the 
left prosodically. 
(19) 
S, [A] 
NP\S, [A] 
NP 
Mary 
Mary 
NP 
(NP\S)/PP 
is 
's 
(NP\S)/PP 
PP 
in town 
in town 
PP 
NP\(S/PP),[Comm] 
S/PP, [A] 
S,[A] 
{is/'s full form versus reduced form) 

250 
M. Moortgat 
The hard case arises when the subject is not a simple word, but a phrasal 
expression, in which case the clitic forms a prosodic word with the right-
peripheral element of that phrase, whatever the internal structure of this 
phrase may be. Conservative subsystems of L with a finite number of 
reduction rules (for example, application, composition and lifting) cannot 
guarantee that the clitic-host combination will be interpretable as a semantic 
unit; it is essential here to rely on the calculus design of L, i.e. on the 
fact that the system characterizes an infinite set of valid type transitions 
on the basis of the axioms and inference rules of (3): 
(20) 
(the 
queen) 
(of 
(England 
NP/N 
N/PP 
PP/NP 
NP 
NP/PP,[C] 
's)) 
(in town) 
(NP\S)/PP 
PP 
I 
NP\(S/PP),[Comm] 
(PP/NP)\((NP/PP)\NP), [RL] 
(PP/NP)\((NP/PP)\(S/PP)),[RC] 
(NP/PP)\(S/PP),[A] 
S/PP,[A] 
S,[A] 
An impressionistic description of the global interpretation strategy for these 
cases would be the following. We saw above that the commutative type 
shift can turn clitic 's into a functor with NP domain (i.e. its semantic 
scope is the subject NP). But now the clitic has to combine immediately 
with the rightmost word of that phrase. So we want to project the structure 
of the complete subject NP onto the element adjacent to the clitic; then 
form the combination of the clitic and its peripheral host. In order to 
give explicit content to this strategy we reintroduce the recursive gene-
ralizations of lifting and cancellation presented in (6): 

Lambek Categorial Grammar 
251 
(6) 
Recursive cancellation [RC]: 
a. 
X/Y,Y => X 
b. 
Z.X/Y => W/Y 
if Z,X =» W 
a'. 
Y,Y\X=>X 
b'. Y\X,Z => Y\W 
if X,Z => W 
Recursive lifting [RL]: 
c. 
X => Y/(X\Y) 
d. 
X => Z/(X\Y) 
c'. 
X => (Y/X)\Y 
d\ 
X => (Y/X)\Z 
if Y => Z 
if Y => Z 
Consider first the projection of the left context onto the right peripheral 
element of the subject phrase. Simple type lifting turns an argument (in 
our case the NP England) into a higher order type looking for the functor 
on which this argument is immediately dependent. In this sense, the effect 
of simple lifting is local. But in the case of cliticization, we want to project 
the structure of an arbitrarily complex phrase onto its peripheral element. 
The recursive generalization of lifting achieves this goal. Let us trace through 
the recursion to see how the [RL] type shift of (20) was obtained. 
(21) 
(1) NP => (PP/NP)\((NP/PP)\NP)? 
(2) 
PP => (NP/PP)\NP? 
(2) 
true 
(1) true 
The type shift at level (1) does not correspond to the non-recursive boudary 
clause of [RL]. The second level of recursion is entered, and we inspect 
the type shift for the subtypes PP => ((NP/PP)\NP). This is an instance 
of the boundary clause, so we can return from level (2) with a positive 
answer, which then makes the call at level (1) successful. 
The next problem is the combination of the lifted type for the right 
peripheral element with the clitic type NP\(S/PP). We want to cancel 
the domain NP of the clitic type against the most deeply embedded NP 
in the lifted type for England, i.e. against the NP which one gets after 
composing the complete subject phrase. The generalized cancellation rule 
[RC] achieves this by recursively descending into the lifted type until the 
subtype matching the NP argument of clitic's is found. Stepwise tracing 
through the calls to [RC] may again clarify this point. 

252 M. Moortgat 
(22) (1) (PP/NP)\((NP/PP)\NP),NP\(S/PP) => (PP/NP)\((NP/PP)\(S/PP))? 
(2) 
(NP/PP)\NP,NP\(S/PP) => (NP/PP)\(S/PP)? 
(3) 
NP,NP\(S/PP) => S/PP? 
(3) 
true 
(2) 
true 
(1) true 
The main functor in this cancellation is the clitic type, the secondary functor 
the lifted type for the peripheral NP. The boundary clause for [RC] is 
simple functional application. At the third level of recursion we find a 
subtype of the secondary functor which can be cancelled by simple 
application and we can recover from the recursion restoring the subtypes 
which were stripped off to reach the boundary case. 
It is important to notice that within L the derivation in (20) is just 
one possible way to obtain the desired direct interpretation of the prosodic 
structure. There are many semantically equivalent alternatives, some of 
them more straightforward. For example, the clitic type shift from 
(NP\S)/PP to NP\(S/PP) can be skipped, since the generalized cancellation 
law makes the combination of (lifted) England and 's also valid on the 
lexical type assignment to the clitic, as illustrated in (23): 
(23) (1) (PP/NP)\((NP/PP)\NP),(NP\S)/PP => (PP/NP)\((NP/PP)\(S/PP))? 
(2) 
(NP/PP)\NP,(NP\S)/PP => (NP/PP)\(S/PP)? 
(3) 
NP,(NP\S)/PP =» S/PP? 
(4) 
NP,NP\S => S? 
(4) 
true 
(3) 
true 
(2) 
true 
(1) true 
In fact, this simplification can be carried further if one relies on the sequent 
calculus for L. The Appendix gives a direct proof of the validity of 
(24) 
NP,(NP\S)/PP => (PP/NP)\((NP/PP)\(S/PP)) 
that is, also the recursive lifting can be eliminated and England + 's derive 
the desired type (PP/NP)\((NP/PP)\(S/PP)) on their basic lexical type 
assignments if one proves the specific theorem applicable to this case. 
In this light, one could view the derivations presented in the text as a 
kind of 'normal form reductions', based on a small set of standard reduce 
options (e.g. cancellation and lifting in their generalized form). I think 
it would be misguided to impute a special status (in terms of 'psychological 
reality') to these standard reduce options; the theory of the language faculty 
which the Lambek system embodies would rather be the general concept 

Lambek Categorial Grammar 
253 
of valid type transition as characterized by the calculus. But a discussion 
of these issues would go beyond the scope of this paper. 
5. CONCLUSION 
The Lambek system suggests a research program which would be doomed 
to fail in rigid constituent theories: instead of making the prosodic 
organization parasitic on syntax, one could independently characterize the 
grammar of prosody and provide a direct semantic interpretation for the 
structures it defines. The feasibility of such an approach derives from the 
structural completeness of the categorial calculus, and from the fact that 
the information standardly encoded in tree geometry is conferred to the 
internal structure of types. Against the background of this program, the 
aims of the paper have been modest: I hope to have indicated how the 
flexible constituent theory of Lambek's categorial calculus resolves some 
typical mismatches between levels of representation, and to have stimulated 
the imagination of the reader to further explore the possibilities of this 
approach. 
APPENDIX 
This appendix contains Gentzen proofs for a variety of examples discussed 
in the text. The proofs are automatically generated by a Lambek theorem 
prover which is fully discussed in Moortgat (1987). Proofs are displayed 
in indented list format, indentation corresponding to depth in the tree. 
Tree addresses are added to the first example to show the correspondence 
with the conventional tree format. Nodes in the tree are labelled with 
sequents and annotated with the inference rule of L used to expand them. 
The proof procedure proceeds bottom-up, with the theorem at the root 
of the tree. The theorem is valid if we can unfold the tree in such a way 
that all the leaves are labelled with axioms, i.e. sequents of the form A=> A. 
Example 1. Mary put the book on the table. 
Assume that put has the category ((NP\S)/PP)/NP, i.e. it looks to the 
right for an NP object and a PP complement and finally for a subject 
NP to the left. We show that the subject can directly combine with the 
verb through cancellation of the most deeply embedded NP in the verbal 
category. 
Theorem: 
[Mary, put] 
NP, (NP\S)/PP)/NP=>(S/PP)/NP 

254 M. Moortgat 
Proof: 
[e] NP,((NP\S)/PP)/NP => (S/PP)/NP 
[I] 
NP,((NP\S)/PP)/NP,NP => S/PP 
[II] 
NP,((NP\S)/PP)/NP,NP,PP =* 
[III] 
NP=>NP 
[112] 
NP,(NP\S)/PP,PP 
S 
[1121] 
PP=*PP 
[1122] 
NP,NP\S=>S 
[11221] 
NP => NP 
[11222] 
S=*S 
[/ :right] 
[/¡right] 
[/rieft] 
[axiom] 
[/rieft] 
[axiom] 
[Vleft] 
[axiom] 
[axiom] 
In tree format (with leaves growing upward) the proof would look like: 
11221 o 
o 
11222 
1121 o 
111 o 
1122 
o 
112 
11 
o 
e 
The interpretation which goes with this combination is given by a lambda 
term which can be read off straightforwardly from the proof, as dem-
onstrated by Van Benthem (1986). The (/, \)-left inference rules correspond 
to functional application, the (/, \)-right rules to lambda abstraction. The 
terms that interpret nodes of the proof tree of Example 1 are given below. 
The semantic value of a lexical item 'i' is indicated as i. 

Lambek CategoriaI Grammar 
255 
Interpretation: (X: type(NP), Y: type(PP)) 
[e] kXKY. 
put{X){Y)(Mary) 
[1] 
AY. put{X)(Y)(Mary) 
[II] 
put(X)(Y)(Mary) 
[III] 
X 
[112] 
put(X)(Y)(Mary) 
[1121] 
Y 
[1122] 
put(X)(Y)(Mary) 
[11221] 
Mary 
[11222] 
put{X){Y)(Mary) 
Example 2. The lettering on the cover of the book. 
We show that the and lettering can be combined into a functor which 
is still looking to the right for a missing modifier for lettering. 
Theorem: 
[the, lettering] 
(NP/N),N=*>NP/(N\N) 
Proof: 
(NP/N), N => NP/(N\N) 
(NP/N), N, (N\N)=*NP 
N, (N\N) => N 
N=s>N 
N=*N 
NP=*NP 
Interpretation: (X: type(N\N)) 
XX. the(X(lettering)) 
the(X(lettering)) 
X{lettering) 
lettering 
X{lettering) 
the(X(lettering)) 
Example 3. Noordkoreaans. 
A synthetic compound with left-branching semantic structure, but right-
branching prosodic organisation. Korea can directly be combined with 
the affix, as the prosodic organisation requires. But the combination is 
still expecting a modifier of Korea to the left. This is the mirror image 
of Example 2. The interpretation is truncated at the root. 
[/ rright] 
[/rieft] 
[\:left] 
[axiom] 
[axiom] 
[axiom] 

256 M. Moortgat 
Theorem: 
[Korea, aans] 
N, (N\AP)=>((N/N)\AP) 
Proof. 
N,(N\ AP) => ((N/N)\AP) 
(N/N), N, (N\AP) => AP 
N=>N 
N,(N\AP)=>AP 
N=>N 
AP=> AP 
Interpretation: XX. aans(X(Korea)) 
[\:right] 
[/rieft] 
[axiom] 
[\:left] 
[axiom] 
[axiom] 
Example 4. The queen of England's here. 
Right-peripheral cliticization. The theorem below focuses on the crucial 
step in the derivation: the clitic-host combination. The resulting functor 
is looking for what is left of the subject NP minus the right peripheral 
item, and for the PP complement of reduced is. 
Theorem: 
[England, 's] 
NP,(NP\S)/PP = (PP/NP)\((NP/PP)\(S/PP)) 
Proof 
NP,(NP\S)/PP => (PP/NP)\((NP/PP)\(S/PP)) 
PP/NP,NP,(NP\S)/PP => (NP/PP)\(S/PP) 
NP/PP,PP/NP,NP,(NP\S)/PP => S/PP 
NP/PP,PP/NP,NP,(NP\S)/PP,PP => S 
PP/NP,NP 
PP 
NP=>NP 
PP=>PP 
NP,(NP\S)/PP,PP 
S 
PP=>PP 
NP,NP\S 
S 
NP => NP 
S =i> S 
[\:right] 
[\:right] 
[/:right] 
[/•.left] 
[/:left] 
[axiom] 
[axiom] 
[/:left] 
[axiom] 
[\:left] 
[axiom] 
[axiom] 

Lambek Categorial Grammar 
257 
Interpretation: (X: type(PP/NP), Y: type(NP/PP), Z: type(PP)) 
A.XAYA.Z. is(Z)(Y(X(England))) 
KYkZ. 
is{Z)(Y{X(England))) 
kZ.is(Z)(Y(X(England))) 
is(Z)(Y(X(England))) 
X(England) 
England 
X(England) 
is(Z)(Y(X(England))) 
Z 
is(Z)(Y(X{England))) 
Y(X(England)) 
is(Z)(Y(X(England))) 


