ScienceDirect
Available online at www.sciencedirect.com
Procedia Computer Science 193 (2021) 402–406
1877-0509 © 2021 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (https://creativecommons.org/licenses/by-nc-nd/4.0)
Peer-review under responsibility of the scientific committee of the 10th International Young Scientists Conference on Computational 
Science
10.1016/j.procs.2021.10.041
© 2021 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (https://creativecommons.org/licenses/by-nc-nd/4.0)
Peer-review under responsibility of the scientific committee of the 10th International Young Scientists Conference on 
Computational Science 
Keywords: Visual programming language; data visualisation; visual grammar 
1. Introduction 
The amount of collected data is increasing over the years by a huge amount. Working with all that data is including 
collection, storage and analysis including visual analysis. Visual analysis plays a big role in data analysis since some 
of the information can be extruded from the data only by those methods. There are a number of tools for data 
visualization already developed [1] but in most cases it is a low level programming tools which is not accessible for 
users with no or a little programming skills or high level not flexible interfaces which allows limited functionality. 
Proposed visual programming language is a middle level solution which presents a compromise between the 
functionality and usability for end users including users with a little or no programming experience at all. In the 
previous paper [2] visual programing environment which can be built to solve such problem was described. In this 
paper we will describe the visual programming language that can be implemented in such environment. The proposed 
language follows the marks and channels approach used in the visual grammar. This approach allows creating 
 
 
* Corresponding author. Tel.: +0-000-000-0000 ; fax: +0-000-000-0000 . 
E-mail address: author@institute.xxx  
10th International Young Scientist Conference on Computational Science (YSC 2021) 
Visual programming language for data visualization based on visual 
grammar 
Egor Ivanova*, Andrey Karsakova 
aITMO University, 49, Kronverksky, 197101 Saint-Petersburg, Russia. 
Abstract 
This paper describes a visual programming language for data visualization. This language is designed for students and to 
prototyping different data visualizations. This language allows to create a graphs by connecting nodes with multiple typed inputs 
and outputs. Nowadays there are no tools for construction complex data visualizations with understandable user interface. The 
scope of this paper is to describe a visual programming language for complex data visualizations to address those goals.  

	
Egor Ivanov  et al. / Procedia Computer Science 193 (2021) 402–406
403
visualizations from the visual marks (geometric shapes) mapping the data properties to certain visual channels 
(properties of geometric shape).  
This paper has the following structure. First section describes the problem and a scope of proposed solution. The 
second section contains the overview of existing solution. The third section contains the overview of the visualization 
grammars on which the proposed solution relies on. The fourth section contains the overview of proposed solution 
with its advantages, disadvantages and limitations. And the last section contains the conclusions and the direction for 
future work.  
2. Related work 
With the growth of population of data analysis, the big number of data visualization tools were developed. There 
are three types of tools for data visualization: tools with programming interface, visual grammars and tools with visual 
interface.  
One of the first and the most popular tools with programming interface are D3.js [3] which is a JavaScript library 
for low level data manipulations and template-based visualization. D3.js approach in based on the concept of marks 
and channels as well as the visual grammars the one thing about D3.js is that it is a JavaScript library and requires a 
knowledge of JavaScript and web programming to use it. The other popular visualization tool with programming 
interface is Ploty.js [4] which is also a template-based JavaScript library but it is more high level but also requires the 
high web-programming skills in order to use it. There are also a tools like Chart.js [5] and Chartist.js [1] which are of 
the same category as Ploty.js. 
The visualization grammars like Vega [8] are based on marks and channels approach and allows to create a complex 
data visualization. The grammar itself presented as native specification but it still requires some programming skills 
to process those specifications. However, there are a number of environments for visual grammar processing which 
allows to export resulting visualization but not allows import data as files. 
The other type of data visualization tools is the tools with user interface. The tools like Infogram [6], ChartBlocks 
[1] and ECharts [7] are in that category. The one thing about those tools is that they are using the template-based 
approach and not flexible in terms of charts diversity since they are not follow the marks and channels approach. 
3. Visual grammars 
Visualization grammar can be defined as a declarative specification mostly in JSON format which describes the 
order of data processing, scaling, marking and encoding in order to construct final visual representation. Since 
visualization grammars are following a marks and channels approach each data item in a final dataset represented by 
a unique visual mark which can contain multiple visual channels like color, form or any measurements of selected 
shape. This approach matches better with mental model of human brain and can extract more information out of the 
data. 
Typically, visualization grammars like Vega [8] which is used in the implementation of the proposed language 
also contain some additional parts of visualization like axes and legends. 
The research in the field of visualization grammars was started in 1999 by Wilkinson's The Grammar of Graphics 
[9] and was quickly followed by Stanford Polaris system [10], which was later used in Tableau [3]. Wilkinson's model 
was then implemented in packages ggplot2 [11] and ggvis. 
In the Vega visual grammar, a unit specification describes a single plot which is based on data set with given mark-
types and a set of one or more encodings for a visual channel. 
The data definition identifies a relational table consisting of records with named attributes. The data can be subject 
to a set of transforms such as filtering and adding derived fields. The mark type defines the geometric object used for 
data record visual encoding. The encoding defines how data attributes map to the properties of the visual marks. 
Visual encoding channels can be a position, color, shape, size or text. The field string defines data attribute to 
visualize. Data-type can be one of the following: 
• Nominal 
• Ordinal 

404	
Egor Ivanov  et al. / Procedia Computer Science 193 (2021) 402–406
• Temporal 
• Quantitative 
The value is an alternative to data field that can serve as a constant for that encoding. The function can define 
additional transformation applied for the field. The values can also be transformed by the scale that maps values from 
data domain to visual range. Guide defines the additional elements used to visualize the scale like axis or legend. 
4. Visual programming language 
Since Vega grammar is a JSON specification which is represented as a tree hierarchy where object can be 
referenced using name links this schema can be transformed to a graph representation. Each node in graph represented 
as interactive block with inputs and outputs as circles and different types of inputs for different properties. Each node 
in the graph except the final marks node will output the objects defined in it as a sockets of a certain type. Socket input 
and output can only connect if they are of the same type. The type of each socket represented with unique color.  Each 
property of node element can be a controller like checkbox, text input, file input, color input or a socket input which 
connects this node with the other node outputting a name of the required object. For example, a single node 
representing a scale object can be transformed to visual representation as shown in Fig. 1. 
Fig. 1. Transformation of scale to node. 
The data types in Vege specification include Parameter types such as Number, String, Object, Date, Color and etc., 
Data and Signal types such as Data, Field, Signal, Expression and etc., Main object types such as Specification, 
Configuration, Title, Locale, Mark, Legend, Transform and etc., and a set of Transformation and Mark types. For each 
of those types there should be a node in visual programming language. The modes can be grouped in that categories 
in interface node selection menu in order to allow easier navigation. Each node should also include a description about 
what this node does and in which context it can be used. 
After processing of the schema engine produces a native specification in JSON format. Specification includes an 
array of marcs presented in schema and also additional elements like axis and legends. Each node connected to other 
nodes transforms into an object which serves as a value of corresponding property.  

	
Egor Ivanov  et al. / Procedia Computer Science 193 (2021) 402–406
405
The schema processing by the Vega engine outputs only visual representation so we cannot access the results of 
data import or transformation. When composing the Vega specification, we must know which fields are presented in 
the data in order to reference it. In that case node processing includes input data parsing which allows as to read the 
names of the data properties to output it for further references. Other case is when new fields in the dataset were 
created during transformation. Any transformation includes a default output property name witch can be overwritten 
by user. Since we have a unique node for each transformation type that name can be outputted out of each node as a 
data field reference. 
Values of some properties represented by a string can take one of the number of possible values. This values can 
be represented as enumerate values and can be chosen with a dropdown selector. 
The field that contains a numeric values witch can be defined in some range can be limited to that range with a 
range input. 
There is also an Object type of value in Vega. Objects are used in multiple cases for example when paddings of the 
chart container need to be defined. In order to represent objects in visual programming language we need to define 
each possible type of objects and create a node for each type. Since Vega engine expects an object with some specific 
fields to be a value of some property we can easily connect the property fields and object nodes with a socket of 
specific type. 
In cases where property can be defined by one of two data types the node should two input socket with same name 
one for each type of value. When socket is connected to one of those inputs the other became disabled. 
There is also an Any type in Vega specification. For example, the value of the signal is an Any type value. Since 
we cannot connect sockets of different types in visual programming interface possible types of that value can be 
limited to some number of types. The node should include an input socket for each of those types and when one of 
them is connected with the other node other should be disabled. 
Input can also except an array of values. In that case it is mentioned in the name of the input. Other inputs witch 
accepts only one input socket will disconnect with connected socket when other connection in created. 
The nodes can have no input sockets. For example, data node will input the file as row data using file input and 
output the name of the file and the names of the properties. 
4. Conclusions 
At this paper we proposed a visual programming language for data visualization which is based on visualization 
grammar and implements the concept of marks and channels in for of user-generated graph where each node represents 
an object of some type and each socket represents a link to that object. 
The main advantages implementation of marks and channels approach in form of visual programming language 
cones from the advantages of the visual programming language such as it allows users to work with a visual 
representation of the logic they are trying to apply. The color mapping of the socket types in that case creates a 
connection between the nodes in user’s mind and allows to work with the interface on an intuitive level without 
exploring the documentation. The one disadvantage of proposed approach is that it needs to be further developed in 
order to handle such part of Vega specification as expression language. Vega’s expression language includes a set of 
constants, functions, math, logical and condition operators. That language can also be further represented as visual 
programming language and included as part of proposed language. 
The further research can be made in the field of integration expression language included in Vega as part of 
proposed visual programming language and also implementation proposed visual programming language in form of 
visual programming environment and perform a usability tests. 
 
 

406	
Egor Ivanov  et al. / Procedia Computer Science 193 (2021) 402–406
References 
[1] Caldarola E. G., Rinaldi A. M. Big data visualization tools: a survey //Research Gate. – 2017.  
[2] Ivanov E., Khoroshavin A., Karsakov A. Visual programming environment based on data visualization grammar specification //Procedia 
Computer Science. – 2020. – Т. 178. – С. 434-439. 
[3] Nair L., Shetty S., Shetty S. Interactive visual analytics on Big Data: Tableau vs D3. js //Journal of e-Learning and Knowledge Society. – 2016. 
– Т. 12. – №. 4. 
[4] Beata G., Perego G., Civalleri B. CRYSPLOT: A new tool to visualize physical and chemical properties of molecules, polymers, surfaces, and 
crystalline solids //Journal of computational chemistry. – 2019. – Т. 40. – №. 26. – С. 2329-2338. 
[5] Pokorný P., Stokláska K. Chart visualization of large data amount //Computer Science On-line Conference. – Springer, Cham, 2017. – С. 460-
468. 
[6] Peddoju S. K., Upadhyay H. Evaluation of IoT data visualization tools and techniques //Data Visualization. – Springer, Singapore, 2020. – С. 
115-139. 
[7] Li D. et al. ECharts: a declarative framework for rapid construction of web-based visualization //Visual Informatics. – 2018. – Т. 2. – №. 2. – 
С. 136-146. 
[8] Satyanarayan A. et al. Vega-lite: A grammar of interactive graphics //IEEE transactions on visualization and computer graphics. – 2016. – Т. 
23. – №. 1. – С. 341-350. 
[9] L. Wilkinson L. The grammar of graphics //Handbook of computational statistics. – Springer, Berlin, Heidelberg, 2012. – С. 375-414. 
[10] Stolte C., Tang D., Hanrahan P. Polaris: A system for query, analysis, and visualization of multidimensional relational databases //IEEE 
Transactions on Visualization and Computer Graphics. – 2002. – Т. 8. – №. 1. – С. 52-65. 
[11] Wickham H. A layered grammar of graphics //Journal of Computational and Graphical Statistics. – 2010. – Т. 19. – №. 1. – С. 3-28. 

