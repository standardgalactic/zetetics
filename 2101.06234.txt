Nets with Mana: A Framework for Chemical
Reaction Modelling
Fabrizio Genovese1 Q[0000−0001−7792−1375]
Fosco Loregian2 Q[0000−0003−3052−465X]
Daniele Palombi3 Q[0000−0002−8107−5439]
1 University of Pisa
fabrizio.romano.genovese@gmail.com
2 Tallinn University of Technology
fosco.loregian@gmail.com
3 Sapienza University of Rome
danielepalombi@protonmail.com
Abstract. We use categorical methods to deﬁne a new ﬂavor of Petri
nets where transitions can only ﬁre a limited number of times, speciﬁed by
a quantity that we call mana. We do so with chemistry in mind, looking
at ways of modelling the behavior of chemical reactions that depend
on enzymes to work. We prove that such nets can be either obtained
as a result of a comonadic construction, or by enriching them with
extra information encoded into a functor. We then use a well-established
categorical result to prove that the two constructions are equivalent,
and generalize them to the case where the ﬁring of some transitions can
”regenerate” the mana of others. This allows us to represent the action
of catalysts and also of biochemical processes where the byproducts of
some chemical reaction are exactly the enzymes that another reaction
needs to work.
Acknowledgements The ﬁrst author was supported by the project MIUR PRIN
2017FTXR7S “IT-MaTTerS” and by the Independent Ethvestigator Program.
The second author was supported by the ESF funded Estonian IT Academy
research measure (project 2014-2020.4.05.19-0001).
A video presentation of this paper can be found on Youtube at 9sxVBJs1okE.
1
Introduction
Albeit they have found great use outside their original domain, Petri nets were
invented to describe chemical reactions [21]. The interpretation is as simple as it
can get: places of the net represent types of compounds (be it atoms or molecules);
tokens represent the amount of each combination we have available; transitions
arXiv:2101.06234v2  [math.CT]  22 Apr 2021

2
F. Genovese, F. Loregian, and D. Palombi
represent reactions transforming compounds.
ATP
H2O
ADP
Pi
ATP
H2O
ADP
Pi
(1)
Still, things are not so easy in real-world chemistry: reactions often need “context”
to happen, be it a given temperature, energy, presence of enzymes and catalysts.
This is particularly true in biochemical processes, where enzymes of all sorts
mediate rather complicated reactions. Importantly, these enzymes tend to degrade
over time, resulting in reactions that do not keep happening forever [14]. This is
one of the (many) reasons why organisms wither and die, but it is not captured
by the picture above, where the transition can ﬁre every time it is enabled.
Borrowing the terminology from the popular Turing machine Magic: The
gathering [24, 7] we propose a possible solution to this problem by endowing
transitions in a net with mana [23], representing the “viability” of reactions: once
a reaction is out of mana, it cannot ﬁre anymore.
compound A
compound B
compound C
mana
Now, we could just represent mana by adding another place for each transition
in a net. Indeed, this is the idea we will start with. Still, being accustomed to the
yoga of type-theoretic reasoning, we are also aware that throwing everything in
the same bucket is rarely a good idea: albeit mana can be a chemical compound,
it is more realistic to consider it as conceptually separated from the reactions it
catalyzes.
Resorting to categorical methods, we show how we can axiomatize the idea
of mana in a better way. We do so by relaxing the deﬁnitions in the categorical
approach to coloured nets already developed in [13], deﬁning a functorial seman-
tics representing the equipment of a net with mana. Then, we will prove how
categorical techniques allow us to internalize such a semantics, exactly obtaining
what we represented in the picture above.
Finally, we will show how the categorical semantics naturally leads to a further
generalization, where transitions not only need mana to function but also provide
byproducts that can be used as mana for other transitions. This allows us to
represent catalysts4 (i.e. cards ‘adding ∞to the mana pool’, or more precisely
mana that does not deteriorate over time) and in general nets apt to describe
two-layered chemical processes, the ﬁrst layer being the usual one represented
by Petri nets and the second layer being the one of enzymes and catalysts being
consumed and exchanged by diﬀerent reactions.
4 An unrelated categorical approach to nets with catalysts can be found in [2].

Nets with Mana: A Framework for Chemical Reaction Modelling
3
2
Nets and their executions
Before presenting the construction itself, it is worth recapping the main points
about categorical semantics for Petri nets. The deﬁnition of net commonly used
in the categorical line of work is the following:
Notation 1. Let S be a set; denote with S⊕the set of ﬁnite multisets over S.
Multiset sum will be denoted with ⊕, multiplication with ⊙and diﬀerence (only
partially deﬁned) with ⊖. S⊕with ⊕and the empty multiset is isomorphic to the
free commutative monoid on S.
Deﬁnition 1 (Petri net). We deﬁne a Petri net as a couple functions T
s,t
−→S⊕
for some sets T and S, called the set of places and transitions of the net,
respectively.
A morphism of nets is a couple of functions f : T →T ′ and g : S →S′ such
that the following square commutes, with g⊕: S⊕→S′⊕the obvious lifting of g
to multisets:
S⊕
T
S⊕
S′⊕
T ′
S′⊕
s
s′
t′
t
g⊕
g⊕
f
Petri nets and their morphisms form a category, denoted Petri. The reader can
ﬁnd additional details in [18].
Deﬁnition 2 (Markings and ﬁrings). A marking for a net T
s,t
−→S⊕is an
element of S⊕, representing a distribution of tokens in the net places. A transition
u is enabled in a marking M if M ⊖s(u) is deﬁned. An enabled transition can
ﬁre, moving tokens in the net. Firing is considered an atomic event, and the
marking resulting from ﬁring u in M is M ⊖s(u) ⊕t(u).
Category theory provides a slick deﬁnition to represent all the possible ex-
ecutions of a net – all the ways one can ﬁre transitions starting from a given
marking – as morphisms in a category. There are various ways to do this [18,
17, 22, 11, 12, 3], depending if we want to consider tokens as indistinguishable
(common-token philosophy) or not (individual-token philosophy). In this work,
we focus on chemical reactions. Since we consider atoms and molecules of the
same kind to be physically indistinguishable, we will adopt the common-token
perspective. In this case, the category of executions of a net is a commutative
monoidal category – a monoidal category whose monoid of objects is commutative.

4
F. Genovese, F. Loregian, and D. Palombi
p1
t
p2
v
u
p3
p4
p1
t
p2
v
u
p3
p4
p1
t
p2
v
u
p3
p4
p1
t
p2
v
u
p3
p4
t
v
u
p1
p2
p3
p3
p2
p3
p4
p2
p4
p3
Deﬁnition 3 (Category of executions – common-token philosophy).
Let N : T
s,t
−→S⊕be a Petri net. We can generate a free commutative strict
monoidal category (FCSMC), C(N), as follows:
– The monoid of objects is S⊕. Monoidal product of objects A, B, denoted
with A ⊕B, is given by the multiset sum;
– Morphisms are generated by T: each u ∈T corresponds to a morphism gener-
ator (u, su, tu), pictorially represented as an arrow su
u−→tu; morphisms are
obtained by considering all the formal (monoidal) compositions of generators
and identities.
The readers can ﬁnd a detailed description of this construction in [17].
As shown in the picture above, objects in C(N) represent markings of a net:
A ⊕A ⊕B means “two tokens in A and one token in B”. Morphisms represent
executions of a net, mapping markings to markings. A marking is reachable from
another one if and only if there is a morphism between them.
The correspondence between Petri nets and their executions is categorically
well-behaved, deﬁning an adjunction between the category Petri and the category
CSMC of commutative strict monoidal categories, with Deﬁnition 3 building
the left-adjoint Petri →CSMC. The readers can ﬁnd additional details in [17].
3
The internal mana construction
The idea presented in the introduction can na¨ıvely be formalised by just attaching
an extra input place to any transition in a net, representing the mana a given
transition can consume. We call the following construction internal because it
builds a category directly, in contrast with an external equivalent construction
given in Deﬁnition 7.

Nets with Mana: A Framework for Chemical Reaction Modelling
5
Deﬁnition 4 (Internal mana construction). Let N : T
s,t
−→S⊕be a Petri
net, and consider C(N), its corresponding FCSMC. The internal mana construc-
tion of N is given by the FCSMC CM(N) generated as follows:
– The generating objects of CM(N) are the coproduct of the generating objects
of C(N) and T;
– For each generating morphism
A1 ⊕· · · ⊕An
u−→B1 ⊕· · · ⊕Bm
in C(N), we introduce a morphism generator in CM(N):
A1 ⊕· · · ⊕An ⊕u
u−→B1 ⊕· · · ⊕Bm
Notice that the writing above makes sense because u is an element of T.
Because of the adjunction between Petri and CSMC, we can think every
FCSMC as being presented by a Petri net. The category of Deﬁnition 4 is
presented precisely by the net obtained from N as we did in Section 1: the
additional generating objects of CM(N) represent the places containing the mana
associated with each transition.
Example 1. Performing the construction in Deﬁnition 4 on the category of exe-
cutions of the net on the left gives the category of executions of the net on the
right, as we expect:
compound A
compound B
compound C
compound A
compound B
compound C
mana
Proposition 1. The assignment C(N) 7→CM(N) deﬁnes a comonad5 in the
category of FCMSCs and strict monoidal functors between them, FCSMC.
Proof. First of all, we have to prove that the procedure is functorial. For any
strict monoidal functor F : C(N) →C(M) we deﬁne the action on morphisms
CM(F) : CM(N) →CM(M) as the following monoidal functor:
– CM(F) agrees with F on generating objects coming from C(N). If u is a
generating morphism of C(N) and it is Fu = f, then CM(F) u = f N, with
f N being the multiset6 counting how many times each generating morphism
of C(M) is used in f.
5 Given a category C, a comonad on C is an endofunctor S endowed with two natural
transformations δ : S ⇒S ◦S and ϵ : S ⇒1C such that δ is coassociative and has
ϵ as a counit. More succinctly, a comonad is a comonoid in the monoidal category
[C, C] of endofunctors of C. See [20, §5.3] for the deﬁnition and a variety of examples.
6 This makes sense since C(M) is free, hence decomposition of morphisms in terms of
(monoidal) compositions of generators and identities is unique modulo the axioms of
monoidal categories, which do not introduce nor remove generating objects.

6
F. Genovese, F. Loregian, and D. Palombi
– CM(F) agrees with F on generating morphisms.
Identities and compositions are clearly respected, making CM( ) an endofunctor
in FCSMC. As a counit, on each component N we deﬁne the strict monoidal
functor ϵN : CM(N) →C(N) sending:
– Generating objects coming from C(N) to themselves, and every other gener-
ating object to the monoidal unit.
– Generating morphisms to themselves.
The procedure is natural in the choice of N, making ϵ into a natural transformation
CM( ) →idFCSMC.
As for the comultiplication, on each component N we deﬁne the strict monoidal
functor δN : CM(N) →CM(CM(N)) sending:
– Generating objects coming from C(N) to themselves, every other generating
object u is sent to u ⊕u.
– Generating morphisms are again sent to themselves.
The naturality of δ and the comonadicity conditions are a straightforward check.
4
The external mana construction
As we stressed in Section 1, the construction as in Deﬁnition 4 has the disadvantage
of throwing everything in the same bucket: in performing it, we do not keep any
more a clear distinction between the diﬀerent layers of our chemical reaction
networks, given by mana and compounds.
In the spirit of [13], we now recast the mana construction externally, as Petri
nets with a semantics attached to them. A semantics for a Petri net is a functor
from its category of executions to some other monoidal category S.
A huge conceptual diﬀerence is that in [13] this functor was required to be
strict monoidal. This point of view backed up the interpretation that a semantics
“attaches extra information to tokens”, to be used by the transitions somehow. In
here, we require this functor to be lax-monoidal:7 lax-monoidality amounts to
saying that we can attach non-local information to tokens: tokens may “know”
something about the overall state of the net and the laxator represents the process
of “tokens joining knowledge”.
In terms of mana construction, we want to endow each token with a local
“knowledge” of how much mana each transition has available. Laxating amounts
to consider ensembles of tokens together – as entangled, if you wish – where their
knowledge is merged.
7 A lax monoidal functor between two monoidal categories (C, ⊠J), (D, ⊗, I) is a functor
F : C →D endowed with maps m : FA⊗FB →F(A⊠B) and u : I →FJ satisfying
suitable coherence conditions; see [16, Def. 3.1]. If m, u are isomorphisms in D, F is
called strong monoidal. If just u is an isomorphism, F is called normal monoidal.

Nets with Mana: A Framework for Chemical Reaction Modelling
7
Example 2.
u
v
mana u: 3
mana v: 0
mana u: 1
mana v: 8
u
v
mana u: 4
mana v: 8
Laxator
If token a knows that transition u has 3 mana left, and token b knows that
transitions u and v have 1 and 8 mana left, respectively, then tokens a and b,
considered together, know that transitions u and v have 3 + 1 = 4 and 0 + 8 = 8
mana left, respectively.
Deﬁnition 5 (Non-local semantics – common-token philosophy).
Let
N be a Petri net and let S be a monoidal category. A Petri net with a non-local
commutative semantics is a couple
 N, N ♯
, with N ♯a lax-monoidal functor
C(N) →S. A morphism
 N, N ♯
→
 M, M ♯
of Petri nets with commutative
semantics is a strict monoidal functor C(N)
F−→C(M).
We denote the category of Petri nets with non-local commutative semantics
with PetriS.
We now provide an external version of the mana construction.
Notation 2. We denote with Span the bicategory of sets, spans and span
morphisms between them.8 Recall that a morphism A →B in Span consists of a
set S and a pair of functions A ←S →B. When we need to notationally extract
this information from f, we write A
f1
←−Sf
f2
−→B. We sometimes consider a
span as a morphism f : Sf →A × B, thus we may write f(s) = (a, b) for s ∈Sf
with f1(s) = a and f2(s) = b. Recall moreover that a 2-cell in Span f ⇒g is a
function θ : Sf →Sg such that f = g ◦θ.
Observe that there is nothing in the previous deﬁnition of Span that requires
the objects to be mere sets; in particular, we will later employ the following
variation on Notation 2:
Deﬁnition 6 (Spans of pointed sets). Deﬁne a bicategory Span• of spans
of pointed sets objects the pointed sets, (A, a) where a ∈A is a distinguished
element; composition of spans is as expected
Remark 1. This is in turn just a particular case of a more general construction:
let C be a category with pullbacks; then, there is a bicategory Span C having
1-cells the spans A ←X →B of morphisms of C, and where a pullback of their
adjacent legs deﬁnes the composition of 1-cells. Evidently, Span = Span(Set)
and Span• = Span(Set•), where Set• is the category of pointed sets (A, a) and
maps that preserve the distinguished elements of the domain and codomain. See
[9, §2] and [8] for a way more general perspective on bicategories of the form
Span C and the universal property of the Span construction.
8 See [6, Def. 1.1] for the deﬁnition of bicategory; intuitively, in a bicategory, one has
objects (0-cells), 1-cells and 2-cells, and composition of 1-cells is associative and
unital up to some speciﬁed invertible 2-cells F(GH) ∼= (FG)H and F1 ∼= F ∼= 1F.

8
F. Genovese, F. Loregian, and D. Palombi
Deﬁnition 7 (External mana construction). Given a Petri net N : T
s,t
−→
S⊕, deﬁne the following functor N ♯: C(N) →Span:
– Each object A of C(N) is mapped to the set T ⊕, the set of multisets over
the transitions of N;
– Each morphism A
f−→B is sent to the span N ♯f deﬁned as:
T ⊕
−⊕f N
←−−−−T ⊕= T ⊕
With f N being the multiset counting how many times each generating mor-
phism of C(M) is used in f.
Proposition 2. The functor of Deﬁnition 7 is lax monoidal. Functors as in Def-
inition 7 form a subcategory of PetriSpan, which we call PetriM.
Proof. Functor laws are obvious: idN
A is the empty multiset for each object A,
hence N ♯idA = idT ⊕. This correspondence preserves composition since
T ⊕
T ⊕
T ⊕
T ⊕
T ⊕
T ⊕
−⊕gN
−⊕gN
−⊕f N
=
T ⊕
T ⊕
T ⊕
−⊕f N⊕gN
The laxator is the morphism S⊕× S⊕
⊕
−→S⊕that evaluates two multisets to
their sum, embedded in a span. The naturality condition for the laxator reads:
T ⊕× T ⊕
T ⊕× T ⊕
T ⊕
T ⊕
N ♯f×N♯g
N♯(f⊕g)
⊕
⊕
And the two morphisms from T ⊕× T ⊕→T ⊕are:
T ⊕× T ⊕
T ⊕× T ⊕
T ⊕
T ⊕× T ⊕
T ⊕× T ⊕
T ⊕× T ⊕
⊕
(−⊕f N)×(−⊕gN)
=
T ⊕× T ⊕
T ⊕
T ⊕
T ⊕× T ⊕
T ⊕
T ⊕× T ⊕
⊕
(−⊕f N)×(−⊕gN)
−⊕f N⊕gN
⊕
which evidently coincide. Interaction with the associators, unitors and symmetries
of the monoidal structure is guaranteed by the fact that they are all identities in
C(N).

Nets with Mana: A Framework for Chemical Reaction Modelling
9
The external mana construction has the advantage of keeping the reaction
layer and the mana layer separated completely. In this setting, we say that a
marking of the net is a couple (X, u), with X an object of C(N) and u ∈T ⊕
representing the initial distribution of mana for our transitions. A transition
X
f−→Y is again a generating morphism of C(N), and we say that it is enabled if
N ♯f1 hits u, or, more explicitly, if u ⊖f N is deﬁned. Since f N for f a morphism
generator is deﬁned to be 0 everywhere and 1 on f, this amounts to say that f is
enabled when u(f) −1 ≥0. In that case, the resulting marking after the ﬁring is
(Y, u(f) −1): Each ﬁring just decreases the mana of the ﬁring transition by 1.
Example 3. Consider the net
compound A
compound B
compound C
In the marking (A ⊕B, 2), the transition is enabled. The resulting marking will
be (C, 1). The transition is not enabled in the marking (A ⊕B, 0) or (A, 4).
4.1
Internalization
Having given two diﬀerent deﬁnitions of endowing a net with mana, it seems
ﬁtting to say how the two are connected. As we already stressed, we abide by
the praxis already established in [13] and prove that the external and internal
mana constructions describe the same thing from diﬀerent points of view :
Theorem 1. Let
 N, N ♯
be an object of PetriM. The category CM(N) of Def-
inition 4 is isomorphic to the category of elements
R
N ♯.9 Explicitly:
– Objects of
R
N ♯are couples (X, x) where X is a object of CM(N) and x ∈
N ♯X.
– Morphisms (X, x) →(Y, y) of
R
N ♯are morphisms (f, s) with f : X →Y of
CM(N) and s such that N ♯fs = (x, y).
Proof. First of all, we need to deﬁne a commutative strict monoidal structure on
R
N ♯. Given the particular shape of N ♯, the objects of its category of elements
are pairs where the ﬁrst component is a multiset on the places of N and the
second one is a multiset on its transition. Hence we can deﬁne:
(C, x) ⊠(D, y) := (C ⊕D, x ⊕y)
9 The category of elements of a functor F : C →Set is deﬁned having objects the pairs
(C, x), where x ∈FC, and morphisms (C, x) →(C′, x′) the morphisms u : C →C′
such that Fu sends x into x′. See [4, p. 12.2], where this is called the Grothendieck
construction performed on F. Here we need to tweak this construction in order for it
to make sense for lax functors valued in Span, using essentially the same technique
in [19].

10
F. Genovese, F. Loregian, and D. Palombi
(Note that in order to obtain an element in N ♯(C ⊕D), we have implicitly
applied the laxator ⊕: N ♯C × N ♯D →N ♯(C ⊕D) to the elements in the
second coordinate.) Commutativity of ⊠follows from the commutativity of ⊕.
On morphisms, if we have (A1, x1)
(f1,s1)
−−−−→(B1, y1) and (A2, x2)
(f2,s2)
−−−−→(B2, y2)
then it is N ♯f1s1 = (x1, y1) and N ♯f2s2 = (x2, y2), and hence by naturality
of the laxator N ♯(f1 ⊕f2)(s1, s2) = ((x1 ⊕x2), (y1 ⊕y2)), allowing us to set
f1 ⊠f2 = f1 ⊕f2. Associators and unitors are deﬁned as in C(N).
Now we prove freeness: by deﬁnition, objects are a free monoid generated by
couples (p, I) and (I, u) with p a generating object of C(N) (a place of N), u a
generating morphism of CM(N) (a transition of N), and I the tensor unit. These
generators are in bijection with the coproduct of places and transitions of N. As
such, the monoid of objects of
R
N ♯is isomorphic to the one of CB (N).
On morphisms, notice that every morphism in
R
N ♯can be written univocally
– modulo the axioms of a commutative strict monoidal category – as a composition
of monoidal products of identities and morphisms of the form (A, u)
(f,u)
−−−→(B, u′),
with f a morphism generator in C(N) and u = u′ ⊕f N.
The isomorphism between
R
N ♯and CB (N) follows by observing that the
following mappings between objects and morphism generators are bijections:
(A, u) 7→A ⊕u
(A, u)
(f,u)
−−−→(B, u′) 7→A ⊕u
f−→B ⊕u′
Example 4. The internalization of the net in Example 3 gives exactly the net
of Example 1.
5
Extending the mana construction
Focusing more on the external mana construction of Deﬁnition 7, we realize
that it is somehow restrictive: it makes sense to map each generating object
of an FCSMC CM(N) to the set of multisets over the transitions of N. This
construction captures the idea of endowing each transition with an extra place
representing its mana. On the other hand, the only requirement we would expect
on morphisms is that, to ﬁre, a transition must consume mana only from its
mana pool. In Deﬁnition 7 we do much more than this, hardcoding that “one
ﬁring = one mana” in the structure of the functor.
The act of replacing the mapping on morphisms in Deﬁnition 7 with the
following span provides a reasonable generalization of the previous perspective:
T ⊕
−⊕(α⊙f N)
←−−−−−−−T ⊕
−⊕(βf )
−−−−−→T ⊕
with α and βf arbitrary multisets. In doing so, the only thing we are disallowing
in our new deﬁnition is for transitions to consume mana of other transitions:
each transition may use only the mana in its pool. Still, it is now possible for
transitions to:

Nets with Mana: A Framework for Chemical Reaction Modelling
11
– Fire without consuming mana;
– Consume more than 1 unit of mana to ﬁre;
– Produce mana – also for other transitions – upon ﬁring.
These are all good conditions in practical applications. The ﬁrst models chemical
reactions that do not need any additional compound to work; the second aims
to model reactions that need more than one molecule of a given compound to
work; the third models both catalysts – which completely regenerate their mana
at the end of the reactions they aid – and reactions that produce, as byproducts,
enzymes needed by other reactions.
Example 5. It is worth giving an explicit description of how the internalized
version of a net, as in our attempted generalized deﬁnition, looks like. In the
picture below, each transition has its mana, but now this mana does not have to
be necessarily used, as for transition u1, or can be used more than once, as for
transition u2. Furthermore, transitions such as u3 regenerate their mana after
ﬁring (catalysts), while transitions such as u2 and u4 produce mana for each other
in a closed loop. u4 also produces more than one kind of mana as a byproduct
of its ﬁring. It is worth noticing that this formalism allows to model nets that
never run out of mana, and that we think of as “self-sustaining” [14].
u1
u2
u3
u4
When looking at technicalities, unfortunately, things are not so easy. Deﬁning
α and the family βf so that functorial laws are respected is tricky. Luckily
enough, we do not need to do so explicitly. Indeed, we can generalize the internal
mana-net construction of Deﬁnition 4 to the following one, that subsumes nets
as in Example 5:
Deﬁnition 8 (Generalized internal mana construction). Let N : T
s,t
−→
S⊕be a Petri net, and consider C(N), its corresponding FCSMC. A generalized
internal mana construction for N is any FCSMC CM(N) such that:
– The generating objects of CM(N) are the coproduct of the generating objects
of C(N) and T;
– Generating morphisms
A1 ⊕· · · ⊕An
u−→B1 ⊕· · · ⊕Bm
in C(N) are in bijection with generating morphisms in CM(N):
A1 ⊕· · · ⊕An ⊕U1
u−→U2 ⊕B1 ⊕· · · ⊕Bm

12
F. Genovese, F. Loregian, and D. Palombi
With U1 a multiset over T being 0 on any u′ ̸= u, and U2 being an arbitrary
multiset over T.
Notice moreover that, for each generalized mana-net CM(N), we obtain a strict
monoidal functor F : CM(N) →C(N) as in Proposition 1: we send generating
objects of C(N) to themselves, all the other generating objects to the monoidal
unit and generating morphisms to themselves. We keep calling F the counit of
CM(N), even if it won’t be in general true that we still get a comonad.
Counits can be turned into functors C(N) →Span using a piece of categori-
cal artillery called the Grothendieck construction (or the category of elements
construction).
Theorem 2 (Grothendieck construction, [19]). Let C be a category. Then,
there is an equivalence Cat/C ≃Catl[C, Span], with Catl[C, Span] being the
category of lax functors C →Span. A functor F : D →C deﬁnes a functor
ΓF : C →Span as follows:
– On objects, C is mapped to the set {D ∈D | FD = C};
– On morphisms, C
f−→C′ is mapped to the span
{D ∈C | FD = C}
s←−{g ∈D | Ff = g}
t−→{D ∈C | FD = C′}
The other way around, regarding C as a locally discrete bicategory and letting
F : C →Span be a lax functor, F maps to the functor ΣF , from the pullback
(in Cat) below:
R
F
Span•
C
Span
ΣF
U
F
where Span• is the bicategory of spans between pointed sets, and U is the forgetful
functor.
More concretely,
R
F is deﬁned as the category (all 2-cells are identities, due
to the 2-discreteness of C) having
– 0-cells of
R
F are couples (X, x) where X is a 0-cell of C and x ∈FX;
– 1-cells (X, x) →(Y, y) of
R
F are couples (f, s) where f : X →Y is a 1-cell
of C and s ∈SF f with Ff(s) = (x, y). Representing a span as a function
(S, s) →(X × Y, (x, y)) between (pointed) sets, a morphism is a pair (f, s)
such that Ff : s 7→(x, y).
Finally, the categories
R
F and D are isomorphic.
This result is a particular case of a more general correspondence between slice
categories and lax normal functors to the category of profunctors [15], which
is well-known in category theory and dates back to B´enabou [6, 5]. It gives an
entirely abstract way to switch from/to and deﬁne internal/external semantics
for mana-nets. Indeed, with a proof partly similar to the one carried out in our
Theorem 1, we can show that:

Nets with Mana: A Framework for Chemical Reaction Modelling
13
Proposition 3. Monoidality of CM(N)
F−→C(N) implies ΓF is lax-monoidal.
We can thus deﬁne the external semantics of a generalized mana-net by
applying Γ to F. A generalization of Theorem 1 then holds by deﬁnition.
Summing up, we showed that the mana-net construction can be generalized
to more practical applications and the correspondence between a “na¨ıve” internal
semantics and a “type-aware” external one is still preserved. The evident price
we have to pay for our generalization is that our external semantics is now not
just lax-monoidal but lax-monoidal-lax.
6
Conclusion and future work
In this work, we introduced a new notion of Petri net where transitions come
endowed with “mana”, a quality representing how many times a transition will
be able to ﬁre before losing its eﬀectiveness. We believe this may be especially
useful in modelling chemical processes mediated by enzymes that degrade over
time.
Importantly, we showed how a categorical point of view on the matter allows
to give two diﬀerent deﬁnitions: A na¨ıve, “hands-on” one, that we called internal,
and a type-aware, functorial one, that we called external, which we proved to be
two sides of the same coin.
Indeed, the equivalence between internal and external semantics is the con-
sequence of a much more profound result in category theory, connecting slice
categories and categories of lax monoidal functors. We were able to rely on this
result to generalize our mana-nets further, while keeping the equivalence between
the internal and external points of view.
We believe that further generalizations of the external semantics presented
here may prove valuable to produce categorical semantics for nets with inhibitor
arcs [1]. An inhibitor arc is an input arc to a transition that is enabled only when
there are no tokens in their place. This concept is powerful enough to turn Petri
nets into a Turing-complete model of computation [25, 26].
Indeed, we notice that by relaxing Deﬁnition 7 to allow any span T ⊕→T ⊕,
we can model situations where a transition can ﬁre just if it has no mana
(e.g., we can map transition f to a span that is only deﬁned when its source
multiset has value 0 on f). The similarities in behaviour with inhibitor arcs are
evident and constitute a direction of future work that we will surely pursue. The
various technicalities involved are nevertheless tricky and necessitate a careful
investigation.
Another direction of future work is about implementing the ideas at this
moment presented using already available category theory libraries, such as [10].
References
[1]
T. Agerwala. “Complete model for representing the coordination of asyn-
chronous processes”. 1974 (cit. on p. 13).

14
F. Genovese, F. Loregian, and D. Palombi
[2]
J. C. Baez, J. Foley, and J. Moeller. “Network Models from Petri Nets
with Catalysts”. In: Compositionality 1 (2019), p. 4 (cit. on p. 2).
[3]
J. C. Baez, F. Genovese, J. Master, and M. Shulman. Categories of Nets.
2021. arXiv: 2101.04238 [cs, math] (cit. on p. 3).
[4]
M. Barr and C. Wells. Category theory for computing science. Vol. 49.
Prentice Hall New York, 1990 (cit. on p. 9).
[5]
J. B´enabou and T. Streicher. “Distributors at work”. Lecture notes written
by Thomas Streicher. 2000 (cit. on p. 12).
[6]
J. B´enabou. “Introduction to Bicategories”. In: J. B´enabou, R. Davis, A.
Dold, J. Isbell, S. MacLane, U. Oberst, and J. .-. Roos. Reports of the
Midwest Category Seminar. Vol. 47. Berlin, Heidelberg: Springer Berlin
Heidelberg, 1967, pp. 1–77 (cit. on pp. 7, 12).
[7]
A. Churchill, S. Biderman, and A. Herrick. “Magic: The gathering is Turing
complete”. In: arXiv preprint arXiv:1904.09828 (2019) (cit. on p. 2).
[8]
R. M. Dawson, R. Par´e, and D. A. Pronk. “Universal properties of Span”.
In: Theory and Applications of Categories 13.4 (2004), pp. 61–85 (cit. on
p. 7).
[9]
R. Dawson, R. Par´e, and D. Pronk. “The span construction”. In: Theory
Appl. Categ 24.13 (2010), pp. 302–377 (cit. on p. 7).
[10]
F. Genovese, A. Gryzlov, J. Herold, A. Knispel, M. Perone, E. Post, and
A. Videla. Idris-Ct: A Library to Do Category Theory in Idris. 2019. arXiv:
1912.06191 [cs, math] (cit. on p. 13).
[11]
F. Genovese, A. Gryzlov, J. Herold, M. Perone, E. Post, and A. Videla.
Computational Petri Nets: Adjunctions Considered Harmful. 2019. arXiv:
1904.12974 [cs, math] (cit. on p. 3).
[12]
F. Genovese and J. Herold. “Executions in (Semi-)Integer Petri Nets Are
Compact Closed Categories”. In: Electronic Proceedings in Theoretical
Computer Science 287 (2019), pp. 127–144 (cit. on p. 3).
[13]
F. Genovese and D. I. Spivak. “A Categorical Semantics for Guarded Petri
Nets”. In: Graph Transformation. Ed. by F. Gadducci and T. Kehrer.
Vol. 12150. Lecture Notes in Computer Science. Cham: Springer Interna-
tional Publishing, 2020, pp. 57–74 (cit. on pp. 2, 6, 9).
[14]
J. Letelier, J. Soto-Andrade, F. Guinez, A. Cornish-Bowden, and M.
C´ardenas. “Organizational invariance and metabolic closure: Analysis in
terms of M; R systems”. In: Journal of theoretical biology 238 (2006),
pp. 949–61 (cit. on pp. 2, 11).
[15]
F. Loregian. “Coend Calculus”. In: London Mathematical Society Lecture
Note Series 468 (2021). ISBN 9781108746120 (cit. on p. 12).
[16]
S. M. Marcelo Aguiar. Monoidal Functors, Species and Hopf Algebras.
Centre de Recherches Math´ematiques Monograph Series 29. American
Mathematical Society, 2010 (cit. on p. 6).
[17]
J. Master. “Petri Nets Based on Lawvere Theories”. In: Mathematical
Structures in Computer Science 30.7 (2020), pp. 833–864. arXiv: 1904.
09091 (cit. on pp. 3, 4).

Nets with Mana: A Framework for Chemical Reaction Modelling
15
[18]
J. Meseguer and U. Montanari. “Petri Nets Are Monoids”. In: Information
and Computation 88.2 (1990), pp. 105–155 (cit. on p. 3).
[19]
D. Pavlovi´c and S. Abramsky. “Specifying Interaction Categories”. In:
Category Theory and Computer Science. Ed. by E. Moggi and G. Rosolini.
Red. by G. Goos, J. Hartmanis, and J. van Leeuwen. Vol. 1290. Lecture
Notes in Computer Science. Berlin, Heidelberg: Springer Berlin Heidelberg,
1997, pp. 147–158 (cit. on pp. 9, 12).
[20]
P. Perrone. Notes on Category Theory with examples from basic mathemat-
ics. 2019. eprint: arXiv:1912.10642 (cit. on p. 5).
[21]
C. Petri and W. Reisig. Petri Net. Scholarpedia. 2008. url: http://www.
scholarpedia.org/article/Petri_net (cit. on p. 1).
[22]
V. Sassone. “On the Category of Petri Net Computations”. In: TAPSOFT
’95: Theory and Practice of Software Development. Ed. by P. D. Mosses,
M. Nielsen, and M. I. Schwartzbach. Red. by G. Goos, J. Hartmanis, and
J. Leeuwen. Vol. 915. Berlin, Heidelberg: Springer Berlin Heidelberg, 1995,
pp. 334–348 (cit. on p. 3).
[23]
Wikipedia. Magic (Game Terminology). 2020. url: https://en.wikipedia.
org/wiki/Magic_(game_terminology) (cit. on p. 2).
[24]
Wikipedia. Magic: The Gathering. 2020. url: https://en.wikipedia.
org/wiki/Magic:_The_Gathering (cit. on p. 2).
[25]
D. A. Zaitsev. “Universal Petri Net”. In: Cybernetics and Systems Analysis
48.1 (2012), pp. 498–511 (cit. on p. 13).
[26]
D. A. Zaitsev. “Toward the Minimal Universal Petri Net”. In: IEEE Trans-
actions on Systems, Man, and Cybernetics: Systems 44.1 (2014), pp. 47–58
(cit. on p. 13).

