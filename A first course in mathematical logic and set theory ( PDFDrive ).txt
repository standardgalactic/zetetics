

A FIRST COURSE IN
MATHEMATICAL LOGIC
AND SET THEORY


A FIRST COURSE IN
MATHEMATICAL LOGIC
AND SET THEORY
Michael L. O’Leary
College of DuPage

Copyright c⃝2016 by John Wiley & Sons, Inc. All rights reserved
Published by John Wiley & Sons, Inc., Hoboken, New Jersey
Published simultaneously in Canada
No part of this publication may be reproduced, stored in a retrieval system, or transmitted in any form
or by any means, electronic, mechanical, photocopying, recording, scanning, or otherwise, except as
permitted under Section 107 or 108 of the 1976 United States Copyright Act, without either the prior
written permission of the Publisher, or authorization through payment of the appropriate per-copy fee to
the Copyright Clearance Center, Inc., 222 Rosewood Drive, Danvers, MA 01923, (978) 750-8400,
fax (978) 750-4470, or on the web at www.copyright.com. Requests to the Publisher for permission should
be addressed to the Permissions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ
07030, (201) 748-6011, fax (201) 748-6008, or online at http://www.wiley.com/go/permission.
Limit of Liability/Disclaimer of Warranty: While the publisher and author have used their best efforts in
preparing this book, they make no representations or warranties with respect to the accuracy or
completeness of the contents of this book and speciﬁcally disclaim any implied warranties of
merchantability or ﬁtness for a particular purpose. No warranty may be created or extended by sales
representatives or written sales materials. The advice and strategies contained herein may not be
suitable for your situation. You should consult with a professional where appropriate. Neither the
publisher nor author shall be liable for any loss of proﬁt or any other commercial damages, including
but not limited to special, incidental, consequential, or other damages.
For general information on our other products and services or for technical support, please contact our Customer Care
Department within the United States at (800) 762-2974, outside the United States at (317) 572-3993 or fax (317) 572-
4002.
Wiley also publishes its books in a variety of electronic formats. Some content that appears in print
may not be available in electronic formats. For more information about Wiley products, visit our web site at www.wiley.com.
Library of Congress Cataloging-in-Publication Data applied for.
ISBN: 9780470905883
Printed in the United States of America
10 9 8 7 6 5 4 3 2 1

For my parents


CONTENTS
Preface
xiii
Acknowledgments
xv
List of Symbols
xvii
1
Propositional Logic
1
1.1
Symbolic Logic
1
Propositions
2
Propositional Forms
5
Interpreting Propositional Forms
7
Valuations and Truth Tables
10
1.2
Inference
19
Semantics
21
Syntactics
23
1.3
Replacement
31
Semantics
31
Syntactics
34
vii

viii
CONTENTS
1.4
Proof Methods
40
Deduction Theorem
40
Direct Proof
44
Indirect Proof
47
1.5
The Three Properties
51
Consistency
51
Soundness
55
Completeness
58
2
First-Order Logic
63
2.1
Languages
63
Predicates
63
Alphabets
67
Terms
70
Formulas
71
2.2
Substitution
75
Terms
75
Free Variables
76
Formulas
78
2.3
Syntactics
85
Quantiﬁer Negation
85
Proofs with Universal Formulas
87
Proofs with Existential Formulas
90
2.4
Proof Methods
96
Universal Proofs
97
Existential Proofs
99
Multiple Quantiﬁers
100
Counterexamples
102
Direct Proof
103
Existence and Uniqueness
104
Indirect Proof
105
Biconditional Proof
107
Proof of Disunctions
111
Proof by Cases
112
3
Set Theory
117
3.1
Sets and Elements
117
Rosters
118

CONTENTS
ix
Famous Sets
119
Abstraction
121
3.2
Set Operations
126
Union and Intersection
126
Set Difference
127
Cartesian Products
130
Order of Operations
132
3.3
Sets within Sets
135
Subsets
135
Equality
137
3.4
Families of Sets
148
Power Set
151
Union and Intersection
151
Disjoint and Pairwise Disjoint
155
4
Relations and Functions
161
4.1
Relations
161
Composition
163
Inverses
165
4.2
Equivalence Relations
168
Equivalence Classes
171
Partitions
172
4.3
Partial Orders
177
Bounds
180
Comparable and Compatible Elements
181
Well-Ordered Sets
183
4.4
Functions
189
Equality
194
Composition
195
Restrictions and Extensions
196
Binary Operations
197
4.5
Injections and Surjections
203
Injections
205
Surjections
208
Bijections
211
Order Isomorphims
212
4.6
Images and Inverse Images
216

x
CONTENTS
5
Axiomatic Set Theory
225
5.1
Axioms
225
Equality Axioms
226
Existence and Uniqueness Axioms
227
Construction Axioms
228
Replacement Axioms
229
Axiom of Choice
230
Axiom of Regularity
234
5.2
Natural Numbers
237
Order
239
Recursion
242
Arithmetic
243
5.3
Integers and Rational Numbers
249
Integers
250
Rational Numbers
253
Actual Numbers
256
5.4
Mathematical Induction
257
Combinatorics
260
Euclid’s Lemma
264
5.5
Strong Induction
268
Fibonacci Sequence
268
Unique Factorization
271
5.6
Real Numbers
274
Dedekind Cuts
275
Arithmetic
278
Complex Numbers
280
6
Ordinals and Cardinals
283
6.1
Ordinal Numbers
283
Ordinals
286
Classiﬁcation
290
Burali-Forti and Hartogs
292
Transﬁnite Recursion
293
6.2
Equinumerosity
298
Order
300
Diagonalization
303
6.3
Cardinal Numbers
307
Finite Sets
308

CONTENTS
xi
Countable Sets
310
Alephs
313
6.4
Arithmetic
316
Ordinals
316
Cardinals
322
6.5
Large Cardinals
327
Regular and Singular Cardinals
328
Inaccessible Cardinals
331
7
Models
333
7.1
First-Order Semantics
333
Satisfaction
335
Groups
340
Consequence
346
Coincidence
348
Rings
353
7.2
Substructures
361
Subgroups
363
Subrings
366
Ideals
368
7.3
Homomorphisms
374
Isomorphisms
380
Elementary Equivalence
384
Elementary Substructures
388
7.4
The Three Properties Revisited
394
Consistency
394
Soundness
397
Completeness
399
7.5
Models of Different Cardinalities
409
Peano Arithmetic
410
Compactness Theorem
414
Löwenheim–Skolem Theorems
415
The von Neumann Hierarchy
417
Appendix: Alphabets
427
References
429
Index
435


PREFACE
This book is inspired by The Structure of Proof: With Logic and Set Theory published
by Prentice Hall in 2002. My motivation for that text was to use symbolic logic as a
means by which to learn how to write proofs. The purpose of this book is to present
mathematical logic and set theory to prepare the reader for more advanced courses that
deal with these subjects either directly or indirectly. It does this by starting with propo-
sitional logic and ﬁrst-order logic with sections dedicated to the connection of logic
to proof-writing. Building on this, set theory is developed using ﬁrst-order formulas.
Set operations, subsets, equality, and families of sets are covered followed by relations
and functions. The axioms of set theory are introduced next, and then sets of num-
bers are constructed. Finite numbers, such as the natural numbers and the integers, are
deﬁned ﬁrst. All of these numbers are actually sets constructed so that they resemble
the numbers that are their namesakes. Then, the inﬁnite ordinal and cardinal numbers
appear. The last chapter of the book is an introduction to model theory, which includes
applications to abstract algebra and the proofs of the completeness and compactness
theorems. The text concludes with a note on Gödel’s incompleteness theorems.
MICHAEL L. O’LEARY
Glen Ellyn, Illinois
July 2015
xiii


ACKNOWLEDGMENTS
Thanks are due to Susanne Steitz-Filler, Senior Editor at Wiley, for her support of this
project. Thanks are also due to Sari Friedman and Katrina Maceda, both at Wiley, for
their work in producing this book. Lastly, I wish to thank the anonymous reviewer
whose comments proved beneﬁcial.
On a personal note, I would like to express my gratitude to my parents for their
continued caring and support; to my brother and his wife, who will make sure my
niece learns her math; to my dissertation advisor, Paul Eklof, who taught me both set
theory and model theory; to Robert Meyer, who introduced me to symbol logic; to
David Elfman, who taught me about logic through programming on an Apple II; and
to my wife, Barb, whose love and patience supported me as I ﬁnished this book.
xv


SYMBOLS
Symbol
Page(s)
:=
7
¬
7, 11
∧
7, 11
∨
7, 11
→
7, 12
↔
7, 13
헏
10
⊨
21, 336, 346, 352
̸⊨
23, 338
⇒
24
⊢
26
⇔
34
⊢∗
40
⊬
52
햢허헇
52, 395
햵햠햱
67
∀
68, 72
∃
68, 72
Symbol
Page(s)
=
68, 226
햠
68
햲햳
68
햭햳
69
햠햱
69
햠햱′
69
햦햱
69
햱햨
69
햮향
69
햳햤햱햬햲(햠)
70
햲
70
햫(햲)
73
푡
푥
75
푝(푥)
80
̂푎
88
∣
98
|푐|
116, 307
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
xvii

xviii
LIST OF SYMBOLS
Symbol
Page(s)
∈
118
∉
118
∅
118
퐍
119
퐙
119
퐐
119
퐑
119
퐂
119
∞
120
[푎, 푏]
120
(푎, 푏)
120
{푥: 푝(푥)}
122
퐙+
123
퐙−
123
∪
126
∩
126
⧵
127
퐴
128
×
130
퐑2
130
퐑푛
131
⊆
135, 361
⊈
135
⊂
136
gcd
140
P(퐴)
151
⋃ℱ
152
⋂ℱ
152
(퐴, 푅)
161
퐼퐴
162
dom(푅)
162
ran(푅)
162
◦
163, 195
푅−1
166, 203
푎푅푏
168
푎̸푅푏
168
≡
170, 387
mod 푚
170
[푎]푅
171
[푛]푚
171
퐴∕푅
172
퐙푚
172
≼
178
픸∗
178
Symbol
Page(s)
□
178
⟂
183
푓(푎)
190
푓: 퐷→퐵
190
퐷→퐵
191
⟦푥⟧
192
퐴퐵
193
휖푎
194
↾
197, 352
∗
198
≅
212, 380
휑[퐶]
216
휑−1[퐶]
217
햢헁(풜)
232
헭
235
헭헙
235
헭헙헖
235
△
236
푎+
237, 290
휔
238
푛!
242
ℤ
250
ℚ
254
푛푃푟
262
(푛
푟
)
263
퐹푛
269
휏
271
헌햾헀≼(퐴, 푏)
275
ℝ
276
0
278
1
278
ℂ
281
푖
281
헌햾헀(훼, 훽)
286
<훼퐴
294
≈
298
푛ℤ
298
≉
298
⪯
300
̸⪯
300
≺
300
휒퐵
304
ℵ0
313
ℵ
313

LIST OF SYMBOLS
xix
Symbol
Page(s)
햢햧
313
햦햢햧
314
ℶ
316
햼햿
328
프
333
(퐴, 픞)
333
퐼푎
푥
336
햲햺헍헦
340
M푛(ℝ)
345
M∗
푛(ℝ)
345
GL(푛, ℝ)
345
햲햺헍
352
픐푛(ℝ)
355
⟨푎⟩
363
⋃
훾∈휅프훾
372
휑: 프→픅
375
Symbol
Page(s)
프→픅
375
ker(휓)
379
⪯
389
≾
393
프∼
404
햳헁(프)
408
푆
410
헣
410
픓
410
헣헔
411
픓′
411
푉훼
417
헩
419
TC(퐴)
419
픙훼
420


CHAPTER 1
PROPOSITIONAL LOGIC
1.1
SYMBOLIC LOGIC
Let us deﬁne mathematics as the study of number and space. Although representations
can be found in the physical world, the subject of mathematics is not physical. Instead,
mathematical objects are abstract, such as equations in algebra or points and lines in
geometry. They are found only as ideas in minds. These ideas sometimes lead to the
discovery of other ideas that do not manifest themselves in the physical world as when
studying various magnitudes of inﬁnity, while others lead to the creation of tangible
objects, such as bridges or computers.
Let us deﬁne logic as the study of arguments. In other words, logic attempts to codify
what counts as legitimate means by which to draw conclusions from given information.
There are many variations of logic, but they all can be classiﬁed into one of two types.
There is inductive logic in which if the argument is good, the conclusion will probably
follow from the hypotheses. This is because inductive logic rests on evidence and
observation, so there can never be complete certainty whether the conclusions reached
do indeed describe the universe. An example of an inductive argument is:
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
1

2
Chapter 1 PROPOSITIONAL LOGIC
A red sky in the morning means that a storm is coming.
We see a red sky this morning.
Therefore, there will be a storm today.
Whether this is a trust-worthy argument or not rests on the strength of the predictive
abilities of a red sky, and we know about that by past observations. Thus, the argument
is inductive. The other type is deductive logic. Here the methods yield conclusions
with complete certainty, provided, of course, that no errors in reasoning were made.
An example of a deductive argument is:
All geometers are mathematicians.
Euclid is a geometer.
Therefore, Euclid is a mathematician.
Whether Euclid refers to the author of the Elements or is Mr. Euclid from down the
street is irrelevant. The argument works because the third sentence must follow from
the ﬁrst two.
As anyone who has solved an equation or written a proof can attest, deductive logic
is the realm of the mathematician. This is not to say that there are not other aspects to
the discovery of mathematical results, such as drawing conclusions from diagrams or
patterns, using computational software, or simply making a lucky guess, but it is to say
that to accept a mathematical statement requires the production of a deductive proof of
that statement. For example, in elementary algebra, we know that given
2푥−5 = 11,
we can conclude
2푥= 6
and then
푥= 3.
As each of the steps is legal, it is certain that the conclusion of 푥= 3 follows. In
geometry, we can write a two-column proof that shows that
∠퐵≅∠퐷
is guaranteed to follow from
ABCD is a parallelogram.
The study of these types of arguments, those that are deductive and mathematical in
content, is called mathematical logic.
Propositions
To study arguments, one must ﬁrst study sentences because they are the main parts of
arguments. However, not just any type of sentence will do. Consider
all squares are rectangles.

Section 1.1 SYMBOLIC LOGIC
3
The purpose of this sentence is to aﬃrm that things called squares also belong to the
category of things called rectangles. In this case, the assertion made by the sentence is
correct. Also, consider,
circles are not round.
This sentence denies that things called circles have the property of being round. This
denial is incorrect. If a sentence asserts or denies accurately, the sentence is true, but if
it asserts or denies inaccurately, the sentence is false. These are the only truth values
that a sentence can have, and if a sentence has one, it does not have the other. As
arguments intend to draw true conclusions from presumably true given sentences, we
limit the sentences that we study to only those with a truth value. This leads us to our
ﬁrst deﬁnition.
DEFINITION 1.1.1
A sentence that is either true or false is called a proposition.
Not all sentences are propositions, however. Questions, exclamations, commands,
or self-contradictory sentences like the following examples can neither be asserted nor
be denied.
∙Is mathematics logic?
∙Hey there!
∙Do not panic.
∙This sentence is false.
Sometimes it is unclear whether a sentence identiﬁes a proposition. This can be
due to factors such as imprecision or poor sentence structure. Another example is the
sentence
it is a triangle.
Is this true or false? It is impossible to know because, unlike the other words of the
sentence, the meaning of the word it is not determined. In this sentence, the word it is
acting like a variable as in 푥+ 2 = 5. As the value of 푥is undetermined, the sentence
푥+2 = 5 is neither true nor false. However, if 푥represents a particular value, we could
make a determination. For example, if 푥= 3, the sentence is true, and if 푥= 10, the
sentence is false. Likewise, if it refers to a particular object, then it is a triangle would
identify a proposition.
There are two types of propositions. An atom is a proposition that is not comprised
of other propositions. Examples include
the angle sum of a triangle equals two right angles
and
some quadratic equations have real solutions.

4
Chapter 1 PROPOSITIONAL LOGIC
A proposition that is not an atom but is constructed using other propositions is called
a compound proposition. There are ﬁve types.
∙A negation of a given proposition is a proposition that denies the truth of the
given proposition. For example, the negation of 3 + 8 = 5 is 3 + 8 ≠5. In this
case, we say that 3 + 8 = 5 has been negated. Negating the proposition the sine
function is periodic yields the sine function is not periodic.
∙A conjunction is a proposition formed by combining two propositions (called
conjuncts) with the word and. For example,
the base angles of an isosceles triangle are congruent,
and a square has no right angles
is a conjunction with the base angles of an isosceles triangle are congruent and
a square has no right angles as conjuncts.
∙A disjunction is a proposition formed by combining two propositions (called
disjuncts) with the word or. The sentence
the base angles of an isosceles triangle are congruent,
or a square has no right angles
is a disjunction.
∙An implication is a proposition that claims a given proposition (called the an-
tecedent) entails another proposition (called the consequent). Implications are
also known as conditional propositions. For example,
if rectangles have four sides, then squares have for sides
(1.1)
is a conditional proposition. Its antecedent is rectangles have four sides, and its
consequent is squares have four sides. This implication can also be written as
rectangles have four sides implies that squares have four sides,
squares have four sides if rectangles have four sides,
rectangles have four sides only if squares have four sides,
and
if rectangles have four sides, squares have four sides.
A conditional proposition can also be written using the words suﬃcient and nec-
essary. The word suﬃcient means “adequate” or “enough,” and necessary means
“needed” or “required.” Thus, the sentence

Section 1.1 SYMBOLIC LOGIC
5
rectangles having four sides is suﬃcient for squares to have four sides
translates (1.1). In other words, the fact that rectangles have four sides is enough
for us to know that squares have four sides. Likewise,
squares having four sides is necessary for rectangles to have four sides
is another translation of the implication because it means that squares must have
four sides because rectangle have four sides. Summing up, the antecedent is
suﬃcient for the consequent, and the consequent is necessary for the antecedent.
∙A biconditional proposition is the conjunction of two implications formed by
exchanging their antecedents and consequents. For example,
if rectangles have four sides, then squares have four sides,
and if squares have four sides, then rectangles have four sides.
To remove the redundancy in this sentence, notice that the ﬁrst conditional can
be written as
rectangles have four sides only if squares have four sides
and the second conditional can be written as
rectangles have four sides if squares have four sides,
resulting in the biconditional being written as
rectangles have four sides if and only if squares have four sides
or the equivalent
rectangles having four sides is necessary and suﬃcient
for squares to have four sides.
Propositional Forms
As a typical human language has many ways to express the same thought, it is beneﬁcial
to study propositions by translating them into a notation that has a very limited collec-
tion of symbols yet is still able to express the basic logic of the propositions. Once this
is done, rules that determine the truth values of propositions using the new notation can
be developed. Any such system designed to concisely study human reasoning is called
a symbolic logic. Mathematical logic is an example of symbolic logic.
Let 푝be a ﬁnite sequence of characters from a given collection of symbols. Call
the collection an alphabet. Call 푝a string over the alphabet. The alphabet chosen so
that 푝can represent a mathematical proposition is called the proposition alphabet and
consists of the following symbols.

6
Chapter 1 PROPOSITIONAL LOGIC
∙Propositional variables: Uppercase English letters, 푃, 푄, 푅, … , or uppercase
English letters with subscripts, 푃푛, 푄푛, 푅푛, … , where 푛= 0, 1, 2, …
∙Connectives: ¬, ∧, ∨, →, ↔
∙Grouping symbols: (, ), [, ].
The sequences 푃∨푄and 푃1푄1∧↔((( and the empty string, a string with no charac-
ters, are examples of strings over this alphabet, but only certain strings will be chosen
for our study. A string is selected because it is able to represent a proposition. These
strings will be determined by a method called a grammar. The grammar chosen for
our present purposes is given in the next deﬁnition. It is given recursively. That is, the
deﬁnition is ﬁrst given for at least one special case, and then the deﬁnition is given for
other cases in terms of itself.
DEFINITION 1.1.2
A propositional form is a nonempty string over the proposition alphabet such
that
∙every propositional variable is a propositional form.
∙¬푝is a propositional form if 푝is a propositional form.
∙(푝∧푞), (푝∨푞), (푝→푞), and (푝↔푞) are propositional forms if 푝and 푞are
propositional forms.
We follow the convention that parentheses can be replaced with brackets and
outermost parenthesis or brackets can be omitted. As with propositions, a propo-
sitional form that consists only of a propositional variable is an atom. Otherwise,
it is compound.
The strings 푃, 푄1, ¬푃, (푃1 ∨푃2) ∧푃3, and (푃→푄) ∧(푅↔¬푃) are examples of
propositional forms. To prove that the last string is a propositional form, proceed using
Deﬁnition 1.1.2 by noting that (푃→푄)∧(푅↔¬푃) is the result of combining 푃→푄
and 푅↔¬푃with ∧. The propositional form 푃→푄is from 푃and 푄combined with
→, and 푅↔¬푃is from 푅and ¬푃combined with ↔. These and ¬푃are propositional
forms because 푃, 푄, and 푅are propositional variables. This derivation yields the
following parsing tree:
(P → Q) ∧ (R ↔ ¬P)
 P → Q
 R ↔ ¬P
P
Q
¬P
R
P

Section 1.1 SYMBOLIC LOGIC
7
The parsing tree yields the formation sequence of the propositional form:
푃, 푄, 푅, ¬푃, 푃→푄, 푅↔¬푃, (푃→푄) ∧(푅↔¬푃).
The sequence is formed by listing each distinct term of the tree starting at the bottom
row and moving upwards.
EXAMPLE 1.1.3
Make the following assignments:
푝:= 푅↔(푃∧푄),
푞:= (푅↔푃) ∧푄.
The symbol := indicates that an assignment has been made. It means that the
propositional form on the right has been assigned to the lowercase letter on the
left. Using these designations, we can write new propositional forms using 푝and
푞. The propositional form 푝∧푞is
[푅↔(푃∧푄)] ∧[(푅↔푃) ∧푄]
with the formation sequence,
푃, 푄, 푅, 푃∧푄, 푅↔푃,
푅↔(푃∧푄), (푅↔푃) ∧푄, [푅↔(푃∧푄)] ∧[(푅↔푃) ∧푄],
and ¬푞→푝is
¬[(푅↔푃) ∧푄] →[푅↔(푃∧푄)]
with the formation sequence
푃, 푄, 푅, 푅↔푃, 푃∧푄, (푅↔푃) ∧푄, 푅↔(푃∧푄),
¬[(푅↔푃) ∧푄], ¬[(푅↔푃) ∧푄] →[푅↔(푃∧푄)].
Interpreting Propositional Forms
Notice that determining whether a string is a propositional form is independent of the
meaning that we give the symbols. However, as we do want these symbols to con-
vey meaning, we assume that the propositional variables represent atoms and set this
interpretation on the connectives:
¬
not
∧
and
∨
or
→
implies
↔
if and only if
Because of this interpretation, name the compound propositional forms as follows:

8
Chapter 1 PROPOSITIONAL LOGIC
¬푝
negation
푝∧푞
conjunction
푝∨푞
disjunction
푝→푞
implication
푝↔푞
biconditional
EXAMPLE 1.1.4
To see how this works, assign some propositions to some propositional variables:
푃:= The sine function is not one-to-one.
푄:= The square root function is one-to-one.
푅:= The absolute value function is not onto.
The following symbols represent the indicated propositions:
∙¬푅
The absolute value function is onto.
∙¬푃∨¬푄
The sine function is one-to-one, or the square root function is not one-to-
one.
∙푄→푅
If the square root function is one-to-one, the absolute function is not onto.
∙푅↔푃
The absolute value function is not onto if and only if the sine function is not
one-to-one.
∙푃∧푄
The sine function is not one-to-one, and the square root function is one-to-
one.
∙¬푃∧푄
The sine function is one-to-one, and the square root function is one-to-one.
∙¬(푃∧푄)
It is not the case that the sine function is not one-to-one and the square root
function is one-to-one.
The proposition
the absolute value function is not onto if and only if
both the sine function is not one-to-one and the square root function is one-to-one
is translated as 푅↔(푃∧푄) and

Section 1.1 SYMBOLIC LOGIC
9
the absolute value function is not onto if and only if the sine function is not
one-to-one, and the square root function is one-to-one
is translated as (푅↔푃) ∧푄. If the parenthesis are removed, the resulting string is
푅↔푃∧푄. It is simpler, but it is not clear how it should be interpreted. To eliminate
its ambiguity, we introduce an order of connectives as in algebra. In this way, certain
strings without parentheses can be read as propositional forms.
DEFINITION 1.1.5 [Order of Connectives]
To interpret a propositional form, read from left to right and use the following
precedence:
∙propositional forms within parentheses or brackets (innermost ﬁrst),
∙negations,
∙conjunctions,
∙disjunctions,
∙conditionals,
∙biconditionals.
EXAMPLE 1.1.6
To write the propositional form ¬푃∨푄∧푅with parentheses, we begin by inter-
preting ¬푃. According to the order of operations, the conjunction is next, so we
evaluate 푄∧푅. This is followed by the disjunction, and we have the propositional
form ¬푃∨(푄∧푅).
EXAMPLE 1.1.7
To interpret 푃∧푄∨푅correctly, use the order of operations. We discover that
it has the same meaning as (푃∧푄) ∨푅, but how is this distinguished from
푃∧(푄∨푅) in English? Parentheses are not appropriate because they are not
used as grouping symbols in sentences. Instead, use either...or. Then, using the
assignments from Example 1.1.4, (푃∧푄) ∨푅can be translated as
either the sine function is not one-to-one
and the square root function is one-to-one,
or the absolute value function is not onto.
Notice that either...or works as a set of parentheses. We can use this to translate
푃∧(푄∨푅):
the sine function is not one-to-one,
and either the square root function is one-to-one
or the absolute value function is not onto.

10
Chapter 1 PROPOSITIONAL LOGIC
Be careful to note that the either-or phrasing is logically inclusive. For instance,
some colleges require their students to take either logic or mathematics. This
choice is meant to be exclusive in the sense that only one is needed for graduation.
However, it is not logically exclusive. A student can take logic to satisfy the
requirement yet still take a math class.
EXAMPLE 1.1.8
Let us interpret ¬(푃∧푄). We can try translating this as not 푃and 푄, but this
represents ¬푃∧푄according to the order of operations. To handle a propositional
form such as ¬(푃∧푄), use a phrase like it is not the case or it is false and the
word both. Therefore, ¬(푃∧푄) becomes
it is not the case that both 푃and 푄
or
it is false that both 푃and 푄.
For instance, make the assignments.
푃:= quadratic equations have at most two real solutions,
푄:= the discriminant can be negative.
Then,
quadratic equations do not have at most two real solutions,
and the discriminant can be negative
is a translation of ¬푃∧푄. On the other hand, ¬(푃∧푄) can be
it is not the case that both quadratic equations have at most two real solutions
and the discriminant can be negative.
To interpret ¬푃∧¬푄, use neither-nor:
neither do quadratic equations have at most two real solutions,
nor can the discriminant be negative.
Valuations and Truth Tables
Propositions have truth values, but propositional forms do not. This is because every
propositional form represents any one of inﬁnitely many propositions. However, once a
propositional form is identiﬁed with a proposition, there should be a process by which
the truth value of the proposition is associated with the propositional form. This is
done with a rule 헏called a valuation. The input of 헏is a propositional form, and its
output is T or F. Suppose that 푃is a propositional variable. If 푃has been assigned a
proposition,
헏(푃) =
{
T
if 푃is true,
F
if 푃is false.

Section 1.1 SYMBOLIC LOGIC
11
For example, if 푃:= 2 + 3 = 5, then 헏(푃) = T, and if 푃:= 2 + 3 = 7, then 헏(푃) = F.
If 푃has not been assigned a proposition, then 헏(푃) can be deﬁned arbitrarily as either
T or F.
The valuation of a compound propositional form is deﬁned using truth tables. Let
푝and 푞be given propositional forms. Along the top row write 푝and, if needed, 푞.
Draw a vertical line. To its right identify the desired propositional form consisting
of 푝, possibly 푞, and a single connective. In the body of the table, on the left of the
vertical line are all combinations of T and F for 푝and possibly 푞. On the right are the
results of applying the connective. Each connective will have its own truth table, and
we want to deﬁne these tables so that they match our understanding of the meaning of
each connective.
Since the truth value of the negation of a given proposition is the opposite of that
proposition’s truth value,
푝
¬푝
T
F
F
T
This means that 헏(¬푝) = F if 헏(푝) = T and 헏(¬푝) = T if 헏(푝) = F.
The conjunction,
3 + 6 = 9, and all even integers are divisible by two,
is true, but
all integers are rational, and 4 is odd
is false because the second conjunct is false. The disjunction
3 + 7 = 9, or all even integers are divisible by three,
is false since both disjuncts are false. On the other hand,
3 + 7 = 9, or circles are round
is true. This illustrates that
∙a conjunction is true when both of its conjuncts are true, and false otherwise, and
∙a disjunction is true when at least one disjunct is true, and false otherwise.
We use these principles to deﬁne the truth tables for 푝∧푞and 푝∨푞:
푝
푞
푝∧푞
T
T
T
T
F
F
F
T
F
F
F
F
푝
푞
푝∨푞
T
T
T
T
F
T
F
T
T
F
F
F
We must remember that only one disjunct needs to be true for the entire disjunction to
be true. For this reason, the logical disjunction is sometimes called an inclusive or.
The propositional form for the exclusive or is
(푝∨푞) ∧¬(푝∧푞).

12
Chapter 1 PROPOSITIONAL LOGIC
There are many ways to understand an implication. Sometimes it represents causa-
tion as in
if I score at least 70 on the exam, I will earn a passing grade.
Other times it indicates what would have been the case if some past event had gone
diﬀerently as in
if I had not slept late, I would not have missed the meeting.
Study of such conditional propositions is a very involved subject, one that need not
concern us here because in mathematics a simpler understanding of the implication
is enough. Suppose that 푃and 푄are assigned propositions so that 푃→푄is a true
implication. In mathematics, this means that it is not the case that 푃is true but 푄is
false. This understanding of the conditional is known as material implication. For
example,
if rectangles have four sides, then squares have four sides,
if rectangles have three sides, then squares have four sides,
and
if rectangles have three sides, then squares have three sides
are all true, but
if rectangles have four sides, then squares have three sides
is false. Generalizing, in mathematics, 푝→푞means ¬(푝∧¬푞), which has the following
truth table:
푝
푞
¬푞
푝∧¬푞
¬(푝∧¬푞)
T
T
F
F
T
T
F
T
T
F
F
T
F
F
T
F
F
T
F
T
The truth table for 푝→푞is then deﬁned as follows:
푝
푞
푝→푞
T
T
T
T
F
F
F
T
T
F
F
T
The truth table for 푝↔푞is simpler because we understand 푝↔푞to mean
(푝→푞) ∧(푞→푝).
The truth table for this propositional form requires ﬁve columns:

Section 1.1 SYMBOLIC LOGIC
13
푝
푞
푝→푞
푞→푝
(푝→푞) ∧(푞→푝)
T
T
T
T
T
T
F
F
T
F
F
T
T
F
F
F
F
T
T
T
Therefore, deﬁne the truth table of 푝↔푞as:
푝
푞
푝↔푞
T
T
T
T
F
F
F
T
F
F
F
T
This understanding of the biconditional is known as material equivalence.
Using these truth tables, the valuation of an arbitrary propositional form can be
deﬁned.
DEFINITION 1.1.9
Let 푝and 푞be propositional forms.
∙헏(¬푝) =
{
T
if 헏(푝) = F,
F
if 헏(푝) = T.
∙헏(푝∧푞) =
{
T
if 헏(푝) = T and 헏(푞) = T,
F
otherwise.
∙헏(푝∨푞) =
{
F
if 헏(푝) = F and 헏(푞) = F,
T
otherwise.
∙헏(푝→푞) =
{
F
if 헏(푝) = T and 헏(푞) = F,
T
otherwise.
∙헏(푝↔푞) =
{
T
if 헏(푝) = 헏(푞),
F
otherwise.
EXAMPLE 1.1.10
Consider the propositional form (푃↔푄) ∨(푅→푃) where
헏(푃) = F, 헏(푄) = T, and 헏(푅) = F.
Then, 헏(푃↔푄) = F because 헏(푃) ≠헏(푄), and 헏(푅→푃) = T because
헏(푅) = F. Therefore, because 헏(푅→푃) = T,
헏([푃↔푄] ∨[푅→푃]) = T,

14
Chapter 1 PROPOSITIONAL LOGIC
We now generalize the deﬁnition of a truth table to create truth tables for more com-
plicated propositional forms and then use the tables to ﬁnd the valuation of a proposi-
tional form given the valuations of its proposition variables.
EXAMPLE 1.1.11
To write the truth table of 푃→푄∧¬푃, identify the column headings by drawing
the parsing tree for this form:
P → Q ∧ ¬P
P
Q ∧ ¬P
¬P
Q
P
Reading from the bottom, we see that a formation sequence for the propositional
form is
푃, 푄, ¬푃, 푄∧¬푃, 푃→푄∧¬푃.
Hence, the truth table for this form is
푃
푄
¬푃
푄∧¬푃
푃→푄∧¬푃
T
T
F
F
F
T
F
F
F
F
F
T
T
T
T
F
F
T
F
T
So, if 헏(푃) = T and 헏(푄) = F,
헏(푃→푄∧¬푃) = F.
That is, any proposition represented by 푃→푄∧¬푃is false when the proposition
assigned to 푃is true and the proposition assigned to 푄is false.
The propositional form in the next example has three propositional variables. To
make clear the truth value pattern that is to the left of the vertical line, note that if there
are 푛variables, the number of rows is twice the number of rows for 푛−1 variables.
To see this, start with one propositional variable. Such a truth table has only two rows.
Add a variable, we obtain four rows. The pattern is obtained by writing the one variable
case twice. For the ﬁrst time, it has a T written in front of each row. The second copy
has an F in front of each row. To obtain the pattern for three variables, copy the two-
variable pattern twice as in Figure 1.1. To generalize, if there are 푛variables, there will
be 2푛rows.

Section 1.1 SYMBOLIC LOGIC
15
푃
Two
rows
{
T
F
푃
푄
−→Four
rows
⎧
⎪
⎨
⎪⎩
T
T
F
F
T
F
T
F
푃
푄
푅
−→Eight
rows
⎧
⎪
⎪
⎪
⎪
⎨
⎪
⎪
⎪
⎪⎩
T
T
T
T
F
F
F
F
T
T
F
F
T
T
F
F
T
F
T
F
T
F
T
F
Figure 1.1
Valuation patterns.
EXAMPLE 1.1.12
Use a truth table to ﬁnd the truth value of
if the derivative of the sine function is the cosine function
and the second derivative of the sine function is the sine function,
then the third derivative of the sine function is the cosine function.
Deﬁne:
푃:= the derivative of the sine function is the cosine function,
푄:= the second derivative of the sine function is the sine function,
푅:= the third derivative of the sine function is the cosine function.
So 푃represents a true proposition, but 푄and 푅represent false propositions. The
proposition is represented by
푃∧푄→푅
with truth table:
푃
푄
푅
푃∧푄
푃∧푄→푅
T
T
T
T
T
T
T
F
T
F
T
F
T
F
T
T
F
F
F
T
F
T
T
F
T
F
T
F
F
T
F
F
T
F
T
F
F
F
F
T
Notice that we could have determined the truth value by simply writing one line
from the truth table:
푃
푄
푅
푃∧푄
푃∧푄→푅
T
F
F
F
T
We see that 헏(푃∧푄→푅) = T when 헏(푃) = T, 헏(푄) = F, and 헏(푅) = F.
Therefore, the proposition is true.

16
Chapter 1 PROPOSITIONAL LOGIC
EXAMPLE 1.1.13
Both 푃∨¬푃and 푃→푃share an important property. Their columns in their
truth tables are all T. For example, the truth table of 푃∨¬푃is:
푃
¬푃
푃∨¬푃
T
F
T
F
T
T
Therefore, 헏(푃∨¬푃) always equals T, no matter the choice of 헏.
However, the columns for 푃∧¬푃and 푃↔¬푃are all F. To check the ﬁrst
one, examine its truth table:
푃
¬푃
푃∧¬푃
T
F
F
F
T
F
This means that 헏(푃∧¬푃) is always F for every valuation 헏.
Based on the last example, we make the next deﬁnition.
DEFINITION 1.1.14
A propositional form 푝is a tautology if 헏(푝) always equals T for every valuation
헏, and 푝is a contradiction if 헏(푝) always equals F for every 헏. A propositional
form that is neither a tautology nor a contradiction is called a contingency.
Exercises
1. Identify each sentence as either a proposition or not a proposition. Explain.
(a) Trisect the angle.
(b) Some exponential functions are increasing.
(c) All exponential functions are increasing.
(d) 3 + 8 = 18
(e) 3 + 푥= 18
(f)
Yea, logic!
(g) A triangle is a three-sided polygon.
(h) The function is diﬀerentiable.
(i)
This proposition is true.
(j)
This proposition is not true.
2. Identify the antecedent and the consequent for the given implications.
(a) If the triangle has two congruent sides, it is isosceles.
(b) The polynomial has at most two roots if it is a quadratic.
(c) The data is widely spread only if the standard deviation is large.
(d) The function being constant implies that its derivative is zero.
(e) The system of equations is consistent is necessary for it to have a solution.

Section 1.1 SYMBOLIC LOGIC
17
(f)
A function is even is suﬃcient for its square to be even.
3. Give the truth value of each proposition.
(a) A system of equations always has a solution, or a quadratic equation always
has a real solution.
(b) It is false that every polynomial function in one variable is diﬀerentiable.
(c) Vertical lines have no slope, and lines through the origin have a positive
푦-intercept.
(d) Every integer is even, or every even natural number is an integer.
(e) If every parabola intersects the 푥-axis, then an ellipse has only one vertex.
(f)
The sine function is periodic if and only if every exponential function is al-
ways nonnegative.
(g) It is not the case that 2 + 4 ≠6.
(h) The distance between two points is always positive if every line segment is
horizontal.
(i)
The derivative of a constant function is zero is necessary for the product rule
to be true.
(j)
The derivative of the sine function being cosine is suﬃcient for the derivative
of the cosine function being sine.
(k) Any real number is negative or positive, but not both.
4. For each sentence, ﬁll in the blank using as many of the words and, or, if, and if and
only if as possible to make the proposition true.
(a) Triangles have three sides
3 + 5 = 6.
(b) 3 + 5 = 6
triangles have three sides.
(c) Ten is the largest integer
zero is the smallest integer.
(d) The derivative of a constant function is zero
tangent lines for in-
creasing functions have positive slope.
5. Extend Figure 1.1 by writing the typical pattern of Ts and Fs for the truth table of
a propositional form with four propositional variables and then with ﬁve propositional
variables.
6. Use a parsing tree to show that the given string is a propositional form.
(a) 푃∧푄∨푅
(b) 푄↔푅∨¬푄
(c) 푃→푄→푅→푆
(d) ¬푃∧푄∨(푃→푄) ∧¬푆
(e) (푃∧푄→푄) ∧푃→푄
(f)
¬¬푃∨푃∧푆→푄∨[푅→¬푃→¬(푄∨푅)]
7. Deﬁne:
푃:= the angle sum of a triangle is 180,
푄:= 3 + 7 = 10,
푅:= the sine function is continuous.

18
Chapter 1 PROPOSITIONAL LOGIC
Translate the given propositional forms into English.
(a) 푃∨푄
(b) 푃∧푄
(c) 푃∧¬푄
(d) 푄∨¬푅
(e) 푄↔¬푅
(f)
푅→푄
(g) 푃∨푅→¬푄
(h) 푄↔푅∧¬푄
(i)
¬(푃∧푄)
(j)
¬(푃∨푄)
(k) 푃∨푄∧푅
(l)
(푃∨푄) ∧푅
8. Write the following sentences as propositional forms using the variables 푃, 푄, and
푅as deﬁned in Exercise 7.
(a) The sine function is continuous, and 3 + 7 = 10.
(b) The angle sum of a triangle is 180, or the angle sum of a triangle is 180.
(c) If 3 + 7 = 10, then the sine function is not continuous.
(d) The angle sum of a triangle is 180 if and only if the sine function is continu-
ous.
(e) The sine function is continuous if and only if 3 + 7 = 10 implies that the
angle sum of a triangle is not 180.
(f)
It is not the case that 3 + 7 ≠10.
9. Let 헏(푃) = T, 헏(푄) = T, 헏(푅) = F, and 헏(푆) = F. Find the given valuations. (See
Exercise 6.)
(a) 푃∧푄∨푅
(b) 푄↔푅∨¬푄
(c) 푃→푄→푅→푆
(d) ¬푃∧푄∨(푃→푄) ∧¬푆
(e) (푃∧푄→푄) ∧푃→푄
(f)
¬¬푃∨푃∧푆→푄∨[푅→¬푃→¬(푄∨푅)]
10. Write the truth table for each of the given propositional forms.
(a) ¬푃→푃
(b) 푃→¬푄
(c) (푃∨푄) ∧¬(푃∧푄)
(d) (푃→푄) ∨(푄↔푃)
(e) 푃∧(푄∨푅)
(f)
푃∨푄→푅
(g) 푃→푄∧¬(푅∨푃)
(h) 푃→푄↔푅→푆
(i)
푃∨(¬푄↔푅) ∧푄

Section 1.2 INFERENCE
19
(j)
(¬푃∨푄) ∧([푃→푄] ∨¬푆)
11. Check the truth value of these propositions using truth tables as in Example 1.1.12.
(a) If 2 + 3 = 7, then 5 −9 ≠0.
(b) If a square is round implies that some functions have a derivative at 푥= 2,
then every function has a derivative at 푥= 2.
(c) Either four is odd or two is even implies that three is even.
(d) Every even integer is divisible by 4 if and only if either 7 divides 21 or 9
divides 12.
(e) The graph of the tangent function has asymptotes, and if sine is an increasing
function, then cosine is a decreasing function.
12. If possible, ﬁnd propositional forms 푝and 푞such that
(a) 푝∧푞is a tautology.
(b) 푝∨푞is a contradiction.
(c) ¬푝is a tautology.
(d) 푝→푞is a contradiction.
(e) 푝↔푞is a tautology.
(f)
푝↔푞is a contradiction.
1.2
INFERENCE
Now that we have a collection of propositional forms and a means by which to inter-
pret them as either true or false, we want to deﬁne a system that expands these ideas to
include methods by which we can prove certain propositional forms from given propo-
sitional forms. What we will deﬁne is familiar because it is similar to what Euclid did
with his geometry. Take, for example, the familiar result,
opposite angles in a parallelogram are congruent.
In other words,
if 퐴퐵퐶퐷is a parallelogram, then ∠퐵≅∠퐷,
which translates to:
Given:
퐴퐵퐶퐷is a parallelogram,
Prove:
∠퐵≅∠퐷.
To demonstrate this, we draw a diagram,
D
B
A
C
and then write a proof:

20
Chapter 1 PROPOSITIONAL LOGIC
1.
퐴퐵퐶퐷is a parallelogram
Given
2.
Join 퐴퐶
Postulate
3.
∠퐷퐴퐶≅∠퐵퐶퐴
Alternate interior angles
4.
∠퐴퐶퐷≅∠퐶퐴퐵
Alternate interior angles
5.
퐴퐶≅퐴퐶
Reﬂexive
6.
△퐴퐶퐷≅△퐶퐴퐵
ASA
7.
∠퐵≅∠퐷
Corresponding parts
Euclid’s geometry consists of geometric propositions that are established by proofs
like the above. These proofs rely on rules of logic, previously proved propositions
(lemmas, theorems, and corollaries), and propositions that are assumed to be true (the
postulates). Using this system of thought, we can show which geometric propositions
follow from the postulates and conclude which propositions are true, whatever it means
for a geometric proposition to be true. Euclidean geometry serves as a model for the
following modern deﬁnition.
DEFINITION 1.2.1
A logical system consists of the following:
∙An alphabet
∙A grammar
∙Propositional forms that require no proof
∙Rules that determine truth
∙Rules that are used to write proofs.
Although Euclid did not provide an alphabet or a grammar speciﬁcally for his geometry,
his system did include the last three aspects of a logical system. In this chapter we
develop the logical system known as propositional logic. Its alphabet, grammar, and
rules that determine truth were deﬁned in Section 1.1. The remainder of this chapter is
spent establishing the other two components.
Consider the following collection of propositions:
If squares are rectangles, then squares are quadrilaterals.
Squares are rectangles.
Therefore, squares are quadrilaterals.
This is an example of a deduction, a collection of propositions of which one is supposed
to follow necessarily from the others. In this particular case,
if squares are rectangles, then squares are quadrilaterals
and

Section 1.2 INFERENCE
21
squares are rectangles
are the premises, and
squares are quadrilaterals
is the conclusion. We recognize that in this case, the conclusion does follow from the
premises because whenever the premises are true, the conclusion must also be true.
When this is the case, the deduction is semantically valid, else it is semantically in-
valid.
Notice that not only do we see that the deduction works because of the meaning of
the propositions, but we also see that it is valid based on the forms of the sentences. In
other words, we also recognize this deduction as valid:
If Hausdorﬀspaces are preregular, their points can be separated.
Hausdorﬀspaces are preregular.
Therefore, their points can be separated.
Although we might not know the terms Hausdorﬀspace, preregular, and separated, we
recognize the deduction as valid because it is of the same pattern as the ﬁrst deduction:
푝→푞
푝
∴푞
(1.2)
When the deduction is found to work based on its form, the deduction is syntactically
valid, else it is syntactically invalid.
We study both types of validity by examining general patterns of deductions and
choosing rules that determine which forms correspond to deductions that are valid se-
mantically and which forms correspond to deductions that are valid syntactically.
Semantics
The study of meaning is called semantics. We began this study when we wrote truth
tables. These are characterized as semantic because the truth value of a proposition is
based on its meaning. Our goal is to use truth tables to determine when an argument
form, an example being (1.2), corresponds to a deduction that is semantically valid.
We begin with a deﬁnition.
DEFINITION 1.2.2
Let 푝0, 푝1, … , 푝푛−1 and 푞be propositional forms.
∙If 푞is a tautology, write ⊨푞.
∙Deﬁne 푝0, 푝1, … , 푝푛−1 to logically imply 푞if
⊨푝0 ∧푝1 ∧· · · ∧푝푛−1 →푞.

22
Chapter 1 PROPOSITIONAL LOGIC
When 푝0, 푝1, … , 푝푛−1 logically imply 푞, write
푝0, 푝1, … , 푝푛−1 ⊨푞.
and say that 푞is a consequence of 푝0, 푝1, … , 푝푛−1. Call the propositional
forms 푝0, 푝1, … , 푝푛−1 the premises of the implication and 푞the conclu-
sion.
Notice that if 푝0, 푝1, … , 푝푛−1 ⊨푞, then for any valuation 헏, whenever 헏(푝푖) = T for all
푖= 0, 1, … , 푛−1, it must be the case that 헏(푞) = T. Moreover, any deduction with
premises represented by 푝0, 푝1, … , 푝푛−1 and conclusion by 푞is semantically valid if
푝0, 푝1, … , 푝푛−1 ⊨푞.
EXAMPLE 1.2.3
Because of Example 1.1.13, both ⊨푃→푃and ⊨푃∨¬푃.
EXAMPLE 1.2.4
Prove: 푃→푄, 푃⊨푄
To accomplish this, show that the propositional form
(푃→푄) ∧푃→푄,
with antecedent equal to the conjunction of the premises and consequent consist-
ing of the conclusion is a tautology.
푃
푄
푃→푄
(푃→푄) ∧푃
(푃→푄) ∧푃→푄
T
T
T
T
T
T
F
F
F
T
F
T
T
F
T
F
F
T
F
T
Therefore, ⊨(푃→푄) ∧푃→푄, so
푃→푄, 푃⊨푄,
and any deduction based on this form is semantically valid.
EXAMPLE 1.2.5
Prove: 푃∨푄→푄, 푃⊨푄
푃
푄
푃∨푄
푃∨푄→푄
(푃∨푄→푄) ∧푃
(푃∨푄→푄) ∧푃→푄
T
T
T
T
T
T
T
F
T
F
F
T
F
T
T
T
F
T
F
F
F
T
F
T
If it is possible for 헏(푝푖) = T for 푖= 0, 1, … , 푛−1 yet 헏(푞) = F, the propositional form
푝0 ∧푝1 ∧· · · ∧푝푛−1 →푞

Section 1.2 INFERENCE
23
is not a tautology, so 푞is not a consequence of 푝0, 푝1, … , 푝푛−1. If this is the case, write
푝0, 푝1, … , 푝푛−1 ̸⊨푞.
EXAMPLE 1.2.6
Prove: 푃∧푄→푄, 푃̸⊨푄
푃
푄
푃∧푄
푃∧푄→푄
(푃∧푄→푄) ∧푃
(푃∧푄→푄) ∧푃→푄
T
T
T
T
T
T
T
F
F
T
T
F
F
T
F
T
F
T
F
F
F
T
F
T
Notice that F appears for (푃∧푄→푄) ∧푃→푄on a line when
헏(푃∧푄→푄) = 헏(푃) = T
yet 헏(푄) = F. Because of this, we can shorten the procedure for showing that a propo-
sitional form is not a consequence of other propositional forms.
EXAMPLE 1.2.7
Prove: 푃∧푄→푅̸⊨푃→푅
푃
푄
푅
푃∧푄→푅
푃→푅
T
F
F
T
F
Observe that this shows that the valuation of 푃∧푄→푅can be T at the same
time that the valuation of 푃→푅is F.
Syntactics
Although we will return to semantics, it is important to note that using truth tables to
check for logical implication has its limitations. If the argument form involves many
propositional forms or if the propositional forms are complicated, the truth table used
to show or disprove the logical implication can become unwieldy. Another issue is
that in practice, truth tables are not the method of choice when determining whether
a conclusion follows from the premises. What is typically done is to follow Euclid’s
example (page 20), basing the conclusions on the syntax of the argument form, namely,
based only on its pattern and structure.
Let us return to the deduction on page 20 and work with it diﬀerently. Start with the
two propositions,
if squares are rectangles, then squares are quadrilaterals
and
squares are rectangles.
Because of the combined structure of the two sentences, we know that we can write

24
Chapter 1 PROPOSITIONAL LOGIC
squares are quadrilaterals.
This act of writing (on paper or a blackboard or in the mind) means that we have the
proposition and that it follows from the ﬁrst two. Similarly, if we start with
squares are triangles, or squares are rectangles
and
squares are not triangles,
we can write
squares are rectangles.
Determining a method that will model this reasoning requires us to ﬁnd rules by
which propositional forms can be written from other propositional forms. Since ev-
ery logical system requires a starting point, the ﬁrst step in this process is to choose
which propositional forms can be written without any prior justiﬁcation. Each such
propositional form is called an axiom. Playing the same role as that of a postulate in
Euclidean geometry, an axiom can be considered as a rule of the game. Certain propo-
sitional forms lend themselves as good candidates for axioms because they are regarded
as obvious. That is, they are self-evident. Other propositional forms are good candi-
dates to be axioms, not because they are necessarily self-evident, but because they are
helpful. In either case, the number of axioms should be as few as possible so as to min-
imize the number of assumptions. For propositional logic, we choose only three. They
were ﬁrst found in work of Gottlob Frege (1879) and later in that of Jan Łukasiewicz
(1930).
AXIOMS 1.2.8 [Frege–Łukasiewicz]
Let 푝, 푞, and 푟be propositional forms.
∙[FL1] 푝→(푞→푝)
∙[FL2] 푝→(푞→푟) →(푝→푞→[푝→푟])
∙[FL3] ¬푝→¬푞→(푞→푝).
The next step in deﬁning propositional logic is to state when it is legal to write a
propositional form from given propositional forms.
DEFINITION 1.2.9
The propositional forms 푝0, 푝1, … , 푝푛−1 infer 푞if 푞can be written whenever
푝0, 푝1, … , 푝푛−1 are written. Denote this by
푝0, 푝1, … , 푝푛−1 ⇒푞.
This is known as an inference.
To make rigorous which propositional forms can be inferred from given forms, we
establish some rules. These are chosen because they model basic reasoning. They are
also not proved, so they serve as postulates for our logic.

Section 1.2 INFERENCE
25
INFERENCE RULES 1.2.10
Let 푝, 푞, 푟, and 푠be propositional forms.
∙Modus Ponens [MP]
푝→푞, 푝⇒푞
∙Modus Tolens [MT]
푝→푞, ¬푞⇒¬푝
∙Constructive Dilemma [CD]
(푝→푞) ∧(푟→푠), 푝∨푟⇒푞∨푠
∙Destructive Dilemma [DD]
(푝→푞) ∧(푟→푠), ¬푞∨¬푠⇒¬푝∨¬푟
∙Disjunctive Syllogism [DS]
푝∨푞, ¬푝⇒푞
∙Hypothetical Syllogism [HS]
푝→푞, 푞→푟⇒푝→푟
∙Conjunction [Conj]
푝, 푞⇒푝∧푞
∙Simpliﬁcation [Simp]
푝∧푞⇒푝
∙Addition [Add]
푝⇒푝∨푞.
To use Inference Rules 1.2.10, match the form exactly. For example, even though
푃→푅appears to follow from (푃∧푄) →푅as an application of simpliﬁcation, it does
not. The problem is that simpliﬁcation can only be applied to propositional forms with
the 푝∧푞pattern, but (푃∧푄) →푅is of the form 푝→푞. With this detail in mind, we
make some inferences.
EXAMPLE 1.2.11
Each inference is justiﬁed by the indicated rule.
∙Modus ponens
푃∧푄→¬푅, 푃∧푄⇒¬푅
∙Addition
푃⇒푃∨푄∧푅
∙Modus tolens
¬¬푃, 푄∨푅→¬푃⇒¬(푄∨푅).

26
Chapter 1 PROPOSITIONAL LOGIC
EXAMPLE 1.2.12
Since it is possible that some propositional forms are not needed for the inference,
we also have the following:
∙Modus ponens
푃∧푄→¬푅, 푃∨푄, 푃∧푄, 푄↔푆⇒¬푅
∙Addition
푃, 푅, 푆→푇⇒푃∨푄∧푅
∙Modus tolens
¬푆, ¬¬푃, 푃∧푇, 푄∨푅→¬푃⇒¬(푄∨푅).
Inference is a powerful tool, but it can only be used to check simple deductions.
Sometimes multiple inferences are needed to move from a collection of premises to a
conclusion. For example, if we write
푝∨푞, ¬푝, 푞→푟,
based on the ﬁrst two propositional forms, we can write
푞
by DS, and then based on this propositional form and the third of the given propositional
forms, we can write
푟
by MP. This is a simple example of the next deﬁnition.
DEFINITION 1.2.13
∙A formal proof of the propositional form 푞(the conclusion) from the proposi-
tional forms 푝0, 푝1, … , 푝푛−1 (the premises) is a sequence of propositional forms,
푝0, 푝1, … , 푝푛−1, 푞0, 푞1, … , 푞푚−1,
such that 푞푚−1 = 푞, and for all 푖= 0, 1, … , 푚−1, either 푞푖is an axiom,
if 푖= 0, then 푝0, 푝1, … , 푝푛−1 ⇒푞푖, or
if 푖> 0, then 푝0, 푝1, … , 푝푛−1, 푞0, 푞1, … , 푞푖−1 ⇒푞푖.
If there exists a formal proof of 푞from 푝0, 푝1, … , 푝푛−1, then 푞is proved or de-
duced from 푝0, 푝1, … , 푝푛−1 and we write
푝0, 푝1, … , 푝푛−1 ⊢푞.
∙If there are no premises, a formal proof of 푞is a sequence,
푞0, 푞1, … , 푞푚−1,

Section 1.2 INFERENCE
27
such that 푞0 is an axiom, 푞푚−1 = 푞, and for all 푖> 0, either 푞푖is an axiom or
푞0, 푞1, … , 푞푖−1 ⇒푞푖.
In this case, write ⊢푞and call 푞a theorem.
Observe that any deduction with premises represented by 푝0, 푝1, … , 푝푛−1 and conclu-
sion by 푞is syntactically valid if 푝0, 푝1, … , 푝푛−1 ⊢푞.
We should note that although ⇒and ⊢have diﬀerent meanings as syntactic symbols,
they are equivalent. If 푝⇒푞, then 푝⊢푞using the proof 푝, 푞. Conversely, suppose
푝⊢푞. This means that there exists a proof
푝, 푞0, 푞1, … , 푞푛−1, 푞,
so every time we write down 푝, we can also write down 푞. That is, 푝⇒푞. We summa-
rize this as follows.
THEOREM 1.2.14
For all propositional forms 푝and 푞, 푝⇒푞if and only if 푝⊢푞.
We use a particular style to write formal proofs. They will be in two-column format
with each line being numbered. In the ﬁrst column will be the sequence of propositional
forms that make up the proof. In the second column will be the reasons that allowed
us to include each form. The only reasons that we will use are
∙Given (for premises),
∙FL1, FL2, or FL3 (for an axiom),
∙An inference rule.
An inference rule is cited by giving the line numbers used as the premises followed by
the abbreviation for the rule. Thus, the following proves 푃∨푄→푄∧푅, 푃⊢푄:
1.
푃∨푄→푄∧푅
Given
2.
푃
Given
3.
푃∨푄
2 Add
4.
푄∧푅
1, 3 MP
5.
푄
4 Simp
Despite the style, we should remember that a proof is a sequence of propositional forms
that satisfy Deﬁnition 1.2.13. In this case, the sequence is
푃∨푄→푄∧푅, 푃, 푃∨푄, 푄∧푅, 푄.
The ﬁrst two examples involve proofs that use the axioms.

28
Chapter 1 PROPOSITIONAL LOGIC
EXAMPLE 1.2.15
Prove: ⊢푃→푄→(푃→푃)
1.
푃→(푄→푃)
FL1
2.
푃→(푄→푃) →(푃→푄→[푃→푃])
FL2
3.
푃→푄→(푃→푃)
MP
This proves that 푃→푄→(푃→푃) is a theorem. Also, by adding 푃→푄as a
given and an application of MP at the end, we can prove
푃→푄⊢푃→푃.
This result should not be surprising since 푃→푃is a tautology. We would expect
any premise to be able to prove it.
EXAMPLE 1.2.16
Prove: ¬(푄→푃), ¬푃⊢¬푄
1.
¬(푄→푃)
Given
2.
¬푃
Given
3.
¬푃→¬푄→(푄→푃)
FL3
4.
¬푃→¬푄
1, 3 MT
5.
¬푄
2, 4 MP
The next three examples do not use an axiom in their proofs.
EXAMPLE 1.2.17
Prove: 푃→푄, 푄→푅, 푆∨¬푅, ¬푆⊢¬푃
1.
푃→푄
Given
2.
푄→푅
Given
3.
푆∨¬푅
Given
4.
¬푆
Given
5.
푃→푅
1, 2 HS
6.
¬푅
3, 4 DS
7.
¬푃
5, 6 MT
EXAMPLE 1.2.18
Prove: 푃→푄, 푃→푄→(푇→푆), 푃∨푇, ¬푄⊢푆
1.
푃→푄
Given
2.
푃→푄→(푇→푆)
Given
3.
푃∨푇
Given

Section 1.2 INFERENCE
29
4.
¬푄
Given
5.
푇→푆
1, 2 MP
6.
(푃→푄) ∧(푇→푆)
1, 5 Conj
7.
푄∨푆
3, 6 CD
8.
푆
4, 7 DS
EXAMPLE 1.2.19
Prove: 푃→푄, 푄→푅, ¬푅⊢¬푄∨¬푃
1.
푃→푄
Given
2.
푄→푅
Given
3.
¬푅
Given
4.
(푄→푅) ∧(푃→푄)
1, 2 Conj
5.
¬푅∨¬푄
3 Add
6.
¬푄∨¬푃
4, 5 DD
Exercises
1. Show using truth tables.
(a) ¬푃∨푄, ¬푄⊨¬푃
(b) ¬(푃∧푄), 푃⊨¬푄
(c) 푃→푄, 푃⊨푄∨푅
(d) 푃→푄, 푄→푅, 푃⊨푅
(e) 푃∨푄∧푅, ¬푃⊨푅
2. Show the following using truth tables.
(a) ¬(푃∧푄) ̸⊨¬푃
(b) 푃→푄∨푅, 푃̸⊨푄
(c) 푃∧푄→푅̸⊨푄→푅
(d) (푃→푄) ∨(푅→푆), 푃∨푅̸⊨푄∨푆
(e) ¬(푃∧푄) ∨푅, 푃∧푄∨푆̸⊨푅∧푆
(f)
푃∨푅, 푄∨푆, 푅↔푆̸⊨푅∧푆
3. Identify the rule from Inference Rules 1.2.10.
(a) 푃→푄→푃, 푃→푄⇒푃
(b) 푃, 푄∨푅⇒푃∧(푄∨푅)
(c) 푃⇒푃∨(푅↔¬푃∧¬[푄→푆])
(d) 푃, 푃→(푄↔푆) ⇒푄↔푆
(e) 푃∨푄∨푄, (푃∨푄→푄) ∧(푄→푆∧푇) ⇒푄∨푆∧푇
(f)
푃∨(푄∨푆), ¬푃⇒푄∨푆
(g) 푃→¬푄, ¬¬푄⇒¬푃
(h) (푃→푄) ∧(푄→푅), ¬푄∨¬푅⇒¬푃∨¬푄
(i)
(푃→푄) ∧(푄→푅) ⇒푃→푄

30
Chapter 1 PROPOSITIONAL LOGIC
4. Arrange each collection of propositional forms into a proof for the given deductions
and supply the appropriate reasons.
(a) 푃→푄, 푅→푆, 푃⊢푄∨푆
∙푃
∙푄∨푆
∙푅→푆
∙(푃→푄) ∧(푅→푆)
∙푃∨푅
∙푃→푄
(b) 푃→푄, 푄→푅, 푃⊢푅∨푄
∙푃
∙푃→푅
∙푃→푄
∙푅
∙푄→푅
∙푅∨푄
(c) (푃→푄) ∨(푄→푅), ¬(푃→푄), ¬푅, 푄∨푆⊢푆
∙¬(푃→푄)
∙푆
∙(푃→푄) ∨(푄→푅)
∙푄→푅
∙¬푅
∙¬푄
∙푄∨푆
(d) (푃∨푄) ∧푅, 푄∨푆→푇, ¬푃⊢¬푃∧푇
∙푃∨푄
∙푄
∙푄∨푆
∙푇
∙(푃∨푄) ∧푅
∙푄∨푆→푇
∙¬푃
∙¬푃∧푇
5. Prove using Axioms 1.2.8.
(a) ⊢푃→푃
(b) ⊢¬¬푃→푃
(c) ⊢푃→(푃→[푄→푃])
(d) ¬푃⊢푃→푄
(e) 푃→푄, 푄→푅⊢푃→푅(Do not use HS.)
(f)
푃→푄, ¬푄⊢¬푃(Do not use MT.)

Section 1.3 REPLACEMENT
31
6. Prove. Axioms 1.2.8 are not required.
(a) 푃→푄, 푃∨(푅→푆), ¬푄⊢푅→푆
(b) 푃→푄, 푄→푅, ¬푅⊢¬푃
(c) 푃→푄, 푅→푆, ¬푄∨¬푆⊢¬푃∨¬푅
(d) [푃→(푄→푅)] ∧[푄→(푅→푃)], 푃∨푄, ¬(푄→푅), ¬푃⊢¬푅
(e) 푃→푄→(푅→푆), 푆→푇, 푃→푄, 푅⊢푇
(f)
푃→푄∧푅, 푄∨푆→푇∧푈, 푃⊢푇
(g) 푃→푄∧푅, ¬(푄∧푅), 푄∧푅∨(¬푃→푆) ⊢푆
(h) 푃∨푄→¬푅∧¬푆, 푄→푅, 푃⊢¬푄
(i)
푁→푃, 푃∨푄∨푅→푆∨푇, 푆∨푇→푇, 푁⊢푇
(j)
푃→푄, 푄→푅, 푅→푆, 푆→푇, 푃∨푅, ¬푅⊢푇
(k) 푃∨푄→푅∨푆, (푅→푇) ∧(푆→푈), 푃, ¬푇⊢푈
(l)
푃→푄, 푄→푅, 푅→푆, (푃∨푄) ∧(푅∨푆) ⊢푄∨푆
(m) 푃∨¬푄∨푅→(푆→푃), 푃∨¬푄→(푃→푅), 푃⊢푆→푅
1.3
REPLACEMENT
There are times when writing a formal proof that we want to substitute one propositional
form for another. This happens when two propositional forms have the same valuations.
It also happens when a particular sentence pattern should be able to replace another
sentence pattern. We give rules in this section that codify both ideas.
Semantics
Consider the propositional form ¬(푃∨푄). Its valuation equals T when it is not the
case that 헏(푃) = T or 헏(푄) = T (Deﬁnition 1.1.9). This implies that 헏(푃) = F and
헏(푄) = F, so 헏(¬푃∧¬푄) = T. Conversely, the valuation of ¬푃∧¬푄is T implies that
the valuation of ¬(푃∨푄) is T for similar reasons. Since no additional premises were
assumed in this discussion, we conclude that
헏(¬[푃∨푄]) = 헏(¬푃∧¬푄),
(1.3)
and this means that
¬(푃∨푄) ↔¬푃∧¬푄
is a tautology. There is a name for this.
DEFINITION 1.3.1
Two propositional forms 푝and 푞are logically equivalent if ⊨푝↔푞.
Observe that Deﬁnition 1.3.1 implies the following result.
THEOREM 1.3.2
All tautologies are logically equivalent, and all contradictions are logically equiv-
alent.

32
Chapter 1 PROPOSITIONAL LOGIC
Because of (1.3), we can use a truth table to prove logical equivalence.
EXAMPLE 1.3.3
Prove: ⊨¬(푃∨푄) ↔¬푃∧¬푄.
푃
푄
푃∨푄
¬(푃∨푄)
¬푃
¬푄
¬푃∧¬푄
T
T
T
F
F
F
F
T
F
T
F
F
T
F
F
T
T
F
T
F
F
F
F
F
T
T
T
T
EXAMPLE 1.3.4
Because ⊨푃→푄↔¬푃∨푄, we can replace 푃→푄with ¬푃∨푄, and vice
versa, at any time. When this is done, the resulting propositional form is logically
equivalent to the original. For example,
⊨푄∧(푃→푄) ↔푄∧(¬푃∨푄).
To see this, examine the truth table
푃
푄
푃→푄
푸∧(푷→푸)
¬푃
¬푃∨푄
푸∧(¬푷∨푸)
T
T
T
T
F
T
T
T
F
F
F
F
F
F
F
T
T
T
T
T
T
F
F
T
F
T
T
F
EXAMPLE 1.3.5
Consider 푅∧(푃→푄). Since ⊨푃→푄↔¬푄→¬푃[Exercise 2(f)], we can
replace 푃→푄with ¬푄→¬푃giving
⊨푅∧(푃→푄) ↔푅∧(¬푄→¬푃).
When studying an implication, we sometimes need to investigate the diﬀerent ways
that its antecedent and consequent relate to each other.
DEFINITION 1.3.6
The converse of a given implication is the conditional proposition formed by
exchanging the antecedent and consequent of the implication (Figure 1.2).
DEFINITION 1.3.7
The contrapositive of a given implication is the conditional proposition formed
by exchanging the antecedent and consequent of the implication and then replac-
ing them with their negations (Figure 1.3).

Section 1.3 REPLACEMENT
33
If      the antecedent,      then      the consequent.
If        the consequent,         then       the antecedent.
Figure 1.2
Writing the converse.
If      the antecedent,      then      the consequent.
If       not the consequent,      then       not the antecedent.
Figure 1.3
Writing the contrapositive.
For example, the converse of
if rectangles have four sides, squares have for sides
is
if squares have four sides, rectangles have four sides,
and its contrapositive is
if squares do not have four sides, rectangles do not have four sides.
Notice that a biconditional proposition is simply the conjunction of a conditional with
its converse.
EXAMPLE 1.3.8
The propositional form 푃→푄has 푄→푃as its converse and ¬푄→¬푃as its
contrapositive. The ﬁrst and fourth columns on the right of the next truth table
show ⊨푃→푄↔¬푄→¬푃, while ̸⊨푃→푄↔푄→푃is shown by the ﬁrst
and last columns.
푃
푄
푃→푄
¬푄
¬푃
¬푄→¬푃
푄→푃
T
T
T
F
F
T
T
T
F
F
T
F
F
T
F
T
T
F
T
T
F
F
F
T
T
T
T
T

34
Chapter 1 PROPOSITIONAL LOGIC
Syntactics
If we limit our proofs to Inference Rules 1.2.10, we quickly realize that there will be
little of interest that we can prove. We would have no reason on which to base such
clear inferences as
푃⊢푄∨푃
or
푃∨푄, ¬푄⊢푃.
To ﬁx this, we expand our collection of inference rules with a new type.
Suppose that we know that the form 푝∧푞can replace 푞∧푝at any time and vice
versa. For example, in the propositional form
푃∧푄→푅,
(1.4)
푃∧푄can be replaced with 푄∧푃so that we can write the new form
푄∧푃→푅.
(1.5)
This type of rule is called a replacement rule and is written using the ⇔symbol. For
example, the replacement rule that allowed us to write (1.5) from (1.4) is
푝∧푞⇔푞∧푝.
Similarly, when the replacement rule
¬(푝∧푞) ⇔¬푝∨¬푞
is applied to 푃∨(¬푄∨¬푅), the result is 푃∨¬(푄∧푅). We state without proof the
standard replacement rules.
REPLACEMENT RULES 1.3.9
Let 푝, 푞, and 푟be propositional forms.
∙Associative Laws [Assoc]
푝∧푞∧푟⇔푝∧(푞∧푟)
푝∨푞∨푟⇔푝∨(푞∨푟)
∙Commutative Laws [Com]
푝∧푞⇔푞∧푝
푝∨푞⇔푞∨푝
∙Distributive Laws [Distr]
푝∧(푞∨푟) ⇔푝∧푞∨푝∧푟
푝∨푞∧푟⇔(푝∨푞) ∧(푝∨푟)
∙Contrapositive Law [Contra]
푝→푞⇔¬푞→¬푝

Section 1.3 REPLACEMENT
35
∙Double Negation [DN]
푝⇔¬¬푝
∙De Morgan’s Laws [DeM]
¬(푝∧푞) ⇔¬푝∨¬푞
¬(푝∨푞) ⇔¬푝∧¬푞
∙Idempotency [Idem]
푝∧푝⇔푝
푝∨푝⇔푝
∙Material Equivalence [Equiv]
푝↔푞⇔(푝→푞) ∧(푞→푝)
푝↔푞⇔푝∧푞∨¬푝∧¬푞
∙Material Implication [Impl]
푝→푞⇔¬푝∨푞
∙Exportation [Exp]
푝∧푞→푟⇔푝→(푞→푟).
A replacement rule is used in a formal proof by appealing to the next inference rule.
INFERENCE RULE 1.3.10
For all propositional forms 푝and 푞, if 푝if obtained from 푞using a replacement
rule, 푝⇒푞and 푞⇒푝.
As with Inference Rules 1.2.10, the replacement rule used when applying Inference
Rule 1.3.10 must be used exactly as stated. This includes times when it seems unnec-
essary because it appears obvious. For example, 푃∨푄does not follow directly from
¬푃→푄using Impl. Instead, include a use of DN to give the correct sequence,
¬푃→푄, ¬¬푃∨푄, 푃∨푄.
Similarly, the inference rule Add does not allow for 푄∨푃to be derived from 푃. Instead,
we derive 푃∨푄. Follow this by Com to conclude 푄∨푃.
When writing formal proofs that appeal to Inference Rule 1.3.10, do not cite that
particular rule but reference the replacement rule’s abbreviation using Replacement
Rule 1.3.9 and the line which serves as a premise to the replacement. We use this
practice in the following examples.
EXAMPLE 1.3.11
Although it is common practice to move parentheses freely when solving equa-
tions, inferences such as
푃∧푄∧(푅∧푆) ⊢푃∧(푄∧푅) ∧푆

36
Chapter 1 PROPOSITIONAL LOGIC
must be carefully demonstrated. Fortunately, this example only requires two ap-
plications of the associative law. Using the boxes as a guide, notice that
푃∧푄∧( 푅∧푆)
is of the same form as the right-hand side of the associative law. Hence, we can
remove the parentheses to obtain
푃∧푄∧푅∧푆.
Next, view the propositional form as
푃∧푄∧푅∧푆.
One more application within the ﬁrst box yields the result,
푃∧(푄∧푅) ∧푆.
We may, therefore, write a sequence of inferences by Inference Rule 1.3.10,
푃∧푄∧(푅∧푆) ⇒(푃∧푄∧푅) ∧푆⇒[푃∧(푄∧푅)] ∧푆,
and we have a proof of [푃∧(푄∧푅)] ∧푆from 푃∧푄∧(푅∧푆):
1.
푃∧푄∧(푅∧푆)
Given
2.
푃∧푄∧푅∧푆
1 Assoc
3.
푃∧(푄∧푅) ∧푆
2 Assoc
EXAMPLE 1.3.12
Prove: 푅∧푆⊢¬푅→푃
1.
푅∧푆
Given
2.
푅
1 Simp
3.
푅∨푃
2 Add
4.
¬¬푅∨푃
3 DN
5.
¬푅→푃
4 Impl
EXAMPLE 1.3.13
Prove: 푃→푄, 푅→푄⊢푃∨푅→푄
1.
푃→푄
Given
2.
푅→푄
Given
3.
(푃→푄) ∧(푅→푄)
1, 2 Conj
4.
(¬푃∨푄) ∧(¬푅∨푄)
3 Impl
5.
(푄∨¬푃) ∧(푄∨¬푅)
4 Com

Section 1.3 REPLACEMENT
37
6.
푄∨¬푃∧¬푅
5 Dist
7.
¬푃∧¬푅∨푄
6 Com
8.
¬(푃∨푅) ∨푄
7 DeM
9.
푃∨푅→푄
8 Impl
EXAMPLE 1.3.14
Prove: 푃∧푄∨푅∧푆⊢(푃∨푆) ∧(푄∨푅)
1.
푃∧푄∨푅∧푆
Given
2.
(푃∧푄∨푅) ∧(푃∧푄∨푆)
1 Dist
3.
(푅∨푃∧푄) ∧(푆∨푃∧푄)
2 Com
4.
(푅∨푃) ∧(푅∨푄) ∧[(푆∨푃) ∧(푆∨푄)]
3 Dist
5.
(푅∨푄) ∧(푅∨푃) ∧[(푆∨푃) ∧(푆∨푄)]
4 Com
6.
(푅∨푄) ∧([푅∨푃] ∧[(푆∨푃) ∧(푆∨푄)])
5 Assoc
7.
푅∨푄
6 Simp
8.
(푆∨푃) ∧(푆∨푄) ∧[(푅∨푄) ∧(푅∨푃)]
5 Com
9.
(푆∨푃) ∧(푆∨푄)
8 Simp
10.
푆∨푃
9 Simp
11.
(푆∨푃) ∧(푅∨푄)
7, 10 Conj
12.
(푃∨푆) ∧(푄∨푅)
11 Com
EXAMPLE 1.3.15
Both ⊢푃→푃and ⊢푃∨¬푃. Here is the proof for the second theorem:
1.
푃→(푃→푃)
FL1
2.
¬푃∨(¬푃∨푃)
1 Impl
3.
(¬푃∨¬푃) ∨푃
2 Assoc
4.
¬푃∨푃
3 Idem
5.
푃∨¬푃
4 Com
This proof can be generalized to any propositional form 푝, so that we also have
⊢푝→푝and ⊢푝∨¬푝.
The theorem 푝∨¬푝is known as the law of the excluded middle, and the theorem
¬(푝∧¬푝) is the law of noncontradiction. Notice that by De Morgan’s law with Com
and DN, we have for all propositional forms 푝
⊢(푝∨¬푝) ↔¬(푝∧¬푝).
Exercises
1. The inverse of a given implication is the contrapositive of the implication’s con-
verse. Write the converse, contrapositive, and inverse for each conditional proposition
in Exercise 1.1.2.

38
Chapter 1 PROPOSITIONAL LOGIC
2. Prove using truth tables.
(a) ⊨푃∨¬푃↔푃→푃
(b) ⊨푃∨¬푃↔푃∨푄∨¬(푃∧푄)
(c) ⊨푃∧푄↔(푃↔푄) ∧(푃∨푄)
(d) ⊨푅∧(푃→푄) ↔푅∧(¬푄→¬푃)
(e) ⊨푃∧푄→푅↔푃∧¬푅→¬푄
(f)
⊨푃→푄↔¬푄→¬푃
(g) ⊨푃→푄∧푅↔(푃→푄) ∧(푃→푅)
(h) ⊨푃→푄→(푆→푅) ↔(푃→푄) ∧푆→푅
3. A propositional form is in disjunctive normal form if it is a disjunction of con-
junctions. For example, the propositional form 푃∧(¬푄∨푅) is logically equivalent
to
(푃∧푄∧푅) ∨(푃∧¬푄∧¬푅) ∨(¬푃∧푄∧¬푅),
which is in disjunctive normal form. Find propositional forms in disjunctive normal
form that are logically equivalent to each of the following.
(a) 푃∨푄∧(푃∨¬푅)
(b) (푃∨푄) ∧(¬푃∨¬푄)
(c) (푃∧¬푄∨푅) ∧(푄∧푅∨푃∧¬푅)
(d) 푃∨(¬푄∨[푃∧¬푅∨푃∧¬푄])
4. Identify the rule from Replacement Rule 1.3.9.
(a) (푃→푄) ∨(푄→푅) ∨푆⇔(푃→푄) ∨([푄→푅] ∨푆)
(b) ¬¬푃↔푄∧푅⇔푃↔푄∧푅
(c) 푃∨푄∨푅⇔푄∨푃∨푅
(d) ¬푃∧¬(푄∨푅) ⇔¬(푃∨[푄∨푅])
(e) ¬(푃∨푄) ∨푅⇔푃∨푄→푅
(f)
푃↔푄→푅⇔푃∧(푄→푅) ∨¬푃∧¬(푄→푅)
(g) 푃∨푄↔푄∧푄⇔푃∨푄↔푄
(h) 푃∧푄∧푅⇔푅∧(푃∧푄)
(i)
(푃∨푄) ∧(푄∨푅) ⇔(푃∨푄) ∧푄∨(푃∨푄) ∧푅
(j)
(푃∧[푅→푄]) →푆⇔푃→(푅→푄→푆)
5. For each given propositional form 푝, ﬁnd another propositional form 푞such that
푝⇔푞using Replacement Rules 1.3.9.
(a) ¬¬푃
(b) 푃∨푄
(c) 푃→푄
(d) ¬(푃∧푄)
(e) (푃↔푄) ∧(¬푃↔푄)
(f)
(푃→푄) ∨(푄→푆)
(g) (푃→푄) ∨푃
(h) ¬(푃→푄)
(i)
(푃→푄) ∧(푄↔푅)

Section 1.3 REPLACEMENT
39
(j)
(푃∨¬푄) ↔푇∧푄
(k) 푃∨(¬푄↔푇) ∧푄
6. Arrange each collection of propositional forms into a proof for the given deduction
and supply the appropriate reasons.
(a) 푃∨푄→푅⊢(푃→푅) ∧(푄→푅)
∙푅∨¬푃∧¬푄
∙(¬푃∨푅) ∧(¬푄∨푅)
∙¬(푃∨푄) ∨푅
∙(푃→푅) ∧(푄→푅)
∙(푅∨¬푃) ∧(푅∨¬푄)
∙¬푃∧¬푄∨푅
∙푃∨푄→푅
(b) ¬(푃∧푄) →푅∨푆, ¬푃, ¬푆⊢푅
∙¬(푃∧푄) →푅∨푆
∙¬푆
∙푆∨푅
∙푅
∙¬(푃∧푄)
∙¬푃
∙푅∨푆
∙¬푃∨¬푄
(c) 푃→(푄→푅), ¬푃→푆, ¬푄→푇, 푅→¬푅⊢¬푇→푆
∙푆∨푇
∙¬푅∨¬푅
∙푅→¬푅
∙¬푅
∙¬(푃∧푄)
∙푇∨푆
∙¬¬푇∨푆
∙¬푃∨¬푄
∙푃∧푄→푅
∙푃→(푄→푅)
∙¬푃→푆
∙¬푄→푇
∙¬푇→푆
∙(¬푃→푆) ∧(¬푄→푇)
7. Prove.
(a) ¬푃⊢푃→푄
(b) 푃⊢¬푄→푃
(c) ¬푄∨(¬푅∨¬푃) ⊢푃→¬(푄∧푅)
(d) 푃→푄⊢푃∧푅→푄

40
Chapter 1 PROPOSITIONAL LOGIC
(e) 푃→푄∧푅⊢푃→푄
(f)
푃∨푄→푅⊢¬푅→¬푄
(g) 푃→(푄→푅) ⊢푄∧¬푅→¬푃
(h) 푃→(푄→푅) ⊢푄→(푃→푅)
(i)
푃∧푄∨푅∧푆⊢¬푆→푃∧푄
(j)
푄→푅⊢푃→(푄→푅)
(k) 푃→¬(푄→푅) ⊢푃→¬푅
(l)
푃∨(푄∨푅∨푆) ⊢(푃∨푄) ∨(푅∨푆)
(m) 푄∨푃→푅∧푆⊢푄→푅
(n) 푃↔푄∧푅⊢푃→푄
(o) 푃↔푄∨푅⊢푄→푃
(p) 푃∨푄∨푅→푆⊢푄→푆
(q) (푃∨푄) ∧(푅∨푆) ⊢푃∧푅∨푃∧푆∨(푄∧푅∨푄∧푆)
(r)
푃∧(푄∨푅) →푄∧푅⊢푃→(푄→푅)
(s) 푃↔푄, ¬푃⊢¬푄
(t)
푃→푄→푅, ¬푅⊢¬푄
(u) 푃→(푄→푅), 푅→푆∧푇⊢푃→(푄→푇)
(v) 푃→(푄→푅), 푅→푆∨푇⊢(푃→푆) ∨(푄→푇)
(w) 푃→푄, 푃→푅⊢푃→푄∧푅
(x) 푃∨푄→푅∧푆, ¬푃→(푇→¬푇), ¬푅⊢¬푇
(y) (푃→푄) ∧(푅→푆), 푃∨푅, (푃→¬푆) ∧(푅→¬푄) ⊢푄↔¬푆
(z) 푃∧(푄∧푅), 푃∧푅→푆∨(푇∨푀), ¬푆∧¬푇⊢푀
1.4
PROOF METHODS
The methods of Sections 1.2 and 1.3 provide a good start for writing formal proofs.
However, in practice we rarely limit ourselves to these rules. We often use inference
rules that give a straightforward way to prove conditional propositions and allow us to
prove a proposition when it is easier to disprove its negation. In both the cases, the new
inference rules will be justiﬁed using the rules we already know.
Deduction Theorem
Because of Axioms 1.2.8, not all of the inference rules are needed to write the proofs
found in Sections 1.2 and 1.3. This motivates the next deﬁnition.
DEFINITION 1.4.1
Let 푝and 푞be propositional forms. The notation
푝⊢∗푞
means that there exists a formal proof of 푞from 푝using only Axioms 1.2.8, MP,
and Inference Rule 1.3.10, and the notation
⊢∗푞

Section 1.4 PROOF METHODS
41
means that there exists a formal proof of 푞from Axioms 1.2.8 using only MP and
Inference Rule 1.3.10
For example, 푃, 푄, ¬푃∨(푄→푅) ⊢∗푅because
1.
푃
Given
2.
푄
Given
3.
¬푃∨(푄→푅)
Given
4.
푃→(푄→푅)
3 Impl
5.
푄→푅
1, 4 MP
6.
푅
2, 5 MP
is a formal proof using MP and Impl as the only inference rules.
We now observe that the propositional forms that can be proved using the full col-
lection of rules from Sections 1.2 and 1.3 are exactly the propositional forms that can
be proved when all rules are deleted from Inference Rules 1.2.10 except for MP.
THEOREM 1.4.2
For all propositional forms 푝and 푞, 푝⊢∗푞if and only if 푝⊢푞.
PROOF
Trivially, 푝⊢∗푞implies 푝⊢푞, so suppose that 푝⊢푞. We show that the remain-
ing parts of Inference Rules 1.2.10 are equivalent to using only Axioms 1.2.8,
MP, and Replacement Rules 1.3.9. We show three examples and leave the proofs
of the remaining inference rules to Exercise 6. The proof
1.
푝→푞
Given
2.
¬푞
Given
3.
¬¬푝→¬¬푞
DN
4.
¬¬푝→¬¬푞→(¬푞→¬푝)
FL3
5.
¬푞→¬푝
3, 4 MP
6.
¬푝
2, 5 MP
shows that
푝→푞, ¬푞⊢∗¬푝.
Thus, we do not need MT. The proof
1.
푝
Given
2.
푝→(¬푞→푝)
FL1
3.
¬푞→푝
1, 2 MP
4.
¬¬푞∨푝
3 Impl
5.
푞∨푝
4 DN
6.
푝∨푞
5 Com
shows that
푝⊢∗푝∨푞,

42
Chapter 1 PROPOSITIONAL LOGIC
so we do not need Add. This implies that we can use Add to demonstrate that
푝→푞, 푞→푟⊢∗푝→푟.
The proof is as follows:
1.
푝→푞
Given
2.
푞→푟
Given
3.
¬푞∨푟
2 Impl
4.
¬푞∨푟∨¬푝
3 Add
5.
¬푝∨(¬푞∨푟)
4 Com
6.
푝→(푞→푟)
5 Impl
7.
푝→(푞→푟) →(푝→푞→[푝→푟])
FL2
8.
푝→푞→(푝→푟)
6, 7 MP
9.
푝→푟
1, 8 MP
This implies that we do not need HS.
At this point, there is an obvious question: If only MP is needed from Inference
Rules 1.2.10, why were the other rules included? The answer is because the other
inference rules are examples of common reasoning and excluding them would introduce
unnecessary complications to the formal proofs. Try reproving some of the deductions
of Section 1.2 with only MP and the axioms to conﬁrm this.
When a formal proof in Section 1.3 involved proving an implication, the replacement
rule Impl would often appear in the proof. However, as we know from geometry, this
is not the typical strategy used to prove an implication. What is usually done is that the
antecedent is assumed and then the consequent is shown to follow. That this procedure
justiﬁes the given conditional is the next theorem. Its proof requires a lemma.
LEMMA 1.4.3
Let 푝and 푞be propositional forms. If ⊢∗푞, then ⊢∗푝→푞.
PROOF
Let ⊢∗푞. By FL1, we have that ⊢∗푞→(푝→푞), so ⊢∗푝→푞follows by MP.
THEOREM 1.4.4 [Deduction]
For all propositional forms 푝and 푞, 푝⊢푞if and only if ⊢푝→푞.
PROOF
Let 푝and 푞be propositional forms. Assume that ⊢푝→푞, so there exists propo-
sitional forms 푟0, 푟1, … , 푟푛−1 such that
푟0, 푟1, … , 푟푛−1, 푝→푞
is a proof, where 푟0 is an axiom, 푟푖is an axiom or 푟0, 푟1, … , 푟푖−1 ⇒푟푖for 푖> 0,
and 푝→푞follows from 푟0, 푟1, … , 푟푛−1. Then,

Section 1.4 PROOF METHODS
43
푝, 푟0, 푟1, … , 푟푛−1, 푝→푞, 푞
is also a proof, where the last inference is due to MP. Therefore, 푝⊢푞.
By Theorem 1.4.2, to prove the converse, we only need to prove that
if 푝⊢∗푞, then ⊢∗푝→푞.
Assume 푝⊢∗푞. First note that if 푞is an axiom, then ⊢∗푞, so ⊢∗푝→푞by
Lemma 1.4.3. Therefore, assume that 푞is not an axiom. We begin by checking
four cases.
∙Suppose that the proof has only one propositional form. In this case, we
have that 푝= 푞, so the inference is of the form 푝⊢∗푝. By FL1,
⊢∗푝→(푝→푝).
Because
푝→(푝→푝) ⇒¬푝∨(¬푝∨푝)
⇒(¬푝∨¬푝) ∨푝
⇒¬푝∨푝
⇒푝→푝,
we conclude that ⊢∗푝→푝.
∙Next, suppose the proof has two propositional forms and cannot be reduced
to the ﬁrst case. This implies that 푝⊢∗푞by a single application of a
replacement rule. Thus,
푝→(¬푞→푝) ⊢∗푝→(¬푞→푞)
by a single application of the same replacement rule. Therefore,
푝→(¬푞→푝) ⇒푝→(¬푞→푞)
⇒푝→(¬¬푞∨푞)
⇒푝→(푞∨푞)
⇒푝→푞.
This implies that ⊢∗푝→푞.
∙We now consider the case when the proof of 푝⊢∗푞has three propositional
forms and 푞follows by a rule of replacement. Let 푝, 푟, 푞be the proof. This
implies that 푝⊢∗푟, which implies
⊢∗푝→푟
(1.6)
because either 푟is an axiom and Lemma 1.4.3 applies or the previous two
cases apply. If 푞follows from 푝by a rule of replacement, then ⊢푝→푞by

44
Chapter 1 PROPOSITIONAL LOGIC
the previous case, so assume that 푞follows from 푟by a rule of replacement.
Thus, ⊢∗푟→푞, which implies by Lemma 1.4.3 that
⊢∗푝→(푟→푞).
(1.7)
By FL2,
⊢∗푝→(푟→푞) →(푝→푟→[푝→푞]).
(1.8)
Therefore, by (1.7) and (1.8) with MP,
⊢∗푝→푟→(푝→푞),
(1.9)
and by (1.6) and (1.9) with MP,
⊢∗푝→푞.
∙Again, let the proof have three propositional forms and write it as 푝, 푠, 푞.
Suppose that the inference that leads to 푞is MP. This means that 푟and
푟→푞are in the proof. Because either 푝= 푟and 푝⊢∗푟→푞or 푝= 푟→푞
and 푝⊢∗푟,
⊢∗푝→푟
and
⊢∗푝→(푟→푞).
Thus, as in the previous case, using (1.8), we obtain ⊢∗푝→푞.
These four cases exhaust the ways by which 푞can be proved from 푝with a
proof with at most three propositional forms. Therefore, since these cases can
be generalized to proofs of arbitrary length (Exercise 7), we conclude that 푝⊢푞
implies ⊢푝→푞.
The deduction theorem (1.4.4) yields the next result. Its proof is left to Exercise 8.
COROLLARY 1.4.5
For all propositional forms 푝0, 푝1, … , 푝푛−1, 푞, 푟,
푝0, 푝1, … , 푝푛−1, 푞⊢푟
if and only if
푝0, 푝1, … , 푝푛−1 ⊢푞→푟.
Direct Proof
Most propositions that mathematicians prove are implications. For example,
if a function is diﬀerentiable at a point, it is continuous at that same point.
As we know, this means that whenever the function 푓is diﬀerentiable at 푥= 푎, it
must also be the case that 푓is continuous at 푥= 푎. Proofs of conditionals like this

Section 1.4 PROOF METHODS
45
are typically very diﬃcult if we are only allowed to use Inference Rules 1.2.10 and Re-
placement Rules 1.3.9. Fortunately, in practice another inference rule is used. To prove
the diﬀerentiability result, what is usually done is that 푓is assumed to be diﬀerential
at 푥= 푎and then a series of steps that lead to the conclusion that 푓is continuous at
푥= 푎are followed. We copy this strategy in our formal proofs using the next rule.
Sometimes known as conditional proof, this inference rule follows by Corollary 1.4.5
and Theorem 1.2.14.
INFERENCE RULE 1.4.6 [Direct Proof (DP)]
For propositional forms 푝0, 푝1, … , 푝푛−1, 푞, 푟,
if 푝0, 푝1, … , 푝푛−1, 푞⊢푟, then 푝0, 푝1, … , 푝푛−1 ⇒푞→푟.
PROOF
Suppose 푝0, 푝1, … , 푝푛−1, 푞⊢푟. Then, by Corollary 1.4.5,
푝0, 푝1, … , 푝푛−1 ⊢푞→푟.
Therefore, by Simp and Com,
푝0 ∧푝1 ∧· · · ∧푝푛−1 ⊢푞→푟,
so by Theorem 1.2.14,
푝0 ∧푝1 ∧· · · ∧푝푛−1 ⇒푞→푟.
Finally, we have by Conj and Theorem 1.2.14 that
푝0, 푝1, … , 푝푛−1 ⇒푞→푟.
To see how this works, let us use direct proof to prove
푃∨푄→(푅∧푆) ⊢푃→푅.
To do this, we ﬁrst prove
푃∨푄→(푅∧푆), 푃⊢푅.
Here is the proof:
1.
푃∨푄→(푅∧푆)
Given
2.
푃
Given
3.
푃∨푄
2 Add
4.
푅∧푆
1, 3 MP
5.
푅
4 Simp

46
Chapter 1 PROPOSITIONAL LOGIC
Therefore, by Inference Rule 1.4.6,
푃∨푄→(푅∧푆) ⇒푃→푅.
A proof of the original deduction can now be written as
1.
푃∨푄→(푅∧푆)
Given
2.
푃→푅
1 DP
However, instead of writing the ﬁrst proof oﬀto the side, it is typically incorporated
into the proof as follows:
1.
푃∨푄→(푅∧푆)
Given
2.
→푃
Assumption
3.
푃∨푄
2 Add
4.
푅∧푆
1, 3 MP
5.
푅
4 Simp
6.
푃→푅
2–5 DP
The proof that 푃infers 푅is a subproof of the main proof. To separate the proposi-
tional forms of the subproof from the rest of the proof, they are indented with a vertical
line. The line begins with the assumption of 푃in line 2 as an additional premise.
Hence, its reason is Assumption. This assumption can only be used in the subproof.
Consider it a local hypothesis. It is only used to prove 푃→푅. If we were allowed to
use it in other places of the proof, we would be proving a theorem that had diﬀerent
premises than those that were given. Similarly, all lines within the subproof cannot be
referenced from the outside. We use the indentation to isolate the assumption and the
propositional forms that follow from it. When we arrive at 푅, we know that we have
proved 푃→푅. The next line is this propositional form. It is entered into the proof
with the reason DP. The lines that are referenced are the lines of the subproof.
EXAMPLE 1.4.7
Prove: 푃→¬푄, ¬푅∨푆⊢푅∨푄→(푃→푆)
1.
푃→¬푄
Given
2.
¬푅∨푆
Given
3.
→푅∨푄
Assumption
4.
→푃
Assumption
5.
¬푄
1, 4 MP
6.
푄∨푅
3 Com
7.
푅
5, 6 DS
8.
¬¬푅
7 DN
9.
푆
2, 8 DS
10.
푃→푆
4–9 DP
11.
(푅∨푄) →(푃→푆)
3–10 DP

Section 1.4 PROOF METHODS
47
EXAMPLE 1.4.8
Prove: 푃∧푄→푅→푆, ¬푄∨푅⊢푆
1.
푃∧푄→푅→푆
Given
2.
¬푄∨푅
Given
3.
→푃∧푄
Assumption
4.
푄∧푃
3 Com
5.
푄
4 Simp
6.
¬¬푄
5 DN
7.
푅
2, 6 DS
8.
푃∧푄→푅
3–7 DP
9.
푆
1, 8 MP
EXAMPLE 1.4.9
Prove: ⊢푃∨¬푃
1.
→푃
Assumption
2.
푃→푃
1 DP
3.
¬푃∨푃
2 Impl
4.
푃∨¬푃
3 Com
Note that lines 1–2 prove ⊢푃→푃.
Indirect Proof
When direct proof is either too diﬃcult or not appropriate, there is another common
approach to writing formal proofs. Sometimes going by the name of proof by contra-
diction or reductio ad absurdum, this inference rule can also be used to prove propo-
sitional forms that are not implications.
INFERENCE RULE 1.4.10 [Indirect Proof (IP)]
For all propositional forms 푝and 푞,
¬푞→(푝∧¬푝) ⇒푞.
PROOF
Notice that instead of repeating the argument from Example 1.4.9 in this proof,
the example is simply cited as the reason on line 2.
1.
¬푞→(푝∧¬푝)
Given
2.
푝→푝
Example 1.4.9
3.
¬(푝∧¬푝) →¬¬푞
1 Contra
4.
¬(푝∧¬푝) →푞
3 DN

48
Chapter 1 PROPOSITIONAL LOGIC
5.
¬푝∨¬¬푝→푞
4 DeM
6.
¬푝∨푝→푞
5 DN
7.
푝→푝→푞
6 Impl
8.
푞
2, 7 MP
The rule follows from Theorem 1.2.14.
To use indirect proof, assume each premise and assume the negation of the con-
clusion. Then, proceed with the proof until a contradiction is reached. (In Inference
Rule 1.4.10, the contradiction is represented by 푝∧¬푝.) At this point, deduce the
original conclusion.
EXAMPLE 1.4.11
Prove: 푃∨푄→푅, 푅∨푆→¬푃∧푇⊢¬푃.
1.
푃∨푄→푅
Given
2.
푅∨푆→¬푃∧푇
Given
3.
→¬¬푃
Assumption
4.
푃
3 DN
5.
푃∨푄
4 Add
6.
푅
1, 5 MP
7.
푅∨푆
6 Add
8.
¬푃∧푇
2, 7 MP
9.
¬푃
8 Simp
10.
푃∧¬푃
4, 9 Conj
11.
¬푃
3–10 IP
Since IP involves proving an implication, the formal proof takes the same form
as a proof involving DP.
Indirect proof can also be nested within another indirect subproof. As with direct proof,
we cannot appeal to lines within a subproof from outside of it.
EXAMPLE 1.4.12
Prove: 푃→푄∧푅, 푄→푆, ¬푃→푆⊢푆.
1.
푃→푄∧푅
Given
2.
푄→푆
Given
3.
¬푃→푆
Given
4.
→¬푆
Assumption
5.
¬푄
2, 4 MT
6.
→푃
Assumption
7.
푄∧푅
1, 6 MP
8.
푄
7 Simp
9.
푄∧¬푄
5, 8 Conj

Section 1.4 PROOF METHODS
49
10.
¬푃
6-9 IP
11.
푆
3, 10 MP
12.
푆∧¬푆
4, 11 Conj
13.
푆
4–12 IP
Notice that line 11 was not the end of the proof since it was within the ﬁrst sub-
proof. It followed under the added hypothesis of ¬푆.
EXAMPLE 1.4.13
Prove: 푃→푅⊢푃∧푄→푅∨푆.
1.
푃→푅
Given
2.
→푃∧푄
Assumption
3.
→¬푅
Assumption
4.
¬푃
1, 3 MT
5.
푃
2 Simp
6.
푃∧¬푃
4, 5 Conj
7.
푅
3-6 IP
8.
푅∨푆
7 Add
9.
푃∧푄→푅∨푆
2–8 DP
Exercises
1. Find all mistakes in the given proofs.
(a) “푃∨푄→¬푅, 푅→¬푄→푆∨푄⊢푆”
Attempted Proof
1.
푃∨푄→¬푅
Given
2.
푅→¬푄→푆∨푄
Given
3.
→푅
Assumption
4.
¬¬푅
Assumption
5.
¬(푃∨푄)
1, 4 MT
6.
¬푃∧¬푄
5 DeM
7.
¬푄
6 Simp
8.
푅→¬푄
3–7 DP
9.
푆∨푄
2, 8 MP
10.
푄∨푆
9 Com
11.
푆
7, 10 DS
(b) “¬푃∨푄⊢푃→푄→푅”
Attempted Proof
1.
¬푃∨푄
Given
2.
→푃
Assumption

50
Chapter 1 PROPOSITIONAL LOGIC
3.
¬¬푃
2 DN
4.
푄
1, 3 DS
5.
푃→푄
2–4 DP
6.
푅
MP
7.
푃→푄→푅
2–6 DP
(c) “¬푅∧푆, ¬푃∨푄→푅⊢¬푃∨푄→푄”
Attempted Proof
1.
¬푅∧푆
Given
2.
¬푃∨푄→푅
Given
3.
→¬푃
Assumption
4.
→¬푃∨푄
Assumption
5.
푅
2, 3 MP
6.
¬푅
1 Simp
7.
푅∧¬푅
5, 6 Conj
8.
푃
4–7 IP
9.
¬¬푃
8 DN
10.
푄
4, 9 DS
11.
¬푃∨푄→푄
3–10 DP
2. Prove using direct proof.
(a) 푃→푄∧푅⊢푃→푄
(b) 푃∨푄→푅⊢푃→푅
(c) 푃∨(푄∨푅) →푆⊢푄→푆
(d) 푃→푄, 푅→푄⊢푃∨푅→푄
(e) 푃→푄, 푃→푅⊢푃→푄∧푅
(f)
푃→(푄→푅) ⊢푄∧¬푅→¬푃
(g) 푅→¬푆⊢푃∧푄→(푅→¬푆)
(h) 푃→(푄→푅) ⊢푄→(푃→푅)
(i)
푃→(푄→푅), 푄→(푅→푆) ⊢푃→(푄→푆)
(j)
푃→(푄→푅), 푅→푆∧푇⊢푃→(푄→푇)
(k) 푃↔푄∧푅⊢푃→푄
(l)
푃∧푄∨푅→푄∧푅⊢푃→(푄→푅)
3. Prove using indirect proof.
(a) 푃→푄, 푄→푅, ¬푅⊢¬푃
(b) 푃∨푄∧푅, 푃→푆, 푄→푆⊢푆
(c) 푃∨푄∧¬푅, 푃→푆, 푄→푅⊢푆
(d) 푃⇔푄, ¬푃⊢¬푄
(e) 푃∨푄∨푅→푄∧푅⊢¬푃∨푄∧푅
(f)
푃→푄, 푄→푅, 푆→푇, 푃∨푅, ¬푅⊢푇
(g) 푃→¬푄, 푅→¬푆, 푇→푄, 푈→푆, 푃∨푅⊢¬푇∨¬푈

Section 1.5 THE THREE PROPERTIES
51
(h) 푃→푄∧푅, 푄∨푆→푇∧푈, 푃⊢푇
4. Prove using both direct and indirect proof.
(a) 푃→푄, 푃∨(푅→푆), ¬푄⊢푅→푆
(b) 푃→¬(푄→¬푅) ⊢푃→푅
(c) 푃→푄⊢푃∧푅→푄
(d) 푃⇔푄∨푅⊢푄→푃
5. Prove by using direct proof to prove the contrapositive.
(a) 푃→푄, 푅→푆, 푆→푇, ¬푄⊢¬푇→¬(푃∨푅)
(b) 푃∧푄∨푅∧푆⊢¬푆→푃∧푄
(c) 푃∨푄→¬푅, 푆→푅⊢푃→¬푆
(d) ¬푃→¬푄, (¬푅∨푆) ∧(푅∨푄) ⊢¬푆→푃
6. Prove to complete the proof of Theorem 1.4.2.
(a) 푝∨푞, ¬푝⊢∗푞
(b) 푝, 푞⊢∗푝∧푞
(c) (푝→푞) ∧(푟→푠), 푝∨푟⊢∗푞∨푠
(d) (푝→푞) ∧(푟→푠), ¬푞∨¬푠⊢∗¬푝∨¬푟
(e) 푝∧푞⊢∗푝
7. Given there is a proof of 푞from 푝with four propositional forms, prove ⊢푝→푞.
Generalize the proof for 푛propositional forms.
8. Prove Corollary 1.4.5.
9. Can MP be replaced with another inference rule in Deﬁnition 1.4.1 and still have
Theorem 1.4.2 hold true? If so, ﬁnd the inference rules.
10. Can any of the replacement rules be removed from Deﬁnition 1.4.1 and still have
Theorem 1.4.2 hold true? If so, how many can be removed and which ones?
1.5
THE THREE PROPERTIES
We ﬁnish our introduction to propositional logic by showing that this logical system has
three important properties. These are properties that are shared with Euclid’s geometry,
but they are not common to all logical systems.
Consistency
Since we can need to consider inﬁnitely many propositional forms, we now write our
lists of propositional forms as
푝0, 푝1, 푝2, … ,
allowing this sequence to be ﬁnite or inﬁnite. Since proofs are ﬁnite, the notation
푝0, 푝1, 푝2, … ⊢푞

52
Chapter 1 PROPOSITIONAL LOGIC
means that there exists a subsequence 푖0, 푖1, … , 푖푛−1 of 0, 1, 2, … such that
푝푖0, 푝푖1, … , 푝푖푛−1 ⊢푞.
The notation
푝0, 푝1, 푝2, … ⊬푞
means that no such subsequence exists.
DEFINITION 1.5.1
∙The propositional forms 푝0, 푝1, 푝2, … are consistent if for every propositional
form 푞,
푝0, 푝1, 푝2, … ⊬푞∧¬푞,
and we write 햢허헇(푝0, 푝1, 푝2, … ). Otherwise, 푝0, 푝1, 푝2, … is inconsistent.
∙A logical system is consistent if no contradiction is a theorem.
We have two goals. The ﬁrst is to show that propositional logic is consistent. The
second is to discover properties of sequences of consistent propositional forms that will
aid in proving other properties of propositional logic. The next theorem is important
to meet both of these goals. The equivalence of the ﬁrst two parts is known as the
compactness theorem
THEOREM 1.5.2
If 푝0, 푝1, 푝2, … are propositional forms, the following are equivalent in proposi-
tional logic.
∙햢허헇(푝0, 푝1, 푝2, … ).
∙Every ﬁnite subsequence of 푝0, 푝1, 푝2, … is consistent.
∙There exists a propositional form 푝such that 푝0, 푝1, 푝2, … ⊬푝.
PROOF
We have three implications to prove.
∙Suppose there is a ﬁnite subsequence 푝푖0, 푝푖1, … , 푝푖푛−1 that proves 푞∧¬푞
for some propositional form 푞. This implies that there is a formal proof of
푞∧¬푞from 푝0, 푝1, 푝2, … , therefore, not 햢허헇(푝0, 푝1, 푝2, … ).
∙Assume that 푝0, 푝1, 푝2, … proves every propositional form. In particular,
if we take a propositional form 푞, we have that 푝0, 푝1, 푝2, … ⊢푞∧¬푞. This
means that there is a ﬁnite subsequence 푝푖0, 푝푖1, … , 푝푖푛−1 that proves 푞∧¬푞.
∙Lastly, assume that there exists a propositional form 푞such that
푝0, 푝1, 푝2, … ⊢푞∧¬푞.

Section 1.5 THE THREE PROPERTIES
53
This means that there exist subscripts 푖0, 푖1, … , 푖푛−1 and propositional forms
푟0, 푟1, … , 푟푚−1 such that
푝푖0, 푝푖1, … , 푝푖푛−1, 푟0, 푟1, … , 푟푚−1, 푞∧¬푞
is a proof. Take any propositional form 푝. Then,
푝푖0, 푝푖1, … , 푝푖푛−1, 푟0, 푟1, … , 푟푚−1, ¬푝, 푞∧¬푞, 푝
is a proof of 푝by IP. Therefore, 푝0, 푝1, 푝2, … ⊢푝.
A sequence of propositional forms, such as 푃→푄, 푃, 푄, although consistent, has
the property that there are propositional forms that can be added to the sequence so that
the resulting list remains consistent. When the sequence can no longer take new forms
and remain consistent, we have arrived at a sequence that satisﬁes the next deﬁnition.
DEFINITION 1.5.3
A sequence of propositional forms 푝0, 푝1, 푝2, … is maximally consistent when-
ever 햢허헇(푝0, 푝1, 푝2, … ) and for all propositional forms 푝, 햢허헇(푝, 푝0, 푝1, 푝2, … )
implies that 푝= 푝푖for some 푖.
It is a convenient result of propositional logic that every consistent sequence of
propositional forms can be extended to a maximally consistent sequence. This is pos-
sible because all possible propositional forms can be put into a list. Following Deﬁni-
tion 1.1.2, we ﬁrst list the propositional variables:
퐴,
퐵,
퐶,
…
푋,
푌,
푍,
퐴0,
퐴1,
퐴2,
…
퐵0,
퐵1,
퐵2,
…
⋮
⋮
⋮
푍0,
푍1,
푍2,
…
Then, we list all propositional forms with only one propositional variable:
¬퐴,
¬퐵,
¬퐶,
…
¬푋,
¬푌,
¬푍,
¬퐴0,
¬퐴1,
¬퐴2,
…
¬퐵0,
¬퐵1,
¬퐵2,
…
⋮
⋮
⋮
¬푍0,
¬푍1,
¬푍2,
…
Next, we list all propositional forms with exactly two propositional variables starting
by writing 퐴on the right:
퐴∨퐴,
퐵∨퐴,
퐶∨퐴,
…
푋∨퐴,
푌∨퐴,
푍∨퐴,
퐴0 ∨퐴,
퐴1 ∨퐴,
퐴2 ∨퐴,
…
퐵0 ∨퐴,
퐵1 ∨퐴,
퐵2 ∨퐴,
…
⋮
⋮
⋮
푍0 ∨퐴,
푍1 ∨퐴,
푍2 ∨퐴,
…

54
Chapter 1 PROPOSITIONAL LOGIC
퐴∧퐴,
퐵∧퐴,
퐶∧퐴,
…
푋∧퐴,
푌∧퐴,
푍∧퐴,
퐴0 ∧퐴,
퐴1 ∧퐴,
퐴2 ∧퐴,
…
퐵0 ∧퐴,
퐵1 ∧퐴,
퐵2 ∧퐴,
…
⋮
⋮
⋮
푍0 ∧퐴,
푍1 ∧퐴,
푍2 ∧퐴,
…
퐴→퐴,
퐵→퐴,
퐶→퐴,
…
푋→퐴,
푌→퐴,
푍→퐴,
퐴0 →퐴,
퐴1 →퐴,
퐴2 →퐴,
…
퐵0 →퐴,
퐵1 →퐴,
퐵2 →퐴,
…
⋮
⋮
⋮
푍0 →퐴,
푍1 →퐴,
푍2 →퐴,
…
퐴↔퐴,
퐵↔퐴,
퐶↔퐴,
…
푋↔퐴,
푌↔퐴,
푍↔퐴,
퐴0 ↔퐴,
퐴1 ↔퐴,
퐴2 ↔퐴,
…
퐵0 ↔퐴,
퐵1 ↔퐴,
퐵2 ↔퐴,
…
⋮
⋮
⋮
푍0 ↔퐴,
푍1 ↔퐴,
푍2 ↔퐴,
…
After following the same pattern by attaching 퐴on the left, we continue by writing
¬퐴on the right, and then on the left, and then we adjoin 퐵and ¬퐵, etc., and then
use 3 propositional variables, and then four, etc. Following a careful path through this
inﬁnite list, we arrive at a sequence
푞0, 푞1, 푞2, …
of all propositional forms. We are now ready for the theorem.
THEOREM 1.5.4
A consistent sequence of propositional forms is a subsequence of a maximally
consistent sequence of propositional forms.
PROOF
Let 푝0, 푝1, 푝2, … be consistent and 푞0, 푞1, 푞2, … be a sequence of all propositional
forms. Deﬁne the sequence 푟푖as follows:
∙Let 푟0 = 푝0 and
푟1 =
{
푞0
if 햢허헇(푞0, 푝0, 푝1, 푝2, … ),
푝0
otherwise,
so the sequence at this stage is 푝0, 푞0 or 푝0, 푝0. Both of these are consistent.
∙Let 푟2 = 푝1 and
푟3 =
{
푞1
if 햢허헇(푞1, 푟0, 푟1, 푟2, 푝0, 푝1, 푝2, … ),
푝1
otherwise.

Section 1.5 THE THREE PROPERTIES
55
At this stage, the sequence is still consistent and of the form 푟0, 푟1, 푝1, 푞1
or 푟0, 푟1, 푝1, 푝1. The ﬁrst sequence is consistent by the deﬁnition of 푟3, and
the second sequence is consistent because 햢허헇(푟0, 푟1, 푝1).
∙Generalizing, let 푟2푘= 푝푘and
푟2푘+1 =
{
푞푘
if 햢허헇(푞푘, 푟0, 푟1, … , 푟2푘, 푝0, 푝1, 푝2, … ),
푝푘
otherwise,
resulting in a consistent sequence of the form
푟0, 푟1, 푟2, 푟3, … , 푝푘, 푞푘
or
푟0, 푟1, 푟2, 푟3, … , 푝푘, 푝푘.
Since 푝0, 푝1, 푝3, … is a subsequence of 푟0, 푟1, 푟2, … , it only remains to show that
the new sequence is maximally consistent.
∙Let 푠be a propositional form such that 푟0, 푟1, 푟2, … ⊢푠∧¬푠. This implies
that there exists a sequence 푖푗such that 푖0 < 푖1 < · · · < 푖푘and
푟푖0, 푟푖1, … , 푟푖푘⊢푠∧¬푠,
but by Theorem 1.5.2, this is impossible because 햢허헇(푟0, 푟1, … , 푟푖푘).
∙Suppose that 푠is a propositional form so that 햢허헇(푠, 푟0, 푟1, 푟2, … ). Write
푠= 푞푖for some 푖. Therefore,
햢허헇(푞푖, 푟0, 푟1, … , 푟2푖, 푝0, 푝1, 푝2, … ),
which means that 푠is a term of the sequence 푟푖because 푞푖was added at
step 2푖+ 1.
Soundness
We have deﬁned two separate tracks in propositional logic. One track is used to assign
T or F to a propositional form, and thus it can be used to determine the truth value of
a proposition. The other track focused on developing methods by which one proposi-
tional form can be proved from other propositional forms. These methods are used to
write proofs in various ﬁelds of mathematics. The question arises whether these two
tracks have been deﬁned in such a way that they get along with each other. In other
words, we want the propositional forms that we prove always to be assigned T, and
we want the propositional forms that we always assign T to be provable. This means
that we want semantic methods to yield syntactic results and syntactic methods to yield
semantic results.

56
Chapter 1 PROPOSITIONAL LOGIC
The statement form
is a theorem.
Sound
Complete
The statement form
is a tautology.
Figure 1.4
Sound and complete logics.
DEFINITION 1.5.5
∙A logic is sound if every theorem is a tautology.
∙A logic is complete if every tautology is a theorem.
There is no guarantee that the construction of the two tracks for a logic will have these
two properties (Figure 1.4), but it does in the case of propositional logic.
To prove that propositional logic is sound, we need three lemmas. The proof of the
ﬁrst is left to Exercise 1.
LEMMA 1.5.6
The propositional forms of Axioms 1.2.8 are tautologies.
LEMMA 1.5.7
Let 푝, 푞, and 푟be propositional forms.
∙If 푝⇒푟, then 푝→푟is a tautology.
∙If 푝, 푞⇒푟, then 푝∧푞→푟is a tautology.
PROOF
This is simply a matter of checking Inference Rules 1.2.10 and 1.3.10.
For example, to check the theorem for De Morgan’s law, we must show that
¬(푝∧푞) →¬푝∨¬푞
and
¬푝∨¬푞→¬(푝∧푞)
are tautologies. To do this, examine the truth table
푝
푞
푝∧푞
¬(푝∧푞)
¬푝
¬푞
¬푝∨¬푞
¬(푝∧푞) →¬푝∨¬푞
¬푝∨¬푞→¬(푝∧푞)
T
T
T
F
F
F
F
T
T
T
F
F
T
F
T
T
T
T
F
T
F
T
T
F
T
T
T
F
F
F
T
T
T
T
T
T

Section 1.5 THE THREE PROPERTIES
57
We also have to show that
¬(푝∨푞) →¬푝∧¬푞
and
¬푝∧¬푞→¬(푝∨푞)
are tautologies.
As another example, to check that the disjunctive syllogism leads to an impli-
cation that is a tautology, examining the truth table:
푝
푞
푝∨푞
¬푝
(푝∨푞) ∧¬푝
(푝∨푞) ∧¬푝→푞
T
T
T
F
F
T
T
F
T
F
F
T
F
T
T
T
T
T
F
F
F
T
F
T
The other rules are checked similarly (Exercise 2).
LEMMA 1.5.8
If 푝→푞and 푝are tautologies, then 푞is a tautology.
PROOF
This is done by examining the truth table of 푝→푞(page 12) where we see that
헏(푞) is constant and equal to T because 헏(푝) and 헏(푝→푞) are constant and both
equal to T.
We now prove the ﬁrst important property of propositional logic.
THEOREM 1.5.9 [Soundness]
Every theorem of propositional logic is a tautology.
PROOF
Let 푝be a theorem. Let 푝0, 푝1, … , 푝푛−1 be propositional forms such that
푝0, 푝1, … , 푝푛−1
is a proof for 푝such that 푝1 is an axiom, 푝푖with 푖> 0 is an axiom or follows
by a rule of inference, and 푝푛−1 = 푝(Deﬁnition 1.2.13). We now examine the
propositional forms of the proof.
∙By Lemma 1.5.6, 푝0 is a tautology.
∙The propositional form 푝1 is a tautology for one of two reasons. If 푝1 is
an axiom, it is a tautology (Lemma 1.5.6). If it follows from 푝0 because
푝0 ⇒푝1, then 푝0 →푝1 is a tautology (Lemma 1.5.7), so 푝1 is a tautology
by Lemma 1.5.8.

58
Chapter 1 PROPOSITIONAL LOGIC
∙If 푝2 follows from 푝0 or 푝1, reason as in the previous case. Suppose 푝0, 푝1 ⇒
푝2. Then, by Lemma 1.5.7, (푝0 ∧푝1) →푝2 is a tautology. Because
푝0, 푝1 ⇒푝0 ∧푝1 by Conj, 푝0 ∧푝1 is a tautology. Thus, 푝2 is a tautology by
Lemma 1.5.8.
Since every 푝푖with 푖> 0 is an axiom, follows from some 푝푗with 푗< 푖, or follows
from some 푝푗, 푝푘with 푗, 푘< 푖, continuing in this manner, we ﬁnd after ﬁnitely
many steps that 푝is a tautology.
COROLLARY 1.5.10
For all propositional forms 푝0, 푝1, … , 푝푛−1, 푞,
if 푝0, 푝1, … , 푝푛−1 ⊢푞, then 푝0, 푝1, … , 푝푛−1 ⊨푞.
The Law of Noncontradiction being a theorem of propositional logic (page 37) suggests
that we have the following result, which is the second important property of proposi-
tional logic.
COROLLARY 1.5.11
Propositional logic is consistent.
PROOF
Let 푝be a propositional form. Suppose that 푝∧¬푝is a theorem. This implies that
it is a tautology by the soundness theorem (1.5.9), but 푝∧¬푝is a contradiction.
Completeness
We use the consistency of propositional logic to prove that propositional logic is com-
plete. For this we need a few lemmas.
LEMMA 1.5.12
If not 햢허헇(¬푞, 푝0, 푝1, 푝2, … ), then 푝0, 푝1, 푝2, … ⊢푞.
PROOF
If not 햢허헇(푝0, 푝1, 푝2, … ), then 푝0, 푝1, 푝2, … ⊢푞by Theorem 1.5.2, so suppose
햢허헇(푝0, 푝1, 푝2, … ). Assume that there exists a propositional form 푟such that
¬푞, 푝0, 푝1, 푝2, … ⊢푟∧¬푟.
This implies that there exists a formal proof
푝푖0, 푝푖1, … , 푝푖푛−1, ¬푞, 푠0, 푠1, … , 푠푚−1, 푟∧¬푟,
(1.10)
where ¬푞is in the proof because 햢허헇(푝0, 푝1, 푝2, … ). Then,
푝푖0, 푝푖1, … , 푝푖푛−1, 푞

Section 1.5 THE THREE PROPERTIES
59
is a proof, where 푞follows by IP with (1.10) as the subproof. Therefore,
푝0, 푝1, 푝2, … ⊢푞.
LEMMA 1.5.13
If 푝0, 푝1, 푝2, … are maximally consistent, then for every propositional form 푞,
either 푞= 푝푖or ¬푞= 푝푖for some 푖.
PROOF
Since 푝0, 푝1, 푝2, … are consistent, both 푞and ¬푞cannot be terms of the sequence.
Suppose that it is ¬푞that is not in the list. By the deﬁnition of maximal con-
sistency, we conclude that ¬푞, 푝0, 푝1, 푝2, … are not consistent. Therefore, by
Lemma 1.5.12, we conclude that 푝0, 푝1, 푝2, … ⊢푞, and since the sequence is
maximally consistent, 푞= 푝푖for some 푖.
To prove the next lemma, we use a technique called induction on propositional
forms. It states that a property will hold true for all propositional forms if two condi-
tions are met:
∙The property holds for all propositional variables.
∙If the property holds for 푝and 푞, the property holds for ¬푝, 푝∧푞, 푝∨푞, 푝→푞,
and 푝↔푞.
In proving the second condition, we ﬁrst assume that
the property holds for the propositional forms 푝and 푞.
(1.11)
This assumption (1.11) is known as an induction hypothesis. Because
푝∨푞⇔¬푝→푞,
푝∧푞⇔¬(푝→¬푞),
and
푝↔푞⇔(푝→¬푞) →¬(¬푝→푞),
we need only to show that the induction hypothesis implies that the property holds for
¬푝and 푝→푞.
LEMMA 1.5.14
If 햢허헇(푝0, 푝1, 푝2, … ), there exists a valuation 헏such that
헏(푝) = T if and only if 푝= 푝푖
for some 푖= 0, 1, 2, … .

60
Chapter 1 PROPOSITIONAL LOGIC
PROOF
Since 햢허헇(푝0, 푝1, 푝2, … ), we know that
푝0, 푝1, 푝2, …
(1.12)
can be extended to a maximally consistent sequence of propositional forms by
Theorem 1.5.4. If we ﬁnd the desired valuation for the extended sequence, that
valuation will also work for the original sequence, so assume that (1.12) is max-
imally consistent. Let 푋0, 푋1, 푋2, … represent all of the possible propositional
variables (page 53). Deﬁne
헏(푋푗) =
{
T
if 푋푗is a propositional variable of 푝푖for some 푖,
F
otherwise.
We prove that this is the desired valuation by induction on propositional forms.
We ﬁrst claim that for all 푗,
헏(푋푗) = T if and only if 푋푗= 푝푖for some 푖.
To prove this, ﬁrst note that if 푋푗is a term of (1.12), then 헏(푋푗) = T by deﬁnition
of 헏. To show the converse, suppose that 헏(푋푗) = T but 푋푗is not a term of
(1.12). By Lemma 1.5.13, there exists 푖such that ¬푋푗= 푝푖. This implies that
헏(¬푋푗) = T, and then 헏(푋푗) = F (Deﬁnition 1.1.9), a contradiction.
Now assume that
헏(푞) = T if and only if 푞= 푝푖for some 푖
and
헏(푟) = T if and only if 푟= 푝푖for some 푖.
We ﬁrst prove that
헏(¬푞) = T if and only if ¬푞= 푝푖for some 푖.
∙Suppose that 헏(¬푞) = T. Then, 헏(푞) = F, and by induction, 푞is not
in (1.12). Since 푝0, 푝1, 푝2, … is maximally consistent, ¬푞is in the list
(Lemma 1.5.13).
∙Conversely, let ¬푞= 푝푖for some 푖. By consistency, 푞is not in the se-
quence. Therefore, by the induction hypothesis, 헏(푞) = F, which implies
that 헏(¬푞) = T.
We next prove that
헏(푞→푟) = T if and only if 푞→푟= 푝푖for some 푖.
∙Assume that 헏(푞→푟) = T. We have two cases to check. First, let
헏(푞) = 헏(푟) = T, so both 푞and 푟are in (1.12) by the induction hypoth-
esis. Suppose 푞→푟is not a term of the sequence. This implies that its

Section 1.5 THE THREE PROPERTIES
61
negation ¬(푞→푟) is a term of the sequence by Lemma 1.5.13. Therefore,
푞∧¬푟is in the sequence by maximal consistency, so ¬푟is also in the se-
quence, a contradiction. Second, let 헏(푞) = F. By induction, 푞is not a term
of the sequence, which implies that ¬푞is a term. Hence, ¬푞∨푟is in the
sequence, which implies that 푞→푟is also in the sequence.
∙To prove the converse, suppose that 푞→푟= 푝푖for some 푖. Assume
헏(푞→푟) = F. This means that 헏(푞) = T and 헏(푟) = F. Therefore, by
induction, 푞is a term of the sequence but 푟is not. This implies that ¬푟
is in the sequence, so ¬푞is in the sequence by MT. This contradicts the
consistency of (1.12).
THEOREM 1.5.15 [Completeness]
Every tautology of propositional logic is a theorem.
PROOF
Let 푝be a propositional form such that FL1, FL2, FL3 ⊬푝. By Lemma 1.5.12,
햢허헇(FL1, FL2, FL3, ¬푝). Therefore, by Lemma 1.5.14, there exists a valuation
such that 헏(푝) = F, which implies that ̸⊨푝.
COROLLARY 1.5.16
If 푝0, 푝1, 푝2, … ⊨푞, then 푝0, 푝1, 푝2 ⊢푞for all propositional forms 푝0, 푝1, 푝2, … .
We conclude by Theorems 1.5.9 and 1.5.15 and their corollaries that the notions
of semantically valid and syntactically valid coincide for deductions in propositional
logic.
Exercises
1. Prove Lemma 1.5.6.
2. Provide the remaining parts of the proof of Lemma 1.5.7.
3. Let 푝, 푝0, 푝1, 푝2, … be propositional forms. Prove the following.
(a) If 푝0, 푝1, 푝2, · · · ⊬푝, then 햢허헇(¬푝, 푝0, 푝1, 푝2, … ).
(b) If 햢허헇(푝0, 푝1, 푝2, … ) and 푝0, 푝1, 푝2, · · · ⊢푝, then 햢허헇(푝, 푝0, 푝1, 푝2, … ).
(c) If 햢허헇(푝0, 푝1, 푝2, … ), then 햢허헇(푝, 푝0, 푝1, 푝2, … ) or 햢허헇(¬푝, 푝0, 푝1, 푝2, … ).
4. Let 푝0, 푝1, 푝2, … be a maximally consistent sequence of propositional forms. Let 푝
and 푞be propositional forms. Prove the following.
(a) If 푝0, 푝1, 푝2, · · · ⊢푝, then 푝= 푝푘for some 푘.
(b) 푝∧푞= 푝푘for some 푘if and only if 푝= 푝푖and 푞= 푝푗for some 푖and 푗.
(c) If (푝→푞) = 푝푖and 푝= 푝푗for some 푖and 푗, then 푞= 푝푘for some 푘.
5. Use truth tables to prove the following. Explain why this is a legitimate technique.
(a) ¬푄∨(¬푅∨¬푃) ⊢푃→¬(푄∧푅)
(b) 푃∨푄→푅⊢¬푅→¬푄

62
Chapter 1 PROPOSITIONAL LOGIC
(c) 푃→¬(푄→푅) ⊢푃→¬푅
(d) 푃↔푄∨푅⊢푄→푃
(e) 푃∨푄→푅∧푆, ¬푃→(푇→¬푇), ¬푅⊢¬푇
6. Write a formal proof to show the following. Explain why this is a legitimate tech-
nique.
(a) ¬푃∨푄, ¬푄⊨¬푃
(b) ¬(푃∧푄), 푃⊨¬푄
(c) 푃→푄, 푃⊨푄∨푅
(d) 푃→푄, 푄→푅, 푃⊨푅
(e) 푃∨푄∧푅, ¬푃⊨푅
7. Write a formal proof to show the following.
(a) ¬(푃∧푄) ̸⊨¬푃
(b) (푃→푄) ∨(푅→푆), 푃∨푅̸⊨푄∨푆
(c) 푃∨푅, 푄∨푆, 푅↔푆̸⊨푅∧푆
8. Write a formal proof to demonstrate the following.
(a) 푝∨¬푝is a tautology.
(b) 푝∧¬푝is a contradiction.
9. Modify propositional logic by removing all replacement rules (1.3.9). Is the result-
ing logic consistent? sound? complete?
10. Modify propositional logic by removing all inference rules (1.2.10) except for In-
ference Rule 1.3.10. Is the resulting logic consistent? sound? complete?

CHAPTER 2
FIRST-ORDER LOGIC
2.1
LANGUAGES
We developed propositional logic to model basic proof and truth. We did so by us-
ing propositional forms to represent sentences that were either true or false. We saw
that propositional logic is consistent, sound, and complete. However, the sentences
of mathematics involve ideas that cannot be fully represented in propositional logic.
These sentences are able to characterize objects, such as numbers or geometric ﬁgures,
by describing properties of the objects, such as being even or being a rectangle, and
the relationships between them, such as equality or congruence. Since propositional
logic is not well suited to handle these ideas, we extend propositional logic to a richer
system.
Predicates
Consider the sentence it is a real number. This sentence has no truth value because the
meaning of the word it is undetermined. As noted on page 3, the word it is like a gap
in the sentence. It is as if the sentence was written as
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
63

64
Chapter 2 FIRST-ORDER LOGIC
is a real number.
However, that gap can be ﬁlled. Let us make some substitutions for it:
5 is a real number.
휋∕7 is a real number.
Fido is a real number.
My niece’s toy is a real number.
With each replacement, the word that is undetermined is given meaning, and then the
sentence has a truth value. In the examples, the ﬁrst two propositions are true, and the
last two are false.
Notice that
changes, whereas is a real number remains ﬁxed. This is because
these two parts of the sentence have diﬀerent purposes. The ﬁrst is a reference to an
object, and the second is a property of the object. What we did in the examples was to
choose a property and then test whether various objects have that property:
It
is a real number.
↑
5
is a real number.
True
휋∕7
is a real number.
True
Fido
is a real number.
False
My niece’s toy
is a real number.
False
Depending on the result, these two parts are put together to form a sentence that either
accurately or inaccurately aﬃrms that a particular property is an attribute of an object.
For example, the ﬁrst sentence states that being a real number is a characteristic of 5,
which is correct, and the last sentence states that being a real number is a characteristic
of my niece’s toy, which is not correct. We have terminology for all of this.
∙The subject of a sentence is the expression that refers to an object.
∙The predicate of a sentence is the expression that ascribes a property to the object
identiﬁed by the subject.
Thus, 5, 휋∕7, Fido, and my niece’s toy are subjects that are substituted for it, and is a
real number is a predicate.
Substituting for the subject but not substituting for the predicate is a restriction that
we make. We limit the extension of propositional logic this way because it is to be part
of mathematical logic and this is what we do in mathematics. For example, take the
sentence,
푥+ 2 = 7.
On its own it has no truth value, but when we substitute 푥= 5 or 푥= 10, the sentence
becomes a proposition. In this sense, 푥+ 2 = 7 is like it is a real number. Both
the sentences have a gap that is assigned a meaning giving the sentence a truth value.

Section 2.1 LANGUAGES
65
However, the mathematical sentence is diﬀerent from the English sentence in that it is
unclear as to what part is the subject. Is it 푥or 푥+ 2? For our purposes, the answer is
irrelevant. This is because in mathematical logic, the subject is replaced with a variable
or, sometimes, with multiple variables. This change leads to a modiﬁcation of what a
predicate is.
DEFINITION 2.1.1
A predicate is an expression that ascribes a property to the objects identiﬁed by
the variables of the sentence.
Therefore, the sentence 푥+ 2 = 7 is a predicate. It describes a characteristic of 푥.
When expressions are substituted for 푥, the resulting sentence will be either a propo-
sition that aﬃrms that the value added to 2 equals 5 or another predicate. If 푥= 5 is
substituted, the result is the true proposition 5+2 = 7. That is, 푥+2 = 7 is satisﬁed by
5. If 푥= 10 and the substitution is made, the resulting proposition 10+2 = 7 is false. In
mathematics, it is also common to substitute with undetermined values. For example,
if the substitution is 푥= 푦, the result is the predicate 푦+ 2 = 7, and if the substitution
is 푥= sin 휃, the result is the predicate sin 휃+ 2 = 7. Substituting 푥= 푦+ 2푧2 yields
푦+ 2푧2 + 2 = 7, a predicate with multiple variables. If we substitute 푥= 푦2 −7푦, the
result is 푦2 −7푦+ 2 = 7, which is a predicate with multiple occurrences of the same
variable.
Assume that 푥represents a real number and consider the sentence
there exists x such that 푥+ 2 = 7.
(2.1)
Although there is a variable with 2 occurrences, the sentence is a proposition, so in
propositional logic, it is an atom and would be represented by 푃. This does not tell us
much about the sentence, so we instead break the sentence into two parts:
Quantiﬁer
Predicate
↓
↓
there exists 푥
such that
푥+ 2 = 7
A quantiﬁer indicates how many objects satisfy the sentence. In this case, the quanti-
ﬁer is the existential quantiﬁer, making the sentence an existential proposition. Such
a proposition claims that there is at least one object that satisﬁes the predicate. In par-
ticular, although other sentences mean the same as (2.1) assuming that 푥represents a
real number, such as
there exists a real number 푥such that 푥+ 2 = 7,
푥+ 2 = 7 for some real number x,
and
some real number 푥satisﬁes 푥+ 2 = 7,
they all claim along with (2.1) that there is a real number 푥such that 푥+ 2 = 7. This
is true because 5 satisﬁes 푥+ 2 = 7 (Figure 2.1).

66
Chapter 2 FIRST-ORDER LOGIC
The real numbers
1
2
3
4
5
Satisfies x + 2 = 7
There is at least one object that satisﬁes 푥+ 2 = 7. Therefore,
there exists a real number 푥such that 푥+ 2 = 7 is true.
Figure 2.1
Again, assume that 푥is a real number. The sentence
for all 푥, 푥+ 5 = 5 + 푥
(2.2)
claims that 푥+ 5 = 5 + 푥is true for every real number 푥. To see this, break (2.2) like
(2.1):
Quantiﬁer
Predicate
↓
↓
for all 푥
,
푥+ 5 = 5 + 푥
This quantiﬁer is called the universal quantiﬁer. It states that the predicate is satisﬁed
by each and every object. Including propositions that have the same meaning as (2.2),
such as
for all real numbers 푥, 푥+ 5 = 5 + 푥,
and
푥+ 5 = 5 + 푥for every real number x,
(2.2) is true because each substitution of a real number for 푥satisﬁes the predicate
(Figure 2.2). These are examples of universal propositions,.
A proposition can have multiple quantiﬁers. Take the equation 푦= 2푥2 + 1. Before
we learned the various techniques that make graphing this equation simple, we graphed
it by writing a table with one column holding the 푥values and another holding the 푦
values. We then chose numbers to substitute for 푥and calculated the corresponding 푦.
Although we did not explicitly write it this way, we learned that
for every real number 푥,
there exists a real number 푦such that 푦= 2푥2 + 1.
(2.3)
This is a universal proposition, and its predicate is
there exists a real number 푦such that 푦= 2푥2 + 1.

Section 2.1 LANGUAGES
67
The real numbers
1
2
3
4
5
Satisfies x + 5 = 5 + x
Every object satisﬁes 푥+ 5 = 5 + 푥. Therefore,
for all real numbers 푥, 푥+ 5 = 5 + 푥is true.
Figure 2.2
We conclude that (2.3) is true because whenever 푥is replaced with any real number,
there is a real number 푦that satisﬁes 푦= 2푥2 + 1.
The symbolic logic that we deﬁne in this chapter is intended to model propositions
that have a predicate and possibly a quantiﬁer. As with propositional logic, an alphabet
and a grammar will be chosen that enable us to write down the appropriate symbols
to represent these sentences. Unlike propositional logic where we worked on both its
syntax and semantics at the same time, this logic starts with a study only of its syntax.
Alphabets
No matter what mathematical subject we study, whether it is algebra, number theory, or
something else, we can write our conclusions as propositions. These sentences usually
involve mathematical symbols particular to the subject being studied. For example,
both (2.1) and (2.2) are algebraic propositions. We know this because we recognize
the symbols from algebra class. For this reason, the symbolic logic that we deﬁne will
consist of two types of symbols.
DEFINITION 2.1.2
Logic symbols consist of the following:
∙Variable symbols: Sometimes simply referred to as variables, these sym-
bols serve as placeholders. On their own, they are without meaning but
can be replaced with symbols that do have meaning. A common example
are the variable symbols in an algebraic equation. Variable symbols can
be lowercase English letters 푥, 푦, and 푧, or lowercase English letters with
subscripts, 푥푛, 푦푛, and 푧푛. Depending on the context, variable symbols are
sometimes expanded to include uppercase English letters, with or without
subscripts, as well as Greek and Hebrew letters. Denote the collection of
variable symbols by 햵햠햱.
∙Connectives: ¬, ∧, ∨, →, ↔

68
Chapter 2 FIRST-ORDER LOGIC
∙Quantiﬁer symbols: ∀, ∃
∙Equality symbol: =
∙Grouping symbols: (, ), [, ], {, }
Theory symbols consist of the following:
∙Constant symbols: These are used to represent important objects in the
subject that do not change. Common constant symbols are 0 and 푒.
∙N-ary function symbols: The term n-ary refers to the number of argu-
ments. For example, these symbols can represent unary functions that
take one argument such as cosine or binary functions such as multiplica-
tion that take two arguments.
∙N-ary relation symbols: These symbols are used to represent relations.
For example, < represents the binary relation of less than and 푅can rep-
resent the unary relation is an even number.
It is not necessary to choose any theory symbols. However, if there are any, the-
ory symbols must be chosen so that they are not connectives, quantiﬁer symbols,
the equality symbol, or grouping symbols, and the selection of theory symbols
has precedence over the selection of variable symbols. This means that these two
collections must have no common symbols. Moreover, although this is not the
case in general, we assume that the logic symbols that are not variable symbols
will be the same for all applications. On the other hand, theory symbols (if there
are any) vary depending on the current subject of study. A collection of all logic
symbols and any theory symbols is called a ﬁrst-order alphabet and is denoted
by 햠.
The term theory refers to a collection of propositions all surrounding a particular
subject. Since diﬀerent theories have diﬀerent notation (think about how algebraic
notation diﬀers from geometric notation), alphabets change depending on the subject
matter. Let us then consider the alphabets for a number of theories that will be intro-
duced later in the text. The foundational theory is the ﬁrst example.
EXAMPLE 2.1.3
Set theory is the study of collections of objects. The ∈is the only relation sym-
bol, and it is binary. It has no other theory symbols. The theory symbols of set
theory are denoted by 햲햳and are summarized in the following table.
햲햳
Constant symbols
Function symbols
Relation symbol
∈

Section 2.1 LANGUAGES
69
EXAMPLE 2.1.4
Number theory is the study of the natural numbers. The symbols + and ⋅rep-
resent regular addition and multiplication, respectively. As such they are binary
function symbols. These and its other theory symbols are indicated in the fol-
lowing table and are denoted by 햭햳.
햭햳
Constant symbols
Function symbols
Relation symbols
0
1
+
⋅
Another approach to number theory is called Peano arithmetic (Peano 1889).
It is the study of the natural numbers using Peano’s axioms. It has a constant
symbol 0 and a unary function symbol 푆. Denote these symbols by 햠햱.
햠햱
Constant symbol
Function symbol
Relation symbols
0
푆
The Peano arithmetic symbols are sometimes extended to include symbols for
the operations of addition and multiplication and the less-than relation. Denote
this extended collection by 햠햱′.
햠햱′
Constant symbol
Function symbols
Relation symbol
0
푆
+
⋅
<
EXAMPLE 2.1.5
Group theory is the study of groups. A group is a set with an operation that satis-
ﬁes certain properties. Typically, the operation is denoted by the binary function
symbol ◦. There is also a constant represented by 푒. Ring theory is the study
of rings. A ring is a set with two operations that satisfy certain properties. The
operations are usually denoted by the binary function symbols ⊕and ⊗. The
constant symbol is ○. These collections of theory symbols are denoted by 햦햱
and 햱햨, respectively, and are summarized in the following tables.
햦햱
Constant symbol
Function symbol
Relation symbols
푒
◦
햱햨
Constant symbols
Function symbols
Relation symbol
○
⊕
⊗
Field theory is the study of ﬁelds. A ﬁeld is a type of ring with extra properties,
so the theory symbols 햱햨can be used to write about ﬁelds. However, if an order is
deﬁned on a ﬁeld, a binary relation symbol is needed, and the result is the theory
of ordered ﬁelds. Denote these symbols by 햮향.
햮향
Constant symbol
Function symbols
Relation symbol
○
⊕
⊗
<
Notice that the collections of theory symbols in the previous examples had at most
two constant symbols. This is typical since subjects of study usually have only a few

70
Chapter 2 FIRST-ORDER LOGIC
objects that require special recognition. However, there will be times when some extra
constants are needed to reference objects that may or may not be named by the constant
theory symbols. To handle these situations, we expand the given theory symbols by
adding new constant symbols.
DEFINITION 2.1.6
Let 햠be a ﬁrst-order alphabet with theory symbols 햲. When constant symbols
not in 햲are combined with the symbols of 햲, the resulting collection of theory
symbols is denoted by 햲. The number of new constant symbols varies depending
on need.
For example, suppose that we are working in a situation where we need four constant
symbols in addition to the ones in 햮향. Denote these new symbols by 푐1, 푐2, 푐3, and 푐4.
Then, 햮향consists of these four constant symbols and the symbols from 햮향.
Terms
For a string to represent a proposition or a predicate from a particular theory, each
nonlogic symbol of the string must be a theory symbol of that subject. For example,
∀푥(∈푥퐴)
and
∨∃∈푎푏4{} ∧푥¬푦
are strings for set theory. However, some strings have a reasonable chance of being
given meaning, others do not. As with propositional logic, we need a grammar that
will determine which strings are legal for the logic. Because a predicate might have
variables, the types of representations that we want to make are more complicated than
those of propositional logic. Hence, the grammar also will be more complicated. We
begin with the next inductive deﬁnition (compare page 59).
DEFINITION 2.1.7
Let 햠be a ﬁrst-order alphabet with theory symbols 햲. An 헦-term is a string over
햠such that
∙a variable symbol from 햠is an 햲-term,
∙a constant symbol from 햲is an 햲-term,
∙푓푡0푡1 · · · 푡푛−1 is an 햲-term if 푡0, 푡1, … , 푡푛−1 are 햲-terms and 푓is a function
symbol from 햲.
Denote the collection of strings over 햠that are 햲-terms by 햳햤햱햬햲(햠).
The string 푓푡0푡1 · · · 푡푛−1 is often written as 푓(푡0, 푡1, … , 푡푛−1) because it is common to
write functions using this notation. We must remember, however, that this notation can

Section 2.1 LANGUAGES
71
always be replaced with the notation of Deﬁnition 2.1.7. Furthermore, when writing
about a general 햲-term where it is not important to mention 햲, we often simply write
using the word term without the 햲. We will follow this convention when writing about
similar deﬁnitions that require the theory symbols 햲.
EXAMPLE 2.1.8
Here are examples of terms for each of the indicated theories. Assume that 푥, 푦
and 푧1 are variable symbols.
∙0 [Peano arithmetic]
∙+푥푦[number theory]
∙◦0푧1 [group theory].
The string +푥푦is typically written as 푥+푦, and the string ◦0푎1 is typically written
as 0 ◦푎1. If 햭햳is expanded to 햭햳by adding the constants 푐and 푑, then +푐푑is
an 햭햳-term.
As suggested by Example 2.1.8, the purpose of a term is to represent an object of study.
A variable symbol represents an undetermined object. A constant symbol represents an
object that does not change, such as a number. A function symbol is used to represent
a particular object given another object. For example, the 햭햳-term +푥2 represents the
number that is obtained when 푥is added to 2.
Formulas
As propositional forms are used to symbolize propositions, the next deﬁnition is the
grammar used to represent propositional forms and predicates. The deﬁnition is given
inductively and resembles the parentheses-less preﬁx notation invented by Łukasiewicz
(1951) in the early 1920s.
DEFINITION 2.1.9
Let 햲be the theory symbols from a ﬁrst-order alphabet 햠. An 헦-formula is a
string over 햠such that
∙푡0 = 푡1 is an 햲-formula if 푡0 and 푡1 are 햲-terms.
∙푅푡0푡1 · · · 푡푛−1 is an 햲-formula if 푅is an 푛-ary relation symbol from 햲and
푡0, 푡1, … , 푡푛−1 are 햲-terms.
∙¬푝is an 햲-formula if 푝is an 햲-formula.
∙푝∧푞, 푝∨푞, 푝→푞, and 푝↔푞are 햲-formulas if 푝and 푞are 햲-formulas.
∙∀푥푝and ∃푥푝are 햲-formulas if 푝is an 햲-formula and 푥is a variable symbol
from 햠.

72
Chapter 2 FIRST-ORDER LOGIC
The string 푅푡0푡1 · · · 푡푛−1 is often represented as 푅(푡0, 푡1, … , 푡푛−1). A formula of
the form ∀푥푝is called a universal formula, and a formula of the form ∃푥푝is an
existential formula. Parentheses can be used around an 햲-formula for readabil-
ity, especially when quantiﬁer symbols are involved. For example, ∀푥∃푦푝is the
same formula as ∀푥(∃푦푝) and ∀푥∃푦(푝).
EXAMPLE 2.1.10
Let 푥and 푦be variable symbols. Let 푐be a constant symbol; 푓, 푔, and ℎbe unary
function symbols; and 푅be a binary relation symbol from 햲. The following are
햲-formulas.
∙푥= 푐
∙푅푐푓푦
∙¬(푦= 푔푐)
∙푅푥푓푥→푅푓푥푥
∙∀푥¬(푓푥= 푓푐)
∙∃푥∀푦(푅푓푥푔푦∧푅푓푥ℎ푦).
In practice, 푅푐푓푦is usually written as 푅(푐, 푓(푦)), ¬(푦= 푔푐) as 푦≠푔(푐), 푅푥푓푥
as 푅(푥, 푓(푥)), 푅푓푥푥as 푅(푓(푥), 푥), and 푅푓푥푔푦as 푅(푓(푥), 푔(푦)).
EXAMPLE 2.1.11
These are some 햲햳-formulas with their standard translations.
∙¬ ∈푥{ }
푥is not an element of { }.
∙∀푥(∈푥퐴→∈푥퐵)
For all 푥, if 푥∈퐴, then 푥∈퐵.
∙¬∃푥∀푦(∈푦푥)
It is not the case that there exists 푥such that for all 푦, 푦∈푥.
∙푥= 푦∨∈푦푥∨∈푥푦
푥= 푦or 푦∈푥or 푥∈푦.
EXAMPLE 2.1.12
Here are some 햭햳-formulas with their corresponding predicates.
∙∀푥∀푦∀푧[++푥푦푧= +푥+푦푧]
(푥+ 푦) + 푧= 푥+ (푦+ 푧) for all 푥, 푦, and 푧.
∙¬(푥= 0) →∀푦∃푧(푧= ⋅푥푦)
If 푥≠0, then for all 푦, there exists 푧such that 푧= 푥푦.

Section 2.1 LANGUAGES
73
∙∀푥(⋅1푥= 푥)
For all 푥, 1푥= 푥.
We now name the system just developed.
DEFINITION 2.1.13
An alphabet combined with a grammar is called a language. The language given
by Deﬁnitions 2.1.2 and 2.1.9 is known as a ﬁrst-order language. A formula
of a ﬁrst-order language is a ﬁrst-order formula, and all of the formulas of the
ﬁrst-order language with theory symbols 햲is denoted by 햫(햲).
The ﬁrst-order language developed to represent predicates, either with quantiﬁers
or without them, is summarized in Figure 2.3. An alphabet that has both logic and
theory symbols is chosen. Using a grammar, terms are deﬁned, and then by extending
the grammar, formulas are deﬁned. A natural question to ask regarding this system is
what makes it ﬁrst-order? Look at the last part of Deﬁnition 2.1.9. It gives the rule that
allows the addition of a quantiﬁer symbol in a formula. Only ∀푥or ∃푥are permitted,
where 푥is a variable symbol representing an object of study. Thus, only propositions
that begin as for all x ... or there exists x such that ... can be represented as a ﬁrst-
order formula. To quantify over function and relation symbols, we need to deﬁne a
second-order formula. Augment the alphabet 햠with function and relation symbols,
which creates what is know as a second-order alphabet, and then add
∀푓푝and ∃푓푝are 햲-formulas if 푝is an 햲-formula
and 푓is a function symbol from 햠
and
∀푅푝and ∃푅푝are 햲-formulas if 푝is an 햲-formula
and 푅is a relation symbol from 햠
to Deﬁnition 2.1.9. For example, if the ﬁrst-order formula
∀푥(∈푥퐴→∈푥퐵)
is intended to be true for any 퐴and 퐵, it can be written as the second-order formula
∀퐴∀퐵∀푥(퐴푥→퐵푥),
where 퐴푥represents the relation 푥∈퐴and 퐵푥represents the relation 푥∈퐵.
Logic symbols
Theory symbols
Terms
Formulas
Grammar
Grammar
Alphabet
Represent
objects
Properties
of objects
Figure 2.3
A ﬁrst-order language.

74
Chapter 2 FIRST-ORDER LOGIC
Exercises
1. Determine whether the given strings are 햦햱-terms. If a string is not a 햦햱-term, ﬁnd
all issues that prevent it from being one.
(a) 2푒
(b) 푥푦◦
(c) ◦
(d) <푥푒
(e) ◦◦푥푦푒
2. Write the 햦햱-terms from Exercise 1 in their usual form (Example 2.1.10).
3. Extend 햲햳to 햲햳′ by adding the constant symbol ∅and the unary function symbol
P. Determine whether the given strings are 햲햳′-terms. If a string is not a 햲햳′-term,
ﬁnd all issues that prevent it from being one.
(a) ∈푥∅
(b) ∅
(c) 푥
(d) P∈푥푦
(e) P푥
4. Determine whether the given strings are 햮향-formulas. If a given string is not a
햮향-formula, ﬁnd all issues that prevent it from being one.
(a) < ⊕푥푦⊗푥푦
(b) ⊕푥= ⊗푦
(c) ∀푥∃푦(+푥푦= 0)
(d) ∀푥∀푦(⊗푥푦= ⊕푦푥) →<푥푦
(e) ¬(<⊗푥푦∧⊕푥푦) ↔∀푢∀푣(<⊗푥푦⊕푢푣)
5. Write the 햱햨-formulas from Exercise 4 in their usual form.
6. Extend 햲햳to 햲햳′′ by adding the constant symbol ∅and the binary relation symbol
푅. Determine whether the given strings are 햲햳′′-formulas. If a given string is not a
햲햳′′-formula, ﬁnd all issues that prevent it from being one.
(a) 푅푥∅∨∈푥푦
(b) 푅푥∅→∈+푥푦푧
(c) ∀푥∃∅(¬∈푥∅)
(d) ∀푥∨∀푦∨∀푧(∈∅푥푦푧) ∨∈∅∅
(e) [∃푥(푅푥∅) →∃푢∃푣∃푤(¬∈푢푣↔¬∈푢푤)] ∨∅= 푥1
7. Write the 햲햳′′-formulas from Exercise 6 in their usual form.
8. Translate the given sentence to an 햲-formula for the given theory symbol.
(a) For all 푥, 푆(푥) ≠0. (햲= 햠햱)
(b) For every number 푥, there is a number 푦such that 푥◦푦= 푒. (햲= 햦햱)
(c) If 푥< 푦and 푦< 푧, then 푥< 푧. (햲= 햮향)
(d) It is false that 푥∈푦, 푦∈푧, and 푧∈푥for all 푥, 푦, and 푧. (햲= 햲햳)

Section 2.2 SUBSTITUTION
75
(e) For every 푢and 푣, there exists 푤such that if 푢= 푣, then 푢+ 푤= 푣+ 푤.
(햲= 햱햨and + should be translated as ⊕in the 햱햨-formula.)
9. Extend 햭햳to 햭햳′ by adding the numerals 2, 3, … , 9. Answer the following ques-
tions.
(a) Is +34 = 7 a 햭햳′-term? Explain.
(b) Is ⋅4+39 a 햭햳′-term? Explain.
(c) Is ∃푥(+⋅4푥8 = +3푥) a 햭햳′-formula? If it is, ﬁnd 푥.
(d) If possible, give an example of a 햭햳-formula that is not a 햭햳′-formula.
(e) If possible, give an example of a 햭햳′-formula that is not a 햭햳-formula.
2.2
SUBSTITUTION
As noted in the beginning of Section 2.1, there are times when a substitution will be
made for a predicate’s variable. For example, in algebra, if 푓(푥) = 3푥2 + 푥+ 1, then
푓(푦) = 3푦2 + 푦+ 1, 푓(2) = 3(2)2 + 2 + 1, and 푓(sin 푥) = 3 sin2 푥+ sin 푥+ 1. That is,
we can substitute with variables, constants, and the results from functions. Therefore,
to represent this in formulas, we can replace a variable with a term.
Terms
We begin by deﬁning what it means to substitute for a variable in a term. We use ⇔
because one string can be replaced with the other string.
DEFINITION 2.2.1 [Substitution in Terms]
Let 햲be theory symbols from a ﬁrst-order alphabet 햠. Let 푥be a variable symbol
from 햠and 푡be an 햲-term. The notation
푡
푥
means that 푥is replaced with 푡at every appropriate occurrence of 푥. For terms,
this means the following.
∙If 푦is a variable symbol from 햠,
푦푡
푥⇔
{
푡
if 푥= 푦,
푦
if 푥≠푦.
∙If 푐is a constant symbol from 햲,
푐푡
푥⇔푐.
∙If 푓is an 푛-ary function symbol from 햲and 푠0, 푠1, … , 푠푛−1 are 햲-terms,
(푓푠0푠1 · · · 푠푛−1) 푡
푥⇔푓
(
푠0
푡
푥푠1
푡
푥· · · 푠푛−1
푡
푥
)
.

76
Chapter 2 FIRST-ORDER LOGIC
Observe that when a substitution of a term is made into a term, the result is another
term.
EXAMPLE 2.2.2
Let 푥, 푦, and 푧be distinct variable symbols; 푐and 푑be constant symbols; 푓be
a binary function symbol; and 푔and ℎbe unary function symbols. This means
that 푓푐푔푔푑is typically written as 푓(푐, 푔(푔(푑))).
∙푥푦
푥⇔푦
∙푥푐
푥⇔푐
∙푦푓푥푧
푥
⇔푦
∙푐푥
푥⇔푐
∙푑푐
푥⇔푑
∙푐푔푥
푥⇔푐
∙(푓푥푦)푐
푦⇔푓푥푐
∙
(
(푓푦푧)ℎ푐
푦
) 푔푦
푥⇔푓ℎ푐푧
∙
([(
푧푐
푥
)
푑
푦
]
푐
푧
)
푑
푥⇔푐
∙
([(
푓푥푦푐
푥
)푔푥
푦
]
푥
푧
)푔푑
푥⇔푓푐푔푔푑.
Free Variables
Substitution for a variable in a formula is a bit more involved. This is because of the
inﬂuence of any possible quantiﬁers. For example, take the formula
푥= 푦∨푥= 푓푦.
(2.4)
By Deﬁnition 2.2.1, we know that we can substitute constants 푐for 푥and 푑for 푦in the
terms 푥, 푦, and 푓푦. We expect that we should also be able to make this substitution
into the formula resulting in
푐= 푑∨푐= 푓푑.
However, in the formula
∀푥∃푦(푥= 푦∨푥= 푓푦),
(2.5)

Section 2.2 SUBSTITUTION
77
the situation is diﬀerent because of the quantiﬁers. Consider the corresponding oc-
currences in (2.4) and its quantiﬁed (2.5):
∀x∃y(x = y ∨ x = f y)
x = y ∨ x = f y
Even though each occurrence of 푥and 푦in (2.4) can receive a substitution, each corre-
sponding occurrence in (2.5) cannot because of the quantiﬁers.
DEFINITION 2.2.3
Let 햲be theory symbols. Let 푡0, 푡1, … , 푡푛−1 be 햲-terms, 푅be an 푛-ary relation
symbol from 햲, and 푝and 푞be 햲-formulas. An occurrence of a variable in a
formula is free or not free only according to the following rules:
∙A variable occurrence in 푡0 = 푡1 and 푅푡0푡1 · · · 푡푛−1 is free.
∙A variable occurrence in ¬푝is free if and only if the corresponding occur-
rence in 푝is free.
∙A variable occurrence in 푝∧푞, 푝∨푞, 푝→푞, and 푝↔푞is free if and only
if the corresponding occurrence in 푝or 푞is free.
∙Any occurrence of 푥in ∀푥푝and ∃푥푝is not free.
∙Any occurrence of 푦≠푥is free in ∀푥푝and ∃푥푝if and only if the corre-
sponding occurrence of 푦is free in 푝.
If an occurrence of a variable is not free, it is bound. All free occurrences of
푥in 푝are within the scope of the universal quantiﬁer in ∀푥푝and the existential
quantiﬁer in ∃푥푝.
EXAMPLE 2.2.4
Let 푓be a unary function symbol and 푅be a 3-ary relation symbol. In the
formula
∀푥∃푦(푥= 푦∨푓푥= 푦→푅푥푦푧),
all occurrences of 푥and 푦are bound, but the occurrence of 푧is free. In the
formula
∃푦(푥= 푦∨푓푥= 푦→푅푥푦푧),
all occurrences of 푥and 푧are free, but the occurrences of 푦are bound. In
푥= 푦∨푓푥= 푦→푅푥푦푧,
all occurrences are free because all occurrences are free in 푥= 푦, 푓푥= 푦, and
푅푥푦푧.
We need to know whether a formula has a free occurrence of a variable, so we make
the next deﬁnition.

78
Chapter 2 FIRST-ORDER LOGIC
DEFINITION 2.2.5
A free variable of the 햲-formula 푝is a variable that has a free occurrence in 푝.
EXAMPLE 2.2.6
Using the 푓and 푅from Example 2.2.4, both 푥and 푦are free variables of the
formula
푅푥푦푐→∃푥(푓푦= 푐),
even though 푥has both free and bound occurrences.
Formulas
We can now deﬁne what it means to make a substitution into a formula.
DEFINITION 2.2.7 [Substitution in Formulas]
Let 햲be theory symbols from a ﬁrst-order alphabet 햠. Let 푥and 푦be variable
symbols of 햠and 푅be an 푛-ary relation symbol from 햲. Suppose that 푝and 푞
are 햲-formulas and 푡, 푡0, 푡1, … , 푡푛−1 are 햲-terms.
∙(푡0 = 푡1) 푡
푥⇔푡0
푡
푥= 푡1
푡
푥
∙(푅푡0푡1 · · · 푡푛−1) 푡
푥⇔푅푡0
푡
푥푡1
푡
푥· · · 푡푛−1
푡
푥
∙(¬푝) 푡
푥⇔¬
(
푝푡
푥
)
∙(푝∧푞) 푡
푥⇔푝푡
푥∧푞푡
푥
∙(푝∨푞) 푡
푥⇔푝푡
푥∨푞푡
푥
∙(푝→푞) 푡
푥⇔푝푡
푥→푞푡
푥
∙(푝↔푞) 푡
푥⇔푝푡
푥↔푞푡
푥
∙(∀푦푝) 푡
푥⇔
{
∀푦
(
푝푡
푥
)
if 푥≠푦and 푦is not a symbol of 푡
∀푦푝
otherwise
∙(∃푦푝) 푡
푥⇔
{
∃푦
(
푝푡
푥
)
if 푥≠푦and 푦is not a symbol of 푡
∃푦푝
otherwise.
The condition on the term 푡in the last two parts of Deﬁnition 2.2.7 is important.
Consider the 햱햨-formula
푝:= ∃푦(푥⊕푦= ○).

Section 2.2 SUBSTITUTION
79
The usual interpretation of 푝is that given 푥, there exists an number 푦such that 푥+푦= 0.
Let 푓be a unary function symbol and 푧be a variable symbol. Since 푦is not a symbol
of 푧,
푝푧
푥⇔∃푦(푧⊕푦= ○),
which has the same standard interpretation as 푝. Since 푦is not a symbol of 푓푧, we can
substitute to ﬁnd that
푝푓푧
푥⇔∃푦(푓푧⊕푦= ○).
This is a reasonable substitution because it states that for the number given by 푓푧, there
is a number 푦that when added to 푓푧gives 0. This is very similar to the standard inter-
pretation of 푝. Both of these substitutions work because the number of free occurrences
is unchanged by the substitution. However, if we allow the term to include 푦among its
symbols, the substitution 푝푦
푥would yield
∃푦(푦⊕푦= ○).
(2.6)
The typical interpretation of (2.6) is that there exists a number 푦such that 푦+ 푦= 0.
This is a reasonable proposition, but not in the spirit of the original formula 푝. The
change of interpretation is due to the change in the number of free occurrences. The
formula 푝has one free occurrence, while (2.6) has none. Therefore, when making a
substitution, the number of free occurrences should not change, and for this reason,
∃푦(푥⊕푦= ○)푦
푥⇔∃푦(푥⊕푦= ○).
EXAMPLE 2.2.8
Let 푝be the 햭햳formula
∀푥0∀푥1(푥0 = 푥1 →푥0 + 푥2 = 푥1 + 푥2).
Notice that 푥2 is a free variable of 푝. However, all occurrences of 푥0 and 푥1 are
bound. Therefore,
푝0
푥0
⇔∀푥0∀푥1(푥0 = 푥1 →푥0 + 푥2 = 푥1 + 푥2),
and then letting 푦be a variable symbol,
(
푝0
푥0
) 푦
푥1
⇔∀푥0∀푥1(푥0 = 푥1 →푥0 + 푥2 = 푥1 + 푥2),
and ﬁnally,
[(
푝0
푥0
) 푦
푥1
]
1
푥2
⇔∀푥0∀푥1(푥0 = 푥1 →푥0 + 1 = 푥1 + 1).
This last formula has no free variables. A standard interpretation of this formula
is

80
Chapter 2 FIRST-ORDER LOGIC
for every integer 푥0 and 푥1, if 푥0 = 푥1, then 푥0 + 1 = 푥1 + 1.
Furthermore,
푝푥1
푥2
⇔[∀푥0∀푥1(푥0 = 푥1 →푥0 + 푥2 = 푥1 + 푥2)]푥1
푥2
⇔∀푥0[∀푥1(푥0 = 푥1 →푥0 + 푥2 = 푥1 + 푥2)]푥1
푥2
⇔∀푥0∀푥1(푥0 = 푥1 →푥0 + 푥2 = 푥1 + 푥2).
Let 푝represent the 햭햳-formula +푦2 = 7. Observe that 푝has 푦as a free variable. To
emphasize this, instead of writing
푝:= +푦2 = 7,
we often denote the formula by 푝(푦) and write
푝(푦) := +푦2 = 7.
Although 푥is not a variable in the equation, we can also write
푞(푥, 푦) := +푦2 = 7.
For example, if we wanted to interpret the formula as an equation with one variable,
we would use 푝(푦). If we wanted to view it as the horizontal line 푦= 5, we would use
푞(푥, 푦).
DEFINITION 2.2.9
Let 햠be a ﬁrst-order alphabet with theory symbols 햲. Let 푝be an 햲-formula. If
푝has no free variables or the free variables of 푝are among the distinct variables
푥0, 푥1, … , 푥푛−1 from 햠, deﬁne
푝(푥0, 푥1, … , 푥푛−1) ⇔푝.
The notation of Deﬁnition 2.2.9 can also be used to represent substitutions. Consider
the formula 푝:= 푥+ 푦= 0. Observe that
(
푝푥
푦
) 푦
푥⇔푦+ 푦= 0
and
(
푝푦
푥
) 푥
푦⇔푥+ 푥= 0.
However, suppose that we want to substitute into 푝so that the result is 푦+ 푥= 0. To
accomplish this, we need two new and distinct variable symbols, 푢and 푣. Then,

Section 2.2 SUBSTITUTION
81
(
푝푢
푥
) 푣
푦⇔푢+ 푣= 0,
(2.7)
and then,
(
푝푦
푢
) 푥
푣⇔푦+ 푥= 0.
(2.8)
Therefore,
([(
푝푢
푥
) 푣
푦
] 푦
푢
)
푥
푣⇔푦+ 푥= 0.
This works because in (2.7), each variable symbol is replaced by a new symbol in such
a way that the resulting formula has the same meaning as the original. In this way, when
the original variable symbols are brought back in (2.8), all of the substitutions are made
into distinct variables so that there are no conﬂicts and the switch can be made. This
process can be generalized to any number of variable symbols in any order.
DEFINITION 2.2.10
Let 푝(푥0, 푥1, … , 푥푛−1) be an 햲-formula and 푢0, 푢1, … , 푢푛−1 be distinct variable
symbols not among 푥0, 푥1, … , 푥푛−1. Deﬁne
푝(푢0, 푢1, … , 푢푛−1) ⇔
(
· · ·
[(
푝푢0
푥0
) 푢1
푥1
]
· · ·
) 푢푛−1
푥푛−1
.
Then, for all 햲-terms 푡0, 푡1, … , 푡푛−1, deﬁne
푝(푡0, 푡1, … , 푡푛−1) ⇔
(
· · ·
[(
푝푡0
푢0
) 푡1
푢1
]
· · ·
) 푡푛−1
푢푛−1
.
This is called a simultaneous substitution and is equivalent to replacing all free
occurrences of 푥0, 푥1, … , 푥푛−1 in 푝with 푡0, 푡1, … , 푡푛−1, respectively.
Observe that if 푝does not have free variables, then 푝(푡0, 푡1, … , 푡푛−1) ⇔푝.
EXAMPLE 2.2.11
To illustrate Deﬁnition 2.2.10, let 햱햨′ be the theory symbols of 햱햨combined with
constant symbols 1 and 2. Let 푝be the 햱햨′-formula
푥⊗(푦⊕푧) = 푥⊗푦⊕푥⊗푧.

82
Chapter 2 FIRST-ORDER LOGIC
Since 푥, 푦, and 푧are free variables, represent 푝by 푝(푥, 푦, 푧, 푤). Then,
푝(1, 푥, 푦, 2) ⇔
([(
푝1
푢1
)
푥
푢2
] 푦
푢3
)
2
푢4
⇔
([([푢1 ⊗(푢2 ⊕푢3) = 푢1 ⊗푢2 ⊕푢1 ⊗푢3
] 1
푢1
)
푥
푢2
] 푦
푢3
)
2
푤
⇔
([(1 ⊗(푢2 ⊕푢3) = 1 ⊗푢2 ⊕1 ⊗푢3
) 푥
푢2
] 푦
푢3
)
2
푤
⇔
([1 ⊗(푥⊕푢3) = 1 ⊗푥⊕1 ⊗푢3
] 푦
푢3
)
2
푤
⇔(1 ⊗(푥⊕푦) = 1 ⊗푥⊕1 ⊗푦) 2
푤
⇔1 ⊗(푥⊕푦) = 1 ⊗푥⊕1 ⊗푦.
EXAMPLE 2.2.12
Let 햲have constant symbols 5 and 9. Deﬁne 푝(푥, 푦) to be the 햲-formula
∀푥∃푧[푞(푥, 푦) ∧푟(푧)] ∨∃푦[푟(푦) →푠(푥)] .
The ﬁrst occurrence of 푦is free, and since ∀푥applies only to variables within the
brackets on the left, the last occurrence of 푥is also free. Therefore, 푝(푥, 푦) is the
disjunction of two formulas that we call 푢(푦) and 푣(푥):
푢(푦)
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
∀푥∃푧[푞(푥, 푦) ∧푟(푧)] ∨
푣(푥)
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
∃푦[푟(푦) →푠(푥)],
from which we derive
푝(9, 5) ⇔푢(5) ∨푣(9) ⇔∀푥∃푧[푞(푥, 5) ∧푟(푧)] ∨∃푦[푟(푦) →푠(9)]
As in Example 2.2.11, ﬁnding 푝(9, 5) is equivalent to simply replacing the free
occurrences of 푥with 9 and the occurrences of 푦with 5.
EXAMPLE 2.2.13
Consider the 햭햳-formula,
∀푥∀푦∀푧[++푥푦푧= +푥+푦푧] ,
(2.9)
which is often written as
∀푥∀푦∀푧[(푥+ 푦) + 푧= 푥+ (푦+ 푧)] .
(2.10)
The formula within the scope of the ﬁrst quantiﬁer symbol in (2.10) is
푝(푥) := ∀푦∀푧[(푥+ 푦) + 푧= 푥+ (푦+ 푧)] .
(2.11)

Section 2.2 SUBSTITUTION
83
Notice that the occurrences of 푥are free in (2.11), but the occurrences of 푦and
푧are bound. For example, we can make the substitution
푝(2) ⇔∀푦∀푧[(2 + 푦) + 푧= 2 + (푦+ 푧)].
Now, letting
푞(푥, 푦) := ∀푧[(푥+ 푦) + 푧= 푥+ (푦+ 푧)],
we have that 푝(푥) ⇔∀푦푞(푥, 푦). We can also deﬁne
푟(푥, 푦, 푧) := (푥+ 푦) + 푧= 푥+ (푦+ 푧)
so that 푞(푥, 푦) ⇔∀푧푟(푥, 푦, 푧). What we have done is to break apart an 햭햳-
formula that contains multiple quantiﬁers into a sequence of formulas:
∀푥
푝(푥)
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
∀푦∀푧[(푥+ 푦) + 푧= 푥+ (푦+ 푧)]
⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟
푟(푥, 푦, 푧)
⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟
푞(푥, 푦)
.
We conclude that (2.10) can be written as
∀푥푝(푥),
∀푥∀푦푞(푥, 푦),
or
∀푥∀푦∀푧푟(푥, 푦, 푧).
Observe that (2.9) has no free variables. It is a type of formula of particular importance
because it represents a proposition. In other words, (2.9) is a propositional form.
DEFINITION 2.2.14
An 햲-formula with no free variables is called an 헦-sentence.
Exercises
1. Given a term, make the indicated substitution.
(a)
(
45
푥
) 6
푦
(b)
[(
푥푎
푦
) 푓(푥)
푥
]
푏
푥
(c)
[
(푥+ 푦)푎
푥
] 푔(8)
푦
(d)
[([
(푥+ 푦+ 푧) 푟
푥
] 푏
푦
)
푏
푧
]
5
푥

84
Chapter 2 FIRST-ORDER LOGIC
2. Given a formula, make the indicated substitution.
(a)
[
(푥< 2) 푦
푥
] 4
푥
(b)
([
(푥< 5 →푥+ 4 < 9) 푦
푥
] 푥
푦
)
3
푥
(c)
([([
(푥= 5 ∧푥= 푦) 5
푥
] 푢
푦
)
푣
푥
]
6
푢
)
푏
푣
(d)
(
[∃푥(푥−4 = 푦) ∨∀푦(푦+ 푧= 푥+ 3)] 푥
푦
)
푥
푧
3. Identify all free occurrences of 푥in the given formulas.
(a) 푥+ 4 < 10
(b) ∃푥∀푦(푥+ 푦= 0)
(c) ∀푥∀푦(푥+ 푦= 푦+ 푥) ∨∀푧(푥+ 푦= 푧−3)
(d) ∀푥[∀푧∀푦(푥+ 푦= 2 ⋅푧) ↔푥+ 푥= 2 ⋅푥]
4. Identify all bound occurrences of 푥in the given formulas.
(a) (∀푥) [푝(푥) →(∃푦)푞(푦)]
(b) (∃푥)푝(푥, 푦) →(∀푦)푞(푥)
(c) (∃푥)(푥> 4) ∧푥< 10
(d) [(∀푥)(푥+ 3 = 1) ∧푥= 9] ∨(∃푦)(푥< 0)
5. Make the simultaneous substitution 푝(푎) for each of the given formulas.
(a) 푝(푥) := 2푥+ 푎= 9
(b) 푝(푥) := ∀푥(푥+ 푦= 푦+ 푥)
(c) 푝(푥) := ∃푥푞(푥) →∀푦푟(푥, 푦)
(d) 푝(푥) := 푥+ 4 = 0 ∧∃푥(푦+ 푧= 푥) ∨∃푧(푥+ 푧= 3)
6. Make the simultaneous substitution 푞(1, 2, 3) for each of the given formulas.
(a) 푞(푥, 푦, 푧) := 푢+ 푣+ 푤
(b) 푞(푥, 푦, 푧) := 푟(푥, 푦) →(∀푥) [푝(푥) ∧(∃푦)푡(푦, 푧)] .
(c) 푞(푥, 푦, 푧) := ∃푥(푥+ 푦= 푧) ∧∀푦(푥+ 푦+ 푧) ∨∀푥∀푦(푥+ 푦+ 푧)
(d) 푞(푥, 푦, 푧) := ∃푥[푝(푥) ∧∀푦(푝(푥) ∧푝(푦) →푥= 푦∨푦= 푧)]
7. Identify the formula to the right of each quantiﬁers in the given formulas.
(a) (∀푥) [푝(푥) →(∃푦)푞(푦)]
(b) (∃푥)푝(푥, 푦) →(∀푦)푞(푦)
(c) (∀푥)(∃푦)(∃푧)푝(푥, 푦, 푧) ∧푟(푤)
(d) 푝(푥) ∧(∃푥)(∀푦)푞(푥, 푦) ∨(∀푧)푟(푧)
8. Which of the following are sentences.
(a) ∀푥∀푦[푞(푥) ∨푟(푦)] ⇒∀푦[푞(푎) ∨푟(푦)]
(b) 푞(2) ∧푡(3) ⇒∃푦[푞(2) ∧푡(푦)]
(c) ∃푤[∃푥[푝(푥) ∨∃푧푞(푧) ↔∃푦[푝(푥) ∧푞(푦)] →∀푥푟(푥)] →∀푦푟(푥)]
(d) ∀푥∀푦(푝(푥) →[푞(푦) ∧푟(푧)]) →∃푥¬푞(푥)

Section 2.3 SYNTACTICS
85
2.3
SYNTACTICS
Since formulas without free variables are propositional forms, we can write proofs
involving them using the rules from Sections 1.2 through 1.4. However, since the in-
ference rules did not involve quantiﬁcation, we need new rules to deal with universal
and existential formulas. We need rules covering not only negations but also rules that
enable the removal (instantiation) and adjoining (generalization) of quantiﬁers. We
add these rules to Deﬁnition 1.2.13 to obtain a stronger notion of proof. Furthermore,
since every sentence is a propositional form, every reference to a propositional form in
Deﬁnition 1.2.13 can be considered to be a reference to a sentence. This allows us to
write formal proofs using ﬁrst-order languages.
Quantiﬁer Negation
Consider the proposition
all rectangles are squares.
This sentence is false because there is a rectangle in which one side is twice the length
of the adjacent side, so
not all rectangles are squares.
That is,
some rectangle is not a square
is true. Generalizing, we conclude that
the negation of all P are Q is some P are not Q.
This should be translated as an inference rule for formulas, so we assume
¬∀푥푝⇒∃푥¬푝.
(2.12)
Now consider the proposition
some rectangles are round.
This is false because there are no round rectangles, so
all rectangles are not round
is true. Generalizing, we conclude that
the negation of some P are Q is all P are not Q.
Again, this should be translated as an inference rule for formulas, so we assume
¬∃푥푝⇒∀푥¬푝.
(2.13)

86
Chapter 2 FIRST-ORDER LOGIC
∀x p
∀x ¬p
∃x p
∃x ¬p
Negations
Figure 2.4
The modern square of opposition.
Furthermore, by DN and (2.13),
∃푥¬푝⇒¬¬∃푥¬푝⇒¬∀푥¬¬푝⇒¬∀푥푝,
and by DN with (2.12),
∀푥¬푝⇒¬¬∀푥¬푝⇒¬∃푥¬¬푝⇒¬∃푥푝.
We summarize assumptions (2.12) and (2.13) and the two conclusions in the following
replacement rule.
REPLACEMENT RULES 2.3.1 [Quantiﬁer Negation (QN)]
Let 햲be theory symbols and 푝be an 햲-formula.
∙¬∀푥푝⇔∃푥¬푝
∙¬∃푥푝⇔∀푥¬푝.
QN is illustrated with the modern square of opposition (Figure 2.4). Negations of
quantiﬁed formulas are found at opposite corners. A version of the Square is found in
Aristotle’s De Interpretatione, dating around 350 BC (Aristotle 1984).
Whenever we negate formulas of the form ∀푥푝or ∃푥푝, to make it easier to read,
the ﬁnal form should not have a negation immediately to the left of any quantiﬁer, and
using the replacement rules, the negation should be as far into the formula 푝as possible.
We say that such negations are in positive form.
EXAMPLE 2.3.2
Find the negation of ∀푥(푝∧푞) and put the ﬁnal answer in positive form.
¬∀푥(푝∧푞) ⇔∃푥¬(푝∧푞) ⇔∃푥(¬푝∨¬푞).
The next example will use De Morgan’s law as the last one did. It also needs material
implication and double negation.

Section 2.3 SYNTACTICS
87
EXAMPLE 2.3.3
Find the negation of ∀푥∃푦[푝(푥) →푞(푦)] and put it into positive form.
¬∀푥∃푦[푝(푥) →푞(푦)] ⇔∃푥¬∃푦[푝(푥) →푞(푦)]
⇔∃푥∀푦¬[푝(푥) →푞(푦)]
⇔∃푥∀푦¬[¬푝(푥) ∨푞(푦)]
⇔∃푥∀푦[푝(푥) ∧¬푞(푦)].
Proofs with Universal Formulas
Consider the sentence all multiples of 4 are even. This implies, for instance, that 8,
100, and −16 are even. To generalize this reasoning to formulas means that whenever
we have ∀푥푝(푥), we also have 푝(푎), where 푎might be either a constant symbol such as
8, 100, and −16 or a randomly chosen constant symbol. This gives the ﬁrst inference
rule that involves a quantiﬁer. We do not prove it, but take it to be an axiom. Observe
the use of Deﬁnition 2.1.6
INFERENCE RULE 2.3.4 [Universal Instantiation (UI)]
If 푝(푥) is an 햲-formula, then for every constant symbol 푎from 햲,
∀푥푝(푥) ⇒푝(푎),
We make two observations about UI. First, since the resulting formula is to be part
of a proof, the substitution must yield a sentence, so 푎must be a constant symbol.
Second, we use the notation 푝(푥) to represent the formula instead of 푝because ∀푥푝(푥)
will be part of a proof, which means, again, that it must be a sentence. Writing 푝(푥)
limits the formula to have only 푥as a possible free variable, so ∀푥푝(푥) is a sentence.
If the formula 푝had free variables other than 푥, then ∀푥푝would not be a sentence and
not suitable for a proof.
EXAMPLE 2.3.5
Let 푝, 푞, and 푟be 햲-formulas and 푎and 푏be constant symbols from 햲. The
following are legitimate uses of UI. Notice that each of the inferences results in
an 햲-formula.
∙∀푥[푝(푥) →푞(푥)] ⇒푝(푎) →푞(푎)
∙∀푥[푝(푥) ∨∀푦푞(푦)] ⇒푝(푎) ∨∀푦푞(푦)
∙∀푥∀푦[푞(푥) ∨푟(푦)] ⇒∀푦[푞(푎) ∨푟(푦)]
∙∀푦[푞(푎) ∨푟(푦)] ⇒푞(푎) ∧푟(푎)
∙∀푦[푞(푎) ∨푟(푦)] ⇒푞(푎) ∧푟(푏).

88
Chapter 2 FIRST-ORDER LOGIC
Before we can write formal proofs, we need a rule that will attach a universal quan-
tiﬁer. It will be diﬀerent from universal instantiation, for it requires a criterion on the
constant.
DEFINITION 2.3.6
Let 푎be a constant symbol introduced into a formal proof by a substitution. If
the ﬁrst occurrence of 푎is in a sentence that follows by UI, then 푎is arbitrary.
Otherwise, 푎is particular and can be denoted by ̂푎to serve as a reminder that
the symbol is not arbitrary.
The idea behind Deﬁnition 2.3.6 is that if a constant symbol 푎is arbitrary, it repre-
sents a randomly selected object, but if 푎is particular, then 푎represents an object with
at least one known property. This property can be identiﬁed by a formula 푝(푥) so that
we have 푝(푎).
EXAMPLE 2.3.7
The constant symbol 푎in the following is not arbitrary because its ﬁrst occurrence
of 푎in line 1 is not the result of UI.
1.
푝(푎)
Given
2.
푝(푎) ∨푞(푎)
Add
Therefore, these two lines should be written using ̂푎instead of 푎.
1.
푝( ̂푎)
Given
2.
푝( ̂푎) ∨푞( ̂푎)
Add
However, 푎in the following is arbitrary because its ﬁrst occurrence is in line 2,
and line 2 follows from line 1 by UI.
1.
∀푥푝(푥)
Given
2.
푝(푎)
1 UI
3.
푝(푎) ∨푞(푎)
Add
We can now introduce the rule of inference that allows us to attach universal quan-
tiﬁers to formulas. We state it as an axiom.
INFERENCE RULE 2.3.8 [Universal Generalization (UG)]
If 푝(푥) is an 햲-formula with no particular constant symbols and 푎is an arbitrary
constant symbol from 햲,
푝(푎) ⇒∀푥푝(푥).
Consider the following argument:
All squares are rectangles.
All rectangles are quadrilaterals.
Therefore, all squares are quadrilaterals.

Section 2.3 SYNTACTICS
89
Representing the premises by ∀푥[푠(푥) →푟(푥)] and ∀푥[푟(푥) →푞(푥)], a formal proof of
this includes UG:
1.
∀푥[푠(푥) →푟(푥)]
Given
2.
∀푥[푟(푥) →푞(푥)]
Given
3.
푠(푎) →푟(푎)
1 UI
4.
푟(푎) →푞(푎)
2 UI
5.
푠(푎) →푞(푎)
3, 4 HS
6.
∀푥[푠(푥) →푞(푥)]
5 UG
Since 푎was introduced in line 3 by UI, it is an arbitrary constant symbol. In addition,
푠(푎) →푞(푎) contains no particular constant symbols that appeared in the proof by
substitution. Hence, the application of UG in line 6 is legal.
EXAMPLE 2.3.9
These are illegal uses of universal generalization.
∙Let 푝(푥) be an 햲-formula with 푐a constant symbol.
1.
푝(푐)
Given
2.
∀푥푝(푥)
1 UG [error]
The constant symbol 푐in line 1 is particular, even without being written as
̂푐. It was not introduced to the proof by UI. Therefore, universal general-
ization does not apply.
∙Suppose that 푎is an arbitrary constant symbol.
1.
푎+ ̂푏= 0
2.
∀푥(푥+ ̂푏= 0)
1 UG [error]
The restriction against 푝(푥) containing particular symbols prevents the er-
rant conclusion in line 2.
∙The following is an attempt to prove ∀푥∀푦(푥+ 푦= 2 ⋅푥) from the formula
∀푥(푥+ 푥= 2 ⋅푥).
1.
∀푥(푥+ 푥= 2 ⋅푥)
Given
2.
푎+ 푎= 2 ⋅푎
1 UI
3.
∀푦(푎+ 푦= 2 ⋅푎)
2 UG [error]
4.
∀푥∀푦(푥+ 푦= 2 ⋅푥)
3 UG
Although the constant symbol 푎in line 2 is arbitrary, the proof is not valid.
The reason is that an illegal substitution was made in line 3. To see this, let
푝(푥) := 푥+ 푥= 2 ⋅푥.

90
Chapter 2 FIRST-ORDER LOGIC
Applying universal generalization gives
∀푦(푦+ 푦= 2 ⋅푦)
because 푝(푦) ⇔푦+ 푦= 2 ⋅푦, but this is not what was written in line 3.
Now for some formal proofs.
EXAMPLE 2.3.10
Prove: ∀푥∀푦푝(푥, 푦) ⊢∀푦∀푥푝(푥, 푦)
1.
∀푥∀푦푝(푥, 푦)
Given
2.
∀푦푝(푎, 푦)
1 UI
3.
푝(푎, 푏)
2 UI
4.
∀푥푝(푥, 푏)
3 UG
5.
∀푦∀푥푝(푥, 푦)
4 UG
Since both 푎and 푏ﬁrst appear because of UI, they are arbitrary and universal
generalization can be applied to both constant symbols.
EXAMPLE 2.3.11
Prove: ∀푥[푝(푥) →푞(푥)] , ∀푥¬ [푞(푥) ∨푟(푥)] ⊢∀푥¬푝(푥)
1.
∀푥[푝(푥) →푞(푥)]
Given
2.
∀푥¬ [푞(푥) ∨푟(푥)]
Given
3.
푝(푎) →푞(푎)
1 UI
4.
¬ [푞(푎) ∨푟(푎)]
2 UI
5.
¬푞(푎) ∧¬푟(푎)
4 DeM
6.
¬푞(푎)
5 Simp
7.
¬푝(푎)
3, 6 MT
8.
∀푥¬푝(푥)
7 UG
Notice that the 푎in line 3 was introduced because of UI. Hence, 푎is arbitrary
throughout the proof.
Proofs with Existential Formulas
Since 4 + 5 = 9, we conclude that there exists 푥such that 푥+ 5 = 9. Since we
can construct an isosceles triangle, we conclude that isosceles triangles exist. This
motivates the next inference rule.

Section 2.3 SYNTACTICS
91
THEOREM 2.3.12 [Existential Generalization (EG)]
If 푝(푥) is an 햲-formula and 푎is a constant symbol from 햲,
푝(푎) ⇒∃푥푝(푥).
PROOF
Assume 푝(푎). Suppose that ∀푥¬푝(푥). By UI we have that ¬푝(푎). Therefore,
¬∀푥¬푝(푥) by IP, from which ∃푥푝(푥) follows by QN.
EXAMPLE 2.3.13
Each of the following is a valid use of existential generalization.
∙푝(푎) ∧¬푟(푎) ⇒∃푥[푝(푥) ∧¬푟(푥)]
∙푞(푎) ∧푡(푏) ⇒∃푦[푞(푎) ∧푡(푦)].
Before we write some proofs, here is the inference rule that allows us to detach
existential quantiﬁers.
THEOREM 2.3.14 [Existential Instantiation (EI)]
If 푝(푥) is an 햲-formula,
∃푥푝(푥) ⇒푝( ̂푎),
where 푎is a constant symbol from 햲that has no occurrence in the formal proof
prior to 푝( ̂푎).
PROOF
Assume that ∃푥푝(푥) does not infer 푝(푏) for any constant symbol 푏. Suppose
∃푥푝(푥). Combined with the assumption, this implies that ¬푝(푏) for every constant
symbol 푏by the law of the excluded middle (page 37) and DS. That is, ¬푝(푎) for
an arbitrary constant symbol 푎. Therefore, ∀푥¬푝(푥) by UG, so ¬∃푥푝(푥) by QN,
which is a contradiction. Therefore, ∃푥푝(푥) ⇒푝(푎) for some constant symbol 푎,
and 푎is particular by Deﬁnition 2.3.6.
The constant symbol ̂푎obtained by EI is called a witness of ∃푥푝(푥).
The reason that the constant symbol 푎must have no prior occurrence in a proof
when applying EI is because a used symbol already represents some object, so if 푎had
appeared in an earlier line, we would have no reason to assume that we could write 푝(푎)
from ∃푥푝(푥). For example, given
∃푥(푥+ 4 = 5)
(2.14)
and
∃푥(푥+ 2 = 13),
(2.15)
we write 푎+ 4 = 5 for some constant symbol 푎by EI and (2.14). By EI and (2.15),
we conclude that 푏+ 2 = 13 for some constant symbol 푏, but inferring 푎+ 2 = 13 is
invalid because 푎≠푏.

92
Chapter 2 FIRST-ORDER LOGIC
EXAMPLE 2.3.15
The following are legal uses of existential instantiation assuming that 푎and 푏
have no prior occurrences.
∙∃푥[푝(푥) ∧푞(푥)] ⇒푝( ̂푎) ∧푞( ̂푎)
∙∃푦[푟(푎, 푦, 푐) →푟(푎, 푦, 푐)] ⇒푟(푎, ̂푏, 푐) →푟(푎, ̂푏, 푐)
∙∃푥∀푦∃푧푞(푥, 푦, 푧) ⇒∀푦∃푧푞( ̂푎, 푦, 푧).
EXAMPLE 2.3.16
Existential Instantiation cannot be used to justify either of the following.
∙∃푧[푝(푧) ∨푞(푧)] does not imply 푝(̂푏) ∨푞(푧) by EI because the substitution
was not made correctly. The result should have been 푝(̂푏) ∨푞(̂푏).
∙∃푥∃푦푝(푎, 푥, 푦) does not imply ∃푦푝(푎, 푎, 푦) by EI because 푎has a prior oc-
currence. Also, notice that the hat notation was not used.
EXAMPLE 2.3.17
Assume that 푥is a real number and consider the following.
1.
∀푥∃푦(푥+ 푦= 0)
Given
2.
∃푦(푎+ 푦= 0)
1 UI
3.
푎+ ̂푏= 0
2 EG
4.
∀푥(푥+ ̂푏= 0)
3 UG [error]
5.
∃푦∀푥(푥+ 푦= 0)
4 EG
The conclusion in line 5 is incorrect. The problem lies in line 4 where UG was
applied despite the particular constant symbol in line 3 (compare Example 2.3.9).
This example makes clear why there is a restriction on particular elements in UG
(Inference Rule 2.3.8). Since 푏represents a particular real number, line 3 cannot
be used to conclude that all real numbers plus that particular 푏equals 0. We
know that 푏is the witness to line 2, but that is all we know about it. To correct
the argument, we can essentially reverse the steps to arrive back at the premise.
1.
∀푥∃푦(푥+ 푦= 0)
Given
2.
∃푦(푎+ 푦= 0)
1 UI
3.
푎+ ̂푏= 0
2 EG
4.
∃푦(푥+ 푦= 0)
3 EG
5.
∀푥∃푦(푥+ 푦= 0)
4 UG
Notice that there is no particular constant symbol in line 4, so line 5 does legally
follow by UG.
Here are some formal proofs that use existential instantiation and generalization.
EXAMPLE 2.3.18
Prove: ∃푥[푝(푥) ∧푞(푥)] , ∀푥[푝(푥) →푟(푥)] ⊢∃푥푟(푥)

Section 2.3 SYNTACTICS
93
1.
∃푥[푝(푥) ∧푞(푥)]
Given
2.
∀푥[푝(푥) →푟(푥)]
Given
3.
푝(̂푐) ∧푞(̂푐)
1 EI
4.
푝(̂푐) →푟(̂푐)
2 UI
5.
푝(̂푐)
3 Simp
6.
푟(̂푐)
4, 5 MP
7.
∃푥푟(푥)
6 EG
EXAMPLE 2.3.19
Prove: ∀푥∃푦[푞(푥) ∧푡(푦)] ⊢∀푥[푞(푥) ∧(∃푦)푡(푦)]
1.
∀푥∃푦[푞(푥) ∧푡(푦)]
Given
2.
∃푦[푞(푎) ∧푡(푦)]
1 UI
3.
푞(푎) ∧푡(̂푐)
2 EI
4.
푡(̂푐) ∧푞(푎)
3 Com
5.
푡(̂푐)
4 Simp
6.
∃푦푡(푦)
5 EG
7.
푞(푎)
3 Simp
8.
푞(푎) ∧(∃푦)푡(푦)
6, 7 Conj
9.
∀푥[푞(푥) ∧(∃푦)푡(푦)]
8 UG
EXAMPLE 2.3.20
Prove : 푝(푎) →∃푥[푞(푥) ∧푟(푥)] , 푝(푎) ⊢∃푥푟(푥)
1.
푝( ̂푎) →∃푥[푞(푥) ∧푟(푥)]
Given
2.
푝( ̂푎)
Given
3.
∃푥[푞(푥) ∧푟(푥)]
1, 2 MP
4.
푞(̂푏) ∧푟(̂푏)
3 EI
5.
푟(̂푏) ∧푞(̂푏)
4 Com
6.
푟(̂푏)
5 Simp
7.
∃푥푟(푥)
6 EG
Exercises
1. Use QN and other replacement rules to determine whether the following are legal
replacements.
(a) ¬∀푥푝(푥) ⇔∀푥¬푝(푥)
(b) ¬∃푥푝(푥) ⇔¬∀푥푝(푥)
(c) ∀푥¬푝(푥) ⇔∃푥푝(푥)
(d) ∃푥[푝(푥) →푞(푥)] ⇔¬∀푥[¬푝(푥) →¬푞(푥)]
(e) ¬∀푥∃푦푝(푥, 푦) ⇔∃푥∀푦¬푝(푥, 푦)
(f)
¬∀푥∃푦푝(푥, 푦) ⇔∃푦∀푥푝(푥, 푦)

94
Chapter 2 FIRST-ORDER LOGIC
2. Negate and put into positive form.
(a) ∃푥[푞(푥) →푟(푥)]
(b) ∀푥∃푦[푝(푥) ∧푞(푦)]
(c) ∃푥∃푦[푝(푥) ∨푞(푥, 푦)]
(d) ∀푥∀푦[푝(푥) ∨(∃푧)푞(푦, 푧)]
(e) ∃푥¬푟(푥) ∨∀푥[푞(푥) ↔¬푝(푥)]
(f)
∀푥∀푦∃푧(푝(푥) →[푞(푦) ∧푟(푧)]) →∃푥¬푞(푥)
3. Determine whether each pair of propositions are negations. If they are not, write
the negation of both.
(a) Every real number has a square root.
Every real number does not have a square root.
(b) Every multiple of four is a multiple of two.
Some multiples of two are multiples of four.
(c) For all 푥, if 푥is odd, then 푥2 is odd.
There exists 푥such that if 푥is odd, then 푥2 is even.
(d) There exists an integer 푥such that 푥+ 1 = 10.
For all integers 푥, 푥+ 1 ≠10.
4. Write the negation of the following propositions in positive form and in English.
(a) For all 푥, there exists 푦such that 푦∕푥= 9.
(b) There exists 푥so that 푥푦= 1 for all real numbers 푦.
(c) Every multiple of ten is a multiple of ﬁve.
(d) No interval contains a rational number.
(e) There is an interval that contains a rational number.
5. Let 푓be a function and 푐be a real number in the open interval 퐼. Then, 푓is
continuous at 푐if for every 휖> 0, there exists 훿> 0 such that for all 푥in 퐼, if
0 < |푥−푐| < 훿, then |푓(푥) −푓(푐)| < 휖.
(a) Write what it means for 푓to be not continuous at 푐.
(b) The function 푓is continuous on an open interval if it is continuous at every
point of the interval. Write what it means for 푓to be not continuous on an
open interval.
6. Let 푓be a function and 푐a real number in the open interval 퐼. Then, 푓is uniformly
continuous on 퐼means that for every 휖> 0, there exists 훿> 0 such that for all 푐and
푥in 퐼, if 0 < |푥−푐| < 훿, then |푓(푥) −푓(푐)| < 휖.
(a) Write what it means for 푓to be not uniformly continuous on 퐼.
(b) How does 푓being continuous on 퐼diﬀer from 푓being uniformly continuous
on 퐼?
7. Prove using QN.
(a) ∃푥푝(푥) ⊢∀푥¬푝(푥) →∀푥푞(푥)
(b) ∀푥[푝(푥) →푞(푥)], ∀푥[푞(푥) →푟(푥)], ¬∀푥푟(푥) ⊢∃푥¬푝(푥)
(c) ∀푥푝(푥) →∀푦[푞(푦) →푟(푦)], ∃푥[푞(푥) ∧¬푟(푥)] ⊢∃푥¬푝(푥)
(d) ∃푥푝(푥) →∃푦푞(푦), ∀푥¬푞(푥) ⊢∀푥¬푝(푥)

Section 2.3 SYNTACTICS
95
8. Find all errors in the given proofs.
(a) “∃푥[푝(푥) ∨푞(푥)] , ∃푥¬푞(푥) ⊢∃푥푝(푥)”
Attempted Proof
1.
∃푥[푝(푥) ∨푞(푥)]
Given
2.
∃푥¬푞(푥)
Given
3.
푝(푐) ∨푞(푐)
1 EI
4.
¬푞(푐)
2 EI
5.
¬푝(푐)
3, 4 DS
6.
∃푥¬푝(푥)
5 EG
(b) “∀푥푝(푥) ⊢∃푥∀푦[푝(푥) ∨푞(푦)]”
Attempted Proof
1.
∀푥푝(푥)
Given
2.
푝(̂푐)
1 UI
3.
푝(̂푐) ∨푞(푎)
2 Add
4.
∀푦[푝(̂푐) ∨푞(푦)]
3 UG
5.
∃푦∀푥[푝(푥) ∨푞(푦)]
4 EG
(c) “∃푥푝(푥), ∃푥푞(푥) ⊢∀푥[푝(푥) ∧푞(푥)]”
Attempted Proof
1.
∃푥푝(푥)
Given
2.
∃푥푞(푥)
Given
3.
푝(̂푐)
1 EI
4.
푞(̂푐)
2 EI
5.
푝(̂푐) ∧푞(푐)
3, 4 Conj
6.
∀푥[푝(푥) ∧푞(푥)]
5 UG
9. Prove.
(a) ∀푥푝(푥) ⊢∀푥[푝(푥) ∨푞(푥)]
(b) ∀푥푝(푥), ∀푥[푞(푥) →¬푝(푥)] ⊢∀푥¬푞(푥)
(c) ∀푥[푝(푥) →푞(푥)] , ∀푥푝(푥) ⊢∀푥푞(푥)
(d) ∀푥[푝(푥) ∨푞(푥)] , ∀푥¬푞(푥) ⊢∀푥푝(푥)
(e) ∃푥푝(푥) ⊢∃푥[푝(푥) ∨푞(푥)]
(f)
∃푥∃푦푝(푥, 푦) ⊢∃푦∃푥푝(푥, 푦)
(g) ∀푥∀푦푝(푥, 푦) ⊢∀푦∀푥푝(푥, 푦)
(h) ∀푥¬푝(푥), ∃푥[푞(푥) →푝(푥)] ⊢∃푥¬푞(푥)
(i)
∃푥푝(푥), ∀푥[푝(푥) →푞(푥)] ⊢∃푥푞(푥)
(j)
∀푥[푝(푥) →푞(푥)] , ∀푥[푟(푥) →푠(푥)] , ∃푥[푝(푥) ∨푟(푥)] ⊢∃푥[푞(푥) ∨푠(푥)]
(k) ∃푥[푝(푥) ∧¬푟(푥)] , ∀푥[푞(푥) →푟(푥)] ⊢∃푥¬푞(푥)
(l)
∀푥푝(푥), ∀푥([푝(푥) ∨푞(푥)] →[푟(푥) ∧푠(푥)]) ⊢∃푥푠(푥)
(m) ∃푥푝(푥), ∃푥푝(푥) →∀푥∃푦[푝(푥) →푞(푦)] ⊢∀푥푞(푥) ∨∃푥푟(푥)

96
Chapter 2 FIRST-ORDER LOGIC
(n) ∃푥푝(푥), ∃푥푞(푥), ∃푥∃푦[푝(푥) ∧푞(푦)] →∀푥푟(푥) ⊢∀푥푟(푥)
10. Prove the following:
(a) 푝(푥) ∧∃푦푞(푦) ⇔∃푦[푝(푥) ∧푞(푦)]
(b) 푝(푥) ∨∃푦푞(푦) ⇔∃푦[푝(푥) ∨푞(푦)]
(c) 푝(푥) ∧∀푦푞(푦) ⇔∀푦[푝(푥) ∧푞(푦)]
(d) 푝(푥) ∨∀푦푞(푦) ⇔∀푦[푝(푥) ∨푞(푦)]
(e) ∃푥푝(푥) →푞(푦) ⇔∀푥[푝(푥) →푝(푦)]
(f)
∀푥푝(푥) →푞(푦) ⇔∃푥[푝(푥) →푝(푦)]
(g) 푝(푥) →∃푦푞(푞) ⇔∃푦[푝(푥) →푝(푦)]
(h) 푝(푥) →∀푦푞(푞) ⇔∀푦[푝(푥) →푝(푦)]
11. An 햲-formula is in prenex normal form if it is of the form
푄0푥0푄1푥1 … 푄푛−1푥푛−1푞,
where 푄0, 푄1, … , 푄푛−1 are quantiﬁer symbols and 푞is a 햲-formula. Every 햲-formula
can be replaced with an 햲-formula in prenex normal form, although variables might
need to be renamed. Use Exercise 10 and QN to put the given formulas in prenex
normal form.
(a) [푝(푥) ∨푞(푥)] →∃푦[푞(푦) →푟(푦)]
(b) ¬∀푥[푝(푥) →¬∃푦푞(푦)]
(c) ∃푥푝(푥) →∀푥∃푦[푝(푥) →푞(푦)]
(d) ∀푥[푝(푥) →푞(푦)] ∧¬∃푦∀푧[푟(푦) →푠(푧)]
2.4
PROOF METHODS
The purpose of the propositional logic of Chapter 1 is to model the basic reasoning that
one does in mathematics. Rules that determine truth (semantics) and establish valid
forms of proof (syntactics) were developed. The logic developed in this chapter is an
extension of propositional logic. It is called ﬁrst-order logic. As with propositional
logic, ﬁrst-order logic provides a working model of a type of deductive reasoning that
happens when studying mathematics, but with a greater emphasis on what a particular
proposition is communicating about its subject. Geometry can serve as an example.
To solve geometric problems and prove geometric propositions means to work with the
axioms and theorems of geometry. What steps are legal when doing this are dictated by
the choice of the logic. Because the subjects of geometric propositions are mathemati-
cal objects, such as points, lines, and planes, ﬁrst-order logic is a good choice. However,
sometimes other logical systems are used. An example of such an alternative is second-
order logic, which allows quantiﬁcation over function and relation symbols (page 73)
in addition to quantiﬁcation over variable symbols. Whichever logic is chosen, that
logic provides the general rules of reasoning for the mathematical theory. Since it has
its own axioms and theorems, a logic itself is a theory, but because it is intended to
provide rules for other theories, it is sometimes called a metatheory (Figure 2.5).
Although all mathematicians use logic, they usually do not use symbolic logic. In-
stead, their proofs are written using sentences in English or some other human language

Section 2.4 PROOF METHODS
97
First-order logic (metatheory)
Mathematics
Geometry
(theory)
Calculus
(theory)
Figure 2.5
First-order logic is a metatheory of mathematical theories.
and usually do not provide all of the details. Call these paragraph proofs. Their in-
tention is to lead the reader from the premises to the conclusion, making the result
convincing. In many instances, a proof could be translated into the ﬁrst-order logic,
but this is not needed to meet the need of the mathematician. However, that it could
be translated means that we can use ﬁrst-order logic to help us write paragraph proofs,
and in this section, we make that connection.
Universal Proofs
Our ﬁrst paragraph proofs will be for propositions with universal quantiﬁers. To prove
∀푥푝(푥) from a given set of premises, we show that every object satisﬁes 푝(푥) assuming
those premises. Since the proofs are mathematical, we can restrict the objects to a
particular universe. A proposition of the form ∀푥푝(푥) is then interpreted to mean that
푝(푥) holds for all x from a given universe. This restriction is reasonable because we are
studying mathematical things, not airplanes or puppies. To indicate that we have made
a restriction to a universe, we randomly select an object of the universe by writing an
introduction. This is a proposition that declares the type of object represented by the
variable. The following are examples of introductions:
Let 푎be a real number.
Take 푎to be an integer.
Suppose 푎is a positive integer.
From here we show that 푝(푎) is true. This process is exempliﬁed by the next diagram:

98
Chapter 2 FIRST-ORDER LOGIC
∀x p(x)
Let a be an object in the universe.
Prove p(a).
These types of proofs are called universal proofs.
EXAMPLE 2.4.1
To prove that for all real numbers 푥,
(푥−1)3 = 푥3 −3푥2 + 3푥−1,
we introduce a real number and then check the equation.
PROOF
Let 푎be a real number. Then,
(푎−1)3 = (푎−1)(푎−1)2
= (푎−1)(푎2 −2푎+ 1)
= 푎3 −3푎2 + 3푎−1.
For our next example, we need some terminology.
DEFINITION 2.4.2
For all integers 푎and 푏, 푎divides 푏(written as 푎∣푏) if 푎≠0 and there exists an
integer 푘such that 푏= 푎푘.
Therefore, 6 divides 18, but 8 does not divide 18. In this case, write 6 ∣18 and 8 ∤18.
If 푎∣푏, we can also write that 푏is divisible by 푎, 푎is a divisor or a factor of 푏, or 푏is
a multiple of 푎. For this reason, to translate a predicate like 4 divides 푎, write
푎= 4푘for some integer 푘.
A common usage of divisibility is to check whether an integer is divisible by 2 or not.
DEFINITION 2.4.3
An integer 푛is even if 2 ∣푛, and 푛is odd if 2 ∣(푛−1).
We are now ready for the example.
EXAMPLE 2.4.4
Let us prove the proposition

Section 2.4 PROOF METHODS
99
the square of every even integer is even.
This can be rewritten using a variable:
for all even integers 푛, 푛2 is even.
The proof goes like this.
PROOF
Let 푛be an even integer. This means that there exists an integer 푘such
that 푛= 2푘, so we can calculate:
푛2 = (2푘)2 = 4푘2 = 2(2푘2).
Since 2푘2 is an integer, 푛2 is even.
Notice how the deﬁnition was used in the proof. After the even number was
introduced, a proposition that translated the introduction into a form that was
easier to use was written. This was done using Deﬁnitions 2.4.2 and 2.4.3.
Existential Proofs
Suppose that we want to write a paragraph proof for ∃푥푝(푥). This means that we must
show that there exists at least one object of the universe that satisﬁes the formula 푝(푥).
It will be our job to ﬁnd that object. To do this directly, we pick an object that we
think will satisfy 푝(푥). This object is called a candidate. We then check that it does
satisfy 푝(푥). This type of a proof is called a direct existential proof, and its structure
is illustrated as follows:
∃x p(x)
Choose a candidate from the universe.
Check that the candidate satisfies p(x).
EXAMPLE 2.4.5
To prove that there exists an integer 푥such that 푥2 + 2푥−3 = 0, we ﬁnd an
integer that satisﬁes the equation. A basic factorization yields
(푥+ 3)(푥−1) = 0.
Since 푥= −3 or 푥= 1 will work, we choose (arbitrarily) 푥= 1. Therefore,
(1)2 + 2(1) −3 = 0,
proving the existence of the desired integer.

100
Chapter 2 FIRST-ORDER LOGIC
Suppose that we want to prove that there is a function 푓such that the derivative of 푓
is 2푥. After a quick mental calculation, we choose 푓(푥) = 푥2 as a candidate and check
to ﬁnd that
푑
푑푥푥2 = 2푥.
(2.16)
Notice that 푑∕푑푥is a function that has functions as its inputs and outputs. Let 푑rep-
resent this function. That is, 푑is a function symbol such that
푑(푓)(푥) = 푑
푑푥푓(푥).
A formula that represents the proposition that was just proved is
∃푓(푑(푓)(푥) = 2푥).
(2.17)
This is a second-order formula (page 73) because the variable symbol 푥represents a
real number (an object of the universe) and 푓is a function symbol taking real numbers
as arguments. Although this kind of reasoning is common to mathematics, it cannot
be written as a ﬁrst-order formula. This shows that there is a purpose to second-order
logic. It is not a novelty.
EXAMPLE 2.4.6
To represent (2.16) as a ﬁrst-order formula, let 푑be a unary function symbol
representing the derivative and write
∀푥[푑(푥2) = 2푥].
Notice, however, that this formula does not convey the same meaning as (2.17).
Multiple Quantiﬁers
Let us take what we have learned concerning the universal and existential quantiﬁers
and write paragraph proofs involving both. The ﬁrst example is a simple one from
algebra but will nicely illustrate our method.
EXAMPLE 2.4.7
Prove that for every real number 푥, there exists a real number 푦so that 푥+푦= 2.
This translates to
∀푥∃푦(푥+ 푦= 2)
with the universe equal to the real numbers. Remembering that a universal quan-
tiﬁer must apply to all objects of the universe and an existential quantiﬁer means
that we must ﬁnd the desired object, we have the following:

Section 2.4 PROOF METHODS
101
∀x ∃y (x + y = 2)
Let x be a real number.
Find a real number y.
Check that x + y = 2.
After taking an arbitrary 푥, our candidate will be 푦= 2 −푥.
PROOF
Let 푥be a real number. Choose 푦= 2 −푥and calculate:
푥+ 푦= 푥+ (2 −푥) = 2.
Now let us switch the order of the quantiﬁers.
EXAMPLE 2.4.8
To see that there exists an integer 푥such that for all integers 푦, 푥+ 푦= 푦, we use
the following:
∃x ∀y (x + y = y)
Let y be an integer.
Find an integer x.
 Show x + y = y.
In the proof, the ﬁrst goal is to identify a candidate. Then, we must show that it
works with every real number.
PROOF
We claim that 0 is the sought after object. To see this, let 푦be an integer.
Then 0 + 푦= 푦.
The next example will involve two existential quantiﬁers. Therefore, we have to ﬁnd
two candidates.
EXAMPLE 2.4.9
We prove that there exist real numbers 푎and 푏so that for every real number 푥,
(푎+ 2푏)푥+ (2푎−푏) = 2푥−6.
Translating we arrive at

102
Chapter 2 FIRST-ORDER LOGIC
∃a ∃b ∀x[(a + 2b)x + (2a − b) = 2x − 6]
Find a real number b.
Find a real number a.
 Show (a + 2b)x + (2a − b) = 2x − 6.
Let x be a real number.
We have to choose two candidates, one for 푎and one for 푏, and then check by
taking an arbitrary 푥.
PROOF
Solving the system,
푎+ 2푏= 2,
2푎−푏= −6,
we choose 푎= −2 and 푏= 2. Let 푥be a real number. Then,
(푎+ 2푏)푥+ (2푎−푏) = (−2 + 2 ⋅2)푥+ (2 ⋅(−2) −2) = 2푥−6.
Counterexamples
There are many times in mathematics when we must show that a proposition of the
form ∀푥푝(푥) is false. This can be accomplished by proving ∃푥¬푝(푥) is true, and this
is done by showing that an object 푎exists in the universe such that 푝(푎) is false. This
object is called a counterexample to ∀푥푝(푥).
EXAMPLE 2.4.10
Show false:
푥+ 2 = 7 for all real numbers 푥.
To do this, we show that ∃푥(푥+ 2 ≠7) is true by noting that the real number 0
satisﬁes 푥+ 2 ≠7. Hence, 0 is a counterexample to ∀푥(푥+ 2 = 7).
The idea of a counterexample can be generalized to cases with multiple universal quan-
tiﬁers.
EXAMPLE 2.4.11
We know from algebra that every quadratic polynomial with real coeﬃcients has
a real zero is false. This can be symbolized as
∀푎∀푏∀푐∃푥(푎푥2 + 푏푥+ 푐= 0),
where the universe is the collection of real numbers. The counterexample is found
by demonstrating
∃푎∃푏∃푐∀푥(푎푥2 + 푏푥+ 푐≠0).

Section 2.4 PROOF METHODS
103
Many polynomials could be chosen, but we select 푥2 + 1. Its only zeros are 푖and
−푖. This means that 푎= 1, 푏= 0, and 푐= 1 is our counterexample.
Direct Proof
Direct Proof is the preferred method for proving implications. To use Direct Proof to
write a paragraph proof identify the antecedent and consequent of the implication and
then follow these steps:
∙assume the antecedent,
∙translate the antecedent,
∙translate the consequent so that the goal of the proof is known,
∙deduce the consequent.
Our ﬁrst example will use Deﬁnitions 2.4.2 and 2.4.3. Notice the introductions in the
proof.
EXAMPLE 2.4.12
We use Direct Proof to write a paragraph proof of the proposition
for all integers 푥, if 4 divides 푥, then 푥is even.
First, randomly choose an integer 푎and then identify the antecedent and conse-
quent:
if
4 divides 푥, then 푥is even .
Use these to identify the structure of the proof:
4 divides a.
This means a = 4k.
2 divides a.
Show a = 2l.
Assume the antecedent.
Translate the antecedent.
Translate the consequent.
Deduce the consequent.
…
Now write the ﬁnal version from this structure.
PROOF
Assume that 4 divides the integer 푎. This means 푎= 4푘for some integer
푘. We must show that 푎= 2푙for some integer 푙, but we know that 푎=
4푘= 2(2푘). Hence, let 푙= 2푘.
Sometimes it is diﬃcult to prove a conditional directly. An alternative is to prove
the contrapositive. This is sometimes easier or simply requires fewer lines. The next
example shows this method in a paragraph proof.

104
Chapter 2 FIRST-ORDER LOGIC
EXAMPLE 2.4.13
Let us show that
for all integers 푛, if 푛2 is odd, then 푛is odd.
A direct proof of this is a problem. Instead, we prove its contrapositive,
if 푛is not odd, then 푛2 is not odd.
In other words, we prove that
if 푛is even, then 푛2 is even.
This will be done using Direct Proof:
Let n be even.
This means n = 2k.
2 divides n  .
Show n   = 2l.
…
Assume the antecedent.
Translate the antecedent.
Translate the consequent.
Deduce the consequent.
2
2
This leads to the ﬁnal proof.
PROOF
Let 푛be an even integer. This means that 푛= 2푘for some integer 푘. To
see that 푛2 is even, calculate to ﬁnd
푛2 = (2푘)2 = 4푘2 = 2(2푘2).
Notice that this proof is basically the same as the proof for the square of every
even integer is even on page 99. This illustrates that there is a connection between
universal proofs and direct proofs (Exercise 4).
Existence and Uniqueness
There will be times when we want to show that there exists exactly one object that
satisﬁes a given predicate 푝(푥). In other words, there exists a unique object that satisﬁes
푝(푥). This is a two-step process.
∙Existence: Show that there is at least one object that satisﬁes 푝(푥).
∙Uniqueness: Show that there is at most one object that satisﬁes 푝(푥). This is
usually done by assuming both 푎and 푏satisfy 푝(푥) and then proving 푎= 푏.
This means to prove that there exists a unique 푥such that 푝(푥), we prove
∃푥푝(푥) ∧∀푥∀푦(푝(푥) ∧푝(푦) →푥= 푦).
Use direct or indirect existential proof to demonstrate that an object exists. The next
example illustrates proving uniqueness.

Section 2.4 PROOF METHODS
105
EXAMPLE 2.4.14
Let 푚and 푛be nonnegative integers with 푚≠0. To show that there is at most
one pair of nonnegative integers 푟and 푞such that
푟< 푚and 푛= 푚푞+ 푟,
suppose in addition to 푟and 푞that there exists nonnegative integers 푟′ and 푞′ such
that
푟′ < 푚and 푛= 푚푞′ + 푟′.
Assume that 푟′ > 푟. By Exercise 13, 푞> 푞′, so there exists 푢, 푣> 0 such that
푟′ = 푟+ 푢and 푞= 푞′ + 푣.
Therefore,
푚(푞′ + 푣) + 푟= 푚푞′ + 푟+ 푢,
푚푞′ + 푚푣+ 푟= 푚푞′ + 푟+ 푢,
푚푣= 푢.
Since 푣> 0, there exists 푤such that 푣= 푤+ 1. Hence,
푚푤+ 푚= 푚(푤+ 1) = 푚푣= 푢,
so 푚≤푢. However, since 푟< 푚and 푟′ < 푚, we have that 푢< 푚(Exercise 13),
which is impossible. Lastly, the assumption 푟> 푟′ leads to a similar contradic-
tion. Therefore, 푟= 푟′, which implies that 푞= 푞′.
EXAMPLE 2.4.15
To prove 2푥+ 1 = 5 has a unique real solution, we show
∃푥(2푥+ 1 = 5)
and
∀푥∀푦(2푥+ 1 = 5 ∧2푦+ 1 = 5 →푥= 푦).
∙We know that 푥= 2 is a solution since 2(2) + 1 = 5.
∙Suppose that 푎and 푏are solutions. We know that both 2푎+ 1 = 5 and
2푏+ 1 = 5, so we calculate:
2푎+ 1 = 2푏+ 1,
2푎= 2푏,
푎= 푏.
Indirect Proof
To use indirect proof, assume each premise and then assume the negation of the con-
clusion. Then proceed with the proof until a contradiction is reached. At this point,
deduce the original conclusion.

106
Chapter 2 FIRST-ORDER LOGIC
EXAMPLE 2.4.16
Earlier we proved
for all integers 푛, if 푛2 is odd, then 푛is odd
by showing its contrapositive. Here we nest an Indirect Proof within a Direct
Proof:
Assume n   is odd.
Suppose n is even.
Contradiction
n is odd.
Assume the antecedent.
Assume the negation.
Deduce a contradiction.
Conclude the consequent.
2
…
We use this structure to write the paragraph proof.
PROOF
Take an integer 푛and let 푛2 be odd. In order to obtain a contradiction,
assume that 푛is even. So, 푛= 2푘for some integer 푘. Substituting, we
have
푛2 = (2푘)2 = 2(2푘2),
showing that 푛2 is even. This is a contradiction. Therefore, 푛is an odd
integer.
Indirect proof has been used to prove many famous mathematical results including the
next example.
EXAMPLE 2.4.17
We show that
√
2 is an irrational number. Suppose instead that
√
2 = 푎
푏,
where 푎and 푏are integers, 푏≠0, and the fraction 푎∕푏has been reduced. Then,
2 = 푎2
푏2 ,
so 푎2 = 2푏2. Therefore, 푎= 2푘for some integer 푘[Exercise 11(c)]. We conclude
that 푏2 = 2푘2, which implies that 푏is also even. However, this is impossible
because the fraction was reduced.
There are times when it is diﬃcult or impossible to ﬁnd a candidate for an existential
proof. When this happens, an indirect existential proof can sometimes help.

Section 2.4 PROOF METHODS
107
EXAMPLE 2.4.18
If 푛is an integer such that 푛> 1, then 푛is prime means that the only positive
divisors of 푛are 1 and 푛; else 푛is composite. From the deﬁnition, if 푛is com-
posite, there exist 푎and 푏such that 푛= 푎푏and 1 < 푎≤푏< 푛. For example, 2,
11, and 97 are prime, and 4 and 87 are composite. Euclid proved that there are
inﬁnitely many prime numbers (Elements IX.20). Since it is impossible to ﬁnd
all of these numbers, we prove this theorem indirectly. Suppose that there are
ﬁnitely many prime numbers and list them as
푝0, 푝1, … , 푝푛−1.
Consider
푞= 푝0푝1 · · · 푝푛−1 + 1.
If 푞is prime, 푞= 푝푖for some 푖= 0, 1, … , 푛−1, which would imply that 푝푖
divides 1. Therefore, 푞is composite, but this is also impossible because 푞must
have a prime factor, which again means that 1 would be divisible by a prime.
Biconditional Proof
The last three types of proofs that we will examine rely on direct proof. The ﬁrst of
these takes three forms, and they provide the usual method of proving biconditionals.
The ﬁrst form follows because 푝→푞and 푞→푝imply (푝→푞) ∧(푞→푝) by Conj,
which implies 푝↔푞by Equiv.
INFERENCE RULE 2.4.19 [Biconditional Proof (BP)]
푝→푞, 푞→푝⇒푝↔푞.
The rule states that a biconditional can be proved by showing both implications. Each is
usually proved with direct proof. As is seen in the next example, the 푝→푞subproof is
introduced by (→) and its converse with (←). The conclusions of the two applications
of direct proof are combined in line 7.
EXAMPLE 2.4.20
Prove: 푝→푞⊢푝∧푞↔푝
1.
푝→푞
Given
(→) 2.
→푝∧푞
Assumption
3.
푝
2 Simp
(←) 4.
→푝
Assumption
5.
푞
1, 4 MP
6.
푝∧푞
4, 5 Conj
7.
푝∧푞↔푝
2–6 BP

108
Chapter 2 FIRST-ORDER LOGIC
Sometimes the steps for one part are simply the steps for the other in reverse. When
this happens, our work is cut in half, and we can use the short rule of biconditional
proof. These proofs are simply a sequence of replacements with or without the reasons.
This is a good method when only rules of replacement are used as in the next example.
(Notice that there are no hypotheses to assume.)
EXAMPLE 2.4.21
Prove: ⊢푝→푞↔푝∧¬푞→¬푝
푝→푞⇔¬푝∨푞
Impl
⇔¬푝∨¬푝∨푞
Idem
⇔¬푝∨(¬푝∨푞)
Assoc
⇔¬푝∨푞∨¬푝
Com
⇔¬푝∨¬¬푞∨¬푝
DN
⇔¬(푝∧¬푞) ∨¬푝
DM
⇔푝∧¬푞→¬푝
Impl
EXAMPLE 2.4.22
Let us use biconditional proof to show that
for all integers 푛, 푛is even if and only if 푛3 is even.
Since this is a biconditional, we must show both implications:
if 푛is even , then 푛3 is even ,
and
if 푛3 is even , then 푛is even .
To prove the second conditional, we prove its contrapositive. Therefore, using
the pattern of the previous example, the structure is
(→)
→Assume 푛is even
Then, 푛= 2푘for some integer 푘
⋮
푛3 = 2푙, with 푙being an integer
푛3 is even
(←)
→Assume 푛is odd
Then, 푛= 2푘+ 1 for some integer 푘
⋮
푛3 = 2푙+ 1, with 푙being an integer
푛3 is odd

Section 2.4 PROOF METHODS
109
PROOF
Let 푛be an integer.
∙Assume 푛is even. Then, 푛= 2푘for some integer 푘. We show that
푛3 is even. To do this, we calculate:
푛3 = (2푘)3 = 2(4푘3),
which means that 푛3 is even.
∙Now suppose that 푛is odd. This means that 푛= 2푘+ 1 for some
integer 푘. To show that 푛3 is odd, we again calculate:
푛3 = (2푘+ 1)3 = 8푘3 + 12푘2 + 6푘+ 1 = 2(4푘3 + 6푘2 + 3푘) + 1.
Hence, 푛3 is odd.
Notice that the words were chosen carefully to make the proof more readable. Fur-
thermore, the example could have been written with the words necessary and suﬃcient
introducing the two subproofs. The (→) step could have been introduced with a phrase
like
to show suﬃciency,
and the (←) could have opened with
as for necessity.
There will be times when we need to prove a sequence of biconditionals. The propo-
sitional forms 푝0, 푝1, … , 푝푛−1 are pairwise equivalent if for all 푖, 푗,
푝푖↔푝푗.
In other words,
푝0 ↔푝1, 푝0 ↔푝2, … , 푝1 ↔푝2, 푝1 ↔푝3, … , 푝푛−2 ↔푝푛−1.
To prove all of these, we make use of the Hypothetical Syllogism. For example, if we
know that 푝0 →푝1, 푝1 →푝2, and 푝2 →푝0, then
푝0 →푝2 (because 푝0 →푝1 ∧푝1 →푝2),
푝1 →푝0 (because 푝1 →푝2 ∧푝2 →푝0),
푝2 →푝1 (because 푝2 →푝0 ∧푝0 →푝1).
The result is the equivalence rule.

110
Chapter 2 FIRST-ORDER LOGIC
INFERENCE RULE 2.4.23 [Equivalence Rule]
To prove that the propositional forms 푝0, 푝1, … , 푝푛−1 are pairwise equivalent,
prove:
푝0 →푝1, 푝1 →푝2, … , 푝푛−2 →푝푛−1, 푝푛−1 →푝0.
In practice, the equivalence rule will typically be used to prove propositions that
include the phrase
the following are equivalent.
EXAMPLE 2.4.24
Let
푓(푥) = 푎푛푥푛+ 푎푛−1푥푛−1 + · · · + 푎1푥+ 푎0
be a polynomial with real coeﬃcients. That is, each 푎푖is a real number and 푛is
a nonnegative integer. An integer 푟is a zero of 푓(푥) if
푎푛푟푛+ 푎푛−1푟푛−1 + · · · + 푎1푟+ 푎0 = 0,
written as 푓(푟) = 0, and a polynomial 푔(푥) is a factor of 푓(푥) if there is a poly-
nomial ℎ(푥) such that 푓(푥) = 푔(푥)ℎ(푥). Whether 푔(푥) is a factor of 푓(푥) or not,
there exist unique polynomials 푞(푥) and 푟(푥) such that
푓(푥) = 푔(푥)푞(푥) + 푟(푥)
(2.18)
and
the degree of 푟(푥) is less than the degree of 푔(푥).
(2.19)
This result is called the polynomial division algorithm, The polynomial 푞(푥) is
the quotient and 푟(푥) is the remainder. We prove that the following are equiv-
alent:
∙푟is a zero of 푓(푥).
∙푟is a solution to 푓(푥) = 0.
∙푥−푟is a factor of 푓(푥).
To do this, we prove three conditionals:
if 푟is a zero of 푓(푥) , then 푟is a solution to 푓(푥) = 0 ,
if 푟is a solution to 푓(푥) = 0 , then 푥−푟is a factor of 푓(푥) ,
and
if 푥−푟is a factor of 푓(푥) , then 푟is a zero of 푓(푥) .

Section 2.4 PROOF METHODS
111
We use direct proof on each.
PROOF
Let 푎푛푥푛+ 푎푛−1푥푛−1 + · · · + 푎1푥+ 푎0 be a polynomial and assume that the
coeﬃcients are real numbers. Denote the polynomial by 푓(푥).
∙Let 푟be a zero of 푓(푥). By deﬁnition, this means 푓(푟) = 0, so 푟is a
solution to 푓(푥) = 0.
∙Suppose 푟is a solution to 푓(푥) = 0. The polynomial division algo-
rithm (2.18) gives polynomials 푞(푥) and 푟(푥) such that
푓(푥) = 푞(푥)(푥−푟) + 푟(푥)
and the degree of 푟(푥) is less than 1 (2.19). Hence, 푟(푥) is a constant
that we simply write as 푐. Now,
0 = 푓(푟) = 푞(푟)(푟−푟) + 푐= 0 + 푐= 푐.
Therefore, 푓(푥) = 푞(푥)(푥−푟), so 푥−푟is a factor of 푓(푥).
∙Lastly, assume 푥−푟is a factor of 푓(푥). This means that there exists
a polynomial 푞(푥) so that
푓(푥) = (푥−푟)푞(푥).
Thus,
푓(푟) = (푟−푟)푞(푟) = 0,
which means 푟is a zero of 푓(푥).
Proof of Disunctions
The second type of proof that relies on direct proof is the proof of a disjunction. To
prove 푝∨푞, it is standard to assume ¬푝and show 푞. This means that we would be using
direct proof to show ¬푝→푞. This is what we want because
¬푝→푞⇔¬¬푝∨푞⇔푝∨푞.
The intuition behind the strategy goes like this. If we need to prove 푝∨푞from some
hypotheses, it is not reasonable to believe that we can simply prove 푝and then use
Addition to conclude 푝∨푞. Indeed, if we could simply prove 푝, we would expect the
conclusion to be stated as 푝and not 푝∨푞. Hence, we need to incorporate both disjuncts
into the proof. We do this by assuming the negation of one of the disjuncts. If we can
prove the other, the disjunction must be true.

112
Chapter 2 FIRST-ORDER LOGIC
EXAMPLE 2.4.25
To prove
for all integers 푎and 푏, if 푎푏= 0, then 푎= 0 or 푏= 0,
we assume 푎푏= 0 and show that 푎≠0 implies 푏= 0.
PROOF
Let 푎and 푏be integers. Let 푎푏= 0 and suppose 푎≠0. Then, 푎−1 exists.
Multiplying both sides of the equation by 푎−1 gives
푎−1푎푏= 푎−1 ⋅0,
so 푏= 0.
Proof by Cases
The last type of proof that relies on direct proof is proof by cases. Suppose that we
want to prove 푝→푞and this is diﬃcult for some reason. We notice, however, that 푝
can be broken into cases. Namely, there exist 푝0, 푝1, … , 푝푛−1 such that
푝⇔푝0 ∨푝1 ∨· · · ∨푝푛−1.
If we can prove 푝푖→푞for each 푖, we have proved 푝→푞. If 푛= 2, then 푝⇔푝0 ∨푝1,
and the justiﬁcation of this is as follows:
(푝0 →푞) ∧(푝1 →푞) ⇔(¬푝0 ∨푞) ∧(¬푝1 ∨푞)
⇔(푞∨¬푝0) ∧(푞∨¬푝1)
⇔푞∨¬푝0 ∧¬푝1
⇔¬푝0 ∧¬푝1 ∨푞
⇔¬(푝0 ∨푝1) ∨푞
⇔푝0 ∨푝1 →푞
⇔푝→푞.
This generalizes to the next rule.
INFERENCE RULE 2.4.26 [Proof by Cases (CP)]
For every positive integer 푛, if 푝⇔푝0 ∨푝1 ∨· · · ∨푝푛−1, then
푝0 →푞, 푝1 →푞, … , 푝푛−1 →푞⇒푝→푞.
For example, since 푎is a real number if and only if 푎> 0, 푎= 0, or 푎< 0, if we
needed to prove a proposition about an arbitrary real number, it would suﬃce to prove
the result individually for 푎> 0, 푎= 0, and 푎< 0.

Section 2.4 PROOF METHODS
113
EXAMPLE 2.4.27
Our example of a proof by cases is a well-known one:
for all integers 푎and 푏, if 푎= ±푏, then 푎divides 푏and 푏divides 푎.
The antecedent means 푎= 푏or 푎= −푏, which are the two cases, so we have to
show both
if 푎= 푏, then 푎divides 푏and 푏divides 푎
and
if 푎= −푏, then 푎divides 푏and 푏divides 푎.
This leads to the following structure:
→Suppose 푎= ±푏
Thus, 푎= 푏or 푎= −푏
(Case 1)
→Assume 푎= 푏
⋮
푎divides 푏and 푏divides 푎
(Case 2)
→Assume 푎= −푏
⋮
푎divides 푏and 푏divides 푎
∴푎divides 푏and 푏divides 푎
The ﬁnal proof looks something like this.
PROOF
Let 푎and 푏be integers and suppose 푎= ±푏. To show 푎divides 푏and 푏
divides 푎, we have two cases to prove.
∙Assume 푎= 푏. Then, 푎= 푏⋅1 and 푏= 푎⋅1.
∙Next assume 푎= −푏. This means that 푎= 푏⋅(−1) and 푏= 푎⋅(−1).
In both the cases, we have proved that 푎divides 푏and 푏divides 푎.
Exercises
1. Let 푛be an integer. Demonstrate that each of the following are divisible by 6.
(a) 18
(b) −24
(c) 0
(d) 6푛+ 12
(e) 23 ⋅34 ⋅75
(f)
(2푛+ 2)(3푛+ 6)
2. Let 푎be a nonzero integer. Write paragraph proofs for each proposition.

114
Chapter 2 FIRST-ORDER LOGIC
(a) 1 divides 푎.
(b) 푎divides 0.
(c) 푎divides 푎.
3. Write a universal proof for each proposition.
(a) For all real numbers 푥, (푥+ 2)2 = 푥2 + 4푥+ 4.
(b) For all integers 푥, 푥−1 divides 푥3 −1.
(c) The square of every even integer is even.
4. Show why a proof of (∀푥)푝(푥) is an application of direct proof.
5. Write existential proofs for each proposition.
(a) There exists a real number 푥such that 푥−휋= 9.
(b) There exists an integer 푥such that 푥2 + 2푥−3 = 0.
(c) The square of some integer is odd.
6. Prove each of the following by writing a paragraph proof.
(a) For all real numbers 푥, 푦, and 푧, 푥2푧+ 2푥푦푧+ 푦2푧= 푧(푥+ 푦)2.
(b) There exist real numbers 푢and 푣such that 2푢+ 5푣= −29.
(c) For all real numbers 푥, there exists a real number 푦so that 푥−푦= 10.
(d) There exists an integer 푥such that for all integers 푦, 푦푥= 푥.
(e) For all real numbers 푎, 푏, and 푐, there exists a complex number 푥such that
푎푥2 + 푏푥+ 푐= 0.
(f)
There exists an integer that divides every integer.
7. Provide counterexamples for each of the following false propositions.
(a) Every integer is a solution to 푥+ 1 = 0.
(b) For every integer 푥, there exists an integer 푦such that 푥푦= 1.
(c) The product of any two integers is even.
(d) For every integer 푛, if 푛is even, then 푛2 is a multiple of eight.
8. Assuming that 푎, 푏, 푐, and 푑are integers with 푎≠0 and 푐≠0, give paragraph
proofs using direct proof for the following divisibility results.
(a) If 푎divides 푏, then 푎divides 푏푑.
(b) If 푎divides 푏and 푎divides 푑, then 푎2 divides 푏푑.
(c) If 푎divides 푏and 푐divides 푑, then 푎푐divides 푏푑.
(d) If 푎divides 푏and 푏divides 푐, then 푎divides 푐.
9. Write paragraph proofs using direct proof.
(a) The sum of two even integers is even.
(b) The sum of two odd integers is even.
(c) The sum of an even and an odd is odd.
(d) The product of two even integers is even.
(e) The product of two odd integers is odd.
(f)
The product of an even and an odd is even.
10. Let 푎and 푏be integers. Write paragraph proofs.

Section 2.4 PROOF METHODS
115
(a) If 푎and 푏are even, then 푎4 + 푏4 + 32 is divisible by 8.
(b) If 푎and 푏are odd, then 4 divides 푎4 + 푏4 + 6.
11. Prove the following by using direct proof to prove the contrapositive.
(a) For every integer 푛, if 푛4 is even, then 푛is even.
(b) For all integers 푛, if 푛3 + 푛2 is odd, then 푛is odd.
(c) For all integers 푎and 푏, if 푎푏is even, then 푎is even or 푏is even.
12. Write paragraph proofs.
(a) The equation 푥−10 = 23 has a unique solution.
(b) The equation
√
2푥−5 = 2 has a unique solution.
(c) For every real number 푦, the equation 2푥+ 5푦= 10 has a unique solution.
(d) The equation 푥2 + 5푥+ 6 = 0 has at most two integer solutions.
13. From the proof of Example 2.4.14, prove that 푞> 푞′ and 푢< 푚.
14. Prove the results of Exercise 9 indirectly.
15. Prove using the method of biconditional proof.
(a) 푝∨푞→¬푟, 푠→푟, ¬푝∨푞→푠⊢푝↔¬푠
(b) 푝∨(¬푞∨푝), 푞∨(¬푝∨푞) ⊢푝↔푞
(c) (푝→푞) ∧(푟→푠), (푝→¬푠) ∧(푟→¬푞), 푝∨푟⊢푞↔¬푠
(d) 푝∧푟→¬(푠∨푡), ¬푠∨¬푡→푝∧푟⊢푠↔푡
16. Prove using the short rule of biconditional proof.
(a) 푝→푞∧푟⇔(푝→푞) ∧(푝→푟)
(b) 푝→푞∨푟⇔푝∧¬푞→푟
(c) 푝∨푞→푟⇔(푝→푟) ∧(푞→푟)
(d) 푝∧푞→푟⇔(푝→푟) ∨(푞→푟)
17. Let 푎, 푏, 푐, and 푑be integers. Write paragraph proofs using biconditional proof.
(a) 푎is even if and only if 푎2 is even.
(b) 푎is odd if and only if 푎+ 1 is even.
(c) 푎is even if and only if 푎+ 2 is even.
(d) 푎3 + 푎2 + 푎is even if and only if 푎is even.
(e) If 푐≠0, then 푎divides 푏if and only if 푎푐divides 푏푐.
18. Suppose that 푎and 푏are integers. Prove that the following are equivalent.
∙푎divides 푏.
∙푎divides −푏.
∙−푎divides 푏.
∙−푎divides −푏.
19. Let 푎be an integer. Prove that the following are equivalent.
∙푎is divisible by 3.
∙3푎is divisible by 9.
∙푎+ 3 is divisible by 3.

116
Chapter 2 FIRST-ORDER LOGIC
20. Prove by using direct proof but do not use the contrapositive: for all integers 푎and
푏, if 푎푏is even, then 푎is even or 푏is even.
21. Prove using proof by cases (Inference Rule 2.4.26).
(a) For all integers 푎, if 푎= 0 or 푏= 0, then 푎푏= 0.
(b) The square of every odd integer is of the form 8푘+ 1 for some integer 푘.
(Hint: Square 2푙+ 1. Then consider two cases: 푙is even and 푙is odd.)
(c) 푎2 + 푎+ 1 is odd for every integer 푎.
(d) The fourth power of every odd integer is of the form 16푘+1 for some integer
푘.
(e) Every nonhorizontal line intersects the 푥-axis.
22. Let 푎be an integer. Prove by cases.
(a) 2 divides 푎(푎+ 1)
(b) 3 divides 푎(푎+ 1)(푎+ 2)
23. For any real number 푐, the absolute value of 푐is deﬁned as
|푐| =
{
푐
if 푐≥0,
−푐
if 푐< 0.
Let 푎be a positive real number. Prove the following about absolute value for every real
number 푥.
(a) | −푥| = |푥|
(b) |푥2| = |푥|2
(c) 푥≤|푥|
(d) |푥푦| = |푥| |푦|
(e) |푥| < 푎if and only if −푎< 푥< 푎.
(f)
|푥| > 푎if and only if 푥> 푎or 푥< −푎.
24. Take 푎and 푏to be nonzero integers and prove the given propositions.
(a) 푎divides 1 if and only if 푎= ±1.
(b) If 푎= ±푏, then |푎| = |푏|.

CHAPTER 3
SET THEORY
3.1
SETS AND ELEMENTS
The development of logic that resulted in the work of Chapters 1 and 2 went through
many stages and beneﬁted from the work of various mathematicians and logicians
through the centuries. Although modern logic can trace its roots to Descartes with
his mathesis universalis and Gottfried Leibniz’s De Arte Combinatoria (1666), the
beginnings of modern symbolic logic is generally attributed to Augustus De Morgan
[Formal Logic (1847)], George Boole [Mathematical Analysis of Logic (1847) and An
Investigation of the Laws of Thought (1847)], and Frege [Begriﬀsschrift (1879), Die
Grundlagen der Arithmetik (1884), and Grundgesetze der Arithmetik (1893)]. How-
ever, when it comes to set theory, it was Georg Cantor who, with his ﬁrst paper, “Ueber
eine Eigenschaft des Inbegriﬀs aller reellen algebraischen Zahlen” (1874), and over a
decade of research, is the founder of the subject. For the next four chapters, Cantor’s
set theory will be our focus.
A set is a collection of objects known as elements. An element can be almost any-
thing, such as numbers, functions, or lines. A set is a single object that can contain
many elements. Think of it as a box with things inside. The box is the set, and the
things are the elements. We use uppercase letters to label sets, and elements will usu-
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
117

118
Chapter 3 SET THEORY
ally be represented by lowercase letters. The symbol ∈(fashioned after the Greek letter
epsilon) is used to mean “element of,” so if 퐴is a set and 푎is an element of 퐴, write
∈푎퐴or, the more standard, 푎∈퐴. The notation 푎, 푏∈퐴means 푎∈퐴and 푏∈퐴. If
푐is not an element of 퐴, write 푐∉퐴. If 퐴contains no elements, it is the empty set. It
is represented by the symbol ∅. Think of the empty set as a box with no things inside.
Rosters
Since the elements are those that distinguish one set from another, one method that
is used to write a set is to list its elements and surround them with braces. This is
called the roster method of writing a set, and the list is known as a roster. The braces
signify that a set has been deﬁned. For example, the set of all integers between 1 and
10 inclusive is
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}.
Read this as “the set containing 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10.” The set of all integers
between 1 and 10 exclusive is
{2, 3, 4, 5, 6, 7, 8, 9}.
If the roster is too long, use ellipses (… ). When there is a pattern to the elements of
the set, write down enough members so that the pattern is clear. Then use the ellipses
to represent the continuing pattern. For example, the set of all integers inclusively
between 1 and 1,000,000 can be written as
{1, 2, 3, … , 999,999, 1,000,000}.
Follow this strategy to write inﬁnite sets as rosters. For instance, the set of even integers
can be written as
{… , −4, −2, 0, 2, 4, … }.
EXAMPLE 3.1.1
∙As a roster, { } denotes the empty set. Warning: Never write {∅} for the empty
set. This set has one element in it.
∙A set that contains exactly one element is called a singleton. Hence, the sets {1},
{푓}, and {∅} are singletons written in roster form. Also, 1 ∈{1}, 푓∈{푓},
and ∅∈{∅}.
∙The set of linear functions that intersect the origin with an integer slope can be
written as:
{… , −2푥, −푥, 0, 푥, 2푥, … }.
(Note: Here 0 represents the function 푓(푥) = 0.)
Let 퐴and 퐵be sets. These are equal if they contain exactly the same elements. The
notation for this is 퐴= 퐵. What this means is if any element is in 퐴, it is also in 퐵, and

Section 3.1 SETS AND ELEMENTS
119
conversely, if an element is in 퐵, it is in 퐴. To fully understand set equality, consider
again the analogy between sets and boxes. Suppose that we have a box containing a
carrot and a rabbit. We could describe it with the phrase the box that contains the
carrot and the rabbit. Alternately, it could be referred to as the box that contains the
orange vegetable and the furry, cotton-tailed animal with long ears. Although these
are diﬀerent descriptions, they do not refer to diﬀerent boxes. Similarly, the set {1, 3}
and the set containing the solutions of (푥−1)(푥−3) = 0 are equal because they contain
the same elements. Furthermore, the order in which the elements are listed does not
matter. The box can just as easily be described as the box with the rabbit and the carrot.
Likewise, {1, 3} = {3, 1}. Lastly, suppose that the box is described as containing the
carrot, the rabbit, and the carrot, forgetting that the carrot had already been mentioned.
This should not be confusing, for one understands that such mistakes are possible. It is
similar with sets. A repeated element does not add to the set. Hence, {1, 3} = {1, 3, 1}.
Famous Sets
Although sets can contain many diﬀerent types of elements, numbers are probably the
most common for mathematics. For this reason particular important sets of numbers
have been given their own symbols.
Symbol
Name
퐍
The set of natural numbers
퐙
The set of integers
퐐
The set of rational numbers
퐑
The set of real numbers
퐂
The set of complex numbers
As rosters,
퐍= {0, 1, 2, … }
and
퐙= {… , −2, −1, 0, 1, 2, … }.
Notice that we deﬁne the set of natural numbers to include zero and do not make a
distinction between counting numbers and whole numbers. Instead, write
퐙+ = {1, 2, 3, … }
and
퐙−= {… , −3, −2, −1}.
EXAMPLE 3.1.2
∙10 ∈퐙+, but 0 ∉퐙+.
∙4 ∈퐍, but −5 ∉퐍.
∙−5 ∈퐙, but .65 ∉퐙.

120
Chapter 3 SET THEORY
∙.65 ∈퐐and 1∕2 ∈퐐, but 휋∉퐐.
∙휋∈퐑, but 3 −2푖∉퐑.
∙3 −2푖∈퐂.
Of the sets mentioned above, the real numbers are probably the most familiar. It
is the set of numbers most frequently used in calculus and is often represented by a
number line. The line can be subdivided into intervals. Given two endpoints, an
interval includes all real numbers between the endpoints and possibly the endpoints
themselves. Interval notation is used to name these sets. A parenthesis next to an
endpoint means that the endpoint is not included in the set, while a bracket means that
the endpoint is included. If the endpoints are included, the interval is closed. If they
are excluded, the interval is open. If one endpoint is included and the other is not, the
interval is half-open. If the interval has only one endpoint, then the set is called a ray
and is deﬁned using the inﬁnity symbol (∞), with or without the negative sign.
DEFINITION 3.1.3
Let 푎, 푏∈퐑such that 푎< 푏.
closed interval
[푎, 푏]
closed ray
[푎, ∞)
open interval
(푎, 푏)
closed ray
(−∞, 푎]
half-open interval
[푎, 푏)
open ray
(푎, ∞)
half-open interval
(푎, 푏]
open ray
(−∞, 푎)
EXAMPLE 3.1.4
We can describe (4, 7) as
the interval of real numbers between 4 and 7 exclusive
and [4, 7] as
all real numbers between 4 and 7 inclusive.
There is not a straightforward way to name the half-open intervals. For (4, 7], we
can try
the set of all real numbers 푥such that 4 < 푥≤7
or
the set of all real numbers greater than 4 and less than or equal to 7.
The inﬁnity symbol does not represent a real number, so a parenthesis must be used
with it. Furthermore, the interval (−∞, ∞) can be used to denote 퐑.

Section 3.1 SETS AND ELEMENTS
121
0
3
−1
−4
1
−2
−3
4
2
(a) (−1, 3]
0
3
−1
−4
1
−2
−3
4
2
(b) (−∞, 2]
Figure 3.1
A half-open interval and a closed ray.
EXAMPLE 3.1.5
The interval (−1, 3] contains all real numbers that are greater than −1 but less
than or equal to 3 [Figure 3.1(a)]. A common mistake is to equate (−1, 3] with
{0, 1, 2, 3}. It is important to remember that (−1, 3] includes all real numbers
between −1 and 3. Hence, this set is inﬁnite, as is (−∞, 2). It contains all real
numbers less than 2 [Figure 3.1(b)].
EXAMPLE 3.1.6
Let 푝(푥) := 푥+ 2 = 7. Since 푝(5) and there is no other real number 푎such that
푝(푎), there exists a unique 푥∈퐑such that 푝(푥). However, if 푎is an element of
퐙−or (−∞, 5), then ¬푝(푎).
EXAMPLE 3.1.7
If 푞(푥) := 푥≥10, then 푞(푥) for all 푥∈[20, 100], there exists 푥∈퐐such that
¬푞(푥), and there is no element 푎of {1, 2, 3} such that 푞(푎).
Abstraction
When trying to write sets as rosters, we quickly discover issues with the technique.
Since the rational numbers are deﬁned using integers, we suspect that 퐐can be written
as a roster, but when we try to begin a list, such as
1, 1
2, 1
3, … , 2, 2
3, … ,
we realize that there are complications with the pattern and are not quite sure that the
we will exhaust them all. When considering 퐑, we know immediately that a roster is
out of the question. We conclude that we need another method.
Fix a ﬁrst-order alphabet with theory symbols 햲. Let 퐴be a set and 햲-formula 푝(푥)
have the property that for every 푎,
푎∈퐴⇔푝(푎).
Notice that 푝(푥) completely describes the members of 퐴. Namely, whenever we write
푎∈퐴, we can also write 푝(푎), and, conversely, whenever we write 푝(푎), we can also
write 푎∈퐴. For example, let 퐸be the set of even integers. As a roster,
퐸= {… , −4, −2, 0, 2, 4, … }.

122
Chapter 3 SET THEORY
Let 푝(푥) denote the formula
∃푛(푛∈퐙∧푥= 2푛).
(3.1)
The even integers are exactly those numbers 푥such that 푝(푥). In particular, we have
푝(2) and 푝(−4) but not 푝(5). Therefore, 2 and −4 are elements of 퐸, but 5 is not.
DEFINITION 3.1.8
Let 햠be a ﬁrst-order alphabet with theory symbols 햲. Let 푝(푥) be an 햲-formula
and 퐴be a set. Write 퐴= {푥: 푝(푥)} to mean
푎∈퐴⇔푝(푎).
Using {푥: 푝(푥)} to identify 퐴is called the method of abstraction.
Using Deﬁnition 3.1.8 and (3.1), write 퐸using abstraction as
퐸= {푥: ∃푛(푛∈퐙∧푥= 2푛)}
or
퐸= {푥: 푝(푥)}.
Read this as “the set of 푥such that 푝(푥).” Because 푥= 2푛, it is customary to remove 푥
from the deﬁnition of sets like 퐸and write
퐸= {2푛: ∈푛퐙},
or
퐸= {2푛: 푛∈퐙}.
Read this as “the set of all 2푛such that 푛is an integer.” This simpliﬁed notation is still
considered abstraction. Its form can be summarized as
{elements : condition}.
That is, what the elements look like come before the colon, and the condition that must
be satisﬁed to be an element of the set comes after the colon.
EXAMPLE 3.1.9
Given the quadratic equation 푥2 −푥−2 = 0, we know that its solutions are −1
and 2. Thus, its solution set is 퐴= {−1, 2}. Using the method of abstraction,
this can be written as
퐴= {푥: −−⋅푥푥푥2 = 0 ∧∈푥퐑}.
However, as we have seen, it is customary to write the formula so that it is easier
to read, so
퐴: 푥2 −푥−2 = 0 ∧푥∈퐑},

Section 3.1 SETS AND ELEMENTS
123
or, using a common notation,
퐴{푥∈퐑: 푥2 −푥−2 = 0}.
Therefore, given an arbitrary polynomial 푓(푥), its solution set over the real num-
bers is
{푥∈퐑: 푓(푥) = 0}.
EXAMPLE 3.1.10
Since 푥∉∅is always true, to write the empty set using abstraction, we use a
formula like 푥≠푥or a contradiction like 푃∧¬푃, where 푃is a propositional
form. Then,
∅= {푥∈퐑: 푥≠푥} = {푥: 푃∧¬푃}.
EXAMPLE 3.1.11
Using the natural numbers as the starting point, 퐙and 퐐can be deﬁned using
the abstraction method by writing
퐙= {푛: 푛∈퐍∨−푛∈퐍}
and
퐐=
{푎
푏: 푎, 푏∈퐙∧푏≠0
}
.
Notice the redundancy in the deﬁnition of 퐐. The fraction 1∕2 is named multiple
times like 2∕4 or 9∕18, but remember that this does not mean that the numbers
appear inﬁnitely many times in the set. They appear only once.
EXAMPLE 3.1.12
The open intervals can be deﬁned using abstraction.
(푎, 푏) = {푥∈퐑: 푎< 푥< 푏},
(푎, ∞) = {푥∈퐑: 푎< 푥},
(−∞, 푏) = {푥∈퐑: 푥< 푎}.
See Exercise 9 for the closed and half-open intervals. Also, as with 퐙+ and 퐙−,
the superscript + or −is always used to denote the positive or negative numbers,
respectively, of a set. For example,
퐑+ = {푥∈퐑: 푥> 0}
and
퐑−= {푥∈퐑: 푥< 0}.

124
Chapter 3 SET THEORY
EXAMPLE 3.1.13
Each of the following are written using the abstraction method and, where ap-
propriate, as a roster.
∙The set of all rational numbers with denominator equal to 3 in roster form
is
{
… , −3
3, −2
3, −1
3, 0
3, 1
3, 2
3, 3
3, …
}
.
Using abstraction, it is
{푛
3 : 푛∈퐙
}
.
∙The set of all linear polynomials with integer coeﬃcients and leading co-
eﬃcient equal to 1 is
{… , 푥−2, 푥−1, 푥, 푥+ 1, 푥+ 2, … }.
Using abstraction it is
{푥+ 푛: 푛∈퐙}.
∙The set of all polynomials of degree at most 5 can be written as
{푎5푥5 + · · · + 푎1푥+ 푎0 : 푎푖∈퐑∧푖= 0, 1, … , 5}.
Exercises
1. Determine whether the given propositions are true or false.
(a) 0 ∈퐍
(b) 1∕2 ∈퐙
(c) −4 ∈퐐
(d) 4 + 휋∈퐑
(e) 4.34534 ∈퐂
(f)
{1, 2} = {2, 1}
(g) {1, 2} = {1, 2, 1}
(h) [1, 2] = {1, 2}
(i)
(1, 3) = {2}
(j)
−1 ∈(−∞, −1)
(k) −1 ∈[−1, ∞)
(l)
∅∈(−2, 2)
(m) ∅∈∅
(n) 0 ∈∅
2. Write the given sets as rosters.
(a) The set of all integers between 1 and 5 inclusive
(b) The set of all odd integers
(c) The set of all nonnegative integers

Section 3.1 SETS AND ELEMENTS
125
(d) The set of integers in the interval (−3, 7]
(e) The set of rational numbers in the interval (0, 1) that can be represented with
exactly two decimal places
3. If possible, ﬁnd an element 푎in the given set such that 푎+ 3.14 = 0.
(a) 퐙
(b) 퐑
(c) 퐑+
(d) 퐑−
(e) 퐐
(f)
퐂
(g) (0, 6)
(h) (−∞, −1)
4. Determine whether the following are true or false.
(a) 1 ∈{푥: 푝(푥)} when ¬푝(1)
(b) 7 ∈{푥∈퐑: 푥2 −5푥−14 = 0}
(c) 7푥2 −0.5푥∈{푎2푥2 + 푎1푥+ 푎0 : 푎푖∈퐐}
(d) 푥푦∈{2푘: 푘∈퐙} if 푥is even and 푦is odd.
(e) cos 휃∈{푎cos 휃+ 푏sin 휃: 푎, 푏∈퐑}
(f)
{1, 3} = {푥: (푥−1)(푥−3) = 0}
(g) {1, 3} = {푥: (푥−1)(푥−3)2 = 0}
(h) {[ 푎0
0 0
] : 푎∈퐑} = {[ 푥0
0 푦
] : 푥∈퐑and 푦= 0}
5. Write the following given sets in roster form.
(a) {−3푛: 푛∈퐙}
(b) {0 ⋅푛: 푛∈퐑}
(c) {푛cos 푥: 푛∈퐙}
(d) {푎푥2 + 푎푥+ 푎: 푎∈퐍}
(e) {[ 푛0
0 0
] : 푛∈퐙}
6. Use a formula to uniquely describe the elements in the following sets. For example,
푥∈퐍if and only if 푥∈퐙∧푥≥0.
(a) (0, 1)
(b) (−3, 3]
(c) [0, ∞)
(d) 퐙+
(e) {… , −2, −1, 0, 1, 2, … }
(f)
{2푎, 4푎, 6푎, … }
7. Write each set using the method of abstraction.
(a) All odd integers
(b) All positive rational numbers
(c) All integer multiples of 7
(d) All integers that have a remainder of 1 when divided by 3

126
Chapter 3 SET THEORY
(e) All ordered pairs of real numbers in which the 푥-coordinate is positive and
the 푦-coordinate is negative
(f)
All complex numbers whose real part is 0
(g) All closed intervals that contain 휋
(h) All open intervals that do not contain a rational number
(i)
All closed rays that contain no numbers in (−∞, 3]
(j)
All 2 × 2 matrices with real entries that have a diagonal sum of 0
(k) All polynomials of degree at most 3 with real coeﬃcients
8. Write the given sets of real numbers using interval notation.
(a) The set of real numbers greater than 4
(b) The set of real numbers between −6 and −5 inclusive
(c) The set of real numbers 푥so that 푥< 5
(d) The set of real numbers 푥such that 10 < 푥≤14
9. Let 푎, 푏∈퐑with 푎< 푏. Write the given intervals using the abstraction method.
(a) [푎, 푏]
(b) [푎, ∞)
(c) (−∞, 푏]
(d) (푎, 푏]
3.2
SET OPERATIONS
We now use connectives to deﬁne the set operations. These allow us to build new sets
from given ones.
Union and Intersection
The ﬁrst set operation is deﬁned using the ∨connective.
DEFINITION 3.2.1
The union of 퐴and 퐵is
퐴∪퐵= {푥: 푥∈퐴∨푥∈퐵}.
The union of sets can be viewed as the combination of all elements from the sets. On
the other hand, the next set operation is deﬁned with ∧and can be considered as the
overlap between the given sets.
DEFINITION 3.2.2
The intersection of 퐴and 퐵is
퐴∩퐵= {푥: 푥∈퐴∧푥∈퐵}.

Section 3.2 SET OPERATIONS
127
A
B
U
(a) 퐴∪퐵
U
A
B
(b) 퐴∩퐵
Figure 3.2
Venn diagrams for union and intersection.
For example, if 퐴= {1, 2, 3, 4} and 퐵= {3, 4, 5, 6}, then
퐴∪퐵= {1, 2, 3, 4, 5, 6}
and
퐴∩퐵= {3, 4}.
The operations of union and intersection can be illustrated with pictures called Venn
diagrams, named after the logician John Venn who used a variation of these drawings
in his text on symbolic logic (Venn 1894). First, assume that all elements are members
of a ﬁxed universe 푈(page 97). In set theory, the universe is considered to be the
set of all possible elements in a given situation. Use circles to represent sets and a
rectangle to represent 푈. The space inside these shapes represent where elements might
exist. Shading is used to represent where elements might exist after applying some set
operations. The Venn diagram for union is in Figure 3.2(a) and the one for intersection
is in Figure 3.2(b). If sets have no elements in their intersection, we can use the next
deﬁnition to name them.
DEFINITION 3.2.3
The sets 퐴and 퐵are disjoint or mutually exclusive when 퐴∩퐵= ∅.
The sets {1, 2, 3} and {6, 7} are disjoint. A Venn diagram for two disjoint sets is given
in Figure 3.3.
Set Difference
The next two set operations take all of the elements of one set that are not in another.
They are deﬁned using the not connective.
DEFINITION 3.2.4
The set diﬀerence of 퐵from 퐴is
퐴⧵퐵= {푥: 푥∈퐴∧푥∉퐵}.

128
Chapter 3 SET THEORY
U
A
B
Figure 3.3
A Venn diagram for disjoint sets.
The complement of 퐴is deﬁned as
퐴= 푈⧵퐴= {푥: 푥∈푈∧푥∉퐴}.
Read 퐴⧵퐵as “퐴minus 퐵” or “퐴without 퐵.” See Figure 3.4(a) for the Venn diagram
of the set diﬀerence of sets and Figure 3.4(b) for the complement of a set.
EXAMPLE 3.2.5
The following equalities use set diﬀerence.
∙퐍= 퐙⧵퐙−
∙The set of irrational numbers is 퐑⧵퐐.
∙퐑= 퐂⧵{푎+ 푏푖: 푎, 푏∈퐑∧푏≠0}
U
A
B
(a) 퐴⧵퐵
U
A
(b) 퐴
Figure 3.4
Venn diagrams for set difference and complement.

Section 3.2 SET OPERATIONS
129
EXAMPLE 3.2.6
Let 푈= {1, 2, … , 10}. Use a Venn diagram to ﬁnd the results of the set op-
erations on 퐴= {1, 2, 3, 4, 5} and 퐵= {3, 4, 5, 6, 7, 8}. Each element will be
represented as a point and labeled with a number.
U
A
B
1
10
9
8
7
6
5
4
3
2
∙퐴∪퐵= {1, 2, 3, 4, 5, 6, 7, 8}
∙퐴∩퐵= {3, 4, 5}
∙퐴⧵퐵= {1, 2}
∙퐴= {6, 7, 8, 9, 10}
EXAMPLE 3.2.7
Let 퐶= (−4, 2), 퐷= [−1, 3], and 푈= 퐑. Use the diagram to perform the set
operations.
0
3
−1
−4
1
−2
−3
4
2
0
3
−1
−4
1
−2
−3
4
2
C ∪ D
C  D
C ∩ D
∙퐶∪퐷= (−4, 3]
∙퐶∩퐷= [−1, 2)
∙퐶⧵퐷= (−4, −1)
∙퐶= (−∞, −4] ∪[2, ∞)

130
Chapter 3 SET THEORY
Cartesian Products
The last set operation is not related to the logic connectives as the others, but it is
nonetheless very important to mathematics. Let 퐴and 퐵be sets. Given elements
푎∈퐴and 푏∈퐵, we call (푎, 푏) an ordered pair. In this context, 푎and 푏are called
coordinates. It is similar to the set {푎, 푏} except that the order matters. The deﬁnition
is due to Kazimierz Kuratowski (1921).
DEFINITION 3.2.8
If 푎∈퐴and 푏∈퐵,
(푎, 푏) = {{푎}, {푎, 푏}}.
Notice that (푎, 푏) = (푎′, 푏′) means that
{{푎}, {푎, 푏}} = {{푎′}, {푎′, 푏′}},
which implies that 푎= 푎′ and 푏= 푏′. Therefore,
(푎, 푏) = (푎′, 푏′) if and only if 푎= 푎′ and 푏= 푏′.
The set of all ordered pairs with the ﬁrst coordinate from 퐴and the second from 퐵
is named after René Descartes.
DEFINITION 3.2.9
The Cartesian product of 퐴and 퐵is
퐴× 퐵= {(푎, 푏) : 푎∈퐴∧푏∈퐵}.
The product 퐑2 = 퐑× 퐑is the set of ordered pairs of the Cartesian plane.
EXAMPLE 3.2.10
∙Since (1, 2) ≠(2, 1),
{1, 2} × {0, 1, 2} = {(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)}.
Even though we have a set deﬁnition for an ordered pair, we can still visually
represent this set on a grid as in Figure 3.5(a).
∙If 퐴= {1, 2, 7} and 퐵= {∅, {1, 5}},
퐴× 퐵= {(1, ∅), (1, {1, 5}), (2, ∅), (2, {1, 5}), (7, ∅), (7, {1, 5})}.
See Figure 3.5(b).
∙For any set 퐴, ∅× 퐴= 퐴× ∅= ∅because ¬∃푥(푥∈∅∧푦∈퐴).

Section 3.2 SET OPERATIONS
131
1
2
0
1
2
(1, 2)
(a) {1, 2} × {0, 1, 2}
1
2
7
{1, 5}
∅
(2, {1, 5})
(7, ∅)
(b) {1, 2, 7} × {∅, {1, 5}}
Figure 3.5
Two Cartesian products.
We generalize Deﬁnition 3.2.8 by deﬁning
(푎, 푏, 푐) = {{푎}, {푎, 푏}, {푎, 푏, 푐}},
(푎, 푏, 푐, 푑) = {{푎}, {푎, 푏}, {푎, 푏, 푐}, {푎, 푏, 푐, 푑}},
and for 푛∈퐍,
(푎0, 푎1, … , 푎푛−1) = {{푎0}, {푎0, 푎1}, … , {푎0, 푎1, … , 푎푛−1}},
which is called an ordered n-tuple. Then,
퐴× 퐵× 퐶= {(푎, 푏, 푐) : 푎∈퐴∧푏∈퐵∧푐∈퐶},
퐴× 퐵× 퐶× 퐷= {(푎, 푏, 푐, 푑) : 푎∈퐴∧푏∈퐵∧푐∈퐶∧푑∈퐷},
and
퐴푛= {(푎0, 푎1, … , 푎푛−1) : 푎푖∈퐴∧푖= 0, 1, … , 푛−1}.
Speciﬁcally, 퐑3 = 퐑× 퐑× 퐑, and
퐑푛= 퐑× 퐑× · · · × 퐑
⏟⏞⏞⏞⏞⏞⏞⏞⏞⏟⏞⏞⏞⏞⏞⏞⏞⏞⏟
푛times
,
which is known as Cartesian n-space.
EXAMPLE 3.2.11
Let 퐴= {1}, 퐵= {2}, 퐶= {3}, and 퐷= {4}. Then,
퐴× 퐵× 퐶× 퐷= {(1, 2, 3, 4)}
is a singleton containing an ordered 4-tuple. Also,
(퐴× 퐵) ∪(퐶× 퐷) = {(1, 2), (3, 4)},
but
퐴× (퐵∪퐶) × 퐷= {(1, 2, 4), (1, 3, 4)}.

132
Chapter 3 SET THEORY
Order of Operations
As with the logical connectives, we need an order to make sense of expressions that
involve many operations. To do this, we note the association between the set operations
and certain logical connectives.
퐴
퐴⧵퐵
}
¬
퐴∩퐵
∧
퐴∪퐵
∨
From this we derive the order for the set operations.
DEFINITION 3.2.12 [Order of Operations]
To ﬁnd a set determined by set operations, read from left to right and use the
following precedence.
∙sets within parentheses (innermost ﬁrst),
∙complements,
∙set diﬀerences,
∙intersections,
∙unions.
EXAMPLE 3.2.13
If the universe is taken to be {1, 2, 3, 4, 5}, then
{5} ∪{1, 2} ∩{2, 3} = {5} ∪{3, 4, 5} ∩{2, 3} = {5} ∪{3} = {3, 5}
This set can be written using parentheses as
{5} ∪({1, 2} ∩{2, 3}).
However,
({5} ∪{1, 2}) ∩{2, 3} = ({5} ∪{3, 4, 5}) ∩{2, 3} = {3, 4, 5} ∩{2, 3} = {3},
showing that
{5} ∪{1, 2} ∩{2, 3} ≠({5} ∪{1, 2}) ∩{2, 3}.

Section 3.2 SET OPERATIONS
133
EXAMPLE 3.2.14
Deﬁne 퐴= {1}, 퐵= {2}, 퐶= {3}, and 퐷= {4}. Then, we have
퐴∪퐵∪퐶∪퐷= {1, 2, 3, 4}.
Written with parentheses and brackets,
퐴∪퐵∪퐶∪퐷= ([(퐴∪퐵) ∪퐶] ∪퐷).
With the given assignments, 퐴∩퐵∩퐶∩퐷is empty.
Exercises
1. Each of the given propositions are false. Replace the underlined word with another
word to make the proposition true.
(a) Intersection is deﬁned using a disjunction.
(b) Set diagrams are used to illustrate set operations.
(c) 퐑⧵(퐑⧵퐐) is the set of irrational numbers.
(d) Set diﬀerence has a higher order of precedence than complements.
(e) The complement of 퐴is equal to 퐑set minus 퐴.
(f)
The intersection of two intervals is always an interval.
(g) The union of two intervals is never an interval.
(h) 퐴× 퐵is equal to ∅if 퐵does not contain ordered pairs.
2. Let 퐴= {0, 2, 4, 6}, 퐵= {3, 4, 5, 6}, 퐶= {0, 1, 2}, and 푈= {0, 1, … , 9, 10}.
Write the given sets in roster notation.
(a) 퐴∪퐵
(b) 퐴∩퐵
(c) 퐴⧵퐵
(d) 퐵⧵퐴
(e) 퐴
(f)
퐴× 퐵
(g) 퐴∪퐵∩퐶
(h) 퐴∩퐵∪퐶
(i)
퐴∩퐵
(j)
퐴∪퐴∩퐵
(k) 퐴⧵퐵⧵퐶
(l)
퐴∪퐵⧵퐴∩퐶
3. Write each of the given sets using interval notation.
(a) [2, 3] ∩(5∕2, 7]
(b) (−∞, 4) ∪(−6, ∞)
(c) (−2, 4) ∩[−6, ∞)
(d) ∅∪(4, 12]

134
Chapter 3 SET THEORY
4. Identify each of the the given sets.
(a) [6, 17] ∩[17, 32)
(b) [6, 17) ∩[17, 32)
(c) [6, 17] ∪(17, 32)
(d) [6, 17) ∪(17, 32)
5. Draw Venn diagrams.
(a) 퐴∩퐵
(b) 퐴∪퐵
(c) 퐴∩퐵∪퐶
(d) (퐴∪퐵) ⧵퐶
(e) 퐴∩퐶∩퐵
(f)
퐴⧵퐵∩퐶
6. Match each Venn diagram to as many sets as possible.
(A)
(B)
(C)
(D)
(E)
(F)
(a) 퐴∪퐵
(b) 퐴⧵퐵
(c) 퐴∩퐵
(d) (퐴∪퐵) ⧵(퐴∩퐵)
(e) 퐴∩퐵∪퐴∩퐶∪퐵∩퐶
(f)
퐴∩퐵∪퐴⧵퐵
(g) (퐴∪퐵) ∩(퐴∪퐵)
(h) [(퐴∪퐵) ∩퐶] ∪[(퐴∪퐵) ∩퐶]
(i)
[퐴∩퐵∩퐶] ∪[퐴∩퐵∩퐶]
(j)
퐴⧵(퐵∪퐶) ∩퐵⧵(퐴∪퐶) ∩퐶⧵(퐴∪퐵)
7. The ordered pair (1, 2) is paired with the ordered pair (2, 1) using a set operation.
Write each resulting set as a roster.
(a) (1, 2) ∪(2, 1)
(b) (1, 2) ∩(2, 1)
(c) (1, 2) ⧵(2, 1)
8. Let 푝(푥) be a formula. Prove the following.
(a) ∀푥[푥∈퐴∪퐵→푝(푥)] ⇒∀푥[푥∈퐴∩퐵→푝(푥)]

Section 3.3 SETS WITHIN SETS
135
(b) ∀푥[푥∈퐴∪퐵→푝(푥)] ⇔∀푥[푥∈퐴→푝(푥)] ∧∀푥[푥∈퐵→푝(푥)]
(c) ∃푥[푥∈퐴∩퐵∧푝(푥)] ⇒∃푥[푥∈퐴∧푝(푥)] ∧∃푥[푥∈퐵∧푝(푥)]
(d) ∃푥[푥∈퐴∪퐵∧푝(푥)] ⇔∃푥[푥∈퐴∧푝(푥)] ∨∃푥[푥∈퐵∧푝(푥)]
9. Find a formula 푝(푥) and sets 퐴and 퐵to show that the following are false.
(a) ∀푥[푥∈퐴→푝(푥)] ∨∀푥[푥∈퐵→푝(푥)] ⇒∀푥[푥∈퐴∪퐵→푝(푥)]
(b) ∃푥[푥∈퐴∧푝(푥)] ∧∃푥[푥∈퐵∧푝(푥)] ⇒∃푥[푥∈퐴∩퐵∧푝(푥)]
3.3
SETS WITHIN SETS
An important relation between any two sets is when one is contained within another.
Subsets
Let 퐴and 퐵be sets. 퐴is a subset of 퐵exactly when every element of 퐴is also an
element of 퐵, in symbols 퐴⊆퐵. This is represented in a Venn diagram by the circle
for 퐴being within the circle for 퐵[Figure 3.6(a)].
DEFINITION 3.3.1
For all sets 퐴and 퐵,
퐴⊆퐵⇔∀푥(푥∈퐴→푥∈퐵).
If 퐴is not a subset of 퐵, write 퐴⊈퐵. This is represented in a Venn diagram by 퐴
overlapping 퐵with a point in 퐴but not within 퐵[Figure 3.6(b)]. Logically, this means
퐴⊈퐵⇔¬∀푥(푥∈퐴→푥∈퐵) ⇔∃푥(푥∈퐴∧푥∉퐵).
Thus, to show 퐴⊈퐵ﬁnd an element in 퐴that is not in 퐵. For example, if we let
퐴= {1, 2, 3} and 퐵= {1, 2, 5}, then 퐴⊈퐵because 3 ∈퐴but 3 ∉퐵.
U
A
B
(a) 퐴⊆퐵
U
A
B
a
(b) 퐴⊈퐵
Figure 3.6
Venn diagrams for a subset and a nonsubset.

136
Chapter 3 SET THEORY
EXAMPLE 3.3.2
The proposition for all sets 퐴and 퐵, 퐴∪퐵⊆퐴is false. To see this, we must
prove that there exists 퐴and 퐵such that 퐴∪퐵⊈퐴. We take 퐴= {1} and
퐵= {2} as our candidates. Since 퐴∪퐵= {1, 2} and 2 ∉퐴, we have 퐴∪퐵⊈퐴.
Every set is the improper subset of itself. The notation 퐴⊂퐵means 퐴⊆퐵but
퐴≠퐵. In this case, 퐴is a proper subset of 퐵.
EXAMPLE 3.3.3
∙{1, 2, 3} ⊂{1, 2, 3, 4, 5} and {1, 2, 3} ⊆{1, 2, 3}
∙퐍⊂퐙⊂퐐⊂퐑⊂퐂
∙(4, 5) ⊂(4, 5] ⊂[4, 5]
∙{1, 2, 3} is not a subset of {1, 2, 4}.
Our study of subsets begins with a fundamental theorem. It states that the empty set
is a subset of every set.
THEOREM 3.3.4
∅⊆퐴.
PROOF
Let 퐴be a set. Since 푥∉∅, we have
∀푥(푥∉∅∨푥∈퐴) ⇔∀푥(푥∈∅→푥∈퐴) ⇔∅⊆퐴.
Proving that one set is a subset of another always means proving an implication, so
Direct Proof is the primary tool in these proofs. That is, usually to prove that a set 퐴is
a subset of a set 퐵, take an element 푥∈퐴and show 푥∈퐵.
EXAMPLE 3.3.5
∙Let 푥∈퐙⧵퐍. Then, 푥∈퐙but 푥∉퐍, so 푥∈퐙by Simp. Thus, 퐙⧵퐍⊆퐙.
∙Let
퐴= {푥: ∃푛∈퐙[(푥−2푛)(푥−2푛−2) = 0]}
and
퐵= {2푛: 푛∈퐙}.
Take 푥∈퐴. This means that
∃푛∈퐙[(푥−2푛)(푥−2푛−2) = 0] .
In other words,
(푥−2푛)(푥−2푛−2) = 0

Section 3.3 SETS WITHIN SETS
137
for some 푛∈퐙. Hence,
푥−2푛= 0 or 푥−2푛−2 = 0.
We have two cases to check. If 푥−2푛= 0, then 푥= 2푛. This means 푥∈퐵. If
푥−2푛−2 = 0, then 푥= 2푛+ 2 = 2(푛+ 1), which also means 푥∈퐵since 푛+ 1
is an integer. Hence, 퐴⊆퐵.
∙Fix 푎, 푏∈퐙. Let 푥= 푛푎, some 푛∈퐙. This means 푥= 푛푎+ 0푏, which implies
that {푛푎: 푛∈퐙} ⊆{푛푎+ 푚푏: 푛, 푚∈퐙}.
This next result is based only on the deﬁnitions and Inference Rules 1.2.10. As with
Section 3.2, we see the close ties between set theory and logic.
THEOREM 3.3.6
∙퐴⊆퐴.
∙If 퐴⊆퐵and 퐵⊆퐶, then 퐴⊆퐶.
∙If 퐴⊆퐵and 푥∈퐴, then 푥∈퐵.
∙If 퐴⊆퐵and 푥∉퐵, then 푥∉퐴.
∙Let 퐴⊆퐵and 퐶⊆퐷. If 푥∈퐴or 푥∈퐶, then 푥∈퐵or 푥∈퐷.
∙Let 퐴⊆퐵and 퐶⊆퐷. If 푥∉퐵or 푥∉퐷, then 푥∉퐴or 푥∉퐶.
PROOF
Assume 퐴⊆퐵and 퐵⊆퐶. By deﬁnition, 푥∈퐴implies 푥∈퐵and 푥∈퐵
implies 푥∈퐶. Therefore, by HS, if 푥∈퐴, then 푥∈퐶. In other words, 퐴⊆퐶.
The remaining parts are left to Exercise 4.
Note that it is not the case that for all sets 퐴and 퐵, 퐴⊆퐵implies that 퐵⊆퐴. To
prove this, choose 퐴= ∅and 퐵= {0}. Then, 퐴⊆퐵yet 퐵⊈퐴because 0 ∈퐵and
0 ∉∅.
Equality
For two sets to be equal, they must contain exactly the same elements (page 118 of
Section 3.1). This can be stated more precisely using the idea of a subset.
DEFINITION 3.3.7
퐴= 퐵means 퐴⊆퐵and 퐵⊆퐴.
To prove that two sets are equal, we show both inclusions. Let us do this to prove
퐴∪퐵= 퐴∩퐵. This is one of De Morgan’s laws. To prove it, we demonstrate both
퐴∪퐵⊆퐴∩퐵

138
Chapter 3 SET THEORY
and
퐴∩퐵⊆퐴∪퐵.
This amounts to proving a biconditional, which means we will use the rule of bicondi-
tional proof. Look at the ﬁrst direction:
푥∈퐴∪퐵
Given
¬(푥∈퐴∪퐵)
Deﬁnition of complement
¬(푥∈퐴∨푥∈퐵)
Deﬁnition of union
푥∉퐴∧푥∉퐵
De Morgan’s law
푥∈퐴∧푥∈퐵
Deﬁnition of complement
푥∈퐴∩퐵
Deﬁnition of intersection
Now read backward through those steps. Each follows logically when read in this order
because only deﬁnitions and replacement rules were used. This means that the steps
are reversible. Hence, we have a series of biconditionals, and we can use the short rule
of biconditional proof (page 108):
푥∈퐴∪퐵⇔¬(푥∈퐴∪퐵)
⇔¬(푥∈퐴∨푥∈퐵)
⇔푥∉퐴∧푥∉퐵
⇔푥∈퐴∧푥∈퐵
⇔푥∈퐴∩퐵.
Hence, 퐴∪퐵= 퐴∩퐵.
We must be careful when writing these types of proofs since it is easy to confuse
the notation.
∙The correct translation for 푥∈퐴∩퐵is 푥∈퐴∧푥∈퐵. Common mistakes for
this translation include using formulas with set operations:
x ∈ A  ∩  x ∈ B
Incorrect. A set should be on
either side of a set operation.
...and sets with connectives:
x ∈ A  ∧  B
Incorrect. A formula should
be present here.
Correct.

Section 3.3 SETS WITHIN SETS
139
Remember that connectives connect formulas and set operations connect sets.
∙Negations also pose problems. If a complement is used, ﬁrst translate using
푥∈퐴⇔푥∈푈∧푥∉퐴⇔푥∉퐴
and then proceed with the proof. Similarly, the formula 푥∉퐴∪퐵can be written
as neither 푥∉퐴∪푥∉퐵nor 푥∉퐴∨푥∉퐵. Instead, use DeM:
푥∉퐴∪퐵⇔¬(푥∈퐴∪퐵)
⇔¬(푥∈퐴∨푥∈퐵)
⇔푥∉퐴∧푥∉퐵
⇔푥∈퐴∩퐵.
We can now prove many basic properties about set operations. Notice how the fol-
lowing are closely related to their corresponding replacement rules (1.3.9).
THEOREM 3.3.8
∙Associative Laws
퐴∩퐵∩퐶= 퐴∩(퐵∩퐶)
퐴∪퐵∪퐶= 퐴∪(퐵∪퐶)
∙Commutative Laws
퐴∩퐵= 퐵∩퐴
퐴∪퐵= 퐵∪퐴
∙De Morgan’s Laws
퐴∪퐵= 퐴∩퐵
퐴∩퐵= 퐴∪퐵
∙Distributive Laws
퐴∩(퐵∪퐶) = 퐴∩퐵∪퐴∩퐶
퐴∪퐵∩퐶= (퐴∪퐵) ∩(퐴∪퐶)
∙Idempotent Laws
퐴∩퐴= 퐴
퐴∪퐴= 퐴.
EXAMPLE 3.3.9
We use the short rule of biconditional proof (page 108) to prove the equality
퐴∩퐵∩퐶= 퐴∩(퐵∩퐶).
푥∈퐴∩퐵∩퐶⇔푥∈퐴∩퐵∧푥∈퐶
⇔푥∈퐴∧푥∈퐵∧푥∈퐶
⇔푥∈퐴∧(푥∈퐵∧푥∈퐶)
⇔푥∈퐴∧(푥∈퐵∩퐶)
⇔푥∈퐴∩(퐵∩퐶).

140
Chapter 3 SET THEORY
Another way to prove it is to use a chain of equal signs.
퐴∩퐵∩퐶= {푥: 푥∈퐴∩퐵∧푥∈퐶}
= {푥: 푥∈퐴∧푥∈퐵∧푥∈퐶}
= {푥: 푥∈퐴∧(푥∈퐵∧푥∈퐶)}
= {푥: 푥∈퐴∧푥∈퐵∩퐶}
= 퐴∩(퐵∩퐶).
We have to be careful when proving equality. If two sets are equal, there are always
proofs for both inclusions. However, the steps needed for the one implication might
not simply be the steps for the converse in reverse. The next example illustrates this.
It is always true that 퐴∩퐵⊆퐴. However, the premise is needed to show the other
inclusion.
EXAMPLE 3.3.10
Let 퐴⊆퐵. Prove 퐴∩퐵= 퐴.
∙Let 푥∈퐴∩퐵. This means that 푥∈퐴and 푥∈퐵. Then, 푥∈퐴(Simp).
∙Assume that 푥is an element of 퐴. Since 퐴⊆퐵, 푥is also an element of 퐵.
Hence, 푥∈퐴∩퐵.
A more involved example of this uses the concept of divisibility. Let 푎, 푏∈퐙, not
both equal to zero. A common divisor of 푎and 푏is 푐when 푐∣푎and 푐∣푏. For
example, 4 is a common divisor of 48 and 36, but it is not the largest.
DEFINITION 3.3.11
Let 푎, 푏∈퐙with 푎and 푏not both zero. The integer 푔is the greatest common
divisor of 푎and 푏if 푔is a common divisor of 푎and 푏and 푒≤푔for every common
divisor 푒∈퐙. In this case, write 푔= gcd(푎, 푏).
For example,
12 = gcd(48, 36)
and
7 = gcd(0, 7).
Notice that it is important that at least one of the integers is not zero. The gcd(0, 0) is
undeﬁned since all 푎such that 푎≠0 divide 0. Further notice that the greatest common
divisor is positive.
EXAMPLE 3.3.12
Let 푎, 푏∈퐙. Prove for all 푛∈퐙,
gcd(푎+ 푛푏, 푏) = gcd(푎, 푏).

Section 3.3 SETS WITHIN SETS
141
If both pairs of numbers have the same common divisors, their greatest common
divisors must be equal. So, deﬁne
푆= {푘∈퐙: 푘∣푎+ 푛푏∧푘∣푏}
and
푇= {푘∈퐙: 푘∣푎∧푘∣푏}.
To show that the greatest common divisors are equal, prove 푆= 푇.
∙Let 푑∈푆. Then 푑∣푎+ 푛푏and 푑∣푏. This means 푎+ 푛푏= 푑푙and 푏= 푑푘
for some 푙, 푘∈퐙. We are left to show 푑∣푎. By substitution, 푎+푛푑푘= 푑푙.
Hence, 푑∈푇because
푎= 푑푙−푛푑푘= 푑(푙−푛푘).
∙Now take 푑∈푇. This means 푑∣푎and 푑∣푏. Thus, there exists 푙, 푘∈퐙
such that 푎= 푑푙and 푏= 푑푘. Then,
푎+ 푛푏= 푑푙+ 푛푑푘= 푑(푙+ 푛푘).
Therefore, 푑∣푎+ 푛푏and 푑∈푆.
As with subsets, let us now prove some results concerning the empty set and the
universe. We use two strategies.
∙Let 퐴be a set. We know that
퐴= ∅if and only if ∀푥(푥∉퐴).
Therefore, to prove that 퐴is empty, take an arbitrary 푎and show 푎∉퐴. This can
sometimes be done directly, but more often an indirect proof is better. That is,
assume 푎∈퐴and derive a contradiction. Since the contradiction arose simply
by assuming 푎∈퐴, this formula must be the problem. Hence, 퐴can have no
elements.
∙Let 푈be a universe. To prove 퐴= 푈, we must show that 퐴⊆푈and 푈⊆퐴.
The ﬁrst subset relation is always true. To prove the second, take an arbitrary el-
ement and show that it belongs to 퐴. This works because 푈contains all possible
elements.
EXAMPLE 3.3.13
∙Suppose 푥∈퐴∩∅. Then 푥∈∅, which is impossible. Therefore, 퐴∩∅= ∅.
∙Certainly, 퐴⊆퐴∪∅, so to show the opposite inclusion take 푥∈퐴∪∅. Since
푥∉∅, it must be the case that 푥∈퐴. Thus, 퐴∪∅⊆퐴, and we have that
퐴∪∅= 퐴.
∙From Exercise 5(b), we know 퐴∩푈⊆퐴, so let 푥∈퐴. This means that 푥must
also belong to the universe. Hence, 푥∈퐴∩푈, so 퐴∩푈= 퐴.
∙Certainly, 퐴∪푈⊆푈. Moreover, by Exercise 5(c), we have the other inclusion.
Thus, 퐴∪푈= 푈.

142
Chapter 3 SET THEORY
EXAMPLE 3.3.14
To prove that a set 퐴is not equal to the empty set, show ¬∀푥(푥∉퐴), but this is
equivalent to ∃푥(푥∈퐴). For instance, let
퐴= {푥∈퐑: 푥2 + 6푥+ 5 = 0}.
We know that 퐴is nonempty since −1 ∈퐴.
EXAMPLE 3.3.15
Let
퐴= {(푎, 푏) ∈퐑× 퐑: 푎+ 푏= 0}
and
퐵= {(0, 푏) : 푏∈퐑}.
These sets are not disjoint since (0, 0) is an element of both 퐴and 퐵. However,
퐴≠퐵because (1, −1) ∈퐴but (1, −1) ∉퐵.
Let us combine the two strategies to show a relationship between ∅and 푈.
THEOREM 3.3.16
For all sets 퐴and 퐵and universe 푈, the following are equivalent.
∙퐴⊆퐵
∙퐴∪퐵= 푈
∙퐴∩퐵= ∅.
PROOF
∙Assume 퐴⊆퐵. Suppose 푥∉퐴. Then, 푥∈퐴, which implies that 푥∈퐵.
Hence, for every element 푥, we have that 푥∈퐴or 푥∈퐵, and we conclude that
퐴∪퐵= 푈.
∙Suppose 퐴∪퐵= 푈. In order to obtain a contradiction, take 푥∈퐴∩퐵.
Then, 푥∈퐵. Since 푥∈퐴, the supposition also gives 푥∈퐵, a contradiction.
Therefore, 퐴∩퐵= ∅.
∙Let 퐴∩퐵= ∅. Assume 푥∈퐴. By hypothesis, 푥cannot be a member of 퐵,
otherwise the intersection would be nonempty. Hence, 푥∈퐵.
The following theorem is a generalization of the corresponding result concerning
subsets. The proof could have been written using the short rule of biconditional proof
or by appealing to Lemma 3.3.6 (Exercise 21).
THEOREM 3.3.17
If 퐴= 퐵and 퐵= 퐶, then 퐴= 퐶.

Section 3.3 SETS WITHIN SETS
143
PROOF
Assume 퐴= 퐵and 퐵= 퐶. This means 퐴⊆퐵, 퐵⊆퐴, 퐵⊆퐶, and 퐶⊆퐵.
We must show that 퐴= 퐶.
∙Let 푥∈퐴. By hypothesis, 푥is then an element of 퐵, which implies that
푥∈퐶.
∙Let 푥∈퐶. Then, 푥∈퐵, from which 푥∈퐴follows.
The last result of the section involves the Cartesian product. The ﬁrst part is illus-
trated in Figure 3.7. The sets 퐵and 퐶are illustrated along the vertical axis and 퐴is
illustrated along the horizontal axis. The Cartesian products are represented as boxes.
The other parts of the theorem can be similarly visualized.
THEOREM 3.3.18
∙퐴× (퐵∩퐶) = (퐴× 퐵) ∩(퐴× 퐶).
∙퐴× (퐵∪퐶) = (퐴× 퐵) ∪(퐴× 퐶).
∙퐴× (퐵⧵퐶) = (퐴× 퐵) ⧵(퐴× 퐶).
∙(퐴× 퐵) ∩(퐶× 퐷) = (퐴∩퐶) × (퐵∩퐷).
PROOF
We prove the ﬁrst equation. The last three are left to Exercise 19. Take three sets
퐴, 퐵, and 퐶. Then,
(푎, 푏) ∈퐴× (퐵∩퐶) ⇔푎∈퐴∧푏∈퐵∩퐶
⇔푎∈퐴∧푏∈퐵∧푎∈퐴∧푏∈퐶
⇔(푎, 푏) ∈퐴× 퐵∧(푎, 푏) ∈퐴× 퐶
⇔(푎, 푏) ∈(퐴× 퐵) ∩(퐴× 퐶).
A
C
B
A × B
A × C
A × (B ∩ C)
Figure 3.7
퐴× (퐵∩퐶) = (퐴× 퐵) ∩(퐴× 퐶).

144
Chapter 3 SET THEORY
Inspired by the last result, we might try proving that (퐴× 퐵) ∪(퐶× 퐷) is always
equal to (퐴∪퐶) × (퐵∪퐷), but no such proof exists. To show this, take 퐴= 퐵= {1}
and 퐶= 퐷= {2}. Then
(퐴∪퐶) × (퐵∪퐷) = {1, 2} × {1, 2} = {(1, 1), (1, 2), (2, 1), (2, 2)}.
but
(퐴× 퐵) ∪(퐶× 퐷) = {(1, 1)} ∪{(2, 2)} = {(1, 1), (2, 2)},
Hence, (퐴∪퐶) × (퐵∪퐷) ⊈(퐴× 퐵) ∪(퐶× 퐷). Notice, however, that the opposite
inclusion is always true (Exercise 3.3.8).
Exercises
1. Answer true or false.
(a) ∅∈∅
(b) ∅⊆{1}
(c) 1 ∈퐙
(d) 1 ⊆퐙
(e) 1 ∈∅
(f)
{1} ⊆∅
(g) 0 ∈∅
(h) {1} ∈퐙
(i)
∅⊆∅
2. Answer true or false. For each false proposition, ﬁnd one element that is in the ﬁrst
set but is not in the second.
(a) 퐙+ ⊆퐂
(b) 퐐+ ⊆퐙+
(c) 퐐⧵퐑⊆퐙
(d) 퐑⧵퐐⊆퐙
(e) 퐙∩(−1, 1) ⊆퐐
(f)
(0, 1) ⊆퐐+
(g) (0, 1) ⊆{0, 1, 2}
(h) (0, 1) ⊆(0, 1]
3. Prove.
(a) {푥∈퐑: 푥2 −3푥+ 2 = 0} ⊆퐍
(b) (0, 1) ⊆[0, 1]
(c) [0, 1] ⊈(0, 1)
(d) 퐙× 퐙⊈퐙× 퐍
(e) (0, 1) ∩퐐⊈[0, 1] ∩퐙
(f)
퐑⊆퐂
(g) {푏푖: 푏∈퐑} ⊆퐂
(h) 퐂⊈퐑

Section 3.3 SETS WITHIN SETS
145
4. Prove the remaining parts of Theorem 3.3.6.
5. Prove.
(a) 퐴⊆푈
(b) 퐴∩퐵⊆퐴
(c) 퐴⊆퐴∪퐵
(d) 퐴⧵퐵⊆퐴
(e) If 퐴⊆퐵, then 퐴∪퐶⊆퐵∪퐶.
(f)
If 퐴⊆퐵, then 퐴∩퐶⊆퐵∩퐶.
(g) If 퐴⊆퐵, then 퐶⧵퐵⊆퐶⧵퐴.
(h) If 퐴≠∅, then 퐴⊈퐴.
(i)
If 퐴⊆퐵, then 퐵⊆퐴.
(j)
If 퐴⊆퐵, then {1} × 퐴⊆{1} × 퐵.
(k) If 퐴⊆퐶and 퐵⊆퐷, then 퐴× 퐵⊆퐶× 퐷.
(l)
If 퐴⊆퐶and 퐵⊆퐷, then 퐶× 퐷⊆퐴× 퐵.
6. Prove that 퐴⊆퐵if and only if 퐵⊆퐴.
7. Show that the given proposition is false:
for all sets 퐴and 퐵, if 퐴∩퐵≠∅, then 퐴⊈퐴∩퐵.
8. Prove: (퐴× 퐵) ∪(퐶× 퐷) ⊆(퐴∪퐶) × (퐵∪퐷).
9. Take 푎, 푏, 푐∈퐍. Let 퐴= {푛∈퐍: 푛∣푎} and 퐶= {푛∈퐍: 푛∣푐}. Suppose 푎∣푏
and 푏∣푐. Prove 퐴⊆퐶.
10. Prove.
(a) 퐵⊆퐴and 퐶⊆퐴if and only if 퐵∪퐶⊆퐴.
(b) 퐴⊆퐵and 퐴⊆퐶if and only if 퐴⊆퐵∩퐶.
11. Prove the unproven parts of Theorem 3.3.8.
12. Prove each equality.
(a) ∅= 푈
(b) 푈= ∅
(c) 퐴∩퐴= ∅
(d) 퐴∪퐴= 푈
(e) 퐴= 퐴
(f)
퐴⧵퐴= ∅
(g) 퐴⧵∅= 퐴
(h) 퐴∩퐵= 퐵⧵퐴
(i)
퐴⧵퐵= 퐴∩퐵
(j)
퐴∪퐵∩퐵= ∅
(k) 퐴∩퐵⧵퐴= ∅

146
Chapter 3 SET THEORY
13. Sketch a Venn diagram for each problem and then write a proof.
(a) 퐴= 퐴∩퐵∪퐴∩퐵
(b) 퐴∪퐵= 퐴∪퐴∩퐵
(c) 퐴⧵(퐵⧵퐶) = 퐴∩(퐵∪퐶)
(d) 퐴⧵(퐴∩퐵) = 퐴⧵퐵
(e) 퐴∩퐵∪퐴∩퐵∪퐴∩퐵= 퐴∪퐵
(f)
(퐴∪퐵) ⧵퐶= 퐴⧵퐶∪퐵⧵퐶
(g) 퐴⧵(퐵⧵퐶) = 퐴⧵퐵∪퐴∩퐶
(h) 퐴⧵퐵⧵퐶= 퐴⧵(퐵∪퐶)
14. Prove.
(a) If 퐴⊆퐵, then 퐴⧵퐵= ∅.
(b) If 퐴⊆∅, then 퐴= ∅.
(c) Let 푈be a universe. If 푈⊆퐴, then 퐴= 푈.
(d) If 퐴⊆퐵, then 퐵⧵(퐵⧵퐴) = 퐴.
(e) 퐴× 퐵= ∅if and only if 퐴= ∅or
15. Let 푎, 푐, 푚∈퐙and deﬁne 퐴= {푎+푚푘: 푘∈퐙} and 퐵= {푎+푚(푐+푘) : 푘∈퐙}.
Show 퐴= 퐵.
16. Prove 퐴= 퐵, where
퐴= {[ 푎0
0 푏
] : 푎+ 푏= 0 ∧푎, 푏∈퐑}
and
퐵= {[ 푎푏
푐푑
] : 푎= −푑∧푏2 + 푐2 = 0 ∧푎, 푏, 푐, 푑∈퐑} .
17. Prove.
(a) 퐐≠퐙
(b) 퐂≠퐑
(c) {0} × 퐙≠퐙
(d) 퐑× 퐙≠퐙× 퐑
(e) If 퐴= {푎푥3 + 푏: 푎, 푏∈퐑} and 퐵= {푥3 + 푏: 푏∈퐑}, then 퐴≠퐵.
(f)
If 퐴= {푎푥3 + 푏: 푎, 푏∈퐙} and 퐵= {푎푥3 + 푏: 푎, 푏∈퐂}, then 퐴≠퐵.
(g) 퐴≠퐵, where
퐴= {[ 푎0
0 푏
] : 푎, 푏∈퐑}
and
퐵= {[ 푎푏
푐푑
] : 푎, 푏, 푐, 푑∈퐑} .
18. Find 퐴and 퐵to illustrate the given inequalities.
(a) 퐴⧵퐵≠퐵⧵퐴
(b) (퐴× 퐵) × 퐶≠퐴× (퐵× 퐶)
(c) 퐴× 퐵≠퐵× 퐴
19. For the remaining parts of Theorem 3.3.18, draw diagrams as in Figure 3.7 and
prove the results.

Section 3.3 SETS WITHIN SETS
147
20. Is it possible for 퐴= 퐴? Explain.
21. Prove Theorem 3.3.17 by ﬁrst using the short rule of biconditional proof and then
by directly appealing to Theorem 3.3.6.
22. Prove that the following are equivalent.
∙퐴⊆퐵
∙퐴∪퐵= 퐵
∙퐴⧵퐵= ∅
∙퐴∩퐵= 퐴
23. Prove that the following are equivalent.
∙퐴∩퐵= ∅
∙퐴⧵퐵= ∅
∙퐴⊆퐵
24. Find an example of sets 퐴, 퐵, and 퐶such that 퐴∩퐵= 퐴∩퐶but 퐵≠퐶.
25. Does 퐴∪퐵= 퐴∪퐶imply 퐵= 퐶for all sets 퐴and 퐵? Explain.
26. Prove.
(a) If 퐴∪퐵⊆퐴∩퐵, then 퐴= 퐵.
(b) If 퐴∩퐵= 퐴∩퐶and 퐴∪퐵= 퐴∪퐶, then 퐵= 퐶.
27. Prove that there is a cancellation law with the Cartesian product. Namely, if 퐴≠∅
and 퐴× 퐵= 퐴× 퐶, then 퐵= 퐶.
28. When does 퐴× 퐵= 퐶× 퐷imply that 퐴= 퐶and 퐵= 퐷?
29. Prove.
(a) If 퐴∪퐵≠∅, then 퐴≠∅or 퐵≠∅.
(b) If 퐴∩퐵≠∅, then 퐴≠∅and 퐵≠∅.
30. Find the greatest common divisors of each pair.
(a) 12 and 18
(b) 3 and 9
(c) 14 and 0
(d) 7 and 15
31. Let 푎be a positive integer. Find the following and prove the result.
(a) gcd(푎, 푎+ 1)
(b) gcd(푎, 2푎)
(c) gcd(푎, 푎2)
(d) gcd(푎, 0)

148
Chapter 3 SET THEORY
3.4
FAMILIES OF SETS
The elements of a set can be sets themselves. We call such a collection a family of sets
and often use capital script letters to name them. For example, let
ℰ= {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}}.
(3.2)
The set ℰhas three elements: {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}.
EXAMPLE 3.4.1
∙{1, 2, 3} ∈{{1, 2, 3}, {1, 4, 9}}
∙1 ∉{{1, 2, 3}, {1, 4, 9}}
∙{1, 2, 3} ⊈{{1, 2, 3}, {1, 4, 9}}
∙{{1, 2, 3}} ⊆{{1, 2, 3}, {1, 4, 9}}.
EXAMPLE 3.4.2
∙∅⊆{∅, {∅}} by Theorem 3.3.4.
∙{∅} ⊆{∅, {∅}} because ∅∈{∅, {∅}}.
∙{{∅}} ⊆{∅, {∅}} because {∅} ∈{∅, {∅}}.
Families of sets can have inﬁnitely many elements. For example, let
ℱ= {[푛, 푛+ 1] : 푛∈퐙}.
(3.3)
In roster notation,
ℱ= {… , [−2, −1] , [−1, 0] , [0, 1] , [1, 2] , … }.
Notice that in this case, abstraction is more convenient. For each integer 푛, the closed
interval [푛, 푛+ 1] is in ℱ. The set 퐙plays the role of an index set, a set whose only
purpose is to enumerate the elements of the family. Each element of an index set is
called an index. If we let 퐼= 퐙and 퐴푖= [푖, 푖+ 1], the family can be written as
ℱ= {퐴푖: 푖∈퐼}.
To write the family ℰ(3.2) using an index set, let 퐼= {0, 1, 2} and deﬁne
퐴0 = {1, 2, 3},
퐴1 = {2, 3, 4},
퐴2 = {3, 4, 5}.
Then, the family illustrated in Figure 3.8 is
ℰ= {퐴푖: 푖∈퐼} = {퐴1, 퐴2, 퐴3}.

Section 3.4 FAMILIES OF SETS
149
1
2
3
2
3
4
3
4
5
A
A
A
0
1
2
ℰ
Figure 3.8
The family of sets ℰ= {퐴푖: 푖∈퐼} with 퐼= {1, 2, 3}.
There is no reason why 퐼must be {0, 1, 2}. Any three-element set will do. The order
in which the sets are deﬁned is also irrelevant. For instance, we could have deﬁned
퐼= {푤, 휋, 99} and
퐴푤= {3, 4, 5},
퐴휋= {2, 3, 4},
퐴99 = {1, 2, 3}.
The goal is to have each set in the family referenced or indexed by at least one element
of the set. We will still have ℰ= {퐴푖: 푖∈퐼} with a similar diagram (Figure 3.9).
EXAMPLE 3.4.3
Write ℱ(3.3) using 퐍as the index set instead of 퐙. Use the even natural num-
bers to index the intervals with a nonnegative integer left-hand endpoint. The
odd natural numbers will index the intervals with a negative integer left-hand
endpoint. To do this, deﬁne the sets 퐵푖as follows:
1
2
3
2
3
4
3
4
5
A
A
A
99
π
w
ℰ
Figure 3.9
The family of sets ℰ= {퐴푖: 푖∈퐼} with 퐼= {푤, 휋, 99}.

150
Chapter 3 SET THEORY
⋮
퐵5 = [−3, −2]
퐵3 = [−2, −1]
퐵1 = [−1, 0]
퐵0 = [0, 1]
퐵2 = [1, 2]
퐵4 = [2, 3]
⋮
Use 2푛+ 1 to represent the odd natural numbers and 2푛to represent the even
natural numbers (푛∈퐍). Then,
⋮
퐵2(2)+1 = [−2 −1, −2]
퐵2(1)+1 = [−1 −1, −1]
퐵2(0)+1 = [−0 −1, −0]
and
퐵2(0) = [0, 0 + 1]
퐵2(1) = [1, 1 + 1]
퐵2(2) = [2, 2 + 1]
⋮
Therefore, deﬁne for all natural numbers 푛,
퐵2푛+1 = [−푛−1, −푛]
and
퐵2푛= [푛, 푛+ 1] .
We have indexed the elements of ℱas
퐵0 = [0, 1]
퐵1 = [−1, 0]
퐵2 = [1, 2]
퐵3 = [−2, −1]
퐵4 = [2, 3]
퐵5 = [−3, −2]
⋮
So under this deﬁnition, ℱ= {퐵푖: 푖∈퐍}.

Section 3.4 FAMILIES OF SETS
151
Power Set
There is a natural way to form a family of sets. Take a set 퐴. The collection of all
subsets of 퐴is called the power set of 퐴. It is represented by P(퐴).
DEFINITION 3.4.4
For any set 퐴,
P(퐴) = {퐵: 퐵⊆퐴}.
Notice that ∅∈P(퐴) by Theorem 3.3.4.
EXAMPLE 3.4.5
∙P({1, 2, 3}) = {∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}
∙P({∅, {∅}}) = {∅, {∅}, {{∅}}, {∅, {∅}}}
∙P(퐍) = {∅, {0}, {1}, … , {0, 1}, {0, 2}, … }.
Consider 퐴= {2, 6} and 퐵= {2, 6, 10}, so 퐴⊆퐵. Examining the power sets of each,
we ﬁnd that
P(퐴) = {∅, {2}, {6}, {2, 6}}
and
P(퐵) = {∅, {2}, {6}, {10}, {2, 6}, {2, 10}, {6, 10}, {2, 6, 10}}.
Hence, P(퐴) ⊆P(퐵). This result is generalized in the next lemma.
LEMMA 3.4.6
퐴⊆퐵if and only if P(퐴) ⊆P(퐵).
PROOF
∙Let 퐴⊆퐵. Assume 푋∈P(퐴). Then, 푋⊆퐴, which gives 푋⊆퐵by
Theorem 3.3.6. Hence, 푋∈P(퐵).
∙Assume P(퐴) ⊆P(퐵). Let 푥∈퐴. In other words, {푥} ⊆퐴, but this means that
{푥} ∈P(퐴). Hence, {푥} ∈P(퐵) by hypothesis, so 푥∈퐵.
The deﬁnition of set equality and Lemma 3.4.6 are used to prove the next theorem. Its
proof is left to Exercise 9.
THEOREM 3.4.7
퐴= 퐵if and only if P(퐴) = P(퐵).
Union and Intersection
We now generalize the set operations. Deﬁne the union of a family of sets to be the set
of all elements that belong to some member of the family. This union is denoted by the
same notation as in Deﬁnition 3.2.1 and can be deﬁned using the abstraction method.

152
Chapter 3 SET THEORY
DEFINITION 3.4.8
Let ℱbe a family of sets. Deﬁne
⋃
ℱ= {푥: ∃퐴(퐴∈ℱ∧푥∈퐴)}.
If the family is indexed so that ℱ= {퐴푖: 푖∈퐼}, deﬁne
⋃
푖∈퐼
퐴푖= {푥: ∃푖(푖∈퐼∧푥∈퐴푖)}.
Observe that ⋃ℱ= ⋃
푖∈퐼퐴푖[Exercise 16(a)].
We generalize the notion of intersection similarly. The intersection of a family of
sets is the set of all elements that belong to each member of the family.
DEFINITION 3.4.9
Let ℱbe a family of sets.
⋂
ℱ= {푥: ∀퐴(퐴∈ℱ→푥∈퐴)}.
If the family is indexed so that ℱ= {퐴푖: 푖∈퐼}, deﬁne
⋂
푖∈퐼
퐴푖= {푥: ∀푖(푖∈퐼→푥∈퐴푖)}.
Observe that ⋂ℱ= ⋂
푖∈퐼퐴푖[Exercise 16(b)].
Furthermore, notice that both deﬁnitions are indeed generalizations of the operations
of Section 3.2 because as noted in Exercise 17,
⋃
{퐴, 퐵} = 퐴∪퐵,
and
⋂
{퐴, 퐵} = 퐴∩퐵.
EXAMPLE 3.4.10
Deﬁne ℰ= {[푛, 푛+ 1] : 푛∈퐙}.
∙When all of these intervals are combined, the result is the real line. This
means that
⋃
ℰ= 퐑.
∙There is not one element that is common to all of the intervals. Hence,
⋂
ℰ= ∅.
The next example illustrates how to write the union or intersection of a family of sets
as a roster.

Section 3.4 FAMILIES OF SETS
153
EXAMPLE 3.4.11
Let ℱ= {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}}.
∙Since 1 is in the ﬁrst set of ℱ, 1 ∈⋃ℱ. The others can be explained
similarly, so
⋃
ℱ= {1, 2, 3, 4, 5}.
Notice that mechanically this amounts to removing the braces around the
sets of the family and setting the union to the resulting set:
{1, 2, 3, 2, 3, 4, 3, 4, 5}
ℱ
ℱ
{1, 2, 3, 4, 5}
{{1, 2, 3}, {2, 3, 4}, {3, 4, 5}}
Remove braces
⋃
∙The generalized intersection is simply the overlap of all of the sets. Hence,
3 is the only element of ⋂ℱ. That is,
⋂
ℱ= {3},
and this is illustrated by the following diagram:
{{1, 2,  3 }, {2,  3  , 4}, { 3  , 4, 5}}
ℱ
{3}
ℱ
⋃
EXAMPLE 3.4.12
Since a family of sets can be empty, we must be able to take the union and inter-
section of the empty set. To prove that ⋃∅= ∅, take 푥∈⋃∅. This means
that there exists 퐴∈∅such that 푥∈퐴, but this is impossible. We leave the fact
that ⋂∅is equal to the universe to Exercise 24.
The next theorem generalizes the Distributive Laws. Exercise 2.4.10 plays an im-
portant role in its proof. It allows us to move the quantiﬁer.

154
Chapter 3 SET THEORY
THEOREM 3.4.13
Let 퐴푖(푖∈퐼) and 퐵be sets.
∙퐵∪
⋂
푖∈퐼
퐴푖=
⋂
푖∈퐼
(퐵∪퐴푖)
∙퐵∩
⋃
푖∈퐼
퐴푖=
⋃
푖∈퐼
(퐵∩퐴푖).
PROOF
We leave the second part to Exercise 19. The ﬁrst part is demonstrated by the
following biconditional proof:
푥∈퐵∪
⋂
푖∈퐼
퐴푖⇔푥∈퐵∨푥∈
⋂
푖∈퐼
퐴푖
⇔푥∈퐵∨∀푖(푖∈퐼→푥∈퐴푖)
⇔푥∈퐵∨∀푖(푖∉퐼∨푥∈퐴푖)
⇔∀푖(푥∈퐵∨푖∉퐼∨푥∈퐴푖)
⇔∀푖(푖∉퐼∨푥∈퐵∨푥∈퐴푖)
⇔∀푖(푖∈퐼→푥∈퐵∨푥∈퐴푖)
⇔∀푖(푖∈퐼→푥∈퐵∪퐴푖)
⇔푥∈
⋂
푖∈퐼
(퐵∪퐴푖).
To understand the next result, consider the following example. Choose the universe
to be {1, 2, 3, 4, 5} and perform some set operations on the family
{{1, 2, 3}, {2, 3, 4}, {2, 3, 5}}.
First,
⋂
{{1, 2, 3}, {2, 3, 4}, {2, 3, 5}} = {2, 3} = {1, 4, 5},
and second,
⋃
{{1, 2, 3}, {2, 3, 4}, {2, 3, 5}} =
⋃
{{4, 5}, {1, 5}, {1, 4}} = {1, 4, 5}.
This leads us to the next generalization of De Morgan’s laws. Its proof is left to Exer-
cise 23.
THEOREM 3.4.14
Let {퐴푖: 푖∈퐼} be a family of sets.
∙
⋂
푖∈퐼
퐴푖=
⋃
푖∈퐼
퐴푖
∙
⋃
푖∈퐼
퐴푖=
⋂
푖∈퐼
퐴푖.

Section 3.4 FAMILIES OF SETS
155
Disjoint and Pairwise Disjoint
What it means for two sets to be disjoint was deﬁned in Section 3.2 (Deﬁnition 3.2.3).
The next deﬁnition generalizes that notion to families of sets. Because a family can
have more than two elements, it is appropriate to expand the concept of disjointness.
DEFINITION 3.4.15
Let ℱbe a family of sets.
∙ℱis disjoint when ⋂ℱ= ∅.
∙ℱis pairwise disjoint when for all 퐴, 퐵∈ℱ, if 퐴≠퐵, then 퐴∩퐵= ∅.
Observe that {{1, 2}, {3, 4}, {5, 6}} is both disjoint and pairwise disjoint because its
elements have no common members.
EXAMPLE 3.4.16
Let 퐴be a set. We see that
⋃
P(퐴) = {푥: ∃퐵[퐵∈P(퐴) ∧푥∈퐵]} = 퐴.
Although P(퐴) is not a pairwise disjoint family of sets, it is a disjoint because
∅∈P(퐴).
If the family is indexed, we can use another test to determine if it is pairwise disjoint.
Let ℱ= {퐴푖: 푖∈퐼} be a family of sets. If for all 푖, 푗∈퐼,
푖≠푗implies 퐴푖∩퐴푗= ∅,
(3.4)
then ℱis pairwise disjoint. To prove this, let ℱbe a family that satisﬁes (3.4). Take
퐴푖, 퐴푗∈ℱfor some 푖, 푗∈퐼and assume 퐴푖≠퐴푗. Therefore, 푖≠푗, for otherwise
they would be the equal. Hence, 퐴푖∩퐴푗= ∅by Condition 3.4.
The next result illustrates the relationship between these two terms. One must be
careful, though. The converse is false (Exercise 14).
THEOREM 3.4.17
Let ℱbe a family of sets with at least two elements. If ℱis pairwise disjoint,
then ℱis disjoint.
PROOF
Assume ℱis pairwise disjoint. Since ℱcontains at least two sets, let 퐴, 퐵∈ℱ
such that 퐴≠퐵. Then, using Exercise 27, ⋂ℱ⊆퐴∩퐵= ∅.
Exercises
1. Let 퐼= {1, 2, 3, 4, 5}, 퐴1 = {1, 2}, 퐴2 = {3, 4}, 퐴3 = {1, 4}, 퐴4 = {3, 4}, and
퐴5 = {1, 3}. Write the given families of sets as a rosters.

156
Chapter 3 SET THEORY
(a) {퐴푖: 푖∈퐼}
(b) {퐴푖: 푖∈{2, 4}}
(c) {퐴푖: 푖= 1}
(d) {퐴푖: 푖= 1, 2}
(e) {퐴푖: 푖∈∅}
(f)
{퐴푖: 푖∈퐴5}
2. Answer true or false.
(a) 1 ∈{{1}, {2}, {1, 2}}
(b) {1} ∈{{1}, {2}, {1, 2}}
(c) {1} ⊆{{1}, {2}, {1, 2}}
(d) {1, 2} ∈{{{1, 2}, {3, 4}}, {1, 2}}
(e) {1, 2} ⊆{{{1, 2}, {3, 4}}, {1, 2}}
(f)
{3, 4} ∈{{{1, 2}, {3, 4}}, {1, 2}}
(g) {3, 4} ⊆{{{1, 2}, {3, 4}}, {1, 2}}
(h) ∅∈{{{1, 2}, {3, 4}}, {1, 2}}
(i)
∅⊆{{{1, 2}, {3, 4}}, {1, 2}}
(j)
{∅} ∈{∅, {∅, {∅}}}
(k) {∅} ⊆{∅, {∅, {∅}}}
(l)
∅∈{∅, {∅, {∅}}}
(m) ∅⊆{∅, {∅, {∅}}}
(n) {∅} ⊆∅
(o) {∅} ⊆{∅, {∅}}
(p) {∅} ⊆{{∅, {∅}}}
(q) {{∅}} ⊆{∅, {∅}}
(r)
{1} ∈P(퐙)
(s) {1} ⊆P(퐙)
(t)
∅∈P(∅)
(u) {∅} ∈P(∅)
(v) {∅} ⊆P(∅)
3. Find sets such that퐼∩퐽= ∅but {퐴푖: 푖∈퐼} and {퐴푗: 푗∈퐽} are not disjoint.
4. Let {퐴푖: 푖∈퐾} be a family of sets and let 퐼and 퐽be subsets of 퐾. Deﬁne
ℰ= {퐴푖: 푖∈퐼} and ℱ= {퐴푗: 푗∈퐽} and prove the following.
(a) If 퐼⊆퐽, then ℰ⊆ℱ.
(b) ℰ∪ℱ= {퐴푖: 푖∈퐼∪퐽}
(c) {퐴푖: 푖∈퐼∩퐽} ⊆ℰ∩ℱ
5. Using the same notation as in the previous problem, ﬁnd a family {퐴푖: 푖∈퐾} and
subsets 퐼and 퐽of 퐾such that:
(a) ℰ∩ℱ⊈{퐴푖: 푖∈퐼∩퐽}
(b) {퐴푖: 푖∈퐼⧵퐽} ⊈ℰ⧵ℱ
6. Show {퐴푖: 푖∈퐼} = ∅if and only if 퐼= ∅.

Section 3.4 FAMILIES OF SETS
157
7. Let 퐴be a ﬁnite set. How many elements are in P(퐴) if 퐴has 푛elements? Explain.
8. Find the given power sets.
(a) P({1, 2})
(b) P(P({1, 2}))
(c) P(∅)
(d) P(P(∅))
(e) P({{∅}})
(f)
P({∅, {∅}, {∅, {∅}}})
9. Prove Theorem 3.4.7.
10. For each of the given equalities, prove or show false. If one is false, prove any true
inclusion.
(a) P(퐴∪퐵) = P(퐴) ∪P(퐵)
(b) P(퐴∩퐵) = P(퐴) ∩P(퐵)
(c) P(퐴⧵퐵) = P(퐴) ⧵P(퐵)
(d) P(퐴× 퐵) = P(퐴) × P(퐵)
11. Prove P(퐴) ⊆P(퐵) implies 퐴⊆퐵by using the fact that 퐴∈P(퐴).
12. Write the following sets in roster form.
(a) ⋃{{1, 2}, {1, 2}, {1, 3}, {1, 4}}
(b) ⋂{{1, 2}, {1, 2}, {1, 3}, {1, 4}}
(c) ⋂P(∅)
(d) ⋃P(∅)
(e) ⋃⋃{{{1}}, {{1, 2}}, {{1, 3}}, {{1, 4}}}
(f)
⋃⋂{{{1}}, {{1, 2}}, {{1, 3}}, {{1, 4}}}
(g) ⋂⋃{{{1}}, {{1, 2}}, {{1, 3}}, {{1, 4}}}
(h) ⋂⋂{{{1}}, {{1, 2}}, {{1, 3}}, {{1, 4}}}
(i)
⋃⋃∅
(j)
⋂⋃∅
13. Draw Venn diagrams for a disjoint family of sets that is not pairwise disjoint and
for a pairwise disjoint family of sets.
14. Show by example that a disjoint family of sets might not be pairwise disjoint.
15. Given a family of sets {퐴푖: 푖∈퐼}, ﬁnd a family ℬ= {퐵푖: 푖∈퐼} such that
{퐴푖× 퐵푖: 푖∈퐼} is pairwise disjoint.
16. Let ℱ= {퐴푖: 푖∈퐼} be a family of sets. Prove the given equations.
(a) ⋃ℱ= ⋃
푖∈퐼퐴푖
(b) ⋂ℱ= ⋂
푖∈퐼퐴푖
17. Prove for any sets 퐴and 퐵, ⋃{퐴, 퐵} = 퐴∪퐵and ⋂{퐴, 퐵} = 퐴∩퐵.
18. Let 풞= {(0, 푛) : 푛∈퐙+}. Prove that ⋃풞= (0, ∞) and ⋂풞= (0, 1).

158
Chapter 3 SET THEORY
19. Prove the second part of Theorem 3.4.13.
20. Prove Theorem 3.4.17 indirectly.
21. Is Theorem 3.4.17 still true if the family of sets ℱhas at most one element? Ex-
plain.
22. Let {퐴푖: 푖∈퐼} be a family of sets and prove the following.
(a) If 퐵⊆퐴푖for some 푖∈퐼, then 퐵⊆⋃
푖∈퐼퐴푖.
(b) If 퐴푖⊆퐵for all 푖∈퐼, ⋂
푖∈퐼퐴푖⊆퐵.
(c) If 퐵⊆⋂
푖∈퐼퐴푖, then 퐵⊆퐴푖for all 푖∈퐼.
23. Prove Theorem 3.4.14.
24. Show ⋂∅= 푈where 푈is a universe.
25. Let ℱbe a family of sets such that ∅∈ℱ. Prove ⋂ℱ= ∅.
26. Find families of sets ℰand ℱso that ⋃ℰ= ⋃ℱbut ℰ≠ℱ. Can this be
repeated by replacing union with intersection?
27. Let ℱbe a family of sets, and let 퐴∈ℱ. Prove ⋂ℱ⊆퐴⊆⋃ℱ.
28. Let ℰand ℱbe families of sets. Show the following.
(a) ⋃{ℱ} = ℱ
(b) ⋂{ℱ} = ℱ
(c) If ℰ⊆ℱ, then ⋃ℰ⊆⋃ℱ.
(d) If ℰ⊆ℱ, then ⋂ℱ⊆⋂ℰ.
(e) ⋃(ℰ∪ℱ) = ⋃ℰ∪⋃ℱ
(f)
⋂(ℰ∪ℱ) = ⋂ℰ∩⋂ℱ
29. Find families of sets ℰand ℱthat make the following false.
(a) ⋂(ℰ∩ℱ) = ⋂ℰ∩⋂ℱ
(b) ⋃(ℰ∩ℱ) = ⋃ℰ∩⋃ℱ
30. Let ℱbe a family of sets. For each of the given equalities, prove true or show that
it is false by ﬁnding a counter-example.
(a) ⋃P(ℱ) = ℱ
(b) ⋂P(ℱ) = ℱ
(c) P(⋃ℱ) = ℱ
(d) P(⋂ℱ) = ℱ
31. Prove these alternate forms of De Morgan’s laws.
(a) 퐴⧵⋃
푖∈퐼퐵푖= ⋂
푖∈퐼퐴⧵퐵푖
(b) 퐴⧵⋂
푖∈퐼퐵푖= ⋃
푖∈퐼퐴⧵퐵푖
32. Assume that the universe 푈contains only sets such that for all 퐴∈푈, 퐴⊆푈and
P(퐴) ∈푈. Prove the following equalities.
(a) ⋃푈= 푈
(b) ⋂푈= ∅

Section 3.4 FAMILIES OF SETS
159
33. Let 퐼푛= [푛, 푛+ 1] and 퐽푛= [푛, 푛+ 1], 푛∈퐙. Deﬁne
ℱ= {퐼푛× 퐽푚: 푛, 푚∈퐙}.
Show ⋃ℱ= 퐑2 and ⋂ℱ= ∅. Is ℱpairwise disjoint?


CHAPTER 4
RELATIONS AND FUNCTIONS
4.1
RELATIONS
A relation is an association between objects. A book on a table is an example of the
relation of one object being on another. It is especially common to speak of relations
among people. For example, one person could be the niece of another. In mathematics,
there are many relations such as equals and less-than that describe associations between
numbers. To formalize this idea, we make the next deﬁnition.
DEFINITION 4.1.1
A set 푅is an (n-ary) relation if there exist sets 퐴0, 퐴1, … , 퐴푛−1 such that
푅⊆퐴0 × 퐴1 × · · · × 퐴푛−1.
In particular, 푅is a unary relation if 푛= 1 and a binary relation if 푛= 2. If
푅⊆퐴× 퐴for some set 퐴, then 푅is a relation on 퐴and we write (퐴, 푅).
The relation on can be represented as a subset of the Cartesian product of the set of all
books and the set of all tables. We could then write (dictionary, desk) to mean that the
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
161

162
Chapter 4 RELATIONS AND FUNCTIONS
dictionary is on the desk. Similarly, the set {(2, 4), (7, 3), (0, 0)} is a relation because
it is a subset of 퐙× 퐙. The ordered pair (2, 4) means that 2 is related to 4. Likewise,
퐑× 퐐is a relation where every real number is related to every rational number, and
according to Deﬁnition 4.1.1, the empty set is also a relation because ∅= ∅× ∅.
EXAMPLE 4.1.2
For any set 퐴, deﬁne
퐼퐴= {(푎, 푎) : 푎∈퐴}.
Call this set the identity on 퐴. In particular, the identity on 퐑is
퐼퐑= {(푥, 푥) : 푥∈퐑},
and the identity on 퐙is
퐼퐙= {(푥, 푥) : 푥∈퐙}.
Notice that ∅is the identity on ∅.
EXAMPLE 4.1.3
The less-than relation on 퐙is deﬁned as
퐿= {(푎, 푏) : 푎, 푏∈퐙∧푎< 푏}.
Another approach is to use membership in the set of positive integers as our con-
dition. That is,
퐿= {(푎, 푏) : 푎, 푏∈퐙∧푏−푎∈퐙+}.
Hence, (4, 7) ∈퐿because 7 −4 ∈퐙+. See Exercise 1 for another deﬁnition of
퐿.
When a relation 푅⊆퐴× 퐵is deﬁned, all elements in 퐴or 퐵might not be used.
For this reason, it is important to identify the sets that comprise all possible values for
the two coordinates of the relation.
DEFINITION 4.1.4
Let 푅⊆퐴× 퐵. The domain of 푅is the set
dom(푅) = {푥∈퐴: ∃푦(푦∈퐵∧(푥, 푦) ∈푅)},
and the range of 푅is the set
ran(푅) = {푦∈퐵: ∃푥(푥∈퐴∧(푥, 푦) ∈푅)}.
EXAMPLE 4.1.5
If 푅= {(1, 3), (2, 4), (2, 5)}, then dom(푅) = {1, 2} and ran(푅) = {3, 4, 5}. We
represent this in Figure 4.1 where 퐴and 퐵are sets so that {1, 2} ⊆퐴and
{3, 4, 5} ⊆퐵. The ordered pair (1, 3) is denoted by the arrow pointing from
1 to 3. Also, both dom(푅) and ran(푅) are shaded.

Section 4.1 RELATIONS
163
A
B
1
2
5
4
3
R
Figure 4.1
푅= {(1, 3), (2, 4), (2, 5)}.
EXAMPLE 4.1.6
Let 푆= {(푥, 푦) : |푥| = 푦∧푥, 푦∈퐑}. Notice that both (2, 2) and (−2, 2) are
elements of 푆. Furthermore, dom(푆) = 퐑and ran(푆) = [0, ∞).
The domain and range of a relation can be the same set as in the next two examples.
EXAMPLE 4.1.7
If 푅= {(0, 1), (0, 2), (1, 0), (2, 0)}, then 푅is a relation on the set {0, 1, 2} with
dom(푅) = ran(푅) = {0, 1, 2}.
EXAMPLE 4.1.8
For the relation
푆=
{
(푥, 푦) ∈퐑2 :
√
푥2 + 푦2 ≥1
}
,
both the domain and range equal 퐑. First, note that it is clear by the deﬁnition
of 푆that both dom(푆) and ran(푆) are subsets of 퐑. For the other inclusion, take
푥∈퐑. Since (푥, 1) ∈푆, 푥∈dom(푆), and since (1, 푦) ∈푆, 푦∈ran(푆).
Composition
Given the relations 푅and 푆, let us deﬁne a new relation. Suppose that (푎, 푏) ∈푆and
(푏, 푐) ∈푅. Therefore, 푎is related to 푐through 푏. The new relation will contain the
ordered pair (푎, 푐) to represent this relationship.
DEFINITION 4.1.9
Let 푅⊆퐴× 퐵and 푆⊆퐵× 퐶. The composition of 푆and 푅is the subset of
퐴× 퐶deﬁned as
푆◦푅= {(푥, 푧) : ∃푦(푦∈퐵∧(푥, 푦) ∈푅∧(푦, 푧) ∈푆)}.
As illustrated in Figure 4.2, the reason that (푎, 푐) ∈푅◦푆is because (푎, 푏) ∈푆and
(푏, 푐) ∈푅. That is, 푎is related to 푐via 푅◦푆because 푎is related to 푏via 푆and then 푏

164
Chapter 4 RELATIONS AND FUNCTIONS
A
C
a
b
c
B
R ◦ S
R
S
Figure 4.2
A composition of relations.
is related to 푐via 푅. The composition can be viewed as the direct path from 푎to 푐that
does not require the intermediary 푏.
EXAMPLE 4.1.10
To clarify the deﬁnition, let
푅= {(2, 4), (1, 3), (2, 5)}
and
푆= {(0, 1), (1, 0), (0, 2), (2, 0)}.
We have that 푅◦푆= {(0, 3), (0, 4), (0, 5)}. Notice that (0, 3) ∈푅◦푆because
(0, 1) ∈푆and (1, 3) ∈푅. However, 푆◦푅is empty since ran(푅) and dom(푆)
are disjoint.
EXAMPLE 4.1.11
Deﬁne
푅= {(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 1}
and
푆= {(푥, 푦) ∈퐑2 : 푦= 푥+ 1}.
Notice that 푅is the unit circle and 푆is the line with slope of 1 and 푦-intercept
of (0, 1). Let us ﬁnd 푅◦푆.
푅◦푆= {(푥, 푧) ∈퐑2 : ∃푦(푦∈퐑∧(푥, 푦) ∈푆∧(푦, 푧) ∈푅)}
= {(푥, 푧) ∈퐑2 : ∃푦(푦∈퐑∧푦= 푥+ 1 ∧푦2 + 푧2 = 1)}
= {(푥, 푧) ∈퐑2 : (푥+ 1)2 + 푧2 = 1}.

Section 4.1 RELATIONS
165
Therefore, 푅◦푆is the circle with center (−1, 0) and radius 1.
Example 4.1.10 shows that it is possible that 푆◦푅≠푅◦푆. However, we can
change the order of the composition.
THEOREM 4.1.12
If 푅⊆퐴× 퐵, 푆⊆퐵× 퐶, and 푇⊆퐶× 퐷, then 푇◦(푆◦푅) = (푇◦푆) ◦푅.
PROOF
Assume that 푅⊆퐴× 퐵, 푆⊆퐵× 퐶, and 푇⊆퐶× 퐷. Then,
(푎, 푑) ∈푇◦(푆◦푅)
⇔∃푐(푐∈퐶∧(푎, 푐) ∈푆◦푅∧(푐, 푑) ∈푇)
⇔∃푐(푐∈퐶∧∃푏(푏∈퐵∧(푎, 푏) ∈푅∧(푏, 푐) ∈푆) ∧(푐, 푑) ∈푇)
⇔∃푐∃푏(푐∈퐶∧푏∈퐵∧(푎, 푏) ∈푅∧(푏, 푐) ∈푆∧(푐, 푑) ∈푇)
⇔∃푏∃푐(푏∈퐵∧(푎, 푏) ∈푅∧푐∈퐶∧(푏, 푐) ∈푆∧(푐, 푑) ∈푇)
⇔∃푏(푏∈퐵∧(푎, 푏) ∈푅∧∃푐[푐∈퐶∧(푏, 푐) ∈푆∧(푐, 푑) ∈푇])
⇔∃푏(푏∈퐵∧(푎, 푏) ∈푅∧(푏, 푑) ∈푇◦푆)
⇔(푎, 푑) ∈(푇◦푆) ◦푅.
Inverses
Let 푅⊆퐴× 퐵. We know that 푅◦퐼퐴= 푅and 퐼퐵◦푅= 푅[Exercise 10(a)]. If we
want 퐼퐴= 퐼퐵, we need 퐴= 퐵so that 푅is a relation on 퐴. Then,
푅◦퐼퐴= 퐼퐴◦푅= 푅.
For example, if we again deﬁne 푅= {(2, 4), (1, 3), (2, 5)} and view it as a relation on
퐙, then 푅composed on either side by 퐼퐙yields 푅. To illustrate, consider the ordered
pair (1, 3). It is an element of 푅◦퐼퐙because
(1, 1) ∈퐼퐙∧(1, 3) ∈푅,
and it is also an element of 퐼퐙◦푅because
(1, 3) ∈푅∧(3, 3) ∈퐼퐙.
Notice that not every identity relation will have this property. Using the same deﬁnition
of 푅as above,
푅◦퐼{1,2} = 푅,
but
퐼{1,2} ◦푅= ∅.
Now let us change the problem. Given a relation 푅on 퐴, can we ﬁnd a relation 푆
on 퐴such that 푅◦푆= 푆◦푅= 퐼퐴? The next deﬁnition is used to try to answer this
question.

166
Chapter 4 RELATIONS AND FUNCTIONS
DEFINITION 4.1.13
Let 푅be a binary relation. The inverse of 푅is the set
푅−1 = {(푦, 푥) : (푥, 푦) ∈푅}.
For a relation 푆, we say that 푅and 푆are inverse relations if 푅−1 = 푆.
EXAMPLE 4.1.14
Let 퐿be the less-than relation on 퐑(Example 4.1.3). Then,
퐿−1
=
{(푦, 푥) ∈퐑2 : (푥, 푦) ∈퐿}
=
{(푦, 푥) ∈퐑2 : 푥< 푦}
=
{(푦, 푥) ∈퐑2 : 푦> 푥}.
This shows that less-than and greater-than are inverse relations.
We now check whether 푅◦푅−1 = 푅−1 ◦푅= 퐼퐴for any relation 푅on 퐴. Consider
푅= {(2, 1), (4, 3)}, which is a relation on {1, 2, 3, 4}. Then,
푅−1 = {(1, 2), (3, 4)},
and we see that composing does not yield the identity on {1, 2, 3, 4} because
푅◦푅−1 = {(1, 1), (3, 3)} = 퐼{1,3}
and
푅−1 ◦푅= {(2, 2), (4, 4)} = 퐼{2,4}.
The situation is worse when we deﬁne 푆= {(2, 1), (2, 3), (4, 3)}. In this case, we have
that
푆−1 = {(1, 2), (3, 2), (3, 4)}
but
푆◦푆−1 = {(1, 1), (1, 3), (3, 1), (3, 3)}
and
푆−1 ◦푆= {(2, 2), (2, 4), (4, 4)}.
Neither of these compositions leads to an identity, but at least we have that
{(1, 1), (3, 3)} ⊆푆◦푆−1
and
{(2, 2), (4, 4)} ⊆푆−1 ◦푆.
This can be generalized.
THEOREM 4.1.15
퐼ran(푅) ⊆푅◦푅−1 and 퐼dom(푅) ⊆푅−1 ◦푅for any binary relation 푅.

Section 4.1 RELATIONS
167
PROOF
The ﬁrst inclusion is proved in Exercise 12. To see the second inclusion, let
푥∈dom(푅). By deﬁnition, there exists 푦∈ran(푅) so that (푥, 푦) ∈푅. Hence,
(푦, 푥) ∈푅−1, which implies that (푥, 푥) ∈푅−1 ◦푅.
Exercises
1. Let 퐿⊆퐙× 퐙be the less-than relation as deﬁned in Example 4.1.3. Prove that
퐿= {(푎, 푏) ∈퐙× 퐙: 푎−푏∈퐙−}.
2. Find the domain and range of the given relations.
(a) {(0, 1), (2, 3), (4, 5), (6, 7)}
(b) {((푎, 푏), 1), ((푎, 푐), 2), ((푎, 푑), 3)}
(c) 퐑× 퐙
(d) ∅× ∅
(e) 퐐× ∅
(f)
{(푥, 푦) : 푥, 푦∈[0, 1] ∧푥< 푦}
(g) {(푥, 푦) ∈퐑2 : 푦= 3}
(h) {(푥, 푦) ∈퐑2 : 푦= |푥|}
(i)
{(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 4}
(j)
{(푥, 푦) ∈퐑2 : 푦≤
√
푥∧푥≥0}
(k) {(푓, 푔) : ∃푎∈퐑(푓(푥) = 푒푥∧푔(푥) = 푎푥)}
(l)
{((푎, 푏), 푎+ 푏) : 푎, 푏∈퐙}
3. Write 푅◦푆as a roster.
(a) 푅= {(1, 0), (2, 3), (4, 6)}, 푆= {(1, 2), (2, 3), (3, 4)}
(b) 푅= {(1, 3), (2, 5), (3, 1)}, 푆= {(1, 3), (3, 1), (5, 2)}
(c) 푅= {(1, 2), (3, 4), (5, 6)}, 푆= {(1, 2), (3, 4), (5, 6)}
(d) 푅= {(1, 2), (3, 4), (5, 6)}, 푆= {(2, 1), (3, 5), (5, 7)}
4. Write 푅◦푆using abstraction.
(a) 푅= {(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 1}
푆= 퐑2
(b) 푅= {(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 1}
푆= 퐙× 퐙
(c) 푅= {(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 1}
푆= {(푥, 푦) ∈퐑2 : (푥−2)2 + 푦2 = 1}
(d) 푅= {(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 1}
푆= {(푥, 푦) ∈퐑2 : 푦= 2푥−1}
5. Write the inverse of each relation. Use the abstraction method where appropriate.
(a) ∅
(b) 퐼퐙
(c) {(1, 0), (2, 3), (4, 6)}

168
Chapter 4 RELATIONS AND FUNCTIONS
(d) {(1, 0), (1, 1), (2, 1)}
(e) 퐙× 퐑
(f)
{(푥, sin 푥) : 푥∈퐑}
(g) {(푥, 푦) ∈퐑2 : 푥+ 푦= 1}
(h) {(푥, 푦) ∈퐑2 : 푥2 + 푦2 = 1}
6. Let 푅⊆퐴× 퐵and 푆⊆퐵× 퐶. Show the following.
(a) 푅−1 ◦푆−1 ⊆퐶× 퐴.
(b) dom(푅) = ran(푅−1).
(c) ran(푅) = dom(푅−1).
7. Prove that if 푅is a binary relation, (푅−1)−1 = 푅.
8. Prove that (푆◦푅)−1 = 푅−1 ◦푆−1 if 푅⊆퐴× 퐵and 푆⊆퐵× 퐶.
9. Let 푅, 푆⊆퐴× 퐵. Prove the following.
(a) If 푅⊆푆, then 푅−1 ⊆푆−1.
(b) (푅∪푆)−1 = 푅−1 ∪푆−1.
(c) (푅∩푆)−1 = 푅−1 ∩푆−1.
10. Let 푅⊆퐴× 퐵.
(a) Prove 푅◦퐼퐴= 푅and 퐼퐵◦푅= 푅.
(b) Show that if there exists a set 퐶such that 퐴and 퐵are subsets of 퐶, then
푅◦퐼퐶= 퐼퐶◦푅= 푅.
11. Let 푅⊆퐴× 퐵and 푆⊆퐵× 퐶. Show that 푆◦푅= ∅if and only if dom(푆) and
ran(푅) are disjoint.
12. For any relation 푅, prove 퐼ran(푅) ⊆푅◦푅−1.
13. Let 푅⊆퐴× 퐵. Prove.
(a) ⋃
푏∈퐵{푥∈퐴: (푥, 푏) ∈푅} = dom(푅).
(b) ⋃
푎∈퐴{푦∈퐵: (푎, 푦) ∈푅} = ran(푅).
4.2
EQUIVALENCE RELATIONS
In practice we usually do not write relations as sets of ordered pairs. We instead write
propositions like 4 = 4 or 3 < 9. To copy this, we will introduce an alternate notation.
DEFINITION 4.2.1
Let 푅be a relation on 퐴. For all 푎, 푏∈퐴,
푎푅푏if and only if (푎, 푏) ∈푅,
and
푎̸푅푏if and only if (푎, 푏) ∉푅.
For example, the less-than relation 퐿(Example 4.1.3) is usually denoted by <, and we
write 2 < 3 instead of (2, 3) ∈퐿or (2, 3) ∈<.

Section 4.2 EQUIVALENCE RELATIONS
169
EXAMPLE 4.2.2
Deﬁne the relation 푅on 퐙by
푅= {(푎, 푏) ∈퐙× 퐙: ∃푐∈퐙(푏= 푎푐∧푎≠0)}.
Therefore, for all 푎, 푏∈퐙, 푎푅푏if and only if 푎divides 푏. Therefore, 4 푅8 but
8 ̸푅4.
Relations can have diﬀerent properties depending on their deﬁnitions. Here are three
important examples using relations on 퐴= {1, 2, 3}.
∙{(1, 1), (2, 2), (3, 3)} has the property that every element of 퐴is related to itself.
∙{(1, 2), (2, 1), (2, 3), (3, 2)} has the property that if 푎is related to 푏, then 푏is re-
lated to 푎.
∙{(1, 2), (2, 3), (1, 3)} has the property that if 푎is related to 푏and 푏is related to 푐,
then 푎is related to 푐.
These examples lead to the following deﬁnitions.
DEFINITION 4.2.3
Let 푅be a relation on 퐴.
∙푅is reﬂexive if 푎푅푎for all 푎∈퐴.
∙푅is symmetric when for all 푎, 푏∈퐴, if 푎푅푏, then 푏푅푎.
∙푅is transitive means that for all 푎, 푏, 푐∈퐴, if 푎푅푏and 푏푅푐, then 푎푅푐.
Notice that the relation in Example 4.2.2 is not reﬂexive because 0 does not divide 0
and is not symmetric because 4 divides 8 but 8 does not divide 4, but it is transitive
because if 푎divides 푏and 푏divides 푐, then 푎divides 푐.
When a relation is reﬂexive, symmetric, and transitive, it behaves very much like an
identity relation (Example 4.1.2). Such relations play an important role in mathematics,
so we name them.
DEFINITION 4.2.4
A relation 푅on 퐴is an equivalence relation if 푅is reﬂexive, symmetric, and
transitive.
Observe that the relation in Example 4.2.2 is not an equivalence relation. However, any
identity relation is an equivalence relation. We see this assumption at work in the next
example.

170
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.2.5
Let 푅be a relation on 퐙× (퐙⧵{0}) so that for all 푎, 푐∈퐙and 푏, 푑∈퐙⧵{0},
(푎, 푏) 푅(푐, 푑) if and only if 푎푑= 푏푐.
To see that this is an equivalence relation, let (푎, 푏), (푐, 푑), and (푒, 푓) be elements
of 퐙× (퐙⧵{0}).
∙(푎, 푏) 푅(푎, 푏) since 푎푏= 푎푏.
∙Assume (푎, 푏) 푅(푐, 푑). Then, 푎푑= 푏푐. This implies that 푐푏= 푑푎, so
(푐, 푑) 푅(푎, 푏).
∙Let (푎, 푏) 푅(푐, 푑) and (푐, 푑) 푅(푒, 푓). This gives 푎푑= 푏푐and 푐푓= 푑푒.
Therefore, (푎, 푏) 푅(푒, 푓) because
푎푓= 푏푐푓
푑
= 푏푒.
EXAMPLE 4.2.6
Take 푚∈퐙+ and let 푎, 푏, and 푐be integers. Deﬁne 푎to be congruent to 푏
modulo 푚and write
푎≡푏(mod 푚) if and only if 푚∣푎−푏.
That is,
푎≡푏(mod 푚) if and only if 푎= 푏+ 푚푘for some 푘∈퐙.
For example, we have that 7 ≡1 (mod 3), 1 ≡13 (mod 3), and 27 ≡0 (mod 3),
but 2 ≢9 (mod 3) and 25 ≢0 (mod 3). Congruence modulo 푚deﬁnes the
relation
푅푚= {(푎, 푏) : 푎≡푏(mod 푚)}.
Observe that
푅푚= {(푎, 푏) : 푚∣푎−푏} = {(푎, 푏) : ∃푘(푘∈퐙∧푎= 푏+ 푚푘)}.
Prove that 푅푚is an equivalence relation.
∙(푎, 푎) ∈푅푚because 푎≡푎(mod 푚).
∙Assume (푎, 푏) ∈푅푚. This implies that 푚∣푎−푏. By Exercise 2.4.18,
푚∣푏−푎. Hence, (푏, 푎) ∈푅푚.
∙Let (푎, 푏), (푏, 푐) ∈푅푚. Then 푎= 푏+ 푚푘and 푏= 푐+ 푚푙for some 푘, 푙∈퐙.
Substitution yields
푎= 푐+ 푚푙+ 푚푘= 푐+ 푚(푙+ 푘).
Since the sum of two integers is an integer, (푎, 푐) ∈푅푚.

Section 4.2 EQUIVALENCE RELATIONS
171
Equivalence Classes
Let 푅be a relation on {1, 2, 3, 4} such that
푅= {(1, 2), (1, 3), (2, 4)}.
(4.1)
Observe that 1 is related to 2 and 3, 2 is related to 4, and 3 and 4 are not related to any
number. Combining the elements that are related to a particular element results in a set
named by the next deﬁnition.
DEFINITION 4.2.7
Let 푅be a relation on 퐴with 푎∈퐴. The class of 푎with respect to 푅is the set
[푎]푅= {푥∈퐴: 푎푅푥}.
If 푅is an equivalence relation, [푎]푅is called an equivalence class. We often
denote [푎]푅by [푎] if the relation is clear from context.
Using 푅as deﬁned in (4.1),
[1]푅= {2, 3}, [2]푅= {4}, and [3]푅= [4]푅= ∅.
If 푅had been an equivalence relation on a set 퐴, then [푎]푅would be nonempty for all
푎∈퐴because 푎would be an element of [푎]푅(Exercise 17).
EXAMPLE 4.2.8
Let 푅be the equivalence relation from Example 4.2.5. We prove that
[(1, 3)] = {(푛, 3푛) : 푛∈퐙⧵{0}}.
To see this, take (푎, 푏) ∈[(1, 3)]. This means that (1, 3) 푅(푎, 푏), so 푏= 3푎and
푎≠0 because 푏≠0. Hence, (푎, 푏) = (푎, 3푎). Conversely, let 푛≠0. Then,
(1, 3) 푅(푛, 3푛) because 1 ⋅3푛= 3 ⋅푛. Thus, (푛, 3푛) ∈[(1, 3)].
EXAMPLE 4.2.9
Using the notation of Example 4.2.6, let 푅푚be the relation deﬁned by congruence
modulo 푚. For all 푛∈퐙, deﬁne
[푛]푚= 푅푚(푛).
Therefore, when 푚= 5, the equivalence classes are:
[0]5 = {… , −10, −5, 0, 5, 10, … },
[1]5 = {… , −9, −4, 1, 6, 11, … },
[2]5 = {… , −8, −3, 2, 7, 12, … },
[3]5 = {… , −7, −2, 3, 8, 13, … },
[4]5 = {… , −6, −1, 4, 9, 14, … }.

172
Chapter 4 RELATIONS AND FUNCTIONS
In addition,
[푎]5 = [푏]5 if and only if 푎≡푏(mod 5).
The collection of all equivalence classes of a relation is a set named by the next
deﬁnition.
DEFINITION 4.2.10
Let 푅be an equivalence relation on 퐴. The quotient set of 퐴modulo 푅is
퐴∕푅= {[푎]푅: 푎∈퐴}.
Observe by Exercise 3 that it is always the case that
퐴=
⋃
퐴∕푅.
(4.2)
EXAMPLE 4.2.11
Let 푚∈퐙+. The quotient set 퐙∕푅푚is denoted by 퐙푚. That is,
퐙푚= {[0]푚, [1]푚, … , [푚−1]푚}.
EXAMPLE 4.2.12
Deﬁne the relation 푅on 퐑2 by
(푎, 푏) 푅(푐, 푑) if and only if 푏−푎= 푑−푐.
푅is an equivalence relation by Exercise 2. We note that for any (푎, 푏) ∈퐑2,
[(푎, 푏)] = {(푥, 푦) : (푥, 푦) 푅(푎, 푏)}
= {(푥, 푦) : 푦−푥= 푏−푎}
= {(푥, 푦) : 푦= 푥+ (푏−푎)}.
Therefore, the equivalence class of (푎, 푏) is the line with a slope of 1 and a 푦-
intercept equal to (0, 푏−푎). The equivalence classes of (0, 1.5) and (0, −1) are
illustrated in the graph in Figure 4.3. The quotient set 퐑2∕푅is the collection of
all such lines. Notice that
퐑2 =
⋃
퐑2∕푅.
Partitions
In Example 4.2.12, we saw that 퐑2 is the union of all the lines with slope equal to 1, and
since the lines are parallel, they form a pairwise disjoint set. These properties can be
observed in the other equivalence relations that we have seen. Each set is equal to the
union of the equivalence classes, and the quotient set is pairwise disjoint. Generalizing
these two properties leads to the next deﬁnition.

Section 4.2 EQUIVALENCE RELATIONS
173
R(0, −1)
R(0, 1.5)
Figure 4.3
Two equivalence classes in 퐑2 when (푎, 푏) 푅(푐, 푑) if and only if 푏−푎= 푑−푐.
DEFINITION 4.2.13
Let 퐴be a nonempty set. The family 풫is a partition of 퐴if and only if
∙풫⊆P(퐴),
∙⋃풫= 퐴,
∙풫is pairwise disjoint.
To illustrate the deﬁnition, let 퐴= {1, 2, 3, 4, 5, 6, 7} and deﬁne the elements of the
partition to be 퐴0 = {1, 2, 5}, 퐴1 = {3}, and 퐴2 = {4, 6, 7}. The family
풫= {퐴1, 퐴2, 퐴3}
is a subset of P(퐴), 퐴= 퐴0 ∪퐴1 ∪퐴2, and 풫is pairwise disjoint. Therefore, 풫is a
partition of 퐴. This is illustrated in Figure 4.4.
1
2
7
6
5
4
3
A
A
A1
2
3
Figure 4.4
A partition of the set 퐴= {1, 2, 3, 4, 5, 6, 7}.

174
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.2.14
For each real number 푟≥0, deﬁne 퐶푟to be the circle with radius 푟centered at
the origin. Namely,
퐶푟=
{
(푥, 푦) :
√
푥2 + 푦2 = 푟
}
.
Let 풞= {퐶푟: 푟∈[0, ∞)}. We claim that 풞is a partition of 퐑2.
∙풞⊆P(퐑2) because 퐶푟⊆퐑2 for all 푟≥0.
∙To prove that 퐑2 = ⋃
푟∈[0,∞) 퐶푟, it suﬃces to show that 퐑2 ⊆⋃
푟∈[0,∞) 퐶푟,
but this follows because if (푎, 푏) ∈퐑2, then
(푎, 푏) ∈퐶√
푎2+푏2.
∙To see that 풞is pairwise disjoint, let 푟, 푠≥0 and assume that (푎, 푏) is an
element of 퐶푟∩퐶푠. Then,
푟=
√
푎2 + 푏2 = 푠,
which implies that 퐶푟= 퐶푠.
The set 퐙5 is a family of subsets of 퐙, has the property that ⋃퐙5 = 퐙, and is
pairwise disjoint. Hence, 퐙5 is a partition for 퐙. We generalize this result to the next
theorem. It uses an arbitrary equivalence relation on a given set to deﬁne a partition
for that set. In this case, we say that the equivalence relation induces the partition.
THEOREM 4.2.15
If 푅is an equivalence relation on 퐴, then 퐴∕푅is a partition of 퐴.
PROOF
Take a set 퐴with an equivalence relation 푅.
∙Since an equivalence class is a subset of 퐴, we have 퐴∕푅⊆P(퐴).
∙⋃퐴∕푅= 퐴is (4.2).
∙Let [푎], [푏] ∈퐴∕푅and assume that there exists 푦∈[푎] ∩[푏]. In other
words, 푎푅푦and 푏푅푦. Now take 푥∈[푎]. This means that 푎푅푥. Since
푥푅푎and 푦푅푏by symmetry, we have that 푥푅푦, and then 푥푅푏by tran-
sitivity. Thus, 푥∈[푏], which shows [푎] ⊆[푏]. Similarly, [푏] ⊆[푎], so
[푎] = [푏].
The collection of equivalence relations forms a partition of a set. Conversely, if we
have a partition of a set, the partition gives rise to an equivalence relation on the set.
To see this, take any set 퐴and a partition 풫of 퐴. For all 푎, 푏∈퐴, deﬁne
푎푅푏if and only if there exists 퐶∈풫such that 푎, 푏∈퐶.

Section 4.2 EQUIVALENCE RELATIONS
175
To show that 푅is an equivalence relation, take 푎, 푏, and 푐in 퐴.
∙Since 푎∈퐴and 퐴= ⋃풫, there exists 퐶∈풫such that 푎∈퐶. Therefore,
푎푅푎.
∙Assume 푎푅푏. This means that 푎, 푏∈퐶for some 퐶∈풫. This, of course, is
the same as 푏, 푎∈퐶. Hence, 푏푅푎.
∙Suppose 푎푅푏and 푏푅푐. Then, there are sets 퐶and 퐷in 풫so that 푎, 푏∈퐶and
푏, 푐∈퐷. This means that 퐶∩퐷≠∅. Since 풫is pairwise disjoint, 퐶= 퐷. So,
푎and 푐are elements of 퐶, and we have 푎푅푐.
This equivalence relation is said to be induced from the partition.
EXAMPLE 4.2.16
The sets
{… , −10, −5, 0, 5, 10, … },
{… , −9, −4, 1, 6, 11, … },
{… , −8, −3, 2, 7, 12, … },
{… , −7, −2, 3, 8, 13, … },
{… , −6, −1, 4, 9, 14, … },
form a collection that is a partition of 퐙. The equivalence relation that is induced
from this partition is congruence modulo 5 (Example 4.2.9).
Exercises
1. For all 푎, 푏∈퐑⧵{0}, let 푎푅푏if and only if 푎푏> 0.
(a) Show that 푅is an equivalence relation on 퐑⧵{0}.
(b) Find [1] and [−3].
2. Deﬁne the relation 푆on 퐑2 by (푎, 푏) 푆(푐, 푑) if and only if 푏−푎= 푑−푐. Prove that
푆is an equivalence relation.
3. Let 푆be an equivalence relation on 퐴. Prove that 퐴= ⋃
푎∈퐴[푎].
4. Prove that if 퐶is an equivalence class for some equivalence relation 푅and 푎∈퐶,
then 퐶= [푎].
5. For all 푎, 푏∈퐙, let 푎푅푏if and only if |푎| = |푏|.
(a) Prove 푅is an equivalence relation on 퐙.
(b) Sketch the partition of 퐙induced by this equivalence relation.
6. For all (푎, 푏), (푐, 푑) ∈퐙× 퐙, deﬁne (푎, 푏) 푆(푐, 푑) if and only if 푎푏= 푐푑.
(a) Show that 푆is an equivalence relation on 퐙× 퐙.
(b) What is the equivalence class of (1, 2)?
(c) Sketch the partition of 퐙× 퐙induced by this equivalence relation.
7. Let 퐴be a set and 푎∈퐴. Show that the given relations are not equivalence relations
on P(퐴).

176
Chapter 4 RELATIONS AND FUNCTIONS
(a) For all 퐶, 퐷⊆퐴, deﬁne 퐶푅퐷if and only if 퐶∩퐷≠∅.
(b) For all 퐶, 퐷⊆퐴, deﬁne 퐶푆퐷if and only if 푎∈퐶∩퐷.
8. Let 푧, 푧′ ∈퐂and write 푧= 푎+ 푏푖and 푧′ = 푎′ + 푏′푖. Deﬁne 푧= 푧′ to mean that
푎= 푎′ and 푏= 푏′. Prove that 푅is an equivalence relation.
9. Find.
(a) [3]5
(b) [12]6
(c) [2]5 ∪[27]5
(d) [4]7 ∩[5]7
10. Let 푟be the remainder obtained when 푛is divided by 푚. Prove [푛]푚= [푟]푚.
11. Let 푐, 푚∈퐙and suppose that gcd(푐, 푚) = 1. Prove.
(a) There exists 푏such that 푏푐≡1 (mod 푚). (Notice that 푏is that multiplicative
inverse of 푐modulo 푚.)
(b) If 푐푎≡푐푏(mod 푚), then 푎≡푏(mod 푚).
(c) Prove that the previous implication is false if gcd(푐, 푚) ≠1.
12. Prove that {(푛, 푛+ 1] : 푛∈퐙} is a partition of 퐑.
13. Prove that the following are partitions of 퐑2.
(a) 풫= {{(푎, 푏)} : 푎, 푏∈퐑}.
(b) 풱= {{(푟, 푦) : 푦∈퐑} : 푟∈퐑}.
(c) ℋ= {퐑× (푛, 푛+ 1] : 푛∈퐙}.
14. Is {[푛, 푛+ 1] × (푛, 푛+ 1) : 푛∈퐙} a partition of 퐑2? Explain.
15. Let 푅be a relation on 퐴and show the following:
(a) 푅is reﬂexive if and only if 푅−1 is reﬂexive.
(b) 푅is symmetric if and only if 푅= 푅−1.
(c) 푅is symmetric if and only if (퐴× 퐴) ⧵푅is symmetric.
16. Let 푅and 푆be equivalence relations on 퐴. Prove or show false.
(a) 푅∪푆is an equivalence relation on 퐴.
(b) 푅∩푆is an equivalence relation on 퐴.
17. Prove for all relations 푅on 퐴.
(a) 푅is reﬂexive if and only if ∀푎(푎∈[푎]).
(b) 푅is symmetric if and only if ∀푎∀푏(푎∈[푏] ↔푏∈[푎]).
(c) 푅is transitive if and only if ∀푎∀푏∀푐([푏∈[푎] ∧푐∈[푏]] →푐∈[푎]).
(d) 푅is an equivalence relation if and only if ∀푎∀푏((푎, 푏) ∈푅↔[푎] = [푏]).
18. Let 푅be a relation on 퐴with the property that if 푎푅푏and 푏푅푐, then 푐푅푎. Prove
that if 푅is also reﬂexive, 푅is an equivalence relation.
19. Deﬁne the relation 푅on 퐂by 푎+ 푏푖푅푐+ 푑푖if and only if
√
푎2 + 푏2 =
√
푐2 + 푑2.

Section 4.3 PARTIAL ORDERS
177
(a) Prove 푅is an equivalence relation on 퐂.
(b) Graph [1 + 푖] in the complex plane.
(c) Describe the partition that 푅induces on 퐂.
20. Let 푅and 푆be relations on 퐴. The symmetric closure of 푅is 푆if 푅⊆푆and
for all symmetric relations 푇on 퐴such that 푅⊆푇, then 푆⊆푇. Prove the following.
(a) 푅∪푅−1 is the symmetric closure of 푅.
(b) A symmetric closure is unique.
4.3
PARTIAL ORDERS
While equivalence relations resemble equality, there are other common relations in
mathematics that we can model. To study some of their attributes, we expand Deﬁni-
tion 4.2.3 with three more properties.
DEFINITION 4.3.1
Let 푅be a relation on 퐴.
∙푅is irreﬂexive if 푎̸푅푎for all 푎∈퐴.
∙푅is asymmetric when for all 푎, 푏∈퐴, if 푎푅푏, then 푏̸푅푎.
∙푅is antisymmetric means that for all 푎, 푏∈퐴, if 푎푅푏and 푏푅푎, then
푎= 푏.
Notice that a relation on a nonempty set cannot be both reﬂexive and irreﬂexive. How-
ever, many relations have neither property. For example, consider the relation 푅=
{(1, 1)} on {1, 2}. Since (1, 1) ∈푅, the relation 푅is not irreﬂexive, and 푅is not
reﬂexive because (2, 2) ∉푅. Likewise, a relation on a nonempty set cannot be both
symmetric and asymmetric.
EXAMPLE 4.3.2
The less-than relation on 퐙is irreﬂexive and asymmetric. It is also antisymmet-
ric. To see this, let 푎, 푏∈퐙. Since 푎< 푏and 푏< 푎is false, the implication
if 푎< 푏and 푏< 푎, then 푎= 푏
is true. The ≤relation is also antisymmetric. However, ≤is neither irreﬂexive
nor asymmetric since 3 ≤3.
EXAMPLE 4.3.3
Let 푅= {(1, 2)} and 푆= {(1, 2), (2, 1)}. Both are relations on {1, 2}. The ﬁrst
relation is asymmetric since 1 푅2 but 2 ̸푅1. It is also antisymmetric, but 푆is
not antisymmetric because 2 푆1 and 1 푆2. Both the relations are irreﬂexive.

178
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.3.4
Let 푅be a relation on a set 퐴. We prove that
푅is antisymmetric if and only if 푅∩푅−1 ⊆퐼퐴.
∙Assume that 푅is antisymmetric and take (푎, 푏) ∈푅∩푅−1. This means
that (푎, 푏) ∈푅and (푎, 푏) ∈푅−1. Therefore, (푏, 푎) ∈푅, and since 푅is
antisymmetric, 푎= 푏.
∙Now suppose 푅∩푅−1 ⊆퐼퐴. Let (푎, 푏), (푏, 푎) ∈푅. We conclude that
(푎, 푏) ∈푅−1, which implies that (푎, 푏) ∈푅∩푅−1. Then, (푎, 푏) ∈퐼퐴.
Hence, 푎= 푏.
As an equivalence relation is a generalization of an identity relation, the following
relation is a generalization of ≤on 퐍. For this reason, instead of naming the relation
푅, it is denoted by the symbol ≼.
DEFINITION 4.3.5
If a relation ≼on a set 퐴is reﬂexive, antisymmetric, and transitive, ≼is a partial
order on 퐴and the ordered pair (퐴, ≼) is called a partially ordered set (or
simply a poset). Furthermore, for all 푎, 푏∈퐴, the notation 푎≺푏means 푎≼푏
but 푎≠푏.
For example, ≤and = are partial orders on 퐑, but < is not a partial order on 퐑because
the relation < is not reﬂexive. Although = is a partial order on any set, in general an
equivalence relation is not a partial order (Example 4.2.6).
EXAMPLE 4.3.6
Divisibility (Deﬁnition 2.4.2) is a partial order on 퐙+. To prove this, let 푎, 푏, and
푐be positive integers.
∙푎∣푎since 푎= 푎⋅1 and 푎≠0.
∙Suppose that 푎∣푏and 푏∣푎. This means that 푏= 푎푘and 푎= 푏푙, for some
푘, 푙∈퐙+. Hence, 푏= 푏푙푘, so 푙푘= 1. Since 푘and 푙are positive integers,
푙= 푘= 1. That is, 푎= 푏.
∙Assume that we have 푎∣푏and 푏∣푐. This means that 푏= 푎푙and 푐= 푏푘
for some 푙, 푘∈퐙+. By substitution, 푐= (푎푙)푘= 푎(푙푘). Hence, 푎∣푐.
EXAMPLE 4.3.7
Let 픸be a collection of symbols and let 픸∗denote the set of all strings over 픸
(as on page 5). Use the symbol □to denote the empty string, the string of length
zero. As with the empty set, the empty string is always an element of 픸∗. For
example, if 픸= {푎, 푏, 푐}, then 푎푏푐, 푎푎푎푏푏푏, 푐, and □are elements of 픸∗. Now,
take 휎, 휏∈픸∗. The concatenation of 휎and 휏is denoted by 휎⌢휏and is the

Section 4.3 PARTIAL ORDERS
179
□
0
1
00
01
10
11
000
001
010
011
100
101
110
111
Figure 4.5
A partial order deﬁned on {0, 1}∗.
string consisting of the elements of 휎followed by those of 휏. For example, if
휎= 011 and 휏= 1010, then 휎⌢휏= 0111010. Finally, for all 휎, 휏∈픸∗, deﬁne
휎≼휏if and only if there exists 휈∈픸∗such that 휏= 휎⌢휈.
It can be shown that ≼is a partial order on 픸∗(Exercise 8) with the structure
seen in Figure 4.5 for 픸= {0, 1}.
The partial order ≤on 퐑has the property that for all 푎, 푏∈퐑, either 푎< 푏, 푏< 푎,
or 푎= 푏. As we see in Figure 4.5, this is not the case for every partially ordered set.
We do, however, have the following slightly weaker property.
THEOREM 4.3.8 [Weak-Trichotomy Law]
If ≼is a partial order on 퐴, for all 푎, 푏∈퐴, at most one of the following are true:
푎≺푏, 푏≺푎, or 푎= 푏.
PROOF
Let 푎, 푏∈퐴. We have three cases to consider.
∙Suppose 푎≺푏. This means that 푎≼푏and 푎≠푏. If in addition 푏≺푎, by
transitivity 푎≺푎, which is a contradiction.
∙That 푏≺푎precludes both 푎≺푏and 푎= 푏is proved like the ﬁrst case.
∙If 푎= 푏, then by deﬁnition of ≺it is impossible for 푎≺푏or 푏≺푎to be
true.
Technically, subset is not a relation, but in a natural way, it can be considered as one.
Let ℱbe a family of sets. Deﬁne
푆= {(퐴, 퐵) : 퐴⊆퐵∧퐴, 퐵∈ℱ}.
Associate ⊆with the relation 푆.
EXAMPLE 4.3.9
Let 퐴be a nonempty set. We show that (P(퐴), ⊆) is a partially ordered set. Let
퐵, 퐶, and 퐷be subsets of 퐴.

180
Chapter 4 RELATIONS AND FUNCTIONS
∙Since 퐵⊆퐵, the relation ⊆is reﬂexive.
∙Since 퐵⊆퐶and 퐶⊆퐵implies that 퐵= 퐶(Deﬁnition 3.3.7), ⊆is
antisymmetric.
∙Since 퐵⊆퐶and 퐶⊆퐷implies 퐵⊆퐷(Theorem 3.3.6), we see that ⊆is
transitive.
This example is in line with what we know about subsets. For instance, if 퐴⊂퐵,
then we conclude that 퐵⊄퐴and 퐴≠퐵, which is what we expect from the
weak-trichotomy law (4.3.8).
Bounds
Let ≼be a partial order on 퐴with elements 푚and 푚′ such that 푎≼푚and 푎≼푚′
for all 푎∈퐴. In particular, this implies that 푚≼푚′ and 푚′ ≼푚, so since ≼is
antisymmetric, we conclude that 푚= 푚′. Similarly, if 푚≼푎and 푚′ ≼푎for all 푎∈퐴,
then 푚= 푚′. This argument justiﬁes the use of the word the in the next deﬁnition.
DEFINITION 4.3.10
Let (퐴, ≼) be a poset and 푚∈퐴.
∙푚is the least element of 퐴(with respect to ≼) if 푚≼푎for all 푎∈퐴.
∙푚is the greatest element of 퐴(with respect to ≼) if 푎≼푚for all 푎∈퐴.
There is no guarantee that a partially ordered set will have a least or a greatest element.
In Example 4.3.9, the greatest element of P(퐴) with respect to ⊆is 퐴and the least
element is ∅. However, in Example 4.3.7 (Figure 4.5), the least element of 픸∗is □,
but there is no greatest element.
EXAMPLE 4.3.11
If 퐴is a ﬁnite set of real numbers, 퐴has a least and a greatest element with
respect to ≤. Under the partial order ≤, the set 퐙+ also has a least element but no
greatest element, and both {5푛: 푛∈퐙−} and 퐙−have greatest elements but no
least elements. To show that 퐵= {5푛: 푛∈퐙+} has a least element with respect
to ≤, use the fact that the least element of 퐙+ is 1. Therefore, the least element
of 퐵is 5 because 5 ∈퐵and 5(1) ≤5푛for all 푛∈퐙+.
Some sets will not have a least or greatest element with a given partial order but
there will still be elements that are considered greater or lesser than every element of
the set.
DEFINITION 4.3.12
Let ≼be a partial order on 퐴and 퐵⊆퐴.
∙푢∈퐴is an upper bound of 퐵if 푏≼푢for all 푏∈퐵. The element 푢is the
least upper bound of 퐵if it is an upper bound and for all upper bounds 푢′
of 퐵, 푢≼푢′.

Section 4.3 PARTIAL ORDERS
181
∙푙∈퐴is a lower bound of 퐵if 푙≼푏for all 푏∈퐵. The element 푙is the
greatest lower bound of 퐵if it is a lower bound and for all lower bounds
푙′ of 퐵, 푙′ ≼푙.
In the deﬁnition we can write the word the because the order is antisymmetric.
EXAMPLE 4.3.13
The interval (3, 5) is a subset of 퐑. Under the partial order ≤, both 5 and 10 are
upper bounds of this interval, while 5 is a least upper bound. Also, 3 and −휋are
lower bounds, but 3 is the greatest lower bound.
EXAMPLE 4.3.14
Assume that 풞⊆P(퐙). Since the elements of 풞are subsets of 퐙, we conclude
that ⋃풞∈P(퐙) (Deﬁnition 3.4.8). If 퐴∈풞, then 퐴⊆⋃풞. Therefore, ⋃풞
is an upper bound of 풞with respect to ⊆. To see that it is the least upper bound,
let 푈be any upper bound of 풞. Take 푥∈⋃풞. This means that there exists
퐷∈풞such that 푥∈퐷. Since 푈is an upper bound of 풞, 퐷⊆푈. Hence,
푥∈푈, and we conclude that ⋃풞⊆푈.
Comparable and Compatible Elements
In Figure 4.5, we see that 01 ≼010 and 01 ≼011. However, 010 ⋠011 and 011 ⋠
010. This means that in the poset of Example 4.3.7, there are pairs of elements that are
related to each other and there are other pairs that are not.
DEFINITION 4.3.15
Let (퐴, ≼) be a poset and 푎, 푏∈퐴. If 푎≼푏or 푏≼푎, then 푎and 푏are com-
parable with respect to ≼. Elements of 퐴are incomparable if they are not
comparable.
Continuing our review of the partially ordered set of Example 4.3.7, we note that
the element □has the property that no element is less than it, but as seen in Figure 4.5,
for every element of 픸∗, there exists an element of 픸∗that is greater. However, that
same relation deﬁned on
퐴= {휎∈픸∗: 휎has at most 3 characters}
(4.3)
has the property that 000, 001, 010, 011, 100, 101, 110, 111 have no elements greater
than them. This leads to the next deﬁnition.
DEFINITION 4.3.16
Let (퐴, ≼) be a poset and 푚∈퐴.
∙푚is a minimal element of 퐴(with respect to ≼) if 푎⊀푚for all 푎∈퐴.
∙푚is a maximal element of 퐴(with respect to ≼) if 푚⊀푎for all 푎∈퐴.

182
Chapter 4 RELATIONS AND FUNCTIONS
Therefore, the empty string is a minimal element of 퐴(4.3), and 000, 001, 010, 011,
100, 101, 110, 111 are maximal. Notice that every least element is minimal and every
greatest element is maximal.
Although not every pair of elements is comparable in the partially ordered set of
Example 4.3.7, there are inﬁnite sequences of comparable elements, such as
□≼0 ≼01 ≼001 ≼0001 ≼· · · .
DEFINITION 4.3.17
A subset 퐶of the poset (퐴, ≼) is a chain with respect to ≼if 푎is comparable to
푏for all 푎, 푏∈퐶.
When 퐙is partially ordered by ≤, the sets {0, 1, 2, 3, … }, {… , −3, −2, −1, 0}, and
{… , −2, 0, 2, 4, … } are chains. In P(퐙), both
{{1, 2}, {1, 2, 3, 4}, {1, 2, 3, 4, 5, 6}}
and
{∅, {0}, {0, 1}, {0, 1, 2}, … }
are chains with respect to ⊆.
EXAMPLE 4.3.18
To see that {퐴푘: 푘∈퐙+} where 퐴푘= {푥∈퐙: (푥−1)(푥−2) · · · (푥−푘) = 0}
is a chain with respect to ⊆, take 푚, 푛∈퐙+. By deﬁnition,
퐴푚= {1, 2, … , 푚}
and
퐴푛= {1, 2, … , 푛}.
If 푚≤푛, then 퐴푚⊆퐴푛, otherwise 퐴푛⊆퐴푚.
EXAMPLE 4.3.19
Let 퐶0 and 퐶1 be chains of 퐴with respect to ≼. Take 푎, 푏∈퐶0 ∩퐶1. Then,
푎, 푏∈퐶0, so 푎≼푏or 푏≼푎. Therefore, 퐶0 ∩퐶1 is a chain. However, the union
of two chains might not be a chain. For example, {{1}, {1, 2}} and {{1}, {1, 3}}
are chains in (P(퐙), ⊆), but {{1}, {1, 2}, {1, 3}} is not a chain because {1, 2} ⊈
{1, 3} and {1, 3} ⊈{1, 2}.
The sets 퐙, 퐐, and 퐑are chains of 퐑with respect to ≤. In fact, any subset of 퐑is a
chain of 퐑because subsets of chains are chains. This motivates the next deﬁnition.
DEFINITION 4.3.20
The poset (퐴, ≼) is a linearly ordered set and ≼is a linear order if 퐴is a chain
with respect to ≼.

Section 4.3 PARTIAL ORDERS
183
Since every subset 퐴of 퐑is a chain with respect to ≤, the relation ≤is a linear order
on 퐴. Furthermore, since every pair of elements in a linear order are comparable,
Theorem 4.3.8 can be strengthened.
THEOREM 4.3.21 [Trichotomy Law]
If ≼is a linear order on 퐴, for all 푎, 푏∈퐴, exactly one of the following are true:
푎≺푏, 푏≺푎, or 푎= 푏.
Although it is not the case that every pair of elements of the poset deﬁned in Exam-
ple 4.3.7 is comparable, it is the case that for any given pair of elements, there exists
another element that is related to the given elements. For example, for the pair 100 and
110, 1 ≼100 and 1 ≼110. Also, for the pair 101 and 10, 10 ≼101 and 10 ≼10.
DEFINITION 4.3.22
Let (퐴, ≼) be a poset. The elements 푎, 푏∈퐴are compatible if there exists 푐∈퐴
such that 푐≼푎and 푐≼푏. If 푎and 푏are not compatible, they are incompatible
and we write 푎⟂푏.
Observe that if 푎and 푏are comparable, they are also compatible. On the other hand, it
takes some work to deﬁne a relation in which every pair of elements is incompatible.
DEFINITION 4.3.23
A subset 퐷of a poset (퐴, ≼) is an antichain with respect to ≼when for all
푎, 푏∈퐷, if 푎≠푏, then 푎⟂푏.
The sets
{{푛} : 푛∈퐙}
and
{{1}, {2, 3}, {4, 5, 6}, {7, 8, 9, 10}, … }
are antichains of P(퐙) with respect to ⊆.
Well-Ordered Sets
The notion of a linear order incorporates many of the properties of ≤on 퐍since ≤is
reﬂexive, antisymmetric, and transitive, and 퐍is a chain with respect to ≤. However,
there is one important property of (퐍, ≤) that is not included among those of a linear
order. Because of the nature of the natural numbers, every subset of 퐍that is nonempty
has a least element. For example, 5 is the least element of {5, 7, 32, 99} and 2 is the
least element of {2, 4, 6, 8, … }. We want to be able to identify those partial orders that
also have this property.
DEFINITION 4.3.24
The linearly ordered set (퐴, ≼) is a well-ordered set and ≼is a well-order if
every nonempty subset of 퐴has a least element with respect to ≼.

184
Chapter 4 RELATIONS AND FUNCTIONS
According to Deﬁnition 4.3.24, (퐍, ≤) is a well-ordered set, but this fact about the
natural numbers cannot be proved without making an assumption. Therefore, so that
we have at least one well-ordered set with which to work, we assume the following.
AXIOM 4.3.25
(퐍, ≤) is a well-ordered set.
Coupling Axiom 4.3.25 with the next theorem will yield inﬁnitely many well-ordered
sets.
THEOREM 4.3.26
If (퐴, ≼) is well-ordered and 퐵is a nonempty subset of 퐴, then (퐵, ≼) is well-
ordered.
PROOF
Let 퐵⊆퐴and 퐵≠∅. To prove that 퐵is well-ordered, let 퐶⊆퐵and 퐶≠∅.
Then, 퐶⊆퐴. Since ≼well-orders 퐴, we know that 퐶has a least element with
respect to ≼.
Because 퐙∩[5, ∞) ⊆퐙+ ⊆퐍, by Axiom 4.3.25 and Theorem 4.3.26, both (퐙+, ≤)
and (퐙∩[5, ∞) , ≤) are well-ordered sets.
EXAMPLE 4.3.27
Let 퐴= {푛휋: 푛∈퐍}. To prove that 퐴is well-ordered by ≤, let 퐵⊆퐴such
that 퐵≠∅. This means that there exists a nonempty subset 퐼of 퐍such that
퐵= {푛휋: 푛∈퐼}. Since 퐍is well-ordered, 퐼has least element 푚. We claim
that 푚휋is the least element of 퐵. To see this, take 푏∈퐵. Then, 푏= 푖휋for some
푖∈퐼. Since 푚is the least element of 퐼, 푚≤푖. Therefore, 푚휋≤푖휋= 푏.
To prove that a set 퐴is not well-ordered by ≼, we must ﬁnd a nonempty subset 퐵
of 퐴that does not have a least element. This means that for every 푏∈퐵, there exists
푐∈퐵such that 푐≺푏. That is, there are elements 푏푛∈퐵(푛∈퐍) such that
· · · ≺푏2 ≺푏1 ≺푏0.
This informs the next deﬁnition.
DEFINITION 4.3.28
Let ≼be a partial order on 퐴and 퐵= {푎푖: 푖∈퐍} be a subset of 퐴.
∙퐵is increasing means 푖< 푗implies 푎푖≺푎푗for all 푖, 푗∈퐍.
∙퐵is decreasing means 푖< 푗implies 푎푗≺푎푖for all 푖, 푗∈퐍.
If a set is well-ordered, it has a least element, but the converse is not true. To see
this, consider 퐴= {0, 1∕2, 1∕3, 1∕4, … }. It has a least element, namely, 0, but 퐴also

Section 4.3 PARTIAL ORDERS
185
contains the decreasing set
{1
2, 1
3, 1
4, 1
5, …
}
.
(4.4)
Therefore, 퐴has a subset without a least element, so 퐴is not well-ordered. We sum-
marize this observation with the following theorem, and leave its proof to Exercise 23.
THEOREM 4.3.29
(퐴, ≼) is not a well-ordered set if and only if (퐴, ≼) does not have a decreasing
subset.
Theorem 4.3.29 implies that any ﬁnite linear order is well-ordered.
EXAMPLE 4.3.30
The decreasing sequence (4.4) with Theorem 4.3.29 shows that the sets (0, 1),
[0, 1], 퐐, and {1∕푛: 푛∈퐙+} are not well-ordered by ≤.
We close this section by proving two important results from number theory. Their
proofs use Axiom 4.3.25. The strategy is to deﬁne a nonempty subset of a well-ordered
set. Its least element 푟will be a number that we want. This least element also needs
to have a particular property, say 푝(푟). To show that it has the property, assume ¬푝(푟)
and use this to ﬁnd another element of the set that is less than 푟. This contradicts the
minimality of 푟allowing us to conclude 푝(푟).
THEOREM 4.3.31 [Division Algorithm]
If 푚, 푛∈퐍with 푚≠0, there exist unique 푞, 푟∈퐍such that 푟< 푚and
푛= 푚푞+ 푟.
PROOF
Uniqueness is proved in Example 2.4.14. To prove existence, take 푚, 푛∈퐍and
deﬁne
푆= {푘∈퐍: ∃푙(푙∈퐍∧푛= 푚푙+ 푘)}.
Notice that 푛∈푆, so 푆≠∅. Therefore, 푆has a least element by Axiom 4.3.25.
Call it 푟and write 푛= 푚푞+ 푟for some natural number 푞. Assume 푟≥푚, which
implies that 푟−푚≥0. Also,
푛= 푚(푞−1) + 푟−푚
because
푟−푚= 푛−푚푞−푚= 푛−푚(푞+ 1),
so 푟−푚∈푆. Since 푟> 푟−푚because 푚is positive, 푟cannot be the minimum
of 푆, a contradiction.
The value 푞of the division algorithm (Theorem 4.3.31) is called the quotient and 푟is
the remainder. For example, if we divide 5 into 17, the division algorithm returns a
quotient of 3 and a remainder of 2, so we can write that 17 = 5(3) + 2. Notice that
2 < 3.

186
Chapter 4 RELATIONS AND FUNCTIONS
Call 푛∈퐙a linear combination of the integers 푎and 푏if 푛= 푢푎+ 푣푏for some
푢, 푣∈퐙. Since 37 = 5(2) + 3(9), we see that 37 is a linear combination of 2 and 9.
Furthermore, if 푑∣푎and 푑∣푏, then 푑∣푢푎+ 푣푏. To see this, write 푎= 푑푙and 푏= 푑푘
for some 푙, 푘∈퐙. Then,
푢푎+ 푣푏= 푢푑푙+ 푣푑푘= 푑(푢푙+ 푣푘),
and this means 푑∣푢푎+ 푣푏.
THEOREM 4.3.32
Let 푎, 푏∈퐙with not both equal to 0. If 푐= gcd(푎, 푏), there exists 푚, 푛∈퐙such
that 푐= 푚푎+ 푛푏.
PROOF
Deﬁne
푇= {푧∈퐙+ : ∃푥∃푦(푥, 푦∈퐙∧푧= 푥푎+ 푦푏)}.
Notice that 푇is not empty because 푎2 + 푏2 ∈푇. By Axiom 4.3.25, 푇has a least
element 푑, so write 푑= 푚푎+ 푛푏for some 푚, 푛∈퐙.
∙Since 푑> 0, the division algorithm (4.3.31) yields 푎= 푑푞+ 푟for some
natural numbers 푞and 푟with 푟< 푑. Then,
푟= 푎−푑푞= 푎−(푚푎−푛푏)푞= (1 −푚푞)푎+ (푛푞)푏.
If 푟> 0, then 푟∈푇, which is impossible because 푑is the least element of
푇. Therefore, 푟= 0 and 푑∣푎. Similarly, 푑∣푏.
∙To show that 푑is the greatest of the common divisors, suppose 푠∣푎and
푠∣푏with 푠∈퐙+. By deﬁnition, 푎= 푠푘and 푏= 푠푙for some 푘, 푙∈퐙.
Hence,
푑= 푚(푠푘) + 푛(푠푙) = 푠(푚푘−푛푙).
Thus, 푠≤푑because 푠is nonzero and 푠divides 푑(Exercise 25).
Exercises
1. Is (∅, ⊆) a partial order, linear order, or well order? Explain.
2. For each relation on {1, 2}, determine if it is reﬂexive, irreﬂexive, symmetric, asym-
metric, antisymmetric, or transitive.
(a) {(1, 2)}
(b) {(1, 2), (2, 1)}
(c) {(1, 1), (1, 2), (2, 1)}
(d) {(1, 1), (1, 2), (2, 2)}
(e) {(1, 1), (1, 2), (2, 1), (2, 2)}
(f)
∅
3. Give an example of a relation that is neither symmetric nor asymmetric.

Section 4.3 PARTIAL ORDERS
187
4. Let 푅be a relation on 퐴. Prove that 푅is reﬂexive if and only if (퐴× 퐴) ⧵푅is
irreﬂexive.
5. Show that a relation 푅on 퐴is asymmetric if and only if 푅∩푅−1 = ∅.
6. Let (퐴, ≼) and (퐵, ≤) be posets. Deﬁne ∼on 퐴× 퐵by
(푎, 푏) ∼(푎′, 푏′) if and only if 푎≼푎′ and 푏≤푏′.
Show that ∼is a partial order on 퐴× 퐵.
7. For any alphabet 픸, prove the following.
(a) For all 휎, 휏, 휈∈픸∗, 휎⌢(휏⌢휈) = (휎⌢휏)⌢휈.
(b) There exists 휎, 휏∈픸∗such that 휎⌢휏≠휏⌢휎.
(c) 픸∗has an identity with respect to ⌢, but for all 휎∈픸∗, there is no inverse
for 휎if 휎≠□.
8. Prove that 픸∗from Example 4.3.7 is partially ordered by ≼.
9. Prove that (P(퐴), ⊆) is not a linear order if 퐴has at least three elements.
10. Show that (픸∗, ≼) is not a linear order if 픸has at least two elements.
11. Prove that the following families of sets are chains with respect to ⊆.
(a) {[0, 푛] : 푛∈퐙+}
(b) {(2푛)퐙: 푛∈퐍} where (2푛)퐙= {2푛⋅푘: 푘∈퐙}
(c) {퐵푛: 푛∈퐍} where 퐵푛= ⋃{퐴푖: 푖∈퐍∧푖≤푛} and 퐴푖is a set for all
푖∈퐍
12. Can a chain be disjoint or pairwise disjoint? Explain.
13. Suppose that {퐴푖: 푖∈퐍} is a chain of sets such that for all 푖≤푗, 퐴푖⊆퐴푗. Prove
for all 푘∈퐍.
(a)
⋃
{퐴푖∶푖∈퐍∧푖≤푘} = 퐴푘
(b)
⋂
{퐴푖∶푖∈퐍∧푖≤푘} = 퐴0
14. Let {퐴푛: 푛∈퐍} be a family of sets. For every 푚∈퐍, deﬁne 퐵푚= ⋃푚
푖=0 퐴푖.
Show that {퐵푚: 푚∈퐍} is a chain.
15. Let 풞푖be a chain of the poset (퐴, ≼) for all 푖∈퐼. Prove that ⋂
푖∈퐼풞푖is a chain.
Is ⋃
푖∈퐼풞푖necessarily a chain? Explain.
16. Let (퐴, ≼) and (퐵, ≤) be linear orders. Deﬁne ∼on 퐴× 퐵by
(푎, 푏) ∼(푎′, 푏′)
if and only if
푎≺푎′ or 푎= 푎′ and 푏≤푏′.
This relation is called a lexicographical order since it copies the order of a dictionary.
(a) Prove that (퐴× 퐵, ∼) is a linear order.
(b) Suppose that (푎, 푏) is a maximal element of 퐴× 퐵with respect to ∼. Show
that 푎is a maximal element of 퐴with respect to ≼.

188
Chapter 4 RELATIONS AND FUNCTIONS
17. Let 퐴be a set. Prove that 퐵⊆P(퐴) ⧵{∅} is an antichain with respect to ⊆if and
only if 퐵is pairwise disjoint.
18. Prove the following true or false.
(a) Every well-ordered set contains a least element.
(b) Every well-ordered set contains a greatest element.
(c) Every subset of a well-ordered set contains a least element.
(d) Every subset of a well-ordered set contains a greatest element.
(e) Every well-ordered set has a decreasing subset.
(f)
Every well-ordered set has a increasing subset.
19. For each of the given sets, indicate whether or not it is well-ordered by ≤. If it is,
prove it. If it is not, ﬁnd a decreasing sequence of elements of the set.
(a) {
√
2, 5, 6, 10.56, 17, −100}
(b) {2푛: 푛∈퐍}
(c) {휋∕푛: 푛∈퐙+}
(d) {휋∕푛: 푛∈퐙−}
(e) {−4, −3, −2, −1, … }
(f)
퐙∩(휋, ∞)
(g) 퐙∩(−7, ∞)
20. Prove that (퐙∩(푥, ∞), ≤) is a well-ordered set for all 푥∈퐑.
21. Show that a well-ordered set has a unique least element.
22. Let (퐴, ≼) be a well-ordered set. If 퐵⊆퐴and there is an upper bound for 퐵in 퐴,
then 퐵has a greatest element.
23. Prove Theorem 4.3.29.
24. Where does the proof of Theorem 4.3.31 go wrong if 푚= 0?
25. Prove that if 푎∣푏, then 푎≤푏for all 푎, 푏∈퐙.
26. Let 푎, 푏, 푐∈퐙. Show that if gcd(푎, 푐) = gcd(푏, 푐) = 1, then gcd(푎, 푏푐) = 1.
27. Let 푎, 푏∈퐙and assume that gcd(푎, 푏) = 1. Prove.
(a) If 푎∣푛and 푏∣푛, then 푎푏∣푛.
(b) gcd(푎+ 푏, 푏) = gcd(푎+ 푏, 푎) = 1.
(c) gcd(푎+ 푏, 푎−푏) = 1 or gcd(푎+ 푏, 푎−푏) = 2.
(d) If 푐∣푎, then gcd(푏, 푐) = 1.
(e) If 푐∣푎+ 푏, then gcd(푎, 푐) = gcd(푏, 푐) = 1.
(f)
If 푑∣푎푐and 푑∣푏푐, then 푑∣푐.
28. Let 푎, 푏∈퐙, where at least one is nonzero. Prove that 푆= 푇if
푆= {푥: ∃푙[푙∈퐙∧푥= 푙gcd(푎, 푏)]}
and
푇= {푥: 푥> 0 ∧∃푢∃푣(푢, 푣∈퐙∧푥= 푢푎+ 푣푏)}.

Section 4.4 FUNCTIONS
189
29. Prove that if 푑∣푎and 푑∣푏, then 푑∣gcd(푎, 푏) for all 푎, 푏, 푑∈퐙.
4.4
FUNCTIONS
From algebra and calculus, we know what a function is. It is a rule that assigns to each
possible input value a unique output value. The common picture is that of a machine
that when a certain button is pushed, the same result always happens. In basic algebra
a relation can be graphed in the Cartesian plane. Such a relation will be a function if
and only if every vertical line intersects its graphs at most once. This is known as the
vertical line test (Figure 4.6). This criteria is generalized in the next deﬁnition.
DEFINITION 4.4.1
Let 퐴and 퐵be sets. A relation 푓⊆퐴× 퐵is a function means that for all
(푥, 푦), (푥′, 푦′) ∈퐴× 퐵,
if 푥= 푥′, then 푦= 푦′.
The function 푓is an n-ary function if there exists sets 퐴0, 퐴1, … , 퐴푛−1 such that
퐴= 퐴0 × 퐴1 × · · · × 퐴푛−1. If 푛= 1, then 푓is a unary function, and if 푛= 2,
then 푓is a binary function,
EXAMPLE 4.4.2
The set {(1, 2), (4, 5), (6, 5)} is a function, but {(1, 2), (1, 5), (6, 5)} is not since it
contains (1, 2) and (1, 5). Also, ∅is a function (Exercise 16).
Intersects at most once
Figure 4.6
Passing the vertical line test.

190
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.4.3
Deﬁne 푓= {(푢, 1 + 2 cos 휋푢) : 푢∈퐑}. Assume that both (푥, 1 + 2 cos 휋푥) and
(푥′, 1 + 2 cos 휋푥′) are elements of 푓. Then, because cosine is a function,
푥= 푥′ ⇒휋푥= 휋푥′
⇒cos 휋푥= cos 휋푥′
⇒2 cos 휋푥= 2 cos 휋푥′
⇒1 + 2 cos 휋푥= 1 + 2 cos 휋푥′.
Therefore, 푓is a function.
EXAMPLE 4.4.4
The standard arithmetic operations are functions. For example, taking a square
root is a unary function, while addition, subtraction, multiplication, and division
are binary functions. To illustrate this, addition on 퐙is the set
퐴= {((푎, 푏), 푎+ 푏) : 푎, 푏∈퐙}.
(4.5)
Let 푓⊆퐴× 퐵be a function. This implies that for all 푎∈퐴, either [푎]푓= ∅or
[푎]푓is a singleton (Deﬁnition 4.2.7). For example, if 푓= {(1, 2), (4, 5), (6, 5)}, then
[1]푓= {2} and [3]푓= ∅. Because [푎]푓can contain at most one element, we typically
simplify the notation.
DEFINITION 4.4.5
Let 푓be a function. For all 푎∈퐴, deﬁne
푓(푎) = 푏if and only if [푎]푓= {푏}
and write that 푓(푎) is undeﬁned if [푎]푓= ∅.
For example, using (4.5),
퐴((5, 7)) = 12,
but 퐴(5, 휋) is undeﬁned. With ordered 푛-tuples, the outer parentheses are usually elim-
inated so that we write
퐴(5, 7) = 12.
Moreover, if 퐷⊆퐴is the domain of the function 푓, write the function notation
푓: 퐷→퐵
and call 퐵a codomain of 푓(Figure 4.7). Because functions are often represented by
arrows that “send” one element to another, a function can be called a map. If 푓(푥) = 푦,
we can say that “푓maps 푥to 푦.” We can also say that 푦is the image of 푥under 푓and
푥is a pre-image of 푦. For example, if
푓= {(3, 1), (4, 2), (5, 2)},

Section 4.4 FUNCTIONS
191
f : D → B
Function name
Domain
Codomain
Figure 4.7
Function notation.
푓maps 3 to 1, 2 is the image of 4, and 5 is a pre-image of 2 (Figure 4.8). If 푔is also a
function with domain 퐷and codomain 퐵, we can use the abbreviation
푓, 푔: 퐷→퐵
to represent both functions. An alternate choice of notation involves referring to the
functions as 퐷→퐵.
EXAMPLE 4.4.6
If 푓(푥) = cos 푥, then 푓maps 휋to −1, 0 is the image of 휋∕2, and 휋∕4 is a
pre-image of
√
2∕2.
EXAMPLE 4.4.7
Let 퐴be any set. The identity relation on 퐴(Deﬁnition 4.1.2) is a function, so
call 퐼퐴the identity map and write
퐼퐴(푥) = 푥.
Sometimes a function 푓is deﬁned using a rule that pairs an element of the function’s
domain with an element of its codomain. When this is done successfully, 푓is said to
be well-deﬁned. Observe that proving that 푓is well-deﬁned is the same as proving it
to be a function.
1
2
5
4
3
f
Figure 4.8
The map 푓= {(3, 1), (4, 2), (5, 2)}.

192
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.4.8
Let 푓: 퐑→퐑be deﬁned by 푓(푥) = 1 + 2 cos 휋푥. This is the function
푓= {(푥, 1 + 2 cos 휋푥) : 푥∈퐑}.
The work of Example 4.4.3 shows that 푓is well-deﬁned.
Before we examine another example, let us set a convention on naming functions.
It is partly for aesthetics, but it does help in organizing functions based on the type of
elements in their domains and ranges.
∙Use English letters (usually, 푓, 푔, and ℎ) for naming functions that involve num-
bers. Typically, these will be lowercase, but there are occasions when we will
choose them to be uppercase.
∙Use Greek letters (often 휑or 휓) for general functions or those with domains not
consisting of numbers. They are also usually lowercase, but uppercase Greek
letters like Φ and Ψ are sometimes appropriate. (See the appendix for the Greek
alphabet.)
EXAMPLE 4.4.9
Let 푛, 푚∈퐙+ such that 푚∣푛. Deﬁne 휑([푎]푛) = [푎]푚for all 푎∈퐙. This means
that
휑= {([푎]푛, [푎]푚) : 푎∈퐙}.
It is not clear that 휑is well-deﬁned since an equivalence class can have many
representatives, so assume that [푎]푛= [푏]푛for 푎, 푏∈퐙. Therefore, 푛∣푎−푏.
Then, by hypothesis, 푚∣푎−푏, and this yields
휑([푎]푛) = [푎]푚= [푏]푚= 휑([푏]푛).
EXAMPLE 4.4.10
Let 푥∈퐑. Deﬁne the greatest integer function as
⟦푥⟧= the greatest integer ≤푥.
For example, ⟦5⟧= 5, ⟦1.4⟧= 1, and ⟦−3.4⟧= −4. The greatest integer
function is a function 퐑→퐙. It is well-deﬁned because the relation ≤well-
orders 퐙(Exercise 4.3.22).
If a relation on 퐑is not a function, it will fail the vertical line test (Figure 4.9). To
generalize, let 휑⊆퐴× 퐵. To show that 휑is not a function, we must show that there
exists (푥, 푦1), (푥, 푦2) ∈휑such that 푦1 ≠푦2.
EXAMPLE 4.4.11
The relation 푓= 퐼퐑∪{(푥, −푥) : 푥∈퐑} is not a function since (4, 4) ∈푓and
(4, −4) ∈푓.

Section 4.4 FUNCTIONS
193
(x,   )
y
y
x
1
2
(x,    
y2
y1
)   
Figure 4.9
The relation is not a function.
EXAMPLE 4.4.12
Deﬁne 휑⊆퐙2 × 퐙3 by 휑([푎]2) = [푎]3 for all 푎∈퐙. Since 3 does not divide 2,
휑is not well-deﬁned. This is proved by noting that [0]2 = [2]2 but [0]3 ≠[2]3.
There will be times when we want to examine sets of functions. If each function is
to have the same domain and codomain, we use the following notation.
DEFINITION 4.4.13
If 퐴and 퐵are sets,
퐴퐵= {휑: 휑is a function 퐴→퐵}.
For instance, 퐴퐵is a set of real-valued functions if 퐴, 퐵⊆퐑.
EXAMPLE 4.4.14
If 푎푛is a sequence of real numbers with 푛= 0, 1, 2, … , the sequence 푎푛is an
element of 퐍퐑. Illustrating this, the sequence
푎푛= (−1∕2)푛
is a function and can be graphed as in Figure 4.10.
EXAMPLE 4.4.15
Let 퐴⊆퐑and ﬁx 푎∈퐴. The evaluation map,
휖푎: 퐴퐴→퐴,
is deﬁned as
휖푎(푓) = 푓(푎).

194
Chapter 4 RELATIONS AND FUNCTIONS
Figure 4.10
푎푛= (−1∕2)푛is a function.
For example, if 푔(푥) = 푥2, then 휖3(푔) = 9. Observe that the evaluation map is an
element of (퐴퐴)퐴.
Equality
Since functions are sets, we already know that two functions are equal when they con-
tain the same ordered pairs. However, there is a common test to determine function
equality other than a direct appeal to Deﬁnition 3.3.7.
THEOREM 4.4.16
Functions 휑, 휓: 퐴→퐵are equal if and only if 휑(푥) = 휓(푥) for all 푥∈퐴.
PROOF
Suﬃciency is clear, so to prove necessity suppose that 휑(푥) = 휓(푥) for every
푥∈퐴. Take (푎, 푏) ∈휑. This means that 휑(푎) = 푏. By hypothesis, 휓(푎) = 푏,
which implies that (푎, 푏) ∈휓. Hence, 휑⊆푔. The proof of 휓⊆휑is similar, so
휑= 푔.
We use Theorem 4.4.16 in the next examples.
EXAMPLE 4.4.17
Let 푓and 푔be functions 퐑→퐑deﬁned by
푓(푥) = (푥−3)2 + 2
and
푔(푥) = 푥2 −6푥+ 11.
We show that 푓= 푔by taking 푥∈퐑and calculating
푓(푥) = (푥−3)2 + 2 = (푥2 −6푥+ 9) + 2 = 푥2 −6푥+ 11 = 푔(푥).

Section 4.4 FUNCTIONS
195
EXAMPLE 4.4.18
Let 휑, 휓: 퐙→퐙6 be functions such that
휑(푛) = [푛]6
and
휓(푛) = [푛+ 12]6.
Take 푛∈퐙. We show that [푛+ 12]6 = [푛]6 by proceeding as follows:
푥∈[푛+ 12]6 ⇔∃푘[푘∈퐙∧푥= 푛+ 12 + 6푘]
⇔∃푘[푘∈퐙∧푥= 푛+ 6(2 + 푘)]
⇔푥∈[푛]6.
Therefore, 휑= 휓.
EXAMPLE 4.4.19
Deﬁne
휓: 퐑→
(퐑퐑)
퐑
by 휓(푥) = 휖푥for all 푥∈퐑(Example 4.4.15). We show that 휓is well-deﬁned.
Take 푎, 푏∈퐑and assume that 푎= 푏. To show that 휓(푎) = 휓(푏), we prove
휖푎= 휖푏. Therefore, let 푓∈퐑퐑. Since 푓is a function and 푎, 푏∈dom(푓), we
have that 푓(푎) = 푓(푏). Thus,
휖푎(푓) = 푓(푎) = 푓(푏) = 휖푏(푓).
By Theorem 4.4.16, we see that two functions 푓and 푔are not equal when either
dom(푓) ≠dom(푔) or 푓(푥) ≠푔(푥) for some 푥in their common domain. For example,
푓(푥) = 푥2 and 푔(푥) = 2푥are not equal because 푓(3) = 9 and 푔(3) = 6. Although
these two functions diﬀer for every 푥≠0 and 푥≠2, it only takes one inequality to
prove that the functions are not equal. For example, if we deﬁne
ℎ(푥) =
{
푥2
if 푥≠0,
7
if 푥= 0,
then 푓≠ℎsince 푓(0) = 0 and ℎ(0) = 7.
Composition
We now consider the composition of relations when those relations are functions.
THEOREM 4.4.20
If 휑: 퐴→퐵and 휓: 퐶→퐷are functions such that ran(휑) ⊆퐶, then 휓◦휑is
a function 퐴→퐷and (휓◦휑)(푥) = 휓(휑(푥)).

196
Chapter 4 RELATIONS AND FUNCTIONS
PROOF
Because the range of 휑is a subset of 퐶, we know that 휑⊆퐴×퐶and 휓⊆퐶×퐷.
Let (푎, 푑1), (푎, 푑2) ∈휓◦휑. This means by Deﬁnition 4.1.9 that there exists
푐1, 푐2 ∈퐶such that (푎, 푐1), (푎, 푐2) ∈휑and (푐1, 푑1), (푐2, 푑2) ∈휓. Since 휑is a
function, 푐1 = 푐2, and then since 휓is a function, 푑1 = 푑2. Therefore, 휓◦휑is a
function, which is clearly 퐴→퐷. Furthermore,
휓◦휑= {(푥, 푧) : ∃푦[푦∈퐶∧(푥, 푦) ∈휑∧(푦, 푧) ∈휓]}
= {(푥, 푧) : ∃푦[푦∈퐶∧휑(푥) = 푦∧휓(푦) = 푧]}
= {(푥, 푧) : 푥∈퐴∧휓(휑(푥)) = 푧}
= {(푥, 휓(휑(푥))) : 푥∈퐴}.
Hence, (휓◦휑)(푥) = 휓(휑(푥)).
The ran(휑) ⊆퐶condition is important to Theorem 4.4.20. For example, take the real-
valued functions 푓(푥) = 푥and 푔(푥) =
√
푥. Since 푓(−1) = −1 but 푔(−1) ∉퐑, we
conclude that (푔◦푓)(−1) is undeﬁned.
EXAMPLE 4.4.21
Deﬁne the two functions 푓: 퐑→퐙and 푔: 퐑⧵{0} →퐑by 푓(푥) = ⟦푥⟧and
푔(푥) = 1∕푥. Since ran(푓) = 퐙⊈dom(푔), there are elements of 퐑for which
푔◦푓is undeﬁned. However,
ran(푔) = 퐑⧵{0} ⊆퐑= dom(푓),
so 푓◦푔is deﬁned and for all 푥∈퐑,
(푓◦푔)(푥) = 푓(푔(푥)) = 푓(1∕푥) = ⟦1∕푥⟧.
EXAMPLE 4.4.22
Let 휓: 퐙퐙→퐙be deﬁned by 휓(푓) = 휖3(푓) and also let 휑: 퐙→퐙7 be
휑(푛) = [푛]7. Since ran(휓) ⊆dom(휑), 휑◦휓is deﬁned. Thus, if 푔: 퐙→퐙is
deﬁned as 푔(푛) = 3푛,
(휑◦휓)(푔) = 휑(휓(푔)) = 휑(푔(3)) = 휑(9) = [9]7 = [2]7.
We should note that function composition is not a binary operation unless both func-
tions are 퐴→퐴for some set 퐴. In this case, function composition is a binary operation
on 퐴퐴.
Restrictions and Extensions
There are times when a subset of a given function is required. For example, consider
푓= {(푥, 푥2) : 푥∈퐑}.

Section 4.4 FUNCTIONS
197
If only positive values of 푥are required, we can deﬁne
푔= {(푥, 푥2) : 푥∈(0, ∞)}
so that 푔⊆푓. We have notation for this.
DEFINITION 4.4.23
Let 휑: 퐴→퐵be a function and 퐶⊆퐴.
∙The restriction of 휑to 퐶is the function 휑↾퐶: 퐶→퐵so that
(휑↾퐶)(푥) = 휑(푥) for all 푥∈퐶.
∙The function 휓: 퐷→퐸is an extension of 휑if 퐴⊆퐷, 퐵⊆퐸, and
휓↾퐴= 휑.
EXAMPLE 4.4.24
Let 푓= {(1, 2), (2, 3), (3, 4), (4, 1)} and 푔= {(1, 2), (2, 3)}. We conclude that
푔= 푓↾{1, 2}, and 푓is an extension of 푔.
EXAMPLE 4.4.25
Let 휑: 푈→푉be a function and 퐴, 퐵⊆푈. We conclude that
휑↾(퐴∪퐵) = (휑↾퐴) ∪(휑↾퐵)
because
(푥, 푦) ∈휑↾(퐴∪퐵) ⇔푦= 휑(푥) ∧푥∈퐴∪퐵
⇔푦= 휑(푥) ∧(푥∈퐴∨푥∈퐵)
⇔푦= 휑(푥) ∧푥∈퐴∨푦= 휑(푥) ∧푥∈퐵
⇔(푥, 푦) ∈휑↾퐴∨(푥, 푦) ∈휑↾퐵
⇔(푥, 푦) ∈(휑↾퐴) ∪(휑↾퐵).
Binary Operations
Standard addition and multiplication of real numbers are functions 퐑× 퐑→퐑(Ex-
ample 4.4.4). This means two things. First, given any two real numbers, their sum or
product will always be the same number. For instance, 3+5 is 8 and never another num-
ber. Second, given any two real numbers, their sum or product is also a real number.
Notice that subtraction also has these two properties when it is considered an operation
involving real numbers, but when we restrict substraction to 퐙+, it no longer has the
second property because the diﬀerence of two positive integers might not be a positive
integer. That is, subtraction is not a function 퐙+ × 퐙+ →퐙+.

198
Chapter 4 RELATIONS AND FUNCTIONS
DEFINITION 4.4.26
A binary operation ∗on the nonempty set 퐴is a function 퐴× 퐴→퐴.
The symbol that represents the addition function is +. It can be viewed as a function
퐑→퐑. Therefore, using function notation, +(3, 5) = 8. However, we usually write
this as 3 + 5 = 8. Similarly, since ∗represents an operation like addition, instead of
writing ∗(푎, 푏), we usually write 푎∗푏,
To prove that a relation ∗is a binary operation on 퐴, we must show that it satisﬁes
Deﬁnition 4.4.26. To do this, take 푎, 푎′, 푏, 푏′ ∈퐴, and prove:
∙푎= 푎′ and 푏= 푏′ implies 푎∗푏= 푎′ ∗푏′,
∙퐴is closed under ∗, that is 푎∗푏∈퐴.
EXAMPLE 4.4.27
Deﬁne 푥∗푦= 2푥−푦and take 푎, 푎′, 푏, 푏′ ∈퐙.
∙Assume 푎= 푎′ and 푏= 푏′. Then,
푎∗푏= 2푎−푏= 2푎′ −푏′ = 푎′ ∗푏′.
The second equality holds because multiplication and subtraction are bi-
nary operations on 퐙.
∙Because the product and diﬀerence of two integers is an integer, we have
that 푎∗푏∈퐙, so 퐙is closed under ∗.
Thus, ∗is a binary operation on 퐙.
EXAMPLE 4.4.28
Let 푆= {푒, 푎, 푏, 푐} and deﬁne ∗by the following table:
∗
푒
푎
푏
푐
푒
푒
푎
푏
푐
푎
푎
푏
푐
푒
푏
푏
푐
푒
푎
푐
푐
푒
푎
푏
The table is read from left to right, so 푏∗푐= 푎. The table makes ∗into a binary
operation since every pair of elements of 푆is assigned a unique element of 푆.
EXAMPLE 4.4.29
Fix a set 퐴. For any 푋, 푌∈P(퐴), deﬁne 푋∗푌= 푋∪푌.
∙Let 푋1, 푋2, 푌1, 푌2 ∈P(퐴). If we assume that 푋1 = 푋2 and 푌1 = 푌2, we
have 푋1 ∪푌1 = 푋2 ∪푌2. Hence, ∗is well-deﬁned.

Section 4.4 FUNCTIONS
199
∙To show that P(퐴) is closed under ∗, let 퐵and 퐶be subsets of 퐴. Then
퐵∗퐶= 퐵∪퐶∈P(퐴) because 퐵∪퐶⊆퐴[Exercise 3.3.10(a)].
This shows that ∗is a binary operation on P(퐴). Notice that ∗is a subset of
[P(퐴) × P(퐴)] × P(퐴).
EXAMPLE 4.4.30
Let 푚∈퐙+ and deﬁne [푎]푚+ [푏]푚= [푎+ 푏]푚. We show that this is a binary
operation on 퐙푚.
∙Let 푎1, 푎2, 푏1, 푏2 ∈퐙. Suppose [푎1]푚= [푎2]푚and [푏1]푚= [푏2]푚. This
means that 푎1 = 푎2 + 푛푘and 푏1 = 푏2 + 푛푙for some 푘, 푙∈퐙. Hence,
푎1 + 푏1 = 푎2 + 푏2 + 푛(푘+ 푙), and we have [푎1 + 푏1]푚= [푎2 + 푏2]푚.
∙For closure, let [푎]푚, [푏]푚∈퐙푚where 푎and 푏are integers. Then, we have
that [푎]푚+ [푏]푚= [푎+ 푏]푚∈퐙푚since 푎+ 푏is an integer.
Many binary operations share similar properties with the operations of + and × on 퐑.
The next deﬁnition gives four of these properties.
DEFINITION 4.4.31
Let ∗be a binary operation on 퐴.
∙∗is associative means that (푎∗푏) ∗푐= 푎∗(푏∗푐) for all 푎, 푏, 푐∈퐴.
∙∗is commutative means that 푎∗푏= 푏∗푎for all 푎, 푏∈퐴.
∙The element 푒is an identity of 퐴with respect to ∗when 푒∈퐴and 푒∗
푎= 푎∗푒= 푎for all 푎∈퐴.
∙Suppose that 퐴has an identity 푒with respect to ∗and let 푎∈퐴. The
element 푎′ ∈퐴is an inverse of 푎with respect to ∗if 푎∗푎′ = 푎′ ∗푎= 푒.
Notice that the identity, if it exists, must be unique. To prove this, suppose that
both 푒and 푒′ are identities. These must be equal because 푒= 푒∗푒′ = 푒′. So, if
a set has an identity with respect to an operation, we can refer to it as the identity of
the set. Similarly, we can write the inverse if it exists for associative binary operations
(Exercise 20).
EXAMPLE 4.4.32
We assume that + and × are both associative and commutative on 퐂and all sub-
sets of 퐂, that 0 is the identity with respect to + (the additive identity) and 1 is the
identity with respect to × (the multiplicative identity), and that every complex
number has an inverse with respect to + (an additive inverse) and every nonzero
complex number has an inverse with respect to × (a multiplicative inverse).

200
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.4.33
The binary operation deﬁned in Example 4.4.30 is both associative and commu-
tative. To see that it is commutative, let 푎, 푏∈퐙. Then,
[푎]푚+ [푏]푚= [푎+ 푏]푚= [푏+ 푎]푚= [푏]푚+ [푎]푚,
(4.6)
where the second equality holds because + is commutative on 퐙. Its identity is
[0]푚[let 푏= 0 in (4.6)] and the additive inverse of [푎]푚is [−푎]푚.
EXAMPLE 4.4.34
Since 퐴∪퐵= 퐵∪퐴and (퐴∪퐵) ∪퐶= 퐴∪(퐵∪퐶) for all sets 퐴, 퐵, and 퐶,
the binary operation in Example 4.4.29 is both associative and commutative. Its
identity is ∅, and only ∅has an inverse.
Exercises
1. Indicate whether each of the given relations are functions. If a relation is not a
function, ﬁnd an element of its domain that is paired with two elements of its range.
(a) {(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)}
(b) {(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)}
(c) {(푥,
√
|푥| : 푥∈퐑}
(d) {(푥, ±
√
|푥|) : 푥∈퐑}
(e) {(푥, 푥2) : 푥∈퐑}
(f)
{([푎]5, 푏) : ∃푘∈퐙(푎= 푏+ 5푘)}
(g) 휓: 퐙→퐙5 if 휓(푎) = [푎]5
2. Prove that the given relations are functions.
(a) {(푥, 1∕푥) : 푥∈퐑⧵{0}}
(b) {(푥, 푥+ 1) : 푥∈퐙}
(c) {(푥, |푥|) : 푥∈퐑}
(d) {(푥,
√
푥) : 푥∈[0, ∞)}
3. Let 푓= {(푥, 푦) ∈퐑2 : 2푥+ 푦= 1}. Show that 푓is a function with domain and
codomain equal to the set of real numbers.
4. Let 푓, 푔: 퐑→퐑be functions. Prove that 휑(푥, 푦) = (푓(푥), 푔(푦)) is a function with
domain and codomain equal to 퐑× 퐑.
5. Let 퐴be a set and deﬁne 휓(퐴) = P(퐴). Show that 휓is a function.
6. Deﬁne
푓(푥) =
{
푥2
if 푥≥0,
5
if 푥< 0.
Show that 푓is well-deﬁned with domain equal to 퐑. What is ran(푓)?

Section 4.4 FUNCTIONS
201
7. Let 푥be in the domain and 푦in the range of each relation. Explain why each of the
given equations does not describe a function.
(a) 푦= 5 ± 푥
(b) 푥2 + 푦2 = 1
(c) 푥= 4푦2 −1
(d) 푦2 −푥2 = 9
8. Let 휑: 퐙→퐙7 be deﬁned by 휑(푎) = [푎]7. Write the given images as rosters.
(a) 휑(0)
(b) 휑(7)
(c) 휑(3)
(d) 휑(−3)
9. Deﬁne 휑([푎]푛) = [푎]푚for all 푎∈퐙. Is 휑being function suﬃcient for 푚∣푛?
Explain.
10. Give an example of a function that is an element of the given sets.
(a)
퐑퐑
(b)
퐑퐙
(c)
퐍퐑
(d)
퐑[0, ∞)
(e)
퐙(퐙5)
11. Evaluate the indicated expressions.
(a) 휖4(푓) if 푓(푥) = 9푥+ 2
(b) 휖휋(푔) if 푔(휃) = sin 휃
12. Since functions are sets, we can perform set operations on them. Let 푓(푥) = 푥2
and 푔(푥) = −푥. Find the following.
(a) 푓∪푔
(b) 푓∩푔
(c) 푓⧵푔
(d) 푔⧵푓
13. Let 풞be a chain of functions with respect to ⊆. Prove that ⋃풞is a function.
14. Let 푓and 푔be functions. Prove the following.
(a) If 푓and 푔are functions, 푓∩푔is a function.
(b) 푓∪푔is a function if and only if 푓(푥) = 푔(푥) for all 푥∈dom(푓) ∩dom(푔).
15. Let 푓: 퐴→퐵be a function. Deﬁne a relation 푆on 퐴by 푎푆푏if and only if
푓(푎) = 푓(푏).
(a) Show 푆is an equivalence relation.
(b) Find [3]푆if 푓: 퐙→퐙is deﬁned by 푓(푛) = 2푛.
(c) Find [2]푆if 푓: 퐙→퐙5 is given by 푓(푛) = [푛]5.
16. Show that ∅is a function and ﬁnd its domain and range.

202
Chapter 4 RELATIONS AND FUNCTIONS
17. Deﬁne ∗by 푥∗푦= 푥+ 푦+ 2 for all 푥, 푦∈퐙.
(a) Show that ∗is a binary operation on 퐙.
(b) Prove that −2 is the identity of 퐙with respect to ∗.
(c) For every 푛∈퐙, show that −푛−4 is the inverse of 푛with respect to ∗.
18. Deﬁne the binary operation ∗by 푥∗푦= 2푥−푦for all 푥, 푦∈퐙.
(a) Is there an integer that serves as an identity with respect to ∗?
(b) Does every integer have an inverse with respect to ∗?
19. Let 푓, 푔: 퐑→퐑be functions. Prove that 푓◦푔is well-deﬁned.
20. For an associative binary operation, prove that the inverse of an element is unique
if it exists. Show that this might not be the case if the binary operation is not associative.
21. Prove that the given pairs of functions are equal.
(a) 푓(푥) = (푥−1)(푥−2)(푥+ 3) and 푔(푥) = 푥3 −7푥+ 6
where 푓, 푔: 퐑→퐑
(b) 휑(푎, 푏) = 푎+ 푏and 휓(푎, 푏) = 푏+ 푎
where 휑, 휓: 퐙× 퐙→퐙
(c) 휑(푎, 푏) = ([푎]5, [푏+ 7]5) and 휓(푎, 푏) = ([푎+ 5]5, [푏−3]5)
where 휑, 휓: 퐙× 퐙→퐙5 × 퐙5
(d) 휑(푓) = 푓↾퐙and 휓(푓) = {(푛, 푓(푛)) : 푛∈퐙}
where 휑, 휓: 퐑퐑→퐙퐑
22. Show that the given pairs of functions are not equal.
(a) 푓(푥) = 푥and 푔(푥) = 2푥where 푓, 푔: 퐑→퐑
(b) 푓(푥) = 푥−3 and 푔(푥) = 푥+ 3 where 푓, 푔: 퐑→퐑
(c) 휑(푎) = [푎]5 and 휓(푎) = [푎]4 where 휑, 휓: 퐙→퐙4 ∪퐙5
(d) 휑(퐴) = 퐴⧵{0} and 휓(퐴) = 퐴∩{1, 2, 3} where 휑, 휓: P(퐙) →P(퐙)
23. Let 휓: 퐑→퐑퐑be deﬁned by 휓(푎) = 푓푎where 푓푎is the function 푓푎: 퐑→퐑
with 푓푎(푥) = 푎푥. Prove that 휓is well-deﬁned.
24. For each pair of functions, ﬁnd the indicated values when possible.
(a) 푓: 퐑→퐑and 푓(푥) = 2푥3
푔: 퐑→퐑and 푔(푥) = 푥+ 1
(푓◦푔)(2)
(푔◦푓)(0)
(b) 푓: [0, ∞) →퐑and 푓(푥) =
√
푥
푔: 퐑→퐑and 푔(푥) = |푥| −1
(푓◦푔)(0)
(푔◦푓)(4)
(c) 휑: 퐙→퐙5 and 휑(푎) = [푎]5
휓: 퐑퐑→퐑and 휓(푓) = 푓(0)
(휑◦휓)(.5푥+ 1)
(휓◦휑)(2)

Section 4.5 INJECTIONS AND SURJECTIONS
203
25. For each of the given functions, ﬁnd the composition of the function with itself.
For example, ﬁnd 푓◦푓for part (a).
(a) 푓: 퐑→퐑with 푓(푥) = 푥2
(b) 푔: 퐑→퐑with 푔(푥) = 3푥+ 1
(c) 휑: 퐙× 퐙→퐙× 퐙with 휑(푥, 푦) = (2푦, 5푥−푦)
(d) 휓: 퐙푚→퐙푚with 휓([푛]푚) = [푛+ 2]푚
26. Let 휑: 퐴→퐵be a function and 휓= 휑↾퐶where 퐶⊆퐴. Prove that if 휄: 퐶→퐴
is deﬁned by 휄(푐) = 푐(known as the inclusion map), then 휓= 휑◦휄.
27. Write the given restrictions as rosters.
(a) {(1, 2), (2, 2), (3, 4), (4, 7)} ↾{1, 3}
(b) 푓↾{0, 1, 2, 3} where 푓(푥) = 7푥−1 and dom(푓) = 퐑
(c) (푔+ ℎ) ↾{−3.3, 1.2, 7} where 푔(푥) = ⟦푥⟧, ℎ(푥) = 푥+ 1, and both dom(푔)
and dom(ℎ) equal 퐑
28. For functions 푓and 푔such that 퐴, 퐵⊆dom(푓), prove the following.
(a) 푓↾퐴= 푓∩[퐴× ran(푓)]
(b) 푓↾(퐴∩퐵) = (푓↾퐴) ∩(푓↾퐵)
(c) 푓↾(퐴⧵퐵) = (푓↾퐴) ⧵(푓↾퐵)
(d) (푔◦푓) ↾퐴= 푔◦(푓↾퐴)
29. Let 푓: 푈→푉be a function. Prove that if 퐴⊆푈, then 푓↾퐴= 푓◦퐼퐴.
30. Let 휑: 퐴퐶→퐵퐶be deﬁned by 휑(푓) = 푓↾퐵. Prove that 휑is well-deﬁned.
31. A real-valued function 푓is periodic if there exists 푘> 0 so that 푓(푥) = 푓(푥+ 푘)
for all 푥∈dom(푓). Let 푔, ℎ: 퐑→퐑be functions with period 푘. Prove that 푔◦ℎis
periodic with period 푘.
32. Let (퐴, ≼) be a poset. A function 휑: 퐴→퐴is increasing means for all 푥, 푦∈퐴,
if 푥≺푦, then 휑(푥) ≺휑(푦). A decreasing function is deﬁned similarly. Suppose that
휎and 휏are increasing. Prove that 휎◦휏is increasing.
4.5
INJECTIONS AND SURJECTIONS
When looking at relations, we studied the concept of an inverse relation. Given 푅, ob-
tain 푅−1 by exchanging the 푥- and 푦-coordinates. The same can be done with functions,
but the inverse might not be a function. For example, given
푓= {(1, 2), (2, 3), (3, 2)},
its inverse is
푓−1 = {(2, 1), (3, 2), (2, 3)}.
However, if the original relation is a function, we often want the inverse also to be a
function. This leads to the next deﬁnition.

204
Chapter 4 RELATIONS AND FUNCTIONS
DEFINITION 4.5.1
휑: 퐴→퐵is invertible means that 휑−1 is a function 퐵→퐴.
An immediate consequence of the deﬁnition is the next result.
LEMMA 4.5.2
Let 휑be invertible. Then, 휑(푥) = 푦if and only if 휑−1(푦) = 푥for all 푥∈dom(휑).
PROOF
Suppose that 휑(푥) = 푦. This means that (푥, 푦) ∈휑, so (푦, 푥) ∈휑−1. Since
휑is invertible, 휑−1 is a function, so write 휑−1(푦) = 푥. The converse is proved
similarly.
We use Lemma 4.5.2 in the proof of the next theorem, which gives conditions for
when a function is invertible.
THEOREM 4.5.3
휑: 퐴→퐵is invertible if and only if 휑−1 ◦휑= 퐼퐴and 휑◦휑−1 = 퐼퐵.
PROOF
Take a function 휑: 퐴→퐵. Then, 휑−1 ⊆퐵× 퐴.
∙Assume that 휑−1 is a function 퐵→퐴. Let 푥∈퐴and 푦∈퐵. By assump-
tion, we have 푥0 ∈퐴and 푦0 ∈퐵such that 휑(푥) = 푦0 and 휑−1(푦) = 푥0.
This implies that 휑−1(푦0) = 푥and 휑(푥0) = 푦by Lemma 4.5.2. Therefore,
(휑−1 ◦휑)(푥) = 휑−1(휑(푥)) = 휑−1(푦0) = 푥,
and
(휑◦휑−1)(푦) = 휑(휑−1(푦)) = 휑(푥0) = 푦.
∙Now assume 휑−1 ◦휑= 퐼퐴and 휑◦휑−1 = 퐼퐵. To show that 휑−1 is a
function, take (푦, 푥), (푦, 푥′) ∈휑−1. From this, we know that (푥, 푦) ∈휑.
Therefore,
(푥, 푥′) ∈휑−1 ◦휑= 퐼퐴,
so 푥= 푥′. In addition, we know that dom(휑−1) ⊆퐵, so to prove equality,
let 푦∈퐵. Then,
(푦, 푦) ∈퐼퐵= 휑◦휑−1.
Thus, there exists 푥∈퐴such that (푦, 푥) ∈휑−1, so 푦∈dom(휑−1).
EXAMPLE 4.5.4
∙Let 푓: 퐑→퐑be the function given by 푓(푥) = 푥+2. Its inverse is 푔(푥) = 푥−2
by Theorem 4.5.3. This is because
(푔◦푓)(푥) = 푔(푥+ 2) = (푥+ 2) −2 = 푥

Section 4.5 INJECTIONS AND SURJECTIONS
205
and
(푓◦푔)(푥) = 푓(푥−2) = (푥−2) + 2 = 푥.
∙If the function 푔: [0, ∞) →[0, ∞) is deﬁned by 푔(푥) = 푥2, then 푔−1 is a
function [0, ∞) →[0, ∞) and is deﬁned by 푔−1(푥) =
√
푥.
∙Let ℎ: 퐑→(0, ∞) be deﬁned as ℎ(푥) = 푒푥. By Theorem 4.5.3, we know that
ℎ−1(푥) = ln 푥because 푒ln 푥= 푥for all 푥∈[0, ∞) and ln 푒푥= 푥for all 푥∈퐑.
Injections
Theorem 4.5.3 can be improved by ﬁnding a condition for the invertibility of a function
based only on the given function. Consider the following. In order for a relation to be a
function, it cannot look like Figure 4.9. Since the inverse exchanges the roles of the two
coordinates, in order for an inverse to be a function, the original function cannot look
like the graph in Figure 4.11. In other words, if 푓−1 is to be a function, there cannot
exist 푥1 and 푥2 so that 푥1 ≠푥2 and 푓(푥1) = 푓(푥2). But then,
¬∃푥1∃푥2[푥1 ≠푥2 ∧푓(푥1) = 푓(푥2)]
is equivalent to
∀푥1∀푥2[푥1 = 푥2 ∨푓(푥1) ≠푓(푥2)],
which in turn is equivalent to
∀푥1∀푥2[푓(푥1) = 푓(푥2) →푥1 = 푥2].
Hence, 푓being an invertible function implies that for every 푥1, 푥2 ∈dom(푓),
푥1 = 푥2 if and only if 푓(푥1) = 푓(푥2).
(4.7)
(x
y
(x     
2
1
, y)   
, y)   
f
 x     
2
 x     
1
Figure 4.11
The inverse of a function might not be a function.

206
Chapter 4 RELATIONS AND FUNCTIONS
A
B
𝜑
Figure 4.12
휑is a one-to-one function.
This means that the elements of the domain of 푓and the elements of the range of 푓form
pairs of elements as illustrated in Figure 4.12. The suﬃciency of (4.7) is the deﬁnition
of a function, while necessity is the next deﬁnition.
DEFINITION 4.5.5
The function 휑: 퐴→퐵is one-to-one if and only if for all 푥1, 푥2 ∈퐴,
if 휑(푥1) = 휑(푥2), then 푥1 = 푥2.
A one-to-one function is sometimes called an injection.
EXAMPLE 4.5.6
Deﬁne 푓: 퐑→퐑by 푓(푥) = 5푥+1. To show that 푓is one-to-one, let 푥1, 푥2 ∈퐑
and assume 푓(푥1) = 푓(푥2). Then,
5푥1 + 1 = 5푥2 + 1,
5푥1 = 5푥2,
푥1 = 푥2.
EXAMPLE 4.5.7
Let 휑: 퐙× 퐙→퐙× 퐙× 퐙be the function
휑(푎, 푏) = (푎, 푏, 0).
For any (푎1, 푏1), (푎2, 푏2) ∈퐙× 퐙, assume
휑(푎1, 푏1) = 휑(푎2, 푏2).
This means that
(푎1, 푏1, 0) = (푎2, 푏2, 0).
Hence, 푎1 = 푎2 and 푏1 = 푏2, and this yields (푎1, 푏1) = (푎2, 푏2).

Section 4.5 INJECTIONS AND SURJECTIONS
207
A
B
𝜑
Figure 4.13
휑is not a one-to-one function.
If a function is not one-to-one, there must be an element of the range that has at
least two pre-images (Figure 4.13). An example of a function that is not one-to-one is
푓(푥) = 푥2 where both the domain and codomain of 푓are 퐑. This is because 푓(2) = 4
and 푓(−2) = 4. Another example is 푔: 퐑→퐑deﬁned by 푔(휃) = cos 휃. It is not an
injection because 푔(0) = 푔(2휋) = 1.
Although the original function might not be one-to-one, we can always restrict the
function to a subset of its domain so that the resulting function is one-to-one. This is
illustrated in the next two examples.
EXAMPLE 4.5.8
Let 푓be the function {(1, 5), (2, 8), (3, 8), (4, 6)}. We observe that 푓is not one-
to-one, but both
푓↾{1, 2} = {(1, 5), (2, 8)}
and
푓↾{3, 4} = {(3, 8), (4, 6)}
are one-to-one as in Figure 4.14.
A
B
f   A  
1
6
5
4
3
2
8
↾
f   B
↾
Figure 4.14
Restrictions of 푓to 퐴and 퐵are one-to-one.

208
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.5.9
Let 푔: 퐑→퐑be the function 푔(푥) = 푥2. This function is not one-to-one, but
푔↾[0, ∞) and 푔↾(−10, −5) are one-to-one.
Let 푓(푥) = 3푥+ 6 and 푔(푥) =
√
5푥−8. Both are injections. Notice that
(푓◦푔)(푥) = 3
√
5푥−8 + 6
and
(푔◦푓)(푥) =
√
15푥+ 22
are also injections. We can generalize this result to the next theorem.
THEOREM 4.5.10
If 휑: 퐴→퐵and 휓: 퐵→퐶are injections, 휓◦휑is an injection.
PROOF
Assume that 휑: 퐴→퐵and 휓: 퐵→퐶are one-to-one. Let 푎1, 푎2 ∈퐴and
assume (휓◦휑)(푎1) = (휓◦휑)(푎2). Then,
휓(휑(푎1)) = 휓(휑(푎2)).
Since 휓is one-to-one,
휑(푎1) = 휑(푎2),
and since 휑is one-to-one, 푎1 = 푎2.
Surjections
The function being an injection is not suﬃcient for it to be invertible since it is pos-
sible that not every element of the codomain will have a pre-image. In this case, the
codomain cannot be the domain of the inverse. To prevent this situation, we will need
the function to satisfy the next deﬁnition.
DEFINITION 4.5.11
A function 휑: 퐴→퐵is onto if and only if for every 푦∈퐵, there exists 푥∈퐴
such that 휑(푥) = 푦. An onto function is also called a surjection.
This deﬁnition is related to the range (or image) of the function. The range of the
function 휑: 퐴→퐵is
ran(휑) = {푦: ∃푥(푥∈퐴∧(푥, 푦) ∈휑)} = {휑(푥) : 푥∈dom(휑)}
as illustrated in Figure 4.15. Thus, 휑is onto if and only if ran(휑) = 퐵.
EXAMPLE 4.5.12
Deﬁne 푓: [0, ∞) →[0, ∞) by 푓(푥) =
√
푥. Its range is also [0, ∞), so it is onto.

Section 4.5 INJECTIONS AND SURJECTIONS
209
A
B
𝜑
ran(   )
𝜑
y
x
Figure 4.15
The range of 휑: 퐴→퐵with 푦= 휑(푥).
EXAMPLE 4.5.13
The ranges of the following functions are diﬀerent from their codomains, so they
are not onto.
∙Let 푔: 퐑→퐑be deﬁned by 푔(푥) = |푥|. Then, ran(푔) = [0, ∞).
∙Deﬁne ℎ: 퐙→퐙by ℎ(푛) = 2푛. Here, ran(ℎ) = {2푛: 푛∈퐙}.
The functions illustrated in Figures 4.12, 4.13, and 4.14 are onto functions as are
those in the next examples.
EXAMPLE 4.5.14
Any linear function 푓: 퐑→퐑that is not a horizontal line is a surjection. To
see this, let 푓(푥) = 푎푥+ 푏for some 푎≠0. Take 푦∈퐑. We need to ﬁnd 푥∈퐑
so that 푎푥+ 푏= 푦. Choose
푥= 푦−푏
푎
.
Then,
푓(푥) = 푎
(푦−푏
푎
)
+ 푏= 푦.
The approach in the example is typical. To show that a function is onto, take an
arbitrary element of the codomain and search for a candidate to serve as its pre-image.
When found, check it.
EXAMPLE 4.5.15
Take a positive integer 푚and let 휑: 퐙→퐙푚be deﬁned as 휑(푘) = [푘]푚. To see
that 휑is onto, take [푙]푚∈퐙푚for some 푙∈퐙. We then ﬁnd that 휑(푙) = [푙]푚.
EXAMPLE 4.5.16
Let 푚, 푛∈퐍with 푚> 푛. A function 휋: 퐑푚→퐑푛deﬁned by
휋(푥0, 푥1, … , 푥푛−1, 푥푛, … , 푥푚−1) = (푥0, 푥1, … , 푥푛−1)

210
Chapter 4 RELATIONS AND FUNCTIONS
is called a projection.. Such functions are not one-to-one, but they are onto. For
instance, deﬁne 휋: 퐑× 퐑× 퐑→퐑× 퐑by
휋(푥, 푦, 푧) = (푥, 푦).
It is not one-to-one because 휋(1, 2, 3) = 휋(1, 2, 4) = (1, 2). However, if we take
(푎, 푏) ∈퐑× 퐑, then 휋(푎, 푏, 0) = (푎, 푏), so 휋is onto.
If a function is not onto, it has a diagram like that of Figure 4.16. Therefore, to show
that a function is not a surjection, we must ﬁnd an element of the codomain that does
not have a pre-image.
EXAMPLE 4.5.17
Deﬁne 푓: 퐙→퐙by 푓(푛) = 3푛. This function is not onto because 5 does not
have a pre-image in 퐙.
EXAMPLE 4.5.18
The function
휑: 퐙× 퐙→퐙× 퐙× 퐙
deﬁned by 휑(푎, 푏) = (푎, 푏, 0) is not onto because (1, 1, 1) does not have a pre-
image in 퐙× 퐙.
We have the following analog of Theorem 4.5.10 for surjections.
THEOREM 4.5.19
If 휑: 퐴→퐵and 휓: 퐵→퐶are surjections, 휓◦휑is a surjection.
PROOF
Assume that 휑: 퐴→퐵and 휓: 퐵→퐶are surjections. Take 푐∈퐶. Then,
there exists 푏∈퐵so that 휓(푏) = 푐and 푎∈퐴such that 휑(푎) = 푏. Therefore,
(휓◦휑)(푎) = 휓(휑(푎)) = 휓(푏) = 푐.
A
B
𝜑
Figure 4.16
휑is not a onto function.

Section 4.5 INJECTIONS AND SURJECTIONS
211
Bijections
If we have a function that is both one-to-one and onto, then it is called a bijection or a
one-to-one correspondence. Observe that ∅is a bijection.
EXAMPLE 4.5.20
As illustrated in Examples 4.5.6 and 4.5.14, every linear 푓: 퐑→퐑with nonzero
slope is a bijection.
EXAMPLE 4.5.21
Both 푔: (−휋∕2, 휋∕2) →퐑such that 푔(휃) = tan 휃and ℎ: 퐑→(0, ∞) where
ℎ(푥) = 푒푥are bijections.
We are now ready to give the standard test for invertibility. Its proof requires both
Lemma 4.5.2 and Theorem 4.5.3. The beneﬁt of this theorem is that it provides a test
for invertibility in which the given function is examined instead of its inverse.
THEOREM 4.5.22
A function is invertible if and only if it is a bijection.
PROOF
Let 휑: 퐴→퐵be a function.
∙Suppose that 휑is invertible. To show that 휑is one-to-one, let 푥1, 푥2 ∈퐴
and assume that 휑(푥1) = 휑(푥2). Then, by Theorem 4.5.3,
푥1 = 휑−1(휑(푥1)) = 휑−1(휑(푥2)) = 푥2.
To see that 휑is onto, take 푦∈퐵. Then, there exists 푥∈퐴such that
휑−1(푦) = 푥. Hence, 휑(푥) = 푦by Lemma 4.5.2.
∙Assume that 휑is both one-to-one and onto. To show that 휑−1 is a function,
let (푦, 푥), (푦, 푥′) ∈휑−1. This implies that 휑(푥) = 푦= 휑(푥′). Since 휑is
one-to-one, 푥= 푥′. To prove that the domain of 휑−1 is 퐵, take 푦∈퐵.
Since 휑is onto, there exists 푥∈퐴such that 휑(푥) = 푦. By Lemma 4.5.2,
we have that 휑−1(푦) = 푥, so 푦∈dom(휑−1).
By Theorem 4.5.22 the functions of Examples 4.5.20 and 4.5.21 are invertible.
THEOREM 4.5.23
If 휑: 퐴→퐵and 휓: 퐵→퐶are bijections, then 휑−1 and 휓◦휑are bijections.
PROOF
Suppose 휑is a bijection. By Theorem 4.5.22, it is invertible, so 휑−1 is a function
that has 휑as its inverse. Therefore, 휑−1 is a bijection by Theorem 4.5.22. Com-
bining the proofs of Theorems 4.5.10 and 4.5.19 show that 휓◦휑is a bijection
when 휓is a bijection.

212
Chapter 4 RELATIONS AND FUNCTIONS
Using the functions 푔and ℎfrom Example 4.5.21, we conclude from Theorem 4.5.23
that ℎ◦푔is a bijection with domain (−휋∕2, 휋∕2) and range (0, ∞).
Order Isomorphims
Consider the function
휑: 퐙× {0} →{0} × 퐙
(4.8)
deﬁned by 휑(푚, 0) = (0, 푚). It can be shown that 휑is a bijection (compare Exercise 12).
Deﬁne the linear orders ≼on 퐙× {0} and ≼′ on {0} × 퐙by
(푚, 0) ≼(푛, 0) if and only if 푚≤푛
and
(0, 푚) ≼′ (0, 푛) if and only if 푚≤푛.
Notice that (3, 0) ≼(5, 0) and (0, 3) ≼′ (0, 5) because 3 ≤5. We can generalize this to
conclude that
(푚, 0) ≼(푛, 0) if and only if (0, 푚) ≼′ (0, 푛),
and this implies that
(푚, 0) ≼(푛, 0) if and only if 휑(푚, 0) ≼′ 휑(푛, 0).
This leads to the next deﬁnition.
DEFINITION 4.5.24
Let 푅be a relation on 퐴and 푆be a relation on 퐵.
∙휑: 퐴→퐵is an order-preserving function if for all 푎1, 푎2 ∈퐴,
(푎1, 푎2) ∈푅if and only if (휑(푎1), 휑(푎2)) ∈푆
and we say that 휑preserves 푅with 푆.
∙An order-preserving bijection is an order isomorphism.
∙(퐴, 푅) is order isomorphic to (퐵, 푆) and we write (퐴, 푅) ≅(퐵, 푆) if
there exists an order isomorphism 휑: 퐴→퐵preserving 푅with 푆. If
(퐴, 푅) ≅(퐵, 푆) and the relations 푅and 푆are clear from context, we can
write 퐴≅퐵. Sometimes (퐴, 푅) and (퐵, 푆) are said to have the same order
type when they are order isomorphic.
An isomorphism pairs elements from two sets in such a way that the orders on the two
sets appear to be the same.

Section 4.5 INJECTIONS AND SURJECTIONS
213
EXAMPLE 4.5.25
Deﬁne 푓: 퐑+ →퐑−by 푓(푥) = −푥(Example 3.1.12). Clearly, 푓is a bijection.
Moreover, 푓preserves ≤with ≥. To prove this, let 푥1, 푥2 ∈퐑+. Then,
푥1 ≤푥1 ⇔−푥1 ≥−푥2 ⇔푓(푥1) ≥푓(푥2).
Therefore, (퐑+, ≤) ≅(퐑−, ≥).
Observe that the inverse of (4.8) is the function
휑−1 : {0} × 퐙→퐙× {0}
such that 휑−1(0, 푚) = (푚, 0). This function preserves ≼′ with ≼. This result is gener-
alized and proved in the next theorem.
THEOREM 4.5.26
The inverse of an order isomorphism preserving 푅with 푆is an order isomor-
phism preserving 푆with 푅.
PROOF
Let 휑: 퐴→퐵be an order isomorphism preserving 푅with 푆. By Theo-
rem 4.5.23, 휑−1 is a bijection. Suppose that (푏1, 푏2) ∈푆. Since 휑is onto,
there exists 푎1, 푎2 ∈퐴such that 휑(푎1) = 푏1 and 휑(푎2) = 푏2. This implies
that (휑(푎1), 휑(푎2)) ∈푆. Since 휑is an isomorphism preserving 푅with 푆,
we have that (푎1, 푎2) ∈푅. However, 푎1 = 휑−1(푏1) and 푎2 = 휑−1(푏2), so
(휑−1(푏1), 휑−1(푏2)) ∈푅. Therefore, 휑−1 : 퐵→퐴is an isomorphism preserving
푆with 푅.
Also, observe that 푔: 퐑→(0, ∞) deﬁned by 푔(푥) = 푒푥is an order isomorphism
preserving ≤with ≤. Using 푓from Example 4.5.25, the composition 푓◦푔is an order
isomorphism 퐑→(−∞, 0) such that (푓◦푔)(푥) = −푒푥. That this happens in general is
the next theorem. Its proof is left to Exercise 25.
THEOREM 4.5.27
If 휑: 퐴→퐵is an isomorphism preserving 푅with 푆and 휓: 퐵→퐶is an
isomorphism preserving 푆with 푇, then 휓◦휑: 퐴→퐶is an isomorphism
preserving 푅with 푇.
EXAMPLE 4.5.28
Let 푅be a relation on 퐴, 푆be a relation on 퐵, and 푇be a relation on 퐶.
∙Since the identity map is an order isomorphism, (퐴, 푅) ≅(퐴, 푅).
∙Suppose (퐴, 푅) ≅(퐵, 푆). This means that there exists an order isomor-
phism 휑: 퐴→퐵preserving 푅with 푆. By Theorem 4.5.26, 휑−1 is an
order isomorphism preserving 푆with 푅. Therefore, (퐵, 푆) ≅(퐴, 푅).

214
Chapter 4 RELATIONS AND FUNCTIONS
∙Let (퐴, 푅) ≅(퐵, 푆) and (퐵, 푆) ≅(퐶, 푇). By Theorem 4.5.27, we conclude
that (퐴, 푅) ≅(퐶, 푇).
If an order-preserving function is one-to-one, even it is not a surjection, the function
still provides an order isomorphism between its domain and range. This concept is
named by the next deﬁnition.
DEFINITION 4.5.29
휑: 퐴→퐵is an embedding if 휑is an order isomorphism 퐴→ran(휑).
For example, 푓: 퐙→퐐such that 푓(푛) = 푛is an embedding preserving ≤and
휋: 퐑2 →퐑3 such that 휓(푥, 푦) = (푥, 푦, 0) is an embedding preserving the lexicograph-
ical order (Exercise 4.3.16). Although 퐑2 is not a subset of 퐑3, we view the image of
휓as a copy of 퐑2 in 퐑3 that preserves the orders.
Exercises
1. Show that the given pairs of functions are inverses.
(a) 푓(푥) = 3푥+ 2 and 푔(푥) = 1
3푥−2
3
(b) 휑(푎, 푏) = (2푎, 푏+ 2) and 휓(푎, 푏) = ( 1
2푎, 푏−2)
(c) 푓(푥) = 푎푥and 푔(푥) = log푎푥, where 푎> 0
2. For each function, graph the indicated restriction.
(a) 푓↾(0, ∞), 푓(푥) = 푥2
(b) 푔↾[−5, −2], 푔(푥) = |푥|
(c) ℎ↾[0, 휋∕2], ℎ(푥) = cos 푥
3. Prove that the given functions are one-to-one.
(a) 푓: 퐑→퐑, 푓(푥) = 2푥+ 1
(b) 푔: 퐑2 →퐑2, 푔(푥, 푦) = (3푦, 2푥)
(c) ℎ: 퐑⧵{9} →퐑⧵{0}, ℎ(푥) = 1∕(푥−9)
(d) 휑: 퐙× 퐑→퐙× (0, ∞), 휑(푛, 푥) = (3푛, 푒푥)
(e) 휓: P(퐴) →P(퐵), 휓(퐶) = 퐶∪{푏} where 퐴⊂퐵and 푏∈퐵⧵퐴
4. Let 푓: (푎, 푏) →(푐, 푑) be deﬁned by
푓(푥) = 푑−푐
푏−푎(푥−푎) + 푐.
Graph 푓and show that it is a bijection.
5. Let 푓and 푔be functions such that ran(푔) ⊆dom(푓).
(a) Prove that if 푓◦푔is one-to-one, 푔is one-to-one.
(b) Give an example of functions 푓and 푔such that 푓◦푔is one-to-one, but 푓is
not one-to-one.
6. Deﬁne 휑: 퐙→퐙푚by 휑(푘) = [푘]푚. Show that 휑is not one-to-one.

Section 4.5 INJECTIONS AND SURJECTIONS
215
7. Show that the given functions are not one-to-one.
(a) 푓: 퐑→퐑, 푓(푥) = 푥4 + 3
(b) 푔: 퐑→퐑, 푔(푥) = |푥−2| + 4
(c) 휑: P(퐴) →{{푎}, ∅}, 휑(퐵) = 퐵∩{푎}, where 푎∈퐴and 퐴has at least two
elements
(d) 휖5 : 퐑퐑→퐑, 휖5(푓) = 푓(5)
8. Let 푓: 퐑→퐑be periodic (Exercise 4.4.31). Prove that 푓is not one-to-one.
9. Show that the given functions are onto.
(a) 푓: 퐑→퐑, 푓(푥) = 2푥+ 1
(b) 푔: 퐑→(0, ∞), 푔(푥) = 푒푥
(c) ℎ: 퐑⧵{0} →퐑⧵{0}, ℎ(푥) = 1∕푥
(d) 휑: 퐙× 퐙→퐙, 휑(푎, 푏) = 푎+ 푏
(e) 휖5 : 퐑퐑→퐑, 휖5(푓) = 푓(5)
10. Show that the given functions are not onto.
(a) 푓: 퐑→퐑, 푓(푥) = 푒푥
(b) 푔: 퐑→퐑, 푔(푥) = |푥|
(c) 휑: 퐙× 퐙→퐙× 퐙, 휑(푎, 푏) = (3푎, 푏2)
(d) 휓: 퐑→퐑퐑, 휓(푎) = 푓, where 푓(푥) = 푎for all 푥∈퐑
11. Let 푓and 푔be functions such that ran(푔) ⊆dom(푓).
(a) Prove that if 푓◦푔is onto, then 푓is onto.
(b) Give an example of functions 푓and 푔such that 푓◦푔is onto, but 푔is not
onto.
12. Deﬁne 휑: 퐐× 퐙→퐙× 퐐by 휑(푥, 푦) = (푦, 푥). Show that 휑is a bijection.
13. Show that the function 훾: 퐴× 퐵→퐶× 퐷deﬁned by
훾(푎, 푏) = (휑(푎), 휓(푏))
is a bijection if both 휑: 퐴→퐶and 휓: 퐵→퐷are bijections.
14. Deﬁne 훾: 퐴× (퐵× 퐶) →(퐴× 퐵) × 퐶by
훾(푎, (푏, 푐)) = ((푎, 푏), 푐).
Prove 훾is a bijection.
15. Demonstrate that the inverse of a bijection is a bijection.
16. Prove that the empty set is a bijection with domain and range equal to ∅.
17. Let 퐴⊆퐑and deﬁne 휑: 퐑퐑→퐴퐑by 휑(푓) = 푓↾퐴. Is 휑always one-to-one? Is
it always onto? Explain.
18. A function 푓: 퐴→퐵has a left inverse if there exists a function 푔: 퐵→퐴such
that 푔◦푓= 퐼퐴. Prove that a function is one-to-one if and only if it has a left inverse.

216
Chapter 4 RELATIONS AND FUNCTIONS
19. A function 푓: 퐴→퐵has a right inverse if there exists a function 푔: 퐵→퐴so
that 푓◦푔= 퐼퐵. Prove a function is onto if and only if it has a right inverse.
20. Let (퐴, ≼) be a poset. For every bijection 휑: 퐴→퐴, 휑is increasing (Exer-
cise 4.4.32) if and only if 휑−1 is increasing.
21. Show that if a real-valued function is increasing, it is one-to-one.
22. Prove or show false this modiﬁcation of Theorem 4.5.23: If 휑: 퐴→퐵and
휓: 퐶→퐷are bijections with ran(휑) ⊆퐶, then 휓◦휑is a bijection.
23. Let 퐴, 퐵⊆퐑be two sets ordered by ≤. Let 퐴be well-ordered by ≤. Prove that if
푓: 퐴→퐵is an order-preserving surjection, 퐵is well-ordered by ≤.
24. Let 휑: 퐴→퐵be an isomorphism preserving 푅with 푅′. Let 퐶⊆퐴and 퐷⊆퐵.
Prove the following.
(a) (퐶, 푅∩[퐶× 퐶]) ≅(휑[퐶] , 푅′ ∩[휑[퐶] × 휑[퐶]])
(b) (퐷, 푅′ ∩[퐷× 퐷]) ≅(휑−1 [퐷] , 푅∩[휑−1 [퐷] × 휑−1 [퐷]])
25. Prove Theorem 4.5.27.
26. Deﬁne 푓: 퐑→퐑by 푓(푥) = 2푥+ 1. Prove that 푓is an order isomorphism
preserving < with <.
27. Suppose that (퐴, 푅) and (퐵, 푆) are posets. Let 휑: 퐴→퐵be an order isomor-
phism preserving 푅with 푆and 퐶⊆퐴. Prove that if 푚is the least element of 퐶with
respect to 푅, then 휑(푚) is the least element of 휑[퐶] with respect to 푆.
28. Find linear orders (퐴, ≼) and (퐵, ≼′) such that each is isomorphic to a subset of
the other but (퐴, ≼) is not isomorphic to (퐵, ≼′).
29. Let (퐴, ≼) be a poset. Prove that there exists 퐵⊆P(퐴) such that (퐴, ≼) ≅(퐵, ⊆).
4.6
IMAGES AND INVERSE IMAGES
So far we have focused on the image of single element in the domain of a function.
Sometimes we will need to examine a set of images.
DEFINITION 4.6.1
Let 휑: 퐴→퐵be a function and 퐶⊆퐴. The image of 퐶(under 휑) is
휑[퐶] = {휑(푥) : 푥∈퐶}.
Notice that 휑[퐶] ⊆퐵(Figure 4.17) and 휑[퐴] = ran(휑).
A similar deﬁnition can be made with subsets of the codomain.
DEFINITION 4.6.2
Let 휑: 퐴→퐵be a function and 퐷⊆퐵. The inverse image of 퐷(under 휑) is
휑−1 [퐷] = {푥∈퐴: 휑(푥) ∈퐷}.

Section 4.6 IMAGES AND INVERSE IMAGES
217
A
B
𝜑[C]
y
x
C
𝜑
Figure 4.17
The image of 퐶under 휑.
A
B
𝜑    [D]
y
x
D
𝜑
−1
Figure 4.18
The inverse image of 퐷under 휑.
Observe that 휑−1 [퐷] ⊆퐴(Figure 4.18) and 휑−1 [ran(휑)] = 퐴.
EXAMPLE 4.6.3
Let 푓= {(1, 2), (2, 4), (3, 5), (4, 5)}. This set is a function. Its domain is {1, 2, 3, 4},
and its range is {2, 4, 5}. Then,
푓[{1, 3}] = {2, 5}
and
푓−1 [{5}] = {3, 4}.
EXAMPLE 4.6.4
Deﬁne 푓: 퐑→퐑by 푓(푥) = 푥2 + 1.
∙To prove 푓[(1, 2)] = (2, 5), we show both inclusions. Let 푦∈푓[(1, 2)].
Then, 푦= 푥2 + 1 for some 푥∈(1, 2). By a little algebra, we see that
2 < 푥2 + 1 < 5. Hence, 푦∈(2, 5). Conversely, let 푦∈(2, 5). Because
2 < 푦< 5 ⇔1 < 푦−1 < 4 ⇔1 <
√
푦−1 < 2,

218
Chapter 4 RELATIONS AND FUNCTIONS
(a) 푓[(1, 2)] = (2, 5)
(b) 푓−1[(2, 5)] = (−2, −1) ∪(1, 2)
Figure 4.19
The image and inverse image of a set under 푓.
√
푦−1 ∈(1, 2). Furthermore,
푓(
√
푦−1) = 푓(
√
푦−1) = (
√
푦−1)2 + 1 = 푦.
Therefore, 푦∈푓[(1, 2)]. This is illustrated in Figure 4.19(a).
∙Simply because 푓[(1, 2)] = (2, 5), we cannot conclude 푓−1 [(2, 5)] equals
(1, 2). Instead, 푓−1 [(2, 5)] = (−2, −1) ∪(1, 2), as seen in Figure 4.19(b),
because
푥∈(−2, −1) ∪(1, 2) ⇔−2 < 푥< −1 or 1 < 푥< 2
⇔1 < 푥2 < 4
⇔2 < 푥2 + 1 < 5
⇔푓(푥) ∈(2, 5)
⇔푥∈푓−1 [(2, 5)] .
∙To show that 푓−1 [(−2, −1)] is empty, take 푥∈푓−1 [(−2, −1)]. This
means that −2 < 푓(푥) < −1, but this is impossible because 푓(푥) is posi-
tive.
Let 푓= {(1, 3), (2, 3), (3, 4), (4, 5)}. This is a function {1, 2, 3, 4} →{3, 4, 5}.
Notice that
푓[{1} ∪{2, 3}] = {3, 4} = 푓[{1}] ∪푓[{2, 3}],
푓[{1, 2} ∩{3}] = 푓[∅] = ∅⊆{3} = 푓[{1}] ∩푓[{2, 3}],
푓−1[{3, 4} ∪{5}] = {1, 2, 3, 4} = 푓−1[{3, 4}] ∪푓−1[{5}],

Section 4.6 IMAGES AND INVERSE IMAGES
219
and
푓−1[{3, 4} ∩{5}] = ∅= 푓−1[{3, 4}] ∩푓−1[{5}].
This result concerning the interaction of images and inverse images with union and
intersection is generalized in the next theorem.
THEOREM 4.6.5
Let 휑: 퐴→퐵be a function with 퐶, 퐷⊆퐴and 퐸, 퐹⊆퐵.
∙휑[퐶∪퐷] = 휑[퐶] ∪휑[퐷].
∙휑[퐶∩퐷] ⊆휑[퐶] ∩휑[퐷].
∙휑−1 [퐸∪퐹] = 휑−1 [퐸] ∪휑−1 [퐹].
∙휑−1 [퐸∩퐹] = 휑−1 [퐸] ∩휑−1 [퐹].
PROOF
We prove the ﬁrst and third parts, leaving the others for Exercise 7. By Exer-
cise 3.2.8(d),
푦∈휑[퐶∪퐷] ⇔∃푥(푥∈퐶∪퐷∧휑(푥) = 푦)
⇔∃푥(푥∈퐶∧휑(푥) = 푦) ∨∃푥(푥∈퐷∧휑(푥) = 푦)
⇔푦∈휑[퐶] ∨푦∈휑[퐷]
⇔푦∈휑[퐶] ∪휑[퐷] .
In addition,
푥∈휑−1 [퐸∪퐹] ⇔휑(푥) ∈퐸∪퐹
⇔휑(푥) ∈퐸∨휑(푥) ∈퐹
⇔푥∈휑−1 [퐸] ∨푥∈휑−1 [퐹]
⇔푥∈휑−1 [퐸] ∪휑−1 [퐹] .
It might seem surprising that we only have an inclusion in the second part of Theo-
rem 4.6.5. To see that the other inclusion is false, let 푓= {(1, 3), (2, 3)}. Then,
푓[{1} ∩{2}] = 푓[∅] = ∅,
but
푓[{1}] ∩푓[{2}] = {3} ∩{3} = {3}.
Hence, 푓[{1}] ∩푓[{2}] ⊈푓[{1} ∩{2}]. However, if 푓had been a bijection, the
inclusion would hold (Exercise 13).

220
Chapter 4 RELATIONS AND FUNCTIONS
EXAMPLE 4.6.6
Let 푓(푥) = 푥2 + 1. We check the union results of Theorem 4.6.5.
∙We have already seen in Example 4.6.4 that 푓[(1, 2)] = (2, 5). Since
(1, 2) = (1, 1.5] ∪[1.5, 2), apply 푓to both of these intervals and ﬁnd that
푓[(1, 1.5]] = (2, 3.25],
푓[[1.5, 2)] = [3.25, 5).
Therefore, 푓[(1, 2)] = 푓[(1, 1.5]] ∪푓[[1.5, 2)].
∙Also, from Example 4.6.4, 푓−1[(2, 5)] = (−2, −1) ∪(1, 2). We can write
(2, 5) as the union of (2, 4) and (3, 5). Since
푓−1[(2, 4)] =
(
−
√
3, −1
)
∪
(
1,
√
3
)
,
푓−1[(3, 5)] =
(
−2, −
√
2
)
∪
(√
2, 2
)
,
we have that
푓−1[(2, 5)] = 푓−1[(2, 4)] ∪푓−1[(3, 5)].
Theorem 4.6.5 can be modiﬁed to arbitrary unions and intersections. The proof is
left to Excercise 17.
THEOREM 4.6.7
Let {퐴푖: 푖∈퐼} be a family of sets.
∙휑
[⋃
푖∈퐼
퐴푖
]
=
⋃
푖∈퐼
휑[퐴푖]
∙휑
[⋂
푖∈퐼
퐴푖
]
⊆
⋂
푖∈퐼
휑[퐴푖]
∙휑−1[⋃
푖∈퐼
퐴푖
]
=
⋃
푖∈퐼
휑−1[퐴푖]
∙휑−1[⋂
푖∈퐼
퐴푖
]
=
⋂
푖∈퐼
휑−1[퐴푖].
We know that the composition of a function and its inverse equals the identity map
(Theorem 4.5.3). The last two results of the section show a similar result involving the
image and inverse image using functions that are either one-to-one or onto.

Section 4.6 IMAGES AND INVERSE IMAGES
221
THEOREM 4.6.8
Let 휑: 퐴→퐵be a function. Suppose 퐶⊆퐴and 퐷⊆퐵.
∙If 휑is one-to-one, then 휑−1[휑[퐶]] = 퐶.
∙If 휑is onto, then 휑[휑−1[퐷]] = 퐷.
PROOF
We prove the ﬁrst part and leave the second to Exercise 8. Suppose that 휑is an
injection. We show that 휑−1 [휑[퐶]] = 퐶.
∙Let 푥∈휑−1[휑[퐶]]. This means that there exists 푦∈휑[퐶] such that
휑(푥) = 푦. Furthermore, there is a 푧∈퐶so that 휑(푧) = 푦. Therefore, since
휑is one-to-one, 푥= 푧, which means that 푥∈퐶.
∙This step will work for any function. Take 푥∈퐶, so 휑(푥) ∈휑[퐶]. By
deﬁnition,
휑−1[휑[퐶]] = {푧∈퐴: 휑(푧) ∈휑[퐶]}.
Since 푥is also an element of 퐴, we conclude that 푥∈휑−1[휑[퐶]].
Because we used the one-to-one condition only to prove 휑−1[휑[퐶]] ⊆퐶, we suspect
that this inclusion is false if the function is not one-to-one. To see this, let 푓: 퐑→퐑
be deﬁned as 푓(푥) = 푥2. We know that 푓is not one-to-one. Choose 퐶= {1}. Then,
푓−1[푓[퐶]] = 푓−1[{1}] = {−1, 1}.
Therefore, 푓−1[푓[퐶]] ⊈퐶.
When examining the example, we might conjecture that the function being one-to-
one is necessary for equality. That this is the case is the following theorem.
THEOREM 4.6.9
Let 휑: 퐴→퐵be a function.
∙If 휑−1 [휑[퐶]] = 퐶for all 퐶⊆퐴, then 휑is one-to-one.
∙If 휑[휑−1 [퐷]
] = 퐷for all 퐷⊆퐵, then 휑is onto.
PROOF
As with the previous theorem, we prove only the ﬁrst part. The second part is
Exercise 8. Assume
휑−1[휑[퐶]] = 퐶for all 퐶⊆퐴.
Take 푥1, 푥2 ∈퐴and let 휑(푥1) = 휑(푥2). Now,
{푥1} = 휑−1[휑[{푥1}]] = {푧∈퐴: 휑(푧) = 휑(푥1)}.
Because 휑(푥1) = 휑(푥2), we have that {푥1, 푥2} ⊆{푧∈퐴: 휑(푧) = 휑(푥1)}, so
we must have 푥1 = 푥2.

222
Chapter 4 RELATIONS AND FUNCTIONS
Exercises
1. Let 푓: 퐑→퐑be deﬁned by 푓(푥) = 2푥+ 1. Find the images and inverse images.
(a) 푓[(1, 3]]
(b) 푓[(−∞, 0)]
(c) 푓−1[(−1, 1)]
(d) 푓−1[(0, 2) ∪(5, 8)]
2. Let 푔: 퐑→퐑be the function 푔(푥) = 푥4 −1. Find the images and inverse images.
(a) 푔[{0}]
(b) 푔[퐙]
(c) 푔−1[{0, 15}]
(d) 푔−1[[−9, −5] ∪[0, 5]]
3. Deﬁne 휑: 퐑×퐑→퐙by 휑(푎, 푏) = ⟦푎⟧+⟦푏⟧. Find the images and inverse images.
(a) 휑[{0} × 퐑]
(b) 휑[(0, 1) × (0, 1)]
(c) 휑−1[{2, 4}]
(d) 휑−1[퐍]
4. Let 휓: 퐙→퐙be a function and deﬁne 훾: P(퐙) →P(퐙) by 훾(퐶) = 휓[퐶].
(a) Prove that 훾is well-deﬁned.
(b) Let 휓(푛) = 2푛. Find 훾[{1, 2, 3}], 훾[퐙], 훾−1[{1, 2, 3}], and 훾−1[퐙].
(c) Under what conditions is 훾one-to-one?
(d) Under what conditions is 훾onto?
5. For any function 휓, show that 휓[∅] = ∅and 휓−1[∅] = ∅.
6. Prove for every 퐵⊆퐴, 퐼퐴[퐵] = 퐵and (퐼퐴)−1[퐵] = 퐵.
7. Prove the remaining parts of Theorem 4.6.5.
8. Prove the unproven parts of Theorems 4.6.8 and 4.6.9.
9. Let 휑: 퐴→퐵be an injection and 퐶⊆퐴.
(a) Prove 휑(푥) ∈휑[퐶] if and only if 푥∈퐶.
(b) Show that Exercise 9(a) is false if the function is not one-to-one.
10. If 휓is a function, 퐴⊆퐵⊆dom(휓), and 퐶⊆퐷⊆ran(휓), show that both
휓[퐴] ⊆휓[퐵] and 휓−1[퐶] ⊆휓−1[퐷].
11. Let 휑: 퐴→퐵be a function and take disjoint sets 푈and 푉.
(a) Prove false: If 푈, 푉⊆퐴, then 휑[푈] ∩휑[푉] = ∅.
(b) Prove false: If 푈, 푉⊆퐵, then 휑−1[푈] ∩휑−1[푉] = ∅.
(c) What additional assumption is needed to prove both of the implications?
12. Assume that 휑and 휓are functions such that ran(휓) ⊆dom(휑). Let 퐴be a subset
of dom(휓). Prove or show false with a counterexample: (휑◦휓)[퐴] = 휑[휓[퐴]].
13. Let 휑: 퐴→퐵be one-to-one. Prove the following.

Section 4.6 IMAGES AND INVERSE IMAGES
223
(a) 휑[퐴] ∩휑[퐵] ⊆휑[퐴∩퐵].
(b) If 퐶⊆퐴and 퐷⊆퐵, then 휑[퐶] = 퐷if and only if 휑−1[퐷] = 퐶.
14. Prove that if 휑: 퐴→퐵is a bijection and 퐶⊆퐴, then 휑[퐴⧵퐶] = 퐵⧵휑[퐶].
15. Find a function 휑: 퐴→퐵and a set 퐷⊆퐵such that 퐷⊈휑[휑−1[퐷]].
16. Let 휓be an injection with 퐴⊆dom(휓) and 퐵⊆ran(휓). Prove that
퐵⊆휓[퐴] if and only if 휓−1[퐵] ⊆퐴.
17. Prove Theorem 4.6.7.


CHAPTER 5
AXIOMATIC SET THEORY
5.1
AXIOMS
When we began studying set theory in Chapter 3, we made several assumptions re-
garding which things are sets. For example, we assumed that collections of numbers,
like 퐍, 퐑, or (0, ∞) are sets. We supposed that operating with given sets to form new
collections, as with union or intersection, resulted in sets. We also assumed that for-
mulas could be used to describe certain sets. All of this seemed perfectly reasonable,
but since all of these assumptions were made without a carefully thought-out system,
we would be wise to pause and investigate if we have introduced any problems.
Consider the following question. Given a formula 푝(푥), is there a set of the form
{푥: 푝(푥)}? Consistent with the attitude of our previous work, we might quickly answer
in the aﬃrmative. Mathematicians, including Cantor, also initially thought that this was
the case. However, it was shown independently by Bertrand Russell and Ernst Zermelo
that not every formula can be used to deﬁne a set. For example, let 푝(푥) := 푥∉푥and
퐴= {푥: 푝(푥)} and consider whether 퐴is an element of itself. If 퐴∈퐴, then due
to the deﬁnition of 푝(푥), 퐴∉퐴, and if 퐴∉퐴, then 퐴∈퐴. Because of this built-in
contradiction, it is impossible for 퐴to be a set. This is known as Russell’s paradox,
and it was a serious challenge to set theory. One solution would have been to dismiss
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
225

226
Chapter 5 AXIOMATIC SET THEORY
set theory altogether. The problem was that this new subject combined with advances
in logic appeared to promise a framework in which to study foundational questions of
mathematics. David Hilbert famously supported set theory by remarking that “no one
will drive us out of this paradise that Cantor has created for us,” so dismissal was not
an option. In order to prevent contradictions such as Russell’s paradox from appearing,
mathematicians settled on the method of Euclid as the solution, but instead of assuming
geometric postulates, over a period of time, certain set-theoretic axioms were chosen.
Their purpose was to deﬁne a system by which one could determine whether a given
collection should be considered a set in such a manner that prevented any contradictions
from arising. In this chapter we identify the axioms and then redeﬁne 퐍, 퐑, and other
collections so that we are conﬁdent in our previous assumptions regarding them being
sets.
Equality Axioms
We begin with the basics. Although not oﬃcially among the set axioms, = is always
assumed to satisfy the following rules. They are deﬁned to replicate the standard rea-
soning of equality that we have been using in previous chapters.
AXIOMS 5.1.1 [Equality]
Let 푥, 푦, and 푧be variable symbols from theory symbols 햲.
∙[E1] 푥= 푥.
∙[E2] 푥= 푦⇔푦= 푥.
∙[E3] 푥= 푦, 푦= 푧⇒푥= 푧.
Let 푥0, 푥1, … , 푥푛−1 and 푦0, 푦1, … , 푦푛−1 be variable symbols from 햲.
∙[E4] For any 푛-ary function symbol 푓of 햲,
푥0 = 푦0 ∧푥1 = 푦1 ∧· · · ∧푥푛−1 = 푦푛−1
⇒푓(푥0, 푥1, … , 푥푛−1) = 푓(푦0, 푦1, … , 푦푛−1).
∙[E5] For any 햲-formula 푝(푢0, 푢1, … , 푢푛−1),
푥0 = 푦0 ∧푥1 = 푦1 ∧· · · ∧푥푛−1 = 푦푛−1
⇒푝(푥0, 푥1, … , 푥푛−1) ↔푝(푦0, 푦1, … , 푦푛−1).
Axioms E1, E2, and E3 give = the behavior of an equivalence relation (Deﬁnition 4.2.4).
For example, we can use E2 to prove that for any constant symbols 푐0 and 푐1,
⊢푐0 = 푐1 ↔푐1 = 푐0.

Section 5.1 AXIOMS
227
The proof goes as follows:
푐0 = 푐1 ⇔
[
(푥0 = 푥1) 푐0
푥0
] 푐1
푥1
⇔
[
(푥1 = 푥0) 푐0
푥0
] 푐1
푥1
⇔푐1 = 푐0.
Axiom E4 allows a function symbol to be used in a proof as a function, and E5 allows
equal terms to be substituted into formulas with the result being equivalent formulas.
For example, given the 햭햳-term 푢+ 푣, by E4,
푥0 = 푦0 ∧푥1 = 푦1 ⇒푥0 + 푥1 = 푦0 + 푦1,
and given the 햭햳-formula 푢+ 푣= 푣+ 푢, by E5,
푥0 = 푦0 ∧푥1 = 푦1 ⇒푥0 + 푥1 = 푥1 + 푥0 ↔푦0 + 푦1 = 푦1 + 푦0.
Formal proofs that require a deduction on an equality need to reference one of the
equality axioms from Axioms 5.1.1.
Existence and Uniqueness Axioms
The axioms will be 햲햳-formulas (Example 2.1.3), where all terms represent sets. We
begin by assuming the existence of two sets.
AXIOM 5.1.2 [Empty Set]
∃푥∀푦(¬ 푦∈푥).
In 햲햳-formulas, a witness for the empty set axiom is denoted by { }, although it is
usually written as ∅.
AXIOM 5.1.3 [Inﬁnity]
∃푥({ } ∈푥∧∀푢[푢∈푥→∃푦(푦∈푥∧푢∈푦∧∀푣[푣∈푢→푣∈푦])]).
The standard interpretation of the inﬁnity axiom is that there exists a set that contains
∅and 푎∪{푎} is an element of the set if 푎is an element of the set.
In Chapter 3, we noted that the elements of a set determine the set. For example,
{1, 2} = {1, 2, 2}. This principle is codiﬁed by the next axiom.
AXIOM 5.1.4 [Extensionality]
∀푥∀푦(∀푢[푢∈푥↔푢∈푦] →푥= 푦).
Suppose 퐴1 and 퐴2 are witnesses to the empty set axiom (5.1.2). Since 푥∉퐴1 and
푥∉퐴2 for every 푥, we conclude that
푥∈퐴1 ↔푥∈퐴2.

228
Chapter 5 AXIOMATIC SET THEORY
Therefore, 퐴1 = 퐴2 by extensionality (Axiom 5.1.4), which means that ∅is the witness
to the empty set axiom. This uniqueness result does not appear to extend to the inﬁnity
axiom because both
{∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}}, … }
and
{∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}},
… , {∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}}}, … }
are witnesses, provided that they are sets.
Construction Axioms
Now to build some sets. The next four axioms allow us to do this.
AXIOM 5.1.5 [Pairing]
∀푢∀푣∃푥∀푤(푤∈푥↔푤= 푢∨푤= 푣).
Suppose that 푀and 푁are sets. Since {푀, 푁} is a witness of
∃푥∀푤(푤∈푥↔푤= 푀∨푤= 푁),
{푀, 푁} is a set by the pairing axiom, and from this, we conclude that {푀, {푀, 푁}},
{푁, {푀, 푁}}, and {{푀, 푁}} = {{푀, 푁}, {푀, 푁}} are sets. Because {푀, 푀}
equals {푀}, pairing along with extensionality prove the existence of singletons. For
example, if 푊is a witness to the Inﬁnity Axiom, {∅, 푊}, {∅}, and {∅, {∅, 푊}} are
sets.
AXIOM 5.1.6 [Union]
∀푥∃푦∀푢(푢∈푦↔∃푣[푣∈푥∧푢∈푣]).
By the union axiom, ⋃푀is a set, and since 푀∪푁= ⋃{푀, 푁}, we conclude
that 푀∪푁is a set. Furthermore, the empty set, union, and pairing axioms can be used
to prove that for any 푛∈퐍, there exists a set of the form {푎0, 푎1, … , 푎푛} (Exercise 3).
AXIOM 5.1.7 [Power Set]
∀푥∃푦∀푢(푢∈푦↔∀푣[푣∈푢→푣∈푥]).
Because of Deﬁnition 3.3.1, the power set axiom can be written as
∀푥∃푦∀푢(푢∈푦↔푢⊆푥).
We conclude that for every set 푀, P(푀) is a set by the power set axiom, and by exten-
sionality, P(푀) is the unique set of subsets of 푀.
The next axiom is actually what is called an axiom scheme, inﬁnitely many axioms,
one for every formula. They are sometimes called the separation axioms.

Section 5.1 AXIOMS
229
AXIOMS 5.1.8 [Subset]
For every 햲햳-formula 푝(푢) not containing the symbol 푦, the following is an axiom:
∀푥∃푦∀푢[푢∈푦↔푢∈푥∧푝(푢)] .
The formula 푝(푢) in the subset axioms cannot contain the symbol 푦because the axioms
yield the existence of this set. If 푦was among its symbols, the existence of 푦would
depend on 푦.
The subset axioms yield many familiar sets.
∙Let ℱbe a set. By a subset axiom, there exists a set 퐶such that
푥∈퐶↔푥∈
⋃
ℱ∧∀푐(푐∈ℱ→푥∈푐).
Observe that the symbol 퐶does not appear in the formula
∀푐(푐∈퐴→푥∈푐).
Also, observe that the set 퐶is the intersection of ℱ. Hence, ⋂ℱis a set, and
since 푀∩푁= ⋂{푀, 푁}, we conclude that 푀∩푁is a set.
∙By a subset axiom, there exists a set 퐷such that
푥∈퐷↔푥∈푀∧푥∉푁,
so 푀⧵푁is a set.
Replacement Axioms
Given sets 퐴and 퐵, the function 휑: 퐴→퐵is a set because 휑⊆퐴× 퐵and 퐴× 퐵
is a set. Suppose, instead, that the function is deﬁned using a formula 푝(푥, 푦) and that
its domain is given by a set 퐴. It cannot be concluded from Axioms 5.1.4–5.1.10 that
the range {푦: 푥∈퐴∧푝(푥, 푦)} is a set. However, it appears reasonable that it is. For
example, deﬁne
푝(푥, 푦) := 푦∈퐙∧푦≤푥∧∀푧(푧∈퐙∧푦≤푧→푥< 푧).
An examination of the formula shows 푝(3.4, 4) and 푝(−7.1, −8). Since
푝(푥, 푦1) ∧푝(푥, 푦2) →푦1 = 푦2,
the formula 푝(푥, 푦) deﬁnes a function (Deﬁnition 4.4.10). If the domain is given to be
[0, ∞), its range is the set [0, ∞)∩퐙. Generalizing to an arbitrary 푝(푥, 푦), it is expected
that the range would be a set if the domain is a set. The next axiom scheme guarantees
this. It was ﬁrst found in correspondence between Cantor and Richard Dedekind (Can-
tor 1932) and Dmitry Mirimanoﬀ(1917) with formal versions by Abraham Fraenkel
(1922) and Thoralf Skolem (1922).

230
Chapter 5 AXIOMATIC SET THEORY
AXIOMS 5.1.9 [Replacement]
For every 햲햳-formula 푝(푡, 푤) not containing the symbol 푦, the following is an
axiom:
∀푥[∀푢∀푣1∀푣2(푢∈푥∧푝(푢, 푣1) ∧푝(푢, 푣2) →푣1 = 푣2)
→∃푦∀푤(푤∈푦↔∃푡[푡∈푥∧푝(푡, 푤)])].
As an example, every indexed family of sets is a set. To prove this, let 퐼be a set and
퐴푖be a set for all 푖∈퐼. Deﬁne
푝(푖, 푦) := 푦= 퐴푖.
Observe that by E2 and E3 (Axioms 5.1.1),
푦1 = 퐴푖∧푦2 = 퐴푖⇒푦1 = 푦2.
Therefore, by a replacement axiom (5.1.9), there exists a set ℱsuch that
푤∈ℱ↔∃푖(푖∈퐼∧푤= 퐴푖),
so ℱ= {퐴푖: 푖∈퐼} is a set, which implies that the union and intersection of families
of sets are sets.
Suppose 푎∈푀and 푏∈푁. By the subset and pairing axioms, we conclude that
{푎, 푏}, (푎, 푏) = {{푎}, {푎, 푏}} (Deﬁnition 3.2.8), and {(푎, 푏)} are sets . Therefore, ﬁxing
푏,
{{(푎, 푏)} : 푎∈푀}
is a family of sets, which implies that it is a set. Likewise,
{{{(푎, 푏)} : 푎∈푀} : 푏∈푁}
is a set. Hence, by the union axiom (5.1.6),
푀× 푁=
⋃⋃
{{{(푎, 푏)} : 푎∈푀} : 푏∈푁}
is a set. This implies, using a subset axiom (5.1.8), that any binary relation 푅such that
dom(푅) ⊆푀and ran(푅) ⊆푁is a set.
Axiom of Choice
Suppose that we are given the pairwise disjoint family of sets
ℱ= {{1, 3, 5}, {2, 9, 11}, {7, 8, 13}}.
It is easy to ﬁnd a set 푆such that
푆∩퐴is a singleton for every 퐴∈ℱ.
(5.1)

Section 5.1 AXIOMS
231
Simply run through the elements of ℱand choose an element from each set and put it
in 푆. Since ℱis pairwise disjoint, each choice will diﬀer from the others. For example,
it might be that
푆= {1, 9, 13}.
However, what happens if ℱis an inﬁnite set? If there was not a systematic way where
elements could be chosen from the sets of ℱ, we would be left with making inﬁnitely
many choices, which is something that we cannot do. Nonetheless, it appears reason-
able that there is a set 푆that intersects each member of ℱexactly once. Such a set
cannot be proved to exist from Axioms 5.1.2 to 5.1.9, so we need another axiom. It is
called the axiom of choice. We will have to use it every time that an inﬁnite number
of arbitrary choices need to be made.
AXIOM 5.1.10 [Choice]
If ℱis a family of pairwise disjoint, nonempty sets, there exists 푆⊆⋃ℱsuch
that 푆∩퐴is a singleton for all 퐴∈ℱ.
The statement of the axiom of choice can be written as an 햲햳-formula (Exercise 12).
Also, notice that 푆in Axiom 5.1.10 is a function (Exercise 13). It is called a selector.
The next follows quickly from the axiom of choice. In fact, the proposition is equiv-
alent to the axiom (Exercise 15), so this corollary is often used as a replacement for
it.
COROLLARY 5.1.11
For every binary relation 푅, there exists a function 휑such that 휑⊆푅and
dom(휑) = dom(푅).
PROOF
Let 푅⊆퐴×퐵. Deﬁne ℱ= {{푎}×[푎]푅: 푎∈퐴}, which is a set by a replacement
axiom (Exercise 14). Since ℱis pairwise disjoint and the set {푎}×[푎]푅≠∅for
all 푎∈dom(푅), the axiom of choice (5.1.10) implies that there exists a selector
푆such that 푆⊆⋃ℱand 푆∩({푎} × [푎]푅) is a singleton for all 푎∈dom(푅).
Thus, 푆⊆푅, and for all 푎∈dom(푅), there exists a unique 푏∈퐵such that
푎푅푏. This implies that 푆is the desired function.
Given a family of sets ℱ, deﬁne a relation 푅⊆ℱ× ⋃ℱby
푅= {(퐴, 푎) : 퐴∈ℱ∧푎∈퐴}.
By Corollary 5.1.11, there exists a function 휉: ℱ→⋃ℱsuch that 휉(퐴) ∈퐴for all
퐴∈ℱ. The function 휉is called a choice function.
EXAMPLE 5.1.12
Let 풜= {퐴푖: 푖∈퐼} be a family of nonempty sets. We want to deﬁne a family
of singletons ℬsuch that for all 푖∈퐼,
if {푎푖} ∈ℬ, then 푎푖∈퐴푖.

232
Chapter 5 AXIOMATIC SET THEORY
By Corollary 5.1.11, there exists a choice function 휉: 풜→⋃풜. The family
ℬ= {{휉(퐴푖)} : 푖∈퐼} is the desired set because 휉(퐴푖) ∈퐴푖for all 푖∈퐼.
There are many theorems equivalent to the axiom of choice (5.1.10). One such result
involves families of sets. Take 푛∈퐍and deﬁne
풜푛= {{0}, {0, 1}, … , {0, 1, … , 푛}}.
Observe that 풜푛is a chain with respect to ⊆and contains a maximal element (Deﬁni-
tion 4.3.16), which is {0, 1, … , 푛}. However, the chain
풜= {{0}, {0, 1}, … , {0, 1, … , 푛}, … }
has no maximal element. There are many sets that can be added to 풜to give it a
maximal element, but the natural choice is to add the union of 풜to the family giving
풜′ = {{0}, {0, 1}, … , {0, 1, … , 푛}, … , 퐍}.
풜′ has a maximal element, namely, 퐍. The generalization of this result to any family
of sets was ﬁrst proved by Kuratowski (1922) and then independently by Zorn (1935)
for whom the theorem is named despite Kuratowski’s priority. The proof given is es-
sentially due to Zermelo (Halmos 1960).
THEOREM 5.1.13 [Zorn’s Lemma]
Let 풜be a family of sets. If ⋃풞∈풜for every chain 풞of 풜with respect to
⊆, there exists 푀∈풜such that 푀⊄퐴for all 퐴∈풜.
PROOF
Let 휉: P(풜) ⧵{∅} →풜be a choice function (Corollary 5.1.11). For every
chain 풞of 풜, deﬁne
̄
풞= {퐴∈풜: 풞∪{퐴} is a chain}.
Notice that
̄
풞is the set of elements of 풜that when added to 풞yields a chain.
Let 햢헁(풜) be deﬁned as the set of all chains of 풜. That both
̄
풞and 햢헁(풜) are
sets is left to Exercise 17(a). Deﬁne
X : 햢헁(풜) →햢헁(풜)
by
X(풞) =
{
풞∪{휉( ̄
풞⧵풞)}
if ̄
풞⧵풞≠∅,
풞
if ̄
풞⧵풞= ∅.
Next, suppose that 풞0 is a chain of 풜such that X(풞0) = 풞0. By the assumption
on 풜, we have that ⋃풞0 ∈풜. To prove that ⋃풞0 is a maximal element of 풜,
take 퐴∈풜such that ⋃풞0 ⊂퐴. Since 퐴has an element that is not in any of
the elements of 풞0, the union 풞0 ∪{퐴} is a chain properly containing 풞0, which
is impossible. We conclude that the theorem is proved if 풞0 is shown to exist.

Section 5.1 AXIOMS
233
To accomplish this, we begin with a deﬁnition. A subset 풯of 햢헁(풜) is called a
tower when
∙∅∈풯,
∙X(풞) ∈풯for all 풞∈풯,
∙⋃풟∈풯for every chain 풟⊆풯.
Deﬁne 햳허(풜) to be the set of all towers of 풜. Observe that 햢헁(풞) and ⋂햳허(풜)
are both towers [Exercise 17(b)].
Take 퐶∈⋂햳허(풜) such that 퐶is comparable with respect to inclusion to
every element of ⋂햳허(풜). Such a set 퐶exists since ∅is an element of 햳허(풜)
and comparable to every element of ⋂햳허(풜). Suppose 퐴∈⋂햳허(풜) such that
퐴⊂퐶. Because ⋂햳허(풜) is a tower, X(퐴) ∈⋂햳허(풜). If 퐶⊂X(퐴), then
X(퐴) ⧵퐴has at least two elements, which is impossible. Therefore,
if 퐴∈
⋂
햳허(풜) and 퐴⊂퐶, then X(퐴) ⊆퐶.
(5.2)
Deﬁne
푇= {퐴∈
⋂
햳허(풜) : 퐴⊆퐶∨X(퐶) ⊆퐴}.
If 퐴⊆퐶, then 퐴⊆X(퐶) since 퐶⊆X(퐶). Hence, every element of 푇is
comparable to X(퐶). Also, 푇is a tower because of the following:
∙∅∈푇because ∅∈⋂햳허(풜) and ∅⊆퐶.
∙Let 퐵∈푇. Since ⋂햳허(풜) is a tower, X(퐵) ∈⋂햳허(풜). If 퐵⊂퐶,
then X(퐵) ⊆퐶by (5.2). If 퐶⊆퐵, then X(퐶) ⊆X(퐵). In both cases,
X(퐵) ∈푇.
∙Let 풞⊆푇be a chain. Then, ⋃풞∈⋂햳허(풜). Suppose there exists
퐶0 ∈풞such that 퐶0 is not a subset of 퐶. This implies that X(퐶) ⊆퐶0.
Thus, X(퐶) ⊆⋃풞, so ⋃풞∈푇.
Hence, 푇= ⋂햳허(풜) because 푇⊆⋂햳허(풜). Therefore, ⋂햳허(풜) is a chain
because 퐶is arbitrary [Exercise 17(c)]. Since ⋂햳허(풜) is a tower,
⋃⋂
햳허(풜) ∈
⋂
햳허(풜)
and then
X
(⋃⋂
햳허(풜)
)
∈
⋂
햳허(풜).
Hence, since ⋃⋂햳허(풜) is an upper bound of ⋂햳허(풜),
X
(⋃⋂
햳허(풜)
)
⊆
⋃⋂
햳허(풜),
which yields
X
(⋃⋂
햳허(풜)
)
=
⋃⋂
햳허(풜).
There are many equivalents to the axiom of choice (Rubin and Rubin 1985, Jech
1973). One of them is Zorn’s lemma.

234
Chapter 5 AXIOMATIC SET THEORY
THEOREM 5.1.14
The axiom of choice is equivalent to Zorn’s lemma.
PROOF
Since we have already proved that the axiom of choice (5.1.10) implies Zorn’s
lemma (Theorem 5.1.13), we only need to prove the converse. We must be careful
to only use Axioms 5.1.2–5.1.9 and not Axiom 5.1.10.
Assume Zorn’s lemma and let 푅be a relation. Deﬁne
풜= {휑: 휑⊆푅∧휑is a function}.
Let 풞be a chain of elements of 풜.
∙Take 휓∈⋃풞, so 휓∈퐶for some 퐶∈풞. This implies that 퐶is a subset
of 푅. Therefore, 휓∈푅, proving that ⋃풞⊆푅.
∙⋃풞is a function by Exercise 4.4.13.
We conclude that ⋃풞∈풜. Thus, by Zorn’s lemma, there exists a maximal
element Φ ∈풜. This means that Φ ⊆푅and dom(Φ) ⊆dom(푅). To prove that
dom(푅) ⊆dom(Φ), let (푥, 푦) ∈푅and suppose that 푥∉dom(Φ). This implies
that Φ ∪{(푥, 푦)} ⊆푅is a function. Hence, Φ ∪{(푥, 푦)} ∈풜, contradicting the
maximality of Φ. We conclude that Φ is the desired function, and the axiom of
choice follows (Exercise 15).
There was a controversy regarding the axiom of choice when Zermelo ﬁrst proposed
it. Despite mathematicians having previously used it implicitly, some objected to its
nonconstructive nature. The other axioms yield distinct results, but the axiom of choice
results in a set with elements that are not clearly identiﬁed. Over time, however, most
objections have faded. This is because the majority of mathematicians regard it as rea-
sonable and generally those who question the axiom of choice realize that eliminating
it would lead to serious problems because many proofs in various ﬁelds of mathematics
rely on the axiom.
Axiom of Regularity
The ideas that led to the next axiom (also known as the axiom of foundation) can be
found in Mirimanoﬀ(1917), while the statement of the axiom is credited to Skolem
(1922) and John von Neumann (1923).
AXIOM 5.1.15 [Regularity]
∀푥(푥≠{ } →∃푦[푦∈푥∧¬∃푢(푢∈푦∧푢∈푥)]).
The main result of the regularity axiom is that it prevents sets from being elements of
themselves. Suppose there exists a set 퐴such that 퐴∈퐴. Then, 퐴∩{퐴} ≠∅, but the
regularity axiom implies that 퐴∩{퐴} should be empty.

Section 5.1 AXIOMS
235
THEOREM 5.1.16
No set is an element of itself.
If 푉= {푥: 푥is a set} is a set, 푉∈푉, contradicting Theorem 5.1.16. Thus, the
theorem’s corollary quickly follows.
COROLLARY 5.1.17
There is no set of all sets.
Because of the regularity axiom (5.1.15), 퐴∉퐴for all sets 퐴. Therefore, {푥: 푥∉푥}
is not a set by, which prevents Russell’s paradox from being deduced from the axioms,
provided that they are consistent (Theorem 1.5.2).
The axiom of regularity is the ﬁnal axiom of our chosen collection of axioms. It
is believed that they do not prove any contradictions, which implies that the axioms
prevent the construction of {푥: 푥∉푥} as a set. Therefore, we write the follow-
ing deﬁnition. The collections of axioms are named after the mathematician who was
primarily responsible for their selection (Zermelo 1908).
DEFINITION 5.1.18
∙Axioms 5.1.2–5.1.8 are the Zermelo axioms. This collection of sentences is
denoted by 헭.
∙Axioms 5.1.2–5.1.8 combined with replacement and regularity (Axioms 5.1.9
and 5.1.15) are the Zermelo–Fraenkel axioms, denoted by 헭헙.
∙The Zermelo–Fraenkel axioms with the axiom of choice is denoted by 헭헙헖.
The nonempty sets that follow from 헭헙헖have the property that all of their elements
are sets. Sets with this property are called hereditary or pure. Assuming 헭헙헖does
not prevent us from working with diﬀerent types of sets, such as sets of symbols or
formulas, but we must remember that such nonhereditary sets are not products of 헭헙헖,
so they must be handled with care because we do not want to fall into a paradox.
Exercises
1. Let 햲be a set of theory symbols. Let 푐1, 푐2, 푐3, 푐4 ∈햲be constant symbols and
푓∈햲be a binary function symbol. Suppose that 푝(푥, 푦) is an 햲-formula. Use the
Equality Axioms (5.1.1) to prove the following.
(a) ⊢푐1 = 푐1
(b) ⊢푐1 = 푐2 ∧푐2 = 푐3 →푐1 = 푐3
(c) ⊢푐1 = 푐2 ∧푐3 = 푐4 →푓(푐1, 푐3) = 푓(푐2, 푐4)
(d) ⊢푐1 = 푐2 ∧푐3 = 푐4 →[푝(푓(푐1), 푐3) ↔푝(푓(푐2), 푐4)]
2. Prove ∀푥∀푦(푥= 푦→∀푢[푢∈푥↔푢∈푦]).
3. For any 푛∈퐍with 푛> 0, prove that there exists a set of the form {푎0, 푎1, … , 푎푛−1}.
4. Let ℱbe a family of sets. Prove that P(⋃⋂ℱ) is a set.

236
Chapter 5 AXIOMATIC SET THEORY
5. Use a subset axiom (5.1.8) to prove that there is no set of all sets. This proves that
Russell’s paradox does not follow from the axiom of 헭.
6. Prove that there is no set that has every singleton as an element.
7. Let 퐴and 퐵be sets. Deﬁne the symmetric diﬀerence of 퐴and 퐵by
퐴△퐵= 퐴⧵퐵∪퐵⧵퐴.
Prove that 퐴△퐵is a set.
8. Prove the given equations for all sets 퐴, 퐵, and 퐶.
(a) 퐴△∅= 퐴
(b) 퐴△푈= 퐴
(c) 퐴△퐵= 퐵△퐴
(d) 퐴△(퐵△퐶) = (퐴△퐵) △퐶
(e) 퐴△퐵= (퐴∪퐵) ⧵(퐵∪퐴)
(f)
(퐴△퐵) ∩퐶= (퐴∩퐶) △(퐵∩퐶)
9. Given sets 퐼and 퐴푖for all 푖∈퐼, show that ⋃
푖∈퐼퐴푖and ⋂
푖∈퐼퐴푖are sets.
10. Prove that 퐴0 × 퐴1 × · · · × 퐴푛−1 is a set if 퐴0, 퐴1, … , 퐴푛−1 are sets.
11. Show that the Cartesian product of a nonempty family of nonempty sets is not
empty.
12. Write the Axiom of Choice (5.1.10) as an 햲햳-formula.
13. Demonstrate that a selector is a function.
14. In the proof of Corollary 5.1.11, prove that {{푎} × [푎]푅: 푎∈퐴} is a set.
15. Prove that Corollary 5.1.11 implies Axiom 5.1.10.
16. Let 푅= 퐑× {0, 1}. Find a function 퐹: 퐑→{0, 1} such that 퐹(푎) = 0 for all
푎∈퐑.
17. Prove the following parts of the proof of Zorn’s lemma (5.1.13).
(a)
̄
풞and 햢헁(풜) are sets.
(b) 햢헁(풞) and ∩햳허(풜) are towers.
(c) ⋂햳허(풜) is a chain.
18. Prove that 헭헙and Zorn’s lemma imply the axiom of choice.
19. Use Zorn’s lemma to prove that for every function 휑: 퐴→퐵, there exists a
maximal 퐶⊆퐴such that 휑↾퐶is one-to-one.
20. Prove that if 풜is a collection of sets such that ⋃풞∈풜for every chain 풞⊆풜,
then 풜contains a maximal element.
21. Let (퐴, 푅) be a partial order. Prove that there exists an order 푆on 퐴such that
푅⊆푆and 푆is linear.

Section 5.2 NATURAL NUMBERS
237
22. Use the regularity axiom (5.1.15) to prove that if {푎, {푎, 푏}} = {푐, {푐, 푑}, then
푎= 푐and 푏= 푑. This gives an alternative to Kuratowski’s deﬁnition of an ordered
pair (Deﬁnition 3.2.8).
23. Prove that there does not exist an inﬁnite sequence of sets 퐴0, 퐴1, 퐴2, … such that
퐴푖+1 ∈퐴푖for all 푖= 0, 1, 2, … .
24. Prove that the empty set axiom (5.1.2) can be proved from the other axioms of
헭헙헖.
25. Use Axiom 5.1.9 to prove that the subset axioms (5.1.8) can be proved from the
other axioms of 헭헙헖.
26. Let (퐴, 푅) be a poset. Prove that every chain of 퐴is contained in a maximal chain
with respect to ⊆. This is called the Hausdorﬀmaximal princple.
27. Prove that the Hausdorﬀmaximal principle implies Zorn’s lemma, so is equivalent
to the axiom of choice.
5.2
NATURAL NUMBERS
In order to study mathematics itself, as opposed to studying the contents of mathemat-
ics as when we study calculus or Euclidean geometry, we need to ﬁrst develop a system
in which all of mathematics can be interpreted. In such a system, we should be able to
precisely deﬁne mathematical concepts, like functions and relations; construct exam-
ples of them; and write statements about them using a very precise language. 헭헙헖with
ﬁrst-order logic seems like a natural choice for such an endeavor. However, in order
to be a success, this system must have the ability to represent the most basic objects
of mathematical study. Namely, it must be able to model numbers. Therefore, within
헭헙헖families of sets that copy the properties of 퐍, 퐙, 퐐, 퐑, and 퐂will be constructed.
Since we can do this, we conclude that 퐍, 퐙, 퐐, 퐑, and 퐂are themselves sets, and we
also conclude that what we discover about their analogs are true about them. We begin
with the natural numbers.
DEFINITION 5.2.1
For every set 푎, the successor of 푎is the set 푎+ = 푎∪{푎}. If 푎is the successor
of 푏, then 푏is the predecessor of 푎and we write 푏= 푎−.
For example, we have that {3, 5, 7}+ = {3, 5, 7, {3, 5, 7}} and ∅+ = {∅}. For con-
venience, write 푎++ for (푎+)+, so ∅++ = {∅, {∅}}. Also, the predecessor of the set
{∅, {∅}, {∅, {∅}}} is {∅, {∅}}, so write {∅, {∅}, {∅, {∅}}}−= {∅, {∅}}. Fur-
thermore, since ∅contains no elements, we have the following.
THEOREM 5.2.2
∅does not have a predecessor.

238
Chapter 5 AXIOMATIC SET THEORY
Although every set has a successor, we are primarily concerned with certain sets
that have a particular property.
DEFINITION 5.2.3
The set 퐴is inductive if ∅∈퐴and 푎+ ∈퐴for all 푎∈퐴.
Deﬁnition 5.2.3 implies that if 퐴is inductive, 퐴contains the sets
∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}}, …
because
∅+ = {∅},
{∅}+ = {∅, {∅}},
{∅, {∅}}+ = {∅, {∅}, {∅, {∅}}},
{∅, {∅}, {∅, {∅}}}+ = {∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}}},
⋮
Of course, Deﬁnition 5.2.3 does not guarantee the existence of an inductive set. The
inﬁnity axiom (5.1.3) does that. Then, by a subset axiom (5.1.8),
∀푥∃푦∀푢(푢∈푦↔푢∈푥∧푥is inductive ∧∀푤[푤is inductive →푢∈푤]),
where w is inductive can be written as
∅∈푤∧∀푎(푎∈푤→푎+ ∈푤).
Therefore, the collection that contains the elements that are common to all inductive
sets is a set, and we can make the next deﬁnition (von Neumann 1923).
DEFINITION 5.2.4
An element that is a member of every inductive set is called a natural number.
Let 휔denote the set of natural numbers. That is,
휔= {∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}}, … }.
Deﬁnition 5.2.4 suggests that the elements of 휔will be interpreted to represent the
elements of 퐍, so represent each natural number with the appropriate element of 퐍:
0 = ∅,
1 = {∅},
2 = {∅, {∅}},
3 = {∅, {∅}, {∅, {∅}}},
4 = {∅, {∅}, {∅, {∅}}, {∅, {∅}, {∅, {∅}}}},
⋮

Section 5.2 NATURAL NUMBERS
239
Although the choice of which sets should represent the numbers of 퐍is arbitrary, our
choice does have some fortunate properties. For example, the number of elements in
each natural number and the number of 퐍that it represents are the same. Moreover,
notice that each natural number can be written as
0 = { },
1 = {0},
2 = {0, 1},
3 = {0, 1, 2},
4 = {0, 1, 2, 3},
⋮
and also note that
⋃
1 = 0,
⋃
2 = 1,
⋃
3 = 2,
⋃
4 = 3,
⋮
The empty set is an element of 휔by deﬁnition, so suppose 푛∈휔and take 퐴to be
an inductive set. Since 푛is a natural number, 푛∈퐴, and since 퐴is inductive, 푛+ ∈퐴.
Because 퐴is arbitrary, we conclude that 푛+ is an element of every inductive set, so
푛+ ∈휔(Deﬁnition 5.2.4). This proves the next theorem.
THEOREM 5.2.5
휔is inductive.
The proof of the next theorem is left to Exercise 5.
THEOREM 5.2.6
If 퐴is an inductive set and 퐴⊆휔, then 퐴= 휔.
Order
Because we want to interpret 휔so that it represents 퐍, we should be able to order 휔as
퐍is ordered by ≤. That is, we need to ﬁnd a partial order on 휔that is also a well-order.
To do this, we start with a deﬁnition.
DEFINITION 5.2.7
A set 퐴is transitive means for all 푎and 푏, if 푏∈푎and 푎∈퐴, then 푏∈퐴.
Observe that ∅is transitive because 푎∈∅is always false. More transitive sets are
found in the next theorem.

240
Chapter 5 AXIOMATIC SET THEORY
THEOREM 5.2.8
∙Every natural number is transitive.
∙휔is transitive.
PROOF
The proof of the second part is left to Exercise 4. We prove the ﬁrst by deﬁning
퐴= {푛∈휔: 푛is transitive}.
We have already noted that 0 ∈퐴, so assume that 푛∈퐴and let 푏∈푎and
푎∈푛∪{푛}. If 푎∈{푛}, then 푏∈푛. If 푎∈푛, then by hypothesis, 푏∈푛. In
either case, 푏∈푛+ since 푛⊆푛+, so 푛+ ∈퐴. Hence, 퐴is inductive, so 퐴= 휔
by Theorem 5.2.6.
In addition to being transitive, each element of 휔has another useful property that
provides another reason why their choice was a wise one.
LEMMA 5.2.9
If 푚, 푛∈휔, then 푚⊂푛if and only if 푚∈푛.
PROOF
Take 푚, 푛∈휔. If 푚∈푛, then 푚⊂푛since 푛is transitive (Exercise 3). To prove
the converse, deﬁne
퐴= {푘∈휔: ∀푙(푙∈휔∧[푙⊂푘→푙∈푘])}.
We show that 퐴is inductive. Trivially, 0 ∈퐴. Now take 푛∈퐴and let 푚∈휔
such that 푚⊂푛+. We have two cases to consider.
∙Suppose 푛∉푚. Then, 푚⊆푛. If 푚⊂푛, then 푚∈푛by hypothesis, which
implies that 푚∈푛+. If 푚= 푛, then 푚∈푛+.
∙Next assume that 푛∈푚. Take 푥∈푛. Since 푚is transitive by Theo-
rem 5.2.8, we have that 푥∈푚. This implies that 푛∪{푛} ⊆푚, but this is
impossible since 푚⊂푛+, so 푛∉푚.
For example, we see that 2 ∈3 and 2 ⊂3 because
{∅, {∅}} ∈{∅, {∅}, {∅, {∅}}}
and
{∅, {∅}} ⊂{∅, {∅}, {∅, {∅}}}.
Now use Lemma 5.2.9 to deﬁne an order on 휔. Instead of using ≼, we use ≤to copy
the order on 퐍.

Section 5.2 NATURAL NUMBERS
241
DEFINITION 5.2.10
For all 푚, 푛∈휔, let
푚≤푛if and only if 푚⊆푛.
Deﬁne 푚< 푛to mean 푚≤푛but 푚≠푛.
Lemma 5.2.9 in conjunction with Deﬁnition 5.2.10 implies that for all 푚, 푛∈휔, we
have that
푚< 푛if and only if 푚⊂푛if and only if 푚∈푛.
The order of Deﬁnition 5.2.10 makes 휔a chain with ∅as its least element.
THEOREM 5.2.11
(휔, ≤) is a linear order.
PROOF
That (휔, ≤) is a poset follows as in Example 4.3.9. To show that 휔is a chain
under ≤, deﬁne
퐴= {푘∈휔: ∀푙(푙∈휔∧[푘≤푙∨푙≤푘])}.
We prove that 퐴is inductive.
∙Since ∅is a subset of every set, 0 ∈퐴.
∙Suppose that 푛∈퐴and let 푚∈휔. We have two cases to check. First,
assume that 푛≤푚. If 푛< 푚, then 푛+ ≤푚, while if 푛= 푚, then 푚< 푛+.
Now suppose that 푚≤푛, but this implies that 푚< 푛+. In either case,
푛+ ∈퐴.
We can now quickly prove the following.
COROLLARY 5.2.12
For all 푚, 푛∈휔, if 푚+ = 푛+, then 푚= 푛.
PROOF
Let 푚and 푛be natural numbers and assume that
푚∪{푚} = 푛∪{푛}.
(5.3)
Take 푥∈푚. Then, 푥∈푛or 푥= 푛. If 푥∈푛, then 푚⊆푛, so suppose that
푥= 푛. This implies that 푛∈푚, so 푚≠푛by Theorem 5.1.16. However, we then
have 푚∈푛by (5.3), which contradicts the trichotomy law (Theorem 4.3.21).
Similarly, we can prove that 푛⊆푚.
Since the successor deﬁnes a function 푆: 휔→휔where 푆(푛) = 푛+, Corollary 5.2.12
implies that 푆is one-to-one.
Thereom 5.2.11 shows that (휔, ≤) is a linear order as (퐍, ≤) is a linear order. The
next theorem shows that the similarity goes further.

242
Chapter 5 AXIOMATIC SET THEORY
THEOREM 5.2.13
(휔, ≤) is a well-ordered set.
PROOF
By Theorem 5.2.11, (휔, ≤) is a linear order. To prove that it is well-ordered,
suppose that 퐴⊆휔such that 퐴does not have a least element. Deﬁne
퐵= {푘∈휔: {0, 1, … , 푘} ∩퐴= ∅}.
We prove that 퐵is inductive.
∙If 0 ∈퐴, then 퐴has a least element because 0 is the least element of 휔.
Hence, {0} ∩퐴= ∅, so 0 ∈퐵.
∙Let 푛∈퐵. This implies that {0, 1, … , 푛} ∩퐴is empty. Thus, 푛+ cannot
be an element of 퐴for then it would be the least element of 퐴. Hence,
{0, 1, … , 푛, 푛+} ∩퐴= ∅proving that 푛+ ∈퐵.
Therefore, 퐵= 휔, which implies that 퐴is empty.
Recursion
The familiar factorial is deﬁned recursively as
0! = 1,
(5.4)
(푛+ 1)! = (푛+ 1)푛! (푛∈퐍).
(5.5)
A recursive deﬁnition is one that is given in terms of itself. This is illustrated in
(5.5) where the factorial is deﬁned using the factorial. It appears that the factorial is a
function 퐍→퐍, but a function is a set, so why do (5.4) and (5.5) deﬁne a set? Such a
deﬁnition is not found among the axioms of Section 5.1 or the methods of Section 3.1.
That they do deﬁne a function requires an important theorem.
THEOREM 5.2.14 [Recursion]
Let 퐴be a set and 푎∈퐴. If 푔is a function 퐴→퐴, there exists a unique function
푓: 휔→퐴such that
∙푓(0) = 푎,
∙푓(푛+) = 푔(푓(푛)) for all 푛∈휔.
PROOF
Let 푔: 퐴→퐴be a function. Deﬁne
ℱ= {ℎ: ℎ⊆휔× 퐴∧(0, 푎) ∈ℎ
∧∀푛∀푦[(푛, 푦) ∈ℎ→(푛+, 푔(푦)) ∈ℎ])}.
(5.6)
Note that ℱis a set by a subset axiom (5.1.8) and ℱis nonempty because 휔×퐴∈
ℱ. Let
푓=
⋂
ℱ.

Section 5.2 NATURAL NUMBERS
243
Observe that 푓∈ℱ(Exercise 8). Deﬁne
퐷= {푛∈휔: ∃푧[(푛, 푧) ∈푓] ∧∀푦∀푦′[(푛, 푦) ∈푓∧(푛, 푦′) ∈푓→푦= 푦′]}.
We prove that 퐷is inductive.
∙Since ℱ≠∅, we know that (0, 푎) ∈푓by (5.6), so let (0, 푏) also be an
element of 푓. If we assume that 푎≠푏, then 푓⧵{(0, 푏)} ∈ℱ, which is
impossible because it implies that (0, 푏) ∉⋂ℱ. Hence, 0 ∈퐷.
∙Suppose that 푛∈퐷. This means that (푛, 푧) ∈푓for some 푧∈퐴. Thus,
(푛+, 푔(푧)) ∈푓by (5.6). Assume that (푛+, 푦) ∈푓. If 푦≠푔(푧), then
푓⧵{(푛+, 푦)} ∈ℱ, which again leads to the contradictory (푛+, 푦) ∉⋂ℱ.
Hence, 푓is a function 휔→퐴(Theorem 5.2.6). We conﬁrm that 푓has the
desired properties.
∙푓(0) = 푎because (0, 푎) ∈⋂ℱ.
∙Take 푛∈휔and write 푦= 푓(푛). This implies that (푛, 푦) ∈푓, so we have
that (푛+, 푔(푦)) ∈푓. Therefore, 푓(푛+) = 푔(푦) = 푔(푓(푛)).
To prove that 푓is unique, let 푓′ : 휔→퐴be a function such that 푓′(0) = 푎
and 푓′(푛+) = 푔(푓′(푛)) for all 푛∈휔. Let
퐸= {푛∈휔: 푓(푛) = 푓′(푛)}.
The set 퐸is inductive because 푓(0) = 푎= 푓′(0) and assuming 푛∈휔we have
that 푓(푛+) = 푔(푓(푛)) = 푔(푓′(푛)) = 푓′(푛+).
The factorial function has domain 퐍but the recursion theorem (5.2.14) gives a func-
tion with domain 휔and uses the successor of Deﬁnition 5.2.1. We need a connection
between 퐍and 휔. We do this by deﬁning two operations on 휔that we designate by +
and ⋅and then showing that the basic properties of 휔under these two operations are
the same as the basic properties of 퐍under standard addition and multiplication.
Arithmetic
We begin with addition. Let 푔: 휔→휔be deﬁned by 푔(푛) = 푛+. For every 푚∈휔, by
Theorem 5.2.14, there exists a unique function 푓푚: 휔→휔such that
푓푚(0) = 푚
and for all 푛∈휔,
푓푚(푛+) = 푔(푓푚(푛)) = [푓푚(푛)]+.
Deﬁne
푎= {((푚, 푛), 푓푚(푛)) : 푚, 푛∈휔}.
Since 푓푚is a function for every 푛∈휔, the set 푎is a binary operation (Deﬁnition 4.4.26).
Observe that for all 푚, 푛∈휔,

244
Chapter 5 AXIOMATIC SET THEORY
∙푎(푚, 0) = 푚,
∙푎(푚, 푛+) = 푎(푚, 푛)+.
We know that for every 푘, 푙∈퐍, we have that 푘+ 0 = 푘and to add 푘+ 푙, one simply
adds 1 a total of 푙times to 푘. This is essentially what 푎does to the natural numbers.
For example, for 1, 3, 4 ∈퐍,
1 + 3 = ([(1 + 1) + 1] + 1) = 4
and for 1, 2, 3, 4 ∈휔(page 238),
푎(1, 3) = 푎(1, 2+)
= 푎(1, 2)+
= 푎(1, 1+)+
= 푎(1, 1)++
= 푎(1, 0+)++
= 푎(1, 0)+++
= 1+++
= 2++
= 3+
= 4.
Therefore, we choose 푎to be addition on 휔. To deﬁne the addition, we only need to cite
the two properties given in Theorem 5.2.14. Since each 푓푚is unique, there is no other
function to which the deﬁnition could be referring. Therefore, we can deﬁne addition
recursively.
DEFINITION 5.2.15
For all 푚, 푛∈휔,
∙푚+ 0 = 푚,
∙푚+ 푛+ = (푚+ 푛)+.
Notice that 푚+ = (푚+ 0)+ = 푚+ 0+ = 푚+ 1. Furthermore, using the notation from
page 238, we conclude that 1 + 3 = 4 because 푎(1, 3) = 4.
The following lemma shows that the addition given in Deﬁnition 5.2.15 has a prop-
erty similar to that of commutativity.
LEMMA 5.2.16
For all 푚, 푛∈휔,
∙0 + 푛= 푛.
∙푚+ + 푛= (푚+ 푛)+.

Section 5.2 NATURAL NUMBERS
245
PROOF
Let 푚, 푛∈휔. To prove that 0 + 푛= 푛, we show that
퐴= {푘∈휔: 0 + 푘= 푘}
is inductive.
∙0 ∈퐴because 0 + 0 = 0.
∙Let 푛∈퐴. Then, 0 + 푛+ = (0 + 푛)+ = 푛+, so 푛+ ∈퐴.
To prove that 푚+ + 푛= (푚+ 푛)+, we show that
퐵= {푘∈휔: 푚+ + 푘= (푚+ 푘)+}
is inductive.
∙Again, 0 ∈퐵because 0 + 0 = 0.
∙Suppose that 푛∈퐵. We have that
푚+ + 푛+ = (푚+ + 푛)+ = (푚+ 푛)++ = (푚+ 푛+)+,
where the ﬁrst and third equality follow by Deﬁnition 5.2.15 and the second
follows because 푛∈퐵. Thus, 푛+ ∈퐵.
Now to see that + behaves on 휔as + behaves on 퐍, we use Deﬁnition 4.4.31.
THEOREM 5.2.17
∙The binary operation + on 휔is associative and commutative.
∙0 is the additive identity for 휔.
PROOF
0 is the additive identity by Deﬁnition 5.2.15 and Lemma 5.2.16, and that + is
associative on 휔is Exercise 14. To show that + is commutative, let 푚∈휔and
deﬁne
퐴= {푘∈휔: 푚+ 푘= 푘+ 푚}.
As has been our strategy, we show that 퐴is inductive.
∙푚+ 0 = 푚by Deﬁnition 5.2.15, and 0 + 푚= 푚by Lemma 5.2.16, so
0 ∈퐴.
∙Let 푛∈퐴. Therefore, 푚+ 푛= 푛+ 푚, which implies that
푚+ 푛+ = (푚+ 푛)+ = (푛+ 푚)+ = 푛+ + 푚.
Hence, 푛+ ∈퐴.
Multiplication on 퐍can be viewed as iterated addition. For example,
3 ⋅4 = 3 + 3 + 3 + 3,
so we deﬁne multiplication recursively along these lines. As with addition, the result
is a binary operation by Theorem 5.2.14.

246
Chapter 5 AXIOMATIC SET THEORY
DEFINITION 5.2.18
For all 푚, 푛∈휔,
∙푚⋅0 = 0,
∙푚⋅푛+ = 푚⋅푛+ 푚.
For example, 3 ⋅4 = 12 because
3 ⋅4 = 3 ⋅3 + 3
= (3 ⋅2 + 3) + 3
= ([3 ⋅1 + 3] + 3) + 3
= ([(3 ⋅0 + 3) + 3] + 3) + 3
= ([3 + 3] + 3) + 3
= 12,
where ([3 + 3] + 3) + 3 = 12 is left to Exercise 13.
The next result is analogous to Lemma 5.2.16. Its proof is left to Exercise 9.
LEMMA 5.2.19
For all 푚, 푛∈휔,
∙0 ⋅푚= 0,
∙푛+ ⋅푚= 푛⋅푚+ 푚.
We now prove that ⋅on 휔behaves as ⋅on 퐍and that + and ⋅on 휔interact with each
other via the distributive law as the two operations on 퐍. For the proof, we introduce
two common conventions for these two operations.
∙So that we lessen the use of parentheses, deﬁne ⋅to have precedence over +, and
read from left to right. That is,
푚⋅푛+ 표= (푚⋅푛) + 표and 푚+ 푛⋅표= 푚+ (푛⋅표),
and
푚+ 푛+ 표= (푚+ 푛) + 표and 푚⋅푛⋅표= (푚⋅푛) ⋅표.
∙Deﬁne 푚푛= 푚⋅푛.
THEOREM 5.2.20
∙The binary operation ⋅on 휔is associative and commutative.
∙1 is the multiplicative identity for 휔.
∙The distributive law holds for 휔. This means that for all 푚, 푛, 표∈휔,
푚(푛+ 표) = 푚푛+ 푚표.

Section 5.2 NATURAL NUMBERS
247
PROOF
That the associative and commutative properties hold is Exercise 12. To prove
the other parts of the theorem, let 푚, 푛, 표∈휔. Since 0+ = 1, by Deﬁnition 5.2.18
and Lemma 5.2.16,
푚1 = 푚0+ = 푚0 + 푚= 0 + 푚= 푚,
and by Lemma 5.2.19 and Deﬁnition 5.2.15, we have that 1푚= 푚. To show that
the distributive law holds, deﬁne
퐴= {푘∈휔: 푘(푛+ 표) = 푘푛+ 푘표}.
Since 0(푛+ 표) = 0 and 0푛+ 0표= 0 + 0 = 0, we have that 0 ∈퐴. Now suppose
that 푚∈퐴. That is,
푚(푛+ 표) = 푚푛+ 푚표.
Therefore, 푚+ ∈퐴because
푚+(푛+ 표) = 푚(푛+ 표) + (푛+ 표)
= (푚푛+ 푚표) + (푛+ 표)
= (푚푛+ 푛) + (푚표+ 표)
= 푚+푛+ 푚+표.
EXAMPLE 5.2.21
We revisit the factorial function. Since addition and multiplication are now de-
ﬁned on 휔, let 푔: 휔× 휔→휔× 휔be the function
푔(푘, 푙) = (푘+ 1, (푘+ 1)푙).
Theorem 5.2.14 implies that there exists a unique function 푓: 휔→휔× 휔such
that
푓(0) = (0, 1)
and
푓(푛+ 1) = 푔(푓(푛)).
Let 휋be the projection map 휋(푘, 푙) = 푙. By Theorem 5.2.6 and Exercise 10, we
conclude that for all 푛∈휔,
푓(푛+ 1) = (푛+ 1, (푛+ 1)(휋◦푓)(푛)).
(5.7)
Therefore, the factorial function 푛!, which is deﬁned recursively by
0! = 1,
(푛+ 1)! = (푛+ 1)푛! (푛∈휔),
is 휋◦푓by the uniqueness of 푓.

248
Chapter 5 AXIOMATIC SET THEORY
To solve an equation like 6+2푥= 14 where the coeﬃcients are from 퐍, we can use
the cancellation law and write
6 + 2푥= 14,
6 + 2푥= 6 + 8,
2푥= 8,
2푥= 2 ⋅4,
푥= 4.
For equations with coeﬃcients in 휔, we need a similar law.
THEOREM 5.2.22 [Cancellation]
Let 푎, 푏, 푐∈휔.
∙If 푎+ 푏= 푎+ 푐, then 푏= 푐.
∙If 푎푏= 푎푐and 푎≠0, then 푏= 푐.
PROOF
The proof for multiplication is Exercise 15. For addition, deﬁne
퐴= {푘∈휔: ∀푙∀푚(푙∈휔∧푚∈휔∧[푘+ 푙= 푘+ 푚→푙= 푚])}.
Clearly, 0 ∈퐴, so assume 푛∈퐴. To prove that 푛+ ∈퐴, let 푏, 푐∈휔and suppose
that 푛+ +푏= 푛+ +푐. Then, (푛+푏)+ = (푛+푐)+ by Lemma 5.2.16, so 푛+푏= 푛+푐
by Corollary 5.2.12. Hence, 푏= 푐because 푛∈퐴.
Exercises
1. For every set 퐴, show that 퐴+ is a set.
2. For every 푛∈휔, show that 푛+++++ = 푛+ 5.
3. Show that the following are equivalent.
∙퐴is transitive.
∙If 푎∈퐴, then 푎⊂퐴.
∙퐴⊆P(퐴).
∙⋃퐴⊆퐴.
∙⋃(퐴+) = 퐴.
4. Prove that 휔is transitive.
5. Prove Theorem 5.2.6.
6. Let 퐴⊆휔. Show that if ⋃퐴= 퐴, then 퐴= 휔.
7. Take 푢, 푣, 푥, 푦∈휔and assume that 푢+ 푥= 푣+ 푦. Prove that 푢∈푣if and only if
푦∈푥.

Section 5.3 INTEGERS AND RATIONAL NUMBERS
249
8. Prove that 푓∈ℱin the proof of Theorem 5.2.14.
9. Prove Lemma 5.2.19.
10. Prove (5.7) from Example 5.2.21.
11. Let 퐴be a set and 휑: 퐴→퐴be a one-to-one function. Take 푎∈퐴⧵ran(휑).
Recursively deﬁne 푓: 휔→퐴such that
푓(0) = 푎,
푓(푛+) = 휑(푓(푛)).
Prove that 푓is one-to-one.
12. Let 푚, 푛, 표∈휔. Prove the given equations.
(a) 푚푛= 푛푚.
(b) 푚(푛+ 표) = 푚푛+ 푚표.
13. Show that ([3 + 3] + 3) + 3 = 12.
14. Prove that addition on 휔is associative.
15. For all 푎, 푏, 푐∈휔with 푎≠0, prove that if 푎푏= 푎푐, then 푏= 푐.
16. Show that for all 푚, 푛∈휔, if 푚푛= 0, then 푚= 0 or 푛= 0.
17. We deﬁne exponentiation on 휔. For all 푛∈휔,
푛0 = 1,
푛푘+ = 푛푘⋅푛.
(a) Use the recursion (Theorem 5.2.14) to prove that this deﬁnes a function 휔×
휔→휔.
(b) Show that exponentiation on 휔is one-to-one.
18. Let 푥, 푦, 푥∈휔. Use the deﬁnition of Exercise 17 to prove the given equations.
(a) 푥푦+푧= 푥푦푥푧.
(b) (푥푦)푧= 푥푧푦푧.
(c) (푥푦)푧= 푥푦푧.
19. Let 푚, 푛, 푘∈휔. Assume that 푚≤푛and 0 ≤푘. Demonstrate the following.
(a) 푚+ 푘≤푛+ 푘.
(b) 푚푘≤푛푘.
(c) 푚푘≤푛푘.
5.3
INTEGERS AND RATIONAL NUMBERS
Now that we have deﬁned within set theory the set of natural numbers and conﬁrmed
its basic properties, we wish to continue this with other sets of numbers. We begin with
the integers.

250
Chapter 5 AXIOMATIC SET THEORY
Integers
We build the integers using the natural numbers. The problem is how to deﬁne the
negative integers. We need to decide how to represent the adjoining of the negative
sign to a natural number. One option that might work is to use ordered pairs. These are
always good options when extra information needs to be included with each element
of a set. For example, (4, 0) could represent 4 because 4 −0 = 4, and (0, 4) could
represent −4 because 0 −4 = −4. However, this is a problem because we did not
deﬁne subtraction on 휔, so we need another solution. Our decision is to generalize
this idea of subtracting coordinates to the set 휔× 휔, but use addition to do it. Since
there are inﬁnitely many pairs (푚, 푛) such that 푚−푛= 4, we equate them by using the
equivalence relation of Exercise 4.2.2.
DEFINITION 5.3.1
Let 푅be the equivalence relation on 휔× 휔deﬁned by
(푚, 푛) 푅(푚′, 푛′) if and only if 푚+ 푛′ = 푚′ + 푛.
Deﬁne ℤ= (휔× 휔)∕푅to be the set of integers.
Using Deﬁnition 5.3.1 we associate elements of 퐙with elements of ℤ:
퐙
ℤ
⋮
⋮
−2
[(0, 2)]
−1
[(0, 1)]
0
[(0, 0)]
1
[(1, 0)]
2
[(2, 0)]
⋮
⋮
Notice that because 0 and 2 are elements of 휔, the equivalence class [(0, 2)] is the name
for [(∅, {∅, {∅}})]. Also,
[(0, 2)] = [(1, 3)] = [(2, 4)] = · · · .
The ordering of ℤis deﬁned in terms of the ordering on 휔. Be careful to note that the
symbol ≤will represent two diﬀerent orders, one on ℤand one on 휔(Deﬁnition 5.2.10).
This overuse of the symbol will not lead to confusion because the order will be clear
from context. For example, in the next deﬁnition, the ﬁrst ≤is the order on ℤ, and the
second ≤is the order on 휔.
DEFINITION 5.3.2
For all [(푚, 푛)], [(푚′, 푛′)] ∈ℤ, deﬁne
[(푚, 푛)] ≤[(푚′, 푛′)] if and only if 푚+ 푛′ ≤푚′ + 푛
and

Section 5.3 INTEGERS AND RATIONAL NUMBERS
251
[(푚, 푛)] < [(푚′, 푛′)] if and only if 푚+ 푛′ < 푚′ + 푛.
Since −4 = [(0, 4)] and 3 = [(5, 2)], we have that −4 < 3 because 0 + 2 < 5 + 4.
Since (ℤ, ≤) has no least element (Exercise 3), it is not well-ordered. However, it is
a chain. Note that in the proof the symbol ≤is again overused.
THEOREM 5.3.3
(ℤ, ≤) is a linear order.
PROOF
We use the fact that the order on 휔is a linear order (Theorem 5.2.11). Let 푎, 푏∈
ℤ, so 푎= (푚, 푛) and 푏= (푚′, 푛′) for some 푚, 푛, 푚′, 푛′ ∈휔.
∙Because 푚+ 푛≤푚+ 푛, we have 푎≤푎.
∙Suppose that 푎≤푏and 푏≤푎. This implies that 푚+ 푛′ ≤푚′ + 푛and
푚′ + 푛≤푚+ 푛′. Since ≤is antisymmetric on 휔, 푚+ 푛′ = 푚′ + 푛, which
implies that 푎= 푏, so ≤is antisymmetric on ℤ.
∙Using a similar strategy, it can be shown that ≤is transitive on ℤ(Exer-
cise 4). Thus, (ℤ, ≤) is a poset.
∙Since (휔, ≤) is a linear order, 푚+ 푛′ ≤푚′ + 푛or 푚′ + 푛≤푚+ 푛′. This
implies that 푎≤푏or 푏≤푎, so ℤis a chain under ≤.
Although 휔is not a subset of ℤlike 퐍is a subset of 퐙, the set 휔can be embedded
in ℤ(Deﬁnition 4.5.29). This is shown by the function 휑: 휔→ℤdeﬁned by
휑(푛) = [(푛, 0)].
(5.8)
We see that 휑is one-to-one because [(푚, 0)] = [(푛, 0)] implies that 푚= 푛. The function
휑is then an order isomorphism using the relation from Deﬁnition 5.3.2 (Exercise 1).
As with 휔, we deﬁne what it means to add and multiply two integers.
DEFINITION 5.3.4
Let [(푚, 푛)], [(푢, 푣)] ∈ℤ.
∙[(푚, 푛)] + [(푢, 푣)] = [(푚+ 푢, 푛+ 푣)].
∙[(푚, 푛)] ⋅[(푢, 푣)] = [(푚푢+ 푛푣, 푚푣+ 푢푛)].
For example, the equation in ℤ,
[(5, 2)] + [(7, 1)] = [(12, 3)],
corresponds to the equation in 퐙,
3 + 6 = 9,

252
Chapter 5 AXIOMATIC SET THEORY
and the equation
[(5, 2)] ⋅[(7, 1)] = [(35 + 2, 5 + 14)] = [(37, 19)]
corresponds to the equation
3 ⋅6 = 18.
Before we check the properties of + and ⋅on ℤ, we should conﬁrm that these are
well-deﬁned. Exercise 5 is for addition. To prove that multiplication is well-deﬁned, let
[(푚, 푛)] = [(푚′, 푛′)] and [(푢, 푣)] = [(푢′, 푣′)]. Then, 푚+ 푛′ = 푚′ + 푛and 푢+ 푣′ = 푢′ + 푣.
Hence, by Theorem 5.2.20 in 휔we have that
푚푢+ 푛′푢= 푚′푢+ 푛푢,
푚푣+ 푛′푣= 푚′푣+ 푛푣,
푚′푢+ 푚′푣′ = 푚′푢′ + 푚′푣,
푛′푢+ 푛′푣′ = 푛′푢′ + 푛′푣.
Therefore,
푚푢+ 푛′푢+ 푚′푣+ 푛푣+ 푚′푢+ 푚′푣′ + 푛′푢′ + 푛′푣
equals
푚′푢+ 푛푢+ 푚푣+ 푛′푣+ 푚′푢′ + 푚′푣+ 푛′푢+ 푛′푣′,
so by Cancellation (Theorem 5.2.22),
푚푢+ 푛푣+ 푚′푣′ + 푛′푢′ = 푚푣+ 푛푢+ 푚′푢′ + 푛′푣′.
This implies by Deﬁnition 5.3.1 that
[(푚푢+ 푛푣, 푚푣+ 푛푢)] = [(푚′푢′ + 푛′푣′, 푚′푣′ + 푛′푢′)],
and this by Deﬁnition 5.3.4 implies that
[(푚, 푛)] ⋅[(푢, 푣)] = [(푚′, 푛′)] ⋅[(푢′, 푣′)].
We follow the same order of operations with + and ⋅on ℤas on 휔and also write
푚푛for 푚⋅푛.
THEOREM 5.3.5
∙The binary operations + and ⋅on ℤare associative and commutative.
∙[(0, 0)] is the additive identity for ℤ, and [(1, 0)] is its multiplicative identity.
∙For every 푎∈ℤ, there exists an additive inverse of 푎.
∙For all 푎, 푏, 푐∈ℤ, the distributive law holds.

Section 5.3 INTEGERS AND RATIONAL NUMBERS
253
PROOF
We will prove parts of the ﬁrst and third properties and leave the remaining prop-
erties to Exercise 6. Let 푎, 푏, 푐∈ℤ. This means that there exist natural numbers
푚, 푛, 푟, 푠, 푢, and 푣such that 푎= [(푚, 푛)], 푏= [(푟, 푠)], and 푐= [(푢, 푣)]. Then,
푎+ 푏+ 푐= [(푚, 푛)] + [(푟, 푠)] + [(푢, 푣)]
= [(푚+ 푟, 푛+ 푠)] + [(푢, 푣)]
= [(푚+ 푟+ 푢, 푛+ 푠+ 푣)]
= [(푚+ [푟+ 푢] , 푛+ [푠+ 푣])]
= [(푚, 푛)] + [(푟+ 푢, 푠+ 푣)]
= [(푚, 푛)] + ([(푟, 푠)] + [(푢, 푣)])
= 푎+ (푏+ 푐)
and
푎푏푐= [(푚, 푛)] ⋅[(푟, 푠)] ⋅[(푢, 푣)]
= [(푚푟+ 푛푠, 푚푠+ 푛푟)] ⋅[(푢, 푣)]
= [(푢[푚푟+ 푛푠] + 푣[푚푠+ 푛푟] , 푣[푚푟+ 푛푠] + 푢[푚푠+ 푛푟])]
= [(푢푚푟+ 푢푛푠+ 푣푚푠+ 푣푛푟, 푣푚푟+ 푣푛푠+ 푢푚푠+ 푢푛푟)]
= [(푚[푟푢+ 푠푣] + 푛[푠푢+ 푟푣] , 푚[푠푢+ 푟푣] + 푛[푟푢+ 푠푣])]
= [(푚, 푛)] ⋅[(푟푢+ 푠푣, 푠푢+ 푟푣)]
= [(푚, 푛)] ⋅([(푟, 푠)] ⋅[(푢, 푣)])
= 푎(푏푐).
To prove that every element of ℤhas an additive inverse, notice that
[(푚, 푛)] + [(푛, 푚)] = [(푚+ 푛, 푛+ 푚)] = [(0, 0)].
Therefore, if 푎= [(푚, 푛)], the additive inverse of 푎is [(푛, 푚)].
For all 푛∈ℤ, denote the additive inverse of 푛by −푛, and for all 푚, 푛, 푟, 푠∈휔, deﬁne
[(푚, 푛)] −[(푟, 푠)] = [(푚, 푛)] + [(푠, 푟)].
Rational Numbers
As the integers were built using 휔, so the set of rational numbers will be built using ℤ.
Its deﬁnition is motivated by the behavior of fractions in 퐐. For instance,
2
3 = 8
12
because 2 ⋅12 = 3 ⋅8. Imagining that the ordered pair (푚, 푛) represents the fraction
푚∕푛, we deﬁne an equivalence relation. Notice that this is essentially the relation from
Example 4.2.5. Notice that ℤis deﬁned using addition (Deﬁnition 5.3.1) while the
rational numbers are deﬁned using multiplication.

254
Chapter 5 AXIOMATIC SET THEORY
DEFINITION 5.3.6
Let 푆be the equivalence relation on ℤ× (ℤ⧵{0}) deﬁned by
(푚, 푛) 푆(푚′, 푛′) if and only if 푚푛′ = 푚′푛.
Deﬁne ℚ= [ℤ× (ℤ⧵{0})]∕푆to be the set of rational numbers.
Using Deﬁnition 5.3.6, we associate elements of 퐐with elements of ℚ:
퐐
ℚ
⋮
⋮
−2
[(−2, 1)]
−1
[(−1, 1)]
0
[(0, 1)]
1
[(1, 1)]
2
[(2, 1)]
⋮
⋮
퐐
ℚ
⋮
⋮
1∕2
[(1, 2)]
2∕3
[(2, 3)]
3∕4
[(3, 4)]
4∕5
[(4, 5)]
5∕6
[(5, 6)]
⋮
⋮
Notice that since 1, 2 ∈ℤ, the equivalence class [(1, 2)] is the name for
[([(1, 0)]푅, [(2, 0)]푅]푆= [[({∅}, ∅)]푅, [({∅, {∅}}, ∅)]푅]푆,
where 푅is the relation of Deﬁnition 5.3.1. Also,
[(1, 2)] = [(2, 4)] = [(3, 6)] = · · · .
We next deﬁne a partial order on ℚ.
DEFINITION 5.3.7
For all [(푚, 푛)], [(푚′, 푛′)] ∈ℚ, deﬁne
[(푚, 푛)] ≤[(푚′, 푛′)] if and only if 푚푛′ ≤푛푚′
and
[(푚, 푛)] < [(푚′, 푛′)] if and only if 푚푛′ < 푛푚′.
When working with ℚ, we often denote [(푚, 푛)] by 푚∕푛or 푚
푛and [(푚, 1)] by 푚. Thus,
since 2∕3 = [(2, 3)] and 7∕8 = [(7, 8)], we conclude that 2∕3 < 7∕8 because 2⋅8 < 3⋅7.
As 휔can be embedded in ℤ, so ℤcan be embedded in ℚ. The function that can be
used is
휓: ℤ→[ℤ× (ℤ⧵{0})] ∕푆
deﬁned by
휓(푛) = [(푛, 1)].
(5.9)
(See Exercise 2) Using the function 휑(5.8), we see that 휔can be embedded in ℚvia
the order isomorphism 휓◦휑.
Since (ℚ, ≤) has no least element (Exercise 3), it is not well-ordered. However, it is
a chain (Exercise 11).

Section 5.3 INTEGERS AND RATIONAL NUMBERS
255
THEOREM 5.3.8
(ℚ, ≤) is a linear order.
Lastly, we deﬁne two operations on ℚthat represent the standard operations of +
and ⋅on 퐐.
DEFINITION 5.3.9
Let [(푚, 푛)], [(푚′, 푛′)] ∈ℚ.
∙[(푚, 푛)] + [(푚′, 푛′)] = [(푚푛′ + 푚′푛, 푛푛′)].
∙[(푚, 푛)] ⋅[(푚′, 푛′)] = [(푚푚′, 푛푛′)].
That + and ⋅as given in Deﬁnition 5.3.9 are binary operations is left to Exercise 13.
As examples of these two operations, the equation in ℚ
[(1, 3)] + [(3, 4)] = [(1 ⋅4 + 3 ⋅3, 3 ⋅4)] = [(13, 12)]
corresponds to the equation in 퐐
1
3 + 3
4 = 4
12 + 9
12 = 13
12
and the equation in ℚ
[(1, 3)] ⋅[(3, 4)] = [(1 ⋅3, 3 ⋅4)] = [(3, 12)] = [(1, 4)]
corresponds to the equation in 퐐
1
3 ⋅3
4 = 3
12 = 1
4.
We follow the same order of operations with + and ⋅on ℚas on ℤand also write
푚푛for 푚⋅푛.
THEOREM 5.3.10
∙The binary operations + and ⋅on ℚare associative and commutative.
∙[(0, 1)] is the additive identity, and [(1, 1)] is the multiplicative identity.
∙Every rational number has an additive inverse, and every element of ℚ⧵{[(0, 1)]}
has a multiplicative inverse.
∙The distributive law holds.

256
Chapter 5 AXIOMATIC SET THEORY
PROOF
Since [(푚, 푛)] ⋅[(1, 1)] = [(푚⋅1, 푛⋅1)] = [(푚, 푛)] for all [(푚, 푛)] ∈ℚand
multiplication is commutative, the multiplicative identity of ℚis [(1, 1)]. Also,
because 푚≠0 and 푛≠0 implies that
[(푚, 푛)] ⋅[(푛, 푚)] = [(푚푛, 푛푚)] = [(1, 1)],
every element of ℚ⧵[(0, 1)] has a multiplicative inverse. The other properties
are left to Exercise 14.
For all 푎, 푏∈ℚwith 푏≠0, denote the additive inverse of 푎by −푎and the multiplicative
inverse of 푏by 푏−1.
Actual Numbers
We now use the elements of 휔, ℤ, and ℚas if they were the actual elements of 퐍, 퐙,
and 퐐. For example, we understand the formula 푛∈ℤto mean that 푛is an integer
of Deﬁnition 5.3.1 with all of the properties of 푛∈헭. Also, when we write that the
formula 푝(푛) is satisﬁed by some rational number 푎, we interpret this to mean that 푝(푎)
with 푎∈ℚwhere 푎has all of the properties of 푎∈퐐. This allows us to use the set
properties of a natural number, integer, or rational number when needed yet also use
the results we know concerning the actual numbers. That the partial orders and binary
operations deﬁned on 휔, ℤ, and ℚhave essentially the same properties as those on 퐍,
퐙, and 퐐allows for this association of properties to be legitimate.
Exercises
1. Prove that the function 휑(5.8) is an order isomorphism using the order of Deﬁni-
tion 5.3.2.
2. Prove that the function 휓(5.9) is an order isomorphism using the order of Deﬁni-
tion 5.3.7.
3. Show that (ℤ, ≤) and (ℚ, ≤) do not have least elements.
4. Prove that ≤is transitive on ℤ.
5. Prove that + is well-deﬁned on ℤ.
6. Complete the remaining proofs of the properties of Theorem 5.3.5.
7. Show that every nonempty subset of ℤ−= {푛: 푛∈ℤ∧푛< 0} has a greatest
element.
8. Let 푚, 푛∈ℤand 푘∈ℤ−(Exercise 7) Prove that if 푚≤푛, then 푛푘≤푚푘.
9. Prove that for every 푚, 푛∈ℤ, if 푚푛= 0, then 푚= 0 or 푛= 0. Show that this same
result also holds for ℚ.
10. The cancellation law for the integers states that for all 푚, 푛, 푘∈ℤ,
∙if 푚+ 푘= 푛+ 푘, then 푚= 푛,
∙if 푚푘= 푛푘and 푘≠0, then 푚= 푛.

Section 5.4 MATHEMATICAL INDUCTION
257
Prove that the cancellation law holds for ℤ. Prove that a similar law holds for ℚ.
11. Prove that (ℚ, ≤) is a chain.
12. Demonstrate that every nonempty set of integers with a lower bound with respect
to ≤has a least element.
13. Show that + and ⋅as given in Deﬁnition 5.3.9 are binary operations on ℚ.
14. Prove the remaining parts of Theorem 5.3.10.
15. Let 푎, 푏, 푐, 푑∈ℚ. Prove.
(a) If 0 ≤푎≤푐and 0 ≤푏≤푑, then 푎푏≤푐푑.
(b) If 0 ≤푎< 푐and 0 ≤푏< 푑, then 푎푏< 푐푑.
16. Let 푎, 푏∈ℚ. Prove that if 푏< 0, then 푎+ 푏< 푎.
17. Let 푎, 푏∈ℚ. Prove that if 푎≥0 and 푏< 1, then 푎푏≤푎.
18. Prove that between any two rational numbers is a rational number. This means that
ℚis dense. Show that this is not the case for ℤ.
19. Generalize the deﬁnition of exponentiation given in Exercise 5.2.17 to ℤ. Prove
that this deﬁnes a one-to-one function ℤ× (ℤ+ ∪{0}) →ℤ. Does the proof require
recursion (Theorem 5.2.14)?
20. Let 푚, 푛, 푘∈ℤ. Assume that 푚≤푛. Demonstrate the following.
(a) 푚+ 푘≤푛+ 푘.
(b) 푚푘≤푛푘if 0 ≤푘.
(c) 푛푘≤푚푘if 푘< 0.
(d) 푚푘≤푛푘if 푘≥0.
21. Let 휑: 휔→ℤbe the embedding deﬁned by (5.8). Deﬁne 푓: 휔× 휔→휔by
푓(푚, 푛) = 푚푛and 푔: ℤ× (ℤ+ ∪{0}) →ℤby 푔(푢, 푣) = 푢푣. Prove that for all 푚, 푛∈휔,
we have that 푔(휑(푚), 휑(푛)) = 휑(푓(푚, 푛)). Explain the signiﬁcance of this result.
5.4
MATHEMATICAL INDUCTION
Suppose that we want to prove 푝(푛) for all integers 푛greater than or equal to some 푛0.
Our previous method (Section 2.4) is to take an arbitrary 푛≥푛0 and try to prove 푝(푛).
If this is not possible, we might be tempted to try proving 푝(푛) for each 푛individually.
This is impossible because it would take inﬁnitely many steps. Instead, we combine
the results of Sections 5.2 and 5.3 and use the next theorem.
THEOREM 5.4.1 [Mathematical Induction 1]
Let 푝(푘) be a formula. For any 푛0 ∈ℤ, if
푝(푛0) ∧∀푛∈ℤ[푛≥푛0 ∧푝(푛) →푝(푛+ 1)],
then
∀푛∈ℤ[푛≥푛0 →푝(푛)].

258
Chapter 5 AXIOMATIC SET THEORY
PROOF
Assume 푝(푛0) and that 푝(푘) implies 푝(푘+ 1) for all integers 푘≥푛0. Deﬁne
퐴= {푘∈휔: 푝(푛0 + 푘)}.
Notice that 0 ∈퐴⇔푝(푛0), 1 ∈퐴⇔푝(푛0 + 1), and so on. To prove 푝(푘) for all
integers 푘≥푛0, we show that 퐴is inductive.
∙By hypothesis, 0 ∈퐴because 푝(푛0).
∙Assume 푛∈퐴. This implies that 푝(푛0 + 푛). Therefore, 푝(푛0 + 푛+ 1), so
푛+ 1 ∈퐴.
Theorem 5.4.1 gives rise to a standard proof technique known as mathematical
induction. First, prove 푝(푛0). Then, show that 푝(푛) implies 푝(푛+ 1) for every integer
푛≥푛0. Often an analogy of dominoes is used to explain this. Proving 푝(푛0) is like
tipping over the ﬁrst domino, and then proving the implication shows that the dominoes
have been set properly. This means that by modus ponens, if 푝(푛0 + 1) is true, then
푝(푛0 + 2) is true, and so forth, each falling like dominoes:
푝(푛0)
푝(푛0) →푝(푛0 + 1)
∴푝(푛0 + 1)
푝(푛0 + 1) →푝(푛0 + 2)
∴푝(푛0 + 2) · · ·
This two-step process is characteristic of proofs by mathematical induction. So
much so, the two stages have their own terminology.
∙Proving 푝(푛0) is called the basis case. It is typically the easiest part of the proof
but should, nonetheless, be explicitly shown.
∙Proving that 푝(푛) implies 푝(푛+ 1) is the induction step. For this, we typically
use direct proof, assuming 푝(푛) to show 푝(푛+ 1). The assumption is called the
induction hypothesis.
Often induction is performed to prove a formula for all positive integers, so to represent
this set, deﬁne
ℤ+ = {1, 2, 3, … }.
EXAMPLE 5.4.2
Prove 푝(푘) for all 푘∈ℤ+, where
푝(푘) := 12 + 22 + · · · + 푘2 = 푘(푘+ 1)(2푘+ 1)
6
.
Proceed by mathematical induction.
∙The basis case 푝(1) holds because
1(1 + 1)(2 ⋅1 + 1)
6
= 1(2)(3)
6
= 12.

Section 5.4 MATHEMATICAL INDUCTION
259
∙Now for the induction step, assume
12 + 22 + · · · + 푛2 = 푛(푛+ 1)(2푛+ 1)
6
.
(5.10)
This is the induction hypothesis. We must show that the equation holds for
푛+ 1. Adding (푛+ 1)2 to both sides of (5.10) gives
12 + 22 + · · · + 푛2 + (푛+ 1)2 = 푛(푛+ 1)(2푛+ 1)
6
+ (푛+ 1)2
= (푛+ 1) [푛(2푛+ 1) + 6(푛+ 1)]
6
= (푛+ 1)(2푛2 + 7푛+ 6)
6
= (푛+ 1)(푛+ 2)(2푛+ 3)
6
= (푛+ 1)([푛+ 1] + 1)(2[푛+ 1] + 1)
6
.
EXAMPLE 5.4.3
Let 푥be a positive rational number. To prove that for any 푘∈ℤ+,
(푥+ 1)푘≥푥푘+ 1,
we proceed by mathematical induction.
∙(푥+ 1)1 = 푥+ 1 = 푥1 + 1.
∙Let 푛∈ℤ+ and assume that (푥+ 1)푛≥푥푛+ 1. By multiplying both sides
of the given inequality by 푥+ 1, we have
(푥+ 1)푛(푥+ 1) ≥(푥푛+ 1)(푥+ 1)
= 푥푛+1 + 푥푛+ 푥+ 1
≥푥푛+1 + 1.
The ﬁrst inequality is true by induction (that is, by appealing to the induc-
tion hypothesis) and since 푥+ 1 is positive, and the last one holds because
푥≥0.
EXAMPLE 5.4.4
Recursively deﬁne a sequence of numbers,
푎1 = 3,
푎푛= 2푎푛−1 for all 푛∈ℤsuch that 푛> 1.

260
Chapter 5 AXIOMATIC SET THEORY
The sequence is
푎1 = 3, 푎2 = 6, 푎3 = 12, 푎4 = 24, 푎5 = 48, … ,
and we conjecture that 푎푘= 3 ⋅2푘−1 for all positive integers 푘. We prove this by
mathematical induction.
∙For the basis case, 푎1 = 3 ⋅20 = 3.
∙Let 푛> 1 and assume 푎푛= 3 ⋅2푛−1. Then,
푎푛+1 = 2푎푛= 2 ⋅3 ⋅2푛−1 = 3 ⋅2푛.
EXAMPLE 5.4.5
Use mathematical induction to prove that 푘3 < 푘! for all integers, 푘≥6.
∙First, show that the inequality holds for 푛= 6:
63 = 216 < 720 = 6!.
∙Assume 푛3 < 푛! with 푛≥6. The induction hypothesis yields three in-
equalities. Namely,
3푛2 < 푛⋅푛2 ≤푛!,
3푛< 푛⋅푛< 푛3 ≤푛!,
and
1 < 푛!.
Therefore,
(푛+ 1)3 = 푛3 + 3푛2 + 3푛+ 1
< 푛! + 푛! + 푛! + 푛!
= 4푛!
< (푛+ 1)푛!
= (푛+ 1)!.
Combinatorics
We now use mathematical induction to prove some basic results from two areas of
mathematics. The ﬁrst is combinatorics, the study of the properties that sets have
based purely on their size.
A permutation of a given set is an arrangement of the elements of the set. For
example, the number of permutations of {푎, 푏, 푐, 푑, 푒, 푓} is 720. If we were to write all
of the permutations in a list, it would look like the following:

Section 5.4 MATHEMATICAL INDUCTION
261
푎
푏
푐
푑
푒
푓
푎
푏
푐
푑
푓
푒
푎
푏
푐
푒
푑
푓
⋮
푓
푒
푑
푐
푎
푏
푓
푒
푑
푐
푏
푎
We observe that 6! = 720 and hypothesize that the number of permutations of a set
with 푘elements is 푘!. To prove it, we use mathematical induction.
∙There is only one way to write the elements of a singleton. Since 1! = 1, we have
proved the basis case.
∙Assume that the number of permutations of a set with 푛≥1 elements is 푛!. Let
퐴= {푎1, 푎2, … , 푎푛+1} be a set with 푛+ 1 elements. By induction, there are 푛!
permutations of the set {푎1, 푎2, … , 푎푛}. After writing the permutations in a list,
notice that there are 푛+ 1 columns before, between, and after each element of
the permutations:
푎1
푎2
…
푎푛
푎1
푎2
…
푎푛−1
⋮
⋮
⋮
푎푛
푎푛−1
…
푎1
To form the permutations of 퐴, place 푎푛+1 into the positions of each empty col-
umn. For example, if 푎푛+1 is put into the ﬁrst column, the following permutations
are obtained:
푎푛+1
푎1
푎2
…
푎푛
푎푛+1
푎1
푎2
…
푎푛−1
⋮
⋮
⋮
⋮
푎푛+1
푎푛
푎푛−1
…
푎1
Since there are 푛! rows with 푛+ 1 ways to add 푎푛+1 to each row, we conclude
that there are (푛+ 1)푛! = (푛+ 1)! permutations of 퐴.
This argument proves the ﬁrst theorem.
THEOREM 5.4.6
Let 푛∈ℤ+. The number of permutations of a set with 푛elements is 푛!.
Suppose that we do not want to rearrange the entire set but only subsets of it. For
example, let 퐴= {푎, 푏, 푐, 푑, 푒}. To see all three-element permutations of 퐴, look at the

262
Chapter 5 AXIOMATIC SET THEORY
following list:
푎푏푐
푎푐푏
푏푎푐
푏푐푎
푐푎푏
푐푏푎
푎푏푑
푎푑푏
푏푎푑
푏푑푎
푑푎푏
푑푏푎
푎푏푒
푎푒푏
푏푎푒
푏푒푎
푒푎푏
푒푏푎
푎푐푑
푎푑푐
푐푎푑
푐푑푎
푑푎푐
푑푐푎
푎푐푒
푎푒푐
푐푎푒
푐푒푎
푒푎푐
푒푐푎
푎푑푒
푎푒푑
푑푎푒
푑푒푎
푒푎푑
푒푑푎
푏푐푑
푏푑푐
푐푏푑
푐푑푏
푑푏푐
푑푐푏
푏푐푒
푏푒푐
푐푒푏
푐푏푒
푒푏푐
푒푐푏
푏푑푒
푏푒푑
푑푏푒
푑푒푏
푒푏푑
푒푑푏
푐푑푒
푐푒푑
푑푐푒
푑푒푐
푒푐푑
푒푑푐
There are 60 arrangements because there are 5 choices for the ﬁrst entry. Once that is
chosen, there are only 4 left for the second, and then 3 for the last. We calculate that as
60 = 5 ⋅4 ⋅3 = 5 ⋅4 ⋅3 ⋅2 ⋅1
2 ⋅1
=
5!
(5 −3)!.
Generalizing, we deﬁne for all 푛, 푟∈휔,
푛푃푟=
푛!
(푛−푟)!,
and we conclude the following theorem.
THEOREM 5.4.7
Let 푟, 푛∈ℤ+. The number of permutations of 푟elements from a set with 푛
elements is 푛푃푟.
Now suppose that we only want to count subsets. For example, 퐴= {푎, 푏, 푐, 푑, 푒}
has 10 subsets of three elements. They are the following:
{푎, 푏, 푐}
{푎, 푏, 푑}
{푎, 푏, 푒}
{푎, 푐, 푑}
{푎, 푐, 푒}
{푎, 푑, 푒}
{푏, 푐, 푑}
{푏, 푐, 푒}
{푏, 푑, 푒}
{푐, 푑, 푒}
The number of subsets can be calculated by considering the next grid.
푎푏푐
푎푐푏
푏푎푐
푏푐푎
푐푎푏
푐푏푎
푎푏푑
푎푑푏
푏푎푑
푏푑푎
푑푎푏
푑푏푎
푎푏푒
푎푒푏
푏푎푒
푏푒푎
푒푎푏
푒푏푎
푎푐푑
푎푑푐
푐푎푑
푐푑푎
푑푎푐
푑푐푎
푎푐푒
푎푒푐
푐푎푒
푐푒푎
푒푎푐
푒푐푎
푎푑푒
푎푒푑
푑푎푒
푑푒푎
푒푎푑
푒푑푎
푏푐푑
푏푑푐
푐푏푑
푐푑푏
푑푏푐
푑푐푏
푏푐푒
푏푒푐
푐푒푏
푐푏푒
푒푏푐
푒푐푏
푏푑푒
푏푒푑
푑푏푒
푑푒푏
푒푏푑
푒푑푏
푐푑푒
푐푒푑
푑푐푒
푑푒푐
푒푐푑
푒푑푐
⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟
3! columns
⎫
⎪
⎪
⎪
⎪
⎪
⎬
⎪
⎪
⎪
⎪
⎪⎭
10 rows

Section 5.4 MATHEMATICAL INDUCTION
263
There are 5푃3 permutations with three elements from 퐴. They are found as the entries
in the grid. However, since we are looking at subsets, we do not want to count 푎푏푐
as diﬀerent from 푎푐푏because {푎, 푏, 푐} = {푎, 푐, 푏}. For this reason, all elements in any
given row of the grid are considered as one subset. Each row has 6 = 3! entries because
that is the number of permutations of a set with three elements. Hence, multiplying the
number of rows by the number of columns gives
5푃3 = 10(3!).
Therefore,
5푃3
3! =
5!
3!(5 −3)! =
5!
3!2! = 10.
A generalization of this calculation leads to the formula for the arbitrary binomial
coeﬃcient,
(
푛
푟
)
=
푛!
푟!(푛−푟)!,
where 푛, 푟∈휔. Read (푛
푟
) as “푛choose 푟.” A generalization of the argument leads to
the next theorem.
THEOREM 5.4.8
Let 푛, 푟∈ℤ+. The number of subsets of 푟elements from a set with 푛elements
is (푛
푟
).
When we expand (푥+ 1)3, we ﬁnd that
(푥+ 1)3 = 푥3 + 3푥2 + 3푥2 + 1 =
3
∑
푟=0
(
3
푟
)
푥3−푟1푟.
To prove this for any binomial (푥+ 푦)푛, we need the following equation. It was proved
by Blaise Pascal (1653). The proof is Exercise 7.
LEMMA 5.4.9 [Pascal’s Identity]
If 푛, 푟∈휔so that 푛≥푟,
(
푛
푟
)
+
(
푛
푟−1
)
=
(
푛+ 1
푟
)
.
THEOREM 5.4.10 [Binomial Theorem]
Let 푛∈ℤ+. Then,
(푥+ 푦)푛=
푛
∑
푟=0
(
푛
푟
)
푥푛−푟푦푟.

264
Chapter 5 AXIOMATIC SET THEORY
PROOF
∙Since (1
0
) = (1
1
) = 1,
(푥+ 푦)1 =
(
1
0
)
푥+
(
1
1
)
푦=
1
∑
푟=0
(
1
푟
)
푥1−푟푦푟.
∙Assume for 푘∈ℤ+,
(푥+ 푦)푘=
푘
∑
푟=0
(
푘
푟
)
푥푘−푟푦푟.
Then,
(푥+ 푦)푘+1 = (푥+ 푦)(푥+ 푦)푘= (푥+ 푦)
푘
∑
푟=0
(
푘
푟
)
푥푘−푟푦푟.
Multiplying the (푥+ 푦) term through the summation yields
푘
∑
푟=0
(
푘
푟
)
푥푘−푟+1푦푟+
푘
∑
푟=0
(
푘
푟
)
푥푘−푟푦푟+1.
Taking out the (푘+ 1)-degree terms and shifting the index on the second sum-
mation gives
푥푘+1 +
푘
∑
푟=1
(
푘
푟
)
푥푘−푟+1푦푟+
푘
∑
푟=1
(
푘
푟−1
)
푥푘−푟+1푦푟+ 푦푛+1,
which using Pascal’s identity (Lemma 5.4.9) equals
푥푘+1 +
푘
∑
푟=1
(
푘+ 1
푟
)
푥푘−푟+1푦푟+ 푦푘+1,
and this is
푘+1
∑
푟=0
(
푘+ 1
푟
)
푥푘+1−푟푦푟.
Euclid’s Lemma
Our second application of mathematical induction comes from number theory. It is the
study of the greatest common divisor (Deﬁnition 3.3.11). We begin with a lemma.
LEMMA 5.4.11
Let 푎, 푏, 푐∈ℤsuch that 푎≠0 or 푏≠0. If 푎∣푏푐and gcd(푎, 푏) = 1, then 푎∣푐.

Section 5.4 MATHEMATICAL INDUCTION
265
PROOF
Assume 푎∣푏푐and gcd(푎, 푏) = 1. Then, 푏푐= 푎푘for some 푘∈ℤ. By Theo-
rem 4.3.32, there exist 푚, 푛∈ℤsuch that
1 = 푚푎+ 푛푏.
Therefore, 푎∣푐because
푐= 푐푚푎+ 푐푛푏= 푐푚푎+ 푛푎푘= 푎(푐푚+ 푛푘).
Suppose that 푝∈ℤis a prime (Example 2.4.18) that does not divide 푎. We show
that gcd(푎, 푝) = 1. Take 푑> 0 and assume 푑∣푎and 푑∣푝. Since 푝is prime, 푑= 1 or
푑= 푝. Since 푝∤푎, we conclude that 푑must equal 1, which means gcd(푎, 푝) = 1. Use
this to prove the next result attributed to Euclid (Elements VII.30).
THEOREM 5.4.12 [Euclid’s Lemma]
An integer 푝> 1 is prime if and only if 푝∣푎푏implies 푝∣푎or 푝∣푏for all
푎, 푏∈ℤ.
PROOF
∙Let 푝be prime. Suppose 푝∣푎푏but 푝∤푎. Then, gcd(푎, 푝) = 1. Therefore, 푝∣푏
by Theorem 5.4.11.
∙Let 푝> 1. Suppose 푝satisﬁes the condition,
∀푎∀푏(푝∣푎푏→푝∣푎∨푝∣푏).
Assume 푝is not prime. This means that there are integers 푐and 푑so that 푝= 푐푑
with 1 < 푐≤푑< 푝. Hence, 푝∣푐푑. By hypothesis, 푝∣푐or 푝∣푑. However,
since 푐, 푑< 푝, 푝can divide neither 푐nor 푑. This is a contradiction. Hence, 푝
must be prime.
Since 6 divides 3 ⋅4 but 6 ∤3 and 6 ∤4, the lemma tells us that 6 is not prime. On
the other hand, if 푝is a prime that divides 12, then 푝divides 4 or 3. This means that
푝= 2 or 푝= 3.
The next theorem is a generalization of Euclid’s lemma. Its proof uses mathematical
induction.
THEOREM 5.4.13
Let 푝be prime and 푎푖∈ℤfor 푖= 0, 1, … , 푛−1. If 푝∣푎0푎1 · · · 푎푛−1, then 푝∣푎푗
for some 푗= 0, 1, … , 푛−1.
PROOF
∙The case when 푛= 1 is trivial because 푝divides 푎0 by deﬁnition of the product.
∙Assume if 푝∣푎0푎1 · · · 푎푛−1, then 푝∣푎푗for some 푗= 0, 1, … , 푛−1. Suppose
푝∣푎0푎1 · · · 푎푛. Then, by Lemma 5.4.12,
푝∣푎0푎1 · · · 푎푛−1 or 푝∣푎푛.

266
Chapter 5 AXIOMATIC SET THEORY
If 푝∣푎푛, we are done. Otherwise, 푝divides 푎0푎1 · · · 푎푛−1. Hence, 푝divides one
of the 푎푖by induction.
Exercises
1. Let 푛∈ℤ+. Prove.
(a) 1 + 2 + 3 + · · · + 푛= 푛(푛+ 1)
2
(b) 1 + 3 + 5 + · · · + (2푛−1) = 푛2
(c) 12 + 32 + 52 + · · · + (2푛−1)2 = 푛(2푛−1)(2푛+ 1)
3
(d) 13 + 23 + 33 + · · · + 푛3 =
[푛(푛+ 1)
2
]2
(e) 1 + 푟+ 푟2 + · · · + 푟푛= 1 −푟푛+1
1 −푟
(푟≠1)
(f)
1 ⋅1! + 2 ⋅2! + · · · + 푛⋅푛! = (푛+ 1)! −1
(g)
1
2! + 2
3! + · · · +
푛
(푛+ 1)! = 1 −
1
(푛+ 1)!
(h) 2 ⋅6 ⋅10 ⋅14 ⋅· · · ⋅(4푛−2) = (2푛)!
푛!
2. Prove for all positive integers 푛.
(a)
푛
∑
푖=1
푖(푖+ 1) = 푛(푛+ 1)(푛+ 2)
3
(b)
푛
∑
푖=1
1
(2푖−1)(2푖+ 1) =
푛
2푛+ 1
3. Let 푛∈ℤ+. Prove.
(a) 푛< 2푛
(b) 푛! ≤푛푛
(c)
푛
∑
푖=1
1
푖2 ≤2 −1
푛
(d)
1
2 + 2
22 + 3
23 + · · · + 푛
2푛≤2 −푛
2푛
4. Let 푛∈ℤ. Prove.
(a) 푛2 < 2푛for all 푛≥5.
(b) 2푛< 푛! for all 푛≥4.
(c) 푛2 < 푛! for all 푛≥4.
5. For 푛∈ℤ+, prove that if 퐴has 푛elements, P(퐴) has 2푛elements.
6. Prove that the number of lines in a truth table with 푛propositional variables is 2푛.
7. Demonstrate Pascal’s identity (Lemma 5.4.9).

Section 5.4 MATHEMATICAL INDUCTION
267
8. For all integers 푛≥푟≥0, prove the given equations.
(a)
(
푛
0
)
=
(
푛
푛
)
= 1.
(b)
(
푛
푟
)
=
(
푛
푛−푟
)
.
9. Let 푛, 푟∈ℤ+ with 푛≥푟. Prove.
(a)
(
푟
푟
)
+
(
푟+ 1
푟
)
+ · · · +
(
푛
푟
)
=
(
푛+ 1
푟+ 1
)
(b) 12 + 32 + 52 + · · · + (2푛−1)2 =
(
2푛+ 1
3
)
10. Let 푛≥2 be an integer and prove the given equations.
(a)
푛
∑
푟=1
푟
(
푛
푟
)
= 푛2푛−1
(b)
푛
∑
푟=1
(−1)푟−1푟
(
푛
푟
)
= 0
11. Let 푛and 푟be positive integers and 푛≥푟. Use induction to show the given
equations.
(a)
(
푟
푟
)
+
(
푟+ 1
푟
)
+ · · · +
(
푛
푟
)
=
(
푛+ 1
푟+ 1
)
(b) 12 + 32 + 52 + · · · + (2푛−1)2 =
(
2푛+ 1
3
)
12. Prove the following for all 푛∈휔.
(a) 5 ∣푛5 −푛
(b) 9 ∣푛3 + (푛+ 1)3 + (푛+ 2)3
(c) 8 ∣52푛+ 7
(d) 5 ∣33푛+1 + 2푛+1
13. If 푝is prime and 푎and 푏are positive integers such that 푎+ 푏= 푝, prove that
gcd(푎, 푏) = 1.
14. Prove for all 푛∈ℤ+, there exist 푛consecutive composite integers (Example 2.4.18)
by showing that (푛+ 1)! + 2, (푛+ 1)! + 3, … , (푛+ 1)! + 푛+ 1 are composite.
15. Prove.
(a) If 푎≠0, then 푎⋅gcd(푏, 푐) = gcd(푎푏, 푎푐).
(b) Prove if gcd(푎푖, 푏) = 1 for 푖= 1, … , 푛, then gcd(푎1 ⋅푎2 · · · 푎푛, 푏) = 1).
16. For 푘∈ℤ+, let 푎0, 푎1, … , 푎푘−1 ∈휔, not all equal to zero. Deﬁne
푔= gcd(푎0, 푎1, … , 푎푘−1)
to mean that 푔is the greatest integer such that 푔∣푎푖for all 푖= 0, 1, … , 푘−1. Assuming
푘≥3, prove the given equations.

268
Chapter 5 AXIOMATIC SET THEORY
(a) gcd(푎0, 푎1, … , 푎푘−1) = gcd(푎0, 푎1, … , 푎푘−3, gcd(푎푘−2, 푎푘−1))
(b) gcd(푐푎0, 푐푎1, … , 푐푎푘−1) = 푐gcd(푎0, 푎1, … , 푎푘−1) for all integers 푐≠0
5.5
STRONG INDUCTION
Suppose we want to ﬁnd an equation for the terms of a sequence deﬁned recursively in
which each term is based on two or more previous terms. To prove that such an equation
is correct, we modify mathematical induction. Remember the domino picture that we
used to explain how mathematical induction works (page 258). The ﬁrst domino is
tipped causing the second to fall, which in turn causes the third to fall. By the time the
sequence of falls reaches the 푛+ 1 domino, 푛dominoes have fallen. This means that
sentences 푝(1) through 푝(푛) have been proved true. It is at this point that 푝(푛+ 1) is
proved. This is the intuition behind the next theorem. It is sometimes called strong
induction.
THEOREM 5.5.1 [Mathematical Induction 2]
Let 푝(푘) be a formula. For any 푛0 ∈ℤ, if
푝(푛0) ∧∀푘(푘∈휔∧[∀푙(푙∈휔∧[푙≤푘→푝(푛0 + 푙)]) →푝(푛0 + 푘+ 1)]),
then
∀푘[푘∈ℤ∧푘≥푛0 →푝(푘)].
PROOF
Assume 푝(푛0) and
푝(푛0) ∧푝(푛0 + 1) ∧· · · ∧푝(푛0 + 푘) →푝(푛0 + 푘+ 1)
(5.11)
for 푘∈휔. Deﬁne
푞(푘) := 푝(푛0) ∧푝(푛0 + 1) ∧· · · ∧푝(푛0 + 푘).
We proceed with the induction.
∙Since 푝(푛0) holds, we have 푞(0).
∙Assume 푞(푛) with 푛≥0. By deﬁnition of 푞(푛), we have 푝(푛0) through
푝(푛0 + 푛). Thus, 푝(푛0 + 푛+ 1) by (5.11) from which 푞(푛+ 1) follows.
Therefore, 푞(푛) is true for all 푛∈휔(Theorem 5.4.1). Hence, 푝(푛) for all integers
푛≥푛0.
Fibonacci Sequence
Leonardo of Pisa (known as Fibonacci) in his 1202 work Liber abaci posed a problem
about how a certain population of rabbits increases with time (Fibonacci and Sigler
2002). Each rabbit that is at least 2 months old is considered an adult. It is a young

Section 5.5 STRONG INDUCTION
269
rabbit if it is a month old. Otherwise, it is a baby. The rules that govern the population
are as follows:
∙No rabbits die.
∙The population starts with a pair of adult rabbits.
∙Each pair of adult rabbits will bear a new pair each month.
The population then grows according to the following table:
Month
Adult Pairs
Young Pairs
Baby Pairs
1
1
0
1
2
1
1
1
3
2
1
2
4
3
2
3
5
5
3
5
6
8
5
8
It appears that the number of adult (or baby) pairs at month 푛is given by the sequence,
1, 1, 2, 3, 5, 8, 13, 21, 34, … .
This is known as the Fibonacci sequence, and each term of the sequence is called a
Fibonacci number. Let 퐹푛denote the 푛th term of the sequence. So
퐹1 = 1, 퐹2 = 1, 퐹3 = 2, 퐹4 = 3, 퐹5 = 5, 퐹6 = 8, … .
Each term of the sequence can be calculated recursively by
퐹1 = 1,
퐹2 = 1,
퐹푛= 퐹푛−1 + 퐹푛−2 (푛> 2).
(5.12)
Since we have only checked a few terms, we have not proved that 퐹푛is equal to the
number of adult pairs in the 푛th month. To show this, we use strong induction. Since
the recursive deﬁnition starts by explicitly deﬁning 퐹1 and 퐹2, the basis case for the
induction will prove that the formula holds for 푛= 1 and 푛= 2.
∙From the table, in each of the ﬁrst 2 months, there is exactly one adult pair of
rabbits. This coincides with 퐹1 = 1 and 퐹2 = 1 in (5.12).
∙Let 푛> 2, and assume that 퐹푘equals the number of adult pairs in the 푘th month
for all 푘≤푛. Because of the third rule, the number of pairs of adults in any
month is the same as the number of adult pairs in the previous month plus the

270
Chapter 5 AXIOMATIC SET THEORY
number of baby pairs 2 months prior. Therefore,
# of adult pairs
in month 푛+ 1
=
# of adult pairs
in month 푛
+
# of young pairs
in month 푛
=
# of adult pairs
in month 푛
+
# of baby pairs
in month 푛−1
=
# of adult pairs
in month 푛
+
# of adult pairs
in month 푛−1
= 퐹푛+ 퐹푛−1
= 퐹푛+1.
It turns out that the Fibonacci sequence is closely related to another famous object
of study in the history of mathematics. Letting 푛≥1, deﬁne
푎푛= 퐹푛+1
퐹푛
.
The ﬁrst seven terms of this sequence are
푎1 = 1∕1 = 1,
푎2 = 2∕1 = 2,
푎3 = 3∕2 = 1.5,
푎4 = 5∕3 ≈1.667,
푎5 = 8∕5 = 1.6,
푎6 = 13∕8 = 1.625,
푎7 = 21∕13 ≈1.615.
This sequence has a limit that we call 휏. To ﬁnd this limit, notice that
퐹푛+1
퐹푛
= 퐹푛+ 퐹푛−1
퐹푛
= 1 + 퐹푛−1
퐹푛
.
Because 푎푛−1 = 퐹푛∕퐹푛−1 when 푛> 1,
푎푛= 1 +
1
푎푛−1
,
and therefore,
푎푛−1 −
1
푎푛−1
= 0.
Because
lim
푛→∞푎푛= lim
푛→∞푎푛−1 = 휏,
we conclude that
휏2 −휏−1 = 0.
(5.13)

Section 5.5 STRONG INDUCTION
271
Therefore, (1 ±
√
5)∕2 are the solutions to (5.13), but since 퐹푛+1∕퐹푛> 0, we take the
positive value and ﬁnd that
휏= 1 +
√
5
2
.
The number 휏is called the golden ratio. It was considered by the ancient Greeks to
represent the ratio of the sides of the most beautiful rectangle.
EXAMPLE 5.5.2
Prove 퐹푛≤휏푛−1 when 푛≥2 using strong induction.
∙Since 퐹2 = 1 < 휏1 ≈1.618, the inequality holds for 푛= 2.
∙Let 푛≥3, and assume that 퐹푘≤휏푘−1 for all 푘such that 2 ≤푘≤푛.
Because 휏−1 = (
√
5 −1)∕2 and 휏−2 = (3 −
√
5)∕2,
휏−1 + 휏−2 = 1.
Therefore, the induction hypothesis gives
퐹푛+1 = 퐹푛+ 퐹푛−1 ≤휏푛−1 + 휏푛−2 = 휏푛(휏−1 + 휏−2) = 휏푛.
Unique Factorization
Theorem 5.4.13 states that if a prime divides an integer, it divides one of the factors of
the integer. It appears reasonable that any integer can then be written as a product that
includes all of its prime divisors. For example, we can write 126 = 2 ⋅3 ⋅3 ⋅7, and this
is essentially the only way in which we can write 126 as a product of primes. All of
this is summarized in the next theorem. It is also known as the fundamental theorem
of arithmetic. It is the reason the primes are important. They are the building blocks
of the integers.
THEOREM 5.5.3 [Unique Factorization]
If 푛> 1, there exists a unique sequence of primes 푝0 ≤푝1 ≤· · · ≤푝푘(푘∈휔)
such that 푛= 푝0푝1 · · · 푝푘.
PROOF
Prove existence with strong induction on 푛.
∙When 푛= 2, we are done since 2 is prime.
∙Assume that 푘can be written as the product of primes as described above
for all 푘such that 2 ≤푘< 푛. If 푛is prime, we are done as in the basis
case. So suppose 푛is composite. Then, there exist integers 푎and 푏such
that 푛= 푎푏and 1 < 푎≤푏< 푛. By the induction hypothesis, we can write
푎= 푞0푞1 · · · 푞푢

272
Chapter 5 AXIOMATIC SET THEORY
and
푏= 푟0푟1 · · · 푟푣,
where the 푞푖and 푟푗are primes. Now place these primes together in increas-
ing order and relabel them as
푝0 ≤푝1 ≤· · · ≤푝푘
with 푘= 푢+ 푣. Then, 푛= 푝0푝1 · · · 푝푘as desired.
For uniqueness, suppose that there are two sets of primes
푝0 ≤푝1 ≤· · · ≤푝푘and 푞0 ≤푞1 ≤· · · ≤푞푙
so that
푛= 푝0푝1 · · · 푝푘= 푞0푞1 · · · 푞푙.
By canceling, if necessary, we can assume the sides have no common primes. If
the cancellation yields 1 = 1, the sets of primes are the same. In order to obtain a
contradiction, assume that there is at least one prime remaining on the left-hand
side. Suppose it is 푝0. If the product on the right equals 1, then 푝0 ∣1, which is
impossible. If there are primes remaining on the right, 푝0 divides one of them
by Lemma 5.4.12. This is also a contradiction, since the sides have no common
prime factors because of the cancellation. Hence, the two sequences must be the
same.
Unique Factorization allows us to make the following deﬁnition.
DEFINITION 5.5.4
Let 푛∈ℤ+. If 푝0, 푝1, … , 푝푘−1 are distinct primes and 푟0, 푟1, … , 푟푘−1 are natural
numbers such that
푛= 푝푟0
0 푝푟1
1 · · · 푝푟푘−1
푘−1,
then 푝푟0
0 푝푟1
1 · · · 푝푟푘−1
푘−1 is called a prime power decomposition of 푛.
EXAMPLE 5.5.5
Consider the integer 360. It has 23⋅32⋅51 as a prime power decomposition. If the
exponents are limited to positive integers, the expression is unique. In this sense,
we can say that 23 ⋅32 ⋅51 is the prime power decomposition of 360. However,
there are times when primes need to be included in the product that are not factors
of the integer. By setting the exponent to zero, these primes can be included. For
example, we can also write 360 as 23 ⋅32 ⋅51 ⋅70.
EXAMPLE 5.5.6
Suppose 푛∈ℤsuch that 푛> 1. Use unique factorization (Theorem 5.5.3)
to prove that 푛is a perfect square if and only if all powers in a prime power
decomposition of 푛are even.

Section 5.5 STRONG INDUCTION
273
∙Let 푛be a perfect square. This means that 푛= 푘2 for some integer 푘> 1.
Write a prime power decomposition of 푘,
푘= 푝푟0
0 푝푟1
1 · · · 푝푟푙−1
푙−1 .
Therefore,
푛= 푘2 = 푝2푟0
0 푝2푟1
1
· · · 푝2푟푙−1
푙−1 .
∙Assume all the powers are even in a prime power decomposition of 푛.
Namely,
푛= 푝푟0
0 푝푟1
1 · · · 푝푟푙−1
푙−1 ,
where there exists 푢푖∈ℤso that 푟푖= 2푢푖for 푖= 0, 1, … , 푙−1. Thus,
푛= 푝2푢0
0 푝2푢1
1
· · · 푝2푢푙−1
푙−1
= (푝푢0
0 푝푢1
1 · · · 푝푢푙−1
푙−1
)2 ,
a perfect square.
Exercises
1. Given each recursive deﬁnition, prove the formula for 푎푛holds for all positive inte-
gers 푛.
(a) If 푎1 = −1 and 푎푛= −푎푛−1, then 푎푛= (−1)푛.
(b) If 푎1 = 1 and 푎푛= 1∕3푎푛−1, then 푎푛= (1∕3)푛−1.
(c) If 푎1 = 0, 푎2 = −6, and 푎푛= 5푎푛−1 −6푎푛−2, then
푎푛= 3 ⋅2푛−2 ⋅3푛.
(d) If 푎1 = 4, 푎2 = 12, and 푎푛= 4푎푛−1 −2푎푛−2, then
푎푛= (2 +
√
2)푛+ (2 −
√
2)푛.
(e) If 푎1 = 1, 푎2 = 5, and 푎푛1 = 푎푛+ 2푎푛−1 for all 푛> 2, then
푎푛= 2푛+ (−1)푛.
(f)
If 푎1 = 3, 푎2 = −3, 푎3 = 9, and 푎푛= 푎푛−1 + 4푎푛−2 −4푎푛−3, then
푎푛= 1 −(−2)푛.
(g) If 푎1 = 3, 푎2 = 10, 푎3 = 21, and 푎푛= 3푎푛−1 −3푎푛−2 + 푎푛−3, then
푎푛= 푛+ 2푛2.
2. Let 푔1 = 푎, 푔2 = 푏, and 푔푛= 푔푛−1 + 푔푛−2 for all 푛> 2. This sequence is called the
generalized Fibonacci sequence. Show that 푔푛= 푎푓푛−2 + 푏푓푛−1 for all 푛> 2.

274
Chapter 5 AXIOMATIC SET THEORY
3. Let 푛> 0 be an integer. Prove.
(a) 퐹푛+2 > 휏푛
(b)
푛
∑
푖=1
퐹푖= 퐹푛+2 −1
4. Prove that Theorem 5.5.1 implies Theorem 5.4.1.
5. Let 휎= (1 −
√
5)∕2 and demonstrate that 퐹푛= 휏푛−휎푛
√
5
.
6. Let 푛≥1 and 푎∈ℤ. Prove.
(a) 푎푛+1 −1 = (푎+ 1)(푎푛−1) −푎(푎푛−1 −1).
(b) 푎푛−1 = (푎−1)(푎푛−1 + 푎푛−2 + · · · + 푎+ 1).
7. For all 푛∈휔, prove that 12 divides 푛4 −푛2 (Deﬁnition 2.4.2).
8. Assume 푒∣푎and 푒∣푏. Write prime power decompositions for 푎and 푏:
푎= 푝푟0
0 푝푟1
1 · · · 푝푟푘−1
푘−1
and
푏= 푝푠0
0 푝푠1
1 · · · 푝푠푘−1
푘−1 .
Prove that there exist 푡0, 푡1, … 푡푘−1 ∈휔such that
푒= 푝푡0
0 푝푡1
1 · · · 푝푡푘−1
푘−1,
푡푖≤푟푖, and 푡푖≤푠푖for all 푖= 0, 1, … , 푘−1.
9. Prove that 푎3 ∣푏2 implies 푎∣푏for all 푎, 푏∈ℤ.
10. Let 푎∈ℤ+. Let 푎have the property that for all primes 푝, if 푝∣푎, then 푝2 ∣푎.
Prove that 푎is the product of a perfect square and a perfect cube.
11. Prove that gcd(퐹푛, 퐹푛+2) = 1 for all 푛∈ℤ+.
5.6
REAL NUMBERS
As ℤis deﬁned using 휔and ℚis deﬁned using ℤ, the set analog to 퐑is deﬁned using
ℚ. We start with a deﬁnition.
DEFINITION 5.6.1
Let (퐴, ≼) be a poset. The set 퐵is an initial segment of 퐴when 퐵⊆퐴and
for all 푎, 푏∈퐴, if 푎≼푏and 푏∈퐵, then 푎∈퐵.
(5.14)
An initial segment 퐵of 퐴is proper if 퐵≠퐴.
The condition (5.14) is called downward closed. Notice that for all 푎∈퐑, both
(−∞, 푎) and (−∞, 푎] are initial segments of (퐑, ≤). A poset is an initial segment of
itself, but it is not proper.

Section 5.6 REAL NUMBERS
275
DEFINITION 5.6.2
Let (퐴, ≼) be a poset with 푏∈퐴. Deﬁne
헌햾헀≼(퐴, 푏) = {푎∈퐴: 푎≺푏}.
For example,
헌햾헀≤(퐑, 5) = (−∞, 5)
in (퐑, ≤), and
헌햾헀≤(ℤ, 5) = {… , 0, 1, 2, 3, 4}
in (ℤ, ≤). Both of these are proper initial segments. Notice that every initial segment
of ℤis of the form 헌햾헀≤(ℤ, 푛) for some 푛∈ℤ.
Neither ℤnor ℚare well-ordered by ≤. If a poset is well-ordered, its initial segments
have a particular form.
LEMMA 5.6.3
If (퐴, ≼) is a well-ordered set and 퐵is a proper initial segment of 퐴, there exists
a unique 푚∈퐴such that 퐵= 헌햾헀≼(퐴, 푚).
PROOF
Suppose that (퐴, ≼) is well-ordered and 퐵⊆퐴is a proper initial segment. First,
note that 퐴⧵퐵is not empty since 퐵is proper. Thus, 퐴⧵퐵contains a least
element 푚because ≼well-orders 퐴.
∙Let 푎∈퐵, which implies that 푎≺푚. Otherwise, 푚would be an element of
퐵because 퐵is downward closed. Hence, 푎∈헌햾헀≼(퐴, 푚), which implies
that 퐵⊆헌햾헀≼(퐴, 푚).
∙Conversely, take 푎∈헌햾헀≼(퐴, 푚), which means 푎≺푚. If 푎∈퐴⧵퐵, then
푚≼푎because 푚is the least element of 퐴⧵퐵, so 푎must be an element of
퐵by the trichotomy law (Theorem 4.3.21). Thus, 헌햾헀≼(퐴, 퐵) ⊆퐵.
To prove uniqueness, let 푚′ ∈퐴such that 푚≠푚′ and 퐵= 헌햾헀≼(퐴, 푚′). If
푚≺푚′, then 푚∈헌햾헀≼(퐴, 푚′), and if 푚′ ≺푚, then 푚′ ∈퐵= 헌햾헀≼(퐴, 푚). Both
cases are impossible.
Dedekind Cuts
A basic property of 퐑is that it is complete. This means that
every nonempty set of real numbers with an upper bound
has a real least upper bound
(Deﬁnition 4.3.12). For example, the set
퐴=
{
1 −1
푛: 푛∈퐙+}

276
Chapter 5 AXIOMATIC SET THEORY
is bounded from above, and its least upper bound is 1. Also,
퐵= {3, 3.1, 3.14, 3.141, 3.1415, 3.14159, … }
is bounded from above, and its least upper bound is 휋. Observe that both 퐴and 퐵are
sets of rational numbers. The set 퐴has a rational least upper bound, but 퐵does not.
This shows that the rational numbers are not complete. Intuitively, the picture is that
of a number line. If 퐑is graphed, there are no holes because of completeness, but if
퐐is graphed, there are holes. These holes represent the irrational numbers that when
ﬁlled, complete the rational numbers resulting in the set of reals. We use this idea to
construct a model of the real numbers from ℚ(Dedekind 1901).
DEFINITION 5.6.4
A set x of rational numbers is a Dedekind cut (or a real number) if x is a subset
of (ℚ, ≤) such that
∙x is nonempty,
∙x is a proper initial segment of ℚ,
∙x does not have a greatest element.
Denote the set of Dedekind cuts by ℝ.
By Lemma 5.6.3, some Dedekind cuts are of the form 헌햾헀≤(ℚ, 푎) for some 푎∈ℚ. In
this case, write a = 헌햾헀≤(ℚ, 푎). Therefore, ℚcan be embedded in ℝusing the function
푓: ℚ→ℝdeﬁned by 푓(푎) = a (Exercise 14). The elements of ℝ⧵ran(푓) are the
irrational numbers.
EXAMPLE 5.6.5
∙The Dedekind cut that corresponds to the integer 7 is
7 = 헌햾헀≤(ℚ, 7).
Note that there is no gap between 7 and ℚ⧵7 = {푎∈ℚ: 푎≥7}.
∙The Dedekind cut x that corresponds to 휋includes
{3, 3.1, 3.14, 3.141, 3.1415, 3.14159, … }
as a subset. Notice that 휋∉x and 휋∉ℚ⧵x because 휋is not rational. This
means that we imagine a gap between x and ℚ⧵x. This gap is where 휋is located.
Imagine that only the rational numbers have been placed on the number line (Sec-
tion 5.3). For every Dedekind cut x, call the point on the number line where x and
ℚ⧵x meet a cut. Following our intuition, if the least upper bound of x is an element of
ℚ⧵x, there is a point at the cut [Figure 5.1(a)]. This means that x represents a rational
number, a point already on the number line. However, if the least upper bound of x is

Section 5.6 REAL NUMBERS
277
ℚ
x
ℚ  x
The cut
(a) A rational number
ℚ
x
ℚ  x
The cut
(b) An irrational number
Figure 5.1
The cuts of two types of numbers.
not an element of ℚ⧵x, there is no point at the cut [Figure 5.1(b)]. This means that
x represents an irrational number. To obtain all real numbers, a point must be placed
at each cut without a point, ﬁlling the entire number line. Therefore, the ﬁrst step in
showing that ℝis a suitable model for 퐑is to prove that every set of Dedekind cuts
with an upper bound must must have a least upper bound that is a Dedekind cut. That
is, ℝmust be shown to be complete. To accomplish this, we ﬁrst deﬁne on order on ℝ.
DEFINITION 5.6.6
Let x, y ∈ℝ. Deﬁne x ≤y if and only if x ⊆y, and deﬁne x < y to mean x ≤y
and x ≠y.
For example, 3 ≤4 in ℝbecause 3 = 헌햾헀≤(ℚ, 3) and 4 = 헌햾헀≤(ℚ, 4). Because the order
on ℚis linear (Theorem 5.3.8), it is left to Exercise 5 to prove that we have deﬁned a
linear order on ℝ.
THEOREM 5.6.7
(ℝ, ≤) is a linear order but it is not a well-order.
Now to prove that ℝis complete using the order of Deﬁnition 5.6.6.
THEOREM 5.6.8
Every nonempty subset of ℝwith an upper bound has a real least upper bound.
PROOF
Let ℱ≠∅and ℱ⊆ℝ. Let m ∈ℝbe an upper bound of ℱ. By Example 4.3.14,
⋃ℱis the least upper bound of ℱ. We show that ⋃ℱ∈ℝ.
∙Take x ∈ℱ. Since Dedekind cuts are nonempty, x ≠∅, which implies
that ⋃ℱ≠∅.
∙By hypothesis, x ⊆m for all x ∈ℱ. Hence, ⋃ℱ⊆m. Since m ∈ℝ, we
have that m ≠ℚ, so ⋃ℱ⊂ℚ.
∙Let 푥∈⋃ℱand 푦≤푥. Thus, 푥∈a for some Dedekind cut a ∈ℱ.
Since a is downward closed, 푦∈a, so 푦∈⋃ℱ. Hence, with the previous
part, ⋃ℱis a proper initial segment of ℚ.

278
Chapter 5 AXIOMATIC SET THEORY
∙Let 푥∈a ∈ℱ. Since a is a Dedekind cut, it has no greatest element.
Thus, there exists 푦∈a such that 푥< 푦. Because 푦∈⋃ℱ, we see that
⋃ℱhas no greatest element.
Since every nonempty bounded subset of real numbers has a least upper bound in ℝ, the
set of Dedekind cuts does not have the same issue with gaps as ℚdoes. For example,
the least upper bound of the set of real numbers
{2, 2.7, 2.71, 2.718, 2.7182, 2.71828, … }
is the Dedekind cut that corresponds to 푒∈퐑.
Arithmetic
As with the other sets of numbers that have been constructed using the axioms of 헭헙헖,
we now deﬁne addition and multiplication on ℝ. First, deﬁne the following Dedekind
cuts:
∙0 = 헌햾헀≤(ℚ, 0)
∙1 = 헌햾헀≤(ℚ, 1).
Let x, y ∈ℝ. That
푆= {푎+ 푏: 푎∈x ∧푏∈y}
is a Dedekind cut is Exercise 3. Assume that 0 ≤x and 0 ≤y. We claim that the set
푃1 = {푎푏: 0 ≤푎∈x ∧0 ≤푏∈y} ∪0
is a Dedekind cut.
∙푃1 ≠∅because 0 ≠∅.
∙Let 푢∈ℚ⧵x and 푣∈ℚ⧵y. Let
푚=
{
푢
if 푢≥푣,
푣
if 푣> 푢.
Then, 푚2 ∉푃1, so 푃1 ≠ℚ.
∙Let 0 ≤푎∈x and 0 ≤푏∈y, and suppose that 푤∈ℚsuch that 푤< 푎푏. Hence,
푤푏−1 < 푎, which implies that 푤푏−1 ∈x since x is downward closed. Therefore,
푤∈푃1 because
푤= (푤푏−1)푏.
∙Again, let 0 ≤푎∈x and 0 ≤푏∈y. Since x and y do not have greatest
elements, there exists 푢∈x and 푣∈y such that 푎< 푢and 푏< 푣. Then, by
Exercise 5.3.15(b)
푎푏< 푢푣∈푃1.

Section 5.6 REAL NUMBERS
279
Furthermore, if x < 0 and y < 0, deﬁne
푃2 = {푎푏: 푎∈x ∧푏∈y ∧0 ≤−푎∧0 ≤−푏} ∪0,
(5.15)
if x < 0 and 0 ≤y, deﬁne
푃3 = {푎푏: 푎∈x ∧0 ≤푏∈y},
(5.16)
or 0 ≤x and y < 0, deﬁne
푃4 = {푎푏: 0 ≤푎∈x ∧푏∈y},
(5.17)
Since 푃1, 푃2, 푃3, 푃4, and 푆are Dedekind cuts (Exercise 4), we can use them to
deﬁne the two standard operations on ℝ.
DEFINITION 5.6.9
Let x, y ∈ℝ. Deﬁne
x + y = {푎+ 푏: 푎∈x ∧푏∈y}
and
x ⋅y =
⎧
⎪
⎪
⎨
⎪
⎪⎩
{푎푏: 0 ≤푎∈x ∧0 ≤푏∈y} ∪0
if 0 ≤x ∧0 ≤y,
{푎푏: 푎∈x ∧푏∈y ∧0 ≤−푎∧0 ≤−푏} ∪0
if x < 0 ∧y < 0,
{푎푏: 푎∈x ∧0 ≤푏∈y}
if x < 0 ∧0 ≤y,
{푎푏: 0 ≤푎∈x ∧푏∈y}
if 0 ≤x ∧y < 0.
Since addition and multiplication on ℚare associative and commutative, addition
and multiplication are associative and commutative on ℝ.
THEOREM 5.6.10
Addition and multiplication of real numbers are associative and commutative.
PROOF
Let x, y, z ∈ℝ. We prove that addition is associative, leaving the rest to Exer-
cise 7.
x + (y + z) = x + {푏+ 푐: 푏∈y ∧푐∈z}
= {푎+ 푣: 푎∈x ∧푣∈{푏+ 푐: 푏∈y ∧푐∈z}}
= {푎+ (푏+ 푐) : 푎∈x ∧(푏∈y ∧푐∈z)}
= {(푎+ 푏) + 푐: (푎∈x ∧푏∈y) ∧푐∈z}
= {푢+ 푐: 푢∈{푎+ 푏: 푎∈x ∧푏∈y} ∧푐∈z}
= {푎+ 푏: 푎∈x ∧푏∈y} + z
= (x + y) + z.

280
Chapter 5 AXIOMATIC SET THEORY
The Dedekind cuts 0 and 1 behave as expected. For example,
0 + 4 = {푎+ 푏: 푎∈0 ∧푏∈4} = 헌햾헀≤(ℚ, 4) = 4
and
1 ⋅4 = {푎푏: 0 ≤푎∈1 ∧0 ≤푏∈4} ∪0 = 헌햾헀≤(ℚ, 4) = 4.
These equations suggest the following.
THEOREM 5.6.11
ℝhas additive and multiplicative identities.
PROOF
Let x ∈ℝ. We ﬁrst show that
x = {푎+ 푏: 푎∈x ∧푏∈0} = x + 0.
Take 푢∈x. Since x has no greatest element, there exists 푣∈x such that 푢< 푣.
Write 푢= 푣+ (푢−푣). Since 푢−푣< 0, we have that 푢∈x + 0. Conversely, let
푏∈0. Since 푏∈0 implies that 푏< 0, we have that 푢+ 푏< 푢(Exercise 5.3.16),
and because x is downward closed, 푢+ 푏∈x.
We next show that
x = x ⋅1.
We have two cases to consider.
∙Let 0 ≤x. By Deﬁnition 5.6.9,
x ⋅1 = {푎⋅푏: 0 ≤푎∈x ∧0 ≤푏∈1} ∪0.
Let 0 ≤푎∈x and 0 ≤푏< 1. Then, 푎푏≤푎(Exercise 5.3.17), so 푎푏∈x
since x is downward closed. Conversely, take 푎∈x. If 푎< 0, then 푎∈0,
and if 푎= 0, then 푎= 0 ⋅0, so suppose 푎> 0. Since x has no greatest
element, there exists 푢∈x such that 푎< 푢. This implies that 푎푢−1 < 1, so
푎∈x ⋅1 because 푎= 푢(푎푢−1).
∙Let x < 0 and proceed like in the previous case.
We leave the proof of the last result to Exercise 10.
THEOREM 5.6.12
∙Every element of ℝhas an additive inverse.
∙Every nonzero element of ℝhas a multiplicative inverse.
∙The distributive law holds for ℝ.
Complex Numbers
The last set of numbers that we deﬁne are the complex numbers.

Section 5.6 REAL NUMBERS
281
DEFINITION 5.6.13
Deﬁne ℂ= ℝ× ℝto be the set of complex numbers. Denote (a, b) ∈ℂby
a + b푖.
Observe that the standard embedding 푓: ℝ→ℂdeﬁned by 푓(x) = (x, 0) allows us
to consider ℝas a subset of ℂ. We will not deﬁne an order on ℂbut will deﬁne the
standard two operations.
DEFINITION 5.6.14
Let a + b푖, c + d푖∈ℂ.
∙(a + b푖) + (c + d푖) = (a + c) + (b + d)푖.
∙(a + b푖) ⋅(c + d푖) = (ac −bd) + (ad + bc)푖.
We leave the proof of the following to Exercise 11.
THEOREM 5.6.15
∙푖2 = –1 + 0푖.
∙Addition and multiplication are associative and commutative.
∙ℂhas additive and multiplicative identities.
∙Every element of ℂhas an additive inverse.
∙Every nonzero element of ℂhas a multiplicative inverse.
∙The distributive law holds in ℂ.
Exercises
1. Find the given initial segments in the indicate posets.
(a) 헌햾헀∣(ℤ, 50) from Example 4.3.6
(b) 헌햾헀≼({0, 1}∗, 101010) from Example 4.3.7
(c) 헌햾헀⊆(P(ℤ), {1, 2, 3, 4}) from Example 4.3.9
2. Let (퐴, ≼) be a poset. Assume that 퐵and 퐶are initial segments of 퐴. Prove that
퐵∩퐶is an initial segment of 퐴. Is 퐵∪퐶also an initial segment of 퐴?
3. Let x, y ∈ℝ. Prove that 푆= {푎+ 푏: 푎∈x ∧푏∈y} is a Dedekind cut.
4. Prove that 푃2 (5.15), 푃3 (5.16), and 푃4 (5.17) are Dedekind cuts.
5. Prove Theorem 5.6.7.
6. Show that every Dedekind cut has an upper bound in ℝ.
7. Finish the proof of Theorem 5.6.10.

282
Chapter 5 AXIOMATIC SET THEORY
8. Prove that 0 and 1 are Dedekind cuts.
9. Let 푎, 푏∈ℝand 푎푏= 0. Prove that 푎= 0 or 푏= 0.
10. Prove Theorem 5.6.12.
11. Prove Theorem 5.6.15.
12. Prove that between any two real numbers is another real number.
13. Prove that between any two real numbers is a rational number.
14. Show that ℚcan be embedded in ℝby proving that 푓: ℚ→ℝdeﬁned by
푓(푎) = 헌햾헀≤(ℚ, 푎)
is an order isomorphism preserving ≤with ≤. Furthermore, show that both 휔and ℤ
can be embedded into ℝ.
15. Let 푓be the function deﬁned in Exercise 14. Show that 푓(푎+1) is an upper bound
of 푓(푎) for all 푎∈ℚ.
16. The absolute value function (Exercise 2.4.23) can be deﬁned so that for all x ∈ℝ,
|x| = x ∪−x, where −x refers to the additive inverse of x (Theorem 5.6.12). Let a be
a positive real number. Prove the following for every x, y ∈ℝ.
(a) | −x| = |x|.
(b) |x2| = |x|2.
(c) x ≤|x|.
(d) |xy| = |x| |y|.
(e) |x| < a if and only if −a < x < a.
(f)
a < |x| if and only if a < x or x < −a.

CHAPTER 6
ORDINALS AND CARDINALS
6.1
ORDINAL NUMBERS
In Chapter 5, we deﬁned certain sets to represent collections of numbers. Despite being
sets themselves, the elements of those sets were called numbers. We continue this asso-
ciation with sets as numbers but for a diﬀerent purpose. While before we deﬁned 휔, ℤ,
ℚ, ℝ, and ℂto represent 퐍, 퐙, 퐐, 퐑, and 퐂, the deﬁnitions of this chapter are intended
to be a means by which all sets can be classiﬁed according to a particular criterion.
Speciﬁcally, in the later part of the chapter, we will deﬁne sets for the purpose of iden-
tifying the size of a given set, and we begin the chapter by deﬁning sets that are used
to identify whether two well-ordered sets have the same order type (Deﬁnition 4.5.24).
A crucial tool in this pursuit is the following generalization of Theorem 5.5.1 to well-
ordered inﬁnite sets.
THEOREM 6.1.1 [Transﬁnite Induction 1]
Let (퐴, ≼) be a well-ordered set. If 퐵⊆퐴and 헌햾헀≼(퐴, 푥) ⊆퐵implies 푥∈퐵
for all 푥∈퐴, then 퐴= 퐵.
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
283

284
Chapter 6 ORDINALS AND CARDINALS
PROOF
To show that 퐴is a subset of 퐵, suppose that 퐴⧵퐵is nonempty. Since 퐴
is well-ordered by ≼, let 푚be the least element of 퐴⧵퐵. This implies that
헌햾헀≼(퐴, 푚) ⊆퐵, so 푚∈퐵by hypothesis, a contradiction.
Note that transﬁnite induction restricted to 휔is simply strong induction (Theorem 5.5.1).
To see this, let the well-ordered set (퐴, ≼) of Theorem 6.1.1 be (휔, ≤). Deﬁne the set
퐵= {푘: 푝(푘)} ⊆휔for some formula 푝(푘). The conditional
헌햾헀≤(휔, 푛) ⊆퐵→푛∈퐵
implies 푝(0) when 푛= 0 because 헌햾헀≤(휔, 0) = ∅and implies
푝(0) ∧푝(1) ∧· · · ∧푝(푛−1) →푝(푛)
when 푛> 0 because 헌햾헀≤(휔, 푛) = 푛.
Our ﬁrst use of transﬁnite induction is the following lemma. It uses the terminology
of Exercise 4.4.32 and is the ﬁrst of a sequence of lemmas that will play a critical role.
LEMMA 6.1.2
Let (퐴, ≼) be well-ordered. If 휑: 퐴→퐴is increasing, then 푎≼휑(푎) for all
푎∈퐴.
PROOF
Deﬁne 퐵= {푥∈퐴: 푥≼휑(푥)}, where 휑is an increasing function 퐴→퐴.
Let 헌햾헀≼(퐴, 푎) ⊆퐵. We note that 푎is the least element of 퐴⧵헌햾헀≼(퐴, 푎). Let
푦∈헌햾헀≼(퐴, 푎). This implies that 푦≼휑(푦) ≺휑(푎) by deﬁnition of 퐵and
because 푦≺푎. Hence, 휑(푎) ∈퐴⧵헌햾헀≼(퐴, 푎). Thus, 푎≼휑(푎) and 퐴= 퐵by
transﬁnite induction (Theorem 6.1.1).
LEMMA 6.1.3
For all well-ordered sets (퐴, ≼) and (퐴′, ≼′), there exists at most one order iso-
morphism 휑: 퐴→퐴′.
PROOF
Let 휑: 퐴→퐴′ and 휓: 퐴→퐴′ be order isomorphisms. Since both 휑−1 and
휓−1 are order isomorphisms 퐴′ →퐴(Theorem 4.5.26), 휓−1 ◦휑and 휑−1 ◦휓are
order isomorphisms 퐴→퐴(Theorem 4.5.27). We note that for every 푏, 푐∈퐴,
if 푏≺푐, then 휑(푏) ≺′ 휑(푐) and then 휓−1(휑(푏)) ≺휓−1(휑(푐)). This means that
휓−1 ◦휑is increasing. A similar argument proves that 휑−1 ◦휓is increasing. To
show that 휑= 휓, let 푎∈퐴. By Lemma 6.1.2,
푎≼(휓−1 ◦휑)(푎)
and
푎≼(휑−1 ◦휓)(푎).
Therefore, 휓(푎) ≼′ 휑(푎) and 휑(푎) ≼′ 휓(푎). Since ≼′ is antisymmetric, we have
that 휑(푎) = 휓(푎).

Section 6.1 ORDINAL NUMBERS
285
LEMMA 6.1.4
No well-ordered set (퐴, ≼) is order isomorphic to any of its proper initial seg-
ments.
PROOF
Let (퐴, ≼) be a well-ordered set. Suppose that 푆is a proper initial segment
of 퐴. In order to obtain a contradiction, assume that 휑: 퐴→푆is an order
isomorphism. Take 푎∈퐴⧵푆. Since 휑(푎) ∈푆and 휑is increasing, we have that
푎≼휑(푎) ≺푎by Lemma 6.1.2.
The next result follows from Lemma 6.1.4 (Exercise 1).
LEMMA 6.1.5
Distinct initial segments of a well-ordered set are not order isomorphic.
The lemmas lead to the following theorem.
THEOREM 6.1.6
If (퐴, ≼) and (퐵, ≼′) are well-ordered sets, there exists an order isomorphism
such that exactly one of the following holds.
∙퐴≅퐵.
∙퐴is order isomorphic to a proper initial segment of 퐵.
∙퐵is order isomorphic to a proper initial segment of 퐴.
PROOF
Let (퐴, ≼) and (퐵, ≼′) be well-ordered sets. Appealing to Lemma 6.1.5, if 푥∈퐴,
there is at most one 푦∈퐵such that 헌햾헀≼(퐴, 푥) ≅헌햾헀≼′(퐵, 푦), so deﬁne the
function
휑= {(푥, 푦) ∈퐴× 퐵: 헌햾헀≼(퐴, 푥) ≅헌햾헀≼′(퐵, 푦)}.
We have a number of facts to prove.
∙Let 푦1, 푦2 ∈ran(휑) such that 푦1 = 푦2. Take 푥1, 푥2 ∈퐴such that
헌햾헀≼(퐴, 푥1) ≅헌햾헀≼′(퐵, 푦1)
and
헌햾헀≼(퐴, 푥2) ≅헌햾헀≼′(퐵, 푦2).
Then, we have 헌햾헀≼(퐴, 푥1) ≅헌햾헀≼(퐴, 푥2), and 푥1 = 푥2 by Lemma 6.1.5.
Therefore, 휑is one-to-one.
∙Take 푥1, 푥2 ∈dom(휑) and assume that 푥1 ≼푥2. This implies that
헌햾헀≼(퐴, 푥1) ⊆헌햾헀≼(퐴, 푥2).

286
Chapter 6 ORDINALS AND CARDINALS
Then, by deﬁnition of 휑, we have
헌햾헀≼(퐴, 푥1) ≅헌햾헀≼′(퐵, 휑(푥1))
and
헌햾헀≼(퐴, 푥2) ≅헌햾헀≼′(퐵, 휑(푥2)).
Hence, 헌햾헀≼′(퐵, 휑(푥1)) is order isomorphic to an initial segment 푆of
헌햾헀≼′(퐵, 휑(푥2)) (Exercise 17). If 푆≠헌햾헀≼′(퐵, 휑(푥1)), then 퐵has two
distinct isomorphic initial segments, contradicting Lemma 6.1.5. This im-
plies that 휑(푥1) ≼′ 휑(푥2), so 휑is order-preserving.
∙Let 푥1, 푥2 ∈퐴. Suppose that 푥1 ≼푥2 and 푥2 ∈dom(휑). This means that
there exists 푦2 ∈퐵such that
헌햾헀≼(퐴, 푥2) ≅헌햾헀≼′(퐵, 푦2).
If 푥1 = 푥2, then 푥1 ∈dom(휑), so assume that 푥1 ≠푥2. Since 푥1 ≺푥2, we
have that 푥1 ∈헌햾헀≼(퐴, 푥2). Because 휑is order-preserving,
헌햾헀≼(퐴, 푥1) ≅헌햾헀≼′(퐵, 푦1)
for some 푦1 ∈헌햾헀≼′(퐵, 푦2) (Exercise 17). Therefore, (푥1, 푦1) ∈휑, so
푥1 ∈dom(휑), proving that the domain of 휑is an initial segment of 퐴.
∙That the range of 휑is an initial segment of 퐵is proved like the previous
case.
If 휑is a surjection and dom(휑) = 퐴, then 휑is an order isomorphism 퐴→퐵,
else 휑−1[퐵] is a proper initial segment of 퐴. If 휑is not a surjection, 휑[퐴] is a
proper initial segment of 퐵.
Ordinals
Theorem 6.1.6 is a sort of trichotomy law for well-ordered sets. Two well-ordered sets
look alike, or one has a copy of itself in the other. This suggests that we should be
able to choose certain well-ordered sets to serve as representatives of all the diﬀerent
types of well-ordered sets. No two of the chosen sets should be order isomorphic, but
it should be the case that every well-ordered set is order isomorphic to exactly one of
them. That is, we should be able to classify all of the well-ordered sets. This will be
our immediate goal and is the purpose behind the next deﬁnition.
DEFINITION 6.1.7
The set 훼is an ordinal number (or simply an ordinal) if (훼, ⊆) is a well-ordered
set and 훽= 헌햾헀⊆(훼, 훽) for all 훽∈훼. For ordinals, deﬁne
헌햾헀(훼, 훽) = 헌햾헀⊆(훼, 훽).

Section 6.1 ORDINAL NUMBERS
287
Deﬁnition 6.1.7 implies that 휔and every natural number is an ordinal because they are
well-ordered by ⊆and for all 푛∈휔⧵{0},
푛= {0, 1, 2, … , 푛−1} = 헌햾헀(휔, 푛),
and for all 푘∈푛,
푘= {0, 1, 2, … , 푘−1} = 헌햾헀(푛, 푘).
For example, 5 ∈7 and
5 = {0, 1, 2, 3, 4} = 헌햾헀(7, 5).
We now prove a sequence of basic results about ordinals. The ﬁrst is similar to
Theorem 5.2.8, so its proof is left to Exercise 5.
THEOREM 6.1.8
Ordinals are transitive sets.
THEOREM 6.1.9
The elements of ordinals are transitive sets.
PROOF
Let 훼be an ordinal and 훽∈훼. Take 훾∈훽and 훿∈훾. Since 훼is transitive
(Theorem 6.1.8), we have that 훾∈훼. Therefore, 훾= 헌햾헀(훼, 훾) and 훽= 헌햾헀(훼, 훽),
so
훿∈헌햾헀(훼, 훾) ⊆헌햾헀(훼, 훽) = 훽,
which implies that 훽is transitive (Deﬁnition 5.2.7).
THEOREM 6.1.10
Every element of an ordinal is an ordinal.
PROOF
Let 훼be an ordinal and 훽∈훼. Notice that this implies that 훽is transitive (The-
orem 6.1.9). Since 훽⊆훼, we have that (훽, ⊆) is a well-ordered set by a subset
axiom (5.1.8) and Theorem 4.3.26. Now take 훿∈훽. Since 훿∈훼, we have that
훿is transitive. Therefore, by Exercise 5.2.3,
훿= {훾: 훾∈훿}
= {훾: 훾∈훽∧훾∈훿}
⊆{훾: 훾∈훽∧훾⊂훿}
= 헌햾헀(훽, 훿)
⊆헌햾헀(훼, 훿)
= 훿.
From this, we conclude that 훿= 헌햾헀(훽, 훿).

288
Chapter 6 ORDINALS AND CARDINALS
THEOREM 6.1.11
Let 훼and 훽be ordinals. Then, 훼⊂훽if and only if 훼∈훽.
PROOF
If 훼∈훽, then 훼⊂훽because 훽is transitive (Theorem 6.1.8 and Exercise 5.2.3).
Conversely, suppose that 훼⊂훽. Let 훾∈훼and 훿⊂훾with 훿∈훽. Since 훽is an
ordinal, 훿= 헌햾헀(훽, 훿). Hence, 훿= 헌햾헀(훾, 훿), which implies that 훿∈훾because
훾is an ordinal by Theorem 6.1.10. Therefore, 훿∈훼because 훼is transitive
(Theorem 6.1.8). This shows that 훼is a proper initial segment of 훽with respect
to ⊆(Deﬁnition 5.6.1). From this, it follows by Lemma 5.6.3 that 훼= 헌햾헀(훽, 휁)
for some 휁∈훽. Hence, 훼∈훽.
THEOREM 6.1.12
Every ordinal is well-ordered by ∈.
The next theorem is an important part of the process of showing that the ordinals
are the sets that classify all well-ordered sets according to their order types. It states
that distinct ordinals are not order isomorphic with respect to ⊆.
THEOREM 6.1.13
For all ordinals 훼and 훽, if (훼, ⊆) ≅(훽, ⊆), then 훼= 훽.
PROOF
Let 휑: 훼→훽be an order isomorphism preserving ⊆. Deﬁne
퐴= {훾∈훼: 휑(훾) = 훾}.
Take 훿∈훼and assume that 헌햾헀(훼, 훿) ⊆퐴. Then,
휑(훿) = 헌햾헀(훽, 휑(훿))
= 휑[헌햾헀(훼, 훿)]
= {휑(훾) : 훾∈훼∧훾⊂훿}
= {훾: 훾⊂훿}
= 훿.
The ﬁrst equality follows because 휑(훿) is an ordinal in 훽, the second follows
because 휑is an order isomorphism, and the fourth equation follows by the as-
sumption. Therefore, by transﬁnite induction (Theorem 6.1.1), 퐴= 훼, so 휑is
the identity map and 훼= 훽.
Because of Theorem 6.1.13, we are able to prove that there is a trichotomy law for
the ordinals with respect to ⊆.
THEOREM 6.1.14 [Trichotomy]
For all ordinals 훼and 훽, exactly one of the following holds: 훼= 훽, 훼⊂훽, or
훼⊂훽.

Section 6.1 ORDINAL NUMBERS
289
PROOF
Since (훼, ⊆) and (훽, ⊆) are well-ordered, by Theorem 6.1.6, exactly one of the
following holds.
∙훼≅훽, which implies that 훼= 훽by Theorem 6.1.13.
∙There exists 훿∈훽such that 훼≅헌햾헀(훽, 훿). Since 헌햾헀(훽, 훿) is an ordinal
(Theorem 6.1.10), 훼= 헌햾헀(훽, 훿), again by Theorem 6.1.13. Therefore,
훼⊂훽.
∙There exists 훾∈훼such that 훽≅헌햾헀(훼, 훾). As in the previous case, we
have that 훽⊂훼.
Because of Theorem 6.1.11, we can quickly conclude the following.
COROLLARY 6.1.15
For all ordinals 훼and 훽, exactly one of the following holds: 훼= 훽, 훼∈훽, or
훼∈훽.
In addition to the ordinals having a trichotomy law, the least upper bound with respect
to ⊆of a set of ordinals is also an ordinal (compare Example 4.3.14).
THEOREM 6.1.16
If ℱis a set of ordinals, ⋃ℱis an ordinal.
PROOF
We show that ⋃ℱsatisﬁes the conditions of Deﬁnition 6.1.7. Since the elements
of ordinals are ordinals, ⋃ℱis a set of ordinals, and by Theorem 6.1.14, we see
that (⋃ℱ, ⊆) is a linearly ordered set. Let 퐵⊆⋃ℱand take 훼∈퐵. We have
two cases to consider.
∙Suppose 훼∩퐵= ∅. Let 훽∈퐵. Then, 훽∉훼, so by Theorem 6.1.11 and
Theorem 6.1.14, 훼⊆훽. Hence, 훼is the least element of 퐵.
∙Let 훼∩퐵be nonempty. Since 훼is an ordinal, there exists an ordinal 훿that
is the least element of 훼∩퐵with respect to ⊆. Let 훽∈퐵. If 훽⊂훼, then
훽∈훼∩퐵, which implies that 훿⊆훽. Also, if 훼⊆훽, then 훿⊂훽. Since
these are the only two options (Theorem 6.1.14), this implies that 훿is the
least element of 퐵.
We conclude that (⋃ℱ, ⊆) is a well-ordered set.
Next, let 훽∈⋃ℱ. This means that there exists an ordinal 훼∈퐴such
that 훽∈훼. Since 헌햾헀(⋃ℱ, 훽) ⊆훽by deﬁnition, take 훿∈훽. Since 훼is
transitive (Theorem 6.1.8), 훿∈훼. Therefore, 훿∈⋃ℱ, which implies that
훽⊆헌햾헀(⋃ℱ, 훽).

290
Chapter 6 ORDINALS AND CARDINALS
Classiﬁcation
Let 훼be an ordinal number. We check the two conditions of Deﬁnition 6.1.7 to show
that 훼+ is an ordinal.
∙Let 퐵be a nonempty subset of 훼∪{훼}. If 퐵∩훼≠∅, then 퐵has a least element
with respect to ⊆since (훼, ⊆) is well-ordered. If 퐵= {훼}, then 훼is the least
element of 퐵.
∙Let 훽∈훼∪{훼}. If 훽∈훼, then 훽= 헌햾헀(훼, 훽) = 헌햾헀(훼+, 훽) because 훼is an
ordinal number. Otherwise, 훽= 훼= 헌햾헀(훼+, 훼).
The ordinal 훼+ is called a successor ordinal because it has a predecessor. For example,
every positive natural number is a successor ordinal.
Now assume that 훼≠∅and 훼is an ordinal that is not a successor.
∙Let 훿∈훽∈훼. Since 훼is transitive (Theorem 6.1.8), 훿∈훼. Thus, we conclude
that ⋃{훽: 훽∈훼} ⊆훼.
∙Now take 훿∈훼. This implies that 훿is an ordinal (Theorem 6.1.10), so 훿⊂훼by
Theorem 6.1.11. Therefore, 훿+ ⊆훼, so 훿+ ⊂훼since 훼is not a successor. Thus,
훿+ ∈훼, again by appealing to Theorem 6.1.11. Because 훿∈훿+, we have that
훼⊆⋃{훽: 훽∈훼}.
We conclude that for every nonempty ordinal 훼that is not a successor,
훼=
⋃
훽∈훼
훽.
Such an ordinal number is called a limit ordinal. For example, since every natural num-
ber is an ordinal, 휔= ⋃{푛: 푛∈휔} is a limit ordinal. Therefore, 휔+, 휔++, 휔+++, …
are also ordinals, but they are successors.
All of this proves the following.
THEOREM 6.1.17
A nonempty ordinal is either a successor or a limit ordinal.
Therefore, by Theorem 6.1.14 and Corollary 6.1.15, we can view the ordinals as sorted
by ⊂giving
0 ⊂1 ⊂2 ⊂· · · ⊂휔⊂휔+ ⊂휔++ ⊂휔+++ ⊂· · ·
and as sorted by ∈giving
0 ∈1 ∈2 ∈· · · ∈휔∈휔+ ∈휔++ ∈휔+++ ∈· · · .
Characterizing every ordinal as being equal to 0, a successor ordinal, or a limit
ordinal allows us to restate Theorem 6.1.1. The form of the theorem generalizes The-
orem 5.4.1 to inﬁnite ordinals. Its proof is left to Exercise 8.

Section 6.1 ORDINAL NUMBERS
291
THEOREM 6.1.18 [Transﬁnite Induction 2]
If 훼is an ordinal and 퐴⊆훼, then 퐴= 훼if the following hold:
∙0 ∈퐴.
∙If 훽∈퐴, then 훽+ ∈퐴.
∙If 훽is a limit ordinal such that 훿∈퐴for all 훿∈훽, then 훽∈퐴.
We use this second form of transﬁnite induction to prove the sought-after classiﬁcation
theorem for well-ordered sets.
THEOREM 6.1.19
Let (퐴, ≼) be a well-ordered set. Then, (퐴, ≼) ≅(훼, ⊆) for some ordinal 훼.
PROOF
Deﬁne
푝(푥, 푦) := 푦is an ordinal ∧헌햾헀≼(퐴, 푥) ≅푦.
Let 퐵= {푦: ∃푥[푥∈퐴∧푝(푥, 푦)]}. By Theorem 6.1.13, 푝(푥, 푦) deﬁnes a func-
tion, so by a replacement axiom (5.1.9), we conclude that 퐵is a set. We have a
number of items to prove.
Let 퐷⊆퐵and 퐷≠∅. Let 퐶= {푎∈퐴: ∃훼[훼∈퐷∧푝(푎, 훼)]}. Observe
that 퐶is not empty. Therefore, there exists a least element 푚∈퐶with respect
to ≼. Take an ordinal 훿0 ∈퐷such that
헌햾헀≼(퐴, 푚) ≅훿0.
Let 훿∈퐷. This means that 훿is an ordinal and
헌햾헀≼(퐴, 푐) ≅훿
for some 푐∈퐶. Since 푚≼푐, we have that
헌햾헀≼(퐴, 푚) ⊆헌햾헀≼(퐴, 푐).
Hence, 훿0 is isomorphic to a subset of 훿, which implies that 훿0 ⊆훿(Theo-
rem 6.1.13). We conclude that (퐵, ⊆) is a well-ordered set.
Let 퐸= {훽∈퐵: 헌햾헀(퐵, 훽) = 훽}. Let 헌햾헀(퐵, 휖) ⊆퐸for 휖∈퐵.
∙First, suppose that 휖= 훾+ for some ordinal 훾. Then, 헌햾헀(퐵, 훾) = 훾, so
헌햾헀(퐵, 훾) ∪{훾} = 훾+.
Also, 훾+ ≅헌햾헀≼(퐴, 푎) for some 푎∈퐴. Let 푚be the greatest element of
헌햾헀≼(퐴, 푎) (Exercise 9). This implies that 훾≅헌햾헀≼(퐴, 푎)⧵{푚}, so 훾∈퐵.
Hence,
헌햾헀(퐵, 훾) ∪{훾} = 헌햾헀(퐵, 훾+),

292
Chapter 6 ORDINALS AND CARDINALS
and we have 휖∈퐸.
∙Second, let 휖= ⋃{훾: 훾∈휖}. This means that 헌햾헀(퐵, 훾) = 훾for all 훾∈휖.
Therefore,
헌햾헀(퐵, 휖) =
⋃
훾∈휖
헌햾헀(퐵, 훾) =
⋃
훾∈휖
훾= 휖,
and 휖is again an element of 퐸.
By transﬁnite induction (Theorem 6.1.18), 퐸= 퐵. This combined with (퐵, ⊆)
being a well-ordered set means that 퐵is an ordinal.
Deﬁne 휑: 퐴→퐵by 휑(푥) = 푦⇔푝(푥, 푦). Since 휑is an order isomorphism
(Exercise 10), 퐵is an ordinal that is order isomorphic to (퐴, ≼), and because of
Theorem 6.1.13, it is the only one.
For any well-ordered set (퐴, ⪯), the unique ordinal 훼such that 퐴≅훼guaranteed
by Theorem 6.1.19 is called the order type of 퐴. Compare this deﬁnition with Deﬁni-
tion 4.5.24. For example, the order type of ({2푛: 푛> 5 ∧푛∈ℤ}, ≤) is 휔.
Burali-Forti and Hartogs
Suppose 풜= {0, 4, 6, 9}. Then, ⋃풜equals the ordinal 9, which is the least upper
bound of 풜. Also, assume that ℬ= {5, 100, 휔}. Then, ⋃ℬ= 휔. However, the least
upper bound of 풞= {푛∈휔: ∃푘(푘∈휔∧푛= 2푘)} is not an element of 휔. Instead,
the least upper bound of 풞is ⋃풞= 휔. Moreover, notice that 풜⊆10, ℬ⊆휔+, and
풞⊆휔+. We generalize this to the next theorem.
THEOREM 6.1.20
If ℱis a set of ordinals, there exists an ordinal 훼such that ℱ⊆훼.
PROOF
Take ℱto be a set of ordinals and let 훼∈ℱ. Then, 훼⊆⋃ℱand ⋃ℱis an
ordinal by Theorem 6.1.16. If 훼⊂⋃ℱ, then 훼∈⋃ℱby Theorem 6.1.11. If
훼= ⋃ℱ, then 훼∈{⋃ℱ}. Thus, ℱ⊆(⋃ℱ)+.
Although every set of ordinals is a subset of an ordinal, there is no set of all ordinals,
otherwise a contradiction would arise, as was ﬁrst discovered by Cesare Burali-Forti
(1897). This is why when we noted that ⊆gives the ordinals a linear order, we did not
claim that ⊆is used to deﬁne a linearly ordered set containing all ordinals.
THEOREM 6.1.21 [Burali-Forti]
There is no set that has every ordinal as an element.
PROOF
Suppose ℱ= {훼: 훼is an ordinal} is a set. This implies that ⋃ℱis an ordinal
by Theorem 6.1.16. However, for every 훼∈ℱ, we have that 훼∈훼+ ∈퐴,
showing that ℱ⊆⋃ℱ. Since ⋃ℱ∈ℱ, we also have ⋃ℱ∈⋃ℱ, which
contradicts Theorem 5.1.16.

Section 6.1 ORDINAL NUMBERS
293
The Burali-Forti theorem places a limit on what can be done with ordinals. One such
example is a theorem of Friedrich Hartogs.
THEOREM 6.1.22 [Hartogs]
For every set 퐴, there exists an ordinal 훼such that there are no injections of 훼
into 퐴.
PROOF
Let 퐴be a set. Deﬁne
ℰ= {훼: 훼is an ordinal ∧∃휓(휓is an injection 훼→퐴)}.
Notice that for every 훼∈ℰ, there exists a bijection 휑훼such that
휑훼: 훼→퐵훼
for some 퐵훼⊆퐴. Deﬁne a well-order ≼훼on 퐵훼by
휑훼(훽1) ≼훼휑훼(훽2) if and only if 훽1 ⊆훽2 for all 훽1, 훽2 ∈훼.
Then, 휑훼is an order isomorphism preserving ⊆with ≼훼. Next, deﬁne
ℱ= {(퐵, ≤) : 퐵⊆퐴∧≤is a well-ordering of 퐵}.
Since ℱ⊆P(퐴) × P(퐴× 퐴), we have that ℱis a set by the Power Set Axiom
(5.1.7) and a Subset Axiom (5.1.8). Let
푝(푥, 푦) := 푥∈ℱ∧∃훾(훾is an order isomorphism 푥→푦
preserving the order on 푥with ⊆}.
Suppose that 푝((퐵, ≤), 훼1) and 푝((퐵, ≤), 훼2). By Theorem 6.1.13, we have that
훼1 = 훼2, so 푝(푥, 푦) deﬁnes a function with domain ℱ. Moreover, ℰis a subset
of the range of this function because 푝((퐵훼, ≼훼), 훼) due to 휑훼. Therefore, ℰis a
set by a replacement axiom (5.1.9) and a subset axiom, and ℰcannot contain all
ordinals by the Burali-Forti theorem (6.1.21).
Transﬁnite Recursion
Theorem 6.1.19 only applies to well-ordered sets, so, for example, it does not apply
to (ℤ, ≤) or (ℝ, ≤). However, if we change the order on ℤfrom the standard ≤to ≼
deﬁned so as to put ℤinto this order,
0, 1, −1, 2, −2, 3, −3, … ,
then (ℤ, ≼) is a well-ordered set of order type 휔. That this can be done even with
sets like ℝis due to a theorem ﬁrst proved by Zermelo, which is often called the well-
ordering theorem. Its proof requires some preliminary work.
Let 퐴be a set and 훼an ordinal. By Deﬁnition 4.4.13, 훼퐴is the set of all functions
훼→퐴. Along these lines, deﬁne
<훼퐴= {휑: ∃훽(훽∈훼∧휑is a function 훽→퐴)}.

294
Chapter 6 ORDINALS AND CARDINALS
For example, 푓, 푔∈<5ℤ, where
푓= {(0, 1), (1, 2), (2, 3), (3, 4)}
and
푔= {(0, −4), (1, 14)}.
Also, 푓, 푔∈<휔ℤ, but the identity function on 휔is not an element of <휔ℤbecause its
domain is 휔. We should also note that for any set 퐴,
<∅퐴= ∅.
We use this notation in the following generalization of recursion to inﬁnite ordinals.
THEOREM 6.1.23 [Transﬁnite Recursion]
Let 훼be an ordinal. For every function 휓: <훼퐴→퐴, there exists a unique
function 휑: 훼→퐴such that for every 훽∈훼,
휑(훽) = 휓(휑↾훽).
PROOF
To prove uniqueness, in addition to 휑, let 휑′ be a function 훼→퐴such that for
all 훽∈훼,
휑′(훽) = 휓(휑′ ↾훽).
Deﬁne 퐵= {훽∈훼: 휑(훽) = 휑′(훽)}. We use transﬁnite induction (Theo-
rem 6.1.1) to show that 퐵= 훼. Suppose seg(훼, 훿) ⊆퐵with 훿∈훼. That is,
∀훽[훽∈훿→휑(훽) = 휑′(훽)].
This implies that 휑↾훿= 휑′ ↾훿. Therefore,
휑(훿) = 휓(휑↾훿) = 휓(휑′ ↾훿) = 휑′(훿),
so 훿∈퐵, and we conclude that 휑= 휑′.
We prove existence indirectly. Suppose that 훼is the least ordinal (Exercise 2)
such that
there exists a function 휓0 : <훼퐴→퐴such that
for every 휑: 훼→퐴, there exists 훽∈훼
such that 휑(훽) ≠휓0(휑↾훽).
Since the theorem is trivially true for 훼= 0, we have two cases to consider.
∙Let 훼= 훿+ for some ordinal 훿. By minimality of 훼, we have a function
휑훿: 훿→퐴such that for all 훽∈훿,
휑훿(훽) = 휓0(휑훿↾훽).

Section 6.1 ORDINAL NUMBERS
295
Extend 휑훿to ̄휑훿: 훼→퐴by deﬁning ̄휑훿(훿) = 휓0(휑훿), so
̄휑훿(훿) = 휓0( ̄휑훿↾훿).
This contradicts the minimality of 훼.
∙Let 훼be a limit ordinal. For each 훿∈훼, there exists a unique 휑훿: 훿→퐴
such that
휑훿(훿) = 휓(휑훿↾훿).
Notice that 훿∈훾implies that 휑훾is an extension of 휑훿, otherwise 휑훾↾훿
would have the property
(휑훾↾훿)(훽) = 휓0([휑훾↾훿] ↾훽)
for all 훽∈훿yet 휑훿≠휑훾↾훿. This contradicts the uniqueness of 휑훿.
Therefore, {휑훿: 훿∈훼} is a chain, so, as in Exercise 4.4.13, deﬁne the
function 휑: 훼→퐴by
휑=
⋃
훿∈훼
휑훿.
To check that 휑is the function given by the theorem, take 훽∈훼. Since 훼
is a limit ordinal, 훽+ ∈훼and
휑(훽) = 휑훽+(훽) = 휓0(휑훽+ ↾훽) = 휓0(휑↾훽),
again contradicting the minimality of 훼.
Theorem 6.1.23 has a corollary that can be viewed as an extension of Theorem 5.2.14.
Its proof is left to Exercise 18.
COROLLARY 6.1.24
Let 퐴be a set and 푎∈퐴. For every ordinal 훼, if 휓is a function 퐴→퐴, there
exists a unique function 휑: 훼→퐴such that
∙휑(0) = 푎,
∙휑(훽+) = 휓(휑(훼)) for all 훽∈훼,
∙휑(훾) = ⋃{휑(훽) : 훽∈훾} for all limit ordinals 훾∈훼.
We are now ready to prove that every set can be well-ordered. The following theorem
is equivalent to the axiom of choice (Exercise 20).
THEOREM 6.1.25 [Zermelo]
For any set 퐴, there exists a relation 푅on 퐴such that (퐴, 푅) is a well-ordered
set.

296
Chapter 6 ORDINALS AND CARDINALS
PROOF
Take a set 퐴and let 휉: P(퐴) →퐴be a choice function (Corollary 5.1.11). By
Theorem 6.1.22, there is an ordinal 훼such that no injection 훼→퐴exists. Hence,
we have 휑: 퐴→훼that is one-to-one. Let 퐵⊆퐴. Since every element of 훼is
an ordinal, there exists an ordinal 훿⊆훼such that 휑[퐵] = 훿(Theorem 6.1.16).
Deﬁne
휓퐵= 휑↾퐵.
Then, 휓−1
퐵∈<훼퐴. Let
푃= {휓−1
퐵: 퐵∈P(퐴)},
and deﬁne
ℎ1 : 푃→P(퐴)
by ℎ1(휓−1
퐵) = 퐵. Also, deﬁne
ℎ2 : 푃→퐴
by ℎ2 = 휉◦ℎ1. Since 푃⊆<훼퐴, extend ℎ2 to some
ℎ: <훼퐴→퐴
such that ℎ↾푃= ℎ2. By transﬁnite recursion (Theorem 6.1.23), there exists a
function 푓: 훼→퐴such that for all 훽∈훼,
푓(훽) = ℎ(푓↾훽).
Deﬁne Φ so that for all 훽∈훼,
Φ(훽) =
{
ℎ(퐴⧵푓[훽])
if 퐴⧵푓[훽] ≠∅,
퐴
if 퐴⧵푓[훽] = ∅.
Notice that 퐴∉퐴by Theorem 5.1.16. Let 훽0 be the least ordinal such that
Φ(훽0) = 퐴. Then, Φ ↾훽0 is a bijection 훽0 →퐴[Exercise 19(a)]. Lastly, deﬁne
the relation 푅on 퐴by
푎푅푏if and only if Φ−1(푎) ⊆Φ−1(푏),
for all 푎, 푏∈퐴. Since ⊆is a well-order on 훽0, 푅is a well-order on 퐴[Exer-
cise 19(b)].
Exercises
1. Prove Lemma 6.1.5.
2. Does 헌햾헀(⋃퐴, 훽) = ⋃
훼∈퐴헌햾헀(훼, 훽) for all sets of ordinals 퐴with 훽∈퐴? Explain.
3. Explain why {0, 2, 3, 4, 5} is not an ordinal.
4. Prove that ∅is an element of every ordinal.

Section 6.1 ORDINAL NUMBERS
297
5. Prove that an ordinal is a transitive set (Theorem 6.1.8).
6. Let 퐴be a set of ordinals. Prove.
(a) ⋂퐴is an ordinal.
(b) 퐴has a least element with respect to ⊆.
7. Let 퐵be a nonempty subset of the ordinal 훼. Prove that there exists 훽∈퐵such
that 훽and 퐵are disjoint.
8. Prove Theorem 6.1.18.
9. From the proof of Theorem 6.1.19, prove that 헌햾헀≼(퐴, 푎) has a greatest element.
10. Prove that 퐴is order isomorphic to 퐵in the proof of Theorem 6.1.19.
11. The proof of Theorem 6.1.19 contains many isomorphisms without explicitly iden-
tifying the isomorphism. Find these functions and prove that they are order isomor-
phisms.
12. Let 푅be a well-ordering on 퐴and suppose that 퐴has no greatest element. Show
the the order type of (퐴, 푅) is a limit ordinal.
13. Find a transitive set that is not an ordinal.
14. Theorem 6.1.21 comes from the Burali-Forti paradox. Like Russell’s paradox
(page 225), it arises when any formula is allowed to deﬁne a set. In this case, suppose
that 퐴= {훼: 훼is an ordinal} and assume that 퐴is a set. Prove that 퐴is an ordinal
that must include all ordinals as its elements.
15. Prove that there exists a function 퐹such that 퐹(푛) is the 푛th Fibonacci number.
16. Prove that for every function ℎ: <휔퐴→퐴, there is a unique function 푓: 휔→퐴
such that for all 푛∈휔, 푓(푛) = ℎ(푓↾푛).
17. Let (퐴, ≼) and (퐵, ≼′) be well-ordered sets and 휑: 퐴→퐵be an order-preserving
surjection. Prove that for every 푎∈퐴, there exists 푏∈퐵such that
휑[헌햾헀≼(퐴, 푎)] = 헌햾헀≼′(퐵, 푏).
18. Prove Corollary 6.1.24.
19. Prove the following from the proof of Zermelo’s theorem (6.1.25).
(a) Φ ↾훽0 is a bijection.
(b) 푅is a well-order on 퐴.
20. Prove that Theorem 6.1.25 implies Axiom 5.1.10.
21. Prove that Zorn’s lemma (5.1.13) implies Theorem 6.1.25 without using the axiom
of choice.

298
Chapter 6 ORDINALS AND CARDINALS
6.2
EQUINUMEROSITY
How can we determine whether two sets are of the same size? One possibility is to
count their elements. What happens, however, if the sets are inﬁnite? We need another
method. Suppose 퐴= {12, 47, 84} and 퐵= {17, 101, 200}. We can see that these
two sets are the same size without counting. Deﬁne a function 푓: 퐴→퐵so that
푓(12) = 17, 푓(47) = 101, and 푓(84) = 200. This function is a bijection. Since each
element is paired with exactly one element of the opposite set, 퐴and 퐵must be the
same size. This is the motivation behind our ﬁrst deﬁnition.
DEFINITION 6.2.1
The sets 퐴and 퐵are equinumerous (written as 퐴≈퐵) if there exists a bijection
휑: 퐴→퐵. If 퐴and 퐵are not equinumerous, write 퐴≉퐵.
EXAMPLE 6.2.2
Take 푛∈ℤsuch that 푛≠0 and deﬁne
푛ℤ= {푛푘: 푘∈ℤ}.
We prove that ℤ≈푛ℤ. To show this, we must ﬁnd a bijection 푓: ℤ→푛ℤ.
Deﬁne 푓(푘) = 푛푘.
∙Assume 푥1, 푥2 ∈ℤ, and let 푓(푥1) = 푓(푥2). Then 푛푥1 = 푛푥2, which yields
푥1 = 푥2 since 푛≠0. Thus, 푓is one-to-one.
∙Let 푦∈푛ℤ. This means that 푦= 푛푘for some 푘∈ℤ, so 푦= 푓(푘). This
shows that 푓is onto and, hence, a bijection.
EXAMPLE 6.2.3
To see ℤ+ ≈ℤ, deﬁne a one-to-one correspondence so that each even integer is
paired with a nonnegative integer and every odd integer is paired with a negative
integer (Figure 6.1). Let 푔: ℤ+ →ℤbe deﬁned by
푔(푛) =
{
푘−1
if 푛= 2푘for some 푘∈ℤ+,
−푘
if 푛= 2푘−1 for some 푘∈ℤ+.
Notice that 푔(4) = 1 since 4 = 2(2), and 푔(5) = −3 because 5 = 2(3) −1. This
function is a bijection (Exercise 12).
Equinumerosity plays a role similar to that of equality of integers. This is seen in the
next theorem. In fact, the theorem resembles Deﬁnition 4.2.4. Despite this, it does not
demonstrate the existence of an equivalence relation. This is because an equivalence
relation is a relation on a set, so, to deﬁne an equivalence relation, the next result would
require a set of all sets, contradicting Corollary 5.1.17.

Section 6.2 EQUINUMEROSITY
299
1
2
3
4
5
6
7
−3
−2
−1
0
1
2
3
8
−4
. . .
. . .
. . .
Figure 6.1
ℤ≈ℤ+.
THEOREM 6.2.4
Let 퐴, 퐵, and 퐶be sets.
∙퐴≈퐴. (Reﬂexive)
∙If 퐴≈퐵, then 퐵≈퐴. (Symmetric)
∙If 퐴≈퐵and 퐵≈퐶, then 퐴≈퐶. (Transitive)
PROOF
∙퐴≈퐴since the identity map is a bijection.
∙Assume 퐴≈퐵. Then, there exists a bijection 휑: 퐴→퐵. Therefore, 휑−1 is a
bijection. Hence, 퐵≈퐴.
∙By Theorem 4.5.23, the composition of two bijections is a bijection. Therefore,
퐴≈퐵and 퐵≈퐶implies 퐴≈퐶.
The symmetric property allows us to conclude that 푛ℤ≈ℤand ℤ≈ℤ+ from
Examples 6.2.2 and 6.2.3. The transitivity part of Theorem 6.2.4 allows us to conclude
from this that 푛ℤ≈ℤ+.
EXAMPLE 6.2.5
Show (0, 1) ≈ℝ. We do this in two parts. First, let 푓: (0, 1) →(−휋∕2, 휋∕2) be
deﬁned by 푓(푥) = 휋푥−휋∕2. This function is a one-to-one correspondence since
its graph is a nonvertical, nonhorizontal line (Exercise 4.5.4). Second, deﬁne
푔: (−휋∕2, 휋∕2) →ℝto be the function 푔(푥) = tan 푥. From trigonometry, we
know that tangent is a bijection on (−휋∕2, 휋∕2). Hence,
(0, 1) ≈(−휋∕2, 휋∕2)
and
(−휋∕2, 휋∕2) ≈ℝ.
Therefore, (0, 1) ≈ℝby Theorem 6.2.4.

300
Chapter 6 ORDINALS AND CARDINALS
Order
If ≈resembles equality, the following resembles the ≤relation.
DEFINITION 6.2.6
The set 퐵dominates the set 퐴(written as 퐴⪯퐵) if there exists an injection
휑: 퐴→퐵. If 퐵does not dominate 퐴, write 퐴̸⪯퐵. Furthermore, deﬁne 퐴≺퐵
to mean 퐴⪯퐵but 퐴≉퐵.
EXAMPLE 6.2.7
If 퐴⊆퐵, then 퐴⪯퐵. This is proved using the inclusion map (Exercise 4.4.26).
For instance, let 휄: ℤ+ →ℤbe the inclusion map and 푓: ℤ→ℝbe deﬁned as
푓(푛) = 헌햾헀≤(ℚ, 푛).
Then, ℤ+ ⪯ℝbecause 푓◦휄is an injection. Similarly, ℚ⪯ℂ. However, 퐴⊂퐵
does not imply 퐴≉퐵. As an example, 푛ℤ≈ℤ, but 푛ℤ⊂ℤwhen 푛≠±1.
Another method used to prove that 퐴⪯퐵is to ﬁnd a surjection 퐵→퐴. Consider
the sets 퐴= {1, 2} and 퐵= {3, 4, 5}. Deﬁne 푓: 퐵→퐴to be the surjection given by
푓(3) = 1, 푓(4) = 2, and 푓(5) = 2. This is the inverse of the relation 푅in Figure 4.1.
To show that 퐵dominates 퐴, we must ﬁnd an injection 퐴→퐵. To do this, modify 푓−1
by deleting (2, 4) and call the resulting function 푔. Observe that 푔(1) = 3 and 푔(2) = 5,
which is an injection, so 퐴⪯퐵.
THEOREM 6.2.8
If there exists a surjection 휑: 퐴→퐵, then 퐵⪯퐴.
PROOF
Let 휑: 퐴→퐵be onto. Deﬁne a relation 푅⊆퐵× 퐴by
푅= {(푏, 푎) : 휑(푎) = 푏}.
Since 휑is onto,
dom(푅) = ran(휑) = 퐵.
Corollary 5.1.11 yields a function 푓so that dom(푓) = dom(푅) and 푓⊆푅.
We claim that 푓is one-to-one. Indeed, let 푏1, 푏2 ∈퐵. Assume that we have
푓(푏1) = 푓(푏2). Let 푎1 = 푓(푏1) and 푎2 = 푓(푏2) where 푎1, 푎2 ∈퐴. This means
푎1 = 푎2. Also, 휑(푎1) = 푏1 and 휑(푎2) = 푏2 because 푓⊆푅. Since 휑is a function,
푏1 = 푏2.
EXAMPLE 6.2.9
Let 푅be an equivalence relation on a set 퐴. The map 휑: 퐴→퐴∕푅deﬁned by
휑(푎) = [푎]푅is a surjection. Therefore, 퐴∕푅⪯퐴.

Section 6.2 EQUINUMEROSITY
301
EXAMPLE 6.2.10
We know that ℤ+ ⪯ℝby Example 6.2.7. We can also prove this by using the
function 푓: ℝ→ℤ+ deﬁned by 푓(푥) = |⟦푥⟧| + 1 and appealing to Theo-
rem 6.2.8.
The next theorem states that ⪯closely resembles an antisymmetric relation (Deﬁni-
tion 4.3.1). Cantor was the ﬁrst to publish a statement of it (1888). He proved it using
the axiom of choice, but it was later shown that it can be proved in 헭헙. It was proved
independently by Ernst Schröder and Felix Bernstein around 1890. The proof given
here follows that of Julius König (1906).
THEOREM 6.2.11 [Cantor–Schröder–Bernstein]
If 퐴⪯퐵and 퐵⪯퐴, then 퐴≈퐵.
PROOF
Let 푓: 퐴→퐵and 푔: 퐵→퐴be injections. To prove that 퐴is equinumerous to
퐵, we deﬁne a one-to-one correspondence ℎ: 퐴→퐵. To do this, we recursively
deﬁne two sequences of sets by ﬁrst letting
퐶0 = 퐴⧵ran(푔)
and
퐷0 = 푓[퐶0].
Then, for 푛∈휔,
퐶푛+1 = 푔[퐷푛]
and
퐷푛= 푓[퐶푛].
This is illustrated in Figure 6.2. Note that both {퐶푛: 푛∈휔} and {퐷푛: 푛∈휔}
are pairwise disjoint because 푓and 푔are one-to-one (Exercise 11). Deﬁne ℎby
ℎ= 푓↾
(
⋃
푛∈휔
퐶푛
)
∪푔−1 ↾
(
ran(푔) ⧵
⋃
푛∈휔
퐶푛
)
.
We show that ℎis the desired function.
∙Let 푥1, 푥2 ∈퐴such that 푥1 ≠푥2. Since both 푓and 푔are one-to-one, we
only need to check the case when 푥1 ∈퐶푘for some 푘∈휔and 푥2 ∉퐶푛
for all 푛∈휔. Then, 푓(푥1) ∈퐷푘but 푔−1(푥2) ∉퐷푘, so 푓(푥1) ≠푔−1(푥2).
That is, ℎ(푥1) ≠ℎ(푥2).
∙Take 푦∈퐵. If 푦∈퐷푘for some 푘∈휔, then 푦= 푓(푥) for some 푥∈퐶푘.
That is, 푦= ℎ(푥). Now suppose 푦∉⋃
푛∈휔퐷푛. Clearly, 푔(푦) ∉퐶0.
If 푔(푦) ∈퐶푘for some 푘> 0, then 푦∈퐷푘−1, a contradiction. Hence,
푔(푦) = 푥for some 푥∈ran(푔) ⧵⋃
푛∈휔퐶푛. This implies that we have
ℎ(푥) = 푔−1(푥) = 푦.

302
Chapter 6 ORDINALS AND CARDINALS
ran(g)
A  ran(g)


C0
f C0
C1
C2
D0
D1
.  .  .
.  .  .
f C1
g D0
g D1
ran(g)       

n∈𝜔
Cn
A
B
ran(g)       

n∈𝜔
Cn
g−1
                            
B 

n∈𝜔
Dn
↾
↾
↾
↾
↾
Figure 6.2
The Cantor–Schröder–Bernstein theorem.

Section 6.2 EQUINUMEROSITY
303
EXAMPLE 6.2.12
Because (0, 1) ⊆[0, 1], we have that (0, 1) ⪯[0, 1], and because the function
푓: [0, 1] →(0, 1) deﬁned by
푓(푥) = 1
2푥+ 1
4
is an injection, we have that [0, 1] ⪯(0, 1), so we conclude by the Cantor–
Schröder–Bernstein theorem (6.2.11) that (0, 1) ≈[0, 1].
Diagonalization
The strict inequality 퐴≺퐵is sometimes diﬃcult to prove because we must show that
there does not exist a bijection from 퐴onto 퐵. The next method was developed by
Cantor (1891) to accomplish this for inﬁnite sets. It is called diagonalization.
Let 푀be the set of all functions 푓: 휔→{푚, 푤}, where 푚≠푤. To show that
휔≺푀, we prove two facts:
∙There exists an injection 휔→푀.
∙There is no one-to-one correspondence between 휔and 푀.
Cantor’s method does both of these at once. Let 휑: 휔→푀be a function. Writing
the functions of the range of 휑as inﬁnite tuples, let
푓푖= (푎푖0, 푎푖1, 푎푖2, … , 푎푖푗, … ),
where 푎푖푗∈{푚, 푤} for all 푖, 푗∈휔. For example,
휑(4)(3) = 푓4(3) = 푎4,3.
Now, write the functions in order:
푓0 = (a00, 푎01, 푎02, … , 푎0푗, … ),
푓1 = (푎10, a11, 푎12, … , 푎1푗, … ),
푓2 = (푎20, 푎21, a22, … , 푎2푗, … ),
⋮
푓푖= (푎푖0, 푎푖1, 푎푖2, … , aii, … , 푎푖푗, … ),
⋮
From this, a function 푓∈푀that is not in the list can be found by identifying the
elements on the diagonal and deﬁning 푓(푛) to be the opposite of 푎푛푛. In other words,
deﬁne for all 푖∈휔,
푏푖=
{
푚
if 푎푖푖= 푤,
푤
if 푎푖푖= 푚,

304
Chapter 6 ORDINALS AND CARDINALS
and 푓(푛) = 푏푛is an element of 푀not in the list because for all 푛∈휔,
푓(푛) ≠푎푛푛.
Since the function 휑mapping 휔to 푀is arbitrary, there are injections 휔→푀but
none of them are onto. Therefore,
휔≺푀.
Furthermore, note that the elements of [0, 1] can be uniquely represented as binary
numbers of the form
0 . 푎0 푎1 푎2 … 푎푖… ,
where 푎푖∈{0, 1} for each 푖∈휔. For example
1 = 0.1111111 …
and
1∕2 = 0.1000000 … .
Therefore,
푀≈[0, 1] .
Hence, we can conclude like Cantor that since [0, 1] ≈ℝ(Examples 6.2.5 and 6.2.12),
휔≺ℝ.
Cantor’s diagonalization argument can be generalized, but we ﬁrst need a deﬁnition.
Let 퐴be a set and 퐵⊆퐴. The function
휒퐵: 퐴→{0, 1}
is called a characteristic function and is deﬁned by
휒퐵(푎) =
{
1
if 푎∈퐵,
0
if 푎∉퐵.
For example, if 퐴= ℤand 퐵= {0, 1, 3, 5}, then 휒퐵(1) = 1 but 휒퐵(2) = 0. Moreover,
for every set 퐴,
퐴2 = {휒퐵: 퐵⊆퐴}.
The characteristic function plays an important role in the proof of the next theorem.
THEOREM 6.2.13
If 퐴is a set, 퐴≺퐴2.

Section 6.2 EQUINUMEROSITY
305
PROOF
Since the function 휓: 퐴→퐴2 deﬁned by
휓(푎) = 휒{푎}
is an injection, 퐴2 dominates 퐴. To show that 퐴is not equinumerous with 퐴2,
we show that there is no surjection 퐴→퐴2. Let 휑∶퐴→퐴2 be a function, and
for all 푎∈퐴, write 휑(푎) = 휒퐵푎for some 퐵푎⊆퐴. Deﬁne 휒so that
휒(푎) =
{
1
if 휒퐵푎(푎) = 0,
0
if 휒퐵푎(푎) = 1.
Therefore, 휒∉ran(휑) because 휒퐵푎(푎) ≠휒(푎) for all 푎∈퐴. However, 휒∈퐴2.
To prove this, deﬁne
퐵= {푎∈퐴: 휒퐵푎(푎) = 0}.
We conclude that 휒(푎) = 휒퐵(푎) because if 휒퐵푎(푎) = 0, then 푎∈퐵, so 휒(푎) = 1
and 휒퐵(푎) = 1, but if 휒퐵푎(푎) = 1, then 푎∉퐵, so 휒(푎) = 0 and 휒퐵(푎) = 0.
Therefore, 휒= 휒퐵, and 휑is not onto.
By Exercise 14,
P(퐴) ≈퐴2.
This result combined with Theorem 6.2.13 quickly yield the following.
COROLLARY 6.2.14
If 퐴is a set, 퐴≺P(퐴).
From the theorem, we conclude that there exists a sequence of sets
휔≺P(휔) ≺P(P(휔)) ≺P(P(P(휔))) ≺· · · .
Thus, there are larger and larger magnitudes of inﬁnity.
Exercises
1. Given 휒퐵: ℤ→{0, 1} with 퐵= {2, 5, 19, 23}, ﬁnd
(a) 휒퐵(1)
(b) 휒퐵(2)
(c) 휒퐵(−10)
(d) 휒퐵(19)
2. Find a surjection 휑: 휔× 휔→휔showing that 휔⪯휔× 휔.
3. Prove the given equations.
(a) 휒퐴∪퐵= 휒퐴+ 휒퐵−휒퐴휒퐵
(b) 휒퐴∩퐵= 휒퐴휒퐵
4. Prove that there exists a bijection between the given pairs of sets.

306
Chapter 6 ORDINALS AND CARDINALS
(a) [0, 휋] and [−1, 1]
(b) [−휋∕2, 휋∕2] and [−1, 1]
(c) (0, ∞) and ℝ
(d) 휔and ℤ
(e) ℤ+ and ℤ−
(f)
{(푥, 0) : 푥∈ℝ} and ℝ
(g) ℤand ℤ× ℤ
(h) {(푥, 푦) ∈ℝ× ℝ: 푦= 2푥+ 4} and ℝ
5. Let 푎< 푏and 푐< 푑, where 푎, 푏, 푐, 푑∈ℝ. Prove.
(a) (푎, 푏) ≈(푐, 푑)
(b) [푎, 푏] ≈[푐, 푑]
(c) (푎, 푏) ≈[푐, 푑]
(d) (푎, 푏) ≈(푐, 푑]
6. Prove ℝ≈ℂ.
7. Let 퐴, 퐵, 퐶, and 퐷be nonempty sets. Prove.
(a) ℕ⪯ℤ−
(b) 퐴∩퐵⪯P(퐴)
(c) 퐴⪯퐴× 퐵
(d) [0, 2] ⪯[5, 7]
(e) 퐴∩퐵⪯퐴
(f)
퐴퐵⪯퐴× 퐵
(g) 퐴× {0} ⪯(퐴∪퐵) × {1}
(h) 퐴× 퐵× 퐶⪯퐴× 퐵× 퐶× 퐷
(i)
퐴⧵퐵⪯퐶× 퐴
8. Prove.
(a) If 퐴⪯퐵and 퐵≈퐶, then 퐴⪯퐶.
(b) If 퐴≈퐵and 퐵⪯퐶, then 퐴⪯퐶.
(c) If 퐴⪯퐵and 퐵⪯퐶, then 퐴⪯퐶.
(d) If 퐴⪯퐵and 퐶⪯퐷, then 퐴퐶⪯퐵퐷.
(e) If 퐴≈퐵, then P(퐴) ≈P(퐵).
(f)
If 퐴≈퐵and 퐶≈퐷, then 퐴× 퐶≈퐵× 퐷.
(g) If 퐴≈퐵, 푎∈퐴, and 푏∈퐵, then 퐴⧵{푎} ≈퐵⧵{푏}.
(h) If 퐴⧵퐵≈퐵⧵퐴, then 퐴≈퐵.
(i)
If 퐴⊆퐵and 퐴≈퐴∪퐶, then 퐵≈퐴∪퐵∪퐶.
(j)
If 퐶⊆퐴, 퐵⊆퐷, and 퐴∪퐵≈퐵, then 퐶∪퐷≈퐷.
9. Given the function 휑: 퐴→퐵, prove that 휑≈퐴and 휑⪯ran(휑).
10. Without appealing to the Cantor–Schröder–Bernstein theorem (6.2.11), prove that
(0, 1) ≈[0, 1].

Section 6.3 CARDINAL NUMBERS
307
11. Prove that the sets {퐶푛: 푛∈휔} and {퐷푛: 푛∈휔} from the proof of Theo-
rem 6.2.11 are pairwise disjoint.
12. Show that 푔is a bijection, where 푔: ℤ+ →ℤis deﬁned by
푔(푛) =
{
푘−1
if 푛= 2푘for some 푘∈휔,
−푘
if 푛= 2푘+ 1 for some 푘∈휔.
13. Let 퐴be an inﬁnite set and {푎1, 푎2, … } be a set of distinct elements from 퐴. Prove
that 퐴→퐴⧵{푎1} is a bijection, where
휑(푥) =
{
푎푛+1
if 푥= 푎푛,
푥
otherwise.
14. For any set 퐴, prove that P(퐴) ≈퐴2.
15. Prove that if 푓: 퐴→퐵is a surjection, there exists a function 푔: 퐵→퐴such
that 푓◦푔= 퐼퐵.
16. Use the power set to prove that there is no set of all sets.
6.3
CARDINAL NUMBERS
Let 퐴be a set. Deﬁne
퐵= {훽: 훽is an ordinal ∧훽≈퐴}.
By Zermelo’s theorem (6.1.25), 퐴can be well-ordered, so by Theorem 6.1.19, 퐴is
order isomorphic to some ordinal, so 퐵is nonempty. Moreover, 퐵is subset of an
ordinal (Theorem 6.1.20). Therefore, (퐵, ⊆) has a least element, which has the property
that it is not equinumerous to any of its elements. This allows us to deﬁne the second
of our new types of number (page 283). This type will be used to denote the size of a
set.
DEFINITION 6.3.1
An ordinal 휅is a cardinal number (or simply a cardinal) if 훼≉휅for every
훼∈휅.
Observe that every inﬁnite cardinal is a limit ordinal. This is because 훼≈훼+ for every
inﬁnite ordinal 훼. However, a limit ordinal might not be a cardinal.
Let 휅and 휆be cardinals. Suppose that 퐴≈휅and 퐴≈휆. By Theorem 6.2.4,
we have that 휅≈휆. If 휅∈휆or 휆∈휅, this would contradict the deﬁnition of a
cardinal number. Therefore, 휅= 휆(Corollary 6.1.15), and we conclude that every set
is equinumerous to exactly one cardinal.

308
Chapter 6 ORDINALS AND CARDINALS
DEFINITION 6.3.2
The cardinality of a set 퐴is denoted by |퐴| and deﬁned as the unique cardinal
equinumerous to 퐴.
Observe that the cardinality of a cardinal 휅is 휅.
EXAMPLE 6.3.3
Let 풜be a set of cardinals. By Theorem 6.1.16, we know that ⋃풜is an ordinal.
Now we show that it is also a cardinal. Suppose that 훼is an ordinal such that
훼≈⋃풜. By Deﬁnition 6.3.1, we must show that ⋃풜⊆훼. Suppose there
exists an ordinal 훽∈⋃풜such that 훽∉훼. This means that there exists a
cardinal 휅∈풜such that 훽∈휅. This is impossible because
훼⪯훽≺휅⪯
⋃
풜≈훼.
Finite Sets
Intuitively, we know what a ﬁnite set is. Both of the sets 퐴= {0, 2, 3, 5, 8, 10} and
퐵= {푛∈ℤ: (푛−1)(푛+ 3) = 0} are examples because we can count all of their
elements and ﬁnd that there is only one ordinal equinumerous to 퐴and only one or-
dinal equinumerous to 퐵. That is, |퐴| = 6 and |퐵| = 2. This suggests the following
deﬁnition.
DEFINITION 6.3.4
For every set 퐴, if there exists 푛∈휔such that 퐴≈푛, then 퐴is ﬁnite. If 퐴is
not ﬁnite, it is inﬁnite.
As we will see, ﬁnite sets are fundamentally diﬀerent from inﬁnite sets. There are
properties that ﬁnite sets have in addition to the number of their elements that inﬁnite
sets do not have. Let us consider some of those properties of ﬁnite sets.
LEMMA 6.3.5
Let 푛be a positive natural number. If 푦∈푛, then 푛⧵{푦} ≈푛−.
PROOF
We proceed by mathematical induction.
∙When 푛= 1, it must be the case that 푦= 0, so 푛⧵{푦} = 0 = 1−.
∙Take 푦∈푛+ 1. If 푦= 푛, then (푛+ 1) ⧵{푛} = 푛, so suppose that 푦< 푛.
By induction, there exists a bijection 푔: 푛⧵{푦} →푛−. Then, deﬁne
푓: (푛+ 1) ⧵{푦} →푛by 푓(푚) = 푔(푚) for all 푚< 푛and 푓(푛) = 푛. The
function 푓is a bijection (Exercise 3).
Lemma 6.3.5 is used to prove a characteristic property of ﬁnite cardinals.

Section 6.3 CARDINAL NUMBERS
309
THEOREM 6.3.6
No natural number is equinumerous to a proper subset of itself.
PROOF
Let 푛∈휔be minimal such that there exists 퐴⊂푛and 푛≈퐴. Since ∅has no
proper subsets and the only proper subset of 1 is 0, we can assume that 푛≥2.
Let 푓: 퐴→푛be a bijection and 푥∈퐴and 푦∈푛⧵퐴such that 푓(푥) = 푦. We
check the following.
∙Let 푎∈퐴⧵{푥}. If 푓(푎) = 푦, then we contradict the hypothesis that 푓is
one-to-one because 푓(푥) = 푦and 푥≠푎. Thus, 푓(푎) ∈푛⧵{푦}.
∙Take 푏∈푛⧵{푦}. Since 푓is a surjection, there exists 푎∈퐴such that
푓(푎) = 푏. If 푎= 푥, then {푏, 푦} ⊆[푥]푓(Deﬁnition 4.2.7), which is impos-
sible because 푓is a function. Thus, 푎∈퐴⧵{푥}, and we conclude that
푓↾(퐴⧵{푥}) is onto 푛⧵{푦}.
∙Since the restriction of a one-to-one function is one-to-one, 푓↾(퐴⧵{푥})
is one-to-one.
Hence, 푓0 = 푓↾(퐴⧵{푥}) is a bijection with range 푛⧵{푦}. We have two cases
to consider.
∙Suppose 푛−∉퐴. This implies that 퐴⧵{푥} ⊆푛−. Since 푥∈퐴, we have
that 푥≠푛−, so 푥∈푛−. Thus, 퐴⧵{푥} ⊂푛−. By Lemma 6.3.5, there exists
a bijection 푔: 푛⧵{푦} →푛−, so we have 퐴⧵{푥} ≈푛−because 푔◦푓0 is a
bijection, contradicting the minimality of 푛.
∙Assume 푛−∈퐴. Deﬁne 퐴′ = 퐴⧵{푛−} ∪{푦}. Since 푦∉퐴, 퐴′ ≈퐴,
which implies that 퐴′ ≈푛. Replace 퐴with 퐴′ in the previous argument
and use 푓↾(퐴′ ⧵{푦}) to contradict the minimality of 푛.
COROLLARY 6.3.7
Every ﬁnite set is equinumerous to exactly one natural number.
PROOF
Let 퐴be ﬁnite. This means that 퐴≈푛for some 푛∈휔. Let 푚∈휔also have
the property that 퐴≈푚. This implies that 푛≈푚. Hence, by Theorem 6.3.6, we
conclude that 푛= 푚because 푛⊆푚or 푚⊆푛.
There are many results that follow directly from Theorem 6.3.6. The following six
corollaries are among them.
COROLLARY 6.3.8 [Pigeonhole Principle]
Let 퐴and 퐵be ﬁnite sets with 퐵≺퐴. There is no one-to-one function 퐴→퐵.

310
Chapter 6 ORDINALS AND CARDINALS
PROOF
There exists unique 푚, 푛∈휔such that 퐴≈푚and 퐵≈푛by Corollary 6.3.7.
Assume that 푓: 퐴→퐵is one-to-one. Then,
푚≈퐴⪯퐵≈푛,
so 푚is equinumerous to a subset of 푛. This implies that 푚⊆푛. However, 푛⊂푚
because 퐵≺퐴, which contradicts Theorem 6.1.14.
COROLLARY 6.3.9
No ﬁnite set is equinumerous to a proper subset of itself.
COROLLARY 6.3.10
A set equinumerous to a proper subset of itself is inﬁnite.
Because 푓: 휔→휔⧵{0} deﬁned by 푓(푛) = 푛+ 1 is a bijection, we have the next
result by Corollary 6.3.10.
COROLLARY 6.3.11
휔is inﬁnite.
The proofs of the last two corollaries are left to Exercise 5.
COROLLARY 6.3.12
If 퐴is a proper subset of a natural number 푛, there exists 푚< 푛such that 퐴≈푚.
COROLLARY 6.3.13
Let 퐴⊆퐵. If 퐵is ﬁnite, 퐴is ﬁnite, and if 퐴is inﬁnite, 퐵is inﬁnite.
Countable Sets
Since 휔is the ﬁrst inﬁnite ordinal, it is also a cardinal. Therefore,
|퐴| = 휔if and only if 퐴≈휔.
As sets go, ﬁnite sets and those equinumerous with 휔are small, so we classify them
together using the next deﬁnition.
DEFINITION 6.3.14
A set 퐴is countable if 퐴⪯휔.
Sometimes countable sets are called discrete or denumerable. For example, the bi-
jection 푓: ℤ+ →휔deﬁned by 푓(푛) = 푛−shows that ℤ+ is countable. Moreover, a
nonempty ﬁnite set is countable and can be written as
{푎0, 푎1, … , 푎푛−1},

Section 6.3 CARDINAL NUMBERS
311
for some positive integer 푛. A countably inﬁnite set can be written as
{푎0, 푎1, 푎2, … },
where there are inﬁnitely many distinct elements of the set.
EXAMPLE 6.3.15
The set of rational numbers is a countable set. To prove this, deﬁne a bijection
푓: 휔→ℚby ﬁrst mapping the even natural numbers to the nonnegative rational
numbers. The function is deﬁned along the path indicated in Figure 6.3. When
a rational number that previously has been used is encountered, it is skipped.
To complete the deﬁnition, associate the odd naturals with the negative ratio-
nal numbers using a path as in the diagram. This function is a bijection, so we
conclude that ℚis countable.
We have deﬁned countability in terms of bijections. Now let us identify a condition
for countability using surjections.
THEOREM 6.3.16
A set 퐴is countable if and only if there exists a function from 휔onto 퐴.
PROOF
If 휑: 휔→퐴is a surjection, by Theorem 6.2.8, 퐴⪯휔. Conversely, suppose 퐴
is countable. We have two cases to check.
∙Suppose 퐴≈휔. Then, there is a surjection from the set of natural numbers
to 퐴.
f(6)  = 2
1
2
2
f(8)  = 2
3
f(4)  = 1
1
f(2)  = 1
2
f(10)  = 1
3
f(0)  = 0
1
0
2
0
3
. . .
Figure 6.3
The rational numbers are countable.

312
Chapter 6 ORDINALS AND CARDINALS
∙Now let 퐴≈푛for some 푛∈휔. If 퐴= ∅, then ∅is a surjection 휔→퐴.
Thus, assume 퐴≠∅. This means that we can write
퐴= {푎0, 푎1, … , 푎푛−1}.
Deﬁne 휑: 휔→퐴by
휑(푖) =
{
푎푖
if 푖= 0, 1, … , 푛−1,
푎푛−1
otherwise.
This function is certainly onto.
If 퐴푖is countable for all 푖= 0, 1, … , 푛−1, then 퐴0 × 퐴1 × · · · × 퐴푛−1 is countable
(Exercise 15). In particular, 휔× 휔and ℤ× ℤare countable. We also have the next
theorem.
THEOREM 6.3.17
The union of a countable family of countable sets is countable.
PROOF
Let {퐴훼: 훼∈퐼} be a family of countable sets with 퐼countable. Since we have
that ⋃∅= ∅is countable (Example 3.4.12), we can assume that 퐼is nonempty.
For each 훼∈퐼, there exists a surjection in 휔(퐴훼) by Theorem 6.3.16. Therefore,
by Corollary 5.1.11, there exists
푓: 퐼→휔(퐴훼)
such that 푓(훼) is a surjection 휔→퐴훼for all 훼∈퐼. Because 퐼is countable,
we have a surjection 푔: 휔→퐼, and since 휔× 휔is countable, we have another
surjection ℎ: 휔→휔× 휔. We now deﬁne
휓: 휔× 휔→
⋃
훼∈퐼
퐴훼
by 휓(푚, 푛) = 푓(푔(푚))(푛) and let
휑: 휔→
⋃
훼∈퐼
퐴훼
be deﬁned by 휑= 휓◦ℎ. To check that 휑is onto, let 푎∈퐴훼, some 훼∈퐼. Since
푔is onto, there exists 푖∈휔so that 푔(푖) = 훼. Furthermore, since 푓(훼) is onto,
we have 푗∈휔such that 푓(훼)(푗) = 푎, and since ℎis onto, there exists 푘∈휔so
that ℎ(푘) = (푖, 푗). Therefore,
휑(푘) = (휓◦ℎ)(푘) = 휓(푖, 푗) = 푓(푔(푖))(푗) = 푓(훼)(푗) = 푎.
For example, ⋃{푛ℤ: 푛∈휔} and ⋃{ℚ× {푛} : 푛∈휔} are countable.

Section 6.3 CARDINAL NUMBERS
313
Alephs
Cantor denoted the ﬁrst inﬁnite cardinal 휔by ℵ0. The symbol ℵ(aleph) is the ﬁrst
letter of the Hebrew alphabet. The next magnitude of inﬁnity is ℵ1, which seems to
exist by Theorem 6.2.13. This continues and gives an increasing sequence of inﬁnite
cardinals, and since natural numbers must be less than any inﬁnite cardinal, we have
0 ≺1 ≺2 ≺· · · ≺ℵ0 ≺ℵ1 ≺ℵ2 ≺· · · .
For instance, 4 ≺ℵ1, ℵ0 ⪯ℵ0, and ℵ3 ≺ℵ7.
EXAMPLE 6.3.18
Although he was unable to prove it, Cantor suspected that ℵ1 = |ℝ|. This con-
jecture is called the continuum hypothesis (햢햧). However, it is possible that
ℵ1 ≺|ℝ|. It is also possible that ℵ1 = |ℝ|. Cantor was unable to prove 햢햧
because it is undecidable assuming the axioms of 헭헙헖. In other words, it is an
햲햳-sentence that can be neither proved nor disproved from 헭헙헖.
Now to deﬁne the other alephs. Pick an ordinal 훼. Deﬁne the function ℎby
ℎ(푔) = least inﬁnite cardinal not in ran(푔),
where 푔is a function with dom(푔) ∈훼. For example, if 훼= 5 and
푔= {(0, 휅0), (1, 휅1), (2, 휅2), (3, 휅3), (4, 휅4)},
then ℎ(푔) is the least inﬁnite cardinal not in {휅0, 휅1, 휅2, 휅3, 휅4}. By Transﬁnite Recur-
sion (6.1.23), there exists a unique function 푓with domain 훼and
푓(훽) = least inﬁnite cardinal not in ran(푓↾훽)
for all 훽∈훼. Deﬁne
ℵ훽= 푓(훽).
Since ℎ(0) = 휔, we have that ℵ0 = 휔. Moreover, the deﬁnition of 푓implies that
ℵ1 = least inﬁnite cardinal not in {ℵ0},
ℵ2 = least inﬁnite cardinal not in {ℵ0, ℵ1},
ℵ3 = least inﬁnite cardinal not in {ℵ0, ℵ1, ℵ2},
⋮
ℵ휔= least inﬁnite cardinal not in {ℵ푛: 푛∈휔},
⋮
ℵ훼= least inﬁnite cardinal not in {ℵ훽: 훽∈훼}
⋮
The question at this point is whether the alephs name all of the inﬁnite cardinals.
The next theorem answers the question.

314
Chapter 6 ORDINALS AND CARDINALS
THEOREM 6.3.19
For every inﬁnite cardinal 휅, there exists an ordinal 훼such that 휅= ℵ훼.
PROOF
Suppose 휅≠ℵ훼for every ordinal 훼. We can assume that 휅is the minimal
such cardinal. Thus, for all cardinals 휆∈휅, there exists an ordinal 훽휆such that
휆= ℵ훽휆. Therefore, the least inﬁnite cardinal not an element of
{ℵ훽휆: 휆∈휅∧휆is a cardinal}
is the next aleph, but this is 휅.
EXAMPLE 6.3.20
The generalized continuum hypothesis (햦햢햧) states that for every ordinal 훼,
ℵ훼+ = |P(ℵ훼)|.
When 훼= 0, 햦햢햧implies that
ℵ1 = |P(ℵ0)| = |ℝ|,
which is 햢햧(Example 6.3.18). Like 햢햧, 햦햢햧is undecidable in 헭헙헖.
Like the ordinals, the cardinals can be divided into two classes.
DEFINITION 6.3.21
Let 휅be a nonzero cardinal number. If 휅∈휔or there exists an ordinal 훼such
that 휅= ℵ훼+, then 휅is a successor cardinal. Otherwise, 휅is a limit cardinal.
For example, the positive natural numbers and ℵ1 are successor cardinals, while ℵ0
and ℵ휔are limit cardinals. Notice that if 휅is a limit cardinal,
휅=
⋃
{휆: 휆∈휅∧휆is a cardinal}.
Exercises
1. Prove that |훼| = |훼+| for every ordinal 훼.
2. Let 푝(푥) be a formula. Prove that if 푝(훼) is false for some ordinal 훼, then there exists
a least ordinal 훽such that 푝(훽) is false.
3.
Prove that the function 푓in the proof of Lemma 6.3.5 is a bijection.
4. Show that the following attempted generalization of Lemma 6.3.5 is false: Let 훼be
an ordinal and 푎∈퐴. If |퐴| = ℵ훼+, then |퐴⧵{푎}| = ℵ훼.
5. Demonstrate Corollaries 6.3.12 and 6.3.13.
6. Let 퐴and 퐵be ﬁnite sets. Prove the following.

Section 6.3 CARDINAL NUMBERS
315
(a) |퐴∪퐵| = |퐴| + |퐵| −|퐴∩퐵|
(b) |퐴∩퐵| = |퐴| −|퐴⧵퐵|
(c) |퐴× 퐵| = |퐴| ⋅|퐵|
7. Prove that the intersection and union of ﬁnite sets is ﬁnite is ﬁnite.
8. Prove that every ﬁnite set has a choice function without using the axiom of choice.
9. Let 푅and 푅−1 be well-orderings of a set 퐴. Prove that 퐴is ﬁnite.
10. Show that ℤis countable.
11. Let 퐴be inﬁnite. Find inﬁnite sets 퐵and 퐶such that 퐴= 퐵∪퐶.
12. If 퐵is countable, prove that |퐴× 퐵| = |퐴|.
13. Let 퐴and 퐵be sets and 퐴is countable. Prove that 퐵is countable when 퐴≈퐵.
14. Let 퐴and 퐵be countable sets. Show that the given sets are countable.
(a) 퐴∪퐵
(b) 퐴∩퐵
(c) 퐴× 퐵
(d) 퐴⧵퐵
15. Let 퐴0, 퐴1, … , 퐴푛−1 be countable sets. Prove that the given sets are countable.
(a) 퐴0 ∪퐴1 ∪· · · ∪퐴푛−1
(b) 퐴0 ∩퐴1 ∩· · · ∩퐴푛−1
(c) 퐴0 × 퐴1 × · · · × 퐴푛−1
16. Prove.
(a) If 퐴∪퐵is countable, 퐴and 퐵are countable.
(b) If 퐴is countable, 2휔≈퐴휔
17. Let ℱbe a set of cardinals. Prove that ⋃ℱis a cardinal.
18. A real number is algebraic if it is a root of a nonzero polynomial with integer
coeﬃcients. A real number that is not algebraic is transcendental. Prove that the set
of algebraic numbers is countable and the set of transcendental numbers is uncountable.
19. Take a set 퐴and deﬁne 퐵= {훼: 훼is an ordinal∧훼⪯퐴}. [See Hartogs’ theorem
(6.1.22).] Prove the following.
(a) 퐵is a cardinal.
(b) |퐴| ≺퐵.
(c) 퐵is the least cardinal such that |퐴| ≺퐵.
20. Assuming 햦햢햧, ﬁnd |P(P(P(P(P(ℝ)))))|.
21. Prove that for all ordinals 훼and 훽, if 훼∈훽, then ℵ훼∈ℵ훽.

316
Chapter 6 ORDINALS AND CARDINALS
22. Recursively deﬁne the following function using ℶ(beth), the second letter of the
Hebrew alphabet. Let 훼be an ordinal.
ℶ0 = ℵ0,
ℶ훼+ = 2ℶ훼,
ℶ훼=
⋃
훽∈훼
ℶ훽if 훼is a limit.
(a) Use ℶto restate 햦햢햧.
(b) Use transﬁnite recursion (Corollary 6.1.24) to prove that ℶdeﬁnes a function.
6.4
ARITHMETIC
Since every natural number is both an ordinal and a cardinal, we want to extend the
operations on 휔to all of the ordinals and all of the cardinals. Since the purpose of the
ordinals is to characterize well-ordered sets but the purpose of the cardinals is to count,
we expect the two extensions to be diﬀerent.
Ordinals
Deﬁnitions 5.2.15 and 5.2.18 deﬁne what it means to add and multiply ﬁnite ordinals.
When generalizing these two deﬁnitions to the inﬁnite ordinals, we must take care
because addition and multiplication should be binary operations, but if we deﬁned these
operations on all ordinals, their domains would not be sets by the Burali-Forti Theroem
(6.1.21), resulting in the operations not being sets. Therefore, we choose an ordinal and
deﬁne addition and multiplication on it. Since 1 + 1 ∉2, the ordinal must be a limit
ordinal.
DEFINITION 6.4.1
Let 휁be a limit ordinal. For all 훼, 훽∈휁,
∙훼+ 0 = 훼,
∙훼+ 훽+ = (훼+ 훽)+,
∙훼+ 훽= ⋃{훼+ 훿: 훿∈훽} if 훽is a limit ordinal.
As with addition of natural numbers (Deﬁnition 5.2.15), to prove that Deﬁnition 6.4.1
gives a binary operation, let 휓: 휁→휁be the successor function. By transﬁnite
recursion (Corollary 6.1.24), there exist unique functions 휑훼: 훼→휁for all 훼∈휁
such that
∙휑훼(0) = 훼
∙휑훼(훽+) = 휓(휑훼(훽)) = 휑훼(훽)+

Section 6.4 ARITHMETIC
317
∙for all limit ordinals 훽∈휁,
휑훼(훽) =
⋃
훿∈훽
휑훼(훿).
Deﬁne A : 휁× 휁→휁by A(훼, 훽) = 휑훼(훽). By the uniqueness of each 휑훼, the binary
operation A is the function of Deﬁnition 6.4.1, so
훼+ 훽= A(훼, 훽).
Furthermore, take 휁′ to be a limit ordinal such that 휁⊆휁′ and deﬁne 휓′ : 휁′ →휁′ to
be the successor function. As above, there are unique functions 휑′
훼for all 훼∈휁′ with
the same properties as 휑훼. Notice that
휑훼= 휑′
훼↾휁.
Otherwise, 휑′
훼↾휁would have the same properties as 휑훼yet be a diﬀerent function,
contradicting the uniqueness given by transﬁnite recursion. Next, deﬁne the binary
operation A′ : 휁′ × 휁′ →휁′ by A′(훼, 훽) = 휑′
훼(훽). Therefore,
A = A′ ↾(휁× 휁).
This implies that although addition is not deﬁned as a binary operation on all ordinals,
we can add any two ordinals and obtain the same sum independent of the ordinal on
which the addition is deﬁned.
Consider 푚∈휔. Since 휔is a limit ordinal,
푚+ 휔=
⋃
{푚+ 푛: 푛∈휔} = 휔.
However,
휔+ 1 = 휔+ 0+ = (휔+ 0)+ = 휔+ = 휔∪{휔},
and
휔+ 2 = 휔+ 1+ = (휔+ 1)+ = (휔∪{휔})+ = 휔∪{휔} ∪{휔∪{휔}} = 휔++.
Therefore, addition of inﬁnite ordinals is not commutative. Moreover, an order isomor-
phism can be deﬁned between 휔+푛and ({0}×휔)∪({1}×푛) ordered lexicographically
(Exercise 4.3.16) as
0
1
2
…
푛
…
휔
휔+
휔++
…
↕
↕
↕
↕
↕
↕
↕
(0, 0)
(0, 1)
(0, 2)
…
(0, 푛)
…
(1, 0)
(1, 1)
(1, 2)
…
This means that 휔+ 푛looks like 휔followed by a copy of 푛. Generalizing, the ordinal
휔+ 휔looks like 휔followed by a copy of 휔. In particular,
휔+ 휔=
⋃
푛∈휔
휔+ 푛,
which means that the proof its existence requires a replacement axiom (5.1.9). All of
this suggests the next result.

318
Chapter 6 ORDINALS AND CARDINALS
LEMMA 6.4.2
Let 휁be a limit ordinal and 훼, 훽∈휁. If 푥∈훼+ 훽, then 푥∈훼or 푥∈훼+ 푏for
some 푏∈훽.
PROOF
Deﬁne
퐴= {푧∈휁: ∀푥(푥∈훼+ 푧→푥∈훼∨∃푔∈푧[푥∈훼+ 푔])}.
Clearly, 0 ∈퐴, so take 훾∈휁such that 헌햾헀(휁, 훾) ⊆퐴.
∙Let 훾= 훿+ for some ordinal 훿. Take 푥∈훼+ 훿+, which implies that
푥∈(훼+ 훿)+. This means that 푥∈훼+ 훿or 푥= 훼+ 훿. If 푥∈훼+ 훿, then
we are done. If 푥= 훼+ 훿, then 푥∈(훼+ 훿)+ = 훼+ 훿+.
∙Let 훾be a limit ordinal. Take 푥∈훼+ 훾. This means that 푥∈훼+ 훿for
some 훿∈훾. Therefore, 푥∈훼or 푥∈훼+ 푑for some 푑∈훿⊂훾.
Using Lemma 6.4.2, we can prove the next useful result.
LEMMA 6.4.3
Let 휁be a limit ordinal. If 훼, 훽∈휁, then 훼+ 훽= 훼∪{훼+ 푏: 푏∈훽}.
PROOF
Deﬁne
퐴= {푧∈휁: 훼+ 푧= 훼∪{훼+ 푔: 푔∈푧}}.
We have that 0 ∈퐴, so assume 헌햾헀(휁, 훾) ⊆퐴, where 훾∈휁.
∙Suppose 훾= 훿+. Then,
훼∪{훼+ 푑: 푑∈훿+} = 훼∪{훼+ 푑: 푑∈훿} ∪{훼+ 훿}
= (훼+ 훿) ∪{훼+ 훿}
= (훼+ 훿)+
= 훼+ 훿+.
∙Let 훾be a limit ordinal. Take 푥∈훼+ 훾. By Lemma 6.4.2, we have 푥∈훼
or 푥∈훼+ 푔for some 푔∈훾. If the former, we are done, so suppose the
latter. In this case, the assumption gives
훼+ 푔= 훼∪{훼+ 푔′ : 푔′ ∈푔}.
Thus, 푥= 훼+푔′ for some 푔′ ∈푔∈훾. Conversely, if 푥∈훼, then 푥∈훼+0,
so 푥∈훼+ 훾. For the other case, let 푥∈{훼+ 푔: 푔∈훾}. This implies that
푥∈(훼+ 푔)+ = 훼+ 푔+ for some 푔∈훾. Since 푔+ ∈훾,
푥∈
⋃
{훼+ 푔′ : 푔′ ∈훾} = 훼+ 훾.
Although ordinal addition is not commutative, it does have other familiar properties
as noted in the next result.

Section 6.4 ARITHMETIC
319
THEOREM 6.4.4
Addition of ordinals is associative, and 0 is the additive identity.
PROOF
Let 휁be a limit ordinal. Deﬁne
퐴= {훽∈휁: 0 + 훽= 훽}.
Suppose 훾is an ordinal such that 헌햾헀(휆, 훾) ⊆퐴. We have two cases to check.
∙Let 훾= 훿+ for some ordinal 훿. Then,
0 + 훾= 0 + 훿+ = (0 + 훿)+ = 훿+ = 훾.
∙Let 훾be a limit ordinal. We then have
0 + 훾=
⋃
훿∈훾
(0 + 훿) =
⋃
훿∈훾
훿= 훾.
In both cases, 훾∈퐴, so by transﬁnite induction, 퐴= 휁. Since we can also prove
that
휁= {훽∈휁: 훽+ 0 = 훽},
we conclude that 0 is the additive identity.
To prove that ordinal addition is associative, we proceed by transﬁnite induc-
tion. Let 훼, 훽, 훿∈휁. Deﬁne
퐵= {푧∈휁: 훼+ (훽+ 푧) = (훼+ 훽) + 푧}.
Assume that 헌햾헀(휁, 훾) ⊆퐵. Then, 훾∈퐵because by Lemma 6.4.3, we have
훼+ (훽+ 훾) = 훼∪
⋃
{훼+ 푥: 푥∈훽+ 훾}
= 훼∪
⋃
{훼+ 푥: 푥∈훽∨∃푔(푔∈훾→푥= 훽+ 푔)}
= 훼∪
⋃
({훼+ 푥: 푥∈훽} ∪{훼+ (훽+ 푔) : 푔∈훾})
= 훼∪
⋃
{훼+ 푥: 푥∈훽} ∪
⋃
{(훼+ 훽) + 푔: 푔∈훾}
= (훼∪훽) ∪
⋃
{훼+ 훽+ 푔: 푔∈훾}
= (훼+ 훽) + 훾.
Note that Exercise 3.4.28(e) is used on the fourth equality.
DEFINITION 6.4.5
Let 휁be a limit ordinal. For all 훼, 훽∈휁,
∙훼⋅0 = 0,

320
Chapter 6 ORDINALS AND CARDINALS
∙훼⋅훽+ = 훼⋅훽+ 훼,
∙훼⋅훽= ⋃{훼⋅훿: 훿∈훽} if 훽is a limit ordinal.
As with ordinal addition, ordinal multiplication is well-deﬁned by transﬁnite recursion
(Exercise 3). Also, as with addition of ordinals, certain expected properties hold, while
others do not. The next two results are the analog of Lemma 6.4.3 and Theorem 6.4.4.
Their proofs are Exercise 4.
LEMMA 6.4.6
If 훼and 훽are ordinals, 훼⋅훽= {훼⋅푏+ 푎: 푏∈훽∧푎∈훼}.
THEOREM 6.4.7
Multiplication of ordinals is associative, and 1 is the multiplicative identity.
Observe that
0 ⋅휔=
⋃
{0 ⋅푛: 푛∈휔} = 0.
Also, 휔⋅1 = 1 ⋅휔= 휔(Theorem 6.4.7), so multiplication on the right by a natural
number behaves as we would expect in that
휔⋅2 = 휔⋅1 + 휔= 휔+ 휔
(6.1)
and
휔⋅3 = 휔⋅2 + 휔= 휔+ 휔+ 휔,
but
2 ⋅휔=
⋃
{2 ⋅푛: 푛∈휔} = 휔
and
3 ⋅휔=
⋃
{3 ⋅푛: 푛∈휔} = 휔.
Hence, multiplication of ordinals is not commutative. Because of this, it is not surpris-
ing that there are issues with the distributive law. For ordinals, there is a left distributive
law but not a right distributive law (Exercise 9).
THEOREM 6.4.8 [Left Distributive Law]
훼⋅(훽+ 훿) = 훼⋅훽+ 훼⋅훿for all ordinals 훼, 훽, and 훿.
Since addition of ordinals is an operation on a limit ordinal 휁, we know that for all
ordinals 훼, 훽, 훿∈휁,
훼= 훽⇒훼+ 훿= 훽+ 훿
and
훼= 훽⇒훼⋅훿= 훽⋅훿.
The next result gives information regarding how ordinal multiplication behaves with
an inequality.

Section 6.4 ARITHMETIC
321
THEOREM 6.4.9
Let 훼, 훽, and 훿be ordinals.
∙If 훼⊂훽, then 훿+ 훼⊂훿+ 훽.
∙If 훼⊆훽, then 훼+ 훿⊆훽+ 훿.
∙If 훼⊂훽and 훿≠0, then 훿⋅훼⊂훿⋅훽.
∙If 훼⊆훽, then 훼⋅훿⊆훽⋅훿.
PROOF
We prove the third part, leaving the others to Exercise 7. Let 훼⊂훽and 훿≠0.
Then, by Lemma 6.4.6,
훿⋅훼= {훿⋅푎+ 푑: 푎∈훼∧푑∈훿} ⊂{훿⋅푏+ 푑: 푏∈훽∧푑∈훿} = 훿⋅훽.
Finally, we deﬁne exponentiation so that it generalizes exponentiation on 휔(Exer-
cise 5.2.17). It is a binary operation (Exercise 3).
DEFINITION 6.4.10
Let 휁be a limit ordinal and 훼, 훽∈휁.
∙훼0 = 1
∙훼훽+ = 훼훽⋅훼
∙훼훽= ⋃{훼훿: 훿∈훽} if 훽is a limit ordinal.
For example,
휔1 = 휔0+ = 휔0 ⋅휔= 1 ⋅휔= 휔,
and
휔2 = 휔1+ = 휔1 ⋅휔= 휔⋅휔,
so raising an ordinal to a natural number appears to behave as expected. Also,
1휔=
⋃
{1푛: 푛∈휔} =
⋃
{1} = 1
and
2휔=
⋃
{2푛: 푛∈휔} = 휔.
We leave the proof of the following properties of ordinal exponentiation to Exercise 11.

322
Chapter 6 ORDINALS AND CARDINALS
THEOREM 6.4.11
Let 훼, 훽, 훿be ordinals.
∙훼훽+훿= 훼훽⋅훼훿.
∙(훼훽)훿= 훼훽⋅훿.
Cardinals
Even though the ﬁnite cardinals are the same sets as the ﬁnite ordinals and every inﬁnite
cardinal is a limit ordinal, the arithmetic deﬁned on the cardinals will only apply when
the given sets are viewed as cardinals. The deﬁnitions for addition, multiplication, and
exponentiation for cardinals are not given recursively.
DEFINITION 6.4.12
Let 휅and 휆be cardinals.
∙휅+ 휆= |(휅× {0}) ∪(휆× {1})|
∙휅⋅휆= |휅× 휆|
∙휅휆= |휆휅|.
Since ordinal arithmetic was simply a generalization of the arithmetic of natural num-
bers, that the addition worked in the ﬁnite case was not checked. Here this is not the
case, so let us check
2 + 3 = |(2 × {0}) ∪(3 × {1})| = |{(0, 0), (1, 0), (0, 1), (1, 1), (2, 1)}| = 5.
Also,
3 + 2 = |(3 × {0}) ∪(2 × {1})| = |{(0, 0), (1, 0), (2, 0), (0, 1), (1, 1)}| = 5.
This suggests that cardinal addition is commutative. This and other basic results are
given in the next theorem. Some details of the proof are left to Exercise 14.
THEOREM 6.4.13
Addition of cardinals is associative and commutative, and 0 is the additive iden-
tity.
PROOF
Let 휅, 휆, and 휇be cardinals. Addition is associative because
(휅× {0}) ∪[([휆× {0}] ∪[휇× {1}]) × {1}]
is equinumerous to
[([휅× {0}] ∪[휆× {1}]) × {0}] ∪(휇× {1}),

Section 6.4 ARITHMETIC
323
it is commutative because
(휅× {0}) ∪(휆× {1}) ≈(휆× {1}) ∪(휅× {0}),
and 0 is the additive identity because
(휅× {0}) ∪(0 × {1}) = (휅× {0}).
Now let us multiply
2 ⋅3 = |{0, 1} × {0, 1, 2}| = |{(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)}| = 6
and
3 ⋅2 = |{0, 1, 2} × {0, 1}| = |{(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)}| = 6.
As with cardinal addition, it seems that cardinal multiplication is commutative. This
and other results are stated in the next theorem. Its proof is left to Exercise 15.
THEOREM 6.4.14
Multiplication of cardinals is associative and commutative, and 1 is the multi-
plicative identity.
As with ordinal arithmetic (Theorem 6.4.8), cardinal arithmetic has a left distribution
law, but since cardinal multiplication is commutative, cardinal arithmetic also has a
right distribution law.
THEOREM 6.4.15 [Distributive Law]
Let 휅, 휆, and 휇be cardinals.
∙휅⋅(휆+ 휇) = 휅⋅휆+ 휅⋅휇.
∙(휅+ 휆) ⋅휇= 휅⋅휇+ 휆⋅휇.
PROOF
The left distribution law holds because
휅× ([휆× {0}] ∪[휇× {1}]) ≈([휅× 휆] × {0}) ∪([휅× 휇] × {1}).
The remaining details of the proof are left to Exercise 16.
The last of the operations of Deﬁnition 6.4.12 is exponentiation. Let 휅be a cardinal.
Observe that since there is exactly one function 0 →휅(Exercise 4.4.16),
휅0 = |0휅| = 1
and if 휅≠0,
0휅= |휅0| = 0
because there are no functions 휅→0, and by Theorem 6.2.13,
휅≺2휅.
In addition, cardinal exponentiation follows other expected rules.

324
Chapter 6 ORDINALS AND CARDINALS
THEOREM 6.4.16
Let 휅, 휆, and 휇be cardinals.
∙휅휆+휇= 휅휆⋅휅휇.
∙(휅⋅휆)휇= 휅휇⋅휆휇.
∙(휅휆)휇= 휅휆⋅휇.
PROOF
We prove the last part and leave the rest to Exercise 17. Deﬁne
휑: 휇(휆휅) →휆×휇휅
such that for all 휓∈휇(휆휅), 훼∈휆and 훽∈휇,
휑(휓)(훼, 훽) = 휓(훼)(훽).
We claim that 휑is a bijection.
∙Let 휓1, 휓2 ∈휇(휆휅). Assume that 휑(휓1) = 휑(휓2). Take 훼∈휆and 훽∈휇.
Then,
휓1(훼)(훽) = 휑(휓1)(훼, 훽) = 휑(휓2)(훼, 훽) = 휓2(훼)(훽).
Therefore, 휓1 = 휓2, and 휑is one-to-one.
∙Let 휓∈휆×휇휅. For 훼∈휆and 훽∈휇, deﬁne 휓′(훼)(훽) = 휓(훼, 훽). This
implies that 휑(휓′) = 휓, so 휑is onto.
Since every inﬁnite cardinal number can be represented by an ℵ, let us determine
how to calculate using this notation. We begin with a lemma.
LEMMA 6.4.17
If 푛∈휔and 휅an inﬁnite cardinal, 푛+ 휅= 푛⋅휅= 휅.
PROOF
Let 푛be a natural number. Deﬁne 휑: (푛× {0}) ∪(휅× {1}) →휅by
휑(푖, 0) = 푖for all 푖< 푛,
휑(훼, 1) = 푛+ 훼for all 훼∈휅.
For example, if 푛= 5, then 휑(4, 0) = 4, 휑(0, 1) = 5, 휑(6, 1) = 11, 휑(휔, 1) = 휔,
and 휑(휔+ 1, 1) = 휔+ 1. Therefore, 푛+ 휅= 휅because 휑is a bijection. That
푛⋅휅= 휅is left to Exercise 18.
Lemma 6.4.17 allows us to compute with alephs.

Section 6.4 ARITHMETIC
325
THEOREM 6.4.18
Let 훼and 훽be ordinals and 푛∈휔.
∙푛+ ℵ훼= 푛⋅ℵ훼= ℵ훼.
∙ℵ훼+ ℵ훽= ℵ훼⋅ℵ훽=
{
ℵ훼
if 훼≥훽,
ℵ훽
otherwise.
PROOF
The ﬁrst part follows by Lemma 6.4.17. To prove the addition equation from
the second part, let 훼and 훽be ordinals. Without loss of generality assume that
훼⊆훽. By Deﬁnition 6.4.12,
ℵ훼+ ℵ훽= |(ℵ훼× {0}) ∪(ℵ훽× {1})|.
Since ℵ훽= |ℵ훽× {1}|,
ℵ훽⪯|(ℵ훼× {0}) ∪(ℵ훽× {1})|.
Furthermore, because ℵ훼⊆ℵ훽,
|(ℵ훼× {0}) ∪(ℵ훽× {1})| ⪯|(ℵ훽× {0}) ∪(ℵ훽× {1})|
= |ℵ훽× {0, 1}|
= ℵ훽.
Because of Lemma 6.4.17, the last equality holds since ℵ훽is inﬁnite and {0, 1}
is ﬁnite. Hence,
ℵ훼+ ℵ훽≈ℵ훽
by the Cantor–Schröder–Bernstein theorem (6.2.11). Since both ℵ훼+ℵ훽and ℵ훽
are cardinals, ℵ훼+ ℵ훽= ℵ훽.
For example, ℵ5 + ℵ9 = ℵ5 ⋅ℵ9 = ℵ9. More generally, we quickly have the following
corollary by Theorem 6.3.19.
COROLLARY 6.4.19
For every inﬁnite cardinal 휅, both 휅+ 휅= 휅and 휅⋅휅= 휅.
Exercises
1. Let 풜= {퐴0, 퐴1, … , 퐴푛−1} be a pairwise disjoint family of sets. Assuming that
the sets are distinct, prove that the cardinality of ⋃풜is equal to the sum
|퐴0| + |퐴1| + · · · + |퐴푛−1|.
2. Let 훼and 훽be ordinals. Let 휑: 훼→훽be a function such that 휑(훿) ∈휑(훾) for all
훿∈훾∈훼(Compare Lemma 6.1.2). Prove the following.

326
Chapter 6 ORDINALS AND CARDINALS
(a) 훼⊆훽.
(b) 훿⊆휑(훿) for all 훿∈훼.
3. Let 휁be a limit ordinal. Use transﬁnite recursion to prove that ordinal multiplication
(Deﬁnition 6.4.5) and ordinal exponentiation (Deﬁnition 6.4.10) are binary operations
on 휁.
4. Prove Lemma 6.4.6 and Theorem 6.4.7.
5. For every ordinal 훼, prove that 0 ⋅훼= 0.
6. Prove that for all 푛∈휔, 푛+ 휔= 푛⋅휔as ordinals. Can this be generalized to
훼+ 훽= 훼⋅훽for ordinals 훼∈훽with 훽being inﬁnite? If so, is the 훼∈훽required?
7. Prove the remaining parts of Theorem 6.4.9.
8. Find ordinals 훼, 훽, and 훿such that the following properties hold.
(a) 훼⊂훽but 훽+ 훿⊆훼+ 훿.
(b) 훼⊂훽but 훽⋅훿⊆훼⋅훿.
9. Let 훼, 훽, and 훿be ordinals.
(a) Prove that 훼⋅(훽+ 훿) = 훼⋅훽+ 훼⋅훿.
(b) Show that it might be the case that (훼+ 훽) ⋅훿̸≠훼⋅훿+ 훽⋅훿.
(c) For which ordinals does the right distribution law hold?
10. Let 훼, 훽, and 훿be ordinals. Prove the following.
(a) 훼+ 훽∈훼⋅훿if and only if 훽∈훿.
(b) 훼+ 훽= 훼+ 훿if and only if 훽= 훿.
(c) If 훼+ 훿∈훽+ 훿, then 훼∈훽.
(d) 훼⋅훽∈훼⋅훿if and only if 훽∈훿and 훼≠0.
(e) If 훼⋅훽= 훼⋅훿, then 훽= 훿or 훼= 0.
11. Prove Theorem 6.4.11.
12. Let 훼, 훽, and 훿be ordinals. Prove the following.
(a) 훼훽∈훼훿if and only if 훽∈훼and 1 ∈훼.
(b) If 훼∈훽, then 훼훿⊆훽훿.
(c) If 훼훿∈훽훿, then 훼∈훽.
(d) If 1 ∈훼, then 훽⊆훼훽.
(e) If 훼∈훽, there exists a unique ordinal 훾such that 훼+ 훾= 훽.
13. Prove that the ordinal 휔+ 휔is not a cardinal.
14. Provide the details for the proof of Theorem 6.4.13.
15. Prove Theorem 6.4.14.
16. Provide the details to the proof of Theorem 6.4.15.
17. Prove the remaining parts of Theorem 6.4.16.
18. Prove that for any natural number 푛and inﬁnite cardinal 휅, 푛⋅휅= 휅.

Section 6.5 LARGE CARDINALS
327
19. Prove that if 휅is iniﬁnte, (휅+)휅= 2휅.
20. Is there a cancellation law for ordinals or for cardinals?
21. Prove that 휅+휆= 휅⋅휆= 휆, given that 휅is a countable cardinal and 휆is an inﬁnite
cardinal.
22. Generalize Exercise 21 by showing that if 휅and 휆are cardinals with 휆inﬁnite
such that 휅⪯휆, then 휅+ 휆= 휅⋅휆= 휆.
23. Let 휅and 휆be cardinals with ℵ0 ⪯휆. Show that if 2 ⪯휅≺휆, then 휅휆= 2휆.
24. Prove for all ordinals 훼that |훼| ≺ℵ훼.
25. For all ordinals 훼, deﬁne Hartogs’ function by
Γ(훼) = {훽: 훽is an ordinal ∧훽⪯훼}.
Prove that Γ(훼) is an ordinal and 훼≺Γ(훼) for all ordinals 훼.
26. Using Exercise 25, deﬁne an initial number 휔훼as follows.
휔0 = 휔,
휔훾+ = Γ(휔훾),
휔훾=
⋃
훿∈훾
휔훿if 훾is a limit ordinal.
Prove that initial numbers are limit ordinals and 휔1 is the ﬁrst uncountable ordinal.
27. Prove that there is no greatest initial number.
28. For all ordinals 훼, show that ℵ훼= |휔훼|. Can we write ℵ훼= 휔훼?
29. For all countable ordinals 훼, show that 2ℵ훼= ℵ훼+ implies that 2ℵ휔1 = ℵ휔1+1.
6.5
LARGE CARDINALS
Since every cardinal is a limit ordinal, every cardinal 휅can be written in the form
휅=
⋃
{훼: 훼∈휅}.
In particular, for the limit cardinal ℵ휔+휔, we have that
ℵ휔+휔=
⋃
{훼: 훼∈ℵ휔+휔}.
(6.2)
Notice that (6.2) is the union of a set with ℵ휔+휔elements. However, we also have
ℵ휔+휔=
⋃
{ℵ훼: 훼∈휔+ 휔},
(6.3)
and
ℵ휔+휔=
⋃
{ℵ휔+푛: 푛∈휔}.
(6.4)
Both (6.3) and (6.4) are unions of sets with ℵ0 elements. The next deﬁnition is in-
troduced to handle these diﬀerences. Since inﬁnite cardinals are limit ordinals, the
deﬁnition is given for limit ordinals.

328
Chapter 6 ORDINALS AND CARDINALS
DEFINITION 6.5.1
The coﬁnality of a limit ordinal 훼is denoted by 햼햿(훼) and deﬁned as the least
cardinal 휆such that there exists ℱ⊆훼with |ℱ| = 휆and 훼= ⋃ℱ.
Observe that 햼햿(훼) ⪯|훼| because 훼= ⋃훼. There can be other sets 퐵such that
훼= ⋃퐵, and they might have diﬀerent cardinalities. Any set of ordinals 퐵with this
property is said to be coﬁnal in 훼. Moreover, we can write 퐵= {훽훿: 훿∈휅} for some
cardinal 휅, so
훼=
⋃
훿∈휅
훽훿,
and when 휅= 햼햿(훼),
훼=
⋃
훿∈햼햿(훼)
훽훿.
EXAMPLE 6.5.2
Since the ﬁnite union of a ﬁnite set is ﬁnite, the coﬁnality of any inﬁnite set must
be inﬁnite. Therefore, because
휔=
⋃
푛∈휔
푛,
we see that 햼햿(휔) = ℵ0. Also, since
ℵ휔=
⋃
푛∈휔
ℵ푛,
we conclude that 햼햿(ℵ휔) = ℵ0 and {ℵ푛: 푛∈휔} is coﬁnal in ℵ휔. However,
햼햿(ℵ1) = ℵ1 because the countable union of countable sets is countable (Theo-
rem 6.3.17).
Regular and Singular Cardinals
Since inﬁnite cardinals are limit ordinals, we can classify the cardinals based on their
coﬁnalities. We make the following deﬁnition.
DEFINITION 6.5.3
A cardinal 휅is regular if 휅= 햼햿(휅), else it is singular.
Notice that Example 6.5.2 shows that ℵ0 and ℵ1 are regular but ℵ휔is singular. This
implies a direction to follow to characterize the cardinal numbers. We begin with the
successors.
THEOREM 6.5.4
Successor cardinals are regular.

Section 6.5 LARGE CARDINALS
329
PROOF
Let 훼be an ordinal and let ℱ⊆ℵ훼+1 such that ℵ훼+1 = ⋃ℱ. This implies that
|훽| ⪯ℵ훼for all 훽∈ℱ. Thus,
⋃
ℱ⪯|ℱ| ⋅ℵ훼.
By Theorem 6.4.18, we conclude that ℵ훼+1 ⪯|ℱ|, so 햼햿(ℵ훼+1) = ℵ훼+1 by the
Cantor–Schröder–Bernstein theorem (6.2.11).
Since ℵ0 is regular, Theorem 6.5.4 tells us where to ﬁnd the singular cardinals.
COROLLARY 6.5.5
A singular cardinal is an uncountable limit cardinal.
Because we have not proved the converse of Corollary 6.5.5, we investigate the coﬁ-
nality of certain limit cardinals in an attempt to determine which limit cardinals are
singular.
THEOREM 6.5.6
If 훼is a limit ordinal, 햼햿(ℵ훼) = 햼햿(훼).
PROOF
The proof uses the Cantor–Schröder–Bernstein theorem (6.2.11). Let 훼be a limit
ordinal.
∙We ﬁrst show that 햼햿(ℵ훼) ⪯햼햿(훼). Let 퐴be a coﬁnal subset of 훼such that
|퐴| = 햼햿(훼). Notice that if 훽∈퐴, then ℵ훽∈ℵ훼. On the other hand, take
훿∈ℵ훼, which implies that |훿| ≺ℵ훼. Therefore, there exists 훾∈훼such
that |훿| = ℵ훾. Since 퐴is coﬁnal in 훼, there exists 휁∈퐴such that 훿∈휁.
Hence, 훿∈ℵ휁, which implies that 훿∈⋃{ℵ훽: 훽∈퐴}. Therefore,
ℵ훼=
⋃
{ℵ훽: 훽∈퐴},
from which follows,
햼햿(ℵ훼) ⪯|퐴| = 햼햿(훼).
∙We now show 햼햿(훼) ⪯햼햿(ℵ훼). Let 퐴⊆ℵ훼so that ℵ훼= ⋃퐴and |퐴| =
햼햿(ℵ훼). Deﬁne
ℱ= {훿∈훼: ∃훾(훾∈퐴∧|훾| = ℵ훿)}.
Then, 훽= ⋃ℱis an ordinal by Theorem 6.1.16. For all 휁∈퐴, we have
that 휁∈ℵ훽+1 because |휁| ⪯ℵ훽. Hence,
⋃
퐴⊆ℵ훽,
from which follows that 훼∈훽, which means that 훼⊆⋃ℱ. Therefore,
since the elements of ℱare ordinals of 훼, we have that 훼= ⋃ℱ, so
햼햿(훼) ⪯|ℱ| = |퐴| = 햼햿(ℵ훼).

330
Chapter 6 ORDINALS AND CARDINALS
Theorem 6.5.6 conﬁrms the result of Example 6.5.2 because
햼햿(ℵ휔) = 햼햿(휔) = ℵ0.
(6.5)
Also,
햼햿(ℵ휔+휔) = 햼햿(휔+ 휔) = ℵ0,
(6.6)
so ℵ휔+휔is singular. Observe that by (6.5) and (6.6),
햼햿(햼햿(ℵ휔)) = 햼햿(햼햿(휔)) = 햼햿(ℵ0) = ℵ0
and
햼햿(햼햿(ℵ휔+휔)) = 햼햿(햼햿(휔+ 휔)) = 햼햿(ℵ0) = ℵ0.
The next result generalizes this and proves that 햼햿(햼햿(훼)) = 햼햿(훼) for every limit ordinal
훼.
THEOREM 6.5.7
For any limit ordinal 훼, 햼햿(훼) is a regular cardinal.
PROOF
Let 훼be a limit ordinal and write 훼= ⋃{퐴훾: 훾∈햼햿(훼)}. For every ordinal
훾∈햼햿(훼), deﬁne 훼훾= ⋃
훿∈훾퐴훿. Then, {훼훾: 훾∈햼햿(훼)} is a chain of ordinals
(Theorem 6.1.16) and
훼=
⋃
{훼훾: 훾∈햼햿(훼)}.
Now write
햼햿(훼) =
⋃
{훽훾: 훾∈햼햿(햼햿(훼))}.
Deﬁne
퐵= {훼훽훾: 훾∈햼햿(햼햿(훼))}.
Let 휁∈훼. This implies that 휁∈훼훾0 for some 훾0 ∈햼햿(훼). Then, 훾0 ∈훽훾1 for
some 훾1 ∈햼햿(햼햿(훼)). Hence,
휁∈훼훾0 ⊆훼훽훾1 ∈퐵,
so 휁∈⋃퐵. Therefore, 훼= ⋃퐵, and this implies that 햼햿(훼) ⪯햼햿(햼햿(훼)). Since
the opposite inequality always holds, by the Cantor–Schröder–Bernstein theorem
(6.2.11), 햼햿(훼) = 햼햿(햼햿(훼)), which means that 햼햿(훼) is regular.
Although the Continuum Hypothesis cannot be proved, it is possible to discover
some information about the value of 2ℵ0. Notice how its proof resembles Cantor’s
diagonalization (page 303). It is due to König (1905).
THEOREM 6.5.8 [König]
If 휅is an inﬁnite cardinal and 햼햿(휅) ⪯휆, then 휅≺휅휆.

Section 6.5 LARGE CARDINALS
331
PROOF
Suppose that 휅is am inﬁnite cardinal number and 햼햿(휅) = 휆. Write
휅=
⋃
{훿훼: 훼∈휆}.
Let ℱ= {푓훽: 훽∈휅} be a subset of 휆휅. Deﬁne 푔: 휆→휅such that
푔(훼) = least element of 휅⧵{푓훽(훿훼) : 훽∈훿훼}.
For any 훼∈휆,
푔(훼) ≠푓훽(훿훼) for all 훽∈훿훼.
Therefore,
푔≠푓훽for all 훽∈훿훼.
(6.7)
Since (6.7) is true for all 훼∈휆and {훿훼: 훼∈휆} is coﬁnal in 휅, we conclude
that 푔≠푓훽for all 훽∈휅. Therefore, 푔∉ℱ, so 휅≺휅휆. Note that the same
argument leads to this conclusion if 햼햿(휅) ≺휆(Exercise 4).
COROLLARY 6.5.9
Let 휅be an inﬁnite cardinal. Then, 휅≺햼햿(2휅).
PROOF
Suppose that 햼햿(2휅) ⪯휅. By König’s theorem (6.5.8), Theorem 6.4.16, and
Corollary 6.4.19,
2휅≺(2휅)햼햿(2휅) ⪯(2휅)휅= 2휅⋅휅= 2휅.
By Corollary 6.5.9,
ℵ0 ≺햼햿(2ℵ0),
but by Example 6.5.2, we know that 햼햿(ℵ휔) = ℵ0, so
햼햿(ℵ휔) ≺햼햿(2ℵ0).
Hence, even though we cannot prove what the cardinality of 2ℵ0 is, we do know that it
is not ℵ휔.
Inaccessible Cardinals
As we have noted, ℵ0 is both a regular and a limit cardinal. Are there any others with
this property?
DEFINITION 6.5.10
A regular limit cardinal that is uncountable is called weakly inaccessible.
It is not possible using the axioms of 헭헙헖to prove the existence of a weakly inac-
cessible cardinal. Here is another class of cardinals “beyond” the weakly inaccessible
cardinals.

332
Chapter 6 ORDINALS AND CARDINALS
DEFINITION 6.5.11
The cardinal 휅is strongly inaccessible if it is an uncountable regular cardinal
such that 2휆≺휅for all 휆≺휅.
Since every strongly inaccessible cardinal is weakly inaccessible (Exercise 1), it is
not possible to prove from the axioms of 헭헙헖that a strongly inaccessible cardinal
exists. However, it is apparent that assuming 햦햢햧, 휅is a weakly inaccessible cardinal
if and only if 휅is a strongly inaccessible cardinal (Exercise 10). Cardinal numbers such
as these are known as large cardinals because assumptions beyond the axioms of 헭헙헖
are required to “reach” them.
Exercises
1. Prove that every strongly inaccessible cardinal is weakly inaccessible.
2. Let 푛∈휔. Show that 햼햿(ℵ푛) = ℵ푛.
3. For all limit ordinals 훼, 훽, and 훿, show that if 훼is coﬁnal in 훽and 훽is coﬁnal in 훿,
then 훼is coﬁnal in 훿.
4. Rewrite the proof of König’s theorem (6.5.8) assuming that 햼햿(휅) ≺휆.
5. Let 훼and 훽be limit ordinals. Prove that 햼햿(훼) = 햼햿(훼) if and only if (훼, ⊆) and
(훽, ⊆) have order isomorphic coﬁnal subsets.
6. Let 훼be a countable limit ordinal. Show that 햼햿(훼) = ℵ0.
7. Let 휅and 휆be cardinals such that 휅is inﬁnite and 2 ⪯휆. Show the following.
(a) 휅≺햼햿(휆휅).
(b) 휅≺휅햼햿(휅).
8. Assume 햦햢햧and let 훼and 훽be ordinals. Prove.
(a) If ℵ훽≺햼햿(ℵ훼), then ℵ
ℵ훽
훼
= ℵ훼.
(b) If 햼햿(ℵ훼) ⪯ℵ훽≺ℵ훼, then ℵ
ℵ훽
훼
= ℵ훼+.
9. Let 훼be a limit ordinal. Show that 햼햿(ℶ훼) = 햼햿(훼). (See Exercise 6.3.22.)
10. Prove that 햦햢햧implies that a cardinal is weakly inaccessible if and only if it is
strongly inaccessible.
11. Let 휅be a cardinal. Prove the following biconditionals.
(a) 휅is weakly inaccessible if and only if 휅is regular and ℵ휅= 휅.
(b) 휅is strongly inaccessible if and only if 휅is regular and ℶ휅= 휅.

CHAPTER 7
MODELS
7.1
FIRST-ORDER SEMANTICS
We now return to logic. In Section 1.5, we proved that propositional logic is both sound
and complete (Theorems 1.5.9 and 1.5.15). We now do the same for ﬁrst-order logic.
We have an added complication in that this logic involves formulas with variables.
Sometimes the variables are all bound resulting in a sentence (Deﬁnition 2.2.14), but
other times the formula will have free occurrences. We need additional machinery to
handle this. Throughout this chapter, let 햠be a ﬁrst-order alphabet and 햲its set of
theory symbols. We start with the fundamental deﬁnition (compare Deﬁnition 4.1.1).
DEFINITION 7.1.1
The pair 프= (퐴, 픞) is an 헦-structure if 퐴≠∅and 픞is a function with domain
햲such that
∙픞(푐) is an element of 퐴for every constant 푐∈햲,
∙픞(푅) is an 푛-ary relation on 퐴for every 푛-ary relation symbol 푅∈햲,
∙픞(푓) is an 푛-ary function on 퐴for every 푛-ary function symbol 푓∈햲.
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
333

334
Chapter 7 MODELS
The set 퐴is the domain of 프and is denoted by dom(프). The domain of the
function 픞is the signature of the structure. If 햲= {푠0, 푠1, 푠2, … }, we often
write the structure as
(퐴, 픞(푠0), 픞(푠1), 픞(푠2), … )
or
(퐴, 푠프
0 , 푠프
1 , 푠프
2 , … )
The font used to identify a structure and its function is the traditional one. It is
called Fraktur and can be found in the appendix.
The purpose of the function 픞is to associate a symbol with a particular object in
the domain of the structure. For this reason, if 푠is an element of the signature of the
structure, the object 픞(푠) is called the meaning of 푠and the symbol 푠is the name of
픞(푠).
EXAMPLE 7.1.2
We are familiar with the constant, function, and relation symbols of 햭햳(Exam-
ple 2.1.4). We deﬁne an 햭햳-structure 프with domain 휔. To do this, specify the
function 픞:
픞(0) = ∅,
픞(1) = {∅},
픞(+) = {((푚, 푛), 푚+ 푛) : 푚, 푛∈휔},
픞(⋅) = {((푚, 푛), 푚⋅푛) : 푚, 푛∈휔}.
Notice that ∅is the meaning of 0 and 1 is the name of {∅}. Also, observe
that 픞(+) and 픞(⋅) are the addition and multiplication functions on 휔(Deﬁni-
tions 5.2.15 and 5.2.18). These operations are usually represented by + and ⋅,
but these symbols already appear in 햭햳. Therefore, for the structure 프,
0프= 픞(0),
1프= 픞(1),
+프= 픞(+),
⋅프= 픞(⋅),
so 프= (휔, 픞) is an 햭햳-structure with signature {0, 1, +, ⋅} that can be written as
(휔, ∅, {∅}, {((푚, 푛), 푚+ 푛) : 푚, 푛∈휔}, {((푚, 푛), 푚⋅푛) : 푚, 푛∈휔})
or, more compactly,
(휔, 0프, 1프, +프, ⋅프).

Section 7.1 FIRST-ORDER SEMANTICS
335
EXAMPLE 7.1.3
When the symbols of a structure’s signature are not needed to represent the mean-
ings of the symbols, the notation of Example 7.1.2 is not needed. This is common
for 햦햱-structures. For example, if 픟(푒) = 0 and 픟(◦) = +, then
(ℤ, 픟) = (ℤ, 0, +)
is a 햦햱-structure with signature {푒, ◦} (Example 2.1.5), and if 픠(푒) = 1 and
픠(◦) = ⋅, then
(ℝ⧵{0}, 픠) = (ℝ⧵{0}, 1, ⋅)
is also a 햦햱-structure with signature {푒, ◦}.
Satisfaction
The purpose of a structure is to serve as a universe for a given language. Recall that
the terms of a language represent objects and the formulas of a language describe the
properties of objects (Figure 2.3). With this in mind, we now make sense of the terms
and formulas within structures. The ﬁrst step in doing this is to deﬁne how to give
meaning to terms. This is done so that the terms represent elements of the domain of
a structure. The second step is to develop a method by which it can be determined
which formulas hold true in a structure and which do not. We begin by deﬁning the
interpretation of terms.
DEFINITION 7.1.4
Let 프= (퐴, 픞) be an 햲-structure. Deﬁne an 헦-interpretation of 프to be a func-
tion 퐼: 햳햤햱햬햲(햠) →퐴that has the following properties:
∙If 푥is a variable symbol, then 퐼(푥) ∈퐴, thus assigning a value to 푥.
∙If 푐is a constant symbol, 퐼(푐) = 픞(푐).
∙If 푓is a function symbol and 푡0, 푡1, … , 푡푛−1 are 햲-terms,
퐼(푓(푡0, 푡1, … , 푡푛−1)) = 픞(푓)(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1)).
Deﬁnition 7.1.4 is an example of a deﬁnition by induction on terms. This means
that ﬁrst the deﬁnition was made for variable and constant symbols, and then assuming
that it was made for terms in general, the deﬁnition is made for functions applied to
terms. Induction on terms simply follows Deﬁnition 2.1.7. A proof done by induction
on terms is one that uses the same process to prove a result about terms.
EXAMPLE 7.1.5
Let (휔, 0프, 1프, +프, ⋅프) be the 햭햳-structure from Example 7.1.2. Let 퐼be an
햭햳-interpretation such that

336
Chapter 7 MODELS
퐼(푥) = 5,
퐼(푦) = 7,
퐼(0) = 0프,
퐼(1) = 1프.
Then, 퐼(푥+ 푦) = 12 is the interpretation of 푥+ 푦because
퐼(푥+ 푦) = 픞(+)(퐼(푥), 퐼(푦)) = 픞(+)(5, 7) = 5 +프7,
and 퐼(0 ⋅1) = 0프because
퐼(0 ⋅1) = 픞(⋅)(퐼(0), 퐼(1)) = 픞(⋅)(0, 1) = 0프⋅프1프.
We are now ready for the main deﬁnition. It describes what it means for a formula
to be interpreted as true. The deﬁnition, which is foundational to model theory, is
generally attributed to Alfred Tarski. This contribution is found in two papers, “Der
wahrheitsbegriﬀin den formalisierten sprachen” (1935) and “Arithmetical extensions
of relational systems” with Robert Vaught (1957).
DEFINITION 7.1.6
Let 프= (퐴, 픞) be an 햲-structure and 퐼be an 햲-interpretation of 프. Assume that
푝and 푞are 햲-formulas and 푡0, 푡1, … , 푡푛−1 are 햲-terms. Deﬁne ⊨as follows:
∙프⊨푡0 = 푡1 [퐼] ⇔퐼(푡0) = 퐼(푡1).
∙프⊨푅(푡0, 푡1, … , 푡푛−1) [퐼] ⇔(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1)) ∈픞(푅).
∙프⊨¬푝[퐼] ⇔(not 프⊨푝[퐼]).
∙프⊨푝→푞[퐼] ⇔(if 프⊨푝[퐼] then 프⊨푞[퐼]).
∙프⊨∃푥푝[퐼] ⇔(프⊨푝[퐼푎
푥] for some 푎∈퐴), where for every 푢∈퐴, the
function 퐼푢
푥is the 햲-interpretation of 프such that if 푦is a variable symbol,
퐼푢
푥(푦) =
{
푢
if 푦= 푥,
퐼(푦)
if 푦≠푥,
and if 푐is a constant symbol, 퐼푎
푥(푐) = 퐼(푐).
Deﬁnition 7.1.6 is an example of a deﬁnition by induction on formulas. This means
that ﬁrst the deﬁnition was made for the basic formulas involving equality and relation
symbols, and then assuming that it was made for formulas in general, the deﬁnition
is made for formulas written using connectives or quantiﬁers. Induction on formulas
simply follows Deﬁnition 2.1.9. A proof done by induction on formulas is one that uses
the same process to prove a result about terms.
Deﬁnition 7.1.6 can be extended to the other connectives and the existential quanti-
ﬁer using the next theorem.

Section 7.1 FIRST-ORDER SEMANTICS
337
THEOREM 7.1.7
Let 프= (퐴, 픞) be an 햲-structure and 퐼be an 햲-interpretation of 프. Assume that
푝and 푞are 햲-formulas.
∙프⊨푝∧푞[퐼] ⇔(프⊨푝[퐼] and 프⊨푞[퐼]).
∙프⊨푝∨푞[퐼] ⇔(프⊨푝[퐼] or 프⊨푞[퐼]).
∙프⊨푝[퐼] ↔푞⇔(프⊨푝[퐼] if and only if 프⊨푞[퐼]).
∙프⊨∀푥푝[퐼] ⇔(프⊨푝[퐼푎
푥] for all 푎∈퐴).
PROOF
Since 푝∨푞⇔¬푝→푞(page 59), we have the following:
프⊨푝∨푞[퐼] ⇔프⊨¬푝→푞[퐼]
⇔if 프⊨¬푝[퐼], then 프⊨푞[퐼]
⇔if not 프⊨푝[퐼], then 프⊨푞[퐼]
⇔프⊨푝[퐼] or 프⊨푞[퐼].
Since ∀푥푝⇔¬∃푥¬푝by QN, we have the following:
프⊨∀푥푝[퐼] ⇔프⊨¬∃푥¬푝[퐼]
⇔not 프⊨∃푥¬푝[퐼]
⇔not (프⊨¬푝[퐼푎
푥] for some 푎∈퐴)
⇔not (not 프⊨푝[퐼푎
푥] for some 푎∈퐴)
⇔프⊨푝[퐼푎
푥] for all 푎∈퐴.
The remaining parts are left to Exercise 1.
EXAMPLE 7.1.8
Let the 햲햳-structure 프be deﬁned as (휔, ∈). Since 햲햳has only relation symbols,
프is called a purely relational structure. Although we usually make a notational
distinction between a name and its meaning, we do not do this with the ∈sym-
bol. Likewise, the equality symbol = can be used in a formula and during any
interpretation of the formula. To see how this works, deﬁne
푝:= ∀푥∀푦∀푧(푥∈푦∧푦∈푧→푥∈푧).
We show that 프⊨푝for any 햲햳-interpretation 퐼. To determine what needs
to be done to accomplish this, we work backwards using Deﬁnition 7.1.6 and
Theorem 7.1.7. Let 퐼be an 햲햳-interpretation and assume that
프⊨∀푥∀푦∀푧(푥∈푦∧푦∈푧→푥∈푧) [퐼].
This implies that

338
Chapter 7 MODELS
프⊨푥∈푦∧푦∈푧→푥∈푧[((퐼푎
푥)푏
푦)푐
푧] for all 푎, 푏, 푐∈휔.
How this formula is interpreted is still based on the order of connectives found
in Deﬁnition 1.1.5. Therefore, since the conjunction has precedence, we apply
Deﬁnition 7.1.6 to ﬁnd that
for all 푎, 푏, 푐∈휔, if 프⊨푥∈푦∧푦∈푧[((퐼푎
푥)푏
푦)푐
푧],
then 프⊨푥∈푧[((퐼푎
푥)푏
푦)푐
푧].
Hence, by Theorem 7.1.7,
for all 푎, 푏, 푐∈휔, if 프⊨푥∈푦[((퐼푎
푥)푏
푦)푐
푧] and 프⊨푦∈푧[((퐼푎
푥)푏
푦)푐
푧],
then 프⊨푥∈푧[((퐼푎
푥)푏
푦)푐
푧].
We now apply the interpretation using Deﬁnition 7.1.4 to ﬁnd that
for all 푎, 푏, 푐∈휔, if ((퐼푎
푥)푏
푦)푐
푧(푥) ∈((퐼푎
푥)푏
푦)푐
푧(푦) and ((퐼푎
푥)푏
푦)푐
푧(푦) ∈((퐼푎
푥)푏
푦)푐
푧(푧),
then ((퐼푎
푥)푏
푦)푐
푧(푥) ∈((퐼푎
푥)푏
푦)푐
푧(푧).
Therefore,
for all 푎, 푏, 푐∈휔, if 푎∈푏and 푏∈푐, then 푎∈푐,
which follows by Theorem 5.2.8. This means that we can back through the steps
to prove that 프⊨푝[퐼].
Typically, formulas cannot be understood as true or false on their own. They have to
be examined against a given universe. The structure is that universe, and the examining
is done by the interpretation. For this reason, the structure-interpretation pair forms the
basis for our work in ﬁrst-order logic, so we give it a name.
DEFINITION 7.1.9
Let 퐼be an 햲-interpretation of the 햲-structure 프. Let 푝be an 햲-formula. The pair
(프, 퐼) is called an 헦-model. Additionally, if 프⊨푝[퐼], then (프, 퐼) is a model
of 푝and satisﬁes 푝. If (프, 퐼) is not a model of 푝, write 프̸⊨푝[퐼].
EXAMPLE 7.1.10
Let 프be the 햭햳-structure with domain 휔and signature {0, 1, +, ⋅} from Exam-
ple 7.1.2. Let 퐼be an 햭햳-interpretation of 프such that
퐼(푥) = 0프, 퐼(푥푖) = 푖+프1프, and 퐼(1) = 1프.
∙(프, 퐼) is a model of 푥4 + 푥7 = 푥7 + 푥4 because by Theorem 5.2.17,
퐼(푥4 + 푥7) = 퐼(푥4) +프퐼(푥7)
= 5 +프8
= 8 +프5
= 퐼(푥7) +프퐼(푥4)
= 퐼(푥7 + 푥4).

Section 7.1 FIRST-ORDER SEMANTICS
339
∙(프, 퐼) is a model of ∀푥(푥= 푥2 →푥+ 1 = 푥2 + 1). To see this, take 푛∈휔
and assume that 프⊨푥= 푥2 [퐼푛
푥]. This implies that 푛= 퐼(푥2). Hence,
푛+프0프= 퐼(푥2) +프0프,
푛+프퐼(1) = 퐼(푥2) +프퐼(1),
퐼푛
푥(푥) +프퐼푛
푥(1) = 퐼푛
푥(푥2) +프퐼푛
푥(1),
퐼푛
푥(푥+ 1) = 퐼푛
푥(푥2 + 1).
Therefore, 프⊨푥+ 1 = 푥2 + 1 [퐼푛
푥]. We conclude that for all 푛∈휔,
if 프⊨푥= 푥2 [퐼푛
푥], then 프⊨푥+ 1 = 푥2 + 1 [퐼푛
푥],
so for all 푛∈휔,
프⊨푥= 푥2 →푥+ 1 = 푥2 + 1 [퐼푛
푥].
This implies that
프⊨∀푥(푥= 푥2 →푥+ 1 = 푥2 + 1) [퐼].
Deﬁnition 7.1.9 can be generalized to sets of formulas.
DEFINITION 7.1.11
If (프, 퐼) is an 햲-model and ℱis a set of 햲-formulas,
프⊨ℱ[퐼] if and only if 프⊨푝[퐼] for all 푝∈ℱ.
If 프⊨ℱ[퐼], then (프, 퐼) is a model of ℱand satisﬁes ℱ.
For example, using the 햭햳-model of Example 7.1.10, we see that
프⊨{푥4 + 푥7 = 푥7 + 푥4, ∀푥(푥= 푥2 →푥+ 1 = 푥2 + 1)} [퐼],
(7.1)
so (프, 퐼) is a model of {푥4 + 푥7 = 푥7 + 푥4, ∀푥(푥= 푥2 →푥+ 1 = 푥2 + 1)}. Here is a
more involved example.
EXAMPLE 7.1.12
Let 픅be the 햦햱-structure (ℤ, 픟) so that 픟is deﬁned by 픟(푒) = 0 and 픟(◦) = +.
Let the interpretation 퐽have the property that
퐽(푥푖) =
{
푖∕2
if 푖is even,
(푖+ 1)∕2
if 푖is odd.
∙픅⊨∃푥(푥7 ◦푥= 푒) [퐽]. This is because
픅⊨푥7 ◦푥= 푒[퐽−4
푥],

340
Chapter 7 MODELS
and this holds since 4 + (−4) = 0.
∙픅⊨∀푥∃푦(푥◦푦= 푒) [퐽]. To prove this, take 푛∈ℤ. Then,
픅⊨∃푦(푥◦푦= 푒) [퐽푛
푥]
because
픅⊨푥◦푦= 푒[(퐽푛
푥)−푛
푦].
This last satisfaction holds because −푛∈ℤand 푛+ −푛= 0.
∙The previous two satisfactions demonstrate that
픅⊨{∃푥(푥7 ◦푥= 푒), ∀푥∃푦(푥◦푦= 푒)} [퐽].
(7.2)
The previous work with models leads to the following deﬁnition.
DEFINITION 7.1.13
The 햲-formula 푝is 헦-satisﬁable (denoted by 햲햺헍헦푝) if there is an 햲-structure 프
and 햲-interpretation 퐼such that (프, 퐼) is a model for 푝. The set of 햲-formulas ℱ
is 헦-satisﬁable (denoted by 햲햺헍헦ℱ) if there is a model for ℱ.
By (7.1), we have that
햲햺헍헡헧{푥4 + 푥7 = 푥7 + 푥4, ∀푥[(푥+ 푥5) + 푥8 = 푥+ (푥5 + 푥8)]},
and by (7.2), we have that 햲햺헍헚헥{∃푥(푥7 ◦푥= 푒), ∀푥∃푦(푥◦푦= 푒)}.
Groups
As noted in Example 2.1.5, the 햦햱symbols are intended for the study of a set with a
single binary operation deﬁned on it. The basic example is ℤwith addition. Although
other properties will be added later, the language developed for this is designed to
handle just the basic properties of this pair. Namely, the operation should be associative,
the set should have an identity, and every element should have an inverse. This means
that the axioms that will deﬁne this theory will be 햦햱-sentences, and we need only
three.
AXIOMS 7.1.14 [Group]
∙G1. ∀푥∀푦∀푧[푥◦(푦◦푧) = (푥◦푦) ◦푧].
∙G2. ∀푥(푒◦푥= 푥∧푥◦푒= 푥).
∙G3. ∀푥∃푦(푥◦푦= 푒∧푦◦푥= 푒).

Section 7.1 FIRST-ORDER SEMANTICS
341
EXAMPLE 7.1.15
Deﬁne a 햦햱-structure 픊= (퐺, 픤) by letting the domain 퐺= {0}, 픤(푒) = 0, and
픤(◦) = +. The binary operation + is addition of integers and 0 ∈ℤ(Section 5.3).
Let 퐼be an interpretation of 픊. We show that 픊⊨{G1, G2, G3} [퐼].
∙Let 푎, 푏, 푐∈퐺. Since 0 is the only element of 퐺, observe that by Deﬁni-
tion 7.1.4,
((퐼푎
푥)푏
푦)푐
푧(푥◦[푦◦푧]) = ((퐼푎
푥)푏
푦)푐
푧(푥) + ((퐼푎
푥)푏
푦)푐
푧(푦◦푧)
(7.3)
= ((퐼푎
푥)푏
푦)푐
푧(푥) + [((퐼푎
푥)푏
푦)푐
푧(푦) + ((퐼푎
푥)푏
푦)푐
푧(푧)]
(7.4)
= 0 + (0 + 0)
(7.5)
= 0 + 0 + 0
(7.6)
= [((퐼푎
푥)푏
푦)푐
푧(푥) + ((퐼푎
푥)푏
푦)푐
푧(푦)] + ((퐼푎
푥)푏
푦)푐
푧(푧)
(7.7)
= ((퐼푎
푥)푏
푦)푐
푧(푥◦푦) + ((퐼푎
푥)푏
푦)푐
푧(푧)
(7.8)
= ((퐼푎
푥)푏
푦)푐
푧([푥◦푦] ◦푧).
(7.9)
We see that (7.6) follows from (7.5) by Theorem 5.3.5. Therefore, by The-
orem 7.1.7,
픊⊨푥◦(푦◦푧) = (푥◦푦) ◦푧[((퐼푎
푥)푏
푦)푐
푧] for all 푎, 푏, 푐∈퐺,
which implies that
픊⊨∀푧[푥◦(푦◦푧) = (푥◦푦) ◦푧] [(퐼푎
푥)푏
푦] for all 푎, 푏∈퐺.
Therefore,
픊⊨∀푦∀푧[푥◦(푦◦푧) = (푥◦푦) ◦푧] [퐼푎
푥] for all 푎∈퐺,
so
픊⊨∀푥∀푦∀푧[푥◦(푦◦푧) = (푥◦푦) ◦푧] [퐼].
∙Let 푎∈퐺. Again, by Deﬁnition 7.1.4,
퐼푎
푥(푒◦푥) = 퐼푎
푥(푒) + 퐼푎
푥(푥) = 0 + 0 = 0 = 퐼푎
푥(푥),
so by Deﬁnition 7.1.6,
픊⊨푒◦푥= 푥[퐼푎
푥].
Also,
퐼푎
푥(푥◦푒) = 퐼푎
푥(푥) + 퐼푎
푥(푒) = 0 + 0 = 0 = 퐼푎
푥(푥),
so
픊⊨푥◦푒= 푥[퐼푎
푥].

342
Chapter 7 MODELS
Therefore, by Theorem 7.1.7,
픊⊨푒◦푥= 푥∧푥◦푒= 푥[퐼푎
푥].
Since 푎was arbitrarily chosen,
픊⊨∀푥(푒◦푥= 푥∧푥◦푒= 푥) [퐼].
∙Take 푎∈퐺. Because
(퐼푎
푥)0
푦(푥◦푦) = (퐼푎
푥)0
푦(푥) + (퐼푎
푥)0
푦(푦) = 0 + 0 = 0 = (퐼푎
푥)0
푦(푒),
we have
픊⊨푥◦푦= 푒[(퐼푎
푥)0
푦].
Similarly,
픊⊨푦◦푥= 푒[(퐼푎
푥)0
푦],
so
픊⊨푥◦푦= 푒∧푦◦푥= 푒[(퐼푎
푥)0
푦].
Therefore, since 0 ∈퐺,
there exists 푏∈퐺such that 픊⊨푥◦푦= 푒∧푦◦푥= 푒[(퐼푎
푥)푏
푦],
and since 푎was arbitrarily chosen, we have that
for all 푎∈퐺, there exists 푏∈퐺such that
픊⊨푥◦푦= 푒∧푦◦푥= 푒[(퐼푎
푥)푏
푦].
Then, by Deﬁnition 7.1.6, we conclude that
for all 푎∈퐺, 픊⊨∃푦(푥◦푦= 푒∧푦◦푥= 푒) [퐼푎
푥],
so by Theorem 7.1.7,
픊⊨∀푥∃푦(푥◦푦= 푒∧푦◦푥= 푒) [퐼].
Based on Example 7.1.15, we conclude that {G1, G2, G3} is 햦햱-satisﬁable (Deﬁni-
tion 7.1.13). That is, there exists a model in which G1, G2, and G3 are interpreted as
true. The name of the model was ﬁrst used by Évariste Galois in the early 1830s.
DEFINITION 7.1.16
A 햦햱-structure that models the group axioms is called a group.
A group with a commutative binary operation, one that satisﬁes
∀푥∀푦(푥◦푦= 푦◦푥),
is known as an abelian group. It is named after the Norwegian mathematician Niels
Abel. Using the 햦햱-structure 픊and interpretation 퐼of Example 7.1.15, the set of
햦햱-sentences {G1, G2, G3, ∀푥∀푦(푥◦푦= 푦◦푥)} is shown to be 햦햱-satisﬁable.

Section 7.1 FIRST-ORDER SEMANTICS
343
EXAMPLE 7.1.17
Using deﬁnitions of Examples 4.2.6 and 4.2.9 for ℤ, deﬁne
ℤ푛= {[푎]푛: 푎∈ℤ},
and on this set, specify + by
[푎]푛+ [푏]푛= [푎+ 푏]푛.
As we have seen, the meaning of the symbol + is determined by context. The
+ on the left is the new deﬁnition, but the + on the right is standard addition
(Deﬁnition 5.3.4). With this deﬁnition, a generalization of Example 4.4.30 shows
that + is a binary operation. We check that 픊= (ℤ푛, [0]푛, +) is a group. Let 퐼be
a 햦햱-interpretation of 픊such that 퐼(푒) = [0]푛. We have three axioms to check.
∙Let [푎]푛, [푏]푛, [푐]푛∈ℤ푛, where 푎, 푏, 푐∈ℤ. Observe that by Deﬁni-
tion 7.1.4,
((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푥◦[푦◦푧])
= ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푥) + ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푦◦푧)
(7.10)
= ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푥) + [((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푦) + ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푧)]
(7.11)
= [푎]푛+ ([푏]푛+ [푐]푛)
= [푎]푛+ ([푏+ 푐]푛)
= [푎+ (푏+ 푐)]푛
(7.12)
= [푎+ 푏+ 푐]푛
(7.13)
= [푎+ 푏]푛+ [푐]푛
= ([푎]푛+ [푏]푛) + [푐]푛
= [((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푥) + ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푦)] + ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푧)
(7.14)
= ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푥◦푦) + ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푧)
(7.15)
= ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
([푥◦푦] ◦푧).
(7.16)
Therefore,
((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
(푥◦[푦◦푧]) = ((퐼[푎]푛
푥
)[푏]푛
푦
)[푐]푛
푧
([푥◦푦] ◦푧)
for all [푎]푛, [푏]푛, [푐]푛∈ℤ푛,
which implies that
픊⊨∀푥∀푦∀푧[푥◦(푦◦푧) = (푥◦푦) ◦푧] [퐼].
Notice that (7.13) follows from (7.12) by Theorem 5.3.5. More impor-
tantly, notice that (7.10), (7.11), (7.14), (7.15), and (7.16) mimic (7.3),
(7.4), (7.7), (7.8), and (7.9) of Example 7.1.15. The other equalities are

344
Chapter 7 MODELS
∗
푒
푎
푏
푐
푒
푒
푎
푏
푐
푎
푎
푒
푐
푏
푏
푏
푐
푒
푎
푐
푐
푏
푎
푒
Figure 7.1
The Klein-4 group.
speciﬁc to this example. We conclude that in order to prove that 픊is a
model of G1, we only need to show the work speciﬁc to the structure 픊.
We use this to prove 픊⊨{G2, G3} [퐼].
∙Let 푎∈ℤ. Then,
[0]푛+ [푎]푛= [0 + 푎]푛= [푎]푛,
and
[푎]푛+ [0]푛= [푎+ 0]푛= [푎]푛.
Therefore, 픊⊨G2 [퐼].
∙Let 푏∈ℤ. Then,
[푏]푛+ [−푏]푛= [푏+ (−푏)]푛= [0]푛
and
[−푏]푛+ [푏]푛= [(−푏) + 푏]푛= [0]푛.
Hence, 픊⊨G3 [퐼].
Therefore, 픊is a group. Moreover, because for all 푎, 푏∈ℤ,
[푎]푛+ [푏]푛= [푎+ 푏]푛= [푏+ 푎]푛= [푏]푛+ [푎]푛,
픊is an abelian group.
EXAMPLE 7.1.18
The structures (휔+, ∅, +), (ℤ, 1, ⋅), and (ℝ, 1, ⋅) are not groups, but (ℤ, 0, +),
(ℚ, 0, +), (ℝ, 0, +), (ℚ⧵{0}, 1, ⋅), and (ℝ⧵{0}, 1, ⋅) are. These are examples
of inﬁnite groups. When the group’s set is ﬁnite, we use the term order to refer
to its cardinality. The group 픊= ({휖}, 휖, ∗), where ∗= {((휖, 휖), 휖)}, is the only
group of order 1 (Example 7.1.15). This means that any other group with one
element, such as ({0}, 0, +) or ({1}, 1, ⋅), has the same structure as 픊. We say
that these three groups are isomorphic. Any two groups of order 2 will be iso-
morphic, and any groups of order 3 will also be isomorphic. There are essentially
two groups of order 4, one being the Klein-4 group (Figure 7.1) and the other
being the group of Example 7.1.17 when 푛= 4.

Section 7.1 FIRST-ORDER SEMANTICS
345
EXAMPLE 7.1.19
All of the examples of groups given so far have been abelian. Here is one that is
not. For all 푛∈ℤ+, deﬁne M푛(ℝ) as the set of 푛× 푛matrices with real entries.
In other words, each matrix has 푛rows, 푛columns, and looks like
⎡
⎢
⎢⎣
푎1,1
· · ·
푎1,푛
⋮
⋱
⋮
푎푚,1
· · ·
푎푚,푛
⎤
⎥
⎥⎦
,
where 푎푖,푗∈ℝfor 푖= 1, … , 푛and 푗= 1, … , 푛. As an example,
⎡
⎢
⎢⎣
1
2
3
4
5
6
7
8
9
⎤
⎥
⎥⎦
∈M3(ℝ).
Deﬁne matrix multiplication for 2 × 2 matrices by
[
푎1,1
푎1,2
푎2,1
푎2,2
]
⋅
[
푏1,1
푏1,2
푏2,1
푏2,2
]
=
[
푎1,1푏1,1 + 푎1,2푏2,1
푎1,1푏1,2 + 푎1,2푏2,2
푎2,1푏1,1 + 푎2,2푏2,1
푎2,1푏1,2 + 푎2,2푏2,2
]
.
For example,
[
1
2
3
4
]
⋅
[
0
−1
2
1
]
=
[
4
1
8
1
]
.
(7.17)
This multiplication is not commutative because
[
0
−1
2
1
]
⋅
[
1
2
3
4
]
=
[
−3
−4
5
8
]
,
(7.18)
but it is associative [Exercise 12(a)]. The identity matrix for M2(ℝ) is
I2 =
[
1
0
0
1
]
.
Notice that I2 is the multiplicative identity. If 퐴∈M푛(ℝ), then 퐴is invertible
if there exists 퐵∈M푛(ℝ) such that 퐴퐵= 퐵퐴= I푛. For 푛= 2,
[
2
1
0
−3
]
is invertible, but
[
1
0
5
0
]
is not. All of this can be generalized to any 푛× 푛matrix. Finally, deﬁne
M∗
푛(ℝ) = {퐴∈M푛(ℝ) : 퐴is invertible}.
Let GL(푛, ℝ) denote the group (M∗
푛(ℝ), I푛, ⋅). This is called the general linear
group of degree 푛.

346
Chapter 7 MODELS
Consequence
We now generalize the notion of logical implication (Deﬁnition 1.2.2) to the theory of
models.
DEFINITION 7.1.20
Let ℱbe a set of 햲-formulas. An 햲-formula 푝is an 헦-consequence of ℱ(written
as ℱ⊨푝) when 프⊨ℱ[퐼] implies 프⊨푝[퐼] for any 햲-model (프, 퐼). If
{푝} ⊨푞, simply write 푝⊨푞.
Deﬁnition 7.1.20 implies that if the 햲-formula 푞is not an 햲-consequence of ℱ, there
exists an 햲-structure 프with interpretation 퐼such that 프⊨ℱ[퐼] but 프̸⊨푞[퐼]. For
example, deﬁne
푝:= ∀푥∀푦(푥+ 푦= 푦+ 푥).
We know that GL(푛, ℝ) is a group, but under any 햦햱-interpretation 퐼of GL(푛, ℝ),
GL(푛, ℝ) ̸⊨푝[퐼]
because of (7.17) and (7.18). Therefore, 푝is not an 햲-consequence of the group axioms
(7.1.14). In other words, not all groups are abelian groups.
EXAMPLE 7.1.21
Suppose that
ℱ= {∀푥∀푦(푥+ 푦= 푦+ 푥), ∀푥∃푦(푥+ 푦= 0)}.
Let (프, 퐼) be an 햭햳-model of ℱ. Let 퐴= dom(프). Then,
프⊨∀푥∃푦(푥+ 푦= 0) [퐼],
so by Theorem 7.1.7,
for all 푢∈퐴, 프⊨∃푦(푥+ 푦= 0) [퐼푢
푥],
which by Deﬁnition 7.1.6 implies that
there exists 푣∈퐴such that for all 푢∈퐴, 프⊨푥+ 푦= 0 [(퐼푢
푥)푣
푦].
Hence, for arbitrary 푎(UI) and particular 푏(EI) in 퐴,
(퐼푎
푥)푏
푦(+)((퐼푎
푥)푏
푦(푥), (퐼푎
푥)푏
푦(푦)) = (퐼푎
푥)푏
푦(0).
However, since
프⊨∀푥∀푦(푥+ 푦= 푦+ 푥) [퐼],
we ﬁnd that
(퐼푎
푥)푏
푦(+)((퐼푎
푥)푏
푦(푥), (퐼푎
푥)푏
푦(푦)) = (퐼푎
푥)푏
푦(+)((퐼푎
푥)푏
푦(푦), (퐼푎
푥)푏
푦(푥)),

Section 7.1 FIRST-ORDER SEMANTICS
347
so,
(퐼푎
푥)푏
푦(+)((퐼푎
푥)푏
푦(푦), (퐼푎
푥)푏
푦(푥)) = (퐼푎
푥)푏
푦(0).
Therefore, by EG and UG,
there exists 푣∈퐴such that for all 푢∈퐴, 퐼(+)(퐼(푣), 퐼(푢)) = 퐼(0),
and we can reverse the steps above to ﬁnd that
프⊨∃푥∀푦(푦+ 푥= 0) [퐼],
so we conclude that
ℱ⊨∃푥∀푦(푦+ 푥= 0).
We say that an 햲-sentence 푝is valid if ∅⊨푝and write ⊨푝. This means that if an 햲-
sentence 푝is valid, every 햲-structure is a model of 푝since every 햲-structure is a model
of the empty set using any 햲-interpretation (Exercise 7). For example, ∀푥(푥= 푥) and
푃∨¬푃are valid.
We now connect the notions of consequence and satisfaction.
THEOREM 7.1.22
Let ℱbe a set of 햲-formulas and 푝be an 햲-formula. Then,
ℱ⊨푝if and only if not 햲햺헍헦ℱ∪{¬푝}.
PROOF
The following are equivalent:
∙ℱ⊨푝.
∙For every 햲-model (프, 퐼), if 프⊨ℱ[퐼], then 프⊨푝[퐼].
∙There does not exist an 햲-model (프, 퐼) so that 프⊨ℱ[퐼] and 프̸⊨푝[퐼].
∙There does not exist an 햲-model (프, 퐼) so that 프⊨ℱ[퐼] and 프⊨¬푝[퐼].
∙There does not exist an 햲-model (프, 퐼) such that 프⊨ℱ∪{¬푝} [퐼].
∙Not 햲햺헍헦ℱ∪{¬푝}.
EXAMPLE 7.1.23
Since Zorn’s lemma was proved from the axioms of 헭헙헖(Theorem 5.1.13), as
in Example 7.1.17, we can use the work speciﬁc to the proof of Zorn’s lemma to
conclude that 헭헙헖⊨Zorn’s lemma, so by Theorem 7.1.22, there is no 햲햳-model
that satisﬁes 헭헙헖and the negation of Zorn’s lemma.

348
Chapter 7 MODELS
EXAMPLE 7.1.24
The 햲-formula 푝is valid if ¬푝is not 햲-satisﬁable. To see this, suppose that 푝is
not valid. This means that there is an 햲-model (프, 퐼) so that 프̸⊨푝[퐼]. Hence,
by Deﬁnition 7.1.6, 프⊨¬푝[퐼]. Therefore, 햲햺헍{¬푝}. That the converse is true
is Exercise 19.
Compare the next deﬁnition with Deﬁnition 1.3.1.
DEFINITION 7.1.25
Let 푝and 푞be 햲-formulas. Then, 푝is logically equivalent to 푞means 푝⊨푞if
and only if 푞⊨푝.
Notice Deﬁnition 7.1.25 implies that the formulas 푝and 푞are logically equivalent if and
only if ⊨(푝↔푞). For example, by De Morgan’s law, ¬(푝∧푞) is logically equivalent
to ¬푝∨¬푞, and by QN, we conclude that ¬∀푥푝(푥) is logically equivalent to ∃푥¬푝(푥).
Coincidence
Let 프= (ℤ, 픞) and 픅= (ℤ, 픟) be 햦햱-structures such that
픞(푒) = 픟(푒) = 0,
픞(◦) = 픟(◦) = +.
Let 퐼be an 햦햱-interpretation of 프and 퐽be a 햦햱-interpretation of 픅such that
퐼(푥) = 퐽(푥) = 3.
Other assignments of these functions are not identiﬁed. Consider the following deduc-
tion:
−3 + 3 = 0.
푛+ 3 = 0 for some 푛∈ℤ.
퐼푛
푦(푦) + 퐼푛
푦(푥) = 퐼푛
푦(푒) for some 푛∈ℤ.
퐼푛
푦(푦◦푥) = 퐼푛
푦(푒) for some 푛∈ℤ.
프⊨푦◦푥= 푒[퐼푛
푦] for some 푛∈ℤ.
Therefore,
프⊨∃푦(푦◦푥= 푒) [퐼].
By replacing 퐼with 퐽and 프with 픅in the deduction, we conclude that
픅⊨∃푦(푦◦푥= 푒) [퐽].
Since 퐼and 퐽agree on their interpretations of 푒, ◦, and 푥, it is not surprising that
they should agree on their interpretation of any {푒, ◦}-formula with 푥as its only free
variable. The generalization of this to terms and formulas is the next two results.

Section 7.1 FIRST-ORDER SEMANTICS
349
LEMMA 7.1.26 [Coincidence for Terms]
Let 햲and 햳be sets of theory symbols. Let 프= (퐴, 픞) be an 햲-structure and
픅= (퐵, 픟) be a 햳-structure such that 퐴= 퐵. Let 퐼be an interpretation of 프
and 퐽be an interpretation of 픅. If 퐼↾햵햠햱= 퐽↾햵햠햱and 픞(푢) = 픟(푢) for all
푢∈햲∩햳, then 퐼(푡) = 퐽(푡) for every (햲∩햳)-term 푡.
PROOF
By induction on (햲∩햳)-terms.
∙Let 푥be a variable symbol. Then, 퐼(푥) = 퐽(푥) by hypothesis.
∙Let 푐be a constant symbol in 햲∩햳. We have
퐼(푐) = 픞(푐) = 픟(푐) = 퐽(푐).
∙Suppose 퐼(푡푖) = 퐽(푡푖) for all (햲∩햳)-terms 푡푖with 푖= 0, 1, … , 푛−1. Then,
퐼(푓(푡0, 푡1, … , 푡푛−1)) = 픞(푓)(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1))
= 픞(푓)(퐽(푡0), 퐽(푡1), … , 퐽(푡푛−1))
= 픟(푓)(퐽(푡0), 퐽(푡1), … , 퐽(푡푛−1))
= 퐽(푓(푡0, 푡1, … , 푡푛−1)).
LEMMA 7.1.27 [Coincidence for Formulas]
Let 햲and 햳be sets of theory symbols. Let 프= (퐴, 픞) be an 햲-structure and
픅= (퐵, 픟) be a 햳-structure such that 퐴= 퐵. Let 퐼be an interpretation of 프and
퐽be an interpretation of 픅. If 퐼↾햵햠햱= 퐽↾햵햠햱and 픞(푢) = 픟(푢) for every
푢∈햲∩햳, then 프⊨푝[퐼] if and only if 픅⊨푝[퐽] for all (햲∩햳)-formulas 푝.
PROOF
By induction on (햲∩햳)-formulas.
∙Let 푡0 and 푡1 be (햲∩햳)-terms. Then, by Lemma 7.1.26,
프⊨푡0 = 푡1 [퐼] ⇔퐼(푡0) = 퐼(푡1) ⇔퐽(푡0) = 퐽(푡1) ⇔픅⊨푡0 = 푡1 [퐽].
∙Let 푡0, 푡1, … , 푡푛−1 be (햲∩햳)-terms and 푅a relation symbol of 햲∩햳. Then,
by Lemma 7.1.26,
프⊨푅(푡0, 푡1, … , 푡푛−1) [퐼] ⇔(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1)) ∈픞(푅)
⇔(퐽(푡0), 퐽(푡1), … , 퐽(푡푛−1)) ∈픞(푅)
⇔(퐽(푡0), 퐽(푡1), … , 퐽(푡푛−1)) ∈픟(푅)
⇔픅⊨푅(푡0, 푡1, … , 푡푛−1) [퐽].
Now let 푝be an (햲∩햳)-formula.
∙프⊨¬푝[퐼] ⇔프̸⊨푝[퐼] ⇔픅̸⊨푝[퐽] ⇔픅⊨¬푝[퐽].

350
Chapter 7 MODELS
∙Assume that 프⊨푝[퐼] implies 프⊨푞[퐼]. Also, suppose that 픅⊨푝[퐽].
Then, 프⊨푝[퐼] by induction, so 프⊨푞[퐼]. Thus, 픅⊨푞[퐽] by
induction. The converse is proved similarly, so we have
프⊨푝→푞[퐼] ⇔if 프⊨푝[퐼] then 프⊨푞[퐼]
⇔if 픅⊨푝[퐽] then 픅⊨푞[퐽]
⇔픅⊨푝→푞[퐽].
∙Note that for all 푏∈퐴,
퐼푏
푥↾햵햠햱= 퐽푏
푥↾햵햠햱
because
퐼푏
푥(푥) = 푢= 퐽푏
푥(푥)
and if 푦≠푥,
퐼푏
푥(푦) = 퐼(푦) = 퐽(푦) = 퐽푏
푥(푦).
Therefore, by induction and since 퐴= 퐵,
프⊨∃푥푝[퐼] ⇔프⊨푝[퐼푎
푥] for some 푎∈퐴
⇔프⊨푝[퐽푎
푥] for some 푎∈퐵
⇔프⊨∃푥푝[퐽].
EXAMPLE 7.1.28
Deﬁne the sets of theory symbols 햲= {0, 1, +, ⋅, ≤} and 햳= {0, 1, +, ∗, ≥}. Let
프= (휔, 픞) be an 햲-structure and 픅= (휔, 픟) be a 햳-structure where
픞(0) = 픟(0) = ∅,
픞(1) = 픟(1) = {∅},
픞(+) = 픟(+).
Notice, for example, that under the right interpretation, 프could be a model of
∀푥(푥⋅1 = 푥) since it is an 햲-formula, but it does not make sense for 픅to be
a model of the same sentence because ∀푥(푥⋅1 = 푥) is not a 햳-formula. Now,
let 퐼be an 햲-interpretation of 프and 퐽be a 햳-interpretation of 픅such that they
agree on all variable symbols. Since we have the hypotheses of Lemma 7.1.27
satisﬁed, let us conﬁrm the lemma. Consider the (햲∩햳)-formula ∀푥(푥+ 0 = 푥).
Assume
프⊨∀푥(푥+ 0 = 푥) [퐼],
so
프⊨(푥+ 0 = 푥) [퐼푛
푥] for all 푛∈휔.
This implies that

Section 7.1 FIRST-ORDER SEMANTICS
351
픞(+)(퐼푛
푥(푥), 퐼푛
푥(0)) = 퐼푛
푥(푥) for all 푛∈휔.
Since 퐼and 퐽agree on all variable symbols, 픞(0) = 픟(0), and 픞(+) = 픟(+),
픟(+)(퐽푛
푥(푥), 퐽푛
푥(0)) = 퐽푛
푥(푥) for all 푛∈휔.
Therefore,
픅⊨(푛+ 0 = 푎) [퐽푛
푥] for all 푛∈휔,
which gives
픅⊨∀푥(푥+ 0 = 푥) [퐽].
The purpose of the coincidence lemmas (7.1.26 and 7.1.27) is to minimize the use
of interpretation functions, especially when modeling sentences.
LEMMA 7.1.29
Let 프be an 햲-structure. If 푝is an 햲-sentence,
프⊨푝[퐼] if and only if 프⊨푝[퐽]
for all 햲-interpretations 퐼and 퐽of 프.
PROOF
Suppose that 퐼and 퐽are 햲-interpretations of 프. Let 프⊨푝[퐼]. Since 푝has no
free variables, 프⊨푝[퐽] by the proof of Lemma 7.1.27.
Lemma 7.1.29 implies that any interpretation will do when modeling sentences. There-
fore, we make the next deﬁnition.
DEFINITION 7.1.30
For any 햲-sentence 푝and 햲-structure 프= (퐴, 픞), write 프⊨푝if 프⊨푝[퐼] for
all 햲-interpretations 퐼of 프.
Lemma 7.1.29 can be used to quickly prove the next result.
THEOREM 7.1.31
For any 햲-structure 프and 햲-sentence 푝,
프⊨푝if and only if 프⊨푝[퐼] for some 햲-interpretation 퐼of 프.
Therefore, letting 픅be the 햦햱-structure of Example 7.1.12, by (7.2), we have that
픅⊨∀푥∃푦(푥◦푦= 0).
The coincidence lemmas (7.1.26 and 7.1.27) also minimize the use of the sets of
theory symbols. Consider the following.

352
Chapter 7 MODELS
THEOREM 7.1.32
Let 햲⊆햳be theory symbol sets. If ℱis a set of 햲-formulas, ℱis 햲-satisﬁable
if and only if ℱis 햳-satisﬁable.
PROOF
Let ℱbe a set of of 햲-formulas. First, suppose that (퐴, 픞) ⊨ℱ[퐼], where
dom(픞) = 햲and dom(퐼) = 햳햤햱햬햲(햲). Let 픞′ be an extension of 픞to 햳and 퐼′
be an extension of 퐼such that dom(퐼′) = 햳햤햱햬햲(햳). Notice that this implies
that 픞and 픞′ agree on 햲= 햲∩햳. Therefore, (퐴, 픞′) ⊨ℱ[퐼′] by Lemma 7.1.27.
Conversely, assume that (퐴, 픞) ⊨ℱ[퐼] such that both dom(픞) = 햳and
dom(퐼) = 햳햤햱햬햲(햳). Let 픞′ = 픞↾햲and 퐼′ = 퐼∩햳햤햱햬햲(햲). This implies that
(퐴, 픞′) ⊨ℱ[퐼′] by Lemma 7.1.27.
There is terminology to name the relationship between the structures found in the
proof of Theorem 7.1.32. Let the theory symbols 햲be a subset of the theory symbols
햳. Let 프= (퐴, 픞) be an 햲-structure and 프′(퐴′, 픞′) be an 햳-structure. If 퐴= 퐴′ and
픞= 픞′ ↾햲, we call 프′ an expansion of 프and 프a reduct of 프′. Hence, in the ﬁrst
part of the proof, we started with a structure and then moved to an expansion, and in
the second part, we started with a structure and then moved to a reduct.
Theorems 7.1.31 and 7.1.32 motivate the next two deﬁnitions.
DEFINITION 7.1.33
Let 햲⊆햳be sets of theory symbols. An 햲-formula 푝is satisﬁable (denoted by
햲햺헍푝) if there exists an 햳-structure that is a model for 푝. The set of 햲-formulas
ℱis satisﬁable (denoted by 햲햺헍ℱ) if there exists an 햳-structure that is a model
for ℱ.
DEFINITION 7.1.34
Let 햲⊆햳be sets of theory symbols. Assume that 풯is a set of 햲-sentences. An
햲-sentence 푝is a consequence of 풯(denoted by 풯⊨푝) when 프⊨풯implies
프⊨푝for every 햳-structure 프.
EXAMPLE 7.1.35
The group axioms state that in a group there is an identity and there are inverses.
Based on what we know about the integers, we should be able to prove more
about these elements. For example, we expect that in a group, both
there is exactly one identity
and
every element has a unique inverse
are true. The uniqueness of the identity is left to Exercise 20. To show the unique-
ness of inverses, let 픊= (퐺, 푒, ◦) be a group, and take 푎∈퐺. Suppose that

Section 7.1 FIRST-ORDER SEMANTICS
353
푎′, 푎′′ ∈퐺and are inverses of 푎. Then,
푎′ = 푎′ ◦푒= 푎′ ◦(푎◦푎′′) = (푎′ ◦푎) ◦푎′′ = 푒◦푎′′ = 푎′′.
Therefore, the uniqueness of inverses is a consequence (Deﬁnition 7.1.34) of the
group axioms.
Rings
Consider the equation 2푥+ 1 = 0. The exact steps needed to ﬁnd its solution are
(2푥+ 1) + −1 = 0 + −1,
2푥+ (1 + −1) = 0 + −1,
2푥+ 0 = 0 + −1,
2푥= −1,
1∕2(2푥) = 1∕2(−1),
(1∕2 ⋅2)푥= −1∕2,
1푥= −1∕2,
푥= −1∕2.
Now examine the steps. There are two operations, addition and multiplication. We
used inverses and identities. The associative law was also used. When studying these
steps, we realize that they cannot be performed within (ℤ, 0, +) even though the ini-
tial equation had only integer coeﬃcients. This means that the group idea needs to be
expanded. This is done by including two symbols to represent addition and multipli-
cation. Since these two operations can have their own identities, replace 푒with ○to
represent the additive identity. The ideas behind the group axioms are then extended
using 햱햨-sentences.
AXIOMS 7.1.36 [Ring]
∙R1. ∀푥∀푦∀푧[푥⊕(푦⊕푧) = (푥⊕푦) ⊕푧]
∀푥∀푦∀푧[푥⊗(푦⊗푧) = (푥⊗푦) ⊗푧]
∙R2. ∀푥∀푦(푥⊕푦= 푦⊕푥)
∙R3. ∀푥(0 ⊕푥= 푥)
∙R4. ∀푥∃푦(푥⊕푦= ○)
∙R5. ∀푥∀푦∀푧[푥⊗(푦⊕푧) = 푥⊗푦⊕푥⊗푧]
∀푥∀푦∀푧[(푥⊕푦) ⊗푧= 푥⊗푧⊕푦⊗푧]

354
Chapter 7 MODELS
DEFINITION 7.1.37
An 햱햨-structure ℜ= (푅, 0, +, ⋅) that models the ring axioms is called a ring. If
there exists an multiplicative identity in 푅, then ℜis a ring with unity.
The additive inverse of 푎is −푎, and the multiplicative inverse of 푎is 푎−1 assuming that
푎≠0. We usually write 푎−푏instead of 푎+(−푏). Notice that if ℜ= (푅, 0, +, ⋅) is a ring,
its reduct (푅, 0, +) is a group. Also, letting + and ⋅denote addition and multiplication
on ℤ,
ℨ= (ℤ, 0, +, ⋅)
is a ring with unity. Also, ℚ, ℝ, and ℂare the domains of rings with unity using the
typical operations of addition and multiplication.
EXAMPLE 7.1.38
Axioms 7.1.36 do not require that the ring multiplication be commutative. Let
ℜ= (푅, 0, +, ⋅). Then, ℜis a commutative ring. if
ℜ⊨∀푥∀푦(푥⊗푦= 푦⊗푥).
∙Let + and ⋅denote standard addition and multiplication on ℤ. Let 푛∈ℤ.
We conclude that 픖= (푛ℤ, 0, +, ⋅) is a commutative ring. It is without
unity if 푛≠±1.
∙Take [푎]푛, [푏]푛∈ℤ푛and deﬁne + as in Example 7.1.17 and multiplication
deﬁned by
[푎]푛⋅[푏]푛= [푎푏]푛.
Then, 픗= (ℤ푛, [0]푛, +, ⋅) is a commutative ring (Exercise 29).
Axioms 7.1.36 also do not state that when the additive identity is multiplied by
any element of the ring, the result is the additive identity. It is not among the
axioms because it can be proved. Take 푎∈푅. By R3, 0 + 0 = 0, so by R5,
0 ⋅푎= (0 + 0) ⋅푎= 0 ⋅푎+ 0 ⋅푎.
By R4 and since + is a binary operation,
0 ⋅푎+ −(0 ⋅푎) = (0 ⋅푎+ 0 ⋅푎) + −(0 ⋅푎).
Because of R1,
0 ⋅푎+ −(0 ⋅푎) = 0 ⋅푎+ [0 ⋅푎+ −(0 ⋅푎)].
Hence, 0 = 0 ⋅푎+ 0, which implies that 0 = 0 ⋅푎. Therefore,
ℜ⊨∀푥(○= ○⊗푥),
and ∀푥(○= ○⊗푥) is a consequence (Deﬁnition 7.1.34) of the ring axioms.

Section 7.1 FIRST-ORDER SEMANTICS
355
EXAMPLE 7.1.39
Let 푛∈ℤ+, deﬁne matrix addition on M푛(ℝ) entrywise. For instance,
⎡
⎢
⎢⎣
1
2
1
3
4
−4
5
6
0
⎤
⎥
⎥⎦
+
⎡
⎢
⎢⎣
1
0
8
2
−5
0
0
−2
3
⎤
⎥
⎥⎦
=
⎡
⎢
⎢⎣
2
2
9
5
−1
−4
5
4
3
⎤
⎥
⎥⎦
.
Let 0푛be the zero matrix. It is the 푛× 푛matrix with all of its entries equal to
0. As in Example 7.1.19, let ⋅represent matrix multiplication and 퐼푛the identity
matrix. Prove that
픐푛(ℝ) = (M푛(ℝ), 0푛, +, ⋅)
is a ring.
∙To see that matrix addition is associative, we rely on the fact that standard
addition of real numbers is associative. Take three matrices from M2(ℝ)
and add:
[
푎1,1
푎1,2
푎2,1
푎2,2
]
+
([
푏1,1
푏1,2
푏2,1
푏2,2
]
+
[
푐1,1
푐1,2
푐2,1
푐2,2
])
=
[
푎1,1
푎1,2
푎2,1
푎2,2
]
+
[
푏1,1 + 푐1,1
푏1,2 + 푐1,2
푏2,1 + 푐2,1
푏2,2 + 푐2,2
]
=
[
푎1,1 + (푏1,1 + 푐1,1)
푎1,2 + (푏1,2 + 푐1,2)
푎2,1 + (푏2,1 + 푐2,1)
푎2,2 + (푏2,2 + 푐2,2)
]
=
[
(푎1,1 + 푏1,1) + 푐1,1
(푎1,2 + 푏1,2) + 푐1,2
(푎2,1 + 푏2,1) + 푐2,1
(푎2,2 + 푏2,2) + 푐2,2
]
=
[
푎1,1 + 푏1,1
푎1,2 + 푏1,2
푎2,1 + 푏2,1
푎2,2 + 푏2,2
]
+
[
푐1,1
푐1,2
푐2,1
푐2,2
]
=
([
푎1,1
푎1,2
푎2,1
푎2,2
]
+
[
푏1,1
푏1,2
푏2,1
푏2,2
])
+
[
푐1,1
푐1,2
푐2,1
푐2,2
]
.
∙Since
[
0
0
0
0
]
+
[
푎1,1
푎1,2
푎2,1
푎2,2
]
=
[
0 + 푎1,1
0 + 푎1,2
0 + 푎2,1
0 + 푎2,2
]
=
[
푎1,1
푎1,2
푎2,1
푎2,2
]
,
the zero matrix is the additive identity.
∙To prove that every element of M2(ℝ) has an additive inverse, take
퐴=
[
푎1,1
푎1,2
푎2,1
푎2,2
]
∈M2(ℝ).

356
Chapter 7 MODELS
Then,
−퐴=
[
−푎1,1
−푎1,2
−푎2,1
−푎2,2
]
because 퐴+ (−퐴) = 02. Generalizing, conclude that
픐푛(ℝ) ⊨{G1, G2, G3},
making the 햦햱-structure (M푛(ℝ), 0푛, +) a group.
∙Matrix addition is commutative because addition on ℝis commutative.
Therefore, (M푛(ℝ), 0푛, +) is an abelian group.
∙Matrix multiplication is associative.
∙Lastly, to show that the operations are distributive, we must show for all
퐴, 퐵, 퐶∈M2(ℝ),
퐴(퐵+ 퐶) = 퐴퐵+ 퐴퐶
and
(퐴+ 퐵)퐶= 퐴퐶+ 퐵퐶.
Therefore, 픐푛(ℝ) ⊨{R1, R2, R3, R4, R5}, so 픐푛(ℝ) is a ring.
∙Since I푛is the multiplicative identity, ℜis a ring with unity, and since
matrix multiplication is not commutative, ℜis a noncommutative ring.
This proves that ∀푥∀푦(푥⊗푦= 푦⊗푥) is not a consequence of the ring
axioms.
EXAMPLE 7.1.40
If 푅is the domain of a ring, 푎, 푏∈푅⧵{0} are zero divisors of the ring means
that 푎⋅푏= 0. Deﬁning addition and multiplication coordinatewise (Exercise 18),
the ring (ℤ× ℤ, (0, 0), +, ⋅) has zero divisors such as
(1, 0) ⋅(0, 1) = (0, 0).
Other examples can be found in M2(ℝ) where
[
1
1
0
0
]
⋅
[
1
1
−1
−1
]
=
[
0
0
0
0
]
.
However,
[
1
1
−1
−1
]
⋅
[
1
1
0
0
]
=
[
1
1
−1
−1
]
,
showing that an element can be a left zero divisor but not a right zero divisor.
This situation is common for rings where multiplication is not commutative. We
do, however, have many rings that do not have zero divisors. An integral domain
is a commutative ring with unity that does not have zero divisors. The rings
(ℤ, 0, +, ⋅), (ℚ, 0, +, ⋅), (ℝ, 0, +, ⋅), and (ℂ, 0, +, ⋅) are integral domains.

Section 7.1 FIRST-ORDER SEMANTICS
357
The equation 2푥+ 1 = 0 is written with elements of ℤand the operations of regular
addition and multiplication. Although ℤhas no zero divisors, there is no integer that is a
solution to this equation. To solve the equation, we need the existence of multiplicative
inverses. Let (푅, 0, +, ⋅) be a ring with unity. If 푢∈푅has the property that there
exists 푣∈푅such that 푢⋅푣= 푣⋅푢= 1, then 푢is called a unit. Notice that units
are multiplicative inverses of each other. With this terminology, we make the next
deﬁnition.
DEFINITION 7.1.41
Let (푅, 0, +, ⋅) be a ring with unity.
∙If all nonzero elements of 푅are units, 푅is called a division ring or some-
times a skew ﬁeld.
∙A commutative division ring is called a ﬁeld.
The reason that the equation on page 353 can be solved the way it was is that ℝwith
addition and multiplication form a ﬁeld.
EXAMPLE 7.1.42
While ℤis not a ﬁeld with standard addition and multiplication, ℚ, ℝ, and ℂare.
A more interesting structure is (ℤ푝, [0]푝, +, ⋅) when 푝is a prime. To prove that it
is a ﬁeld, let [푎]푝∈ℤ푝so that [푎]푝≠[0]푝. We must ﬁnd an element of ℤ푝so
that when it is multiplied with [푎]푝the result is [1]푝. Since [푎]푝≠[0]푝, 푝does
not divide 푎. Hence, 푝and 푎are relatively prime, so there are integers 푢and 푣
such that 푢푎+ 푣푝= 1. We are then able to calculate:
[푢]푝⋅[푎]푝= [푢푎]푝
= [1 −푣푝]푝
= [1]푝+ [−푣푝]푝
= [1]푝+ [0]푝
= [1]푝.
EXAMPLE 7.1.43
Let ℜbe a division ring and take 푢and 푣to be elements of the domain of ℜ. Let
1 be unity. Assume 푢푣= 0 and 푢≠0. Then, 푢−1 exists, and we can calculate
푢−1(푢푣) = 푢−10,
(푢−1푢)푣= 0,
1푣= 0,
푣= 0.
Therefore, ℜhas no zero divisors.

358
Chapter 7 MODELS
Exercises
1. Prove the remaining parts of Theorem 7.1.7.
2. Let ≼be a linear order on a nonempty set 퐴. Let 푅be a binary relation symbol.
Deﬁne the {푅}-structure 프= (퐴, ≼). Let 퐼be an 햲-interpretation of 프such that
퐼(푅) = ≼. Prove the following.
(a) 프⊨∃푥(푥푅푥) [퐼].
(b) 프⊨∀푥∀푦(푥푅푦∨푦푅푥) [퐼].
(c) 프⊨∀푥∀푦(푥푅푦∧푦푅푥→푥= 푦) [퐼].
3. Let 픅be the 햭햳-structure (ℤ, 0픅, 1픅, +픅, ⋅픅), where 0픅and 1픅are the numbers 0
and 1 in ℤwhile +픅and ⋅픅are the standard operations of addition and multiplication
of integers. Let 퐼be a 햭햳-interpretation such that 퐼(푥) = 2 and 퐼(푦) = −2. Prove the
following.
(a) 픅⊨푥+ 푦= 0 [퐼].
(b) 픅⊨∃푥([푥+ 1] + 1 = 0) [퐼].
(c) 픅⊨∃푥∀푦(푥⋅푦= 푦) [퐼].
(d) 픅⊨∀푥∀푦∀푧(¬푧= 0 ∧푥⋅푧= 푦⋅푧→푥= 푦) [퐼].
4. Show that 프⊨∀푥[(푥+ 푥5) + 푥8 = 푥+ (푥5 + 푥8)], where 프is the 햭햳-structure of
Example 7.1.10.
5. Find a set of theory symbols 햲, an 햲-structure 프, and an 햲-interpretation 퐼such that
프⊨푝[퐼] for each given formula 푝.
(a) 푥+ 푦= ([1 + 1] + 1) + 1
(b) 푥∕푦+ 푧= 10
(c) ∃푥∃푦(푥< 푦∧푥+ 1 = 푦)
(d) ∀푥∀푦∀푧(푥푅푦∧푦푅푧→푧푅푥)
(e) ∀푥∀푦(푥⋅푦= 0 →푥= 0 ∨푦= 0)
6. For each formula in Exercise 5, ﬁnd a model (프, 퐼) such that 프̸⊨푝[퐼] for each
given formula 푝.
7. Prove that every 햲-structure is a model of the empty set.
8. Let 퐴be a set. Is (P(퐴), ∅, ∩) a group? Explain.
9. Explain why (ℤ+, 0, +), (ℤ, 1, ⋅), and (ℝ, 1, ⋅) are not groups, where the operations
are the standard ones.
10. Suppose that ∗is an operation on ℤdeﬁned by 푥∗푦= 푥+ 푦+ 2.
(a) Identify the identity 휖and the inverses with respect to ∗.
(b) Prove that (ℤ, 휖, ∗) is a group, where 휖is the identity found in Exercise 10(a).
(c) Solve 8 ∗푥= 10.
11. Let 0 represent the zero function ℝ→ℝand + be function addition. That is, For
all 푥∈ℝ,
(푓+ 푔)(푥) = 푓(푥) + 푔(푥).

Section 7.1 FIRST-ORDER SEMANTICS
359
(a) Prove that (ℝℝ, 0, +) is a group.
(b) Is ℝℝthe domain of a group where the binary operation is function division?
If so, what is its identity?
(c) Is ℝℝthe domain of a group where the binary operation is composition? If
so, what is identity?
12. Let 푛be a positive integer.
(a) Prove that matrix multiplication is associative.
(b) Solve the equation in 푀2(ℝ):
[
1
4
−3
0
]
+
[
푎
푏
푐
푑
]
=
[
−3
8
0
−6
]
.
(c) Show that 푀푛(ℝ) is not the domain of a group under matrix multiplication.
13. Let (퐺, 휖, ∗) and (퐺′, 휖′, ∗′) be two groups. For all 푎, 푏∈퐺and 푎′, 푏′ ∈퐺′ deﬁne
(푎, 푎′) ⋅(푏, 푏′) = (푎∗푏, 푎′ ∗′ 푏′).
(a) Conﬁrm that ⋅is a binary operation on 퐺× 퐺′.
(b) Show that (퐺× 퐺′, (휖, 휖′), ⋅) is a group. Prove that it is abelian if and only if
both of the given groups are abelian.
14. Let 푛be an integer. Prove that (푛ℤ, 0, +, ⋅) is a commutative ring.
15. Why is
{[
푎
푏
푐
푑
]
: 푎, 푏, 푐, 푑, ∈ℤ+
}
not the domain of a ring under the standard matrix operations?
16. Prove that the set
{[
푎
0
0
푏
]
: 푎, 푏∈ℝ
}
is the domain of a ring with the standard matrix operations.
17. Both + (function addition) and ◦(composition) are binary operations on ℝℝ, but
(ℝℝ, 0, +, ◦) is not a ring. Identify which ring axioms fail.
18. Let (푅, 0, +, ⋅) and (푅′, 0′, +′, ⋅′) be rings. Deﬁne addition and multiplication on
푅× 푅′ so that for all (푎, 푏), (푐, 푑) ∈푅× 푅′,
(푎, 푏) + (푐, 푑) = (푎+ 푐, 푏+′ 푑),
and
(푎, 푏) ⋅(푐, 푑) = (푎⋅푐, 푏⋅′ 푑).
Prove that (푅× 푅′, (0, 0), +, ⋅) is a ring.
19. Prove the converse of Example 7.1.24.
20. Prove that
{G1, G2, G3} ⊨∀푥∀푦[∀푧(푥◦푧= 푧∧푧◦푥= 푥)
∧∀푧(푦◦푧= 푧∧푧◦푦= 푧) →푥= 푦].

360
Chapter 7 MODELS
21. Let 픊= (퐺, 휖, ∗) be a group so that
픊⊨∀푥∀푦[(푎◦푏) ◦(푎◦푏) = 푎◦푎◦푏◦푏].
Show that 픊is abelian.
22. Prove that ∀푥(○⊗푥= ○) is a consequence of the ring axioms.
23. Let −be a unary function symbol. Deﬁne 햱햨′ = 햱햨∪{−}. Show that the given
sentences are consequences of the ring axioms and ∀푥(−푥⊕푥= ○).
(a) ∀푥∀푦[−(푥⊗푦) = −푥⊗푦∧−푥⊗푦= 푥⊗−푦]
(b) ∀푥∀푦(−푎⊗−푏= 푎⊗푏)
(c) ∀푥∀[−(푎⊕푏) = −푎⊕−푏]
(d) −○= ○
24. This exercise uses the notation of Exercise 23. Let ℜbe a ring with unity. Let ℜ′
be the expansion of ℜto 햱햨′ = 햱햨∪{−}. Assume that for all 푟∈dom(ℜ′),
−ℜ(푟) ⊕ℜ푟= ○ℜ.
Prove that ℜ′ ⊨∀푥[∀푦(푥⊗푦= 푦∧푦⊗푥= 푦) →∀푧(−푧= −푥⊗푧)].
25. Let 푝and 푞be 햲-formulas. Prove that the given 햲-sentences are valid.
(a) 푝∨¬푝
(b) 푝→푞↔¬푝∨푞
(c) ∃푥(푝∨푞) ↔∃푥푝∨∃푥푞
(d) ∀푥(푝∧푞) ↔∀푥푝∧∀푥푞
26. Let 푅be a binary relation symbols and 푓be a binary function symbol. Show that
the given sentences are satisﬁable.
(a) ∃푥(푥= 푥)
(b) ∃푥∃푦∃푧(¬푥= 푦∧¬푥= 푧∧¬푦= 푧)
(c) ∃푥∀푦(푅푥푦∨푥= 푦)
(d) ∀푥∀푦(푓푥푦= 1)
(e) ∀푥∀푦[푅푥푦→∃푧(푅푥푧∧푅푧푦)]
27. Let 햲and 햳be sets of theory symbols such that 햲⊆햳. Let 프be a reduct to 햲of
the 햳-structure 픅. Prove that 프⊨푝if and only if 픅⊨푝for all 햲-sentences 푝.
28. Suppose that 푝0, 푝1, … , 푝푛−1 are 햲-sentences. For every 햲-structure 프, prove that
프⊨푝0 ∧푝1 ∧· · · ∧푝푛−1 if and only if 프⊨푝푖for all 푖= 0, 1, … , 푛−1.
29. Answer the following about (ℤ푛, [0]푛, +, ⋅):
(a) Prove that addition and multiplication of congruence classes is well-deﬁned.
(b) Show that the additive identity is [0]푛.
(c) For all 푎∈ℤ, show that −[푎]푛= [푛−푎]푛.
(d) Show that [1]푛is the multiplicative identity.
(e) Prove that (ℤ푛, [0]푛, +, ⋅) is a commutative ring.
(f)
Prove that the ring contains zero divisors when 푛is not prime.

Section 7.2 SUBSTRUCTURES
361
30. Prove that ∀푥∀푦∀푧(푥⊕푦= 푥⊕푧→푦= 푧) is a consequence of the ring axioms.
31. Let ℜbe an integral domain. Prove the following.
(a) ℜ⊨∀푥∀푦(푥⊗푦= ○→푥= ○∨푦= 0).
(b) ℜ⊨∀푥∀푦∀푧(푥⊗푦= 푥⊗푧∧푥≠○→푦= 푧).
32. Suppose that ℜ= (푅, 0, +, ⋅) is a commutative ring with unity. Show that if
ℜ⊨∀푥∀푦∃푧(푥⊗푧⊕푦= ○), then ℜa ﬁeld.
33. Is ({0}, 0, +, ⋅) a ﬁeld? Explain.
7.2
SUBSTRUCTURES
When looking for examples of groups, the 햦햱-structure (ℤ, 0, +) is often the ﬁrst to
come to mind. The beneﬁt of this example is that not only are we familiar with the
integers but it has the property that many of its subsets also form groups. Let 푛∈ℤ.
Addition on ℤrestricted to 푛ℤ× 푛ℤis an associative binary operation on 푛ℤ, every
element of 푛ℤhas an additive inverse in 푛ℤ, and 0 ∈푛ℤ, so the 햦햱-structure (푛ℤ, 0, +)
is a group. Since 푛≠±1 implies that 푛ℤ⊂ℤ, there are inﬁnitely many diﬀerent
examples of 햦햱-structures, all within (ℤ, 0, +). We generalize this idea to arbitrary
structures.
DEFINITION 7.2.1
If 프= (퐴, 픞) and 픅= (퐵, 픟) are 햲-structures, 프is a substructure of 픅(written
as 프⊆픅) means that 퐴⊆퐵and the following properties hold.
∙픞(푐) = 픟(푐) for all constant symbols 푐.
∙픞(푅) = 픟(푅) ∩퐴푛for every 푛-ary relation symbol 푅.
∙픞(푓) = 픟(푓) ↾퐴푛for every 푛-ary function symbol 푓.
If 프is a substructure of 픅, then 픅is an extension of 프.
Note the diﬀerence between a substructure and a reduct and between an extension
and an expansion (page 352). For all 푛∈ℤ, the group (푛ℤ, 0, +) is a substructure
of (ℤ, 0, +), and (ℤ, 0, +) is an extension of (푛ℤ, 0, +). Here both structures have the
same set of theory symbols, and the domain of one is a subset of the other. However,
(ℤ, 0, +) is a reduct of (ℤ, 0, 1, +, ⋅), and (ℤ, 0, 1, +, ⋅) is an expansion of (ℤ, 0, +). In
this case, the domains are the same, but the theory symbol set of the one is a subset of
the theory symbol set of the other.
EXAMPLE 7.2.2
Let 푅be a binary relation symbol. Let 프= ([0, 1] , 픞) and 픅= ([0, 2] , 픟) be
{푅}-structures such that 픞(푅) and 픟(푅) are both standard less-than. That is,
픞(푅) = {(푥, 푦) ∈ℝ× ℝ: 0 ≤푥< 푦≤1}

362
Chapter 7 MODELS
and
픟(푅) = {(푥, 푦) ∈ℝ× ℝ: 0 ≤푥< 푦≤2}.
We conclude that 프⊆픅because of the following:
∙[0, 1] ⊆[0, 2].
∙There are no constant symbols.
∙픞(푅) = 픟(푅) ∩([0, 1] × [0, 1]).
∙There are no function symbols.
EXAMPLE 7.2.3
Let 푛∈ℤ. Deﬁne the 햭햳-structure 픅= (ℤ, 픟), where 픟(0) is the additive
identity of ℤ, 픟(1) is the multiplicative identity of ℤ, 픟(+) is standard addition
on ℤ, and 픟(⋅) is standard multiplication on ℤ. Let 프푛= (푛ℤ, 픞) such that
픞(0) = 픟(0),
픞(1) = 픟(1),
픞(+) = 픟(+) ↾(푛ℤ× 푛ℤ),
픞(⋅) = 픟(⋅) ↾(푛ℤ× 푛ℤ).
Then, 프is a substructure of 픅.
In particular, Example 7.2.3 gives
프8 ⊆프4 ⊆프2,
which implies that 프8 ⊆프2. This is a special case of the next theorem.
THEOREM 7.2.4
Let 프, 픅, and ℭbe 햲-structures.
∙프⊆프.
∙If 프⊆픅and 픅⊆ℭ, then 프⊆ℭ.
PROOF
That 프is a substructure of itself is clear, so suppose that 프is a substructure of
픅and 픅is a substructure of ℭ. Write 프= (퐴, 픞), 픅= (퐵, 픟), and ℭ= (퐶, 픠).
Then, for all constant symbols 푐,
픞(푐) = 픟(푐) = 픠(푐).
Since 프⊆픅, 픞(푅) = 픟(푅) ∩퐴푛, and since 픅⊆ℭ, 픟(푅) = 픠(푅) ∩퐵푛for every
푛-ary relation symbol 푅, so
픞(푅) = 픠(푅) ∩퐵푛∩퐴푛= 픠(푅) ∩퐴푛.

Section 7.2 SUBSTRUCTURES
363
Also, 픞(푓) = 픟(푓) ↾퐴푛and 픟(푓) = 픠(푓) ↾퐵푛for all 푛-ary function symbols 푓,
so
픞(푓) = (픠(푓) ↾퐵푛) ↾퐴푛= 픠(푓) ↾퐴푛.
Therefore, 프is a substructure of ℭ.
Subgroups
Let 푎be an element of a group (퐺, 휖, ∗). For all positive integers 푛, deﬁne 푎푛to be the
result of operating 푎with itself 푛times. That is,
푎1 = 푎, 푎2 = 푎∗푎, 푎3 = 푎∗푎∗푎, …
and
푎푚∗푎푛= 푎푚+푛.
Further, deﬁne 푎0 = 푒and 푎−1 to be the inverse of 푎. With this notation, we observe
that
(푎∗푏)−1 = 푏−1 ∗푎−1
and
푎−푛= (푎푛)−1 = (푎−1)푛.
We then gather all of these elements into a set,
⟨푎⟩= {푎푛: 푛∈ℤ},
and deﬁne the following.
DEFINITION 7.2.5
A group 픊is cyclic if there exists 푎∈dom(픊) such that dom(픊) = ⟨푎⟩. The
element 푎is called a generator of 픊.
For example, (ℤ, 0, +) is a cyclic group. Both 1 and −1 are generators. However, ℚ
and ℝpaired with addition do not form cyclic groups. As for ﬁnite groups, each ℤ푛is
cyclic, generated by [1]푛, but the Klein-4 group (Example 7.1.18) is not cyclic because
푎2 = 푒for all 푎in the group.
An element 푎of a group might not generate the entire group, but since 푒∈⟨푎⟩and
both 푎푛and 푎−푛are elements of ⟨푎⟩, the set generated by 푎forms a group using the
operation from 픊.
DEFINITION 7.2.6
A substructure ℌof a group 픊that is a group is called a subgroup of 픊.
Every group with at least two elements has at least two subgroups, itself (the im-
proper subgroup) and the subgroup with domain {휖} (the trivial subgroup). A group
that has at most these two subgroups is called simple. For example, (ℤ2, 0, +) and
(ℤ3, 0, +) form simple groups, but (ℤ4, 0, +) does not because it has a subgroup with do-
main {[0]4, [2]4}. Other examples of nonsimple groups are (ℝ, 0, +) because (ℤ, 0, +)

364
Chapter 7 MODELS
is one of its subgroups and (⟨2⟩, 0, +) because (⟨6⟩, 0, +) is one of its subgroups. These
subgroups that are not improper are called proper.
It is tempting to deﬁne a subgroup simply as a substructure of a group, but this would
not work if the subgroup is to be a group. For example, viewing 휔as a subset of ℤvia
(5.8) allows (휔, 0, +) to be a 햦햱-substructure of (ℤ, 0, +), but
(휔, 0, +) ⊨{G1, G2}
yet
(휔, 0, +) ̸⊨G3.
This example suggests the following.
THEOREM 7.2.7
A substructure ℌof a group 픊is a subgroup of 픊if and only if ℌ⊨G3.
PROOF
Write 픊= (퐺, 픤) and ℌ= (퐻, 픥) and let ℌ⊆픊. If ℌis a subgroup, then
ℌ⊨G3. To prove the converse, assume ℌ⊨G3.
∙Let 푥, 푦, 푧∈퐻. Since ℎ(◦) = 푔(◦) ↾(퐻× 퐻),
픥(◦)(푥, 픥(◦)(푦, 푧)) = 픤(◦)(푥, 픤(◦)(푦, 푧))
= 픤(◦)(픤(◦)(푥, 푦), 푧)
= 픥(◦)(픥(◦)(푥, 푦), 푧).
The second equality holds because the interpretation of ◦in 픊is associa-
tive.
∙Let 푥∈퐻. Because 픥(푒) = 픤(푒),
픥(◦)(픥(푒), 푥) = 픤(◦)(픤(푒), 푥) = 푥
and
픥(◦)(푥, 픥(푒)) = 픤(◦)(푥, 픤(푒)) = 푥.
Therefore, ℌis a group and, thus, a subgroup of 픊.
The standard way to show that a subset of a group forms a subgroup is not to show
directly that the set satisﬁes the three group axioms or to appeal to Theorem 7.2.7.
Instead, what is typically done in algebra is to check that the conditions of the next
theorem are satisﬁed by the set.
THEOREM 7.2.8
If 픊= (퐺, 휖, ∗) is a group and 퐻⊆퐺, there exists a subgroup of 픊with domain
퐻if
∙퐻is closed under ∗,
∙휖∈퐻,
∙푎−1 ∈퐻for all 푎∈퐻.

Section 7.2 SUBSTRUCTURES
365
PROOF
Suppose that the three hypotheses of the theorem hold.
∙Let 푎, 푏∈퐻. By the ﬁrst hypothesis, 푎∗푏∈퐻. Therefore, ∗↾(퐻× 퐻)
is a binary operation on 퐻.
∙Since ∗is associative on 퐺, the restriction of ∗to 퐻must be associative.
∙The second hypothesis gives 퐻an identity element.
∙Every element of 퐻has its inverse in 퐻by the third hypothesis.
Therefore, (퐻, 휖, ∗↾[퐻× 퐻]) is a group. Since 퐻⊆dom(픊), we conclude that
(퐻, 휖, ∗↾[퐻× 퐻]) is a subgroup of 픊.
EXAMPLE 7.2.9
To illustrate the theorem, take a group 픊= (퐺, 휖, ∗) and a family of subgroups
(퐻푖, 휖, ∗↾[퐻푖× 퐻푖]) for all 푖∈퐼. Although the union of subgroups might not
be a subgroup (Exercise 9), we can show that
(⋂
푖∈퐼
퐻푖, 휖, ∗↾
[⋂
푖∈퐼
퐻푖×
⋂
푖∈퐼
퐻푖
])
is a subgroup of 픊.
∙By Exercise 3.4.22(b), ⋂
푖∈퐼퐻푖⊆퐺.
∙Let 푎, 푏∈⋂
푖∈퐼퐻푖. This means that 푎, 푏∈퐻푖for all 푖∈퐼. Since each
퐻푖is closed under the operation of 픊, 푎∗푏∈퐻푖for all 푖∈퐼. Hence,
푎∗푏∈
⋂
푖∈퐼
퐻푖.
∙Since 휖∈퐻푖for every 푖∈퐼, we must have 휖∈⋂
푖∈퐼퐻푖.
∙Take 푎to be an element of ⋂
푖∈퐼퐻푖. Then, 푎−1 ∈퐻푖for all 푖∈퐼, so
푎−1 ∈⋂
푖∈퐼퐻푖.
Now we return to cyclic groups.
THEOREM 7.2.10
A subgroup of a cyclic group is cyclic.

366
Chapter 7 MODELS
PROOF
Let 픊= (퐺, 휖, ∗) be a cyclic group with generator 푎. Let ℌ= (퐻, 휖, ∗) be a
subgroup of 픊. If ℌis the trivial subgroup, the subgroup is cyclic with generator
휖. So suppose that ℌis not the trivial subgroup. Because 픊is cyclic, there exists
a least natural number 푛> 0 such that 푎푛∈퐻(Theorem 5.2.13). Suppose that
푎푛is not a generator of ℌ. This means that there exists 푚∈휔with 푚> 푛
such that 푎푚∈퐻but 푎푚∉⟨푎푛⟩. This combined with the division algorithm
(Theorem 4.3.31) yields unique natural numbers 푞and 푟such that 푚= 푛푞+ 푟
and 0 < 푟< 푛. Therefore,
푎푚= 푎푛푞+푟= 푎푛푞∗푎푟,
and from this, we conclude that
푎푟= 푎−푛푞∗푎푚.
Since 푎−푛푞, 푎푚∈퐻, 푎푟is an element of 퐻. This contradicts the minimality of 푛
because 푟< 푛. Thus, 푎푛is a generator of ℌ.
Subrings
Some of the examples of rings had domains that were subsets of other rings. For ex-
ample, 푛ℤis a subset of ℤ, and ℚis a subset of ℝ. Generalizing leads to the next
deﬁnition.
DEFINITION 7.2.11
A substructure 픖of a ring ℜthat is a ring is called a subring of ℜ.
A subring of ℜsuch that its domain is a proper subset of the domain of ℜis called
a proper subring. The ring itself is called the improper subring. The subring with
domain {0} is the trivial subring.
EXAMPLE 7.2.12
∙({[0]9 , [3]9 , [6]9}, [0]9, +, ⋅) is a subring of (ℤ9, [0]9, +, ⋅).
∙(ℤ, 0, +, ⋅) is a subring of (ℝ, 0, +, ⋅).
∙(M2(ℝ), 02, +, ⋅) is a subring of (M2(ℂ), 02, +, ⋅).
As with subgroups, a substructure of a ring is not necessarily a subring, but we do
have results similar to those for groups found in Theorems 7.2.8 and 7.2.7. They are
stated without proof since they follow quickly from Deﬁnition 7.2.11.
THEOREM 7.2.13
A substructure 픖of a ring ℜis a subring of ℜif and only if 픖⊨R4.
We follow the convention that if ℜrepresents an arbitrary ring, ℜ= (푅, 0, +, ⋅) and
if ℜ′ also represents an arbitrary ring, ℜ′ = (푅′, 0′, +′, ⋅′). This will help us with our
notation.

Section 7.2 SUBSTRUCTURES
367
THEOREM 7.2.14
If ℜis a ring and 푆⊆푅, there exists a subring of ℜwith domain 푆if
∙푆is closed under + and ⋅,
∙0 ∈푆,
∙−푎∈푆for all 푎∈푅.
The subring found while proving Theorem 7.2.14 is (푆, 0, + ↾[푆× 푆], ⋅↾[푆× 푆]).
EXAMPLE 7.2.15
We use Theorem 7.2.14 to show that 픖= (푆, 02, + ↾[푆× 푆], ⋅↾[푆× 푆]) is a
subring of 픐2(ℝ) (Example 7.1.39), where
푆=
{[
푎
0
0
푏
]
: 푎, 푏∈ℝ
}
.
∙Let 푎, 푏, 푎′, 푏′ ∈ℝ, and assume that
퐴=
[
푎
0
0
푏
]
and 퐵=
[
푎′
0
0
푏′
]
.
Then,
퐴+ 퐵=
[
푎+ 푎′
0
0
푏+ 푏′
]
and
퐴퐵=
[
푎푎′
0
0
푏푏′
]
.
These are elements of 푆.
∙Clearly, the zero matrix is in 푆. (Let 푎= 푏= 0.)
∙Take 푎, 푏∈ℝand write
퐴=
[
푎
0
0
푏
]
.
Hence,
−퐴=
[
−푎
0
0
−푏
]
is an element of 푆.

368
Chapter 7 MODELS
EXAMPLE 7.2.16
Let 픖and 픗be subrings of a ring ℜ. Let 푆be the domain of 픖and 푇be the
domain of 픗. Check the conditions of Theorem 7.2.14 to show that there exists
a subring of ℜwith domain 푆∩푇.
∙To prove closure, let 푥, 푦∈푆∩푇. This means that 푥+푦∈푆and 푥+푦∈푇.
Hence, 푥+ 푦∈푆∩푇. Similarly, 푥푦∈푆∩푇.
∙Since 0 ∈푆and 0 ∈푇, 0 ∈푆∩푇.
∙Suppose 푥∈푆∩푇. Then 푥∈푆and 푥∈푇. Since these are subrings,
−푥∈푆and −푥∈푇. Thus, −푥∈푆∩푇.
Ideals
The subring 픖of the ring ℜin Example 7.2.15 lacks a property that is often desirable
to have in a subring. Observe that
[
1
0
0
1
]
⋅
[
1
2
3
4
]
=
[
1
2
3
4
]
∉푆,
so in general it is false that 퐴퐵∈푆and 퐵퐴∈푆for all 퐴∈푆and 퐵∈M2(ℝ).
DEFINITION 7.2.17
Let ℜbe a ring with domain 푅and ℑbe a subring of ℜwith domain 퐼.
∙If 푟푎∈퐼and 푎푟∈퐼for all 푟∈푅and 푎∈퐼, then ℑis an ideal of ℜ.
∙If 푟푎∈퐼for all 푟∈푅and 푎∈퐼, then ℑis a left ideal.
∙If 푎푟∈퐼for all 푟∈푅and 푎∈퐼, then ℑis a right ideal.
A ring ℜis an ideal of itself, called the improper ideal of ℜ. All other ideals of ℜare
proper, including the ideal formed by {0}. Furthermore, in a commutative ring, there
is no diﬀerence between a left and right ideal. However, if the ring is not commutative,
a left ideal might not be a right ideal.
EXAMPLE 7.2.18
Deﬁne
퐼=
{[
푎
0
푏
0
]
: 푎, 푏∈ℝ
}
.
Using matrix multiplication,
[
푥
푦
푧
푤
]
⋅
[
푎
0
푏
0
]
=
[
푥푎+ 푦푏
0
푧푎+ 푤푏
0
]
∈퐼,

Section 7.2 SUBSTRUCTURES
369
but
[
1
0
1
0
]
⋅
[
1
1
1
1
]
=
[
1
1
1
1
]
∉퐼.
Therefore, the subring (퐼, 02, + ↾[퐼× 퐼], ⋅↾[퐼× 퐼]) of 픐2(ℝ) is a left ideal but
not a right ideal.
EXAMPLE 7.2.19
Let 퐼= {[0]4, [2]4}. Then, ℑ= (퐼, [0]4, + ↾[퐼× 퐼], ⋅↾[퐼× 퐼]) is a subring
of the ring ℜ= (ℤ4[0]4, +, ⋅). It also forms an ideal. To see this, check the
calculations:
[0]4 ⋅[0]4 = [0]4
[0]4 ⋅[0]4 = [0]4,
[1]4 ⋅[0]4 = [0]4
[0]4 ⋅[1]4 = [0]4,
[2]4 ⋅[0]4 = [0]4
[0]4 ⋅[2]4 = [0]4,
[3]4 ⋅[0]4 = [0]4
[0]4 ⋅[3]4 = [0]4,
[0]4 ⋅[2]4 = [0]4
[2]4 ⋅[0]4 = [0]4,
[1]4 ⋅[2]4 = [2]4
[2]4 ⋅[1]4 = [2]4,
[2]4 ⋅[2]4 = [0]4
[2]4 ⋅[2]4 = [0]4,
[3]4 ⋅[2]4 = [2]4
[2]4 ⋅[3]4 = [2]4.
When we multiply any element of ℤ4 by an element of 퐼on either side, the result
is an element of 퐼.
EXAMPLE 7.2.20
Let ℜbe a ring. It is left to Exercise 18 to show that the ring
픖= (푅× {0}, (0, 0), +′, ⋅′)
is a subring of
픗= (푅× 푅, (0, 0), +, ⋅)
with + and ⋅deﬁned coordinatewise and +′ and ⋅′ being the restrictions of + and ⋅
to 푅×{0}. To show that 픖is an ideal of 픗, let (푟, 푠) ∈푅×푅and (푎, 0) ∈푅×{0}.
We then calculate
(푟, 푠) ⋅(푎, 0) = (푟푎, 0) ∈푅× {0}
and
(푎, 0) ⋅(푟, 푠) = (푎푟, 0) ∈푅× {0}.
EXAMPLE 7.2.21
Let ℜbe a ring. Let 푆and 푇be subsets of 푅such that
픖= (푆, 0, + ↾[푆× 푆], ⋅↾[푆× 푆])

370
Chapter 7 MODELS
and
픗= (푇, 0, + ↾[푇× 푇], ⋅↾[푇× 푇])
are ideals of ℜ. Deﬁne
푆+ 푇= {푠+ 푡: 푠∈푆and 푡∈푇}.
We prove that 푆+ 푇is the domain of an ideal of ℜ.
∙Take 푥, 푦∈푆+ 푇. This means that 푥= 푠+ 푡and 푦= 푠′ + 푡′ for some
푠, 푠′ ∈푆and 푡, 푡′ ∈푇. Then,
푥+ 푦= (푠+ 푡) + (푠′ + 푡′)
= 푠+ (푡+ 푠′) + 푡′
= 푠+ (푠′ + 푡) + 푡′
= (푠+ 푠′) + (푡+ 푡′).
Thus, 푥+ 푦∈푆+ 푇since 푠+ 푠′ ∈푆and 푡+ 푡′ ∈푇. Also,
푥푦= (푠+ 푡)(푠′ + 푡′) = (푠+ 푡)푠′ + (푠+ 푡)푡′.
Since 푠+ 푡∈푅and 픖is an ideal, (푠+ 푡)푠′ ∈푆. Likewise, (푠+ 푡)푡′ is an
element of 푇. Hence, 푥푦∈푆+ 푇.
∙We know that 0 ∈푆+ 푇because 0 = 0 + 0 and 0 ∈푆and 0 ∈푇.
∙Let 푠∈푆and 푡∈푇. Then, since −푠∈푆and −푡∈푡,
−(푠+ 푡) = −푠+ −푡∈푆+ 푇.
∙Let 푟∈푅, 푠∈푆, and 푡∈푇. Since 푟푠∈푆and 푟푡∈푇,
푟(푠+ 푡) = 푟푠+ 푟푡∈푆+ 푇,
and since 푠푟∈푆and 푡푟∈푇,
(푠+ 푡)푟= 푠푟+ 푡푟∈푆+ 푇.
Cyclic subgroups (Deﬁnition 7.2.5) are generated by a single element. The corre-
sponding notion in rings is the following deﬁnition.
DEFINITION 7.2.22
Let ℜbe a ring. For every 푎∈푅, deﬁne
⟨푎⟩= {푟푎: 푟∈푅}.
If ℑis a left ideal of ℜsuch that dom(ℑ) = ⟨푎⟩for some 푎∈푅, then ℑis called
a principal ideal left ideal and 푎is a generator of ℑ. If ℜis commutative, ℑ
is an ideal of ℜcalled a principal ideal.
The set 푛ℤis the domain of an ideal of the ring (ℤ, 0, +, ⋅). It is a principal ideal because
푛ℤ= ⟨푛⟩. (See Exercises 16 and 21.) In fact, every element of a ring generates a left
ideal of the ring.

Section 7.2 SUBSTRUCTURES
371
THEOREM 7.2.23
For every ring ℜand 푎∈푅, the ring ℑ= (⟨푎⟩, 0, + ↾[⟨푎⟩× ⟨푎⟩], ⋅↾[⟨푎⟩× ⟨푎⟩])
is a left ideal of ℜ.
PROOF
First, show that ℑis a subring.
∙Let 푟, 푠∈푅. Then, because 푟+ 푠and (푟푎)푠are elements of dom(푅),
푟푎+ 푠푎= (푟+ 푠)푎∈⟨푎⟩
and
(푟푎)(푠푎) = [(푟푎)푠] 푎∈⟨푎⟩.
∙Since 0푎= 0 [Exercise 7.1.22], we have that 0 ∈⟨푎⟩.
∙If 푟∈푅, then (−푟)푎∈⟨푎⟩and −푟푎+ 푟푎= (−푟+ 푟)푎= 0푎= 0.
To prove that ℑis a left ideal of ℜ, take 푟, 푠∈푅. Then, 푟(푠푎) ∈⟨푎⟩because
푟푠∈푅and 푟(푠푎) = (푟푠)푎.
Notice that a principal left ideal might not be a two-sided ideal. Example 7.2.18 com-
bined with the next example illustrates this fact.
EXAMPLE 7.2.24
Let ℑ= (퐼, 02, + ↾[퐼× 퐼], ⋅↾[퐼× 퐼]) be a left ideal of 픐2(ℝ), where
퐼=
{[
푎
0
푏
0
]
: 푎, 푏∈ℝ
}
.
By Theorem 7.2.23, it is a principal left ideal of 픐2(ℝ) because
퐼=
⟨[
1
0
0
0
]⟩
.
To prove this, it suﬃces to take 푎, 푏∈ℝand observe that
[
푎
0
푏
0
]
=
[
푎
0
푏
0
]
⋅
[
1
0
0
0
]
implies
[
푎
0
푏
0
]
∈
⟨[
1
0
0
0
]⟩
.

372
Chapter 7 MODELS
EXAMPLE 7.2.25
Every ideal in the ring ℨ= (ℤ, 0, +, ⋅) is principal. To see this, let ℑbe an ideal
of ℨ. We must ﬁnd an element of ℤthat generates 퐼= dom(ℑ). We have two
cases to consider:
∙If 퐼= {0}, then 퐼= ⟨0⟩.
∙Suppose 퐼≠{0}. This means that 퐼∩ℤ+ ≠∅. By Theorem 5.2.13 and
Exercise 5.3.1, 퐼must contain a minimal positive integer. Call it 푚. We
claim that 퐼= ⟨푚⟩. It is clear that ⟨푚⟩⊆퐼, so take 푎∈퐼and divide it by
푚. The division algorithm (Theorem 4.3.31) gives 푞, 푟∈휔so that
푎= 푚푞+ 푟
with 0 ≤푟< 푚. Then, 푟∈퐼because 푟= 푎−푚푞and 푎, 푚푞∈퐼.
If 푟> 0, then we have a contradiction of the fact that 푚is the smallest
positive integer in 퐼. Hence, 푟= 0 and 푎= 푚푞. This means that 푎∈⟨푚⟩.
ℨis an example of a principal ideal domain, an integral domain in which every
ideal is principal.
Exercises
1. Let 푅be a binary relation symbol. Deﬁne the {푅}-structures 프= (ℚ, <ℚ) and
픅= (ℝ, <ℝ), where <ℚrefers to standard less-than on ℚand <ℝrefers to standard
less-than on ℝ. Prove that 프is a substructure of 픅.
2. Let 프= (퐴, 픞), 픅= (퐵, 픟), and ℭ= (퐶, 픠) be 햲-structures such that 픅⊆프and
ℭ⊆프. Deﬁne 픇= (퐷, 픡) such that 퐷= 퐵∩퐶, 픡(푐) = 픞(푐) for all constant symbols
푐∈햲, 픡(푅) = 픟(푅) ∩픠(푅) for all relation symbols 푅∈햲, and 픡(푓) = 픟(푓) ∩픠(푓) for
all function symbols 푓∈햲. Prove that 픇⊆프.
3. Let 휅be a cardinal. Deﬁne 프훼= (퐴훼, 픞훼) to be an 햲-structure for all 훼∈휅. The
family {프훾: 훾∈휅} is called a chain of 햲-structures if for all 훼∈훽∈휅, we have that
프훼⊆프훽. Deﬁne the 햲-structure ⋃
훾∈휅프훾= (⋃
훾∈휅퐴훾, 픞) so that for every relation
symbol 푅∈햲,
픞(푅) =
⋃
훾∈휅
픞훼(푅),
and for every function symbol 푓∈햲,
픞(푓) =
⋃
훾∈휅
픞훼(푓).
Prove the following.
(a) {픞훾(푅) : 훾∈휅} is a chain with respect to ⊆for all relation symbols 푅∈햲.
(b) ⋃
훾∈휅픞훾(푓) is a function.
(c) 프훼⊆⋃
훾∈휅프훾for all 훼∈휅.

Section 7.2 SUBSTRUCTURES
373
4. Let 햲⊆햳be sets of subject symbols. Let 프and 픅be 햳-structures. Prove that if
프⊆픅, then the reduct of 프to 햲is a substructure of the reduct of 픅to 햲.
5. Find 햲-substructures of the given 햲-structures. If possible, ﬁnd a 햲-sentence that is
true in the given structure but not true in the substructure.
(a) (ℤ∪P(ℤ), ∈), 햲= 햲햳
(b) (휔, ∅, {∅}, +, ⋅), 햲= 햭햳
(c) (ℂ, 0, +), 햲= 햦햱
(d) (ℝ, 0, +, ⋅, <), 햲= 햮향
6. Let 픊be a group with domain 퐺. Find all subgroups of 픊given the following and
assuming the standard operations for each set.
(a) 퐺is the Klein-4 group
(b) 퐺= ℤ5
(c) 퐺= ℤ8
(d) 퐺= ℤ2 × ℤ3
(e) 퐺= ℤ2 × ℤ6
7. Show that {푓∈ℝℝ: 푓(0) = 0} is the domain of a subgroup of the group
(ℝℝ, 0, +).
8. Deﬁne 퐻= {퐴∈M푛(ℝ) : 푎1,1 + 푎2,2 + · · · + 푎푛,푛= 0}. Prove that (퐻, 0푛, +) is a
subgroup of the group (M푛(ℝ), 0푛, +).
9. Let {ℌ푖: 푖∈퐼} be a family of subgroups of the group 픊. Give an example to show
that ⋃
푖∈퐼ℌ푖is not necessarily the domain of a subgroup of 픊.
10. Let (퐻, 휖, ∗↾[퐻× 퐻]) and (퐾, 휖, ∗↾[퐾× 퐾]) be two subgroups of an abelian
group 픊= (퐺, 휖, ∗). Deﬁne
퐻퐾= {푎∗푏: 푎∈퐻∧푏∈퐾}.
Prove that (퐻퐾, 휖, ∗↾[퐻퐾× 퐻퐾]) is a subgroup of 픊.
11. For any group 픊= (퐺, 휖, ∗), let 푆⊆퐺and deﬁne
퐻= {푎∈퐺: 푎∗푏= 푏∗푎for all 푏∈푆}.
Prove that (퐻, 휖, ∗↾[퐻× 퐻]) is a subgroup of 픊.
12. Demonstrate that simple groups are cyclic.
13. Prove Theorem 7.2.14.
14. Prove that the subrings of a ring with unity are rings with unity.
15. Let ℜbe a ring with domain 푅. Find all ideals of ℜgiven the following and
assuming the standard operations for each set.
(a) 푅= ℤ2
(b) 푅= ℤ6
(c) 푅= ℤ7

374
Chapter 7 MODELS
(d) 푅= ℤ12
16. Let 푛∈ℤ. Prove that 푛ℤis the domain of an ideal of the ring (ℤ, 0, +, ⋅).
17. Let ℜ= (ℤ× ℤ, (0, 0), +, ⋅).
(a) Prove that {(2푚, 2푛) : 푚, 푛∈ℤ} is the domain of an ideal of ℜ.
(b) Prove that {(2푛, 2푛) : 푛∈ℤ} is not the domain of an ideal of ℜ.
(c) Prove that ℤ× 3ℤis the domain of a principal ideal of ℜ.
(d) Is {(2푚, 2푛) : 푚, 푛∈ℤ} the domain of a principal ideal of ℜ?
18. Prove the 픖is a subring of 픗in Example 7.2.20.
19. Let ℜbe a ring with unity and ℑan ideal of ℜ. Let 푅be the domain of ℜand 퐼
be the domain of ℑ. Prove that if 푢is a unit and 푢∈퐼, then 퐼= 푅.
20. Prove that a ﬁeld has no proper, nontrivial ideals.
21. Prove that 푛ℤis the domain of a principal ideal of the ring (ℤ, 0, +, ⋅) for any
integer 푛.
22. Show that for any ideal ℑ, if 푎∈dom(ℑ), then ⟨푎⟩⊆dom(ℑ).
23. Take a ring ℜand let 푎∈dom(ℜ). Show ⟨푎⟩is the domain of a left ideal of ℜ
but not necessarily a right ideal if ℜis not commutative.
24. Let 푢be a unit of a ring ℜ. Show for all 푎∈dom(ℜ), ⟨푎⟩= ⟨푢푎⟩.
25. An ideal 픓= (푃, 0, +, ⋅) of a commutative ring ℜ= (푅, 0, +, ⋅) is prime means
for all 푎, 푏∈푅, if 푎푏∈푃, then 푎∈푃or 푏∈푃. Let 푝∈ℤ+ be a prime number
(Example 2.4.18). Prove that (푝ℤ, 0, + ↾푝ℤ, ⋅↾푝ℤ) is a prime ideal of (ℤ, 0, +, ⋅).
26. Prove that the trivial subring of an integral domain is a prime ideal.
27. Let ℜbe a commutative ring and 픐a proper ideal of ℜ. If no proper ideal of ℜ
has 픐as a proper ideal, 픐is a maximal ideal of ℜ. Assume that 푝is a prime number.
Prove that 푝ℤis the domain of a maximal ideal of (ℤ, 0, +, ⋅).
28. Prove that the trivial ideal is the maximal ideal of a ﬁeld.
29. Let 푝∈ℤbe prime. Prove that {(푝푎, 푏) : 푎, 푏∈ℤ} is the domain of a maximal
ideal of the ring with domain ℤ× ℤ(Example 7.2.20).
30. Use Zorn’s lemma (Theorem 5.1.13) to prove that every commutative ring with
unity has a maximal ideal.
7.3
HOMOMORPHISMS
The function 푓: [0, ∞) →(−∞, 0] deﬁned by 푓(푥) = −푥preserves ≤with ≥(Exam-
ple 4.5.25). Deﬁne the {≼}-structures 프= ([0, ∞) , 픞) and 픅= ((−∞, 0] , 픟), where
픞(≼) = ≤and 픟(≼) = ≥. When 푥0, 푥1 ∈[0, ∞), observe that
(푥0, 푥1) ∈픞(≼) if and only if (푓(푥0), 푓(푥1)) ∈픟(≼).

Section 7.3 HOMOMORPHISMS
375
because
푥0 ≤푥1 if and only if −푥0 ≥−푥1.
Therefore, we know that ≼behaves in 픅as it behaves in 프because of 푓. We generalize
this notion to all 햲-structures in the next deﬁnition.
DEFINITION 7.3.1
Let 프= (퐴, 픞) and 픅= (퐵, 픟) be 햲-structures. A function 휑: 퐴→퐵is a
homomorphism 프→픅if it preserves the structure of 프in 픅. This means
that 휑satisﬁes the following conditions.
∙휑(픞(푐)) = 픟(푐) for all constant symbols 푐∈햲.
∙If 푅is an 푛-ary relation symbol in 햲, then for all 푎0, 푎1, … , 푎푛−1 ∈퐴,
(푎0, 푎1, … , 푎푛−1) ∈픞(푅)
if and only if
(휑(푎0), 휑(푎1), … , 휑(푎푛−1)) ∈픟(푅).
∙If 푓is an 푛-ary function symbol in 햲, for all 푎0, 푎1, … , 푎푛−1 ∈퐴,
휑(픞(푓)(푎0, 푎1, … , 푎푛−1)) = 픟(푓)(휑(푎0), 휑(푎1), … , 휑(푎푛−1)).
When 휑: 퐴→퐵is a homomorphism, write 휑: 프→픅.
There are many important examples of homomorphisms that can be found in algebra.
For instance, let ℜand ℜ′ be rings and 휑: ℜ→ℜ′ be a homomorphism. By
Deﬁnition 7.3.1, this means that
휑(0) = 0′.
Because ⊕and ⊗are the only function symbols in 햱햨, for all 푎, 푏∈푅,
휑(푎+ 푏) = 휑(푎) +′ 휑(푏)
and
휑(푎⋅푏) = 휑(푎) ⋅′ 휑(푏).
This together with a similar analysis of homomorphisms between groups motivates the
next deﬁnition.
DEFINITION 7.3.2
∙A group homomorphism is a homomorphism 픊→픊′, where 픊and 픊′ are
groups.
∙A ring homomorphism is an homomorphism ℜ→ℜ′, where ℜand ℜ′ are
rings.
Throughout this section the focus will be on ring homomorphisms.

376
Chapter 7 MODELS
EXAMPLE 7.3.3
Let ℜand ℜ′ be rings. The function 휓: 푅→푅′ so that 휓(푟) = 0′ for all 푟∈푅
is a ring homomorphism. This function is called a zero map.
EXAMPLE 7.3.4
Deﬁne the function 휑: ℤ→ℤ× ℤby 휑(푛) = (푛, 0). Assume that + and ⋅are
the standard operations on ℤwhile +′ and ⋅′ are the coordinatewise operations
on ℤ× ℤ. Let 푚, 푛∈ℤ. Then,
∙휑(0) = (0, 0)
∙휑(푚+ 푛) = (푚+ 푛, 0) = (푚, 0) +′ (푛, 0) = 휑(푚) +′ 휑(푛)
∙휑(푚푛) = (푚푛, 0) = (푚, 0) ⋅′ (푛, 0) = 휑(푚) ⋅′ 휑(푛).
Therefore, 휑is a ring homomorphism (ℤ, 0, +, ⋅) →(ℤ× ℤ, (0, 0), +′, ⋅′).
The homomorphism of Example 7.3.4 provides a good opportunity to clarify what
a ring homomorphism does. Take the integers 1 and 4. Adding them together in ℤ
yields 5. The images of these integers under 휑are 휑(1) = (1, 0), 휑(4) = (4, 0), and
휑(5) = (5, 0). Observe that (1, 0) + (4, 0) = (5, 0) in ℤ× ℤ, illustrating that the ring
homomorphism 휑preserves the addition structure of ℤin ℤ× ℤ. That is, with respect
to addition, both sets behave the same way. Multiplication also has the property. For
example, when 3 is multiplied with 6 the result is 18 in ℤ, and their images yield
휑(3)휑(6) = 휑(18) in ℤ× ℤ. This is illustrated in Figure 7.2.
Although ring homomorphisms will always preserve the additive identity by deﬁni-
tion, this is not a condition that needs to be checked.
ℤ
ℤ × ℤ
(1, 0)
𝜑
ℤ
𝜑
ℤ × ℤ
(4, 0)
(5, 0)
(3, 0)
(6, 0)
(18, 0)
1
18
6
3
5
4
Figure 7.2
The ring homomorphism 휑: ℤ→ℤ× ℤdeﬁned by 휑(푛) = (푛, 0).

Section 7.3 HOMOMORPHISMS
377
THEOREM 7.3.5
Let ℜand ℜ′ be rings. Then, 휑: 푅→푅′ is a ring homomorphism if and only
if for all 푥, 푦∈푅,
∙휑(푥+ 푦) = 휑(푥) +′ 휑(푦), and
∙휑(푥⋅푦) = 휑(푥) ⋅′ 휑(푦).
PROOF
Since suﬃciency is clear, assume that 휑preserves addition and multiplication.
Then,
휑(0) +′ 휑(0) = 휑(0 + 0) = 휑(0).
Adding −휑(0) to both sides yields 휑(0) = 0′.
In addition to preserving operations and the additive identity, ring homomorphisms
also preserve inverses. Remember, if 휑: 푅→푅′ is a function and 푎∈푅, then −푎is
the additive inverse of 푎in 푅and −휑(푎) is the additive inverse of 휑(푎) inside of 푅′.
THEOREM 7.3.6
Let ℜand ℜ′ be rings. If 휑: ℜ→ℜ′ is a ring homomorphism, for all 푎∈푅,
휑(−푎) = −휑(푎).
PROOF
If 휑: ℜ→ℜ′ is a ring homomorphism, then for all 푥∈푅,
휑(푥) +′ 휑(−푥) = 휑(푥+ −푥) = 휑(0) = 0′.
EXAMPLE 7.3.7
Check Theorem 7.3.6 using the function 휑as deﬁned in the Example 7.3.4. Since
5 and −5 are additive inverses in ℤ, we have that
(5, 0) + (−5, 0) = (0, 0),
so 휑(5) and 휑(−5) are additive inverses in ℤ× ℤ.
Ring homomorphisms also preserve subrings and ideals.
THEOREM 7.3.8
Let ℜand ℜ′ be rings and 휑: ℜ→ℜ′ be a ring homomorphism. Let ℑbe an
ideal of ℜwith domain 퐼and ℑ′ be an ideal of ℜ′ with domain 퐼′.
∙If 휑is onto, (휑[퐼], 0′, +′ ↾휑[퐼], ⋅′ ↾휑[퐼]) is an ideal of ℜ′.
∙픍= (휑−1[퐼′], 0, + ↾휑−1[퐼′], ⋅↾휑−1[퐼′]) is an ideal of ℜ.

378
Chapter 7 MODELS
PROOF
The ﬁrst part is left to Exercise 6. To prove the second, ﬁrst prove that 픍is a
subring of ℜ.
∙To show closure, let 푥1, 푥2 ∈휑−1[퐼′]. This means that 휑(푥1) and 휑(푥2)
are elements of 퐼′. Hence,
휑(푥1 + 푥2) = 휑(푥1) +′ 휑(푥2) ∈퐼′
and
휑(푥1 ⋅푥2) = 휑(푥1) ⋅′ 휑(푥2) ∈퐼′.
Therefore, 푥1 + 푥2, 푥1 ⋅푥2 ∈휑−1[퐼′].
∙Since 0′ ∈퐼′ and 휑(0) = 0′, it follows that 0 ∈휑−1[퐼′].
∙Let 푥∈휑−1[퐼′]. Then, 휑(푥) ∈퐼′, and we ﬁnd that
휑(−푥) = −휑(푥) ∈퐼′.
Thus, −푥∈휑−1[퐼′].
To see that 픍is an ideal of ℜ, take 푟∈푅and 푎∈휑−1[퐼′]. This means that
휑(푎) ∈퐼′. Then,
휑(푟푎) = 휑(푟)휑(푎) ∈퐼′
since ℑ′ is an ideal. Thus, 푟푎∈휑−1[퐼′]. Similarly, 푎푟∈휑−1[퐼′].
EXAMPLE 7.3.9
The function 휑: ℤ→ℤ∕6ℤdeﬁned by 휑(푛) = 푛+ 6ℤis an onto homomor-
phism. (See Exercise 7.) The image of 2ℤunder this map is
휑[2ℤ] = {푛+ 6ℤ: 푛∈2ℤ} = {0 + 6ℤ, 2 + 6ℤ, 4 + 6ℤ}.
The pre-image of 퐼= {0 + 6ℤ, 3 + 6ℤ} is
휑−1[퐼] = {푛∈ℤ: ∃푘∈ℤ(푛= 6푘∨푛= 3 + 6푘)} = 3ℤ.
Notice that both 휑[2ℤ] and 휑−1[퐼] are domains of ideals of their respective rings.
Take a ring ℜand let 푅be its domain such that |푅| ≥2. Let 0 be the additive
identity of ℜ. We specify two functions. First, deﬁne 휋: 푅× 푅× 푅→푅× 푅by
휋(푥, 푦, 푧) = (푥, 푦). This is a function similar to that found in Example 4.5.16. Notice
that ran(휋) = 푅× 푅, which means that 휋is onto, and
퐴= {(푥, 푦, 푧) : 휋(푥, 푦, 푧) = (0, 0)} = {(0, 0, 푧) : 푧∈푅}.
Because |퐴| > 1, we conclude that 휋is not one-to-one. Second, deﬁne the function
휓: 푅× 푅→푅× 푅× 푅so that 휓(푥, 푦) = (푥, 푦, 0). Compare 휓with Example 4.5.7.

Section 7.3 HOMOMORPHISMS
379
This function is not onto because ran(휓) = 푅× 푅× {0}, but it does appear to be
one-to-one because
퐵= {(푥, 푦) : 휓(푥, 푦) = (0, 0, 0)} = {(0, 0)}.
The sets 퐴and 퐵that contain the elements of the domain that are mapped to the identity
of the range appear important to determining whether a function is one-to-one. For this
reason, such sets are named.
DEFINITION 7.3.10
Let ℜand ℜ′ be rings. Let 휑: 푅→푅′ be a function. The kernel of 휑is
ker(휑) = {푥∈푅: 휑(푥) = 0′}.
Notice that Deﬁnition 7.3.10 implies that ker(휑) = 휑−1[{0′}]. Therefore, ker(휑) is
an ideal of ℜ(Theorem 7.3.8). Similarly, because ran(휑) = 휑[푅], we conclude that
ran(휑) is an ideal of ℜ′.
EXAMPLE 7.3.11
Let 휑: ℤ→ℤ5 deﬁned by 휑(푛) = [푛]5 .
∙To ﬁnd the kernel, assume 휑(푛) = [0]5. By the assumption, [푛]5 = [0]5.
So, 푛∈[0]5, which means 5 ∣푛. Hence,
ker(휑) ⊆5ℤ.
Since the steps are reversible, ker(휑) = 5ℤ.
∙Because ran(휑) = {[푛]5 ∶푛∈ℤ} encompasses all congruence classes
modulo 5, 휑is onto and ran(휑) = ℤ5.
We now prove that the kernel does provide a test for whether a ring homomorphism
is an injection. Since any ring homomorphism 휑: ℜ→ℜ′ maps the additive identity
of ℜto the additive identity of ℜ′, it is always the case that 0 ∈ker(휑). Therefore, to
show that ker(휑) = {0}, we only need to prove ker(휑) ⊆{0}.
THEOREM 7.3.12
Let ℜand ℜ′ be rings such that 0 is the additive identity of ℜ. Suppose that the
function 휑: ℜ→ℜ′ is a ring homomorphism. Then, 휑is one-to-one if and
only if ker(휑) = {0}.
PROOF
∙Suppose that 휑is one-to-one. Take 푥∈ker(휑). This means that 휑(푥) = 0′,
where 0′ is the additive identity of ℜ′. Since 휑is an injection, 푥= 0. This
implies that ker(휑) = {0}.

380
Chapter 7 MODELS
∙Now let ker(휑) = {0} and assume 휑(푥1) = 휑(푥2), where 푥1, 푥2 ∈dom(ℜ). We
then have 휑(푥1) −휑(푥2) = 0. Since 휑is a homomorphism, we have
휑(푥1 −푥2) = 휑(푥1) −휑(푥2)
by Theorem 7.3.6. Hence, 푥1 −푥2 ∈ker(휑), which means 푥1 −푥2 = 0 by
hypothesis. Therefore, 푥1 = 푥2.
A similar proof can be used to demonstrate that same result for group homomorphisms.
THEOREM 7.3.13
Let 픊and 픊′ be groups such that 휖is the additive identity of 픊. Suppose that
the function 휑: 픊→픊′ is a group homomorphism. Then, 휑is one-to-one if
and only if ker(휑) = {휖}.
Isomorphisms
Deﬁne 휓: ℤ5 ×ℤ6 →ℤ6 ×ℤ5 by 휓([푎]5, [푏]6) = ([푏]6, [푎]5). Let + be coordinatewise
addition on ℤ5 × ℤ6 and +′ be coordinatewise addition on ℤ6 × ℤ5. We prove that this
function preserves addition and is a bijection.
∙Let 푎, 푏, 푐, 푑∈ℤ. Then,
휓(([푎]5 , [푏]6) + ([푐]5 , [푑]6)) = 휓([푎]5 + [푐]5 , [푏]6 + [푑]6)
= 휓([푎+ 푐]5 , [푏+ 푑]6)
= ([푏+ 푑]6 , [푎+ 푐]5)
= ([푏]6 + [푑]6 , [푎]5 + [푐]5)
= ([푏]6 , [푎]5) +′ ([푑]6 , [푐]5)
= 휓([푎]5 , [푏]6) +′ 휓([푐]5 , [푑]6).
∙Let ([푎]5 , [푏]6) ∈ker(휓). In other words, ([푏]6 , [푎]5) = ([0]6 , [0]5). Hence,
5 ∣푎and 6 ∣푏, which implies that [푎]5 = [0]5 and [푏]6 = [0]6 (Example 4.2.6).
Thus, 휓is an injection by Theorem 7.3.13.
∙To see that 휓is onto, take ([푐]6 , [푑]5) ∈ℤ6 × ℤ5. Then,
휓([푑]5 , [푐]6) = ([푐]6 , [푑]5).
The function 휓generalizes to the next deﬁnition. Note the similarity between this
deﬁnition and that of an order isomorphism (Deﬁnition 4.5.24).
DEFINITION 7.3.14
Let 프and 픅be 햲-structures. An isomorphism 프→픅is a homomorphism
프→픅that is a bijection. An isomorphism 프→프is called an automorphism.
If there is an isomorphism 휑: 프→픅, the 햲-structures are isomorphic and we
write 프≅픅.

Section 7.3 HOMOMORPHISMS
381
If 프= (ℤ5 ×ℤ6, ([0]5 , [0]6), +) and 픅= (ℤ6 ×ℤ5, ([0]6 , [0]5), +′), then 휓shows that
프≅픅.
Like order isomorphisms (Example 4.5.28), there are three basic isomorphism re-
sults. The proof of this is left to Exercise 8.
THEOREM 7.3.15
Let 프, 픅, and ℭbe 햲-structures.
∙프≅프.
∙If 프≅픅, then 픅≅프.
∙If 프≅픅and 픅≅ℭ, then 프≅ℭ.
EXAMPLE 7.3.16
Let 햲= {0, <, ⋅}. Let 프= (2휔, 픞), where
픞(0)(0) = 0 and 픞(0)(1) = 0,
and for all 푓, 푔∈2휔,
(푓, 푔) ∈픞(<) if and only if 푓(0) < 푔(0) ∨[푓(0) = 푔(0) ∧푓(1) < 푔(1)],
that is, < is interpreted as a lexicographical order (compare Exercise 4.3.16), and
픞(⋅) is function multiplication.
This means that 픞(⋅)(푓, 푔)(푥) = 푓(푥)푔(푥). Also, let 픅= (휔× 휔× {0}, 픟), where
픟(0) = (0, 0, 0),
and for all 푚, 푛, 푚′, 푛′ ∈휔,
((푚, 푛, 0), (푚′, 푛′, 0)) ∈픟(<) if and only if 푛< 푛′ ∨[푛= 푛′ ∧푚< 푚′],
and
픟(⋅) is coordinate-wise multiplication.
That is,
픟(⋅)((푚, 푛, 0), (푚′, 푛′, 0)) = (푚푚′, 푛푛′, 0).
Show that 프≅픅by showing that 휑: 프→픅deﬁned by
휑(휓) = (휓(1), 휓(0), 0)
is an 햲-isomorphism.
∙휑(픞(0)) = (픞(0)(1), 픞(0)(0), 0) = (0, 0, 0) = 픟(0).

382
Chapter 7 MODELS
∙Let 푓, 푔∈2휔. Then,
(푓, 푔) ∈픞(<) ⇔푓(0) < 푔(0) ∨[푓(0) = 푔(0) ∧푓(1) < 푔(1)]
⇔((푓(1), 푓(0), 0), (푔(1), 푔(0), 0)) ∈픟(<)
⇔(휑(푓), 휑(푔)) ∈픟(<).
∙Let 푓, 푔∈2휔. Then,
휑(픞(⋅)(푓, 푔)) = 휑({(0, 푓(0)푔(0)), (1, 푓(1)푔(1))})
= (푓(1)푔(1), 푓(0)푔(0), 0)
= 픟(⋅)((푓(1), 푓(0), 0), (푔(1), 푔(0), 0))
= 픟(⋅)(휑(푓), 휑(푔)).
Therefore, 휑is an homomorphism. That 휑is a bijection is Exercise 9. Hence,
프≅픅, and by Theorem 7.3.15, we have that 픅≅프.
Because there is a bijection between ℤ5 × ℤ6 and ℤ6 × ℤ5, they have the same
cardinality. Since the bijection that is typically chosen is also a homomorphism, the
algebraic structure of the two rings are the same. Putting this together, we conclude
that the two rings “look” the same as rings. The only diﬀerence is in the labeling of
their elements. To formalize this notion, we make the next deﬁnition.
DEFINITION 7.3.17
∙A group homomorphism that is a bijection is a group isomorphism.
∙A ring homomorphism that is a bijection is a ring isomorphism.
We say that two rings 푅and 푅′ are isomorphic if there is an isomorphism 휓: 푅→푅′.
If two rings are isomorphic, write 푅≅푅′. For example, we saw that
ℤ5 × ℤ6 ≅ℤ6 × ℤ5.
The next example illustrates what we mean by “looking” the same.
EXAMPLE 7.3.18
Suppose that 휑: ℜ→ℜ′ is a ring isomorphism.
∙If ℜis an integral domain, ℜ′ is an integral domain.
∙If ℜis a division ring, ℜ′ is a division ring.
∙If ℜis a ﬁeld, ℜ′ is a ﬁeld.
The proofs of the ﬁrst two are left to Exercise 13. For example, suppose that ℜ
is a ﬁeld. We show that ℜ′ is also a ﬁeld.
∙Let 1 be unity from ℜ. Then, 휑(1) is unity from ℜ′ (Exercise 14).

Section 7.3 HOMOMORPHISMS
383
∙Let 푦0, 푦1 ∈푅′. Since 휑is onto, there exists 푥0, 푥1 ∈푅so that 휑(푥0) = 푦0
and 휑(푥1) = 푦1. Hence,
푦0 ⋅′ 푦1 = 휑(푥0) ⋅′ 휑(푥1)
= 휑(푥0 ⋅푥1)
= 휑(푥1 ⋅푥0)
= 휑(푥1) ⋅′ 휑(푥0)
= 푦1 ⋅′ 푦0.
∙Let 푦0 ∈푅′ ⧵{0′}. There exists 푥0 ∈푅such that 휑(푥0) = 푦0. Since 휑is
one-to-one, 푥0 ≠0. Thus, because ℜis a ﬁeld, there exists 푥1 ∈푅⧵{0}
such that 푥0 ⋅푥1 = 1, so
푦0 ⋅′ 휑(푥1) = 휑(푥0) ⋅′ 휑(푥1) = 휑(푥0 ⋅푥1) = 휑(1).
The result of the next example is known as the fundamental homomorphism theo-
rem.
EXAMPLE 7.3.19
Let ℜand ℜ′ be rings. Let 휑: ℜ→ℜ′ be a surjective ring homomorphism.
Deﬁne 휓: 푅∕ker(휑) →푅′ by
휓(푎+ ker(휑)) = 휑(푎).
To prove that 휓is well-deﬁned, let 푎, 푏∈푅such that 푎+ ker(휑) = 푏+ ker(휑).
This implies that 푎−푏∈ker(휑), so
0 = 휑(푎−푏) = 휑(푎) −′ 휑(푏).
That is, 휑(푎) = 휑(푏). Now to show that 휓is a ring homomorphism.
∙Take 푎, 푏∈푅. Then,
휓(푎+ 푏+ ker(휑)) = 휑(푎+ 푏)
= 휑(푎) +′ 휑(푏)
= 휓(푎+ ker(휑)) +′ 휓(푏+ ker(휑)),
and
휓(푎⋅푏+ ker(휑)) = 휑(푎⋅푏)
= 휑(푎) ⋅′ 휑(푏)
= 휓(푎+ ker(휑)) ⋅′ 휓(푏+ ker(휑)).
∙To prove that 휓is onto, take 푏∈푅′. Since 휑is onto, there exists 푎∈푅
such that 휑(푎) = 푏. Therefore,
휓(푎+ ker(휑)) = 휑(푎) = 푏.

384
Chapter 7 MODELS
∙To prove that 휓is one-to-one, let 푎, 푏∈푅and assume that 휓(푎) = 휓(푏).
Since 휓is a ring homomorphism,
휓(푎−푏) = 휓(푎) −′ 휓(푏) = 0.
Hence, 푎−푏∈ker(휑), which implies that 푎+ ker(휑) = 푏+ ker(휑).
Elementary Equivalence
Let 햠be a ﬁrst-order language with theory symbols 햲. Suppose that 프= (퐴, 픞) and
픅= (퐵, 픟) are 햲-structures and 퐼is an interpretation of 프. Let 휑: 프→픅be an
isomorphism. Deﬁne
퐼휑: 햳햤햱햬햲(햠) →퐵
by 퐼휑(푡) = (휑◦퐼)(푡) for all 푡∈햳햤햱햬햲(햠). We conﬁrm that 퐼휑is an interpretation of
픅.
∙If 푥is a variable symbol, 퐼휑(푥) = (휑◦퐼)(푥) ∈퐵.
∙Let 푐be a constant symbol. Then, 퐼휑(푐) = (휑◦퐼)(푐) = 휑(픞(푐)) = 픟(푐).
∙Let 푓be an 푛-ary function symbol and 푡0, 푡1, … , 푡푛−1 ∈햳햤햱햬햲(햠). Then,
퐼휑(푓(푡0, 푡1, … , 푡푛−1)) = (휑◦퐼)(푓(푡0, 푡1, … , 푡푛−1))
= 휑(픞(푓)(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1)))
= 픟(푓)(휑(퐼(푡0)), 휑(퐼(푡1)), … , 휑(퐼(푡푛−1)))
= 픟(푓)(퐼휑(푡0), 퐼휑(푡1), … , 퐼휑(푡푛−1)).
An example will clarify the use of the interpretation 퐼휑.
EXAMPLE 7.3.20
Let 픊0 = (ℤ, 0, +) and 픊1 = (2ℤ, 0, + ↾2ℤ). Assume that 퐼is an interpretation
of 픊0. Deﬁne the group isomorphism 푓: ℤ→2ℤby 푓(푛) = 2푛. We consider
the 햦햱-formula 푦◦푥= 푒.
프⊨∃푥(푦◦푥= 푒) [퐼] ⇔프⊨(푦◦푥= 푒) [퐼푎
푥] for some 푎∈ℤ
⇔퐼푎
푥(푦◦푥) = 퐼푎
푥(푒) for some 푎∈ℤ
⇔푓(퐼푎
푥(푦◦푥)) = 푓(퐼푎
푥(푒)) for some 푎∈ℤ
⇔푓(퐼푎
푥(푦)) + 푓(퐼푎
푥(푥)) = 푓(퐼푎
푥(푒)) for some 푎∈ℤ
⇔푓(퐼푎
푥(푦)) + 푓(푎) = 푓(퐼푎
푥(푒)) for some 푎∈ℤ
⇔푓(퐼푏
푥(푦)) + 푏= 푓(퐼푏
푥(푒)) for some 푏∈2ℤ
⇔푓(퐼푏
푥(푦)) + 푓(퐼푏
푥(푥)) = 푓(퐼푏
푥(푒)) for some 푏∈2ℤ
⇔푓(퐼푏
푥(푦◦푥)) = 푓(퐼푏
푥(푒)) for some 푏∈2ℤ
⇔픅⊨푦◦푥= 푒[(퐼푓)푏
푥] for some 푏∈2ℤ
⇔픅⊨∃푥(푦◦푥= 푒) [퐼푓].

Section 7.3 HOMOMORPHISMS
385
Using 푓, we see that the interpretation of 프gives rise to an interpretation of 픅.
For example, notice that if 퐼(푦) = 3, then 푓(퐼(푦)) = 6. Hence, in 프,
∃푥(푦◦푥= 푒) is interpreted as 3 + 푥= 0 for some 푥∈퐴,
and the witness of ∃푥(푦◦푥= 푒) is −3. In 픅,
∃푥(푦◦푥= 푒) is interpreted as 6 + 푥= 0 for some 푥∈퐵
and the witness of ∃푥(푦◦푥= 푒) is −6.
LEMMA 7.3.21
Let 프= (퐴, 픞) and 픅= (퐵, 픟) be 햲-structures. Assume that 휑: 프→픅is an
isomorphism. Let 퐼be an 햲-interpretation of 프. Then, (퐼푎
푥)휑= (퐼휑)휑(푎)
푥
for all
푎∈퐴.
PROOF
We proceed by induction on terms, relying on Deﬁnitions 7.1.4 and 7.3.1.
∙Let 푥and 푦be variable symbols. Then,
(퐼푎
푥)휑(푥) = 휑(퐼푎
푥(푥)) = 휑(푎) = (퐼휑)휑(푎)
푥
(푥),
and if 푦≠푥,
(퐼푎
푥)휑(푦) = 휑(퐼푎
푥(푦)) = 휑(퐼(푦)) = (퐼휑)휑(푎)
푥
(푦).
∙If 푐is a constant symbol, then
(퐼푎
푥)휑(푐) = 휑(퐼푎
푥(푐)) = 휑(퐼(푐)) = (퐼휑)휑(푎)
푥
(푐).
∙Let 푓be an 푛-ary function symbol and 푡0, 푡1, … , 푡푛−1 be 햲-terms. Take
푎∈퐴. Then,
(퐼푎
푥)휑(푓(푡0, 푡1, … , 푡푛−1))
= 휑(퐼푎
푥(푓(푡0, 푡1, … , 푡푛−1)))
= 휑(픞(푓)(퐼푎
푥(푡0), 퐼푎
푥(푡1), … , 퐼푎
푥(푡푛−1)))
= 픟(푓)(휑(퐼푎
푥(푡0)), 휑(퐼푎
푥(푡1)), … , 휑(퐼푎
푥(푡푛−1)))
= 픟(푓)((퐼푎
푥)휑(푡0), (퐼푎
푥)휑(푡1), … , (퐼푎
푥)휑(푡푛−1))
= 픟(푓)(((퐼휑)휑(푎)
푥
)(푡0), ((퐼휑)휑(푎)
푥
)(푡1), … , ((퐼휑)휑(푎)
푥
)(푡푛−1))
= (퐼휑)휑(푎)
푥
(푓(푡0, 푡1, … , 푡푛−1)).
The ﬁfth equality follows by induction.
If 휑: 프→픅is an isomorphism, the structures look the same. Thus, formulas
should be interpreted in 픅essentially in the same way that they are interpreted in 프.
In other words, given an interpretation 퐼of 프, there should be an interpretation of 픅
that is like 퐼. This interpretation is 퐼휑.

386
Chapter 7 MODELS
LEMMA 7.3.22
Let 프and 픅be 햲-structures with isomorphism 휑: 프→픅. Assume that 퐼is
an 햲-interpretation of 프. Then, for every 햲-formula 푝, 프⊨푝[퐼] if and only if
픅⊨푝[퐼휑].
PROOF
We proceed by induction on formulas, relying on Theorem 7.1.7.
∙Suppose that 푡0 and 푡1 are 햲-terms. Since 휑is one-to-one,
프⊨푡0 = 푡1 [퐼] ⇔퐼(푡0) = 퐼(푡1)
⇔휑(퐼(푡0)) = 휑(퐼(푡1))
⇔퐼휑(푡0) = 퐼휑(푡1)
⇔픅⊨푡0 = 푡1 [퐼휑].
∙Let 푅be an 푛-ary relation symbol and 푡0, 푡1, … , 푡푛−1 be 햲-terms. Since 휑
is an isomorphism,
프⊨푅(푡0, 푡1, … , 푡푛−1) [퐼]
⇔(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1)) ∈퐼(푅)
⇔(휑(퐼(푡0)), 휑(퐼(푡1)), … , 휑(퐼(푡푛−1))) ∈휑(퐼(푅))
⇔(퐼휑(푡0), 퐼휑(푡1), … , 퐼휑(푡푛−1)) ∈퐼휑(푅)
⇔픅⊨푅(푡0, 푡1, … , 푡푛−1) [퐼휑].
∙Assume that 푞is an 햲-formula. Then,
프⊨¬푞[퐼] ⇔프̸⊨푞[퐼] ⇔픅̸⊨푞[퐼휑] ⇔픅⊨¬푞[퐼휑],
where the middle equivalence holds by induction.
∙Let 푞and 푟be 햲-formulas. Suppose that 프⊨푞→푟[퐼]. This means that
프⊨푞[퐼] implies 프⊨푟[퐼]. Assume 픅⊨푞[퐼휑]. By induction, we
have that 프⊨푞[퐼], whence 프⊨푟[퐼]. Again, by induction, 픅⊨푟[퐼휑].
Therefore, 픅⊨푞→푟[퐼휑]. The converse is proved similarly.
∙Let 푞be an 햲-formula. Then, by Lemma 7.3.21 and since 휑is an isomor-
phism,
프⊨∃푥푞[퐼] ⇔프⊨푞[퐼푎
푥] for some 푎∈퐴
⇔픅⊨푞[(퐼푎
푥)휑] for some 푎∈퐴
⇔픅⊨푞[(퐼휑)휑(푎)
푥
] for some 푎∈퐴
⇔픅⊨푞[(퐼휑)푏
푥] for some 푏∈퐵
⇔픅⊨∃푥푞[퐼휑].

Section 7.3 HOMOMORPHISMS
387
Let 픊1 = (2ℤ, 0, +) and 픊2 = (3ℤ, 0, +). These isomorphic groups are inﬁnite
and cyclic, each with exactly two generators. The group 픊1 is generated by 2 and
−2, and 픊2 is generated by 3 and −3. When Lemma 7.3.22 is restricted to sentences,
we conclude that isomorphic structures model the same sentences. Hence, the 햦햱-
sentences satisﬁed by 픊1 are exactly those 햦햱-sentences satisﬁed by 픊2. For example,
픊1 ⊨∀푥∀푦(푥◦푦= 푦◦푥),
and
픊2 ⊨∀푥∀푦(푥◦푦= 푦◦푥).
Also,
픊1 ⊨∃푥∀푦∃푧(푦= 푥◦푧),
and
픊2 ⊨∃푥∀푦∃푧(푦= 푥◦푧).
Therefore, we make the next deﬁnition and follow it immediately with the theorem that
follows from Lemma 7.3.22 and Theorem 7.1.31.
DEFINITION 7.3.23
The 햲-structures 프and 픅are elementary equivalent (denoted by 프≡픅) if for
all 햲-sentences 푝, 프⊨푝if and only if 픅⊨푝.
THEOREM 7.3.24
For all 햲-structures 프and 픅, if 프≅픅, then 프≡픅.
Theorem 7.3.24 implies that if structures are isomorphic, there is no ﬁrst-order sen-
tence that can be used to distinguish between the two. That is, there is no sentence 푝
such that 프⊨푝but 픅̸⊨푝when 프≅픅. Conversely, if there is a sentence that is
satisﬁed by one structure but not the other, the structures cannot be isomorphic.
EXAMPLE 7.3.25
Let 프and 픅be 햲햳-structures such that 프= (휔+, ∈) and 픅= (휔, ∈). Observe
that
프⊨∃푥∀푦(푦∈푥∨푦= 푥)
but
픅̸⊨∃푥∀푦(푦∈푥∨푦= 푥).
Therefore, by Theorem 7.3.24, we have that 프is not isomorphic to 픅.
EXAMPLE 7.3.26
Let 프= (퐴, 픞) and 픅= (퐵, 픟) be {푅}-structures, where 푅is a binary relation
symbol. Let 퐴= {푎0, 푎1} with 푎0 ≠푎1. Assume that the structures are not
isomorphic yet 프≡픅. Deﬁne
푝:= ∃푥(푥= 푥),

388
Chapter 7 MODELS
푞:= ∀푥∃푦(푥≠푦),
and
푟:= ∀푥∀푦∀푧(푥≠푦∧푥≠푧→푦= 푧).
Then, 프⊨푝because 퐴is nonempty, 프⊨푞because 퐴has at least two elements,
and 프⊨푟because 퐴has at most two elements. Hence,
프⊨푝∧푞∧푟.
Since 프≡픅, we have that 픅⊨푝∧푞∧푟, so |퐵| = 2. Write 퐵= {푏0, 푏1} with
푏0 ≠푏1. This implies that there are only two bijections 퐴→퐵. Call them 휑0
and 휑1, and write
휑0 = {(푎0, 푏0), (푎1, 푏1)}
and
휑1 = {(푎0, 푏1), (푎1, 푏0)}.
By assumption, neither of these functions are {푅}-homomorphisms, so they fail
to preserve 푅. Suppose that (푎0, 푎1) ∈픞(푅) is the particular element that causes
the second condition of Deﬁnition 7.3.1 to fail. Therefore,
프⊨∃푥∃푦[푥≠푦∧푅(푥, 푦)].
Since 휑0 does not preserve 푅, (푏0, 푏1) ∉픟(푅), and since 휑1 does not preserve
푅, (푏1, 푏0) ∉픟(푅). Hence,
픅̸⊨∃푥∃푦[푥≠푦∧푅(푥, 푦)],
which is impossible because 프≡픅, so 휑0 or 휑1 must be an {푅}-isomorphism.
The argument generalizes for all structures with a domain of cardinality 2 (Exer-
cise 17) and then to all structures with a ﬁnite domain (Exercise 18). Therefore,
the converse of Theorem 7.3.24 holds, provided that the domains of the structures
are ﬁnite.
Elementary Substructures
Let 프= (퐴, 픞) and 픅= (퐵, 픟) be 햲-structures such that 프⊆픅. Let 퐼be an interpre-
tation of 프. By Deﬁnition 7.1.4, we have the following:
∙For all variable symbols 푥, 퐼(푥) ∈퐴⊆퐵.
∙For all constant symbols 푐, 퐼(푐) ∈퐴⊆퐵.
∙For all 푛-ary function symbols 푓and 햲-terms 푡0, 푡1, … , 푡푛−1, because 퐼(푡푘) ∈퐴
for 푘= 0, 1, … , 푛−1 and 픞(푓) = 픟(푓) ↾퐴푛,
퐼(푓(푡0, 푡1, … , 푡푛−1)) = 픞(푓)(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1))
= 픟(푓)(퐼(푡0), 퐼(푡1), … , 퐼(푡푛−1)).
This implies that 퐼is also an interpretation of 픅. Moreover, when 푝is a quantiﬁer-free
햲-formula, the interpretation of 푝in 픅requires no element of 퐵⧵퐴. This implies the
next theorem. Its proof is left to Exercise 21.

Section 7.3 HOMOMORPHISMS
389
THEOREM 7.3.27
Let 프and 픅be 햲-structures such that 프⊆픅. For all 햲-interpretations 퐼of 프
and all quantiﬁer-free 햲-formulas 푝, 프⊨푝[퐼] if and only if 픅⊨푝[퐼].
Next, consider 픅⊨∃푥푝[퐼]. This means that 픅⊨푝[퐼푏
푥] for some 푏∈퐵. If 푏is
also in 퐴, then 프⊨푝[퐼푏
푥], but this conclusion is not guaranteed if 푏∈퐵⧵퐴. For
example, let 프= (ℤ, <) and 픅= (ℚ, <) be {푅}-structures, where 푅is a binary relation
symbol. Since ℤ⊆ℚ, we have that 프is a substructure of 픅. However, because of
diﬀerences between ℚand ℤ,
픅⊨∀푥1∀푥2∃푦(푥1 < 푦< 푥2)
but
프̸⊨∀푥1∀푥2∃푦(푥1 < 푦< 푥2).
Hence, in order for 프⊨푝[퐼] if and only if 픅⊨푝[퐼] for even quantiﬁed formulas 푝,
a stronger condition is required.
DEFINITION 7.3.28
프is an elementary substructure of 픅(written as 프⪯픅) if 프⊆픅and for all
interpretations 퐼of 프and 햲-formulas 푝,
프⊨푝[퐼] if and only if 픅⊨푝[퐼].
If 프⪯픅, then 픅is an elementary extension of 프.
Suppose that 프and 픅are 햲-structures such that 프is an elementary substructure of
픅. Let 푝be an 햲-sentence. Since 푝is also an 햲-formula, 프⊨푝if and only if 픅⊨푝
by Deﬁnition 7.3.28. Therefore, 프and 픅are elementary equivalent, proving the next
result.
THEOREM 7.3.29
Let 프and 픅be 햲-structures. If 프⪯픅, then 프≡픅.
However, the converse of Theorem 7.3.29 does not hold. It is possible for 프⊆픅
and 프≡픅yet 프not be an elementary substructure of 픅. If this is to be the case,
there must be a formula 푝with at least one free variable that is satisﬁed by one of the
structures but not the other.
EXAMPLE 7.3.30
Let 프= ([0, 1] , 픞) and 픅= ([0, 2] , 픟) be the {푅}-structures of Example 7.2.2,
where 픞(푅) is standard < on [0, 1] and 픟(푅) is standard < on [0, 2]. Recall that
프is a substructure of 픅. Since 푓deﬁned by 푓(푥) = 2푥is an {푅}-isomorphism
[0, 1] →[0, 2], we conclude that 프≡픅(Theorem 7.3.24). However, deﬁne the
formula
푝(푥) := ∃푦푅(푥, 푦)

390
Chapter 7 MODELS
and let 퐼be an interpretation such that 퐼(푥) = 1. Then,
프̸⊨푝(푥) [퐼]
and
픅⊨푝(푥) [퐼].
Therefore, 프is not an elementary substructure of 픅.
Because of Theorem 7.3.27, proving that one structure is an elementary substructure
of another reduces to a check of one particular condition. This condition is found in
the next theorem, which is due to Tarski and Vaught (1957).
THEOREM 7.3.31 [Tarski–Vaught]
Let 프and 픅be 햲-structures such that 프⊆픅. Let 퐴be the domain of 프. The
following are equivalent.
∙프is an elementary substructure of 픅.
∙For every 햲-formula 푝and 햲-interpretation 퐼of 프,
if 픅⊨∃푥푝[퐼] then 픅⊨푝[퐼푎
푥] for some 푎∈퐴.
(7.19)
PROOF
Suppose that 프⪯픅. Let 푝be an 햲-formula and 퐼an 햲-interpretation of 프. Let
픅⊨∃푥푝[퐼]. By hypothesis, we have that 프⊨∃푥푝[퐼]. Thus, 프⊨푝[퐼푎
푥] for
some 푎∈퐴, so again by hypothesis, 픅⊨푝[퐼푎
푥] for some 푎∈퐴.
Conversely, let 푝be an 햲-formula and 퐼an 햲-interpretation of 프. We proceed
by induction on formulas to show that 프⪯픅.
∙If 푝is 푡0 = 푡1 or 푅(푡0, 푡1, … , 푡푛−1) for 햲-terms 푡0, 푡1, … , 푡푛−1, then 푝has no
quantiﬁers, and the result follows by Theorem 7.3.27.
∙Let 푝be ¬푞. Then,
프⊨푝[퐼] ⇔프⊨¬푞[퐼]
⇔프̸⊨푞[퐼]
⇔픅̸⊨푞[퐼]
⇔픅⊨¬푞[퐼]
⇔픅⊨푝[퐼].
∙Suppose 푝is 푞→푟. Assume that 프⊨푞→푟[퐼] and let 픅⊨푞[퐼]. Then,
프⊨푞[퐼] by induction, so 프⊨푟[퐼]. Again, by induction, 픅⊨푟[퐼].
Therefore, 픅⊨푟→푞[퐼]. The converse is proved similarly.
∙Now let 푝be ∃푥푞. First, because 프⊆픅,
프⊨∃푥푞[퐼] ⇒프⊨푞[퐼푎
푥] for some 푎∈퐴
⇒픅⊨푞[퐼푎
푥] for some 푎∈퐵
⇒픅⊨∃푥푞[퐼].

Section 7.3 HOMOMORPHISMS
391
Second, by (7.19),
픅⊨∃푥푞[퐼] ⇒픅⊨푞[퐼푎
푥] for some 푎∈퐴
⇒프⊨푞[퐼푎
푥] for some 푎∈퐴
⇒프⊨∃푥푞[퐼].
EXAMPLE 7.3.32
Prove that 프= (ℚ, ≤) is an elementary substructure of 픅= (ℝ, ≤). To do this,
follow the test given by Theorem 7.3.31. Let 푝be an 햲-formula and 퐼be an
햲-interpretation of 프. Assume that 픅⊨∃푥푝[퐼]. This implies that
픅⊨푝[퐼푏
푥] for some 푏∈ℝ.
Take 푎0, 푎1, 푎∈ℚsuch that 푏, 푎∈(푎0, 푎1) and deﬁne the functions
푓0 : (−∞, 푎0] →(−∞, 푎0],
푓1 : (푎0, 푎) →(푎0, 푏),
푓2 : [푏, 푎1) →[푎, 푎1),
푓3 : [푎1, ∞) →[푎1, ∞),
so that 푓0 is the identity on (−∞, 푎0], 푓3 is the identity on [푎1, ∞), and 푓1 and
푓2 are order isomorphisms (Exercise 22). Let 푓= 푓0 ∪푓1 ∪푓2 ∪푓3. Then,
푓is an order isomorphism ℝ→ℝsuch that 푓(푏) = 푎, 푓(푎0) = 푓(푎0), and
푓(푎1) = 푓(푎1). Hence, 푓is an automorphism (Exercise 23). Therefore, by
Lemmas 7.3.21 and 7.3.22,
픅⊨푝[퐼푏
푥] ⇔픅⊨푝[(퐼푏
푥)푓] ⇔픅⊨푝[(퐼푓)푓(푏)
푥
],
which implies that
픅⊨푝[퐼푏
푥] for some 푏∈ℚ.
Thus, 프⪯픅, which also implies that 프≡픅(Theorem 7.3.29).
Notice that this example implies that there is no ﬁrst-order sentence that can dis-
tinguish between (ℚ, <) and (ℝ, <) even though they are not isomorphic. Also, this
example shows that the converse of Theorem 7.3.24 is false if the domains of the struc-
tures are inﬁnite.
Certainly, for all 햲-structures 프, 픅, and ℭ, we have the following by Exercise 19:
∙프≡프.
∙If 프≡픅, then 픅≡프.
∙If 프≡픅and 픅≡ℭ, then 프≡ℭ.
Similar to this and Theorem 7.2.4, we have the following result for elementary sub-
structures.

392
Chapter 7 MODELS
THEOREM 7.3.33
Let 프, 픅, and ℭbe 햲-structures.
∙프⪯프.
∙If 프⪯픅and 픅⪯ℭ, then 프⪯ℭ.
∙If 프⪯ℭ, 픅⪯ℭ, and 프⊆픅, then 프⪯픅.
PROOF
We prove the second part and leave the others to Exercise 25. Let 프⪯픅and
픅⪯ℭ. This ﬁrst means that 프⊆픅and 픅⊆ℭ. Thus, by Theorem 7.2.4,
프⊆ℭ. Let 퐼be an interpretation of 프. The proof is completed for quantiﬁer-
free formulas using Theorem 7.3.27 (Exercise 24), so let 푝be an 햲-formula with
a quantiﬁer.
∙Suppose 프⊨∃푥푝[퐼]. This implies that 프⊨푝[퐼푎
푥] for some 푎∈퐴.
Then, 픅⊨푝[퐼푎
푥] from which it follows that ℭ⊨푝[퐼푎
푥]. Since 퐴⊆퐶, we
conclude that ℭ⊨∃푥푝[퐼].
∙Conversely, let ℭ⊨∃푥푝[퐼]. By Theorem 7.3.31, there exists 푏∈퐵such
that ℭ⊨푝[퐼푏
푥]. By hypothesis, 픅⊨푝[퐼푏
푥], so 픅⊨∃푥푝[퐼]. Again,
by Theorem 7.3.31, there exists 푎∈퐴such that 픅⊨푝[퐼푎
푥]. From this
follows that 프⊨푝[퐼푎
푥], whence 프⊨∃푥푝[퐼].
Exercises
1. Let 프, 픅, and ℭbe 햲-structures such that 프⊆픅. Let 휑: 픅→ℭbe a homomor-
phism. Prove that 휑[dom(프)] is the domain of a substructure of ℭ.
2. Prove that the following are group homomorphisms. Assume in each instance that
◦is interpreted as the standard addition on the set.
(a) 휑: ℤ× ℤ→ℤwhere 휑(푎, 푏) = 푎
(b) 휑: ℤ12 →ℤ6 where 휑([푎]12) = [푎]6
(c) 휓: ℤ× ℤ→M2, 2(ℝ) where
휓(푎, 푏) =
[
푎
0
0
푏
]
3. Prove that the zero map is a group homomorphism.
4. Let ℨ= (ℤ, +) and ℨ푛= (ℤ푛, +) with 푛∈ℤ+. Prove that 휑: ℤ→ℤ푛deﬁned by
휑(푥) = [푥]푛is a ring homomorphism ℨ→ℨ푛.
5. Let ℭ= (ℂ, 0 + 0푖, +, ⋅). Deﬁne 휓: ℂ→ℂby 휓(푎+ 푏푖) = 푎−푏푖for all 푎, 푏∈ℝ.
Prove the following.
(a) 휓is a ring homomorphism ℭ→ℭ.
(b) 휓is one-to-one and onto.

Section 7.3 HOMOMORPHISMS
393
6. Prove the ﬁrst part of Theorem 7.3.8.
7. Let ℜ= (푅, 0, +, ⋅) be a ring and ℑbe an ideal of ℜwith domain 퐼. Let the
function 휑: 푅→푅∕퐼be deﬁned as 휑(푎) = 푎+ 퐼for all 푎∈푅.
(a) Prove that 휑is a homomorphism.
(b) Show that ker(휑) = 퐼.
(c) Prove that 휑is onto.
8. Prove Theorem 7.3.15.
9. Prove that the function 휑of Example 7.3.16 is a bijection.
10. Let 프and 픅be 햲-structures. Write 프≾픅if there exists a one-to-one homomor-
phism 휑: 프→픅. Prove the following.
(a) 프≾프
(b) If 프≾픅and 픅≾ℭ, then 프≾ℭ.
(c) It is possible for 프≾픅and 픅≾ℭyet 프and 픅are diﬀerent 햲-structures.
11. Let 프and 프′ be {푅}-structures with equal domains that are ﬁnite, where 푅is a
binary relation symbol. Assume that
프⊨X has a least element with respect to R
and
프′ ⊨X has a least element with respect to R
for every 푋⊆dom(프). Prove that 프≅프′.
12. Assume that 햲is ﬁnite and that the domain of the 햲-structure 프is ﬁnite. Find a
햲-sentence 푝such that 픅⊨푝if and only if 픅≅프, for all 햲-structures 픅.
13. Suppose that 휑: ℜ→ℜ′ is a ring isomorphism as in Example 7.3.18. Prove.
(a) If ℜis an integral domain, ℜ′ is an integral domain.
(b) If ℜis a division ring, ℜ′ is a division ring.
14. Let 휑: ℜ→ℜ′ be a ring isomorphism. Prove that 1 is unity from ℜif and only
if 휑(1) is unity from ℜ′.
15. Prove or show false the given elementary equivalences.
(a) (ℝ, 0, +) ≡(ℂ, 0, +).
(b) (ℤ, 0, +) ≡(ℚ, 0, +).
(c) (ℤ, ≤) ≡(ℚ, ≤).
(d) (휔, ≤) ≡(ℤ+, ≤).
(e) (휔, ≤) ≡(ℤ−, ≤).
16. Let 퐴and 퐵be sets and assume that 햲= ∅. Prove that (퐴) ≡(퐵).
17. Generalize the argument of Example 7.3.26 to prove that 프≡픅implies that
프≅픅if the cardinality of the domain of 프equals 2.
18. Generalize the argument of Example 7.3.26 to prove that 프≡픅implies that
프≅픅if the domain of 프is ﬁnite.

394
Chapter 7 MODELS
19. Let 프, 픅, and ℭbe 햲-structures. Prove the following.
(a) 프≡프.
(b) If 프≡픅, then 픅≡프.
(c) If 프≡픅and 픅≡ℭ, then 프≡ℭ.
20. Let 프and 픅be elementary equivalent 햲-structures. Prove that there exists an
햲-structure ℭsuch that 프⪯ℭand 픅⪯ℭ.
21. Prove Theorem 7.3.27.
22. Find the order isomorphisms 푓1 and 푓2 in Example 7.3.32.
23. Prove that the function 푓from Example 7.3.32 is a {≤}-isomorphism.
24. Assume that for all 햲-structures 프, 픅, and ℭ, if 프⪯픅and 픅⪯ℭ, then 프⊨푝if
and only if ℭ⊨푝for all quantiﬁer-free 푝.
25. Prove the ﬁrst and third parts of Theorem 7.3.33.
26. Let ℱ= {프훾: 훾∈휅} be a chain of 햲-structures for some cardinal 휅(Exer-
cise 7.2.3). Assume that 프훼⪯프훽when 훼∈훽∈휅, making ℱan elementary chain.
Prove that 프훼⪯⋃
훾∈휅프훾for all 훼∈휅.
27. Find a set of subject symbols 햲and a chain of 햲-structures {프푛: 푛∈휔} such that
프푖≡프푗for all 푖, 푗∈휔but 프0 ≢⋃
푛∈휔프푛.
7.4
THE THREE PROPERTIES REVISITED
This section is an extension of Section 1.5 to ﬁrst-order logic. First, we deﬁne what it
means to be consistent with the ultimate goal to show that any consistent system has a
model. Next, we show that ﬁrst-order logic is sound in that every sentence that can be
proved is true, provided we have the correct understanding of what it means to prove
and what it means to be true. Lastly, we show that ﬁrst-order logic is complete in that
every true sentence can be proved.
Consistency
Consider the following propositions representing Euclid’s axioms for his geometry (Eu-
clid 1925, I Postulates).
∙Eu1. A line can be drawn through two distinct points.
∙Eu2. A line segment can be drawn between two distinct points.
∙Eu3. A circle can be drawn given any center and radius.
∙Eu4. All right angles are congruent to each another.
∙Eu5. If a line falling on two straight lines make the interior angles on the same
side less than two right angles, the two lines intersect on the side on which the
angles are less than two right angles.

Section 7.4 THE THREE PROPERTIES REVISITED
395
There are three sets of proposition here. First, is the list itself,
ℰ= {Eu1, Eu2, Eu3, Eu4, Eu5}.
Second, is the set of consequences (Deﬁnition 7.1.20) of ℰ,
ℰ1 = {푝: ℰ⊨푝}.
Third, is the set of propositions provable (Deﬁnition 1.2.13) from ℰ,
ℰ2 = {푝: ℰ⊢푝}.
For Euclidean geometry, ℰ1 = ℰ2. This means that both ℰ1 and ℰ2 can be said to
describe all of the propositions that are in the geometry. It is the job of the geometer to
discover what those propositions are.
We want to similarly analyze ﬁrst-order logic. Given the rules of logic and a set
of theory symbols, we want the set of consequences to be equal to the set of provable
sentences. One way to have this happen is for a contradiction to follow from the axioms
(1.2.8). Then, by Theorem 1.5.2, every propositional form will have a proof and, in
turn, will also be a consequence, but we do not want such a system. Therefore, for all of
this to work eﬀectively, it is a requirement that ﬁrst-order logic is without contradiction.
To deal with this concept, we start with a deﬁnition.
DEFINITION 7.4.1
An 헦-theory is a set of 햲-sentences.
The set of all sentences provable in ﬁrst-order logic given a set of theory symbols 햲is
an example of an 햲-theory. The theories that we study should have a familiar property
(compare Deﬁnition 1.5.1).
DEFINITION 7.4.2
An 햲-theory 풯is consistent [denoted by 햢허헇(퐹)] if 풯⊬푞∧¬푞for every
햲-sentence 푞. Otherwise, 풯is inconsistent.
We next generalize Theorem 1.5.2 to ﬁrst-order logic. Its proof is left to Exercise 2.
THEOREM 7.4.3
Let 풯be an 햲-theory. The following are equivalent.
∙풯is consistent.
∙Every ﬁnite subset of 풯is consistent.
∙There is an 햲-sentence that is not provable from 풯.
As a consequence of Theorem 7.4.3, a theory 풯is inconsistent if either it has a ﬁnite
subset that is inconsistent or it is able to prove all sentences. This identiﬁes the major

396
Chapter 7 MODELS
weakness of an inconsistent theory. Not only can a contradiction be proved, but any
sentence can also be proved. Such a system is certainly worthless.
If a theory is consistent, it can be shown to be a subset of a theory that is the greatest
possible consistent theory. We generalize Deﬁnition 1.5.3 to name this theory.
DEFINITION 7.4.4
The 햲-theory 풯is maximally consistent if 풯is consistent and 햢허헇(풯∪{푝})
implies 푝∈풯for all 햲-sentences 푝.
The next lemma gives some basic properties of maximally consistent theories.
LEMMA 7.4.5
Let 풯be a maximally consistent 햲-theory. Let 푝and 푞be 햲-sentences.
∙If 풯⊢푝, then 푝∈풯.
∙If ⊢푝, then 푝∈풯.
∙푝∈풯or ¬푝∈풯, but not both.
∙If 푝→푞, 푝∈풯, then 푞∈풯.
PROOF
∙Let 풯⊢푝. Suppose that 풯∪{푝} ⊢푞∧¬푞for some 햲-sentence 푞. This
means that there exists 햲-sentences 푝0, 푝1, … , 푝푛−1 such that
푝, 푝0, 푝1, … , 푝푛−1, 푞∧¬푞
is a proof of 푞∧¬푞from 풯∪{푝}. Since 풯proves 푝, there are 햲-sentences
푞0, 푞1, … , 푞푚−1 such that
푞0, 푞1, … , 푞푚−1, 푝
is a proof of 푝from 풯. Therefore,
푞0, 푞1, … , 푞푚−1, 푝, 푝0, … , 푝푛−1, 푞∧¬푞
is a proof of 푞∧¬푞from 풯, a contradiction. This implies that 풯∪{푝} is
consistent, so since 풯is maximally consistent, 푝∈풯.
∙If ⊢푝, then 풯⊢푝, so 푝∈풯by the ﬁrst property.
∙Since 풯is consistent, 햢허헇(풯∪{푝}) or 햢허헇(풯∪{¬푝}). Because 풯is
maximally consistent, 푝∈풯or ¬푝∈풯, but not both because 햢허헇(풯).
∙Let 푝→푞and 푝be members of 풯. By MP, we have that 풯⊢푞, so again
by the ﬁrst part, 푞∈풯.
Given a consistent theory, the construction of the maximally consistent theory that
contains it requires the use of a chain.

Section 7.4 THE THREE PROPERTIES REVISITED
397
LEMMA 7.4.6
If (풞, ⊆) is a chain of consistent 햲-theories, ⋃풞is consistent.
PROOF
Let 풞be a chain of consistent sets of 햲-sentences with respect to ⊆. Suppose
⋃풞⊢푞∧¬푞for some sentence 푞. Hence, there exists 푝0, 푝1, … , 푝푛−1 ∈⋃풞
such that
푝0, 푝1, … , 푝푛−1 ⊢푞∧¬푞.
This implies that for each 푖= 0, 1, … , 푛−1, there exists 퐶푖∈풞such that
푝푖∈퐶푖. Since {퐶푖: 푖= 0, 1, … , 푛−1} is a ﬁnite chain, arrange them so that 퐶푛
is the greatest element with respect to ⊆. This gives
{푝0, 푝1, … , 푝푛−1} ⊆퐶푛,
which implies that 퐶푛⊢푞∧¬푞, contradicting the consistency of 퐶푛.
The next result proves the existence of a greatest consistent theory by generalizing
Theorem 1.5.4 to an arbitrary set of sentences.
THEOREM 7.4.7 [Lindenbaum]
Every consistent 햲-theory is a subset of a maximally consistent 햲-theory.
PROOF
Let 풯be a consistent set of 햲-sentences. Deﬁne
풜= {퐸: 풯⊆퐸and 퐸is a consistent set of 햲-formulas}.
Note that 풜≠∅since 풯∈풜. Let 풞be a chain in 풜. Then, ⋃풞∈풜because
∙풯⊆⋃풞.
∙⋃풞is consistent because each element of the chain 풞is consistent by
Lemma 7.4.6.
We conclude by Zorn’s lemma (5.1.13) that there is a greatest element 푀∈풜
with respect to ⊆. By deﬁnition, 풯⊆푀and 햢허헇(푀). Also, let 푝be a formula
such that 햢허헇(푀∪{푝}). Then, 푀∪{푝} ∈풜, but since 푀is maximal, we
conclude that 푀∪{푝} = 푀. Thus, 푝∈푀, showing that 푀is maximally
consistent.
Soundness
We previously deﬁned a logic to be sound if every theorem is a tautology and complete
if every tautology is a theorem (Deﬁnition 1.5.5). We now give the corresponding
deﬁnition for ﬁrst-order logic (Figure 7.3).

398
Chapter 7 MODELS
The sentence
is a theorem.
Sound
Complete
The sentence
is valid.
Figure 7.3
Sound and complete logics.
DEFINITION 7.4.8
∙A logic is sound if every theorem is valid.
∙A logic is complete if every valid sentence is a theorem.
A propositional form 푝is a tautology if 헏(푝) = T for every valuation 헏(Deﬁnition 1.1.14).
This means that any interpretation of 푝will always yield a true proposition. This, in
turn, implies that 푝will hold in every model. That is,
tautologies are valid.
Therefore, it is evident that Deﬁnition 7.4.8 is a generalization of Deﬁnition 1.5.5 to
ﬁrst-order logic.
As in Section 1.5, we begin with soundness.
THEOREM 7.4.9 [Soundness]
Let 풯be a set of 햲-sentences. For any 햲-sentence 푝, if 풯⊢푝, then 풯⊨푝.
PROOF
Using strong induction, we prove that for all 푘∈ℤ+,
if there exists a proof of 푝from 풯
consisting of 푘sentences, then 풯⊨푝.
(7.20)
In the case that 푛= 1, we see that ⊢푝. This implies that 푝is an axiom or 푝∈풯
(Deﬁnition 1.2.13), so we have that 풯⊨푝.
Now suppose that 푛> 1 and assume that (7.20) holds for all 푘≤푛. This
means that there exists sentences 푝0, 푝1, … , 푝푛−1 provable from 풯such that
푝0, 푝1, … , 푝푛−1, 푝
is a proof of 푝. Let 프be any model of 풯. We have three cases to consider
(Theorem 1.4.2).
∙푝∈풯, which implies that 프⊨푝.

Section 7.4 THE THREE PROPERTIES REVISITED
399
∙푝is derived using MP. This implies there exists 햲-sentences 푟and 푝such
that 푟, 푟→푝∈{푝0, 푝1, … , 푝푛−1, 푝}. Since a sentence of a proof is proved
from previous sentences of the proof, by induction, 프⊨푟→푝and 프⊨푟.
Therefore, 프⊨푝.
∙푝is logically equivalent to 푝푖for some 푖= 0, 1, … , 푛−1. This means that
푝↔푝푖is a tautology, so 프⊨푝↔푝푖. By Theorem 7.1.7, we conclude that
프⊨푝if and only if 프⊨푝푖, but by induction, 프⊨푝푖, so 프⊨푝.
If 풯= ∅, we can apply Theorem 7.4.9 to conclude the corollary.
COROLLARY 7.4.10
First-order logic is sound.
As with Corollary 1.5.11 for propositional logic, we can also prove the next result.
COROLLARY 7.4.11
First-order logic is consistent.
Completeness
It is now time to prove the completeness of ﬁrst-order predicate logic. This result is
due to Kurt Gödel (1929) but the proof given here is due to Leon Henkin (1949). As
opposed to the soundness theorem (7.4.9), the proof is rather involved. We begin with
a deﬁnition (compare with EI, Theorem 2.3.14).
DEFINITION 7.4.12
Let 풯be a set of 햲-sentences and 퐶a set of constant symbols of 햲. Deﬁne 퐶to
be a witness set for 풯if for all 햲-formulas 푝= 푝(푥), there exists 푐∈퐶such that
풯⊢∃푥푝→푝푐
푥.
For example, let 풯= {푥+ 1 = 0, 푥+ (1 + 1) = 0, (푥+ 푦) + 1 = 1} be a set of
햭햳-sentences. Extend 햭햳to 햲= 햭햳∪퐶, where 퐶= {−1, −2}. Then, 퐶is a witness
set for 풯if
풯⊢∃푥(푥+ 1 = 0) →(푥+ 1 = 0)−1
푥
and
풯⊢∃푥(푥+ (1 + 1) = 0) →(푥+ (1 + 1) = 0)−2
푥.
Since (푥+ 푦) + 1 = 1 has two free variables, the witness set does not apply to it.
Recall that for a set of theory symbols 햲, the notation 햫(햲) refers to the set of all
햲-formulas (Deﬁnition 2.1.13).

400
Chapter 7 MODELS
LEMMA 7.4.13
Let 풯be a consistent set of 햲-sentences. Let 퐶be a set of constant symbols
not in 햲such that |퐶| = |햫(햲)|. Then, 풯can be extended to a consistent set of
(햲∪퐶)-sentences that has 퐶as a witness set.
PROOF
Let 휅= |햫(햲)| and suppose that 퐶= {푐훼: 훼∈휅} is a set of new constant
symbols. Assume that 푐훼≠푐훽for all 훼∈훽∈휅. Since |퐿(햲∪퐶)| = 휅, we
identify the formulas of 퐿(햲∪퐶) with at most one free variable as
푝훼= 푝훼(푥훼)
with 훼∈휅. Now deﬁne a chain 풞= {풯훾: 훾∈휅} and a set {푑훾: 훾∈휅} by
transﬁnite recursion (Corollary 6.1.24) such that for all 훽∈휅,
∙풯훽is consistent,
∙풯훽is a (햲∪퐶)-theory,
∙|풯훽+1 ⧵풯훽| = 1,
∙푑훽is not among the symbols of the sentences in 풯훽.
Let 풯0 = 풯and suppose that 풯훿and 푑훿has been deﬁned for all 훿∈훼with the
indicated properties.
∙Let 훼= 훽+ 1. Choose 푑훽from 퐶such that 푑훽is not among the symbols
of the formulas in 풯훽∪{푝훽}. This can be done since there are less than 휅
theory symbols in 풯훽∪{푝훽}. Now deﬁne
풯훽+1 = 풯훽∪
{
∃푥훽푝훽→푝훽
푑훽
푥훽
}
.
(7.21)
In order to obtain a contradiction, suppose that 풯훽+1 is inconsistent. Since
풯훽is consistent, it must be the case that
풯훽⊢¬
(
∃푥훽푝훽→푝훽
푑훽
푥훽
)
.
This implies that
풯훽⊢∃푥훽푝훽∧¬푝훽
푑훽
푥훽
.
By Com and Simp,
풯훽⊢¬푝훽
푑훽
푥훽
.
Since 푑훽is not among the symbols of 푝훽or 풯훽, it is arbitrary, so by UG,
풯훽⊢∀푥훽¬푝훽.

Section 7.4 THE THREE PROPERTIES REVISITED
401
That is,
풯훽⊢¬∃푥훽푝훽.
Using Simp and Conj, we conclude that
풯훽⊢∃푥훽푝훽∧¬∃푥훽푝훽,
contradicting the consistency of 풯훽.
∙If 훼is a limit ordinal, deﬁne
풯훼=
⋃
훽∈훼
풯훽,
which is consistent by Lemma 7.4.6.
We claim that the (햲∪퐶)-theory
⋃
훽∈휅
풯훽
is the desired extension of 풯. To see this, ﬁrst note that this union is consistent by
Lemma 7.4.6. Also, let 푝(푥) be an 햲∪퐶-formula with at most one free variable.
This implies that 푝= 푝훼and 푥= 푥훼for some 훼∈휅. Therefore,
∃푥훼푝훼→푝훼
푑훼
푥훼
∈풯훼+1,
so
⋃
훾∈휅
풯훾⊢∃푥훼푝훼→푝훼
푑훼
푥훼
.
Let 햲be a set of theory symbols and 퐶be a set of constants from 햲. Let 풯be a
consistent 햲-theory. We want to deﬁne an 햲-structure that has a chance of being a model
of 풯. One of the issues that must be overcome is whether any pair of constants should
be interpreted as being equal. If so, we want to view those constants as equivalent. To
do this, deﬁne a relation ∼on 퐶by
푐0 ∼푐1 if and only if 푐0 = 푐1 ∈풯
(7.22)
for all 푐0, 푐1 ∈퐶. This deﬁnes an equivalence relation under the right conditions.
LEMMA 7.4.14
Let 퐶be a set of constants from 햲. If 풯is a maximally consistent 햲-theory, then
∼is an equivalence relation on 퐶.

402
Chapter 7 MODELS
PROOF
Let 푐0, 푐1, 푐2 ∈퐶.
∙Since 풯∪{푐0 = 푐0} is consistent by E1 (Axioms 5.1.1), by the maximal
consistency of 풯, we have that 푐0 = 푐0 ∈풯.
∙Suppose 푐0 = 푐1 ∈풯. Then, 풯⊢푐0 = 푐1, so 풯⊢푐1 = 푐0 by E2. Thus,
푐1 = 푐0 ∈풯.
∙Let 푐0 = 푐1 ∈풯and 푐1 = 푐2 ∈풯. Hence, we have 풯⊢푐0 = 푐1 and
풯⊢푐1 = 푐2. Then, 풯⊢푐0 = 푐2 by E3, which yields 푐0 = 푐2 ∈풯.
We deﬁne the domain of the desired structure to be 퐶∕∼, the set of equivalence classes
modulo ∼(Deﬁnition 4.2.10). Before we deﬁne the function 픞, we need some actual
functions and relations on 퐶∕∼. Use the following lemma to deﬁne them.
LEMMA 7.4.15
Let 풯be a maximally consistent 햲-theory and 퐶be a set of constant symbols
from 햲. Let 푡0, 푡1, … , 푡푛−1, 푡′
0, 푡′
1, … , 푡′
푛−1 be 햲-terms such that
푡0 ∼푡′
0, 푡1 ∼푡′
1, … , 푡푛−1 ∼푡′
푛−1.
∙For every 푛-ary function symbol 푓,
푓(푡0, 푡1, … , 푡푛−1) ∼푓(푡′
0, 푡′
1, … , 푡′
푛−1).
∙For every 푛-ary relation symbol 푅,
푅(푡0, 푡1, … , 푡푛−1) ∈풯⇔푅(푡′
0, 푡′
1, … , 푡′
푛−1) ∈풯.
PROOF
By (7.22) we have that
풯⊢푡0 = 푡′
0, 풯⊢푡1 = 푡′
1, … , 풯⊢푡푛−1 = 푡′
푛−1.
Let 푓be an 푛-ary function symbol. Then,
풯⊢푓(푡0, 푡1, … , 푡푛−1) = 푓(푡′
0, 푡′
1, … , 푡′
푛−1)
by E4 (Axioms 5.1.1), so
푓(푡0, 푡1, … , 푡푛−1) = 푓(푡′
0, 푡′
1, … , 푡′
푛−1) ∈풯
by Lemma 7.4.5, which implies that 푓(푡0, 푡1, … , 푡푛−1) ∼푓(푡′
0, 푡′
1, … , 푡′
푛−1). Next,
let 푅be an 푛-ary relation symbol such that 푅(푡0, 푡1, … , 푡푛−1) ∈풯. This im-
plies that 풯⊢푅(푡0, 푡1, … , 푡푛−1), so we have that 풯⊢푅(푡′
0, 푡′
1, … , 푡′
푛−1) by E5.
Again, by Lemma 7.4.5, 푅(푡′
0, 푡′
1, … , 푡′
푛−1) ∈풯.

Section 7.4 THE THREE PROPERTIES REVISITED
403
We now deﬁne the functions and relations on the domain 퐶∕∼with 풯being maximally
consistent.
∙Let 푓be an 푛-ary function symbol from 햲. Let 푐0, 푐1, … , 푐푛−1 ∈퐶. Deﬁne the
푛-ary function 푓∼: 퐶∕∼→퐶∕∼by
푓∼([푐0], [푐1], … , [푐푛−1]) = [푐] ⇔푓(푐0, 푐1, … , 푐푛−1) = 푐∈풯.
(7.23)
Since 푓∼is deﬁned on a set of equivalence classes, we must conﬁrm that 푓∼is
well-deﬁned. Let 푑0, 푑1, … , 푑푛−1 ∈퐶such that
푐0 ∼푑0, 푐1 ∼푑1, … , 푐푛−1 ∼푑푛−1.
Then, [푐] = [푑] because by Lemma 7.4.15,
푓(푐0, 푐1, … , 푐푛−1) ∼푓(푑0, 푑1, … , 푑푛−1).
∙Let 푅be an 푛-ary relation symbol from 햲and take 푐0, 푐1, … , 푐푛−1 ∈퐶. Deﬁne
the 푛-ary relation 푅∼on 퐶∕∼by
([푐0], [푐1], … , [푐푛−1]) ∈푅∼⇔푅(푐0, 푐1, … , 푐푛−1) ∈풯.
(7.24)
We must check that the relation holds if diﬀerent constant symbols are used to
represent the classes [푐0], [푐1], … , [푐푛−1]. To do this, let 푑0, 푑1, … , 푑푛−1 ∈퐶
such that 푐0 ∼푑0, 푐1 ∼푑1, … , 푐푛−1 ∼푑푛−1. Then, we have that
([푑0], [푑1], … , [푑푛−1]) ∈푅∼
since by Lemma 7.4.15,
푅(푑0, 푑1, … , 푑푛−1) ∈풯.
The previous work makes the interpretation of the function and relation symbols of
햲obvious. However, what about the constant symbols? To ﬁnd out, take a constant
symbol 푐of 햲. If 푐∈퐶, then 푐should be interpreted as [푐], so suppose that 푐∉퐶.
Because ⊢∃푥(푥= 푐) and 풯is maximally consistent,
∃푥(푥= 푐) ∈풯.
At this point make the further assumption that 퐶is a witness set of 풯. Then, there
exists 푑∈퐶such that
푐= 푑∈풯.
This implies that [푐] = [푑]. Therefore, for every 푐∈햲, there exists 푐∼∈퐶such that
[푐] = [푐∼]. We can now deﬁne the structure.

404
Chapter 7 MODELS
DEFINITION 7.4.16
Let 풯be a maximally consistent set of 햲-sentences with witness set 퐶. Let ∼
be the relation (7.22). Deﬁne 프∼to be the 햲-structure with domain 퐶∕∼and
function 픞such that
∙픞(푐) = [푐∼] for all constant symbols 푐∈햲,
∙픞(푅) = 푅∼for all 푛-ary relation symbols 푅∈햲,
∙픞(푓) = 푓∼for all 푛-ary function symbols 푓∈햲.
Since we are investigating consistent sets of sentences, we do not need to involve a
particular interpretation for the structures in the proofs of the following results (Theo-
rem 7.1.31). Using Deﬁnition 7.4.16 will suﬃce.
LEMMA 7.4.17
Suppose that 풯is a maximally consistent set of 햲-sentences with 퐶as a witness
set. Then, 프∼⊨푡= 푐if and only if 푡= 푐∈풯, for every constant symbol 푐∈햲
and 햲-term 푡.
PROOF
Assume that 푐∈햲is a constant symbol and let 푡be an 햲-term. Since 풯is a set
of sentences, 푡cannot have any free variables.
∙Let 푡= 푑for some constant symbol 푑from 햲. Then,
프∼⊨푑= 푐⇔[푑] = [푐] ⇔푑∼푐⇔푑= 푐∈풯.
∙Let 푡= 푓(푡0, 푡1, … , 푡푛−1) for some 푛-ary function symbol 푓and 햲-terms
푡0, 푡1, … , 푡푛−1 containing no free variables. Assume that
프∼⊨푓(푡0, 푡1, … , 푡푛−1) = 푐.
Since 풯is maximally consistent,
∃푥(푡푖= 푥) ∈풯
for 푖= 0, 1, … , 푛−1. Since 퐶is a witness set, there exists 푐푖∈퐶such
that
푡푖= 푐푖∈풯,
which is equivalent to
푡푖∼푐푖.
(7.25)
Therefore, by induction,
프∼⊨푡푖= 푐푖.
Hence,
프∼⊨푓(푐0, 푐1, … , 푐푛−1) = 푐.

Section 7.4 THE THREE PROPERTIES REVISITED
405
This implies that
푓∼([푐0], [푐1], … , [푐푛−1]) = [푐],
so by (7.23),
푓(푐0, 푐1, … , 푐푛−1) = 푐∈풯.
Therefore, by Lemma 7.4.15 and (7.25),
푓(푡0, 푡1, … , 푡푛−1) = 푐∈풯.
The converse is left to Exercise 4.
LEMMA 7.4.18
If 풯is a consistent set of 햲-sentences with 퐶as a witness set, then 푝∈풯if and
only if 프∼⊨푝[퐼] for every 햲-sentence 푝.
PROOF
We can assume that 풯is maximally consistent (Exercise 5). Let 퐶be a witness
set of 풯. We prove the theorem by induction on formulas.
∙Let 푡0 = 푡1 ∈풯for 햲-terms 푡0 and 푡1 with no free variables. Since 풯is
maximally consistent,
∃푥(푡0 = 푥) ∈풯
and
∃푥(푡1 = 푥) ∈풯.
Because 퐶is a witness set for 풯, there exists 푐, 푑∈퐶such that
푡0 = 푐∈풯
and
푡1 = 푑∈풯.
This implies that 푡0 ∼푐and 푡1 ∼푑, so because 푡0 ∼푡1,
[푐] = [푑].
Therefore, 프∼⊨푐= 푑, but because 프∼⊨푡0 = 푐and 프∼⊨푡1 = 푑
(Lemma 7.4.17), 프∼⊨푡0 = 푡1. The proof of the converse is Exercise 7(a).
∙Let 푅(푡0, 푡1, … , 푡푛−1) ∈풯for some relation symbol 푅in 햲and 햲-terms
푡0, 푡1, … , 푡푛−1 with no free variables. As in the ﬁrst part of this proof, there
exist constants 푐푖∈퐶(푖= 0, 1, … , 푛−1) such that 푡푖∼푐푖. Thus, by
Lemma 7.4.15, 푅(푐0, 푐1, … , 푐푛−1) ∈풯, and then by the deﬁnition of 푅∼,
we have that
([푐0], [푐1], … , [푐푛−1]) ∈푅∼.
Therefore,
프∼⊨푅(푐0, 푐1, … , 푐푛−1),

406
Chapter 7 MODELS
so 프∼⊨푅(푡0, 푡1 … , 푡푛−1) [퐼] as in ﬁrst part. The proof of the converse is
Exercise 7(b).
∙Let 푝be an 햲-sentence. Then, by induction and the maximal consistency
of 풯,
¬푝∈풯⇔푝∉풯⇔프≁⊨푝⇔프∼⊨¬푝[퐼].
∙Let 푝and 푞be 햲-sentences. Assume 푝→푞∈풯and 프∼⊨푝[퐼]. By
induction, 푝∈풯, so by Lemma 7.4.5 and MP, 푞∈풯. Again by induction,
프∼⊨푞[퐼], so 프∼⊨푝→푞[퐼]. See Exercise 7(c) for the proof of the
converse.
∙Let 푝be an 햲-formula with at most one free variable 푥. By induction and
the maximal consistency of 풯,
프∼⊨∃푥푝⇔푝푐
푥∈풯for some 푐∈퐶⇔∃푥푝∈풯.
The hard work of this section leads to the fundamental theorem of model theory.
THEOREM 7.4.19 [Henkin]
An 햲-theory 풯is consistent if and only if 풯has a model.
PROOF
Let 풯be a set of 햲-sentences. Suppose 풯is consistent and let 퐶be a set of
constant symbols not found in 햲such that |퐶| = |햫(햲)|. By Lemma 7.4.13, there
exists a consistent extension 풯of 풯such that the elements of 풯are (햲∪퐶)-
sentences and 퐶is a witness set for 풯. By Lemma 7.4.18, there exists a model
프of 풯. Since the sentences of 풯do not contain any of the constants of 퐶, the
reduct of 프to 햲is a model of 풯. To see this, let 픅be the indicated reduct and
proceed by induction on formulas.
∙Let 푡0 and 푡1 be 햲-terms such that (푡0 = 푡1) ∈풯. These terms are also
(햲∪퐶)-terms, so since 풯⊆풯, we have that 프⊨푡1 = 푡2. Thus, there is
an (햲∪퐶)-interpretation 퐼such that 프⊨푡1 = 푡2 [퐼]. Hence, 퐼(푡1) = 퐼(푡2).
Let 퐼′ be the restriction of 퐼to 햲. Since 푡1 and 푡2 contain no symbols from
퐶, 퐼′(푡1) = 퐼′(푡2), so 픅⊨푡1 = 푡2 [퐼′] because 픅is the reduct of 프to 햲.
By Theorem 7.1.31, we have that 픅⊨푡1 = 푡2.
∙That 푅(푡0, 푡1, … , 푡푛−1) ∈풯implies 픅⊨푅(푡0, 푡1, … , 푡푛−1) for any 푛-ary
relation symbol 푅∈햲and 햲-terms 푡0, 푡1, … , 푡푛−1 is Exercise 8(a).
∙Let ¬푝∈풯. This implies that 프⊨¬푝. That is, not 프⊨푝. Since 픅is the
reduct of 프to 햲, not 픅⊨푝. In other words, 픅⊨¬푝.
∙That (푝→푞) ∈풯implies 픅⊨푝→푞for 햲-sentences 푝and 푞is Exer-
cise 8(b).

Section 7.4 THE THREE PROPERTIES REVISITED
407
∙Suppose that ∃푥푝∈풯, where 푝= 푝(푥) is an 햲-formula. Since 퐶is a
witness set and 풯is maximally consistent, 푝푐
푥∈풯for some 푐∈퐶. By
induction,
프⊨푝푐
푥.
Let 퐼be an interpretation of 프. Then, 프⊨푝[퐼픞(푐)
푥
], so we conclude that
프⊨∃푥푝.
To prove the converse, suppose that 풯⊢푞∧¬푞for some 햲-sentence 푞. By
the soundness theorem (7.4.9), 풯⊨푞∧¬푞. Hence, if 프is an 햲-structure such
that 프⊨풯, then 프⊨푞∧¬푞, which implies that 프⊨푞and not 프⊨푞. Hence,
풯does not have a model.
Henkin’s theorem (7.4.19) is used to prove the converse to the soundness theorem
(7.4.9).
COROLLARY 7.4.20 [Completeness]
Let 풯be a consistent set of 햲-sentences. For any 햲-sentence 푝, if 풯⊨푝, then
풯⊢푝.
PROOF
Suppose that 풯⊬푝. This implies that 풯∪{¬푝} is consistent, so by Henkin’s
theorem (7.4.19), there exists an 햲-structure 프such that 프⊨풯∪{¬푝}. Hence,
풯̸⊨푝.
COROLLARY 7.4.21
First-order logic is complete.
The next corollary was ﬁrst proved by Kurt Gödel (1929). It was his doctoral disserta-
tion.
COROLLARY 7.4.22 [Gödel’s Completeness Theorem]
An 햲-sentence is a theorem if and only if it is valid.
COROLLARY 7.4.23
For all sets of 햲-sentences 풯and 햲-sentences 푝, 풯⊢푝if and only if 풯⊨푝.
The use of models to show consistency is now a common technique in mathematical
logic. An early example was Hilbert’s use of ℝ× ℝto show that Euclidean geometry
is consistent (Hilbert 1899). That is, ℝ× ℝserves as the domain of a structure that
models the postulates of Euclidean geometry. The proof relies on the consistency of
the properties of ℝ× ℝ, a fact that is left unproved. A later usage is the model used by
Gödel that shows that both 햢햧and the axiom of choice (5.1.10) are consistent with 헭헙
(Gödel 1940). Both are examples of relative consistency proofs. Gödel assumed the
consistency of 헭헙, so he had a model for it. From this he deﬁned another model that

408
Chapter 7 MODELS
satisﬁes 햢햧and, in addition, the axiom of choice. We represent this by writing
햢허헇(헭헙) →햢허헇(헭헙헖+ 햢햧).
This is a partial answer to one of the ten then unsolved problems that Hilbert pre-
sented at the International Congress of Mathematicians at Paris in 1900. An expanded
list was published that year in Germany with an English translation released two years
later (Hilbert 1902). Hilbert’s intention was to outline the important problems that
mathematicians should strive to prove in the twentieth century. The ﬁrst problem in-
volved the continuum hypothesis. Namely, it should be determined whether
as regards equivalence there are ...only two assemblages of numbers, the
countable assemblage and the continuum.
Hilbert’s second problem dealt with the axioms of arithmetic. Speciﬁcally, he thought
that any of the chosen axioms should not be provable from the others. That is, they
should be independent. More importantly, mathematicians should seek
[t]o prove that they [the axioms] are not contradictory, that is, that a ﬁnite
number of logical steps based upon them can never lead to contradictory
results.
In this problem we see the notions of ﬁnite proof (Deﬁnition 1.2.13) and consistency
(Deﬁnitions 1.5.1 and 7.4.2), which would inﬂuence to the development of model the-
ory some 20–30 years after Hilbert’s talk and lead to some interesting results.
Exercises
1. Is ∅consistent? Explain.
2. Prove Theorem 7.4.3.
3. Prove that the group axioms (7.1.14) and the ring axioms (Axioms 7.1.36) are con-
sistent.
4. From the proof of Lemma 7.4.17, prove that if 푓(푡0, 푡1, … , 푡푛−1) = 푐∈풯, then
프∼⊨푓(푡0, 푡1, … , 푡푛−1) = 푐for all constant symbols 푐, 푛-ary function symbols 푓, and
햲-terms 푡0, 푡1, … , 푡푛−1.
5. In Lemma 7.4.18, why can 풯be assumed to be maximally consistent?
6. Let 프be an 햲-structure. Deﬁne 햳헁(프) to be the set of 햲-sentences that are satisﬁed
by 프. Prove that 햳헁(프) is maximally consistent.
7. Prove the given results from the proof of Lemma 7.4.18.
(a) If 프∼⊨푡0 = 푡1, then 푡0 = 푡1 ∈풯for all 햲-terms 푡0 and 푡1 with no free
variables.
(b) For all 햲-terms 푡0, 푡1 … , 푡푛−1 with no free variables, 푅(푡0, 푡1 … , 푡푛−1) ∈풯
if 프∼⊨푅(푡0, 푡1 … , 푡푛−1).
(c) 프∼⊨푝→푞implies that 푝→푞∈풯for all 햲-sentences 푝and 푞.
8. Show the following from the proof of Henkin’s theorem (7.4.19).
(a) If 푅(푡1, … , 푡푛) ∈풯, then 픅⊨푅(푡1, … , 푡푛) for any relation symbol 푅∈햲
and 햲-terms 푡1, … , 푡푛.

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
409
(b) If 푝→푞∈풯, then 픅⊨푝→푞for all 햲-sentences 푝and 푞.
9. Prove Corollary 7.4.22.
10. Let 풯and 풰be consistent sets of 햲-sentences. Prove that if 풯∪풰is inconsistent,
then there exists an 햲-sentence 푝such that 풯⊨푝but 풰̸⊨푝.
11. We say that an 햲-theory 풯is closed under deductions if for all 햲-sentences 푝, if
풯⊢푝, then 푝∈풯.
(a) If a theory is closed under deductions, is the theory maximally consistent?
(b) Let 훽be an ordinal and suppose that {풯훼: 훼∈훽} is a family of 햲-theories
such that for all 훾, 훿∈훽, if 훾∈훿, then 풯훾⊆풯훿. Prove that if 풯훼is
consistent for all 훼∈훽, then ⋃
훼∈훽풯훼is consistent.
12. A theory 풯is ﬁnitely axiomatizable if there exists an 햲-sentence 푝such that for
all 햲-sentences 푞, 풯⊨푞if and only if 푝⊨푞. Let {풯푛: 푛∈휔} be a chain of ﬁnitely
axiomatizable 햲-theories such that 푚≤푛implies that 풯푚⊆풯푛. Suppose that for all
푛∈휔, there exists a model of 풯푛that is not a model of 풯푛+1. Prove that ⋃
푛∈휔풯푛is
not ﬁnitely axiomatizable.
13. Suppose that 풯1 and 풯2 are 햲-theories. Let 프and 픅be 햲-structures. Prove the
following.
(a) If 풯1 ⊆풯2, then every model of 풯2 is a model of 풯1.
(b) If 프⊆픅, then 햳헁(픅) ⊆햳헁(프).
(c) If 프⊨풯1 ∪풯2, then 프⊨풯1 and 프⊨풯2.
(d) 프⊨풯1 if and only if 풯1 ⊆햳헁(프).
7.5
MODELS OF DIFFERENT CARDINALITIES
The natural numbers and their basic operations of addition and subtraction can be de-
ﬁned using the axioms of 헭헙헖(Section 5.2). It can then be proved that 휔has basically
the same algebraic properties as 퐍. Another approach to studying the natural numbers
is to break down the subject to its most basic parts. Think about addition of natural
numbers and how it is ﬁrst explained. Adding 4 to 3 to obtain 7, for example, means
starting at 3 and adding 1 four times in sequence:
3 + 1 = 4,
4 + 1 = 5,
5 + 1 = 6,
6 + 1 = 7.
Adding 1 simply means moving to the next natural number, so to add any two natural
numbers, all one needs is to know the numerals and have the ability to count (compare
Deﬁnition 5.2.15). Although not eﬃcient, this will do. Multiplication, the other oper-
ation, is based on addition. Multiplying 4 by 3 means writing 4 down 3 times and then
adding:
4 + 4 + 4 = 12.

410
Chapter 7 MODELS
This means that multiplication is also based on the ability to count (compare Deﬁni-
tion 5.2.18). This ability is represented by the successor function,
푆푛= 푛+ 1,
which is the basis of arithmetic (compare Deﬁnition 5.2.1). Thus, to understand the
natural numbers and how they work, we simply need a successor function that satisﬁes
the right rules.
Peano Arithmetic
Using the theory symbols 햠햱(Example 2.1.4), we make the following axioms. They
are a minor modiﬁcation of the axioms for the system of arithmetic found in Arith-
metices principia by Giuseppe Peano (1889).
AXIOMS 7.5.1
∙P1. ∀푥(¬ 푆푥= 0)
∙P2. ∀푥∀푦(푆푥= 푆푦→푥= 푦)
∙P3. For every 햠햱-formula 푝with free variable 푥,
푝(0) ∧∀푥[푝(푥) →푝(푆푥)] →∀푥푝(푥).
Denote {P1, P2, P3} by 헣. If we deﬁne
픭(푆) = +,
픭(0) = ∅,
(7.26)
then Theorem 5.2.2, Theorem 5.2.6, and Corollary 5.2.12 imply that 픓= (휔, 픭) is a
model of 헣. Because of the existence of a model for these axioms, which was con-
structed using 헭헙헖, we conclude the following (Theorem 7.4.19).
THEOREM 7.5.2
The consistency of 헣is a consequence of 헭헙헖.
Since the Peano axioms are intended to be the assumptions of number theory, 햠햱is
often extended to 햠햱′ (Example 2.1.4) and the sentences of Axioms 7.5.1 broadened to
include axioms involving +, ⋅, and <. These axioms serve as the foundation of number
theory.
AXIOMS 7.5.3 [Peano]
∙PA1. ∀푥(¬ 푆푥= 0)
∙PA2. ∀푥∀푦(푆푥= 푆푦→푥= 푦)
∙PA3. ∀푥(푥+ 0 = 푥)

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
411
∙PA4. ∀푥∀푦[푥+ 푆푦= 푆(푥+ 푦)]
∙PA5. ∀푥(푥⋅0 = 0)
∙PA6. ∀푥∀푦(푥⋅푆푦= 푥⋅푦+ 푥)
∙PA7. ∀푥(¬ 푥< 0)
∙PA8. ∀푥∀푦[푥< 푆푦↔(푥< 푦∨푥= 푦)]
∙PA9. ∀푥∀푦(푥< 푦∨푥= 푦∨푦< 푥)
∙PA10. For every 햠햱′-formula 푝with free variable 푥,
푝(0) ∧∀푥[푝(푥) →푝(푆푥)] →∀푥푝(푥).
Let 헣헔denote the Peano axioms (7.5.3). We call the set of consequences of the Peano
axioms Peano arithmetic. To ﬁnd a model for these axioms, extend the function 픭
(7.26) to 픭′ so that 픭′(+) is the addition of Deﬁnition 5.2.15, 픭′(⋅) is the multiplication
of Deﬁnition 5.2.19, and using the order of Deﬁnition 5.2.10,
픭′(<) = {(푚, 푛) ∈휔× 휔: 푚∈푛}.
That 픭′(<) satisﬁes PA7–PA9 is left to Exercise 2. Then, as before, 픓′ = (휔, 픭′) is a
model of the Peano axioms, which is an expansion of the model 픓, and we can again
apply Theorem 7.4.19 to obtain a consistency result.
THEOREM 7.5.4
The consistency of 헣헔is a consequence of 헭헙헖.
We call 픓′ and any 햠햱′-structure isomorphic to it a standard model of Peano arith-
metic. The the elements of the domain of any standard model are called standard
numbers. Any model of Peano arithmetic that is not isomorphic to 픓′ is called a
nonstandard model of Peano arithmetic.
Observe that 헣and 헣헔are sets of axioms separate from 헭헙헖. However, because
of the work of Section 5.2, both 헣and 헣헔can be viewed as consequences of 헭헙헖.
Speciﬁcally, if P1 is replaced by
∀푥(푥+ ≠∅),
(7.27)
P2 is replaced by
∀푥∀푦(푥+ = 푦+ →푥= 푦),
(7.28)
and P3 is replaced by
푝(∅) ∧∀푥[푝(푥) →푝(푥+)] →∀푥푝(푥)
(7.29)
for every 햲햳-formula 푝with free variable 푥, then
헭헙헖⊨{(7.27), (7.28), (7.27)}.

412
Chapter 7 MODELS
That is, a copy of 헣is found among the consequences of 헭헙헖. Also, using Deﬁni-
tions 5.2.15 and 5.2.18, it can be shown that a copy of Peano arithmetic is found among
the consequences of 헭헙헖.
We will not repeat all our number theory work in Peano arithmetic, although it is
possible to do so. Instead, we give a sample of some basic results to illustrate that
the two systems are the same. Because of the work in Section 5.2, the addition and
multiplication of Peano arithmetic are commutative, associative, satisfy the distributive
and cancellation laws, and have identities in the standard model. That these properties
hold in every model of Peano arithmetic is a separate issue, yet their proofs are similar
to the work of Section 5.2.
THEOREM 7.5.5
The following 햠햱′-sentences are theorems of 헣헔.
∙Associative Laws
∀푥∀푦∀푧[푥+ (푦+ 푧) = (푥+ 푦) + 푧]
∀푥∀푦∀푧[푥⋅(푦⋅푧) = (푥⋅푦) ⋅푧]
∙Commutative Laws
∀푥∀푦(푥+ 푦= 푦+ 푥)
∀푥∀푦(푥⋅푦= 푦⋅푥)
∙Additive Identity
∀푥(0 + 푥= 푥)
∙Multiplicative Identity
∀푥(푆0 ⋅푥= 푥)
∙Distributive Law
∀푥∀푦∀푧[푥⋅(푦+ 푧) = 푥⋅푦+ 푥⋅푧]
PROOF
We prove the ﬁrst associative law and the multiplicative identity property, leaving
the others to Exercise 9.
∙Deﬁne
푝(푥) := ∀푧[푥+ (푦+ 푧) = (푥+ 푦) + 푧].
By PA3, we have 푝(0) because
푥+ (푦+ 0) = (푥+ 푦) + 0.
Next, assume 푝(푘). Since 푆is a function symbol, PA4 yields
푆[푥+ (푦+ 푘)] = 푆[(푥+ 푦) + 푘] ,
푥+ 푆(푦+ 푘) = (푥+ 푦) + 푆푘,
푥+ (푦+ 푆푘) = (푥+ 푦) + 푆푘.

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
413
Therefore, 푝(푆푘), so the associative law for multiplication holds by PA10.
∙Assuming that the commutative laws have already been proved, PA6, PA5,
and PA3 imply that
푆0 ⋅푥= 푥⋅푆0 = 푥⋅0 + 푥= 0 + 푥= 푥+ 0 = 푥,
so 푆0 ⋅푥= 푥by E3 (Axioms 5.1.1).
To ease our notation when dealing with numbers other than 1 = 푆0, deﬁne
푆0푥= 푥
(7.30)
and for all 푛∈휔⧵{0},
푆푛= 푆푆… 푆
⏟⏞⏟⏞⏟
푛times
푥.
(7.31)
We will use this notation in the next example.
EXAMPLE 7.5.6
In the formula,
(3 + 2) + 1 = (1 + 3) + 2,
(7.32)
two properties from Theorem 7.5.5 are being applied. First, we conclude that
(3 + 2) + 1 = 1 + (3 + 2) by the commutative law. The associative law is then
used to draw the ﬁnal conclusion. Notice that (7.32) is the standard interpretation
of
++푆푆푆0푆푆0푆0 = +푆0푆푆푆0 + 푆푆0,
which, using (7.31), is equivalent to
++푆30푆20푆10 = +푆10푆30 + 푆20.
Also, the distributive law is applied in the formula
2 ⋅푥+ 3 ⋅푥= 5 ⋅푥,
because
2 ⋅푥+ 3 ⋅푥= 푥⋅2 + 푥⋅3 = 푥⋅(2 + 3) = 푥⋅5 = 5 ⋅푥.
Given an equation like
5 ⋅푥+ 1 = 11,
(7.33)
the standard routine is to solve it like this:
5 ⋅푥+ 1 = 11,
5 ⋅푥= 10,
푥= 2.
In the ﬁrst step, −1 was added to both sides, and in the second, 1∕5 was multiplied by
both sides. However, only 0 has an additive inverse in Peano arithmetic, and only 1 has
a multiplicative inverse. The way around this problem are cancellation laws.

414
Chapter 7 MODELS
THEOREM 7.5.7 [Cancellation]
The following 햠햱′-sentences are theorems of 헣헔.
∙∀푥∀푦∀푧[(푥+ 푧= 푦+ 푧) →푥= 푦]
∙∀푥∀푦∀푧[(푥⋅푧= 푦⋅푧∧¬푧= 0) →푥= 푦].
PROOF
The proof of the cancellation law for multiplication is Exercise 10. For addition,
deﬁne
푝(푧) := ∀푥∀푦(푥+ 푧= 푦+ 푧→푥= 푦).
First, notice that if 푥+ 0 = 푦+ 0,
푥= 푥+ 0 = 푦+ 0 = 푦,
where the ﬁrst and last equality hold by PA3. Therefore, 푝(0). For the induction
step, suppose 푝(푘). Then, by PA4 and PA2,
푥+ 푆푘= 푦+ 푆푘,
푆(푥+ 푘) = 푆(푦+ 푘),
푥+ 푘= 푦+ 푘,
푥= 푦,
where the last step follows by 푝(푘). Therefore, ∀푧푝(푧) by PA10.
Therefore, in Peano arithmetic, solve (7.33) like this:
5 ⋅푥+ 1 = 11,
5 ⋅푥+ 1 = 10 + 1,
5 ⋅푥= 10,
5 ⋅푥= 5 ⋅2,
푥= 2.
The third and last equations follow by cancellation (Theorem 7.5.7).
Compactness Theorem
Having a model that satisﬁes 헣or 헣헔means that basic arithmetic can be done in this
model. We know that this happens in the standard model (assuming 헭헙헖), so we now
want to know whether there are any nonstandard models of Peano arithmetic. To be
successful in our search, we turn to some theorems that follow from Henkin’s theorem
(7.4.19). The ﬁrst states that the existence of a model rests on the ﬁnite. It was ﬁrst
proved by Gödel for countable ﬁrst-order theories (1930) and by Anatolij Mal’tsev for
arbitrary ﬁrst-order theories (1936).

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
415
THEOREM 7.5.8 [Compactness]
An 햲-theory 풯has a model if and only if every ﬁnite subset of 풯has a model.
PROOF
Since suﬃciency is clear, let 풯have the property that every ﬁnite subset has
a model. This implies that every ﬁnite subset of 풯is consistent by Henkin’s
theorem. Therefore, 풯is consistent by Theorem 7.4.3, so 풯also has a model
by Henkin’s Theorem.
We apply the compactness theorem to ﬁnd another model of 헣헔. Let 푐be a constant
symbol other than 0. For every natural number 푛, use (7.30) and (7.31) to deﬁne the
set of (햠햱′ ∪{푐})-sentences
ℱ푛= 헣헔∪{푆푖0 < 푐: 푖∈휔∧푖≤푛},
and let 프푛= ({0, 1, … , 푛+ 1}, 픞), where
픞↾햠햱′ = 픭′
and
픞(푐) = 푛+ 1.
Observe that
프푛⊨ℱ푛,
so ℱ푛is consistent for all 푛∈휔, which implies that it has a model by Henkin’s Theorem
(7.4.19). Therefore,
ℱ=
⋃
푛∈휔
ℱ푛
has a model by the compactness theorem (7.5.8). Let 프be the reduct of this model
to 햠햱′. Notice that 프⊨헣헔, but because it has an element that is interpreted to be
greater than every element of its domain, 프is a nonstandard model of Peano arithmetic
(Theorem 7.3.24).
Löwenheim–Skolem Theorems
Now that we know that a nonstandard model of Peano arithmetic exists under 헭헙헖,
we want to know if there are others. For this, we need a deﬁnition. The power of an
햲-structure 프is denoted by |프| and refers to the cardinality of the domain of 프. This
means that a model is countable if and only if its power is countable. We introduce a
sequence of theorems related to this. They are due to Skolem (1922), Tarski and Vaught
(1957), and Leopold Löwenheim (1915).
THEOREM 7.5.9 [Downward Löwenheim–Skolem]
Every consistent 햲-theory has a model with power of at most |햫(햲)|.

416
Chapter 7 MODELS
PROOF
Recall these facts from the proof of Henkin’s theorem (7.4.19).
∙퐶is a set of new constant symbols such that |퐶| = |햫(햲)|.
∙프is a (햲∪퐶)-structure.
∙픅is the reduct of 프to 햲.
We can assume that 프has the property that every element of the domain of 프is
the interpretation of a constant of 퐶. Then, since 프and 픅have the same power,
|픅| ≤|햫(햲∪퐶)| = |햫(햲)|.
Since the witness set of a single sentence is ﬁnite and there are only ﬁnitely many
symbols in a sentence, 햲∪퐶can be assumed to be ﬁnite in the proof of the downward
Löwenheim–Skolem theorem (7.5.9). If this is the case, |햫(햲∪퐶)| = |햫(햲)| = ℵ0, and
we have the next corollary.
COROLLARY 7.5.10 [Löwenheim]
If an 햲-sentence has a model, it has a countable model.
Since 햫(햠햱′) is countable, Theorem 7.5.9 also implies the following.
COROLLARY 7.5.11 [Skolem]
헭헙헖implies that there is a countable nonstandard model of Peano arithmetic.
In fact, although we do not prove it here, 헭헙헖implies that there are 2ℵ0 countable
nonstandard models of Peano arithmetic.
The title of Theorem 7.5.9 suggests the existence of the following theorem.
THEOREM 7.5.12 [Upward Löwenheim–Skolem]
If an 햲-theory has an inﬁnite model, it has a model of cardinality 휅for every
휅≥|햫(햲)|.
PROOF
Let 풯be an 햲-theory with an inﬁnite model 프= (퐴, 픞). Take 휅≥|햫(햲)|.
Choose a set 퐶= {푐훼: 훼∈휅} of distinct constant symbols not found in 햲.
Extend 풯to the (햲∪퐶)-theory 풯by deﬁning
풯= 풯∪{푐훼≠푐푏: 훼∈훽∈휅}.
Let 풮be a ﬁnite subset of 풯. This implies that there exists
퐶′ = {푐훼0, 푐훼1, … , 푐훼푛−1} ⊆퐶
such that the constants of the sentences of 풮are among the constants of 퐶′.
Expand the 햲-structure 프to the (햲∪{푐훼0, 푐훼1, … , 푐훼푛−1})-structure 프′ = (퐴, 픞′),

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
417
where 픞′ ↾햲= 픞and
픞′(푐훼푖) ∈퐴
for all 푖= 0, 1, … , 푛−1. Since 퐴is inﬁnite, we further assume that
픞′(푐훼0), 픞′(푐훼1), … , 픞′(푐훼푛−1)
are distinct. Therefore, 프′ ⊨풮, so by the compactness theorem (7.5.8), there
exists a model 픅of 풯, and due to the interpretation of the new constants, the
power of 픅is 휅. Thus, the reduct of 픅to 햲is a model of 풯and has power 휅.
The upward Löwenheim–Skolem theorem with 헭헙헖implies that the Peano axioms
have models of all inﬁnite cardinalities, which are nonstandard by deﬁnition.
The von Neumann Hierarchy
We constructed a model of 헣헔using 헭헙헖. If we can ﬁnd models of 헭헙헖, we would
have other models of 헣헔, plus prove the consistency of 헭헙헖. In order to ﬁnd models
of 헭헙헖, we begin by searching for models of individual axioms using a deﬁnition due
to von Neumann (1929). The objective of the deﬁnition is to construct a sequence
of sets that have the property that every set is in one of the stages of the sequence.
However, since von Neumann’s deﬁnition used functions instead of sets, it was Zermelo
(1930) who gave it its more recognizable form. While von Neumann left his base stage
empty, Zermelo allowed the ﬁrst set of the sequence to contain objects, which are called
urelements, that were not sets yet were allowed to be elements of sets (Exercise 20).
These two approaches are combined in the following deﬁnition, which is named after
von Neumann.
DEFINITION 7.5.13
Let 푉0 = ∅. Let 훼be an ordinal.
∙푉훼+1 = P(푉훼).
∙푉훼= ⋃
훽<훼푉훽if 훼is a limit ordinal.
This is called the von Neumann hierarchy.
As proved in Exercise 22, 푉훼is a set for every ordinal 훼by the empty set, union, power
set, and replacement axioms (5.1.2, 5.1.6, 5.1.7, 5.1.9). Thus, every element of 푉훼is a
set. For example,
푉1 = {∅},
푉2 = {∅, {∅}},
푉3 = {∅, {∅}, {{∅}}, {∅, {∅}}}
⋮
The sets in 푉휔are ﬁnite and called the hereditarily ﬁnite sets. There are countably
many of these sets because 푉푛is countable for each 푛∈휔(Theorem 6.3.17), while

418
Chapter 7 MODELS
|푉휔+1| = 2ℵ0. Observe that the cardinality of 푉푛for each 푛∈휔is ﬁnite but grows very
quickly.
|푉0| = 0,
|푉1| = 1,
|푉2| = 2,
|푉3| = 22,
|푉4| = 222,
|푉5| = 2222
,
|푉6| = 22222
⋮
Before we can use individual stages of von Neumann’s hierarchy, we need to know
some of their key properties. For this, we start with some lemmas.
LEMMA 7.5.14
Let 훼and 훽be ordinals.
∙푉훼is a transitive set.
∙If 훼⊆훽, then 푉훼⊆푉훽.
PROOF
Let 휁be a limit ordinal containing 훼and 훽. Deﬁne
퐴= {휂∈휁: 푉휂is transitive}.
Assume that 헌햾헀(퐴, 훿) ⊆퐴for the ordinal 훿∈휁. Let 퐵∈푉훿.
∙푉0 is transitive because 푉0 = ∅.
∙Suppose that 훿= 훾+ for some ordinal 훾. By deﬁnition, 퐵∈P(푉훾), so
퐵⊆푉훾. Take 푥∈퐵. This implies that 푥∈푉훾. Because 푉훾is transitive,
we have that 푥⊆푉훾. Hence, 푥∈P(푉훾) = 푉훿, so 퐵⊆푉훿.
∙Let 훿be a limit ordinal. Then, there exists 훾∈훿such that 퐵∈푉훾. Since
푉훾is transitive by hypothesis, 퐵⊆푉훾⊆푉훿.
We conclude that 훿∈퐴. Thus, by transﬁnite induction (Theorem 6.1.18), 퐴= 휁
and 푉훼is transitive.
Now, suppose 훼⊆훽and take 푥∈푉훼. Since
푉훼∈P(푉훼) ⊆푉훽,
푉훼∈푉훽. However, the ﬁrst part shows that 푉훽is transitive, so 푉훼⊆푉훽.

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
419
LEMMA 7.5.15
If 훼is an ordinal, then 훼∈푉훼+.
PROOF
Let 훼be an ordinal and take 휁to be a limit ordinal such that 훼∈휁and proceed
by transﬁnite induction.
∙Since 푉0 = ∅, we have that ∅∈푉1.
∙Suppose that 훼∈푉훼+. Since 푉훼+ is transitive (Lemma 7.5.14), 훼⊂푉훼+.
Also, {훼} ⊂푉훼+. Therefore, 훼∪{훼} ⊂푉훼+, so 훼+ ∈푉훼++.
∙Let 훼be a limit ordinal and assume that 훽∈푉훽+ for all 훽∈훼. That is,
훽⊂푉훽+ for all 훽∈훼since each 푉훽+ is transitive. Hence,
훼=
⋃
훽∈훼
훽⊆
⋃
훽∈훼
푉훽+ = 푉훼,
which implies that 훼∈푉훼+.
The deﬁnition of the von Neumann hierarchy along with the fact that every ordinal
belongs to a member of the hierarchy suggests that many, if not all, sets also belong to
the hierarchy. For this reason, we deﬁne the following.
DEFINITION 7.5.16
Let 헩denote the collection of all sets 퐴such that 퐴∈푉훼for some ordinal 훼.
It is the case that all sets belong to the hierarchy. This is the next theorem. Its proof is
aided by the use of two terms and a lemma.
∙A set 퐴is grounded if there exists an ordinal 훼such that 퐴⊆푉훼.
∙The transitive closure of 퐴is
TC(퐴) = {푢: ∀푣(퐴∈푣∧푣is transitive →푢∈푣)}.
As the name implies, TC(퐴) is a transitive set (Exercise 24).
The proof of the next lemma is left to Exercise 21.
LEMMA 7.5.17
Every element of 퐴is grounded if and only if 퐴is grounded.
THEOREM 7.5.18
For every set 퐴, there exists an ordinal 훼such that 퐴∈푉훼.

420
Chapter 7 MODELS
PROOF
Suppose that 퐴is a set such that 퐴∉푉훼for all ordinals 훼. If 퐴⊆푉훽for some
ordinal 훽, then 퐴∈푉훽+, which contradicts the hypothesis. Hence, 퐴is not
grounded, which implies that {퐴} is not grounded (Lemma 7.5.17). Deﬁne
퐵= {푢∈TC({퐴}) : 푢is not grounded}.
Since 퐵≠∅, the regularity axiom (5.1.15) implies that there exists 퐶∈퐵such
that 퐶∩퐵= ∅. Let 푥∈퐶. Since transitive closures are transitive, 푥∈TC(퐴).
However, 푥∉퐵, so 푥is grounded. From this we conclude that 퐶is grounded
by Lemma 7.5.17, a contradiction.
Therefore, every set is in 헩, but we know by Corollary 5.1.17 that 헩is not a set in that
it cannot be built using 헭헙헖. However, we sometimes want to refer to such collections
even though they are not sets. For this reason the term class was introduced, so we call
헩the class of all sets.
We are now ready to use sets from the von Neumann hierarchy to serve as models
for axioms from 헭헙헖(Section 5.1).
DEFINITION 7.5.19
Let 훼be an ordinal. Deﬁne the 햲햳-structure 픙훼= (푉훼, ∈).
Consider
픙3 = ({∅, {∅}, {{∅}}, {∅, {∅}}}, ∈).
(7.34)
The elements of 푉3 are the sets of the model. These elements are equal exactly when
they share the same elements (Deﬁnition 3.3.7), so
픙3 ⊨extensionality axiom.
Because the union of any two elements of 푉3 is an element of 푉3, such as
∅∪{∅} = {∅}
and
{{∅}} ∪{∅, {∅}} = {∅, {∅}},
we see that
픙3 ⊨union axiom.
If we take a 햲햳-formula 푝(푥) and 퐴∈푉3, then {푥: 푥∈퐴∧푝(푥)} ∈푉3. Hence,
픙3 ⊨subset axioms.
Because 푉3 is ﬁnite,
픙3 ⊨axiom of choice,
and we have that
픙3 ⊨axiom of regularity
since, for example,
{∅} ∩{{∅}} = ∅.
These results are particular examples of the next general theorem.

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
421
THEOREM 7.5.20
If 훼is an ordinal,
∙픙훼⊨extensionality axiom,
∙픙훼⊨union axiom,
∙픙훼⊨subset axioms,
∙픙훼⊨axiom of choice,
∙픙훼⊨axiom of regularity.
PROOF
Let 훼be an ordinal and 퐼be an 햲햳-interpretation of 픙훼. We check that the
extensionality axiom (5.1.4) holds in the model and leave the other parts of the
proof to Exercise 25. Take 퐴, 퐵∈푉훼. Assume that
픙훼⊨∀푢(푢∈푥↔푢∈푦) [(퐼퐴
푥)퐵
푦].
That is,
for all 푚∈푉훼, 픙훼⊨푢∈푥[((퐼퐴
푥)퐵
푦)푚
푢] if and only if 픙훼⊨푢∈푦[((퐼퐴
푥)퐵
푦)푚
푢].
We want to show that 퐴= 퐵, so let 푎∈퐴. Since 푉훼is transitive (Lemma 7.5.14),
푎∈푉훼, which implies that
픙훼⊨푢∈푥[((퐼퐴
푥)퐵
푦)푎
푢].
Therefore,
픙훼⊨푢∈푦[((퐼퐴
푥)퐵
푦)푎
푢],
which implies that 푎∈퐵. This proves that 퐴⊆퐵. A similar proof shows that
퐵⊆퐴. Thus, 퐴= 퐵, from which follows that
픙훼⊨푥= 푦[(퐼퐴
푥)퐵
푦].
Therefore,
if 픙훼⊨∀푢(푢∈푥↔푢∈푦) [(퐼퐴
푥)퐵
푦], then 픙훼⊨푥= 푦[(퐼퐴
푥)퐵
푦].
In other words,
픙훼⊨∀푢(푢∈푥↔푢∈푦) →푥= 푦[(퐼퐴
푥)퐵
푦].
Since 퐴and 퐵were arbitrarily chosen,
픙훼⊨∀푥∀푦(∀푢[푢∈푥↔푢∈푦] →푥= 푦).
Again, using the 햲햳-structure 픙3 (7.34), we see that the result of pairing two ar-
bitrarily chosen elements of 푉3 into a single set might not be an element of 푉3. For
example,
{{∅}, {{∅}}} ∉푉3.

422
Chapter 7 MODELS
The same is true regarding power sets. For example,
P({{∅}}) = {∅, {{∅}}} ∉푉3.
However, both of these sets are elements of 푉휔, which suggests that for the pairing
(5.1.5) and power set (5.1.7) axioms to hold in stage 푉훼of the von Neumann hierarchy,
훼needs to be a limit ordinal.
THEOREM 7.5.21
If 훼is a limit ordinal,
∙픙훼⊨pairing axiom,
∙픙훼⊨power set axiom.
PROOF
Let 훼be a limit ordinal. Take 푎, 푏∈푉훼. Then, there exists 훽1, 훽2 ∈훼such that
푎∈푉훽1 and 푏∈푉훽2. Without loss of generality, we can assume that 훽1 ⊆훽2,
which implies that 푎∈푉훽2 by Lemma 7.5.14. Therefore, {푎, 푏} ⊆푉훽2, so
{푎, 푏} ∈P(푉훽2) = 푉훽+
2 ⊆푉훼.
Hence,
픙훼⊨∀푢∀푣∃푥∀푤(푤∈푥↔푤= 푢∨푤= 푣).
The proof of the second part of the theorem is left to Exercise 26.
Certainly, the empty set will be an element of 푉훼provided that 훼is not empty, so
the proof of the next theorem is left to Exercise 27. In addition, 푉훼needs to contain 휔
to satisfy the inﬁnity axiom.
THEOREM 7.5.22
If 훼is a nonempty ordinal, 픙훼⊨empty set axiom.
THEOREM 7.5.23
If 훼is an ordinal such that 휔∈훼, then 픙훼⊨inﬁnity axiom.
PROOF
Since Lemma 7.5.15 implies that 휔∈푉휔+, by Lemma 7.5.14, we have that
픙훼⊨∃푥({ } ∈푥∧∀푢[푢∈푥→∃푦(푦∈푥∧푢∈푦∧∀푣[푣∈푢→푣∈푦])]).
Since 휔⋅2 = 휔+ 휔is a limit ordinal greater than 휔, we conclude the following.
THEOREM 7.5.24
픙휔⋅2 ⊨헭.
The ordinal 휔+휔requires one of the replacement axioms (5.1.9) to prove its existence
(page 317). This means that the proof of the consistency of 헭relies on axioms not in

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
423
헭, so let us continue to examine the von Neumann hierarchy for a model of 헭헙헖. It
will not be 픙휔⋅2 because not all replacement axioms are true in 픙휔⋅2. This is because
픙휔⋅2 does not satisfy Theorem 6.1.19. To use a stage of the von Neumann hierarchy to
serve as a model for 헭헙헖, we need a strongly inaccessible cardinal (Deﬁnition 6.5.11),
which is the next theorem. We state it without proof.
THEOREM 7.5.25
픙휅⊨헭헙헖if and only if 휅is a strongly inaccessible cardinal.
However, the sentence
there exists a strongly inaccessible cardinal
(7.35)
cannot be proved or disproved using 헭헙헖. This means that (7.35) is independent of
the axioms of set theory. It also means that we are ready for the next deﬁnition. Do not
confuse it with the notion of a complete logic (Deﬁnition 7.4.8).
DEFINITION 7.5.26
An 햲-theory 풯is complete if 풯⊢푝or 풯⊢¬푝for all 햲-sentences 푝, else 풯is
incomplete.
The deﬁnition means that 헭헙헖is not complete. It turns out that the underlying issue
is that 헭헙헖satisﬁes the Peano axioms (7.5.3). The ability to do basic arithmetic guar-
antees that there exists a sentence that is independent of 헭헙헖. This result generalizes
to the incompleteness theorems due to Gödel (1931).
THEOREM 7.5.27 [Gödel’s First Incompleteness Theorem]
If the Peano axioms are provable from a consistent theory, the theory is incom-
plete.
Since 헭헙헖is assumed to be consistent and it can be used to deduce the Peano axioms,
we conclude that 헭헙헖is incomplete. Now suppose that instead of assuming the con-
sistency of 헭헙헖, we try to prove that 헭헙헖is consistent using its own axioms. Gödel’s
next theorem proves that we cannot do this, except under one condition.
THEOREM 7.5.28 [Gödel’s Second Incompleteness Theorem]
If a theory proves the Peano axioms and its own consistency, the theory is incon-
sistent.
Therefore, if 헭헙헖could be used to prove (7.35), 헭헙헖would prove that it has a model,
which would imply that 헭헙헖is consistent by Henkin’s theorem (7.4.19). Since we
believe that 헭헙헖is consistent, we conclude that 헭헙헖cannot prove the existence of a
strongly inaccessible cardinal. If 헭헙헖was extended with an axiom that would allow
such a proof, there would be another issue with the extension that would prevent it from
proving its own consistency, provided that the new theory was consistent.

424
Chapter 7 MODELS
The statement of the ﬁrst incompleteness theorem does not explicitly give a math-
ematical statement that cannot be proved. It was left to later mathematicians to ﬁnd
some. For example, when combined with Gödel’s proof of the relative consistency of
햢햧, the proof of Paul Cohen (1963) of
햢허헇(헭헙헖) →햢허헇(헭헙헖+ ¬햢햧),
shows that both 햢햧and its negation cannot be proved from 헭헙헖. This means that the
continuum hypothesis is independent of 헭헙헖. In general, to prove that a sentence 푝is
independent of a theory 풯, do two things.
∙Find a model 프such that 프⊨풯∪{푝}. Then, 풯̸⊨¬푝by Deﬁnition 7.1.20.
This implies that 풯⊬¬푝by Corollary 7.4.23.
∙Find another model 픅such that 픅⊨풯∪{¬푝}. From this conclude that 풯̸⊨푝,
which implies 풯⊬푝.
Using this strategy, other statements have been discovered to be independent of 헭헙헖.
Some of these are technical set theoretic statements such as Martin’s axiom (Martin and
Solovay 1970) or the diamond principle (Jensen 1972). There are independent state-
ments in other branches of mathematics as well. An example from group theory is the
independence of the Whitehead problem (Shelah 1974), named after the mathematician
John H. C. Whitehead (1950).
Exercises
1. Write an 햠햱′-formula equivalent to the given English sentences.
(a) 푥is an even number.
(b) 푥is an odd number.
(c) 푥is a prime.
(d) 푥divides 푦.
2. Prove that the order of Deﬁnition 5.2.10 proves the given 햠햱′-sentences.
(a) ∀푥(¬ 푥< 0)
(b) ∀푥∀푦[푥< 푆푦↔(푥< 푦∨푥= 푦)]
(c) ∀푥∀푦(푥< 푦∨푥= 푦∨푦< 푥).
3. Prove that the given 햠햱′-formulas can be proved from Axioms 7.5.3.
(a) ∀푥(0 < 푥∨푥= 0)
(b) ∀푥[푥= 0 ∨∃푦(푥= 푆푦)]
(c) ∀푥∀푦(푥⋅푦= 0 →푥= 0 ∨푦= 0)
(d) ∀푥∀푦(푥< 푦↔푆푥< 푆푢)
(e) ∀푥∀푦(푥< 푦∨푥= 푦∨푦< 푥)
4. Prove 헣헔⊨(푥+2)⋅(푥+3) = (푥⋅푥+5⋅푥)+6, where 2, 3, 5, and 6 are understood
to mean the appropriate successors of 0.

Section 7.5 MODELS OF DIFFERENT CARDINALITIES
425
5. Find examples of the following if possible.
(a) An 햲-theory 풯such that every two ﬁnite models of 풯are isomorphic, but
there exists two models of 풯that are inﬁnite and not isomorphic.
(b) An 햲-theory 풯such that every two countable models of 풯are isomorphic,
but there exists two models of 풯that are uncountable and not isomorphic.
6. Let 풯be an 햲-theory and 푝an 햲-sentence where 풯⊢푝. Prove that there exists a
ﬁnite 풰⊆풯such that 풰⊢푝.
7. Let 풯be an 햲-theory and 푝an 햲-sentence such that 풯⊨푝and 푝⊨풯. Show that
there exists a ﬁnite subset 풰of 풯such that 풰⊨풯.
8. Prove that the following are equivalent for an 햲-theory 풯.
∙풯is consistent.
∙풯has a model.
∙풯has a countable model.
∙Every ﬁnite subset of 풯is consistent.
∙Every ﬁnite subset of 풯has a model.
∙Every ﬁnite subset of 풯has a countable model.
9. Finish the proof of Theorem 7.5.5.
10. Prove that the cancellation law holds for multiplication in Peano arithmetic. See
Exercise 7.5.7.
11. If possible, ﬁnd an 햠햱′-sentence 푝∈햳헁(픓′) that is not a consequence of 헣헔
(Exercise 7.4.6).
12. Demonstrate that there is no ﬁnite model of 헣or 헣헔.
13. Prove that there exists a model of 헣that is not isomorphic to 픓.
14. Prove that there is a countable nonstandard model of Peano arithmetic.
15. The axioms for an ordered ﬁeld are the ring axioms (7.1.36) plus the following
햮향-sentences:
∙∀푥∀푦(푥⊗푦= 푦⊗푥),
∙∃푥∀푦(푥⊗푦= 푦),
∙∀푥[¬푥= 0 →∃푦(푥⊗푦= 1)],
∙∀푥∀푦(푥< 푦∨푥= 푦∨푦< 푥).
Find a model for these axioms.
16. Show that there exists a model of the axioms for an ordered ﬁeld (Exercise 15)
such that 휔is a subset of the domain of the model and there exists 푚in the domain so
that 푛< 푚for every natural number 푛. In addition, prove that there are inﬁnitely many
such 푚. What does 1∕푚look like?
17. Let ℜ= (ℝ, 0, +, ⋅, <) be a model of the axioms for an ordered ﬁeld. Prove that
there is a countable model of 햳헁(ℜ). What is the signiﬁcance of this model?

426
Chapter 7 MODELS
18. Expand 햮향to 햮향∪{퐸}, where 퐸is a binary function symbol. Find a model of
the axioms for an ordered ﬁeld including the following (햮향∪{퐸})-sentences:
∙∀푥(푥퐸0 = 푆0)
∙∀푥∀푦(푥퐸(푆푦) = (푥퐸푦)푥
19. Let 풯be a theory such that for every 푛∈휔, there exists 푚∈휔such that 푚> 푛
and 풯has a model of power 푚. Prove that 풯has an inﬁnite model.
20. This hierarchy is due to Zermelo. Let 푉0 be a set of atoms. For every ordinal 훼,
deﬁne 푉훼+ = 푉훼∪P(푉훼), and if 훼is a limit ordinal, deﬁne 푉훼= ⋃
훽<훼푉훽. Find 푉1 and
푉2 assuming the given sets of atoms.
(a) 푉0 = ∅
(b) 푉0 = {푎}
(c) 푉0 = {0, 1, 2, 3}
21. Prove Lemma 7.5.17.
22. Prove that 푉훼is a set for every ordinal 훼.
23. Using Exercise 6.3.22, show that |푉휔+훼| = ℶ훼for every ordinal 훼.
24. Let 퐴be a set. Prove that TC(퐴) is a transitive set.
25. Prove the remaining parts of Theorem 7.5.20.
26. Let 훼be a limit ordinal. Prove that 픙훼⊨∀푥∃푦∀푢(푢∈푦↔∀푣[푣∈푢→푣∈푥]).
27. Prove that 픙훼⊨∃푥∀푦¬(푦∈푥) if 훼≠∅.
28. Let 프be an 햲-structure. Prove that 햳헁(프) is complete.
29. Let 휅be a cardinal and {풯훼: 훼∈휅} be a chain of complete 햲-theories such that
for all 훾∈훿∈휅we have that 풯훾⊆풯훿. Show that ⋃
훼∈휅풯훼is complete.
30. Let 풮⊆풯be 햲-theories. Prove or show false: If 풯is complete, then 풮is
complete.

APPENDIX
ALPHABETS
Greek Alphabet
Upper
Lower
Name
A
훼
alpha
B
훽
beta
Γ
훾
gamma
Δ
훿
delta
E
휖
epsilon
Z
휁
zeta
H
휂
eta
Θ
휃
theta
I
휄
iota
K
휅
kappa
Λ
휆
lambda
M
휇
mu
Upper
Lower
Name
N
휈
nu
Ξ
휉
xi
O
표
omicron
Π
휋
pi
P
휌
rho
Σ
휎
sigma
T
휏
tau
Υ
휐
upsilon
Φ
휑
phi
X
휒
chi
Ψ
휓
psi
Ω
휔
omega
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
427

428
ALPHABETS
English Alphabet in the Fraktur Font
Upper
Lower
Name
프
픞
A
픅
픟
B
ℭ
픠
C
픇
픡
D
픈
픢
E
픉
픣
F
픊
픤
G
ℌ
픥
H
ℑ
픦
I
픍
픧
J
픎
픨
K
픏
픩
L
픐
픪
M
Upper
Lower
Name
픑
픫
N
픒
픬
O
픓
픭
P
픔
픮
Q
ℜ
픯
R
픖
픰
S
픗
픱
T
픘
픲
U
픙
픳
V
픚
픴
W
픛
픵
X
픜
픶
Y
ℨ
픷
Z

REFERENCES
Aristotle (1984).
The Complete Works of Aristotle, ed. J. Barnes. Princeton, NJ: Princeton
University Press.
Boole, G. (1847). The Mathematical Analysis of Logic : Being an Essay Towards a Calculus of
Deductive Reasoning. Cambridge, UK: Macmillan, Barclay, & Macmillan.
Boole, G. (1854). An Investigation of the Laws of Thought, on Which Are Founded the Mathe-
matical Theories of Logic and Probabilities. London: Walton and Maberly.
Boyer, C. B. and U. C. Merzbach (1991). A History of Mathematics (2nd ed.). New York: John
Wiley & Sons, Inc.
Burali-Forti, C. (1897). Una questione sui numeri transﬁniti. Rendiconti del Circolo Matematico
di Palermo 11(1), 154–164.
Cantor, G. (1874). Ueber eine Eigenschaft des Inbegriﬀs aller reellen algebraischen Zahlen.
Journal Fur Die Reine Und Angewandte Mathematik 77, 258–262.
Cantor, G. (1888). Mitteilungen zur Lehre vom Transﬁniten. Zeitschrift für Philosophie und
philosophische Kritik 91, 81–125.
Cantor, G. (1891). Über eine elementare Frage def Mannigfaltigkeitslehre. Jahresbericht der
Deutschen Mathematiker-Vereinigung 1, 75–78.
Cantor, G. (1932). Gesammelte Abhandlungen mathematischen und philosophischen Inhalts.
Berlin: Springer-Verlag.
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
429

430
REFERENCES
Chang, C. C. and H. J. Keisler (1990). Model Theory (3rd ed.). Studies in Logic and the Foun-
dations of Mathematics. Amsterdam: North Holland.
Church, A. (1956). Introduction to Mathematical Logic. Princeton, NJ: Princeton University
Press.
Ciesielski, K. (1997). Set Theory for the Working Mathematician. London Mathematical Society
Student Texts. Cambridge, UK: Cambridge University Press.
Cohen, P. J. (1963). The independence of the continuum hypothesis. Proceedings of the National
Academy of Sciences of the United States of America 50(6), 1143–1148.
Copi, I. M. (1979). Symbolic Logic (5th ed.). New York: Macmillan Publishing.
Dauben, J. W. (1979). George Cantor: His Mathematics and Philosophy of the Inﬁnite. Prince-
ton, NJ: Princeton University Press.
De Morgan, A. (1847). Formal Logic: or, the Calculus of Inference, Necessary and Probable.
London: Taylor and Walton.
Dedekind, R. (1893). Was sind und was sollen die Zahlen? Braunschweig: F. Vieweg.
Dedekind, R. (1901). Essays on the Theory of Numbers, trans. W. W. Beman. Chicago: Open
Court.
Descartes, R. (1985). The Philosophical Writings of Descartes, eds. J. Cottingham, R. Stoothoﬀ,
and D. Murdoch. Cambridge, UK: Cambridge University Press.
Doets, K. (1996). Basic Model Theory. Stanford: CSLI Publications.
Drake, F. R. (1974). Set Theory: An Introduction to Large Cardinals, Volume 76 of Studies in
Logic and Foundations of Mathematics. Amsterdam: North-Holland.
Ebbinghaus, H., J. Flum, and W. Thomas (1984). Mathematical Logic. Undergraduate Texts in
Mathematics. New York: Springer-Verlag.
Ebbinghaus, H. and V. Peckhaus (2007). Ernst Zermelo: An Approach to His Life and Work.
Berlin: Springer.
Eklof, P. C. (1976). Whitehead’s problem is undecidable. American Mathematical Monthly 83,
775–788.
Eklof, P. C. and A. H. Mekler (2002). Almost Free Modules: Set-theoretic Methods (revised ed.).
Amsterdam: North-Holland.
Enderton, H. B. (1977). Elements of Set Theory. San Diego: Academic Press.
Euclid (1925). The Elements, ed. T. Heath. Reprint, New York: Dover, 1956.
Ewald, W. B. (2007). From Kant to Hilbert: A Source Book in the Foundations of Mathematics.
Oxford: Oxford University Press.
Fibonacci and L. E. Sigler (2002). Fibonacci’s Liber Abaci: A Translation into Modern English of
Leonardo Pisano’s Book of Calculuation. Sources and Studies in the History of Mathematics
and Physical Sciences. New York: Springer.
Fraenkel, A. A. (1922). Zu den Grundlagen der Cantor-Zermeloschen Mengenlehre. Mathema-
tische Annalen 86, 230–237.
Fraleigh, J. B. (1999). A First Course in Abstract Algebra (6th ed.). Reading, MA: Addison-
Wesley.
Frege, G. (1879). Begriﬀsschrift, Eine Der Arithmetischen Nachgebildete Formelsprache Des
Reinen Denkens. Halle a/S.

REFERENCES
431
Frege, G. (1884). Die Grundlagen Der Arithmetik: Eine Logisch Mathematische Untersuchung
Über Den BegriﬀDer Zahl. Breslau: W. Koebner.
Frege, G. (1893). Grundgesetze Der Arithmetik : Begriﬀsschriftlich Abgeleitet. Jena: H. Pohle.
Gödel, K. (1929). Über die Vollständigkeit des Logikkalküls. Ph. D. thesis, University of Vienna.
Gödel, K. (1930). Die Vollständigkeit der Axiome des logischen Functionenkalküls. Monat-
shefte für Mathematik und Physik 37, 349–360.
Gödel, K. (1931). Über formal unentscheidbare Sätze der Principia Mathematica und verwandter
Systeme, I. Monatshefte für Mathematik und Physik 38, 173–198.
Gödel, K. (1940). Consistency of the Continuum Hypothesis. Princeton, NJ: Princeton University
Press.
Halmos, P. R. (1960). Naive Set Theory. New York: Springer-Verlag.
Henkin, L. (1949). The Completeness of Formal Systems. Ph. D. thesis, Princeton University,
Princeton, NJ.
Herrlich, H. (2006). Axiom of Choice. Lecture Notes in Mathematics. Berlin: Springer.
Hilbert, D. (1899). Grundlagen der Geometrie. Leipzig: Teubner.
Hilbert, D. (1902). Mathematical problems, trans. M. F. W. Newson. Bulletin of the American
Mathematical Society 8, 437–479.
Hodges, W. (1993). Model Theory. Encyclopedia of Mathematics and its Applications. Cam-
bridge, U.K.: Cambridge University Press.
Hofstadter, D. R. (1989). Gödel, Escher, Bach: an Eternal Golden Braid. Reprint, New York:
Vintage Books.
Jech, T. (1973). The Axiom of Choice, Volume 75 of Studies in Logic and the Foundations of
Mathematics. Amsterdam: North-Holland.
Jech, T. (2003). Set Theory: The Third Millennium Edition. Springer Monographs in Mathe-
matics. Berlin: Springer.
Jensen, R. B. (1972). The ﬁne structure of the constructible hierarchy. Annals of Mathematical
Logic 4(3), 229–308.
Kaye, R. (1991). Models of Peano Arithmetic, eds. D. S. Angus Macintyre, John Shepherdson.
Oxford, UK: Clarendon Press.
Kline, M. (1972). Mathematical Thought from Ancient to Modern Times. New York: Oxford
University Press.
Kneale, W. and M. Kneale (1964). The Development of Logic. Oxford, UK: Clarendon Press.
König, J. (1905). Zum Kontinuum-problem. Mathematische Annalen 60(2), 177–180.
König, J. (1906). Sur la théorie des ensembles. Comptes rendus hebdomadaires des séances de
l’Académie des sciences 143, 110–112.
Kunen, K. (1990). Set Theory: An Introduction to Independence Proofs, Volume 102 of Studies
in Logic and the Foundations of Mathematics. Amsterdam: North-Holland.
Kuratowski, K. (1921). Sur la notion de l’order dans la théorie des ensembles. Fundamenta
Mathematicae 2, 161–171.
Kuratowski, K. (1922). Sur l’opération a de l’analysis situs. Fundamenta Mathematicae 3, 182–
199.

432
REFERENCES
Leary, C. C. (2000). A Friendly Introduction to Mathematical Logic. Upper Saddle River, NJ:
Prentice Hall.
Leibniz, G. W. (1666). Dissertatio de arte combinatoria, in qua ex arithmeticae fundamentis
complicationum ac transpositionum doctrina novis praeceptis extruitur, & usus ambarum per
universum scientiarum orbem ostenditur; nova etiam artis meditandi, seu logicae inventionis
semina sparguntur. Lipsiae, apud Joh. Simon Fickium et Joh. Polycarp. Seuboldum, Literis
Spörelianis.
Levy, A. (1979). Basic Set Theory. Perspectives in Mathematical Logic. Berlin: Springer-Verlag.
Löwenheim, L. (1915). Über Möglichkeiten im Relativkalkül. Mathematische Annalen 76(4),
447–470.
Łukasiewicz, J. (1930). Elementy logiki matematycznej. Warsaw: s.n.
Łukasiewicz, J. (1951). Aristotle’s Syllogistic From the Standpoint of Modern Formal Logic.
Oxford, UK: Clarendon Press.
Mal’tsev, A. I. (1936). Untersuchungen aus dem Gebiete der mathematischen Logik. Matem-
aticheskii Sbornik 1(43), 323–336.
Martin, D. A. and R. M. Solovay (1970). Internal Cohen extensions. Annals of Mathematical
Logic 2(2), 143–178.
Mirimanoﬀ, D. (1917). Les antinomies de Russel et de Burali-Forti et le problème fondamental
de la théorie des ensembles. L’Enseignement Mathématique 19, 37–52.
Pascal, B. (1665). Traité du triangle arithmetique, avec quelques autres petits traitez sur la
mesme matrière. Paris: chez G. Desprez.
Peano, G. (1889).
Arithmetices principia: nova methodo.
Augustae Taurinorum [Torino]:
Fratres Bocca.
Reid, C. (1996). Hilbert. New York: Copernicus.
Rosen, K. H. (1993). Elementary Number Theory and Its Applications (3rd ed.). Reading, MA:
Addison-Wesley.
Rubin, H. and J. E. Rubin (1985). Equivalents of the Axiom of Choice, II, Volume 116 of Studies
in Logic and the Foundations of Mathematics. Amsterdam: North-Holland.
Rubin, J. E. (1973). The compactness theorem in mathematical logic. Mathematics Maga-
zine 46(5), 261–265.
Shelah, S. (1974). Inﬁnite abelian groups, Whitehead problem and some constructions. Isreal
Journal of Mathematics 18(3), 243–256.
Skolem, T. (1922). Einige Bemerkungen zur axiomatischen Begründung der Mengenlehre. In
Proceedings of the 5th Scandinavian Mathematicians’ Congress in Helsinki, pp. 217–32.
Suppes, P. (1972). Axiomatic Set Theory. New York: Dover Publications.
Tarski, A. (1935). Der wahrheitsbegriﬀin den formalisierten sprachen. Studia Philosophica 1,
261–405.
Tarski, A. (1983). Logic, Semantics, Metamathematics: Papers from 1923 to 1938, trans. J. H.
Woodger. Indianapolis: Hackett Publishing Company.
Tarski, A. and R. L. Vaught (1957). Arithmetical extensions of relational systems. Compositio
Mathematica 13, 81–102.
van Dalen, D. (1994). Logic and Structure (3rd ed.). Berlin: Springer-Verlag.

REFERENCES
433
van Dalen, D., H. C. Doets, and H. de Swart (1978). Sets: Naive, Axiomatic and Applied, Volume
106 of International Series in Pure and Applied Mathematics. Oxford, UK: Pergamon Press.
Van Heijenoort, J. (1971). Frege and Gödel: Two Fundamental Texts in Mathematical Logic.
Cambridge MA: Harvard University Press.
Van Heijenoort, J. (1977). From Frege to Gödel: A Source Book in Mathematical Logic, 1879–
1931. Source Books in History of Sciences. Cambridge, MA: Harvard University Press.
Venn, J. (1894). Symbolic Logic (2nd ed.). London: Macmillan.
von Neumann, J. (1923). Zur Einführung der transﬁniten Zahlen. Acta literarum ac scien-
tiarum Regiae Universitatis Hungaricae Francisco-Josephinae, Sectio scientiarum mathe-
maticarum 1, 199–208.
von Neumann, J. (1928). Über die Deﬁnition durch transﬁnite Induktion und verwandte Fragen
der allgemeinen Mengenlehre. Mathematische Annalen 99, 373–391.
von Neumann, J. (1929). Über eine Widerspruchsfreiheitsfrage der axiomatischen Mengenlehre.
Journal für die reine und angewandte Mathematik 160, 227–241.
Whitehead, A. N. and B. Russell (1910). Principia Mathematica (2nd ed.). Cambridge, UK:
Cambridge University Press.
Whitehead, J. H. C. (1950). Simple homotopy types. American Journal of Mathematics 72(1),
1–57.
Wussing, H. (1984). The Genesis of the Abstract Group Concept, ed. H. Grant, trans. A. Shen-
itzer. Cambridge, MA: MIT Press.
Zermelo, E. (1908). Untersuchungen über die grundlagen der mengenlehre. Mathematische
Annalen 65, 261–281.
Zermelo, E. (1930). Über Grenzzahlen und Mengenbereiche. Neue Untersuchungen über die
Grundlagen der Mengenlehre. Fundamenta mathematicae 16, 29–47.
Zorn, M. (1935). A remark on method in transﬁnite algebra. Bulletin of the American Mathe-
matical Society 41, 667–670.


INDEX
Abel, Niels, 342
Abelian group, 342
Absolute value, 116
Abstraction, 122
Addition, inference rule, 25
Addition, matrix, 355
Additive identity, 199, 412
Additive inverse, 199
Aleph, 313
Algebraic, 315
Alphabet, 5
ﬁrst-order, 68
second-order, 73
And, 4
Antecedent, 4
Antichain, 183
Antisymmetric, 177
Arbitrary, 88
Argument form, 21
Assignment, 7
Associative, 34, 139, 199, 412
Assumption, 46
Asymmetric, 177
Atom, 3, 6
Automorphism, 380
Axiom scheme, 228
Axiom(s), 24
choice, 231, 235
empty set, 227
equality, 226
extensionality, 227
foundation, 234
Frege–Łukasiewicz, 24
group, 340
paring, 228
power set, 228
regularity, 234
replacement, 230
ring, 353
separation, 228
subset, 229
union, 228
Zermelo, 231
Axiomatizable, ﬁnitely, 409
Basis case, 258
Bernstein, Felix, 301
Beth, 316
Biconditional, 5
Biconditional proof, 107
A First Course in Mathematical Logic and Set Theory, First Edition. Michael L. O’Leary.
© 2016 John Wiley & Sons, Inc. Published 2016 by John Wiley & Sons, Inc.
435

436
INDEX
Bijection, 211
Binary, 68
function, 189
operation, 198
relation, 161
Binomial coeﬃcient, 263
Binomial theorem, 263
Boole, George, 117
Bound
lower, 181
upper, 180
Bound occurrence, 77
Burali-Forti paradox, 297
Burali-Forti theorem, 292
Cancellation, 248, 256, 414
Candidate, 99
Cantor–Schröder–Bernstein theorem, 301
Cantor, Georg, 117, 226, 229, 303, 313
Cardinal, 307
large, 332
limit, 314
regular, 328
singular, 328
strongly inaccessible, 332
successor, 314
weakly inaccessible, 331
Cardinality, 308
Cartesian 푛-space, 131
Cartesian plane, 130
Cartesian product, 130
Cases, 112
Chain, 182
elementary, 394
of structures, 372
Characteristic function, 304
Choice axiom, 231, 235
Choice function, 231
Class, 420
Class (relation), 171
Closed, 198
Closed interval, 120
Closed under deductions, 409
Codomain, 190
Coﬁnal, 328
Coﬁnality, 328
Cohen, Paul, 424
Coincidence, 349
Combinatorics, 260
Common divisor, 140
Commutative, 34, 139, 199, 412
Commutative ring, 354
Compactness theorem, 52, 415
Comparable, 181
Compatible, 183
Complement, 128
Complete, 56, 398
Complete theory, 423
Completeness theorem, 61, 407
Gödel’s, 407
Completeness, real numbers, 275
Complex number, 281
Composite number, 107
Composition, 163, 195
Compound, 4, 6
Concatenation, 178
Conclusion, 22, 26
Conditional, 4
Conditional proof, 45
Congruent, 170
Conjunct, 4
Conjunction, 4
Conjunction, inference rule, 25
Connective, 6
Consequence, 22, 346, 352
Consequent, 4
Consistency, relative, 407
Consistent, 52, 395
maximally, 53, 396
Constant symbol, 68
Constructive dilemma, 25
Contingency, 16
Continuous, 94
Continuum hypothesis, 313
generalized, 314
Contradiction, 16
Contradiction, proof by, 47
Contrapositive, 32, 103
Contrapositive law, 34
Converse, 32
Coordinates, 130
Coordinatewise, 356
Copy, 214
Corollary, 20
Corresponding occurrences, 77
Countable, 310
Counterexample, 102
Cyclic group, 363, 365
De Morgan, Augustus, 117
De Morgan’s laws, 35, 137, 139
Decreasing, 184, 203
Dedekind cut, 276
Dedekind, Richard, 229, 276
Deduce, 26
Deduction, 20
Deduction theorem, 42
Deductive logic, 2
Dense, 257
Denumerable, 310

INDEX
437
Descartes, René, 117
Destructive dilemma, 25
Diagonalization, 303
Diamond principle, 424
Direct existential proof, 99
Direct proof, 45
Discrete, 310
Disjoint, 127, 155
pairwise, 155
Disjunct, 4
Disjunction, 4
Disjunctive normal form, 38
Disjunctive syllogism, 25
Distributive, 34, 139, 246, 323, 412
left, 320
Divides, 98
Divisible, 98
Division algorithm, 185
polynomial, 110
Division ring, 357
Divisor, 98
common, 140
zero, 356
Domain, 162, 334
Dominate, 300
Double negation, 35
Downward closed, 274
Downward Löwenheim–Skolem theorem, 415
Element, 117
Elementary chain, 394
Elementary equivalent, 387
Elementary extension, 389
Elementary substructure, 389
Embedding, 214
Empty set, 118, 141, 227
Empty set axiom, 227
Empty string, 6
Endpoint, 120
Equal, 118
Equality, 194
Equality axioms, 226
Equality symbol, 68
Equinumerous, 298
Equivalence class, 171
Equivalence relation, 169
induced, 175
Equivalence rule, 110
Equivalence, logical, 31, 348
Equivalent
elementary, 387
pairwise, 109
Euclid, 19, 107, 265
Euclid’s lemma, 265
Evaluation map, 193
Even integer, 98
Excluded middle, 37
Exclusive or, 11
Existence, 104
Existential formula, 72
Existential generalization, 91
Existential instantiation, 91
Existential proof, 99, 106
Existential proposition, 65
Existential quantiﬁer, 65
Expansion, 352
Exponentiation, 249, 321, 322
Exportation, 35
Extension, 197, 361
elementary, 389
Extensionality axiom, 227
Factor, 98, 110
Factorial, 242
False, 3
Family of sets, 148
Fibonacci, 268
Fibonacci number, 269
Fibonacci sequence, 269
generalized, 273
Field, 357
ordered, 69, 425
Field theory, 69
Finite, 308
hereditarily, 417
Finitely axiomatizable, 409
First-order
alphabet, 68
formula, 73
language, 73
logic, 96
Formal proof, 26
Formation sequence, 7
Formula, 71, 72
ﬁrst-order, 73
second-order, 73
Foundation axiom, 234
Fraenkel, Abraham, 229
Fraktur, 334, 428
Free occurrence, 77
Free variable, 78
Frege, Gottlob, 24, 117
Function, 189
bijection, 211
binary, 189
characteristic, 304
choice, 231
continuous, 94
decreasing, 203
embedding, 214

438
INDEX
evaluation, 193
greatest integer, 192
homomorphism, 375
identity, 191
inclusion, 203
increasing, 203
injection, 206
inverse, 204
invertible, 204
isomorphism, 382
one-to-one, 206
one-to-one correspondence, 211
onto, 208
order-preserving, 212
periodic, 203
projection, 210
real-valued, 193
surjection, 208
unary, 189
uniformly continuous, 94
zero, 376
Function equality, 194
Function notation, 190
Function symbol, 68
Fundamental homomorphism theorem, 383
Fundamental theorem of arithmetic, 271
Galois, Évariste, 342
General linear group, 345
Generalization, 85
existential, 91
universal, 88
Generalized continuum hypothesis, 314
Generalized Fibonacci sequence, 273
Generator, 363, 370
Gödel, Kurt, 399, 407, 414, 423
Gödel’s completeness theorem, 407
Gödel’s incompleteness theorems, 423
Golden ratio, 271
Grammar, 6
Greatest common divisor, 140
Greatest element, 180
Greatest integer function, 192
Greatest lower bound, 181
Grounded, 419
Group, 342
abelian, 342
cyclic, 363
general linear, 345
Klein-4, 344
simple, 363
Group axioms, 340
Group theory, 69
Grouping symbol, 6
Half-open interval, 120
Hartogs’ function, 327
Hartogs’ theorem, 293
Hausdorﬀmaximal principle, 237
Henkin, Leon, 399
Henkin’s theorem, 406
Hereditarily ﬁnite sets, 417
Hereditary set, 235
Hierarchy, von Neumann, 417
Hilbert, David, 226, 408
Hilbert’s problems, 408
Homomorphism, 375
group, 375
ring, 375
Hypothetical syllogism, 25
Ideal, 368
improper, 368
left, 368
maximal, 374
prime, 374
principal, 370
principal left, 370
proper, 368
right, 368
Idempotent laws, 139
Identity, 162, 199
additive, 199
multiplicative, 199
Identity map, 191
Image, 190, 208, 216
Implication, 4
Improper ideal, 368
Improper subgroup, 363
Improper subring, 366
Improper subset, 136
Inaccessible cardinal, 331
Inclusion map, 203
Inclusive or, 11
Incomparable, 181
Incompatible, 183
Incomplete theory, 423
Incompleteness theorems, 423
Inconsistent, 52, 395
Increasing, 184, 203
Independent, 408
Index, 148
Index set, 148
Indexed, 149
Indirect existential proof, 106
Indirect proof, 47
Induced equivalence relation, 175
Induced partition, 174
Induction
mathematical, 257

INDEX
439
on formulas, 336
on propositional forms, 59
on terms, 335
strong, 268
transﬁnite, 283, 291
Induction hypothesis, 59, 258
Induction step, 258
Inductive logic, 1
Inductive set, 238
Infer, 24
Inference, 24
Inference rule, 25
Inﬁnite, 308, 344
Inﬁnity axiom, 227
Inﬁnity symbol, 120
Initial number, 327
Initial segment, 274
proper, 274
Injection, 206
Instantiation, 85
existential, 91
universal, 87
Integers, 250
Integral domain, 356
International Congress of Mathematicians, 408
Interpretation, 335
Intersection, 126, 152
Interval, 120
Interval notation, 120
Introduction, 97
Invalid
semantically, 21
syntactically, 21
Inverse, 166, 199
additive, 199
function, 204
image, 216
left, 215
multiplicative, 199
right, 216
Inverse image, 216
Inverse relation, 166
Inverse statement, 37
Invertible function, 204
Invertible matrix, 345
Irrational number, 128, 276
Irreﬂexive, 177
Isomorphic, 212, 344, 380, 382
Isomorphism, 212, 380
group, 382
ring, 382
Kernel, 379
Klein-4 group, 344, 363
König, Julius, 301, 330
König’s theorem, 330
Kuratowski, Kazimierz, 130, 232, 237
Language, 73
ﬁrst order, 73
Large cardinal, 332
Law of noncontradiction, 37
Law of the excluded middle, 37
Least element, 180
Least upper bound, 180
Left distributive, 320
Left ideal, 368
Left inverse, 215
Left zero divisor, 356
Leibniz, Gottfried, 117
Lemma, 20
Leonardo of Pisa, 268
Lexicographical order, 187
Liber abaci, 268
Limit cardinal, 314
Limit ordinal, 290
Lindenbaum’s theorem, 397
Linear combination, 186
Linear order, 182
Linearly ordered set, 182
Logic, 1
deductive, 2
ﬁrst-order, 96
inductive, 1
mathematical, 2
propositional, 20
second-order, 96
Logic symbol, 67
Logical implication, 21
Logical system, 20
Logically equivalent, 31, 348
Löwenheim, Leopold, 415
Löwenheim’s theorem, 416
Löwenheim–Skolem theorem
downward, 415
upward, 416
Lower bound, 181
greatest, 181
Łukasiewicz, Jan, 24, 71
Mal’tsev, Anatolij, 414
Map, 190
Martin’s axiom, 424
Material equivalence, 13, 35
Material implication, 12, 35
Mathematical induction, 257
strong, 268
Mathematical logic, 2
Mathematics, 1
Mathesis universalis, 117

440
INDEX
Matrix, 345
identity, 345
invertible, 345
zero, 355
Matrix addition, 355
Matrix multiplication, 345
Maximal element, 181
Maximal ideal, 374
Maximally consistent, 53, 396
Meaning, 334
Metatheory, 96
Minimal element, 181
Mirimanoﬀ, Dmitry, 229, 234
Model, 338, 339
Modern square of opposition, 86
Modulo, 170, 172
Modus ponens, 25
Modus tolens, 25
Multiple, 98
Multiplication, matrix, 345
Multiplicative identity, 199, 412
Multiplicative inverse, 176, 199
Mutually exclusive, 127
푁-ary, 68, 161, 189
Name, 334
Natural number, 238
Necessary, 4, 109
Negated, 4
Negation, 4
Niece, 64, 161
Noncontradiction law, 37
Nonstandard model, 411
Norway, 342
Number, 256
standard, 411
Number theory, 69
Occurrence, 65
Odd integer, 98
One-to-one correspondence, 211
One-to-one function, 206
Onto function, 208
Open interval, 120
Operation, binary, 198
associative, 199
commutative, 199
Operation, set, 126
Or, 4
exclusive, 11
inclusive, 11
Order, 344
increasing, 184
lexicographical, 187
linear, 182
partial, 178
well, 183
Order isomorphism, 212
Order of connectives, 8, 9
Order of operations, 132
Order type, 212, 292
Order-preserving, 212
Ordered 푛-tuple, 131
Ordered ﬁeld, 69, 425
Ordered pair, 130
Ordinal, 286
limit, 290
successor, 290
Ordinal number, 286
Pairing axiom, 228
Pairwise disjoint, 155
Pairwise equivalent, 109
Paragraph proof, 97
Parsing tree, 6
Partial order, 178
Partially ordered set, 178
Particular, 88
Partition, 173
induced, 174
Pascal’s identity, 263
Peano arithmetic, 69, 411
Peano axioms, 410
Peano, Giuseppe, 410
Periodic, 203
Permutation, 260
Pigeonhole principle, 309
Polynomial division algorithm, 110
Poset, 178
Positive form, 86
Postulate, 20
Power, 415
Power set, 151
Power set axiom, 228
Pre-image, 190
Predecessor, 237
Predicate, 64, 65
Preﬁx notation, 71
Premise, 22, 26
Prenex normal form, 96
Preserves, 212, 375
Prime ideal, 374
Prime number, 107
Prime power decomposition, 272
Principal ideal, 370
left, 370
Principal ideal domain, 372
Projection, 210
Proof methods
biconditional, 107

INDEX
441
biconditional, short rule, 108
cases, 112
conditional, 45
contradiction, 47
counterexample, 102
direct, 45
disjunctions, 111
equivalence rule, 110
existence, 104
existential, direct, 99
existential, indirect, 106
indirect, 47
reductio ad absurdum, 47
relative consistency, 407
uniqueness, 104
universal, 98
Proof, formal, 26
Proof, paragraph, 97
Proof, two-column, 27
Proper ideal, 368
Proper initial segment, 274
Proper subgroup, 364
Proper subring, 366
Proper subset, 136
Proposition, 3
compound, 4
universal, 66
Proposition alphabet, 5
Propositional form, 6
Propositional logic, 20
Propositional variable, 6
Prove, 26
Pure set, 235
Purely relational, 337
Quantiﬁer, 65, 66
Quantiﬁer negation, 86
Quantiﬁer symbol, 68
Quotient, 110, 185
Quotient set, 172
Range, 162, 208
Rational numbers, 254
Ray, 120
Real number, 276
Real-valued function, 193
Recursion, 242
transﬁnite, 294
Recursive deﬁnition, 6, 242
Reduct, 352
Reductio ad absurdum, 47
Reﬂexive, 169
Regular cardinal, 328
Regularity axiom, 234
Relation, 161
antisymmetric, 177
asymmetric, 177
binary, 161
inverse, 166
irreﬂexive, 177
reﬂexive, 169
symmetric, 169
transitive, 169
unary, 161
Relation on, 161
Relation symbol, 68
Relative consistency, 407
Remainder, 110, 185
Replacement axiom, 230
Replacement rule, 34
Restriction, 197
Right ideal, 368
Right inverse, 216
Right zero divisor, 356
Ring, 354
commutative, 354
division, 357
ﬁeld, 357
integral domain, 356
principal ideal domain, 372
skew ﬁeld, 357
with unity, 354
Ring axioms, 353
Ring theory, 69
Roster, 118
Roster method, 118
Russell’s paradox, 225
Russell, Bertrand, 225
Satisﬁable, 340, 352
Satisfy, 65, 338, 339
Scheme, axiom, 228
Schröder, Ernst, 301
Scope, 77
Second-order
alphabet, 73
formula, 73
Second-order logic, 96
Selector, 231
Self-evident, 24
Semantically invalid, 21
Semantically valid, 21, 22
Semantics, 21
Sentence, 83
Separation axioms, 228
Set, 117
hereditary, 235
Set diﬀerence, 127
Set operation, 126
Set theory, 68

442
INDEX
Short rule of biconditional proof, 108
Signature, 334
Simple group, 363
Simpliﬁcation, 25
Simultaneous substitution, 81
Singleton, 118
Singular cardinal, 328
Skew ﬁeld, 357
Skolem’s theorem, 416
Skolem, Thoralf, 229, 234, 415
Sound, 56, 57, 398
Soundness theorem, 57, 398
Square of opposition, modern, 86
Standard model, 411
Standard number, 411
String, 5
Strong induction, 268
Strongly inaccessible, 332
Structure, 333
pureley relational, 337
Subgroup, 363
improper, 363
proper, 364
trivial, 363
Subject, 64
Subproof, 46
Subring, 366
improper, 366
proper, 366
trivial, 366
Subset, 135
Subset axioms, 229
Substitution, 64, 75, 78
simultaneous, 81
Substructure, 361
elementary, 389
Successor, 237
Successor cardinal, 314
Successor ordinal, 290
Suﬃcient, 4, 109
Surjection, 208
Symmetric, 169
Symmetric closure, 177
Symmetric diﬀerence, 236
Syntactically invalid, 21
Syntactically valid, 21, 27
Syntax, 23
Tarski, Alfred, 336, 415
Tarski–Vaught theorem, 390
Tautology, 16
Tautology rule, 35
Term, 70
Theorem, 20, 27
Theory, 395
Theory symbol, 68
Tower, 233
Transcendental, 315
Transﬁnite induction, 283, 291
Transﬁnite recursion, 294
Transitive, 169
Transitive closure, 419
Transitive set, 239
Trichotomy, 183, 288
weak, 179
Trichotomy law, 183
Trivial subgroup, 363
Trivial subring, 366
True, 3
Truth table, 11
Truth value, 3
Two-column proof, 27
Unary, 68
function, 189
relation, 161
Undecidable, 313
Undeﬁned, 190
Uniformly continuous, 94
Union, 126, 151
Union axiom, 228
Unique, 104
Unique factorization theorem, 271
Unit, 357
Unity, 354
Universal formula, 72
Universal generalization, 88
Universal instantiation, 87
Universal proof, 98
Universal proposition, 66
Universal quantiﬁer, 66
Universe, 97, 141
Upper bound, 180
least, 180
Upward Löwenheim–Skolem theorem, 416
Urelement, 417
Valid, 347
semantically, 21, 22
syntactically, 21, 27
Valuation, 10, 13
Valuation patterns, 15
Variable, 67
propositional, 6
Variable symbol, 67
Vaught, Robert, 336
Venn diagram, 127
Venn, John, 127
Vertical line test, 189
Von Neumann hierarchy, 417

INDEX
443
Von Neumann, John, 234, 238, 417
Weak-trichotomy law, 179
Weakly inaccessible, 331
Well-deﬁned, 191
Well-ordered set, 183
Well-ordering theorem, 293
Whitehead, John H. C., 424
Whitehead problem, 424
Witness, 91
Witness set, 399
Write, 23
Zermelo axioms, 235
Zermelo’s axiom, 231
Zermelo’s theorem, 295
Zermelo, Ernst, 225, 234, 293, 417
Zermelo–Fraenkel axioms, 235
Zero, 102, 110
Zero divisor, 356
left, 356
right, 356
Zero map, 376
Zero matrix, 355
Zorn’s lemma, 232
Zorn, Max, 232

WILEY END USER LICENSE AGREEMENT
Go to www.wiley.com/go/eula to access Wiley’s ebook EULA.

