The Complexity 
of Perfect Zero-Knowledge 
(e:xtended abstract) 
Lance Fortnow* 
MIT 
Math 
Dept.t 
Caxn’bridge, 
MA 02139 
Abstract 
A Perfect 
Zero-Knowledge 
interactive 
proof system 
convinces a verifier that a string is in a language 
without 
revealing 
any additional 
knowledge in an 
information-theoretic 
sense. We show that for any 
language that has a perfect zero-knowledge proof sy5 
tern, its complement has a short interactive 
proto- 
col. This result implies that there are not any perfect 
zero-knowledge protocols for NP-complete languages 
unless the polynomial 
time hierarchy collapses. This 
paper demonstrates that knowledge complexity 
can 
be used to show that a language is easy to prove. 
1 
Introduction 
Interactive, 
protocols 
and zero-knowledge, 
as de- 
scribed by Goldwasser, Micali and Rackoff [GMR], 
have in recent years proven themselves to be impor- 
tant models of computation 
in both complexity and 
cryptography. 
Interactive proof systems are a randomized exten- 
sion to NP which give us a greater understanding 
of 
what an infinitely 
powerful machine can prove to a 
probabilistic 
polynomial 
one. Recent results about 
interactive 
protocols have given us an idea of what 
languages may be efficiently provable in this way. 
*The 
author 
is supported 
in part 
by an Office 
of Naval 
Research 
fellowship, 
NSF 
Grant 
DCR-8602062 
and A.ir Force 
Grant 
AFOSR-880078. 
t Much 
of this 
work 
was done while 
the author 
was at the 
University 
of California 
at Berkeley. 
Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of 
the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To 
copy otherwise, or to republish, 
requires a fee and/or 
specfic 
permission. 
0 1987 ACM 0-89791-221-7/87/0006-0204 
75c 
Zero-knowledge interactive protocols give us a good 
way to determine which languages can be efficiently 
proven without giving away any details of the proof. 
This model consists of an infinitely 
powerful prover 
trying to convince a polynomial 
time verifier that a 
string is in a certain language. 
Zero-knowledge re- 
quires that the verifier not learn any information use- 
ful to him it8 a polytime 
machine. 
Goldreich, 
Mi- 
cali and W.igderson [GMW] show that if one way 
functions exist then all languages in NP have zero- 
knowledge proofs. However, their proof relies on the 
fact that the verifier has limited 
power and is un- 
able to invert these one-way functions. 
A stronger 
notion is that of perfect zero-knowledge(PZK) 
which 
requires that the verifier not learn any additional 
information 
no matter 
how powerful 
he may be. 
There are many languages not known to be in BPP 
or NPnco-NP, 
such as graph isomorphism [GMW], 
which have perfect zero-knowledge proof systems. 
Our main theorem says that for any language which 
has a perfect zero-knowledge protocol, 
its comple- 
ment has a single round interactive 
protocol. 
Thus 
PZKCco-AM, 
where AM is the class accepted by one- 
round Arthur-Merlin 
games described by Babai [B]. 
Our result holds in the weaker case where we only re- 
quire that the verifier which follows protocol will not 
learn any additional information. 
Combining our main theorem with a result of Bop- 
pana and Hastad [BH], we get that NP-complete lan- 
guages do not have perfect zero-knowledge proof sys- 
tems unless the polynomial 
time hierarchy collapses 
to the secon.d level. Thus it is unlikely that the result 
of [GMW] that NP has zero-knowledge proof systems 
will extend to perfect zero-knowledge. 
Our proof makes 
use 
of an approximate 
upper 
bound protocol that is of independent interest and 
that may be useful in completely different contexts. 
This is in contrast to an approximate 
lower bound 
protocol used in [S,B,GS]. 
The results in this paper do not depend on any 
unproven cryptographic 
assumptions. 
204 

2 
Notation 
and Definitions 
Let P be a probabilistic 
infinite power Turing ma- 
chine and V be a probabilistic 
polynomial time ma- 
chine that share the same input and can communicate 
with each other. Let P-V 
denote the interaction be- 
tween P and V. P-V(z) 
accepts if after the interac- 
tion, V accepts. V’s view of Ihe conversation 
between 
P and V consists of all the messages between P and 
V and the random coin tosses of V. 
P and V form an interactive protocol for a language 
L if: 
1. If z E L then Pr(P*V(z) 
accepts) > 1 - & 
for all polynomials p and 2: large enough. 
2. If z $! L then VP* Pr(P’wV(z) 
accepts) < & 
for all polynomials p and t large enough. 
Let IP be the class of all languages that are efi- 
ciently provable, i.e., accepted by an interactive pro- 
tocol. 
A roundof an interactive protocol is a message from 
the verifier to the prover followed by a message from 
the prover to the verifier. AM is the class of languages 
accepted by bounded round interactive protocols. 
The notation for describing protocols follows: 
P: 
P+V: 
v: 
V-P: 
These are computations performed by the 
prover that can not be seen by the verifier. 
The prover has probabilistic 
infinite 
time 
to make these computations. 
This is a message from the prover to the 
verifier. 
These are computations performed by the 
verifier that cannot be seen by the prover. 
These computations must be performed in 
probabilistic 
polynomial time. 
This is a message from the verifier to the 
prover. 
Let M be a simulator for a view of the conversation 
between P and V. Each run of M will produce: 
f,Pl,%~2,. 
. .Pk,ak 
where the oi are messages from the prover to the 
verifier at round i and the pi are messages from the 
verifier to the prover, and r is the random coin tosses 
of v. 
Let P H V[2] 
denote the distribution 
of views of 
conversations between P and V over the random coin 
tosses of P. M[z] denotes the distribution 
of views 
of conversations created by running M on x. 
Let A[;c] and B[z] be two distributions 
of strings. 
A[z] and B[z:] are stoWico/ly 
close if for any subset 
of strings S, 
for all polynomials q with I large enough. Let p be a 
probabilistic 
polynomial 
time machine that outputs 
either 0 or 1. A[z] and B[z] 
are poiyhme 
indis2in- 
guishable if for any p, 
for all polynomials r with z large enough. Note that 
if A[z] and B[z] are statistically 
close then they are 
polytime indistinguishable. 
P-V 
is Zero-Knowledge 
if for any V’ there is 
a Mv. 
such that (t/z E L)P-V*[z] 
and Mv-[z] 
are 
polytime indistinguishable. 
P-V 
is Perfect Zero-Knowledge(PZK) 
if for any 
V’ there is a Mv. 
such that (V2 E L)P c-+ V*[2] 
= 
Mv- 
[xl. 
P-V 
is Almost 
Perfect Zero-Knowledge(APZK) 
if 
for any V* there is a Mv. 
such that (V2 E L)P++ 
V’ [z] and Mv- [z] are statistically 
close. 
Interactive Protocols and Zero-Knowledge were in- 
troduced in [GMR]. Perfect Zero-Knowledge was de- 
scribed originally 
in [GMW]. 
The class AM was in- 
troduced by Babai [B] as the class of languages that 
have one round interactive protocol where V’s mes- 
sage consists exactly of his coin tosses. This was 
shown equivalent to the definition used above by [GS] 
and [B]. 
Note that ZKzAPZK>PZK. 
The inclusions are 
not known to be proper but this paper gives good 
evidence that ZKfAPZK. 
The results in this paper only require a weaker ver- 
sion of zero-knowledge: a simulator only need exist 
for the given P and V and not when the verifier 
cheats. 
For the rest of this paper we will assume 
we are in this weaker model and M 
= Mv 
is the 
simulator for P and V. 
E is used as a small number that will be determined 
in the final paper. 
3 
Related 
Results 
Goldwasser and Sipser [GS] have shown that for any 
language that has an interactive protocol in Q rounds, 
there is an Arthur-Merlin 
protocol in Q + 2 rounds 
for that language. Arthur-Merlin 
protocols are simi- 
lar to interactive protocols except that the verifier’s 
205 

messages are just 
random 
coin tosses. 
Babai 
[B] 
showed that any bounded 
round Arthur-Merlin 
pro- 
tocol is equivalent 
to a one round Arthur-Merlin 
pro- 
tocol. 
This 
is just our class AM. 
IBabai also shows 
that AMC 
NPR 
for a random oracle R and al.so that 
AM& 
II;. 
Mike Sipser pointed 
out that AM is con- 
tained in non-uniform 
NP. 
Boppana 
and Hastad 
[BH] 
show 
that 
if co-NP 
has bounded 
round interactive 
proofs then the whole 
polynomial 
time hierarchy 
would 
be in AM or thus 
PHC Hi and thus the polynomial 
time hierarchy 
col- 
lapses to the second level. 
Brassard 
and Crkpeau 
[BC] 
show perfect 
zero- 
knowledge for SAT using a different 
model for interac- 
tive protocols 
where the prover is a. polynom.ial 
time 
machine that knows a satisfying 
assignment. 
Our re- 
sult about perfect zeroknowledge 
relies on the ability 
of the prover to have infinite 
power .and thus does not 
apply to Brassard 
and Cr6peau’s 
model. 
4 
Showing 
Sets 
are 
Large 
and 
Small 
In this paper, we will need protocols 
to show sets are 
large and small. 
We do both using Carter-Wegman 
Universal 
Hash Functions 
[CW]. 
Suppose X = (0, 1) N is a set of strings and S c X. 
Let A be a random binary 
N x !J ma,trix. 
Let ,f : X + 
(0, l}! 
be the function 
defined by f(z) 
= AZ. Let fs 
be the restriction 
off 
to S. 
If ISI >> 2l then fs is likely 
to be onto most of 
(0, l)! 
and most elements 
of (0, l)bL will have many 
preimages. 
If IS] << 2l then the range of fs is a small subset 
of (0, 1)’ and most elements of fs (S) have only one 
inverse in S. 
If S is polynomial 
time checkable then we have the 
following 
protocol 
to show ISI >> 2”: 
V: Pick a random 
N x (e +, e) matrix 
A and 
y E (o,l)~+Y 
V+P: 
A,y 
P-+V: 
x E S such that f(x) 
= ,42 = y 
If S is not much larger than 2’ .then it is unlikely 
for there to be any z such that f(z) 
= y. However 
if S is large then there are likely 
to be many x so a 
prover should 
have no trouble 
exhibiting 
such an z 
that I/r can verify 
in polynomial 
time. 
If V has a random 
element 
s E S that 
is not 
known by P then the following 
protocol 
works. to show 
ISI -GE 2l: 
206 
V: Pick a random 
N x (e -’ c) matrix 
A. 
V+P: 
A, f(s) = As 
P+V: 
s 
If S is small then s is likely to be the only element 
of S that maps to f(s) thus P can find s. If S is large 
then many elements of S map to f(s),and 
because s 
is a random1 element of S, the prover will have no way 
of determining 
which element of S V has. 
Suppose we had two sets A, B C X and wanted 
to show th,at IAl >> IB]. 
If A was polynomial 
time 
checkable a.nd V has a random 
element b of 8, then 
this is a protocol 
to show IAl > JBI: 
P: Pick e such that 
IAl >> 2L >> IBI 
P-V: 
C! 
P-rV: 
Prove that IAl >> 2c as above 
P-V: 
l?rove that ]B] < 2l as above 
Using 
Carter-Wegman 
Hashing 
to show a set is 
large was mtroduced 
by Sipser [S] and used exten- 
sively 
in [S,B,GS]. 
To the author’s 
knowledge 
this 
paper is the first 
use of an interactive 
protocol 
to 
show a set is small. 
5 
Main 
Theorem 
We will start with 
a simple version of the theorem: 
Theorem 
1 Let L be a language with a perfect zero- 
knowledge 
interactive 
protocol. 
Then there ecists an 
interactive 
protocol 
accepting Z. 
5.1 
Structure 
of Proof 
We are given a prover and verifier 
(P and V) for the 
language L and a simulator 
M that produces views of 
conversations 
between P and V and the random coin 
tosses of V. Note one can simulate 
the computation 
of 
V in polynomial 
time, checking, for example, 
whether 
or not V accepts. 
On z E L, M produces 
a view 
of a conversation 
from exactly 
the same probability 
distribution 
as when P and V run on x. 
The key 
idea of the proof of the theorem 
is to notice what M 
might 
do on x $8 L. There is no requirement 
in the 
definition 
of perfect zero-knowledge 
on what M does 
on x $ L; Ihowever there are three possibilities: 
1. M 
will 
produce 
“garbage”, 
something 
that 
clearly 
is not a randomly 
selected 
member 
of 
P++V[z]. 

2. M will produce views of conversations 
that cause 
V to reject most of the time. 
3. M will produce a simulation 
that looks valid and 
causes V to accept, 
It may not be possible 
in 
polynomial 
time to tell this view from one cre- 
ated by P and V when x E L. However, M must 
be producing 
views of conversations 
from a dis- 
tribution 
quite different 
from the distribution 
of 
views between P and V, since in the real views 
V is likely 
to reject. 
We will create a new prover and verifier, 
P’ and V’ 
that will determine 
if one of the three cases occur. V’ 
will run M and get a view of a conversation 
between 
P and V and r, the random coin tosses of V. V’ will 
check that this view is valid and that V halts accept- 
ing. If the view fails this test then it falls in cases 1 or 
2 so V’ knows that z e L and V’ accepts. Otherwise 
V’ will send to P’ some initial 
segment of the conver- 
sation. P’ will then convince V’ that the conversation 
came from a bad distribution 
by “predicting” 
r better 
than P’ could have done from a good distribution. 
5.2 
Example: 
Graph 
Isomorphism 
Graph isomorphism 
is a well studied 
problem 
that is 
clearly 
in NP but not known to be in co-NP. A per- 
fect zero-knowledge 
proof of graph isomorphism 
was 
presented 
in [GMW]. 
We will 
show how the theo- 
rem converts this perfect zero-knowledge 
protocol 
to 
an interactive 
protocol 
for graph 
non-isomorphism. 
This protocol 
for graph non-isomorphism 
is identical 
to the graph non-isomorphism 
protocol 
described 
in 
[GMW]; 
our proof, however, shows that the similarity 
between the two protocols 
is not coincidental. 
Let ?r : (1,. . . , n} + 
{ 1,. . . , n} be a permutation 
of the vertices 
of a graph. 
For a graph G = (V, E) 
let (K(wI), r(m)) 
E r(E) 
+ (WI, ~2) E E. Let n(G) = 
wt +w* 
Two graphs Gr and Gs are isomorphic if there ex- 
ists a permutation 
7r such that ?r(Gr) = Gz. A perfect 
zero-knowledge 
protocol 
for graph isomorphism 
sug- 
gested by [GMW] 
works as follows: 
P: Generates random permutation 
?F and com- 
putes G = r(Gr) 
P--+V: G 
V-tP: 
i = 1 or 2 chosen at random 
P-V: 
?r’ chosen at random such that a’(Gi) 
= G 
If Gr E! Gs then G will be a permutation 
of both 
Gr and Gz and P will always be able to find a A’. If 
G1 p Gs then G cannot be a permutation 
of both Gr 
and G2 so at least half of the time V will choose an 
i such that no a’ exists. 
Thus we have an interactive 
protocol 
for graph isomorphism. 
This 
protocol 
also 
is perfect zero-knowledge. 
The simulator 
M works as follows: 
M 
generates 
r and i at random 
and computes 
G= 
r(Gi) 
then outputs 
the following 
view of a con- 
versation: 
r: i 
P-W/: G 
V-+P: i 
P+V: 
lr 
It is easy to verify 
that 
when G1 Y Gz, M pro- 
duces exactly 
the same distribution 
of views of con- 
versations 
as P and V. Notice 
what happens 
when 
Gr $? Gs. The output 
of M always causes V to ac- 
cept. Thus when Gr $! Gz, M must produce views of 
conversations 
from a very different 
distribution 
from 
what P and V produce. 
In fact whenever 
Gr p Gz, 
one can always predict 
r ‘= i from the G produced 
by M. 
This leads to a new interactive 
protocol 
be- 
tween a new prover and verifier, 
P’ and V’, for graph 
non-isomorphism 
as follows: 
V’: Generate 
?r and i at random 
and compute 
G = x(Gi) 
I/‘-P’: 
G 
P’+V’: 
i 
5.3 
The 
Protocol 
for z 
We are given a prover 
and verifier, 
P and V for a 
language L and a simulator 
M that exactly 
simulates 
views of conversations 
between P and V when z E L. 
A protocol 
between a new prover and verifier, 
P’ and 
V’, works as follows: 
V’: Run M and get r,prl 
or,. . ./?k, CQ. V’ now 
checks two things: 
1. Check that 
the conversation 
is valid, 
i.e., that r,cyr ,... ak will cause V to 
Say Ply.. 
-Pk. 
2. Check that the conversation 
causes V 
to accept. 
If either of these tests fail then V’ can be 
pretty 
sure that x $Z L so V’ quits now and 
accepts. Otherwise 
V’ continues. 
Let i=l. 
207 

V’+P’: 
pj , Qj 
P’-+V’: 
STOP 
and show ]7Zi 1 >> ]K?z] (as defined 
below) or 
TRY NEXT 
ROUND 
(P’ must say S.TOP 
after some CXj) 
Ri 
can be thought 
of as all the possible 
random 
strings of V after round j of the protocol. 
R:! are the 
possible random 
strings 
of V generated 
by M. 
More 
formally: 
Let ‘R be the set of all possible coin tosses of V. 
Let 721 = {R E R]R and (~1,. . . oj cause V to say 
A,* 
--Pj)- 
LetRz={RERIPr(MoutputsR,~ll,crl,...~~,aj 
part of a valid, accepting 
conversation]M 
produces 
A,% 
,***Pj,“j) 
L 
+I- 
Note that 7Zs C Ri 
and if 2 E L then Rz $3 Ri. 
Also note that 7Ei is independent 
of trj. 
Since Ri 
is polynomial 
time 
checkable 
and V’ 
knows a random 
element 
of R2, namely 
r, we can 
use the protocol 
outlined 
in section 4 to show 17211 >> 
I%l. 
5.4 
The 
Protocol 
Constitutes 
an 
Interactive 
Protocol 
for E 
To show that this is an interactive 
protocol 
for I:, we 
must show two things: 
1. If (z E z) 
th en P’ w V’(z) 
accepts with 
high 
probability. 
2. If (z 4 z) then VP p-V’(o) 
accepts with 
very 
low probability. 
We will 
prove the second statement 
first since it is 
the easier of the two to prove. 
2. Suppose t E L. Then M will produce 
views of 
conversations 
from exactly 
the same distribution 
as 
P and V. So virtually 
all conversations 
produced 
will 
be valid and cause V to accept. So after round j (for 
any j), r will be distributed 
about uniformly 
over the 
possible R’s that could have taken V this far. Thus, 
R2 M Ri 
so no @ will 
be able to convince 
V’ that 
I&l 
>> W2(. 
1. Suppose to the contrary 
that z $! L and the pro- 
tocol does not work. 
So R2 = RI at all rounds j with 
high probability. 
We use this to derive a contradic- 
tion by demonstrating 
that P++V is not an interactive 
proof system for L by presenting 
a prover P’ that will 
convince 
V (the original 
verifier) 
that r E L. 
At round j suppose the conversation 
so far has been 
/3{, ck{, . . . flj. P’ works as follows: 
P’: 
Run M which 
outputs 
r, PI, or,. . .&,a~. 
Check that 
this is a valid 
accepting 
con- 
versation. 
If 
not, 
try 
again. 
See if 
/?I,&, . ..flj 
= /?i,Ly: ,... pi. 
If not, 
try 
again. 
P*+V/: 
C2j 
At round 
j when P’ has a conversat:ion 
from M 
that matches the conversation 
so far, 721 is the set of 
possible random 
coin tosses of V. When P’ says oj 
then Rz is the set of coin tosses of V that 
will still 
keep V heading 
towards 
an accepting 
path. 
Since 
R2 
M 
Ri, 
this will 
happen 
with 
high 
probability. 
Even after a polynomial 
number 
of rounds, 
V still 
has a decent chance of accepting 
x. This cannot be 
since x $i! L and P-V 
is an interactive 
protocol 
for L. 
Note 
that 
P’ 
may require 
exponential 
expected 
time to complete 
its part of the protocol 
but in our 
model an infinitely 
powerful 
P’ is allowed. 
6 
Extensions 
and Corollaries 
Theorem 
2 Suppose P-V 
is an interaciiuc 
proiocol 
for a languaige L and there is a probabilistic polyno- 
mial time simulator M such that M[x] is statistically 
close to Pt+V[x]. 
Then there is a single round inter- 
active protocol for the complement of L. 
Proof 
This extends the main theorem 
in two ways. 
First, 
we do not require 
M[x] 
= Pc*V[x] just that 
they be statistically 
close. One can check the proof 
in the previous 
section and notice that statistically 
close is good enough. 
Second, we would like to get a single round protocol 
for the complement 
of L. Notice that in the protocol 
given above the number 
of rounds 
is dependent 
on 
when P’ decides to say STOP. To get bounded rounds 
we must make the following 
change to the protocol: 
V’: Run M k3 times independently 
and get k3 
views of conversations 
and check that each 
conversation 
is valid and accepting. 
V’-+P’: 
For 1 5 
i 5 k3 send the first 
i mod k 
rounds of the ith conversation. 
P’+V’: 
Pick any conversation 
j and show 17211 >> 
lU2] for the view of that conversation. 
It is not hard to verify 
that the above proof still 
works for this new protocol. 
Once we have bounded 
rounds we a.pply the theorems of [B,GS] which imply 
that all bounded 
round 
protocols 
can be made into 
single round protocols. 
208 

Some trivial corollaries that follow from results that 
are described in section 3: 
Corollary 
1 If L EAPZK 
then J5 EAM. 
Corollary 
2 If L EAPZK 
then L eco-NPR 
Enon- 
uniform 
co-NP where R is a random oracle. 
Corollary 
3 If any NP-complete 
language has an al- 
most perfect zero-knowledge 
interactive 
protocol 
then 
the polynomial 
time hierarchy 
collapses to the second 
level. 
Corollary 
4 If L and x 
both have almost perfect 
zero-knowledge 
interactive 
protocols with possibly un- 
bounded rounds then L E (NP~~co-NP)~ 
where R is a 
random oracle. 
Corollary 
5 If there are one-way functions 
and the 
polynomial 
time 
hierarchy 
does not 
collapse 
then 
NPEZh7 but NPgAPZK 
so ZK#APZK. 
7 
Open Problems 
There are several interesting problems remaining, in- 
cluding: 
l What 
is the relationship 
between PZK 
and 
APZK? 
l Are complement 
of perfect 
or almost 
per- 
fect zero-knowledge languages themselves perfect 
zero-knowledge in any sense? 
l 
Can the same techniques 
be used to show 
that any perfect zero-knowledge protocol has a 
bounded round interactive protocol? 
8 
Acknowledgements 
The author would like to express his gratitude to his 
advisor, Mike Sipser, for his support and encourage- 
ment. 
The author would also like to thank Mike, Sil- 
vio Micah, Oded Goldreich, Joan Feigenbaum, Paul 
Beame and Eric Schwabe for their useful comments 
on this paper. 
Also, the author would like to thank New York 
City-his 
birthplace, 
hometown and site of this, his 
first conference presentation. 
References 
PI 
[BHI 
WI 
PWI 
ww 
PMRI 
WI 
PI 
Babai, L., “Trading Group Theory for Ran- 
domness”, Proc. 17th STOC, 1985, pp. 421- 
429. 
Boppana, R. and J. Hastad, “Does co-NP 
Have Short Interactive Proofs?“, IPL, to ap- 
pear. 
Brassard, 
G. 
and 
C. Crkpeau, 
“Non- 
Transitive 
Transfer of Confidence: 
A Per- 
fect Zero-Knowledge Interactive Protocol for 
SAT and Beyond”, Proc. 27th FOCS, 1986, 
pp. 188-195. 
Carter, J.L. and M.N. 
Wegman, “Univer- 
sal Classes of Hash Functions”, 
JCSS 18 2, 
1979, pp.I43-154. 
Goldreich, O., S. Micali and A. Wigderson, 
“Proofs that Yield Nothing But their Va- 
lidity and a Methodology 
of Cryptographic 
Protocol Design”, 
Proc. 27th FOCS, 1986, 
pp. 174-187. 
Goldwasser, S., S. Micali and C. Rackoff, 
“The Knowledge Complexity 
of Interactive 
Proof-Systems”, Proc. 17th STOC, 1985, pp. 
291-304. 
Goldwasser, S. and M. Sipser, “Private Coins 
versus Public Coins in Interactive Proof Sys- 
tems”, Proc. 18th STOC, 1986, pp. 59-68. 
Sipser, M., “A Complexity 
Theoretic 
Ap- 
proach to Randomness”, Proc. 15th STOC, 
1983, pp. 330-335. 
209 

