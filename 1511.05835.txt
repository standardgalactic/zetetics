arXiv:1511.05835v4  [stat.ML]  19 Feb 2016
ALTERNATIVE MARKOV AND CAUSAL PROPERTIES FOR ACYCLIC
DIRECTED MIXED GRAPHS
JOSE M. PE˜NA
ADIT, IDA, LINK ¨OPING UNIVERSITY, SE-58183 LINK ¨OPING, SWEDEN
JOSE.M.PENA@LIU.SE
Abstract. We extend Andersson-Madigan-Perlman chain graphs by (i) relaxing the semidirected
acyclity constraint so that only directed cycles are forbidden, and (ii) allowing up to two edges
between any pair of nodes. We introduce global, and ordered local and pairwise Markov properties
for the new models. We show the equivalence of these properties for strictly positive probability
distributions. We also show that when the random variables are continuous, the new models can
be interpreted as systems of structural equations with correlated errors. This enables us to adapt
Pearl’s do-calculus to them. Finally, we describe an exact algorithm for learning the new models
from observational and interventional data via answer set programming.
1. Introduction
Chain graphs (CGs) are graphs with possibly directed and undirected edges but without semidi-
rected cycles. They have been extensively studied as a formalism to represent probabilistic indepen-
dence models, because they can model symmetric and asymmetric relationships between random
variables. Moreover, they are much more expressive than directed acyclic graphs (DAGs) and undi-
rected graphs (UGs) (Sonntag and Pe˜na, 2016). There are three diﬀerent interpretations of CGs as
independence models: The Lauritzen-Wermuth-Frydenberg (LWF) interpretation (Lauritzen, 1996),
the multivariate regression (MVR) interpretation (Cox and Wermuth, 1996), and the Andersson-
Madigan-Perlman (AMP) interpretation (Andersson et al., 2001). No interpretation subsumes an-
other (Andersson et al., 2001; Sonntag and Pe˜na, 2015). Moreover, AMP and MVR CGs are coher-
ent with data generation by block-recursive normal linear regressions (Andersson et al., 2001).
Richardson (2003) extends MVR CGs by (i) relaxing the semidirected acyclity constraint so
that only directed cycles are forbidden, and (ii) allowing up to two edges between any pair of
nodes. The resulting models are called acyclic directed mixed graphs (ADMGs). These are the
models in which Pearl’s do-calculus operate to determine if the causal eﬀect of an intervention is
identiﬁable from observed quantities (Pearl, 2009). In this paper, we make the same two extensions
to AMP CGs. We call our ADMGs alternative as opposed to the ones proposed by Richardson,
which we call original.
It is worth mentioning that neither the original ADMGs nor any other
family of mixed graphical models that we know of (e.g. summary graphs (Cox and Wermuth, 1996),
ancestral graphs (Richardson and Spirtes, 2002), MC graphs (Koster, 2002) or loopless mixed graphs
(Sadeghi and Lauritzen, 2014)) subsume AMP CGs and hence our alternative ADMGs. To see it, we
refer the reader to the works by Richardson and Spirtes (2002, p. 1025) and Sadeghi and Lauritzen
(2014, Section 4.1). Therefore, our work complements the existing works.
The rest of the paper is organized as follows. Section 2 introduces some preliminaries. Sections
3 and 4 introduce global, and ordered local and pairwise Markov properties for our ADMGs, and
prove their equivalence. When the random variables are continuous, Section 5 oﬀers an intuitive
interpretation of our ADMGs as systems of structural equations with correlated errors, so that
Pearl’s do-calculus can easily be adapted to them. Section 6 describes an exact algorithm for learning
our ADMGs from observational and interventional data via answer set programming (Gelfond, 1988;
Niemel¨a, 1999; Simons et al., 2002). We close the paper with some discussion in Section 7. Formal
proofs of the claims made in this paper can be found in the appendix.
Date: 08:37, 02/07/18, alternativeADMGsv8.tex.
1

2
A
B
D
A
B
C
D
Figure 1. Examples of ADMGs.
2. Preliminaries
In this section, we introduce some concepts about graphical models. Unless otherwise stated, all
the graphs and probability distributions in this paper are deﬁned over a ﬁnite set V . The elements
of V are not distinguished from singletons. An ADMG G is a graph with possibly directed and
undirected edges but without directed cycles. There may be up to two edges between any pair of
nodes, but in that case the edges must be diﬀerent and one of them must be undirected to avoid
directed cycles. Edges between a node and itself are not allowed. See Figure 1 for two examples of
ADMGs.
Given an ADMG G, we represent with A ⊸B that A →B or A −B (or both) is in G. The
parents of X ⊆V in G are PaG(X) = {A∣A →B is in G with B ∈X}. The children of X in G are
ChG(X) = {A∣A ←B is in G with B ∈X}. The neighbours of X in G are NeG(X) = {A∣A −B is
in G with B ∈X}. The ancestors of X in G are AnG(X) = {A∣A →... →B is in G with B ∈X or
A ∈X}. The descendants of X in G are DeG(X) = {A∣A ←... ←B is in G with B ∈X or A ∈X}.
The semidescendants of X in G are deG(X) = {A∣A
⊸
...
⊸
B is in G with B ∈X or A ∈X}. The
non-semidescendants of X in G are NdG(X) = V ∖deG(X). The connectivity component of X in
G is CcG(X) = {A∣A −... −B is in G with B ∈X or A ∈X}. The connectivity components in G are
denoted as Cc(G). A route between a node V1 and a node Vn on G is a sequence of (not necessarily
distinct) nodes V1,... ,Vn such that Vi and Vi+1 are adjacent in G for all 1 ≤i < n. If the nodes in
the route are all distinct, then the route is called a path. Finally, the subgraph of G induced by
X ⊆V , denoted as GX, is the graph over X that has all and only the edges in G whose both ends
are in X.
Every probability distribution p satisﬁes the following four properties, where X, Y , W and Z
disjoint subsets of V : Symmetry X ⊥pY ∣Z ⇒Y ⊥pX∣Z, decomposition X ⊥pY ∪W∣Z ⇒X ⊥pY ∣Z,
weak union X ⊥pY ∪W∣Z ⇒X ⊥pY ∣Z∪W, and contraction X ⊥pY ∣Z∪W ∧X ⊥pW∣Z ⇒X ⊥pY ∪W∣Z.
If p is strictly positive, then it also satisﬁes the intersection property X ⊥pY ∣Z ∪W ∧X ⊥pW∣Z ∪Y ⇒
X ⊥pY ∪W∣Z. Some (not yet characterized) probability distributions also satisfy the composition
property X ⊥pY ∣Z ∧X ⊥pW∣Z ⇒X ⊥pY ∪W∣Z.
3. Global Markov Property for ADMGs
In this section, we introduce four separation criteria for ADMGs. Moreover, we show that they
are all equivalent for strictly positive probability distributions. A probability distribution is said to
satisfy the global Markov property with respect to an ADMG if every separation in the graph can
be interpreted as an independence in the distribution.
Criterion 1. A node C on a path in an ADMG G is said to be a collider on the path if A →C
⊸
B
is a subpath. Moreover, the path is said to be connecting given Z ⊆V when
●every collider on the path is in AnG(Z), and
●every non-collider C on the path is outside Z unless A−C −B is a subpath and PaG(C)∖Z ≠
∅.
Let X, Y and Z denote three disjoint subsets of V . When there is no path in G connecting a
node in X and a node in Y given Z, we say that X is separated from Y given Z in G and denote
it as X ⊥GY ∣Z.
Criterion 2.
A node C on a route in an ADMG G is said to be a collider on the route if
A →C
⊸
B is a subroute. Note that maybe A = B. Moreover, the route is said to be connecting
given Z ⊆V when
●every collider on the route is in Z, and
●every non-collider C on the route is outside Z.
Let X, Y and Z denote three disjoint subsets of V . When there is no route in G connecting a
node in X and a node in Y given Z, we say that X is separated from Y given Z in G and denote
it as X ⊥GY ∣Z.

3
Criterion 3. Let Gu denote the UG over V that contains all and only the undirected edges in
G. The extended subgraph G[X] with X ⊆V is deﬁned as G[X] = GAnG(X) ∪(Gu)CcG(AnG(X)).
Two nodes A and B in G are said to be collider connected if there is a path between them such
that every non-endpoint node is a collider, i.e. A →C
⊸
B or A →C −D ←B. Such a path is
called a collider path. Note that a single edge forms a collider path. The augmented graph Ga is
the UG over V such that A −B is in Ga if and only if A and B are collider connected in G. The
edge A −B is called augmented if it is in Ga but A and B are not adjacent in G. A path in Ga is
said to be connecting given Z ⊆V if no node on the path is in Z. Let X, Y and Z denote three
disjoint subsets of V . When there is no path in G[X ∪Y ∪Z]a connecting a node in X and a node
in Y given Z, we say that X is separated from Y given Z in G and denote it as X ⊥GY ∣Z.
Criterion 4. Given an UG H over V and X ⊆V , we deﬁne the marginal graph HX as the
UG over X such that A −B is in HX if and only if A −B is in H or A −V1 −... −Vn −B is H
with V1,... ,Vn ∉X. We deﬁne the marginal extended subgraph G[X]m as G[X]m = GAnG(X) ∪
((Gu)CcG(AnG(X)))AnG(X). Let X, Y and Z denote three disjoint subsets of V . When there is no
path in (G[X ∪Y ∪Z]m)a connecting a node in X and a node in Y given Z, we say that X is
separated from Y given Z in G and denote it as X ⊥GY ∣Z.
The ﬁrst three separation criteria introduced above coincide with those introduced by Andersson et al.
(2001) and Levitz et al. (2001) for AMP CGs. The equivalence for AMP CGs of these three criteria
has been proven by Levitz et al. (2001, Theorem 4.1). The following theorems prove the equivalence
for ADMGs of the four separation criteria introduced above.
Theorem 1. There is a path in an ADMG G connecting a node in X and a node in Y given Z if
and only if there is a path in G[X ∪Y ∪Z]a connecting a node in X and a node in Y given Z.
Theorem 2. There is a path in an ADMG G connecting A and B given Z if and only if there is a
route in G connecting A and B given Z.
Theorem 3. Given an ADMG G, there is a path in G[X ∪Y ∪Z]a connecting a node in X and a
node in Y given Z if and only if there is a path in (G[X ∪Y ∪Z]m)a connecting a node in X and
a node in Y given Z.
Unlike in AMP CGs, two non-adjacent nodes in an ADMG are not necessarily separated. For
example, A ⊥GD∣Z does not hold for any Z in the ADMGs in Figure 1.
This drawback is
shared by the original ADMGs (Evans and Richardson, 2013, p. 752), summary graphs and MC
graphs (Richardson and Spirtes, 2002, p.
1023), and ancestral graphs (Richardson and Spirtes,
2002, Section 3.7). For ancestral graphs, the problem can be solved by adding edges to the graph
without altering the separations represented until every missing edge corresponds to a separation
(Richardson and Spirtes, 2002, Section 5.1). A similar solution does not exist for our ADMGs (we
omit the details).
4. Ordered Local and Pairwise Markov Properties for ADMGs
In this section, we introduce ordered local and pairwise Markov properties for ADMGs. Given
an ADMG G, the directed acyclity of G implies that we can specify a total ordering (≺) of the
nodes of G such that A ≺B only if B ∉AnG(A). Such an ordering is said to be consistent with
G. Let the predecessors of A with respect to ≺be deﬁned as PreG(A,≺) = {B∣B ≺A or B = A}.
Given S ⊆V , we deﬁne the Markov blanket of B ∈S with respect to G[S] as MbG[S](B) =
ChG[S](B) ∪NeG[S](B ∪ChG[S](B)) ∪PaG[S](B ∪ChG[S](B) ∪NeG[S](B ∪ChG[S](B))). We say
that a probability distribution p satisﬁes the ordered local Markov property with respect to G and
≺if for any A ∈V and S ⊆PreG(A,≺) such that A ∈S
B ⊥pS ∖(B ∪MbG[S](B))∣MbG[S](B)
for all B ∈S.
Theorem 4. Given a probability distribution p satisfying the intersection property, p satisﬁes the
global Markov property with respect to an ADMG if and only if it satisﬁes the ordered local Markov
property with respect to the ADMG and a consistent ordering of its nodes.

4
Similarly, we say that a probability distribution p satisﬁes the ordered pairwise Markov property
with respect to G and ≺if for any A ∈V and S ⊆PreG(A,≺) such that A ∈S
B ⊥pC∣V (G[S]) ∖(B ∪C)
for all nodes B,C ∈S that are not adjacent in G[S]a, and where V (G[S]) denotes the nodes in
G[S].
Theorem 5. Given a probability distribution p satisfying the intersection property, p satisﬁes the
global Markov property with respect to an ADMG if and only if it satisﬁes the ordered pairwise
Markov property with respect to the ADMG and a consistent ordering of its nodes.
For each A ∈V and S ⊆PreG(A,≺) such that A ∈S, the ordered local Markov property speciﬁes
an independence for each B ∈S.
The number of independences to specify can be reduced by
noting that G[S] = G[AnG(S)] and, thus, we do not need to consider every set S ⊆PreG(A,≺)
but only those that are ancestral, i.e. those such that S = AnG(S). The number of independences
to specify can be further reduced by considering only maximal ancestral sets, i.e.
those sets S
such that MbG[S](B) ⊂MbG[T](B) for every ancestral set T such that S ⊂T ⊆PreG(A,≺). The
independences for the non-maximal ancestral sets follow from the independences for the maximal
ancestral sets by decomposition. A characterization of the maximal ancestral sets is possible but
notationally cumbersome (we omit the details). All in all, for each node and maximal ancestral set,
the ordered local Markov property speciﬁes an independence for each node in the set. This number
is greater than for the original ADMGs, where a single independence is speciﬁed for each node and
maximal ancestral set (Richardson, 2003, Section 3.1). Even fewer independences are needed for
the original ADMGs when interpreted as linear causal models (Kang and Tian, 2009, Section 4).
All in all, our ordered local Markov property serves its purpose, namely to identify a subset of the
independences in the global Markov property that implies the rest.
Note that Andersson et al. (2001, Theorem 3) describe local and pairwise Markov properties for
AMP CGs that are equivalent to the global one under the assumption of the intersection and com-
position properties. Our ordered local and pairwise Markov properties above only require assuming
the intersection property. Note that this assumption is also needed to prove similar results for much
simpler models such as UGs (Lauritzen, 1996, Theorem 3.7). For AMP CGs, however, we can do
better than just using the ordered local and pairwise Markov properties for ADMGs above. Specif-
ically, we introduce in the next section neater local and pairwise Markov properties for AMP CGs
under the intersection property assumption. Later on, we will also use them to prove some results
for ADMGs.
4.1. Local and Pairwise Markov Properties for AMP CGs. Andersson et al. (2001, Theorem
2) introduce the following block-recursive Markov property. A probability distribution p satisﬁes the
global Markov property with respect to an AMP CG G if and only if the following three properties
hold for all C ∈Cc(G):
●C1: C ⊥pNdG(C) ∖CcG(PaG(C))∣CcG(PaG(C)).
●C2: p(C∣CcG(PaG(C))) satisﬁes the global Markov property with respect to GC.
●C3∗: D⊥pCcG(PaG(C)) ∖PaG(D)∣PaG(D) for all D ⊆C.
We simplify the block-recursive Markov property as follows.
Theorem 6. C1, C2 and C3∗hold if and only if the following two properties hold:
●C1∗: D⊥pNdG(D) ∖PaG(D)∣PaG(D) for all D ⊆C.
●C2∗: p(C∣PaG(C)) satisﬁes the global Markov property with respect to GC.
Andersson et al. (2001, Theorem 3) also introduce the following local Markov property. A proba-
bility distribution p satisfying the intersection and composition properties satisﬁes the global Markov
property with respect to an AMP CG G if and only if the following two properties hold for all
C ∈Cc(G):
●L1: A⊥pC ∖(A ∪NeG(A))∣NdG(C) ∪NeG(A) for all A ∈C.
●L2: A⊥pNdG(C) ∖PaG(A)∣PaG(A) for all A ∈C.
We introduce below a local Markov property that is equivalent to the global one under the
assumption of the intersection property only.

5
Theorem 7. A probability distribution p satisfying the intersection property satisﬁes the global
Markov property with respect to an AMP CG G if and only if the following two properties hold for
all C ∈Cc(G):
●L1: A⊥pC ∖(A ∪NeG(A))∣NdG(C) ∪NeG(A) for all A ∈C.
●L2∗: A⊥pNdG(C) ∖PaG(A ∪S)∣S ∪PaG(A ∪S) for all A ∈C and S ⊆C ∖A.
Finally, Andersson et al. (2001, Theorem 3) also introduce the following pairwise Markov prop-
erty. A probability distribution p satisfying the intersection and composition properties satisﬁes the
global Markov property with respect to an AMP CG G if and only if the following two properties
hold for all C ∈Cc(G):
●P1: A⊥pB∣NdG(C) ∪C ∖(A ∪B) for all A ∈C and B ∈C ∖(A ∪NeG(A)).
●P2: A⊥pB∣NdG(C) ∖B for all A ∈C and B ∈NdG(C) ∖PaG(A).
We introduce below a pairwise Markov property that is equivalent to the global one under the
assumption of the intersection property only.
Theorem 8. A probability distribution p satisfying the intersection property satisﬁes the global
Markov property with respect to an AMP CG G if and only if the following two properties hold for
all C ∈Cc(G):
●P1: A⊥pB∣NdG(C) ∪C ∖(A ∪B) for all A ∈C and B ∈C ∖(A ∪NeG(A)).
●P2∗: A⊥pB∣S ∪NdG(C) ∖B for all A ∈C, S ⊆C ∖A and B ∈NdG(C) ∖PaG(A ∪S).
5. Causal Interpretation of ADMGs
Let us assume that V is normally distributed. In this section, we show that an ADMG G can
be interpreted as a system of structural equations with correlated errors. Speciﬁcally, the system
includes an equation for each A ∈V , which is of the form
A = βAPaG(A) + ǫA
where ǫA denotes the error term. The error terms are represented implicitly in G. They can be
represented explicitly by magnifying G into the ADMG G′ as follows:
1
Set G′ = G
2
For each node A in G
3
Add the node ǫA and the edge ǫA →A to G′
4
For each edge A −B in G
5
Replace A −B with the edge ǫA −ǫB in G′
The magniﬁcation above basically consists in adding the error nodes ǫA to G and connect them
appropriately. Figure 2 shows an example. Note that every node A ∈V is determined by PaG′(A)
and that ǫA is determined by A ∪PaG′(A) ∖ǫA. Let ǫ denote all the error nodes in G′. Formally,
we say that A ∈V ∪ǫ is determined by Z ⊆V ∪ǫ when A ∈Z or A is a function of Z. We use Dt(Z)
to denote all the nodes that are determined by Z. From the point of view of the separations, that a
node outside the conditioning set of a separation is determined by the conditioning set has the same
eﬀect as if the node were actually in the conditioning set. Bearing this in mind, it is not diﬃcult
to see that, as desired, G and G′ represent the same separations over V . The following theorem
formalizes this result.
Theorem 9. Let X, Y and Z denote three disjoint subsets of V . Then, X ⊥GY ∣Z if and only if
X ⊥G′Y ∣Z.
Finally, let ǫ ∼N (0,Λ) such that (Λ−1)ǫA,ǫB = 0 if ǫA−ǫB is not in G′. Then, G can be interpreted
as a system of structural equations with correlated errors as follows. For any A ∈V
A = βAPaG(A) + ǫA
(1)
and for any other B ∈V
covariance(ǫA,ǫB) = ΛǫA,ǫB.
(2)
The following two theorems conﬁrm that the interpretation above works as intended. A similar
result to the second theorem exists for the original ADMGs (Koster, 1999, Theorem 1).

6
G
G′
A
B
C
D
E
F
A
B
C
D
E
F
ǫA
ǫB
ǫC
ǫD
ǫE
ǫF
Figure 2. Example of the magniﬁcation of an ADMG.
Theorem 10. Every probability distribution p(V ) speciﬁed by Equations (1) and (2) is Gaussian.
Theorem 11. Every probability distribution p(V ) speciﬁed by Equations (1) and (2) satisﬁes the
global Markov property with respect to G.
The equations above specify each node as a linear function of its parents with additive normal
noise. The equations can be generalized to nonlinear or nonparametric functions as long as the noise
remains additive normal. That is, A = f(PaG(A)) + ǫA for all A ∈V , with ǫ ∼N (0,Λ) such that
(Λ−1)ǫA,ǫB = 0 if ǫA−ǫB is not in G′. That the noise is additive normal ensures that ǫA is determined
by A ∪PaG′(A) ∖ǫA, which is needed for Theorem 9 to remain valid which, in turn, is needed for
Theorem 11 to remain valid.
A less formal but more intuitive alternative interpretation of ADMGs is as follows.
We can
interpret the parents of each node in an ADMG as its observed causes.
Its unobserved causes
are grouped into an error node that is represented implicitly in the ADMG. We can interpret
the undirected edges in the ADMG as the correlation relationships between the diﬀerent error
nodes. The causal structure is constrained to be a DAG, but the correlation structure can be any
UG. This causal interpretation of our ADMGs parallels that of the original ADMGs (Pearl, 2009).
There are however two main diﬀerences. First, the noise in the original ADMGs is not necessarily
additive normal. Second, the correlation structure of the error nodes in the original ADMGs is
represented by a covariance graph, i.e. a graph with only bidirected edges (Pearl and Wermuth,
1993). Therefore, whereas a missing edge between two error nodes in the original ADMGs represents
marginal independence, in our ADMGs it represents conditional independence given the rest of the
error nodes. This means that the original and our ADMGs represent complementary causal models.
Consequently, there are scenarios where the identiﬁcation of the causal eﬀect of an intervention is
not possible with the original ADMGs but is possible with ours, and vice versa. We elaborate on
this in the next section.
5.1. do-calculus for ADMGs. We start by adapting Pearl’s do-calculus, which operates on the
original ADMGs, to our ADMGs. The original do-calculus consists of the following three rules,
whose repeated application permits in some cases to identify (i.e. compute) the causal eﬀect of an
intervention from observed quantities:
●Rule 1 (insertion/deletion of observations):
p(Y ∣do(X),Z ∪W) = p(Y ∣do(X),W) if Y ⊥G′′Z∣X ∪W∣∣X.
●Rule 2 (action/observation exchange):
p(Y ∣do(X),do(Z),W) = p(Y ∣do(X),Z ∪W) if Y ⊥G′′FZ∣X ∪W ∪Z∣∣X.
●Rule 3 (insertion/deletion of actions):
p(Y ∣do(X),do(Z),W) = p(Y ∣do(X),W) if Y ⊥G′′FZ∣X ∪W∣∣X.
where X, Y , Z and W are disjoint subsets of V , G′′ is the original ADMG G augmented with
an intervention random variable FA and an edge FA →A for every A ∈V , and “∣∣X” denotes an
intervention on X in G′′, i.e. any edge with an arrowhead into any node in X is removed. See Pearl
(1995, p. 686) for further details and the proof that the rules are sound. Fortunately, the rules also
apply to our ADMGs by simply redeﬁning “∣∣X” appropriately. The proof that the rules are still
sound is essentially the same as before. Speciﬁcally, “∣∣X” should now be implemented as follows:
●Delete all the directed edges pointing to nodes in X,
●for every path A −V1 −... −Vn −B with A,B ∉X and V1,... ,Vn ∈X, add the edge A −B,
and

7
DAG
Our ADMG
Original ADMG
A
B
C
UA
UB
UC
U
US
A
B
C
A
B
C
Figure 3. Example of a case where p(B∣do(A)) is identiﬁable with our ADMG but
not with the original one.
●delete all the undirected edges with an endnode in X.
The ﬁrst step is the same as an intervention in an original ADMG. The second and third steps
of the intervention are best understood in terms of the magniﬁed ADMG G′: They correspond
to marginalizing the error nodes associated to the nodes in X out of G′
ǫ, the UG that represents
the correlation structure of the error nodes. In other words, they replace G′
ǫ with (G′)ǫ∖ǫX, the
marginal graph of G′
ǫ over ǫ∖ǫX. This makes sense since ǫX is no longer associated to X due to the
intervention and, thus, we may want to marginalize it out because it is unobserved. This is exactly
what the second and third steps of the intervention imply. To see it, note that the ADMG after the
intervention and the magniﬁed ADMG after the intervention represent the same separations over
V , by Theorem 9.
Now, we show that the original and our ADMGs allow for complementary causal reasoning.
Speciﬁcally, we show an example where our ADMGs allow for the identiﬁcation of the causal eﬀect
of an intervention whereas the original ADMGs do not, and vice versa. Consider the DAG in Figure
3, which represents the causal relationships among all the random variables in the domain at hand.1
However, only A, B and C are observed. Moreover, US represents selection bias. Although other
deﬁnitions may exist, we say that selection bias is present if two unobserved causes have a common
eﬀect that is omitted from the study but inﬂuences the selection of the samples in the study (Pearl,
2009, p.
163).
Therefore, the corresponding unobserved causes are correlated in every sample
selected. Note that this deﬁnition excludes the possibility of an intervention aﬀecting the selection
because, in a causal model, unobserved causes do not have observed causes. Note also that our goal
is not the identiﬁcation of the causal eﬀect of an intervention in the whole population but in the
subpopulation that satisﬁes the selection bias criterion.2 For causal eﬀect identiﬁcation in the whole
population, see Bareinboim and Tian (2015).
The ADMGs in Figure 3 represent the causal model represented by the DAG when only the
observed random variables are modeled. According to our interpretation of ADMGs above, our
ADMG is derived from the DAG by keeping the directed edges between observed random variables,
and adding an undirected edge between two observed random variables if and only if their unobserved
causes are not separated in the DAG given the unobserved causes of the rest of the observed random
variables. In other words, UA⊥UB∣UC holds in the DAG but UA⊥UC∣UB and UB ⊥UC∣UA do not and,
thus, the edges A −C and B −C are added to the ADMG but A −B is not. Deriving the original
ADMG is less straightforward.
The bidirected edges in an original ADMG represent potential
marginal dependence due to a common unobserved cause, also known as confounding. Thus, the
original ADMGs are not meant to model selection bias. The best we can do is then to use bidirected
edges to represent potential marginal dependences regardless of their origin.
This implies that
we can derive the original ADMG from the DAG by keeping the directed edges between observed
random variables, and adding a bidirected edge between two observed random variables if and only
if their unobserved causes are not separated in the DAG given the empty set. Clearly, p(B∣do(A))
1For instance, the DAG may correspond to the following ﬁctitious domain: A = Smoking, B = Lung cancer, C =
Drinking, UA = Parents’ smoking, UB = Parents’ lung cancer, UC = Parents’ drinking, U = Parents’ genotype that
causes smoking and drinking, US = Parents’ hospitalization.
2For instance, in the ﬁctitious domain in the previous footnote, we are interested in the causal eﬀect that smoking
may have on the development of lung cancer for the patients with hospitalized parents.

8
is not identiﬁable with the original ADMG but is identiﬁable with our ADMG. Speciﬁcally,
p(B∣do(A)) = ∑
C
p(B∣do(A),C)p(C∣do(A)) = ∑
C
p(B∣do(A),C)p(C) = ∑
C
p(B∣A,C)p(C)
where the ﬁrst equality is due to marginalization, the second due to Rule 3, and the third due to
Rule 2.
The original ADMGs assume that confounding is always the source of correlation between unob-
served causes. In the example above, we consider selection bias as an additional source. However,
this is not the only possibility. For instance, UB and UC may be tied by a physical law of the
form f(UB,UC) = constant devoid of causal meaning, much like Boyle’s law relates the pressure
and volume of a gas as pressure ⋅volume = constant if the temperature and amount of gas remain
unchanged within a closed system. In such a case, the discussion above still applies and our ADMG
allows for causal eﬀect identiﬁcation but the original does not. For an example where the origi-
nal ADMGs allow for causal eﬀect identiﬁcation whereas ours do not, simply replace the subgraph
UC →US ←UB in Figure 3 with UC ←W →UB where W is an unobserved random variable. Then,
our ADMG will contain the same edges as before plus the edge A −B, making the causal eﬀect
non-identiﬁable. The original ADMG will contain the same edges as before with the exception of
the edge A ↔B, making the causal eﬀect identiﬁable.
In summary, the bidirected edges of the original ADMGs have a clear semantics: They represent
potential marginal dependence due to a common unobserved cause. This means that we have to
know the causal relationships between the unobserved random variables to derive the ADMG. Or
at least, we have to know that there is no selection bias or tying laws so that marginal dependence
can be attributed to a common unobserved cause due to Reichenbach’s principle (Pearl, 2009, p.
30). This knowledge may not be available in some cases. Moreover, the original ADMGs are not
meant to represent selection bias or tying laws. To solve these two problems, we may be willing to
use the bidirected edges to represent potential marginal dependences regardless of their origin. Our
ADMGs are somehow dual to the original ADMGs, since the undirected edges represent potential
saturated conditional dependence between unobserved causes. This implies that in some cases, such
as in the example above, our ADMGs may allow for causal eﬀect identiﬁcation whereas the original
may not.
6. Learning ADMGs Via ASP
In this section, we introduce an exact algorithm for learning ADMGs via answer set programming
(ASP), which is a declarative constraint satisfaction paradigm that is well-suited for solving compu-
tationally hard combinatorial problems (Gelfond, 1988; Niemel¨a, 1999; Simons et al., 2002). ASP
represents constraints in terms of ﬁrst-order logical rules. Therefore, when using ASP, the ﬁrst task
is to model the problem at hand in terms of rules so that the set of solutions implicitly represented
by the rules corresponds to the solutions of the original problem. One or multiple solutions of the
original problem can then be obtained by invoking an oﬀ-the-shelf ASP solver on the constraint dec-
laration. The algorithms underlying the ASP solver clingo (Gebser et al., 2011), which we use in
this work, are based on state-of-the-art Boolean satisﬁability solving techniques (Biere et al., 2009).
Figure 4 shows the ASP encoding of our learning algorithm.
The predicate node(X) in rule
1 represents that X is a node.
The predicates line(X,Y,I) and arrow(X,Y,I) represent that
there is an undirected and directed edge from X to Y after having intervened on the node I.
The observational regime corresponds to I = 0. The rules 2-3 encode a non-deterministic guess of
the edges for the observational regime, which means that the ASP solver with implicitly consider
all possible graphs during the search, hence the exactness of the search.
The edges under the
observational regime are used in the rules 4-5 to deﬁne the edges in the graph after having intervened
on I, following the description in Section 5.1. Therefore, the algorithm assumes continuous random
variables and additive normal noise when the input contains interventions. It makes no assumption
though when the input consists of just observations. The rules 6-7 enforce the fact that undirected
edges are symmetric and that there is at most one directed edge between two nodes. The predicate
ancestor(X,Y) represents that X is an ancestor of Y . The rules 8-10 enforce that the graph has
no directed cycles. The predicates in the rules 11-12 represent whether a node X is or is not in
a set of nodes C. The rules 13-24 encode the separation criterion 2 in Section 3. The predicate

9
% input predicates
% nodes(N): N is the number of nodes
% set(X): X is the index of a set of nodes
% dep(X,Y,C,I,W) (resp. indep(X,Y,C,I,W)): the nodes X and Y are dependent (resp.
%
independent) given the set of nodes C
%
after having intervened on the node I
% nodes
node(X) :- nodes(N), X=1..N.
% rule 1
% edges
{ line(X,Y,0) } :- node(X), node(Y), X != Y.
%
2
{ arrow(X,Y,0) } :- node(X), node(Y), X != Y.
%
3
line(X,Y,I) :- line(X,I,0), line(I,Y,0), node(I), X != Y, I > 0.
%
4
arrow(X,Y,I) :- arrow(X,Y,0), node(I), Y != I, I > 0.
%
5
line(X,Y,I) :- line(Y,X,I).
%
6
:- arrow(X,Y,I), arrow(Y,X,I).
%
7
% directed acyclity
ancestor(X,Y) :- arrow(X,Y,0).
%
8
ancestor(X,Y) :- ancestor(X,Z), ancestor(Z,Y).
:- ancestor(X,Y), arrow(Y,X,0).
%
10
% set membership
inside_set(X,C) :- node(X), set(C), 2**(X-1) & C != 0.
%
11
outside_set(X,C) :- node(X), set(C), 2**(X-1) & C == 0.
%
12
% end_line/head/tail(X,Y,C,I) means that there is a connecting route
% from X to Y given C that ends with an line/arrowhead/arrowtail
% single edge route
end_line(X,Y,C,I) :- line(X,Y,I), outside_set(X,C).
%
13
end_head(X,Y,C,I) :- arrow(X,Y,I), outside_set(X,C).
end_tail(X,Y,C,I) :- arrow(Y,X,I), outside_set(X,C).
% connection through non-collider
end_line(X,Y,C,I) :- end_line(X,Z,C,I), line(Z,Y,I), outside_set(Z,C).
end_line(X,Y,C,I) :- end_tail(X,Z,C,I), line(Z,Y,I), outside_set(Z,C).
end_head(X,Y,C,I) :- end_line(X,Z,C,I), arrow(Z,Y,I), outside_set(Z,C).
end_head(X,Y,C,I) :- end_head(X,Z,C,I), arrow(Z,Y,I), outside_set(Z,C).
end_head(X,Y,C,I) :- end_tail(X,Z,C,I), arrow(Z,Y,I), outside_set(Z,C).
end_tail(X,Y,C,I) :- end_tail(X,Z,C,I), arrow(Y,Z,I), outside_set(Z,C).
% connection through collider
end_line(X,Y,C,I) :- end_head(X,Z,C,I), line(Z,Y,I), inside_set(Z,C).
end_tail(X,Y,C,I) :- end_line(X,Z,C,I), arrow(Y,Z,I), inside_set(Z,C).
end_tail(X,Y,C,I) :- end_head(X,Z,C,I), arrow(Y,Z,I), inside_set(Z,C).
%
24
% derived non-separations
con(X,Y,C,I) :- end_line(X,Y,C,I), X != Y, outside_set(Y,C).
%
25
con(X,Y,C,I) :- end_head(X,Y,C,I), X != Y, outside_set(Y,C).
con(X,Y,C,I) :- end_tail(X,Y,C,I), X != Y, outside_set(Y,C).
con(X,Y,C,I) :- con(Y,X,C,I).
%
28
% satisfy all dependences
:- dep(X,Y,C,I,W), not con(X,Y,C,I).
%
29
% maximize the number of satisfied independences
:~ indep(X,Y,C,I,W), con(X,Y,C,I). [W,X,Y,C,I]
%
30
% minimize the number of lines/arrows
:~ line(X,Y,0), X < Y. [1,X,Y,1]
%
31
:~ arrow(X,Y,0). [1,X,Y,2]
%
32
% show results
#show. #show line(X,Y) : line(X,Y,0), X < Y. #show arrow(X,Y) : arrow(X,Y,0).
Figure 4. ASP encoding of the learning algorithm.
con(X,Y,C,I) in rules 25-28 represents that there is a connecting route between X and Y given
C after having intervened on I.
The rule 29 enforces that each dependence in the input must
correspond to a connecting route. The rule 30 represents that each independence in the input that
is not represented implies a penalty of W units. In our case, W = 1. The rules 31-33 represent a
penalty of 1 unit per edge. Other penalty rules can be added similarly.
Figure 4 shows the ASP encoding of all the (in)dependences in the probability distribution at
hand, e.g. as determined by some available data. Speciﬁcally, the predicate nodes(3) represents
that there are three nodes in the domain at hand, and the predicate set(0..7) represents that there
are eight sets of nodes, indexed from 0 (empty set) to 7 (full set). The predicate indep(X,Y,C,I,W)
(respectively dep(X,Y,C,I,W)) represents that the nodes X and Y are conditionally independent
(respectively dependent) given the set index C after having intervened on the node I. Observations

10
nodes(3).
% three nodes
set(0..7).
% all subsets of three nodes
% observations
dep(1,2,0,0,1).
dep(1,2,4,0,1).
dep(2,3,0,0,1).
dep(2,3,1,0,1).
dep(1,3,0,0,1).
dep(1,3,2,0,1).
% interventions on the node 3
dep(1,2,0,0,3,1).
dep(1,2,4,0,3,1).
indep(2,3,0,3,1).
indep(2,3,1,3,1).
indep(1,3,0,3,1).
indep(1,3,2,3,1).
Figure 5. ASP encoding of the (in)dependences in the domain.
:- arrow(2,1,0).
:- arrow(3,1,0).
:- arrow(3,2,0).
{ biarrow(X,Y,0) } :- node(X), node(Y), X != Y.
:- biarrow(X,Y,0), line(Z,W,0).
biarrow(X,Y,I) :- biarrow(X,Y,0), node(I), X != I, Y != I, I > 0.
biarrow(X,Y,I) :- biarrow(Y,X,I).
end_head(X,Y,C,I) :- biarrow(X,Y,I), outside_set(X,C).
end_head(X,Y,C,I) :- end_tail(X,Z,C,I), biarrow(Z,Y,I), outside_set(Z,C).
end_head(X,Y,C,I) :- end_head(X,Z,C,I), biarrow(Z,Y,I), inside_set(Z,C).
:~ biarrow(X,Y,0), X < Y. [1,X,Y,3]
#show biarrow(X,Y) : biarrow(X,Y,0), X < Y.
Figure 6. Additional ASP encoding for adding a node ordering (top) and learning
original ADMGs as well as ours (bottom).
correspond to I = 0. The penalty for failing to represent an (in)dependence is W. Note that it
suﬃces to specify all the (in)dependences between pair of nodes, because these identify uniquely
the rest of the independences in the probability distribution (Studen´y, 2005, Lemma 2.2). Note
also that we do not assume that the probability distribution at hand is faithful to some ADMG or
satisﬁes the composition property, as it is the case in most heuristic learning algorithms.
By calling the ASP solver with the encodings of the learning algorithm and the (in)dependences
in the domain, the solver will essentially perform an exhaustive search over the space of graphs, and
will output the graphs with the smallest penalty. Speciﬁcally, when only the observations are used
(i.e. the last six lines of Figure 5 are removed), the learning algorithm ﬁnds 37 optimal models.
Among them, we have UGs such as line(1,2) line(2,3) line(3,1), DAGs such as arrow(3,1)
arrow(1,2) arrow(3,2), AMP CGs such as line(1,2) arrow(3,1) arrow(3,2), and ADMGs
such as line(1,2) line(2,3) arrow(1,2) or line(1,2) line(1,3) arrow(2,3). When all the
observations and interventions available are used, the learning algorithm ﬁnds 18 optimal models.
These are the models out the 37 models found before that have no directed edge coming out of the
node 3. This is the expected result given the last four lines in Figure 5. Note that the output still
includes the ADMGs mentioned before.
Finally, the ASP code easily accommodates prior knowledge in the form of a node ordering, or
forbidden and compelled edges. For instance, we can constrain the graphs to be consistent with
the ordering 1 ≺2 ≺3 by simply adding the rules in Figure 6 (top). Moreover, the ASP code can
easily be extended as shown in Figure 6 (bottom) to learn not only our ADMGs but also original
ADMGs. Note that the second line forbids graphs with both undirected and bidirected edges. This
results in 34 optimal models: The 18 previously found plus 16 original ADMG, e.g. biarrow(1,2)
biarrow(1,3) arrow(1,2) or biarrow(1,2) biarrow(1,3) arrow(2,3).

11
7. Discussion
In this work, we have introduced ADMGs as an extension AMP CGs by (i) relaxing the semidi-
rected acyclity constraint so that only directed cycles are forbidden, and (ii) allowing up to two
edges between any pair of nodes. We have introduced and proved the equivalence of global, and
ordered local and pairwise Markov properties for the new models. We have also shown that when
the random variables are continuous, the new models can be interpreted as systems of structural
equations with correlated errors. This has enabled us to adapt Pearl’s do-calculus to them. We have
shown that our models complement those used in Pearl’s do-calculus, as there are cases where the
identiﬁcation of the causal eﬀect of an intervention is not possible with the latter but is possible
with the former, and vice versa. Finally, we have described an exact algorithm for learning the new
models from observational and interventional data.
In the future, we plan to unify the original and our ADMGs by allowing directed, undirected and
bidirected edges.
Appendix: Proofs
Lemma 1. If there is a path ρ in an ADMG G between A ∈X and B ∈Y such that (i) no non-
collider C on ρ is in Z unless A −C −B is a subpath of ρ and PaG(C) ∖Z ≠∅, and (ii) every
collider on ρ is in AnG(X ∪Y ∪Z), then there is a path in G connecting a node in X and a node
in Y given Z.
Proof. Suppose that ρ has a collider C such that C ∈AnG(D) ∖AnG(Z) with D ∈X, or C ∈
AnG(E)∖AnG(Z) with E ∈Y . Assume without loss of generality that C ∈AnG(D)∖AnG(Z) with
D ∈X because, otherwise, a symmetric argument applies. Then, replace the subpath of ρ between A
and C with D ←... ←C. Note that the resulting path (i) has no non-collider in Z unless A −C −B
is a subpath of ρ and PaG(C)∖Z ≠∅, and (ii) has every collider in AnG(X ∪Y ∪Z). Note also that
the resulting path has fewer colliders than ρ that are not in AnG(Z). Continuing with this process
until no such collider C exists produces the desired result.
□
Lemma 2. Given an ADMG G, let ρ denote a shortest path in G[A∪B ∪Z]a connecting two nodes
A and B given Z. Then, a path in G between A and B can be obtained as follows. First, replace
every augmented edge on ρ with an associated collider path in G[A ∪B ∪Z]. Second, replace every
non-augmented edge on ρ with an associated edge in G[A ∪B ∪Z]. Third, replace any conﬁguration
C −D ←F →D −E produced in the previous steps with C −D −E.
Proof. We start by proving that the collider paths added in the ﬁrst step of the lemma either do
not have any node in common except possibly one of the endpoints, or the third step of the lemma
removes the repeated nodes. Suppose for a contradiction that C −D and C′ −D′ are two augmented
edges on ρ such that their associated collider paths have in common a node which is not an endpoint
of these paths. Consider the following two cases.
Case 1: Suppose that D ≠C′. Then, one of the following conﬁgurations must exist in G[A ∪
B ∪Z].

12
C
D
E
C′
D′
C
D
E
C′
D′
C
D
E
F
C′
D′
C
D
E
F
C′
D′
C
D
E
F
H
C′
D′
C
D
E
F
H
C′
D′
C
D
E
F
H
C′
D′
C
D
E
F
H
C′
D′
C
D
E
F
C′
D′
C
D
E
F
C′
D′
However, the ﬁrst case implies that C−D′ is in G[A∪B∪Z]a, which implies that replacing
the subpath of ρ between C and D′ with C −D′ results in a path in G[A∪B∪Z]a connecting
A and B given Z that is shorter than ρ. This is a contradiction. Similarly for the fourth,
sixth, seventh, eighth, ninth and tenth cases. And similarly for the rest of the cases by
replacing the subpath of ρ between D and D′ with D −D′.
Case 2: Suppose that D = C′. Then, one of the following conﬁgurations must exist in G[A ∪
B ∪Z].
C
D
E
D′
C
D
E
D′
C
D
E
D′
C
D
E
F
D′
C
D
E
F
D′
C
D
E
F
H
D′
C
D
E
F
D′
However, the ﬁrst case implies that C−D′ is in G[A∪B∪Z]a, which implies that replacing
the subpath of ρ between C and D′ with C −D′ results in a path in G[A∪B∪Z]a connecting
A and B given Z that is shorter than ρ. This is a contradiction. Similarly for the second,
fourth and seventh cases. For the third, ﬁfth and sixth cases, the third step of the lemma
removes the repeated nodes. Speciﬁcally, it replaces C −E ←D →E −D′ with C −E −D′ in
the third case, E −F ←D →F −D′ with E −F −D′ in the ﬁfth case, and E −F ←D →F −H
with E −F −H in the sixth case.
It only remains to prove that the collider paths added in the ﬁrst step of the lemma have no nodes
in common with ρ except the endpoints. Suppose that ρ has an augmented edge C −D. Then, one
of the following conﬁgurations must exist in G[A ∪B ∪Z].
C
D
E
C
D
E
F
Consider the ﬁrst case and suppose for a contradiction that E occurs on ρ. Note that E ∉Z
because, otherwise, ρ would not be connecting. Assume without loss of generality that E occurs on
ρ before C and D because, otherwise, a symmetric argument applies. Then, replacing the subpath
of ρ between E and D with E −D results in a path in G[A ∪B ∪Z]a connecting A and B given Z
that is shorter than ρ. This is a contradiction. Similarly for the second case. Speciﬁcally, assume
without loss of generality that E occurs on ρ because, otherwise, a symmetric argument with F
applies. Note that E ∉Z because, otherwise, ρ would not be connecting. If E occurs on ρ after

13
C and D, then replace the subpath of ρ between C and E with C −E. This results in a path in
G[A ∪B ∪Z]a connecting A and B given Z that is shorter than ρ, which is a contradiction. If E
occurs on ρ before C and D, then replace the subpath of ρ between E and D with E −D. This
results in a path in G[A ∪B ∪Z]a connecting A and B given Z that is shorter than ρ, which is a
contradiction.
□
Lemma 3. Let ρ denote a path in an ADMG G connecting two nodes A and B given Z. The
sequence of non-colliders on ρ forms a path in G[A ∪B ∪Z]a between A and B.
Proof. Consider the maximal undirected subpaths of ρ. Note that each endpoint of each subpath
is ancestor of a collider or endpoint of ρ, because ρ is connecting. Thus, all the nodes on ρ are in
G[A ∪B ∪Z]a. Suppose that C and D are two successive non-colliders on ρ. Then, the subpath of
ρ between C and D consists entirely of colliders. Speciﬁcally, the subpath is of the form C
⊸
D,
C →D, C →E
⊸
D or C →E −F ←D. Then, C and D are adjacent in G[A ∪B ∪Z]a.
□
Proof of Theorem 1. We start by proving the only if part. Let ρ denote a path in G connecting
A ∈X and B ∈Y given Z. By Lemma 3 the non-colliders on ρ form a path ρa between A and B in
G[X ∪Y ∪Z]a. Since ρ is connecting, every non-collider C on ρ is outside Z unless D −C −E is a
subpath of ρ and PaG(C) ∖Z ≠∅. In the latter case, ρa has a subpath D′ −C −E′ where D′ = D
unless D is a collider on ρ, i.e. D′ →D −C is on ρ. Similarly for E and E′. Therefore, we replace
the subpath D′ −C −E′ of ρa with D′ −F −E′ where F ∈PaG(C)∖Z. Then, ρa is connecting given
Z. Note that D′ −F is in G[X ∪Y ∪Z]a, because D −C or D′ →D −C is in ρ and F →C is in G
with C ∈Z. Similarly for F −E′.
To prove the if part, let ρa denote a shortest path in G[X ∪Y ∪Z]a connecting A ∈X and B ∈Y
given Z. We can transform ρa into a path ρ in G as described in Lemma 2. Since ρa is connecting,
no node on ρa is in Z and, thus, no non-collider on ρ is in Z. Finally, since all the nodes on ρ are
in G[X ∪Y ∪Z]a, it follows that every collider on ρ is in AnG(X ∪Y ∪Z). To see it, note that if
C −D is an augmented edge in G[X ∪Y ∪Z]a then the colliders on any collider path associated with
C −D are in AnG(X ∪Y ∪Z). Thus, by Lemma 1 there exist a node in X and a node in Y which
are connected given Z in G.
□
Proof of Theorem 2. We prove the theorem for the following separation criterion, which is equiv-
alent to criterion 2: A route is said to be connecting given Z ⊆V when
●every collider on the route is in Z, and
●every non-collider C on the route is outside Z unless A−C−B is a subroute and PaG(C)∖Z ≠
∅.
The only if part is trivial. To prove the if part, let ρ denote a route in G connecting A and B
given Z. Let C denote a node that occurs more than once in ρ. Consider the following cases.
Case 1: Assume that ρ is of the form A... D →C ... C →E ... B. Then, C ∉Z for ρ to be
connecting given Z. Then, removing the subroute between the two occurrences of C from ρ
results in the route A... D →C →E ... B, which is connecting given Z.
Case 2: Assume that ρ is of the form A... D →C ... C
⊸
E ... B. Then, C ∈AnG(Z) for ρ
to be connecting given Z. Then, removing the subroute between the two occurrences of C
from ρ results in the route A... D →C
⊸
E ... B, which is connecting given Z.
Case 3: Assume that ρ is of the form A... D ←C ... C ... B.
Then, C ∉Z for ρ to be
connecting given Z. Then, removing the subroute between the two occurrences of C from ρ
results in the route A... D ←C ... B, which is connecting given Z.
Case 4: Assume that ρ is of the form A... D −C ... C →E ... B. Then, C ∉Z for ρ to be
connecting given Z. Then, removing the subroute between the two occurrences of C from ρ
results in the route A... D −C →E ... B, which is connecting given Z.
Case 5: Assume that ρ is of the form A... D −C ... C ←E ... B. Then, C ∈AnG(Z) for ρ
to be connecting given Z. Then, removing the subroute between the two occurrences of C
from ρ results in the route A... D −C ←E ... B, which is connecting given Z.
Case 6: Assume that ρ is of the form A... D−C ... C −E ... B and C ∉Z. Then, removing the
subroute between the two occurrences of C from ρ results in the route A... D −C −E ... B,
which is connecting given Z.

14
Case 7: Assume that ρ is of the form A... D −C ... C −E ... B and C ∈Z. Then, ρ must
actually be of the form A... D −C ←F ... C −E ... B or A... D −C −F ... C −E ... B.
Note that in the former case F ∉Z for ρ to be connecting given Z. For the same reason,
PaG(C)∖Z ≠∅in the latter case. Then, PaG(C)∖Z ≠∅in either case. Then, removing the
subroute between the two occurrences of C from ρ results in the route A... D −C −E ... B,
which is connecting given Z.
Repeating the process above until no such node C exists produces the desired path.
□
Proof of Theorem 3. We start by proving the only if part. Suppose that there is path in G[X ∪
Y ∪Z]a connecting a node in X and a node in Y given Z. We can then obtain a path in G connecting
A ∈X and B ∈Y given Z as shown in the proof of Theorem 1. In this path, replace with C −D every
subpath C −V1 −...−Vn−D such that C,D ∈AnG(X ∪Y ∪Z) and V1,... ,Vn ∉AnG(X ∪Y ∪Z). The
result is a path in G[X ∪Y ∪Z]m. Moreover, the path connects A and B given Z. To see it, note
that the resulting and original paths have the same colliders, and the non-colliders on the resulting
path are a subset of the non-colliders on the original path. Then, there is path in (G[X ∪Y ∪Z]m)a
connecting A and B given Z.
To prove the if part, suppose that there is path in (G[X ∪Y ∪Z]m)a connecting A ∈X and B ∈Y
given Z. Suppose that the path contains an edge C −D that is not in G[X ∪Y ∪Z]a. This is due
to one the following reasons.
Case 1: C −V1 −... −Vn −D is in G[X ∪Y ∪Z] with V1,... ,Vn ∉AnG(X ∪Y ∪Z). Then,
C −V1 −... −Vn −D is in G[X ∪Y ∪Z]a.
Case 2: C →E −D is in G[X ∪Y ∪Z]m, which means that C →E −V1 −... −Vn −D is in
G[X ∪Y ∪Z] with V1,... ,Vn ∉AnG(X ∪Y ∪Z). Then, C−V1−...−Vn−D is in G[X ∪Y ∪Z]a.
Case 3: C →E −F ←D is in G[X ∪Y ∪Z]m, which means that C →E −V1 −... −Vn −F ←D
is in G[X ∪Y ∪Z] with V1,... ,Vn ∉AnG(X ∪Y ∪Z). Then, C −V1 −... −Vn −D is in
G[X ∪Y ∪Z]a.
Either case implies that there is a path in G[X ∪Y ∪Z]a connecting A ∈X and B ∈Y given
Z.
□
Proof of Theorem 4. We start by proving the only if part. It suﬃces to note that every node that
is adjacent to B in G[S]a is in MbG[S](B), hence B is separated from S ∖(B ∪MbG[S](B)) given
MbG[S](B) in G[S]a. Thus, B ⊥pS ∖(B ∪MbG[S](B))∣MbG[S](B) by the global Markov property.
To prove the if part, let A be the node in X∪Y ∪Z that occurs the latest in ≺, and let S = X∪Y ∪Z.
Note that for all B ∈S, the set of nodes that are adjacent to B in G[S]a is precisely MbG[S](B).
Then, the ordered local Markov property implies the global Markov property (Lauritzen, 1996,
Theorem 3.7).
□
Proof of Theorem 5. We start by proving the only if part. It suﬃces to note that if B and C
are not adjacent in G[S]a, then they are separated in G[S]a given V (G[S]) ∖(B ∪C).
Thus,
B ⊥pC∣V (G[S]) ∖(B ∪C) by the global Markov property.
To prove the if part, let A be the node in X∪Y ∪Z that occurs the latest in ≺, and let S = X∪Y ∪Z.
Then, the ordered pairwise Markov property implies the global Markov property (Lauritzen, 1996,
Theorem 3.7).
□
Proof of Theorem 6. First, C1∗implies C3∗by decomposition. Second, C1∗implies C1 by tak-
ing D = C and applying weak union.
Third, C1 and the fact that NdG(D) = NdG(C) imply
D ⊥pNdG(D) ∖CcG(PaG(C))∣CcG(PaG(C)) by symmetry and decomposition, which together
with C3∗imply C1∗by contraction. Finally, C2 and C2∗are equivalent because p(C∣PaG(C)) =
p(C∣CcG(PaG(C))) by C1∗and decomposition.
□
Proof of Theorem 7. To see the only if part, note that C1∗with D = C implies that p(C∣NdG(C)) =
p(C∣PaG(C)). This implies that p(C∣NdG(C)) satisﬁes the global Markov property with respect
to GC by C2∗. This implies L1 (Lauritzen, 1996, Theorem 3.7). Moreover, let D = A ∪S and note
that NdG(D) = NdG(C). Then, L2∗follows from C1∗by symmetry and weak union.
To see the if part, note that L2∗with S = NeG(A) implies that A⊥pNdG(C)∖PaG(C)∣NeG(A)∪
PaG(C) by weak union. This together with L1 imply A ⊥pC ∖(A ∪NeG(A))∣NeG(A) ∪PaG(C)

15
by contraction and decomposition. This implies C2∗(Lauritzen, 1996, Theorem 3.7). Moreover, let
D = {D1,... ,Dn}. Then
(1) D1 ⊥pNdG(C) ∖PaG(D)∣(D ∖D1) ∪PaG(D) by L2∗with A = D1 and S = D ∖D1.
(2) D2 ⊥pNdG(C) ∖PaG(D)∣(D ∖D2) ∪PaG(D) by L2∗with A = D2 and S = D ∖D2.
(3) D1 ∪D2 ⊥pNdG(C) ∖PaG(D)∣(D ∖(D1 ∪D2)) ∪PaG(D) by symmetry and intersection on
(1) and (2).
(4) D3 ⊥pNdG(C) ∖PaG(D)∣(D ∖D3) ∪PaG(D) by L2∗with A = D3 and S = D ∖D3.
(5) D1 ∪D2 ∪D3 ⊥pNdG(C) ∖PaG(D)∣(D ∖(D1 ∪D2 ∪D3)) ∪PaG(D) by symmetry and
intersection on (3) and (4).
Continuing with this for D4,... ,Dn leads to C1∗.
□
Proof of Theorem 8. To see the only if part, note that L1 and L2∗imply P1 and P2∗by weak
union. To see the if part, let NdG(C) ∖PaG(A ∪S) = {B1,... ,Bn}. Then
(1) A⊥pB1∣S ∪NdG(C) ∖B1 by P2∗with B = B1.
(2) A⊥pB2∣S ∪NdG(C) ∖B2 by P2∗with B = B2.
(3) A⊥pB1 ∪B2∣S ∪NdG(C) ∖(B1 ∪B2) by intersection on (1) and (2).
(4) A⊥pB3∣S ∪NdG(C) ∖B3 by P2∗with B = B3.
(5) A⊥pB1 ∪B2 ∪B3∣S ∪NdG(C) ∖(B1 ∪B2 ∪B3) by intersection on (3) and (4).
Continuing with this for B4,... ,Bn leads to L2∗. Finally, let C ∖(A ∪NeG(A)) = {B1,... ,Bn}.
Then
(6) A⊥pB1∣NdG(C) ∪C ∖(A ∪B1) by P1 with B = B1.
(7) A⊥pB2∣NdG(C) ∪C ∖(A ∪B2) by P1 with B = B2.
(8) A⊥pB1 ∪B2∣NdG(C) ∪C ∖(A ∪B1 ∪B2) by intersection on (6) and (7).
(9) A⊥pB3∣NdG(C) ∪C ∖(A ∪B3) by P1 with B = B3.
(10) A⊥pB1 ∪B2 ∪B3∣NdG(C) ∖(B1 ∪B2 ∪B3) by intersection on (8) and (9).
Continuing with this for B4,... ,Bn leads to L1.
□
Proof of Theorem 9. It suﬃces to show that every path in G connecting α and β given Z can
be transformed into a path in G′ connecting α and β given Z and vice versa, with α,β ∈V and
Z ⊆V ∖(α ∪β).
Let ρ denote a path in G connecting α and β given Z. We can easily transform ρ into a path ρ′ in
G′ between α and β: Simply, replace every maximal subpath of ρ of the form V1 −V2 −...−Vn−1 −Vn
(n ≥2) with V1 ←ǫV1 −ǫV2 −... −ǫVn−1 −ǫVn →Vn. We now show that ρ′ is connecting given Z.
First, if B ∈V is a collider on ρ′, then ρ′ must have one of the following subpaths:
A
B
C
A
B
ǫB
ǫC
ǫB
B
C
ǫA
with A,C ∈V . Therefore, ρ must have one of the following subpaths (speciﬁcally, if ρ′ has the
i-th subpath above, then ρ has the i-th subpath below):
A
B
C
A
B
C
A
B
C
In either case, B is a collider on ρ and, thus, B ∈AnG(Z) for ρ to be connecting given Z. Then,
B ∈AnG′(Z) by construction of G′ and, thus, B ∈AnG′(Dt(Z)).
Second, if B ∈V is a non-collider on ρ′, then ρ′ must have one of the following subpaths:
A
B
C
A
B
C
A
B
C
A
B
ǫB
ǫC
ǫB
B
C
ǫA
with A,C ∈V . Therefore, ρ must have one of the following subpaths (speciﬁcally, if ρ′ has the
i-th subpath above, then ρ has the i-th subpath below):
A
B
C
A
B
C
A
B
C
A
B
C
A
B
C

16
In either case, B is a non-collider on ρ and, thus, B ∉Z for ρ to be connecting given Z. Since
Z contains no error node, Z cannot determine any node in V that is not already in Z.
Then,
B ∉Dt(Z).
Third, if ǫB is a non-collider on ρ′ (note that ǫB cannot be a collider on ρ′), then ρ′ must have
one of the following subpaths:
A
B
ǫB
ǫC
ǫB
B
C
ǫA
α = B
ǫB
ǫC
ǫB
B = β
ǫA
A
B
ǫB
ǫC
ǫB
B
C
ǫA
ǫA
ǫB
ǫC
with A,C ∈V . Recall that ǫB ∉Z because Z ⊆V ∖(α ∪β). In the ﬁrst case, if α = A then A ∉Z,
else A ∉Z for ρ to be connecting given Z. Then, ǫB ∉Dt(Z). In the second case, if β = C then
C ∉Z, else C ∉Z for ρ to be connecting given Z. Then, ǫB ∉Dt(Z). In the third and fourth cases,
B ∉Z because α = B or β = B. Then, ǫB ∉Dt(Z). In the ﬁfth and sixth cases, B ∉Z for ρ to be
connecting given Z. Then, ǫB ∉Dt(Z). The last case implies that ρ has the following subpath:
A
B
C
Thus, B is a non-collider on ρ, which implies that B ∉Z or PaG(B)∖Z ≠∅for ρ to be connecting
given Z. In either case, ǫB ∉Dt(Z) (recall that PaG′(B) = PaG(B) ∪ǫB by construction of G′).
Finally, let ρ′ denote a path in G′ connecting α and β given Z. We can easily transform ρ′
into a path ρ between α and β: Simply, replace every maximal subpath of ρ′ of the form V1 ←
ǫV1 −ǫV2 −...−ǫVn−1 −ǫVn →Vn (n ≥2) with V1−V2 −...−Vn−1 −Vn. We now show that ρ is connecting
given Z.
First, note that all the nodes in ρ are in V . Moreover, if B is a collider on ρ, then ρ must have
one of the following subpaths:
A
B
C
A
B
C
A
B
C
with A,C ∈V . Therefore, ρ′ must have one of the following subpaths (speciﬁcally, if ρ has the
i-th subpath above, then ρ′ has the i-th subpath below):
A
B
C
A
B
ǫB
ǫC
ǫB
B
C
ǫA
In either case, B is a collider on ρ′ and, thus, B ∈AnG′(Dt(Z)) for ρ′ to connecting given Z.
Since Z contains no error node, Z cannot determine any node in V that is not already in Z. Then,
B ∈Dt(Z) iﬀB ∈Z. Since no error node is a descendant of B, then any node D ∈Dt(Z) that is
a descendant of B must be in V which, as seen, implies that D ∈Z. Then, B ∈AnG′(Dt(Z)) iﬀ
B ∈AnG′(Z). Moreover, B ∈AnG′(Z) iﬀB ∈AnG(Z) by construction of G′. These results together
imply that B ∈AnG(Z).
Second, if B is a non-collider on ρ, then ρ must have one of the following subpaths:
A
B
C
A
B
C
A
B
C
A
B
C
A
B
C
A
B
C
with A,C ∈V . Therefore, ρ′ must have one of the following subpaths (speciﬁcally, if ρ has the
i-th subpath above, then ρ′ has the i-th subpath below):
A
B
C
A
B
C
A
B
C
A
B
ǫB
ǫC
ǫB
B
C
ǫA
ǫA
ǫB
ǫC
In the ﬁrst ﬁve cases, B is a non-collider on ρ′ and, thus, B ∉Dt(Z) for ρ′ to be connecting
given Z. Since Z contains no error node, Z cannot determine any node in V that is not already

17
in Z. Then, B ∉Z. In the last case, ǫB is a non-collider on ρ′ and, thus, ǫB ∉Dt(Z) for ρ′ to be
connecting given Z. Then, B ∉Z or PaG′(B) ∖(ǫB ∪Z) ≠∅. Then, B ∉Z or PaG(B) ∖Z ≠∅
(recall that PaG′(B) = PaG(B) ∪ǫB by construction of G′).
□
Proof of Theorem 10. Modify the equation A = βAPaG(A) + ǫA by replacing each B ∈V in the
right-hand side of the equation with the right-hand side of the equation of B, i.e. βBPaG(B) + ǫB.
Since G is directed acyclic, repeating this process results in a set of equations for the elements of
V whose right-hand sides are linear combinations of the elements of ǫ. In other words, V = δǫ with
ǫ ∼N (0,Λ). Then, V ∼N (0,δΛδT ).
□
Proof of Theorem 11. Equation (1) implies for any A ∈V that
A⊥p(V ∪ǫ)(V ∪ǫ) ∖(A ∪PaG′(A))∣PaG′(A)
and thus
A⊥p(V ∪ǫ)NdG′(A) ∖PaG′(A)∣PaG′(A)
(3)
by decomposition.
Moreover, Equation (1) implies for any ǫC ∈Cc(G′
ǫ) that
p(ǫC ∪NdG′(ǫC)) =
∏
K∈Cc(G′ǫ)
p(ǫK)
∏
A∈NdG′ (ǫC)∩V
βAPaG′(A) = p(ǫC)p(NdG′(ǫC))
(4)
and thus
ǫC ⊥p(V ∪ǫ)NdG′(ǫC)∣∅
and thus
ǫA⊥p(V ∪ǫ)NdG′(ǫC)∣ǫZ
(5)
where ǫA ∈ǫC and ǫZ ⊆ǫC ∖ǫA, by decomposition and weak union.
Finally, Equation (2) implies for any ǫA ∈ǫC and ǫC ∈Cc(G′
ǫ) that
ǫA⊥p(V ∪ǫ)ǫC ∖(ǫA ∪NeG′(ǫA))∣NeG′(ǫA)
by Lauritzen (1996, Theorem 3.7 and Proposition 5.2), and thus
p(ǫC) = h(ǫA ∪NeG′(ǫA))k(ǫC ∖ǫA)
by Lauritzen (1996, Equation 3.6). This together with Equation (4) imply that
p(ǫC ∪NdG′(ǫC)) = h(ǫA ∪NeG′(ǫA))k(ǫC ∖ǫA)p(NdG′(ǫC))
and thus
ǫA⊥p(V ∪ǫ)ǫC ∖(ǫA ∪NeG′(ǫA))∣NdG′(ǫC)NeG′(ǫA)
(6)
by Lauritzen (1996, Equation 3.6).
Consequently, Equations (3), (5) and (6) imply that p(V ∪ǫ) satisﬁes the global Markov property
with respect to G′ by Theorem 7 because (i) G′ is actually an AMP CG over V ∪ǫ, (ii) A is the only
node in the connectivity component of G′ that contains A, and (iii) ǫC has no parents in G′. Then,
p(V ) satisﬁes the global Markov property with respect to G, because G and G′ represent the same
separations over V by Theorem 9.
□
References
Andersson, S. A., Madigan, D. and Perlman, M. D. Alternative Markov Properties for Chain Graphs.
Scandinavian Journal of Statistics, 28:33-85, 2001.
Bareinboim, E. and Tian, J. Recovering Causal Eﬀects From Selection Bias. In Proceedings of the
29th AAAI Conference on Artiﬁcial Intelligence, 3475-3481, 2015.
Cox, D. R. and Wermuth, N. Multivariate Dependencies - Models, Analysis and Interpretation.
Chapman & Hall, 1996.
Evans, R. J. and Richardson, T. S. Marginal log-linear Parameters for Graphical Markov Models.
Journal of the Royal Statistical Society B, 75:743-768, 2013.
Biere, A., Heule, M., van Maaren, H. and Walsh, T. (editors). Handbook of Satisﬁability. IOS Press,
2009.
Gebser, M., Kaufmann, B., Kaminski, R., Ostrowski, M., Schaub, T., Schneider, M. Potassco: The
Potsdam Answer Set Solving Collection. AI Communications, 24:107-124, 2011.

18
Gelfond, M. and Lifschitz, V. The Stable Model Semantics for Logic Programming. In Proceedings
of 5th Logic Programming Symposium, 1070-1080, 1988.
Kang, C. and Tian, J. Markov Properties for Linear Causal Models with Correlated Errors. Journal
of Machine Learning Research, 10:41-70, 2009.
Koster, J. T. A. On the Validity of the Markov Interpretation of Path Diagrams of Gaussian Struc-
tural Equations Systems with Correlated Errors. Scandinavian Journal of Statistics, 26:413-431,
1999.
Koster, J. T. A. Marginalizing and Conditioning in Graphical Models. Bernoulli, 8:817-840, 2002.
Lauritzen, S. L. Graphical Models. Oxford University Press, 1996.
Levitz, M., Perlman M. D. and Madigan, D. Separation and Completeness Properties for AMP
Chain Graph Markov Models. The Annals of Statistics, 29:1751-1784, 2001.
Niemel¨a, I. Logic Programs with Stable Model Semantics as a Constraint Programming Paradigm.
Annals of Mathematics and Artiﬁcial Intelligence, 25:241-273, 1999.
Pearl, J. Causal Diagrams for Empirical Research. Biometrika, 82:669-688, 1995.
Pearl, J. Causality: Models, Reasoning, and Inference (2nd ed.). Cambridge University Press, 2009.
Pearl, J. and Wermuth, N. When Can Association Graphs Admit a Causal Explanation ?
In
Proceedings of the 4th International Workshop on Artiﬁcial Intelligence and Statistics, 141-150,
1993.
Richardson, T. Markov Properties for Acyclic Directed Mixed Graphs. Scandinavian Journal of
Statistics, 30:145-157, 2003.
Richardson, T. and Spirtes, P. Ancestral Graph Markov Models. The Annals of Statistics, 30:962-
1030, 2002.
Sadeghi, K. and Lauritzen, S. L. Markov Properties for Mixed Graphs. Bernoulli, 20:676-696, 2014.
Simons, P., Niemel¨a, I. and Soininen, T. Extending and Implementing the Stable Model Semantics.
Artiﬁcial Intelligence, 138:181-234, 2002.
Sonntag, D. and Pe˜na, J. M. Chain Graph Interpretations and their Relations Revisited. Interna-
tional Journal of Approximate Reasoning, 58:39-56, 2015.
Sonntag, D. and Pe˜na, J. M. On Expressiveness of the Chain Graph Interpretations. International
Journal of Approximate Reasoning, 68:91-107, 2016.
Studen´y, M. Probabilistic Conditional Independence Structures. Springer, 2005.

