Category theory in context
Emily Riehl

Chapter 6 is adapted with permission from Chapter 1 of Categorical Homotopy Theory,
by Emily Riehl, Cambridge University Press. © Emily Riehl 2014

To Peter Johnstone, whose beautiful Part III lectures provided my ﬁrst acquaintance with
category theory and form the skeleton of this book.
and
To Martin Hyland, who guided my initial explorations of this subject’s frontiers and
inspired my aspirations to think categorically.


The aim of theory really is, to a great extent, that
of systematically organizing past experience in
such a way that the next generation, our students
and their students and so on, will be able to
absorb the essential aspects in as painless a way
as possible, and this is the only way in which you
can go on cumulatively building up any kind of
scientiﬁc activity without eventually coming to a
dead end.
M.F. Atiyah, “How research is carried out”
[Ati74]


Contents
Preface
ix
Sample corollaries
x
A tour of basic categorical notions
xi
Note to the reader
xv
Notational conventions
xvi
Acknowledgments
xvi
Chapter 1.
Categories, Functors, Natural Transformations
1
1.1.
Abstract and concrete categories
3
1.2.
Duality
9
1.3.
Functoriality
13
1.4.
Naturality
23
1.5.
Equivalence of categories
29
1.6.
The art of the diagram chase
36
1.7.
The 2-category of categories
44
Chapter 2.
Universal Properties, Representability, and the Yoneda Lemma
49
2.1.
Representable functors
50
2.2.
The Yoneda lemma
55
2.3.
Universal properties and universal elements
62
2.4.
The category of elements
66
Chapter 3.
Limits and Colimits
73
3.1.
Limits and colimits as universal cones
74
3.2.
Limits in the category of sets
84
3.3.
Preservation, reﬂection, and creation of limits and colimits
90
3.4.
The representable nature of limits and colimits
93
3.5.
Complete and cocomplete categories
99
3.6.
Functoriality of limits and colimits
106
3.7.
Size matters
109
3.8.
Interactions between limits and colimits
110
Chapter 4.
Adjunctions
115
4.1.
Adjoint functors
116
4.2.
The unit and counit as universal arrows
122
4.3.
Contravariant and multivariable adjoint functors
126
4.4.
The calculus of adjunctions
132
4.5.
Adjunctions, limits, and colimits
136
4.6.
Existence of adjoint functors
143
Chapter 5.
Monads and their Algebras
153
vii

viii
CONTENTS
5.1.
Monads from adjunctions
154
5.2.
Adjunctions from monads
158
5.3.
Monadic functors
166
5.4.
Canonical presentations via free algebras
168
5.5.
Recognizing categories of algebras
173
5.6.
Limits and colimits in categories of algebras
180
Chapter 6.
All Concepts are Kan Extensions
189
6.1.
Kan extensions
190
6.2.
A formula for Kan extensions
193
6.3.
Pointwise Kan extensions
199
6.4.
Derived functors as Kan extensions
204
6.5.
All concepts
209
Epilogue: Theorems in Category Theory
217
E.1.
Theorems in basic category theory
217
E.2.
Coherence for symmetric monoidal categories
219
E.3.
The universal property of the unit interval
221
E.4.
A characterization of Grothendieck toposes
222
E.5.
Embeddings of abelian categories
223
Bibliography
225
Catalog of Categories
229
Glossary of Notation
231
Index
233

Preface
Atiyah described mathematics as the “science of analogy.” In this vein, the purview
of category theory is mathematical analogy. Category theory provides a cross-disciplinary
language for mathematics designed to delineate general phenomena, which enables the
transfer of ideas from one area of study to another. The category-theoretic perspective can
function as a simplifying1 abstraction, isolating propositions that hold for formal reasons
from those whose proofs require techniques particular to a given mathematical discipline.2
A subtle shift in perspective enables mathematical content to be described in language
that is relatively indiﬀerent to the variety of objects being considered. Rather than charac-
terize the objects directly, the categorical approach emphasizes the transformations between
objects of the same general type. A fundamental lemma in category theory implies that any
mathematical object can be characterized by its universal property—loosely by a represen-
tation of the morphisms to or from other objects of a similar form. For example, tensor
products, “free” constructions, and localizations are characterized by universal properties in
appropriate categories, or mathematical contexts. A universal property typically expresses
one of the mathematical roles played by the object in question. For instance, one universal
property associated to the unit interval identiﬁes self-homeomorphisms of this space with
re-parameterizations of paths. Another highlights the operation of gluing two intervals end
to end to obtain a new interval, the construction used to deﬁne composition of paths.
Certain classes of universal properties deﬁne blueprints which specify how a new
object may be built out of a collection of existing ones. A great variety of mathematical
constructions ﬁt into this paradigm: products, kernels, completions, free products, “gluing”
constructions, and quotients are all special cases of the general category-theoretic notion of
limits or colimits, a characterization that makes it easy to deﬁne transformations to or from
the objects so-deﬁned. The input data for these constructions are commutative diagrams,
which are themselves a vehicle for mathematical deﬁnitions, e.g., of rings or algebras,
representations of a group, or chain complexes.
Important technical diﬀerences between particular varieties of mathematical objects
can be described by the distinctive properties of their categories: that rings have all limits
and colimits while ﬁelds have few, that a continuous bijection deﬁnes an isomorphism of
compact Hausdorﬀspaces but not of generic topological spaces. Constructions that convert
mathematical objects of one type into objects of another type often deﬁne transformations
between categories, called functors. Many of the basic objects of study in modern algebraic
topology and algebraic geometry involve functors and would be impossible to deﬁne without
category-theoretic language.
1In his mathematical notebooks, Hilbert formulated a “24th problem” (inspired by his work on syzygies) to
develop a criterion of simplicity for evaluating competing proofs of the same result [TW02].
2For example, the standard properties of induced representations (Frobenius reciprocity, transitivity of induc-
tion, even the explicit formula) are true of any construction deﬁned as a left Kan extension; character tables,
however, are non-formal.
ix

x
PREFACE
Category theory also contributes new proof techniques, such as diagram chasing or
arguments by duality; Steenrod called these methods “abstract nonsense.”3 The aim of
this text is to introduce the language, philosophy, and basic theorems of category theory.
A complementary objective is to put this theory into practice: studying functoriality in
algebraic topology, naturality in group theory, and universal properties in algebra.
Practitioners often assert that the hard part of category theory is to state the correct
deﬁnitions. Once these are established and the categorical style of argument is suﬃciently
internalized, proving the theorems tends to be relatively easy.4 Indeed, the proofs of several
propositions appearing in this text are left as exercises, with conﬁdence that the reader will
eventually ﬁnd it more eﬃcient to supply their own arguments than to read the author’s.5 The
relative simplicity of the proofs of major theorems occasionally leads detractors to assert
that there are no theorems in category theory. This is not at all the case! Counterexamples
abound in the text that follows. A short list of further signiﬁcant theorems, beyond the
scope of a ﬁrst course but not too far to be out of the reach of comprehension, appears as
an epilogue.
Sample corollaries
It is diﬃcult to preview the main theorems in category theory before developing
ﬂuency in the language needed to state them. (A reader possessing such ﬂuency might
wish to glance ahead to §E.1.) Instead, here are a few corollaries, results in other areas
of mathematics that follow trivially as special cases of general categorical results that are
proven in this text.
As an application of the theory of equivalence between categories:
Corollary 1.5.13. In a path-connected space, any choice of basepoint yields an isomor-
phic fundamental group.
A fundamental lemma in category theory has the following two results as corollaries:
Corollary 2.2.9. Every row operation on matrices with n rows is deﬁned by left multipli-
cation by some n × n matrix, namely the matrix obtained by performing the row operation
on the identity matrix.
Corollary 2.2.10. Any group is isomorphic to a subgroup of a permutation group.
A special case of a general result involving the interchange of limits and colimits is:
Corollary 3.8.4. For any pair of sets X and Y and any function f : X × Y →R
sup
x∈X
inf
y∈Y
f(x, y) ≤inf
y∈Y
sup
x∈X
f(x, y)
3Lang’s Algebra [Lan02, p. 759] supports the general consensus that this was not intended as an epithet:
In the forties and ﬁfties (mostly in the works of Cartan, Eilenberg, MacLane, and
Steenrod, see [CE56]), it was realized that there was a systematic way of developing
certain relations of linear algebra, depending only on fairly general constructions
which were mostly arrow-theoretic, and were aﬀectionately called abstract nonsense
by Steenrod.
4A famous exercise in Lang’s Algebra asks the reader to “Take any book on homological algebra, and prove
all the theorems without looking at the proofs given in that book” [Lan84, p. 175]. Homological algebra is the
subject whose development induced Eilenberg and Mac Lane to introduce the general notions of category, functor,
and natural transformation.
5In the ﬁrst iteration of the course that inspired the writing of these lecture notes, the proofs of several major
theorems were also initially left to the exercises, with a type-written version appearing only after the problem set
was due.

A TOUR OF BASIC CATEGORICAL NOTIONS
xi
whenever these inﬁma and suprema exist.
The following ﬁve results illustrate a few of the many corollaries of a common theo-
rem, which describes one consequence of a type of “duality” enjoyed by certain pairs of
mathematical constructions:
Corollary 4.5.4. For any function f : A →B, the inverse image function f −1 : PB →PA
between the power sets of A and B preserves both unions and intersections, while the direct
image function f∗: PA →PB only preserves unions.
Corollary 4.5.5. For any vector spaces U, V, W,
U ⊗(V ⊕W)  (U ⊗V) ⊕(U ⊗W) .
Corollary 4.5.6. For any cardinals α, β, γ, cardinal arithmetic satisﬁes the laws:
α × (β + γ) = (α × β) + (α × γ)
(β × γ)α = βα × γα
αβ+γ = αβ × αγ .
Corollary 4.5.7. The free group on the set X ⊔Y is the free product of the free groups on
the sets X and Y.
Corollary 4.5.8. For any R–S bimodule M, the tensor product M ⊗S −is right exact.
Finally, a general theorem that recognizes categories whose objects bear some sort of
“algebraic” structure has a number of consequences, including:
Corollary 5.6.2. Any bijective continuous function between compact Hausdorﬀspaces
is a homeomorphism.
This is not to say that category theory necessarily provides a more eﬃcient proof of
these results. In many cases, the proof that general consensus designates the “most elegant”
reﬂects the categorical argument. The point is that the category-theoretic perspective allows
for an eﬃcient packaging of general arguments that can be used over and over again and
eliminates contextual details that can safely be ignored. For instance, our proof that the
tensor product commutes with the direct sum of vector spaces will not make use of any
bases, but appeals instead to the universal properties of the tensor product and direct sum
constructions.
A tour of basic categorical notions
. . . the science of mathematics exempliﬁes the
interdependence of its parts.
Saunders Mac Lane, “Topology and logic as a
source of algebra” [ML76]
A category is a context for the study of a particular class of mathematical objects.
Importantly, a category is not simply a type signature, it has both “nouns” and “verbs,”
containing speciﬁed collections of objects and transformations, called morphisms,6 between
them. Groups, modules, topological spaces, measure spaces, ordinals, and so forth form
categories, but these classiﬁcations are not the main point. Rather, the action of packaging
each variety of objects into a category shifts one’s perspective from the particularities
of each mathematical sub-discipline to potential commonalities between them. A basic
observation along these lines is that there is a single categorical deﬁnition of isomorphism
6The term “morphism” is derived from homomorphism, the name given in algebra to a structure-preserving
function. Synonyms include “arrow” (because of the notation “→”) and “map” (adopting the standard mathemat-
ical colloquialism).

xii
PREFACE
that specializes to deﬁne isomorphisms of groups, homeomorphisms of spaces, order
isomorphisms of posets, and even isomorphisms between categories (see Deﬁnition 1.1.9).
Mathematics is full of constructions that translate mathematical objects of one kind
into objects of another kind. A construction that converts the objects in one category into
objects in another category is functorial if it can be extended to a mapping on morphisms
in such a way that composites and identity morphisms are preserved. Such constructions
deﬁne morphisms between categories, called functors. Functoriality is often a key prop-
erty: for instance, the chain rule from multivariable calculus expresses the functoriality
of the derivative (see Example 1.3.2(x)). In contrast with earlier numerical invariants in
topology, functorial invariants (the fundamental group, homology) tend both to be more
easily computable and also provide more precise information. While the Euler character-
istic can distinguish between the closed unit disk and its boundary circle, an easy proof
by contradiction involving the functoriality of their fundamental groups proves that any
continuous endomorphism of the disk must have a ﬁxed point (see Theorem 1.3.3).
On occasion, functoriality is achieved by categorifying an existing mathematical con-
struction. “Categoriﬁcation” refers to the process of turning sets into categories by adding
morphisms, whose introduction typically demands a re-interpretation of the elements of the
sets as related mathematical objects. A celebrated knot invariant called the Jones polyno-
mial must vanish for any knot diagram that presents the unknot, but its categoriﬁcation, a
functor7 called Khovanov homology, detects the unknot in the sense that any knot diagram
whose Khovanov homology vanishes must represent the unknot. Khovanov homology
converts an oriented link diagram into a chain complex whose graded Euler characteristic
is the Jones polynomial.
A functor may describe an equivalence of categories, in which case the objects in one
category can be translated into and reconstructed from the objects of another. For instance,
there is an equivalence between the category of ﬁnite-dimensional vector spaces and linear
maps and a category whose objects are natural numbers and whose morphisms are matrices
(see Corollary 1.5.11). This process of conversion from college linear algebra to high
school linear algebra deﬁnes an equivalence of categories; eigenvalues and eigenvectors
can be developed for matrices or for linear transformations, it makes no diﬀerence.
Treating categories as mathematical objects in and of themselves, a basic observation is
that the process of formally “turning around all the arrows” in a category produces another
category. In particular, any theorem proven for all categories also applies to these opposite
categories; the re-interpretation of the result in the opposite of an opposite category yields
the statement of the dual theorem. Categorical constructions also admit duals: for instance,
in Zermelo–Fraenkel set theory, a function f : X →Y is deﬁned via its graph, a subset
of X × Y isomorphic to X. The dual presentation represents a function via its cograph, a
Y-indexed partition of X ⊔Y. Categorically-proven properties of the graph representation
will dualize to describe properties of the cograph representation.
Categories and functors were introduced by Eilenberg and Mac Lane with the goal of
giving precise meaning to the colloquial usage of “natural” to describe families of isomor-
phisms. For example, for any triple of k-vector spaces U, V, W, there is an isomorphism
(0.0.1)
Vectk(U ⊗k V, W)  Vectk(U, Hom(V, W))
between the set of linear maps U ⊗k V →W and the set of linear maps from U to the vector
space Hom(V, W) of linear maps from V to W. This isomorphism is natural in all three
7Morally, one could argue that functoriality is the main innovation in this construction, but making this
functoriality precise is somewhat subtle [CMW09].

A TOUR OF BASIC CATEGORICAL NOTIONS
xiii
variables, meaning it deﬁnes an isomorphism not simply between these sets of maps but
between appropriate set-valued functors of U, V, and W. Chapter 1 introduces the basic
language of category theory, deﬁning categories, functors, natural transformations, and
introducing the principle of duality, equivalences of categories, and the method of proof by
diagram chasing.
In fact, the isomorphism (0.0.1) deﬁnes the vector space U ⊗k V by declaring that
linear maps U ⊗k V →W correspond to linear maps U →Hom(V, W), i.e., to bilinear
maps U × V →W.
This deﬁnition is suﬃciently robust that important properties of
the tensor product—for instance its symmetry and associativity—can be proven without
reference to any particular construction (see Proposition 2.3.9 and Exercise 2.3.ii). The
advantages of this approach compound as the mathematical objects so-described become
more complicated.
In Chapter 2, we study such deﬁnitions abstractly. A characterization of the morphisms
either to or from a ﬁxed object describes its universal property; the cases of “to” or “from”
are dual. By the Yoneda lemma—which, despite its innocuous statement, is arguably the
most important result in category theory—every object is characterized by either of its
universal properties. For example, the Sierpinski space is characterized as a topological
space by the property that continuous functions X →S correspond naturally to open
subsets of X.
The complete graph on n vertices is characterized by the property that
graph homomorphisms G →Kn correspond to n-colorings of the vertices of the graph
G with the property that adjacent vertices are assigned distinct colors. The polynomial
ring Z[x1, . . . , xn] is characterized as a commutative unital ring by the property that ring
homomorphisms Z[x1, . . . , xn] →R correspond to n-tuples of elements (r1, . . . , rn) ∈R.
Modern algebraic geometry begins from the observation that a commutative ring can be
identiﬁed with the functor that it represents.
The idea of probing a ﬁxed object using morphisms abutting to it from other objects
in the category gives rise to a notion of “generalized elements” (see Remark 3.4.15). The
elements of a set A are in bijection with functions ∗→A with domain a singleton set; a
generalized element of A is a morphism X →A with generic domain. In the category of
directed graphs, a parallel pair of graph homomorphisms φ, ψ: A ⇒B can be distinguished
by considering generalized elements of A whose domain is the free-living vertex or the
free-living directed edge.8 A related idea leads to the representation of a topological space
via its singular complex.
The Yoneda lemma implies that a general mathematical object can be represented as
a functor valued in the category of sets. A related classical antecedent is a result that
comforted those who were troubled by the abstract deﬁnition of a group: namely that any
group is isomorphic to a subgroup of a permutation group (see Corollary 2.2.10). A deep
consequence of these functorial representations is that proofs that general categorically-
described constructions are isomorphic reduce to the construction of a bijection between
their set-theoretical analogs (for instance, see the proof of Theorem 3.4.12).
Chapter 3 studies a special case of deﬁnitions by universal properties, which come in
two dual forms, referred to as limits and colimits. For example, aggregating the data of the
cyclic p-groups Z/pn and homomorphisms between them, one can build more complicated
abelian groups. Limit constructions build new objects in a category by “imposing equations”
on existing ones. For instance, the diagram of quotient homomorphisms
· · · ↠Z/pn ↠· · · ↠Z/p3 ↠Z/p2 ↠Z/p
8The incidence relation in the graph A can be recovered by also considering the homomorphisms between
these graphs.

xiv
PREFACE
has a limit, namely the group Zp of p-adic integers: its elements can be understood as
tuples of elements (an ∈Z/pn)n∈ω that are compatible modulo congruence. There is a
categorical explanation for the fact that Zp is a commutative ring and not merely an abelian
group: each of these quotient maps is a ring homomorphism, and so this diagram and also
its limit lifts to the category of rings.9
By contrast, colimit constructions build new objects by “gluing together” existing ones.
The colimit of the sequence of inclusions
Z/p ,→Z/p2 ,→Z/p3 ,→· · · ,→Z/pn ,→· · ·
is the Prüfer p-group Z[ 1
p]/Z, an abelian group which can be presented via generators and
relations as
(0.0.2)
Z[ 1
p]/Z B
D
g1, g2, . . .
 pg1 = 0, pg2 = g1, pg3 = g2, . . .
E
.
The inclusion maps are not ring homomorphisms (failing to preserve the multiplicative
identity) and indeed it turns out that the Prüfer p-group does not admit any non-trivial
multiplicative structure.
Limits and colimits are accompanied by universal properties that generalize familiar
universal properties in analysis. A poset (A, ≤) may be regarded as a category whose objects
are the elements a ∈A and in which a morphism a →a′ is present if and only if a ≤a′.
The supremum of a collection of elements {ai}i∈I, an example of a colimit in the category
(A, ≤), has a universal property: namely to prove that
sup
i∈I
ai ≤a
is equivalent to proving that ai ≤a for all i ∈I. The universal property of a generic colimit
is a generalization of this, where the collection of morphisms (ai →a)i∈I is regarded as
data, called a cone under the diagram, rather than simply a family of conditions. Limits
have a dual universal property that specializes to the universal property of the inﬁmum of
a collection of elements in a poset.
Chapter 4 studies a generalization of the notion of equivalence of categories, in which
a pair of categories are connected by a pair of opposite-pointing translation functors called
an adjunction. An adjunction expresses a kind of “duality” between a pair of functors, ﬁrst
recognized in the case of the construction of the tensor product and hom functors for abelian
groups (see Example 4.3.11). Any adjunction restricts to deﬁne an equivalence between
certain subcategories, but categories connected by adjunctions need not be equivalent.
For instance, there is an adjunction connecting the poset of subsets of Cn and the poset
of subsets of the ring C[x1, . . . , xn] that restricts to deﬁne an equivalence between Zariski
closed subsets and radical ideals (see Example 4.3.2). Another adjunction encodes a duality
between the constructions of the suspension and of the loop space of a based topological
space (see Example 4.3.14).
When a “forgetful” functor admits an adjoint, that adjoint deﬁnes a “free” (or, less
commonly, the dual “cofree”) construction. Such functors deﬁne universal solutions to
optimization problems, e.g., of adjoining a multiplicative unit to a non-unital ring. The
existence of free groups or free rings have implications for the constructions of limits in these
categories (namely, Theorem 4.5.2); the dual properties for colimits do not hold because
there are no “cofree” groups or rings in general. A category-theoretic re-interpretation
of the construction of the Stone–Čech compactiﬁcation of a topological space deﬁnes a
9The lifting of the limit is considerably more subtle than the lifting of the diagram. Results of this nature
motivate Chapter 5.

NOTE TO THE READER
xv
left adjoint to any limit-preserving functor between any pair of categories with similar
set-theoretic properties (see Theorem 4.6.10 and Example 4.6.12).
Many familiar varieties of “algebraic” objects—such as groups, rings, modules, pointed
sets, or sets acted on by a group—admit a “free–forgetful” adjunction with the category of
sets. A special property of these adjoint functors explains many of the common features
of the categories of algebras that are presented in this manner.
Chapter 5 introduces
the categorical approach to universal algebra, which distinguishes the categories of rings,
compact Hausdorﬀspaces, and lattices from the set-theoretically similar categories of
ﬁelds, generic topological spaces, and posets. The former categories, but not the latter, are
categories of algebras over the category of sets.
The notion of algebra is given a precise meaning in relation to a monad, an endofunctor
that provides a syntactic encoding of algebraic structure that may be borne by objects in the
category on which it acts. Monads are also used to construct categories whose morphisms
are partially-deﬁned or non-deterministic functions, such as Markov kernels (see Example
5.2.10), and are separately of interest in computer science. A key result in categorical
universal algebra is a vast generalization of the notion of a presentation of a group via
generators and relations, such as in (0.0.2), which demonstrates that an algebra of any
variety can be presented canonically as a coequalizer10 of a pair of maps from a free
algebra on the “relations” to a free algebra on the “generators.”
The concluding Chapter 6 introduces a general formalism that can be used to redeﬁne
all of the basic categorical notions introduced in the ﬁrst part of the text. Special cases of
Kan extensions deﬁne representable functors, limits, colimits, adjoint functors, and monads,
and their study leads to a generalization of, as well as a dualization of, the Yoneda lemma.
In the most important cases, a Kan extension can be computed by a particular formula,
which specializes to give the construction of a representation for a group induced from a
representation for a subgroup (see Example 6.2.8), to provide a new way to think about
the collection of ultraﬁlters on a set (see Example 6.5.12), and to deﬁne an equivalence of
categories connecting sheaves on a space with étale spaces over that space (see Exercise
6.5.iii).
A brief detour introduces derived functors, which are certain special Kan extensions that
are of great importance in homological algebra and algebraic topology. A recent categorical
discovery reveals that a common mechanism for constructing “point-set level” derived
functors yields total derived functors with superior universal properties (see Propositions
6.4.12 and 6.4.13). A ﬁnal motivation for the study of Kan extensions reaches beyond the
scope of this book. The calculus of Kan extensions facilitates the extension of basic category
theory to enriched, internal, ﬁbered, or higher-dimensional contexts, which provide natural
homes for more sophisticated varieties of mathematical objects whose transformations have
some sort of higher-dimensional structure.
Note to the reader
The text that follows is littered with examples drawn from a broad range of mathematical
areas. The examples are included for color or historical context but are never essential for
understanding the abstract category theory. In principle, one could study category theory
immediately after learning some basic set theory and logic, as no other prerequisites are
strictly required, but without some level of mathematical maturity it would be diﬃcult to
see what the point of it all is. We hope that the majority of examples are comprehensible in
outline, even if the details are unfamiliar, but if this is not the case, it is not worth stressing
10A coequalizer is a generalization of a cokernel to contexts that may lack a “zero” homomorphism.

xvi
PREFACE
over. Inevitably, given the diversity of mathematical tastes and experiences, the examples
presented here will seldom be optimized for any particular individual, and indeed, each
reader is encouraged to search for their own contexts in which to explore categorical ideas.
Notational conventions
An arrow symbol “→,” either in a display or in text, is only ever used to denote a
morphism in an appropriate category. In particular, the objects surrounding it necessarily
lie in a common category. Double arrows “⇒” are reserved for natural transformations,
the notation used to suggest the intuition that these are some variety of “2-dimensional”
morphisms. The symbol “7→,” read as “maps to,” appears occasionally when deﬁning a
function between sets by specifying its action on particular elements. The symbol “⇝” is
used in a less technical sense to mean something along the lines of “yields” or “leads to”
or “can be used to construct.” If the presence of certain morphisms implies the existence
of another morphism, the latter is often depicted with a dashed arrow “d” to suggest the
correct order of inference.11
We use “⇒” as an abbreviation for a parallel pair of morphisms, i.e., for a pair of
morphisms with common source and target, and “⇆” as an abbreviation for an opposing
pair of morphisms with sources and targets swapped.
Italics are used occasionally for emphasis and to highlight technical terms. Boldface
signals that a technical term is being deﬁned by its surrounding text.
The symbol “=” is reserved for genuine equality (with “B” used for deﬁnitional
equality), with “” used instead for isomorphism in the appropriate ambient category, by
far the more common occurrence.
Acknowledgments
Many of the theorems appearing here are standard fare for a ﬁrst course on category
theory, but the examples are not. Rather than rely solely on my own generative capacity, I
consulted a great many people while preparing this text and am grateful for their generosity
in sharing ideas.
To begin, I would like to thank the following people who responded to a call for
examples on the n-Category Café and the categories mailing list: John Baez, Martin
Brandenburg, Ronnie Brown, Tyler Bryson, Tim Campion, Yemon Choi, Adrian Clough,
Samuel Dean, Josh Drum, David Ellerman, Tom Ellis, Richard Garner, Sameer Gupta,
Gejza Jenča, Mark Johnson, Anders Kock, Tom LaGatta, Paul Levy, Fred Linton, Aaron
Mazel-Gee, Jesse McKeown, Kimmo Rosenthal, Mike Shulman, Peter Smith, Arnaud
Spiwack, Ross Street, John Terilla, Todd Trimble, Mozibur Ullah, Enrico Vitale, David
White, Graham White, and Qiaochu Yuan.
In particular, Anders Kock suggested a more general formulation of “the chain rule
expresses the functoriality of the derivative” than appears in Example 1.3.2(x). The ex-
pression of the fundamental theorem of Galois theory as an isomorphism of categories
that appears as Example 1.3.15 is a favorite exercise of Peter May’s. Charles Blair sug-
gested Exercise 1.3.iii and a number of expository improvements to the ﬁrst chapter. I
learned about the unnatural isomorphism of Proposition 1.4.4 from Mitya Boyarchenko.
Peter Haine suggested Example 1.4.6, expressing the Riesz representation theorem as a
natural isomorphism of Banach space-valued functors; Example 3.6.2, constructing the
path-components functor, and Example 3.8.6. He also contributed Exercises 1.2.v, 1.5.v,
1.6.iv, 3.1.xii, and 4.5.v and served as my LATEX consultant.
11Readers who dislike this convention can simply connect the dots.

ACKNOWLEDGMENTS
xvii
John Baez reminded me that the groupoid of ﬁnite sets is a categoriﬁcation of the
natural numbers, providing a suitable framework in which to prove certain basic equations
in elementary arithmetic; see Example 1.4.9 and Corollary 4.5.6. Juan Climent Vidal
suggested using the axiom of regularity to deﬁne the non-trivial part of the equivalence of
categories presented in Example 1.5.6 and contributed the equivalence of plane geometries
that appears as Exercise 1.5.viii. Samuel Dean suggested Corollary 1.5.13, Fred Linton
suggested Corollary 2.2.9, and Ronnie Brown suggested Example 3.5.8.
Ralf Meyer
suggested Example 2.1.5(vi), Example 5.2.6(ii), Corollary 4.5.8, and a number of exercises
including 2.1.ii and 2.4.v, which he used when teaching a similar course. He also pointed
me toward a simpler proof of Proposition 6.4.12.
Mozibur Ullah suggested Exercise 3.5.vii. I learned of the non-natural objectwise
isomorphism appearing in Example 3.6.5 from Martin Brandenburg who acquired it from
Tom Leinster. Martin also suggested the description of the real exponential function as
a Kan extension appearing in Example 6.2.7. Andrew Putman pointed out that Lang’s
Algebra constructs the free group on a set using the construction of the General Adjoint
Functor Theorem, recorded as Example 4.6.6. Paul Levy suggested using aﬃne spaces
to motivate the category of algebras over a monad, as discussed in Section 5.2; a similar
example was suggested by Enrico Vitale. Dominic Verity suggested something like Exercise
5.5.vii. Vladimir Sotirov pointed out that the appropriate size hypotheses were missing
from the original statement of Theorem 6.3.7 and directed me toward a more elegant proof
of Lemma 4.6.5.
Marina Lehner, while writing her undergraduate senior thesis under my direction,
showed me that an entirely satisfactory account of Kan extensions can be given without
the calculus of ends and coends. I have enjoyed, and this book has been enriched by,
several years of impromptu categorical conversations with Omar Antolín Camarena. I
am extremely appreciative of the careful readings undertaken by Tobias Barthel, Martin
Brandenburg, Benjamin Diamond, Darij Grinberg, Peter Haine, Ralf Meyer, Peter Smith,
and Juan Climent Vidal, who each sent detailed lists of corrections and suggestions. I would
also like to thank John Grafton and Janet Kopito, the acquisitions and in-house editors at
Dover Publications, and David Gargaro for his meticulous copyediting.
I am grateful for the perspicacious comments and questions from those who attended
the ﬁrst iteration of this course at Harvard—Paul Bamberg, Nathan Gupta, Peter Haine,
Andrew Liu, Wyatt Mackey, Nat Mayer, Selorm Ohene, Jacob Seidman, Aaron Slipper,
Alma Steingart, Nithin Tumma, Jeﬀrey Yan, Liang Zhang, and Michael Fountaine, who
served as the course assistant—and the second iteration at Johns Hopkins—Benjamin
Diamond, Nathaniel Filardo, Alex Grounds, Hanveen Koh, Alex Rozenshteyn, Xiyuan
Wang, Shengpei Yan, and Zhaoning Yang. I would also like to thank the Departments of
Mathematics at both institutions for giving me opportunities to teach this course and my
colleagues there, who have created two extremely pleasant working environments. While
these notes were being revised, I received ﬁnancial support from the National Science
Foundation Division of Mathematical Sciences DMS-1509016.
My enthusiasm for mathematical writing and patience for editing were inherited from
Peter May, my PhD supervisor. I appreciate the indulgence of my collaborators, my friends,
and my family while this manuscript was in its ﬁnal stages of preparation. This book is
dedicated to Peter Johnstone and Martin Hyland, whose tutelage I was fortunate to come
under in a pivotal year spent at Cambridge supported by the Winston Churchill Foundation
of the United States.


CHAPTER 1
Categories, Functors, Natural Transformations
Frequently in modern mathematics there occur
phenomena of “naturality”.
Samuel Eilenberg and Saunders Mac Lane,
“Natural isomorphisms in group theory”
[EM42b]
A group extension of an abelian group H by an abelian group G consists of a group E
together with an inclusion of G ,→E as a normal subgroup and a surjective homomorphism
E ↠H that displays H as the quotient group E/G. This data is typically displayed in a
diagram of group homomorphisms:
0 →G →E →H →0.1
A pair of group extensions E and E′ of G and H are considered to be equivalent whenever
there is an isomorphism E  E′ that commutes with the inclusions of G and quotient maps
to H, in a sense that is made precise in §1.6. The set of equivalence classes of abelian
group extensions E of H by G deﬁnes an abelian group Ext(H,G).
In 1941, Saunders Mac Lane gave a lecture at the University of Michigan in which
he computed for a prime p that Ext(Z[ 1
p]/Z, Z)  Zp, the group of p-adic integers, where
Z[ 1
p]/Z is the Prüfer p-group. When he explained this result to Samuel Eilenberg, who had
missed the lecture, Eilenberg recognized the calculation as the homology of the 3-sphere
complement of the p-adic solenoid, a space formed as the inﬁnite intersection of a sequence
of solid tori, each wound around p times inside the preceding torus. In teasing apart this
connection, the pair of them discovered what is now known as the universal coeﬃcient
theorem in algebraic topology, which relates the homology H∗and cohomology groups H∗
associated to a space X via a group extension [ML05]:
(1.0.1)
0 →Ext(Hn−1(X),G) →Hn(X,G) →Hom(Hn(X),G) →0 .
To obtain a more general form of the universal coeﬃcient theorem, Eilenberg and Mac
Lane needed to show that certain isomorphisms of abelian groups expressed by this group
extension extend to spaces constructed via direct or inverse limits. And indeed this is the
case, precisely because the homomorphisms in the diagram (1.0.1) are natural with respect
to continuous maps between topological spaces.
The adjective “natural” had been used colloquially by mathematicians to mean “deﬁned
without arbitrary choices.”
For instance, to deﬁne an isomorphism between a ﬁnite-
dimensional vector space V and its dual, the vector space of linear maps from V to the
1The zeros appearing on the ends provide no additional data. Instead, the ﬁrst zero implicitly asserts that the
map G →E is an inclusion and the second that the map E →H is a surjection. More precisely, the displayed
sequence of group homomorphisms is exact, meaning that the kernel of each homomorphism equals the image of
the preceding homomorphism.
1

2
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
ground ﬁeld k, requires a choice of basis. However, there is an isomorphism between V
and its double dual that requires no choice of basis; the latter, but not the former, is natural.
To give a rigorous proof that their particular family of group isomorphisms extended to
inverse and direct limits, Eilenberg and Mac Lane sought to give a mathematically precise
deﬁnition of the informal concept of “naturality.” To that end, they introduced the notion of
a natural transformation, a parallel collection of homomorphisms between abelian groups
in this instance. To characterize the source and target of a natural transformation, they
introduced the notion of a functor.2 And to deﬁne the source and target of a functor in
the greatest generality, they introduced the concept of a category. This work, described in
“The general theory of natural equivalences” [EM45], published in 1945, marked the birth
of category theory.
While categories and functors were ﬁrst conceived as auxiliary notions, needed to
give a precise meaning to the concept of naturality, they have grown into interesting and
important concepts in their own right. Categories suggest a particular perspective to be
used in the study of mathematical objects that pays greater attention to the maps between
them. Functors, which translate mathematical objects of one type into objects of another,
have a more immediate utility. For instance, the Brouwer ﬁxed point theorem translates a
seemingly intractable problem in topology to a trivial one (0 , 1) in algebra. It is to these
topics that we now turn.
Categories are introduced in §1.1 in two guises: ﬁrstly as universes categorizing
mathematical objects and secondly as mathematical objects in their own right. The ﬁrst
perspective is used, for instance, to deﬁne a general notion of isomorphism that can be
specialized to mathematical objects of every conceivable variety. The second perspective
leads to the observation that the axioms deﬁning a category are self-dual.3 Thus, as explored
in §1.2, for any proof of a theorem about all categories from these axioms, there is a dual
proof of the dual theorem obtained by a syntactic process that is interpreted as “turning
around all the arrows.”
Functors and natural transformations are introduced in §1.3 and §1.4 with examples
intended to shed light on the linguistic and practical utility of these concepts. The category-
theoretic notions of isomorphism, monomorphism, and epimorphism are invariant under
certain classes of functors, including in particular the equivalences of categories, introduced
in §1.5. At a high level, an equivalence of categories provides a precise expression of the
intuition that mathematical objects of one type are “the same as” objects of another variety:
an equivalence between the category of matrices and the category of ﬁnite-dimensional
vector spaces equates high school and college linear algebra.
Inadditionto providinganew languageto describeemergingmathematicalphenomena,
category theory also introduced a new proof technique: that of the diagram chase. The
introduction to the inﬂuential book [ES52] presents commutative diagrams as one of the
“new techniques of proof” appropriate for their axiomatic treatment of homology theory.
The technique of diagram chasing is introduced in §1.6 and applied in §1.7 to construct
new natural transformations as horizontal or vertical composites of given ones.
2A brief account of functors and natural isomorphisms in group theory appeared in a 1942 paper [EM42b].
3As is the case for the duality in projective plane geometry, this duality can be formulated precisely as a feature
of the ﬁrst-order theories that axiomatize these structures.

1.1. ABSTRACT AND CONCRETE CATEGORIES
3
1.1. Abstract and concrete categories
It frames a possible template for any
mathematical theory: the theory should have
nouns and verbs, i.e., objects, and morphisms,
and there should be an explicit notion of
composition related to the morphisms; the theory
should, in brief, be packaged by a category.
Barry Mazur, “When is one thing equal to some
other thing?” [Maz08]
Definition 1.1.1. A category consists of
• a collection of objects X, Y, Z, . . .
• a collection of morphisms f, g, h, . . .
so that:
• Each morphism has speciﬁed domain and codomain objects; the notation f : X →Y
signiﬁes that f is a morphism with domain X and codomain Y.
• Each object has a designated identity morphism 1X : X →X.
• For any pair of morphisms f, g with the codomain of f equal to the domain of g, there
exists a speciﬁed composite morphism4 gf whose domain is equal to the domain of
f and whose codomain is equal to the codomain of g, i.e.,:
f : X →Y,
g: Y →Z
⇝
gf : X →Z .
This data is subject to the following two axioms:
• For any f : X →Y, the composites 1Y f and f1X are both equal to f.
• For any composable triple of morphisms f, g, h, the composites h(gf) and (hg) f are
equal and henceforth denoted by hgf.
f : X →Y,
g: Y →Z,
h: Z →W
⇝
hgf : X →W .
That is, the composition law is associative and unital with the identity morphisms serving
as two-sided identities.
Remark 1.1.2. The objects of a category are in bijective correspondence with the identity
morphisms, which are uniquely determined by the property that they serve as two-sided
identities for composition. Thus, one can deﬁne a category to be a collection of morphisms
with a partially-deﬁned composition operation that has certain special morphisms, which
are used to recognize composable pairs and which serve as two-sided identities; see [Ehr65,
§I.1] or [FS90, §1.1]. But in practice it is not so hard to specify both the objects and the
morphisms and this is what we shall do.
It is traditional to name a category after its objects; typically, the preferred choice of
accompanying structure-preserving morphisms is clear. However, this practice is somewhat
contrary to the basic philosophy of category theory: that mathematical objects should
always be considered in tandem with the morphisms between them. By Remark 1.1.2, the
algebra of morphisms determines the category, so of the two, the objects and morphisms,
the morphisms take primacy.
Example 1.1.3. Many familiar varieties of mathematical objects assemble into a category.
4The composite may be written less concisely as g · f when this adds typographical clarity.

4
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
(i) Set has sets as its objects and functions, with speciﬁed domain and codomain,5 as
its morphisms.
(ii) Top has topological spaces as its objects and continuous functions as its morphisms.
(iii) Set∗and Top∗have sets or spaces with a speciﬁed basepoint6 as objects and basepoint-
preserving (continuous) functions as morphisms.
(iv) Group has groups as objects and group homomorphisms as morphisms. This example
lent the general term “morphisms” to the data of an abstract category. The categories
Ring of associative and unital rings and ring homomorphisms and Field of ﬁelds and
ﬁeld homomorphisms are deﬁned similarly.
(v) For a ﬁxed unital but not necessarily commutative ring R, ModR is the category of
left R-modules and R-module homomorphisms. This category is denoted by Vectk
when the ring happens to be a ﬁeld k and abbreviated as Ab in the case of ModZ, as
a Z-module is precisely an abelian group.
(vi) Graph has graphs as objects and graph morphisms (functions carrying vertices to
vertices and edges to edges, preserving incidence relations) as morphisms. In the
variant DirGraph, objects are directed graphs, whose edges are now depicted as
arrows, and morphisms are directed graph morphisms, which must preserve sources
and targets.
(vii) Man has smooth (i.e., inﬁnitely diﬀerentiable) manifolds as objects and smooth maps
as morphisms.
(viii) Meas has measurable spaces as objects and measurable functions as morphisms.
(ix) Poset has partially-ordered sets as objects and order-preserving functions as mor-
phisms.
(x) ChR has chain complexes of R-modules as objects and chain homomorphisms as
morphisms.7
(xi) For any signature σ, specifying constant, function, and relation symbols, and for
any collection of well formed sentences T in the ﬁrst-order language associated to
σ, there is a category ModelT whose objects are σ-structures that model T, i.e., sets
equipped with appropriate constants, relations, and functions satisfying the axioms
T. Morphisms are functions that preserve the speciﬁed constants, relations, and
functions, in the usual sense.8 Special cases include (iv), (v), (vi), (ix), and (x).
The preceding are all examples of concrete categories, those whose objects have
underlying sets and whose morphisms are functions between these underlying sets, typically
the “structure-preserving” morphisms. A more precise deﬁnition of a concrete category is
given in 1.6.17. However, “abstract” categories are also prevalent:
Example 1.1.4.
(i) For a unital ring R, MatR is the category whose objects are positive integers and in
which the set of morphisms from n to m is the set of m × n matrices with values in
5[EM45, p. 239] emphasizes that the data of a function should include speciﬁed sets of inputs and potential
outputs, a perspective that was somewhat radical at the time.
6A basepoint is simply a chosen distinguished point in the set or space.
7A chain complexC• is a collection (Cn)n∈Z of R-modules equipped with R-module homomorphisms d: Cn →
Cn−1, called boundary homomorphisms, with the property that d2 = 0, i.e., the composite of any two boundary
maps is the zero homomorphism. A map of chain complexes f : C• →C′
• is comprised of a collection of
homomorphisms fn : Cn →C′
n so that d fn = fn−1d for all n ∈Z.
8Model theory pays greater attention to other types of morphisms, for instance the elementary embeddings,
which are (automatically injective) functions that preserve and reﬂect satisfaction of ﬁrst-order formulae.

1.1. ABSTRACT AND CONCRETE CATEGORIES
5
R. Composition is by matrix multiplication
n
A−→m,
m
B−→k
⇝
n
B·A
−−→k
with identity matrices serving as the identity morphisms.
(ii) A group G (or, more generally, a monoid9) deﬁnes a category BG with a single object.
The group elements are its morphisms, each group element representing a distinct
endomorphism of the single object, with composition given by multiplication. The
identity element e ∈G acts as the identity morphism for the unique object in this
category.
BS 3 =
•
e
$
(12)

(123)
D
(23)
d
(13)
q
(132)
1
(iii) A poset (P, ≤) (or, more generally, a preorder10) may be regarded as a category. The
elements of P are the objects of the category and there exists a unique morphism
x →y if and only if x ≤y. Transitivity of the relation “≤” implies that the required
composite morphisms exist. Reﬂexivity implies that identity morphisms exist.
(iv) In particular, any ordinal α = {β | β < α} deﬁnes a category whose objects are the
smaller ordinals. For example, 0 is the category with no objects and no morphisms. 1
is the category with a single object and only its identity morphism. 2 is the category
with two objects and a single non-identity morphism, conventionally depicted as
0 →1. ω is the category freely generated by the graph
0 →1 →2 →3 →· · ·
in the sense that every non-identity morphism can be uniquely factored as a composite
of morphisms in the displayed graph; a precise deﬁnition of the notion of free
generation is given in Example 4.1.13.
(v) A set may be regarded as a category in which the elements of the set deﬁne the
objects and the only morphisms are the required identities. A category is discrete if
every morphism is an identity.
(vi) Htpy, like Top, has spaces as its objects but morphisms are homotopy classes of
continuous maps. Htpy∗has based spaces as its objects and basepoint-preserving
homotopy classes of based continuous maps as its morphisms.
(vii) Measure has measure spaces as objects. One reasonable choice for the morphisms is
to take equivalence classes of measurable functions, where a parallel pair of functions
are equivalent if their domain of diﬀerence is contained within a set of measure zero.
Thus, the philosophy of category theory is extended. The categories listed in Example
1.1.3 suggest that mathematical objects ought to be considered together with the appropriate
notion of morphism between them. The categories listed in Example 1.1.4 illustrate that
9A monoid is a set M equipped with an associative binary multiplication operation M×M
·−→M and an identity
element e ∈M serving as a two-sided identity. In other words, a monoid is precisely a one-object category.
10A preorder is a set with a binary relation ≤that is reﬂexive and transitive. In other words, a preorder is
precisely a category in which there are no parallel pairs of distinct morphisms between any ﬁxed pair of objects.
A poset is a preorder that is additionally antisymmetric: x ≤y and y ≤x implies that x = y.

6
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
these morphisms are not always functions.11 The morphisms in a category are also called
arrows or maps, particularly in the contexts of Examples 1.1.4 and 1.1.3, respectively.
Remark 1.1.5. Russell’s paradox implies that there is no set whose elements are “all sets.”
This is the reason why we have used the vague word “collection” in Deﬁnition 1.1.1. Indeed,
in each of the examples listed in 1.1.3, the collection of objects is not a set. Eilenberg and
Mac Lane address this potential area of concern as follows:
. . . the whole concept of a category is essentially an auxiliary one;
our basic concepts are essentially those of a functor and of a natural
transformation . . . . The idea of a category is required only by the
precept that every function should have a deﬁnite class as domain
and a deﬁnite class as range, for the categories are provided as the
domains and ranges of functors. Thus one could drop the category
concept altogether and adopt an even more intuitive standpoint, in
which a functor such as “Hom” is not deﬁned over the category of
“all” groups, but for each particular pair of groups which may be
given. [EM45]
The set-theoretical issues that confront us while deﬁning the notion of a category will
compound as we develop category theory further. For that reason, common practice among
category theorists is to work in an extension of the usual Zermelo–Fraenkel axioms of set
theory, with new axioms allowing one to distinguish between “small” and “large” sets,
or between sets and classes. The search for the most useful set-theoretical foundations
for category theory is a fascinating topic that unfortunately would require too long of a
digression to explore.12 Instead, we sweep these foundational issues under the rug, not
because these issues are not serious or interesting, but because they distract from the task
at hand.13
For the reasons just discussed, it is important to introduce adjectives that explicitly
address the size of a category.
Definition 1.1.6. A category is small if it has only a set’s worth of arrows.
By Remark 1.1.2, a small category has only a set’s worth of objects. If C is a small
category, then there are functions
mor C
dom /
cod / ob C
id
o
that send a morphism to its domain and its codomain and an object to its identity.
11Reid’s Undergraduate algebraic geometry emphasizes that the morphisms are not always functions, writing
“Students who disapprove are recommended to give up at once and take a reading course in category theory
instead” [Rei88, p. 4].
12The preprint [Shu08] gives an excellent overview, though it is perhaps better read after Chapters 1–4.
13If pressed, let us assume that there exists a countable sequence of inaccessible cardinals, meaning uncountable
cardinals that are regular and strong limit. A cardinal κ is regular if every union of fewer than κ sets each of
cardinality less than κ has cardinality less than κ, and strong limit if λ < κ implies that 2λ < κ. Inaccessibility
means that sets of size less than κ are closed under power sets and κ-small unions. If κ is inaccessible, then the
κ-stage of the von Neumann hierarchy, the set Vκ of sets of rank less than κ, is a model of Zermelo–Fraenkel set
theory with choice (ZFC); the set Vκ is a Grothendieck universe. The assumption that there exists a countable
sequence of inaccessible cardinals means that we can “do set theory” inside the universe Vκ, and then enlarge the
universe if necessary as often as needed.
If ZFC is consistent, these axioms cannot prove the existence of an inaccessible cardinal or the consistency of
the assumption that one exists (by Gödel’s second incompleteness theorem). Nonetheless, from the perspective
of the hierarchy of large cardinal axioms, the existence of inaccessibles is a relatively mild hypothesis.

1.1. ABSTRACT AND CONCRETE CATEGORIES
7
None of the categories in Example 1.1.3 are small—each has too many objects—but
“locally” they resemble small categories in a sense made precise by the following notion:
Definition 1.1.7. A category is locally small if between any pair of objects there is only
a set’s worth of morphisms.
It is traditional to write
(1.1.8)
C(X, Y)
or
Hom(X, Y)
for the set of morphisms from X to Y in a locally small category C.14 The set of arrows
between a pair of ﬁxed objets in a locally small category is typically called a hom-set,
whether or not it is a set of “homomorphisms” of any particular kind. Because the notation
(1.1.8) is so convenient, it is also adopted for the collection of morphisms between a ﬁxed
pair of objects in a category that is not necessarily locally small.
A category provides a context in which to answer the question “When is one thing the
same as another thing?” Almost universally in mathematics, one regards two objects of the
same category to be “the same” when they are isomorphic, in a precise categorical sense
that we now introduce.
Definition 1.1.9. An isomorphism in a category is a morphism f : X →Y for which
there exists a morphism g: Y →X so that gf = 1X and fg = 1Y. The objects X and Y are
isomorphic whenever there exists an isomorphism between X and Y, in which case one
writes X  Y.
An endomorphism, i.e., a morphism whose domain equals its codomain, that is an
isomorphism is called an automorphism.
Example 1.1.10.
(i) The isomorphisms in Set are precisely the bijections.
(ii) The isomorphisms in Group, Ring, Field, or ModR are the bijective homomorphisms.
(iii) The isomorphisms in the category Top are the homeomorphisms, i.e., the continuous
functions with continuous inverse, which is a stronger property than merely being a
bijective continuous function.
(iv) The isomorphisms in the category Htpy are the homotopy equivalences.
(v) In a poset (P, ≤), the axiom of antisymmetry asserts that x ≤y and y ≤x imply that
x = y. That is, the only isomorphisms in the category (P, ≤) are identities.
Examples 1.1.10(ii) and (iii) suggest the following general question: In a concrete
category, when are the isomorphisms precisely those maps in the category that induce
bijections between the underlying sets? We will see an answer in Lemma 5.6.1.
Definition 1.1.11. A groupoid is a category in which every morphism is an isomorphism.
Example 1.1.12.
(i) A group is a groupoid with one object.15
(ii) For any space X, its fundamental groupoid Π1(X) is a category whose objects are
the points of X and whose morphisms are endpoint-preserving homotopy classes of
paths.
14Mac Lane credits Emmy Noether for emphasizing the importance of homomorphisms in abstract algebra,
particularly the homomorphism onto a quotient group, which plays an integral role in the statement of her ﬁrst
isomorphism theorem. His recollection is that the arrow notation ﬁrst appeared around 1940, perhaps due to
Hurewicz [ML88]. The notation Hom(X, Y) was ﬁrst used in [EM42a] for the set of homomorphisms between a
pair of abelian groups.
15This is not simply an example; it is a deﬁnition.

8
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
A subcategory D of a category C is deﬁned by restricting to a subcollection of objects
and subcollection of morphisms subject to the requirements that the subcategory D contains
the domain and codomain of any morphism in D, the identity morphism of any object in
D, and the composite of any composable pair of morphisms in D. For example, there is a
subcategory CRing ⊂Ring of commutative unital rings. Both of these form subcategories
of the category Rng of not-necessarily unital rings and homomorphisms that need not
preserve the multiplicative unit.16
Lemma 1.1.13. Any category C contains a maximal groupoid, the subcategory containing
all of the objects and only those morphisms that are isomorphisms.
Proof. Exercise 1.1.ii.
□
For instance, Finiso, the category of ﬁnite sets and bijections, is the maximal sub-
groupoid of the category Fin of ﬁnite sets and all functions. Example 1.4.9 will explain
how this groupoid can be regarded as a categoriﬁcation of the natural numbers, providing
a vantage point from which to prove the laws of elementary arithmetic.
Exercises.
Exercise 1.1.i.
(i) Show that a morphism can have at most one inverse isomorphism.
(ii) Consider a morphism f : x →y. Show that if there exists a pair of morphisms
g, h: y ⇒x so that gf = 1x and fh = 1y, then g = h and f is an isomorphism.
Exercise 1.1.ii. Let C be a category. Show that the collection of isomorphisms in C
deﬁnes a subcategory, the maximal groupoid inside C.
Exercise 1.1.iii. For any category C and any object c ∈C, show that:
(i) There is a category c/C whose objects are morphisms f : c →x with domain c and
in which a morphism from f : c →x to g: c →y is a map h: x →y between the
codomains so that the triangle
c
f
 g

x
h
/ y
commutes, i.e., so that g = hf.
(ii) There is a category C/c whose objects are morphisms f : x →c with codomain c
and in which a morphism from f : x →c to g: y →c is a map h: x →y between the
domains so that the triangle
x
h
/
f

y
g
 c
commutes, i.e., so that f = gh.
The categories c/C and C/c are called slice categories of C under and over c, respectively.
16To justify our default notion of ring, see Poonen’s “Why all rings should have a 1” [Poo14]. The relationship
between unital and non-unital rings is explored in greater depth in §4.6.

1.2. DUALITY
9
1.2. Duality
The dual of any axiom for a category is also an
axiom . . . A simple metamathematical argument
thus proves the duality principle. If any statement
about a category is deducible from the axioms for
a category, the dual statement is likely deducible.
Saunders Mac Lane, “Duality for groups” [ML50]
Upon ﬁrst acquaintance, the primary role played by the notion of a category might
appear to be taxonomic: vector spaces and linear maps deﬁne one category, manifolds and
smooth functions deﬁne another. But a category, as deﬁned in 1.1.1, is also a mathematical
object in its own right, and as with any mathematical deﬁnition, this one is worthy of
further consideration. Applying a mathematician’s gaze to the deﬁnition of a category, the
following observation quickly materializes. If we visualize the morphisms in a category
as arrows pointing from their domain object to their codomain object, we might imagine
simultaneously reversing the directions of every arrow. This leads to the following notion.
Definition 1.2.1. Let C be any category. The opposite category Cop has
• the same objects as in C, and
• a morphism f op in Cop for each a morphism f in C so that the domain of f op is deﬁned
to be the codomain of f and the codomain of f op is deﬁned to be the domain of f: i.e.,
f op : X →Y
∈Cop
↭
f : Y →X
∈C .
That is, Cop has the same objects and morphisms as C, except that “each morphism is
pointing in the opposite direction.” The remaining structure of the category Cop is given as
follows:
• For each object X, the arrow 1op
X serves as its identity in Cop.
• To deﬁne composition, observe that a pair of morphisms f op, gop in Cop is composable
precisely when the pair g, f is composable in C, i.e., precisely when the codomain of
g equals the domain of f. We then deﬁne gop · f op to be ( f · g)op: i.e.,
f op : X →Y, gop : Y →Z
∈Cop
⇝
gop f op : X →Z
∈Cop
↭
↭
g: Z →Y, f : Y →X
∈C
⇝
fg: Z →X
∈C
The data described in Deﬁnition 1.2.1 deﬁnes a category Cop—i.e., the composition
law is associative and unital—if and only if C deﬁnes a category. In summary, the process of
“turning around the arrows” or “exchanging domains and codomains” exhibits a syntactical
self-duality satisﬁed by the axioms for a category. Note that the category Cop contains
precisely the same information as the category C. Questions about the one can be answered
by examining the other.
Example 1.2.2.
(i) Matop
R is the category whose objects are non-zero natural numbers and in which a
morphism from m to n is an m×n matrix with values in R. The upshot is that a reader
who would have preferred the opposite handedness conventions when deﬁning MatR
would have lost nothing by adopting them.
(ii) When a preorder (P, ≤) is regarded as a category, its opposite category is the category
that has a morphism x →y if and only if y ≤x. For example, ωop is the category

10
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
freely generated by the graph
· · · →3 →2 →1 →0 .
(iii) If G is a group, regarded as a one-object groupoid, the category (BG)op  B(Gop)
is again a one-object groupoid, and hence a group. The group Gop is called the
opposite group and is used to deﬁne right actions as a special case of left actions;
see Example 1.3.9.
This syntactical duality has a very important consequence for the development of
category theory. Any theorem containing a universal quantiﬁcation of the form “for all
categories C” also necessarily applies to the opposites of these categories. Interpreting the
result in the dual context leads to a dual theorem, proven by the dual of the original proof,
in which the direction of each arrow appearing in the argument is reversed. The result is
a two-for-one deal: any proof in category theory simultaneously proves two theorems, the
original statement and its dual.17 For example, the reader may have found Exercise 1.1.iii
redundant, precisely because the statements (i) and (ii) are dual; see Exercise 1.2.i.
To illustrate the principle of duality in category theory, let us consider the following
result, which provides an important characterization of the isomorphisms in a category.
Lemma 1.2.3. The following are equivalent:
(i) f : x →y is an isomorphism in C.
(ii) For all objects c ∈C, post-composition with f deﬁnes a bijection
f∗: C(c, x) →C(c, y) .
(iii) For all objects c ∈C, pre-composition with f deﬁnes a bijection
f ∗: C(y, c) →C(x, c) .
Remark 1.2.4. In language introduced in Chapter 2, Lemma 1.2.3 asserts that isomor-
phisms in a locally small category are deﬁned representably in terms of isomorphisms in
the category of sets. That is, a morphism f : x →y in an arbitrary locally small category
C is an isomorphism if and only if the post-composition function f∗: C(c, x) →C(c, y)
between hom-sets deﬁnes an isomorphism in Set for each object c ∈C.
In set theoretical foundations that permit the deﬁnition of functions between large sets,
the proof given here applies also to non-locally small categories. In our exposition, the set
theoretical hypotheses of smallness and local smallness will only appear when there are
essential subtleties concerning the sizes of the categories in question. This is not one of
those occasions.
Proof of Lemma 1.2.3. We will prove the equivalence (i) ⇔(ii) and conclude the
equivalence (i) ⇔(iii) by duality.
Assuming (i), namely that f : x →y is an isomorphism with inverse g: y →x, then,
as an immediate application of the associativity and identity laws for composition in a
category, post-composition with g deﬁnes an inverse function
g∗: C(c, y) →C(c, x)
to f∗in the sense that the composites
g∗f∗: C(c, x) →C(c, x)
and
f∗g∗: C(c, y) →C(c, y)
17More generally, the proof of a statement of the form “for all categories C1, C2, . . . , Cn” leads to 2n dual
theorems. In practice, however, not all of the dual statements will diﬀer meaningfully from the original; see
e.g., §4.3.

1.2. DUALITY
11
are both the identity function: for any h: c →x and k: c →y, g∗f∗(h) = gfh = h and
f∗g∗(k) = fgk = k.
Conversely, assuming (ii), there must be an element g ∈C(y, x) whose image under
f∗: C(y, x) →C(y, y) is 1y.
By construction, 1y = fg.
But now, by associativity of
composition, the elements gf, 1x ∈C(x, x) have the common image f under the function
f∗: C(x, x) →C(x, y), whence gf = 1x. Thus, f and g are inverse isomorphisms.
We have just proven the equivalence (i) ⇔(ii) for all categories and in particular for
the category Cop: i.e., a morphism f op : y →x in Cop is an isomorphism if and only if
(1.2.5)
f op
∗: Cop(c, y) →Cop(c, x) is an isomorphism for all c ∈Cop .
Interpreting the data of Cop in its opposite category C, the statement (1.2.5) expresses the
same mathematical content as
(1.2.6)
f ∗: C(y, c) →C(x, c) is an isomorphism for all c ∈C .
That is: Cop(c, x) = C(x, c), post-composition with f op in Cop translates to pre-composition
with f in the opposite category C. The notion of isomorphism, as deﬁned in 1.1.9, is
self-dual: f op : y →x is an isomorphism in Cop if and only if f : x →y is an isomorphism
in C. So the equivalence (i) ⇔(ii) in Cop expresses the equivalence (i) ⇔(iii) in C.18
□
Concise expositions of the duality principle in category theory may be found in [Awo10,
§3.1] and [HS97, §II.3]. As we become more comfortable with arguing by duality, dual
proofs and eventually also dual statements will seldom be described in this much detail.
Categorical deﬁnitions also have duals; for instance:
Definition 1.2.7. A morphism f : x →y in a category is
(i) a monomorphism if for any parallel morphisms h, k: w ⇒x, fh = fk implies that
h = k; or
(ii) an epimorphism if for any parallel morphisms h, k: y ⇒z, hf = k f implies that
h = k.
Note that a monomorphism or epimorphism in C is, respectively, an epimorphism or
monomorphism in Cop. In adjectival form, a monomorphism is monic and an epimorphism
is epic. In common shorthand, a monomorphism is a mono and an epimorphism is an
epi. For graphical emphasis, monos are often decorated with a tail “↣” while epis may be
decorated at their head “↠.”
The following dual statements re-express Deﬁnition 1.2.7:
(i) f : x →y is a monomorphism in C if and only if for all objects c ∈C, post-
composition with f deﬁnes an injection f∗: C(c, x) →C(c, y).
(ii) f : x →y is an epimorphism in C if and only if for all objects c ∈C, pre-composition
with f deﬁnes an injection f ∗: C(y, c) →C(x, c).
Example 1.2.8. Suppose f : X →Y is a monomorphism in the category of sets. Then, in
particular, given any two maps x, x′ : 1 ⇒X, whose domain is the singleton set, if f x = f x′
then x = x′. Thus, monomorphisms are injective functions. Conversely, any injective
function can easily be seen to be a monomorphism.
Similarly, a function f : X →Y is an epimorphism in the category of sets if and only
if it is surjective. Given functions h, k: Y ⇒Z, the equation hf = k f says exactly that h is
equal to k on the image of f. This only implies that h = k in the case where the image is all
of Y.
18A similar translation, as just demonstrated between the statements (1.2.5) and (1.2.6), transforms the proof
of (i) ⇔(ii) into a proof of (i) ⇔(iii).

12
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
Thus, monomorphisms and epimorphisms should be regarded as categorical analogs
of the notions of injective and surjective functions. In practice, if C is a category in which
objects have “underlying sets,” then any morphism that induces an injective or surjective
function between these deﬁnes a monomorphism or epimorphism; see Exercise 1.6.iii for
a precise discussion. However, even in such categories, the notions of monomorphism and
epimorphism can be more general, as demonstrated in Exercise 1.6.v.
Example 1.2.9. Suppose that x
s−→y
r−→x are morphisms so that rs = 1x. The map s is a
section or right inverse to r, while the map r deﬁnes a retraction or left inverse to s. The
maps s and r express the object x as a retract of the object y.
In this case, s is always a monomorphism and, dually, r is always an epimorphism. To
acknowledge the presence of these one-sided inverses, s is said to be a split monomorphism
and r is said to be a split epimorphism.19
Example 1.2.10. By the previous example, an isomorphism is necessarily both monic and
epic, but the converse need not hold in general. For example, the inclusion Z ,→Q is both
monic and epic in the category Ring, but this map is not an isomorphism: there are no ring
homomorphisms from Q to Z.
Since the notions of monomorphism and epimorphism are dual, their abstract categor-
ical properties are also dual, such as exhibited by the following lemma.
Lemma 1.2.11.
(i) If f : x ↣y and g: y ↣z are monomorphisms, then so is gf : x ↣z.
(ii) If f : x →y and g: y →z are morphisms so that gf is monic, then f is monic.
Dually:
(i’) If f : x ↠y and g: y ↠z are epimorphisms, then so is gf : x ↠z.
(ii’) If f : x →y and g: y →z are morphisms so that gf is epic, then g is epic.
Proof. Exercise 1.2.iii.
□
Exercises.
Exercise 1.2.i. Show that C/c  (c/(Cop))op. Deﬁning C/c to be (c/(Cop))op, deduce
Exercise 1.1.iii(ii) from Exercise 1.1.iii(i).
Exercise 1.2.ii.
(i) Show that a morphism f : x →y is a split epimorphism in a category C if and only
if for all c ∈C, post-composition f∗: C(c, x) →C(c, y) deﬁnes a surjective function.
(ii) Argue by duality that f is a split monomorphism if and only if for all c ∈C,
pre-composition f ∗: C(y, c) →C(x, c) is a surjective function.
Exercise 1.2.iii. Prove Lemma 1.2.11 by proving either (i) or (i’) and either (ii) or (ii’),
then arguing by duality.
Conclude that the monomorphisms in any category deﬁne a
subcategory of that category and dually that the epimorphisms also deﬁne a subcategory.
Exercise 1.2.iv. What are the monomorphisms in the category of ﬁelds?
Exercise 1.2.v. Show that the inclusion Z ,→Q is both a monomorphism and an epimor-
phism in the category Ring of rings. Conclude that a map that is both monic and epic need
not be an isomorphism.
Exercise 1.2.vi. Prove that a morphism that is both a monomorphism and a split epimor-
phism is necessarily an isomorphism. Argue by duality that a split monomorphism that is
an epimorphism is also an isomorphism.
19The axiom of choice asserts that every epimorphism in the category of sets is a split epimorphism.

1.3. FUNCTORIALITY
13
Exercise 1.2.vii. Regarding a poset (P, ≤) as a category, deﬁne the supremum of a subcol-
lection of objects A ∈P in such a way that the dual statement deﬁnes the inﬁmum. Prove
that the supremum of a subset of objects is unique, whenever it exists, in such a way that
the dual proof demonstrates the uniqueness of the inﬁmum.
1.3. Functoriality
. . . every suﬃciently good analogy is yearning to
become a functor.
John Baez, “Quantum Quandaries: A
Category-Theoretic Perspective” [Bae06]
A key tenet in category theory, motivating the very deﬁnition of a category, is that
any mathematical object should be considered together with its accompanying notion of
structure-preserving morphism.
In “General theory of natural equivalences” [EM45],
Eilenberg and Mac Lane argue further:
. . . whenever new abstract objects are constructed in a speciﬁed way
out of given ones, it is advisable to regard the construction of the
corresponding induced mappings on these new objects as an integral
part of their deﬁnition.
Categories are themselves mathematical objects, if of a somewhat unfamiliar sort, which
leads to a question: What is a morphism between categories?
Definition 1.3.1. A functor F : C →D, between categories C and D, consists of the
following data:
• An object Fc ∈D, for each object c ∈C.
• A morphism F f : Fc →Fc′ ∈D, for each morphism f : c →c′ ∈C, so that the
domain and codomain of F f are, respectively, equal to F applied to the domain or
codomain of f.
The assignments are required to satisfy the following two functoriality axioms:
• For any composable pair f, g in C, Fg · F f = F(g · f).
• For each object c in C, F(1c) = 1Fc.
Put concisely, a functor consists of a mapping on objects and a mapping on mor-
phisms that preserves all of the structure of a category, namely domains and codomains,
composition, and identities.20
Example 1.3.2.
(i) There is an endofunctor21 P: Set →Set that sends a set A to its power set PA =
{A′ ⊂A} and a function f : A →B to the direct-image function f∗: PA →PB that
sends A′ ⊂A to f(A′) ⊂B.
(ii) Each of the categories listed in Example 1.1.3 has a forgetful functor, a general term
that is used for any functor that forgets structure, whose codomain is the category of
sets. For example, U : Group →Set sends a group to its underlying set and a group
homomorphism to its underlying function. The functor U : Top →Set sends a space
to its set of points. There are two natural forgetful functors V, E : Graph ⇒Set that
send a graph to its vertex or edge sets, respectively; if desired, these can be combined
20While a functor should be regarded as a mapping from the data of one category to the data of another,
parentheses are used as seldom as possible unless demanded for notational clarity.
21An endofunctor is a functor whose domain is equal to its codomain.

14
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
to deﬁne a single functor V ⊔E : Graph →Set that carries a graph to the disjoint
union of its vertex and edge sets. These mappings are functorial because in each
instance a morphism in the domain category has an underlying function.
(iii) There are intermediate forgetful functors ModR →Ab and Ring →Ab that forget
some but not all of the algebraic structure. The inclusion functors Ab ,→Group
and Field ,→Ring may also be regarded as “forgetful.” Note that the latter two, but
neither of the former, are injective on objects: a group is either abelian or not, but an
abelian group might admit the structure of a ring in multiple ways.
(iv) Similarly, there are forgetful functors Group →Set∗and Ring →Set∗that take
the basepoint to be the identity and zero elements, respectively. These assignments
are functorial because group and ring homomorphisms necessarily preserve these
elements.
(v) There are functors Top →Htpy and Top∗→Htpy∗that act as the identity on objects
and send a (based) continuous function to its homotopy class.
(vi) The fundamental group deﬁnes a functor π1 : Top∗→Group; a continuous function
f : (X, x) →(Y, y) of based spaces induces a group homomorphism f∗: π1(X, x) →
π1(Y, y) and this assignment is functorial, satisfying the two functoriality axioms
described above. A precise expression of the statement that “the fundamental group
is a homotopy invariant” is that this functor factors through the functor Top∗→Htpy∗
to deﬁne a functor π1 : Htpy∗→Group.
(vii) A related functor Π1 : Top →Groupoid assigns an unbased topological space its
fundamental groupoid, the category deﬁned in Example 1.1.12(ii). A continuous
function f : X →Y induces a functor f∗: Π1(X) →Π1(Y) that carries a point
x ∈X to the point f(x) ∈Y. This mapping extends to morphisms in Π1(X) because
continuous functions preserve paths and path homotopy classes.
(viii) For each n ∈Z, there are functors Zn, Bn, Hn : ChR →ModR.
The functor Zn
computes the n-cycles deﬁned by ZnC• = ker(d: Cn →Cn−1).
The functor Bn
computes the n-boundary deﬁned by BnC• = im(d: Cn+1 →Cn).
The functor
Hn computes the nth homology HnC• B ZnC•/BnC•. We leave it to the reader to
verify that each of these three constructions is functorial. Considering all degrees
simultaneously, the cycle, boundary, and homology functors assemble into functors
Z∗, B∗, H∗: ChR →GrModR from the category of chain complexes to the category
of graded R-modules. The singular homology of a topological space is deﬁned by
precomposing H∗with a suitable functor Top →ChR.
(ix) There is a functor F : Set →Group that sends a set X to the free group on X. This
is the group whose elements are ﬁnite “words” whose letters are elements x ∈X or
their formal inverses x−1, modulo an equivalence relation that equates the words xx−1
and x−1x with the empty word. Multiplication is by concatenation, with the empty
word serving as the identity. This is one instance of a large family of “free” functors
studied in Chapter 4.
(x) The chain rule expresses the functoriality of the derivative. Let Euclid∗denote the
category whose objects are pointed ﬁnite-dimensional Euclidean spaces (Rn, a)—
or, better, open subsets thereof—and whose morphisms are pointed diﬀerentiable
functions. The total derivative of f : Rn →Rm, evaluated at the designated basepoint
a ∈Rn, gives rise to a matrix called the Jacobian matrix deﬁning the directional
derivatives of f at the point a. If f is given by component functions f1, . . . , fm : Rn →
R, the (i, j)-entry of this matrix is
∂
∂xj fi(a). This deﬁnes the action on morphisms
of a functor D: Euclid∗→MatR; on objects, D assigns a pointed Euclidean space

1.3. FUNCTORIALITY
15
its dimension. Given g: Rm →Rk carrying the designated basepoint f(a) ∈Rm to
gf(a) ∈Rk, functoriality of D asserts that the product of the Jacobian of f at a with
the Jacobian of g at f(a) equals the Jacobian of gf at a. This is the chain rule from
multivariable calculus.22
(xi) Any commutative monoid M can be used to deﬁne a functor M−: Fin∗→Set.
Writing n+ ∈Fin∗for the set with n non-basepoint elements, deﬁne Mn+ to be Mn,
the n-fold cartesian product of the set M with itself. By convention, M0+ is a singleton
set. For any based map f : m+ →n+, deﬁne the ith component of the corresponding
function M f : Mm →Mn by projecting from Mm to the coordinates indexed by
elements in the ﬁber f −1(i) and then multiplying these using the commutative monoid
structure; if the ﬁber is empty, the function M f inserts the unit element in the ith
coordinate.
Note each of the sets Mn itself has a basepoint, the n-tuple of unit
elements, and each of the maps in the image of the functor are based. It follows that
the functor M−lifts along the forgetful functor U : Set∗→Set.
There is a special property satisﬁed by this construction that allows one to extract
the commutative monoid M from the functor Fin∗→Set. This observation was used
by Segal to introduce a suitable notion of “commutative monoid” into algebraic
topology [Seg74].
More examples of functors will appear shortly, but ﬁrst we illustrate the utility of
knowing that the assignment of a mathematical object of one type to mathematical objects of
another type is functorial. Applying the functoriality of the fundamental group construction
π1 : Top∗→Group, one can prove:
Theorem 1.3.3 (Brouwer Fixed Point Theorem). Any continuous endomorphism of a 2-
dimensional disk D2 has a ﬁxed point.
Proof. Assuming f : D2 →D2 is such that f(x) , x for all x ∈D2, there is a
continuous function r: D2 →S 1 that carries a point x ∈D2 to the intersection of the ray
from f(x) to x with the boundary circle S 1. Note that the function r ﬁxes the points on the
boundary circle S 1 ⊂D2. Thus, r deﬁnes a retraction of the inclusion i: S 1 ,→D2, which
is to say, the composite S 1
i−→D2 r−→S 1 is the identity.
•
• •
f(x)
x
r(x)
4
Pick any basepoint on the boundary circle S 1 and apply the functor π1 to obtain a
composable pair of group homomorphisms:
π1(S 1)
π1(i)
−−−→π1(D2)
π1(r)
−−−→π1(S 1) .
By the functoriality axioms, we must have
π1(r) · π1(i) = π1(ri) = π1(1S 1) = 1π1(S 1) .
However, a computation involving covering spaces reveals that π1(S 1) = Z, while π1(D2) =
0, the trivial group. The composite endomorphism π1(r) · π1(i) of Z must be zero, since it
factors through the trivial group. Thus, it cannot equal the identity homomorphism, which
22Taking a more sophisticated perspective, the derivative deﬁnes the action on morphisms of a functor from the
category Man∗to the category of real vector spaces that sends a pointed manifold to its tangent space.

16
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
carries the generator 1 ∈Z to itself (0 , 1). This contradiction proves that the retraction r
cannot exist, and so f must have a ﬁxed point.23
□
Functoriality also plays a key role in the emerging area of topological data analysis.
Example 1.3.4 (in search of a clustering functor). A clustering algorithm is a function
that converts a ﬁnite metric space into a partition of its points into sets of “clusters.”
An impossibility theorem of Kleinberg proves that there are no clustering algorithms that
satisfy three reasonable axioms [Kle03].24 A key insight of Carlsson and Mémoli is that
these axioms can be encoded as morphisms in a category of ﬁnite metric spaces in such a
way that what is desired is not a clustering function but a clustering functor into a suitable
category [CM13]. Ghrist’s Elementary Applied Topology [Ghr14, p. 216] describes this
move as follows:
What is the good of this? Category theory is criticized as an esoteric
language: formal and fruitless for conversation.
This is not so.25
The virtue of reformulating (the negative) Theorem [of Kleinberg]
functorially is a clearer path to a positive statement. If the goal is
to have a theory of clustering; if clustering is, properly, a nontrivial
functor; if no nontrivial functors between the proposed categories
exist; then, naturally, the solution is to alter the domain or codomain
categories and classify the ensuing functors. One such modiﬁcation
is to consider a category of persistent clusters.
One pair of categories considered in [CM13] are the categories FinMetric, of ﬁnite
metric spaces and distance non-increasing functions, and Cluster, of clusters and reﬁne-
ments. An object in Cluster is a partitioned set. Given a function f : X →Y, the preimages
of a partition of the set Y deﬁne a partition of X. A morphism in Cluster is a function
f : X →Y of underlying sets so that the given partition on X reﬁnes the partition on X
deﬁned by the preimages of the given partition on Y.
Carlsson and Mémoli observe that the only scale-invariant functors FinMetric →
Cluster either assign each metric space the discrete partition (into singletons) or the in-
discrete partition (into a single cluster); both cases fail to satisfy Kleinberg’s surjectivity
condition. This suggests that clusters should be replaced by a notion of “persistent” clusters.
A persistent cluster on X is a functor from the poset ([0, ∞), ≤) to the poset of clusters on
X, where φ ≤ψ if and only if the partition φ reﬁnes the partition ψ. The idea is that when
the parameter r ∈[0, ∞) is small, the partition on X might be very ﬁne, but the clusters are
allowed to coalesce as one “zooms out,” i.e., as r increases.
There is a category PCluster whose objects are persistent clusters and whose mor-
phisms are functions of underlying sets f : X →Y that deﬁne morphisms in Cluster for each
r ∈[0, ∞). Carlsson and Mémoli prove that there is a unique functor FinMet →PCluster,
which takes the metric space with two points of distance r to the persistent cluster with one
cluster for t ≥r and two clusters for 0 ≤t < r and satisﬁes two other reasonable conditions;
see [CM13] for the details.
23The same argument, with the nth homotopy group functor πn : Top∗→Group in place of π1, proves that any
continuous endomorphism of an n-dimensional disk has a ﬁxed point.
24Namely, there are no clustering algorithms that are invariant under rigid scaling, consistent under alterations
to the distance function that “sharpen” the point clusters, and have the property that some distance function realizes
each possible partition.
25Emphasis his.

1.3. FUNCTORIALITY
17
The functors deﬁned in 1.3.1 are called covariant so as to distinguish them from
another variety of functor that we now introduce.
Definition 1.3.5. A contravariant functor F from C to D is a functor F : Cop →D.26
Explicitly, this consists of the following data:
• An object Fc ∈D, for each object c ∈C.
• A morphism F f : Fc′ →Fc ∈D, for each morphism f : c →c′ ∈C, so that the
domain and codomain of F f are, respectively, equal to F applied to the codomain or
domain of f.
The assignments are required to satisfy the following two functoriality axioms:
• For any composable pair f, g in C, F f · Fg = F(g · f).
• For each object c in C, F(1c) = 1Fc.
Notation 1.3.6. To avoid unnatural arrow-theoretic representations, a morphism in the
domain of a functor F : Cop →D will always be depicted as an arrow f : c →c′ in C,
pointing from its domain in C to its codomain in C. Similarly, its image will always be
depicted as an arrow F f : Fc′ →Fc in D, pointing from its domain to its codomain. Note
that these conventions require that the domain and codomain objects switch their relative
places, from left to right, but in examples, for instance in the case where C and D are
concrete categories, these positions are the familiar ones. Graphically, the mapping on
morphisms given by a contravariant functor is depicted as follows:
Cop
F
/ D
c
f

7→
Fc
7→
c′
7→
Fc′
F f
O
In accordance with this convention, if f : c →c′ and g: c′ →c′′ are morphisms in C,
their composite will always be written as gf : c →c′′. The image of this morphism under
the contravariant functor F : Cop →D is F(gf): Fc′′ →Fc, the composite F f · Fg of
Fg: Fc′′ →Fc′ and F f : Fc′ →Fc.
In summary, even in the presence of opposite categories, we always make an eﬀort to
draw arrows pointing in the “correct way” and depict composition in the usual order.27
Example 1.3.7.
(i) The contravariant power set functor P: Setop →Set sends a set A to its power set PA
and a function f : A →B to the inverse-image function f −1 : PB →PA that sends
B′ ⊂B to f −1(B′) ⊂A.
(ii) There is a functor (−)∗: Vectop
k →Vectk that carries a vector space to its dual vector
space V∗= Hom(V, k). A vector in V∗is a linear functional on V, i.e., a linear map
26In this text, a contravariant functor F from C to D will always be written as F : Cop →D. Some mathematicians
omit the “op” and let the context or surrounding verbiage convey the variance. We think this is bad practice,
as the co- or contravariance is an essential part of the data of a functor, which is not necessarily determined
by its assignation on objects.
More to the point, we ﬁnd that this notational convention helps mitigate the
consequences of temporary distraction. Seeing F : Cop →D written on a chalkboard immediately conveys that F
is a contravariant functor from C to D, even to the most spaced-out observer. A similar principle will motivate
other notational conventions introduced in Deﬁnition 3.1.15 and Notation 4.1.5.
27Of course, technically there is no meaning to the phrase “opposite category”: every category is the opposite
of some other category (its opposite category). But in practice, there is no question which of Set and Setop is the
“opposite category,” and suﬃciently many of the other cases can be deduced from this one.

18
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
V →k. This functor is contravariant, with a linear map φ: V →W sent to the linear
map φ∗: W∗→V∗that pre-composes a linear functional W
ω−→k with φ to obtain a
linear functional V
φ−→W
ω−→k.
(iii) The functor O: Topop →Poset that carries a space X to its poset O(X) of open
subsets is contravariant on the category of spaces: a continuous map f : X →Y
gives rise to a function f −1 : O(Y) →O(X) that carries an open subset U ⊂Y to its
preimage f −1(U), which is open in X; this is the deﬁnition of continuity. A similar
functor C: Topop →Poset carries a space to its poset of closed subsets.
(iv) There is a contravariant functor Spec: CRingop →Top that sends a commutative ring
R to its set Spec(R) of prime ideals given the Zariski topology. The closed subsets
in the Zariski topology are those subsets VI ⊂Spec(R) of prime ideals containing
a ﬁxed ideal I ⊂R. This construction is contravariantly functorial: for any ring
homomorphism φ: R →S and prime ideal p ⊂S , the inverse image φ−1(p) ⊂R
deﬁnes a prime ideal of R, and the inverse image function φ−1 : Spec(S ) →Spec(R)
is continuous with respect to the Zariski topology.
(v) For a generic small category C, a functor Cop →Set is called a (set-valued) presheaf
on C. A typical example is the functor O(X)op →Set whose domain is the poset
O(X) of open subsets of a topological space X and whose value at U ⊂X is the set of
continuous real-valued functions on U. The action on morphisms is by restriction.
This presheaf is a sheaf, if it satisﬁes an axiom that is introduced in Deﬁnition 3.3.4.
(vi) Presheaves on the category ∆, of ﬁnite non-empty ordinals and order-preserving
maps, are called simplicial sets.
∆is also called the simplex category.
The
ordinal n + 1 = {0, 1, . . . , n} may be thought of as a direct version of the topological
n-simplex and, with this interpretation in mind, is typically denoted by “[n]” by
algebraic topologists.
The following result, which appears immediately after functors are ﬁrst deﬁned in
[EM42b], is arguably the ﬁrst lemma in category theory.
Lemma 1.3.8. Functors preserve isomorphisms.
Proof. Consider a functor F : C →D and an isomorphism f : x →y in C with inverse
g: y →x. Applying the two functoriality axioms:
F(g)F( f) = F(gf) = F(1x) = 1Fx .
Thus, Fg: Fy →Fx is a left inverse to F f : Fx →Fy. Exchanging the roles of f and g
(or arguing by duality) shows that Fg is also a right inverse.
□
Example 1.3.9. Let G be a group, regarded as a one-object category BG.
A functor
X : BG →C speciﬁes an object X ∈C (the unique object in its image) together with an
endomorphism g∗: X →X for each g ∈G. This assignment must satisfy two conditions:
(i) h∗g∗= (hg)∗for all g, h ∈G.
(ii) e∗= 1X, where e ∈G is the identity element.
In summary, the functor BG →C deﬁnes an action of the group G on the object X ∈C.
When C = Set, the object X endowed with such an action is called a G-set.
When
C = Vectk, the object X is called a G-representation. When C = Top, the object X is
called a G-space. Note the utility of this categorical language for deﬁning several analogous
concepts simultaneously.
The action speciﬁed by a functor BG →C is sometimes called a left action. A right
action is a functor BGop →C. As before, each g ∈G determines an endomorphism

1.3. FUNCTORIALITY
19
g∗: X →X in C and the identity element must act trivially. But now, for a pair of elements
g, h ∈G these actions must satisfy the composition rule (hg)∗= g∗h∗.
Because the elements g ∈G are isomorphisms when regarded as morphisms in the
1-object category BG that represents the group, their images under any such functor must
also be isomorphisms in the target category. In particular, in the case of a G-representation
V : BG →Vectk, the linear map g∗: V →V must be an automorphism of the vector space
V. The point is that the functoriality axioms (i) and (ii) imply automatically that each g∗is
an automorphism and that (g−1)∗= (g∗)−1; the proof is a special case of Lemma 1.3.8.
In summary:
Corollary 1.3.10. When a group G acts functorially on an object X in a category C, its
elements g must act by automorphisms g∗: X →X and, moreover, (g∗)−1 = (g−1)∗.
A functor may or may not preserve monomorphisms or epimorphisms, but an argu-
ment similar to the proof of Lemma 1.3.8 shows that a functor necessarily preserves split
monomorphisms and split epimorphisms. The retraction or section deﬁnes an “equational
witness” for the mono or the epi.
Definition 1.3.11. If C is locally small, then for any object c ∈C we may deﬁne a pair of
covariant and contravariant functors represented by c:
C
C(c,−)
/ Set
Cop
C(−,c)
/ Set
x
f

7→
C(c, x)
f∗

x
f

7→
C(x, c)
7→
7→
y
7→
C(c, y)
y
7→
C(y, c)
f ∗
O
The notation suggests the action on objects: the functor C(c, −) carries x ∈C to the set
C(c, x) of arrows from c to x in C. Dually, the functor C(−, c) carries x ∈C to the set
C(x, c).
The functor C(c, −) carries a morphism f : x →y to the post-composition function
f∗: C(c, x) →C(c, y) introduced in Lemma 1.2.3(ii). Dually, the functor C(−, c) carries f
to the pre-composition function f ∗: C(y, c) →C(x, c) introduced in 1.2.3(iii). Note that
post-composition deﬁnes a covariant action on hom-sets, while pre-composition deﬁnes
a contravariant action. There are no choices involved here; post-composition is always a
covariant operation, while pre-composition is always a contravariant one. This is just the
natural order of things.
We leave it to the reader to verify that the assignments just described satisfy the two
functoriality axioms. Note that Lemma 1.3.8 specializes in the case of represented functors
to give a proof of the implications (i) ⇒(ii) and (i) ⇒(iii) of Lemma 1.2.3. These functors
will play a starring role in Chapter 2, where a number of examples in disguise are discussed.
The data of the covariant and contravariant functors introduced in Deﬁnition 1.3.11
may be encoded in a single bifunctor, which is the name for a functor of two variables. Its
domain is given by the product of a pair of categories.
Definition 1.3.12. For any categories C and D, there is a category C × D, their product,
whose
• objects are ordered pairs (c, d), where c is an object of C and d is an object of D,
• morphisms are ordered pairs ( f, g): (c, d) →(c′, d′), where f : c →c′ ∈C and
g: d →d′ ∈D, and

20
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
• in which composition and identities are deﬁned componentwise.
Definition 1.3.13. If C is locally small, then there is a two-sided represented functor
C(−, −): Cop × C →Set
deﬁned in the evident manner. A pair of objects (x, y) is mapped to the hom-set C(x, y). A
pair of morphisms f : w →x and h: y →z is sent to the function
C(x, y)
(f ∗,h∗) / C(w, z)
g
7→
hgf
that takes an arrow g: x →y and then pre-composes with f and post-composes with h to
obtain hgf : w →z.
At the beginning of this section, it was suggested that functors deﬁne morphisms
between categories. Indeed, categories and functors assemble into a category. Here the
size issues are even more signiﬁcant than we have encountered thus far.
To put a lid
on things, deﬁne Cat to be the category whose objects are small categories and whose
morphisms are functors between them. This category is locally small but not small: it
contains Set, Poset, Monoid, Group, and Groupoid as proper subcategories (see Exercises
1.3.i and 1.3.ii). However, none of these categories are objects of Cat.
The non-small categories of Example 1.1.3 are objects of CAT, some category of “large”
categories and functors between them. Russell’s paradox suggests that CAT should not be
so large as to contain itself, so we require the objects in CAT to be locally small categories;
the category CAT deﬁned in this way is not locally small, and so is thus excluded. There is
an inclusion functor Cat ,→CAT but no obvious functor pointing in the other direction.
The category of categories gives rise to a notion of an isomorphism of categories,
deﬁned by interpreting Deﬁnition 1.1.9 in Cat or in CAT. Namely, an isomorphism of
categories is given by a pair of inverse functors F : C →D and G: D →C so that the
composites GF and FG, respectively, equal the identity functors on C and on D. An
isomorphism induces a bijection between the objects of C and objects of D and likewise for
the morphisms.
Example 1.3.14. For instance:
(i) The functor (−)op : CAT →CAT deﬁnes a non-trivial automorphism of the category
of categories. Note that a functor F : C →D also deﬁnes a functor F : Cop →Dop.
(ii) For any groupG, the categories BG and BGop are isomorphic via the functor (−)−1 that
sends each morphism g ∈G to its inverse. Any right action can be converted into a
left action by precomposing with this isomorphism, which has the eﬀect of “inserting
inverses in the formula” deﬁning the endomorphism associated to a particular group
element.
(iii) Similarly, any groupoid is isomorphic to its opposite category via the functor that
acts as the identity on objects and sends a morphism to its unique inverse morphism.
(iv) Any ring R has an opposite ring Rop with the same underlying abelian group but with
the product of elements r and s in Rop deﬁned to be the product s · r of the elements s
and r in R. A left R-module is the same thing as a right Rop-module, which is to say
there is a covariant isomorphism of categories ModR  RopMod between the category
of left R-modules and the category of right Rop-modules.
(v) For any space X, there is a contravariant isomorphism of poset categories O(X) 
C(X)op that associates an open subset of X to its closed complement.

1.3. FUNCTORIALITY
21
(vi) The category MatR is isomorphic to its opposite via an identity-on-objects functor
that carries a matrix to its transpose.
Contrary to the impression created by Examples 1.3.14 (ii), (iii), and (vi), a category
is not typically isomorphic to its opposite category.
Example 1.3.15. Let E/F be a ﬁnite Galois extension: this means that F is a ﬁnite-index
subﬁeld of E and that the size of the group Aut(E/F) of automorphisms of E ﬁxing every
element of F is at least (in fact, equal to) the index [E : F]. In this case, G B Aut(E/F) is
called the Galois group of the Galois extension E/F.
Consider the orbit category OG associated to the group G. Its objects are subgroups
H ⊂G, which we identify with the left G-set G/H of left cosets of H.
Morphisms
G/H →G/K are G-equivariant maps, i.e., functions that commute with the left G-action.
By an elementary exercise left to the reader, every morphism G/H →G/K has the form
gH 7→gγK, where γ ∈G is an element so that γ−1Hγ ⊂K.
Let FieldE
F denote the subcategory of F/Field whose objects are intermediate ﬁelds
F ⊂K ⊂E. A morphism K →L is a ﬁeld homomorphism that ﬁxes the elements of F
pointwise. Note that the group of automorphisms of the object E ∈FieldE
F is the Galois
group G = Aut(E/F).
We deﬁne a functor Φ: Oop
G →FieldE
F that sends H ⊂G to the subﬁeld of E of elements
that are ﬁxed by H under the action of the Galois group. If G/H →G/K is induced by
γ, then the ﬁeld homomorphism x 7→γx sends an element x ∈E that is ﬁxed by K to an
element γx ∈E that is ﬁxed by H. This deﬁnes the action of the functor Φ on morphisms.
The fundamental theorem of Galois theory asserts that Φ deﬁnes a bijection on objects
but in fact more is true: Φ deﬁnes an isomorphism of categories Oop
G  FieldE
F.
These examples aside, the notion of isomorphism of categories is somewhat unnatural.
To illustrate, consider the category Set∂of sets and partially-deﬁned functions. A partial
function f : X →Y is a function from a (possibly-empty) subset X′ ⊂X to Y; the subset
X′ is the domain of deﬁnition of the partial function f. The composite of two partial
functions f : X →Y and g: Y →Z is the partial function whose domain of deﬁnition is the
intersection of the domain of deﬁnition of f with the preimage of the domain of deﬁnition
of g.
There is a functor (−)+ : Set∂→Set∗, whose codomain is the category of pointed sets,
that sends a set X to the pointed set X+, which is deﬁned to be the disjoint union of X with
a freely-added basepoint. By the axiom of regularity, we might deﬁne X+ B X ∪{X}.28
A partial function f : X →Y gives rise to a pointed function f+ : X+ →Y+ that sends
every point outside of the domain of deﬁnition of f to the formally added basepoint of Y+.
The inverse functor U : Set∗→Set∂discards the basepoint and sends a based function
f : (X, x) →(Y, y) to the partial function X\{x} →Y\{y} with the maximal possible domain
of deﬁnition.
By construction, we see that the composite U(−)+ is the identity endofunctor of the
category Set∂. By contrast, the other composite (U−)+ : Set∗→Set∗sends a pointed set
(X, x) to (X\{x} ∪{X\{x}}, X\{x}). These sets are isomorphic but they are not identical.
Nor is another set-theoretical construction of the “freely added basepoint” likely to deﬁne a
genuine inverse to the functor U : Set∗→Set∂. It is too restrictive to ask for the categories
Set∂and Set∗to be isomorphic.
28In the axioms of Zermelo-Fraenkel set theory, elements of sets (like everything else in its mathematical
universe) are themselves sets. The axiom of regularity prohibits a set from being an element of itself. As X < X,
we are free to add the element X as a disjoint basepoint.

22
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
Indeed, there is a better way to decide whether two categories may safely be regarded
as “the same.” To deﬁne it, we must relax the identities GF = 1C and FG = 1D between
functors F : C →D and G: D →C that deﬁne an isomorphism of categories. This is
possible because the collections Hom(C, C) and Hom(D, D) are not mere (possibly large)
sets: they have higher-dimensional structure. For any pair of categories C and D, the
collection Hom(C, D) of functors is itself a category. To explain this, we introduce what in
French is called a morphisme de foncteurs, the notion that launched the entire subject of
category theory: a natural transformation.
Exercises.
Exercise 1.3.i. What is a functor between groups, regarded as one-object categories?
Exercise 1.3.ii. What is a functor between preorders, regarded as categories?
Exercise 1.3.iii. Find an example to show that the objects and morphisms in the image of
a functor F : C →D do not necessarily deﬁne a subcategory of D.
Exercise 1.3.iv. Verify that the constructions introduced in Deﬁnition 1.3.11 are functorial.
Exercise 1.3.v. What is the diﬀerence between a functor Cop →D and a functor C →Dop?
What is the diﬀerence between a functor C →D and a functor Cop →Dop?
Exercise 1.3.vi. Given functors F : D →C and G: E →C, show that there is a category,
called the comma category F ↓G, which has
• as objects, triples (d ∈D, e ∈E, f : Fd →Ge ∈C), and
• as morphisms (d, e, f) →(d′, e′, f ′), a pair of morphisms (h: d →d′, k: e →e′) so
that the square
Fd
Fh

f
/ Ge
Gk

Fd′
f ′
/ Ge′
commutes in C, i.e., so that f ′ · Fh = Gk · f.
Deﬁne a pair of projection functors dom: F ↓G →D and cod: F ↓G →E.
Exercise 1.3.vii. Deﬁne functors to construct the slice categories c/C and C/c of Exercise
1.1.iii as special cases of comma categories constructed in Exercise 1.3.vi. What are the
projection functors?
Exercise 1.3.viii. Lemma 1.3.8 shows that functors preserve isomorphisms.
Find an
example to demonstrate that functors need not reﬂect isomorphisms: that is, ﬁnd a functor
F : C →D and a morphism f in C so that F f is an isomorphism in D but f is not an
isomorphism in C.
Exercise 1.3.ix. For any group G, we may deﬁne other groups:
• the center Z(G) = {h ∈G | hg = gh ∀g ∈G}, a subgroup of G,
• the commutator subgroup C(G), the subgroup of G generated by elements ghg−1h−1
for any g, h ∈G, and
• the automorphism group Aut(G), the group of isomorphisms φ: G →G in Group.
Trivially, all three constructions deﬁne a functor from the discrete category of groups (with
only identity morphisms) to Group. Are these constructions functorial in
• the isomorphisms of groups? That is, do they extend to functors Groupiso →Group?

1.4. NATURALITY
23
• the epimorphisms of groups29? That is, do they extend to functors Groupepi →Group?
• all homomorphisms of groups? That is, do they extend to functors Group →Group?
Exercise 1.3.x. Show that the construction of the set of conjugacy classes of elements of
a group is functorial, deﬁning a functor Conj: Group →Set. Conclude that any pair of
groups whose sets of conjugacy classes of elements have diﬀering cardinalities cannot be
isomorphic.
1.4. Naturality
It is not too misleading, at least historically, to say
that categories are what one must deﬁne in order
to deﬁne functors, and that functors are what one
must deﬁne in order to deﬁne natural
transformations.
Peter Freyd, Abelian categories [Fre03]
Any ﬁnite-dimensional k-vector space V is isomorphic to its linear dual, the vector
space V∗= Hom(V, k) of linear maps V →k, because these vector spaces have the same
dimension. This can be proven through the construction of an explicit dual basis: choose
a basis e1, . . . , en for V and then deﬁne e∗
1, . . . , e∗
n ∈V∗by
e∗
i (ej) =

1
i = j
0
i , j.
The collection e∗
1, . . . , e∗
n deﬁnes a basis for V∗and the map ei 7→e∗
i extends by linearity to
deﬁne an isomorphism V  V∗.
Now consider a related construction of the double dual V∗∗= Hom(Hom(V, k), k)
of V. If V is ﬁnite dimensional, then the isomorphism V  V∗is carried by the dual
vector space functor (−)∗: Vectop
k →Vectk to an isomorphism V∗ V∗∗. The composite
isomorphism V  V∗∗sends the basis e1, . . . , en to the dual dual basis e∗∗
1 , . . . , e∗∗
n .
As it turns out, this isomorphism has a simpler description.
For any v ∈V, the
“evaluation function”
f 7→f(v): V∗evv
−−→k
deﬁnes a linear functional on V∗. It turns out the assignment v 7→evv deﬁnes a linear
isomorphism V  V∗∗, this time requiring no “unnatural” choice of basis.30
What distinguishes the isomorphism between a ﬁnite-dimensional vector space and its
double dual from the isomorphism between a ﬁnite-dimensional vector space and its single
dual is that the former assembles into the components of a natural transformation in the
sense that we now introduce.
Definition 1.4.1. Given categories C and D and functors F,G: C ⇒D, a natural trans-
formation α: F ⇒G consists of:
• an arrow αc : Fc →Gc in D for each object c ∈C, the collection of which deﬁne the
components of the natural transformation,
29A non-trivial theorem demonstrates that a homomorphism φ: G →H is an epimorphism in Group if and
only if its underlying function is surjective; see [Lin70].
30In fact, e∗∗
i (e∗
j) = e∗
j(ei) = evei(e∗
j), and so the two isomorphisms V  V∗∗are the same—it is only our
description that has improved.

24
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
so that, for any morphism f : c →c′ in C, the following square of morphisms in D
(1.4.2)
Fc
F f

αc
/ Gc
G f

Fc′
αc′
/ Gc′
commutes, i.e., has a common composite Fc →Gc′ in D.
A natural isomorphism is a natural transformation α: F ⇒G in which every com-
ponent αc is an isomorphism. In this case, the natural isomorphism may be depicted as
α: F  G.
In practice, it is usually most elegant to deﬁne a natural transformation by saying that
“the arrows X are natural,” which means that the collection of arrows deﬁnes the components
of a natural transformation, leaving implicit the correct choices of domain and codomain
functors, and source and target categories. Here X should be a collection of morphisms
in a clearly identiﬁable (target) category, whose domains and codomains are deﬁned using
a common “variable” (an object of the source category). If this variable is c, one might
say “the arrows X are natural in c” to emphasize the domain object whose component is
being described. However, the totality of the data of the source and target categories, the
parallel pair of functors, and the components should always be considered part of the natural
transformation. The naturality condition (1.4.2) cannot be stated precisely with any less: it
refers to every object and every morphism in the domain category and is described using
the images in the codomain category under the action of both functors. The “boundary
data” needed to deﬁne a natural transformation α is often displayed in a globular diagram:
C
F

G
A
⇓α
D
The globular depiction of a natural transformation makes the notions of composable natural
transformations that are introduced in §1.7 particularly intuitive.
Example 1.4.3.
(i) For vector spaces of any dimension, the map ev: V →V∗∗that sends v ∈V to
the linear function evv : V∗→k deﬁnes the components of a natural transformation
from the identity endofunctor on Vectk to the double dual functor. To check that the
naturality square
V
φ

ev
/ V∗∗
φ∗∗

W
ev
/ W∗∗
commutes for any linear map φ: V →W, it suﬃces to consider the image of a generic
vector v ∈V. By deﬁnition, evφv : W∗→k carries a functional f : W →k to f(φv).
Recalling the deﬁnition of the action of the dual functor of Example 1.3.7(ii) on
morphisms, we see that φ∗∗(evv): W∗→k carries a functional f : W →k to fφ(v),
which amounts to the same thing.
(ii) By contrast, the identity functor and the single dual functor on ﬁnite-dimensional
vector spaces are not naturally isomorphic. One technical obstruction is somewhat

1.4. NATURALITY
25
beside the point: the identity functor is covariant while the dual functor is con-
travariant.31 More signiﬁcant is the essential failure of naturality. The isomorphisms
V  V∗that can be deﬁned whenever V is ﬁnite dimensional require a choice of
basis, which is preserved by essentially no linear maps, indeed by no non-identity
linear endomorphism.32
(iii) There is a natural transformation η: 1Set ⇒P from the identity to the covariant
power set functor whose components ηA : A →PA are the functions that carry a ∈A
to the singleton subset {a} ∈PA.
(iv) For G a group, Example 1.3.9 shows that a functor X : BG →C corresponds to an
object X ∈C equipped with a left action of G, which suggests a question: What is a
natural transformation between a pair X, Y : BG ⇒C of such functors? Because the
category BG has only one object, the data of α: X ⇒Y consists of a single morphism
α: X →Y in C that is G-equivariant, meaning that for each g ∈G, the diagram
X
α
/
g∗

Y
g∗

X
α
/ Y
commutes.
(v) The open and closed subset functors described in Example 1.3.7(iii) are naturally
isomorphic when they are regarded as functors O, C: Topop ⇒Set valued in the
category of sets. The components O(X)  C(X) of the natural isomorphism are
deﬁned by taking an open subset of X to its complement, which is closed. Naturality
asserts that the process of forming complements commutes with the operation of
taking preimages.
(vi) The construction of the opposite group described in Example 1.2.2(iii) deﬁnes a
(covariant!)
endofunctor (−)op : Group →Group of the category of groups; a
homomorphism φ: G →H induces a homomorphism φop : Gop →Hop deﬁned
by φop(g) = φ(g).
This functor is naturally isomorphic to the identity.
Deﬁne
ηG : G →Gop to be the homomorphism that sends g ∈G to its inverse g−1 ∈Gop; this
mapping does not deﬁne an automorphism of G, because it fails to commute with the
group multiplication, but it does deﬁne a homomorphism G →Gop. Now given any
homomorphism φ: G →H, the diagram
G
ηG /
φ

Gop
φop

H
ηH / Hop
commutes because φop(g−1) = φ(g−1) = φ(g)−1.
(vii) Deﬁne an endofunctor of Vectk by V 7→V ⊗V. There is a natural transformation
from the identity functor to this endofunctor whose components are the zero maps,
but this is the only such natural transformation: there is no basis-independent way to
deﬁne a linear map V →V ⊗V. The same result is true for the category of Hilbert
31A more ﬂexible notion of extranatural transformation can accommodate functors with conﬂicting variance
[ML98a, IX.4]; see Exercise 1.4.vi.
32A proof that there exists no extranatural isomorphism between the identity and dual functors on the categories
of ﬁnite-dimensional vector spaces is given in [EM45, p. 234].

26
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
spaces and linear operators between them, in which context it is related to the “no
cloning theorem” in quantum physics.33
Another familiar isomorphism that is not natural arises in the classiﬁcation of ﬁnitely
generated abelian groups, objects of a category Abfg. Let TA denote the torsion subgroup
of an abelian group A, the subgroup of elements with ﬁnite order. In classifying ﬁnitely
generated groups, one proves that every ﬁnitely generated abelian group A is isomorphic
to the direct sum TA ⊕(A/TA), the summand A/TA being the torsion-free part of A.
However, these isomorphisms are not natural, as we now demonstrate.
Proposition 1.4.4. The isomorphisms A  TA ⊕(A/TA) are not natural34 in A ∈Abfg.
Proof. Suppose the isomorphisms A  TA ⊕(A/TA) were natural in A. Then the
composite
(1.4.5)
A ↠A/TA ↣TA ⊕(A/TA)  A
of the canonical quotient map, the inclusion into the direct sum, and the hypothesized
natural isomorphism would deﬁne a natural endomorphism of the identity functor on Abfg.
We shall see that this is impossible.
To derive the contradiction, we ﬁrst show that every natural endomorphism of the
identity functor on Abfg is multiplication by some n ∈Z.
Clearly the component of
α: 1Abfg ⇒1Abfg at Z has this description for some n. Now observe that homomorphisms
Z
a−→A correspond bijectively to elements a ∈A, choosing a to be the image of 1 ∈Z.
Thus, commutativity of
Z
αZ=n·−/
a

Z
a

A
αA
/ A
forces us to deﬁne αA(a) = n · a.
In the case where α is the natural transformation deﬁned by (1.4.5), by examining the
component at A = Z, we can see that n , 0. Finally, consider A = Z/2nZ. This group
is torsion, so any map, such as αZ/2nZ, which factors through the quotient by its torsion
subgroup is zero. But n , 0 ∈Z/2nZ, a contradiction.
□
Example 1.4.6. The Riesz representation theorem can be expressed as a natural isomor-
phism of functors from the category cHaus of compact Hausdorﬀspaces and continu-
ous maps to the category Ban of real Banach spaces and continuous linear maps. Let
Σ: cHaus →Ban be the functor that carries a compact Hausdorﬀspace X to the Banach
space Σ(X) of signed Baire measures on X and sends a continuous map f : X →Y to the
map µ 7→µ ◦f −1 : Σ(X) →Σ(Y). Let C∗: cHaus →Ban be the functor that carries X to
the linear dual C(X)∗of the Banach space C(X) of continuous real-valued functions on X.
Now for each µ ∈Σ(X), there is a linear functional φµ : C(X) →R deﬁned by
φµ(g) B
Z
X
g dµ,
g ∈C(X) .
33The states in a quantum mechanical system are modeled by vectors in a Hilbert space and the observables are
operators on that space. See [Bae06] for more.
34Any ﬁnitely generated abelian group A has a short exact sequence 0 →TA →A →A/TA →0. Proposition
1.4.4 asserts that there is no natural splitting.

1.4. NATURALITY
27
For each µ ∈Σ(X), f : X →Y, and h ∈C(Y) the equation
Z
X
hf dµ =
Z
Y
h d(µ ◦f −1)
says that the assignment µ 7→φµ deﬁnes the components of a natural transformation
η: Σ ⇒C∗. The Riesz representation theorem asserts that this natural transformation is
a natural isomorphism; see [Har83].
Example 1.4.7. Consider morphisms f : w →x and h: y →z in a locally small category
C. Post-composition by h and pre-composition by f deﬁne functions between hom-sets
(1.4.8)
C(x, y)
h·−
/
−· f

C(x, z)
−· f

C(w, y)
h·−/ C(w, z)
In Deﬁnition 1.3.13 and elsewhere, h·−was denoted by h∗and −· f was denoted by f ∗, but
we ﬁnd this less-concise notation to be move evocative here. Associativity of composition
implies that this diagram commutes: for any g: x →y, the common image is hgf : w →z.
Interpreting the vertical arrows as the images of f under the actions of the functors
C(−, y) and C(−, z), the square (1.4.8) demonstrates that there is a natural transformation
h∗: C(−, y) ⇒C(−, z)
whose components are deﬁned by post-composition with h: y →z. Flipping perspectives
and interpreting the horizontal arrows as the images of h under the actions of the functors
C(x, −) and C(w, −), the square (1.4.8) demonstrates that there is a natural transformation
f ∗: C(x, −) ⇒C(w, −)
whose components are deﬁned by pre-composition with f : w →x.
A ﬁnal example describes the natural isomorphisms that supply proofs of the funda-
mental laws of elementary arithmetic.
Example 1.4.9 (a categoriﬁcation of the natural numbers). For sets A and B, let A × B
denote their cartesian product, let A + B denote their disjoint union, and let AB denote the
set of functions from B to A. These constructions are related by natural isomorphisms
A × (B + C)  (A × B) + (A × C)
(A × B)C  AC × BC
(1.4.10)
AB+C  AB × AC
(AB)C  AB×C
In the ﬁrst instance, the isomorphism deﬁnes the components of a natural transformation
between a pair of functors Set×Set×Set →Set. For the others, the variance in the variables
appearing as “exponents” is contravariant. This is because the assignment (B, A) 7→AB
deﬁnes a functor Setop × Set →Set, namely the two-sided represented functor introduced
in Deﬁnition 1.3.13.
The displayed natural isomorphisms restrict to the category Finiso of ﬁnite sets and
bijections, a category which serves as the domain for the cardinality functor |−|: Finiso →N,
whose codomain is the discrete category of natural numbers.35 Writing a = |A|, b = |B|,
35Mathematical invariants often take the form of a functor from a groupoid to a discrete category.

28
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
and c = |C|, the cardinality functor carries these natural isomorphisms to the equations
a × (b + c) = (a × b) + (a × c)
(a × b)c = ac × bc
ab+c = ab × ac
(ab)c = a(b×c)
through a process called decategoriﬁcation. Reversing directions, Finiso is a categoriﬁca-
tion of the natural numbers, which reveals that the familiar laws of arithmetic follow from
more fundamental natural isomorphisms between various constructions on sets. A slick
proof of each of the displayed natural isomorphisms (1.4.10) appears in Corollary 4.5.6.
Exercises.
Exercise 1.4.i. Suppose α: F ⇒G is a natural isomorphism. Show that the inverses of
the component morphisms deﬁne the components of a natural isomorphism α−1 : G ⇒F.
Exercise 1.4.ii. What is a natural transformation between a parallel pair of functors be-
tween groups, regarded as one-object categories?
Exercise 1.4.iii. What is a natural transformation between a parallel pair of functors
between preorders, regarded as categories?
Exercise 1.4.iv. In the notation of Example 1.4.7, prove that distinct parallel morphisms
f, g: c ⇒d deﬁne distinct natural transformations
f∗, g∗: C(−, c) ⇒C(−, d)
and
f ∗, g∗: C(d, −) ⇒C(c, −)
by post- and pre-composition.
Exercise 1.4.v. Recall the construction of the comma category for any pair of functors
F : D →C and G: E →C described in Exercise 1.3.vi.
From this data, construct a
canonical natural transformation α: F dom ⇒G cod between the functors that form the
boundary of the square
F ↓G
dom

cod /
⇒
α
E
G

D
F
/ C
Exercise 1.4.vi. Given a pair of functors F : A × B × Bop →D and G: A × C × Cop →D,
a family of morphisms
αa,b,c : F(a, b, b) →G(a, c, c)
in D deﬁnes the components of an extranatural transformation α: F ⇒G if for any
f : a →a′, g: b →b′, and h: c →c′ the following diagrams commute in D:
F(a, b, b)
F( f,1b,1b)

αa,b,c / G(a, c, c)
G( f,1c,1c)

F(a′, b, b)
αa′,b,c / G(a′, c, c)
F(a, b, b′)
F(1a,g,1b′)

F(1a,1b,g)/ F(a, b, b)
αa,b,c

F(a, b′, b′) αa,b′,c / G(a, c, c)
F(a, b, b)
αa,b,c′ /
αa,b,c

G(a, c′, c′)
G(1a,1c′,h)

G(a, c, c) G(1a,h,1c)/ G(a, c′, c)
The left-hand square asserts that the components α−,b,c : F(−, b, b) ⇒G(−, c, c) deﬁne a
natural transformation in a for each b ∈B and c ∈C. The remaining squares assert that
the components αa,−,c : F(a, −, −) ⇒G(a, c, c) and αa,b,−: F(a, b, b) ⇒G(a, −, −) deﬁne
transformations that are respectively extranatural in b and in c. Explain why the functors F
and G must have a common target category for this deﬁnition to make sense.

1.5. EQUIVALENCE OF CATEGORIES
29
1.5. Equivalence of categories
. . . la mathématique est l’art de donner le même
nom à des choses diﬀérentes.
. . . mathematics is the art of giving the same
name to diﬀerent things.
Henri Poincaré, “L’avenir des mathématiques”
[Poi08]
There is an analogy between the notion of a natural transformation between a parallel
pair of functors and the notion of a homotopy between a parallel pair of continuous functions
with one important diﬀerence: natural transformations are not generally invertible.36 As in
Example 1.1.4(iv), let 1 denote the discrete category with a single object and let 2 denote
the category with two objects 0, 1 ∈2 and a single non-identity arrow 0 →1. There are
two evident functors i0, i1 : 1 ⇒2 whose subscripts designate the objects in their image.
Lemma 1.5.1. Fixing a parallel pair of functors F,G: C ⇒D, natural transformations
α: F ⇒G correspond bijectively to functors H : C × 2 →D such that H restricts along i0
and i1 to the functors F and G, i.e., so that
(1.5.2)
C
F
"
i0
/ C × 2
H

C
i1
o
G
|
D
commutes.
Here i0 denotes the functor deﬁned on objects by c 7→(c, 0); it may be regarded as the
product of the identity functor on C with the functor i0.
Proof. Exercise 1.5.i.
□
For instance, if C = 2, each functor F,G: 2 ⇒D picks out an arrow of D, which we
also denote by F and G. The directed graph underlying the category 2 × 2 is
(1.5.3)
•

/

•

•
/ •
together with four identity endoarrows not depicted here; the diagonal serves as the common
composite of the edges of the square. The functor H necessarily maps the top and bottom
arrows of (1.5.3) to F and G, respectively. The vertical arrows deﬁne the components
α0 and α1 of the natural transformation, and the diagonal arrow witnesses that the square
formed by these four morphisms in D commutes.
If, in (1.5.2), the category 2 were replaced by the category I with two objects and a
single arrow in each hom-set, necessarily an isomorphism, then “homotopies” with this
interval correspond bijectively to natural isomorphisms. The category 2 deﬁnes the walking
arrow or free arrow, while I deﬁnes the walking isomorphism or free isomorphism, in
a sense that is explained in Examples 2.1.5(x) and (xi).
36A natural transformation is invertible if and only if each of its constituent arrows is an isomorphism, in which
case the pointwise inverses assemble into a natural transformation by Exercise 1.4.i.

30
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
Natural isomorphisms are used to deﬁne the notion of equivalence of categories.
An equivalence of categories is precisely a “homotopy equivalence” where the notion of
homotopy is deﬁned using the category I.
Definition 1.5.4. An equivalence of categories consists of functors F : C ⇆D: G to-
gether with natural isomorphisms η: 1C  GF, ϵ : FG  1D.37 Categories C and D are
equivalent, written C ≃D, if there exists an equivalence between them.
Unsurprisingly:
Lemma 1.5.5. The notion of equivalence of categories deﬁnes an equivalence relation. In
particular, if C ≃D and D ≃E, then C ≃E.
Proof. Exercise 1.5.vi.
□
Example 1.5.6. The functors (−)+ : Set∂→Set∗and U : Set∗→Set∂introduced in
§1.3 deﬁne an equivalence of categories between the category of pointed sets and the
category of sets and partial functions. The composite U(−)+ is the identity on Set∂, so
one of the required natural isomorphisms is the identity. There is a natural isomorphism
η: 1Set∗ (U−)+ whose components
η(X,x) : (X, x) →(X\{x} ∪{X\{x}}, X\{x})
are deﬁned to be the based functions that act as the identity on X\{x}.
Consider the categories Matk and Vectfd
k of k-matrices and ﬁnite-dimensional non-
zero k-vector spaces together with an intermediate category Vectbasis
k
whose objects are
ﬁnite-dimensional vector spaces with chosen basis and whose morphisms are arbitrary (not
necessarily basis-preserving) linear maps. These categories are related by the displayed
sequence of functors:
Matk
k(−) / Vectbasis
k
H
o
U
/ Vectfd
k
C
o
Here U : Vectbasis
k
→Vectfd
k is the forgetful functor. The functor k(−) : Matk →Vectbasis
k
sends n to the vector space kn, equipped with the standard basis. An m×n-matrix, interpreted
with respect to the standard bases on kn and km, deﬁnes a linear map kn →km and this
assignment is functorial. The functor H carries a vector space to its dimension and a linear
map φ: V →W to the matrix expressing the action of φ on the chosen basis of V using the
chosen basis of W. The functor C is deﬁned by choosing a basis for each vector space.
Our aim is to show that these functors display equivalences of categories
Matk ≃Vectbasis
k
≃Vectfd
k .
The composite equivalence Matk ≃Vectfd
k expresses an equivalence between concrete and
abstract presentations of linear algebra. A direct proof of these equivalences, by deﬁning
suitable natural isomorphisms, is not diﬃcult, but we prefer to give an indirect proof via
a useful general theorem characterizing those functors forming part of an equivalence of
categories. Its statement requires a few deﬁnitions:
Definition 1.5.7. A functor F : C →D is
• full if for each x, y ∈C, the map C(x, y) →D(Fx, Fy) is surjective;
• faithful if for each x, y ∈C, the map C(x, y) →D(Fx, Fy) is injective;
37The notion of equivalence of categories was introduced by Grothendieck in the form of what we would now
call an adjoint equivalence; this deﬁnition appears in Proposition 4.4.5. This explains the directions we have
adopted for the natural isomorphisms η and ϵ, which are otherwise immaterial (see Exercise 1.4.i).

1.5. EQUIVALENCE OF CATEGORIES
31
• and essentially surjective on objects if for every object d ∈D there is some c ∈C
such that d is isomorphic to Fc.
Remark 1.5.8. Fullness and faithfulness are local conditions; a global condition, by con-
trast, applies “everywhere.” A faithful functor need not be injective on morphisms; neither
must a full functor be surjective on morphisms. A faithful functor that is injective on
objects is called an embedding and identiﬁes the domain category as a subcategory of the
codomain; in this case, faithfulness implies that the functor is (globally) injective on arrows.
A full and faithful functor, called fully faithful for short, that is injective-on-objects deﬁnes
a full embedding of the domain category into the codomain category. The domain then
deﬁnes a full subcategory of the codomain.
Theorem 1.5.9 (characterizing equivalences of categories). A functor deﬁning an equiv-
alence of categories is full, faithful, and essentially surjective on objects. Assuming the
axiom of choice, any functor with these properties deﬁnes an equivalence of categories.
The proof of Theorem 1.5.9 makes repeated use of the following elementary lemma.
Lemma 1.5.10. Any morphism f : a →b and ﬁxed isomorphisms a  a′ and b  b′
determine a unique morphism f ′ : a′ →b′ so that any of—or, equivalently, all of—the
following four diagrams commute:
a
f

a′

o
f ′

a
f


/ a′
f ′

a
f

a′

o
f ′

a
f


/ a′
f ′

b

/ b′
b

/ b′
b
b′

o
b
b′

o
Proof. The left-hand diagram deﬁnes f ′. The commutativity of the remaining dia-
grams is left as Exercise 1.5.iii.
□
Proof38 of Theorem 1.5.9. First suppose that F : C →D, G: D →C, η: 1C  GF,
and ϵ : FG  1D deﬁne an equivalence of categories. For any d ∈D, the component of the
natural isomorphism ϵd : FGd  d demonstrates that F is essentially surjective. Consider
a parallel pair f, g: c ⇒c′ in C. If F f = Fg, then both f and g deﬁne an arrow c →c′
making the diagram
c
f or g

ηc

/ GFc
GF f=GFg

c′
ηc′

/ GFc′
that expresses the naturality of η commute. Lemma 1.5.10 implies that there is a unique
arrow c →c′ with this property, whence f = g. Thus, F is faithful, and by symmetry, so
is G. Given k: Fc →Fc′, by Lemma 1.5.10, Gk and the isomorphisms ηc and ηc′ deﬁne a
unique h: c →c′ for which both Gk and GFh make the diagram
c
h

ηc

/ GFc
Gk or GFh

c′
ηc′

/ GFc′
38The reader is strongly encouraged to stop reading here and attempt to prove this result on their own. Indeed,
in the ﬁrst iteration of the course that produced these lecture notes, this proof was left to the homework, without
even the time-saving suggestion of Lemma 1.5.10.

32
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
commute. By Lemma 1.5.10 again, GFh = Gk, whence Fh = k by faithfulness of G. Thus,
F is full, faithful, and essentially surjective.
For the converse, suppose now that F : C →D is full, faithful, and essentially surjective
on objects. Using essential surjectivity and the axiom of choice, choose, for each d ∈D,
an object Gd ∈C and an isomorphism ϵd : FGd  d. For each ℓ: d →d′, Lemma 1.5.10
deﬁnes a unique morphism making the square
FGd
ϵd

/

d
ℓ

FGd′
ϵd′

/ d′
commute. Since F is fully faithful, there is a unique morphism Gd →Gd′ with this
image under F, which we deﬁne to be Gℓ. This deﬁnition is arranged so that the chosen
isomorphisms assemble into the components of a natural transformation ϵ : FG ⇒1D. It
remains to prove that the assignment of arrows ℓ7→Gℓis functorial and to deﬁne the
natural isomorphism η: 1C ⇒GF.
Functoriality of G is another consequence of Lemma 1.5.10 and faithfulness of F. The
morphisms FG1d and F1Gd both make
FGd
FG1d or F1Gd

ϵd

/ d
1d

FGd
ϵd

/ d
commute, whence G1d = 1Gd. Similarly, given ℓ′ : d′ →d′′, both F(Gℓ′ · Gℓ) and FG(ℓ′ℓ)
make
FGd
F(Gℓ′·Gℓ) or FG(ℓ′ℓ)

ϵd

/ d
ℓ′ℓ

FGd′′
ϵd′′

/ d′′
commute, whence Gℓ′ · Gℓ= G(ℓ′ℓ).
Finally, by full and faithfulness of F, we may deﬁne the isomorphisms ηc : c →GFc
by specifying isomorphisms Fηc : Fc →FGFc; see Exercise 1.5.iv. Deﬁne Fηc to be ϵ−1
Fc.
For any f : c →c′, the outer rectangle
Fc
F f

Fηc
/ FGFc
ϵFc
/
FGF f

Fc
F f

Fc′
Fηc′ / FGFc′
ϵFc′ / Fc′
commutes, both composites being F f. The right-hand square commutes by naturality of
ϵ. Because ϵFc′ is an isomorphism, this implies that the left-hand square commutes; see
Lemma 1.6.21. Faithfulness of F tells us that ηc′ · f = GF f · ηc, i.e., that η is a natural
transformation.
□
The proof of Theorem 1.5.9 is an example of a proof by “diagram chasing,” a technique
that is introduced more formally in §1.6. If some of the steps were hard to follow, we suggest
having a second look after that section is absorbed.

1.5. EQUIVALENCE OF CATEGORIES
33
Corollary 1.5.11 (an equivalence between abstract and concrete linear algebra). For any
ﬁeld k, the categories Matk and Vectfd
k are equivalent.
Proof. Applying Theorem 1.5.9, it is easy to see that each of the functors
Matk ⇆Vectbasis
k
⇄Vectfd
k
deﬁnes an equivalence of categories. For instance, the morphisms in the category Vectbasis
k
are deﬁned so that U : Vectbasis
k
→Vectfd
k is fully faithful.
□
A category is connected if any pair of objects can be connected by a ﬁnite zig-zag of
morphisms.
Proposition 1.5.12. Any connected groupoid is equivalent, as a category, to the automor-
phism group of any of its objects.
Proof. Choose any object g of a connected groupoid G and let G = G(g, g) denote its
automorphism group. The inclusion BG ,→G mapping the unique object of BG to g ∈G
is full and faithful, by deﬁnition, and essentially surjective, since G was assumed to be
connected. Apply Theorem 1.5.9.
□
As a special case, we obtain the following result:
Corollary 1.5.13. In a path-connected space X, any choice of basepoint x ∈X yields an
isomorphic fundamental group π1(X, x).
Proof. Recall from Example 1.1.12(ii) that any space X has a fundamental groupoid
Π1(X) whose objects are points in X and whose morphisms are endpoint-preserving homo-
topy classes of paths in X. Picking any point x, the group of automorphisms of the object
x ∈Π1(X) is exactly the fundamental group π1(X, x). Proposition 1.5.12 implies that any
pair of automorphism groups are equivalent, as categories, to the fundamental groupoid
π1(X, x) 
∼
/ Π1(X)
π1(X, x′)
? _
∼
o
and thus to each other. An equivalence between 1-object categories is an isomorphism.
Exercise 1.3.i reveals that an isomorphism of groups, regarded as 1-object categories, is
exactly an isomorphism of groups in the usual sense (a bijective homomorphism). Thus,
all of the fundamental groups deﬁned by choosing a basepoint in a path-connected space
are isomorphic.
□
Remark 1.5.14. Frequently, one functor of an equivalence of categories can be deﬁned
canonically, while the inverse equivalence requires the axiom of choice. In the case of the
equivalence between the fundamental group and fundamental groupoid of a path-connected
space, a more precise statement is that one comparison equivalence is natural while the
other, making use of the axiom of choice, is not. Write Toppc
∗for the category of path-
connected based topological spaces. We regard the fundamental group π1 and fundamental
groupoid Π1 as a parallel pair of functors:
π1 : Toppc
∗
π1
−→Group ,→Cat
and
Π1 : Toppc
∗
U
−→Top
Π1
−→Groupoid ,→Cat .
The inclusion of the fundamental group into the fundamental groupoid deﬁnes a natural
transformation π1 ⇒Π1 such that each component π1(X, x) →Π1(X), itself a functor,
is furthermore an equivalence of categories. The deﬁnition of the inverse equivalence
Π1(X) →π1(X, x) requires the choice, for each point p ∈X, of a path-connecting p to the
basepoint x. These (path homotopy classes of) chosen paths need not be preserved by maps

34
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
in Toppc
∗. Thus, the inverse equivalences Π1(X) →π1(X, x) do not assemble into a natural
transformation.
The group of automorphisms of any object in a connected groupoid, considered in
Proposition 1.5.12, is one example of a skeleton of a category.
Definition 1.5.15. A category C is skeletal if it contains just one object in each isomor-
phism class. The skeleton skC of a category C is the unique (up to isomorphism) skeletal
category that is equivalent to C.
Remark 1.5.16. The category skC may be constructed by choosing one object in each
isomorphism class in C and deﬁning skC to be the full subcategory on this collection of
objects. By Theorem 1.5.9, the inclusion skC ,→C deﬁnes an equivalence of categories.
This construction, however, fails to deﬁne a functor sk(−): CAT →CAT because there is no
reason that a functor F : C →D would necessarily restrict to deﬁne a functor between the
chosen skeletal subcategories. It is possible to choose a functor skF : skC →skD whose
inclusion into D is naturally isomorphic to the restriction of F to skC, but these choices
will not be strictly functorial.39
Note than an equivalence between skeletal categories is necessarily an isomorphism of
categories. Thus, two categories are equivalent if and only if their skeletons are isomorphic.
For this reason, we feel free to speak of the skeleton of a category, even though its
construction is not canonical.
Example 1.5.17.
(i) The skeleton of a connected groupoid is the group of automorphisms of any of its
objects (see Proposition 1.5.12).
(ii) The skeleton of the category deﬁned by a preorder, as described in Example 1.1.4(iii),
is a poset.
(iii) The skeleton of the category Vectfd
k is the category Matk.
(iv) The skeleton of the category Finiso is the category whose objects are positive integers
and with Hom(n, n) = Σn, the group of permutations of n elements. The hom-sets
between distinct natural numbers are all empty.
Example 1.5.18 (a categoriﬁcation of the orbit-stabilizer theorem). Let X : BG →Set be
a left G-set. Its translation groupoid TGX has elements of X as objects. A morphism
g: x →y is an element g ∈G so that g · x = y. The objects in the skeleton skTGX are the
connected components in the translation groupoid. These are precisely the orbits of the
group action, which partition X in precisely this manner.
Consider x ∈X as a representative of its orbit Ox. Because the translation groupoid is
equivalent to its skeleton, we must have
HomskTGX(Ox, Ox)  HomTGX(x, x) =: Gx ,
the set of automorphisms of x.
This group consists of precisely those g ∈G so that
g · x = x. In other words, the group HomTGX(x, x) is the stabilizer Gx of x with respect to
the G-action. Note that this argument implies that any pair of elements in the same orbit
must have isomorphic stabilizers. As is always the case for a skeletal groupoid, there are no
morphisms between distinct objects. In summary, the skeleton of the translation groupoid,
as a category, is the disjoint union of the stabilizer groups, indexed by the orbits of the
action of G on X.
39There is, however, a pseudofunctor sk(−): CAT →CAT, but a precise deﬁnition of this concept is beyond the
scope of this text.

1.5. EQUIVALENCE OF CATEGORIES
35
The set of morphisms in the translation groupoid with domain x is isomorphic to G.
This set may be expressed as a disjoint union of hom-sets HomTGX(x, y), where y ranges over
the orbit Ox. Each of these hom-sets is isomorphic to HomTGX(x, x) = Gx. In particular,
|G| = |Ox| · |Gx|, proving the orbit-stabilizer theorem.
A guiding principle in category theory is that categorically-deﬁned concepts should
be equivalence invariant. Some category theorists go so far as to call a deﬁnition “evil”
if it is not invariant under equivalence of categories. The only evil deﬁnitions that have
been introduced thus far are smallness and discreteness. A category is essentially small if
it is equivalent to a small category or, equivalently, if its skeleton is a small category. A
category is essentially discrete if it is equivalent to a discrete category.
The following constructions and deﬁnitions are equivalence invariant:
• If a category is locally small, any category equivalent to it is again locally small.
• If a category is a groupoid, any category equivalent to it is again a groupoid.
• If C ≃D, then Cop ≃Dop.
• The product of a pair of categories is equivalent to the product of any pair of equivalent
categories.
• An arrow in C is an isomorphism if and only if its image under an equivalence C ≃−→D
is an isomorphism.
The last of these properties can be generalized. By Theorem 1.5.9, a full and faithful
functor F : C →D deﬁnes an equivalence onto its essential image, the full subcategory of
objects isomorphic to Fc for some c ∈C. Fully faithful functors have a useful property
stated as Exercise 1.5.iv: if F is full and faithful and Fc and Fc′ are isomorphic in D, then
c and c′ are isomorphic in C. We will introduce what are easily the most important fully
faithful functors in category theory in Chapter 2: the covariant and contravariant Yoneda
embeddings.
Exercises.
Exercise 1.5.i. Prove Lemma 1.5.1.
Exercise 1.5.ii. Segal deﬁned a category Γ in [Seg74] as follows:
Γ is the category whose objects are all ﬁnite sets, and whose mor-
phisms from S to T are the maps θ: S →P(T) such that θ(α) and
θ(β) are disjoint when α , β. The composite of θ: S →P(T) and
φ: T →P(U) is ψ: S →P(U), where ψ(α) =
S
β∈θ(α)
φ(β).
Prove that Γ is equivalent to the opposite of the category Fin∗of ﬁnite pointed sets. In
particular, the functors introduced in Example 1.3.2(xi) deﬁne presheaves on Γ.
Exercise 1.5.iii. Prove Lemma 1.5.10.
Exercise 1.5.iv. Show that a full and faithful functor F : C →D both reﬂects and creates
isomorphisms. That is, show:
(i) If f is a morphism in C so that F f is an isomorphism in D, then f is an isomorphism.
(ii) If x and y are objects in C so that Fx and Fy are isomorphic in D, then x and y are
isomorphic in C.
By Lemma 1.3.8, the converses of these statements hold for any functor.
Exercise 1.5.v. Find an example to show that a faithful functor need not reﬂect isomor-
phisms.
Exercise 1.5.vi.

36
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
(i) Prove that the composite of a pair of full, faithful, or essentially surjective functors
again has the same properties.
(ii) Prove that if C ≃D and D ≃E, then C ≃E. Conclude that equivalence of categories
is an equivalence relation.40
Exercise 1.5.vii. Let G be a connected groupoid and let G be the group of automorphisms
at any of its objects. The inclusion BG ,→G deﬁnes an equivalence of categories. Construct
an inverse equivalence G →BG.
Exercise 1.5.viii. Klein’s Erlangen program studies groupoids of geometric spaces of var-
ious kinds. Prove that the groupoid Afﬁne of aﬃne planes is equivalent to the groupoid Proj|
of projective planes with a distinguished line, called the “line at inﬁnity.” The morphisms
in each groupoid are bijections on both points and lines (preserving the distinguished line
in the case of projective planes) that preserve and reﬂect the incidence relation. The functor
Proj| →Afﬁne removes the line at inﬁnity and the points it contains. Explicitly describe an
inverse equivalence.
Exercise 1.5.ix. Show that any category that is equivalent to a locally small category is
locally small.
Exercise 1.5.x. Characterize the categories that are equivalent to discrete categories. A
category that is connected and essentially discrete is called chaotic.
Exercise 1.5.xi. Consider the functors Ab →Group (inclusion), Ring →Ab (forget-
ting the multiplication), (−)× : Ring →Group (taking the group of units), Ring →Rng
(dropping the multiplicative unit), Field →Ring (inclusion), and ModR →Ab (forgetful).
Determine which functors are full, which are faithful, and which are essentially surjective.
Do any deﬁne an equivalence of categories? (Warning: A few of these questions conceal
research-level problems, but they can be fun to think about even if full solutions are hard
to come by.)
1.6. The art of the diagram chase
The diagrams incorporate a large amount of
information. Their use provides extensive savings
in space and in mental eﬀort. In the case of many
theorems, the setting up of the correct diagram is
the major part of the proof. We therefore urge that
the reader stop at the end of each theorem and
attempt to construct for himself the relevant
diagram before examining the one which is given
in the text. Once this is done, the subsequent
demonstration can be followed more readily; in
fact, the reader can usually supply it himself.
Samuel Eilenberg and Norman Steenrod,
Foundations of Algebraic Topology [ES52]
The proof of Theorem 1.5.9 used a technique called “diagram chasing,” also called
abstract nonsense, that we now consider more formally. A diagram is typically presented
informally as a directed graph of morphisms in a category. In this informal presentation,
the diagram commutes if any two paths of composable arrows in the directed graph with
40A second, more direct proof of this result appears as Exercise 1.7.vi.

1.6. THE ART OF THE DIAGRAM CHASE
37
common source and target have the same composite. For example, a commutative triangle
(1.6.1)
•
h
/
f

•
•
g
?
asserts that the hypotenuse h equals the composite gf of the two legs.
Commutative
diagrams in a category can be used to deﬁne more complicated mathematical objects. For
example:
Definition 1.6.2. A monoid is an object M ∈Set together with a pair of morphisms
µ: M × M →M and η: 1 →M so that the following diagrams commute:
M × M × M
µ×1M

1M×µ / M × M
µ

M
η×1M /
1M
#
M × M
µ

M
1M×η
o
1M
{
M × M
µ
/ M
M
The morphism µ: M × M →M deﬁnes a binary “multiplication” operation on M. The
morphism η: 1 →M, whose domain is a singleton set, identiﬁes an element η ∈M. The
three axioms demand that multiplication is associative and that multiplication on the left
or right by the element η acts as the identity. The advantage of the commutative diagrams
approach to this deﬁnition is that it readily generalizes to other categories. For example:
Definition 1.6.3. A topological monoid is an object M ∈Top together with morphisms
µ: M × M →M and η: 1 →M so that the following diagrams commute:
M × M × M
µ×1M

1M×µ / M × M
µ

M
η×1M /
1M
#
M × M
µ

M
1M×η
o
1M
{
M × M
µ
/ M
M
A unital ring41 is an object R ∈Ab together with morphisms µ: R ⊗Z R →R and
η: Z →R so that the following diagrams commute:
R ⊗Z R ⊗Z R
µ⊗Z1R

1R⊗Zµ / R ⊗Z R
µ

R
η⊗Z1R /
1R
"
R ⊗Z R
µ

R
1R⊗Zη
o
1R
|
R ⊗Z R
µ
/ R
R
A k-algebra is an object R ∈Vectk together with morphisms µ: R ⊗k R →R and
η: k →R so that the following diagrams commute:
R ⊗k R ⊗k R
µ⊗k1R

1R⊗kµ / R ⊗k R
µ

R
η⊗k1R /
1R
"
R ⊗k R
µ

R
1R⊗kη
o
1R
|
R ⊗k R
µ
/ R
R
There are evident formal similarities in each of these four deﬁnitions; they are all
special cases of a general notion of a monoid in a monoidal category, as deﬁned in §E.2.
41A not-necessarily unital ring may be deﬁned by ignoring the morphism η and the pair of commutative
triangles.

38
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
The morphisms η: 1 →M in the case of topological monoids, η: Z →R in the case of
unital rings, and η: k →R in the case of k-algebras do no more and no less than specify
an element of M or R to serve as the multiplicative unit. We will introduce language to
describe the role played in each case by the topological space 1, the abelian group Z, and
the vector space k in Example 2.1.5(iii).
In the case of a topological monoid, the condition that µ: M×M →M is a morphism in
Top demands that the multiplication function is continuous; for instance, the circle S 1 ⊂C
deﬁnes a topological monoid with addition of angles.
For unital rings, the morphism
µ: R ⊗Z R →R represents a bilinear homomorphism of abelian groups from R × R to R; in
particular, multiplication distributes over addition in R. The role of the tensor product in
the deﬁnition of a k-algebra is similar.
Let us now give precise meaning to the term “diagram.”
Definition 1.6.4. A diagram in a category C is a functor F : J →C whose domain, the
indexing category, is a small category.
A diagram is typically depicted by drawing the objects and morphisms in its image,
with the domain category left implicit, particularly in the case where the indexing category
J is a preorder, so that any two paths of composable arrows have a common composite.
Nonetheless, the indexing category J plays an important role. Functoriality requires that
any composition relations that hold in J must hold in the image of the diagram, which is
what it means to say that the directed graph deﬁned by the image of the diagram in C is
commutative. An immediate consequence of the form of our deﬁnition of a commutative
diagram is the following result.
Lemma 1.6.5. Functors preserve commutative diagrams.
Proof. A diagram in C is given by a functor F : J →C, whose domain is a small
category. Given any functor G: C →D, the composite GF : J →D deﬁnes the image of
the diagram in D.
□
A few examples will help to illustrate the connection between commutative diagrams,
as formalized in Deﬁnition 1.6.4, and their informal directed graph presentations.
Example 1.6.6. Consider 2 × 2, the category with four objects and the displayed non-
identity morphisms
•

/

•

•
/ •
In 2×2, the diagonal morphism is the composite of both the top and right morphisms and the
left and bottom morphisms; in particular, these composites are equal. A diagram indexed
by 2 × 2, typically drawn without the diagonal composite, is a commutative square.
Remark 1.6.7. In practice, one thinks of the indexing category as a directed graph, deﬁning
the shape of the diagram, together with speciﬁed commutativity relations. For example,
to deﬁne a functor with domain 2 × 2, it suﬃces to specify the images of the four objects
together with four morphisms
a
f
/
g

b
h

c
k
/ d

1.6. THE ART OF THE DIAGRAM CHASE
39
subject to the relation that hf = kg. When indexing categories are represented in this way,
the commutativity relations become an essential part of the data. They distinguish between
the category 2 × 2 that indexes a commutative square and the category
•

/

•

•
/ •
that indexes a not-necessarily commutative square; here the two diagonals represent distinct
composites of the two paths along the edges of the square.
Example 1.6.8. The category 4 has four objects and the six displayed non-identity mor-
phisms
•


•
?

/ •
•
?
This category is a preorder; each of the four displayed triangular “faces” commutes. These
commutativity relations in 4 imply that a diagram of shape 4 in a category C is given by a
sequence of three composable morphisms together with their composites
•
g

hg

•
f
?
g f

hg f
/ •
•
h
?
Associativity of composition implies that the bottom and back faces commute in C. Exam-
ple 4.1.13 introduces terminology to explain why a diagram of shape 4 is determined by
a sequence of three composable morphisms: the category 4 is free on the directed graph
• →• →• →•.
Example 1.6.9. Consider 2×3, the category with six objects and the displayed non-identity
morphisms
•

/

'
*
•

/

•

•
/
4
•
/ •
The long diagonal asserts that the outer triples of composable morphisms have a common
composite, i.e., that the outer rectangle commutes. The short diagonals assert, respectively,
that the left-hand and right-hand squares commute. The inner parallelogram also commutes.
A diagram indexed by 2×3, typically drawn without any of the diagonals, is a commutative
rectangle.

40
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
Two commutative squares deﬁne a commutative rectangle: a collection of morphisms
with the indicated sources and targets
(1.6.10)
a
f
/
g

b
j
/
h

c
ℓ

a′
k
/ b′
m
/ c′
deﬁne a 2 × 3-shaped diagram provided that hf = kg and ℓj = mh. This is a special case
of the following more general result, which describes the induced relations in the “algebra
of composition” encoded by the arrows in a category.
Lemma 1.6.11. Suppose f1, . . . , fn is a composable sequence—a “path”—of morphisms
in a category. If the composite fk fk−1 · · · fi+1 fi equals gm · · · g1, for another composable
sequence of morphisms g1, . . . , gm, then fn · · · f1 = fn · · · fk+1gm · · · g1 fi−1 · · · f1.
Proof. Composition is well-deﬁned: if the composites gm · · · g1 and fk fk−1 · · · fi+1 fi
deﬁne the same arrow, then the results of pre- or post-composing with other sequences of
arrows must also be the same.
□
This very simple result underlies most proofs by “diagram chasing.” When a diagram
is depicted by a simple (meaning there is at most one edge between any two vertices)
acyclic directed graph, the most common convention is to include commutativity relations
that assert that any two paths in the diagram with a common source and target commute,
i.e., that the directed graph represents a poset category. For example, the category 2×2×2
indexes the commutative cube, which is typically depicted as follows:
•
/


•


•
/

•

•

/ •

•
/ •
In such cases, Lemma 1.6.11 and transitivity of equality implies that commutativity of
the entire diagram may be checked by establishing commutativity of each minimal subdi-
agram in the directed graph. Here, a minimal subdiagram corresponds to a composition
relation hn · · · h1 = km · · · k1 that cannot be factored into a relation between shorter paths
of composable morphisms. The graph corresponding to a minimal relation is a “directed
polygon”
•
h2 / •
•
hn−1/ •
hn

•
h1
?
k1

•
• k2
/ •
• km−1
/ •
km
?
with a commutative triangle, as in (1.6.1), being the simplest case. This sort of argu-
ment is called “equational reasoning” in [Sim11a, 2.1], which provides an excellent short
introduction to diagram chasing.
The following results have simple proofs by diagram chasing.

1.6. THE ART OF THE DIAGRAM CHASE
41
Lemma 1.6.12. If the triangle displayed on the left commutes
•
h
&
f

•
h
&
•
•
•
g
8
•
f −1
O
g
8
and if f is an isomorphism, then the triangle displayed on the right also commutes.
Dually, for any triple of morphisms with domains and codomains as displayed with k
an isomorphism
•
k

•
•
j
8
ℓ
&
•
j
8
ℓ
&
•
•
k−1
O
the left-hand triangle commutes if and only if the right-hand triangle commutes.
Proof. Pre-compose the composition relation h = gf with f −1 to yield hf −1 = g.
□
Lemma 1.6.13. For any commutative square βα = δγ in which each of the morphisms is
an isomorphism, then the inverses deﬁne a commutative square α−1β−1 = γ−1δ−1.
Proof. Apply Lemma 1.6.12 four times.
□
In certain special cases, commutativity of diagrams can be automatic. For instance, any
parallel sequences of composable morphisms in a preorder must have a common composite
precisely because any hom-set in a preorder has at most one element. Parallel sequences
of composable morphisms also necessarily have a common composite when the domain or
codomain objects have a certain special property:
Definition 1.6.14. An object i ∈C is initial if for every c ∈C there is a unique morphism
i →c. Dually, an object t ∈C is terminal if for every c ∈C there is a unique morphism
c →t.
Example 1.6.15. Many of the categories of our acquaintance have initial and terminal
objects.
(i) The empty set is an initial object in Set and any singleton set is terminal.
(ii) In Top, the empty and singleton spaces are, respectively, initial and terminal.
(iii) In Set∗, any singleton set is both initial and terminal.
(iv) In ModR, the zero module is both initial and terminal. Similarly, the trivial group is
both initial and terminal in Group.
(v) The zero ring is the terminal ring. To identify an initial object, we must clarify what
sort of rings and ring homomorphisms are being considered. Recall that Ring denotes
the category of unital rings and ring homomorphisms that preserve the multiplicative
identity. This is a non-full subcategory of the larger category Rng of rings that do not
necessarily have a multiplicative identity and homomorphisms that need not preserve
one if it happens to exist. The integers deﬁne an initial object in Ring but not in Rng,
in which the zero ring is initial.
(vi) The category Field of ﬁelds has neither initial nor terminal objects. Indeed, there are
no homomorphisms between ﬁelds of diﬀerent characteristic.
(vii) The empty category deﬁnes an initial object in Cat, and the category 1 is terminal.

42
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
(viii) An initial object in a preorder is a global minimal element, and a terminal object is a
global maximal element. These initial and terminal objects may or may not exist in
each particular instance.
Lemma 1.6.16. Let f1, . . . , fn and g1, . . . , gm be composable sequences of morphisms so
that the domain of f1 equals the domain of g1 and the codomain of fn equals the codomain
of gm. If this common codomain is a terminal object, or if this common domain is an initial
object, then fn · · · f1 = gm · · · g1.
Proof. The two dual statements are immediate consequences of the uniqueness part
of Deﬁnition 1.6.14.
□
In certain cases, one can prove that a diagram commutes by appealing to “elements”
of the objects. For instance, this is possible in any concrete category.
Definition 1.6.17. A concrete category is a category C equipped with a faithful functor
U : C →Set.
The functor U typically carries an object of C to its “underlying set.” The faithfulness
condition asserts that any parallel pair of morphisms f, g: c ⇒c′ that induce the same
function U f = Ug between the underlying sets must be equal in C. The idea is that the
question of whether a map between the underlying sets of objects in a concrete category is a
map in the category is a condition (e.g., continuity). By contrast, the functor U : C →Set
is not faithful if the maps in C have extra structure that is not visible at the level of the
underlying sets (e.g., homotopy classes of maps [Fre04]).
Example 1.6.18. Each category listed in Example 1.1.3 is concrete, although care must
be taken in the cases of Graph and ChR, whose objects are “multi-sorted” sets. The most
obvious forgetful functors, which send a graph to its set of vertices or its set of edges, are
not faithful. However, the functor V ⊔E : Graph →Set considered in Example 1.3.2(ii)
that sends a graph to the union of its set of vertices and edges is faithful.
Because faithful functors reﬂect identiﬁcations between parallel morphisms:
Lemma 1.6.19. If U : C →D is faithful, then any diagram in C whose image commutes in
D also commutes in C.
Proof. Here a “diagram” in C is a directed graph of morphisms together with a
collection of desired composition relations between composable paths of morphisms. If
f1, . . . , fn and g1, . . . , gm are parallel sequences of composable morphisms in C so that
U fn · · · U f1 = Ugm · · · Ug1
in D, then by faithfulness (and functoriality) of U, fn · · · f1 = gm · · · g1 in C.
□
In particular, to prove that a diagram in a concrete category commutes, it suﬃces to
prove commutativity of the induced diagram of underlying sets. This amounts to showing
that certain composite functions between underlying sets are the same, and this can be
checked by considering the actions of these functions on the elements of their domain.
We close with a word of warning.
Remark 1.6.20 (on cancellability). We have seen that commutativity of a pair of adjacent
squares as in (1.6.10) implies commutativity of the exterior rectangle, but the converse
need not hold, as illustrated by the following diagram in Ab, in which the outer rectangle

1.6. THE ART OF THE DIAGRAM CHASE
43
commutes but neither square does:
Z
1Z
/

Z
1Z

/ 0

0
/ Z
1Z
/ Z
Neither does commutativity of one of the two squares, plus the outer rectangle, imply
commutativity of the other in general. The issue is that a composition relation of the form
ghn · · · h1 f = gkm · · · k1 f
need not imply that hn · · · h1 = km · · · k1 unless f is “right cancellable” and g is “left
cancellable,” i.e., unless f is an epimorphism and g is a monomorphism; see Deﬁnition
1.2.7.
Lemma 1.6.21. Consider morphisms with the indicated sources and targets
a
f
/
g

b
j
/
h

c
ℓ

a′
k
/ b′
m
/ c′
and suppose that the outer rectangle commutes. This data deﬁnes a commutative rectangle
if either:
(i) the left-hand square commutes and m is a monomorphism; or
(ii) the right-hand square commutes and f is an epimorphism.
Proof. The statements are dual. Assuming (i), mkg = ℓjf = mhf by commutativity
of the outer rectangle and right-hand square. Since m is a monomorphism, it follows that
kg = hf and thus that the diagram commutes.
□
Exercises.
Exercise 1.6.i. Show that any map from a terminal object in a category to an initial one is
an isomorphism. An object that is both initial and terminal is called a zero object.
Exercise 1.6.ii. Show that any two terminal objects in a category are connected by a unique
isomorphism.
Exercise 1.6.iii. Show that any faithful functor reﬂects monomorphisms.
That is, if
F : C →D is faithful, prove that if F f is a monomorphism in D, then f is a monomorphism
in C. Argue by duality that faithful functors also reﬂect epimorphisms. Conclude that
in any concrete category, any morphism that deﬁnes an injection of underlying sets is
a monomorphism and any morphism that deﬁnes a surjection of underlying sets is an
epimorphism.
Exercise 1.6.iv. Find an example to show that a faithful functor need not preserve epimor-
phisms. Argue by duality, or by another counterexample, that a faithful functor need not
preserve monomorphisms.
Exercise 1.6.v. More speciﬁcally, ﬁnd a concrete category that contains a monomorphism
whose underlying function is not injective.
Find a concrete category that contains an
epimorphism whose underlying function is not surjective. Exercise 4.5.v explains why the
latter examples may seem less familiar than the former.

44
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
Exercise 1.6.vi. A coalgebra for an endofunctor T : C →C is an object C ∈C equipped
with a map γ: C →TC.
A morphism f : (C, γ) →(C′, γ′) of coalgebras is a map
f : C →C′ so that the square
C
γ

f
/ C′
γ′

TC
T f / TC′
commutes. Prove that if (C, γ) is a terminal coalgebra, that is a terminal object in the
category of coalgebras, then the map γ: C →TC is an isomorphism.
1.7. The 2-category of categories
A number of important facts about natural transformations are proven by diagram
chasing. In this section, we deﬁne “vertical” and “horizontal” composition operations for
natural transformations. The upshot is that categories, functors, and natural transformations
assemble into a 2-dimensional categorical structure called a 2-category, a deﬁnition that is
stated at the conclusion.
In French, a natural transformation is called a morphisme de foncteurs. Indeed, for any
ﬁxed pair of categories C and D, there is a functor category DC whose objects are functors
C →D and whose morphisms are natural transformations. Given a functor F : C →D, its
identity natural transformation 1F : F ⇒F is the natural transformation whose components
(1F)c B 1Fc are identities. The following lemma deﬁnes the composition of morphisms in
DC.
Lemma 1.7.1 (vertical composition). Suppose α: F ⇒G and β: G ⇒H are natural
transformations between parallel functors F,G, H : C →D.
Then there is a natural
transformation β · α: F ⇒H whose components
(β · α)c B βc · αc
are deﬁned to be the composites of the components of α and β.
Proof. Naturality of α and β implies that for any f : c →c′ in the domain category,
each square, and thus also the composite rectangle, commutes:
Fc
F f

αc
/ Gc
G f

βc
/ Hc
H f

Fc′
αc′
/ Gc′
βc′
/ Hc′
□
Corollary 1.7.2. For any pair of categories C and D, the functors from C to D and natural
transformations between them deﬁne a category DC.
Proof. It remains only to verify that the composition operation deﬁned by Lemma
1.7.1 is associative and unital. It suﬃces to verify these properties componentwise, and
they follow immediately from the associativity and unitality of composition in D.
□
Remark 1.7.3 (sizes of functor categories). Care should be taken with size when discussing
functor categories. If C and D are small, then DC is again a small category, but if C and
D are locally small, then DC need not be. This is only guaranteed if D is locally small and
C is small; see Exercise 1.7.i. In summary, the formation of functor categories deﬁnes a

1.7. THE 2-CATEGORY OF CATEGORIES
45
bifunctor Catop × Cat →Cat or Catop × CAT →CAT, but the category of functors between
two non-locally small categories may be even larger than these categories are.
The composition operation deﬁned in Lemma 1.7.1 is called vertical composition.
Drawing the parallel functors horizontally, a composable pair of natural transformations in
the category DC ﬁts into a pasting diagram
C
F
⇓α

G
/
H
⇓β
DD
=
C
F

H
D
⇓β · α D
As the terminology suggests, there is also a horizontal composition operation
C
F

G
D
⇓α
D
H

K
D
⇓β
E
=
C
HF

KG
D
⇓β ∗α E
deﬁned by the following lemma.
Lemma 1.7.4 (horizontal composition). Given a pair of natural transformations
C
F

G
C
⇓α
D
H

K
C
⇓β
E
there is a natural transformation β ∗α: HF ⇒KG whose component at c ∈C is deﬁned
as the composite of the following commutative square
(1.7.5)
HFc
Hαc

(β∗α)c
#
βFc / KFc
Kαc

HGc
βGc
/ KGc
Proof. The square (1.7.5) commutes by naturality of β: H ⇒K applied to the mor-
phism αc : Fc →Gc in D. To prove that the components (β ∗α)c : HFc →KGc so-deﬁned
are natural, we must show that KG f · (β ∗α)c = (β ∗α)c′ · HF f for any f : c →c′ in C.
This relation holds on account of the commutative rectangle
HFc
HF f

Hαc / HGc
HG f

βGc
/ KGc
KG f

HFc′
Hαc′ / HGc′
βGc′ / KGc′

46
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
The right-hand square commutes by naturality of β. The left-hand square commutes by
naturality of α and Lemma 1.6.5, which states that functors, in this case the functor H,
preserve commutative diagrams.42
□
Remark 1.7.6. The natural transformations
Hα: HF ⇒HG,
Kα: KF ⇒KG,
βF : HF ⇒KF,
and
βG: HG ⇒KG
appearing in Lemma 1.7.4 are deﬁned by whiskering the natural transformations α and
β with the functors H and K or F and G, respectively.
A precise deﬁnition of this
construction is given in Exercise 1.7.ii. The terminology is on account of the following
graphical depiction of the whiskered composite
LβF : LHF ⇒LKF
C
F
/ D
H

K
E
⇓β
E
L
/ F
of the natural transformation β: H ⇒K with the functors F and L. Exercise 1.7.iii explains
the particular interest in the case where either L or F is an identity.
Importantly, vertical and horizontal composition can be performed in either order,
satisfying the rule of middle four interchange:
Lemma 1.7.7 (middle four interchange). Given functors and natural transformations
C
F
⇓α

G
/
H
⇓β
ED
J
⇓γ

K
/
L
⇓δ
EE
the natural transformation JF ⇒LH deﬁned by ﬁrst composing vertically and then compos-
ing horizontally equals the natural transformation deﬁned by ﬁrst composing horizontally
and then composing vertically:
C
F

⇓β · α
H
ED
J

⇓δ · γ
L
EE
=
C
JF
⇓γ ∗α
"
KG
/
LH
⇓δ ∗β
< E
Proof. Exercise 1.7.iv.
□
Lemmas 1.7.1, 1.7.4, and 1.7.7 prove that categories, functors, and natural transfor-
mations assemble into a 2-category. Aside from this example, we will not meet any other
2-categories in this text. Nonetheless, the following deﬁnition is useful as an axiomatization
of the composition operations for natural transformations that are available. A succinct
introduction to 2-categories and pasting diagrams, which are used to display composite
natural transformations, can be found in [KS74].
Definition 1.7.8. A 2-category is comprised of:
42Naturality of β ∗α could also be deduced from a second commutative rectangle that deﬁnes the component
(β ∗α)c as the top-right composite of (1.7.5). The point is that the squares (1.7.5) and the morphisms obtained by
applying the four functors HF, HG, KF, and KG to a morphism in C deﬁne a commutative cube.

1.7. THE 2-CATEGORY OF CATEGORIES
47
• objects, for example the categories C,
• 1-morphisms between pairs of objects, for example, the functors C
F−→D, and
• 2-morphisms between parallel pairs of 1-morphisms, for example, the natural transfor-
mations C
F
%
G
9
⇓α
D
so that:
• The objects and 1-morphisms form a category, with identities 1C : C →C.
• For each ﬁxed pair of objects C and D, the 1-morphisms F : C →D and 2-morphisms
between such form a category under an operation called vertical composition, as
described in Lemma 1.7.1, with identities C
F
%
F
9
⇓1F D .
• There is also a category whose objects are the objects in which a morphism from C
to D is a 2-cell C
F
%
G
9
⇓α
D under an operation called horizontal composition, with
identities C
1C %
1C
9
⇓11C C . The source and target 1-morphisms of a horizontal composition
must have the form described in Lemma 1.7.4.
• The law of middle four interchange described in Lemma 1.7.7 holds.
The reader who has taken the categorical philosophy to heart might ask: What is a
morphism between 2-categories? 2-functors will make an appearance in §4.4.
Exercises.
Exercise 1.7.i. Prove that if C is small and D is locally small, then DC is locally small by
deﬁning a monomorphism from the collection of natural transformations between a ﬁxed
pair of functors F,G: C ⇒D into a set. (Hint: Think about the function that sends a
natural transformation to its collection of components.)
Exercise 1.7.ii. Given a natural transformation β: H ⇒K and functors F and L as
displayed in
C
F
/ D
H

K
E
⇓β
E
L
/ F
deﬁne a natural transformation LβF : LHF ⇒LKF by (LβF)c = LβFc.
This is the
whiskered composite of β with L and F. Prove that LβF is natural.
Exercise 1.7.iii. Redeﬁne the horizontal composition of natural transformations intro-
duced in Lemma 1.7.4 using vertical composition and whiskering.
Exercise 1.7.iv. Prove Lemma 1.7.7.
Exercise 1.7.v. Show that for any category C, the collection of natural endomorphisms of
the identity functor 1C deﬁnes a commutative monoid, called the center of the category.

48
1. CATEGORIES, FUNCTORS, NATURAL TRANSFORMATIONS
The proof of Proposition 1.4.4 demonstrates that the center of Abfg is the multiplicative
monoid (Z, ×, 1).
Exercise 1.7.vi. Suppose the functors and natural isomorphisms
C
F
/ D
G
o
η: 1C  GF
ϵ : FG  1D
D
F′
/ E
G′
o
η′ : 1D  G′F′
ϵ′ : F′G′  1E
deﬁne equivalences of categories C ≃D and D ≃E. Prove (again) that there is a composite
equivalence of categories C ≃E by deﬁning composite natural isomorphisms 1C  GG′F′F
and F′FGG′  1E.
Exercise 1.7.vii. Prove that a bifunctor F : C × D →E determines and is uniquely deter-
mined by:
(i) A functor F(c, −): D →E for each c ∈C.
(ii) A natural transformation F( f, −): F(c, −) ⇒F(c′, −) for each f : c →c′ in C,
deﬁned functorially in C.
In other words, prove that there is a bijection between functors C × D →E and functors
C →ED. By symmetry of the product of categories, these classes of functors are also in
bijection with functors D →EC.

CHAPTER 2
Universal Properties, Representability, and the Yoneda
Lemma
. . . a mathematical object X is best thought of in
the context of a category surrounding it, and is
determined by the network of relations it enjoys
with all the objects of that category. Moreover, to
understand X it might be more germane to deal
directly with the functor representing it.
Barry Mazur, “Thinking about Grothendieck”
[Maz16]
The aim in this chapter is to explain what it means to say that the natural numbers is the
universal discrete dynamical system, that the Sierpinski space is the universal space with
an open subset, or that the complete graph on n-vertices is the universal n-colored graph.
Universal properties expressed in this plain language manner might appear somewhat ad
hoc, but this is a false impression. By the chapter’s end, we will see several equivalent ways
in which the notion of universal property can be made precise. The key input to the theory
developed here is something that is a priori non-obvious: a functor valued in the category
of sets. The category of sets plays a special role because traditional approaches to the
foundations of mathematics are based on set theory, with a wide variety of mathematical
objects deﬁned to be sets with additional structure.
To illustrate, consider the set of vertex colorings of a graph subject to the requirement
that adjacent vertices are assigned distinct colors. There is a contravariant functor from
the category of graphs to the category of sets that takes a graph to the set of n-colorings
of its vertices. To explain the contravariance, note that an n-coloring of a graph G and a
graph homomorphism G′ →G induce an n-coloring of G′ that colors each vertex of G′
to match the color of its image: as graph homomorphisms preserve the incidence relation
on vertices, any two adjacent vertices of G′ are assigned distinct colors. This deﬁnes the
action of the functor n-Color: Graphop →Set on morphisms.1
The graph with the fewest vertices and fewest edges that can be colored with no less
than n colors is the complete graph on n vertices Kn. Indeed, the functor n-Color encodes
a universal property of the graph Kn in the sense that the graph Kn represents the functor
n-Color. Speciﬁcally, this means that there is a natural bijection between the set n-Color(G)
of n-colorings of a graph G and the set of graph homomorphisms G →Kn. In §2.1, we
introduce the notion of a representable functor along with a plethora of examples, intended
to convey the ubiquity of this abstract notion.
1The four color theorem states that if G is a simple planar graph, then the set 4-Color(G) is non-empty.
Functoriality implies that any graph admitting a graph homomorphism to a planar graph also admits a 4-coloring.
For instance, complete bipartite graphs, which are typically non-planar, will admit homomorphisms of this type.
49

50
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
By the Yoneda lemma, which we prove in §2.2, this universal property uniquely
characterizes the graph Kn. The Yoneda lemma also establishes a correspondence between
natural endomorphisms of the functor n-Color—“color permutations”—and symmetries of
the graph Kn and proves that there is no uniform way to convert an m-coloring into an n-
coloring if m > n, this result deduced from the fact that there are no graph homomorphisms
Km →Kn.
The Yoneda lemma is arguably the most important result in category theory, although
it takes some time to explore the depths of the consequences of this simple statement. In
§2.3, we deﬁne the notion of universal element that witnesses a universal property of some
object in a locally small category. The universal element witnessing the universal property
of the complete graph is an n-coloring of Kn, an element of the set n-Color(Kn). In §2.4,
we use the Yoneda lemma to show that the pair comprised of an object characterized by
a universal property and its universal element deﬁnes either an initial or a terminal object
in the category of elements of the functor that it represents. This gives precise meaning
to the term universal: it is a synonym for either “initial” or “terminal,” with context
disambiguating between the two cases. For instance, Kn is the terminal n-colored graph:
the terminal object in the category of n-colored graphs and graph homomorphisms that
preserve the coloring of vertices.
2.1. Representable functors
The further you go in mathematics, especially
pure mathematics, the more universal properties
you will meet.
Tom Leinster, Basic Category Theory [Lei14]
The most basic formulation of a universal property is to say that a particular object
deﬁnes an initial or terminal object in its ambient category. The problem with this paradigm
is that the most familiar categories—for instance, of sets, spaces, groups, modules, and
so on—tend to have uninteresting initial and terminal objects. To express the universal
properties of more complicated objects, one has to cook up a less familiar category. For
example:
Example 2.1.1. A set X with an endomorphism f : X →X and a distinguished element x0
is called a discrete dynamical system. This data allows one to consider the discrete-time
evolution of the initial element x0, a sequence deﬁned by xn+1 B f(xn). The principle of
mathematical recursion asserts that the natural numbers N, the successor function s: N →
N, and the element 0 ∈N deﬁne the universal discrete dynamical system: which is to
say, there is a unique function r: N →X so that r(n) = xn for each n, i.e., so that r(0) = x0
and so that the diagram
(2.1.2)
N
s
/
r

N
r

X
f
/ X
commutes.
In this section, we introduce a vehicle for expressing universal properties that is less-
contrived than spontaneously generating an appropriate category in which the universal

2.1. REPRESENTABLE FUNCTORS
51
object is initial or terminal. The notion that we introduce can be understood as a general-
ization of the universal properties describing initial or terminal objects. In §2.4, we will
show that it is not a true generalization.
To say that an object c ∈C is initial is to say that for all other objects x, the set C(c, x)
is a singleton. Dually, c ∈C is terminal, if and only if for all x ∈C the set C(x, c) is a
singleton. These properties can be expressed more categorically as characterizations of the
co- and contravariant functors C(c, −) and C(−, c) represented by c that were introduced in
Deﬁnition 1.3.11:
C
C(c,−)
/ Set
Cop
C(−,c)
/ Set
x
f

7→
C(c, x)
f∗

x
f

7→
C(x, c)
7→
7→
y
7→
C(c, y)
y
7→
C(y, c)
f ∗
O
Definition 2.1.3 (a representable characterization of initial or terminal objects).
(i) An object c in a category C is initial if and only if the functor C(c, −): C →Set is
naturally isomorphic to the constant functor ∗: C →Set that sends every object to
the singleton set.
(ii) An object c ∈C is terminal if and only if the functor C(−, c): Cop →Set is naturally
isomorphic to the constant functor ∗: Cop →Set that sends every object to the
singleton set.
In terminology we now introduce, Deﬁnition 2.1.3 asserts that C has an initial object if
and only if the constant functor ∗: C →Set is representable, and dually, C has a terminal
object if and only if ∗: Cop →Set is representable.
Definition 2.1.4.
(i) A covariant or contravariant functor F from a locally small category C to Set is
representable if there is an object c ∈C and a natural isomorphism between F and
the functor of appropriate variance2 represented by c, in which case one says that the
functor F is represented by the object c.
(ii) A representation for a covariant functor F is a choice of object c ∈C together with
a speciﬁed natural isomorphism C(c, −)  F, if F is covariant, or C(−, c)  F, if F
is contravariant.
The domain C of a representable functor is required to be locally small so that the
hom-functors C(c, −) and C(−, c) are valued in the category of sets.
As in the special case of Deﬁnition 2.1.3, a representable functor F : C →Set or
F : Cop →Set encodes a universal property of its representing object. Put colloquially,
a universal property of an object X is a description of the covariant functor Hom(X, −) or
of the contravariant functor Hom(−, X) associated to that object. Many examples occur “in
nature.”3
Example 2.1.5. The following covariant functors are representable.
(i) The identity functor 1Set : Set →Set is represented by the singleton set 1. That is,
for any set X, there is a natural isomorphism Set(1, X)  X that deﬁnes a bijection
2Some use the term “corepresentable” for covariant representable functors, reserving “representable” for the
contravariant case. We argue that this distinction is unnecessary since the variance of the functor F ought to be
evident from its deﬁnition.
3If a friend or oracle is nearby, we suggest ﬁrst encountering the examples listed in 2.1.5 and 2.1.6 as exercises.
Have the friend list the functors that are mentioned and challenge yourself to ﬁnd the representing objects.

52
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
between elements x ∈X and functions x: 1 →X carrying the singleton element to
x. Naturality says that for any f : X →Y, the diagram
Set(1, X)
f∗


/ X
f

Set(1, Y)

/ Y
commutes, i.e., that the composite function 1
x−→X
f−→Y corresponds to the element
f(x) ∈Y, as is evidently the case.
(ii) The forgetful functor U : Group →Set is represented by the group Z. That is, for
any group G, there is a natural isomorphism Group(Z,G)  UG that associates, to
every element g ∈UG, the unique homomorphism Z →G that maps the integer 1 to
g. This deﬁnes a bijection because every homomorphism Z →G is determined by
the image of the generator 1; that is to say, Z is the free group on a single generator.
This bijection is natural because the composite group homomorphism Z
g−→G
φ−→H
carries the integer 1 to φ(g) ∈H.
(iii) For any unital ring R, the forgetful functor U : ModR →Set is represented by the
R-module R. That is, there is a natural bijection between R-module homomorphisms
R →M and elements of the underlying set of M, in which m ∈UM is associated to
the unique R-module homomorphism that carries the multiplicative identity of R to
m; this is to say, R is the free R-module on a single generator. This explains the
appearance of the abelian group Z and the vector space k in Deﬁnition 1.6.3, where
maps with these domains were used to specify elements in the codomains.
(iv) The functor U : Ring →Set is represented by the unital ring Z[x], the polynomial
ring in one variable with integer coeﬃcients. A unital ring homomorphism Z[x] →R
is uniquely determined by the image of x; put another way, Z[x] is the free unital
ring on a single generator.
(v) The functor U(−)n : Group →Set that sends a group G to the set of n-tuples of
elements of G is represented by the free group Fn on n generators. Similarly, the
functor U(−)n : Ab →Set is represented by the free abelian group
L
n Z on n
generators.
(vi) More generally, any group presentation, such as
S 3 B
D
s, t
 s2 = t2 = 1, sts = tst
E
,
deﬁnes a functor Group →Set that carries a group G to the set
n
(g1, g2) ∈G2  g2
1 = g2
2 = e, g1g2g1 = g2g1g2
o
.
The functor is represented by the group admitting the given presentation, in this
case by the symmetric group S 3 on three elements: the presentation tells us that
homomorphisms S 3 →G are classiﬁed by pairs of elements g1, g2 ∈G satisfying
the listed relations.
(vii) The functor (−)× : Ring →Set that sends a unital ring to its set of units is represented
by the ring Z[x, x−1] of Laurent polynomials in one variable.
That is to say, a
ring homomorphism Z[x, x−1] →R may be deﬁned by sending x to any unit of R
and is completely determined by this assignment, and moreover there are no ring
homomorphisms that carry x to a non-unit.

2.1. REPRESENTABLE FUNCTORS
53
(viii) The forgetful functor U : Top →Set is represented by the singleton space: there is a
natural bijection between elements of a topological space and continuous functions
from the one-point space.
(ix) The functor ob: Cat →Set that takes a small category to its set of objects is
represented by the terminal category 1: a functor 1 →C is no more and no less than
a choice of object in C.
(x) The functor mor: Cat →Set that takes a small category to its set of morphisms is
represented by the category 2: a functor 2 →C is no more and no less than a choice
of morphism in C. In this sense, the category 2 is the free or walking arrow.
(xi) The functor iso: Cat →Set that takes a small category to its set of isomorphisms
(pointing in a speciﬁed direction) is represented by the category I, with two objects
and exactly one morphism in each hom-set. In this sense, the category I is the free
or walking isomorphism.
(xii) The functor comp: Cat →Set that takes a small category to the set of composable
pairs of morphisms in it is represented by the category 3. Generalizing, the ordinal
n + 1 = 0 →1 →· · · →n represents the functor that takes a small category to the
set of paths of n composable morphisms in it.
(xiii) The forgetful functor U : Set∗→Set is represented by the two-element based set:
based functions out of this set correspond naturally and bijectively to elements of
the target based set, the element in question being the image of the non-basepoint
element.
(xiv) The functor Path: Top →Set that carries a topological space to its set of paths and
the functor Loop: Top∗→Set that carries a based space to its set of based loops
are each representable by deﬁnition, by the unit interval I and the based circle S 1,
respectively. A path in X is a continuous function I →X while a (based) loop in X
is a based continuous function S 1 →X.
The adjective “free” is reserved for universal properties expressed by covariant repre-
sented functors. It could be applied to any of the objects listed in Example 2.1.5: 2 is the
free category with an arrow, S 1 is the free space containing a loop. The dual term “cofree,”
for universal properties expressed by contravariant represented functors, is less commonly
used.
Example 2.1.6. The following contravariant functors are representable.
(i) The contravariant power set functor P: Setop →Set is represented by the set Ω=
{⊤, ⊥} with two elements. The natural isomorphism Set(A, Ω)  PA is deﬁned by
the bijection that associates a function A →Ωwith the subset that is the preimage of
⊤; reversing perspectives, a subset A′ ⊂A is identiﬁed with its classifying function
χA′ : A →Ω, which sends exactly the elements of A′ to the element ⊤. The naturality
condition stipulates that for any function f : A →B, the diagram
Set(B, Ω)

/
f ∗

PB
f −1

Set(A, Ω)

/ PA
commutes. That is, naturality asserts that given a function χB′ : B →Ωclassifying
the subset B′ ⊂B, the composite function A
f−→B
χB′
−−→Ωclassiﬁes the subset
f −1(B′) ⊂A.

54
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
(ii) The functor O: Topop →Set that sends a space to its set of open subsets is represented
by the Sierpinski space S , the topological space with two points, one closed and
one open. The natural bijection Top(X, S )  O(X) associates a continuous function
X →S to the preimage of the open point.
This bijection is natural because a
composite function Y →X →S classiﬁes the preimage of the open subset of X
under the function Y →X.
(iii) The Sierpinski space also represents the functor C: Topop →Set that sends a space
to its set of closed subsets. Composing the natural isomorphisms O  Top(−, S )  C
we see that the closed set and open set functors are naturally isomorphic.
The
composite natural isomorphism carries an open subset to its complement, which is
closed. This recovers the natural isomorphism described in Example 1.4.3(v).
(iv) The functor Hom(−× A, B): Setop →Set that sends a set X to the set of functions
X × A →B is represented by the set BA of functions from A to B. That is, there is a
natural bijection between functions X × A →B and functions X →BA. This natural
isomorphism is referred to as currying in computer science; by ﬁxing a variable in
a two-variable function, one obtains a family of functions in a single variable.
(v) The functor U(−)∗: Vectop
k →Set that sends a vector space to the set of vectors in
its dual space is represented by the vector space k, i.e., linear maps V →k are, by
deﬁnition, precisely the vectors in the dual space V∗.
(vi) For any ﬁxed abelian group A and any n ≥0, singular cohomology with coeﬃcients
in A deﬁnes a functor Hn(−; A): Topop →Ab. As in Example 1.3.2(iii), this functor
is a homotopy invariant, factoring through the quotient Top →Htpy to deﬁne a
functor Hn(−; A): Htpyop →Ab. Passing to underlying sets and restricting to a
subcategory of “nice” spaces, such as the CW complexes, the resulting functor
Hn(−; A): Htpyop
CW →Set is represented by the Eilenberg–MacLane space K(A, n).
That is, for any CW complex X, homotopy classes of maps X →K(A, n) stand in
bijection with elements of the nth singular cohomology group Hn(X; A) of X with
coeﬃcients in A.
(vii) A classifying space for a topological group G is a CW complex BG that represents
the functor Htpyop
CW →Set that takes a CW complex to the set of isomorphism classes
of principle G-bundles over it.4
Our language asserts that a representation encodes some sort of universal property of
its representing object, but many questions remain:
• How unique are these universal properties? If two objects represent the same functor,
are they isomorphic?
• What data is involved in the construction of a natural isomorphism between a repre-
sentable functor F and the functor represented by an object c?
• How do the universal properties expressed by representable functors relate to initial
and terminal objects—our ﬁrst paradigm for “universality”?
Answers to all of these questions will make use of the Yoneda lemma, to which we now
turn.
Exercises.
4If G is a discrete group, the CW complex BG is built from a collection of combinatorial data that deﬁnes the
nerve of the category BG (see Exercise 6.5.iv), hence our use of this notation for 1-object groupoids.

2.2. THE YONEDA LEMMA
55
Exercise 2.1.i. For each of the three functors
1
0
/
1
/ 2
!
o
between the categories 1 and 2, describe the corresponding natural transformations between
the covariant functors Cat ⇒Set represented by the categories 1 and 2.
Exercise 2.1.ii. Prove that if F : C →Set is representable, then F preserves monomor-
phisms, i.e., sends every monomorphism in C to an injective function. Use the contraposi-
tive to ﬁnd a covariant set-valued functor deﬁned on your favorite concrete category that is
not representable.
Exercise 2.1.iii. Suppose F : C →Set is equivalent to G: D →Set in the sense that there
is an equivalence of categories H : C →D so that GH and F are naturally isomorphic.
(i) If G is representable, then is F representable?
(ii) If F is representable, then is G representable?
Exercise 2.1.iv. A functor F deﬁnes a subfunctor of G if there is a natural transformation
α: F ⇒G whose components are monomorphisms. In the case of G: Cop →Set, a
subfunctor is given by a collection of subsets Fc ⊂Gc so that each G f : Gc →Gc′ restricts
to a function F f : Fc →Fc′. Characterize those subsets that assemble into a subfunctor
of the representable functor C(−, c).
Exercise 2.1.v. The functor of Example 2.1.5(xi) that sends a category to its collection of
isomorphisms is a subfunctor of the functor of Example 2.1.5(x) that sends a category to
its collection of morphisms. Deﬁne a functor between the representing categories I and 2
that induces the corresponding monic natural transformation between these representable
functors.
2.2. The Yoneda lemma
Yoneda enjoyed relating the story of the origins of
this lemma, as follows . . . Yoneda spent a year in
France (apparently in 1954 and 1955). There he
met Saunders Mac Lane. Mac Lane, then visiting
Paris, was anxious to learn from Yoneda, and
commenced an interview with Yoneda in a café at
Gare du Nord. The interview was continued on
Yoneda’s train until its departure. In its course,
Mac Lane learned about the lemma and
subsequently baptized it.
Saunders Mac Lane, “The Yoneda lemma”
[ML98b]
To gain a better understanding of the representations considered in Examples 2.1.5 and
2.1.6 above, it would help to answer the following question: Given a functor F : C →Set,
what data is needed to deﬁne a natural isomorphism C(c, −)  F? More generally, what
data is needed to deﬁne a natural transformation C(c, −) ⇒F?
Before addressing the general question, let us cut our teeth on a few warm-up examples.
Example 2.2.1. Consider diagrams indexed by the ordinal category ω. A functor F : ω →
Set is given by a family of sets (Fn)n∈ω together with functions fn,n+1 : Fn →Fn+1. The
functor ω(k, −): ω →Set represented by the object k ∈ω corresponds to a family whose
ﬁrst k sets, indexed by objects n < k, are empty and whose remaining sets, indexed by

56
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
n ≥k are singletons. The data of a natural transformation α: ω(k, −) ⇒F is given by its
components (αn : ω(k, n) →Fn)n∈ω, which must satisfy a naturality condition. Using the
fact that the sets ω(k, n) are either empty or singletons, this data is displayed by the diagram:
∅
α0

/ ∅
α1

/ · · ·
/ ∅
αk−1

/ ∗
/
αk

∗
αk+1

/ · · ·
/ ∗
αn

/ · · ·
F0
f0,1
/ F1
/ · · ·
/ Fk−1
fk−1,k
/ Fk
fk,k+1
/ Fk+1
/ · · ·
/ Fn
/ · · ·
Evidently, the components αn contain no information for n < k. For n ≥k, the components
determine elements αn ∈Fn (see Example 2.1.5(i)). The naturality condition demands that
αn+1 = fn,n+1(αn). By an inductive argument, the natural transformation α: ω(k, −) ⇒F is
completely and uniquely determined by the choice of the ﬁrst element αk ∈Fk, which is the
image of the identity morphism 1k ∈ω(k, k) under the kth component map αk : ω(k, k) →Fk.
Moreover, any element of Fk may be chosen as this image; naturality places no further
restrictions.
As a second example, we consider diagrams whose indexing categories are groups.
Example 2.2.2. There is a single object in the category BG whose endomorphisms deﬁne
a group G.
Thus, there is a unique covariant represented functor BG →Set and a
unique contravariant represented functor BGop →Set. Example 1.3.9 characterized the
functors from BG to Set; in the covariant case, they correspond to left G-sets, and in
the contravariant case, they correspond to right G-sets. Recalling that the elements of G
deﬁne the set of automorphisms of the unique object in the category BG, we see that the
covariant represented functor is the G-set G, with its action by left multiplication, while the
contravariant represented functor is again G, but with its right action by right multiplication.
Now consider a G-set X : BG →Set.
Example 1.4.3(iv) observed that a natural
transformation φ: G ⇒X is exactly a G-equivariant map φ: G →X. Here φ: G →X is
the unique component of the natural transformation, and equivariance of this map expresses
the naturality condition. To deﬁne φ we must specify elements φ(g) ∈X for each g ∈G.
Equivariance demands that φ(g · h) = g · φ(h). Taking h to be the identity element, we see
that φ(g) = g · φ(e). In other words, the choice of φ(e) ∈X forces us to deﬁne φ(g) to be
g · φ(e). Moreover, any choice of φ(e) ∈X is permitted, because the left action of G on G
is free.5
This argument proves:
Proposition 2.2.3. G-equivariant maps G →X correspond bijectively to elements of X,
identiﬁed as the image of the identity element e ∈G.
For diagrams indexed by the poset ω and by a group BG, Examples 2.2.1 and 2.2.2
reveal that natural transformations whose domain is a represented functor are determined
by the choice of a single element, which lives in the set deﬁned by evaluating the codomain
functor at the representing object, and moreover any choice is permitted. In each case,
this element is the image of the identity morphism at the representing object.6 This is no
5The action of a group G on a set X is free if every stabilizer group is trivial. In the context of the left action of
G on itself, if there were distinct elements k, h so that g = k · e = h · e, we might be forced to make contradictory
deﬁnitions of φ(g).
6Recall, the identity element in a group corresponds to the identity morphism in the one-object category.

2.2. THE YONEDA LEMMA
57
coincidence. Indeed, the same is true for diagrams of any shape by what is arguably the
most important result in category theory: the Yoneda lemma.7
Theorem 2.2.4 (Yoneda lemma). For any functor F : C →Set, whose domain C is locally
small and any object c ∈C, there is a bijection
Hom(C(c, −), F)  Fc
that associates a natural transformation α: C(c, −) ⇒F to the element αc(1c) ∈Fc.
Moreover, this correspondence is natural in both c and F.
As C is locally small but not necessarily small, a priori the collection of natural
transformations Hom(C(c, −), F) might be large. However, the bijection in the Yoneda
lemma proves that this particular collection of natural transformations indeed forms a set.
The statement of the dual form of Theorem 2.2.4, for contravariant functors, is left to
Exercise 2.2.i. We divide the proof into two parts, ﬁrst demonstrating the bijection and then
turning our attention to the naturality statement.
Proof of the bijection. There is clearly a function Φ: Hom(C(c, −), F) →Fc that
maps a natural transformation α: C(c, −) ⇒F to the image of 1c under the component
function αc : C(c, c) →Fc, i.e.,
Φ: Hom(C(c, −), F) →Fc
Φ(α) B αc(1c) .
Our ﬁrst aim is to deﬁne an inverse function Ψ: Fc →Hom(C(c, −), F) that constructs a
natural transformation Ψ(x): C(c, −) ⇒F from any x ∈Fc. To this end, we must deﬁne
components Ψ(x)d : C(c, d) →Fd so that naturality squares, such as displayed for f : c →d
in C, commute:
C(c, c)
f∗

Ψ(x)c / Fc
F f

C(c, d)
Ψ(x)d
/ Fd
The image of the identity element 1c ∈C(c, c) under the left-bottom composite is Ψ(x)d(f) ∈
Fd, the value of the component Ψ(x)d at the element f ∈C(c, d). The image under the
top-right composite is F f(Ψ(x)c(1c)). For Ψ to deﬁne an inverse for Φ, we must deﬁne
Ψ(x)c(1c) = x. Now, naturality forces us to deﬁne
(2.2.5)
Ψ: Fc →Hom(C(c, −), F)
Ψ(x)d( f) B F f(x) .
This condition completely determines the components Ψ(x)d of Ψ(x).
It remains to verify that Ψ(x) is natural. To that end, we must show for a generic
morphism g: d →e in C (one whose domain is not necessarily the distinguished object c),
that the square
C(c, d)
g∗

Ψ(x)d / Fd
Fg

C(c, e)
Ψ(x)e
/ Fe
commutes. The image of f ∈C(c, d) along the left-bottom composite is Ψ(x)e(gf) B
F(gf)(x). The image along the top-right composite is Fg(Ψ(x)d( f)) B Fg(F f(x)). By
7For the oral history of the Yoneda lemma, which ﬁrst appeared in print in a paper of Grothendieck [Gro60],
see [ML98b], quoted at the beginning of this section.

58
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
functoriality of F, F(gf) = Fg · F f, so these elements agree. Thus, the formula (2.2.5)
deﬁnes the function Ψ: Fc →Hom(C(c, −), F).
By construction, ΦΨ(x) = Ψ(x)c(1c) = x, so Ψ is a right inverse to Φ. We wish to show
that ΨΦ(α) = α, i.e., that the natural transformation Ψ(αc(1c)) is α. It suﬃces to show that
these natural transformations have the same components. By deﬁnition,
Ψ(αc(1c))d( f) = F f(αc(1c)) .
By naturality of α, the square
(2.2.6)
C(c, c)
αc
/
f∗

Fc
F f

C(c, d)
αd
/ Fd
commutes, from which we see that F f(αc(1c)) = αd( f). Thus, Ψ(αc(1c))d = αd, proving
that Ψ is also a left inverse to Φ. The explicit bijections Φ and Ψ prove that evaluation of a
natural transformation at the identity of the representing object deﬁnes an isomorphism
Hom(C(c, −), F)
−→Fc ,
as claimed.
□
Proof of naturality. The naturality in the statement of the Yoneda lemma amounts
to the following pair of assertions. Naturality in the functor asserts that, given a natural
transformation β: F ⇒G, the element of Gc representing the composite natural transfor-
mation βα: C(c, −) ⇒F ⇒G is the image under βc : Fc →Gc of the element of Fc
representing α: C(c, −) ⇒F, i.e., the diagram
Hom(C(c, −), F)
β∗

ΦF

/ Fc
βc

Hom(C(c, −),G)
ΦG

/ Gc
commutes in Set.
By deﬁnition, ΦG(β · α) = (β · α)c(1c), which is βc(αc(1c)) by the
deﬁnition of vertical composition of natural transformations given in Lemma 1.7.1, and
this is βc(ΦF(α)).
Naturality in the object asserts that, given a morphism f : c →d in C, the element of
Fd representing the composite natural transformation αf ∗: C(d, −) ⇒C(c, −) ⇒F is the
image under F f : Fc →Fd of the element of Fc representing α, i.e., the diagram
Hom(C(c, −), F)
( f ∗)∗

Φc

/ Fc
F f

Hom(C(d, −), F)
Φd

/ Fd
commutes.
Here, the image of α ∈Hom(C(c, −), F) along the top-right composite is
F f(αc(1c)), and the image along the left-bottom composite is (α· f ∗)d(1d). By the deﬁnition
of vertical composition, the dth component of the composite natural transformation α · f ∗

2.2. THE YONEDA LEMMA
59
is the function
C(d, d)
f ∗
/ C(c, d)
αd
/ Fd
1d
7→
f
7→
αd( f)
As demonstrated by the commutative square (2.2.6), αd( f) = F f(αc(1c)), which proves
that this second naturality square commutes.
□
Remark 2.2.7. Were it not for size issues, we could express Theorem 2.2.4 more concisely
as saying that the maps Φ deﬁne the components of a natural isomorphism between two
functors that we now introduce. The pair c and F in the statement of the Yoneda lemma
deﬁne an object in the product category C × SetC; recall SetC is the category of functors
C →Set and natural transformations between them deﬁned in Corollary 1.7.2. There is a
bifunctor ev: C × SetC →Set that maps (c, F) to the set Fc, i.e., to the set obtained when
evaluating the functor F at the object c. This functor deﬁnes the codomain of the natural
isomorphism Φ.
The deﬁnition of the domain of Φ makes use of a functor
Cop
y
/ SetC
c
7→
f 
7→
C(c, −)
d
7→C(d, −)
f ∗
O
This is the functor obtained by applying Exercise 1.7.vii to the bifunctor introduced in
Deﬁnition 1.3.13. Using Exercise 1.3.v to regard y as a functor C →(SetC)op, the domain
of Φ is deﬁned to be the composite
Hom(y(−), −) B C × SetC y×1SetC / (SetC)op × SetC
Hom
/ SET
(c, F)
7→
(C(c, −), F)
7→
Hom(C(c, −), F)
Here is where the size issues arise. If C is small, then SetC is locally small, and the hom
functor is valued in the category of sets, as in Deﬁnition 1.3.13. However, if C is only
locally small, SetC need not be locally small; see Remark 1.7.3. We write SET to indicate
that the collection of natural transformations between a pair of functors F,G: C ⇒Set
might not be a set.
The composite functor Hom(y(−), −): C × SetC →Set is valued in the usual category
of sets by the proof of the bijection in Theorem 2.2.4 just given. So the Yoneda lemma
asserts that evaluating at the representing object’s identity morphism deﬁnes a natural
isomorphism
C × SetC
Hom(y(−),−)

ev
@
⇓Φ Set
An easy application of the Yoneda lemma completely characterizes natural transfor-
mations between representable functors: any locally small category C is isomorphic to the
full subcategory of SetCop spanned by the contravariant represented functors, and Cop is
isomorphic to the full subcategory of SetC spanned by the covariant represented functors,
via the canonically-deﬁned covariant and contravariant Yoneda embeddings.

60
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
Corollary 2.2.8 (Yoneda embedding). The functors
C  
y
/ SetCop
Cop  
y
/ SetC
c
f 
7→
C(−, c)
f∗

c
f 
7→
C(c, −)
7→
7→
d
7→
C(−, d)
d
7→
C(d, −)
f ∗
O
deﬁne full and faithful embeddings.
Via Exercise 1.7.vii, the co- and contravariant Yoneda embeddings are really just two
diﬀerent incarnations of a common bifunctor
C(−, −): Cop × C →Set
deﬁned for any locally small category C, namely the two-sided represented functor in-
troduced in Deﬁnition 1.3.13.
The natural transformations f∗: C(−, c) ⇒C(−, d) and
f ∗: C(d, −) ⇒C(c, −) are deﬁned in Example 1.4.7, by post- and pre-composition with the
morphism f, respectively.
Proof. By Deﬁnition 1.5.7, the functors y: C ,→SetCop and y: Cop ,→SetC are fully
faithful if they deﬁne local bijections between hom-sets
C(c, d)
−→Hom(C(−, c), C(−, d))
C(c, d)
−→Hom(C(d, −), C(c, −)) .
From the construction of the functors y, it is easy to see that these maps are injections:
distinct morphisms c ⇒d induce distinct natural transformations (see Exercise 1.4.iv).
The Yoneda lemma implies that every natural transformation between represented functors
arises in this way. By Theorem 2.2.4, natural transformations
α: C(d, −) ⇒C(c, −)
correspond to elements of C(c, d), i.e., to morphisms f : c →d in C, where the element f
is αd(1d). The natural transformation f ∗: C(d, −) ⇒C(c, −) deﬁned by pre-composition
by f sends 1d to f. Thus, the bijection implies that α = f ∗.
□
Corollary 2.2.8, that natural transformations between represented functors correspond
to morphisms between the representing objects, is an extraordinarily powerful result, as we
shall gradually discover. Common convention refers to both Theorem 2.2.4 and Corollary
2.2.8 as “the Yoneda lemma.”
We close this section with two non-categorical applications of the fullness of the
Yoneda embedding. A third even more paradigmatic application appears as Proposition
2.3.9.
Corollary 2.2.9. Every row operation on matrices with n rows is deﬁned by left multipli-
cation by some n × n matrix, namely the matrix obtained by performing the row operation
on the identity matrix.
Proof. Recall MatR is the category whose objects are positive integers and in which a
morphism m →n is an n×m matrix, with n rows and m columns, whose entries are elements
of the unital ring R. The elements in the image of the represented functor Hom(−, n) are
matrices with n rows.
The row operations of elementary linear algebra—for instance,
replacing the ith row with the sum of the ith and jth row—deﬁne natural endomorphisms of
Hom(−, n); naturality here follows from linearity of (right) matrix multiplication. Thus, by
Corollary 2.2.8, every row operation must be deﬁnable by left multiplication by a suitable

2.2. THE YONEDA LEMMA
61
n × n matrix. Moreover, Theorem 2.2.4 allows us to identify this matrix: it is obtained by
applying the row operation in question to the n × n identity matrix.
□
Another corollary of the Yoneda lemma is a classical result known as Cayley’s the-
orem, stating that any abstract group may be realized as a subgroup of a permutation
group.
Corollary 2.2.10. Any group is isomorphic to a subgroup of a permutation group.
Proof. Regarding a group G as a one-object category BG, Example 2.2.2 identiﬁes the
image of the covariant Yoneda embedding BG ,→SetBGop as the rightG-setG, withG acting
by right multiplication. Corollary 2.2.8 tells us that the only G-equivariant endomorphisms
of the right G-set G are those maps deﬁned by left multiplication with a ﬁxed element of
G. In particular, any G-equivariant endomorphism of G must be an automorphism, a fact
that is not otherwise obvious.
In this way, the Yoneda embedding deﬁnes an isomorphism between G and the auto-
morphism group of the right G-set G, an object in SetBGop. Composing with the faithful
forgetful functor SetBGop →Set, we obtain an isomorphism between G and a subgroup of
the automorphism group Sym(G) of the set G.
□
Exercises.
Exercise 2.2.i. State and prove the dual to Theorem 2.2.4, characterizing natural transfor-
mations C(−, c) ⇒F for a contravariant functor F : Cop →Set.
Exercise 2.2.ii. Explain why the Yoneda lemma does not dualize to classify natural trans-
formations from an arbitrary set-valued functor to a represented functor.
Exercise 2.2.iii. As discussed in Section 2.2, diagrams of shape ω are determined by
a countably inﬁnite family of objects and a countable inﬁnite sequence of morphisms.
Describe the Yoneda embedding y: ω ,→Setωop in this manner (as a family of ωop-indexed
functors and natural transformations). Prove directly, without appealing to the Yoneda
lemma, that y is full and faithful.
Exercise 2.2.iv. Prove the following strengthening of Lemma 1.2.3, demonstrating the
equivalence between an isomorphism in a category and a representable isomorphism
between the corresponding co- or contravariant represented functors: the following are
equivalent:
(i) f : x →y is an isomorphism in C.
(ii) f∗: C(−, x) ⇒C(−, y) is a natural isomorphism.
(iii) f ∗: C(y, −) ⇒C(x, −) is a natural isomorphism.
Exercise 2.2.v. By the Yoneda lemma, natural endomorphisms of the contravariant power
set functor P: Setop →Set correspond bijectively to endomorphisms of its representing
object Ω= {⊥, ⊤}. Describe the natural endomorphisms of P that correspond to each of
the four elements of Hom(Ω, Ω). Do these functions induce natural endomorphisms of the
covariant power set functor?
Exercise 2.2.vi. Do there exist any non-identity natural endomorphisms of the category
of spaces? That is, does there exist any family of continuous maps X →X, deﬁned for all
spaces X and not all of which are identities, that are natural in all maps in the category Top?
Exercise 2.2.vii. Use the Yoneda lemma to explain the connection between homeomor-
phisms of the standard unit interval I = [0, 1] ⊂R and natural automorphisms of the path
functor Path: Top →Set of Example 2.1.5(xiv), which we call re-parameterizations.

62
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
2.3. Universal properties and universal elements
The Yoneda lemma enables us to answer the questions posed at the end of §2.1. In
this section, we study the data associated to a representation and prove that a representable
functor deﬁnes its representing object.
In a locally small category C, any pair of isomorphic objects x  y are representably
isomorphic, meaning that C(−, x)  C(−, y) and C(x, −)  C(y, −). This is an immediate
consequence of the functoriality of the Yoneda embeddings C ,→SetCop and Cop ,→SetC;
see Exercise 2.2.iv. The Yoneda lemma supplies the converse:
Proposition 2.3.1. Consider a pair of objects x and y in a locally small category C.
(i) If either the co- or contravariant functors represented by x and y are naturally
isomorphic, then x and y are isomorphic.
(ii) In particular, if x and y represent the same functor, then x and y are isomorphic.
Proof. The full and faithful Yoneda embeddings C ,→SetCop and Cop ,→SetC create
isomorphisms (see Exercise 1.5.iv). So an isomorphism between represented functors is
induced by a unique isomorphism between their representing objects, which in particular
must be isomorphic, proving (i). Now (ii) is an immediate consequence: given a functor
represented by both x and y, the representing natural isomorphisms compose to demonstrate
that x and y are representably isomorphic.
□
There may be many isomorphisms between the objects x and y appearing in the proof
of Proposition 2.3.1, but there is a unique natural isomorphism commuting with the chosen
representations. On account of this, one typically refers to the representing object of a
representable functor. Category theorists often use the deﬁnite article “the” in contexts
where the object in question is well-deﬁned up to canonical isomorphism. For instance:
Corollary 2.3.2. The full subcategory of C spanned by its terminal objects is either empty
or is a contractible groupoid. In particular, any two terminal objects in C are uniquely
isomorphic.8
A contractible groupoid is a category that is equivalent to the terminal category 1.
Explicitly, a contractible groupoid is a category with a unique morphism in each hom-set.
Proof. By Theorem 2.2.4, natural transformations C(−, t) ⇒C(−, t′) between the
functors represented by a pair of terminal objects t, t′ ∈C stand in bijection with elements
of the singleton set C(t, t′). So there can be at most one morphism between any pair of
terminal objects. Proposition 2.3.1 implies that this morphism is an isomorphism: the
objects t and t′ are terminal if and only if they represent the functor ∗: Cop →Set that is
constant at the singleton set.
□
The Yoneda lemma also provides a more explicit characterization of the data encoded
by a representation.
Definition 2.3.3. A universal property of an object c ∈C is expressed by a representable
functor F together with a universal element x ∈Fc that deﬁnes a natural isomorphism
C(c, −)  F or C(−, c)  F, as appropriate, via the Yoneda lemma.
8Corollary 2.3.2 proves that the so-called “universal cover” of a topological space X is not an initial object in the
category of connected covering spaces over X, unless X is simply connected. If it were, the Deck transformation
group, which is isomorphic to the fundamental group π1(X), would necessarily be trivial.

2.3. UNIVERSAL PROPERTIES AND UNIVERSAL ELEMENTS
63
Example 2.3.4. Recall from Example 2.1.5(iv) that the forgetful functor U : Ring →Set is
represented by the ring Z[x]. The universal element, which deﬁnes the natural isomorphism
(2.3.5)
Ring(Z[x], R)  UR,
is the element x ∈Z[x]. As in the proof of the Yoneda lemma, the bijection (2.3.5) is
implemented by evaluating a ring homomorphism φ: Z[x] →R at the element x ∈Z[x] to
obtain an element φ(x) ∈R.
Example 2.3.6. A functor E : BG →Set, i.e., a left G-set E, is representable if and only
if there is an isomorphism G  E of left G-sets. This implies that the action of G on E
is free (every stabilizer group is trivial) and transitive (the orbit of any point is the entire
set), and that E is non-empty. Conversely, any non-empty free and transitive left G-set is
representable; a proof is given in Example 2.4.10. By the Yoneda lemma, the data of a
representation for E, i.e., a speciﬁc isomorphism G  E, is determined by the choice of
an element e ∈E, the universal element, serving as the image of the identity e ∈G. In
other words, a representable left G-set E is a group that has forgotten its identity element.
A representable G-set is called a G-torsor.
For example, a torsor for the group Rn under addition is n-dimensional aﬃne space,
commonly denoted by An (or An
R to emphasize the ground ﬁeld). We think of An as being
the collection of points in n-dimensional real space, but without a chosen origin. Thinking
of points in Rn as vectors, the free and transitive action of Rn on An is easy to describe: a
point in An is transported along the vector in question. This action is free, because every
non-zero vector acts on every point non-trivially, and transitive, because any two points in
aﬃne space can be “subtracted” to deﬁne a unique vector in Rn that carries the one to the
other. A choice of an origin point o in An determines coordinates for all of the other points,
hence an isomorphism Rn  An. The point o ∈An is the universal element: the coordinates
for another point p ∈An are deﬁned to be the unique vector ⃗x ∈Rn so that ⃗x · o = p.
Example 2.3.7. Fix k-vector spaces V and W and consider the functor
Bilin(V, W; −): Vectk →Set
that sends a vector space U to the set of k-bilinear maps V × W →U. A bilinear map
f : V × W →U is a function of two variables so that for all v ∈V, f(v, −): W →U is a
linear map and for all w ∈W, f(−, w): V →U is a linear map. Equivalently, by “currying,”
a bilinear map may be deﬁned to be a linear map V →Hom(W, U) or W →Hom(V, U),
where the codomains are vector spaces of linear maps.
A representation for the functor Bilin(V, W; −) deﬁnes a vector space V ⊗k W, the
tensor product of V and W. That is, the tensor product is deﬁned by an isomorphism
(2.3.8)
Vectk(V ⊗k W, U)  Bilin(V, W; U),
between the set of linear maps V ⊗k W →U and the set of bilinear maps V × W →U that
is natural in U.9
Theorem 2.2.4 tells us that the natural isomorphism (2.3.8) is determined by a universal
element of Bilin(V, W; V ⊗k W), i.e., by a bilinear map ⊗: V × W →V ⊗k W. The tensor
product V ⊗k W is the universal vector space equipped with a bilinear map from V × W.
The Yoneda lemma can be used to unpack what this means. The natural isomorphism
(2.3.8) identiﬁes any bilinear map f : V × W →U with a linear map ¯f : V ⊗k W →U. To
9This isomorphism is also natural in V and W; see Proposition 4.3.6.

64
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
understand this identiﬁcation, consider the naturality square induced by ¯f.
Vectk(V ⊗k W, V ⊗k W)

/
¯f∗

Bilin(V, W; V ⊗k W)
¯f∗

Vectk(V ⊗k W, U)

/ Bilin(V, W; U)
Tracing 1V⊗kW around this commutative square reveals that the bilinear map f factors
uniquely through the bilinear map ⊗along the linear map ¯f.
V × W
f
%
⊗
/ V ⊗k W
¯f
∃!

U
In other words, the bijection (2.3.8) is implemented by composing a linear map V⊗kW →U
with the universal bilinear map ⊗. This universal property tells us that the bilinear map
⊗: V × W →V ⊗k W is initial in a category that will be described in Example 2.4.12(iii).
Moreover, the deﬁning universal property of the tensor product gives a recipe for
its construction as a vector space. Supposing the vector space V ⊗k W exists, consider
its quotient by the vector space spanned by10 the image of the bilinear map −⊗−. By
deﬁnition, the quotient map V ⊗k W →V ⊗k W/⟨v ⊗w⟩restricts along −⊗−to yield the
zero bilinear map. But the zero map V ⊗k W →V ⊗k W/⟨v ⊗w⟩also has this property, so
by the universal property of V ⊗W, these linear maps must agree. Because the quotient
map is surjective, this implies that V ⊗k W is isomorphic to the span of the vectors v ⊗w
for all v ∈V and w ∈W modulo the bilinearity relations satisﬁed by −⊗−, recovering the
usual constructive deﬁnition.
The universal property of the tensor product of a pair of k-vector spaces, more than
simply characterizing the vector space up to isomorphism, allows one to prove useful
properties about it without ever appealing to a speciﬁc basis.
Proposition 2.3.9. For any k-vector spaces V and W, V ⊗k W  W ⊗k V.
Proof. By Proposition 2.3.1, it suﬃces to show that the functors Bilin(V, W; −)
and Bilin(W, V; −) are naturally isomorphic. The natural isomorphism Bilin(V, W; U) 
Bilin(W, V; U) sends a bilinear map f : V × W →U to the bilinear map f ♯: W × V →U
deﬁned by f ♯(w, v) B f(v, w). Composing natural isomorphisms, the represented functors
(2.3.10)
Vectk(V ⊗k W, −)  Bilin(V, W; −)  Bilin(W, V; −)  Vectk(W ⊗k V, −)
are naturally isomorphic. By Proposition 2.3.1, a corollary of the Yoneda lemma, this
natural isomorphism must arise from an isomorphism V ⊗k W  W ⊗k V in Vectk between
the representing objects.
□
Remark 2.3.11. Moreover, the Yoneda lemma provides an explicit isomorphism V ⊗k W 
W ⊗k V. The image of the identity linear transformation under the composite isomorphism
Vectk(V ⊗k W, V ⊗k W)  Bilin(V, W; V ⊗k W)
 Bilin(W, V; V ⊗k W)  Vectk(W ⊗k V, V ⊗k W)
deﬁnes an isomorphism φ: W ⊗k V
−→V ⊗k W so that the natural isomorphism (2.3.10)
is deﬁned by precomposing with φ. In Example 2.3.7, we saw that the identity linear map
10The image of a bilinear map is not itself a sub-vector space, so closing under span is necessary.

2.3. UNIVERSAL PROPERTIES AND UNIVERSAL ELEMENTS
65
is sent under the bijection Vectk(V ⊗k W, V ⊗k W)  Bilin(V, W; V ⊗k W) to the universal
bilinear map ⊗: V × W →V ⊗k W. This in turn is sent to the bilinear map
W × V
(w,v)7→(v,w)
−−−−−−−−→V × W
⊗−→V ⊗k W .
Appealing to the universal property of ⊗: W × V →W ⊗k V, which deﬁnes the natural
isomorphism Bilin(W, V; V ⊗k W)  Vectk(W ⊗k V, V ⊗k W), this composite bilinear map
is sent to the unique linear map φ that makes the diagram
W × V
⊗
/
(w,v)7→(v,w)

W ⊗k V
φ
∃!

V × W
⊗
/ V ⊗k W
commute. This φ is the desired linear isomorphism.
Example 2.3.12. Fixing a group G, there is a functor
Ring
Group(G,(−)×)
−−−−−−−−−−→Set
that sends a unital ring R to the set of group homomorphisms from G to the group of units
R×. This functor expresses the universal property of the group ring11 Z[G]. By the Yoneda
lemma, the natural isomorphism
Ring(Z[G], −)  Group(G, (−)×) ,
is encoded by a group homomorphism G →Z[G]×.
As in the proof of the Yoneda
lemma, there is natural bijection between ring homomorphisms Z[G] →R and group
homomorphisms G →R× constructed as follows: a ring homomorphism Z[G] →R
induces a group homomorphism Z[G]× →R× and thus a group homomorphism G →R×
by precomposing with G →Z[G]×.
Exercises.
Exercise 2.3.i. What are the universal elements for the representations:
(i) deﬁning the category 2 in Example 2.1.5(x)?
(ii) deﬁning the Sierpinski space in Example 2.1.6(ii)?
(iii) deﬁning the Sierpinski space in Example 2.1.6(iii)?
Exercise 2.3.ii. Use the deﬁning universal property of the tensor product to prove that
(i) k ⊗k V  V for any k-vector space V; and
(ii) U ⊗k (V ⊗k W)  (U ⊗k V) ⊗k W for any k-vector spaces U, V, W.
Exercise 2.3.iii. The set BA of functions from a set A to a set B represents the contravariant
functor Set(−× A, B): Setop →Set. The universal element for this representation is a
function
ev: BA × A →B
called the evaluation map. Deﬁne the evaluation map and describe its universal property,
in analogy with the universal bilinear map ⊗of Example 2.3.7.
11There is a more general notion of group ring in which Z is replaced by an arbitrary commutative unital ring
K. The universal property of K[G] can be described analogously by replacing the category Ring with the category
of K-algebras.

66
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
2.4. The category of elements
A universal property for an object c ∈C is expressed either by a contravariant functor
F together with a representation C(−, c)  F or by a covariant functor F together with
a representation C(c, −)  F.
The representations deﬁne a natural characterization of
the maps into (in the contravariant case) or out of (in the covariant case) the object c.
Proposition 2.3.1 implies that a universal property characterizes the object c ∈C up to
isomorphism. More precisely, there is a unique isomorphism between c and any other
object representing F that commutes with the chosen representations.
In such contexts, the phrase “c is the universal object in C with an x” assets that x ∈Fc
is a universal element in the sense of Deﬁnition 2.3.3, i.e., x is the element of Fc that
classiﬁes the natural isomorphism that deﬁnes the representation by the Yoneda lemma. In
this section, we prove that the term “universal” is being used in the precise sense alluded
to at the beginning of this chapter: the universal element is either initial or terminal in an
appropriate category. The category in question, called the category of elements, can be
constructed in a canonical way from the data of the representable functor F. The main result
of this section, Proposition 2.4.8, proves that any universal property can be understood as
deﬁning an initial or terminal object, as variance dictates, completing the promise made in
§2.1.
The category of elements is also used to answer another question inspired by consid-
eration of representable functors: namely, how to determine whether a given set-valued
functor F is representable. And if this is the case, is there a way to identify when an
element x ∈Fc determines a natural isomorphism C(−, c)  F, rather than simply a natural
transformation C(−, c) ⇒F?
Definition 2.4.1. The category of elements
R
F of a covariant functor F : C →Set has
• as objects, pairs (c, x) where c ∈C and x ∈Fc, and
• a morphism (c, x) →(c′, x′) is a morphism f : c →c′ in C so that F f(x) = x′.
The category of elements has an evident forgetful functor Π:
R
F →C.
If F f(x) = x′, then
(c, x)
f
/
7→
Π
(c′, x′)
∈
R
F
Π

c
f
/ c′
∈
C
For a contravariant functor F : Cop →Set, the category of elements
R
F is deﬁned to
be the opposite of the category of elements of F, regarded as covariant functor of Cop. For
both co- and contravariant functors on C, our convention is that the category of elements
should have a canonical forgetful functor
R
F →C. This dictates the direction for the
morphisms in
R
F in both Deﬁnitions 2.4.1 and 2.4.2.
Explicitly:
Definition 2.4.2. The category of elements
R
F of a contravariant functor F : Cop →Set
has
• as objects, pairs (c, x) where c ∈C and x ∈Fc, and
• a morphism (c, x) →(c′, x′) is a morphism f : c →c′ in C so that F f(x′) = x.

2.4. THE CATEGORY OF ELEMENTS
67
The category of elements has an evident forgetful functor Π:
R
F →C.
If F f(x′) = x, then
(c, x)
f
/
7→
Π
(c′, x′)
∈
R
F
Π

c
f
/ c′
∈
C
Example 2.4.3. Recall the functor n-Color: Graphop →Set that carries a graph to the set
of n-colorings of its vertices with the property that no adjacent vertices are assigned the
same color. An object in the category of elements of n-Color is a graph together with a
chosen n-coloring; that is, objects are n-colored graphs. A morphism φ: G →G′ between a
pair of n-colored graphs is a graph homomorphism φ: G →G′ so that the induced function
n-Color(φ): n-Color(G′) →n-Color(G) carries the chosen coloring of G′ to the chosen
coloring of G. In other words, the graph homomorphism φ preserves the chosen colorings,
in the sense that each purple vertex of G is carried to a purple vertex of G′. In summary,
R
n-Color is the category of n-colored graphs and color-preserving graph homomorphisms.
Example 2.4.4. For a concrete category C, the objects in the category of elements for the
forgetful functor U : C →Set are elements x ∈Uc in the underlying set of a speciﬁed
object c ∈C. Morphisms are maps in C whose underlying functions preserve the chosen
elements. Extending previous notation introduced in certain special cases, it would be
reasonable to write C∗for
R
U and refer to the category of elements as the category of based
objects in C.
Example 2.4.5. When C is a discrete category, a functor F : C →Set encodes an indexed
family of sets (Fc)c∈C. The category of elements of F is again a discrete category whose
set of objects is `
c∈C Fc. The canonical projection Π: `
c∈C Fc →C is deﬁned so that the
ﬁber over c ∈C is the set Fc. The set `
c∈C Fc is called the dependent sum of the indexed
family of sets (Fc)c∈C. The related dependent product Q
c∈C Fc is the set of sections of the
functor Π: `
c∈C Fc →C.
Example 2.4.6. Objects in the category of elements of C(c, −) are morphisms f : c →x
in C, i.e., the objects of
R
C(c, −) are morphisms in C with domain c. A morphism from
f : c →x to g: c →y is a morphism h: x →y so that g = hf; we say that h is a morphism
under c:
c
f
 g

x
h
/ y
This category has another name: it is the slice category c/C under the object c ∈C
introduced in Exercise 1.1.iii. The forgetful functor c/C →C sends a morphism f : c →x
to its codomain and a commutative triangle to the leg opposite the object c.
Dually,
R
C(−, c) is the slice category C/c over the object c ∈C. Objects are morphisms
f : x →c with codomain c, and a morphism from f to g: y →c is a morphism h: x →y
so that gh = f; h is a morphism over c:
x
f

h
/ y
g
 c
The forgetful functor C/c →C projects onto the domain.

68
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
Note that C(−, c)  Cop(c, −): Cop →Set.
And indeed c/(Cop), the category of
elements of C(−, c) regarded as a covariant functor of Cop, is isomorphic to (C/c)op, the
opposite of the category of elements of the contravariant functor C(−, c); see Exercise 1.2.i.
The Yoneda lemma supplies an alternative deﬁnition of the category of elements of F.
In the contravariant case, objects (c, x) ∈
R
F are in bijection with natural transformations
Ψ(x): C(−, c) ⇒F whose domain is a represented functor and whose codomain is F. A
morphism from Ψ(x) to a second element Ψ(x′): C(−, c′) ⇒F is a natural transformation
C(−, c) ⇒C(−, c′)—i.e., by Corollary 2.2.8, is a morphism f : c →c′—so that the triangle
of natural transformations
C(−, c)
Ψ(x) +3
f∗

F
↭
x ∈Fc
C(−, c′)
Ψ(x′)
8@
x′ ∈Fc′
F f
7→
O
commutes. This proves that the category of elements can be reconstructed as a comma
category, as deﬁned in Exercise 1.3.vi.
Lemma 2.4.7. For F : Cop →Set, the category of elements is isomorphic to the comma
category
R
F  y↓F
deﬁned relative to the Yoneda embedding y: C →SetCop and the object F : 1 →SetCop.
Similarly, in the covariant case, the Yoneda lemma deﬁnes a bijection between objects
(c, x) ∈
R
F and natural transformations Ψ(x): C(c, −) ⇒F, and a morphism from Ψ(x)
to Ψ(x′): C(c′, −) ⇒F is a natural transformation C(c′, −) ⇒C(c, −), i.e., a morphism
f : c →c′, so that
C(c, −)
Ψ(x) +3 F
↭
x ∈Fc
F f
7→

C(c′, −)
f ∗
KS
Ψ(x′)
8@
x′ ∈Fc′
commutes.
Importantly, the category of elements can be used to show that all universal properties
can be encoded by saying that certain data, the universal element of Deﬁnition 2.3.3, deﬁnes
an initial or terminal object in an appropriate category, namely the category of elements of
the representable functor.
Proposition 2.4.8 (universal elements are universal elements). A covariant set-valued
functor is representable if and only if its category of elements has an initial object. Dually,
a contravariant set-valued functor is representable if and only if its category of elements
has a terminal object.
It is easy to see that this condition is necessary. A natural isomorphism C(c, −)  F
induces an isomorphism of categories
R
F 
R
C(c, −)  c/C (see Exercise 2.4.vii), and the
latter has an initial object: the identity 1c ∈c/C. Thus, if F is representable, then
R
F has
an initial object. The surprise is that the presence of an initial object in
R
F is suﬃcient
to establish representability of the functor F. The key to the proof, unsurprisingly, is the
Yoneda lemma in the form of Theorem 2.2.4.12
12In fact, now that the statement and proof strategy are known, we invite the reader to ﬁrst try to come up with
the argument on their own.

2.4. THE CATEGORY OF ELEMENTS
69
Proof. Consider a functor F : C →Set and suppose (c, x) ∈
R
F is initial. We will
show that the natural transformation Ψ(x): C(c, −) ⇒F deﬁned by the Yoneda lemma is
a natural isomorphism. For any y ∈Fd, initiality of x ∈Fc says there exists a unique
morphism (c, x) →(d, y), i.e., a unique morphism f : c →d in C so that F f(x) =
y. As y runs through the elements of the set Fd, this says exactly that the component
Ψ(x)d : C(c, d) →Fd is an isomorphism: in the proof of the Yoneda lemma, Ψ(x)d( f)
was deﬁned to be F f(x). Existence of the morphism (c, x) →(d, y) in
R
F asserts that the
function Ψ(x)d is surjective while uniqueness asserts that it is injective.
Reversing this argument, a natural isomorphism α: C(c, −)  F deﬁnes an ob-
ject αc(1c) ∈Fc in the category of elements, which we prove is initial.
The bijec-
tion αd : C(c, d)
−→Fd says that for each object y ∈Fd, there is a unique morphism
f : c →d so that F f(αc(1c)) = y. Thus, for each (d, y) ∈
R
F, there is a unique morphism
f : (c, αc(1c)) →(d, y) in
R
F, which says exactly that (c, αc(1c)) deﬁnes an initial object in
the category of elements.
□
Recall that a representation for a functor F : C →Set consists of an object c ∈C
together with a natural isomorphism C(c, −)  F. Equivalently by Proposition 2.4.8, a
representation for F is an initial object in
R
F. Representations are not strictly unique: if c′
is any object isomorphic to c, then a representation C(c, −)  F induces a representation
C(c′, −)  C(c, −)  F deﬁned by composing with the chosen isomorphism. However,
representations are unique in an appropriate category-theoretic sense.
Proposition 2.4.9. For any functor F : C →Set, the full subcategory of
R
F spanned by
its representations is either empty or a contractible groupoid.
Proof. If F is not representable, then it has no representations and this subcategory
is empty. Otherwise, Proposition 2.4.8 implies that any representation deﬁnes an initial
object in
R
F. By Corollary 2.3.2, the subcategory spanned by the initial objects is either
empty or is a contractible groupoid: there exists a unique (iso)morphism between any two
initial objects.
□
Example 2.4.10. The category of elements of a G-set X : BG →Set is the translation
groupoid TGX introduced in Example 1.5.18: its objects are elements x ∈X and its
morphisms g: x →y are elements g ∈G so that g · x = y. By Example 2.3.6, if X is
representable, then any element of X may be chosen as a universal element. By Proposition
2.4.9, it follows that X is representable if and only if
R
X  TGX is a contractible groupoid.
Assuming X is non-empty, this groupoid is contractible if and only if for each pair of
elements x, y ∈X, there is a unique g ∈G so that g · x = y. Existence tells us that the action
of G on X is transitive. Uniqueness, in the case x = y, tells us that it is free. This proves
the claim made in Example 2.3.6 that any free and transitive left G-set is representable.
Trivially, any category E arises as a category of elements, namely for the constant
functor ∗: E →Set valued at the singleton set, a representation for which deﬁnes an initial
object in E. More interesting is when E arises as the category of elements for a functor
indexed by a diﬀerent category C, related by a forgetful functor E →C.13 For instance:
Example 2.4.11. The category of discrete dynamical systems, introduced in Example 2.1.1,
is the category of elements for the functor U : End →Set whose domain is the category
of sets equipped with an endomorphism and whose maps are functions so that the diagram
13An elementary characterization of the functors E →C arising as categories of elements for some C →Set
is suggested by Exercise 2.4.viii.

70
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
analogous to (2.1.2) commutes. This functor is represented by the object (N, s: N →N)
and the representation is given by the universal element 0 ∈N = U(N, s). Proposition 2.4.8
then implies the universal property observed in Example 2.1.1: that (N, s: N →N, 0 ∈N)
is the universal discrete dynamical system.
Example 2.4.12.
(i) The objects in the category of elements of the contravariant power set functor are
pairs A′ ⊂A, a set with a chosen subset. A morphism f : (A′ ⊂A) →(B′ ⊂B)
is a function f : A →B so that f −1(B′) = A′. The terminal object, corresponding
to the representation described in Example 2.1.6(i), is the set ΩB {⊤, ⊥} of two
elements with the distinguished singleton subset {⊤} ⊂Ω. This is the universal set
equipped with a subset.14 For any A′ ⊂A, there is a unique function h: A →Ωso
that h−1(⊤) = A′. Note that even if we begin with a skeletal category of sets, {⊤} ⊂Ω
is not the unique terminal object in the category of elements. It is isomorphic to
{⊥} ⊂Ω.
(ii) An object in the category of elements of the forgetful functor U : Vectk →Set is
a vector v in some k-vector space V. A morphism (V, v) →(W, w) is a linear map
T : V →W that carries v to w. The vector space k, which represents U, together
with its universal element 1 ∈k, deﬁnes an initial object in the category of elements
but it is not the only one. Any non-zero scalar c ∈k deﬁnes a linear isomorphism
c · −: k →k. Thus, the pairs (k, c) are also initial in the category of elements. More
generally, any 1-dimensional vector space V and non-zero vector v deﬁne an initial
object. Fixing such a pair (V, v), linear maps V →W are in bijection with vectors
w ∈W, taken to be the image of v.
(iii) Objects in the category of elements of Bilin(V, W; −) are bilinear maps f : V×W →U,
with target some k-vector space U. Morphisms are linear maps T : U →U′ so that
the diagram of functions
V × W
f
/
f ′
#
U
T

U′
commutes, i.e., so that the bilinear map f ′ is the composite of the bilinear map
f and the linear map T.
The universal property of the universal bilinear map
⊗: V × W →V ⊗k W described in Example 2.3.7 says exactly that ⊗is initial in this
category.
(iv) An object in the category of elements of the functor U(−)n : Group →Set consists
of a group G together with an n-tuple of elements g1, . . . , gn ∈G. A morphism
(g1, . . . , gn ∈G) →(h1, . . . , hn ∈H) is a homomorphism φ: G →H so that φ(gi) =
hi for all i.
The universal group with n elements, denoted by Fn, is the group
with speciﬁed elements x1, . . . , xn ∈Fn with the universal property that for any
g1, . . . , gn ∈G there is a unique group homomorphism φ: Fn →G so that φ(xi) = gi.
The free group on n generators x1, . . . , xn has this property. Every element in Fn is a
product of the xi and their inverses, so a choice of n elements φ(xi) ∈G determines
the entire map φ: Fn →G. Moreover, there are no relations between the xi in Fn so
any choices are permitted.
14In the topos of sets, {⊤} ⊂Ωis called the subobject classiﬁer; see §E.4.

2.4. THE CATEGORY OF ELEMENTS
71
(v) An object in the category of elements of the functor U(−)∗: Vectop
k →Set is a vector
space with a dual vector. That is, an object is simply a linear map f : V →k with
codomain k. A morphism from f : V →k to g: W →k is a linear map T : V →W
so that f = gT. Immediately from this deﬁnition it is clear that the category of
elements of U(−)∗is the slice category Vectk/k. The identity on k is terminal, i.e.,
1: k →k is the universal dual vector.
(vi) An object in the category of elements of U : Ring →Set is a unital ring R with an
element r ∈R. Maps are ring homomorphisms preserving the chosen elements. The
initial object is x ∈Z[x]. In the category of elements, the object x ∈Z[x] has no
non-identity endomorphisms: initial objects never do. But the ring Z[x] has many
endomorphisms in the category of rings: the universal property Ring(Z[x], −)  U
tells us that maps Z[x] →Z[x] are classiﬁed by polynomials with integer coeﬃcients,
i.e., by elements p(x) ∈Z[x]. By Corollary 2.2.8, all natural endomorphisms of
U : Ring →Set must have components R →R deﬁned in this manner: i.e., the
component of any natural endomorphism of rings is a map p(x): R →R deﬁned by
r 7→p(r), where p is an integer polynomial.
Deﬁnitions via universal properties emerge as an important theme in the coming
chapters. To whet the reader’s appetite, let us pose the following puzzle. Fixing two objects
A, B in a locally small category C, deﬁne a functor
C(A, −) × C(B, −): C →Set
that carries an object X to the set C(A, X) × C(B, X) whose elements are pairs of maps
a: A →X and b: B →X in C. What would it mean for this functor to be representable?
Exercises.
Exercise 2.4.i. Given F : C →Set, show that
R
F is isomorphic to the comma category
∗↓F of the singleton set ∗: 1 →Set over the functor F : C →Set.
Exercise 2.4.ii. Characterize the terminal objects of C/c.
Exercise 2.4.iii. Use the principle of duality to convert the proof that a covariant functor
is representable if and only if its category of elements has an initial object into a proof that
a contravariant functor is representable if and only if its category of elements has a terminal
object.
Exercise 2.4.iv. Explain the sense in which the Sierpinski space is the universal topological
space with an open subset.
Exercise 2.4.v. Deﬁne a contravariant functor F : Setop →Set that carries a set to the set
of preorders on it. What is its category of elements? Is F representable?
Exercise 2.4.vi. For a locally small category C, regard the two-sided represented functor
Hom(−, −): Cop × C →Set as a covariant functor of its domain Cop × C. The category of
elements of Hom is called the twisted arrow category. Justify this name by describing its
objects and morphisms.
Exercise 2.4.vii. Prove that the construction of the category of elements deﬁnes the action
on objects of a functor
R
(−): SetC →CAT/C .
Conclude that if F,G: C →Set are naturally isomorphic, then
R
F 
R
G over C.
Exercise 2.4.viii. Prove that for any F : C →Set, the canonical forgetful functor Π:
R
F →
C has the following property: for any morphism f : c →d in the “base category” C and

72
2. UNIVERSAL PROPERTIES, REPRESENTABILITY, AND THE YONEDA LEMMA
any object (c, x) in the ﬁber over c, there is a unique lift of the morphism f to a morphism
in
R
F with domain (c, x) that projects along Π to f. A functor with this property is called
a discrete left ﬁbration.
Exercise 2.4.ix. Formulate the dual deﬁnition of a discrete right ﬁbration satisﬁed by
the canonical functor Π:
R
F →C associated to a contravariant functor F : Cop →Set.
Exercise 2.4.x. Answer the question posed at the end of this section: ﬁxing two objects
A, B in a locally small category C, we deﬁne a functor
C(A, −) × C(B, −): C →Set
that carries an object X to the set C(A, X) × C(B, X) whose elements are pairs of maps
a: A →X and b: B →X in C. What would it mean for this functor to be representable?

CHAPTER 3
Limits and Colimits
Many properties of mathematical constructions
may be represented by universal properties of
diagrams.
Saunders Mac Lane, Categories for the Working
Mathematician [ML98a]
From a very simple topological space, the real line R with its usual metric, one can build
a wide variety of new topological spaces. Taking products of R with itself, one deﬁnes
the Euclidean spaces Rn in ﬁnite or inﬁnite dimensions. The space Rn has interesting
subspaces, deﬁned to be the solutions to certain continuous polynomial functions Rn →R,
including the (n −1)-sphere S n−1, which bounds the closed n-disk Dn. From the sphere S n,
one can deﬁne real projective space RPn as a quotient by identifying each pair of antipodal
points. From spheres and disks one can build tori, the Möbius band, the Klein bottle,
and indeed any cell complex through a sequence of gluing constructions, in which disks
are attached to an existing space along their boundary spheres. In each case, the newly
constructed object is a particular set equipped with a speciﬁc topology. In this chapter, we
will explain how all of these topologies can be deﬁned in a uniform way, via a universal
property that characterizes the newly constructed space either as a limit or a colimit of a
particular diagram in the category of topological spaces.
Limits and colimits can be deﬁned in any category. Special cases include constructions
of the inﬁmum and supremum, free products, cartesian products, direct sums, kernels,
cokernels, ﬁber products, amalgamated free products, inverse limits of sequences, unions,
and even the category of elements, among many others. This chapter begins in §3.1 by
introducing the abstract notions of limits and colimits and the special terminology used
for particular diagram shapes. We then turn our focus to “computational” results, which
describe how more complicated limits and colimits can be built out of simpler ones. To
ground intuition for limits and colimits, these abstract constructions are ﬁrst introduced
in §3.2 in the special case of limits of diagrams valued in the category of sets. Indeed,
as a consequence of the Yoneda lemma, the set-theoretical constructions of limits suﬃce
to prove general formulae for limits and colimits in any category. To understand this, we
consider a variety of possible interactions between functors and limits in §3.3, presenting
functors that preserve, reﬂect, or create limits and colimits. Such functors can be used to
recognize cases in which limits or colimits in one category can be constructed from limits
or colimits in another. This vocabulary is used in §3.4 to describe the representable nature
of limits and colimits and extend the constructions of general limits from simple limits
from Set to any category.
In §3.5, we apply the computational theorems from §3.4 to prove that the categories of
sets, spaces, and categories are each complete and cocomplete, meaning that any diagram
indexed by a small category has both a limit and a colimit.
Most of the “algebraic”
73

74
3. LIMITS AND COLIMITS
categories introduced in Example 1.1.3 are also complete and cocomplete—the category
of ﬁelds being a notable exception—but we defer the proof of these facts to §5.6 where they
can be deduced simultaneously as special cases of a general theorem. In §3.6, we introduce
limit and colimit functors deﬁned on categories of diagrams and use the functoriality of the
limit and the colimit to prove the result that motivated Eilenberg and Mac Lane to introduce
the concept of naturality: that naturally isomorphic diagrams have isomorphic limits.
In §3.7, we explain why few categories admit limits and colimits of diagrams of
unbounded size. In §3.8, we study the interactions between limits and colimits. While
limits commute with limits and colimits commute with colimits, in general, limits and
colimits fail to commute with each other, with a few notable exceptions that depend both
on the indexing shapes and the ambient category in which the diagrams are valued. To
illustrate, we prove the most famous of these: that ﬁnite limits commute with ﬁltered
colimits in the category of sets.
3.1. Limits and colimits as universal cones
Recall that a diagram of shape J in a category C is a functor F : J →C. Our aim
in this section is to introduce the dual notions of limit and colimit of a diagram, which are
deﬁned, respectively, to be the universal cones over and under the diagram. The ﬁrst task
is to explain what is meant by a cone.
Definition 3.1.1. For any object c ∈C and any category J, the constant functor c: J →C
sends every object of J to c and every morphism in J to the identity morphism 1c. The
constant functors deﬁne an embedding ∆: C →CJ that sends an object c to the constant
functor at c and a morphism f : c →c′ to the constant natural transformation, in which
each component is deﬁned to be the morphism f.
Definition 3.1.2. A cone over a diagram F : J →C with summit or apex c ∈C is
a natural transformation λ: c ⇒F whose domain is the constant functor at c.
The
components (λj : c →F j) j∈J of the natural transformation are called the legs of the cone.
Explicitly:
• The data of a cone over F : J →C with summit c is a collection of morphisms
λ j : c →F j, indexed by the objects j ∈J.
• A family of morphisms (λj : c →F j)j∈J deﬁnes a cone over F if and only if, for each
morphism f : j →k in J, the following triangle commutes in C:
(3.1.3)
c
λj
~
λk 
F j
F f
/ Fk
Dually, a cone under F with nadir c is a natural transformation λ: F ⇒c, whose
legs are the components (λ j : F j →c)j∈J. The naturality condition asserts that, for each
morphism f : j →k of J, the triangle
F j
λj
 
F f
/ Fk
λk
~c
commutes in C.
Cones under a diagram are also called cocones—a cone under F : J →C is precisely
a cone over F : Jop →Cop—but we ﬁnd the terminology “under” and “over” to be more
evocative. To illustrate, if F is a diagram indexed by the poset category (Z, ≤), then a cone

3.1. LIMITS AND COLIMITS AS UNIVERSAL CONES
75
over F with summit c is comprised of a family of morphisms (λn : c →Fn)n∈Z so that, for
each n ≤m, the triangle deﬁned by the morphisms λn, λm, and Fn →Fm commutes:
(3.1.4)
c
λ0

λ−1

λ1

λ−2
v
λ2
&
···
)
···
t
· · ·
/ F(−2)
/ F(−1)
/ F0
/ F1
/ F2
/ · · ·
A cone under F with nadir c is comprised of a family of morphisms (λn : Fn →c)n∈Z so
that, for each n ≤m, the triangle deﬁned by the morphisms λn, λm, and Fn →Fm commutes:
· · ·
/
···
*
F(−2)
/
λ−2
(
F(−1)
λ−1

/ F0
λ0

/ F1
λ1

/ F2
λ2
x
/ · · ·
···
uc
The limit of F is most simply described as the universal cone over the diagram F,
while the colimit is the universal cone under F. As discussed in Chapter 2, there are two
equivalent ways to understand this universal property. A limit may be deﬁned to be a
representation for a particular contravariant functor or as a terminal object in its category
of elements; dually, a colimit is a representation for a particular covariant functor and,
equivalently, is an initial object in its category of elements. As is always the case for
representable deﬁnitions, limits and colimits can be contemplated for any diagram valued
in any category, but in any particular case these universal objects may or may not exist.
Definition 3.1.5 (limits and colimits I). For any diagram F : J →C, there is a functor
Cone(−, F): Cop →Set
that sends c ∈C to the set1 of cones over F with summit c; we leave a description of its
action on morphisms as Exercise 3.1.i. A limit of F is a representation for Cone(−, F). By
the Yoneda lemma, a limit consists of an object lim F ∈C together with a universal cone
λ: lim F ⇒F, called the limit cone, deﬁning the natural isomorphism
C(−, lim F)  Cone(−, F) .
Dually, there is a functor
Cone(F, −): C →Set
that sends c to the set of cones under F with nadir c. A colimit of F is a representation for
Cone(F, −). By the Yoneda lemma, a colimit consists of an object colim F ∈C together
with a universal cone λ: F ⇒colim F, called the colimit cone, deﬁning the natural
isomorphism
C(colim F, −)  Cone(F, −) .
Applying Proposition 2.4.8, limits and colimits may also be deﬁned to be terminal and
initial objects, respectively, in the appropriate categories of elements.
Definition 3.1.6 (limits and colimits II). For any diagram F : J →C, a limit is a terminal
object in the category of cones over F, i.e., in the category
R
Cone(−, F). An object in
the category of cones over F is a cone over F, with any summit. In particular, the data
1To guarantee that there is a set of cones with ﬁxed summit over the diagram F, it suﬃces to assume that
J is small and C is locally small, so that CJ is locally small. Until §3.7, all of the limits and colimits under
consideration are indexed by small categories.

76
3. LIMITS AND COLIMITS
of a terminal object in the category of cones consists of a limit object in C together with
a speciﬁed limit cone. A morphism from a cone λ: c ⇒F to a cone µ: d ⇒F is a
morphism f : c →d in C so that for each j ∈J, µ j · f = λj. In other words, a morphism
of cones is a map between the summits so that each leg of the domain cone factors through
the corresponding leg of the codomain cone along this map.
c
f

λ0

λ−1

···
u
λ−2
x
λ1

λ2
$
···
(
d
µ0

µ−1
y
···
r
µ−2
t
µ1
$
µ2
)
···
+
· · ·
/ F(−2)
/ F(−1)
/ F0
/ F1
/ F2
/ · · ·
The forgetful functor
R
Cone(−, F) →C takes a cone to its summit.
Dually, a colimit is an initial object in the category of cones under F, i.e., in the
category
R
Cone(F, −). An object in the category of cones under F is a cone under F, with
any nadir. In particular, the data of an initial object is comprised of the colimit object in
C together with a speciﬁed colimit cone. A morphism from a cone λ: F ⇒c to a cone
µ: F ⇒d is a morphism f : c →d so that for each j ∈J, µj = f · λj. In other words,
a morphism of cones is a map between the nadirs so that each leg of the codomain cone
factors through the corresponding leg of the domain cone along this map. The forgetful
functor
R
Cone(F, −) →C takes a cone to its nadir.
Limits and colimits of a diagram F of shape J might be denoted by limJ F or colimJ F
for emphasis, particularly when multiple diagram shapes are involved. On other occasions,
no special notation is used: to say that a cone is a “limit cone” is to assert that its summit
is a limit, however it is denoted.
On account of the following proposition, it is common to use the deﬁnite article “the”
to refer to a limit or a colimit of a ﬁxed diagram because these objects are well-deﬁned up
to a unique isomorphism:
Proposition 3.1.7 (essential uniqueness of limits and colimits). Given any two limit cones
λ: ℓ⇒F and λ′ : ℓ′ ⇒F over a common diagram F, there is a unique isomorphism ℓ ℓ′
that commutes with the legs of the limit cones.
Note that this result does not prohibit limit objects from having non-trivial automor-
phisms. If λ: ℓ⇒F is a limit cone and σ: ℓ ℓis any automorphism of ℓ, then λσ: ℓ⇒F
is another limit cone. However, Proposition 3.1.7 implies that the only automorphism of ℓ
that commutes with the speciﬁed limit cone λ is the identity.
Proof. The limit cones λ: ℓ⇒F and λ′ : ℓ′ ⇒F each deﬁne terminal objects in
the category of cones over F. By Corollary 2.3.2, the terminal objects in any category
deﬁne a contractible groupoid. This means, in particular, that these objects are uniquely
isomorphic in the category of cones, i.e., that there is a unique isomorphism between ℓand
ℓ′ commuting with the cone legs.
□
Remark 3.1.8 (limit and colimit diagrams). The data of a diagram, together with a limit
cone over it, is called a limit diagram and the data of a diagram, together with a colimit
cone under it, is called a colimit diagram. A J-indexed diagram and a cone over it—such
as displayed in (3.1.4)—combine to deﬁne a diagram indexed by the category J◁, which has
J as a full subcategory together with a freely-adjoined initial object. Dually, a J-indexed
diagram and a cone under it combine to deﬁne a diagram indexed by the category J▷, which

3.1. LIMITS AND COLIMITS AS UNIVERSAL CONES
77
is built from the category J together with a freely-adjoined terminal object. Exercise 3.5.iv
provides a more explicit construction of this category.
There are special names for limit and colimit diagrams of certain shapes.
Definition 3.1.9. A product is a limit of a diagram indexed by a discrete category, with
only identity morphisms. A diagram in C indexed by a discrete category J is simply a
collection of objects F j ∈C indexed by j ∈J. A cone over this diagram is a J-indexed
family of morphisms (λj : c →F j) j∈J, subject to no further constraints.
The limit is
typically denoted by Q
j∈J F j and the legs of the limit cone are maps
πk :
Y
j∈J
F j →Fk

k∈J
called (product) projections. The universal property asserts that composition with the
product projections deﬁnes a natural isomorphism
C(c, Q
j∈J F j)
(πk)∗

/ Q
k∈J C(c, Fk)  Cone(c, F).
Example 3.1.10. The product of a pair of spaces X and Y is a space X × Y equipped with
continuous projection functions
X
X × Y
πX
o
πY
/ Y
satisfying the following universal property: for any other space A with continuous maps
f : A →X and g: A →Y, there is a unique continuous function h: A →X × Y so that the
diagram
A
h
∃!

f
|
g
"
X
X × Y
πX
o
πY
/ Y
commutes.
Taking A to be the point, which represents the underlying set functor U : Top →Set,
the bijection
Top(∗, X × Y)  Top(∗, X) × Top(∗, Y)
tells us that the points of X×Y correspond to points in the cartesian product of the underlying
sets of X and Y.
It remains to deﬁne the topology on the set X×Y. Taking A to be the set X×Y equipped
with various topologies, this universal property forces X ×Y to be deﬁned to be the coarsest
topology on the cartesian product of the underlying sets of X and Y so that the projection
functions πX and πY are continuous.2
Similarly, the product of an arbitrary (possibly inﬁnite) family of spaces (X j)j∈J is
deﬁned by assigning the product of the underlying sets the coarsest topology so that each of
the projection functions πk : Q
j Xj →Xk is continuous. The more intuitive “box topology”
on the set Q
j Xj, whose basic open sets are products of basic opens in each X j, coincides
with the product topology for ﬁnite indexing sets, but fails to satisfy the universal property
of Deﬁnition 3.1.9 when the indexing set J is inﬁnite.
2Coarsest means “having the fewest open and closed sets”; the antonym is ﬁnest, meaning “having the most
open and closed sets.”

78
3. LIMITS AND COLIMITS
Definition 3.1.11. A terminal object is often regarded as a trivial special case of a
product, where the indexing category is empty. A cone over an empty diagram is just an
object in the target category, its summit, together with no additional data. Any morphism
between the summits deﬁnes a map of empty cones. Thus, the category of cones in this
special case is just the ambient category itself and so the limit, a terminal object in this
category, is just a terminal object in the sense of Deﬁnition 1.6.14.
Example 3.1.12. The category 1 with one object and only its identity morphism is the
terminal category, the terminal object in Cat or in CAT.
Definition 3.1.13. An equalizer is a limit of a diagram indexed by the parallel pair, the
category • ⇒• with two objects and two parallel non-identity morphisms. A diagram of
this shape is simply a parallel pair of morphisms f, g: A ⇒B in the target category C.
A cone over this diagram with summit C consists of a pair of morphisms a: C →A and
b: C →B so that fa = b and ga = b; these two equations correspond to the naturality
conditions (3.1.3) imposed by each of the two non-identity morphisms in the indexing
category. Together, they assert that fa = ga; the morphism b is necessarily equal to this
common composite. Thus, a cone over a parallel pair f, g: A ⇒B is represented by a
single morphism a: C →A so that fa = ga.
The equalizer h: E →A is the universal arrow with this property. The limit diagram
E
h
/ A
f
/
g
/ B
is called an equalizer diagram. The universal property asserts that given any a: C →A
so that fa = ga, there exists a unique factorization k: C →E of a through h.
C
a

∃!
k

E
h
/ A
f
/
g
/ B
Example 3.1.14. For instance, the equalizer of a group homomorphism φ: G →H and
the trivial homomorphism e: G →H, sending every element of G to the identity in H, is
the kernel of φ, and the leg of the limit cone is the inclusion ker φ ,→G.
The equalizer of a pair of homomorphisms φ, ψ: G ⇒H is the subgroup of elements
g ∈G so that φ(g) = ψ(g).
If H is abelian, this is the kernel of the homomorphism
φ −ψ: G →H.
The fact that the equalizer deﬁnes a subgroup of G is no coincidence: the map from an
equalizer into the domain of the parallel pair that it equalizes is always a monomorphism;
see Exercise 3.1.vi.
Definition 3.1.15. A pullback is a limit of a diagram indexed by the poset category
• →• ←•
comprised of two non-identity morphisms with common codomain. Writing f and g for
the morphisms deﬁning the image of a diagram of this shape in a category C, a cone with
summit D consists of a triple of morphisms, one for each object in the indexing category,

3.1. LIMITS AND COLIMITS AS UNIVERSAL CONES
79
so that both triangles in the diagram
(3.1.16)
D
b

c
/
a

C
g

B
f
/ A
commute; the two triangles represent the two naturality conditions (3.1.3) imposed by the
non-identity morphisms in the indexing category. The leg a asserts that gc and fb have a
common composite. Thus, the data of a cone over B
f−→A
g←−C may be described more
simply as a pair of morphisms B
b←−D
c−→C deﬁning a commutative square.
The pullback, the universal cone over f and g, is a commutative square fh = gk with
the following universal property: given any commutative square (3.1.16), there is a unique
factorization of its legs through the summit of the pullback cone:
(3.1.17)
D
c
"
b

∃!

P
h

k
/
⌟
C
g

B
f
/ A
The symbol “⌟” indicates that the square gk = fh is a pullback, i.e., a limit diagram, and
not simply a commutative square. The pullback P is also called the ﬁber product and is
frequently denoted by B ×A C. The precise relationship between pullbacks and products is
explored in §3.2 and §3.4.
Particularly when the map f : 1 →A represents an “element” of the object A, such as
when its domain is an object 1 ∈C that represents an “underlying set” functor C →Set,
the pullback P
P
/

⌟
C
g

1
f
/ A
deﬁnes the ﬁber of the map g: C →A over f.
Example 3.1.18. For instance, consider the continuous quotient map ρ: R →S 1 in the
category of spaces that sends a real number t to the point e2πit of S 1, thought of as the unit
circle in the complex plane. The pullback of the diagram
Z

/
⌟
R
ρ

∗
1
/ S 1
is the ﬁber of ρ over the point 1 ∈S 1. This is the discrete subspace Z ⊂R.
The fact that the ﬁber deﬁnes a subspace of the domain of the map being pulled back
is no coincidence: the pullback of a monomorphism B ↣A along any map C →A deﬁnes
a monomorphism B ×A C ↣C; see Exercise 3.1.vii.

80
3. LIMITS AND COLIMITS
Example 3.1.19. For another example of this ﬂavor, recall that maps Z →Z of abelian
groups correspond to elements n ∈Z because Z represents the forgetful functor U : Ab →
Set, i.e., Hom(Z, A)  UA for any abelian group A. Elements of the pullback of
Z
n

Z
m
/ Z
are pairs of integers x and y so that nx = my. From this description, assuming m and n are
not both zero, it follows that the pullback is isomorphic to the abelian group Z and the legs
of the pullback cone
(3.1.20)
Z
a

b
/
⌟
Z
n

Z
m
/ Z
are deﬁned to be the unique3 integers so that ma = nb is the least common multiple of n
and m.
Definition 3.1.21. The limit of a diagram indexed by the category ωop is called an inverse
limit of a tower or a sequence of morphisms. On account of this example, the term “inverse
limit” is sometimes used to refer to limits of any shape. A diagram indexed by ωop consists
of a sequence of objects and morphisms
· · ·
/ F3
/ F2
/ F1
/ F0
together with composites and identities, which are not displayed. A cone over this diagram
is an extension of this data to a diagram of shape (ω + 1)op. Explicitly, a cone consists
of a new object “all the way to the left” together with morphisms making every triangle
commute:
c
···

λ3
 
λ2
(
λ1
*
λ0
+
· · ·
/ F3
/ F2
/ F1
/ F0
The inverse limit, frequently denoted by lim
←−−Fn, is the terminal cone. Similar remarks apply
with any limit ordinal4 α in place of ω.
Example 3.1.22. The p-adic integers are deﬁned to be the inverse limit of the following
diagram of rings:
Zp = lim
←−−Z/pn
/ / · · ·
/ / Z/p4
/ / Z/p3
/ / Z/p2
/ / Z/p
where the maps in the diagram are the canonical quotient maps.
Definition 3.1.23. Deﬁnitions 3.1.9, 3.1.11, 3.1.13, 3.1.15, and 3.1.21 dualize to deﬁne:
3More accurately, the universal property described here only deﬁnes the pair of integers (a, b) up to a compatible
choice of sign; see Exercise 3.1.x.
4Exercise 3.1.ix explains the limited interest of limits of diagrams indexed by opposites of successor ordinals.

3.1. LIMITS AND COLIMITS AS UNIVERSAL CONES
81
• A coproduct `
j∈J A j is the colimit of a diagram (Aj) j∈J indexed by a discrete category
J.
The legs of the colimit cone ιj′ : Aj′ →`
j∈J Aj are referred to as coproduct
injections, though in pathological cases these maps might not be monomorphisms
(see Exercise 3.1.xi).
• An initial object is the colimit of the empty diagram.
• A coequalizer is a colimit of a diagram indexed by the parallel pair category • ⇒•.
The coequalizer of a parallel pair of maps f, g: A ⇒B is the universal map h: B →C
with the property that hf = hg. The colimit cone
A
f
/
g
/ B
h
/ / C
is called a coequalizer diagram. Diagrams of this shape are also called forks.
• A pushout is a colimit of a diagram indexed by the poset category • ←• →•.
Dualizing the convention introduced in Deﬁnition 3.1.15, the symbol “⌜” indicates that
a commutative square
A
f
/
g

⌜
B
k

C
h
/ P
is a pushout, i.e., is a colimit diagram. The pushout is the universal commutative
square under the maps f and g.
• The colimit of a diagram indexed by the ordinal ω is called a sequential colimit or
direct limit. The colimit of a diagram
F0
/ F1
/ F2
/ F3
/ · · ·
frequently denoted by lim
−−→Fn, deﬁnes a diagram of shape ω+1. The term “direct limit”
is sometimes also used to refer to colimits of any shape.
Each of the colimits introduced in Deﬁnition 3.1.23 is indexed by the opposite of the
category used to index the corresponding limit notion. Exercise 3.1.ix explains why the
category ω and the category • ←• →• are used to index colimit diagrams, but not limit
diagrams.
Example 3.1.24. The ﬁgure eight or the wedge of two circles is a space S 1 ∨S 1 that can
be deﬁned to be the pushout of the diagram S 1 ←∗→S 1 of unbased spaces or as the
coproduct of S 1 with itself in the category of based spaces. A further pushout diagram in
Top
S 1
i

aba−1b−1 /
⌜
S 1 ∨S 1

D2
/ T
deﬁnes the torus T  S 1 × S 1. Here i is the inclusion of the circle as the boundary of the
disk and the map aba−1b−1 is the loop in S 1 ∨S 1 that wraps once around one circle, then
once around the other, then again around the ﬁrst but in the reversed orientation, and then
again around the second but in the reversed orientation.

82
3. LIMITS AND COLIMITS
Example 3.1.25. The coequalizer of a group homomorphism φ: G →H paired with the
trivial homomorphism e: G →H deﬁnes the cokernel, the quotient of H by the normal
subgroup generated by the image of φ.
Example 3.1.26. The colimit of a sequence of sets and inclusions
X0 ,→X1 ,→X2 ,→· · ·
can be understood to be their union S
n≥0 Xn. For instance, a CW complex is a colimit of its
n-skeleta, the subspaces built by attaching disks of dimension at most n.
The forms of the universal properties that characterize limits and colimits are quite
useful when one is asked to deﬁne a map into a limit object or out of a colimit object.
Moreover, the uniqueness statements in these universal properties can be used to prove
the commutativity of a diagram whose initial vertex is a colimit object or whose terminal
vertex is a limit object. We illustrate this in the simplest case, for products and coproducts,
but these remarks apply more generally.
Remark 3.1.27 (the universal properties of the product and the coproduct). In any category
C with coproducts, maps f : `
i∈I Ai →X correspond naturally and bijectively to I-indexed
families of maps ( fi : Ai →X)i∈I. The i′-indexed component fi′ of the map f is deﬁned
by restricting along the inclusion ιi′ : Ai′ →`
i∈I Ai that deﬁnes the i′-indexed leg of the
colimit cone.
C(`
i∈I Ai, X)

/ Q
i∈I C(Ai, X)
`
i∈I Ai
f−→X
↭
(Ai
fi−→X)i∈I
Dually, in any category with products, maps g: X →Q
j∈J Bj correspond naturally
and bijectively to J-indexed families of maps (g j : X →Bj) j∈J.
C(X, Q
j∈J Bj)

/ Q
j∈J C(X, Bj)
X
g−→Q
j∈J Bj
↭
(X
gj−→Bj) j∈J
The j′-indexed component gj′ of the map g is deﬁned by composing with the projection
π j′ : Q
j∈J Bj →Bj′ that deﬁnes the j′-indexed leg of the limit cone.
Combining these universal properties, to deﬁne a map from a coproduct to a product,
`
i∈I Ai
f
/ Q
j∈J Bj
π j′

Ai′
ιi′
O
f(i′,j′)
/ Bj′
it suﬃces, for each ordered pair (i′, j′) ∈I × J, to deﬁne a map f(i′,j′) : Ai′ →Bj′. That is,
a single map from a coproduct to a product is determined by a matrix of component maps
indexed by the product of the indexing sets.5
In certain categories, this matrix representation can be pushed further. The categories
Ab, ModR, or ChR have a notion of a zero homomorphism between any pair of objects.
5In the future, we adopt the same notation for the bounded variable that indexes a product or coproduct
and the variable that indexes a generic component so that we can avoid cluttering the text with primes: e.g.,
f : `
i∈I Ai →Q
j∈J Bj is given by component maps f(i,j) = π j · f · ιi : Ai →Bj.

3.1. LIMITS AND COLIMITS AS UNIVERSAL CONES
83
Given any ﬁnite collection of objects Ai, it makes sense then to consider the map
a
i∈I
Ai

1
0
· · ·
0
0
...
...
...
...
...
...
0
0
· · ·
0
1

−−−−−−−−−−−−−−−−−−−→
Y
i∈I
Ai
encoded by the “identity matrix,” and in each of these categories, this map turns out to
be an isomorphism.6
In such contexts, the isomorphic ﬁnite coproducts and products
`
i∈I Ai  Q
i∈I Ai are written as
L
i∈I Ai and referred to as direct sums.
Combining the universal properties of the product and the coproduct, all maps between
ﬁnite direct sums can be represented as matrices of component maps, and, as one might
hope, the composite matrix is deﬁned by “matrix multiplication”:
L
i∈I Ai
(f(i, j)) /
L
j g( j,k) f(i, j)

%
L
j∈J Bj
(g( j,k))

L
k∈K Ck
The examples mentioned above serve to illustrate the pervasiveness of limits and
colimits among interesting mathematical objects, but how does one prove that a particular
diagram has a limit or colimit and construct one if it exists? There are two general strategies.
The ﬁrst is to guess and check. A conjectured limit or colimit cone, such as displayed in
(3.1.20), can often be shown to have the appropriate universal property via an elementary
argument.7
A second strategy is to construct a limit of a more complicated diagram out of limits
of simpler diagrams, whose constructions are easier to understand. In the next section, we
begin to explore this viewpoint in the category of sets.
Exercises.
Exercise 3.1.i. For a ﬁxed diagram F ∈CJ, describe the actions of the cone functors
Cone(−, F): Cop →Set and Cone(F, −): C →Set on morphisms in C.
Exercise 3.1.ii. For a ﬁxed diagram F ∈CJ, show that the cone functor Cone(−, F) is
naturally isomorphic to Hom(∆(−), F), the restriction of the hom functor for the category
CJ along the constant functor embedding deﬁned in 3.1.1.
Exercise 3.1.iii. Prove that the category of cones over F ∈CJ is isomorphic to the comma
category ∆↓F formed from the constant functor ∆: C →CJ and the functor F : 1 →CJ.
Argue by duality that the category of cones under F is the comma category F ↓∆.
Exercise 3.1.iv. Give a second proof of Proposition 3.1.7 by using the universal properties
of each of a pair of limit cones λ: ℓ⇒F and λ′ : ℓ′ ⇒F to directly construct the unique
isomorphism ℓ ℓ′ between their summits.
6The “identity matrix” deﬁnes an isomorphism between the ﬁnite coproduct and the ﬁnite product in any
abelian category; see Deﬁnition E.5.1.
7In the author’s experience, most proofs that a desired universal property is fulﬁlled in a particular category
proceed in this manner, by guess and check. The ﬁrst step is to intuit that a particular construction might deﬁne
the sought-for object; the next is to verify that the universal property holds.

84
3. LIMITS AND COLIMITS
Exercise 3.1.v. Consider a diagram F : J →P valued in a poset (P, ≤). Use order-theoretic
language to characterize the limit and the colimit.
Exercise 3.1.vi. Prove that if
E
h
/ A
f
/
g
/ B
is an equalizer diagram, then h is a monomorphism.
Exercise 3.1.vii. Prove that if
P
h

k
/
⌟
C
g

B /
f
/ A
is a pullback square and f is a monomorphism, then k is a monomorphism.
Exercise 3.1.viii. Consider a commutative rectangle
•

/ •

/
⌟
•

•
/ •
/ •
whose right-hand square is a pullback. Show that the left-hand square is a pullback if and
only if the composite rectangle is a pullback.
Exercise 3.1.ix. Show that if J has an initial object, then the limit of any functor indexed
by J is the value of that functor at an initial object. Apply the dual of this result to describe
the colimit of a diagram indexed by a successor ordinal.
Exercise 3.1.x. If (a, b) are positive integers satisfying the universal property of (3.1.20),
show that the pair (−a, −b) also satisﬁes the same universal property. Explain why this
observation does not imply that the pullback is ill-deﬁned.
Exercise 3.1.xi. Use the universal property of the coproduct to prove that in any category
with at least one morphism between each ordered pair of objects, the legs of a coproduct
cone are split monomorphisms.
Exercise 3.1.xii. Suppose E : I
≃−→J deﬁnes an equivalence between small categories
and consider a diagram F : J →C. Show that the category of J-shaped cones over F is
equivalent to the category of I-shaped cones over FE, and use this equivalence to describe
the relationship between limits of F and limits of FE.
Exercise 3.1.xiii. What is the coproduct in the category of commutative rings?
3.2. Limits in the category of sets
While a limit can be deﬁned for any diagram of any shape valued in any category,
the ability to state the deﬁnition is no guarantee that an object with that universal property
exists. In this section, we restrict consideration to diagrams valued in the category of sets
and give a constructive proof that a limit exists for any set-valued diagram that satisﬁes
an important size constraint. Special cases of this general construction give computations
of products, equalizers, pullbacks, and inverse limits of sequences of sets, the formulae
for which provide intuition for general results that facilitate the computation of limits and
colimits in more exotic categories.

3.2. LIMITS IN THE CATEGORY OF SETS
85
Definition 3.2.1. A diagram is small if its indexing category is a small category.
A
category C is complete if it admits limits of all small diagrams valued in C and is cocomplete
if it admits colimits of all small diagrams valued in C.
A complete category is a category that “has all small limits.” To prove that Set is
complete, consider a small diagram F : J →Set. A limit is a representation
Set(X, lim F)  Cone(X, F)
of the functor that sends a set X to the set of cones over F with summit X. Specializing to
a ﬁxed singleton set 1, which represents the identity functor Set →Set,
(3.2.2)
lim F  Set(1, lim F)  Cone(1, F) .
The idea is to take (3.2.2) as a deﬁnition of the limit of the diagram F:
Definition 3.2.3. For any small diagram F : J →Set, deﬁne
lim F B Cone(1, F)
to be the set of cones over F with summit 1. Deﬁne the legs of the limit cone over F to be
the functions λj : lim F →F j, indexed by the objects j ∈J, that are deﬁned by
(3.2.4)
lim F
λj
/ F j
µ: 1 ⇒F
7→
µ j : 1 →F j
That is, λj is the function that carries a cone µ with summit 1 to its jth leg, regarded as an
element of the set F j.
Remark 3.2.5. The size hypothesis in Deﬁnition 3.2.3 is essential. If J is small, then SetJ
is locally small and, in particular, Cone(1, F), the collection of natural transformations from
the constant diagram at 1 to F, is a set.
To prove that Set has all small limits, it remains to show that the data of Deﬁnition
3.2.3 has the desired universal property. The proof makes repeated use of the fact that
1 represents the identity functor on Set, allowing us to conﬂate elements x ∈X and
morphisms x: 1 →X.
Theorem 3.2.6. The category Set is complete, admitting all small limits.
Proof. Our ﬁrst task is to show that the functions (3.2.4) deﬁne a cone over F,
demonstrating that for each morphism f : j →k in J, the diagram
lim F
λj
{
λk
#
F j
F f
/ Fk
commutes. For any element µ: 1 ⇒F of the set lim F,
F f(λj(µ)) = F f(µj) = µk = λk(µ) ,
where the middle equality holds because µ: 1 ⇒F deﬁnes a cone. This proves that the
functions (λj : lim F →F j)j∈J deﬁne a cone over F.
To prove that λ: lim F ⇒F is the universal cone, consider a cone ζ : X ⇒F with
generic summit. We must show that ζ factors uniquely through λ: lim F ⇒F along a
function r: X →lim F. For each element x ∈X, thought of as a function x: 1 →X,
there is a cone ζx: 1 ⇒F deﬁned by restricting the cone ζ along the map x. Deﬁne

86
3. LIMITS AND COLIMITS
r(x) ∈lim F = Cone(1, F) to be this cone ζx. By the deﬁnition of the legs of the limit cone
λ,
λj(r(x)) = λ j(ζx) = (ζx)j = ζjx ,
so the cone ζ indeed factors along r through the cone λ. This calculation also reveals that
our deﬁnition r(x) = ζx is necessary, proving uniqueness of the factorization and thereby
verifying that lim F indeed deﬁnes a limit of F.
□
We now apply Deﬁnition 3.2.3 to compute the limits of various diagrams of sets.
Example 3.2.7. By Theorem 3.2.6, the product of sets A j indexed by elements of some set
j ∈J is the set of cones over this collection of sets with summit 1. A cone over a J-indexed
discrete diagram of sets with summit 1 is just a J-tuple of elements in the sets. Thus, the
categorical product in Set coincides with the usual cartesian product
Y
j∈J
Aj B {(aj ∈Aj) j∈J} .
Example 3.2.8. The terminal object in Set is the set of cones over the empty diagram with
summit 1. There is a unique such cone, proving that the terminal object is again a singleton
set.
Example 3.2.9. Given a parallel pair of functions f, g: X ⇒Y, their equalizer is the set of
maps 1
x−→X so that f x = gx. In more familiar notation, the equalizer is the set E deﬁned
by
E B {x ∈X
 f(x) = g(x)} .
Example 3.2.10. Elements of the limit of a diagram F : ωop →Set are cones
1
···

x3
 
x2
(
x1
*
x0
+
· · ·
/ F3
f32
/ F2
f21
/ F1
f10
/ F0
The data of such a cone is given by a tuple of elements (xn ∈Fn)n∈ω making each triangle
commute. Thus, we see that
lim F B

(xn)n ∈
Y
n
Fn
 fn,n−1(xn) = xn−1

.
Example 3.2.11. Elements of the pullback of a pair of functions B
f−→A
g←−C are cones
over this diagram with summit 1, i.e., are commutative squares
1
c
/
b

C
g

B
f
/ A
The data of a cone of this form consists of a pair of elements b ∈B and c ∈C so that
f(b) = g(c). Thus, the pullback is deﬁned to be the set
B ×A C B {(b, c) ∈B × C
 f(b) = g(c)} .

3.2. LIMITS IN THE CATEGORY OF SETS
87
Example 3.2.12. The limit of a left G-set X : BG →Set is the set of cones with summit 1.
A map x: 1 →X deﬁnes a cone over X if and only if the diagram
1
x x
X
g∗
/ X
commutes for all g ∈G, i.e., if and only if g · x = x for all g in G. Thus, lim X  XG, the
set of G-ﬁxed points of X.
Comparing Example 3.2.11 with Examples 3.2.7 and 3.2.9, it looks like the pullback
may be constructed as an equalizer of a diagram involving a product. Indeed, given a pair
of functions f : B →A and g: C →A, the pullback B ×A C is the equalizer of the diagram
B ×A C /
/ B × C
(b,c)7→f(b) /
(b,c)7→g(c) / A.
Similarly, Example 3.2.10 deﬁnes the limit of a tower to be a subset of a product. These
are special cases of a general theorem, which constructs the limit of any small diagram of
sets in an analogous manner.
Theorem 3.2.13. Any small limit in Set may be expressed as an equalizer of a pair of maps
between products. Explicitly, for any small F : J →Set, there is an equalizer diagram
(3.2.14)
limJ F /
/ Q
j∈ob J
F j
c
/
d
/
Q
f∈mor J
F(cod f).
Proof. By Theorem 3.2.6, elements of the limit of F : J →Set correspond to cones
with summit 1 over F. The data of such a cone consists of an element λj in each set F j,
indexed by the objects j ∈J. The conditions that make the family of elements (λj)j∈J into
a cone over F are indexed by the (non-identity) morphisms in J: for each morphism f, we
demand that the following triangle commutes:
1
λdom f
y
λcod f
%
F(dom f)
F f
/ F(cod f)
i.e.,
F f(λdom f ) = λcod f .
The data just described determines the domain of the equalizer diagram (3.2.14): (λ j)j∈J
is an element of the product Q
j∈ob J F j. The conditions determine the codomain and the
parallel pair of maps. Note that the equality expressing the cone condition identiﬁes a pair
of elements in Q
f∈mor J F(cod f).
It remains to deﬁne the parallel pair of morphisms c and d of (3.2.14). An element
(λj) j ∈Q
j∈ob J F j—thought of as the legs of a cone with summit 1 over F—is sent by c to
the element (λcod f )f ∈Q
f∈mor J F(cod f) and is sent by d to the element (F f(λdom f ))f ∈
Q
f∈mor J F(cod f). The equalizer is the subset of Q
j∈ob J F j for which these elements are
equal, which is precisely the set of tuples of maps (λj : 1 →F j) j∈J that satisfy the cone
compatibility conditions. This, together with our explicit descriptions of products and
equalizers in Set given in Examples 3.2.7 and 3.2.9, completes the proof that limJ F is the
equalizer of c and d.
□
Remark 3.2.15. The maps in the equalizer diagram of Theorem 3.2.13 can also be deﬁned
categorically, using the universal property of the product Q
f∈mor J F(cod f). By Remark
3.1.27, to deﬁne c and d it is necessary and suﬃcient to deﬁne each component function,

88
3. LIMITS AND COLIMITS
by which we mean the composites of c and of d with the projection π f . The components of
c are themselves projections, as displayed in the top triangle:
F(cod f)
limJ F /
/ Q
j∈ob J
F j
c
/
d
/
πcod f
8
πdom f

Q
f∈mor J
F(cod f)
π f
O
π f

F(dom f)
F f
/ F(cod f)
That is, the component of the map c at the indexing element f ∈mor J is the projection
from the product Q
j F j onto the component indexed by the object cod f ∈J.
The component at f of the map d, displayed in the bottom square, is deﬁned by
projecting from the product Q
j F j onto the component indexed by the object dom f ∈J
and then composing with the map F f : F(dom f) →F(cod f). Considering the action of
these functions on elements, one can verify that the categorical descriptions agree with the
explicit ones described in the proof of Theorem 3.2.13.
Remark 3.2.15 is used to generalize the statement of Theorem 3.2.13 to categories
other than Set. By the principle of duality, this generalization will provide a formula for
constructing colimits as well; see Theorem 3.4.12.
Example 3.2.16. An idempotent is an endomorphism e: A →A of some object so that
e · e = e. The limit of an idempotent in Set is the set of cones with summit 1, i.e., the set
of a ∈A so that ea = a. This is the set of ﬁxed points for the idempotent e, often denoted
by Ae.
Alternatively, applying Theorem 3.2.13 in the simpliﬁed form of Exercise 3.2.ii, the
limit Ae is constructed as the equalizer
Ae /
s
/ A
1
/
e
/ A
The universal property of the equalizer implies that e factors through s along a unique map
r.
A
e
 
r

Ae /
s
/ A
1
/
e
/ A
The factorization e = sr is said to split the idempotent. Now srs = es = s implies that rs
and 1Ae both deﬁne factorizations of the diagram
Ae
s
 
rs

1Ae

Ae /
s
/ A
1
/
e
/ A
Uniqueness implies rs = 1Ae so Ae is a retract of A. Conversely, any retract diagram
B /
s
/ A
r
/ / B
rs = 1B
gives rise to an idempotent sr on A, which is split by B.

3.2. LIMITS IN THE CATEGORY OF SETS
89
Exercises.
Exercise 3.2.i. A small category can be redeﬁned to be a particular diagram in Set. The
data is given by a pair of suggestively-named sets with functions
mor C
dom /
cod / ob C
id
o
together with a “composition function” yet to be deﬁned. Use a pullback to deﬁne the set of
composable pairs of morphisms, which serves as the domain for the composition function,
and formulate the axioms for a category using commutative diagrams in Set. When Set is
replaced by a category E with pullbacks, this deﬁnes a category internal to E.
Exercise 3.2.ii. Show that for any small diagram F : J →Set, the equalizer diagram
(3.2.14) can be modiﬁed to yield a slightly smaller equalizer diagram:
limJ F /
/ Q
j∈ob J
F j
c
/
d
/
Q
f∈mor J\ob J
F(cod f)
in which the second product is indexed only by non-identity morphisms.
Exercise 3.2.iii. For any pair of morphisms f : a →b, g: c →d in a locally small category
C, construct the set of commutative squares
Sq( f, g) B

a
/
f

c
g

b
/ d

from f to g as a pullback in Set.
Exercise 3.2.iv. Generalize Exercise 3.2.iii to show that for any small category J, any
locally small category C, and any parallel pair of functors F,G: J ⇒C, the set Hom(F,G)
of natural transformations from F to G can be deﬁned as a small limit in Set. (Hint: The
diagram whose limit is Hom(F,G) is indexed by a category J§ whose objects are morphisms
in J and which has morphisms 1x →f and 1y →f for every f : x →y in J.)
Exercise 3.2.v. Show that for any small category J, any locally small category C, and any
parallel pair of functors F,G: J ⇒C, there is an equalizer diagram
C(F j′,G j′)
F f ∗
/ C(F j,G j′)
Hom(F,G)
/
/ Q
j∈ob J
C(F j,G j)
//
πj′
O
πj

Q
f : j→j′∈mor J
C(F j,G j′)
π f

π f
O
C(F j,G j)
G f∗
/ C(F j,G j′)
Note that is not the equalizer diagram obtained by applying Theorem 3.2.13 to the dia-
gram constructed in Exercise 3.2.iv. Rather, this construction gives a second formula for
Hom(F,G) as a limit in Set.
Exercise 3.2.vi. Prove that the limit of any small functor F : C →Set is isomorphic to the
set of functors C →
R
F that deﬁne a section to the canonical projection Π:
R
F →C from
the category of elements of F. Using this description of the limit, deﬁne the limit cone.

90
3. LIMITS AND COLIMITS
3.3. Preservation, reﬂection, and creation of limits and colimits
Theorem 3.2.13 would be of somewhat limited interest if it only provided formulae for
limits of diagrams of sets. In §3.4, we prove the analogous formulae for limits or colimits
of diagrams valued in any category by reducing the proofs of these general results to the
case of limits in Set. This strategy succeeds because limits and colimits in a general locally
small category are deﬁned representably in terms of limits in the category of sets.
The precise meaning of the slogan “limits and colimits are deﬁned representably using
limits of sets” is explained in the next section. First, we introduce language to describe a
variety of possible ways in which a functor can mediate between the limits and colimits in
its domain and codomain categories.
Definition 3.3.1. For any class of diagrams K : J →C valued in C, a functor F : C →D
• preserves those limits if for any diagram K : J →C and limit cone over K, the image
of this cone deﬁnes a limit cone over the composite diagram FK : J →D;
• reﬂects those limits if any cone over a diagram K : J →C, whose image upon applying
F is a limit cone for the diagram FK : J →D, is a limit cone over K; and
• creates those limits if whenever FK : J →D has a limit in D, there is some limit cone
over FK that can be lifted to a limit cone over K, and moreover F reﬂects the limits in
the class of diagrams.
Deﬁnition 3.3.1 dualizes to describe what it means for a functor to preserve, reﬂect,
or create a class of colimits. The terms “preserves,” “reﬂects,” and “creates” are used
more generally. For instance, Exercise 1.5.iv shows that a fully faithful functor preserves,
reﬂects, and creates isomorphisms.
Remark 3.3.2. To ground intuition for these terms, the following metaphor may prove
helpful: a functor F : C →D maps from “upstairs” (the category C) to “downstairs” (the
category D). An upstairs diagram (a functor K : J →C) sits above a downstairs diagram
(by composing with F).
Now F preserves limits if any upstairs limit cone maps to a downstairs limit cone. F
reﬂects limits if any upstairs cone that maps to a downstairs limit cone is also an upstairs
limit cone. Finally, F creates limits if the mere presence of a downstairs limit cone implies
the existence of an upstairs limit cone, and if any cone sitting above a limit cone is a limit
cone. The following diagram illustrates this transfer of information in the case of a pullback
diagram c′ →c ←c′′ in C:
C
F

∋
D
∋
p

/
⌟
c′′

p

/
⌟
c′′

p

/
⌟
c′′

c′
/
preserves
f
c
c′
/
reﬂects
⇝
c
c′
/
creates
⇝
c
Fp

/
⌟
Fc′′

Fp

/
⌟
Fc′′

d

/
⌟
Fc′′

Fc′
/ Fc
Fc′
/ Fc
Fc′
/ Fc
The context in which it is of greatest interest to have a functor F : C →D that creates
limits or colimits is when the codomain category D is already known to have the (co)limits
in question. In such cases, a functor that creates (co)limits both preserves and reﬂects them:

3.3. PRESERVATION, REFLECTION, AND CREATION OF LIMITS AND COLIMITS
91
Proposition 3.3.3. If F : C →D creates limits for a particular class of diagrams in C and
D has limits of those diagrams, then C admits those limits and F preserves them.
Proof. For any diagram K : J →C in the class, the hypothesis asserts that there is a
limit cone µ: d ⇒FK in D. As F creates these limits, there must be a limit cone λ: c ⇒K
in C whose image under F is isomorphic to µ (because any two limit cones over a common
diagram are isomorphic; see Exercise 3.1.iv). This shows that C admits this class of limits.
To see that F preserves them, consider another limit cone λ′ : c′ ⇒K. By Proposition
3.1.7, the two limit cones in C are isomorphic and by composing isomorphisms we see that
the cone Fλ′ : Fc′ ⇒FK is isomorphic to the limit cone µ: d ⇒FK. This implies that
Fλ′ : Fc′ ⇒FK is again a limit cone, proving that F preserves these limits.
□
Important families of limit-preserving functors appear in the next section and again
in the next chapter. For now, let us remark that limit-preservation can be an important
hypothesis:
Definition 3.3.4. Let X be a topological space and write O(X) for the poset of open subsets,
ordered by inclusion. An I-indexed family of open subsets Ui ⊂U is said to cover U if
the full diagram comprised of the sets Ui and the inclusions of their pairwise intersections
Ui ∩U j has colimit U.8 A presheaf F : O(X)op →Set is a sheaf if it preserves these
colimits, sending them to limits in Set. Applying Theorem 3.2.13, the hypothesis is that
for any open cover {Ui}i∈I of U, the following is an equalizer diagram:
F(U) /
F(Ui,→U)
/ Q
i∈I F(Ui)
F(Ui∩U j,→Ui)·πi /
F(Ui∩U j,→U j)·πj
/ Q
i, j∈I F(Ui ∩U j)
The following lemmas introduce general classes of examples of functors that reﬂect or
create limits and colimits.
Lemma 3.3.5. Any full and faithful functor reﬂects any limits and colimits that are present
in its codomain.
Proof. Exercise 3.3.ii.
□
Lemma 3.3.6. Any equivalence of categories preserves, reﬂects, and creates any limits and
colimits that are present in its domain or codomain.
Proof. Exercise 3.3.iii.
□
With the exception of the equivalences, the functors that one meets in practice that
create certain limits and colimits tend to do so strictly, in the sense of the following
deﬁnition.
Definition 3.3.7. A functor F : C →D strictly creates limits for a given class of diagrams
if for any diagram K : J →C in the class and limit cone over FK : J →D,
• there exists a unique lift of that cone to a cone over K, and
• moreover, this lift deﬁnes a limit cone in C.
A category J is connected if it is non-empty and if, in its underlying directed graph,
every pair of objects is connected by a ﬁnite zig-zag of morphisms. A diagram is connected
if it is indexed by a connected category.
Proposition 3.3.8. For any object c ∈C, the forgetful functor Π: c/C →C strictly creates
8U is also isomorphic to the coproduct `
i∈I Ui in O(X), but to state the sheaf condition, it is necessary to
describe U as a colimit of the diagram that includes the pairwise intersections U j ←- Ui ∩U j ,→Ui.

92
3. LIMITS AND COLIMITS
(i) all limits that C admits, and
(ii) all connected colimits that C admits.
A generalization of this result appears as Exercise 3.4.iii.
Proof. To deﬁne a diagram (K, κ): J →c/C is to deﬁne a functor K : J →C together
with a cone κ: c ⇒K with summit c. We will show that if
K : J
(K,κ) / c/C
Π
/ C
admits a limit cone in C, then this cone lifts to deﬁne a unique cone over (K, κ) in c/C and
moreover this cone is a limit cone.
Given a limit cone λ: ℓ⇒K in C, there is a unique factorization of the cone κ: c ⇒K
through the limit cone along a map t: c →ℓ. In the case where J is the parallel pair
category
a
f
/
g
/ b,
this process is illustrated below:
∈c/C
c
κa /
κb
 
Ka
K f

Kg

Kb
⇝
ℓ

λa

∈C
Ka
Kg

K f

Kb
⇝
ℓ

λa

∈C.
c
κa /
κb
 
t
∃!
>
Ka
Kg

K f

Kb
It is straightforward to verify that the object t: c →ℓis a limit for the original diagram in
c/C. By construction, Π: c/C →C preserves this limit.
Now suppose that J is connected and that K admits a colimit cone µ: K ⇒p. We
will show that this data lifts to deﬁne a unique cone under (K, κ) in c/C that is moreover a
colimit cone. The ﬁrst task is to lift the colimit object p along the functor Π: c/C →C.
For this, choose any object j ∈J and deﬁne the lifted object to be the composite
c
κ j / K j
µj
/ p
of the leg of the cone κ: c ⇒K and the leg of the colimit cone µ: K ⇒p. Because the
category J is connected, the composite map µj · κ j : c →p is independent of the choice of
j ∈J. Now, given a cone under (K, κ): J →c/C, the underlying cone in C factors uniquely
through p, and this factorization lifts to a unique factorization in c/C because the object c is
“on the other side of the diagram” K and does not interact with the commutative condition
required to deﬁne the cone factorization. This proves that Π: c/C →C strictly creates
connected colimits.
□
A ﬁnal result shows that functor categories inherit limits and colimits, deﬁned “object-
wise” in the target category: that is, given a J-indexed diagram in CA whose objects are
functors F j : A →C, the value of the limit functor lim j∈J F j : A →C at an object a ∈A
is the limit of the J-indexed diagram in C whose objects are the objects F j(a) ∈C. This
result is analogous to familiar operations on functions: e.g., the sum of a ﬁnite collection
of abelian group homomorphisms f j : A →C is the homomorphism deﬁned at a ∈A by
forming the sum P
j f j(a) in the abelian group C.
To state this result precisely, we consider the objects of a small indexing category A as
a maximal discrete subcategory ob A ,→A.

3.4. THE REPRESENTABLE NATURE OF LIMITS AND COLIMITS
93
Proposition 3.3.9. If A is small, then the forgetful functor CA →Cob A strictly creates all
limits and colimits that exist in C. These limits are deﬁned objectwise, meaning that for
each a ∈A, the evaluation functor eva : CA →C preserves all limits and colimits existing
in C.
Proof. The functor category Cob A is isomorphic to the ob A-indexed product of the
category C with itself, deﬁned in 1.3.12; as the name would suggest, categorical products
deﬁne products in CAT. By the universal property of products, a diagram of shape J in a
product category Q
ob A C is an ob A-indexed family of diagrams J →C. It is easy to see
that a limit of each of these component diagrams assembles into a limit for the diagram in
Cob A  Q
ob A C. In particular, Cob A has all limits or colimits that C does, and these are
preserved by the evaluation functors eva : Cob A →C.
To show that CA →Cob A strictly creates all limits and colimits, we must show that for
any F : J →CA the ob A-indexed family of objects lim j∈J F j(a) extends to a functor on A
valued in C. The universal property of the limit construction is used to deﬁne the action
of this functor on morphisms in A. The uniqueness statement in this universal property
then implies that this construction is functorial. The remaining details are left as Exercise
3.3.vi.
□
Exercises.
Exercise 3.3.i. For any diagram K : J →C and any functor F : C →D:
(i) Deﬁne a canonical map colim FK →F colim K, assuming both colimits exist.
(ii) Show that the functor F preserves the colimit of K just when this map is an isomor-
phism.
Exercise 3.3.ii. Prove Lemma 3.3.5, that a full and faithful functor reﬂects both limits and
colimits.
Exercise 3.3.iii. Prove Lemma 3.3.6, that an equivalence of categories preserves, reﬂects,
and creates any limits and colimits that are present in either its domain or codomain.
Exercise 3.3.iv. Prove that F : C →D creates limits for a particular class of diagrams if
both of the following hold:
(i) C has those limits and F preserves them.
(ii) F : C →D reﬂects isomorphisms.
Exercise 3.3.v. Show that the forgetful functors U : Set∗→Set and U : Top∗→Top fail
to preserve coproducts and explain why this result demonstrates that the connectedness
hypothesis in Proposition 3.3.8(ii) is necessary.
Exercise 3.3.vi. Prove that for any small category A, the functor category CA again has any
limits or colimits that C does, constructed objectwise. That is, given a diagram F : J →CA,
with J small, show that whenever the limits of the diagrams
J
F
/ CA
eva
/ C
exist in C for all a ∈A, then these values deﬁne the action on objects of lim F ∈CA, a limit
of the diagram F. (Hint: See Proposition 3.6.1.)
3.4. The representable nature of limits and colimits
The aim in this section is to explore the meaning of the remark made at the beginning
of the preceding one, that all limits and colimits are deﬁned representably in terms of limits
in the category of sets.

94
3. LIMITS AND COLIMITS
Fix a small diagram F : J →C in a locally small category C and an object X ∈C, and
consider the composite functor
C(X, F−) B J
F
/ C
C(X,−) / Set
a diagram of shape J in Set. Theorem 3.2.6 tells us that the limit of C(X, F−) exists and
Theorem 3.2.13 tells us how to construct it. An element in the set limJ C(X, F−) is an
element of the product Q
j∈J C(X, F j), i.e., a tuple of morphisms (λ j : X →F j) j∈J, subject
to some compatibility conditions. There is one condition imposed by each non-identity
morphism f : j →k in J, namely that the diagram
X
λ j
~
λk 
F j
F f
/ Fk
commutes. In summary, an element of limJ C(X, F−) is precisely a cone over F with
summit X; hence
(3.4.1)
limJ C(X, F−)  Cone(X, F).9
Exercise 3.4.i demonstrates that this isomorphism is natural in X. Since the limit of F is
deﬁned to be an object that represents the functor Cone(−, F), we conclude that:
Theorem 3.4.2. For any diagram F : J →C whose limit exists there is a natural isomor-
phism
(3.4.3)
C(X, limJ F)  limJ C(X, F−) .
The natural isomorphism (3.4.3) expresses the representable universal property
of the limit: the limit of a J-indexed diagram in a locally small category C is deﬁned
representably as the limit of J-indexed diagrams valued in Set.
Example 3.4.4. Iterated products of an object A ∈C are called powers or cotensors. For a
set I, the I-indexed power of A is denoted Q
I A or AI. The representable universal property
is expressed by the natural isomorphism
C(X, AI)  C(X, A)I ,
i.e., a map h: X →AI is determined by an I-indexed family of maps hi : X →A deﬁned by
composing with each product projection ϵi : AI →A. In the case of C = Set, this notation is
consistent with the exponential notation introduced previously: the power AI is isomorphic
to the set of functions from I to A, and the map ϵi : AI →A evaluates each function at i ∈I.
There are a number of interpretations of Theorem 3.4.2 that are worth stating explicitly:
Proposition 3.4.5. Covariant representable functors C(X, −): C →Set preserve any
limits that exist in a locally small category C, sending them to limits in Set.
Proof. Theorem 3.4.2 asserts that the image under C(X, −) of a limit of a diagram F
of shape J in C is a limit in Set of the composite diagram
J
F
/ C
C(X,−) / Set .
9The size hypotheses are not essential for this isomorphism: for any diagram F : J →C, an element of
limJ C(X, F−) is precisely a cone with summit X over F. This limit is related to the limits considered in Exercises
3.2.iv and 3.2.v with some simpliﬁcations arising from the fact that a cone is a natural transformation involving a
constant functor.

3.4. THE REPRESENTABLE NATURE OF LIMITS AND COLIMITS
95
Moreover, the functor C(X, −) preserves the legs of the limit cone because, by construction,
the natural isomorphism of Theorem 3.4.2 commutes with the natural maps to the product:
limJ C(X, F−)
&

Cone(X, F)

 C(X, limJ F)
x
Q
j∈J C(X, F j)
The components of the left-hand diagonal map are the legs of the limit cone for the diagram
C(X, F−). The components of the right-hand diagonal are the images of the legs of the
limit cone for F under the functor C(X, −).
□
A second interpretation of Theorem 3.4.2 is that the contravariant functor C(−, lim F)
represented by the limit of F : J →C, when considered as an object of the category SetCop,
is the limit of the composite diagram
J
F
/ C  
y
/ SetCop
whose objects are the representable functors C(−, F j). Put more concisely, the Yoneda
embedding y: C ,→SetCop preserves all limits that exist in C.
Of course, by the Yoneda lemma, the Yoneda embedding is full and faithful, so Lemma
3.3.5 implies that y: C ,→SetCop also reﬂects all limits. In summary:
Theorem 3.4.6. Let C be any locally small category.
(i) Covariant representable functors C(X, −) preserve all limits that exist in C.
(ii) The covariant Yoneda embedding y: C ,→SetCop both preserves and reﬂects limits,
i.e., a cone over a diagram in C is a limit cone if and only if its image deﬁnes a limit
cone in SetCop.
A representable characterization of colimits is obtained by dualizing the preceding
discussion. For ﬁxed F : J →C and X ∈C, consider the composite functor
C(F−, X) B Jop
F
/ Cop C(−,X) / Set
Again, Theorem 3.2.6 tells us that a limit exists and Theorem 3.2.13 provides a construction.
An element in the set limJop C(F−, X) is an element of the product Q
j∈Jop C(F j, X), i.e., a
tuple of morphisms (λj : F j →X)j∈J, subject to some conditions. There is one condition
imposed by each non-identity morphism f : j →k in J, namely that the diagram
F j
F f
/ Fk
X
 
λ j
~
λk
commutes, so we see that an element of limJop C(F−, X) is precisely a cone under F with
nadir X. The isomorphism
lim
Jop C(F−, X)  Cone(F, X)
is again natural in X proving:
Theorem 3.4.7. For any diagram F : J →C whose colimit exists, there is a natural
isomorphism
C(colimJ F, X)  limJop C(F−, X) .

96
3. LIMITS AND COLIMITS
Theorem 3.4.7 expresses the representable universal property of the colimit: the
colimit of a J-indexed diagram in a category C is deﬁned representably as the limit of
Jop-indexed diagrams valued in Set. For instance:
Example 3.4.8. For any triple of objects X, Y, Z in a locally small category C, the repre-
sentable universal property of the coproduct takes the form of a natural isomorphism
C(X ⊔Y, Z)  C(X, Z) × C(Y, Z) ,
in which the set of maps out of a coproduct is expressed as the product of a pair of hom-sets.
This answers the puzzle posed in Exercise 2.4.x at the end of Chapter 2.
Example 3.4.9. Iterated coproducts of an object A ∈C are called copowers or tensors.
For a set I, the I-indexed copower of A is denoted `
I A or I ·A. The representable universal
property is expressed by the natural isomorphism
C(`
I A, X)  C(A, X)I ,
i.e., a map h: `
I A →X is determined by an I-indexed family of maps hi : A →X deﬁned
by composing with each coproduct inclusion ιi : A →`
I A. In the case of C = Set, the
copower `
I A is isomorphic to the set I × A.
Example 3.4.10. The representable universal property of a pushout
U
f
/
g

⌜
V
h

W
k
/ P
asserts that for any X ∈C, the hom-set C(P, X) is deﬁned by the pullback
C(P, X)
C(h,X) /
C(k,X)

⌟
C(V, X)
C(f,X)

C(W, X) C(g,X) / C(U, X)
Theorem 3.4.6 dualizes to:
Theorem 3.4.11. Let C be any locally small category.
(i) Contravariant representable functors C(−, X) carry colimits in C to limits in Set.
(ii) The contravariant Yoneda embedding y: Cop ,→SetC both preserves and reﬂects
limits in Cop, i.e., a cone under a diagram in C is a colimit cone if and only if its
image deﬁnes a limit cone in SetC.
We now apply Theorems 3.4.6 and 3.4.11 to generalize Theorem 3.2.13, which con-
structs a generic limit in Set as an equalizer of a pair of maps between products, to arbitrary
categories and hence, by the principle of duality, also to colimits.
Theorem 3.4.12. The colimit of any small diagram F : J →C may be expressed as a
coequalizer of a pair of maps between coproducts
`
f∈mor J
F(dom f)
d
/
c
/ `
j∈ob J
F j
/ / colimJ F
In particular, any category with coproducts and coequalizers is cocomplete. Dually, the
limit of any small diagram may be expressed as an equalizer (3.2.14) of a pair of maps
between products, and any category with products and equalizers is complete.

3.4. THE REPRESENTABLE NATURE OF LIMITS AND COLIMITS
97
Our proof will tacitly assume that the category C is locally small, but the argument
could be extended to large categories by “passing to a higher set-theoretical universe.”
Proof. Consider a diagram F : J →C. Dualizing the construction of Remark 3.2.15,
deﬁne maps d and c
(3.4.13)
F(dom f)
C
`
j∈ob J
F j
oo
o
d
o
c
x
ιdom f
O
ιcod f
`
f∈mor J
F(dom f)

ι f
O
ι f
F(cod f) o
F f
F(dom f)
between the coproducts indexed by the morphisms and objects of J, respectively: the
component of d at f ∈mor J is deﬁned to be the coproduct inclusion ιdom f , while the
component of c at f ∈mor J is deﬁned to be the composite of F f with the coproduct
inclusion ιcod f . By hypothesis, their coequalizer C exists in C. Our aim is to show that C
deﬁnes a colimit of F.
By Theorem 3.4.11(ii), the Yoneda embedding y: Cop →SetC carries the coequalizer
diagram (3.4.13) to an equalizer diagram in SetC
C(F(dom f), X)
C(C, X) /
/ C( `
j∈ob J
F j, X)
C(d,X) /
C(c,X) /
C(ιdom f ,X)
6
C(ιcod f ,X)

C( `
f∈mor J
F(dom f), X)
C(ι f ,X)
O
C(ι f ,X)

C(F(cod f), X)
C(F f,X) / C(F(dom f), X)
comprised of functors and natural transformations in the variable X. Applying Theorem
3.4.11(i) to each object in this equalizer diagram, we obtain an isomorphic diagram
(3.4.14)
C(F(cod f), X)
C(C, X) /
/
Q
j∈ob Jop C(F j, X)
c
/
d
/
πcod f
5
πdom f

Q
f∈mor Jop C(F(cod f), X)
πf
O
πf

C(F(dom f), X)
C(F f,X)
/ C(F(cod f), X)
Note that C(−, X) carries the coproduct inclusion maps to product projection maps. When
f is regarded as a morphism in Jop, its domain and codomain are exchanged, so we now
write “c” for the map C(d, X) and “d” for the map C(c, X).
When X is ﬁxed, applying Proposition 3.3.9 to the evaluation functor evX : SetC →Set
tells us that (3.4.14) deﬁnes an equalizer diagram in Set. Applying Theorem 3.2.13 to the

98
3. LIMITS AND COLIMITS
functor C(F−, X): Jop →Set, we recognize (3.4.14) as the diagram whose equalizer
deﬁnes the limit limJop C(F−, X). Thus, we conclude that
limJop C(F−, X)  C(C, X)
for each X ∈C. These isomorphisms, deﬁned for each X ∈C, assemble into an isomorphism
in Setob C, from which point we apply Proposition 3.3.9 to the forgetful functor SetC →
Setob C to conclude that C(C, −) is the limit of the Jop-indexed diagram of covariant functors
C(F j, −). Now Theorem 3.4.7 tells us that the coequalizer C is the colimit of F : J →C.
□
Remark 3.4.15 (on generalized elements). A direct proof of Theorem 3.4.12 simply con-
structs the diagram (3.4.13) in C and checks that the coequalizer of c and d has the universal
property that deﬁnes colimJ F. There is a sense in which this direct proof is quite similar to
our strategy—to ﬁrst verify the result in Set and then apply representability—by something
called the philosophy of generalized elements, ﬁrst articulated by Lawvere [Law05].
Elements of a set A stand in bijection with morphisms a: 1 →A in the category of
sets. By composition, morphisms f : A →B in the category of sets act on elements: the
composite fa encodes the element f(a).10 In any category C, a generalized element of
an object A is a morphism a: X →A with codomain A. Morphisms f : A →B in C act
on X-shaped elements by composition: the composite fa encodes an X-shaped generalized
element of B. In this terminology, the contravariant represented functor
Hom(−, A): Cop →Set
sends an object X to the set of X-shaped generalized elements of A. Since the Yoneda
embedding C ,→SetCop is fully faithful, no information about A is lost by considering
instead the functor Hom(−, A) of generalized elements of A.
In particular, to show that a parallel pair of morphisms f, g: A ⇒B are equal, it suﬃces
to show that f and g induce the same functions on generalized elements. Or to show that
a cone with summit A is a limit cone, it suﬃces to show, for generalized elements of any
shape, that the induced functions deﬁne a limit cone in Set: this argument establishes the
representable universal property of the limit. See [Lei08] for an application of this principle
of “doing without diagrams” in more sophisticated contexts.
We conclude this section with an informal illustration of the philosophy of generalized
elements by showing that ﬁnite products and equalizers can be constructed out of a terminal
object 1 and (iterated) pullbacks.
Lemma 3.4.16. In any category with a terminal object 1, the pullback diagram
A × B
πA

πB
/
⌟
B
!

A
!
/ 1
deﬁnes the product A × B of A and B.
Proof. It is straightforward to use the universal property of the displayed pullback to
verify that the diagram A
πA
←−−A × B
πB
−−→B has the universal property that deﬁnes a product.
The details are left as Exercise 3.4.iv.
□
Hence any category with pullbacks and a terminal object also has all binary, and by
iteration ﬁnite, products.
10The standard function notation motivates the usual “composition order.”

3.5. COMPLETE AND COCOMPLETE CATEGORIES
99
Lemma 3.4.17. In any category with binary products, the pullback diagram
E
ℓ

e
/
⌟
A
(f,g)

B (1B,1B) / B × B
⇝
E /
e
/ A
f
/
g
/ B
deﬁnes an equalizer of the parallel pair f, g: A ⇒B.
Proof. The representable universal property of the product
Hom(X, B × B)  Hom(X, B) × Hom(X, B)
and of the pullback, in the form of Theorem 3.4.6(i), supply a pullback diagram
Hom(X, E)
e∗
/
ℓ∗

⌟
Hom(X, A)
(f∗,g∗)

Hom(X, B) (1∗,1∗) / Hom(X, B) × Hom(X, B)
By the description of pullbacks in the category of sets given in Example 3.2.11, composition
with e and ℓdeﬁnes a bijection between X-shaped generalized elements of E and pairs of
generalized elements (X
a−→A, X
b−→B) so that fa = b = ga. Thus, composing with e
deﬁnes an isomorphism between Hom(X, E) and the subset of Hom(X, A) consisting of
those generalized elements a so that fa = ga. By Example 3.2.9, this tells us that
Hom(X, E) /
e∗
/ Hom(X, A)
f∗
/
g∗
/ Hom(X, B)
is an equalizer diagram. The conclusion follows from Theorem 3.4.6(ii).
□
A diagram is said to be ﬁnite if its indexing category contains only ﬁnitely many
morphisms. Lemmas 3.4.16 and 3.4.17 prove:
Theorem 3.4.18. Any category with pullbacks and a terminal object has all ﬁnite limits.
Dually, any category with pushouts and an initial object has all ﬁnite colimits.
Exercises.
Exercise 3.4.i. Show that the isomorphism (3.4.1) is natural in X.
Exercise 3.4.ii. Explain in your own words why the Yoneda embedding C ,→SetCop
preserves and reﬂects but does not create limits.
Exercise 3.4.iii. Generalize Proposition 3.3.8 to show that for any F : C →Set, the
projection functor Π:
R
F →C:
(i) strictly creates all limits that C admits and that F preserves, and
(ii) strictly creates all connected colimits that C admits.
Exercise 3.4.iv. Prove Lemma 3.4.16.
3.5. Complete and cocomplete categories
Theorems, such as 3.4.12 and 3.4.18, that reduce the construction of general limits and
colimits to a handful of simple ones are particularly useful when it comes to proving that
a category is complete or cocomplete—that is, has all small limits or colimits—or that
a functor is continuous or cocontinuous—that is, preserves all small limits or colimits.

100
3. LIMITS AND COLIMITS
The proofs reduce to checking a few cases. In this section, we describe the constructions
of limits and colimits in various categories, in most cases leaving the proofs that these
constructions have the claimed universal properties to the reader.
Many of the concrete categories of our acquaintance are complete and cocomplete
including Set, Top, Set∗, Top∗, Cat or CAT, Group, Ab, Ring, ModR, among others. Here,
we restrict consideration to the ﬁrst six cases. A result from categorical universal algebra
specializes to prove that the latter categories are complete and cocomplete (see Theorem
5.6.12).
In the ﬁrst example, half the work is done already: Theorem 3.2.6 demonstrates that
Set is complete.
Proposition 3.5.1. The category Set is cocomplete.
Proof. By Theorem 3.4.12, it suﬃces to show that Set has coproducts and coequal-
izers. The former are given by disjoint unions, while the coequalizer of a parallel pair of
functions f, g: A ⇒B is the quotient of the set B by the equivalence relation generated by
the relations f(a) ∼g(a) for each a ∈A.
□
Proposition 3.5.2. The category Top of spaces is complete and cocomplete.
Proof. The underlying set functor U : Top →Set is represented by the singleton
space ∗. Hence, Proposition 3.4.5 implies that if Top has any limits, they must be formed
by topologizing the limit of the diagram of underlying sets, as was argued in the case of the
cartesian product in Example 3.1.10.
As the name suggests, the product of a family of spaces Xα is formed by giving
the cartesian product Q
α Xα the product topology, which is the coarsest topology so that
each of the projection functions πβ : Q
α Xα →Xβ is continuous.
The equalizer of a
pair of continuous functions f, g: X ⇒Y is given by assigning the equalizer E ⊂X of
the underlying functions the subspace topology, which also may be characterized as the
coarsest topology on E so that the inclusion E ,→X is continuous.
Dually, we might guess that colimits in Top are formed by topologizing the colimit of
the diagram of underlying sets; Theorem 4.5.3 implies that the colimit must be constructed
in this manner. The coproduct is formed by assigning the disjoint union `
α Xα the ﬁnest
topology so that each of the coproduct-inclusions ιβ : Xβ →`
α Xα is continuous. The
disjoint union of any bases for the spaces Xα deﬁnes a basis for `
α Xα. The coequalizer of
a pair of continuous functions f, g: X ⇒Y is constructed by ﬁrst forming the set-theoretic
quotient Y/∼of Y under the equivalence relation generated by the relations f(x) ∼g(x) for
each point x ∈X. The set Y/∼is then given the quotient topology, under which a subset in
Y/∼is open if and only if its preimage in Y is open; this is the ﬁnest topology so that the
quotient map Y ↠Y/∼is continuous.
Theorem 3.4.12 and its dual now imply that Top has all small limits and colimits. The
constructions described here demonstrate moreover that the forgetful functor U : Top →Set
preserves them.
□
Example 3.5.3. Any limit or colimit in Top can be constructed in the way prescribed in
the proof of Proposition 3.5.2: by forming the limit or colimit of the diagram of underlying
sets and then topologizing the resulting space with the coarsest (in the case of limits) or
ﬁnest (in the case of colimits) topologies so that the legs of the limit or colimit cones are
continuous.
For instance, consider the diagram ωop →Top whose objects are circles S 1 and in
which each generating map is the “pth power map,” the covering map that wraps the domain

3.5. COMPLETE AND COCOMPLETE CATEGORIES
101
circle uniformly p times around the codomain circle:
· · ·
/ S 1
p
/ S 1
p
/ S 1
p
/ S 1
The inverse limit deﬁnes the p-adic solenoid.
Example 3.5.4. The space of (unordered) conﬁgurations of n points in a space X is the
topological space whose points are collections of n distinct points in X and whose topology
considers two conﬁgurations to be “close” if there is a bijection between their points so that
each pair of points is “close” to each other.
More formally, the space of ordered conﬁgurations of n points is a subspace of the
product space Xn, namely the complement of the “fat diagonal”
PConfn(X) B (x1, . . . , xn) ∈Xn  xi , xj ∀i , j	 .
The symmetric group Σn acts on Xn by permuting the coordinates, and this action restricts
to the subspace PConfn(X) ⊂Xn. The colimit of the diagram PConfn(X): BΣn →Top
deﬁnes the space of conﬁgurations of n points
Confn(X) B colim

BΣn
PConfn(X)
−−−−−−−→Top

.
Example 3.5.i describes its underlying set.
Completeness and cocompleteness of Set and of Top implies the same for Set∗and
Top∗as a special case11 of a general result:
Proposition 3.5.5. If C is complete and cocomplete, then so are the slice categories c/C
and C/c for any c ∈C.
Proof. The statements are dual, so it suﬃces to prove the result for c/C. By Proposition
3.3.8, if C is complete and cocomplete, then c/C has all limits and all connected colimits,
created by the forgetful functor Π: c/C →C.
Thus, c/C is complete and to prove
cocompleteness it remains only to show that c/C has coproducts. By the construction of
Lemma 3.4.16, generalized to higher arity coproducts, it suﬃces to show that c/C has an
initial object, which it does: the identity 1c is initial.
Note that this proof also tells us how the coproduct is constructed: the coproduct of a
family of objects c →xα is the map from c to the colimit of the diagram deﬁned by these
morphisms in C (an “asterisk” with source c and all the morphisms pointing out).12
□
Next we consider limits of diagrams of categories. Examples 2.1.5(ix) and (x) reveal
that the functors ob, mor: Cat ⇒Set are represented by the ordinal categories 1 and 2. By
Theorem 3.4.6(i), both functors preserve limits, which means that if the limit of a diagram
of categories exists, then its set of objects must be the limit of the underlying diagrams
of object-sets and its set of morphisms must be the limit of the underlying diagrams of
morphism-sets. Furthermore, domains, codomains, and identities are also preserved, as
each of these maps is expressible, by Exercise 2.1.i, as a natural transformation between
representable functors. A similar argument involving the category 3 proves that composition
is preserved as well. These observations suggest candidates for the product of any categories
and for the equalizer of any parallel pair of functors, allowing us to prove that:
Proposition 3.5.6. The categories Cat and CAT are complete.
11Exercise 3.3.v explains that Set∗and Top∗are slice categories.
12Particularly when C is concrete and c represents the underlying set functor U : C →Set, so that c/C 
R
U
is a category of “based objects,” the coproduct is typically written with the symbol “∨” in place of the usual “⊔”;
see Example 3.1.24 for instance.

102
3. LIMITS AND COLIMITS
Proof. Higher arity versions of the product, introduced in Deﬁnition 1.3.12, deﬁne
products of categories. The equalizer E of a pair of parallel functors
E /
/ C
F
/
G
/ D
is the subcategory of C consisting of those objects c ∈C so that Fc = Gc and those
morphisms f so that F f = G f. Applying Theorem 3.4.12, it follows that Cat and CAT
admit all small limits.
□
Example 3.5.7. For any functor F : C →Set, the pullback in CAT of
C
F
/ Set
Set∗
U
o
is a category whose objects are pairs c ∈C and (X, x) ∈Set∗so that Fc = X. Morphisms
are pairs f : c →c′ and g: (X, x) →(X′, x′) so that F f = Ug. Expressing this data more
eﬃciently, we see that the pullback
R
F

/
⌟
Set∗
U

C
F
/ Set
is the category
R
F of elements of F.13
Both Cat and CAT are also cocomplete. Coproducts in each case are straightforward:
any category is uniquely expressible as a coproduct of its connected components. By
Lemma 3.4.17, it suﬃces to construct pushouts. But these can be rather more complicated
than was the case for the corresponding limit notions.
Example 3.5.8. To calculate the pushout,
1 ⊔1 /
/

⌜
2

1
/ P
it helps to reﬂect on its universal property. A functor P →C corresponds to a cone under
the diagram 1 ←1 ⊔1 →2 with nadir C. This data deﬁnes an endomorphism f in C,
a morphism 2 →C so that its domain and codomain deﬁne the same object 1 →C. In
deﬁning P, we must take care not to impose any relations on the composite endomorphisms
f · f · · · f. Thus, P must be the free category with one object and one non-identity morphism.
Recalling that one-object categories can be identiﬁed with monoids, we ﬁnd that P is quite
familiar: it is the monoid N of natural numbers under addition.
Similarly, the group Z of integers under addition can be constructed as a pushout
1 ⊔1 /
/

⌜
I

1
/ BZ
in which the walking arrow 2 is replaced by the walking isomorphism I, the category with
two objects and two non-identity morphisms pointing in opposite directions, which are
inverse isomorphisms.
13The pullback of a contravariant functor F : Cop →Set along U : Set∗→Set deﬁnes the opposite of
R
F.

3.5. COMPLETE AND COCOMPLETE CATEGORIES
103
The proof of cocompleteness of Cat is deferred to Corollary 4.5.16, where it is deduced
as a special case of a general result that gives an explicit construction of the colimit of any
diagram of categories. The rough idea is to embed the category of categories into a larger
category in which colimits are more easily understood and then “reﬂect” the colimits from
the larger category back into Cat.
Before considering a ﬁnal class of examples, note that completeness and cocomplete-
ness of a category are equivalence-invariant. In particular, a preorder is complete and
cocomplete if and only if its skeleton, a poset, is so.
Proposition 3.5.9. A poset P is complete and cocomplete as a category if and only if it is
a complete lattice, that is, if and only if every subset A ⊂P has both an inﬁmum (greatest
lower bound) and a supremum (least upper bound).
Proof. In any poset (or preorder), a limit of a diagram is an inﬁmum of its objects,
while a colimit of a diagram is a supremum of its objects. Whether or not there are any
morphisms in the diagram makes no diﬀerence because all diagrams in a preorder commute.
In particular, any collection of morphisms with common domain deﬁnes a cone over any
diagram whose objects are indexed by the codomains.
□
With this work behind us, it is reasonable to ask: What are all these limits and colimits
good for? One use of a handful of simple limit constructions is to deﬁne a notion of
equivalence relation internally to a general category. Other signiﬁcant applications will
appear in §4.6, where limits and colimits are used to deﬁne functors.
Example 3.5.10. In any category with ﬁnite limits, the kernel pair14 of a morphism
f : X →Y is the pullback of f along itself:
R
s

t
/
⌟
X
f

X
f
/ Y
These maps deﬁne a monomorphism (s, t): R ↣X × X, so the object R is always a
subobject of the product X × X.15
In Set, a subset R ⊂X × X deﬁnes a relation on
X. Indeed, subobjects deﬁned by kernel pairs are always equivalence relations, in the
following categorical sense:
(i) There is a reﬂexivity map ρ deﬁned by
X
ρ

1X
"
1X

R
s

t
/
⌟
X
f

X
f
/ Y
14In the absence of a zero object—an object that is both initial and terminal, which can be used to deﬁne a
zero map between any pair of objects—kernel pairs are the best analog of kernels. Barry Fawcett acknowledges
the pervasiveness of this sort of construction, writing “Category theory tells us: to learn about A, study pairs of
maps out of [or into] A” [Faw86].
15A subobject of an object c is a monomorphism with codomain c; see Deﬁnition 4.6.8.

104
3. LIMITS AND COLIMITS
that is a section of both s and t, i.e., that deﬁnes a factorization of the diagonal
X
(1X,1X)
/
ρ
%
X × X
R 7
(s,t)
7
(ii) There is a symmetry map σ deﬁned by
R
σ

s
"
t

R
s

t
/
⌟
X
f

X
f
/ Y
so that tσ = s and sσ = t.
(iii) There is a transitivity map τ whose domain is the pullback of t along s
R ×X R
˜s

˜t
/
⌟
R
t
/
s

X
R
t
/
s

X
X
This diagram deﬁnes a cone over the pullback deﬁning R and thus induces a map
R ×X R
τ
"
t˜t
#
s˜s

R
s

t
/
⌟
X
f

X
f
/ Y
so that sτ = s˜s and tτ = t˜t.
An equivalence relation in a category C with ﬁnite limits is a subobject (s, t): R ↣X × X
equipped with maps ρ, σ, and τ commuting with the morphisms s and t in the manner
displayed in the diagrams of (i), (ii), and (iii). When it exists, the coequalizer of the maps
s, t: R ⇒X of an equivalence relation deﬁnes a quotient object e: X ↠X/R. In Set, X/R
is the set of R-equivalence classes of elements of X. For equivalence relations arising as
kernel pairs, there is a unique factorization
X
f
/
e
  
Y
X/R
m
>

3.5. COMPLETE AND COCOMPLETE CATEGORIES
105
In good situations, such as when C is a Grothendieck topos (see §E.4), the map m is a
monomorphism and this factorization deﬁnes the image factorization of the map f: the
monomorphism X/R ↣Y identiﬁes the image X/R as a subobject of Y.
Exercises.
Exercise 3.5.i. Let G be a group regarded as 1-object category BG. Describe the colimit
of a diagram BG →Set in group-theoretic terms, as was done for the limit in Example
3.2.12.
Exercise 3.5.ii. Prove that the colimit of any small functor F : C →Set is isomorphic
to the set π0(
R
F) of connected components of the category of elements of F. What is the
colimit cone?
Exercise 3.5.iii. Prove that the category DirGraph of directed graphs is complete and
cocomplete and explain how to construct its limits and colimits. (Hint: Use Proposition
3.3.9.)
Exercise 3.5.iv. For a small category J, deﬁne a functor i0 : J →J × 2 so that the pushout
J
i0

!
/
⌜
1
s

J × 2
/ J◁
in Cat deﬁnes the cone over J, with the functor s: 1 →J◁picking out the summit object.
Remark 3.1.8 gives an informal description of this category, which is used to index the
diagram formed by a cone over a diagram of shape J.
Exercise 3.5.v. Describe the limits and colimits in the poset of natural numbers with the
order relation k ≤n if and only if k divides n.
Exercise 3.5.vi. Deﬁne a contravariant functor Finop
mono →Top from the category of ﬁnite
sets and injections to the category of topological spaces that sends a set with n elements
to the space PConfn(X) constructed in Example 3.5.4. Explain why this functor does not
induce a similar functor sending an n-element set to the space Confn(X).
Exercise 3.5.vii. Following [Gro58], deﬁne a ﬁber space p: E →B to be a morphism
in Top.
A map of ﬁber spaces is a commutative square.
Thus, the category of ﬁber
spaces is isomorphic to the diagram category Top2. We are also interested in the non-full
subcategory Top/B ⊂Top2 of ﬁber spaces over B and maps whose codomain component
is the identity. Prove the following:
(i) A map
E′
p′

g
/ E
p

B′
f
/ B
of ﬁber spaces induces a canonical map from the ﬁber over a point b ∈B′ to the ﬁber
over its image f(b) ∈B.
(ii) The ﬁber of a product of ﬁber spaces is the product of the ﬁbers.
A projection B × F →B deﬁnes a trivial ﬁber space over B, a deﬁnition that makes sense
for any space F.
(iii) Show that the ﬁber of a trivial ﬁber space B × F →F is isomorphic to F.

106
3. LIMITS AND COLIMITS
(iv) Characterize the isomorphisms in Top/B between two trivial ﬁber spaces (with a
priori distinct ﬁbers) over B.
(v) Prove that the assignment of the set of continuous sections of a ﬁber space over B
deﬁnes a functor Sect: Top/B →Set.
(vi) Consider the non-full subcategory Top2
pb of ﬁber spaces in which the morphisms are
the pullback squares. Prove that the assignment of the set of continuous sections to
a ﬁber space deﬁnes a functor Sect: (Top2
pb)op →Set.
(vii) Describe the compatibility between the actions of the “sections” functors just intro-
duced with respect to the map g of ﬁber spaces p and q over B and their restrictions
along f : B′ →B.
E′⌟
/
p′

E
p

g

F′⌟
q′

/ F
q

B′
f
/ B
3.6. Functoriality of limits and colimits
Proposition 3.1.7 demonstrates that limits and colimits are each well-deﬁned up to
unique isomorphism when they exist. In this section, we establish the functoriality of the
construction of limits or colimits of diagrams of a ﬁxed shape, and explore its consequences.
An important point is that functoriality of the limit is not the same as canonicity. In most
cases, there are many isomorphic objects that deﬁne the limit, and there is seldom a
reason to prefer any one to the others. To illustrate this point, we present an example that
demonstrates that even when limit objects exist uniquely, as is the case for instance in a
skeletal category, it does not necessarily follow that canonical isomorphisms induced by
the universal properties of these objects are identities.
Proposition 3.6.1. If C has all J-shaped limits, then a choice of a limit for each diagram
deﬁnes the action on objects of a functor limJ : CJ →C.
Note that this functor is not canonically deﬁned but rather requires an arbitrary choice
of a limit to serve as “the” limit for each diagram.
Proof. Choose a limit and a limit cone for each diagram F ∈CJ. This deﬁnes the
action of limJ : CJ →C on objects. It remains only to deﬁne the action of limJ : CJ →C
on morphisms. The vertical composite of a natural transformation α: F ⇒G and the limit
cone λ: limJ F ⇒F for F deﬁnes a cone
limJ F
λ
+3 F
α
+3 G
with summit limJF over G.
This cone factors uniquely through the chosen limit cone
limJ G ⇒G for the diagram G via a map between their summits, which we take to be
limJ α: limJ F →limJ G. To illustrate, a morphism in C•→•←• is a pair of solid-arrow

3.6. FUNCTORIALITY OF LIMITS AND COLIMITS
107
commutative squares as displayed:
•
/


⌟
•


•
/

•

•
/

⌟
•

•
/ •
Choosing pullbacks for the top and bottom diagrams, with the legs of the pullback cones
displayed in dashes, there is a unique induced dotted arrow morphism between their sum-
mits, which deﬁnes the action of the functor C•→•←• →C on this morphism. Uniqueness of
the universal properties implies that this construction is functorial; see Exercise 3.6.i.
□
Example 3.6.2. Recall the functor Path: Top →Set that carries a space X to the set
Path(X) B Top(I, X), where I is the standard unit interval. Precomposing with the endpoint
inclusions 0, 1: ∗⇒I deﬁnes a functor P: Top →Set•⇒• that carries a space X to the
parallel pair of functions
Path(X)  Top(I, X)
ev0 /
ev1 / Top(∗, X)  Point(X)
that evaluate a path at its endpoints. Their coequalizer
Path(X)
ev0 /
ev1 / Point(X)
/ / π0X
deﬁnes the set of path components of X, the quotient of the set of points in X by the
relation that identiﬁes any pair of points connected by a path. Proposition 3.6.1 tells us that
this coequalizer deﬁnes a functor, the path components functor
π0 B Top
P
/ Set•⇒•
colim / Set.
More generally, the construction of Proposition 3.6.1 implies that a natural transfor-
mation between diagrams gives rise to a morphism between their limits or between their
colimits, whenever these exist. Whether the codomain category has all limits or colimits
of that shape is irrelevant. Moreover, whenever the natural transformation is a natural
isomorphism, the induced map between the limits or colimits is an isomorphism.
Corollary 3.6.3. A natural isomorphism between diagrams induces a naturally-deﬁned
isomorphism between their limits or colimits, whenever these exist.
Proof. The proof of Proposition 3.6.1 deﬁnes a limit functor from the full subcategory
of CJ spanned by those functors admitting limits in C. This functor, like all functors,
preserves isomorphisms (Lemma 1.3.8).
□
The main computational motivation for Eilenberg and Mac Lane’s formulation of the
concept of naturality was to be able to carefully and correctly formulate this result. While
the general theory of limits and colimits had not yet been developed, [EM45, 21.2] proves
Corollary 3.6.3 in the special case of directed diagrams. Indeed, naturality is a necessary
condition in Corollary 3.6.3:
Example 3.6.4. For any group G, a pair of G-sets X, Y : BG ⇒Set are objectwise isomor-
phic just when their underlying sets are isomorphic. The functors X and Y are naturally
isomorphic just when there exists an equivariant isomorphism, that is, a bijection X
−→Y

108
3. LIMITS AND COLIMITS
that commutes with the actions by each g ∈G. This second condition is stronger than the
ﬁrst.
For instance, consider the group Z/2 and the Z/2-sets 2, the two-element set with a
trivial Z/2-action, and 2′, the two-element set where the generator of Z/2 acts by exchanging
the two elements. We may regard 2 and 2′ as functors BZ/2 →Set from which perspective
they are objectwise isomorphic (because both sets have two elements) but not naturally
isomorphic (because there is no isomorphism that commutes with the Z/2-actions).
The limit of a functor X : BG →Set is the set of G-ﬁxed points (see Example 3.2.12)
and the colimit is the set of G-orbits (by Exercise 3.5.i). In the case of our pair of Z/2-sets,
lim 2 has two elements while lim 2′ is empty, and colim 2 has two elements while colim 2′
is a singleton.
Example 3.6.5. To a ﬁnite set X, we can associate the set Sym(X) of its permutations or
the set Ord(X) of its total orderings. Both sets have |X|! elements. These constructions are
functorial, not with respect to all maps of ﬁnite sets, but with respect to the bijections: the
functor Sym: Finiso →Fin acts by conjugation and the functor Ord: Finiso →Fin acts by
translation. However, the objectwise isomorphism Sym(X)  Ord(X) is not natural, and
indeed limits or colimits of restrictions of these diagrams need not be isomorphic.
Combinatorialists refer to a functor F : Finiso →Fin as a species.16 The image F(n)
of the n-element set n is the set of labeled F-structures on n. The set of unlabeled
F-structures on n is deﬁned by restricting Finiso to the full subcategory spanned by the
n-element set, i.e., to the symmetric group Σn regarded as the group of automorphisms of
the object n ∈Finiso, and forming the colimit of the diagram
BΣn ,→Finiso
F−→Fin .
Because Ord and Sym are objectwise isomorphic, the sets of labeled Sym-structures and
labeled Ord-structures are isomorphic. However, the set of unlabeled Sym-structures on n
is the set of conjugacy classes of permutations of n-elements, while the set of unlabeled
Ord-structures on n is trivial: all linear orders on n are isomorphic. See [Joy81] for more.
A discussion of the functoriality of chosen limits and colimits should come with a few
warnings. Limits, when they exist, are unique up to a unique isomorphism commuting with
the maps in the limit cone. But this is not the same thing as saying that limits are unique
on the nose: even if there is a unique object satisfying the universal property of the limit,
each of its automorphisms gives rise to a distinct limit cone. Moreover, choices of limits
of diagrams of ﬁxed shape, as required to deﬁne the limit functor of Proposition 3.6.1,
can seldom be made compatibly. For instance, Freyd has shown that in any category with
pullbacks, it is possible to choose canonical pullbacks so that the “horizontal” composite
of canonical pullback squares, in the sense of Exercise 3.1.viii, is the canonical pullback
of the composite rectangle; however, it is not possible to also arrange so that the “vertical”
composites of canonical pullback squares are canonical pullbacks [FS90, §1.4].
Even when the chosen limit objects are equal, the various natural isomorphisms asso-
ciated to the limit constructions might not be identities. To illustrate this, ﬁrst observe:
Lemma 3.6.6. For any triple of objects X, Y, Z in a category with binary products, there is
a unique natural isomorphism X × (Y × Z)  (X × Y) × Z commuting with the projections
to X, Y, and Z.
Proof. Exercise 3.6.ii.
□
16In this context, “species” is singular.

3.7. SIZE MATTERS
109
Lemma 3.6.6 asserts that the product is naturally associative.
It follows that any
iteration of binary products can be used to deﬁne n-ary products. However, even in a
skeletal category, in which the objects X × (Y × Z) and (X × Y) × Z are necessarily equal,
the natural isomorphism may not be the identity. The following example, from [ML98a,
p. 164], is due to Isbell.
Example 3.6.7. Consider sk(Set), a skeletal category of sets. Since sk(Set) is equivalent
to a complete category it has all limits and, in particular, has products. Let C denote the
countably inﬁnite set. Its product C × C = C and the product projections π1, π2 : C →C
are both epimorphisms. Suppose the component of the natural isomorphism C × (C ×C) 
(C × C) × C were the identity. Naturality would then imply that for any triple of maps
f, g, h: C →C that f × (g × h) = ( f × g) × h, on account of commutativity of the square
C × (C × C)
f×(g×h)

(C × C) × C
(f×g)×h

C × (C × C)
(C × C) × C
Now a pair of maps between products are equal if and only if their projections onto
components are equal.
C
g×h
/
h
/ C
C × C
π2
O
π1

f×(g×h)/
(f×g)×h/ C × C
π2
O
π1

C
f
/
f×g
/ C
Because π1 and π2 are epimorphisms, this implies that f = f × g and g × h = h. So we
conclude that any pair of maps f, g: C ⇒C must be equal, which is absurd. It follows that
the component of the natural associativity isomorphism C × (C × C)  (C × C) × C is not
the identity.
Exercises.
Exercise 3.6.i. In a category C with pullbacks, prove that the mapping lim: C•→•←• →C
deﬁned in the proof of Proposition 3.6.1 is functorial.
Exercise 3.6.ii. Prove Lemma 3.6.6.
3.7. Size matters
Recall a category is complete if it admits a limit for any diagram whose domain is
a small category. In this section, we explain the reason for this size restriction. As a
warm-up, the following lemma highlights a commonly existing large limit. Somewhat
peculiarly, an initial object, which is deﬁned to be the colimit of the empty diagram, may
also be characterized as the limit of the identity functor:
Lemma 3.7.1. For any category C, the identity functor 1C : C →C admits a limit if and
only if C has an initial object.
Proof. Consider a limit cone (λc : ℓ→c)c∈C. The legs of the limit cone demonstrate
that ℓis a weakly initial object, admitting at least one morphism to every object c ∈C. To
show that λc is the only morphism from ℓto c, observe that for any morphism f : ℓ→c,

110
3. LIMITS AND COLIMITS
commutativity of the limit cone implies that fλℓ= λc. So to prove that ℓis initial, it suﬃces
to show that the cone leg λℓ: ℓ→ℓis the identity.
Considering λc as a morphism in the diagram 1C, the cone condition tells us that
λcλℓ= λc. From this equation, we see that λℓdeﬁnes a factorization of the cone λ: ℓ⇒1C
through itself. By uniqueness of such factorizations, we conclude that λℓ= 1ℓ, as desired.
The veriﬁcation that an initial object deﬁnes a limit of 1C is left as Exercise 3.7.i.
□
By the size restrictions inherent in the notion of completeness, a complete (large)
category need not have an initial object. As it turns out, complete small categories are hard
to come by. To explain this, we require a precise deﬁnition of the cardinality of a small
category.
Definition 3.7.2. The cardinality of a small category is the cardinality of the set of its
morphisms. A category whose cardinality is less than κ is called κ-small.
A κ-small diagram is one whose indexing category is κ-small. The following result
explains why categories tend only to have limits or colimits of diagrams of smaller size.
Proposition 3.7.3 (Freyd). Any κ-small category that admits all κ-small limits or all
κ-small colimits is a preorder.
This result remains true under less restrictive completeness hypotheses, which the
reader will have no trouble formulating.
Proof. Let λ be the cardinality of the set of morphisms in a κ-small category C, and
suppose there exists a parallel pair f, g: B ⇒A of morphisms with f , g. By the universal
property of the λ-indexed power (see Example 3.4.4), there are 2λ distinct morphisms
B →Aλ whose components are either f or g. By Cantor’s diagonalization argument,
|C(B, Aλ)| ≥2λ > λ = | mor C| ,
contradicting the fact that C(B, Aλ) is a subset of mor C. If C instead has κ-small copowers,
then a dual construction yields a similar contradiction.
□
Proposition 3.5.9 reveals that it is possible for a preorder to have all limits or colimits
of unrestricted size: a poset P has this property as a category if and only if it is a complete
lattice.
Exercises.
Exercise 3.7.i. Complete the proof of Lemma 3.7.1 by showing that an initial object
deﬁnes a limit of the identity functor 1C : C →C.
3.8. Interactions between limits and colimits
Given a functor of several variables, it is natural to consider limits and colimits formed
separately in each variable. Assuming these objects exist, it follows from their universal
properties that limits commute with limits and colimits commute with colimits. Because
the universal properties of limits and colimits have opposite handedness, in the few cases
where limits and colimits commute with each other, this tends not to follow from formal
abstract nonsense, but instead most likely has something to do with how these objects are
constructed in the particular category in question.
To explore these issues, consider a functor F : I × J →C of two variables, which, by
Exercise 1.7.vii, may also be regarded as a functor F : I →CJ or as F : J →CI. If for
each i ∈I, limj∈J F(i, j) exists, then by Proposition 3.3.9 these objects deﬁne the values

3.8. INTERACTIONS BETWEEN LIMITS AND COLIMITS
111
of a diagram limj∈J F(−, j): I →C. The following theorem proves that the limit of this
I-indexed diagram is isomorphic to the object obtained by exchanging the roles of I and J.
Theorem 3.8.1. If the limits limi∈I limj∈J F(i, j) and limj∈J limi∈I F(i, j) associated to a
diagram F : I × J →C exist in C, they are isomorphic and deﬁne the limit limI×J F.
To illustrate, suppose I = • ⇒• is the category that indexes equalizer diagrams and
J = • →• ←• is the category that indexes pullbacks. Then Theorem 3.8.1 says that the
limit of a diagram indexed by the category
I × J =
•


•

•

/ •

•
/ •
may be formed either by ﬁrst forming the two pullbacks and then taking the equalizer of
the induced maps between them, as displayed below-left
• 
 •
/
⌟


•


•⌟

/ •

•

/ •

•
/ •
•

/
⌟
• 


•


• 

/ • 

•

•

/ •

•
/ •
or by taking the equalizers of the three parallel pairs, and then forming the pullback of the
induced maps between them, as displayed above-right.
Proof of Theorem 3.8.1. By the Yoneda lemma, it suﬃces to prove that
C(X, lim
i∈I lim
j∈J F(i, j))  C(X, lim
(i,j)∈I×J F(i, j))  C(X, lim
j∈J lim
i∈I F(i, j)) .
By Theorem 3.4.6(i), covariant representable functors preserve limits:
C(X, lim
i∈I lim
j∈J F(i, j))  lim
i∈I C(X, lim
j∈J F(i, j))  lim
i∈I lim
j∈J C(X, F(i, j)) .
Arguing similarly for the other limits under consideration, the general statement reduces
to the case of proving that for any set-valued functor H : I × J →Set, in particular for the
functors C(X, F−), the limits
lim
i∈I lim
j∈J H(i, j) 
lim
(i, j)∈I×J H(i, j)  lim
j∈J lim
i∈I H(i, j)
are isomorphic. On account of the isomorphism of categories I × J  J × I, it suﬃces to
prove the left-hand isomorphism.
By Deﬁnition 3.2.3, the set lim(i, j)∈I×J H(i, j) is the set of cones with summit 1 over the
I × J-indexed diagram H. The set limi∈I limj∈J H(i, j) is the set of cones with summit 1 over
the I-indexed diagram lim j∈J H(−, j). Such a cone is comprised of legs
 
1
λi−→lim
j∈J H(i, j)
!
i∈I

112
3. LIMITS AND COLIMITS
that commute with the maps of limits limj∈J H(i, j) →limj∈J H(i′, j) determined by each
morphism i →i′ ∈I. The map of limits is deﬁned, as in Proposition 3.6.1, by the map
of J-indexed diagrams whose components H(i, j) →H(i′, j) are deﬁned by applying the
functor H(−, j) to the morphism in I.
By the universal property of the J-indexed limits, each cone leg λi : 1 →limj∈J H(i, j)
is itself determined by legs
 
1
λi, j
−−→H(i, j)
!
j∈J
,
which must commute with the maps H(i, j) →H(i, j′) induced by each j →j′. Thus, the
totality of this data is precisely a cone
 
1
λi, j
−−→H(i, j)
!
(i, j)∈I×J
over the I × J-indexed diagram H. Having demonstrated that their elements coincide, we
conclude that limi∈I limj∈J H(i, j)  lim(i, j)∈I×J H(i, j).
□
By Theorem 3.8.1 and its dual, limits commute with limits, and colimits commute with
colimits up to isomorphism. By the uniqueness statements in the universal properties for
limits and colimits, it follows that there exist natural isomorphisms
(3.8.2)
CI×J
limJ /
limI 

CI
limI

CI×J
colimJ /
colimI 

CI
colimI

CJ
limJ
/ C
CJ
colimJ
/ C
for any choices of limit and colimit functors.
The relationship between the construction of limits in one variable and colimits in
another is more subtle. These operations seldom commute. However, there is always a
canonical comparison morphism:
Lemma 3.8.3. For any bifunctor F : I × J →C so that the displayed limits and colimits
exist, there is a canonical map
κ: colim
i∈I
lim
j∈J F(i, j) →lim
j∈J colim
i∈I
F(i, j) .
To remember the direction of the canonical map, recall that colimits are deﬁned via
a “mapping out” universal property, while limits are deﬁned via a “mapping in” universal
property.
Proof. By the universal property of the colimit, the map κ may be deﬁned by specifying
components
 
lim
j∈J F(i, j)
κi−→lim
j∈J colim
i′∈I
F(i′, j)
!
i∈I
that deﬁne a cone under the I-indexed diagram limj∈J F(−, j). By the universal property of
the limit, each component κi in turn may be deﬁned by specifying components
 
lim
j′∈J F(i, j′)
κi,j
−−→colim
i′∈I
F(i′, j)
!
j∈J
that deﬁne a cone over the J-indexed diagram colimi∈I F(i, −). Deﬁne κi, j to be the composite
κi,j : lim
j′∈J F(i, j′)
πi,j
−−→F(i, j)
ιi, j
−−→colim
i′∈I
F(i′, j)

3.8. INTERACTIONS BETWEEN LIMITS AND COLIMITS
113
of the leg πi, j of the limit cone for F(i, −) and the leg ιi, j of the colimit cone for F(−, j).
Because the maps in the diagrams limj∈J F(−, j) and colimi∈I F(i, −) are induced by the
maps F(i, j) →F(i′, j′) obtained by applying F to morphisms i →i′ ∈I and j →j′ ∈J,
the κi,j assemble into a cone, deﬁning κi, and the κi assemble into a cone deﬁning κ.
□
Specializing to the case where C is the poset category (R, ≤), we have the following
immediate corollary:
Corollary 3.8.4. For any pair of sets X and Y and any function f : X × Y →R
sup
x∈X
inf
y∈Y
f(x, y) ≤inf
y∈Y
sup
x∈X
f(x, y)
whenever these inﬁma and suprema exist.
Proof. The presence of a map supX infY f →infY supX f in the poset category implies
the displayed inequality.
□
Remark 3.8.5. A direct proof of Corollary 3.8.4, as might be presented in a real analysis
course, is in fact the categorical proof used for Lemma 3.8.3. To show that supX infY f
is bounded above by some quantity it suﬃces—by what might be called the universal
property of the supremum—to show this is the case for each infY f(x, −).
Dually, to
show that infY supX f is bounded below, it suﬃces to demonstrate the inequality for each
supX f(−, y). So it suﬃces to prove that infY f(x, −) ≤supX f(−, y), which follows from
transitivity, i.e., composition, of the inequalities
inf
Y f(x, −) ≤f(x, y) ≤sup
X
f(−, y) .
Example 3.8.6. Consider the extended real line R = R∪{−∞, ∞} with the obvious extended
ordering −∞≤x ≤∞. As a category, R is complete and cocomplete: the limit of a function
f : X →R is its inﬁmum and the colimit is its supremum. These are ordinary real numbers
in the case where the range of f is bounded. The advantage of working in the extended
category R is that boundedness hypotheses can be ignored and all limits and colimits exist.
A function x: N →R deﬁnes a sequence (xn)n∈N of real numbers. The lim inf and lim
sup is deﬁned by regarding the sequence as a bifunctor N × N
+−→N
x−→R indexed by the
discrete category N × N:
lim inf
n→∞xn = sup
n≥0
inf
m≥n
xm = sup
n≥0
inf
m≥0
xn+m = colim
n
lim
m xn+m
lim sup
n→∞
xn = inf
n≥0
sup
m≥n
xm = inf
n≥0
sup
m≥0
xn+m = lim
n colim
m
xn+m
Having translated these analytic notions into categorical ones, Lemma 3.8.3 applies in the
form of an inequality:
lim inf
n→∞xn ≤lim sup
n→∞
xn .
The limit of this sequence exists if and only if this inequality is an equality.
In Set and related categories, there are certain classes of limits and colimits for which
the map deﬁned in Lemma 3.8.3 is invertible. Theorem 3.8.9 describes the most famous of
these results. A comprehensive survey can be found in [BJLS15].
Definition 3.8.7. A category J is ﬁltered if there is a cone under every ﬁnite17 diagram
in J.
17This deﬁnition can be generalized, replacing the smallest inﬁnite cardinal ω by a regular cardinal κ: a category
is κ-ﬁltered if there is a cone under any diagram with fewer than κ morphisms.

114
3. LIMITS AND COLIMITS
Example 3.8.8. The category ω (or, more generally, any ordinal category) and the category
with one object and one non-identity idempotent are ﬁltered. The parallel pair category,
the category • ←• →•, and discrete categories with more than one object are not.
Theorem 3.8.9. Filtered colimits commute with ﬁnite limits in Set.
The central observation used in this proof is the following. If F : J →Set is a diagram
indexed by a small ﬁltered category, then colim j∈J F j is the quotient of the coproduct
`
j∈J F j under the equivalence relation that identiﬁes x ∈F j with y ∈Fk if and only if
there are maps f : j →t and g: k →t in J so that F f(x) = Fg(y). More generally, any
ﬁnite collection of elements in `
j∈J F j that are identiﬁed in colim j∈J F j map to a common
element in some Ft.
Proof. Suppose I is a ﬁnite category and J is a small ﬁltered category. Our task is to
show that for any functor F : I × J →Set the canonical map
κ: colim
j∈J
lim
i∈I F(i, j) →lim
i∈I colim
j∈J
F(i, j)
is a bijection. By Deﬁnition 3.2.3, an element on the right-hand side is a cone λ with
summit 1 over colim j∈J F(i, j). As I is ﬁnite, such a cone is given by a ﬁnite collection
of elements λi ∈colim j∈J F(i, j) satisfying a ﬁnite number of compatibility conditions.
Since J is ﬁltered, there is some “suﬃciently large” t ∈J so that for each i ∈I the λi are
represented by elements λ′
i ∈F(i, t) and moreover these elements assemble into a cone
 
1
λ′
i−→F(i, t)
!
i∈I
.
This cone deﬁnes an element in limi∈I F(i, t) that represents an element on the left-hand side
mapping to our chosen element under κ. This proves that κ is surjective.
Now consider a pair of elements in the left-hand set, represented by cones

1
αi−→F(i, j)

i∈I
and

1
βi−→F(i, k)

i∈I
for some j, k ∈J. If these elements have a common image under κ, then for each i ∈I, there
must be some ti ∈J so that αi and βi have a common image in F(i, ti). As I is ﬁnite and J is
ﬁltered, there is some t ∈J so that for all i αi and βi have a common image in F(i, t). But
this says that α and β represent the same element on the left-hand side, proving injectivity
of κ.
□
The proof of Theorem 3.8.9 is not categorical; the argument relies upon an explicit
description of ﬁltered colimits in the category of sets.
However, for a large class of
categories that will be introduced in Chapter 5, the categories of models for an algebraic
theory, limits and ﬁltered colimits are created in the category of sets (see Theorem 5.6.5).
Hence ﬁnite limits and ﬁltered colimits commute in these contexts as well.
Exercises.
Exercise 3.8.i. Dualize the construction of Example 3.2.16 to express the splitting of an
idempotent as a coequalizer. Explain why these colimits (or limits) are preserved by any
functor and conclude that splittings of idempotents commute with both limits and colimits
of any shape.
Exercise 3.8.ii. Show that if G and H are groups whose orders are coprime, then BG-
indexed limits commute with BH-indexed colimits in Set. See [BJLS15] for more examples
of this ﬂavor.

CHAPTER 4
Adjunctions
It appears . . . that there exists a kind of duality
between the tensor product and the . . . functor
Hom . . .
Daniel Kan, “Adjoint functors” [Kan58]
Vector spaces are sets equipped with a binary operation v + w (addition of vectors) and
a unary multiplication c · v for each scalar c in the ground ﬁeld k, satisfying certain axioms.
The passage from a vector space to its underlying set of “vectors” is functorial, which is to
say there is a forgetful functor U : Vectk →Set that carries a linear transformation to its
underlying function.
A more interesting challenge is to reverse the direction of this translation and build a
vector space from a set S . Cardinality restrictions might prevent the direct use of S as the
set of vectors for a k-vector space, and even without this obstruction there is no natural way
to deﬁne vector addition in S . Instead, a more natural way to build a vector space is to let
the elements of S serve as a basis: vectors are then ﬁnite formal sums1 k1s1 + · · · + knsn
with ki ∈k, si ∈S , and n ≥0. This deﬁnes a vector space k[S ] whose dimension is equal
to the cardinality of S , called the free vector space on the set S . Moreover, as our use
of the adjective “natural” would suggest, this construction is functorial, deﬁning a functor
k[−]: Set →Vectk: a function f : S →T induces a linear map k[f]: k[S ] →k[T] deﬁned
on the basis elements in the evident way.
There are many instances of free constructions in mathematics. One can deﬁne the
free (abelian) group on a set, the free ring on a set or on an abelian group, the free module
on an abelian group, the free category on a directed graph, and so on. Sometimes there are
competing notions of universal constructions: Does the free graph on a set have a single
edge between every pair of vertices or none? Does the free topological space on a set have
as many open sets as possible or as few? Other times there are none: For instance, there
is no “free ﬁeld.” All of these constructions, and many others besides, are clariﬁed by the
concept of an adjunction, introduced by Kan [Kan58].
The universal property of the free vector space functor k[−]: Set →Vectk is expressed
by saying that it is left adjoint to the underlying set functor U : Vectk →Set: linear maps
k[S ] →V correspond naturally to functions S →U(V), which specify the image of the
basis vectors S ⊂k[S ]. By the Yoneda lemma, this universal property can be used to
deﬁne the action of the free vector space functor k[−] on maps. The forgetful functor
U : Vectk →Set has no right adjoint, so in this setting there are no competing notions of
free construction.
1A precise way to deﬁne what is meant by this informal phrase is to say that a ﬁnite formal sum is a ﬁnitely
supported function φ: S →k, corresponding to the expression P
s∈S φ(s)s. In particular, two ﬁnite sums are
considered to be identical when they diﬀer only up to reordering of terms, up to consolidating repeated instances
of the same term by adding their coeﬃcients, or up to inclusion or deletion of terms whose coeﬃcients are zero.
115

116
4. ADJUNCTIONS
In this chapter, we explore the general theory of adjoint functors, both in the abstract and
aided by a plethora of examples. Two equivalent deﬁnitions of an adjunction are presented
in §4.1 and §4.2, both of which oﬀer useful perspectives on the adjoint correspondence
between certain linear transformations and certain functions just mentioned. §4.3 explores
the forms of adjointness that arise between pairs of contravariant functors or between
(n + 1)-tuples of functors with n-variables. For instance, a two-variable adjunction encodes
the duality between the tensor product and hom bifunctors observed by Kan.
The basic calculus of adjunctions is developed in §4.4, with each result proven twice,
once using the Yoneda lemma and again via the techniques of “formal category theory,”
to illustrate two important methods of categorical reasoning. In §4.5, we prove what is
perhaps the most frequently applied result in category theory: that right adjoint functors
preserve limits while left adjoint functors preserve colimits. This explains why limits tend
to be easier to construct than the formally dual colimit notions.
In particular, continuity is a necessary condition for a functor to admit a left adjoint,
and cocontinuity is necessary for the existence of a right adjoint. In §4.6, we develop
suﬃcient conditions for a functor to have an adjoint, which can be used to construct the
missing adjoint functor in certain contexts.
4.1. Adjoint functors
Adjoint functors arise everywhere.
Saunders Mac Lane, Categories for the Working
Mathematician [ML98a]
An adjunction consists of an opposing pair of functors F : C ⇄D: G that enjoy a
special relationship to one another.
Definition 4.1.1 (adjunctions I). An adjunction consists of a pair of functors F : C →D
and G: D →C together with an isomorphism
(4.1.2)
D(Fc, d)  C(c,Gd)
for each c ∈C and d ∈D that is natural in both variables. Here F is left adjoint to G and
G is right adjoint to F. The morphisms
Fc
f ♯
/ d
↭
c
f ♭/ Gd
corresponding under the bijection (4.1.2) are adjunct or are transposes of each other.2
When C and D are locally small, the naturality statement in Deﬁnition 4.1.1 asserts
that the isomorphisms (4.1.2) assemble into a natural isomorphism between the functors
Cop × D
D(F−,−)(
⇓
C(−,G−)
6 Set .
2For now, we use “(−)♯” and “(−)♭” to decorate a pair of adjunct arrows, but in practice it tends to be most
convenient to use some symbol, such as “(−)†” or “ ˆ
(−)” to signal any adjoint transpose, with no preference as to
which of the adjunct pair is decorated in this way.

4.1. ADJOINT FUNCTORS
117
More explicitly, naturality in D says that for any morphism k: d →d′, the left-hand diagram
displayed below commutes in Set:
D(Fc, d)

/
k∗

C(c,Gd)
Gk∗

D(Fc, d′)

/ C(c,Gd′)
∀Fc
f ♯
−→d
⇝
c
f ♭/
(k· f ♯)♭
 
Gd
Gk

Gd′
which amounts to the assertion that for any f ♯: Fc →d and k: d →d′, the transpose of
k · f ♯: Fc →d′ is equal to the composite of f ♭: c →Gd with Gk: Gd →Gd′.
Dually, naturality in C says that for any morphism h: c′ →c, the left-hand diagram
displayed below commutes in Set:
D(Fc, d)

/
Fh∗

C(c,Gd)
h∗

D(Fc′, d)

/ C(c′,Gd)
∀Fc
f ♯
−→d
⇝
c′
(f ♯·Fh)♭
 
h
c
f ♭/ Gd
which amounts to the assertion that the transpose of f ♯· Fh: Fc′ →d is the composite of
h: c′ →c with f ♭: c →Gd.
The following lemma, whose proof is left as Exercise 4.1.i, provides an equivalent
expression of the naturality of a collection of isomorphisms (4.1.2) in a form that tends to
be convenient to use in proofs.
Lemma 4.1.3. Consider a pair of functors F : C ⇄D: G equipped with isomorphisms
D(Fc, d)  C(c,Gd) for all c ∈C and d ∈D. Naturality of this collection of isomorphisms
is equivalent to the assertion that for any morphisms with domains and codomains as
displayed below
(4.1.4)
Fc
f ♯
/
Fh

d
k

↭
c
h

f ♭
/ Gd
Gk

Fc′
g♯
/ d′
c′
g♭/ Gd′
the left-hand square commutes in D if and only if the right-hand transposed square commutes
in C.
Notation 4.1.5. A turnstyle “⊣” is used to designate that an opposing pair of functors are
adjoints: the expressions F ⊣G and G ⊢F and the diagrams
C
F
/
⊥
D
G
o
C
F
/
⊥
D
G
o
D
G
/
⊥
C
F
o
D
G
/
⊥
C
F
o
all assert that F : C →D is left adjoint to G: D →C.
The utility of this versatile notation is most apparent in contexts involving several
adjoint functors.
Example 4.1.6. The forgetful functor U : Top →Set admits both left and right adjoints.
The left adjoint constructs a topological space from a set S in such a way that continuous
maps from this space to another space T correspond naturally and bijectively to functions
S →U(T). The discrete topology on S has this universal property: writing D(S ) for this
discrete space, any function S →U(T) deﬁnes a continuous map D(S ) →T.

118
4. ADJUNCTIONS
Similarly, the right adjoint constructs a topological space from a set S in such a way
that continuous maps from T to this space correspond naturally and bijectively to functions
U(T) →S . The indiscrete topology on S has this universal property: writing I(S ) for this
indiscrete space, any function U(T) →S deﬁnes a continuous function T →I(S ). The
natural isomorphisms
Top(D(S ), T)  Set(S, U(T))
and
Set(U(T), S )  Top(T, I(S ))
assert that the discrete, forgetful, and indiscrete functors deﬁne a pair of adjunctions:
Top
U
/ Set .
D
⊥
|
I
⊥
b
An adjunction between preorders is called a (monotone) Galois connection. Recall,
from Exercise 1.3.ii, that functors F : A →B and G: B →A between preorders A and B
are simply order-preserving functions. An adjunction F ⊣G asserts that
Fa ≤b
if and only if
a ≤Gb
for all a ∈A and b ∈B. In this context, F is the lower adjoint and G is the upper adjoint.
Example 4.1.7. The inclusion of posets Z ,→R, with the usual ordering ≤, has both left
and right adjoints, namely, the ceiling and ﬂoor functions. For any integer n and real number
r, n ≤r if and only if n ≤⌊r⌋, where ⌊r⌋denotes the greatest integer less than or equal to r.
This function is order-preserving, deﬁning a functor ⌊−⌋: R →Z that is right adjoint to the
inclusion Z ,→R. Dually, r ≤n if and only if ⌈r⌉≤n, and this order-preserving function
deﬁnes a functor ⌈−⌉: R →Z that is left adjoint to the inclusion.
Z 
/ R .
⌈−⌉
⊥

⌊−⌋
⊥
]
Example 4.1.8. Consider a function f : A →B between sets. The subsets of A and subsets
of B form posets, PA and PB, ordered by inclusion. The map f induces direct image and
inverse image functors f∗: PA →PB and f −1 : PB →PA. The inverse image is right
adjoint to the direct image: for A′ ⊂A and B′ ⊂B, f(A′) ⊂B′ if and only if A′ ⊂f −1(B′).
The inverse image functor has a further right adjoint f! that carries a subset A′ ⊂A to
the subset of elements of B whose ﬁbers lie entirely in A′. With this deﬁnition, B′ ⊂f!(A′)
if and only if f −1(B′) ⊂A′. These functors deﬁne a pair of adjunctions:
PB
f −1 / PA .
f∗
⊥
}
f!
⊥
`
Example 4.1.9. A propositional function is a function P: X →Ω= {⊥, ⊤}, which we
interpret as declaring, for each x ∈X, whether P(x) is true or false. The set ΩX is then the
set of propositional functions on X. The set Ωis given the partial order ⊥≤⊤from which
ΩX inherits a pointwise-deﬁned order: P ≤Q if and only if P(x) ≤Q(x) for all x ∈X,
which is the case if and only if P implies Q.
The logical operations of universal and existential quantiﬁcation deﬁne functors
∀X, ∃X : ΩX ⇒Ω

4.1. ADJOINT FUNCTORS
119
in the expected way: ∀XP = ⊤if and only if P(x) = ⊤for all x ∈X, and ∃XP = ⊤if and
only if there exists x ∈X with P(x) = ⊤. There is also a constant “dummy variable” functor
∆X : Ω→ΩX, and one can verify that these functors deﬁne a triple of adjoints:
Ω
∆X / ΩX .
∃X
⊥
~
∀X
⊥
_
See [Awo96] for more.
Example 4.1.10. There is a large and very important family of “free ⊣forgetful” adjunctions
A
U
/
⊥
S ,
F
o
with the forgetful functor U deﬁning the right adjoint and the free functor F deﬁning the
left adjoint. If one can construct a universal object of type A on an object of type S, and
this construction deﬁnes a left adjoint to a forgetful functor U : A →S, then the term
“free” is used in place of “universal” to convey this particular relationship. The reason why
left adjoints to forgetful functors are more common than right adjoints has to do with the
handedness of the universal properties that one meets in practice. “Cofree” constructions,
which deﬁne right adjoints to some forgetful functor, are somehow less common.
The following forgetful functors admit left adjoints, deﬁning “free” constructions.
(i) U : Set∗→Set. The left adjoint carries a set X to the pointed set X+ B X ⊔{X},
with a freely-adjoined basepoint.
(ii) U : Monoid →Set. The free monoid on a set X is the set `
n≥0 X×n of ﬁnite lists of
elements of X, including the empty list.
(iii) U : Ring →Ab, forgetting the multiplicative structure. The free ring on an abelian
group A is
L
n≥0 A⊗n.
Exercise 5.1.i explores the connection between Examples (ii) and (iii): as observed in
Deﬁnition 1.6.3, rings are monoids in the category of abelian groups.
(iv) U : Ab →Set. The free abelian group on a set X is the set Z[X] B
L
X Z of ﬁnite
formal sums of elements of X with integer coeﬃcients. More generally:
(v) U : ModR →Set. The free R-module on a set X is R[X] B
L
X R. A special case
deﬁnes the free k-vector space on a set, deﬁning the left adjoint to U : Vectk →Set
considered in the introduction to this chapter.
(vi) U : Ring →Set. By composing the left adjoints to the forgetful functors Ring →
Ab →Set, the free ring on a set X is the free monoid on the free abelian group on
the set:
L
n≥0(
L
X Z)⊗n.
(vii) (−)× : Ring →Group, carrying a ring to its group of units. The free ring on a group
G is the group ring Z[G] =
L
G Z, whose elements are ﬁnite formal sums of group
elements, using the group operation to deﬁne the bilinear multiplication law.
(viii) U : Group →Set. The free group on a set is described in more detail in Examples
4.2.4 and 4.6.6.
(ix) Ab ,→CMonoid, the inclusion of abelian groups into the category of commutative
monoids. The left adjoint Gr carries a commutative monoid (M, +, 0) to its group
completion, also called the Grothendieck group: as a set Gr(M, +, 0) is the quotient
of M × M by the relation (a, b) ≃(a′, b′) if and only if there is some c ∈M so that
a + b′ + c = a′ + b + c.

120
4. ADJUNCTIONS
(x) Group ,→Monoid. The left adjoint constructs the “group completion” of a monoid
as a quotient of the free group on its underlying set modulo relations arising from the
multiplication and unit in the monoid structure.
(xi) The restriction of scalars functor φ∗: ModS →ModR associated to a ring homo-
morphism φ: R →S . Its left adjoint, given by S ⊗R −: ModR →ModS , is called
extension of scalars.
(xii) U : ModR →Ab, forgetting the scalar multiplication. This is a special case of the
previous example induced from the unique (unital) ring homomorphism Z →R.
(xiii) φ∗: SetBG →SetBH, another restriction of scalars functor induced from a group
homomorphism φ: H →G. The left adjoint is also called induction and can be
described analogously to (xi).
Each of these free ⊣forgetful adjunctions is an instance of a monadic adjunction, a
special class of adjoint functors that is the subject of §5.5.
Example 4.1.11 (Frobenius reciprocity). Example 4.1.10(xiii) can be generalized: Exam-
ple 6.2.8 proves that for any complete and cocomplete category C and any group homo-
morphism φ: H →G, the restriction functor φ∗: CBG →CBH admits both left and right
adjoints. These are most commonly considered for subgroup inclusions H ⊂G, in which
case the left adjoint is called induction and the right adjoint is called coinduction:
CBG
resG
H / CBH
coinG
H
\
indG
H
 ⊥
⊥
Taking C = Vectk, the adjunction indG
H ⊣resG
H between the category VectBH
k
of H-
representations and the category of VectBG
k
of G-representations is referred to in the repre-
sentation theory literature as Frobenius reciprocity.
Example 4.1.12. None of the functors
Field
U−→Ring,
Field
U−→Ab,
Field
(−)×
−−−→Ab,
Field
U−→Set
that forget algebraic structure on ﬁelds admit left or right adjoints. To see that no left
adjoint is possible, note that there exist maps in the target categories from Z to ﬁelds
of any characteristic. As there are no ﬁeld homomorphisms between ﬁelds of diﬀering
characteristic, it is not possible to deﬁne the value of a hypothetical left adjoint on Z. A
similar argument can be used to show that no right adjoints to these functors exist.
Example 4.1.13. The forgetful functor U : Cat →DirGraph admits a left adjoint F,
deﬁning the free category on a directed graph. A directed graph G consists of a set V of
vertices, a set E of edges, and two functions s, t: E ⇒V deﬁning the source and target of
each directed edge. The free category on G has V as its set of objects. The set of morphisms
consists of identities for each vertex together with ﬁnite “paths” of edges. Composition is
deﬁned by concatenation of paths.
The adjunction supplies a natural bijection between functors F(G) →C and morphisms
G →U(C) of directed graphs. A functor F(G) →C, or equally a directed graph morphism
G →U(C), deﬁnes a diagram in C with no commutativity requirements, since directed
graphs do not encode composites. The data of such a diagram is uniquely determined by the
images of the vertices and edges in the directed graph G. These edges form atomic arrows
in the category F(G), admitting no non-trivial factorizations. For instance, as described in

4.1. ADJOINT FUNCTORS
121
Example 1.1.4(iv), the category ω is free on the directed graph whose vertices are indexed
by natural numbers and with edges n →n + 1. On account of the adjunction, an ω-indexed
diagram is deﬁned by specifying only the images of the atomic arrows, from an ordinal to
its successor.
Example 4.1.14. Let n + 1 denote the ordinal category, freely generated by the directed
graph 0 →1 →2 →· · · →n.
For each 0 ≤i ≤n, there is an injective functor
di : n →n + 1 where i ∈n + 1 is the unique object missing from the image. For each
0 ≤i < n, there is also a surjective functor si : n + 1 →n for which i ∈n is the unique
object with two preimages. These functors deﬁne a sequence of 2n + 1 adjoints:
n
dn
/
⊥
⊥
⊥
⊥...
⊥
⊥
⊥
dn−1
/
d0
/
d1
/
n + 1
sn−1
o
sn−2
o
s0
o
s1
o
proving that arbitrarily long ﬁnite sequences of adjoint functors exist.
Example 4.1.15. The inclusion Groupoid ,→Cat admits both left and right adjoints
Groupoid  
/ Cat
⊥
y
⊥
e
The right adjoint carries a category to its maximal subgroupoid considered in Lemma
1.1.13: since functors preserve isomorphisms, the image of a functor G →C whose
domain is a groupoid necessarily factors (uniquely) through the maximal subgroupoid of
C.
The left adjoint “formally inverts” the morphisms of a category, constructing the
corresponding “category of fractions.” The category of fractions for C can be constructed
as a quotient of the free category on the directed graph obtained by gluing the directed graph
underlying C to the directed graph underlying Cop along the common discrete subcategory
ob C. Objects in the category of fractions are objects of C and morphisms are ﬁnite zig-zags
of morphisms in C, subject to relations that, for instance, equate the zig-zags
a
f
/ b
a
f
o
b
a
f
o
f
/ b
with identities. More details on this construction can be found in [Bor94a, §5.2].
Exercises.
Exercise 4.1.i. Show that functors F : C →D and G: D →C and bijections D(Fc, d) 
C(c,Gd) for each c ∈C and d ∈D deﬁne an adjunction if and only if these bijections induce
a bijection between commutative squares (4.1.4). That is, prove Lemma 4.1.3.
Exercise 4.1.ii. Deﬁne left and right adjoints to
(i) ob: Cat →Set,
(ii) Vert: Graph →Set, and
(iii) Vert: DirGraph →Set.

122
4. ADJUNCTIONS
Exercise 4.1.iii. Show that any triple of adjoint functors
C
U
/ D
R
⊥
^
L
⊥
~
gives rise to a canonical adjunction LU ⊣RU between the induced endofunctors of C.
Exercise 4.1.iv. Prove that the construction of the free R-module on a set described in
Example 4.1.10(v) is functorial.3
Exercise 4.1.v. Use Lemma 4.1.3 to show that if F : C ⇄D: G are adjoint functors, with
F ⊣G, then the comma categories F ↓D and C ↓G, introduced in Exercise 1.3.vi, are
isomorphic, via an isomorphism that commutes with the forgetful functors to C × D.
4.2. The unit and counit as universal arrows
Recall that an adjunction is comprised of an opposing pair of functors together with
natural isomorphisms
(4.2.1)
C
F
/
⊥
D
G
o
D(Fc, d)  C(c,Gd) .
Fixing c ∈C, this natural isomorphism asserts that the object Fc ∈D represents the functor
C(c,G−): D →Set. By the Yoneda lemma, the natural isomorphism D(Fc, −)  C(c,G−)
is determined by an element of C(c,GFc), the transpose of 1Fc, denoted by ηc.
The
naturality of adjoint transposition implies that the maps ηc assemble into the components
of a natural transformation η: 1C ⇒GF:
Lemma 4.2.2. Given an adjunction F ⊣G, there is a natural transformation η: 1C ⇒GF,
called the unit of the adjunction, whose component ηc : c →GFc at c is deﬁned to be the
transpose of the identity morphism 1Fc.
Proof. To prove that η is natural, we must show that the left-hand square commutes
for every f : c →c′ in C.
c
f

ηc
/ GFc
GF f

↭
Fc
F f

1Fc
/ Fc
F f

c′
ηc′
/ GFc′
Fc′
1Fc′ / Fc′
This follows from Lemma 4.1.3 and the obvious commutativity of the right-hand transposed
square.
□
Dually, ﬁxing d ∈D the deﬁning natural isomorphism (4.2.1) of an adjunction F ⊣G
says that the object Gd ∈C represents the functor D(F−, d): Cop →Set. By the Yoneda
lemma, the natural isomorphism C(−,Gd)  D(F−, d) is determined by an element of
D(FGd, d), the transpose of 1Gd, denoted by ϵd. By the dual of Lemma 4.2.2, the maps ϵd
assemble into the components of a natural transformation ϵ : FG ⇒1D:
3This exercise intends to ask for an explicit description of the homomorphism between two formally deﬁned
ﬁnite formal sums associated to a function between their generating sets. But the reader who is disinclined to think
about explicit constructions could instead use the Yoneda lemma to prove functoriality. (Hint: See Proposition
4.3.4.)

4.2. THE UNIT AND COUNIT AS UNIVERSAL ARROWS
123
Lemma 4.2.3. Given an adjunction F ⊣G, there is a natural transformation ϵ : FG ⇒1D,
called the counit of the adjunction, whose component ϵd : FGd →d at d is deﬁned to be
the transpose of the identity morphism 1Gd.
Example 4.2.4. The left adjoint F to the forgetful functor U : Group →Set deﬁnes the
free group on a set S . Elements of the group F(S ) are ﬁnite “words” whose “letters” are
elements s of S and formal “inverses” s−1, modulo some evident relations. The empty
word serves as the identity element and multiplication is by concatenation; the relations, in
particular, identify ss−1 and s−1s with the empty word.
The component of the unit of the adjunction at a set S is the function ηS : S →UF(S )
that sends an element s ∈S to the corresponding singleton word. The component of the
counit of the adjunction at a group G is the group homomorphism ϵG : FU(G) →G that
sends a word, whose letters are elements of the group G and formal inverses, to the product
of those symbols, interpreted using the multiplication, inverses, and identity present in the
group G.
A similar description, with the unit deﬁning some sort of “singleton” map and the
counit deﬁning some form of “evaluation” homomorphism, can be given for many of the
other adjunctions listed in Example 4.1.10.
In the terminology of Deﬁnition 2.3.3, the components of the unit and the counit deﬁne
universal elements characterizing the natural isomorphisms
Group(F(S ), −)  Set(S, U(−))
↭
ηS ∈Set(S, UF(S ))
Set(−, U(G))  Group(F(−),G)
↭
ϵG ∈Group(FU(G),G)
By Proposition 2.4.8, the components of the unit and the counit enjoy certain dual universal
properties to be explored in Exercise 4.2.iv, which will feature prominently in the arguments
of §4.6.
Lemmas 4.2.2 and 4.2.3 prove that any adjunction has a unit and a counit. Conversely,
if F : C ⇄D: G are opposing functors equipped with natural transformations η: 1C ⇒GF
and ϵ : FG ⇒1D satisfying a dual pair of conditions, then this data can be used to deﬁne a
natural bijection D(Fc, d)  C(c,Gd), exhibiting F and G as adjoint functors. That is, the
notion of adjunction may be redeﬁned as follows:
Definition 4.2.5 (adjunction II). An adjunction consists of an opposing pair of functors
F : C ⇄D: G, together with natural transformations η: 1C ⇒GF and ϵ : FG ⇒1D that
satisfy the triangle identities:
F
Fη +3
1F
&
FGF
ϵF

G
ηG +3
1G
&
GFG
Gϵ

F
G
The left-hand triangle asserts that a certain diagram commutes in DC, while the right-
hand triangle asserts that the dual diagram commutes in CD. The natural transformations
Fη, ϵF, ηG, and Gϵ are deﬁned by whiskering; recall Remark 1.7.6. Their components are
deﬁned just as the notation would suggest: Gϵd is G(ϵd), while ϵFc is ϵFc.
Together the triangle identities assert that “the counit is a left inverse of the unit
modulo translation.” They cannot literally be inverses because the components of the unit
ηc : c →GFc lie in C while the components of the counit ϵd : FGd →d lie in D, and
such morphisms are not composable. But if we apply F to the unit, we obtain a morphism
Fηc : Fc →FGFc in D whose left inverse is ϵFc. And if we apply G to the counit, we
obtain a morphism Gϵd : GFGd →Gd whose right inverse is ηGd.

124
4. ADJUNCTIONS
Proposition 4.2.6. Given a pair of functors F : C ⇄D: G, there exists a natural iso-
morphism D(Fc, d)  C(c,Gd) if and only if there exists a pair of natural transformations
η: 1C ⇒GF and ϵ : FG ⇒1D satisfying the triangle identities.
Proposition 4.2.6 asserts that the deﬁnitions of adjunction given in 4.1.1 and in 4.2.5
are equivalent.
Proof. The dual Lemmas 4.2.2 and 4.2.3 demonstrate that a natural isomorphism
D(Fc, d)  C(c,Gd) gives rise to a pair of natural transformations η: 1C ⇒GF and
ϵ : FG ⇒1D, whose components are transposes of identity morphisms. It remains to
demonstrate the triangle identities. By Lemma 4.1.3, the upper-left-hand and lower-right-
hand squares
Fc
Fηc

1Fc
/ Fc
1Fc

↭
c
ηc

ηc
/ GFc
1GFc

FGFc
ϵFc
/ Fc
GFc
1GFc
/ GFc
FGd
1FGd

1FGd / FGd
ϵd

↭
Gd
ηGd
/
1Gd

GFGd
Gϵd

FGd
ϵd
/ d
Gd
1Gd
/ Gd
commute because the transposed squares manifestly do. By Lemma 1.7.1, which deﬁnes
vertical composition for natural transformations, this is what we wanted to show.
Conversely, the unit and counit can be used to deﬁne a natural bijection D(Fc, d) 
C(c,Gd).
Given f ♯: Fc →d and g♭: c →Gd, their adjuncts are deﬁned to be the
composites:
f ♭B c
ηc
/ GFc
G f ♯/ Gd
g♯B Fc
Fg♭/ FGd
ϵd
/ d
The triangle identities imply that these operations are inverses.
The transpose of the
transpose of f ♯: Fc →d is equal to the top composite
Fc
1Fc
,
Fηc / FGFc
FG f ♯/
ϵFc
$
FGd
ϵd
/ d
Fc
f ♯
=
By naturality of ϵ and one triangle identity, this returns the original f ♯: Fc →d. The
dual diagram chase, left as an exercise for the reader, demonstrates that the transpose of the
transpose of g♭: c →Gd returns this map.
□
Remark 4.2.7. Proposition 4.2.6 reveals that the data of a fully-speciﬁed adjunction can
be presented in two equivalent forms: it consists of a pair of functors F : C ⇄D: G
together with
(i) a natural family of isomorphisms D(Fc, d)  C(c,Gd) for all c ∈C and d ∈D,
or, equivalently,
(ii) natural transformations η: 1C ⇒GF and ϵ : FG ⇒1D so that Gϵ · ηG = 1G and
ϵF · Fη = 1F.

4.2. THE UNIT AND COUNIT AS UNIVERSAL ARROWS
125
Indeed, either of the unit and the counit alone, satisfying an appropriate universal property,
suﬃces to determine a fully speciﬁed adjunction: (i) and (ii) are each equivalent to either
of
(iii) a natural transformation η: 1C ⇒GF so that the function
D(Fc, d)
G
/ C(GFc,Gd)
(ηc)∗/ C(c,Gd)
deﬁnes an isomorphism for all c ∈C and d ∈D,
or, equivalently, and dually,
(iv) a natural transformation ϵ : FG ⇒1D so that the function
C(c,Gd)
F
/ D(Fc, FGd)
(ϵd)∗/ D(Fc, d)
deﬁnes an isomorphism for all c ∈C and d ∈D.
In particular, a morphism of adjunctions, introduced in Exercise 4.2.v, is deﬁned to be a
morphism of fully-speciﬁed adjunctions. On account of the equivalence between (i), (ii),
(iii), and (iv), this notion can be presented in several equivalent ways.
The mere presence of unit and counit transformations establishes the following ﬁxed
point formulae for a Galois connection between posets.
Corollary 4.2.8. If A and B are posets and F : A →B and G: B →A form a Galois
connection, with F ⊣G, then F and G satisfy the following ﬁxed point formulae
FGF = F
and
GFG = G .
Proof. By the triangle identities F(a) ≤FGF(a) ≤F(a) for all a ∈A, whence
F = FGF. The other formula is dual.
□
For instance, consider the direct-image ⊣inverse-image adjunction
PB
f −1 /
⊥
PA
f∗
o
induced by a function f : A →B deﬁned in Example 4.1.8. For generic subsets X ⊂A and
Y ⊂B, neither of the inclusions
X ⊂f −1( f(X))
or
f( f −1(Y)) ⊂Y
need be equalities but nonetheless
f(X) = f( f −1(f(X)))
and
f −1( f( f −1(Y))) = f −1(Y) .
Exercises.
Exercise 4.2.i. Prove that any pair of adjoint functors F : C ⇄D: G restrict to deﬁne an
equivalence between the full subcategories spanned by those objects c ∈C and d ∈D for
which the components of the unit ηc and of the counit ϵd, respectively, are isomorphisms.
Exercise 4.2.ii. Explain each step needed to convert the statement of Lemma 4.2.2 into
the statement of the dual Lemma 4.2.3.
Exercise 4.2.iii. Pick your favorite forgetful functor from Example 4.1.10 and prove that
it is a right adjoint by deﬁning its left adjoint, the unit, and the counit, and demonstrating
that the triangle identities hold.
Exercise 4.2.iv. Each component of the counit of an adjunction is a terminal object in
some category. What category?

126
4. ADJUNCTIONS
Exercise 4.2.v. A morphism of adjunctions from F ⊣G to F′ ⊣G′ is comprised of a
pair of functors
C
H
/
F

⊣
C′
F′

⊣
D
G
O
K
/ D′
G′
O
so that the square with the left adjoints and the square with the right adjoints both commute
(i.e., KF = F′H and HG = G′K) and satisfying one additional condition, which takes a
number of equivalent forms. Prove that the following are equivalent:
(i) Hη = η′H, where η and η′ denote the respective units of the adjunctions.
(ii) Kϵ = ϵ′K, where ϵ and ϵ′ denote the respective counits of the adjunctions.
(iii) Transposition across the adjunctions commutes with application of the functors H
and K, i.e., for every c ∈C and d ∈D, the diagram
D(Fc, d)

/
K 
C(c,Gd)
H

D′(KFc, Kd)
C′(Hc, HGd)
D′(F′Hc, Kd)
 / C′(Hc,G′Kd)
commutes.
4.3. Contravariant and multivariable adjoint functors
Kan’s original exploration of adjoint functors also considered adjoint relationships
involving functors that are contravariant or have more than one variable [Kan58]. Indeed,
these examples provided the central motivation for Kan’s discovery, at least according to an
apocryphal account of a question he posed to Eilenberg in a homological algebra seminar
at Columbia University [Mar09, §4.2]:
kan: You have explained how the tensor product can be deﬁned
in terms of the hom functor. Can the hom instead be deﬁned
in terms of the tensor product?
eilenberg: No, of course not. That’s absurd.
In fact, Kan’s intuition was correct. By the Yoneda lemma, any adjoint functor determines
its adjoints up to natural isomorphism. Example 4.3.11 explains how to deﬁne the hom
bifunctor from the tensor product.
Contravariant adjoint functors require little special consideration, arising simply as an
application of the principle of duality. Deﬁnition 4.1.1 can be dualized in three ways, by
replacing C, D, or both C and D by their opposite categories. The latter dualization recovers
the original notion of adjunction, with G: Dop →Cop left adjoint to F : Cop →Dop if and
only if F ⊣G. In particular, any theorem about left adjoints has a dual theorem about right
adjoints, which is a very useful duality principle for adjunctions. The other two dualizations
lead to new types of adjoint functors.
Definition 4.3.1. A pair of contravariant functors F : Cop →D and G: Dop →C are
mutually left adjoint if there exists a natural isomorphism
D(Fc, d)  C(Gd, c) ,

4.3. CONTRAVARIANT AND MULTIVARIABLE ADJOINT FUNCTORS
127
or mutually right adjoint if there exists a natural isomorphism
D(d, Fc)  C(c,Gd) .
Dualizing Deﬁnition 4.2.5, a pair of mutual left adjoints F : Cop →D and G: Dop →C
come equipped with a pair of “counit” natural transformations GF ⇒1C and FG ⇒1D,
while a pair of mutual right adjoints F : Cop →D and G: Dop →C come equipped with
a pair of “unit” natural transformations 1C ⇒GF and 1D ⇒FG. The formulation of the
triangle identities in each case is left to Exercise 4.3.i.
Mutual right adjoints between preorders form what is sometimes called an antitone
Galois connection.
Example 4.3.2. For a ﬁxed natural number n and algebraically closed ﬁeld k, consider the
sets of elements in the polynomial ring k[x1, . . . , xn] and in the vector space kn. There are
contravariant functors
P(k[x1, . . . , xn])op V−→P(kn)
and
P(kn)op I−→P(k[x1, . . . , xn])
between the posets of subsets of these sets deﬁned for S ⊂k[x1, . . . , xn] and T ⊂kn by:
V(S ) B (t1, . . . , tn) ∈kn  f(t1, . . . , tn) = 0, ∀f ∈S 	
I(T) B f ∈k[x1, . . . , xn]
 f(t1, . . . , tn) = 0, ∀(t1, . . . , tn) ∈T	 ,
and these deﬁne mutual right adjoints because
T ⊂V(S )
if and only if
S ⊂I(T) .
This Galois connection is a starting point of modern algebraic geometry.
The unit and counit encode relations
T ⊂V(I(T))
and
S ⊂I(V(S )) .
A set of points T ⊂kn deﬁnes a ﬁxed point T = V(I(T)) if and only if T is closed in the
Zariski topology on kn = Spec(k[x1, . . . , xn]), introduced in Example 1.3.7(iv). A set of
polynomials S ⊂k[x1, . . . , xn] deﬁnes a ﬁxed point S = I(V(S )) if and only if S deﬁnes a
radical ideal of k[x1, . . . , xn]; this is Hilbert’s Nullstellensatz. Exercise 4.2.i now implies
that the poset of Zariski closed subsets of kn is isomorphic to the opposite of the poset of
radical ideals of k[x1, . . . , xn].
Example 4.3.3. Let Axiomσ be a set of axioms, i.e., sentences in a ﬁxed ﬁrst-order
language whose signature σ, speciﬁes a list of function, constant, and relation symbols to
be used with the standard logical symbols. Let Structσ be a set of σ-structures, i.e., sets
with interpretations of the given constant, relation, and function symbols. For instance, the
language of the natural numbers has a constant symbol “0,” a binary function symbol “+,”
and a binary relation symbol “≤.” A structure for this language is any set with a speciﬁed
constant, binary function, and binary relation. Axioms include sentences such as
∀x, y, z, ((x ≤y) ∧(y ≤z)) →(x ≤z)
or
∀x, x + 0 = x ,
asserting transitivity of the relation “≤” and that the constant “0” serves as a unit for the
binary function “+.”
Given a set of σ-structures M and a set of axioms A, we write M ⊨A if each of the
axioms in A is satisﬁed by—meaning “is true in”—each of the σ-structures in M. For
instance, the ﬁrst displayed sentence is satisﬁed by a structure if and only if its interpretation
of the relation “≤” is transitive.

128
4. ADJUNCTIONS
Form the poset categories P(Axiomσ) and P(Structσ) ordered by inclusion. There are
contravariant functors
P(Axiomσ)op True in
−−−−−→P(Structσ)
and
P(Structσ)op Satisfying
−−−−−−−→P(Axiomσ)
which send a set of axioms to the set of σ-structures, called models, that satisfy those
axioms and send a set of σ-structures to the set of axioms that they satisfy. These are
mutual right adjoints, forming what is called the Galois connection between syntax and
semantics [Smi].
Before turning our attention to multivariable functors, we make a useful observation
that applies equally to ordinary adjunctions:
Proposition 4.3.4. Consider a functor F : A →B so that for each b ∈B there exists an
object Gb ∈A together with an isomorphism
(4.3.5)
B(Fa, b)  A(a,Gb),
natural in a ∈A .
Then there exists a unique way to extend the assignment G: ob B →ob A to a functor
G: B →A so that the family of isomorphisms (4.3.5) is also natural in b ∈B.
In other words, if F : A →B is a functor admitting representations for each functor
B(F−, b): Aop →Set
for each b ∈B, then this data assembles into a right adjoint F ⊣G.
Proof. Naturality of (4.3.5) in f : b →b′ demands that the function
A(a,Gb)  B(Fa, b)
f∗−→B(Fa, b′)  A(a,Gb′)
equals post-composition by the yet-to-be-deﬁned morphism G f : Gb →Gb′. This compos-
ite function deﬁnes a natural transformation A(−,Gb) ⇒A(−,Gb′), which by the Yoneda
lemma must equal post-composition by a unique morphism G f : Gb →Gb′ in A. Unique-
ness of this deﬁnition implies that the assignment G: mor B →mor A is functorial, as we
saw in the proof of Theorem 1.5.9.4
□
The argument used to prove Proposition 4.3.4 can be extended to functors of many
variables.
Proposition 4.3.6. Suppose that F : A×B →C is a bifunctor so that for each object a ∈A,
the induced functor F(a, −): B →C admits a right adjoint Ga : C →B. Then:
(i) These right adjoints assemble into a unique bifunctor G: Aop × C →B, deﬁned so
that G(a, c) = Ga(c) and so that the isomorphisms
C(F(a, b), c)  B(b,G(a, c))
are natural in all three variables.
If furthermore for each b ∈B, the induced functor F(−, b): A →C admits a right adjoint
Hb : C →A, then:
4More concisely, G is deﬁned to be the unique restriction of the functor
B
B(F−,−)
/
G


SetAop
A.
y
=
along the Yoneda embedding so that the triangle commutes up to the speciﬁed natural isomorphisms (4.3.5).

4.3. CONTRAVARIANT AND MULTIVARIABLE ADJOINT FUNCTORS
129
(ii) There is a unique bifunctor H : Bop × C →A deﬁned so that H(b, c) = Hb(c) and the
isomorphisms
C(F(a, b), c)  B(b,G(a, c))  A(a, H(b, c))
are natural in all three variables.
(iii) In this case, for each c ∈C, the functors G(−, c): Aop →B and H(−, c): Bop →A
are mutual right adjoints.
Proof. Exercise 4.3.ii.
□
Definition 4.3.7. A triple of bifunctors
A × B
F−→C , Aop × C
G−→B , Bop × C
H−→A
equipped with a natural isomorphism
C(F(a, b), c)  B(b,G(a, c))  A(a, H(b, c))
deﬁnes a two-variable adjunction.
Particularly, when F : C×C →C deﬁnes some sort of monoidal product, its pointwise-
deﬁned right adjoints G and H are called its left and right closures, respectively. When
these are isomorphic, the bifunctor F is called closed.
Example 4.3.8. The product bifunctor
Set × Set
×−→Set
is closed: the operation called currying in computer science deﬁnes a family of natural
isomorphisms
{A × B
f−→C}  {A
f−→CB}  {B
f−→CA} .
Thus, the product and exponential bifunctors
Set × Set
×−→Set,
Setop × Set
(−)(−)
−−−−→Set,
Setop × Set
(−)(−)
−−−−→Set
deﬁne a two-variable adjunction.
Definition 4.3.9. A cartesian closed category is a category C with ﬁnite products in
which the product bifunctor
C × C
×−→C
is closed.
In addition to Set, the categories Fin, Cat, SetBG, and, more generally, SetC are
cartesian closed; this was proven for Cat in Exercise 1.7.vii.
Example 4.3.10 (a convenient category of spaces). The category Top is not cartesian
closed. However, a famous paper of Steenrod proves that there exists a convenient category
of topological spaces that is complete, cocomplete, cartesian closed, and suﬃciently large
so as to contain the CW complexes [Ste67]. Steenrod’s convenient category is a subcategory
of the category Haus of Hausdorﬀspaces and continuous functions. Previous researchers
had argued that a “convenient category of spaces” satisfying Steenrod’s list of conditions
did not exist, but Steenrod notes:
The arguments are based on a blind adherence to the customary
deﬁnitions of the standard operations. These deﬁnitions are suitable
for the category of Hausdorﬀspaces, but they need not be for a
subcategory. The categorical viewpoint enables us to defrost these
deﬁnitions and bend them a bit.

130
4. ADJUNCTIONS
What he means is that the “product” on a yet-to-be-deﬁned subcategory cgHaus should be
the categorical product of Deﬁnition 3.1.9, which, as it turns out, is not preserved by the
full inclusion cgHaus ,→Haus.
Objects in cgHaus are compactly generated Hausdorﬀspaces: Hausdorﬀspaces X
with the property that any subset A ⊂X that intersects each compact subset K ⊂X in a
closed subset A∩K is itself closed in X. The inclusion cgHaus ,→Haus has a right adjoint
k: Haus →cgHaus called k-iﬁcation: the space k(X) reﬁnes the topology on X by adding
to the collection of closed sets those subsets A ⊂X whose intersections with all compact
subsets K are closed.
By Exercise 4.6.ii and the dual of Proposition 4.5.15, the presence of this adjoint
implies that cgHaus is complete and cocomplete. The product on cgHaus is the k-iﬁcation
of the product on Haus; this latter product is preserved by the inclusion Haus ,→Top. The
pointwise right adjoint is given by the following construction of function spaces Map(X, Y):
the underlying set of Map(X, Y) is the set of continuous maps X →Y, and the topology is
the k-iﬁcation of the compact-open topology. See [Ste67] for a proof.
Other categories admit a hom bifunctor that is not necessarily right adjoint to the
cartesian product.
The most famous of these are the “tensor ⊣hom” adjunctions that
inspired Kan:
Example 4.3.11. Consider the hom bifunctor
Abop × Ab
Hom
−−−→Ab ,
where Hom(A, B) is the group of homomorphisms A →B with addition deﬁned pointwise
in the abelian group B.5 Fixing the contravariant variable, there is an adjunction
(4.3.12)
Ab
A⊗Z−/
⊥
Ab
Hom(A,−)
o
Ab(A ⊗Z B,C)  Ab(B, Hom(A,C))
deﬁning the tensor product. Once the objects A ⊗Z B ∈Ab have been deﬁned, Proposition
4.3.4 uses the isomorphisms (4.3.12) to extend this data into a functor A ⊗Z −: Ab →Ab.
Proposition 4.3.6(i) then extends this data into the tensor product bifunctor
Ab × Ab
⊗Z
−−→Ab
in such a way that the tensor product and the hom deﬁne a two-variable adjunction.
As Kan suspected, this process can be reversed. Given the tensor product bifunctor
⊗Z : Ab × Ab →Ab, the abelian group Hom(B,C) can be deﬁned as a representation for
the functor
(4.3.13)
Abop
Ab(−⊗ZB,C)
−−−−−−−−−→Set
Ab(A, Hom(B,C))  Ab(A ⊗Z B,C) .
Propositions 4.3.4 and 4.3.6(i) then imply that there is a unique way to extend this con-
struction Hom: ob Ab × ob Ab →ob Ab into a bifunctor Hom: Abop × Ab →Ab in such a
way that the isomorphisms (4.3.13) are natural in B and C, as well as A.
Example 4.3.14. Temporarily, let Top denote not the ordinary category of topological
spaces but the cartesian closed category of spaces deﬁned in Example 4.3.10.
In this
5Recall from §1.1 that this is why the collection of morphisms between a ﬁxed pair of objects in a general
category is often denoted “Hom.” Here we use “Ab” for the mere set of homomorphisms, which in this instance
plays a secondary role.

4.3. CONTRAVARIANT AND MULTIVARIABLE ADJOINT FUNCTORS
131
context, the two-variable adjunction specializes to deﬁne an adjunction:
Top
S 1×−/
⊥
Top
Map(S 1,−)
o
where S 1 ∈Top is the unit circle. The space Map(S 1, X) is the free loop space on X; points
in Map(S 1, X) are loops in the space X.
The slice category of Top under the singleton space ∗deﬁnes a convenient category
Top∗of based topological spaces.
By Exercise 4.3.iv(ii), Top∗admits a two-variable
adjunction
Top∗× Top∗
∧−→Top∗,
Topop
∗× Top∗
Map∗
−−−−→Top∗,
Topop
∗× Top∗
Map∗
−−−−→Top∗,
where Map∗((X, x), (Y, y)) denotes the based space of basepoint-preserving continuous func-
tions (X, x) →(Y, y). The bifunctor ∧is called the smash product.
The space
ΩX B Map∗(S 1, (X, x))
is the based loop space on (X, x); the basepoint x ∈X implicit in the common notation.
The functor Ωhas a left adjoint ΣX B S 1 ∧X, which constructs the reduced suspension
of the based space (X, x). This deﬁnes the loops ⊣suspension adjunction between based
topological spaces:
Top∗
Σ
/
⊥
Top∗
Ω
o
Top∗(ΣX, Y)  Top∗(X, ΩY)
Deﬁnition 4.3.7 can be generalized to deﬁne multivariable adjunctions.
Applying
Proposition 4.3.6, an n-variable adjunction is determined by a functor F : A1×· · ·×An →B
admitting pointwise right adjoints when any (n−1) of its variables are ﬁxed. See [CGR14]
for more.
Exercises.
Exercise 4.3.i. Dualize Deﬁnition 4.2.5 to deﬁne mutual left adjoints and mutual right ad-
joints as a pair of contravariant functors equipped with appropriate natural transformations.
Exercise 4.3.ii. Prove Proposition 4.3.6.
Exercise 4.3.iii. Show that the contravariant power set functor P: Setop →Set is mutually
right adjoint to itself.
Exercise 4.3.iv. Deﬁne pointwise adjoints to the following bifunctors, giving rise to
examples of two-variable adjunctions.
(i) There is a bifunctor
Setop
∗× Set∗
Hom∗
−−−−→Set∗,
where Hom∗((X, x), (Y, y)) is deﬁned to be the set of pointed functions (X, x) →(Y, y),
with the constant function at y serving as the basepoint.
Deﬁne a two-variable
adjunction determinedby thisbifunctor, the pointwiseleft adjointsto Hom∗((X, x), −).
(ii) Describe the left adjoint bifunctor Set∗× Set∗
∧−→Set∗constructed in (i) in a suﬃ-
ciently categorical way so that Set can be replaced by any cartesian closed category.
(iii) The discussion in Example 4.3.11 extends to any category ModR of modules over
a commutative ring R. If R is not commutative, for a pair of R-modules A and B,

132
4. ADJUNCTIONS
Hom(A, B) is not necessarily an R-module, but it is still an abelian group. This
construction deﬁnes a bifunctor
Modop
R × ModR
Hom
−−−→Ab .
Extend this data to a two-variable adjunction.
(iv) In a similar fashion, deﬁne a two-variable adjunction determined by the hom bifunctor
Chop
R × ChR
Hom
−−−→ModR ,
where the ring R is commutative and the set Hom(A•, B•) of chain homomorphisms
A• →B• inherits an R-module structure with addition and scalar multiplication
deﬁned elementwise.
4.4. The calculus of adjunctions
Perhaps the purpose of categorical algebra is to
show that which is formal is formally formal.
J. Peter May, [May01]
This section introduces the basic calculus of adjoint functors: proving that adjoints are
unique up to unique natural isomorphism, that adjunctions can be composed and whiskered,
and that any equivalence can be promoted to an adjoint equivalence in which the inverse
equivalences are also adjoints, with either choice of handedness.
What further unites
these results is that they all admit “formal categorical”6 proofs, meaning that they can be
proven syntactically using objects (categories), morphisms (functors), and morphisms of
morphisms (natural transformations), which can be composed horizontally and vertically in
the sense described in §1.7. As our interest is as much in these categorical proof techniques
as in the results themselves, we give secondary proofs of these results, to illustrate alternate
Yoneda-style arguments, and brieﬂy comment on the merits of each approach.
Proposition 4.4.1. If F and F′ are left adjoint to G, then F  F′, and moreover there
is a unique natural isomorphism θ: F  F′ commuting with the units and counits of the
adjunctions:
1C
η
+3
η′
%
GF
Gθ

FG
ϵ
+3
θG

1D
GF′
F′G
ϵ′
9A
Proof 1. To deﬁne a natural transformation θ: F ⇒F′, it suﬃces, by Lemma 4.1.3,
to deﬁne a transposed natural transformation, which we take to be η′ : 1C ⇒GF′
(4.4.2)
Fc
F f

θc
/ F′c
F′ f

↭
c
f

η′
c
/ GF′c
GF′ f

Fc′
θc′
/ F′c′
c′
η′
c′
/ GF′c′
Remark 4.2.7(iv) provides an explicit formula for θ:
θ B F
Fη′ +3 FGF′
ϵF′ +3 F′.
6Here, formal category theory is meant in the rather narrow sense of 2-category theory.

4.4. THE CALCULUS OF ADJUNCTIONS
133
Exchanging the roles of F′ and F, we also deﬁne a natural transformation θ′ : F′ ⇒F to
be the transpose of η: 1C ⇒GF, given by the formula:
θ′ B F′
F′η +3 F′GF
ϵ′F +3 F.
The hope is that these natural transformations deﬁne inverse isomorphisms. To prove
that θ′ · θ = 1F, it suﬃces to demonstrate this equality after transposing both θ′ · θ and 1F,
i.e., to show that η: 1 ⇒GF equals the composite
1
η
+3 GF
GFη′ +3 GFGF′
GϵF′ +3 GF′
GF′η +3 GF′GF
Gϵ′F +3 GF .
By naturality of η, this composite equals
1
η′
+3 GF′
ηGF′ +3 GFGF′
GϵF′ +3 GF′
GF′η +3 GF′GF
Gϵ′F +3 GF .
By the triangle identity Gϵ · ηG = 1G, this reduces to
1
η′
+3 GF′
GF′η +3 GF′GF
Gϵ′F +3 GF .
By naturality of η′, this equals
1
η
+3 GF
η′GF +3 GF′GF
Gϵ′F +3 GF ,
and by the triangle identity Gϵ′ · η′G = 1G, this reduces to
1
η
+3 GF
as desired. The other diagram chase, proving that θ · θ′ = 1F′, is dual.
From the formula for θ, there are easy diagram chases, left to the reader, that verify that
the triangles of natural transformations displayed in the statement commute. The left-hand
triangle asserts that the transpose of θ across the adjunction F ⊣G is η′, as indeed has been
taken as the deﬁnition in (4.4.2), thereby proving uniqueness.
□
Proof 2. By the Yoneda lemma, the composite natural isomorphism
(4.4.3)
D(F′c, d)  C(c,Gd)  D(Fc, d) ,
deﬁnes a natural isomorphism θ: F  F′, whose component θc is deﬁned to be the image
of 1F′c under the bijection (4.4.3). The ﬁrst isomorphism carries 1F′c to η′
c : c →GF′c.
The second isomorphism carries it to its transpose along F ⊣G. Thus,
θc B Fc
Fη′
c / FGF′c
ϵF′
c / F′c ,
which is the formula used in Proof 1; here we see that it was not necessary to guess the
deﬁnition of θ. Setting d = F′c in the commutative triangle of natural isomorphisms (4.4.3)
proves the compatibility of θ: F  F′ with the units of the adjunctions; setting c = Ud
proves compatibility with the counits.
□
Proposition 4.4.4. Given adjunctions F ⊣G and F′ ⊣G′
C
F
/
⊥
D
G
o
F′
/
⊥
E
G′
o
⇝
C
F′F /
⊥
E
GG′
o
the composite F′F is left adjoint to the composite GG′.

134
4. ADJUNCTIONS
Proof 1. There are natural isomorphisms
E(F′Fc, e)  D(Fc,G′e)  C(c,GG′e) ,
the ﬁrst deﬁned using F′ ⊣G′ and the second deﬁned using F ⊣G.
□
Proof 2. The only reasonable deﬁnitions for the unit and counit of F′F ⊣GG′ that
can be deﬁned from the data of the two adjunctions are:
¯η B 1C
η
+3 GF
Gη′F +3 GG′F′F
¯ϵ B F′FGG′
F′ϵG′ +3 F′G′
ϵ′
+3 1E
which indeed are the natural transformations that result from passing the identities 1F′F and
1GG′ across the natural isomorphisms in Proof 1. The proof of the triangle identities is an
entertaining diagram chase left to the reader.
□
Proposition 4.4.5. Any equivalence
C
F
/ D
G
o
η: 1C  GF,
ϵ : FG  1D
can be promoted to an adjoint equivalence, in which the natural isomorphisms satisfy the
triangle identities, by replacing either one of the originally speciﬁed natural isomorphisms
by a new unit or counit.
Note that the symmetry in the deﬁnition implies that an equivalence of categories
F : C →D may be regarded as either a left or right adjoint; indeed, any chosen equivalence
inverse G: D →C is both left and right adjoint to F.
Proof 1. Because η: 1C  GF and ϵ : FG  1D are isomorphisms, so is the composite
γ B G
ηG +3 GFG
Gϵ
+3 G
but it need not be an identity. Redeﬁning either ϵ or η so as to absorb the isomorphism
γ−1—it will not matter which—we will show that the resulting pair of natural isomorphisms
deﬁne the unit and the counit of an adjunction F ⊣G.
Let ϵ′ B ϵ · Fγ−1. By naturality of η, the diagram
G
ηG +3
γ−1
&
GFG
GFγ−1 +3 GFG
Gϵ
+3 G
G
ηG
6>
γ
19
commutes, proving one triangle identity Gϵ′ · ηG = 1G. By naturality of η and ϵ′, and by
this ﬁrst triangle identity, the diagram
F
Fη
+3
Fη

FGF
ϵ′
F
+3
FGFη

F
Fη

FGF
FηGF +3 FGFGF
ϵ′
FGF +3
FGϵ′
F

FGF
ϵ′
F

FGF
ϵ′
F
+3 F
commutes, proving that ϵ′
F · Fη is an idempotent. By cancellation, any idempotent isomor-
phism is necessarily an identity; thus ϵ′
F · Fη = 1F, as desired.
□

4.4. THE CALCULUS OF ADJUNCTIONS
135
Proof 2. If η: 1C  GF is one of the natural isomorphisms deﬁning an equivalence
of categories F : C ⇄D: G, then the function
D(Fc, d)
G
/ C(GFc,Gd)
(ηc)∗/ C(c,Gd)
deﬁnes a natural isomorphism for all c ∈C and d ∈D: the ﬁrst map is an isomorphism
because G is fully faithful and the second map is an isomorphism because ηc is an isomor-
phism. By Remark 4.2.7, it follows that F and G deﬁne an adjunction with unit η.
□
Proposition 4.4.6. Given an adjunction
C
F
/
⊥
D
G
o
post-composition with F and G deﬁnes a pair of adjoint functors
CJ
F∗
/
⊥
DJ
G∗
o
for any small category J, and pre-composition with F and G also deﬁnes an adjunction
EC
G∗
/
⊥
ED
F∗
o
for any locally small category E.7
As in the case of the other results in this section, this can be proven by appealing to
either Deﬁnition 4.1.1 or Deﬁnition 4.2.5. Rather than spell out the details, which are left
for the exercises, we instead sketch a third proof.
Deﬁnition 4.2.5 reveals that an adjunction can be deﬁned internally to the 2-category
CAT introduced in Deﬁnition 1.7.8: an adjunction consists of a pair of objects, a pair of
1-morphisms, and a pair of 2-morphisms satisfying certain composition relations. Now
a 2-functor is a morphism between 2-categories: a map on objects, 1-morphisms, and
2-morphisms preserving composition and identities at all levels. There is a 2-dimensional
analog of Lemma 1.6.5—that functors preserve commutative diagrams—which says that 2-
functors preserve “2-dimensional diagrams” including, in particular, adjunctions. Ignoring
size issues, Proposition 4.4.6 is an immediate corollary of the fact that
(−)J : CAT →CAT
and
E(−) : Catop →CAT
deﬁne 2-functors for any small category J and locally small category E.
Remark 4.4.7. The “syntactic” proofs of Propositions 4.4.1, 4.4.4, 4.4.5, and 4.4.6 (the
last of these left to Exercise 4.4.ii) apply immediately to adjunctions deﬁned internally to
any 2-category, in place of Cat. This suggests a reason to prefer these proofs to the alternate
“Yoneda-style” arguments, which apply only to Cat. However, using analogous arguments
to those made in §3.4, these “Yoneda-style” arguments can be bootstrapped from Cat to a
general 2-category. As (co)limits in a general category are deﬁned representably in terms
of limits in Set, so too—again by the Yoneda lemma—are adjunctions and equivalences
in a 2-category are deﬁned representably in terms of adjunctions and equivalences in Cat.
This line of reasoning supports the category theorist’s joke that “all theorems are Yoneda.”
7Note that these functor categories will not be locally small unless C and D are small. If local smallness of
the functor categories is not a concern, then the hypothesis that J is small can be dropped.

136
4. ADJUNCTIONS
Exercises.
Exercise 4.4.i. Complete the second proof of Proposition 4.4.4 by verifying the triangle
identities.
Exercise 4.4.ii. Use the unit and counit associated to an adjunction to prove Proposition
4.4.6.
Exercise 4.4.iii. Use the natural bijection between hom-sets to prove the ﬁrst half of
Proposition 4.4.6, that an adjunction F ⊣G induces an adjunction F∗⊣G∗by post-
composition. (Hint: Exercise 3.2.iv might help.)
4.5. Adjunctions, limits, and colimits
In this section, we explore the interaction between adjoint functors and limits and
colimits. Our ﬁrst result provides an adjoint characterization of completeness and cocom-
pleteness of a category C with regard to diagrams of a ﬁxed shape J.
Proposition 4.5.1. A category C admits all limits of diagrams indexed by a small category
J if and only if the constant diagram functor ∆: C →CJ admits a right adjoint, and admits
all colimits of J-indexed diagrams if and only if ∆admits a left adjoint:
C
∆
/ CJ .
colim
⊥
~
lim
⊥
_
When these adjoints exist, they deﬁne the limit and colimit functors introduced in
Proposition 3.6.1. Recall that the axiom of choice is needed to deﬁne the action of the limit
or colimit functor on objects.
Proof. These dual statements follow immediately from the deﬁning universal proper-
ties of a limit and colimit. For c ∈C and F ∈CJ, the hom-set CJ(∆c, F) is the set of natural
transformations from the constant J-diagram at c to the diagram F. This is precisely the set
of cones over F with summit c, as deﬁned in 3.1.2. There is an object lim F ∈C together
with an isomorphism
CJ(∆c, F)  C(c, lim F)
that is natural in c ∈C if and only if this limit exists. If such natural isomorphisms exist for
all diagrams F ∈CJ, then Proposition 4.3.4 applies to extend the objects lim F to a limit
functor lim: CJ →C.
□
Proposition 4.5.1 reveals that limits assemble into a right adjoint to the constant
diagram functor. The reason that limits appear on the right is because limits are deﬁned as
representations for contravariant functors: the universal property of the limit of F : J →C
characterizes the functor C(−, lim F).
Similarly, the value of a right adjoint functor G: D →C on an object d ∈D is
determined by a characterization of the contravariant representable functor C(−,Gd). Based
on these observations, one might expect right adjoints to interact nicely with limits and
indeed this is the case:
Theorem 4.5.2 (RAPL). Right adjoints preserve limits.

4.5. ADJUNCTIONS, LIMITS, AND COLIMITS
137
Proof. Consider a diagram K : J →D admitting a limit cone λ: lim K ⇒K in D,
illustrated here in the case where the indexing category J is the poset of integers.
lim K
λ0

λ−1
{
λ−2
u
···
s
λ1
#
λ2
)
···
+
· · ·
/ K j−2
K f−2
/ K j−1
K f−1
/ K j0
K f0
/ K j1
K f1
/ K j2
/ · · ·
Applying a right adjoint G: D →C, we obtain a cone Gλ: G lim K ⇒GK over the diagram
GK in C.
G lim K
Gλ0

Gλ−1
y
Gλ−2
t
···
s
Gλ1
$
Gλ2
*
···
+
· · ·
/ GK j−2 GK f−2
/ GK j−1
GK f−1
/ GK j0
GK f0
/ GK j1
GK f1
/ GK j2
/ · · ·
The statement asserts that this is a limit cone for the diagram GK : J →C. To prove this,
consider another cone µ: c ⇒GK.
c
µ0

µ−1

···
v
µ−2
y
µ1

µ2
%
···
(
G lim K
Gλ0

Gλ−1
y
Gλ−2
t
···
r
Gλ1
%
Gλ2
*
···
+
· · ·
/ GK j−2
GK f−2
/ GK j−1
GK f−1
/ GK j0
GK f0
/ GK j1
GK f1
/ GK j2
/ · · ·
The legs of this cone transpose across the adjunction F ⊣G to deﬁne maps in D
Fc
τ

µ♯
−1

···
v
µ♯
−2
y
µ♯
1

µ♯
0

µ♯
2
$
···
(
lim K
λ0

λ−1
y
λ−2
t
···
r
λ1
%
λ2
*
···
+
· · ·
/ K j−2
K f−2
/ K j−1
K f−1
/ K j0
K f0
/ K j1
K f1
/ K j2
/ · · ·
which deﬁne a cone µ♯: Fc ⇒K over K, by naturality of the transposition relation, as
expressed for instance by Lemma 4.1.3. There is a unique factorization τ: Fc →lim K of
the cone µ♯through the limit cone λ. The map τ transposes to deﬁne a map τ♭: c →G lim K
c
τ♭

µ0

µ−1

···
v
µ−2
y
µ1

µ2
%
···
(
G lim K
Gλ0

Gλ−1
y
Gλ−2
t
···
r
Gλ1
%
Gλ2
*
···
+
· · ·
/ GK j−2
GK f−2
/ GK j−1
GK f−1
/ GK j0
GK f0
/ GK j1
GK f1
/ GK j2
/ · · ·
which, by Lemma 4.1.3, deﬁnes a factorization of the cone µ through the cone Gλ. This
factorization is clearly unique: another such factorization c →G lim K would transpose to

138
4. ADJUNCTIONS
deﬁne a factorization of µ♯through λ, which, by the universal property of the limit cone
λ would necessarily equal τ, and τ♭is the unique transpose of this map. This shows that
Gλ: G lim K ⇒GK has the universal property required to deﬁne a limit cone for GK.
□
Put more concisely, the argument just presented describes a series of natural isomor-
phisms:
CJ(∆c,GK)  DJ(F∆c, K)  DJ(∆Fc, K)  D(Fc, limJ K)  C(c,G limJ K) ,
which, by the deﬁning universal property of the limit, says that G limJ K deﬁnes a limit for
the diagram GK.
Dually, of course:
Theorem 4.5.3 (LAPC). Left adjoints preserve colimits.
Corollaries are ubiquitous. For instance:
Corollary 4.5.4. For any function f : A →B, the inverse image f −1 : PB →PA, a
function between the power sets of A and B, preserves both unions and intersections, while
the direct image f∗: PA →PB only preserves unions.
Proof. Example 4.1.8 describes adjunctions
PB
f −1 / PA .
f∗
⊥
}
f!
⊥
`
Unions are colimits and intersections are limits in the poset category PA.
□
Corollary 4.5.5. For any vector spaces U, V, W,
U ⊗(V ⊕W)  (U ⊗V) ⊕(U ⊗W) .
Proof. The two-variable adjunction of Example 4.3.11 can be deﬁned for the category
of modules over any commutative ring, in particular for the category of vector spaces over
a ﬁeld k. It follows that the functor U ⊗−: Vectk →Vectk is left adjoint to Hom(U, −) and
consequently preserves the coproduct V ⊕W. This argument also proves that the tensor
product distributes over arbitrary direct sums.
□
Similarly, on account of the adjunctions A × −⊣(−)A between the product and expo-
nential on Set or its subcategory Fin, Theorems 4.5.2 and 4.5.3 supply proofs of many of
the basic operations in arithmetic, ﬁrst discussed in Example 1.4.9.
Corollary 4.5.6. For any sets A, B,C, there are natural isomorphisms
A × (B + C)  (A × B) + (A × C)
(B × C)A  BA × CA
AB+C  AB × AC .
Consequently, for any cardinals α, β, γ, cardinal arithmetic satisﬁes the laws:
α × (β + γ) = (α × β) + (α × γ)
(β × γ)α = βα × γα
αβ+γ = αβ × αγ .
Proof. The left adjoint A × −preserves the coproduct B + C, the right adjoint (−)A
preserves the product B × C, and the functor A−: Setop →Set, which is mutually right
adjoint to itself, carries coproducts in Set to products in Set. The laws of cardinal arithmetic
follow by applying the cardinality functor |−|: Setiso →Card, which converts these natural
isomorphisms to identities in the discrete category of cardinals.
□

4.5. ADJUNCTIONS, LIMITS, AND COLIMITS
139
The forgetful functors of Example 4.1.10 carry any limits that exist in the categories
of groups, rings, modules, and so forth to corresponding limits of their underlying sets.
Indeed, in §5.6, we show that these forgetful functors create, and not merely preserve, all
limits. The dual result, that left adjoints preserve colimits, is less directly useful in such
contexts, characterizing only those colimit constructions involving “free” diagrams. For
instance:
Corollary 4.5.7. The free group on the set X ⊔Y is the free product of the free groups on
the sets X and Y.
The free product of not-necessarily free groups will be constructed in §5.6 using
language that also describes the construction of the coproducts in the categories of abelian
groups, rings, and modules, among many others.
Theorems 4.5.2 and 4.5.3 also have important applications to homological algebra.
Corollary 4.5.8. For any R-S bimodule M, the tensor product M ⊗S −is right exact.
Before proving Corollary 4.5.8, we should explain its statement. The term “right exact”
comes from homological algebra, which studies functors between abelian categories. An
abstract deﬁnition is given in Deﬁnition E.5.1, but by a powerful result, Theorem E.5.2, it
suﬃces to declare that a category is abelian if it is a full subcategory of category of modules
that contains the zero object and is closed under direct sums, kernels, and cokernels.8
The following general deﬁnitions of left and right exactness makes sense for any
functor, not necessarily between abelian categories.
Definition 4.5.9. A functor is right exact if it preserves ﬁnite colimits and left exact if it
preserves ﬁnite limits.
The following proposition connects Deﬁnition 4.5.9 to the notions of left and right
exactness that are used in homological algebra.
Proposition 4.5.10. A functor F : A →B between abelian categories is left exact if and
only if it preserves direct sums and kernels. For such functors, if
0 →A →A′ →A′′
is an exact sequence in A, then
0 →FA →FA′ →FA′′
is exact in B.
Proof. Direct sums and kernels are both ﬁnite limits, so if F is left exact, these
constructions are preserved. Conversely, Theorem 3.4.12 proves that all ﬁnite limits can be
built from ﬁnite products and equalizers. In an abelian category, the equalizer of a parallel
pair of maps f, g: A ⇒A′ is the kernel of the map f −g: A →A′. A functor that preserves
direct sums also preserves diﬀerences of maps, so if F preserves direct sums and kernels it
preserves all ﬁnite limits.
Now a sequence
0
i
/ A
j
/ A′
k
/ A′′
is exact in A just when i is the kernel of j (equivalently, when j is a monomorphism), and
when j is the kernel of k. A left exact functor preserves these kernels and also the zero
object 0.
□
8A zero object is an object that is both initial and terminal; see Exercise 1.6.i. Direct sums are deﬁned in
Remark 3.1.27. As in Example 3.1.14, the kernel of a map f : A →A′ is the equalizer of f with the zero
homomorphism, while the cokernel is the coequalizer of this pair.

140
4. ADJUNCTIONS
Immediately from Deﬁnition 4.5.9 and Theorems 4.5.2 and 4.5.3:
Corollary 4.5.11. For any adjoint functors between abelian categories, the left adjoint
is right exact and the right adjoint is left exact. Moreover, both functors are additive.9
Corollary 4.5.8 is a special case:
Proof of Corollary 4.5.8. For any R-S bimodule M, there is a pair of adjoint func-
tors
ModS
M⊗S −/
⊥
ModR ,
HomR(M,−)
o
where the right adjoint carries a left R-module N to the left S -module of R-module ho-
momorphisms M →N. As a left adjoint, Corollary 4.5.11 proves that M ⊗S −is right
exact.
□
For a certain important class of adjoint functors, Theorems 4.5.2 and 4.5.3 take on a
stronger form.
Definition 4.5.12. A reﬂective subcategory of a category C is a full subcategory D so
that the inclusion admits a left adjoint, called the reﬂector or localization:
D 
/
⊥
C .
L
o
Where possible, we identify the full subcategory D with its image in C, declining in
particular to introduce notation for the inclusion functor. With this convention in mind, the
components of the unit have the form c →Lc; the mnemonic is that “an object looks at
its reﬂection.” The following lemma implies that the components of the counit Ld  d are
isomorphisms. Via the counit, any object in a reﬂective subcategory D ,→C is naturally
isomorphic to its reﬂection back into that subcategory.
Lemma 4.5.13. Consider an adjunction
C
F
/
⊥
D
G
o
with counit ϵ : FG ⇒1D. Then:
(i) G is faithful if and only if each component of ϵ is an epimorphism.
(ii) G is full if and only if each component of ϵ is a split monomorphism.
(iii) G is full and faithful if and only if ϵ is an isomorphism.
Dually, writing η: 1C ⇒GF for the unit:
(i) F is faithful if and only if each component of η is a monomorphism.
(ii) F is full if and only if each component of η is a split epimorphism.
(iii) F is full and faithful if and only if η is an isomorphism.
Proof. Exercise 4.5.vi.
□
Example 4.5.14. The following deﬁne reﬂective subcategories:
(i) Compact Hausdorﬀspaces deﬁne a reﬂective subcategory cHaus ,→Top of the
category of all topological spaces. The reﬂector is the functor β: Top →cHaus
sending a space to its Stone–Čech compactiﬁcation, which is constructed in Ex-
ample 4.6.12. The universal property of the unit says that any continuous function
9A functor between abelian categories is additive if it preserves direct sums.

4.5. ADJUNCTIONS, LIMITS, AND COLIMITS
141
X →K from a space X to a compact Hausdorﬀspace K extends uniquely to the
Stone–Čech compactiﬁcation:
X
/
 
K
βX
>
(ii) Abelian groups deﬁne a reﬂective subcategory Ab ,→Group of the category of
groups. The reﬂector carries a groupG to its abelianization, the quotientG/[G,G] by
the commutator subgroup, the normal subgroup generated by elements ghg−1h−1.
The quotient maps G →G/[G,G] deﬁne the components of the unit.
For any
abelian group A, there is an isomorphism A  A/[A, A]; the commutator subgroup
[A, A] is trivial if and only if the group A is abelian. The adjunction asserts that a
homomorphism from a group G to an abelian group A necessarily factors through
the abelianization of G. A similar construction deﬁnes a left adjoint to the inclusion
CRing ,→Ring of commutative rings into the category of all rings.
(iii) The inclusion Abtf ,→Ab of torsion-free abelian groups is reﬂective. The reﬂector
sends an abelian group A to the quotient A/TA by its torsion subgroup. The quotient
maps A →A/TA deﬁne the components of the unit. Any map from A to a torsion-
free group factors uniquely through this quotient homomorphism because any torsion
elements of A must be contained in its kernel.
(iv) As described in Example 4.1.10(xi), for any ring homomorphism φ: R →T, there
exist adjoint functors
ModT
φ∗
/
⊥
ModR ,
T⊗R−
o
the right adjoint being restriction of scalars and the left adjoint being extension of
scalars. The restriction of scalars functor is always faithful because both categories
of modules admit faithful forgetful functors to Ab, and is full if and only if φ: R →T
is an epimorphism. For such homomorphisms, restriction of scalars identiﬁes ModT
as a reﬂective subcategory of ModR.
Epimorphisms in Ring include all surjections but are not limited to the surjec-
tions. The localizations deﬁne another important class of epimorphisms. Let S ⊂R
be a monoid under multiplication; that is, S is a multiplicatively closed subset of
the ring R. The localization R →R[S −1] is an initial object in the category whose
objects are ring homomorphisms R →T that carry all of the elements of S to units
in T. For integral domains, the ring R[S −1] can be constructed as a ﬁeld of fractions.
A similar construction exists for general commutative rings.
(v) Recall that a presheaf on a space X is a contravariant functor O(X)op →Set from
the poset of open subsets of X to sets. A presheaf is a sheaf if it preserves certain
limits (see Deﬁnition 3.3.4). The sheaves deﬁne a reﬂective subcategory ShvX of the
category of presheaves, with the left adjoint called sheaﬁﬁcation:
ShvX 
/
⊥
SetO(X)op
sheaﬁfy
o
(vi) The category of small categories deﬁnes a reﬂective subcategory of the category
Set∆op of simplicial sets via an adjunction that is constructed in Exercise 6.5.iv:
Cat 
N
/
⊥
Set∆op
h
o

142
4. ADJUNCTIONS
Here ∆⊂Cat is the full subcategory whose objects are the ﬁnite non-empty ordinals,
in this context denoted by [0], [1], [2], . . ., and whose morphisms are all functors, i.e.,
order-preserving functions, between them. The embedding N : Cat ,→Set∆op carries
a small category C to its nerve: NC: ∆op →Set sends [n] = 0 →1 →· · · →n
to the set of functors NCn := Cat([n], C). The left adjoint h: Set∆op →Cat sends
a simplicial set to its homotopy category. Restricting to the objects [0], [1] ∈∆, a
simplicial set X : ∆op →Set has an underlying reﬂexive directed graph
X0
/
/ X1 .
o
The homotopy category hX is a quotient of the free category generated by this
reﬂexive directed graph modulo relations that arise from elements of the set X2. In
particular, the counit deﬁnes an isomorphism hNC  C for any category C, proving
that the inclusion is full and faithful.
The following result explains our particular interest in reﬂective subcategories. The
presence of a left adjoint to the inclusion of a full subcategory provides complete information
about limits and colimits in that subcategory:
Proposition 4.5.15. If D ,→C is a reﬂective subcategory, then:
(i) The inclusion D ,→C creates all limits that C admits.
(ii) D has all colimits that C admits, formed by applying the reﬂector to the colimit in C.
By Theorems 4.5.2 and 4.5.3, if D has limits or colimits, they must be constructed in
the way described in Proposition 4.5.15: limits are preserved by the inclusion D ,→C and
colimits of diagrams in D, regarded as diagrams in C, are preserved by L: C →D. The
real content of this result is that these (co)limits necessarily exist in D. A special case of
this completes some unﬁnished business from §3.5:
Corollary 4.5.16. Cat is complete and cocomplete.
Proof. By Proposition 3.3.9, Set∆op is complete and cocomplete, with limits and col-
imits deﬁned objectwise in Set. Proposition 4.5.15 implies that the reﬂective subcategory
Cat inherits these limits, deﬁned objectwise in Set, and also these colimits, deﬁned by
applying the homotopy category functor to the colimit in Set∆op.
□
Proposition 4.5.15(i) appears as Corollary 5.6.6, where this result is deduced as a
special case of the more general Theorem 5.6.5.
Proof of 4.5.15(ii). For clarity, write i: D ,→C for the inclusion, the right adjoint
to the reﬂector L. Consider a diagram F : J →D and let λ: iF ⇒c be a colimit cone
for the diagram iF in C. By Theorem 4.5.3, the left adjoint L sends this to a colimit cone
Lλ: LiF ⇒Lc in D. Now the counit supplies a natural isomorphism Li  1D. Composing
with this natural isomorphism yields a colimit cone F  LiF ⇒Lc for the original diagram
in D.
□
Exercises.
Exercise 4.5.i. When does the unique functor !: C →1 have a left adjoint? When does it
have a right adjoint?
Exercise 4.5.ii. Suppose the diagonal functor ∆: C →CJ admits both left and right
adjoints. Describe the units and counits of these adjunctions.
Exercise 4.5.iii. Use Proposition 4.5.1 to prove that in any complete category limits
commute with limits in the sense of the natural isomorphism of limit functors (3.8.2).

4.6. EXISTENCE OF ADJOINT FUNCTORS
143
Exercise 4.5.iv. If G: D →C has a left adjoint F and if D and C admit all limits indexed
by a category J, use Propositions 4.5.1, 4.4.4, and 4.4.6 to argue that right adjoints preserve
limits by considering the diagram of adjoint functors:
C
⊤
F
/
⊢
∆
D
G
o
∆
⊣
CJ
⊥
lim
O
F
/ DJ
lim
O
G
o
The characterization of preservation of limits provided by Exercise 3.3.i might prove useful.
Exercise 4.5.v. Show that a morphism f : x →y in C is a monomorphism if and only if
the square
x
1x
/
1x

x
f

x
f
/ y
is a pullback. Conclude that right adjoints preserve monomorphisms, and that left adjoints
preserve epimorphisms.
Exercise 4.5.vi. Prove Lemma 4.5.13.
Exercise 4.5.vii. Consider a reﬂective subcategory inclusion D ,→C with reﬂector
L: C →D.
(i) Show that ηL = Lη, and that these natural transformations are isomorphisms.
(ii) Show that an object c ∈C is in the essential image of the inclusion D ,→C,
meaning that it is isomorphic to an object in the subcategory D, if and only if ηc is
an isomorphism.
(iii) Show that the essential image of D consists of those objects c that are local for the
class of morphisms that are inverted by L. That is, c is in the essential image if and
only if the pre-composition functions
C(b, c)
f ∗
−→C(a, c)
are isomorphisms for all maps f : a →b in C for which L f is an isomorphism in D.
This explains why the reﬂector is also referred to as “localization.”
Exercise 4.5.viii. Find an example which demonstrates that the inclusion of a reﬂective
subcategory does not create all colimits.
4.6. Existence of adjoint functors
Does the inclusion Ring ,→Rng of the category of unital rings into the category of
possibly non-unital rings have any adjoints? A ﬁrst strategy to probe a question of this
form might be called the “initial and terminal objects test”: by Theorems 4.5.2 and 4.5.3, a
functor admitting a left adjoint must necessarily preserve all limits while a functor admitting
a right adjoint must necessarily preserve all colimits. The ring Z is initial in Ring but not
in Rng, so there can be no right adjoint. The zero ring is terminal in both categories, so a

144
4. ADJUNCTIONS
left adjoint to the inclusion might be possible. Indeed, Ring has all limits and the inclusion
preserves them.10
The search for a left adjoint to Ring ,→Rng might be thought of as some sort
of formulaic (that is to say functorial) optimization problem, whose aim is to adjoin a
multiplicative unit to a possibly non-unital ring R in the “most eﬃcient way possible.”
The Yoneda lemma can be used to make this intuition precise. To deﬁne the value of a
hypothetical left adjoint on a possibly non-unital ring R, we seek a unital ring R∗together
with a natural isomorphism
Ring(R∗, S )  Rng(R, S )
for all unital rings S . Note that even if R has a unit, the ring R∗will still diﬀer from R
because homomorphisms in Ring must preserve units, while homomorphisms in Rng need
not.
To deﬁne this natural isomorphism is to deﬁne a representation R∗for the functor
Rng(R, −): Ring →Set. By Proposition 2.4.8, a representation deﬁnes an initial object in
the category of elements
R
Rng(R, −). Objects in this category are homomorphisms R →S
whose codomain is a unital ring; morphisms are commutative triangles
R

 
S
/ S ′
whose leg opposite R is a unital ring homomorphism but whose legs with domain R do
not necessarily preserve the multiplicative unit, if R happens to have one. This category
of elements is isomorphic to the comma category R↓Ring of non-unital homomorphisms
from R to a unital ring. The optimization problem is solved if we can ﬁnd a unital ring R∗
and ring homomorphism R →R∗that is initial in this category.11
The same line of reasoning proves the following general result.
Lemma 4.6.1. A functor U : A →S admits a left adjoint if and only if for each s ∈S the
comma category s↓U has an initial object.
Comma categories are deﬁned in Exercise 1.3.vi: here, objects of s ↓U are pairs
(a ∈A, f : s →Ua ∈S) and a morphism from f : s →Ua to f ′ : s →Ua′ is a map
h: a →a′ ∈A so that the evident triangle commutes in S.
Proof. The comma category s ↓U is isomorphic to the category of elements for the
functor S(s, U−): A →Set. If a left adjoint F exists, then the component of the unit at s
deﬁnes an initial object ηs : s →UFs in this category; see Proposition 2.4.8 or Exercise
4.2.iv.
10As an application of Theorem 5.6.5, the forgetful functors from Ring or from Rng to Set both create all
limits. On account of the commuting triangle
Ring
U
#
 
/ Rng
U
{
Set
it follows that the inclusion preserves all limits.
11The optimization problem intuition for the construction of adjoint functors is explained very well on
Wikipedia’s “adjoint functors” entry (retrieved on April 14, 2015). However, Wikipedia’s suggestion that “pick-
ing the right category [to express the universal property of the adjoint construction] is something of a knack” is
incorrect. A left adjoint to a functor U : A →S at an object s ∈S deﬁnes an initial object in the category of
elements of the functor S(s, U−): A →Set; dually, a right adjoint deﬁnes a terminal object in the category of
elements of S(U−, s): Aop →Set. See Proposition 2.4.8.

4.6. EXISTENCE OF ADJOINT FUNCTORS
145
Conversely, suppose each s↓U admits an initial object, which we suggestively denote
by ηs : s →UFs. This deﬁnes the value of a function F : ob S →ob A, which we now
extend to a functor; the proof of Proposition 4.3.4 gives an alternate account of this same
construction. For each morphism f : s →s′ in S, deﬁne F f : Fs →Fs′ to be the unique
morphism in A making the square
s
f

ηs
/ UFs
UF f

s′
ηs′
/ UFs′
commute; the fact that ηs is initial in s ↓U implies the existence and uniqueness of
such a map.
The functoriality of F follows from the uniqueness of these choices, so
this construction deﬁnes a functor F : S →A together with a natural transformation
η: 1S ⇒UF.
This data allows us to deﬁne a natural transformation φ: A(F−, −) ⇒S(−, U−) with
components
φs,a : A(Fs, a) →S(s, Ua)
deﬁned as in Remark 4.2.7(iii): given a map g: Fs →a in A, deﬁne
φs,a(g) := s
ηs
/ UFs
Ug / Ua .
Injectivity and surjectivity of φs,a follows immediately from the uniqueness and existence
of morphisms from ηs to any particular object s →Ua in s ↓U. By Remark 4.2.7, this
natural isomorphism proves that F ⊣U with unit η.
□
Recall that a limit-preserving functor is called continuous; a colimit-preserving functor
is called cocontinuous. Lemma 4.6.1 reduces the problem of ﬁnding a left adjoint to a
continuous functor U : A →S to the problem of ﬁnding an initial object in the comma
category s ↓U deﬁned for each s ∈S. This comma category, as the category of elements
for S(s, U−): A →Set, comes with a canonical forgetful functor Π: s↓U →A that carries
an object s →Ua to the object a.
Lemma 4.6.2. For any functor U : A →S and object s ∈S, the associated forgetful
functor Π: s↓U →A strictly creates the limit of any diagram whose limit exists in A and is
preserved by U. In particular, if A is complete and U is continuous, then s↓U is complete.
Proof. Lemma 4.6.2 is a special case of Exercise 3.4.iii, or can be proven directly via
a straightforward extension of the argument used to prove Proposition 3.3.8.
□
Lemma 4.6.2 can be used to produce an initial object in s ↓U. By Lemma 3.7.1,
an initial object is equally the limit of the identity functor. Applying Lemma 4.6.2, a
limit of the identity functor on s ↓U exists if and only if the limit of the forgetful functor
Π: s↓U →A exists in A.
This line of reasoning seems to imply that all continuous functors whose domains are
complete should admit left adjoints. This is not the case: the problem is that s ↓U is not
in general a small category, so even if A admits all small limits it may not admit a limit of
the large diagram Π: s↓U →A. The adjoint functor theorems, the two most common of
which are discussed here, supply conditions under which this large limit can be reduced to
a small one that A possesses.

146
4. ADJUNCTIONS
Theorem 4.6.3 (General Adjoint Functor Theorem). Let U : A →S be a continuous
functor whose domain is locally small and complete. Suppose that U satisﬁes the following
solution set condition:
• For every s ∈S there exists a set of morphisms Φs = {fi : s →Uai} so that any
f : s →Ua factors through some fi ∈Φs along a morphism ai →a in A.
Then U admits a left adjoint.
The solution set condition says exactly that {fi : s →Uai} is a set of jointly weakly
initial objects in the category s↓U.
Definition 4.6.4.
(i) An object c in a category C is weakly initial if for every x ∈C there exists a morphism
c →x (but possibly more than one).
(ii) A collection of objects Φ = {ci} in a category C is jointly weakly initial if for every
x ∈C there exists some ci ∈Φ for which there exists a morphism ci →x.
In the presence of certain limits, an initial object can be built from a jointly weakly
initial set of objects:
Lemma 4.6.5. If C is complete, locally small, and has a jointly weakly initial set of objects
Φ, then C has an initial object.
Proof. Form the limit ℓof the inclusion into C of the full subcategory spanned by the
objects of Φ; because C is locally small, this diagram is small and because C is complete,
this limit exists. Using the limit cone (κk : ℓ→k)k∈Φ, we may deﬁne a morphism λc : ℓ→c
for each c ∈C:
• For the objects k ∈Φ, deﬁne λk B κk.
• For the remaining objects, choose a morphism hc : k →c, with k ∈Φ, and deﬁne
λc B ℓ
κk−→k
hc−→c.
The maps λc prove that ℓis weakly initial. To prove that ℓis initial, we show that the
morphisms λc deﬁne a cone λ: ℓ⇒1C with summit ℓover the identity functor 1C : C →C
with the property that the component λℓis the identity morphism. By the proof of Lemma
3.7.1, this implies that ℓis initial.
To prove that the maps λc deﬁne a cone, consider any morphism f : c →c′ in C and
form the pullback p of hc′ : k′ →c′, the chosen morphism for c′ with k′ ∈Φ, along the
composite of f with hc : k →c:
ℓ
κk′′

κk′

κk

k′′



p

/
⌟
k′
hc′

k
hc
/ c
f
/ c′
Because Φ is jointly weakly initial, there is some k′′ →p with k′′ ∈Φ. The dashed
composite morphisms live in the full subcategory spanned by the objects in Φ, which

4.6. EXISTENCE OF ADJOINT FUNCTORS
147
means that the top triangles, involving the cone legs κ commute. The commutativity of the
rest of the displayed diagram now implies that λ deﬁnes a cone.
Finally, the cone condition for λ implies that the triangle
ℓ
λℓ λk=κk

λ
κk
/ k
commutes for all k ∈Φ. This tells us that λℓdeﬁnes a factorization of the limit cone κ
through itself; whence λℓ= 1ℓ.
□
The proof of the General Adjoint Functor Theorem proceeds directly by assembling
the lemmas in this section.
Proof of Theorem 4.6.3. By Lemma 4.6.1, U admits a left adjoint if and only if for
each s ∈S the comma category s ↓U has an initial object; these initial objects deﬁne the
value of the left adjoint on objects and the components of the unit of the adjunction. The
solution set condition says that s↓U has a jointly weakly initial set of objects. Because A
is locally small, s↓U is as well. Because A is complete and U is continuous, Lemma 4.6.2
applies to prove that s↓U is also complete. So we may apply Lemma 4.6.5 to construct an
initial object in s↓U.
□
Example 4.6.6. For example, consider the functor U : Group →Set and a set S . The
following construction of the free group on S can be found in [Lan02, §I.12]. Let Φ′ be
the set of representatives for isomorphism classes of groups that can be generated by a set
of elements of cardinality at most |S |. Let Φ be the set of functions S →UG, with G ∈Φ′,
whose image generates the group G. This is a jointly weakly initial set of objects in the
comma category S ↓U and a solution set for U : Group →Set.
To construct the initial object, which by Lemma 4.6.1 deﬁnes the free group on the
set S , form the product, indexed by the set Φ, of the groups appearing as codomains and
consider the induced map
S
ˆη−→U

Y
S →UG∈Φ
G
.
The map ˆη is the product of the objects of Φ in the category S ↓U. Let Γ be the subgroup
of the product Q
S →UG∈Φ G generated by the image of ˆη. We show that Γ is the free group
on S by proving that the codomain restriction η: S →UΓ is initial in S ↓U.
Given a group H and a function ψ: S →UH, let G ⊂H be the subgroup generated by
the image of S . By construction, ψ factors through its codomain restriction φ: S →UG,
and since G is generated by the image of this map, φ ∈Φ. The map φ equals the composite
of η: S →UΓ with the projection to the component indexed by φ, so we have found a way
to factor ψ through η via a homomorphism Γ →H. The uniqueness of this factorization
follows from the fact that Γ is generated by the image of S ; as ψ: S →UH speciﬁes the
images of these generators no alternate choices are possible.
Our next adjoint functor theorem requires a few preliminary deﬁnitions.
Definition 4.6.7. A generating set or generator for a category C is a set Φ of objects
that can distinguish between distinct parallel morphisms in the following sense: given
f, g: x ⇒y, if f , g then there exists some h: c →x with c ∈Φ so that fh , gh. A
cogenerating set in C is a generating set in Cop.

148
4. ADJUNCTIONS
Definition 4.6.8. A subobject of an object c ∈C is a monomorphism c′ ↣c with
codomain c. Isomorphic subobjects, that is, subobjects c′ ↣c ↢c′′ with a commuting
isomorphism c′  c′′, are typically identiﬁed.
Definition 4.6.9. The intersection of a family of subobjects of c is the limit of the diagram
of monomorphisms with codomain c.
The induced map from the limit to c is again a monomorphism. By Lemma 1.2.11(ii),
the legs of the limit cone are also monomorphisms. Thus, the intersection is the minimal
subobject that is contained in every member of the family of subobjects.
Theorem 4.6.10 (Special Adjoint Functor Theorem). Let U : A →S be a continuous
functor whose domain is complete and whose domain and codomain are locally small.
Furthermore, if A has a small cogenerating set and every collection of subobjects of a ﬁxed
object in A admits an intersection, then U admits a left adjoint.
In many categories, each object admits only a set’s worth of subobjects up to isomor-
phism, in which case completeness implies that every collection of subobjects admits an
intersection. The purpose for these hypotheses is that they are used to construct the initial
objects sought for in Lemma 4.6.1.
Lemma 4.6.11. Suppose C is locally small, complete, has a small cogenerating set Φ, and
has the property that every collection of subobjects has an intersection. Then C has an
initial object.
Proof. Form the product p = Q
k∈Φ k of the objects in the cogenerating set and form
the intersection i ,→p of all of the subobjects of p. We claim that i is initial.
To say that Φ is cogenerating is to say that for every c ∈C the canonical map
c ↣
Y
k∈Φ
kC(c,k) ,
whose component at an element f ∈C(c, k) is that morphism f : c →k, is a monomorphism.
There is a map Q
k∈Φ k →Q
k∈Φ kC(c,k), which is the product over k ∈Φ of the maps
∆: k →kC(c,k) deﬁned to be the identity on each component of the power kC(c,k). The
pullback
pc


⌟
/ c


p = Q
k∈Φ k Q
k∈Φ ∆/ Q
k∈Φ kC(c,k)
deﬁnes a subobject pc of p and thus a map i →pc →c from the intersection to c. There
cannot be more than one arrow from i to c because the equalizer of two distinct such would
deﬁne a smaller subobject of p, contradicting minimality of the intersection i. Thus, we
conclude that i is an initial object.
□
Proof of Theorem 4.6.10. Again, for each s ∈S, the category s↓U is locally small
and complete. Monomorphisms in s↓U are preserved and reﬂected by Π: s↓U →A, and
so the comma category s↓U has intersections of subobjects created by this functor. If Φ is
a cogenerating set for A, then the set
Φ′ = s →Ua
 a ∈Φ	
is cogenerating for s ↓U; because S is locally small, Φ′ is again a set. Applying Lemma
4.6.11, there is an initial object in each comma category s↓U, which provides a left adjoint
to U by Lemma 4.6.1.
□

4.6. EXISTENCE OF ADJOINT FUNCTORS
149
Example 4.6.12. The Special Adjoint Functor Theorem is an abstraction of the construction
of the Stone–Čech compactiﬁcation β: Top →cHaus, which deﬁnes a left adjoint to the
inclusion cHaus ,→Top. The unit interval I = [0, 1] ∈R is a cogenerating object in cHaus.
To see this, note that if f , g: X ⇒Y, there must be some x ∈X with f(x) , g(x). Then
Urysohn’s lemma can be used to deﬁne a continuous function h: Y →I with hf(x) = 0
and hg(x) = 1, so that in particular hf , hg. Given a topological space X, Theorem 4.6.10
constructs an initial object in X ↓cHaus in the following manner. A cogenerating family in
X ↓cHaus is given by the set of all maps X →I. By Proposition 3.3.8, the product of these
maps, considered as objects in X ↓cHaus, is the canonical map
X
ˆη−→
Y
Hom(X,I)
I .
A subobject of this object is a compact Hausdorﬀsubspace K ⊂Q
Hom(X,I) I containing the
image of ˆη. Because Q
Hom(X,I) I is compact Hausdorﬀ, a subspace is compact Hausdorﬀif
and only if it is closed. Thus, the intersection of all subobjects of ˆη: X →Q
Hom(X,I) I is
simply the codomain restriction η: X →β(X), where β(X) is the closure of the image of ˆη.
This constructs the Stone–Čech compactiﬁcation.
The adjoint functor theorems have a number of corollaries.
Corollary 4.6.13. Suppose C is locally small, complete, has a small cogenerating set,
and has the property that every collection of subobjects of a ﬁxed object has an intersection.
Then C is also cocomplete.
Proof. For any small category J, if C is locally small, then CJ is again locally small.
The constant diagram functor ∆: C →CJ preserves limits by Exercise 3.3.vi. Applying
Theorem 4.6.10, ∆has a left adjoint, which by Proposition 4.5.1 demonstrates that C has
all J-shaped colimits.
□
The arguments used to prove the adjoint functor theorems also specialize to give
conditions under which a set-valued limit-preserving functor is representable.
Corollary 4.6.14. Suppose C is locally small, complete, has a small cogenerating set,
and has the property that every collection of subobjects of a ﬁxed object has an intersection.
Then any continuous functor F : C →Set is representable.
Proof. By Theorem 4.6.10, F has a left adjoint L: Set →C. In particular, there is a
natural isomorphism
C(L(∗), c)  Set(∗, Fc)  Fc
where ∗∈Set denotes the singleton set. The object L(∗) ∈C represents F.
□
Theorem 4.6.15 (Freyd’s Representability Theorem). Let F : C →Set be a continuous
functor and suppose that C is complete and locally small. If F satisﬁes the solution set
condition:
• There exists a set Φ of objects of C so that for any c ∈C and any element x ∈Fc, there
exists an s ∈Φ, an element y ∈Fs, and a morphism f : s →c so that F f(y) = x.
then F is representable.
Proof. The solution set deﬁnes a jointly weakly initial set of objects in the comma
category ∗↓F 
R
F, where ∗∈Set is a singleton set. By Lemma 4.6.2, this category is
complete, and so by Lemma 4.6.5 it has an initial object. By Proposition 2.4.8, this deﬁnes
a representation for F.
□

150
4. ADJUNCTIONS
These corollaries aside, the Adjoint Functor Theorems 4.6.3 and 4.6.10 tend to be both
useless and widely applicable. Their ineﬀectualness stems from the fact that solution sets
or coseparating sets tend to be hard to ﬁnd in practice. At the same time, a very simple
general characterization of adjoint functors between a large family of categories can be
obtained from these theorems.
Definition 4.6.16. Let κ be a regular cardinal.12 A locally small category C is locally
κ-presentable if it is cocomplete and if it has a set of objects S so that:
(i) Every object in C can be written as a colimit of a diagram valued in the subcategory
spanned by the objects in S .
(ii) For each object s ∈S , the functor C(s, −): C →Set preserves κ-ﬁltered colimits.
A functor between locally κ-presentable categories is accessible if it preserves κ-ﬁltered
colimits.
For example, a large variety of categories whose objects are sets equipped with some
sort of “algebraic” structure are locally ﬁnitely presentable (meaning locally ω-presentable);
see Deﬁnition 5.5.5. A locally κ-presentable category is also locally λ-presentable for any
λ > κ.
Between locally presentable categories, meaning categories that are locally
κ-presentable for some κ, the adjoint functor theorem takes a particularly appealing form.
Theorem 4.6.17. A functor F : C →D between locally presentable categories
(i) admits a right adjoint if and only if it is cocontinuous.
(ii) admits a left adjoint if and only if it is continuous and accessible.
Proof sketch. Theorem 4.6.3 proves (ii): any accessible functor satisﬁes the solution
set condition; see [AR94, 1.66].
The dual of Theorem 4.6.10 proves (i): the colimit-generating set of objects S deﬁnes
a generator for C. A hard theorem proves that any object in a locally presentable category
admits at most a set’s worth of epimorphic quotients, up to isomorphism [AR94, 1.58].
Cocompleteness then implies that cointersections of quotient objects always exist.
□
The categories Ring and Rng are locally presentable and the inclusion is accessible,
and so Theorem 4.6.17 implies that a left adjoint to the inclusion Ring ,→Rng exists. But
this general result does not tell us anything useful about how it is constructed. Instead, we
sketch a direct construction of the left adjoint that will preview some of the themes from
the next chapter.
The inclusion Ring ,→Rng commutes with the underlying abelian group functors:
Ring  
⊥
/
U
"
⊣
Rng
U
}
⊣
(−)∗
s
Ab
F
b
F
=
Thus, by Proposition 4.4.4, its left adjoint must commute with the corresponding free
functors up to natural isomorphism.
As observed in Example 4.1.10(iii), the free unital ring on an abelian group A is the
graded ring
L
n≥0 A⊗n. Similarly, the free non-unital ring on A is
L
n>0 A⊗n. Commutativity
12A regular cardinal is an inﬁnite cardinal κ with the property that every union of fewer than κ sets each of
cardinality less than κ has cardinality less than κ.

4.6. EXISTENCE OF ADJOINT FUNCTORS
151
of the left adjoints tells us that
(
L
n>0 A⊗n)∗
L
n≥0 A⊗n .
That is, the free unital ring on a free non-unital ring is constructed by adjoining a copy of
A⊗0 B Z and using the componentwise addition and graded multiplication in the graded
ring
L
n≥0 A⊗n to deﬁne the ring structure.
By Proposition 5.4.3, one of the main results to be proven in the next chapter, any non-
unital ring R is the coequalizer of a pair of maps between free non-unital rings. By Theorem
4.5.3, R∗is then the coequalizer of the images of those maps between the corresponding
free unital rings. From this description we see that R∗ Z ⊕R and can easily guess and
verify that the addition is deﬁned componentwise, while the multiplication in R∗is deﬁned
by the “graded multiplication” formula:
(n, r) · (n′, r′) B (nn′, n′r + nr′ + rr′) .
Exercises.
Exercise 4.6.i. Give a direct proof of Lemma 4.6.2 along the lines of the argument used
in Proposition 3.3.8.
Exercise 4.6.ii. Use Theorem 4.6.3 to prove that the inclusion Haus ,→Top of the full
subcategory of Hausdorﬀspaces into the category of all spaces has a left adjoint. The
left adjoint carries a space to its “largest Hausdorﬀquotient.”
Conclude, by applying
Proposition 4.5.15, that the category of Hausdorﬀspaces, as a reﬂective subcategory of a
complete and cocomplete category, is again complete and cocomplete.
Exercise 4.6.iii. Suppose C is a locally small category with coproducts. Show that a
functor F : C →Set is representable if and only if it admits a left adjoint.


CHAPTER 5
Monads and their Algebras
A monad is just a monoid in the category of
endofunctors, what’s the problem?
Philip Walder, ﬁctional attribution by James Iry
[Iry09]
Consider an adjunction
C
F
/
⊥
D
U
o
η: 1C ⇒UF,
ϵ : FU ⇒1D
from the perspective of the category C (“home”), in ignorance of the category D (“abroad”).
From C, only part of the data of the adjunction is visible: the composite endofunctor
UF : C →C but neither U nor F individually, and the unit natural transformation but
only a whiskered version of the counit. In this chapter, we study the “shadow” cast by
an adjunction on the codomain of its right adjoint, the data of which forms a monad on
C. Monads are interesting in their own right but additionally so because, in unexpectedly
common situations, the category D can be recovered from the monad on C underlying
the adjunction. When this is the case, objects of D can be represented as algebras for
the monad on C. In general, a monad can be thought of as a syntactic representation of
algebraic structure that is potentially borne by objects in the category on which it acts.1
The general deﬁnition of a monad is introduced in §5.1 together with a range of
examples. As hinted here, any adjunction gives rise to a monad. The converse question,
of constructing an adjunction that presents a given monad, is investigated in §5.2, where
two universal solutions to this problem are described: the Kleisli and Eilenberg–Moore
categories, which can be constructed for any monad, also arise naturally in several areas of
mathematics.
The Eilenberg–Moore category, also called the category of algebras for the monad,
is our focus for the remainder of the chapter. In §5.3, we pose the question of identifying
whether a right adjoint functor U : D →C is equivalent to the forgetful functor from the
category of algebras of its monad, in which case the functor is called monadic. When D is
equivalent to the category of algebras, there are a number of pleasing consequences. The
ﬁrst consequence, proven in §5.4, is that every algebra admits a canonical presentation as
a quotient of free algebras. This construction generalizes the presentation of a group via
generators and relations.
The monadicity theorem, proven in §5.5, establishes necessary and suﬃcient conditions
for a right adjoint to be monadic. The concluding §5.6 explains our interest in recognizing
1Dually, the “shadow” cast by an adjunction on the codomain of its left adjoint deﬁnes a comonad, encoding
coalgebraic structure, examples of which are somewhat less common. So that the exposition aligns with the most
prominent examples, this dual theory will largely remain unacknowledged.
153

154
5. MONADS AND THEIR ALGEBRAS
categories of algebras: this characterization has signiﬁcant implications for the construction
of limits and colimits, which were hinted at in Chapters 3 and 4. For example, monoids,
groups, rings, modules over a ﬁxed ring, sets with an action of a ﬁxed group, pointed sets,
compact Hausdorﬀspaces, lattices, and so on all arise as algebras for a monad on the
category of sets. Fields do not, which explains why the category of ﬁelds shares few of the
properties that are common to the categories just described.
5.1. Monads from adjunctions
The abstract deﬁnition of a monad is relatively simple to state:
Definition 5.1.1. A monad on a category C consists of
• an endofunctor T : C →C,
• a unit natural transformation η: 1C ⇒T, and
• a multiplication natural transformation µ: T 2 ⇒T,
so that the following diagrams commute in CC:
T 3
Tµ +3
µT

T 2
µ

T
ηT +3
1T
#
T 2
µ

T
Tη
ks
1T
{
T 2
µ
+3 T
T
Remark 5.1.2. The diagrams in Deﬁnition 5.1.1 are reminiscent of the diagrams in Deﬁ-
nition 1.6.3. This is no coincidence. Monads, like (topological) monoids, unital rings, and
k-algebras, are all instances of monoids in a monoidal category. A monoidal category V is
a category equipped with a binary functor V × V →V and a unit object, together with some
additional coherence natural isomorphisms satisfying conditions that are described in §E.2.
A monad on C is precisely a monoid in the monoidal category CC of endofunctors on C,
where the binary functor CC × CC →CC is composition, and the unit object is the identity
endofunctor 1C ∈CC. The category of endofunctors is a strict monoidal category, in which
the coherence natural isomorphisms can be taken to be identities. Nonetheless, the notion
of monoid in a monoidal category is rather more complicated than the notion of monad on
a category, which is the point of the following joke from Iry’s “A Brief, Incomplete, and
Mostly Wrong History of Programming Languages” [Iry09]:
1990—A committee formed by Simon Peyton-Jones, Paul Hudak,
Philip Wadler, . . . creates Haskell, a pure, non-strict, functional lan-
guage. Haskell gets some resistance due to the complexity of using
monads to control side eﬀects. Wadler tries to appease critics by ex-
plaining that “a monad is a monoid in the category of endofunctors,
what’s the problem?”
One source of intuition is that a monad is the “shadow” cast by an adjunction on the
category appearing as the codomain of the right adjoint. Consider the adjunction
Set
F
/
⊥
Ab
U
o
η: 1Set ⇒UF,
ϵ : FU ⇒1Ab ,
and suppose we have forgotten entirely about the category of abelian groups. What structure
remains visible on the category of sets? First, there is an endofunctor, UF, which sends
a set to the set of ﬁnite formal sums of elements with integer coeﬃcients. There is also
the natural transformation η, the “unit map” whose component ηS : S →UFS sends an

5.1. MONADS FROM ADJUNCTIONS
155
element of the set S to the corresponding singleton sum. By contrast, the “evaluation
map” ϵ, whose component ϵA : FUA →A is the group homomorphism that evaluates a
ﬁnite formal sum of elements of the abelian group A to its actual sum in A, is not directly
visible. There is, however, a related natural transformation UϵFS : UFUFS →UFS
between endofunctors of Set, which is the evaluation map regarded as a function, not a
group homomorphism, and considered only in the special case of free groups.
For any adjunction, this triple of data deﬁnes a monad:
Lemma 5.1.3. Any adjunction
C
F
/
⊥
D
U
o
η: 1C ⇒UF,
ϵ : FU ⇒1D
gives rise to a monad on the category C serving as the domain of the left adjoint, with
• the endofunctor T deﬁned to be UF,
• the unit η: 1C ⇒UF serving as the unit η: 1C ⇒T for the monad, and
• the whiskered counit UϵF : UFUF ⇒UF serving as the multiplication µ: T 2 ⇒T
for the monad.
Proof. The triangles
UF
ηUF +3
1UF
 (
UFUF
UϵF

UF
UFη
ks
1UF
v~
UFUFUF
UFUϵF+3
UϵFUF

UFUF
UϵF

UF
UFUF
UϵF
+3 UF
commute by the triangle identities for the adjunction. The square commutes by naturality
of the vertical natural transformation Uϵ : UFU ⇒U.2
□
Example 5.1.4. The following monads come from familiar adjunctions:
(i) The free ⊣forgetful adjunction between pointed sets and ordinary sets of Example
4.1.10(i) induces a monad on Set whose endofunctor (−)+ : Set →Set adds a new
disjoint point. The components of the unit are given by the obvious natural inclusions
ηA : A →A+. The components of the multiplication µA : (A+)+ →A+ are deﬁned to
be the identity on the subset A and to send the two new points in (A+)+ to the new
point in A+. By Lemma 5.1.3, or by a direct veriﬁcation, the diagrams
((A+)+)+
(µA)+ /
µA+

(A+)+
µA

A+
ηA+ /
1A+
"
(A+)+
µA

A+
(ηA)+
o
1A+
|
(A+)+
µA
/ A+
A+
commute. Particularly in computer science, this monad is called the maybe monad,
for reasons that are explained in Example 5.2.10(i). There is a similar monad on Top,
or any category with coproducts, which acts by adjoining a copy of a ﬁxed object (in
this case a point).
2Note that the two composites deﬁne the horizontal composite natural transformation (see Lemma 1.7.4):
C
F
⇓ϵ
C
F
⇓ϵ
C
F / D
U
?
D
U
?
D
U / C

156
5. MONADS AND THEIR ALGEBRAS
(ii) The free monoid monad is induced by the free ⊣forgetful adjunction between
monoids and sets of Example 4.1.10(ii). The endofunctor T : Set →Set is deﬁned
by
TA B
a
n≥0
An ,
that is, TA is the set of ﬁnite lists of elements in A; in computer science contexts,
this monad is often called the list monad. The components of the unit ηA : A →TA
are deﬁned by the evident coproduct inclusions, sending each element of A to the
corresponding singleton list. The components of the multiplication µA : T 2A →TA
are the concatenation functions, sending a list of lists to the composite list.
A
categorical description of this map is given in Exercise 5.1.i, which demonstrates
that the free monoid monad can also be deﬁned in any monoidal category with
coproducts that distribute over the monoidal product.
(iii) The free ⊣forgetful adjunction between sets and the category of R-modules of
Example 4.1.10(v) induces the free R-module monad R[−]: Set →Set. Deﬁne
R[A] to be the set of ﬁnite formal R-linear combinations of elements of A. Formally,
a ﬁnite R-linear combination is a ﬁnitely supported function χ: A →R, meaning a
function for which only ﬁnitely many elements of its domain take non-zero values.
Such a function might be written as P
a∈A χ(a) · a. The components ηA : A →R[A]
of the unit send an element a ∈A to the singleton formal R-linear combination
corresponding to the function χa : A →R that sends a to 1 ∈R and every other
element to zero. The components µA : R[R[A]] →R[A] of the multiplication are
deﬁned by distributing the coeﬃcients in a formal sum of formal sums. Special cases
of interest include the free abelian group monad and the free vector space monad.
(iv) The free ⊣forgetful adjunction between sets and groups induces the free group
monad F : Set →Set that sends a set A to the set F(A) of ﬁnite words in the letters
a ∈A together with formal inverses a−1.
(v) The composite adjunction
cHaus
/
⊥
Top
β
o
U
/
⊥
Set
D
o
induces a monad β: Set →Set that sends a set to the underlying set of the Stone–
Čech compactiﬁcation of the discrete space on that set. There is a simpler description:
β(A) is the set of ultraﬁlters on A. An ultraﬁlter is a set of subsets of A that is upward
closed, closed under ﬁnite intersections, and for each subset of A contains either that
subset or its complement but not both; see Exercise 5.1.ii.
(vi) The adjunction
DirGraph
F
/
⊥
Cat
U
o
of Example 4.1.13 induces a monad on DirGraph that carries a directed graph G to
the graph with the same vertices but whose edges are ﬁnite (directed) paths of edges
in G. This is the underlying directed graph of the free category on G. The graph
homomorphism ηG : G →UF(G) includes G as the subgraph of “unary” edges.
(vii) By Example 4.3.8, the contravariant power set functor is its own mutual right adjoint:
Set
P
/
⊥
Setop
P
o
Set(A, PB)  Set(B, PA)

5.1. MONADS FROM ADJUNCTIONS
157
A function from A to the power set of B, or equally a function from B to the power
set of A, can be encoded as a function A × B →Ω, i.e., as a subset of A × B. The
induced double power set monad takes a set A to P2A. The components of the
unit are the “principle ultraﬁlter” functions ηA : A →P2A that send an element a to
the set of subsets of A that contain a. The components of the multiplication take
a set of sets of sets of subsets to the set of subsets of A with the property that one
of the sets of sets of subsets is the set of all sets of subsets of A that include that
particular subset as an element.3 A similar monad can be deﬁned with any other
set in place of the two-element set Ω; in computer science contexts, these are called
continuation monads. This construction can also be generalized to other cartesian
closed categories. For instance, there is a similar double dual monad on Vectk.
Example 5.1.5. Monads also arise in nature:
(i) The covariant power set functor P: Set →Set is also a monad. The unit ηA : A →PA
sends an element to the singleton subset. The multiplication µA : P2A →PA takes the
union of a set of subsets. Naturality of the unit with respect to a function f : A →B
makes use of the fact that f∗: PA →PB is the direct image (rather than inverse
image) function. Naturality of the multiplication maps makes use of Corollary 4.5.4;
the direct image function, as a left adjoint, preserves unions.
A
f

ηA
/ PA
f∗

P2A
( f∗)∗
µA
/ PA
f∗

B
ηB
/ PB
P2B
µB
/ PB
(ii) A modiﬁcation of the free monoid monad yields the free commutative monoid
monad deﬁned by
TA B
a
n≥0
(A×n)/Σn .
Elements are ﬁnite unordered lists of elements, or equally ﬁnitely supported functions
A →N.
(iii) There is a monad −× N: Set →Set. We might think of the second component
of an element (a, n) ∈A × N as a discrete time variable. The unit A →A × N is
deﬁned by a 7→(a, 0) and the multiplication A × N × N →A × N is deﬁned by
(a, m, n) 7→(a, m+n). A similar monad exists with (N, +, 0) replaced by any monoid,
and this example can be generalized further from Set to any monoidal category.
(iv) The Giry monad acts on the category Meas of measurable spaces and measurable
functions. A measurable space is a set equipped with a σ-algebra of “measurable”
subsets, and a function f : A →B between measurable spaces is measurable if the
preimage of any measurable subset of B is a measurable subset of A. The Giry
monad sends a measurable space A to the measurable space Prob(A) of probability
measures on A, equipped with the smallest σ-algebra so that, for each measurable
subset X ⊂A, the evaluation function evX : Prob(A) →I is measurable. The unit is
the measurable function ηA : A →Prob(A) that sends each element a ∈A to the Dirac
measure, which assigns a subset the probability 1 if it contains a and 0 otherwise.
The multiplication is deﬁned using integration; see [Gir82] or [Ave16] for details.
Brieﬂy:
3This is one of those instances where it is easier to speak mathematics than to speak English: the multiplication
is the inverse image function for the map ηPA : PA →P3A.

158
5. MONADS AND THEIR ALGEBRAS
Definition 5.1.6. A comonad on C is a monad on Cop: explicitly, a comonad consists of an
endofunctor K : C →C together with natural transformations ϵ : K ⇒1C and δ: K ⇒K2
so that the diagrams dual to Deﬁnition 5.1.1 commute in CC.
A comonad is a comonoid in the category of endofunctors of C. By the dual to Lemma
5.1.3, any adjunction induces a comonad on the domain of its right adjoint.
Example 5.1.7. A monad on a preorder (P, ≤) is given by an order-preserving function
T : P →P that is so that p ≤T p and T 2p ≤T p. If P is a poset, so that isomorphic objects
are equal, these two conditions imply that T 2p = T p. An order-preserving function T so
that p ≤T p and T 2p = T p is called a closure operator. Dually, a comonad on a poset
category (P, ≤) deﬁnes a kernel operator: an order-preserving function K so that Kp ≤p
and Kp = K2p.
For example, the poset PX of subsets of a topological space X admits a closure operator
TA = A, where A is the closure of A ⊂X, and a kernel operator KA = A◦, where A◦is the
interior of A ⊂X.4
Exercises.
Exercise 5.1.i. Suppose V is a monoidal category (see §E.2), i.e., a category with a
bifunctor ⊗: V × V →V that is associative up to coherent natural isomorphism5 and a
unit object ∗∈V with natural isomorphisms v ⊗∗ v  ∗⊗v. Suppose also that V has
ﬁnite coproducts and that the bifunctor ⊗preserves them in each variable.6 Show that
T(X) = `
n≥0 X⊗n deﬁnes a monad on V by deﬁning natural transformations η: 1V ⇒T
and µ: T 2 ⇒T that satisfy the required conditions.
Exercise 5.1.ii. Show that the functor β: Set →Set that carries a set to the set of
ultraﬁlters on that set is a monad by deﬁning unit and multiplication natural transformations
that satisfy the unit and associativity laws. (Hint: The ultraﬁlter monad is a submonad of
the double power set monad P2 : Set →Set.)
Exercise 5.1.iii. The adjunction associated to a reﬂective subcategory of C induces an
idempotent monad on C. Prove that the following three characterizations of an idempotent
monad (T, η, µ) are equivalent:
(i) The multiplication µ: T 2 ⇒T is a natural isomorphism (hence, the appellation
“idempotent”).
(ii) The natural transformations ηT, Tη: T ⇒T 2 are equal.
(iii) Each component of µ: T 2 ⇒T is a monomorphism.
5.2. Adjunctions from monads
We have seen, in Lemma 5.1.3, that any adjunction presents a monad on the category
serving as the domain of its left adjoint. A natural question is whether all monads arise this
way. For instance, is there any adjunction that gives rise to the power set monad on Set?
Perhaps surprisingly, the answer is yes: any monad T on a category C can be recovered
from two (typically distinct) adjunctions that are moreover universal with this property. The
initial such adjunction, in a category to be introduced shortly, is between C and the Kleisli
4The closure of A is the smallest closed set containing A, equally the intersection of all closed sets containing
A; the interior is deﬁned dually.
5Rather than worry about what this means, feel free to assume that there is a well-deﬁned n-ary functor
V×n ⊗n
−−→V built from the bifunctor ⊗.
6In particular, (v ⊔v′) ⊗(w ⊔w′)  v ⊗w ⊔v′ ⊗w ⊔v ⊗w′ ⊔v′ ⊗w′.

5.2. ADJUNCTIONS FROM MONADS
159
category CT of T. The terminal such adjunction is between C and the Eilenberg–Moore
category CT of T, also called the category of T-algebras.
The sense in which a monad deﬁnes a syntactic encoding of a particular variety of
algebraic structure on C is explained by the construction of the category of algebras, the
intuition for which we develop in an example. Recall that an aﬃne space, over a ﬁxed ﬁeld
k, is like a “vector space that has forgotten its origin.” An n-dimensional aﬃne space is a
set A equipped with a translation automorphism for each n-dimensional vector. This action
is simply transitive in the sense that any two points in aﬃne space can be “subtracted” to
obtain a unique vector. Choosing an origin o ∈A deﬁnes a bijection between points a ∈A
in the aﬃne space and vectors ⃗v = a −o ∈kn. In summary:
Definition 5.2.1. Given a vector space V over a ﬁeld k, an aﬃne space is a non-empty set
A together with a “translation” function V × A
+−→A so that
• ⃗0 + a = a for all a ∈A;
• (⃗v + ⃗w) + a = ⃗v + (⃗w + a) for all ⃗v, ⃗w ∈V and a ∈A; and
• for any a ∈A, the function −+ a: V →A is a bijection.
There is an equivalent deﬁnition that allows us to deﬁne an aﬃne space without making
use of the auxiliary vector space V. If we temporarily ﬁx an origin o ∈A, then for any pair
of elements a, b ∈A of the aﬃne space and any scalar λ ∈k, we can exploit the bijection
−+ o: V →A to see that there is a unique c ∈A so that
c −o = λ(a −o) + (1 −λ)(b −o) .
This element c is sensibly denoted by λa + (1 −λ)b and is independent of the choice of
origin. More generally, for any n-tuple a1, . . . , an ∈A and scalars λ1, . . . , λn ∈k with
λ1 + · · · + λn = 1, there is a unique element λ1a1 + · · · + λnan ∈A deﬁned analogously as
an aﬃne linear combination of ai. This leads to a second equivalent deﬁnition of aﬃne
space.
Definition 5.2.2. An aﬃne space is a non-empty set A in which aﬃne linear combinations
can be evaluated.
To make this precise, deﬁne Aﬀk(A) to be the set of ﬁnite formal aﬃne linear combi-
nations Pn
i=1 λiai so that Pn
i=1 λi = 1; a sum is aﬃne precisely when the coeﬃcients sum to
1 ∈k. To say “these can be evaluated” means there is a function evA : Aﬀk(A) →A. For
this map to deﬁne a reasonable evaluation function, a few axioms are required:
• If ηA : A →Aﬀk(A) is the “singleton” function and µA : Aﬀk(Aﬀk(A)) →Aﬀk(A) is
the “distributivity” function, then the following diagrams
A
ηA
/
1A
"
Aﬀk(A)
evA

Aﬀk(Aﬀk(A))
µA
/
Aﬀk(evA)

Aﬀk(A)
evA

A
Aﬀk(A)
evA
/ A
commute in Set.
The ﬁrst condition says that the value of a singleton sum 1 · a is the element a. The second
condition says that an aﬃne linear combination of aﬃne linear combinations
λ1 · (µ11a11 + · · · + µ1n1a1n1) + · · · + λk · (µk1ak1 + · · · + µknkaknk)
can be evaluated by ﬁrst distributing—note that P
i
P
j λiµi j = 1—and then evaluating or
by ﬁrst evaluating inside each of the k sets of parentheses and then evaluating the resulting
aﬃne linear combination. In summary, the precise meaning of Deﬁnition 5.2.2 is:

160
5. MONADS AND THEIR ALGEBRAS
Definition 5.2.3. An aﬃne space is an algebra for the aﬃne linear combination monad
Aﬀk(−): Set →Set.
Let us now introduce the general deﬁnition.
Definition 5.2.4. Let C be a category with a monad (T, η, µ). The Eilenberg–Moore
category for T or the category of T-algebras is the category CT whose:
• objects are pairs (A ∈C, a: TA →A), so that the diagrams
(5.2.5)
A
ηA
/
1A
 
TA
a

T 2A
µA
/
Ta

TA
a

A
TA
a
/ A
commute in C, and
• morphisms f : (A, a) →(B, b) are T-algebra homomorphisms: maps f : A →B in C
so that the square
TA
a

T f
/ T B
b

A
f
/ B
commutes, with composition and identities as in C.
For instance, algebras for the aﬃne space monad Aﬀk on Set are precisely aﬃne spaces
in the sense of Deﬁnition 5.2.2. This is a representative example: the abstract deﬁnition of
5.2.4, which is a priori a bit strange, precisely captures familiar notions of “algebra,” of the
variety encoded by the monad (T, η, µ).
Example 5.2.6. For instance:
(i) Consider the free pointed set monad of Example 5.1.4(i). An algebra is a set A with
a map a: A+ →A so that the diagrams (5.2.5) commute. The square imposes no
additional conditions, but the triangle asserts that the map a: A+ →A restricts to the
identity on the A component of the disjoint union A+ = A ⊔{∗}. Thus, the data of an
algebra is a set with a speciﬁed basepoint a ∈A, the image of the extra point ∗under
the map a: A+ →A. A morphism f : (A, a) →(B, b) is a map f : A →B so that
A+
f+
/
a

B+
b

A
f
/ B
commutes. The map f+ carries the extra point in A+ to the extra point in B+, so this
condition demands that f(a) = b. In conclusion, the Eilenberg–Moore category is
isomorphic to Set∗, the category of pointed sets.
(ii) For any unital ring R, there is a monad R ⊗Z −on Ab derived from the adjunction
Ab
R⊗Z−/
⊥
ModR
U
o

5.2. ADJUNCTIONS FROM MONADS
161
of Example 4.1.10(xii). An algebra is an abelian group A equipped with a homomor-
phism ·: R⊗ZA →A satisfying a pair of axioms. By the universal property of the ten-
sor product, this homomorphism encodes a Z-bilinear map (r, a) 7→r·a: R×A →A,
which we call “scalar multiplication.” The commutative diagrams
A
ηA
/
1A
"
R ⊗Z A
·

R ⊗Z R ⊗Z A
R⊗Z·

µA
/ R ⊗Z A
·

A
R ⊗Z A
·
/ A
ensure 1 · a = a and r · (r′ · a) = (rr′) · a, i.e., that this action is associative and unital.
In conclusion, an algebra for the monad R ⊗Z −on Ab is precisely an R-module.
(iii) An algebra for the free monoid monad of Example 5.1.4(ii) is a set A with a map
α: `
n≥0 An →A, whose component functions αn : An →A specify an n-ary opera-
tion on A for each n, satisfying certain conditions. The unit triangle
A
ηA
/
1A
#
`
n≥0 An
α

A
asserts that the unary operation α1 is the identity. The commutative square
(5.2.7)
`
n≥0(`
m≥0 Am)n
µA
/
`
n≥0 αn

`
k≥0 Ak
α

`
n≥0 An
α
/ A
imposes an associativity condition on the operations.
An element of the upper
left-hand set is a list
((a11, . . . , a1m1), . . . , (an1, . . . , anmn))
of n varying-length lists of elements of A. Commutativity of (5.2.7) demands that
the result of applying the (m1 + · · · + mn)-ary operation to the concatenated list is the
same as applying the n-ary operation to the results of applying the mi-ary operations
to each sublist.
Recall that a monoid is a set A with an associative binary operation A2 →A and
a unit element e ∈A. A monoid deﬁnes an algebra for the free monoid monad: the
nullary operation 1 →A picks out the unit element e, the unary operation A →A is
necessarily the identity, the binary operation A2 →A is given, and the operations of
higher arity are determined by iterating the binary operation; associativity implies
that this is well-deﬁned.
Conversely, any algebra for the free monoid monad deﬁnes a monoid, whose unit
and binary operations are deﬁned to be the components α0 : 1 →A and α2 : A2 →A
of the map α: `
n≥0 An →A. The associativity condition (5.2.7) implies in particular
that the ternary product of three elements a1, a2, a3 ∈A is equal to both of the iterated
binary products (a1 · a2) · a3 and a1 · (a2 · a3):
α2(α2(a1, a2), a3) = α3(a1, a2, a3) = α2(a1, α2(a2, a3)) .
The square (5.2.7) also implies that the composite of the binary operation with the
nullary operation in one of its inputs is equal to the identity unary operation.

162
5. MONADS AND THEIR ALGEBRAS
By Exercise 5.2.i, algebra morphisms correspond precisely to monoid homo-
morphisms. Thus, we conclude that the category of algebras for the free monoid
monad is isomorphic to the category Monoid of associative unital monoids.
(iv) An algebra for the closure closure operator7 on the poset of subsets of a topological
space X is exactly a closed subset of X. Dually, a coalgebra8 for the interior kernel
operator is exactly an open subset.
Various notations are common for the Eilenberg–Moore category, many involving the
string “adj” to emphasize the interpretation of its objects as “algebras” of some sort. The
notation used here, while less evocative, has the virtue of being concise.
Lemma 5.2.8. For any monad (T, η, µ) acting on a category C, there is an adjunction
C
FT
/
⊥
CT
UT
o
between C and the Eilenberg–Moore category whose induced monad is (T, η, µ).
Proof. The functor UT : CT →C is the evident forgetful functor.
The functor
FT : C →CT carries an object A ∈C to the free T-algebra
FTA B (TA, µA : T 2A →TA)
and carries a morphism f : A →B to the free T-algebra morphism
FTf B (TA, µA)
T f
−−→(T B, µB) .
Note that UT FT = T.
The unit of the adjunction FT ⊣UT is given by the natural transformation η: 1C ⇒T.
The components of the counit ϵ : FTUT ⇒1CT are deﬁned as follows:
ϵ(A,a) B (TA, µA)
a−→(A, a)
T 2A
Ta
/
µA

TA
a

TA
a
/ A
That is, the component of the counit at an algebra (A, a) ∈CT is given by the algebra
structure map a: TA →A; the commutative square demonstrates that this map deﬁnes a
T-algebra homomorphism a: (TA, µA) →(A, a). Note, in particular, that UTϵFT
A = µA,
so that the monad underlying the adjunction FT ⊣UT is (T, η, µ). The straightforward
veriﬁcations that the unit and counit satisfy the triangle identities are left to Exercise
5.2.ii.
□
A second solution to the problem of ﬁnding an adjunction that induces a given monad
is given by the Kleisli category construction.
Definition 5.2.9. Let C be a category with a monad (T, η, µ). The Kleisli category CT is
deﬁned so that
• its objects are the objects of C, and
• a morphism from A to B in CT, depicted as A ⇝B, is a morphism A →T B in C.
Identities and composition are deﬁned using the monad structure:
7This is not a typo: Example 5.1.7 describes a closure operator on the poset of subsets of a topological space
that sends a subset to its closure.
8Interpreting Deﬁnition 5.2.4 for a monad (T, η, µ) on Cop deﬁnes the category of coalgebras for the comonad
on C; see Exercise 5.2.iii.

5.2. ADJUNCTIONS FROM MONADS
163
• The unit ηA : A →TA deﬁnes the identity morphism A ⇝A ∈CT.
• The composite of a morphism f : A →T B from A to B with a morphism g: B →TC
from B to C is deﬁned to be
A
f
/ T B
Tg / T 2C
µC
/ TC .
The veriﬁcation that these operations are associative and unital is left as Exercise 5.2.iv.
Example 5.2.10. For instance:
(i) Objects in the Kleisli category for the maybe monad on Set are sets. A map A ⇝B
in the Kleisli category is a function A →B+, which may be thought of as a partially-
deﬁned function from A to B: the elements of A that are sent to the free basepoint
have “undeﬁned” output. The composite of two partial functions is the maximal
partially-deﬁned function. Thus, the Kleisli category is the category Set∂of sets and
partially-deﬁned functions.
(ii) Objects in the Kleisli category for the free monoid monad on Set are sets and a map
from A to B is a function A →`
n≥0 Bn. For each input element a ∈A, the output is
an element (b1, . . . , bk) ∈`
n≥0 Bn, i.e., a list of elements of B.
(iii) For a ﬁxed set S of “states,” the adjunction S ×−⊣(−)S induces a monad (S ×−)S on
Set. A map A ⇝B in the Kleisli category is, by adjunction, a function f : A × S →
B × S that takes an input a ∈A together with the current state s ∈S and returns
an output fs(a), dependent on both the input and the state, together with a new
“updated” state s′ ∈S . Monads of this form make an appearance in certain functional
programming languages such as Haskell, where the updated state is interpreted as a
“side eﬀect” of the computation f.
(iv) The Kleisli category for the Giry monad of Example 5.1.5(iv) is the category of
measurable spaces and Markov kernels. For instance, a ﬁnite set deﬁnes a measur-
able space with discrete σ-algebra. An endomorphism of this object in the Kleisli
category is a discrete time Markov chain.
Lemma 5.2.11. For any monad (T, η, µ) acting on a category C, there is an adjunction
C
FT
/
⊥
CT
UT
o
between C and the Kleisli category whose induced monad is (T, η, µ).
Proof. The functor FT is the identity on objects and carries a morphism f : A →B in
C to the morphism A ⇝B in CT deﬁned by
Ft f B A
f−→B
ηB
−−→T B .
The functor UT sends an object A ∈CT to TA ∈C and sends a morphism A ⇝B
represented by g: A →T B to
UTg B TA
Tg
−−→T 2B
µB
−−→T B .
Elementary diagram chases, left as Exercise 5.2.v, demonstrate that both mappings are
functorial. Note in particular that UT FT = T. From the deﬁnition of the hom-sets in CT,
there are isomorphisms
CT(FT A, B)  C(A, T B)  C(A, UT B) ,
which are natural in both variables. This establishes the adjunction FT ⊣UT.
□

164
5. MONADS AND THEIR ALGEBRAS
For any monad (T, η, µ) on C, there is a category AdjT whose objects are fully-speciﬁed
adjunctions
C
F
/
⊥
D
U
o
η: 1C ⇒UF,
ϵ : FU ⇒1D
inducing the monad (T, η, µ) on C. A morphism
D
K
/
U

⊣
D′
U′
~
⊣
C
F
_
F′
>
from F ⊣U to F′ ⊣U′ is a functor K : D →D′ commuting with both the left and right
adjoints, i.e., so that KF = F′ and U′K = U. Because the units of F ⊣U and F′ ⊣U′ are
the same, by Exercise 4.2.v the commutativity of K with the right and left adjoints implies
further that
(i) the whiskered composites Kϵ = ϵ′K of K with the counits of F ⊣U and F′ ⊣U′
coincide, and
(ii) K carries the transpose in D of a morphism c →Ud = U′Kd to the transpose of this
morphism in D′.
Proposition 5.2.12. The Kleisli category CT is initial in AdjT and the Eilenberg–Moore
category CT is terminal. That is, for any adjunction F ⊣U inducing the monad (T, η, µ) on
C, there exist unique functors
CT
UT

⊣
J
∃!
/ D
U

⊣
K
∃!
/ CT
UT

⊣
C
FT
_
F
O
FT
?
commuting with the left and right adjoints.
Because the functors J and K deﬁne adjunction morphisms, they must commute with
the counits of the adjunctions and preserve transposition, facts that can be used to deduce
the correct deﬁnitions of these functors.
Proof. We argue that there exist unique adjunction morphisms from the Kleisli ad-
junction to F ⊣U and from F ⊣U to the Eilenberg–Moore adjunction. Write ϵ : FU ⇒1D
for the counit of F ⊣U. The hypothesis that this adjunction induces the monad (T, η, µ) on
C implies that UϵF = µ.
On objects c ∈CT, we are forced to deﬁne Jc = Fc so that JFT = F. A morphism
f : c ⇝c′ in CT is the transpose, under Ft ⊣UT, of the representing morphism f : c →
Tc′ = UTc′ in C, so the requirement that J commutes with transposition forces us to deﬁne
J f to be the transpose
J f B Fc
F f
−−→FUFc′ ϵFc′
−−−→Fc′
of f under F ⊣U. The proof that these deﬁnitions are functorial, left to Exercise 5.2.vi,
makes use of the fact that UϵF = µ.
To deﬁne the functor K on an object d ∈D so that UT K = U, we seek a suitable T-
algebra structure for the object Ud ∈C. For any algebra (c, γ: Tc →c) ∈CT, the algebra
structure map γ appears as the component of the counit of FT ⊣UT at the object (c, γ); see
the proof of Lemma 5.2.8. Thus, γ can be recognized as the morphism γ: (Tc, µc) →(c, γ)

5.2. ADJUNCTIONS FROM MONADS
165
from the free T-algebra on c to the given T-algebra that is the transpose of the identity
on c = UT(c, γ). The fact that K preserves transposes now tells us that we should deﬁne
Kd = (Ud, Uϵd); the proof that Uϵd : UFUd →Ud is an algebra structure map makes use
of the fact that UϵF = µ. On morphisms, the condition UT K = U forces us to deﬁne the
image of f : d →d′ to be U f : (Ud, Uϵd) →(Ud′, Uϵd′), and indeed this is a morphism of
algebras. Functoriality in this case is obvious.
□
Proposition 5.2.12 implies, in particular, that there is a unique functor from the Kleisli
category for any monad to the Eilenberg–Moore category that commutes with the free and
forgetful functors from and to the underlying category. The following result characterizes
its image.
Lemma 5.2.13. Let (T, η, µ) be a monad on C. The canonical functor K : CT →CT from
the Kleisli category to the Eilenberg–Moore category is full and faithful and its image
consists of the free T-algebras.
For ease of future reference, recall:
Definition 5.2.14. A free T-algebra is an object
FTc B (Tc, µc : T 2c →Tc)
in the category of algebras that is in the image of the free functor FT : C →CT.
Proof. The proof of Proposition 5.2.12 supplies the deﬁnition of the functor on objects:
Kc B (Tc, µc), Tc being the object UTc and µc being UT of the component of the counit of
the Kleisli adjunction at the object c ∈CT.
Applying Exercise 4.2.v, for each pair c, c′ ∈CT, the action of the functor K on the
hom-set from c to c′
CT(c, c′)
K
/ CT(Kc, Kc′) = CT((Tc, µc), (Tc′, µc′))
commutes with the transposition natural isomorphisms identifying both of these hom-sets
with C(c, Tc′). In particular, this map must also be an isomorphism, demonstrating that the
functor K : CT →CT is full and faithful.
□
The upshot of Lemma 5.2.13 is that the Kleisli category for a monad embeds as the
full subcategory of free T-algebras and all maps between such. Lemma 5.2.13 also tells us
precisely when the Kleisli and Eilenberg–Moore categories are equivalent: this is the case
when all algebras are free. For instance, all vector spaces are free modules over any chosen
basis, so the Kleisli and Eilenberg–Moore categories for the free vector space monad are
equivalent. Another equivalence of this form, for the maybe monad on Set, appears in
disguise in Example 1.5.6.
Exercises.
Exercise 5.2.i. Pick your favorite monad on Set induced from a free ⊣forgetful adjunction
involving some variety of algebraic structure borne by sets, identify its algebras, and show
that algebra morphisms are precisely the homomorphisms, in the appropriate sense.
Exercise 5.2.ii. Fill in the remaining details in the proof of Lemma 5.2.8 to show that the
free and forgetful functors relating a category C with a monad T to the category CT of
T-algebras are adjoints, inducing the given monad T.
Exercise 5.2.iii. Dualize Deﬁnition 5.2.4 and Lemma 5.2.8 to deﬁne the category of
coalgebras for a comonad together with its associated forgetful–cofree adjunction.

166
5. MONADS AND THEIR ALGEBRAS
Exercise 5.2.iv. Verify that the Kleisli category is a category by checking that the com-
position operation of Deﬁnition 5.2.9 is associative and unital.
Exercise 5.2.v. Verify that the assignments FT and UT deﬁned in the proof of Lemma
5.2.11 are functorial.
Exercise 5.2.vi. Fill in the remaining details in the proof of Proposition 5.2.12: verify the
functoriality of J and K and show that the whiskered composites of the counits of these
three adjunctions with K and J agree.
Exercise 5.2.vii. From the canonical functor K : CT →CT of Lemma 5.2.13 that embeds
the Kleisli category into the Eilenberg–Moore category for a monad T on C, one can deﬁne
a “restricted Yoneda” functor
CT
CT (K−,−)
/ SetCop
T
(A, α)
7→
CT(K−, (A, a))
that constructs a presheaf on the Kleisli category for each T-algebra (A, a). Show that
the presheaves in the image of this functor restrict along FT : C →CT to representable
functors in SetCop. In fact, this functor deﬁnes an isomorphism between the Eilenberg–
Moore category and the full subcategory of presheaves on the Kleisli category that restrict
along FT to representable functors.
5.3. Monadic functors
The free ⊣forgetful adjunction
Set
F
/
⊥
Ab
U
o
between sets and abelian groups described in Example 4.1.10(iv) induces a monad Z[−] on
Set. Given a set S , Z[S ] is deﬁned to be the set of ﬁnite formal Z-linear combinations of
elements of S , and the map Z[ f]: Z[S ] →Z[T] associated to a function f : S →T carries a
formal sum n1s1+· · ·+nksk, with ni ∈Z and si ∈S , to the formal sum n1 f(s1)+· · ·+nk f(sk);
see Exercise 4.1.iv. By Proposition 5.2.12, there is a unique functor
Ab
/
U
!
⊢
SetZ[−]
UZ[−]
{
⊣
Set
F
a
FZ[−]
;
from the category of abelian groups to the category of Z[−]-algebras that commutes with
the left and right adjoints. The image of an abelian group A is the algebra consisting of
the underlying set of A together with the “evaluation” map ϵA : Z[A] →A that interprets a
ﬁnite formal sum as a ﬁnite sum, a single element of A.
In fact, this functor deﬁnes an isomorphism of categories: to equip a set A with an
“evaluation” function α: Z[A] →A, so that diagrams
A
ηA
/
1A
!
Z[A]
α

Z[Z[A]]
µA
/
Z[α]

Z[A]
α

A
Z[A]
α
/ A

5.3. MONADIC FUNCTORS
167
commute is precisely to give A the structure of an abelian group. The commutative triangle
is a “sanity check” for the evaluation function, asserting that it sends a singleton sum
a ∈Z[A] to the element a. The remaining group axioms are imposed by the commutative
rectangle: in particular, the values assigned to the sums of sums (a1 + a2) + (a3) and
(a1) + (a2 + a3) are equal.
Moreover, an algebra homomorphism
Z[A]
Z[f] /
α

Z[B]
β

A
f
/ B
is a function f : A →B that preserves the evaluation of formal sums, i.e., a group homo-
morphism.
The observations just made, that the canonical comparison functor deﬁnes an isomor-
phism from the category of abelian groups to the category of algebras for the free abelian
group monad, are expressed by saying that the category of abelian groups is monadic over
the category of sets.
Definition 5.3.1.
• An adjunction C
F
/
⊥
D
U
o
is monadic if the canonical comparison functor from D
to the category of algebras for the induced monad on C deﬁnes an equivalence of
categories.
• A functor U : D →C is monadic if it admits a left adjoint that deﬁnes a monadic
adjunction.
Example 5.3.2. The Kleisli adjunction for the maybe monad is identiﬁed in Example
5.2.10(i) as the adjunction between the category of sets and the category of sets and
partially-deﬁned functions:
Set
/
⊥
Set∂.
o
This adjunction is monadic. The associated category of algebras is Set+ and the canonical
comparison functor Set∂→Set+ is part of the equivalence of categories described in
Example 1.5.6.
Many of the monadic functors that one meets in practice, such as the example U : Ab →
Set considered above, are in fact strictly monadic, meaning that the canonical comparison
functor deﬁnes an isomorphism of categories.
Whether this comparison functor is an
equivalence or an isomorphism will not make a substantial diﬀerence to the theory.
A particularly simple family of examples of monadic functors is given by inclusions of
reﬂective subcategories (see Deﬁnition 4.5.12). Consider a reﬂective subcategory D ,→C
with reﬂector L. The induced endofunctor L: C →C deﬁnes a monad on C with unit
ηC : C →LC and multiplication a natural isomorphism L2C  LC.
A monad whose
multiplication natural transformation is invertible is called an idempotent monad; see
Exercises 4.5.vii and 5.1.iii.

168
5. MONADS AND THEIR ALGEBRAS
Proposition 5.3.3. The inclusion D ,→C of a reﬂective subcategory is monadic: that is,
the functor
D
K
/
 o

⊢
CL
UL
~
⊣
C
L
_
FL
>
from D to the category of algebras CL for the induced idempotent monad L is an equivalence
of categories.
Proof. An L-algebra is an object C ∈C together with a map c: LC →C that is
a retraction of the unit component ηC. In fact, ηC and c are inverse isomorphisms. By
naturality of η, ηC · c = Lc · ηLC, but ηLC = LηC, as both maps are left inverse to the
isomorphism µC, and so Lc · ηLC = Lc · LηC = 1LC. So if C ∈C admits the structure of an
L-algebra, then its unit component must be invertible. In fact, this necessary condition also
suﬃces: the map η−1
C : LC →C automatically satisﬁes the associativity condition required
to deﬁne an L-algebra structure on the object C. In conclusion, there is no additional
structure provided by a lift of an object C ∈CL to an L-algebra; rather being an L-algebra
is a condition on the object C, namely whether the unit component ηC is invertible.
Exercise 4.5.vii reveals that an object C is in the essential image of D ,→C if and only
if ηC is an isomorphism. This proves that K : D →CL is essentially surjective. Naturality
of the unit η implies that this functor is fully faithful, so we conclude that K deﬁnes an
equivalence of categories.
□
In §5.5, we prove the monadicity theorem, which allows one to easily detect when the
comparison functor deﬁnes an equivalence or isomorphism. In particular, the reader need
not remain concerned for very long about the remaining details in the sketched proof of the
monadicity of abelian groups.
Exercises.
Exercise 5.3.i. Reading between the lines in the proof of Proposition 5.3.3, prove that the
category of algebras for an idempotent monad on C deﬁnes a reﬂective subcategory of C.
Show further that the Kleisli category for an idempotent monad is also reﬂective.
5.4. Canonical presentations via free algebras
The reason for our particular interest in monadic functors, such as U : Ab →Set, is
that the forgetful functor UT : CT →C associated to the category of algebras for a monad T
on C has certain special properties, which are enumerated in Propositions 5.4.3 and 5.4.9,
Lemma 5.6.1, Theorem 5.6.5, and Proposition 5.6.11. These properties are transferred
along the equivalence to any monadic functor. The ﬁrst of these, discussed in this section
and used in the next to prove the monadicity theorem, demonstrate that any algebra for a
monad admits a canonical presentation as a quotient of free algebras.
On account of the isomorphism of categories Ab  SetZ[−], the adjunction
(5.4.1)
Set
Z[−] /
⊥
Ab
U
o
is monadic, and so we build intuition by ﬁrst introducing these canonical presentations in
the special case of abelian groups. To avoid inelegant pedantry, we use the same notation
for the monad Z[−] on Set and for the free abelian group functor Z[−]: Set →Ab.

5.4. CANONICAL PRESENTATIONS VIA FREE ALGEBRAS
169
The context—sets and functions or groups and homomorphisms—will always indicate the
appropriate target category.
Any abelian group A has a presentation that can be deﬁned in terms of the free and
forgetful functors (5.4.1). If G is any set of elements of an abelian group A, there is a
canonical homomorphism Z[G] →A that sends a ﬁnite Z-linear combination of these
elements to the element of A that is their sum. The set G is a set of generators for A
precisely when this map is surjective. Relations involving these generators, meaning the
terms that are to be set equal to zero, are elements of the group Z[G], so again there is a
canonical “evaluation” homomorphism Z[R] →Z[G] from the free group on a set R of
relations to the free group on the generators. The set G ⊂A of generators and R ⊂Z[G] of
relations gives a presentation of A if the quotient map Z[G] ↠A is a coequalizer of the
evaluation map and the zero homomorphism
(5.4.2)
Z[R]
evaluation/
0
/ Z[G]
/ / A,
in which case one often writes A = 
G
 R.
Ad hoc presentations as described by (5.4.2) can be a useful way to deﬁne abelian
groups, but they are unlikely to be functorial: a homomorphism ϕ: A →A′ is unlikely
to carry the chosen presentation for A to sets of generators and relations for A′. There is,
however, a canonical—by which we mean functorial—presentation of any abelian group.
Rather than choose a proper subset of generators, we take all of the elements of A to be
generators; the canonical evaluation homomorphism α: Z[A] ↠A is certainly surjective.
Similarly, rather than choose any particular set of relations in Z[A], we take all of the
elements of Z[A] to be “relations.” Here we do not intend to send every formal sum of
elements of A to zero; the result would be the trivial group. Instead, we generalize the
meaning of presentation, making use of the fact that coequalizers are more ﬂexible than
cokernels. Proposition 5.4.3 will demonstrate that the diagram
Z[Z[A]]
µA
/
Z[α] / Z[A]
α / / A
is always a coequalizer. That is, any abelian group is the quotient of the free abelian group
on its underlying set modulo the relation that identiﬁes a formal sum with the element to
which it is evaluated.
In general:
Proposition 5.4.3. Let (T, η, µ) be a monad on C and let (A, TA
α−→A) be a T-algebra.
Then
(5.4.4)
(T 2A, µTA)
µA
/
Tα
/ (TA, µA)
α / / (A, α)
is a coequalizer diagram in CT.
Proposition 5.4.3 can be proven directly by a diagram chase, but we prefer to deduce
it as a special case of a more general result, the statement of which requires some new
deﬁnitions.
Definition 5.4.5. A split coequalizer diagram consists of maps
x
f
/
g
/ y
h
/
t
]
z
s
g

170
5. MONADS AND THEIR ALGEBRAS
so that hf = hg, hs = 1z, gt = 1y, and ft = sh.
The condition hf = hg says that this triple of maps deﬁnes a fork, i.e., h is a cone
under the parallel pair f, g: x ⇒y.
Lemma 5.4.6. The underlying fork of a split coequalizer diagram is a coequalizer. More-
over, it is an absolute colimit: any functor preserves this coequalizer.
Proof. Given a map k: y →w so that k f = kg, we must show that k factors through
h; uniqueness of a hypothetical factorization follows because h is a split epimorphism. The
factorization is given by the map ks: z →w, as demonstrated by the following easy diagram
chase:
ksh = k ft = kgt = k .
Now clearly split coequalizers, which are just diagrams of a particular shape, are
preserved by any functor, so the equationally-witnessed universal property of the underlying
fork is also preserved by any functor.
□
Example 5.4.7. For any algebra (A, α: TA →A) for a monad (T, η, µ) on C, the diagram
T 2A
Tα
/
µA
/ TA
α
/
ηTA
`
A
ηA
j
deﬁnes a split coequalizer diagram in C.
Note that while the fork of Example 5.4.7 lifts along UT : CT →C to a diagram (5.4.4)
of algebras, the splittings ηA and ηTA do not. This situation is captured by the following
general deﬁnition.
Definition 5.4.8. Given a functor U : D →C:
• A U-split coequalizer is a parallel pair f, g: x ⇒y in D together with an extension of
the pair U f, Ug: Ux ⇒Uy to a split coequalizer diagram
Ux
U f
/
Ug / Uy
h
/
t
_
z
s
j
in C.
• U creates coequalizers of U-split pairs if any U-split coequalizer admits a coequalizer
in D whose image under U is isomorphic to the fork underlying the given U-split
coequalizer diagram in C, and if any such fork in D is a coequalizer.
• U strictly creates coequalizers of U-split pairs if any U-split coequalizer admits a
unique lift to a coequalizer in D for the given parallel pair.
Proposition 5.4.9. For any monad (T, η, µ) acting on a category C, the monadic forgetful
functor UT : CT →C strictly creates coequalizers of UT-split pairs.
Proof. Suppose given a parallel pair f, g: (A, α) ⇒(B, β) in CT that admits a UT-
splitting:
A
f
/
g
/ B
h
/
t
]
C.
s
h
We must show that C lifts to an algebra (C, γ) and h lifts to an algebra map that is a
coequalizer of f and g in CT, and that moreover these lifts are unique with this property.
To deﬁne the algebra structure map γ, note that the functor T : C →C preserves the split

5.4. CANONICAL PRESENTATIONS VIA FREE ALGEBRAS
171
coequalizer diagram; in particular, by Lemma 5.4.6, Th is the coequalizer of T f and Tg.
The algebra structure maps α and β deﬁne a diagram
TA
T f
/
Tg /
α

T B
Th / /
β

TC
γ
∃!

A
f
/
g
/ B
h
/ C
in which the square deﬁned by f and T f and the square deﬁned by g and Tg both commute.
Thus,
h · β · T f = h · f · α = h · g · α = h · β · Tg ,
which says that h · β deﬁnes a cone under the pair T f, Tg: TA ⇒T B. By the universal
property of their coequalizer Th, there is a unique map γ: TC →C so that the right-hand
square above commutes. Once we show that the pair (C, γ) is a T-algebra, this commutative
square will demonstrate that h: (B, β) →(C, γ) is a T-algebra homomorphism.
It remains to check that the diagrams
C
ηC
/
1C
 
TC
γ

T 2C
µC
/
Tγ

TC
γ

C
TC
γ
/ C
commute. This will follow from the corresponding conditions for the T-algebra (B, β) and
the fact that the coequalizer maps are epimorphisms. Speciﬁcally, we have diagrams
B
1B

ηB}
h
/ / C
1C

ηC}
T B
β
!
Th / TC
γ
!
B
h
/ C
T 2B
T 2h
/ /
µB

Tβ #
T 2C
µC

Tγ
#
T B
Th
/
β

TC
γ

T B
Th
/
β
#
TC
γ
$
B
h
/ C
in which all but the right-most face of each prism is known to commute. It follows that
γ · ηC · h = 1C · h and γ · µC · T 2h = γ · Tγ · T 2h, and we conclude that the right-most faces
commute by canceling the epimorphisms h and T 2h. Thus, (C, γ) is a T-algebra.
Finally, we show that h: (B, β) →(C, γ) is a coequalizer in CT.
Given a cone
k: (B, β) →(D, δ) so that k f = kg, there is a unique factorization
A
f
/
g
/ B
h
/
k

C
j
∃!

D
using the universal property of the coequalizer in C. To check that j lifts to a map of
T-algebras, it again suﬃces to verify that j · γ = δ · T j after precomposing with the
epimorphism Th. The result follows from an easy diagram chase, using the fact that h and
k are algebra maps:
j · γ · Th = j · h · β = k · β = δ · Tk = δ · T j · Th.
□

172
5. MONADS AND THEIR ALGEBRAS
Proof of Proposition 5.4.3. Example 5.4.7 shows that the fork (5.4.4) is part of
a UT-split coequalizer. In particular, α: TA →A is an absolute coequalizer of the pair
Tα, µA : T 2A ⇒TA in C. The proof of Proposition 5.4.9 demonstrates that this coequalizer
lifts to a coequalizer in CT.
□
The results of Propositions 5.4.3 and 5.4.9 extend to general monadic functors with one
caveat: as monadic adjunctions are only required to be equivalent to and not isomorphic
to the adjunction involving the category of algebras, a monadic functor U : D →C might
only create, rather than strictly create, U-split coequalizers.
Corollary 5.4.10. If C
F
/
⊥
D
U
o
is a monadic adjunction, then
(i) U : D →C creates coequalizers of U-split pairs.
(ii) For any D ∈D, there is a coequalizer diagram
(5.4.11)
FUFUD
FUϵD /
ϵFUD / FUD
ϵD
/ D
involving the counit ϵ : FU ⇒1D of the adjunction.
Proof. To say that U : D →C is monadic is to say that there is an equivalence of
categories
D
U

K
≃
/ CT
UT
~
C
where T is the monad UF.
For (i), if f, g: A ⇒B is a U-split pair in D, then commutativity U = UT K implies
that K f, Kg: KA ⇒KB is a UT-split pair in CT. Proposition 5.4.9 lifts the fork of the
U-split coequalizer diagram in C to a coequalizer diagram in CT. Any inverse equivalence
L: CT
≃−→D to the functor K can be used to map this data to a coequalizer for the pair
f, g: A ⇒B.
As KL  1CT , this coequalizer maps via U : D →C to a fork that is
isomorphic to the fork of the given U-split coequalizer.9 Note also that U preserves and
reﬂects all coequalizer diagrams that are U-split because UT has this property and K
preserves and reﬂects all coequalizers (see Lemma 3.3.6). This completes the proof that U
creates U-split coequalizers.
For (ii), the fork (5.4.11) is U-split by the diagram
UFUFUD
UFUϵD/
UϵFUD
/ UFUD
UϵD /
ηUFUD
a
UD
ηUD
m
in C. By (i), the functor U : D →C reﬂects U-split coequalizers, so the fork (5.4.11)
deﬁnes a coequalizer diagram in D.
□
Exercises.
Exercise 5.4.i. The coequalizer of a parallel pair of morphisms f and g in the category
Ab is equally the cokernel of the map f −g. Explain how the canonical presentation of
an abelian group described in Proposition 5.4.3 deﬁnes a presentation of that group, in the
usual sense.
9If KL = 1CT , as is the case if these functors deﬁne an isomorphism of categories, then this coequalizer in D
is a lift of the U-split coequalizer in C and U : D →C strictly creates U-split coequalizers.

5.5. RECOGNIZING CATEGORIES OF ALGEBRAS
173
5.5. Recognizing categories of algebras
There are many versions of the monadicity theorem, which characterizes those adjunc-
tions for which objects in the domain of the right adjoint can be regarded as algebras for
the monad deﬁned on the codomain. The one presented here is due to Beck [Bec67].
Theorem 5.5.1 (monadicity theorem). A right adjoint functor U : D →C is monadic if
and only if it creates coequalizers of U-split pairs.
Recalling Deﬁnition 5.4.8, the meaning of this result is the following.
Given an
adjunction F ⊣U inducing a monad T on C, Proposition 5.2.12 constructs the canonical
comparison functor:
D
K
/
U

⊢
CT
UT
~
⊣
C
F
_
FT
>
By Theorem 5.5.1, the following are equivalent:
(i) K is an equivalence (respectively, isomorphism) of categories.
(ii) U creates (respectively, strictly creates) coequalizers of U-split pairs.
We leave the proof of the strict version of the monadicity theorem, that D is isomorphic
to the category of algebras if and only if U : D →C strictly creates coequalizers of U-split
pairs, to Exercise 5.5.i and focus our attention on the equivalence-invariant statement.
Proof. Corollary 5.4.10 proves the implication (i)⇒(ii), so we assume (ii) and use it
to construct an inverse equivalence L: CT →D to the functor K. We have UT K = U and
KF = FT, so if L is to deﬁne an inverse equivalence to K, we must have UT  UL and
F  LFT, conditions that we use to guide the deﬁnition of L.
In fact, we deﬁne L so that the second of these conditions holds strictly, namely, for
each A ∈C, deﬁne
L(TA, µA) B FA
and deﬁne L to carry a free map T f : (TA, µA) →(T B, µB) between free algebras to the
map F f : FA →FB. It remains to extend the deﬁnition of L to non-free algebras and maps.
An equivalence of categories preserves all limits and colimits. With this in mind, for
any algebra (A, α) ∈CT deﬁne L(A, α) to be the coequalizer
(5.5.2)
FUFA
Fα /
ϵFA / FA
/ / L(A, α),
in D; this construction is arranged so that the coequalizer (5.4.4) is preserved by L. By
Example 5.4.7, the parallel pair Fα, ϵFA : FUFA ⇒FA is U-split, so the hypothesis that
U creates U-split coequalizers implies that the coequalizer (5.5.2) exists in D. The action
of L: CT →D on a morphism f : (A, α) →(B, β) is deﬁned to be the unique map between
coequalizers induced by a commutative diagram of parallel pairs:
FUFA
FUF f

Fα /
ϵFA / FA
/ /
F f

L(A, α)
L f
∃!

FUFB
Fβ /
ϵFB / FB
/ / L(B, β)
Uniqueness of factorizations through colimit cones implies that this deﬁnition is functorial;
see Proposition 3.6.1.

174
5. MONADS AND THEIR ALGEBRAS
The functor K carries the parallel pair (5.5.2) to the parallel pair (5.4.4). As UT strictly
creates coequalizers of UT-split pairs, we see that KL  1CT . It remains only to prove that
LK  1D. Given D ∈D, the object LKD is deﬁned to be the coequalizer of
FUFUD
FUϵD /
ϵFUD / FUD
By Corollary 5.4.10(ii), LKD must therefore be isomorphic to the coequalizer (5.4.11).
The isomorphism induced between two coequalizers for the same diagram is unique, and
thus deﬁnes a natural isomorphism LK  1D.
□
Corollary 5.5.3. The following categories are monadic over Set via the free ⊣forgetful
adjunctions described in Example 4.1.10.
(i) Monoid, Group, Ab, Ring, and other variants, such as commutative rings or monoids,
or non-unital versions of the preceding
(ii) ModR, Vectk, Affk, SetBG
(iii) Lattice or the categories of meet or join semilattices10
(iv) Set∗
Proof. We prove that monoids are monadic over sets and leave the proofs of the other
cases, which are similar, to Exercise 5.5.ii.
Recall that a monoid is a set M together with maps η: 1 →M and µ: M × M →M so
that the diagrams displayed in Deﬁnition 1.6.2 commute in Set. A monoid homomorphism
f : (M, η, µ) →(M′, η′, µ′) is a function f : M →M′ so that the diagrams
1
η

η′
 
M × M
µ

f× f / M′ × M′
µ′

M
f
/ M′
M
f
/ M′
commute in Set.
To apply Theorem 5.5.1, it suﬃces to prove that U : Monoid →Set strictly creates
the coequalizer of any pair of monoid homomorphisms f, g: M ⇒M′ whose underlying
functions extend to a split coequalizer diagram
M
f
/
g
/
_
t
M′
h
/ M′′
s
j
in Set. That is, we must show that there is a unique way to turn the set M′′ into a monoid so
that h: M′ →M′′ is a monoid homomorphism, and moreover this fork deﬁnes a coequalizer
in the category of monoids. The proof will closely resemble the argument used to prove
Proposition 5.4.9.
For h to deﬁne a homomorphism, the unit for M′′ must be deﬁned to be the composite
η′′ B 1
η′
−→M′
h−→M′′. To deﬁne the multiplication for M′′, we use the fact that the split
10A lattice is a poset with all ﬁnite meets (limits) and joins (colimits), and a morphism of lattices is an
order-preserving function that preserves these. A meet semilattice only has meets, while a join semilattice only
has joins.

5.5. RECOGNIZING CATEGORIES OF ALGEBRAS
175
coequalizer diagram is preserved by any functor, in particular by (−)2 : Set →Set. This
yields a parallel pair of coequalizers
M × M
µ

f×f /
g×g / M′ × M′
µ′

h×h / / M′′ × M′′
µ′′
∃!

M
f
/
g
/ M′
h
/ / M′′
the induced map between which we deﬁne to be the multiplication for µ′′.
Note our
deﬁnition is arranged so that h deﬁnes a monoid homomorphism, and moreover, by the
uniqueness of factorizations through the coequalizer h×h, no other choice for µ′′ is possible.
The proofs that (M′′, η′′, µ′′) is associative and unital, and that this monoid deﬁnes the
coequalizer of the monoid homomorphisms f, g: M ⇒M′, proceed via the same arguments
used in the proof of Proposition 5.4.9: these properties are deduced from the analogous
properties of the monoid (M′, η′, µ′) after canceling a quotienting epimorphism.
□
There is a unifying term that encompasses each of the categories listed in Corollary
5.5.3.
Definition 5.5.4. A functor is ﬁnitary if it preserves ﬁltered colimits.
In particular, a monad T : C →C is ﬁnitary if it preserves ﬁltered colimits in C. If a
right adjoint is ﬁnitary, then so is its monad because its left adjoint preserves all colimits.
Definition 5.5.5. A category A is a category of models for an algebraic theory if there
is a ﬁnitary monadic functor U : A →Set.
Any category of models for an algebraic theory is locally ﬁnitely presentable, in the
sense of Deﬁnition 4.6.16 [AR94, 2.78]. Another familiar category is monadic over sets,
though it is not a model of an algebraic theory because its monad is not ﬁnitary.
Corollary 5.5.6. The underlying set functor U : cHaus →Set from the category of
compact Hausdorﬀspaces is monadic.
The following proof is due to Paré [Par71]. As in the proof of Corollary 5.5.3, a key
point is that split coequalizers are absolute coequalizers, preserved by any functor.
Proof. A topological space may be deﬁned to be a set X equipped with a closure
operator (−): PX →PX on its set of subsets satisfying four axioms for all A, B ∈PX:
(i) ∅= ∅,
(ii) A ⊂A,
(iii) A = A,
(iv) A ∪B = A ∪B .
A function f : X →Y between topological spaces is continuous if and only if f(A) ⊂f(A)
for all A ⊂X and closed11 if and only if f(A) = f(A). All continuous functions between
compact Hausdorﬀspaces are closed; that is, a function f : X →Y between compact
Hausdorﬀspaces lifts to a map in cHaus if and only if it preserves the closure operator.
Consider a pair of continuous functions f, g: X ⇒Y in cHaus so that there exists an
absolute coequalizer diagram
X
f
/
g
/ Y
h
/ / Z
11A continuous function is closed if it preserves closed subsets.

176
5. MONADS AND THEIR ALGEBRAS
in Set. The covariant power set functor P: Set →Set preserves this, giving rise to a
coequalizer diagram of direct image functions:
PX
(−)

f∗
/
g∗
/ PY
(−)

h∗/ / PZ
(−)
∃!

PX
f∗
/
g∗
/ PY
h∗
/ / PZ
Because f and g are maps of compact Hausdorﬀspaces, the direct image functions commute
with the closure operators, and so the commutative diagram of parallel pairs induces a
function that we optimistically denote by (−): PZ →PZ.
It is straightforward to verify that this function deﬁnes a closure operator on Z so that
Z is a topological space. Because the function h: Y →Z is surjective, continuous, and
closed and Y is compact Hausdorﬀ, so is Z.12 By our characterization of maps in cHaus, it
is clear that we have constructed the unique lift of the absolute coequalizer diagram along
U : cHaus →Set.
To see that h: Y →Z has the universal property of a coequalizer in cHaus, consider
a continuous function k: Y →W so that k f = kg. On underlying sets, there is a unique
factorization ℓ: Z →W of k through h, so it remains only to show that ℓis continuous and
closed. That is, we must prove that the right-hand square commutes
PY
k∗
*
(−)

h∗
/ / PZ
ℓ∗
/
(−)

PW
(−)

PY
k∗
4
h∗/ / PZ
ℓ∗
/ PW
which follows from the fact that the left-hand square and exterior rectangle commute and
the fact that h∗is an epimorphism.
□
Example 5.5.7. Other examples of monadic functors include:
(i) Example 5.2.6(ii) reveals that the forgetful functor U : ModR →Ab is monadic. The
induced monad on Ab is given by R ⊗Z −: Ab →Ab.
(ii) The proof of Corollary 5.5.3 can be adapted to show that the forgetful functor
U : Ring →Ab is monadic. The induced monad on Ab is the free monoid monad
TA B
L
n≥0 A⊗n.
(iii) If C has coproducts (in fact, copowers suﬃce) and J is small, then Exercise 5.5.v
demonstrates that the restriction functor CJ →Cob J, which carries a J-indexed dia-
gram in C to the ob J-indexed family of objects in its image, is monadic. Special cases
include, for instance, the functor VectBG
k
→Vectk that carries a G-representation to
its underlying vector space or analogous functors for G-objects in any category.
(iv) U : Cat →DirGraph is also monadic.
The monad forms (the underlying graph
of) the free category on a directed graph, where identities and composites of all
12Compactness of Y and surjectivity of the continuous function h imply that Z is compact. Because Y is
Hausdorﬀ, its points are closed, and since h is closed, points are also closed in Z. To show that Z is Hausdorﬀ,
note that distinct points z , z′ ∈Z have disjoint closed preimages. Because the compact Hausdorﬀspace Y is
normal, the preimages h−1(z) and h−1(z′) have disjoint open neighborhoods. The images of their complements
are closed subsets of Z, one containing z and the other containing z′, whose complements are the desired disjoint
open neighborhoods of z and z′.

5.5. RECOGNIZING CATEGORIES OF ALGEBRAS
177
ﬁnite directed paths are formally added.
This functor factors through a second
monadic functor U : Cat →rDirGraph, whose target is the category whose objects
are reﬂexive directed graphs, with speciﬁed “identity” endoarrows of each vertex.
The construction of the inverse equivalence to the canonical functor K : D →CT
given in the proof of Theorem 5.5.1 can be adapted to various other hypotheses on the
given right adjoint U : D →C.
In the categorical literature, these variant theorems
are traditionally assigned three-letter acronyms. Theorem 5.5.1 is sometimes called PTT,
“precise tripleability13 theorem,” “precise” because the characterization involves a condition
that is necessary, as well as suﬃcient. Statements of the “crude tripleability theorem” (CTT)
and “vulgar tripleability theorem” (VTT) can be found in the exercises to [ML98a, §VI.7].
Another variant is the “reﬂexive tripleability theorem”:
Proposition 5.5.8 (RTT). If U : D →C has a left adjoint and if
(i) D has coequalizers of reﬂexive14 pairs,
(ii) U preserves coequalizers of reﬂexive pairs, and
(iii) U reﬂects isomorphisms,
then U is monadic.
Proof. Exercise 5.5.iii.
□
Proposition 5.5.8 has a neat application:
Theorem 5.5.9 (Paré). The contravariant power set functor P: Setop →Set is monadic.
The argument presented here, due to Paré [Par74], also holds when Set is replaced
by any elementary topos (a further generalization of the Grothendieck toposes introduced
in §E.4). It makes use of the following lemma, whose conclusion is sometimes called the
Beck–Chevalley condition, that asserts that for certain commutative squares, the induced
direct and inverse image functions on power sets commute:
Lemma 5.5.10. For any pullback diagram of monomorphisms, as displayed on the left,
A′

a

⌟
g
/ B′

b

PB′
b∗

g−1 / PA′
a∗

A
f
/ B
PB
f −1
/ PA
the right hand square commutes.
Proof. For any X ∈PB′, consider a commutative rectangle
Y

/ X

A′

a

⌟
g
/ B′

b

A
f
/ B
13“Triple” is an antiquated synonym for “monad.”
14A parallel pair f, g: A ⇒B is reﬂexive if both maps admit a common section s: B →A.

178
5. MONADS AND THEIR ALGEBRAS
To say that a∗g−1(X) = Y is to say that the top square is a pullback. To say that f −1b∗(X) = Y
is to say that the composite rectangle is the pullback. By Exercise 3.1.viii, these conditions
are equivalent.
□
By Exercise 4.5.v, any monomorphism f : A ,→B deﬁnes a pullback square
A
⌟
A

f

A /
f
/ B
so a special case of Lemma 5.5.10 tells us that for any monomorphism, the composite
PA
f∗
/ PB
f −1 / PA
is the identity.
Proof of Theorem 5.5.9. We apply Proposition 5.5.8. On account of the cartesian
closed structure of Set:
Set(A, PB)  Set(A × B, Ω)  Set(B, PA) ,
the functor P: Setop →Set has a left adjoint (namely, itself). By Theorem 3.2.6, Set has
ﬁnite limits, in particular, equalizers of coreﬂexive pairs proving (i). Given an equalizer of
a pair of maps with a common retraction:
E
/ e
/ A
f
/
g
/ B
A
f
/
g
/
1
"
1
<
B
s
/ A
the square
E
/ e
/

e

⌟
A
f

A /
g
/ B
is a pullback of monomorphisms: the retraction s implies that f and g are split monic,
which implies that the legs of any cone over this pullback diagram must be equal, proving
that the displayed square is a pullback. Applying Lemma 5.5.10, it follows that
PB
f −1 /
g−1 / PA
e−1 /
g∗
]
PE
e∗
j
is a split coequalizer diagram, proving (ii).
To show (iii), note that P is faithful: given a parallel pair f, g: A ⇒B, the composites
B
η
/ PB
f −1 /
g−1 / PA
with the singleton map η: B →PB transpose to deﬁne functions A × B ⇒Ωthat classify
the subsets (1, f): A ↣A×B and (1, g): A ↣A×B. It follows from the universal property
of the subobject classiﬁer Ω, described in Example 2.1.6(i), that if f −1 = g−1, then f = g.
By Exercise 1.6.iii, any faithful functor reﬂects both monomorphisms and epimorphisms.

5.5. RECOGNIZING CATEGORIES OF ALGEBRAS
179
In Set, or any elementary topos, the isomorphisms are precisely those maps that are both
monic and epic, so it follows that P reﬂects isomorphisms. Proposition 5.5.8 now implies
that the contravariant power set functor is monadic.
□
Exercises.
Exercise 5.5.i. Prove the strict version of the monadicity theorem: that the domain D of a
right adjoint U : D →C is isomorphic to the category of algebras if and only if U strictly
creates coequalizers of U-split pairs.
Exercise 5.5.ii. Use the monadicity theorem to prove that another of the categories listed
in Corollary 5.5.3 is monadic over sets.
Exercise 5.5.iii. Prove Proposition 5.5.8.
Exercise 5.5.iv. For any group G, the forgetful functor SetBG →Set admits a left adjoint
that sends a set X to the G-set G × X, with G acting on the left. Prove that this adjunction
is monadic by appealing to the monadicity theorem.
Exercise 5.5.v. Generalizing Exercise 5.5.iv, for any small category J and any cocomplete
category C the forgetful functor CJ →Cob J admits a left adjoint Lan: Cob J →CJ that
sends a functor F ∈Cob J to the functor LanF ∈CJ deﬁned by
LanF( j) =
a
x∈J
a
J(x,j)
Fx .
(i) Deﬁne LanF on morphisms in J.
(ii) Deﬁne Lan on morphisms in Cob J.
(iii) Use the Yoneda lemma to show that Lan is left adjoint to the forgetful (restriction)
functor CJ →Cob J.
(iv) Prove that this adjunction is monadic by appealing to the monadicity theorem.
Exercise 5.5.vi. Describe a more general class of functors K : I →J between small
categories so that for any cocomplete C the restriction functor resK : CJ →CI strictly
creates colimits of resK-split parallel pairs. All such functors admit left adjoints and are
therefore monadic. Challenge: describe the left adjoint (or see Theorem 6.2.1).
Exercise 5.5.vii. Consider the Kleisli category SetT for a monad T acting on Set and
choose a skeleton N
≃−→Fin ,→Set for the full subcategory of ﬁnite sets. Let L be the
opposite of the full subcategory of the Kleisli category spanned by the objects 0, 1, 2, . . . in
N, so that there is an identity-on-objects functor:
Nop
I
/

≃

L

Finop
/
/ Setop
FT
/ Setop
T
(i) Show that the categories Nop and L have strictly associative ﬁnite products that are
preserved by the functor I : Nop →L.
When the monad T is ﬁnitary, the functor I : Nop →L deﬁnes its associated Lawvere
theory. Because the objects in the category L are all iterated ﬁnite products of the object
1, the essential data in the Lawvere theory is the set L(n, 1) of “n-ary operations.” It is
possible to recover the category of T-algebras, that is, the category of models for this
algebraic theory, from this data [Lin66].
A model of the Lawvere theory in Set is a
ﬁnite product preserving functor L →Set. A morphism between models is a natural
transformation.

180
5. MONADS AND THEIR ALGEBRAS
(ii) Deﬁne a functor from the category of T-algebras to the category of models for the
Lawvere theory I : Nop →L. (Hint: See Exercise 5.2.vii.)
5.6. Limits and colimits in categories of algebras
Recall that a category A is monadic over C if there is an adjunction
C
F
/
⊥
A
U
o
that is equivalent to the adjunction between C and the category of algebras for the monad
UF. By Theorem 5.5.1, this is the case if and only if the functor U : A →C creates
coequalizers of U-split pairs, a somewhat strange technical condition that can be relatively
practical to check. Our aim in this section is to present a few results from categorical
universal algebra, which describe some of the common features of categories that are
equivalent to categories of algebras. In particular, these properties hold for Set∗, Monoid,
Group, Ab, Ring, CRing, ModR, Affk, SetBG, Lattice, and cHaus, all of which are monadic
over Set,15 and sometimes fail for Poset, Top, and Field, which are not.16
A basic property common to all monadic functors is:
Lemma 5.6.1. If U : A →C is monadic, then U reﬂects isomorphisms: for any morphism
f : a →a′ in A, if U f is an isomorphism in C, then f is an isomorphism in A.
A functor is conservative if it reﬂects isomorphisms.
Proof. A monadic functor U : A →C is equivalent to the forgetful functor from the
category of algebras for the induced monad on C, and so it suﬃces to demonstrate that
UT : CT →C has this property. Recall that a morphism f : (A, α) →(A′, α′) in CT is a
map f : A →A′ in C so that the left-hand diagram
TA
α

T f / TA′
α′

TA′
T f −1 /
α′

TA
α

A
f
/ A′
A′
f −1
/ A
commutes in C, whence the right-hand diagram also commutes whenever the inverse
f −1 : A′ →A exists in C.
□
Lemma 5.6.1 answers the question motivated by Example 1.1.10.
Corollary 5.6.2. Any bijective continuous function between compact Hausdorﬀspaces
is a homeomorphism.17
Remark 5.6.3. Unlike the other corollaries listed in the introduction, this is not the most
eﬃcient proof that bijective continuous functions between compact Hausdorﬀspaces are
15For ease of exposition, these applications are focused on categories that are monadic over sets, but the
categorical results apply to monads acting on any category, and more sophisticated applications frequently take
advantage of this.
16The functor U : Field →Set cannot be monadic: Example 4.1.12 observes that it fails to admit any adjoints.
Proofs that the forgetful functors U : Poset →Set and U : Top →Set are not monadic will appear shortly.
17More generally, any continuous bijection from a compact space to a Hausdorﬀone is a homeomorphism, but
this statement is no true generalization: compactness of the domain and surjectivity of the map imply that the
codomain is also compact, while Hausdorﬀness of the codomain and injectivity of the map imply that the domain
is also Hausdorﬀ.

5.6. LIMITS AND COLIMITS IN CATEGORIES OF ALGEBRAS
181
homeomorphisms,18 but we submit that this roundabout proof of Corollary 5.6.2 is nonethe-
less interesting. By monadicity of the functor U : cHaus →Set and Proposition 5.4.3,
any compact Hausdorﬀspace is canonically a quotient of the Stone–Čech compactiﬁcation
of its underlying set. A continuous bijection induces a natural isomorphism between the
Stone–Čech compactiﬁcations, and thus a homeomorphism between the canonical quo-
tients.
Corollary 5.6.4. Any bijective homomorphism in a category of models for an algebraic
theory is an isomorphism.
For instance, the inverse of a bijective homomorphism between groups is also a ho-
momorphism. This, of course, is not diﬃcult to prove. Corollary 5.6.4 eliminates the
redundancy of proving the same result over and over again in many similar contexts.
The contrapositive to Lemma 5.6.1 demonstrates that the categories Top or Poset are not
monadic over sets: there exist non-invertible maps that act as the identity on underlying
sets.
We now turn our focus to limits and colimits in a category of algebras.
Theorem 5.6.5. A monadic functor U : A →C creates
(i) any limits that C has, and
(ii) any colimits that C has and the monad and its square preserve.
Proof. By Lemma 3.3.6, an equivalence A ≃CT creates all limits and colimits present
in either category, and so it suﬃces to prove this result for the forgetful functor UT : CT →C
from the category of algebras for the induced monad.
To prove (i), consider a diagram D: J →CT, spanning objects (Dj, γj) ∈CT, so that
the underlying diagram UT D: J →C admits a limit cone (µj : L →Dj) j∈J in C. We wish to
lift the summit L and the legs of the limit cone to a limit cone for the diagram D in CT. The
fact that D is a diagram of algebras implies that the algebra structure maps assemble into the
components of a natural transformation γ: TD ⇒D ∈CJ from the underlying C-valued
diagram TD to the underlying C-valued diagram D. The composite natural transformation
TL
Tµ +3 TD
γ
+3 D
deﬁnes a cone with summit TL over the diagram D: J →C, which factors through the
limit cone to deﬁne a unique map λ: TL →L in C so that the diagrams
TL
λ

Tµ j / TDj
γ j

L
µj
/ Dj
18To wit, a closed subset of a compact space is compact and so is its continuous image. If the target space is
Hausdorﬀ, then this compact subspace is closed. A continuous closed bijection is a homeomorphism.

182
5. MONADS AND THEIR ALGEBRAS
commute for each j ∈J. To verify that (L, λ) is a T-algebra, we must show that the left-most
faces in the prisms
L
ηL

1L

µj
/ Dj
ηD j
"
1D j 
TL
λ

Tµj
/ TD j
γj
|
L
µj
/ Dj
T 2L
T 2µj
/
µL

Tλ
"
T 2Dj
µD j

Tγj
#
TL
Tµj
/
λ

TD j
γ j

TL
Tµj
/
λ
"
TD j
γ j
$
L
µj
/ Dj
commute in C, knowing already that the remaining faces do. Appealing to the universal
property of the limit cone (µj : L →Dj)j∈J, it suﬃces to prove that these faces commute
after composing with µj for each j ∈J, and this is what the commutativity of the remaining
faces of each prism demonstrates.19 The veriﬁcation that this is a limit cone proceeds
similarly and is left to the reader.
A similar argument works for (ii) with the additional hypothesis that T and T 2 preserve
the colimit cone in C under consideration. If L ∈C is the nadir of a colimit cone under
a diagram UT D: J →C, then its algebra structure map λ: TL →L is induced by the
universal property of the colimit cone under TUT D with nadir TL.20 The details are left
as Exercise 5.6.ii.
□
An immediate corollary completes the unﬁnished business of Proposition 4.5.15.
Corollary 5.6.6. The inclusion of a reﬂective subcategory creates all limits. In particular,
a reﬂective subcategory of a complete category is complete.
Proof. Proposition 5.3.3 proves that the inclusion of a reﬂective subcategory is
monadic. By Theorem 5.6.5(i), it follows that this inclusion creates all limits that ex-
ist in the codomain.
□
Another corollary is the completeness result promised in §3.5.
Corollary 5.6.7. Any category that is monadic over Set is complete, with limits created
by the monadic forgetful functor.
Proof. Theorem 3.2.6 proves that Set is complete. Theorem 5.6.5 demonstrates that
any category that is monadic over Set is also complete.
□
Example 5.6.8. For instance, the p-adic integers are deﬁned to be the limit of an ωop-
indexed diagram of rings
Zp B limn Z/pn
/ · · ·
/ Z/p3
/ Z/p2
/ Z/p
By Example 3.2.10, because U : Ring →Set preserves limits, as a set
Zp =
n
(a1 ∈Z/p, a2 ∈Z/p2, a3 ∈Z/p3, . . .)
 an ≡am mod pmin(n,m)o
.
That is, a p-adic integer is a sequence of elements an ∈Z/pn that are compatible modulo
congruence.
The underlying set functor also creates the limit cone, which tells us that the ring
structure on this set of elements must be deﬁned in such a way so that the projection functions
19This is the dual of the argument given in the proof of Proposition 5.4.9.
20The fact that the monad T preserves split coequalizers was used in this way in the proof of Proposition 5.4.9.

5.6. LIMITS AND COLIMITS IN CATEGORIES OF ALGEBRAS
183
Zp →Z/pn are ring homomorphisms. This tells us that addition and multiplication of
elements is “componentwise.”
Corollary 5.6.9. Set is cocomplete.
Proof. The contravariant power set functor P: Setop →Set is monadic, so the colimit
of a diagram is created from the limit of the corresponding diagram on power sets.
□
Corollary 5.6.10. ModR →Ab creates all colimits that Ab admits.
Proof. By Example 4.3.11, for any pair of abelian groups A and A′, there is a natural
isomorphism
Ab(R ⊗Z A, A′)  Ab(A, HomZ(R, A′))
involving the tensor product of abelian groups and the abelian group HomZ(R, A′) of group
homomorphisms R →A′. In particular, the monad R ⊗Z −: Ab →Ab has a right adjoint
HomZ(R, −). By Theorem 4.5.3, R ⊗Z −preserves all colimits and so Theorem 5.6.5(ii)
applies to all diagrams in Ab.
□
In fact, Ab and any category of models for an algebraic theory is cocomplete. However,
the construction of those colimits that are not preserved by the monad is more complicated.
To explore this problem, consider the monadic forgetful functor U : Group →Set. Both
Set and Group admit coproducts; in Set these are simply disjoint unions, while in Group
they are given by the free product. The free product of groups G and H is the group
G ∗H of words whose letters are drawn from the elements of G and H together with formal
inverses, modulo relations deﬁned using the group operations in each group. Note, in
particular, that U : Group →Set does not preserve (and so, in particular, does not create)
coproducts. However, there is a more precise description of the free product G ∗H that can
be stated entirely in terms of the free ⊣forgetful adjunction
Set
F
/
⊥
Group ,
U
o
which generalizes to deﬁne coproducts relative to any monadic adjunction.
A ﬁrst approximation to the free product G ∗H is given by F(UG ⊔UH), the free
group on the disjoint union of the underlying sets of G and H. Elements of this group are
words whose letters are elements of G or H, but it remains to impose the relations generated
by words in G and words in H. These words in G and words in H are elements of the
set UFUG ⊔UFUH, deﬁned to be the disjoint union of the underlying sets of the free
groups on the underlying sets of G and H. The free group on this set F(UFUG ⊔UFUH)
is the group of words of words in the letters G and H so that each subword is exclusively
comprised of letters drawn from a single one of these groups. The desired relations that
deﬁne G ∗H as a quotient of F(UG ⊔UH) identify a word of words of this type with the
word obtained by evaluating each subword using the group structure of G or of H.
To encode the desired relations, we deﬁne a natural pair of group homomorphisms.
F(UFUG ⊔UFUH)
F(UϵG⊔UϵH)
/
Fκ
,
F(UG ⊔UH)
FUF(UG ⊔UH)
ϵF(UG⊔UH)
2
The fact that G and H are groups is encoded by a pair of homomorphisms ϵG : FUG →G
and ϵH : FUH →H, the components of the counit, that evaluate a word to the group element
that it represents. The top map sends an element in the group F(UFUG ⊔UFUH), a word

184
5. MONADS AND THEIR ALGEBRAS
of words in which these subwords are exclusively in the group G or in the group H, to a
word in UG ⊔UH by evaluating each subword to the corresponding group element.
The bottom composite homomorphism ﬁrst makes use of the natural map κ of Exercise
3.3.i, which compares the coproduct of the image of two objects under a functor, in this
case UF, with the image of the coproduct under that functor. Here this has the eﬀect of
regarding a word of words, with subwords exclusively in either G or H, as a word of words
whose letters might belong to either G or H, but happen in this case to belong to only one
or the other. The map ϵF(UG⊔UH), again a counit component, then concatenates to produce a
single word in letters of G and H. From this point, we see that the coequalizer of these two
group homomorphisms imposes exactly the relations desired to deﬁne the free product:
F(UFUG ⊔UFUH)
F(UϵG⊔UϵH)
/
Fκ
,
F(UG ⊔UH)
/ / G ∗H
FUF(UG ⊔UH)
ϵF(UG⊔UH)
2
This construction of the coproduct generalizes to any monadic functor U : A →C over
a cocomplete category whenever the coequalizer just described exists in A.
Proposition 5.6.11. Suppose C is cocomplete and U : A →C is monadic.
Then the
following are equivalent:
(i) A is cocomplete.
(ii) A has coequalizers.
Proof. The implication (i) ⇒(ii) is trivial. For (ii) ⇒(i), we may replace A by the
equivalent category of algebras CT. It suﬃces by Theorem 3.4.12 to prove that a category
of algebras that has coequalizers also has coproducts. The coproduct (A, α) of a family of
T-algebras (Ai, αi) ∈CT is deﬁned to be the coequalizer
(T(`
i TAi), µ`
i TAi)
T(`
i αi)
/
Tκ ,
(T(`
i Ai), µ`
i Ai)
/ / (A, α) .
(T 2(`
i Ai), µT(`
i Ai))
µ`
i Ai
3
Note that the objects in the coequalizer diagram are all free algebras. Using the adjunction
FT ⊣UT, it is straightforward to show that (A, α) has the desired universal property of the
coproduct of the objects (Ai, αi). The proof is left as Exercise 5.6.iii.
□
It remains to enumerate conditions that suﬃce to prove that the category of algebras
has coequalizers and is therefore cocomplete.
Theorem 5.6.12. If T : C →C is a ﬁnitary monad on a complete and cocomplete, locally
small category C, then the category CT of T-algebras is also complete and cocomplete.
The proof presented here can be found in [Bor94b].
Proof. By Theorem 5.6.5, completeness of C implies that CT is complete. By Propo-
sition 5.6.11, to show that CT is cocomplete, it suﬃces to show that CT has coequalizers. By
Proposition 4.5.1, to show that CT has coequalizers, we must show that the constant diagram
functor from the category of T-algebras to the category of parallel pairs of T-algebras
CT
∆
/
⊥
(CT)•⇒•
colim
o
has a left adjoint.
By Proposition 3.3.9, which says that limits in a functor category
are computed objectwise, the constant diagram functor preserves limits. To prove that

5.6. LIMITS AND COLIMITS IN CATEGORIES OF ALGEBRAS
185
the desired left adjoint exists, we apply the General Adjoint Functor Theorem 4.6.3; the
conclusion follows as soon as we show that the functor ∆satisﬁes the solution set condition.
To apply Theorem 4.6.3, we must produce a solution set for each object in the category
(CT)•⇒•, i.e., for each parallel pair of T-algebra morphisms f, g: (A, α) ⇒(B, β). We will
produce a solution set consisting of a single element by deﬁning a fork
(A, α)
f
/
g
/ (B, β)
q
/ (Q, u)
so that any other fork under the pair f, g in CT factors through q. If we knew how to
form coequalizers in CT, this would be easy; instead, the T-algebra (Q, u) and T-algebra
morphism q is a reasonable approximation21 to the coequalizer deﬁned using an inductive
construction.
To start, we deﬁne the coequalizer q0 : B ↠Q0 in C of the pair f, g: A ⇒B. If
Tq0 were the coequalizer of T f and Tg in C, then its universal property would enable us
to equip Q0 with the structure of a T-algebra, but this is unlikely as we do not assume
that the monad preserves coequalizers. Instead, we form the coequalizer p0 : T B ↠P0 of
T f, Tg: TA ⇒T B and the induced maps
TQ0
TA
α

T f
/
Tg / T B
Tq0
<
p0
/ /
β

P0
u0
∃!

v0
∃!
O
A
f
/
g
/ B
q0
/ / Q0
Continuing inductively, for each n ≥0, we will produce a diagram in C
TQn
Tqn,n+1 / TQn+1
TA
α

T f
/
Tg / T B
Tqn
<
pn
/
β

Pn
un

vn
O
pn,n+1
/ Pn+1
un+1

vn+1
O
A
f
/
g
/ B
qn
/ Qn
qn,n+1 / Qn+1
so that
• the pn and qn deﬁne cones under the parallel pairs (T f, Tg) and ( f, g), respectively,
• pn+1 = pn,n+1 · pn and qn+1 = qn,n+1 · qn, and
• the ω-indexed diagram (Pn)n∈ω is a shifted version of the ω-indexed diagram (TQn)n∈ω.
For the inductive step, deﬁne Pn+1 = TQn, deﬁne Qn+1 to be the coequalizer
TPn
Tun
/
µQn·Tvn/ TQn
un+1 / / Qn+1,
deﬁne
pn,n+1 B vn,
qn,n+1 B un+1 · ηQn,
vn+1 B Tqn,n+1,
and deﬁne pn+1 and qn+1 to be the necessary composites.
21The solution set condition does not demand that factorizations through q are unique.

186
5. MONADS AND THEIR ALGEBRAS
This construction yields a pair of ω-indexed diagrams (Pn)n∈ω and (Qn)n∈ω in C with
a natural transformation u: P ⇒Q between them. We extend this data by forming the
colimits:
TQ0
Tq0,1 / TQ1
Tq1,2 / · · ·
/ colimn TQn  T colimn Qn  TQω
C
P0
u0

p0,1
/
v0
7
P1
u1

p1,2
/
v1
6
P2
p2,3
/
u2

· · ·
/ colimn Pn
uω
∃!

Q0
q0,1
/ Q1
q1,2
/ Q2
q2,3
/ · · ·
/ colimn Qn =: Qω
As the category ω is ﬁltered and the monad T preserves ﬁltered colimits, the functor T
carries the colimit cone (Qn
qn,ω
−−−→Qω)n∈ω under the bottom sequence to a colimit cone
(TQn
Tqn,ω
−−−−→TQω)n∈ω under the top one. Adding the initial leg, this data extends to deﬁne a
colimit cone over the ω-diagram of Pn’s. In particular, the natural transformation u: P ⇒Q
induces a map uω : TQω →Qω between the colimits so that uω · Tqn,ω = qn+1,ω · un+1.
We claim that (Qω, uω) is a T-algebra. For the unit condition it suﬃces, by the universal
property of Qω to show that uω · ηQω · qn,ω = qn,ω for all suﬃciently large n. Indeed,
uω · ηQω · qn,ω = uω · Tqn,ω · ηQn = qn+1,ω · un+1 · ηQn = qn+1,ω · qn,n+1 = qn,ω
by naturality of η, the deﬁnition of uω, the deﬁnition of qn,n+1, and the fact that the qn,ω
form a cone.
For the associativity condition, observe that there is an ω-indexed sequence of coequal-
izer diagrams deﬁning the maps un
...
...

T 2Qn
T 2qn,n+1

µQn
&
...

...

TPn
Tvn
8
T pn,n+1

Tun
/ TQn
Tqn,n+1

un+1 / / Qn+1
qn+1,n+2

T 2Qn+1
µQn+1
'

TPn+1
Tvn+1
7
Tun+1
/

TQn+1
un+2 / /

Qn+2

...
...
...
...
Passing to the sequential colimits, which the ﬁnitary monad T preserves, observe that vω is
the identity. So we conclude that uω : TQω →Qω is the coequalizer of Tuω and µQω, and
so in particular uω · Tuω = uω · µQω. Thus, (Qω, uω) is a T-algebra.
By construction, the map q0,ω : (B, β) →(Qω, uω) is a T-algebra morphism. It remains
to show that any other T-algebra morphism h: (B, β) →(C, γ) that deﬁnes a fork under the
pair f, g: (A, α) ⇒(B, β) factors through q0,ω. By the universal property of the sequential
colimit Qω = colimn Qn, to deﬁne the factorization k: Qω →C it suﬃces to deﬁne its
components
kn B Qn
qn,ω / Qω
k
/ C .

5.6. LIMITS AND COLIMITS IN CATEGORIES OF ALGEBRAS
187
For each n ∈ω, we will show that the diagram
(5.6.13)
Pn
vn
/
un
!
TQn
Tkn
/ TC
γ

Qn
kn
/ C
commutes in C. Passing to sequential colimits, vω is an identity, so it will follow that
k: (Qω, uω) →(C, γ) deﬁnes an algebra map.
Deﬁne k0 to be the unique factorization of h through the coequalizer Q0 of f, g: A ⇒B.
To prove (5.6.13) in the case n = 0, it suﬃces to prove commutativity after restricting along
the epimorphism p0 : T B ↠P0, and indeed
γ · Tk0 · v0 · p0 = γ · Tk0 · Tq0 = γ · Th = h · β = k0 · q0 · β = k0 · u0 · p0 .
Inductively, deﬁne kn+1 to be the unique factorization of γ·Tkn : TQn →C through the
coequalizer un+1 : Pn+1 ↠Qn+1; a straightforward diagram chase shows that γ · Tkn deﬁnes
a fork under the pair coequalized by un+1. Another diagram chase shows that the condition
(5.6.13) is satisﬁed by kn+1. A ﬁnal diagram chase veriﬁes that the maps kn : Qn →C
assemble into a cone under the ω-indexed diagram whose colimit is Qω. Thus, they induce
the desired map k: Qω →C. Because T preserves these ﬁltered colimits, the pentagon
conditions (5.6.13) imply that
TQω
uω

Tk
/ TC
γ

Qω
k
/ C
so k deﬁnes a T-algebra homomorphism.
With the solution set condition so-veriﬁed,
Theorem 4.6.3 implies that the constant diagram functor ∆: CT →(CT)•⇒• has a left
adjoint and thus that CT has coequalizers.
□
In particular, by Theorems 3.2.6 and 5.6.9, Set is complete and cocomplete.
By
Deﬁnition 5.5.5, categories of models for an algebraic theory are algebras for a ﬁnitary
monad. Applying Theorem 5.6.12, we conclude:
Corollary 5.6.14. Any category of models for an algebraic theory is cocomplete.
While the monad β for compact Hausdorﬀspaces is not ﬁnitary, the category cHaus is
nonetheless cocomplete. Example 4.5.14(i) observes that compact Hausdorﬀspaces form
a reﬂective subcategory of Top. The claim follows from Propositions 3.5.2 and 4.5.15.
Exercises.
Exercise 5.6.i. Exercise 3.3.iv suggests an alternate form of the monadicity theorem: a
functor U : D →C is monadic if U has a left adjoint, if U reﬂects isomorphisms, and if D
has and U preserves U-split coequalizers. Use this, together with a direct proof that any
continuous bijection between compact Hausdorﬀspaces is a homeomorphism, to re-prove
Corollary 5.5.6 by showing that cHaus has U-split coequalizers, constructed as in Top.
(Hint: It is easy to see that the coequalizer of maps f, g: X ⇒Y of compact spaces is
compact. To prove that a U-split coequalizer is Hausdorﬀ, use the split coequalizer diagram
in Set to prove that the kernel pair E ,→Y × Y of the quotient map Y ↠Z is closed.)
Exercise 5.6.ii. Prove Theorem 5.6.5(ii).

188
5. MONADS AND THEIR ALGEBRAS
Exercise 5.6.iii. Prove that the T-algebra constructed as a coequalizer in the proof of
Proposition 5.6.11 deﬁnes the coproduct in the category of T-algebras.

CHAPTER 6
All Concepts are Kan Extensions
The notion of Kan extensions subsumes all the
other fundamental concepts of category theory.
Saunders Mac Lane, Categories for the Working
Mathematician [ML98a]
Extension problems are pervasive in mathematics. For instance, iterated products of
a ﬁxed positive real number, such as 2, deﬁne its natural number powers. The resulting
function 2−: N →R>0 can be extended to a homomorphism from the additive group of
integers to the multiplicative group of non-negative reals by declaring 2−n B ( 1
2)n for n ∈N.
The resulting function 2−: Z →R>0 can be extended further to an additive homomorphism
deﬁned on the rationals by declaring 2
1
n B
n√
2 for n ∈N. Finally, 2−: Q →R>0 can
be extended to an order-preserving function on the reals, not via any explicitly described
arithmetic formula, but by using the fact that R>0 has limits of all bounded increasing
sequences.
The construction of the function 2−: R →R>0 as an order-preserving function ex-
tending 2−: Q →R>0 is a special case of a solution to a categorically-deﬁned problem
of extending a functor F : C →E along another functor K : C →D, possibly but not
necessarily a subcategory inclusion. In general, strict extensions may or may not exist.
Obstructions can take several forms: two arrows in C with distinct images in E might be
identiﬁed in D, or two objects in C might have a morphism between their images in D
but not in E. For this reason, it is more reasonable to ask for a “best approximation” to
an extension taking the form of a universal natural transformation pointing either from or
to F. The resulting categorical notion, quite simple to deﬁne, is surprisingly ubiquitous
throughout mathematics, as we shall soon discover.
Solutions to this categorical extension problem, the ﬁrst examples of which were studied
in [Kan58], are called Kan extensions and come in dual left-handed and right-handed forms.
The general deﬁnition and some basic examples of Kan extensions are introduced in §6.1,
which explains how Kan extensions deﬁne partial adjoints to the functor K∗: ED →EC
deﬁned by restriction along K : C →D. A formula, deﬁning left Kan extensions as certain
colimits and right Kan extensions as certain limits, is presented in §6.2, which in particular
provides criteria guaranteeing that certain Kan extensions exist.
In §6.3, we discover
that the (co)limit formulae imply that the Kan extensions so-deﬁned satisfy a stronger
universal property than was originally supposed: namely, Kan extensions deﬁned by the
(co)limit formulae are pointwise Kan extensions. In §6.4, we study total derived functors,
which are deﬁned as certain Kan extensions, and introduce an abstract general framework
that constructs “point-set level” lifts of these derived functors. Unexpectedly—since total
derived functors take values in homotopy categories, which have few limits and colimits—
the total derived functors constructed in this manner have the stronger universal property of
being pointwise and in fact absolute Kan extensions, a fact that has signiﬁcant consequence
189

190
6. ALL CONCEPTS ARE KAN EXTENSIONS
for derived adjunctions. We conclude in §6.5 by showing how simple special cases of Kan
extensions can be used to redeﬁne adjunctions, limits, colimits, and monads and generalize
the Yoneda lemma.
6.1. Kan extensions
The data of a Kan extension consists of a functor and a natural transformation satisfying
a universal property relative to other similar pairs. For the reasons discussed in §4.4, this
deﬁnition can also be stated for 2-categories other than the 2-category of categories, func-
tors, and natural transformations, in which case the eponym “Kan” is frequently dropped.
Since we are only interested in this one example of a 2-category at present, we retain the
traditional name.
Definition 6.1.1. Given functors F : C →E, K : C →D, a left Kan extension of F along
K is a functor LanK F : D →E together with a natural transformation η: F ⇒LanK F · K
such that for any other such pair (G: D →E, γ: F ⇒GK), γ factors uniquely through η as
illustrated.1
C
F
/
K

⇓η
E
D
LanK F
?
C
F
/
K

⇓γ
E
=
C
F
/
K

⇓η
E
D
G
?
D
LanK F
3
∃!
u
G
K
Dually, a right Kan extension of F along K is a functor RanK F : D →E together with a
natural transformation ϵ : RanK F · K ⇒F such that for any (G: D →E, δ: GK ⇒F), δ
factors uniquely through ϵ as illustrated.
C
F
/
K

⇑ϵ
E
D
RanK F
?
C
F
/
K

⇑δ
E
=
C
F
/
K

⇑ϵ
E
D
G
?
D
RanK F
3
G
K
∃!
v
Remark 6.1.2. When K : C →D is fully faithful, then assuming certain (co)limits exist,
the left and right Kan extensions do in fact extend the functor F along K, at least up to
natural isomorphism; see Corollary 6.3.9. But even a genuine on-the-nose extension of F
along K might not necessarily deﬁne a Kan extension; see Exercises 6.1.i and 6.1.ii.
Example 6.1.3. For any object c ∈C and any F : C →Set, there is a bijection between
elements x ∈Fc and natural transformations with boundary as displayed
1
∗
/
c

⇓x
Set
C
F
>
where ∗denotes the functor that picks out the singleton set. By the Yoneda lemma, the
representable functor C(c, −) and the identity 1c ∈C(c, c) deﬁne the left Kan extension of
1Writing α for the natural transformation LanK F ⇒G, the right-hand pasting diagrams express the equality
γ = αK · η, i.e., that γ factors as F
η +3 LanK F · K
αK +3 GK .

6.1. KAN EXTENSIONS
191
∗: 1 →Set along c: 1 →C. The required unique factorization
1
∗
/
c

⇓1c
Set
C
C(c,−)
>
1
∗
/
c

⇓x
Set
=
1
∗
/
c

⇓1c
Set
C
F
>
C
C(c,−) 4
F
J
Ψ(x)
u
is the natural transformation Ψ(x): C(c, −) ⇒F deﬁned in the proof of Theorem 2.2.4.
The pasting identity asserts that Ψ(x)c(1c) = x.
Replacing C by Cop, this argument shows that the contravariant representable functor
C(−, c) deﬁnes the left Kan extension of ∗: 1 →Set along c: 1 →Cop.
Example 6.1.4. For any group G, there is a unique functor 1 →BG picking out the single
object in this category. For any category C, object c ∈C, and G-object X in C, natural
transformations as displayed below-left and below-right
1
c
/
 
⇓
C
BG
X
>
1
c
/
 
⇑
C
BG
X
>
correspond to maps in C between c and the underlying object of the G-object X, with the
group action forgotten.
If C has coproducts, then morphisms c →X correspond to G-equivariant maps
`
G c →X, where G acts on the left of the indexing set of the coproduct. This bijec-
tion is implemented by restricting the G-equivariant map to the component indexed by the
identity element e ∈G. Thus, we see that
1
c
/
 
⇓ιe
C
BG
Lan=`
G c
>
is a left Kan extension diagram.
Dually, if C has products, then morphisms X →c correspond to G-equivariant maps
X →Q
G c, where G acts on the right2 of the indexing set of the product. This bijection is
implemented by projecting the G-equivariant map to the component indexed by the identity
element. Thus, we see that
1
c
/
 
⇑πe
C
BG
Ran=Q
G c
>
is a right Kan extension diagram.
The universal property that deﬁnes Kan extensions posits a bijection between certain
classes of natural transformations, implemented by composing with a given natural trans-
formation. In practice, the functor categories EC and ED referred to in Deﬁnition 6.1.1
might not be locally small, in which case the bijection may be between a pair of proper
classes.
2By the universal property of the product, a function f : A →B between indexing sets induces a map
f ∗: Q
B c →Q
A c deﬁned at the component indexed by a ∈A by projecting from the domain to the component
indexed by f(a) ∈B.

192
6. ALL CONCEPTS ARE KAN EXTENSIONS
Passing to a higher set-theoretical universe, we can nonetheless think of a left Kan
extension of F : C →E along K : C →D as a representation for the functor
EC(F, −· K): ED →SET
that sends a functor D →E to the collection of natural transformations from F to its
restriction along K. By the Yoneda lemma, any pair (G, γ) as in Deﬁnition 6.1.1 deﬁnes a
natural transformation
ED(G, −)
γ
+3 EC(F, −· K).
The universal property satisﬁed by the left Kan extension (LanK F, η) is equivalent to the
assertion that the corresponding map
ED(LanK F, −)
η
+3 EC(F, −· K)
is a natural isomorphism, i.e., that (LanK F, η) represents the functor EC(F, −· K).
Fixing K : C →D but letting F ∈EC vary:
Proposition 6.1.5. If, for ﬁxed K : C →D and E, the left and right Kan extensions of
any functor F : C →E along K exist, then these deﬁne left and right adjoints to the
pre-composition functor K∗: ED →EC.
(6.1.6)
ED(LanK F,G)  EC(F,GK)
EC
LanK

RanK
D
⊥
⊥
ED
K∗
o
EC(GK, F)  ED(G, RanK F)
Proof. If the functors LanK F, RanK F : D ⇒E exist for any F : C →E, then Proposi-
tion 4.3.4 applied to the natural isomorphisms of Deﬁnition 6.1.1 tells us that these values
assemble to deﬁne adjoint functors LanK ⊣K∗⊣RanK. The 2-cell η: F ⇒LanK F · K
is the component of the unit for LanK ⊣K∗indexed by the object F ∈EC; dually,
ϵ : RanK F · K ⇒F is a component of the counit for K∗⊣RanK. The universal property
of the left Kan extension declares that η: F ⇒LanK F · K is initial in the comma category
F ↓K∗; see Lemma 4.6.1.
□
Conversely, by uniqueness of adjoints (Proposition 4.4.1), the objects in the image of
any left or right adjoint to a pre-composition functor are Kan extensions. This observation
leads to several immediate examples.
Example 6.1.7. The objects of the functor category VectBG
k
are G-representations over
the ﬁeld k, and arrows are G-equivariant linear maps.
If H is a subgroup of G, re-
striction resG
H : VectBG
k
→VectBH
k
of a G-representation to an H-representation is simply
pre-composition by the inclusion functor BH ,→BG. This functor has a left adjoint, called
induction, and a right adjoint, called coinduction.
VectBG
k
resG
H / VectBH
k
coindG
H
a
indG
H
}
⊥
⊥
By Proposition 6.1.5, the induction functor is given by left Kan extension along the inclusion
BH ,→BG, while coinduction is given by right Kan extension. The reader unfamiliar with
the construction of induced representations need not remain in suspense for very long;

6.2. A FORMULA FOR KAN EXTENSIONS
193
see Theorem 6.2.1 and Example 6.2.8. Similar remarks apply for G-sets, G-spaces, based
G-spaces, or indeed G-objects in any category, although if the ambient category has few
limits and colimits, these adjoints need not exist.
Example 6.1.8. The category ∆of ﬁnite non-empty ordinals and order-preserving maps is
a full subcategory containing all but the initial object of the category ∆+, of ﬁnite ordinals
and order-preserving maps. Presheaves on ∆are simplicial sets, while presheaves on ∆+ are
called augmented simplicial sets. Left Kan extension deﬁnes a left adjoint to restriction
Set∆op
+
res /
⊥
⊥
Set∆op
π0
|
triv
^
that augments a simplicial set X with its set π0X of path components. Right Kan extension
assigns a simplicial set the trivial augmentation built from the one-point set, as can easily
be veriﬁed by readers familiar with the combinatorics of simplicial sets.
Exercises.
Exercise 6.1.i. Construct a toy example to illustrate that if F factors through K along some
functor H, it is not necessarily the case that (H, 1F) is either the left or right Kan extension
of F along K.
Exercise 6.1.ii. Consider the functor d1 : 2 ,→3 whose image omits the middle object.
Show that for any category C and any functor 2 →C, there exist both left and right Kan
extensions along d1 : 2 ,→3 by giving an explicit construction. Observe that both the left
and right Kan extensions extend the original diagram
2
/
d1

C
3
Lan
?
Ran
?
but, nonetheless, these functors are not typically isomorphic.
Exercise 6.1.iii. Deﬁne the category in which the right Kan extension of F : C →E along
K : C →D is terminal and explain the connection between this category and the functor
EC(−· K, F): (ED)op →Set, in the case where these functor categories are locally small.
6.2. A formula for Kan extensions
In this section, we will see that right and left Kan extensions along any functor
K : C →D whose domain is small and whose codomain is locally small exist whenever
the target category E has certain limits or colimits, respectively. Moreover, these (co)limits
provide an explicit formula for the left and right Kan extension functors.
In the case of left Kan extensions, we are seeking to deﬁne a functor LanK F : D →E
that is the “closest approximation to an extension of F along K from the left,” i.e., up to a
natural transformation η
C
F
/
K

⇓η
E
D
LanK F
?
C
F
/
K

⇓γ
E
=
C
F
/
K

⇓η
E
D
G
?
D
LanK F
3
∃!
u
G
K

194
6. ALL CONCEPTS ARE KAN EXTENSIONS
that is universal among natural transformations γ: F ⇒GK.
So, to deﬁne the value of LanK F(d) at an object d ∈D, we should consider all possible
approximations to d “from the left” that come from the category C.
This leads us to
consider the comma category K ↓d whose objects are morphisms Kc →d from the image
of a speciﬁed c ∈C and whose morphisms are morphisms c →c′ in C that give rise to
commutative triangles in D. The objects of the category K ↓d parametrize approximations
to the object d coming from C from the left.
Recall that K ↓d is the category of elements of the functor D(K−, d): Cop →Set,
and as such comes with a canonical projection functor Πd : K ↓d →C. The composite
K ↓d
Πd
−−→C
F−→E of the projection functor with F sends each approximation Kc →d to the
corresponding object Fc in E that approximates the yet-to-be-deﬁned LanK F(d). Based
on this intuition, it seems reasonable to deﬁne LanK F(d) to be the colimit of this diagram,
and indeed if these colimits exist, they deﬁne the left Kan extension LanK F : D →E.
Theorem 6.2.1. Given functors F : C →E and K : C →D, if for every d ∈D the colimit
(6.2.2)
LanK F(d) B colim(K ↓d
Πd
−−→C
F−→E)
exists, then they deﬁne the left Kan extension LanK F : D →E, in which case the unit
transformation η: F ⇒LanK F · K can be extracted from the colimit cone. Dually, if for
every d ∈D the limit
(6.2.3)
RanK F(d) B lim(d↓K
Πd
−−→C
F−→E)
exists, then they deﬁne the right Kan extension RanK F : D →E, in which case the counit
transformation ϵ : RanK F · K ⇒F can be extracted from the limit cone.
Proof. The ﬁrst task is to extend the data (6.2.2) deﬁning the objects LanK F(d), each
with a speciﬁed colimit cone λd : FΠd ⇒LanK F(d), to a functor LanK F : D →E. A
morphism g: d →d′ in D induces a canonical functor, which commutes with the projections
to C,
K ↓d
g∗
/
Πd
"
K ↓d′,
Πd′
{
C
and is deﬁned on objects by composing with g. Any cone under a diagram indexed by
the category K ↓d′ also deﬁnes a cone under the diagram deﬁned by restricting along
g∗: K ↓d →K ↓d′; the legs of the new cone are deﬁned by reindexing the legs of the
old cone. In particular, the colimit cone λd′ : FΠd′ ⇒LanK F(d′) that deﬁnes LanK F(d′)
can be reindexed to deﬁne a cone under the diagram FΠd = FΠd′g∗. By the universal
property of the colimit cone λd : FΠd ⇒LanK F(d), there is a unique morphism between
their nadirs in E commuting with the legs of the respective colimit cones:
Fc
λd
f : Kc→d
x
λd′
g f : Kc→d′
'
LanK F(d)
LanK F(g) / LanK F(d′),
which we take to be LanK F(g). Uniqueness implies that LanK F is functorial. The leg of
the unit transformation ηc : Fc →LanK F(Kc), indexed by an object c ∈C, is deﬁned to be
the leg
ηc B λKc
1Kc : Kc→Kc : Fc →LanK F(Kc)

6.2. A FORMULA FOR KAN EXTENSIONS
195
of the colimit cone deﬁning LanK F(Kc). For any h: c →c′ in C, there are commuting
triangles
Fc
Fh
/
λKc
1Kc 
λKc′
Kh
(
Fc′
λKc′
1Kc′

LanK F(Kc) LanK F(Kh)/ LanK F(Kc′)
proving that η: F ⇒LanK F · K is natural.
It remains to show that the pair (LanK F, η) has the universal property that deﬁnes the
left Kan extension of F along K. That is, given any pair (G, γ) as below-left, we wish to
construct the unique factorization α: LanK F ⇒G displayed below-right:
(6.2.4)
C
F
/
K

⇓γ
E
=
C
F
/
K

⇓η
E
D
G
?
D
LanK F
3
G
K
αu
Each leg αd : LanK F(d) →Gd is deﬁned to be the unique factorization of some cone under
FΠd with nadir Gd through the colimit cone λd : FΠd ⇒LanK F(d):
(6.2.5)
Fc
λd
f : Kc→d /
γc

LanK F(d)
αd

GKc
G f
/ Gd
The leg of this cone, indexed by the object f : Kc →d ∈K ↓d, is the left-bottom composite
displayed above. For each morphism h: c →c′ in K ↓d, the commutative diagram displayed
below-right
c
h

Kc
Kh

f
&
Fc
FΠd(h)=Fh

γc
/ GKc
GKh

G f
'
d
∈K ↓d
Gd
c′
Kc′
f ′
9
Fc′
γc′ / GKc′
G f ′
7
implies that these legs indeed deﬁne a cone FΠd ⇒Gd.
To show that α: LanK F ⇒G is natural in morphisms g: d →d′ in D, it suﬃces, by
the universal property of LanK F(d), to demonstrate that the outer pentagon
Fc
λd
f : Kc→d
}
λd′
g f : Kc→d′
!
LanK F(d)
LanK F(g) /
αd

LanK F(d′)
αd′

Gd
Gg
/ Gd′
commutes for each f : Kc →d. Using the commutative squares (6.2.5) that deﬁne the
components of α, this follows easily from functoriality of G and naturality of γ.

196
6. ALL CONCEPTS ARE KAN EXTENSIONS
Finally, to verify the pasting equality (6.2.4), we must show that αKc · ηc = γc for each
c ∈C. From our deﬁnition of η: F ⇒LanK F, this is immediate, as a special case
Fc
λKc
1Kc : Kc→Kc
Cηc
/
γc

LanK F(Kc)
αKc

GKc
G1Kc
GKc
of the commutative squares that deﬁne the components of α. To show that α: LanK F ⇒G
is the unique natural transformation deﬁning a factorization αK · η = γ, observe that
naturality of α in f : Kc →d
Fc
λd
f : Kc→d
!
ηcBλKc
1
|
γc
{
LanK F(Kc)
LanK F( f) /
αKc

LanK F(d)
αd

GKc
G f
/ Gd
forces us to deﬁne αd as in (6.2.5).
□
Corollary 6.2.6. If K : C →D is a functor so that C is small and D is locally small then:
(i) If E is cocomplete, then left Kan extensions ED
K∗
/
⊥
EC
LanK
o
exist and are given by the
colimit formula (6.2.2).
(ii) If E is complete, then right Kan extensions ED
K∗
/
⊥
EC
RanK
o
exist and are given by the
limit formula (6.2.3).
Proof. If C is small and D is locally small, then for any d ∈D the comma categories
d ↓K and K ↓d are small, so the respective completeness and cocompleteness hypotheses
ensure that the limits and colimits of Theorem 6.2.1 exist in E.
□
Example 6.2.7. Consider the posets (Q, ≤) of rationals and (R>0, ≤) of non-negative reals.
We have the functor 2−: Q →R>0 deﬁned at the introduction to this chapter. The poset R>0
has all limits (inﬁma) and colimits (suprema) of bounded subsets. In particular, we may
use Theorem 6.2.1 to deﬁne the left Kan extension along Q ,→R. The value of Lan 2x is
the supremum (the colimit) of all 2q with q ∈Q and q ≤x. This is the usual deﬁnition of
2x, so we conclude that the exponential function 2−: R →R>0 is the left Kan extension of
2−: Q →R>0 along the inclusion Q ,→R.
In this case, the exponential function 2−: R →R>0 is also the right Kan extension of
2−: Q →R>0 along the inclusion Q ,→R; this is because 2x is also the inﬁmum of 2q for
all q ∈Q with x ≤q. Exercise 6.2.ii invites the reader to explore why the left and right Kan
extensions coincide in this case.
Example 6.2.8. Returning to Example 6.1.7, we can use Theorem 6.2.1 to give explicit
formulae for the induction and coinduction functors associated to a subgroup inclusion

6.2. A FORMULA FOR KAN EXTENSIONS
197
H ,→G. When C is complete and cocomplete, Corollary 6.2.6 supplies adjunctions:
(6.2.9)
CBG
resG
H / CBH
coinG
H
\
indG
H
 ⊥
⊥
Given X ∈CBH, Theorem 6.2.1 deﬁnes indG
HX as a colimit of a diagram
(6.2.10)
BH ↓∗G
Π
/ BH
X
/ C
indexed by the comma category BH ↓∗G, where ∗G denotes the unique object in BG.
Objects in the indexing category are morphisms in BG, i.e., group elements g ∈G. A
morphism h: g →g′ is an element h ∈H so that g′h = g. The diagram (6.2.10) sends each
object to X ∈C with morphisms given by the left action of H. Applying Theorem 3.4.12,
this colimit is deﬁned by the coequalizer diagram
X
ι(g,h)

ιgh
"
`
G×H X
// `
G X
q
/ / indG
HX
X
ι(g,h)
O
h∗
/ X
ιg
O
where the top map includes the component indexed by (g, h) to the component indexed by
gh, while the bottom map acts by h and then includes into the component indexed by g.
By inspection, the object indG
HX is isomorphic in C to `
G/H X via an isomorphism
that allows us to explicitly describe the epimorphism q. Fix a complete set of left coset
representatives G/H = {giH | gi ∈G}. Then each g ∈G factors uniquely as gjh′ with g j
among the chosen representatives and h′ ∈H. The g-component of the quotient map q is
deﬁned as
X
ιg

(h′)∗
/ X
ιg j

`
G X
q
/ / `
G/H
X  indG
HX
The action of an element g′ ∈G on the object indG
HX  `
G/H X ∈C is the unique quotient,
with respect to this map q, of the action of g′ on `
G X by left multiplication on the indexing
set:
`
G×H X
//
(g,h)7→(g′g,h)

`
G X
q
/ /
g7→g′g

`
G/H
X  indG
HX
(g′)∗

`
G×H X
// `
G X
q
/ / `
G/H
X  indG
HX

198
6. ALL CONCEPTS ARE KAN EXTENSIONS
Dually, Theorem 6.2.1 deﬁnes coinG
HX as an equalizer
X
coinG
HX  Q
H\G
X
/ m
/ Q
G X
//
πg

πhg
<
Q
H×G X
π(h,g)

π(h,g)
O
X
h∗
/ X
There is an isomorphism coinG
HX  Q
H\G X of underlying objects of C, under which the
monomorphism m: Q
H\G X ↣Q
G X admits a dual description, given by choosing right
coset representatives. The action of G on coinG
HX  Q
H\G
X is deﬁned by restricting the right
action of G on the indexing set G of Q
G X along this map m.
In the category Vectk, ﬁnite products and ﬁnite coproducts coincide: these are just
direct sums of vector spaces. If V ∈VectBH
k
is an H-representation and H is a ﬁnite index
subgroup of G, then the colimit and limit formulae of (6.2.2) and (6.2.3) both yield a direct
sum of copies of V indexed by a set whose size is the index of H in G. Moreover, the
G-actions are compatible with this isomorphism indG
HV  coinG
HV. Thus, for ﬁnite index
subgroups, the left and right adjoints of (6.2.9) are the same; i.e., induction from a ﬁnite
index subgroup is both left and right adjoint to restriction.
Example 6.2.11. Recall from Example 1.3.15 that any group G has an orbit category
OG whose objects are subgroups H ⊂G, which we identify with the left G-sets G/H of
left cosets of H. Morphisms G/H →G/K are G-equivariant maps, each of which is
represented by a mapping gH 7→gγK, where γ ∈G is an element so that γ−1Hγ ⊂K.
From this description, we see that the monoid of endomorphisms of the object G/e ∈OG
is the group Gop. So there is an embedding BGop ,→OG sending the single object to G/e.
For any left G-set X ∈SetBG, Theorem 6.2.1 can be used to compute the right Kan
extension
BG
X
/
 p
"
⇑
Set
Oop
G
Ran X
<
The comma category that indexes the diagram whose limit deﬁnes the value of Ran X
at a subgroup H ⊂G turns out to be isomorphic to the translation groupoid TG(G/H)
for the left G-set G/H of left cosets; see Example 1.5.18. As a category, the translation
groupoid is equivalent to the group of automorphisms of any of its objects; in this case,
we choose the coset H whose automorphism group is H. The equivalence of categories
BH ≃TG(G/H) allows us to reduce the limit that deﬁnes Ran X(G/H) to the limit of the
diagram resG
HX : BH →Set restricting the G-set X to the subgroup H. By Example 3.2.12,
this limit is XH, the subset of H-ﬁxed points.
In summary, the right Kan extension Ran X : Oop
G →Set is the ﬁxed point functor,
mapping G/H to XH and carrying a morphism γ: G/H →G/K to the direct-image
function γ∗: XK →XH; if x ∈XK, then γx ∈XH because γ−1hγ ∈K for all h ∈H. In the
case where G is the Galois group for a ﬁnite Galois extension E/F, the right Kan extension

6.3. POINTWISE KAN EXTENSIONS
199
of E : BG →FieldE
F deﬁnes the isomorphism of categories Oop
G  FieldE
F that categoriﬁes
the fundamental theorem of Galois theory.3
Example 6.2.12. Write ∆≤n for the full subcategory spanned by the ﬁrst n + 1 ordi-
nals [0], . . . , [n] in ∆. Restriction along the inclusion functor in : ∆≤n ,→∆is called n-
truncation. As Set is complete and cocomplete, Corollary 6.2.6 implies that n-truncation
admits both left and right adjoints:
Set∆op
i∗
n
/ Set∆op
≤n
Ranin
^
Lanin
}
⊥
⊥
The composite comonad on Set∆op is skn, the functor that maps a simplicial set to its
n-skeleton. The composite monad on Set∆op is coskn, the functor that maps a simplicial set
to its n-coskeleton. Furthermore, skn is left adjoint to coskn, as is the case for any comonad
and monad arising in this way (see Exercise 4.1.iii).
Again, Theorem 6.2.1 provides an explicit description of the skeleton and coskeleton
functors. We leave the details to those readers familiar with simplicial sets.
Exercises.
Exercise 6.2.i. Directed graphs are functors from the category with two objects E, V and
a parallel pair of maps s, t: E ⇒V to Set. A natural transformation between two such
functors is a graph homomorphism. The forgetful functor DirGraph →Set that maps a
graph to its set of vertices is given by restricting along the functor from the terminal category
1 that picks out the object V. Use Theorem 6.2.1 to compute left and right adjoints to this
forgetful functor.
Exercise 6.2.ii. Give conditions on a monotone function f : Q →R, meaning a functor
f : (Q, ≤) →(R, ≤), so that the left and right Kan extensions along Q ,→R exist and
coincide.
6.3. Pointwise Kan extensions
Unusually for a mathematical object deﬁned by a universal property, generic Kan
extensions are rather poorly behaved, particularly in the case of derived functors, which
are introduced in the next section. On account of this, in his much cited book on enriched
category theory, Kelly reserves the name “Kan extension” for pairs satisfying the condition
to be introduced shortly, calling those of our Deﬁnition 6.1.1 “weak” and writing:
Our present choice of nomenclature is based on our failure to ﬁnd a
single instance where a weak Kan extension plays any mathematical
role whatsoever. [Kel82, §4]
By the categorical community’s consensus, the important Kan extensions are pointwise
Kan extensions. To explain this, a preliminary notion is needed:
3The category FieldE
F has very few limits but it does have the limits of Theorem 6.2.1 in this instance; see
Theorem 6.3.7.

200
6. ALL CONCEPTS ARE KAN EXTENSIONS
Definition 6.3.1. A functor L: E →F preserves a left Kan extension (LanK F, η) if the
whiskered composite (L LanK F, Lη) is the left Kan extension of LF along K.
C
F
/
K

⇓η
E
L
/ F

C
LF
/
K

⇓
F
D
LanK F
?
D
LanK LF
?
Theorem 6.2.1 constructs certain left Kan extensions using colimits. As left adjoints
preserve colimits (Theorem 4.5.3), it follows that left adjoints preserve such left Kan
extensions. Indeed, left adjoints preserve all left Kan extensions, regardless of how they
are constructed:
Lemma 6.3.2. Left adjoints preserve left Kan extensions.
Proof 1. Suppose given a left Kan extension (LanK F, η) with codomain E and suppose
further that L: E →F has a right adjoint R with unit ι: 1E ⇒RL and counit ν: LR ⇒1F.
Then given H : D →F there are natural isomorphisms
FD(L LanK F, H)  ED(LanK F, RH)  EC(F, RHK)  FC(LF, HK) .
Taking H = L LanK F, these isomorphisms act on the identity natural transformation as
follows:
1L LanK F 7→ιLanK F 7→ιLanK F·K · η 7→νL LanK F·K · LιLanK F·K · Lη = Lη .
Hence, by the Yoneda lemma, (L LanK F, Lη) is a left Kan extension of LF along K.
□
Unpacking the natural isomorphisms in Proof 1 yields an explicit construction of the
unique factorization of a natural transformation α: LF ⇒HK through Lη, which is more
easily visualized in a second proof that displays the composite natural transformations as
pasting diagrams.
Proof 2. Given a natural transformation α: LF ⇒HK, form the pasted composite
with the unit ι: 1E ⇒RL displayed below-left.
C
K

F
/ E
⇓α
L

⇓ι
E
=
C
K

F
/
⇓η
E
E
D
H
/ F
R
?
D
H
/
LanK F
?
F
∃!⇓ζ
R
?
By the universal property of the left Kan extension (LanK F, η), there is a unique factorization
through η as displayed above-right. Composing each of these natural transformations with
the counit ν: LR ⇒1F and applying the triangle identity νL · Lι = 1L,
C
K

F
/ E
⇓α
L

C
=
K

F
/ E
⇓α
L

⇓ι
E
L

⇓ν
C
=
K

F
/
⇓η
E
E
L

D
H
/ F
D
H
/ F
R
@
F
D
H
/
LanK F
@
F
⇓ζ
R
@
⇓ν
F
reveals that α factors through Lη via the whiskered composite of νH · Lζ : L LanK F ⇒H
with K.

6.3. POINTWISE KAN EXTENSIONS
201
To demonstrate uniqueness, note that given any such factorization
C
K

F
/ E
⇓α
L

=
C
K

F
/
⇓η
E
L

⇓χ
D
H
/ F
D
H
/
LanK F
?
F
composing each of these natural transformations with the unit ι: 1E ⇒RL
C
K

F
/ E
⇓α
L

⇓ι
E
=
C
K

F
/
⇓η
E
L

⇓χ
⇓ι
E
D
H
/ F
R
?
D
H
/
LanK F
?
F
R
?
yields a factorization of Rα·ιF : F ⇒RHK through η, whence ζ = Rχ·ι LanK F. Composing
with ν and applying a triangle identity
E
E
L

=
E
L

⇓χ
⇓ι
E
L

=
E
L

⇓χ
D
H /
LanK F
B
F
⇓ζ
R
B
⇓ν
F
D
H
/
LanK F
B
F
R
B
⇓ν
F
D
H
/
LanK F
B
F
we see that the factorization χ: L LanK F ⇒H must agree with the factorization constructed
above.
□
Example 6.3.3. The forgetful functor U : Top →Set has both left and right adjoints. It
follows from Lemma 6.3.2 that U preserves the left and right Kan extensions of Example
6.1.7, as constructed in Example 6.2.8.
Example 6.3.4. The forgetful functor U : Vectk →Set preserves limits, because it is a
right adjoint, but not colimits because the underlying set of a direct sum is not simply
the coproduct of the underlying sets of vectors. Indeed, it is clear from the construction
given in Example 6.2.8 that the underlying set of a G-representation induced from an H-
representation is not equal to the G-set induced from the underlying H-set. Lemma 6.3.2
implies, however, that the underlying set of the coinduced representation does agree with
the coinduced G-set from the underlying H-set.
The notion of preservation of Kan extensions is used to deﬁne what it means for a Kan
extension to be “pointwise.”
Definition 6.3.5. When E is locally small, a right Kan extension, as displayed below-right,
is a pointwise right Kan extension if it is preserved by all representable functors E(e, −).
C
F
/
K

⇑ϵ
E
C
K

F
/
⇑ϵ
E
E(e,−) / Set
D
RanK F
?
D
RanK F
?
Left Kan extensions are dual to right Kan extensions, not under reversal of the di-
rection of functors (the morphisms in CAT), but under reversal of the direction of natural
transformations (the 2-morphisms in the 2-category CAT). A left Kan extension may be
converted to a right Kan extension by “replacing every category by its opposite”: a functor
K : C →D is equally a functor K : Cop →Dop but the process of replacing each category
by its opposite reverses the direction of natural transformations, because their components

202
6. ALL CONCEPTS ARE KAN EXTENSIONS
are morphisms in the opposites of the target categories.4 A left Kan extension is pointwise,
if the corresponding right Kan extension is pointwise:
Definition 6.3.6. When E is locally small, a left Kan extension, as displayed below-left,
is a pointwise left Kan extension if for all e ∈E the data displayed below-right is a right
Kan extension:
C
F
/
K

⇓η
E
Cop
K
"
F
/
⇑η
Eop
E(−,e) / Set
D
LanK F
?
Dop
LanK F
<
Because covariant representables preserve all limits (Proposition 3.4.5), it is clear that
if a right Kan extension is given by the formula of Theorem 6.2.1, then that Kan extension
is pointwise; dually, the left Kan extensions deﬁned by Theorem 6.2.1 are pointwise. The
surprise is that the converse also holds. This characterization justiﬁes the terminology: a
pointwise Kan extension can be computed pointwise as a limit in E.
Theorem 6.3.7. If D and E are locally small, a right Kan extension of F : C →E along
K : C →D is pointwise if and only if it can be computed by
RanK F(d)  lim

d↓K
Πd
−−→C
F−→E

,
in which case, in particular, this limit exists. Dually, a left Kan extension of F : C →E
along K : C →D is pointwise if and only if it can be computed by
LanK F(d)  colim
 
K ↓d
Πd
−−→C
F−→E
!
,
in which case, in particular, this colimit exists.
Proof. If RanK F is pointwise, then for any e ∈E, E(e, RanK F) is the right Kan
extension of E(e, F−): C →Set along K.
By the Yoneda lemma5 and the deﬁning
universal property of this right Kan extension
E(e, RanK F(d))  SetD(D(d, −), E(e, RanK F))  SetC(D(d, K−), E(e, F−))
 Cone(e, FΠd) ,
where the ﬁnal natural isomorphism is the content of Lemma 6.3.8 below. This isomorphism
exhibits RanK F(d) as the limit of FΠd : d↓K →E.
□
Lemma 6.3.8. Given functors F : C →E and K : C →D with D and E locally small and
an object d ∈D, from which we deﬁne Πd : d↓K →C, there is a natural isomorphism
Cone(e, FΠd)  SetC(D(d, K−), E(e, F−)) .
Note that if C is not small, then d↓K is not small, so even if D and E are locally small
there may be more than a set’s worth of cones with summit e over FΠd and more than a
set’s worth of natural transformations D(d, K−) ⇒E(e, F−). However, the isomorphisms
exhibited in the proof of Theorem 6.3.7 imply that the collections being considered are in
fact sets.
4Succinctly, “op” is a 2-functor (−)op : CATco →CAT, where “co” is used to denote the dual of a 2-category
obtained by reversing the direction of the 2-morphisms but not the 1-morphisms.
5The hypothesis that D is locally small is included so that the Yoneda lemma can be used here, but in a suﬃcient
robust set-theoretical framework in which the proof of Theorem 2.2.4 can be extended to classes, this hypothesis
can be dropped.

6.3. POINTWISE KAN EXTENSIONS
203
Proof. To deﬁne the legs of a cone with summit e over FΠd is to choose, for every
f ∈D(d, Kc), a morphism λc
f ∈E(e, Fc) so that for every h: c →c′ in C, commutativity
of the left-hand triangle in D implies commutativity of the right-hand triangle in E:
Kc
Kh

Fc
Fh

d
f
8
f ′
&
⇝
e
λc
f
8
λc′
f′
&
Kc′
Fc′
This deﬁnes precisely the data of a natural family of functions λc : D(d, Kc) →E(e, Fc) so
that for all h: c →c′ in C, the square
D(d, Kc)
λc
/
(Kh)∗

E(e, Fc)
(Fh)∗

D(d, Kc′)
λc′
/ E(e, Fc′)
commutes.
□
Importantly, all pointwise Kan extensions along fully faithful functors, by which we
mean Kan extensions deﬁned by the (co)limit formulae of Theorem 6.2.1, deﬁne genuine
extensions, up to natural isomorphism:
Corollary 6.3.9. If K is fully faithful, then the counit of any pointwise right Kan extension
deﬁnes a natural isomorphism RanK F · K  F, and dually the unit of any pointwise left
Kan extension deﬁnes a natural isomorphism F  LanK F · K.
Proof. If K is fully faithful, then for any c ∈C the canonical functor C↓c →K ↓Kc
deﬁnes an isomorphism of categories, and this isomorphism commutes with the projection
functors to C. By Theorem 6.3.7, we then have
LanK F(Kc) B colim(C↓c
Π−→C
F−→E) ,
but in this case the indexing category C↓c has a terminal object 1c. Therefore, by Exercise
3.1.ix, the leg of the colimit cone indexed by the terminal object is an isomorphism; in
particular, the colimit can be computed by evaluating at the terminal object. From the
deﬁnition of the unit given in Theorem 6.2.1, this tells us that the component of the unit
deﬁnes an isomorphism ηc : Fc  LanK F(Kc).
□
The cone under a small category J is the category J▷deﬁned as the pushout of the
inclusion i1 : J ,→J×2 of J as the “right end” of the cylinder J×2 along the unique functor
J →1.
J
i1

!
/
⌜
1

J × 2
/ J▷
The eﬀect of this pushout is to collapse the right end of the cylinder to a single object.
The category J▷has one new object, a freely-adjoined terminal object t that serves as the
nadir of a new cone under the inclusion J ,→J▷. There are no additional new objects or
morphisms. A dual pushout along the other inclusion i0 : J ,→J × 2 deﬁnes a category J◁
with a freely-adjoined initial object. See Exercise 3.5.iv.

204
6. ALL CONCEPTS ARE KAN EXTENSIONS
As mentioned in Remark 3.1.8, the category J▷indexes cones under diagrams of shape
J. The informal intuition that a colimit of a diagram should be the “closest” extension of
the diagram to a cone under it is formalized by the following result.
Proposition 6.3.10. A category C admits all colimits of diagrams indexed by a small
category J if and only if the restriction functor CJ▷→CJ admits a left adjoint, deﬁned by
pointwise left Kan extension:
CJ▷
res /
⊥
CJ
colim
o
Dually, C admits all J-indexed limits if and only if the restriction functor CJ◁→CJ admits
a right adjoint, deﬁned by pointwise right Kan extension:
CJ◁
res /
⊥
CJ
lim
o
Proof. By construction, there is a fully faithful inclusion J ,→J▷. Consider a diagram
F : J →C. For j ∈J ⊂J▷, Corollary 6.3.9 implies that the colimit (6.2.2) deﬁning the left
Kan extension always exists: it is simply F j. For the cone point t ∈J▷, the comma category
J↓t is isomorphic to J, by construction. So if colim(J
F−→C) exists, then Theorem 6.2.1 tells
us that these values deﬁne the left Kan extension functor, which we call colim: CJ →CJ▷
in this context because it maps a J-indexed diagram to its J▷-indexed colimit diagram.
□
Most commonly, pointwise Kan extensions are found whenever the codomain category
is cocomplete (for left Kan extensions) or complete (for right), but this is not the only case
as we shall now discover.
Exercises.
Exercise 6.3.i. Prove that if E is locally small and has all small copowers, then all right
Kan extensions with codomain E are pointwise right Kan extensions. Dually, if E is locally
small and has all small powers, then all left Kan extensions with codomain E are pointwise.
Exercise 6.3.ii. Proposition 6.3.10 expresses a stronger universal property of the colimit
cone than is usually stated. What is it?
6.4. Derived functors as Kan extensions
In this section, we explain how derived functors in homological algebra or algebraic
topology are deﬁned using Kan extensions. A derived functor is derived from a functor
whose domain is a category equipped with a speciﬁed class of morphisms called “weak
equivalences” and whose codomain is either another category with weak equivalences or
an ordinary category, in which case the weak equivalences are taken to be the class of
isomorphisms.
We introduce two varieties of derived functors. The ﬁrst of these are the total derived
functors, which are deﬁned to be Kan extensions along “localization” functors that formally
invert the weak equivalences. In practice, total derived functors are frequently accompanied
by point-set derived functors, which are lifts of total derived functors to weak-equivalence-
preserving functors between the original categories.
After stating these deﬁnitions, we give an abstract account of a commonly applied
construction that can be used to construct point-set derived functors. Unexpectedly, the
total derived functors that are constructed in this way are pointwise Kan extensions, despite
the fact that homotopy categories have notoriously few limits and colimits. In fact, the

6.4. DERIVED FUNCTORS AS KAN EXTENSIONS
205
universal property enjoyed by the derived functors that are deﬁned via this construction is
even stronger and has important implications to the theory of derived adjunctions, which
we discuss.
Throughout, we reserve the term “weak equivalences” for a speciﬁed class of mor-
phisms in a category that contains all the identities and satisﬁes one further condition.
The idea, that the weak equivalences are like isomorphisms but weaker, is encoded by a
condition that the class of weak equivalences must satisfy:
Definition 6.4.1. A class of weak equivalences W is a class of morphisms in a category
that contains the identities and satisﬁes the 2-of-6 property: if for any composable triple
of arrows
·
f
/
W∋gf
$
hg f
)
·
hg∈W
$
g
·
h
/ ·
⇒
f, g, h, hgf ∈W
if hg and gf are in W so are f, g, h, and hgf.
Lemma 6.4.2. Any class of morphisms in a category that contains the identities and satisﬁes
the 2-of-6 property necessarily also contains the isomorphisms.
Proof. Exercise 6.4.i.
□
The modern viewpoint, that one can “do homotopy theory” in any category with a
class of weak equivalences, explains the following terminology.
Definition 6.4.3. A homotopical category is a category equipped with a class of weak
equivalences. A functor between such categories is homotopical if it preserves the weak
equivalences.
Remark 6.4.4 (the universal property of the homotopy category). Any homotopical cat-
egory C has an associated homotopy category HoC characterized by the following uni-
versal property: the homotopy category HoC is initial among categories E equipped with
a homotopical functor C →E, that is, a functor that sends weak equivalences in C to
isomorphisms.6 In analogy with ring theory, the universal functor C →HoC is referred to
as a localization functor.
The universal property of the localization functor—pre-composition with C →HoC
induces a bijective correspondence between functors HoC →E and homotopical functors
C →E—also has a 2-dimensional aspect. Pre-composition with the localization functor
also induces a bijection between natural transformations between functors HoC →E and
natural transformations between the corresponding homotopical functors C →E; see
Exercise 6.4.ii.
The following explicit construction of the homotopy category is due to Gabriel and
Zisman [GZ67, 1.1]. The category HoC has the same objects as C. Its morphisms are
equivalence classes of ﬁnite zig-zags of morphisms in C, with only weak equivalences
permitted to go backward, modulo the following relations:
• Adjacent arrows pointing in the same direction may be composed.
6Set-theoretic concerns make it somewhat tricky to specify what functor HoC represents. In the examples
of greatest interest, C is not small, in which case HoC is a priori not even locally small, though in practice it
frequently is.

206
6. ALL CONCEPTS ARE KAN EXTENSIONS
• Adjacent pairs
w←−
w−→or
w−→
w←−labelled by a weak equivalence w may be removed.
• Identities pointing either forward or backward may be removed.
There is a canonical identity-on-objects localization functor
C
/ HoC
in which the morphisms in C are sent to unary zig-zags pointing forward.
Example 6.4.5. When C has no speciﬁed subcategory of weak equivalences, as a default we
assign it the minimal homotopical structure, where the weak equivalences are precisely
the isomorphisms and the localization functor is the identity.
Example 6.4.6. There are two homotopical structures of interest on the category ChR of
chain complexes of R-modules. In the ﬁrst, the class of weak equivalences is taken to
be the chain homotopy equivalences. In the second, the class of weak equivalences is
enlarged to contain all quasi-isomorphisms, that is, chain maps f : A• →B• that induce
an isomorphism on graded abelian groups after applying the homology functor introduced
in Example 1.3.2(viii).
Example 6.4.7. The category of topological spaces also has two homotopical structures
of interest. In the ﬁrst, the class of weak equivalences is taken to be the class of homotopy
equivalences. In the second, this class is enlarged to contain all weak homotopy equiva-
lences, which are maps inducing isomorphisms on all homotopy groups. The homotopy
category of spaces is the homotopy category associated to the second homotopical struc-
ture. It is equivalent to the category HtpyCW of CW complexes and homotopy classes of
maps that appears in Examples 2.1.6(vi) and (vii).
It is in this context that we may deﬁne total derived functors.
Definition 6.4.8 (total derived functors). Consider a functor F : C →D between homo-
topical categories.
• When the right Kan extension
C
F
/

⇑
D

HoC
LF / HoD
exists, it deﬁnes the total left derived functor LF of F.
• When the left Kan extension
C
F
/

⇓
D

HoC
RF / HoD
exists, it deﬁnes the total right derived functor RF of F.
Note the conﬂict in handedness in Deﬁnition 6.4.8. A justiﬁcation for calling the
right Kan extension a total left derived functor is that left derived functors approximate the
original functor from the left.
By the universal property of the localization functor C →HoC, LF and RF are
equivalently expressible as homotopical functors LF, RF : C ⇒HoD; these functors are
often called the left or right derived functors of F. Sometimes, though by no means
always, there exists a lift of a left or right derived functor along D →HoD. For emphasis,

6.4. DERIVED FUNCTORS AS KAN EXTENSIONS
207
we will call these lifts point-set derived functors, though other authors choose to call them
simply “derived functors” [Rie14].
Definition 6.4.9 (point-set derived functors). Consider a pair of homotopical categories
and localization functors γ: C →HoC and δ: D →HoD.
• A point-set left derived functor of F : C →D is a homotopical functor LF : C →D
equipped with a natural transformation λ: LF ⇒F so that δLF (which by Remark
6.4.4 is equivalently encoded by a functor δLF : HoC →HoD) and δλ: δLF ⇒δF
deﬁne a total left derived functor of F.
C
F
&
LF
8
⇑λ
D
δ
/ HoD
↭
C
⇑δλ
F
/
γ

D
δ

HoC
δLF / HoD
• A point-set right derived functor of F : C →D is a homotopical functor RF : C →D
equipped with a natural transformation ρ: F ⇒RF so that δRF (which by Remark
6.4.4 is equivalently encoded by a functor δRF : HoC →HoD) and δρ: δF ⇒δRF
deﬁne a total right derived functor of F.
C
RF
7
F
'
⇓ρ
D
δ
/ HoD
↭
C
⇓ρ
F
/
γ

D
δ

HoC
δRF / HoD
There is a common setting in which derived functors exist and admit a simple con-
struction. Such categories have a collection of “fat” objects on which the functor of interest
becomes homotopical and a functorial reﬂection into this full subcategory. The details are
encoded in the following axiomatization due to [DHKS04].
Definition 6.4.10.
• A left deformation on a homotopical category C consists of an endofunctor Q together
with a natural weak equivalence q: Q
∼=⇒1C.
• A left deformation for a functor F : C →D between homotopical categories consists
of a left deformation (Q, q) for C such that F preserves all weak equivalences between
objects in a full subcategory containing the image of Q.
There is an obvious dual notion of right deformation r: 1C
∼=⇒R.
Interestingly, left deformations can be used to construct point-set left derived functors,
a homotopical universal property that is independent of the deformation used.
Proposition 6.4.11. If F : C →D has a left deformation q: Q
∼=⇒1C, then
(LF = FQ, Fq: LF ⇒F)
is a point-set left derived functor of F.
Proof. Write δ: D →HoD for the localization functor. To show that (FQ, Fq) is a
point-set left derived functor, we must show that the functor δFQ and natural transformation
δFq: δFQ ⇒δF deﬁne a right Kan extension. The veriﬁcation makes use of Remark 6.4.4,
which identiﬁes the functor category HoDHoC with the full subcategory of HoDC spanned by
the homotopical functors. Suppose G: C →HoD is homotopical and consider α: G ⇒δF.

208
6. ALL CONCEPTS ARE KAN EXTENSIONS
Because G is homotopical and q: Q ⇒1C is a natural weak equivalence, Gq: GQ ⇒G is
a natural isomorphism. Using naturality of α, it follows that α factors through δFq as
α: G
(Gq)−1 +3 GQ
αQ +3 δFQ
δFq
+3 δF
To prove uniqueness, suppose α factors as
α: G
β
+3 δFQ
δFq
+3 δF
Naturality of β provides a commutative square of natural transformations:
GQ
βQ
+3
Gq

δFQ2
δFQq

G
β
+3 δFQ
Because q is a natural weak equivalence and the functors G and δFQ are homotopical,
the vertical arrows are natural isomorphisms, so β is determined by βQ. This restricted
natural transformation is uniquely determined: qQ is a natural weak equivalence between
objects in the image of Q. Since F is homotopical on this subcategory, this means that
FqQ is a natural weak equivalence and thus δFqQ is an isomorphism, so βQ must equal the
composite of the inverse of this natural isomorphism with αQ.
□
Unusually for constructions characterized by a universal property, generic total derived
functors are poorly behaved: for instance, the composite of the total left derived functors of
a pair of composable functors is not necessarily a total left derived functor for the composite.
The deﬁning universal property is also insuﬃcient to prove that the total left derived functor
of a left adjoint is left adjoint to the total right derived functor of its right adjoint. The
problem with the standard deﬁnition is that total derived functors are not typically required
to be pointwise Kan extensions. In light of Theorem 6.3.7, this seems reasonable because
homotopy categories have few limits and colimits.7
Somewhat surprisingly, the particular construction of total derived functors via de-
formations given in Proposition 6.4.11 implies that the total derived functors produced in
this manner are pointwise and indeed absolute Kan extensions: not only are these Kan
extensions preserved by representables but they are preserved by all functors.
Proposition 6.4.12. The total left derived functor of a left deformable functor is an absolute
right Kan extension, and in particular pointwise.
Proof. If F : C →D is left deformable, it has a total left derived functor (δFQ, δFq)
constructed using a left deformation (Q, q) for F and the localization functor δ: D →HoD.
Because Kan extensions are characterized by a universal property, any total derived functor
of F is isomorphic to this one. To show that this right Kan extension is absolute, our task
is to show that for any functor H : HoD →E, the pair (HδFQ, HδFq) again deﬁnes a right
Kan extension.
Note that (Q, q) also deﬁnes a left deformation for HδF, simply because the functor
H : HoD →E preserves isomorphisms. The proof of Proposition 6.4.11 now demonstrates
that (HδFQ, HδFq) is a right Kan extension, as claimed.
□
7With the exception of products and coproducts, the so-called “homotopy limits” and “homotopy colimits” do
not deﬁne limits and colimits in the homotopy category.

6.5. ALL CONCEPTS
209
In homological algebra or homotopy theory, deformable functors often come in adjoint
pairs, with the left adjoint admitting a left deformation and the right adjoint admitting a right
deformation. In such cases, the total derived functors are again adjoints, but interestingly
the proof requires Proposition 6.4.12: the mere universal property of being a left or right
Kan extension is not enough.
This is the main theorem from a paper of Maltsiniotis
[Mal07]. As with many non-trivial discoveries in category theory, once the statement is
known, the proof is elementary enough to leave to the reader:
Proposition 6.4.13. Suppose F ⊣G is an adjunction between homotopical categories and
suppose also that F has a total left derived functor LF, G has a total right derived functor
RG, and both derived functors are absolute Kan extensions. Then the total derived functors
form an adjunction LF ⊣RG between the homotopy categories.
Proof. Exercise 6.4.iv.
□
Remark 6.4.14. If F ⊣G is an adjunction satisfying the hypotheses of Proposition 6.4.13,
then the adjunction
C
F
/
⊥
γ

D
δ

G
o
HoC
LF /
⊥
HoD
RG
o
between the total derived functors is the unique adjunction compatible with the localization
functors γ: C →HoC and δ: D →HoD in the sense that the diagram
D(Fc, d)  C(c,Gd)
δ 
γ
HoD(Fc, d)
HoC(c,Gd)
Fq∗
Gr∗

HoD(LFc, d)  HoC(c, RGd)
commutes for each pair c ∈C, d ∈D.
Exercises.
Exercise 6.4.i. Prove Lemma 6.4.2.
Exercise 6.4.ii. Prove the 2-dimensional aspect of the universal property of the localization
functor described in Remark 6.4.4. That is, consider a homotopical category C and a
homotopical functor γ: C →HoC satisfying the universal property that restriction along γ
induces a bijectionbetweenfunctors HoC →E andhomotopical functors C →E. Provethat
restriction along γ also induces a bijection between natural transformations between functors
HoC →E and natural transformations between the associated homotopical functors C →E.
Exercise 6.4.iii. Prove that any endofunctor Q: C →C on a homotopical category that is
equipped with a natural weak equivalence q: Q
∼=⇒1C is a homotopical functor.
Exercise 6.4.iv. Prove Proposition 6.4.13.
6.5. All concepts
To wrap up this chapter, and with it this book, we see that simple special cases
of Kan extensions can be used to deﬁne the other basic categorical concepts introduced
in Chapters 2–5. This justiﬁes Mac Lane’s famous assertion that “The notion of Kan
extensions subsumes all the other fundamental concepts of category theory” [ML98a,

210
6. ALL CONCEPTS ARE KAN EXTENSIONS
§X.7]. Because much of basic category theory can be encoded in this way, generalizations
of ordinary category theory to more exotic contexts often commence with the development
of a suitable calculus of Kan extensions.
Proposition 6.5.1 ((co)limits as Kan extensions). The left Kan extension of F : C →D
along the unique functor !: C →1 deﬁnes the colimit of F in D, each existing if and only
if the other does.
C
F
/
!

⇓η
D
1
Lan! F
?
C
F
/
!

⇓γ
D
=
C
F
/
!

⇓η
D
1
d
?
1
Lan! F
3
∃!
u
d
K
Dually Ran! F deﬁnes the limit of F.
Proof. The composite of a functor d: 1 →D with the functor !: C →1 yields the
constant functor at the object d ∈D. Hence, the universal property of the left Kan extension
of F along !: C →1 speciﬁes that cones γ: F ⇒d under F with nadir d correspond to
morphisms Lan! F →d in D, and that this correspondence is implemented by composing
with the displayed cone η: F ⇒Lan! F. Thus, we recognize Lan! F as the colimit of F
with colimit cone η.
□
Proposition 6.5.2 (adjunctions as Kan extensions).
(i) If F ⊣G is an adjunction with unit η: 1 ⇒GF and counit ϵ : FG ⇒1, then (G, η) is
a left Kan extension of the identity functor along F and (F, ϵ) is a right Kan extension
of the identity functor along G.
C
F

⇓η
C
D
G

⇑ϵ
D
D
GLanF 1C
?
C
FRanG 1D
?
Moreover, both Kan extensions are absolute, and in particular pointwise.
(ii) Conversely, if (G, η: 1C ⇒GF) is a left Kan extension of the identity along F and if
F preserves this Kan extension, then F ⊣G with unit η.
Proof. For (i), Proposition 4.4.6 tells us that an adjunction F ⊣G gives rise to an
adjunction
CD
F∗
/
⊥
CC
G∗
o
By uniqueness of adjoints (Proposition 4.4.1), left Kan extension along F is given by pre-
composition with G, with the components of the unit of G∗⊣F∗deﬁning the unit for the
left Kan extension. This tells us that (G, η) deﬁnes a left Kan extension of 1C along F.
This Kan extension is absolute because pre-composition commutes with post-composition
with any functor L: C →E. Put diﬀerently, there is a similar adjunction G∗⊣F∗between
functor categories ED and EC for any E.
For (ii), recall from Deﬁnition 4.2.5 that the data of an adjunction is comprised of a
pair of functors and a pair of natural transformations so that the “triangle identity” pasting

6.5. ALL CONCEPTS
211
identities hold:
C
F

⇓η
C
F
"
⇓ϵ
=
C
F

F 
1F=
C
F 
⇓ϵ
⇓η
C
=
C
D
G
?
D
D
D
G
?
D
G
<
D
G
C
G
[
=
1G
Suppose that (G, η) is a left Kan extension of 1C preserved by F, meaning that (FG, Fη) is a
left Kan extension of F along F. Using the universal property of this latter Kan extension,
there is a unique factorization
C
F

F
/
⇓1F
D
=
C
F

⇓η
C
F /
∃!⇓ϵ
D
D
D
G
?
of 1F through Fη deﬁning a natural transformation ϵ : FG ⇒1D. Immediately from this
deﬁnition, we see that ϵF · Fη = 1F, proving one of the two triangle identities. For the
other, note that by the ﬁrst triangle identity, the left-hand pasted composite
C
F

⇓η
C
F 
⇓ϵ
⇓η
C
=
C
F
+
F

1Fw
⇓η
C
=
C
F

⇓η
C
D
G
?
D
G
?
D
G
?
D
G
L
u
1G
G
3
reduces to the right-hand ones. From this, we see that 1G : G ⇒G and Gϵ · ηG: G ⇒G
both deﬁne factorizations of η through itself. By the uniqueness in the universal property
of the left Kan extension (G, η), we conclude that Gϵ · ηG = 1G, proving that F ⊣G with
unit η.
□
The next aim is to use a simple pointwise right Kan extension to reprove and then
generalize the Yoneda lemma. From the deﬁning universal property, the right Kan extension
of a functor F : C →D along the identity 1C : C →C is (isomorphic to) F. It follows
immediately from Deﬁnition 6.3.5 that this Kan extension is also pointwise, so we can
apply the limit formula of Theorem 6.3.7 to conclude that
(6.5.3)
Fc  lim(c/C
Π−→C
F−→D) .
In the case of a functor F : C →Set, this limit formula proves the Yoneda lemma. By the
deﬁning universal property of the limit (6.5.3),
Fc  Set(∗, Fc)  Cone(∗, FΠ)  SetC(C(c, −), Set(∗, F−))  SetC(C(c, −), F) ,
where the third isomorphism is a special case of Lemma 6.3.8. This is the Yoneda lemma.
In the case of a small diagram F : C →D valued in a category that has products and
equalizers, we can apply Theorem 3.4.12 to re-express this limit formula as an equalizer
diagram. On account of Exercise 3.2.v, which expresses the set of natural transforma-
tions between small diagrams as a similar equalizer, this limit formula is regarded as a
generalization of the Yoneda lemma.
Proposition 6.5.4 (Yoneda lemma). For any small diagram F : C →D valued in a
category with products and equalizers, there is an equalizer diagram
Fc /
/ Q
c→x Fx
//
Q
c→x→y Fy

212
6. ALL CONCEPTS ARE KAN EXTENSIONS
in which one of the parallel maps projects to the component indexed by the composite
c →x →y in C while the other projects to the component indexed by the map c →x and
then acts by F on the second map x →y.
Proof. Apply Theorem 3.4.12 to (6.5.3).
□
Like any abstract nonsense, this argument can be dualized. Dually, any F : C →D is
a pointwise left Kan extension of itself along 1C. The colimit formula of Theorem 6.3.7
applies, so
(6.5.5)
Fc  colim(C/c
Π−→C
F−→D),
which is appropriately called the coYoneda lemma:
Proposition 6.5.6 (coYoneda lemma). For any small diagram F : C →D valued in a
category with coproducts and coequalizers, there is a coequalizer diagram
`
y→x→c Fy
// `
x→c Fx
/ / Fc.
in which one of the parallel maps includes the component indexed by y →x →c as the
component indexed by the composite morphism y →c, while the other acts by F on the
map y →x and then includes as the component indexed by the map x →c.
Proof. Apply Theorem 3.4.12 to (6.5.5).
□
The coYoneda lemma has an important consequence in the special case of a set-valued
functor called the density theorem.
Theorem 6.5.7 (density I). For any locally small category C, any functor F : C →Set is
the colimit of the diagram
R
Fop
Π
/ Cop  
y
/ SetC ,
which is indexed by the opposite of the category
R
F of elements of F and takes values in
the subcategory of representable functors. Dually, any F : Cop →Set is the colimit of
R
F
Π
/ C  
y
/ SetCop .
Proof. For sets S and T, there are isomorphisms `
S T  S × T  `
T S , so the
coequalizer given by the coYoneda lemma is isomorphic to the coequalizer8
`
Fy×C(y,x)
C(x, c)
// `
Fx
C(x, c)
/ / Fc,
where the indexingsetshave beenswapped. Letting c vary, we concludethat F is canonically
a colimit of a diagram of representable functors. Reversing Theorem 3.4.12, the indexing
category for this diagram of representables is one whose objects are elements of the set Fx
for some x ∈C and whose morphisms are maps y →x in C that send the chosen element
of Fy to the corresponding element of Fx. Thus, F is the colimit of the canonical diagram
R
Fop
Π
/ Cop  
y
/ SetC .
□
8If C is not small, then the displayed coproducts, which are tacitly indexed by the objects of C, are not small.
Nonetheless, Theorem 6.3.7, which expresses Fc as a colimit of a large diagram (6.5.5), tells us that F is a colimit
of a diagram indexed by the large category
R
F.

6.5. ALL CONCEPTS
213
The name “density theorem” refers to a second formulation of this result, which asserts
that the representable functors form a dense subcategory of the presheaf category SetCop.
Informally speaking, a subcategory is dense if any object in the larger category is a colimit
of a diagram valued in the subcategory. The precise meaning is given by the statement of
the following theorem:
Theorem 6.5.8 (density II). For any small category C, the identity functor deﬁnes the left
Kan extension of the Yoneda embedding C ,→SetCop along itself.
C  
y
/
 p
y
"
⇓1y
SetCop
SetCop
1Lany y
:
Proof. By Theorem 6.2.1, for any F ∈SetCop,
Lany y(F)  colim

y↓F
Π−→C
y−→SetCop
.
By Lemma 2.4.7, the comma category y↓F is isomorphic to the category of elements
R
F,
so Theorem 6.5.7 proves that Lany y(F)  F.
□
Remark 6.5.9. By Corollary 6.2.6, any functor F : C →E whose domain is small and
whose codomain is locally small and cocomplete admits a left Kan extension along the
Yoneda embedding y: C →SetCop
C
F
/
 q
y
"
⇓1F
E
SetCop
Lany F
<
Essentially by Corollary 6.3.9, because the Yoneda embedding is full and faithful, the
functor Lany F : SetCop →E can be deﬁned to be a genuine extension of F along y, so that
the unit of the pointwise left Kan extension is an identity natural transformation. Moreover,
this left Kan extension admits a right adjoint R: E →SetCop. To deﬁne Re ∈SetCop, note
that the desired adjunction and the Yoneda lemma demand natural isomorphisms
Re(c)  SetCop(C(−, c), Re)  E(Lany F(C(−, c)), e)  E(Fc, e) ,
which necessitates the deﬁnition
Re B E(F−, e): Cop →Set .
For each e →e′ ∈E, post-composition deﬁnes a map Re →Re′, so our construction of
R: E →SetCop is functorial.

214
6. ALL CONCEPTS ARE KAN EXTENSIONS
To prove that the functors Lany F ⊣R are indeed adjoints, we use the density theorem.
For any X ∈SetCop and e ∈E,
SetCop(X, Re)  SetCop( colim
(c,x)∈
R
X
C(−, c), Re)
by Theorem 6.5.7

lim
(c,x)∈
R
Xop SetCop(C(−, c), Re)
by Theorem 3.4.7

lim
(c,x)∈
R
Xop E(Fc, e)
by the deﬁnition of R
 E( colim
(c,x)∈
R
X
Fc, e)
by Theorem 3.4.7
 E(Lany F(X), e)
by Theorem 6.2.1 and y↓F 
R
F .
Examples of adjunctions constructed in this manner are described in Exercises 6.5.iii-6.5.v.
Finally, we turn to monads. We have seen that a right adjoint functor G: D →C
induces a monad on C whose endofunctor is the composite of G with its left adjoint. More
generally, assuming C has suﬃcient limits, any functor G: D →C induces a monad on C.
If G has a left adjoint F, this monad is the monad GF but this construction applies more
generally.
Definition 6.5.10 (monads as Kan extensions). The codensity9 monad of G: D →C is
given by the right Kan extension of G along itself, whenever this exists.10
D
G
/
G

⇑ϵ
C
C
RanG GCT
?
The unit and multiplication natural transformations are deﬁned using the universal property
of ϵ : TG ⇒G as follows:
D
G
/
G

⇑1G
C
=
D
G
/
G

⇑ϵ
∃!vη
C
C
1C
?
C
T
7
1C
P
D
G
/
G
"
G

⇑ϵ
C
=
D
G
/
G

⇑ϵ
∃!vµ
C
C
⇑ϵ
T
/ C
T
?
C
T
3
T
/ C
T
?
Example 6.5.11. Consider the inclusion Field ,→CRing. It has no left adjoint because
such a functor would carry Z to an initial ﬁeld, which does not exist. But it does have a
density monad T deﬁned by
TA B
Y
p∈Spec(A)
Frac(A/p)
9A functor G: D →C is codense if its right Kan extension along itself is the identity 1C; compare with the
statement of Theorem 6.5.8.
10In particular, “suﬃcient limits” in C means those necessary to deﬁne RanG G as a pointwise right Kan
extension.

6.5. ALL CONCEPTS
215
where Spec(A) is the set of prime ideals p ⊂A and Frac(A/p) is the ﬁeld of fractions of the
quotient ring A/p, which is an integral domain because the ideal p is prime.
Example 6.5.12. Familiar monads also arise as codensity monads.
For instance, the
codensity monad of the inclusion Fin ,→Set is the ultraﬁlter monad β of Example 5.1.4(v).
Theorem 6.2.1 characterizes the set of ultraﬁlters on a set X as a limit
β(X)  lim

X ↓Fin
Π−→Fin ,→Set

.
By Theorem 3.2.6, this limit is isomorphic to the set of cones over the diagram X ↓Fin →Set
with summit the singleton set. By Lemma 6.3.8, this is isomorphic to the set of natural
transformations from Fin(X, −) to the inclusion Fin ,→Set. The components of such a
transformation take a function f : X →{1, . . . , n} and return an element of the set {1, . . . , n}.
An ultraﬁlter on X gives rise to such a natural transformation: the element is the unique
i ∈{1, . . . , n} whose ﬁber f −1(i) is in the ultraﬁlter. See [KG71].
Proofs of the claims made in Examples 6.5.11 and 6.5.12 and considerably more can
be found in [Lei13].
Example 6.5.13. The Giry monad of Example 5.1.5(iv) is also a codensity monad for the
inclusion of a subcategory of C ,→Meas. The objects of C are the ﬁnite powers of the
unit interval I = [0, 1] ⊂R, equipped with the Borel σ-algebra, plus the measurable space
of sequences in I that converge to 0. The objects can be regarded as convex subspaces of
Euclidean space, from which perspective the morphisms are deﬁned to be all aﬃne maps
between these spaces. Omitting the space of sequences, the subcategory of ﬁnite powers
of the interval and aﬃne maps generates a variant of the Giry monad for ﬁnitely additive
probability measures as its codensity monad. See [Ave16].
Exercises.
Exercise 6.5.i. Give a second proof of Proposition 6.5.2(i) using pasting diagrams: show
directly that the counit of an adjunction deﬁnes an absolute right Kan extension.
Exercise 6.5.ii. Use the Yoneda lemma to deﬁne the colimit cone for the canonical colimit
described in Theorem 6.5.7.
Exercise 6.5.iii. For a ﬁxed topological space X, there is a natural inclusion O(X) →Top/X
that sends an open subset U ⊂X to the continuous function U ,→X. Apply the construction
of Remark 6.5.9 to this functor to deﬁne an adjunction
Top/X
/
⊥
SetO(X)op
o
between the category of presheaves on O(X) and the category of spaces over X.
By
Exercise 4.2.i, this adjunction, like all adjunctions, restricts to deﬁne an adjoint equivalence
of categories, in this case between the category of sheaves on X and the category of étale
spaces over X.
Exercise 6.5.iv. Apply the construction of Remark 6.5.9 to the embedding ∆,→Cat of
the category of ﬁnite non-empty ordinals and order-preserving maps to deﬁne an adjunction
Cat
N
/
⊥
Set∆op .
h
o
The right adjoint deﬁnes the nerve of a category, while the left adjoint constructs the
homotopy category of a simplicial set. The counit of this adjunction is an isomorphism,

216
6. ALL CONCEPTS ARE KAN EXTENSIONS
so Lemma 4.5.13 implies that the nerve is fully faithful. Hence, Cat deﬁnes a reﬂec-
tive subcategory of the category of simplicial sets, proving the claim made in Example
4.5.14(vi).
Exercise 6.5.v. Apply the construction of Remark 6.5.9 to the functor ∆: ∆→Top that
sends the ordinal [n] = 0 →1 →· · · →n to the topological n-simplex
∆n B
(x0, . . . , xn) ∈Rn+1

X
i
xi = 1, xi ≥0
.
The left adjoint, deﬁned by left Kan extension, forms the geometric realization of a
simplicial set. The right adjoint is the total singular complex functor, which is used to
deﬁne singular homology:
Top
Sing /
⊥
Set∆op .
|−|
o
Exercise 6.5.vi. Show that the triple (T, η: 1C ⇒T, µ: T 2 ⇒T) constructed in Deﬁnition
6.5.10 deﬁnes a monad on C.
Exercise 6.5.vii. If F ⊣G, show that the codensity monad RanG G of G exists and is equal
to the monad induced by the adjunction F ⊣G.

Epilogue: Theorems in Category Theory
We did not then regard [category theory] as a ﬁeld
for further research eﬀorts, but just as a language
and an orientation—a limitation which we
followed for a dozen years or so, till the advent of
adjoint functors.
Saunders Mac Lane, “Concepts and categories in
perspective” [ML88]
The author is told with distressing regularity that “there are no theorems in category
theory,” which typically means that the speaker does not know any theorems in category
theory. This attitude is certainly forgivable, as it was held for the ﬁrst dozen years of
the subject’s existence by its two founders and might reasonably persist among those with
only a casual acquaintance with this area of mathematics. But since Kan’s discovery of
adjoint functors [Kan58] and Grothendieck’s contemporaneous work on abelian categories
[Gro57]—innovations that led to a burst of research activity in the 1960s—without question
category theory has not lacked for signiﬁcant theorems.
What follows is a modest collection of counterexamples to the claim of “no theorems”:
§E.1 extracts some of the main theorems from the preceding text, §E.2 discusses coher-
ence for symmetric monoidal categories, §E.3 introduces a new universal property of the
unit interval, §E.4 characterizes Grothendieck toposes, and §E.5 explores the embedding
theorem for abelian categories. Of course, this list is by no means exhaustive: indeed only
one of the results appearing here was proven after the early 1970s. As with any mature
mathematical discipline, this introductory textbook is rather far from the current frontiers of
category theory (see, e.g., [AR94], [Joh02a, Joh02b], [Lac10], [Lei04], [Lur09, Lur16],
[Sim11b]).
E.1. Theorems in basic category theory
Signiﬁcant theorems in basic category theory include, ﬁrst and foremost, the Yoneda
lemma, which characterizes natural transformations whose domain is a represented functor.
Theorem (2.2.4, 2.2.8). For any functor F : Cop →Set, whose domain C is locally small,
there is a bijection
Hom(C(−, c), F)  Fc
that identiﬁes a natural transformation α: C(−, c) ⇒F with the element αc(1c) ∈Fc that
is natural in both c and F. In particular, any natural transformation C(−, c) ⇒C(−, c′)
between represented functors is given by composing with a unique morphism c →c′ in C.
A set-valued functor is representable just when it is naturally isomorphic to a repre-
sented functor, covariant or contravariant as the case dictates. The idea that representable
217

218
EPILOGUE: THEOREMS IN CATEGORY THEORY
functors encode universal properties of their representing objects is made precise by the
following result:
Theorem (2.4.8). A representation for a functor F : C →Set is an initial object in its
category of elements. Dually, a representation for a functor F : Cop →Set is a terminal
object in its category of elements.
To calculate particular limits and colimits, it is very useful to know that they can be
built out of simpler limit and colimit constructions, when these exist.
Theorem (3.4.12). A category with small coproducts and coequalizers has small colimits
of any shape, and dually a category with small products and equalizers has all small limits.
In most cases, the cardinality of a category (meaning the cardinality of its set of
morphisms) places a sharp bound on the sizes of limits and colimits it may possess.
Theorem (3.7.3). Any κ-small category that admits limits or colimits of all diagrams
indexed by κ-small categories is equivalent to a poset.
In particular, the only small
categories that are complete or cocomplete are equivalent to posets.
The following theorem, which is quite easy to prove, has consequences throughout
mathematics.
Theorem (4.5.2, 4.5.3). Right adjoints preserve limits, and left adjoints preserve colimits.
This theorem implies that continuity or cocontinuity are necessary conditions for a
functor to admit a left or right adjoint. The adjoint functor theorems supply additional
conditions that are suﬃcient for an adjoint to exist.
Theorem (4.6.1, 4.6.3, 4.6.10). Let U : A →S be a continuous functor whose domain is
complete and whose domain and codomain are locally small. If either
(i) for each s ∈S the comma category s↓U has an initial object,
(ii) for every s ∈S there exists a set of morphisms Φs = {fi : s →Uai} so that any
f : s →Ua factors through some fi ∈Φs along a morphism ai →a in A, or
(iii) A has a small cogenerating set and every collection of subobjects of a ﬁxed object in
A admits an intersection,
then U admits a left adjoint.
As a corollary:
Theorem (4.6.17). A functor F : C →D between locally presentable categories
(i) admits a right adjoint if and only if it is cocontinuous.
(ii) admits a left adjoint if and only if it is continuous and accessible.
The proofs of the adjoint functor theorems also lead to proofs of related representability
criteria.
Theorem (4.6.14, 4.6.15). If F : C →Set preserves limits and C is locally small and
complete, then if either
(i) C has a small cogenerating set and has the property that every collection of subobjects
of a ﬁxed object has an intersection, or if
(ii) there exists a set Φ of objects of C so that for any c ∈C and any element x ∈Fc there
exists an s ∈Φ, an element y ∈Fs, and a morphism f : s →c so that F f(y) = x,
then F is representable.
The following theorem collects together several properties of monadic functors.
Theorem (5.5.1, 5.6.1, 5.6.5, 5.6.12). If U : A →S admits a left adjoint and creates
coequalizers of U-split pairs, then:

E.2. COHERENCE FOR SYMMETRIC MONOIDAL CATEGORIES
219
(i) A morphism f in A is an isomorphism if and only if U f is an isomorphism in S.
(ii) U creates all limits that exist in S.
(iii) U creates all colimits that exist in S and are preserved by the induced monad on S
and its square.
(iv) If S is locally small, complete, and cocomplete, and if U preserves ﬁltered colimits,
then A admits all colimits.
The following theorem establishes the existence of and provides a formula for adjoints
to restriction functors, given by pointwise left and right Kan extensions.
Theorem (6.2.1, 6.2.6). Consider a functor K : C →D where C is small and D is locally
small. Whenever E is cocomplete, the restriction functor K∗: ED →EC admits a left adjoint,
deﬁned by a particular colimit formula, and whenever E is complete, the restriction functor
along K admits a right adjoint, deﬁned by a dual limit formula.
ED
K∗
/
⊥
⊥
EC
RanK
\
LanK
 Other candidates for inclusion on this list include theorems, such as 4.2.6 or 6.3.7,
that prove that two a priori distinct categorical deﬁnitions are equivalent, or the results
describing the universal properties of the derived functors constructed via deformations
established by 6.4.11 and 6.4.12.
E.2. Coherence for symmetric monoidal categories
There are a number of coherence theorems in the categorical literature, the ﬁrst and
most famous being the following theorem of Mac Lane [ML63].
The data of a symmetric monoidal category (V, ⊗, ∗) consists of a category V, a
bifunctor −⊗−: V×V →V called the monoidal product, and a unit object ∗∈V together
with speciﬁed natural isomorphisms
(E.2.1)
v ⊗w 
γ w ⊗v
u ⊗(v ⊗w) 
α (u ⊗v) ⊗w
∗⊗v 
λ v 
ρ v ⊗∗
witnessing symmetry, associativity, and unit conditions on the monoidal product. The
natural transformations (E.2.1) must satisfy certain “coherence conditions” that will be
discussed momentarily. A monoidal category is deﬁned similarly, except that the ﬁrst
symmetry natural isomorphism is omitted.
Examples of symmetric monoidal categories include all categories with ﬁnite products,
such as (Set, ×, ∗), (Top, ×, ∗), or (Cat, ×, 1), where the monoidal unit in each case is the
terminal object. Dually, any category with ﬁnite coproducts deﬁnes a symmetric monoidal
category, with the initial object as the monoid unit, e.g., (Man, `, ∅). The category of
modules over a ring admits multiple monoidal structures: (ModR, ⊕, 0) and (ModR, ⊗R, R),
the last only in the case where R is commutative.
The category of unbounded chain
complexes of R-modules, with R commutative, is also a monoidal category (ChR, ⊗R, R),
where “⊗R” denotes the usual graded tensor product of chain complexes and R is the
chain complex with the R-module R in degree zero and zeros elsewhere. In this case, the
symmetry natural isomorphism can be deﬁned in two distinct ways depending on whether
or not a sign is introduced in odd degrees.
A commutative monoid, regarded as the objects of a discrete category, deﬁnes a trivial
special case of a symmetric monoidal category in which the natural isomorphisms (E.2.1)

220
EPILOGUE: THEOREMS IN CATEGORY THEORY
are identities. The natural isomorphisms (E.2.1) deﬁning a symmetric monoidal category
are categoriﬁcations of the commutativity, associativity, and unit laws. As Mac Lane writes
in the introduction to [ML63]:
The usual associative law a(bc) = (ab)c is known to imply the “gen-
eral associative law,” which states that any two iterated products of
the same factors in the same order are equal, irrespective of the ar-
rangement of parentheses.
Similarly, in a symmetric monoidal category, composites of the coherence natural iso-
morphisms deﬁne higher associativity and higher symmetry isomorphisms. A ﬁnal axiom
requires these natural isomorphisms to satisfy the following coherence diagrams, expressed
in terms of components at objects u, v, w, x ∈V, which demand for instance that there is a
unique natural isomorphism built from this data that witnesses the symmetry of a three-fold
product:
(u ⊗v) ⊗(w ⊗x)
αu⊗v,w,x
+
u ⊗(v ⊗(w ⊗x))
1u⊗αv,w,x
3
αu,v,w⊗x
 
((u ⊗v) ⊗w) ⊗x
u ⊗((v ⊗w) ⊗x)
αu,v⊗w,x / (u ⊗(v ⊗w)) ⊗x
αu,v,w⊗1x
>
u ⊗(∗⊗v)
1u⊗λv
"
αu,∗,v/ (u ⊗∗) ⊗v
ρu⊗1v
|
u ⊗v
v ⊗∗
ρv
"
γv,∗
/ ∗⊗v
λv
|v
v ⊗w
γv,w
"
1v⊗w
/ v ⊗w
w ⊗v
γv,w
<
u ⊗(v ⊗w)
αu,v,w

1u⊗γv,w / u ⊗(w ⊗v)
αu,w,v / (u ⊗w) ⊗v
γu,w⊗v

(u ⊗v) ⊗w
γu⊗v,w / w ⊗(u ⊗v)
αw,u,v / (w ⊗u) ⊗v
The coherence theorem for monoidal categories, ﬁrst proven by Mac Lane and then
improved by Kelly, tells us that once these conditions are satisﬁed, then all diagrams whose
edges are comprised of composites of these natural isomorphisms, parenthesized in any
order, commute; see [ML98a, §XI.1] for a precise statement and a proof and [ML76] for a
general discussion.
Theorem E.2.2 (Mac Lane, Kelly). Any diagram in a symmetric monoidal category that
is comprised of associators α, unitors γ or ρ, or symmetors γ that is “formal” commutes.
The upshot of Theorem E.2.2 is that any two “n-ary tensor product” functors V×n →V
that are built iteratively from the bifunctor ⊗and the unit object ∗, each permuting and
parenthesizing the inputs in some manner, are connected by a unique natural isomorphism
that is built out of the given natural isomorphisms α, λ, ρ, and γ. In practice, this naturality
means that we need not concern ourselves with particular parenthesizations or orderings
when deﬁning the n-ary tensor product. Hence, the structural isomorphisms (E.2.1) are
seldom emphasized.

E.3. THE UNIVERSAL PROPERTY OF THE UNIT INTERVAL
221
E.3. The universal property of the unit interval
The unit interval is the topological space I = [0, 1] ⊂R regarded as a subspace of the
real line, with the standard Euclidean metric topology. It is used to deﬁne the fundamental
groupoid Π1(X) of paths in a topological space X. A path in X is simply a continuous
function p: I →X. The path has two endpoints p(0), p(1) ∈X deﬁned by evaluating at the
endpoints 0, 1 ∈I. If q: I →X is a second path with the property that p(1) = q(0), then
there exists a composite path p ∗q: I →X deﬁned by the composite continuous function
I
δ

/ I ∨I
p∨q / X.
Here I ∨I is the space formed by gluing two copies of I together by identifying the point 1
in the left-hand copy with the point 0 in the right-hand copy:
∗
1

0
/
⌜
I

I
/ I ∨I
The space I ∨I is homeomorphic to the space [0, 2] ⊂R. The map δ: I →I ∨I is the
homeomorphism t 7→2t. Note that this map sends the endpoints of the domain I to the
endpoints of the fattened interval I ∨I. Thus, (p ∗q)(0) = p(0) and (p ∗q)(1) = q(1); that
is, p ∗q is a path in X from the starting point of the path p to the ending point of the path q.
The fundamental groupoid Π1(X) is the category whose objects are points of X
and whose morphisms are endpoint-preserving homotopy classes of paths in X, with
composition deﬁned via the gluing of the unit interval just described. The reason that
morphisms are endpoint-preserving homotopy classes, rather than simply paths, is that
path composition is not strictly associative or unital.
Endpoint-preserving homotopies
allow in particular for re-parameterizations of the unit interval.
By a theorem of Freyd [Fre99], reﬁned by Leinster [Lei11], the structure on the unit
interval that is used to deﬁne composition of paths also describes the universal property
of this topological space. A bipointed space is a topological space I with two distinct
closed points 0 , 1 ∈I, one designated as the “left” and the other as the “right.” A map of
bipointed spaces is a continuous function that sends the left point to the left point and the
right point to the right point. For any bipointed space (X, x0, x1), we can deﬁne X ∨X to be
the pushout
∗
x1

x0
/
⌜
X

X
/ X ∨X
TheoremE.3.1(Freyd–Leinster). Theunitintervalistheterminalbipointedspaceequipped
with a map of bipointed spaces X →X∨X. That is, for any other bipointed space (X, x0, x1),
there is a unique bipointed continuous map r: X →I so that
X
r

/ X ∨X
r∨r

I
δ

/ I ∨I
commutes.

222
EPILOGUE: THEOREMS IN CATEGORY THEORY
Put more concisely, Theorem E.3.1 says that (I, 0, 1) is the terminal coalgebra for the
endofunctor X 7→X ∨X on the category of bipointed spaces. See [Lei11] for a discussion
and proof. The fact that the map I →I ∨I is a homeomorphism is no coincidence: a
theorem of Lambek [Lam68], whose elementary proof is left as Exercise 1.6.vi, proves
that the structure map of any terminal coalgebra is always an isomorphism.
E.4. A characterization of Grothendieck toposes
Given a small category C, a presheaf is another name for a contravariant set-valued
functor on C.
A Grothendieck topos is a reﬂective full subcategory E of a presheaf
category
E 
/
⊥
SetCop
L
o
with the property that the left adjoint preserves ﬁnite limits.11 Objects in E can be char-
acterized as sheaves on a small site, which speciﬁes a “covering family” of morphisms
( fi : Ui →U)i for each object U ∈C satisfying a weak pullback condition. A typical
example might take C = O(X) to be the poset of open sets for a topological space X. A
presheaf P: O(X)op →Set assigns a set P(U) to each open set U ⊂X so that this assign-
ment is functorial with respect to restrictions along inclusion V ⊂U ⊂X of open subsets.
A presheaf P is a sheaf if and only if the diagram of restriction maps
P(U)
/ Q
α P(Uα)
// Q
α,β P(Uα ∩Uβ)
is an equalizer for every open cover U = ∪αUα of a U ∈O(X); see Deﬁnition 3.3.4.
Giraud’s theorem, which ﬁrst appeared in print in [GV72, IV.1.2], states that Groth-
endieck toposes can be completely characterized by a combination of “exactness” and size
conditions.
Theorem E.4.1 (Giraud). A category E is a Grothendieck topos if and only if it satisﬁes
the following conditions:
(i) E is locally small.
(ii) E has ﬁnite limits.
(iii) E has all small coproducts and they are disjoint and universal.
(iv) Equivalence relations in E have universal coequalizers.
(v) Every equivalence relation in E is eﬀective, and every epimorphism in E is a co-
equalizer.
(vi) E has a set of generators.
Some explanation is in order:
• A coproduct `
α Aα is disjoint if each inclusion Aα →`
α Aα is a monomorphism and
if the pullback of any two distinct inclusions is an initial object.
• A colimit cone (Aα →A)α is universal if the pullbacks of these maps along any B →A
deﬁne a colimit cone (B ×A Aα →B)α.
• An eﬀective equivalence relation is one that arises, as in Example 3.5.10, as a kernel
pair of some morphism.
• Finally, recall from Deﬁnition 4.6.7 that a set of generators for E is a set of objects
G ⊂ob E that is jointly separating: for any f, g: B ⇒A with f , g there is some
h: G →B, with G ∈G, so that fh , gh.
11Propositions 4.5.15 and 3.3.9 imply that E is cocomplete, so this adjunction can be deﬁned as in Remark
6.5.9 from the functor Ly: C →E that is the restriction of the left adjoint along the Yoneda embedding.

E.5. EMBEDDINGS OF ABELIAN CATEGORIES
223
A proof of Theorem E.4.1 can be found in [Joh14, §0.4], which also presents a very
clear exposition of the ideas involved.
E.5. Embeddings of abelian categories
Properties of the categories Ab of abelian groups, or ModR of modules over a unital
ring, or ChR of chain complexes of R-modules are abstracted in the notion of an abelian
category. Abelian categories were introduced by Buchsbaum [Buc55] and developed by
Grothendieck [Gro57] with the aim of unifying the “coeﬃcients” of the various cohomology
theories then under development.
Definition E.5.1. A category is abelian if
• it has a zero object 0, that is both initial and terminal,
• it has all binary products and binary coproducts,
• it has all kernels and cokernels, deﬁned respectively to be the equalizer and coequalizer
of a map f : A →B with the zero map A →0 →B, and
• all monomorphisms and epimorphisms arise as kernels or cokernels, respectively.
In an abelian category A, ﬁnite products and ﬁnite coproducts coincide (in the sense
that the canonical map from the latter to the former described in Remark 3.1.27 is an
isomorphism) and are called biproducts or direct sums. These axioms imply that the
hom-sets in A canonically inherit the structure of an abelian group, with the zero map in
each hom-set serving as the additive identity, in such a way that composition is bilinear.
This gives A the structure of a category enriched over12 the monoidal category (Ab, ⊗Z, Z).
The image of a morphism is deﬁned to be the kernel of its cokernel, or equivalently,
the cokernel of its kernel; these objects are always isomorphic in an abelian category.
This permits the deﬁnition of an exact sequence in an abelian category, a sequence of
composable morphisms
· · ·
fn+2 / An+1
fn+1
// An
fn / An−1
fn−1
/ · · ·
so that ker fn = im fn+1. Classical results such as the ﬁve lemma, which is used to detect
isomorphisms between a pair of exact sequences, can be proven by general abstract nonsense
in any abelian category using the universal properties of kernels and cokernels.
A functor is exact if it preserves exact sequences or, equivalently, if it is both left and
right exact in the sense introduced in Deﬁnition 4.5.9.
Theorem E.5.2 (Freyd–Mitchell). If A is a small abelian category, then there is a ring13
R and an exact, fully faithful functor A ,→ModR, which embeds A as a full subcategory.
A proof appears as the very last result of the book [Fre03]. Unfortunately, most of the
material presented in the preceding 150 pages appears to be necessary.
To conclude, we invite the reader to reﬂect upon a lovely quote from the introduction
to Johnstone’s Topos Theory [Joh14, pp. xii–xiii] which describes the signiﬁcance of the
Freyd–Mitchell embedding theorem and, by analogy, the broader project of category theory:
Incidentally, the Freyd–Mitchell embedding theorem is frequently
regarded as a culmination rather than a starting point; this is because
of what seems to me a misinterpretation (or at least an inversion) of
its true signiﬁcance. It is commonly thought of as saying “If you
12Ordinary categorical notions can be extended to categories in which each Hom(X, Y) is an object of a general
monoidal category (V, ⊗, ∗), in place of (Set, ×, ∗). See [Rie14, Chapter 3] for an introduction to enriched category
theory.
13As per our conventions elsewhere, R is unital and associative but not necessarily commutative.

224
EPILOGUE: THEOREMS IN CATEGORY THEORY
want to prove something about an abelian category, you might as well
assume it is a category of modules”; whereas I believe its true import
is “If you want to prove something about categories of modules, you
might as well work in a general abelian category”—for the embedding
theorem ensures that your result will be true in this generality, and
by forgetting the explicit structure of module categories you will be
forced to concentrate on the essential aspects of this problem. As an
example, compare the module-theoretic proof of the Snake Lemma
in [HS97] with the abelian-category proof in [ML98a].

Bibliography
[AR94]
Jiří Adámek and Jiří Rosicky. Locally presentable and accessible categories. London Mathematical
Society lecture note series. Cambridge University Press, Cambridge, England, New York, NY, 1994.
[Ati74]
M.F. Atiyah. How research is carried out. Bull. IMA., 10:232–234, 1974.
[Ave16]
Tom Avery. Codensity and the Giry monad. Journal of Pure and Applied Algebra, 220(3):1229–1251,
2016.
[Awo96]
Steve Awodey. Structure in mathematics and logic: a categorical perspective. Philos. Math. (3),
4(3):209–237, 1996.
[Awo10]
Steve Awodey. Category theory, volume 52 of Oxford Logic Guides. Oxford University Press, Oxford,
second edition, 2010.
[Bae06]
John Baez. Quantum quandaries: a category-theoretic perspective. In The structural foundations of
quantum gravity, pages 240–265. Oxford Univ. Press, Oxford, 2006.
[Bec67]
Jonathan Mock Beck. Triples, Algebras and Cohomology. PhD thesis, Columbia University, 1967.
[BJLS15]
Marie Bjerrum, Peter Johnstone, Tom Leinster, and William F. Sawin. Notes on commutation of
limits and colimits. Theory Appl. Categ., 30(15):527–532, 2015.
[Bor94a]
Francis Borceux. Handbook of categorical algebra. 1, volume 50 of Encyclopedia of Mathematics
and its Applications. Cambridge University Press, Cambridge, 1994. Categories and structures.
[Bor94b]
Francis Borceux. Handbook of categorical algebra. 2, volume 51 of Encyclopedia of Mathematics
and its Applications. Cambridge University Press, Cambridge, 1994.
[Buc55]
D. A. Buchsbaum. Exact categories and duality. Trans. Amer. Math. Soc., 80:1–34, 1955.
[CE56]
Henri Cartan and Samuel Eilenberg. Homological Algebra. Princeton University Press, Princeton, N.
J., 1956.
[CGR14]
Eugenia Cheng, Nick Gurski, and Emily Riehl. Cyclic multicategories, multivariable adjunctions and
mates. J. K-theory, 13(2):337–396, 2014.
[CM13]
Gunnar Carlsson and Facundo Mémoli. Classifying clustering schemes. Foundations of Computa-
tional Mathematics, 13(2):221–252, 2013.
[CMW09] David Clark, Scott Morrison, and Kevin Walker. Fixing the functoriality of Khovanov homology.
Geometry and Topology, 13:1499–1582, 2009.
[DHKS04] W. G. Dwyer, P. S. Hirschhorn, D. M. Kan, and J. H. Smith. Homotopy limit functors on model
categories and homotopical categories, volume 113 of Mathematical Surveys and Monographs.
American Mathematical Society, Providence, RI, 2004.
[Ehr65]
Charles Ehresmann. Catégories et structures. Dunod, Paris, 1965.
[EM42a]
Samuel Eilenberg and Saunders MacLane. Group extensions and homology. Ann. of Math. (2),
43(757–831), 1942.
[EM42b]
Samuel Eilenberg and Saunders MacLane. Natural isomorphisms in group theory. Proc. Nat. Acad.
Sci. U. S. A., 28:537–543, 1942.
[EM45]
Samuel Eilenberg and Saunders MacLane. General theory of natural equivalences. Trans. Amer. Math.
Soc., 58:231–294, 1945.
[ES52]
Samuel Eilenberg and Norman Steenrod. Foundations of algebraic topology. Princeton University
Press, Princeton, New Jersey, 1952.
[Faw86]
Barry Fawcett. A categorical characterization of the four colour theorem. Canad. Math. Bull.,
29(4):426–431, 1986.
[Fre99]
Peter J. Freyd. Real coalgebra. post on the categories mailing list, 22 December 1999, available via
www.math.ca/∼cat-dist, 1999.
[Fre03]
Peter J. Freyd. Abelian categories. Repr. Theory Appl. Categ., (3):1–190, 2003.
[Fre04]
Peter J. Freyd. Homotopy is not concrete. Reprints in Theory and Applications of Categories, (6):1–10,
2004.
225

226
BIBLIOGRAPHY
[FS90]
Peter J. Freyd and Andre Scedrov. Categories, Allegories. North-Holland Mathematical Library (Book
39). North Holland, 1990.
[Ghr14]
Robert Ghrist. Elementary Applied Topology. CreateSpace Independent Publishing Platform, 2014.
[Gir82]
M. Giry. A categorical approach to probability theory. In Categorical Aspects of Topology and
Analysis, volume 915 of Lecture Notes in Mathematics, pages 68–85. Springer, 1982.
[Gro57]
Alexander Grothendieck. Sur quelques points d’algèbre homologique. Tôhoku Math. J. (2), 9:119–
221, 1957.
[Gro58]
Alexander Grothendieck. A general theory of ﬁbre spaces with structure sheaf. National Science
Foundation Research Project on Geometry of Function Space, Report No. 4, Second Edition, May
1958.
[Gro60]
Alexander Grothendieck. Technique de descente et théorèmes d’existence en géométrie algébriques.
ii. le théorème d’existence en théorie formelle des modules. Séminaire Bourbaki, 5(195):195, 1958-
1960.
[GV72]
A. Grothendieck and J. L. Verdier. Théorie des topos et cohomologie étale des schémas. Tome 1:
Théorie des topos, volume Séminaire de Géométrie Algébrique du Bois-Marie 1963–1964 (SGA 4)
of Lecture Notes in Mathematics, Vol. 269, chapter Exposé IV: Topos. Springer-Verlag, Berlin-New
York, 1972.
[GZ67]
P. Gabriel and M. Zisman. Calculus of fractions and homotopy theory. Ergebnisse der Mathematik
und ihrer Grenzgebiete, Band 35. Springer-Verlag New York, Inc., New York, 1967.
[Har83]
Donald G. Hartig. The Riesz representation theorem revisited. The American Mathematical Monthly,
90(4), 1983.
[HS97]
P. J. Hilton and U. Stammbach. A course in homological algebra, volume 4 of Graduate Texts in
Mathematics. Springer-Verlag, New York, second edition, 1997.
[Iry09]
James Iry. A brief, incomplete, and mostly wrong history of programming languages, May 2009.
[Joh02a]
P.T. Johnstone. Sketches of an Elephant: A Topos Theory Compendium. Vol. 1, volume 43 of Oxford
Logic Guides. The Clarendon Press Oxford University Press, New York, 2002.
[Joh02b]
P.T. Johnstone. Sketches of an Elephant: A Topos Theory Compendium. Vol. 2, volume 44 of Oxford
Logic Guides. The Clarendon Press Oxford University Press, New York, 2002.
[Joh14]
P.T. Johnstone. Topos theory. reprint of London Mathematical Society Monographs, Vol. 10. Dover
Publications, 2014.
[Joy81]
André Joyal. Une théorie combinatoire des séries formelles. Adv. in Math., 42(1):1–82, 1981.
[Kan58]
Daniel M. Kan. Adjoint functors. Trans. Amer. Math. Soc., 87:294–329, 1958.
[Kel82]
G. M. Kelly. Basic concepts of enriched category theory. Reprints in Theory and Applications of
Categories. 1982. Reprint of the 1982 original [Cambridge Univ. Press, Cambridge; MR0651714].
[KG71]
J. F. Kennison and Dion Gildenhuys. Equational completion, model induced triples and pro-objects.
J. Pure Appl. Algebra, 1(4):317–346, 1971.
[Kle03]
Jon M. Kleinberg. An impossibility theorem for clustering. In S. Becker, S. Thrun, and K. Obermayer,
editors, Advances in Neural Information Processing Systems 15, pages 463–470. MIT Press, 2003.
[KS74]
G. M. Kelly and R. Street. Review of the elements of 2-categories. In Category Seminar (Proc. Sem.,
Sydney, 1972/1973), pages 75–103. Lecture Notes in Math., Vol. 420. Springer, Berlin, 1974.
[Lac10]
Stephen Lack. A 2-categories companion. In J.C. Baez and J.P. May, editors, Towards Higher Cate-
gories, volume 152 of The IMA Volumes in Mathematics and its Applications, pages 105–192, New
York, 2010. Springer.
[Lam68]
Joachim Lambek. A ﬁxpoint theorem for complete categories. Mathematische Zeitschrift, 103:151–
161, 1968.
[Lan84]
Serge Lang. Algebra. Addison-Wesley Publishing Company, Advanced Book Program, Reading, MA,
second edition, 1984.
[Lan02]
Serge Lang. Algebra, volume 211 of Graduate Texts in Mathematics. Springer-Verlag, New York,
third edition, 2002.
[Law05]
F. William Lawvere. An elementary theory of the category of sets (long version) with commentary.
Repr. Theory Appl. Categ., 11:1–35, 2005.
[Lei04]
Tom Leinster. Higher Operads, Higher Categories. Number 298 in London Mathematical Society
Lecture Note Series. Cambridge University Press, Cambridge, 2004.
[Lei08]
Tom Leinster. Doing without diagrams. available from http://www.maths.ed.ac.uk/∼tl/elements.pdf,
2008.
[Lei11]
Tom Leinster. A general theory of self-similarity. Adv. Math., 226(4):2935–3017, 2011.
[Lei13]
Tom Leinster. Codensity and the ultraﬁlter monad. Theory Appl. Categ., 28:No. 13, 332–370, 2013.

BIBLIOGRAPHY
227
[Lei14]
Tom Leinster. Basic category theory. Cambridge Studies in Advanced Mathematics. Cambridge
University Press, 2014.
[Lin66]
Fred Linton. Some aspects of equational theories. In Proceedings of the Conference on Categorical
Algebra, La Jolla, pages 84–95, 1966.
[Lin70]
C. E. Linderholm. A group epimorphism is surjective. Amer. Math. Monthly, 77(176–177), 1970.
[Lur09]
Jacob Lurie. Higher topos theory, volume 170 of Annals of Mathematics Studies. Princeton University
Press, Princeton, NJ, 2009.
[Lur16]
Jacob Lurie. Higher Algebra. http://www.math.harvard.edu/∼lurie/papers/HigherAlgebra.pdf, March
2016.
[Mal07]
G. Maltsiniotis. Le théorème de Quillen, d’adjonction des foncteurs dérivés, revisité. C. R. Math.
Acad. Sci. Paris, 344(9):549–552, 2007.
[Mar09]
Jean-Pierre Marquis. From a Geometrical Point of View, A Study of the History and Philosophy of
Category Theory, volume 14 of Logic, Epistemology, and the Unity of Science. Springer, 2009.
[May01]
J. P. May. Picard groups, Grothendieck rings, and Burnside rings of categories. Adv. Math., 163(1):1–
16, 2001.
[Maz08]
Barry Mazur. When is one thing equal to some other thing? In B. Gold and Simons R, editors, Proof
and other dilemmas, MAA Spectrum, pages 221–241. Math. Assoc. America, Washington, DC, 2008.
[Maz16]
Barry Mazur. Thinking about Grothendieck. Notices of the AMS, 63(4):404–405, 2016.
[ML50]
Saunders Mac Lane. Duality for groups. Bull. Amer. Math. Soc., 56:485–516, 1950.
[ML63]
Saunders Mac Lane. Natural associativity and commutativity. Rice Univ. Studies, 49(4):28–46, 1963.
[ML76]
Saunders Mac Lane. Topology and logic as a source of algebra. Bull. Amer. Math. Soc., 82(1):1–40,
1976.
[ML88]
Saunders Mac Lane. Concepts and categories in perspective. In A century of mathematics in America,
Part I, volume 1 of Hist. Math., pages 323–365. Amer. Math. Soc., Providence, RI, 1988.
[ML98a]
Saunders Mac Lane. Categories for the working mathematician, volume 5 of Graduate Texts in
Mathematics. Springer-Verlag, New York, second edition, 1998.
[ML98b]
Saunders Mac Lane. The Yoneda lemma. Mathematica Japonica, 47:156, 1998.
[ML05]
Saunders Mac Lane. Saunders Mac Lane—a mathematical autobiography. A K Peters, Ltd., Wellesley,
MA, 2005.
[Par71]
Robert Paré. On absolute colimits. Journal of Algebra, 19:80–95, 1971.
[Par74]
Robert Paré. Colimits in topoi. Bulletin of the American Mathematical Society, 80(3):556–561, 1974.
[Poi08]
Henri Poincaré. L’avenir des mathématiques. Rendiconti del Circolo Matematico di Palermo (1884-
1940), 26(1):152–168, December 1908.
[Poo14]
Bjorn Poonen. Why all rings should have a 1. arXiv:1404.0135 [math.RA], 2014.
[Rei88]
Miles Reid. Undergraduate algebraic geometry, volume 12 of London Mathematical Society Student
Texts. Cambridge University Press, Cambridge, 1988.
[Rie14]
Emily Riehl. Categorical homotopy theory, volume 24 of New Mathematical Monographs. Cambridge
University Press, Cambridge, 2014.
[Seg74]
Graeme Segal. Categories and cohomology theories. Topology, 13:293–312, 1974.
[Shu08]
Michael Shulman. Set theory for category theory. arXiv:0810.1279, 2008.
[Sim11a]
Harold Simmons. An introduction to category theory. Cambridge University Press, Cambridge, 2011.
[Sim11b]
Carlos Simpson. Homotopy Theory of Higher Categories: From Segal Categories to n-Categories
and Beyond. New Mathematical Monographs. Cambridge University Press, Cambridge, 2011.
[Smi]
Peter
Smith.
The
galois
connection
between
syntax
and
semantics.
http://www.logicmatters.net/resources/pdfs/Galois.pdf.
[Ste67]
N. E. Steenrod. A convenient category of topological spaces. Michigan Math. J., 14:133–152, 1967.
[TW02]
R. Theiele and L. Wos. Hilbert’s twenty-fourth problem. J. Automated Reasoning, 29:67–89, 2002.


Catalog of Categories
Ab, of abelian groups and homomorphisms, 4
Abfg, of ﬁnitely generated abelian groups and
homomorphisms, 26
Abtf, of torsion-free abelian groups and
homomorphisms, 141
AdjT , of adjunctions inducing a monad T and
maps of adjunctions, 164
Afﬁne, of aﬃne planes and bijections that preserve
and reﬂect incidence, 36
Ban, of real Banach spaces and continuous linear
maps, 26
BG, a group (or monoid) G regarded as a category,
with one object and elements of the group G
as endomorphisms, 5
Card, the discrete category of cardinals, 138
CAT, of locally small categories and functors, 20
Cat, of small categories and functors, 20
C/c, the slice of a category C over an object c, 8
c/C, the slice of a category C under an object c, 8
cgHaus, of compactly generated Hausdorﬀspaces
and continuous maps, 130
cHaus, of compact Hausdorﬀspaces and
continuous maps, 140
ChR, of chain complexes of R-modules and chain
maps, 4
CJ, of functors J →C and natural transformations,
44
Cluster, of clusters and reﬁnements, 16
CMonoid, of commutative monoids and
homomorphisms, 119
Cop, the opposite of a category C, 9
CRing, of commutative unital rings and
homomorphisms, 8
CT , the category of algebras for a monad T on a
category C, 160
CT , the Kleisli category for a monad T on a
category C, 162
C × D, the product of categories C and D, 19
∆, of ﬁnite non-empty ordinals and
order-preserving maps, 18
∆+, of ﬁnite ordinals and order-preserving maps,
193
DirGraph, of directed graphs and
homomorphisms, 4
R
F, the category of elements for a set-valued
functor F, 66
End, of sets equipped with an endomorphism and
commuting functions, 69
Euclid∗, of pointed Euclidean spaces and pointed
diﬀerentiable functions, 14
F ↓G, the comma category for a pair of functors
F : D →C and G: E →C, 22
Field, of ﬁelds and homomorphisms, 4
FieldE
F, of intermediate ﬁelds F ⊂K ⊂E and
homomorphisms ﬁxing F, 21
Fin, of ﬁnite sets and functions, 8
Fin∗, of pointed ﬁnite sets and
basepoint-preserving functions, equivalently
the opposite of Segal’s Γ, 15
Finiso, of ﬁnite sets and bijections, 8
FinMetric, of ﬁnite metric spaces and distance
non-increasing functions, 16
Finmono, of ﬁnite sets and injections, 105
Γ, Segal’s category, equivalent to the opposite of
Fin∗, 35
Graph, of graphs and homomorphisms, 4
GrModR, of Z-graded R-modules and graded
homomorphisms, 14
Group, of groups and homomorphisms, 4
Groupepi, of groups and epimorphisms, 23
Groupiso, of groups and isomorphisms, 22
Groupoid, of groupoids and functors, 14
Haus, of Hausdorﬀspaces and continuous maps,
129
Htpy, of spaces and homotopy class of continuous
maps, 5
Htpy∗, of based spaces and basepoint-preserving
homotopy class of based continuous maps, 5
HtpyCW, of CW complexes and homotopy classes
of continuous maps, 54
J◁, the category obtained from J by freely
adjoining an initial object, 76
J▷, the category obtained from J by freely
adjoining a terminal object, 76
Lattice, of lattices and lattice morphisms, 174
229

230
CATALOG OF CATEGORIES
Man, of smooth manifolds and smooth functions, 4
Man∗, of pointed smooth manifolds and pointed
smooth functions, 15
MatR, of positive integers and matrices with
coeﬃcients in the unital ring R, 4
Meas, of measurable spaces and measurable
functions, 4
Measure, of measure spaces and equivalence
classes of measurable functions, 5
ModelT, of models for a set T of sentences in a
ﬁrst-order language and homomorphisms, 4
ModR, of left R-modules and homomorphisms, 4
RMod, of right R-modules and homomorphisms,
20
Monoid, of monoids and homomorphisms, 20
n, the ordinal n regarded as a category, 5
OG, of subgroups of a group G represented as left
G-sets of left cosets and G-equivariant maps,
21
ω, the ordinal ω regarded as a category, 5
O(X), the poset of open subsets of a space X under
inclusion, 18
(P, ≤), a poset (or preorder) regarded as a category,
with elements of P as objects and with a
morphism x →y if and only if x ≤y, 5
PCluster, of persistent clusters and reﬁnements, 16
Poset, of partially-ordered sets and
order-preserving functions, 4
Proj|, of projective planes with a distinguished line
and bijections that preserve and reﬂect
incidence, 36
rDirGraph, of reﬂexive directed graphs and
homomorphisms, 177
Ring, of unital rings and homomorphisms, 4, 41
Rng, of non-unital rings and homomorphisms, 8,
41
SET, of “large” sets and functions, 59
Set, of sets and functions, 4
Set∗, of pointed sets and basepoint-preserving
functions, 4
Set∂, of sets and partially-deﬁned functions, 21
ShvX, of sheaves (of sets) on a space X and natural
transformations, 141
skC, the skeleton of the category C, 34
TGX, the translation groupoid for a G-set X, 34
Top, of spaces and continuous maps, 4
Top∗, of pointed spaces and basepoint-preserving
continuous maps, 4
Toppc
∗, of path-connected based spaces and based
continuous maps, 33
VectBG
k , of G-representations and equivariant
linear maps, 192
Vectbasis
k
, of ﬁnite-dimensional k-vector spaces
with a chosen basis and linear maps, 30
Vectfd
k , of ﬁnite-dimensional k-vector spaces and
linear maps, 30
Vectk, of k-vector spaces and linear maps, 4

Glossary of Notation
=, xvi
⇒, xvi
·, 3
B, xvi
, xvi, 7
d, xvi
⊣, 117
⇆, xvi
7→, xvi
↣, 11
⇒, xvi
⇝, xvi, 162
≃, 30
→, xvi
↠, 11
0, 5
1, 5
2, 5
An, 63
α: F ⇒G, 23
α: F  G, 24
BG, 5
C(X, Y), 7
C(c, −), 19
C/c, 8
c/C, 8
C(−, c), 19
CJ, 44
cod, 6
colim F, 75
colimJ F, 76
Cop, 9
`
j∈J, 81
coskn, 199
CT , 160
CT , 162
∆, 74
∆+, 193
∆, 18
Dn, 73
dom, 6
R
F, 66
f ∗, 10
f∗, 10
F ↓G, 22
(−)♭, 116
f : X →Y, 3
Hom(X, Y), 7
Hom(A, B), 130
Hom(V, W), 63
id, 6
1X, 3
I, 29
J◁, 76
J▷, 76
Kn, 49
LanK F, 190
LF, 207
LF, 206
lim F, 75
limJ F, 76
Map(X, Y), 130
[n], 18
n, 5
OG, 21
ω, 5
L, 83
⊗, 63
O(X), 18
Q
j∈J, 77
⌟, 79
⌜, 81
RanK F, 190
RF, 207
RF, 206
(−)♯, 116
skn, 199
skC, 34
231

232
GLOSSARY OF NOTATION
S n, 73
⊔, 81
Sym(G), 61
TGX, 34
×, 77
V∗, 17

Index
2-category, 46
2-functor, 47, 135
2-of-6 property, 205
abelian category, 139, 223
abelian group
free -, 119
abelianization, 141
absolute
colimit, 170
Kan extension, 208
abstract nonsense, x, 36
accessible functor, 150
additive functor, 140
adjoint
left vs right -, 116
lower -, 118
upper -, 118
adjoint functor, 116
multivariable -, 131
mutually left or right -, 126
two-variable -, 129
adjoint functor theorem, 144
general -, 146
special -, 148
adjunct, 116
adjunction, 116, 123
as a Kan extension, 210
counit, 123
from a monad, 162, 163
fully-speciﬁed -, 124
monadic -, 120, 167
morphism, 126
multivariable -, 131
triangle identity, 123
two-variable -, 129
unit, 122
aﬃne
linear combination, 159
space, 63, 159
algebra, 37
canonical presentation, 169
category of -, 160
for an endofunctor, see also coalgebra
free -, 162
homomorphism, 160
algebraic theory
category of models, 114
model of -, 175
apex
of a cone, 74
arrow, xi, see also morphism, 6
atomic, 120
automorphism, 7
group, 22
axiom
in a ﬁrst-order language, 127
axiom of choice, 12
based object, 67
basepoint, 4
Beck–Chevalley condition, 177
bifunctor, 19
bilinear, 63
box topology
vs product topology, 77
Brouwer ﬁxed point theorem, 15
cardinal
arithmetic, 138
inaccessible, 6
regular, 6, 150
strong limit, 6
cartesian closed category, 129
categoriﬁcation, xii
of a commutative monoid, 220
of clustering algorithms, 16
of the fundamental theorem of Galois theory, 21
of the Jones polynomial, xii
of the natural numbers, 28
of the orbit-stabilizer theorem, 34
category, 3
2-, 46
abelian -, 139, 223
arrows only deﬁnition, 3
cardinality of -, 110
cartesian closed -, 129
center of -, 47
chaotic -, 36
cocomplete -, 85, 99
comma -, 22
complete -, 85, 99
233

234
INDEX
concrete -, 4, 42
connected -, 33, 91
discrete -, 5
Eilenberg–Moore -, 160
enriched -, 223
essentially small -, 35
ﬁltered -, 113
free -, 120
functor -, 44–45
homotopical -, 205
homotopy -, 205
indexing -, 38
internal -, 89
isomorphism of -, 20
Kleisli -, 162
locally presentable -, 150
locally small -, 7
monoidal -, 154, 219
naming convention, 3
nerve of -, 142, 215
of algebras, 160
of categories, 20
of elements, 66, 68, 102
of models for an algebraic theory, 114
opposite -, 9
product of -, 19
reﬂective sub-, 140, 142, 158, 167
skeletal -, 34
slice -, 8, 67
small -, 6
symmetric monoidal -, 219
terminal -, 78
category theory
birth of -, 1–2
Cayley’s theorem, 61
cell complex, 73
center
of a category, 47
of a group, 22
chain complex, 4
boundary, 14
cycle, 14
homology, 14
chain rule, 14
chaotic category, 36
classifying space
of a group, 54
closure, 158
left or right -, 129
closure operator, 158, 175
clustering algorithm, 16
co-, see also -, 202
coalgebra, 162
for an endofunctor, 44
terminal, 44
coarsest, 77
cocomplete
category, 85, 99
cocone, 74
cocontinuous functor, 99
codomain, 3
coequalizer, 81
diagram, 81
split -, 169
U-split -, 170
cograph, xii
coherence, 219
cohomology, 1
coinduced representation, 192, 196, 201
cokernel, 82, 139
colimit, 73, 75, 76
absolute -, 170
as a coequalizer between coproducts, 96
as a Kan extension, 210
commutes with colimits, 111
cone, 75, 76
connected -, 91
diagram, 76, 204
ﬁltered -, 114
functor, 106, 136
in a functor category, 93
non-strictness of -, 106, 109
representable universal property, 96
sequential -, 81
uniqueness of -, 76
universal -, 222
universal property of -, 82
comma category, 22
commutative
cube, 40
diagram, 38
rectangle, 39
square, 24, 38
commutator subgroup, 22, 141
commute, 36
comonad, see also monad, 158
complete
category, 85, 99
lattice, 103, 110
composite morphism, 3
concrete category, 42
cone, 74
colimit -, 75, 76
legs of -, 74
limit -, 75, 76
nadir of -, 74
over a category, 76, 105, 203
over a diagram, 74
summit of -, 74
under a category, 76, 105, 203
under a diagram, 74
conﬁguration space, 101, 105
connected category, 91
conservative functor, 180
continuous
function, 18, 175

INDEX
235
functor, 99
contractible groupoid, 62
contravariant functor, 17
copower, 96
coproduct, 81
disjoint -, 222
universal property of -, 82
coskeleton
n-, 199
cotensor, 94
counit
of an adjunction, 123
covariant functor, 17
coYoneda lemma, 212
create, 90
strictly -, 91
currying, 54, 129
decategoriﬁcation, 28
deformation, 207
dense subcategory, 213
density theorem, 212–213
dependent
product, 67
sum, 67
derivative
functoriality of -, 14
total -, 14
derived functor, 206, 207
point-set -, 207
total -, 206
is an absolute Kan extension, 208
via a deformation, 207
diagram, 36, 38, 74, 120
category, 44
colimit -, 76, 204
commutative -, 36, 38
connected -, 91
equalizer -, 78
ﬁnite -, 99
limit -, 76, 204
shape of -, 38, 74
small -, 85, 110
direct image, 118, 138
direct limit, 81
direct sum, 83
directed graph, 199
discrete category, 5
discrete dynamical system, 50
discrete ﬁbration, 72
domain, 3
dual
basis, 23
of a categorical statement, 10
theorem, 10
vector space, 17, 23
duality
in projective plane geometry, 2
Eilenberg–MacLane space, 54
Eilenberg–Moore category, 160
colimits in -, 181, 184
isomorphisms in -, 180
limits in -, 181
universal property, 164
element
category of -, 66, 68
generalized -, 98
universal -, 66, 68
elementary topos, 177
embedding, 31
full -, 31
endo-
functor, 13
morphism, 7
enriched category, 223
epi, see also epimorphism
epic, 11
epimorphism, 11
split -, 12
use in commutative diagrams, 43
equalizer, 78
diagram, 78
equational witness, 19
equivalence of categories, 30, 31
composite -, 30, 35
equivalence relation, 103–104
eﬀective -, 222
equivariant map, 25
essential image, 35, 143
essentially, 35
discrete, 35
small, 35
surjective, 31
evaluation map, 65, 155, see also counit
evil, 35
exact
functor, 223
left or right -, 139
sequence, 1, 223
existential quantiﬁcation, 118
extension of scalars, 120
extranatural transformation, 28
faithful, 30, 140
ﬁber, 79
ﬁber product, 79
ﬁber space, 105
ﬁbration
discrete left or right -, 72
ﬁltered
category, 113
colimit, 114
ﬁnest, 77
ﬁnitary
functor, 175
monad, 175, 184

236
INDEX
ﬁnite colimit
from pushouts and an initial object, 98–99
ﬁnite limit
from pullbacks and a terminal object, 98–99
ﬁxed point, 87
functor, 198
forgetful functor, 13
fork, 81
formal sum, 115
four color theorem, 49
free, 53, 119
abelian group, 52, 119
action, 56, 63
algebra, 162
algebra morphism, 162
category, 120
group, 14, 52, 119, 123
module, 119
monoid, 119
product, 183
vector space, 115, 119
Frobenius reciprocity, ix, 120
full, 30, 140
embedding, 31
function
cograph of -, xii
continuous -, 18
graph of -, xii
partial -, 21
space, 130
functor, 13
2-, 135
accessible -, 150
additive -, 140
adjoint -, 116
bi-, 19
category, 44–45
hom-set as limit, 89
closed -, 129
cocontinuous -, 99
conservative -, 180
constant -, 74
continuous -, 99
contravariant -, 17
covariant -, 17
endo-, 13
essentially surjective -, 31
exact -, 223
faithful -, 30, 140
ﬁnitary -, 175
forgetful -, 13
full -, 30, 140
homotopical -, 205
left or right exact -, 139
localization -, 205
monadic -, 167
morphism, 22
preserves isomorphisms, 18
representable -, 51
represented -, 19
two-sided represented -, 20, 60
functoriality, 13, 17
in group theory, 22–23
of limits and colimits, 106
fundamental group, 14, 33–34
fundamental groupoid, 7, 14, 33, 221
G-action, 19
G-equivariant, 25
G-object, 18, 192
G-representation, 18
coinduced -, 192, 196, 201
induced -, 192, 196, 201
G-set, 18
G-space, 18
Galois connection
antitone -, 127
monotone -, 118
Galois extension, 21
Galois group, 21
Galois theory
fundamental theorem -, 21
generalized element, 98
generator
for a category, 147, 222
for an algebra, 169
geometric realization, 216
global, 31
gluing, 73
graph
complete -, 49
of a function, xii
vertex coloring, 49, 67
Grothendieck topos, 222
image factorization in a -, 105
Grothendieck universe, 6
group, 7
as a one-object category, 5
classifying space -, 54
completion, 119
extension, 1
free -, 14, 52, 119, 123
free abelian -, 52
free product of -, 183
opposite -, 10
presentation, 169
ring, 65, 119
torsion sub-, 26
group action, 18
free -, 56, 63
transitive -, 63
groupoid, 7
connected -, 33
contractible -, 62
maximal -, 8, 121
guess and check, 83

INDEX
237
Haskell, 154, 163
Hilbert’s Nullstellensatz, 127
hom-set, 7
homology, 1, 14
Khovanov -, xii
homomorphism
of algebras, 160
homotopical
category, 205
functor, 205
structure
minimal -, 206
homotopy category
of a simplicial set, 215
of spaces, 206
homotopy equivalence, 206
chain -, 206
homotopy invariant, 14
horizontal composition, 45
idempotent, 88
monad, 158, 167, 168
split -, 88
identity morphism, 3
image, 223
essential -, 143
factorization, 105
induced representation, ix, 192, 196, 201
inﬁmum, 13, 103
universal property of -, 113
initial
algebra, see also terminal coalgebra
jointly weakly -, 146
object, 41, 51, 81
as a limit, 109
weakly -, 109, 146
interior, 158
internal category, 89
intersection, 148
invariant, 27
inverse
left -, 12
right -, 12
inverse image, 118, 138
inverse limit, 80
isomorphic, 7
representably -, 62
isomorphism, 7
natural -, 24
representable -, 61
Jacobian matrix, 14
Jones polynomial, xii
Kan extension, 190
absolute -, 208
along a fully faithful functor, 203
deﬁning a limit or colimit, 210
deﬁning a monad, 214
deﬁning an adjunction, 210
existence of -, 196
formula, 194
pointwise -, 201, 202
preservation of -, 200
kernel, 139
pair, 103
kernel operator, 158
Khovanov homology, xii
Klein’s Erlangen program, 36
Kleisli category, 162, 165
universal property, 164
lattice, 174
complete -, 103, 110
semi-, 174
Lawvere theory, 179
model of -, 179
left adjoint
preserves colimits, 138
left exact functor, 139
left Kan extension
colimit formula, 194
lim inf, 113
lim sup, 113
limit, 73, 75
as a Kan extension, 210
as an equalizer between products, 96
commutes with limits, 111
cone, 75, 76
connected -, 91
diagram, 76, 204
ﬁnite -, 114
functor, 106, 136
in a functor category, 93
in the category of sets, 85–89
non-strictness of -, 106, 109
of a sequence, 113
representable universal property of -, 94
uniqueness of -, 76
universal property of -, 82
linear algebra
abstract vs concrete, 30, 33
linear functional, 17
local, 31
local object, 143
localization, 140, 143
functor, 205
in ring theory, 141
locally presentable category, 150
locally small, 7
loop, 53
space, 131
free -, 131
map, xi, see also morphism, 6
Markov
chain, 163
kernel, 163

238
INDEX
measurable
function, 157
space, 157
middle four interchange, 46
module
free -, 119
monad, 154
as a Kan extension, 214
as a monoid, 154
codensity -, 214
continuation -, 157
double dual -, 157
double power set -, 157
ﬁnitary -, 175, 184
free abelian group -, 156
free commutative monoid -, 157
free group -, 156
free module -, 156
free monoid -, 156
free vector space -, 156
from an adjunction, 155
Giry -, 157, 163, 215
idempotent -, 158, 167, 168
list -, 156
maybe -, 155
ultraﬁlter -, 156, 158
monadic
adjunction, 167
functor, 167
strictly -, 167
monadicity theorem, 173, 177
monic, 11
mono, see also monomorphism
monoid, 5, 37, 161, 174
as a one-object category, 5
free -, 119
in a monoidal category, 154
topological -, 37
monoidal category, 154, 219
symmetric -, 219
monoidal product, 219
monomorphism, 11
split -, 12
use in commutative diagrams, 43
morphism
composite -, 3
etymology, xi
identity -, 3
in a category, 3
not always a function, 6
opposing pair of -, xvi
parallel pair of -, xvi
multiplication
of a monad, 154
nadir
of a cone, 74
natural, 1–2
natural isomorphism, 24
as an invertible natural transformation, 28
between diagrams, 107
natural numbers, 50
natural transformation, 23
components of -, 23
composition, 44, 45
constant -, 74
extra-, 28
globular diagram for -, 24
invertible -, 28
nerve
of a category, 142, 215
no cloning theorem, 26
object
in a category, 3
local -, 143
op-, 202
open cover, 91
opposing pair, xvi
opposite
category, 9
group, 10
orbit, 34
orbit category, 21, 198
orbit-stabilizer theorem, 35
p-adic integers, 1, 80, 182
p-adic solenoid, 1, 101
parallel pair, xvi, 78
pasting diagram, 45, 190
path, 53, 221
components, 107
re-parameterization of -, 61
persistent cluster, 16
pointed set, 160
pointwise Kan extension, 199, 201, 202
poset, 5
as a category, 5
power, 94
preorder, 5
as a category, 5
presentation
for a group, 169
for an algebra, 169
preserve, 90
presheaf, 18, 141
probability measure, 157, 215
ﬁnitely additive -, 215
product, 73, 77
dependent -, 67
ﬁber -, 79
projection, 77
universal property of -, 82
projection
from a product, 77
propositional function, 118
Prüfer p-group, xiv, 1

INDEX
239
pullback, 78
pushout, 81
quasi-isomorphism, 206
quotient, 73
recursion, 50
reﬂect, 90
reﬂective subcategory, 140, 142, 158, 167
reﬂexive pair, 177
regular cardinal, 150
relation, 103
for an algebra, 169
representability theorem, 149
Freyd’s -, 149
representable
isomorphism, 61
vs represented, 51
representable functor, 51
preserves limits, 94
representably
isomorphic, 62
representation, 51
characterizes its representing object, 62
uniqueness of -, 69
represented functor, 19
as a left Kan extension, 190
two-sided -, 20, 60
restriction of scalars, 120
retract, 12, 88
retraction, 12
Riesz representation theorem, 26
right adjoint
preserves limits, 136
right exact functor, 139
right Kan extension
limit formula, 194
ring, 37
unital vs non-unital -, 143, 150
row operation, 60
Russell’s paradox, 6
section, 12
semilattice
meet or join -, 174
sequential colimit, 81
set theory
for category theory, 6
sheaf, 141, 222
condition, 91
sheaﬁﬁcation, 141
Sierpinski space, 54
signature, 4, 127
simplicial set, 18, 141, 193
augmented -, 193
geometric realization of -, 216
homotopy category of -, 142, 215
skeleton, 34
n-, 199
slice category, 8, 67
small, 6, 110
diagram, 85
essentially -, 35
locally -, 7
smash product, 131
solution set, 146
space
conﬁguration -, 101
convenient category of -, 129
ﬁber -, 105
species, 108
split
coequalizer, 169
epimorphism, 12
monomorphism, 12
stabilizer, 34
Stone–Čech compactiﬁcation, 140, 149
structure, 127
subcategory, 8
full -, 31
subobject, 73, 103, 148
classiﬁer, 70
sum
dependent -, 67
summit
of a cone, 74
supremum, 13, 103
universal property of -, 113
suspension
reduced -, 131
symmetric monoidal category, 219
syntax and semantics, 128
tensor, 96
tensor product, 63
associativity, 65
distributes over direct sums, 138
symmetry, 64
unit, 65
terminal
category, 78
coalgebra, 44, 222
object, 41, 51, 78
the, 62
topological space, see also space
topos
elementary -, 177
Grothendieck -, 222
torsion subgroup, 26
torsor, 63, 69
torus, 81
total derived functor, 206
total singular complex, 216
transitive action, 63
translation groupoid, 34, 69
transpose, 116
triangle identity, 123

240
INDEX
triple, 177
tripleability theorem
precise -, 177
reﬂexive -, 177
twisted arrow category, 71
ultraﬁlter, 156
union, 82
unit
of a monad, 154
of an adjunction, 122
unit interval, 221
unit object, 219
universal coeﬃcient theorem, 1
universal cover
is not universal, 62
universal element, 62, 66
universal property, 51, 62, 66
as an initial or terminal object, 68
universal quantiﬁcation, 118
vector space
dual -, 1, 17, 23
dual vs double dual, 23
free -, 115, 119
vertical composition, 45
von Neumann hierarchy, 6
walking
arrow, 29, 53
isomorphism, 29, 53
weak equivalence, 205
weak homotopy equivalence, 206
whiskering, 46, 47
Yoneda embedding, 59
Yoneda lemma, 57–59, 217
corollary, 60
dualization of -, 212
generalization of -, 211–212
meaning of the phrase -, 60
Zariski topology, 127
zero object, 43, 103, 139, 223

