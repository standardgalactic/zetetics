Quantum Computation
533
Q
Primary Literature
1. A. H. Holevo: Some estimates of the information content transmitted by a quantum communi-
cation channel, Probl. Pered. Inform. 9, 3 (1973)
2. C. Bennett and G. Brassard: Quantum cryptography: Public key distribution and coin tossing,
Proceedings of IEEE conference on computers, systems and signal processing, Bangalore, India,
p. 175 (1984)
3. C. Bennett, G. Brassard, C. Cr´epeau, R.Jozsa, A. Peres and W. Wootters: Teleporting an un-
known quantum state via dual classical and EPR channels, Phys. Rev. Lett. 70, 1895 (1993)
Secondary Literature
4. M. A. Nielsen and I. L. Chuang: Quantum computing and quantum information (Cambridge
University Press, Cambridge 2000)
5. M. Le Bellac: A short introduction to quantum computation and quantum information
(Cambridge University Press, Cambridge 2006)
6. G. Jaegger: Quantum information: an overview (Springer 2007)
Quantum Computation
Michel LeBellac
By using speciﬁc properties of quantum mechanics:  superposition principle and
 entanglement, quantum computers can outperform classical ones when carrying
out certain type of computation, see [5]–[7] for an overview. The basic information
unit processed by a quantum computer is the qubit, a two-state quantum system
living in a  Hilbert space where one can choose an  orthonormal basis of two
vectors |0⟩and 1⟩. If we wish to store in a qubit register an integer x, 0 ⩽x ⩽2n−1
x = 2n−1xn−1 + 2n−2xn−2 + · · · + 2x1 + x0
(1)
with xi = 0 or xi = 1, we need n qubits from which we construct the tensor product
state
|x⟩= |xn−1 ⊗xn−2 ⊗· · · ⊗x1 ⊗x0⟩
(2)
State vectors of the form (2) form a basis of the 2n-dimensional space H⊗n called
the computational basis, and it might be concluded, because of the superposition
principle, that an n-qubit register is able to encode 2n states at the same time. How-
ever, a measurement of the n-qubits will give only one result corresponding to one
of the states (2), and the challenge of quantum computation is to use interference
and entanglement in order to exploit this exponentially growing information.

534
Quantum Computation
U(t; t0)
t
t0
|0
|0
Fig. 1 Schematic depiction of the basic principle of a quantum calculation. n qubits are prepared
in the state |0⟩. They undergo a unitary and deterministic evolution in the space H⊗n from time
t = t0 to time t described by a unitary operator U(t, t0) acting in H⊗n. The wiggly arrows represent
interactions with external classical ﬁelds. A measurement of the qubits (or a subset thereof, the ﬁrst
three in this ﬁgure) is made at time t
A calculation performed on a quantum computer is shown schematically in
Fig. 1, where n qubits are all prepared in the state |0⟩at time t = t0: this is the prepa-
ration stage of the quantum system. The qubits then undergo a unitary quantum
evolution described by a unitary operator U(t, t0) acting in H⊗n which performs
the desired operations, for example, the calculation of a function. The experimental
difﬁculty is to avoid unwanted interactions with the environment, otherwise  de-
coherence would make the evolution nonunitary: if the qubits interact with the
environment, the unitary evolution occurs in a Hilbert space which is larger than
H⊗n, because it includes the degrees of freedom of the environment along with
those of the qubits. Interactions with external classical ﬁelds are compatible with
unitary evolution and they are indeed needed to manipulate qubits by Rabi oscil-
lations, which is the most common way of acting on computational qubits. Once
the quantum evolution has been completed, a measurement is made on the qubits
(or on a subset thereof) at time t in order to obtain the result of the calculation.
An important point is that intermediary states of the calculation cannot be observed
between t0 and t, because any measurement would modify the unitary evolution:
the qubits can be measured at the entrance and at the exit of the box of Fig. 1, but
not inside it. Another essential point is that the unitary evolution is reversible: if
we know the state vector at time t, we can recover the state vector at time t0 us-
ing U−1(t, t0) = U(t0, t). As a consequence, classical algorithms, which contain
irreversible logic gates, cannot be directly transposed to quantum ones. One needs
ﬁrst to transform these algorithms into reversible (classical) ones, which can be done
with little reduction in efﬁciency.
The most general quantum evolution is a unitary transformation in H⊗n, and
the most general quantum logic gate is a 2n × 2n unitary matrix operating in H⊗n.
A theorem of linear algebra states that any unitary transformation in H⊗n can be

Quantum Computation
535
Q
decomposed into a product of cNOT gates and unitary transformations on one qubit.
In practice, in addition to the Hadamard and cNOT gates, one-qubit gates called the
phase gate Uph and the π/8 gate are also frequently encountered
Uph =
 1 0
0 i

Uπ/8 =
 1
0
0 e iπ/4

(3)
Any unitary operation in H⊗n can be approximated with arbitrary accuracy by a
combination of cNOT gates and a small number of one-qubit gates, for example
the Hadamard gate H and the two one-qubit gates (3). Schematically, a quantum
algorithm works as follows: an input register of n-qubits stores an integer x, 0 ⩽x ⩽
2n −1, and an output register stores m-qubits, 0 ⩽y ⩽2m −1. An elementary
example of a quantum circuit is drawn in Fig. 2: this circuit has the following action
on the initial state vector |x1 ⊗x0 ⊗y1 ⊗y0⟩, where x1 and x0 are stored in the input
register, y1 and y0 in the output register
|x1 ⊗x0 ⊗y1 ⊗y0⟩→|x1 ⊗x0 ⊗(y1 ⊕x0 ⊕1) ⊗(y0 ⊕x1 ⊕x0)⟩
(4)
where ⊕is addition modulo 2. If the function f (x) is given by
f (0) = 2
f (1) = 3
f (2) = 1
f (3) = 0
(5)
then the action of the circuit can be summarized by
|x ⊗y⟩→Uf |x ⊗y⟩= |x ⊗[y ⊕f (x)]⟩
(6)
where ⊕is now addition modulo 2 without carry over. The transformation Uf is
clearly a unitary operation, since U2
f = I. For a generic function f (x), Uf will be
built in analogy to (6).
Quantum parallelism relies on using linear combinations of vectors of the com-
putational basis, obtained by application of the Hadamard gate H. Indeed, if we
x0
x1
x1
x0
y1 ⊕x1 ⊕1
y0 ⊕x1 ⊕x0
¾1
y1
y0
Fig. 2 An elementary quantum circuit with three cNOT gates (x1 and x0 = control bits, y1 and
y0 = target bits) and a one-qubit gate σ1 which computes the function f (x) (5)

536
Quantum Computation
apply H to the input register in the state |0⊗n⟩before Uf , the state vector of the ﬁnal
state will be, by linearity,
|ﬁn⟩= Uf |(H⊗n 0⊗n) ⊗0⊗m⟩=
1
2n/2
2n−1

x=0
|x ⊗f (x)⟩
(7)
In principle, this state vector contains the 2n values of the function f (x) (not neces-
sarily all of them different). For example, if n = 100, it contains the ∼1030 values
of f (x): it is this exponential growth of states which allows quantum parallelism to
deal efﬁciently with some exponentially complex problems. A measurement can of
course give only one of these values, but it is nevertheless possible to extract useful
information about the relations between the values of f (x) for an ensemble ( en-
sembles in quantum mechanics) of different values of x, of course at the price of
losing the individual values. A classical computer, on the other hand, would have to
evaluate f (x) for all these values of x independently. The art of quantum computing
is to construct an interference pattern in which the desired result stands out with a
reasonable probability against a small background.
Two broad classes of quantum algorithm have been identiﬁed so far. The ﬁrst
class, to which belongs Grover’s algorithm, allows quadratic speed up with respect
to classical algorithms. Grover’s algorithm [1], for example, is able to ﬁnd an en-
try in an unstructured data base of N elements in ∼
√
N steps, while a classical
algorithm needs an average of N/2 steps. This class of algorithm exploits the su-
perposition principle, but not entanglement. Shor’s algorithm [2] belongs to the
second class, and makes essential use of entanglement. Its purpose is to ﬁnd the
prime factors of an integer N. If implemented some day (in a distant future) on
an actual quantum computer, this algorithm would be able to break the widely
used RSA encryption, whose security relies on the difﬁculty of factoring large
numbers. As of today, the best algorithm running on a classical computer needs
∼exp[1.9 ln1/3 N ln ln2/3 N] computational steps to ﬁnd the prime factors. Since
the number of steps grows faster than any polynomial in ln N, the number of bits
which specify the size of the problem, it has been conjectured that factorization
is an exponentially complex problem, also called an “intractable” problem. On the
contrary, the problem becomes of polynomial complexity with Shor’s algorithm,
where the number of computational steps is ∼(ln N)3. Finally one should also men-
tion that quantum computers could be used to simulate efﬁciently quantum systems,
but it is somewhat frustrating that no new really interesting quantum algorithm has
been discovered in the past ten years, which could be added to Grover’s and Shor’s
algorithms.
As in classical computers, errors may arise in processing or storing informa-
tion, and it is necessary to develop error correcting codes. Classical error correcting
codes are based on redundancy: for example, one makes three copies of each bit and
retrieves the correct value by a majority rule. Classical error correcting codes can-
not be directly transposed to qubits, ﬁrst because the  no-cloning theorem forbids

Quantum Computation
537
Q
reproducing an unknown qubit state, and second because errors may affect continu-
ous variables. For example, in the general qubit state
|ϕ⟩= cos θ
2 |0⟩+ e iφ sin θ
2 |1⟩
(8)
noise could lead to continuous variations of the angles θ and φ. Fortunately, these
errors can be kept under control by taking care of a ﬁnite, and in fact small set of
errors. Error correcting codes have been developed, which are based on seven qubits
(Steane) or nine qubits (Shor) and are able to deal with all kinds of error.
Quantum algorithms have had an important impact on the theory of algorithmic
complexity. We assume, as is usually done, the validity of the strong version of the
Church-Turing thesis: any computational model can be simulated efﬁciently, that is
with at most a polynomial increase in the number of computational steps, by a uni-
versal probabilistic Turing machine. Then, it is possible to deﬁne two main classes
of algorithmic complexity. The ﬁrst class is the polynomial class P, that of prob-
lems which can be solved with a number of computational steps that is polynomial
in the number of bits characterizing the size of the problem: these problems are
called “tractable”. The second class is the NP class, that of problems in which a
trial solution can be checked in a polynomial number of steps. Clearly, P⊂NP, and
a celebrated conjecture, which to this day remains unproven, states that P ̸= NP,
which means that there exist problems that are termed intractable. Numerous com-
plexity classes have been identiﬁed, such as that of NP complete problems: ﬁnding a
polynomial algorithm to solve one NP complete problem, for example the “traveling
salesman problem”, would automatically imply a polynomial solution for any NP
problem. Quantum computers are important because they make the strong version
of the Church-Turing thesis questionable. In fact, if factorization is an intractable
problem (as suggested by experience but is still unproven), then Shor’s algorithm
contradicts this strong version. Using a quantum computer it is possible to ﬁnd the
prime factors of an integer N by a number of steps which is a polynomial in ln N,
whereas a classical computer can only do this in an exponential number of steps.
However, it must be acknowledged that factorization is not NP complete.
A ﬁnal important issue is that of physical realizations of quantum computers. The
storage and processing of quantum information requires physical implementations
of qubits possessing the following properties (di Vincenzo criteria [3]):
(i)
they must be scalable, that is, capable of being extended to a sufﬁcient number
of qubits, with well deﬁned qubits
(ii) they must have qubits which can be initialized in the state |0⟩
(iii) they must have qubits which are carried by physical states of sufﬁciently long
lifetime, so as to ensure that the quantum states remain coherent throughout the
calculation
(iv) they must possess a set of universal quantum gates: unitary transformations
on individual qubits and a cNOT gate, which are obtained by controlled
manipulations

538
Quantum Computation
(v) there must be an efﬁcient procedure for measuring the state of the qubits at the
end of the calculation (readout of the results).
The main enemy of quantum computers is interaction with the environment leading
to decoherence, a consequence of which is the loss of the phase in the  super-
position of qubits. The calculations must be performed in a time less than the
decoherence time τdec. If a quantum gate takes a time τop, the ﬁgure of merit for
a quantum computer is the ratio
nop = τdec
τop
.
This is the maximum number of operations that the quantum computer can perform.
There are at present two main avenues of research: realizations using as qubits
degrees of freedom carried by individual atoms or ions, which are “clean” systems,
at least in principle, but not easily scalable, and realizations based on solid state
technology, using as qubits collective degrees of freedom such as superconducting
circuits or quantum dots, which are “dirty” systems, but more easily scalable be-
cause one can adapt conventional microchip technology. The present state of the
art does not allow experimenters to manipulate more than three of four qubits in a
fully controlled way (seven with a NMR based quantum computer [4], which how-
ever is not scalable), and, barring an unexpected technological breakthrough, it will
take many years before a reasonably powerful quantum computer sees the light of
the day.
Primary Literature
1. L. K. Grover: A fast quantum mechanical algorithm for data base search, Proceedings of 28th
Annual ACM Symp. Theory Comp., p. 212 (1996)
2. P. W. Shor: Algorithms for quantum computation: Discrete logarithm and factoring, Proceedings
of 35th annual symposium on foundations of computer science, IEE, p. 124 (1994)
3. D. di Vincenzo: The physical implementation of quantum computation, Fortshcr. Phys. 48, 771
(2000)
4. L. Vandersypen, M. Steffen, G. Breyta, C. Yannoni, M. Sherwood, and I. Chuang: Experimental
realization of quantum Shor’s factoring algorithm using nuclear magnetic resonance, Nature
414, 883 (2001)
Secondary Literature
5. M. A. Nielsen and I. L. Chuang: Quantum computing and quantum information (Cambridge
University Press, Cambridge 2000)
6. M. Le Bellac: A short introduction to quantum computation and quantum information
(Cambridge University Press, Cambridge 2006)
7. G. Jaegger: Quantum information: an overview (Springer 2007)

