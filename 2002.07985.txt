Interpreting Interpretations: Organizing Attribution Methods by Criteria
Zifan Wang, Piotr Mardziel, Anupam Datta, Matt Fredrikson
Carnegie Mellon Univeristy
Moffett Field, CA, 94089
zifanw@andrew.cmu.edu
Abstract
Motivated by distinct, though related, criteria, a grow-
ing number of attribution methods have been developed to
interprete deep learning. While each relies on the inter-
pretability of the concept of “importance“ and our ability
to visualize patterns, explanations produced by the meth-
ods often differ.
As a result, input attribution for vision
models fail to provide any level of human understanding of
model behaviour. In this work we expand the foundations
of human-understandable concepts with which attributions
can be interpreted beyond ”importance” and its visualiza-
tion; we incorporate the logical concepts of necessity and
sufﬁciency, and the concept of proportionality. We deﬁne
metrics to represent these concepts as quantitative aspects
of an attribution. This allows us to compare attributions
produced by different methods and interpret them in novel
ways: to what extent does this attribution (or this method)
represent the necessity or sufﬁciency of the highlighted in-
puts, and to what extent is it proportional? We evaluate our
measures on a collection of methods explaining convolu-
tional neural networks (CNN) for image classiﬁcation. We
conclude that some attribution methods are more appropri-
ate for interpretation in terms of necessity while others are
in terms of sufﬁciency, while no method is always the most
appropriate in terms of both.
1. Introduction
Among approaches for interpreting opaque models are
input attribution which assign to each model input a level
of contribution to its output. When visualized alongside in-
puts, an attribution gives a human interpreter some notion of
what about the input is important to the outcome (see, for
example, Figure 2). Being explanations of highly complex
systems intended for highly complex humans, attributions
have been varied in their approaches and sometimes pro-
duce distinct explanations for the same outputs.
Nevertheless, save for the earliest approaches, attribu-
tion methods distinguish themselves with one or more de-
Input Image (pred: dog)
SG
GradCAM
Figure 1. Interpreting the neural network prediction with differ-
ent method may come with divergence. Left: the input with both
predicted class and groundtruth being dog.
Middle: Smooth-
Grad [23]. Pixels with deeper color have higher attribution scores.
Right: GradCAM[19]. Regions with more heat localize the more
relevant spatial locations. Questions: Is the model using the lady
to classify the dog? Which interpretation is supposed to be used?
sirable criteria. Scaling criteria such as completeness [25],
sensitivity-n [2], linear-agreement [13, 25] calibrate attri-
bution to the change in output as compared to change in
input when evaluated on some baseline.Given access to dif-
ferent attribution methods, which one is the optimal choice
for what purpose remains an unexplored area. Visual com-
parisons, though intuitive and straightforward, remains less
objective since 1) humans’ ideas themselves do not accord
at the most of time. 2) attribution maps generated by differ-
ent methods may vary or even cause contradictory interpre-
tations (see Fig 1 for example).
While evaluation criteria endow attributions with some
limited semantics, the variations in design goals, evaluation
metrics, and the underlying methods resulted in attributions
failing at their primary goal: aiding in model interpretation.
This work alleviates these problems and makes the follow-
ing contributions.
• We decompose and organize existing attribution meth-
ods’ goals along two complementary properties: order-
ing and proportionality. While ordering requires that
an attribution should order input features according to
some notion of importance, proportionality stipulates
also a quantitative relationship between a model’s out-
1
arXiv:2002.07985v2  [cs.AI]  4 Apr 2020

puts and the corresponding attributions in that particu-
lar ordering.
• We describe how all existing methods are motivated
by an attribution ordering corresponding roughly to
the logical notion of necessity which leads to a corre-
sponding sufﬁciency ordering not yet fully discussed
in literature.
• We show that while some attribution methods show
great performance in necessity while others show more
about sufﬁciency but no evaluated method in this paper
can be a winner on the necessity and sufﬁciency at the
same time.
• We further demonstrate how to interpret different attri-
bution maps to gain more insights about the decision
making process in deep models.
2. Background
Attributions are a simple form of model explanations that
have found signiﬁcant application to Convolutional Neural
Networks (CNNs) with their ease of visualization alongside
model inputs (i.e. images). We summarize the various ap-
proaches in Section 2.1 and the criteria with which they are
evaluated and/or motivated in Section 2.3.
2.1. Attribution Methods
The concept of Attribution is well-deﬁned in [25] but it
excludes any method without an baseline (reference) input.
We consider a relaxed version. Consider a classiﬁcation
model y = M(x) that takes an input vector x and out-
puts a score vector y = [y0, · · · , yi, · · · , yn−1]⊤, where yi
is the score of predicting x as class i and there are n classes
in total. Given a pre-selected class c, an attribution method
attempts to explain yc by computing a score for each feature
xi as its contribution toward yc. Even though each feature
in x may receive different attribution scores given different
choice of attribution methods, features with positive attri-
bution scores are universally explained as important part in
x, while the negative scores indicate the presence of these
features decline the conﬁdence for predicting yc.
Previous work has made great progress in developing
gradient-based attribution methods to highlight important
features in the input image for explaining model’s predic-
tion. The primary question to answer is whether should we
consider grad or grad × input as attributions [14, 20, 23,
25]. As Ancona et al. [2] argues grad is local attribution
that only accounts for how tiny change around the input
will inﬂuence the output of the network but grad × input
is the global attribution that accounts for the marginal ef-
fect of a feature towards output. We use grad × input as
the attribution to be discussed in this paper. We brieﬂy in-
troduce methods to be evaluated in this paper and examples
are provided in Fig 2.
Saliency Map (SM) [5, 21] uses the gradient of the class
of interests with respect to the input to interpret the pre-
diction result of CNNs. Guided Backpropagation (GB)
[24] modiﬁes the backpropagation of ReLU [12] so that
only the positive gradients will be passed into the previous
layers. GradCAM [19] builds on the Class Activation Map
(CAM) [27] targeting CNNs. Although its variations [7, 17]
show sharper visualizations, their fundamental concepts re-
main unchanged. We consider only GradCAM in this paper.
Layer-wise Relevance Propagation (LRP) [4], DeepLift
[20] modiﬁes the local gradient and rules of backpropaga-
tions. Another method sharing similar motivation in design
with DeepLift is Integrated Gradient (IG) [25]. IG com-
putes attribution by integrating the gradient over a path from
a pre-deﬁned baseline to the input. SmoothGrad (SG) [23]
attempts to denoise the result of Saliency Map by adding
Gaussian noise to the input and provides visually sharper
results.
Other methods like Deep Taylor Decompostion [15] re-
lated with LRP, Occluding [26] and Inﬂuence Directed Ex-
planations [13] are not evaluated in this paper but will be a
proper future work to discuss.
2.2. Assumptions
We restrict ourselves with two assumptions with regards
to models and attribution methods analyzed.
Non-linearity We focus on evaluating the performance of
attribution methods on non-linear model, e.g. neural net-
works, as SM, IG, SG, LRP, and DeepLIFT are equivalent
for linear models (see proofs in Appendix I) while Grad-
CAM only works for convolutional layers. Linear models
are therefore not expected to distinguish most attribution
methods.
Feature Interaction Features may or may not inﬂuence the
decision individually. In this paper, we focus on attribution
methods that are not directly suited to reasoning about fea-
ture interaction: their attribution maps represent per-pixel
importance, and do not indicate relationships between pix-
els. We are interested in evaluating the feature interactions
in the future work.
2.3. Evaluation Criteria
Evaluation criteria measure the performance of attribu-
tion methods towards some desirable characteristic and are
typically employed to justify the use of novel attribution
methods. We begin with discussing two assumptions about
evaluating the attribution methods.
The most common evaluations are based on pixel-level
interventions or perturbations. These quantify the correla-
tion between the perturbed pixels’ attribution scores and the
output change [3, 6, 7, 11, 16, 18, 20]. For perturbations that

Input Image p=0.99
Saliency Map
IG
SG
GradCAM
LRP
DeepLIFT
GB
Figure 2. Visualizations of different attribution methods using VGG16 model [22]. (a) is the input image with an output conﬁdence 0.99
for the true label ”duck”. (b)-(i): different attribution methods discussed in Section 2.1. grad × input is applied to (b), (c), (g), (h) and (i)
to ﬁnd attribution scores, while (d), (e) and (f) consider their results as attribution scores already. Use heatmap for (d) as the choice in [19].
intend to remove or ablate a pixel (typically by setting it to
some baseline or to noise), the desired behavior for an opti-
mal attribution method is to have perturbations on the highly
attributed pixels drop the class score more signiﬁcantly than
on the pixels with lower attribution.
Quantiﬁcation of the behavior described by Samek et al.
[18] with Area Over Perturbation Curve (AOPC) measures
the area between two curves: the model’s output score
against the number of perturbed pixels in the input image
and the horizontal line of the score at the model’s original
output. Two similar measurement are Area Under Curve
(AUC) [6, 16] and MOst Relevant features First (MoRF)
[2] that measure the area under the perturbation curve in-
stead.
AOPC and AUC (we use AUC to represent both
AUC and MoRF) measurement are equivalent and both are
orignally used to endorse LRP. For reasons which will be-
come clear in the next section, we categorize these criteria
as supporting necessity order. We argue that evaluating at-
tribution methods only with perturbation curves, e.g. Area
Under Curve (or AUC), only discovers the tip of the iceberg
and potentially can be problematic. A toy model is shown
in Example 1 to elaborate our concerns.
Example 1. Consider a model M(x) = max(x1, x2) that
takes a vector x with three features x1, x2, x3 ∈{0, 1}.
Given the input to the model is x1 = x2 = x3 = 1, as-
sume A1, A2, A3 are three different methods and output the
attribution scores s1, s2, s3 shown in Table 1 for each input
feature x1, x2, x3, respectively.
We apply zero perturbation to the input which means we
set features to 0. The AOPC evaluation for these three at-
tribution methods is shown in Fig 3. Using the conclusion
from [18] that higher AOPC scores suggest higher relativity
of input features highlighted by an attribution method, Fig
3 shows pixels highlighted by A3 are more relative Samek
s1
s2
s3
A1
1/6
1/3
1/2
A2
2/3
0
1/3
A3
2/3
1/3
0
Table 1. s1, s2, s3 are attribution scores for x1, x2, x3 computed
by A1, A2, A3, respectively.
0
1
2
3
Perturbation Step
0.0
0.2
0.4
0.6
0.8
1.0
Output Score
A1
A2
A3
0.00
0.25
0.50
0.75
1.00
1.25
1.50
AOPC Score
Figure 3. Comparing attribution methods A1, A2 and A3 by apply-
ing zero perturbation. Dash lines are the change of model’s output
at each perturbation step (only one feature is set to 0 at each step).
Solid lines are the changes of AOPC scores. A2 and A3 are over-
lapping with each other in this exmaple.
et al. [18] to prediction than A1 and A2, as expected. How-
ever, A2 and A1 are considered as showing same level of
relativity under the AOPC measurement even though A2
succeeds in discovering a is more relevant than c, whereas
A1 believes c is more relevant than both a, b.
Another set of criteria instead stipulate that positively at-
tributed features should stand on their own independently
of non-important features. An example of this criterion is
Average % Drop [7] in support of GradCam++ that mea-
sures the change of class score by presenting only pixels
highlighted by an attribution only (non-important pixels are

ablated). Another example is the LEast Relevant Features
ﬁrst (LeRF) [2] that removes the features with least high at-
tribution scores. ﬁrst. We will say these two criteria support
sufﬁciency order (deﬁnition to follow).
Rethinking the concept of relativity, we believe both ne-
cessity and sufﬁciency can be treated as different types of
relativity. In Example 1, neither x1 nor x2 is a necessary
feature individually because the output will not change if
any one of them is absent. However, both x1 and x2 are
sufﬁcient features, with either of which, the model could
produce the same output as before. Besides, A2 succeeds in
placing the order of sufﬁcient feature x1 in front of the non-
sufﬁcient feature x3 but A2 fails, while AOPC(or AUC) is
unable to discover the success.
Other evaluation criteria exist, like sensitivity-n [2] and
sanity check [1], will be discussed in Section 5.
3. Methods
To tame the zoo of criteria, we organize and decom-
pose them into two aspects: (1) ordering imposes condi-
tions under which an input should be more important than
another input in a particular prediction, and (2) proportion-
ality further speciﬁes how attribution should be distributed
among the inputs. We elaborate on ordering criteria in Sec-
tion 3.2 with instantiating in Section 3.3 and Section 3.4.
We describe proportionality in Section 3.5. We begin with
the logical notions of necessity and sufﬁciency as idealized
versions of ablation-based measures described in Section 2.
We introduce our notations in this paper before any further
discussion,
3.1. Notation
Consider a model y = f(x) and an attribution method A,
it computes a set of attribution scores s1, s2, ..., sn for each
pixel x1, x2, ..., xn in the input image x attributing a given
class 1. We permute the pixels into a new ordering πA(x) =
[x′
1, x′
2, ..., x′
n] so that s′
1 ≥s′
2 ≥... ≥s′
n. We take the
subset π+
A(x) of πA(x) so that π+
A(x) has the same ordering
as πA(x) but only contains pixels with positive attribution
scores. Let Ri(x, π) be the output of the model with input x
where pixels x′
1, x′
2, ..., x′
i ∈π are perturbed from the input
by setting x′
1 = x′
2 = ... = x′
i = b, where b is a baseline
value for the image (typically b = 0). Also, let xb be the the
baseline input image where all the pixels are ﬁlled with the
baseline value b. Therefore, we have the the original output
y0 = f(x) and the baseline output yb = f(xb).
3.2. Logical Order
The notions of necessity and sufﬁciency are commonly
used characterizations of logical conditions. A necessary
1we omit the notation of the class of interest for the simplicity in the
rest of the paper
condition is one without which some statement does not
hold. For example, in the statement P1 = A ∧B, both
A and B are necessary conditions as each independently
would invalidate the statement were they be made false. On
the other hand, a sufﬁcient condition is one which can in-
dependently make a statement true without other conditions
being true. In more complex statements, no atomic condi-
tion may be necessary nor sufﬁcient though compound con-
ditions may. In the statement P3 = (A ∧B) ∨(C ∧D),
none of A, B, C, D are necessary nor sufﬁcient but (A∧B)
and (C ∧D) are sufﬁcient. As we are working in the con-
text of input attributions, we relax and order the concept of
necessity and sufﬁciency for atomic conditions (individual
input pixels).
Deﬁnition 1 (Logical Necessity Ordering). Given a state-
ment P over some set of atomic conditions, and two order-
ings a and b, both ordered sets of the conditions, we say a
has better necessity ordering for P than b if:
min
i

{ak}k≥i 
|=P

≤min
i

{bk}k≥i 
|=P

(1)
Deﬁnition 2 (Logical Sufﬁciency Ordering). Likewise, a
has better sufﬁciency ordering for P than b if:
min
i

{ak}k≤i |= P

≤min
i

{bk}k≤i |= P

(2)
A better necessity ordering is one that invalidates a state-
ment P by removing the shorter preﬁx of the ordered condi-
tions while a better sufﬁciency ordering is the one that can
validate a statement using the shorter preﬁx.
3.3. Necessity Ordering (N-Ord)
Unlike logical statements, numeric models do not have
an exact notion of a condition (feature) being present or not.
Instead, inputs at some baseline value or noise are viewed
as having a feature removed from an input. Though this is
an imperfect analogy, the approach is taken by every one of
the measures described in Section 2 that make use of per-
turbation in their motivation. Additionally, with numeric
outputs, the nuances in output obtain magnitude and we can
longer describe an attribution by a single index like the min-
imal index of Deﬁnitions 1 and 2. Instead we consider an
ideal ordering as one which drops the numeric output of the
model the most with the least number of inputs ablated.
We refer the AUC measurement [6, 16? ] and MoRF
[2] as means to measure the Necessity Ordering (N-Ord).
Denote No(x, A) as N-Ord score given a input image x and
an attribution method A. Rewrite AUC using the notation
in Section 3.1:
No(x, A) =
1
M + 1
M
X
m=0
Rm
0 (x, A)
(3)

where Rm
0 (x, A) = max{Rm(x, π+
A(x)) −yb, 0} and M
is the total number of pixels in π+
A(X). We include max to
clip scores below the baseline output. According to Deﬁni-
tion 1, we have the following proposition.
Proposition 1. An attribution method A1 shows a (strictly)
better Ordering Necessity than another method A2 given an
input image x if No(x, A1) < No(x, A2)
As discussed in Section 2.3, N-Ord only captures
whether more necessary pixels, are receiving higher attribu-
tion scores. We argue that attribution methods should also
be differentiated by the ability of highlighting sufﬁcient fea-
tures. To evaluate whether more sufﬁcient pixels are receiv-
ing higher attribution scores, we propose Sufﬁciency Order-
ing as a complementary measurement.
3.4. Sufﬁciency Ordering (S-Ord)
We believe LeRF [2] is a related means of measuring the
Sufﬁciency. Sufﬁciency Ordering measures the score in-
crease as we keep adding important features into a baseline
input. Use the notation in Section 3.1 and let R′
i(xb, π) be
the model’s output with xb where x′
1, x′
2, · · · , x′
i ∈π are
added to the baseline image xb. Denote So(x, A) as S-Ord
score given a input image x and an attribution method A.
So(x, A) =
1
M + 1
M
X
m=0
Rm′
0 (x, A)
(4)
where Rm′
0 (x, A) = min{R′
m(xb, A), R′
M(xb, π+
A(x))} −
y0, M is the number of pixels in π+
A(x). We include min
to clip scores above the original output. According to Deﬁ-
nition 2, we have the following proposition.
Proposition 2. An attribution method A1 shows (strictly)
better Ordering Sufﬁciency than another method A2 given
an input image X if So(x, A1) > So(x, A2).
N-Ord and S-Ord together provides a more comprehen-
sive evaluation for an attribution method. In Section 3.5, we
are going to discuss the disadvantages of only using N-Ord
or S-Ord and propose Proportionality as a reﬁnement to the
ordering analysis.
3.5. Proportionality
N-Ord and S-Ord do not incorporate the attribution
scores beyond producing an ordering. This can be an issue
toward an accurate description of feature necessity or suf-
ﬁciency. For example, consider a toy model M(x1, x2) =
2x1 + x2 and let the inputs variables be x1 = x2 = 1.
Any attribution methods that assign higher score for x1 than
x2 produces the identical ordering π(x1, x2) = [x1, x2],
even one could overestimate the degree of necessity (or suf-
ﬁciency) of x1 by assigning it with much higher attribution
scores. With linear agreement [14], scores for x1 and x2
are more reasonable if their ratio is close to 2:1. Explain-
ing a decision made by a more complex model only using
ordering of attributions may overestimate or underestimate
the necessity (or sufﬁciency) of an input feature. Therefore,
We propose Proportionality as a reﬁnement to quantify the
necessity and sufﬁciency in complementary to the ordering
measurement.
Deﬁnition 3 (Proportionality-k for Necessity). Consider
two positive number n1, n2 and an attribution method A.
Use notations in Section 3.1 and let ˆπ+
A(x) be a reversed
ordering of π+
A(x). Proportionality-k for Necessity is mea-
sured by
N k
p (x, A) = |Rn1(x, π+
A(x)) −Rn2(x, ˆπ+
A(x))|
(5)
under the condition Pn1
i
si = Pn2
j sj = kS(A, x), si ∈
π+
A(x), sj ∈ˆπ+
A(x), k ∈[0, 1]. Ri(x, π) uses the same
deﬁnition in (3), and S(x, A) is the sum of total positive
attribution scores.
Explanation of Deﬁnition 3 the motivation behind
Proportionality-k for Necessity is that: given a group of
pixels ordered with their attribution scores, there are dif-
ferent ways of distributing scores to each feature while the
ordering remains unchanged. An optimal assignment is pre-
ferred that features receive attribution scores proportional to
the output change if they are modiﬁed accordingly. In other
words, given any two subsets of pixels π1 and π2. with
total attribution scores sum to S1 and S2, are perturbed,
the change of output scores R(x, π1) and R(x, π2) should
satisfy R(x, π1)/R(x, π2) = S1/S2. This property is de-
manded because the same share of attribution scores should
account for the same necessity or sufﬁciency. If we restrict
the condition to S1 = S2, the difference between R(x, π1)
and R(x, π2) becomes an indirect measurement of the pro-
portionality. For the measurement of Necessity, we further
restrict that π1 is perturbed from the pixel with the highest
attribution score ﬁrst and π2 is perturbed from the one with
lowest attribution score ﬁrst, in accordance with the setup
in N-Ord. Therefore, a smaller difference N k
p (x, A) shows
better Proportionality-k for Necessity
Proposition 3. An attribution method A1 shows bet-
ter Proportionality-k for Necessity than method A2 if
N k
p (x, A1) < N k
p (x, A2)
A
similar
requirement
for
attribution
method
is
completeness discussed by [25] and its generalization
sensitivity-n discussed by [2]. completeness requires the
sum of total attribution scores to be equal to the change of
output compared to a baseline input, and sensitivity-n re-
quires any subset of n pixels whose summation of attribu-
tion scores should be equal to the change of output com-
pared to the baseline if pixels in that subset are removed.

When n is the total number of pixels in the input image,
sensitivity-n reduces to completeness. The relationships be-
tween sensitivity-n and Proportionality-k for Necessity are
discussed as follows:
Proposition 4. If an attribution method A satisﬁes both
sensitivity-n1 and sensitivity-n2, then N k
p (x, A) = 0 un-
der the condition if Pn1
i
si = Pn2
j sj = kS(x, A), si ∈
π+
A(x), sj ∈ˆπ+
A(x), k ∈[0, 1] , but not vice versa.
The proof for Proposition 6 and can be found in Ap-
pendix 1. We further contrast our method with sensitivity-n
in Section 5. Integrating proportionality with all possible
shares of attribution scores, we deﬁne the Total Proportion-
ality for Necessity (TPN):
Deﬁnition 4 (Total Proportionality for Necessity). Given
an attribution method A and an input image x, The Total
Proportionality for Necessity is measured by
Np(x, A) =
1
ry0
Z 1
0
N k
p (x, A)dk
(6)
where r = min{yb/RM(x, π+
A(x)), 1}2. y0 is used as a
normalizer and M is the total number of elements in π+
A(x),
therefore, r = 1 if removing all elements in π+
A(x) drops the
score to the baseline. Revisit the Section 3.1 for notations if
needed.
Explanation for Deﬁnition 4 Np(x, A) is the area be-
tween two perturbation curves one starting from the pix-
els with highest attribution scores and the other with a re-
versed ordering. The difference from Necessity Ordering
is that Np(x, A) is measured against the share of attribu-
tion scores (the value of k) instead of the share of pixels
in the No(x, A). On the other side, perturbations on non-
necessary features may not change the output at all and we
penalize an attribution method that guides us to do so with
the ratio r compared to the baseline. Generalizing Proposi-
tion 3, we argue:
Proposition 5. An attribution method A1 shows better
Total Proportionality for Necessity than method A2 if
Np(x, A1) < Np(x, A2)
Under the similar construction, we have the following
deﬁnition of Proportionality-k for Sufﬁciency and Total
Proportionality for Sufﬁciency (TPS):
Deﬁnition 5 (Proportionality-k for Sufﬁciency). Consider
two positive number n1, n2 and an attribution method A.
Use notations in Section 3.1 and let ˆπ+
A(x) be a reversed
ordering of π+
A(x). Proportionality-k for Sufﬁciency is mea-
sured by
Sk
p(x, A) = |R′
n1(xb, π+
Ax)) −R′
n2(xb, ˆπ+
A(x))|
(7)
2We clip the scores below 0 and add a small positive number ϵ to the
denominator to ensure the numerical stability.
under the condition Pn1
i
si = Pn2
j sj = kS(x, A), si ∈
π+
A(x), sj ∈ˆπ+
A(x), k ∈[0, 1]. R′
i(x, π) reuses the deﬁni-
tion in (4); S(x, A) is the sum of total positive attribution
scores.
We want the difference Sk
p(x, A) as small as possible
since the same share of attribution scores should reﬂect
same sufﬁciency. Therefore, we have the following propo-
sition:
Proposition 6. An attribution method A1 shows bet-
ter Proportionality-k for Sufﬁciency than method A2 if
Sk
p(x, A1) < Sk
p(x, A2)
Deﬁnition 6 (Total Proportionality for Sufﬁciency). Given
an attribution method A and an input image x, The Total
Proportionality for Sufﬁciency is measured by
Sp(x, A) =
1
r′y0
Z 1
0
Sk
p(x, A)dk
(8)
where where r′ = min{R′
M(x, π+
A(x))/y0, 1}. y0 is used
as a normalizer and M is the total number of elements in
π+
A(x), therefore, r′ = 1 if adding all elements in π+
A(x)
increases the score to the original output. Refer to Section
3.1 and 3.4 for details about the notation.
Similarly, Sp(x, A) is the area between curves of
model’s output change by adding pixels to a baseline in-
put with the highest attribution scores ﬁrst or by the lowest
ﬁrst. The ratio r′ penalizes the false postive situation when
adding all pixels with positive scores does not increase the
output signiﬁcantly. Finally, we have
Proposition 7. An attribution method A1 shows better To-
tal Proportionality for Sufﬁciency than another method A2
if Sp(x, A1) < Sp(x, A2)
In summary, we differentiate and describe the Necessity
Ordering (N-Ord) and Sufﬁciency Ordering (S-Ord) from
previous work and propose Total Proportionality for Neces-
sity (TPN) and Total Proportionality for Sufﬁciency (TPS)
as reﬁned evaluation criteria for necessity and sufﬁciency.
We then apply our measurement to explain the prediction
results from an image classiﬁcation task in the rest of the
paper.
4. Evaluation
4.1. Implementation of Proportionality
To compute TPN for each single input, we ablate a sub-
set of input features at each time. Different from Ordering
test, we do not ablate a certain number of features, instead,
we ablate a subset of features with a certain share of attri-
bution scores. The share of attribution scores k goes from 0
to 1. We generate the ablation curve from the features with

0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
IG
highest scores ﬁrst
lowest scores ﬁrst
TPN
TPS
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
DeepLIFT
0.0
0.2
0.4
0.6
0.8
1.0
−0.2
0.0
0.2
0.4
0.6
0.8
1.0
GradCAM
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Random
k value (share of positive attribution scores)
Output Scores (normalized)
Figure 4. An example of computation for TPN and TPS with the
input in Fig 2. The area represents the score of TPN and TPS be-
fore applying the penalty r and r′ for better visulization purpose.
We also include a Random method that randomly assigns attribu-
tion scores ﬁrst as a baseline method to compare with . This ﬁgure
is better viewed in color.
SM
IG
SG
LRP
DeepLIFT
GB
GradCAM
N-Ord
SM
IG
SG
LRP
DeepLIFT
GB
GradCAM
1 - S-Ord
SM
IG
SG
LRP
DeepLIFT
GB
GradCAM
TPN
SM
IG
SG
LRP
DeepLIFT
GB
GradCAM
TPS
Figure 5. The boxplot for different attribution methods evaluated
with four crietria aforementioned on 9600 images from ImageNet
with VGG16 model. Since only the higher S-Ord score indicates
better Sufﬁciency Ordering, we use 1−S-Ord to accord with other
criteria so the lower scores will indicate better performance on
all criteria shown above.
highest scores ﬁrst and the features with least highest scores
ﬁrst, and measure the area between these two curves. Op-
timal TPN will be 0 as discussed in the previous sections.
The similar implementation will be applid to TPS.
4.2. Evaluate on the datasets
We evaluate N-Ord, S-Ord, TPN and TPS on 9600 im-
ages sampled from ImageNet [10] on VGG16 models. We
evaluate all the attribution methods motioned in Section 3
and the implementation detail for the model and attribution
methods can be found in the Appendix 3. We show the
boxplot in Fig 5. We plot 1−S-Ord instead the original
S-Ord score so that that conclusion that lower scores rep-
resent better performance holds for all subﬁgures. On the
ImageNet and VGG model, DeepLIFT has shown relatively
better Necessity Ordering while GradCAM shows relatively
better Sufﬁciency Ordering. Considering the proportional-
ity, Saliency Map, Integrated Gradient and Smooth Gradient
are all showing slightly better proportionality for necessity
while LRP and GB are showing slightly better proportion-
ality for sufﬁciency. But clearly, no evaluated method is
signiﬁcantly better than others on all criteria at the same
time.
We analyze these attribution methods based on the re-
sult of Fig 5: Saliency Map performs not bad in neces-
sity for both ordering and proportionality compared to sufﬁ-
ciency. Therefore, the features with highest scores assigned
by Saliency Map may not be actually sufﬁcient for the de-
cision making process, e.g. the pool is highlighted by Sai-
lency Map in Fig 2 but the model will probably not make
a mistake when only the pool is present to it. One possi-
ble reason is that the vanishing gradient issue causes the
loss of gradient signal. Threfore, Integrated Gradient and
DeepLIFT are two means trying to solve the vanishing gra-
dient issue in Saliency Map and both archive better Neces-
sity Ordering compared to the Saliency Map. But they do
not show signiﬁcantly better proportionality in both neces-
sity and sufﬁciency.
The reason behind this we assume
is that the Summation-to-Delta requirement only guaran-
tees that sum of attribution scores for all features equals to
the change of output, while any other share of attribution
scores does not cause equivalent change to the output, so
the proportionality is not improved. Similar conclusions are
also discussed by sensitivity-n [2] Smooth Gradient shows
lower inter-quartile range in both TPN and TPS compared
to Saliency Map. Computing the expectation of the Saliency
Map of a distribution of inputs does not resolve the possible
vanishing gradients issue for each input in the distribution;
however, at the same activation unit, e.g. ReLU, an input’s
gradient signal is blocked by ﬂatten negative region but its
neighbor’s gradient signal can get unblocked. It may help
to explain the improvement Smooth Gradient shows in th
experiment. GradCAM is probably the best choices one
can have for the Sufﬁciency Ordering regardless of the fact
it does poorly in porportionality for the sufﬁciency – the
attribution scores may not reﬂect actual sufﬁciency. The
result is not surprising because the upsampling process in
GradCAM does not relate to any axiom that guarantees to

produce pixel-level proportional scores.
On the contradictory, we can not make instructive com-
ment on the following two attribution methods: Guided
Backpropagation shows better sufﬁciency on ordering and
proportionality compared to the necessity. We consider it
as a good method to reveal the sufﬁcient features, however,
as Adebayo et al. [1] points out GB lacks fearfulness to the
model by behaving poorly in the sanity check. Therefore,
we leave the understanding of GB as a future work. On
the other hand, Layer-wise Relevance Propagation is the
one we will not make much strong conclusion as well since
there are many rules in LRP and only one of them, α2β1-
LRP (see Appendix II), is tested. But speciﬁcally, for α2β1-
LRP, it shows good sufﬁciency on both criteria, which in-
crease our conﬁdence to interpret the result of α2β1-LRP
as identifying sufﬁcient features in the input space.
4.3. Evaluate with one instance
All the metrics discussed before can be applied to one
single input and the interpretation using all winners for each
criteria can provide more insights about the model. For ex-
ample, in Fig 6, we interpret that the body of a dog is neces-
sary to the English springer class and only providing
the body the model may not consider it is a dog, the suf-
ﬁcient feature is its head. Consulting different attributions
and interpret with the winners can give more comprehensive
understandings. More exmaples are included in Appendix
III.
Input
Winner of 
 N-Ord: DeepLIFT
Winner of 
 S-Ord: GradCAM
Winner of TPN: IG
Winner of TPS: GB
Figure 6. An example of interpreting the model’s predictions with
winners on different criteria.
5. Related Work
To the best of our knowledge, we are the ﬁrst one de-
scribing the concepts of necessity and sufﬁciency in at-
tributions where similar work may only touch the surface
of either necessity or sufﬁciency but not both. Our work
is partially motivated by smallest sufﬁcient region (SSR)
and smallest destroying region (SDR) [8] where the authors
aim to propose a region that either increase or decrease the
model’s output most even though SSR and SDR only cap-
ture the spatial location in the image but do not incorporate
the feature contributions as scores.
We also consider our work as a subset of sensitivity eval-
uation that how well we can trust an attribution method with
its quantiﬁcation of the feature importance in the input. A
close concept is quantitative input inﬂuence by Datta et al.
[9] (even though the author does not target on deep neu-
ral networks). sensitivity (a)(b) [25] provides the basis of
discussion and sensitivity-n [2] imposes more strict require-
ments. The mathematical connection between proportion-
ality with sensitivity-n is discussed in Section 3.5. We dis-
cuss the main difference of these two concepts here. pro-
portionality approaches the sensitivity from a view that, re-
gardless of the number of pixels, same share of attribution
scores should account for same change to the output, while
sensitivity-n requires removing n pixels should change the
output by the amount of total attribution scores of that n pix-
els. sensitivity-n only provides True/False to an attribution
methods, but proportionality provides numerical results for
comparing different methods under two purposes, the ne-
cessity and sufﬁciency.
6. Conclusion
In this work, we summarized existing evaluation metrics
for attribution methods and categorized them into two log-
ical concepts, necessity and sufﬁciency. We then demon-
strated realizable criteria to quantify necessity and sufﬁ-
ciency with an analysis focused on ordering and its re-
ﬁnement, proportionality. We evaluated existing attribution
methods against our criteria and listed the best methods for
each criteria. We discovered that certain attribution meth-
ods excel in necessity or sufﬁciency, but none is a frequent
winner for both.
The logical concepts of necessity and sufﬁciency are
generally mutually exclusive and our analogues show the
same based on our results: no method is universally opti-
mal for both necessity and sufﬁciency. While this means
we cannot endorse one method over others, the techniques
we present provide additional interpretability tools to data
scientist who can use our measures to select the attribution
appropriate to the task at hand. When debugging a model
for identifying trafﬁc stop signs, an analyst can select for
methods with greater necessity to determine whether the
model has learned spurious correlates, e.g., the pole hold-
ing up the sign. A “necessary” pole would lead to false
negatives (stop signs not on poles) while a “sufﬁcient” one
would only indicate potential false positives (poles without
stop signs) which, though also problematic, are not as dan-

gerous as false negatives in this case. The increased basis
with which to interpret attribution will hopefully lead to a
fuller understanding of model behaviour.
Acknowledgement
This work was developed with the support of NSF grant
CNS-1704845 as well as by DARPA and the Air Force Re-
search Laboratory under agreement number FA8750-15-2-
0277.
The U.S. Government is authorized to reproduce
and distribute reprints for Governmental purposes not with-
standing any copyright notation thereon. The views, opin-
ions, and/or ﬁndings expressed are those of the author(s)
and should not be interpreted as representing the ofﬁcial
views or policies of DARPA, the Air Force Research Lab-
oratory, the National Science Foundation, or the U.S. Gov-
ernment.
We gratefully acknowledge the support of NVIDIA Cor-
poration with the donation of the Titan V GPU used for this
research.
References
[1] Julius Adebayo, Justin Gilmer, Michael Muelly, Ian Good-
fellow, Moritz Hardt, and Been Kim.
Sanity checks for
saliency maps, 2018.
[2] Marco Ancona, Enea Ceolini, Cengiz ¨Oztireli, and Markus
Gross. Towards better understanding of gradient-based attri-
bution methods for deep neural networks, 2017.
[3] Marco Ancona, Enea Ceolini, Cengiz ¨Oztireli, and Markus
Gross. A uniﬁed view of gradient-based attribution methods
for deep neural networks. 11 2017).
[4] Sebastian Bach, Alexander Binder, Gr´egoire Montavon,
Frederick
Klauschen,
Klaus-Robert
M¨uller,
Wojciech
Samek, and Oscar D´eniz Su´arez.
On pixel-wise explana-
tions for non-linear classiﬁer decisions by layer-wise rele-
vance propagation. In PloS one, 2015).
[5] David Baehrens, Timon Schroeter, Stefan Harmeling, Mo-
toaki Kawanabe, Katja Hansen, and Klaus-Robert Mueller.
How to explain individual classiﬁcation decisions, 2009.
[6] Alexander Binder, Gr´egoire Montavon, Sebastian Bach,
Klaus-Robert M¨uller, and Wojciech Samek. Layer-wise rel-
evance propagation for neural networks with local renormal-
ization layers, 2016.
[7] Aditya Chattopadhay, Anirban Sarkar, Prantik Howlader,
and Vineeth N Balasubramanian.
Grad-cam++: General-
ized gradient-based visual explanations for deep convolu-
tional networks. 2018 IEEE Winter Conference on Appli-
cations of Computer Vision (WACV), Mar 2018).
[8] Piotr Dabkowski and Yarin Gal. Real time image saliency
for black box classiﬁers, 2017.
[9] A. Datta, S. Sen, and Y. Zick. Algorithmic transparency via
quantitative input inﬂuence: Theory and experiments with
learning systems. In 2016 IEEE Symposium on Security and
Privacy (SP), pages 598–617, May 2016).
[10] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR09, 2009).
[11] Leilani H. Gilpin, David Bau, Ben Z. Yuan, Ayesha Bajwa,
Michael Specter, and Lalana Kagal.
Explaining explana-
tions: An overview of interpretability of machine learning,
2018.
[12] Xavier Glorot, Antoine Bordes, and Yoshua Bengio. Deep
sparse rectiﬁer neural networks. In Geoffrey Gordon, David
Dunson, and Miroslav Dud´ık, editors, Proceedings of the
Fourteenth International Conference on Artiﬁcial Intelli-
gence and Statistics, volume 15 of Proceedings of Machine
Learning Research, pages 315–323, Fort Lauderdale, FL,
USA, 11–13 Apr 2011). PMLR.
[13] Klas Leino, Shayak Sen, Anupam Datta, Matt Fredrikson,
and Linyi Li. Inﬂuence-directed explanations for deep con-
volutional networks, 2018.
[14] Klas Leino, Shayak Sen, Anupam Datta, Matt Fredrikson,
and Linyi Li. Inﬂuence-directed explanations for deep con-
volutional networks. In 2018 IEEE International Test Con-
ference (ITC), pages 1–8. IEEE, 2018).
[15] Gr´egoire Montavon, Sebastian Bach, Alexander Binder, Wo-
jciech Samek, and Klaus-Robert M¨uller. Explaining nonlin-
ear classiﬁcation decisions with deep taylor decomposition,
2015.
[16] Gr´egoire Montavon, Wojciech Samek, and Klaus-Robert
M¨uller.
Methods for interpreting and understanding deep
neural networks. Digital Signal Processing, 73:1–15, Feb
2018).
[17] Daniel Omeiza, Skyler Speakman, Celia Cintas, and Kom-
minist Weldermariam. Smooth grad-cam++: An enhanced
inference level visualization technique for deep convolu-
tional neural network models, 2019.
[18] W. Samek, A. Binder, G. Montavon, S. Lapuschkin, and K.
M¨uller. Evaluating the visualization of what a deep neural
network has learned. IEEE Transactions on Neural Networks
and Learning Systems, 28(11):2660–2673, Nov 2017).
[19] Ramprasaath R. Selvaraju, Michael Cogswell, Abhishek
Das, Ramakrishna Vedantam, Devi Parikh, and Dhruv Ba-
tra. Grad-cam: Visual explanations from deep networks via
gradient-based localization, 2016.
[20] Avanti Shrikumar, Peyton Greenside, and Anshul Kundaje.
Learning important features through propagating activation
differences, 2017.
[21] Karen Simonyan, Andrea Vedaldi, and Andrew Zisserman.
Deep inside convolutional networks: Visualising image clas-
siﬁcation models and saliency maps, 2013.
[22] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition, 2014.
[23] Daniel Smilkov, Nikhil Thorat, Been Kim, Fernanda Vi´egas,
and Martin Wattenberg.
Smoothgrad: removing noise by
adding noise, 2017.
[24] Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas
Brox, and Martin Riedmiller. Striving for simplicity: The
all convolutional net, 2014.
[25] Mukund Sundararajan, Ankur Taly, and Qiqi Yan. Axiomatic
attribution for deep networks. In Proceedings of the 34th
International Conference on Machine Learning-Volume 70,
pages 3319–3328. JMLR. org, 2017).
[26] Matthew D Zeiler and Rob Fergus. Visualizing and under-
standing convolutional networks, 2013.
[27] B. Zhou, A. Khosla, Lapedriza. A., A. Oliva, and A. Tor-

ralba. Learning Deep Features for Discriminative Localiza-
tion. CVPR, 2016).
Appendix
Appendix I: Proofs
Nonlinearity Ancona et al. [2] concludes that SM, IG,
LRP,DeepLIFT are equivalent for linear models and their
proof also applies to SG. We ﬁrst introduce the following
proposition:
Proposition 8. All attribution methods mentioned in Sec 2
except GradCAM and Guided Backpropagation are equiva-
lent if the model behaves linearly.
Proof. As the Proposition 4 and Conclusion 6 in Ancona
et al. [2] prove that Saliency Map, Integrated Gradient,
DeepLIFT and LRP are equivalent for a linear model, we
just need to prove SmoothGrad is equivalent to Saliency
Map if the model is linear.
If a model behaves linearly, we can express the output
score yc for class c as a linear combination such that yc =
w⊤
c x + bc. Then the SmoothGrad S(x)c is
S(x)c = Eϵ∼N(0,Iλ)
∂[w⊤
c (x + ϵ) + bc]
∂x
= Eϵ∼N(0,Iλ)wc
= wc = ∂yc
∂x
(Saliency Map)
(9)
Proof to Proposition 4 If an attribution method A satisﬁes
both sensitivity-n1 and sensitivity-n2, then N k
p (x, A) = 0
under the condition if Pn1
i
si = Pn2
j sj = kS(x, A), si ∈
π+
A(x), sj ∈ˆπ+
A(x), k ∈[0, 1] , but not vice versa.
Proof. If A satisﬁes sensitivity-n1, for any given ordered
subset π, we have
n1
X
si = R(x, π)
Same thing happens to n2 if A satisﬁes sensitivity-n2. Un-
der the condition if Pn1
i
si = Pn2
j sj = kS(x, A), si ∈
π+
A(x), sj ∈ˆπ+
A(x), k ∈[0, 1],
N k
p (x, A) = |R(x, πA(x) −R(x, π+
A(x)|
= |
n1
X
i
si −
n2
X
j
sj|
= |kS(x, A) −kS(x, A)| = 0
(10)
Appendix II: Implementation Details
Models
We evaluate N Ord, S Ord for all attribution methods men-
tioned in Section 2. We evaluate on 9600 images from Ima-
geNet [10] with pre-trained on VGG16[22].
Attribution Methods
Saliency Map
As discussed in Sec 2, we use grad × input to repre-
sent the Saliency Map, instead of the vanilla gradient.
Integrated Gradient
We use the black image as the baseline for all images and
we use the 50 samples on the linear path from the baseline
to the input.
Smooth Gradient
As discussed in Sec 2, we use smooth grad × input
to represent the Smooth Gradient. We pick a noise level of
20 % as it appears to be the best parameter in its original pa-
per [23]. We randomly sample 50 points from the Gaussian
distribution for the aggregation.
DeepLIFT
We use the black image as the baseline for all images and
we use the RevealCancel rule for DeepLIFT 3
LRP
We use the implementation of LRP-α2β1 with general-
ization tricks mentioned by Montavon et al. [16] who argues
this rule is better for image explanations.
Guided Backpropagation
To implement Guided Backpropagation, we modify the
ReLU activation in the network to ﬁlter out the negative gra-
dient in tensorﬂow.
@ops.RegisterGradient("GuidedBackProp")
def _GuidedBackProp(op, grad):
dtype = op.inputs[0].dtype
return grad * tf.cast(grad > 0.,
dtype) * \
tf.cast(op.inputs[0] > 0.,
dtype)
GradCAM
We use the last convolutional layer to compute the Grad-
CAM for all images.
Appendix III
More examples of evaluating each images with TPN and
TPS are shown in Fig 7
3We use the release code on https://github.com/kundajelab/deeplift

✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Figure 7. More visualizations of different attribution methods. Red checks mark the winner of Total Proportionality for Necessity and blue
checks mark the winner of Total Proportionality for Sufﬁciency

