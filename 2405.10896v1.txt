arXiv:2405.10896v1  [quant-ph]  17 May 2024
ZX-calculus is Complete for Finite-Dimensional
Hilbert Spaces
Boldizs´ar Po´or1
Razin A. Shaikh1,2
Quanlong Wang1
1Quantinuum, 17 Beaumont Street, Oxford, OX1 2NA, United Kingdom
2University of Oxford, United Kingdom
The ZX-calculus is a graphical language for reasoning about quantum computing and quantum
information theory. As a complete graphical language, it incorporates a set of axioms rich
enough to derive any equation of the underlying formalism.
While completeness of the
ZX-calculus has been established for qubits and the Cliﬀord fragment of prime-dimensional
qudits, universal completeness beyond two-level systems has remained unproven until now.
In this paper, we present a proof establishing the completeness of ﬁnite-dimensional ZX-
calculus, incorporating only the mixed-dimensional Z-spider and the qudit X-spider as gen-
erators. Our approach builds on the completeness of another graphical language, the ﬁnite-
dimensional ZW-calculus, with direct translations between these two calculi. By proving its
completeness, we lay a solid foundation for the ZX-calculus as a versatile tool not only for
quantum computation but also for various ﬁelds within ﬁnite-dimensional quantum theory.
1
Introduction
The ZX-calculus [13, 14] is a graphical language for reasoning about quantum computation
and quantum information theory. Thanks to its model-independent representation of quantum
computation and set of intuitive graphical rewrite rules, the ZX-calculus has found applications
across various domains of quantum technologies [55]. These domains include quantum error
correction [23, 37, 34, 53, 22], quantum circuit optimization [29, 6, 38, 57], measurement-based
quantum computing [30, 4, 41], fusion-based quantum computing [7, 43, 26], compilation [52],
classical simulation [12, 10], and education [18, 17, 31].
While the ZX-calculus has primarily been studied for reasoning about qubit quantum com-
putation, various extensions or modiﬁcations to the language enable it to address diﬀerent
aspects of quantum computation and theory. From the perspective of the ZX-calculus, there
are two approaches to modifying the language: changing the set of generators and/or giving
them an alternative interpretation. Languages with a diﬀerent set of generators include the
ZW-calculus [19, 33], ZH-calculus [3, 40], and ZXW-calculus [51, 62]. Alternatively, a diﬀer-
ent interpretation may involve extending the language to higher-dimensional systems such as
qutrits [59, 54, 56], quopits [8, 45, 20, 9], qudits [48, 46, 21], or the ﬁnite-dimensional set-
ting [60, 61, 28].
While languages like the ZXW- and ZW-calculus enable complete reasoning for both qudits
and ﬁnite-dimensional Hilbert spaces, deﬁning the ZX-calculus with the same generality can
open up avenues for interesting applications.
This is because languages with diﬀerent sets
of generators exhibit distinct weaknesses and strengths.
For instance, the ZW-calculus [16]
provides valuable insights for studying multi-partite entanglement [16, 33], and linear optical
quantum computing [25, 27]. However, it is less eﬀective in understanding circuit-based quantum

2
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
protocols. Similarly, while the ZXW-calculus is a powerful analytical tool capable of expressing
Hamiltonians [51, 27], performing diﬀerentiation and integration of ZX-diagrams [62], classical
simulation [39], and interactions in quantum ﬁeld theory [50], extracting circuits expressed
by these methods remains a hard problem [24].
On the other hand, when working purely
with the ZX-calculus, we can restrict the rewrites to keep the diagrams easily extractable [29].
Therefore, the ﬁnite-dimensional ZX-calculus has the potential to yield results directly applicable
to quantum circuits.
When designing graphical languages, there are three crucial properties that we aim to prove
to ensure the language can be eﬀectively used.
These properties are (1) soundness, which
ensures that the rules of the calculus are correct, (2) universality, ensuring that the language can
express any element of the underlying formalism, and (3) completeness, enabling the derivation
of any equality within the underlying formalism. Of these, establishing a proof of completeness
poses the most diﬃculty; nevertheless, it ensures that the language can be eﬀectively used to
graphically derive equalities and proofs.
Indeed, there is a rich history of results investigating the completeness and incompleteness
of various calculi. While the qubit ZX-calculus was ﬁrst formulated in 2007 [13], the crucial
establishment of completeness for qubit quantum computing was not proved until 2017 [42, 36].
This unfolded in several stages, progressively increasing the fragment for which completeness
had been proved. The ﬁrst completeness proof was for the Cliﬀord fragment [1], followed by a
proof of incompleteness for the universal fragment [49]. Moving forward, completeness for single
qubit Cliﬀord+T quantum mechanics was established in [2], and the completeness of the ZW-
calculus was presented in [32] for qubits with integer coeﬃcients and for the universal fragment
in [33]. Further study of the ZX-calculus revealed the necessity of the ‘supplementarity’ rule [44].
Transferring the completeness proof of the ZW-calculus [32, 33] led to a surge of completeness
results. First, for the Cliﬀord+T fragment in [35], and then for the universal fragment in [42, 36].
Further improvements to the qubit ZX-calculus focused on minimizing its set of axioms, ﬁrst
in [5] and then in [58]. This process was highly non-trivial, but now each rule is concise and
intuitive.
Further to qubit calculi, the completeness of qudit calculi has also been extensively stud-
ied over the years. The ﬁrst such completeness result was that of the stabilizer fragment for
qutrit ZX-calculus [59]. The stabilizer fragment of the ZX-calculus for all odd prime dimen-
sions was shown to be complete in [8], and its rule-set has since been further reduced in [45].
The ﬁrst universal completeness of a graphical language beyond qubits was established in [46]
for the arbitrary ﬁnite-dimensions of ZXW-calculus. Recently, the completeness of the qudit
ZW-calculus has also been demonstrated in [28], with a signiﬁcantly reduced set of axioms.
Alongside the qudit ZW-calculus, the paper also introduces and proves the completeness of the
ﬁnite-dimensional ZW-calculus [28].
This result came shortly after the establishment of the
quﬁnite ZXW-calculus and its completeness for ﬁnite dimensional Hilbert spaces [61]. However,
the universal completeness of any higher-dimensional ZX-calculus has remained unproven.
As the main result of the paper, we deﬁne the ﬁnite-dimensional ZX-calculus and prove its
completeness. We begin by deﬁning the generators of the calculus as the mixed-dimensional
Z-spider [61] and the qudit X-spider, and then presenting its axioms. Next, we recapitulate the
axioms and deﬁnition of the ﬁnite-dimensional ZW-calculus in accordance with [28]. We then
move on to proving the main result of the paper — the completeness of the ﬁnite-dimensional
ZX-calculus. It is achieved by translating the generators of our language to the ﬁnite-dimensional
ZW-calculus [28] and proving the invertibility of this translation. This technique of translating

B. Po´or, R. Shaikh, and Q. Wang
3
between calculi to prove completeness has been employed before, ﬁrst in [35], and later in [42, 36].
By establishing completeness, we lay a solid foundation for the ZX-calculus as a versatile tool
not only for quantum computation but also for various ﬁelds within ﬁnite-dimensional quantum
theory.
2
Finite dimensional ZX-calculus
In this section, we deﬁne our calculus starting with the generators, their interpretation, and
lastly, the axiomatization that we later show to be complete. Since any 1-dimensional diagram
is just the empty diagram, this paper only considers dimensions strictly bigger than 1.
2.1
Generators
We deﬁne the symmetric monoidal category ZXf with objects as lists of dimensions (di)n
i=1
where di ∈N for all 0 < i ≤n, such that di ≥2, and morphisms generated by the following
diagrams, for any a, b, n, m ∈N, 0 ≤j < a, and −→r ∈Ca such that r0 = 1:
. . .
n
. . .
m
a
a
a
a
: (a)⊗n →(a)⊗m
a
b
: (a) →(b)
−
→r
a
: () →(a)
a
a
a
: (a, a) →(a)
Kj
a
: () →(a)
a
: (a) →(a)
b
a
b
a
: (a, b) →(b, a)
Diagrams are to be read top-to-bottom, as it is implied from the interpratation below. Diagrams
can be composed in two ways: sequentially, by connecting input and output wires, and in parallel,
by placing them side-by-side.
We extend our language with the standard qudit Z-spider and the mixed-dimensional Z-
spider [61], given by the following compositions, respectively:
. . .
. . .
−
→r
a
a
a
a
n
m
:=
−
→r
a
. . .
. . .
a
a
a
a
n
m
an+m
an+1
an
a1
. . .
. . .
−
→r
:=
an+m
an+1
an
a1
. . .
. . .
−
→r
a
a
a
a
where a = minn+m
i=0 ai is the minimal dimension.
Furthermore, the phase-free Z-spider with
arbitrary legs can express both the cap and cup as follows:
a
a
:=
a
a
a
a
:=
a
a
Caps and cups then allow us to construct the transposition of any diagram:
D
. . .
. . .
. . .
. . .
=
D
. . .
. . .
b1
bm
a1
an
b1
bm
a1
an

4
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
In particular, we obtain the transposition of all the generators.
With these diagrams, we can now deﬁne the X-spider inductively, for any m, n ∈N, as
follows:
. . .
n+1
a
a
:=
. . .
n
a
a
a
. . .
n
. . .
m
a
a
a
a
:=
. . .
n
a
a
. . .
m
a
a
. . .
. . .
Ki
a
a
a
a
n
m
:=
. . .
. . .
a
a
a
a
n
m
Kj
a
2.2
Interpretation
The standard interpretation of a diagram in ZXf is a symmetric monoidal functor J·K : ZXf →
FHilb where FHilb is the category of ﬁnite-dimensional Hilbert spaces. On objects, it is deﬁned
as J(ai)n
i=1K = CA where A = Qn
i=1 ai, and on generators, it is given as follows:
. . .
n
. . .
m
a
a
a
a
J·K
7−→
a−1
X
k=0
|k⟩⊗m ⟨k|⊗n
a
b
J·K
7−→
min{a,b}−1
X
k=0
|k⟩⟨k|
−
→r
a
J·K
7−→
a−1
X
k=0
rk |k⟩
a
a
a
J·K
7−→
a−1
X
k,ℓ=0
|k+ℓmod a⟩⟨k, ℓ|
Kj
a
J·K
7−→|a-j⟩
a
J·K
7−→
a−1
X
k=0
|k⟩⟨k|
b
a
b
a
J·K
7−→
a−1
X
k=0
b−1
X
l=0
|ℓ, k⟩⟨k, ℓ|
where −→r ∈Ca and r0 := 1. Any other morphisms can be deﬁned compositionally: JD1 ⊗D2K =
JD1K ⊗JD2K, and JD1 ◦D2K = JD1K ◦JD2K. By functoriality of the standard interpretation, the
general spiders have the following correspondence in FHilb:
an+m
an+1
an
a1
. . .
. . .
−
→r
J·K
7−→
a−1
X
j=0
rj |j, · · · , j⟩⟨j, · · · , j| ,
where a =
n+m
min
i=0 ai, −→r = (r1, · · · , ra−1), and r0 = 1; moreover,
. . .
. . .
Ki
a
a
a
a
n
m
J·K
7−→
X
i+j1+···+jm
≡k1+···+kn (mod a)
|j1, · · · , jm⟩⟨k1, · · · , kn| ,
where 0 ≤jp, kq < a.
The mixed-dimensional Z-spider can have legs of varying dimensions which need some further
explanation: In the qudit setting, a Z-spider behaves as the generalized Kronecker delta — it
ensures that the same basis state is present on each of its legs. In our mixed-dimensional calculus,
this behaviour is preserved by selecting the k-th standard basis on each leg for any k less than
the minimal dimension. As such behaviour cannot be deﬁned for the remaining basis states, we
set their coeﬃcients to zero. In other words, these basis states are not included in the sum.

B. Po´or, R. Shaikh, and Q. Wang
5
2.3
Notations
Here, we deﬁne some useful notations that we use throughout the paper.
• The original green circle spider [15, 47] can be deﬁned using the Z box:
:=
an+m
an+1
an
a1
. . .
. . .
−
→
α
an+m
an+1
an
a1
. . .
. . .
ei−
→
α
J·K
7−→
a−1
X
j=0
eiαj |j⟩⊗m ⟨j|⊗n
where a =
n+m
min
i=0 ai, −→
α = (α1, · · · , αa−1), α0 := 0, ei−
→
α = (eiα1, · · · , eiαa−1), and αi ∈[0, 2π).
• A multiplier [11] labelled by m corresponds to a Z- and X-spider connected with m wires.
Unlike in the qubit case, a green and a red spider can be connected with more than one
wire. In fact, the Hopf law generalizes to a connections in dimension a, implying that the
multiplier may be labelled modulo a.
m
a
a
:=
. . .
m
a
a
m
a
a
:=
m
a
a
=
. . .
m
a
a
(Mu)
Then, the interpretation of the multiplier is given as follows:
m
a
a
J·K
7−→
a−1
X
i=0
|m · i
mod a⟩⟨i|
• We can deﬁne the dimension splitter of the quﬁnite ZX-calculus [60] as follows:
ab
a
b
:=
b
ab
a
b
ab
ab
J·K
7−→
a−1
X
i=0
b−1
X
j=0
|i, j⟩⟨ib + j|
(DD)
Note that this deﬁnition matches that of [61, Axiom (DD)].
• Throughout this paper, we extensively use the vector N = (1, · · · , a −1) (where a is the
dimension), and elementwise functions on this vector. For example,
√
N! corresponds to
the vector (
√
1!, · · · ,
p
(a −1)!) and rN refers to (r1, · · · , ra−1).
• When two vectors are multiplied or added in the parameter of a Z-spider, we refer to
elementwise multiplication or addition of the vectors.
• When the only non-zero element of the parameter in a Z-box is the ﬁrst or last, we use
the following shorthands:
:=
· · ·
x
· · ·
· · ·
(x, 0, . . . , 0)
· · ·
:=
· · ·
x
· · ·
· · ·
(0, . . . , 0, x)
· · ·

6
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
• We use the notations −→
1k = (
k−1
z
}|
{
1, · · · , 1, 0, · · · , 0), Kj =
 j 2π
d , 2j 2π
d , · · · , (d −1)j 2π
d

in dimen-
sion d, and −→1 = (1, · · · , 1).
• The Z-spider state with phase −→1 and the X-spider state with phase K0 are denoted with
empty spiders:
−
→1
:=
K0
:=
,
• The qudit generalization of the Hadamard gate, the yellow Hadamard box, is deﬁned as
follows, for ω = ei 2π
a :
H
=
K-1
1
1
1
· · ·
1
ωr
ωr(d-1)
· · ·
· · ·
1
ωd-1
ω(d-1)2
· · ·
-1
1
-r
-r
-1
-r
1
· · ·
1
1
-1
1
1
1
ω
ωd-1
· · ·
-1
-1
-1
-1
1
K1
1
√
d
2
a
a
a
a
a2
(HD)
• The inverse of the Hadamard box, the yellow H† box, is deﬁned as follows:
H
H
H
H†
:=
(H†)
2.4
Axiomatization
In this section, we give a set of graphical rewrite rules to perform purely diagrammatic reasoning.
=
−
→r
−
→s
−→
rs′
. . .
. . .
. . .
. . .
. . .
. . .
. . .
...
a1
ai
b1
bk
aj
bk+1
bℓ
. . .
c1
cp
a1
ai
b1
bk
ai+1
aj
bk+1
bℓ
ai+1
(S1)
where A = {at}j
t=0, B = {bt}ℓ
t=0, C = {ct}p
t=0,
M
=
min(A∪B∪C),
m
=
min(A∪C),
n
=
min(B∪C),
−→r
=
(r1, . . . , rm−1),
−→s
=
(s1, . . . , sn−1),
and
−→
rs′
=
(r1s1, . . . , rM−1sM−1).
=
a
a
a
a
a
a
a
a
(B2)
. . .
um,n
Kj
H
. . .
Kj
H†
H†
=
H
n
m
. . .
. . .
n
m
K-1
2
a
a
a
a
a
a
a
a
(HZ)
where 0 ≤j < a and um,n = d
m+n−2
2
=
=
a
a
a
a
(S2)
H
=
=
H
-1
D
(P1)
·
·
Kj
·
·
·
·
·
·
·
=
·
·
·
·
·
·
·
a
(Ept)

B. Po´or, R. Shaikh, and Q. Wang
7
=
D
a
a
a
a
D
. . .
←
−r
a
a
. . .
D
a
a
a
a
D
. . .
−
→r
a
a
. . .
(D1)
where ←−r = (ra-1, · · · , r1)
=
−
→r
Kj
Kj
a
a
a
a
a
a
a
a
a
ˆk(←
−r )
Kj
. . .
. . .
(K2)
where ˆk(←−r ) =
r1−j
rd−j
, . . . , rd−1−j
rd−j

=
K-j
K-j
K-j
K-j
−→
1N
a
a
b
b
c
c
(K0)
where N = min{a, b, c}.
−
→
p
−
→q
=
−
→r
a
a
(PA)
where
the
kth
element
of
−→r
is
rk =
a−1
X
i=0
piqk-i (mod a).
−
→p
−
→p
=
−
→q
a
a
a
b
b
c
c
(PC)
where −→q is a vector such that for all 0 ≤i < b
and 0 ≤j < c we have pipj = qi+j (mod a).
b
a
ab
b
=
−
→
0
a
b
(HP)
=
a+b-1
a+b-1
a+b+k
a
a
b
b
(DA)
where k ∈N.
−
→r
a
=
a
. . .
K-1
ra-1
r0
r1
a+1
1
a-1
0
(ZNF)
ab
a
a
a
a
a
=
b
a
(XM)
1
√
N!
1
√
N!
ℓ1,1
√
N!
a1
A1
. . .
1
√
N!
1
√
N!
√
N!
. . .
=
an
ℓn,m
An
ℓ1,m
ℓn,1
1
√
N!
1
√
N!
√
N!
b1
B1
. . .
1
√
N!
1
√
N!
√
N!
. . .
bm
Bn
1
√
N!
1
√
N!
b1
bm
√
N!
c
B
. . .
1
√
N!
1
√
N!
a1
an
√
N!
A
. . .
(WW)
where c ≥min(P ai, P bi), ℓij = min(ai, bj),
Ai = P
k ℓi,k, Bi = P
k ℓk,i, A = P
k ak, and
B = P
k bk.
2.4.1
Explanation of axioms
While many of the axioms have already been presented in other papers, some appear here for the
ﬁrst time; therefore, this section provides a brief explanation of the newly introduced axioms.
• (S1) is the straightforward generalization of the qudit fusion rule for mixed-dimensional
Z-spiders. The phases are multiplied but the vector needs to be cut oﬀat the minimal
dimension.

8
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
• (D1) generalizes [46, (D1)] for an arbitrary number of legs, making [46, (H1)] redundant.
• (K2) generalizes [46, (K2)] for an arbitrary number of outputs, allowing us to drop [46,
(K1)].
• (K0) is the mixed-dimensional copy rule. The scalar in the middle corresponds to the 0
scalar if the basis state |j⟩cannot be copied due to the output dimension being too small,
and 1 otherwise.
• (PA), standing for Phase Addition, expresses how an X-spider sums up two Z-box states.
• (PC), standing for Phase Commute, indicates that a certain class of Z-boxes can be com-
muted through an X-spider.
• (HP) is the translation of the (h) rule of the ﬁnite-dimensional ZW-calculus.
• The diagrams in (DA) implement the scalar-less W-node, with the rule stating that we
can change the internal dimension as long as it is suﬃciently high.
• (ZNF) maps an arbitrary Z-spider into its normal form.
• (XM) asserts that an X-spider can also be implemented as a scalar-less W-node composed
with a modulo box. The intuition behind this idea is discussed in Section 4.1.
• (WW) directly translates the (b2) rule of the ﬁnite-dimensional ZW-calculus, as presented
in Section 3.
3
Finite dimensional ZW-calculus [28]
This section recapitulates the ﬁnite-dimensional ZW-calculus, in accordance with [27], discuss-
ing its generators with their interpretations and presenting the complete axiomatization of the
calculus.
3.1
Generators
We deﬁne the symmetric monoidal category ZWf with objects as lists of dimensions (di)n
i=1
where di ∈N for all 0 < i ≤n, and morphisms generated by the following diagrams, for any
a, b, bj, n, m ∈N, 0 < j ≤n, 0 < k ≤a, and r ∈C:
a
.r
n
. . .
m
. . . : (a)⊗n →(a)⊗m
... bn
a
b1
: (a) →(bi)n
i=1
k
a : () →(a)
b
a
: (a, b) →(b, a)
a : () →(a, a)
a : (a, a) →()
r : () →()
a : (a) →(a)
Compositions are given in the usual way.

B. Po´or, R. Shaikh, and Q. Wang
9
3.2
Interpretation
The interpretation of a diagram in ZWf is a symmetric monoidal functor J·K : ZWf →FHilb.
On objects, it is deﬁned as J(ai)n
i=1K = CA where A = Qn
i=1(ai + 1). The interpretation of the
Z-spider is as follows, for any r ∈C:
a
.r
n
. . .
m
. . .
J·K
7−→
a
X
k=0
rk√
k!
n+m−2 |km⟩⟨kn|
The W-node and its interpretation are given as follows:
... bn
a
b1
J·K
7−→
X
0≤ki≤bi
k1+...+kn≤a
sk1+...+kn
k1, ..., kn

|k1, ..., kn⟩⟨k1+...+kn|
where a ≥maxn
i=1 bi. The interpretation of the remaining generators are as follows:
k
a
J·K
7−→
(√
k! |k⟩
if 0 < k ≤a
⃗0
otherwise
r
J·K
7−→r
a
J·K
7−→
a
X
k=0
|k⟩⟨k|
b
a
J·K
7−→
a
X
k=0
b
X
l=0
|ℓ, k⟩⟨k, ℓ|
a
J·K
7−→
a
X
k=0
|k, k⟩
a
J·K
7−→
a
X
k=0
⟨k, k|
It is worth pointing out that the dimensions of the wire in ZXf and ZWf are not the same.
In the ZX-calculus d is used to indicate that the wire carries a d-dimensional qudit while in the
case of the ZW-calculus it means a (d + 1)-dimensional qudit. On ZX-diagrams, dimension is
marked with a grey text by the wire, whereas a text in light a grey bubble next to the wire
indicates the dimension of the ZW-calculus.
3.3
Axioms
The equational theory ZWf for the ﬁnite-dimensional ZW-calculus is given as follows:
a
.
.
a
r
s
...
... ...
...
=
(s)
a
.
...
...
rs
...
...
a
a
=
(id)
a
...
... an
b
c
a1
b≥min(c,P ai)
=
(a)
c
...
... an
a1
bm
b1
a
.
...
m
r
n...
n̸=0
=
(b1)
a
a
b1
.
.
bm
r
r
...
m
n...
.
a
a
.
a
r
s
=
(+)
a
.r+s
1 =
(e)
a
1
r
...
=
(cp)
r ·
a
a
1
1
...
c
a1
an
b1
bm
...
...
c≥min(P ai,P bi)
ℓij=min(ai,bj)
=
(b2)
ℓ1,1
a1
an
b1
ℓn,m
bm
...
...
a
b
b+1
. . .
=
(h)
a
b
.0
b
c
a
...
k
k
0<k≤a
=
(p)
a
c
.
b
1
1
...
k
k!
1
=
(e1)
1
1
1
1
a1
b
c
a0
=
(a′)
a1
b
a0
c
b
a+b
a
=
(zcp)
b
a
a
=
(nf)
1
a−1
a
1
a!
a...

10
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
Proposition 1 (Completeness of ZW-calculus). For any two ZWf-diagrams of the same type
D1 : A →B and D2 : A →B,
JD1K = JD2K ⇐⇒ZWf ⊢D1 = D2
The proof is the content of [28, Theorem 3].
4
Completeness from translation
In this section, we prove the completeness of the ﬁnite-dimensional ZX-calculus.
Our proof
strategy bases on that outlined in [35, 42]. The idea of the proof is to deﬁne a translation from
and to a complete language — the ﬁnite-dimensional ZW-calculus in our case. Then, if one can
prove certain properties of these translation functors, such as soundness and invertability, then
we obtain completeness.
4.1
ZX-to-ZW translation
Here, we deﬁne the ZX-to-ZW translation functor, J.KXW : ZXf →ZWf. On objects, we have
J(ai)n
i=1KXW = (ai −1)n
i=1.
On morphisms, we show how it maps the generators of ZXf to
the generators of ZWf; the other morphisms can be deﬁned compositionally: JD1 ⊗D2KXW =
JD1KXW ⊗JD2KXW, and JD1 ◦D2KXW = JD1KXW ◦JD2KXW. We ﬁrst show how the generators
deﬁning a general mixed-dimensional Z-spider are translated, starting with the Z-spider with a
single output and the embedding:
−
→r
a+1
J.KXW
7−→
1
1
1
1
1
r1
√
1!
ra
√
a!
. . .
...
a
1
a
a
b
J.KXW
7−→











a-1
b-1
if a ≥b
a-1
b-1
if a < b
The former interpretation is based on the normal form of the qudit ZW-calculus [28, Deﬁnition
3], and the embedding follows from comparing the interpretations. Since the Z-spiders of the
two calculi match up to a C =

1
√
N!
m+n−1
vector parameter, its translation is as follows:
. . .
n
. . .
m
a
a
a
a
J.KXW
7−→
. . .
a
C
a-1
r
z
XW
. . .
n
m
Now, we focus on expressing generators that include X-spiders. The translation of compu-
tational basis states follow easily from the interpretations. To express the X-spider in the ﬁnite
dimensional ZW-calculus, we ﬁrst point out that the interpretation of the W- and X-spider are
closely related. Other than the scalar factors, the only diﬀerence is that the W-spider results in
sums of the input states that are smaller than the output dimension while the X-spider sums

B. Po´or, R. Shaikh, and Q. Wang
11
elements modulo a:
a-1
a-1
a-1
J·K
7−→
|k + ℓ⟩⟨k, ℓ|
for
k, ℓ< a and k + ℓ< a,
a
a
a
J·K
7−→
|k + ℓmod a⟩⟨k, ℓ|
for
k, ℓ< a
Setting the output dimension of the W-spider to be 2a, and applying a modulo a gate afterwards,
we obtain the translation of the X spider as veriﬁed by the following calculation:
|k mod a⟩⟨k|k + ℓ⟩⟨k, ℓ|
for k, ℓ< a ∧k + ℓ< 2a,
⇐⇒
|k + ℓmod a⟩⟨k, ℓ|
for k, ℓ< a,
Diagrammatically, these translations are given as follows:
Kj
a
J.KXW
7−→
-j
a-1
1
√
N!
r
z
XW
a
a
a
J.KXW
7−→
mod a
1
√
N!
√
N!
√
N!
r
z
XW
r
z
XW
d-1
a-1
2a-1
a-1
2a-1
where the modulo a gadget is deﬁned as a ZW-diagram, but it is also expressible in the ZX-
calculus:
2a
2
a
J.KXW
7−→
mod a
2a-1
a-1
:=
. . .
a
1
1
√
N!
√
N!
r
z
XW
r
z
XW
2a-1
a-1
The translations of the remaining generators, the identity and the swap, are trivial:
a
J.KXW
7−→
a-1
b
a
b
a
J.KXW
7−→
b-1
a-1
a-1
b-1
Lemma 1. The ZX-to-ZW translation functor J.KXW preserves the semantics, that is, JJDKXWK =
JDK for any ZX-diagram D.
To verify this lemma, it suﬃces to apply the computational basis states to both the original
ZX-diagram D and its translated ZW-diagram JDKXW. By evaluating these diagrams under all
possible computational basis inputs, we can conﬁrm that their interpretations yield identical
results.

12
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
4.2
ZW-to-ZX translation
Here, we deﬁne the ZW-to-ZX translation functor, J.KWX : ZWf →ZXf. On objects, we have
J(ai)n
i=1KWX = (ai + 1)n
i=1. On morphisms, we show how it maps the generators of ZWf to
the generators of ZXf; the other morphisms can be deﬁned compositionally: JD1 ⊗D2KWX =
JD1KWX ⊗JD2KWX, and JD1 ◦D2KWX = JD1KWX ◦JD2KWX. For B = Pn
i=1 bi,
a
.r
n
. . .
m
. . .
J.KWX
7−→
. . .
. . .
rN √
N!n+m-2
a+1
a+1
a+1
a+1
n
m
... bn
a
b1
J.KWX
7−→
1
√
N!
1
√
N!
b1+1
bn+1
√
N!
a+1
B+1
. . .
The translation of the Z-spider follows directly from its interpretation. The intuition behind the
translation of the W-node is similar to that of the X-spider in the ZW-to-ZX translation. Up
to scalars, both nodes sum up basis states, but the X-spider also takes the result modulo the
dimension. Embedding the X-spider in a suﬃciently high dimension, we can ensure that the
sum of the basis states is always less than the dimension and thus the modulo is never taken.
Once we have this, the mixed-dimensional Z-spider can remove sums that are larger than the
output dimension of the W-node resulting in the same interpretation.
The remaining translations follow directly from the interpretation:
k
a
J.KWX
7−→
K-k
a+1
√
N!
a
J.KWX
7−→
a+1
a+1
b
a
J.KWX
7−→
b+1
a+1
b+1
a+1
a
J.KWX
7−→
a+1
a+1
a
J.KWX
7−→
a+1
r
J.KWX
7−→
r
K1
2
Lemma 2. The ZW-to-ZX translation functor preserves the semantics, that is, JJDKWXK = JDK
for any ZW-diagram D.
To verify this lemma, it suﬃces to apply the computational basis states to both the original
ZW-diagram D and its translated ZX-diagram JDKWX. By evaluating these diagrams under all
possible computational basis inputs, we can conﬁrm that their interpretations yield identical
results.
4.3
Proof of completeness
In this section, we proof the completeness of ZXf, ﬁnite-dimensional ZX-calculus.
Lemma 3. For an arbitrary ZX-diagram, D, we have JJDKWXKXW = D.
Due to the functoriality of the monoidal functors J.KWX and J.KXW, it suﬃces to show that the
above lemma holds for all generators of ZXf, the details of which can be found in Appendix A.2.
Proposition 2. If ZWf ⊢D1 = D2 then ZXf ⊢JD1KWX = JD2KWX.
By the functoriality of J.KWX, we only need to show that all the rewrite rules of ZWf are derivable
in ZXf. These proofs are the content of Appendix A.3.
Finally, we can prove the completeness of ZXf now.

B. Po´or, R. Shaikh, and Q. Wang
13
Theorem 1 (Completeness). The ﬁnite-dimensional ZX-calculus is universally complete for
ﬁnite-dimensional Hilbert spaces: For any two ZX-diagrams of the same type D1 : A →B and
D2 : A →B, if JD1K = JD2K, then ZXf ⊢D1 = D2.
Proof. Suppose D1, D2 ∈ZXf such that JD1K = JD2K and they have the same type.
By
Lemma 1, JJD1KXWK = JD1K = JD2K = JJD2KXWK. By the completeness of ZW-calculus, ZWf ⊢
JD1KXW = JD2KXW. Now by Proposition 2, ZXf ⊢JJD1KWXKXW = JJD2KWXKXW. Finally, by
Lemma 3, JJD1KWXKXW = D1, JJD2KWXKXW = D2, therefore, ZXf ⊢D1 = D2.
5
Conclusion and further work
In this paper, we presented the ﬁnite-dimensional ZX-calculus, which generalizes the qudit ZX-
calculus by introducing a mixed-dimensional Z-spider. Further, we proved its completeness by
translating to and from the complete ﬁnite-dimensional ZW-calculus, and showing that this
translation is invertible.
While the ZW-calculus is close to minimal, we did not consider the minimality of the ZX-
calculus. It would be interesting to investigate the smallest set of rules are that are necessary
of the ZX-calculus to be complete for ﬁnite-dimensional Hilbert spaces.
Secondly, our calculus generalizes the Z-spider to mixed dimensions, but leaves the X-spider
unchanged from qudits. Figuring out a nice mixed-dimensional generalization of the X-spider
would allow us more ﬂexibility in doing mixed-dimensional reasoning.
Next, we used the ZW-calculus to prove the completeness of the ZX-calculus. By translating
the ZW normal form, we easily obtain a normal form for the ZX-calculus. This normal form can
be used to prove the completeness of the ZX-calculus directly, by showing that every diagram
can be reduced to the normal form. We leave proving this direct completeness without relying
on the result of a diﬀerent calculus to future work.
Another idea to explore could be obtaining completeness through translation to and from
the quﬁnite ZXW-calculus, as it is a superset of ﬁnite-dimensional ZX-calculus, making one side
of the translation trivial. We, however, suspect that given the close-minimality of the ﬁnite-
dimensional ZW-calculus, the translation presented in this paper results in a more minimal set
of rules.
Finally, we note that the ZX-calculus presented here allows for Z-spiders to be labelled with
arbitrary complex numbers, in contrast with the original ZX-calculus where the coeﬃcients are
restricted to be phases. Further work could be to probe whether the ZX-calculus with only
phase coeﬃcients is complete for ﬁnite-dimensional Hilbert spaces.
Acknowledgements
We would like to Alexander Cowtan and Lia Yeh for their detailed feedback and several sug-
gestions for improvement. We thank the anonymous reviewers at QPL 2024 for their valuable
feedback and pointing out a mistake in a translation of the previous version of this paper. RS
is supported by the Clarendon Fund Scholarship.

14
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
References
[1] Miriam Backens (2014): The ZX-calculus Is Complete for Stabilizer Quantum Mechanics.
New
Journal of Physics 16(9), p. 093021, doi:10.1088/1367-2630/16/9/093021.
[2] Miriam
Backens
(2014):
The
ZX-calculus
Is
Complete
for
the
Single-Qubit
Cliﬀord+T
Group.
Electronic
Proceedings
in
Theoretical
Computer
Science
172,
pp.
293–303,
doi:10.4204/EPT CS.172.21.
[3] Miriam Backens & Aleks Kissinger (2019): ZH: A Complete Graphical Calculus for Quantum Com-
putations Involving Classical Non-Linearity. In Peter Selinger & Giulio Chiribella, editors: Proceed-
ings of the 15th International Conference on Quantum Physics and Logic, Electronic Proceedings
in Theoretical Computer Science 287, Open Publishing Association, Halifax, Canada, pp. 23–42,
doi:10.4204/EPT CS.287.2.
[4] Miriam Backens, Hector Miller-Bakewell, Giovanni de Felice, Leo Lobski & John van de We-
tering (2021):
There and Back Again:
A Circuit Extraction Tale.
Quantum 5, p. 421,
doi:10.22331/q-2021-03-25-421.
[5] Miriam Backens, Simon Perdrix & Quanlong Wang (2020): Towards a Minimal Stabilizer ZX-
calculus. Logical Methods in Computer Science 16(4), doi:10.23638/LMCS-16(4:19)2020.
[6] Niel de Beaudrap, Xiaoning Bian & Quanlong Wang (2020): Fast and eﬀective techniques for T-count
reduction via spider nest identities. arXiv:2004.05164.
[7] Hector Bombin, Daniel Litinski, Naomi Nickerson, Fernando Pastawski & Sam Roberts (2023):
Unifying Flavors of Fault Tolerance with the ZX Calculus. arXiv:2303.08829.
[8] Robert I. Booth & Titouan Carette (2022): Complete ZX-calculi for the Stabiliser Fragment in Odd
Prime Dimensions. arXiv:2204.12531.
[9] Robert I. Booth, Titouan Carette & Cole Comfort (2024):
Graphical Symplectic Algebra.
arXiv:2401.07914.
[10] Tristan Cam & Simon Martiel (2023): Speeding up Quantum Circuits Simulation Using ZX-Calculus.
arXiv:2305.02669.
[11] Titouan Carette, Dominic Horsman & Simon Perdrix (2019): SZX-Calculus: Scalable Graphical
Quantum Reasoning. In Peter Rossmanith, Pinar Heggernes & Joost-Pieter Katoen, editors: 44th
International Symposium on Mathematical Foundations of Computer Science (MFCS 2019), Leib-
niz International Proceedings in Informatics (LIPIcs) 138, Schloss Dagstuhl–Leibniz-Zentrum fuer
Informatik, Dagstuhl, Germany, pp. 55:1–55:15, doi:10.4230/LIPIcs.MFCS.2019.55.
[12] Julien Codsi & John van de Wetering (2023): Classically Simulating Quantum Supremacy IQP
Circuits through a Random Graph Approach. arXiv:2212.08609.
[13] B.
Coecke
&
R.
Duncan
(2007):
Interacting
Quantum
Observables.
Available
at
www.cs.ox.ac.uk/people/bob.coecke/GreenRed.pdf.
[14] Bob Coecke & Ross Duncan (2008):
Interacting Quantum Observables.
In Luca Aceto,
Ivan Damg˚ard,
Leslie Ann Goldberg,
Magn´us M. Halld´orsson,
Anna Ing´olfsd´ottir & Igor
Walukiewicz, editors: Automata, Languages and Programming, Lecture Notes in Computer Sci-
ence, Springer, Berlin, Heidelberg, pp. 298–310, doi:10.1007/978-3-540-70583-3_25. Available
at http://personal.strath.ac.uk/ross.duncan/papers/iqo-icalp.pdf.
[15] Bob Coecke & Ross Duncan (2011): Interacting Quantum Observables: Categorical Algebra and
Diagrammatics. New Journal of Physics 13(4), p. 043016, doi:10.1088/1367-2630/13/4/043016.
[16] Bob Coecke & Bill Edwards (2011): Three Qubit Entanglement within Graphical Z/X-calculus. Elec-
tronic Proceedings in Theoretical Computer Science 52, pp. 22–33, doi:10.4204/EPT CS.52.3.
[17] Bob Coecke & Stefano Gogioso (2022): Quantum in Pictures. Quantinuum.

B. Po´or, R. Shaikh, and Q. Wang
15
[18] Bob Coecke & Aleks Kissinger (2017): Picturing Quantum Processes. Cambridge University Press,
doi:10.1017/9781316219317.
[19] Bob Coecke, Aleks Kissinger, Alex Merry & Shibdas Roy (2011):
The GHZ/W-calculus Con-
tains Rational Arithmetic. Electronic Proceedings in Theoretical Computer Science 52, pp. 34–48,
doi:10.4204/EPT CS.52.4.
[20] Cole Comfort (2023): The Algebra for Stabilizer Codes. arXiv:2304.10584.
[21] Alexander Cowtan (2022): Qudit Lattice Surgery. arXiv:2204.13228.
[22] Alexander Cowtan & Simon Burton (2023):
CSS Code Surgery as a Universal Construction.
arXiv:2301.13738.
[23] Niel de Beaudrap & Dominic Horsman (2020): The ZX Calculus Is a Language for Surface Code
Lattice Surgery. Quantum 4, p. 218, doi:10.22331/q-2020-01-09-218.
[24] Niel de Beaudrap, Aleks Kissinger & John van de Wetering (2022): Circuit Extraction for ZX-
Diagrams Can Be #P-Hard. In Miko laj Boja´nczyk, Emanuela Merelli & David P. Woodruﬀ, ed-
itors: 49th International Colloquium on Automata, Languages, and Programming (ICALP 2022),
Leibniz International Proceedings in Informatics (LIPIcs) 229, Schloss Dagstuhl – Leibniz-Zentrum
f¨ur Informatik, Dagstuhl, Germany, pp. 119:1–119:19, doi:10.4230/LIPIcs.ICALP.2022.119.
[25] Giovanni de Felice & Bob Coecke (2022):
Quantum Linear Optics via String Diagrams.
arXiv:2204.12985.
[26] Giovanni de Felice, Boldizs´ar Po´or & Lia Yeh (in prep.): Fusion and Flow: Formal Protocols to
Reliably Build Photonic Graph States.
[27] Giovanni de Felice, Razin A. Shaikh, Boldizs´ar Po´or, Lia Yeh, Quanlong Wang & Bob Coecke
(2023): Light-Matter Interaction in the ZXW Calculus.
In Shane Mansﬁeld, Benoit Valˆıron &
Vladimir Zamdzhiev, editors: Proceedings of the Twentieth International Conference on Quantum
Physics and Logic, Paris, France, 17-21st July 2023, Electronic Proceedings in Theoretical Computer
Science 384, Open Publishing Association, pp. 20–46, doi:10.4204/EPT CS.384.2.
[28] Marc de Visme & Renaud Vilmart (2024):
Minimality in Finite-Dimensional ZW-Calculi.
arXiv:2401.16225.
[29] Ross Duncan,
Aleks Kissinger,
Simon Perdrix & John van de Wetering (2020):
Graph-
Theoretic Simpliﬁcation of Quantum Circuits with the ZX-calculus.
Quantum 4,
p. 279,
doi:10.22331/q-2020-06-04-279.
[30] Ross Duncan & Simon Perdrix (2010): Rewriting Measurement-Based Quantum Computations with
Generalised Flow. In Samson Abramsky, Cyril Gavoille, Claude Kirchner, Friedhelm Meyer auf der
Heide & Paul G. Spirakis, editors: Automata, Languages and Programming, Lecture Notes in Com-
puter Science, Springer, Berlin, Heidelberg, pp. 285–296, doi:10.1007/978-3-642-14162-1_24.
Available at http://personal.strath.ac.uk/ross.duncan/papers/gflow.pdf.
[31] Selma D¨undar-Coecke, Lia Yeh, Caterina Puca, Sieglinde M.-L. Pfaendler, Muhammad Hamza
Waseem,
Thomas
Cervoni,
Aleks
Kissinger,
Stefano
Gogioso
&
Bob
Coecke
(2023):
Quantum Picturalism:
Learning Quantum Theory in High School.
In:
2023 IEEE In-
ternational Conference
on
Quantum
Computing
and
Engineering
(QCE),
03,
pp.
21–32,
doi:10.1109/QCE57702.2023.20321. arXiv:2312.03653.
[32] Amar Hadzihasanovic (2015): A Diagrammatic Axiomatisation for Qubit Entanglement. In: Pro-
ceedings of the 2015 30th Annual ACM/IEEE Symposium on Logic in Computer Science, LICS ’15,
IEEE Computer Society, USA, pp. 573–584, doi:10.1109/LICS.2015.59. arXiv:1501.07082.
[33] Amar Hadzihasanovic (2017): The Algebra of Entanglement and the Geometry of Composition. Ph.D.
thesis, University of Oxford. arXiv:1709.08086.
[34] Jiaxin Huang, Sarah Meng Li, Lia Yeh, Aleks Kissinger, Michele Mosca & Michael Vasmer (2023):
Graphical CSS Code Transformation Using ZX Calculus.
In Shane Mansﬁeld, Benoit Valˆıron &
Vladimir Zamdzhiev, editors: Proceedings of the Twentieth International Conference on Quantum

16
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
Physics and Logic, Electronic Proceedings in Theoretical Computer Science 384, Open Publishing
Association, pp. 1–19, doi:10.4204/EPT CS.384.1.
[35] Emmanuel Jeandel, Simon Perdrix & Renaud Vilmart (2018): A Complete Axiomatisation of the
ZX-Calculus for Cliﬀord+T Quantum Mechanics. In: Proceedings of the 33rd Annual ACM/IEEE
Symposium on Logic in Computer Science, LICS ’18, Association for Computing Machinery, New
York, NY, USA, pp. 559–568, doi:10.1145/3209108.3209131. arXiv:1705.11151.
[36] Emmanuel Jeandel, Simon Perdrix & Renaud Vilmart (2018): Diagrammatic Reasoning beyond
Cliﬀord+T Quantum Mechanics. In: Proceedings of the 33rd Annual ACM/IEEE Symposium on
Logic in Computer Science, LICS ’18, Association for Computing Machinery, New York, NY, USA,
pp. 569–578, doi:10.1145/3209108.3209139. arXiv:1801.10142.
[37] Aleks Kissinger (2022): Phase-free ZX diagrams are CSS codes (...or how to graphically grok the
surface code). arXiv:2204.14038.
[38] Aleks Kissinger & John van de Wetering (2020): Reducing T-count with the ZX-calculus. Physical
Review A 102(2), p. 022406, doi:10.1103/PhysRevA.102.022406. arXiv:1903.10477.
[39] Mark Koch, Richie Yeung & Quanlong Wang (2023): Speedy Contraction of ZX Diagrams with
Triangles via Stabiliser Decompositions. arXiv:2307.01803.
[40] Tuomas Laakkonen, Konstantinos Meichanetzidis & John van de Wetering (2023): Picturing Count-
ing Reductions with the ZH-Calculus. In Shane Mansﬁeld, Benoit Valˆıron & Vladimir Zamdzhiev,
editors: Proceedings of the Twentieth International Conference on Quantum Physics and Logic,
Electronic Proceedings in Theoretical Computer Science 384, Open Publishing Association, Paris,
France, pp. 89–113, doi:10.4204/EPT CS.384.6.
[41] Tommy McElvanney & Miriam Backens (2023): Flow-Preserving ZX-calculus Rewrite Rules for
Optimisation and Obfuscation. In Shane Mansﬁeld, Benoit Valˆıron & Vladimir Zamdzhiev, editors:
Proceedings of the Twentieth International Conference on Quantum Physics and Logic, Paris, France,
17-21st July 2023, Electronic Proceedings in Theoretical Computer Science 384, Open Publishing
Association, pp. 203–219, doi:10.4204/EPT CS.384.12.
[42] Kang Feng Ng & Quanlong Wang (2017):
A Universal Completion of the ZX-calculus.
arXiv:1706.09877.
[43] Brendan Pankovich, Alex Neville, Angus Kan, Srikrishna Omkar, Kwok Ho Wan & Kamil Br´adler
(2023): Flexible Entangled State Generation in Linear Optics. arXiv:2310.06832.
[44] Simon Perdrix & Quanlong Wang (2016): Supplementarity Is Necessary for Quantum Diagram
Reasoning. In: 41st International Symposium on Mathematical Foundations of Computer Science
(MFCS 2016), Leibniz International Proceedings in Informatics (LIPIcs) 58, Krakow, Poland, pp.
76:1–76:14, doi:10.4230/LIPIcs.MFCS.2016.76.
[45] Boldizs´ar Po´or, Robert I. Booth, Titouan Carette, John van de Wetering & Lia Yeh (2023): The
Qupit Stabiliser ZX-travaganza: Simpliﬁed Axioms, Normal Forms and Graph-Theoretic Simpli-
ﬁcation. In Shane Mansﬁeld, Benoit Valˆıron & Vladimir Zamdzhiev, editors: Proceedings of the
Twentieth International Conference on Quantum Physics and Logic, Paris, France, 17-21st July
2023, Electronic Proceedings in Theoretical Computer Science 384, Open Publishing Association,
pp. 220–264, doi:10.4204/EPT CS.384.13.
[46] Boldizs´ar Po´or, Quanlong Wang, Razin A. Shaikh, Lia Yeh, Richie Yeung & Bob Coecke (2023):
Completeness for Arbitrary Finite Dimensions of ZXW-calculus, a Unifying Calculus. In: 2023 38th
Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), Boston, MA, USA, pp. 1–14,
doi:10.1109/LICS56636.2023.10175672. arXiv:2302.12135.
[47] Andr´e Ranchin (2014):
Depicting Qudit Quantum Mechanics and Mutually Unbiased Qudit
Theories.
Electronic
Proceedings
in
Theoretical
Computer
Science
172,
pp.
68–91,
doi:10.4204/EPT CS.172.6.

B. Po´or, R. Shaikh, and Q. Wang
17
[48] Patrick Roy, John van de Wetering & Lia Yeh (2023): The Qudit ZH-Calculus: Generalised Tof-
foli+Hadamard and Universality. In Shane Mansﬁeld, Benoit Valˆıron & Vladimir Zamdzhiev, editors:
Proceedings of the Twentieth International Conference on Quantum Physics and Logic, Paris, France,
17-21st July 2023, Electronic Proceedings in Theoretical Computer Science 384, Open Publishing
Association, pp. 142–170, doi:10.4204/EPT CS.384.9.
[49] Christian Schr¨oder de Witt & Vladimir Zamdzhiev (2014): The ZX-calculus Is Incomplete for
Quantum Mechanics.
In Bob Coecke, Ichiro Hasuo & Prakash Panangaden, editors:
Pro-
ceedings of the 11th Workshop on Quantum Physics and Logic, Kyoto, Japan, Electronic
Proceedings in Theoretical Computer Science 172, Open Publishing Association, pp. 285–292,
doi:10.4204/EPT CS.172.20.
[50] Razin A. Shaikh & Stefano Gogioso (2022):
Categorical Semantics for Feynman Diagrams.
arXiv:2205.00466.
[51] Razin A. Shaikh, Quanlong Wang & Richie Yeung (2022): How to Sum and Exponentiate Hamilto-
nians in ZXW Calculus. arXiv:2212.04462.
[52] Seyon Sivarajah, Silas Dilkes, Alexander Cowtan, Will Simmons, Alec Edgington & Ross Duncan
(2020): T|ket⟩: A Retargetable Compiler for NISQ Devices. Quantum Science and Technology 6(1),
p. 014003, doi:10.1088/2058-9565/ab8e92. arXiv:2003.10611.
[53] Alex Townsend-Teague, Julio Magdalena de la Fuente & Markus Kesselring (2023): Floquetify-
ing the Colour Code.
In Shane Mansﬁeld, Benoit Valˆıron & Vladimir Zamdzhiev, editors: Pro-
ceedings of the Twentieth International Conference on Quantum Physics and Logic, Electronic
Proceedings in Theoretical Computer Science 384, Open Publishing Association, pp. 265–303,
doi:10.4204/EPT CS.384.14.
[54] Alex Townsend-Teague & Konstantinos Meichanetzidis (2022): Simpliﬁcation Strategies for the
Qutrit ZX-Calculus. arXiv:2103.06914.
[55] John van de Wetering (2020):
ZX-calculus for the Working Quantum Computer Scientist.
arXiv:2012.13966.
[56] John van de Wetering & Lia Yeh (2023):
Building Qutrit Diagonal Gates from Phase Gad-
gets.
In Stefano Gogioso & Matty Hoban, editors: Proceedings 19th International Conference
on Quantum Physics and Logic, Wolfson College, Oxford, UK, 27 June - 1 July 2022, Elec-
tronic Proceedings in Theoretical Computer Science 394, Open Publishing Association, pp. 46–65,
doi:10.4204/EPT CS.394.4.
[57] John van de Wetering, Richie Yeung, Tuomas Laakkonen & Aleks Kissinger (2024): Optimal Com-
pilation of Parametrised Quantum Circuits. arXiv:2401.12877.
[58] Renaud Vilmart (2019): A Near-Minimal Axiomatisation of ZX-Calculus for Pure Qubit Quantum
Mechanics. In: 2019 34th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS),
pp. 1–10, doi:10.1109/LICS.2019.8785765. arXiv:1812.09114.
[59] Quanlong Wang (2018): Qutrit ZX-calculus Is Complete for Stabilizer Quantum Mechanics. In Bob
Coecke & Aleks Kissinger, editors: Proceedings 14th International Conference on Quantum Physics
and Logic, Nijmegen, the Netherlands, Electronic Proceedings in Theoretical Computer Science 266,
Open Publishing Association, pp. 58–70, doi:10.4204/EPT CS.266.3.
[60] Quanlong Wang (2022):
Quﬁnite ZX-calculus:
A Uniﬁed Framework of Qudit ZX-calculi.
arXiv:2104.06429.
[61] Quanlong Wang, Boldizs´ar Po´or & Razin A. Shaikh (2024): Completeness of Quﬁnite ZXW Calculus,
a Graphical Language for Finite-Dimensional Quantum Theory. arXiv:2309.13014.
[62] Quanlong Wang, Richie Yeung & Mark Koch (2022): Diﬀerentiating and Integrating ZX Diagrams
with Applications to Quantum Machine Learning. arXiv:2201.13250.

18
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
A
Lemmas
A.1
General derivations
Lemma 4.
=
K-1
x
a
K-1
y
a
K-1
xy
a
Proof.
K-1
x
a
K-1
y
a
K-1
xy
a
=
(K0)
K-1
a
x
y
=
(S1)
K-1
x
a
K-1
y
a
=
(Ept)
K-1
a
Lemma 5. Suppose x ̸= 0. Then
· ·
· ·
·
·
· ·
·
·
·
·
=
··
· ·
K-1
x
2
K-1
x-1
2
Proof.
· ·
· ·
·
·
· ·
·
·
·
·
=
··
· ·
K-1
x
2
K-1
x-1
2
=
(4)
K-1
1
2
=
(Ept)
K-1
2
Lemma 6.
K-1
=
K-1
1
2
b
Proof.
K-1
=
(S1)
(K0)
K-1
K-1
=
(Ept) K-1
1
1
2
b
K-1
1
2
2
b
b
Lemma 7. [60]
H
H†
=
=
H†
H
Proof.
H†
H
=
(HZ)
(Ept)
H
H†
=
(S2)
=
(H†)
H
H
H
H
=
(S2)
H
H†
=
(H†)
Lemma 8.
H
H†
H†
=
H

B. Po´or, R. Shaikh, and Q. Wang
19
Proof. Same as [46, Lemma 12].
Lemma 9. [60]
D
D
=
Proof. Same as [46, Lemma 16].
Lemma 10. [60]
=
=
n
Kj
· · ·
· · ·
Ki
· · ·
· · ·
Ki+j
· · ·
· · ·
· · ·
· · ·
s
m
t
n
Kj
· · ·
· · ·
Ki
· · ·
· · ·
s
m
t
=
n + s
m + t
Ki+j
· · ·
· · ·
· · ·
· · ·
n + s
m + t
· · ·
· · ·
(S4)
Proof.
um,n+1
ut+1,s
um+t,n+s
=
(HZ)
n
Kj
· · ·
· · ·
Ki
· · ·
· · ·
s
m
t
=
(HZ)
n
Kj
· · ·
· · ·
Ki
· · ·
· · ·
s
m
t
=
(4), (7)
(S1)
H
H
H†
H†
H
H†
H†
H
H
H†
Ki+j
· · ·
· · ·
· · ·
· · ·
n + s
m + t
H
H
H†
H†
H
H†
H†
H
Ki+j
· · ·
· · ·
· · ·
· · ·
n + s
m + t
K-1
2
K-1
2
K-1
2
The other equalities can be proved similarly using the same rules.
Lemma 11. [60]
· · ·
· · ·
Kj
H
· · ·
· · ·
Kd-j
H†
H†
=
H
n
m
· · ·
H
· · ·
Kj
H†
H†
=
H
n
n
m
m
vm,n
K-1
2
vm,n
K-1
2
(HX)
where vm,n = d
−m−n+2
2
, j ∈{0, 1, · · · , d −1}. We also call this equality (HX).
Proof.
=
(HZ)
=
(7)
(5)
· · ·
H
· · ·
Kj
H†
H†
H
n
m
· · ·
H†
· · ·
Kj
H
H
H†
n
m
H
H
H†
H†
· · ·
Kj
· · ·
n
m
vm,n
K-1
2
um,n
K-1
2
vm,n
K-1
2

20
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
=
(HZ)
=
(9)
· · ·
H†
· · ·
Kd-j
H
H
H†
n
m
· · ·
H†
· · ·
Kd-j
H
H
H†
n
m
H†
H†
H
H
· · ·
D
· · ·
Kd-j
D
D
D
n
m
· · ·
Kj
· · ·
n
m
vm,n
K-1
2
um,n
K-1
2
vm,n
K-1
2
=
(D1)
· · ·
· · ·
Kj
D
D
n
m
D
D
(P1)
(5)
=
(8)
where um,n = d
m+n−2
2
, vm,n = d
−m−n+2
2
, j ∈{0, 1, · · · , d −1}.
Lemma 12.
=
(B3)
Proof.
=
(HZ)
=
(7)
H
H†
H
H
H
H
=
(K0)
H
H
=
(HX)
v1,0
K-1
2
u2,1
K-1
2
v1,0
K-1
2
v1,0
K-1
2
v1,0
K-1
2
v1,0
K-1
2
where u2,1 = d
1
2 , v1,0 = d
1
2 .
Lemma 13.
=
Kjk
a
a
Kj
k
a
Proof.
=
Kjk
a
a
Kj
Kj
. . .
k
=
a
Kj
Kj

⊗k
(S4)
(K0)
(Ept)
(Mu)
k
a
Lemma 14. [60]
K-j
−
→r
=
K-1
rj
a
2
where −→r = (r1, · · · , ra−1).
Proof.
=
K-j
−
→r
a
−→
rJ
j+1
K-1
(13)
D
j+1
=
K-j
−
→r
a
(Ept)
(K0)
a
j+1
K-j
−→
rJ
=
(S1)
j+1
(P1)
=
←−
rJ
K-1
(D1)
j+1
K-1
←−
rJ
j+1
=
(Ept)
(K0)
j+1
2
K-1
rj
=
(S1)
2
where −→
rJ = (r1, · · · , rj) and ←−
rJ = (rj, · · · , r1).

B. Po´or, R. Shaikh, and Q. Wang
21
Lemma 15.
· · ·
· · ·
=
· · ·
· · ·
D
· · ·
· · ·
=
· · ·
· · ·
D
=
· · ·
· · ·
D
· · ·
· · ·
=
· · ·
· · ·
D
· · ·
· · ·
=
· · ·
· · ·
D
=
· · ·
· · ·
D
Proof. Same as [46, Lemma 25].
Lemma 16. [60]
=
· · ·
k
· · ·
d-k
=
· · ·
k
· · ·
d-k
where 1 ≤k ≤d −1.
Proof. Same as [46, Lemma 30].
Lemma 17. Suppose x ∈{0, . . . , d −1}. Then
x
=
D
-x
x
=
D
Proof. Same as [46, Lemma 34].
Lemma 18.
K-jk
j
=
K-k
j
Proof.
K-jk
j
=
(S4)
(Mu)
. . .
j
K-k
K-k
=
(K2)
. . .
j
K-k
=
(16)
. . .
d-j
K-k
(S4)
=
K-k
D
(15)
(17)
-j
(Mu)
=
K-k
j

22
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
A.2
Recovering generators
Lemma 19.
ss
−
→r
a+1
{
XW
{
WX
=
−
→r
a+1
Proof.
−
→r
a+1
J.KXW
7−→
1
1
1
1
1
r1
√
1!
ra
√
a!
. . .
...
a
1
a
J.KWX
7−→
1
√
N!
1
√
N!
√
N!
. . .
K-1
2
√
N!
1
√
N!
. . .
 ra
√
a!
N√
N!a-1
a
 r0
√
0!
N
1
√
N!
 r1
√
1!
N
1
√
N!
√
N!
a(a-1)
2
1
√
N!
1
√
N!
2
a+1
2
2
2
2
2
2
a+1
=
. . .
K-1
ra
√
a!
r0
√
0!
r1
√
1!
√
N!
a(a-1)
2
a+1
a+1
0
1
a
=
−
→
r
√
N!
a+1
√
N!
a+1
=
−
→r
a+1
N!
. . .
K-1
 ra
√
a!
N 1
N!
 r0
√
0!
N 1
N!
 r1
√
1!
N 1
N!
√
N!
a(a-1)
2
2
a+1
a+1
0
1
a
2
2
2
=
(S1)
(ZNF)
(6)
(S1)
(S4)
(Mu)
(S1)
(S4)
Lemma 20.
tt
a
b
|
XW
|
WX
=
a
b

B. Po´or, R. Shaikh, and Q. Wang
23
Proof. Suppose a ≥b. Then
a
b
J.KXW
7−→
a-1
b-1
J.KWX
7−→
1
√
N!
b
√
N!
a
b
=
1
√
N!
b
√
N!
a
b
=
a
b
(S2)
(S1)
The other case can be proved similarly.
Lemma 21.
u
v
u
v
. . .
n
. . .
m
a
a
a
a
}
~
XW
}
~
WX
=
. . .
n
. . .
m
a
a
a
a
Proof. For C =

1
√
N!
m+n−1
,
. . .
n
. . .
m
a
a
a
a
J.KXW
7−→
. . .
a
C
a-1
r
z
XW
. . .
n
m
J.KWX
7−→
s
{
WX
a
C
r
z
XW
1
C
=
. . .
n
. . .
m
a
a
a
a
a
C
1
C
. . .
n
. . .
m
a
a
a
a
=
. . .
n
. . .
m
a
a
a
a
(19)
(S1)
Lemma 22.
u
wwv
u
wwv
an+m
an+1
an
a1
. . .
. . .
−
→r
}
~
XW
}
~
WX
=
an+m
an+1
an
a1
. . .
. . .
−
→r
Proof. This follows from Lemmas 19 to 21.
Lemma 23.
u
wv
mod a
2a-1
a-1
}
~
WX
=
a
2a
2a
2a
2
a

24
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
Proof. Expanding the deﬁnition of the modulo a box,
. . .
a
1
1
√
N!
√
N!
r
z
XW
r
z
XW
2a-1
a-1
J.KWX
7−→
1
√
N!
√
N!
a
√
N!
2a
2a
1
√
N!
2
1
√
N!
2
. . .
a
1
√
N!
r
z
XW
s
{
WX
r
z
XW
s
{
WX
=
1
√
N!
√
N!
a
√
N!
2a
2a
1
√
N!
2
1
√
N!
2
. . .
a
1
√
N!
=
a
2a
2
2
. . .
a
=
a
2a
2a
2a
2
a
(22)
(S1)
(S2)
(S1)
(Mu)
Lemma 24.
u
v
u
v
a
a
a
}
~
XW
}
~
WX
=
a
a
a
Proof.
a
a
a
J.KXW
7−→
mod a
1
√
N!
√
N!
√
N!
r
z
XW
r
z
XW
d-1
a-1
2a-1
a-1
2a-1
J.KWX
7−→
1
√
N!
1
√
N!
√
N!
2a
2a
mod a
a
√
N!
√
N!
a
a
a
a
1
√
N!
q
y
XW
t
|
WX
r
z
XW
s
{
WX
=
1
√
N!
1
√
N!
√
N!
2a
2a
√
N!
√
N!
a
a
a
a
1
√
N!
2a
a
2a
2a
2
a
(22)
(23)
=
2a
a
a
a
a
a
=
a
2a
2
a
2a
(XM)
(S1)
(S2)

B. Po´or, R. Shaikh, and Q. Wang
25
Lemma 25.
tt
a
|
XW
|
WX
=
a
Proof.
a
J.KXW
7−→
a-1
J.KWX
7−→
a
Lemma 26.
tt
b
a
b
a
|
XW
|
WX
=
b
a
b
a
Proof.
b
a
b
a
J.KXW
7−→
b-1
a-1
a-1
b-1
J.KWX
7−→
b
a
b
a
Lemma 3. For an arbitrary ZX-diagram, D, we have JJDKWXKXW = D.
Proof. Due to the functoriality of the monoidal functors J.KWX and J.KXW, it suﬃces to show that
the above lemma holds for all generators of ZXf. These generators are presented in Section 2.1,
and the proofs are shown in Lemmas 19 to 26.
A.3
Proving axioms of ZW
Lemma 27. The translation of the following ZW diagrams under J.KWX equal in ZXf:
a
.
.
a
r
s
...
... ...
...
a
.
...
...
rs
...
...
Proof.
a
.
.
a
r
s
...
... ...
...
J.KWX
7−→
. . .
. . .
rN √
N!n+m-1
a+1
a+1
a+1
a+1
n
m
. . .
. . .
sN √
N!p+q-1
a+1
a+1
a+1
a+1
p
q
=
(r + s)N √
N!n+p+m+q-2
a+1
a+1
a+1
a+1
a+1
a+1
a+1
a+1
. . .
n
. . .
p
. . .
m
. . .
q
(S1)
J.KWX
←−[
a
.
...
...
rs
...
...
Lemma 28. The translation of the following ZW diagrams under J.KWX equal in ZXf:
a
a
a

26
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
Proof.
a
a
J.KWX
7−→
a+1
a+1
=
a+1
(S2)
J.KWX
←−[
a
Lemma 29. For b ≥min(c, P ai), the translation of the following ZW diagrams under J.KWX
equal in ZXf:
...
... an
b
c
a1
c
...
... an
a1
Proof. For A := P ai, D := P di, M = min{A, b} :
...
... an
b
c
a1
J.KWX
7−→
1
√
N!
1
√
N!
a1+1
an+1
√
N!
b+1
A+1
. . .
1
√
N!
1
√
N!
√
N!
c+1
b+D+1
. . .
1
√
N!
=
d1+1
dn+1
=
1
√
N!
1
√
N!
a1+1
an+1
b+1
A+1
. . .
1
√
N!
√
N!
c+1
b+D+1
. . .
1
√
N!
d1+1
dn+1
1
√
N!
1
√
N!
a1+1
an+1
−→
1M
A+1
. . .
1
√
N!
√
N!
c+1
b+D+1
. . .
1
√
N!
d1+1
dn+1
(S1)
(S1)
Here, we split the proof based on the value of M. If A ≤b, then M = min{A, b} = A and we
have:
=
1
√
N!
1
√
N!
a1+1
an+1
. . .
1
√
N!
√
N!
c+1
A+D+1
. . .
1
√
N!
d1+1
dn+1
1
√
N!
1
√
N!
a1+1
an+1
A+1
. . .
1
√
N!
√
N!
c+1
b+D+1
. . .
1
√
N!
d1+1
dn+1
=
1
√
N!
1
√
N!
a1+1
an+1
A+D+1
. . .
1
√
N!
√
N!
c+1
A+D+1
. . .
1
√
N!
d1+1
dn+1
=
(DA)
(S2)
(S4)
Otherwise, we have A > b, and thus M = min{A, b} = b. Combining this with the assumption

B. Po´or, R. Shaikh, and Q. Wang
27
b ≥min(c, P ai) = min(c, A), we conclude that b ≥c. Therefore,
=
1
√
N!
1
√
N!
a1+1
an+1
b+1
A+1
. . .
1
√
N!
√
N!
c+1
b+D+1
. . .
1
√
N!
d1+1
dn+1
c+1
=
1
√
N!
1
√
N!
a1+1
an+1
b+1
A+1
. . .
√
N!
c+1
b+D+1
. . .
d1+1
dn+1
c+1
c+1
1
√
N!
1
√
N!
c+1
c+1
=
1
√
N!
1
√
N!
a1+1
an+1
A+1
. . .
√
N!
c+1
b+D+1
. . .
d1+1
dn+1
c+1
c+1
1
√
N!
1
√
N!
c+1
c+1
=
1
√
N!
1
√
N!
a1+1
an+1
A+1
. . .
√
N!
c+1
b+D+1
. . .
d1+1
dn+1
c+1
1
√
N!
1
√
N!
(PC)
(PC)
(S1)
Then, the remaining steps are the same as in the A ≤b case.
Lemma 30. For n ̸= 0, the translation of the following ZW diagrams under J.KWX equal in
ZXf:
bm
b1
a
.
...
m
r
n...
a
a
b1
.
.
bm
r
r
...
m
n...
Proof. Let b := P bi. We ﬁrst show the following:
bm
b1
a
...
m
n...
J.KWX
7−→
1
√
N!
1
√
N!
b1+1
bm+1
√
N!
a+1
b+1
1
√
N!
1
√
N!
√
N!
a+1
b+1
. . .
m
√
N!n-1
√
N!m-1
. . .
n
=
b1+1
bm+1
√
N!
a+1
b+1
√
N!
a+1
b+1
. . .
m
1
√
N!
1
√
N!
. . .
n
b+1
b+1
=
b1+1
bm+1
a+1
a+1
. . .
m
. . .
n
b+1
b+1
1
√
N!
1
√
N!
b+1
b+1
√
N!
√
N!
=
b1+1
bm+1
a+1
a+1
. . .
m
. . .
n
b+1
b+1
1
√
N!
1
√
N!
√
N!
a+1
√
N!n-1
b+1
b+1
b+1
b+1
(S1)
(B2)
(S1)
J.KWX
←−[
a
a
b1
bm
...
m
n...
Now, we only have to show that the W-node copies phases:
bm
b1
a
.
...
m
r
J.KWX
7−→
b1+1
bm+1
a+1
. . .
m
b+1
b+1
1
√
N!
1
√
N!
√
N!
a+1
rN
b1+1
bm+1
. . .
m
b+1
b+1
1
√
N!
1
√
N!
√
N!
a+1
=
=
rN
rN
b1+1
bm+1
b1+1
bm+1
a+1
. . .
m
b+1
b+1
√
N!
b+1
rN
1
√
N!
1
√
N!
b+1
b+1
. . .
m
b+1
b+1
rN
rN
√
N!
a+1
=
1
√
N!
1
√
N!
b1+1
bm+1
(PC)
(S1)
(S1)

28
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
J.KWX
←−[
a
b1
bm
r
r
...
m
Lemma 31. The translation of the following ZW diagrams under J.KWX equal in ZXf:
.
a
a
.
a
r
s
a
.r+s
Proof.
.
a
a
.
a
r
s
J.KWX
7−→
a+1
a+1
2a+1
1
√
N!
1
√
N!
√
N!
a+1
rN
1
√
N!
sN
1
√
N!
=
a+1
a+1
2a+1
√
N!
a+1
rN 1
N!
sN 1
N!
=
=
(r + s)N
1
√
N!
a+1
√
N!
a+1
−
→
C
2a+1
(PA)
(S1)
(S1)
J.KWX
←−[
a
.r+s
where the k-th element of −→
C for k ≤a is given by ck =
a
X
i=0
ri 1
i!sk-i
1
(k −i)! = (r + s)k
k!
and for
k > a it is ck =
a
X
i=k−a
ri 1
i!sk-i
1
(k −i)!; therefore, (r+s)N
N!
deﬁnes the ﬁrst a −1 element of −→
C .
Lemma 32. The translation of the global scalar 1 and the empty diagram
under J.KWX equal
in ZXf.
Proof.
1
J.KWX
7−→
1
K1
=
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
=
K1
2
2
(Ept)
J.KWX
←−[
Lemma 33. The translation of the following ZW diagrams under J.KWX equal in ZXf:
a
1
r
...
r ·
a
a
1
1
...
Proof.
a
1
r
...
J.KWX
7−→
. . .
rN √
N!m-1
a+1
a+1
a+1
m
K-1
a+1
√
N!
=
. . .
a+1
a+1
a+1
m
K-1
√
N!
√
N!
rN
=
. . .
a+1
a+1
m
K-1
√
N!
√
N!
r
K-1
K-1
a+1
a+1
2
(K0)
(S1)
(14)
J.KWX
←−[
r ·
a
a
1
1
...

B. Po´or, R. Shaikh, and Q. Wang
29
Lemma 34. For c ≥min(P ai, P bi), ℓij = min(ai, bj), the translation of the following ZW
diagrams under J.KWX equal in ZXf:
c
a1
an
b1
bm
...
...
ℓ1,1
a1
an
b1
ℓn,m
bm
...
...
Proof. This rule follows from Axiom (WW).
Lemma 35. The translation of the following ZW diagrams under J.KWX equal in ZXf:
a
b
b+1
. . .
a
b
.0
Proof.
a
b
b+1
. . .
J.KWX
7−→
√
N!
1
√
N!
1
√
N!
a+1
ab+a+1
a+1
. . .
√
N!b
b+1
a+1
b+1
=
1
√
N!
a+1
ab+a+1
−
→
0
a+1
b+1
=
a+1
√
N!
a+1
ab+a+1
a+1
. . .
1
√
N!
b+1
a+1
b+1
b+1
=
b+1
√
N!
b+1
b+1
ab+a+1
1
√
N!
√
N!
−
→
0
b+1
=
(HP)
(S1)
(S1)
(Mu)
(S1)
(K0)
(S1)
a+1
√
N!
J.KWX
←−[
a
b
.0
Lemma 36. For 0 < k ≤a, the translation of the following ZW diagrams under J.KWX equal in
ZXf:
b
c
a
...
k
k
a
c
.
b
1
1
...
k
k!
Proof.
b
c
a
...
k
k
J.KWX
7−→
1
√
N!
√
N!
K-k
b+1
a+1
√
N!
a+1
1
√
N!
1
√
N!
c+1
b+ck+1
c+1
. . .
√
N!k-1
k
c+1
=
1
√
N!
K-k
b+1
N!
a+1
b+ck+1
b+ck+1
c+1
1
√
N!
. . .
k
=
1
√
N!
K-k
b+1
b+ck+1
b+ck+1
c+1
1
√
N!
K-k
N!
a+1
k
=
1
√
N!
b+1
K-k b+ck+1
b+ck+1
c+1
1
√
N!
k!
k
(S1)
(K0)
(Mu)
(14)
(S4)
(S4)
K-1
2
(S1)

30
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
=
1
√
N!
b+1
K-1 b+ck+1
b+ck+1
c+1
1
√
N!
k
=
1
√
N!
K-1
b+1
b+ck+1
b+ck+1
c+1
1
√
N!
k
2
b+ck+1 =
1
√
N!
b+1
b+ck+1
b+ck+1
c+1
1
√
N!
k
k!N
b+ck+1
2
2
=
1
√
N!
K-1
b+1
b+ck+1
b+ck+1
1
√
N!
a+1
k!N
2
. . .
k
2
2
2
=
1
√
N!
K-1
b+1
c+2
k+1
c+1
1
√
N!
a+1
k!N
2
. . .
k
2
2
2
k!N
c+1
(PC)
(DA)
(S1)
(S4)
(K0)
(S2)
(Mu)
(S1)
(18)
(14)
k!N
K-1
k!N
K-1
(6)
(K0)
K-1
a+1
a+1
a+1
a+1
=
1
√
N!
K-1
b+1
c+2
k+1
c+1
1
√
N!
a+1
k!
2
. . .
k
2
k!N
k+1
2
=
1
√
N!
K-1
b+1
c+2
c+1
1
√
N!
a+1
←−
N!
2
D
2
k!N
c+1
k+1
c+1
k+1
=
1
√
N!
K-1
b+1
c+2
c+1
1
√
N!
a+1
N!
2
k!N
c+1
k+1
c+1
k+1
=
K-1
b+1
c+2
c+1
√
N!
a+1
1
√
N!
2
k!N
c+1
k+1
. . .
k
=
K-1
b+1
c+2
c+1
√
N!
1
√
N!
2
k!N
c+1
k+1
. . .
k
√
N!k-1
1
√
N!
1
√
N!
1
√
N!
2
2
√
N!
a+1
√
N!
a+1
(P1)
(P1)
(D1)
D
(S1)
(S1)
(S1)
(S1)
J.KWX
←−[
a
c
.
b
1
1
...
k
k!
Lemma 37. The translation of the following ZW diagrams under J.KWX equal in ZXf:
1
1
1
1
1

B. Po´or, R. Shaikh, and Q. Wang
31
Proof.
1
J.KWX
7−→
1
√
N!
2
=
1
√
N!
1
√
N!
√
N!
3
1
√
N!
K-1
2
√
N!
2
2
1
3
K-1
2
2
=
=
3
K-1
2
1
=
=
2
(S1)
(6)
(15)
D
3
2
3
K-1
1
(S4)
(D1)
3
2
1
(K2)
(S1)
J.KWX
←−[
1
1
1
1
Lemma 38. The translation of the following ZW diagrams under J.KWX equal in ZXf:
a1
b
c
a0
a1
b
a0
c
Proof. Let a = a0 + a1, then
a1
b
c
a0
J.KWX
7−→
a
a
c
a0
a1
a
1
√
N!
1
√
N!
√
N!
=
b
c
a0
a1
a
1
√
N!
1
√
N!
√
N!
b
=
c
a0
a1
a
1
√
N!
1
√
N!
√
N!
b
(S1)
(S1)
1
√
N!
1
√
N!
√
N!
a
a0
a1
1
√
N!
b
1
√
N!
1
√
N!
√
N!
a
a0
a1
c
=
√
N!
√
N!
a0
a1
a
b
√
N!
a
c
1
√
N!
1
√
N!
a0
a1
a
a
=
(B2)
(S1)
J.KWX
←−[
a1
b
a0
c
Lemma 39. The translation of the following ZW diagrams under J.KWX equal in ZXf:
b
a+b
a
b
a

32
ZX-calculus is Complete for Finite-Dimensional Hilbert Spaces
Proof. Let a = a0 + a1, then
b
a+b
a
J.KWX
7−→
1
√
N!
1
√
N!
a+1
b+1
√
N!
a+b+1
a+b+1
1
√
N!
1
√
N!
1
√
N!
a+1
b+1
a+b+1
=
1
√
N!
a+1
b+1
a+b+1
=
1
√
N!
a+b+1
1
√
N!
a+1
b+1
=
1
√
N!
(S1)
(B3)
(S1)
J.KWX
←−[
b
a
Lemma 40. The translation of the following ZW diagrams under J.KWX equal in ZXf:
a
1
a−1
a
1
a!
a...
Proof. For −→
C = (0, · · · , 0
|
{z
}
a+1
,
1
1!a!,
1
2!a!, · · · ,
1
(a−1)!a!),
a
J.KWX
7−→
1
√
N!
1
√
N!
√
N!
1
√
N!
a
a+1
a+1
2a
1
√
N!
1
√
N!
√
N!
2
a+1
2
. . .

1
a!
N √
N!a-2
a
=
√
N!
1
N!
a
a+1
2a
2
a+1
. . .
1
a!
a
=
√
N!
a
a+1
2a
a+1
a+1
1
a!
D
a+1
=
√
N!
a
a+1
2a
a+1
1
a!
=
=
1
√
N!
a+1
1
N!
1
N!
√
N!
a+1
2a
1
N! +−
→
C
(P1)
(S1)
(PA)
(S1)
(S1)
(D1)
a+1
(S1)
J.KWX
←−[
a−1
a
1
1
a!
a...
a
=
1
a−1
a
1
a!
a...
Note that we can derive the last equality of the ZW diagrams using Lemma 29.
Proposition 2. If ZWf ⊢D1 = D2 then ZXf ⊢JD1KWX = JD2KWX.
Proof. By the functoriality of J.KWX, we only need to show that all the rewrite rules of ZWf are
derivable in ZXf. The rewrite rules are given in Section 3.3, and the derivation of each axiom
is given in Lemmas 27 to 40.

