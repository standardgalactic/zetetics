DepsRAG: Towards Managing Software Dependencies using
Large Language Models
Mohannad Alhanahnah
mohannad@cs.wisc.edu
University of Wisconsin-Madison
USA
Yazan Boshmaf
yboshmaf@hbku.edu.qa
Qatar Computing Research Institute
Qatar
Benoit Baudry
benoit.baudry@umontreal.ca
University of Montreal
Canada
ABSTRACT
Managing software dependencies is a crucial maintenance task in
software development. It is becoming a rapidly growing research
field, especially in light of the significant increase in software supply
chain attacks. Specialized expertise and substantial developer effort
are required to fully comprehend dependencies and reveal hidden
properties (e.g., number of dependencies, dependency chains, depth
of dependencies). Recent advancements in Large Language Mod-
els (LLMs) allow the retrieval of information from various data
sources for response generation, thus providing a new opportunity
to uniquely manage software dependencies. To highlight the po-
tential of this technology, we present DepsRAG, a proof-of-concept
Retrieval Augmented Generation (RAG) approach that constructs
direct and transitive dependencies of software packages as a Knowl-
edge Graph (KG) in four popular software ecosystems. DepsRAG
can answer user questions about software dependencies by au-
tomatically generating necessary queries to retrieve information
from the KG, and then augmenting the input of LLMs with the
retrieved information. DepsRAG can also perform a Web search to
answer questions that the LLM cannot directly answer via the KG.
We identify tangible benefits that DepsRAG can offer and discuss
its limitations. 1
1
INTRODUCTION
Software development increasingly relies on code reuse, which
can be accomplished through software packages. Utilizing third-
party packages to build software can significantly improve quality
and productivity [21, 25]. These packages, dependencies, and their
maintainers have formed large software ecosystems [28]. Managing
dependencies between packages is an emerging and important
problem [7, 10, 14], especially since open-source and third-party
components have become widely adopted in software development.
This new trend highlights the importance of software supply chain
security, which is becoming more critical over time.
Today, developers are expected to manage their software de-
pendencies [19]. However, in a recent survey, developers reported
that they are not confident in their current dependency manage-
ment practices [29]. Although developers often have full control
over which dependency packages and versions to use, they have
no control over the dependencies of the packages used. Such tran-
sitive dependencies, which often amount to more than direct de-
pendencies, may have various vulnerabilities that put software
projects at risk. To mitigate these risks, we developed DepsRAG
to support practitioners and software developers understand the
dependencies in their software supply chain. DepsRAG facilitates
constructing and analyzing software dependencies for four popular
1DepsRAG implementation available: https://github.com/Mohannadcse/DepsRAG.
software ecosystems. It also answers key questions about the de-
pendency graph, including the number of dependencies, the depth
of the dependency graph, and the number of paths/chains. The use
of LLM enables DepsRAG to autonomously generate queries for
KGs, unlike prior methods demanding hardcoded or user-generated
queries [13, 23, 32], thereby enhancing scalability. This retrieved
information enhances the user‚Äôs question, referred to as Retrieval
Augmented Generation (RAG), enabling accurate LLM responses.
DepsRAG works in two phases. In the first phase, the user provides
the name and ecosystem of the project. Then it transitively con-
structs the dependencies as a KG. In the second phase, the user can
chat with DepsRAG to answer questions about the dependencies.
DepsRAG is equipped with several tools to facilitate its function-
ality to access the KG, automatically generate queries, search the
Web, and visualize the dependency graph.
2
BACKGROUND
2.1
Dependency Graphs
Dependency graphs are a fundamental concept in software engi-
neering and are used to represent dependencies among various
entities of a software system. These entities can be classes, func-
tions, modules, packages, or even larger components. Each node in
the graph represents an entity, and each directed edge between two
nodes indicates that one entity depends on another. This means
that changes in one entity can affect the other.
Litzenberger et al. [23] proposed a framework the defines three
levels of granularity for dependency representation: package-to-
package, artifact-to-package, and artifact-to-artifact. D√ºsing and
Hermann [15] constructed a dependency graph at the artifact-to-
package level and leveraged these graphs to investigate the propaga-
tion of vulnerabilities in different software repositories. Benelallam
et al. [9] constructed the Maven Dependency Graph to answer
high-level research questions about artifact releases, evolution, and
usage trends over time. Dependency graphs have also been used to
build tools for program understanding [16, 26].
2.2
Knowledge Graphs (KGs)
Knowledge graphs (KGs) organize information in a structured for-
mat, capturing relationships between real-world entities and mak-
ing them comprehensible to humans and machines [6]. In a KG, data
are organized as triplets (head entity, relation, tail entity), where
the relation is the relationship between these two entities, such as
("Steven Jobs", "owns", "Apple"). More formally, KGs store structured
knowledge as a collection of triples KG = {(ùëíùëñ,ùëü,ùëíùëó) ‚äÜE √ó R √ó E},
where E and R denote the set of entities and relations, respectively.
KGs are created by describing entities and entity relationships,
known as graph schema. KGs are useful for a variety of applica-
tions, such as question-answering [18], information retrieval [30],
arXiv:2405.20455v2  [cs.SE]  3 Jun 2024

, ,
Mohannad Alhanahnah, Yazan Boshmaf, and Benoit Baudry
Web Search 
Retriever 
Knowledge Graph 
Retriever 
LLM
Figure 1: DepsRAG high-level architecture
recommender systems [34], cybersecurity [5, 32], and natural lan-
guage processing [33].
2.3
Retrieval-Augmented Generation (RAG)
RAG [17, 20] augments the input questions for LLMs with infor-
mation retrieved from documents, knowledge graphs, or vector
databases, and is considered a useful method for addressing LLM
hallucinations. As such, RAG provides extra knowledge sources
for LLMs and greatly improves their performance in a variety of
tasks, especially in the knowledge-intensive ones. RAG applications
leverage tools and function calls to perform their job. This feature
is introduced by LLM multi-agent frameworks (i.e., LangChain [12]
and Langroid [4]) and recent versions of OpenAI models.2 This
feature enables users to provide function descriptions to the LLM.
The LLM responds with a structured response, such as a JSON file
containing the required arguments to invoke any available func-
tions. These functions serve as action executors and provide the
option to supply APIs that the LLM can query to obtain essential
information for responding to users. For example, when a user
asks about the current weather in a specific city and provides the
LLM with a weather API call description, the LLM can augment its
response with information retrieved from the API. This facilitates
a seamless and efficient interaction between the user and the LLM
and provides rich responses that avoid hallucinations.
3
APPROACH
DepsRAG consists of two retrievers whose responses augment the
prompt with additional information, as illustrated in Figure 1.
‚Ä¢ KG Retriever. This component retrieves information from the
KG. It translates the user‚Äôs question in natural language to the
query language used by the KG, executes the query, and sends
back the response to DepsRAG. This component is equipped
with two tools to perform these tasks: GraphSchemaTool and
CypherQueryTool. The former tool provides the KG schema to
DepsRAG, which is needed to generate the query with the right
entity names and relationships. The other tool receives the query
generated by the LLM, executes it, and returns the response.
‚Ä¢ Web Search Retriever. This component acts as a failover mech-
anism and answers when no answer is obtained from the KG. It
also provides answers beyond the scope of the KG. For exam-
ple, the user could ask DepsRAG if one of the packages in the
dependency KG is vulnerable. This component leverages Web-
SearchTool to perform a Web search and retrieve top-3 results,
and then the LLM can extract the most relevant results.
Figure 3 outlines the prompt used by DepsRAG. This prompt con-
sists of three parts. R defines the role of DepsRAG. p1 and p2
describe the instructions for the two phases of DepsRAG:
2https://platform.openai.com/docs/guides/text-generation/function-calling
‚Ä¢ p1 Dependency KG Construction. The user provides the
name of the package, the version, and the ecosystem, and then
DepsRAG constructs the dependency graph following the graph
schema illustrated in Figure 2. According to this schema, the
nodes in the KG belong to the entity Package, which has only
two properties, the package name and version. For entity re-
lationships, there is only one relation depends_on. DepsRAG
leverages ConstructKGTool for constructing the KG. Suppose the
user did not provide the version and ecosystem of the package.
In this case, DepsRAG triggers the Web Search Retriever to find
the version and ecosystem based on the provided package name.
Figure 3 illustrates the workflow of this phase to construct the
dependency graph of the OpenAI package in the PyPI ecosystem.
‚Ä¢ p2 QA Chatting. After constructing the dependency KG for the
provided package name, the user can ask any questions about the
KG. In this phase, the KG Retriever and Web Search Retriever are
employed to augment user questions with additional information.
Figure 3 illustrates the workflow of this phase.
Figure 3: DepsRAG Instructions
R Define LLM Role: You are an expert in software
dependency graphs and analyzing them using Neo4j.
p1 Phase-1 Task Instructions: FIRST, I‚Äôll give you the
name of the package that I want to analyze.
THEN, you can use the "WebSearchTool" to find out in-
formation about a package, such as version number and
package type (PyPI, NPM, Cargo, or GO). If you cannot
get this information, ask me and I can tell you.
DON‚ÄôT forget to include the package name in your ques-
tions. After receiving this information, ensure to get the
package version type. THEN ask the user if they want to
construct the dependency graph, and if so, use "Construc-
tKGTool" to construct the dependency graph. Otherwise,
say "Could not retrieve package type or version" and
NO_ANSWER.
p2 Phase-2 Task Instructions: After constructing
the dependency graph successfully, you will have ac-
cess to the Neo4j graph database, which contains the
dependency graph. You will try your best to answer my
questions. Note that:
1. You can use "GraphSchemaTool" to get node labels and
relationships in the dependency graph.
2. You can use "CypherQueryTool" to get relevant in-
formation from the graph database. I will execute this
query and send you the result. Make sure your queries
comply with the database schema.
3. Use the "WebSearchTool" to get information if needed.
4. To show the dependency graph, use "VisualizeKGTool".
Finally, we equipped DepsRAG with utility tools, such as Visual-
izeKGTool, which is used to visualize the KG. Table 1 summarizes
the tools used by DepsRAG.

DepsRAG: Towards Managing Software Dependencies using Large Language Models
, ,
Package
depends_on
Version
Name
Figure 2: Dependency KG Schema consisting of a single entity
with two attributes, name and version, and one relation.
Should I construct the dependency 
graph for openai, pypi package, version 
1.25.1?
LLM
Retrieved 
Knowledge 
[Tools] WebSearchTool: 
{"query":"openai PyPI package version", 
"num_results":1}
Augmented
Prompt
Please provide me with the name of 
the package you want to analyze?
LLM
User 
Openai, PyPI
Web
Link: https://pypi.org/project/openai/
Summary: Please try enabling it if you encounter problems. Search 
PyPI Search Help Sponsors Log in Register Menu Help Sponsors Log  
in Register Search PyPI Search openai 1.25.1 pip install openai
Figure 3: Phase-1 of DepsRAG in action.
Answer: The depth of the OpenAI dependency 
graph is 3. This means that the longest chain of 
dependencies from the OpenAI package to its 
furthest dependency is three levels deep.
LLM
User What‚Äôs the depth of Openai
dependency graph?
Retrieved 
Knowledge 
[Tools]1- Run GraphSchemaTool:{}
2- Run CypherQueryTool:
{"cypher_query":"MATCH p=(:Package {name: 'openai', 
version: ‚Äò1.25.1'})-[:DEPENDS_ON*]->() RETURN 
MAX(length(p)) AS depth"}
Augmented
Prompt
KG
Figure 4: Phase-2 of DepsRAG in action.
Table 1: Summary of tools used by DepsRAG.
Tool Name
Retriever
Purpose
GraphSchemaTool
KG
Obtain the KG schema
CypherQueryTool
KG
Receive the generated query, execute it,
and return the query result
WebSearchTool
Web Search
Perform Web search, receive top-3 results,
and return the most relevant
ConstructKGTool
N/A
Construct the KG
VisualizeKGTool
N/A
Visualize the KG
Table 2: Characteristics of the selected LLMs
Model
Version
Cut-off
Context Window
(Tokens)
Input Cost
per 1M tokens
Output Cost
per 1M tokens
GPT-4 Turbo
1106-preview
Apr 2023
128k
$10
$30
Llama-3
70b-instruct
Dec 2023
8k
N/A
N/A
4
PROOF-OF-CONCEPT
This section describes the implementation and workflow of Dep-
sRAG. We also discuss its capabilities, such as planning and multi-
step tasks.
4.1
Implementation
We implemented DepsRAG in Python using Langroid [4], which is a
framework that supports the development of multi-agent LLMs and
enables seamless integration with various LLMs. Moreover, Lan-
groid can orchestrate the interaction between LLMs and tools, and
contains built-in tools that facilitate the development of RAG appli-
cations, such as performing Web search and accessing Neo4j [2], a
graph database with a declarative query language called Cypher.
To obtain the dependencies for the provided project and con-
struct the dependency KG, we used Deps.Dev API,3 a service de-
veloped and hosted by Google to help developers understand the
structure and security of open-source software packages. This ser-
vice was used in previous work [22, 27] to characterize and analyze
dependencies. It repeatedly examines websites, such as GitHub and
PyPI, to find up-to-date information about open-source software
packages, thus generating a comprehensive list of direct and transi-
tive dependencies that are constantly updated. DepsRAG receives a
JSON response from the Deps.Dev API that contains a list of depen-
dencies of the provided package. Then ConstructKGTool propagates
the data in the JSON data to build the dependency KG. We have
chosen two representative models to test DepsRAG, summarized
in Table 2. Both are pre-trained LLMs. GPT-4 Turbo represents a
proprietary LLM, whereas Llama-3 is an open-source model.
4.2
Capabilities Evaluation
‚Ä¢ Software Ecosystems Support. DepsRAG supports the con-
struction of dependency graphs for four software ecosystems:
PyPI, NPM, Cargo, and Go. Figure 5 illustrates the dependency
graphs of the TensorFlow package in three ecosystems.
‚Ä¢ Cypher Query Generation. The performance of the KG Re-
triever depends on the model‚Äôs capability to translate a user
query from the natural language to Cypher queries. We eval-
uated the two models used by DepsRAG to answer questions
about important properties of graphs (i.e., depth, diameter, and
transitivity). We found that both models generate correct Cypher
queries, but not every time. To mitigate this situation, we instruct
the LLMs to obtain the schema before generating the query and
send the error message to the LLM to retry again. Table 3 (3rd
column) indicates that Llama-3 failed to generate correct Cypher
queries from the first trial for two questions. It made a single
attempt to generate the query for the first question and had
two attempts for the second question. While GPT-4-Turbo suc-
cessfully produced accurate Cypher queries for all questions.
Nonetheless, further analysis is necessary to assess this matter.
3https://deps.dev

, ,
Mohannad Alhanahnah, Yazan Boshmaf, and Benoit Baudry
TensorFlow-PyPI
TensorFlow-NPM
TensorFlow-Rust
Figure 5: Dependency graphs generated by DepsRAG for TensorFlow across 3 ecosystems (PyPI, NPM, and Rust). Versions
2.16.1, 0.7.0, and 0.21.0, respectively.
‚Ä¢ Task Planning and Decomposition. This is vital for breaking
tasks into manageable sub-queries because LLMs often struggle
with multi-step reasoning. To evaluate this aspect, we initially
asked both models: ‚Äútell me two interesting things about the
dependency graph.‚Äù Both demonstrated the capability to gener-
ate multiple Cypher queries, receive the answers and provide a
complete answer. Table 3 provides examples for user questions
and the corresponding Cypher queries, along with the responses
generated by the considered model. The last question provides an
additional example to demonstrate the capability of DepsRAG
to perform task planning. The computation of graph density
involves breaking this task into two steps: (1) retrieving the num-
ber of nodes (N) and edges (E) and (2) calculating the density
according to this formula
ùê∏
ùëÅ(ùëÅ‚àí1) , since the KG is a directed
graph. Llama-3 performed both steps but failed to give a correct
answer as it assumed that the KG is an undirected graph and
applied the incorrect formula.
Table 3: Analysis of dependency graph characteristics
Question
#
of
Steps
Query
Trials
Model
Correct
Response
What is the depth of the graph?
1
0
GPT-4-Turbo
Yes
1
1
Llama-3
Yes
Are there cycles in the graph?
1
0
GPT-4-Turbo
Yes
1
0
Llama-3
Yes
How many path chains are in the graph?
1
0
GPT-4-Turbo
Yes
1
2
Llama-3
No
What is the density of the graph?
2
0
GPT-4-Turbo
Yes
2
0
Llama-3
No
5
RELATED WORK
Bommarito et al. [11] analyzed PyPI, including both package meta-
data and package source, covering software dependencies, authors,
licenses, and other summary information over time. Musco et
al. [26] constructed dependency graphs for Java programs at the
class level to understand commonalities between different Java
projects. In contrast, DepsRAG supports four software ecosystems
and constructs dependency graphs at the package level.
Litzenberger et al. [23] proposed a unified data model to imple-
ment and construct dependency graphs for arbitrary repositories,
thus facilitating the comparison of dependency graphs between
different repositories. In their implementation, the data model is
based on Neo4j, which makes is compliant with DepsRAG‚Äôs KG
schema. Maninger et al. [24] proposed a visionary approach involv-
ing KGs to create a trustworthy AI software development assistant.
Specifically, KGs can enable LLMs to correctly and appropriately
explain the generated code. To our knowledge, we are the first to
investigate the ability of LLMs to generate KGs for software depen-
dencies, and utilize these graphs to aid in responding to queries
concerning the dependency structure.
6
CONCLUSION AND FUTURE WORK
We presented the first steps toward automatically generating KGs
for software dependencies in four software ecosystems. There are
several directions in which we plan to continue exploring this topic:
‚Ä¢ Extending Dependencies. The current KG is constructed based
on Deps.Dev API that suffers from some limitations. For example,
Python allows defining optional dependencies, indicating these
dependencies will not be installed by default. However, Deps.Dev
API does not capture these optional dependencies. This lack of
support can lead to serious challenges and conflicts after up-
dating packages that depend on optional packages. Therefore,
retrieving dependencies from code and other dependency con-
figuration files, such as ‚Äúpyproject.toml,‚Äù is crucial. Moreover,
certain software ecosystems may incorporate dependencies orig-
inating from different ecosystems. Previous studies have demon-
strated the widespread utilization of C libraries within Python
and NPM projects [31]. Consequently, the dependency KG can
be expanded to encompass these relationships, distinguishing
between inter-ecosystem and intra-ecosystem dependencies.
‚Ä¢ Generating Software Bill of Materials (SBOM). The gener-
ated dependency graph encompasses both direct and transitive
dependencies, enhancing the suitability of DepsRAG for SBOM
generation and delivering metadata like path chains (i.e., depen-
dency hierarchy [8]), as opposed to presenting a flat list of depen-
dencies. SBOM format specifications, such as CycloneDX [1], are
designed to accommodate this form of structured data. The hier-
archical structure of the dependencies upheld by DepsRAG is in
accordance with the minimum SBOM requirements prescribed by
the US National Telecommunications and Information Adminis-
tration (NTIA). DepsRAG exceeds these regulatory requirements,
which require disclosure of primary dependencies (first-level)
and all ensuing transitive dependencies (second-level) [3], by
documenting the complete chain of dependencies. The gener-
ation of SBOM will enable DepsRAG to support vulnerability

DepsRAG: Towards Managing Software Dependencies using Large Language Models
, ,
management, which requires designing a dedicated retrieval to
access different sources of vulnerability databases.
‚Ä¢ Dependency Resolution. Updating dependencies is cumber-
some and can introduce incompatibilities that break the applica-
tion [13]. DepsRAG maintains knowledge about all dependencies
within the application, thus qualifying it to provide recommen-
dations that suggest non-vulnerable package versions and will
not lead to compatibility issues.
REFERENCES
[1] [n. d.]. CycloneDX/specification. https://github.com/CycloneDX/specification.
[Accessed 10-05-2024].
[2] [n. d.]. Neo4j Graph Database ‚Äî neo4j.com. https://neo4j.com/product/neo4j-
graph-database/. [Accessed 06-05-2024].
[3] [n. d.]. ntia.doc.gov. https://www.ntia.doc.gov/files/ntia/publications/sbom_
minimum_elements_report.pdf. [Accessed 13-05-2024].
[4] 2024. Langroid. https://github.com/langroid/langroid Accessed: 2024-02-27.
[5] Garima Agrawal. 2023. AISecKG: Knowledge Graph Dataset for Cybersecurity
Education. AAAI-MAKE 2023: Challenges Requiring the Combination of Machine
Learning 2023 (2023).
[6] Garima Agrawal, Tharindu Kumarage, Zeyad Alghami, and Huan Liu. 2023. Can
knowledge graphs reduce hallucinations in LLMs?: A survey. arXiv preprint
arXiv:2311.07914 (2023).
[7] Cyrille Artho, Kuniyasu Suzaki, Roberto Di Cosmo, Ralf Treinen, and Stefano
Zacchiroli. 2012. Why do software packages conflict?. In 2012 9th IEEE Working
Conference on Mining Software Repositories (MSR). IEEE, 141‚Äì150.
[8] Musard Balliu, Benoit Baudry, Sofia Bobadilla, Mathias Ekstedt, Martin Monper-
rus, Javier Ron, Aman Sharma, Gabriel Skoglund, C√©sar Soto-Valero, and Martin
Wittlinger. 2023. Challenges of producing software bill of materials for java. IEEE
Security & Privacy (2023).
[9] Amine Benelallam, Nicolas Harrand, C√©sar Soto-Valero, Benoit Baudry, and
Olivier Barais. 2019. The maven dependency graph: a temporal graph-based
representation of maven central. In Proceedings of the 16th International Conference
on Mining Software Repositories (Montreal, Quebec, Canada) (MSR ‚Äô19). IEEE Press,
344‚Äì348. https://doi.org/10.1109/MSR.2019.00060
[10] Christopher Bogart, Christian K√§stner, James Herbsleb, and Ferdian Thung. 2016.
How to break an API: cost negotiation and community values in three software
ecosystems. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium
on Foundations of Software Engineering. 109‚Äì120.
[11] Ethan Bommarito and Michael Bommarito. 2019. An Empirical Analysis of the
Python Package Index (PyPI). arXiv:1907.11073 [cs.SE]
[12] Harrison Chase. 2022. LangChain. https://github.com/langchain-ai/langchain
Accessed: 2024-02-27.
[13] Andreas Dann, Ben Hermann, and Eric Bodden. 2023. UPCY: Safely Updating
Outdated Dependencies. In 2023 IEEE/ACM 45th International Conference on
Software Engineering (ICSE). IEEE, 233‚Äì244.
[14] Alexandre Decan, Tom Mens, and Philippe Grosjean. 2019. An empirical compar-
ison of dependency network evolution in seven software packaging ecosystems.
Empirical Software Engineering 24, 1 (2019), 381‚Äì416.
[15] Johannes D√ºsing and Ben Hermann. 2022. Analyzing the Direct and Transitive
Impact of Vulnerabilities onto Different Artifact Repositories. Digital Threats 3,
4, Article 38 (feb 2022), 25 pages. https://doi.org/10.1145/3472811
[16] Raimar Falke, Raimund Klein, Rainer Koschke, and Jochen Quante. 2005. The
dominance tree in visualizing software dependencies. In 3rd IEEE International
Workshop on Visualizing Software for Understanding and Analysis. IEEE, 1‚Äì6.
[17] Kelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Mingwei Chang. 2020.
Retrieval augmented language model pre-training. In International conference on
machine learning. PMLR, 3929‚Äì3938.
[18] Yanchao Hao, Yuanzhe Zhang, Kang Liu, Shizhu He, Zhanyi Liu, Hua Wu, and
Jun Zhao. 2017. An end-to-end model for question answering over knowledge
base with cross-attention combining global knowledge. In Proceedings of the 55th
Annual Meeting of the Association for Computational Linguistics (Volume 1: Long
Papers). 221‚Äì231.
[19] Raula Gaikovina Kula, Daniel M German, Ali Ouni, Takashi Ishio, and Katsuro
Inoue. 2018. Do developers update their library dependencies? An empirical study
on the impact of security advisories on library migration. Empirical Software
Engineering 23 (2018), 384‚Äì417.
[20] Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin,
Naman Goyal, Heinrich K√ºttler, Mike Lewis, Wen-tau Yih, Tim Rockt√§schel,
et al. 2020. Retrieval-augmented generation for knowledge-intensive nlp tasks.
Advances in Neural Information Processing Systems 33 (2020), 9459‚Äì9474.
[21] Wayne C Lim. 1994. Effects of reuse on quality, productivity, and economics.
IEEE software 11, 5 (1994), 23‚Äì30.
[22] Elizabeth Lin, Igibek Koishybayev, Trevor Dunlap, William Enck, and Alexandros
Kapravelos. 2024. UntrustIDE: Exploiting Weaknesses in VS Code Extensions.
(2024).
[23] Tobias Litzenberger, Johannes D√ºsing, and Ben Hermann. 2023. DGMF: Fast Gen-
eration of Comparable, Updatable Dependency Graphs for Software Repositories.
In 2023 IEEE/ACM 20th International Conference on Mining Software Repositories
(MSR). 115‚Äì119. https://doi.org/10.1109/MSR59073.2023.00028
[24] Daniel Maninger, Krishna Narasimhan, and Mira Mezini. 2023. Towards Trust-
worthy AI Software Development Assistance. arXiv preprint arXiv:2312.09126
(2023).
[25] Parastoo Mohagheghi, Reidar Conradi, Ole M Killi, and Henrik Schwarz. 2004. An
empirical study of software reuse vs. defect-density and stability. In Proceedings.
26th International Conference on Software Engineering. IEEE, 282‚Äì291.
[26] Vincenzo Musco, Martin Monperrus, and Philippe Preux. 2017. A Generative
Model of Software Dependency Graphs to Better Understand Software Evolution.
arXiv:1410.7921 [cs.SE]
[27] Imranur Rahman, Nusrat Zahan, Stephen Magill, William Enck, and Laurie
Williams. 2024. Characterizing Dependency Update Practice of NPM, PyPI and
Cargo Packages. arXiv preprint arXiv:2403.17382 (2024).
[28] Sonatype. 2021. https://www.sonatype.com/hubfs/SSSC-Report-2021_0913_PM_
2.pdf?hsLang=en-us. [Accessed 24-04-2024].
[29] Tidelift. [n. d.]. 2022 open source supply chain survey | Tidelift ‚Äî tidelift.com.
https://tidelift.com/2022-open-source-software-supply-chain-survey. [Accessed
24-04-2024].
[30] Chenyan Xiong, Russell Power, and Jamie Callan. 2017. Explicit semantic ranking
for academic search via knowledge graph embedding. In Proceedings of the 26th
international conference on world wide web. 1271‚Äì1279.
[31] Meiqiu Xu, Ying Wang, Shing-Chi Cheung, Hai Yu, and Zhiliang Zhu. 2022.
Insight: Exploring Cross-Ecosystem Vulnerability Impacts. In Proceedings of the
37th IEEE/ACM International Conference on Automated Software Engineering. 1‚Äì
13.
[32] Fabian Yamaguchi, Nico Golde, Daniel Arp, and Konrad Rieck. 2014. Modeling and
discovering vulnerabilities with code property graphs. In 2014 IEEE symposium
on security and privacy. IEEE, 590‚Äì604.
[33] Bishan Yang and Tom Mitchell. 2017. Leveraging Knowledge Bases in LSTMs
for Improving Machine Reading. In Proceedings of the 55th Annual Meeting of the
Association for Computational Linguistics (Volume 1: Long Papers). 1436‚Äì1446.
[34] Fuzheng Zhang, Nicholas Jing Yuan, Defu Lian, Xing Xie, and Wei-Ying Ma.
2016. Collaborative knowledge base embedding for recommender systems. In
Proceedings of the 22nd ACM SIGKDD international conference on knowledge
discovery and data mining. 353‚Äì362.

