25
The descendants of Centaur:
a personal view on Gilles Kahn’s work
Emmanuel Ledinot
Dassault Aviation
Abstract
This paper is an overview of 15 years of collaboration between R&D
teams at Dassault Aviation and several research projects at INRIA. This
collaboration was related to Gilles Kahn’s work on generic programming
environments, program transformation, and user interfaces for proof
assistants.
It is also an evocation of personal memories about Gilles, my
perception of the impact of the research he carried out and supervised,
and his dedication to INRIA.
25.1 Introduction
Since 1990, Dassault Aviation has been working on some formal methods
and programming tools developed at INRIA by Gilles’ research group
(CROAP) or by other groups led by scientists close to him such as G´erard
Berry and G´erard Huet.
Formal methods, more speciﬁcally the synchronous languages Esterel
and Lustre or the proof assistant Coq, have been evaluated and
introduced in our engineering processes to enhance our development
tools for safety critical software, especially software embedded in ﬂight
control systems.
As for the programming tools developed by CROAP with the
generative environment Centaur [3], it happened that in 1995 some of its
language-speciﬁc instantiations were targeting scientiﬁc computation.
More precisely, they were designed to assist some classical transfor-
mations of large Fortran codes (ports, parallelization, diﬀerentiation).
Since Dassault Aviation has always developed its computational ﬂuid
From Semantics to Computer Science Essays in Honour of Gilles Kahn,
eds Yves
Bertot, G´erard Huet, Jean-Jacques L´evy and Gordon Plotkin. Published by Cambridge
University Press.
c
⃝Cambridge University Press 2009.
547
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

548
E. Ledinot
dynamics (CFD) codes in-house, there was some motivation in our
company to experiment tools that claim to partially automate some
time consuming tasks done manually at that time.
I ﬁrst met Gilles Kahn at INRIA Sophia-Antipolis in 1991, a year or
two after I had started a collaboration with G´erard Berry on the Esterel
programming language and related veriﬁcation tools. Georges Gonthier
was completing his PhD thesis on the semantics of Esterel V3, which
was then implemented into a compiler by Frederic Boussinot and a few
colleagues of his. In the meantime Yves Bertot was instantiating the
generative programming environment Centaur on the Esterel language.
Two years later, in 1994, I met Gilles again while building-up a 3-year
research program between INRIA, Dassault Aviation and Aerospatiale
(which later became EADS), that was initiated and funded by the French
Ministry of Research.
Gilles shaped this research program, named GENIE,1 with Pierre
Bohn who was then my director and had been in the late 1970s and
early 1980s the originator of the ﬁrst versions of the 3D CAD software
CATIA, now the world leader in the ﬁeld.
He took the opportunity of this research contract to have Dassault
Aviation evaluate Foresys, Partita and Odyss´ee. Although our CFD
experts had been collaborating for years with researchers at INRIA,
especially with Alain Dervieux’s group, these tools were unknown to
them at that time. Gilles was eager to know what we would think of his
promising youngsters.
He also promoted to me CtCoq, as I was leader of the work package
named “design of safety critical software”. Puzzled by the “correct by
construction” programming paradigm, implemented as extraction of
Caml programs from correctness proofs in the Calculus of Inductive
Constructions [10], I had started 3 years before an evaluation of the
Coq proof assistant [9, 1] developed by G´erard Huet’s project at INRIA
Rocquencourt. Gilles was still leading CROAP and supervising the
development of a Centaur-generated graphical user interface to the Coq
system.
As an early industrial user of the Coq system since 1992, I was for
Gilles a good candidate to assess the added-value of the CtCoq front-end.
1 In French it stands for GEn´eration Nouvelle d’Ing´enieriE, which means New
Generation Engineering
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

The descendants of Centaur
549
I then met him again on several occasions as he was INRIA’s Chief
Scientist Oﬃcer and I had been appointed as a member of INRIA’s
Evaluation Board.
When Gilles became INRIA’s President after Bernard Larrouturou’s
assignment to French National Scientiﬁc Research Center (CNRS), he
invited me to join INRIA and become a member of his directorship. It
didn’t happen, but he explained to me on this occasion how he envisioned
the role of INRIA to foster innovation and enterprise creation in France.
As a tribute to him I would like to review these contacts, discussions
and memories, and give my perception of Gilles’ contribution to research
and INRIA. I will focus on industrial relevance and technology transfer.
25.2 Centaur: a generative programming environment
While we visited G´erard Berry at INRIA Sophia in 1990, I remember
Gilles having organized a demo of Centaur and commenting with some
tempered excitement the TYPOL machinery executing the rules of
Esterel’s small step semantics. A Prolog engine executed the semantic
rules, especially that of Georges Gonthier’s potential calculus, and the
backtracking mechanism elegantly performed the backward stepping of
the generated graphical debugger. Gilles then whispered, as some sort
of satisfaction and weariness sigh: “all that time to do that!”.
During the same demo, switching to a mini-ML instantiation of
Centaur, I was also favourably impressed by Centaur’s interactive
highlighting feature wired to the structural translation rules. After a
click on a mini-ML source level instruction the generated Categorical
Abstract Machine (CAM) instructions were highlighted in the target
code window. Conversely, when clicking on a CAM object instruction,
the originating ML instruction was highlighted in the source code
window.
I found it truly impressive that all these functionalities were deﬁned
once and for all at a meta level, for any programming language
whose syntax was deﬁnable in METAL and whose semantics could be
axiomatized in TYPOL.
That was the up side. The down side seemed to me two-fold : some lack
of reliability, probably due to the complexity of the meta-machinery, and
an excessive learning curve to use it, that could be summed-up by the
sarcasm I heard once in a conference from a fellow to whom I explained
that I was using a Centaur-generated environment: “Hum. . . Centaur!”
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

550
E. Ledinot
he said, “the tool you have ﬁve languages to learn ﬁrst before doing
anything with it. . . ”
To my knowledge, Centaur as a meta-programming environment had
no industrial impact. All the features it exempliﬁed turned out to be
available in commercial or open source programming environments.
But can we state that research on language-independent programming
environments preceded and inﬂuenced publishers of CASE tools such as
Borland, Microsoft, etc.? For parsing and other syntax-related function-
alities the meta-level generative approach was adopted, but for semantic
related functionalities such as type checking, interpreting, translating
and debugging, I’m dubious about a meta-level factoring in CASE
product lines. . .
In real life, compilation has to be optimized and the translation rules
can’t be purely structural, or syntax driven, as TYPOL rules. Graph-
based algorithms are needed.
But as advocated in the following sections, in spite of its lack of
industrial outcome, Centaur happened to have successful descendants.
By descendants I mean software engineering tools that reused algorithms,
principles, or components of Centaur.
Centaur was a sort of chimera with a Prolog head and a Le Lisp body,
that was successful in federating the CROAP team led by Gilles for about
15 years. By the time Gilles handed over the project to Yves Bertot,
in 1993, Ilog decided to no longer support Le Lisp. Centaur’s decline
started looming then. It was progressively abandoned by its former
developers although it still helped support some research activities until
2000–2001.
25.3 Foresys and Partita : re-engineering of Fortran code
Foresys and Partita are two re-engineering tools, which were designed
to assist the transformation of large Fortran codes, like those developed
in CFD, meteorology or nuclear physics.
They were distributed by two INRIA start-up companies, Connexit´e
and Simulog, that no longer exist. A total of 150 Foresys licences were
sold from 1995 to 2003, mainly to big French companies and research
centers.
The core of Foresys was generated by Centaur after instantiation
on two versions of Fortran: Fortran 77 and Fortran 90. Complemented
with static analysis algorithms (data-ﬂow analysis) and rewriting rules,
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

The descendants of Centaur
551
Foresys was a tool designed to help the port of large codes from Fortran
77 to Fortran 90.
Partita was an additional module of Foresys to help parallelize
sequential codes for vector and SPMD-parallel machines.
Partita analysed the data-ﬂow dependencies of the code to be
parallelized, and proposed transformation rules consistent with the
computed dependencies and the targeted machine.
About 50 licences of Partita were sold, which is a reasonable success
considering the niche market addressed by such a tool.
What did Foresys and Partita reuse from Centaur? What was the
added-value of the generative approach compared to developing the tools
from scratch?
Foresys’ and Partita’s front-end and back-end modules were generated
respectively by the METAL and PPML machineries of Centaur. The
representation of programs resorted to the Virtual Tree Processor (VTP)
but tree-based only analysis and transformation of programs turned
out to be insuﬃcient. Classical graph-based algorithms [4] had to be
implemented as “external” Le Lisp functions. The GUIs of both software
were also derived from Centaur’s.
In the end, the generative approach truly sped up the development,
and the ﬁrst versions of the two products were developed very quickly,
but seemingly to the expense of robustness, as acknowledged by one of
their main developers.
25.4 CtCoq: Proof by pointing
This next example of a tool derived from an instantiation of Centaur
had no industrial impact, since unlike Foresys and Partita, CtCoq was
never industrialized nor commercially distributed.
Although one may say that CtCoq never gained a signiﬁcant
acceptance in the theorem-proving community, even among ’Coqers’
[1], it seems to me that Gilles and his colleagues at INRIA were the
ﬁrst to exemplify how sophisticated theorem provers could beneﬁt from
sophisticated graphical user-interfaces [7].
Relying on the VTP generic machinery of Centaur, which provided the
means to maintain active relations between annotated trees, a sophis-
ticated click-triggered mechanism was designed to synthesize Coq proof
script commands from selection of formulas or sub-formulas in the active
context (i.e the current goal and the displayed hypotheses).
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

552
E. Ledinot
When the mouse-click selected a deep sub-formula in the context,
tens of lines of tedious commands might be generated at once so that
the selected sub-formula or the goal appeared in the appropriate way
to carry out the next user-signiﬁcant step of the proof. It was especially
useful when the formula to be proven contained many nested logical
connectors and quantiﬁers. It spared the user boring sequences of
elimination commands. Elimination of existential quantiﬁers needed a
non-trivial meta-variable mechanism, handled by Coq, but that had to
be mirrored in CtCoq’s variable binding mechanism.
CtCoq’s innovative “proof by pointing” feature [8] was all but
sugar-coating of Coq’s vernacular editing windows. It provided real
productivity leverage on proof-script editing by comparison with the
ﬁrst generation of Coq graphical user interfaces, such as the one
developed by Amy Felty in 1991 for instance.
CtCoq also supported useful mathematical notations. Provided you
get trained to programming in Centaur’s PPML language, you could
deﬁne your own mathematical notations to pretty-print Coq terms.
Display of formulas was far from LaTeX formatting and was limited to
read mode, but it provided a ﬁrst signiﬁcant comfort increase.
Limited but interesting “rewrite by pointing” functionalities were also
prototyped by Yves Bertot in CtCoq during GENIE.
I remember a discussion with Gilles about some issue regarding
CtCoq’s ergonomics. He was constantly looking for even higher unifying
concepts that could underpin the design of CtCoq mouse-clicks or
keystrokes. He explained to me, for instance, that I could see any term
displayed by CtCoq as a generalized menu, and that it was a powerful
way of viewing some key aspect of CtCoq’s user-friendliness.
I must confess this higher order unifying concept of asymptotic
ergonomics left me a bit sceptical, especially considering some irritating
diﬀerences2 between a few basic CtCoq keystroke bindings and their
equivalent in Emacs, or the time it took CROAP to add to CtCoq the
capability of editing comments in vernacular ﬁles. I felt how diﬀerent is
the perception of “value” and development priorities in academia and
in industry.
In the end, in spite of the fact that CtCoq gained few aﬁcionados,
proof by pointing was implemented in a signiﬁcant number of theorem
provers’ GUIs. I regard it as a landmark idea originating from CROAP.
2 but justiﬁed by deep and compelling technical reasons stemming from Centaur’s
very principles.
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

The descendants of Centaur
553
Why so few CtCoq adopters? My personal feeling is that among many
possible reasons lies the fact that to get started with CtCoq one needed
to overcome a rather disturbing ﬁrst contact with the GUI, and to
devote a signiﬁcant amount of time to get comfortable with it. Moreover,
beneﬁting from CtCoq’s full potential required too heavy an investment.
For instance, I never felt motivated to learn PPML during GENIE (nor
did I have time to do so), I lazily subcontracted the programming of my
notations to Yves Bertot who kindly accepted to do it for me. Centaur’s
extension and instantiation capabilities were probably accessible only to
its designers and developers. Its complexity was dissuasive for anybody
else.
To end these few memories and comments about my use of CtCoq
and the related interactions with Gilles and Yves, I would like to
mention Gilles’ interest in translating proofs encoded as lambda-terms
into hopefully readable texts in natural language [5, 6].
On the one hand Centaur provided a framework to handle in a uniform
way texts, programs, formulas, proofs and relations between them. On
the other hand, Coq had the distinctive feature of storing and type-
checking an explicit representation of proofs as CIC lambda-terms.
From an academic point view it was attractive to tackle the challenge
of translating into French or English the very detailed “argument”
contained in these lambda-terms.
But who would read these automatically generated French or English
proof-texts? Gilles wondered whether in the ﬁeld of aeronautics certiﬁ-
cation authorities might be interested in reading such texts. He probed
my feeling about a possible future introduction of proof assistants such
as Coq to perform veriﬁcation tasks, for instance in DO-178-compliant
software development processes.
Meanwhile, he had already started working with Yves Bertot, Laurent
Th´ery and Yann Coscoy on this topic, and certainly intended to continue
regardless of my answer. But I felt that he was genuinely open to the
industrial point of view I could express, and that he would take it into
consideration for his future research priorities.
At that time, in 1994, I had been using Coq for 2 years and like Gilles
I was fond of formalization in higher-order logic. I encouraged him to
proceed in his research on natural language rewriting of proof-terms,
and justiﬁed this stance with certiﬁcation issues.
Thirteen years later I observe Airbus successfully introduced theorem
proving (Caveat by CEA) in A380 on-board software development pro-
cess, and obtained Caveat’s qualiﬁcation by Airworthiness Authorities.
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

554
E. Ledinot
Moreover, DO-178 is being revised (revision C), especially to take greater
advantage of formal speciﬁcation and veriﬁcation methods.
But airworthiness authorities tend to delegate part of the reviewing
processes to the aircraft manufacturers. The industrial relevance of
research on how to automatically produce human-readable documents
from computer-checked correctness proofs may be questioned.
Reviews of software veriﬁcation activities might be in the scope of
delegations so that such generated documents were more likely to be
read by the proof developers or maintainers themselves rather than by
external FAA or EASA reviewers.
But at Trusted Logic, a start-up from INRIA in the ﬁeld of security
on smart cards which makes extensive use of Coq, reviews of natural
language presentations of the formalizations and proofs are mandatory
and crucial to their customers and the certiﬁcation authorities.
So translation of proof terms and proof scripts into natural language
documents may really be an industrially relevant research theme.
25.5 Tapenade: code diﬀerentiation
Let us now move back to scientiﬁc computation, computational ﬂuid
dynamics and numerical solution of Euler and Navier–Stokes equations.
We mentioned previously Foresys and Partita as two program transfor-
mation assistants that were successful examples of tools derived from
Centaur.
We now deal with automatic code diﬀerentiation (AD). It is a topic
more loosely connected to Centaur, but to me it was a mark of Gilles’
inﬂuence as INRIA’s Chief Scientiﬁc Oﬃcer.
First let us introduce brieﬂy what code diﬀerentiation is and why
it is useful to industry. A code diﬀerentiator takes as input a Fortran
program and outputs another Fortran program that computes some
partial derivatives of the mathematical functions implemented in the
input source code.
Just as computer algebra systems like Maple can compute the formal
derivatives of polynomials or any explicit analytic formulation of a
function, code diﬀerentiators compute ﬁrst-order or, more recently,
second-order derivatives of functions whose deﬁnition is only accessible
through arrays, loops, procedure calls, commons, if then else statements,
pointers, etc.
Code diﬀerentiation is on the critical path of optimum design, and
optimum design is of paramount importance in many design oﬃces.
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

The descendants of Centaur
555
Considering optimal design of shapes in aerodynamics for instance,
CFD codes were limited to performance evaluation of shapes until
the mid-1990s. They could not automatically3 ﬁnd, after iterative
transformations of an initial shape, the shape that would deliver optimal
performance under given constraints.4
Let us suppose that the performance of a wing may be assessed
through pressure, velocity and temperature ﬁelds around it, all these
ﬁelds being computed by some CFD codes. One needs the gradients of
these ﬁelds with respect to the wing’s geometrical parameters (chord,
curve, aspect ratio etc.) to compute the suitable directions along which
the shape has to be modiﬁed to improve its performance. Building the
Fortran code that will compute the ﬁelds’ gradients from the Fortran
code that computes the aerodynamic ﬁelds is what is at stake with
automatic diﬀerentiation. It is relevant in any other industrial domain
where physics comes into play in product design.
Research on automatic diﬀerentiation was initiated at INRIA by
Jacques Morgenstern, through a joint project with Nice university called
SAFIR, which he led until his early death in 1998. By 1995 when we
started the ﬁrst phase of GENIE, Odyss´ee, a ﬁrst prototype diﬀeren-
tiator written in Caml by SAFIR, had reached what was considered a
level of maturity suitable for ﬁrst industrial experiments.
Odyss´ee earned our CFD experts’ attention and respect, but by
1997, at the end of GENIE phase 1, it delivered only limited help to
diﬀerentiate codes. The memory footprint of the pieces of software
generated by Odyss´ee was too large to scale-up. However, the generated
programs were useful to help test the software pieces produced by
manual diﬀerentiation.
The heart of the matter was also to understand how to combine
diﬀerentiation and parallelization: for a given code was it better to diﬀer-
entiate its parallel version or to parallelize after diﬀerentiation?
Morgenstern’s demise occurred by the time GENIE phase 2 was to
start. As I had been appointed coordinator of GENIE phase 2, I met
Gilles more often at that time. He was profoundly aﬀected by the death
of SAFIR’s scientiﬁc leader. The project was closed, but Gilles was
deeply convinced that research on automatic diﬀerentiation had to go
on at INRIA, that the institute was well positioned in the worldwide
3 Derivatives by ﬁnite diﬀerence could be used in theory but are not tractable in
practice.
4 let us say locally optimal. . .
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

556
E. Ledinot
academic competition on this subject. He thought it was a good topic for
INRIA’s commitment to scientiﬁc excellence and technology transfer.
Though I have no evidence of that, I guess he used all of his charisma
and power of persuasion to convince a few researchers at INRIA Sophia
to build a new project on automatic diﬀerentiation.
Project TROPICS was created in 2000 with Alain Dervieux and
Laurent Hasco¨et as scientiﬁc leaders. Alain Dervieux is a senior
researcher in computational ﬂuid dynamics, and Laurent Hasco¨et is a
former member of CROAP. He was the designer and implementer of
Partita. . .
They decided to write a new code diﬀerentiator from scratch in Java.
Like Odyssee, they chose to put the emphasis on the reverse mode of
AD, which computes gradients very eﬃcently, at the cost of a complex
program transformation.
Laurent Hasco¨et explained to me that his experience on Centaur and
Partita, as well as his close collaboration with Alain Dervieux, were
instrumental in the development of what is presently regarded as the
world-best reverse mode diﬀerentiator of Fortran code. I feel all the
more comfortable to write this chauvinistic statement as I read it in a
recommendation letter by one of the top US researcher in AD.
Thanks to Tapenade, our parallel Euler and Navier–Stokes codes
(200+ Kloc) have been diﬀerentiated with a reasonable amount of
manual post-processing on the generated code. Optimum design loops,
iterating CFD evaluations and shape transformations, have been
operational at Dassault Aviation for viscous and non viscous ﬂows
respectively since 2004 and 2001.
Tapenade is also used by Rolls Royce, Cargill, by leading European
scientists in oceanography or agronomy, and by a famous English bank.
I consider Tapenade as a major achievement of INRIA, and Gilles
played some role in this success.
25.6 Kahn’s networks
Surprisingly enough, Gilles and I had no discussion about models of
concurrency and Kahn’s networks, although I had some activities on
Lustre and data-ﬂow synchronous programming at Dassault.
Beside parallel design of sequential control programs using Esterel and
Lustre, I was interested in coarse-grain parallelism, multi-tasking and
pre-emptive real-time scheduling. Kahn’s networks handle concurrency
in a way that didn’t ﬁt our applications in avionics.
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

The descendants of Centaur
557
I hope Gilles knew, before he left us in February 2006, that Albert
Cohen and Marc Pouzet’s paper titled “N-Synchronous Kahn networks”
was accepted at ACM POPL’06 [2].
In collaboration with Marc Duranton at Philips Research, now NXP,
extensions of Gilles’ model of stream concurrency are investigated to
support a new design method of stream processing circuits dedicated
to HD TV, 3D gaming, medical imaging, etc. Kahn’s networks and a
speciﬁc type system are used to provide a “correct by construction”
synthesis method of the size of the bit buﬀers and of the synchronizing
mechanisms that are inserted between the operators of the circuits.
25.7 In memoriam
I would like to end this recollection note with a few more personal
memories.
Though I never obtained any evidence to back this assumption, I think
I owe my appointment as member of INRIA’s evaluation board in 2002
to Gilles.
If my guess is right, I’m very grateful to him for that, as well as to
my company which agreed to allow me to be available for this part-time
assignment. Since then, I have been participating in INRIA’s recruitment
competitive examinations and research projects’ evaluations. I have
participated in many very interesting discussions and presentations in
the course of my duties as a member of this board.
It gave me the opportunity to meet Gilles as INRIA’s CEO, when
he briefed the evaluation board on INRIA’s selection and evaluation
criteria, or made comments on its strategic plan. Gilles loved INRIA. He
was committed to its scientiﬁc international posture and to technology
transfer to French companies. He sincerely cared for its researchers.
It seemed to me that he was a bit disappointed by the relations
between INRIA and companies in France. “I wonder whether we are
not working more for US companies than for French ones” he told me
once while we were talking together about transfers and INRIA’s role
regarding innovation and enterprise creation, as expected by the ministry
of industry.
I would like also to mention two of his qualities I appreciated most: he
knew how to coin a nice synthesizing phrase or a thoughtful question to
put back on track a messy discussion. And he had a very concrete way
of speaking, full of imagery and humour.
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

558
E. Ledinot
I remember his manner of depicting the situation at Aerospatiale
when he visited Dassault’s management just after he had been appointed
chairman of Ariane 501’s inquiry board. As an aside, he told me: “You
know, as far as embedded software is concerned there, you have two
diﬀerent cultures, two diﬀerent people. You have those who build birds,
and you have those who build ﬁrecrackers. . . And of course they ignore
each other!”
Incidentally about this anecdote, I would like to mention that spurred
on by Gilles, Alain Deutsch and a group of researchers at INRIA designed
a static analyser to process Ariane 501’s on-board software, a huge work
that led to the creation of the spin-oﬀcompany Polyspace Technologies,5
a few years after Ariane 5 catastrophic maiden ﬂight.
I only met Gilles occasionally over the last 15 years, but it was always
with genuine pleasure. I miss his enthusiasm, humour, research news and
acute statements.
You accomplished a nice mission among us Gilles. Rest in peace.
25.8 Acknowledgements
Many thanks to Yves Bertot, Laurent Hasco¨et and Laurence Rideau for
their help and comments on early versions of this note.
Bibliography
[1]
Y. Bertot and P. Casteran. Interactive Theorem Proving and Program
Development. Coq’Art: The Calculus of Inductive Constructions. Texts in
Theoretical Computer Science. An EATCS Series 2004, XXV, 469 pp.
[2]
A. Cohen, M. Duranton, C. Eisenbeis, C. Pagetti, F. Plateau and
M. Pouzet. N-sychronous Kahn networks. In 33th ACM Symp. on Principles
of Programming Languages (PoPL’06), pp. 180–193, Charleston, South
Carolina, January 2006.
[3]
P. Borras, D. Cl´ement, T. Despeyroux, et al. Centaur: the system. In
Software Engineering Notes, volume 13(5). Third Symposium on Software
Development Environments, 1988.
[4]
Aho, Sethi, Ullman. Compiler Writing: Principles Programming and
Tools, Addison Wesley, 1986.
[5]
Y. Coscoy, G. Kahn and L. Th´ery. Extracting text from proofs. In Typed
Lambda Calculi and Applications TLCA’95, Edinburgh.
[6]
Y. Coscoy. A natural language explanation for formal proofs. In Logical
Aspects of Computational Linguistics, LACL’96, Nancy France.
5 Now part of the MathsWorks
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

The descendants of Centaur
559
[7]
L. Th´ery, Y. Bertot and G. Kahn. Real theorem provers deserve
real user-interfaces. ACM SIGSOFT Symposium on Software Development
Environments. 1992.
[8]
Y. Bertot, G. Kahn and L. Th´ery. Proof by pointing. In M. Hagiya
and J. C. Mitchell (eds), Proceedings of the International Symposium on
Theoretical Aspects of Computer Software. volume 789, Lecture Notes in
Computer Science, Sendai, Japan, p 141-160, Springer-Verlag, 1994.
[9]
The Calculus of Constructions. Documentation and User’s Guide, Version
4.10. Technical Report 110, INRIA, 1989.
[10]
C. Paulin-Mohring and B. Werner. Synthesis of ML programs in the
system Coq. Journal of Symbolic Computation 15:607–640, 1993.
Glossary
AD
Automatic Diﬀerentiation
CAD
Computer Assisted Design
CEA
Commissariat `a l’Energie Atomique. French Nuclear
Agency research center.
CIC
Calculus of Inductive Constructions
CFD
Computational Fluid Dynamics
CROAP
Conception et R´ealisation d’Outils d’Aide `a la
Programmation
DO-178
Referential of Software development processes deﬁned by
airworthiness authorities
DSP
Digital Signal Processing
EASA
European Aviation Safety Agency
FAA
Federal Airworthiness Authority
GUI
Graphical User Interface
METAL
description language for concrete and abstract syntax
NDA
Non Disclosure Agreement
PPML
Pretty Printer Meta Language
POPL
ACM Symposium on Principles of Programming
Languages
TYPOL
Rule language to deﬁne static and dynamic semantics
VTP
Virtual Tree Processor
https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

https://doi.org/10.1017/CBO9780511770524.026 Published online by Cambridge University Press

