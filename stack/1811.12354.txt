TOUCHDOWN: Natural Language Navigation and Spatial Reasoning
in Visual Street Environments
Howard Chen∗
ASAPP Inc.
New York, NY
hchen@asapp.com
Alane Suhr
Dipendra Misra
Noah Snavely
Yoav Artzi
Department of Computer Science & Cornell Tech, Cornell University
New York, NY
{suhr, dkm, snavely, yoav}@cs.cornell.edu
Abstract
We study the problem of jointly reasoning about lan-
guage and vision through a navigation and spatial reason-
ing task. We introduce the TOUCHDOWN task and dataset,
where an agent must ﬁrst follow navigation instructions in
a real-life visual urban environment, and then identify a lo-
cation described in natural language to ﬁnd a hidden ob-
ject at the goal position. The data contains 9,326 examples
of English instructions and spatial descriptions paired with
demonstrations. Empirical analysis shows the data presents
an open challenge to existing methods, and qualitative lin-
guistic analysis shows that the data displays richer use of
spatial reasoning compared to related resources.1
1. Introduction
Consider the visual challenges of following natural lan-
guage instructions in a busy urban environment. Figure 1
illustrates this problem. The agent must identify objects
and their properties to resolve mentions to trafﬁc light and
American ﬂags, identify patterns in how objects are ar-
ranged to ﬁnd the ﬂow of trafﬁc, and reason about how
the relative position of objects changes as it moves to go
past objects.
Reasoning about vision and language has
been studied extensively with various tasks, including vi-
sual question answering [3, 34], visual navigation [2, 25],
interactive question answering [9, 12], and referring expres-
sion resolution [16, 22, 23]. However, existing work has
largely focused on relatively simple visual input, including
object-focused photographs [20, 28] or simulated environ-
ments [4, 9, 19, 25, 33]. While this has enabled signiﬁcant
progress in visual understanding, the use of real-world vi-
sual input not only increases the challenge of the vision task,
it also drastically changes the kind of language it elicits and
requires fundamentally different reasoning.
∗Work done at Cornell University.
1The data is available at https://github.com/lil-lab/touchdown.
Turn and go with the ﬂow of trafﬁc. At the ﬁrst trafﬁc light turn left. Go
past the next two trafﬁc light, As you come to the third trafﬁc light you
will see a white building on your left with many American ﬂags on it.
Touchdown is sitting in the stars of the ﬁrst ﬂag.
Figure 1. An illustration of the task. The agent follows the in-
structions to reach the goal, starting by re-orientating itself (top
image) and continuing by moving through the streets (two middle
images). At the goal (bottom), the agent uses the spatial descrip-
tion (underlined) to locate Touchdown the bear. Touchdown only
appears if the guess is correct (see bottom right detail).
In this paper, we study the problem of reasoning about
vision and natural language using an interactive visual nav-
igation environment based on Google Street View.2 We de-
sign the task of ﬁrst following instructions to reach a goal
2https://developers.google.com/maps/documentation/streetview/intro
1
arXiv:1811.12354v7  [cs.CV]  16 May 2020

position, and then resolving a spatial description at the goal
by identifying the location in the observed image of Touch-
down, a hidden teddy bear. Using this environment and
task, we release TOUCHDOWN,3 a dataset for navigation
and spatial reasoning with real-life observations.
We design our task for diverse use of spatial reasoning,
including for following instructions and resolving the spa-
tial descriptions. Navigation requires the agent to reason
about its relative position to objects and how these relations
change as it moves through the environment. In contrast,
understanding the description of the location of Touchdown
requires the agent to reason about the spatial relations be-
tween observed objects. The two tasks also diverge in their
learning challenges.
While in both learning requires re-
lying on indirect supervision to acquire spatial knowledge
and language grounding, for navigation, the training data
includes demonstrated actions, and for spatial description
resolution, annotated target locations. The task can be ad-
dressed as a whole, or decomposed to its two portions.
The key data collection challenge is designing a scal-
able process to obtain natural language data that reﬂects the
richness of the visual input while discouraging overly ver-
bose and unnatural language. In our data collection process,
workers write and follow instructions. The writers navigate
in the environment and hide Touchdown. Their goal is to
make sure the follower can execute the instruction to ﬁnd
Touchdown. The measurable goal allows us to reward effec-
tive writers, and discourages overly verbose descriptions.
We collect 9,326 examples of the complete task, which
decompose to the same number of navigation tasks and
27,575 spatial description resolution (SDR) tasks.
Each
example is annotated with a navigation demonstration and
the location of Touchdown. Our linguistically-driven analy-
sis shows the data requires signiﬁcantly more complex rea-
soning than related datasets. Nearly all examples require
resolving spatial relations between observable objects and
between the agent and its surroundings, and each exam-
ple contains on average 5.3 commands and refers to 10.7
unique entities in its environment.
We empirically study the navigation and SDR tasks inde-
pendently. For navigation, we focus on the performance of
existing models trained with supervised learning. For SDR,
we cast the problem of identifying Touchdown’s location as
an image feature reconstruction problem using a language-
conditioned variant of the UNET architecture [29, 25]. This
approach signiﬁcantly outperforms several strong baselines.
2. Related Work and Datasets
Jointly reasoning about vision and language has been
studied extensively, most commonly focusing on static vi-
sual input for reasoning about image captions [20, 8, 28, 31,
3 Touchdown is the unofﬁcial mascot of Cornell University.
32] and grounded question answering [3, 13, 34]. Recently,
the problem has been studied in interactive simulated envi-
ronments where the visual input changes as the agent acts,
such as interactive question answering [9, 12, ] and instruc-
tion following [25, 26]. In contrast, we focus on an interac-
tive environment with real-world observations.
The most related resources to ours are R2R [2] and Talk
the Walk [10]. R2R uses panorama graphs of house envi-
ronments for the task of navigation instruction following. It
includes 90 unique environments, each containing an aver-
age of 119 panoramas, signiﬁcantly smaller than our 29,641
panoramas. Our larger environment requires following the
instructions closely, as ﬁnding the goal using search strate-
gies is unlikely, even given a large number of steps. We also
observe that the language in our data is signiﬁcantly more
complex than in R2R (Section 5). Our environment setup is
related to Talk the Walk, which uses panoramas in small ur-
ban environments for a navigation dialogue task. In contrast
to our setup, the instructor does not observe the panoramas,
but instead sees a simpliﬁed diagram of the environment
with a small set of pre-selected landmarks. As a result, the
instructor has less spatial information compared to TOUCH-
DOWN. Instead the focus is on conversational coordination.
SDR is related to the task of referring expression res-
olution, for example as studied in ReferItGame [16] and
Google Refexp [22]. Referring expressions describe an ob-
served object, mostly requiring disambiguation between the
described object and other objects of the same type. In con-
trast, the goal of SDR is to describe a speciﬁc location rather
than discriminating. This leads to more complex language,
as illustrated by the comparatively longer sentences of SDR
(Section 5). Kitaev and Klein [18] proposed a similar task
to SDR, where given a spatial description and a small set of
locations in a fully-observed simulated 3D environment, the
system must select the location described from the set. We
do not use distractor locations, requiring a system to con-
sider all areas of the image to resolve a spatial description.
3. Environment and Tasks
We use Google Street View to create a large naviga-
tion environment.
Each position includes a 360◦RGB
panorama. The panoramas are connected in a graph-like
structure with undirected edges connecting neighboring
panoramas. Each edge connects to a panorama in a speciﬁc
heading. For each panorama, we render perspective images
for all headings that have edges. Our environment includes
29,641 panoramas and 61,319 edges from New York City.
Figure 2 illustrates the environment.
We design two tasks: navigation and spatial description
resolution (SDR). Both tasks require recognizing objects
and the spatial relations between them. Navigation focuses
on egocentric spatial reasoning, where instructions refer to
the agent’s relationship with its environment, including the

90°
145°
31°
270°
325°
211°
Pano A
Pano B
Figure 2. An illustration of the environment. Left: part of the graph
structure with polarly projected panoramas illustrating positions
linked by edges, each labeled with its heading. Heading angles
shown closer to each panorama represent the outgoing angle from
that panorama; for example, the heading from Pano A to Pano B
is 31◦. Right: the area in New York City covered by the graph.
objects it observes. The SDR task displays more allocentric
reasoning, where the language requires understanding the
relations between the observed objects to identify the target
location. While navigation requires generating a sequence
of actions from a small set of possible actions, SDR requires
choosing a speciﬁc pixel in the observed image. Both tasks
present different learning challenges. The navigation task
could beneﬁt from reward-based learning, while the SDR
task deﬁnes a supervised learning problem. The two tasks
can be addressed separately, or combined by completing the
SDR task at the goal position at the end of the navigation.
3.1. Navigation
The agent’s goal is to follow a natural language instruc-
tion and reach a goal position. Let S be the set of all states.
A state s ∈S is a pair (I, α), where I is a panorama and
α is the heading angle indicating the agent heading. We
only allow states where there is an edge connecting to a
neighboring panorama in the heading α.
Given a navi-
gation instruction ¯xn and a start state s1 ∈S, the agent
performs a sequence of actions. The set of actions A is
{FORWARD, LEFT, RIGHT, STOP}. Given a state s and an ac-
tion a ∈A, the state is deterministically updated using a
transition function T : S × A →S. The FORWARD action
moves the agent along the edge in its current heading. For-
mally, if the environment includes the edge (Ii, Ij) at head-
ing α in Ii, the transition is T((Ii, α), FORWARD) = (Ij, α′).
The new heading α′ is the heading of the edge in Ij with
the closest heading to α. The LEFT (RIGHT) action changes
the agent heading to the heading of the closest edge on
the left (right). Formally, if the position panorama I has
edges at headings α > α′ > α′′, T((I, α), LEFT) = (I, α′)
and T((I, α), RIGHT) = (I, α′′).
Given a start state s1
and a navigation instruction ¯xn, an execution ¯e is a se-
quence of state-action pairs ⟨(s1, a1), ..., (sm, am)⟩, where
T(si, ai) = si+1 and am = STOP.
Evaluation
We use three evaluation metrics: task com-
pletion, shortest-path distance, and success-weighted edit
distance.
Task completion (TC) measures the accuracy
of completing the task correctly.
We consider an exe-
cution correct if the agent reaches the exact goal posi-
tion or one of its neighboring nodes in the environment
graph.
Shortest-path distance (SPD) measures the mean
distance in the graph between the agent’s ﬁnal panorama
and the goal. SPD ignores turning actions and the agent
heading.
Success weighted by edit distance (SED) is
1
N
PN
i=1 Si(1 −
lev(¯e,ˆ¯e)
max(|¯e|,|ˆ¯e|)), where the summation is over
N examples, Si is a binary task completion indicator, ¯e
is the reference execution, ˆ¯e is the predicted execution,
lev(·, ·) is the Levenshtein edit distance, and | · | is the exe-
cution length. The edit distance is normalized and inversed.
We measure the distance and length over the sequence of
panoramas in the execution, and ignore changes of orien-
tation. SED is related to success weighted by path length
(SPL) [1], but is designed for instruction following in graph-
based environments, where a speciﬁc correct path exists.
3.2. Spatial Description Resolution (SDR)
Given an image I and a natural language description ¯xs,
the task is to identify the point in the image that is referred
to by the description. We instantiate this task as ﬁnding the
location of Touchdown, a teddy bear, in the environment.
Touchdown is hidden and not visible in the input. The im-
age I is a 360◦RGB panorama, and the output is a pair of
(x, y) coordinates specifying a location in the image.
Evaluation
We use three evaluation metrics: accuracy,
consistency, and distance error. Accuracy is computed with
regard to an annotated location. We consider a prediction
as correct if the coordinates are within a slack radius of the
annotation. We measure accuracy for radiuses of 40, 80,
and 120 pixels and use euclidean distance. Our data collec-
tion process results in multiple images for each sentence.
We use this to measure consistency over unique sentences,
which is measured similar to accuracy, but with a unique
sentence considered correct only if all its examples are cor-
rect [11]. We compute consistency for each slack value.
We also measure the mean euclidean distance between the
annotated location and the predicted location.
4. Data Collection
We frame the data collection process as a treasure-hunt
task where a leader hides a treasure and writes directions
to ﬁnd it, and a follower follows the directions to ﬁnd the
treasure. The process is split into four crowdsourcing tasks
(Figure 3). The two main tasks are writing and following.
In the writing task, a leader follows a prescribed route and
hides Touchdown the bear at the end, while writing instruc-
tions that describe the path and how to ﬁnd Touchdown.

Task I: Instruction Writing The worker starts at the beginning of the route facing north (a). The prescribed route is shown in the overhead map (bottom
left of each image). The worker faces the correct direction and follows the path, while writing instructions that describe these actions (b). After following
the path, the worker reaches the goal position, places Touchdown, and completes writing the instructions (c).
Place Touchdown
Can’t Place 
Touchdown
Turn so that the trees are 
to your left. At the ﬁrst 
intersection, turn left and 
stop. Touchdown is on 
top of the blue mailbox 
on the right hand corner.
Place Touchdown
Can’t Place 
Touchdown
Turn so that the trees are 
to your left. At the ﬁrst 
intersection, turn left and 
stop.
Place Touchdown
Can’t Place 
Touchdown
(a)
(b)
(c)
Turn so that 
the trees are to 
your left. At the 
ﬁrst 
intersection, 
turn left and 
stop. 
Touchdown is 
on top of the 
blue mailbox 
on the right 
hand corner.
Place Touchdown
Bear is Occluded
Turn so that the trees are 
to your left. At the ﬁrst 
intersection, turn left and 
stop. Touchdown is on 
top of the blue mailbox 
on the right hand corner.
Remaining 
Attempts: 2
You Found 
Touchdown!
Touchdown is on top 
of the blue mailbox on 
the right hand corner.
Turn so that the 
trees are to your 
left. At the ﬁrst 
intersection, turn 
left and stop. 
Touchdown is on 
top of the blue 
mailbox on the 
right hand corner.
Target Location 
Instructions:
Submit
Task II: Panorama Propagation Given the im-
age from the leader’s ﬁnal position (top), in-
cluding Touchdown’s placement, and the instruc-
tions (right), the worker annotates the location of
Touchdown in the neighboring image (bottom).
Task III: Validation The worker begins in the
same heading as the leader, and follows the in-
structions (bottom left) by navigating the envi-
ronment. When the worker believes they have
reached the goal, they guess the target location
by clicking in the Street View image.
Task IV: Instruction Segmentation The in-
structions are shown (left).
The worker high-
lights segments corresponding to the navigation
and target location subtasks.
The highlighted
segment is shown to the worker (right).
Figure 3. Illustration of the data collection process.
The following task requires following the instructions from
the same starting position to navigate and ﬁnd Touchdown.
Additional tasks are used to segment the instructions into
the navigation and target location tasks, and to propagate
Touchdown’s location to panoramas that neighbor the ﬁnal
panorama. We use a customized Street View interface for
data collection. However, the ﬁnal data uses a static set of
panoramas that do not require the Street View interface.
Task I: Instruction Writing
We generate routes by sam-
pling start and end positions. The sampling process results
in routes that often end in the middle of a city block. This
encourages richer language, for example by requiring to de-
scribe the goal position rather than simply directing to the
next intersection. The route generation details are described
in the Supplementary Material. For each task, the worker is
placed at the starting position facing north, and asked to
follow a route speciﬁed in an overhead map view to a goal
position. Throughout, they write instructions describing the
path. The initial heading requires the worker to re-orient
to the path, and thereby familiarize with their surroundings
better. It also elicits interesting re-orientation instructions
that often include references to the direction of objects (e.g.,
ﬂow of trafﬁc) or their relation to the agent (e.g., the um-
brellas are to the right). At the goal panorama, the worker
is asked to place Touchdown in a location of their choice
that is not a moving object (e.g., a car or pedestrian) and to
describe the location in their instructions. The worker goal
is to write instructions that a human follower can use to cor-
rectly navigate and locate the target without knowing the
correct path or location of Touchdown. They are not per-
mitted to write instructions that refer to text in the images,
including street names, store names, or numbers.
Task II: Target Propagation to Panoramas
The writ-
ing task results in the location of Touchdown in a single
panorama in the Street View interface. However, resolving
the spatial description to the exact location is also possible
from neighboring panoramas where the target location is
visible. We use a crowdsourcing task to propagate the loca-

Orient yourself in the direction of the red ladder. Go straight and take
a left at the intersection with islands. Take another left at the intersec-
tion with a gray trash can to the left. Go straight until near the end of
the fenced in playground and court to the right near the end of the
fenced in playground and court to the right. Touchdown is on the
last basketball hoop to the right.
Figure 4. Example instruction where the annotated navigation (un-
derlined) and SDR (bolded) segments overlap.
Task
Number of Workers
Instruction Writing
224
Target Propagation
218
Validation
291
Instruction Segmentation
46
Table 1. Number of workers who participated in each task.
tion of Touchdown to neighboring panoramas in the Street
View interface, and to the identical panoramas in our static
data. This allows to complete the task correctly even if not
stopping at the exact location, but still reaching a seman-
tically equivalent position. The propagation in the Street
View interface is used for our validation task. The task in-
cludes multiple steps. At each step, we show the instruction
text and the original Street View panorama with Touchdown
placed, and ask for the location for a single panorama, ei-
ther from the Street View interface or from our static im-
ages. The worker can indicate if the target is occluded. The
propagation annotation allows us to create multiple exam-
ples for each SDR, where each example uses the same SDR
but shows the environment from a different position.
Task III: Validation
We use a separate task to validate
each instruction. The worker is asked to follow the instruc-
tion in the customized Street View interface and ﬁnd Touch-
down. The worker sees only the Street View interface, and
has no access to the overhead map. The task requires nav-
igation and identifying the location of Touchdown. It is
completed correctly if the follower clicks within a 90-pixel
radius4 of the ground truth target location of Touchdown.
This requires the follower to be in the exact goal panorama,
or in one of the neighboring panoramas we propagated the
location to. The worker has ﬁve attempts to ﬁnd Touch-
down. Each attempt is a click. If the worker fails, we create
another task for the same example to attempt again. If the
second worker fails as well, the example is discarded.
Task IV: Segmentation
We annotate each token in the
instruction to indicate if it describes the navigation or SDR
tasks. This allows us to address the tasks separately. First, a
worker highlights a consecutive preﬁx of tokens to indicate
the navigation segment. They then highlight a sufﬁx of to-
kens for the SDR task. The navigation and target location
segments may overlap (Figure 4).
Workers and Qualiﬁcation
We require passing a qualiﬁ-
cation task to do the writing task. The qualiﬁer task requires
4This is roughly the size of Touchdown. The number is not directly
comparable to the SDR accuracy measures due to different scaling.
Dataset
Dataset
Vocab.
Mean Text
Real
Size
Size
Length
Vision?
TOUCHDOWN
9,326
5,625
108.0

Navigation
9,326
4,999
89.6
SDR
25,575
3,419
29.7
R2R [2]
21,567
3,156
29.3

SAIL [21]
706
563
36.7

LANI [25]
5,487
2,292
61.9

Table 2. Data statistics of TOUCHDOWN, compared to related cor-
pora. For TOUCHDOWN, we report statistics for the complete task,
navigation only, and SDR only. Vocabulary size and text length are
computed on the combined training and development sets. SAIL
and LANI statistics are computed using paragraph data.
0
50
100
150
200
0
5
10
15
20
25
30
35
40
45
Text length
% of examples
SAIL (paragraphs)
LANI (paragraphs)
R2R
TOUCHDOWN (SDR)
TOUCHDOWN (navigation)
Figure 5. Text lengths in TOUCHDOWN and related corpora.
correctly navigating and ﬁnding Touchdown for a prede-
ﬁned set of instructions. We consider workers that succeed
in three out of the four tasks as qualiﬁed. The other three
tasks do not require qualiﬁcation. Table 1 shows how many
workers participated in each task.
Payment and Incentive Structure
The base pay for in-
struction writing is $0.60. For target propagation, valida-
tion, and segmentation we paid $0.15, $0.25, and $0.12.
We incentivize the instruction writers and followers with a
bonus system. For each instruction that passes validation,
we give the writer a bonus of $0.25 and the follower a bonus
of $0.10. Both sides have an interest in completing the task
correctly. The size of the graph makes it difﬁcult, and even
impossible, for the follower to complete the task and get the
bonus if the instructions are wrong.
5. Data Statistics and Analysis
Workers completed 11,019 instruction-writing tasks, and
12,664 validation tasks. 89.1% examples were correctly
validated, 80.1% on the ﬁrst attempt and 9.0% on the sec-
ond.5 While we allowed ﬁve attempts at ﬁnding Touchdown
during validation tasks, 64% of the tasks required a single
attempt. The value of additional attempts decayed quickly:
only 1.4% of the tasks were only successful after ﬁve at-
tempts.
For the full task and navigation-only, TOUCH-
DOWN includes 9,326 examples with 6,526 in the training
set, 1,391 in the development set, and 1,409 in the test set.
For the SDR task, TOUCHDOWN includes 9,326 unique de-
scriptions and 25,575 examples with 17,880 for training,
3,836 for development, and 3,859 for testing. We use our
5Several paths were discarded due to updates in Street View data.

initial paths as gold-standard demonstrations, and the place-
ment of Touchdown by the original writer as the reference
location. Table 2 shows basic data statistics. The mean in-
struction length is 108.0 tokens. The average overlap be-
tween navigation and SDR is 11.4 tokens. Figure 5 shows
the distribution of text lengths. Overall, TOUCHDOWN con-
tains a larger vocabulary and longer navigation instructions
than related corpora. The paths in TOUCHDOWN are longer
than in R2R [2], on average 35.2 panoramas compared to
6.0.
SDR segments have a mean length of 29.8 tokens,
longer than in common referring expression datasets; Refer-
ItGame [16] expressions 4.4 tokens on average and Google
RefExp [22] expressions are 8.5.
We perform qualitative linguistic analysis of TOUCH-
DOWN to understand the type of reasoning required to solve
the navigation and SDR tasks. We identify a set of phe-
nomena, and randomly sample 25 examples from the devel-
opment set, annotating each with the number of times each
phenomenon occurs in the text. Table 3 shows results com-
paring TOUCHDOWN with R2R.6 Sentences in TOUCH-
DOWN refer to many more unique, observable entities (10.7
vs 3.7), and almost all examples in TOUCHDOWN include
coreference to a previously-mentioned entity. More exam-
ples in TOUCHDOWN require reasoning about counts, se-
quences, comparisons, and spatial relationships of objects.
Correct execution in TOUCHDOWN requires taking actions
only when certain conditions are met, and ensuring that the
agent’s observations match a described scene, while this is
rarely required in R2R. Our data is rich in spatial reasoning.
We distinguish two types: between multiple objects (allo-
centric) and between the agent and its environment (ego-
centric). We ﬁnd that navigation segments contain more
egocentric spatial relations than SDR segments, and SDR
segments require more allocentric reasoning. This corre-
sponds to the two tasks: navigation mainly requires moving
the agent relative to its environment, while SDR requires
resolving a point in space relative to other objects.
6. Spatial Reasoning with LINGUNET
We cast the SDR task as a language-conditioned image
reconstruction problem, where we predict a distribution of
the location of Touchdown over the entire observed image.
6.1. Model
We use the LINGUNET architecture [25, 5], which was
originally introduced for goal prediction and planning in in-
struction following. LINGUNET is a language-conditioned
variant of the UNET architecture [29], an image-to-image
encoder-decoder architecture widely used for image seg-
mentation. LINGUNET incorporates language into the im-
age reconstruction phase to fuse the two modalities. We
6See the Supplementary Material for analysis of SAIL and LANI.
Softmax
LingUNet
F0
F1
F2
G2
G1
H1
H2
Panorama I
Gold Distribution Ig
Predicted Distribution P
Representation u
the bike is resting on.
Instruction Tokens ¯xS
BiLSTM
KL Divergence Loss
K1
K2
...Touchdown is on top the pillar
MLP
Figure 6. LingUNet architecture with two layers (m = 2).
modify the architecture to predict a probability distribution
over the input panorama image.
We
process
the
description
text
tokens
¯xs
=
⟨x1, x2, . . . , xl⟩using a bi-directional Long Short-term
Memory (LSTM) recurrent neural network to generate
l hidden states.
The forward computation is hf
i
=
BiLSTM(ϕ(xi), hf
i−1), i = 1, . . . , l, where ϕ is a learned
word embedding function. We compute the backward hid-
den states hb
i similarly. The text representation is an aver-
age of the concatenated hidden states x = 1
l
Pl
i=1[hf
i ; hb
i].
We map the RGB panorama I to a feature representation F0
with a pre-trained RESNET18 [14].
LINGUNET performs m levels of convolution and de-
convolution operations. We generate a sequence of feature
maps Fk = CNNk(Fk−1), k = 1, . . . , m with learned con-
volutional layers CNNk. We slice the text representation
x to m equal-sized slices, and reshape each with a linear
projection to a 1 × 1 ﬁlter Kk. We convolve each feature
map Fk with Kk to obtain a text-conditioned feature map
Gk = CONV(Kk, Fk). We use m deconvolution operations
to generate feature maps of increasing size to create H1:
Hk =
(
DECONVk([Hk+1; Gk]),
if k = 1, . . . , m −1
DECONVk(Gk),
if k = m .
We compute a single value for each pixel by projecting the
channel vector for each pixel using a single-layer perceptron
with a ReLU non-linearity. Finally, we compute a proba-
bility distribution over the feature map using a SOFTMAX.
The predicted location is the mode of the distribution.
6.2. Experimental Setup
The evaluation metrics are described in Section 3.2 and
the data in Section 5.
Learning
We use supervised learning. The gold label is a
Gaussian smoothed distribution. The coordinate of the max-
imal value of the distribution is the exact coordinate where
Touchdown is placed. We minimize the KL-divergence be-
tween the Gaussian and the predicted distribution.
Systems
We evaluate three non-learning baselines: (a)
RANDOM: predict a pixel at random; (b) CENTER: predict

Phenomenon
R2R
TOUCHDOWN
Example from TOUCHDOWN
Overall
Navigation
SDR
c
µ
c
µ
c
µ
c
µ
Reference to
25
3.7
25
10.7
25
9.2
25
3.2
. . . You’ll pass three trashcans on your left . . .
unique entity
Coreference
8
0.5
22
2.4
15
1.1
22
1.5
. . . a brownish colored brick building with a black fence around it...
Comparison
1
0.0
6
0.3
3
0.1
5
0.2
. . . The bear is in the middle of the closest tire.
Sequencing
4
0.2
22
1.9
21
1.6
9
0.4
. . . Turn left at the next intersection . . .
Count
4
0.2
11
0.5
9
0.4
8
0.3
. . . there are two tiny green signs you can see in the distance ...
Allocentric
5
0.2
25
2.9
17
1.2
25
2.2
. . . There is a ﬁre hydrant, the bear is on top
spatial relation
Egocentric
20
1.2
25
4.0
23
3.6
19
1.1
. . . up ahead there is some ﬂag poles on your right hand side...
spatial relation
Imperative
25
4.0
25
5.3
25
5.2
4
0.2
. . .Enter the next intersection and stop . . .
Direction
22
2.8
24
3.7
24
3.7
1
0.0
. . . Turn left. Continue forward . . .
Temporal condition
7
0.4
21
1.9
21
1.9
2
0.1
. . . Follow the road until you see a school on your right. . .
State veriﬁcation
2
0.1
21
1.8
18
1.5
16
0.8
. . .You should see a small bridge ahead . . .
Table 3. Linguistic analysis of 25 randomly sampled development examples in TOUCHDOWN and R2R. We annotate each example for
the presence and count of each phenomenon. We distinguish statistics for the entire text, navigation, and SDR segments in TOUCHDOWN.
c is the number of instructions out of the 25 containing at least one example of the phenomenon; µ is the mean number of times each
phenomenon appears in each of the 25 instructions.
the center pixel; (c) AVERAGE: predict the average pixel,
computed over the training set. In addition to a two-level
LINGUNET (m = 2), we evaluate three learning baselines:
CONCAT, CONCATCONV, and TEXT2CONV. The ﬁrst two
compute a RESNET18 feature map representation of the im-
age and then fuse it with the text representation to compute
pixel probabilities. The third uses the text to compute ker-
nels to convolve over the RESNET18 image representation.
The Supplementary Material provides further details.
6.3. Results
Table 4 shows development and test results. The low per-
formance of the non-learning baselines illustrates the chal-
lenge of the task. We also experiment with a UNET archi-
tecture that is similar to our LINGUNET but has no access to
the language. This result illustrates that visual biases exist
in the data, but only enable relatively low performance. All
the learning systems outperform the non-learning baselines
and the UNET, with LINGUNET performing best.
Figure 7 shows pixel-level predictions using LIN-
GUNET.
The distribution prediction is visualized as a
heatmap overlaid on the image. LINGUNET often success-
fully solves descriptions anchored in objects that are unique
in the image, such the ﬁre hydrant at the top image. The
lower example is more challenging. While the model cor-
rectly reasons that Touchdown is on a light just above the
doorway, it fails to ﬁnd the exact door. Instead, the prob-
ability distribution is shared between multiple similar loca-
tions, the space above three other doors in the image.
7. Navigation Baselines
7.1. Methods and Setup
We evaluate three non-learning baselines: (a) STOP:
agent stops immediately; (b) RANDOM: Agent samples
Method
A/C@40px
A/C@80px
A/C@120px
Dist
Development Results
RANDOM
0.18 / 0.00
0.59 / 0.00
1.28 / 0.00
1185
CENTER
0.55 / 0.07
1.62 / 0.07
3.26 / 0.36
777
AVERAGE
1.88 / 0.07
4.22 / 0.29
7.14 / 0.79
762
UNET
10.86 / 2.69
13.94 / 3.31
16.69 / 3.91
957
CONCAT
13.70 / 3.22
17.85 / 4.46
21.16 / 5.47
917
CONCATCONV
13.56 / 3.24
18.00 / 4.58
21.42 / 5.71
918
TEXT2CONV
24.03 / 7.60
29.36 / 10.02
32.60 / 11.42
783
LINGUNET
24.81 / 7.73
32.83 / 13.00
36.44 / 15.01
729
Test Results
RANDOM
0.21 / 0.00
0.78 / 0.00
1.89 / 0.00
1179
CENTER
0.31 / 0.00
1.61 / 0.21
3.93 / 0.57
759
AVERAGE
2.43 / 0.07
5.21 / 0.57
7.96 / 1.06
744
TEXT2CONV
24.82 / 8.21
30.40 / 11.73
34.13 / 13.32
747
LINGUNET
26.11 / 8.80
34.59 / 14.57
37.81 / 16.11
708
Table 4. Development and test results on the SDR task. We report
accuracy/consistency (A/C) with different thresholds (40, 80, and
120) and mean distance error.
non-stop actions uniformly until reaching the action hori-
zon; and (c) FREQUENT: agent always takes the most
frequent action in the training set (FORWARD). We also
evaluate two recent navigation models: (a) GA: gated-
attention [6]; and (b) RCONCAT: a recently introduced
model for landmark-based navigation in an environment
that uses Street View images [24]. We represent the input
images with RESNET18 features similar to the SDR task.
We use asynchronous training using multiple clients
to generate rollouts on different partitions of the training
data. We compute the gradients and updates using HOG-
WILD! [27] and ADAM learning rates [17]. We use super-
vised learning by maximizing the log-likelihood of actions
in the reference demonstrations.
The details of the models, learning, and hyperparameters
are provided in the Supplementary Material.

there will be a white/grey van parked on the right side of the road, and right behind the van on the walkway, there is a
black ﬁre hydrant with silver top, the touchdown is on the silver part of the ﬁre hydrant.
a black doorway with red brick to the right of it, and green brick to the left of it. it has a light just above the doorway,
and on that light is where you will ﬁnd touchdown.
Figure 7. SDR pixel-level predictions with LINGUNET. Red-overlaid pixels indicate the Gaussian smoothed target location. Bright green
overlay indicates the model’s predicted probability distribution over pixels.
7.2. Results
Table 5 shows development and test results for our three
valuation metrics (Section 3.1). The STOP, FREQUENT and
RANDOM illustrate the complexity of the task. The learned
baselines perform better. We observe that RCONCAT out-
performs GA across all three metrics. In general though,
the performance illustrates the challenge of the task. Ap-
pendix F includes additional navigation experiments, in-
cluding single-modality baselines.
8. Complete Task Performance
We use a simple pipeline combination of the best mod-
els of the SDR and navigation tasks to complete the full
task. Task completion is measured as ﬁnding Touchdown.
We observe an accuracy of 4.5% for a threshold of 80px.
In contrast, human performance is signiﬁcantly higher. We
estimate human performance using our annotation statis-
tics [32]. To avoid spam and impossible examples, we con-
sider only examples that were successfully validated. We
then measure the performance of workers that completed
over 30 tasks for these valid examples. This includes 55
workers. Because some examples required multiple tries to
validate this set includes tasks that workers failed to execute
but were later validated. The mean performance across this
set of workers using the set of valid tasks is 92% accuracy.
9. Data Distribution and Licensing
We release the environment graph as panorama IDs and
edges, scripts to download the RGB panoramas using the
Google API, the collected data, and our code at touch-
down.ai. These parts of the data are released with a CC-
BY 4.0 license. Retention of downloaded panoramas should
follow Google’s policies. We also release RESNET18 im-
Method
TC
SPD
SED
Development Results
STOP
0.0
26.7
0.0
FREQUENT
0.1
52.3
0.001
RANDOM
0.2
26.8
0.001
GA
7.9
21.5
0.077
RCONCAT
9.8
19.1
0.094
Test Results
STOP
0.0
27.0
0.0
FREQUENT
0.0
53.1
0.0
RANDOM
0.2
26.9
0.001
GA
5.5
21.3
0.054
RCONCAT
10.7
19.5
0.104
Table 5. Development and test navigation results.
age features of the RGB panoramas through a request form.
The complete license is available with the data.
10. Conclusion
We introduce TOUCHDOWN, a dataset for natural lan-
guage navigation and spatial reasoning using real-life vi-
sual observations. We deﬁne two tasks that require address-
ing a diverse set of reasoning and learning challenges. Our
linguistically-driven analysis shows the data presents com-
plex spatial reasoning challenges. This illustrates the bene-
ﬁt of using visual input that reﬂects the type of observations
people see in their daily life, and demonstrates the effective-
ness of our goal-driven data collection process.
Acknowledgements
This research was supported by a Google Faculty Award,
NSF award CAREER-1750499, NSF Graduate Research
Fellowship DGE-1650441, and the generosity of Eric and
Wendy Schmidt by recommendation of the Schmidt Futures
program. We wish to thank Jason Baldridge for his exten-
sive help and advice, and Valts Blukis and the anonymous
reviewers for their helpful comments.

References
[1] P. Anderson, A. X. Chang, D. S. Chaplot, A. Dosovitskiy,
S. Gupta, V. Koltun, J. Kosecka, J. Malik, R. Mottaghi,
M. Savva, and A. R. Zamir. On evaluation of embodied nav-
igation agents. CoRR, abs/1807.06757, 2018.
[2] P. Anderson, Q. Wu, D. Teney, J. Bruce, M. Johnson,
N. S¨underhauf, I. D. Reid, S. Gould, and A. van den Hen-
gel. Vision-and-Language Navigation: Interpreting visually-
grounded navigation instructions in real environments. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2018.
[3] S. Antol, A. Agrawal, J. Lu, M. Mitchell, D. Batra, C. L.
Zitnick, and D. Parikh. VQA: Visual question answering. In
IEEE International Conference on Computer Vision, pages
2425–2433, 2015.
[4] Y. Bisk, D. Marcu, and W. Wong. Towards a Dataset for
Human Computer Communication via Grounded Language
Acquisition. In Proceedings of the AAAI Workshop on Sym-
biotic Cognitive Systems, 2016.
[5] V. Blukis, D. Misra, R. A. Knepper, and Y. Artzi. Mapping
Navigation Instructions to Continuous Control Actions with
Position Visitation Prediction. In Proceedings of the Confer-
ence on Robot Learning, 2018.
[6] D. S. Chaplot, K. M. Sathyendra, R. K. Pasumarthi, D. Ra-
jagopal, and R. Salakhutdinov. Gated-Attention Architec-
tures for Task-Oriented Language Grounding. In Proceed-
ings of the AAAI Conference on Artiﬁcial Intelligence, 2018.
[7] D. L. Chen and R. J. Mooney. Learning to interpret natu-
ral language navigation instructions from observations. In
Proceedings of the National Conference on Artiﬁcial Intelli-
gence, 2011.
[8] X. Chen, H. Fang, T.-Y. Lin, R. Vedantam, S. Gupta,
P. Doll´ar, and C. L. Zitnick. Microsoft COCO Captions: Data
Collection and Evaluation Server. CoRR, 2015.
[9] A. Das, S. Datta, G. Gkioxari, S. Lee, D. Parikh, and D. Ba-
tra. Embodied Question Answering. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, 2018.
[10] H. de Vries, K. Shuster, D. Batra, D. Parikh, J. Weston, and
D. Kiela. Talk the Walk: Navigating New York City through
Grounded Dialogue.
arXiv preprint arXiv:1807.03367,
2018.
[11] O. Goldman, V. Latcinnik, E. Nave, A. Globerson, and J. Be-
rant. Weakly supervised semantic parsing with abstract ex-
amples. In Proceedings of the Annual Meeting of the As-
sociation for Computational Linguistics, pages 1809–1819,
2018.
[12] D. Gordon, A. Kembhavi, M. Rastegari, J. Redmon, D. Fox,
and A. Farhadi. IQA: Visual Question Answering in Interac-
tive Environments. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, 2018.
[13] Y. Goyal, T. Khot, D. Summers-Stay, D. Batra, and
D. Parikh.
Making the V in VQA Matter: Elevating the
Role of Image Understanding in Visual Question Answer-
ing. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, 2017.
[14] K. He, X. Zhang, S. Ren, and J. Sun. Deep Residual Learning
for Image Recognition. In IEEE Conference on Computer
Vision and Pattern Recognition, pages 770–778, 2016.
[15] S. Hochreiter and J. Schmidhuber. Long short-term memory.
Neural computation, 9, 1997.
[16] S. Kazemzadeh, V. Ordonez, M. Matten, and T. Berg. Refer-
ItGame: Referring to Objects in Photographs of Natural
Scenes.
In Proceedings of the Conference on Empirical
Methods in Natural Language Processing, pages 787–798,
2014.
[17] D. Kingma and J. Ba. Adam: A Method for Stochastic Opti-
mization. In Proceedings of the International Conference on
Learning Representations, 2014.
[18] N. Kitaev and D. Klein. Where is Misty? Interpreting Spatial
Descriptors by Modeling Regions in Space. In Proceedings
of the Conference on Empirical Methods in Natural Lan-
guage Processing, pages 157–166, 2017.
[19] E. Kolve, R. Mottaghi, D. Gordon, Y. Zhu, A. Gupta, and
A. Farhadi. AI2-THOR: An Interactive 3D Environment for
Visual AI. arXiv preprint arXiv:1712.05474, 2017.
[20] T.-Y. Lin, M. Maire, S. J. Belongie, L. D. Bourdev, R. B. Gir-
shick, J. Hays, P. Perona, D. Ramanan, P. Doll´ar, and C. L.
Zitnick. Microsoft COCO: Common Objects in Context. In
European Conference on Computer Vision, 2014.
[21] M. MacMahon, B. Stankiewics, and B. Kuipers. Walk the
Talk: Connecting Language, Knowledge, Action in Route
Instructions. In Proceedings of the National Conference on
Artiﬁcial Intelligence, 2006.
[22] J. Mao, J. Huang, A. Toshev, O. Camburu, A. Yuille, and
K. Murphy. Generation and Comprehension of Unambigu-
ous Object Descriptions. In IEEE Conference on Computer
Vision and Pattern Recognition, pages 11–20, 2016.
[23] C. Matuszek, N. FitzGerald, L. S. Zettlemoyer, L. Bo, and
D. Fox.
A Joint Model of Language and Perception for
Grounded Attribute Learning. In Proceedings of the Inter-
national Conference on Machine Learning, 2012.
[24] P. Mirowski, M. K. Grimes, M. Malinowski, K. M. Hermann,
K. Anderson, D. Teplyashin, K. Simonyan, K. Kavukcuoglu,
A. Zisserman, and R. Hadsell. Learning to Navigate in Cities
without a Map. Advances in Neural Information Processing
Systems, 2018.
[25] D. Misra, A. Bennett, V. Blukis, E. Niklasson, M. Shatkhin,
and Y. Artzi. Mapping Instructions to Actions in 3D Envi-
ronments with Visual Goal Prediction. In Proceedings of the
Conference on Empirical Methods in Natural Language Pro-
cessing. Association for Computational Linguistics, 2018.
[26] D. Misra, J. Langford, and Y. Artzi.
Mapping Instruc-
tions and Visual Observations to Actions with Reinforce-
ment Learning. In Proceedings of the Conference on Empir-
ical Methods in Natural Language Processing, pages 1004–
1015, 2017.
[27] B. Recht, C. Re, S. Wright, and F. Niu.
Hogwild: A
Lock-Free Approach to Parallelizing Stochastic Gradient
Descent. In Advances in Neural Information Processing Sys-
tems, 2011.
[28] S. Reed, Z. Akata, H. Lee, and B. Schiele. Learning Deep
Representations of Fine-Grained Visual Descriptions.
In
IEEE Conference on Computer Vision and Pattern Recog-
nition, pages 49–58, 2016.

[29] O. Ronneberger, P. Fischer, and T. Brox. U-Net: Convolu-
tional Networks for Biomedical Image Segmentation. CoRR,
abs/1505.04597, 2015.
[30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual
Recognition Challenge. International Journal of Computer
Vision, 115(3):211–252, 2015.
[31] A. Suhr, M. Lewis, J. Yeh, and Y. Artzi. A Corpus of Nat-
ural Language for Visual Reasoning. In Proceedings of the
Annual Meeting of the Association for Computational Lin-
guistics, pages 217–223, 2017.
[32] A. Suhr, S. Zhou, I. F. Zhang, H. Bai, and Y. Artzi. A cor-
pus for reasoning about natural language grounded in pho-
tographs. CoRR, abs/1811.00491, 2018.
[33] C. Yan, D. Misra, A. Bennnett, A. Walsman, Y. Bisk, and
Y. Artzi. CHALET: Cornell House Agent Learning Environ-
ment. arXiv preprint arXiv:1801.07357, 2018.
[34] C. L. Zitnick and D. Parikh. Bringing Semantics into Focus
Using Visual Abstraction. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
3009–3016, 2013.

A. Route Generation
We generate each route by randomly sampling two
panoramas in the environment graph, and querying the
Google Direction API7 to obtain a route between them that
follows correct road directions. Although the routes fol-
low the direction of allowed trafﬁc, the panoramas might
still show moving against the trafﬁc in two-way streets de-
pending on which lane was used for the original panorama
collection by Google. The route is segmented into multiple
routes with length sampled uniformly between 35 and 45.
We do not discard the sufﬁx route segment, which may be
shorter. Some ﬁnal routes had gaps due to our use of the
API. If the number of gaps is below three, we heuristically
connect the detached parts of the route by adding interme-
diate panoramas, otherwise we remove the route segment.
Each of the route segments is used in a separate instruction-
writing task. Because panoramas and route segments are
sampled randomly, the majority of route segments stop in
the middle of a block, rather than at an intersection. This
explicit design decision requires instruction-writers to de-
scribe exactly where in the block the follower should stop,
which elicits references to a variety of object types, rather
than simply referring to the location of an intersection.
B. Additional Data Analysis
We perform linguistically-driven analysis to two addi-
tional navigation datasets: SAIL [21, 7] and LANI [25],
both using simulated environments. Both datasets include
paragraphs segmented into single instructions. We performs
our analysis at the paragraph level. We use the same cat-
egories as in Section 5.
Table 6 shows the analysis re-
sults. In general, in addition to the more complex visual
input, TOUCHDOWN displays similar or increased linguis-
tic diversity compared to LANI and SAIL. LANI contains a
similar amount of coreference, egocentric spatial relations,
and temporal conditions, and more examples than TOUCH-
DOWN of imperatives and directions. SAIL contains a sim-
ilar number of imperatives, and more examples of counts
than TOUCHDOWN. We also visualize some of the common
nouns and modiﬁers observed in our data (Figure 8).
C. SDR Pixel-level Predictions
Figures 9–14 show SDR pixel-level predictions for com-
paring the four models we used: LINGUNET, CONCAT,
CONCATCONV, and CONCAT. Each ﬁgure shows the SDR
description to resolve followed by the model outputs. We
measure accuracy at a threshold of 80 pixels. Red-overlaid
pixels visualize the Gaussian smoothed annotated target lo-
cation. Green-overlaid pixels visualize the model’s proba-
bility distribution over pixels.
7https://developers.google.com/maps/documentation/directions/start
D. SDR Experimental Setup Details
D.1. Models
We use learned word vectors of size 300. For all mod-
els, we use a single-layer, bi-directional recurrent neu-
ral network (RNN) with long short-term memory (LSTM)
cells [15] to encode the description into a ﬁxed-size vector
representation. The hidden layer in the RNN has 600 unit.
We compute the text embedding by averaging the RNN hid-
den states.
We provide the model with the complete panorama. We
embed the panorama by slicing it into eight images, and
projecting each image from a equirectangular projection to
a perspective projection. Each of the eight projected images
is of size 800×460. We pass each image separately through
a RESNET18 [14] pretrained on ImageNet [30], and extract
features from the fourth to last layer before classiﬁcation;
each slice’s feature map is of size 128 × 100 × 58. Finally,
the features for the eight image slices are concatenated into
a single tensor of size 128 × 100 × 464.
CONCAT
We concatenate the text representation along
the channel dimension of the image feature map at each fea-
ture pixel and apply a multi-layer perceptron (MLP) over
each pixel to obtain a real-value score for every pixel in the
feature map. The multilayer perceptron includes two fully-
connected layers with biases and ReLu non-linearities on
the output of the ﬁrst layer. The hidden size of each layer
is 128. A SOFTMAX layer is applied to generate the ﬁnal
probability distribution over the feature pixels.
CONCATCONV
The network structure is the same as
CONCAT, except that after concatenating the text and image
features and before applying the MLP, we mix the features
across the feature map by applying a single convolution op-
eration with a kernel of size 5 × 5 and padding of 2. This
operation does not change the size of the image and text ten-
sor. We use a the same MLP architecture as in CONCAT on
the outputs of the convolution, and compute a distribution
over pixels with a SOFTMAX.
TEXT2CONV
Given the text representation and the fea-
turized image, we use a kernel conditioned on the text
to convolve over the image.
The kernel is computed
by projecting the text representation into a vector of size
409,600 using a single learned layer without biases or non-
linearities.
This vector is reshaped into a kernel of size
5×5×128×128, and used to convolve over the image fea-
tures, producing a tensor of the same size as the featurized
image. We use a the same MLP architecture as in CONCAT
on the outputs of this operation, and compute a distribution
over pixels with a SOFTMAX.
LINGUNET
We apply two convolutional layers to the im-
age features to compute F1 and F2. Each uses a learned

Phenomenon
SAIL [21]
LANI [25]
TOUCHDOWN
Paragraphs
Paragraphs
Overall
Navigation
SDR
c
µ
c
µ
c
µ
c
µ
c
µ
Reference to unique entity
24
4.0
25
7.2
25
10.7
25
9.2
25
3.2
Coreference
12
0.6
22
2.9
22
2.4
15
1.1
22
1.5
Comparison
0
0.0
2
0.1
6
0.3
3
0.1
5
0.2
Sequencing
4
0.2
2
0.1
22
1.9
21
1.6
9
0.4
Count
16
1.7
2
0.1
11
0.5
9
0.4
8
0.3
Allocentric spatial relation
9
0.4
3
0.2
25
2.9
17
1.2
25
2.2
Egocentric spatial relation
13
0.8
24
4.1
25
4.0
23
3.6
19
1.1
Imperative
23
4.5
25
9.0
25
5.3
25
5.2
4
0.2
Direction
23
4.5
25
5.8
24
3.7
24
3.7
1
0.0
Temporal condition
14
0.7
19
2.0
21
1.9
21
1.9
2
0.1
State veriﬁcation
11
0.5
0
0.0
21
1.8
18
1.5
16
0.8
Table 6. Linguistic analysis of 25 randomly sampled development examples in TOUCHDOWN, SAIL, and LANI.
kernel of size 5×5 and padding of 2. We split the text repre-
sentation into two vectors of size 300, and use two separate
learned layers to transform each vector into another vector
of size 16,384 that is reshaped to 1 × 1 × 128 × 128. The
result of this operation on the ﬁrst half of the text represen-
tation is K1, and on the second is K2. The layers do not
contain biases or non-linearities. These two kernels are ap-
plied to F1 and F2 to compute G1 and G2. Finally, we use
two deconvolution operations in sequence on G1 and G2 to
compute H1 and H2 using learned kernels of size 5×5 and
padding of 2.
D.2. Learning
We initialize parameters by sampling uniformly from
[−0.1, 0.1]. During training, we apply dropout to the word
embeddings with probability 0.5. We compute gradient up-
dates using ADAM [17], and use a global learning rate of
0.0005 for LINGUNET, and 0.001 for all other models. We
use early stopping with patience with a validation set con-
taining 7% of the training data to compute accuracy at a
threshold of 80 pixels after each epoch. We begin with a
patience of 4, and when the accuracy on the validation set
reaches a new maximum, patience resets to 4.
D.3. Evaluation
We compare the predicted location to the gold location
by computing the location of the feature pixel correspond-
ing to the gold location in the same scaling as the predicted
probability distribution. We scale the accuracy threshold
appropriately.
D.4. LINGUNET Architecture Clariﬁcations
Our LINGUNET implementation for SDR task differs
slightly from the original implementation [5]. We set the
stride for both convolution and devonvolution operations to
be 1, whereas in the original LINGUNET architecture the
stride is set to 2. Experiments with the original implemen-
tation show equivalent performance.
E. Navigation Experimental Setup Details
E.1. Models
At each step,
the agent observes the agent con-
text.
Formally, the agent context ˜s at time step t
is a tuple (¯xn, It, αt, ⟨(I1, α1, a1), . . . , (It−1, αt−1at−1)⟩),
where
¯xn
is
the
navigation
instruction,
It
is
the
panorama that is currently observed at heading αt, and
⟨(I1, α1, a1), . . . , (It−1, αt−1at−1)⟩is the sequence of pre-
viously observed panoramas, orientations, and selected ac-
tions. Given an agent context ˜s, the navigation model com-
putes action probabilities P(a | ˜s).
We use learned word vectors of size 32 for all models.
We map the instruction ¯xn to a vector x using a single-
layer uni-directional RNN with LSTM cells with 256 hid-
den units. The instruction representation x is the hidden
state of the ﬁnal token in the instruction.
We
generate
RESNET18
features
for
each
360◦
panorama It. We center the feature map according agent’s
heading αt. We crop a 128 × 100 × 100 sized feature map
from the center.
We pre-compute mean value along the
channel dimension for every feature map and save the re-
sulting 100×100 features. This pre-computation allows for
faster learning. We use the saved features corresponding to
It and the agent’s heading αt as ˆIt.
RCONCAT
We modify the model of Mirowski et al. [24]
for instruction-driven navigation. We use an RNN to embed
the instruction instead of a goal embedding, and do not em-
bed a reward signal. We apply a three-layer convolutional
neural network to ˆIt. The ﬁrst layer uses 32 8 × 8 kernels
with stride 4, and the second layer uses 64 4 × 4 kernels
with stride 4, applying ReLu non-linearities after each con-
volutional operation. We use a single fully-connected layer
including biases of size 256 on the output of the convolu-
tional operations to compute the observation’s representa-
tion I′
t. We learn embeddings a of size 16 for each action

Method
TC
SPD
SED
Development Results
RCONCAT
6.8
23.4
0.066
GA
6.5
24.0
0.064
Test Results
RCONCAT
9.0
22.6
0.086
GA + SUP
7.9
23.4
0.076
Table 7. Development and test navigation results using raw RGB
images.
Method
TC
SPD
SED
Development Results
RCONCAT NO-TEXT
24.48
7.26
0.07
RCONCAT NO-IMAGE
35.68
0.22
0.001
GA NO-TEXT
25.7
6.8
0.07
GA NO-IMAGE
50.1
0.1
0.0
Table 8. Single-modality development results.
a. For each time step t, we concatenate the instruction rep-
resentation x, observation representation I′
t, and action em-
bedding at−1 into a vector ˜st. For the ﬁrst time step, we
use a learned embedding for the previous action. We use a
single-layer RNN with 256 LSTM cells on the sequence of
time steps. The input at time t is ˜st and the hidden state is
ht. We concatenate a learned time step embedding t ∈R32
with ht, and use a single-layer perceptron with biases and a
SOFTMAX operation to compute P(at|˜st).
GA
We apply a three-layer convolutional neural network
to ˆIt. The ﬁrst layer uses 128 8 × 8 kernels with stride
4, and the second layer uses 64 4 × 4 kernels with stride
2, applying ReLu non-linearities after each convolutional
operation. We use a single fully-connected layer including
biases of size 64 on the output of the convolutional oper-
ations to compute the observation’s representation I′
t. We
use a single hidden layer with biases followed by a sigmoid
operation to map x into a vector g ∈R64. For each time
step t, we apply a gated attention on I′
t using g along the
channel dimension to generate a vector ut. We use a single
fully-connected layer with biases and a ReLu non-linearity
with ut to compute a vector vt ∈R256. We use a single-
layer RNN with 256 LSTM cells on the sequence of time
steps. The input at time t is vt and the hidden state is ht.
We concatenate a learned time step embedding t ∈R32
with ht, and use a single-layer perceptron with biases and a
SOFTMAX operation to compute P(at|˜st).
E.2. Learning
We train using asynchronous learning with six clients,
each using a different split of the training data. We use su-
pervised learning with HOGWILD! [27] and ADAM [17].
We generate a sequence of agent contexts and actions
{(˜si, ai)}N
i=1 from the reference demonstrations, and maxi-
mize the log-likelihood objective:
J = max
θ
N
X
i=1
ln pθ(ai | ˜si) ,
where θ is the model parameters.
Hyperparameters
We initialize parameters by sampling
uniformly from [−0.1, 0.1]. We set the horizon to 55 dur-
ing learning, and use an horizon of 50 during testing. We
stop training using SPD performance on the development
set. We use early stopping with patience, beginning with a
patience value of 5 and resetting to 5 every time we observe
a new minimum SPD error. The global learning rate is ﬁxed
at 0.00025.
F. Additional Navigation Experiments
F.1. Experiments with RGB Images
We also experiment with raw RGB images similar to
Mirowski et al. [24].
We project and resize each 360◦
panorama It to a 60◦perspective imageˆIt of size 3×84×84,
where the center of the panorama is the agent’s heading αt.
Table 7 shows the development and test results using RGB
images. We observe better performance using RESNET18
features compared to RGB images.
F.2. Single-modality Experiments
We study the importance of each of the two modalities,
language and vision, for the navigation task. We separately
remove the embeddings of the language (NO-TEXT) and
visual observations (NO-IMAGE) for both models. Table 8
shows the results. We observe no meaningful learning in
the absence of the vision modality, whereas limited perfor-
mance is possible without the natural language input. These
results show both modalities are necessary, and also indicate
that our navigation baselines (Table 5) beneﬁt relatively lit-
tle from the text.

Figure 8. An illustration of the referential language in our navigation (top) and SDR (bottom) instructions. We ranked all nouns by
frequency and removed stop words. We show the top ﬁve/eight nouns (most inner circle) for navigation and SDR. For each noun, we show
the most common modiﬁers that preﬁx it. The size of each segment is not relative to the frequency in the data.

the dumpster has a blue tarp draped over the end closest to you. touchdown is on the top of the blue tarp on the dumpster.
LINGUNET The model correctly predicts the location of Touchdown, putting most of the predicted distribution (green)
on the top-left of the dumpster at the center.
TEXT2CONV The model incorrectly predicts the location of Touchdown to the top of the car on the far right. While some
of the probability mass is correctly placed on the dumpster, the pixel with the highest probability is on the car.
CONCATCONV The model correctly predicts the location of Touchdown. The distribution is heavily concentrated at a
couple of nearby pixels.
CONCAT The prediction is similar to CONCATCONV.
Figure 9. Three of the models are doing fairly well. Only TEXT2CONV fails to predict the location of Touchdown.

turn to your right and you will see a green trash barrel between the two blue benches on the right. click to the base of the
green trash barrel to ﬁnd touchdown.
LINGUNET The model accurately predicts the green trash barrel on the right as Touchdown’s location.
TEXT2CONV The model predicts successfully as well. The distribution is focused on a smaller area compared to LIN-
GUNET closer to the top of the object. This possibly shows a learned bias towards placing Touchdown on the top of objects
that TEXT2CONV is more suceptible to.
CONCATCONV The model prediction is correct. The distribution is focused on fewer pixels compared to LINGUNET.
CONCAT The model prediction is correct. Similar to CONCATCONV, it focuses on a few pixels.
Figure 10. All the models predict the location of Touchdown correctly. Trash can is a relatively common object that workers use to place
Touchdown in the dataset .

on your right is a parking garage, there is a red sign with bikes parked out in front of the garage, the bear is on the red
sign.
LINGUNET The model predicted the location of Touchdown correctly to the red stop sign on the right side.
TEXT2CONV The model predicts the location of Touchdown correctly.
CONCATCONV The model predicts the location of Touchdown correctly.
CONCAT The model predicts the location of Touchdown correctly.
Figure 11. All the models predict the location of Touchdown correctly. Reference to a red sign are relatively common in the data (Figure 8)
potentially simplifying this prediction.

touch down will be chillin in front of a sign on your right hand side about half way down this street,before you get to the
sign there will be a multi color mural on the right w multiple colors and some writing on it.
LINGUNET The model fails to correctly predict the location of Touchdown, but is relatively close. The selected pixel is
104px from the correct one. The model focuses on the top of the sign instead of the bottom, potentially because of the
more common reference to the top, which is visually distinguished.
TEXT2CONV The model fails to correctly predict the location of Touchdown, but is relatively close. The selected pixel is
96px from the correct one.
CONCATCONV The model fails to predict the location of Touchdown, instead focusing on a person walking on the left.
CONCAT The model fails to predict the location of Touchdown, instead of focusing the person walking on the left, the
colorful sign mentioned in the description, and a car on the far right.
Figure 12. All the models fail to correctly identify the location of Touchdown. The predictions of LINGUNET, TEXT2CONV, and CON-
CATCONV seem to mix biases in the data with objects mentioned in the description, but fail to resolve the exact spatial description.

a row of blue bikes, touchdown is in the ﬁfth bike seat in the row, from the way you came.
LINGUNET The model correctly identiﬁes that a bike is mentioned, but fails to identify the exact bike or the location on
the bike seat. Instead the the distribution is divided between multiple bikes.
TEXT2CONV Similar to LINGUNET, the model identiﬁes the reference to bikes, but fails to identify the exact bike. The
uncertainty of the model is potentially illustrated by how it distributes the probability mass.
CONCATCONV The model correctly predicts the location of Touchdown. While the distribution is spread across multiple
bikes observed, the highest probability pixel is close enough (i.e., within 80 pixels) of the correct location.
CONCAT Similar to CONCATCONV, the model correctly predicts the location of Touchdown.
Figure 13. LINGUNET and TEXT2CONV fail to correctly identify the location, although their predicted distribution is focused on the
correct set of objects. In contrast, the simpler models, CONCAT and CONCATCONV, correctly predict the location of Touchdown.

on your right is a parking garage, there is a red sign with bikes parked out in front of the garage, the bear is on the red
sign.
LINGUNET The model misidentiﬁes the red sign on the left hand side as the correct answer. It fails to resolve the spatial
description, instead focusing on a more salient red object.
TEXT2CONV The model fails to predict the correct location, instead focusing on the red sign closer to the center.
CONCATCONV The model fails to predict the correct location, instead focusing on the red sign closer to the center.
CONCAT The model fails to predict the correct location, instead focusing on the red sign close to the center of the image.
Figure 14. All the models fail to identify the correct location. They focus unanimously on the red sign on the left hand side. They all ignore
the reference to the garage, which is hard to resolve visually.

