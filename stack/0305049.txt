arXiv:math/0305049v1  [math.CT]  2 May 2003
Higher Operads, Higher Categories
Tom Leinster
William Hodge Fellow
Institut des Hautes ´Etudes Scientiﬁques

c⃝2003 Tom Leinster
The author hereby asserts his moral right always to be identiﬁed as the author
of this work in accordance with the provisions of the UK Copyright, Designs and
Patent Acts (1988).
This is a preprint version of a book, to appear as
Tom Leinster, Higher Operads, Higher Categories, London Mathe-
matical Society Lecture Notes Series, Cambridge University Press,
ISBN 0-521-53215-9.
Publication is expected around October 2003. Details will appear at the Cam-
bridge University Press website, www.cambridge.org. You can pre-order now at
online book stores.
By special agreement with Cambridge University Press, the ﬁnal version of this
text will appear on the ArXiv one year after its publication in traditional form.
I would be grateful to hear of any errors: leinster@ihes.fr. A list will be
maintained at www.ihes.fr/∼leinster.

To
Martin Hyland
Wilson Sutherland
and
Mr Bull


Contents
Diagram of Interdependence
i
Acknowledgements
iii
Introduction
v
Motivation for Topologists
xi
The very rough idea
. . . . . . . . . . . . . . . . . . . . . . . . . .
xi
n-categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xiii
Stabilization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xviii
I
Background
1
1
Classical Categorical Structures
3
1.1
Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.2
Monoidal categories
. . . . . . . . . . . . . . . . . . . . . . . . . .
10
1.3
Enrichment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
1.4
Strict n-categories
. . . . . . . . . . . . . . . . . . . . . . . . . . .
18
1.5
Bicategories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
2
Classical Operads and Multicategories
33
2.1
Classical multicategories . . . . . . . . . . . . . . . . . . . . . . . .
34
2.2
Classical operads . . . . . . . . . . . . . . . . . . . . . . . . . . . .
42
2.3
Further theory
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
3
Notions of Monoidal Category
65
3.1
Unbiased monoidal categories . . . . . . . . . . . . . . . . . . . . .
66
3.2
Algebraic notions of monoidal category . . . . . . . . . . . . . . . .
74
3.3
Non-algebraic notions of monoidal category . . . . . . . . . . . . .
82
3.4
Notions of bicategory . . . . . . . . . . . . . . . . . . . . . . . . . .
92

6
CONTENTS
II
Operads
99
4
Generalized Operads and Multicategories: Basics
101
4.1
Cartesian monads . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
4.2
Operads and multicategories . . . . . . . . . . . . . . . . . . . . . . 107
4.3
Algebras . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
5
Example: fc-Multicategories
125
5.1
fc-multicategories . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
5.2
Weak double categories
. . . . . . . . . . . . . . . . . . . . . . . . 133
5.3
Monads, monoids and modules
. . . . . . . . . . . . . . . . . . . . 139
6
Generalized Operads and Multicategories: Further Theory
147
6.1
More on monads . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
6.2
Multicategories via monads . . . . . . . . . . . . . . . . . . . . . . 152
6.3
Algebras via ﬁbrations . . . . . . . . . . . . . . . . . . . . . . . . . 157
6.4
Algebras via endomorphisms
. . . . . . . . . . . . . . . . . . . . . 160
6.5
Free multicategories
. . . . . . . . . . . . . . . . . . . . . . . . . . 163
6.6
Structured categories . . . . . . . . . . . . . . . . . . . . . . . . . . 165
6.7
Change of shape
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
6.8
Enrichment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
7
Opetopes
177
7.1
Opetopes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
7.2
Categories of pasting diagrams
. . . . . . . . . . . . . . . . . . . . 185
7.3
A category of trees . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
7.4
Opetopic sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
7.5
Weak n-categories: a sketch . . . . . . . . . . . . . . . . . . . . . . 205
7.6
Many in, many out . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
III
n-Categories
217
8
Globular Operads
219
8.1
The free strict ω-category monad . . . . . . . . . . . . . . . . . . . 220
8.2
Globular operads . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
8.3
Algebras for globular operads . . . . . . . . . . . . . . . . . . . . . 229
9
A Deﬁnition of Weak n-Category
233
9.1
Contractions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
9.2
Weak ω-categories
. . . . . . . . . . . . . . . . . . . . . . . . . . . 238
9.3
Weak n-categories
. . . . . . . . . . . . . . . . . . . . . . . . . . . 243
9.4
Weak 2-categories
. . . . . . . . . . . . . . . . . . . . . . . . . . . 254
10 Other Deﬁnitions of Weak n-Category
259
10.1 Algebraic deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . . . 260
10.2 Non-algebraic deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . 267

CONTENTS
7
Appendices
279
A Symmetric Structures
279
A.1 Commutative monoids . . . . . . . . . . . . . . . . . . . . . . . . . 279
A.2 Symmetric multicategories . . . . . . . . . . . . . . . . . . . . . . . 282
B Coherence for Monoidal Categories
287
B.1
Unbiased monoidal categories . . . . . . . . . . . . . . . . . . . . . 289
B.2
Classical monoidal categories . . . . . . . . . . . . . . . . . . . . . 294
C Special Cartesian Monads
301
C.1
Operads and algebraic theories . . . . . . . . . . . . . . . . . . . . 302
C.2
Familially representable monads on Set . . . . . . . . . . . . . . . 308
C.3
Familially representable monads on presheaf categories . . . . . . . 316
C.4
Cartesian structures from symmetric structures . . . . . . . . . . . 323
D Free Multicategories
333
D.1 Proofs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
E Deﬁnitions of Tree
339
E.1
The equivalence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
F Free Strict n-Categories
343
F.1
Free enriched categories . . . . . . . . . . . . . . . . . . . . . . . . 344
F.2
Free n- and ω-categories . . . . . . . . . . . . . . . . . . . . . . . . 346
G Initial Operad-with-Contraction
351
G.1 The proof . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351
Bibliography
355
Glossary of Notation
363
Index
369

8
CONTENTS

Diagram of Interdependence
1
Classical categorical structures
2
Classical operads and multicategories
3
Notions
of
monoidal
category
multicats
fc−
Generalized
operads: further
B
G
n−category
of
n−category
A definition of
9
A
F
E
C
Generalized operads and multicategories: basics
5
6
4
7
Opetopes
8
Globular
operads
10
definitions
Other
D
Balloons are appendices, giving support in the form of proofs.
They can be
omitted if some results are taken on trust.

ii
Diagram of Interdependence

Acknowledgements
The ideas presented here have been at the centre of my research for most of
the last six years, during which time I have been inﬂuenced—for the better, I
think—by more people than I can thank formally here. Above all I feel moulded
by the people who were around me during my time in Cambridge. I want to
thank Martin Hyland in particular: his ways of thought have been a continual
inspiration, and I feel very lucky to have been his student and to have shared a
department with him for so long. I have also gained greatly from conversations
with Eugenia Cheng, Peter Johnstone, and Craig Snydal. Ivan Smith and Dick
Thomas have cheerfully acted as consultants for daft geometry questions.
Ian Grojnowski suggested this Lecture Notes series to me, and I am very glad
he did: I could not have wished for a more open-minded, patient and helpful
editor than Jonathan Walthoe at CUP. I would also like to thank Nigel Hitchin,
the series editor.
I am very grateful to Andrea Hesketh for sound strategic advice.
Some of the quotations starting the chapters were supplied, directly or indi-
rectly, by Sean Carmody, David Corﬁeld, and Colin Davey. Paul-Andr´e Melli`es
gave me important information on Swiss cheese.
Almost all of the software used in the preparation of this book was free, not
just ﬁnancially, but also in the libertarian sense: freedom to take it apart, alter
it, and propagate it, like a piece of mathematics. I am grateful to the thousands
of developers who brought about the truly remarkable situation that made this
possible.
I also acknowledge the use of Paul Taylor’s excellent commutative
diagrams package.
I started writing this when I was Laurence Goddard Research Fellow at St
John’s College, Cambridge, and ﬁnished when I was William Hodge Fellow at the
Institut des Hautes ´Etudes Scientiﬁques. The index was compiled while I was
visiting the University of Chicago at the invitation of Peter May. I am immensely
grateful to St John’s and the IH´ES for the opportunities they have given me, and
for their unwavering dedication to research. In particular, I thank the IH´ES for
giving me the chance to live in Paris and absorb some Russian culture.

iv
Acknowledgements

Introduction
It must be admitted that the use of geometric intuition
has no logical necessity in mathematics, and is often left
out of the formal presentation of results. If one had to
construct a mathematical brain, one would probably use
resources more eﬃciently than creating a visual system.
But the system is there already, it is used to great ad-
vantage by human mathematicians, and it gives a special
ﬂavor to human mathematics.
Ruelle [1999]
Higher-dimensional category theory is the study of a zoo of exotic structures:
operads, n-categories, multicategories, monoidal categories, braided monoidal
categories, and more.
It is intertwined with the study of structures such as
homotopy algebras (A∞-categories, L∞-algebras, Γ-spaces, . . . ), n-stacks, and n-
vector spaces, and draws it inspiration from areas as diverse as topology, quantum
algebra, mathematical physics, logic, and theoretical computer science.
No surprise, then, that the subject has developed chaotically. The rush to-
wards formalizing certain commonly-imagined concepts has resulted in an ex-
traordinary mass of ideas, employing diverse techniques from most of the subject
areas mentioned. What is needed is a transparent, natural, and practical lan-
guage in which to express these ideas.
The main aim of this book is to present one. It is the language of generalized
operads. It is introduced carefully, then used to give simple descriptions of a
variety of higher categorical structures.
I hope that by the end, the reader will be convinced that generalized oper-
ads provide as appropriate a language for higher-dimensional category theory as
vector spaces do for linear algebra, or sheaves for algebraic geometry. Indeed,
the reader may also come to share the feeling that generalized operads are as
applicable and pervasive in mathematics at large as are n-categories, the usual
focus of higher-dimensional category theorists.
Here are some of the structures that we will study, presented informally.
Let n ∈N. An n-category consists of 0-cells (objects) a, b, . . ., 1-cells (ar-
rows) f, g, . . ., 2-cells (arrows between arrows) α, β, . . ., 3-cells (arrows between
arrows between arrows) Γ, ∆, . . ., and so on, all the way up to n-cells, together

vi
Introduction
with various composition operations. The cells are usually drawn like this:
a
• ,
a•
f
-
b
• ,
a•
f
g
α R

∨
b
• ,
a•
f
g
α
β
Γ
⌟⌞
>
R
b
• ,
. . . .
Typical example: for any topological space X there is an n-category whose k-cells
are maps from the closed k-dimensional ball into X. A 0-category is just a set,
and a 1-category just an ordinary category.
A multicategory consists of objects a, b, . . ., arrows θ, φ, . . ., a composition
operation, and identities, just like an ordinary category, the diﬀerence being that
the domain of an arrow is not just a single object but a ﬁnite sequence of them.
An arrow is therefore drawn as
θ
HHHH




a1
a2
ak
...
a
(where k ∈N), and composition turns a tree of arrows into a single arrow. Vector
spaces and linear maps form a category; vector spaces and multilinear maps form
a multicategory.
An operad is a multicategory with only one object. Explicitly, an operad
consists of a set P(k) for each k ∈N, whose elements are thought of as ‘k-ary
operations’ and drawn as
θ
HHHH




...
with k input wires on the left, together with a rule for composing the operations
and an identity operation. Example: for any vector space V there is an operad
whose k-ary operations are the linear maps V ⊗k
- V .
Operads describe operations that take a ﬁnite sequence of things as input and
produce a single thing as output. A ﬁnite sequence is a 1-dimensional entity, so
operads can be used, for example, to describe the operation of composing a (1-
dimensional) string of arrows in a (1-)category. But if we are interested in higher-
dimensional structures such as n-categories then we need a more general notion
of operad, one where the inputs of an operation can form a higher-dimensional
shape—a grid, perhaps, or a tree, or a so-called pasting diagram. For each choice
of ‘input type’ T , there is a class of T -operads. A T -operad consists of a family
of operations whose inputs are of the speciﬁed type, together with a rule for
composition; for instance, if the input type T is ‘ﬁnite sequences’ then a T -
operad is an ordinary operad. Fig. 0-A shows typical operations θ in a T -operad,

vii
θ
HHHH




θ-
⇓
⇓
⇓
⇓
⇓
⇓
θ-
⇓
•
-
⇓
⇓
N

•
⇓
⇓
⇓
W
~
>
•
θ- •
R

⇓
•
Figure 0-A: Operations θ in four diﬀerent types of generalized operad
for four diﬀerent choices of T . Similarly, there are T -multicategories, where
the shapes at the domain and codomain of arrows are labelled with the names of
objects. These are the ‘generalized operads’ and ‘generalized multicategories’ at
the heart of this book.
The uniting feature of all these structures is that they are purely algebraic
in deﬁnition, yet near-impossible to understand without drawing or visualizing
pictures. They are inherently geometrical.
A notorious problem in this subject is the multiplicity of deﬁnitions of n-
category. Something like a dozen diﬀerent deﬁnitions have been proposed, and
there are still very few precise results stating equivalence between any of them.
This is not quite the scandal it may seem: it is hard to say what ‘equivalence’
should even mean. Suppose that Professors X and Y each propose a deﬁnition
of n-category. To compare their deﬁnitions, you ﬁnd a way of taking one of X’s
n-categories and deriving from it one of Y’s n-categories, and vice-versa, then
you try to show that doing one process then the other gets you back to where
you started. It is, however, highly unrealistic to expect that you will get back
to exactly where you started. For most types of mathematical structure, getting
back to somewhere isomorphic to your starting point would be a reasonable
expectation. But for n-categories, as we shall see, this is still unrealistic: the
canonical notion of equivalence of n-categories is much weaker than isomorphism.
Finding a precise deﬁnition of equivalence for a given deﬁnition of n-category can
be diﬃcult. Indeed, many of the proposed deﬁnitions of n-category did not come
with accompanying proposed deﬁnitions of equivalence, and this gap must be
almost certainly be ﬁlled before any comparison results can be proved.
Is this all ‘just language’? There would be no shame if it were: language can
have the most profound eﬀect. New language can make new concepts thinkable,
and make old, apparently obscure, concepts suddenly seem natural and obvious.
But there is no clear line between mathematical language and ‘real’ mathematics.
For example, we will see that a 3-category with only one 0-cell and one 1-cell
is precisely a braided monoidal category, and that the free braided monoidal
category on one object is the sequence (Bn)n∈N of braid groups. So if n-categories
are just language, not ‘real’ mathematical objects, then the same is true of the

viii
Introduction
braid groups, which describe conﬁgurations of knotted string. The distinction
begins to look meaningless.
Here is a summary of the contents.
Motivation for topologists
Topology and higher-dimensional category theory are intimately related. The
diagrams that one cannot help drawing when thinking about higher categorical
structures can very often be taken literally as pieces of topology. We start with
an informal discussion of the connections between the two subjects. This includes
various topological examples of n-categories, and an account of how the world of
n-categories is a mirror of the world of homotopy groups of spheres.
Part I: Background
We will build on various ‘classical’ notions. Those traditionally considered the
domain of category theorists are in Chapter 1: ordinary categories, bicategories,
strict n-categories, and enrichment. Classical operads and multicategories have
Chapter 2 to themselves. They should be viewed as categorical structures too,
although, anomalously, operads are best known to homotopy theorists and mul-
ticategories to categorical logicians.
The familiar concept of monoidal (tensor) category can be formulated in a
remarkable number of diﬀerent ways.
We look at several in Chapter 3, and
prove them equivalent. Monoidal categories can be identiﬁed with one-object
2-categories, so this is a microcosm of the comparison of diﬀerent deﬁnitions of
n-category.
Part II: Operads
This introduces the central idea of the text: that of generalized (‘higher’) operad
and multicategory. The deﬁnitions—of generalized operad and multicategory,
and of algebra for a generalized operad or multicategory—are stated and ex-
plained in Chapter 4, and some further theory is developed in Chapter 6.
There is a truly surprising theory of enrichment for generalized multicategories—
it is not at all the routine extension of traditional enriched category theory that
one might expect. This was to have formed Part IV of the book, but for reasons
of space it was (reluctantly) dropped. A summary of the theory, with pointers
to the original papers, is in Section 6.8.
The rest of Part II is made up of examples and applications. Chapter 5 is
devoted to so-called fc-multicategories, which are generalized multicategories for
a certain choice of input shape. They turn out to provide a clean setting for
some familiar categorical constructions that have previously been encumbered
by technical restrictions. In Chapter 7 we look at opetopic sets, structures anal-
ogous to simplicial sets and used in the deﬁnitions of n-category proposed by
Baez, Dolan, and others. Again, the language of higher operads provides a very

ix
clean approach; we also ﬁnd ourselves drawn inexorably into higher-dimensional
topology.
Part III: n-Categories
Using the language of generalized operads, some of the proposed deﬁnitions of n-
category are very simple to state. We start by concentrating on one in particular,
in which an n-category is deﬁned as an algebra for a certain globular operad. A
globular operad is a T -operad for a certain choice of input type T ; the associated
diagrams are complexes of disks, as in the last arrow θ of Fig. 0-A. Chapter 8
explains what globular operads are in pictorial terms. In Chapter 9 we choose a
particular globular operad, deﬁne an n-category as an algebra for it, and explore
the implications in some depth.
The many proposed deﬁnitions of n-category are not as dissimilar as they
might at ﬁrst appear.
We go through most of them in Chapter 10, drawing
together the common threads.
Appendices
This book is mostly about description: we develop language in which struc-
tures can be described simply and naturally, accurately reﬂecting their geometric
reality. In other words, we mostly avoid the convolutions and combinatorial com-
plexity often associated with higher-dimensional category theory. Where things
run less smoothly, and in other situations where a lengthy digression threatens
to disrupt the ﬂow of the main text, the oﬀending material is conﬁned to an
appendix. As long as a few plausible results are taken on trust, the entire main
text can be read and understood without looking at any of the appendices.
A few words on terminology are needed. There is a distinction between ‘weak’
and ‘strict’ n-categories, as will soon be explained. For many years only the strict
ones were considered, and they were known simply as ‘n-categories’. More re-
cently it came to be appreciated that weak n-categories are much more abundant
in nature, and many authors now use ‘n-category’ to mean the weak version. I
would happily join in, but for the following obstacle: in most parts of this book
that concern n-categories, both the weak and the strict versions are involved
and discussed in close proximity. It therefore seemed preferable to be absolutely
clear and say either ‘weak n-category’ or ‘strict n-category’ on every occasion.
The only exceptions are in this Introduction and the Motivation for Topologists,
where the modern convention is used.
The word ‘operad’ will be used in various senses. The most primitive kind
of operad is an operad of sets without symmetric group action, and this is our
starting point (Chapter 2).
We hardly ever consider operads equipped with
symmetric group actions, and when we do we call them ‘symmetric operads’; see
p. 34 for a more comprehensive warning.
Any ﬁnite sequence x1, . . . , xn of elements of a monoid has a product x1 · · · xn.
When n = 0, this is the the unit element.
Similarly, an identity arrow in a

x
Introduction
category can be regarded as the composite of a zero-length string of arrows placed
end to end. I have taken the view throughout that there is nothing special about
units or identities; they are merely nullary products or composites. Related to
this is a small but important convention: the natural numbers, N, start at zero.

Motivation for Topologists
I’m a goddess and a nerd!
Bright [1999]
Higher-dimensional category theory can be treated as a purely algebraic subject,
but that would be missing the point. It is inherently topological in nature: the
diagrams that one naturally draws to illustrate higher-dimensional structures can
be taken quite literally as pieces of topology. Examples of this are the braidings
in a braided monoidal category and the pentagon appearing in the deﬁnitions of
both monoidal category and A∞-space.
This section is an informal description of what higher-dimensional category
theory is and might be, and how it is relevant to topology. Grothendieck, for
instance, suggested that tame topology should be the study of n-groupoids; others
have hoped that an n-category of cobordisms between cobordisms between . . .
will provide a clean setting for topological quantum ﬁeld theory; and there is
convincing evidence that the whole world of n-categories is a mirror of the world
of homotopy groups of spheres.
There are no real theorems, proofs, or deﬁnitions here. But to whet your
appetite, here is a question to which we will reach an answer by the end:
Question
What is the close connection between the following two facts?
A No-one ever got into trouble for leaving out the brackets in a tensor product
of several objects (abelian groups, etc.). For instance, it is safe to write
A ⊗B ⊗C instead of (A ⊗B) ⊗C or A ⊗(B ⊗C).
B There exist non-trivial knots in R3.
The very rough idea
In ordinary category theory we have diagrams of objects and arrows such as
•
- •
- •
- • .

xii
Motivation for Topologists
We can imagine more complex category-like structures in which there are dia-
grams such as
.
This looks like an electronic circuit diagram or a ﬂow chart; the unifying idea is
that of ‘information ﬂow’. It can be redrawn as
,
which looks like a surface or a diagram from topological quantum ﬁeld theory.
We can also use diagrams like this to express algebraic laws such as commu-
tativity:
=
x
y
y
x
y · x
x
y
x · y
.

xiii
The fact that two-dimensional TQFTs are the same as commutative Frobenius
algebras is an example of an explicit link between the spatial and algebraic aspects
of diagrams like these.
Moreover, if we allow crossings, as in the commutativity diagram or as in
,
then we obtain pictures looking like knots; and as we shall see, there are indeed
relations between knot theory and higher categorical structures.
So the idea is:
Ordinary category theory uses 1-dimensional arrows
-
Higher-dimensional category theory uses higher-dimensional arrows
The natural topology of these higher-dimensional arrows is what makes higher-
dimensional category theory an inherently topological subject.
We will be concerned with structures such as operads, generalized operads
(of which the variety familiar to homotopy theorists is a basic special case),
multicategories, various ﬂavours of monoidal categories, and n-categories; in this
introduction I have chosen to concentrate on n-categories. Terminology: an n-
category (or ‘higher-dimensional category’) is not a special kind of category, but
a generalization of the notion of category; compare the usage of ‘quantum group’.
A 1-category is the same thing as an ordinary category, and a 0-category is just
a set.
n-categories
Here is a very informal
‘Deﬁnition’
Let n ≥0. An n-category consists of
• 0-cells or objects, A, B, . . .
• 1-cells or morphisms, drawn as A
f - B
• 2-cells A
f
g
αR

∨
B (‘morphisms between morphisms’)

xiv
Motivation for Topologists
• 3-cells A
f
g
α
β
Γ
⌟⌞
>
R

B (where the arrow labelled Γ is meant to be
going in a direction perpendicular to the plane of the paper)
• . . .
• all the way up to n-cells
• various kinds of composition, e.g.
A
f - B
g - C
gives
A
g◦f - C
A
f
g
h
α
β
-
∨
∨
N

B
gives
A
f
h
β◦α
R

∨
B
A
f
g
αR

∨
A′
f ′
g′
α′R

∨
A′′
gives
A
f ′◦f
g′◦g
α′ ∗α
R

∨
A′′,
and so on in higher dimensions; and similarly identities.
These compositions are required to ‘all ﬁt together nicely’—a phrase hiding many
subtleties. ω-categories (also known as ∞-categories) are deﬁned similarly, by
going on up the dimensions forever instead of stopping at n.
There is nothing forcing us to make the cells spherical here. We could, for
instance, consider cubical structures, in which 2-cells look like
•
-•
⇓
•?
-•.?
This is an inhabitant of the ‘zoo of structures’ mentioned earlier, but is not an
n-category as such. (See 1.4 and 5.2 for more on this particular structure.)
Critical Example
Any topological space X gives rise to an ω-category ΠωX
(its fundamental ω-groupoid), in which
• 0-cells are points of X, drawn as
•

xv
• 1-cells are paths in X (maps [0, 1]
- X), drawn as •
-• —though
whether that is meant to be a picture in the space X or the ω-category
ΠωX is deliberately ambiguous; the idea is to blur the distinction between
geometry and algebra
• 2-cells are homotopies of paths (relative to endpoints), drawn as •
R

⇓
•
• 3-cells are homotopies of homotopies of paths (that is, suitable maps [0, 1]3
-
X)
• . . .
• composition is by pasting paths and homotopies.
(The word ‘groupoid’ means that all cells of dimension higher than zero are
invertible.)
ΠωX should contain all the information you want about X if your context
is ‘tame topology’. In particular, you should be able to compute from it the
homotopy, homology and cohomology of X. You can also truncate after n steps
in order to obtain ΠnX, the fundamental n-groupoid of X; for instance, Π1X
is the familiar fundamental groupoid.
Alert
As you may have noticed, composition in ΠωX is not genuinely asso-
ciative; nor is it unital, and nor are the cells genuinely invertible (only up to
homotopy). We are therefore interested in weak n-categories, where the ‘ﬁtting
together nicely’ only happens up to some kind of equivalence, rather than strict
n-categories, where associativity and so on hold in the strict sense.
To deﬁne strict n-categories precisely turns out to be easy. To deﬁne weak
n-categories, we face the same kind of challenge as algebraic topologists did in
the 1960s, when they were trying to state the exact sense in which a loop space is
a topological group. It is clearly not a group in the literal sense, as composition
of paths is not associative; but it is associative up to homotopy, and if you
pick speciﬁc homotopies to do this job then these homotopies obey laws of their
own—or at least, obey them up to homotopy; and so on. At least two precise
formulations of ‘group up to (higher) homotopy’ became popular: Stasheﬀ’s A∞-
spaces and Segal’s special ∆-spaces. (More exactly, these are notions of monoid
or semigroup up to homotopy; the inverses are dealt with separately.)
The situation for weak n-categories is similar but more extreme: there are
something like a dozen proposed deﬁnitions and, as mentioned in the Introduc-
tion, not much has been proved about how they relate to one another. Happily,
we can ignore all this here and work informally. This means that nothing in the
rest of this section is true with any degree of certainty or accuracy.
At this point you might be thinking: can’t we do away with this diﬃcult
theory of weak n-categories and just stick to the strict ones? The answer is: if
you’re interested in topology, no. The diﬀerence between the weak and strict
theories is genuine and nontrivial: for while it is true that every weak 2-category
is equivalent to some strict one, and so it is also true that homotopy 2-types can

xvi
Motivation for Topologists
be modelled by strict 2-groupoids, neither of these things is true in dimensions
≥3. For instance, there exist spaces X (such as the 2-sphere S2) for which the
weak 3-category Π3X is not equivalent to any strict 3-category.
For the rest of this section, ‘n-category’ will mean ‘weak n-category’. The
strict ones are very much the lesser-spotted species.
Some More Examples
of ω-categories:
Top This is very similar to the Πω example above. Top has:
• 0-cells: topological spaces
• 1-cells: continuous maps
• 2-cells X
f
g
R

∨
Y : homotopies between f and g
• 3-cells: homotopies between homotopies (that is, suitable maps [0, 1]2×
X
- Y )
• . . .
• composition as expected.
ChCx This ω-category has:
• 0-cells: chain complexes (of abelian groups, say)
• 1-cells: chain maps
• 2-cells: chain homotopies
• 3-cells A
f
g
α
β
Γ
⌟⌞
>
R

B: homotopies between homotopies, that
is, maps Γ : A
- B of degree 2 such that dΓ −Γd = β −α
• . . .
• composition: more or less as expected, but some choices are involved.
For instance, if you try to write down the composite of two chain
homotopies •
R

⇓
•
R

⇓
• then you will ﬁnd that there are two equally
reasonable ways of doing it: one ‘left-handed’, one ‘right-handed’. This
is something like choosing the parametrization when deciding how to
compose two loops in a space (usual choice: do everything at double
speed). Somehow the fact that there is no canonical choice means that
the resulting ω-category is bound to be weak.
In a reasonable world there ought to be a weak ω-functor Chains : Top
-
ChCx.

xvii
Cobord This is an ω-category of cobordisms.
• 0-cells: 0-manifolds, where ‘manifold’ means ‘compact, smooth, ori-
ented manifold’. A typical 0-cell is
↑
•
↓
•
↑
•
↑
• .
• 1-cells: 1-manifolds with corners, that is, cobordisms between 0-manifolds,
such as
↓
↓
↑
↑
↓
↑
(this being a 1-cell from a 4-point 0-manifold to a 2-point 0-manifold).
Atiyah-Segal-style TQFT stops here and takes isomorphism classes of
the 1-cells just described, to make a category. We avoid this (unnat-
ural?) quotienting out and carry on up the dimensions.
• 2-cells: 2-manifolds with corners, such as
or
(leaving all the orientations oﬀ).
The right-hand diagram shows a
2-cell L
M
M′
N
R

∨
L′, where
L =
•
• ,
L′ =
•
•
•
• ,
M =
,
M ′ =
,
and N is the disjoint union of the two 2-dimensional sheets. Kho-
vanov [2001] discusses TQFTs with corners in the language of 2-
categories; his approach stops here and take isomorphism classes of

xviii
Motivation for Topologists
the 2-cells just described, to make a 2-category. Again, we do not
quotient out but keep going up the dimensions.
• 3-cells, 4-cells, . . . are deﬁned similarly
• composition is gluing of manifolds.
Some authors discuss ‘extended TQFTs’ using the notion of n-vector space.
A 0-vector space is a complex number, a 1-vector space is an ordinary
complex vector space, and n-vector spaces for higher n are something more
sophisticated. See the Notes below for references.
Stabilization
So far we have seen that topological structures provide various good examples of
n-categories, and that alone might be enough to convince you that n-categories
are interesting from a topological point of view. But the relationship between
topology and higher-dimensional category theory is actually much more intimate
than that. To see how, we analyse certain types of degenerate n-categories. It
will seem at ﬁrst as if this is a purely formal exercise, but before long the intrinsic
topology will begin to shine through.
Some Degeneracies
• A category C with only one object is the same thing as a monoid (semigroup
with unit) M. For if the single object of C is called ⋆, say, then C just con-
sists of the set Hom(⋆, ⋆) together with a binary operation of composition
and a unit element 1, obeying the usual axioms. So we have:
morphism in C
=
element of M
◦in C
=
· in M.
⋆?
x

y
• A 2-category C with only one 0-cell is the same thing as a monoidal category
M. (Private thought: if C has only one 0-cell then there are only interesting
things happening in the top two dimensions, so it must be some kind of
one-dimensional structure.) This works as follows:
1-cell in C
=
object of M
2-cell in C
=
morphism of M
composition •
-•
-• in C
=
⊗of objects in M
composition •
-
⇓
⇓
N

• in C
=
◦of morphisms in M.
• A monoidal category C with only one object is. . . well, if we forget the
monoidal structure for a moment then, as we have just seen, it is a monoid

xix
whose elements are the morphisms of C and whose multiplication is the
composition in C. Now, the monoidal structure on C provides not only a
tensor product for objects, but also a tensor product for morphisms: so
the set of morphisms of C has a second multiplication on it, ⊗. So a one-
object monoidal category is a set M equipped with two monoid structures
that are in some sense compatible (because of the axioms on a monoidal
category). A well-known result (1.2.4) says that in this situation, the two
multiplications are in fact equal and commutative. So, a one-object monoi-
dal category is a commutative monoid.
This is, essentially, the argument often used to prove that the higher ho-
motopy groups are abelian, or that the fundamental group of a topological
group is abelian. In fact, we can deduce that π2 is abelian from our ‘results’
so far:
Corollary: π2(X, x0) is abelian, for any space X with basepoint x0.
Proof: The 2-category Π2X has a sub-2-category whose only 0-cell is x0,
whose only 1-cell is the constant path at x0, and whose 2-cells are all the
possible ones from Π2X—that is, are the homotopies from the constant
path to itself, that is, are the elements of π2(X, x0). This sub-2-category is
a 2-category with only one 0-cell and one 1-cell, that is, a monoidal category
with only one object, that is, a commutative monoid.
• Next consider a 3-category with only one 0-cell and one 1-cell. We have not
looked at (weak) 3-categories in enough detail to work this out properly, but
it turns out that such a 3-category is the same thing as a braided monoidal
category. By deﬁnition, a braided monoidal category is a monoidal
category equipped with a map (a braiding)
A ⊗B
βA,B
- B ⊗A
for each pair (A, B) of objects, satisfying axioms not including that
(A ⊗B
βA,B
- B ⊗A
βB,A
- A ⊗B) = 1.
The canonical example of a braided monoidal category (in fact, the braided
monoidal category freely generated by a single object) is Braid. This has:
– objects: natural numbers 0, 1, . . .
– morphisms: braids, for instance
4
4
?
(taken up to homotopy); there are no morphisms m
- n when
m ̸= n

xx
Motivation for Topologists
– tensor: placing side-by-side (which on objects means addition)
– braiding: left over right, for instance
3 + 2
2 + 3
β3,2
?
(Note that βn,m◦βm,n is not the identity braid.)
• We are rapidly getting out of our depth, but nevertheless: we have already
considered n-categories that are only interesting in the top two dimensions
for n = 1, 2, and 3. These are categories, monoidal categories, and braided
monoidal categories respectively. What next? For r ≥4, an r-category
with only one i-cell for each i < r −1 is, people believe, the same as
a symmetric monoidal category (that is, a braided monoidal category in
which βB,A◦βA,B = 1 for all A, B). So the situation has stabilized. . . and
this is meant to make you start thinking of stabilization phenomena in
homotopy.
The Big Picture
Let us assemble this information on degeneracies system-
atically. Deﬁne an m-monoidal n-category to be an (m + n)-category with
only one i-cell for each i < m. (This is certainly some kind of n-dimensional
structure, as there are only interesting cells in the top (n + 1) dimensions.) Here
is what m-monoidal n-categories are for some low values of m and n, laid out in
the so-called ‘periodic table’. Explanation follows.
n
m
0
1
2
3
4
5
6
0
set
monoid
commutative
monoid
,,
,,
,,
,,
1
category
monoidal
category
braided
mon cat
symmetric
mon cat
,,
,,
,,
2
2-category
monoidal
2-category
braided
mon 2-cat
rhubarb
symmetric
mon 2-cat
,,
,,
3
3-category
monoidal
3-category
braided
mon 3-cat
rhubarb
rhubarb
symmetric
mon 3-cat
,,
9
:
take just the one-object structures

xxi
In the ﬁrst row (m = 0), a 0-monoidal n-category is simply an n-category: it
is not monoidal at all.
In the next row (m = 1), a 1-monoidal n-category is a monoidal n-category,
in other words, an n-category equipped with a tensor product that is associative
and unital up to equivalence of a suitable kind. For instance, a 1-monoidal 0-
category is a one-object category (a monoid), and a 1-monoidal 1-category is
a one-object 2-category (a monoidal category). A monoidal 2-category can be
deﬁned as a one-object 3-category, or can be deﬁned directly as a 2-category with
tensor.
We see from these examples, or from the general deﬁnition of m-monoidal
n-category, that going in the direction ւ means restricting to the one-object
structures.
Now look at the third row (m = 2). We have already seen that a degenerate
monoidal category is a commutative monoid and a doubly-degenerate 3-category
is a braided monoidal category. It is customary to keep writing ‘braided monoidal
n-category’ all along the row, but you can regard this as nothing more than name-
calling.
Next consider the ﬁrst column (n = 0).
A one-object braided monoidal
category is going to be a commutative monoid together with a little extra data
(for the braiding) satisfying some axioms, but in fact this is trivial and we do
not get anything new: in some sense, ‘you can’t get better than a commutative
monoid’. This gives the entry for m = 3, n = 0, and the same applies all the way
down the rest of the column.
A similar story can be told for the second column (n = 1). We saw—or rather,
I claimed—that for m ≥3, an m-monoidal 1-category is just a symmetric monoi-
dal category. So again the column stabilizes, and again the point of stabilization
is ‘the most symmetric thing possible’.
The same goes in subsequent columns.
The ‘rhubarbs’ could be replaced
by more terminology—for instance, the ﬁrst would become ‘sylleptic monoidal
2-category’—but the details are not important here.
The main point is that the table stabilizes for m ≥n+2—just like πm+n(Sm).
So if you overlaid a table of the homotopy groups of spheres onto the table above
then they would stabilize at the same points. There are arguments to see why
this should be so (and I remind you that this is all very informal and by no means
completely understood). Roughly, the fact that the archetypal braided monoidal
category Braid is not symmetric comes down to the fact that you cannot usually
translate two 1-dimensional aﬃne subspaces of 3-dimensional space past each
other, and this is the same kind of dimensional calculation as you make when
proving that the homotopy groups of spheres stabilize.
Answer
to the initial question:
A Every weak 2-category is equivalent to a strict one. In particular, every (weak)
monoidal category is equivalent to a strict one. So, for instance, we can
pretend that the monoidal category of abelian groups is strict, making ⊗
strictly associative.

xxii
Motivation for Topologists
B Not every weak 3-category is equivalent to a strict one. We can construct a
counterexample from what we have just done (details aside). Facts:
• a weak 3-category with one 0-cell and one 1-cell is a braided monoidal
category
• a strict 3-category with one 0-cell and one 1-cell is a strict symmetric
monoidal category
• any braided monoidal category equivalent to a symmetric monoidal
category is itself symmetric.
It follows that any non-symmetric braided monoidal category is a weak 3-
category not equivalent to a strict one. The canonical example is Braid
itself, which is non-symmetric precisely because the overpass
cannot
be deformed to the underpass
in R3.
Notes
Much has been written on the various interfaces between topology and higher category
theory. I will just mention a few texts that I happen to have come across.
Grothendieck puts the case that tame topology is really the study of ω-groupoids in
his epic [1983] letter to Quillen. A seminal paper of Shum [1994] establishes connections
between higher categorical structures and knot theory; see also Yetter [2001].
Another introduction to higher categories from a topological viewpoint, with many
similar themes to this one, is the ﬁrst half of Baez [1997].
Speciﬁcally 2-categorical approaches to topological quantum ﬁeld theory can be
found in Tillmann [1998] and Khovanov [2001]. n-vector spaces are explained in Kapra-
nov and Voevodsky [1994], and their possible role in topological ﬁeld theory is discussed
in Lawrence [1996].
The periodic table is an absolutely fundamental object of mathematics, only dis-
covered quite recently (Baez and Dolan [1995]), although foreshadowed in the work of
Breen and of Street and the Australian school. That the table stabilizes for m ≥n + 2
is the ‘Stabilization Hypothesis’. To state it precisely one needs to set up all the appro-
priate deﬁnitions ﬁrst. A form of it has been proved by Simpson [1998], and a heuristic
argument in the semistrict case has been given by Crans [2000, 3.8].
I have made one economy with the truth: a (weak) monoidal category with only
one object is not exactly a commutative monoid, but rather a commutative monoid
equipped with a distinguished invertible element; see Leinster [1999a, 1.6(vii)] for the
reason.
One interesting idea not mentioned above is a higher categorical approach to non-
abelian cohomology:
speciﬁcally, nth cohomology should have coeﬃcients in an n-
category. This is explained in Street [1987, Introduction].
A serious and, of course, highly recommended survey of the proposed deﬁnitions of
weak n-category, including ten such deﬁnitions, is my own [2001b].

Part I
Background


Chapter 1
Classical Categorical
Structures
We will need to use some very simple notions of cate-
gory theory, an esoteric subject noted for its diﬃculty
and irrelevance
Moore and
Seiberg [1989]
You might imagine that you would need to be on top of the whole of ordinary cate-
gory theory before beginning to attempt the higher-dimensional version. Happily,
this is not the case. The main prerequisite for this book is basic categorical lan-
guage, such as may be found in most introductory texts on the subject. Except
in the appendices, we will need few actual theorems.
The purpose of this chapter is to recall some familiar categorical ideas and
to explain some less familiar ones. Where the boundary lies depends, of course,
on the reader, but very little here is genuinely new. Section 1.1 is on ordinary,
‘1-dimensional’, category theory, and is a digest of the concepts that will be used
later on. Impatient readers will want to skip immediately to 1.2, monoidal cat-
egories. This covers the basic concepts and two kinds of coherence theorem. 1.3
is a short section on categories enriched in monoidal categories. We need enrich-
ment in the next section, 1.4, on strict n-categories and strict ω-categories. This
sets the scene for later chapters, where we consider the much more profound and
interesting weak n-categories. Finally, in 1.5, we discuss bicategories, the best-
known notion of weak 2-category, including coherence and their (not completely
straightforward) relation to monoidal categories.
Examples of all these structures are given.
Topological spaces and chain
complexes are, as foreshadowed in the Motivation for Topologists, a recurring
theme.

4
Classical Categorical Structures
1.1
Categories
This section is a sketch of the category theory on which the rest of the text is
built. I have also taken the opportunity to state some notation and some small
results that will eventually be needed.
In later chapters I will assume familiarity with the language of categories,
functors, and natural transformations, and the basics of limits and adjunctions.
I will also use the basic language of monads (sometimes still called ‘triples’). As
monads are less well known than the other concepts, and as they will be central
to this text, I have included a short introduction to them below.
Given objects A and B of a category A, I write A(A, B) for the set of maps
(or morphisms, or arrows) from A to B, in preference to the less informative
Hom(A, B). The opposite or dual of A is written Aop. Isomorphism between
objects in a category is written ∼=. For any two categories A and B, there is
a category [A, B] whose objects are functors from A to B and whose maps are
natural transformations.
My set-theoretic morals are lax; I have avoided questions of ‘size’ whenever
possible. Where the issue is unavoidable, I have used the words small and large
to mean ‘forming a set’ and ‘forming a proper class’ respectively. Some readers
may prefer to re-interpret this using universes. A category is small if its collection
of arrows is small.
The category of sets is written as Set and the category of small categories as
Cat; occasionally I refer to CAT, the (huge) category of all categories. There
are functors
Cat
 D
ob -

I
Set,
where
• D sends a set A to the discrete category on A, whose object-set is A and
all of whose maps are identities
• ob sends a category to its set of objects
• I sends a set A to the indiscrete category on A, whose object-set is A
and which has precisely one map a
- b for each a, b ∈A; all maps are
necessarily isomorphisms.
We use limits (‘inverse limits’, ‘projective limits’) and colimits (‘direct lim-
its’, ‘inductive limits’). Binary product is written as × and arbitrary product as
Q; dually, binary coproduct (sum) is written as + and arbitrary coproduct as
`. Nullary products are terminal (ﬁnal) objects, written as 1; in particular, 1
often denotes a one-element set. The unique map from an object A of a category
to a terminal object 1 of that category is written ! : A
- 1.
We will make particular use of pullbacks (ﬁbred products). Pullback squares

1.1 Categories
5
are indicated by right-angle marks:
P
- B
A
?
- C.
?
We also write P = A×C B. In later chapters dozens of elementary manipulations
of diagrams involving pullback squares are left to the hypothetical conscientious
reader; almost all are made easy by the following invaluable lemma.
Lemma 1.1.1 (Pasting Lemma) Take a commutative diagram of shape
·
- ·
- ·
·
?
- ·
?
- ·
?
in some category, and suppose that the right-hand square is a pullback. Then the
left-hand square is a pullback if and only if the outer rectangle is a pullback.
2
An adjunction is a pair of functors A
F-

G
B together with an isomorphism
B(FA, B)
∼- A(A, GB)
(1:1)
natural in A ∈A and B ∈B. Then F is left adjoint to G, G is right adjoint
to F, and I write F ⊣G. In most of the examples that we meet, G is a forgetful
functor and F the corresponding free functor. A typical example is that A is the
category of sets, B is the category of monoids (sets equipped with an associative
binary multiplication and a two-sided unit), G forgets the monoid structure, and
F sends a set A to the monoid
FA =
a
n∈N
An
of ﬁnite sequences of elements of A, whose multiplication is concatenation of
sequences.
Take an adjunction as above, and let A ∈A: then applying isomorphism (1:1)
to 1F A ∈B(FA, FA) yields a map ηA : A
- GFA. The resulting natural
transformation η : 1A
- GF is the unit of the adjunction. Dually, there is
a counit ε : FG
- 1B, and the unit and counit satisfy the so-called triangle
identities (Mac Lane [1971, IV.1(9)]). In fact, an adjunction can equivalently be
deﬁned as a quadruple (F, G, η, ε) where
A
F- B,
B
G- A,
1A
η- GF,
FG
ε- 1B
(1:2)
and η and ε satisfy the triangle identities.

6
Classical Categorical Structures
Equivalence of categories can be formulated in several ways. By deﬁnition,
an equivalence of categories A and B consists of functors and natural transfor-
mations (1:2) such that η and ε are isomorphisms. An adjoint equivalence is
an adjunction (F, G, η, ε) that is also an equivalence. A functor F : A
- B
is essentially surjective on objects if for all B ∈B there exists A ∈A such
that FA ∼= B.
Proposition 1.1.2 The following conditions on a functor F : A
- B are
equivalent:
a. there exist G, η and ε such that (F, G, η, ε) is an adjoint equivalence
b. there exist G, η and ε such that (F, G, η, ε) is an equivalence
c. F is full, faithful, and essentially surjective on objects.
Proof See Mac Lane [1971, IV.4.1].
2
If the conditions of the proposition are satisﬁed then the functor F is called an
equivalence. If the categories A and B are equivalent then we write A ≃B (in
contrast to A ∼= B, which denotes isomorphism).
Monads are a remarkably economical formalization of the notion of ‘algebraic
theory’, traditionally formalized by universal algebraists in various rather con-
crete and inﬂexible ways. For example, there is a monad corresponding to the
theory of rings, another monad for the theory of complex Lie algebras, another
for the theory of topological groups, another for the theory of strict 10-categories,
and so on, as we shall see.
A monad on a category A can be deﬁned as a monoid in the monoidal category
([A, A], ◦, 1A) of endofunctors on A. Explicitly:
Deﬁnition 1.1.3 A monad on a category A consists of a functor T : A
-
A together with natural transformations
µ : T ◦T
- T,
η : 1A
- T,
called the multiplication and unit respectively, such that the diagrams
T ◦T ◦T
T ◦T
T µ

T ◦T
µT
-
T
µ

µ
-
T ◦1
T ◦T
T η

T
id
?
µ
-
1◦T
T ◦T
ηT
-
T
id
?
µ

commute (the associativity and unit laws).
Any adjunction
B
A
F 6
⊣G
?

1.1 Categories
7
induces a monad (T, µ, η) on A: take T = G◦F, η to be the unit of the adjunction,
and
µ = GεF : GFGF
- GF
where ε is the counit. Often A is the category of sets and B is a category of
‘algebras’ of some kind, as in the following examples.
Example 1.1.4 Take the free-forgetful adjunction between the category of monoids
and the category of sets, as above. Let (T, µ, η) be the induced monad. Then
T A is `
n∈N An, the set of ﬁnite sequences of elements of A, for any set A. The
multiplication µ strips inner brackets from double sequences:
T (T A)
µA-
T A,
((a1
1, . . . , ak1
1 ), . . . , (a1
n, . . . , akn
n ))
7−→
(a1
1, . . . , ak1
1 , . . . , a1
n, . . . , akn
n )
(n, ki ∈N, aj
i ∈A). The unit η forms sequences of length 1:
A
ηA-
T A,
a
7−→
(a).
Example 1.1.5 Fix a ring R. One can form the free R-module on any given
set, and conversely one can take the underlying set of any R-module, giving an
adjunction
R-Mod
Set
F 6
⊣G
?
hence a monad (T, µ, η) on Set. Explicitly, if A is a set then T A is the set of
formal R-linear combinations of elements of A. The multiplication µ realizes a
formal linear combination of formal linear combinations as a single formal linear
combination, and the unit η realizes an element of a set A as a trivial linear
combination of elements of A.
Example 1.1.6 The same goes for all other ‘algebraic theories’: groups, Lie
algebras, Boolean algebras, . . . . The functor T sends a set A to the set of formal
words in the set A (which in some cases, such as that of groups, is cumbersome to
describe). There is no need for the ambient category A to be Set: the theory of
topological groups, for instance, gives a monad on the category Top of topological
spaces.
A monad is meant to be an algebraic theory, so if we are handed a monad then
we ought to be able to say what its ‘models’ are. For instance, if we are handed
the monad of 1.1.5 then its ‘models’ should be exactly R-modules. Formally, if
T = (T, µ, η) is a monad on a category A then a T -algebra is an object A ∈A
together with a map h : T A
- A compatible with the multiplication and unit

8
Classical Categorical Structures
of the monad: see Mac Lane [1971, VI.2] for the axioms. In the case of 1.1.5, a
T -algebra is a set A equipped with a function
h : {formal R-linear combinations of elements of A}
- A
satisfying some axioms, and this does indeed amount exactly to an R-module.
The category of algebras for a monad T = (T, µ, η) on a category A is written
AT . There is an evident forgetful functor AT
- A, this has a left adjoint
(forming ‘free T -algebras’), and the monad on A induced by this adjunction is
just the original T . So every monad arises from an adjunction, and informally
we have
{monads on A} ⊂{adjunctions based on A}.
The inclusion is proper: not every adjunction is of the form AT
⊤-

A just
described. For instance, the forgetful functor Top
- Set has a left adjoint
(forming discrete spaces); the induced monad on Set is the identity, whose cat-
egory of algebras is merely Set, and Set ̸≃Top. The adjunctions that do arise
from monads are called monadic. All of the adjunctions in Examples 1.1.4–1.1.6
are monadic, and the non-monadicity of the adjunction Top
⊤-

Set expresses
the thought that topology is not algebra.
Presheaves will be important.
A presheaf on a category A is a functor
Aop
- Set. Any object A ∈A gives rise to a presheaf A(−, A) on A, and this
deﬁnes a functor
A
-
[Aop, Set]
A
7−→
A(−, A),
the Yoneda embedding. It is full and faithful. This follows from the Yoneda
Lemma, which states that if A ∈A and X is a presheaf on A then natural
transformations A(−, A)
- X correspond one-to-one with elements of XA.
If E is a category and S a set then there is a category ES, a power of E,
whose objects are S-indexed families of objects of E. On the other hand, if E
is a category and E an object of E then there is a slice category E/E, whose
objects are maps D
p- E into E and whose maps are commutative triangles.
If S is a set then there is an equivalence of categories
SetS ≃Set/S,
(1:3)
given in one direction by taking the disjoint union of an S-indexed family of sets,
and in the other by taking ﬁbres of a set over S.
There is an analogue of (1:3) in which the set S is replaced by a category.
Fix a small category A. The replacement for SetS is [Aop, Set], but what should
replace the slice category Set/S? First note that any presheaf X on A gives rise
to a category A/X, the category of elements of X, whose objects are pairs
(A, x) with A ∈A and x ∈XA and whose maps
(A′, x′)
- (A, x)
are maps f : A′
- A in A such that x′ = (Xf)(x).
There is an evident
forgetful functor A/X
- A, the Grothendieck ﬁbration of X. This is an
example of a discrete ﬁbration, that is, a functor G : D
- C such that

1.1 Categories
9
for any object D ∈D and map C′
p- GD in C, there is a unique
map D′
q- D in D such that Gq = p.
Discrete ﬁbrations over C (that is, with codomain C) can be made into a category
DFib(C) in a natural way, and this is the desired generalization of slice category.
We then have an equivalence
[Aop, Set] ≃DFib(A),
given in one direction by taking categories of elements, and in the other by taking
ﬁbres in a suitable sense. There is also a dual notion of discrete opﬁbration,
and an equivalence
[A, Set] ≃DOpﬁb(A).
A presheaf category is a category equivalent to [Aop, Set] for some small
A. The class of presheaf categories is closed under slicing:
Proposition 1.1.7 Let A be a small category and X a presheaf on A. Then
there is an equivalence of categories
[Aop, Set]/X ≃[(A/X)op, Set].
2
Finally, we will need just a whisper of internal category theory. If A is any
category with ﬁnite products then an (internal) group in A consists of an
object A ∈A together with maps m : A × A
- A (multiplication), e : 1
-
A (unit), and i : A
- A (inverses), such that certain diagrams expressing the
group axioms commute. Thus, a group in Set is an ordinary group, a group in
the category of smooth manifolds is a Lie group, and so on. A similar deﬁnition
pertains for algebraic structures other than groups. Categories themselves can
be deﬁned in this way: if A is any category with pullbacks then an (internal)
category C in A is a diagram
C1
C0
dom

C0
cod
-
in A together with maps
C1 ×C0 C1
comp
- C1,
C0
ids- C1
in A, satisfying certain axioms. Here C1 ×C0 C1 is the pullback
C1 ×C0 C1
 @
C1

C1
-
C0.
dom

cod
-

10
Classical Categorical Structures
When A = Set we recover the usual notion of small category: C0 and C1 are
the sets of objects and of arrows, dom and cod are the domain and codomain
functions, C1 ×C0 C1 is the set of composable pairs of arrows, comp and ids
are the functions determining binary composition and identity maps, and the
axioms specify the domain and codomain of composites and identities and express
associativity and identity laws. When A = Top we obtain a notion of ‘topological
category’, in which both the set of objects and the set of arrows carry a topology.
For instance, given any space X, there is a topological category C = Π1X in
which C0 = X and C1 is X[0,1]/ ∼, the space of all paths in X factored out by
path homotopy relative to endpoints.
1.2
Monoidal categories
Monoidal categories come in a variety of ﬂavours: strict, weak, plain, braided,
symmetric. We look brieﬂy at strict monoidal categories but spend most time
on the more important weak case and on the coherence theorem: every weak
monoidal category is equivalent to a strict one.
In the terminology of the previous section, a strict monoidal category is
an internal monoid in Cat, that is, a category A equipped with a functor
⊗:
A × A
-
A,
(A, B)
7−→
A ⊗B
and an object I ∈A, obeying strict associativity and unit laws:
(A ⊗B) ⊗C = A ⊗(B ⊗C),
I ⊗A = A,
A ⊗I = A
for all objects A, B, C ∈A, and similarly for morphisms. Functoriality of ⊗
encodes the ‘interchange laws’:
(g′◦f ′) ⊗(g◦f) = (g′ ⊗g)◦(f ′ ⊗f)
(1:4)
for all maps g′, f ′, f, f for which these composites make sense, and 1A ⊗1B =
1A⊗B for all objects A and B.
Since one is usually not interested in equality of objects in a category, only
in isomorphism, strict monoidal categories are quite rare.
Example 1.2.1 The category [C, C] of endofunctors on a given category C has a
strict monoidal structure given by composition (as ⊗) and 1C (as I).
Example 1.2.2 Given a natural number n (possibly 0), let n denote the n-
element set {1, . . . , n} with its usual total order. Let D be the category whose ob-
jects are the natural numbers and whose maps m
- n are the order-preserving
functions m
- n. This is the ‘augmented simplex category’, one object bigger
than the standard topologists’ ∆, and is equivalent to the category of (possibly
empty) ﬁnite totally ordered sets. It has a strict monoidal structure given by
addition and 0.

1.2 Monoidal categories
11
Example 1.2.3 A category with only one object is just a monoid (p. xviii): if
the category is called A and its single object is called ⋆then the monoid is the set
M = A(⋆, ⋆) with composition ◦as multiplication and the identity 1 = 1⋆as unit.
A one-object strict monoidal category therefore consists of a set M with monoid
structures (◦, 1) and (⊗, 1) (the latter being tensor of arrows in the monoidal
category), such that (1:4) holds for all g′, f ′, g, f ∈M. Lemma 1.2.4 below tells
us that this forces the binary operations ◦and ⊗to be equal and commutative.
So a one-object strict monoidal category is just a commutative monoid.
Lemma 1.2.4 (Eckmann–Hilton [1962]) Suppose that ◦and ⊗are binary
operations on a set M, satisfying (1:4) for all g′, f ′, g, f ∈M, and suppose that
◦and ⊗share a two-sided unit. Then ◦= ⊗and ◦is commutative.
Proof Write 1 for the unit. Then for g, f ∈M,
g◦f = (g ⊗1)◦(1 ⊗f) = (g◦1) ⊗(1◦f) = g ⊗f,
so ◦= ⊗, and
g◦f = (1 ⊗g)◦(f ⊗1) = (1◦f) ⊗(g◦1) = f ⊗g,
so ◦is commutative.
2
Much more common are weak monoidal categories, usually just called ‘mo-
noidal categories’.
Deﬁnition 1.2.5 A (weak) monoidal category is a category A together with
a functor ⊗: A × A
- A, an object I ∈A (the unit), and isomorphisms
(A ⊗B) ⊗C
αA,B,C
∼- A ⊗(B ⊗C),
I ⊗A
λA
∼- A,
A ⊗I
ρA
∼- A
natural in A, B, C ∈A (coherence isomorphisms), such that the following
diagrams commute for all A, B, C, D ∈A:
(A ⊗B) ⊗(C ⊗D)

αA⊗B,C,D
1
PPPPPPPPPPP
αA,B,C⊗D
q
((A ⊗B) ⊗C) ⊗D
A ⊗(B ⊗(C ⊗D))
@@@
αA,B,C⊗1D R
   1A⊗αB,C,D

(A ⊗(B ⊗C)) ⊗D
αA,B⊗C,D
- A ⊗((B ⊗C) ⊗D)
(A ⊗I) ⊗B
αA,I,B- A ⊗(I ⊗B)
@@@
ρA⊗1B R
	
   1A⊗λB
A ⊗B.

12
Classical Categorical Structures
The pentagon and triangle axioms ensure that ‘all diagrams’ constructed out of
coherence isomorphisms commute. This is one form of the coherence theorem,
discussed below.
Example 1.2.6 Strict monoidal categories can be identiﬁed with monoidal cat-
egories in which all the components of α, λ and ρ are identities.
Example 1.2.7 Let A be a category in which all ﬁnite products exist. Choose a
particular terminal object 1, and for each A, B ∈A a particular product diagram
A pr1
A × B
pr2- B. Then A acquires a monoidal structure with ⊗= × and
I = 1; the maps α, λ and ρ are the canonical ones.
Example 1.2.8 For any commutative ring R, the category of R-modules is mo-
noidal with respect to the usual tensor ⊗R and unit object R.
Example 1.2.9 Take a topological space with basepoint. There is a monoidal
category whose objects are loops on the basepoint and whose maps are homotopy
classes of loop homotopies (relative to the basepoint). We have to take homotopy
classes so that the ordinary categorical composition obeys associativity and iden-
tity laws. Tensor is concatenation of loops (on objects) and gluing of homotopies
(on maps). The coherence isomorphisms are the evident reparametrizations.
Earlier we met the notion of (internal) algebraic structures, such as groups,
in a category with ﬁnite products.
There is no clear way to extend this to
arbitrary monoidal categories, since to express an axiom such as x · x−1 = 1
diagrammatically requires the product-projections. We can, however, deﬁne a
monoid in a monoidal category A as an object A together with maps
m : A ⊗A
- A,
e : I
- A
such that associativity and unit diagrams similar to those in Deﬁnition 1.1.3 com-
mute. With the obvious notion of map, this gives a category Mon(A) of monoids
in A. When A is the category of sets, with product as monoidal structure, this
is the usual category of monoids.
There are various notions of map between monoidal categories. In what fol-
lows we use ⊗, I, α, λ, and ρ to denote the monoidal structure of both the
categories concerned.
Deﬁnition 1.2.10 Let A and A′ be monoidal categories.
A lax monoidal
functor F = (F, φ) : A
- A′ is a functor F : A
- A′ together with
coherence maps
φA,B : FA ⊗FB
- F(A ⊗B),
φ· : I
- FI
in A′, the former natural in A, B ∈A, such that the following diagrams commute

1.2 Monoidal categories
13
for all A, B, C ∈A:
(FA ⊗FB) ⊗FC
φA,B⊗1F C
- F(A ⊗B) ⊗FC
φA⊗B,C
- F((A ⊗B) ⊗C)
FA ⊗(FB ⊗FC)
αF A,F B,F C ?
1F A⊗φB,C
- FA ⊗F(B ⊗C) φA,B⊗C
- F(A ⊗(B ⊗C))
F αA,B,C
?
FA ⊗I
1F A⊗φ·
- FA ⊗FI
φA,I
- F(A ⊗I)
FA
ρF A
?
======================== FA
F ρA
?
I ⊗FA
φ·⊗1F A
- FI ⊗FA
φI,A
- F(I ⊗A)
FA
λF A
?
======================== FA.
F λA
?
A colax monoidal functor F = (F, φ) : A
- A′ is a functor F : A
- A′
together with maps
φA,B : F(A ⊗B)
- FA ⊗FB,
φ· : FI
- I
satisfying axioms dual to those above. A weak (respectively, strict) monoidal
functor is a lax monoidal functor (F, φ) in which all the maps φA,B and φ· are
isomorphisms (respectively, identities).
We write MonCatlax for the category of monoidal categories and lax maps, and
similarly MonCatcolax, MonCatwk, and MonCatstr. There are various alter-
native systems of terminology; in particular, what we call weak monoidal functors
are sometimes called ‘strong monoidal functors’ or just ‘monoidal functors’.
Example 1.2.11 The forgetful functor U : Ab
- Set from abelian groups to
sets has a lax monoidal structure with respect to the usual monoidal structures
on Ab and Set, given by the canonical maps
UA × UB
- U(A ⊗B)
(A, B ∈Ab) and the map 1
- UZ picking out 0 ∈Z.
Example 1.2.12 Let C be a category and A a monoidal category.
A weak
monoidal functor from A to the monoidal category [C, C] of endofunctors on
C (1.2.1) is called an action of A on C, and amounts to a functor A × C
- C
together with coherence isomorphisms satisfying axioms.
To state one of the forms of the coherence theorem we will need a notion
of equivalence of monoidal categories, and for this we need in turn a notion of
transformation.

14
Classical Categorical Structures
Deﬁnition 1.2.13 Let (F, φ), (G, ψ) : A
- A′ be lax monoidal functors.
A monoidal transformation (F, φ)
- (G, ψ) is a natural transformation
σ : F
- G such that the following diagrams commute for all A, B ∈A:
FA ⊗FB
σA⊗σB
- GA ⊗GB
F(A ⊗B)
φA,B ?
σA⊗B
- G(A ⊗B)
ψA,B
?
I ===== I
FI
φ·
?
σI
- GI.
ψ·
?
A weak monoidal functor (F, φ) is called an equivalence of monoidal cate-
gories if it satisﬁes the conditions of the following proposition.
Proposition 1.2.14 The following conditions on a weak monoidal functor (F, φ) :
A
- A′ are equivalent:
a. there exist a weak monoidal functor (G, ψ) : A′
- A and invertible
monoidal transformations
η : 1A
- (G, ψ)◦(F, φ),
ε : (F, φ)◦(G, ψ)
- 1A′
b. the functor F is an equivalence of categories.
Proof
If F is an equivalence of categories then by Proposition 1.1.2, there
exist a functor G and transformations η and ε such that (F, G, η, ε) is an adjoint
equivalence. It is easy to verify that G acquires a weak monoidal structure and
that η and ε are then invertible monoidal transformations.
2
A coherence theorem is, roughly, a description of a structure that makes it
more manageable. For example, one coherence theorem for monoidal categories is
that all diagrams built out of the coherence isomorphisms commute. Another is
that any weak monoidal category is equivalent to some strict monoidal category.
All non-trivial applications of monoidal categories rely on a coherence theorem
in some form; the axioms as they stand are just too unwieldy. Indeed, one might
argue that the ‘all diagrams commute’ principle should be an explicit part of the
deﬁnition of monoidal category, and we will take this approach when we come to
deﬁne higher-dimensional categorical structures.
‘All diagrams commute’ can be made precise in various ways. A very direct
statement is in Mac Lane [1971, VII.2], and a less direct (but sharper) statement

1.2 Monoidal categories
15
is 3.2.3 below. A typical instance is that the diagram
(A ⊗(I ⊗B)) ⊗C
((A ⊗I) ⊗B) ⊗C
α−1
A,I,B⊗1

A ⊗((I ⊗B) ⊗C)
αA,I⊗B,C
-
(A ⊗B) ⊗C
(ρA⊗1)⊗1
?
A ⊗(B ⊗C)
1⊗(λB⊗1)

αA,B,C
-
(1:5)
commutes for all objects A, B, C of a monoidal category. We will soon see how
this follows from the alternative form of the coherence theorem:
Theorem 1.2.15 (Coherence for monoidal categories) Every monoidal cat-
egory is equivalent to some strict monoidal category.
Here is how not to prove this: take a monoidal category A, form a quotient strict
monoidal category A′ by turning isomorphism into equality, and show that the
natural map A
- A′ is an equivalence. To see why this fails, ﬁrst note that
a monoidal category may have the property that any two isomorphic objects are
equal (and so, in particular, the tensor product of objects is strictly associative
and unital), but even so need not be strict—the coherence isomorphisms need
not be identities. An example can be found in Mac Lane [1971, VII.1]. If A
has this property then identifying isomorphic objects of A has no eﬀect at all.
One might attempt to go further by identifying the coherence isomorphisms with
identities—for instance, identifying the two maps
(A ⊗B) ⊗C
αA,B,C
-
1 - A ⊗(B ⊗C)
—to make a strict monoidal category A′; but then the quotient map A
- A′
is not faithful, so not an equivalence.
Sketch proof of 1.2.15 This is a modiﬁcation of Joyal and Street’s proof [1993,
1.4]. Let A be a monoidal category. We deﬁne a strict monoidal category A′ and
a monoidal equivalence y : A
- A′. An object of A′ is a pair (E, δ) where E is
an endofunctor of the (unadorned) category A and δ is a family of isomorphisms

δA,B : (EA) ⊗B
∼- E(A ⊗B)

A,B∈A
natural in A and B and satisfying the evident coherence axioms. Tensor in A′ is
(E′, δ′) ⊗(E, δ) = (E′◦E, δ′′)

16
Classical Categorical Structures
where δ′′ is deﬁned in the only sensible way; then A′ is a strict monoidal category.
The functor y is given by
y(Z) = (Z ⊗−, αZ,−,−).
It is weak monoidal and full, faithful and essentially surjective on objects, so
by 1.2.14 an equivalence of monoidal categories.
2
Joyal and Street motivate their proof as a generalization of the Cayley Theorem
representing any group as a group of permutations.
We ﬁnd another way of
looking at it when we come to bicategories (1.5).
Now let us deduce that ‘all diagrams commute’, or at least, by way of example,
that diagram (1:5) commutes. For any objects A, B and C of any monoidal
category, write
(A ⊗(I ⊗B)) ⊗C
χA,B,C
-
ωA,B,C
- A ⊗(B ⊗C)
for the two composite coherence maps shown in (1:5).
Now take a particu-
lar monoidal category A and objects A, B, C ∈A; we want to conclude that
χA,B,C = ωA,B,C. We have a monoidal equivalence (F, φ) from A to a strict
monoidal category A′, and a serially commutative diagram
(FA ⊗(I ⊗FB)) ⊗FC
χF A,F B,F C
-
ωF A,F B,F C
- FA ⊗(FB ⊗FC)
F((A ⊗(I ⊗B)) ⊗C)
φ
?
F χA,B,C-
F ωA,B,C
- F(A ⊗(B ⊗C))
φ
?
where the maps labelled φ are built out of φ· and various φD,E’s.
(‘Serially
commutative’ means that both the top and the bottom square commute.) Since
A′ is strict, χF A,F B,F C = ωF A,F B,F C; then since the φ’s are isomorphisms,
FχA,B,C = FωA,B,C; then since F is faithful, χA,B,C = ωA,B,C, as required.
There are similar diagrammatic coherence theorems for monoidal functors,
saying, for instance, that if (F, φ) is a lax monoidal functor then any two maps
((FA ⊗FB) ⊗I) ⊗(FC ⊗FD)
-
- F(A ⊗((B ⊗C) ⊗D))
built out of copies of the coherence maps are equal. The form of the codomain
is important, being F applied to a product of objects; in contrast, the coherence
maps can be assembled to give two maps
FI
-
- FI ⊗FI
that are in general not equal. See Lewis [1972] for both this counterexample and
a precise statement of coherence for monoidal functors.
Many everyday monoidal categories have a natural symmetric structure. For-
mally, a symmetric monoidal category is a monoidal category A together with a
speciﬁed isomorphism γA,B : A ⊗B
- B ⊗A for each pair (A, B) of objects,

1.3 Enrichment
17
satisfying coherence axioms. There are various coherence theorems for symmetric
monoidal categories (Mac Lane [1963], Joyal and Street [1993]). Beware, however,
that the symmetry isomorphisms γA,B cannot be turned into identities: every
symmetric monoidal category is equivalent to some symmetric strict monoidal
category, but not usually to any strict symmetric monoidal category. The latter
structures—commutative monoids in Cat—are rare.
More general than symmetric monoidal categories are braided monoidal cate-
gories, mentioned in the Motivation for Topologists. See Joyal and Street [1993]
for the deﬁnitions and coherence theorems, and Gordon, Power and Street [1995]
for a 3-dimensional perspective.
1.3
Enrichment
In many basic examples of categories C, the hom-sets C(A, B) are richer than
mere sets. For instance, if C is a category of chain complexes then C(A, B) is an
abelian group, and if C is a suitable category of topological spaces then C(A, B)
is itself a space.
This idea is called ‘enrichment’ and can be formalized in various ways. The
best-known, enrichment in a monoidal category, is presented here. We will see
later (6.8) that it is not the most natural or general formalization, but it serves
a purpose before we reach that point.
Deﬁnition 1.3.1 Let V be a category. A V-graph X is a set X0 together with
a family (X(x, x′))x,x′∈X0 of objects of V. A map of V-graphs f : X
- Y is
a function f0 : X0
- Y0 together with a family of maps

X(x, x′)
fx,x′- Y (f0x, f0x′)

x,x′∈X0
.
We usually write both f0 and fx,x′ as just f. The category of V-graphs is written
V-Gph.
A Set-graph is, then, an ordinary directed graph. A category is a directed graph
equipped with composition and identities, suggesting the following deﬁnition.
Deﬁnition 1.3.2 Let (V, ⊗, I) be a monoidal category. A category enriched
in V, or V-enriched category, is a V-graph A together with families of maps

A(b, c) ⊗A(a, b)
compa,b,c
- A(a, c)

a,b,c∈A0
,

I
idsa- A(a, a)

a∈A0
in V satisfying associativity and identity axioms (expressed as commutative di-
agrams). A V-enriched functor F : A
- B is a map of the underlying
V-graphs commuting with the composition maps compa,b,c and identity maps
idsa. This deﬁnes a category V-Cat.

18
Classical Categorical Structures
A (Set, ×, 1)-enriched category is, of course, an ordinary (small) category, and
an (Ab, ⊗, Z)-enriched category is an Ab-category in the sense of homological
algebra. A one-object V-enriched category is a monoid in the monoidal category
V. Compare and contrast internal and enriched categories: in the case of topo-
logical spaces, for instance, an internal category in Top is an ordinary category
equipped with a topology on the set of objects and a topology on the set of all
arrows, whereas a category enriched in Top is an ordinary category equipped
with a topology on each hom-set.
Any lax monoidal functor Q = (Q, φ) : V
- W induces a functor
Q∗: V-Cat
- W-Cat.
In particular, if V is any monoidal category then the functor V(I, −) : V
-
Set has a natural lax monoidal structure, and the induced functor deﬁnes the
underlying category of a V-enriched category.
This does exactly what we
would expect in the familiar cases of V.
In the next section we will enrich in categories V whose monoidal structure
is ordinary (cartesian) product. The following result will be useful; its proof is
straightforward.
Proposition 1.3.3
a. If V is a category with ﬁnite products then the category
V-Cat also has ﬁnite products.
b. If Q : V
- W is a ﬁnite-product-preserving functor between categories
with ﬁnite products then the induced functor Q∗: V-Cat
- W-Cat also
preserves ﬁnite products.
2
The theory of categories enriched in a monoidal category can be taken much
further: see Kelly [1982], for instance. Under the assumption that V is symmetric
monoidal closed and has all limits and colimits, very large parts of ordinary
category theory can be extended to the V-enriched context.
1.4
Strict n-categories
Strict n-categories are not encountered nearly as often as their weak cousins, but
there are nevertheless some signiﬁcant examples.
We start with a very short deﬁnition of strict n-category, and some examples.
This deﬁnition, being iterative, can seem opaque, so we then formulate a much
longer but equivalent deﬁnition providing a complementary viewpoint. We then
look brieﬂy at the inﬁnite-dimensional case, strict ω-categories, and at the cubical
analogue of strict n-categories.
The deﬁnition of strict n-category uses enrichment in a category with ﬁnite
products.
Deﬁnition 1.4.1 Let (Str-n-Cat)n∈N be the sequence of categories given in-
ductively by
Str-0-Cat = Set,
Str-(n + 1)-Cat = (Str-n-Cat)-Cat.

1.4 Strict n-categories
19
A strict n-category is an object of Str-n-Cat, and a strict n-functor is a
map in Str-n-Cat.
This makes sense by Proposition 1.3.3(a).
Strict 0-categories are sets and strict 1-categories are categories. A strict 2-
category A consists of a set A0, a category A(a, b) for each a, b ∈A0, composition
functors as in 1.3.2, and an identity object of A(a, a) for each a ∈A0, all obeying
associativity and identity laws.
Example 1.4.2 There is a (large) strict 2-category A in which A0 is the class
of topological spaces and, for spaces X and Y , A(X, Y ) is the category whose
objects are continuous maps X
- Y and whose arrows are homotopy classes of
homotopies. (We need to take homotopy classes so that composition in A(X, Y )
is associative and unital.) The composition functors
A(Y, Z) × A(X, Y )
- A(X, Z)
(1:6)
and the identity objects 1X ∈A(X, X) are the obvious ones.
Example 1.4.3 Similarly, there is a strict 2-category A in which A0 is the class
of chain complexes and A(X, Y ) is the category whose objects are chain maps
X
- Y and whose arrows are homotopy classes of chain homotopies, in the
sense of p. xvi. (This time we need to take homotopy classes in order that the
composition functors (1:6) really are functorial.)
Example 1.4.4 There is, self-referentially, a strict 2-category Cat of categories.
Here Cat0 is the class of small categories and Cat(C, D) is the functor category
[C, D].
In fact, there is for each n ∈N a strict (n + 1)-category of strict n-
categories: it can be proved by induction that for each n the category Str-n-Cat
is cartesian closed, which implies that it is naturally enriched in itself, in other
words, forms a strict (n + 1)-category. Sensitive readers may ﬁnd this shocking:
the entire (n + 1)-category of strict n-categories can be extracted from the mere
1-category.
We now build up to an alternative and more explicit deﬁnition of strict n-
category.
A category can be regarded as a directed graph with structure. The most
obvious n-dimensional analogue of a directed graph uses spherical or ‘globular’
shapes, as in the following deﬁnition.
Deﬁnition 1.4.5 Let n ∈N. An n-globular set X is a diagram
X(n)
s-
t- X(n −1)
s-
t-
· · ·
s-
t- X(0)
of sets and functions, such that
s(s(x)) = s(t(x)),
t(s(x)) = t(t(x))
(1:7)
for all m ∈{2, . . . , n} and x ∈X(m).

20
Classical Categorical Structures
Alternatively, an n-globular set is a presheaf on the category Gn generated
by objects and arrows
n σn

τn
n −1 
σn−1

τn−1
· · ·
σ1

τ1
0
subject to equations
σm◦σm−1 = τm◦σm−1,
σm◦τm−1 = τm◦τm−1
(m ∈{2, . . ., n}). The category of n-globular sets can then be deﬁned as the
presheaf category [Gop
n , Set].
Let X be an n-globular set. Elements of X(m) are called m-cells of X and
drawn as labels on an m-dimensional disk. Thus, a ∈X(0) is drawn as
a
•
(and sometimes called an object rather than a 0-cell), and f ∈X(1) is drawn as
a•
f
-
b
•
where a = s(f) and b = t(f). We call s(x) the source of x, and t(x) the target;
these are alternative names for ‘domain’ and ‘codomain’. A 2-cell α ∈X(2) is
drawn as
a•
f
g
α R

?
b
•
where
f = s(α),
g = t(α),
a = s(f) = s(g),
b = t(f) = t(g).
That s(f) = s(g) and t(f) = t(g) follows from the globularity equations (1:7). A
3-cell x ∈X(3) is drawn as
a•
f
g
α
β
x-
R

R
	
b
•
where α = s(x), β = t(x), and so on.
Sometimes, as in the Motivation for
Topologists, I have used double-shafted arrows for 2-cells, triple-shafted arrows
for 3-cells, and so on, and sometimes, as here, I have stuck to single-shafted
arrows for cells of all dimensions; this is a purely visual choice.

1.4 Strict n-categories
21
Example 1.4.6 Let n ∈N and let S be a topological space: then there is an n-
globular set in which an m-cell is a labelled m-dimensional disk in S. Formally, let
Dm be the closed m-dimensional Euclidean disk (ball), and consider the diagram
Dn 

Dn−1 

· · ·


D0 = 1
formed by embedding Dm−1 as the upper or lower cap of Dm. This is a functor
Gn
- Top (an ‘n-coglobular space’), and so induces a functor Gop
n
- Set,
the n-globular set
Top(Dn, S)
-
- Top(Dn−1, S)
-
-
· · ·
-
- Top(D0, S).
Example 1.4.7 Analogously, any non-negatively graded chain complex C of
abelian groups give rise to an n-globular set X for each n ∈N. An m-cell of X
is not quite just an element of Cm; for instance, we regard an element f of C1 as
a 1-cell a
- b for any a, b ∈C0 such that d(f) = b −a. In general, an element
of X(m) is a (2m + 1)-tuple
c = (cm, c−
m−1, c+
m−1, c−
m−2, c+
m−2, . . . , c−
0 , c+
0 )
where cm ∈Cm, c−
p , c+
p ∈Cp, and
d(cm) = c+
m−1 −c−
m−1,
d(c−
p ) = d(c+
p ) = c+
p−1 −c−
p−1
for all p ∈{1, . . . , m −1}. We then put
s(c) = (c−
m−1, c−
m−2, c+
m−2, . . . , c−
0 , c+
0 )
and dually the target.
In the following alternative deﬁnition, a strict n-category is an n-globular set
equipped with identities and various binary composition operations, satisfying
various axioms. Identities are simple: every p-cell x has an identity (p + 1)-cell
1x on it (0 ≤p < n), as in
a
•
7−→
a•
1a
- a
• ,
a•
f
-
b
•
7−→
a•
f
f
1f R

?
b
•
(p = 0, 1).
There are m diﬀerent binary composition operations for m-cells.
When m = 1 this is ordinary categorical composition. We saw the 2 possibilities
for composing 2-cells on p. xiv. The 3 ways of composing 3-cells are drawn as
•
- R

^

•
- R

^

•,
•
-
-
-
N

R
	
R
	
•,
•
R

s
+
?
- -
•.

22
Classical Categorical Structures
To express this formally we write, for any n-globular set A and 0 ≤p ≤m ≤n,
A(m) ×A(p) A(m) = {(x′, x) ∈A(m) × A(m) | tm−p(x) = sm−p(x′)},
the set of pairs of m-cells with the potential to be joined along p-cells.
Deﬁnition 1.4.8 Let n ∈N.
A strict n-category is an n-globular set A
equipped with
• a function ◦p : A(m) ×A(p) A(m)
- A(m) for each 0 ≤p < m ≤n; we
write ◦p (x′, x) as x′ ◦p x and call it a composite of x and x′
• a function i : A(p)
- A(p + 1) for each 0 ≤p < n; we write i(x) as 1x
and call it the identity on x,
satisfying the following axioms:
a. (sources and targets of composites) if 0 ≤p < m ≤n and (x′, x) ∈
A(m) ×A(p) A(m) then
s(x′ ◦p x) = s(x)
and
t(x′ ◦p x) = t(x′)
if p = m −1
s(x′ ◦p x) = s(x′) ◦p s(x)
and
t(x′ ◦p x) = t(x′) ◦p t(x)
if p ≤m −2
b. (sources and targets of identities) if 0 ≤p < n and x ∈A(p) then s(1x) =
x = t(1x)
c. (associativity) if 0 ≤p < m ≤n and x, x′, x′′ ∈A(m) with (x′′, x′), (x′, x) ∈
A(m) ×A(p) A(m) then
(x′′ ◦p x′) ◦p x = x′′ ◦p (x′ ◦p x)
d. (identities) if 0 ≤p < m ≤n and x ∈A(m) then
im−p(tm−p(x)) ◦p x = x = x ◦p im−p(sm−p(x))
e. (binary interchange) if 0 ≤q < p < m ≤n and x, x′, y, y′ ∈A(m) with
(y′, y), (x′, x) ∈A(m) ×A(p) A(m),
(y′, x′), (y, x) ∈A(m) ×A(q) A(m)
then
(y′ ◦p y) ◦q (x′ ◦p x) = (y′ ◦q x′) ◦p (y ◦q x)
f. (nullary interchange) if 0 ≤q < p < n and (x′, x) ∈A(p) ×A(q) A(p) then
1x′ ◦q 1x = 1x′◦qx.
If A and B are strict n-categories then a strict n-functor is a map f : A
-
B of the underlying n-globular sets commuting with composition and identities.
This deﬁnes a category Str-n-Cat of strict n-categories.

1.4 Strict n-categories
23
Proposition 1.4.9 The categories Str-n-Cat deﬁned in 1.4.1 and 1.4.8 are
equivalent.
Sketch proof
We ﬁrst compare the underlying graph structures. Deﬁne for
each n ∈N the category n-Gph of n-graphs by
0-Gph = Set,
(n + 1)-Gph = (n-Gph)-Gph.
An (n + 1)-globular set amounts to a graph of n-globular sets: precisely, an
(n + 1)-globular set X corresponds to the graph (X(a, b))a,b∈X(0) where X(a, b)
is the n-globular set deﬁned by
(X(a, b))(m) = {x ∈X(m + 1) | sm+1(x) = a, tm+1(x) = b}.
So by induction, n-Gph ≃[Gop
n , Set].
Now we bring in the algebra. Given a strict (n + 1)-category A in the sense
of 1.4.8, the functions ◦p and i : A(p)
- A(p + 1) taken over 1 ≤p < n give
a strict n-category structure on A(a, b) for each a, b ∈A(0). This determines a
graph (A(a, b))a,b∈A(0) of strict n-categories. Moreover, the functions ◦0 and i :
A(0)
- A(1) give this graph the structure of a category enriched in Str-n-Cat.
With a little work we ﬁnd that a strict (n + 1)-category in the sense of 1.4.8 is,
in fact, exactly a category enriched in Str-n-Cat, and by induction we are done.
2
Some examples of n-categories are more easily described using one deﬁnition
than the other. It also helps to have the terminology of both at hand. We can now
say that the strict 2-category Cat of 1.4.4 has categories as 0-cells, functors as 1-
cells, and natural transformations as 2-cells. There are two kinds of composition
of natural transformations. We usually write the (‘vertical’) composite of natural
transformations
C
F
G
H
α
β
-
?
?
N

C′
as β◦α (rather than the standard β ◦1 α) and the (‘horizontal’) composite of
natural transformations
C
F
G
α R

?
C′
F ′
G′
α′R

?
C′′
as α′ ∗α (rather than α′ ◦0 α).

24
Classical Categorical Structures
Example 1.4.10 Let n ∈N and let C be a chain complex, as in 1.4.7. Then
the n-globular set X arising from C has the structure of a strict n-category: if
(d, c) ∈X(m) ×X(p) X(m) then d ◦p c = e where, for 0 ≤r ≤n and σ ∈{−, +},
eσ
r =







dσ
r + cσ
r
if r > p
c−
p
if r = p and σ = −
d+
p
if r = p and σ = +
cσ
r = dσ
r
if r < p.
Strict ω-categories can also be deﬁned in both styles. The globular or ‘global’
deﬁnition is obvious. Let G be the category generated by objects and arrows
· · ·

σm+1

τm+1
m σm

τm
m −1 
σm−1

τm−1
· · ·
σ1

τ1
0
subject to the usual globularity equations. Then [Gop, Set] is the category of
globular sets, and the category Str-ω-Cat of strict ω-categories is deﬁned
just as in 1.4.8 but without the upper limit of n.
Example 1.4.11 Any chain complex C gives rise to a strict ω-category X, just
as in the previous example. In fact, X is an abelian group in Str-ω-Cat, and
in this way the category of abelian groups in Str-ω-Cat is equivalent to the
category of non-negatively graded chain complexes of abelian groups.
For the enriched or ‘local’ deﬁnition, we ﬁrst deﬁne a sequence
· · ·
Sn+1
- Str-(n + 1)-Cat
Sn- Str-n-Cat
Sn−1
-
· · ·
Cat
S0- Set
of ﬁnite-product-preserving functors by S0 = ob and Sn+1 = (Sn)∗, which is
possible by Proposition 1.3.3(b). We then take Str-ω-Cat to be the limit of this
diagram in CAT. It is easy to prove
Proposition 1.4.12 The two categories Str-ω-Cat just deﬁned are equivalent.
2
Strict n-categories use globular shapes; there is also a cubical analogue.
Again, there is a short inductive deﬁnition and a longer explicit version. The
short form uses internal rather than enriched categories. If V is a category with
pullbacks then we write Cat(V) for the category of internal categories in V,
which, it can be shown, also has pullbacks.
Deﬁnition 1.4.13 Let (Str-n-tuple-Cat)n∈N be the sequence of categories given
inductively by
Str-0-tuple-Cat = Set,
Str-(n + 1)-tuple-Cat = Cat(Str-n-tuple-Cat).
A strict n-tuple category (or ‘strict cubical n-category’) is an object of Str-n-tuple-Cat.

1.4 Strict n-categories
25
A strict single (= 1-tuple) category is just a category. A strict double (=
2-tuple) category D is a diagram
D1
D0
dom

D0
cod
-
of categories and functors, with extra structure. The objects of D0 are called
the 0-cells or objects of D, the maps in D0 are the vertical 1-cells of D,
the objects of D1 are the horizontal 1-cells of D, and the maps in D1 are the
2-cells of D, as in the picture
a
m
- a′
⇓θ
b
f
?
p
- b′
f ′
?
(1:8)
where a
f- b, a′
f ′- b′ are maps in D0 and m
θ- p is a map in D1, with
dom(m) = a, dom(θ) = f, and so on. The ‘extra structure’ consists of various
kinds of composition and identities, so that vertical 1-cells can be composed
vertically, horizontal 1-cells can be composed horizontally, and 2-cells can be
composed both vertically and horizontally. Thus, any p × q grid of 2-cells has a
unique 2-cell composite, for any p, q ∈N.
Example 1.4.14 A strict double category in which all vertical 1-cells (or all
horizontal 1-cells) are identities is just a strict 2-category.
Example 1.4.15 A strict 2-category A gives rise to a strict double category D
in two other ways: take the 0-cells of D to be those of A, both the vertical and
the horizontal 1-cells of D to be the 1-cells of A, and the 2-cells (1:8) of D to be
the 2-cells
a
m
- a′
⇐
θ
b
f
?
p
- b′
f ′
?
in A, or the same with the arrow for θ reversed.
The longer deﬁnition of strict n-tuple category is omitted since we will not
need it, but goes roughly as follows. As for the globular case, an n-tuple category
is a presheaf with extra algebraic structure.
Let H = G1 = (1 σ

τ
0), so that a presheaf on H is a directed graph. If
n ∈N then an n-cubical set is a presheaf on Hn. An n-cubical set consists of a
set X(M) for each M ⊆{1, . . ., n}, and a function X(ξ) : X(M)
- X(P) for

26
Classical Categorical Structures
each P ⊆M and function ξ : M\P
- {−, +}, satisfying functoriality axioms.
For instance, a 2-cubical set X consists of sets
X(∅)
=
{0-cells}
X({1})
=
{vertical 1-cells}
X({2})
=
{horizontal 1-cells}
X({1, 2})
=
{2-cells}
with various source and target functions between them.
A strict n-tuple category can then be deﬁned as an n-cubical set A together
with a composition function
A(P ∪{m}) ×A(P ) A(P ∪{m})
- A(P ∪{m})
and an identity function
A(P)
- A(P ∪{m})
for each P ⊆{1, . . . , n} and m ∈{1, . . ., n}\P, satisfying axioms.
Strict n-
categories can be identiﬁed with strict n-tuple categories whose underlying n-
cubical set is degenerate in a certain way, generalizing Example 1.4.14.
1.5
Bicategories
Bicategories are to strict 2-categories as weak monoidal categories are to strict
monoidal categories. There are many other formalizations of the idea of weak
2-category (see 3.4), but bicategories are the oldest and best-known.
We deﬁne a bicategory as a category ‘weakly enriched’ in Cat. An alternative
deﬁnition as a 2-globular set with structure can be found in B´enabou [1967],
where bicategories were introduced.
Deﬁnition 1.5.1 A bicategory B consists of
• a class B0, whose elements are called the objects or 0-cells of B
• for each A, B ∈B0, a category B(A, B), whose objects f are called the 1-
cells of B and written A•
f-
B
•
and whose arrows γ are called the 2-cells
of B and written
A
•
f
g
γ R

?
B
•
• for each A, B, C ∈B0, a functor
B(B, C) × B(A, B)
- B(A, C)

1.5 Bicategories
27
(composition), written
(g, f)
7−→
g◦f,
(δ, γ)
7−→
δ ∗γ
on 1-cells f, g and 2-cells γ, δ
• for each A ∈B0, an object 1A ∈B(A, A) (the identity on A)
• for each triple A•
f-
B•
g-
C•
h-
D
•
of 1-cells, an isomorphism
A
•
(h◦g)◦f
h◦(g◦f)
αh,g,fR

?
D
•
in B(A, D) (the associativity coherence isomorphism)
• for each 1-cell A•
f-
B
• , isomorphisms
A
•
1B◦f
f
λf R

?
B
•
,
A
•
f ◦1A
f
ρf R

?
B
•
in B(A, B) (the unit coherence isomorphisms)
such that the coherence isomorphisms αf,g,h, λf, and ρf are natural in f, g,
and h and satisfy pentagon and triangle axioms like those in 1.2.5 (replacing
((A ⊗B) ⊗C) ⊗D with ((k◦h)◦g)◦f, etc.).
Functoriality of composition encodes ‘interchange laws’, just as for monoidal
categories ((1:4), p. 10): the two evident derived composites of a diagram of
shape
•
-
?
?
N

•
-
?
?
N

•
are equal, and similarly for 2-cells formed from diagrams •
-•
-•.
Example 1.5.2 A bicategory with only one object is just a monoidal category.
Example 1.5.3 Strict 2-categories can be identiﬁed with bicategories in which
all the components of α, λ and ρ are identities.

28
Classical Categorical Structures
Example 1.5.4 Any topological space S gives rise to a bicategory Π2S, the
fundamental 2-groupoid of S. (‘2-groupoid’ means that all the 2-cells are
isomorphisms and all the 1-cells are equivalences, in the sense deﬁned below.)
The objects of Π2S are the points of S. The 1-cells a
- b are the paths from
a to b, that is, the maps f : [0, 1]
- S satisfying f(0) = a and f(1) = b. The
2-cells are the homotopy classes of path homotopies, relative to endpoints. Any
particular point s ∈S determines a one-object full sub-bicategory of Π2S (that
is, the sub-bicategory whose only object is s and with all possible 1- and 2-cells),
and this is the monoidal category of 1.2.9.
Notice, incidentally, that a chain complex gives rise to a strict n-category for
each n (1.4.10, 1.4.11) but a space gives rise to only weak structures. This reﬂects
the diﬀerence in diﬃculty between homology and homotopy.
The fundamental ω-groupoid of a space is constructed in 9.2.7.
Example 1.5.5 There is a bicategory B in which objects are rings, 1-cells A
-
B are (B, A)-bimodules, and 2-cells are maps of bimodules. (A (B, A)-bimodule
is an abelian group M equipped with a left B-module structure and a right A-
module structure satisfying (b · m) · a = b · (m · a) for all b ∈B, m ∈M, a ∈A.)
Composition is tensor: if M is a (B, A)-bimodule and N a (C, B)-bimodule then
N ⊗B M is a (C, A)-bimodule.
Example 1.5.6 An n-category has 2n duals, including the original article. For
a bicategory B, the dual obtained by reversing the 1-cells is traditionally called
Bop and that obtained by reversing the 2-cells is called Bco. So the following four
pictures show corresponding 2-cells in B, Bop, Bco and Bco op = Bop co:
A•
f
g
γR

? B
• ,
A•
f
g
γ
	
I ? B
• ,
A•
f
g
γR

6 B
• ,
A•
f
g
γ
	
I 6 B
• .
Since Cat is a bicategory (1.4.4), we may take deﬁnitions from category theory
and try to imitate them in an arbitrary bicategory B. For example, a monad in
B is an object A of B together with a 1-cell A
t- A and 2-cells
µ : t◦t
- t,
η : 1A
- t,
rendering commutative the diagrams of 1.1.3 (with T ’s changed to t’s, T µ changed
to 1t ∗µ, and so on). An adjunction in B is a pair (A, B) of objects together
with 1- and 2-cells
A
f- B,
B
g- A,
1A
η- g◦f,
f ◦g
ε- 1B
(1:9)
satisfying the triangle identities,
(ε ∗1f)◦(1f ∗η) = 1f,
(1g ∗ε)◦(1g ∗η) = 1g.
An equivalence between objects A and B of B is a quadruple (f, g, η, ε) of
cells as in (1:9) such that η and ε are isomorphisms (in their respective hom-
categories). An adjoint equivalence is a quadruple that is both an adjunc-
tion and an equivalence. A 1-cell f in a bicategory is called an equivalence

1.5 Bicategories
29
if it satisﬁes the equivalent conditions of the following result, which generalizes
Proposition 1.1.2(a–b):
Proposition 1.5.7 Let B be a bicategory. The following conditions on a 1-cell
f : A
- B in B are equivalent:
a. there exist g, η and ε such that (f, g, η, ε) is an adjoint equivalence
b. there exist g, η and ε such that (f, g, η, ε) is an equivalence.
Proof
More is true: given an equivalence (f, g, η, ε), there is a unique ε′ such
that (f, g, η, ε′) is an adjoint equivalence, namely
f ◦g
ε−1∗1f◦g
- f ◦g◦f ◦g
1f ∗η−1∗1g
- f ◦g
ε- 1B.
Brackets have been omitted, as if B were a strict 2-category; the conscientious
reader can both ﬁll in the missing coherence isomorphisms and verify that η and
ε′ satisfy the triangle identities (a long but elementary exercise).
2
We write A ≃B if there exists an equivalence A
- B.
Strict 2-categories form a strict 3-category (1.4.4), so we would expect there to
be notions of functor between bicategories and transformation between functors,
and then a further notion of map between transformations. On the other hand,
one-object bicategories—monoidal categories—only form a 2-category: there are
various notions of functor between monoidal categories, and a notion of transfor-
mation between monoidal functors, but nothing more after that. We will soon
see how this apparent paradox is resolved.
For functors everything goes smoothly.
Deﬁnition 1.5.8 Let B and B′ be bicategories. A lax functor F = (F, φ) :
B
- B′ consists of
• a function F0 : B0
- B′
0, usually just written F
• for each A, B ∈B0, a functor FA,B : B(A, B)
- B′(FA, FB), usually
also written F
• for each composable pair (f, g) of 1-cells in B, a 2-cell φg,f : Fg◦Ff
-
F(g◦f)
• for each A ∈B0, a 2-cell φA : 1F A
- F1A
satisfying naturality and coherence axioms analogous to those of Deﬁnition 1.2.10.
Colax, weak and strict functors are also deﬁned analogously.
Example 1.5.9 Let A and A′ be monoidal categories, and ΣA and ΣA′ the
corresponding one-object bicategories. Then lax monoidal functors A
- A′
are exactly lax functors ΣA
- ΣA′, and similarly for colax, weak and strict
functors.

30
Classical Categorical Structures
The evident composition of lax functors between bicategories is, perhaps
surprisingly, strictly associative and unital. This means that we have a cate-
gory Bicatlax of bicategories and lax functors, and subcategories Bicatwk and
Bicatstr. The same goes for colax functors, but we concentrate on the lax (and
above all, the weak) case.
Deﬁnition 1.5.10 Let (F, φ), (G, ψ) : B
- B′ be lax functors between bicat-
egories. A lax transformation σ : F
- G consists of
• for each A ∈B0, a 1-cell σA : FA
- GA
• for each 1-cell f : A
- B in B, a 2-cell
FA
F f - FB
⇒
σf
GA
σA
?
Gf - GB
σB
?
such that σf is natural in f and satisﬁes coherence axioms as in Street [1996,
p. 568] or Leinster [1998b, 1.2].
A colax transformation is the same but
with the direction of σf reversed. Weak and strict transformations are lax
transformations in which all the σf’s are, respectively, isomorphisms or identities.
Example 1.5.11 Let F, G : A
- A′ be lax monoidal functors between monoi-
dal categories. As in 1.5.9, these correspond to lax functors ΣF, ΣG : ΣA
-
ΣA′ between bicategories. A lax transformation ΣF
- ΣG is an object S of
A′ together with a map
σX : GX ⊗S
- S ⊗FX
for each object X of A, satisfying coherence axioms. (We are writing S = σ⋆,
where ⋆is the unique object of ΣA.)
Transformations of one-object bicategories are, therefore, more general than
transformations of monoidal categories. Monoidal transformations can be iden-
tiﬁed with colax bicategorical transformations σ for which σ⋆= I. Even putting
aside the reversal of direction, we see that what seems appropriate for bicate-
gories in general seems inappropriate in the one-object case. We ﬁnd out more
in 1.5.14 and 1.5.16 below.
Deﬁnition 1.5.12 Let
B
F
G
σ
eσ
R

??
B′
be lax transformations between lax functors between bicategories. A modiﬁca-
tion Γ : σ
- eσ consists of a 2-cell ΓA : σA
- eσA for each A ∈B0, such

1.5 Bicategories
31
that ΓA is natural in A and satisﬁes a coherence axiom (Street [1996, p. 569] or
Leinster [1998b, 1.3]).
Functors, transformations, and modiﬁcations can be composed in various
ways. Let us consider just weak functors and transformations from now on. It is
straightforward to show that for any two bicategories B and B′, there is a functor
bicategory [B, B′] whose objects are the weak functors from B to B′, whose 1-cells
are weak transformations, and whose 2-cells are modiﬁcations. This is not usu-
ally a strict 2-category, because composing 1-cells in [B, B′] involves composing
1-cells in B′, but it is a strict 2-category if B′ is. In particular, there is a strict
2-category [Bop, Cat] of ‘presheaves’ on any bicategory B.
We might expect bicategories to form a weak 3-category, if we knew what one
was. Gordon, Power and Street gave an explicit deﬁnition of tricategory (weak
3-category) in [1995], and showed that bicategories form a tricategory. It is worth
noting, however, that there are two equally sensible and symmetrically opposite
ways of making a bicategory into a tricategory, because there are two ways of
horizontally composing weak transformations, as is easily veriﬁed.
There are coherence theorems for bicategories analogous to those for mo-
noidal categories. ‘All diagrams commute’ is handled in exactly the same way.
For the other statement of coherence we need the right notion of equivalence of
bicategories.
Let (F, φ) : B
- B′ be a weak functor between bicategories. We call F
a local equivalence if for each A, B ∈B0, the functor FA,B : B(A, B)
-
B′(FA, FB) is an equivalence of categories, and essentially surjective on ob-
jects if for each A′ ∈B′
0, there exists A ∈B0 such that FA ≃A′. We call F
a biequivalence if it satisﬁes the equivalent conditions of the following result,
analogous to Proposition 1.1.2(b)–(c):
Proposition 1.5.13 The following conditions on a weak functor F : B
- B′
between bicategories are equivalent:
a. there exists a weak functor G : B′
- B such that 1B ≃G◦F in [B, B]
and F ◦G ≃1B′ in [B′, B′]
b. F is a local equivalence and essentially surjective on objects.
Sketch proof
(a) ⇒(b) is straightforward. For the converse, choose for each
A′ ∈B′ an object GA′ ∈B together with an adjoint equivalence between FGA′
and A′, which is possible by 1.5.7. Then the remaining constructions and checks
are straightforward, if tedious.
2
Condition (a) of the Proposition says that there is a system of functors, trans-
formations and modiﬁcations relating B and B′. It therefore seems quite plausi-
ble that in the one-object case, biequivalence is a looser relation than monoidal
equivalence. Nevertheless,
Corollary 1.5.14 Two monoidal categories are monoidally equivalent if and
only if the corresponding one-object bicategories are biequivalent.

32
Classical Categorical Structures
Proof The monoidal and bicategorical notions of weak functor are the same (1.5.9),
so this follows from conditions (b) of Propositions 1.2.14 and 1.5.13.
2
Theorem 1.5.15 (Coherence for bicategories) Every bicategory is biequiv-
alent to some strict 2-category.
Sketch proof Let B be a bicategory. There is a weak functor
y : B
- [Bop, Cat],
the analogue of the Yoneda embedding for categories, sending an object A of B
to the weak functor
B(−, A) : Bop
- Cat
and so on. Just as the ordinary Yoneda embedding is full and faithful, y is a
local equivalence. So if B′ is the sub-strict-2-category of [Bop, Cat] consisting of
all the objects in the image of y and all the 1- and 2-cells between them then y
deﬁnes a biequivalence from B to B′.
2
Example 1.5.16 Corollary 1.5.14 enables us to deduce coherence for monoidal
categories (1.2.15) from coherence for bicategories. In fact, the proof of 1.2.15
is exactly the proof of 1.5.15 in the one-object case. Let B be a bicategory with
single object ⋆and let A be the corresponding monoidal category. Then B′ is
the sub-2-category of [Bop, Cat] whose single object is the representable functor
B(−, ⋆), and a weak transformation from B(−, ⋆) to itself is an object (E, δ) of
A′ as in the proof of 1.2.15, and so on.
Notes
Almost everything in this chapter is very well-known (in the sense of the phrase to which
mathematicians are accustomed). I have used Mac Lane [1971] as my main reference for
ordinary category theory, with Borceux [1994a, 1994b] as backup. The standard text
on enriched category theory is Kelly [1982]. For higher category theory, Street [1996]
provides a useful survey and reference list.
Strict n-categories were introduced by
Ehresmann [1965].
I thank Bill Fulton and Ross Street for an enlightening exchange on equivalence of
bicategories, and Nathalie Wahl for a useful conversation on how not to prove coherence.

Chapter 2
Classical Operads and
Multicategories
Some ‘pictures’ are not really pictures, but rather are
windows to Plato’s heaven
Brown [1999]
Where category theory has arrows, higher-dimensional category theory has higher-
dimensional arrows. One of the simplest examples of a ‘higher-dimensional arrow’
is one like
HHHH




...
.
Think of this as a box with n input wires coming in on the left, where n is any
natural number, and one output wire emerging on the right. (For instance, when
n = 1 this is just an arrow as in an ordinary category.) With this in mind, it is
easy to imagine what composition of such arrows might look like: outputs of one
arrow attach to inputs of another.
A categorical structure with arrows like this is called a multicategory. (Mul-
ticategories and n-categories are not the same!) A very familiar example: the ob-
jects (drawn as labels on wires) are vector spaces, and the arrows are multilinear
maps. The special case of a multicategory where there is only one object—that
is, the wires are unlabelled—is particularly interesting. Such a structure is called
an operad; for a basic example, ﬁx a topological space X and deﬁne an arrow
with n inputs to be a continuous map Xn
- X.
There is a curiously widespread impression that operads are frighteningly
complicated structures. Among users of operads, there is a curiously widespread
impression that multicategories—usually known to them as ‘coloured operads’—
are some obscure and esoteric elaboration of the basic notion of operad. I hope
this chapter will correct both impressions. Both structures are as natural as can
be, and, if one draws some pictures, very simple to understand.

34
Classical Operads and Multicategories
We start with multicategories (2.1) then specialize to operads (2.2). (This
order of presentation may convince sceptical operad-theorists that multicategories
are natural structures in their own right.) The basic deﬁnitions are given, with
a broad range of examples.
An assortment of further topics on operads and
multicategories is covered in 2.3.
Warning
Readers already familiar with operads may be used to them coming
equipped with symmetric group actions. In this text operads without symmetries
are the default. This is partly to ﬁt with the convention that monoidal categories
are by default non-symmetric, and rings, groups and monoids non-commutative,
but is mostly for reasons that will emerge later. So:
‘Operad’ means what is sometimes called ‘non-Σ operad’ or
‘non-symmetric operad’.
Operads equipped with symmetries will be called ‘symmetric operads’.
2.1
Classical multicategories
Let us make the description above more precise. A category consists of objects,
arrows between objects, and a way of composing arrows. Precisely the same
description applies to multicategories. The only diﬀerence lies in the shape of
the arrows: in a category, an arrow looks like
a
θ- b,
with one object as its domain and one object as its codomain, whereas in a
multicategory, an arrow looks like
θ
HHHH




a1
a2
an
...
a
(2:1)
(n ∈N), with a ﬁnite sequence of ‘input’ objects as its domain and one ‘output’
object as its codomain. Arrows can be composed when outputs are joined to
inputs, which for categories means that any string of arrows
a0
θ1- a1
θ2-
· · ·
θn- an
has a well-deﬁned composite, and for multicategories means (more interestingly
in geometrical terms) that any tree of arrows such as that in Fig. 2-A has a
well-deﬁned composite, in this case of the form
HHHHHH






a3
a4
a8
a9
a10
a11
a1.

2.1 Classical multicategories
35
θ1
HHHH




θ2
HHHH




θ3
HHHH




θ4
HHHH




θ5
HHHH




a1
a3
a4
a8
a9
a10
a11
a2
a5
a6
a7
Figure 2-A: Composable diagram of arrows in a multicategory
Perhaps the most familiar example is where the objects are vector spaces and the
arrows are multilinear maps. Commonly the multicategory structure is obscured
by the device of considering multilinear maps as linear maps out of a tensor prod-
uct; but in many situations it is the multicategory, not the monoidal category,
that is fundamental.
Deﬁnition 2.1.1 A multicategory C consists of
• a class C0, whose elements are called the objects of C
• for each n ∈N and a1, . . . , an, a ∈C0, a class C(a1, . . . , an; a), whose
elements θ are called arrows or maps and depicted as in (2:1) or as
a1, . . . , an
θ- a
(2:2)
• for each n, k1, . . . , kn ∈N and a, ai, aj
i ∈C0, a function (Fig. 2-B)
C(a1, . . . , an; a) × C(a1
1, . . . , ak1
1 ; a1) × · · · × C(a1
n, . . . , akn
n ; an)
- C(a1
1, . . . , ak1
1 , . . . , a1
n, . . . , akn
n ; a),
called composition and written
(θ, θ1, . . . , θn) 7−→θ◦(θ1, . . . , θn)
• for each a ∈C0, an element 1a ∈C(a; a), called the identity on a
satisfying
• associativity:
θ◦

θ1◦(θ1
1, . . . , θk1
1 ), . . . , θn◦(θ1
n, . . . , θkn
n )

=
(θ◦(θ1, . . . , θn)) ◦(θ1
1, . . . , θk1
1 , . . . , θ1
n, . . . , θkn
n )
whenever θ, θi, θj
i are arrows for which these composites make sense

36
Classical Operads and Multicategories
θ
HHHH




θ1
HHHH




θn
HHHH




a
a1
1
ak1
1
...
a1
n
akn
n
...
a1
an
...
·
·
·
7−→
      @
@
@
@
@
@
θ◦(θ1,...,θn)
a1
1
ak1
1
...
a1
n
akn
n
...
...
a
Figure 2-B: Composition in a multicategory
• identity:
θ◦(1a1, . . . , 1an) = θ = 1a◦(θ)
whenever θ : a1, . . . , an
- a is an arrow.
Operads are precisely multicategories with only one object, and are the sub-
ject of the next section. For now we look at multicategories with many objects—
often a proper class of them.
Example 2.1.2 A multicategory in which every arrow is unary (that is, of the
form (2:2) with n = 1) is the same thing as a category.
Example 2.1.3 Any monoidal category (A, ⊗) has an underlying multicate-
gory C. It has the same objects as A, and a map
a1, . . . , an
- a
in C is a map
a1 ⊗· · · ⊗an
- a
in A. Composition in C is derived from composition and tensor in A.
If A is a non-strict monoidal category then there is some ambiguity in the
meaning of ‘a1 ⊗· · · ⊗an’. We will address this properly in 3.3, but for now let
us just choose a particular bracketing, e.g. ((a1 ⊗a2) ⊗a3) ⊗a4 for n = 4.
Given a commutative ring R, the monoidal category of R-modules with their
usual tensor gives rise in this way to a multicategory of R-modules and R-
multilinear maps.
Similarly, given a category A with ﬁnite products there is
an underlying multicategory C with the same objects as A and with
C(a1, . . . , an; a) = A(a1 × · · · × an, a).
We will make particular use of the multicategory C coming from the category
A = Set; we write C = Set too.

2.1 Classical multicategories
37
Example 2.1.4 More generally, if A is a monoidal category and C0 a collection
of objects of A (not necessarily closed under tensor) then there is a multicategory
C whose class of objects is C0 and whose arrows are deﬁned as in the previous
example.
It is important to realize that not every multicategory is the underlying mul-
ticategory of a monoidal category (2.1.3). Example 2.1.4 makes this reasonably
clear. Another way of seeing it is to consider one-object multicategories (oper-
ads, next section): if A is a monoidal category with single object a then in the
underlying multicategory C, the cardinality of the hom-set C(a, . . . , a; a) is in-
dependent of the number of a’s in the domain. But this independence property
certainly does not hold for all one-object multicategories, as numerous examples
in Section 2.2 show.
Example 2.1.5 Sometimes tensor is irrelevant; sometimes it does not even exist.
For instance, let V be a symmetric monoidal category and let Ab(V ) be the
category of abelian groups in V . In general V will not have enough colimits to
deﬁne a tensor product on Ab(V ) and so make it into a monoidal category. But
it is always possible to deﬁne multilinear maps between abelian groups in V ,
giving Ab(V ) the structure of a multicategory.
Example 2.1.6 If A is a category with ﬁnite coproducts then Example 2.1.3
reveals that there is a multicategory C with the same objects as A, with
C(a1, . . . , an; a) = A(a1, a) × · · · × A(an, a),
and with composition given by
(f1, . . . , fn)◦((f 1
1 , . . . , f k1
1 ), . . . , (f 1
n, . . . , f kn
n ))
=
(f1◦f 1
1 , . . . , f1◦f k1
1 , . . . , fn◦f 1
n, . . . , fn◦f kn
n )
(fi ∈A(ai, a), f j
i ∈A(aj
i , ai)). Indeed, these formulas make sense and deﬁne a
multicategory C for any category A whatsoever. An arrow of C can be drawn as
HHHHHH






a1
a2
an
a.
⌟
⌟
⌟
f1
f2
fn
...
...
Example 2.1.7 A category in which each hom-set has at most one element
is the same thing as a preordered set. Similarly, a multicategory C in which
C(a1, . . . , an; a) has at most one element for each n, a1, . . . , an, a is some kind of
generalized poset. It amounts to a class X = C0 of elements together with an
(n + 1)-ary relation ≤n on X for each n ∈N, satisfying generalized reﬂexivity
and transitivity axioms. For instance, let d ∈N, let X = Rd, and deﬁne ≤n by
(a1, . . . , an) ≤n a if and only if a is in the convex hull of {a1, . . . , an}. This gives
a ‘generalized poset’; the axioms express basic facts about convex hulls.

38
Classical Operads and Multicategories
The ﬁnal example is more substantial.
Example 2.1.8 The Swiss cheese multicategory SC has the natural num-
bers as its objects, with d ∈N thought of as the d-dimensional disk. Maps are
conﬁgurations of disks, half-disks, quarter-disks, and so on, as now described.
Let R∞be the set of sequences (xn)∞
n=1 of real numbers. For each d ∈N, let
B[d] = {x ∈R∞|
∞
X
n=1
x2
n ≤1, and xn ≥0 for all n > d},
and deﬁne a sequence of subsets F d
1 , F d
2 , . . . of B[d] by
F d
n =
 ∅
if n ≤d
{x ∈B[d] | xn = 0}
if n > d.
(The idea is that if the hyperplane xn = 0 contains one of the ﬂat faces of B[d]
then F d
n is that ﬂat face, and otherwise F d
n is empty.) Let G be the group of
bijections on R∞of the form x 7−→a + λx for some a ∈R∞and λ > 0. Then
there is a category A in which the objects are the natural numbers and a map
d′
- d is an element α ∈G such that
αB[d′] ⊆B[d],
αF d′
n ⊆F d
n for all n ≥1.
(So α sends B[d′] into B[d], with ﬂat faces mapping into ﬂat faces.) By Exam-
ple 2.1.6, there arises a multicategory C with object-set N and with
C(d1, . . . , dk; d) = A(d1, d) × · · · × A(dk, d).
The Swiss cheese multicategory SC is the sub-multicategory of C consisting of
the same objects but only those arrows
(α1, . . . , αk) ∈C(d1, . . . , dk; d)
for which the images αiB[di] and αjB[dj] are disjoint whenever i ̸= j.
A few calculations reveal that SC(d1, . . . , dk; d) is only non-empty when di ≥
d for each i, and that the description of this hom-set is unchanged if we replace
R∞by Rmax{d1,...,dk} throughout. It follows that, for instance, a map
1, 1, 2, 2, 2, 3
- 1
(Fig. 2-C) is a conﬁguration of two quarter-balls, three half-balls, and one whole
ball inside the unit quarter-ball in R3, with the (straight) 1-dimensional face of
each quarter-ball lying on the 1-dimensional face of the unit quarter-ball and the
(ﬂat) 2-dimensional face of each half-ball lying on the 2-dimensional face x3 = 0
of the unit quarter-ball. The six little fractions of balls must be disjoint.
For each d ∈N there is a sub-multicategory SCd consisting of only the two ob-
jects d and d + 1 (and all the maps between them). This was Voronov’s original
‘Swiss-cheese operad’ (a ‘2-coloured operad’); see Voronov [1998] and Kontse-
vich [1999, 2.5]. The one-object sub-multicategories of SC are more famous: for
each d ∈N, the sub-multicategory consisting of d (and all maps) is exactly the
little d-dimensional disks operad (2.2.16).

2.1 Classical multicategories
39
x1
x2
x3
Figure 2-C: Swiss cheese map 1, 1, 2, 2, 2, 3
- 1
Many of the multicategories mentioned have a natural symmetric structure:
there is a bijection
−· σ : C(a1, . . . , an; a)
∼- C(aσ(1), . . . , aσ(n); a)
for each a1, . . . , an, a ∈C0 and permutation σ ∈Sn. A ‘symmetric multicategory’
is deﬁned as a multicategory equipped with such a family of bijections, satisfying
axioms.
We give the precise deﬁnition in 2.2.21; see also Appendix A.
For
example, if A is a symmetric monoidal category then its underlying multicategory
C is also symmetric.
Similarly, many of these examples are also naturally ‘enriched’: C(a1, . . . , an; a)
is more than a mere set. For instance, if C is vector spaces and multilinear maps
then C(a1, . . . , an; a) naturally has the structure of a vector space itself, and in
some of the oldest examples of operads the ‘hom-sets’ are topological spaces (as
we shall see). One way to formalize this is to allow C(a1, . . . , an; a) to be an ob-
ject of some chosen symmetric monoidal category V (generalizing from V = Set).
This is actually not the most natural generalization, essentially because the ten-
sor product on V is redundant; we come back to this in 6.8.
Deﬁnition 2.1.9 Let C and C′ be multicategories. A map of multicategories
f : C
- C′ consists of a function f0 : C0
- C′
0 (usually just written f)
together with a function
C(a1, . . . , an; a)
- C′(f(a1), . . . , f(an); f(a))
(written θ 7−→f(θ)) for each a1, . . . , an, a ∈C0, such that composition and iden-
tities are preserved. The category Multicat consists of small multicategories

40
Classical Operads and Multicategories
and maps between them.
Example 2.1.10 Let A and A′ be monoidal categories, with respective under-
lying multicategories C and C′. Then a map C
- C′ of multicategories is
precisely a lax monoidal functor A
- A′.
Example 2.1.11 Monoids can be described as maps. A monoid in a multicat-
egory C consists of an object a of C together with arrows
a, a
µ- a,
·
η- a
(where the domain of η is the empty sequence) obeying associativity and identity
laws. The terminal multicategory 1 consists of one object, ⋆, say, and one arrow
⋆, . . . , ⋆
| {z }
n
- ⋆
for each n ∈N. A map from 1 into a multicategory C therefore consists of an
object a of C together with an arrow
a, . . . , a
| {z }
n
µn- a
for each n ∈N, obeying ‘all possible laws’, and this is exactly a monoid in C.
In ordinary category theory, functors into Set play an important role. The
same goes for multicategories.
Deﬁnition 2.1.12 Let C be a multicategory. An algebra for C, or C-algebra,
is a map from C into the multicategory Set of Example 2.1.3.
The name makes sense if a multicategory is regarded as an algebraic theory with
as many sorts as there are objects; it also generalizes the standard terminology
for operads. Explicitly, a C-algebra X consists of
• for each object a of C, a set X(a), whose elements x can be drawn as




H
H
H
H
x
a
• for each map θ : a1, . . . , an
- a in C, a function
θ = X(θ) : X(a1) × · · · × X(an)
- X(a)
(Fig. 2-D),

2.1 Classical multicategories
41
θ
HHHH








H
H
H
H
x1




H
H
H
H
xn
a
a1
an
...
·
·
·
7−→
      @
@
@
@
@
@
θ(x1,...,xn)
a
Figure 2-D: Action of a multicategory on an algebra
satisfying axioms of the same shape as the associativity and second identity
axioms in Deﬁnition 2.1.1.
This explicit form makes it clear that a map of
C-algebras, α : X
- Y , should be deﬁned as a family of functions

X(a)
αa- Y (a)

a∈C0
satisfying the evident compatibility condition; so we have a category Alg(C) of
C-algebras. An alternative deﬁnition uses the notion of transformation between
maps between multicategories, as described in 2.3.
Example 2.1.13 If A is a strict monoidal category then an algebra for its
underlying multicategory is, by 2.1.10, just a lax monoidal functor from A to
(Set, ×, 1).
Example 2.1.14 If C is a multicategory in which all arrows are unary (2.1.2),
and so essentially just a category, then Alg(C) is the ordinary functor category
[C, Set].
Example 2.1.15 As the pictures suggest, there is for each multicategory C an
algebra X deﬁned by taking X(a) to be the set C(; a) of arrows in C from the
empty sequence into a.
When C is the multicategory of modules over some
commutative ring R (Example 2.1.3), this is the evident forgetful map C
-
Set.
Example 2.1.16 Any family (X(a))a∈S of sets, indexed over any set S, gives
rise to a multicategory End(X) with object-set S, the endomorphism multi-
category of X. This is constructed by transporting back from the multicategory
Set: an arrow a1, . . . , an
- a in End(X) is a function
X(a1) × · · · × X(an)
- X(a),
and composition and identities are as in Set. An algebra for a multicategory C
can then be deﬁned, equivalently, as a family (X(a))a∈C0 of sets together with a
multicategory map f : C
- End(X) ﬁxing the objects.

42
Classical Operads and Multicategories
Set-valued functors on ordinary categories are also the same thing as dis-
crete opﬁbrations. There is a parallel theory of opﬁbrations for multicategories
(3.3, 6.3, Leinster [2003]), but this will not be of central concern.
2.2
Classical operads
An operad is a multicategory with only one object. In a sense there is no more
to be said: the deﬁnitions of map between operads, algebra for an operad, and
so on, are just special cases of the deﬁnitions for multicategories.
On the other hand, operads have a distinctive feel to them and are worth
considering in their own right. The analogy to keep in mind is monoids ver-
sus categories. A monoid is nothing but a one-object category, and many basic
monoid-theoretic concepts are specializations of category-theoretic concepts; nev-
ertheless, monoids still form a natural and interesting class of structures. The
same goes for operads and multicategories. Conversely, a category can be re-
garded as a many-object monoid, and a multicategory as a many-object operad;
this leads to the alternative name ‘coloured operad’ for multicategory.
Most of this section is examples. But ﬁrst we give the deﬁnitions, describe
equivalent ‘explicit’ forms, and discuss the ever-important question of terminol-
ogy.
Deﬁnition 2.2.1 An operad is a multicategory C with exactly one object. The
category Operad is the full subcategory of Multicat whose objects are the
operads.
Let C be an operad, with single object called ⋆. Then C consists of one set
P(n) = C(⋆, . . . , ⋆
| {z }
n
; ⋆)
for each n ∈N, together with composition and identities satisfying axioms. Of
course, it makes no diﬀerence (up to isomorphism) what the single object is
called, so an operad can equivalently be described as consisting of
• a sequence (P(n))n∈N of sets, whose elements θ will be called the n-ary
operations of P and drawn as
n



θ
HHHH




...
• for each n, k1, . . . , kn ∈N, a function
P(n) × P(k1) × · · · × P(kn)
-
P(k1 + · · · + kn)
(θ, θ1, . . . , θn)
7−→
θ◦(θ1, . . . , θn),
called composition (as in Fig. 2-B but without the labels a, ai, aj
i)

2.2 Classical operads
43
• an element 1 = 1P ∈P(1), called the identity,
satisfying associativity and identity axioms as in the deﬁnition of multicate-
gory (2.1.1). This direct description, or something like it, is what one usually sees
as the deﬁnition of operad. Similarly, a map f : P
- Q of operads consists of
a family
(fn : P(n)
- Q(n))n∈N
of functions, preserving composition and identities.
All of this works just as well if the P(n)’s are allowed to be objects of some
chosen symmetric monoidal category V, rather than necessarily being sets; these
are operads in V, or V-operads, and form a category V-Operad. We noted
a more general version of this for multicategories, where the appropriate ter-
minology was ‘multicategory enriched in V’; we also said there that symmetric
monoidal categories are actually not the most natural setting (6.8).
Symmetries are often present in operads. Again, this was noted in the more
general context of multicategories. A symmetric structure on an operad P con-
sists, then, of an action of the symmetric group Sn on P(n) for each n ∈N,
subject to axioms; the precise deﬁnition is in 2.2.21. Most authors use the term
‘operad’ to mean what I call a symmetric operad, and ‘non-symmetric’ or ‘non-Σ’
operad for what I call a (plain) operad. For us the non-symmetric case will be by
far the more important. The generalized (multicategories and) operads that we
consider for much of this book are in some sense a more advanced replacement
for symmetric operads; see p. 185 for further explanation of this point of view.
Many authors use the term ‘coloured operad’ to mean multicategory. The
‘colours’ are the objects, and the idea is that a multicategory is a more com-
plicated version of an operad. The analogous usage would make a category a
‘coloured monoid’ and a groupoid a ‘coloured group’. I prefer the term ‘multi-
category’ because it emphasizes that we are dealing with a categorical structure,
with objects and arrows. Moreover, although thinking of the objects as colours
is practical when there is only a small, ﬁnite, number of them, it becomes some-
what baroque otherwise: in the multicategory of abelian groups, for instance,
one has to paint each group a diﬀerent colour (the real numbers are green, the
cyclic group of order 10 is pink, and so on). This is not entirely a frivolous issue:
the coloured viewpoint has given rise to eyebrow-raising statements such as
[. . . ] it serves us well to have a subtle generalization of operad known
as a bicolored operad. Still more colorful operads can be deﬁned, but
they are currently not of great importance
(Markl, Shnider and Stasheﬀ[2002, p. 115]); of course, most of the coloured
operads that one meets every day (Set, Top, R-Mod, . . . ) have not just more
than two colours, but a proper class of them. The quotation above is analogous
to, and indeed includes (2.1.2), the statement that no important category has
more than two objects.
Algebras for operads are very important. Translating the multicategorical
deﬁnition (2.1.12) into explicit language, an algebra for an operad P is a set X

44
Classical Operads and Multicategories
together with a function
θ : Xn
- X
for each n ∈N and θ ∈P(n), satisfying the evident axioms. If P is a symmetric
operad then a further axiom must be satisﬁed. If P is an operad in a symmetric
monoidal category V then X is not a set but an object of V, and an algebra
structure on X is a family (P(n) ⊗X⊗n
- X)n∈N of maps, satisfying axioms.
(More generally, X could be an object of a monoidal category either acted on by
V or enriched in V.) It is clear in all situations what a map of algebras is.
The ﬁrst group of examples follows the slogan ‘an operad is an algebraic
theory’.
Example 2.2.2 The terminal operad 1 has exactly one n-ary operation for each
n ∈N. An algebra for 1 is a set X together with a function
Xn
-
X
(x1, . . . , xn)
7−→
(x1 · . . . · xn)
for each n ∈N, satisfying the axioms
((x1
1 · . . . · xk1
1 ) · . . . · (x1
n · . . . · xkn
n ))
=
(x1
1 · . . . · xkn
n )
x
=
(x).
Hence Alg(1) is the category of monoids.
If 1 is considered as a symmetric operad then there is a further axiom on its
algebras X:
(xσ(1) · . . . · xσ(n)) = (x1 · . . . · xn)
for all σ ∈Sn (as will follow from the deﬁnition, p. 54). This means that algebras
for 1 are now commutative monoids.
Example 2.2.3 Various sub-operads of 1 are commonly encountered. The small-
est operad P is given by P(1) = 1 and P(n) = ∅for n ̸= 1; its algebras are merely
sets. The unique operad P satisfying P(0) = ∅and P(n) = 1 for n ≥1 has semi-
groups as its algebras.
(A semigroup is a set equipped with an associative
binary operation; a monoid is a semigroup with identity.) As a kind of dual, the
unique operad P satisfying P(n) = 1 for n ≤1 and P(n) = ∅for n > 1 has as
its algebras pointed sets (sets equipped with a basepoint).
Example 2.2.4 Let M be a monoid. Then there is an operad P in which P(1) =
M, P(n) = ∅for n ̸= 1, and the composition and identity are the multiplication
and unit of M. An algebra for P consists of a set X together with a function
θ : X
- X for each θ ∈M, satisfying axioms; in other words, it is a set with
a left M-action.
This example is the one-object case of a multicategorical example that we
have already seen: a multicategory all of whose arrows are unary is just a cate-
gory (2.1.2), and its algebras are just functors from that category into Set (2.1.14).

2.2 Classical operads
45
Example 2.2.5 We have seen so far that the theories of monoids, of semigroups,
of pointed sets, and of M-sets (for a ﬁxed monoid M) can all be described by
operads.
The natural question is: which algebraic theories can be described
by operads? The answer is: the strongly regular ﬁnitary theories. Here is the
deﬁnition; the proof is in C.1.
A ﬁnitary algebraic theory is strongly regular if it can be presented by oper-
ations and strongly regular equations. In turn, an equation (made up of variables
and ﬁnitary operation symbols) is strongly regular if the same variables appear
in the same order, without repetition, on each side. So all of
(x · y) · z = x · (y · z),
x · 1 = x,
(xy)z = xy·z,
but none of
x · 0 = 0,
x · y = y · x,
x · (y + z) = x · y + x · z,
are strongly regular. For instance, the theory of monoids is strongly regular.
One would guess that the theories of commutative monoids and of groups are not
strongly regular, because their usual presentations involve the equations x · y =
y · x and x−1 · x = 1 respectively, neither of which is strongly regular. For the
moment the possibility remains that these theories can be presented by some
devious selection of operations and strongly regular equations, but in 4.1.6 we
will see a method for proving that a given theory is not strongly regular, and in
particular it can be applied to conﬁrm that no such devious selections exist.
The name ‘strongly regular’ is due to Carboni and Johnstone [1995], and, as
they explain, is something of an accident.
Example 2.2.6 A much wider range of algebraic theories is covered if symme-
tries are allowed and if the P(n)’s are allowed to be objects of a symmetric
monoidal category V instead of just sets. For instance, if V is the category of
vector spaces over some ﬁeld then there is a symmetric operad P in V generated
by one element θ ∈P(2) subject to the equations
θ + θ · τ
=
0
θ◦(1, θ) + (θ◦(1, θ)) · σ + (θ◦(1, θ)) · σ2
=
0
where τ ∈S2 is a 2-cycle, σ ∈S3 is a 3-cycle, and the action of Sn on P(n) is
denoted by a dot; P-algebras are exactly Lie algebras. Operads of this kind will
not be of direct concern here, our generalization of the notion of operad being in
a diﬀerent direction, but they are very much in use.
The most familiar examples of multicategories are those underlying monoidal
categories (2.1.3) or, more generally, their full sub-multicategories (2.1.4). Here
is the one-object case.
Example 2.2.7 A one-object strict monoidal category is a commutative mo-
noid (1.2.3), so any commutative monoid (A, +, 0) has an ‘underlying’ operad P.

46
Classical Operads and Multicategories
Concretely, P(n) = A for all n, composition is
P(n) × P(k1) × · · · × P(kn)
-
P(k1 + · · · + kn)
(a, a1, . . . , an)
7−→
a + a1 + · · · + an,
and the identity is 0 ∈P(1).
Example 2.2.8 For any object b of a monoidal category B, there is an operad
structure on the sequence of sets (B(b⊗n, b))n∈N, given by substitution. This is a
special case of Example 2.1.4. We call it End(b), the endomorphism operad
of b. In the case B = Set this is compatible with the End notation of 2.1.16,
and specializing the observations there, an algebra for an operad P amounts to
a set X together with a map P
- End(X) of operads.
Example 2.2.9 The operad of curves P is deﬁned by
P(n) = {smooth maps R
- Rn}
and substitution. If B denotes the monoidal category of smooth manifolds and
smooth maps, with product as monoidal structure, then P is the endomorphism
operad of R in Bop.
Example 2.2.10 Fix a commutative ring k. Substituting polynomials into vari-
ables gives an operad structure on the sequence of sets (k[X1, . . . , Xn])n∈N;
this is the endomorphism operad of the object k[X] of the monoidal category
(commutative k-algebras)op.
Example 2.2.11 The same construction works for any algebraic theory: if T is
a monad on Set then there is a natural operad structure on (T (n))n∈N. The ﬁrst
n here denotes an n-element set, so T (n) is the set of words in n variables. Infor-
mally, composition is substitution of words; formally, the composition functions
can be written down in terms of the monad structure on T (exercise). This is
the endomorphism operad of the free algebra on one generator in the opposite of
the category of algebras, where tensor is coproduct of algebras.
In particular, this gives operad structures on each of (n)n∈N (from the theory
of sets, that is, the identity monad), (k[X1, . . . , Xn])n∈N (from the theory of
k-algebras, the previous example), and (kn)n∈N (from the theory of k-modules).
Example 2.2.12 There is an operad P in which P(n) is the set of isomorphism
classes of Riemann surfaces whose boundaries are identiﬁed with the disjoint
union of (n + 1) copies of the circle S1 (in order, with the ﬁrst n thought of
as inputs and the last as an output); composition is gluing. Many geometric
and topological variants of this example exist. See the end of 6.6 for remarks
on a more sophisticated version in which there is no need to quotient out by
isomorphism.
Example 2.2.13 We saw in 2.1.6 that given any category A, we can pretend
that A has coproducts to obtain a multicategory C with the same objects as

2.2 Classical operads
47
A. The one-object version is: given any monoid M, there is an operad P with
P(n) = M n and composition
(α1, . . . , αn)◦((α1
1, . . . , αk1
1 ), . . . , (α1
n, . . . , αkn
n ))
=
(α1α1
1, . . . , α1αk1
1 , . . . , αnα1
n, . . . , αnαkn
n )
(αi, αj
i ∈M). Some speciﬁc instances are in 2.2.14 and 2.2.16 below.
Example 2.2.14 Let G be the group of aﬃne automorphisms of the complex
plane—maps of the form z 7−→a+bz with a, b ∈C and b ̸= 0. (So G is generated
by translations, rotations and dilatations z 7−→λz with λ > 0.) Let P be the
operad (Gn)n∈N deﬁned in the previous example. Then P has a sub-operad Q
given by
Q(n)
=
{(α1, . . . , αn) ∈Gn | 0 = α1(0), α1(1) = α2(0), . . . ,
αn−1(1) = αn(0), αn(1) = 1}
(n ≥1) and Q(0) = ∅. Since G acts freely and transitively on the set of ordered
pairs of distinct points in the plane, we have
Q(n) ∼= {(z0, . . . , zn) ∈Cn+1 | 0 = z0 ̸= z1 ̸= · · · ̸= zn = 1},
(2:3)
and we call Q the operad of ﬁnite planar sequences. The set K of nonempty
compact subsets of C is a Q-algebra, with action
(α1, . . . , αn) :
Kn
-
K
(S1, . . . , Sn)
7−→
α1S1 ∪· · · ∪αnSn.
Given any operad R, algebra X for R, and operation θ ∈R(n), we can study
the ﬁxed points of θ, that is, the elements x ∈X satisfying θ(x, . . . , x) =
x. Here this is the study of aﬃnely self-similar planar sets, and a theorem of
Hutchinson [1981] implies that any (α1, . . . , αn) ∈Q(n) for which each αi is a
contraction (or in terms of (2:3), any (z0, . . . , zn) for which |zi+1 −zi| < 1 for
each i) has a unique ﬁxed point in K. Some of these ﬁxed points are shown in
Fig. 2-E.
Operads rose to fame for their role in loop space theory. Let Top∗be the
category of topological spaces with a distinguished basepoint. For any Y ∈Top∗,
the set Top∗(S1, Y ) of basepoint-preserving maps from the circle S1 into Y ,
endowed with the canonical (= compact-open) topology, is called the loop space
on Y and written Ω(Y ). This deﬁnes an endofunctor Ωof Top∗. If d ∈N then
Ωd(Y ) ∼= Top∗(Sd, Y ); a space homeomorphic to Ωd(Y ) for some Y is called a
d-fold loop space.
Loop spaces are nearly monoids. A binary multiplication on Ω(Y ) is a rule
for composing two loops in Y ; the standard choice is to travel the ﬁrst then the
second, each at double speed. The unit is the constant loop. The associativity
and unit laws are obeyed not quite exactly, but up to homotopy. Moreover, if

48
Classical Operads and Multicategories
(d)
•
•
•
•
•
z0
z1, z3, z5
z2
z4
z6
(c)
•
•
•
•
•
z0
z1, z4
z2
z3
z5
(b)
•
•
•
•
•
z0
z1
z2
z3
z4
(a)
•
•
•
z0
z1
z2
Figure 2-E: On the left, (z0, . . . , zn) ∈Q(n), and on the right, its unique ﬁxed
point in K: (a) interval, (b) Koch curve, (c) Sierpi´nski gasket, (d) P´eano curve

2.2 Classical operads
49
one chooses particular homotopies to witness this, then these homotopies obey
laws of their own—not quite exactly, but up to homotopy; and so ad inﬁnitum.
A loop space therefore admits an algebraic structure of a rather complex kind,
and it is to describe this complex structure that operads are so useful. In the
following group of examples we meet various operads for which loop spaces, and
more generally d-fold loop spaces, are naturally algebras.
Example 2.2.15 The coproduct in Top∗is the wedge product ∨(disjoint union
with basepoints identiﬁed). This makes Top∗into a monoidal category, so for
each d ∈N there is an endomorphism operad Ud given by Ud(k) = Top∗(Sd, (Sd)∨k).
Any d-fold loop space is naturally a Ud-algebra via the evident maps
Ud(k) × (Ωd(Y ))k
∼=
Top∗(Sd, (Sd)∨k) × Top∗((Sd)∨k, Y )
-
Top∗(Sd, Y )
∼=
Ωd(Y ).
Borrowing the terminology of Salvatore [2000], Ud is the universal operad for
d-fold loop spaces.
Example 2.2.16 Let d ∈N and let G be the group of transformations α of Rd
of the form α(x) = a + λx, with a ∈Rd and λ > 0. Denote by D(a, λ) the
closed disk (ball) in Rd with centre a and radius λ. Then (Gk)k∈N is naturally an
operad (Example 2.2.13), and the little d-disks operad Dd is the sub-operad
deﬁned by
Dd(k)
=
{(α1, . . . , αk) ∈Gk | the images of D(0, 1) under α1, . . . , αk are
disjoint subsets of D(0, 1)}.
Since G acts freely and transitively on the set {D(a, λ) | a ∈Rd, λ > 0} of
disks, Dd(k) may be identiﬁed with the set of conﬁgurations of d ordered disjoint
‘little’ disks inside the unit disk: the ith little disk is αiD(0, 1). Fig. 2-F shows
an example of composition
D2(3) × (D2(2) × D2(6) × D2(2))
- D2(10)
in the little 2-disks operad D2.
The same can be done with cubes instead of disks; this leaves the homotopy
type of Dd(k) unchanged. Dd(k) is also homotopy equivalent to the space of
conﬁgurations of k ordered, distinct points in Rd, but there is no obvious way to
put an operadic composition on this sequence of spaces.
Any d-fold loop space Ωd(Y ) is naturally a Dd-algebra. Concretely, a conﬁg-
uration of k little d-disks shows how to glue together k based maps Sd
- Y to
make a single based map Sd
- Y (noting that Sd is D(0, 1) with its boundary
collapsed to a point). Abstractly, any element (α1, . . . , αk) of Dd(k) deﬁnes a
continuous injection from the disjoint union of k copies of D(0, 1) into a single
copy of D(0, 1). Collapsing the boundaries and taking the inverse gives a based
map Sd
- (Sd)∨k. This process embeds Dd as a sub-operad of Ud (2.2.15),

50
Classical Operads and Multicategories
1
2
1
2
2
1
3
4
5
6
2
1
3
θ1
θ2
θ3
θ
composes to
10
1
3
6
8
4
7
5
2
9
θ◦(θ1, θ2, θ3)
Figure 2-F: Window to Plato’s heaven
and the inclusion Dd
⊂- Ud induces a functor Alg(Ud)
- Alg(Dd) in the
opposite direction. So any d-fold loop space is a Dd-algebra. In fact, the converse
is almost true—roughly, any algebra for Dd (as a symmetric operad in Top) is
a d-fold loop space—see Adams [1978, Ch. 2], for instance.
Example 2.2.17 The ﬁrst really important operad to be considered in topology
was Stasheﬀ’s [1963a] operad K of associahedra. (The terms ‘operad’ and ‘asso-
ciahedra’ came later.) This is a non-symmetric, topological operad; K(n) is an
(n −2)-dimensional solid polyhedron whose vertices are indexed by the n-leafed,
planar, binary, rooted trees. Any loop space is naturally a K-algebra. See 7.3
below and Markl, Shnider and Stasheﬀ[2002] for more.
Example 2.2.18 Suppose we are interested in paths rather than based loops:
then the appropriate replacement for the space U1(k) = Top∗(S1, (S1)∨k) of 2.2.15
is the space
E(k) = {γ ∈Top([0, 1], [0, k]) | γ(0) = 0 and γ(1) = k}.
If Y is any space, and Y (y, y′) denotes the space of [0, 1]-parametrized paths from
y to y′ in Y , then there is a natural map
E(k) × Y (y0, y1) × · · · × Y (yk−1, yk)
- Y (y0, yk)
for each y0, . . . , yk ∈Y . Here we have something like a E-algebra, in that these
maps satisfy axioms resembling very closely those for an algebra for an operad,
but it is not an algebra as such; we will meet the appropriate language when we
come to generalized operads in Part II. The operad E and its ‘nearly-algebras’
are used in Trimble’s proposed deﬁnition of weak n-category (Leinster [2001b]
and 10.1 below).

2.2 Classical operads
51
A miscellaneous example:
Example 2.2.19 Any operad P gives rise to a ‘bicoloured operad’ (2-object mul-
ticategory), MapP , that has sometimes been found useful (e.g., Markl, Shnider
and Stasheﬀ[2002, §2.9]). Call the colours (objects) 0 and 1, and for ε1, . . . , εn, ε ∈
{0, 1}, put
MapP (ε1, . . . , εn; ε) =
 P(n)
if εi ≤ε for each i
∅
otherwise.
Then a MapP -algebra is a map f : X
- Y of P-algebras.
To place this in context, let A be any category and C any multicategory. Write
A for the multicategory obtained by pretending that A has coproducts (2.1.6):
then there is an isomorphism of categories
Alg(A × C) ∼= [A, Alg(C)].
(2:4)
This is easy to show directly; alternatively, once we have deﬁned transformations
of multicategories and hence a category [C, D] for any multicategory D (see 2.3),
it follows by taking D = Set in the more general isomorphism
[A × C, D] ∼= [A, [C, D]]
Let 2 be the arrow category (•
-
•): then (2:4) with A = 2 says that an
algebra for 2 × C is a map of C-algebras. Indeed, the 2-object multicategory
MapP deﬁned originally is simply 2 × P.
The next example provides the language for deﬁning symmetric operads and
multicategories.
Example 2.2.20 The sequence (Sn)n∈N consisting of the underlying sets of the
symmetric groups is naturally an operad. We call it the operad of symmetries,
S. Fig. 2-G shows an example of composition
S3 × (S2 × S4 × S5)
-
S11,
(σ, ρ1, ρ2, ρ3)
7−→
σ◦(ρ1, ρ2, ρ3)
with
σ =
 1
2
3
2
3
1

,
ρ1 =
 1
2
2
1

, ρ2 =
 1
2
3
4
1
4
2
3

, ρ3 =
 1
2
3
4
5
5
1
2
3
4

(that is, σ(1) = 2, σ(2) = 3, etc), and
σ◦(ρ1, ρ2, ρ3) =
 1
2
3
4
5
6
7
8
9
10
11
7
6
8
11
9
10
5
1
2
3
4

.

52
Classical Operads and Multicategories
````
    
aaaa
    
    
cc
cc
    
    
    
    
ρ1
ρ2
ρ3
σ
composes
to give
````
    
aaaa
    
    
cc
cc
    
    
    
    
σ◦(ρ1, ρ2, ρ3)
Figure 2-G: Composition in the operad of symmetries
Formally, let σ ∈Sn, ρ1 ∈Sk1, . . . , ρn ∈Skn: then for 1 ≤i ≤n and 1 ≤j ≤ki,
σ◦(ρ1, . . . , ρn)(k1 + · · · + ki−1 + j) = kσ−1(1) + · · · + kσ−1(σ(i)−1) + ρi(j).
This gives S the structure of an operad.
A diﬀerent construction takes the n-ary operations to be the total orders
on the set {1, . . ., n} and composition to be lexicographic combination. In this
formulation it is clear that composition is associative and unital. This operad
of total orders is isomorphic to the operad of symmetries—but for the proof,
beware that you need to use the right one out of the two obvious bijections
between {total orders on {1, . . . , n}} and Sn. It is also homotopy equivalent, in
a suitable sense, to the little intervals operad D1.
As discussed on p. 39, a symmetric structure on a multicategory C should
consist of a map
−· σ : C(a1, . . . , an; b)
- C(aσ(1), . . . , aσ(n); b)
(2:5)
for each a1, . . . , an, b ∈C0 and σ ∈Sn. These maps should satisfy the obvious
axioms
(θ · σ) · ρ = θ · (σρ),
θ = θ · 1Sn
(2:6)
(θ ∈C(a1, . . . , an; b), σ, ρ ∈Sn), which guarantee that −· σ is a bijection. The
symmetric action should also be compatible with composition in C, as for instance
in Fig. 2-H. In general, we want
(θ · σ)◦(φσ(1) · πσ(1), . . . , φσ(n) · πσ(n))
=
(θ◦(φ1, . . . , φn)) · (σ◦(πσ(1), . . . , πσ(n)))
(2:7)

2.2 Classical operads
53
a7
a6
a8
a11
a9
a10
a5
a1
a2
a3
a4
````
    
aaaa
    
    
cc
cc
    
    
    
    
a6
a7
a8
a9
a10
a11
a1
a2
a3
a4
a5
φ2
HHHH




φ3
HHHH




φ1
HHHH




b2
b3
b1
````
````
!!!!
b1
b2
b3
θ
HHHH




c
φ2 · π2
φ3 · π3
φ1 · π1
θ · σ
=
a7
a6
a8
a11
a9
a10
a5
a1
a2
a3
a4
````
    
aaaa
    
    
c
ccc
    
    
    
    
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
a11
φ1
HHHH




φ2
HHHH




φ3
HHHH




b1
b2
b3
θ
HHHH




c
σ◦(π2, π3, π1)
θ◦(φ1, φ2, φ3)
Figure 2-H: Symmetric multicategory axiom

54
Classical Operads and Multicategories
whenever θ, φ1, . . . , φn are maps in C and σ, π1, . . . , πn are permutations for which
these expressions make sense. The permutation σ◦(πσ(1), . . . , πσ(n)) on the right-
hand side is the composite in S. (It is easier to get axiom (2:7) right for multi-
categories than for the special case of operads—the diﬀerent objects should stop
us from writing down nonsense.)
Deﬁnition 2.2.21 A symmetric multicategory is a multicategory C together
with a map (2:5) for each a1, . . . , an, b ∈C0 and σ ∈Sn, satisfying the axioms
in (2:6) and (2:7). A map of symmetric multicategories is a map f of mul-
ticategories such that f(θ · σ) = f(θ) · σ whenever θ is an arrow of C and σ a
permutation for which this makes sense. The category of symmetric multicatego-
ries is written SymMulticat. A symmetric operad is a one-object symmetric
multicategory.
Any symmetric monoidal category is naturally a symmetric multicategory,
via the symmetry maps
σ · −: aσ(1) ⊗· · · ⊗aσ(n)
∼- a1 ⊗· · · ⊗an.
This is true in particular of the category of sets. An algebra for a symmetric
multicategory C is a map C
- Set of symmetric multicategories. In general,
C has more algebras when regarded as a non-symmetric multicategory than when
the symmetries are taken into account.
An equivalent deﬁnition of symmetric multicategory is given in Appendix A:
‘fat symmetric multicategories’, in many ways more graceful.
Example 2.2.22 The operad S of symmetries becomes a symmetric operad by
multiplication in the symmetric groups.
Example 2.2.23 There is a symmetric multicategory O whose algebras (as a
symmetric multicategory) are exactly operads. This example will be done infor-
mally; we replace it with a precise construction later.
The objects of O are the natural numbers.
To deﬁne the arrows we use
ﬁnite, rooted, planar trees in which each vertex may have any natural number of
branches (including 0) coming up out of it. An element of O(m1, . . . , mk; n) is
an n-leafed tree with k vertices that are totally ordered in such a way that the
ith vertex has mi branches coming up out of it. For example,
O(2, 2; 3) =



•
@ •
@ 1
2
,
•
@ •
@ 2
1
,
•
@ •
@ 1
2
,
•
@ •
@ 2
1


.
(2:8)
Composition is substitution of trees into vertices (much as in the little disks
operad), the identity on n is the n-leafed tree with only one vertex, and the
symmetric group action is by permutation of the order of the vertices. An O-
algebra consists of a set P(n) for each n ∈N together with a map
P(m1) × · · · × P(mk)
- P(n)

2.3 Further theory
55
for each element of O(m1, . . . , mk; n), satisfying axioms, and this is exactly an
operad. For example, the ﬁrst element α of O(2, 2; 3) listed in (2:8) induces the
function
α :
P(2) × P(2)
-
P(3)
(θ, θ′)
7−→
θ◦(θ′, 1),
part of the operadic structure of P. If σ is the nontrivial element of S2 then the
second element of O(2, 2; 3) listed in (2:8) is α · σ, and a consequence of P being
an algebra for O as a symmetric multicategory is that α · σ(θ′, θ) = α(θ, θ′).
Similarly, there is a symmetric multicategory O′ whose algebras are symmetric
operads; it is the same as O except that the trees are equipped with an ordering
of the leaves as well as the vertices. And more generally, for any set S there
are symmetric multicategories OS and O′
S whose algebras are, respectively, non-
symmetric and symmetric multicategories with object-set S; the object-sets of
both OS and O′
S are (`
n∈N Sn) × S.
There is no symmetric multicategory whose algebras are all multicategories.
There is, however, a generalized multicategory with this property, as we shall see.
2.3
Further theory
So far we have seen the basic deﬁnitions in the theory of multicategories and
operads, and some examples. Here we consider a few further topics. Most are
special cases of constructions for generalized multicategories that we meet later;
some are generalizations of concepts familiar for ordinary categories.
We start with two alternative ways of deﬁning (operad and) multicategory,
both in use; they go by the names of ‘circle-i’ (◦i) and ‘PROs’ respectively. Then
we extend three concepts of category theory to multicategories: the free category
on a graph, transformations between maps between categories, and modules over
categories.
Circle-i
The ‘circle-i’ method takes composition of diagrams of shape
b1
bi−1
...
a1
an
...
bi+1
bm
...
φ
HHHH




bi
...
...
@
@
@
@@
     θ
c ,

56
Classical Operads and Multicategories
along with identities, to be the basic operations in a multicategory. Thus, a
multicategory C can be deﬁned as a set C0 of objects together with hom-sets
C(a1, . . . , an; a), a function
◦i :
C(b1, . . . , bm; c)
×C(a1, . . . , an; bi)
-
C(b1, . . . , bi−1, a1, . . . , an,
bi+1, . . . , bm; c)
(θ, φ)
7−→
θ ◦i φ
for each 1 ≤i ≤m, n ∈N, a1, . . . , an, b1, . . . , bm ∈C0, and an element 1a ∈
C(a; a) for each a ∈C0, satisfying certain axioms. This is an equivalent deﬁnition:
given a multicategory in the usual sense, we put
θ◦iφ = (1b1, . . . , 1bi−1, φ, 1bi+1, . . . , 1bm),
and given a multicategory in the new sense, the composite maps θ◦(φ1, . . . , φn)
can be built using n operations of the form ◦i.
This was, in fact, Lambek’s original deﬁnition of multicategory [1969, p. 103].
His motivating example was that of a deductive system: objects are statements,
maps a1, . . . , an
- b are deductions of b from a1, . . . , an, and the ◦i opera-
tion is Gentzen cut. The style of deﬁnition is also useful if for some reason one
does not want one’s multicategories to have identities (as in Markl, Shnider and
Stasheﬀ[2002, p. 45]): for with all the ◦i’s (but not identities) one can build an
operation for composing diagrams in the shape of any non-trivial tree, whereas
with the usual ◦’s (but not identities) one only obtains the non-trivial trees whose
leaves are at uniform height. We stick ﬁrmly to the original deﬁnition, as that
is what is generalized to give the all-important deﬁnition of generalized multi-
category. The ◦i deﬁnition does not generalize in the same way: consider, for
instance, the fc-multicategories of Chapter 5.
PROs and PROPs
To reach the second alternative deﬁnition of multicategory we consider how mul-
ticategories are related to strict monoidal categories.
(The weak case is left
until 3.3.) As we saw in 2.1.3, there is a forgetful functor
StrMonCat
U- Multicat
where the domain is the category of strict monoidal categories and strict monoidal
functors. This has a left adjoint
Multicat
F- StrMonCat.
Given a multicategory C, the objects (respectively, arrows) of F(C) are ﬁnite
ordered sequences of objects (respectively, arrows) of C, and the tensor product
in F(C) is concatenation of sequences. So a typical arrow
(a1, a2, a3, a4, a5)
- (a′
1, a′
2, a′
3)

2.3 Further theory
57
in F(C) looks like
a1
a2
a3
a4
a5












H
H
H
H
H
H
H
H
H
H
H
H
θ1
θ2
θ3
a′
1
a′
2
a′
3
(2:9)
where θ1 : a1, a2, a3
- a′
1 in C, etc. An arrow (a1, . . . , an)
- (a) in F(C)
is simply an arrow a1, . . . , an
- a in C.
The monoidal categories that arise freely from multicategories can be char-
acterized intrinsically, and this makes it possible to redeﬁne a multicategory as
a monoidal category with certain properties. Let C be a multicategory. First,
the strict monoidal category F(C) has the property that its underlying monoid
of objects is the free monoid on the set C0. Second, let S be a set and let A be a
strict monoidal category whose monoid of objects is the free monoid on S; then
for any elements b1, . . . , bm, a1, . . . , an of S, tensor product in A deﬁnes a map
a
a1
1,...,akn
n

A((a1
1, . . . , ak1
1 ), (a1)) × · · · × A((a1
n, . . . , akn
n ), (an))

- A((b1, . . . , bm), (a1, . . . , an))
(2:10)
where the union is over all n, k1, . . . , kn ∈N and aj
i ∈S such that there is an
equality of formal sequences
(a1
1, . . . , ak1
1 , . . . , a1
n, . . . , akn
n ) = (b1, . . . , bm).
The crucial point is that when A = F(C), the map (2:10) is always a bijection.
A PRO is a pair (S, A) where S is a set and A is a strict monoidal category,
such that
• the monoid of objects of A is equal to the free monoid on S
• for all b1, . . . , bm, a1, . . . , an ∈S, the canonical map (2:10) is a bijection.
A map of PROs (u, f) : (S, A)
- (S′, A′) is a function u : S
- S′
together with a strict monoidal functor f : A
- A′ such that the objects-
function f0 : A0
- A′
0 is the result of applying the free monoid functor to u.
This gives a category PRO of PROs. There is a forgetful functor PRO
-
StrMonCat, and F lifts in the obvious way to give a functor eF : Multicat
-
PRO.
Proposition 2.3.1 The functor eF : Multicat
- PRO is an equivalence.

58
Classical Operads and Multicategories
Proof Given a PRO (S, A), there is a multicategory C with C0 = S and
C(a1, . . . , an; a) = A((a1, . . . , an), (a)),
and the condition that the maps (2:10) are bijections implies that eF(C) ∼= (S, A).
The rest of the proof is straightforward.
2
The same kind of equivalence can be established for symmetric multicategories
and monoidal categories. The symmetric analogue of a PRO is a PROP. These
structures were introduced by Adams and Mac Lane (Mac Lane [1963]) and
developed by Boardman and Vogt [1973]; the names stand for ‘PROduct (and
Permutation) category’. Boardman and Vogt called a pair (S, A) an ‘S-coloured
PRO(P)’, and paid particular attention to the single-coloured case. Spelling it
out: the category sPRO of single-coloured PROs has as objects those strict
monoidal categories A whose underlying monoid of objects is equal to (N, +, 0)
and for which the canonical map
a
k1+···+kn=m
A(k1, 1) × · · · × A(kn, 1)
- A(m, n)
is a bijection for all m, n ∈N, and as arrows those strict monoidal functors that
are the identity on objects. We have immediately:
Corollary 2.3.2 The functor eF restricts to an equivalence of categories Operad
-
sPRO.
2
Free multicategories
Free structures are the formal origin of much of the geometry in this subject. A
basic case is that free multicategories are made out of trees, as now explained.
A multigraph is a set X0 together with a set X(a1, . . . , an; a) for each n ∈N
and a1, . . . , an, a ∈X0. Forgetting composition and identities gives a functor
U : Multicat
- Multigraph. This has a left adjoint F, the free multicat-
egory functor, which can be described as follows. Let X be a multigraph. The
free multicategory FX on X has the same objects: (FX)0 = X0. Its arrows
are formal gluings of arrows of X, that is, the hom-sets of FX are generated
recursively by the clauses
• if a ∈X0 then 1a ∈(FX)(a; a)
• if ξ ∈X(a1, . . . , an; a) and
θ1 ∈(FX)(a1
1, . . . , ak1
1 ; a1), . . . , θn ∈(FX)(a1
n, . . . , akn
n ; an)
then ξ◦(θ1, . . . , θn) ∈(FX)(a1
1, . . . , akn
n ; a).
Here 1a and ξ◦(θ1, . . . , θn) are just formal expressions, but also make it clear how
identities and composition in FX are to be deﬁned. A typical arrow in FX is
ξ1 ◦(ξ2◦(1a3, 1a4), ξ3◦(ξ4◦(), ξ5◦(1a8, 1a9, 1a10)), 1a11)

2.3 Further theory
59
where
ξ1 ∈X(a2, a5, a11; a1),
ξ2 ∈X(a3, a4; a2),
and so on, naturally drawn as in Fig. 2-A (p. 35) with ξi’s in place of θi’s. The
multigraph X is embedded in FX by sending ξ ∈X(a1, . . . , an; a) to
ξ◦(1a1, . . . , 1an) ∈(FX)(a1, . . . , an; a).
Example 2.3.3 The operad tr of trees is deﬁned as F1, the free multicategory
on the terminal multigraph. Explicitly, the sets tr(n) (n ∈N) are generated
recursively by
• tr(1) has an element |
• if n, k1, . . . , kn ∈N and τ1 ∈tr(k1), . . . , τn ∈tr(kn), then tr(k1 + · · · + kn)
has an element (τ1, . . . , τn).
Here | is a formal symbol and (τ1, . . . , τn) a formal n-tuple. The elements of
tr(n) are called n-leafed trees, and drawn as diagrams with n edges coming
into the top and one edge (the root) emerging from the bottom, in the following
way:
• | ∈tr(1) is drawn as |
• if τ1 ∈tr(k1), . . . , τn ∈tr(kn), and if
· · ·
τi
A
A
A



represents the diagram of τi, then the tree (τ1, . . . , τn) is drawn as
•
h
h
h
h
h
h
H
H
((((((
· · ·
τ1
A
A
A



τ2
A
A
A



· · ·
τ3
A
A
A



· · ·
· · ·
· · ·
.
(2:11)
For example, tr(3) has an element ( | , | , | ), drawn as
•
@  ,
and tr(4) has an element (( | , | , | ), | ), drawn as
•
@  •
@ .

60
Classical Operads and Multicategories
These diagrams are just like Fig. 2-A (p. 35), but rotated and unlabelled.
Some special cases can trap the unwary. For n = 1 and n = 0, diagram (2:11)
looks like
•
τ1
A
A
A



· · ·
and
•
respectively. The tree on the right is an element of tr(0), that is, has 0 leaves;
a leaf is an edge without a vertex at its upper end. Note in particular that the
trees
• ,
,
• ,
•
•
,
. . .
are all diﬀerent. Formally, the ﬁrst is the element () of tr(0), and the rest are
elements of tr(1), namely, | , ( | ), (( | )), . . . . Moral: the vertices matter.
The embedding 1
- F1 picks out
νn = ( | , . . . , | ) =
•
Q
Q· · · ∈tr(n),
the n-leafed corolla, for each n ∈N. The operadic composition in tr is ‘grafting’
(gluing roots to leaves), with unit | ∈tr(1).
As should be apparent, ‘tree’ is used to mean ﬁnite, rooted, planar tree. Non-
planar trees arise similarly from symmetric operads. We will examine planar
trees in detail, including how they form a category, in 7.3.
Example 2.3.4 Let X be the multigraph with a single object ⋆and in which
X(⋆, . . . , ⋆; ⋆) has one element if there are 0 or 2 copies of ⋆to the left of the
semi-colon, and no elements otherwise. For reasons that will emerge in the next
chapter, FX is called the operad of classical trees, ctr. It is the sub-operad
of tr containing just those trees in which each vertex has either 0 or 2 vertices
coming up out of it. Explicitly, the sets ctr(n) (n ∈N) are generated recursively
by
• ctr(1) has an element |
• ctr(0) has an element •
• if k1, k2 ∈N, τ1 ∈ctr(k1), and τ2 ∈ctr(k2), then ctr(k1 + k2) has an
element (τ1, τ2).
Transformations
Mac Lane recounts that he and Eilenberg started category theory in order to
enable them to talk about natural transformations. Transformations for multi-
categories will not be so important here but are still worth a look. The deﬁnition
is suggested by the deﬁnition of a map between algebras (p. 41).

2.3 Further theory
61
fa1
fan
...
fθ
HHH



fa
αa
HHH



f ′a
=
fa1
fan
αa1
HHH



...
αan
HHH



f ′a1
f ′an
...
f ′θ
HHH



f ′a
Figure 2-I: Axiom for a transformation
Deﬁnition 2.3.5 Let C
f-
f ′- D be a pair of maps between multicategories. A
transformation α : f
- f ′ is a family

f(a)
αa- f ′(a)

a∈C0 of unary maps
in D, such that (Fig. 2-I)
αa◦(f(θ)) = f ′(θ)◦(αa1, . . . , αan)
for every map a1, . . . , an
θ- a in C.
Transformations compose in the evident ways, making Multicat into a strict
2-category. In particular, there is a category [C, D] for any multicategories C
and D, consisting of maps C
- D and transformations, and when D = Set
this is Alg(C).
Actually, Multicat is not just a 2-category: in the language of Chapter 5,
it is an fc-multicategory. One of the ingredients missing in the 2-category but
present in the fc-multicategory is modules, which we consider next.
Modules
Recall that given categories C and D, a (D, C)-module (also called a bimodule,
profunctor or distributor) is a functor X : Cop × D
- Set. We write X :
C
+- D.
When C and D are monoids (one-object categories), X is a set
with a left D-action and a compatible right C-action; in general, X is a family
(X(c, d))c∈C,d∈D of sets ‘acted on’ by the arrows of C and D.
Deﬁnition 2.3.6 Let C and D be multicategories. A (D, C)-module X, writ-
ten X : C
+- D, consists of
• for each a1, . . . , an ∈C and b ∈D, a set X(a1, . . . , an; b) (Fig. 2-J(a))
• for each aj
i ∈C and bi, b ∈D, a function
D(b1, . . . , bn; b) × X(a1
1, . . . , ak1
1 ; b1) × · · ·
×X(a1
n, . . . , akn
n ; bn)
-
X(a1
1, . . . , akn
n ; b),
(φ, ξ1, . . . , ξn)
7−→
φ · (ξ1, . . . , ξn)

62
Classical Operads and Multicategories
a1
an
...
ξ
HHHH




b
(a)
...
...
...
...
θ1
1
HHH



θk1
1
HHH



θ1
n
HHH



θkn
n
HHH



...
...
...
...
...
ξ1
HHH



ξn
HHH



...
...
φ
HHH



(b)
Figure 2-J: (a) ‘Element’ of a module, (b) compatibility of left and right actions
• for each aj
i, ai ∈C and b ∈D, a function
X(a1, . . . , an; b) × C(a1
1, . . . , ak1
1 ; a1) × · · ·
×C(a1
n, . . . , akn
n ; an)
-
X(a1
1, . . . , akn
n ; b),
(ξ, θ1, . . . , θn)
7−→
ξ · (θ1, . . . , θn),
satisfying the evident axioms for compatibility of the two actions with composi-
tion and identities in D and C, together with a further axiom stating compati-
bility with each other (Fig. 2-J(b)):
(φ · (ξ1, . . . , ξn)) · (θ1
1, . . . , θkn
n ) = φ · (ξ1 · (θ1
1, . . . , θk1
1 ), . . . , ξn · (θ1
n, . . . , θkn
n ))
whenever these expressions make sense.
When C and D have only unary arrows, this is the usual deﬁnition of mod-
ule between categories. When C and D are operads, X is a sequence (X(n))n∈N of
sets with left D-action and right C-action. When C = D, taking X(a1, . . . , an; b) =
C(a1, . . . , an; b) gives a canonical module C
+- C. For any C and D, there is
an obvious notion of map between (D, C)-modules, making (D, C)-modules
into a category.
Just as for rings, it is fruitful to consider one-sided modules. Thus, when D
is a multicategory, a left D-module is a family (X(b))b∈D of sets together with
a left D-action—nothing other than a D-algebra. When C is a multicategory,
a right C-module is a family (X(a1, . . . , an))a1,...,an∈C of sets together with a
right C-action; these structures have sometimes been considered in the special
case of operads (see Voronov [1998, §1], for instance).

2.3 Further theory
63
Notes
The story of operads and multicategories is a typical one in mathematics, strewn
with failures of communication between specialists in diﬀerent areas.
Lazard seems
to have been the ﬁrst person to have published the basic idea, in work on formal
group laws [1955]; his ‘analyseurs’ are close to what were later dubbed operads. Lam-
bek [1969] introduced multicategories, in the context of logic and linguistics. He says
that B´enabou and Cartier had both considered multicategories previously; indeed, the
idea might have occurred to anyone who knew what both a category and a multilinear
map were. Perhaps a year or two later (but eﬀectively in a parallel universe), the special
case of operads became very important in homotopy theory, with the work of Boardman
and Vogt [1973] (who approached them via PROPs) and May [1972] (who gave operads
their name). They in turn were building on the work of Stasheﬀ[1963a], who deﬁned
the operad of associahedra without isolating the operad concept explicitly.
As far as I can tell, all three parties (Lazard, Lambek, and the homotopy theorists)
were unaware of the work of the others until much later. Users of multicategories did
not realize how interesting the one-object case was; users of operads were slow to see
how simple and natural was the many-object case. It seems to have been more than
twenty years before the appearance of the ﬁrst paper containing both Lambek and
Boardman–Vogt or May in its bibliography: Beilinson and Drinfeld [c.1997].
Activity in operads and multicategories surged in the mid-1990s with, among other
things, the emergence of mirror symmetry and higher category theory. See, for exam-
ple, Loday, Stasheﬀand Voronov [1997] and Baez and Dolan [1997]. Some important
structures that I have not included here are cyclic and modular operads (Getzler and
Kapranov [1995, 1994]); cyclic and modular multicategories can be deﬁned similarly.
Some authors on operads make a special case of nullary operations. May [1972, 1.1]
insisted in the case of topological operads P that P(0) should have only one element.
Markl, Shnider and Stasheﬀ[2002] do not have a P(0) at all; they start at P(1). They
also consider pseudo-operads, which do not have an identity 1P ∈P(1): see p. 56 above.
I thank Paolo Salvatore for illumination on the various operads for which loop spaces
are algebras.
Example 2.1.8 is probably a misnomer: the Swiss Cheese Board has recently been
running an advertising campaign under the banner ‘Si c’est trou´e, c’est pas Suisse’.

64
Classical Operads and Multicategories

Chapter 3
Notions of Monoidal
Category
In one sense all he ever wanted to be was someone with
many nicknames
Marcus [2002]
The concept of monoidal category is in such widespread use that one might
expect—or hope, at least—that its formalization would be thoroughly under-
stood. Nevertheless, it is not. Here we look at ﬁve diﬀerent possible deﬁnitions,
plus one inﬁnite family of deﬁnitions, of monoidal category. We prove equivalence
results between almost all of them.
Apart from the wish to understand a common mathematical structure, there
is a reason for doing this motivated by higher-dimensional category theory. A
monoidal category in the traditional sense is, as observed in 1.5, the same thing
as a bicategory with only one object. Similarly, any proposed deﬁnition of weak
n-category gives rise to a notion of monoidal category, deﬁned as a one-object
weak 2-category.
So if we want to be able to compare the (many) proposed
deﬁnitions of weak n-category then we will certainly need a ﬁrm grip on the
various notions of monoidal category and how they are related. (This is something
like a physicist’s toy model: a manageably low-dimensional version of a higher-
dimensional system.) Of course, if two deﬁnitions of weak n-category happen to
induce equivalent deﬁnitions of monoidal category then this does not imply their
equivalence in the general case, but the surprising variety of diﬀerent notions of
monoidal category means that it is a surprisingly good test.
In the classical deﬁnition of monoidal category, any pair (X1, X2) of objects
has a speciﬁed tensor product X1 ⊗X2, and there is also a speciﬁed unit ob-
ject. In 3.1 we consider a notion of monoidal category in which any sequence
X1, . . . , Xn of objects has a speciﬁed product; these are called ‘unbiased mo-
noidal categories’.
More generally, one might have a category equipped with
various diﬀerent tensor products of various (ﬁnite) arities, but as long there are
enough isomorphisms between derived products, this should make essentially no

66
Notions of Monoidal Category
diﬀerence. We formalize and prove this in 3.2.
The deﬁnitions described so far are ‘algebraic’ in that tensor is an operation.
For instance, in the classical deﬁnition, two objects X1 and X2 give rise to an
actual, speciﬁed, object, X1 ⊗X2, not just an isomorphism class of objects. This
goes somewhat against intuition: when using products of sets, for instance, it is
not of the slightest importance to remember the standard set-theoretic deﬁnition
of ordered pair ((x1, x2) = {{x1}, {x1, x2}}, as it happens); all that matters is
the universal property of the product. So perhaps it is better to use a notion of
monoidal category in which the tensor product of objects is only deﬁned up to
canonical isomorphism. Three such ‘non-algebraic’ notions are considered in 3.3,
one using multicategories and the other two (closely related) using simplicial
objects.
Almost everything we do for monoidal categories could equally be done for
bicategories, as discussed in 3.4. The extension is mostly routine—there are few
new ideas—but the explanations are a little easier in the special case of monoidal
categories.
Some generality is sacriﬁced in the theorems asserting equivalence of diﬀerent
notions of monoidal category: these are equivalences of the categories of monoidal
categories, but we could have made them equivalences of 2-categories (in other
words, included monoidal transformations). I have not aimed to exhaust the
subject, or the reader.
3.1
Unbiased monoidal categories
A classical monoidal category is a category A equipped with a functor An
-
A for each of n = 2 and n = 0 (the latter being the unit object I), together
with coherence data (Deﬁnition 1.2.5). An unbiased monoidal category is the
same, but with n allowed to be any natural number. So in an unbiased monoidal
category any four objects a1, a2, a3, a4 have a speciﬁed tensor product
(a1 ⊗a2 ⊗a3 ⊗a4),
but in a classical monoidal category there are only derived products such as
(a1 ⊗a2) ⊗(a3 ⊗a4), ((a1 ⊗a2) ⊗a3) ⊗a4, a1 ⊗((I ⊗(a2 ⊗I)) ⊗(a3 ⊗a4)).
The classical deﬁnition is ‘biased’ towards arities 2 and 0: it gives them a special
status. Here we eliminate the bias.
The coherence data for an unbiased monoidal category consists of isomor-
phisms such as
((a1 ⊗a2 ⊗a3) ⊗(a4 ⊗(a5)) ⊗a6)
∼- (a1 ⊗(a2 ⊗a3 ⊗a4 ⊗a5) ⊗a6).
In fact, all such isomorphisms can be built up from two families of special cases
(the γ and ι of 3.1.1 below). We require, of course, that the coherence isomor-
phisms satisfy all sensible axioms.

3.1 Unbiased monoidal categories
67
We will show in the next section that the unbiased and classical deﬁnitions
are equivalent, in a strong sense. The unbiased deﬁnition seems much the more
natural (having, for instance, no devious coherence axioms), and much more
useful for the purposes of theory. When verifying that a particular example of a
category has a monoidal structure, it is sometimes easier to use one deﬁnition,
sometimes the other; but the equivalence result means that we can take our pick.
Here is the deﬁnition of unbiased monoidal category. It is no extra work to
deﬁne at the same time ‘lax monoidal categories’, in which the coherence maps
need not be invertible.
Deﬁnition 3.1.1 A lax monoidal category A (or properly, (A, ⊗, γ, ι)) con-
sists of
• a category A
• for each n ∈N, a functor ⊗n : An
- A, called n-fold tensor and
written
(a1, . . . , an) 7−→(a1 ⊗· · · ⊗an)
• for each n, k1, . . . , kn ∈N and double sequence ((a1
1, . . . , ak1
1 ), . . . , (a1
n, . . . , akn
n ))
of objects of A, a map
γ((a1
1,...,ak1
1 ),...,(a1n,...,akn
n )) :
((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · · ⊗(a1
n ⊗· · · ⊗akn
n ))
- (a1
1 ⊗· · · ⊗ak1
1 ⊗· · · ⊗a1
n ⊗· · · ⊗akn
n )
• for each object a of A, a map
ιa : a
- (a),
with the following properties:
• γ((a1
1,...,ak1
1 ),...,(a1n,...,akn
n )) is natural in each of the aj
i’s, and ιa is natural in
a
• associativity: for any n, mp, kq
p ∈N and triple sequence (((ap,q,r)
kq
p
r=1)mp
q=1)n
p=1
of objects, the diagram
(((a1,1,1⊗···⊗a1,1,k1
1 )⊗···⊗(a1,m1,1⊗···⊗a1,m1,km1
1
))⊗···
⊗((an,1,1⊗···⊗an,1,k1n)⊗···⊗(an,mn,1⊗···⊗an,mn,kmn
n
)))
=

(γD1⊗···⊗γDn)
ZZZZZ
γD′
~
((a1,1,1⊗···⊗a1,m1,km1
1
)⊗···
⊗(an,1,1⊗···⊗an,mn,kmn
n
))
((a1,1,1⊗···⊗a1,1,k1
1
)⊗···
⊗(an,mn,1⊗···⊗an,mn,kmn
n
))
ZZZZZ
γD
~
=

γD′′
(a1,1,1⊗···⊗an,mn,kmn
n
)

68
Notions of Monoidal Category
commutes, where the double sequences Dp, D, D′, D′′ are
Dp
=
((ap,1,1, . . . , ap,1,k1p), . . . , (ap,mp,1, . . . , ap,mp,k
mp
p )),
D
=
((a1,1,1, . . . , a1,m1,km1
1 ), . . . , (an,1,1, . . . , an,mn,kmn
n )),
D′
=
(((a1,1,1 ⊗· · · ⊗a1,1,k1
1), . . . , (a1,m1,1 ⊗· · · ⊗a1,m1,km1
1 )), . . . ,
((an,1,1 ⊗· · · ⊗an,1,k1n), . . . , (an,mn,1 ⊗· · · ⊗an,mn,kmn
n ))),
D′′
=
((a1,1,1, . . . , a1,1,k1
1), . . . , (an,mn,1, . . . , an,mn,kmn
n ))
• identity: for any n ∈N and sequence (a1, . . . , an) of objects, the diagrams
(a1 ⊗· · · ⊗an)
(ιa1⊗···⊗ιan)
- ((a1) ⊗· · · ⊗(an))
(a1 ⊗· · · ⊗an)
γ((a1), ... ,(an))
?
1
-
((a1 ⊗· · · ⊗an)) 
ι(a1⊗···⊗an) (a1 ⊗· · · ⊗an)
(a1 ⊗· · · ⊗an)
γ((a1, ... ,an)) ?
1

commute.
An unbiased monoidal category is a lax monoidal category (A, ⊗, γ, ι) in
which each γ((a1
1,...,ak1
1 ),...,(a1n,...,akn
n )) and each ιa is an isomorphism. An unbiased
strict monoidal category is a lax monoidal category (A, ⊗, γ, ι) in which each
of the γ’s and ι’s is an identity map.
Remarks 3.1.2
a. The bark of the associativity axiom is far worse than its bite. All it says
is that any two ways of removing brackets are equal: for instance, that the
diagram
{[(a ⊗b) ⊗(c ⊗d)]
⊗[(e ⊗f) ⊗(g ⊗h)]}
{[a ⊗b ⊗c ⊗d]
⊗[e ⊗f ⊗g ⊗h]}
{γ⊗γ}

{(a ⊗b) ⊗(c ⊗d)
⊗(e ⊗f) ⊗(g ⊗h)}
γ
-
{a ⊗b ⊗c ⊗d ⊗e ⊗f ⊗g ⊗h}
γ

γ
-

3.1 Unbiased monoidal categories
69
commutes. This is exactly the role of the associativity axiom for a monad
such as ‘free semigroup’ on Set, as observed in Mac Lane [1971, VI.4, after
Proposition 1].
b. The coherence axioms for an unbiased monoidal category are ‘canonical’
and rather obvious, in contrast to those for classical monoidal categories;
they are the same shape as the diagrams expressing the associativity and
unit axioms for a monoid or monad (1.1.3).
c. In an unbiased strict monoidal category, the coherence axioms (natural-
ity, associativity and identity) hold automatically. Clearly, unbiased strict
monoidal categories are in one-to-one correspondence with ordinary strict
monoidal categories.
We have given a completely explicit deﬁnition of unbiased monoidal category,
but a more abstract version is possible. First recall that if C is a strict 2-category
then there is a notion of a strict 2-monad (T, µ, η) on C, and there are notions of
strict, weak and lax algebra for such a 2-monad. (See Kelly and Street [1974],
for instance; terminology varies between authors.) In particular, ‘free strict mo-
noidal category’ is a strict 2-monad (( )∗, µ, η) on Cat; the functor ( )∗is given
on objects of Cat by
A∗=
a
n∈N
An.
A (small) unbiased monoidal category is precisely a weak algebra for this 2-
monad. Explicitly, this says that an unbiased monoidal category consists of a
category A together with a functor ⊗: A∗
- A and natural isomorphisms
A∗∗
µA - A∗
⇒
γ
A∗
⊗∗
?
⊗- A
⊗
?
A
ηA - A∗
⇒
ι
A
⊗
?
1
-
(3:1)
satisfying associativity and identity axioms: the diagrams
⊗◦⊗∗◦⊗∗∗γ∗1
- ⊗◦µA◦⊗∗∗== ⊗◦⊗∗◦µA∗
⊗◦⊗∗◦µ∗
A
1∗γ∗
?
γ∗1- ⊗◦µA◦µ∗
A === ⊗◦µA◦µA∗
γ∗1
?
⊗◦1∗
A
1∗ι∗
- ⊗◦⊗∗◦η∗
A
⊗◦µA◦η∗
A
γ∗1
?
1
-
⊗◦⊗∗◦ηA∗=== ⊗◦ηA◦⊗ι∗1
1A◦⊗
⊗◦µA◦ηA∗
γ∗1
?
1


70
Notions of Monoidal Category
commute.
This may easily be veriﬁed.
Similarly, a lax monoidal category is
precisely a lax algebra for the 2-monad (for ‘lax’ means that the natural trans-
formations γ and ι are no longer required to be isomorphisms) and an unbiased
strict monoidal category is precisely a strict algebra (for ‘strict’ means that γ
and ι are required to be identities, so that the diagrams (3:1) containing them
commute).
A diﬀerent abstract way of deﬁning unbiased monoidal category will be ex-
plored in 3.2.
The next step is to deﬁne maps between (lax and) unbiased monoidal cate-
gories. Again, we could use the language of 2-monads to do this, but opt instead
for an explicit deﬁnition.
Deﬁnition 3.1.3 Let A and A′ be lax monoidal categories. Write ⊗for the
tensor and γ and ι for the coherence maps in both categories. A lax monoidal
functor (P, π) : A
- A′ consists of
• a functor P : A
- A′
• for each n ∈N and sequence a1, . . . , an of objects of A, a map
πa1,...,an : (Pa1 ⊗· · · ⊗Pan)
- P(a1 ⊗· · · ⊗an),
such that
• πa1,...,an is natural in each ai
• for each n, ki ∈N and double sequence ((a1
1, . . . , ak1
1 ), . . . , (a1
n, . . . , akn
n ))
of objects of A, the diagram
((P a1
1⊗···⊗P ak1
1 )⊗···
⊗(P a1
n⊗···⊗P akn
n ))
γ
((P a1
1, ... ,P ak1
1
), ... ,(P a1n, ... ,P akn
n
))- (P a1
1⊗···⊗P akn
n )
(P (a1
1⊗···⊗ak1
1 )⊗···
⊗P (a1
n⊗···⊗akn
n ))
(π
(a1
1, ... ,ak1
1
)⊗···⊗π(a1n, ... ,akn
n
))
?
P ((a1
1⊗···⊗ak1
1 )⊗···
⊗(a1
n⊗···⊗akn
n ))
π
((a1
1⊗···⊗ak1
1
), ... ,(a1n⊗···⊗akn
n
))
?
P γ
((a1
1, ... ,ak1
1
), ... ,(a1n, ... ,akn
n
))
- P (a1
1⊗···⊗akn
n )
π(a1
1, ... ,akn
n
)
?
commutes
• for each 1-cell a, the diagram
Pa
ιP a- (Pa)
Pa
wwwww
P ιa
- P(a)
πa
?

3.1 Unbiased monoidal categories
71
commutes.
A weak monoidal functor is a lax monoidal functor (P, π) for which each of the
maps πa1,...,an is an isomorphism. A strict monoidal functor is a lax monoidal
functor (P, π) for which each of the maps πa1,...,an is an identity map (in which
case P preserves composites and identities strictly).
We remarked in 3.1.2(b) that the coherence axioms for an unbiased monoidal
category were rather obvious, having the shape of the axioms for a monoid or
monad. Perhaps the coherence axioms for an unbiased lax monoidal functor are
a little less obvious; they are, however, the same shape as the axioms for a lax
map of monads (= monad functor, p. 148), and in any case seem ‘canonical’.
Lax monoidal functors can be composed in the evident way, and the weak
and strict versions are closed under this composition. There are also the evident
identities. So we obtain 3 × 3 = 9 possible categories, choosing one of ‘strict’,
‘weak’ or ‘lax’ for both the objects and the maps. In notation explained in a
moment, the inclusions of subcategories are as follows:
LaxMonCatstr ⊆LaxMonCatwk ⊆LaxMonCatlax
∪|
∪|
∪|
UMonCatstr ⊆UMonCatwk ⊆UMonCatlax
∪|
∪|
∪|
StrMonCatstr ⊆StrMonCatwk ⊆StrMonCatlax.
For all three categories in the bottom (respectively, middle or top) row, the
objects are small strict (respectively, unbiased or lax) monoidal categories. For all
three categories in the left-hand (respectively, middle or right-hand) column, the
maps are strict (respectively, weak or lax) monoidal functors. It is easy to check
that the three categories in the bottom row are isomorphic to the corresponding
three categories in the classical deﬁnition.
Of the nine categories, the three on the bottom-left to top-right diagonal are
the most conceptually natural: a level of strictness has been chosen and stuck to.
In this chapter our focus is on the middle entry, UMonCatwk, where everything
is weak.
Note that this 3×3 picture does not appear in the classical, ‘biased’, approach
to monoidal categories. There the top row is obscured, as there is no very sat-
isfactory way to laxify the classical deﬁnition of monoidal category. Admittedly
it is possible to drop the condition that the associativity maps (a ⊗b) ⊗c
-
a ⊗(b ⊗c) and unit maps a ⊗1
- a 
1 ⊗a are isomorphisms (as Borceux
does in his [1994a], just after Deﬁnition 7.7.1), but somehow this does not seem
quite right.
To complete the picture, and to make possible the deﬁnition of equivalence
of unbiased monoidal categories, we deﬁne transformations.
Deﬁnition 3.1.4 Let (P, π), (Q, χ) : A
- A′ be lax monoidal functors be-
tween lax monoidal categories. A monoidal transformation σ : (P, π)
-

72
Notions of Monoidal Category
(Q, χ) is a natural transformation
A
P
Q
σR

∨
A′
such that for all a1, . . . , an ∈A, the diagram
(Pa1 ⊗· · · ⊗Pan)
πa1,...,an- P(a1 ⊗· · · ⊗an)
(Qa1 ⊗· · · ⊗Qan)
(σa1 ⊗···⊗σan )
?
χa1,...,an
- Q(a1 ⊗· · · ⊗an)
σ(a1⊗···⊗an)
?
commutes.
(This time, there is only one possible level of strictness.)
Monoidal transformations can be composed in the expected ways, so that the
nine categories above become strict 2-categories. In particular, UMonCatwk
is a 2-category, so (1.5.7) there is a notion of equivalence of unbiased monoidal
categories. Explicitly, A and A′ are equivalent if there exist weak monoidal
functors and invertible monoidal transformations
A
(P,π)-

(Q,χ)
A′,
A
1
(Q,χ)◦(P,π)
η R

∨
A,
A′
(P,π)◦(Q,χ)
1
ε R

∨
A′,
and it makes no diﬀerence if we insist that ((P, π), (Q, χ), η, ε) forms an adjunc-
tion in UMonCatwk. As we might expect from the case of classical monoidal
categories (1.2.14), there is the following alternative formulation.
Proposition 3.1.5 Let A and A′ be unbiased monoidal categories. Then A and
A′ are equivalent if and only if there exists a weak monoidal functor (P, π) :
A
- A′ whose underlying functor P is full, faithful and essentially surjective
on objects.
Proof Mutatis mutandis, this is the same as the proof of 1.2.14.
2
We can now state and prove a coherence theorem for unbiased monoidal
categories.
Theorem 3.1.6 Every unbiased monoidal category is equivalent to a strict mo-
noidal category.
Proof
Let A be an unbiased monoidal category. We construct an (unbiased)
strict monoidal category st(A), the strict cover of A, and a weak monoidal

3.1 Unbiased monoidal categories
73
functor (P, π) : st(A)
- A whose underlying functor P is full, faithful and
essentially surjective on objects. By the last proposition, this is enough.
An object of st(A) is a ﬁnite sequence (a1, . . . , an) of objects of A (with n ∈
N). A map (a1, . . . , an)
- (b1, . . . , bm) in st(A) is a map (a1 ⊗· · · ⊗an)
-
(b1 ⊗· · · ⊗bm) in A, and composition and identities in st(A) are as in A. The
tensor in st(A) is given on objects by concatenation:
((a1
1, . . . , ak1
1 ) ⊗· · · ⊗(a1
n, . . . , akn
n )) = (a1
1, . . . , ak1
1 , . . . , a1
n, . . . , akn
n ).
To deﬁne the tensor of maps in st(A), take maps
(a1
1 ⊗· · · ⊗ak1
1 )
f1-
(b1
1 ⊗· · · ⊗bl1
1 )
...
...
...
(a1
n ⊗· · · ⊗akn
n )
fn-
(b1
n ⊗· · · ⊗bln
n )
in A; then their tensor product in st(A) is the composite map
(a1
1 ⊗· · · ⊗akn
n )
γ−1-
((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · · ⊗(a1
n ⊗· · · ⊗akn
n ))
(f1⊗···⊗fn)
-
((b1
1 ⊗· · · ⊗bl1
1 ) ⊗· · · ⊗(b1
n ⊗· · · ⊗bln
n ))
γ-
(b1
1 ⊗· · · ⊗bln
n )
in A. It is absolutely straightforward and not too arduous to check that st(A)
with this tensor forms a strict monoidal category.
The functor P : st(A)
- A is deﬁned by (a1, . . . , an) 7−→(a1 ⊗· · ·⊗an) on
objects, and ‘is the identity’ on maps—in other words, performs the identiﬁcation
st(A)((a1, . . . , an), (b1, . . . , bm)) = A((a1 ⊗· · · ⊗an), (b1 ⊗· · · ⊗bm)).
For each double sequence
D = ((a1
1, . . . , ak1
1 ), . . . , (a1
n, . . . , akn
n ))
of objects of A, the isomorphism
πD : (P(a1
1, . . . , ak1
1 )⊗· · ·⊗P(a1
n, . . . , akn
n ))
∼- P((a1
1⊗· · ·⊗ak1
1 )⊗· · ·⊗(a1
n⊗· · ·⊗akn
n ))
is simply γD. It is also quick and straightforward to check that (P, π) is a weak
monoidal functor.
P is certainly full and faithful. Moreover, for each a ∈A we have an isomor-
phism
ιa : a
∼- (a) = Pa,
and this proves that P is essentially surjective on objects.
2
As discussed on p. 14, coherence theorems take various forms, usually falling
under one of two headings: ‘all diagrams commute’ or ‘every weak thing is equiv-
alent to a strict thing’. The one here is of the latter type. In 3.2 we will prove

74
Notions of Monoidal Category
a coherence theorem for unbiased monoidal categories that is essentially of the
former type.
The proof above was adapted from Joyal and Street [1993, p. 29].
There
the st construction was done for classical monoidal categories A, for which the
situation is totally diﬀerent. What happens is that the n-fold tensor product
used in the deﬁnition of both st(A) and P must be replaced by some derived,
non-canonical, n-fold tensor product, such as
(a1, . . . , an) 7−→a1 ⊗(a2 ⊗(a3 ⊗· · · ⊗(an−1 ⊗an) · · ·));
and then in order to deﬁne both π and the tensor product of maps in st(A), it
is necessary to use coherence isomorphisms such as
(a1 ⊗(a2 ⊗(a3 ⊗a4))) ⊗(a5 ⊗(a6 ⊗a7))
∼-
a1 ⊗(a2 ⊗(a3 ⊗(a4 ⊗(a5 ⊗(a6 ⊗a7))))).
It would be folly to attempt to deﬁne these coherence isomorphisms, and prove
that st(A) and (P, π) have the requisite properties, without the aid of a coherence
theorem for monoidal categories. That is, the work required to do this would be of
about the same volume and kind as the work involved in the syntactic proof of the
‘all diagrams commute’ coherence theorem, so one might as well have proved that
coherence theorem anyway. In contrast, the proof that every unbiased monoidal
category is equivalent to a strict one is easy, short, and needs no supporting
results.
This does not, however, provide a short cut to proving any kind of coherence
result for classical monoidal categories.
In the next section we will see that
unbiased and classical monoidal categories are essentially the same, and it then
follows from Theorem 3.1.6 that every classical monoidal category is equivalent
to a strict one.
However, as with any serious undertaking involving classical
monoidal categories, the proof that they are the same as unbiased ones is close
to impossible without the use of a coherence theorem.
3.2
Algebraic notions of monoidal category
We have already seen two notions of monoidal category: classical and unbiased.
In one of them there was an n-fold tensor product just for n ∈{0, 2}, and in the
other there was an n-fold tensor product for all n ∈N. But what happens if we
take a notion of monoidal category in which there is an n-fold tensor product for
each n lying in some other subset of N? More generally, what if we allow any
number of diﬀerent n-fold tensors (zero, one, or more) for each value of n ∈N?
For instance, we might choose to take a notion of monoidal category in which
there are 6 unit objects, a single 3-fold tensor product, 8 11-fold tensor products,
and ℵ4 38-fold tensor products. Just as long as we add in enough coherence
isomorphisms to ensure that any two n-fold tensor products built up from the
given ones are canonically isomorphic, this new notion of monoidal category ought
to be essentially the same as the classical notion.

3.2 Algebraic notions of monoidal category
75
This turns out to be the case. Formally, we start with a ‘signature’ Σ ∈SetN.
(In the example this was given by Σ(0) = 6, Σ(1) = Σ(2) = 0, Σ(3) = 1,
and so on.)
From this we deﬁne the category Σ-MonCatwk of ‘Σ-monoidal
categories’ and weak monoidal functors between them. We then show that, up
to equivalence, Σ-MonCatwk is independent of the choice of Σ, assuming only
that Σ is large enough that we can build at least one n-fold tensor product for
each n ∈N. We also show that the category MonCatwk of classical monoidal
categories is isomorphic to Σ-MonCatwk for a certain value of Σ, and that the
same goes for the unbiased version UMonCatwk (for a diﬀerent value of Σ); it
follows that the classical and unbiased deﬁnitions are equivalent.
In the introduction to this chapter, I argued that comparing deﬁnitions of
monoidal category is important for understanding higher-dimensional category
theory. Here is a further reason why it is important, speciﬁc to this particular,
‘algebraic’, family of deﬁnitions of monoidal category.
Consider the deﬁnition of monoid.
Usually a monoid is deﬁned as a set
equipped with a binary operation and a nullary operation, satisfying associativ-
ity and unit equations. ‘Weakening’ or ‘categorifying’ this deﬁnition, we obtain
the classical deﬁnition of (weak) monoidal category. However, this process of cat-
egoriﬁcation is dependent on presentation. That is, we could equally well have
deﬁned a monoid as a set equipped with one n-ary operation for each n ∈N,
satisfying appropriate equations, and categorifying this gives a diﬀerent notion
of monoidal category—the unbiased one. So diﬀerent presentations of the same
0-dimensional theory (monoids) give, under this process of categoriﬁcation, dif-
ferent 1-dimensional theories (of monoidal category).
Thus, our purpose is to show that in this particular situation, the presentation-
sensitivity of categoriﬁcation disappears when we work up to equivalence.
More generally, a fully-developed theory of weak n-categories might include
a formal process of weakening, which would take as input a theory of strict
structures and give as output a theory of weak structures.
If the weakening
process depended on how the theory of strict structures was presented, then we
would have to ask whether diﬀerent presentations always gave equivalent theories
of weak structures. We might hope so; but who knows?
Our ﬁrst task is to deﬁne Σ-monoidal categories and maps between them, for
an arbitrary Σ ∈SetN. Here it is in outline. A Σ-monoidal category should be a
category A equipped with a tensor product ⊗σ : An
- A for each σ ∈Σ(n).
There should also be a coherence isomorphism between any pair of derived n-fold
tensors: for instance, there should be a speciﬁed isomorphism
⊗σ1(⊗σ2(a1, a2, a3), a4, ⊗σ3(a5))
∼- ⊗σ4 (a1, a2, ⊗σ5(a3, a4), a5)
for any
σ1, σ2 ∈Σ(3), σ3 ∈Σ(1), σ4 ∈Σ(4), σ5 ∈Σ(2)

76
Notions of Monoidal Category
and any objects a1, . . . , a5 of A. This isomorphism is naturally depicted as
•
H
H
H

•
@
@   •
σ1
σ2
σ3
a1 a2 a3
a4
a5
∼-
•
P
P
P
P
P
@
@   
•
@
@   σ4
σ5
a1
a2
a3
a4
a5 .
(3:2)
Recall from 2.3 that labelled trees arise as operations in free operads: the two
derived tensor products drawn above are elements of (FΣ)(5), where FΣ is the
free operad on Σ. Hence FΣ is the operad of (derived) tensor operations. To
obtain the coherence isomorphisms, replace the set (FΣ)(n) by the indiscrete
category I((FΣ)(n)) whose objects are the elements of (FΣ)(n); then the picture
above shows a typical map in I((FΣ)(5)).
Also recall from p. 43 that there is a notion of ‘V-operad’ for any symmetric
monoidal category V, and an accompanying notion of an algebra (in V) for any
V-operad. The categories I((FΣ)(n)) form a Cat-operad, an algebra for which
consists of a category A, a functor An
- A for each derived n-fold tensor
operation, and a natural isomorphism between any two functors An
- A so
arising, all ﬁtting together coherently. This is exactly what we want a Σ-monoidal
category to be.
Precisely, deﬁne the functor
( )-MonCatwk :
SetN
-
CATop
Σ
7−→
Σ-MonCatwk
to be the composite of the functors
SetN
F- Set-Operad
I∗- Cat-Operad
Algwk
- CATop,
where the terms involved are now deﬁned in turn.
• Set-Operad is the category of ordinary (Set-)operads, usually just called
Operad (2.2.1).
• Cat-Operad is the category of Cat-operads (p. 43).
• F is the free operad functor (p. 58).
• I : Set
- Cat is the functor assigning to each set the indiscrete cat-
egory on it (p. 4), and since I preserves products, it induces a functor
I∗: Set-Operad
- Cat-Operad.
• For a Cat-operad R, the (large) category Algwk(R) consists of R-algebras
and weak maps between them. So by deﬁnition, an object of Algwk(R) is
a category A together with a sequence (R(n) × An
actn
- A)n∈N of functors,
compatible with the composition and identities of the operad R, and a map

3.2 Algebraic notions of monoidal category
77
R(n)×{R(k1)×···×R(kn)}
×Ak1+···+kn
1×actk1 ×···×actkn- R(n)×An
actn- A
⇒
1×πk1 ×···×πkn
⇒
πn
R(n)×{R(k1)×···×R(kn)}
×A′k1+···+kn
1×P k1+···+kn
?
1×actk1 ×···×actkn
- R(n)×A′n
1×P n
?
actn
- A′
P
?
=
R(n)×{R(k1)×···×R(kn)}
×Ak1+···+kn
comp×1
- R(k1+···+kn)×Ak1+···+kn
actk1+···+kn- A
=
⇒
πk1+···+kn
R(n)×{R(k1)×···×R(kn)}
×A′k1+···+kn
1×P k1+···+kn
?
comp×1
- R(k1+···+kn)×A′k1+···+kn
1×P k1+···+kn
?
actk1+···+kn
- A′
P
?
1×A1
∼- A
=
1×A′1
1×P 1
?
∼- A′
P
?
=
1×A1
ids×1- R(1)×A1
act1- A
=
⇒
π1
1×A′1
1×P 1
?
ids×1- R(1)×A′1
1×P 1
?
act1
- A′
P
?
Figure 3-A: Coherence axioms for a weak map of R-algebras
A
- A′ in Algwk(R) is a functor P : A
- A′ together with a natural
isomorphism
R(n) × An
actn- A
⇒
πn
R(n) × A′n
1×P n
?
actn
- A′
P
?
for each n ∈N, satisfying the coherence axioms in Fig. 3-A.
• For a map H : R
- S of Cat-operads, the induced functor H∗:
Algwk(S)
- Algwk(R) is deﬁned by composition with H: if A is an
S-algebra then the resulting R-algebra has the same underlying category

78
Notions of Monoidal Category
and R-action given by
R(n) × An Hn×1
- S(n) × An
actn- A.
In the construction above we used weak maps between algebras for a Cat-
operad, but we could just as well have used lax maps (by dropping the insistence
that the natural transformations πn are isomorphisms) or strict maps (by in-
sisting that the πn’s are identities). The resulting functors Cat-Operad
-
CATop are, of course, called Alglax and Algstr, and so we have three functors
( )-MonCatlax, ( )-MonCatwk, ( )-MonCatstr : SetN
- CATop.
Deﬁnition 3.2.1 Let Σ ∈SetN.
A Σ-monoidal category is an object of
Σ-MonCatlax (or equivalently, of Σ-MonCatwk or Σ-MonCatstr). A lax (re-
spectively, weak or strict) monoidal functor between Σ-monoidal categories
is a map in Σ-MonCatlax (respectively, Σ-MonCatwk or Σ-MonCatstr).
Now we can state the results. First, the notion of Σ-monoidal category re-
ally does generalize the notions of unbiased and classical monoidal category, as
intended all along:
Theorem 3.2.2 (Coherence for unbiased monoidal categories and func-
tors) Writing 1 for the terminal object of SetN, there are isomorphisms of cat-
egories
UMonCatlax
∼=
1-MonCatlax,
UMonCatwk
∼=
1-MonCatwk,
UMonCatstr
∼=
1-MonCatstr.
Proof
See Appendix B.1.
It takes almost no calculation to see that there
is a canonical functor 1-MonCatlax
- UMonCatlax. To see that it is an
isomorphism requires calculations using the coherence axioms for an unbiased
monoidal category. Restricting to the weak and strict cases is simple.
2
Theorem 3.2.3 (Coherence for classical monoidal categories and func-
tors) Write Σc for the object of SetN given by Σc(n) = 1 for n ∈{0, 2} and
Σc(n) = ∅otherwise. Then there are isomorphisms of categories
MonCatlax
∼=
Σc-MonCatlax,
MonCatwk
∼=
Σc-MonCatwk,
MonCatstr
∼=
Σc-MonCatstr.
Proof
See Appendix B.2. The strategy is just the same as in 3.2.2, except
that this time the calculations are in principle much more tricky (because of
the irregularity of the data and axioms for a classical monoidal category) but in
practice can be omitted (by relying on the coherence theorems of others).
2

3.2 Algebraic notions of monoidal category
79
It took a little work to deﬁne ‘Σ-monoidal category’, but I hope it will be
agreed that it is a completely natural deﬁnition, free from ad hoc coherence ax-
ioms and correctly embodying the idea of a monoidal category with as many
primitive tensor operations as are speciﬁed by Σ. So, for instance, the state-
ment that the objects of MonCatwk correspond one-to-one with the objects of
Σc-MonCatwk says that the coherence data and axioms in the classical deﬁni-
tion of monoidal category are exactly right. Were there no such isomorphism, it
would be the coherence data or axioms at fault, not the deﬁnition of Σ-monoidal
category. This is why 3.2.2 and 3.2.3 are called coherence theorems.
The unbiased coherence theorem (3.2.2) also tells us that unbiased monoidal
categories play a universal role: for any Σ ∈SetN, the unique map Σ
-
1 induces a canonical map from unbiased monoidal categories to Σ-monoidal
categories,
UMonCatwk ∼= 1-MonCatwk
- Σ-MonCatwk.
Concretely, if we are given an unbiased monoidal category A then we can deﬁne a
Σ-monoidal category by taking ⊗σ to be the n-fold tensor ⊗n, for each σ ∈Σ(n).
Theorem 3.2.4 (Irrelevance of signature for monoidal categories) For
any plausible Σ, Σ′ ∈SetN, there are equivalences of categories
Σ-MonCatlax ≃Σ′-MonCatlax,
Σ-MonCatwk ≃Σ′-MonCatwk.
Here Σ ∈SetN is called plausible if Σ(0) ̸= ∅and for some n ≥2, Σ(n) ̸= ∅.
This means that n-fold tensor products can be derived for all n ∈N. In contrast,
if Σ(0) = ∅then (FΣ)(0) = ∅, so (IFΣ)(0) = ∅, so in a Σ-monoidal category
all the tensor operations are of arity n ≥1—there is no unit object. Dually, if
Σ(n) = ∅for all n ≥2 then there is no derived binary tensor. In these cases
we would not expect Σ-monoidal categories to be much like ordinary monoidal
categories. So plausibility is an obvious minimal requirement.
Proof It is enough to prove the result in the case Σ′ = 1. As can be seen from
the explicit description of free operads on p. 58, plausibility of Σ says exactly
that (FΣ)(n) ̸= ∅for each n ∈N, or equivalently that there exists a map 1
-
UFΣ in SetN, where U : Set-Operad
- SetN is the forgetful functor. By
adjointness, this says that there is a map F1
- FΣ of Set-operads, giving
a map I∗F1
- I∗FΣ of Cat-operads. On the other hand, 1 is the terminal
object of SetN, so we have maps I∗F1
-

I∗FΣ.
In brief, the rest of the proof runs as follows. Cat-Operad naturally has the
structure of a 2-category, because Cat does; and if two objects of Cat-Operad
are equivalent then so are their images under both Alglax and Algwk. By the
nature of indiscrete categories, the existence of maps I∗F1
-

I∗FΣ implies
that I∗F1 ≃I∗FΣ. The result follows. However, the 2-categorical details are
rather tiresome to check and the reader may prefer to avoid them. The main
reason for including them below is that they reveal why the theorem holds at the
lax and weak levels but not at the strict level.

80
Notions of Monoidal Category
So, for the conscientious, a transformation
R
H
H′
αR

∨
S
of Cat-operads is a sequence




R(n)
Hn
H′
n
αnR

∨
S(n)





n∈N
of natural transformations, such that
R(n)×R(k1)×···×R(kn)
comp- R(k1+···+kn)
Hk1+···+kn
H′
k1+···+kn
R

∨
S(k1+···+kn)
=
R(n)×R(k1)×···×R(kn)
Hn×Hk1 ×···Hkn
H′
n×H′
k1 ×···H′
kn
R

∨
S(n)×S(k1)×···×S(kn)
comp- S(k1+···+kn),
where the unlabelled 2-cells are respectively αk1+···+kn and αn × αk1 × · · ·× αkn,
and
1
ids - R(1)
H1
H′
1
α1R

∨
S(1) = 1
ids
ids
1
R

∨
S(1).
With the evident compositions, Cat-Operad becomes a strict 2-category. The
statement on indiscrete categories is easily proved; in fact, if R is any Cat-operad
and Q any Set-operad then there is a unique transformation between any pair
of maps R
-
- I∗Q.
The functor Alglax becomes a strict map Cat-Operad
- CATco op of
2-categories, where the codomain is CAT with both the 1-cells and the 2-cells
reversed (1.5). To see this, let α be a transformation of Cat-operads as above.
We need to produce a natural transformation
Alglax(R)
H∗
H′∗
	
I
∧
Alglax(S),

3.2 Algebraic notions of monoidal category
81
which in turn means producing for each S-algebra A a lax map H′∗(A)
-
H∗(A) of R-algebras. The composite natural transformation
R(n) × An
Hn
H′
n
αnR

∨
S(n) × An
actA
n- A
can be re-drawn as a natural transformation
R(n) × An
actH′∗(A)
n
- A
⇒
R(n) × An
1
?
actH∗(A)
n
- A,
1
?
(3:3)
and this gives the desired lax map. (To make the necessary distinctions, super-
scripts have been added to the actn’s naming the algebra concerned.) We thus
obtain a strict map
Alglax : Cat-Operad
- CATco op
of 2-categories.
It follows immediately that if R and S are equivalent Cat-operads then
Alglax(R) and Alglax(S) are equivalent categories.
To see that Algwk also
preserves equivalence of objects, note that if α is an invertible transformation
of Cat-operads then the natural transformation (3:3) is also invertible, and so
deﬁnes a weak map of algebras. Put another way, Algwk is a map from the
2-category (Cat-operads + maps + invertible transformations) into CATco op.
(However, (3:3) only induces a strict map H′∗(A)
- H∗(A) if it is the
identity transformation, which means that if R and S are equivalent Cat-operads
then Algstr(R) and Algstr(S) are not necessarily equivalent categories.)
2
Corollary 3.2.5 There are equivalences of categories
UMonCatlax ≃MonCatlax,
UMonCatwk ≃MonCatwk.
Proof 3.2.2 + 3.2.3 + 3.2.4.
2
We arrived at the equivalence of unbiased and classical monoidal categories
by a roundabout route,
UMonCatlax ∼= 1-MonCatlax ≃Σc-MonCatlax ∼= MonCatlax,
so it may be useful to consider a direct proof.
Given an unbiased monoidal
category (A, ⊗, γ, ι), we can canonically write down a classical monoidal category:

82
Notions of Monoidal Category
the underlying category is A, the tensor is ⊗2, the unit is ⊗0, and the associativity
and unit coherence isomorphisms are formed from certain components of γ and
ι.
The converse process is non-canonical: we have to choose for each n ∈N
an n-fold tensor operation built up from binary tensor operations and the unit
object. Put another way, we have to choose for each n ∈N an n-leafed classical
tree (where ‘classical’ means that each vertex has either 2 or 0 outgoing edges, as
in 2.3.4); and since FΣc is exactly the operad of classical trees, this corresponds
to the step of the proof of 3.2.4 where we chose a map 1
- UFΣ in SetN.
All of the results above can be repeated with monoidal transformations brought
into the picture. Then Σ-monoidal categories form a strict 2-category, and all the
isomorphisms and equivalences of categories become isomorphisms and equiva-
lences of 2-categories. That we did not need to mention monoidal transformations
in order to prove the equivalence of the various notions of monoidal category says
something about the strength of our equivalence result. For suppose we start
with a Σ-monoidal category, derive from it a Σ′-monoidal category, and derive
from that a second Σ-monoidal category. Then, in our construction, the two
Σ-monoidal categories are not just equivalent in the 2-category Σ-MonCatwk,
but isomorphic. So Theorem 3.2.4 is ‘one level better’ than might be expected.
3.3
Non-algebraic notions of monoidal category
Coherence axioms have got a bad name for themselves: unmemorable, unenlight-
ening, and unwieldy, they are often regarded as bureaucracy to be fought through
grimly before getting on to the real business. Some people would, therefore, like
to create a world where there are no coherence axioms at all—or anyway, as few
as possible.
Whatever the merits of this aspiration, it is a fact that it can be achieved
in some measure; that is, there exist approaches to various higher categorical
structures that involve almost no coherence axioms.
In this chapter we look
at two diﬀerent such approaches for monoidal categories. The ﬁrst exploits the
relation between monoidal categories and multicategories. I will describe it in
some detail. The second is based on the idea of the nerve of a category, and
has its historical roots in the homotopy-algebraic structures known as Γ-spaces.
Since it has less to do with the main themes of this book, I will explain it more
sketchily.
So, we start by looking at monoidal categories vs. multicategories. One might
argue that multicategories are conceptually more primitive than monoidal cat-
egories: that an operation taking several inputs and producing one output is a
more basic idea than a set whose elements are ordered tuples. In any case, the
ﬁrst example of a ‘tensor product’ that many of us learned was implicitly intro-
duced via multicategories—the tensor product V ⊗W of two vector spaces being
characterized as the codomain of a ‘universal bilinear map’ out of V, W. Now,
the monoidal category of vector spaces contains no more or less information than
the multicategory of vector spaces; given either one, the other can be derived
in its entirety. So, with the thoughts in our head that multicategories are basic

3.3 Non-algebraic notions of monoidal category
83
and coherence axioms are bad, we might hope to ‘deﬁne’ a monoidal category as
a multicategory in which there are enough universal maps around. And this is
what we do.
Formally, we have a functor V assigning to each monoidal category its un-
derlying multicategory; we want to show that V gives an equivalence between
(monoidal categories) and some subcategory R of Multicat; and we want, more-
over, to describe R. In the terms of the previous paragraph, R consists of those
multicategories containing ‘enough universal maps’.
Before starting we have to make precise something that has so far been left
vague. In Example 2.1.3, we deﬁned the underlying multicategory C of a monoi-
dal category A to have the same objects as A and maps given by
C(a1, . . . , an; a) = A(a1 ⊗· · · ⊗an, a),
but we deferred the question of what exactly the expression a1 ⊗· · · ⊗an meant.
We answer it now, and so obtain a precise deﬁnition of the functor V .
If A is a strict monoidal category then the expression makes perfect sense. If
A is not strict then it still makes perfect sense as long as we have chosen to use
unbiased rather than classical monoidal categories: take a1 ⊗· · · ⊗an to mean
⊗n(a1, . . . , an). Bringing into play the coherence maps of A, we can also deﬁne
composition in C, and so obtain the entire multicategory structure of C without
trouble; we arrive at a functor
V : UMonCatwk
- Multicat.
What if we insist on starting from a classical monoidal category? We can
certainly obtain a multicategory by passing ﬁrst from classical to unbiased and
then applying the functor V just mentioned. This passage amounts to a choice of
an n-leafed classical tree τn ∈ctr(n) for each n ∈N (see p. 82), and the resulting
multicategory C has the same objects as A and maps given by
C(a1, . . . , an; a) = A(⊗τn(a1, . . . , an), a)
where ⊗τn : An
- A is ‘tensor according to the shape of τn’ (deﬁned formally
in B.2). So, any such sequence τ• = (τn)n∈N induces a functor
Vτ• : MonCatwk
- Multicat.
For instance, if we take one of the two most obvious choices of sequence τ• and
write C = Vτ•(A) as usual, then
C(a1, . . . , an; a) = A(a1 ⊗(a2 ⊗(a3 ⊗· · · ⊗(an−1 ⊗an) · · ·)), a).
But there is also a way of passing from classical monoidal categories to multi-
categories without making any arbitrary choices. Let A be a classical monoidal
category. For n ∈N and τ, τ ′ ∈ctr(n), let
An
⊗τ
⊗τ′
δτ,τ ′
R

∨
A

84
Notions of Monoidal Category
be the canonical isomorphism whose existence is asserted by the coherence the-
orem (1.2). Now deﬁne a multicategory C by taking an object to be, as usual,
just an object of A, and a map a1, . . . , an
- a to be a family (fτ)τ∈ctr(n) in
which fτ ∈A(⊗τ(a1, . . . , an), a) for each τ ∈ctr(n) and fτ ′◦δτ,τ ′ = fτ for all
τ, τ′ ∈ctr(n). This yields another functor
V ′ : MonCatwk
- Multicat.
However, a family (fτ)τ∈ctr(n) as above is entirely determined by any single fτ, so
the multicategory C = V ′(A) just constructed is isomorphic to the multicategory
Vτ•(A) obtained by choosing a particular sequence τ• of trees. So V ′ ∼= Vτ• for
any τ•, and henceforth we write V ′ or Vτ• as just V .
We now have ways of obtaining a multicategory from either an unbiased
or a classical monoidal category, and it is a triviality to check that these are
compatible with the equivalence between unbiased and classical: the diagram
UMonCatwk
≃- MonCatwk
Multicat
V

V
-
commutes up to canonical isomorphism. So we know unambiguously what it
means for a multicategory to be ‘the underlying multicategory of some monoidal
category’, and similarly for maps.
The results for which we hoped, exhibiting monoidal categories as special
multicategories, can be phrased in various diﬀerent ways.
Deﬁnition 3.3.1 A representation of a multicategory C consists of an object
⊗(c1, . . . , cn) and a map
u(c1, . . . , cn) : c1, . . . , cn
- ⊗(c1, . . . , cn)
for each n ∈N and c1, . . . , cn ∈C, with the following factorization prop-
erty (Fig. 3-B): for any objects c1
1, . . . , ck1
1 , . . . , c1
n, . . . , ckn
n , c and any map f :
c1
1, . . . , ckn
n
- c, there is a unique map
f : ⊗(c1
1, . . . , ck1
1 ), . . . , ⊗(c1
n, . . . , ckn
n )
- c
such that
f ◦(u(c1
1, . . . , ck1
1 ), . . . , u(c1
n, . . . , ckn
n )) = f.
A multicategory is representable if it admits a representation.
Deﬁnition 3.3.2 A map c1, . . . , cn
u- c′ in a multicategory is pre-universal
if (Fig. 3-C(a)) for any object c and map c1, . . . , cn
f- c, there is a unique map
c′
f- c such that f ◦u = f.

3.3 Non-algebraic notions of monoidal category
85
∃!f
HHHH




HHHH




•
u(c1
1, . . . , ck1
1 )
•
u(c1
n, . . . , ckn
n )
c
c1
1
ck1
1
...
c1
n
ckn
n
...
⊗(c1
1, . . . , ck1
1 )
⊗(c1
n, . . . , ckn
n )
...
·
·
·
=







J
J
J
J
J
JJ
f
c1
1
ck1
1
...
c1
n
ckn
n
...
...
c
Figure 3-B: Representation of a multicategory
c1
cn
...
u
HHHH




c′
∃!f
c
=
c1
cn
...
f
HHHH




c
(a)
a1
ap
...
c1
cn
...
b1
bq
...
u
HHHH




c′
...
...
∃!f
c
=
a1
ap
...
c1
cn
...
b1
bq
...
J
J
J
J
J
JJ







f
c
(b)
Figure 3-C: (a) Pre-universal map, and (b) universal map

86
Notions of Monoidal Category
Deﬁnition 3.3.3 A map c1, . . . , cn
u- c′ in a multicategory is universal if
(Fig. 3-C(b)) for any objects a1, . . . , ap, b1, . . . , bq, c and any map
a1, . . . , ap, c1, . . . , cn, b1, . . . , bq
f- c,
there is a unique map a1, . . . , ap, c′, b1, . . . , bq
f- c such that f◦p+1u = f.
(See 2.3 for the ◦p+1 notation.)
Here is the main result.
Theorem 3.3.4
a. The following conditions on a multicategory C are equiv-
alent:
• C ∼= V (A) for some monoidal category A
• C is representable
• every sequence c1, . . . , cn of objects of C is the domain of some pre-
universal map, and the composite of pre-universal maps is pre-universal
• every sequence c1, . . . , cn of objects of C is the domain of some uni-
versal map.
Under these equivalent conditions, a map in C is universal if and only if it
is pre-universal.
b. Let A and A′ be monoidal categories. The following conditions on a map
H : V (A)
- V (A′) of multicategories are equivalent:
• H = V (P, π) for some weak monoidal functor (P, π) : A
- A′
• H preserves universal maps (that is, if u is a universal map in V (A)
then Hu is a universal map in V (A′)).
The functor V is faithful, and therefore provides an equivalence between UMonCatwk
or MonCatwk (as you prefer) and the subcategory RepMulti of Multicat con-
sisting of the representable multicategories and the universal-preserving maps.
The only subtle point here is that the existence of a pre-universal map for
every given domain is not enough to ensure that the multicategory comes from
a monoidal category.
A speciﬁc example appears in Leinster [2003], but the
point can be explained here in the familiar context of vector spaces. Suppose we
are aware that for each pair (X, Y ) of vector spaces, there is an object X ⊗Y
and a bilinear map X, Y
uX,Y- X ⊗Y with the traditional universal property
(which we are calling pre-universality). Then it does not follow for purely formal
reasons that the tensor product is associative (up to isomorphism): one has to
use some actual properties of vector spaces. Essentially, one either has to show
that trilinear maps of the form uX⊗Y,Z◦(uX,Y , 1Z) and uX,Y ⊗Z◦(1X, uY,Z) are
pre-universal, or show that maps of the form uX,Y are in fact universal.
The energetic reader with plenty of time on her hands will have no diﬃculty
in proving Theorem 3.3.4; the main ideas have been explained and it is just

3.3 Non-algebraic notions of monoidal category
87
a matter of settling the details.
So in a sense that is an end to the matter:
monoidal categories can be recognized as multicategories with a certain property,
and monoidal functors similarly, all as hoped for originally.
We can, however, take things further. With just a little more work than a
direct proof would involve, Theorem 3.3.4 can be seen as a special case of a result
in the theory of ﬁbrations of multicategories. This theory is a fairly predictable
extension of the theory of ﬁbrations of ordinary categories, and the result of
which 3.3.4 is a special case is the multicategorical analogue of a standard result
on categorical ﬁbrations.
The basic theory of ﬁbrations of multicategories is laid out in Leinster [2003],
which culminates in the deduction of 3.3.4 and some related facts on, for in-
stance, strict monoidal categories as multicategories. Here is the short story.
For any category D, a ﬁbration (or really, opﬁbration) over D is essentially the
same thing as a weak functor D
- Cat. (We looked at the case of discrete
ﬁbrations in 1.1.) With appropriate deﬁnitions, a similar statement can be made
for multicategories. Taking D to be the terminal multicategory 1, we ﬁnd that
the unique map C
- 1 is a ﬁbration exactly when C is representable, and that
weak functors 1
- Cat are exactly unbiased monoidal categories. (Universal
and pre-universal maps in C correspond to what are usually called cartesian and
pre-cartesian maps.) So a representable multicategory is essentially the same
thing as a monoidal category.
We now consider a diﬀerent non-algebraic notion of monoidal category: ‘ho-
motopy monoidal categories’. The idea can be explained as follows.
Recall that every small category has a nerve, and that this allows categories
to be described as simplicial sets satisfying certain conditions.
Explicitly, if
n ∈N then let [n] = {0, 1, . . ., n}, and let ∆be the category whose objects
are [0], [1], [2], . . . and whose morphisms are all order-preserving functions; so ∆
is equivalent to the category of nonempty ﬁnite totally ordered sets. A functor
∆op
- Set is called a simplicial set. (More generally, a functor ∆op
-
E is called a simplicial object in E.) Any ordered set (I, ≤) can be regarded
as a category with object-set I and with exactly one morphism i
- j if i ≤j,
and none otherwise. This applies in particular to the ordered sets [n], and so we
may deﬁne the nerve NA of a small category A as the simplicial set
NA :
∆op
-
Set
[n]
7−→
Cat([n], A).
This gives a functor N : Cat
- [∆op, Set], which turns out to be full and
faithful.
Hence Cat is equivalent to the full subcategory of [∆op, Set] whose
objects are those simplicial sets X isomorphic to NA for some small category A.
There are various intrinsic characterizations of such simplicial sets X. We do not
need to think about the general case for now, only the special case of one-object
categories, that is, monoids.

88
Notions of Monoidal Category
So: let k, n1, . . . , nk ∈N, and for each j ∈{1, . . ., k}, deﬁne a map ιj in ∆by
ιj :
[nj]
-
[n1 + · · · + nk]
p
7−→
n1 + · · · + nj−1 + p.
Given also a simplicial set X, let
ξn1,...,nk : X[n1 + · · · + nk]
- X[n1] × · · · × X[nk]
be the map whose jth component is X(ιj). Write
ξ(k) = ξ1,...,1 : X[k]
- X[1]k.
Proposition 3.3.5 The following conditions on a simplicial set X are equiva-
lent:
a. ξn1,...,nk : X[n1 + · · · + nk]
- X[n1]×· · ·×X[nk] is an isomorphism for
all k, n1, . . . , nk ∈N
b. ξm,n : X[m + n]
- X[m] × X[n] is an isomorphism for all m, n ∈N,
and the unique map X[0]
- 1 is an isomorphism
c. ξ(k) : X[k]
- X[1]k is an isomorphism for all k ∈N
d. X ∼= NA for some monoid A.
Proof
Straightforward. Note that (b) is just (a) restricted to k ∈{0, 2}, and
similarly that (c) is just (a) in the case n1 = · · · = nk = 1.
2
Monoids are, therefore, the same thing as simplicial sets satisfying any of
the conditions (a)–(c). The proposition can be generalized: replace Set by any
category E possessing ﬁnite products to give a description of monoids in E as
certain simplicial objects in E. In particular, if we take E = Cat then we obtain
a description of strict monoidal categories as certain simplicial objects in Cat.
This suggests that a ‘righteous’ (weak) notion of monoidal category could be
obtained by changing the isomorphisms in Proposition 3.3.5 to equivalences.
Proposition 3.3.6 The following conditions on a functor X : ∆op
- Cat
are equivalent:
a. ξn1,...,nk : X[n1 + · · · + nk]
- X[n1] × · · · × X[nk] is an equivalence for
all k, n1, . . . , nk ∈N
b. ξm,n : X[m + n]
- X[m] × X[n] is an equivalence for all m, n ∈N, and
the unique map X[0]
- 1 is an equivalence
c. ξ(k) : X[k]
- X[1]k is an equivalence for all k ∈N.
Proof As noted above, both the implications (a) ⇒(b) and (a) ⇒(c) are trivial.
Their converses are straightforward inductions.
2

3.3 Non-algebraic notions of monoidal category
89
Deﬁnition 3.3.7 A homotopy monoidal category is a functor X : ∆op
-
Cat satisfying the equivalent conditions 3.3.6(a)–(c). HMonCat is the category
of homotopy monoidal categories and natural transformations between them.
A similar deﬁnition can be made with Top replacing Cat and homotopy
equivalences replacing categorical equivalences, to give a notion of ‘topological
monoid up to homotopy’ (Leinster [1999b, §4]). It can be shown that any loop
space provides an example. In fact, loop space theory was where the idea ﬁrst
arose: there, topological monoids up to homotopy were called ‘special ∆-spaces’
or ‘special simplicial spaces’ (Segal [1974], Anderson [1971], Adams [1978, p. 63]).
Before I say anything about the comparison with ordinary monoidal cate-
gories, let me explain another route to the notion of homotopy monoidal cate-
gory.
Let D be the augmented simplex category (1.2.2), whose objects are the (pos-
sibly empty) ﬁnite totally ordered sets n = {1, . . ., n}. The fact that ∆is D with
the object 0 removed is a red herring: we will not use this connection between
∆and D.
Now, D is the free monoidal category containing a monoid, in the sense that
for any monoidal category (E, ⊗, I) (classical, say), there is an equivalence
MonCatwk((D, +, 0), (E, ⊗, I)) ≃Mon(E, ⊗, I)
between the category of weak monoidal functors D
- E and the category of
monoids in E. For given a weak monoidal functor D
- E, the image of any
monoid in D is a monoid in E, and in particular, the object 1 of D has a unique
monoid structure, giving a monoid in E. Conversely, given a monoid A in E,
there arises a weak monoidal functor D
- E sending n to An.
Taking E = Cat describes strict monoidal categories as weak monoidal func-
tors (D, +, 0)
- (Cat, ×, 1). Such a weak monoidal functor is an ordinary
functor W : D
- Cat together with isomorphisms
ωm,n : W(m + n)
- Wm × Wn,
ω· : W0
- 1
(3:4)
(m, n ∈N) satisfying coherence axioms. By changing ‘isomorphisms’ to ‘equiva-
lences’ in the previous sentence, we obtain another notion of weak monoidal cat-
egory. Formally, given monoidal categories D and E, write MonCatcolax(D, E)
for the category of colax monoidal functors D
- E (as deﬁned in 1.2.10) and
monoidal transformations between them. The new ‘weak monoidal categories’
are the objects of the category HMonCat′ deﬁned as follows.
Deﬁnition 3.3.8 HMonCat′ is the full subcategory of
MonCatcolax((D, +, 0), (Cat, ×, 1))
consisting of the colax monoidal functors (W, ω) for which each of the func-
tors (3:4) (m, n ∈N) is an equivalence of categories.

90
Notions of Monoidal Category
You might object that this is useless as a deﬁnition of monoidal category,
depending as it does on pre-existing concepts of monoidal category and colax
monoidal functor. There are several responses. One is that we could give an ex-
plicit description of what a colax monoidal functor D
- Cat is, along the lines
of the traditional description of cosimplicial objects by face and degeneracy maps,
and this would eliminate the dependence. Another is that we will soon show that
HMonCat′ ∼= HMonCat, and HMonCat is deﬁned without mention of mo-
noidal categories. A third is that while 3.3.8 might not be good as a deﬁnition
of monoidal category, it is a useful reformulation: for instance, if we change the
monoidal category (Cat, ×, 1) to the monoidal category of chain complexes and
change categorical equivalence to chain homotopy equivalence, then we obtain
a reasonable notion of homotopy diﬀerential graded algebra. This exhibits an
advantage of the D approach over the ∆approach: we can use it to discuss ho-
motopy monoids in monoidal categories where the tensor is not cartesian product.
Much more on this can be found in my [1999b] and [2000a].
To show that HMonCat′ ∼= HMonCat, we ﬁrst establish a connection
between ∆and D.
Proposition 3.3.9 Let E be a category with ﬁnite products. Then there is an
isomorphism of categories
MonCatcolax((D, +, 0), (E, ×, 1)) ∼= [∆op, E].
Proof
This is a special case of a general result on Kleisli categories (Lein-
ster [2000a, 3.1.6]; beware the diﬀerent notation). It can also be proved directly
in the following way. A functor W : D
- E is conventionally depicted as a
diagram
·
- ·
-

- ·
-

-

- ·
· · ·
of objects and arrows in E. A colax monoidal structure ω on W amounts to a
pair of maps
Wm 
W(m + n)
- Wn
for each m, n ∈N, satisfying axioms implying, among other things, that all of
these maps can be built up from the special cases
Wm 
W(m + 1),
W(1 + n)
- Wn.
So a colax monoidal functor (W, ω) : D
- E looks like
· ............
-
............ ·
............
-

-
............
·
............
-

-

-
............
·
· · · ,
and this is the conventional picture of a simplicial object in E.
2

3.3 Non-algebraic notions of monoidal category
91
So if E is a category with ordinary, cartesian, products, simplicial objects in
E are the same as colax monoidal functors from D to E. This fails when E is a
monoidal category whose tensor product is not the cartesian product. It could
be argued that in this situation, it would be better to deﬁne a simplicial object in
E not as a functor ∆op
- E, but rather as a colax monoidal functor D
- E.
For example, it was the colax monoidal version that made possible the deﬁnition
of homotopy diﬀerential graded algebra referred to above.
In Proposition 3.3.9, if the colax monoidal functor (W, ω) corresponds to the
simplicial object X then we have
Wn = X[n],
ωm,n = ξm,n,
ω· = ξ·
(where ξ· : X[0]
- 1 means ξn1,...,nk in the case k = 0). So by using condi-
tion (b) of Proposition 3.3.6 we obtain:
Corollary 3.3.10 The isomorphism of Proposition 3.3.9 restricts to an isomor-
phism HMonCat′ ∼= HMonCat.
2
Our two ways of approaching homotopy monoidal categories, via either nerves
in a ﬁnite product category or monoids in a monoidal category, are therefore
equivalent in a strong sense. The next question is: are they also equivalent to the
standard notion of monoidal category? I will stop short of a precise equivalence
result, and instead just indicate how to pass back and forward between homotopy
and ‘ordinary’ monoidal categories.
So, let us start from an unbiased monoidal category (A, ⊗, γ, ι) and deﬁne
from it a homotopy monoidal category X ∈HMonCat. To deﬁne X we will
need to use unbiased bicategories (deﬁned in the next section). For each n ∈N the
ordered set [n] may be regarded as a category, and so as an unbiased bicategory
in which all 2-cells are identities. Also, the unbiased monoidal category A may
be regarded as an unbiased bicategory with only one object.
The homotopy
monoidal category X is deﬁned by taking X[n] to be the category whose objects
are all weak functors [n]
- A of unbiased bicategories and whose maps are
transformations of a suitably-chosen kind. This is just a categoriﬁcation of the
usual nerve construction.
Conversely, let us start with X ∈HMonCat and derive from X an unbiased
monoidal category (A, ⊗, γ, ι). The category A is X[1]. To obtain the rest of the
data we ﬁrst choose for each n ∈N a functor ψ(n) : X[1]n
- X[n] and natural
isomorphisms
η(n) : 1
∼- ξ(n)◦ψ(n),
ε(n) : ψ(n)◦ξ(n)
∼- 1
such that (ψ(n), ξ(n), η(n), ε(n)) forms an adjoint equivalence, which is possible
since the functor ξ(n) is an equivalence (1.1.2). Deﬁne δ(n) : [1]
- [n] by
δ(n)(0) = 0 and δ(n)(1) = n. Then deﬁne ⊗n : An
- A as the composite
X[1]n
ψ(n)- X[n]
Xδ(n)
- X[1].

92
Notions of Monoidal Category
The coherence isomorphisms γ and ι are deﬁned from the η(n)’s and ε(n)’s in a
natural way. The coherence axioms follow from the fact that we chose adjoint
equivalences—that is, they follow from the triangle identities. So we arrive at an
unbiased monoidal category (A, ⊗, γ, ι).
The processes above determine functors UMonCatwk
-

HMonCat. It
is fairly easy to see that composing one functor with the other does not yield
a functor isomorphic to the identity, either way round. I believe, however, that
if HMonCat is made into a 2-category in a suitable way then each composite
functor is equivalent to the identity. This would mean that the notion of homo-
topy monoidal category is essentially the same as the other notions of monoidal
category that we have discussed.
To summarize the chapter so far: we have formalized the idea of non-strict
monoidal category in various ways, and, with the exception of homotopy monoi-
dal categories, shown that all the formalizations are equivalent. Precisely, the
following categories are equivalent:
MonCatwk
(classical monoidal categories)
UMonCatwk
(unbiased monoidal categories)
Σ-MonCatwk
(Σ-monoidal categories, for any plausible Σ)
RepMulti
(representable multicategories)
and these equivalences can presumably be extended to equivalences of 2-categories.
The categories
HMonCat
(homotopy monoidal categories, via simplicial objects)
HMonCat′
(homotopy monoidal categories, via monoidal functors)
are isomorphic, and there is reasonable hope that if they are made into 2-
categories then they are equivalent to MonCatwk. There are still more notions
of monoidal category that we might contemplate—for instance, the anamonoidal
categories of Makkai [1996]—but we leave it at that.
3.4
Notions of bicategory
Everything that we have done for monoidal categories can also be done for bi-
categories. This is usually at the expense of setting up some slightly more so-
phisticated language, which is why things so far have been done for monoidal
categories only. Here we run through what we have done for monoidal categories
and generalize it to bicategories, noting any wrinkles.
Unbiased bicategories
Deﬁnition 3.4.1 A lax bicategory B (or properly, (B, ◦, γ, ι)) consists of
• a class B0 (often assumed to be a set), whose elements are called objects
or 0-cells of B

3.4 Notions of bicategory
93
• for each a, b ∈B0, a category B(a, b), whose objects are called 1-cells and
whose morphisms are called 2-cells
• for each n ∈N and a0, . . . , an ∈B0, a functor
◦n : B(an−1, an) × · · · × B(a0, a1)
- B(a0, an),
called n-fold composition and written
(fn, . . . , f1)
7−→
(fn◦· · · ◦f1)
(αn, . . . , α1)
7−→
(αn ∗· · · ∗α1)
where the fi’s are 1-cells and the αi’s are 2-cells
• a 2-cell
γ((f kn
n ,...,f 1
n),...,(f k1
1 ,...,f 1
1 )) :
((f kn
n
◦· · · ◦f 1
n)◦· · · ◦(f k1
1
◦· · · ◦f 1
1 ))
- (f kn
n
◦· · · ◦f 1
n◦· · · ◦f k1
1
◦· · · ◦f 1
1 )
for each n, k1, . . . , kn ∈N and double sequence ((f kn
n , . . . , f 1
n), . . . , (f k1
1 , . . . , f 1
1))
of 1-cells for which the composites above make sense
• a 2-cell
ιf : f
- (f)
for each 1-cell f,
satisfying naturality and coherence axioms analogous to those for unbiased mo-
noidal categories (Deﬁnition 3.1.1).
A lax bicategory (B, ◦, γ, ι) is called an unbiased bicategory (respectively,
an unbiased strict 2-category) if all the components of γ and ι are invertible
2-cells (respectively, identity 2-cells).
Remarks 3.4.2
a. A lax bicategory with exactly one object is, of course, just a lax monoidal
category, and similarly for the weak and strict versions.
b. Unbiased strict 2-categories are in one-to-one correspondence with ordinary
strict 2-categories, easily.
As in the case of monoidal categories, there is an abstract version of the
deﬁnition of unbiased bicategory phrased in the language of 2-monads. Previously
we took the 2-monad ‘free strict monoidal category’ on Cat; now we take the 2-
monad ‘free strict 2-category’ on Cat-Gph, the strict 2-category of Cat-graphs.
We met the ordinary category Cat-Gph earlier (1.3.1). The 2-category structure
on Cat induces a 2-category structure on Cat-Gph as follows: given maps P, Q :
B
- B′ of Cat-graphs, there are only any 2-cells of the form
B
P
Q
R

∨
B′

94
Notions of Monoidal Category
when P0 = Q0 : B0
- B′
0, and in that case a 2-cell ζ is a family of natural
transformations

Pa,b
ζa,b- Qa,b

a,b∈B0 .
Now, there is a forgetful map Str-2-Cat
- Cat-Gph of 2-categories, and this
has a left adjoint, so there is an induced 2-monad (( )∗, µ, η) on Cat-Gph. An
unbiased bicategory is exactly a weak algebra for this 2-monad, and the same
applies in the lax and strict cases.
Deﬁnition 3.4.3 Let B and B′ be lax bicategories. A lax functor (P, π) :
B
- B′ consists of
• a function P0 : B0
- B′
0 (usually just written as P)
• for each a, b ∈B0, a functor Pa,b : B(a, b)
- B′(Pa, Pb)
• for each n ∈N and composable sequence f1, . . . , fn of 1-cells of B, a 2-cell
πfn,...,f1 : (Pfn◦· · · ◦Pf1)
- P(fn◦· · · ◦f1),
satisfying axioms analogous to those in the deﬁnition of lax monoidal func-
tor (3.1.3). A weak functor (respectively, strict functor) from B to B′ is
a lax functor (P, π) for which each component of π is an invertible 2-cell (respec-
tively, an identity 2-cell).
As an example of the beneﬁts of the unbiased approach, consider ‘Hom-
functors’. For any category A there is a functor
Hom : Aop × A
- Set
deﬁned on objects by (a, b) 7−→A(a, b) and on morphisms by composition—that
is, morphisms a′
f- a and b
g- b′ in A induce the function
Hom(f, g) :
Hom(a, b)
-
Hom(a′, b′),
p
7−→
g◦p◦f.
Suppose we want to imitate this construction for bicategories, changing the cat-
egory A to a bicategory B and looking for a weak functor Hom : Bop × B
-
Cat. If we use classical bicategories then we have a problem: there is no such
composite as g◦p◦f, and the best we can do is to choose some substitute such as
(g◦p)◦f or g◦(p◦f). Although we could, say, consistently choose the ﬁrst option
and so arrive at a weak functor Hom, this is an arbitrary choice. So there is no
canonical Hom-functor in the classical world. In the unbiased world, however, we
can simply take the ternary composite (g◦p◦f), and everything runs smoothly.
By choosing diﬀerent strengths of bicategory and of maps between them, we
again obtain 9 diﬀerent categories:
LaxBicatstr ⊆LaxBicatwk ⊆LaxBicatlax
∪|
∪|
∪|
UBicatstr ⊆
UBicatwk
⊆
UBicatlax
∪|
∪|
∪|
Str-2-Catstr ⊆Str-2-Catwk ⊆Str-2-Catlax.

3.4 Notions of bicategory
95
For instance, UBicatwk is the category of unbiased bicategories and weak func-
tors.
Diﬀerences from the theory of unbiased monoidal categories emerge when we
try to deﬁne transformations between functors between unbiased bicategories.
This should not come as a surprise given what we already know in the classical
case about transformations and modiﬁcations of bicategories vs. transformations
of monoidal categories (1.5.11). More mysteriously, there seems to be no satisfac-
torily unbiased way to formulate a deﬁnition of transformation or modiﬁcation for
unbiased bicategories; it seems that we are forced to grit our teeth and write down
biased-looking deﬁnitions. This done, we obtain a notion of biequivalence of unbi-
ased bicategories. Just as in the classical case (1.5.13), biequivalence amounts to
the existence of a weak functor that is essentially surjective on objects and locally
an equivalence. The st construction for monoidal categories (3.1.6) generalizes
without trouble to give
Theorem 3.4.4 Every unbiased bicategory is biequivalent to a strict 2-category.
2
Example 3.4.5 Every topological space X has a fundamental 2-groupoid Π2X.
We saw how to deﬁne Π2X as a classical bicategory in 1.5.4. Here we consider
the unbiased version of Π2X, in which n-fold composition is deﬁned by choosing
for each n ∈N a reparametrization map [0, 1]
- [0, n] (the most obvious choice
being multiplication by n). A 0-cell of the strict cover st(Π2X) is a point of X,
and a 1-cell is a pair (n, γ) where n ∈N and γ : [0, n]
- X with γ(0) = x and
γ(n) = y. This is essentially the technique of Moore loops (Adams [1978, p. 31]),
used to show that every loop space is homotopy equivalent to a strict topological
monoid.
Algebraic notions of bicategory
Here we take the very general family of algebraic notions of monoidal category
considered in 3.2 and imitate it for bicategories. In other words, we set up a
theory of Σ-bicategories, where the ‘signature’ Σ is a sequence of sets.
Recall that we deﬁned Σ-monoidal categories in three steps, the functor
( )-MonCatwk being the composite
SetN
F- Set-Operad
I∗- Cat-Operad
Algwk
- CATop.
The ﬁrst two steps create an operad consisting of all the derived tensor products
arising from Σ and all the coherence isomorphisms between them. The third
takes algebras for this operad (or, if you prefer, models for this theory), which
in this case means forming the category of ‘monoidal categories’ with the kind
of products described by the operad. It is therefore only the third step that we
need to change here.
So, given a Cat-operad R, deﬁne a category CatAlgwk(R) as follows. An
object is a categorical R-algebra, that is, a Cat-graph B together with a

96
Notions of Monoidal Category
functor
actn : R(n) × B(an−1, an) × · · · × B(a0, a1)
- B(a0, an)
for each n ∈N and a0, . . . , an ∈B0, satisfying axioms very similar to the usual
axioms for an algebra for an operad. (So if B0 has only one element then B is
just an R-algebra in the usual sense.) A weak map B
- B′ of categorical
R-algebras is a map P : B
- B′ of Cat-graphs together with a natural
isomorphism
R(n) × B(an−1, an) × · · · × B(a0, a1)
actn- B(a0, an)
⇒
πn
R(n) × B′(an−1, an) × · · · × B′(a0, a1)
1×Pan−1,an×···×Pa0,a1
?
actn
- B′(Pa0, Pan)
Pa0,an
?
for each n ∈N and a0, . . . , an ∈B0, satisfying axioms like the ones in the
monoidal case (Fig. 3-A, p. 77). This deﬁnes a category CatAlgwk(R). Deﬁning
CatAlgwk on maps in the only sensible way, we obtain a functor
CatAlgwk : Cat-Operad
- CATop,
and we then deﬁne the functor ( )-Bicatwk as the composite
SetN
F- Set-Operad
I∗- Cat-Operad
CatAlgwk
- CATop.
The lax and strict cases are, of course, done similarly.
Deﬁnition 3.4.6 Let Σ ∈SetN. A Σ-bicategory is an object of Σ-Bicatlax (or
equivalently, of Σ-Bicatwk or Σ-Bicatstr). A lax (respectively, weak or strict)
functor between Σ-bicategories is a map in Σ-Bicatlax (respectively, Σ-Bicatwk
or Σ-Bicatstr).
All of the equivalence results in Section 3.2 go through.
Hence there are
isomorphisms of categories
UBicat−∼= 1-Bicat−,
Bicat−∼= Σc-Bicat−,
where ‘−’ represents any of ‘lax’, ‘wk’ or ‘str’. The proofs are as in the monoidal
case (3.2.2, 3.2.3) with only cosmetic changes. Then, there is the irrelevance of
signature theorem, analogous to 3.2.4:
Σ-Bicat−≃Σ′-Bicat−
for all plausible Σ and Σ′, where ‘−’ is either ‘lax’ or ‘wk’. Again, the proof
is essentially unchanged. As a corollary, unbiased bicategories are the same as
classical bicategories:
UBicat−≃Bicat−

3.4 Notions of bicategory
97
where ‘−’ is either ‘lax’ or ‘wk’.
We saw on p. 82 that the equivalence between unbiased and classical monoidal
categories is ‘one level better’ than might be expected, because it does not refer
upwards to transformations. In the case of bicategories it is two levels better,
because modiﬁcations are not needed either.
Non-algebraic notions of bicategory
I will say much less about these.
Take representable multicategories ﬁrst. To formulate a notion of a bicategory
as a multicategory satisfying a representability condition, we need to use a new
kind of multicategory: instead of the arrows looking like
a1
an
· · ·
α
A
A
A
A




a
,
they should look like
•
•
•

7

1
S
SSw
-
⇓
· · ·
a0
a1
an.
f1
f2
fn
g
α
We will consider such multicategories later:
they are a special kind of ‘fc-
multicategory’ (Example 5.1.4), and they also belong to the world of opetopic
structures (Chapter 7). All the results on monoidal categories as representable
multicategories can be extended unproblematically to bicategories, and the same
goes for the theory of ﬁbrations of multicategories (Leinster [2003]).
Consider, ﬁnally, homotopy monoidal categories. A homotopy bicategory can
be deﬁned as a functor ∆op
- Cat satisfying conditions similar to (but, of
course, looser than) those in Proposition 3.3.6. The new conditions involve pull-
backs rather than products, and can be found by considering nerves of categories
in general instead of just nerves of monoids. See 10.2 for further remarks.
Notes
The notion of unbiased monoidal category has been part of the collective consciousness
for a long while (Kelly [1974], Hermida [2000, 9.1]). Around 30 years ago Kelly and his
collaborators began investigating 2-monads and 2-dimensional algebraic theories (see
Blackwell, Kelly and Power [1989], for instance), and they surely knew that unbiased
monoidal categories were equivalent to classical monoidal categories in the way described
above, although I have not been able to ﬁnd anywhere this is made explicit before my
own [2000b]. If I am interpreting the (somewhat daunting) literature correctly, one
can also deduce from it some of the more general results in 3.2 on algebraic notions of

98
Notions of Monoidal Category
monoidal category, but there are considerable technical issues to be understood before
one is in a position to do so. Here, in contrast, we have a quick and natural route to the
results. Essentially, operads take the place of 2-monads as the means of describing an
algebraic theory on Cat. In order even to state the problem at hand, in any approach,
the explicit or implicit use of operads seems inevitable; an advantage of our approach
is that we use nothing more.
The idea that a monoidal category is a multicategory with enough universal arrows
goes back to Lambek’s paper introducing multicategories [1969] and is implicit in the
deﬁnition of weak n-category proposed by Baez and Dolan [1997], but as far as I know
did not appear in print until Hermida [2000].
Homotopy monoidal categories were studied in my own [2000a] paper and its intro-
ductory companion [1999b], in the following wider context: given an operad P and a
monoidal category A with a distinguished class of maps called ‘equivalences’, there is a
notion of ‘homotopy P-algebra in A’. The case P = 1, A = Cat gives homotopy mo-
noidal categories; the case of homotopy diﬀerential graded algebras was mentioned on
p. 90. Homotopy monoidal categories are related to the work of Simpson, Tamsamani,
To¨en, and Vezzosi mentioned in the Notes to Chapter 10.

Part II
Operads


Chapter 4
Generalized Operads and
Multicategories: Basics
Three minutes’ thought would suﬃce to ﬁnd this out; but
thought is irksome and three minutes is a long time
A.E. Houseman
In a category, an arrow has a single object as its domain and a single object as
its codomain. In a multicategory, an arrow has a ﬁnite sequence of objects as its
domain and a single object as its codomain. What other things could we have for
the domain of an arrow, keeping a single object as the codomain? Could we, for
instance, have a tree or a many-dimensional array of objects? In diﬀerent terms
(logic or computer science): what can the input type of an operation be?
In this chapter—the central chapter of the book—we answer these questions.
We formalize the idea of an input type, and for each input type we deﬁne a
corresponding theory of operads and multicategories. For instance, the input
type might be ‘ﬁnite sequences’, and this yields the theory of ordinary operads
and multicategories.
From now on, operads and multicategories as deﬁned in Chapter 2 will be
called plain operads and plain multicategories. Some mathematicians are
used to their operads coming equipped with symmetric group actions; they should
take ‘plain’ as a pun on ‘planar’, to remind them that these operads do not.
The formal strategy is as follows. A small category C can be described as
consisting of sets and functions
C1
C0
dom

C0
cod
-
C1 ×C0 C1
comp
- C1,
C0
ids- C1
satisfying associativity and identity axioms, which can be interpreted as com-
mutative diagrams in Set. Here C1 ×C0 C1 is a certain pullback, as explained
on p. 9. Similarly, let T : Set
- Set be the functor sending a set A to the

102
Generalized Operads and Multicategories: Basics
underlying set `
n∈N An of the free monoid on A: then a multicategory can be
described as consisting of sets and functions
C1
T C0
dom

C0
cod
-
C1 ×T C0 T C1
comp
- C1,
C0
ids- C1
satisfying associativity and identity axioms (expressed using the monad structure
on T ). Here C0 is the set of all objects, C1 is the set of all arrows, dom assigns to
an arrow the sequence of objects that is its domain, and cod assigns to an arrow
the single object that is its codomain. The crucial point is that this formalism
works for any monad T on any category E, as long as E and T satisfy some simple
conditions concerning pullbacks. This gives a deﬁnition of T -multicategory for
any such E and T ; in the terms above, the pair (E, T ) is the ‘input type’. So
when T is the identity monad on Set, a T -multicategory is an ordinary category,
and when T is the free-monoid monad on Set, a T -multicategory is a plain
multicategory.
We also deﬁne T -operads. As in the plain case, these are simply T -multicategories
C with only one object—or formally, those in which C0 is a terminal object of E.
There is a canonical notion of an algebra for a T -multicategory. Like their
plain counterparts, generalized operads and multicategories can be regarded as
algebraic theories (single- and multi-sorted, respectively); algebras are the ac-
companying notion of model.
We start (4.1) by describing the simple conditions on E and T needed to
make the deﬁnitions work. Next (4.2) are the deﬁnitions of T -multicategory and
T -operad, and then (4.3) the deﬁnition of algebra for a T -multicategory (or T -
operad). There are many examples throughout, but some of the most important
ones are done only very brieﬂy; we do them in detail in later chapters.
4.1
Cartesian monads
In this section we introduce the conditions required of a monad (T, µ, η) on a
category E in order that we may deﬁne the notions of T -multicategory and T -
operad.
Deﬁnition 4.1.1
a. A category E is cartesian if it has all pullbacks.
b. A functor E
T- F is cartesian if it preserves pullbacks.
c. A natural transformation E
S
T
α R

?
F is cartesian if for each map A
f-

4.1 Cartesian monads
103
B in E, the naturality square
SA
Sf- SB
T A
αA
?
T f- T B
αB
?
is a pullback.
d. A monad (T, T 2
µ- T, 1
η- T ) on a category E is cartesian if the
category E, the functor T , and the natural transformations µ and η are all
cartesian.
Remarks 4.1.2
a. All of our examples of cartesian categories will have a terminal object, hence
all ﬁnite limits.
b. When the category E has a terminal object, a (necessary and) suﬃcient
condition for the natural transformation α of (c) to be cartesian is that for
each object A of E, the naturality square for the unique map A
- 1 is
a pullback.
c. Cartesian categories, cartesian functors and cartesian natural transforma-
tions form a sub-2-category CartCat of Cat, and a cartesian monad is
exactly a monad in CartCat. (See p. 28 for the deﬁnition of monad in a
2-category.)
d. As is customary, we often write T to mean the whole monad (T, µ, η).
The rest of the section is examples.
Example 4.1.3 The identity monad on a cartesian category is cartesian.
Example 4.1.4 Let E = Set and let T be the free-monoid monad on E. Cer-
tainly E is cartesian. An easy calculation shows that the monad T is cartesian
too: Leinster [1998a, 1.4(ii)].
Example 4.1.5 A non-example. Let E = Set and let (T, µ, η) be the free com-
mutative monoid monad.
This fails to be cartesian on two counts: µ is not
cartesian (for instance, its naturality square at the unique map 2
- 1 is not a
pullback), and the functor T does not preserve pullbacks. Let us show the latter
in detail, using an argument of Weber [2001, 2.7.2]. First note that for any set
A,
T A =
a
n∈N
An/Sn
where Sn is the nth symmetric group acting on An in the natural way. Write
[a1, . . . , an] for the equivalence class of (a1, . . . , an) ∈An under this action, so

104
Generalized Operads and Multicategories: Basics
that [a1, . . . , an] = [b1, . . . , bn] if and only if there exists σ ∈Sn such that bi = aσi
for all i. Now let x, x′, y, y′, z be distinct formal symbols and consider applying
T to the pullback square
{(x, y), (x, y′), (x, y′), (x′, y′)} - {y, y′}
{x, x′}
?
- {z}.
?
There are distinct elements
[(x, y), (x′, y′)],
[(x, y′), (x′, y)]
of T {(x, y), (x, y′), (x, y′), (x′, y′)}, yet both map to [x, x′] ∈T {x, x′} and to
[y, y′] ∈T {y, y′}. Hence the image of the square under T is not a pullback.
Example 4.1.6 Any algebraic theory gives rise to a monad on Set (its free al-
gebra monad), and if the theory is strongly regular in the sense of 2.2.5 then
the monad is cartesian.
Carboni and Johnstone proved this ﬁrst [1995]; an
alternative proof is in Appendix C.
The result implies that the free monoid
monad (4.1.4) is cartesian, and, as suspected in 2.2.5, that the theory of commu-
tative monoids (4.1.5) is not strongly regular. Further examples appear below.
Example 4.1.7 Let E = Set and let T be the monad corresponding to the
theory of monoids with involution. By deﬁnition, a monoid with involution
is a monoid equipped with an endomorphism whose composite with itself is the
identity; so this theory is deﬁned by the usual operations and equations for the
theory of monoids together with a unary operation ( )◦satisfying
x◦◦= x,
(x · y)◦= x◦· y◦,
1◦= 1.
These equations are strongly regular, so the monad T is cartesian. Any abelian
group has an underlying monoid with involution, given by x◦= x−1.
Example 4.1.8 More interestingly, let E = Set and let T be the monad for
monoids with anti-involution, where an anti-involution on a monoid is a
unary operation ( )◦satisfying
x◦◦= x,
(x · y)◦= y◦· x◦,
1◦= 1.
Any group whatsoever has an underlying monoid with anti-involution, again
given by x◦= x−1.
Now, this is not a strongly regular presentation of the
theory, and in fact there is no strongly regular presentation, but T is a cartesian
monad. So not all cartesian monads on Set arise from strongly regular theories.
These assertions are proved in Example C.2.8; that T is cartesian was pointed
out to me by Peter Johnstone.
Example 4.1.9 Let E = Set and ﬁx a set S. The endofunctor S + −on E
has a natural monad structure, and the monad is cartesian, corresponding to
the algebraic theory consisting only of one constant for each member of S. In
particular, if S = 1 then this is the theory of pointed sets.

4.1 Cartesian monads
105
Example 4.1.10 Algebraic theories generated by just unary operations corre-
spond to monads on Set of the form M × −, where M is a monoid and the unit
and multiplication of the monad are given by those of the monoid. Since any
equation formed from unary operations and a single variable is strongly regular,
the monad M × −on Set is always cartesian.
Example 4.1.11 Let E = SetN and let T be the monad ‘free plain operad’ on E.
As we saw in 2.3, the functor T forms trees with labelled vertices: for instance,
if A ∈E, a1 ∈A(3), a2 ∈A(1), and a3 ∈A(2), then
•
Q
Q
Q

•
•
@
@   a1
a2
a3
is an element of (T A)(4). That T is cartesian follows from theory we develop
later (6.5.5).
Example 4.1.12 Consider the ﬁnitary algebraic theory on Set generated by one
n-ary operation for each n ∈N and no equations. This theory is strongly regular,
so the induced monad (T, µ, η) on Set is cartesian.
Given a set A, the set T A can be described inductively by
• if a ∈A then a ∈T A
• if t1, . . . , tn ∈T A then (t1, . . . , tn) ∈T A.
We have already looked at the case A = 1, where T A is the set of unlabelled
trees (2.3.3). Similarly, an element of T A can be drawn as a tree whose leaves
are labelled by elements of A: for instance,
((a1, a2, ()), a3, (a4, a5)) ∈T A
is drawn as
•
H
H
H

•
@
@   •
@
@   •
a1 a2
a3
a4
a5
.
(Contrast this with the previous example, where the vertices were labelled.) The
unit A
- T A is
a 7−→
a
,
and multiplication T 2A
- T A takes a tree whose leaves are labelled by ele-
ments of T A (for instance,
•
@
@   •
@
@   •
t1
t2
,

106
Generalized Operads and Multicategories: Basics
where
t1 =
•
@
@   •
a1
a2
,
t2 =
•
•
@
@   •
a3
a4
)
and expands the labels to produce a tree whose leaves are labelled by elements
of A (here,
•
Q
Q
Q

•
@
@   •
•
@
@   •
•
@
@   •
•
a1
a2
a3
a4
).
Example 4.1.13 Similar statements can be made for any free theory. That is,
given any sequence (Σ(n))n∈N of sets, the ﬁnitary algebraic theory on Set gen-
erated by one n-ary operation for each σ ∈Σ(n), and no equations, is strongly
regular, so the induced monad (T, µ, η) on Set is cartesian. (The previous ex-
ample was the case Σ(n) = 1 for all n.) Given a set A, an element of T A can
be drawn as a tree in which the leaves are labelled by elements of A and the
vertices with n branches coming up out of them are labelled by elements of Σ(n):
in other words, as a diagram like the domain or codomain of (3:2) (p. 76).
Example 4.1.14 The monad ‘free topological monoid’ on Top, whose functor
part sends a space A to the disjoint union of cartesian powers `
n∈N An, is carte-
sian (by direct calculation).
Example 4.1.15 Similarly, the monad ‘free strict monoidal category’ (= free
monoid) on Cat is cartesian. In fact, the free monoid monad on a category E
is always cartesian provided that E satisﬁes the (co)limit conditions necessary to
ensure that the usual free monoid construction A 7−→`
n∈N An works in E.
Example 4.1.16 The monad ‘free symmetric strict monoidal category’ on Cat
is also cartesian, as a (lengthy) direct calculation shows. If we had taken strict
symmetric monoidal categories instead—in other words, insisted that the sym-
metries were strict—then we would just be looking at commutative monoids in
Cat, and the monad would fail to be cartesian by the argument of Example 4.1.5.
So weakening the equality x ⊗y = y ⊗x to an isomorphism makes a bad monad
good.
Example 4.1.17 Let H be the category (0
σ-
τ- 1), so that [Hop, Set] is the
category of directed graphs. The forgetful functor Cat
- [Hop, Set] has a
left adjoint and therefore induces a monad fc (‘free category’) on [Hop, Set]. It
follows from later theory (6.5.3) that fc is cartesian.

4.2 Operads and multicategories
107
Example 4.1.18 In Part III we consider the free strict ω-category monad on
the category of globular sets, and, for n ∈N, the free strict n-category monad on
the category of n-globular sets. All of these monads are cartesian. The previous
example is the case n = 1.
Example 4.1.19 In 1.4 we looked at strict double categories and, more gen-
erally, at strict n-tuple categories. In particular, we saw that a strict n-tuple
category could be described as a functor (Hn)op
- Set with extra structure,
where H is as in 4.1.17. The forgetful functor from the category of strict n-tuple
categories and strict maps between them to the functor category [(Hn)op, Set] has
a left adjoint, the adjunction is monadic, and the induced monad on [(Hn)op, Set]
is cartesian. This can be shown by a similar method to that used for strict n-
categories in Appendix F.
Alert readers may have noticed that nearly every one of the above examples
of a cartesian monad on Set is, in fact, the free-algebra monad for a certain plain
operad. This is no coincidence, as we discover in 6.2.
4.2
Operads and multicategories
We now deﬁne ‘T -multicategory’ and ‘T -operad’, for any cartesian monad T on
a cartesian category E. That is, for each such E and T we deﬁne a category
T -Multicat of T -multicategories and a full subcategory T -Operad consisting of
the T -operads. In the case E = Set and T = (free monoid) these are, respectively,
Multicat and Operad; in the case E = Set and T = id they are Cat and
Monoid.
The strategy for making these deﬁnitions is as described in the introduction
to this chapter, dressed up a little: instead of handling the data and axioms
for a T -multicategory directly, we introduce a bicategory E(T ) and deﬁne a T -
multicategory as a monad in E(T ). This amounts to the same thing, as we shall
see. (All we are doing is generalizing the description of a small category as a
monad in the bicategory of spans: B´enabou [1967, 5.4.3].)
Deﬁnition 4.2.1 For any cartesian monad (T, µ, η) on a cartesian category E,
the bicategory E(T ) is deﬁned as follows:
0-cells are objects E of E
1-cells E
- E′ are diagrams
M
T E
d

E′
c
-
in E

108
Generalized Operads and Multicategories: Basics
2-cells (M, d, c)
- (N, q, p) are maps M
- N in E such that
M
T E
d

E′
c
-
N
?
p
-
q

commutes
1-cell composition: the composite of 1-cells
M
T E
d

E′
c
-
M ′
T E′
d′

E′′
c′
-
is given by composing along the upper slopes of the diagram
M ′◦M
 @
T M

M ′
-
T 2E
T d

T E′
d′

T c
-
E′′
c′
-
T E
µE

in E, where the right-angle mark in the top square indicates that the square
is a pullback and we assume from now on that a particular choice of pull-
backs in E has been made
1-cell identities: the identity on E is
E
T E
ηE

E
1
-
2-cell compositions and identities are deﬁned in the evident way
coherence 2-cells: the associativity and unit 2-cells are deﬁned using the uni-
versal property of pullback.
Since the choice of pullbacks in E was arbitrary, it is inevitable that compo-
sition of 1-cells in E(T ) does not obey strict associativity or unit laws. That it
obeys them up to isomorphism is a consequence of T being cartesian. Changing

4.2 Operads and multicategories
109
the choice of pullbacks in E only changes the bicategory E(T ) up to isomorphism
(in the category of bicategories and weak functors): see p. 117.
Here is the most important deﬁnition in this book. It is due to Burroni [1971],
and in the form presented here uses the notion of monad in a bicategory (p. 28).
Deﬁnition 4.2.2 Let T be a cartesian monad on a cartesian category E.
A
T -multicategory is a monad in the bicategory E(T ).
A T -multicategory C therefore consists of a diagram
C1
T C0
dom

C0
cod
-
in E together with maps
C1◦C1 = C1 ×T C0 T C1
comp
- C1,
C0
ids- C1
satisfying associativity and identity axioms—exactly as promised at the start of
the chapter.
Deﬁnition 4.2.3 Let T be a cartesian monad on a cartesian category E.
A
T -operad is a T -multicategory C such that C0 is a terminal object of E.
Just as a T -multicategory is a generalized category, a T -operad is a generalized
monoid. Explicitly, a monoid in a category E with ﬁnite limits consists of an
object M of E together with maps
M × M
mult- M,
1
unit- M
in E, satisfying associativity and identity axioms. Take a cartesian monad T on
E: then a T -operad consists of an object of E over T 1, say P
d- T 1, together
with maps
P ×T 1 T P
comp
- P,
1
ids- P
over T 1 in E, again satisfying associativity and identity axioms.
A map of T -multicategories is a map of the underlying ‘graphs’ preserving
composition and identities, as follows.
Deﬁnition 4.2.4 Let T be a cartesian monad on a cartesian category E.
A
T -graph is a diagram
C1
T C0
dom

C0
cod
-

110
Generalized Operads and Multicategories: Basics
in E (that is, an endomorphism 1-cell in E(T )). A map C
f- C′ of T -graphs
is a pair (C0
f0- C′
0, C1
f1- C′
1) of maps in E such that
C1
T C0

C0
-
C′
1
f1
?
T C′
0
T f0
?

C′
0
f0
?
-
commutes. The category of T -graphs is written T -Graph.
This deﬁnition uses two diﬀerent notions of a map between objects of E: on
the one hand, genuine maps in E, and on the other, spans (= 1-cells of E(T )). In
Chapter 5 we will integrate the objects of E and these two diﬀerent kinds of map
into a single structure, an ‘fc-multicategory’.
Deﬁnition 4.2.5 A map C
f- C′ of T -multicategories is a map f of their
underlying graphs such that the diagrams
C0
ids- C1
C′
0
f0 ?
ids- C′
1
f1
?
C1◦C1
comp
- C1
C′
1◦C′
1
f1∗f1 ?
comp
- C′
1
f1
?
commute, where f1 ∗f1 is the evident map induced by two copies of C1
f1- C′
1.
The category of T -multicategories and maps between them is written T -Multicat.
The full subcategory consisting of T -operads is written T -Operad.
So for any cartesian monad T , we have categories and functors
T -Operad ⊂- T -Multicat forgetful
- T -Graph.
When the extra clarity is needed, we will refer to T -multicategories as (E, T )-
multicategories and to the category they form as (E, T )-Multicat; similarly
for operads and graphs.
We now look at some examples of generalized multicategories. In many of the
most interesting ones the input of each operation/arrow forms quite a complicated
shape, such as a diagram of pasted-together higher-dimensional cells.
These
examples are only described brieﬂy here, with proper discussions postponed to
later chapters.
We start with the two motivating cases.

4.2 Operads and multicategories
111
Example 4.2.6 Let T be the identity monad on E = Set. Then E(T ) is what
is usually called the ‘bicategory of spans’ (B´enabou [1967, 2.6]), and a monad in
E(T ) is just a small category. So
(Set, id)-Multicat ≃Cat,
(Set, id)-Operad ≃Monoid.
More generally, if E is any cartesian category then (E, id)-multicategories are
categories in E and (E, id)-operads are monoids in E.
Example 4.2.7 Let T be the free monoid monad on the category E of sets. A
T -graph
T C0 =
a
n∈N
Cn
0 
dom C1
cod- C0
amounts to a set C0 ‘of objects’ together with a set C(a1, . . . , an; a) for each
n ≥0 and a1, . . . , an, a ∈C0. The composite 1-cell
C1◦C1
T C0
dom′

C0
cod′
-
in E(T ) is as follows: the set C1◦C1 at the apex is
C1 ×T C0 T C1 =
a
n,k1,...,kn∈N,
aj
i ,ai,a∈C0
C(a1, . . . , an; a) × C(a1
1, . . . , ak1
1 ; a1) × · · ·
×C(a1
n, . . . , akn
n ; an),
an element of which looks like the left-hand side of Fig. 2-B (p. 36); the function
dom′ sends this element to
(a1
1, . . . , ak1
1 , . . . , a1
n, . . . , akn
n ) ∈T C0,
and cod′ sends it to a. The identity 1-cell on C0 in E(T ) is
C0
T C0
ηC0

C0,
1
-
and ηC0 sends a ∈C0 to (a) ∈T C0. A T -multicategory structure on a T -graph C
therefore consists of a function comp as in Fig. 2-B and a function ids assigning
to each object a ∈C0 an ‘identity’ element 1a ∈C(a; a), obeying associativity
and identity laws. So a T -multicategory is just a plain multicategory; indeed,
there are equivalences of categories
T -Multicat ≃Multicat,
T -Operad ≃Operad.

112
Generalized Operads and Multicategories: Basics
Example 4.2.8 Suppose we try to realize symmetric operads (2.2.21) as T -
operads for some T .
A ﬁrst attempt might be to take the free commutative
monoid monad T on Set. But this is both misguided and doomed to failure:
misguided because if P is a symmetric operad then the maps −· σ : P(n)
-
P(n) coming from permutations σ ∈Sn are only isomorphisms, not identities;
and doomed to failure because T is not cartesian (4.1.5), which prevents us from
making a deﬁnition of T -operad—in particular, from expressing associativity and
identity laws. A better idea is to take the free symmetric strict monoidal category
monad on Cat, thus replacing identities by isomorphisms: see 4.2.18 below.
Example 4.2.9 Let E = Set and let T be the free monoid-with-involution
monad on E, as in 4.1.7. A T -multicategory looks like a plain multicategory
except that the arrows are of the form
aσ1
1 , . . . , aσn
n
- a
where the ai’s and a are objects and σi ∈{−1, +1}. (It is sometimes convenient
to write x−1 instead of x◦and x+1 instead of x.) For instance:
a. There is a large T -multicategory Cat whose objects are all small categories
and in which a map
Aσ1
1 , . . . , Aσn
n
- A
is a functor
Aσ1
1 × · · · × Aσn
n
- A
where
Aσi
i
=
 Aop
i
if σi = −1
Ai
if σi = +1.
Composition in Cat is usual composition of functors, taking opposites
where necessary.
That Cat does form a T -multicategory (and not just
a plain multicategory) is a statement about the behaviour of contravari-
ance with respect to products and functors. A ‘calculus of substitution’ of
this kind was envisaged by Kelly in the introduction to his [1972] paper.
b. More generally, suppose that (A, ⊗, I) is a monoidal category and ( )◦:
A
- A a functor for which there are coherent natural isomorphisms
(A◦)◦∼= A,
(A ⊗B)◦∼= A◦⊗B◦,
I◦∼= I
(A, B ∈A): then we obtain a T -multicategory in the same way as we did
for Cat above. (Beware that although a typical duality operator ( )◦, such
as that for duals of ﬁnite-dimensional vector spaces, does satisfy the three
displayed isomorphisms, it is a contravariant functor on A, so does not give
a T -multicategory.)
Example 4.2.10 Now consider the monad T for monoids with anti-involution,
as in 4.1.8. T -multicategories are the same as in the previous example except
that substitution reverses order. For instance:

4.2 Operads and multicategories
113
a. Example 4.2.9(a) is also an example of a T -multicategory for the present
T , since A × B ∼= B × A for categories A and B.
b. Example 4.2.9(b) can also be repeated, except that now we require ( )◦to
reverse, rather than preserve, the order of the tensored factors:
(A ⊗B)◦∼= (B ⊗A)◦
naturally in A, B ∈A.
c. Loop spaces give an example. Fix a space X with a basepoint x. In 1.2.9
we met the monoidal category A whose objects are loops based at x and
whose tensor ⊗is concatenation of loops. There is a functor ( )◦: A
-
A sending a loop to the same loop run backwards, and this satisﬁes
(γ◦)◦= γ,
(γ ⊗δ)◦= δ◦⊗γ◦,
const◦
x = constx
for all loops γ and δ. So there is a resulting T -multicategory whose objects
are loops and whose maps encode all the information about concatenation
of loops, homotopy classes of homotopies between loops, and reversal of
loops.
Example 4.2.11 Let E = Set and let T be the monad 1+−of 4.1.9. A T -graph
is a diagram 1 + C0 
dom C1
cod- C0 of sets and functions. If we regard 1 + C0
as a subset of the free monoid `
n∈N Cn
0 on C0 and recall Example 4.2.7 then it is
clear that a T -multicategory is exactly a plain multicategory in which all arrows
are either unary or nullary. So it is natural to draw an arrow θ of C as either
a
θ
HHHH




b
or
θ
HHHH




b
where in the ﬁrst case dom(θ) = a ∈C0, in the second dom(θ) is the unique
element of 1, and in both cod(θ) = b. The unary arrows form a category D, and
the nullary arrows deﬁne a functor Y : D
- Set in which Y (b) is the set of
nullary arrows with codomain b. So a T -multicategory is the same thing as a
small category D together with a functor Y : D
- Set, and in particular, a
T -operad is a monoid acting on a set. Similarly, if S is any set then a (Set, S+−)-
multicategory is a small category D together with an S-indexed family of functors
(D
Ys- Set)s∈S.
Another way of putting this is that, when T = 1 + −, a T -multicategory
is a discrete opﬁbration (p. 9). In fact, T -Multicat is equivalent to the cate-
gory whose objects are discrete opﬁbrations between small categories and whose
morphisms are commutative squares.
Example 4.2.12 As a kind of dual to the last example, let E = Set and let
T be the free semigroup monad, T A = `
n≥1 An. Then a T -multicategory is

114
Generalized Operads and Multicategories: Basics
exactly a plain multicategory with no nullary arrows. In particular, a T -operad
P is a family (P(n))n≥1 of sets, indexed over positive numbers, equipped with
composition and identities of the usual kind. Some authors prefer to exclude the
possibility of nullary operations: see the Notes to Chapter 2.
Example 4.2.13 Fix a monoid M and let T be the monad M × −on Set,
as in 4.1.10. Then a T -graph is a diagram M × C0 
C1
- C0, and by
projecting onto the two factors of M ×C0 we ﬁnd that T -Multicat is isomorphic
to the category Cat/M of categories over M. (Here we regard a monoid as a
one-object category: p. xviii.) In particular, T -Operad ∼= Monoid/M.
For a speciﬁc example, let M be the (large) monoid of all cardinals under
multiplication. Let C be the (large) category of ﬁelds and homomorphisms be-
tween them (which are, of course, all injective). By taking degrees of extensions
we obtain a functor π : C
- M, making ﬁelds into an (M × −)-multicategory.
Example 4.2.14 Let T be the free plain operad monad on E = SetN, as in 4.1.11.
In a T -multicategory the objects form a graded set (C0(n))n∈N and the arrows
look like
•
Q
Q
Q

•
•
@
@   a1
a2
a3
-
θ
•
H
H
H
J
J 


a
(a1 ∈C0(3), a2 ∈C0(1), a3 ∈C0(2), a ∈C0(4)), where the tree in the codomain
is always the corolla with the same number of leaves as the tree in the domain.
A typical example of composition is that arrows
•
@
@   •
@
@   a1
1
a2
1
•
@
@   •
•
a1
2
a2
2
a3
2
•
Q
Q
Q
•
@
@   a1
a2
•
H
H
H
J
J 


a
7
θ1
s
θ2
-
θ
compose to give a single arrow
•
@
@   •
@
@   •
@
@   •
•
a1
1
a2
1
a1
2
a2
2
a3
2
-
θ◦(θ1, θ2)
•
H
H
H
J
J 


a
.

4.2 Operads and multicategories
115
In the case of T -operads the labels ai vanish, so a T -operad consists of a family
of sets (P(τ))trees τ equipped with composition and identities.
We have seen that when T is the identity monad on Set, a T -operad is exactly
a monoid. We have seen that when T is the free monoid monad, a T -operad is
exactly a plain operad.
We have seen that when T is the free plain operad
monad, a T -operad is as just described. This process can be iterated indeﬁnitely,
producing the shapes called ‘opetopes’; that is the subject of Chapter 7. The
T -operads of the present example are described in 7.1 under the name of ‘T2-
operads’.
Example 4.2.15 A diﬀerent example involving trees takes E to be Set and T
to be the free algebraic theory of 4.1.12. In this context labels appear on leaves
rather than vertices, and trees are amalgamated by grafting leaves to roots rather
than by substituting trees into vertices. A T -multicategory consists of a set C0
of objects and hom-sets like
C








•
Q
Q
Q

•
@
@   •
a1
a2
a








(a1, a2, a ∈C0), together with an identity
1a ∈C


a
a


for each a ∈C0 and composition functions like
C








•
Q
Q
Q

•
@
@   •
a1
a2
a








× C








•
@
@   •
a1
1
a2
1
a1








× C








•
•
@
@   •
a1
2
a2
2
a2








- C













•
Q
Q
Q

•
@
@   •
•
@
@   •
•
@
@   •
•
a1
1
a2
1
a1
2
a2
2
a














116
Generalized Operads and Multicategories: Basics
(aj
i, ai, a ∈C0). Put another way, a T -multicategory C is a plain multicategory in
which the hom-sets are graded by trees: to each a1, . . . , an, a ∈C0 and τ ∈tr(n)
there is associated a set Cτ(a1, . . . , an; a), composition consists of functions
Cτ(a1, . . . , an; a) × Cτ1(a1
1, . . . , ak1
1 ; a1) × · · · × Cτn(a1
n, . . . , akn
n ; an)
- Cτ ◦(τ1,...,τn)(a1
1, . . . , akn
n ; a),
and the identity on a ∈C0 is an element of C | (a; a). In particular, a T -operad
is a family (P(τ))trees τ of sets together with compositions
P(τ) × P(τ1) × · · · × P(τn)
- P(τ ◦(τ1, . . . , τn))
and an identity element of P( | ). T -multicategories are a simpliﬁed version of
the ‘relaxed multicategories’ mentioned in 6.8.4.
Example 4.2.16 Recall that given any symmetric monoidal category V, there
is a notion of ‘plain multicategory enriched in V’ (p. 39), the one-object version
of which is ‘plain operad in V’ (p. 43). If E = Top and T is the free topological
monoid monad (4.1.14) then a T -operad is precisely an operad in Top. However,
T -multicategories are not the same thing as multicategories enriched in Top, as
in a T -multicategory C there is a topology on the set of objects. A multicategory
enriched in Top is a T -multicategory in which the set of objects has the discrete
topology. This diﬀerence should not found be surprising or disappointing: it
exhibits the tension between internal and enriched category theory, previously
discussed in 1.3.
Example 4.2.17 Similarly, if E = Cat and T is the free strict monoidal category
monad (4.1.15) then a T -operad is exactly a Cat-operad. We saw some examples
of these in 3.2: the operads ‘FΣ’ determining diﬀerent theories of monoidal
category. Another example is the Cat-operad (TR(n))n∈N, where TR(n) is the
category of n-leafed trees and maps between them, deﬁned and discussed in 7.3.
Example 4.2.18 Let T be the free symmetric strict monoidal category monad
on Cat, as in 4.1.16. Any symmetric multicategory A gives rise to a T -multicategory
C as follows. The category C0 is discrete, with the same objects as A. The objects
of the category C1 are the arrows of A; the arrows of C1 are of the form
(aσ1, . . . , aσn
θ·σ- a)
σ-
(a1, . . . , an
θ- a)
—in other words, an arrow φ
- θ is a permutation σ such that φ = θ · σ. The
category T C0 has objects all ﬁnite sequences (a1, . . . , an) of objects of A, and
arrows of the form
(aσ1, . . . , aσn)
σ-
(a1, . . . , an).
The rest of the structure of C is obvious.
This deﬁnes a full and faithful functor
SymMulticat ⊂- T -Multicat,

4.2 Operads and multicategories
117
so symmetric multicategories could equivalently be deﬁned as T -multicategories
with certain properties. In particular, symmetric operads are special T -operads.
See also the comments on p. 212 on ‘enhanced symmetric multicategories’, where
the category C0 is not required to be discrete.
Example 4.2.19 The free category monad fc on the category of directed graphs (4.1.17)
gives rise to a notion of fc-multicategory. This is the subject of Chapter 5.
Example 4.2.20 Let T be the free strict ω-category monad on the category E
of globular sets (4.1.18). Then T -operads are exactly globular operads, which we
study in depth in Part III and which can be used to specify diﬀerent theories of
ω-category. In 10.2 we consider brieﬂy the more general T -multicategories.
Example 4.2.21 The cubical analogue of the previous example takes T to be the
free strict n-tuple category monad of 4.1.19. A weak n-tuple category might be
deﬁned as an algebra for a certain T -operad. We look at weak double categories
in 5.2, but otherwise do not pursue the cubical case.
Example 4.2.22 Let T be a cartesian monad on a cartesian category E, let X ∈
E, and let h : T X
- X be a map in E. The T -graph (T X 1
T X
h- X)
can be given the structure of a T -multicategory in at most one way, and such a
structure exists if and only if T X
h- X is an algebra for the monad T . (If
it does exist then comp = µX and ids = ηX.) This deﬁnes a full and faithful
functor
( )+ : ET
- T -Multicat
turning algebras into multicategories. In 10.2 we will use the idea that a T -
multicategory is a generalized T -algebra to formulate a notion of weak n-category.
In the situation of ordinary categories rather than generalized multicategories,
not only is there the concept of a functor between categories, but also there are
the concepts of a module between categories (p. 61) and a natural transformation
between functors. The same goes for plain multicategories, as we saw in 2.3. In
fact, both of these concepts make sense for T -multicategories in general. We
meet the deﬁnitions and see the connection between them in 5.3.
E and T have so far been regarded as ﬁxed. But we would expect some kind
of functoriality: if T ′ is another cartesian monad on another category E′ then a
‘map’ from (E, T ) to (E′, T ′) should induce a functor
(E, T )-Multicat
- (E′, T ′)-Multicat.
We prove this in 6.7. That the category (E, T )-Multicat is independent (up to
isomorphism) of the choice of pullbacks in E follows from this functoriality by
considering the identity map from (E with one choice of pullbacks) to (E with
another choice of pullbacks).

118
Generalized Operads and Multicategories: Basics
4.3
Algebras
Theories have models, groups have representations, categories have set-valued
functors, and multicategories have algebras. Here we meet algebras for general-
ized (operads and) multicategories. There are several ways of framing the deﬁni-
tion. I have chosen the one that seems most useful in practice; two alternatives
are discussed in 6.3 and 6.4.
Let us begin by considering algebras for a plain multicategory C.
These
are maps from C into the multicategory of sets, but this is not much use for
generalization as there is not necessarily a sensible T -multicategory of sets for
arbitrary cartesian T .
However, as we saw in Chapter 2, algebras for plain
multicategories can be described without explicit reference to the multicategory
of sets. In the special case of plain operads P, an algebra is a set X together
with a map
a
n∈N
P(n) × Xn
- X
(usually written (θ, x1, . . . , xn) 7−→θ(x1, . . . , xn)), satisfying axioms expressing
compatibility with composition and identities in P. Let TP be the endofunctor
X 7−→`
n∈N P(n)×Xn on Set. Then the composition and identity of the operad
P induce a monad structure on TP : the multiplication has components
T 2
P X
∼=
a
n,k1,...,kn∈N
P(n) × P(k1) × · · · × P(kn) × Xk1+···+kn
`
comp×1
-
a
m∈N
P(m) × Xm = TP X
and the unit has components
X ∼= 1 × X1 ids×1
- P(1) × X1 ⊂-
a
m∈N
P(m) × Xm = TP X.
An algebra for the operad P is precisely an algebra for the monad TP . More
generally, an algebra for a plain multicategory C is a family (X(a))a∈C0 of sets
together with a map
a
n∈N,a1,...,an∈C0
C(a1, . . . , an; a) × X(a1) × · · · × X(an)
- X(a)
for each a ∈C0, satisfying axioms, and again the endofunctor
TC : (X(a))a∈C0 7−→


a
a1,...,an∈C0
C(a1, . . . , an; a) × X(a1) × · · · × X(an)


a∈C0
on SetC0 naturally has the structure of a monad, an algebra for which is exactly
a C-algebra. Since there is an equivalence of categories SetC0 ≃Set/C0 (p. 8),

4.3 Algebras
119
we have succeeded in expressing the deﬁnition of an algebra for a plain operad
or multicategory in a completely internal way—that is, completely in terms of
the objects and arrows of the category Set and the free-monoid monad on Set.
The strategy for arbitrary cartesian E and T is now clear: an algebra for a T -
multicategory C should be deﬁned as an algebra for a certain monad TC on
E/C0.
So, let (T, µ, η) be a cartesian monad on a cartesian category E, and let
C be a T -multicategory. If X = (X
p- C0) is an object of E/C0 then let
TCX = (TCX
p′- C0) be the boxed composite in the diagram
TCX
 @
T X

C1
-
T C0
dom

T p
-
C0.
cod
-
    @
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
(So the object TCX of E is deﬁned as a pullback.) This gives a functor TC :
E/C0
- E/C0. The unit ηC
X : X
- TCX is the unique map making
X
C0
p
-
TCX
ηC
X
?
.............
 @
T X
ηX


C1
ids
?
-
T C0
dom

T p
-
commute. Similarly, the multiplication µC
X : T 2
CX
- TCX is the unique map
making the diagram in Fig. 4-A commute. (That we do have pullbacks as in
the top half of the diagram is an easy consequence of the deﬁnition of TC, using
the Pasting Lemma, 1.1.1.) This deﬁnes a monad (TC, µC, ηC) on the category
E/C0.
Deﬁnition 4.3.1 Let T be a cartesian monad on a cartesian category E, and let
C be a T -multicategory. Then the category Alg(C) of algebras for C is the
category (E/C0)TC of algebras for the monad TC on E/C0.
For a more abstract derivation of the induced monad TC, note that there
is a weak functor E(T )
- CAT sending a 0-cell E to the category E/E and
deﬁned on 1- and 2-cells by pullback. Under this weak functor, any monad in

120
Generalized Operads and Multicategories: Basics
T
2
C
X
  
T
T
C
X
  

C
1
Æ
C
1
  
-
T
2
X

T
C
1

-
C
1
-
T
2
C
0
T
dom

T
2
p
-
T
C
0
dom

T
 o
d
-

C
X
 
omp
T
C
X
  

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
T
X

X
-

C
1

-
T
C
0
dom

T
p
-
Figure 4-A: Deﬁnition of µC
X
E(T ) gives rise to a monad in CAT; thus, a T -multicategory C gives rise to a
monad (TC, µC, ηC) on E/C0.
Example 4.3.2 Let T be the identity monad on E = Set and let C be a T -
multicategory, that is, a small category. Given a set X
p- C0 over C0, write
X(a) for the ﬁbre p−1{a} over a ∈C0. Then
(TCX)(a)
=
a
b∈C0
C(b, a) × X(b),
(T 2
CX)(a)
=
a
c,b∈C0
C(c, b) × C(b, a) × X(c).
The multiplication map µC
X : (T 2
CX)(a)
- (TCX)(a) is given by composition
in C, and similarly ηC
X : X(a)
- (TCX)(a) is given by the identity 1a in C.
A C-algebra is, therefore, a family (X(a))a∈C0 of sets together with a function
a
b∈C0
C(b, a) × X(b)
- X(a)
(4:1)
for each a ∈C0, compatible with composition and identities in C. So Alg(C) ≃
[C, Set].
Another way to put this is that for any category C, the forgetful functor
[C, Set]
- [C0, Set] is monadic and the induced monad on [C0, Set] ≃Set/C0

4.3 Algebras
121
is TC. When C is a one-object category, regarded as a monoid M, the resulting
monad TC on Set is M × −, and the category of algebras is the category of left
M-sets.
More generally, let T be the identity monad on any cartesian category E, so
that an (E, T )-multicategory C is a category in E: then Alg(C) is the category
of ‘left C-objects’ or ‘diagrams on C’ as deﬁned in, for instance, Mac Lane and
Moerdijk [1992, V.7].
Example 4.3.3 Let T be the free monoid monad on the category E = Set and
let C be a T -multicategory, that is, a plain multicategory. A C-algebra consists
of a family (X(a))a∈C0 of sets together with a function (TCX)(a)
- X(a) for
each a ∈C0, satisfying compatibility axioms. By deﬁnition of TCX,
(TCX)(a) =
a
a1,...,an∈C0
C(a1, . . . , an; a) × X(a1) × · · · × X(an),
exactly as on p. 118, and we ﬁnd that the category of algebras for the T -
multicategory C is indeed equivalent to the category of algebras for the plain
multicategory C.
Example 4.3.4 Any strongly regular algebraic theory (4.1.6) can be described
by a plain operad. That is, if a monad on Set arises from a strongly regular
theory then it is isomorphic to the monad TP arising from some plain operad P;
in fact, the converse holds too. The proofs are in C.1.
Example 4.3.5 When E = Set and T = 1 + −, as in 4.2.11, a T -multicategory
is an ordinary category D together with a functor D
Y- Set. A (D, Y )-algebra
consists of a functor D
X- Set together with a natural transformation
D
Y
X
R

∨
Set.
Example 4.3.6 Let T be the free semigroup monad on Set, so that a T -
multicategory is a plain multicategory with no nullary arrows (4.2.12). Then
an algebra for a T -multicategory C is exactly an algebra for the underlying plain
multicategory. In fact, plain multicategories can be identiﬁed with pairs (C, X)
where C is a T -multicategory and X is a C-algebra, by making elements of X(a)
correspond to nullary arrows into a.
Example 4.3.7 Let M be a monoid and let (E, T ) = (Set, M × −), so that
a T -multicategory is a category C together with a functor C
φ- M (4.2.13).
Then the category of algebras for (C, φ) is simply [C, Set], regardless of what
φ is.
This can be seen by working out TC explicitly, but we will be able to
understand the situation better after we have seen an alternative way of deﬁning
generalized multicategories and their algebras (6.2, especially the remarks after
Corollary 6.2.5.)

122
Generalized Operads and Multicategories: Basics
Example 4.3.8 Let T be any cartesian monad on any category E with ﬁnite
limits. Then (T 1 1
T 1
!- 1) is the terminal T -graph, and carries a unique
multicategory structure, so is also the terminal T -multicategory. The induced
monad on E/1 ∼= E is, inevitably, just (T, µ, η), and so an algebra for the terminal
T -multicategory is just an algebra for T .
Example 4.3.9 Let T be the free plain operad monad on the category E =
SetN of sequences of sets (4.1.11, 4.2.14). Then by the previous example, an
algebra for the terminal T -multicategory is precisely a plain operad. Compare
Example 2.2.23, where we deﬁned a symmetric multicategory whose algebras
were plain operads. This is a minor theme of this book: objects equipped with
symmetries are replaced by objects equipped with a more reﬁned geometrical
structure.
Example 4.3.10 Let T be the free algebraic theory on one operation of each
arity (4.2.15). Let P be a T -operad. Then a P-algebra structure on a set X
consists of a function Xn
- X for each n-leafed tree τ and each element
of P(τ), satisfying axioms expressing compatibility with the composition and
identity of P.
Example 4.3.11 If T is the free monoid monad on Top or Cat, as in 4.2.16
or 4.2.17, then an algebra for a T -operad P is an algebra in the usual sense, that
is, a space or category X with continuous or functorial actions by the P(n)’s.
Example 4.3.12 Historically, one of the most important plain operads has been
the little intervals operad, that is, the little 1-disks operad of 2.2.16, whose al-
gebras are roughly speaking the same thing as loop spaces. A plain operad is
an operad for the free monoid monad, and a monoid is a category in which all
arrows begin and end at the same point. If we are interested in paths rather
than loops on a basepoint then it makes sense to replace monoids by arbitrary
categories. Indeed, we show in 5.1.10 that if fc is the free category monad on the
category E of directed graphs then there is a certain fc-operad P such that the
paths in any ﬁxed space naturally form a P-algebra. This solves the language
problem posed in 2.2.18.
Example 4.3.13 Let T be the free strict ω-category monad on the category E
of globular sets, so that a T -operad is a ‘globular operad’ (4.2.20). In Chapter 9
we construct a certain operad L, the initial ‘operad-with-contraction’, and deﬁne
a weak ω-category to be an L-algebra. In 10.1 we consider some other possible
deﬁnitions of weak ω-category, some of which are also of the form ‘a weak ω-
category is a P-algebra’ for diﬀerent choices of globular operad P.
Example 4.3.14 Let T be any monad on any category E and let h = (T X
h-
X) be any T -algebra. Then there is a monad T/h on E/X whose functor part

4.3 Algebras
123
acts on objects by


Y
X
p
?


7−→







T Y
T X
T p
?
X
h?







.
Algebras for T/h are just T -algebras over h; precisely, ET/h ∼= ET /h.
Now recall from 4.2.22 that when T is a cartesian monad on a cartesian
category E, any T -algebra (T X
h- X) deﬁnes a T -multicategory
h+ = (T X 1
T X
h- X).
This induces a monad Th+ on E/X. So starting with E, T , and (T X
h- X), we
obtain the two monads T/h and Th+ on E/X; they are, inevitably, isomorphic.
So Alg(h+) ∼= ET /h. Example 4.3.8 is the special case where h is the terminal
algebra.
Example 4.3.15 For any T -multicategory C, the object (C1
cod- C0) of E/C0
naturally has the structure of a T -algebra. When T is the identity monad on
Set, so that C is a small category, this algebra is the functor
C
-
Set,
a
7−→
`
a′∈C0 C(a′, a)
sometimes called the Cayley representation of C.
In this section we have seen how to associate to each T -multicategory C a
category Alg(C). We would expect some kind of functoriality in C. When T
is the identity monad on Set, a functor C
- C′ between (T -multi)categories
induces a functor in the opposite direction,
Alg(C′) ≃[C′, Set]
- [C, Set] ≃Alg(C).
The same holds when T is the free monoid monad on Set, viewing C-algebras as
multicategory maps C
- Set as in the original deﬁnition, 2.1.12.
In fact, the construction works for an arbitrary cartesian monad T : any map
f : C
- C′ of T -multicategories induces a functor Alg(C′)
- Alg(C).
First, we have the functor f ∗
0 : E/C′
0
- E/C0 deﬁned by pullback along
f0 : C0
- C′
0. Then there is a naturally-arising natural transformation
E/C′
0
TC′- E/C′
0
⇒
φ
E/C0
f ∗
0
?
TC
- E/C0,
f ∗
0
?

124
Generalized Operads and Multicategories: Basics
which the reader will easily be able to determine. This φ is compatible with the
monad structures on TC′ and TC: in the terminology deﬁned in 6.1, (f ∗
0 , φ) is a
‘lax map of monads’ from TC′ to TC. It follows that there is an induced functor
on the categories of algebras for these monads, that is, from Alg(C′) to Alg(C).
This construction deﬁnes a map
Alg : (T -Multicat)op
- CAT.
Since the induced functors are deﬁned by pullback, it is inevitable that this map
does not preserve composites and identities strictly, but only up to coherent
isomorphism. Precisely, it is a weak functor from the 2-category (T -Multicat)op
whose only 2-cells are identities to the 2-category CAT. If we also bring into
play transformations between T -multicategories (5.3), then T -Multicat becomes
a strict 2-category and Alg a weak functor between 2-categories.
Notes
T-multicategories were introduced by Burroni in his [1971] paper, where they went by
the name of T-categories. He showed how to deﬁne them for any monad T, though he
concentrated on cartesian T (and it is not clear that T-categories are useful outside this
case). The basic idea has been independently rediscovered on at least two occasions: by
Hermida [2000] and by Leinster [1998a]. The notion of an algebra for a T-multicategory
seems not to have appeared before the latter paper.
The shape of this chapter is typical of much of this text: while the formalism is
quite simple (in this case, the deﬁnition of T-multicategory and of algebra), it can take
a long time to see what it means concretely in particular cases of interest. Indeed, in
this chapter we have restricted ourselves to the simpler instances of T, leaving some of
the more advanced examples to chapters where they can be explored at greater leisure
(Ch. 5, 7, 8).
Hermida called E(T ) the ‘Kleisli bicategory of spans’ in [2000]; the formal similarity
between the deﬁnition of E(T ) and the usual construction of a Kleisli category is evident.
Dmitry Roytenberg suggested to me that something like Example 4.3.12 ought to
exist.

Chapter 5
Example: fc-Multicategories
A lot of people are afraid of heights. Not me. I’m afraid
of widths.
Steven Wright
The generalized multicategories that we are interested in typically have some ge-
ometry to them.
They are often ‘higher-dimensional’ in some sense.
In this
chapter we study a 2-dimensional example, fc-multicategories, which are T -
multicategories when T is the free category monad fc on the category of directed
graphs.
This case is interesting for a variety of reasons. First, fc-multicategories turn
out to encompass a wide range of familiar 2-dimensional structures, including
bicategories, double categories, monoidal categories and plain multicategories.
Second, there are two well-known ideas for which fc-multicategories provide a
cleaner and more general context than is traditional: the ‘bimodules construction’
(usually done on bicategories) and the enrichment of categories (usually done
in monoidal categories). Third, these 2-dimensional structures are the second
rung on an inﬁnite ladder of higher-dimensional structures (the ﬁrst rung being
ordinary categories), and give us clues about the behaviour of the more diﬃcult,
less easily visualized higher rungs.
We start (5.1) by unwinding the deﬁnition of fc-multicategory to give a com-
pletely elementary description. As mentioned above, various familiar structures
arise as special kinds of fc-multicategory; we show how this happens.
A nearly-familiar structure that arises as a special kind of fc-multicategory
is the ‘weak double category’, in which horizontal composition only obeys asso-
ciativity and unit laws up to coherent isomorphism. We deﬁne these in 5.2 and
give examples, of which there are many natural and pleasing ones.
Section 5.3 is on the ‘bimodules construction’ or, as we prefer to call it,
the ‘monads construction’. This takes an fc-multicategory C as input and pro-
duces a new fc-multicategory Mon(C) as output.
For example, if C is the
fc-multicategory of sets (and functions, and spans) then Mon(C) is the fc-
multicategory of categories (and functors, and modules); if C is abelian groups

126
Example: fc-Multicategories
(and homomorphisms) then Mon(C) is rings (and homomorphisms, and mod-
ules). We wait until 6.8 to see what a ‘category enriched in an fc-multicategory’
is.
5.1
fc-multicategories
Let H be the category (0
σ-
τ- 1) and E = [Hop, Set]. Then E is the category
of directed graphs, and there is a forgetful functor U : Cat
- E. This has a
left adjoint F: if E ∈E then objects of FE are vertices of E, arrows in FE are
strings
x0
p1- x1
p2-
· · ·
pn- xn
of edges in E (with n ≥0), and composition is concatenation. The adjunction
induces a monad T = U ◦F on E, which can be shown to be cartesian either by
direct calculation or by applying some general theory (6.5.3). We write T = fc,
for ‘free category’, and so we have the notion of an fc-multicategory.
What is an fc-multicategory, explicitly? An fc-graph C is a diagram
C1 = (C11
-
- C10)
+

QQQQQ
s
fc(C0) = (C′
01
-
- C00)
C0 = (C01
-
- C00)
where C1 and C0 are directed graphs and the diagonal arrows are maps of graphs,
the Cij’s are sets and the horizontal arrows are functions, and C′
01 is the set of
strings of edges in C0. Think of elements of C00 as objects or 0-cells, elements
of C01 as horizontal 1-cells, elements of C10 as vertical 1-cells, and elements
of C11 as 2-cells, as in the picture
a0
m1 - a1
m2 -
· · ·
mn - an
⇓θ
a
f
?
m
- a′
f ′
?
(5:1)
(n ≥0, ai, a, a′ ∈C00, mi, m ∈C01, f, f ′ ∈C10, θ ∈C11). An fc-multicategory
structure on the fc-graph C amounts to composition and identities of two types.
First, the directed graph
C10
C00

C00
-
has the structure of a category; in other words, vertical 1-cells can be composed
and there is an identity vertical 1-cell on each 0-cell. Second, there is a compo-

5.1 fc-multicategories
127
sition function for 2-cells,
•
m1
1- · · ·
mk1
1-
•
m1
2- · · ·
mk2
2 -
•
· · ·
•
m1
n- · · ·
mkn
n-
•
⇓θ1
⇓θ2
· · ·
⇓θn
•
f0
?
m1
-
•
f1
?
m2
-
•? · · ·
•?
mn
-
•
fn
?
⇓θ
•
f
?
m
-
•
f ′
?
7−→
•
m1
1-
· · ·
mkn
n-
•
⇓θ◦(θ1, θ2, . . . , θn)
•
f◦f0
?
m
-
•
f ′◦fn
?
(5:2)
(n ≥0, ki ≥0, with •’s representing objects), and a function assigning an identity
2-cell to each horizontal 1-cell,
a
m
- a′
7−→
a
m
- a′
⇓1m
a
1a
?
m
- a′.
1a′
?
The composition and identities obey associativity and identity laws, which ensure
that any diagram of pasted-together 2-cells with a rectangular boundary has a
well-deﬁned composite.
The pictures in the nullary case are worth a short comment. When n = 0,
the 2-cell of diagram (5:1) is drawn as
a0 ======== a0
⇓θ
a
f
?
m
- a′,
f ′
?
and the diagram of pasted-together 2-cells in the domain of (5:2) is drawn as
b0 ========= b0
=
a0
f0
?
======== a0
f0
?
⇓θ
a
f
?
m
- a′.
f ′
?

128
Example: fc-Multicategories
The composite of this last diagram will be written as θ◦f0.
So in completely elementary terms, an fc-multicategory consists of
• a set of objects
• for each pair (a, a′) of objects, a set of vertical 1-cells
a
a′?
• for each pair (a, a′) of objects, a set of horizontal 1-cells a
- a′
• for each a0, . . . , an, a, a′, m1, . . . , mn, m, f, f ′ as in (5:1), a set of 2-cells θ
• composition and identity functions for vertical 1-cells, as described above
• composition and identity functions for 2-cells, as described above,
satisfying associativity and identity axioms. Having given this elementary de-
scription I will feel free to refer to large fc-multicategories, in which the collection
of cells is a proper class.
Example 5.1.1 There is an fc-multicategory Ring in which
• 0-cells are (not necessarily commutative) rings
• vertical 1-cells are ring homomorphisms
• a horizontal 1-cell A
- A′ is an (A′, A)-bimodule (1.5.5)
• a 2-cell
A0
M1 - A1
M2 -
· · ·
Mn - An
⇓θ
A
f
?
M
- A′
f ′
?
is an abelian group homomorphism
θ : Mn ⊗An−1 Mn−1 ⊗An−2 · · · ⊗A1 M1
- M
satisfying
θ(an · mn ⊗mn−1 ⊗· · · ⊗m2 ⊗m1 · a1) = f ′(an) · θ(mn ⊗· · · ⊗m1) · f(a1)
(that is, θ is a homomorphism of (An, A0)-bimodules if M is given an
(An, A0)-bimodule structure via f and f ′)
• composition and identities are deﬁned in the evident way.

5.1 fc-multicategories
129
No horizontal
Weak horizontal
Strict horizontal
composition
composition
composition
No degeneracy
fc-multicategory
Weak double
Strict double
category
category
All vertical 1-cells
Vertically discrete
Bicategory
Strict
are identities
fc-multicategory
2-category
Only one object and
Plain
Monoidal
Strict monoidal
one vertical 1-cell
multicategory
category
category
Figure 5-A: Some of the possible degeneracies of an fc-multicategory. The left-
hand column refers to degeneracies in the category formed by the objects and
vertical 1-cells. The top row says whether the fc-multicategory structure arises
from a composition rule for horizontal 1-cells. See Examples 5.1.2–5.1.8
Thus, rings, homomorphisms of rings, modules over rings, homomorphisms of
modules, and tensor products of modules are integrated into a single structure.
The category formed by the objects and vertical 1-cells is the ordinary category
of rings and homomorphisms. When the distinction needs making, I will write
Ring1 for this ‘1-dimensional’ category and Ring2 for the ‘2-dimensional’ fc-
multicategory. Similar notation is extended to similar examples.
Many familiar 2-dimensional structures are degenerate fc-multicategories.
The following examples demonstrate this; Fig. 5-A is a summary.
Example 5.1.2 Any strict double category gives rise to an fc-multicategory, in
which a 2-cell as in (5:1) is a 2-cell
a0
mn◦···◦m1- an
⇓θ
a
f
?
m
- a′
f ′
?
in the double category.
Example 5.1.3 The last example works just as well if we start with a double
category in which the composition of horizontal 1-cells only obeys weak laws. We
call these ‘weak double categories’ and discuss them in detail in the next section;
a typical example is Ring (5.1.1). A similar example, and really the archetypal
weak double category, is Set2, deﬁned as follows:
• objects are sets
• vertical 1-cells are functions (and the category formed by objects and ver-
tical 1-cells is the ordinary category Set1 of sets and functions; see 5.1.1
for the notation)

130
Example: fc-Multicategories
• horizontal 1-cells are spans: that is, a horizontal 1-cell A
- A′ is a
diagram
M
A

A′
-
of sets and functions
• a 2-cell inside
M
A

A′
-
N
B
f
?

B′
f ′
?
-
is a function θ : M
- N making the diagram commute
• horizontal composition is by pullback.
That every weak double category has an underlying fc-multicategory is exactly
analogous to every weak monoidal category having an underlying plain multicat-
egory.
Example 5.1.4 Consider fc-multicategories C in which all vertical 1-cells are
identities.
This means that the category formed by the objects and vertical
1-cells is discrete, so we call C vertically discrete. A vertically discrete fc-
multicategory consists of some objects a, a′, . . ., some 1-cells m, m′, . . ., and some
2-cells looking like
a2 . . .
a1
m2
-
an−1
⇓θ
a0
m
-
m1
-
an,
mn
-
(5:3)
together with a composition function
a0
a1
an−1
an
m
m1
mn
m1
1
mk1
1
m1
n
mkn
n
⇓θ
⇓
θ1
⇓
θn
7−→
a0
an
m
m1
1
mkn
n
⇓θ◦(θ1, . . . , θn)
and an identity function
a
a′
m
7−→
a
a′
m
m
⇓1m

5.1 fc-multicategories
131
obeying the inevitable associativity and identity laws. This leads us into the
world of opetopes (Chapter 7).
Example 5.1.5 A bicategory is a weak double category in which the only ver-
tical 1-cells are identities, and so gives rise to an fc-multicategory. Explicitly,
if B is a bicategory then there is a vertically discrete fc-multicategory whose
objects are those of B, whose horizontal 1-cells are the 1-cells of B, and whose
2-cells (5:3) are 2-cells
a0
(mn◦···◦m1)
m
θ
R

∨
an
in B.
Example 5.1.6 Plain multicategories are the same as fc-multicategories with
only one object and one vertical 1-cell. If the plain multicategory is called M
then we call the corresponding fc-multicategory ΣM, the suspension of M.
Horizontal 1-cells in ΣM are objects of M, and 2-cells
. . .
•
m2
-
⇓θ
•
m
-
m1
-
•
mn
-
(5:4)
in ΣM are maps
m1, . . . , mn
θ- m
in M.
Example 5.1.7 In particular, plain operads are fc-multicategories in which there
is only one object, one vertical 1-cell and one horizontal 1-cell. An fc-operad is
an fc-multicategory in which there is only one object and one horizontal 1-cell,
so a plain operad is a special kind of fc-operad.
If we are going to take the suspension idea seriously then we should write
Σ : Operad ⊂- Multicat
for the inclusion of operads as one-object multicategories. We also have (5.1.6)
the suspension map
Σ : Multicat ⊂- fc-Multicat,
so the inclusion of operads into fc-multicategories should be written Σ2: double
suspension. Of course, we usually leave the ﬁrst inclusion nameless.
Example 5.1.8 As a special case of both 5.1.5 and 5.1.6, any monoidal category
M gives rise to an fc-multicategory ΣM in which there is one object and one
vertical 1-cell. Horizontal 1-cells are objects of M, and 2-cells (5:4) are maps
θ : (mn ⊗· · · ⊗m1)
- m
in M.

132
Example: fc-Multicategories
Example 5.1.9 Here is a family of fc-multicategories that are not usually de-
generate in any of the ways listed above. Let V be a plain multicategory and
deﬁne the fc-multicategory Set[V ] as follows:
• objects are sets
• vertical 1-cells are functions
• a horizontal 1-cell A
- A′ is a family (ma,a′)a∈A,a′∈A′ of objects of V
• a 2-cell
A0
m1 - A1
m2 -
· · ·
mn - An
⇓θ
A
f
?
m
- A′
f ′
?
is a family

m1
a0,a1, . . . , mn
an−1,an
θa0,...,an
- mf(a0),f ′(an)

a0∈A0,...,an∈An
of maps in V
• composition and identities are obvious.
If V = Set then Set[V ] is the fc-multicategory Set2 of 5.1.3. But Set[V ] is not
(the underlying fc-multicategory of) a weak double category unless V happens to
be (the underlying plain multicategory of) a monoidal category, since Set[V ] does
not usually have ‘enough universal 2-cells’. Compare the results on representable
multicategories in 3.3.
We will not be much concerned with algebras for fc-multicategories, but let
us look at them brieﬂy. Given an object E of E, that is, a directed graph, an
object (X
- E) of E/E amounts to a set X(a) for each vertex a of E and a
span
X(m)
X(a)

X(b)
-
for each edge a
m- b of E. An algebra for an fc-multicategory C is an object
(X
- C0) of E/C0 together with an action of C on X, and so a C-algebra
is just an fc-multicategory map from C into the (large) fc-multicategory Set2
deﬁned in 5.1.3.
There are some interesting examples of algebras when C is the fc-multicategory
coming from a plain operad P: in the notation of 5.1.7, C = ΣP. A (ΣP)-algebra
is called a categorical P-algebraor a P-category, and consists of a directed
graph X together with a function
P(n) × X(xn−1, xn) × · · · × X(x0, x1)
- X(x0, xn)
(5:5)

5.2 Weak double categories
133
for each n ∈N and sequence x0, . . . , xn of vertices of X, satisfying the evident
axioms. (Here X(x, x′) denotes the set of edges from x to x′.) If P = 1 then a
P-category is exactly a category; there are some less trivial examples too.
Example 5.1.10 Let E be the operad in which
E(n) = {endpoint-preserving continuous maps [0, 1]
- [0, n]},
as in 2.2.18, so that any loop space is naturally an E-algebra. Then any path-
space is naturally an E-category. In other words, take a topological space Y and
let X be the graph whose vertices are points of Y and whose edges are continuous
maps from [0, 1] into Y : then X is naturally a E-category.
Example 5.1.11 Similarly, taking A∞to be the operad of chain complexes
whose algebras are A∞-algebras (p. 193) gives us the standard notion of an A∞-
category. For this to make sense, we must work in a world where everything
is enriched in chain complexes: so X consists of a set X0 of objects (or ver-
tices) together with a chain complex X(x, x′) for each pair (x, x′) of objects, and
in (5:5) the ×’s become ⊗’s. We do not meet enriched generalized multicatego-
ries properly until 6.8, but it is clear how things should work in this particular
situation.
5.2
Weak double categories
Generalizing both bicategories and strict double categories are ‘weak double cat-
egories’, introduced informally in 5.1. Recall that these are only weak in the
horizontal direction: vertical composition still obeys strict laws. We do not con-
sider double categories weak in both directions.
The deﬁnition of weak double category is a cross between that of strict double
category and that of unbiased bicategory.
Deﬁnition 5.2.1 A weak double category D consists of some data subject
to some axioms. The data is:
• A diagram
D1
D0
dom

D0
cod
-
of categories and functors.
The objects of D0 are called the 0-cells or
objects of D, the maps in D0 are the vertical 1-cells of D, the objects of
D1 are the horizontal 1-cells of D, and the maps in D1 are the 2-cells
of D, as in the picture
a
m
- a′
⇓θ
b
f
?
p
- b′
f ′
?
(5:6)

134
Example: fc-Multicategories
where a
f- b, a′
f ′- b′ are maps in D0 and m
θ- p is a map in D1,
with dom(m) = a, dom(θ) = f, and so on.
• For each n ≥0, a functor comp(n) : D(n)
1
- D1 such that the diagram
D(n)
1
D0

D0
-
D1
comp(n)
?
cod
-
dom

commutes, where D(n)
1
is the limit of the diagram
D1
D1
D1
D0
dom

D0
dom

cod
-
cod
-
· · ·
dom

D0
cod
-
containing n copies of D1. The functor comp(n) is called n-fold horizontal
composition and written
a0
m1 - a1
m2 - · · ·
mn - an
⇓θ1
⇓θ2
⇓θn
b0
f0
?
p1
- b1
f1
?
p2
- · · ·
pn
- bn
fn
?
7−→
a0
(mn◦···◦m1)- an
⇓(θn ∗· · · ∗θ1)
b0
f0
?
(pn◦···◦p1)- bn.
fn
?
• For each double sequence
m = ((m1
1, . . . , mk1
1 ), . . . , (m1
n, . . . , mkn
n ))
of horizontal 1-cells such that the composites below make sense, an invert-
ible 2-cell
•
((mkn
n ◦···◦m1
n)◦···◦(mk1
1 ◦···◦m1
1))-
•
⇓γm
•
1
?
(mkn
n ◦···◦m1
1)
-
•
1
?
(where ‘invertible’ refers to vertical composition).

5.2 Weak double categories
135
• For each horizontal 1-cell a
m- a′, an invertible 2-cell
a
m
- a′
⇓ιm
a
1
?
(m) - a′.
1
?
The axioms are:
• γm is natural in each of the mj
i’s, and ιm is natural in m. In the case of ι,
this means that for each 2-cell θ as in (5:6) we have
a
m
- a′
⇓θ
b
f
?
p
- b′
f ′
?
⇓ιp
b
1
?
(p) - b′
1
?
=
a
m
- a′
⇓ιm
a
1
?
(m) - a′
1
?
⇓(θ)
b
f
?
(p) - b′,
f ′
?
and similarly for γ.
• γ and ι satisfy associativity and identity coherence axioms analogous to
those in the deﬁnition (3.1.1) of lax monoidal category.
It is clear how to deﬁne lax maps between weak double categories, again
working by analogy with unbiased monoidal categories or unbiased bicategories,
and there is a forgetful functor
(weak double categories and lax maps)
- fc-Multicat.
Example 5.2.2 There are several degenerate cases. A weak double category
in which the coherence cells γ and ι are all identities is exactly a strict double
category. A weak double category whose only vertical 1-cells are identities is
exactly an (unbiased) bicategory. A weak double category whose only horizontal
1-cells are identities is exactly a strict 2-category.
Example 5.2.3 The fc-multicategory Ring2 of 5.1.1 is a weak double category,
horizontal composition being tensor of modules.
Example 5.2.4 The fc-multicategory Set2 of 5.1.3 is also a weak double cat-
egory. It is formed from sets, functions, and spans, which is reminiscent of the
deﬁnition of T -multicategories and maps between them in 4.2. Indeed, let T be
a cartesian monad on a cartesian category E, and deﬁne a weak double category
as follows:
• objects are objects of E

136
Example: fc-Multicategories
• vertical 1-cells are maps in E
• horizontal 1-cells E
- E′ are diagrams
M
T E
d

E′
c
-
in E
• 2-cells θ are commutative diagrams
L
T D

D′
-
M
θ?
T E
T f
?

E′
f ′
?
-
• vertical composition is as in E
• horizontal composition is by pullback: the composite of horizontal 1-cells
M1
T E0

E1,
-
M2
T E1

E2,
-
. . . ,
Mn
T En−1

En
-
is the limit of the diagram
T n−1M1
T n−2M2
Mn
T nE0

T n−1E1

-
-
· · ·

En
-
T E0
µ(n)
E0

where µ(n) is the n-fold multiplication of the monad T ; horizontal compo-
sition of 2-cells works similarly.
Any weak double category yields a bicategory by discarding all the vertical 1-
cells except for the identities, and applying this to the weak double category just
deﬁned yields the bicategory E(T ) (Deﬁnition 4.2.1). It is therefore reasonable to
call our weak double category E(T ) too. In particular, Set(id) = Set2.
Example 5.2.5 Categories, functors and modules are integrated in the following
weak double category Cat2:

5.2 Weak double categories
137
• objects are small categories
• vertical 1-cells are functors
• horizontal 1-cells are modules (2.3): that is, a horizontal 1-cell A
- A′
is a functor Aop × A′
- Set
• a 2-cell
A
M
- A′
⇓
B
F
?
P
- B′
F ′
?
is a natural transformation
Aop × A′
⇒
Set
M
-
Bop × B′
F ×F ′
?
P
-
• vertical composition is ordinary composition of functors and natural trans-
formations
• horizontal composition is tensor of modules: the composite (Mn⊗· · ·⊗M1)
of
A0
M1 - A1
M2 -
· · ·
Mn - An,
is given by the coend formula
(Mn ⊗· · · ⊗M1)(a0, an) =
Z a1,...,an−1
Mn(an−1, an) × · · · × M1(a0, a1)
(a0 ∈A0, an ∈An), or when n = 0 by IA(a, a′) = A(a, a′); similarly 2-cells.
(A coend is a colimit of sorts: Mac Lane [1971, Ch. IX].)
The weak double category Cat2 incorporates not only categories, functors and
modules, but also natural transformations: for by a Yoneda argument, a 2-cell
A
IA - A
⇓
B
F
?
IB
- B
F ′
?
amounts to a natural transformation F
- F ′.
In the next section we will see that T -multicategories and maps, transforma-
tions and modules between them form an fc-multicategory, but not in general a
weak double category.

138
Example: fc-Multicategories
Example 5.2.6 There is a weak double category Monoid2 made up of monoids,
homomorphisms of monoids, bimodules over monoids, and maps between them.
This is just like Ring2 but with all the additive structure removed. Alternatively,
it is the substructure of Cat2 whose 0-cells are just the one-object categories,
and with all 1- and 2-cells between them.
Example 5.2.7 We have considered using spans as horizontal 1-cells; we can
also use cospans. Thus, if E is any category in which all pushouts exist then there
is a weak double category whose objects and vertical 1-cells form the category E,
whose horizontal 1-cells A
- A′ are diagrams
M
A
-
A′

in E, and with the rest of the structure deﬁned in the obvious way.
For instance, let E be the category of topological spaces and embeddings:
then M is a space containing copies of A and A′ as subspaces, and horizontal
composition in the weak double category is gluing along subspaces.
Example 5.2.8 Adapting the previous example slightly, we obtain a weak dou-
ble category n-Mfd2 of n-manifolds and cobordisms, for each n ≥0. An object is
an n-dimensional manifold (topological, say, and without boundary). A vertical
1-cell is a continuous map. A horizontal 1-cell A
- A′ is an (n + 1)-manifold
M together with a homeomorphism h between the boundary ∂M of M and the
disjoint union A ∐A′. A 2-cell
A
(M,h)- A′
⇓
B
f
?
(P,k) - B′
f ′
?
is a continuous map θ : M
- P making the diagram
∂M
h
∼- A ∐A′
∂P
θ
?
∼
k- B ∐B′
f∐f ′
?
commute. Vertical composition is composition of functions; horizontal composi-
tion is by gluing.
Fig. 5-B shows a 2-cell in the underlying fc-multicategory of 1-Mfd2, in a
case where all the continuous maps involved are homeomorphisms.
Similar constructions can be made for other types of manifold: oriented,
smooth, holomorphic, . . . . There is a slight problem with identities for horizon-
tal composition, as the horizontal identity on A ‘ought’ to be just A itself (com-
pare 5.2.7) but this is not usually counted as an (n+1)-manifold with boundary.

5.3 Monads, monoids and modules
139
?
∼=
?
∼=
⇓∼=
Figure 5-B: 2-cell in the fc-multicategory 1-Mfd2, with 4 horizontal 1-cells along
the top row
Whether or not we can ﬁx this, there is certainly an underlying fc-multicategory:
the problem is purely one of representability.
5.3
Monads, monoids and modules
Modules have loomed large in our examples of fc-multicategories, appearing as
horizontal 1-cells.
Monoids and their cousins (such as rings and categories)
have also been prominent, appearing as 0-cells.
Here we show how any fc-
multicategory C gives rise to a new fc-multicategory Mon(C), whose 0-cells are
monoids/monads in C and whose horizontal 1-cells are modules between them.
As I shall explain, this construction has traditionally been carried out in a
narrower context than fc-multicategories, which has meant working under certain
technical restrictions. If we expand to the wider context of fc-multicategories
then the technicalities vanish.
For an example of the traditional construction, start with the monoidal cat-
egory (Ab, ⊗, Z) of abelian groups. A monoid therein is just a ring. Given two
monoids A, B in a monoidal category, a (B, A)-module is an object M equipped
with compatible left and right actions
B ⊗M
actL- M,
M ⊗A
actR- M,
and there is an obvious notion of map between (B, A)-modules. In this particular
case these are (bi)modules and their homomorphisms, in the usual sense. So
we have almost arrived at the bicategory of 1.5.5: 0-cells are rings, 1-cells are
modules, and 2-cells are maps of modules. The only missing ingredient is the
tensor product of modules. If M is a (B, A)-module and N a (C, B)-module
then N ⊗B M is a quotient of the abelian group tensor N ⊗M; categorically, it
is the (reﬂexive) coequalizer
N ⊗B ⊗M
actR⊗1M
-
1N⊗actL
- N ⊗M
- N ⊗B M.

140
Example: fc-Multicategories
The abelian group N ⊗M acquires a (C, A)-module structure just as long as the
endofunctors C ⊗−and −⊗A of Ab preserve (reﬂexive) coequalizers, which
they do. The rest of the bicategory structure comes easily. So from the monoidal
category (Ab, ⊗, Z) we have derived the bicategory of rings, modules and maps
of modules.
In the same way, any monoidal category (A, ⊗, I) gives rise to a bicategory
Mon(A) of monoids and modules in A, as long as A has reﬂexive coequalizers and
these are preserved by the functors A⊗−and −⊗A for all A ∈A. Generalizing,
any bicategory B gives rise to a bicategory Mon(B) of monads and modules in
B, as long as B locally has reﬂexive coequalizers and these are preserved by the
functors f ◦−and −◦f for all 1-cells f.
There are two unsatisfactory aspects to this construction.
One is the ne-
cessity of the coequalizer conditions.
The other is that homomorphisms of
monoids are conspicuous by their absence: for instance, ring homomorphisms
are not an explicit part of Mon(Ab) (although they can be recovered as those
1-cells of Mon(Ab) that have a right adjoint). The following deﬁnition for fc-
multicategories solves both problems.
Deﬁnition 5.3.1 Let C be an fc-multicategory. The fc-multicategory Mon(C)
is deﬁned as follows.
• A 0-cell of Mon(C) is an fc-multicategory map 1
- C. That is, it is a
0-cell a of C together with a horizontal 1-cell a
t- a and 2-cells
a
t
- a
t
- a
⇓µ
a
1
?
t
- a
1
?
a ========= a
⇓η
a
1
?
t
- a
1
?
satisfying the usual axioms for a monad, µ◦(µ, 1t) = µ◦(1t, µ) and µ◦(η, 1t) =
1t = µ◦(1t, η).
• A vertical 1-cell
(a, t, µ, η)
(ˆa, ˆt, ˆµ, ˆη)
?
in Mon(C) is a vertical 1-cell
a
ˆa
f
?

5.3 Monads, monoids and modules
141
in C together with a 2-cell
a
t
- a
⇓ω
ˆa
f
?
ˆt
- ˆa
f
?
such that ω◦µ = ˆµ◦(ω, ω) and ω◦η = ˆη◦f. (The notation ˆη◦f is explained
on p. 128.)
• A horizontal 1-cell (a, t, µ, η)
- (a′, t′, µ′, η′) is a horizontal 1-cell a
m-
a′ in C together with 2-cells
a
t
- a
m
- a′
⇓χ
a
1
?
m
- a′
1?
a
m
- a′
t′
- a′
⇓χ′
a
1
?
m
- a′
1?
satisfying the usual module axioms, χ◦(µ, 1m) = χ◦(1t, χ), χ◦(η, 1m) =
1m, and dually for χ′, and the ‘commuting actions’ axiom, χ′◦(χ, 1t′) =
χ◦(1t, χ′).
• A 2-cell
t0
m1 - t1
m2 -
· · ·
mn - tn
⇓
t
f
?
m
- t′
f ′
?
in Mon(C), where t stands for (a, t, µ, η), m for (m, χ, χ′), f for (f, ω), and
so on, is a 2-cell
a0
m1 - a1
m2 -
· · ·
mn - an
⇓θ
a
f
?
m
- a′
f ′
?
in C satisfying the ‘external equivariance’ axioms
θ◦(χ1, 1m2, . . . , 1mn)
=
χ◦(ω, θ)
θ◦(1m1, . . . , 1mn−1, χ′
n)
=
χ′◦(θ, ω′)
and the ‘internal equivariance’ axioms
θ◦(1m1, . . . , 1mi−2, χ′
i−1, 1mi, 1mi+1, . . . , 1mn) =
θ◦(1m1, . . . , 1mi−2, 1mi−1, χi, 1mi+1, . . . , 1mn)
for 2 ≤i ≤n.

142
Example: fc-Multicategories
• Composition and identities for both 2-cells and vertical 1-cells in Mon(C)
are just composition and identities in C.
With the obvious deﬁnition on maps of fc-multicategories, this gives a functor
Mon : fc-Multicat
- fc-Multicat.
Example 5.3.2 Our new Mon generalizes the traditional Mon in the following
sense. Let B be a bicategory satisfying the conditions on local reﬂexive coequal-
izers mentioned above, so that it is possible to construct the bicategory Mon(B)
in the traditional way. Let C be the fc-multicategory corresponding to B (Exam-
ple 5.1.5), with only trivial vertical 1-cells. Then a 0-cell of Mon(C) is a monad
in B, a horizontal 1-cell t
- t′ is a (t′, t)-module in B, and a 2-cell of the form
t0
m1 - t1
m2 -
· · ·
mn - tn
⇓
t0
1
?
m
- tn
1
?
is a map
mn ⊗tn−1 · · · ⊗t2 m2 ⊗t1 m1
- m
of (tn, t0)-modules—that is, a 2-cell in Mon(B). So if we discard the non-identity
vertical 1-cells of Mon(C) then we obtain the fc-multicategory corresponding to
Mon(B).
Example 5.3.3 Take the monoidal category (Ab, ⊗, Z) and the corresponding
fc-multicategory ΣAb (Example 5.1.8).
Then Mon(ΣAb) is Ring2, the fc-
multicategory of Example 5.1.1 in which 0-cells are rings, vertical 1-cells are
homomorphisms of rings, horizontal 1-cells are modules between rings, and 2-
cells are module maps of a suitable kind.
Example 5.3.4 Similarly, if we take the monoidal category (Set, ×, 1) then
Mon(ΣSet) is (the underlying fc-multicategory of) the weak double category
Monoid2 (Example 5.2.6).
Example 5.3.5 Take the fc-multicategory Set2 of sets, functions and spans (5.1.3).
Then a 0-cell of Mon(Set2) is a monad in Set2, that is, a small category. A
vertical 1-cell is a functor; a horizontal 1-cell is a module. A 2-cell
A0
M1 - A1
M2 -
· · ·
Mn - An
⇓θ
A
F
?
M
- A′
F ′
?
consists of a function
θa0,...,an : Mn(an−1, an) × · · · × M1(a0, a1)
- M(Fa0, F ′an)
for each a0 ∈A0, . . . , an ∈An, such that this family is natural in the ai’s. So
Mon(Set2) is Cat2, the weak double category of 5.2.5.

5.3 Monads, monoids and modules
143
This last example leads us to deﬁnitions of module and transformation for
generalized multicategories. Let T be a cartesian monad on a cartesian category
E. Recall the fc-multicategory E(T ) of 5.2.4, and consider the fc-multicategory
Mon(E(T )). A 0-cell of Mon(E(T )) is a monad in E(T ), that is, a T -multicategory,
so we write T -Multicat for Mon(E(T )). A vertical 1-cell is a map of T -multicategories.
A horizontal 1-cell A
- B will be called a (B, A)-module. To see what mod-
ules are explicitly, note that the underlying graph
B1
T B0
dom

B0
cod
-
of B is a horizontal 1-cell in E(T ), composition with which deﬁnes an endofunctor
B◦−of the category E(T )(A0, B0) of diagrams of the form
M
T A0

B0.
-
(5:7)
Moreover, the multicategory structure of B gives B◦−the structure of a monad
on E(T )(A0, B0).
Dually, the multicategory A also induces a monad −◦A on
E(T )(A0, B0), and there is a canonical isomorphism (B◦−)◦A ∼= B◦(−◦A) com-
patible with the monad structures (formally, a distributive law: 6.1.2).
So a
(B, A)-module is a diagram (5:7) in E together with maps actL : B◦M
- M
and actR : M ◦A
- M such that (M, actL) and (M, actR) are algebras for the
monads B◦−and −◦A respectively, and the following diagram commutes:
(B◦M)◦A ∼= B◦(M ◦A)
M ◦A
actL∗1A

B◦M
1B∗actR
-
M.
actL

actR
-
This deﬁnition generalizes the deﬁnition for plain multicategories (2.3). Just
as there, it also makes sense to deﬁne left and right modules for a T -multicategory:
do not take a whole span M, but only the right-hand or left-hand half.
A
left B-module is nothing other than a B-algebra.
A right A-module (or
A-coalgebra) is an object M of E/T A0 (thought of as a span
M
T A0

·
...............-
with a phantom right leg) together with a map h : M ◦A
- M making M into
an algebra for the monad −◦A on E/T A0.

144
Example: fc-Multicategories
In general, T -Multicat is not a weak double category: there is no tensor
product of modules. For to tensor modules we would need E to possess reﬂex-
ive coequalizers and T to preserve them, and although the requirement on E is
satisﬁed in almost all of the examples that we consider, the requirement on T is
not—for instance, when T = fc.
There is, however, an ‘identity’ horizontal 1-cell on each object.
Given a
T -multicategory A, this is the (A, A)-module IA whose underlying span is
A1
T A0
dom

A0
cod
-
and whose actions are both composition in A. Recalling the remarks on nat-
ural transformations in Example 5.2.5, we make the following deﬁnition. Let
A
f-
f ′- B be maps of T -multicategories. A transformation
A
f
f ′
α R

∨
B
(5:8)
of T -multicategories is a 2-cell
A
IA
- A
⇓α
B
f
?
IB
- B
f ′
?
in T -Multicat. Explicitly, a transformation f
- f ′ is a map α : A1
- B1
such that the diagrams
A1
T A0
dom

A0
cod
-
B1
α
?
T B0
T f0
?
dom

B0
f ′
0
?
cod
-
A1◦A1
B1◦B1
α∗f1

A1
comp
?
B1◦B1
f ′
1∗α
-
B1
α
?
comp

comp
-
(5:9)
commute, where the map α ∗f1 : A1◦A1
- B1◦B1 is induced by the maps
α : A1
- B1 and f1 : A1
- B1, and similarly f ′
1 ∗α.
This may come as a surprise: if A and B are ordinary categories and α a
natural transformation as in (5:8) then we would usually think of α as a map
A0
- B1, not A1
- B1. Observe, however, that α assigns to each map

5.3 Monads, monoids and modules
145
a
θ- a′ in A a map fa
αθ- f ′a′ in B, the diagonal of the naturality square
for α at θ. Since αa can be recovered as α1a for each a ∈A, it must be possible
to deﬁne a natural transformation (5:8) as a map A1
- B1 satisfying axioms.
The same goes for transformations of plain multicategories, where now αθ is
either side of the equation in Fig. 2-I (p. 61). For generalized multicategories we
also have the choice between viewing transformations as maps A0
- B1 or as
maps A1
- B1; the axioms for the A0
- B1 version can easily be worked
out (or looked up: Leinster [1999a, 1.1.1]).
For general cartesian T , suppose that we discard from the fc-multicategory
T -Multicat all of the horizontal 1-cells except for the ‘identities’ (those of the
form IA). Then we obtain a weak double category whose only horizontal 1-cells
are identities—in other words (5.2.2), a strict 2-category. Concretely: transfor-
mations can be composed vertically and horizontally, and this makes T -Multicat
into a strict 2-category.
Notes
Many fc-multicategories are weak double categories. Many fc-multicategories also have
the property that every vertical 1-cell f : a
- b gives rise canonically to cells
a ========= a
⇓
a
1
?
- b,
f
?
a ========= a
⇓
b
f
?
- a
1
?
(as is familiar in Ring2, for instance). These two properties combine to say that any
diagram
a0
m1 - a1
m2 -
· · ·
mn - an
a
f
?
a′
f′
?
has a 2-cell ﬁlling it in (canonically, up to isomorphism): the weak double category
structure provides a ﬁll-in when f and f ′ are both identities, the vertical-to-horizontal
property provides a ﬁll-in when n = 0 and one of f or f ′ is an identity, and the general
case can be built up from these special cases. The exact situation is still unclear, but
there are obvious similarities between this, the representations of plain multicategories
in 3.3, and the universal opetopic cells in 7.5.
The fc-multicategory Set[V ] of 5.1.9 appears in a diﬀerent guise in Carboni, Kasan-
gian and Walters [1987], under the name of ‘matrices’. Weak double categories have
also been studied by Grandis and Par´e [1999, 2003].

146
Example: fc-Multicategories

Chapter 6
Generalized Operads and
Multicategories: Further
Theory
The last paragraph plays on the postmodern fondness for
‘multidimensionality’ and ‘nonlinearity’ by inventing a
nonexistent ﬁeld: ‘multidimensional (nonlinear) logic’
Sokal and
Bricmont [1998]
This chapter is an assortment of topics in the theory of T -multicategories. Some
are included because they answer natural questions, some because they connect to
established concepts for classical operads, and some because we will need them
later. The reader who wants to get on to geometrically interesting structures
should skip this chapter and come back later if necessary; there are no pictures
here.
In 6.1 we ‘recall’ some categorical language: maps between monads, mates
under adjunctions, and distributive laws. This language has nothing intrinsically
to do with generalized multicategories, but it will be eﬃcient to use it in some
parts of this chapter (6.2, 6.7) and later chapters.
The ﬁrst three proper sections each recast one of the principal deﬁnitions.
In 6.2 we ﬁnd an alternative deﬁnition of generalized multicategory, which amounts
to characterizing a T -multicategory C by its free-algebra monad TC plus one small
extra piece of data. Both 6.3 and 6.4 are alternative ways of deﬁning an algebra
for a T -multicategory. The former generalizes the categorical fact that Set-valued
functors can be described as discrete ﬁbrations, and the latter the fact that a clas-
sical operad-algebra is a map into an endomorphism operad (often taken as the
deﬁnition of algebra by ‘working mathematicians’ using operads).
The next two sections are also generalizations. The free T -multicategory on
a T -graph is discussed in 6.5. Abstract as this may seem, it is crucial to the way
in which geometry arises spontaneously from category theory: witness the planar

148
Generalized Operads and Multicategories: Further Theory
trees of 2.3 and the opetopes of Chapter 7. Then we make a deﬁnition to complete
the phrase: ‘plain multicategories are to monoidal categories as T -multicategories
are to . . . ’; we call these things ‘T -structured categories’ (6.6).
So far all is generalization, but the ﬁnal two sections are genuinely new. A
choice of cartesian monad T speciﬁes the type of input shape that the operations
in a T -multicategory will have, so changing T amounts to a change of shape.
In 6.7 we show how to translate between diﬀerent shapes, in other words, how
a relation between two monads T and T ′ induces a relation between the classes
of T - and T ′-multicategories. Finally, in 6.8 we take a short look at enrichment
of generalized multicategories. As mentioned in the Introduction, there is much
more to this than one might guess, and in particular there is more than we have
room for; this is just a taste.
6.1
More on monads
To compare approaches to higher categorical structures using diﬀerent shapes or
of diﬀerent dimensions we will need a notion of map (E, T )
- (E′, T ′) between
monads. Actually, there are various such notions: lax, colax, weak and strict.
Such comparisons lead to functors between categories of structures, and to discuss
adjunctions between such functors it will be convenient to use the language of
mates (an Australian creation, of course). It will also make certain later proofs
(9.4.1, F.1.1) easier if we know a little about distributive laws, which are recipes
for gluing together two monads T , T ′ on the same category to give a monad
structure on the composite functor T ′◦T .
Nothing here is new. I learned this material from Street [1972] and Kelly
and Street [1974], although I have changed some terminology. Distributive laws
were introduced by Beck [1969]. Where Street discusses monads in an arbitrary
2-category V, we stick to the case V = CAT, since that is all we need.
Let T = (T, µ, η) be a monad on a category E and T ′ = (T ′, µ′, η′) a monad
on a category E′.
A lax map of monads (E, T )
- (E′, T ′) is a functor
Q : E
- E′ together with a natural transformation
E
T
- E
⇒
ψ
E′
Q
?
T ′ - E′
Q
?
making the diagrams
T ′2Q
T ′ψ- T ′QT
ψT- QT 2
T ′Q
µ′Q
?
ψ
- QT
Qµ
?
Q ========= Q
T ′Q
η′Q
?
ψ - QT
Qη
?

6.1 More on monads
149
commute. If (E, T )
(e
Q,e
ψ)
- (E′, T ′) is another lax map of monads then a trans-
formation (Q, ψ)
- ( eQ, eψ) is a natural transformation Q
α- eQ such that
T ′Q
ψ- QT
T ′ eQ
T ′α ?
e
ψ
- eQT
αT
?
commutes. There is a strict 2-category Mndlax whose 0-cells are pairs (E, T ),
whose 1-cells are lax maps of monad, and whose 2-cells are transformations.
Dually, if T and T ′ are monads on categories E and E′ respectively then a
colax map of monads (E, T )
- (E′, T ′) consists of a functor P : E
- E′
together with a natural transformation
E
T
- E
⇐
φ
E′
P
?
T ′ - E′
P
?
satisfying axioms dual to those for lax maps. With the accompanying notion
of transformation between colax maps of monads, we obtain another strict
2-category Mndcolax.
A weak map of monads is a lax map (Q, ψ) of monads in which ψ is an
isomorphism (or equivalently, a colax map (P, φ) in which φ is an isomorphism),
and a strict map of monads is a lax map (Q, ψ) in which ψ is the identity
(and so T ′Q = QT ).
Often E = E′ and the functor E
- E′ is the identity. A natural transfor-
mation ψ : T ′
- T commutes with the monad structures if (id, ψ) is a
lax map of monads (E, T )
- (E, T ′) or, equivalently, a colax map (E, T ′)
-
(E, T ).
A crucial property of lax maps of monads is that they induce maps between
categories of algebras: (Q, ψ) : (E, T )
- (E′, T ′) induces the functor
Q∗= (Q, ψ)∗:
ET
-
E′T ′,


T X
X
h
?


7−→








T ′QX
QT X
ψX
?
QX
Qh
?








.
(Dually, but less usefully for us, a colax map of monads (P, φ) : (E, T )
-
(E′, T ′) induces a functor ET
- E′
T ′ between Kleisli categories.) In fact we
have:

150
Generalized Operads and Multicategories: Further Theory
Lemma 6.1.1 Let T = (T, µ, η) and T ′ = (T ′, µ′, η′) be monads on categories E
and E′, respectively. Then there is a one-to-one correspondence between lax maps
of monads (E, T )
- (E′, T ′) and pairs (Q, R) of functors such that the square
ET
R - E′T ′
E
forgetful
?
Q - E′
forgetful
?
(6:1)
commutes, with a lax map (Q, ψ) corresponding to the pair (Q, Q∗).
Proof
Given (Q, ψ), the square (6:1) with R = Q∗plainly commutes. Con-
versely, take a pair (Q, R) such that (6:1) commutes. For each X ∈E, write
(T ′QT X
χX- QT X) for the image under R of the free algebra (T 2X
µX- T X),
then put
ψX = (T ′QX
T ′QηX
- T ′QT X
χX- QT X).
This deﬁnes a lax map of monads (Q, ψ).
It is easily checked that the two
processes described are mutually inverse.
2
Lax and colax maps can be related as ‘mates’. Suppose we have an adjunction
D
D′
P 6
⊣Q
?
and functors D
T- D, D′
T ′- D′. Then there is a one-to-one correspondence
between natural transformations φ and natural transformations ψ with domains
and codomains as shown:
D
T
- D
⇐
φ
D′
P
6
T ′ - D′
P
6
D
T
- D
⇒
ψ
D′
Q
?
T ′ - D′.
Q
?
This is given by
ψ
=

T ′Q
γT ′Q
- QPT ′Q
QφQ
- QT PQ
QT δ- QT

,
φ
=

PT ′ P T ′γ
- PT ′QP
P ψP- PQT P
δT P- T P

where γ and δ are the unit and counit of the adjunction. We call ψ the mate
of φ and write ψ = φ; dually, we call φ the mate of ψ and write φ = ψ. The

6.1 More on monads
151
world of mates is strictly monogamous: everybody has exactly one mate, and
your mate’s mate is you (φ = φ, ψ = ψ). All imaginable statements about mates
are true. In particular, if T and T ′ have the structure of monads then (P, φ) is a
colax map of monads if and only if (Q, φ) is a lax map of monads.
We ﬁnish by showing how to glue monads together.
Given two monads
(S, µ, η) and (S′, µ′, η′) on the same category C, how can we give the composite
functor S′◦S the structure (bµ, bη) of a monad on C? The unit is easy—
bη =

1
η′∗η- S′◦S

(6:2)
—but for the multiplication we need some extra data—
bµ =

S′◦S◦S′◦S
S′◦?◦S
- S′◦S′◦S◦S
µ′∗µ
- S′◦S

(6:3)
—and that is provided by a distributive law.
Deﬁnition 6.1.2 Let S and S′ be monads on the same category. A distributive
law λ : S◦S′
- S′◦S is a natural transformation such that (S′, λ) is a lax map
of monads S
- S and (S, λ) is a colax map of monads S′
- S′.
Lemma 6.1.3 Let λ : S◦S′
- S′◦S be a distributive law between monads
(S, µ, η) and (S′, µ′, η′) on a category C. Then the formulas (6:2) and (6:3) (with
? = λ) deﬁne a monad structure (bµ, bη) on the functor S′◦S. If the monads S and
S′ and the transformation λ are all cartesian then so too is the monad S′◦S. 2
The distributive law λ determines a lax map of monads (S′, λ) : S
- S,
hence a functor eS : CS
- CS. More incisively, we have the following.
Lemma 6.1.4 Let S and S′ be monads on a category C. Then there is a one-
to-one correspondence between distributive laws λ : S◦S′
- S′◦S and monads
eS on CS such that the forgetful functor U : CS
- C is a strict map of monads
eS
- S′:
CS
e
S- CS
C
U
?
S′- C.
U
?
If the monad S′ is cartesian then so too is the monad eS.
Proof Straightforward, using Lemma 6.1.1.
2
A distributive law S◦S′
- S′◦S therefore gives two new categories of algebras,
CS′◦S and (CS)e
S; but they are isomorphic by general principles of coherence, or
more rigorously by

152
Generalized Operads and Multicategories: Further Theory
Lemma 6.1.5 Let S and S′ be monads on a category C, let λ : S◦S′
- S′◦S
be a distributive law, and let eS be the corresponding monad on CS. Then there is
a canonical natural transformation
CS
e
S
- CS
⇒
ψ
C
U
?
S′◦S
- C.
U
?
This makes (U, ψ) into a lax map of monads eS
- S′◦S, and the induced
functor (U, ψ)∗: (CS)e
S
- CS′◦S is an isomorphism of categories.
Proof The transformation ψ is S′Uε, where ε is the counit of the free-forgetful
adjunction F ⊣U for S-algebras. Algebras for both eS and S′◦S can be described
as triples (X, h, h′) where X ∈C, h and h′ are respectively S-algebra and S′-
algebra structures on X, and the following diagram commutes:
SS′X
Sh′
- SX
S′SX
λX

S′X
S′h ?
h′
- X.
h
?
The details of the proof are, again, straightforward.
2
6.2
Multicategories via monads
Operads are meant to be regarded as algebraic theories of a special kind. Monads
are meant to be regarded as algebraic theories of a general kind. It is therefore
natural to ask whether operads can be re-deﬁned as monads satisfying certain
conditions.
We show here that the answer is nearly ‘yes’: for any cartesian monad T on
a cartesian category E, a T -operad is the same thing as a cartesian monad S on
E together with a cartesian natural transformation S
- T commuting with
the monad structures. (The transformation really is necessary, by the results
of Appendix C.)
An algebra for a T -operad is then just an algebra for the
corresponding monad S. More generally, a version holds for T -multicategories,
to be regarded as many-sorted algebraic theories.
We will need to know a little about slice categories. If E is an object of a
category E then the forgetful functor UE : E/E
- E creates pullbacks in the

6.2 Multicategories via monads
153
following strict sense: if
P
- X
Y
?
- Z
?
is a pullback square in E and (Z
- E) is a map in E then the evident square


P
E
?


-


X
E
?




Y
E
?


?
-


Z
E
?


?
in E/E is also a pullback. Hence UE reﬂects pullbacks, and if E is cartesian then
the category E/E and the functor UE are also cartesian.
Proposition 6.2.1 Let T be a cartesian monad on a cartesian category E, and
let C be a T -multicategory. Then the induced monad TC on E/C0 is cartesian,
and there is a cartesian natural transformation
E/C0
TC- E/C0
⇐
πC
E
UC0
?
T
- E
UC0
?
such that (UC0, πC) is a colax map of monads (E/C0, TC)
- (E, T ).
Proof For X = (X
p- C0) ∈E/C0, let πC
X be the map in the diagram
TCX
 @
T X
πC
X

C1
-
T C0
dom

T p
-
C0
cod
-
deﬁning TCX. It is easy to check that πC is natural and that (UC0, πC) forms a
colax map of monads. Using the Pasting Lemma (1.1.1) it is also easy to check
that πC is a cartesian natural transformation, and from this that TC is a cartesian
monad.
2

154
Generalized Operads and Multicategories: Further Theory
The proposition says that any (E, T )-multicategory C gives rise to a triple
(E, S, π) = (C0, TC, πC) where
a. E is an object of E
b. S is a cartesian monad on E/E
c. π is a cartesian natural transformation
E/E
S - E/E
⇐
π
E
UE
?
T
- E
UE
?
such that (UE, π) is a colax map of monads S
- T .
It turns out that this captures exactly what a T -multicategory is: every triple
(E, S, π) satisfying these three conditions arises from a T -multicategory, and the
whole multicategory structure of C can be recovered from the associated triple
(C0, TC, πC). We will prove this in a moment. In the case of T -operads, assuming
that E has a terminal object 1, this says that a T -operad is a pair (S, π) where S
is a cartesian monad on E and π : S
- T is a cartesian natural transformation
commuting with the monad structures—just as promised in the introduction to
this section.
In particular, the monad TP on Set induced by a plain operad P is always
cartesian, which gives a large class of cartesian monads on Set. (Not all carte-
sian monads on Set are of this type, but all strongly regular theories are: see
Appendix C.) The natural transformation πP induces the obvious functor from
Monoid to Alg(P).
We now give the alternative deﬁnition of T -multicategory.
Notation:
if
E
e- eE is a map in a category E then e! is the functor E/E
- E/ eE
given by composition with e.
Deﬁnition 6.2.2 Let T be a cartesian monad on a cartesian category E. Deﬁne
a category T -Multicat′ as follows:
objects are triples (E, S, π) as in (a)–(c) above
maps (E, S, π)
- ( eE, eS, eπ) are pairs (e, φ) where e : E
- eE is a map in E
and
E/E
S - E/E
⇐
φ
E/ eE
e!
?
e
S
- E/ eE
e!
?

6.2 Multicategories via monads
155
is a natural transformation such that (e!, φ) is a colax map of monads
S
- eS and
E/E
S - E/E
⇐
φ
E/ eE
e!
?
e
S - E/ eE
e!
?
⇐
eπ
E
Ue
E
?
T
- E
Ue
E
?
=
E/E
S - E/E
⇐
π
E
UE
?
T
- E.
UE
?
(6:4)
The natural transformation φ in the deﬁnition of map is automatically cartesian:
this follows from equation (6:4), the fact that π and eπ are cartesian, the fact
that Ue
E reﬂects pullbacks, and the Pasting Lemma (1.1.1). The functor e! is also
cartesian.
Proposition 6.2.3 For any cartesian monad T on a cartesian category E, there
is an equivalence of categories
T -Multicat ≃T -Multicat′.
Proof A T -multicategory C gives rise to an object (C0, TC, πC) of T -Multicat′,
as in Proposition 6.2.1. Conversely, take an object (E, S, π) of T -Multicat′, and
deﬁne
C0
=
E,
(C1
cod- C0)
=
S(C0
1- C0),
dom
=
π1C0 : C1
- T C0.
This speciﬁes a T -graph C, and there is a T -multicategory structure on C given
by
comp = µ1C0 ,
ids = η1C0 .
(It takes a little work to see that these make sense.)
The associativity and
identity axioms for the multicategory follow from the coherence axioms for the
colax map of monads (UE, π). It is straightforward to check that this extends to
an equivalence of categories.
2
Corollary 6.2.4 Let T be a cartesian monad on a category E with ﬁnite limits.
Then T -Operad is equivalent to the category T -Operad′ in which
• an object is a cartesian monad S on E together with a cartesian natural
transformation S
- T commuting with the monad structures

156
Generalized Operads and Multicategories: Further Theory
• a map (S, π)
- (eS, eπ) is a cartesian natural transformation φ : S
-
eS commuting with the monad structures and satisfying eπ◦φ = π.
Proof Restrict the proof of 6.2.3 to the case C0 = E = 1.
2
Since the monad TC arising from a T -multicategory C is cartesian, it makes
sense to ask what TC-multicategories are. The answer is simple:
Corollary 6.2.5 Let T be a cartesian monad on a cartesian category E, and let
C be a T -multicategory. Then there is an equivalence of categories
TC-Multicat ≃T -Multicat/C,
and if a TC-multicategory D corresponds to a T -multicategory D over C then
Alg(D) ∼= Alg(D).
Proof For the ﬁrst part, it is enough to show that
TC-Multicat′ ≃T -Multicat′/(C0, TC, πC).
An object of the right-hand side is an object (E, S, π) of T -Multicat′ together
with a map E
e- C0 and a cartesian natural transformation φ such that (e!, φ)
is a colax map of monads and π is the pasting of φ and πC. In other words, it
is just an object (E
e- C0, S, φ) of TC-Multicat′. The ﬁrst part follows; and
for the second part, Alg(D) ∼= (E/E)S ∼= Alg(D).
2
This explains many of the examples in 4.2 and 4.3 (generalized multicategories
and their algebras). Take, for instance, 4.2.13 and 4.3.7, where we ﬁxed a monoid
M and considered (M × −)-multicategories and their algebras. Write T for the
free monoid monad on Set, and let P be the T -operad (= plain operad) with
P(1) = M and P(n) = ∅for n ̸= 1. Then TP = (M × −), so by Corollary 6.2.5
an (M × −)-multicategory is a plain multicategory over P. Evidently a plain
multicategory over P can only have unary arrows, so in fact we have
(M × −)-Multicat ≃Cat/M.
Moreover, the second part of 6.2.5 tells us that if an (M × −)-multicategory
corresponds to an object (C
φ- M) of Cat/M then its category of algebras is
just Alg(C) ≃[C, Set], as claimed in 4.3.7.
This reformulation of T -multicategories in terms of monads and colax maps
between them has a dual, using lax maps. As we saw in 6.1, colax and lax maps
can be related using mates. The adjunctions involved are
E
E/E,
UE
6
⊣(−×E)
?
E/ eE
E/E.
e! 6
⊣e∗
?
(6:5)

6.3 Algebras via ﬁbrations
157
In the ﬁrst adjunction E is an object of a category E with ﬁnite limits, and the
right adjoint to the forgetful functor UE sends X ∈E to (X ×E
pr2- E) ∈E/E.
In the second e : E
- eE is a map in E, and the right adjoint to e! is the
functor e∗deﬁned by pullback along e. Actually, the ﬁrst is just the second in
the case eE = 1.
Deﬁnition 6.2.6 Let T be a cartesian monad on a category E with ﬁnite limits.
The category T -Multicat′′ is deﬁned as follows:
objects are triples (E, S, ρ) where E ∈E, S is a cartesian monad on E/E, and
ρ is a cartesian natural transformation such that (−× E, ρ) is a lax map of
monads T
- S
maps (E, S, ρ)
- ( eE, eS, eρ) are pairs (e, ψ) where e : E
- eE in E and ψ is
a cartesian natural transformation such that (e∗, ψ) is a lax map of monads
eS
- S and an equation dual to (6:4) in Deﬁnition 6.2.2 holds.
Proposition 6.2.7 For any cartesian monad T on a category E with ﬁnite lim-
its, there is an isomorphism of categories
T -Multicat′′ ∼= T -Multicat′.
Proof
Just take mates throughout. All the categories, functors and natural
transformations involved in the adjunctions (6:5) are cartesian, so under these
adjunctions, the mate of a cartesian natural transformation is also cartesian. 2
It follows that T -Multicat′′ ≃T -Multicat. So given any T -multicategory
C, there is a corresponding lax map of monads (−× C0, ρC) : T
- TC, and
this induces a functor ET
- Alg(C). For instance, any monoid M yields
an algebra for any plain multicategory C; concretely, this algebra X is given by
X(a) = M for all objects a of C and by X(θ) = (n-fold multiplication) for all n-
ary maps θ in C. Similarly, any map C
- eC of T -multicategories corresponds
to a lax map of monads Te
C
- TC, and this induces the functor Alg( eC)
-
Alg(C) that we constructed directly at the end of Chapter 4.
6.3
Algebras via ﬁbrations
For a small category C, the functor category [C, Set] is equivalent to the category
of discrete opﬁbrations over C, as we saw in 1.1. Here we extend this result from
categories to generalized multicategories.
By deﬁnition (p. 9), a functor g : D
- C between ordinary categories is a
discrete opﬁbration if for each object b of D and arrow g(b)
θ- a in C, there
is a unique arrow b
χ- b′ in D such that g(χ) = θ. Another way of saying this

158
Generalized Operads and Multicategories: Further Theory
is that in the diagram
D1
D0
dom

D0
cod
-
C1
g1
?
C0
g0
?
dom

C0
g0
?
cod
-
depicting g, the left-hand ‘square’ is a pullback.
Generalizing to any cartesian monad T on any cartesian category E, let us
call a map D
g- C of T -multicategories a discrete opﬁbration if the square
T D0 
dom D1
T C0
T g0
?

dom C1
g1
?
is a pullback. We obtain, for any T -multicategory C, the category DOpﬁb(C)
of discrete opﬁbrations over C: an object is a discrete opﬁbration with codo-
main C, and a map from (D
g- C) to (D′
g′- C) is a map D
f- D′
of T -multicategories such that g′◦f = g. Such an f is automatically a discrete
opﬁbration too, by the Pasting Lemma (1.1.1).
Theorem 6.3.1 Let T be a cartesian monad on a cartesian category E, and let
C be a T -multicategory. Then there is an equivalence of categories
DOpﬁb(C) ≃Alg(C).
Proof
A C-algebra is an algebra for the monad TC on E/C0, which sends an
object X = (X
p- C0) of E/C0 to the boxed composite in the diagram
TCX
 @
T X
πX

C1
νX
-
T C0
dom

T p
-
C0,
cod
-
    @
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
and therefore consists of an object (X
p- C0) of E/C0 together with a map
h : TCX
- X over C0, satisfying axioms.

6.3 Algebras via ﬁbrations
159
So, given a C-algebra (X
p- C0, h) we obtain a commutative diagram
TCX
T X
πX

X
h
-
C1
νX
?
T C0
T p
?
dom

C0,
p
?
cod
-
the left-hand half of which is a pullback square. The top part of the diagram
deﬁnes a T -graph D, and there is a map g : D
- C deﬁned by g0 = p and
g1 = νX. With some calculation we see that D is naturally a T -multicategory
and g a map of T -multicategories. So we have constructed from the C-algebra
X a discrete opﬁbration over C.
This deﬁnes a functor from Alg(C) to DOpﬁb(C), which is easily checked
to be full, faithful and essentially surjective on objects.
2
Let us look more closely at the T -multicategory D corresponding to a C-
algebra h = (X
p- C0, h). Generalizing the terminology for ordinary categories
(p. 8), we call D the multicategory of elements of h and write D = C/h.
Proposition 6.3.2 Let T be a cartesian monad on a cartesian category E, let
C be a T -multicategory, and let h be a C-algebra. Then there is an isomorphism
of categories
DOpﬁb(C/h) ∼= DOpﬁb(C)/h.
Proof Follows from the deﬁnition of DOpﬁb, using the observation above that
maps in DOpﬁb(C) are automatically discrete opﬁbrations.
2
Hence Alg(C/h) ≃Alg(C)/h, generalizing Proposition 1.1.7. In fact, this equiv-
alence is an isomorphism. To see this, recall from 4.3.14 the process of slicing a
monad by an algebra: for any monad S on a category F and any S-algebra k,
there is a monad S/k on D with the property that FS/k ∼= FS/k.
Proposition 6.3.3 Let T be a cartesian monad on a cartesian category E, let C
be a T -multicategory, and let h be a C-algebra. Then there is an isomorphism of
monads TC/h ∼= TC/h and an isomorphism of categories Alg(C/h) ∼= Alg(C)/h.
Proof The ﬁrst assertion is easily veriﬁed, and the second follows immediately.
2
As an example, let C be the terminal T -multicategory 1. We have T1 ∼= T
and so Alg(1) ∼= Alg(T ) (4.3.8). Given a T -algebra h = (T X
h- X), we
therefore obtain a T -multicategory 1/h. Plausibly enough, this is the same as
the T -multicategory h+ of 4.2.22, with graph
T X 1
T X
h- X.

160
Generalized Operads and Multicategories: Further Theory
So by the results above, Th+ = T1/h ∼= T/h and Alg(h+) = Alg(1/h) ∼=
Alg(T )/h; compare 4.3.14.
We could also deﬁne opalgebras for a T -multicategory C as discrete brations
over C: that is, as maps D
g- C of T -multicategories such that the right-hand
square
D1
cod- D0
C1
g1
? cod- C0
g0
?
of the diagram depicting g is a pullback. In the case of ordinary categories C, an
opalgebra for C is a functor Cop
- Set. In the case of plain multicategories
C, an opalgebra is a family (X(a))a∈C0 of sets together with a function
X(a)
- X(a1) × · · · × X(an)
for each map a1, . . . , an
- a in C, satisfying the obvious axioms. Note that
these are diﬀerent from the ‘coalgebras’ or ‘right modules’ mentioned in 2.3
and 5.3; we do not discuss them any further.
6.4
Algebras via endomorphisms
An action of a monoid on a set is a homomorphism from the monoid to the
monoid of endomorphisms of the set.
A representation of a Lie algebra is a
homomorphism from it into the Lie algebra of endomorphisms of some vector
space. An algebra for a plain operad is often deﬁned as a map from it into the
operad of endomorphisms of some set (2.2.8). Here we show that algebras for
generalized multicategories can be described in the same way, assuming some
mild properties of the base category E.
First recall from 2.1.16 what happens for plain multicategories: given any
family (X(a))a∈E of sets, there is an associated plain multicategory End(X)
with object-set E and with
(End(X))(a1, . . . , an; a) = Set(X(a1) × · · · × X(an), X(a)),
(6:6)
and if C is a plain multicategory with object-set C0 then a C-algebra amounts to a
family (X(a))a∈C0 of sets together with a map C
- End(X) of multicategories
leaving the objects unchanged.
To extend this to generalized multicategories we need to rephrase the deﬁni-
tion of End(X). Let T be the free monoid monad on Set. Recall that given a
set E, a family (X(a))a∈E amounts to an object X
p- E of Set/E. Then note
that X(a1) × · · · × X(an) is the ﬁbre over (a1, . . . , an) in the map T X
T p- T E,
or equivalently that it is the ﬁbre over ((a1, . . . , an), a) in the map T X ×E
T p×1
-
T E × E. On the other hand, X(a) is the ﬁbre over ((a1, . . . , an), a) in the map

6.4 Algebras via endomorphisms
161
T E × X
1×p- T E × E. So if we deﬁne objects
G1(X) =


T X × E
T E × E
T p×1
?

,
G2(X) =


T E × X
T E × E
1×p
?


(6:7)
of the category Set/(T E × E), then (6:6) says that the underlying T -graph of
the multicategory End(X) is the exponential G2(X)G1(X).
It is now clear what the deﬁnition of endomorphism multicategory in the
general case must be. Let T be a cartesian monad on a cartesian category E.
Assume further that E is locally cartesian closed: for each object D of E, the
slice category E/D is cartesian closed (has exponentials). This is true when E
is a presheaf category, as in the majority of our examples. (For the deﬁnition
of cartesian closed, see, for instance, Mac Lane [1971, IV.6]. For a more full
account, including a proof that presheaf categories are cartesian closed, see Mac
Lane and Moerdijk [1992, I.6]; our Proposition 1.1.7 then implies that each slice
is cartesian closed.) Given E ∈E, deﬁne functors G1, G2 : E/E
- E/(T E×E)
by the formulas of (6:7) above.
The short story is that for any X ∈E/E, there is a natural T -multicategory
structure on the T -graph End(X) = G2(X)G1(X), and that if C is any T -
multicategory then a C-algebra amounts to an object X of E/C0 together with
a map C
- End(X) of T -multicategories ﬁxing the objects.
Here is the long story. Given T and E as above and E ∈E, deﬁne a functor
Hom :
(E/E)op × E/E
-
E/(T E × E)
(X, Y )
7−→
G2(Y )G1(X).
Consider also the functor
E/(T E × E) × E/E
- E/E
sending a pair
C =



C1
	
  dom
@@
cod
R
T E
E


,
X =


X
E
p
?


to the boxed diagonal in the pullback diagram
C◦X
 @
T X
πX

C1
νX
-
T E
dom

T p
-
E.
cod
-
    @
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
@
This functor is written more shortly as (C, X) 7−→C◦X; of course, when C has
the structure of a T -multicategory, we usually write C◦−as TC.

162
Generalized Operads and Multicategories: Further Theory
Proposition 6.4.1 Let T be a cartesian monad on a cartesian, locally cartesian
closed category E, and let E be an object of E. Then there is an isomorphism
E
T E × E (C, Hom(X, Y )) ∼=
E
E (C◦X, Y )
(6:8)
natural in C ∈E/(T E × E) and X, Y ∈E/E.
Proof Write X = (X
p- E) and Y = (Y
q- E). Product in E/(T E ×E) is
pullback over T E × E in E, so the left-hand side of (6:8) is naturally isomorphic
to
E
T E × E (C ×T E×E G1(X), G2(Y )),
where C ×T E×E G1(X)
- T E × E is the diagonal of the pullback square
C ×T E×E G1(X)
- C1
T X × E
?
T p×1- T E × E.
(dom,cod)
?
But by an easy calculation, we also have a pullback square
C◦X
νX
- C1
T X × E
(πX,cod◦νX)
?
T p×1- T E × E,
(dom,cod)
?
so in fact an element of the left-hand side of (6:8) is a map C◦X
- G2(Y ) in
E/(T E × E). This is a map C◦X
- T E × Y in E such that
C◦X
- T E × Y
T E × E
1×q

(dom◦νX,cod◦νX)
-
commutes, and this in turn is a map C◦X
- Y in E/E.
2
Next observe that E/(T E × E) is naturally a monoidal category: it is the
full sub-bicategory of E(T ) whose only object is E. Tensor product of objects of
E/(T E × E) is composition ◦of 1-cells in E(T ), and a monoid in E/(T E × E) is
a T -multicategory C with C0 = E. The functor
E/(T E × E) × E/E
-
E/E
(C, X)
7−→
C◦X
then becomes an action of the monoidal category E/(T E × E) on the category
E/E, in the sense of 1.2.12: there are coherent natural isomorphisms
D◦(C◦X)
∼- (D◦C)◦X,
X
∼- 1E◦X
for C, D ∈E/(T E × E), X ∈E/E.

6.5 Free multicategories
163
Proposition 6.4.2 Let T , E and E be as in Proposition 6.4.1. For each X ∈
E/E, the T -graph End(X) = Hom(X, X) naturally has the structure of a T -
multicategory.
Proof We have to deﬁne a composition map End(X)◦End(X)
- End(X).
First let evX : End(X)◦X
- X be the map corresponding under Proposi-
tion 6.4.1 to the identity End(X)
- Hom(X, X). Then deﬁne composition
to be the map corresponding under 6.4.1 to the composite
End(X)◦End(X)◦X
1∗evX
- End(X)◦X
evX- X.
The deﬁnition of identities is similar but easier. The associativity and identity
axioms follow from the axioms for an action of a monoidal category (1.2.12). 2
We can now express the alternative deﬁnition of algebra. Given E and T as
above and a T -multicategory C, let Alg′(C) be the category in which
objects are pairs (X, h) where X ∈E/C0 and h : C
- End(X) is a homo-
morphism of monoids in E/(T C0 × C0)
maps (X, h)
- (Y, k) are maps f : X
- Y in E/C0 such that
C
h
- Hom(X, X)
Hom(Y, Y )
k
?
Hom(f,1)
- Hom(X, Y )
Hom(1,f)
?
commutes.
(A homomorphism between monoids in E/(T C0 × C0) is just a map f between
the corresponding multicategories such that f0 : C0
- C0 is the identity.)
Theorem 6.4.3 Let T be a cartesian monad on a cartesian, locally cartesian
closed category E. Let C be a T -multicategory. Then there is an isomorphism of
categories Alg′(C) ∼= Alg(C).
Proof
Let X ∈E/C0. Proposition 6.4.1 in the case Y = X gives a bijection
between T -graph maps h : C
- End(X) and maps h : TC(X) = C◦X
-
X in E/C0. Under this correspondence, h is a homomorphism of monoids if and
only if h is an algebra structure on X. So we have a bijection between the objects
of Alg′(C) and those of Alg(C). The remaining checks are straightforward.
2
6.5
Free multicategories
Any directed graph freely generates a category: objects are vertices and maps
are chains of edges. More generally, any ‘graph’ in which each ‘edge’ has a ﬁnite

164
Generalized Operads and Multicategories: Further Theory
sequence of inputs and a single output freely generates a plain multicategory, as
explained in 2.3: objects are vertices and maps are trees of edges. In this short
section we extend this to generalized multicategories.
The construction for plain multicategories involves an inﬁnite recursive pro-
cess, so we cannot hope to generalize to arbitrary cartesian E and T —after all, the
category E being cartesian only means that it admits certain ﬁnite limits. There
is, however, a class of cartesian categories E and a class of cartesian monads T for
which the free (E, T )-multicategory construction is possible, the so-called suit-
able categories and monads. The deﬁnition of suitability is quite complicated,
but fortunately can be treated as a black box: all the properties of suitable
monads that we need are stated in this section, and the details are conﬁned to
Appendix D.
First, we have a good stock of suitable categories and monads:
Theorem 6.5.1 Any presheaf category is suitable. Any ﬁnitary cartesian monad
on a cartesian category is suitable.
A functor is said to be ﬁnitary if it preserves ﬁltered colimits (themselves deﬁned
in Mac Lane [1971, IX.1]); a monad (T, µ, η) is said to be ﬁnitary if the functor
T is ﬁnitary. In almost all of the examples in this book, T is a ﬁnitary monad
on a presheaf category.
Second, suitability is a suﬃcient condition for the existence of free multicat-
egories:
Theorem 6.5.2 Let T be a suitable monad on a suitable category E. Then the
forgetful functor
(E, T )-Multicat
- E+ = (E, T )-Graph
has a left adjoint, the adjunction is monadic, and if T + is the induced monad on
E+ then both T + and E+ are suitable.
Example 6.5.3 The category of sets and the identity monad are suitable (6.5.1).
In this case Theorem 6.5.2 tells us that there is a free category monad fc on the
category of directed graphs, and that it is suitable. In particular it is cartesian,
so it makes sense to talk about fc-multicategories, as we did in Chapter 5.
Taking the free category on a directed graph leaves the set of objects (ver-
tices) unchanged, and the corresponding fact for generalized multicategories is
expressed in a variant of the theorem. Notation: if E is an object of E then
(E, T )-MulticatE is the subcategory of (E, T )-Multicat whose objects C sat-
isfy C0 = E and whose morphisms f satisfy f0 = 1E. Observe that E/(T E × E)
is the category of T -graphs with ﬁxed object-of-objects E.
Theorem 6.5.4 Let T be a suitable monad on a suitable category E, and let
E ∈E. Then the forgetful functor
(E, T )-MulticatE
- E+
E = E/(T E × E)
has a left adjoint, the adjunction is monadic, and if T +
E is the induced monad on
E+
E then both T +
E and E+
E are suitable.

6.6 Structured categories
165
Example 6.5.5 The free monoid monad on the category of sets is suitable,
by 6.5.1, hence the free plain operad monad on Set/N is also suitable, by 6.5.4.
In particular it is cartesian, as claimed in 4.1.11.
In both examples the theorems were used to establish that T + and E+, or
T +
E and E+
E , were cartesian (rather than suitable). We will use the full iterative
strength in 7.1 to construct the ‘opetopes’.
For technical purposes later on, we will need a reﬁned version of these results.
Wide pullbacks are deﬁned on p. 309.
Proposition 6.5.6 If E is a presheaf category and the functor T preserves wide
pullbacks then the same is true of E+ and T + in Theorem 6.5.2, and of E+
E and
T +
E in Theorem 6.5.4. Moreover, if T is ﬁnitary then so are T + and T +
E .
6.6
Structured categories
Any monoidal category has an underlying plain multicategory. Here we meet ‘T -
structured categories’, for any cartesian monad T , which bear the same relation
to T -multicategories as strict monoidal categories do to plain multicategories. At
the end we brieﬂy consider the non-strict case.
A strict monoidal category is a monoid in Cat, or, equivalently, a category
in Monoid. This makes sense because the category Monoid is cartesian. More
generally, if T is a cartesian monad on a cartesian category E then the category
ET of algebras is also cartesian (since the forgetful functor ET
- E creates
limits), so the following deﬁnition makes sense:
Deﬁnition 6.6.1 Let T be a cartesian monad on a cartesian category E. Then a
T -structured category is a category in ET , and we write T -Struc or (E, T )-Struc
for the category Cat(ET ) of T -structured categories.
A T -structured category is, incidentally, a generalized multicategory:
T -Struc ∼= (ET , id)-Multicat
where id is the identity monad.
Example 6.6.2 For any cartesian category E we have
(E, id)-Struc ∼= (E, id)-Multicat ∼= Cat(E).
Example 6.6.3 If T is the free monoid monad on the category E of sets then
T -Struc is the category StrMonCatstr of strict monoidal categories and strict
monoidal functors.
For an alternative deﬁnition, lift T to a monad Cat(T ) on Cat(E), then
deﬁne a T -structured category as an algebra for Cat(T ).
This is equivalent;
more precisely, there is an isomorphism of categories
Cat(ET ) ∼= Cat(E)Cat(T ).

166
Generalized Operads and Multicategories: Further Theory
In the plain case Cat(T ) is the free strict monoidal category monad on Cat(Set) =
Cat, so algebras for Cat(T ) are certainly the same as T -structured categories.
Example 6.6.4 Let T be the monad on Set corresponding to a strongly regular
algebraic theory, as in 4.1.6. It makes sense to take models of such a theory in
any category possessing ﬁnite products. A T -structured category is an algebra
for Cat(T ), which is merely a model of the theory in Cat.
Example 6.6.5 A speciﬁc instance is the monad T = (1 + −) on Set corre-
sponding to the theory of pointed sets (4.1.9). Then a T -structured category is a
category A together with a functor from the terminal category 1 into A; in other
words, it is a category A with a distinguished object.
Example 6.6.6 The principle described in 6.6.4 for ﬁnite product theories holds
equally for ﬁnite limit theories. For instance, if T is the free plain operad monad
on E = SetN (as in 4.1.11) then a T -structured category is an operad in Cat, that
is, a Cat-operad (p. 43). So we now have three descriptions of Cat-operads: as
operads in Cat, as S-operads where S is the free strict monoidal category monad
on Cat (4.2.17), and as T -structured categories.
Example 6.6.7 When T is the free strict ω-category monad on the category of
globular sets (4.1.18), a T -structured category is what has been called a ‘strict
monoidal globular category’ (Street [1998, §1] or Batanin [1998a, §2]).
Example 6.6.8 Take the free category monad fc on the category E of directed
graphs (Chapter 5). Then an fc-structured category is a category in Efc ∼= Cat,
that is, a strict double category.
Every strict monoidal category A has an underlying plain multicategory UA,
and every plain multicategory C generates a free strict monoidal category FC,
giving an adjunction F ⊣U (2.3). The same applies for generalized multicatego-
ries. Any T -structured category A has an underlying T -multicategory UA, whose
graph is given by composing along the upper slopes of the pullback diagram
(UA)1
 @
T A0

A1
-
A0
dom

h0
-
A0
cod
-
in which h0 : T A0
- A0 is the T -algebra structure on A0. Conversely, the
free T -structured category FC on a T -multicategory C has graph
T C1
T 2C0
T dom

T C0
µC0

T C0
T cod
-

6.6 Structured categories
167
and the T -algebra structure on (FC)i = T Ci is µCi (i = 0, 1). We then have the
desired adjunction
T -Struc
T -Multicat.
F 6
⊣U
?
(6:9)
Example 6.6.9 Consider once more the free monoid monad T on E = Set.
Take the terminal plain multicategory 1, which has graph
N 1
N
!- 1.
Then F1 is a strict monoidal category with graph
N +
T N
T !- N.
The objects of F1 are the natural numbers and a map m
- n in F1 is a
sequence (m1, . . . , mn) of natural numbers such that m1 +· · ·+mn = m. So F1
is the strict monoidal category D of (possibly empty) ﬁnite totally ordered sets,
with addition as tensor and 0 as unit. This is also suggested by diagram (2:9)
(p. 57).
Example 6.6.10 Any object K of a cartesian category K generates a category
DK in K, the discrete category on K, uniquely determined by its underlying
graph
K 1
K
1- K.
In particular, if h = (T X
h- X) is an algebra for some cartesian monad T
then Dh is a T -structured category and UDh is a T -multicategory with graph
T X 1
T X
h- X.
So UDh is the T -multicategory h+ discussed in Example 4.2.22, and the triangle
of functors
ET
D - T -Struc
T -Multicat
U
?
( )+
-
commutes up to natural isomorphism.
I have tried to emphasize that multicategories are truly diﬀerent from monoi-
dal categories (as well as providing a more natural language in many situations).
This is borne out by the fact that the functor U : StrMonCatstr
- Multicat
is far from an equivalence: it is faithful, but neither full (2.1.10) nor essentially
surjective on objects (p. 37).
There is, however, a ‘representation theorem’ saying that every T -multicategory
embeds fully in some T -structured category. In particular, every plain multicat-
egory is a full sub-multicategory of the underlying multicategory of some strict

168
Generalized Operads and Multicategories: Further Theory
monoidal category (2.1.4). I do not know of any use for the theorem; it does not
reduce the study of T -multicategories to the study of T -structured categories any
more than the Cayley Representation Theorem reduces the study of ﬁnite groups
to the study of the symmetric groups. I therefore leave the proof as an exercise.
The precise statement is as follows.
Deﬁnition 6.6.11 Let T be a cartesian monad on a cartesian category E. A
map f : C
- C′ of T -multicategories is full and faithful if the square
C1
(dom,cod)
- T C0 × C0
C′
1
f1 ?
(dom,cod)
- T C′
0 × C′
0
T f0×f0
?
is a pullback.
Proposition 6.6.12 Let T be a cartesian monad on a cartesian category E, and
consider the adjunction of (6:9) (p. 167). For each T -multicategory C, the unit
map C
- UFC is full and faithful.
2
We ﬁnish with two miscellaneous thoughts.
First, we have been considering generalizations of plain multicategories, which
are structures whose operations are ‘many in, one out’.
But in 2.3 we also
considered PROs (and their symmetric cousins, PROPs), whose operations are
‘many in, many out’. A PRO consists of a set S (the objects, or ‘colours’, often
taken to have only one element) and a strict monoidal category whose underlying
monoid of objects is the free monoid on S.
The generalization to arbitrary
cartesian monads T on cartesian categories E is clear: a T -PRO should be deﬁned
as a pair (S, A) where S ∈E and A is a T -structured category whose underlying
T -algebra of objects is the free T -algebra on S. We will not do anything with
this deﬁnition, but see 7.6 for further discussion of ‘many in, many out’.
Second, if strict monoidal categories generalize to T -structured categories,
what do weak monoidal categories generalize to? One answer comes from real-
izing that the category Cat(E) has the structure of a strict 2-category and the
monad Cat(T ) the structure of a strict 2-monad. We can then deﬁne a weak
T -structured category to be a weak algebra for this 2-monad, and indeed do
the same in the lax case. In particular, if T is the free plain operad monad on
SetN (6.6.6) then a weak T -structured category is like a Cat-operad, but with
the operadic composition only obeying associativity and unit laws up to coher-
ent isomorphism. For example, let P(n) be the category of Riemann surfaces
whose boundaries are identiﬁed with the disjoint union of (n + 1) copies of S1,
and deﬁne composition by gluing: then P forms a weak T -structured category.
Compare 2.2.12 where, not having available the reﬁned language of generalized
multicategories, we had to quotient out by isomorphism and so lost (for instance)
any information about automorphisms of the objects. We do not, however, pur-
sue weak structured categories any further in this book.

6.7 Change of shape
169
6.7
Change of shape
To do higher-dimensional category theory we are going to want to move between
n-categories and (n+1)-categories and ω-categories, between globular and cubical
and simplicial structures, and so on. In Chapter 9 we will see that a weak n-
category can be deﬁned as an algebra for a certain T(n)-operad, where T(n) is the
free strict n-category monad on the category of n-globular sets. So if we want to
be able to relate n-categories to (n+1)-categories, for instance, then we will need
some way of relating T(n)-operads to T(n+1)-operads and some way of relating
their algebras. In this section we set up the supporting theory: in other words,
we show what happens to T -multicategories and their algebras as the monad T
varies.
Formally, we expect the assignment (E, T ) 7−→(E, T )-Multicat to be functo-
rial in some way. We saw in 6.1 that there are notions of lax, colax, weak, and
strict maps of monads, some of which are special cases of others, and we will soon
see that a map (E, T )
- (E′, T ′) of any one of these types induces a functor
(E, T )-Multicat
- (E′, T ′)-Multicat.
First we need some terminology. A lax map of monads (Q, ψ) : (E, T )
-
(E′, T ′) is cartesian if the functor Q is cartesian (but note that the natural
transformation ψ need not be cartesian). Cartesian monads, cartesian lax maps
of monads, and transformations form a sub-2-category CartMndlax of Mndlax.
Dually, a colax map of monads (P, φ) is cartesian if the functor P and the nat-
ural transformation φ are cartesian. Cartesian monads, cartesian colax maps of
monads, and transformations form a sub-2-category CartMndcolax of Mndcolax.
These deﬁnitions appear haphazard, with natural transformations required to
be cartesian, or not, at random. I can justify this only pragmatically: they are
the conditions required to make the following constructions work.
The main constructions are as follows. Let (Q, ψ) : (E, T )
- (E′, T ′) be a
cartesian lax map of cartesian monads. Then there is an induced functor
Q∗= (Q, ψ)∗: (E, T )-Multicat
- (E′, T ′)-Multicat
sending an (E, T )-multicategory C to the (E′, T ′)-multicategory Q∗C whose un-
derlying graph is given by composing along the upper slopes of the pullback
diagram
(Q∗C)1
 @
	
  @@
R
T ′QC0
QC1
@@
ψC0R
	
  Qdom
@@
Qcod
R
QT C0
QC0 = (Q∗C)0
and whose composition and identities are deﬁned in an evident way. Dually, let
(P, φ) : (E, T )
- (E′, T ′) be a cartesian colax map of cartesian monads. Then
there is an induced functor
P∗= (P, φ)∗: (E, T )-Multicat
- (E′, T ′)-Multicat

170
Generalized Operads and Multicategories: Further Theory
sending an (E, T )-multicategory C to the (E′, T ′)-multicategory P∗C with under-
lying graph
PC1 = (P∗C)1
	
  P dom
@
@
@
@
@
P cod
R
PT C0
	
  φC0
T ′PC0
PC0 = (P∗C)0.
Note that (Q∗C)0 = Q(C0) and (P∗C)0 = P(C0), so if Q or P preserves all ﬁnite
limits then Q∗or P∗restricts to a functor
(E, T )-Operad
- (E′, T ′)-Operad
between categories of operads.
After ﬁlling in all the details we obtain two maps of strict 2-categories,
CartMndlax
- CAT,
CartMndcolax
- CAT,
both deﬁned on objects by (E, T ) 7−→(E, T )-Multicat. The ﬁrst is deﬁned using
pullbacks, so is only a weak functor; the second is strict. These dual functors
agree where they intersect: the 2-categories CartMndlax and CartMndcolax
‘intersect’ in the 2-category CartMndwk of cartesian monads, cartesian weak
maps of monads, and transformations, and the square
CartMndwk
⊂
- CartMndcolax
CartMndlax
?
∩
- CAT
?
commutes up to natural isomorphism.
(A cartesian weak map of monads
is a cartesian lax map (Q, ψ) in which ψ is a natural isomorphism; then ψ is
automatically cartesian.)
Example 6.7.1 Let Q : D
- D′ be a cartesian functor between cartesian
categories. Then (Q, id) : (D, id)
- (D′, id) is a strict map of monads and so
induces (unambiguously) a functor between the categories of multicategories,

(D, id)-Multicat
Q∗- (D′, id)-Multicat

=

Cat(D)
Q∗- Cat(D′)

.
This is the usual induced functor between categories of internal categories.
There is another way in which the two processes are compatible, involving
adjunctions. Suppose we have a diagram
(E, T )
(E′, T ′)
(P,φ) 6
⊣(Q,ψ)
?
(6:10)

6.7 Change of shape
171
in which (P, φ) is a cartesian colax map of cartesian monads, (Q, ψ) is a cartesian
lax map, and there is an adjunction of functors P ⊣Q under which φ and ψ are
mates (6.1). Then, as may be checked, there arises an adjunction between the
functors P∗and Q∗constructed above:
(E, T )-Multicat
(E′, T ′)-Multicat.
P∗6
⊣Q∗
?
(6:11)
Example 6.7.2 Let T be a cartesian monad on a cartesian category E. Then
there is a diagram
(ET , id)
(E, T )
(F,ν) 6
⊣(U,ε)
?
of the form (6:10), in which F and U are the free and forgetful functors and ν and
ε are certain canonical natural transformations. This gives rise by the process
just described to an adjunction
(E, T )-Struc
(E, T )-Multicat,
F∗6
⊣U∗
?
none other than the adjunction that was the subject of the previous section.
Example 6.7.3 Let (P, φ) : (E, T )
- (E′, T ′) be a cartesian colax map of
cartesian monads, and suppose that the functor P has a right adjoint Q. Then
P∗has a right adjoint too: for taking the mate ψ = φ gives Q the structure of a
cartesian lax map of monads, leading to an adjunction P∗⊣Q∗.
We have considered change of shape for T -multicategories; let us now do the
same for T -algebras and T -structured categories, concentrating on lax rather
than colax maps.
If (Q, ψ) : (E, T )
- (E′, T ′) is a cartesian lax map of
cartesian monads then the induced functor ET
- E′T ′ is also cartesian, so
by Example 6.7.1 induces in turn a functor Cat(ET )
- Cat(E′T ′)—in other
words, induces a functor on structured categories,
Q∗: (E, T )-Struc
- (E′, T ′)-Struc.
The change-of-shape processes for algebras, structured categories and multicate-
gories are compatible: for any cartesian lax map (Q, ψ) : (E, T )
- (E′, T ′) of
cartesian monads, the diagram
ET
D- (E, T )-Struc
U∗- (E, T )-Multicat
E′T ′
Q∗?
D- (E′, T ′)-Struc
Q∗
?
U∗
- (E′, T ′)-Multicat
Q∗
?

172
Generalized Operads and Multicategories: Further Theory
commutes up to natural isomorphism. Here D is the discrete category functor
deﬁned in 6.6.10, and the commutativity of the left-hand square can be calculated
directly. The U∗’s are the forgetful functors, which, as we saw in 6.7.2, are induced
by lax maps (U, ε). To see that the right-hand square commutes, it is enough to
see that the square of lax maps
(ET , id)
(U,ε)- (E, T )
(E′T ′, id)
(Q∗,id) ?
(U,ε)
- (E′, T ′)
(Q,ψ)
?
commutes, and this is straightforward.
Finally, we answer the question posed in the introduction to the section: how
do algebras for multicategories behave under change of shape? An algebra for
an (E, T )-multicategory C is an object X over C0 acted on by C, so if (Q, ψ) :
(E, T )
- (E′, T ′) is a cartesian lax or colax map then we might hope that QX,
an object over QC0, would be acted on by Q∗C. In other words, we might hope
for a functor from Alg(C) to Alg(Q∗C). Such a functor does indeed exist, in
both the lax and colax cases.
First take a cartesian lax map of cartesian monads, (Q, ψ) : (E, T )
-
(E′, T ′). For any T -multicategory C there is an induced lax map of monads
(E/C0, TC)
- (E′/QC0, T ′
Q∗C),
comprised of the functor E/C0
- E′/QC0 induced by Q and a natural trans-
formation ψ that may easily be determined. This in turn induces a functor on
categories of algebras:
Alg(C)
-
Alg(Q∗C),


TCX
X
h?


7−→








T ′
Q∗CQX
QTCX
ψC
X
?
QX
Qh
?








.
Now take a cartesian colax map of cartesian monads, (P, φ) : (E, T )
-
(E′, T ′). For any T -multicategory C there is an induced weak map of monads
(E/C0, TC)
- (E′/PC0, T ′
P∗C),
which amounts to saying that if X = (X
p- C0) ∈E/C0 then T ′
P∗CPX ∼=

6.7 Change of shape
173
PTCX canonically; and indeed, we have a diagram
PTCX
 @
	
  @@
R
PT X
 @
PC1
	
  φX
@@
P T p
R
	
  P dom @@
P cod
R
T ′PX
PT C0
PC0
@@
T ′P pR
	
  φC0
T ′PC0,
giving the isomorphism required.
Example 6.7.4 In 2.3 we considered the adjunction between plain multicate-
gories and strict monoidal categories, and in 6.7.2 we saw that it is induced by
certain maps of monads:
(Monoid, id)
(Set, free monoid)
(F,ν) 6
⊣(U,ε)
?
7−→
StrMonCatstr
Multicat.
F∗6
⊣U∗
?
The lax map (U, ε) induces a functor Alg(A)
- Alg(U∗A) for each strict
monoidal category A. When A is regarded as a (Monoid, id)-multicategory, an
A-algebra is a lax monoidal functor A
- Set. This is the same thing as an
algebra for the underlying multicategory U∗A (2.1.13), and the induced functor
is in fact an isomorphism.
Conversely, the colax map (F, ν) induces a functor Alg(C)
- Alg(F∗C)
for each multicategory C, whose explicit form is left as an exercise.
It is no coincidence that the functors induced by U in this example are iso-
morphisms. Roughly speaking, this is because U is monadic:
Proposition 6.7.5 Let C be a cartesian category, let S and S′ be cartesian mon-
ads on C, and let λ : S◦S′
- S′◦S be a cartesian distributive law. Write
CS
e
S
- CS
⇒
ψ
C
U
?
S′◦S
- C
U
?
for the induced lax map of monads, as in 6.1.5. Then for any eS-multicategory
C, there is an isomorphism of categories Alg(C) ∼= Alg((U, ψ)∗C).

174
Generalized Operads and Multicategories: Further Theory
The monads eS and S′◦S are cartesian (6.1.3, 6.1.4), so it does make sense to talk
about multicategories for them.
Proof
We just prove this in the case where C is an eS-operad O, since that is
all we will need later and the proof is a little easier.
As well as the lax map shown, we have a strict map of monads
CS
e
S - CS
=
C
U
?
S′
- C.
U
?
So we have an S′-operad (U, id)∗O, hence a monad S′
(U,id)∗O on C, of which eSO
is a lift to CS. By Lemma 6.1.4, there is a corresponding distributive law
S◦S′
(U,id)∗O
- S′
(U,id)∗O◦S.
This gives S′
(U,id)∗O◦S the structure of a monad on C; but it can be checked that
this monad is exactly (S′◦S)(U,ψ)∗O, so by Lemma 6.1.5,
Alg(O) = (CS)e
SO ∼= CS′
(U,id)∗O◦S ∼= C(S′◦S)(U,ψ)∗O = Alg((U, ψ)∗O),
as required.
2
The forgetful functor in Example 6.7.4 is the case C = Set, S = (free monoid),
S′ = id. We will use the Proposition when comparing deﬁnitions of weak 2-
category in 9.4.
6.8
Enrichment
We ﬁnish with a brief look at a topic too large to ﬁt in this book. Its slogan is
‘what can we enrich in?’
Take, for example, Ab-categories: categories enriched in (or ‘over’) abelian
groups. The simplest deﬁnition of an Ab-category is as a class C0 of objects
together with an abelian group C(a, b) for each a, b ∈C0, a bilinear composition
function
C(a, b), C(b, c)
- C(a, c)
for each a, b, c ∈C0, and an identity 1a ∈C(a, a) for each a ∈C0, satisfying
associativity and identity axioms.
You could express composition as a linear
map out of a tensor product, but this would be an irrelevant elaboration; put
another way, the ﬁrst deﬁnition of Ab-category can be understood by someone
who knows what a multilinear map is but has not yet learned about tensor
products.

6.8 Enrichment
175
More generally, if V is a plain multicategory then there is an evident deﬁnition
of V -enriched category. Classically one enriches categories in monoidal categories
(as in 1.3), but this is an unnaturally narrow setting; in the terminology of 3.3,
representability of the multicategory is an irrelevance.
More generally still, suppose we have some type of categorical structure—
‘widgets’, say. Then the question is: for what types of structure V can we make
a deﬁnition of ‘V -enriched widget’? In the previous paragraphs widgets were
categories, and we saw that V could be a plain multicategory. (In fact, that is
not all V can be, as we will soon discover.) In my [1999a] paper, the question
is answered when widgets are T -multicategories for almost any cartesian monad
T . The general deﬁnition of enriched T -multicategory is short, simple, and given
below, but unwinding its implications takes more space than we have; hence the
following sketch.
Let T be a monad on a category E, and suppose that both T and E are
suitable (6.5), so that there is a cartesian free T -multicategory monad T + on
the category E+ of T -graphs.
For any object C0 of E, there is a unique T -
multicategory structure on the T -graph
T C0 × C0
T C0
pr1

C0,
pr2
-
and we write this T -multicategory as IC0, the indiscrete T -multicategory on
C0. Then IC0 is a T +-algebra, so by 4.2.22 gives rise to a T +-multicategory
(IC0)+ whose domain map is the identity.
Deﬁnition 6.8.1 Let T be a suitable monad on a suitable category E and let V
be a T +-multicategory. A V -enriched T -multicategory is an object C0 of E
together with a map (IC0)+
- V of T +-multicategories.
Example 6.8.2 The most basic example is when T is the identity monad on the
category E of sets. Then E+ is the category of directed graphs, T + is the free cat-
egory monad fc, and T +-multicategories are the fc-multicategories of Chapter 5.
We therefore have a notion of ‘V -enriched category’ for any fc-multicategory V .
In the special case that V is a monoidal category (5.1.8), we recover the stan-
dard deﬁnition of enrichment. More generally, if V is a bicategory (5.1.5) then
we recover the less well-known deﬁnition of category enriched in a bicategory
(Walters [1981]), and if V is a plain multicategory (5.1.6) then we recover the
deﬁnition of category enriched in a plain multicategory. For more on enriched
categories in this broad sense, see my [2002].
Example 6.8.3 The next most basic example is when T is the free monoid
monad on the category E of sets. Theorem 7.1.3 tells us that any symmetric mo-
noidal category gives rise canonically to what is there called a T2-multicategory.
By deﬁnition, T2 is the free T -operad monad and T + the free T -multicategory
monad, so a T2-multicategory is a special kind of T +-multicategory. Hence any
symmetric monoidal category gives rise canonically to a T +-multicategory, giving

176
Generalized Operads and Multicategories: Further Theory
us a deﬁnition of plain multicategory enriched in a symmetric monoidal category,
and in particular, of plain operad in a symmetric monoidal category. These are
exactly the usual deﬁnitions (pp. 39, 43).
Example 6.8.4 Borcherds [1997] introduced certain structures called ‘relaxed
multilinear categories’ in his deﬁnition of vertex algebras over a vertex group,
and Soibelman [1997, 1999] deﬁned the same structures independently in his work
on quantum aﬃne algebras. As explained by Borcherds, they can be regarded
as categorical structures in which the maps have singularities whose severity
is measured by trees.
They also arise completely naturally in the theory of
enrichment: if T is the free monoid monad on the category E of sets, as in the
previous example, then there is a certain canonical T +-multicategory V such
that V -enriched T -multicategories are precisely relaxed multilinear categories.
See Leinster [1999a, Ch. 4] for details.
Example 6.8.5 In the next chapter we introduce the sequence (Tn)n∈N of ‘opetopic’
monads. By deﬁnition, Tn is the free Tn−1-operad monad, and this means that
there is a notion of Tn−1-multicategory enriched in a Tn-multicategory. More
vaguely, a Tn-multicategory is naturally regarded as an (n+1)-dimensional struc-
ture, so n-dimensional structures can be enriched in (n + 1)-dimensional struc-
tures.
Notes
Most parts of this chapter have appeared before [1998a, §4], [2000b, Ch. 3]. The thought
that an operad is a cartesian monad equipped with a cartesian natural transformation
down to the free monoid monad (6.2) is closely related to Kelly’s idea of a ‘club’ [1974,
1992]. See Snydal [1999a, 1999b] for more on the relaxed multicategory deﬁnition of
vertex algebra.

Chapter 7
Opetopes
John Dee [. . . ]
summoned angels of dubious celestial
provenance by invoking names like Zizop, Zchis, Esiasch,
Od and Iaod
Eco [1995]
Operads lead inescapably into geometry. In this chapter we see that as soon as
the notion of generalized operad is formulated, the notion of opetope is unavoid-
able. Opetopes are something like simplices: they are a completely canonical
family of polytopes, as pervasive in higher-dimensional algebra as simplices are
in geometry.
In 7.1 opetopes are deﬁned and their geometric representation explained. In-
tertwined with the deﬁnition of opetope is the deﬁnition of a certain sequence
(Tn)n∈N of cartesian monads; we also look at Tn-multicategories and their rela-
tion to symmetric multicategories. Section 7.2 is formally about Tn-structured
categories (in the sense of 6.6); translated into geometry, this means diagrams of
opetopes pasted together.
As we shall see, there is a category of n-dimensional pasting diagrams for each
natural number n. When n = 1 this is the category D of ﬁnite totally ordered
sets (the augmented simplex category); when n = 2 it is a category of trees, as
found in parts of quantum algebra. In 7.3 we analyse the category of trees in
some detail. Some of this is analogous to some of the standard analysis of D: see
for instance Mac Lane [1971, VII.5], where the monics, epics, primitive face and
degeneracy maps, and standard factorization properties are all worked out, and
the universal role of D (as the free monoidal category containing a monoid) is
established.
Opetopes were invented by Baez and Dolan [1997] so that they could frame
a deﬁnition of weak n-category. The strategy is simple: opetopes together with
face maps form a category, a presheaf on that category is called an opetopic set,
and a weak n-category is an opetopic set with certain properties. This is like both
the deﬁnition of Kan complex (a simplicial set with horn-ﬁlling properties) and
the deﬁnition of representable multicategory (a multicategory with universality

178
Opetopes
properties, 3.3.1). Opetopic sets are discussed in 7.4, and opetopic deﬁnitions of
weak n-category in 7.5.
We ﬁnish (7.6) with a short section on the ‘many in, many out’ approach to
higher-dimensional category theory. Opetopes arise from the concept of opera-
tions with many inputs and a single output. We could start instead with the
concept of operations having both many inputs and many outputs, and try to
construct shapes analogous to opetopes. But this turns out to be impossible, as
we see. (Formally, 3-computads do not form a presheaf category.) This does not
mean that it is hopeless to try to develop a many-in, many-out framework for
higher categorical structures, but it does mean that such a framework would be
qualitatively diﬀerent from the simplicial, cubical, globular, and opetopic frame-
works, in each of which there is a genuine category of shapes.
7.1
Opetopes
The following table shows some of the types of generalized operad that we have
met. As usual, T is a cartesian monad on a cartesian category E.
E
T
T -operads
Set
identity
monoids
Set
free monoid
plain operads
SetN ≃Set/N
free plain operad
(see 4.2.14)
Each row is generated automatically from the last by taking T to be ‘free operad
of the type in the last row’. Technicalities aside, it is clear that this table can be
continued indeﬁnitely.
This gives an absolutely fundamental inﬁnite sequence of categories E, monads
T , and types of generalized operad. The bulk of this chapter consists of working
out what they look like. It is plain from the ﬁrst few rows that there will be some
geometrical content—for instance, in the third row, the operations in a T -operad
are indexed by trees (Example 4.2.14).
The table can be compared with that of Ginzburg and Kapranov [1994,
p. 204]. They include columns marked ‘Geometry’ (whose entries are ‘vector
bundles’, ‘manifolds’, and ‘?(moduli spaces)’), ‘Linear Physics’, and ‘Nonlinear
Physics’. Their table, like the one above, has only three rows. Here we show how
to continue forever—in our columns, at least.
To do this formally we need to recall the results on free operads in 6.5. There
we met the concept of ‘suitable’ categories and monads and saw that they pro-
vided a good context for free operads. Speciﬁcally, let T be a suitable monad on
a suitable category E with a terminal object. Then Theorem 6.5.4 tells us that
the forgetful functor
(E, T )-Operad
- E/T 1
sending a T -operad to its underlying T -graph has a left adjoint, that the induced
monad (‘free T -operad’) on E/T 1 is suitable, and that the category E/T 1 is

7.1 Opetopes
179
suitable. Trivially, E/T 1 has a terminal object. Also, Theorem 6.5.1 tells us that
the category of sets and the identity monad on it are both suitable. This makes
possible:
Deﬁnition 7.1.1 For each n ∈N, the suitable category En and the suitable
monad Tn on En are deﬁned inductively by
• E0 = Set and T0 = id
• En+1 = En/Tn1 and Tn+1 = (free Tn-operad).
In fact, there is for each n ∈N a set On such that En is canonically isomorphic
to Set/On. (Recall also from p. 8 that Set/On ≃SetOn.) First, O0 = 1. Now
suppose, inductively, that n ≥0 and En ∼= Set/On.
The terminal object of
Set/On is (On
1- On), so if we put


On+1
On
t?

= Tn


On
On
1
?


then we have
En+1 = En
Tn1
∼=
Set/On
On+1
t- On
∼= Set
On+1
.
This gives an inﬁnite sequence of sets and functions
· · ·
t- On+1
t- On
t-
· · ·
t- O1
t- O0.
The ﬁrst few steps of the iteration are:
n
On
En
Tn
Tn-operads
0
1
Set
identity
monoids
1
1
Set
free monoid
plain operads
2
N
Set/N
free plain operad
(see 4.2.14 and below)
3
{trees}
Set/{trees}
We call On the set of n-dimensional opetopes, or n-opetopes. ‘Opetope’
is pronounced with three syllables, as in ‘OPEration polyTOPE’; opetopes en-
code fundamental information about operations and are naturally represented
as polytopes of the corresponding dimension. Let us see how this works in low
dimensions.
The unique 0-opetope is drawn as a point:
O0 = { • }.
The monad T0 on Set/O0 ∼= Set is the identity.
A T0-multicategory is an
ordinary category, with objects a depicted as labelled points (0-opetopes) and
maps θ as labelled arrows, as usual:
a
• ,
a•
θ -
b
• .

180
Opetopes
In particular, a T0-operad is a monoid, the elements θ of which are drawn as
•
θ -• .
The underlying graph structure of a T0-operad is formally a set over T01 = O1,
that is, a family of sets indexed by the elements of O1. Of course, O1 has only
one element and the ‘underlying graph structure’ of a monoid is just a set. But
since we want to view the elements of a T0-operad as labels on arrows, we choose
to draw the unique element of O1 as an arrow:
O1 = { •
-• }.
So the unique 1-opetope is drawn as a 1-dimensional polytope.
Next we have the monad T1 = (free monoid) on the category Set/O1 ∼= Set.
The free monoid T1E on a set E has elements of the form
•
a1 -•
a2 -
· · ·
an -•
(n ≥0, ai ∈E).
A T1-multicategory is a plain multicategory, and with the
diagrams we are using it is natural to draw an object a as labelling an edge,
•
a -• ,
and a map θ : a1, . . . , an
- a as labelling a 2-dimensional region,
a1
a2
an
a
⇓θ

 
...
BBN
-
.
This is an alternative to our usual picture,
a1a2
an
· · ·
θ
A
A
A
A




a
.
Sometimes we reduce clutter by omitting arrows:
a1
a2
an
a
⇓θ

 ...
BB
or
a1
a2
an
a
θ

 ...
BB
.
In this paradigm, composition is drawn as
a
a1
a2
an
a1
1
a2
1
ak1
1
a1
2
a2
2
ak2
2
a1
n
a2
n
akn
n
⇓θ
⇓
θ1
⇓
θ2
⇓
θn
7−→
a
a1
1
a2
1
ak1
1
a1
2
a2
2
ak2
2
a1
n
a2
n
akn
n
⇓θ◦(θ1,...,θn)

7.1 Opetopes
181
and the function assigning identities as
a
7−→
a
a
⇓1a
.
A T1-operad (plain operad) looks just the same except that the edges are no
longer labelled: so an n-ary operation θ ∈P(n) of an operad P is drawn as
θ

 ...
BB
with n ‘input’ edges along the top and one ‘output’ edge along the bottom. The
underlying T1-graph of a T1-operad is a set over T11 = O2 ∼= N, so we draw
2-opetopes as 2-dimensional polytopes:
O2 =
(
⇓I ,
⇓-^,
⇓
  @
@
R
-,
⇓


-
A
AU
-,
⇓


3QQ
s
BBN
-, . . .
)
.
Next we have the monad T2 = (free plain operad) on the category
Set/O2 ∼= Set/N ≃SetN.
An object E of Set/O2 is a family (E(ω))ω∈O2 of sets, with the elements of E(ω)
regarded as potential labels to be stuck on the 2-opetope ω. The free operad
T2E on E is formed by pasting together labelled 2-opetopes, with output edges
joined to input edges. For instance, if a1 ∈E(3), a2 ∈E(1) and a3 ∈E(2) then
⇓a1
⇓
a2
⇓
a3
(7:1)
is an element of (T2E)(4), and if b1 ∈E(5), b2 ∈E(0), b3, b4 ∈E(3) and b5 ∈E(1)
then
⇓b1
⇓
b2
⇓
b3
⇓
b4
⇓
b5
(7:2)
is an element of (T2E)(8). Previously we represented operations in a free operad
as trees with labelled vertices, so instead of (7:1) we drew
•a1
Q
Q 
•
a2
•a3
@  (2.3 and 4.1.11). These pictures are dual to one another, as Fig. 7-A demonstrates;

182
Opetopes
⇓
⇓
⇓
Figure 7-A: How a tree corresponds to a diagram of pasted-together 2-opetopes
we return to this correspondence in 7.3.
We described T2-multicategories in Example 4.2.14 in terms of trees; we now
describe them in terms of opetopes. The objects of a T2-multicategory C form a
family (C0(ω))ω∈O2 of sets; put another way, they form a graded set (C0(n))n∈N
with, for instance, a ∈C0(3) drawn as
⇓a


A
A.
Arrows look like
⇓a1
⇓
a2
⇓
a3
θ
⇓a
(7:3)
(a1 ∈C0(3), a2 ∈C0(1), a3 ∈C0(2), a ∈C0(4)). The 2-opetope in the codomain
always has the same number of input edges as the diagram in the domain (4, in
this case); here it is drawn irregularly to make the equality self-evident. Visualize
the whole of (7:3) as a 3-dimensional polytope with one ﬂat bottom face labelled
by a and three curved top faces labelled by a1, a2 and a3 respectively, and with
a label θ in the middle. On a sheet of paper we must settle for 2-dimensional
representations such as the one above. Composition takes a diagram of arrows
such as
a1
a2
a1
1
a2
1
a1
2
a2
2
a3
2
a
θ1
θ2
θ
(7:4)

7.1 Opetopes
183
and produces a single arrow
a1
1
a2
1
a1
2
a2
2
a3
2
θ◦(θ1, θ2)
a
.
(7:5)
(This is exactly the example of 4.2.14.) The identity on an object a ∈C0(n)
looks like
a

 ...
BB
1a
a

 ...
BB ,
where there are n input edges in both the domain and the codomain.
In particular, a T2-operad consists of a collection of operations such as
⇓
⇓
⇓
θ
⇓
together with composition and identities as above.
So the elements of O3 =
T2(1)—the 3-opetopes—are thought of as 3-dimensional polytopes, for instance
⇓
⇓
⇓
⇓
.
(7:6)
The function t : O3
- O2 is ‘target’; it sends the 3-opetope above to the
2-opetope with 4 input edges.
This gives a systematic way of portraying opetopes and Tn-multicategories
for arbitrary n. In 7.4 we will see that each n-opetope does indeed give rise to
an n-dimensional topological space.
Some crude examples of Tn-multicategories are provided by symmetric struc-
tures.
First, any commutative monoid (A, +, 0) gives rise to a Tn-operad for
every n ∈N: an operation of shape ω ∈On is just an element of A (regardless of
what ω is), composition is +, and the identity is 0. We have already seen this in
the case n = 1 (plain operads, 2.2.7). Formally, let CommMon be the category
of commutative monoids and ∆: Set
- Set/On the functor sending a set A
to (A × On
pr2- On); then we have
Theorem 7.1.2 For each n ∈N there is a canonical functor
CommMon
- Tn-Operad

184
Opetopes
making the diagram
CommMon - Tn-Operad
Set
?
∆- Set/On
?
commute, where the vertical arrows are the forgetful functors.
Proof This follows from Tn being a ﬁnitary familially representable monad on
a slice of Set: see Example C.4.2.
2
More interestingly, any symmetric multicategory A gives rise to a Tn-multicategory
C for every n ∈N, canonically up to isomorphism. The objects of C of shape
ω ∈On are simply the objects of A (regardless of ω). The arrows of C are arrows
of A: for example, if n = 2 and ba, ea, . . . are objects of A then an arrow
a
a′
ea
ba
a
(7:7)
in C might be deﬁned to be an arrow
a′, ba, a, ea
- a
in A—or indeed, the same but with the four domain objects ordered diﬀerently.
There is no canonical ordering of the 2-opetopes making up a given 2-pasting
diagram; more precisely, there is no method of ordering that is stable under
substitution of the kind shown in diagrams (7:4) and (7:5).
This is why we
needed to start with a symmetric multicategory: composition in C cannot be
deﬁned without permuting the lists of objects. It is also why C is canonical only
up to isomorphism. The precise statement of the construction is:
Theorem 7.1.3 For each n ∈N there is a functor
SymMulticat
- Tn-Multicat,
canonical up to isomorphism, making the diagram
SymMulticat - Tn-Multicat
Set
( )0
?
∆
- Set/On
( )0
?
commute, where both vertical arrows are the functors assigning to a multicategory
its object of objects.

7.2 Categories of pasting diagrams
185
Proof Again this follows from Tn being a ﬁnitary familially representable monad
on a slice of Set: Example C.4.9.
2
Symmetric structures have a ghostly presence throughout this book, hovering
just beyond our world of cartesian monads and generalized multicategories. Much
of the time we are concerned with labelled cell diagrams such as the domain
of (7:7), and exercise full sensitivity to their geometric conﬁguration. By passing
to a symmetric multicategory we destroy all the geometry.
In this sense, symmetric multicategories are the ultimate in crudeness. There
are various situations in mathematics where symmetric multicategories (or sym-
metric monoidal categories) are customarily used, but generalized multicategories
provide a more sensitive and more general approach. Operads in a symmetric
monoidal category and categories enriched in a (symmetric or not) monoidal cat-
egory are two examples; the more thoughtful approaches replace symmetric mo-
noidal categories by T2-multicategories and fc-multicategories, respectively (6.8).
There are also entire approaches to higher-dimensional category theory based on
symmetric structures, as discussed in 7.5; crude does not mean ineﬀective.
7.2
Categories of pasting diagrams
The principal thing that you can do in a higher-dimensional category is to take
a diagram of cells and form its composite. Not just any old diagram will do:
it must, for instance, be connected and have the cells oriented compatibly. For
example, the acceptable diagrams of 1-cells are those of the form
•
-•
-
· · ·
-•
(7:8)
where the number of arrows is a non-negative integer. Let us call a composable
diagram of pasted-together n-cells an ‘n-pasting diagram’. For n ≥2, the class
of n-pasting diagrams depends on the shape of cells that you have chosen to
use in your theory of higher-dimensional categories: globular, cubical, simplicial,
opetopic, . . . .
Pasting diagrams play an important role in any theory of higher categories.
What distinguishes the opetopic theory is that pasting diagrams are the same
thing as cell shapes of one dimension higher. For instance, the 1-pasting dia-
gram (7:8) with k arrows corresponds to the 2-opetope
⇓

 
...
BBN
-
with k arrows along the top; we draw them diﬀerently, but there is a natural
identiﬁcation. So we may conveniently deﬁne an (opetopic) n-pasting dia-
gram to be an (n + 1)-opetope, for any n ∈N. In this section we show how, for
each n, the n-pasting diagrams form a category Pdn—and actually, rather more
than just a category.

186
Opetopes
The formal method is as follows. So far we have looked at Tn-operads and
Tn-multicategories; now we look at Tn-structured categories. PDn is deﬁned as
the free Tn-structured category on the terminal Tn-multicategory, and Pdn as
the underlying category of PDn. So, we begin by recalling what T -structured
categories are in general and what they look like when T = Tn; then we look at
free structured categories; ﬁnally, we arrive at the category of n-pasting diagrams.
The next section, 7.3, is a detailed examination of the case n = 2: it turns out
that Pd2 is a category of trees.
Recall from 6.6 that if T is a cartesian monad on a cartesian category E then
a T -structured category is an internal category in ET . Alternatively, note that
T lifts naturally to a monad Cat(T ) on Cat(E), and a T -structured category is
then a Cat(T )-algebra.
A T0-structured category is a category in SetT0 ∼= Set, that is, a category.
A T1-category is a category in SetT1 ∼= Monoid, that is, a strict monoidal
category. (Alternatively, Cat(T1) is the free strict monoidal category monad on
Cat(Set) ∼= Cat, and a T1-structured category is a Cat(T1)-algebra.)
A T2-structured category is a category in (Set/N)T2 ∼= Operad. Alterna-
tively, it is an operad in Cat, or ‘Cat-operad’, as we saw in 6.6.6. Diagrammat-
ically, a T2-structured category A consists of
• a set A0(k) for each k ∈N, with a ∈A0(k) drawn as a label on the kth
2-opetope,
a

 ...
BB
• a set A(a, b) for each k ∈N and a, b ∈A0(k), with θ ∈A(a, b) drawn as
a

 ...
BB
θ-
b

 ...
BB
• a function deﬁning composition or ‘gluing’ of objects,
a
a1
a2
an
7−→
a◦(a1, . . . , an)
and an identity or ‘unit’ object,
1
• a function deﬁning composition of arrows,
(a
θ- b
φ- c)
7−→
(a
φθ- c),
and an identity arrow (a
1a- a) on each object a

7.2 Categories of pasting diagrams
187
• a function deﬁning gluing of arrows:
a
θ- b, a1
θ1- b1, . . . , ak
θk- bk
give rise to
a◦(a1, . . . , ak)
θ∗(θ1,...,θk)
- b◦(b1, . . . , bk),
all satisfying the usual kinds of axioms. The sets A0 and A1 = `
a,b∈C0 A(a, b)
both have the structure of plain operads: thus, A can be viewed as a category
in Operad. Regrouping the data, there is for each n a category A(n) whose
object-set is A0(n): thus, A can also be viewed as an operad in Cat.
An analogous diagrammatic description applies to Tn-structured categories
for any n ∈N.
Next recall from 6.6 that there is an adjunction between T -structured cate-
gories and T -multicategories, which for T = Tn will be denoted
Tn-Struc
Tn-Multicat.
Fn 6
⊣Un
?
Also recall from 7.1 that a Tn-multicategory consists of a set of objects labelling n-
opetopes, a set of maps whose domains are labelled n-pasting diagrams and whose
codomains are labelled single n-opetopes, and functions deﬁning composition and
identities. Now, let us see what this adjunction looks like.
The functor Un ‘forgets how to tensor but remembers multilinear maps’.
When n = 0 it is the identity, when n = 1 it sends a strict monoidal category to
its underlying plain multicategory, and when n = 2 it sends a Cat-operad A to
the T2-multicategory whose objects are the same as those of A and whose maps
a1
a2
a3
a4
-
a
(for instance) are maps
a1◦(a2,1,a3◦(a4,1))
-
a
in A.
The free functor Fn is formal pasting: if C is a Tn-multicategory then the
objects (respectively, arrows) of FnC are the formal pastings of objects (respec-
tively, arrows) of C. Trivially, F0 is the identity. We described F1 on p. 57, in a
diﬀerent diagrammatic style.

188
Opetopes
Deﬁnition 7.2.1 Let n ≥0.
The structured category of n-pasting di-
agrams, PDn, is deﬁned by PDn = Fn1.
In other words, PDn is the free
Tn-structured category on the terminal Tn-multicategory.
So PDn is an internal category in (Set/On)Tn; its underlying graph is
T 2
n1
Tn1
µ1

Tn1
Tn!
-
(7:9)
where the Tn-algebra structures on Tn1 and T 2
n1 are both components of the
multiplication µ of the monad Tn.
A T0-structured category is just a category, and PD0 is the terminal category
(whose object is viewed as the unique 0-pasting diagram • ).
A T1-structured category is a strict monoidal category, and we have already
seen in Example 6.6.9 that PD1 is D, the strict monoidal category of (possibly
empty) ﬁnite totally ordered sets n = {1, . . ., n}; addition is tensor and 0 is the
unit. The diagram above is in this case
N∗
N
+

N,
-
where N∗is the set of ﬁnite sequences of natural numbers and the right-hand
map sends (m1, . . . , mn) to n.
The Cat-operad PD2 is described in detail in the next section.
We have been looking at PDn, the Tn-structured category of n-pasting dia-
grams, but sometimes it is useful to forget the more sophisticated structure and
pass to the mere category of n-pasting diagrams. Formally, we have cartesian
forgetful functors
(Set/On)Tn
- Set/On
- Set
and these induce a forgetful functor
Tn-Struc = Cat((Set/On)Tn)
- Cat(Set) = Cat,
making possible the following deﬁnition.
Deﬁnition 7.2.2 Let n ≥0. The category of n-pasting diagrams, Pdn, is
the image of PDn under the forgetful functor Tn-Struc
- Cat.
For example, Pd0 is the terminal category, Pd1 is the category D of ﬁnite totally
ordered sets, and Pd2 can be regarded as a category of trees (see below). The
objects of Pdn really are the n-pasting diagrams: for by (7:9), the object-set of
Pdn is the underlying set of Tn1 ∈Set/On, which is the set On+1 of (n + 1)-
opetopes or n-pasting diagrams.
In 7.4 we will consider the category of all opetopes; beware that this is quite
diﬀerent from the categories Pdn of n-pasting diagrams.

7.3 A category of trees
189
It is instructive to contemplate the situation for arbitrary cartesian E and T .
We have functors
T -Struc = Cat(ET )
V - Cat(E)
T -Multicat,
F 6
⊣U
?
where V is forgetful, and so we have an internal category V F1 in E. The object-
of-objects of V F1 is T 1, which may be thought of as the object of T -pasting
diagrams; hence V F1 may be thought of as the (internal) category of T -pasting
diagrams.
In some situations (such as when E = En ∼= Set/On) there is an
obvious cartesian ‘forgetful’ functor E
- Set, and then there is an induced
functor Cat(E)
- Cat, giving a genuine category of T -pasting diagrams. For
instance, if K is a set and T is the monad K + (−) on E = Set then this is the
category PK deﬁned on p. 309.
7.3
A category of trees
We have seen that for each n ≥0 there is a category Pdn whose objects are
n-pasting diagrams. We have also seen that 2-pasting diagrams correspond nat-
urally to trees (Fig. 7-A). Hence Tr = Pd2 is a category whose objects are trees.
Here we describe it in some detail. The deﬁnition of a map between trees is
perfectly natural but takes some getting used to; we approach it slowly.
First recall what trees themselves are. By deﬁnition (2.3.3), tr is the free
plain operad on the terminal object of SetN, and an n-leafed tree is an element
of tr(n). As we saw, the sets tr(n) also admit the following recursive description:
• | ∈tr(1)
• if n, k1, . . . , kn ∈N and τ1 ∈tr(k1), . . . , τn ∈tr(kn) then (τ1, . . . , τn) ∈
tr(k1 + · · · + kn).
For the purposes of this text we will need no further description of what a tree
is. But it is also possible, as you might expect, to describe a tree as a graph
of a certain kind, and this alternative, ‘concrete’, description can be comforting.
To say exactly what kind of graph is more delicate than meets the eye, and in
papers on operads is often done only vaguely.
I have therefore put a graph-
theoretic deﬁnition of tree, and a proof of its equivalence to our usual one, in
Appendix E.
In preparation for looking at maps in Pd2—maps between trees—let us look
again at maps in Pd1 = D. An object of D is a natural number. A map is,
as observed in the previous section, a ﬁnite sequence (m1, . . . , mn) of natural
numbers; the domain of such a map is m1 + · · · + mn and the codomain is n.
If we view natural numbers as ﬁnite sequences of •’s then what a map does is
to take a ﬁnite sequence of •’s (the domain), partition it into a ﬁnite number of
(possibly empty) segments, and replace each segment by a single • (giving the
codomain). For example, Fig. 7-B illustrates the map

190
Opetopes
(b)
(a)
Figure 7-B: Two pictures of a map 6
- 5 in D
(b)
σ
(a)
τ
(c)
σ
τ
Figure 7-C: Three pictures of a map in Tr(4)
(0, 3, 1, 0, 2) : 6
- 5
in two diﬀerent ways: in (a) as a partition, and in (b) as a function.
Ordinarily D = Pd1 is described as the category of ﬁnite totally ordered
sets, but our new description leads smoothly into a description of the category
Tr = Pd2 of trees. Tr is the disjoint union `
n∈N Tr(n). An object of Tr(n) is
an n-leafed tree. The set of maps in Tr(n) is
(T 2
2 1)(n) = (T2(tr))(n),
that is, a map is an n-leafed tree τ in which each k-ary vertex v has assigned to it
a k-leafed tree σv; the domain of the map is the tree obtained by gluing the σv’s
together in the way dictated by the shape of τ, and the codomain is τ itself. Put
another way, what a map does is to take a tree σ (the domain), partition it into
a ﬁnite number of (possibly trivial) subtrees, and replace each of these subtrees
by the corolla
•
Q
Q· · ·
with the same number of leaves, to give the codomain τ.
Fig. 7-C depicts a
certain map σ
- τ in Tr(4) in three diﬀerent ways: in (a) as a 4-leafed tree
τ with a k-leafed tree σv assigned to each k-ary vertex v, in (b) as a 4-leafed
tree σ partitioned into subtrees σv, and in (c) as something looking more like a
function. We will return to the third point of view later; for now, just observe

7.3 A category of trees
191
(b)
σ
(a)
σ
(c)
σ
τ
Figure 7-D: Three pictures of an epic in Tr(6)
that there is an induced function from the vertices of σ to the vertices of τ, in
which the inverse image of a vertex v of τ is the set of vertices of σv.
In some texts a map of trees is described as something that ‘contracts some
internal edges’. (Here an internal edge is an edge that is not the root or a leaf;
maps of trees keep the root and leaves ﬁxed. To ‘contract’ an internal edge means
to shrink it down to a vertex.) With one important caveat, this is what our maps
of trees do: for in a map σ
- τ, the replacement of each partitioning subtree
σv by the corolla with the same number of leaves amounts to the contraction
of all the internal edges of σv. For example, Fig. 7-D(a) shows a tree σ with
some of its edges marked for contraction, and Figs. 7-D(b) and 7-D(c) show the
corresponding maps σ
- τ in two diﬀerent styles (as in Figs. 7-C(b) and (c));
so τ is the tree obtained by contracting the marked edges of σ.
The caveat is that some of the σv’s may be the trivial tree, and these are
replaced by the 1-leafed corolla • . This does not amount to the contraction of
internal edges: it is, rather, the additionof a vertex to the middle of a (possibly
external) edge. Any map of trees can be viewed as a combination of contractions
of internal edges and additions of vertices to existing edges. For example, the
map illustrated in Fig. 7-C contracts two internal edges and adds a vertex to one
edge.
Analogously, any map in the category D of ﬁnite totally ordered sets can be
viewed as a combination of merging adjacent •’s and adding new •’s (Fig. 7-
B); this amounts to the factorization of any map as a surjection followed by an
injection. So those who deﬁne their maps between trees to be just contractions of
internal edges are doing something analogous to considering only the surjective
maps in the augmented simplex category D. Indeed, the full subcategory of Tr
consisting of just those trees in which every vertex has exactly one edge coming
up out of it is isomorphic to D; if we take only maps made out of contractions of
internal edges then we obtain the subcategory of D consisting of surjections only.

192
Opetopes
(a)
(b)
Figure 7-E: (a) The category of 3-leafed stable trees, and (b) its classifying space
We will come back soon to this issue of surjections and injections in Tr, with
more precision.
Some further understanding of the category of trees can be gained by consid-
ering just those trees in which each vertex has at least two branches coming up
out of it. I will call these ‘stable trees’, following Kontsevich and Manin [1994,
Deﬁnition 6.6.1]. Formally, StTr(n) is the full subcategory of Tr(n) with objects
deﬁned by the recursive clauses
• | ∈StTr(1)
• if n ≥2, k1, . . . , kn ∈N, and τ1 ∈StTr(k1), . . . , τn ∈StTr(kn) then
(τ1, . . . , τn) ∈StTr(k1 + · · · + kn),
and an n-leafed stable tree is an object of StTr(n). Since a stable tree can
contain no subtree of the form • , all maps between stable trees are ‘surjections’,
that is, consist of just contractions of internal edges, without insertions of new
vertices. It follows that each category StTr(n) is ﬁnite, and so its classifying space
can be represented by a ﬁnite CW complex; this may explain why topologists
often like their trees to be stable.
The ﬁrst few categories StTr(n) are trivial:
StTr(0)
=
∅,
StTr(1)
=
{ | },
StTr(2)
=

•
@  
,
where in each case there are no arrows except for identities. The cases n = 3, 4,
and 5 are illustrated in Figs. 7-E(a), 7-F(a), and 7-G(a).
Identity arrows are
not shown, and the categories StTr(n) are ordered sets: all diagrams commute.
Vertices are also omitted; since the trees are stable, this does not cause ambiguity.
Parts (b) of the ﬁgures show the classifying spaces of these categories, solid
polytopes of dimensions 1, 2 and 3.
In the case of 5-leafed trees (Fig. 7-G)
only about half of the category is shown, corresponding to the front faces of the
polytope; the back faces and the terminal object of the category (the 5-leafed
corolla), which sits at the centre of the polytope, are hidden. The whole polytope
has 6 pentagonal faces, 3 square faces, and 3-fold rotational symmetry about the
central vertical axis.
For n ≤5, the classifying space B(StTr(n)) is homeomorphic to the as-
sociahedron Kn (Stasheﬀ[1963a] and 2.2.17 above), and it seems very likely

7.3 A category of trees
193
(a)
(b)
Figure 7-F: (a) The category of 4-leafed stable trees, and (b) its classifying space
that this persists for all n ∈N. Indeed, the family of categories (StTr(n))n∈N
forms a sub-Cat-operad STTR of TR = PD2, and the classifying space functor
B : Cat
- Top preserves ﬁnite products, so there is a (non-symmetric) topo-
logical operad B(STTR) whose nth part is the classifying space of StTr(n).
(To make B preserve ﬁnite products we must interpret Top as the category
of compactly generated or Kelley spaces: see Segal [1968, §1] and Gabriel and
Zisman [1967, III.2].) This operad B(STTR) is presumably isomorphic to Stash-
eﬀ’s operad K = (Kn)n∈N. A K-algebra is called an A∞-space, and should be
thought of as an up-to-homotopy version of a topological semigroup; the basic
example is a loop space.
The categories StTr(n) also give rise to the notion of an A∞-algebra (Stash-
eﬀ[1963b]). For each n ∈N, there is a chain complex P(n) whose degree k part is
the free abelian group on the set of n-leafed stable trees with (n−k −1) vertices.
For instance,
P(4) = (· · ·
- 0
- 0
- Z · L2
- Z · L1
- Z · L0)
where the sets Lk are
L2
=

•
Q
QA 
L1
=



•
@ •A
,
•
@ •A
,
•
@ •A
,
•
@  •
S
,
•
@  •
S



L0
=





•
@  •
@  •
@  ,
•
@  •
@  •
@  ,
•
Q
Q 
•
@  •
@  ,
•
@  •
@  •
@  ,
•
@  •
@  •
@  




.

194
Opetopes
(a)
(b)
Figure 7-G: (a) About half of the category of 5-leafed stable trees, and (b) the
classifying space of the whole category

7.3 A category of trees
195
The diﬀerential d is deﬁned by d(τ) = P ±σ, where if τ ∈P(n)k then the sum
is over all σ ∈P(n)k−1 for which there exists a map σ
- τ. For instance,
d


•
@ •A

= ±
•
@  •
@  •
@  ±
•
Q
Q 
•
@  •
@  .
When the signs are chosen appropriately this deﬁnes an operad P of chain com-
plexes. A P-algebra is called an A∞-algebra, to be thought of as an up-to-
homotopy diﬀerential graded non-unital algebra; the usual example is the sin-
gular chain complex of an A∞-space. A P-category is called an A∞-category
(see 5.1.11), and consists of a collection of objects, a chain complex Hom(a, b)
for each pair (a, b) of objects, maps deﬁning binary composition, chain homo-
topies witnessing that this composition is associative up to homotopy, further
homotopies witnessing that the previous homotopies obey the pentagon law up
to homotopy, and so on. A∞-categories are cousins of weak ω-categories, as we
see in 10.2.
Finally, since the polytopes Kn = B(StTr(n)) describe higher associativity
conditions, they also arise in deﬁnitions of higher-dimensional category.
For
example, the pentagon K4 occurs in the classical deﬁnition of bicategory (1.5.1),
and the polyhedron K5 occurs as the ‘non-abelian 4-cocycle condition’ in Gordon,
Power and Street’s deﬁnition of tricategory [1995].
We have already described the set tr(n) of n-leafed trees. Maps σ
- τ
between trees are described by induction on the structure of τ:
• if τ = | then there is only one map into τ; it has domain | and we write
it as 1 | : |
- |
• if τ = (τ1, . . . , τn) for τ1 ∈tr(k1), . . . , τn ∈tr(kn) then a map σ
-
τ consists of trees ρ ∈tr(n), ρ1 ∈tr(k1), . . . , ρn ∈tr(kn) such that σ =
ρ◦(ρ1, . . . , ρn), together with maps
ρ1
θ1- τ1,
. . . ,
ρn
θn- τn,
and we write this map as
σ = ρ◦(ρ1, . . . , ρn)
!ρ∗(θ1,...,θn)
- (τ1, . . . , τn) = τ.
(7:10)
It follows easily that the n-leafed corolla νn = ( | , . . . , | ) is the terminal object
of Tr(n): the unique map from σ ∈tr(n) to νn is !σ ∗(1 | , . . . , 1 | ).
The rest of the structure of the Cat-operad TR can be described in a similarly
explicit recursive fashion.
To make precise the intuition that a map of trees is a function of some sort,
functors
V : Tr
- Set,
E : Trop
- Set

196
Opetopes
(a)
V (θ)
σ
?
τ
θ
(b)
1
2
3 4
5
6
7
1
2
3
4
5,6
7
6
E(θ)
Figure 7-H: The eﬀect on (a) vertices and (b) edges of a certain map of 4-leafed
trees
can be deﬁned, encoding what happens on vertices and edges respectively. Both
functors turn out to be faithful, which means that a map of trees is completely
determined by its eﬀect on either vertices or edges. The following account of V
and E is just a sketch.
The more obvious of the two is the vertex functor V , deﬁned on objects by
• V ( | ) = ∅
• V ((τ1, . . . , τn)) = 1 + V (τ1) + · · · + V (τn).
The edge functor E can be deﬁned by ﬁrst deﬁning a functor
En : Tr(n)op
- (n + 1)/Set
for each n ∈N, where (n + 1)/Set is the category of sets equipped with (n + 1)
ordered marked points. This deﬁnition is again by induction, the idea being that
En associates to a tree its edge-set with the n input edges and the one output
edge (root) distinguished.
Fig. 7-H illustrates a map θ : σ
- τ in Tr(4);
part (a) (= Fig. 7-C(c)) shows its eﬀect V (θ) on vertices; part (b) shows E(θ),
taking E(τ) = {1, . . . , 7} and labelling the image of i ∈{1, . . . , 7} under E(θ) by
an i on the edge (E(θ))(i) of σ.
A map of trees will be called surjective if it is built up from contractions of
internal edges (the analogues of degeneracy maps in D). Formally, the surjective
maps in Tr are deﬁned by:
• 1 | : |
- | is surjective
• with notation as in (7:10), !ρ ∗(θ1, . . . , θn) is surjective if and only if each
θi is surjective and ρ ̸= | .
The crucial part is the last: the unique map !ρ from ρ ∈tr(n) to the corolla νn
is made up of edge-contractions just as long as ρ is not the unit tree | .
Dually, a map of trees is injective if, informally, it is built up from adding
vertices to the middle of edges (the analogues of face maps in D). Formally,

7.3 A category of trees
197
• 1 | : |
- | is injective
• with notation as above, !ρ ∗(θ1, . . . , θn) is injective if and only if each θi is
injective and ρ is either νn or | (the latter only being possible if n = 1).
The punchline is that the various possible notions of a map of trees being
‘onto’ (respectively, ‘one-to-one’) all coincide:
Proposition 7.3.1 The following conditions on a map θ : σ
- τ in Tr are
equivalent:
a. θ is epic
b. θ is surjective
c. V (θ) is surjective
d. E(θ) is injective (sic).
Moreover, if each condition is replaced by its dual then the equivalence persists.
Proof
Omitted. ‘Moreover’ is not just an application of formal duality, since
surjectivity and injectivity are not formal duals.
2
We ﬁnish this section by re-considering brieﬂy what we have done with trees,
but this time with 2-pasting diagrams instead. This gives a very good impression
of the category of n-pasting diagrams for arbitrary n.
The objects of the category Pd2 = Tr are the opetopic 2-pasting diagrams.
A map θ : σ
- τ in Pd2 takes a 2-pasting diagram σ, partitions it into a ﬁnite
number of sub-pasting diagrams, and replaces each of these sub-pasting diagrams
by the 2-opetope
⇓

 ...
BB
with the same number of input edges, to give the codomain τ. Another way to
put this is that each of the 2-opetopes v making up the pasting diagram τ has
assigned to it a 2-pasting diagram σv with the same number of input edges, and
when the σv’s are pasted together according to the shape of τ, the result is the
pasting diagram σ. Fig. 7-I shows a map in Pd2, in (a) as a partition of σ and
in (b) as a family (σv) indexed over the regions v of τ; these correspond precisely
to the tree pictures in Figs. 7-C(b) and (a) respectively.
More generally, a map of n-pasting diagrams consists of the replacement of
some sub-pasting diagrams by their bounding opetopes. When the sub-pasting
diagrams are non-trivial, this amounts to the removal of some internal faces of
codimension one. For n = 2, faces of codimension one are edges, and the trivial
case is the replacement of the 2-pasting diagram

198
Opetopes
σ
(a)
τ
(b)
Figure 7-I: Two pictures of a map in Pd2
1
2
3
4
5
6
7
a,d
b,c
?
V (θ)
6
E(θ)
1
2
3
4
5,6
7
a
b
c
d
σ
τ
?
θ
Figure 7-J: The eﬀects of V and E on a map of 2-pasting diagrams
by the 2-opetope
⇓
.
In Fig. 7-I, there are two instances of edge-deletion and one instance of inﬂating
the trivial 2-pasting diagram. This is the distinction between epics (degeneracy
maps) and monics (face maps) in Pd2, as we saw for trees.
The classical connections between trees and A∞-structures can, of course, be
phrased equally in terms of 2-pasting diagrams. This is probably the natural ap-
proach if we want to incorporate A∞-structures into higher-dimensional algebra.
Stable trees correspond to 2-pasting diagrams not containing any copies of either
of the 2-opetopes
⇓
,
⇓
—in other words, those that can be drawn using only straight lines.
Because of the inversion of dimensions, the ‘vertex functor’ V : Tr = Pd2
-
Set assigns to a 2-pasting diagram its set of faces, or regions, or constituent 2-
opetopes.
(Compare C.4.6.)
The ‘edge functor’ E : Pd2
op
- Set is still
aptly named. Nothing interesting happens on the actual vertices of 2-pasting
diagrams. Fig. 7-J shows the eﬀects of V and E on the map θ : σ
- τ of
Fig. 7-I: the regions of σ are labelled a, b, c, d, and the image of the region a
under the function V (θ) is also labelled a, and so on; similarly, the edges of τ are

7.4 Opetopic sets
199
labelled 1, . . . , 7 and their images under E(θ) are labelled correspondingly. The
same example was also shown in Fig. 7-H, using trees.
The pictures of 2-pasting diagrams can be taken seriously, that is, geometri-
cally realized. This leads quickly into the geometric realization of opetopic sets,
and so to the underlying (‘singular’) opetopic set of a topological space, one of
the motivating examples of a weak ω-category. We come to this in the next
section.
7.4
Opetopic sets
Opetopes were deﬁned by Baez and Dolan in order to give a deﬁnition of weak
n-category. Their deﬁnition has been subject to various modiﬁcations by various
other people, all of the form ‘a weak n-category is an opetopic set with certain
properties’. The next two sections are a discussion of the general features of such
deﬁnitions, not concentrating on any version in particular.
In this section I will explain what an opetopic set is. Again, there are various
proposed deﬁnitions, most of which have been proved equivalent by Cheng (see
the Notes). Rather than giving any particular one of them, I will list some prop-
erties satisﬁed by the category O of opetopes, an opetopic set being a presheaf on
O. Using this, I will show how every topological space has an underlying opetopic
set, to be thought of as its ‘singular opetopic set’ or ‘fundamental ω-groupoid’.
This will motivate the deﬁnition of weak n-category in the next section.
Opetopic sets should be thought of as something like simplicial sets. A simpli-
cial set is a presheaf on the category ∆of simplices; an opetopic set is a presheaf
on the category O of opetopes. Actually, it might be more apposite to compare
opetopic sets to presheaves on the category ∆inj of nonempty ﬁnite totally or-
dered sets and order-preserving injections, rather than whole simplicial sets: we
only consider face maps between opetopes, not degeneracies.
Here is an informal description of the category O of opetopes. The set of
objects is the set `
n∈N On of all opetopes of all dimensions. A map ω′
- ω is
an embedding of ω′ as a face of ω. For example, there are four maps in O from
the unique 1-opetope
-
into the 2-opetope
ω =
⇓


-
A
AU
-,
corresponding to the three input edges and one output edge of ω. There are
also four maps from the unique 0-opetope • into ω, corresponding to its four
vertices. Along with the identity 1ω, that enumerates all of the maps into ω in
O. Similarly, there are 21 maps whose codomain is the 3-opetope ω illustrated in
Fig. 7-K: seven maps from the unique 0-opetope, nine from the unique 1-opetope,
one from the 2-opetope with two input edges, two from the 2-opetope with three
input edges, one from the 2-opetope with six input edges, and one from ω itself
(the identity 1ω).

200
Opetopes
⇓
⇓
⇓
⇓
Figure 7-K: A 3-opetope with 21 sub-opetopes
In order to prove results about the relation between opetopic sets and topo-
logical spaces, we will need to know some speciﬁc properties of the category O.
They are listed here, along with a few more properties that will not be needed
but add detail to the picture. So, O is a small category such that:
a. the set of objects of O is a disjoint union of subsets (On)n∈N; we write
dim(ω) = n if ω ∈On
b. if ω′
ρ- ω is a map in O then dim(ω′) ≤dim(ω)
c. if ω′
ρ- ω is a map in O with dim(ω′) = dim(ω) then ρ = 1ω
d. every map in O is monic
e. every map in O is a composite of maps of the form ω′
- ω with dim(ω) =
dim(ω′) + 1
f. if dim(ω) = dim(ω′) + 1 then every map ω′
- ω can be classiﬁed as
either a ‘source embedding’ or a ‘target embedding’
g. if ω ∈O with dim(ω) ≥1 then the set of pairs (ω′, ρ) with dim(ω) =
dim(ω′) + 1 and ρ : ω′
- ω is ﬁnite, and there is exactly one such pair
for which ρ is a target embedding.
Many of these properties can be compared to properties of ∆inj. They also imply
that every object of O is the codomain of only ﬁnitely many maps—in other
words, has only a ﬁnite set of sub-opetopes.
An opetopic set is by deﬁnition a functor X : Oop
- Set.
If Y :
∆op
- Set is a simplicial set and [n] ∈∆then an element y of Y [n] is
usually depicted as a label attached to an n-simplex, and the images of y under
the various face maps as labels on the various faces of the n-simplex, as in
y0
y1
y2
y01
y12
y02
y

7.4 Opetopic sets
201
for n = 2. Similarly, an opetopic set can be thought of as a system of labelled
opetopes: if ω ∈On and x ∈X(ω) then x is depicted as a label on the n-opetope
ω, and the images (Xρ)(x) ∈X(ω′) of x under the various face maps ρ : ω′
-
ω as labels on the faces of ω. For example, if ω is the 2-opetope with 3 input
edges then x ∈X(ω) is drawn as
a0
a1
a2
a3
f1
f2
f3
f
⇓x
where a0, a1, a2, a3 are the elements of X(•) induced from x by the four diﬀerent
maps from the unique 0-opetope • to ω in O, and similarly f1, f2, f3, f for the
unique 1-opetope. The elements of `
ω∈On X(ω) are called the n-cellsof X, for
n ∈N.
Opetopic sets can also be (informally) deﬁned without reference to a category
of opetopes. Thus, an opetopic set is a commutative diagram of sets and functions
...
...
...
X′
2
X2
X′
1
s
t
?

X1
s
t
?
-
X0 = X′
0
s
t
?

X0
s
t
?
-
(7:11)
where for each n ≥1, the set X′
n and the functions s : X′
n
- X′
n−1 and
t : X′
n
- Xn−1 are deﬁned from the sets Xn, X′
n−1, Xn−1, . . . , X′
1, X1, X0 and
the functions s, t between them in the way now explained. As usual for directed
graphs or globular sets, elements of X0 and X1 are called 0-cells and 1-cells
respectively, and drawn as labelled points or intervals. An element of X′
1 is called
a 1-pasting diagram in X, and consists of a diagram
a0•
f1-a1•
f2-
· · ·
fk-ak
•
(7:12)
of cells in X (k ∈N). An element α ∈X2 is called a 2-cell; its source sα is a
1-pasting diagram in X, and its target tα a 1-cell. If sα is the 1-pasting diagram
of (7:12) and tα is
a0•
g-ak
•

202
Opetopes
then α is drawn as
•
•
•

7

1
S
SSw
-
⇓
· · ·
a0
a1
ak.
f1
f2
fk
g
α
(7:13)
An element of X′
2 is a 2-pasting diagram in X, that is, consists of a ﬁnite
diagram of cells of the form (7:13) pasted together, a typical example being
•
•
•
•
•
•
•
•
•
•
J
JJ]
  PP
P
q
-7XXX
zQQ
Q
s



+
!
!
) ?


7
S
S
Sw
-
⇓
⇓
⇓
⇓
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
f1
f2
f3
f4
f5
f6
f7
f8
f9
f10
f11
f12
f13
α1
α2
α3
α4
.
(7:14)
Note that the arrows go in compatible directions: for instance, the target or
output edge f11 of α3 is a source or input edge of α1. The source of this element
of X′
2 is
a0•
f1-
· · ·
f9- a9
•
∈X′
1,
and the target is f13 ∈X1. An element Γ ∈X3 is called a 3-cell; if, for instance,
sΓ is the 2-pasting diagram (7:14) then tΓ is of the form (7:13) with k = 9 and
g = f13, and we picture Γ as being a label on the evident 3-opetope (whose
output face is itself labelled α and whose input faces are labelled α1, α2, α3, α4).
And so it continues.
Perhaps the easiest example of an opetopic set is that arising from a topolog-
ical space. We can deﬁne this rigorously using only a few of the properties of O
listed above. But ﬁrst we need to ‘recall’ two constructions, one from topology
and one from category theory.
The topology is the cone construction. This is the canonical way of embedding
a given space into a contractible space, and amounts formally to a functor Cone
and a (monic) natural transformation ι as shown:
Top
id
Cone
ι R

?
Top.
Given a space E, the contractible space Cone(E) is the pushout
E
e 7−→(e,1)
- E × [0, 1]
1
?
- Cone(E)
?
in Top, where 1 is the one-point space.
If E is empty then Cone(E) = 1;
otherwise Cone(E) is E × [0, 1] with all points of the form (e, 1) identiﬁed. The
inclusion ιE : E ⊂- Cone(E) sends e to (e, 0).

7.4 Opetopic sets
203
The category theory is the construction from any functor
J : C
- E
of a pair of adjoint functors
E
U
⊤-

F
[Cop, Set].
(7:15)
Here C is any small category and E any category with small colimits. The right
adjoint U is deﬁned by
(UE)(C) = E(JC, E)
(E ∈E, C ∈C). The left adjoint F is the left Kan extension of J along the
Yoneda embedding:
C
Yoneda- [Cop, Set]
E.
F
.............
J
-
Explicitly, F is given by the coend formula
FX =
Z C∈C
XC × JC
(X ∈[Cop, Set]). As the Yoneda embedding is full and faithful, this is a ‘genuine’
extension: F(C(−, C)) ∼= JC. The best-known example—and probably the best
remedy for readers new to Kan extensions and coends—involves simplicial sets.
Here
(C
J- E) = (∆
J- Top)
where J sends [n] ∈∆to the standard n-simplex ∆n. Then in the adjunction
Top
U
⊤-

F
[∆op, Set],
U sends a space to its underlying (singular) simplicial set and F is geometric
realization.
The coend formula above becomes the formula more familiar to
topologists,
FX = (
a
n∈N
Xn × ∆n)/ ∼
(Segal [1968, §1], Adams [1978, p. 58]) The isomorphism F(∆(−, [n])) ∼= ∆n
asserts that the realization of the simplicial n-simplex ∆(−, [n]) is the topological
n-simplex ∆n.
To deﬁne both the underlying opetopic set of a topological space and, con-
versely, the geometric realization of an opetopic set, it is therefore only necessary
to deﬁne a functor J : O
- Top. We do this under the assumption that O is
a category with properties (a)–(c) (p. 200). The idea is, of course, that J assigns

204
Opetopes
to each n-opetope ω the topological space J(ω) looking like our usual picture
of ω (and homeomorphic to the closed n-disk). In the underlying opetopic set
UE of a space E, an element of (UE)(ω) is a continuous map from J(ω) into
E; conversely, if X is an opetopic set then the space FX is formed by gluing
together copies of the spaces J(ω) according to the recipe X.
For n ∈N, let O(n) be the full subcategory of O with object-set S
k≤n Ok.
We will construct for each n a functor Jn : O(n)
- Top such that the diagram
O(0) ⊂
- O(1) ⊂
- O(2) ⊂
- · · ·
. . .
Top
J2
?
J1
-
J0
-
commutes. Since O is the colimit of the top row, this will induce a functor J of
the form desired.
The unique 0-opetope
• is drawn as a one-point space, so we deﬁne J0 to
have constant value 1. Let n ∈N and suppose that we have deﬁned Jn. By the
mechanism described above, Jn induces a geometric realization functor
Fn : [O(n)op, Set]
- Top.
The functor Jn+1 is deﬁned as follows. Its value on the subcategory O(n) of
O(n + 1) is the same as that of Jn. Any object ω of O induces a functor
O(−, ω)|O(n) :
O(n)op
-
Set,
χ
7−→
O(χ, ω),
and if ω ∈On+1 then we put
Jn+1(ω) = Cone(Fn(O(−, ω)|O(n))).
This deﬁnes Jn+1 on objects. By assumptions (b) and (c) on O, the only remain-
ing maps on which Jn+1 needs to be deﬁned are those of the form ρ : ω′
- ω
where ω′ is an object of O(n) and ω ∈On+1. This is done by taking Jn+1(ρ) to
be the composite
Jn(ω′)
∼- Fn(O(−, ω′)|O(n))
Fn(ρ∗)
- Fn(O(−, ω)|O(n)) ⊂ι- Jn+1(ω)
where the isomorphism is the one noted above and ρ∗is composition with ρ.
To see why this is sensible, consider the ﬁrst inductive steps. The geometric
realization functor
F0 : [O(0)op, Set] ∼= Set
- Top
realizes sets as discrete spaces. If ω is the unique 1-opetope then
O(−, ω)|O(0) : O(0)op
- Set

7.5 Weak n-categories: a sketch
205
has value 2, since there are two maps from the unique 0-opetope ω′ into ω; hence
J1(ω) = Cone(O(−, ω)|O(0))
is the cone on the discrete 2-point space, which is homeomorphic to the unit in-
terval [0, 1]. The two maps ω′
-
- ω are sent by J1 to the two maps 1
-
- [0, 1]
picking out the endpoints. For the next inductive step, n = 1, note that
F1 : [O(1)op, Set]
- Top
is the usual functor geometrically realizing directed graphs. If ω is the 2-opetope
with r input edges then O(−, ω)|O(1) is the directed graph

 
...
BBN
-
with r + 1 vertices and r + 1 edges, whose geometric realization is the circle S1;
hence J1(ω) is Cone(S1), homeomorphic to the closed disk D2.
It should certainly be true in general that if ω is an n-opetope then J(ω) is
homeomorphic to the n-disk Dn, but we do not have enough information about
O to prove that here.
A similar construction can be tried with strict ω-categories in place of spaces.
The idea now is that every n-opetope gives rise to a strict n-category—hence
to a strict ω-category in which the only cells of dimension greater than n are
identities—and every map between opetopes gives rise to a strict functor between
the resulting strict ω-categories. For example, the strict 2-category associated to
the 2-opetope
⇓


-
A
AU
-
is freely generated by this diagram, in other words, by 0-cells a0, a1, a2, a3, 1-cells
fi : ai−1
- ai (i = 1, 2, 3) and f : a0
- a3, and a 2-cell f3◦f2◦f1
- f.
However, the formal construction is more diﬃcult than that for topological spaces
because there is a question of orientation. I do not know whether properties (a)–
(g) of O suﬃce to do the construction, but we would certainly need to know more
about O in order to say anything really useful.
7.5
Weak n-categories: a sketch
The opetopic sets arising from topological spaces and from strict ω-categories
should all be weak ω-categories. ‘Should’ means that if someone proposes to
deﬁne a weak ω-category as an opetopic set with certain properties then these
two families of examples must surely be included—or if not, their concept of weak
ω-category is very diﬀerent from mine. So let us now look at the properties we
might ask of an opetopic set in order for it to qualify as a weak ω-category.
The situation is roughly like that in 3.3, where we characterized the (plain)
multicategories that arise from monoidal categories and so were able to re-deﬁne

206
Opetopes
a monoidal category as a multicategory with properties. The main observation
was that if a1, . . . , ak are objects of a monoidal category A then in the underlying
multicategory C, the canonical map
a1
ak
· · ·
A
A
A
A




(a1 ⊗· · · ⊗ak)
is ‘universal’ as a map with domain a1, . . . , ak, and this determines the tensor
(a1 ⊗· · · ⊗ak) up to isomorphism. It follows that a monoidal category can be
re-deﬁned as a multicategory in which every sequence of objects is the domain of
some ‘universal’ map. Actually, there is a choice of notions of ‘universality’: in 3.3
we spoke of both universal maps and the more general pre-universal maps, and
if we use pre-universals then we must add to this re-deﬁnition the requirement
that the composite of pre-universal maps is pre-universal.
Similarly, a weak ω-category can be thought of as an opetopic set in which
there are ‘enough universals’. Consider, for example, the opetopic set X arising
from a strict ω-category A. The 0- and 1-cells of X are the same as the 0- and
1-cells of A, and a 2-cell in X of the form (7:13) (p. 202) is a 2-cell
a0
fk◦···◦f1
g
R

∨
ak
in A. Now, given such a string of 1-cells f1, . . . , fk, there is a distinguished 2-cell
ε in X of this form: the one corresponding to the identity 2-cell
a0
fk◦···◦f1
fk◦···◦f1
1
R

∨
ak
in A. We would like to pin down some universal property of the 2-cells of X
arising in this way. The obvious approach is to say something like ‘every 2-cell
of X of the form (7:13) factors uniquely through ε’, but to say ‘factors’ we need
to know about composition of 2-cells, even though at present we are only trying
to discuss composition of 1-cells. . .
This problem of ‘downwards induction’ means that it is easier to deﬁne weak
n-category, for ﬁnite n, than weak ω-category.
Here, then, is a sketch of a deﬁnition of weak n-category, roughly that pro-
posed by Baez and Dolan in [1997]. (A summary can also be found as Deﬁnition
X in my [2001b].)
Let n ∈N.
In a moment I will say what it means for a

7.5 Weak n-categories: a sketch
207
cell of an opetopic set to be ‘pre-universal’ (or ‘universal’ in the terminology of
the sources just cited), a condition depending on n. A weak n-category is an
opetopic set X such that
• every pasting diagram is the source of a pre-universal cell
• the composite of pre-universal cells is pre-universal.
The ﬁrst condition means that if n ≥1 and Φ is an n-pasting diagram in X then
there exists a pre-universal (n + 1)-cell ε with source Φ:
Φ
ε- φ.
(In the notation of diagram (7:11), p. 201, we have ε ∈Xn+1, Φ = sε ∈X′
n, and
φ = tε ∈Xn.) Think of φ as a—or, with a pinch of salt, ‘the’—composite of the
cells making up the pasting diagram Φ, and ε as asserting that φ is a composite
of Φ. This suggests the correct meaning of the second condition: that if
Ψ
ε- ψ
is such that the (n + 1)-cell ε and all of the n-cells making up the n-pasting
diagram Ψ are pre-universal, then the n-cell ψ is also pre-universal.
What should it mean for a cell to be pre-universal? For a start, we deﬁne
pre-universality in such a way that all cells of dimension greater than n in a weak
n-category are trivial. This means that if k ≥n then every k-pasting diagram Φ
is the source of precisely one (k + 1)-cell, whose target is to be thought of as the
composite of Φ. Taking k = n, we obtain a composition of n-cells obeying strict
laws.
Now, an n-cell
Φ
ε- φ
is pre-universal if and only if every n-cell
Φ
α- ψ
with source Φ factors uniquely through ε—in other words, there is a unique n-cell
α such that α is the composite
Φ
ε- φ
α- ψ.
Equivalently, ε is pre-universal if for every (n−1)-cell ψ parallel to φ, composition
with ε induces a bijection
X(φ, ψ)
∼- X(Φ, ψ)
(7:16)
of hom-sets. We think of φ as a composite of Φ, or as ‘the’ composite if it is
understood that it is only deﬁned up to isomorphism.
At the next level down, we want to say that an (n −1)-cell Φ
ε- φ is pre-
universal if for every (n −2)-cell ψ parallel to φ, composition with ε induces an

208
Opetopes
equivalence (7:16) of hom-categories. The diﬃculties are that we must ﬁrst put
a category structure on the domain and codomain, and, more signiﬁcantly, that
‘composition’ with ε is not actually a functor, since composition of (n−1)-cells is
only deﬁned up to isomorphism. At this point we really need to set up some more
language, and this would carry us beyond the scope of this informal account, so
I refer the curious reader to the texts cited in the Notes.
The case of weak 2-categories with only one 0-cell is the familiar one of mo-
noidal categories as representable multicategories (3.3). An opetopic set X with
only one 0-cell and trivial above dimension 2 is a set C0 (the 1-cells of X) together
with a set C(a1, . . . , an; a) for each sequence a1, . . . , an, a of elements of C0. If X
is a weak 2-category then there is, as explained above, a composition for 2-cells,
obeying strict associativity and unit laws; this gives a multicategory C with the
indicated hom-sets. A 2-cell of X is pre-universal if and only if the corresponding
arrow of C is pre-universal; the axiom that every 1-pasting diagram of X is the
source of a pre-universal 2-cell is the axiom that every sequence of objects of C
is the source of a pre-universal arrow; the only other axiom is that the composite
of pre-universals is pre-universal. So a one-object weak 2-category is nothing
other than a representable multicategory, which in turn is the same thing as a
monoidal category (Theorem 3.3.4). See Cheng [2003d] for details.
Although the approach described above is modelled on that of Baez and
Dolan [1997], if you look at their paper then you will see immediately that it has
features quite diﬀerent from any that we have considered. Here is a description
of what they actually do.
The most striking feature is that they work throughout with symmetric mul-
ticategories, and that these play essentially the same role as our generalized
multicategories. (In fact they call symmetric multicategories ‘typed operads’,
and symmetric operads ‘(untyped) operads’; this is like the ‘coloured operad’
terminology discussed on p. 43.) The most important thing that they do with
symmetric multicategories is this: given a symmetric multicategory C, they con-
struct a new symmetric multicategory C+, the slice of C, such that
Alg(C) ∼= (symmetric multicategories over C with the same object-set).
(7:17)
The left-hand side is the category of algebras for C as a symmetric multicategory
(p. 54). An object of the category on the right-hand side is a map D
f- C
where D is a symmetric multicategory with D0 = C0 and f is a map of symmetric
multicategories with f0 = 1C0; a map is a commutative triangle.
To describe C+ explicitly it is helpful to use the following terminology: a
reduction law in a multicategory D is an equation stating what the composite
of some family of arrows in D is. So reduction laws in D correspond to trees of
arrows in D, but we think of a reduction law as also knowing what the composite
of this tree is; thus, the collection of reduction laws in D describes the composition
in D completely (indeed, very redundantly). Here ‘tree’ must be understood in
the symmetric sense: branches are allowed to cross over, but the topologically-
obvious identiﬁcations are made so that any tree is equivalent to a ‘combed
tree’—one where all the crossings are at the top. Now:

7.5 Weak n-categories: a sketch
209
• an object of C+ is an arrow of C
• an arrow of C+ is a reduction law in C
• a reduction law in C+ is a way of assembling a family of reduction laws in
C to form a new reduction law.
So if θ1, . . . , θn, θ are arrows of C then an arrow θ1, . . . , θn
- θ in C+ is a tree
with n vertices, totally ordered, such that if θi is written at the ith vertex then
the evident composite can be formed in C and is equal to θ.
Example 7.5.1 Consider the terminal symmetric multicategory 1, whose alge-
bras are the commutative monoids (2.2.2). Then according to the explicit de-
scription, the objects of 1+ are the natural numbers; an arrow k1, . . . , kn
- k
in 1+ is a k-leafed tree with n vertices, totally ordered, such that the ith vertex
has ki branches coming up out of it; composition is by substituting trees into
vertices of other trees. So the arrows k1, . . . , kr
- k describe the ways of
combining one k1-ary operation, one k2-ary operation, . . . , and one kn-ary oper-
ation of a generic symmetric multicategory in order to obtain a k-ary operation.
Hence 1+ is the symmetric multicategory whose algebras are symmetric operads;
we met it as O′ in 2.2.23.
Example 7.5.2 Let I be the initial symmetric operad, which has only one object
and one arrow (the identity). The explicit description says that I+ also has only
one object, in other words, is an operad. The reduction laws of I say that if you
take n copies of the identity arrow, permute them somehow, then compose them,
then you obtain the identity arrow. So an n-ary operation of the operad I+ is an
element of the symmetric group Sn, and I+ is the operad S of symmetries (2.2.20).
Baez and Dolan deﬁne an n-dimensional opetope to be an object of I+···+,
where there are n +’s above the I. For n = 0 and n = 1 this looks ﬁne: there is
only one opetope in each of these dimensions. But a 2-dimensional opetope is an
object of I++, that is, an arrow of I+, and the set of such is the disjoint union
of all the symmetric groups—not the expected answer, N. In their world, there
is not just one 2-dimensional opetope looking like
⇓


-
A
AU
-,
but 6, corresponding to the 3! permutations of the 3 input edges. Similarly, as
observed by Cheng [2003a, 1.3], there are 311040 copies of the 3-dimensional
opetope shown in Fig. 7-K (p. 200). (Verifying this is a useful exercise for un-
derstanding the slice construction.) We come back to this discrepancy later.
Their next step is to deﬁne opetopic set. We omit this; it requires a little
more multicategory theory. Then, as sketched above, they deﬁne what it means
for a cell of an opetopic set to be universal, hence what it means for an opetopic
set to be a weak n-category.

210
Opetopes
Actually, they do more. Their deﬁnition of opetope uses I as its starting point,
but it is possible to start with any other symmetric multicategory C instead, to
obtain a deﬁnition of ‘n-dimensional C-opetope’. There is a corresponding notion
of ‘C-opetopic set’, and of what it means for a C-opetopic set to be an ‘n-coherent
C-algebra’ (in the case C = I, a weak n-category). For example, let C be the
terminal operad 1. Then an n-coherent 1-algebra is what they call a ‘stable n-
category’, or might also be called a symmetric monoidal n-category, as in the
periodic table (p. xx). A 0-coherent C-algebra is just a C-algebra, so a stable
0-category is a commutative monoid, as it should be.
We have discussed elsewhere (p. 185) the diﬀerence between symmetric and
generalized multicategories. In short, the generalized multicategory approach al-
lows the geometry to be represented faithfully, whereas the symmetric approach
destroys the geometry and squashes everything into one dimension; but symmet-
ric multicategories are perhaps easier to get one’s hands on. Cheng oﬀers the
following analogy [2003a, 1.4]: she does not like tidying her desk. As she works
away and produces more and more pages of notes, each page gets put into its
natural position on the desktop, with notes on related topics side-by-side, the
sheet currently being written on at the front, and so on. If she is forced to clear
up her desk then she must destroy this natural conﬁguration and stack the papers
in some arbitrary order; but having put them into a single stack, they are much
easier to carry around.
Despite symmetric multicategories not falling readily into our scheme of gen-
eralized multicategories, there are many points of similarity between Baez and
Dolan’s constructions and ours.
Slicing is an example. Their construction of the slice C+ of a symmetric mul-
ticategory C proceeds in two stages. First they show how to slice a multicategory
by one of its algebras: given a symmetric multicategory D and a D-algebra X,
they construct a symmetric multicategory D/X such that
Alg(D/X) ≃Alg(D)/X.
(7:18)
Then they show how to construct, for any set S, a symmetric multicategory MtiS
such that
Alg(MtiS) ≃SymMulticatS
where the right-hand side is the category whose objects are the symmetric mul-
ticategories with object-set S and whose maps are those leaving the object-set
ﬁxed. (They write D/X as X+ and leave MtiS nameless. We wrote MtiS as
O′
S in 2.2.23.) The slice multicategory C+ of C is then deﬁned by
C+ = MtiC0/C,
(7:19)
so that
Alg(C+) ≃Alg(MtiC0)/C ≃SymMulticatC0/C,
as required. These constructions are mirrored in our world of generalized mul-
ticategories.
First, we saw in Proposition 6.3.3 how to slice a multicategory
by an algebra: if T is a cartesian monad on a cartesian category E, D is a

7.5 Weak n-categories: a sketch
211
T -multicategory, and X is a D-algebra, then there is a T -multicategory D/X
satisfying (7:18). Second, assuming that E and T are suitable, Theorem 6.5.4
tells us that for any S ∈E there is a cartesian monad T +
S on a cartesian category
E+
S such that
Alg(T +
S ) ≃(E, T )-MulticatS,
and so if we take MtiS to be the terminal T +
S -multicategory then
Alg(MtiS) ≃(E, T )-MulticatS
by 4.3.8. So we can deﬁne the T +
S -multicategory C+ by the same formula (7:19)
as in the symmetric case, to reach the analogous conclusion
Alg(C+) ≃Alg(MtiC0)/C ≃(E, T )-MulticatC0/C.
This neatly illustrates the contrast between the two approaches. With gen-
eralized multicategories, slicing raises the dimension: if C is a T -multicategory
then C+ is a T +
C0-multicategory. When we draw the pictures this dimension-shift
seems perfectly natural. On the other hand, if C is a symmetric multicategory
then C+ is again a symmetric multicategory, and this is certainly convenient.
Note also that there is a ﬂexibility in the generalized approach lacking in the
symmetric approach, revealed if we attempt to drop the restriction ﬁxing the
object-set. That is, suppose that given a (T - or symmetric) multicategory C we
wish to deﬁne a new multicategory C+ whose algebras are all multicategories
over C.
This is easy for generalized multicategories: we just replace E+
S and
T +
S by E+ and T + in the construction above, using Theorem 6.5.2, and C+ is a
T +-multicategory. But it is impossible in the symmetric theory, as there is no
symmetric multicategory whose algebras are all symmetric multicategories.
Another point where the two approaches proceed in analogous ways is in the
construction of opetopes.
As discussed, Baez and Dolan considered so-called
C-opetopes for any symmetric multicategory C, not just the case C = I that
generates the ordinary opetopes. The analogous point for generalized multicat-
egories is that the opetopic categories En and monads Tn were generated from
E0 = Set and T0 = id (Deﬁnition 7.1.1), but we could equally well have started
from any other suitable category E and suitable monad T on E.
This would
give a new sequence (OT,n)n∈N of objects of E—the objects of ‘n-dimensional
T -opetopes’.
We now come to the discrepancy between Baez and Dolan’s opetopes and
ours, mentioned on p. 209. A satisfactory resolution has been found by Cheng
[2003a, 2003b], and can be explained roughly as follows. The problem in Baez
and Dolan’s approach is that the slicing process results in a loss of information.
For example, as we observed, the symmetric multicategory I++ has 6 objects
drawn as
⇓


-
A
AU
-,
but formally it contains nothing to say that they are in any way related. That
information about symmetries has been discarded in the slicing process. With

212
Opetopes
each new slicing another layer of information about symmetries is lost, so that
even a simple 3-dimensional opetope is reproduced into hundreds of thousands
of apparently unrelated copies.
The remedy is to work with structures slightly more sophisticated than sym-
metric multicategories, capable of holding just a little more information. For the
short while that we discuss them, let us call them enhanced symmetric mul-
ticategories; the deﬁnition can be found in Cheng [2003a, 2.1] or [2003b, 1.1].
An enhanced symmetric multicategory is like a symmetric multicategory, but as
well as having the usual objects and arrows, it also has morphisms between
objects, making objects and morphisms into a category. The morphisms are not
the same as the arrows, although naturally there are axioms relating them; note
in particular that whereas an arrow has a ﬁnite sequence of objects as its do-
main, a morphism has only one. An enhanced symmetric multicategory in which
the category of objects and morphisms is discrete is an ordinary symmetric mul-
ticategory. (This explains Cheng’s terminology: for her, enhanced symmetric
multicategories are merely ‘symmetric multicategories’, and symmetric multi-
categories are ‘object-discrete symmetric multicategories’. Compare also 4.2.18
above.)
The virtue of enhanced symmetric multicategories is that like symmetric mul-
ticategories, they can be sliced, but unlike symmetric multicategories, slicing re-
tains all the information about symmetries. So in the enhanced version of I++, all
6 objects shaped like the 2-dimensional opetope above are isomorphic—in other
words, there is essentially only one of them. In fact, Cheng has proved [2003b]
that there is a natural one-to-one correspondence between her modiﬁed version
of Baez and Dolan’s opetopes and the opetopes deﬁned in the present text. They
also correspond to the multitopes of Hermida, Makkai and Power: see the Notes
at the end of this chapter.
7.6
Many in, many out
Multicategories and, more speciﬁcally, opetopes, are based on the idea of oper-
ations taking many inputs and one output. We could, however, decide to allow
multiple outputs too, so that 2-opetopes are replaced by shapes like
⇓
,
3-opetopes by shapes looking something like soccer balls, and so on.
The idea of doing higher category theory with cells shaped like this is at-
tractive, since they encompass all the other shapes in common use: globular,
simplicial, cubical and opetopic. In other words, these shapes are intended to
represent all possible composable diagrams of cells in an n- or ω-category, and

7.6 Many in, many out
213
so we are aiming for a universal, canonical, totally unbiased approach, and that
seems very healthy.
There is, however, a fundamental obstruction. It turns out that it does not
make sense to talk about ‘these shapes’, at least in dimensions higher than 2.
They are simply not well-deﬁned.
To make these statements precise we deﬁne an analogue of opetopic set with
multiple outputs as well as multiple inputs, then show that these structures,
unlike opetopic sets, do not form a presheaf category. So there is no category
of many-in, many-out shapes analogous to the category O of opetopes.
Ac-
tually, it is not quite opetopic sets of which we deﬁne an analogue, but rather
n-dimensional versions in which all cells have dimension at most n. We need only
go up to dimension 3 to encounter the obstruction. (It is no coincidence that the
obstruction to simple-minded coherence for n-categories also appears in dimen-
sion 3.) These n-dimensional analogues of opetopic sets are the n-computads of
Street [1976, 1996]; let us deﬁne them for n ≤3.
The category 0-Cptd of 0-computads is Set.
A 1-computad is a directed graph; if C(1) is the category (0
-
- 1) then
1-Cptd = [C(1)op, Set].
We have the familiar adjunction
Cat
U1
⊤
-

F1
1-Cptd
(induced, if you like, by the functor C(1)
- Cat sending 0 to the terminal
category and 1 to the category consisting of a single arrow, using the mechanism
described on p. 203). There is also a functor P1 : 1-Cptd
- Set sending a
directed graph to the set of parallel pairs of edges in it.
A 2-computad is a 1-computad X together with a set X2 and a function
ξ : X2
- P1U1F1(X). A map (X, X2, ξ)
- (X′, X′
2, ξ′) is a pair (X
-
X′, X2
- X′
2) of maps making the obvious square commute. Concretely, a 2-
computad consists of a collection X0 of 0-cells, a collection X1 of 1-cells between
0-cells, and a collection of X2 of 2-cells α of the form
. . .
a1
f2
-
a0 = b0
f1
-
⇓α
an = bm
fn
-
b1
g1
-
gm
-
g2
-
· · ·
where n, m ∈N, ai, bj ∈X0, and fi, gj ∈X1.
(The possibility exists that
n = m = 0: this will prove critical.) Hence
2-Cptd ≃[C(2)op, Set]

214
Opetopes
where C(2) is the evident category with one object for each pair (n, m) of natural
numbers and then two further objects (one for each of dimensions 1 and 0). There
is an adjunction
Str-2-Cat
U2
⊤-

F2
2-Cptd
between strict 2-categories and 2-computads (induced, if you like, by the evident
functor C(2)
- Str-2-Cat). There is also a functor P2 : 2-Cptd
- Set
sending a 2-computad to the set of parallel pairs of 2-cells in it.
Similarly, a 3-computad is a 2-computad X together with a set X3 and a
function X3
- P2U2F2(X), and maps are deﬁned in the obvious way. But
there is no category C(3) of ‘computopes of dimension ≤3’:
Proposition 7.6.1 The category of 3-computads is not a presheaf category.
The following proof is due to Makkai and Zawadowski (private communication)
and to Carboni and Johnstone [2002].
Proof of 7.6.1 The category 3-Cptd is a certain comma category, the Artin
gluing (p. 318) of the functor
P2U2F2 : 2-Cptd
- Set.
Proposition C.3.4 tells us that 3-Cptd is a presheaf category only if P2U2F2 pre-
serves wide pullbacks. We show that it does not even preserve ordinary pullbacks
(which by Carboni and Johnstone [1995, 4.4(ii)] implies that 3-Cptd, far from
being a presheaf category, is not even locally cartesian closed).
Let S be the full subcategory of 2-Cptd consisting of those 2-computads with
only one 0-cell and no 1-cells. Plainly S ≃Set. The inclusion S ⊂- 2-Cptd
preserves pullbacks, so it suﬃces to show that the functor S
- Set obtained
by restricting P2U2F2 to S does not preserve pullbacks.
If X ∈S and C ∈Str-2-Cat then a map X
- U2(C) consists of an object
c of C together with a 2-cell
c
1c
1c
R

∨
c
of C for each 2-cell of X. Example 1.2.3 tells us that a strict 2-category with
only one 0-cell and one 1-cell is just a commutative monoid, so identifying S with
Set,
U2F2 : Set
- Set
is the free commutative monoid functor M. Since any two 2-cells of a 2-computad
in S are parallel, we now just have to show that the endofunctor
A 7−→M(A) × M(A)
of Set does not preserve pullbacks. This follows from the fact that M itself does
not preserve pullbacks, which we proved in Example 4.1.5.
2

7.6 Many in, many out
215
Notes
Opetopes were deﬁned by Baez and Dolan [1997]. Hermida, Makkai and Power deﬁned
their own version [2000, 2001, 2002, 1998], calling them multitopes, as did I [1998a, 4.1],
re-using the name ‘opetope’. After tweaking Baez and Dolan’s deﬁnition (see p. 211),
Cheng proved all three notions equivalent [2003a, 2003b]. On ordering the opetopes
making up a pasting diagram, she writes:
The three diﬀerent theories arise, essentially, from three diﬀerent ways of
tackling this issue. Baez and Dolan propose listing them in every order
possible, giving one description for each ordering. Hermida, Makkai and
Power propose picking one order at random. Leinster proposes not picking
any order.
(Unpublished document, but compare Cheng [2003a, 1.3].) Burroni has also considered
‘ω-multigraphes’, which are similar to opetopic sets [1991, 1993]. Variants of Baez and
Dolan’s deﬁnition of weak n-category have been proposed by Hermida, Makkai and
Power (op. cit.), Makkai [1999], and Cheng [2003a, 2003c, 2003e].
Categories of trees have been used in a variety of situations: see, for instance,
Borcherds [1997], Ginzburg and Kapranov [1994], Kontsevich and Manin [1994], and
Soibelman [1997, 1999]. Some authors consider only stable trees, or consider all trees
but only surjective maps between them. Our maps of trees are the identity on leaf-sets,
but some authors allow the leaves to be moved; doubtless this is natural for certain
parts of higher-dimensional algebra.
For more on A∞-spaces, A∞-algebras, and A∞-categories see, for example, the book
of Markl, Shnider and Stasheﬀ[2002].
The explanation (7.6) of computads as being like opetopic sets is a historical inver-
sion; computads were introduced by Street in [1976]. (His original computads are what
we call 2-computads here.) The question of whether higher-dimensional computads form
a presheaf category has been wreathed in confusion: Schanuel observed correctly that
2-computads form a presheaf category (unpublished), Carboni and Johnstone claimed
incorrectly that this extended to n-computads for all n ∈N [1995, 4.6], Makkai and
Zawadowski proved that 3-computads do not form a presheaf category (unpublished),
and Carboni and Johnstone published a variant of their proof in a corrigendum [2002];
meanwhile, Batanin found a notion of generalized computad and claimed that they form
a presheaf category [1998b], before retracting and reﬁning that claim [2002b] in the light
of Makkai and Zawadowski’s argument. It should be added that deﬁning ‘n-computad’
for n > 3 is much easier if one makes Carboni and Johnstone’s error, and is otherwise
not straightforward.
There is a good deal more to be said about ‘many in, many out’ than I have said
here. See, for instance, the work of Szabo [1975] and Koslowski [2003] on polycategories,
and of Gan [2002] on dioperads; see also the remarks on PROs and PROPs herein.

216
Opetopes

Part III
n-Categories


Chapter 8
Globular Operads
Once Theoﬁlos was [. . . ] painting a mural in a Mytilene
baker’s shop [. . . ] As was his habit, he had depicted the
loaves of bread upright in their trays, like heraldic em-
blems on an out-thrust shield—so that no one could be
in any doubt that they were loaves of bread and very ﬁne
ones, too. The irate baker pointed out that in real life
loaves thus placed would have fallen to the ﬂoor. ‘No,’
replied Theoﬁlos—surely with that calm, implacable self-
certainty which carried him throughout what most people
would call a miserable life—‘only real loaves fall down.
Painted ones stay where you put them.’
The Athenian [1980]
In the next two chapters we explore one possible deﬁnition of weak ω-category.
Its formal shape is very simple: we take the category E of globular sets and the
free strict ω-category monad T on E, construct a certain T -operad L, and deﬁne
a weak ω-category to be an L-algebra.
In order to see that this is a reasonable deﬁnition, and to get a feel for the
concepts involved, we proceed at a leisurely pace. The present chapter is devoted
to contemplation of the monad T (8.1), of T -operads (= globular operads, 8.2),
and of their algebras (8.3). In Chapter 9 we deﬁne the particular globular op-
erad L and look at its algebras—that is, at weak ω-categories.
To keep the
explanation in this chapter uncluttered, the discussion of the ﬁnite-dimensional
case (n-categories) is also deferred to Chapter 9; we stick to ω-categories here.
Globular operads are an absolutely typical example of generalized operads.
Pictorially, they are typical in that T 1 is a family of shapes (globular pasting
diagrams), and an operation in a T -operad is naturally drawn as an arrow with
data ﬁtting one of these shapes as its input. (Compare plain operads, where the
‘shapes’ are mere ﬁnite sequences.) Technically, globular operads are typical in
that T is, in the terminology of Appendix C, a ﬁnitary familially representable
monad on a presheaf category. Hence the explanations contained in this chapter

220
Globular Operads
can easily be adapted to many other species of generalized operad.
8.1
The free strict ω-category monad
In 1.4 we deﬁned a strict ω-category as a globular set equipped with extra struc-
ture, and a strict ω-functor as a map of globular sets preserving that structure.
There is consequently a forgetful functor from the category Str-ω-Cat of strict
ω-categories and strict ω-functors to the category [Gop, Set] of globular sets. In
Appendix F it is shown that this forgetful functor has a left adjoint, that the
adjunction is monadic, and that the induced monad (T, µ, η) on [Gop, Set] is
cartesian.
To understand this in pictorial terms, we start by considering T 1, the free
strict ω-category on the terminal globular set
1 = (· · ·
-
- 1
-
- · · ·
-
- 1).
The free strict ω-category functor takes a globular set and creates all possible
formal composites in it. A typical element of (T 1)(2) looks like
•
?
?
?
W
~
>
•
-•
R

?•,
(8:1)
where each k-cell drawn represents the unique member of 1(k). Note that al-
though this picture contains 4 dots representing 0-cells of 1, they actually all
represent the same 0-cell; of course, 1 only has one 0-cell. The same goes for
the 1- and 2-cells. So we have drawn a ﬂattened-out version of the true, twisted,
picture. We call an element of (T 1)(m) a (globular) m-pasting diagram and
write T 1 = pd.
Since the theory of strict ω-categories includes identities, there is for each
m ≥2 an element of pd(m) looking like (8:1). Although the pictures look the
same, they are regarded as diﬀerent pasting diagrams for diﬀerent values of m;
the sets pd(m) and pd(m′) are considered disjoint when m ̸= m′. When it comes
to understanding the deﬁnition of weak n-category, this point will be crucial.
In the globular set 1, all cells are endomorphisms—in other words, the source
and target maps are equal. It follows that the same is true in the globular set
pd.
We write ∂: pd(m + 1)
- pd(m) instead of s or t, and call ∂the
boundary operator. For instance, the boundary of the 2-pasting diagram (8:1)
is the 1-pasting diagram
•
-•
-•
-•.
It is easy to describe the globular set pd explicitly: writing ( )∗for the free
monoid functor on Set, we have pd(0) = 1 and pd(m + 1) = pd(m)∗. That is,
an (m + 1)-pasting diagram is a sequence of m-pasting diagrams. For example,
the 2-pasting diagram depicted in (8:1) is the sequence
(•
-•
-•
-•, •, •
-•)

8.1 The free strict ω-category monad
221
of 1-pasting diagrams, so if we write the unique element of pd(0) as • then (8:1)
is the double sequence
((•, •, •), (), (•)) ∈pd(2).
The boundary map ∂: pd(m + 1)
- pd(m) is deﬁned inductively by

pd(m + 1)
∂- pd(m)

=

pd(m)
∂- pd(m −1)
∗
(m ≥1). The correctness of this description of pd follows from the results of
Appendix F.
Having described pd as a globular set, we turn to its strict ω-category struc-
ture: how pasting diagrams may be composed.
Typical binary compositions are
•
-
?
?
N

•
-•
R

?•
◦1
•
-•
-•
-
?
?
N

•
=
•
-
?
?
N

•
-•
?
?
?
W
~
>
•,
(8:2)
illustrating the composition function ◦1 : pd(2) ×pd(1) pd(2)
- pd(2), and
•
R

s
+
?
- -
• ◦0 •
-
?
?
N

•
=
•
R

s
+
?
- -
•
-
?
?
N

•,
(8:3)
illustrating the composition function ◦0 : pd(3)×pd(0) pd(3)
- pd(3). These
compositions are possible because the boundaries match: in (8:2), the 1-dimensional
boundaries of the two pasting diagrams on the left-hand side are equal, and sim-
ilarly for the 0-dimensional boundaries (8:3)—indeed, this is inevitable as there
is only one 0-pasting diagram.
(The arguments on the left-hand side of (8:2) are stacked vertically rather
than horizontally just to make the picture more compelling; strictly speaking we
should have written
•
-•
-•
-
?
?
N

• ◦1
•
-
?
?
N

•
-
R

?•
instead. The same applies to (8:3).)
A typical nullary composition (identity) is
•
-•
-•
-•
7−→
•
-•
-•
-•,
(8:4)
illustrating the identity function i : pd(1)
- pd(2) in the strict ω-category
pd. (Recall the remarks above on degenerate pasting diagrams.) So the left-
hand side of (8:4) is a 1-pasting diagram π ∈pd(1), and the right-hand side is
2-pasting diagram 1π = i(π) ∈pd(2). We have ∂(1π) = π.

222
Globular Operads
We will need to consider not just binary and nullary composition in pd, but
composition ‘indexed’ by arbitrary shapes, in the sense now explained. The ﬁrst
binary composition (8:2) above is indexed by the 2-pasting diagram •
-
?
?
N

•, in
that we were composing one 2-cell with another by joining along their bounding
1-cells. The composition can be represented as
•
-
?
?
N

•
-•
R

?•
•
-•
-•
-
?
?
N

•
•
-
?
?
N

•
•
R

?•
▽
△
▽
.
(8:5)
In general, the ways of composing pasting diagrams are indexed by pasting dia-
grams themselves: for instance,
•
-
?
?
N

•
R

?•
-•
•
-•
-•
•
-•
-
?
?
N

•
•
-•
-•
-•
•
R

?•
?
?
?
W
~
>
•
•
R

?•
▽
△
▽
▽
▽
(8:6)
represents the composition







•
-•
-•
◦1
•
R

?•
?
?
?
W
~
>
•







◦0
•
-•
-
?
?
N

• ◦0
•
-•
-•
-•
=
•
R

?•
?
?
?
W
~
>
•
-•
-
?
?
N

•
-•
-•
-•
(with the same pictorial convention on positioning the arguments as previously).
This describes the free strict ω-category pd on the terminal globular set. Before
progressing to free strict ω-categories in general, let us pause to consider an

8.1 The free strict ω-category monad
223
alternative way of representing pasting diagrams, due to Batanin [1998a]: as
trees.
First a warning: these are not the same trees as appear elsewhere in this text
(7.3, for instance). Not only is there a formal diﬀerence, but also the two kinds of
trees play very diﬀerent roles. The exact connection remains unclear, but for the
purposes of understanding what is written here they can be regarded as entirely
diﬀerent species.
The idea is that, for instance, the 2-pasting diagram
•
?
?
?
W
~
>
•
-•
R

?•
can be portrayed as the tree
• • •
•
•
BBB
•
•
SSS
•
(8:7)
according to the following method. The pasting diagram is 3 1-cells long, so the
tree begins life as
•
•
•
SSS
• .
Then the ﬁrst column is 3 2-cells high, the second 0, and the third 1, so it grows
to (8:7). Finally, there are no 3-cells so it stops there.
Formally, an m-stage level tree (m ∈N) is a diagram
τ(m)
- τ(m −1)
- · · ·
- τ(1)
- τ(0) = 1
in the skeletal category D of ﬁnite (possibly empty) totally ordered sets (1.2.2);
we write lt(m) for the set of all m-stage level trees. The element of lt(2) in (8:7)
corresponds to a certain diagram 4
- 3
- 1 in D, for example. (Note that
if τ is an m-stage tree with τ(m) = 0 then the height of the picture of τ will be
less than m.) The boundary ∂τ of an m-stage tree τ is the (m −1)-stage tree
obtained by removing all the nodes at height m, or formally, truncating
τ(m)
- τ(m −1)
- · · ·
- τ(1)
- τ(0)
to
τ(m −1)
- · · ·
- τ(1)
- τ(0).
This deﬁnes a diagram
· · ·
∂- lt(m)
∂- lt(m −1)
∂- · · ·
∂- lt(0)
(8:8)
of sets and functions, hence a globular set lt with s = t = ∂.
Proposition 8.1.1 There is an isomorphism of globular sets pd ∼= lt.

224
Globular Operads
Proof
There is one 0-stage tree, and informally it is clear that an (m + 1)-
stage tree amounts to a ﬁnite sequence of m-stage trees (placed side by side
and with a root node adjoined). Formally, take an (m + 1)-stage tree τ, write
τ(1) = {1, . . . , r}, and for 1 ≤i ≤r and 0 ≤p ≤m, let
τi(p) = {j ∈τ(p + 1) | ∂p(j) = i}.
Then we have a ﬁnite sequence (τ1, . . . , τr) of m-stage trees and so, inductively,
a ﬁnite sequence of m-pasting diagrams, which is an (m + 1)-pasting diagram. It
is easy to check that this deﬁnes an isomorphism.
2
Composition and identities in the strict ω-category pd can also be expressed
in the pictorial language of trees, in a simple way: see Batanin [1998a] or Lein-
ster [2001a, Ch. II].
Let us now see what T does to an arbitrary globular set X. An m-cell of T X
is a formal pasting-together of cells of X of dimension at most m: for instance,
a typical element of (T X)(2) looks like
a•
f
f ′
f ′′
f ′′′
α
α′
α′′
?
?
?
W
~
>b
•
g
-c•
h
h′
γ R

?
d
• ,
(8:9)
where a, b, c, d ∈X(0), f, f ′, f ′′, f ′′′, g, h, h′ ∈X(1), α, α′, α′′, γ ∈X(2), and
s(α) = f, t(α) = f ′, and so on.
We can describe the functor T explicitly; in the terminology of Appendix C,
we give a ‘familial representation’.
First we associate to each pasting diagram π the globular set bπ that ‘looks
like π’. If π is the unique 0-pasting diagram then
bπ = ( · · ·
-
- ∅
-
- ∅
-
- 1).
Inductively, suppose that m ≥0 and π ∈pd(m + 1): then π = (π1, . . . , πr) for
some r ∈N and π1, . . . , πr ∈pd(m), and we put
bπ = ( · · ·
-
-
r
a
i=1
bπi(1)
-
-
r
a
i=1
bπi(0)
-
- {0, 1, . . ., r}).
(8:10)
The source and target maps in all but the bottom dimension are the evident
disjoint unions, and in the bottom dimension they are deﬁned at x ∈bπi(0) by
s(x) = i −1,
t(x) = i.

8.2 Globular operads
225
For example, if π is the 2-pasting diagram (8:1) then bπ is of the form
· · ·
-
- ∅
-
- 4
-
- 7
-
- 4
where ‘4’ means a 4-element set, etc. This reﬂects the fact that the picture (8:1)
contains 4 0-cells, 7 1-cells, 4 2-cells, and no higher cells.
The case of degenerate pasting diagrams deserves attention. If π ∈pd(m)
then 1π ∈pd(m + 1) is represented by the same picture as π; formally, c
1π = bπ.
In fact, if σ ∈pd(m + 1) then bσ(m + 1) = ∅if and only if σ = 1∂σ.
An m-cell of T X is meant to be an ‘m-pasting diagram labelled by cells of
X’, that is, an m-pasting diagram π together with a map bπ
- X of globular
sets, which suggests that there is an isomorphism
(T X)(m) ∼=
a
π∈pd(m)
[Gop, Set](bπ, X).
(8:11)
This is proved as Proposition F.2.3.
For each m-pasting diagram π (m ≥1) there are source and target inclusions
c
∂π
-
- bπ. For instance, when π is the 2-pasting diagram of (8:1), these embed
c
∂π (a string of 3 1-cells) as the top and bottom edges of bπ. The formal deﬁnition is
straightforward and left as an exercise. Given a globular set X, these embeddings
induce functions (T X)(m)
-
- (T X)(m −1) for each m, so that T X becomes
a globular set. So we now have the desired explicit description of the free strict
ω-category functor T .
Finally, T is not just a functor but a monad.
The multiplication turns a
pasting diagram of pasting diagrams of cells of some globular set X into a single
pasting diagram of cells of X by ‘erasing the joins’; compare (8:6). The unit
realizes a single cell of X as a (trivial) pasting diagram of cells of X.
We could also try to describe the multiplication and unit explicitly in terms
of the family (bπ)m∈N,π∈pd(m) ‘representing’ T .
This can be done, but takes
appreciable eﬀort and seems to be both very complicated and not especially
illuminating; as discussed in the Notes to Appendix C, the full theory of familially
representable monads on presheaf categories is currently beyond us. But for the
purposes of this chapter, we have all the description of T that we need.
8.2
Globular operads
A globular operad is a T -operad. The purpose of this section is to describe
globular operads pictorially. The more general T -multicategories are not men-
tioned until the end of Chapter 10, and there only brieﬂy.
A globular operad P is a T -graph
P
pd = T 1
d

1
-
(8:12)

226
Globular Operads
equipped with composition and identity operations satisfying associativity and
identity axioms. (In a standard abuse of language, we use P to mean either the
whole operad or just the globular set at the apex of the diagram.) We consider
each part of this description in turn.
A T -graph (8:12) whose object-of-objects is 1 will be called a collection. So a
collection is merely a globular set over pd, and consists of a set P(π) for each m ∈
N and m-pasting diagram π, together with a pair of functions P(π)
s-
t- P(∂π)
(when m ≥1) satisfying the usual globularity equations. (Formally, 1.1.7 tells
us that a presheaf on G over pd is the same thing as a presheaf on the category
of elements of pd, whose objects are pasting diagrams and whose arrows are
generated by those of the form ∂π
σ-
τ- π subject to the duals of the globularity
equations.)
If we were discussing plain rather than globular operads then pd = T 1 would
be replaced by N, and a collection would be a sequence (P(k))k∈N of sets. In
that context we think of an element θ of P(k) as an operation of arity k (even
though it does not actually act on anything before a P-algebra is speciﬁed) and
draw it as
k



θ
HHHH




...
.
Similarly, if P is a (globular) collection and π an m-pasting diagram for some
m ∈N, we think of an element of P(π) as an ‘operation of arity π’ and draw it
as an arrow whose input is (a picture of) π and whose output is a single m-cell.
For instance, if m = 2 and
π = •
-
?
?
N

•
R

?•
then θ ∈P(π) is drawn as
•
-
?
?
N

•
R

?•
θ ⊲•
R

?•.
So θ is thought of as an operation capable of taking data shaped like the pasting
diagram π as input and producing a single 2-cell as output. This is a ﬁgurative
description but, as we shall see, becomes literal when an algebra for P is present.
Composition in a globular operad P is a map comp : P ◦P
- P of collec-
tions. The collection P ◦P is the composite down the left-hand diagonal of the

8.2 Globular operads
227
diagram
P ◦P
 @
T P

P,
-
T pd
T d

pd
d

T !
-
pd
µ1

and a typical element of (P ◦P)(2) is depicted as
•
-
?
?
N

•
R

?•
•
?
?
?
W
~
>
•
-•
R

?•
•
-•
-•
-
?
?
N

•
•
R

?•
R

?•
•
R

?•.
▽
△
△
▽
π1 =
π2 =
π3 =
π =
θ1
θ2
θ3
θ
(8:13)
Here θ1 ∈P(π1), θ2 ∈P(π2), θ3 ∈P(π3), θ ∈P(π), and it is meant to be
implicit that θ1, θ2, and θ3 match on their sources and targets: tθ1 = sθ2 and
ttθ1 = ssθ3. The left-hand half of the diagram (containing the θi’s) is an element
of the ﬁbre over π of the map T ! : (T P)(2)
- pd(2), and the right-hand half
(θ) is an element of the ﬁbre over π of the map d : P(2)
- pd(2) (that is, an
element of P(π)), so the whole diagram is a 2-cell of P ◦P. More precisely, it is
an element of (P ◦P)(π◦(π1, π2, π3)), where
π◦(π1, π2, π3) =•
?
?
?
W
~
>
•
-•
?
?
?
W
~
>
•
R

?•
R

?•
is the composite of π with π1, π2, π3 in the ω-category pd. So, the composition
function comp of the globular operad P sends the data assembled in (8:13) to an

228
Globular Operads
element θ◦(θ1, θ2, θ3) ∈P(π◦(π1, π2, π3)), which may be drawn as
•
?
?
?
W
~
>
•
-•
?
?
?
W
~
>
•
R

?•
R

?•
•
R

?•.
▽
π◦(π1, π2, π3) =
θ◦(θ1, θ2, θ3)
(The ‘linear’ notation π◦(π1, π2, π3) and θ◦(θ1, θ2, θ3) should not be taken too
seriously: there is evidently no canonical order in which to put the πi’s.)
That comp : P ◦P
- P is a map of globular sets says that composition is
compatible with source and target. In the example above,
s(θ◦(θ1, θ2, θ3))
=
sθ◦(sθ1, sθ3),
t(θ◦(θ1, θ2, θ3))
=
tθ◦(tθ2, tθ3),
where the composite
sθ◦(sθ1, sθ3) ∈P(•
-•
-•
-•
-•
-•)
is as shown:
•
-•
-•
•
-•
-•
-•
•
-•
-•
•
-•
▽
△
▽
∂π =
∂π1 =
∂π3 =
sθ1
sθ3
sθ
and tθ◦(tθ2, tθ3) similarly.
To see what identities in a globular operad P are, let ιm ∈pd(m) be the m-
pasting diagram looking like a single m-cell. (Formally, ι0 is the unique element
of pd(0) and
ιm+1 = (ιm) ∈(pd(m))∗= pd(m + 1),
using the description of pd on p. 220). Then the map 1
η1- pd sends the
unique m-cell of 1 to ιm, so the identities function ids : 1
- P consists of an
element 1m ∈P(ιm) for each m ∈N. For instance, the 2-dimensional identity
operation 12 of P is drawn as
•
R

?•
12
⊲•
R

?•.

8.3 Algebras for globular operads
229
That ids is a map of globular sets says that s(1m) = 1m−1 = t(1m) for all m ≥1.
Finally, the composition and identities in P are required to obey associativity
and identity laws. Together these say that there is only one way of composing
any ‘tree’ of operations of the operad: for instance, if
⋆
⋆
θ12
- ⋆
θ11
-
⋆
θ13
-
⋆
θ -
θ1
-
•
R

?•
⋆
θ2
-
is a diagram of the same general kind as (8:13), with each ⋆representing a 2-
pasting diagram, then
θ◦(θ1◦(θ11, θ12, θ13), θ2) = (θ◦(θ1, θ2))◦(θ11, θ12, θ13, 12).
We have now unwound all of the data and axioms for a globular operad.
Although it may seem complicated on ﬁrst reading, it is summed up simply: a
globular operad is a collection of operations together with a unique composite
for any family of operations that might plausibly be composed.
8.3
Algebras for globular operads
We now conﬁrm what was suggested implicitly in the previous section: that if P
is a globular operad then a P-algebra structure on a globular set X consists of a
function
θ : {labellings of π by cells of X}
- X(m)
for each number m, m-pasting diagram π, and operation θ ∈P(π), satisfying
sensible axioms.
So, ﬁx a globular operad P. According to the general deﬁnition, an algebra
for P is an algebra for the monad TP on the category of globular sets, which is
deﬁned on objects X ∈[Gop, Set] by
TPX
 @
T X

P
-
pd,
d

T !
-
that is, by
(TP X)(m) ∼=
a
π∈pd(m)
P(π) × [Gop, Set](bπ, X).

230
Globular Operads
So a P-algebra is a globular set X together with a function
hπ : P(π) × [Gop, Set](bπ, X)
- X(m)
for m ∈N and π ∈P(m), satisfying axioms. Writing hπ(θ, −) as θ and recalling
that a map bπ
- X of globular sets is a ‘labelling of π by cells of X’, we see
that this is exactly the description above. For example, suppose that
π =
•
?
?
?
W
~
>
•
-• ∈pd(2),
(8:14)
that θ ∈P(π), and that
a = a•
f
f ′
f ′′
f ′′′
α
α′
α′′
?
?
?
W
~
>b
•
g
- c
•
(8:15)
is a diagram of cells in X: then θ assigns to this diagram a 2-cell θ(a) of X.
What are the axioms? First, h : TP X
- X must be a map of globular
sets, which says that s(θ) = s◦θ and t(θ) = t◦θ. So in our example, θ(a) is a
2-cell of the form
d
•
k
k′
R

?
e
•
where
k
=
s(θ)( a•
f-
b•
g-c
• ),
k′
=
t(θ)( a•
f ′′-
b•
g-c
• ),
d
=
ss(θ)( a• ),
e
=
tt(θ)( c• ).
Second, h : TP X
- X must obey the usual axioms for an algebra for a
monad. These say that composition in the operad is interpreted in the model
(algebra) as ordinary composition of functions, and identities similarly.

8.3 Algebras for globular operads
231
An example for composition: take 2-pasting diagrams
π1 = •
?
?
?
W
~
>
•
-•,
π2 = •
-
?
?
N

•,
π = •
R

?•
R

?•
and write
π◦(π1, π2) = •
?
?
?
W
~
>
•
-•
-
?
?
N

•.
Let
θ1 ∈P(π1),
θ2 ∈P(π2),
θ ∈P(π)
be operations of P satisfying tt(θ1) = ss(θ2) ∈P(•). Let
a1 = a•
α
α′
α′′
?
?
?
W
~
>b
•
- c
• ,
a2 = c•
γ
γ′-
?
?
N
d
• ,
a = a•
α
α′
α′′
?
?
?
W
~
>b
•
-c•
γ
γ′-
?
?
N
d
•
be diagrams of cells in X (from which the 1-cell labels have been omitted). Then
there is a composite operation θ◦(θ1, θ2) ∈P(π◦(π1, π2)), and the composition-
compatibility axiom on the algebra X says that
θ◦(θ1, θ2)(a) = θ


•
θ1(a1)R

?
•
θ2(a2)R

?
•


.
An example for identities: if α is a 2-cell of X then 12(α) = α. In general,
the m-pasting diagram ιm (deﬁned on p. 228) satisﬁes c
ιm ∼= G(−, m), and the
identity axiom says that
1m : [Gop, Set](c
ιm, X)
- X(m)
is the canonical (Yoneda) isomorphism.
We meet a non-trivial example of a globular operad in the next chapter.
Its algebras are, by deﬁnition, the weak ω-categories. As a trivial example for
now, the terminal globular operad P is characterized by P(π) having exactly one
element for each pasting diagram π, and for the general reasons given in 4.3.8, a
P-algebra is exactly a T -algebra, that is, a strict ω-category.

232
Globular Operads
Notes
Globular operads were introduced by Batanin [1998a]. He studied them in the wider
context of ‘monoidal globular categories’, and considered ‘operads in C’ for any monoidal
globular category C. There is a particular monoidal globular category Span such that
operads in Span are exactly the globular operads of this chapter, which are the only
kind of operads we need in order to deﬁne weak ω-categories.
The realization that Batanin’s operads in Span are just T-operads, for T the free
strict ω-category monad on globular sets, was ﬁrst recorded in my paper of [1998a], and
subsequently explained in more detail in my [2001a] and [2000b].

Chapter 9
A Deﬁnition of Weak
n-Category
Vico took it for granted that the ﬁrst language of hu-
manity was in the form of hieroglyphics; that is, of
metaphors and animated ﬁgures [. . . ] He had intimated
war with just ‘ﬁve real words’: a frog, a mouse, a bird, a
ploughshare, and a bow
Eco [1995]
Algebraic structures are often deﬁned in a way that suggests conﬂict: generators
vs. relations, operations vs. equations, composition vs. coherence. For example,
in the deﬁnition of bicategory one equips a 2-globular set ﬁrst with various com-
position operations, then with coherence isomorphisms to ensure that some of
the derived compositions are, in fact, essentially the same. One imagines the two
sides pulling against each other: more operations make the structure bigger and
wilder, more equations or coherence cells make it smaller and more tame.
With this picture in mind, the most obvious way to go about deﬁning weak
n-category is to set up a family of higher-dimensional composition operations
subject to a family of higher-dimensional coherence constraints.
This is the
strategy in Batanin’s and Penon’s proposed deﬁnitions, both of which we discuss
in the Chapter 10. But it is not our strategy in this chapter.
In the deﬁnition proposed here, no distinction is made between composition
and coherence. They are seen as two aspects of a single idea, ‘contraction’, not as
opposing forces. This uniﬁed approach is in many ways more simple and graceful:
one idea instead of two.
Contractions are explained in 9.1.
A map of globular sets may have the
property of being contractible, which viewed topologically means something like
being injective on homotopy; if so, it admits at least one contraction, which
is something like a homotopy lifting.
These deﬁnitions lead to deﬁnitions of
contractibility of, and contraction on, a globular operad. By considering some
low-dimensional situations, we see how contraction alone generates a natural

234
A Deﬁnition of Weak n-Category
theory of weak ω-categories.
In 9.2 weak ω-categories are deﬁned formally as algebras for the initial glob-
ular operad equipped with a contraction. We look at some examples, including
the fundamental ω-groupoid of a topological space.
The ﬁnite-dimensional case, weak n-categories, is a shade less easy than the
inﬁnite-dimensional case because we have to take care in the top dimension.
In 9.3 we deﬁne weak n-categories and look at various ways of constructing weak
n1-categories from weak n2-categories, for diﬀerent (possibly inﬁnite) values of
n1 and n2. For instance, if a and b are 0-cells of an n-category X then there is a
‘hom-(n −1)-category’ X(a, b).
The ﬁrst test for a proposed deﬁnition of n-category is that it does something
sensible when n ≤2. We show in 9.4 that ours passes: weak 0-categories are sets,
weak 1-categories are categories, and weak 2-categories are unbiased bicategories.
9.1
Contractions
Given the language of globular operads, we need one more concept in order to
express our deﬁnition of weak ω-category: contractions. First we deﬁne contrac-
tion on a map of globular sets, then we deﬁne contraction on a globular operad,
then we see what this has to do with the theory of weak ω-categories.
Deﬁnition 9.1.1 Let X be a globular set and let m ∈N. Two cells α−, α+ ∈
X(m) are parallel if m = 0 or if m ≥1, s(α−) = s(α+), and t(α−) = t(α+).
Deﬁnition 9.1.2 Let q : X
- Y be a map of globular sets. For m ≥1 and
φ ∈Y (m), write (Fig. 9-A)
Parq(φ)
=
{(θ−, θ+) ∈X(m −1) × X(m −1) | θ−and θ+ are parallel,
q(θ−) = s(φ), q(θ+) = t(φ)}.
A contraction κ on q is a family of functions

Parq(φ)
κφ- X(m)

m≥1,φ∈Y (m)
such that for all m ≥1, φ ∈Y (m), and (θ−, θ+) ∈Parq(φ),
s(κφ(θ−, θ+)) = θ−,
t(κφ(θ−, θ+)) = θ+,
q(κφ(θ−, θ+)) = φ.
So a map admits a contraction when it is ‘injective on homotopy’ in some oriented
sense.
Deﬁnition 9.1.3 A contraction on a collection (P
d- T 1) is a contraction
on the map d.
A contraction on a globular operad is a contraction on its
underlying collection. A map, collection or operad is contractible if it admits
a contraction.

9.1 Contractions
235
ξ
•
θ−
θ+
R

·······?
ξ′
•
q
7−→
q(ξ)
•
q(θ−)
q(θ+)
φ R

?
q(ξ′)
•
Figure 9-A: Eﬀect of a contraction κ, shown for m = 2. The dotted arrow is
κφ(θ−, θ+)
Explicitly, if π is a pasting diagram then Pard(π) is the set of parallel pairs
(θ−, θ+) of elements of P(∂π). A contraction assigns to each pasting diagram π
and parallel θ−, θ+ ∈P(∂π) an element of P(π) with source θ−and target θ+.
We usually write ParP (π) instead of Pard(π); then a contraction κ on P consists
of a function
κπ : ParP (π)
- P(π)
for each pasting diagram π, satisfying the source and target axioms.
To understand what contractions have to do with weak ω-categories, let us
forget these deﬁnitions for a while and ask: what should the operad for weak ω-
categories be? In other words, how should we pick a globular operad L in such a
way that L-algebras might reasonably be called weak ω-categories? The elements
of L(π) are all the possible ways of composing a labelled diagram of shape π in
an arbitrary weak ω-category, so the question is: what such ways should there
be?
There are many sensible answers.
Even for weak 2-categories there is an
inﬁnite family of deﬁnitions, all equivalent (Chapter 3). We saw, for instance,
that we could choose to start with 100 diﬀerent speciﬁed ways of composing
diagrams of shape
•
-•
-•,
just as long as we made them all coherently isomorphic. This particular choice
seems bizarre, and in choosing our theory L we try to make it in some sense
canonical.
So let us decide what operations to put into the theory of weak ω-categories,
starting at the bottom dimension and working our way up.
There should not be any operations in dimension 0 except for the identity:
the only way of obtaining a 0-cell in a weak ω-category is to start with that same
0-cell and do nothing. So if • denotes the unique 0-pasting diagram then we want
L(•) = 1.
In dimension 1, let us be unbiased and specify for each k ∈N a single way of
composing a string
•
-
· · ·
-•
of k 1-cells. These speciﬁed compositions can be built up to make more complex
ones: if we denote the speciﬁed k-fold composition of 1-cells in a weak ω-category

236
A Deﬁnition of Weak n-Category
by
a0•
f1-
· · ·
fk-ak
•
7−→
a0•
(fk◦···◦f1)
-ak
•
(as we did for unbiased bicategories) then an example of a built-up operation is
a0•
f1-a1•
f2-a2•
f3-a3•
f4- a4
•
7−→
a0•
((f4◦f3◦f2)◦f1)
-a4
•
.
There should be no other ways of obtaining a 1-cell in a weak ω-category. So if
χk is the 1-pasting diagram made up of k 1-cells then we want L(χk) to be the
set tr(k) of k-leafed trees (2.3.3).
What operations in a weak ω-category result in a 2-cell?
First, ordinary
composition makes a 2-cell from diagrams of shapes such as
ρ = •
?
?
?
W
~
>
•,
σ = •
R

?•
R

?•.
Choosing to be unbiased again, we specify an operation θ ∈L(ρ) such that
s(θ) = t(θ) = id. When acting in a weak ω-category, θ takes as input a diagram
of 2-cells αi and produces as output a single 2-cell as shown:
a•
f
g
h
k
α
β
γ
?
?
?
W
~
>b
•
7−→
a•
f
k
R

? b
• .
(9:1)
Similarly, we specify one operation of arity σ whose source and target are both
the speciﬁed element of L(χ2) (which is ordinary binary composition of 1-cells):
a•
f
g
αR

?b•
f ′
g′
α′R

? c
•
7−→
a•
(f ′◦f)
(g′◦g)
R

? c
• .
(9:2)
Second, there are coherence 2-cells. For instance, a string of three 1-cells gives
rise to an associativity 2-cell:
•
f1-•
f2-•
f3-•
7−→
•
((f3◦f2)◦f1)
(f3◦(f2◦f1))
R

?•
(9:3)
and similarly in more complex cases:
•
f1-•
f2-•
f3-•
f4-•
7−→
•
(1◦(f4◦f3◦f2)◦1◦f1)
(f4◦(f3◦(f2◦1◦f1)))
R

?•.
(9:4)
Being unbiased once more, we specify operations giving 2-cells in each of these two
ways; we do not, for instance, insist that the coherence cell on the right-hand side

9.1 Contractions
237
of (9:4) should be equal to some composite of associativity and identity coherence
cells.
Here comes the crucial point. It looks as if these two kinds of operations re-
sulting in 2-cells, composition and coherence, are quite diﬀerent—complementary,
even. But they can actually be regarded as two instances of the same thought,
and that makes matters much simpler.
First recall from 8.1 that any 1-dimensional picture of a pasting diagram can
also be taken to represent a (degenerate) element of pd(2). In particular, the
left-hand sides of (9:3) and (9:4) can be regarded as degenerate elements of pd(2):
they are 1χ3 and 1χ4 respectively (see (8:4)). Thus, each of (9:1)–(9:4) portrays
an element of L(π) for some π ∈pd(2).
Now note that four times over, we have taken a 2-pasting diagram π and
elements θ−, θ+ ∈L(∂π) and decreed that L(π) should contain a speciﬁed ele-
ment θ with source θ−and target θ+. In the ﬁrst two cases this is obvious; in
the third (9:3) we took π = 1χ3 (hence ∂π = χ3) and the evident two elements
θ−, θ+ ∈L(χ3); the last is similar.
Which pairs (θ−, θ+) of 1-dimensional operations should we use to generate
the 2-dimensional operations? The simplest possible answer, and the properly
unbiased one, is ‘all of them’. So the principle is:
Let π ∈pd(2) and θ−, θ+ ∈L(∂π). Then there is a speciﬁed element
θ ∈L(π) satisfying s(θ) = θ−and t(θ) = θ+.
‘Speciﬁed’ means that we take these operations θ as primitive and generate the
new 2-dimensional operations in L freely using its operadic structure, just as one
dimension down we took the k-fold composition operations (k ∈N) as primitive
and generated from them derived 1-dimensional operations, indexed by trees. In
dimension 2 the combinatorial situation is more diﬃcult, and I will not attempt
an explicit description of L(π) for π ∈pd(2). A categorical description takes
its place; in the next section, L is deﬁned as the universal operad containing
elements speciﬁed in this way.
Because our principle takes in both composition and coherence at once, it
produces operations traditionally regarded as a hybrid of the two. For instance,
there is a speciﬁed operation of the form
a•
f
g
αR

?b•
f ′
g′
α′R

? c
•
7−→
a•
((f ′◦1)◦f)
(g′◦g)
R

? c
• ,
where traditionally operations such as this would be built up from horizontal
composition (9:2) and coherence cells. The spirit of our deﬁnition is that com-
position and coherence are not separate entities: they are two sides of the same
coin.
What we have said for dimension 2 applies equally in all dimensions, with just
one small reﬁnement: there can only be a θ satisfying s(θ) = θ−and t(θ) = θ+
if θ−and θ+ are parallel. (This is trivial in dimension 2 because L(0) = 1.) So
the general principle is:

238
A Deﬁnition of Weak n-Category
Let n ∈N, let π ∈pd(n), and let θ−, θ+ be parallel elements of L(∂π).
Then there is a speciﬁed element θ ∈L(π) satisfying s(θ) = θ−and
t(θ) = θ+.
In other words:
L is equipped with a contraction.
Everything that we did in choosing L is encapsulated in this statement. We
started from the identity element of L(0), part of the operad structure of L. Then
we chose to specify k-fold compositions of 1-cells, which amounted to applying
the contraction with π = χk. Then the operad structure of L gave derived 1-
dimensional operations such as (f1, f2, f3) 7−→((f3◦f2)◦f1).
Then we chose to
specify one operation of arity π with any given source and target, for each 2-
pasting diagram π. Then the operad structure of L gave derived 2-dimensional
operations. All in all, we chose L to be the universal operad equipped with a
contraction.
9.2
Weak ω-categories
We have decided that the operad for weak ω-categories ought to come with a
speciﬁed contraction, and that it ought to be ‘universal’, ‘minimal’, or ‘freely
generated’ as such. Precisely, it ought to be initial in the category of operads
equipped with a contraction.
Deﬁnition 9.2.1 The category OC of (globular) operads-with-contraction
has as objects all pairs (P, κ) where P is a globular operad and κ a contraction
on P, and as maps (P, κ)
- (P ′, κ′) all operad maps f : P
- P ′ preserving
contractions:
f(κπ(θ−, θ+)) = κ′
π(fθ−, fθ+)
whenever m ≥1, π ∈pd(m), and (θ−, θ+) ∈ParP (π).
Proposition 9.2.2 The category OC has an initial object.
Proof Appendix G.
2
We write (L, λ) for the initial object of OC.
In the previous section we de-
scribed L explicitly in low dimensions and saw informally how to construct it in
higher dimensions: if L is known up to and including dimension n−1, then L(n)
is obtained by ﬁrst closing under contraction then closing under n-dimensional
operadic composition and identities.
Deﬁnition 9.2.3 A weak ω-category is an L-algebra.
We write Wk-ω-Cat for Alg(L). Since the algebras construction is functorial
(p. 123), this category is determined uniquely up to isomorphism.
Observe that the maps in Wk-ω-Cat preserve the operations from L—that
is, the weak ω-category structure—strictly. In this text we do not go as far as a

9.2 Weak ω-categories
239
deﬁnition of weak ω-functor, nor do we reach a deﬁnition of (weak) equivalence of
weak ω-categories. These are serious omissions, and the reader may feel cheated
that we are stopping when we have barely begun, but that is the state of the art.
Deﬁnition 9.2.3 is just one of many proposed deﬁnitions of weak ω-category.
In my [2001b], it is ‘Deﬁnition L1’. Its place among other deﬁnitions is discussed
in Chapter 10.
Example 9.2.4 If P is a contractible operad then any contraction κ on P gives
rise to a unique map f : (L, λ)
- (P, κ) in OC, whose underlying map f :
L
- P of operads induces a functor
Alg(P)
- Wk-ω-Cat.
(9:5)
In other words, any algebra for an operad-with-contraction is canonically a weak
ω-category. All the examples below of weak ω-categories are constructed in this
way.
Functor (9:5) is always faithful (being the identity on underlying globular
sets) and is full if for for each pasting diagram π, the function fπ : L(π)
-
P(π) is surjective (exercise).
Example 9.2.5 The algebras for the terminal globular operad 1 are the strict
ω-categories (by 4.3.8), so the unique map L
- 1 induces a functor
Str-ω-Cat
- Wk-ω-Cat
(9:6)
—a strict ω-category is a special weak ω-category.
The operad 1 admits a unique contraction, and thus becomes the terminal
object of OC. Contractibility of L implies that L(π) is nonempty for each pasting
diagram π, so by the observations of the previous example, functor (9:6) is full
and faithful. We would expect this: if C and D are strict ω-categories then there
ought to be a single notion of ‘strict map C
- D’, independent of whether C
and D are regarded as strict or as weak ω-categories.
Example 9.2.6 A directed graph is indiscrete if for all objects x and y, there
is exactly one edge from x to y. Such a graph has a unique category structure.
The ω-categorical analogue of this observation is that any contractible globular
set X—one for which the unique map X
- 1 is contractible—has a weak ω-
category structure. To see the analogy, note that contractibility of a globular set
says that any two parallel n-cells x and y have at least one (n+1)-cell f : x
-
y between them, and indiscreteness of a graph says that any two objects x and
y have a map f : x
- y between them and any two parallel arrows have an
equality between them.
A contractible globular set X acquires the structure of a weak ω-category as
follows. Recall from 6.4 that there is an endomorphism operad End(X), and that
if P is any operad then a P-algebra structure on X is just an operad map P
-
End(X). In particular, X is canonically an End(X)-algebra. So by 9.2.4, it is
enough to prove that contractibility of the globular set X implies contractibility
of the operad End(X).

240
A Deﬁnition of Weak n-Category
It follows from the deﬁnition of End that for any globular set X and pasting
diagram π ∈pd(n), an element of (End(X))(π) is a sequence of functions
(fn, f −
n−1, f +
n−1, f −
n−2, f +
n−2, . . . , f −
0 , f +
0 )
making the diagram
(T X)(π)
s-
t- (T X)(∂π)
s-
t- (T X)(∂2π)
s-
t-
· · ·
s-
t- (T X)(∂nπ)
X(n)
fn
?
s-
t- X(n −1)
f −
n−1
?
f +
n−1
?
s-
t- X(n −2)
f −
n−2
?
f +
n−2
?
s-
t-
· · ·
s -
t - X(0)
f −
0
?
f +
0
?
(9:7)
commute serially—that is,
s◦f −
i = f −
i−1◦s,
t◦f +
i = f +
i−1◦t
for all i ∈{1, . . . , n}, interpreting both f −
n and f +
n as fn. (Compare Batanin [1998a,
Prop. 7.2].) Contractibility of End(X) says that given all of such a serially com-
mutative diagram except for fn, there exists a function fn completing it. This
holds if X is contractible.
Diﬀerent contractions on X induce diﬀerent contractions on End(X), hence
diﬀerent weak ω-category structures on X. They should all be ‘equivalent’, and
if X is nonempty then the weak ω-category X should be equivalent to 1, but we
do not attempt to make this precise.
Our ﬁnal example of a weak ω-category is one of the principal motivations
for the subject.
Example 9.2.7 Any topological space S gives rise to a weak ω-category ΠωS,
its fundamental ω-groupoid. Indeed, there is a product-preserving functor
Πω : Top
- Wk-ω-Cat.
To show this, we ﬁrst establish the relationship between spaces and globular
sets. As in 1.4.6, the Euclidean disks Dn deﬁne a functor G
- Top, and by
the mechanism described on p. 203, this induces a pair of adjoint functors
Top
Πω
⊤-

|·|
[Gop, Set].
The right adjoint is given on a space S by
(ΠωS)(n) = Top(Dn, S),
so ΠωS is just like the singular simplicial set of S, but with disks in place of
simplices. The left adjoint is geometric realization, given on a globular set X
by the coend formula
|X| =
Z n∈G
X(n) × Dn.

9.2 Weak ω-categories
241
For example, if π is an n-pasting diagram then |bπ| is the space resembling the
usual picture of π; it is a ﬁnite CW-complex made up of cells of dimension at
most n, and is contractible, as can be proved by induction.
To give the globular set ΠωS the structure of a weak ω-category we deﬁne
a contractible operad P (independently of S) and show that ΠωS is naturally a
P-algebra. By 9.2.4, this suﬃces.
Our operad P is analogous to the universal operad for iterated loop spaces (2.2.15).
If π is an n-pasting diagram then an element of P(π) is a map from Dn to |bπ|
respecting the boundaries; for instance, if π is the 1-pasting diagram χk consist-
ing of k arrows in a row then an element of P(π) is an endpoint-preserving map
[0, 1]
- [0, k]. In general, an element of P(π) is a sequence of maps
θ = (θn, θ−
n−1, θ+
n−1, θ−
n−2, θ+
n−2, . . . , θ−
0 , θ+
0 )
making the diagram
|bπ| 

|c
∂π| 

|d
∂2π| 

· · ·


|d
∂nπ| = 1
Dn
θn
6


Dn−1
θ−
n−1
6
θ+
n−1
6


Dn−2
θ−
n−2
6
θ+
n−2
6


· · ·


D0 = 1
θ−
0
6
θ+
0
6
commute serially (as in (9:7)). The maps along the top are induced by the source
and target inclusions \
∂i+1π
-
- d
∂iπ described on p. 225; they are all injective,
so θn determines the whole of θ. The obvious restriction maps P(π)
-
- P(∂π)
make P into a collection.
We have to show that the collection P is contractible, has the structure of
an operad, and acts on the globular set ΠωS for any space S. Contractibility
amounts to the condition that if π is an n-pasting diagram then any continuous
map from the unit (n −1)-sphere into |bπ| extends to the whole unit n-ball Dn,
which holds because |bπ| is contractible. An action of P on ΠωS consists of a
function
θ : [Gop, Set](bπ, ΠωS)
- (ΠωS)(n)
for each n ∈N, π ∈pd(n), and θ ∈P(π), satisfying axioms involving the operad
structure of P (yet to be deﬁned). By the adjunction above, such a function can
equally be written as
θ : Top(|bπ|, S)
- Top(Dn, S),
and we take θ to be composition with θn.
All that remains is to endow the collection P with the structure of an operad
and check some axioms. As suggested by the similarity between the diagrams in
this example and the last, P can be constructed as an endomorphism operad. By
the Yoneda Lemma, an element of P(π) is a sequence of natural transformations
(αn, α−
n−1, α+
n−1, . . . , α−
0 , α+
0 )

242
A Deﬁnition of Weak n-Category
making the diagram
Top(|bπ|, −)
-
- Top(|c
∂π|, −)
-
-
· · ·
-
- Top(|d
∂nπ|, −)
Top(Dn, −)
αn
?
-
- Top(Dn−1, −)
α−
n−1
?
α+
n−1
?
-
-
· · ·
-
- Top(D0, −)
α−
0
?
α+
0
?
commute serially. But for any m ∈N and ρ ∈pd(m) there are isomorphisms
Top(|bρ|, S) ∼= [Gop, Set](bρ, ΠωS) ∼= (T (ΠωS))(ρ)
and
Top(Dm, S) ∼= (ΠωS)(m),
both natural in S ∈Top, so an element of P(π) is a sequence of families of
functions

(fS,n)S∈Top, (f −
S,n−1)S∈Top, (f +
S,n−1)S∈Top, . . . , (f −
S,0)S∈Top, (f +
S,0)S∈Top

(9:8)
natural in S and making the diagram
(T (ΠωS))(π)
s-
t- (T (ΠωS))(∂π)
s-
t-
· · ·
s-
t- (T (ΠωS))(∂nπ)
(ΠωS)(n)
fS,n
?
s-
t- (ΠωS)(n −1)
f −
S,n−1
?
f +
S,n−1
?
s-
t-
· · ·
s -
t - (ΠωS)(0)
f −
S,0
?
f +
S,0
?
commute serially for each S ∈Top. This now looks like (9:7), an operation in an
endomorphism operad. Indeed, composition with T induces a cartesian monad
T∗on the category
[Top, [Gop, Set]],
and if R ∈Top then evaluation at R induces a strict map of monads
evR : ([Top, [Gop, Set]], T∗)
- ([Gop, Set], T )
hence a functor
(evR)∗: T∗-Operad
- T -Operad.
We therefore have a T∗-operad End(Πω) and a globular operad
P ′ = (ev∅)∗(End(Πω)),
and a few calculations reveal that an element of P ′(π) consists of data as in (9:8).
So P ′(π) ∼= P(π), giving P the structure of an operad. Further checks show that
the operad structure is compatible with the action on ΠωS described above.

9.3 Weak n-categories
243
9.3
Weak n-categories
We now imitate what we did for ω-categories to obtain a deﬁnition of weak n-
category. This is straightforward except for one subtlety. We then explore the
relationship between weak n-categories for diﬀerent values of n, and in particular
we see how a weak n-category can be regarded as a weak ω-category trivial above
dimension n.
First recall from 1.4 that an n-globular set is a presheaf on the category Gn
and that there is a forgetful functor from Str-n-Cat to [Gop
n , Set]. Theorem F.2.1
implies that this induces a cartesian monad T(n) on [Gop
n , Set]. A T(n)-graph
whose object-of-objects is 1 will be called an n-collection, a T(n)-operad will
be called an n-globular operad or simply an n-operad, and the category of
n-operads will be written n-Operad.
The subtlety concerns operations in the top dimension. In a bicategory, for
example, there are various ways of composing 2-cell diagrams of shape
•
?
?
?
W
~
>
•
R

?•
-
?
?
N

•,
but each such way is uniquely determined once one has chosen how to compose
the string of three 1-cells along the top and the string of three 1-cells along the
bottom. This is essentially the ‘all diagrams commute’ coherence theorem. In
creating the theory of weak ω-categories we never declared any two operations
to be equal: the contraction on the operad L deferred the relation to the next
dimension. In the ﬁnite-dimensional case we cannot always defer to the next
dimension, and we need a notion of contraction sensitive to that.
Deﬁnition 9.3.1 Let n ∈N. A map q : X
- Y of n-globular sets is tame if
any two parallel n-cells α−, α+ of X satisfying q(α−) = q(α+) are equal.
Deﬁnition 9.3.2 Let n ∈N. A precontraction on a map q : X
- Y of
n-globular sets is a family of functions

Parq(φ)
κφ- X(m)

1≤m≤n,φ∈Y (m)
satisfying the same conditions as those in Deﬁnition 9.1.2. A contraction is a
precontraction on a tame map.
Tameness means injectivity in the top dimension (relative to sources and targets),
so contractibility continues to mean something like ‘injectivity on homotopy’, as
in the inﬁnite-dimensional case.
Deﬁnition 9.3.3 An n-collection (P
d- T(n)1) is tame if the map d is tame,
and a (pre)contraction on the n-collection is a (pre)contraction on the map d.

244
A Deﬁnition of Weak n-Category
Tameness of an n-collection P means that if for all π ∈pd(n), parallel elements
of P(π) are equal, or equivalently the function
(s, t) : P(π)
- ParP (π)
is injective. If P is precontractible then (s, t) is surjective, with one-sided inverse
κπ. Hence a precontraction is a contraction if and only if (s, t) is bijective for all
π ∈pd(n). This implies that a contractible n-operad is entirely determined by
its lower (n −1)-dimensional part; if π ∈pd(n) then P(π) must be the set of
parallel pairs of elements of P(∂π).
Example 9.3.4 A sesquicategory is a category X together with a functor
HOM : Xop × X
- Cat such that
Xop × X
HOM- Cat
Set
ob
?
Hom
-
commutes. The objects of X are called the 0-cells of the sesquicategory, and if
a and b are 0-cells then the objects and arrows of the category HOM(a, b) are
called 1-cells and 2-cells respectively. Any strict 2-category has an underlying
sesquicategory.
Concretely, a sesquicategory consists of a 2-globular set together with struc-
ture and axioms saying that any diagram of shape
•
-
· · ·
-•
has a unique composite 1-cell and any diagram of shape
•
- · · ·
-•
?
?
...
W
~
>
•
- · · ·
-•
has a unique composite 2-cell. (The sequences of cells shown can have any length,
including zero.) See Leinster [2001a, III.1] or Street [1996, §2] for a more detailed
presentation.
What a sesquicategory does not have is a canonical horizontal
composition of 2-cells: given a diagram
a•
f
g
αR

?a′•
f ′
g′
α′R

? a′′
•
,
(9:9)
the only resulting 2-cells of the form
a•
f ′◦f
g′◦g
R

? a′′
•

9.3 Weak n-categories
245
are the derived composites (α′g)◦(f ′α) and (g′α)◦(α′f), which in general are not
equal.
There is a 2-operad Ssq whose algebras are sesquicategories. If π is a 0- or
1-pasting diagram then Ssq(π) = 1. A 2-pasting diagram is a ﬁnite sequence
(k1, . . . , kn) of natural numbers, as observed in 8.1; pictorially, n is the width of
the diagram and ki the height of the ith column. Writing m = {1, . . . , m}, an
element of Ssq(k1, . . . , kn) is a total order on the disjoint union k1 + · · · + kn
that restricts to the standard order on each ki; hence
|Ssq(k1, . . . , kn)| = (k1 + · · · + kn)!
k1!k2! · · · kn!
.
A precontraction on Ssq amounts to a choice of element of Ssq(k1, . . . , kn) for
each n, k1, . . . , kn ∈N, and since this set always has at least one element, Ssq is
precontractible. But it is not contractible, or equivalently not tame: for since all
elements of Ssq(k1, . . . , kn) are parallel, this would say that |Ssq(k1, . . . , kn)| = 1
for all n, k1, . . . , kn, which is false.
The categories n-OP of n-operads-with-precontraction and n-OC of n-operads-
with-contraction are deﬁned analogously to OC (9.2.1).
Proposition 9.3.5 For each n ∈N, the category n-OC has an initial object.
We write (Ln, λn) for the initial object. The proof comes later (9.3.10).
Deﬁnition 9.3.6 Let n ∈N. A weak n-category is an Ln-algebra.
We write Wk-n-Cat for Alg(Ln), the category of weak n-categories and strict
n-functors. This contains Str-n-Cat as a full subcategory, just as in the inﬁnite-
dimensional case (9.2.5).
We now embark on a comparison of the theories of n-categories for varying
values of n, including n = ω. Among other things we prove Proposition 9.3.5,
the strategy for which is as follows. Imagine Ln being built from the bottom
dimension upwards, just as we did for L: then it is clear that Ln and L should be
the same up to and including dimension n −1. They are diﬀerent in dimension
n, as discussed above in the case n = 2: if π is an n-pasting diagram then an
element of Ln(π) is a parallel pair of elements of Ln(∂π). So we deﬁne an n-
operad from L by discarding all the operations of dimension n and higher, then
adding in parallel pairs as the operations in dimension n, and we prove that this
is the initial n-operad-with-contraction.
Let m, M ∈N ∪{ω} with m ≤M. We compare m- and M-dimensional
structures, using the following natural conventions for the ω-dimensional case:
Gω = G,
T(ω) = T,
ω-Operad = T -Operad,
ω-OP = ω-OC = OC.
We start with globular sets, and the adjunction
[Gop
M, Set]
[Gop
m , Set].
RM
m ?
⊣IM
m
6

246
A Deﬁnition of Weak n-Category
Here Rm
M is restriction: if X is an M-globular set then (RM
m X)(k) = X(k)
for all k ≤m. Its right adjoint IM
m forms the indiscrete M-globular set on an
m-globular set Y ,
· · ·
1-
1- S
1-
1- S
pr1-
pr2
- Y (m)
s-
t- Y (m −1)
s-
t-
· · ·
s-
t- Y (0)
where S is the set of parallel pairs of elements of Y (m).
This adjunction is
familiar in the case M = 1, m = 0: R1
0 assigns to a directed graph its set of
objects (vertices), and I1
0 forms the indiscrete graph on a set (9.2.6). Formally,
RM
m is composition with, and IM
m right Kan extension along, the obvious inclusion
Gm
⊂- GM.
Next we move to the level of operads. The functor RM
m is naturally a weak
map of monads
([Gop
M, Set], T(M))
- ([Gop
m , Set], T(m))
(as shown in Appendix F), and preserves limits. Hence RM
m is naturally a carte-
sian colax map of monads, and by Example 6.7.3, there is an induced adjunction
M-Operad
m-Operad.
(RM
m )∗
?
⊣(IM
m )∗
6
The functor (RM
m )∗forgets the top (M −m) dimensions of an M-operad, and
(IM
m )∗is deﬁned on an m-operad Q at a k-pasting diagram π by
 (IM
m )∗Q

(π) =

ParQ(∂k−m−1π)
if k > m
Q(π)
if k ≤m.
Now we bring in precontractions. A precontraction on an M-operad P re-
stricts to a precontraction on the m-operad (RM
m )∗P, and similarly for (IM
m )∗, so
the previous adjunction lifts to an adjunction
M-OP
m-OP.
(RM
m )∗
?
⊣(IM
m )∗
6
So far, we have proved:
Proposition 9.3.7 For any m, M ∈N∪{ω} with m ≤M, there are adjunctions
[Gop
M, Set]
[Gop
m , Set]
RM
m ?
⊣IM
m
6
M-Operad
m-Operad
(RM
m )∗
?
⊣(IM
m )∗
6
M-OP
m-OP
(RM
m )∗
?
⊣(IM
m )∗
6
deﬁned by restriction RM
m and indiscrete extension IM
m .
2

9.3 Weak n-categories
247
Finally, we consider contractions themselves. We have seen that an n-operad-
with-contraction is entirely determined by its underlying (n −1)-operad-with-
precontraction. In fact, the two types of structure are the same:
Proposition 9.3.8 For any positive integer n, the third adjunction of Proposi-
tion 9.3.7 in the case M = n, m = n −1 restricts to an equivalence
n-OC
(n −1)-OP.
(Rn
n−1)∗?
≃
(In
n−1)∗
6
Proof
Any adjunction C
⊥-

D restricts to an equivalence between the full
subcategory of C consisting of those objects at which the unit of the adjunction
is an isomorphism and the full subcategory of D deﬁned dually. In the case at
hand we have (Rn
n−1)∗◦(In
n−1)∗= 1, and the counit is the identity transformation.
Given an n-operad P with precontraction κ, the unit map
P
- (In
n−1)∗(Rn
n−1)∗P
is the identity in dimensions less than n, and in dimension n is made up of the
functions
(s, t) : P(π)
- ParP (π)
(π ∈pd(n)). So P belongs to the relevant subcategory of n-OP if and only if
this map is a bijection for all π ∈pd(n), that is, κ is a contraction.
2
Example 9.3.9 Let Ssq be the 2-operad for sesquicategories (9.3.4). The re-
sulting 3-operad Gy = (I3
2)∗(Ssq) is given on k-pasting diagrams π by
Gy(π) =

Ssq(∂π) × Ssq(∂π)
if k = 3,
Ssq(π)
if k ≤2.
A Gy-algebra is what we will call a Gray-category. It consists of a 3-globular
set X with a sesquicategory structure on its 0-, 1- and 2-cells and further structure
in the top dimension: given a 3-pasting diagram labelled by cells of X, the ways
of composing it to yield a single 3-cell correspond one-to-one with the ways of
composing both the 2-dimensional diagram at its source and the 2-dimensional
diagram at its target.
Let us explore the 3-dimensional operations. By considering 3-pasting dia-
grams π for which ∂2π is a single 1-cell, we see that for any two 0-cells a and b,
the 2-globular set X(a, b) has the structure of a strict 2-category. More subtly,
take the 2-pasting diagram
ρ = •
R

?•
R

?•,
and recall that ∂(1ρ) = ρ (p. 221). We saw in 9.3.4 that Gy(ρ) = Ssq(ρ) has
exactly two elements θ1, θ2, sending the data in (9:9) to the derived composites
γ1 = (α′g)◦(f ′α),
γ2 = (g′α)◦(α′f)

248
A Deﬁnition of Weak n-Category
respectively. So Gy(1ρ) = {θ1, θ2}2. The element (θ1, θ2) of Gy(1ρ) sends a cell
diagram (9:9) in a Gray-category to a 3-cell of the form
a•
f ′◦f
g′◦g
γ1
γ2
-
R

R
	
a′′
•
.
Similarly, the data of (9:9) is sent by (θ2, θ1) to a 3-cell γ2
- γ1, and by (θi, θi)
to the identity 3-cell on γi. Since these are the only four elements of Gy(1ρ), the
two 2-cells γ2
-

γ1 are mutually inverse. In other words, in a Gray-category
there is a speciﬁed isomorphism between the two derived horizontal compositions
of 2-cells.
Here Gray-categories are treated as structures in their own right, but they
were introduced by Gordon, Power and Street [1995] as a special kind of tri-
category (their notion of weak 3-category). The embedding of Gy-algebras into
the class of tricategories is non-canonical, amounting to the choice of one of the
two derived horizontal compositions of 2-cells. ‘Left-handed Gray-categories’ and
‘right-handed Gray-categories’ therefore form (diﬀerent) subclasses of the class of
all tricategories. Gordon, Power and Street made the arbitrary decision to con-
sider the left-handed version (let us say), and proved the important result that
every tricategory is equivalent to some left-handed Gray-category. By duality,
the same result also holds for right-handed Gray-categories.
We do not set up a notion of weak equivalence of our weak n-categories, so
cannot attempt an analogous coherence theorem, but we can show how to real-
ize Gray-categories as weak 3-categories. Choose a precontraction on Ssq. By
the last proposition, this induces a contraction on (I3
2)∗(Ssq) = Gy, hence a
map L3
- Gy of 3-operads, hence a functor from Gray-categories to weak
3-categories (full and faithful, in fact). The ﬁnal functor depends on the pre-
contraction chosen. A precontraction is (9.3.4) a choice for each n, k1, . . . , kn
of a total order on the set k1 + · · · + kn restricting to the standard order on
each ki, and there are two particularly obvious ones: order the set {1, . . ., n}
either backwards or forwards, then order k1 + · · · + kn lexicographically. The
two embeddings induced are the analogues in our unbiased world of the left- and
right-handed embeddings in the biased world of tricategories.
We can now read oﬀresults relating the theories of n- and ω-categories.
Corollary 9.3.10 (In
n−1)∗(Rω
n−1)∗(L, λ) is an initial object of n-OC, for any
positive integer n.

9.3 Weak n-categories
249
Proof By 9.3.7 and 9.3.8, we have a diagram
ω-OC
(n −1)-OP
(Rω
n−1)∗
?
⊣(Iω
n−1)∗
6
(Rn
n−1)∗
≃
(In
n−1)∗
- n-OC,
and left adjoints and equivalences preserve initial objects.
2
This proves Proposition 9.3.5, the existence of an initial n-operad-with-contraction,
for n ≥1, and tells us that
(Ln, λn) ∼= (In
n−1)∗(Rω
n−1)∗(L, λ).
(The case n = 0 is done explicitly in 9.4.) So Ln is constructed from L by ﬁrst
forgetting all of L above dimension n−1, then adjoining the only possible family
of n-dimensional operations that will make the resulting n-operad contractible.
In particular, Ln and L agree up to and including dimension n −1, as do their
associated contractions:
Corollary 9.3.11 For any positive integer n, there is an isomorphism
(Rn
n−1)∗(Ln, λn) ∼= (Rω
n−1)∗(L, λ)
of (n −1)-operads-with-precontraction.
2
The ideas we have discussed suggest two alternative deﬁnitions of weak n-
category, which we now formulate and prove equivalent to the main one.
The ﬁrst starts from the thought that the cells of dimension at most n in a
weak ω-category do not usually form a weak n-category, but they should do if
the composition of n-cells is strict enough.
Deﬁnition 9.3.12 Let n ∈N and let P be an n-operad. A P-algebra X is tame
if
θ−= θ+ : (T X)(π)
- X(n)
for any π ∈pd(n) and parallel θ−, θ+ ∈P(π).
Any algebra for a tame n-operad, and in particular any algebra for a contractible
n-operad, is tame. A tame ((Rω
n)∗L)-algebra ought to be the same thing as a
weak n-category.
To state this precisely, note that the unit of the adjunction (Rn
n−1)∗⊣(In
n−1)∗
gives a map
α : (Rω
n)∗L
- (In
n−1)∗(Rn
n−1)∗(Rω
n)∗L ∼= Ln
(9:10)
of operads, which induces a functor
Wk-n-Cat
- Alg((Rω
n)∗L).
(9:11)

250
A Deﬁnition of Weak n-Category
Proposition 9.3.13 The functor (9:11) restricts to an equivalence between Wk-n-Cat
and the full subcategory of Alg((Rω
n)∗L) consisting of the tame algebras.
The proof uses a rather technical lemma, whose own proof is straightforward:
Lemma 9.3.14 Let S and S′ be monads on a category C and let ψ : S
- S′
be a natural transformation commuting with the monad structures. Write D for
the full subcategory of CS consisting of the S-algebras (SX
h- X) for which h
factors through ψX. If each component of ψ is split epi then the induced functor
CS′
- CS restricts to an equivalence CS′
- D.
2
Proof of Proposition 9.3.13 The n-operads (Rω
n)∗L and Ln induce respective
monads (T(n))(Rω
n)∗L and (T(n))Ln on [Gop
n , Set], and the map α of (9:10) induces
a transformation ψ from the ﬁrst monad to the second, commuting with the
monad structures. If X is any n-globular set then the map ψX of n-globular sets
is split epi: in dimension k it is the function
a
π∈pd(k)
L(π) × (T(n)X)(π)
`
απ×1
-
a
π∈pd(k)
Ln(π) × (T(n)X)(π),
and απ is bijective when k < n (Corollary 9.3.11), so it is enough to show that
απ is surjective when k = n; this in turn is true because
απ = (s, t) : L(π)
- ParL(π)
and L is precontractible.
The lemma now applies, and we have only to check that D is the subcategory
consisting of the tame ((Rω
n)∗L)-algebras. Since ψ is the identity in dimensions
less than n, an ((Rω
n)∗L)-algebra X is in D if and only if there is a factorization
L(π) × (T(n)X)(π)
απ×1
- Ln(π) × (T(n)X)(π)
X(n)
?
........
action
-
in the category of sets for each π ∈pd(n). We have already seen that απ identiﬁes
two elements of L(π) just when they are parallel, so this is indeed tameness. 2
Corollary 9.3.15 Let n ∈N and N ∈N ∪{ω}, with n ≤N. If X is a weak
N-category with the property that for all π ∈pd(n) and parallel θ−, θ+ ∈LN(π),
θ−= θ+ : (T(N)X)(π)
- X(n),
then its n-dimensional restriction RN
n X inherits the structure of a weak n-category.
Proof The LN-algebra structure on X induces an ((RN
n )∗LN)-algebra structure
on RN
n X (see 6.7). If n = N the result is trivial; otherwise (RN
n )∗LN ∼= (Rω
n)∗L
by 9.3.11, and the result follows from 9.3.13.
2

9.3 Weak n-categories
251
The second alternative deﬁnition says that a weak n-category is a weak ω-
category with only identity cells in dimensions higher than n. We show that this
is equivalent to the main deﬁnition of weak n-category. More generally, we show
that if n ≤N then a weak N-category trivial above dimension n is the same
thing as a weak n-category. The most simple case is that a discrete category is
the same thing as a set.
Deﬁnition 9.3.16 Let n ∈N and N ∈N ∪{ω}, with n ≤N. An N-globular
set X is n-dimensional if for all n ≤k < N, the maps
X(k + 1)
s-
t- X(k)
are equal and bijective.
Any n-dimensional N-globular set is isomorphic to a ‘strictly n-dimensional’ N-
globular set, that is, one of the form
· · ·
1-
1- X(n)
1-
1- X(n)
s-
t- X(n −1)
s-
t-
· · ·
s-
t- X(0).
(9:12)
Theorem 9.3.17 Let n ∈N and N ∈N ∪{ω}, with n ≤N.
There is an
equivalence of categories
Wk-n-Cat ≃(n-dimensional weak N-categories)
where the right-hand side is a full subcategory of Wk-N-Cat.
To prove this we construct the discrete weak N-category on a weak n-category,
then show that the N-categories so arising are exactly the n-dimensional ones.
We start with the discrete construction in the setting of strict higher cate-
gories, and derive from it the weak version. Almost all of the steps involved are
thought-free applications of previously-established theory. Let
DN
n : [Gop
n , Set]
- [Gop
N , Set]
be the functor sending an n-globular set X to the N-globular set of (9:12). This
lifts to a functor
Str-n-Cat ⊂- Str-N-Cat,
and by Lemma 6.1.1, there is a corresponding lax map of monads
(DN
n , ψ) : ([Gop
n , Set], T(n))
- ([Gop
N , Set], T(N)),
which, since DN
n preserves ﬁnite limits, induces in turn a functor
(DN
n )∗: n-Operad
- N-Operad.
Explicitly, if Q is an n-operad and π a k-pasting diagram then
((DN
n )∗Q)(π) =
 Q(∂k−nπ)
if k ≥n
Q(π)
if k ≤n,

252
A Deﬁnition of Weak n-Category
from which it follows that (DN
n )∗lifts naturally to a functor
(DN
n )∗: n-OC
- N-OC.
Since LN is initial in N-OC, there is a canonical map of operads
LN
- (DN
n )∗Ln,
inducing a functor
Alg((DN
n )∗Ln)
- Alg(LN) = Wk-N-Cat.
But we also have from 6.7 a functor
Wk-n-Cat = Alg(Ln)
- Alg((DN
n )∗Ln),
and so obtain a composite functor
DN
n : Wk-n-Cat
- Wk-N-Cat,
(9:13)
as required. A weak N-category isomorphic to DN
n Y for some weak n-category
Y will be called a discrete weak N-category on a weak n-category.
On underlying globular sets, the discrete functor (9:13) is merely the original
functor DN
n , so (9:13) restricts to a functor
DN
n : Wk-n-Cat
- (n-dimensional weak N-categories).
(9:14)
A sharper statement of Theorem 9.3.17 is that this is an equivalence of categories.
Proof of 9.3.17
We show that restriction RN
n is inverse to the functor DN
n
of (9:14).
First, if X is an n-dimensional weak N-category then Corollary 9.3.15 applies
to give RN
n X the structure of a weak n-category. For let π ∈pd(n) and let θ−, θ+
be parallel elements of LN(π). By contractibility of LN, there exists θ ∈LN(1π)
satisfying s(θ) = θ−and t(θ) = θ+. Since any (n + 1)-cell of X has the same
source and target, we have
θ−= s(θ) = s◦θ = t◦θ = t(θ) = θ+.
So by 9.3.15, RN
n induces a functor
RN
n : (n-dimensional weak N-categories)
- Wk-n-Cat.
The composite functor RN
n ◦DN
n on Wk-n-Cat is the identity, ultimately
because the same is true for strict n-categories.
Conversely, let X be an n-
dimensional weak N-category. We may assume that X is strictly n-dimensional (9:12),
which means that there is an equality DN
n RN
n X = X of globular sets. It remains
only to check that the two LN-algebra structures on X agree; but certainly they
agree in dimensions n and lower, and n-dimensionality of X guarantees that they
agree in dimensions higher than n too.
2

9.3 Weak n-categories
253
We ﬁnish with a method for turning higher-dimensional categories into lower-
dimensional ones. It is an analogue of the path space construction in topology
(or with slightly diﬀerent analogies, the loop space construction or desuspension):
given an n-category, we forget the 0-cells and decrease all the dimensions by 1 to
produce an (n −1)-category.
Again, we start by doing it in the strict setting.
A strict n-category is a
category enriched in Str-n-Cat, and a ﬁnite-limit-preserving functor V
-
W between categories with ﬁnite limits induces a ﬁnite-limit-preserving functor
V-Cat
- W-Cat, so the functor Cat
- Set sending a category to its set
of arrows induces a ﬁnite-limit-preserving functor
Str-n-Cat
- Str-(n −1)-Cat
for each positive integer n. This is a lift of the functor
Jn :
[Gop
n , Set]
-
[Gop
n−1, Set],
X
7−→

X(n)
s-
t-
· · ·
s-
t- X(1)

.
By 6.1.1, Jn has the structure of a lax map of monads
 [Gop
n , Set], T(n)

-  [Gop
n−1, Set], T(n−1)

,
which, since Jn preserves ﬁnite limits, induces a functor
(Jn)∗: n-Operad
- (n −1)-Operad.
To describe (Jn)∗explicitly we use the suspension operator Σ : pd(k)
-
pd(k + 1), deﬁned by Σπ = (π). Here pd(k + 1) is regarded as the free monoid
on pd(k) and (π) is a sequence of length one. An example explains the name:
Σ






•
-
?
?
N

•
-•






=
•
-
?
?
- -
U

j

• .
Now, if P is an n-operad, 0 ≤k ≤n −1, and π ∈pd(k), we have
((Jn)∗P)(π) = P(Σπ),
and using the equation ∂Σπ = Σ∂π, we ﬁnd that (Jn)∗lifts naturally to a functor
(Jn)∗: n-OC
- (n −1)-OC.
Just as for the discrete construction, this induces a functor
Jn : Wk-n-Cat
- Wk-(n −1)-Cat

254
A Deﬁnition of Weak n-Category
whose eﬀect on the underlying globular sets is the original ‘shift’ functor Jn.
The (n −1)-category JnX arising from an n-category X is called the local-
ization of X. Its underlying (n −1)-globular set is the disjoint union over all
a, b ∈X(0) of the (n−1)-globular sets X(a, b) deﬁned in the proof of 1.4.9. Since
the functor T(n−1) preserves coproducts (F.2.1), it follows from the lemma below
that the (n−1)-category structure on JnX amounts to an (n−1)-category struc-
ture on each X(a, b), in both the strict and the weak settings. So localization
deﬁnes functors
Str-n-Cat
-
(Str-(n −1)-Cat)-Gph,
Wk-n-Cat
-
(Wk-(n −1)-Cat)-Gph.
In the strict case, an n-category is a graph of (n −1)-categories together with
composition functors obeying simple laws; this is just ordinary enrichment. In
the weak case it is much more diﬃcult to say what extra structure is needed.
Lemma 9.3.18 Let S be a cartesian monad on a presheaf category E, such that
the functor part of S preserves coproducts. Let P be an S-operad and let (Xi)i∈I
be a family of objects of E. Then a P-algebra structure on ` Xi amounts to a
P-algebra structure on each Xi.
Proof It is enough to show that the functor SP preserves coproducts. Since SP
is deﬁned using S and pullback, and pullbacks interact well with coproducts in
presheaf categories, this follows from the same property of S.
2
Finally, localization works just as well for ω-categories.
The localization
functors Str-n-Cat
- Str-(n −1)-Cat induce in the limit an endofunctor
of Str-ω-Cat, which on underlying globular sets is the endofunctor J of [G, Set]
forgetting 0-cells. So exactly as in the ﬁnite-dimensional case, a weak ω-category
X gives rise to a family (X(a, b))a,b∈X(0) of weak ω-categories.
9.4
Weak 2-categories
A polite person proposing a deﬁnition of weak n-category should explain what
happens when n = 2. With our deﬁnition, Wk-2-Cat turns out to be equivalent
to UBicatstr, the category of small unbiased bicategories and unbiased strict
functors.
Observe that since the maps in Wk-2-Cat are strict functors, we obtain
an equivalence with UBicatstr, not UBicatwk or UBicatlax; and unlike its
weak and lax siblings, UBicatstr is not equivalent to the analogous category
of classical bicategories (or at least, the obvious functor is not an equivalence).
So we cannot conclude that Wk-2-Cat is equivalent to Bicatstr. Nevertheless,
the results of 3.4 mean that it is fair to regard classical bicategories as essentially
the same as unbiased bicategories, and therefore, by the results below, essentially
the same as weak 2-categories. One would expect that if the deﬁnition of weak
functor between n-categories were in place, Bicatwk would be equivalent to the
category of weak 2-categories and weak functors.

9.4 Weak 2-categories
255
Theorem 9.4.1 There are equivalences of categories
Wk-0-Cat
≃
Set,
Wk-1-Cat
≃
Cat,
Wk-2-Cat
≃
UBicatstr.
So far we have ignored weak 0-categories; indeed, we have not even proved
that there is an initial 0-operad-with-contraction. A 0-globular set is a set and the
monad T(0) is the identity, so a 0-operad is a monoid and an algebra for a 0-operad
is a set acted on by the corresponding monoid. There is a unique precontraction
on every 0-operad, which is a contraction just when the corresponding monoid
has cardinality 1. So 0-OC is the category of one-element monoids, any object
L0 of which is initial, and
Wk-0-Cat ≃Set.
A weak 1-category is a 1-dimensional weak 2-category (Theorem 9.3.17), so
the middle equivalence of Theorem 9.4.1 will follow from the last. It is, how-
ever, easy enough to prove directly. We have just seen that a 0-operad-with-
precontraction is a monoid, so the initial such is also the terminal such. The
equivalence 1-OC ≃0-OP of 9.3.8 then tells us that the initial 1-operad-with-
contraction is the terminal 1-operad. But algebras for the terminal T(1)-operad
are just T(1)-algebras, so
Wk-1-Cat ≃Cat.
It is not prohibitively diﬃcult to prove the 2-dimensional equivalence result
explicitly, as in Leinster [2000b, 4.8]; 2-operads are just about manageable. Here
we use an abstract method instead, taking advantage of some earlier calculations.
Notation: we write
• W for both the free monoid monad on Set and the free strict monoidal
category monad on Cat
• V-Gph for the category of graphs enriched in a given ﬁnite product category
V (1.3.1), and Gph for Set-Gph
• Σ : V
- V-Gph for the functor sending an object V of V to the one-
object V-graph whose single hom-set is V
• fcV for the free V-enriched category monad on V-Gph (when it exists).
A 1-globular set is a directed graph and T(1) is the free category monad fc of
Chapter 5, so a 1-operad is an fc-operad, which is an fc-multicategory with only
one 0-cell and one horizontal 1-cell. A precontraction κ on an fc-operad assigns
to each r ∈N and pair (f, f ′) of vertical 1-cells a 2-cell
•
- •
-
· · ·
- •
⇓κr(f, f ′)
•
f
?
- •
f ′
?

256
A Deﬁnition of Weak n-Category
with r 1-cells along the top. Recall from 5.1.7 that there is an embedding
Operad ⊂- fc-Operad
identifying plain operads with fc-operads having only one 0-cell, one vertical 1-
cell and one horizontal 1-cell. There we called the embedding Σ; here we call
it Σ∗, because it is induced by the weak map of monads Σ : (Set, W)
-
(Gph, fc). If P is a plain operad then a precontraction on Σ∗P consists of an
element κr ∈P(r) for each r ∈N. Take the plain operad tr of trees and the
r-leafed corolla νr ∈tr(r) for each r ∈N (2.3.3): then using the fact that tr is
the free operad containing an operation of each arity, it is easy to show that the
corresponding 1-operad-with-precontraction Σ∗tr is initial. So L2 = (I2
1)∗Σ∗tr,
and we have
Wk-2-Cat ∼= Alg((I2
1)∗Σ∗tr).
(9:15)
On the other hand, we saw earlier that the theory of unbiased bicategories is
also generated by the operad of trees. Speciﬁcally, we showed in 3.4 that
UBicatstr ∼= 1-Bicatstr = CatAlgstrI∗tr.
The functors I∗and CatAlgstr can be described as follows. We have maps of
monads
(Set, W)
I- (Cat, W)
Σ- (Cat-Gph, fcCat)
where I is the indiscrete category functor (p. 4); I is lax and Σ is weak. Recalling
from 4.2.17 that a (Cat, W)-operad is a Cat-operad, we obtain induced functors
Operad
I∗- Cat-Operad
Σ∗- fcCat-Operad
Alg- CATop.
The functor I∗is the same as the one used in Chapter 3, and the composite of
the last two functors is CatAlgstr, so
UBicatstr ∼= Alg(Σ∗I∗tr).
Comparing with (9:15), it is enough to prove
Lemma 9.4.2 For any plain operad P, there is an isomorphism of categories
Alg((I2
1)∗Σ∗P) ∼= Alg(Σ∗I∗P).
Proof
We have three monads on the category Gph-Gph of 2-globular sets:
ﬁrst, fc-Gph, the result of applying the 2-functor ( )-Gph : CAT
- CAT to
the monad fc on Gph; second, fcGph, the free Gph-enriched category monad;
third, T(2). We show in the proof of F.1.1 that T(2) is the result of gluing fc-Gph
to fcGph by a distributive law
λ : (fc-Gph)◦fcGph
- fcGph◦(fc-Gph).

9.4 Weak 2-categories
257
We also saw in Lemma 6.1.4 that a distributive law gives rise to a monad ‘eS’,
which in this case is the monad fcCat on Cat-Gph, and in Lemma 6.1.5 that it
gives rise to a lax map of monads, which in this case is of the form
(U, ψ) : (Cat-Gph, fcCat)
- (Gph-Gph, T(2))
where U is the forgetful functor.
It is straightforward to check that there is an equality of natural transforma-
tions
Set
W
- Set
=
Gph
Σ
?
T(1) - Gph
Σ
?
⇒
Gph-Gph
I2
1 ?
T(2)
- Gph-Gph
I2
1
?
=
Set
W
- Set
⇒
Cat
I
?
W
- Cat
I
?
=
Cat-Gph
Σ
?
fcCat- Cat-Gph
Σ
?
⇒
ψ
Gph-Gph
U
?
T(2)
- Gph-Gph
U
?
where the unmarked transformations are the ones referred to above. So
(I2
1)∗Σ∗= U∗Σ∗I∗: Operad
- T(2)-Operad,
and it is enough to prove that for any fcCat-operad Q,
Alg(Q) ∼= Alg(U∗Q).
This follows immediately from Proposition 6.7.5.
2
That completes the proof of Theorem 9.4.1.
In 9.1 we said what we wanted the operad L to look like in low dimensions:
if • is the unique 0-pasting diagram then L(•) should be a one-element set, and if
χk is the 1-pasting diagram made up of k arrows then L(χk) should be tr(k). We
now know that our wishes were met: for by 9.3.7, the 2-dimensional restriction
(Rω
2 )∗L is the initial 2-operad-with-precontraction, and we have shown this to be
Σ∗tr.
What about 3-categories? It should be possible to write down an explicit def-
inition of unbiased tricategory (similar to that of unbiased bicategory, 3.4.1) and
to prove that the category of unbiased tricategories and strict maps is equivalent
to Wk-3-Cat. This would be a lot of work, and it is not clear that the result
would have any advantage over the abstract deﬁnition of weak 3-category.
We could also try to compare our weak 3-categories with the tricategories
of Gordon, Power and Street [1995]. The analogous comparison one dimension
down, between weak 2-categories and classical bicategories, is already diﬃcult

258
A Deﬁnition of Weak n-Category
because we do not have a notion of weak functor between n-categories (see the
beginning of this section). A further diﬃculty is that Gordon, Power and Street’s
deﬁnition is not quite algebraic; put another way, the forgetful functor
(tricategories + strict maps)
- [Gop, Set]
seems highly unlikely to be monadic. If true, this means that there can be no
3-operad whose algebras are precisely tricategories (in apparent contradiction to
Batanin [1998a, p. 94]).
The reason why the theory of tricategories is not quite algebraic is as follows.
Most of the deﬁnition of tricategory consists of some data subject to some equa-
tions, but a small part does not: in items (TD5) and (TD6), it is stipulated that
certain transformations of bicategories are equivalences. This is not an algebraic
axiom, as there are many diﬀerent choices of weak inverses and none has been
speciﬁed. Compare the fact that the forgetful functor from non-empty sets to Set
is not monadic (indeed, has no left adjoint), in contrast to the forgetful functor
from pointed sets to Set. To make the deﬁnition algebraic we would have to
add in as data a weak inverse for each of these equivalences, together with two
invertible modiﬁcations witnessing that it is a weak inverse, and then add more
coherence axioms (saying, among other things, that this data forms an adjoint
equivalence). The result would be an even more complicated, but conceptually
pure, notion of tricategory.
Notes
Contractions were introduced in my [2001a]. When I wrote and made public the ﬁrst
version of that paper I believed that I was explaining Batanin’s notion of contraction,
but in fact I was inventing a new one; see 10.1 for an explanation of the diﬀerence.
Some of the results here on n- and 2-categories appeared in my [2000b].
See Crans [1999, 2.3] for a completely elementary deﬁnition of Gray-category (9.3.9).
I learned that the operad for Gray-categories can be deﬁned from the operad for
sesquicategories from Batanin [1998a, p. 94].

Chapter 10
Other Deﬁnitions of Weak
n-Category
Zounds! I was never so bethump’d with words!
Shakespeare [1596]
The deﬁnition of weak n-category studied in the previous chapter is, of course,
just one of a host of proposed deﬁnitions. Ten of them were described in my [2001b]
survey, all except one in formal, precise terms. However, the format of that paper
did not allow for serious discussion of the interrelationships, and one might get
the impression from it that the ten deﬁnitions embodied eight or so completely
diﬀerent approaches to the subject.
I hope to correct that impression here. Fundamentally, there seem to be only
two approaches.
In the ﬁrst, a weak n-category is regarded as a presheaf with structure. Usu-
ally ‘presheaf’ means n-globular set, and ‘structure’ means S-algebra structure
for some monad S, often coming from a globular operad. The deﬁnition studied
in the previous chapter is of this type.
In the second approach, a weak n-category is regarded as a presheaf with
properties. There is no hope that a weak n-category could be deﬁned as an n-
globular set with properties, so the category Cn on which we are taking presheaves
must be larger than Gn; presheaves on Cn must somehow have composition built
in. The case n = 1 makes this clear. In the ﬁrst approach, a category is deﬁned
as a directed graph (presheaf on G1) with structure. In the second, a category
cannot be deﬁned a category as a presheaf-with-properties on G1, but it can
be deﬁned as a presheaf-with-properties on the larger category ∆: this is the
standard characterization of a category by its nerve (p. 87).
There are other descriptions of the diﬀerence between the two approaches.
In the sense of the introduction to Chapter 3, the ﬁrst is algebraic (the various
types of composition in a weak n-category are bona ﬁde operations) and the
second is non-algebraic (composites are not determined uniquely, only up to
equivalence). Or, the ﬁrst approach can be summarized as ‘take the theory of

260
Other Deﬁnitions of Weak n-Category
strict n-categories, weaken it, then take models for the weakened theory’, and
the second as ‘take weak models for the theory of strict n-categories’.
The deﬁnitions following the two approaches are discussed in 10.1 and 10.2
respectively. What I have chosen to say about each deﬁnition (and which deﬁni-
tions I have chosen to say anything about at all) is dictated by how much I feel
capable of saying in a simple and not too technical way; the emphasis is therefore
rather uneven. In particular, there is more on the deﬁnitions close to that of the
previous chapter than on those further away.
10.1
Algebraic deﬁnitions
Here we discuss the deﬁnitions proposed by Batanin, Penon, Trimble, and May.
We continue to use the notation of the previous chapter: T is the free strict
ω-category monad, pd = T 1, and so on.
Batanin’s deﬁnition
The deﬁnition of weak ω-category studied in the previous chapter is a simpliﬁ-
cation of Batanin’s [1998a] deﬁnition. There are two main diﬀerences. The less
signiﬁcant is bias: where our deﬁnition treats composition of all shapes equally,
Batanin’s gives special status to binary and nullary compositions. For instance,
our weak 2-categories are unbiased bicategories, but his are classical, biased,
bicategories. The more signiﬁcant diﬀerence is conceptual. We integrated com-
position and coherence into the single notion of contraction; Batanin keeps the
two separate. This makes his deﬁnition more complicated to state, but more
obvious from the traditional point of view.
Composition is handled as follows. The unit map η1 : 1
- T 1 = pd picks
out, for each m ∈N, the m-pasting diagram ιm looking like a single m-cell.
Deﬁne a collection binpd ⊂- pd by
binpd(m) = {ιm◦0ιm, ιm◦1ιm, . . . , ιm◦mιm} ⊆pd(m)
where ◦p is composition in the strict ω-category pd and ιm◦mιm means ιm; then
binpd consists of binary and unary diagrams such as
ι1◦0ι1
=
•
-•
-•,
ι1
=
•
-•,
ι2◦0ι2
=
•
R

?•
R

?•,
ι2◦1ι2
=
•
-
?
?
N

•.
Deﬁnition 10.1.1 Let P be a globular operad. A system of (binary) com-
positions in P is a map of collections binpd
- P, written
(ιm◦pιm ∈binpd(m)) 7−→
 δm
p ∈P(ιm◦pιm)

,
such that δm
m is the identity operation 1m ∈P(ιm) for each m ∈N.
So, for instance, s(δ2
0) = t(δ2
0) = δ1
0 and s(δ2
1) = t(δ2
1) = 11. (If we wanted to do
an unbiased version of Batanin’s deﬁnition, we could replace binpd by pd.)

10.1 Algebraic deﬁnitions
261
ξ
•
θ−
θ+
R

·······?
ξ′
•
q
7−→
q(ξ)
•
ψ
ψ
1ψ R

?
q(ξ′)
•
Figure 10-A: Eﬀect of a coherence ζ, shown for k = 1. The dotted arrow is
ζ(θ−, θ+), and ψ = q(θ−) = q(θ+)
Example 10.1.2 A contraction κ on an operad P canonically determines a sys-
tem δ
•
• of compositions, deﬁned inductively by
δm
p =
 κιm◦pιm(δm−1
p
, δm−1
p
)
if p < m,
1m
if p = m.
To describe coherence we use the notion of a reﬂexive globular set, that
is, a globular set Y together with functions
· · ·
i
Y (k + 1) i
Y (k) i
· · ·
i
Y (0),
written i(ψ) = 1ψ, such that s(1ψ) = t(1ψ) = ψ for each k ≥0 and ψ ∈
Y (k). Reﬂexive globular sets form a presheaf category [Rop, Set]. The underlying
globular set of a strict ω-category is canonically reﬂexive, taking the identity cells
1ψ. This applies in particular to T 1 = pd; if π ∈pd(k) then 1π ∈pd(k + 1) is
the degenerate (k + 1)-pasting diagram represented by the same picture as π.
Deﬁnition 10.1.3 Let X be a globular set, Y a reﬂexive globular set, and q :
X
- Y a map of globular sets. For k ≥0 and ψ ∈Y (k), write (Fig. 10-A)
Par′
q(k)
=
{(θ−, θ+) ∈X(k) × X(k) | θ−and θ+ are parallel,
q(θ−) = q(θ+)}.
A coherence ζ on q is a family of functions

Par′
q(k)
ζk- X(k + 1)

k≥0
such that for all k ≥0 and (θ−, θ+) ∈Par′
q(k), writing ζk as ζ,
s(ζ(θ−, θ+)) = θ−,
t(ζ(θ−, θ+)) = θ+,
q(ζ(θ−, θ+)) = 1q(θ−)(= 1q(θ+)).
Example 10.1.4 Any contraction on a map canonically determines a coher-
ence, as is clear from a comparison of Figs. 9-A (p. 235) and 10-A. Formally,
Par′
q(k) = `
ψ∈Y (k) Parq(1ψ) and a contraction κ determines the coherence ζ
given by ζ(θ−, θ+) = κ1ψ(θ−, θ+) where ψ = q(θ−) = q(θ+). The class of con-
tractible maps is closed under composition, but the class of maps admitting a
coherence is not.

262
Other Deﬁnitions of Weak n-Category
Deﬁnition 10.1.5 A coherence on a collection (P
d- T 1) is a coherence
on the map d, and a coherence on an operad is a coherence on its underlying
collection. A map, collection, or operad is coherent if it admits a coherence.
Explicitly, a coherence on an operad P assigns to each π ∈pd(k) and parallel
pair θ−, θ+ ∈P(π) an element ζ(θ−, θ+) of P(1π) with source θ−and target θ+.
Let X be a P-algebra; then since bπ = c
1π (p. 225), we have (T X)(π) = (T X)(1π),
so if x ∈(T X)(π) then there is a (k + 1)-cell
ζ(θ−, θ+)(x) : θ−(x)
- θ+(x)
in X connecting the two ‘composites’ θ−(x) and θ+(x) of x. Taking π = ιk and
θ−= θ+ = 1k, this provides in particular a reﬂexive structure on the underlying
globular set of X.
Example 10.1.6 Any contractible operad is coherent (by the previous example),
but not conversely. For instance, there is an operad R whose algebras are reﬂexive
globular sets; it is uniquely determined by
R(π) =
 1
if π ∈{ιk, 1ιk−1, 11ιk−2, . . .}
∅
otherwise
(π ∈pd(k)). This operad is coherent (trivially) but not contractible (since some
of the sets R(π) are empty). So a given globular set X is an algebra for some
coherent operad if and only if it admits a reﬂexive structure; on the other hand,
by 9.2.4, it is an algebra for some contractible operad if and only if it admits a
weak ω-category structure.
A coherence is what Batanin calls a contraction. As we have seen, our con-
tractions are more powerful, providing both a coherence and a system of compo-
sitions.
Rather confusingly, at several points in Batanin [1998a] the word ‘contractible’
is used as an abbreviation for ‘contractible [coherent] and admitting a system of
compositions’. In particular, weak ω- and n-categories are often referred to as
algebras for a ‘universal contractible operad’. This is not meant literally: ‘uni-
versal’ means weakly initial (in other words, there is at least one map from it to
any other contractible operad), and the operad R of 10.1.6 is in Batanin’s ter-
minology contractible, so any genuine ‘universal contractible operad’ P satisﬁes
P(π) = ∅for almost all pasting diagrams π. A P-algebra is then nothing like an
ω-category. Indeed, R is in Batanin’s terminology the initial operad equipped
with a contraction, and its algebras are mere reﬂexive globular sets. The system
of compositions is a vital ingredient; left out, the situation degenerates almost
entirely.
I believe it is the case that given a system of compositions and a coherence
on an operad, a contraction can be built. This is the non-canonical converse to
the canonical process in the other direction; the situation is like that of biased
vs. unbiased bicategories. So it appears that despite an abuse of terminology and

10.1 Algebraic deﬁnitions
263
two diﬀerent deﬁnitions of contractibility, the term ‘contractible operad’ means
exactly the same in Batanin’s work as here.
The two ingredients—composition and coherence—can be combined to make
a deﬁnition of weak ω-category in several possible ways:
• Imitate the deﬁnition of the previous chapter. In other words, take the
category of globular operads equipped with both a system of compositions
and a coherence, prove that it has an initial object (B, δ
•
•, κ), and deﬁne
a weak ω-category as a B-algebra. This is Deﬁnition B1 in my [2001b]
survey.
• Use Batanin’s operad K, constructed in his Theorem 8.1. He proves that
K is weakly initial in the full subcategory of T -Operad consisting of the
coherent operads admitting a system of compositions. Weak initiality does
not characterize K up to isomorphism, so one needs some further informa-
tion about K in order to use this deﬁnition. It seems to be claimed that K
is initial in the category of operads equipped with a system of compositions
and a coherence (Remark 2 after the proof of Theorem 8.1), but it does not
seem obvious that this claim is true, essentially because of the set-theoretic
complement taken in the proof of Lemma 8.1.
• Deﬁne a weak ω-category as a pair (P, X) where P is a coherent operad
admitting a system of compositions and X is a P-algebra. Given such a
pair (P, X), we can choose a system of compositions and a coherence on
P, and this turns X into a B-algebra—that is, a weak ω-category in the
sense of the ﬁrst method. The present method has some variants: we might
insist that P(•) = 1, where • is the unique 0-pasting diagram, or we might
drop the condition that P admits a system of compositions and replace it
with the more relaxed requirement that P(π) ̸= ∅for all pasting diagrams
π (giving Batanin’s Deﬁnition 8.6 of ‘weak ω-categorical object’).
Batanin’s weak ω-categories can be compared with the weak ω-categories of
the previous chapter. We have already shown that a contraction on a globu-
lar operad gives rise canonically to a system of compositions and a coherence
(10.1.2, 10.1.6). This is true in particular of the operad L, so there is a canonical
map B
- L of operads, inducing in turn a canonical functor from L-algebras
to B-algebras. Conversely, B is non-canonically contractible, so there is a non-
canonical functor in the other direction. In the case n = 2, this is the comparison
of biased and unbiased bicategories.
Penon’s deﬁnition
The deﬁnition of weak ω-category proposed by Penon [1999] does not use the
language of operads, but is nevertheless close in spirit to the deﬁnition of Batanin.
It can be stated very quickly.
Deﬁnition 10.1.7 Let q : X
- Y be a map of reﬂexive globular sets. A
coherence ζ on q is normal if ζ(θ, θ) = 1θ for all k ≥0 and θ ∈X(k).

264
Other Deﬁnitions of Weak n-Category
Penon calls a normal coherence an ´etirement, or stretching. This might seem to
conﬂict with the contraction terminology, but it is only a matter of viewpoint:
X is being shrunk, Y stretched.
Deﬁnition 10.1.8 An ω-magma is a reﬂexive globular set X equipped with a
binary composition function ◦p : X(m)×p X(m)
- X(m) for each m > p ≥0,
satisfying the source and target axioms of 1.4.8(a).
An ω-magma is a very wild structure, and a strict ω-category very tame; weak
ω-categories are somewhere in between.
Let Q be the category whose objects are quadruples (X, Y, q, ζ) with X an
ω-magma, Y a strict ω-category, q : X
- Y a map of ω-magmas, and ζ a
normal coherence on q. Maps
(X, Y, q, ζ)
- (X′, Y ′, q′, ζ′)
in Q are pairs (X
- X′, Y
- Y ′) of maps commuting with all the structure
present.
There is a forgetful functor U from Q to the category [Rop, Set] of
reﬂexive globular sets, sending (X, Y, q, ζ) to the underlying reﬂexive globular
set of X. This has a left adjoint F, and a weak ω-category is deﬁned as an
algebra for the induced monad U ◦F on [Rop, Set].
Observe that U takes the underlying reﬂexive globular set of X, not of Y .
The object (X, Y, q, ζ) of Q should therefore be regarded as X (not Y ) equipped
with extra structure, making it perhaps more apt to think of an object of Q as
a shrinking rather than a stretching.
Recent work of Cheng relates Penon’s deﬁnition to the deﬁnition of the previ-
ous chapter through a series of intermediate deﬁnitions; older work of Batanin [2002a]
relates Penon’s deﬁnition to his own. One point can be explained immediately.
Take the operad B equipped with its system of compositions δ
•
• and its coherence
κ. There is a unique reﬂexive structure on the underlying globular set of B for
which κ is normal, namely 1θ = ζ(θ, θ). Also, the system of compositions in the
operad B makes its underlying globular set into an ω-magma: given 0 ≤p < m
and (θ1, θ2) ∈B(m) ×B(p) B(m), put
θ1 ◦p θ2 = δm
p ◦(θ1, θ2)
where the ◦on the right-hand side is operadic composition. This gives B
- T 1
the structure of an object of Q. Now, if X is any B-algebra, we have a pullback
square
TBX
 @
T X

B
-
T 1,

T !
-
and the Q-object structure on B
- T 1 induces a Q-object structure on
TBX
- T X. So any B-algebra gives rise to an object of Q and hence, applying
the comparison functor for the monad U ◦F, a Penon weak ω-category.

10.1 Algebraic deﬁnitions
265
Trimble’s and May’s deﬁnitions
Trimble has also proposed a simple deﬁnition of n-category, unpublished but
written up as Deﬁnition Tr in my [2001b] survey. He was not quite so ambitious
as to attempt a fully weak notion of n-category; rather, he sought a notion just
general enough to capture the fundamental n-groupoids of topological spaces. He
called his structures ‘ﬂabby n-categories’.
Trimble’s deﬁnition uses simple operad language. Let A be a category with
ﬁnite products and let P be a (non-symmetric) operad in A. Extending slightly
the terminology of p. 132, a categorical P-algebra is an A-graph X together
with a map
P(k) × X(x0, x1) × · · · × X(xk−1, xk)
- X(x0, xk)
(10:1)
for each k ∈N and x0, . . . , xk ∈X0, satisfying the evident axioms. The category
of categorical P-algebras is written CatAlg(P), and itself has ﬁnite products.
If F : A
- A′ is a ﬁnite-product-preserving functor then there is an induced
operad F∗P in A′ and a ﬁnite-product-preserving functor
bF : CatAlg(P)
- CatAlg(F∗P).
The topological content consists of two observations: ﬁrst (Example 2.2.18),
that if E is the operad of path reparametrizations then there is a canonical functor
Ξ : Top
- CatAlg(E),
and second, that taking path-components deﬁnes a ﬁnite-product-preserving func-
tor Π0 : Top
- Set.
Applying the operadic constructions recursively to the topological data, we
deﬁne for each n ∈N a category Flabby-n-Cat with ﬁnite products and a functor
Πn : Top
- Flabby-n-Cat
preserving ﬁnite products: Flabby-0-Cat = Set, and Πn+1 is the composite
functor
Top
Ξ- CatAlg(E)
c
Πn- CatAlg((Πn)∗E) = Flabby-(n + 1)-Cat.
That completes the deﬁnition.
Operads in Top can be regarded as T -operads, where T is the free topolog-
ical monoid monad (4.1.14, 4.2.16). The operadic techniques used in Trimble’s
deﬁnition are then expressible in the language of generalized operads, and I make
the following
Claim 10.1.9 For each n ∈N, there is a contractible globular n-operad whose
category of algebras is equivalent to Flabby-n-Cat.
I hope to prove this elsewhere.
It implies that every ﬂabby n-category is a
weak n-category in the sense of the previous chapter. The n-operad concerned

266
Other Deﬁnitions of Weak n-Category
is something like an n-dimensional version of the operad P of Example 9.2.7
(fundamental weak ω-groupoids), but a little smaller.
Alternatively, we can generalize Trimble’s deﬁnition by considering operads
in an arbitrary symmetric monoidal category. This leads us to the deﬁnition of
enriched n-category proposed by May [2001] (although that is not what led May
there).
Let B and G be symmetric monoidal categories and suppose that B acts
on G in a way compatible with both monoidal structures.
(Trivial example:
B = G with tensor as action.) Let P be an operad in B. Then we can deﬁne a
categorical P-algebra in G as a G-graph X together with maps as in (10:1),
with the ﬁrst × replaced by the action ⊙and the others ×’s by ⊗’s, subject to
the inevitable axioms. For example, if B = Top and G = Flabby-n-Cat with
monoidal structures given by products then the functor Πn : B
- G induces
an action ⊙of B on G by B ⊙G = Πn(B) × G, and a categorical P-algebra in G
is what we previously called a categorical ((Πn)∗P)-algebra.
The idea now is that if we can ﬁnd some substitute for the functor Ξ :
Top
- CatAlg(E) then we can imitate Trimble’s recursive deﬁnition in this
more general setting. So, May starts with a ‘base’ symmetric monoidal category
B and an operad P in B, each carrying certain extra structure and satisfying
certain extra properties, the details of which need not concern us here. He then
considers symmetric monoidal categories G, restricting his attention to just those
that are ‘good’ in the sense that they too have certain extra structure and prop-
erties, including that they are acted on by B. Then the point is that
• the trivial example G = B is good
• if G is good then so is the category of categorical P-algebras in G.
So given a category B and operad P in B as above, we can deﬁne for each n ∈N
the category B(n; P) of n-P-categories enriched in B as follows:
• B(0; P) = B
• B(n + 1; P) = (categorical P-algebras in B(n; P)).
An operad P in B is called an A∞-operad if for each k ∈N, the object P(k)
of B is weakly equivalent to the unit object; here ‘weakly equivalent’ refers to a
Quillen model category structure on B, which is part of the assumed structure.
May proposes that when P is an A∞-operad, n-P-categories enriched in B should
be called weak n-categories enriched in B. His deﬁnition, like Trimble’s, aims for
a slightly diﬀerent target from most of the other deﬁnitions. It has enrichment
built in; he writes
In all of the earlier approaches, 0-categories are understood to be sets,
whereas we prefer a context in which 0-categories come with their own
homotopy theory.
So, for instance, we might take the category B of 0-categories to be a convenient
category of topological spaces, or the category of simplicial sets, or a category of
chain complexes.

10.2 Non-algebraic deﬁnitions
267
10.2
Non-algebraic deﬁnitions
Most of the proposed non-algebraic deﬁnitions of weak n-category can be ex-
pressed neatly using a generalization of the standard nerve construction, which
describes a category as a simplicial set with properties. We discuss nerves in gen-
eral, then the deﬁnitions of Joyal, Tamsamani, Simpson, Baez and Dolan (and
others), Street, and Leinster (Deﬁnition L′ of [2001b]). We ﬁnish by looking at
some structures approximating to the idea of a weak ω-category in which all cells
of dimension 2 and higher are invertible: A∞-categories, Segal categories, and
quasi-categories. These have been found especially useful in geometry.
Nerves
The nerve idea allows us to deﬁne species of mathematical structures by saying
on the one hand what the structures look like locally, and on the other how the
local pieces are allowed to be ﬁtted together. We consider it in some generality.
The setting is a category C of ‘mathematical structures’ with a small subcat-
egory C of ‘local pieces’ or ‘building blocks’. The condition that every object of
C is put together from objects of C is called density, deﬁned in a moment.
Proposition 10.2.1 Let D be a small category and D a category with small
colimits. The following conditions on a functor I : D
- D are equivalent:
a. for each Y ∈D, the canonical map
Z D∈D
D(ID, Y ) × ID
- Y
is an isomorphism
b. the functor
D
-
[Dop, Set],
Y
7−→
D(I−, Y )
is full and faithful.
Proof See Mac Lane [1971, X.6].
2
A functor I : D
- D is dense if it satisﬁes the equivalent conditions of
the Proposition, and a subcategory C of a category C is dense if the inclusion
functor C ⊂- C is dense. Condition (a) formalizes the idea that objects of C
are pasted-together objects of C. Condition (b) is what we use in examples to
prove density.
Example 10.2.2 Let n ∈N, let n-Mfd be the category of smooth n-manifolds
and smooth maps, and let Un be the subcategory whose objects are all open
subsets of Rn and whose maps f : U
- U ′ are diﬀeomorphisms from U to an
open subset of U ′. Then Un is dense in n-Mfd: every manifold is a pasting of
Euclidean open sets.

268
Other Deﬁnitions of Weak n-Category
Example 10.2.3 Let k be a ﬁeld, let Vectk be the category of all vector spaces
over k, and let Matk be the category whose objects are the natural numbers and
whose maps m
- n are n × m matrices over k. There is a natural inclusion
Matk
⊂- Vectk (sending n to kn), and Matk is then dense in Vectk. This
reﬂects the fact that any vector space is the colimit (pasting-together) of its
ﬁnite-dimensional subspaces, which in turn is true because the theory of vector
spaces is ﬁnitary (its operations take only a ﬁnite number of arguments).
Example 10.2.4 The inclusion ∆⊂- Cat (p. 87) is also dense. This says
informally that a category is built out of objects, arrows, commutative triangles,
commutative tetrahedra, . . . , and source, target and identity functions between
them. We would not expect the commutative tetrahedra and higher-dimensional
simplices to be necessary, and indeed, if ∆2 denotes the full subcategory of ∆
consisting of the objects [0], [1] and [2] then the inclusion ∆2
⊂- Cat is also
dense.
Generalizing the terminology of this example, if C is a dense subcategory of C
and X is an object of C then the nerve (over C) of X is the presheaf C(−, X)
on C.
For us, the crucial point about density is that it allows the mathematical
structures (objects of C) to be viewed as presheaves-with-properties on the cat-
egory C of local pieces. That is, if C is dense in C then C is equivalent to the
full subcategory of [Cop, Set] consisting of those presheaves isomorphic to the
nerve of some object of C. Sometimes the presheaves arising as nerves can be
characterized intrinsically, yielding an alternative deﬁnition of C by presheaves
on C.
Example 10.2.5 A vector space over a ﬁeld k can be deﬁned as a presheaf
V : Matop
k
- Set preserving ﬁnite limits.
Example 10.2.6 A smooth n-manifold can be deﬁned as a presheaf on Un with
certain properties.
Example 10.2.7 A category can be deﬁned as a presheaf on ∆(or indeed on
∆2) with certain properties. There are various ways to express those properties:
for instance, categories are functors ∆op
- Set preserving ﬁnite limits, or
preserving certain pullbacks, or they are simplicial sets in which every inner horn
has a unique ﬁller. (A horn is inner if the missing face is not the ﬁrst or the last
one.)
The structures we want to deﬁne are weak n-categories, and the strategy is:
• ﬁnd a small dense subcategory C of the category of strict n-categories
• ﬁnd conditions on a presheaf on C equivalent to it being a nerve of a strict
n-category
• relax those conditions to obtain a deﬁnition of weak n-category.

10.2 Non-algebraic deﬁnitions
269
Most of the deﬁnitions of weak n-category described below can be regarded as
implementations of this strategy. A diﬀerent way to put it is that we seek an
intrinsic characterization of presheaves on C of the form
C 7−→{weak functors C
- Y }
for some weak n-category Y . Of course, we start from a position of not knowing
what a weak n-category or functor is, but we choose the conditions on presheaves
to ﬁt the usual intuitions.
Joyal’s deﬁnition
Perhaps the most obvious implementation is to take the local pieces to be all glob-
ular pasting diagrams. So, let ∆ω be the category with object-set `
m∈N pd(m)
and hom-sets
∆ω(σ, π) = Str-ω-Cat(F bσ, F bπ) ∼= [Gop, Set](bσ, T bπ)
where F : [Gop, Set]
- Str-ω-Cat is the free strict ω-category functor and,
as in Chapter 9, T is the corresponding monad. There is an inclusion functor
∆ω
⊂- Str-ω-Cat, and a typical object of the corresponding subcategory of
Str-ω-Cat is the ω-category naturally depicted as
•
?
?
?
W
~
>
•
-•
-
?
?
N

•
—that is, freely generated by the 0-, 1- and 2-cells shown, and with only identity
cells in dimensions 3 and above.
The subcategory ∆ω of Str-ω-Cat is dense. That the induced functor Str-ω-Cat
-
[∆op
ω , Set] is faithful follows from ∆ω containing the trivial pasting diagrams
•,
•
-•,
•
R

?•,
. . .
representing single m-cells. That it is full follows from ∆ω containing maps such
as
•
R

?•
f-
•
-•
and
•
R

?•
g-
•
-
?
?
N

•
(10:2)
which, for appropriately chosen f and g, induce 2-cell identities and vertical 2-cell
composition respectively.
A strict ω-category can therefore be deﬁned as a presheaf on ∆ω with prop-
erties. Joyal has proposed [1997] a way of describing and then relaxing those
properties: a strict ω-category is a presheaf on ∆ω for which ‘every inner horn
has a unique ﬁller’, and a weak ω-category is deﬁned by simply dropping the
uniqueness.

270
Other Deﬁnitions of Weak n-Category
We can do the same with ω replaced by any ﬁnite n (taking care in the top
dimension). Recall from p. 225 that if 1π denotes the (m + 1)-pasting diagram
resembling an m-pasting diagram π then bπ ∼= c
1π: so ∆n is equivalent to its
full subcategory consisting of just the n-pasting diagrams. For instance, ∆1 is
equivalent to the usual category ∆of 1-pasting diagrams
•,
•
-•,
•
-•
-•,
. . . ,
and we recover the standard nerve construction for categories.
Joyal also noted a duality. The category ∆is equivalent to the opposite of
the category I of ﬁnite strict intervals, that is, ﬁnite totally ordered sets with
distinct least and greatest elements (to be preserved by the maps). Generalizing
this, he deﬁned a category Iω of ‘ﬁnite disks’, equivalent to the opposite of ∆ω. So
his weak ω-categories are functors Iω
- Set satisfying horn-ﬁlling conditions.
Tamsamani’s and Simpson’s deﬁnitions
A very similar story can be told for the deﬁnitions proposed by Tamsamani [1995]
and Simpson [1997]. Observe that in the proof of the density of ∆ω in Str-ω-Cat,
we did not use many of the pasting diagrams, so we can replace ∆ω by a smaller
category.
Tamsamani and Simpson consider just ‘cuboidal’ pasting diagrams
such as
•
?
?
?
W
~
>
•
?
?
?
W
~
>
•
?
?
?
W
~
>
•
?
?
?
W
~
>
•
and similarly ‘cuboidal’ maps between the strict ω-categories that they generate.
Let us restrict ourselves to the n-dimensional case, since that is a little easier.
There is a functor
I : ∆n
- Str-n-Cat
which, for instance, when n = 2, sends ([4], [3]) to the free strict 2-category on
the diagram above. In general, each (r1, . . . , rn) ∈Nn determines an n-pasting
diagram πr1,...,rn, given inductively by
πr1,...,rn = (πr2,...,rn, . . . , πr2,...,rn)
with r1 terms on the right-hand side, and then
I([r1], . . . , [rn]) = F \
πr1,...,rn.
To describe I on maps, take, for instance, n = 2 and the map (id, δ) : ([1], [1])
-
([1], [2]) in which δ is the injection omitting 1 ∈[2] from its image; then I(id, δ)
is the map g of (10:2).
By exactly the same argument as for Joyal’s deﬁnition, the functor ∆n
-
Str-n-Cat is dense. A strict n-category is therefore the same thing as a presheaf
on ∆n (a ‘multisimplicial set’) with properties, and relaxing those properties
gives a deﬁnition of weak n-category.

10.2 Non-algebraic deﬁnitions
271
Nerves of strict n-categories are characterized among functors (∆n)op
-
Set by the properties that the functor is degenerate in certain ways (to give us
n-categories rather than n-tuple categories) and, more signiﬁcantly, that certain
pullbacks are preserved. Tamsamani sets up a notion of equivalence, and deﬁnes
weak n-category by asking only that the pullbacks are preserved up to equiva-
lence. Simpson does the same, but with a more stringent notion of equivalence
that he calls ‘easy equivalence’. It is indeed easier, and is nearly the same as the
notion of contractibility of a map of globular sets: see my survey [2001b] for de-
tails. In the special case of one-object 2-categories, Tamsamani’s deﬁnition gives
the homotopy monoidal categories of Section 3.3, and Simpson’s gives the same
but with the extra condition that the functors ξ(k) of Proposition 3.3.6, which
for homotopy monoidal categories are required to be equivalences, are genuinely
surjective on objects.
Opetopic deﬁnitions
We have already (7.5) looked at the opetopic deﬁnitions of weak n-category: that
of Baez and Dolan and subsequent variants. They are all of the form ‘a weak n-
category is an opetopic set with properties’, for varying meanings of ‘opetopic set’
and varying lists of properties. Here we see how this ﬁts in with the nerve idea.
The situation is, as we shall see, slightly diﬀerent from that in the deﬁnitions of
Joyal, Tamsamani, and Simpson.
We start with the category O of opetopes. As mentioned on p. 205, there is
an embedding O ⊂- Str-ω-Cat, and this induces a functor
U : Str-ω-Cat
- [Oop, Set]
sending a strict ω-category to its underlying opetopic set.
This functor is faithful, because there is for each m ∈N an m-opetope re-
sembling a single globular m-cell. It is not, however, full. To see this, note that
if F : A
- B is a strict map of strict ω-categories then the induced map
U(F) : U(A)
- U(B) preserves universality of cells: for instance, if f and g
are abutting 1-cells in A then U(F) sends the canonical 2-cell
f
g
g◦f
⇓
  @
@
R
-
in U(A) to the canonical 2-cell
Ff
Fg
(Fg)◦(Ff)
⇓
  @
@
R
-
in U(B). But not every map U(A)
- U(B) of opetopic sets preserves univer-
sality; indeed, any lax map A
- B of strict ω-categories ought (in principle,
at least) to induce a map U(A)
- U(B), and this will preserve universality
if and only if the lax map is weak. Compare the relationship between monoidal
categories and plain multicategories (2.1.10, 3.3).

272
Other Deﬁnitions of Weak n-Category
So O is not dense in Str-ω-Cat, and correspondingly U does not deﬁne an
equivalence between Str-ω-Cat and a full subcategory of [Oop, Set]. But with
a slight modiﬁcation, the nerve idea can still be made to work. For the above
arguments suggest that U deﬁnes an equivalence between
(strict ω-categories + weak maps)
and a full subcategory of
(opetopic sets + universality-preserving maps),
and it is then, as usual, a matter of identifying the characteristic properties of
those opetopic sets arising from strict ω-categories, then relaxing the properties
to obtain a deﬁnition of weak ω-category. So a weak ω-category is deﬁned as
an opetopic set with properties, and a weak ω-functor as a map of opetopic sets
preserving universality.
Street’s deﬁnition
The deﬁnition of weak ω-category proposed by Street has the distinctions of
being the ﬁrst and probably the most tentatively phrased; it hides in the last
paragraph of his paper of [1987]. It was part of the inspiration for Baez and
Dolan’s deﬁnition, and has much in common with it, but uses simplicial rather
than opetopic sets.
Street follows the nerve idea explicitly. He ﬁrst constructs an embedding
I : ∆⊂- Str-ω-Cat,
where I(m) is the mth ‘oriental’, the free strict ω-category on an m-simplex. For
example, I(3) is the strict ω-category generated freely by 0-, 1-, 2- and 3-cells
a0
a1
a2
a3


-
B
BBN
-
3
f01
f12
f23
f03
f02
⇑
⇑
α012
α023
⇛
Γ
a0
a1
a2
a3.


-
B
BBN
-s
f01
f12
f23
f03
f13
⇑
⇑
α123
α013
(Orientation needs care.) This induces a functor
U : Str-ω-Cat
- [∆op, Set]
and, roughly speaking, a weak ω-category is deﬁned as a simplicial set with
horn-ﬁlling properties.
This is, however, a slightly inaccurate account. For similar reasons to those
in the opetopic case, ∆is not dense in Str-ω-Cat; the functor U is again faithful
but not full. Street’s original solution was to replace [∆op, Set] by the category
Sss of stratiﬁed simplicial sets, that is, simplicial sets equipped with a class
of distinguished cells in each dimension (to be thought of as ‘universal’, ‘hollow’,

10.2 Non-algebraic deﬁnitions
273
or ‘thin’). The underlying simplicial set of a strict ω-category has a canonical
stratiﬁcation, so U lifts to a functor
U ′ : Str-ω-Cat
- Sss,
and U ′ is full and faithful.
Detailed work by Street [1987, 1988] and Verity
(unpublished) gives precise conditions for an object of Sss to be in the image of
U ′. So a strict ω-category is the same thing as a simplicial set equipped with a
class of distinguished cells satisfying some conditions. One of the conditions is
that certain horns have unique ﬁllers, and dropping the uniqueness gives Street’s
proposed deﬁnition of weak ω-category.
The most vexing aspect of this proposal is that extra structure is required
on the simplicial set.
It would seem more satisfactory if, as in the opetopic
approach, the universal cells could be recognized intrinsically. A recent paper of
Street [2003] aims to repair this apparent defect, proposing a similar deﬁnition
in which a weak ω-category is genuinely a simplicial set with properties.
Contractible multicategories
The last deﬁnition of weak n-category that we consider was introduced as Def-
inition L′ in my [2001b] survey. Like the other deﬁnitions in this section, it is
non-algebraic and can be described in terms of nerves. The nerve description
seems, however, to be rather complicated (the shapes involved being a combina-
tion of globular and opetopic) and not especially helpful, so we approach it from
another angle instead.
The idea is that a weak ω-category is meant to be a ‘weak algebra’ for the
free strict ω-category monad on globular sets. We saw in 4.2.22 that for any
cartesian monad T , a strict T -algebra is the same thing as a T -multicategory
whose domain map is the identity—in other words, with underlying graph of the
form
T X
T X
1

X.
h
-
To deﬁne ‘weak T -algebra’ we relax the condition that the domain map is the
identity, asking only that it be an equivalence in some sense. Contractibility
together with surjectivity on 0-cells is a reasonable notion of equivalence: con-
tractible means something like ‘injective on homotopy’, and any contractible
map surjective on 0-cells is surjective on m-cells for all m ∈N. For 1-dimensional
structures, it means full, faithful and surjective on objects. We also ask that
the domain map is injective on 0-cells, expressing the thought that 0-cells in an
ω-category should not be composable.
Deﬁnition L′ says, then, that a weak ω-category is a globular multicategory
C whose domain map C1
- T C0 is bijective on 0-cells and contractible.
Any weak ω-category in the sense of the previous chapter gives rise canonically
to one in the sense of L′. This is the ‘multicategory of elements’ construction

274
Other Deﬁnitions of Weak n-Category
of 6.3: if (TLX
h- X) is an L-algebra then there is a commutative diagram
TLX
T X

X
h
-
L
?
T 1
T !
?

1
!
?
-
the left-hand half of which is a pullback square and the top part of which forms
a multicategory CX with CX
0
= X and CX
1
= TLX. The map L
- T 1 is
contractible (by deﬁnition of L) and bijective on 0-cells (because, as we saw on
p. 257, if • denotes the 0-pasting diagram then L(•) = 1). Contractibility and
bijectivity on 0-cells are stable under pullback, so the multicategory CX is a weak
ω-category in the sense of L′.
Unpicking this construction explains further the idea behind L′. An m-cell
of TLX is a pair
(θ, x) ∈
a
π∈pd(m)
L(π) × [Gop, Set](bπ, X),
which lies over x ∈(T X)(m) and θ(x) ∈X(m). It is usefully regarded as a
‘way of composing’ the labelled pasting diagram x. (Contractibility guarantees
that there are plenty of ways of composing.) Among all weak ω-categories in the
sense of L′, those of the form CX have the special feature that the set of ways of
composing a labelled pasting diagram x ∈(T X)(π) depends only on the pasting
diagram π, not on the labels: it is just L(π).
So in the deﬁnition of the previous chapter, the ways of composition available
in a weak ω-category are prescribed once and for all; in the present deﬁnition,
they are allowed to vary from ω-category to ω-category. This is precisely analo-
gous to the diﬀerence between the loop space machinery of Boardman–Vogt and
May (with ﬁxed parameter spaces forming an operad) and that of Segal (with a
variable, ﬂabby, structure): see Adams [1978, p. 60].
Locally groupoidal structures
Many of the weak ω-categories of interest in geometry have the property that
all cells of dimension 2 and higher are equivalences (weakly invertible). Some
examples were given in ‘Motivation for Topologists’. There are several structures
in use that, roughly speaking, aim to formalize the idea of such a weak ω-category.
I will describe three of them here.
A weak ω-category in which all cells (of dimension 1 and higher) are equiv-
alences is called a weak ω-groupoid.
This is, of course, subject to precise
deﬁnitions of weak ω-category and equivalence. From the topological viewpoint
one of the main purposes of ω-groupoids is to model homotopy types of spaces

10.2 Non-algebraic deﬁnitions
275
(see Grothendieck’s letter of [1983], for instance), so it is reasonable to replace
ω-groupoids by spaces, or perhaps simplicial sets or chain complexes. The struc-
tures we seek are, therefore, graphs (X(x, x′))x,x′∈X0 of spaces, simplicial sets,
or chain complexes, together with extra data determining some kind of weak
composition.
We have already seen one version of this: an A∞-category (p. 195) is a graph
X of chain complexes together with various composition maps
X(xk−1, xk) ⊗· · · ⊗X(x0, x1)
- X(x0, xk)
parametrized by elements of the operad A∞.
There is a similar notion with
spaces in place of complexes. These are algebraic deﬁnitions (so properly belong
in the previous section).
A similar but non-algebraic notion is that of a Segal category (sometimes
called by other names: see the Notes below). Take a bisimplicial set, expressed
as a functor
X : ∆op
- [∆op, Set],
and suppose that the simplicial set X[0] is discrete (that is, the functor X[0] is
constant). Write X0 for the set of points (constant value) of X[0] . Then for
each k ∈N, the simplicial set X[k] decomposes naturally as a coproduct
X[k] ∼=
a
x0,...,xk∈X0
X(x0, . . . , xk),
and for each k ∈N and x0, . . . , xk ∈X0, there is a natural map
X(x0, . . . , xk)
- X(xk−1, xk) × · · · × X(x0, x1).
A bisimplicial set X is called a Segal category if X[0] is discrete and each of
these canonical maps is a weak equivalence of simplicial sets, in the homotopy-
theoretic sense. This deﬁnition is very closely related to the deﬁnitions of n-
category proposed by Simpsonand Tamsamani,and in particular to the deﬁnition
of homotopy bicategory in Chapter 3.
Finally, there are the quasi-categories of Joyal, Boardman, and Vogt. We
have a diagram
{quasi-categories}
{categories}
⊂
-
{Kan complexes}

⊃
{groupoids}
⊂
-

⊃
of classes of simplicial sets, in which
• categories are identiﬁed with simplicial sets in which every inner horn has
a unique ﬁller (10.2.7)

276
Other Deﬁnitions of Weak n-Category
• Kan complexes are simplicial sets in which every horn has at least one
ﬁller (the principal example being the underlying simplicial set of a space)
• at the intersection, groupoids are simplicial sets in which every horn has a
unique ﬁller
• at the union, quasi-categories are simplicial sets in which every inner
horn has at least one ﬁller.
Large amounts of the theory of ordinary categories can be reproduced for quasi-
categories, although requiring much longer proofs. Given a simplicial set X and
elements x, x′ ∈X[0], there is a simplicial set X(x, x′), the analogue of the space
of paths from x to x′ in topology, and it can be shown that if X is a quasi-
category then each X(x, x′) is a Kan complex. So quasi-categories do indeed
approximate the idea of a weak ω-category in which all cells of dimension at
least 2 are invertible.
Notes
An extensive bibliography and historical discussion of proposed deﬁnitions of n-category
is in my survey paper [2001b].
Various people have confused the contractions of Chapter 9 with the contractions
of Batanin, principally me (see the Notes to Chapter 9) but also Berger [2002, 1.20]. I
apologize to Batanin for stealing his word, using it for something else, then renaming
his original concept (10.1.5).
Berger [2002] has investigated nerves of ω-categories in detail, making connections
to various proposed deﬁnitions of weak ω-categories, especially Joyal’s. Other work on
higher-dimensional nerves has been done by Street ([1996, §10] and references therein)
and Duskin [2002, 2001]. Joyal’s deﬁnition has also been illuminated by Makkai and
Zawadowski [2001] and Batanin and Street [2000].
The observation that most geometrically interesting ω-categories are locally grou-
poidal was made to me by Bertrand To¨en.
His [2002] paper with Vezzosi gives an
introduction to Segal categories, as well as further references. In particular, they point
to Dwyer, Kan and Smith [1989], where Segal categories were called special bisimplicial
sets, and Schw¨anzl and Vogt [1992], where they were called ∆-categories.
Joyal’s quasi-categories are a renaming of Boardman and Vogt’s ‘restricted Kan
complexes’ [1973].
His work on quasi-categories remains unpublished, but has been
presented in seminars since 1997 or earlier.
I thank Sjoerd Crans for useful conversations on the details of Batanin’s deﬁnition,
Jacques Penon for the observation that coherent maps do not compose, and Michael
Batanin and Ross Street for useful comments on their respective deﬁnitions.

Appendices


Appendix A
Symmetric Structures
For my birthday I got a humidiﬁer and a de-humidiﬁer
. . . I put them in the same room and let them ﬁght it out
Steven Wright
Here we meet an alternative deﬁnition of symmetric multicategory and prove
it equivalent to the usual one. This has two purposes. First, the alternative
deﬁnition is in some ways nicer and more natural than the usual one, avoiding as
it does the delicate matter of formulating the symmetry axioms (2.2.20, 2.2.21).
Second, it will be used in Appendix C to show that every symmetric multicategory
gives rise to a T -multicategory for each T belonging to a certain large class of
cartesian monads.
Actually, we start (A.1) with an alternative deﬁnition of commutative monoid.
Although this could hardly be shorter than the standard deﬁnition, it acts as a
warm-up to the alternative deﬁnition of symmetric multicategory (A.2).
A.1
Commutative monoids
Here we deﬁne ‘fat commutative monoids’ and prove that they are essentially
the same as the ordinary kind. The idea is to have some direct way of summing
arbitrary ﬁnite families (ax)x∈X of elements of a commutative monoid A, not
just ordered sequences a1, . . . , an.
Deﬁnition A.1.1 A fat commutative monoid is a set A equipped with a
function P
X : AX
- A for each ﬁnite set X, satisfying the axioms below.
We write elements of AX as families (ax)x∈X (where ax ∈A) and P
X(ax)x∈X
as P
x∈X ax. The axioms are:
• for any map s : X
- Y of ﬁnite sets and any family (ax)x∈X of elements
of A,
X
y∈Y
X
x∈s−1{y}
ax =
X
x∈X
ax

280
Symmetric Structures
• for any one-element set X and any a ∈A,
a =
X
x∈X
a.
A map A
- A′ of fat commutative monoids is a function f : A
- A′ such
that for all ﬁnite sets X, the square
AX
f X- A′X
A
ΣX
?
f- A′
ΣX
?
commutes.
Observe the following crucial property immediately:
Lemma A.1.2 Let A be a fat commutative monoid, s : X
- Y a bijection
between ﬁnite sets, and (by)y∈Y an indexed family of elements of A. Then
X
x∈X
bs(x) =
X
y∈Y
by.
Proof Deﬁne a family (ax)x∈X by ax = bs(x). Then
X
x∈X
ax =
X
y∈Y
X
x∈s−1{y}
ax =
X
y∈Y
by,
by the ﬁrst and second axioms respectively.
2
This allows us to take the expected liberties with notation. If, for example,
we have a family of elements av,w,x indexed over ﬁnite sets V , W and X, then
we may write P
v∈V,w∈W,x∈X av,w,x without ambiguity; the sum could ‘oﬃcially’
be interpreted as either of
X
((v,w),x)∈(V ×W)×X
av,w,x
or
X
(v,(w,x))∈V ×(W×X)
av,w,x
(or some further possibility), but these expressions are equal.
Those concerned with foundations might feel uneasy about the idea of speci-
fying a function P
X : AX
- A ‘for each ﬁnite set X’. The remedy is to choose
a small full subcategory F of the category of ﬁnite sets and functions, such that
F contains at least one object of each ﬁnite cardinality, and interpret ‘ﬁnite set’
as ‘object of F ’; everything works just as well. In particular, you might choose to
replace the category of ﬁnite sets with its skeleton whose objects are the natural
numbers n = {1, . . ., n}, and this might seem like a simplifying move, but it can

A.1 Commutative monoids
281
actually make fat commutative monoids confusing to work with: for instance,
whereas bijections
X
s- Y
t- Z
can be composed in only one possible order, permutations s, t ∈Sn can be
composed in two. I will stick with ‘all ﬁnite sets’.
Write FatCommMon and CommMon for the categories of fat and ordinary
commutative monoids, respectively.
Theorem A.1.3 There is an isomorphism of categories
FatCommMon ∼= CommMon.
Proof We show that both sides are isomorphic to the category UCommMon
of unbiased commutative monoids. By deﬁnition, an unbiased commutative
monoid is a set A equipped with an n-ary addition operation
An
-
A
(a1, . . . , an)
7−→
(a1 + · · · + an)
for each n ∈N, satisfying the three axioms displayed in Example 2.2.2 (written
there with · instead of + and x’s instead of a’s). We have UCommMon ∼=
CommMon, easily.
Given a fat commutative monoid (A, P), deﬁne an unbiased commutative
monoid structure + on A by
(a1 + · · · + an) =
X
x∈{1,...,n}
ax.
The ﬁrst two axioms for an unbiased commutative monoid follow from the two
axioms for a fat commutative monoid, and the third follows from Lemma A.1.2.
Conversely, take an unbiased commutative monoid (A, +) and deﬁne a fat
commutative monoid structure P on A as follows.
For any ﬁnite set X, let
nX ∈N be the cardinality of X and choose a bijection tX : {1, . . . , nX}
∼- X;
then deﬁne P
X : AX
- A by
X
x∈X
ax = (atX(1) + · · · + atX(nX)).
By commutativity, this deﬁnition is independent of the choice of tX. Clearly the
axioms for a fat commutative monoid are satisﬁed.
It is straightforward to check that these two processes are mutually inverse
and extend to an isomorphism of categories.
2

282
Symmetric Structures
A.2
Symmetric multicategories
As in the previous section, we reformulate a notion of symmetric structure by
moving from ﬁnite sequences to ﬁnite families: so in a ‘fat symmetric multicate-
gory’, maps look like
(ax)x∈X
θ- b
rather than
a1, . . . , an
θ- b.
Deﬁnition A.2.1 A fat symmetric multicategory A consists of
• a set A0, whose elements are called the objects of A
• for each ﬁnite set X, family (ax)x∈X of objects, and object b, a set C((ax)x∈X; b),
whose elements θ are called maps in A and written
(ax)x∈X
θ- b
• for each function s : X
- Y between ﬁnite sets, family (ax)x∈X of
objects, family (by)y∈Y of objects, and object c, a function
A((by)y∈Y ; c) ×
Y
y∈Y
A((ax)x∈s−1{y}; by)
- A((ax)x∈X; c),
called composition and written
(φ, (θy)y∈Y ) 7−→φ◦(θy)y∈Y
• for each one-element set X and object a, an identity map
1X
a ∈A((a)x∈X; a),
satisfying
• associativity: if X
s- Y
t- Z are functions between ﬁnite sets and
(ax)x∈s−1{y}
θy- by,
(by)y∈t−1{z}
φz- cz,
(cz)z∈Z
ψ- d
are maps in A (for y ∈Y , z ∈Z), then
(ψ◦(φz)z∈Z)◦(θy)y∈Y = ψ◦(φz◦(θy)y∈t−1{z})z∈Z
• left identity axiom: if X is a ﬁnite set, Y a one-element set, and θ :
(ax)x∈X
- b a map in A, then
1Y
b ◦(θ)y∈Y = θ

A.2 Symmetric multicategories
283
• right identity axiom: if X is a ﬁnite set and θ : (ax)x∈X
- b a map in
A, then
θ◦(1{x}
ax )x∈X = θ.
A map f : A
- A′ of fat symmetric multicategories consists of
• a function f : A0
- A′
0
• for each ﬁnite set X, family (ax)x∈X of objects of A, and object b of A, a
function
A((ax)x∈X; b)
- A′((fax)x∈X; fb),
also written as f,
such that
• f(φ◦(θy)y∈Y ) = f(φ)◦(f(θy))y∈Y whenever these composites make sense
• f(1X
a ) = 1X
fa whenever a is an object of A and X is a one-element set.
This deﬁnes a category FatSymMulticat.
As promised, this deﬁnition avoids the delicate symmetry axioms present in
the traditional version. The following lemma, analogous to Lemma A.1.2, shows
that the symmetric group actions really are hiding in there.
Lemma A.2.2 Let A be a fat symmetric multicategory. Then any bijection s :
X
- Y between ﬁnite sets and map φ : (by)y∈Y
- c in A give rise to a
map φ · s : (bs(x))x∈X
- c in A. This construction satisﬁes
φ · (s◦r) = (φ · s) · r,
θ · 1Y = θ,
where W
r- X
s- Y in the ﬁrst equation. Moreover, if f is a map of fat
symmetric multicategories then f(φ · s) = f(φ) · s whenever these expressions
make sense.
Proof Take s and φ as in the statement. Deﬁne a family (ax)x∈X by ax = bs(x).
For each y ∈Y we have the map
1s−1{y}
by
: (by)x∈s−1{y}
- by;
but by = as−1(y), so the domain of this map is (ax)x∈s−1{y}. We may therefore
deﬁne
φ · s = φ◦

1s−1{y}
by

y∈Y : (ax)x∈X
- c.
The two equations follow from the associativity and identity axioms for a fat sym-
metric multicategory, respectively. That maps of fat symmetric multicategories
preserve · is immediate from the deﬁnitions.
2

284
Symmetric Structures
This lemma is very useful in the proof below that fat and ordinary symmetric
multicategories are essentially the same. Like Lemma A.1.2, it also allows us
to take notational liberties. If, for example, we have a family of objects av,w,x
indexed over ﬁnite sets V , W and X, then we may safely speak of ‘maps
(av,w,x)v∈V,w∈W,x∈X
- b
in A’; it does not matter whether the indexing set in the domain is meant to be
(V × W) × X or V × (W × X) (or some other 3-fold product), as the canonical
isomorphism between them induces a canonical isomorphism of hom-sets,
A((av,w,x)((v,w),x)∈(V ×W)×X; b)
∼- A((av,w,x)(v,(w,x))∈V ×(W×X); b).
Example A.2.3 A fat symmetric operad P is, of course, a fat symmetric
multicategory with only one object; it consists of a set P(X) for each ﬁnite set
X, together with composition and identity operations.
Many well-known examples of symmetric operads are naturally regarded as
fat symmetric operads. For instance, there is a fat symmetric operad D where
an element of D(X) is an X-indexed family (αx)x∈X of disjoint little disks inside
the unit disk (compare 2.2.16). Or, for any set S there is a fat symmetric operad
End(S) deﬁned by (End(S))(X) = Set(SX, S) (compare 2.2.8). Or, there is
a fat symmetric operad O in which O(X) is the set of total orders on X, with
composition done lexicographically; under the equivalence we are about to estab-
lish, it corresponds to the ordinary operad S of symmetries. (This last example
appeared in Beilinson and Drinfeld [c.1997, 1.1.4] and 2.2.20 above.)
Theorem A.2.4 There is a canonical equivalence of categories
( ) : FatSymMulticat
≃- SymMulticat.
Proof We deﬁne the functor ( ) and show that it is full, faithful and (genuinely)
surjective on objects. Details are omitted.
To deﬁne ( ) on objects, take a fat symmetric multicategory A. The symmet-
ric multicategory A has the same objects as A and hom-sets
A(a1, . . . , an; b) = A((ax)x∈[1,n]; b),
where for m, n ∈N we write
[m, n] = {l ∈N | m ≤l ≤n}.
For composition, take maps
a1
1, . . . , ak1
1
θ1- b1,
. . . ,
a1
n, . . . , akn
n
θn- bn,
b1, . . . , bn
φ- c
in A. Deﬁne objects a1, . . . , ak1+···+kn by the equation of formal sequences
(a1, . . . , ak1+···+kn) = (a1
1, . . . , ak1
1 , . . . , a1
n, . . . , akn
n ).

A.2 Symmetric multicategories
285
For each x ∈[1, n] there is an obvious bijection
tx : [k1 + · · · + kx−1 + 1, k1 + · · · + kx−1 + kx]
∼- [1, kx]
deﬁned by subtraction: so the map
(ak1+···+kx−1+y)y∈[1,kx] = (ay
x)y∈[1,kn]
θx- bx
in A gives rise to a map
(az)z∈[k1+···+kx−1+1,k1+···+kx−1+kx]
θx·tx
- bx
in A, by Lemma A.2.2. It now makes sense to deﬁne composition in A by
φ◦(θ1, . . . , θn) = φ◦(θx · tx)x∈[1,n],
since the domain of this map is (az)z∈[1,k1+···+kn].
Identities in A are easier:
for a ∈A, put 1a = 1[1,1]
a
. The structure A just deﬁned really is a symmetric
multicategory, as is straightforward to prove with the aid of Lemma A.2.2.
The deﬁnition of the functor ( ) on morphisms and the proof of functoriality
are also straightforward.
Now we show that ( ) is surjective on objects. For each ﬁnite set X, choose
a bijection sX : [1, nX]
- X, where nX = card(X). In the case that X =
[m + 1, m + n] for some m, n ∈N, choose sX to be the obvious bijection (add
m). Let C be a symmetric multicategory; our task is to deﬁne a fat symmetric
multicategory A such that A = C. (This is the uphill direction and is bound
to require more work.) We deﬁne the objects of A to be the objects of C. If
(ax)x∈X is a ﬁnite family of objects then we deﬁne
A((ax)x∈X; b) = C(asX(1), . . . , asX(nX); b).
If X is a one-element set and a an object then we put
1X
a = 1a ∈C(a; a) = A((a)x∈X; a).
The deﬁnition of composition is clear in principle but ﬁddly in practice, hence
omitted. The idea is that a composite in A can almost be deﬁned as a composite
in C, but because the bijections sX were chosen at random, we have to apply a
symmetry after composing in C—the unique symmetry that makes the domain
come out right. The axioms for the fat symmetric multicategory A then follow,
with some eﬀort, from the ordinary symmetric multicategory axioms on C.
We also have to show that A = C. Certainly their object-sets are equal, and
their hom-sets are equal because
A(a1, . . . , an; b) = A((ax)x∈[1,n]; b) = C(as[1,n](1), . . . , as[1,n](n); b)
and we chose s[1,n] to be the identity. Composition in A was deﬁned using the
obvious bijections
[m + 1, m + k]
∼- [1, k]

286
Symmetric Structures
for certain values of m and k, and to show that it coincides with composition in
A we use the fact that s[m+1,m+k] was also chosen to be the obvious bijection.
Next, ( ) is full.
Let A and A′ be fat symmetric multicategories and h :
A
- A′ a map of ordinary symmetric multicategories; we deﬁne a map f :
A
- A′ such that f = h.
On objects, f(a) = h(a).
Given a map θ :
(ax)x∈X
- b in A, choose a bijection s : [1, n]
- X, where n = card(X).
Then we have the map
θ · s : (as(y))y∈[1,n]
- b
in A, that is, we have
θ · s : as(1), . . . , as(n)
- b
in A; so we obtain the map
h(θ · s) : fas(1), . . . , fas(n)
- fb
in A′, that is,
h(θ · s) : (fas(y))y∈[1,n]
- fb
in A′. It therefore makes sense to deﬁne
f(θ) = h(θ · s) · s−1 : (fax)x∈X
- fb.
This deﬁnition is independent of the choice of s: note that any other choice is
of the form s◦σ for some σ ∈Sn, then use Lemma A.2.2 and the fact that h
preserves symmetric group actions. It is straightforward to check that f really is
a map of fat symmetric multicategories and that f = h.
Finally, ( ) is faithful. Let A
f-
g- A′ be a pair of maps of fat symmetric
multicategories satisfying f = g. Certainly f and g agree on objects. Given
θ : (ax)x∈X
- b in A, choose a bijection s : [1, n]
- X, where n = card(X);
then we have a map
θ · s : as(1), . . . , as(n)
- b
in A. Using Lemma A.2.2,
f(θ) = f(θ · s · s−1) = f(θ · s) · s−1 = f(θ · s) · s−1,
and similarly g(θ) = g(θ · s) · s−1, so f(θ) = g(θ).
2
Notes
Something very close to the notion of fat symmetric multicategories appeared in Beilin-
son and Drinfeld [c.1997, §1.1], under the name of ‘pseudo-tensor categories’. The idea
has probably appeared elsewhere too. Beilinson and Drinfeld insisted that the domain
(ax)x∈X of a map should be a non-empty ﬁnite family of objects, and correspondingly
that the functions called s : X
- Y in Deﬁnition A.2.1 should be surjective. This
amounts to excluding the possibility of nullary maps, which we have no reason to do.
They also handled one-member families slightly diﬀerently.

Appendix B
Coherence for Monoidal
Categories
Here we prove the ‘descriptive’ coherence theorems for unbiased and classical
monoidal categories and functors (3.2.2, 3.2.3).
Unbiased and classical monoidal categories were deﬁned concretely (1.2.5, 3.1.1),
whereas Σ-monoidal categories were deﬁned abstractly (3.2.1). To carry out the
comparisons, we put the deﬁnition of Σ-monoidal category into concrete terms.
Let Σ ∈SetN. Unwinding the abstract deﬁnition, we ﬁnd that a Σ-monoidal
category is a triple A = (A, ⊗, δ) consisting of
• a small category A
• a functor ⊗τ : An
- A for each n ∈N, τ ∈(FΣ)(n)
• an isomorphism
(δτ,τ ′)a1,...,an : ⊗τ(a1, . . . , an)
∼- ⊗τ ′ (a1, . . . , an)
in A for each n ∈N, τ, τ′ ∈(FΣ)(n), ai ∈A (usually just written δτ,τ ′)
satisfying
MC1 (δτ,τ ′)a1,...,an is natural in a1, . . . , an ∈A, for each n ∈N, τ, τ′ ∈(FΣ)(n)
MC2 δτ ′,τ ′′◦δτ,τ ′ = δτ,τ ′′ and 1 = δτ,τ, for all n ∈N, τ, τ′, τ′′ ∈(FΣ)(n)
MC3 ⊗τ ◦(τ1,...,τn) = (Ak1+···+kn
⊗τ1 ×···×⊗τn- An
⊗τ- A) for all n, ki ∈N, τ ∈
(FΣ)(n), τi ∈(FΣ)(ki); and 1A = ⊗|

288
Coherence for Monoidal Categories
MC4 the diagram
⊗τ(⊗τ1(a1
1, . . . , ak1
1 ), . . . ,
⊗τn(a1
n, . . . , akn
n ))
=== ⊗τ ◦(τ1,...,τn)(a1
1, . . . , akn
n )
⊗τ(⊗τ ′
1(a1
1, . . . , ak1
1 ), . . . ,
⊗τ ′n(a1
n, . . . , akn
n ))
⊗τ(δτ1,τ′
1 ,...,δτn,τ′n)
?
⊗τ ′(⊗τ ′
1(a1
1, . . . , ak1
1 ), . . . ,
⊗τ ′
n(a1
n, . . . , akn
n ))
δτ,τ′ ?
== ⊗τ ′◦(τ ′
1,...,τ ′n)(a1
1, . . . , akn
n )
δτ◦(τ1,...,τn),τ′◦(τ′
1,...,τ′n)
?
commutes, for all n, ki ∈N, τ, τ′ ∈(FΣ)(n), τi, τ′
i ∈(FΣ)(ki), aj
i ∈A.
A lax monoidal functor (P, π) : (A, ⊗, δ)
- (A′, ⊗, δ) (where, in an abuse of
notation, we write ⊗for the tensor and δ for the coherence maps in both A and
A′) consists of
• a functor P : A
- A′
• a map
(πτ)a1,...,an : ⊗τ(Pa1, . . . , Pan)
- P ⊗τ (a1, . . . , an)
(usually just written πτ) for each n ∈N, τ ∈(FΣ)(n), ai ∈A
satisfying
MF1 (πτ)a1,...,an is natural in a1, . . . , an ∈A
MF2 the diagram
⊗τ(Pa1, . . . , Pan)
δτ,τ′- ⊗τ ′(Pa1, . . . , Pan)
P ⊗τ (a1, . . . , an)
πτ ?
P δτ,τ′- P ⊗τ ′ (a1, . . . , an)
πτ′
?
commutes, for all n ∈N, τ, τ′ ∈(FΣ)(n), ai ∈A

B.1 Unbiased monoidal categories
289
MF3 the diagram
⊗τ(⊗τ1(Pa1
1, . . . , Pak1
1 ), . . . ,
⊗τn(Pa1
n, . . . , Pakn
n ))
== ⊗τ ◦(τ1,...,τn)(Pa1
1, . . . , Pakn
n )
⊗τ(P ⊗τ1 (a1
1, . . . , ak1
1 ), . . . ,
P ⊗τn (a1
n, . . . , akn
n ))
⊗τ(πτ1,...,πτn)
?
P ⊗τ (⊗τ1(a1
1, . . . , ak1
1 ), . . . ,
⊗τn(a1
n, . . . , akn
n ))
πτ ?
=== P ⊗τ ◦(τ1,...,τn) (a1
1, . . . , akn
n )
πτ◦(τ1,...,τn)
?
commutes for all n, ki ∈N, τ ∈(FΣ)(n), τi ∈(FΣ)(ki), aj
i ∈A, and the
diagram
Pa === ⊗| Pa
Pa
1
?
=== P ⊗| a
π1
?
commutes for all a ∈A (where in the expression ‘π1’, the 1 is the unit of
the operad FΣ).
A weak (respectively, strict) monoidal functor is a lax monoidal functor (P, π) in
which all the πτ’s are isomorphisms (respectively, identities).
In the cases at hand, the object Σ of SetN is either the terminal object 1
(for unbiased monoidal categories) or the object Σc deﬁned in Theorem 3.2.3 (for
classical monoidal categories). The Set-operad FΣ is then, respectively, either
the operad tr of all trees (2.3.3) or the operad ctr of classical trees (2.3.4).
Sections B.1 and B.2 prove coherence for unbiased and classical monoidal cat-
egories, respectively. The unbiased case contains some scary-looking expressions
but is completely straightforward: one only needs to be awake, not clever. By
contrast, the classical case requires guile, cunning and trickery—attributes not
displayed here, but vital to the proofs of the coherence theorems upon which we
rely.
All of the results that we prove continue to hold in the more general setting
of Σ-bicategories (3.4).
The proofs need only superﬁcial changes of the kind
described in 3.4; for instance, the category A becomes a Cat-graph B and tensor
becomes composition.
B.1
Unbiased monoidal categories
The plan is to deﬁne a functor
J : 1-MonCatlax
- UMonCatlax,

290
Coherence for Monoidal Categories
to prove that it is an isomorphism (by showing in turn that it is injective on
objects, surjective on objects, faithful, and full), and then to prove that it restricts
to isomorphisms
1-MonCatwk
∼- UMonCatwk,
1-MonCatstr
∼- UMonCatstr
at the weak and strict levels.
Recall from 2.3.3 that | ∈tr(1) denotes the ‘null’ or identity tree, and that
νn ∈tr(n) denotes the simplest n-leafed tree
•
Q
Q· · · . (Recall also that ν1 =
• ̸=
.) We will be composing trees—that is, composing in the operad tr—and
in particular we will often use the composite tree
νn◦(νk1, . . . , νkn) =
•
H
H

· · ·
•
@  · · ·
•
@  · · ·
.
Our ﬁrst task is to deﬁne a functor J : 1-MonCatlax
- UMonCatlax.
On objects Let (A, ⊗, δ) be an object of 1-MonCatlax. The unbiased monoidal
category J(A, ⊗, δ) is given by taking the underlying category to be A, the
n-fold tensor ⊗n : An
- A to be ⊗νn, and the coherence maps to be
γ((a1
1,...,ak1
1 ),...,(a1n,...,akn
n )) = (δνn◦(νk1 ,...,νkn),νk1+···+kn )a1
1,...,akn
n
:
((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · · ⊗(a1
n ⊗· · · ⊗akn
n ))
- (a1
1 ⊗· · · ⊗akn
n )
and
ιa = (δ | ,ν1)a : a
- (a).
On maps Let (P, π) : A
- A′ be a map in 1-MonCatlax. The lax monoidal
functor J(P, π) : J(A)
- J(A′) is given by taking the same underlying
functor P, and by taking the coherence map
πa1,...,an : (Pa1 ⊗· · · ⊗Pan)
- P(a1 ⊗· · · ⊗an)
(re-using the letter π, in another slight abuse) to be (πνn)a1,...,an.
Lemma B.1.1 This deﬁnes a functor J : 1-MonCatlax
- UMonCatlax.
Proof We have to check three things:
• J(A, ⊗, δ) as deﬁned above really is an unbiased monoidal category—in
other words, the axioms in Deﬁnition 3.1.1 hold. Naturality and invert-
ibility of γ and ι follow from the same properties for δ. The associativity
axiom holds because both routes around the square are
(δνn◦(νm1 ,...,νmn)◦(νk1
1 ,...,νkmn
n
),νk1
1+···+kmn
n
)a1,1,1,...,an,mn,kmn
n
,
as can be shown from axioms MC2 and MC4. The identity axioms hold by
similar reasoning.

B.1 Unbiased monoidal categories
291
• J(P, π) as deﬁned above really is a lax monoidal functor between unbiased
monoidal categories (Deﬁnition 3.1.3). Naturality of πa1,...,an in the ai’s
follows from the same naturality for πνn. The coherence axioms can be
deduced from axioms MF1–MF3.
• J preserves composition and identities. This is trivial.
2
Lemma B.1.2 The functor J : 1-MonCatlax
- UMonCatlax is injective
on objects.
Proof
Suppose that (A, ⊗, δ) and (A′, ⊗′, δ′) are 1-monoidal categories with
J(A, ⊗, δ) = J(A′, ⊗′, δ′). (Just for once, the tensor of A′ is written ⊗′ rather
than ⊗, and similarly δ′ rather than δ.) Then:
• A = A′ immediately.
• ⊗τ = ⊗′
τ for all n ∈N and τ ∈tr(n). This is proved by induction on τ,
using the description of tr in 2.3.3. Since there will be many inductions
on trees in this appendix, I will write this one out in full and leave the
others to the virtuous reader. First, ⊗| = 1A = ⊗′
| by MC3. Second, take
τ1 ∈tr(k1), . . . , τn ∈tr(kn). Then
⊗(τ1,...,τn)
=
⊗νn◦(τ1,...,τn)
=
⊗νn◦(⊗τ1 × · · · × ⊗τn),
again by MC3. But ⊗νn = ⊗′
νn since J(A, ⊗, δ) = J(A′, ⊗′, δ′), and ⊗τi =
⊗′
τi by inductive hypothesis, so ⊗(τ1,...,τn) = ⊗′
(τ1,...,τn), completing the
induction.
• δτ,τ ′ = δ′
τ,τ ′ for all τ, τ ′ ∈tr(n). Since δτ,τ ′ = δ−1
τ ′,νn◦δτ,νn, it is enough to
prove this in the case τ ′ = νn; and that is done by another short induction
on τ.
2
Lemma B.1.3 The functor J : 1-MonCatlax
- UMonCatlax is surjective
on objects.
Proof
Take an unbiased monoidal category (A, ⊗, γ, ι). Attempt to deﬁne a
1-monoidal category (A, ⊗, δ) as follows:
• The underlying category A is the same.
• The tensor ⊗τ : An
- A, for τ ∈tr(n), is deﬁned inductively on τ by
⊗| = 1A and
⊗(τ1,...,τn) = (Ak1+···+kn
⊗τ1 ×···×⊗τn
- An
⊗n- A).
• The coherence isomorphisms are deﬁned by δτ,τ ′ = δ−1
τ ′ ◦δτ, where in turn
δτ : ⊗τ(a1, . . . , an)
∼- (a1 ⊗· · · ⊗an)

292
Coherence for Monoidal Categories
is deﬁned by taking δ | = ι and taking δ(τ1,...,τn) to be the composite
(⊗τ1(a1
1, . . . , ak1
1 ) ⊗· · · ⊗⊗τn(a1
n, . . . , akn
n ))
(δτ1 ⊗···⊗δτn )
-
((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · · ⊗(a1
n ⊗· · · ⊗akn
n ))
γ-
(a1
1 ⊗· · · ⊗akn
n ).
This does indeed satisfy the axioms for a 1-monoidal category:
MC1, MC2 Immediate.
MC3 That ⊗| = 1A is immediate. The other equation can be proved by induc-
tion on τ, or by using the fact that tr is the free operad on 1 ∈SetN and
that (Cat(An, A))n∈N forms an operad.
MC4 It is enough to show that this axiom is satisﬁed when τ′ = νn, τ′
1 =
νk1, . . . , τ′
n = νkn: in other words, that
⊗τ(⊗τ1(a1
1, . . . , ak1
1 ), . . . ,
⊗τn(a1
n, . . . , akn
n ))
== ⊗τ ◦(τ1,...,τn)(a1
1, . . . , akn
n )
⊗τ((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · ·
⊗(a1
n ⊗· · · ⊗akn
n ))
⊗τ (δτ1 ,...,δτn )
?
(a1
1 ⊗· · · ⊗akn
n )
δτ◦(τ1,...,τn)
?
((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · ·
⊗(a1
n ⊗· · · ⊗akn
n ))
δτ ?
====
((a1
1 ⊗· · · ⊗ak1
1 ) ⊗· · ·
⊗(a1
n ⊗· · · ⊗akn
n ))
δνn◦(νk1 ,...,νkn )=γ
6
commutes. This is done by induction on τ, using the associativity axiom
for unbiased monoidal categories.
Finally, J(A, ⊗, δ) = (A, ⊗, γ, ι):
• Clearly the underlying categories agree, both being A.
• We have
⊗νn = ⊗( | ,..., | ) = ⊗n◦(⊗| × · · · × ⊗| ) = ⊗n,
so the tensor products agree.
• Certainly δ | = ι. Also
δνk = γ◦(δ | ⊗· · · ⊗δ | ) = γ◦(ι ⊗· · · ⊗ι) = 1
for any k, so
δνn◦(νk1 ,...,νkn) = γ◦(δνk1 ⊗· · · ⊗δνkn ) = γ.
Hence the coherence maps ι and γ also agree.
2

B.1 Unbiased monoidal categories
293
Lemma B.1.4 The functor J : 1-MonCatlax
- UMonCatlax is faithful.
Proof Suppose that A
(P,π)
-
(Q,χ)
- A′ in 1-MonCatlax with J(P, π) = J(Q, χ). Then:
• P = Q immediately.
• πτ = χτ for all τ ∈tr(n), by an induction on τ similar to the one written
out in the proof of B.1.2.
2
Lemma B.1.5 The functor J : 1-MonCatlax
- UMonCatlax is full.
Proof
Let A, A′ ∈1-MonCatlax and let J(A)
(P,π)- J(A′) be a map in
UMonCatlax. Attempt to deﬁne a map A
(P,π)- A′ in 1-MonCatlax (where
as usual we abuse notation by recycling the name (P, π)) as follows:
• The underlying functor P is the same.
• The coherence maps πτ are deﬁned by induction on τ. We take π | = 1 and
take
⊗(τ1,...,τn)(Pa1
1, . . . , Pakn
n )
π(τ1,...,τn)
- P ⊗(τ1,...,τn) (a1
1, . . . , akn
n )
to be the composite
(⊗τ1(Pa1
1, . . . , Pak1
1 ) ⊗· · · ⊗⊗τn(Pa1
n, . . . , Pakn
n ))
(πτ1⊗···⊗πτn)
-
(P ⊗τ1 (a1
1, . . . , ak1
1 ) ⊗· · ·
⊗P ⊗τn (a1
n, . . . , akn
n ))
π
⊗τ1 (a1
1,...,ak1
1
),...,⊗τn (a1n,...,akn
n
)
-
P(a1
1 ⊗· · · ⊗akn
n ).
This does satisfy the axioms above for a lax monoidal functor between 1-
monoidal categories:
MF1 Immediate.
MF2 It is enough to prove this when τ ′ = νn; in other words, that
⊗τ(Pa1, . . . , Pan)
δτ- (Pa1 ⊗· · · ⊗Pan)
P ⊗τ (a1, . . . , an)
πτ ?
P δτ
- P(a1 ⊗· · · ⊗an)
πa1,...,an
?
commutes. This is done by induction on τ, using the coherence axioms for
lax monoidal functors between unbiased monoidal categories.
MF3 This is, inevitably, another induction on τ.

294
Coherence for Monoidal Categories
Finally, J(P, π) = (P, π):
• The underlying functors agree, both being P.
• We have
(πνn)a1,...,an
=
π⊗| (a1),...,⊗| (an)◦((π | )a1 ⊗· · · ⊗(π | )an)
=
πa1,...,an◦(1 ⊗· · · ⊗1)
=
πa1,...,an,
so the coherence maps also agree.
2
Theorem 3.2.2 now follows in the lax case: UMonCatlax ∼= 1-MonCatlax.
The weak and strict cases follow from:
Lemma B.1.6 The isomorphism J : 1-MonCatlax
∼- UMonCatlax restricts
to isomorphisms
1-MonCatwk
∼- UMonCatwk,
1-MonCatstr
∼- UMonCatstr.
Proof Trivial.
2
B.2
Classical monoidal categories
The strategy is the same as in the unbiased setting: we deﬁne a functor
J : Σc-MonCatlax
- MonCatlax,
prove it is an isomorphism, then prove that it restricts to isomorphisms at the
levels of weak and strict maps.
We will use the operad ctr of classical or unitrivalent trees (2.3.4). In partic-
ular, we have trees
ν0 =
∈ctr(0),
ν2 =
∈ctr(2),
the identity tree | ∈ctr(1), and composite trees
ν2◦(ν2, | ) =
∈ctr(3),
ν2◦( | , ν2) =
∈ctr(3),
ν2◦(ν0, | ) =
∈ctr(1),
ν2◦( | , ν0) =
∈ctr(1).
To prove our result, we will certainly want to use the fact that ‘all diagrams
commute’ in a classical monoidal category, and some similar statement for mo-
noidal functors. In other words, the proof of our uniﬁed coherence theorem for
classical monoidal categories and functors will depend on pre-established coher-
ence theorems. A rather vague description of those theorems was given in 1.2.
Using the language of trees we can now be more precise.
So, let A = (A, ⊗, I, α, λ, ρ) be a classical monoidal category. We deﬁne for
each n ∈N and τ ∈ctr(n) a functor ⊗τ : An
- A. This deﬁnition is by
induction on τ (using the description of ctr in 2.3.4), as follows:

B.2 Classical monoidal categories
295
• ⊗| : A1
- A is the canonical isomorphism
• ⊗
: A0
- A ‘is’ the unit object I of A
• if τ1 ∈ctr(k1) and τ2 ∈ctr(k2) then ⊗(τ1,τ2) is the composite
Ak1+k2
⊗τ1 ×⊗τ2
- A2
⊗- A.
The coherence results from 1.2 can now be stated as:
• Let A be a classical monoidal category. Then for each n ∈N and τ, τ′ ∈
ctr(n), there is a unique natural transformation An
⊗τ
⊗τ′
R

∨
A built out of
α, λ and ρ.
• Let (P, π) : A
- A′ be a lax monoidal functor. Then for each n ∈N and
τ, τ′ ∈ctr(n), there is a unique natural transformation
An
⊗τ - A
⇒
A′n
P n
?
⊗τ′ - A′
P
?
built out of the coherence isomorphisms α, λ and ρ of A and A′ and the
coherence maps π−,−and π·.
I will refer to these as informal coherence for classical monoidal categories and
functors. They could be made precise by deﬁning ‘built out of’, but I hope the
reader will be content to use them in their present imprecise form.
Our ﬁrst task is to deﬁne a functor J : Σc-MonCatlax
- MonCatlax.
On objects Let (A, ⊗, δ) be an object of Σc-MonCatlax, as described in the in-
troduction to this appendix. Then the classical monoidal category J(A, ⊗, δ)
is given by taking the underlying category to be A, the tensor to be ⊗
,
the unit object to be ⊗, and the coherence isomorphisms to be
α = δτ1,τ ′
1,
λ = δτ2, | ,
ρ = δτ3, |
where
τ1 =
,
τ′
1 =
,
τ2 =
,
τ3 =
.

296
Coherence for Monoidal Categories
On maps Let (P, π) : A
- A′ be a map in Σc-MonCatlax, also as de-
scribed in the introductory section. Then the lax monoidal functor J(P, π) :
J(A)
- J(A′) is given by taking the same underlying category P and
coherence maps
π−,−= π
,
π· = π .
Lemma B.2.1 This deﬁnes a functor J : Σc-MonCatlax
- MonCatlax.
Proof We have to check three things:
• J(A, ⊗, δ) as deﬁned above really is a classical monoidal category. Natural-
ity and invertibility of α, λ and ρ follow from the same properties of δ. The
pentagon (1.2.5) commutes because each route around it is δτ,τ ′, where
τ =
,
τ′ =
.
Similarly, the triangle commutes because both ways round it are δσ,σ′,
where
σ =
,
σ′ =
.
• (J, π) as deﬁned above really is a lax monoidal functor between classical
monoidal categories. The axioms can be deduced from MF1–MF3.
• J preserves composition and identities. This is trivial.
2
Lemma B.2.2 The functor J : Σc-MonCatlax
- MonCatlax is injective
on objects.
Proof
Suppose that (A, ⊗, δ) and (A′, ⊗′, δ′) are Σc-monoidal categories with
J(A, ⊗, δ) = J(A′, ⊗′, δ′). Then:
• A = A′ immediately.
• ⊗τ = ⊗′
τ for all n ∈N and τ ∈tr(n). This is proved by induction on τ,
using the deﬁnition of ctr in 2.3.4. As in the previous section, there will be
many proofs by induction on the structure of a tree; and as a sample of the
technique in the classical case, I will write this one out in full. First, ⊗| =
1A = ⊗′
| by MC3. Second, ⊗
= I = ⊗′ since J(A, ⊗, δ) = J(A′, ⊗′, δ′).
Third, take τ1 ∈ctr(k1) and τ2 ∈ctr(k2). Then
⊗(τ1,τ2) = ⊗
◦(τ1,τ2) = ⊗
◦(⊗τ1 × ⊗τ2),
again by MC3.
But ⊗
= ⊗′
since J(A, ⊗, δ) = J(A′, ⊗′, δ′), and
⊗τi = ⊗′
τi by inductive hypothesis, so ⊗(τ1,τ2) = ⊗′
(τ1,τ2), completing the
induction.

B.2 Classical monoidal categories
297
• δτ,τ ′ = δ′
τ,τ ′ for all τ, τ ′ ∈ctr(n). This follows from informal coherence for
classical monoidal categories—in particular, from the fact that there is at
least one natural transformation ⊗τ
- ⊗τ ′ built up from α, λ and ρ. 2
Lemma B.2.3 The functor J : Σc-MonCatlax
- MonCatlax is surjective
on objects.
Proof Take a classical monoidal category (A, ⊗, I, α, λ, ρ). Attempt to deﬁne a
Σc-monoidal category (A, ⊗, δ) as follows:
• The underlying category A is the same.
• The tensor ⊗τ : An
- A, for τ ∈ctr(n), is deﬁned inductively on τ by
⊗| = 1A, ⊗
= I, and
⊗(τ1,τ2) = (Ak1+k2
⊗τ1×⊗τ2
- A2
⊗- A).
• The coherence isomorphism δτ,τ ′ : ⊗τ
- ⊗τ ′ is the canonical natural
isomorphism in the statement of informal coherence.
This does indeed satisfy the axioms for a Σc-monoidal category, as listed in the
introductory section:
MC1, MC2 Immediate.
MC3 That ⊗| = 1A is immediate. The other equation can be proved by induc-
tion on τ, or by using the fact that ctr is the free operad on Σc ∈SetN
and that (Cat(An, A))n∈N forms an operad.
MC4 Follows immediately from informal coherence.
Finally, J(A, ⊗, δ) = (A, ⊗, I, α, λ, ρ):
• Clearly the underlying categories agree, both being A.
• We have
⊗
= ⊗( | , | ) = ⊗◦(⊗| × ⊗| ) = ⊗
and ⊗= I, so the tensor products and unit objects agree.
• To prove that the coherence isomorphisms agree, we have to check that
δ
,
= α,
δ
, | = λ,
δ
, | = ρ.
This can be done either by a short calculation or by applying informal
coherence.
2
Lemma B.2.4 The functor J : Σc-MonCatlax
- MonCatlax is faithful.

298
Coherence for Monoidal Categories
Proof
Suppose that A
(P,π)
-
(Q,χ)
- A′ in Σc-MonCatlax with J(P, π) = J(Q, χ).
Then:
• P = Q immediately.
• πτ = χτ for all τ ∈ctr(n). This can be proved either by an induction on τ
similar to the one written out in the proof of Lemma B.2.2, or by applying
informal coherence for lax monoidal functors.
2
Lemma B.2.5 The functor J : Σc-MonCatlax
- MonCatlax is full.
Proof
Let A, A′ ∈Σc-MonCatlax and let J(A)
(P,π)- J(A′) be a map in
MonCatlax. Attempt to deﬁne a map A
(P,π)- A′ in Σc-MonCatlax (where
again we abuse notation by re-using the name (P, π)) as follows:
• The underlying functor P is the same.
• The coherence maps πτ are deﬁned by induction on τ. We take π | = 1; we
take
(π
: ⊗
- P⊗) = (π· : I
- PI);
and we take the component of π(τ1,τ2) at a1
1, . . . , ak1
1 , a1
2, . . . , ak2
2
to be the
composite
(⊗τ1(Pa1
1, . . . , Pak1
1 ) ⊗⊗τ2(Pa1
2, . . . , Pak2
2 ))
(πτ1 ⊗πτ2)
-
(P ⊗τ1 (a1
1, . . . , ak1
1 ) ⊗P ⊗τ2 (a1
2, . . . , ak2
2 ))
π
⊗τ1 (a1
1,...,ak1
1
),⊗τ2 (a1
2,...,ak2
2
)
-
P(⊗τ1(a1
1, . . . , ak1
1 ) ⊗⊗τ2(a1
2, . . . , ak2
2 )).
This satisﬁes axioms MF1–MF3 for a lax monoidal functor between Σc-monoidal
categories, by informal coherence. We then have J(P, π) = (P, π):
• The underlying functors agree, both being P.
• We have
(π
)a1,a2 = π⊗| (a1),⊗| (a2)◦((π | )a1 ⊗(π | )a2) = πa1,a2◦(1 ⊗1) = πa1,a2
and π
= π·, so the coherence maps also agree.
2
Theorem 3.2.3 now follows in the lax case: MonCatlax ∼= Σc-MonCatlax.
The weak and strict cases follow from:
Lemma B.2.6 The isomorphism J : Σc-MonCatlax
∼- MonCatlax restricts
to isomorphisms
Σc-MonCatwk
∼- MonCatwk,
Σc-MonCatstr
∼- MonCatstr.
Proof Trivial.
2

B.2 Classical monoidal categories
299
Notes
References can be found in the Notes to Chapter 3.

300
Coherence for Monoidal Categories

Appendix C
Special Cartesian Monads
Pictures can’t say ‘ain’t’
Worth [1975]
We have met many monads, most of them cartesian. Some had special properties
beyond being cartesian—for instance, some were the monads arising from oper-
ads, and, as will be explained, some admitted a certain explicit representation.
Here we look at these special kinds of cartesian monad and prove some results
supporting the theory in the main text.
First (C.1) we look at the monads arising from plain operads. Monads are
algebraic theories, so we can ask which algebraic theories come from operads.
The answer turns out to be the strongly regular theories (2.2.5).
In 6.2 we saw that the monad arising from an operad is cartesian. It now
follows that the monad corresponding to a strongly regular theory is cartesian, a
fact we used in many of the examples in Chapter 4. More precisely, we saw in 6.2.4
that a monad on Set arises from a plain operad if and only if it is cartesian and
‘augmented over the free monoid monad’, meaning that there exists a cartesian
natural transformation from it into the free monoid functor, commuting with
the monad structures. On the other hand, not every cartesian monad on Set
possesses such an augmentation, as we shall see.
One possible drawback of the generalized operad approach to higher-dimensional
category theory is that it can involve monads that are rather hard to describe
explicitly. For instance, the sequence Tn of ‘opetopic’ monads (Chapter 7) was
generated recursively using nothing more than the existence of free operads, and
to describe Tn explicitly beyond low values of n is diﬃcult. The second and third
sections of this appendix ease this diﬃculty.
The basic result is that if a Set-valued functor preserves inﬁnitary or ‘wide’
pullbacks—which is not asking much more than it be cartesian—then it is the co-
product of a family of representable functors. This goes some way towards provid-
ing the explicit form desired in the previous paragraph. In C.2 we look at monads
on Set whose functor parts are ‘familially representable’ in this sense. (Finitary
familially representable functors can also be viewed as a non-symmetric version

302
Special Cartesian Monads
operadic monads
= strongly regular ﬁnitary algebraic theories
= cartesian monads augmented over the free monoid monad
⊂
ﬁnitary wide-pullback-preserving monads
= ﬁnitary connected-limit-preserving monads
= ﬁnitary familially representable monads
⊆
ﬁnitary cartesian monads
Figure C-A: Classes of ﬁnitary cartesian monads on Set
of the analytic functors of Joyal [1986].) In C.3 we examine monads (T, µ, η) on
presheaf categories whose functor parts T satisfy an analogous condition. All the
opetopic monads Tn are of this form, and this enables us to prove in C.4 that
every symmetric multicategory gives rise naturally to a Tn-multicategory for each
n ∈N.
The situation for the various types of ﬁnitary cartesian monad on Set is
depicted in Fig. C-A. The terminology is deﬁned and the proofs are given below.
Example C.2.8 shows that the ﬁrst inclusion is proper; I do not know whether
the second is too.
C.1
Operads and algebraic theories
Some algebraic theories can be described by plain operads, and some cannot.
In this section we will prove that the theories that can are precisely those that
admit strongly regular presentations, in the sense of Example 2.2.5.
What exactly this means is as follows.
Any plain operad P gives rise to
a monad (TP , µP , ηP ) on Set, as we saw in 4.3. Say that a monad on Set is
operadic if it is isomorphic to the monad (TP , µP , ηP ) arising from some plain
operad P. On the other hand, any algebraic theory gives rise to a monad on Set,
as we will discuss in a moment. Say that a monad on Set is strongly regular if
it is isomorphic to the monad arising from some strongly regular ﬁnitary theory.
Our result is:
Theorem C.1.1 A monad on Set is operadic if and only if it is strongly regular.
This means that if we have before us an algebraic theory presented by operations
and strongly regular equations then we may deduce immediately that it can
be described by an operad. Moreover, since any operadic monad is cartesian
(Proposition 6.2.1), we obtain the useful corollary:
Corollary C.1.2 Any strongly regular monad on Set is cartesian.
2
This is used throughout Section 4.1 to generate examples of cartesian monads on
Set. It is also proved in Carboni and Johnstone [1995], Proposition 3.2 (part of

C.1 Operads and algebraic theories
303
which is wrong, as discussed on p. 314, but the part we are using here is right).
The other half of Theorem C.1.1 says that any operad can be presented by a
system of operations and strongly regular equations. This may not be so useful,
but gives the story a tidy ending.
The deﬁnition of an algebraic theory and the way that one gives rise to a
monad on Set are well known, and a detailed account can be found in, for
instance, Manes [1976] or Borceux [1994b]. Things are easier when the theory is
strongly regular, and this case is all we will need, so I will describe it in full.
Let Σ ∈SetN. Write FΣ for the free plain operad on Σ (or for the underlying
object of SetN), as constructed explicitly in 2.3. We think of Σ as a ‘signature’:
Σ(n) is the set of primitive n-ary operations, and (FΣ)(n) is the set of n-ary
operations derived from the primitive ones. A strongly regular presentation
of an algebraic theory is a pair (Σ, E) where Σ ∈SetN and E is a family
(En)n∈N with En ⊆(FΣ)(n)×(FΣ)(n). We think of E as the system of equations.
For example, the usual presentation of the theory of semigroups is
Σ(n) =

{σ}
if n = 2
∅
otherwise,
En =

{(σ◦(σ, 1), σ◦(1, σ))}
if n = 3
∅
otherwise.
(Implicitly, we are using ‘algebraic theory’ to mean ‘ﬁnitary, single-sorted alge-
braic theory’.)
The operad FΣ induces a monad (TF Σ, µF Σ, ηF Σ) on Set. We have
TF ΣA =
a
n∈N
(FΣ)(n) × An
for any set A; this is usually called the set of ‘Σ-terms in A’. Bringing in equa-
tions, if (Σ, E) is a strongly regular presentation of an algebraic theory then the
induced monad (T(Σ,E), µ(Σ,E), η(Σ,E)) on Set is given as follows. For any set A,
T(Σ,E)A = (TF ΣA)/ ∼A
where ∼A is the smallest equivalence relation on TF ΣA such that
• ∼A is a congruence: if σ ∈Σ(n) and we have τi ∈(FΣ)(ki), ˆτi ∈(FΣ)(ˆki),
aj
i, ˆaj
i ∈A satisfying
(τi, a1
i , . . . , aki
i ) ∼A (ˆτi, ˆa1
i , . . . , ˆa
ˆki
i )
for each i = 1, . . . , n, then
(σ◦(τ1, . . . , τn), a1
1, . . . , akn
n ) ∼A (σ◦(ˆτ1, . . . , ˆτn), ˆa1
1, . . . , ˆa
ˆkn
n )
• the equations are satisﬁed: if (τ, ˆτ) ∈En and τ1 ∈(FΣ)(k1), . . . , τn ∈
(FΣ)(kn), aj
i ∈A, then
(τ ◦(τ1, . . . , τn), a1
1, . . . , akn
n ) ∼A (ˆτ ◦(τ1, . . . , τn), a1
1, . . . , akn
n ).

304
Special Cartesian Monads
This deﬁnes an endofunctor T(Σ,E) of Set and a natural transformation ε :
TF Σ
- T(Σ,E) (the quotient map). The multiplication µ(Σ,E)
A
and unit η(Σ,E)
A
of the monad are the unique maps making
T 2
F ΣA
µF Σ
A - TF ΣA ηF Σ
A
A
T 2
(Σ,E)A
(ε∗ε)A ?
..........
µ(Σ,E)
A
- T(Σ,E)A
εA
?
..........
η(Σ,E)
A
A,
wwwww
(C:1)
commute. By deﬁnition, a monad on Set is strongly regular if and only if it is
isomorphic to a monad of the form (T(Σ,E), µ(Σ,E), η(Σ,E)).
We have now given sense to the terms in the theorem and can start to prove
it. Fix a strongly regular presentation (Σ, E) of an algebraic theory. The ﬁrst
task is to simplify the clauses above deﬁning ∼A, which we do by reducing to the
case A = 1. Note that ∼1 is an equivalence relation on `
n∈N(FΣ)(n).
Lemma C.1.3 Let A be a set, n, ˆn ∈N, τ ∈(FΣ)(n), ˆτ ∈(FΣ)(ˆn).
a. If τ ∼1 ˆτ then n = ˆn and (τ, a1, . . . , an) ∼A (ˆτ, a1, . . . , an) for all a1, . . . , an ∈
A.
b. If a1, . . . , an, ˆa1, . . . , ˆaˆn ∈A and (τ, a1, . . . , an) ∼A (ˆτ, ˆa1, . . . , ˆaˆn) then n =
ˆn, a1 = ˆa1, . . . , an = ˆaˆn, and τ ∼1 ˆτ.
Proof
To prove (a), deﬁne a relation ≈on `
m∈N(FΣ)(m) as follows: for
φ ∈(FΣ)(m) and ˆφ ∈(FΣ)( ˆm),
φ ≈ˆφ ⇐⇒m = ˆm and (φ, a1, . . . , am) ∼A (ˆφ, a1, . . . , am) for all a1, . . . , am ∈A.
Then ≈is an equivalence relation since ∼A is.
If we can prove that ≈also
satisﬁes the two conditions for which ∼1 is minimal then we will have ∼1 ⊆≈,
proving (a). So, for the ﬁrst condition (≈is a congruence): suppose that σ ∈
Σ(m) and that for each i = 1, . . . , m we have φi, ˆφi ∈(FΣ)(ki) with φi ≈ˆφi.
Then for all a1
1, . . . , akm
m ∈A, the fact that φi ≈ˆφi implies that
(φi, a1
i , . . . , aki
i ) ∼A (ˆφi, a1
i , . . . , aki
i ),
and so the fact that ∼A is a congruence implies that
(σ◦(φ1, . . . , φm), a1
1, . . . , akm
m ) ∼A (σ◦(ˆφ1, . . . , ˆφm), a1
1, . . . , akm
m ).
Hence σ◦(φ1, . . . , φm) ≈σ◦(ˆφ1, . . . , ˆφm), as required. For the second condition
(the equations are satisﬁed): if (φ, ˆφ) ∈Em then φ ≈ˆφ, by taking τ1, . . . , τn all
to be the identity 1 ∈(FΣ)(1) in the second condition for ∼A.
Several of the proofs here are of this type: we have an equivalence relation ∼
(in this case ∼1) deﬁned to be minimal such that certain conditions are satisﬁed,

C.1 Operads and algebraic theories
305
and we want to prove that if x ∼y then some conclusion involving x and y holds.
To do this we deﬁne a new equivalence relation ≈by ‘x ≈y if and only if the
conclusion holds’; we then show that ≈satisﬁes the conditions for which ∼was
minimal, and the result follows. These proofs, like diagram chases in homological
algebra, are more illuminating to write than to read, so the remaining similar
ones (including (b)) are omitted. None of them is signiﬁcantly more complicated
than the one just done.
2
Corollary C.1.4 For any set A, the quotient map εA : TF ΣA
- T(Σ,E)A
induces a bijection
a
n∈N
((FΣ)(n)/ ∼1) × An
∼- T(Σ,E)A.
2
Having expressed the equivalence relation ∼A for an arbitrary set A in terms
of the single equivalence relation ∼1, we now show that ∼1 has a congruence
property of an operadic kind.
Lemma C.1.5 If τ, ˆτ ∈(FΣ)(n) with τ ∼1 ˆτ, and τi, ˆτi ∈(FΣ)(ki) with τi ∼1 ˆτi
for each i = 1, . . . , n, then
τ ◦(τ1, . . . , τn) ∼1 ˆτ ◦(ˆτ1, . . . , ˆτn).
Proof
Deﬁne a relation ≈on `
m∈N(FΣ)(m) as follows: if φ ∈(FΣ)(m) and
ˆφ ∈(FΣ)( ˆm) then φ ≈ˆφ if and only if m = ˆm and
for all
φi, ˆφi ∈(FΣ)(ki) with φi ∼1 ˆφi (i = 1, . . . , n),
we have
φ◦(φ1, . . . , φm) ∼1 ˆφ◦(ˆφ1, . . . , ˆφm).
Then show that ∼1 ⊆≈in the usual way.
2
Deﬁne P(Σ,E)(n) = (FΣ)(n)/ ∼1 for each n: then Lemma C.1.5 tells us that there
is a unique operad structure on P(Σ,E) such that the quotient map FΣ
-
P(Σ,E) is a map of operads. So starting from a strongly regular presentation of a
theory we have constructed an operad, and this operad induces the same monad
as the theory:
Corollary C.1.6 There is an isomorphism of monads TP(Σ,E) ∼= T(Σ,E). Hence
any strongly regular monad is operadic.
Proof We have only to prove the ﬁrst sentence; the second follows immediately.
By Corollary C.1.4, there is an isomorphism of functors TP(Σ,E) ∼= T(Σ,E) making
the diagram
TF Σ
TP(Σ,E)
∼-

T(Σ,E)
ε
-

306
Special Cartesian Monads
commute, where the left-hand arrow is the quotient map. The multiplication
µP(Σ,E) of the monad TP(Σ,E) comes from composition in the operad P(Σ,E), and
this in turn comes via the quotient map from composition in the operad FΣ,
so it follows from diagram (C:1) (p. 304) that µP(Σ,E) corresponds under the
isomorphism to µ(Σ,E). The same goes for units; hence the result.
2
This concludes the proof of the more ‘useful’ half of Theorem C.1.1. To prove
the converse, we ﬁrst establish one more fact about strongly regular presentations
in general.
Lemma C.1.7 Let (Σ, E) be a strongly regular presentation of an algebraic the-
ory. Then the quotient map ε : FΣ
- P(Σ,E) is the universal operad map out
of FΣ with the property that ε(τ) = ε(ˆτ) for all (τ, ˆτ) ∈En.
‘Universal’ means that if ζ : FΣ
- Q is a map of operads satisfying ζ(τ) = ζ(ˆτ)
for all (τ, ˆτ) ∈En then there is a unique operad map ζ : P(Σ,E)
- Q such that
ζ◦ε = ζ.
Proof
Universality can be re-formulated as the following condition: ∼1 is the
smallest equivalence relation on `
n∈N that is an operadic congruence (in other
words, such that Lemma C.1.5 holds) and satisﬁes τ ∼1 ˆτ for all (τ, ˆτ) ∈En.
The proof is by the usual method.
2
Now ﬁx an operad P. Deﬁne ΣP ∈SetN by
Σ(n) = {σθ | θ ∈P(n)}
where σθ is a formal symbol. Let EP be the system of equations with elements
(σθ◦(σθ1, . . . , σθn), σθ◦(θ1,...,θn)) ∈(EP )k1+···+kn
for each θ ∈P(n), θi ∈P(ki), and
(1, σ1) ∈(EP )1.
Then (ΣP , EP ) is a strongly regular presentation of an algebraic theory.
There is a map ε : FΣP
- P of operads, a component of the counit of the
adjunction between Operad and SetN. Concretely (2.3), ε is described by the
inductive clauses
ε(1)
=
1,
ε(σθ◦(τ1, . . . , τn))
=
θ◦(ε(τ1), . . . , ε(τn))
for θ ∈P(n), τi ∈(FΣP )(ki).
Lemma C.1.8 ε : FΣP
- P is the universal operad map out of FΣP with
the property that ε(τ) = ε(ˆτ) for all (τ, ˆτ) ∈(EP )n.

C.1 Operads and algebraic theories
307
Proof That ε does have the property is easily veriﬁed. For universality, take a
map ζ : FΣ
- Q of operads such that ζ(τ) = ζ(ˆτ) for all (τ, ˆτ) ∈(EP )n; we
want there to be a unique operad map ζ : P
- Q such that ζ◦ε = ζ. Since
ε(σθ) = θ for all θ ∈P(n), the only possibility is ζ(θ) = ζ(σθ), and it is easy to
check that this map ζ does satisfy the conditions required.
2
Corollary C.1.9 There is an isomorphism of monads T(ΣP ,EP ) ∼= TP . Hence
any operadic monad is strongly regular.
Proof Lemmas C.1.7 and C.1.8 together imply that there is an isomorphism of
operads P(ΣP ,EP ) ∼= P; so there is an isomorphism of monads TP(ΣP ,EP ) ∼= TP .
Corollary C.1.6 implies that TP(ΣP ,EP ) ∼= T(ΣP ,EP ). The result follows.
2
The proof of Theorem C.1.1 is now complete.
Similar results can be envisaged for other kinds of operad.
For example,
any symmetric operad induces a monad on Set whose algebras are exactly the
algebras for the operad; an obvious conjecture is that the monads arising in this
way are those that can be presented by ﬁnitary operations and equations in which
the same variables appear, without repetition, on each side (but not necessarily
in the same order). Another possibility is to produce results of this kind for
operads in a symmetric monoidal category; compare Example 2.2.6. We would
like, for instance, a general principle telling us that the theory of Lie algebras
can be described by a symmetric operad of vector spaces on the grounds that its
governing equations
[x, y] + [y, x]
=
0,
[x, [y, z]] + [y, [z, x]] + [z, [x, y]]
=
0
are both ‘good’: the same variables are involved, without repetition, in each
summand. This principle is well-known informally, but as far as I know has not
been proved.
A more diﬃcult generalization would be to algebraic theories on presheaf
categories. For example, take the theory of strict ω-categories presented in the
algebraic way (1.4.8). This is not a ‘strongly regular’ presentation in the simple-
minded sense, because the interchange law
(β′ ◦p β) ◦q (α′ ◦p α) = (β′ ◦q α′) ◦p (β ◦q α)
does permute the order of the variables. Yet somehow this equation should be
regarded as ‘good’, since when the appropriate picture is drawn—e.g.




•
αR

?•
◦
•
α′R

?•



◦




•
βR

?•
◦
•
β′R

?•



=

•
αR

?• ◦•
βR

?•

◦

•
α′R

?• ◦•
β′R

?•

for p = 1 and q = 0—there is no movement in the positions of the cells. So we
hope for some notion of a strongly regular theory on a presheaf category, and

308
Special Cartesian Monads
a result saying that the monad induced by such a theory is at least cartesian,
and perhaps operadic in some sense. This would render unnecessary the ad hoc
calculations of Appendix F showing that the free strict ω-category monad is
cartesian. However, such a general result has yet to be found.
C.2
Familially representable monads on Set
Not every set-valued functor is representable, but every set-valued functor is a
colimit of representables. It turns out that an intermediate condition is relevant
to the theory of operads: that of being a coproduct of representables. Such a
functor is said to be ‘familially representable’.
Familial representability has been studied in, among other places, an impor-
tant paper of Carboni and Johnstone [1995].
This section is not much more
than an account of some of their results. Our goal is to describe monads on
Set whose functor parts are familially representable and whose natural transfor-
mation parts are cartesian; we lead up to this by considering, more generally,
familially representable functors into Set.
But ﬁrst, as a warm-up, consider ordinary representability. Here follow some
very well-known facts, presented in a way that foreshadows the material on fa-
milial representability.
Let us say that a category A has the adjoint functor property if any
limit-preserving functor from A to a locally small category has a left adjoint.
(‘Limit-preserving’ really means ‘small-limit-preserving’.) For example, the Spe-
cial Adjoint Functor Theorem states that any complete, well-powered, locally
small category with a cogenerating set has the adjoint functor property. In par-
ticular, Set has the adjoint functor property.
Proposition C.2.1 Let A be a category with the adjoint functor property. The
following conditions on a functor T : A
- Set are equivalent:
a. T preserves limits
b. T has a left adjoint
c. T is representable.
Proof
(a) ⇒(b) Adjoint functor property.
(b) ⇒(c) Take a left adjoint S to T : then T is represented by S1.
(b) ⇒(c) Standard.
2
Suppose we want to deﬁne the subcategory of [A, Set] consisting of only those
things that are representable. We know what it means for a functor A
- Set
to be representable. By rights, a natural transformation
A(X, −)
- A(X′, −)
(C:2)

C.2 Familially representable monads on Set
309
should qualify as a map in our subcategory just when it is of the form A(f, −) for
some map f : X′
- X in A. But the Yoneda Lemma implies that all natural
transformations (C:2) are of this form, so in fact the appropriate subcategory is
just the full subcategory of representable functors.
Representable functors are certainly cartesian, so we might reasonably ask
when a natural transformation between representables is cartesian. The answer
is ‘seldom’: the natural transformation (C:2) induced by a map f : X′
- X
is cartesian just when f is an isomorphism.
The basic result on familial representability is like Proposition C.2.1, but
involves a weaker set of equivalent conditions. To express them we need some
terminology.
Let A be a category, I a set, and (Xi)i∈I a family of objects of A: then there
is a functor
a
i∈I
A(Xi, −) : A
- Set.
Such a functor, or one isomorphic to it, is said to be familially representable;
(Xi)i∈I is the representing family. Note that we can recover I as the value of
the functor at the terminal object of A, if it has one.
A category is connected if it is nonempty and any functor from it into a
discrete category is constant. A connected limit is a limit of a functor whose
domain is a connected category. The crucial fact about connected limits is:
Lemma C.2.2 Connected limits commute with small coproducts in Set.
2
Corollary C.2.3 For any set I, the forgetful functor Set/I
- Set preserves
and reﬂects connected limits.
Proof
Set/I is equivalent to SetI, and under this equivalence the forgetful
functor becomes the functor Σ : SetI
- Set deﬁned by Σ((Xi)i∈I) = `
i∈I Xi.
Lemma C.2.2 tells us that Σ preserves connected limits. Moreover, SetI has all
connected limits and Σ reﬂects isomorphisms, so preservation implies reﬂection.
2
One type of connected limit is of particular importance to us. A wide pull-
back is a limit of shape
•
•
•
. . .
•
. . .
•

-
-
-
where the top row indicates a set of any cardinality. Formally, for any set K let
PK be the (connected) category whose objects are the elements of K together
with a further object ∞and whose only non-identity maps are a single map
k
- ∞for each k ∈K; a wide pullback is a limit of a functor with domain PK
for some set K. If K has cardinality two then this is just an ordinary pullback.

310
Special Cartesian Monads
If T : A
- B is a functor and A has a terminal object then we write
eT : A
- B/T 1 for the functor
X 7−→


T X
T 1
T !
?

.
We recover T from eT as the composite
T = (A
e
T- B/T 1
forgetful
- B).
(C:3)
Proposition C.2.4 Let A be a category with the adjoint functor property and
a terminal object. The following conditions on a functor T : A
- Set are
equivalent:
a. T preserves connected limits
b. T preserves wide pullbacks
c. eT preserves limits
d. eT has a left adjoint
e. T is familially representable.
Proof
(a) ⇒(b) A wide pullback is a connected limit.
(b) ⇒(c) The forgetful functor Set/T 1
- Set reﬂects wide pullbacks (Corol-
lary C.2.3), and T preserves them, so by equation (C:3), eT preserves them
too. eT also preserves terminal objects, trivially. So eT preserves all limits.
(c) ⇒(d) Adjoint functor property.
(d) ⇒(e) Take a left adjoint S to eT. For each i ∈T 1 we have adjunctions
A
e
T
⊤-

S
Set/T 1
( )i
⊤-

i!
Set,
where ( )i takes the ﬁbre over i and i!K is the function K
- T 1 constant
at i. So
T X ∼=
a
i∈T 1
( eT X)i ∼=
a
i∈T 1
Set(1, ( eTX)i) ∼=
a
i∈T 1
A(Si!1, X)
naturally in X ∈A.
(e) ⇒(a) Representables preserve limits (C.2.1) and coproducts commute with
connected limits in Set (C.2.2), so any coproduct of representables pre-
serves connected limits.
2

C.2 Familially representable monads on Set
311
Let (Xi)i∈I and (X′
i′)i′∈I′ be families of objects in a category A. A function
φ : I
- I′ together with a family of maps (X′
φ(i)
fi- Xi)i∈I induces a natural
transformation
a
i∈I
A(Xi, −)
-
a
i′∈I′
A(X′
i′, −),
(C:4)
and the Yoneda Lemma implies that, in fact, all natural transformations (C:4)
arise uniquely in this way. Let Fam(A) be the category whose objects are families
(Xi)i∈I of objects of A and whose maps (Xi)i∈I
- (X′
i′)i′∈I′ are pairs (φ, f)
as above. (This is the free coproduct cocompletion of Aop.) There is a functor
y :
Fam(A)
-
[A, Set]
(Xi)i∈I
7−→
`
i∈I A(Xi, −),
(C:5)
and we have just seen that it is full and faithful. It therefore deﬁnes an equivalence
between Fam(A) and the full subcategory of [A, Set] formed by the familially
representable functors.
A transformation (φ, f) as above is cartesian just when each of its pieces
A(fi, −) : A(Xi, −)
- A(X′
φ(i), −)
(i ∈I) is cartesian, which, from our earlier result, happens just when each
fi : X′
φ(i)
- Xi is an isomorphism.
We have already encountered many familially representable endofunctors of
Set:
Example C.2.5 For any plain operad P, the functor part of the induced monad
TP on Set is familially representable. Indeed,
TP (X) ∼=
a
n∈N
P(n) × Xn ∼=
a
i∈I
[Xi, X]
where I = `
n∈N P(n), Xi is an n-element set for i ∈P(n), and [Xi, X] denotes
the hom-set Set(Xi, X).
In this example all of the sets Xi are ﬁnite and, as we saw in C.1, the monad TP
corresponds to a ﬁnitary algebraic theory. Here is the general result on ﬁniteness.
Proposition C.2.6 The following are equivalent conditions on a family (Xi)i∈I
of sets:
a. the functor `
i∈I[Xi, −] : Set
- Set is ﬁnitary
b. the set Xi is ﬁnite for each i ∈I
c. there is a sequence (P(n))n∈N of sets such that
a
i∈I
[Xi, −] ∼=
a
n∈N
P(n) × (−)n.

312
Special Cartesian Monads
Proof
(a) ⇒(b) For each i ∈I we have a pullback square
[Xi, −] ⊂copri- a
i∈I
[Xi, −]
∆1
?
⊂
copri
- ∆I
pr
?
in [Set, Set], where ∆K : Set
- Set denotes the constant functor with
value K. We know that all four functors except perhaps [Xi, −] are ﬁnitary;
since pullbacks commute with ﬁltered colimits in Set it follows that [Xi, −]
is ﬁnitary too.
This in turn implies that Xi is ﬁnite, as is well-known
(Ad´amek and Rosick´y, [1994, p. 9]).
(b) ⇒(c) For each n ∈N, put
P(n) = {i ∈I | cardinality(Xi) = n}.
By choosing for each i ∈I a bijection Xi
∼- {1, . . . , n}, we obtain iso-
morphisms
a
i∈I
[Xi, X] ∼=
a
n∈N
a
i∈P (n)
[Xi, X] ∼=
a
n∈N
a
i∈P (n)
Xn ∼=
a
n∈N
P(n) × Xn
natural in X ∈Set.
(c) ⇒(a) If (c) holds then `
i∈I[Xi, −] is a colimit of endofunctors of Set of the
form (−)n (n ∈N); each of these is ﬁnitary, so the whole functor is ﬁnitary.
2
So an endofunctor of Set is ﬁnitary and familially representable if and only if it
is, in the sense of (c), operadic. The story for monads is quite diﬀerent, as we
see below (C.2.8). A hint of the subtlety is that the isomorphism constructed in
the proof of (b) ⇒(c) is not canonical: it involves an arbitrary choice of a total
ordering of Xi, for each i ∈I.
Let us turn, then, to monads on Set. A familially representable monad
(T, µ, η) on Set is one whose functor part T is familially representable and whose
natural transformation parts µ and η are cartesian. (For example, any operadic
monad on Set is familially representable.) To see what µ and η look like in terms
of the representing family of T , we need to consider composition of familially
representable functors.
So, let
S ∼=
a
h∈H
[Wh, −],
T ∼=
a
i∈I
[Xi, −]

C.2 Familially representable monads on Set
313
be familially representable endofunctors of Set. Conditions (a) and (b) of Propo-
sition C.2.4 make it clear that T ◦S must be familially representable, but what is
the representing family? For any set X we have
T SX
∼=
a
i∈I
"
Xi,
a
h∈H
[Wh, X]
#
∼=
a
i∈I
a
g∈[Xi,H]
" a
x∈Xi
Wg(x), X
#
.
Hence
T ◦S ∼=
a
j∈J
[Yj, −]
where
J =
a
i∈I
[Xi, H] = T H,
Yi,g =
a
x∈Xi
Wg(x)
for i ∈I and g ∈[Xi, H] (that is, (i, g) ∈J). In particular, the case S = T gives
T 2 ∼=
a
j∈J
[Yj, −]
where
J =
a
i∈I
[Xi, I] = T I,
Yi,g =
a
x∈Xi
Xg(x).
The familial representation of the identity functor is
id ∼=
a
i∈1
[1, −].
A familially representable monad on Set therefore consists of
• a family (Xi)i∈I of sets, inducing the functor T = `
i∈I[Xi, −]
• a function
m : {(i, g) | i ∈I, g ∈[Xi, I]}
- I
and for each i ∈I and g ∈[Xi, I], a bijection
Xm(i,g)
∼-
a
x∈Xi
Xg(x),
inducing the natural transformation µ : T 2
- T whose component µX
at a set X is the composite
a
i∈I,g∈[Xi,I]
" a
x∈Xi
Xg(x), X
#
∼-
a
i∈I,g∈[Xi,I]
[Xm(i,g), X]
canonical
-
a
k∈I
[Xk, X]

314
Special Cartesian Monads
• an element e ∈I such that Xe is a one-element set, inducing the natu-
ral transformation η : 1
- T whose component ηX at a set X is the
composite
X
∼- [Xe, X] ⊂- a
i∈I
[Xi, X],
such that µ and η obey associativity and unit laws. The monad is ﬁnitary just
when all the Xi’s are ﬁnite.
Example C.2.7 Let (T, µ, η) be the free monoid monad on Set. Then
T X =
a
i∈N
[i, X],
so in this case I = N and Xi = i. (We use i to denote an i-element set, say
{1, . . . , i}.) The multiplication function
m : {(i, g) | i ∈N, g ∈[i, N]}
- N
is given by
m(i, g) = g(1) + · · · + g(i),
and there is an obvious choice of bijection
Xg(1)+···+g(i)
∼- Xg(1) + · · · + Xg(i).
The unit element e is 1 ∈N.
This explicit form for familially representable monads on Set will enable us
to prove, for instance, that a commutative monoid is naturally an algebra for any
ﬁnitary familially representable monad on Set (Example C.4.3).
We have now proved almost all of the equalities and inclusions in Fig. C-
A.
All that remains is to prove that the ﬁrst inclusion is proper: not every
ﬁnitary familially representable monad on Set is operadic (strongly regular).
At this point we come to an error in Carboni and Johnstone [1995]. In their
Proposition 3.2, they prove that every strongly regular monad on Set is familially
representable; but they also claim the converse, which is false. The error is in the
ﬁnal sentence of the proof. Having started with a familially representable monad
(T, µ, η), they construct a strongly regular monad—let us call it (T ′, µ′, η′)—and
claim that the monads (T, µ, η) and (T ′, µ′, η′) are isomorphic; and while there
is indeed a (non-canonical) isomorphism between the functors T and T ′, there is
not in general an isomorphism that commutes with the monad structures. The
following counterexample is from Carboni and Johnstone’s corrigenda [2002].
Example C.2.8 The monad (T, µ, η) on Set corresponding to the theory of
monoids with an anti-involution (4.1.8, 4.2.10) is familially representable and
ﬁnitary, but not operadic.

C.2 Familially representable monads on Set
315
The free monoid with anti-involution on a set X is the set of expressions
xσ1
1 xσ2
2 · · · xσn
n
where n ≥0, xi ∈X, and σi ∈{+1, −1}: so
T X ∼=
a
n∈N
({+1, −1} × X)n ∼=
a
i∈I
[Xi, X]
where I = `
n∈N{+1, −1}n and X(σ1,...,σn) = n. The unit map at X is
ηX :
X
-
T X
x
7−→
(+1, x) ∈({+1, −1} × X)1.
So far this is the same as for monoids with involution (4.1.7, 4.2.9), but the
multiplication is diﬀerent: its component µX at X is the map
a
n∈N
 
{+1, −1} ×
a
k∈N
({+1, −1} × X)k
!n
-
a
m∈N
({+1, −1} × X)m
given by
µX

(σ1, (σ1
1, x1
1, . . . , σk1
1 , xk1
1 )), . . . , (σn, (σ1
n, x1
n, . . . , σkn
n , xkn
n ))

= (ˆσ1
1, ˆx1
1, . . . , ˆσk1
1 , ˆxk1
1 , . . . , ˆσ1
n, ˆx1
n, . . . , ˆσkn
n , ˆxkn
n )
where for i ∈{1, . . ., n},
(ˆσ1
i , ˆx1
i , . . . , ˆσki
i , ˆxki
i ) =
 (σ1
i , x1
i , . . . , σki
i , xki
i )
if σi = +1
(−σki
i , xki
i , . . . , −σ1
i , x1
i )
if σi = −1.
The functor T is plainly familially representable, and ﬁnitary by C.2.6. The unit
and multiplication are cartesian by the observations on p. 311. So the monad is
familially representable and ﬁnitary, as claimed.
On the other hand, the following argument—reminiscent of a standard proof
of Brouwer’s ﬁxed point theorem—shows that it is not operadic. For suppose
it were. Then by Proposition 6.2.1, there is a cartesian natural transformation
ψ from T to the free monoid monad S, commuting with the monad structures.
There is also a cartesian natural transformation θ : S
- T commuting with
the monad structures: in the notation of p. 311, it is given by the function
φ :
N
-
{+1, −1}n
n
7−→
(+1, . . . , +1)
together with the identity map fn : n
- n for each n ∈N; on categories of
algebras, it induces the functor SetT
- SetS forgetting anti-involutions. So
we have a commutative triangle
T
S
ψθ
-
θ
-
S
ψ
-

316
Special Cartesian Monads
of cartesian natural transformations, each commuting with the monad structures.
The members of the representing family of S all have diﬀerent cardinalities, so
any cartesian natural endomorphism of S is actually an automorphism. Hence
in the induced triangle of functors on categories of algebras,
(monoids with anti-involution)
	
   forgetful
I
@@@
Monoid 
Monoid,
the functor along the bottom is an isomorphism. This implies that the forgetful
functor is surjective on objects. So every monoid admits an anti-involution, and in
particular, every monoid is isomorphic to its opposite (the same monoid with the
order of multiplication reversed); but, for instance, the monoid of endomorphisms
of a two-element set does not have this property. This is the desired contradiction.
C.3
Familially representable monads on presheaf
categories
The cartesian monads arising in this book are typically monads on presheaf cat-
egories. Very often they are familially representable (in a sense deﬁned shortly),
and this section provides some of the theory of such monads. After some general
preliminaries, we concentrate on the special case of presheaf categories [Bop, Set]
where B is discrete, arriving eventually at an explicit description of ﬁnitary fa-
milially representable monads on such categories. This will be used in the next
section to provide a link between symmetric and generalized multicategories.
Let A be a category and B a small category. What should it mean for a
functor T : A
- [Bop, Set] to be familially representable? If B is discrete then
the answer is clear: for each b ∈B the b-component
Tb = T (−)(b) : A
- Set
should be familially representable. If B is not discrete then the answer is not
quite so obvious: we certainly do want each Tb to be familially representable, but
we also want the representing family to vary functorially as b varies in B. Thus:
Deﬁnition C.3.1 Let A be a category and B a small category. A functor T :
A
- [Bop, Set] is familially representable if there exists a functor R making
the diagram
Bop ...........
R- Fam(A)
[A, Set]
y
?
T
-
commute up to natural isomorphism. Here T is the transpose of T and y is the
‘Yoneda’ functor of (C:5) (p. 311).

C.3 Familially representable monads on presheaf categories
317
Note that when B is the terminal category, this is compatible with the deﬁnition
of familial representability for set-valued functors. Note also that since y is full
and faithful, the functor R is determined uniquely up to isomorphism, if it exists.
This deﬁnition is morally the correct one but in practical terms needlessly
elaborate: if each Tb is familially representable then the representing family au-
tomatically varies functorially in b, as the equivalence (c) ⇔(d) in the following
result shows.
Proposition C.3.2 Let A be a category with the adjoint functor property and a
terminal object. Let B be a small category. The following conditions on a functor
T : A
- [Bop, Set] are equivalent:
a. T preserves connected limits
b. T preserves wide pullbacks
c. for each b ∈B, the functor Tb : A
- Set is familially representable
d. T is familially representable.
In our applications of this result, A will be a presheaf category. Such an A does
have the adjoint functor property: for by Borceux [1994a, 4.7.2], it satisﬁes the
hypotheses of the Special Adjoint Functor Theorem.
Proof
(a) ⇔(b) ⇔(c) Since limits in a presheaf category are computed pointwise,
T preserves limits of a given shape if and only if Tb preserves them for each
b ∈B. So these implications follow from Proposition C.2.4.
(c) ⇒(d) Choose for each b ∈B a representing family (Xb,i)i∈I(b) and an iso-
morphism
αb : Tb
∼- y((Xb,i)i∈I(b)) =
a
i∈I(b)
A(Xb,i, −).
Since y is full and faithful, the assignment b 7−→R(b) = (Xb,i)i∈I(b) extends
uniquely to a functor R such that α is a natural isomorphism T
∼- y◦R.
(d) ⇒(c) Trivial.
2
A familially representable functor A
- [Bop, Set] is determined by a func-
tor R : Bop
- Fam(A). Explicitly, such a functor R consists of
• a functor I : Bop
- Set
• for each b ∈B, a family (Xb,i)i∈I(b) of objects of A
• for each b′
g- b in B and each i ∈I(b), a map
Xg,i : Xb′,(Ig)(i)
- Xb,i
in A

318
Special Cartesian Monads
such that
• if b′′
g′- b′
g- b in B and i ∈I(b) then Xg′◦g,i = Xg,i◦Xg′,(Ig)(i)
• if b ∈B then X1b,i = 1Xb,i.
The resulting functor T : A
- [Bop, Set] is given at X ∈A and b ∈B by
(T X)(b) =
a
i∈I(b)
A(Xb,i, X).
A good example of a familially representable functor into a presheaf category
is the free strict ω-category functor T discussed in Chapter 8 and Appendix F.
Here is the 1-dimensional version.
Example C.3.3 Let B = (0
σ-
τ- 1), so that [Bop, Set] is the category DGph
of directed graphs; let A = DGph too.
Then the free category functor T :
DGph
- DGph is familially representable. The directed graph I is deﬁned
by I(0) = 1 and I(1) = N. The families (Xb,i)i∈I(b) (b ∈B) are deﬁned as follows.
For b = 1 and i ∈N, let X1,i be the graph
0•
-
1
•
-
· · ·
-
i•
with (i + 1) vertices and i edges. For b = 0, writing 1 = {j}, let
X0,j = • = X1,0.
The maps 0
σ-
τ- 1 in B induce, for each i ∈N, the graph maps
X0,j
-
- X1,i
sending X0,j to the ﬁrst and last vertex of X1,i, respectively. This data does
represent T : if X is a directed graph then
a
i∈I(1)
DGph(X1,i, X) =
a
i∈N
{strings of i arrows in X} = (T X)1
and
a
j∈I(0)
DGph(X0,j, X) = X0 = (T X)0,
as required.
A short digression: the Artin gluing of a functor T : A
- B is the
category B↓T in which an object is a triple (X, Y, π) with X ∈A, Y ∈B, and
π : Y
- T X in B, and a map (X, Y, π)
- (X′, Y ′, π′) is a pair of maps
(X
- X′, Y
- Y ′) making the evident square commute.

C.3 Familially representable monads on presheaf categories
319
Proposition C.3.4 (Carboni–Johnstone) Let A and B be presheaf categories
and T : A
- B a functor. Then B↓T is a presheaf category if and only if T
preserves wide pullbacks.
Proof
See Carboni and Johnstone [1995, 4.4(v)]. Their proof of ‘if’ is a little
roundabout, so the following sketch of a direct version may be of interest.
By Proposition C.3.2, T is familially representable. Suppose that A = [Aop, Set]
and B = [Bop, Set], and represent T by the families (Xb,i)i∈I(b), as above. An
object of B↓T consists of functors X : Aop
- Set and Y : Bop
- Set and
a map
πb : Y b
-
a
i∈I(b)
[Aop, Set](Xb,i, X)
for each b ∈B, satisfying naturality axioms. Equivalently, it consists of
a. a functor X : Aop
- Set,
b. a family (Y (b, i))b∈B,i∈I(b) of sets, functorial in b, and
c. for each b ∈B, i ∈I(b) and y ∈Y (b, i), a natural transformation Xb,i
-
X,
satisfying axioms; indeed, (c) can equivalently be replaced by
c′. for each b ∈B, i ∈I(b), a ∈A and x ∈Xb,i(a), a function Y (b, i)
-
X(a).
Equivalently, it is a functor Cop
- Set, where C is the category whose object-
set C0 is the disjoint union
C0 = A0 + {(b, i) | b ∈B0, i ∈I(b)},
whose maps are given by
C(a′, a)
=
A(a′, a),
C((b, i), (b′, i′))
=
{g ∈B(b, b′) | (Ig)(i′) = i},
C(a, (b, i))
=
Xb,i(a),
C((b, i), a)
=
∅
(a, a′ ∈A0, b, b′ ∈B0, i ∈I(b), i′ ∈I(b′)), and whose composition and identities
are the evident ones.
2
Returning to the main story of familially representable functors into presheaf
categories, let us restrict our attention to functors of the form
T : SetC
- SetB
where C and B are sets. This makes the calculations much easier but still provides
a wide enough context for our applications.
A familially representable functor T : SetC
- SetB consists of

320
Special Cartesian Monads
• a family (I(b))b∈B of sets
• for each b ∈B, a family (Xb,i)i∈I(b) of objects of SetC,
and the actual functor T is then given by
(T X)(b) ∼=
a
i∈I(b)
SetC(Xb,i, X) ∼=
a
i∈I(b)
Y
c∈C
[Xb,i(c), X(c)]
for each X ∈SetC and b ∈B.
Let T ′ : SetC
- SetB be another such functor, with representing families
(Xb,i′)i′∈I′(b) (b ∈B). A natural transformation
SetC
T ′
T
R

∨
SetB
consists merely of a natural transformation
SetC
T ′
b
Tb
R

∨
Set
for each b ∈B.
So by the results of the previous section, a transformation
T ′
- T is described by
• for each b ∈B, a function φb : I′(b)
- I(b)
• for each b ∈B and i′ ∈I′(b), a map fb,i′ : Xb,φb(i′)
- X′
b,i′ in SetC,
and the induced map (T ′X)(b)
- (T X)(b) is the composite
`
i′∈I′(b) SetC(X′
b,i′, X)
`
i′∈I′(b) f ∗
b,i′
-
`
i′∈I′(b) SetC(Xb,φb(i′), X)
canonical
-
`
i∈I(b) SetC(Xb,i, X)
(X ∈SetC, b ∈B). The transformation is cartesian if and only if each map fb,i′
is an isomorphism.
Just as for functors Set
- Set, the theory tells us that the class of fa-
milially representable functors between presheaf categories is closed under com-
position. Working out the representing family of a composite seems extremely
complicated for presheaf categories in general, but is manageable in our restricted
context of direct powers of Set. So, take sets D, C and B and familially repre-
sentable functors
SetD
S- SetC
T- SetB

C.3 Familially representable monads on presheaf categories
321
given by
(SW)(c) ∼=
a
h∈H(c)
SetD(Wc,h, W),
(T X)(b) ∼=
a
i∈I(b)
SetC(Xb,i, X)
(W ∈SetD, X ∈SetC, c ∈C, b ∈B). Then for W ∈SetD and b ∈B,
(T SW)(b)
∼=
a
i∈I(b)
SetC(Xb,i, SW)
∼=
a
i∈I(b)
Y
c∈C
[Xb,i(c),
a
h∈H(c)
SetD(Wc,h, W)]
∼=
a
i∈I(b)
Y
c∈C
a
g∈[Xb,i(c),H(c)]
Y
x∈Xb,i(c)
SetD(Wc,g(x), W)
∼=
a
i∈I(b)
a
γ∈SetC(Xb,i,H)
Y
c∈C
Y
x∈Xb,i(c)
SetD(Wc,γc(x), W)
∼=
a
(i,γ)∈J(b)
SetD(Yb,i,γ, W),
where
J(b)
=
a
i∈I(b)
SetC(Xb,i, H) ∼= (T H)(b),
Yb,i,γ
=
a
c∈C,x∈Xb,i(c)
Wc,γc(x).
The identity functor on SetB is also familially representable: for X ∈SetB,
X(b) ∼=
a
i∈1
SetB(δb, X)
where, treating B as a discrete category, δb = B(−, b) ∈SetB.
Assembling these descriptions gives a description of monads on SetB whose
functor parts are familially representable and whose natural transformation parts
are cartesian—familially representable monads on SetB, as we call them.
Such a monad consists of:
• for each b ∈B, a set I(b) and a family (Xb,i)i∈I(b) of objects of SetB,
inducing the functor
T :
SetB
- SetB,
(T X)(b) =
`
i∈I(b) SetB(Xb,i, X)
• for each b ∈B, a function
mb : {(i, γ) | i ∈I(b), γ ∈SetB(Xb,i, X)}
- I(b),

322
Special Cartesian Monads
and for each b ∈B, i ∈I(b) and γ ∈SetB(Xb,i, X), an isomorphism
Xb,mb(i,γ)
∼-
a
c∈B,x∈Xb,i(c)
Xc,γc(x),
inducing the natural transformation µ : T 2
- T whose component
µX,b : (T 2X)(b)
- (T X)(b)
is the composite
`
i∈I(b),γ∈SetB(Xb,i,I) SetB(`
c∈B,x∈Xb,i(c) Xc,γc(x), X)
∼-
`
i∈I(b),γ∈SetB(Xb,i,I) SetB(Xb,mb(i,γ), X)
canonical
-
`
k∈I(b) SetB(Xb,k, X)
• for each b ∈B, an element eb ∈I(b) such that Xb,eb ∼= δb, inducing the
natural transformation η : 1
- T whose component
ηX,b : X(b)
- (T X)(b)
is the composite
X(b)
∼- SetB(Xb,eb, X) ⊂-
a
i∈I(b)
SetB(Xb,i, X),
such that µ and η obey associativity and unit laws. This is complicated, but rest
assured that it gets no worse.
The aim of this section was to describe ﬁnitary familially representable mon-
ads on categories of the form SetB, and we are nearly there. All that remains is
‘ﬁnitary’.
Proposition C.3.5 Let C and B be sets. Let T : SetC
- SetB be a famil-
ially representable functor with representing families (Xb,i)i∈I(b) (b ∈B). The
following are equivalent:
a. T is a ﬁnitary functor
b. `
c∈C Xb,i(c) is a ﬁnite set for each b ∈B and i ∈I(b).
Proof T is ﬁnitary if and only if the functor
Tb =
a
i∈I(b)
SetC(Xb,i, −) : SetC
- Set
is ﬁnitary for each b ∈B. By the arguments in the proof of Proposition C.2.6,
Tb is ﬁnitary if and only if the functor
SetC(Xb,i, −) : SetC
- Set
is ﬁnitary for each i ∈I(b). But SetC(Xb,i, −) is ﬁnitary if and only if `
c∈C Xb,i(c)
is a ﬁnite set (Ad´amek and Rosick´y [1994, p. 9]).
2

C.4 Cartesian structures from symmetric structures
323
C.4
Cartesian structures from symmetric struc-
tures
A commutative monoid is a structure in which every ﬁnite family of elements has
a well-deﬁned sum. So if T = `
i∈I[Xi, −] is any ﬁnitary familially representable
monad on Set then any commutative monoid A is naturally a T -algebra via the
map
T A =
a
i∈I
[Xi, A]
- A
whose i-component sends a family (ax)x∈Xi to P
x∈Xi ax.
This is the simplest case of the theme of this section: how symmetric struc-
tures give rise to cartesian structures. We prove two main results. The ﬁrst is
that if B is any set, T any ﬁnitary familially representable monad on SetB, and
A any commutative monoid, then the constant family (A)b∈B is naturally a T -
algebra. (Just now we looked at the case B = 1.) It follows that any commutative
monoid is naturally a Tn-operad, where Tn is the nth opetopic monad (7.1). We
can also extract a rigorous deﬁnition of the set-with-multiplicities of n-opetopes
underlying a given n-dimensional opetopic pasting diagram.
The second main result is that any symmetric multicategory A gives rise
to a T -multicategory.
Here T is, again, any ﬁnitary familially representable
monad on SetB for some set B, and the object-of-objects of the induced T -
multicategory is (A0)b∈B. So this is like the result for commutative monoids but
one level up; it states that symmetric multicategories play some kind of universal
role for generalized multicategories, despite (apparently) not being generalized
multicategories themselves. A corollary is that any symmetric multicategory is
naturally a Tn-multicategory for each n, previously stated as Theorem 7.1.3 and
pictorially very plausible—see p. 184.
We start with commutative monoids. The ﬁrst main result mentioned above
is reasonably clear informally. I shall, however, prove it with some care in prepa-
ration for the proof of the second main result, which involves many of the same
thoughts in a more complex setting.
Notation: for any set B there are adjoint functors
SetB
Σ
⊥-

∆
Set,
where ΣX = `
b∈B Xb and (∆A)(b) = A.
Theorem C.4.1 Let B be a set and T a ﬁnitary familially representable monad
on SetB. Then there is a canonical functor
CommMon
- (SetB)T

324
Special Cartesian Monads
making the diagram
CommMon - (SetB)T
Set
forgetful
?
∆- SetB
forgetful
?
commute.
(The standard notation is awkward here: (SetB)T is the category of algebras for
the monad T on the category SetB.)
Proof
To make the link between commutative monoids and familial repre-
sentability we use the fat commutative monoids of A.1, which come equipped
with explicit operations for summing arbitrary ﬁnite families (not just ﬁnite se-
quences) of elements. By Theorem A.1.3, it suﬃces to prove the present theorem
with ‘CommMon’ replaced by ‘FatCommMon’.
Represent the functor T by families (Xb,i)i∈I(b) (b ∈B), the unit η of the
monad by e, and the multiplication µ by m and a nameless isomorphism, as in
the description at the end of C.3.
For any set A and any b ∈B we have
(T ∆A)(b) ∼=
a
i∈I(b)
(Xb,i, ∆A) ∼=
a
i∈I(b)
[ΣXb,i, A],
and by Proposition C.3.5, the set ΣXb,i is ﬁnite. So given a fat commutative
monoid A, we have a map
θA
B : (T ∆A)(b)
- (∆A)(b) = A
whose component at i ∈I(b) is summation
X
ΣXb,i
: [ΣXb,i, A]
- A.
If we can show that θA is a T -algebra structure on ∆A then we are done: the
functoriality is trivial.
For the multiplication axiom we have to show that the square
(T 2∆A)(b)
µ∆A,b
- (T ∆A)(b)
(T ∆A)(b)
(T θA)b ?
θA
b
- A
θA
b
?
commutes, for each b ∈B. We have
(T 2∆A)(b) ∼=
a
(i,γ)∈J(b)
[ΣYb,i,γ, A]

C.4 Cartesian structures from symmetric structures
325
where
J(b)
=
{(i, γ) | i ∈I(b), γ ∈SetB(Xb,i, I)},
Yb,i,γ
=
a
c∈B,x∈Xb,i(c)
Xc,γc(x).
Let i ∈I(b) and γ ∈SetB(Xb,i, I). Write k = mb(i, γ) ∈I; then part of the data
for the monad is an isomorphism Xb,k
∼- Yb,i,γ. The clockwise route around
the square has (i, γ)-component
[ΣYb,i,γ, A]
∼- [ΣXb,k, A]
A,
P
ΣXb,k
?
and by Lemma A.1.2, this is just P
ΣYb,i,γ.
For the anticlockwise route, an
element of [ΣYb,i,γ, A] is a family (ac,x,d,w)c,x,d,w indexed over
c ∈B, x ∈Xb,i(c), d ∈B, w ∈Xc,γc(x)(d).
For each c ∈B and x ∈Xb,i(c) we therefore have a family
(ac,x,d,w)d,w ∈[ΣXx,γc(x), A],
and
θA
c ((ac,x,d,w)d,w) =
X
d,w
ac,x,d,w ∈A,
so
(T θA)b(ac,x,d,w)c,x,d,w =

X
d,w
ac,x,d,w


c,x
∈[ΣXb,i, A].
So the anticlockwise route sends (ac,x,d,w)c,x,d,w to P
c,x
P
d,w ac,x,d,w, and the
clockwise route sends it to P
c,x,d,w ac,x,d,w; the two are equal.
For the unit axiom we have to show that
(∆A)(b)
η∆A,b
- (T ∆A)(b)
A
θA
b
?
1
-
commutes, for each b ∈B. Write k = eb ∈I; we know that Xb,k ∼= δb, and so
ΣXb,k is a one-element set. So if a ∈A then
θA
b (η∆A,b(a)) = θA
b ((a)x∈ΣXb,k) =
X
x∈ΣXb,k
a = a,
as required.
2

326
Special Cartesian Monads
Example C.4.2 Let n ∈N; take B to be the set On+1 of (n + 1)-opetopes
and T to be the (n + 1)th opetopic monad Tn+1 on Set/On+1 ≃SetOn+1. By
Proposition 6.5.6 and induction, Tn+1 is ﬁnitary and preserves wide pullbacks,
so is familially representable by Proposition C.3.2. Theorem C.4.1 then gives a
canonical functor
CommMon
- (Set/On+1)Tn+1 ≃Tn-Operad,
proving Theorem 7.1.2.
Example C.4.3 For any ﬁnitary familially representable monad T on Set, there
is a canonical functor CommMon
- SetT preserving underlying sets. Most
such T ’s that we have met have been operadic, in which case something stronger is
true: there is a canonical functor from the category of not-necessarily-commutative
monoids to SetT , as noted after Proposition 6.2.1. But, for instance, if T is
the monad corresponding to the theory of monoids with an anti-involution (Ex-
ample C.2.8) then the commutativity is necessary. Concretely, Theorem C.4.1
produces the functor
CommMon
-
(monoids with an anti-involution)
(A, ·, 1)
7−→
(A, ·, 1, ( )◦)
deﬁned by taking the anti-involution ( )◦to be the identity; that this does deﬁne
an anti-involution is exactly commutativity.
Write M for the free commutative monoid monad on Set. Lemma 6.1.1 tells
us that Theorem C.4.1 is equivalent to:
Corollary C.4.4 Let B be a set and T a ﬁnitary familially representable monad
on SetB. Then there is a canonical natural transformation
SetB
T - SetB
⇒
ψT
Set
∆
6
M - Set
∆
6
with the property that (∆, ψT ) is a lax map of monads (Set, M)
- (SetB, T ).
2
When B = 1, this corollary provides a natural transformation ψT : T
-
M commuting with the monad structures. It is straightforward to check that if
α : T ′
- T is a cartesian natural transformation commuting with the monad
structures then ψT ◦α = ψT ′. So M is the vertex (codomain) of a cone on the
inclusion functor
(ﬁnitary familially representable monads on Set
+ cartesian transformations commuting with the monad structures)
⊂-
(monads on Set
+ transformations commuting with the monad structures),

C.4 Cartesian structures from symmetric structures
327
in which the coprojections are the transformations ψT . In fact, it is a colimit cone:
the theory of commutative monoids plays a universal role for ﬁnitary familially
representable monads on Set, despite not being familially representable itself.
Since this fact will not be used, I will not prove it; the main tactic is to consider
the free algebraic theory on a single n-ary operation.
As explained on p. 151, we can translate between lax and colax maps of
monads using mates. Applying this to Corollary C.4.4 gives:
Corollary C.4.5 Let B be a set and T a ﬁnitary familially representable monad
on SetB. Then there is a canonical natural transformation
SetB
T - SetB
⇐
φT
Set
Σ
?
M - Set
Σ
?
with the property that (Σ, φT ) is a colax map of monads (SetB, T )
- (Set, M).
Proof Take φT to be the mate of ψT under the adjunction Σ ⊣∆.
2
Example C.4.6 Let n ∈N and take B = On and T = Tn, as in Example C.4.2
but with the indexing shifted. An object X of SetOn ≃Set/On is thought of as
a set of labelled n-opetopes. An element of TnX (or rather, of its underlying set
ΣTnX) is then an X-labelled n-pasting diagram; on the other hand, an element of
MΣX is a ﬁnite set-with-multiplicities of labels (disregarding shapes completely).
So there ought to be a forgetful function ΣTnX
- MΣX, and there is: φTn
X .
When X is the terminal object of SetOn we have ΣX = On and ΣTnX =
On+1, so φTn
X is a map On+1
- MOn. This sends an n-pasting diagram to the
set-with-multiplicities of its constituent n-opetopes: for example, the 2-pasting
diagram (7:2) on p. 181 (stripped of its labels) is sent to the set-with-multiplicities
"
⇓I ,
⇓-^,
⇓


-
A
AU
-,
⇓


-
A
AU
-,
⇓

 
-
@
R
CCW
-
#
of 2-opetopes.
We now consider symmetric multicategories. Much of what follows is similar
to what we did for commutative monoids but at a higher level of complexity.
Theorem C.4.7 Let B be a set and T a ﬁnitary familially representable monad
on SetB. Then there is a canonical functor
FatSymMulticat
- T -Multicat

328
Special Cartesian Monads
making the diagram
FatSymMulticat - T -Multicat
Set
( )0 ?
∆
- SetB
( )0
?
commute, where in both cases ( )0 is the functor assigning to a multicategory its
object of objects.
Before we prove the Theorem let us gather a corollary and some examples.
Corollary C.4.8 Theorem C.4.7 holds with ‘FatSymMulticat’ replaced by ‘SymMulticat’
and ‘canonical’ by ‘canonical up to isomorphism’.
Proof Follows from Theorem A.2.4.
2
Example C.4.9 For any n ∈N, let B be the set On of n-opetopes and let Tn be
the nth opetopic monad. Then, as observed in C.4.2, Tn is ﬁnitary and familially
representable. So the Corollary produces a functor
SymMulticat
- Tn-Multicat,
proving Theorem 7.1.3.
Example C.4.10 Taking B = 1, any symmetric multicategory is naturally a
T -multicategory for any ﬁnitary familially representable monad T on Set. If T
is operadic then we do not need the symmetries: the canonical natural transfor-
mation from T to the free monoid monad induces a functor
Multicat
- T -Multicat.
This is analogous to the situation for commutative monoids described in C.4.3.
We ﬁnish with a proof of Theorem C.4.7. Undeniably it is complicated, but
there is no great conceptual diﬃculty; the main struggle is against drowning in
notation. It may help to keep Example C.4.9 in mind.
Proof of Theorem C.4.7 Let T be a ﬁnitary familially representable monad
on SetB. As in the description just before Proposition C.3.5, represent T by
families (Xb,i)i∈I(b) (b ∈B), the unit η by e, and the multiplication µ by m and
a bijection
sb,i,γ : Xb,mb(i,γ)
∼-
a
c∈B,x∈Xb,i(c)
Xc,γc(x)
for each b ∈B, i ∈I, and γ ∈SetB(Xb,i, I). Given such b, i, and γ, and given
d ∈B, write
sb,i,γ,d(v) = (c(v), x(v), w(v))

C.4 Cartesian structures from symmetric structures
329
for any v ∈Xb,mb(i,γ)(d); so here c(v) ∈B, x(v) ∈Xb,i(c), and w ∈Xc,γc(x)(d).
Since T is ﬁnitary, Proposition C.3.5 tells us that the set ΣXb,i is ﬁnite for
each b ∈B and i ∈I(b).
Let P be a fat symmetric multicategory. Our main task is to deﬁne from P
a T -multicategory C.
Deﬁne C0 = ∆P0 (as we must). Then for each b ∈B we have
• C0(b) = P0
• (T C0)(b) = `
i∈I(b)[ΣXb,i, P0], so an element of (T C0)(b) consists of an
element i ∈I(b) together with a family (qc,x)c,x of objects of P indexed
over c ∈B and x ∈Xb,i(c).
Deﬁne the T -graph
C1
T C0
dom

C0
cod
-
by declaring an element of C1(b) with domain (i, (qc,x)c,x) ∈(T C0)(b) and codo-
main r ∈(C0)(b) to be a map
(qc,x)c,x
θ- r
in P.
To deﬁne comp : C1◦C1
- C1 we ﬁrst have to compute C1◦C1. With a
little eﬀort we ﬁnd that an element of (C1◦C1)(b) consists of the following data
(Fig. C-B):
• an element i ∈I(b) and a function γ : Xb,i
- I
• a map (qc,x)c,x
θ- r in P
• a family of maps ((pc,x,d,w)d,w
φc,x- qc,x)c,x in P, where the inner indexing
is over d ∈B and w ∈Xc,γc(x)(d).
Going down the left-hand slope of the diagram in Fig. C-B, the image of this
element of (C1◦C1)(b) in (T C0)(b) is the element mb(i, γ) of I(b) together with
the family (pc(v),x(v),d,w(v))d,v indexed over d ∈B and v ∈Xb,mb(i,γ)(d). So to
deﬁne composition, we must derive from our data a map
(pc(v),x(v),d,w(v))d,v
- r
(C:6)
in P. But we have the composite
θ◦(φc,x)c,x : (pc,x,d,w)c,x,d,w
- r
in P and the bijection
Σsb,i,γ : ΣXb,mb(i,γ)
∼-
Σ


a
c∈B,x∈Xb,i(c)
Xc,γc(x)


(d, v)
7−→
(c(v), x(v), d, w(v)),

330
Special Cartesian Monads
C1◦C1
 @
T C1

C1
-
T 2C0

T C0

-
C0
-
T C0
µC0

((φc,x)c,x, θ)
(φc,x)c,x
←
θ
→
(pc,x,d,w)c,x,d,w
←
(qc,x)c,x
←
→
r
→
(pc(v),x(v),d,w(v))d,v
←
Figure C-B: Data for composition in C. Each entry in the lower diagram is an
element of the b-component of the corresponding object in the upper diagram.
so (θ◦(φc,x)c,x) · (Σsb,i,γ) is a map of the form (C:6); and this is what we deﬁne
the composite to be.
To deﬁne ids : C0
- C1, ﬁrst note that if p ∈C0(b) = P0 then ηC0,b(p) ∈
(T C0)(b) consists of the element eb ∈I(b) together with the family (p)c,u indexed
over c ∈B and u ∈U = Xb,eb(c), as in the diagrams
C0
T C0
ηC0

C0
1
-
p
(p)c,u
←
p.
→
Since U is a one-element set, we may deﬁne ids(p) ∈C1(b) to be the identity
map
1U
p : (p)c,u
- p
in P, and this has the correct domain and codomain.
We have now deﬁned all the data for the T -multicategory C. It only remains
to check the associativity and identity axioms, and these follow from the asso-
ciativity and identity axioms on the fat symmetric multicategory P. So we have
deﬁned the desired functor
FatSymMulticat
- T -Multicat
on objects.
The rest is trivial. If f : P
- P ′ is a map of fat symmetric multicategories
and C and C′ are the corresponding T -multicategories then we have to deﬁne a

C.4 Cartesian structures from symmetric structures
331
map h : C
- C′. We take h0 = ∆f0 (as we must) and deﬁne h to act on
maps as f does. Since f preserves all the structure, so does h. Functoriality is
immediate.
2
Notes
The main result of Section C.1—that the theories described by plain operads are exactly
the strongly regular ones—must exist as a subconscious principle, at least, in the mind
of anyone who has worked with operads. Nevertheless, this is as far as I know the ﬁrst
proof. A brief sketch proof was given in my [1998a, 4.6].
The theory of familially representable monads on presheaf categories presented here
is clearly unsatisfactory. The proof of Theorem C.4.7 is so complicated that it is at the
limits of tolerability, for this author at least. Moreover, we have not even attempted to
describe explicitly a cartesian monad structure on a familially representable endofunctor
on a general presheaf category [Bop, Set] (where B need not be discrete), nor to describe
explicitly algebras for such monads. So the theory works, but only just.
Other ideas on the relation between cartesian and symmetric structures can be
found in Weber [2001] and Batanin [2002b].

332
Special Cartesian Monads

Appendix D
Free Multicategories
In this appendix we deﬁne what it means for a monad or a category to be ‘suitable’
and prove in outline the results on free multicategories stated in 6.5.
First we need some terminology. Let E be a cartesian category, I a small
category, D : I
- E a functor for which a colimit exists, and (D(I)
pI- L)I∈I
a colimit cone. Any map L′
- L gives rise to a new functor D′ : I
- E and
a new cone (D′(I)
p′
I- L′)I∈I by pullback: if ∆L denotes the functor I
- E
constant at L then
D′
- D
∆L′
p′
?
- ∆L
p
?
is a pullback square in the functor category [I, E].
We say that the colimit
(D(I)
pI- L)I∈I is stable under pullback if for any map L′
- L in E, the
resulting cone (D′(I)
p′
I- L′)I∈I is also a colimit.
The maps pI in a colimit cone (D(I)
pI- L)I∈I are called the coprojections
of the colimit, so we say that the colimit of D ‘has monic coprojections’ if each
pI is monic.
A category is said to have disjoint ﬁnite coproducts if it has ﬁnite co-
products, these coproducts have monic coprojections, and for any pair A, B of
objects, the square
0
- B
A
?
- A + B
?
is a pullback.
Let ω be the natural numbers with their usual ordering. A nested sequence
in a category E is a functor ω
- E in which the image of every map in ω is

334
Free Multicategories
monic; in other words, it is a diagram
A0 > > A1 > > · · ·
in E, where > > indicates a monic. A functor that preserves pullbacks also
preserves monics, so it makes sense for such a functor to ‘preserve colimits of
nested sequences’.
Let I and J be small categories and E a category with all limits of shape I
and colimits of shape J. We say that limits of shape I and colimits of shape J
commute in E if for each functor P : I × J
- E, the canonical map
lim
→J lim
←I P
- lim
←I lim
→J P
(D:1)
is an isomorphism. In particular, let I be the 3-object category such that limits
over I are pullbacks, and let J = ω; we say that pullbacks and colimits of nested
sequences commute in E if this canonical map is an isomorphism for all functors
P such that P(I, −) : ω
- E is a nested sequence for each I ∈I.
A category E is suitable if
• E is cartesian
• E has disjoint ﬁnite coproducts, and these are stable under pullback
• E has colimits of nested sequences; these commute with pullbacks and have
monic coprojections.
A monad (T, µ, η) is suitable if
• (T, µ, η) is cartesian
• T preserves colimits of nested sequences.
D.1
Proofs
We sketch proofs of each of the results stated in 6.5.
Theorem 6.5.1 Any presheaf category is suitable. Any ﬁnitary cartesian monad
on a cartesian category is suitable.
Proof
First note that the category ω is ﬁltered. The suitability of Set then
reduces to a collection of standard facts. Presheaf categories are also suitable,
as limits and colimits in them are computed pointwise. The second sentence is
trivial.
2
Before we embark on the proofs of the main theorems, here is the main idea.
A T -multicategory with object-of-objects E is a monoid in the monoidal category
E/(T E×E) (p. 162), so a free T -multicategory is a free monoid of sorts. The usual
formula for the free monoid on an object X of a monoidal category is `
n∈N X⊗n.

D.1 Proofs
335
But this only works if the tensor product preserves countable coproducts on each
side, and this is only true in our context if T preserves countable coproducts,
which is often not the case—consider plain multicategories, for instance. So we
need a more subtle construction. What we actually do corresponds to taking the
colimit of the sequence
0
a
k=0
X⊗k > >
1
a
k=0
X⊗k > >
2
a
k=0
X⊗k > > · · ·
in the case that the monoidal category does have coproducts preserved by the
tensor; in the general case we replace `n
k=0 X⊗k by X(n), deﬁned recursively by
X(0) = I,
X(n+1) = I + (X ⊗X(n)).
Theorem 6.5.2 Let T be a suitable monad on a suitable category E. Then the
forgetful functor
(E, T )-Multicat
- E+ = (E, T )-Graph
has a left adjoint, the adjunction is monadic, and if T + is the induced monad on
E+ then both T + and E+ are suitable.
Proof We proceed in four steps:
a. construct a functor F : E+
- (E, T )-Multicat
b. construct an adjunction between F and the forgetful functor U
c. check that E+ and T + are suitable
d. check that the adjunction is monadic.
Each step goes as follows.
a. Construct a functor F : E+
- (E, T )-Multicat. Let X be a T -graph.
For each n ∈N, deﬁne a T -graph
X(n)
1
T X0
dn

X0
cn
-
by
• X(0)
1
= X0, d0 = ηX0, and c0 = 1
• X(n+1)
1
= X0 + X1◦X(n)
1
(where ◦is 1-cell composition in the bicate-
gory E(T )), with the obvious choices of dn+1 and cn+1.
For each n ∈N, deﬁne a map in : X(n)
1
- X(n+1)
1
by taking

336
Free Multicategories
• i0 : X0
- X0 + X1◦X0 to be ﬁrst coprojection
• in+1 = 1X0 + (1X1 ∗in).
Then the in’s are monic, and by taking X∗
1 to be the colimit of
X(0)
1
>
i0> X(1)
1
>
i1> · · ·
we obtain a T -graph
FX =



X∗
1
	
  d
@@
c
R
T X0
X0


.
This T -graph FX naturally has the structure of a T -multicategory. The
identities map X0
- X∗
1 is just the coprojection X(0)
1
> > X∗
1. Com-
position comes from canonical maps X(m)
1
◦X(n)
1
- X(m+n)
1
(deﬁned by
induction on m for each ﬁxed n), which piece together to give a map
X∗
1 ◦X∗
1
- X∗
1. It is the deﬁnition of composition that needs most of
the suitability axioms.
We have now described what F does to objects, and extension to morphisms
is straightforward.
(The colimit of the nested sequence of X(n)
1
’s appears, in light disguise, as
the recursive description of the free plain multicategory monad in 2.3: X(n)
1
is the set of formal expressions that can be obtained from the ﬁrst clause
on p. 58 and up to n applications of the second clause.)
b. Construct an adjunction between F and U. We do this by constructing
unit and counit transformations and verifying the triangle identities. Both
transformations are the identity on the object of objects (‘X0’), so we only
need deﬁne them on the object of arrows. For the unit, η+, if X ∈E+ is a
T -graph then η+
X : X1
- X∗
1 is the composite
X1
∼- X1◦X0 >
copr2> X0 + X1◦X0 = X(1)
1
> > X∗
1.
For the counit, ε+, let C be a T -multicategory; write X = UC and use the
notation X(n)
1
and X∗
1 as in part (a). We need to deﬁne a map ε+
C : X∗
1
-
C. To do this, deﬁne for each n ∈N a map ε+
C,n : X(n)
1
- C1 by
• ε+
C,0 = (C0
ids- C1)
• ε+
C,n+1 = (C0 + C1◦X(n)
1
1+(1∗ε+
C,n)
- C0 + C1◦C1
q- C1), where q is
ids on the ﬁrst summand and comp on the second,
and then take ε+
C to be the induced map on the colimit. Veriﬁcation of the
triangle identities is straightforward.

D.1 Proofs
337
c. Check that E+ and T + are suitable. The forgetful functor
E+
-
E × E
X
7−→
(X0, X1)
creates pullbacks and colimits. This implies that E+ possesses pullbacks,
ﬁnite coproducts and colimits of nested sequences, and that they behave
as well as they do in E. So E+ is suitable, and it is now straightforward to
check that T + is suitable too.
d. Check that the adjunction is monadic.
We apply the Monadicity Theo-
rem (Mac Lane [1971, VI.7]) by checking that U creates coequalizers for
U-absolute-coequalizer pairs. This is a completely routine procedure and
works for any cartesian (not necessarily suitable) E and T .
2
The ﬁxed-object version of the theorem is now easy to deduce:
Theorem 6.5.4
Let T be a suitable monad on a suitable category E, and let
E ∈E. Then the forgetful functor
(E, T )-MulticatE
- E+
E = E/(T E × E)
has a left adjoint, the adjunction is monadic, and if T +
E is the induced monad on
E+
E then both T +
E and E+
E are suitable.
Proof In the adjunction (F, U, η+, ε+) constructed in the proof of 6.5.2, each of
F, U, η+ and ε+ leaves the object of objects unchanged. The adjunction therefore
restricts to an adjunction between the subcategories E+
E and (E, T )-MulticatE,
and the restricted adjunction is also monadic.
All we need to check, then, is that E+
E and T +
E are suitable. For E+
E , it is
enough to know that the slice of a suitable category is suitable, and to prove
this we need only note that for any E′ ∈E, the forgetful functor E/E′
-
E creates both pullbacks and colimits. Suitability of T +
E follows from suitability
of T + since the inclusion E+
E
⊂- E+ preserves and reﬂects both pullbacks and
colimits of nested sequences.
2
Finally, we prove the result stating that if E and T have certain special prop-
erties beyond suitability then those properties are inherited by E+ and T +, or,
in the ﬁxed-object case, by E+
E and T +
E .
Proposition 6.5.6 If E is a presheaf category and the functor T preserves wide
pullbacks then the same is true of E+ and T + in Theorem 6.5.2, and of E+
E and
T +
E in Theorem 6.5.4. Moreover, if T is ﬁnitary then so are T + and T +
E .
(Wide pullbacks were deﬁned on p. 309.)
Proof First we show that E+ and E+
E are presheaf categories. Let G : E
- E
be the functor deﬁned by G(E) = T (E) × E: then in the terminology of p. 318,
E+ is the Artin gluing E↓G. Since T preserves wide pullbacks, so too does G, and

338
Free Multicategories
Proposition C.3.4 then implies that E+ is a presheaf category. The ﬁxed-object
case is easier: the slice of a presheaf category is a presheaf category (1.1.7).
Next we show that T + and T +
E preserve wide pullbacks. Recall that in the
proof of 6.5.2, free T -multicategories were constructed using coproducts, colimits
of nested sequences, pullbacks, and the functor T . (The last two of these were
hidden in the notation ‘X◦X(n)
1
’.) It is therefore enough to show that all four
of these entities commute with wide pullbacks. The last two are immediate, and
Lemma C.2.2 implies that coproducts commute with wide pullbacks in Set (and
so in any presheaf category); all that remains is to prove that colimits of nested
sequences commute with wide pullbacks in Set.
This is actually not true in
general, but a slightly weaker statement is true and suﬃces. Speciﬁcally, let I be
a category of the form PK (p. 309), so that a limit over I is a wide pullback; let
J = ω; and let P : I × J
- Set be a functor such that
P(I, J)
- P(I, J′)
P(I′, J)
?
- P(I′, J′)
?
is a pullback square for each pair of maps (I
- I′, J
- J′). Then the
canonical map (D:1) (p. 334) is an isomorphism.
In the case at hand these
squares are of the form
X(n)
1
in- X(n+1)
1
Y (n)
1
f (n)
1
?
in
- Y (n+1)
1
f (n+1)
1
?
where f : X
- Y is some map of T -graphs, and it is easily checked that such
squares are pullbacks.
For ‘moreover’ we have to show that T + and T +
E preserve ﬁltered colimits if
T does. Just as in the previous paragraph, this reduces to the statement that
ﬁltered colimits commute with pullbacks in Set, whose truth is well-known (Mac
Lane [1971, IX.2]).
2
Notes
These proofs ﬁrst appeared in my [1999a]. They have much in common with the free
monoid construction of Baues, Jibladze and Tonks [1997].

Appendix E
Deﬁnitions of Tree
I met this guy
and he looked like he might have been a hat-check clerk
at an ice rink
which in fact
he turned out to be
Laurie Anderson [1982]
Trees appear everywhere in higher-dimensional algebra. In this text they were
deﬁned in a purely abstract way (2.3.3): tr is the free plain operad on the
terminal object of SetN, and an n-leafed tree is an element of tr(n). But for the
reasons laid out at the beginning of 7.3, I give here a ‘concrete’, graph-theoretic,
deﬁnition of (ﬁnite, rooted, planar) tree and sketch a proof that it is equivalent
to the abstract deﬁnition.
E.1
The equivalence
The main subtlety is that the trees we use are not quite ﬁnite graphs in the
usual sense: some of the edges have a vertex at only one of their ends. (Recall
from 2.3.3 that in a tree, an edge with a free end is not the same thing as an
edge ending in a vertex.) This suggests the following deﬁnitions.
Deﬁnition E.1.1
A (planar) input-output graph (Fig. E-A(a)) consists of
• a ﬁnite set V (the vertices)
• a ﬁnite set E (the edges), a subset I ⊆E (the input edges), and an
element o ∈E (the output edge)
• a function s : E\I
- V (source) and a function t : E\{o}
- V
(target)
• for each v ∈V , a total order ≤on t−1{v}.

340
Deﬁnitions of Tree
1
3
4
5
2
1
2
1
o
i1
i2
(a)
2
3
1
2
1
1
o
i1
i2
i3
(b)
Figure E-A: (a) Input-output graph with 4 vertices and 2 input edges i1, i2,
(b) combinatorial tree with 4 vertices and 3 input edges i1, i2, i3. In both, the
numbers indicate the order on the edges arriving at each vertex.
We write v
e- to mean that e is a non-input edge with s(e) = v, and similarly
e- v′ to mean that e is a non-output edge with t(e) = v′, and of course
v
e- v′ to mean that e is a non-input, non-output edge with s(e) = v and
t(e) = v′.
A tree is roughly speaking a connected, simply connected graph, and the
following notion of path allows us to express this.
Deﬁnition E.1.2 A path from a vertex v to an edge e in an input-output graph
is a diagram
v = v1
e1- v2
e2-
· · ·
el−1- vl
el=e
-
in the graph. That is, a path from v to e consists of
• an integer l ≥1
• a sequence (v1, v2, . . . , vl) of vertices with v1 = v
• a sequence (e1, . . . , el−1, el) of edges with el = e
such that
v1 = s(e1), t(e1) = v2 = s(e2), . . . , t(el−1) = vl = s(el)
and all of these sources and targets are deﬁned.
Deﬁnition E.1.3 A combinatorial tree is an input-output graph such that
for every vertex v, there is precisely one path from v to the output edge.
Fig. E-A(b) shows a combinatorial tree. The ordering of the edges arriving at
each vertex encodes the planar embedding. ‘Tree’ is an abbreviation for ‘ﬁnite,

E.1 The equivalence
341
rooted, planar tree’. If we were doing symmetric operads then we would use
non-planar trees, if we were doing cyclic operads then we would use non-rooted
trees, and so on.
A combinatorial tree is essentially the same thing as a tree in our sense, where
‘essentially the same thing’ refers to the obvious notion of isomorphism between
combinatorial trees. We write combtr(n) for the set of isomorphism classes of
combinatorial trees with n input edges.
Proposition E.1.4 For each n ∈N, there is a canonical bijection tr(n) ∼=
combtr(n).
With a little more work we could deﬁne an operad structure on (combtr(n))n∈N
and turn the proposition into the stronger statement that the operads tr and
combtr are isomorphic. With more work still we could deﬁne maps between com-
binatorial trees and so deﬁne a Cat-operad COMBTR in which COMBTR(n)
is the category of n-leafed combinatorial trees; then we could prove that this Cat-
operad is equivalent to the Cat-operad TR.
Sketch proof The strategy is to deﬁne functions
tr(n)
Φ-

Ψ
{combinatorial trees with n input edges}
for each n ∈N, such that if G ∼= G′ then Ψ(G) = Ψ(G′), and such that Ψ(Φ(τ)) =
τ and Φ(Ψ(G)) ∼= G for each tree τ and combinatorial tree G. The proposition
follows. The deﬁnition of Φ(τ) is by induction on the structure of the tree τ,
and the deﬁnition of Ψ(G) is by induction on the number of vertices of the
combinatorial tree G. All the details are straightforward.
2
Notes
Some pointers to the literature on trees can be found in the Notes to Chapter 7.

342
Deﬁnitions of Tree

Appendix F
Free Strict n-Categories
Here we prove that the forgetful functor
(strict n-categories)
- (n-globular sets)
is monadic and that the induced monad is cartesian and ﬁnitary. We also prove
the analogous results for ω-categories. We used monadicity and that the monad
is cartesian in Part III, in order to be able to deﬁne and understand globular
operads and weak n- and ω-categories. We use the fact that the monad is ﬁnitary
for technical purposes in Appendix G.
It is frustrating to have to prove this theorem, for two separate reasons. The
ﬁrst is that the proof can almost be made trivial: an adjoint functor theorem tells
us that the forgetful functor has a left adjoint, a monadicity theorem tells us that
it is monadic, and a routine calculation tells us that it is ﬁnitary. However, we
have no result of the form ‘given an adjunction, its induced monad is cartesian
if the right adjoint satisﬁes certain conditions’, and so in order to prove that
the monad is cartesian we are forced to actually construct the whole adjunction
explicitly. The second is that there ought to be some way of simply looking at
the theory of strict ω-categories, presented as an algebraic theory on the presheaf
category of globular sets (as in 1.4.8), and applying some general principle to
deduce the theorem immediately; see p. 307. But again, we currently have no
way of doing this.
Despite these frustrations, the proof is quite easy. By exploiting the deﬁnition
of strict n- and ω-categories by iterated enrichment (1.4.1), we can reduce it to
the proof of some straightforward statements about enriched categories.
Here is the idea. Suppose we know how to construct the free strict 2-category
on a 2-globular set. Then we can construct the free strict 3-category on a 3-
globular set X in two steps:
• For each x, x′ ∈X(0), take the 2-globular set X(x, x′) of cells whose 0-
dimensional source is x and whose 0-dimensional target is x′, replace it
by the free strict 2-category on X(x, x′), and reassemble to obtain a new
3-globular set Y . The 0- and 1-cells of Y are the same as those of X, and

344
Free Strict n-Categories
a typical 3-cell of Y looks like
x
x′
f0
f1
f2
f3
α0
α1
α2
β0
β1
γ0
γ1
γ2
Γ1
Γ2
∆1
Θ1
Θ2
where x and x′ are 0-cells of X, the fi’s are 1-cells, the αi’s, βi’s and γi’s
are 2-cells, and the Γi’s, ∆i’s and Θi’s are 3-cells.
• Write A for the category of 2-globular sets, think of Y as a family (Y (x, x′))x,x′∈X(0)
of objects of A, and let Z be the free A-enriched category on Y . The 0-cells
of Z are the same as those of X and Y , and a typical 3-cell of Z looks like
where the cells making up this diagram are cells of X. So Z is the free
strict 3-category on X.
We therefore construct the free strict n-category functor inductively on n, and
pass to the limit to reach the inﬁnite-dimensional version.
In the ﬁrst section, F.1, we prove the necessary results on free enriched cate-
gories. In the second, F.2, we apply them to establish the existence and properties
of the free strict n- and ω-category functors. Since the construction is explicit,
we are then able to verify the intuitively plausible formula (8:11) (p. 225) for the
free functor in terms of pasting diagrams.
F.1
Free enriched categories
Recall from 1.3 that for every category A there is a category A-Gph of A-
graphs, and that if A has ﬁnite products then there is also a category A-Cat of

F.1 Free enriched categories
345
A-enriched categories and a forgetful functor A-Cat
- A-Gph. Any ﬁnite-
product-preserving functor Q : B
- A between categories with ﬁnite products
induces a (strictly) commutative square
B-Cat
- A-Cat
B-Gph
?
- A-Gph,
?
and in particular induces an unambiguous functor B-Cat
- A-Gph. So if
T is a monad on a category A with ﬁnite products then the forgetful functor
AT
- A induces a forgetful functor AT -Cat
- A-Gph. This functor will
play an important role.
A monad will be called coproduct-preserving if its functor part preserves
all (small) coproducts.
Proposition F.1.1 Let A be a presheaf category.
a. The forgetful functor
A-Cat
- A-Gph
is monadic, and the induced monad is cartesian, ﬁnitary and coproduct-
preserving.
b. For any monad T on A, the forgetful functor
AT -Gph
- A-Gph
is monadic, and the induced monad is cartesian (respectively, ﬁnitary or
coproduct-preserving) if T is.
c. For any coproduct-preserving monad T on A, the forgetful functor
AT -Cat
- A-Gph
is monadic; the induced monad T ♯is coproduct-preserving, and is cartesian
(respectively, ﬁnitary) if T is.
Moreover, T ♯is given on A-graphs X by (T ♯X)0 = X0 and
(T ♯X)(x, x′) =
a
x=x0,x1,...,xr−1,xr=x′
T (X(x0, x1)) × · · · × T (X(xr−1, xr))
(x, x′ ∈X0), where the coproduct is over all r ∈N and sequences x0, . . . , xr of
elements of X0 satisfying x0 = x and xr = x′.
The hypothesis that A is a presheaf category is excessive, but makes the proof
easier and serves our purpose.

346
Free Strict n-Categories
Proof Part (a) is simple: free A-enriched categories are constructed just as free
ordinary categories are. The induced monad fcA on A-Gph is given on A-graphs
X by (fcAX)0 = X0 and
(fcAX)(x, x′) =
a
x=x0,x1,...,xr−1,xr=x′
X(x0, x1) × · · · × X(xr−1, xr)
(x, x′ ∈X0). Everything works as in the familiar case A = Set because A is a
Set-valued functor category.
Part (b) is also straightforward: ( )-Gph deﬁnes a strict map CAT
-
CAT of strict 2-categories (ignoring set-theoretic worries), and so turns the
adjunction between AT and A into an adjunction between the corresponding
categories of graphs. Explicitly, the induced monad T∗on A-Gph is given on
A-graphs X by (T∗X)0 = X0 and (T∗X)(x, x′) = T (X(x, x′)). That T∗inherits
the properties of T is easily checked.
To prove (c) and ‘moreover’ it suﬃces to put a monad structure on the com-
posite functor fcA◦T∗, to construct an isomorphism of categories
(A-Gph)fcA◦T∗∼= AT -Cat
commuting with the forgetful functors to A-Gph, and to check that the monad
fcA◦T∗is cartesian if T is. (Recall the two-step strategy of the introduction.)
The monad structure on fcA◦T∗consists of the monad structures on T∗and fcA
glued together by a distributive law (6.1.2)
λ : T∗◦fcA
- fcA◦T∗.
The functor fcA◦T∗is given by the formulas for T ♯in ‘moreover’; the composite
the other way round is given by ((T∗◦fcA)(X))0 = X0 and
((T∗◦fcA)X)(x, x′) =
a
x=x0,x1,...,xr−1,xr=x′
T (X(x0, x1) × · · · × X(xr−1, xr)).
So we can deﬁne λX by the evident natural maps. It is straightforward to check
that λ is indeed a distributive law and that λ is cartesian if T is, so the monad
fcA◦T∗is cartesian if T is (6.1.3). All that remains is the isomorphism. That
follows from 6.1.5 once we know that the monad on (A-Gph)T∗∼= AT -Gph
corresponding to the distributive law λ is fcAT , and that too is easily checked.
2
F.2
Free n- and ω-categories
Since we are using the deﬁnition of strict n- and ω-categories by iterated enrich-
ment, it is convenient to replace the category of n-globular sets by the equivalent
category n-Gph of n-graphs introduced in 1.4.9. There is a forgetful functor

F.2 Free n- and ω-categories
347
Un : n-Cat
- n-Gph deﬁned by taking U0 to be the identity and Un+1 to be
the diagonal of the commutative square
(n-Cat)-Cat
- (n-Gph)-Cat
(n-Cat)-Gph
?
- (n-Gph)-Gph.
?
(F:1)
(We abbreviate our previous notation for the category of strict n-categories,
Str-n-Cat, to n-Cat.) There is also a restriction functor Rn : (n+1)-Gph
-
n-Gph for each n ∈N, deﬁned by R0(X) = X0 and Rn+1 = Rn-Gph. These
functors ﬁt together into a strictly commutative diagram
· · · (n + 1)-Cat
Sn- n-Cat
Sn−1-
· · ·
S0 - 0-Cat
· · ·(n + 1)-Gph
Un+1
?
Rn
- n-Gph
Un
?
Rn−1
-
· · ·
R0
- 0-Gph,
U0
?
where the functors Sn are the usual ones (p. 24). Passing to the limit gives a
category ω-Gph, the ω-graphs, and a forgetful functor U : ω-Cat
- ω-Gph.
Analogous functors can, of course, be deﬁned with [Gop
n , Set] in place of
n-Gph and [Gop, Set] in place of ω-Gph. It is straightforward to check that
there are equivalences of categories
n-Gph ≃[Gop
n , Set],
ω-Gph ≃[Gop, Set]
commuting with all these functors. We are therefore at liberty to use graphs in
place of globular sets.
Theorem F.2.1 For each n ∈N, the forgetful functor n-Cat
- [Gop
n , Set] is
monadic and the induced monad is cartesian, ﬁnitary, and coproduct-preserving.
Proof
We replace this forgetful functor by Un and use induction. U0 is the
identity.
Given n ∈N, write Tn for the monad induced by Un and its left
adjoint (which exists by inductive hypothesis). Then Un+1 is the diagonal of
the square (F:1), and under the equivalence n-Cat ≃(n-Gph)Tn becomes the
forgetful functor
(n-Gph)Tn-Cat
- (n-Gph)-Gph.
The result now follows from Proposition F.1.1(c).
2
We want to deduce the same result for ω-dimensional structures, and morally
this should be immediate from their deﬁnition by limits. The only problem is that
ω-Cat and ω-Gph are deﬁned as strict, or 1-categorical, limits in the 2-category
CAT, and properties such as adjointness are 2-categorical. So, for instance, the

348
Free Strict n-Categories
fact that each Un has a left adjoint Fn does not a priori guarantee that U has a
left adjoint, since the squares
(n + 1)-Cat
Sn- n-Cat
(n + 1)-Gph
Fn+1 6
Rn
- n-Gph
Fn
6
(F:2)
are only known to commute up to (canonical) isomorphism.
A satisfactory resolution would involve the theory of weak limits in a 2-
category.
Here, however, we use a short and nasty method, exploiting some
special features of the situation.
The key is that each of the functors Sn has the following (easily proved)
isomorphism-lifting property:
if C ∈(n + 1)-Cat and j : Sn(C)
∼- D is
an isomorphism in n-Cat, then there exists an isomorphism i : C
∼- C′ in
(n + 1)-Cat such that SnC′ = D and Sni = j. This allows us to choose left ad-
joints F0, F1, . . . successively so that the squares (F:2) are strictly commutative.
Observe also that the categories n-Cat have all (small) limits and colimits
and the functors Sn preserve them, as follows by induction using standard facts
about enriched categories. Together with the isomorphism-lifting property, this
implies that ω-Cat has all limits and colimits and that a (co)cone in the category
ω-Cat is a (co)limit if and only if its image in each of the categories n-Cat is a
(co)limit. The same is true with Gph in place of Cat, easily.
Theorem F.2.2 The forgetful functor ω-Cat
- [Gop, Set] is monadic and
the induced monad is cartesian, ﬁnitary, and coproduct-preserving.
Proof It is equivalent to prove the same properties of U : ω-Cat
- ω-Gph.
Choose left adjoints Fn to the Un’s so that the squares (F:2) commute, and let F
be the induced functor ω-Gph
- ω-Cat; this is left adjoint to U. With the
aid of the Monadicity Theorem we see that all the properties of U remaining to be
proved concern limits and colimits in ω-Cat and ω-Gph, and by the observations
above, they are implied by the corresponding properties of Un (Theorem F.2.1).
2
We can now read oﬀan explicit formula for the free strict ω-category monad
T .
Deﬁne the globular set pd by taking pd(0) to be a one-element set and
pd(n+1) to be the free monoid on pd(n), and deﬁne for each pasting diagram π
a globular set bπ, as in 8.1. Write T(n) for the free strict n-category monad on the
category [Gop
n , Set] of n-globular sets, and X(n) for the n-globular set obtained
by forgetting all the cells of a globular set X above dimension n.
Proposition F.2.3 For globular sets X and n ∈N, there is an isomorphism
(T X)(n) ∼=
a
π∈pd(n)
[Gop, Set](bπ, X)
natural in X.

F.2 Free n- and ω-categories
349
Proof If π ∈pd(n) then the globular set bπ is empty above dimension n. Also
(T X)(n) = (T X)(n)(n) ∼= (T(n)X(n))(n)
by construction of T(n) and T . So the claimed isomorphism is equivalent to
(T(n)X(n))(n) ∼=
a
π∈pd(n)
[Gop
n , Set](bπ(n), X(n)).
This is a statement about n-globular sets; let us translate it into one about
n-graphs.
First, if n ∈N and Z is an n-graph then the corresponding n-globular set has
a set of n-cells, which we write as Z(n). If n = 0 then this is given by Z(0) = Z,
and then inductively,
Z(n + 1) ∼=
a
z,z′∈Z0
(Z(z, z′))(n).
Second, if n ∈N and π ∈pd(n) then there is an n-graph eπ corresponding to the
n-globular set bπ(n). If n = 0 and π is the unique element of pd(0) then eπ = 1. If
π ∈pd(n + 1) then π = (π1, . . . , πr) for some r ∈N and πi ∈pd(n), and in this
case eπ is given by
(eπ)0 = {0, . . . , r}
and
eπ(i, j) =
 eπj
if j = i + 1
0
otherwise.
The claimed isomorphism is therefore equivalent to
(T(n)Y )(n) ∼=
a
π∈pd(n)
n-Gph(eπ, Y )
for n ∈N and n-graphs Y .
For n = 0 this is trivial.
Then inductively, using ‘moreover’ of Proposi-
tion F.1.1 for the second step,
(T(n+1)Y )(n + 1) =
a
y,y′∈Y0
((T(n+1)Y )(y, y′))(n)
∼=
a
r∈N,y0,...,yr∈Y0

T(n)(Y (y0, y1)) × · · · × T(n)(Y (yr−1, yr))

(n)
∼=
a
r∈N,y0,...,yr∈Y0
(T(n)(Y (y0, y1)))(n) × · · · × (T(n)(Y (yr−1, yr)))(n)
∼=
a
r∈N,y0,...,yr∈Y0,
π1,...,πr∈pd(n)
n-Gph(f
π1, Y (y0, y1)) × · · · × n-Gph(f
πr, Y (yr−1, yr))
∼=
a
r∈N,π1,...,πr∈pd(n)
(n + 1)-Gph(
^
(π1, . . . , πr), Y )
∼=
a
π∈pd(n+1)
(n + 1)-Gph(eπ, Y ),

350
Free Strict n-Categories
as required.
2
Notes
The material here ﬁrst appeared in my thesis [2000b, App. C].

Appendix G
Initial
Operad-with-Contraction
There existed another ending to the story of O.
R´eage [1954]
We prove Proposition 9.2.2: the category OC of operads-with-contraction has an
initial object. This was needed in Chapter 9 for the deﬁnition of weak ω-category.
The explanation in 9.1 suggests an explicit construction of the initial operad-
with-contraction: ascend through the dimensions, at each stage freely adding in
elements obtained by contraction and then freely adding in elements obtained
by operadic composition. Here we take a diﬀerent approach, exploiting a known
existence theorem.
G.1
The proof
The following result appears to be due to Kelly [1980, 27.1].
Theorem G.1.1 Let
D
- C
B
?
U- A
V
?
be a (strict) pullback diagram in CAT. If A is locally ﬁnitely presentable and
each of U and V is ﬁnitary and monadic then the functor D
- A is also
monadic.
2
Actually, all we need is:
Corollary G.1.2 In the situation of Theorem G.1.1, D has an initial object.

352
Initial Operad-with-Contraction
Proof
A locally ﬁnitely presentable category is by deﬁnition cocomplete, so A
has an initial object. The functor D
- A has a left adjoint (being monadic),
which applied to the initial object of A gives an initial object of D.
2
Let T be the free strict ω-category monad on the category [Gop, Set] of glob-
ular sets, as in Chapters 8 and 9. Write Coll for the category [Gop, Set]/pd of
collections (p. 226), CC for the category of collections-with-contraction (deﬁned
by replacing ‘operad’ by ‘collection’ throughout Deﬁnition 9.2.1), and Operad
for the category of globular operads. Then there is a (strict) pullback diagram
OC - Operad
CC
?
U- Coll
V
?
in CAT, made up of forgetful functors.
To prove that OC has an initial object, we verify the hypotheses of The-
orem G.1.1.
The only non-routine part is showing that we can freely add a
contraction to any collection.
Coll is locally ﬁnitely presentable
Since Coll is a slice of a presheaf category, it is itself a presheaf category (1.1.7)
and so locally ﬁnitely presentable (Borceux [1994b, Example 5.2.2(b)]).
U is ﬁnitary and monadic
It is straightforward to calculate that U creates ﬁltered colimits; and since Coll
possesses all ﬁltered colimits, U preserves them too. It is also easy to calculate
that U creates coequalizers for U-split coequalizer pairs. So we have only to show
that U has a left adjoint.
Let P be a collection. We construct a new collection FP, a contraction κP
on FP, and a map αP : P
- FP, together having the appropriate universal
property; so the functor P 7−→(FP, κP ) is left adjoint to U, with α as unit. The
deﬁnitions of FP and αP are by induction on dimension:
• if π is the unique element of pd(0) then (FP)(π) = P(π)
• if n ≥1 and π ∈pd(n) then (FP)(π) = P(π) + ParF P (π)
• αP,π : P(π) ⊂- (FP)(π) is inclusion as the ﬁrst summand, for all π
• if n ≥1 and π ∈pd(n) then the source map s : (FP)(π)
- (FP)(∂π)
is deﬁned on the ﬁrst summand of (FP)(π) as the composite
P(π)
s- P(∂π)
αP,∂π
- (FP)(∂π)
and on the second summand as ﬁrst projection; the target map is deﬁned
dually.

G.1 The proof
353
The globularity equations hold, so FP forms a collection. Clearly αP : P
-
FP is a map of collections. The contraction κP on FP is deﬁned by taking
κP
π : ParF P (π)
- (FP)(π)
(n ≥1, π ∈pd(n)) to be inclusion as the second summand. It is easy to check
that FP, κP and αP have the requisite universal property: so U has a left adjoint.
V is ﬁnitary and monadic
The functor T is ﬁnitary, by F.2.2. This implies by 6.5.1 that the monad T is
suitable, and so by 6.5.4 that V is monadic. It also implies by the ‘moreover’
of 6.5.6 that the monad induced by V and its left adjoint is ﬁnitary. If a category
has colimits of a certain shape and a monad on it preserves colimits of that shape,
then so too does the forgetful algebra functor; hence V is ﬁnitary, as required.
Notes
I thank Steve Lack and John Power for telling me that the result I needed, G.1.1, was
in Kelly [1980], and Sjoerd Crans for telling me exactly where.

354
Initial Operad-with-Contraction

Bibliography
[1994]
Jiˇr´ı Ad´amek, Jiˇr´ı Rosick´y, Locally Presentable and Accessible Categories, Lon-
don Mathematical Society Lecture Note Series 189, Cambridge University
Press, 1994.
[1978]
J.F. Adams, Inﬁnite Loop Spaces, Princeton University Press, 1978.
[1971]
D.W. Anderson, Spectra and Γ-sets, in Algebraic Topology (Proceedings of Sym-
posia in Pure Mathematics 22), AMS, 1971.
[1982]
Laurie Anderson, Let X = X, on Big Science, Warner Brothers, 1982.
[1980]
The Athenian, That wretched kilt-wearer: the paintings of Theoﬁlos, May
1980.
[1997]
John C. Baez, An introduction to n-categories, e-print q-alg/9705009, 1997;
also in Category Theory and Computer Science (Santa Margherita Ligure,
1997), Lecture Notes in Computer Science 1290, Springer, 1997.
[1995]
John C. Baez, James Dolan, Higher-dimensional algebra and topological quan-
tum ﬁeld theory, Journal of Mathematical Physics 36 (11) (1995), 6073–6105;
also e-print q-alg/9503002, 1995 (without diagrams).
[1997]
John C. Baez, James Dolan, Higher-dimensional algebra III: n-categories and
the algebra of opetopes, e-print q-alg/9702014, 1997; also Advances in Math-
ematics 135 (1998), no. 2, 145–206.
[1998a] M.A. Batanin, Monoidal globular categories as a natural environment for the
theory of weak n-categories, Advances in Mathematics 136 (1998), no. 1, 39–
103.
[1998b] M.A. Batanin, Computads for ﬁnitary monads on globular sets, in Higher
Category Theory (Evanston, IL, 1997), Contemporary Mathematics 230, AMS,
1998.
[2002a] M.A. Batanin, On the Penon method of weakening algebraic structures, Jour-
nal of Pure and Applied Algebra 172 (2002), no. 1, 1–23.
[2002b] M.A. Batanin, Computads and slices of operads, e-print math.CT/0209035,
2002.
[2000]
Michael Batanin, Ross Street, The universal property of the multitude of trees,
Journal of Pure and Applied Algebra 154 (2000), no. 1-3, 3–13.

356
BIBLIOGRAPHY
[1997]
Hans-Joachim Baues, Mamuka Jibladze, Andy Tonks, Cohomology of monoids
in monoidal categories, in J-L. Loday, J. Stasheﬀ, A. Voronov (eds.), Oper-
ads: Proceedings of Renaissance Conferences, Contemporary Mathematics 202,
AMS, 1997.
[1969]
Jon Beck, Distributive laws, in Seminar on Triples and Categorical Homology
Theory (ETH, Z¨urich, 1966/67), Springer, 1969.
[c.1997] Alexander Beilinson, Vladimir Drinfeld, Chiral algebras, preprint, c.1997.
[1967]
Jean B´enabou, Introduction to bicategories, in J. B´enabou et al (eds.), Reports
of the Midwest Category Seminar, Lecture Notes in Mathematics 47, Springer,
1967.
[2002]
Clemens Berger, A cellular nerve for higher categories, Advances in Mathemat-
ics 169 (2002), no. 1, 118–175.
[1983]
Renato Betti, Aurelio Carboni, Ross Street, Robert Walters, Variation through
enrichment, Journal of Pure and Applied Algebra 29 (1983), 109–127.
[1989]
R. Blackwell, G.M. Kelly, A.J. Power, Two-dimensional monad theory, Journal
of Pure and Applied Algebra 59 (1989), no. 1, 1–41.
[1973]
J.M. Boardman, R.M. Vogt, Homotopy Invariant Algebraic Structures on Topo-
logical Spaces, Lecture Notes in Mathematics 347, Springer, 1973.
[1994a] Francis Borceux, Handbook of Categorical Algebra 1: Basic Category Theory,
Encyclopedia of Mathematics and its Applications 50, Cambridge University
Press, 1994.
[1994b] Francis Borceux, Handbook of Categorical Algebra 2: Categories and Struc-
tures, Encyclopedia of Mathematics and its Applications 51, Cambridge Uni-
versity Press, 1994.
[1997]
Richard Borcherds, Vertex algebras, e-print q-alg/9706008, 1997; also in
Topological Field Theory, Primitive Forms and Related Topics (Kyoto, 1996),
Progress in Mathematics 160, Birkh¨auser Boston, 1998.
[1999]
Susie Bright, Full Exposure, HarperCollins, 1999.
[1999]
James Robert Brown, Philosophy of Mathematics:
an Introduction to the
World of Proofs and Pictures, Routledge, 1999.
[1971]
Albert Burroni, T-cat´egories (cat´egories dans un triple), Cahiers de Topologie
et G´eom´etrie Diﬀ´erentielle 12 (1971), 215–321.
[1991]
Albert Burroni, Higher-dimensional word problem, in Category Theory and
Computer Science (Paris, 1991), Lecture Notes in Computer Science 530,
Springer, 1991.
[1993]
Albert Burroni, Higher-dimensional word problems with applications to equa-
tional logic, Theoretical Computer Science 115 (1993), no. 1, 43–62.
[1995]
A. Carboni, P. Johnstone, Connected limits, familial representability and Artin
glueing, Mathematical Structures in Computer Science 5 (1995), 441–459.

BIBLIOGRAPHY
357
[2002]
A. Carboni, P. Johnstone, Corrigenda to ‘Connected limits, familial repre-
sentability and Artin glueing’, to appear.
[1987]
Aurelio Carboni, Stefano Kasangian, Robert Walters, An axiomatics for bicat-
egories of modules, Journal of Pure and Applied Algebra 45 (1987), 127–141.
[2003a] Eugenia Cheng, Weak n-categories: opetopic and multitopic foundations, also
e-print math.CT/0304277, 2003; Journal of Pure and Applied Algebra, to ap-
pear.
[2003b] Eugenia Cheng, Weak n-categories: comparing opetopic foundations, also e-
print math.CT/0304279, 2003; Journal of Pure and Applied Algebra, to appear.
[2003c]
Eugenia Cheng, The category of opetopes and the category of opetopic sets,
e-print math.CT/0304284, 2003.
[2003d] Eugenia Cheng, Opetopic bicategories: comparison with the classical theory,
e-print math.CT/0304285, 2003.
[2003e]
Eugenia Cheng, An alternative characterisation of universal cells in opetopic
n-categories, e-print math.CT/0304286, 2003.
[1999]
Sjoerd E. Crans, A tensor product for Gray-categories, Theory and Applica-
tions of Categories 5 (1999), no. 2, 12–69.
[2000]
Sjoerd Crans, On braidings, syllepses and symmetries, Cahiers de Topologie et
G´eom´etrie Diﬀ´erentielle Cat´egorique 41 (2000), no. 1, 2–74.
[2001]
John W. Duskin, A simplicial-matrix approach to higher dimensional category
theory II: bicategory morphisms and simplicial maps, preprint, 2001.
[2002]
John W. Duskin, Simplicial matrices and the nerves of weak n-categories I:
nerves of bicategories, Theory and Applications of Categories 9 (2002), no. 10,
198–308.
[1989]
W.G. Dwyer, D.M. Kan, J.H. Smith, Homotopy commutative diagrams and
their realizations, Journal of Pure and Applied Algebra 57 (1989), no. 1, 5–24.
[1962]
B. Eckmann, P.J. Hilton, Group-like structures in general categories, I: multi-
plications and comultiplications, Mathematische Annalen 145 (1962), 227–255.
[1995]
Umberto Eco, The Search for the Perfect Language, Blackwell, 1995.
[1965]
Charles Ehresmann, Cat´egories et Structures, Dunod, 1965.
[1967]
P. Gabriel, M. Zisman, Calculus of Fractions and Homotopy Theory, Springer,
1967.
[2002]
Wee Liang Gan, Koszul duality for dioperads, e-print math.QA/0201074, 2002.
[1994]
E. Getzler, M.M. Kapranov, Modular operads, e-print dg-ga/9408003, 1994;
also Compositio Mathematica 110 (1998), no. 1, 65–126.
[1995]
E. Getzler, M.M. Kapranov, Cyclic operads and cyclic homology, in Geometry,
Topology, & Physics, Conference Proceedings and Lecture Notes in Geometry
and Topology IV, International Press, 1995.

358
BIBLIOGRAPHY
[1994]
Victor Ginzburg, Mikhail Kapranov, Koszul duality for operads, Duke Mathe-
matical Journal 76 (1994), no. 1, 203–272.
[1995]
R. Gordon, A.J. Power, Ross Street, Coherence for Tricategories, Memoirs of
the AMS 117, no. 558, 1995.
[1999]
Marco Grandis, Robert Par´e, Limits in double categories, Cahiers de Topologie
et G´eom´etrie Diﬀ´erentielle Cat´egorique 40 (1999), no. 3, 162–220.
[2003]
Marco Grandis, Robert Par´e, Adjoints for double categories, preprint, 2003.
[1983]
A. Grothendieck, Pursuing stacks, manuscript, 1983.
[2000]
Claudio Hermida, Representable multicategories, Advances in Mathematics
151 (2000), no. 2, 164–225.
[1998]
Claudio Hermida, Michael Makkai, John Power, Higher-dimensional multi-
graphs, in Thirteenth Annual IEEE Symposium on Logic in Computer Science
(Indianapolis, IN, 1998), IEEE Computer Society, 1998.
[2000]
Claudio Hermida, Michael Makkai, John Power, On weak higher dimensional
categories I.1, Journal of Pure and Applied Algebra 154 (2000), no. 1-3, 221–
246.
[2001]
Claudio Hermida, Michael Makkai, John Power, On weak higher-dimensional
categories I.2, Journal of Pure and Applied Algebra 157 (2001), no. 2-3, 247–
277.
[2002]
Claudio Hermida, Michael Makkai, John Power, On weak higher-dimensional
categories I.3, Journal of Pure and Applied Algebra 166 (2002), no. 1-2, 83–104.
[1981]
John E. Hutchinson, Fractals and self-similarity, Indiana University Mathe-
matics Journal 30 (1981), no. 5, 713–747.
[1986]
Andr´e Joyal, Foncteurs analytiques et esp`eces de structures, in Combinatoire
´Enum´erative (Montreal, Quebec, 1985), Lecture Notes in Mathematics 1234,
Springer, 1986.
[1997]
A. Joyal, Disks, duality and Θ-categories, preprint, 1997.
[1993]
Andr´e Joyal, Ross Street, Braided tensor categories, Advances in Mathematics
102 (1993), no. 1, 20–78.
[1994]
M.M. Kapranov, V.A. Voevodsky, 2-categories and Zamolodchikov tetrahe-
dra equations, in Algebraic Groups and their Generalizations: Quantum and
Inﬁnite-Dimensional Methods, Proceedings of Symposia in Pure Mathematics
56, Part 2, AMS, 1994.
[1972]
G.M. Kelly, Many-variable functorial calculus I, in Coherence in Categories,
Lecture Notes in Mathematics 281, Springer, 1972.
[1974]
G.M. Kelly, On clubs and doctrines, in Category Seminar, Lecture Notes in
Mathematics 420, Springer, 1974.

BIBLIOGRAPHY
359
[1980]
G.M. Kelly, A uniﬁed treatment of transﬁnite constructions for free algebras,
free monoids, colimits, associated sheaves, and so on, Bulletin of the Australian
Mathematical Society 22 (1980), 1–83.
[1982]
Gregory Maxwell Kelly, Basic Concepts of Enriched Category Theory, London
Mathematical Society Lecture Note Series 64, Cambridge University Press,
1982.
[1992]
G.M. Kelly, On clubs and data-type constructors, in Applications of Categories
in Computer Science (Durham, 1991), London Mathematical Society Lecture
Note Series 177, Cambridge University Press, 1992.
[1974]
G.M. Kelly, Ross Street, Review of the elements of 2-categories, in Category
Seminar (Sydney, 1972/1973), Lecture Notes in Mathematics 420, Springer,
1974.
[2001]
Mikhail Khovanov, A functor-valued invariant of tangles, e-print math.QA/
0103190, 2001; also Algebraic and Geometric Topology 2 (2002), 665–741.
[1999]
Maxim Kontsevich, Operads and motives in deformation quantization, e-print
math.QA/9904055, 1999; also Letters in Mathematical Physics 48 (1999), no. 1,
35–72.
[1994]
M. Kontsevich, Yu. Manin, Gromov-Witten classes, quantum cohomology and
enumerative geometry, e-print hep-th/9402147, 1994; also Communications in
Mathematical Physics 164 (1994), no. 3, 525–562.
[2003]
J. Koslowski, A monadic approach to polycategories, Electronic Notes in The-
oretical Computer Science 69 (2003).
[1969]
Joachim Lambek, Deductive systems and categories II: standard constructions
and closed categories, in P. Hilton (ed.), Category Theory, Homology Theory
and their Applications, I (Battelle Institute Conference, Seattle, 1968, Vol.
One) Lecture Notes in Mathematics 86, Springer, 1969.
[1996]
R.J. Lawrence, An introduction to topological ﬁeld theory, in The Interface
of Knots and Physics, Proceedings of Symposia in Applied Mathematics 51
(1996), AMS, 89–128.
[1955]
Michel Lazard, Lois de groupes et analyseurs, Annales Scientiﬁques de l’ ´Ecole
Normale Sup´erieure (3) 72 (1955), 299–400.
[1998a] Tom Leinster, General operads and multicategories, e-print math.CT/9810053,
1998.
[1998b] Tom Leinster, Basic bicategories, e-print math.CT/9810017, 1998.
[1999a] Tom Leinster, Generalized enrichment for categories and multicategories, e-
print math.CT/9901139, 1999.
[1999b] Tom Leinster, Up-to-homotopy monoids, e-print math.QA/9912084, 1999.
[2000a] Tom Leinster, Homotopy algebras for operads, e-print math.QA/0002180, 2000.

360
BIBLIOGRAPHY
[2000b] Tom Leinster, Operads in higher-dimensional category theory, e-print math.
CT/0011106, 2000.
[2001a] Tom Leinster, Structures in higher-dimensional category theory, e-print math.
CT/0109021, 2001.
[2001b] Tom Leinster, A survey of deﬁnitions of n-category, e-print math.CT/0107188,
2001; also Theory and Applications of Categories 10 (2002), no. 1, 1–70.
[2002]
Tom Leinster, Generalized enrichment of categories, e-print math.CT/0204279,
2002; also Journal of Pure and Applied Algebra 168 (2002), no. 2-3, 391–406.
[2003]
Tom Leinster, Fibrations of multicategories, to appear.
[1972]
Geoﬀrey Lewis, Coherence for a closed functor, in G.M. Kelly, M. Laplaza,
G. Lewis, S. Mac Lane (eds.), Coherence in Categories, Lecture Notes in Math-
ematics 281, Springer, 1972.
[1997]
Jean-Louis Loday, James D. Stasheﬀ, Alexander A. Voronov (eds.), Operads:
Proceedings of Renaissance Conferences, AMS, 1997.
[1963]
Saunders Mac Lane, Natural associativity and commutativity, Rice University
Studies 49 (1963), no. 4, 28–46.
[1971]
Saunders Mac Lane, Categories for the Working Mathematician, Graduate
Texts in Mathematics 5, Springer, 1971, revised edition 1998.
[1992]
Saunders Mac Lane, Ieke Moerdijk, Sheaves in Geometry and Logic, Springer,
1992.
[1996]
M. Makkai, Avoiding the axiom of choice in general category theory, Journal
of Pure and Applied Algebra 108 (1996), no. 2, 109–173.
[1999]
M. Makkai, The multitopic ω-category of all multitopic ω-categories, preprint,
1999.
[2001]
Mihaly Makkai, Marek Zawadowski, Duality for simple ω-categories and disks,
Theory and Applications of Categories 8 (2001), no. 7, 114–243.
[1976]
Ernest G. Manes, Algebraic Theories, Graduate Texts in Mathematics 26,
Springer, 1976.
[2002]
Ben Marcus, Notable American Women, Vintage, 2002.
[2002]
Martin Markl, Steve Shnider, Jim Stasheﬀ, Operads in Algebra, Topology and
Physics, Mathematical Surveys and Monographs 96, AMS, 2002.
[1972]
J.P. May, The Geometry of Iterated Loop Spaces, Lectures Notes in Mathemat-
ics 271, Springer, 1972.
[1997]
J.P. May, Deﬁnitions: operads, algebras and modules, in J-L. Loday, J. Stash-
eﬀ, A. Voronov (eds.), Operads: Proceedings of Renaissance Conferences, Con-
temporary Mathematics 202, AMS, 1997.
[2001]
J.P. May, Operadic categories, A∞-categories and n-categories, preprint, 2001.

BIBLIOGRAPHY
361
[1989]
Gregory Moore, Nathan Seiberg, Classical and quantum conformal ﬁeld theory,
Communications in Mathematical Physics 123 (1989), no. 2, 177–254.
[1999]
Jacques Penon, Approche polygraphique des ∞-categories non strictes, Cahiers
de Topologie et G´eom´etrie Diﬀ´erentielle Cat´egorique 40 (1999), no. 1, 31–80.
[1954]
Pauline R´eage, Story of O, 1954.
[1999]
David Ruelle, Conversations on mathematics with a visitor from outer space,
in V. Arnold, M. Atiyah, P. Lax, B. Mazur (eds.), Mathematics: Frontiers and
Perspectives, International Mathematical Union/AMS, 1999.
[2000]
Paolo Salvatore, The universal operad of iterated loop spaces, talk at Workshop
on Operads, Osnabr¨uck, 2000.
[1992]
R. Schw¨anzl, R. Vogt, Homotopy homomorphisms and the hammock local-
ization, Bolet´ın de la Sociedad Matem´atica Mexicana (2) 37 (1992), no. 1-2,
431–448.
[1968]
Graeme Segal, Classifying spaces and spectral sequences, Institut des Hautes
´Etudes Scientiﬁques Publications Math´ematiques 34 (1968), 105–112.
[1974]
Graeme Segal, Categories and cohomology theories, Topology 13 (1974), 293–
312.
[1596]
William Shakespeare, King John, 1596.
[1994]
Mei Chee Shum, Tortile tensor categories, Journal of Pure and Applied Algebra
93 (1994), no. 1, 57–110.
[1997]
Carlos Simpson, A closed model structure for n-categories, internal Hom, n-
stacks and generalized Seifert-Van Kampen, e-print alg-geom/9704006, 1997.
[1998]
Carlos Simpson, On the Breen–Baez–Dolan stabilization hypothesis for Tam-
samani’s weak n-categories, e-print math.CT/9810058, 1998.
[1999a] Craig. T. Snydal, Equivalence of Borcherds G-vertex algebras and axiomatic
vertex algebras, e-print math.QA/9904104, 1999.
[1999b] Craig T. Snydal, Relaxed multicategory structure of a global category of rings
and modules, e-print math.CT/9912075, 1999; also Journal of Pure and Applied
Algebra 168 (2002), no. 2-3, 407–423.
[1997]
Yan Soibelman, Meromorphic tensor categories, e-print q-alg/9709030, 1997.
[1999]
Yan Soibelman, The meromorphic braided category arising in quantum aﬃne
algebras, e-print math.QA/9901003, 1999; also International Mathematics Re-
search Notices 1999, no. 19, 1067–1079.
[1998]
Alan D. Sokal, Jean Bricmont, Fashionable Nonsense, Picador, 1998.
[1963a] James Dillon Stasheﬀ, Homotopy associativity of H-spaces I, Transactions of
the AMS 108 (1963), 275–292.

362
BIBLIOGRAPHY
[1963b] James Dillon Stasheﬀ, Homotopy associativity of H-spaces II, Transactions of
the AMS 108 (1963), 293–312.
[1972]
Ross Street, The formal theory of monads, Journal of Pure and Applied Algebra
2 (1972), 149–168.
[1976]
Ross Street, Limits indexed by category-valued 2-functors, Journal of Pure and
Applied Algebra 8 (1976), no. 2, 149–181.
[1987]
Ross Street, The algebra of oriented simplexes, Journal of Pure and Applied
Algebra 49 (1987), no. 3, 283–335.
[1988]
Ross Street, Fillers for nerves, in Categorical Algebra and its Applications
(Louvain-la-Neuve, 1987), Lecture Notes in Mathematics 1348, Springer, 1988.
[1996]
Ross Street, Categorical structures, in M. Hazewinkel (ed.), Handbook of Alge-
bra Vol. 1, North-Holland, 1996.
[1998]
Ross Street, The role of Michael Batanin’s monoidal globular categories,
in Higher Category Theory (Evanston, IL, 1997), Contemporary Mathemat-
ics 230, AMS, 1998.
[2003]
Ross Street, Weak ω-categories, in Diagrammatic Morphisms and Applications,
Contemporary Mathematics 318, AMS, 2003.
[1975]
M.E. Szabo, Polycategories, Communications in Algebra 3 (1975), no. 8, 663–
689.
[1995]
Zouhair Tamsamani, Sur des notions de n-cat´egorie et n-groupo¨ıde non strictes
via des ensembles multi-simpliciaux, e-print alg-geom/9512006, 1995; also K-
Theory 16 (1999), no. 1, 51–99.
[1998]
Ulrike Tillmann, S-structures for k-linear categories and the deﬁnition of a
modular functor, e-print math.GT/9802089, 1998; also Journal of the London
Mathematical Society (2) 58 (1998), no. 1, 208–228.
[2002]
Bertrand To¨en, Gabriele Vezzosi, Segal topoi and stacks over Segal categories,
e-print math.AG/0212330, 2002.
[1963]
Kurt Vonnegut, Cat’s Cradle, 1963.
[1998]
Alexander A. Voronov, The Swiss-cheese operad, e-print math.QA/9807037,
1998; also in Homotopy Invariant Algebraic Structures (Baltimore, MD, 1998),
Contemporary Mathematics 239, AMS, 1999.
[1981]
R.F.C. Walters, Sheaves and Cauchy-complete categories. Cahiers de Topologie
et G´eom´etrie Diﬀ´erentielle Cat´egorique 22 (1981), no. 3, 283–286.
[2001]
Mark Weber, Symmetric operads for globular sets, Ph.D. thesis, Macquarie
University, 2001.
[1975]
Sol Worth, Pictures can’t say ‘ain’t’, Versus: Quaderni di studi semiotici 12
(1975), 85–105.
[2001]
David N. Yetter, Functorial Knot Theory, Series on Knots and Everything 26,
World Scientiﬁc Publishing Co., 2001.

Glossary of Notation
‘It’s a revealing thing, an author’s index of his own work,’
she informed me.
‘It’s a shameless exhibition—to the
trained eye.’
Vonnegut [1963]
Page numbers indicate where the term is deﬁned; multiple page numbers mean
that the term is used in multiple related senses. Boxes (2) stand for some or all
of ‘lax’, ‘colax’, ‘wk’, and ‘str’.
Latin letters
Ab
category of abelian groups
13
Alg( )
category of algebras for a multicategory
41, 119
Alg2( )
category of algebras for a Cat-operad
76–78
B
initial operad with coherence and system of compositions
263
Bicat2
category of bicategories
30
( )-Bicat2
category of ‘bicategories’ according to some theory
96
Braid
category of braids
xix
CartMnd2
2-category of cartesian monads and lax maps
169, 170
Cat
(2-)category of small categories
4, 19
Cat2
weak double category of categories
136
Cat( )
category of internal categories
24
( )-Cat
category of enriched categories
17
CatAlg( )
category of categorical algebras
95, 265
Cat-Operad
(2-)category of Cat-operads
76, 80
( )co
dual of bicategory, reversing 2-cells
28
cod
codomain map of (multi)category
9, 109
CommMon
category of commutative monoids
183
comp
composition map in (multi)category
9, 17, 109
Cone( )
cone on space
202
ctr
operad of classical trees
60
D
discrete category
4, 167
D
augmented simplex category
10
Dm
m-dimensional closed disk/ball
21
Dd
little d-disks operad
49
DN
n
discrete N-dimensional structure on n-dim’l structure
251, 252
DFib( )
category of discrete ﬁbrations
9
dom
domain map of (multi)category
9, 109

364
Glossary of Notation
DOpﬁb( )
category of discrete opﬁbrations
9, 158
E
edge functor
195
En
nth opetopic category
179
End( )
endomorphism operad or multicategory
41, 46, 161
Fam( )
category of families of objects
311
FatCommMon
category of fat commutative monoids
281
FatSymMulticat category of fat symmetric multicategories
283
fc
free category monad
106, 126
fcV
free V-enriched category monad
255
G, Gω
category on which globular sets are presheaves
24, 245
Gn
category on which n-globular sets are presheaves
20
Gph
category of directed graphs
255
( )-Gph
category of enriched graphs
17
n-Gph
category of n-graphs
23
( )-Graph
category of generalized graphs
110
HMonCat
category of homotopy monoidal categories
89
Hom
‘hom’ generalized graph
161
I
indiscrete (multi)category
4, 175
I
unit in monoidal category
10
I
initial symmetric operad
209
i
identities map
22, 261
IA
identity module over category A
137
IM
m
indiscrete M-category on m-category
246
ids
identities map in (multi)category
9, 17, 109
Jn
localization of n-dimensional structure
253
K
operad of associahedra
50
(L, λ)
initial globular operad with contraction
238
(Ln, λn)
initial globular n-operad with contraction
245
LaxBicat2
category of lax bicategories
95
LaxMonCat2
category of lax monoidal categories
71
M
free commutative monoid monad
326
Matk
category of natural numbers and matrices over k
268
Mnd2
2-category of monads
149
( )-Mod
category of modules
7
Mon( )
category of monoids in monoidal category
12
Mon( )
fc-multicategory of monads in fc-multicategory
140
MonCat2
category of monoidal categories
13
( )-MonCatwk
category of ‘monoidal categories’ according to some theory
76,78
Monoid
category of monoids
107
Multicat
(2-)category of plain multicategories
39, 61
( )-Multicat
(2-)category of generalized multicategories
110, 145
( )-MulticatE
category of generalized multicategories with objects E
164
N
natural numbers (including 0)
x
O
category of opetopes
199
O(n)
category of opetopes of dimension at most n
204
On
set of n-opetopes
179
ob
object-set of category
4
OC
category of globular operads with contraction
238
n-OC
category of globular n-operads with contraction
245
n-OP
category of globular n-operads with precontraction
245

365
( )op
opposite of category
4
( )op
dual of bicategory, reversing 1-cells
28
Operad
category of plain operads
42
( )-Operad
category of operads in symmetric multicategory
43
( )-Operad
category of generalized operads
110
n-Operad
category of globular n-operads
243
PK
shape of K-ary wide pullback
309
Parq( )
parallel pairs of cells for map q
234
ParP ( )
parallel pairs of cells in collection P
235
PDn
structured category of opetopic n-pasting diagrams
188
Pdn
category of opetopic n-pasting diagrams
188
pd
strict ω-category of globular pasting diagrams
220
pri
ith projection
12
R
category on which reﬂexive globular sets are presheaves
261
Rn
restriction of (n + 1)-graph to n-graph
347
RM
m
restriction of M-dimensional structure to m dimensions
246
Ring, Ring2
fc-multicategory of rings
128, 129
s
source map
19, 201
Sd
d-sphere
47
Sn
functor forgetting (n + 1)-cells of (n + 1)-category
24
Sn
symmetric group on n letters
39
Set
category of sets
4
Set2
fc-multicategory of sets
129
st
strict cover
72, 95
Str-2-Cat2
category of strict 2-categories
95
StrMonCat2
category of strict monoidal categories
56, 71
Str-n-Cat
category of strict n-categories
18
Str-ω-Cat
category of strict ω-categories
24
( )-Struc
category of structured categories
165
StTr
category of stable trees
192
SymMulticat
category of symmetric multicategories
54
S
operad of symmetries
51, 54
T = (T, µ, η)
usual name for cartesian monad
103
(T, µ, η)
free strict ω-category monad (in Ch. 8, 9, 10)
220
Tn
nth opetopic monad
179
T(n)
free strict n-category monad
243
t
target map
19, 179, 201
Top
(ω-)category of topological spaces
xvi, 7
Top∗
category of based spaces
47
TR
Cat-operad of trees
193
Tr
category of trees
189
tr
operad of trees
59
UE
forgetful functor E/E
- E
152
UBicat2
category of unbiased bicategories
95
UMonCat2
category of unbiased monoidal categories
71
V
forgetful functor from monoidal categories to multicategories
83
V
vertex functor
195
W
free monoid monad
255
Wk-n-Cat
category of weak n-categories
245
Wk-ω-Cat
category of weak ω-categories
238

366
Glossary of Notation
y
‘Yoneda’ embedding for familially representable functors
311
Greek letters
α
associativity isomorphism
11, 27
γ
coherence map in lax bicategory
67, 93
∆
category of nonempty ﬁnite totally ordered sets
87
∆inj
subcategory of ∆consisting only of injections
199
∆
diagonal functor
183
∆ω
category of globular pasting diagrams
269
δ
coherence isomorphisms in a Σ-monoidal category
287
δ
•
•
system of binary compositions
260
∂
boundary of globular pasting diagram
220
ι
coherence map in lax bicategory
67, 93
ι
embedding of space in its cone
202
ιm
globular pasting diagram resembling single m-cell
228
λ
left unit isomorphism
11, 27
(L, λ)
initial globular operad with contraction
238
(Ln, λn)
initial globular n-operad with contraction
245
νn
n-leafed corolla
60
Q
product
4
Πn
fundamental n-groupoid of space
xv, 10, 28, 95, 265
Πω
fundamental ω-groupoid of space
xiv, 240
ρ
right unit isomorphism
11, 27
P
summation in fat commutative monoid
279
Σ
suspension
29, 131, 253, 255
Σ
coproduct of family of sets
323
Σc
signature for classical, biased structures
78
χk
1-pasting diagram made up of k abutting arrows
236
Ω
loop space functor
47
ω-Gph
category of ω-graphs
347
ω-OC, ω-OP
category of globular operads with contraction
245
ω-Operad
category of globular operads
245
Wk-ω-Cat
category of weak ω-categories
238
Other symbols
( )0
objects of (multi)category
9, 35, 109, 282
( )1
arrows of (multi)category
9, 109
( )
action of multicategory on algebra
40, 44, 230
( )
mate
150
c
( )
globular set representing pasting diagram
224
( )(n)
restriction of globular set to n dimensions
348
( )∗
free monoid monad
220
( )∗
induced functor (various contexts)
18, 149, 169, 169
( )+
functor turning algebras into multicategories
117
( )+
slice of symmetric multicategory
208

367
E +
category of generalized graphs in E
164
T +
free T-multicategory monad
164
E +
E
category of generalized graphs with object-of-objects E
164
T +
E
free (T-multicategory with object-of-objects E) monad
164
[ , ]
functor (bi)category
4, 31
[ , ]
set of functions between sets
311
A(A, B)
hom-set in category
4
C(a1, . . . , an; a)
hom-set in plain multicategory
35
C((ax)x∈X; b)
hom-set in fat symmetric multicategory
282
◦
vertical composition of natural transformations
23
◦n
n-fold composition
93
(fn◦· · · ◦f1)
n-fold composite
93
θ◦(θ1, . . . , θn)
composite in plain multicategory or operad
35, 42
φ◦(θy)y∈Y
composite in fat symmetric multicategory
282
◦i
composition in ith place (‘circle-i’)
56
◦p
composition in n-category by gluing along p-cells
22
∗
horizontal composition
23, 27
(αn ∗· · · ∗α1)
n-fold horizontal composition
93
1
terminal object
4
1
identity map
22, 35, 43, 228, 282
⊗
tensor product in monoidal category
10
(a1 ⊗· · · ⊗an)
n-fold tensor of objects ai
67
⊗n
n-fold tensor product
67
⊗τ
‘tensor’ product of type τ
287
·
action of permutation or bijection on map
39, 283
E/E
slice category
8
T/h
slice of monad T by algebra h
122
A/X
category of elements of presheaf X on A
8
C/h
multicategory of elements of algebra h for C
159
|
trivial (unit) tree
59
(τ1, . . . , τn)
tree formed by joining τ1, . . . , τn
59
(T C, µC, ηC)
monad induced by T-multicategory C
119
E S
power of category
8
E(T )
bicategory or weak double category of T-spans
107, 136
n
n-element totally ordered set
10
[n]
(n + 1)-element totally ordered set
87
!
unique map to terminal object
4
e!
composition with map e
154
⌟
indicates that square is a pullback
5
∼=
isomorphism
4
≃
equivalence
6, 29
∼
equivalence under a system of equations
303
⊣
is left adjoint to
5
R
coend
137
∨
wedge of spaces
49
×
binary product
4
×C
pullback over object C
5
+
binary coproduct
4
Q
product
4
`
coproduct
4

368
Glossary of Notation

Index
A∞-
algebra, 133, 195, 198
category, 133, 195, 198, 275
operad, 266
space, xi, xv, 193, 198
Ab-category, 18, 174
action
of monoid, 105, 113, 114, 121
of monoidal category, 13, 122
of topological monoid, 122
Ad´amek, Jiˇr´ı, 322
Adams, Frank, 58
adjoint equivalence, 6
in bicategory, 28
adjunction, 5
in bicategory, 28
algebra
diﬀerential graded, 90, 195
for fc-multicategory, 132
Frobenius, xiii
for generalized multicategory, 119,
157–163
change of shape (induced func-
tor), 124, 172
for globular operad, 229–231, 239
tame, 249
for monad, 7
free, 8
induced functor, 149, 171
weak, 273
for plain multicategory, 40, 41
for plain operad, 43, 46
over ring, 46
for symmetric multicategory, 54
for 2-monad, 69
algebraic theory, 6, 7, 104–106, 152, 303
ﬁnitary, 311
free, 106, 115, 122
generalized multicategory as, 102
of n-categories, 259–266
operad of free algebras, 46
plain multicategory as, 40
plain operad as, 44–45, 302–308
on presheaf category, 307
tricategories are not, 258
2-dimensional, 97, 129
analyseur, 63
anamonoidal category, 92
arrow, vi, xi–xiii, 42, see also cell
shafts of, 20
Artin gluing, 214, 318
associahedron, 50, 192–194
associativity, xi, xxi, 195, see also n-
category, weak vs. strict
isomorphism, 11, 27
augmented simplex category D, 10, 167,
177, 188, 189
vs. simplex category, 89
Baez, John, xxii, 177, 206, 208
deﬁnition of n-category, 271–272
Batanin, Michael, 166, 215, 264, 276,
331
deﬁnition of n-category, 260–264
on globular operads, 223, 232, 240,
258
Baues, Hans-Joachim, 338
Beck, Jon, 148
Beilinson, Alexander, 63, 284, 286
B´enabou, Jean, 26, 63, 107
Berger, Clemens, 276
bicategory, see also fundamental 2-groupoid;
2-category
classical, 26
functor of, 29
modiﬁcation of, 30
transformation of, 30
degenerate, 27, 29–32
dual, 28
enrichment in, 175

370
INDEX
as fc-multicategory, 131
homotopy, 97, 275
lax, 92
nine categories of, 94
of rings, 28
Σ-, 96, 256, 289
of spans, 107, 111
unbiased, 93, 254–257
functor of, 94
modiﬁcation of, 95
transformation of, 95
unbiased vs. classical, 96, 254
vs. weak double category, 136, 142
biequivalence
classical, 31
unbiased, 95
bimodule, see module
bimodules construction, 125
bisimplicial set, 275
special, 276
Boardman, Michael, 58, 63, 274, 276
Borceux, Francis, 71
Borcherds, Richard, 176, 215
boundary
of level tree, 223
of pasting diagram, 220
braid, vii, xix, see also monoidal cate-
gory, braided
Breen, Lawrence, xxii
Brouwer’s ﬁxed point theorem, 315
Burroni, Albert, 109, 124, 215
Carboni, Aurelio, 145, 214, 215, 308,
319, see also strongly regular
theory
cardinals, 114
cartesian, 102, 169
Cartier, Pierre, 63
Cat-graph, 93
Cat-operad, 76, 186
category over, 95
as generalized operad, 116
three deﬁnitions of, 166
weak, 168
categorical algebra for operad, 50, 95,
132, 265, 266
categoriﬁcation, 91, 106, see also weak-
ening
presentation-sensitivity of, 75
category
cartesian, 102
degenerate, xviii
∆-, 276
discrete, 4, 167
of elements, 8
enriched, see enrichment
ﬁnite product, 12
free (fc), 106, 126, 164, 166, 318
free enriched, 255, 344–346
generalized multicategory of, 112
indiscrete, 4, 76, 239, 256
internal, 9, 24, 101, 111, 170
opposite, 4
pseudo-tensor, 286
quasi-, 276
slice, 119
suitable, 164
topological, 10
2-category of, 19
weak double category of, 136, 142
Cayley representation, 16, 123, 168
cell
of classical bicategory, 26
depiction of, 20
of fc-multicategory, 126
of globular set, 20
of n-category, v, xiii
of opetopic set, 201
of strict double category, 25
of unbiased bicategory, 92
of weak double category, 133
chain complex
homotopy DGA, 90
n-category from, 24
n-globular set from, 21
ω-category from, 24, 275
ω-category of complexes, xvi
vs. topological space, 28
2-category of complexes, 19
chain homotopy, xvi
change of shape, 169–174
Cheng, Eugenia, 199, 209–212, 215, 264
◦i (‘circle-i’), 55
classifying space, 193
club, 176
coalgebra, 143, see also opalgebra
cobordism, xvii–xviii, 138
coend, 137, 203, 240
coequalizer, 139
coherence, 14, 73–74

INDEX
371
axioms, 69, 71, 82
for bicategories, xxi, 243
classical, 31–32, 96
unbiased, 95, 96
on collection, 262
vs. composition, 233, 237, 260
on globular operad, 262
how not to prove, 15, 32
isomorphism, 11, 27
map, 12
on map of globular sets, 261
for monoidal categories, 287–298
classical, 14–17, 78
informal, 295
unbiased, 72, 78
for n-categories, xv
normal, 263
for tricategories, xvi, xxii, 248
coherent
algebra, 210
globular operad, 262
map, 262
cohomology, xxii
colax something, see something
colimit, 4
ﬁltered, 164
collection, 226
with contraction, 352
n-, 243
commutes with monad structures, 149
commuting of limit with colimit, 334
composition
◦i (‘circle-i’), 55
vs. coherence, 233, 237, 260
horizontal, 23, 244, 247
vertical, 23
compositions, system of, 260
computad, 213–214
cone, 202
congruence, 303
connected, 309
contractible, 234
globular set, 239
map of globular sets, 271
multicategory, 273–274
contraction
in Batanin’s sense, 262
on collection, 234
of edge of tree, 191
free, 352
on globular operad, 234, 238
on map of globular sets, 233, 234
on n-collection or n-operad, 243
notions of, 258, 262–263, 276
convex hull, 37
coproduct, 4
disjoint, 333
monad from, 104, 113, 121
preserved by monad, 254, 345
coprojection, 333
corolla, 60
cospan, 138
counit, 5
cover, strict, 72, 95
Crans, Sjoerd, xxii, 258
cubical
n-category, see n-tuple category
set, 25
cut, 56
deductive system, 56
degeneracy map, 196, 198, 199
degree of extension, 114
∆-category, 276
∆-space, xv, 89
dense, 267
desk-tidying, 210
diagram on internal category, 121
dioperad, 215
disjoint coproduct, 333
disk, 21, see also operad, little disks
in Joyal’s sense, 270
distributive law, 151, 256, 346
Dolan, James, xxii, 177, 206, 208
deﬁnition of n-category, 271–272
double category
strict, 25, 166
as fc-multicategory, 129
free, 107
weak, 133
vs. bicategory, 136, 142
of categories, 136, 142
degenerate, 135
as fc-multicategory, 129
of manifolds, 138
of monoids, 138
of rings, 135
of sets, 135
of topological spaces, 138
Drinfeld, Vladimir, 63, 284, 286

372
INDEX
dual
of bicategory, 28
of category, 4
of n-category, 28
duality
intervals vs. ordered sets, 270
operator, 112
Duskin, John, 276
Dwyer, William, 276
Eckmann–Hilton argument, xix, xxii, 11,
214
edge
contraction of, 191
functor, 195
internal, 191
Ehresmann, Charles, 32
Eilenberg, Samuel, 60
endomorphism
generalized multicategory, 161
globular operad, 239
plain multicategory, 41
plain operad, 46–47
symmetric operad, 284
enrichment, 175
of category
in bicategory, 175
in fc-multicategory, 175
in ﬁnite product category, 18,
344–346
in monoidal category, 17
in plain multicategory, 175
underlying category, 18
to deﬁne n-category, 18, 254, 346–
348
of functor, 17
of generalized multicategory, viii,
175
vs. internal, 18, 116
of n-categories, 266
of plain multicategory
in symmetric monoidal category,
39, 43, 116, 176
in T +-multicategory, 176
equivalence, see also biequivalence
in bicategory, 28–29
of categories, 6
of classical monoidal categories, 14
of deﬁnitions of n-category, vii
easy, 271
local, 31
of n-categories, vii, 271
of unbiased monoidal categories, 72
essentially surjective on objects, 6, 31
‘(E, T)-multicategory’ etc., 110
´etirement, 264
face map, 196, 198, 199
factorization of map, 191
familial representability
of free strict ω-category functor,
224, 318, 348
of functor into presheaf category,
316
of functor into Set, 309
of monad on power of Set, 321
of monad on Set, 312
vs. strong regularity, 314
fc-graph, 126
fc-multicategory, viii, 117, 126, 164, see
also double category, weak
algebra for, 132
from bicategory, 131
of categories, 142
degenerate, 129
enrichment in, 175
from monoidal category, 131
of monoids, 142
non-degenerate, 132
nullary composite in, 127
from plain multicategory, 131
representable, 132
of rings, 128, 142
of sets, 129
from strict double category, 129
vertically discrete, 130
from weak double category, 129
fc-operad, 122, 131, 255
ﬁbration
discrete, 8, 160
discrete opﬁbration, 9, 42, 113, 158
Grothendieck, 8
of multicategories, 87, 97
ﬁbred product, 4
ﬁelds, category of, 114
ﬁller, see horn
ﬁnal object, 4
ﬁnitary, 164, 311, 322
ﬁxed point, 47
ﬂab, 274

INDEX
373
ﬂabby n-category, 265–266
foundations, 4
fractal, 47
Frobenius algebra, xiii
full and faithful, 168
functor
analytic, 302
bicategory, 31
cartesian, 102
category, 4
of multicategories, 61
of classical bicategories, 29
enriched, 17
ﬁnitary, 164
of monoidal categories, see monoi-
dal functor
of Σ-bicategories, 96
of unbiased bicategories, 94
fundamental
1-groupoid, 10
2-groupoid, xix, 28, 95
3-groupoid, xvi
n-groupoid, 265–266
ω-groupoid, xiv, 202–205, 240, 274
Γ-space, see ∆-space
Gan, Wee Liang, 215
generalized graph (T-graph), 109
generalized multicategory, 109
from algebra, 117
algebra for, 119, 157–163
change of shape, 169–174
of elements, 159, 273
endomorphism, 161
enriched, viii, 175
equivalent deﬁnitions of, 152–157
free, 163–165, 333–338
for generalized multicategories, 211
indiscrete, 175
informal deﬁnition of, vii
map of, 110
module over, 143
for operads, 122
vs. structured category, 165–168,
171
vs. symmetric multicategory, see
multicategory, symmetric vs.
generalized
terminal, 122, 159
transformation of, 144
generalized operad, 109, see also gener-
alized multicategory
free, 178
informal deﬁnition of, vi
geometric realization
of globular set, 240
of opetopic set, 203–205
of simplicial set, 203
Getzler, Ezra, 63
Ginzburg, Victor, 178, 215
globular multicategory, 273–274
globular operad, 117, 122, 225
algebra for, 229–231, 239
tame, 249
composition in, 226, 231
with contraction, 238, 351–353
endomorphism, 239
identities in, 228, 231
indiscrete, 246
informal deﬁnition of, ix
n-, see n-globular operad
vs. plain operad, 226
restriction of, 246
terminal, 239
globular set, 24, 107, see also n-globular
set
contractible, 239
indiscrete, 246
n-dimensional, 251
reﬂexive, 261
restriction of, 246
gluing, 214, 318
Godement law, see interchange
Gordon, Robert, 17, 31, 195, 248, 257
Grandis, Marco, 145
graph, see also n-graph
directed, 19, 25, 106
geometric realization of, 205
indiscrete, 239
enriched, 17, 255
generalized (T-), 109
input-output, 339
of tree, 189, 339–341
Gray-category, 247, 258
Grothendieck, Alexander, xxii
group
internal, 9
topological, xv, 7
groupoid, xv, 275, see also fundamen-
tal; n-groupoid; ω-groupoid

374
INDEX
handedness, xvi, 31, 248
Hermida, Claudio, 98, 124, 212
herring, red, 89
‘higher-dimensional category’, xiii
hollow, 272
Hom-functor, 94
hom-set, 4
homology, xxii, 28
homotopy
classes, 19
group, xix
of sphere, xxi
higher, xv, xvi
vs. homology, 28
injective on, 234, 243, 273
lifting, 233
type, xv, 274
of 0-categories, 266
homotopy-algebraic structure, 90, 98,
266, see also A∞; loop space;
monoidal category, homotopy
horn
ﬁller for, 268, 269, 272, 275
inner, 268
Hutchinson, John, 47
identities, exclusion of, see pseudo-operad
∞-category, see ω-category
injective map of trees, 196, 198
input type, vi, 101
interchange, 10, 22, 27, 307
internal
algebraic structure, 9–10
vs. enriched, 18, 116
invertibility, xv, 113, 274
irrelevance of signature, 79, 96
isomorphism, 4
Jibladze, Mamuka, 338
Johnstone, Peter, 104, 214, 215, 308,
319, see also strongly regular
theory
Joyal, Andr´e, 15–17, 74, 302
deﬁnition of n-category, 269–270
Kan, Daniel, 276
complex, 276
extension, 203
Kapranov, Mikhail, xxii, 63, 178, 215
Kasangian, Stefano, 145
Kelly, Max, 97, 112, 148, 176, 351
Khovanov, Mikhail, xvii, xxii
Kleisli
bicategory of spans, 124
category, 90
knot, xi, xxii
Koch curve, 48
Kontsevich, Maxim, 38, 215
Koslowski, J¨urgen, 215
Lambek, Joachim, 56
large, 4
Lawrence, Ruth, xxii
lax something, see something, lax
Lazard, Michel, 63
left-handed, see handedness
Lewis, Geoﬀrey, 16
Lie algebra, 45, 307
limit, 4
connected, 309
weak, 348
local equivalence, 31
localization, 254
locally cartesian closed, 161
locally groupoidal structures, 274–276
loop space, xv, 12, 47–51, 89
generalized multicategory from, 113
machine, 274
m-monoidal n-category, xx
Mac Lane, Saunders, 14, 17, 58, 60
magma, 264
Makkai, Michael, 92, 212, 214, 215, 276
manifold, 267
alternative deﬁnition of, 268
with corners, xvii–xviii
monoidal category of, 46
operad of, 46, 168
weak double category of, 138
Manin, Yuri, 215
many in, many out, 168, 178, 212–214
map, see arrow; cell
Markl, Martin, 43
mate, 150, 157
matrix, 145, 268
May, Peter, 63, 274
deﬁnition of n-category, 266
model category, 266
modiﬁcation
classical, 30

INDEX
375
unbiased, 95
module
bimodule over rings, 28, 128, 142
over categories, 61, 136
over generalized multicategories, 143
over monoids, 139
over multicategories, 61
over ring, 7, 8, 12, 36, 41
monad, 6–8, 148–152
in bicategory, 28
cartesian, 103, 301–331
coproduct-preserving, 254, 345
familially representable, 312, 321
ﬁnitary, 164
gluing of, see distributive law
map of, 148–149
adjunction between, 171
cartesian, 169, 170
operadic, 302, 326, 328
sliced by algebra, 122
strongly regular, 302
suitable, 164
transformation of, 149
2-category of, 149
monadic adjunction, 8, 258
monads construction, 125, 140
monoid, 5
action of, 105, 113, 114, 121
with anti-involution, 104, 112, 314,
326
commutative, 11, 279–281, 323–327,
see also Eckmann–Hilton
fat, 279, 324
free, 103
operad from, 45, 183
unbiased, 281
as degenerate category, xviii
free, 5, 7, 103, 111, 334
with involution, 104, 112
in monoidal category, 12, 18, 89,
111
in multicategory, 40
as operad-algebra, 44
topological, 47, 89
free, 106, 116, 122, 265
monoidal category, see also bicategory
braided, xi, xix, xxii, 17
degenerate, vii, xxi
cartesian, 12
classical, 11, 294–298
deﬁnitions of, 92
degenerate, xviii, xxii, 11, 45
as fc-multicategory, 131
homotopy, 89, 271
lax, 67, 71
vs. multicategory, 56–58, 165–168,
173, 174, 205, see also multi-
category, underlying
nine categories of, 71
Σ-, 75, 78, 287–298
strict, 10, 165
free, 106, 122
sylleptic, xxi
symmetric, xx
enrichment in, 39
free strict, 106, 112, 116
unbiased, 66, 68, 91, 289–294
unbiased vs. classical, 71, 74, 75,
81, 83
monoidal functor
classical, 12–13
Σ-, 78
unbiased, 70
monoidal globular category, 166, 232
monoidal n-category, xx, xxi
monoidal transformation
classical, 14
unbiased, 71
Moore loop, 95
morphism, see arrow; cell
multicategory, 35, see also generalized
multicategory; monoidal cat-
egory; operad
algebra for, 40, 41, 118, 121
contractible, 273–274
of elements, 159
endomorphism, 41
enhanced, 212
enriched, see enrichment
as fc-multicategory, 131
free, 58, 336
functor categories for, 61
generalized, see generalized multi-
category
as generalized multicategory, 111
history, 63
informal deﬁnition of, vi
map of, 39
for maps of operads, 51
vs. operad, 42–43

376
INDEX
plain, 101
poset-like, 37
relaxed, 116, 176
representable, 84, 97, 175, 206, 208
representation of, 84
of sets, 36
suspension of, 131
Swiss cheese, 38, 63
symmetric, 39, 51–55, 282–286
algebra for, 54
enhanced, 212
fat, 282, 327
for multicategories, 211
for operads, 54, 209
symmetric vs. generalized, 116, 122,
184–185, 210–211, 327–331
multicategory for multicategories,
55, 112
T-, see generalized multicategory
terminal, 40, 209
transformation of, 61
2-category of, 61
underlying, 36, 37, 40, 45, 54, 82–
87, see also monoidal category
multigraph, 58
multiple outputs, see many in, many
out
multiplication of monad, 6
multisimplicial set, 270
multitope, 212
n-ary, 42
n-category
from chain complex, 24
deﬁnitions of, xv, xxii, 122, 205,
259–260
Batanin’s, 260–263
comparison, vii, 65, 169
contractible multicategory, 273–
274
informal, v, xiii
Joyal’s, 269–270
May’s, 266
opetopic, 207, 271–272
Penon’s, 263–264
Simpson’s, 270–271, 275
Street’s, 272–273
Tamsamani’s, 270–271, 275
Trimble’s, 265–266
degenerate, xviii–xxii
enriched, 266
ﬂabby, 265–266
locally groupoidal, 274–276
(n + 1)-category of, 19, 29
stable, 210
strict, 19, 22
discrete, 251
free, 107, 243, 343–350
weak, 245
discrete, 252
for varying n, 245–254
weak vs. strict, ix, xv–xvi, 28, 251,
253
n-coherent algebra, 210
n-cubical set, 25
n-fold
composition, 93
horizontal composition, 134
tensor, 67
n-functor, strict, 19, 22
n-globular operad, 243
initial with contraction, 245
n-globular set, 19
from chain complex, 21
from space, 21
n-graph, 23, 346–350
n-groupoid, xi, see also fundamental
n-operad, see n-globular operad
n-tuple category
degenerate, 26, 271
strict, 24
free, 107, 117
weak, 117
n-vector space, xviii, xxii
natural number, x
natural transformation, see transforma-
tion
nerve, 267–269
categoriﬁed, 91
of category, 87, 97, 259
general notion, 268
of n-category, 268–273
nested sequence, 333
non-abelian 4-cocycle, 195
normal coherence, 263
nullary
arrow, 114, 121, 286
composite, x, 127, 221
operation, 63

INDEX
377
object, 20, see also cell
objects functor, 4
ω-category, see also n-category
from chain complex, 24
deﬁnitions of, 122
informal deﬁnition of, xiv
opetopic set from, 205
strict, 24
free, 107, 166, 220, 272, 343–
350, see also globular operad
operad for, 231, 239
theory of, 307
unbiased, 235–237
weak, 238
map of, 238
theories of, 235
ω-functor, strict, 238
ω-graph, 347
ω-groupoid, xxii, 274, see also funda-
mental
ω-magma, 264
1-category, vi, xiii, 255
opalgebra, 160, see also coalgebra
operad, see also generalized operad; monad,
operadic; multicategory
algebra for, 43, 46
as algebraic theory, 44–45, 302–308
category over, 50, 132
of classical trees, 60
coloured, 43
from commutative monoid, 45
with contraction, see globular op-
erad, with contraction
from coproducts, 37, 46
of curves, 46
cyclic, 63
endomorphism, 46–47, 284
of ﬁnite planar sequences, 47
free, 105, 114, 122, 165
of free algebras, 46
generalized, see generalized operad
as generalized operad, 111
globular, see globular operad
history, 63
homotopy-algebra for, 98
informal deﬁnition of, vi
initial, 209
little disks, 38, 49, 284
little intervals, 52, 122
modular, 63
of orders, 52, 284
of path reparametrizations, 50, 133,
265
plain, 101
pseudo-, 56, 63
suspension of, 131
Swiss cheese, 38, 63
symmetric, 34, 43, 51–55, 307
fat, 284
in symmetric monoidal category,
43, 176, 307
symmetric vs. generalized, 112
of symmetries, 51, 54, 209, 284
T-, see generalized operad
terminal, 44
topological, 116
of trees, 59
typed, 208
universal for loop spaces, 49, 241
usage of word, ix, 34
operation, vi, 42
opetope, 115, 131, 179, 209
category of, 188, 199
generalized, 210, 211
proliferation of, 209, 211
pronunciation, 179
opetopic
monad, 176, 179, 302, 326–328
set, 200
deﬁnitions of, 199
geometric realization of, 203–205
from strict ω-category, 205
from topological space, 202–205
opﬁbration, see ﬁbration
opposite category, 4
order, see also simplex category; aug-
mented simplex category
generalized, 37
non-canonical, 184, 215, 245, see
also handedness
operad of orders, 52, 284
oriental, 272
parallel, 234
Par´e, Robert, 145
pasting diagram, 185, 189
cubical, 270
globular, 220, 269, 348
binary, 260
degenerate, 220, 221, 225

378
INDEX
via free monoids, 220
globular set from, 224
labelled, 224, 225, 229–230
source and target inclusions, 225
unit, 228
opetopic, 185, 327
category of, 188, 197–199
labelled, 201
ordering of, 184, 215, 327
structured category of, 188
Pasting Lemma, 5
path, xv, 28, see also operad of path
reparametrizations
in graph, 340
vs. loop, 50, 122
P´eano curve, 48
Penon, Jacques
deﬁnition of n-category, 263–264
pentagon, xi, 11, 193, 195
periodic table, xx, xxii
plain, 101
Plato, 33, 50
plausible, 79
plus construction ( )+, 117, 123, 167,
see also slice
pointed set, 44, 113, 121
polycategory, 215
poset, see order
power of category, 8
power of Set, 319–331
Power, John, 212, see also tricategory
pre-universal
cell of n-category, 207
map in multicategory, 84, 206
precontraction, 243
presentation, sensitivity of categoriﬁca-
tion to, 75
presheaf, 8–9
category, 9
with properties, 259, 268
with structure, 259
PRO, 57
generalized, 168
product, 4
PROP, see PRO
properties vs. structure, 259
pseudo-operad, 56, 63
pseudo-tensor category, 286
pullback, 4, 309
choice of, 108, 109, 117
quasi-category, 276
rectiﬁcation, see coherence
reduction law, 208
reﬂexive globular set, 261
relaxed multicategory, 116, 176
representable functor, 308–309, see also
familial representability
representation theorem, 16, 123, 167
restriction, 246, 252, 348
Riemann surface, 46, 168
roof, see span
root of tree, 59, 341
Rosick´y, Jiˇr´ı, 322
Roytenberg, Dmitry, 124
Salvatore, Paolo, 49
Schanuel, Stephen, 215
Schw¨anzl, Roland, 276
Segal, Graeme, xv, 89, 274
category, 275
map, 88
self-similarity, 47
semigroup, 44
free, 113, 121
serially commutative, 240
sesquicategory, 244, 247
Set, power of, 319–331
Shnider, Steve, 43
Shum, Mei Chee, xxii
Sierpi´nski gasket, 48
Σ-bicategory, 96, 256, 289
Σ-monoidal category, 75, 78, 287–298
signature, 75, 303
irrelevance of, 79, 96
simplex category ∆, 87, 259, 268, 270,
see also augmented simplex
category
vs. augmented simplex category, 89
ω-dimensional analogue of, 269
simplicial object, 87, 97
simplicial set, 87, 200
bi-, 275
special, 276
multi-, 270
n-category as, 272–273
ω-category from, 275
stratiﬁed, 272
simplicial space, xv, 89
Simpson, Carlos, xxii, 98

INDEX
379
deﬁnition of n-category, 270–271,
275
singularity, 176
slice
category, 8, 152, 156
of generalized multicategory by al-
gebra, 159, 210
of monad by algebra, 122
of symmetric multicategory, 208,
210
of symmetric multicategory by al-
gebra, 210
small, 4
Smith, Jeﬀrey, 276
Snydal, Craig, 176
Soibelman, Yan, 176, 215
source, 20
embedding, 200
span, 107, 111, 130, 135
special, xv, 89, 276
sphere, xvi
stabilization, xviii–xxi, 210
Stabilization Hypothesis, xxii
stable under pullback, 333
Stasheﬀ, Jim, xv, 43, 50, 63, 192, 193
Street, Ross, xxii, 148, 213, 244, 276,
see also tricategory
on coherence for monoidal categories,
15–17, 74
deﬁnition of n-category, 272–273
stretching, 264
strict something, see something, strict
strongly regular theory, 45, 104–106, 121,
302, 303
vs. familially representable monad,
314
structure vs. properties, 259
structured category, 165
change of shape, 171
vs. generalized multicategory, 165–
168, 171
for opetopic monad, 186
of pasting diagrams, 188
weak, 168
suitable, 164, 334
sum, 4
surjective map of trees, 196, 198
suspension, 255–257
of globular pasting diagram, 253
of monoidal category, 29
of plain multicategory, 131
of plain operad, 131
symmetric group, 51
symmetry, see handedness
system of compositions, 260
Szabo, Manfred, 215
T-graph, 109
T-multicategory, see generalized multi-
category
Tn, see opetopic monad
T-operad, see generalized operad
T-structured category, see structured cat-
egory
tame
algebra for globular operad, 249
map of n-globular sets, 243
n-collection or n-operad, 243
Tamsamani, Zouhair, 98
deﬁnition of n-category, 270–271,
275
target, 20
embedding, 200
tensor
over generalized multicategory, 144
over ring, 28, 82
terminal object, 4, 103
thin, 273
3-category, see also tricategory
deﬁnitions of, 257–258
degenerate, vii, xix
3-dimensional structures, 213
Tillmann, Ulrike, xxii
To¨en, Bertrand, 98, 276
Tonks, Andy, 338
top dimension, 243–245, 270, see also
tame
topological category, 10
topological quantum ﬁeld theory, xii,
xiii, xvii–xviii, xxii
topological space
vs. chain complex, 28
n-category from, see fundamental
n-globular set from, 21
opetopic set from, 202–205
2-category of spaces, 19
topology vs. algebra, 8
transformation
cartesian, 102, 309, 311, 320
of classical bicategories, 30

380
INDEX
enriched, see enrichment
of familially representable functors,
311, 320
of generalized multicategories, 144
of monads, 149
of monoidal categories, see monoi-
dal transformation
of plain multicategories, 61
of unbiased bicategories, 95
tree, 290–294
Cat-operad of, 193
category of, 189
classical, 60, 83, 294–298
combed, 208
combinatorial, 340
diﬀerent types of, 223
edge functor, 195
as graph, 189, 339–341
with leaves and vertices labelled,
106
with leaves labelled, 105, 115, 122
level, 223
map of, 189–197
injective, 196, 198
surjective, 196, 198
operad of, 59, 256
stable, 192, 198
vertex functor, 195
with vertices labelled, 105, 114, 181
with vertices ordered, 54, 209
triangle
coherence axiom, 11
identities, 5, 28
tricategory, 17, 31, 195, 248, see also
3-category
non-algebraic nature of, 257–258
Trimble, Todd, 50, 265–266
triple, see monad
truncation, see restriction
2-category, see also bicategory
of categories, 19
degenerate, xviii
strict, 19
2-monad, 69
unary, 36
unbiased something, see something, un-
biased
unit
of adjunction, 5
isomorphism, 11, 27
of monad, 6
unitrivalent, see tree, classical
universal, see also pre-universal
cell of n-category, 207, 272
map in multicategory, 86, 206
preservation, 86, 271
vector space, 268
Verity, Dominic, 273
vertex
addition of, 191
algebra, 176
functor, 195
Vezzosi, Gabriele, 98, 276
Voevodsky, Vladimir, xxii
Vogt, Rainer, 58, 63, 274, 276
Voronov, Alexander, 38
Walters, Robert, 145
weak something, see something, weak
weakening, 88, 106, 112
presentation-sensitivity of, 75
for theory of n-categories, 260, 268,
273
weakly initial, 262
Weber, Mark, 103, 331
whiskering, 244
wide pullback, 309
Yoneda
embedding, 8, 32
Lemma, 8, 137
Zawadowski, Marek, 214, 276
0-category, vi, xiii, 255

