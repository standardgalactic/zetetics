
Simulation of Dynamic 
Systems with 
MATLAB® and Simulink®
Third Edition


Simulation of Dynamic 
Systems with 
MATLAB® and Simulink®
Third Edition
Harold Klee and Randal Allen

MATLAB® and Simulink® are a trademark of The MathWorks, Inc. and is used with permission. The MathWorks does 
not warrant the accuracy of the text or exercises in this book. This book’s use or discussion of MATLAB® and Simu­
link® software or related products does not constitute endorsement or sponsorship by The MathWorks of a particular 
pedagogical approach or particular use of the MATLAB® and Simulink® software.
CRC Press
Taylor & Francis Group
6000 Broken Sound Parkway NW, Suite 300
Boca Raton, FL 33487-2742
© 2018 by Taylor & Francis Group, LLC
CRC Press is an imprint of Taylor & Francis Group, an Informa business
No claim to original U.S. Government works
Printed on acid-free paper
International Standard Book Number-13: 978-1-4987-8777-2 (Hardback)
This book contains information obtained from authentic and highly regarded sources. Reasonable efforts have been 
made to publish reliable data and information, but the author and publisher cannot assume responsibility for the 
validity of all materials or the consequences of their use. The authors and publishers have attempted to trace the 
copyright holders of all material reproduced in this publication and apologize to copyright holders if permission to 
publish in this form has not been obtained. If any copyright material has not been acknowledged please write and let 
us know so we may rectify in any future reprint.
Except as permitted under U.S. Copyright Law, no part of this book may be reprinted, reproduced, transmitted, or 
utilized in any form by any electronic, mechanical, or other means, now known or hereafter invented, including pho­
tocopying, microfilming, and recording, or in any information storage or retrieval system, without written permission 
from the publishers.
For permission to photocopy or use material electronically from this work, please access www.copyright.com (http://
www.copyright.com/) or contact the Copyright Clearance Center, Inc. (CCC), 222 Rosewood Drive, Danvers, MA 
01923, 978-750-8400. CCC is a not-for-profit organization that provides licenses and registration for a variety of users. 
For organizations that have been granted a photocopy license by the CCC, a separate system of payment has been 
arranged.
Trademark Notice: Product or corporate names may be trademarks or registered trademarks, and are used only for 
identification and explanation without intent to infringe.
Library of Congress Cataloging-in-Publication Data
Names: Klee, Harold, author. | Allen, Randal, 1964- author.
Title: Simulation of dynamic systems with MATLAB and Simulink / Harold Klee and Randal Allen.
Description: Third edition. | Boca Raton : Taylor & Francis, CRC Press, 2018.
| Includes bibliographical references and index.
Identifiers: LCCN 2017035511| ISBN 9781498787772 (hardback) | ISBN 9781315154176 (ebook)
Subjects: LCSH: Computer simulation. | SIMULINK. | MATLAB.
Classification: LCC QA76.9.C65 K585 2018 | DDC 003/.3--dc23
LC record available at https://lccn.loc.gov/2017035511
Visit the Taylor & Francis Web site at
http://www.taylorandfrancis.com
and the CRC Press Web site at
http://www.crcpress.com

To Andrew, Cassie, and in loving memory of their 
mother and my devoted wife, Laura.
Harold Klee
To my wife, Christine, whose inner beauty radiates with the warmth of a 
sunny day at the beach. Thank you for your everlasting love and support.
Randal Allen


vii
Contents
Foreword ........................................................................................................................................ xiii
Preface..............................................................................................................................................xv
About the Authors............................................................................................................................xix
Chapter 1	
Mathematical Modeling................................................................................................1
1.1	
Introduction........................................................................................................1
1.1.1	
Importance of Models...........................................................................1
1.2	
Derivation of A Mathematical Model................................................................4
1.3	
Difference Equations........................................................................................10
1.4	
First Look at Discrete-Time Systems...............................................................19
1.4.1	
Inherently Discrete-Time Systems......................................................19
1.5	
Case Study: Population Dynamics (Single Species).........................................22
Chapter 2	
Continuous-Time Systems...........................................................................................29
2.1	
Introduction......................................................................................................29
2.2	
First-Order Systems..........................................................................................29
2.2.1	
Step Response of First-Order Systems................................................30
2.3	
Second-Order Systems.....................................................................................36
2.3.1	
Conversion of Two First-Order Equations to a Second-Order 
Model.................................................................................................41
2.4	
Simulation Diagrams........................................................................................45
2.4.1	
Systems of Equations.......................................................................... 51
2.5	
Higher-Order Systems......................................................................................54
2.6	
State Variables..................................................................................................57
2.6.1	
Conversion from Linear State Variable Form to Single 
Input–Single Output Form..................................................................62
2.6.2	
General Solution of the State Equations.............................................63
2.7	
Nonlinear Systems............................................................................................66
2.7.1	
Friction................................................................................................68
2.7.2	
Dead Zone and Saturation...................................................................71
2.7.3	
Backlash..............................................................................................72
2.7.4	
Hysteresis............................................................................................72
2.7.5	
Quantization........................................................................................76
2.7.6	
Sustained Oscillations and Limit Cycles............................................77
2.8	
Case Study: Submarine Depth Control System................................................85
Chapter 3	
Elementary Numerical Integration.............................................................................. 91
3.1	
Introduction...................................................................................................... 91
3.2	
Discrete-Time System Approximation of a Continuous First-Order 
System........................................................................................................ 92
3.3	
Euler Integration...............................................................................................98
3.3.1	
Explicit Euler Integration....................................................................99
3.3.2	
Implicit Euler Integration..................................................................100
3.4	
Trapezoidal Integration..................................................................................104

viii
Contents
3.5	
Discrete Approximation of Nonlinear First-Order Systems.......................... 112
3.6	
Discrete State Equations................................................................................. 116
3.7	
Improvements to Euler Integration.................................................................127
3.7.1	
Improved Euler Integration...............................................................127
3.7.2	
Modified Euler Integration................................................................ 131
3.7.3	
Discrete-Time System Matrices........................................................ 132
3.8	
Case Study: Vertical Ascent of a Diver.......................................................... 146
Chapter 4	
Linear Systems Analysis........................................................................................... 155
4.1	
Introduction.................................................................................................... 155
4.2	
Laplace Transform.......................................................................................... 155
4.2.1	
Properties of the Laplace Transform.................................................156
4.2.2	
Inverse Laplace Transform................................................................ 163
4.2.3	
Laplace Transform of the System Response.....................................164
4.2.4	
Partial Fraction Expansion................................................................ 166
4.3	
Transfer Function............................................................................................ 173
4.3.1	
Impulse Function............................................................................... 173
4.3.2	
Relationship between Unit Step Function and Unit Impulse 
Function............................................................................................. 173
4.3.3	
Impulse Response.............................................................................. 175
4.3.4	
Relationship between Impulse Response and Transfer Function....... 179
4.3.5	
Systems with Multiple Inputs and Outputs....................................... 182
4.3.6	
Transformation from State Variable Model to Transfer Function...... 190
4.4	
Stability of Linear Time Invariant Continuous-Time Systems......................194
4.4.1	
Characteristic Polynomial................................................................. 195
4.4.2	
Feedback Control System..................................................................200
4.5	
Frequency Response of LTI Continuous-Time Systems................................206
4.5.1	
Stability of Linear Feedback Control Systems Based 
on Frequency Response..................................................................... 216
4.6	
z-Transform.....................................................................................................222
4.6.1	
Discrete-Time Impulse Function.......................................................226
4.6.2	
Inverse z-Transform...........................................................................232
4.6.3	
Partial Fraction Expansion................................................................233
4.7	
z-Domain Transfer Function...........................................................................242
4.7.1	
Nonzero Initial Conditions................................................................243
4.7.2	
Approximating Continuous-Time System Transfer Functions..........245
4.7.3	
Simulation Diagrams and State Variables.........................................250
4.7.4	
Solution of Linear Discrete-Time State Equations............................256
4.7.5	
Weighting Sequence (Impulse Response Function).......................... 261
4.8	
Stability of LTI Discrete-Time Systems.........................................................267
4.8.1	
Complex Poles of H(z)....................................................................... 271
4.9	
Frequency Response of Discrete-Time Systems............................................280
4.9.1	
Steady-State Sinusoidal Response.....................................................280
4.9.2	
Properties of the Discrete-Time Frequency Response Function........282
4.9.3	
Sampling Theorem............................................................................287
4.9.4	
Digital Filters....................................................................................293
4.10	 Control System Toolbox.................................................................................300
4.10.1	 Transfer Function Models.................................................................301
4.10.2	 State-Space Models...........................................................................302
4.10.3	 State-Space/Transfer Function Conversion.......................................303

ix
Contents
4.10.4	 System Interconnections...................................................................305
4.10.5	 System Response...............................................................................307
4.10.6	 Continuous-/Discrete-Time System Conversion...............................309
4.10.7	 Frequency Response.......................................................................... 311
4.10.8	 Root Locus........................................................................................ 313
4.11	 Case Study: Longitudinal Control of an Aircraft........................................... 319
4.11.1	 Digital Simulation of Aircraft Longitudinal Dynamics.................... 333
4.11.2	 Simulation of State Variable Model.................................................. 335
4.12	 Case Study: Notch Filter for Electrocardiograph Waveform.........................338
4.12.1	 Multinotch Filters.............................................................................. 339
Chapter 5	
Simulink..................................................................................................................349
5.1	
Introduction....................................................................................................349
5.2	
Building a Simulink Model............................................................................349
5.2.1	
The Simulink Library.......................................................................349
5.2.2	
Running a Simulink Model............................................................... 353
5.3	
Simulation of Linear Systems........................................................................ 357
5.3.1	
Transfer Fcn Block............................................................................ 357
5.3.2	
State-Space Block..............................................................................363
5.4	
Algebraic Loops............................................................................................. 371
5.4.1	
Eliminating Algebraic Loops............................................................373
5.4.2	
Algebraic Equations.......................................................................... 375
5.5	
More Simulink Blocks....................................................................................380
5.5.1	
Discontinuities...................................................................................385
5.5.2	
Friction..............................................................................................386
5.5.3	
Dead Zone and Saturation.................................................................387
5.5.4	
Backlash............................................................................................389
5.5.5	
Hysteresis..........................................................................................389
5.5.6	
Quantization...................................................................................... 391
5.6	
Subsystems.....................................................................................................394
5.6.1	
PHYSBE............................................................................................395
5.6.2	
Car-Following Subsystem.................................................................396
5.6.3	
Subsystem Using Fcn Blocks............................................................398
5.7	
Discrete-Time Systems...................................................................................402
5.7.1	
Simulation of an Inherently Discrete-Time System..........................403
5.7.2	
Discrete-Time Integrator...................................................................406
5.7.3	
Centralized Integration.....................................................................409
5.7.4	
Digital Filters.................................................................................... 412
5.7.5	
Discrete-Time Transfer Function...................................................... 414
5.8	
MATLAB and Simulink Interface.................................................................422
5.9	
Hybrid Systems: Continuous- and Discrete-Time Components..................... 431
5.10	 Monte Carlo Simulation................................................................................. 435
5.10.1	 Monte Carlo Simulation Requiring Solution of 
a Mathematical Model....................................................................... 439
5.11	 Case Study: Pilot Ejection..............................................................................448
5.12	 Case Study: Kalman Filtering........................................................................ 453
5.12.1	 Continuous-Time Kalman Filter....................................................... 453
5.12.2	 Steady-State Kalman Filter...............................................................454
5.12.3	 Discrete-Time Kalman Filter............................................................454
5.12.4	 Simulink Simulations........................................................................ 455

x
Contents
5.12.5	 Summary...........................................................................................468
5.13	 Case Study: Cascaded Tanks with Flow Logic Control.................................469
Chapter 6	
Intermediate Numerical Integration.......................................................................... 475
6.1	
Introduction.................................................................................................... 475
6.2	
Runge–Kutta (RK) (One-Step Methods)........................................................ 475
6.2.1	
Taylor Series Method........................................................................ 476
6.2.2	
Second-Order Runge–Kutta Method................................................477
6.2.3	
Truncation Errors.............................................................................. 479
6.2.4	
High-Order Runge–Kutta Methods...................................................484
6.2.5	
Linear Systems: Approximate Solutions Using RK Integration.......486
6.2.6	
Continuous-Time Models with Polynomial Solutions.......................488
6.2.7	
Higher-Order Systems.......................................................................490
6.3	
Adaptive Techniques......................................................................................500
6.3.1	
Repeated RK with Interval Halving..................................................500
6.3.2	
Constant Step Size (T = 1 min).........................................................505
6.3.3	
Adaptive Step Size (Initial T = 1 min).............................................505
6.3.4	
RK–Fehlberg.....................................................................................505
6.4	
Multistep Methods.......................................................................................... 512
6.4.1	
Explicit Methods............................................................................... 513
6.4.2	
Implicit Methods............................................................................... 515
6.4.3	
Predictor–Corrector Methods........................................................... 518
6.5	
Stiff Systems...................................................................................................523
6.5.1	
Stiffness Property in First-Order System..........................................524
6.5.2	
Stiff Second-Order System...............................................................526
6.5.3	
Approximating Stiff Systems with Lower-Order Nonstiff 
System Models.................................................................................. 529
6.6	
Lumped Parameter Approximation of Distributed Parameter Systems.........546
6.6.1	
Nonlinear Distributed Parameter System.........................................550
6.7	
Systems with Discontinuities......................................................................... 555
6.7.1	
Physical Properties and Constant Forces Acting on 
the Pendulum Bob.............................................................................563
6.8	
Case Study: Spread of an Epidemic............................................................... 573
Chapter 7	
Simulation Tools........................................................................................................ 581
7.1	
Introduction.................................................................................................... 581
7.2	
Steady-State Solver.........................................................................................582
7.2.1	
Trim Function....................................................................................584
7.2.2	
Equilibrium Point for a Nonautonomous System..............................586
7.3	
Optimization of Simulink Models..................................................................596
7.3.1	
Gradient Vector.................................................................................605
7.3.2	
Optimizing Multiparameter Objective Functions 
Requiring Simulink Models..............................................................607
7.3.3	
Parameter Identification.................................................................... 610
7.3.4	
Example of a Simple Gradient Search.............................................. 611
7.3.5	
Optimization of Simulink Discrete-Time System Models................620
7.4	
Linearization..................................................................................................630
7.4.1	
Deviation Variables........................................................................... 631
7.4.2	
Linearization of Nonlinear Systems in State Variable Form............639

xi
Contents
7.4.3	
Linmod Function...............................................................................643
7.4.4	
Multiple Linearized Models for a Single System..............................648
7.5	
Adding Blocks to The Simulink Library Browser.........................................659
7.5.1	
Introduction.......................................................................................659
7.5.2	
Summary...........................................................................................665
7.6	
Simulation Acceleration.................................................................................665
7.6.1	
Introduction.......................................................................................665
7.6.2	
Profiler...............................................................................................667
7.6.3	
Summary...........................................................................................668
7.7	
Black Swans....................................................................................................668
7.7.1	
Introduction.......................................................................................668
7.7.2	
Modeling Rare Events.......................................................................668
7.7.3	
Measurement of Portfolio Risk.........................................................669
7.7.4	
Exposing Black Swans...................................................................... 673
7.7.4.1	
Percent Point Functions (PPFs).......................................... 673
7.7.4.2	
Stochastic Optimization.................................................... 673
7.7.5	
Summary........................................................................................... 676
7.7.6	
Acknowledgements........................................................................... 676
7.7.7	
References......................................................................................... 676
7.7.8	
Appendix—Mathematical Properties of the Log-Stable 
Distribution........................................................................................ 676
7.8	
The SIPmath Standard...................................................................................677
7.8.1	
Introduction.......................................................................................677
7.8.2	
Standard Specification.......................................................................677
7.8.3	
SIP Details......................................................................................... 678
7.8.4	
SLURP Details.................................................................................. 678
7.8.5	
SIPs/SLURPs and MATLAB............................................................679
7.8.6	
Summary...........................................................................................680
7.8.7	
Appendix........................................................................................... 681
7.8.8	
References.........................................................................................682
Chapter 8	
Advanced Numerical Integration..............................................................................683
8.1	
Introduction....................................................................................................683
8.2	
Dynamic Errors (Characteristic Roots, Transfer Function)...........................683
8.2.1	
Discrete-Time Systems and the Equivalent 
Continuous-Time Systems.................................................................684
8.2.2	
Characteristic Root Errors................................................................687
8.2.3	
Transfer Function Errors...................................................................697
8.2.4	
Asymptotic Formulas for Multistep Integration Methods................704
8.2.5	
Simulation of Linear System with Transfer Function H(s)...............708
8.3	
Stability of Numerical Integrators.................................................................. 714
8.3.1	
Adams–Bashforth Numerical Integrators......................................... 714
8.3.2	
Implicit Integrators............................................................................722
8.3.3	
Runga–Kutta (RK) Integration.........................................................726
8.4	
Multirate Integration......................................................................................738
8.4.1	
Procedure for Updating Slow and Fast States: 
Master/Slave = RK-4/RK-4.............................................................. 742
8.4.2	
Selection of Step Size Based on Stability......................................... 743
8.4.3	
Selection of Step Size Based on Dynamic Accuracy........................ 745
8.4.4	
Analytical Solution for State Variables............................................. 748

xii
Contents
8.4.5	
Multirate Integration of Aircraft Pitch Control System.................... 750
8.4.6	
Nonlinear Dual Speed Second-Order System................................... 753
8.4.7	
Multirate Simulation of Two-Tank System.......................................760
8.4.8	
Simulation Trade-Offs with Multirate Integration............................ 763
8.5	
Real-Time Simulation.....................................................................................766
8.5.1	
Numerical Integration Methods Compatible with 
Real-Time Operation.........................................................................769
8.5.2	
RK-1 (Explicit Euler).........................................................................770
8.5.3	
RK-2 (Improved Euler)...................................................................... 771
8.5.4	
RK-2 (Modified Euler)...................................................................... 771
8.5.5	
RK-3 (Real-Time Incompatible)........................................................ 771
8.5.6	
RK-3 (Real-Time Compatible)...........................................................772
8.5.7	
RK-4 (Real-Time Incompatible)........................................................772
8.5.8	
Multistep Integration Methods..........................................................772
8.5.9	
Stability of Real-Time Predictor–Corrector Method........................ 774
8.5.10	 Extrapolation of Real-Time Inputs....................................................776
8.5.11	 Alternate Approach to Real-Time Compatibility: Input Delay.........783
8.6	
Additional Methods of Approximating Continuous-Time System Models.....790
8.6.1	
Sampling and Signal Reconstruction................................................790
8.6.2	
First-Order Hold Signal Reconstruction...........................................796
8.6.3	
Matched Pole-Zero Method..............................................................796
8.6.4	
Bilinear Transform with Prewarping................................................799
8.7	
Case Study: Lego MindstormsTM NXT..........................................................803
8.7.1	
Introduction.......................................................................................803
8.7.2	
Requirements and Installation..........................................................805
8.7.3	
Noisy Model......................................................................................806
8.7.4	
Filtered Model................................................................................... 810
8.7.5	
Summary........................................................................................... 815
References...................................................................................................................................... 817
Index............................................................................................................................................... 821

xiii
Foreword
MATLAB is used for so many applications, it defies attempts at categorization. This book demon­
strates some of that interesting diversity.
As you read and use this book, you will find two kinds of knowledge. You may hope to find 
insight to the use of MATLAB and Simulink. That hope will be richly fulfilled, I think. But you 
should be mindful of another kind of knowledge; how others have solved problems. The rich col­
lection of examples and methods go far beyond the software toolset. These span different technical 
disciplines and industries.
The authors show how modeling, simulation, and analysis gets done across a wide range of appli­
cations and industries, including financial markets. Work within and among various professional 
societies further broaden this perspective. Their university work in teaching budding scientists and 
engineers has honed the ability to make complexity approachable.
This book gives readers a chance to look outside their own discipline or industry, to collect ideas 
from afar.
I hope your imagination will be fired while your modeling and simulation skills are being honed.
Steve Roemerman
Chairman & CEO of Lone Star Analysis
Dallas, TX
Simulation has come a long way since the days analog computers filled entire rooms. Yet, it is more 
important than ever that simulations be constructed with care, knowledge, and a little wisdom, lest 
the results be gibberish or, worse, reasonable but misleading. Used properly, simulations can give 
us extraordinary insights into the processes and states of a physical system. Constructed with care, 
simulations can save time and money in today’s competitive marketplace.
One major application of simulation is the simulator, which provides interaction between a model 
and a person through some interface. The earliest simulator, Ed Link’s Pilot Maker aircraft trainer, 
did not use any of the simulation techniques described in this book. Modern simulators, however, 
such as the National Advanced Driving Simulator (NADS), cannot be fully understood without them.
The mission of the NADS is a lofty one: to save lives on U.S. highways through safety research 
using realistic human-in-the-loop simulation. This is an example of the importance simulation has 
attained in our generation. The pervasiveness of simulation tools in our society will only increase 
over time; it will be more important than ever that future scientists and engineers be familiar with 
their theory and application.
The content for Simulation of Dynamic Systems with MATLAB® and Simulink® is arranged 
to give the student a gradual and natural progression through the important topics in simulation. 
Advanced concepts are added only after complete examples have been constructed using funda­
mental methods. The use of MATLAB and Simulink provides experience with tools that are widely 
adopted in industry and allow easy construction of simulation models.
May your experience with simulation be enjoyable and fruitful and extend throughout your careers.
Chris Schwarz, PhD
Iowa City, Iowa


xv
Preface
In the first article of SIMULATION magazine in the Fall of 1963, the editor John McLeod pro­
claimed simulation to mean “the act of representing some aspects of the real world by numbers or 
symbols which may be easily manipulated to facilitate their study.” Two years later, it was modified 
to “the development and use of models for the study of the dynamics of existing or hypothesized 
systems.” More than 40 years later, the simulation community has yet to converge upon a univer­
sally accepted definition. Either of the two cited definitions or others that followed convey a basic 
notion, namely, that simulation is intended to reinforce or supplement one’s understanding of a sys­
tem. The definitions vary in their description of tools and methods to accomplish this.
The field of simulation is experiencing explosive growth in importance because of its ability to 
improve the way systems and people perform, in a safe and controllable environment, at a reduced 
cost. Understanding the behavior of complex systems with the latest technological innovations in 
fields such as transportation, communication, medicine, aerospace, meteorology, etc., is a daunting 
task. It requires an assimilation of the underlying natural laws and scientific principles that gov­
ern the individual subsystems and components. A multifaceted approach is required, one in which 
simulation can play a prominent role, both in validation of a system’s design and in training of per­
sonnel to become proficient in its operation.
Simulation is a subject that cuts across traditional academic disciplines. Airplane crews spend 
hours flying simulated missions in aircraft simulators to become proficient in the use of onboard sub­
systems during normal flight and possible emergency conditions. Astronauts spend years training in 
shuttle and orbiter simulators to prepare for future missions in space. Power plant and petrochemical 
process operators are exposed to simulation to obtain peak system performance. Economists resort 
to simulation models to predict economic conditions of municipalities and countries for policymak­
ers. Simulations of natural disasters aid in preparation and planning to mitigate the possibility of 
catastrophic events.
While the mathematical models created by aircraft designers, nuclear engineers, and economists 
are application specific, many of the equations are analogous in form despite the markedly differ­
ent phenomena described by each model. Simulation offers practitioners from each of these fields 
the tools to explore solutions of the models as an alternative to experimenting with the real system.
This book is meant to serve as an introduction to the fundamental concepts of continuous sys­
tem simulation, a branch of simulation applied to dynamic systems whose signals change over a 
continuum of points in time or space. Our concern is with mathematical models of continuous-
time systems (electric circuits, thermal processes, population dynamics, vehicle suspension, human 
physiology, etc.) and the discrete-time system models created to simulate them. The continuous sys­
tem mathematical models consist of a combination of algebraic and ordinary differential equations. 
The discrete-time system models are a mix of algebraic and difference equations.
Systems that transition between states at randomly occurring times are called discrete-event 
systems. Discrete-event simulation is a complementary branch of simulation, separate from con­
tinuous system simulation, with a mathematical foundation rooted in probability theory. Examples 
of discrete-event systems are facilities such as a bank, a tollbooth, a supermarket, or a hospital 
emergency room, where customers arrive and are then serviced in some way. A manufacturing plant 
involving multiple production stages of uncertain duration to generate a finished product is another 
candidate for discrete-event simulation.
Discrete-event simulation is an important tool for optimizing the performance of systems that 
change internally at unpredictable times due to the influence of random events. Industrial engineer­
ing programs typically include a basic course at the undergraduate level in discrete-event simula­
tion. Not surprisingly, a number of excellent textbooks in the area have emerged for use by the 
academic community and professionals.

xvi
Preface
In academia, continuous simulation has evolved differently than discrete-event simulation. 
Topics in continuous simulation such as dynamic system response, mathematical modeling, differ­
ential equations, difference equations, and numerical integration are dispersed over several courses 
from engineering, mathematics, and the natural sciences. In the past, the majority of courses in 
modeling and simulation of continuous systems were restricted to a specific field like mechanical, 
electrical, and chemical engineering or scientific areas like biology, ecology, and physics.
A transformation in simulation education is underway. More universities are beginning to offer 
undergraduate and beginning graduate courses in the area of continuous system simulation designed 
for an interdisciplinary audience. Several institutions now offer master’s and PhD programs in sim­
ulation that include a number of courses in both continuous and discrete-event simulation. A critical 
mass of students are now enrolled in continuous simulation-related courses and there is a need for 
an introductory unifying text.
The essential ingredient needed to make simulation both interesting and challenging is the inclu­
sion of real-world examples. Without models of real-world systems, a first class in simulation is little 
more than a sterile exposition of numerical integration applied to differential equations.
Modeling and simulation are inextricably related. While the thrust of this text is continuous 
simulation, mathematical models are the starting point in the evolution of simulation models. 
Analytical solutions of differential equation models are presented, when appropriate, as an alterna­
tive to simulation and a simple way of demonstrating the accuracy of a simulated solution. For the 
most part, derivations of the mathematical models are omitted and references to appropriate texts 
are included for those interested in learning more about the origin of the model’s equations.
New and revised topics in the third edition are discussed in the later paragraphs dedicated to the 
content of each chapter. However, certain changes appearing in the third edition apply to the entire 
book, Chapters 1 through 8. These changes consist of the following:
	
1.	All MATLAB script and function .m files have been renamed and the references to them 
in the text have been changed to reflect the new file names. This eliminates the confusion 
present in the second edition which retained the MATLAB file names from the first edition 
based on the old system for naming chapter sections, figures, tables and exercise problems. 
Simulink model .mdl file names remain unchanged since they do not contain chapter or 
section references in their names.
	
2.	With very few exceptions, nearly every graph generated in MATLAB has been redone 
to improve its appearance in printed form. Specifically, all line plots and markers are 
produced with a heavier weight, annotation and titles of most graphs have been changed 
to better communicate the significance of each graph. Whilst the graphs are in black and 
white in the text, every graph generated in MATLAB appears on screen in vivid colors to 
enhance their appearance. Updated MATLAB and Simulink files are accessible from CRC 
Press.
	
3.	Simulink diagrams have been updated to be compatible with version R2016a of MATLAB/
Simulink. Diagrams with numerous Simulink blocks have been expanded to reveal the 
details of each block and their interconnections.
	
4.	Certain non-graph figures have been eliminated as a result of being unnecessary, while 
others have been modified to be more informative.
Simulation is best learned by doing. Accordingly, the material is presented in a way that per­
mits the reader to begin exploring simulation, starting with a mathematical model in Chapter 1. 
The notation used to represent discrete-time variables has been simplified in the new edition mak­
ing it easier to comprehend the difference equations developed to approximate the dynamics of 
continuous-time systems. The latter part of Section 1.1 and all of Sections 1.2 through 1.5 have been 
rewritten to better explain the underlying concepts.

xvii
Preface
Chapters 2 and 4 remain basically unchanged. They present a condensed treatment of linear, 
continuous-time, and discrete-time dynamic systems, normally covered in an introductory linear 
systems course. The instructor can skip some or all of the material in these chapters if the students’ 
background includes a course in signals and systems or linear control theory.
Numerical integration is at the very core of continuous system simulation. Instead of treating the 
subject in one exhaustive chapter, coverage is distributed over three chapters. Elementary numeri­
cal integration in Chapter 3 is an informal introduction to the subject, which includes discussion 
of several elementary methods for approximating the solutions of first order differential equations. 
Presentation of the topics in Chapter 3 has been completely revised. Much of the material in Chapter 
3 from the second edition appears in a reorganized format while some material has been deleted 
and new material added.
Simulink, from The MathWorks, is the featured simulation program because of its tight 
­integration with MATLAB, the de facto standard for scientific and engineering analysis, and data 
visualization software. Chapter 5 takes the reader through the basic steps of creating and running 
Simulink models. Monte Carlo simulation for estimation of system parameters and probability of 
events occurring in dynamic systems is covered. A new case study is introduced in Section 5.13 
involving logically-controlled flows between two interconnected tanks.
Chapter 6 delves into intermediate-level topics of numerical integration, including a formal pre­
sentation of One-Step (Runga–Kutta) and multistep methods, adaptive techniques, truncation errors 
and a brief mention of stability.
Chapter 7 highlights some advanced features of Simulink useful in more in-depth simulation 
studies. Section 7.7 was added to demonstrate rare event modeling and portfolio risk measurement, 
thereby exposing potential Black Swans as they may pertain to the financial markets. Section 7.8 
was added to introduce SIPmath as a means for efficiently representing uncertainty as probability 
distributions, enabling legacy and future simulation models to communicate with each other.
Chapter 8 is for those interested in more advanced topics on continuous simulation. Coverage 
includes a discussion of dynamic errors, stability, real-time compatible numerical integration and 
multirate integration algorithms for simulation of stiff systems.
The basic minimum requirement for anyone using this text is a first course in Ordinary 
Differential Equations. An outline for a one-semester, preferably senior-level course in continuous 
system simulation is subject to the individual requirements of the instructor as well as the prior 
education of the students. As a starting point, some basic recommendations by the authors for a 
one-semester course are:
Chapter 1 
Sections
Chapter 2 
Sections
Chapter 3 
Sections
Chapter 4 
Sections
Chapter 5 
Sections
Chapter 6 
Sections
For students knowledgeable 
in linear systems theory
1–4
1–8
1–8
Review of 
1–8
1–3, 5, 6, 8, 
9, 11 or 13
1–5, 8
For students not well-versed 
in linear systems theory
1–4
1–8
1–8
1–5
1–3, 5, 6, 8, 
11 or 13
1–4, 8
All remaining sections are appropriate for a second course in a two-semester sequence, either at 
the senior, or more appropriately graduate level. The material in Chapters 7 and 8 is well suited as a 
reference for practicing engineers and researchers involved in more advanced simulation endeavors.
The first and second editions of this text has been field-tested for nearly a decade. Despite numer­
ous revisions based on the scrutiny and suggestions of students and colleagues, some errors man­
age to go undetected. Further suggestions for improvement and revelations of inaccuracies can be 
brought to the attention of the authors at aerospace321@outlook.com and klee.harold@gmail.com.
Numerous individuals deserve our thanks and appreciation for making the third edition pos­
sible. Thanks to Nora Konopka at Taylor & Francis/CRC Press for committing to the third edition 

xviii
Preface
and Kyra Lindholm, also with Taylor & Francis/CRC Press, for facilitating the transition from the 
second to the third edition.
MATLAB® and Simulink® are registered trademarks of The MathWorks, Inc. For product 
­information, please contact:
The MathWorks, Inc.
3 Apple Hill Drive
Natick, MA 01760-2098 USA Tel: 508 647 7000
Fax: 508-647-7001
E-mail: info@mathworks.com
Web: www.mathworks.com

xix
About the Authors
Dr. Harold Klee received his PhD in systems science from Polytechnic Institute of Brooklyn in 
1972, his MS in systems engineering from Case Institute of Technology in 1968, and his BSME 
from The Cooper Union in 1965.
Dr. Klee has been a faculty member in the College of Engineering at the University of Central 
Florida (UCF) since 1972. During his tenure at UCF, he has been a five-time recipient of the 
­college’s Outstanding Teacher Award. He has been instrumental in the development of simula­
tion courses in both the undergraduate and graduate curricula. He is a charter member of the Core 
Faculty, which is responsible for developing the interdisciplinary MS and PhD programs in simula­
tion at UCF. Dr. Klee served as graduate coordinator in the Department of Computer Engineering 
from 2003 to 2006. Two of his PhD students received the prestigious Link Foundation Fellowship 
in Advanced Simulation and Training. Both are currently enjoying successful careers in academia.
Dr. Klee has served as the director of the UCF Driving Simulation Lab for more than 15 years. 
Under the auspices of the UCF Center for Advanced Transportation Systems Simulation, the lab 
operates a high-fidelity motion-based driving simulator for conducting traffic engineering-related 
research. He also served as editor-in-chief for the Modeling and Simulation magazine for three 
years, a publication for members of the Society for Modeling and Simulation International.
Dr. Randal Allen is an aerospace and defense consultant working under contract to provide 
6DOF aerodynamic simulation modeling, analysis, and design of navigation, guidance, and con­
trol ­systems. His previous experience includes launch systems integration and flight operations for 
West Coast Titan-IV missions, propulsion modeling for the Iridium satellite constellation, and field 
applications engineering for MATRIXx. He also chairs the Central Florida Section of the American 
Institute of Aeronautics and Astronautics (AIAA).
Dr. Allen is certified as a modeling and simulation professional (CMSP) by the Modeling and 
Simulation Professional Certification Commission (M&SPCC) under the auspices of the National 
Training and Simulation Association (NTSA). He is also certified to deliver FranklinCovey’s Focus 
and Execution track, which provides training on achieving your highest priorities.
Dr. Allen’s academic background includes a PhD in mechanical engineering from the University 
of Central Florida, an engineer’s degree in aeronautical and astronautical engineering from Stanford 
University, an MS in applied mathematics, and a BS in engineering physics from the University of 
Illinois (Urbana–Champaign). He also serves as an adjunct professor at the University of Central 
Florida in Orlando, Florida.


1
1 Mathematical Modeling
1.1  INTRODUCTION
1.1.1  Importance of Models
Models are an essential component of simulation. Before a new prototype design for an automobile 
braking system or a multimillion dollar aircraft is tested in the field, it is commonplace to “test 
drive” the separate components and the overall system in a simulated environment based on some 
form of model. A meteorologist predicts the expected path of a tropical storm using weather models 
that incorporate the relevant climatic variables and their effect on the storm’s trajectory. An econo­
mist issues a quantitative forecast of the U.S. economy predicated based on key economic variables 
and their interrelationships with the help of computer models. Before a nuclear power plant operator 
is “turned loose” at the controls, extensive training is conducted in a model-based simulator where 
the individual becomes familiar with the plant’s dynamics under routine and emergency conditions. 
Health care professionals have access to a human patient simulator to receive training in the rec­
ognition and diagnosis of disease. Public safety organizations can plan for emergency evacuations 
of civilians from low-lying areas using traffic models to simulate vehicle movements along major 
access roads.
The word “model” is a generic term referring to a conceptual or physical entity that resembles, 
mimics, describes, predicts, or conveys information about the behavior of some process or system. 
The benefit of having a model is to be able to explore the intrinsic behavior of a system in an eco­
nomical and safe manner. The physical system being modeled may be inaccessible or even nonexis­
tent as in the case of a new design for an aircraft or automotive component.
Physical models are often scaled-down versions of a larger system of interconnected compo­
nents as in the case of a model airplane. Aerodynamic properties of airframe and car body designs 
for high-performance airplanes and automobiles are evaluated using physical models in wind tun­
nels. In the past, model boards with roads, terrain, miniaturized models of buildings, and land­
scape, along with tiny cameras secured to the frame of ground vehicles or aircraft, were prevalent 
for simulator visualization. Current technology relies almost exclusively on computer-generated 
imagery.
In principle, the behavior of dynamic systems can be explained by mathematical equations and 
formulae, which embody either scientific principles or empirical observations, or both, related to 
the system. When the system parameters and variables change continuously over time or space, the 
models consist of coupled algebraic and differential equations. In some cases, lookup tables con­
taining empirical data are employed to compute the parameters. Equations may be supplemented by 
mathematical inequalities, which constrain the variation of one or more dependent variables. The 
aggregation of equations and numerical data employed to describe the dynamic behavior of a system 
in quantitative terms is collectively referred to as a mathematical model of the system.
Partial differential equation models appear when a dependent variable is a function of two or 
more independent variables. For example, electrical parameters such as resistance and capacitance 
are distributed along the length of conductors carrying electrical signals (currents and voltages). 
These signals are attenuated over long distances of cabling. The voltage at some location x mea­
sured from an arbitrary reference is written v(x, t) instead of simply v(t), and the circuit is modeled 
accordingly.
A mathematical model for the temperature in a room would necessitate equations to predict 
T(x, y, z, t) if a temperature probe placed at various points inside the room reveals significant vari­
ations in temperature with respect to x, y, z in addition to temporal variations. Partial differential 

2
Simulation of Dynamic Systems with MATLAB® and Simulink®
equations describing the cable voltage v(x, t) and room temperature T(x, y, z, t) are referred to as 
“distributed parameter” models.
The mathematical models of dynamic systems where the single independent variable is “time” 
comprise ordinary differential equations. The same applies to systems with a single spatial indepen­
dent variable; however, these are not commonly referred to as dynamic systems since variations of 
the dependent variables are spatial as opposed to temporal in nature. Ordinary differential equation 
models of dynamic systems are called “lumped parameter” models because the spatial variation of 
the system parameters is negligible or else it is being approximated by lumped sections with con­
stant parameter values. In the room temperature example, if the entire contents of the room can be 
represented by a single or lumped thermal capacitance, then a single temperature T(t) is sufficient 
to describe the room. We focus exclusively on dynamic systems with lumped parameter models, 
hereafter referred to simply as mathematical models.
A system with a lumped parameter model is illustrated in Figure 1.1. The key elements are the 
system inputs u1(t), u2(t), …, ur(t), which make up the system input vector u(t), the system outputs 
y1(t), y2(t), …, yp(t), which form the output vector y(t), and the parameters p1, p2, …, pm constituting 
the parameter vector p. The parameters are shown as constants; however, they may also vary with 
time.
Our interest is in mathematical models of systems consisting of coupled algebraic and differ­
ential equations relating the outputs and inputs with coefficients expressed in terms of the system 
parameters. For steady-state analyses, transient responses are irrelevant, and the mathematical mod­
els consist of purely algebraic equations relating the system variables.
An example of a mathematical model for a system with two inputs, three outputs, and several 
parameters is
	
p d
dt y t
p p d
dt y t
p y t
p d
dt y t
p y t
p u
1
2
2
1
2
3
1
4 1
2
6
2
7 1
( )
( )
( )
( )
( )
(
+
+
+
+
=
5
t)
	
(1.1)
	
p d
dt y t
p
p
y t
p y t y t
p
d
dt u t
p u t
p
8
2
9
10
2
11 1
2
12
1
13 1
( )
( )
( )
( )
( )
( )
+
+
=
+
+
14 2u t( )
	
(1.2)
	
p y t
p y
t
y t
p
15 3
16 1
2
17
( )
( )
( )
=
	
(1.3)
The order of a model is equal to the sum of the highest derivatives of each of the dependent 
variables, in this case y1(t), y2(t), y3(t), and the order is therefore 2 + 1 + 0 = 3. Equation 1.1 is a 
linear differential equation. Equation 1.2 is a nonlinear differential equation because of the term 
involving the product of y1(t) and y2(t). The mathematical model is nonlinear due to the presence of 
the nonlinear differential equation and the nonlinear algebraic equation (Equation 1.3). It is to be 
borne in mind that it is the nature of the equations that determines whether a math model is linear 
SYSTEM
·······
Input 
u1(t)
u2(t)
ur(t)
u(t) =
Output 
p1 p2
pm
y1(t)
y2(t)
yp(t)
y(t) =
FIGURE 1.1  A system with a lumped parameter model.

3
Mathematical Modeling
or nonlinear. An adjective such as linear or nonlinear applies to the mathematical model as opposed 
to the actual system.
It is important to distinguish between the system being modeled and the model itself. The former 
is unique, even though it may exist only at the design stage, while the mathematical model may 
assume different forms. For example, a team of modelers may be convinced that the lead term in 
Equation 1.1 is likely to be insignificant under normal operating conditions. Consequently, two 
distinct models of the system exist, one third order and the other second order. The third-order 
model includes the second derivative term to accurately reflect system behavior under unusual or 
nontypical conditions (e.g., an aircraft exceeding its flight envelope or a ground vehicle performing 
an extreme maneuver). The simpler second-order model ignores what are commonly referred to as 
higher-order effects. Indeed, there may be a multitude of mathematical models to represent the same 
system under different sets of restricted operating conditions. Regardless of the detail inherent in a 
mathematical model, it nevertheless represents an incomplete and inexact depiction of the system.
A model’s intended use will normally dictate its level of complexity. For example, models for 
predicting vehicle handling and responsiveness are different from those intended to predict ride 
comfort. In the first case, accurate equations describing lateral and longitudinal tire forces are para­
mount in importance, whereas passenger comfort relies more on vertical tire forces and suspension 
system characteristics.
Mathematical modeling is an inexact science, relying on a combination of intuition, experience, 
empiricism, and the application of scientific laws of nature. Trade-offs between model complexity 
and usefulness are routine. Highly accurate microclimatic weather models that use current atmo­
spheric conditions to predict the following day’s weather are of limited value if they require 48 h 
on a massively parallel or supercomputer system to produce results. At the extreme opposite, overly 
simplified models can be grossly inaccurate if significant effects are overlooked.
The difference between a mathematical model and a simulation model is open to interpretation. 
Some in the simulation community view the two as one and the same. Their belief is that a math­
ematical model embodies the attributes of the actual system and simulation refers to solutions of the 
model equations, albeit generally approximate in nature. Exact analytical solutions of mathematical 
model equations are nonexistent in all but the simplest cases.
Others maintain a distinction between the two and express the view that simulation model(s) 
originate from the mathematical model. According to this line of thinking, simulating the dynam­
ics of a system requires a simulation model that is different in nature from a mathematical model. 
A reliable simulation model must be capable of producing numerical solutions in reasonably 
close agreement with the actual (unknown) solutions to the math model. Simulation models are 
commonly obtained from discrete-time approximations of continuous-time mathematical mod­
els. Much of this book is devoted to the process of obtaining simulation models in this way. More 
than one simulation model can be developed from a single mathematical model of a system.
Stochastic models are important when dealing with systems whose inputs and parameters are 
best modeled using statistical methods. Discrete event models are used to describe processes that 
transit from one state to another at randomly spaced points in time. Probability theory plays a sig­
nificant role in the formulation of discrete event models for describing the movement of products 
and service times at different stages in manufacturing processes, queuing systems, and the like. In 
fact, the two pillars of simulation are continuous system simulation, the subject of this book, and 
discrete event simulation.
There is a great deal more to be said about modeling. Entire books are devoted to properly iden­
tifying model structure and parameter values for deterministic and stochastic systems. Others con­
centrate more on derivation of mathematical models from diverse fields and methods of obtaining 
solutions under different circumstances. The reader is encouraged to check the references section at 
the end of this book for additional sources of material related to modeling.
Modeling is essential to the field of simulation. Indeed, it is the starting point of any simula­
tion study. The emphasis, however, in this book is on the presentation of simulation fundamentals. 

4
Simulation of Dynamic Systems with MATLAB® and Simulink®
Accordingly, derivation of mathematical models is not a prominent component. For the most part, 
the math models are taken from documented sources listed in the references section, some of which 
include step-by-step derivations of the model equations. The derivation is secondary to a complete 
understanding of the model, that is, its variables, parameters, and knowledge of conditions that may 
impose restrictions on its suitability for a specific application.
Simulation of complex systems requires a team effort. The modeler is a subject expert responsi­
ble for providing the math model and interpreting the simulation results. The simulationist produces 
the simulation model and performs the simulation study. For example, an aerodynamicist applies 
principles of boundary layer theory to obtain a mathematical model for the performance of a new 
airfoil design. Starting with the math model, simulation skills are required to produce a simulation 
model capable of verifying the efficacy of the design based on numerical results. Individuals with 
expert knowledge in a particular field are oftentimes well versed in the practice of simulation and 
may be responsible for formulation of alternative mathematical models of the system in addition to 
developing and running simulations.
A simple physical system is introduced in the next section, and the steps involved in deriving an 
idealized math model are presented. In addition to benefiting from seeing the process from start 
to finish, the ingredients for creating a simulation model are introduced. Hence, by the end of this 
chapter, the reader will be able to perform rudimentary simulation.
1.2  DERIVATION OF A MATHEMATICAL MODEL
We begin our discussion of mathematical modeling with a simple derivation of the mathematical 
model representing the dynamic behavior of an open tank containing a liquid that flows in the top 
and is discharged from the bottom. Referring to Figure 1.2, the primary input is the liquid flow rate 
Fl(t), an independent variable measured in appropriate units such as cubic feet per minute (volumet­
ric flow rate) or pounds per hour (mass flow rate). Responding to changes in the input are dependent 
variables H(t) and F0(t) the fluid level, and flow rate from the tank.
Once the derivation is completed, we can use the model to predict the outflow and fluid level 
response to a specific input flow rate F1(t), t ≥ 0. Note that we have restricted the set of possible 
inputs to F1(t) and in the process relegated the remaining independent variables, that is, other vari­
ables which affect F0(t) and H(t), to second-order importance. Our assumption is that the eventual 
Time: t + Δt
Time: t
H(t + Δt)
H(t)
F1(t + Δt)
F0(t + Δt)
F0(t)
ΔH
F1(t)
FIGURE 1.3  A liquid tank at two points in time.
H(t)
F0(t)
F1(t)
TANK
FIGURE 1.2  Tank as a dynamic system with input and outputs.

5
Mathematical Modeling
model will be suitable for its intended application. It must be borne in mind that if extremely accu­
rate predictions of the level H(t) are required, it may be necessary to include second-order effects 
such as evaporation and hence introduce additional inputs related to ambient conditions, namely, 
temperature, humidity, air pressure, wind speed, and so forth.
The derivation is based on conditions of the tank at two discrete points in time, as if snapshots of 
the tank were available at times “t” and “t + Δt,” as shown in Figure 1.3.
The following notation is used with representative units given for clarity:
F1(t): Input flow at time t, ft3/min
H(t): Liquid level at time t, ft
F0(t): Output flow at time t, ft3/min
A: Cross-sectional area of tank, ft2
At time t + Δt, from the physical law of conservation of volume,
	
V t
t
V t
V
(
)
( )
+
=
+
∆
∆
	
(1.4)
where
V(t) is the volume of liquid in the tank at time t
ΔV is the change in volume from time t to t + Δt
The volume of liquid in the tank at times t and t + Δt is given by
	
V t
AH t
( )
( )
=
	
(1.5)
	
V t
t
AH t
t
(
)
(
)
+
=
+
∆
∆
	
(1.6)
Equations 1.5 and 1.6 assume constant cross-sectional area of the tank, that is, A is independent 
of H.
The change in volume from t to t + Δt is equal to the volume of liquid flowing in during the interval 
t to t + Δt minus the volume of liquid flowing out during the same period of time. The liquid volumes 
are the areas under the input and output volume flow rates from t to t + Δt as shown in Figure 1.4.
Expressing these areas in terms of integrals,
	
∆
∆
∆
V
F t
t
F t
t
t
t
t
t
t
t
=
−
+
+
∫
∫
1
0
( )
( )
d
d
	
(1.7)
The integrals in Equation 1.7 can be approximated by assuming F1(t) and F0(t) are constant over the 
interval t to t + Δt (see Figure 1.4). Hence,
H(t)
t + Δt
t
t + Δt
t
t + Δt
t
F0(t)
ΔH
F1(t)
FIGURE 1.4  Volumes of liquid flowing in and out of tank from t to t + Δt.

6
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
F t
t
F t
t
t
t
t
1
1
( )
( )
d ≈
+
∫
∆
∆
	
(1.8)
	
F t
t
F t
t
t
t
t
0
0
( )
( )
d ≈
+
∫
∆
∆
	
(1.9)
Equations 1.8 and 1.9 are reasonable approximations provided Δt is small. Substituting Equations 
1.8 and 1.9 into Equation 1.7 yields
	
∆
∆
∆
V
F t
t
F t
t
≈
−
1
0
( )
( )
	
(1.10)
Substituting Equations 1.5, 1.6, and 1.10 into Equation 1.4 gives
	
AH t
t
AH t
F t
F t
t
(
)
(
[
]
)
( )
( )
+
≈
+
−
∆
∆
1
0
	
(1.11)
	
⇒
+
−
≈
−




A H t
t
H t
F t
F t
t
(
)
( )
( )
( )
∆
∆
1
0
	
(1.12)
	
⇒





≈
−
A
H
F t
F t
∆
∆
1
0
( )
( )
	
(1.13)
where ΔH is the change in liquid level over the interval (t, t + Δt). Note that ΔH/Δt is the average 
rate of change in the level H over the interval (t, t + Δt). It is the slope of the secant line from pt A 
to pt B in Figure 1.5.
In the limit as Δt approaches zero, pt B approaches pt A, and the average rate of change in H over 
the interval (t, t + Δt) becomes the instantaneous rate of change in H at time t, that is,
	
lim
∆
∆
∆
t
t
H
t
→
=
0
H
d
d
	
(1.14)
where dH/dt is the first derivative of H(t). From the graph, it can be seen that dH/dt is equal to the 
slope of the tangent line of the function H(t) at t (pt A).
A
H
Tangent 
t
Pt
Coordinates 
A
[t, H(t)]
B
B
[t + Δt, H(t + Δt)]
B′
B′
[t + Δt′, H(t + Δt′)]
t + Δt′
t + Δt
Δt
ΔH
FIGURE 1.5  Average rate of change ΔH/Δt as Δt gets smaller.

7
Mathematical Modeling
Taking the limit as Δt approaches zero in Equation 1.13 and using the definition of the derivative 
in Equation 1.14 give
	
lim
lim [
( )
( )]
∆
∆
∆
∆
t
t
t
F t
F t
→
→





=
−
0
0
1
0
H
	
(1.15)
	
⇒





=
−
A
H
t
F t
F t
d
d
1
0
( )
( )
	
(1.16)
Since there are two dependent variables, a second equation or constraint relating F0 and H is 
required in order to solve for either one given the input function F1(t). It is convenient at this point 
to assume that F0 is proportional to H, that is, F0 = constant × H (see Figure 1.6). The constant of 
proportionality is expressed as 1/R where R is called the fluid resistance of the tank. At a later point, 
we will revisit this assumption.
	
F
R H
0
1
=
	
(1.17)
Equations 1.16 and 1.17 constitute the mathematical model of the liquid tank, namely,
	
A H
t
F
F
F
R H
d
d
and
+
=
=
0
1
0
1
	
where F1, F0, H, and dH/dt are short for F1(t), F0(t), H(t), and (d/dt)H(t).
In this example, the model is a coupled set of equations. One is a linear differential equation and 
the other is an algebraic equation, also linear. The differential equation is first order since only the 
first derivative appears in the equation and the tank dynamics are said to be first order.
The outflow F0 can be eliminated from the model equations by substituting Equation 1.17 into 
Equation 1.16 resulting in
	
A H
t
R H
F
d
d
+
=
1
1
	
(1.18)
Before a particular solution to Equation 1.18 for some F1(t), t ≥ 0 can be obtained, the initial tank 
level H(0) must be known.
There are several reasons why an analytical approach to solving Equation 1.18 may not be the 
preferred method. Even when the analytical solution is readily obtainable, for example, when the 
system model is linear, as in the present example, the solution may be required for a number of dif­
ferent inputs or forcing functions. Recall from studying differential equations what happens when 
the right-hand side of the equation changes. A new particular solution is required that can be time-
consuming, especially if the process is repeated for a number of nontrivial forcing functions.
Second, the input F1(t) may not even be available in analytical form. Suppose the input func­
tion F1(t) is unknown except as a sequence of measured values at regularly spaced points in time. 
1 
1
H
H
R
R
F0
F0 =
FIGURE 1.6    A tank with out-flow proportional to fluid level.

8
Simulation of Dynamic Systems with MATLAB® and Simulink®
An exact solution to the differential equation model is out of the question since the input is not 
expressible as an analytic function of time.
EXERCISES
	1.1	 A system consists of two tanks in series in which the outflow from the first tank is the inflow 
to the second tank as shown in the figure below.
	
a.	 Find the algebraic and differential equations comprising the mathematical model of the two 
tank system. Assume both tanks are linear, i.e. the outflows are proportional to the liquid 
levels and R1, R2 are the fluid resistances of the tanks.
	
b.	 Eliminate the flows F0(t) and F2(t) from the model to obtain a model in the form of two dif­
ferential equations involving the system input F1(t) and the tank levels H1(t) and H2(t).
	
c.	 Obtain the model differential equations when F0(t) and F2(t) are present instead of H1(t) and 
H2(t).
	
d.	 The initial fluid levels in the tanks are H1(0) and H2(0) Suppose the flow in to the first tank 
is constant, F t
F
1( ) =
1, t ≥ 0. Obtain expressions for H1(∞) and H2(∞), the eventual fluid 
levels in Tanks 1 and 2. Do H1(∞) and H2(∞) depend on the initial fluid levels? Explain.
	
e.	 Find the ratio of tank resistances R1/R2 if H1(∞) = 2H2(∞).
	
f.	 Suppose the flow between the two tanks is reduced to zero by closing the valve in the line. 
Show that this is equivalent to R1 = ∞ and determine the values of H1(∞) and H2(∞) 
assuming the inflow to the first tank is still constant.
	1.2	 The two tanks in Exercise 1.1 are said to be non-interacting because the flow rate from the 
first tank only depends on the fluid level in the first tank and is independent of the fluid level 
in the second tank. Suppose the discharged fluid from the first tank enters the second tank at 
the bottom instead of the top as shown in the figure below.
The flow between the tanks is now a function of the fluid levels in both tanks. The driving 
force for the inter-tank flow is the difference in fluid levels and for the time being we can 
assume the two quantities are proportional. That is,
	
F t
H t
H t
F t
H t
H t
R
0
1
2
0
2
12
( )
( )
( )
( )
)
( )
∝
−


⇒
=
−
1(
	

9
Mathematical Modeling
where R12 represents a fluid resistance involving both tanks. The fluid resistance of the second 
tank is still R2.
	
a.	 The general form of the differential equation model for the system of interacting tanks is
	
dH
dt
a H
a H
b
1
11
1
12
2
1 1
+
+
=
F
	
	
dH
dt
a H
a H
b F
2
21
1
22
2
2
1
+
+
=
	
	
Note: H1, H2 and F1 are short for H1(t), H2(t) and F1(t).
	
Find expressions for a11, a12, a21, a22, b1, b2 in terms of the system parameters A1, A2, R12, 
and R2.
	
b.	 The tanks are initially empty, H1(0) = 0 and H2(0) = 0. The flow in to the first tank is con­
stant, F t
F
t
1
1
0
( )
,
.
=
≥
 
 Show that the final fluid levels in both tanks after a sufficient period 
of time has elapsed, H1(∞) and H2(∞), can be obtained from the solution of the following 
system of equations:
	
a H
a H
b F
a H
a H
b F
11
1
12
2
1 1
21
1
22
2
2
1
(
)
(
)
(
)
(
)
∞+
∞=
∞+
∞=
	
	
c.	 Solve for H1(∞) and H2(∞) in terms of the system parameters A1, A2, R12, R2 and the con­
stant inflow F1 Are the results different if the tanks are not initially empty? Explain.
	
d.	 Using the following baseline values unless otherwise stated:
	
A
A
R
R
F
1
2
12
2
1
25
3
1
5
=
=
=
=
=
 ft
 ft per ft /min
 ft per ft /min
2
3
3
,
,
,
 ft /min
3
	
	
Find the eventual fluid levels H1(∞) and H2(∞) and flows F0(∞) and F2(∞).
	
e.	 Repeat Part (d) with A2 = 75 ft2.
	
f.	 The valve between the tanks is opened some resulting in R12 = 2 ft per ft3/min. The remain­
ing baseline values remain the same. Find H1(∞), H2(∞) and flows F0(∞) and F2(∞).
	
g.	 Suppose Tank 1 initially holds 10 ft of liquid and Tank 2 has 4 ft. Find the initial rates of 
change in level for both tanks.
	
h.	 Is it possible for the fluid level in Tank 2 to exceed the level in Tank 1? Explain.
	
i.	 How does the model change if there is a separate flow, say F3(t) directly in to the top of Tank 2?
	1.3	 Consider a cone shaped tank with circular cross sectional area like the one shown in the figure 
below.
	
a.	 How does this affect the derivation of the mathematical model?
	
b.	 Find the math model for this case.

10
Simulation of Dynamic Systems with MATLAB® and Simulink®
1.3  DIFFERENCE EQUATIONS
The tank model from the previous section, given in Equation 1.18, is a first-order differential equa­
tion. First-order systems, that is, systems governed by a first-order differential equation are treated 
in detail in Chapter 2. Simulation of a first-order system requires finding an approximate solution 
to the differential equation.
A first-order system is shown in Figure 1.7, where u(t), t ≥ 0 is the input; y(t), t ≥ 0 is the output; 
y(0) is the initial condition, i.e. y(t) at t = 0; f [y(t),u(t)] is the mathematical function model of the 
dynamic system.
Examples of f [y(t),u(t)] are:
	
1.	f [y(t),u(t)] = ay(t)	
linear first-order system with no input
	
2.	f [y(t),u(t)] = ay(t) + bu(t)	
linear first-order system with input u(t)
	
3.	f [y(t),u(t)] = ay2(t) + bu(t)	
nonlinear first-order system with input u(t)
Given the system model,
	
d
dt y t
f y t u t
( )
[ ( ), ( )]
=
	
(1.19)
An approximate solution for the response y(t), t ≥ 0, given the input u(t), t ≥ 0 and the initial condi­
tion y(0), can be obtained at discrete points in time tn = nT, n = 0, 1, 2, …. The discrete points are 
separated from each other by the step size T.
The approximate solution is yA(n), n = 0, 1, 2, … where yA(n) ≈ y(tn) = y(nT), n = 0, 1, 2, ….
Figure 1.8 illustrates the difference between y(t), t ≥ 0 and yA(n), n = 0, 1, 2, …. It is useful for 
deriving an equation which can be solved to generate yA(n), n = 0, 1, 2, ….
First-order system: 
y(t)
u(t)
y(t) = f[y(t),u(t)]
d
dt
y(0)
FIGURE 1.7  A first-order system with input u(t) and output y(t).
(n + 1)T
Tangent to y(t) at t = nT
nT 
t 
y(t) 
y[(n + 1)T]
yA(n + 1)
yA(n)
y(nT)
T
FIGURE 1.8  Illustration of the difference between y(t) and yA(n).

11
Mathematical Modeling
The tangent to y(t) at t = nT is shown in Figure 1.8. Its slope is numerically equal to the first deriva­
tive dy
dt  at t = nT. From Equation 1.19,
	
At 
( )
[ (
), (
)]
t
nT
d
dt y t
f y nT u nT
t
nT
=
=
=
,
	
(1.20)
Approximating d
dt y t
t
nT
( )
=
 by the slope of the line connecting yA(n) and yA(n + 1),
	
f y nT u nT
y
n
y
n
T
A
A
[ (
), (
)]
(
)
( )
≈
+
−
1
	
(1.21)
Replacing y(nT) with yA(n), and writing u(nT) as u(n) for short,
	
f y
n u n
y
n
y
n
T
A
A
A
[
( ), ( )]
(
)
( )
=
+
−
1
	
(1.22)
Note the use of the equality in Equation 1.22, which enables yA(n) to be solved for, giving
	
y
n
y
n
Tf y
n u n
n
A
A
A
(
)
( )
( ), ( )   
+
=
+


=
1
0 1 2
,
, , ,…	
(1.23)
Equation 1.23 is called a difference equation, and given the initial condition yA(0), is easily solved 
in a recursive manner. To illustrate, consider the first-order system
	
d
dt y t
y t
u t
t
y
( )
( )
( )
( )
+
=
=
=
2
3
0
1
,
	
(1.24)
	
dy
dt
f y u
y
u
=
= −
+
(
)
,
2
	
(1.25)
Using Equation 1.23, the difference equation for obtaining yA(n), n = 0, 1, 2, … is
	
y
n
y
n
T
y
n
u n
n
A
A
A
(
)
( )
[
( )
( )],  
+
=
+
−
+
=
1
2
0 1 2
, , ,... 	
(1.26)
	
=
−
+
=
(
)
( )
( ),  
1
2
0 1 2
T y
n
Tu n
n
A
, , ,... 	
(1.27)
Letting α = (1−2T),
	
y
n
y
n
Tu n
n
A
A
(
)
( )
( ),  
+
=
+
=
1
0 1 2
α
, , ,... 	
(1.28)
where
	
u n
u nT
u t
t
nT
n
t
nT
t
nT
( )
(
)
( )
,  
,
=
=
=
=
=
=
=
3
3
0 1 2
, ,
... 	
(1.29)
Replacing u(n) in Equation 1.28 with u(n) in Equation 1.29 gives
	
y
n
y
n
nT
n
A
A
(
)
( )
,  
+
=
+
=
1
3
0 1 2
2
α
, , ,...	
(1.30)
Equation 1.30 is the difference equation which is solved recursively to generate the approximate 
solution yA(n), n = 0, 1, 2, ….

12
Simulation of Dynamic Systems with MATLAB® and Simulink®
Starting with n = 0,
	
n
y
y
T
A
A
=
=
+
0
1
0
3
2
:
( )
( )
(0)
α

(1.31)
Choosing yA(0) = y(0) gives
	
n
y
y
A
=
=
0
1
0
:
( )
( )
α

(1.32)
	
n
y
y
T
A
A
=
=
+
1
2
1
3
2
:
( )
( )
(1)
α

(1.33)
	
=

+
α αy
T
( )
0
3
2

(1.34)
	
=
+
α2
2
0
3
y
T
( )

(1.35)
	
n
y
y
T
A
A
=
=
+
2
3
2
3
2
:
( )
( )
(2)
α

(1.36)
	
=
+

+
α α2
2
2
0
3
6
y
T
T
( )

(1.37)
	
=
+
+
α
α
3
2
0
3
2
y
T
( )
(
)

(1.38)
	
n
y
y
T
A
A
=
=
+
3
4
3
3 3
2
:
( )
( )
( )
α

(1.39)
	
=
+
+

+
α α
α
3
2
2
0
3
2
9
y
T
T
( )
(
)

(1.40)
	
=
+
+
+


α
α α
4
2
0
3
2
3
y
T
( )
(
)

(1.41)
The smaller the time step T, the closer yA(n), n = 0, 1, 2, … will be to the exact solution y(t) at 
t = 0, T, 2T, …. Finding an approximate solution for y(t) on the interval 0 ≤ t ≤ tfinal requires t
T
final  
iterations of the difference equation. There is a trade-off between accuracy of the approximate 
­solution yA(n), n = 0, 1, 2, … and the computational effort to generate it.
Equation 1.25 with input u(t) = 3t and initial condition y(0) = 1 is easily solved by analytical 
methods. The exaxt solution is given by
	
y t
e
t
t
t
( )
 
=
+
−
≥
−
1 75
1 5
0 75
0
2
.
.
.
,
	
(1.42)
EXAMPLE 1.1
	
a.	Find the approximate solution to the differential equation (Equation 1.24) over the 
interval 0 ≤ t ≤ 2 by recursive solution of the difference equation (Equation 1.30) for 
T = 0.01, 0.025, 0.05 and 0.1. Plot the approximate solution for each value of T and the 
exact solution given in Equation 1.42.
	
b.	Compare approximate and exact solutions at t = 0, 0.2, 0.5, 1, 1.5, 2 when T = 0.01 and 
T = 0.1.
	
a.	Matlab program “Ch1_Ex1_1.m” solves the difference equation (Equation 1.30) recur­
sively and also computes points along the exact solution (Equation 1.42). The results are 
shown in Figure 1.9.
	
	
Note, the approximate solution is known only at times tn = nT, n = 0, 1, 2, …. For 
purposes of clarity, only a subset of the discrete points are plotted except for the case 
when T = 0.1.

13
Mathematical Modeling
	
	
Figure 1.9 illustrates how the accuracy of the approximate solution can be improved 
by decreasing the time step T (at the expense of requiring additional calculations). 
The approximate solutions are seen to converge to the exact solution as the time step 
decreases. Further it appears that setting the time step below T = 0.025 may not be nec­
essary unless extreme accuracy is required.
	
b.	Tables 1.1 and 1.2 compare the approximate and exact solution at t = 0, 0.2, 0.5, 1, 1.5 
and 2 when T = 0.01 and T = 0.1, respectively.
	 	
Note the percent error,
	
% Error
( )
( )
( )
=
×
−
100
y
n
y t
y t
A
n
n
	
(1.43)
	
	 is roughly 10 times greater when the time step T = 0.1 compared to when T = 0.01.
Let us now apply what we have learned about finding approximate solutions of first-order system 
response to the tank example in Section 1.2. Recall that the tank dynamics are governed by the 
first-order differential equation (Equation 1.18),
	
A dH
dt
R H
F
+
=
1
1
	
(1.44)
Solving for the derivative function f (F1, H) gives
	
 f F H
dH
dt
A F
R H
( ,
)
1
1
1
1
=
=
−





	
(1.45)
2.5
yA(n), n = 0, 8, 16, ...
Exact and approximate solutions for various numerical values of the time step T
y(t), t ≥ 0
T = 0.01
yA(n), n = 0, 4, 8, ...
y(t), t ≥ 0
T = 0.025
1.5
1.5
0.5
0
0.5
1
1
2
2
1.5
0
0.5
1
2
2.5
1.5
0.5
1
2
2.5
yA(n), n = 0, 2, 4, ...
y(t), t ≥ 0
T = 0.05
yA(n), n = 0, 1, 2, ...
y(t), t ≥ 0
T = 0.1
1.5
1.5
0.5
0
0.5
1
1
2
2
1.5
0
0.5
1
2
2.5
1.5
0.5
1
2
FIGURE 1.9  Comparison of exact and approximate solution of first-order system response for different 
values of T.

14
Simulation of Dynamic Systems with MATLAB® and Simulink®
Based on Equation 1.23, the difference equation for approximating the tank level response is
	
 H n
H n
Tf F n H n
A
A
A
(
)
( )
[ ( ),
( )]
+
=
+
1
1

(1.46)
	
=
+
⋅
−






H n
T A F n
R H n
A
A
( )
( )
( )
1
1
1

(1.47)
	
=
−






+





1
1
T
AR H n
T
A F n
A( )
( )

(1.48)
Given the input flow F1(t), t ≥ 0 and the intial tank level HA(0), Equation 1.48 is the difference 
equation which can be solved recursively to obtain the approximate tank level response HA(n), 
n = 0, 1, 2, …. Starting with n = 0,
   
n
H
T
AR H
T
A F
A
A
=
=
−






+





0
1
1
0
0
1
:
( )
( )
( )

(1.49)
   
n
H
T
AR H
T
A F
A
A
=
=
−






+





1
2
1
1
1
1
:
( )
( )
( )

(1.50)
	
=
−






−






+






1
1
0
0
1
T
AR
T
AR H
T
A F
A( )
( )




+





T
A F1 1( )

(1.51)
	
=
−






+
−












1
0
1
0
2
1
T
AR
H
T
AR
T
A F
A( )
( )+





T
A F1 1( )

(1.52)
TABLE 1.2
Comparison of Exact and Approximate (T = 0.1) Solution 
of First-Order System Response at Different Times
n
tn = nT
yA(n)
y(tn)
% Error
0
0
1
1
0
2
0.2
0.7240
0.7231
0.13
5
0.5
0.6743
0.6438
4.74
10
1.0
1.0718
0.9868
8.61
15
1.5
1.7063
1.5871
7.51
20
2.0
2.4148
2.2821
5.98
TABLE 1.1
Comparison of Exact and Approximate (T = 0.01) Solution 
of First-Order System Response at Different Times
n
tn = nT
yA(n)
y(tn)
% Error
0
0
1
1
0
20
0.2
0.7233
0.7231
0.03
50
0.5
0.6468
0.6438
0.47
100
1.0
0.9951
0.9868
0.84
150
1.5
1.5988
1.5871
0.74
200
2.0
2.2955
2.2821
0.59

15
Mathematical Modeling
 
n
H
T
AR
T
AR
H
T
AR
A
A
=
=
−






−






+
−



2
3
1
1
0
1
2
:
( )
( )










+











+
T
A F
T
A F
T
A
1
1
0
1
( )
( )





F1 2
( )
	
(1.53)
	
=
−






+
−












1
0
1
0
3
2
1
T
AR
H
T
AR
T
A F
A( )
( )
( )
( )
+
−






+





1
1
2
1
1
T
AR F
T
A F

(1.54)
Based on the first few iterations, a general formula for finding HA(n), for any n, is
	
H n
T
AR
H
T
A
T
AR
A
n
n
( )
( )
=
−






+





−






1
0
1
−−
=
−
∑
=
k
k
n
F k
n
1
0
1
1
0 1 2
( ),
, , ,...
	
(1.55)
where HA(0) is replaced by the initial tank level H(0).
When specific values of HA(n) are required, say HA(100), Equation 1.55 eliminates the need for 
recursive solution of Equation 1.48 to find HA(n), n = 0, 1, 2, …, 99. The summation in Equation 
1.55 requires some effort; however, the z-transform introduced in Chapter 4 provides a way to 
avoid the sum altogether.
The quantity 1−






T
AR  must be less than 1 for both stable and accurate results. Keeping this in 
mind, Equation 1.55 demonstrates the diminishing influence of the initial tank level as time progresses.
Equation 1.55 also indicates that all past inputs F1(k), k = 0, 1, 2, …, n−1 are needed to obtain 
Ha(n), a property known as infinite memory. However, recent input flow values are weighted 
higher than older values (see Equation 1.54).
EXAMPLE 1.2
A tank with cross-sectional area of 10 ft2 receives a constant input flow of 5 ft3/min. The fluid 
resistance of the tank is 2 ft per ft3/min, and the tank is initially filled to a level of 4 ft.
	
a.	Find the difference equation for obtaining an approximate solution for the level H(t) 
using a time step of T = 0.25 min.
	
b.	Solve the difference equation recursively to obtain the approximate fluid level HA(n), 
n = 1, 2, 3.
	
c.	Use Equation 1.55 to find HA(3) and compare your answer to the result from part (b).
a.	 T
A
T
AR





=
=
−





= −
0 25
10
0 025
1
1
0 25
10
.
.
,
.
(
     
2
0 9875
)
.
=
	
H
H
F n
n
A( )
( )
,
( )
,
, , ,...
0
0
4
5
0 1 2
1
=
=
=
=
     
	
	
The difference equation (Equation 1.48) is
	
H n
H n
n
A
A
(
)
.
( )
( .
) ,
, , ,...
+
=
+
=
1
0 9875
0 025 5
0 1 2
	
(1.56)
	
b.	HA(n), n = 1, 2, 3 are computed as follows:
	
n
H
H
A
A
=
=
+
=
0
1
0 9875
0
0 125
:
4.0750
( )
.
( )
.
	
(1.57)
	
n
H
H
A
A
=
=
+
=
+
=
1
2
0 9875
1
0 125
0 9875 4 0750
0 125
4 1491
:
( )
.
( )
.
.
( .
)
.
.
	
(1.58)

16
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
n
H
H
A
A
=
=
+
=
+
=
2
3
0 9875
2
0 125
0 9875 4 1491
0 125
4 2222
:
( )
.
( )
.
.
( .
)
.
.
	
(1.59)
	
c.	From Equation 1.55 with n = 3,
	
HA
k
k
( )
( .
) ( )
.
( .
)
( )
.
.
3
0 9875
4
0 025
0 9875
5
3 8519
0 025
3
0
2
3
1
=
+
=
+
=
−−
∑
( .
) ( )
( .
)( )
.
0 9875
5
0 9875 5
5
4 2222
2
+
+


=
	
Due to the simple nature of the input, that is, F t
F
1( ) = , t ≥ 0, the analytical solution of the first-
order differential equation model (Equation 1.44) is given by
	
H t
RF
H
RF e t AR
( )
[ ( )
]
/
=
+
−
−
0
	
(1.60)
It is instructive to compare the approximate solution based on the difference equation approach 
with the exact solution shown in Equation 1.60. Table 1.3 includes both solutions at equally 
spaced intervals for the first 2 min of the response.
Graphs of the exact response H(t) and the approximate response HA(n), n = 0, 8, 16, … are 
shown in Figure 1.10.
By observation of Figure 1.10, it appears that the exact and approximate solutions for the tank 
level are in close agreement. The step size T is the determining factor in terms of how close the 
two solutions are at the discrete points in time where the approximate solution is defined.
Generally speaking, an assessment of whether the numerical value selected for T is reasonable 
cannot be made on the basis of comparing the approximate solution with the exact solution to 
the differential equation. Analytical solutions are rare due to the complexity of most real-world 
system models. A logical approach to finding an acceptable step size is to obtain approximate 
solutions with different step sizes (an order of magnitude apart) and comparing the results. If the 
approximate solutions are substantially identical, the smaller step size is eliminated from consid­
eration. Conversely, if the approximate solutions are not close, the larger value of T is discarded. 
Eventually, a value for T will be found, which balances accuracy and computational requirements. 
This point will be revisited in greater detail after the subject of numerical integration is discussed.
TABLE 1.3
Comparison of Approximate and 
Exact Tank Level Response
n
tn = nT
HA(n)
H(tn)
0
0
4.0
4.0
1
0.25
4.0750
4.0745
2
0.5
4.1491
4.1481
3
0.75
4.2222
4.2208
4
1.0
4.2944
4.2926
5
1.25
4.3657
4.3635
6
1.5
4.4362
4.4335
7
1.75
4.5057
4.5027
8
2.0
4.5744
4.5710

17
Mathematical Modeling
EXERCISES
	1.4	 Find the difference equation, similar to Equation 1.48, relating F0(n + 1) to F0(n) and F1(n).
	1.5	 A tank with cross sectional area A = 5 ft2 is initially filled to a level of 10 ft. The flow out is 
given by F0 = H/R, R = 1 ft per ft3/min. There is no flow in to the tank.
	
a.	 Find HA(n), n = 0, 1, 2, …, 10 when T = 2.5 min.
	
b.	 Find HA(n), n = 0, 1, 2, …, 25 when T = 1 min.
	
c.	 Find HA(n), n = 0, 1, 2, …, 100 when T = 0.25 min.
	
d.	 Plot the results and comment on the differences.
	1.6	 Repeat Exercise 1.5 for the case where the outflow is described by F0 = cH1/2, c = 3 ft3/min 
per ft1/2.
	1.7	 Rework Example 2.1 using the Trial and Error method for determining a suitable value of T. 
Start with T = 10 min and calculate HA(n), n = 0, 1, 2, …, nf where nfT = 100 min. Repeat the 
steps with T = 5 min, 2.5 min, 1.25 min, etc. until the approximations of H(10), H(20), H(30), …, 
H(100) are in agreement to at least one place after the decimal point. Use Table E1.7 for com­
parisons. Extend the table to smaller values of T if necessary.
TABLE E1.7
n
HA(n)
T = 10
n
HA(n)
T = 5
n
HA(n)
T = 2.5
n
HA(n)
T = 1.25
0
0
0
0
1
2
4
8
2
4
8
16
3
6
12
24
4
8
16
32
5
10
20
40
6
12
24
48
7
14
28
56
8
16
32
64
9
18
36
72
10
20
40
80
11
T = 0.25 min
HA(n), n = 0, 8, 16, ...
H(t), t ≥ 0
0
20
10
40
30
60
50
80
70
t (min)
90
100
Approximate and exact tank level vs. time
H (ft)
0
1
2
3
4
5
6
7
8
9
10
FIGURE 1.10  Approximate and exact solutions for tank level vs. time.

18
Simulation of Dynamic Systems with MATLAB® and Simulink®
	1.8	 An alternate model of the tank relates the outflow and liquid level according to
	
F t
H t
0
1 2
( )
( )
/
=


α
	
	
a.	 Develop a new discrete-time model of the tank using the above relationship in conjunction 
with the differential equation A(dH/d) + F0 = F1. The tank cross-sectional area is 10 ft2 
and the input flow is constant at 5 ft3/min. The tank is initially filled to a level of 4 ft. 
Assume α = 2 ft3/min per ft1/2.
	
b.	 Calculate the approximate tank level for the first minute using a step size T = 0.25 min.
	
c.	 Consider the same tank with zero flow in and an initial fluid level of 25 ft. Write a ­program 
to calculate the approximate level of the tank as it empties. Choose T = 0.1 min.
	
d.	 The analytical solution for the level H(t) when F1(t) = 0, t ≥ 0 is given by
	
H t
H
t
A
( )
/
=
−






0
1 2
2
2
α
	
	
where H0 is the initial tank level. Compare the results from Part (c) to the exact solution. 
Present the comparison of results in tabular and graphical form.
	1.9	 A holding tank serves as an effective way of smoothing variations in the flow of a liquid. For 
example, suppose the liquid flow rate from an upstream process is
	
F t
F
f
t
T
t
1
2
0
( )
sin
,
=
+






≥
π
	
	
where F is an average flow, f is the fluctuation about the average flow, and T is the period of 
the fluctuations. Nominal parameter values for the input flow rate are F = 250 ft /min
3
, f = 
50 ft3/min and T = 15 min.
	
	
A holding tank is placed between the source F1(t) and a downstream process which 
requires a more constant input flow rate, F0(t) as shown in Figure E1.9. The ­downstream 
process requires that the sustained fluctuations in the flow F0(t) be no larger than 10 ft3/min. 
Assume the tank is linear and the fluid resistance R = 0.25 ft per ft3/min.
	
a.	 Find the difference equation for F0,A(n), n = 0, 1, 2, 3, …. Leave the tank cross sectional 
area A as a parameter.
	
b.	 Write a program to solve the difference equation with Δt = 0.5 min for a starting value of 
A = 100 ft2. Graph both F0,A(n) and HA(n), n = 0, 1, 2, …  for a period of time ­sufficient to 
determine if the design criterion is satisfied. Assume the tank is initially empty.
FIGURE E1.9

19
Mathematical Modeling
	
c.	 Repeat part (b) with a new value of A until the design criterion is satisfied, i.e. the sustained 
fluctuations in F0(t) are equal to 10 ft3/min.
	
d.	 Graph the discrete-time signals F1(n) and F0,A(n), n = 0, 1, 2, 3, …  for the tank whose area 
is the value determined in Part (c).
1.4  FIRST LOOK AT DISCRETE-TIME SYSTEMS
The variables F1(t), F0(t), and H(t) in the liquid tank shown in Figure 1.3 are referred to as con­
tinuous-time (or simply continuous) signals. The reason is because there is a continuum of values 
betwen any two points along the t-axis where the variables are defined. Equation 1.18 is a contin­
uous-time model and the system is a continuous-time system because it involves only continuous-
time variables.
In contrast to the continuous-time signals F1(t), F0(t), and H(t), the sequence of sampled 
input flow values, F1(n), n = 0, 1, 2, … and the sequence of approximate tank levels HA(n), 
n = 0, 1, 2, … are classified as discrete-time (discrete for short) signals because the independent 
variable “n” is discrete in nature. The difference equation (Equation 1.48) is referred to as a dis­
crete-time model, and the underlying system with purely discrete-time input and output signals is 
likewise a discrete-time system.
Figure 1.11 illustrates both the continuous and discrete representations of the tank dynamics.
1.4.1  Inherently Discrete-Time Systems
The discrete model of the tank dynamics relates HA(n), an approximation of the continuous tank 
level H(t) and F1(n), the sampled version of the continuous flow F1(t). In contrast, inherently discrete-
time systems involve discrete signals which are not related to continuous signals. For example, 
consider a discrete-time system governed by the difference equation
	
y n
y n
u n
y n
n
( )
(
)
( )
(
) ,
, , ,
=
−
+
−






=
1
2
1
1
0 1 2 …
	
(1.61)
Equation 1.61 is simply a rule for transforming a discrete input signal u(n) into an appropriate 
discrete output signal y(n). Is this discrete-time system useful? Let us investigate its behavior for the 
case where u(n) is a constant, for example, u(n) = 25, n = 0, 1, 2, …. Before we are able to com­
pute y(n), n = 0, 1, 2, …, a starting or initial value, in this case y(−1) must be given. If we choose 
y(−1) = 1, the first few values of y(n) are
	
n
y
y
u
y n
=
=
−
+
−





=
+





=
0
0
1
2
1
0
1
1
2 1
25
1
13
:
( )
(
)
( )
(
)
	
(1.62)
Continuous-time system 
Discrete-time system 
T
1
dH
dt
R
HA(n)
H = F1
H(t)
A
F1(t)
F1(t)
⎛
⎜
⎝
⎛
⎜
⎝
⎞
⎟
⎠
⎞
⎟
⎠
HA(n)
T
AR
T
A
HA(n + 1) = 1–
+
+
F1(n)
F1(n)
FIGURE 1.11  Continuous-time and discrete-time representations of tank dynamics.

20
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
n
y
y
u
y
=
=
+





=
+





=
1
1
1
2
0
1
0
1
2 13
25
13
7 4615
:
( )
( )
( )
( )
.
	
(1.63)
	
n
y
y
u
y
=
=
+





=
+






2
2
1
2
1
2
1
1
2 7 4615
25
7 4615
:
( )
( )
( )
( )
.
.
= 5 4060
.
	
(1.64)
	
n
y
y
u
y
=
=
+





=
+






3
3
1
2
2
3
2
1
2 5 4060
25
5 4060
:
( )
( )
( )
( )
.
.
= 5 0152
.
	
(1.65)
	
n
y
y
u
y
=
=
+





=
+






4
4
1
2
3
4
3
1
2 5 0152
25
5 0152
:
( )
( )
( )
( )
.
.
= 5 0000
.
	
(1.66)
Using different positive constants for u(n) and other starting values for y(−1) will reveal an inter­
esting property of the system, namely
	
lim ( )
n
y n
u
→∞
=
	
(1.67)
Hence, the primary purpose of the discrete-time system governed by Equation 1.61 is to compute 
the square root of its positive-valued constant input u(n). The discrete signals u(n) and y(n) are plot­
ted in Figure 1.12.
Another inherently discrete-time system is one we are all familiar with, namely, an interest- 
bearing account such as a bank account. The discrete signals of interest are y(n), the account balance 
at the end of the nth interest period, and u(n), the net deposit for the nth interest period. Figure 1.13 
shows the discrete-time system.
Consider an account with an interest rate i (per interest period). The balance at the end of the nth 
interest period, y(n) is the sum of
•	 the balance at the end of the (n – 1)st period: y(n – 1)
•	 the interest earned for the nth interest period: i ⋅ y(n – 1)
•	 the net deposit for the period: u(n)
30
20
10
0
–1
1
2
3
n
4
5
6
0
–1
1
2
3
4
5
6
Input of inherently discrete-time system
Output of inherently discrete-time system
15
10
u(n)
y(n)
5
0
0
FIGURE 1.12  Illustration of using discrete-time system in Equation 1.61 to find a square root.

21
Mathematical Modeling
Therefore, the model for this inherently discrete-time system is
	
y n
y n
iy n
u n
( )
(
)
(
)
( )
=
−
+
−
+
1
1
	
(1.68)
EXAMPLE 1.3
A college trust fund is set up with $5000 on Jan 1, 2000. Starting on Jan 1, 2001 and every year 
thereafter, $1000 is added to the fund, which earns 7.5% interest annually.
	
a.	Track the end of year fund balance for the first several years.
	
b.	Find the account balance at the end of Year 18th year.
	
a.	The discrete-time model is
	
y n
y n
y n
u n
n
( )
(
)
.
(
)
( ),
, , ,
=
−
+
−
+
=
1
0 075
1
1 2 3
 
…	
(1.69)
	
	 with input
	
u n
n
( )
,
, , ,
=1000
1 2 3
 =
…	
(1.70)
	
	 and initial condition y(0) = 5000.
	
	
The account balance at the end of years 1, 2, and 3 are computed as follows:
	
n
y
y
y
u
=
=
+
+
=
+
+
=
1
1
0
0 075 0
1
5000
0 075 5000
1000
6375
:
( )
( )
.
( )
( )
.
(
)
	
(1.71)
	
n
y
y
y
u
=
=
+
+
=
+
+
=
2
2
1
0 075 1
2
6375
0 075 6375
1000
7853 13
:
( )
( )
.
( )
( )
.
(
)
.
	
(1.72)
	
n
y
y
y
u
=
=
+
+
=
+
+
=
3
3
2
0 075 2
3
7853 13
0 075 7853 13
1000
9
:
( )
( )
.
( )
( )
.
.
(
.
)
442 11
.
	
(1.73)
	
b.	The recursive solution could be continued for n = 4, 5, 6, …, 18 resulting in the fund’s 
­balance at the end of the 18th year. However, a general solution of the discrete-time 
model is preferable since it can be evaluated for any value of the variable n.
Expressing the discrete-time model in Equation 1.68 as
	
y n
i y n
A n
( )
(
) (
)
,
, , ,
=
+
−
+
=
1
1
1 2 3
 
…	
(1.74)
	
=
−
+
=
αy n
A n
(
)
,
, , ,...
1
1 2 3
 
	
(1.75)
where α = 1 + i and A is the constant net deposit each interest period.
Savings
account
u(n)
y(n)
FIGURE 1.13  Example of an inherently discrete-time system.

22
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
n
y
y
A
=
=
+
1
1
0
:
( )
( )
α
	
(1.76)
	
n
y
y
A
=
=
+
2
2
1
:
( )
( )
α
	
(1.77)
	
=
+
+
α α
[
( )
]
y
A
A
0
	
(1.78)
	
=
+
+
α
α
2 0
y
A
A
( )
	
(1.79)
	
n
y
y
A
=
=
+
3
3
2
:
( )
( )
α
	
(1.80)
	
=
+
+
+
α α
α
[
( )
]
2 0
y
A
A
A	
(1.81)
	
=
+
+
+
α
α
α
3
2
0
y
A
A
A
( )
	
(1.82)
suggesting the general expression for y(n) is
	
y n
y
A n
n
n
( )
( )
(
...
) ,
, , ,...
=
+
+
+
+
+
=
−
α
α
α
α
0
1
0 1 2
2
1
 
	
(1.83)
Further simplification is possible using the closed form of the finite geometric series in 
Equation 1.83 resulting in
	
y n
y
A n
n
n
( )
( )
,
, , , ...
=
+
−
−






=
α
α
α
0
1
1
0 1 2
 
	
(1.84)
The account balance after 18 years is computed from Equation 1.84 with α = 1.075, y(0) = 5000 
and A = 1000.
	
y(
)
( .
) (
)
( .
)
.
,
18
1 075
5000
1
1 075
1 1 075
1000
54 05
18
18
=
+
−
−






=
6 41
.
	
(1.85)
The results from part (a) can be verified using the general solution in Equation 1.84.
EXERCISES
	1.10	 Prove that the output of the discrete-time system in Equation 1.61 will approach the square 
root of the input, any positive constant “A”. In other words, show that
	
Lim
n
y n
→∞
=
( )
A
	
where u(n) = A, n = 0, 1, 2, 3, …
1.5  CASE STUDY: POPULATION DYNAMICS (SINGLE SPECIES)
The population of a country is under investigation. Unlike the liquid tank example, there is no scien­
tific principle to serve as a foundation for deriving a mathematical model that can be used to predict 
future populations. Instead, empirical observations of historical birth and death rates, immigration 
and emigration patterns, and a host of other pertinent data are utilized.
One hundred years of observed population data, recorded at intervals of 10 years, is given in 
Table 1.4.

23
Mathematical Modeling
Based on the available data, researchers are convinced that the population is adequately modeled 
by the following differential equation, referred to in the literature as logistic growth (Haberman 
1977).
	
dP
dt
cP P
P
m
=
−
(
)
	
(1.86)
P = P(t) is the population “t” years after the initial population was recorded. The parameters 
c and Pm influence the specific growth pattern behavior. The model ignores immigration and 
emigration and all other external inputs, which influence dP/dt, the rate at which the population 
changes.
The system model in Equation 1.86 is said to be autonomous, meaning there are no additional 
terms independent of P, as might be the case if immigration or emigration inputs as a function of 
time were considered. The dynamics depend soley on initial conditions and the system parameters. 
It is also referred to as an unforced system since there are no external inputs.
Statistical analyses of the population data has resulted in estimated values for c and Pm to be 
1.25 × 10−9 and 25 million, respectively. It is now 100 years since the initial population was mea­
sured. Government planners are interested in determining what the likely population will be over 
the next several decades. A method is needed to obtain an approximate solution for P(t), that is, a 
difference equation for PA(n) ≈ P(nT), n = 0, 1, 2, … is required.
Emplying the method from Section 1.2 for obtaining a difference equation to approximate the 
dynamics of a first-order system,
	
P n
P n
T f P n
A
A
A
(
)
( )
[
( )]
+
=
+
⋅
1
	
(1.87)
where f [pA(n)] is the derivative function, that is,
	
f P n
cP n P
P n
A
A
m
A
[
( )]
( )[
( )]
=
−
	
(1.88)
Combining Equations 1.87 and 1.88 results in
	
P n
P n
TcP n P
P n
A
A
A
m
A
(
)
( )
( )[
( )]
+
=
+
−
1
	
(1.89)
TABLE 1.4
Population Data for 100 Years
t (years)
Pobs(t), millions
0
3.0000
10
3.2276
20
4.5759
30
6.9570
40
8.7618
50
9.1536
60
11.2669
70
14.5153
80
16.5059
90
17.9563
100
19.5078

24
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note, Equation 1.89 could just as easily have been found by simply replacing dP
dt  in Equation 
1.86 with the divided difference term P n
P n
T
A
A
(
)
( )
+
−
1
 and replacing P with PA(n) on the right hand 
side of the equation.
Simplifying Equation 1.89 leads to the required difference equation, namely
	
P n
Tc P
P n
P n
A
m
A
A
(
)
{
[
( )]}
( )
+
=
+
−
1
1
	
(1.90)
Since our interest is in predicting populations for 100 years and beyond, we need to solve Equation 
1.90 over a suitable range of values for the discrete-time variable “n”. The appropriate integer values 
depend on the size of our time step T. For simplicity, we shall choose T = 1 year, necessitating the 
calculation of PA(101), PA(102), …, PA(130) to obtain predictions for a 30-year time span.
A recursive solution seems like our only alternative, since a general solution is not easily achiev­
able. The Matlab file “Ch1_CaseStudy.m” includes the necessary statements to solve Equation 1.90 
recursively and produce the results shown in Table 1.5. Note, the initial value PA(0) is the initial 
observed population of 3 million.
A comparison of the numbers for Pobs(t) and PA(n) indicates that the modelers were justified in 
assuming logistic growth of the population for the 100 years corresponding to the recorded data. 
Naturally, this assumes that the approximate solution values PA(n), n = 0, 1, 2, …, 100 are reason­
ably close to the exact solution P(t), t = 0, 1, 2, …, 100.
Ordinarily, dynamic population models are not amenable to exact solutions. However, the ana­
lytical solution to Equation 1.86 is known and given in Equation 1.91.
	
P t
P P
P
P
P
e
t
m
m
cP t
m
( )
( )
( )
[
( )]
=
+
−
≥
−
0
0
0
0
,  
	
(1.91)
Knowing the exact solution, P(t), to the continuous model differential equation, we can evaluate 
P(t) at t = 0, 10, 20, …, 100 years for comparison with the discrete output PA(n), n = 0, 10, 20, …, 100 
years obtained from solution of the difference equation. This allows us to determine if the current 
step size T = 1 year needs to be adjusted.
Comparing the last two columns in Table 1.5 should convince us that the step size T does not 
need to be reduced. While its possible to reduce the discrepancy between the approximate and 
exact solutions by lowering T, it’s hardly justified in view of the fact that the logistic growth model, 
Equation 1.86, is itself only an approximate representation of the true population dynamics.
The data in Table 1.5 are presented in graphical form in Figure 1.14. The difference equation 
used to find PA(n), n = 0, 1, 2, …, 100 is used to predict the future population for the next 30 years. 
The projected populations for years 100, 120, and 130 are included in Table 1.5 and appear as data 
points in Figure 1.14.
The previous point relating to the accuracy of the approximate solution is worth reiterating. 
Extremely accurate discrete solutions of nonlinear differential equation models are generally not 
warranted unless the continuous models themselves are highly detailed with known accuracy.
Once we have an approximate solution of a continuous model response, how can we be certain 
if the two responses are in close agreement with each other? There is no simple answer; however, 
its worth remembering that
	
1.	the difference equations in the discrete-time model converge to the differential equations 
of the continuous-time model in the limiting case when the step size! approaches zero.
	
2.	the discrete-time solutions approach the exact solutions of the continuous-time model as 
the step size T is reduced to zero.
Systematically reducing the step size T until the changes in the discrete-time outputs are within 
some tolerance demonstrates this convergence and is an effective way of selecting the step size for 

25
Mathematical Modeling
future runs. We touched on this in the previous section as a way of choosing an appropriate value 
for the step size T.
On a cautionary note, the step size may have to be readjusted as conditions change, in particular, 
the frequency components of the inputs. We will have more to say about this when we consider the 
frequency response characteristics of continuous and discrete systems in Chapter 4.
Further scrutiny of the logistic growth model, Equation 1.86, reveals several important and note­
worthy characteristics of the underlying population dynamics. Expressing the model in a slightly 
different form,
TABLE 1.5
Comparison of Observed, Discrete (T = 1 year) and Continuous 
Populations
t (years)
Pobs(t), millions
n
PA(n), millions
P(t), millions
0
3.0000
0
3.0000
3.0000
10
3.2276
10
3.9161
3.9276
20
4.5759
20
5.0493
5.0759
30
6.9570
30
6.4129
6.4570
40
8.7618
40
8.0003
8.0618
50
9.1536
50
9.7778
9.8536
60
11.2669
60
11.6834
11.7669
70
14.5153
70
13.6325
13.7153
80
16.5059
80
15.5321
15.6059
90
17.9563
90
17.2976
17.3563
100
19.5078
100
18.8671
18.9078
110
110
20.2076
20.2310
120
120
21.3139
21.3226
130
130
22.2012
22.1990
25
22.5
20
17.5
T = 1 year
P(t)
PA(n), n = 0, 10, 20, ..., 130
Pobs(t)
0
20
40
60
80
t (year number)
100
120
140
Population vs. time
15
12.5
10
Population (millions)
7.5
5
2.5
0
FIGURE 1.14  Observed, discrete (approximate) and continuous populations.

26
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
g P
P
dP
dt
c P
P
m
( )
(
)
=
=
−
1
	
(1.92)
where g(P), the rate of change in population dP/dt divided by the population P, is called the popula­
tion growth rate. Different population models are normally characterized by the terms appearing on 
the right hand side of Equation 1.92.
The growth rate for a logistic growth population model is shown in Figure 1.15.
We expect the population to be increasing whenever the growth rate is positive, since a positive 
growth rate implies the instantaneous rate of change in the population, that is, the first derivative 
is also positive. The logistic population growth rate declines linearly with increasing population, 
50
45
40
35
P(0) = 50 million
P(0) = 5 million
P(0) = 0
0
20
40
60
80
t (year number)
100
120
140
160
180
Carrying capacity: Pm = 25 million
Logistic growth for initial populations P(0) from 0 to 50 million
30
25
20
Population (millions)
15
10
5
0
FIGURE 1.16  Logistic growth with different initial populations.
50
45
40
35
g[P(0)]
g[P(130)]
0
Population growth rate vs population
30
25
20
g(P), millions of individuals per year per individual
15
10
5
–0.03
–0.02
–0.01
–0.04
0.04
0.03
0.02
0.01
0
Pm = 25 million
P (millions)
FIGURE 1.15  Plot of growth rate for a logistic growth population.

27
Mathematical Modeling
eventually reaching zero when the population reaches Pm. In logistic growth models, Pm is called the 
carrying capacity, which equals 25 million in this example.
Observe from Figure 1.14 that the discrete and continuous model outputs for 130 years ranged 
from the initial population of 3 million people to somewhere around 22 million people. Looking 
at the line segment in Figure 1.15, corresponding to this range of populations, we notice that 
the growth rate is positive. Hence the population should be monotonically increasing, as indeed 
it was.
Is it possible for a population P(t) governed by a logistic growth model to ever assume values on 
both sides of its carrying capacity Pm? For example, is the population growth shown in Figure 1.14 
capable of exceeding Pm = 25 million if we wait long enough? Figure 1.16 shows population time 
histories for the logistic growth model considered previously (c = 1.25 × 10−9, Pm = 25 × 106) with 
different starting populations.
It is clear that the population approaches its carrying capacity from below or above in 
asymptotic­ fashion. We should not be surprised if we consider what happens to the population 
growth rate g(P) as the population approaches its carrying capacity from either direction (see 
Figure 1.15).
EXERCISES
	1.11	 Assume the logistic growth population model accurately predicts future populations.
	
a.	 Some time in the future, the population will reach 98% of its carrying capacity. Find how 
many more years will it take for this to occur by using the difference equation given in 
Equation 1.89. Does it make a difference whether you start from PA(0) = 3 million or 
PA(130) = 22.2012 million from Table 1.5?
	
b.	 Compare the answer obtained in Part (a) with the analytical solution for P(t).
	
c.	 The population growth rate g(P) vs P in Figure 1.15 does not explicitly involve time. Label 
the points on the growth rate curve corresponding to {ti, P(ti)} where t0 = 0, t1 = 25, t2 = 50, 
t3 = 75, t4 = 100.
	
d.	 The carrying capacity Pm in a logistic growth model is an equilibrium population, mean­
ing that if the population at some point in time were equal to Pm it would remain there 
forever. Investigate whether its stable or not by supposing the population were slightly less 
or slightly more than Pm and determine if the population returns to the carrying capacity. 
Obtain several approximate solutions corresponding to different initial populations reason­
ably close to Pm.
	
e.	 Find the other equilibrium population of the logistic growth model and determine if its stable.
	1.12	 A simpler model for population growth of a species is one in which the growth rate is assumed 
constant, that is independent of the population. Mathematically, this is represented by
	
Growth ate 
 
R
=
=
=
g P
P
dP
dt
k
( )
1
	
		
	
Suppose a culture of bacteria is increasing in size according to the constant growth rate 
model above. The initial bacteria population is P0.
	
a.	 Develop the difference equation for the discrete system approximation of the continuous 
model. Denote the discrete population as PA(n).
	
b.	 Find the general solution for PA(n), n = 0, 1, 2, 3, …. Leave your answer in terms of k and P0.
	
The constant growth rate k = 0.01 bacteria/min per bacteria and the initial number of 
bacteria is 10,000.
	
c.	 Solve the difference equation recursively using a step size T = 1 min for PA(n), 
n = 1, 2, 3, 4, 5. Compare the result for PA(5) to the value obtained from the general solu­
tion found in Part (b).

28
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	 The analytical solution to the continuous model is P(t) = P0ekt, t ≥ 0. How long does it take 
for the population to reach 1 million?
	
e.	 On the same graph, plot the continuous model output P(t), 0 ≤ t ≤ 500 and the discrete 
model output PA(n), n = 0, 50, 100, 150, …, 1000 when T = 0.5 min.
	
f.	 Explain what would happen to a population with constant growth rate k, if k were negative.

29
2 Continuous-Time Systems
2.1  INTRODUCTION
Before we start our exploration of simulation, it is important for us to have some basic knowledge of 
how linear time-invariant (LTI) dynamic systems behave. The analysis of linear systems and how 
they respond to elementary types of inputs is straightforward. Linear systems appear as building 
blocks in more complex systems. Our intuitive understanding of the entire system is enhanced by 
recognizing the fundamental behavior of its linear components. Control systems, for example, are 
oftentimes composed of linear continuous-time components interconnected to produce a desirable 
response to commanded as well as uncontrollable or disturbance inputs.
Speaking of control systems, the mathematical model of the process being controlled is often 
­nonlinear; however, a properly designed regulatory control system will limit excursions of the process 
variables. In fact, the design of the controller may be based on a linearized model of the ­nonlinear 
process owing to the wealth of tools available in the field of linear control theory. Simulation can 
play a valuable role here by shedding light on the validity of using a linearized mathematical model 
to approximate a nonlinear system model.
Modern simulation software contains user interfaces employing graphical icons that serve as build­
ing blocks for representing the linear continuous- and discrete-time components within a system. In 
order to exploit this feature, the simulation builder must understand the meaning and differences 
between the assortment of linear system blocks (integrators, first-order lags, second-order systems, 
transfer functions, and state space models) at his or her disposal. The material on first- and second-
order system response, and state variables covered in this chapter and Chapter 4, is intended as an 
introduction (or possibly a review) to the topic of linear continuous-time systems. There are literally 
dozens of excellent books on the subject of linear systems theory and linear control systems. Several 
are included in the references and the reader is encouraged to consult one or more as necessary.
In addition to the focus on linear systems in this chapter, one section includes several examples of 
nonlinear systems as well. A graphical illustration of how to linearize a nonlinear system model is 
presented as a preview of what is to come in Chapter 7 where the subject is revisited in more detail.
Simulation of continuous-time systems is not discussed in detail until Chapter 3 where the sub­
ject of numerical integration is introduced. However, a simulation model based on numerical dif­
ferentiation, similar to what was done in Chapter 1, is presented. At the conclusion of this chapter, 
the reader will be capable of representing simple continuous-time systems in state variable form and 
generate discrete-time model approximations of them, which can be solved in a recursive fashion.
2.2  FIRST-ORDER SYSTEMS
Continuous-time dynamic systems are said to be first order if the highest derivative of the dependent 
variable appearing in the mathematical model is first order. Systems in which a quantity of material 
or energy changes at a rate dependent on the amount of material or energy present are typically first 
order in nature. The general representation of a scalar first-order system is
	
d
d
y
t
f t y u
=
( , , )
	
(2.1)
where
t is the continuous-time variable
u = u(t) is the system input

30
Simulation of Dynamic Systems with MATLAB® and Simulink®
y = y(t) is the system output
f(t, y, u) is the derivative function, which relates the rate of change in y to all three arguments
Not all three arguments will be present in every first-order model. Furthermore, it is possible for 
multiple inputs u1(t), u2(t), …, ur(t) to be present.
We begin our discussion of first-order systems with a special case, namely, where the derivative 
function is an explicit linear function of the input and output given by
	
f t y u
b u t
a y t
( , , )
( )
( )
=
−
0
0
	
(2.2)
where a0 and b0 are constants. Combining Equations 2.1 and 2.2 gives
	
d
dt y t
a y t
b u t
( )
( )
( )
+
=
0
0
	
(2.3)
Equation 2.3 is a LTI, ordinary differential equation. In the time-varying case, one or both of 
the linear system parameters a0 and b0 are functions of the independent variable t. Equation 2.3 is 
commonly expressed as
	
τ d
dt y t
y t
Ku t
( )
( )
( )
+
=
	
(2.4)
where τ and K are easily related to a0 and b0 by
	
τ =
=
1
0
0
0
a
K
b
a
and
	
(2.5)
Many simple real-world dynamic systems are modeled by the first-order differential equation 
(Equation 2.4). More complex systems often behave similarly to first-order systems under cer­
tain conditions. Furthermore, higher-order system models can be reduced to a system of coupled 
first-order models. Familiarity with first-order system response will prove useful later on when we 
undertake the task of simulating higher-order linear and nonlinear systems. For this reason, we 
explore some basic properties of first-order systems modeled by Equation 2.4.
2.2.1  Step Response of First-Order Systems
When the input u(t) is constant, that is, u(t) = A, t ≥ 0, the solution to Equation 2.4 for y(t) is obtained 
using Laplace transform or classical time-domain methods. It is given below:
	
y t
y
e
KA
e
t
t
t
( )
( )
(
),
/
/
=
+
−
≥
−
−
0
1
0
τ
τ
	
(2.6)
where y(0) is the initial value of the output y(t). Several graphs of y(t) are shown in Figure 2.1 for the 
cases where y(0) = 0, K = 5, A = 2, and τ = 0.5, 2, 5, and 10.
The graphs of y(t) shown in Figure 2.1 are called the step response because the input resem­
bles a step (changing from 0 to A at t = 0). Note that the initial condition is zero in all the step 
responses.
The constant A measures the amplitude of the input and is not an inherent system parameter. 
The system parameters are K and τ (or a0 and b0 from which they are computed). The first parameter 

31
Continuous-Time Systems
K is called the system DC or steady-state gain. It is so named because the final value of the output, 
y(∞), is easily computed from
	
y
K u
K A
(
)
(
)
∞=
⋅
∞=
⋅
	
(2.7)
which in this case is y(∞) = 5 ⋅ 2 = 10 (see Figure 2.1). The final value y(∞) is unaffected by the 
initial condition y(0). However, the graph of y(t) in Equation 2.6 certainly depends on y(0), since that 
is where it starts. A first-order system like the one in Equation 2.4 is called a first-order lag because 
of the way the step response in Figure 2.1 lags the step input.
There are situations when the input to a first-order system is not a step; however, the input remains 
constant for a period of time that is largely relative to the parameter τ. Equation 2.7 enables us to 
readily compute the final output value prior to a change in the input. In essence, we are tracking 
the first-order system from one steady-state level to another, and the transient response (portion 
of the overall step response that decays to zero) is ignored. Even without knowledge of the tran­
sient response, it is possible to predict the amount of time necessary for the new steady state to be 
established.
In the first-order system modeled by Equation 2.4, the first derivative vanishes when the sys­
tem is at steady state, leaving yss = K u , where yss is the output at steady state in response to 
the constant input u . A similar result is obtained from Equation 2.6 with A replaced by u and t 
approaching ∞.
The first-order system step responses shown in Figure 2.1 correspond to four distinct values 
for the parameter τ. It is apparent that while all approach the limiting value y(∞) = 10, there is 
a noticeable difference in the amount of time required for each to get there. The individual step 
responses are correlated with the system parameter τ. This parameter is called the time constant of 
the first-order system. It is a measure of the speed of the step response as well as an indicator of the 
overall speed of the first-order system’s dynamics. A “rule of thumb” for first-order systems is that 
the transient response vanishes after four or five time constants. The transient response component 
of the step response in Equation 2.6 with y(0) = 0 is
	
y
t
KAe
t
tr
t
( )
,
/
=−
≥
−τ
0 	
(2.8)
10
9
8
7
y(∞) = K·A = 10
y(t)
First-order system step response for τ = 0.5, 2, 5, 10
6
5
4
3
2
1
0
0
5
10
15
20
25
t
30
35
40
45
50
Input u(t) = 2, t ≥ 0
τ = 5
τ = 2
τ = 10
τ = 0.5
FIGURE 2.1  Step response of first-order system with different values of τ.

32
Simulation of Dynamic Systems with MATLAB® and Simulink®
when t = 5τ,
	
y
KAe
KA
tr(
)
( .
)
5
0 0067
5
τ =−
=−
−
	
(2.9)
and the step response
	
y
KA
e
KA
(
)
(
)
.
5
1
0 9933
5
τ =
−
=
−
	
(2.10)
is more than 99% complete. After four time constants have elapsed, the step response is slightly over 
98% of its final value (see Figure 2.1).
First-order system models are commonplace in science, engineering, economics, business, etc. 
The liquid storage tank model in Section 1.2 and the population models considered in Section 1.5 
are examples of first-order system models. Another example of a physical system described in terms 
of a first-order model is the simple electric circuit shown in Figure 2.2 along with the tank.
The circuit components are a capacitor C, a resistor R, and a voltage source e0(t). There is also 
a switch that connects the source to the rest of the circuit when it is in the closed position. Like 
the tank that stores its energy as a column of liquid, the circuit’s capacitor stores energy in the 
form of electric charge. The potential energy of the fluid varies as the tank level changes and 
the electrical energy stored in the circuit varies with the amount of electrical charge stored in the 
capacitor. Both systems have a mechanism for dissipating energy. The tank does so whenever 
the level of fluid is dropping and the circuit dissipates energy in the resistor whenever there is 
current flowing.
The fluid resistance of the tank tells us the amount of effort, that is, height of liquid, required to 
produce a unit of flow from the tank. A typical unit for fluid resistance is ft per ft3/min. The electri­
cal counterpart is the electrical resistor that also measures the driving force, in this case, the voltage 
applied to the resistor, necessary to produce a unit of current flow, measured in amperes. The unit 
of electric resistance is volts/ampere, commonly called ohms.
Choosing the voltage across the capacitor vc(t) as the output, the circuit model is easily derived 
using basic principles of electrical circuits. The result is
	
RC t v t
v t
e t
c
c
d
d
+
( )
( )
( )
=
0
	
(2.11)
Comparison of Equation 2.11 with the standard form introduced in Equation 2.4 reveals the 
time constant of the circuit τ = RC and the steady-state gain K = 1(V/V). Hence, the transient 
response lasts for a period of time equal to approximately 5RC. For a constant voltage applied to 
the circuit, that is, e0(t) = E0, t ≥ 0, the steady-state voltage vc(∞) is numerically equal to E0 since 
vc(∞) = KE0 = 1 ⋅ E0.
FIGURE 2.2  Examples of systems with first-order system models: (a) storage tank and (b) RC circuit.

33
Continuous-Time Systems
The step response is obtained from Equation 2.6 with y(0) = vc(0) = 0, τ = RC, K = 1, and A = E0. 
The result is
	
v t
E
e
t
c
t RC
( )
(
),
/
=
−
≥
−
0 1
0 	
(2.12)
The step response consists of the steady-state component
	
v
E
c(
)
∞=
0 	
(2.13)
and the transient component
	
v t
E e
t
c
t RC
( )
,
/
=−
≥
−
0
0 	
(2.14)
The transient response involves the exponential e–t/RC, which is called the natural mode of the 
system. To understand this, consider the circuit response with zero applied voltage (E0 = 0) and a 
nonzero initial voltage across the capacitor vc(0). From Equation 2.6, the solution for vc(t) is
	
v t
v
e
t
c
c
t RC
( )
( )
,
/
=
≥
−
0
0 	
(2.15)
a constant times the natural mode. Natural modes of linear systems are exponential functions of 
time involving the parameters of the system, in this case, R and C. The natural modes do not depend 
on the system inputs. The unforced response of higher-order system models is referred to as the 
natural response of the system. It contains a linear combination of the natural modes (only one for 
the first-order system model). In general, the natural modes of linear system models appear in the 
transient response independent of whether the system is being forced (excited by inputs) or simply 
responding to initial conditions as in the case of an autonomous system.
EXAMPLE 2.1
A 12 V battery is used to charge the capacitor in the circuit shown in Figure 2.2. When the switch 
is closed at t = 0, the capacitor voltage is zero. Numerical values of the circuit parameters are 
R = 5000 Ω and C = 0.125 × 10−6 F (1 F = 1 A per V/s).
	
a.	Find the time constant τ, steady-state gain K, and natural mode of the circuit.
	
b.	Find the steady-state voltage vc(∞) across the capacitor.
	
c.	Determine how long it takes for the capacitor to charge up to 50% of vc(∞).
	
d.	Find and graph the transient component, steady-state component, and the complete 
response for the case where the capacitor is initially charged to 3 V.
	
a.	τ = RC = (5000 Ω) × 0.125 × 10−6 F = 0.000625 s (625 × 10−6 s)
	
	 K = 1 V/V
	
	 Natural mode: e−t/RC = e−t/0.000625, t ≥ 0
	
b.	vc(∞) = KE0 = (1 V/V) × 12 V = 12 V
	
c.	v t
E
c
t RC
t
( )
(
)
(
)
/
/
=
−
⇒
=
−
−
−
×
−
0
625 10
1
6
121
6
e
e
, which can be solved using natural loga­
rithms to give t = 0.0004332 s
	
d.	From Equation 2.6 with initial condition vc(0) = 3 V, the complete response is
	
v t
v
KE
t
c
c
t RC
t RC
t
( )
( )e
(
e
),
( )(
)(
/
/
/
=
+
−
=
+
−
−
−
×
≥
−
0
1
3
1 12
0
625 10
0
6
e
11
625 10 6
−
−
×
−
e
)
/t
	
	
The transient component is
	
V t
v
KE e
t
e
e
c
tr
c
t RC
t
( )
[
]
,
[
( )(
)]
( )
/
/
=
−
≥
=
−
= −
−
−
×
−
−
0
0
3
1 12
9
0
625
10 6
t /625
10 6
×
−
	

34
Simulation of Dynamic Systems with MATLAB® and Simulink®
	and the steady-state component is
	
v
KE
c(
)
(
)
∞=
=
=
1
12
V
V
V
12 V
	
Graphs of the steady-state, transient, and complete responses are shown in Figure 2.3.
Note that the transient response has decayed to essentially zero after five time constants 
(5 × 625 × 10−6 = 3.125 × 10−3) have elapsed.
EXERCISES
	2.1	 The tank shown in Figure 2.2 has a constant cross-sectional area A and fluid resistance R.
	
a.	 Find expressions for the time constant τ and steady-state gain K of the tank in terms of the 
physical parameters A and R.
	
b.	 The empty tank is subject to a constant flow in of F ft3/min. Obtain an expression for the 
liquid level step response of the tank.
	
c.	 The cross-sectional area of the tank is 20 ft2, and the fluid resistance is 0.5 ft per ft3/
min. How high must the tank be if the inflow is constant at F  = 15 ft3/min for it not to 
overflow.
	
d.	 How long will it take for the tank level to reach 50% of its final height?
	
e.	 What size tank is needed if the time required to fill up is increased by 10%?
	2.2	 Consider the first-order system: (d/dt)y(t) + a0y(t) = b0u(t)
	
a.	 Under what conditions does this system reduce to a pure integrator?
	
b.	 For the continuous-time integrator in part (a), express the output y(t) in terms of the input 
u(t). Assume the initial condition is y(0) = y0.
	
c.	 When is a liquid storage tank a pure integrator?
	2.3	 The amount of salt Q in a well-stirred tank shown in the Figure E2.3 depends on cl, the 
concentration of salt in the brine solution entering the tank, as well as the flow rates F1 and 
F0 into and out of the tank. The continuous-time model is based on conservation of salt. 
It equates dQ/dt, the instantaneous rate of change in the amount of salt in the tank to the 
difference in the rate of salt entering the tank, c1F1, and the rate of salt flowing out of the 
tank, cF0.
0
–10
–8
–6
–4
–2
0
2
4
6
8
10
12
14
0.5
1
1.5
vc(t)tr = –9e–t/τ
τ = 0.625 ms
vc(0) = 3 V
vc(t) = vc(∞) + vc(t)tr
vc(∞) = 12 V
t (s)
v(t), (V)
×10–3
2
2.5
3
FIGURE 2.3  Steady-state, transient, and total response of an RC circuit.

35
Continuous-Time Systems
		
The tank initially contains 100 lb of salt-free water. The concentration of salt in the brine solu­
tion flowing in is 0.25 lb/ft3. Both the flow into and the flow out of the tank are both 1 ft3/min. 
Note that 1 ft3 of water weighs approximately 62.4 lb.
	
a.	 Find Q(t), the amount of salt in the tank as a function of time.
	
b.	 Find the amount of salt in the tank at steady state.
	
d
d
Q
t
c F
cF
=
−
1 1
0
	
	2.4	 A temperature-controlled chamber is shown in Figure E2.4.
  	
	
The air temperature inside the chamber is assumed to be the same everywhere, namely, 
T(t). The chamber walls are insulated to reduce heat loss or gain with its surroundings. 
Temperature control is achieved by circulating hot or cold water through pipes located inside 
the chamber. Heat exchange occurs between the air inside the chamber and the circulating 
water in the pipes. The heat flow from the circulating hot water is Qh(t), and Qc(t) is the heat 
flow to the cold water. Heat exchange Q0(t) also occurs between the air inside and outside the 
chamber. Ambient temperature outside the chamber is denoted T0(t).
	
	
A suitable model for this thermal system is based on the conservation of energy.
	
c V
T
t
Q
Q
Q
A
h
c
d
d =
−
−
0
	
  	
V is the volume (ft3) of air in the chamber, and cA is the thermal capacitance of air 
(0.01375 Btu/°F/ft3). The heat flow terms on the right-hand side are given by
	
Q
m c T
T
Q
m c T
T
Q
R T
T
h
h
p
h
c
c
p
c
=
−
=
−
=
−


(
)
(
)
(
)
0
1
0
	
FIGURE E2.3
FIGURE E2.4

36
Simulation of Dynamic Systems with MATLAB® and Simulink®
	 where
	
	
mh and mc are the mass flow rates (lb/min) of the hot and cold water
	
	
cp is the specific heat of water (1 Btu/lb/°F)
	
	
R is the thermal resistance (°F/Btu/min) of the chamber walls
	
  The expressions for Qh and Qc assume that the flow rates of the circulating fluids are great 
enough that both fluids exit at the same temperature at which they entered the chamber.
	
a.	 Express the mathematical model in the form of a differential equation relating the output T 
and its derivative to the inputs Th, Tc, and T0.
	
b.	 Find the time constant and the three steady-state gains of the system. Check the units to ver­
ify that the time constant is in minutes and the steady-state gains are dimensionless (°F/°F).
	
c.	 Show that the air temperatures inside and outside the chamber eventually equalize after 
both the hot and cold circulating water flows are turned off.
	
d.	 Suppose the chamber air temperature is required to be higher than the outside ambient air 
temperature, which remains constant, that is, T0(t) = T0, t ≥ 0. The hot water temperature 
entering the chamber is three times greater than the ambient temperature. The ­initial air 
temperature inside the chamber is the same as the outside ­ambient temperature. Find the 
analytical solution for T(t), t ≥ 0, the air temperature inside the chamber.
	
e.	 Graph the solution for T(t), t ≥ 0 in part (d) using the following values:
	
V
R
m
and T
h
=
=
°
=
=
°
5000
0 025
50
60
3
0
ft
F/Btu/min
lb/min  
 
F
,
.
,
,

	
2.3  SECOND-ORDER SYSTEMS
Input–output models of continuous-time dynamic systems where the highest derivative of the 
dependent variable is second order are classified as second-order systems. Second-order systems 
result when there are two energy storage elements present. Our interest for now is in linear second-
order systems, which can be manipulated into the form shown in Equation 2.16 relating an output 
y(t) to an input u(t) involving generic system parameters, ζ, ωn, and K.
	
d
d
d
d
2
2
2
2
2
t y t
t y t
y t
K
u t
n
n
n
( )
( )
( )
( )
+
+
=
ζω
ω
ω
	
(2.16)
For an actual second-order system (mechanical, electrical, biological, etc.), the generic param­
eters can be expressed in terms of the system’s physical parameters. The importance of each will 
be explained shortly.
The unit step response of the second-order system is the solution for y(t) in Equation 2.16 when 
y(0) = 0 and the input u(t) = 1, t ≥ 0, hereafter denoted by û(t). It can be found in any text related 
to linear systems or controls (Palm 1983; Franklin et al. 2002; Dorf and Bishop 2005). The unit 
step response assumes one of three forms depending on the location of the roots of the algebraic 
equation
	
s
s
n
n
2
2
2
0
+
+
=
ζω
ω
	
(2.17)
known as the characteristic equation of the system. The characteristic roots are the solution to 
Equation 2.17 and are given by
	
s s
n
n
1
2
2
1
,
=−
±
−
ζω
ζ
ω 	
(2.18)

37
Continuous-Time Systems
The natural modes of the second-order system are e
 and e
1
2
s t
s t. The step response depends on the 
value of the parameter ζ. There are three cases to consider.
Case 1: ζ > 1
If we let s
n
n
1
2
1
=−
−
−
ζω
ζ
ω  and s
n
n
2
2
1
=−
−
−
ζω
ζ
ω , then both roots are negative (­assuming 
ωn > 0) and s1 < s2 < 0. Introducing time constants τ1 and τ2 as the reciprocals of the characteristic 
roots s1 and s2, respectively,
	
τ
τ
1
1
2
2
1
1
=−
=−
s
s
,
	
(2.19)
The unit step response is
	
y t
K
t
t
t
( )
e
e
0
1
2
=
+
−
−






≥
−
−
1
2
2
2
1
τ
τ
τ
τ
τ
τ
,
	
(2.20)
Case 2: 0 < ζ < 1
The characteristic roots are complex conjugates and can be expressed as
	
s s
j
n
n
1
2
2
,
=−
±
−
ζω
ζ ω
1
	
(2.21)
It is convenient to define a new quantity ωd in terms of ζ and ωd according to
	
ω
ζ ω
d
n
=
−
1
2
	
(2.22)
The unit step response is
	
y t
K
t
t
t
nt
d
n
d
d
( )
cos
sin
,
=
−
+












≥
−
1
0
e ζ
ζ
ω
ω
ω
ω
ω
	
(2.23)
An alternate form of Equation 2.23 is
	
y t
K
t
t
n
d
t
d
n
( )
sin(
) ,
=
−
+






≥
−
1
0
ω
ω
ω
ϕ
ζω
e
	
(2.24)
where the phase angle term ϕ is given by
	
ϕ
ω
ζω
ζ
ζ
=
=
−






−
−
tan
1
1
2
1
d
n
tan
	
(2.25)
Case 3: ζ = 1
From Equation 2.18, the characteristic roots are repeated, s1 = s2 = –ωn 
The unit step response is
	
y t
K
e
t
t
nt
n
( )
[
],
(
)
=
−
+
≥
−
1
1
0
ω
ω
	
(2.26)

38
Simulation of Dynamic Systems with MATLAB® and Simulink®
A graph of the unit step responses given in Equations 2.20, 2.23, and 2.26 with K = 1 is shown in 
Figure 2.4. The abscissa is ωnt, a dimensionless variable, which allows us to visualize the effect of the 
parameter on the step response independent of ωn. Note that all three step responses start from zero. 
Furthermore, the initial slope given by dy(0)/dt is also zero for all three cases (see Exercise 2.6).
There are no oscillations in Case 1 (ζ > 1), that is, the response is monotonically increasing 
­without overshooting the final value y(∞) = Kū = 1 for a unit step input. The transient period 
increases with increasing ζ. The system is said to be overdamped.
An oscillatory step response occurs in Case 2 (0 < ζ < 1), and the system is referred to as under­
damped. As the value of ζ decreases, the oscillations become more pronounced, and the settling 
time for the transient component to die out becomes larger.
The case when ζ = 1 represents the transition from Case 1 to Case 2 (or vice versa). The second-
order system is called critically damped in this situation.
The graph in Figure 2.4d is the unit step response for the case when ζ = 0. From Equation 2.23 
with ζ = 0,
	
y t
K
t
t
n
( )
(
cos
),
=
−
≥
1
0
ω
	
(2.27)
resulting in sustained oscillations from 0 to 2 when K = 1. The differential equation of the unforced 
system is
	
d
d
2
2
2
0
t y t
y t
n
( )
( )
+
=
ω
	
(2.28)
and the natural response resulting from the presence of initial conditions is that of harmonic motion, 
that is, sustained oscillations about zero at a frequency of ωn rad/s.
0
0.25
0.5
Step response
0.75
1
0
0.5
1
Step response
1.5
2
ω nt
ω nt
0
0
0.25
0.5
Step response
0.75
1
0
0.5
1
Step response
1.5
2
4
8
Increasing ζ
Increasing ζ
12
16
20
0
4
8
12
16
20
0
4
8
12
16
20
0
4
8
12
16
20
(a)
(b)
(c)
(d)
FIGURE 2.4  Unit step response of second-order system in Equation 2.16. (a) Overdamped, ζ = 1.5, 2, 3. 
(b) Underdamped, ζ = 0.1, 0.3, …, 0.9. (c) Critically damped, ζ = 1. (d) Zero damping, = 0.

39
Continuous-Time Systems
Except for the case when ζ = 0, the unit step response approaches the limiting or steady-state 
value y(∞) = K, which means that K is the DC or steady-state gain of the second-order system in 
Equation 2.16. The parameter ζ, which determines the existence and extent of the oscillations as 
well as the duration of the transient response, is called the damping ratio of the system. The last two 
parameters ωn and ωd are the natural frequency and damped natural frequency of the second-order 
system, respectively. The first, ωn, is the frequency of the sustained oscillations (ζ = 0) in Equation 
2.27, and the second, ωd, is the frequency of the decaying oscillations (0 < ζ < 1) in Equation 2.24. 
It follows from Equation 2.22 that ωd < ωn The natural frequency ωn is an indication of the speed of 
the step response (and the system in general) since the oscillatory natural modes are damped by the 
exponential term with time constant 1/ζωn in Equation 2.23.
EXAMPLE 2.2
Figure 2.5 shows a delicate instrument placed on a table that moves as a result of a vertical 
force acting on it. Springs and dampers connect the table to the ground to limit the table’s 
movement.
The combined mass of the table and instrument is m. The total stiffness of the springs is k and 
the total damping is c. The mechanical system is modeled by
	
m t x t
c t x t
kx t
f t
d
d
d
d
( ) =
2
2 ( )
( )
( )
+
+
	
(2.29)
where
x(t) is the displacement of the table (from its static equilibrium position)
f(t) is the force acting on the platform resulting in the motion x(t)
	
a.	Find expressions for the steady-state gain K, the damping ratio ζ, and the natural fre­
quency ωn in terms of the physical parameters m, c, and k.
	
b.	Numerical values of the physical parameters are m = 40 lbm, k = 45 lbf/ft, and c = 4 lbf 
s/ft. Find the response of the table when the platform is subjected to a sudden deflection 
due to a force of 12 lbf.
	
c.	Graph the solution and estimate the duration of the transient.
	
d.	The instrument is not usable if it is moving faster than 0.04 ft/s. How long a period of 
time must pass after the force is applied before the instrument will function properly?
	
a.	Dividing Equation 2.29 by m for comparison with the standard form of a second-order 
system in Equation 2.16 gives
	
d
d
d
d
( )
2
2
1
t x t
c
m
t x t
k
m x t
m f t
( )
( )
( )
+
+
=
	
(2.30)
FIGURE 2.5  Mechanical system for Example 2.2.

40
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
=
=
2
1
2
2
ζω
ω
ω
n
n
n
c
m
k
m
K
m
,
,
	
(2.31)
	
Solving for the parameters K, ωn, and ζ yields
	
ω
ζ
n
k
m
c
km
K
k
=
=
,
,
=
2
1
	
(2.32)
	
b.	Substituting the given values for m (in slugs), k, and c,
	
ω
ζ
n
k
c
km
K
=
=
=
=
=
=
=
m
/
rad/s
45
40 32 2
6 0187
2
4
2 45 40 32 2
0 2675
1
45
.
.
.
/
.
.
0 0222
.
in/lbf
	
	
	
The damping ratio ζ = 0.2675 indicates the system is underdamped. From Equation 
2.22, the damped natural frequency is
	
ω
ζ ω
d
n
=
−
=
−
(
)
=
1
1
0 2675
6 0187
5 7994
2
2
.
.
.
rad/s	
	
and the response to a step input f(t) = F  = 12 lbf, t ≥ 0 is
	
x t
KF
t
t
t
nt
d
n
d
d
( )
e
=
−
+












≥
−

1
0
ζω
ω
ζω
ω
ω
cos
sin
,
	
(2.33)
	
	
Substituting the numerical values for K, F , ζ, ωn, and ωd results in
	
x t
e
t
t
t
t
( )
.
cos .
.
sin .
,
[
.
=
−
+
≥
(
]
−
0 2667 1
5 7994
0 2776
5 7994
0
1 6100
	
(2.34)
	
c.	A graph of the step response is generated in the script file “Chap2_Ex3_1.m” and shown 
in Figure 2.6.
	
	   The transient period can be approximated from the graph as roughly 3 s, or it can be 
computed from the time constant of the exponential envelope as
	
Transient period
s
≈×
= ×
=
5
1
5
1
0 2675 6 0187
3 1056
ζωn
.
( .
)
.
	
	
d.	The first derivative is obtained by differentiation of the underdamped step response in 
Equation 2.24. The result is
	
d
d
e
0
t y t
K
t
t
n
t
d
n
( )
sin
,
=
−
≥
−
ω
ζ
ω
ζω
1
2
	
(2.35)
	
	
Substituting the numerical values for the system parameters K, ζ, ωn, and ωd gives
	
d
d
sin
0
t y t
t
t
t
( )
.
.
,
.
=
≥
−
0 1388
5 7994
1 6100
e
	
(2.36)

41
Continuous-Time Systems
	
	
The first derivative is graphed in the lower half of Figure 2.6. From the graph, it 
appears that approximately 0.77 s must elapse for the instrument to be usable, that is, 
the instrument is moving at less than 0.04 ft/s in either direction after that period of time. 
(A closeup of the response in the neighborhood of dx/dt = −0.04 ft/s reveals that the 
instrument’s velocity actually falls a bit short of −0.04 ft/s.)
2.3.1  Conversion of Two First-Order Equations to a Second-Order Model
A linear second-order system is sometimes represented as a system of two first-order differential 
equations like those in Equations 2.37 and 2.38:
	
d
d
x
t
ax
by
f t
=
+
+ ( )
	
(2.37)
	
d
d
y
t
cx
dy
g t
=
+
+ ( )
	
(2.38)
Suppose a single equation relating the dependent variable x = x(t) and the inputs f = f(t) and 
g = g(t) is required. The first step is to solve for y = y(t) in Equation 2.37,
	
y
b
x
t
ax
f
=
−
−






1 d
d
	
(2.39)
Differentiating Equation 2.39,
	
d
d
d
d
d
d
d
d
y
t
b
x
t
a x
t
f
t
cx
dy
g
=
−
−





=
+
+
1
2
2
	
(2.40)
0.4
0.3
0.2
0.1
0
0
0.5
x(t), (ft)
dx/dt (ft/s)
1.5
2.5
1
2
3
0
0.5
1.5
0.04 ft/s
(a)
(b)
t (s)
–0.04 ft/s
2.5
1
2
3
0
0.1
0.05
–0.05
FIGURE 2.6  (a) Position and (b) velocity response of table and instrument (F = 12 lbf).

42
Simulation of Dynamic Systems with MATLAB® and Simulink®
Replacing y in Equation 2.40 with Equation 2.39 gives
	
1
1
2
2
b
x
t
a x
t
f
t
cx
d b
x
t
ax
f
d
d
d
d
d
d
d
d
−
−





=
+
−
−











+ g
	
(2.41)
and simplifying leads to the second-order differential equation,
	
d
d
d
d
d
d
d
2
2
x
t
a
d
x
t
ad
bc x
f
t
f
bg
−
+
+
−
=
−
+
(
)
(
)
	
(2.42)
A similar procedure is used to eliminate x from Equations 2.37 and 2.38 to give a second-order 
differential equation in y.
EXAMPLE 2.3
The well-mixed tanks shown in Figure 2.7 contain uniform salt concentrations of c1 = c1(t) and 
c2 = c2(t), respectively. Concentration of salt in the input to the first tank is c = c(t). The flow rates 
between the tanks are Q1 and Q2, where Q1 > Q2 > 0. The liquid volumes in both tanks remain 
constant at V1 and V2.
	
a.	Write the differential equations for the conservation of salt in each tank.
	
b.	Find the differential equation relating c2(t) and the input c(t).
	
c.	Find expressions for the damping ratio, natural frequency, and steady-state gain.
	
d.	Find and plot the step response for c2 under the following conditions:
	
Q1 = 10 gal/min, Q2 = 5 gal/min, V1 = 15 gal, and V2 = 15 gal
	
c1(0) = c2(0) = 0 lb of salt/gal, c(t) = c = 0.25 lb salt/gal, t ≥ 0
	
a.	Equating the accumulation of salt in each tank to the difference between the rates of salt 
in and out of the tanks,
	
d
d
Q
t cV
c
Q c
Q c
in
(
)
1 1
2 2
1 1
=
+
−
	
(2.43)
	
d
dt c V
Q c
Q c
Q
c
out
(
)
2 2
1 1
2 2
2
=
−
−
	
(2.44)
	
Since the holdup of liquid in both tanks is constant, the flows Qin and Qout are equal,
	
Q
Q
Q
Q
in
out
=
=
1
2
–
	
(2.45)
	
And, therefore, Equations 2.43 and 2.44 become
FIGURE 2.7  Two-tank mixing system.

43
Continuous-Time Systems
	
V
c
t
Q
Q c
Q c
Q c
1
1
1
2
2 2
1 1
d
d
=
−
+
−
(
)
	
(2.46)
	
V
c
t
Q c
Q c
Q
Q c
2
2
1 1
2 2
1
2
2
d
d
=
−
−
−
(
)
	
(2.47)
	
b.	Rearranging Equations 2.46 and 2.47 into the form of Equations 2.37 and 2.38,
	
d
d
c
t
Q
V c
Q
V c
2
1
2
2
1
2
1
= −
+
	
(2.48)
	
d
d
(
c
t
Q
V c
Q
V c
Q
Q
V
c
1
2
1
2
1
1
1
1
2
1
=
−
+
−
)
	
(2.49)
	
Thinking of c2 as x and c1 as y, and comparing Equations 2.48 and 2.49 with Equations 
2.37 and 2.38 implies
	
a
Q
V
b
Q
V
c
Q
V
d
Q
V
f t
g t
Q
Q
V
c t
= −
=
=
= −
=
=
−
1
2
1
2
2
1
1
1
1
2
1
0
,
,
,
, ( )
, ( )
) ( )
(
	
(2.50)
	
From Equation 2.42, the second-order differential equation relating c2 and c is
	
d
d
d
d
(
(
2
2
2
1
1
2
2
1
1
2
1 2
2
1
1
2
1
1
c
t
Q V
V
c
t
Q Q
Q
VV
c
Q Q
Q
+
+






+
−
=
−
)
)
VV
c
1 2
	
(2.51)
	
c.	Comparing the left-hand side of Equation 2.51 with the standard form in Equation 2.16 
gives
	
2
1
1
1
1
2
2
1
1
2
1 2
ζω
ω
n
n
Q V
V
Q Q
Q
VV
=
+






=
−
,
)
(
	
(2.52)
	
⇒
=
−






=
+
−





ω
ζ
n
Q Q
Q
VV
V
V
Q
Q
Q VV
1
1
2
1 2
1 2
1
2
1
1
2
1 2
2
(
)
,
(
)
(
)
/

1 2
/
	
(2.53)
	
For c(t) = c, the steady-state value of c2 is obtained from Equation 2.51 by setting the 
derivatives equal to zero resulting in
	
Q Q
Q
VV
c
Q
Q
V
Q
V c
ss
1
1
2
1 2
2
1
2
1
1
2
(
−
=
−






) (
)
(
)
	
(2.54)
	
⇒
=
(
)
c
c
ss
2
	
(2.55)
	
	
Hence, the steady-state gain K = 1 lb salt/lb salt as expected.
	
d.	For the given conditions, that is, Q2 = Q = 5, Q1 = 2Q = 10, and V1 = V2 = V = 15
	
ωn
Q Q
Q
VV
Q
V
=
−






=
=
=
2
2
2
2
5
15
0 4714
1 2
1 2
1 2
(
)
( )
( )
.
min
rad
	
(2.56)

44
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
ζ =
+
−






=
=
(
)
(
)
( )
.
V
V
Q
Q
Q VV
2
2
2
2
1 4142
1 2
1 2
	
(2.57)
	
From Equation 2.18, the characteristic roots of the overdamped system are
	
s s
n
n
1
2
2
1
1 1381
0 1953
,
.
min,
.
min
=
=
rad
rad
−
±
−
−
−
ζω
ζ
ω
	
(2.58)
	
	
The time constants in Equation 2.19 are τ1 = −1/s1 = 0.8787 min and τ2 = −1/
s2 = 5.1213 min, and from the unit step response in Equation 2.20, the response to a step 
of magnitude c is
	
c t
Kc
t
t
2
2
1
1
2
1
2
1
( )
/
/
=
+
−
−






−
−
τ
τ
τ
τ
τ
τ
e
e
	
(2.59)
	
=
−
−






−
−
0 25 1
5 1213
0 8787
4 2426
5 1213
0 8787
.
.
.
.
/ .
/ .
e
e
t
t






≥
,
t
0
	
(2.60)
	
	
The second-order differential equation in Equation 2.51 is in standard form; however, 
the second-order differential equation for c1(t) contains the first derivative dc/dt on the 
right-hand side of the equation (see Exercise 2.6). The implication of input derivatives 
in the system model will be ­discussed in a later section. A graph of the step response is 
shown in Figure 2.8.
EXERCISES
	2.5	 Starting with Equations 2.37 and 2.38, obtain the second-order differential ­equation relating 
the output y = y(t) and its derivatives to the inputs f = f(t) and g = g(t).
	2.6	 In Example 2.3,
	
a.	 Find the differential equation relating c1(t) and the input c(t).
0.25
0.2
0.15
0.1
c2(t)
c2(t), lb salt per gal
c(t)
c = 0.25 lb salt per gal
Step response of salt concentration in ﬁrst tank
–
0.05
0
0
2.5
5
7.5
10
12.5
t (min)
17.5
22.5
20
25
15
FIGURE 2.8  Response of salt concentration in second tank to step input c(t) = 0.25, t ≥ 0.

45
Continuous-Time Systems
	
b.	 Find the step response in c1(t) for the same initial conditions, system parameters, and input 
c(t). Graph the step response for c1(t) and c2(t).
	
c.	 Show that the first derivative dc1/dt is discontinuous at t = 0 while the first derivative dc2/dt 
is continuous at t = 0.
	2.7	 The two-tank system in Exercise 1.2 is second order.
	
a.	 Convert the model of the system from two first-order differential equations to one second-
order differential equation with input F1(t) and output H2(t).
	
b.	 Find expressions for the damping ratio, natural frequency, and steady-state gain in terms of 
the physical parameters A1, A2, R1, and R2.
	
c.	 Use the results from part (b) to express the damping ratio in terms of the tank time con­
stants τ1 = A1R1 and τ2 = A2R2.
	
d.	 Show that the system can never be underdamped.
	
For parts (e) and (f), assume the following values for the system parameters:
	
A1 = 100 ft2, R1 = 0.25 ft per ft3/min, A2 = 50 ft2, and R2 = 0.1 ft per ft3/min
	
e.	 Find and graph the response H2(t) of the unforced system, that is, F1(t) = 0, t ≥ 0 starting 
from H1(0) = 40 ft and H2(0) = 0 ft.
	
f.	 Find and graph the step response of H2(t) when F1(t) = 75 ft3/min. Both tanks are initially 
empty. Does the first tank achieve steady state in roughly 5τ1? Does the second tank achieve 
steady state in roughly 5τ2? Explain.
	2.8	 A fundamental difference between the step response of first- and second-order linear systems 
in standard form is the initial rate of change, that is, the first derivative at t = 0.
	
a.	 Show that the first-order system step response undergoes the maximum rate of change at 
t = 0.
	
b.	 Show that the initial derivative of the second-order system step response is zero regardless 
of whether the system is underdamped, critically damped, or overdamped.
2.4  SIMULATION DIAGRAMS
In many cases, dynamic systems are composed of individual components and subsystems. The rela­
tionship of a system’s components to each other and the role they serve in the overall system design 
are oftentimes easier to comprehend when presented in visual form rather than by inspection of the 
mathematical models. Control systems for ground vehicles, aircraft, robotic devices, building envi­
ronments, and so forth are typically presented in graphical form as block diagrams. The blocks are 
both static and dynamic depending on the component it represents. Modern continuous-time system 
simulation languages include extensive libraries of special purpose blocks to represent the dynamics 
of commonly occurring components.
It is useful to reduce the blocks in a block diagram of a continuous-time dynamic system to a level 
that exposes the pure integrators. The simulationist is then given the flexibility of approximating 
individual integrators using different numerical algorithms. This is especially useful in applications 
where simulation code is developed manually instead of relying on a general purpose simulation 
language. This point will be revisited in Chapter 3 following a discussion of numerical integration.
A block diagram of a continuous-time dynamic system comprising algebraic blocks and integra­
tors is referred to as a simulation diagram. We begin with the first-order system of Equation 2.61:
	
d
d
d
d
t y t
a y t
b
t u t
b u t
( )
( )
( )
( )
+
=
+
0
1
0
	
(2.61)
Equation 2.61 is a more general form than the first-order models introduced in Section 2.2 due to 
the presence of the first derivative term on the right-hand side.

46
Simulation of Dynamic Systems with MATLAB® and Simulink®
If we introduce a new variable z = z(t) where
	
d
dt z t
a z t
u t
( )
( )
( )
+
=
0
	
(2.62)
the output y is related to z by
	
y t
b z t
b
t z t
( )
( )
( )
=
+
0
1 d
d
	
(2.63)
It is left as an exercise to show that Equations 2.62 and 2.63 are equivalent to Equation 2.61. In 
addition to the blocks required to implement Equations 2.62 and 2.63, an integrator block is needed 
to integrate the first derivative dz/dt to generate z(t), that is,
	
z t
z
t
t
( ) =∫
d
d  d
	
(2.64)
The simulation diagram in Figure 2.9 is constructed by first drawing an integrator block and 
labeling the input dz/dt and output z corresponding to Equation 2.64. Next, we solve for the deriva­
tive term dz/dt in Equation 2.62 and draw a portion of the diagram to implement the result. Finally, 
the output y is generated from Equation 2.63 using the b0 and b1 gain blocks and a summing block.
The simulation diagram representation of the first-order system’s dynamics involves a single 
dynamic block, namely, the integrator. The remaining blocks are sum blocks and gains that are 
algebraic in nature.
A block diagram for the same first-order system is shown in Figure 2.10. The block diagram is a 
direct implementation of Equation 2.61 after solving for the first derivative dy/dt. An additional vari­
able z is not required in this case. The diagram in Figure 2.10 is not a simulation diagram because 
of the presence of the differentiator. In digital simulation, the differentiator (like the integrator) 
must be implemented using a numerical approximation. Numerical methods for approximating the 
FIGURE 2.10  Block diagram of first-order system: (d/dt)y(t) + a0y(t) = b1(d/dt)u(t) + b0u(t).
FIGURE 2.9  Simulation diagram of first-order system: (d/dt)y(t) + a0y(t) = b1(d/dt)u(t) + b0u(t).

47
Continuous-Time Systems
derivative of a continuous-time function are available. However, they are rarely implemented in 
simulation applications due to their sensitivity to high-frequency noise components often present in 
continuous-time signals.
A final observation relates to the special case when b1 in Equation 2.61 is zero. The input deriva­
tive is absent, and the first-order system assumes the simpler form of Equation 2.3 or 2.4. Recall 
that this form was sufficient to model the dynamics of the linear tank in Chapter 1 and the simple 
RC circuit of Example 2.1.
EXAMPLE 2.4
Draw a simulation diagram of the linear tank modeled by
	
A t H t
R H t
F t
d
d
( )
( )
( )
+
=
1
1
	
(2.65)
The diagram is shown in Figure 2.11.
Dividing Equation 2.65 by the parameter A and comparing the result to Equation 2.61 show
	
a
AR
b
A
b
0
0
1
1
1
0
=
=
=
,
,
   
  
	
leading to the simulation diagram shown in Figure 2.11.
The simulation diagram in Figure 2.11 is not unique. The “1/A” block can be moved from the 
location where z is its input to the left of the summer where F1 becomes its input. In that case, 
z and H are identical. The alternate simulation diagram can be obtained directly by solving the 
­differential equation of the tank for the first derivative,
	
d
dt H t
A F t
R H t
( )
( )
( )
=
−






1
1
1
	
(2.66)
and implementing Equation 2.66 directly. Integrating the derivative dH/dt to get H completes the 
diagram.
EXAMPLE 2.5
Suppose the current i(t) in the RC circuit of Figure 2.2 is considered the output. The differential 
equation for the circuit becomes
	
d
d
d
d
t i t
RC i t
R
t e t
( )
( )
( )
+
=
1
1
0
	
(2.67)
Draw the simulation diagram for the circuit described by Equation 2.67.
From Equation 2.61, a0, b0, and b1 are
	
a
RC
b
b
R
0
0
1
1
0
1
=
=
=
,
,
   
   
	
and the simulation diagram is drawn in Figure 2.12.
FIGURE 2.11  Simulation diagram of linear tank: A(d/dt)H(t) + (1/R)H(t) = Fl(t).

48
Simulation of Dynamic Systems with MATLAB® and Simulink®
When the differential equation model of a first-order system contains a term involving the first 
derivative of the input, a direct link or coupling exists from the input directly to the ­output. In other 
words, when b1 ≠ 0 in Equation 2.61, sudden changes in the input are immediately reflected in 
the output. Notice the path of heavy solid lines in Figure 2.12 illustrating the direct connection of 
algebraic components between the voltage input e0(t) and the output current i(t).
In contrast, there is no direct connection from input to output in the simulation diagram shown 
in Figure 2.11 for the linear tank model. This is expected since changes in the inflow F1(t) must 
work their way through the tank dynamics, that is, the integrator, prior to affecting the output level 
H(t). Hence, the tank prevents abrupt changes like a step or other inputs with high-frequency 
­components from immediately causing any significant changes in the output H(t). The  tank 
behaves like a low-pass filter (see Exercise 1.10).
Obtaining a simulation diagram for a second-order system in the standard form
	
d
d
d
d
2
2
2
2
2
t y t
t y t
y t
K
u t
n
n
n
( )
( )
( )
( )
+
+
=
ζω
ω
ω
	
(2.68)
is straightforward. We begin by drawing two consecutive integrators, labeling the input and output 
of the first with d2y/dt2 and dy/dt, respectively. The second integrator integrates the first derivative 
dy/dt producing y and is labeled accordingly. The next step is to solve for the second derivative 
term in Equation 2.68 resulting in
	
d
d
d
d
2
2
2
2
2
t y t
K
u t
t y t
y t
n
n
n
( )
( )
( )
( )
=
−
−
ω
ζω
ω
	
(2.69)
Algebraic blocks (gains and summers) are used to implement Equation 2.69 leading to the 
simulation diagram shown in Figure 2.13.
The simulation diagram for a second-order system with first- or second-order derivatives of the 
input appearing in the differential equation model is not as straightforward. Starting with Equation 2.70
	
d
d
d
d
d
d
d
d
2
2
1
0
0
1
2
2
2
t y t
a
t y t
a y t
b u t
b
t u t
b
t u t
( )
( )
( )
( )
( )
( )
+
+
=
+
+
	
(2.70)
FIGURE 2.13  Simulation diagram of a second-order system in standard form.
FIGURE 2.12  Simulation diagram for an RC circuit: (d/dt)i(t) + (1/R)C)i(t) = (1/R)(d/dt)e0(t).

49
Continuous-Time Systems
an approach similar to the method used for first-order systems with an input derivative term 
­present is employed. An artificial variable z(t) is introduced, and the output y(t) is expressed as a 
linear combination of z(t) and its two derivatives. The result is
	
d
d
d
d
2
2
1
0
t z t
a
t z t
a z t
u t
( )
( )
( )
( )
+
+
=
	
(2.71)
	
y t
b z t
b
t z t
b
t z t
( )
( )
( )
( )
=
+
+
0
1
2
2
2
d
d
d
d
	
(2.72)
The simulation diagram of the second-order system in Equation 2.70 is shown in Figure 2.14. 
Note the use of the dot notation, short for differentiation with respect to time. It is clear that a 
direct connection from the input u(t) to the output y(t) exists only when b2, the coefficient of the 
input second derivative in Equation 2.70, is nonzero.
Looking at the simulation diagrams in Figures 2.9 and 2.14 for the first- and second-order sys­
tems in Equations 2.61 and 2.70, a general pattern emerges for creating the simulation diagram of 
an nth-order system modeled by
	
d
d
d
d
d
d
d
d
d
d
y
t
a
y
t
a
y
t
a y
b u
b
u
t
b
u
n
n
n
n
n
n
n
+
+
+
+
=
+
+
+
−
−
−
−
−
1
1
1
1
0
0
1
1
1


t
b
u
t
n
n
n
n
−+
1
d
d
	
(2.73)
The two equations equivalent to Equation 2.73 are
	
d
d
d
d
d
d
z
t
a
z
t
a
z
t
a z
u
n
n
n
n
n
+
+
+
+
=
−
−
−
1
1
1
1
0

	
(2.74)
	
y
b z
b
z
t
b
z
t
b
z
t
n
n
n
n
n
n
=
+
+
+
+
−
−
−
0
1
1
1
1
d
d
d
d
d
d

	
(2.75)
The simulation diagram follows directly from Equations 2.74 and 2.75.
EXAMPLE 2.6
A unicycle is traveling over an uneven road as shown in Figure 2.15.
The input is the road elevation xr(t) above some reference. The output is the vertical movement x(t) 
of the rider and seat combination (with respect to its equilibrium position). Ignoring the compliance 
FIGURE 2.14  Simulation diagram for a second-order system with input derivatives present.

50
Simulation of Dynamic Systems with MATLAB® and Simulink®
of the tire makes the wheel deflection xw(t) = xr(t). Assume that the wheel remains in contact with the 
road surface. The mass of the rider and seat is m, and c and k are suspension parameters.
	
a.	Find the differential equation relating the output x(t) and input xr(t).
	
b.	Draw a simulation diagram of the system.
	
c.	Is there a direct coupling between the input and output? Explain.
	
a.	The differential equation is obtained by equating the sum of the suspension forces acting 
on the rider and seat to the product of its mass and acceleration.
	
m t x t
c
t x
t
t x t
k x
t
x t
w
w
d
d
d
d
d
d
2
2 ( )
( )
( )
[
( )
( )]
=
−





+
−
	
(2.76)
	
Replacing xw(t) with xr(t) gives
	
m t x t
c
t x t
t x t
k x t
x t
r
r
d
d
d
d
d
d
2
2 ( )
( )
( )
[
( )
( )]
=
−





+
−
	
(2.77)
	
b.	Rearranging terms in Equation 2.77 gives
	
d
d
d
d
d
d
2
2t x t
c
m
t x t
k
m x t
k
m x t
c
m
t x t
r
r
( )
( )
( )
( )
( )
+
+
=
+
	
(2.78)
	
Comparing Equations 2.78 and 2.70 leads to expressions for a0, al, b0, b1, and b2 in terms 
of the system parameters,
	
a
k
m
a
c
m
b
k
m
b
c
m
b
0
0
=
=
=
=
=
,
,
,
,
1
0
1
2
	
(2.79)
	
and eventually the simulation diagram shown in Figure 2.16.
FIGURE 2.15  Unicycle traveling along an uneven road surface.
FIGURE 2.16  Simulation diagram for a unicycle suspension.

51
Continuous-Time Systems
	
c.	Since both paths from xr to x contain an integrator, there is no direct coupling between input 
and output. Consequently, an abrupt change in xr such as a vertical jump in the road surface 
height does not result in a similar type of displacement of the rider and seat combination.
2.4.1  Systems of Equations
System models can assume the form of coupled differential and algebraic equations. The simulation 
diagram representation is straightforward.
EXAMPLE 2.7
A two-room building with temperatures T1(t) and T2(t) is shown in Figure 2.17.
The simplified model relating the uniform room temperatures T1(t) and T2(t) to the heat supplied 
from the furnace Qf(t) and outside temperature T0(t) is based on conservation of energy. It consists 
of the following differential and algebraic equations:
	
C
t T t
Q t
Q t
Q
t
f
1
1
1
12
d
d
( )
( )
( )
( )
=
−
−
	
(2.80)
	
C
t T t
Q
t
Q t
2
2
12
2
d
d
( )
( )
( )
=
−
	
(2.81)
	
Q
t
T t
T t
R
12
1
2
12
( )
( )
( )
=
−
	
(2.82)
	
Q t
T t
T t
R
1
1
0
1
( )
( )
( )
=
−
	
(2.83)
	
Q t
T t
T t
R
2
2
0
2
( )
( )
( )
=
−
	
(2.84)
where C1, C2, R1, R2, and R12 are thermal parameters of the system. The simulation diagram shown 
in Figure 2.18 follows directly from Equations 2.80 through 2.84.
Combining Equations 2.80 through 2.84 and solving for the first derivatives give
	
d
dt T t
C Q t
T t
T t
R
T t
T t
R
f
1
1
1
0
1
1
2
12
1
( )
( )
( )
( )
( )
( )
=
−
−
−
−





	
(2.85)
	
=
−
+






+
+
+



1
1
1
1
1
1
1
12
1
12
2
1
0
C
R
R
T t
R
T t
R T t
Q t
f
( )
( )
( )
( )



	
(2.86)
	
d
d
=
t T t
C
T t
T t
R
T t
T t
R
2
2
1
2
12
2
0
2
1
( )
( )
( )
( )
( )
−
−
−





	
(2.87)
FIGURE 2.17  Heat flows and temperatures in a two-room building.

52
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
−
+






+






1
1
1
1
1
2
12
1
2
12
2
2
0
C
R
T t
R
R
T t
R T t
( )
( )
( )
	
(2.88)
Equations 2.86 and 2.88 are of the form
	


x
a x
a x
b u
b u
x
a x
a x
b u
b u
1
11 1
12
2
11 1
12
2
2
21 1
22
2
21 1
22
2
=
+
+
+
=
+
+
+
	
(2.89)
where x1 = T1, x2 = T2, u1 = T0, and u2 = Qf and the coefficients aij and bij (j = 1, 2) depend on the 
system parameters according to
	
a
C
R
R
a
R C
b
RC
b
C
11
1
1
12
12
12
1
11
1
1
12
1
1
1
1
1
1
1
= −
+






=
=
=
,
,
,
	
(2.90)
	
a
R C
a
C
R
R
b
R C
b
21
12
2
22
2
2
12
21
2
2
22
1
1
1
1
1
0
= −
=
+






=
=
,
,
,
	
(2.91)
Suppose we need to draw a simulation diagram for the system in Equation 2.89 with only x1 
or x2 present. Using an approach similar to the one presented in Section 2.2 for converting two 
coupled first-order differential equations into a second-order differential equation, the second-
order system in Equation 2.89 is equivalent to
	




x
x
x
u
u
u
u
1
1 1
0 1
11 1
10 1
21 2
20
2
+
+
=
+
+
+
α
α
β
β
β
β
	
(2.92)
where
	
α
α
1
11
22
0
11 22
12 21
= −
+
=
−
(
),
a
a
a a
a a 	
(2.93)
	
β
β
β
β
11
11
10
12
21
22 11
21
12
20
12
22
22 12
=
=
−
=
=
−
b
a b
a b
b
a b
a b
,
,
,
	
(2.94)
FIGURE 2.18  Simulation diagram for building room temperature model.

53
Continuous-Time Systems
The simulation diagram for Equation 2.92 is constructed in two steps. From superposition, 
the output x1 can be viewed as the sum of x11 and x12 where
	



x
x
x
u
u
11
1 11
0 11
11 1
10 1
+
+
=
+
α
α
β
β
	
(2.95)
	



x
x
x
u
u
12
1 12
0 12
21 2
20
2
+
+
=
+
α
α
β
β
	
(2.96)
Simulation diagrams for Equations 2.95 and 2.96 are drawn separately, and outputs x11 and x12 
are added to yield the complete output x1. The result is shown in Figure 2.19.
Do not be misled into thinking that the simulation diagram shown in Figure 2.19 corresponds 
to a fourth-order system due to the presence of four integrators. There are two decoupled sec­
ond-order systems, one with input u1 and output x11 and the other with input u2 and output x12. 
In ­reality, they are the same system, that is, the second-order system governed by the second-
order model in Equation 2.92.
On the other hand, if the feedback coefficients in the two systems are not identical, that is, α0 
and α1 in both cases, the result is indeed a fourth-order system (see Exercise 2.13).
EXERCISES
	2.9	 Show that the system of equations
	
d
d
( )
and
( )
d
d
t z t
a z t
u t
y t
b z t
b
t z t
( )
( )
( )
( )
+
=
=
+
0
0
1
	
		
used to construct the simulation diagram for the first-order system
	
d
d
d
d
t y t
a y t
b
t u t
b u t
( )
( )
( )
( )
+
=
+
0
1
0
	
		
is equivalent to the first-order differential equation above.
		
Hint: The variable z(t) must be eliminated from the two equations.
	2.10	 An alternate simulation diagram for the second-order system
	
d
d
d
d
t y t
t y t
y t
K
u t
n
n
n
2
2
2
2
( )
( )
( )
( )
+
+
=
ζω
ω
ω
	
FIGURE 2.19  Simulation diagram for second-order system in Equation 2.92.

54
Simulation of Dynamic Systems with MATLAB® and Simulink®
		
when it is critically damped or overdamped is shown in Figure E2.10 below:
		
Find expressions for K1, α, and β in terms of the parameters ζ, ωn, and K.
	2.11	 The circuit shown in Figure E2.11 is governed by the differential equation:
	
RC
t v
t v
R
L v
t e
C
C
C
S
d
d
d
d
d
d
2
+
+
=
	
		
Draw a simulation diagram for the circuit.
	2.12	 Consider the building temperature example with room temperatures described by Equations 
2.86 and 2.88.
	
a.	 Find the second-order differential equation relating T2(t) and the system inputs T0(t) and 
Qf(t).
	
b.	 Draw a simulation diagram like the one shown in Figure 2.19.
	2.13	 Simulation diagrams are shown in Figure E2.13a through E2.13c below.
	
a.	 Find the differential equation relating x and inputs u1 and u2 in Figure E2.13a.
	
b.	 Find the differential equation relating x and input u in Figure E2.13b.
	
c.	 Find the differential equation relating x and inputs u1 and u2 in Figure E2.13c.
	
d.	 Comment on the differences between the systems represented by each diagram.
2.5  HIGHER-ORDER SYSTEMS
To this point, we have looked at linear continuous-time systems with first- and second-order 
dynamics only. Linear systems and linear controls texts include extensive coverage of lower-order 
FIGURE E2.10
FIGURE E2.11
FIGURE E2.13

55
Continuous-Time Systems
system response. In particular, the response of first- and second-order systems to impulse, step, and 
­sinusoidal inputs is fully developed.
The dynamics of complex systems with linear differential equation models are invariably higher 
than second order. One may question why so much attention is devoted to first- and second-order 
systems. The explanation is simple.
High-order linear systems are oftentimes a collection of components or subsystems that are 
intrinsically first or second order. An electrical circuit with several capacitors and inductors is a 
good example. The circuit dynamics will depend on the number of these energy storage elements 
and their location in the circuit. In general, its order will be equal to the number of energy storage 
elements since each element is itself modeled as a first-order component. With n nonredundant 
energy storage elements, an nth-order differential equation involving an output (a voltage or current 
in the circuit) and an input (if an independent source is present) governs the behavior of the circuit. 
The same principle applies to fluid, thermal, mechanical, chemical, and so forth, systems made up 
of components analogous to the resistor, capacitor, and inductor of the electrical circuit.
The block diagram of a simple feedback control system is shown in Figure 2.20. The controller, 
process, and sensor are the subsystem components, which are individually modeled as either first 
or second order.
The control system model comprises the three coupled differential equations
	
τ
τ
2
1
d
d
d
d
u
t
K
e
t
e
c
+
=
+






u
	
(2.97)
	
d
d
d
d
2
2
2
2
2
x
t
x
t
x
K
u
n
n
p
n
+
+
=
ζω
ω
ω
	
(2.98)
	
τs
s
s
s
x
t
x
K x
d
d
+
=
	
(2.99)
and the summer equation
	
e
x
x
c
s
=
–
	
(2.100)
The command input xc = xc(t) is the control system input, and the output of the process x = x(t) 
is the control system output. Dependent variables e(t), the error signal, u(t), the output from the 
controller and input to the process, and xs(t), the sensor output are internal to the control system. 
Eliminating these variables produces a single fourth-order (1 + 2 + 1) differential equation model 
of the control system in the form
	
d
d
d
d
d
d
d
d
d
d
4
4
3
3
3
2
2
2
1
0
4
4
4
3
3
3
2
x
t
a
x
t
a
x
t
a
x
t
a x
b d x
t
b d x
t
b
c
c
+
+
+
+
=
+
+
d
d
d
d
2
2
2
1
0
x
t
b
x
t
b x
c
c
+
+
	
(2.101)
Sensor
FIGURE 2.20  A control system consisting of first- and second-order components.

56
Simulation of Dynamic Systems with MATLAB® and Simulink®
where several of the coefficients ai, i = 0, 1, 2, 3 and bi, i = 0, 1, 2, 3, 4 may be zero.
A simulation diagram of the control system can be obtained from Equation 2.101 using the pro­
cedure from the previous section. Alternatively, simulation diagrams can be developed for the indi­
vidual components in Figure 2.20 and properly connected to produce a simulation diagram for the 
control system. Simulation of the system based on a simulation diagram using the second approach 
is preferable since the internal variables are readily identifiable. We can check the simulation results 
to verify that inputs and outputs of the controller and sensor remain within proper operating ranges.
EXAMPLE 2.8
The control system for the pitch of an aircraft is shown in Figure 2.21.
Draw a simulation diagram for the aircraft pitch control system block diagram.
Simulation diagrams of each component are connected to produce the simulation diagram of 
the entire control system shown in Figure 2.22.
EXERCISES
	2.14	 For the control system shown in Figure 2.20.
	
a.	 Find the coefficients ai, i = 0, 1, 2, 3 and bi, i = 0, 1, 2, 3, 4 in Equation 2.101 in terms of 
the system parameters τ1, τ2, Kc, ωn, Kp, τs and Ks.
FIGURE 2.21  Control system for an aircraft pitch.
FIGURE 2.22  Simulation diagram for an aircraft pitch control system.

57
Continuous-Time Systems
		
Hint: The use of Laplace transforms (see Chapter 4) significantly reduces the amount of work 
necessary to eliminate the variables e, u, and xs.
	
b.	 Draw a simulation diagram based on the fourth-order differential equation model.
	2.15	 Find the differential equation for the control system in Figure 2.21 relating the output θ and 
its derivatives to the input θcom and its derivatives. Draw the simulation diagram based on the 
resulting differential equation.
		
Hint: The use of Laplace transforms (see Chapter 4) significantly reduces the amount of work 
necessary to eliminate the variables e, uc, and ua.
	2.16	 For the railroad cars shown in Figure E2.16,
	
a.	 Write the differential equation expressing Σk i k
i
i
F
m x i
,
,
, ,
=
=

1 2 3 for each car where Fi,k is the 
kth force acting on the ith car.
	
b.	 Draw a simulation diagram of the system with integrators for xi, xi, i = 1, 2, 3.
	
c.	 Find the differential equation relating the input F(t) and output x1(t).
		
Hint: The use of Laplace transforms (see Chapter 4) significantly reduces the amount of work 
necessary to eliminate the variables x2 and x3.
2.6  STATE VARIABLES
In everyday terms, one’s state of mind on a given day is determined by the history of numerous psycho­
logical factors that influence our mental well-being. The state of the national economy (weak, moder­
ate, strong) depends on numerous factors such as energy prices, inflation, trade balances, employment, 
productivity, housing, tax policies, corporate earnings, transportation, agriculture, and so forth. 
Imagine that all the economic factors (inputs) affecting the national economy were measurable and 
the complex interrelationships among those variables that determine the state of the economy were 
fully understood. If the state of the economy were known at some point in time and the complete set of 
aforementioned economic factors were observed from that time forward, knowledgeable economists 
would (in principle) be able to predict the state of the national economy at future times.
The essential point is that if we know the state of a system at some point in time and wish to 
predict its future, then knowledge of the system inputs only from that time onward is required. The 
current state of a system reflects the effect of prior inputs that are responsible for the system’s transi­
tion from some previous state to the current state.
Consider a simple spring-mass-damper system subject to an applied force acting on the mass like 
the one shown in Figure 2.23. The spring and mass are both capable of storing energy. At any time, 
FIGURE E2.16
FIGURE 2.23  A spring-mass-damper system with applied force f(t).

58
Simulation of Dynamic Systems with MATLAB® and Simulink®
the instantaneous energy E(t) stored in the system is given in Equation 2.102 where x is the position 
of the mass (relative to its equilibrium position) and dx/dt is the velocity of the mass.
	
E
kx
m
x
t
=
+






1
2
1
2
2
2
d
d
	
(2.102)
A possible choice of state variables for the mechanical system is x and dx/dt. Given both state 
variables at time t0 determines the energy E(t0). The applied force f(t) for t ≥ t0 must be known to 
solve the initial value problem
	
m t x t
c t x t
kx t
f t
x t
x
t t
d
d
d
d
given
d
d
2
2
0
0
( )
( )
( )
( )
( )
and
( )
+
+
=
	
(2.103)
and determine both state variables x and dx/dt as well as E(t) for t ≥ t0. The same cannot be said if 
only the position or the velocity of the mass were known at t0. In that case, the initial energy in the 
system E(t0) would be unknown, and it would be impossible to predict future values of x and dx/dt 
even if the force f(t) were known for t ≥ t0. Consequently, x or dx/dt alone is not a suitable choice for 
the state of the system.
The situation is illustrated for the general case of a system with two state variables x1(t) and x2(t) 
and single input u(t) in Figure 2.24. Given x1(t0), x2(t0), and u(t), t ≥ t0, both states can be determined 
from t0 on.
The choice of state variables for a dynamic system model is not unique; however, the number 
of state variables is limited to the minimum number of variables, which satisfy the requirement 
of ­predicting future states given the current state and future inputs. This number of state vari­
ables is equal to the number of independent energy storage components present in the system. It is 
advantageous to choose physical (measurable) quantities as in the case of the mechanical system in 
Figure 2.23 whenever possible.
A simulation diagram is a valuable tool when it comes to choosing the state variables of a system. 
The outputs of each integrator in a simulation diagram representation of a system is a valid choice 
for the state variables. The choice of which integrator output is x1, x2, and so forth is arbitrary.
Consider a second-order system governed by
	
d
d
d
d
2
2
1
0
0
t y t
a
t y t
a y t
b u t
( )
( )
( )
( )
+
+
=
	
(2.104)
FIGURE 2.24  Dynamic system with state variables x1(t) and x2(t).

59
Continuous-Time Systems
A simulation diagram like the one shown in Figure 2.25 is easily constructed. State variables x1 
and x2 are chosen as the output y and first derivative dy/dt, respectively.
The second-order system is critically damped or overdamped if a1
2 – 4a0 ≥ 0. In this case, it is 
equivalent to two cascaded first-order systems as shown in Figure 2.26.
The parameters K, α, and β are related to a0, a1, and b0 according to
	
K
b
a
a
a
a
a
a
=
=
±
−
=
−
0
1
1
2
0
1
1
2
0
4
2
4
2
,
,
α
β 
 
∓
	
(2.105)
State variable x1 is again the system output y; however, the second state variable x2 is no longer 
the output derivative dy/dt.
For an nth-order linear system model with constant coefficients, the state derivatives are express­
ible as a linear combination of the state variables and input(s). For example, from Figure 2.25, the 
state derivatives are equal to
	
d
d
d
d
x
t
x
x
t
b u
a x
a x
1
2
2
0
0 1
1 2
=
=
−
−
	
(2.106)
whereas in Figure 2.26, the appropriate expressions are
	
d
d
d
d
x
t
x
x
x
t
Ku
x
1
2
1
2
2
=
−
=
−
β
α
	
(2.107)
In the general linear case with n states x1, x2, …, xn and r inputs,
	
d
d
=
x
t
f x u
a x
a x
a x
b u
b u
b u
n
n
r
r
1
1
11 1
12
2
1
11 1
12 2
1
=
+
+
+
+
+
+
+
( , )


	
(2.108)
	
d
d
=
x
t
f
x u
a x
a x
a x
b u
b u
b u
n
n
r
r
2
2
21 1
22
2
2
21 1
22 2
2
=
+
+
+
+
+
+
+
( , )


	
(2.109)
FIGURE 2.25  Simulation diagram of second-order system with state x1 = y and x2 = dy/dt.
FIGURE 2.26  Simulation diagram for critically damped or overdamped second-order system using two 
first-order systems in a series.

60
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d
d
x
t
f
x u
a x
a x
a x
b u
b u
b u
n
n
n
n
nn
n
n
n
nr
r
=
=
+
+
+
+
+
+
+
( , )
1 1
2
2
1 1
2 2


	
(2.110)
where
	
x
n
x
x
xn
is the
1state vector
×






1
2

	
	
u
r
u
u
ur
is the
1 input vector
×






1
2

	
and fi(x, u), i = 1, 2, 3, …, n is the state derivative function of the ith state variable.
Equations 2.108 through 2.110 can be written in the compact form
	
x
f x u
Ax
Bu
=
=
+
( , )
	
(2.111)
where
	


x
x
t
x
t
x
t
A
a
a
n
=






=
d
d
d
d
d
d
1
2
11
12
,
.
.
..
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
a
a
a
a
a
a
a
n
n
n
n
nn
1
21
22
2
1
2






=
,
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
B
b
b
b
b
b
b
r
r
11
12
1
21
22
2
.
.
.
.
.
.
b
b
b
n
n
nr
1
2





	
The n × n matrix A is called the system matrix, and the n × r matrix B is the input matrix.
Multivariable, LTI systems involve multiple inputs u1, u2, …, ur and outputs y1, y2, …, yp. 
The ­outputs are linearly related to the states and the inputs according to
	
y
Cx
Du
=
+
	
(2.112)
where
	
y
y
y
y
C
c
c
c
c
c
c
p
n
n
=






=
1
2
11
12
1
21
22
2
,
.
.
.
.
.
.
.
.
.
.
..
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
,
c
c
c
D
d
p
p
pn
1
2
1






=
1
12
1
21
22
2
1
2
d
d
d
d
d
d
d
d
r
r
p
p
pr
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.





	

61
Continuous-Time Systems
The p × n constant matrix C is called the output matrix, and the p × r matrix D is the direct 
transmission matrix.
Equations 2.111 and 2.112 taken together are the state equations of the system. Note that the 
states x1, x2, …, xn, are internal to the system as shown in Figure 2.27. Multivariable systems are 
easier to analyze in terms of state variables compared to the input–output model description of the 
system, that is, dyi/dt = fi( , )
y u , i = 1, 2, …, n.
EXAMPLE 2.9
Interacting tanks with inflows into both tanks are shown in Figure 2.28. Choose the states to be the 
levels H1 = H1(t) and H2 = H2(t) and the single output as the volume of liquid in both tanks. Write 
the state equations for the system.
The continuous-time model of the linear tanks consists of the following equations:
	
A
H
t
F
F
1
1
0 1
1
d
d
+
=
,
	
(2.113)
	
F
R
H
H
0 1
12
1
2
1
,
(
)
=
−
	
(2.114)
	
A
H
t
F
F
F
2
2
0 2
0 1
2
d
d
+
=
+
,
,
	
(2.115)
	
F
R H
0 2
2
2
1
, =
	
(2.116)
Eliminating F0,1 and F0,2 from Equations 2.113 and 2.115 yields
	
A
H
t
R
H
H
F
1
1
12
1
2
1
1
d
d
+
−
=
(
)
	
(2.117)
	
A
H
t
R H
R
H
H
F
2
2
2
2
12
1
2
2
1
1
d
d
+
=
−
+
(
)
	
(2.118)
FIGURE 2.27  Dynamic system with input u, output y, and state x.
FIGURE 2.28  A system of interacting tanks.

62
Simulation of Dynamic Systems with MATLAB® and Simulink®
Solving for the state derivatives in Equations 2.117 and 2.118
	
d
d
H
t
AR
H
AR
H
A F
1
1 12
1
1 12
2
1
1
1
1
1
= −
+
+
	
(2.119)
	
d
d
H
t
A R
H
A R
A R
H
A F
2
2 12
1
2
2
2 12
2
2
2
1
1
1
1
=
−
+






+
	
(2.120)
Writing Equations 2.119 and 2.120 in matrix form gives the first part of the state equations,
	
d
d
d
d
H
t
H
t
AR
AR
A R
A R
A R
1
2
1 12
1 12
2 12
2
2
2 1
1
1
1
1
1






=
−
−
−
2
1
2
1
2
1
1
0
0
1











+






H
H
A
A
F
F2






	
(2.121)
The single output VT, which represents the volume of liquid in both tanks, is
	
V
AH
A H
A A
H
H
T =
+
=






1
1
2
2
1
2
1
2
[
]
	
(2.122)
The transmission matrix D is a 1 × 2 matrix of zeros due to the absence of a direct coupling 
from either input F1 or F2 to the output VT.
2.6.1  Conversion from Linear State Variable Form 
to Single Input–Single Output Form
In Section 2.3, an example was presented illustrating the conversion of a second-order state vari­
able model into a second-order differential equation by eliminating one of the state variables (see 
Equations 2.37, 2.38, and 2.42). The procedure involved manipulation and substitution of terms 
in the time domain, an approach that quickly becomes unwieldy as the number of state variables 
increases. Simpler methods are described in Chapter 4.
For a linear, third-order system with a single input, the starting point is the state variable model 
consisting of three coupled first-order differential equations expressing the state derivatives as a 
linear function of the states and input
	



x
a x
a x
a x
b u
x
a x
a x
a x
b u
x
a x
1
11 1
12
2
13
3
1
2
21 1
22
2
23
3
2
3
31
=
+
+
+
=
+
+
+
=
1
32
2
33
3
3
+
+
+
a x
a x
b u 	
(2.123)
where the output y is x1, x2, or x3.
A third order, input–output differential equation model equivalent to Equation 2.123 is
	





y
y
y
y
u
u
u
+
+
+
=
+
+
0
α
α
α
β
β
β
2
1
2
1
0 	
(2.124)
Expressions for the system coefficients α2, α1, and α0 and input coefficients β2, β1, and β0 are sum­
marized in Equations 2.125 through 2.127 and Table 2.1.
	
α2
11
22
33
=
+
+
–(
)
a
a
a
	
(2.125)

63
Continuous-Time Systems
	
α1
11
22
33
12
21
13
31
22
33
23
32
=
+
−
−
+
−
a
a
a
a a
a a
a a
a a
(
)
	
(2.126)
	
α0
11
23
32
22
33
12
21 33
23
31
13
22
31
21 32
=
−
+
−
+
−
a
a a
a a
a
a a
a a
a
a a
a a
(
)
(
)
(
) 	
(2.127)
2.6.2  General Solution of the State Equations
A solution to the state equation, Equation 2.111 can be found in any one of the texts on linear control 
theory listed in References. The solution is expressed in terms of an n × n matrix Φ(t), called the 
transition matrix of the system.
	
x t
t x
t
Bu
d
t
( )
( )
(
)
( )
=
( )
Φ
Φ
0
0
+
−
−
∫
τ
τ
τ
	
(2.128)
The transition matrix depends solely on the system matrix A. One method for finding Φ(t) uses a 
definition based on an infinite series,
	
Φ( ) =
t
I
tA
tA
tA
+
+
+
+
(
)
!(
)
!(
)
1
2
1
3
2
3

	
(2.129)
As an illustration of how the transition matrix is used to solve the linear state equations, suppose 
the system matrix for an autonomous system (u = 0) is
	
A = −
−






0
1
2
3 	
Using the infinite series expansion in Equation 2.129 or some other method (see Chapter 4) for 
finding Φ(t) the result is
	
Φ( )t
t
t
t
t
t
t
t
t
=
−
−
−
+
−
+






−
−
−
−
−
−
−
−
2
2
1
2
2
2
2
2
e
e
e
e
e
e
e
e
2
2
	
(2.130)
and from Equation 2.128, the state x(t), t ≥ 0 is
	
x t
x t
e
e
e
e
e
e
e
e
t
t
t
t
t
t
t
t
1
2
2
2
2
2
2
2
( )
( )





=
−
−
−
+
−
+

−
−
−
−
−
−
−
−
2
2











x
x
1
2
0
0
( )
( ) 	
(2.131)
TABLE 2.1
Input Coefficients on Right-Hand Side of Equation 2.125 for y = x1, x2, x3
y
β2
β1
β0
x1
b1
– (a22 + a33)b1 + (a12b2 + a13b3)
(a22a33 – a23a32)b1 + (a13a32 – a12a33)b2 + (a12a23 – a13a22)b3
x2
b2
a21b1 – (a11 + a33)b2 + a23b3
(a23a31 – a21a33)b1 + (a11a33 – a13a31)b2 + (a13a21 – a11a23)b3
x3
b3
a31b1 + a32b2 – (a11 + a22)b3
(a21a32 – a22a31)b1 + (a12a31 – a11a32)b2 + (a1la22 – a12a21)b3

64
Simulation of Dynamic Systems with MATLAB® and Simulink®
The state trajectory or state portrait is a plot showing the path of the state vector in state space. 
In the general case, there is a separate coordinate axis for each of the state variables. The time 
variable “t” does not appear explicitly; however, each point along the state trajectory corresponds 
to a specific point in time. Figure 2.29 shows four different state trajectories starting from different 
initial states. Note that the four state trajectories all terminate at the origin, the equilibrium point 
of the system.
EXERCISES
	2.17	 For the system of interacting tanks in Example 2.9.
	
a.	 Draw the simulation diagram of the system.
	
b.	 Choose a new set of state variables as
	
z
H
H
z
H
H
1
1
2
2
1
2
=
+
=
−
,
	
		
and find the new system and input matrices A and B where
	


z
z
A z
z
B F
F
1
2
1
2
1
2





=





+






	
		
  Hint: Find H1 and H2 in terms of z1 and z2.
	
c.	 Find the new output matrix C where
	
V
C z
z
T =






1
2 	
–5
–5
–2.5
–2.5
0
0
x1
x1(0) = –4
x2(0) = –2
x2
2.5
2.5
5
5
–5
–2.5
0
x1(0) = –4
x2(0) = 2
x2
2.5
5
–5
–2.5
0
x1
2.5
5
–5
–5
–2.5
–2.5
0
0
x1
x1(0) = 3
x2(0) = 4
x2
2.5
2.5
5
5
–5
–2.5
0
x1(0) = 3
x2(0) = –4
x2
2.5
5
–5
–2.5
0
x1
2.5
5
FIGURE 2.29  State trajectory in Equation 2.131 for different initial states.

65
Continuous-Time Systems
	2.18	 Write the state equations for the system of three railroad cars in Exercise 2.16. Choose the out­
puts to be the positions of each car.
	2.19	 An ecosystem consists of three species whose populations are denoted by F, S, and G. The 
growth rates of each specie are given by
	
Growth rate of
d
d
Growth rate of
d
d
F
F
F
t
a
cS
u
S
S
S
t
k
F
m
F
G
=
=
−
−
=
= −+
−
−
1
1
λ
u
G
G
G
t
e
S
u
S
G
Growth rate of
d
d
=
= −+
+
1
σ
	
		
  Write the system in state variable form x = f(x, u) y = g(x, u) with the state x = [F S G]T, 
input u = [uF us uG]T, and output chosen as y = F + S + G.
	2.20	 Limestone is reduced to calcium oxide (CaO), magnesium oxide (MgO), and carbon dioxide 
(CO2) by heating it in a reaction vessel maintained at a constant high temperature (McClamroch 
1980). The limestone is made up of a fixed fraction β of calcium carbonate(CaCO3), and the 
rest is magnesium carbonate (MgCO3). The process is described by the first-order irreversible 
chemical reactions
	
CaCO
CaO + CO
MgCO
MgO + CO
3
2
3
2
1
2
k
k
→

→

	
		
where k1 and k2 are the rate constants for the two reactions.
		
  Limestone is added to the reaction vessel at a rate of u mol/h. The mass (in moles) of 
CaCO3, MgCO3, CaO, and MgO in the vessel are denoted by x1, x2, x3, and x4, respectively 
(see Figure E2.20).
		
  Since each mole of reactant that decomposes yields one mole of product (plus one mole of 
carbon dioxide), the state equations are
	




x
k x
u
x
k x
u
x
k x
x
k x
1
1 1
2
2
2
3
1 1
4
2
2
1
= −
+
= −
+
−
=
=
β
β
(
)
	
	
a.	 Draw a simulation diagram of the system. What is the order of the system?
	
b.	 Find the matrices A, B, C, and D in the state equation model if the outputs are y1 = x3 and 
y2 = x4.
	
c.	 Find the differential equation relating yl and u. Comment on the result.
FIGURE E2.20

66
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	 Repeat part (c) for y2 and u.
	
e.	 The vessel is initially empty and u(t) = A, t ≥ 0. Find analytic expressions for the state 
variables.
	2.21	 The populations of three species in a restricted area are governed by the differential equations
	


P t
a P t
a P t
a P t
c u t
P t
a P t
a
1
11 1
12
2
13
3
1
2
21 1
2
( )
( )
( )
( )
( )
( )
( )
=
+
+
+
=
+
2
2
23
3
2
3
31 1
32
2
33
3
P t
a P t
c u t
P t
a P t
a P t
a P t
c
( )
( )
( )
( )
( )
( )
( )
+
+
=
+
+
+

3
1
2
3
1
2
3
0
1
0
1
0
1
1
u t
c
c
c
c
c
c
( )
,
,
, and
≤
≤
≤
≤
≤
≤
+
+
=
	
		
where u(t) is the total immigration rate for all species. The constants c1, c2, and c3 represent the 
fraction of u(t) immigrating to each of the species populations.
	
a.	 Draw a simulation diagram of the system.
	
b.	 Find the third-order differential equation relating P1(t) and u(t).
	
c.	 Draw a simulation diagram of the system containing three integrators in series where the 
input to the first integrator is p1(t).
2.7  NONLINEAR SYSTEMS
Real-world dynamic systems exhibit nonlinear behavior. The continuous-time models that relate 
inputs and outputs of actual systems are (entirely or partially) composed of nonlinear algebraic 
and differential equations. We may well choose to employ a linear model as an approximation of 
a nonlinear system because it is far simpler to work with. A unified approach to solving nonlinear 
algebraic equations does not exist, to say nothing of nonlinear differential equations.
The principle of superposition states that if a system responds to inputs u1(t) and u2(t) with outputs 
y1(t) and y2(t), then the system’s response to a linear combination of the inputs u(t) = clu1(t) + c2u2(t) 
is y(t) = c1y1(t) + c2y2(t). Superposition is a property of linear system models. It is not applicable to 
models of nonlinear systems.
Unlike linear system models, a nonlinear system model exhibits dynamic response properties 
whose nature is dependent on the magnitude of its inputs and the initial state. Consider the two 
simple first-order systems, one linear and the other nonlinear, in Figure 2.30. Both systems are 
driven by the identical input.
Discrete-time system approximations for both continuous-time systems can be obtained by 
replacing the first derivative terms with divided differences, that is,
	
d
d
y
t
y
n
T
y
nT
n
T
nT
y
n
y
n
T
A
A
A
A
≈
+
−
+
−
=
+
−
[(
) ]
[(
)]
(
)
(
)
( )
1
1
1
	
(2.132)
	
d
d
z
t
z
n
T
z
nT
n
T
nT
z
n
z
n
T
A
A
A
A
≈
+
−
+
−
=
+
−
[(
) ]
[(
)]
(
)
(
)
( )
1
1
1
	
(2.133)
resulting in difference equations
FIGURE 2.30  Linear and nonlinear system subject to identical input.

67
Continuous-Time Systems
	
y
n
y
n
T u n
y
n
A
A
A
(
)
( )
[
( )]
( )
+
=
+
−
1
	
(2.134)
	
z
n
z
n
T u n
z
n
A
A
A
(
( )]
( )
+
=
+
−
1
2
)
( )
[
	
(2.135)
Equations 2.134 and 2.135 can be solved recursively for yA(n) and zA(n), n = 1, 2, 3, … given ­initial 
values for yA(0) and zA(0). The results (every third point) are plotted in Figure 2.31 when the initial 
condition is zero for inputs u(t) = 1 and u(t) = 10.
Approximate responses yA(nT) for both inputs are typical linear first-order system step responses, 
namely, they each require roughly four to five time constants (τ = 1 s) to reach steady state. 
Furthermore, the response yA(nT) in the lower left corner where u(t) = 10 is 10 times the response 
yA(nT) in the upper left corner where u(t) = 1. For a constant input u(t) = ū, the steady-state value is 
yA(∞) = ū for the linear system.
In contrast to the linear system, the transient period of the nonlinear system is shorter when the 
input u(t) = 10 compared to when u(t) = 1. Furthermore, zA(∞) = u
1
2  for the nonlinear system when 
the input is u(t) = u , in violation of the principle of superposition.
A linear model approximation of a nonlinear system is often acceptable provided the system 
variables (inputs, states, outputs) are confined to a restricted operating region. A simple example 
serves to illustrate the point. Consider a system with input u = u(t) and state x = x(t) described by
	
d
d
x
t
x
u
+
=
0 2
1 2
.
/
	
(2.136)
The state derivative function is a nonlinear function of x, that is,
	
d
d
x
t
f x u
x
u
=
= −
+
( , )
.
/
0 2
1 2
	
(2.137)
For arbitrary input u(t), the solution to Equation 2.137 can be approximated in a way similar to 
what we did in Chapter 1 using difference equations. However, suppose the input u(t) is confined to a 
0
1
2
3
4
5
0
1
2
3
0
0.25
0.5
u(t) = 1, t ≥ 0
T = 0.05
u(t) = 1, t ≥ 0
T = 0.05
yA (nT)
zA (nT)
0.75
1
0
0.25
0.5
0.75
1
0
1
2
3
4
5
0
1
2
3
0
2.5
5
u(t) = 10, t ≥ 0
t
t
T = 0.05
u(t) = 10, t ≥ 0
T = 0.05
yA (nT)
zA (nT)
7.5
10
0
0.5
1
1.5
2.5
3
2
First-order linear
system response
First-order nonlinear
system response
First-order linear
system response
First-order nonlinear
system response
FIGURE 2.31  Approximation of linear and nonlinear system step responses.

68
Simulation of Dynamic Systems with MATLAB® and Simulink®
range that results in the state x(t) varying between xl and xu as shown in Figure 2.32. It is reasonable 
to assume the term 0.2x1/2 in Equation 2.136 could be replaced by a linear function of x resulting in a 
simpler model. We will have more to say about linearization of nonlinear system models in Chapter 7.
Another distinguishing property of linear systems is the way they respond to sinusoidal inputs. 
At steady state, the output of a linear system forced by a sinusoidal input with radian frequency ω0 
is itself a sinusoid at the same frequency. In general, the output is shifted in time (out of phase) with 
respect to the input, and the amplitude is either attenuated or amplified compared to the amplitude 
of the input. This property is the foundation of linear AC steady-state analysis and the design of 
linear control systems by the method of frequency response. In the case of nonlinear systems, the 
output includes harmonics (sinusoidal terms at frequencies nω0, n = 1, 2, 3, …).
The type of nonlinearity portrayed in Figure 2.32 has been classified as “progressive” (Buckley 
1964). The distinguishing characteristics of progressive nonlinearities are their monotonic continuous 
nature over the range of input and output values of interest. Furthermore, state derivative functions which 
are progressive nonlinearities can be approximated by linearization methods. “Essential” nonlineari­
ties are those that cannot be represented by a simple continuous analytical function. Phenomena such 
as friction, dead zone and saturation in valves, and backlash in gears in mechanical systems; hysteresis 
in electrical components; and analog-to-digital quantization are examples of essential nonlinearities.
2.7.1  Friction
The first example illustrates a type of friction called coulomb friction. An object of mass m, resting 
on a flat surface, is subject to an external horizontal force f(t) and a resisting frictional force fµ as 
shown in Figure 2.33. The velocity of the mass obeys the relation in Equation 2.138
FIGURE 2.33  Nonlinear system example—coulomb friction.
0
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
2
4
6
8
10
12
Region of
linear
approximation
14 15 16
18
20
x
x1
y = 0.2x1/2
y
xu
Nonlinear function with approximately linear region
FIGURE 2.32  Linearizing the nonlinear function 0.2x1/2 in an interval x1 ≤ x ≤ xu.

69
Continuous-Time Systems
	
m v
t
f
f
d
d +
=
µ
	
(2.138)
The friction force fµ is equal in magnitude to the force f until a breakaway force fB is applied (see 
Figure 2.34), and the mass begins to slide along the surface. The breakaway force fB depends on the 
coefficient of static friction µ0 and the object’s weight,
	
f
mg
B = µ0
	
(2.139)
While in motion, the friction force fµ is a constant dependent on the coefficient of sliding friction 
µs and the weight mg of the object as seen in Equation 2.140. Note that fµ is also equal to µsmg when 
f ≤ fB and v > 0.
	
f
f
f
f
v
mg
f
f
v
B
s
B
µ
µ
=
≤
=
>
>



when
when
(
)
(
)
0
0 	
(2.140)
EXAMPLE 2.10
The applied force f(t) is shown in Figure 2.35. Find the velocity of the object.
	
f t
f
t
t
t
t
f
t
t
t
B
B
( ) =






≤<
−











≤
2
0
2
2
1
1
1
1
t
t
t
t
<
≥





2
0
2
1
1
	
(2.141)
The difference equation resulting from the substitution of the divided difference [vA(n + 1) – 
vA(n)]/T for the first derivative dv/dt in Equation 2.138 is
FIGURE 2.34  Friction force fµ, versus increasing f applied to a mass initially at rest.
FIGURE 2.35  Applied force f(t) versus t.

70
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
v
n
v
n
T
m f n
f n
A
A
(
)
( )
[ ( )
( )]
+
=
+
−
1
µ
	
(2.142)
A recursive solution for vA(n), n = 1, 2, 3, … given vA(0) = v(0) = 0 is not as straightforward 
as it was in previous examples owing to the nature of the friction force. The MATLAB® M-file 
“Ch2_Ex2_10.m” includes the necessary conditional statements to handle the discontinuity in fµ. 
Results are shown in Figure 2.36.
The analytical solution for the velocity v(t) is plotted along with the approximate solu­
tion  vA(n). It can be found by integrating the differential equation (Equation 2.138) over 
­consecutive intervals using the appropriate value for the friction force (f or µsmg) and the 
correct initial velocity for each interval. The details are left for an exercise; the results are as 
follows.
	
v t
t
t
gt
t
t
t
t
s
s
( )
,
.
=
≤≤





−





+
−
0
0
0 5 1
1
0
1
2
1
µ
µ
µ
2
µ
µ
µ
µ
0
1
1
1
0
1
2
0
1
4
0 5
4






≤<
−






−
(
)
,
. t
t
t
gt
t
t
t
t
s
+





−
−






≤<
−






9µ
µ
µ
0
1
1
1
1
2
4
2
s
s
t
t
t
gt
t
t
,
+
+






≤<
<





7µ
µ
0
1
2
4
2
0
s
f
f
t
t
T
T
t
,
,

	
(2.143)
The time Tf when the velocity returns to zero is obtained from
	
T
t
f
s
s
=
+
1
0
4
2
µ
µ
µ
(7
)
	
(2.144)
0
0
2.5
5
7.5
10
1
2
3
4
5
40
30
20
10
0
t (s)
T = 0.025 s
fB = µ0 mg
t1 = 1 s
f (lb)
vA (n) (ft/s)
vA (n), n = 0, 4, 8, ...
v (t)
Applied force
Velocity
0
1
2
m = 2 slugs, µ0 = 0.3, µs = 0.1
3
4
5
6
FIGURE 2.36  Approximate solution vA(n), n = 0, 4, 8, … and exact solution v(t), t ≥ 0.

71
Continuous-Time Systems
2.7.2  Dead Zone and Saturation
The next example of mechanical (pneumatic) nonlinearity is a valve that contains two nonlinear 
­elements, dead zone and saturation. First, consider the nonlinear elements individually. An ideal 
dead zone nonlinearity is shown in Figure 2.37. The dead zone is the region between t1 and t2.
	
f t
f
t
t
t
t
t
t
t
t
t
f
t
t
t
t
( ) =
−
−






≤
< <
−
−




3
2
3
2
2
1
2
0
1
0
1
0


≤





t
t1
	
(2.145)
An ideal saturation nonlinearity is shown in Figure 2.38.
	
f t
f
t
t
t
t
f
t
t
s
s
s
s
s
( )
sgn(
)
=






≤
>





	
(2.146)
The saturated regions are when |t| > ts, that is, for t < –ts, the value of –f(t) does not change and 
for t > ts, the value of f(t) does not change.
FIGURE 2.37  Dead zone nonlinearity.
FIGURE 2.38  Saturation nonlinearity.

72
Simulation of Dynamic Systems with MATLAB® and Simulink®
Together, these nonlinearities (saturation and dead zone) form an approximation to the pneu­
matic behavior of a valve shown in Figure 2.39.
±Io is the opening current, that is, the current needed to open the valve. ±Is, is the saturation cur­
rent where any additional current (more than Is or less than –Is) does not open the valve any further. 
The region between Io and Is(–Io and –Is) is appropriately called the active region. The region between 
–Io and Io is called the dead zone. However, in practice, leakage occurs below the opening current.
2.7.3  Backlash
Backlash nonlinearity often occurs in gears due to the spacing between individual teeth. The spac­
ing is needed for the gears to mesh without binding. This spacing (d) is shown in Figure 2.40.
Figure 2.41 shows a plot of the backlash nonlinearity.
Assume the space d exists in the initial condition as in Figure 2.40. As the leading gear moves 
in one direction, the following gear does not move until contact is made after the leading gear is 
displaced by d. Then, the following gear tracks the leading gear as indicated by section 1 of Figure 
2.41. When the leading gear reverses direction, it must be displaced by a distance 2d before contact 
is reestablished with the following gear, as indicated by section 2 of Figure 2.41. Similar to before, 
the following gear tracks the leading gear as indicated by section 3 of Figure 2.41. Another reversal 
of directions leads to section 4 in Figure 2.41.
2.7.4  Hysteresis
The graph of fµ versus f in Figure 2.34 is applicable so long as the applied force f and resulting 
velocity v are increasing along the path A-B-C-D. Once the block is in motion and the applied force 
FIGURE 2.39  Valve flow versus current.
FIGURE 2.40  Backlash in gear teeth.

73
Continuous-Time Systems
f diminishes to zero, the return path does not follow D-C-B-A. That is, the sliding block does not 
abruptly stop when the applied force is reduced to fB. Rather, the friction force remains at µsmg 
until the block decelerates to zero velocity. This type of nonlinear phenomenon is referred to as 
hysteresis.
An example of a real system with hysteresis, present by design, is a thermostatically controlled 
furnace supplying heat to a building. A simplified diagram of the system is depicted in Figure 2.42. 
An energy balance on the building interior space relates the accumulation of thermal energy to the 
heat flow from the furnace and heat loss to the outside.
The equation is
	
C T
t
Q
Q
d
d
=
−
0
	
(2.147)
where C is the thermal capacitance of the air and contents inside the building, all of which are 
assumed to be at temperature T. The heat loss Q0 is assumed proportional to the temperature dif­
ference T – T0, that is,
	
Q
T
T
R
0
0
=
−
	
(2.148)
FIGURE 2.41  Backlash nonlinearity.
FIGURE 2.42  Temperature regulation in a building.

74
Simulation of Dynamic Systems with MATLAB® and Simulink®
with R the overall thermal resistance of the exterior walls and insulation. Combining Equations 
2.147 and 2.148 and introducing the thermal system time constant τ = RC result in the first-order 
model
	
τ dT
t
T
RQ
T
d +
=
+
0
	
(2.149)
The furnace operates in one of two modes, on or off, depending on whether the building temper­
ature T is below or above some tolerance Δ about a desired temperature Td and whether the building 
temperature is increasing or decreasing. When it is on, a constant amount of heat Q is supplied; 
conversely, no heat is produced when the furnace is off. In mathematical terms,
	
Q
Q T
T
T
T
T
T
t
T
T
T
T
T
T
d
d
d
d
d
d
=
≤
−∆
−∆<
<
+∆
>
>
+∆
−∆<
<
+∆
,
,
or
and d
d
or
and d
0
0
dt >




0 	
(2.150)
The hysteresis effect is evident from the graph in Figure 2.43 (McClamroch 1980).
From Equations 2.149 and 2.150, it follows that the state derivative dT/dt depends not only on 
the input T0 and the state T but also on its own sign. Furthermore, since the furnace output Q in 
Figure 2.43 is multi-valued whenever the building temperature T falls within Td – Δ to Td + Δ, the 
initial state T(0) and the initial state of the furnace (on/off) must be specified to simulate or obtain 
analytical solutions for T(t), t ≥ 0.
The example that follows illustrates a method for obtaining an approximate solution and the 
exact solution for the building temperature T(t) when the outside temperature T0(t) is constant.
EXAMPLE 2.11
A building’s thermostat has been off for a period of time sufficient to allow the inside and outside 
temperatures to equalize. The thermostat is then set to 75°F. It is programmed to turn off when 
the interior temperature reaches 78°F and back on when it falls below 72°F. The furnace produces 
36,000 Btu/h. Thermal capacitance of the occupied space and interior furnishings is 300 Btu/°F, 
and the thermal resistance of the walls is 8 × 10−4 °F per Btu/h. The outside temperature is a 
constant 50°F.
	
a.	Find the time constant of the system.
	
b.	Show that the furnace is capable of raising the building temperature to 78°F.
	
c.	Find the temperature response and the time required for the building temperature to 
reach 78°F.
	
d.	Find the temperature response and the time required for the building temperature to cool 
down to 72°F.
	
e.	Find the temperature response and the time required for the building temperature to go 
back to 78°F.
FIGURE 2.43  Hysteresis in furnace output versus building temperature.

75
Continuous-Time Systems
	
f.	Simulate the temperature responses in parts (c), (d), and (e) by solving a difference equa­
tion with appropriate step size and compare the approximate and exact solutions.
	
a.	The time constant, a measure of the speed of the system’s dynamics is
	
τ =
=
×
°
⋅
°
=
−
RC
8
10
0 24
4
F
Btu h
300 Btu
F
h
.
	
	
b.	The steady-state temperature differential (inside minus outside) that the furnace is 
­capable of maintaining is obtained from the first-order differential equation model in 
Equation 2.149 with the derivative set to zero and the furnace on, that is, Q(t) = Q.
	
T
RQ
T
ss =
+
0 	
(2.151)
	
⇒
−
=
T
T
RQ
ss
0
	
(2.152)
	
where 
	
T0 is the constant outside temperature
	
Tss is the steady-state inside temperature
	
	
In this example,
	
T
T
RQ
ss −
=
=
×
°
⋅
=
°
−
0
4
8
10
28 8
F
Btu h
36,000 Btu
h
.
F
	
	
	
Hence, the furnace is capable of raising the inside temperature from 50°F to 78.8°F, 
which is slightly higher than the 78°F shutoff setting of the thermostat.
	
c.	From Equation 2.6, the step response of the first-order system is
	
T t
T
e
R
e
T
Q
t
t
( )
( )
(
)(
)
/
/
=
+
+
−
−
−
0
1
0
τ
τ
	
(2.153)
	
which describes the building temperature from time t = 0 up to t = t1 where
	
T t
T
F
F
F
d
( )
1
75
3
78
=
+
=
° + ° =
°
∆
	
(2.154)
	
Solving for t1 gives
	
t
T
RQ
T
T
RQ
Td
1
0
0
0
0 24
50
=
+
−
+
−
+∆






=
+
τ ln
28.8
(
)
( )
(
)
(
)
.
ln
(
)−
+
−
+





=
50
50
75
0 86
(
)
(
.
28.8
3)
h
	
(2.155)
	
From Equation 2.153 with T(0) = 50°F, the temperature response is
	
T t
e
e
t
t
t
( )
. (
),
.
/ .
/ .
=
+
−
≤≤
−
−
50
78 8 1
0
0 86
0 24
0 24
	
(2.156)
	
d.	The furnace shuts off when the temperature reaches  Td + Δ = 78°F and the subsequent 
cooling from 78°F to Td - Δ = 72°F follows the step response in Equation 2.153 with 
Q = 0 and T(0) = Td + Δ = 78°F. Thus,

76
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
T t
T
e
e
t
t
t
T
d
t t
t t
( )
(
)
,
[
]
(
)/
(
)/
=
+
+
−
≤≤
−−
−−
∆
1
1
0
1
2
1
τ
τ
	
(2.157)
	
=
+
≤≤
78
50 1
0 86
0 86
0 24
0 86
0 24
2
e
e
t
t
t
t
–( – .
)/ .
–( – .
)/ .
[ –
],
.
	
(2.158)
	
where t2 is the time when the building temperature is Td – Δ – 72°F. Note the (t – t1) in the 
exponent of Equation 2.157 since t1 is the initial time of the step response. From Equation 
2.157 with t = t2, T(t2) = Td – Δ, the time t2 is given by
	
t
t
T
T
T
T
d
d
2
1
0
0
0 86
0 24
75
50
=
+
+∆−
−∆−






=
+
+
−
τ ln
3)
(
)
(
)
.
.
ln (
(
.
75
0 92
−
−





=
3)
50
h
	
(2.159)
	
e.	The cycle is completed when the building temperature returns to Td + Δ = 78°F. Using 
the same approach as before, the result is
	
T t
T
T
RQ
t
t
t
d
t t
t t
( )
(
)e
(
)
e
,
(
)/
(
)/
=
−
+
+
−


≤≤
=
−−
−−
∆
2
2
0
2
3
1
72
τ
τ
e
. [
e
],
.
(
.
)/
(
.
)/
−−
−−
+
−
≤≤
t
t
t
t
0 92
0 92
3
78 81
0 92
τ
τ   
	
(2.160)
	
Setting T(t3) = Td + Δ and solving for t3,
	
t
t
T
RQ
T
T
RQ
T
d
d
3
2
0
0
0 92
0 24
=
+
+
−
−
+
−
+






=
+
τ ln
 l
(
)
(
)
(
)
(
)
.
.
∆
∆
n (
. )
(
)
(
. )
(
)
.
h
50
28 8
75
3
50
28 8
75
3
1 43
+
−
−
+
−
+





=
	
(2.161)
	
f.	The approximate solution for the building temperature is based on the difference 
­equation obtained by replacing the first derivative dT/dt in Equation 2.149 with the finite 
­difference [TA (n + 1) – TA (n)]/T. The result is
	
T n
T T n
T RQ n
T
A
A
(
)
( )
[
( )
]
+
=
−






+
+
1
1
0
∆
∆
τ
τ
	
(2.162)
	
where Q(n) is based on the logic in Equation 2.150. The MATLAB M-file “Ch2_Ex2_11.m” 
evaluates the exact and approximate solutions and generates the graph shown in 
Figure 2.44.
	
	
The building temperature experiences periodic fluctuations between Td – Δ = 72°F 
and Td + Δ = 78°F as long as the outside temperature remains constant. The period is 
equal to t3 – t1 = 1.43–0.86 = 0.57 h.
2.7.5  Quantization
In digital control, it is often desired to discretize the continuous signal of a sensor for use by a 
computer or microprocessor. Conversion of this signal is achieved by an analog-to-digital converter 
(ADC) where the signal is quantized.
The quantization nonlinearity is shown in Figure 2.45. In this example, a voltage range between 
V0 and V1 is designated as state zero, S0; a voltage range between V1 and V2 is designated as state 
one, S1; and so on. Each state is represented by a binary expression according to the number of bits 

77
Continuous-Time Systems
used by the data type assigned to the state. For example, an 8-bit representation for state zero is 
00000000, while state one is represented by 00000001. The more bits that are available for quanti­
zation yield a better resolution of the sensor’s range, in this case, voltage. There are 2n states where 
n is the number of bits. Therefore, an 8-bit ADC has 256 states, 0–255. The resolution is the sensor’s 
range divided by the number of states. For example, a sensor with a voltage range from 0 to 10 V 
has a resolution of 0.04 V for an 8-bit ADC.
2.7.6  Sustained Oscillations and Limit Cycles
Both linear and nonlinear system differential equation models are capable of producing solutions 
involving sustained oscillations of the state variables. This comes as no surprise for linear systems. 
Indeed, we have already seen how the natural response of an undamped second-order system 
continues to oscillate forever (see Figure 2.4). Examples will be presented in Chapter 4 of forced 
linear systems with sustained sinusoidal oscillations in the output after the transient response has 
died out.
0
50
55
60
65
70
75
80
0.25
0.5
Building temperature vs. time
Step size ∆T = 0.001 h
0.75
1.25
1.5
1
t (h)
t2
t1
t3
T (°F)
Td – ∆
Td + ∆
TA(n), n = 0, 25, 50, ...
T(t), t ≥ 0
FIGURE 2.44  Exact and approximate solutions for building temperature.
FIGURE 2.45  Quantization.

78
Simulation of Dynamic Systems with MATLAB® and Simulink®
State trajectories of the autonomous system governed by the differential equation
	



x
x
x
x
x
x
n
+
=
=
=
ω2
0
0
0
0
0
subject to ( )
,
( )
	
(2.163)
are closed orbits in the x versus x state space. Figure 2.46 shows state trajectories, also known as 
orbits, for the undamped system in Equation 2.163 with ωn = 1 rad/s starting from four different 
initial points in the state space.
The orbits are typically elliptical; however, those in Figure 2.46 are circular because the natural 
frequency ωn = 1 rad/s. Sustained oscillations of the state components x and dx/dt are shown in 
Figure 2.47.
Nonlinear systems can experience two types of sustained oscillations. The first class is simi­
lar to the case of linear systems. In the unforced case, the oscillations are sensitive to the initial 
conditions. That is, the particular points along the closed path of the state trajectory vary depend­
ing on the ­location of the initial point in state space. The initial point is always on the closed 
orbit. The amplitude and period of the oscillations depend on the system parameters and initial 
conditions.
The state trajectories of the nonlinear system described by the coupled first-order differential 
equations
	
x
x a
bx
1
1
2
=
−
(
) 	
(2.164)
	
x
x cx
d
2
2
1
=
−
(
) 	
(2.165)
are concentric closed curves “spun out” in a clockwise rotation from the initial point. The center 
of rotation is the equilibrium point located at (d/c, a/b). The MATLAB M-file “Ch2_Fig2_46_
and_Fig2_47.m” uses a difference quotient with step size T = 5 × 10−5 to approximate the first 
derivatives in Equations 2.164 and 2.165. The approximate solutions in Figure 2.48 show four orbits 
starting from different initial states.
1
0.75
0.25
–0.25
–0.75
–0.5
–1
0.5
0
–1
–0.5
c
b
a
d
0
0.5
1
x
ω n = 1 rad/s
dx/dt
State trajectories of undamped second-order systems
Initial state: x(0), x
•(0)
FIGURE 2.46  Closed orbits for the system x
x
n
n
+
=
=
ω
ω
2
0
1
 
 rad/s)
(
.

79
Continuous-Time Systems
Time histories of the state variables are shown in Figure 2.49. In contrast to the sinusoidal oscil­
lations of the LTI system governed by Equation 2.163, the oscillations of the nonlinear system in 
Equations 2.164 and 2.165 are not of a sinusoidal nature.
Another type of sustained oscillation is possible for an unforced nonlinear system. In this case, 
there is a single closed orbit in the state space independent of the initial conditions. If the initial 
state is located on this closed path, the state vector remains on it forever, periodically returning 
to the starting point. When the initial state is inside the closed curve, the state trajectory may be 
asymptotically attracted to the closed curve or repelled from it towards a stable equilibrium point 
in its interior. Should the initial state be located outside the closed curve, the state trajectory either 
converges to it in a finite time period or else spirals outward from it.
a
b
c
d
20
Initial state: x1(0), x2(0)
a = 10, b = 2, c = 4, d = 12
x1,e = d/c = 3, x2,e = a/b = 5
(x1,e, x2,e)
18
16
14
12
10
8
6
4
2
0
0
1
2
3
4
5
6
x1
7
8
9
10
11
12
x2
FIGURE 2.48  Closed orbits and sustained oscillations for the nonlinear system.
1
2
3
4
5
6
7
8
9
10
11
12
0
1
0.5
–0.5
–1
0
1
2
3
4
5
6
t
a
b
c
d
a
x
1
0.5
–0.5
–1
0
dx/dt
b
c
d
7
8
9
10
11
12
0
(a)
(b)
FIGURE 2.47  Sustained oscillations of x (a) and dx/dt (b) for undamped second-order systems.

80
Simulation of Dynamic Systems with MATLAB® and Simulink®
Sustained oscillations of this nature are called limit cycles. If the initial state is not on the limit 
cycle, the state trajectory is either attracted to or repelled from it. Limit cycles are either stable or 
unstable depending on which of the two situations applies.
An autonomous mechanical system with a stable limit cycle is given in Tse et al. (1963). Referring 
to Figure 2.50, the mass m is acted upon by a linear spring force Fk, a nonlinear damping force Fc, 
and a self-excitation force F, that is, a force with explicit dependence solely on the internal state of 
the system.
Note that there are no external forces present. The differential equation model is
	
mx
F
F
F
F x
cx
x
kx
c
k



=
−
−
=
−
−
0
2
(
)
	
(2.166)
	
⇒
+
−
+
=
mx
cx
F x
kx


(
)
0
2
0
	
(2.167)
The effective damping force is (cx2 – F0) x. In the neighborhood of the equilibrium point x = 0, 
x = 0, the term (cx2 – F0) < 0. The negative damping results in an increase of energy in the sys­
tem making the equilibrium point inherently unstable. Consequently, the state trajectory will move 
­outwards from the origin in state space.
The reverse is true whenever (cx2 – F0) > 0. In this case, the damping term is positive and energy 
is dissipated from the system. The state trajectory spirals inward to points where the total energy 
in the system is lower. Clearly, a locus of points must exist in state space to function as a transition 
between the two phenomena. The locus must be a closed curve, namely, the limit cycle.
0
5
10
15
20
x2
0
2.5
5
7.5
10
d
c
a
b
x1
(a)
(b)
t
0
0.25
0.5
a
d
c
b
1
0.75
1.25
1.5
0
0.25
0.5
1
0.75
1.25
1.5
FIGURE 2.49  Sustained oscillations of x1 (a) and x2 (b) for nonlinear second-order system.
FIGURE 2.50  An autonomous nonlinear system with self-excitation force.

81
Continuous-Time Systems
EXAMPLE 2.12
For the mechanical system described by Equation 2.167,
	
a.	Convert the system model to state variable form.
	
b.	Numerical values of the system parameters are m = 1, k = 2, c = 0.5, and F0 = 3. 
Approximate the state derivatives numerically with appropriate step size to determine 
the state trajectories when the initial state is located at
	
i.	 x(0) = −1, x(0) = −5
	
ii.	 x(0) = 2, x(0) = 5
	
iii.	 x(0) = −2, x(0) = 15
	
iv.	 x(0) = 5, x(0) = −20
	
	 Plot the trajectories in the state space.
	
c.	Estimate the period of the limit cycle.
	
a.	Choosing the state vector as x1 = x, x2 =  x yields the state derivative functions
	
x
f x x
x
1
1
1
2
2
=
=
(
)
,
	
(2.168)
	
x
f x
x
m kx
cx
F x
2
2
1
2
1
1
2
0
2
1
=
= −
+
−
(
)
[
(
)
]
,
	
(2.169)
	
b.	Replacing x1 and x2 by difference quotients leads to the following difference equations 
for the discrete-time system
	
x
n
x
n
Tf x
n x
n
A
A
A
A
1
1
1
1
2
1
,
,
,
,
( ),
]
(
)
( )
[
( )
+
=
+
	
(2.170)
	
=
+
x
n
Tx
n
A
A
1
2
,
,
( )
( ) 	
(2.171)
	
x
n
x
n
Tf x
n x
n
A
A
A
A
2
2
2
1
2
1
,
,
,
,
(
)
( )
[
( ),
( )
+
=
+
	
(2.172)
	
=
−
+
−
{
}




x
n
T
m kx
n
cx
n
F
x
n
A
A
A
A
2
1
1
2
0
2
,
,
,
,
( )
( )
( )
( )
	
(2.173)
–6
–5
–4
–3
–2
–1
0
1
2
3
4
5
6
x2
x1
25
20
15
10
Limit cycle
5
0
–5
–10
–15
–20
(5, –20)
(–1, –5)
(2, 5)
(–2, 15)
Nonlinear system with limit cycle
m = 1, k = 2, c = 0.5, F0 = 3
FIGURE 2.51  Approaches to limit cycle from several initial states.

82
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The difference equations are solved recursively in “Ch2_Ex2_12.m” for the given 
initial states. The limit cycle and the four state trajectories are shown in Figure 2.51. 
As expected, the state trajectories eventually converge to the limit cycle.
	
c.	Figure 2.52 shows the time responses for the state components starting from the initial 
state x1(0) = 5, x2(0) = −20. The period of sustained oscillations can be approximated 
from the graph by estimating the difference in successive zero crossings of either state 
component once the state “locks into” the limit cycle. By zooming in on Figure 2.52, the 
period is approximated as 11.94–6.43 = 5.51. Can you determine the approximate time 
the state enters the limit cycle?
EXERCISES
	2.22	 Examine the effect of changing the initial condition on the unit step response of the ­nonlinear 
system
	
d
d
x
t
x
u
u t
+
=
=
≥
2
1
0
,
( )
,
	
		
  Plot xA(n), n = 0, 1, 2, 3, … when x(0) = −2, −1, 0, 1, 5 on the same graph. Use T = 0.05.
	2.23	 In Example 2.10, suppose instead of a constant friction force applied to the object as it slides, 
there is a variable friction force given by
	
f
v
µ
β
α
=
	
		
Find and plot vA(n), n = 1, 2, 3, … in response to the force f(t) in Example 2.10 when
	
i.	 α = 2, β = 0.5
	
ii.	 α = 1, β = 1
	
iii.	 α = 2, β = 2
5
2.5
–2.5
–5
0
x1
10
–10
–20
0
x2
x1 vs. t for system with limit cycle starting at (5, –20)
x2 vs. t for system with limit cycle starting at (5, –20)
2
4
6
t
8
10
12
14
16
0
2
4
6
8
10
Period
12
14
16
0
FIGURE 2.52  Time histories of state components (initial state: x1(0) = 5, x2(0) = −20).

83
Continuous-Time Systems
	2.24	 Nonlinear dynamic system is shown in Figure E2.24. The input u(t) = sin 100 πt, t ≥ 0.
	
a.	 Is the output y(t) a sinusoidal function of the same frequency as the input like it would be 
in a linear system? Explain
	
b.	 Is the output y(t) a periodic function? If so, what is the frequency?
	2.25	 In Example 2.10, find the displacement of the mass, x(t), t ≥ 0.
	2.26	 In Example 2.10, the applied force is
	
f t
f
t
t
t
B
( )
sin .
,
,
=
≤<
≥



2
0 25
0
4
0
4
π
	
	
a.	 Formulate a difference equation for vA(n) similar to Equation 2.142 and solve recursively.
	
b.	 Determine the analytical solution for v(t).
	
c.	 Plot the approximate and analytical solutions on the same graph.
	2.27	 In Example 2.11, find the exact and approximate solutions for the building temperature T(t) 
and furnace output Q(t) if the desired setting Td and tolerance Δ are
	
a.	 Td = 72°F, Δ = 3°F
	
b.	 Td = 78°F, Δ = 1.5°F
	2.28	 In Example 2.11, investigate the effect of lowering the desired temperature Td on the thermo­
stat and its effect on the furnace cycle time and the duty cycle, that is, percentage of time the 
furnace is on. Plot the results for Td = 68°F, 69°F, …, 75°F.
	2.29	 In Example 2.11, suppose the outside temperature T0(t) varies in a sinusoidal fashion with aver­
age value of 50°F and amplitude of 5°F as shown in Figure E2.29. The thermal capacitance of 
the room is C = 500 Btu/°F. The initial room temperature at 6 AM is 50°F.
	
a.	 The thermostat is set at Td = 65°F. Simulate the building temperature long enough to show 
several cycles of T(t) after the initial transient response vanishes.
FIGURE E2.29
FIGURE E2.24

84
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	 Find the energy cost per day if the cost of heating is 1.75¢ per 1000 Btu’s.
	
c.	 Repeat parts (a) and (b) for Td = 70°F and 75°F.
	2.30	The coulomb damping force acting on the mass shown in Figure E2.30 is given by fµ = 
−sgn ( x) µmg. The initial condition is x(0) = x0 = −1 m, x(0) = 0 m/s. The equation of 
motion is
	
x
x
m f
k
m
g
n
n
+
=
=
=
ω
ω
2
2
2
1
9 81
µ,
(
.
)
m/s
	
		
The system parameters are m = 6 kg, k = 300 N/m, µ = 0.2
	
a.	 Define the state as x1 = x, x2 =  x and find difference equations for x1,A(n) and x2,A(n).
	
b.	 Solve the difference equation for four cycles of x1,A(n) and x2,A(n) using a step size of 
T = 0.001 s. Plot the results.
	
c.	 The exact solution for x(t) over the first cycle (0 ≤ t ≤ t2) is
	
x t
x
mg
k
t
mg
k
t
t
x
mg
k
n
( )
cos
,
=
+






−
≤≤
+






0
1
1
0
µ
ω
µ
µ

−
+
≤≤





cos
(
)
,
ω
µ
n t
t
mg
k
t
t
t
1
1
2
	
	
where
	
t
t
t
x
x
mg
k
n
n
1
2
1
1
0
2
=
=
+
= −
−
π
ω
π
ω
µ
	
	
	 Plot the exact solution for x(t) over the first cycle and compare it to the approximate solution.
	2.31	 For the undamped second-order system modeled by
	



x
x
x
x
x
x
n
+
=
=
=
ω2
0
0
0
0
0
subject to ( )
, ( )
	
		
show the equation of the closed trajectories are ellipses in the x – x plane that reduce to the 
circular orbits in Figure 2.40 when ωn = 1 rad/s.
FIGURE E2.30

85
Continuous-Time Systems
	2.32	 Generate the state trajectory shown in Figure 2.45 starting at (−2,15) by finding an approxi­
mate solution to the differential equation
	
d
d
x
x
m k x
x
cx
F
2
1
1
2
1
2
0
1
= −
+
−





	
		
obtained as a result of dividing dx2/dt in Equation 2.169 by dx1/dt in Equation 2.168.
	2.33	 Generate 500 state trajectories starting from initial points randomly selected in the region 
−10 ≤ x(0) ≤ 10, −10 ≤  x(0) ≤ 10 for the system governed by
	
mx
F
cx
x
kx


+
−
+
=
(
)
0
2
0 	
		
with the same parameter values as those in Example 2.12. Comment on the existence of a limit 
cycle and its effect on the trajectories.
	2.34	 Find the period of oscillations for the system modeled by
	


x
x
x
x
x
x
1
1
2
2
2
1
10
2
4
12
=
−
=
−
(
)
(
) 	
	
when the initial state is (i) x1(0) = 10, x2(0) = 15 and (ii) x1(0) = 4, x2(0) = 6.
2.8  CASE STUDY: SUBMARINE DEPTH CONTROL SYSTEM
Automatic depth control of a submarine is the focus of this section. Figure 2.53 illustrates a repre­
sentative situation, where the actual depth of the submarine, denoted c(t), is measured by a sensor 
and compared with the desired depth r(t).
A simplified block diagram of the depth control system is shown in Figure 2.54. The error signal 
e(t) is the difference between the commanded depth r(t) and the actual depth c(t). It is fed back to the 
FIGURE 2.54  Block diagram of a submarine depth control system.
FIGURE 2.53  Depth control of a submarine.

86
Simulation of Dynamic Systems with MATLAB® and Simulink®
controller that sends a signal to the stern plane actuator motor that controls the stern plane actuator 
angle θ(t). The submarine depth responds to changes in the stern plane angle.
The controller and stern plane actuator combination are modeled by
	
θ =
+ ∫
K e
K
e t
C
I
d
	
(2.174)
and the submarine dynamics are approximated by the simple first-order model
	
τ d
d
d
d
v
t
v
K
t
K
+ =
+
θ
θ
θ
θ
	
(2.175)
where v = v(t) is the depth rate of the submarine. Integrating the depth rate yields the depth of the 
submarine
	
c
v t
=∫
d
	
(2.176)
The error signal is output from the summer as
	
e
r
c
= −
	
(2.177)
Equations 2.174 through 2.177 constitute the mathematical model of the simplified submarine 
depth control system. The goal is to choose the parameters KC and KI, so that the submarine responds 
to step changes in commanded depth in an acceptable manner.
A simulation diagram of the control system is a useful first step in helping choose a set of state 
variables. Employing the technique discussed in Section 2.4 for drawing a simulation diagram with 
input derivative terms present, the diagram is shown in Figure 2.55.
From the simulation diagram, the state equations are
	



x
v
K x
K x
1
2
2
=
=
+
θ
θ
	
(2.178)
	
=
+
−






K x
K
x
θ
θ τ θ
2
2
1

(
)
	
(2.179)
The stern plane angle θ is expressible in terms of the states x1, x2, and x3 and input r by
	
θ =
+
=
−
+
K e
K x
K
r
x
K x
C
I
C
I
3
1
3
(
)
	
(2.180)
FIGURE 2.55  Simulation diagram of a submarine depth control system.

87
Continuous-Time Systems
Combining Equations 2.179 and 2.180 gives
	


x
K x
K
K
r
x
K x
x
C
I
1
2
1
3
2
1
=
+
−
+
−






θ
θ τ{
(
)
}
	
(2.181)
	
⇒
= −






+
−






+






x
K K
x
K
K
x
K K
C
I
1
1
2
θ
θ
θ
θ
τ
τ
τ



+





x
K K
r
C
3
θ
τ
	
(2.182)
	
x
x
2
2
1
=
−






τ θ(
)
	
(2.183)
	
=
−
+
−






1
1
3
2
τ{
(
)
}
K
r
x
K x
x
C
I
	
(2.184)
	
⇒
=





−





+





+
x
K
x
x
K
x
K
C
C
2
1
2
1
3
1
τ
τ
τ
τ





r
	
(2.185)
	
x
r
x
3
1
= −
	
(2.186)
Equations 2.182, 2.185, and 2.186 represent the dynamic portion of the state variable model, that 
is, x = Ax + Br. Choosing the outputs as y1 = θ, y2 = v, and y3 = c determines the matrices C and 
D in the output equation y
Cx
Dr
+
+
.
	
y
Kc r
x
K x
I
1
1
3
=
=
−
+
θ
(
)
	
(2.187)
	
=
+
+
–K x
K x
K r
C
I
C
1
3
	
(2.188)
	
y
v
x
K K
x
K
K
x
K K
C
I
2
1
1
2
=
=
= −






+
−






+




θ
θ
θ
θ
τ
τ
τ





+





x
K K
r
C
3
θ
τ
	
(2.189)
	
y
c
x
3
1
=
=
	
(2.190)
In summary, the state equations are
	






x
x
x
K K
K
K
K K
K
K
C
I
C
I
1
2
3
1
1
0
0






=
−
−
−
−
−
θ
θ
θ
θ
τ
τ
τ
τ
τ
τ












+



x
x
x
K K
K
C
C
1
2
3
1
θ
τ
τ




r
	
(2.191)
	
θ
τ
τ
τ
θ
θ
θ
θ
v
c
K
K
K K
K
K
K K
C
I
C
I






=
−
−
−






0
1
0
0









+






x
x
x
K
K K
r
C
C
1
2
3
0
θ
τ
	
(2.192)

88
Simulation of Dynamic Systems with MATLAB® and Simulink®
The exact solution for the outputs θ, v, and c in response to a given depth command r can be 
approximated by solving a system of difference equations obtained using the same approach we 
employed on previous occasions, that is, the first derivatives x1, x2, x3 in Equation 2.191 are replaced 
by first-order difference quotients, and the resulting difference equations are solved recursively for 
x1,A(n), x2,A(n), x3,A(n). The result is
	
1
1
1
1
1
1
1
1
2
2
3
3
T x
n
x
n
T x
n
x
n
T x
n
x
A
A
A
A
A
{
(
)
( )}
{
(
)
( )}
{
(
)
,
,
,
,
,
,
+
−
+
−
+
−
A
C
I
C
n
K K
K
K
K K
K
( )}






=
−
−
−
−



θ
θ
θ
θ
τ
τ
τ
τ
τ
1
K
x
n
x
n
x
n
I
A
A
A
τ
−











1
0
0
1
2
3
,
,
,
( )
( )
( )

+
−






K K
K
r n
C
C
θ
τ
τ
1
( )
	
(2.193)
The difference equations are updated according to
	
x
n
x
n
K K T x
n
K
K
A
A
C
A
1
1
1
,
,
,
(
)
( )
( )
+
=
−





+
−




1



θ
θ
θ
τ
τ 

+





+





Tx
n
K K T x
n
K K T
A
I
A
C
2
3
,
,
( )
( )


θ
θ
τ
τ
r n
( )
	
(2.194)
	
x
n
x
n
K T x
n
T x
A
A
C
A
A
2
2
1
2
,
,
,
,
(
)
( )
( )
+
=
−





−





1
τ
τ
( )
( )
( )
,
n
K T x
n
K T r n
I
A
C
+





+





τ
τ
3
	
(2.195)
	
x
n
x
n
Tx
n
Tr n
A
A
A
3
3
1
1
,
,
,
(
)
( )
( )
( )
+
=
−
+
	
(2.196)
From Equation 2.192, the discrete-time outputs are
	
θ
τ
τ
τ
θ
θ
θ
θ
A
A
A
C
C
I
n
v
n
c
n
K
K
K K
K
K
K K
( )
( )
( )






=
−
−
−
0
1
0
1



0
1
2
3












+
x
n
x
n
x
n
K
K
A
A
A
C
,
,
,
( )
( )
( )
θ
τ
K
r n
C
0






( )
	
(2.197)
Equations 2.194 through 2.197 are solved recursively in the M-file “Ch2_CaseStudy.m” for the 
case where r(t) = 100, t ≥ 0. The baseline parameter values are
Sub dynamics: τ = 10 s, K θ = 20 ft/s per deg/s, Kθ = 10 ft/s per deg
Controller gains: KC = 0.6 deg/ft, KI = 0.1 deg/ft s
Step size: T = 0.0025 s
Graphs of the discrete-time outputs θA(n), vA(n), cA(n) are shown in Figure 2.56. For clarity, every 
100th value of discrete-time output is plotted.
The discontinuity in stern plane angle θ at t = 0 is a consequence of lumping the controller and 
stern plane actuator dynamics into a single equation as we did in Equation 2.174. The first term KCe 
is responsible for the direct (strictly algebraic) connection from the error e to the stern plane angle θ 
and ultimately from r to θ in Figure 2.55. The discontinuity is calculated from
	
θ( )
( )
[ ( )
( )]
.
(
)
0
0
0
0
0 6
100
0
60
=
=
−
=
×
−
=
K e
Kc r
c
c
deg/ft
ft
deg 	
(2.198)

89
Continuous-Time Systems
There is a direct connection from θ to v and, therefore, a direct path from r to v explaining the 
initial jump in depth rate as well. Figure 2.55 shows the term involving K θ in the sub dynamics is 
responsible for this. Exercise 2.36 presents an alternate representation of the stern plane actuator 
that eliminates the discontinuity in both θ and v.
EXERCISES
	2.35	 Suppose the model of the controller and stern plane actuator in Equation 2.174 is replaced by 
the following equation:
	
θ =
d
d
K e
K
e t
t
K
t e t
C
D
+
+
∫
1
( )d
( )
	
		
The differential equation relating the control system output c(t) and input r(t) is
	
a c
a
a c
a c
b r
b r
b r
b r
a
K K b
K
c
D
D
3
2
1
0
3
2
1
0
3
3







+
+
+
=
+
+
+
=
+
=
τ
θ
K
a
K K
K K
b
K K
K K
a
K K
K K b
K K
K K
C
D
C
D
q
C
I
C
I






θ
θ
θ
θ
θ
θ
θ
2
2
1
1
1
= +
+
=
+
=
+
=
+
q
I
I
a
K K
b
K K
 
0 =
=
θ
θ
0
	
	
a.	 Draw a simulation diagram of the system with three integrators in series.
	
b.	 Choose the state variables as x1 = z, x2 =  z, x3 = z where z, z, z are the outputs of the 
integrators. Define the output as y = c. Find the matrices A, B, C, and D in the state 
equations.
	
c.	 Find the difference equations for the discrete-time states x1,A(n + 1), x2,A(n + 1), x3,A(n + 1) 
and discrete-time output cA(n) similar to Equations 2.194 through 2.197.
1
2
3
4
5
6
7
8
0
1
2
3
4
5
6
7
8
0
1
2
3
4
5
6
7
8
0
100
0
θA (deg)
–100
200
0
vA (ft/s)
T = 0.0025 s
T = 0.0025 s
T = 0.0025 s
cA (ft)
–200
200
100
0
Discrete-time outputs θA(n), vA(n), cA(n) n = 0, 100, 200, ...
t (s)
FIGURE 2.56  Discrete-time approximation of subdepth control system step response.

90
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	 Choose the same values for KC and KI used to generate Figure 2.56 along with KD = 0. 
Solve the difference equations recursively to obtain the sub response y(n) for the same input 
r(t) and compare your result with the graph for cA(n) in Figure 2.56.
	
e.	 Experiment with new values for KC, KI, and KD. Plot the results for cA(n).
	2.36	 The controller and stern plane actuator are modeled separately as shown Figure E2.36:
	
a.	 Redraw the simulation diagram of the subdepth control system. Comment on whether m, θ, 
or v is discontinuous at t = 0 when the commanded depth r(t) is a step input.
	
b.	 Determine the state variables and find the new matrices A, B, C, and D in the state equa­
tions assuming the output vector y = [m θ v c]T.
FIGURE E2.36

91
3 Elementary Numerical 
Integration
3.1  INTRODUCTION
Dynamic systems with continuous-time models in the form of differential equations possess mem­
ory. For systems with memory, knowledge of the system’s inputs at a given point in time is insuf­
ficient to determine the state of the system at the same time. For example, a circuit with capacitors 
and inductors possesses memory. The instantaneous energy stored in the circuit is a function of the 
current state (capacitor voltages and inductor currents) which depends on the history of its sources 
(inputs) from the time when the complete state was last known.
An nth-order dynamic system with state variables x1, x2, …, xn and inputs u1, u2, …, um is mod­
eled by expressions for the state derivatives, that is
	


x t
x
t
x
t
x
t
f x u
n
( )
( , )
=






=
d
d
d
d
d
d
1
2
	
(3.1)
where
	
x
x
x
x
u
u
u
u
n
m
=






=






1
2
1
2


,     

=






,
( , )
( , )
( , )
( , )
     f x u
f x u
f
x u
f
x u
n
1
2

	
(3.2)
In a formal sense, n distinct integrations are required to obtain the state x, namely
	
x t
x t
f x u
t
t
t
1
1
0
1
0
( )
( )
( , )
=
+∫
d
	
(3.3)
	
x t
x t
f
x u
t
t
t
2
2
0
2
0
( )
( )
( , )
=
+∫
d

	
(3.4)
	
x t
x t
f
x u
t
n
n
n
t
t
( )
( )
( , )
=
+∫
0
0
d
	
(3.5)

92
Simulation of Dynamic Systems with MATLAB® and Simulink®
For time-varying systems, a number of the system parameters are explicit functions of time. 
For example, the amount of fuel in a rocket or aircraft diminishes with time thereby affecting its 
dynamic properties. The state derivative vector is generally denoted by f(t, x, u), and Equations 3.3 
through 3.5 are expresed as
	
x t
x t
f t x u
t
t
t
1
1
0
1
0
( )
( )
( , , )
=
+
′
′
∫
d
	
(3.6)
	
x t
x t
f t x u
t
t
t
2
2
0
2
0
( )
( )
( , , )
=
+
′
′
∫
d

	
(3.7)
	
x t
x t
f t x u
t
n
n
n
t
t
( )
( )
( , , )
=
+
′
′
∫
0
0
d
	
(3.8)
Equations 3.3 through 3.8 remind us that if we know the complete state at some initial time t0, 
then at some future time t, the state can be determined provided we know the inputs from t0 to t. 
The n integrals to be evaluated in Equations 3.3 through 3.8 constitute the process of advancing or 
updating the state through time. This chapter looks at various alternatives for approximating these 
integrals.
3.2  DISCRETE-TIME SYSTEM APPROXIMATION OF 
A CONTINUOUS FIRST-ORDER SYSTEM
Simulation of dynamic systems modeled by first-order differential equations requires finding 
approximate solutions to the differential equations. A first-order, “continuous-time” (hereafter 
referred to as simply “continuous”) system is shown in Figure 3.1,
where
u(t), t ≥ 0 is the input
x(t), t ≥ 0 is the output (also referred to as the state)
x(0) is the initial condition, x(t) at t = 0
f[x(t), u(t)] is a mathematical function encapsulating the system dynamics 
Several examples of first-order, continuous-time systems are:
	
1.	Integrator	
f x t u t
u t
[ ( ), ( )]
( )
=

(3.9)
	
2.	Linear system	
f x t u t
ax t
bu t
[ ( ), ( )]
( )
( )
=
+

(3.10)
	
3.	Nonlinear system	
f x t u t
ax t
bu t
[ ( ), ( )]
( )
( )
=
+
2

(3.11)
u(t)
x(t)
x(t) = f [x(t),u(t)]
d
dt
x(0)
FIGURE 3.1  A first-order continuous system.

93
Elementary Numerical Integration
Given the system model,
	
d
d
( )
[ ( ), ( )]
t x t
f x t u t
=
	
(3.12)
an approximate solution for the state response x(t), t ≥ 0, in Equation (3.12) can be obtained at dis­
crete points in time tn = nT, n = 0, 1, 2, …. The approximate solution is xA(n), n = 0, 1, 2, … where 
xA(n) ≈ x(tn) = x(nT), n = 0, 1, 2, ….
Figure 3.2 illustrates the difference between x(t), t ≥ 0 and xA(n), n = 0, 1, 2, …. It is useful for 
deriving a difference equation which can be solved to generate xA(n), n = 0, 1, 2, ….
	
At 
d
d
( )
[ ( ), ( )]
[ (
), (
)]
t
nT
x t
f x t u t
f x nT u nT
t
nT
t
nT
=
=
=
=
=
,
t
	
(3.13)
Approximating d
d
( )
t x t
t
nT
=
 by the slope of the line connecting xA(n) and xA(n + 1),
	
x
n
x
n
T
f x nT u nT
A
A
(
)
( )
[ (
), (
)]
+
−
≈
1
	
(3.14)
Replacing x(nT) with xA(n), and writing u(nT) as u(n) for short,
	
x
n
x
n
T
f x
n u n
A
A
A
(
)
( )
[
( ), ( )]
+
−
=
1
	
(3.15)
Note the use of the equality in Equation (3.15) enabling xA(n + 1) to be solved for as follows:
	
x
n
x
n
Tf x
n u n
n
A
A
A
(
)
( )
[
( ), ( )]   
+
=
+
=
1
0 1 2
,
, , , ... 	
(3.16)
Equation (3.16) is a difference equation. Given the initial condition xA(0), it is easily solved in a 
recursive manner.
EXAMPLE 3.1
To illustrate the use of Equation (3.16), consider the first-order system
	
d
dt x t
x t
u t
( )
( )
( )
+
=
2
	
(3.17)
x([n+1]T)
xA(n+1)
xA(n)
x(t)
= slope of tangent to x(t) at t = nT
t=nT
d
dt
(n+1)T
T
t
nT
x(nT)
x(t)
FIGURE 3.2  Diagram for obtaining difference equation to solve for xA(n), n = 0, 1, 2, …

94
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d
d
x
t
f x u
x
u
=
= −
+
(
)
,
2
	
(3.18)
Suppose the input u(t) = 3t, t ≥ 0 and initial condition x(0) = 1.
Using Equation (3.16), the difference equation for obtaining xA(n), n = 0, 1, 2, … is obtained as 
follows:
	
x n
x n
T
x
n
u n
n
A
A
A
(
)
( )
,  
+
=
+
−
( )+ ( )


=
1
2
0 1 2
, , , ... 	
(3.19)
	
=
−
(
)
+
=
1
2
0 1 2
T x n
Tu n
n
A( )
( ),  
, , , ... 	
(3.20)
Letting α = (1−2T),
	
x n
x n
Tu n
n
A
A
(
)
( )
( ),  
+
=
+
=
1
0 1 2
α
, , , ... 	
(3.21)
where
	
u n
u nT
u t
t
nT
n
t
nT
t
nT
( )
(
)
( )
,  
=
=
=
=
=
=
=
3
3
0 1 2
, , , ... 	 (3.22)
	
x n
x n
T
nT
n
A
A
(
)
( )
(
),  
+
=
+
=
1
3
0 1 2
α
, , , ... 	
(3.23)
	
=
+
=
αx n
nT
n
A( )
,  
3
0 1 2
2
, , , ... 	
(3.24)
Starting with n = 0,
	
n
x
x
T
A
A
=
=
+
0
1
0
3
2
:
( )
( )
(0)
α
	
(3.25)
Choosing xA(0) = x(0) gives
	
n
x
x
A
=
=
0
1
0
:
( )
( )
α
	
(3.26)
	
n
x
x
T
A
A
=
=
+
1
2
1
3
2
:
( )
( )
(1)
α
	
(3.27)
	
=
[
]+
α αx
T
( )
0
3
2
	
(3.28)
	
=
+
α2
2
0
3
x
T
( )
	
(3.29)
	
n
x
x
T
A
A
=
=
+
2
3
2
3
2
:
( )
( )
(2)
α
	
(3.30)
	
=
+

+
α α2
2
2
0
3
6
x
T
T
( )
	
(3.31)
	
=
+
+
α
α
3
2
2
0
3
6
x
T
T
( )
	
(3.32)
	
=
+
+
α
α
3
2
0
3
2
x
T
( )
(
)
	
(3.33)

95
Elementary Numerical Integration
	
n
x
x
T
A
A
=
=
+
3
4
3
3 3
2
:
( )
( )
( )
α
	
(3.34)
	
=
+
+

+
α α
α
3
2
2
0
3
2
9
x
T
T
( )
(
)
	
(3.35)
	
=
+
+
+
α
α α
4
2
2
0
3
2
9
x
T
T
( )
(
)
	
(3.36)
	
=
+
+
+
[
]
α
α α
4
2
0
3
2
3
x
T
( )
(
)
	
(3.37)
The smaller the time step T, the closer xA(n), n = 0, 1, 2, … will be to the exact solution x(t), t ≥ 0 
at t = 0, T, 2T, …. Finding an approximate solution for the interval 0 ≤ t ≤ tfinal requires t
T
final /  itera­
tions in the recursive solution of the difference equation. There is a trade-off between accuracy of the 
approximate solution xA(n), n = 0, 1, 2, … and the amount of computations required to generate it.
Equation 3.17 with the specified input u(t) = 3t and initial condition x(0) = 1 is easily solved by 
analytical methods. The exact solution is given by
	
x t
e
t
t
t
( ) =
+
−
≥
−
1 75
1 5
0 75
0
2
.
.
.
,
	
(3.38)
Matlab program “Ch3_Ex3_1.m” solves Equation 3.21 recursively in addition to computing 
points on the exact solution for purposes of comparison. Figure 3.3 shows the results for xA(n) and 
x(t) when T = 0.01, 0.025, 0.05, and 0.1.
Note, the approximate solution is known only at a discrete set of points and plotted accord­
ingly. For purposes of clarity, a subset of the known discrete values are plotted with the excep­
tion for the case when T = 0.1. As expected, the accuracy of the approximate solution can be 
improved by decreasing the time step T  at the expense of requiring additional calculations.
The approximate solutions are seen to converge to the exact solution as the time step decreases. 
Further it appears that setting the time step below T = 0.025 may not be necessary unless extreme 
accuracy is required.
2.5
Exact and approximate solutions for different values of the time step T
2
2
1.5
1.5
1
1
0.5
0.5
0
0
2
1.5
1
0.5
0
2
1.5
1
0.5
0
2
1.5
1
0.5
0
2.5
xA(n), n = 0, 10, 20, ...
x(t), t ≥ 0
xA(n), n = 0, 4, 8, ...
x(t), t ≥ 0
xA(n), n = 0, 2, 4, ...
x(t), t ≥ 0
xA(n), n = 0, 1, 2, ...
x(t), t ≥ 0
2
1.5
1
0.5
T = 0.01
t
t
T = 0.05
T = 0.1
T = 0.025
0
2.5
2
1.5
1
0.5
0
2.5
2
1.5
1
0.5
0
FIGURE 3.3  Exact and approximate solutions to Equation 3.17.

96
Simulation of Dynamic Systems with MATLAB® and Simulink®
Table 3.1 compares the approximate solution for T = 0.01 to the exact solution at several 
discrete points in time. The last column contains the per cent error in the approximate solution,
	
 % Error
( )
( )
( )
=
×
−






100
x n
x t
x t
A
n
n
	
(3.39)
Table 3.2 compares the approximate solution for T = 0.1 to the exact solution at the same 
discrete points in time given in Table 1.1.
Note the percent error is roughly 10 times greater when the time step T = 0.1 compared to 
when T = 0.01.
EXERCISES
	3.1	 Consider the first-order system 
d
dt y t
a y t
u t
( )
( )
( )
+
=
0
	
a.	 Find the response of the system to a step input u(t) = 1, t ≥ 0.
	
b.	 Find the response of the system to a ramp input u(t) = t, t ≥ 0.
TABLE 3.1
Comparison of Exact and Approximate 
(T = 0.01) Solutions at Different Times
n
t
nT
n =
x
n
A( )
x tn
(
)
% Error
100× x
n
x t
x t
A
n
n
( )
(
)
(
)
−






0
0
1
1
0
20
0.2
0.7233
0.7231
0.03
50
0.5
0.6468
0.6438
0.47
100
1.0
0.9951
0.9868
0.84
150
1.5
1.5988
1.5871
0.74
200
2.0
2.2955
2.2821
0.59
TABLE 3.2
Comparison of Exact and Approximate 
(T = 0.1) Solutions at Different Times
n
tn = nT
Xa(n)
X(tn)
% Error
100×
−






x
n
x t
x t
A
n
n
( )
(
)
(
)
0
0
1
1
0
2
0.2
0.7240
0.7231
0.13
5
0.5
0.6743
0.6438
4.74
10
1.0
1.0718
0.9868
8.61
15
1.5
1.7063
1.5871
7.51
20
2.0
2.4148
2.2821
5.98

97
Elementary Numerical Integration
	
c.	 In the limit as a0 approaches zero, the first-order system reduces to a pure integrator. 
Show that the step and ramp responses in parts (a) and (b) approach ∫
⋅
01
t
td  and ∫0
t t td , 
respectively.
	3.2	 The signal u t
c
c t
t
t
( )
(
) ,
=
+
−
≥
0
1
0
2
0
 
 in Figure E3.2 is input to a system governed by 
d /d
y
t
u t
= ( ) i.e. a continuous integrator.
		
The change in output y(t) from t
t
t
t
=
−
=
+
0
1
0
2
∆
∆
 to 
 is of interest. Using the following values: 
c
c
t
0
1
0
1
2
2
1 2
5
3
2
=
=
=
=
=
,
/
,
,
,
∆
∆
 approximate the difference y t
y t
(
)
(
)
0
2
0
1
+
−
−
∆
∆
 
 by
	
a.	 Replacing u(t) with a piecewise linear function u t
1( ) through pts B and C, and C and D and 
then integrating u t
1( ) between appropriate limits.
	
b.	 As the areas of trapezoids ABCF and CDEF.
	
c.	 Compare your answers in parts (a) and (b) to the true value
	
y t
y t
u t
t
t
t
(
)
(
)
( )
0
2
0
1
0
1
0
2
+
−
−
=
−
+
∫
∆
∆
∆
∆
d
	
	3.3	 A tank with cross-sectional area Al and resistance R1 empties into a second tank with cross-
sectional area A2. The first tank has no inflow and is initially filled to a height h1(0). The sec­
ond tank is initially empty and has no outflow. The flow between the tanks is denoted by f1(t), 
and the tank levels are h1(t) and h2(t).
	
a.	 Find the first-order differential equations for f1(t) and h2(t).
	
b.	 Show that the second tank is an integrator.
	
c.	 Find expressions for the transient responses of f1(t) and h2(t).
	
d.	 For system parameter values A1 = 100 ft2, R1 = 0.25 ft per ft3/min, A2 = 50 ft2, and 
h1(0) = 20 ft, the responses f1(t) and h2(t) are plotted in Figure E3.3. Estimate the level in 
tank 2 after 50 min by approximating the area under f1(t), 0 ≤ t ≤ 50 and dividing by A2. 
Approximate the area using simple geometric shapes like rectangles and trapezoids.
	
e.	 Compare your answer from part (d) with the true value h2(50).
FIGURE E3.2

98
Simulation of Dynamic Systems with MATLAB® and Simulink®
3.3  EULER INTEGRATION
An alternate derivation of Equation 3.16 for obtaining the approximate solution xA(n), n = 0, 1, 2, … 
to Equation 3.12 will now be presented. The integral solutions in Equations 3.3–3.5 reduce to a 
single equation when the state vector [x1(t), x2(t), …, xn(t)] reduces to the scalar x(t) and the initial 
time t0 = 0, namely
	
x t
x
f x u
t
t
( )
( )
(
) d
=
+∫
0
0
,
	
(3.40)
For t = (n + 1)T,
	
x n
T
x
f x u
t
n
T
[(
) ]
( )
(
)d
(
)
+
=
+
+
∫
1
0
0
1
,
	
(3.41)
Thinking of the integral in Equation 3.41 as an area bounded by the function f[x(t),u(t)] and the 
t-axis, Equation 3.41 can be written as
	
x n
T
x
f x u
t
f x u
t
nT
nT
n
T
[(
) ]
( )
(
)d
(
)d
(
)
+
=
+
+
∫
∫
+
1
0
0
1
,
,
	
(3.42)
	
=
+
+
∫
x nT
f x u
t
nT
n
T
(
)
(
) d
(
)
,
1
	
(3.43)
The integral in Equation 3.43 is equal to the area under the derivative function f [x(t),u(t)] between 
t = nT and t = (n + 1)T. Various approximations to this area result in different numerical integrators.
FIGURE E3.3

99
Elementary Numerical Integration
3.3.1  Explicit Euler Integration
The simplest approach is based on the assumption
	
f x t u t
f x nT u nT
nT
t
n
T
[ ( ), ( )]
[ (
), (
)]   for   
(
)
≈
≤≤
+1
	
(3.44)
This assumption results in the true area ∫
+
nT
n
T f x u
t
(
)
(
) d
1
,
 being approximated by the area of the 
rectangle shown in Figure 3.4.
Replacing ∫
+
nT
n
T f x u
t
(
)
(
) d
1
,
 in Equation 3.43 by the rectangular area f[x(nT),u(nT)] T results in
	
x n
T
x nT
T f x nT u nT
[(
) ]
(
)
[ (
), (
)]
+
≈
+
1
	
(3.45)
Denoting the approximation to x(nT) by xA(nT) and droping the “T” for simplicity, results in the 
difference equation
	
x
n
x
n
T f x
n u n
A
A
A
(
)
( )
[
( ), ( )]
+
=
+
1
	
(3.46)
Equation 3.46 is the difference equation of a discrete-time system. Recursive solution of this equa­
tion produces the discrete output xA(n) as the approximation to x(nT) at discrete points in time. 
That is,
	
x
n
x nT
n
A( )
(
)   
≈
=
,
, , , ...
0 1 2
	
(3.47)
The first-order continuous system d
d
( )
( ), ( )
t x t
f x t u t
=

 and the discrete system approximation are 
illustrated in Figure 3.5.
In the case of a simple integrator,
	
f x t u t
u t
[ ( ), ( )]
( )
=
	
(3.48)
and Equation 3.46 reduces to
	
x
n
x
n
Tu n
A
A
(
)
( )
( )
+
=
+
1
	
(3.49)
(n − 1)T
(n + 1)T
nT
f[x(t),u(t)]
f [x(n + 1)T,u(n + 1)T]
f[x(nT),u(nT)]
t
f [x(n − 1)T,u(n −1)T]
Approximation of
(n + 1)T
nT
f(x,u)dt
∫
FIGURE 3.4  Graph showing an approximation of the integral in Equation 3.43.

100
Simulation of Dynamic Systems with MATLAB® and Simulink®
Equation 3.49 is the difference equation for a numerical integrator known as an Euler integrator. It 
is also referred to as rectangular integration because of the rectangular approximation to the true 
area under the derivative function in Equation 3.48.
3.3.2  Implicit Euler Integration
Another way of approximating the area under the derivative function f [x(t),u(t)] is to assume
	
f x t u t
f x n
T u n
T
nT
t
n
T
[ ( ), ( )]
[ (
) , (
) ]   for   
(
)
≈
+
+
≤≤
+
1
1
1
	
(3.50)
Using the same reasoning that resulted in Equation 3.46, the difference equation becomes
	
x
n
x
n
T f x
n
u n
A
A
A
(
)
( )
[
(
), (
)]
+
=
+
+
+
1
1
1 	
(3.51)
For a simple integrator, Equation 3.51 reduces to
	
x
n
x
n
Tu n
A
A
(
)
( )
(
)
+
=
+
+
1
1 	
(3.52)
While both Equations 3.46 and 3.51 are difference equations based on Euler (or rectangular) 
integration, there is a fundamental difference between them. Equation 3.46 is explicit in nature, 
which means a recursive solution, like the one in Example 3.1, is straightforward. Equation 3.51 is 
an implicit equation as a result of xA(n + 1) appearing on both sides of the equation. The solution 
to Equation 3.51 can be challenging depending on the nature of the function f[x(t),u(t)]. In all but 
the simplest cases, some form of iterative solution to a nonlinear algebraic equation is required to 
update the state from xA(n) to xA(n + 1).
Equation 3.46 is the difference equation for explicit Euler integration, also known as forward 
rectangular integration. Equation 3.51 is the difference equation for implicit Euler integration, also 
known as backward rectangular integration. Both types are illustrated in Example 3.2.
EXAMPLE 3.2
The input to a continuous integrator is u(t) = sin 2πt, t ≥ 0. Compare the output of the continuous 
integrator to the outputs from explicit and implicit Euler numerical integrators at t = 0.4. Choose 
the integration step size T = 0.005, 0.01, 0.025, 0.05.
The output of the continuous integrator with input u(t) = A sin ωt is
	
x t
u t
t
A
t
t
A
t
A
t
t
t
( )
( )
sin
cos
(
=
=
=
−






=
−
∫
∫
0
0
0
1
1
 d
 
 
 d
co
ω
ω
ω
ω
s ωt)
	
(3.53)
Discrete system
iintegratornumerical 
T
Continuous system
u(n)
u(t)
= f [x(n),u(n)]
xA(n + 1) – xA(n)
xA(n+1) = xA(n) + T f [xA(n),u(n)]
T
dt
d x(t) = f [x(t),u(t)]
x(t) = x(0) +    f (x,u)dt
t
0∫
FIGURE 3.5  A first-order continuous system and a discrete system approximation.

101
Elementary Numerical Integration
For A = 1, ω = 2π rad/s,
	
x t
t
( )
(
)
=
−
1
2
1
2
π
π
cos
	
(3.54)
The continuous input u(t) and the integrator output are graphed in Figure 3.6
	
x
t
t
(
)
(
)
0 4
1
2
1
2
0 2879
0 4
.
cos
.
.
=
−
=
=
π
π
	
(3.55)
Equations 3.49 and 3.52 are solved recursively in “Ch3_Ex3_2.m” producing the values shown 
in Table 3.3.
According to Equation 3.49, the Euler integrator simply adds a rectanguar area Tu(n) to the 
current state xA(n) to produce the updated state xA(n + 1). A general formula for xA(n + 1) is easily 
obtained by observing
	
x
x
Tu
A
A
( )
( )
( )
1
0
0
=
+
	
(3.56)
TABLE 3.3
Comparison of Explicit and Implicit Euler Integrators
T
n
T
final = 0 4
.
Explicit Euler
    
(
)
x
n
A
final
             % Error
(
)
(
)
(
)
100
0 4
0 4
×
−
x
n
x
x
A
final
.
.






 Implicit Euler
    
(
)
x
n
A
final
             % Error
(
)
(
)
(
)
100
0 4
0 4
×
−
x
n
x
x
A
final
.
.






0.005
80
0.2864
−0.5186
0.2894
0.5022
0.01
40
0.2849
−1.0537
0.2908
0.9879
0.025
16
0.2800
−2.7576
0.2947
2.3462
0.05
8
0.2708
−5.9276
0.3002
4.2800
Integrator input u(t) = sin 2πt
u(t)
Integrator output x(t) = (1/2π)(1 – cos 2π t)
1
0.5
0
u(t)
0.2
0.1
0
0
0.1
Area under input
from t = 0 to t = 0.4
0.2
0.3
0.4
0.5
t
0.6
0.7
0.8
0.9
1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0.3
0.4
–0.5
–1
FIGURE 3.6  Continuous integrator with input u(t) = sin 2πt and output x(t) = (1 - cos 2πt)/2π.

102
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
x
x
Tu
A
A
( )
( )
( )
2
1
1
=
+
	
(3.57)
	
=
+
[
]+
x
Tu
Tu
A( )
( )
( )
0
0
1 	
(3.58)
	
=
+
+
[
]
x
T u
u
A( )
( )
( )
0
0
1 	
(3.59)
Replacing xA(0) with x(0), the discrete output of an explicit Euler integrator is given by
	
x n
x
T u
u
u
u n
u n
A(
)
( )
( )
( )
( )
(
)
( )
+
=
+
+
+
+
+
−
+
[
]
1
0
0
1
2
1
...
	
(3.60)
	
=
+
=
=∑
x
T
u k
n
k
n
( )
( )   
 
0
0 1 2
0
,
, , , ...
	
(3.61)
By the same reasoning, the discrete output of an implicit Euler integrator is given by
	
x n
x
T
u k
n
A
k
n
(
)
( )
(
)   
+
=
+
+
=
=∑
1
0
1
0 1 2
0
,
, , , ...
	
(3.62)
EXERCISES
	3.4	 In Example 3.2
	
a.	 Explain why the implicit Euler integrator produces higher estimates of the continuous-time 
integrator output than the explicit Euler integrator. Is this true in general?
	
b.	 Find xA( )
5  for both numerical integrators and compare the results to x(0.25). Explain why 
both integrators incur the maximum error x nT
x
n
A
(
)
( )
−
 for n = 5.
	
c.	 Repeat Examples 3.2 and 3.3 with a step size T = 0.01. Enter the numerical results for 
n = 0 5 10
50
, ,
, ...,
 in a table rounded to 4 places after the decimal point.
	3.5	 The RC circuit shown in Figure E3.5 is a first order low pass filter. The differential equation 
relating the output voltage v t
0( ) and input voltage v t
i( ) is
	
RC dv
dt
v
vi
0
0
+
=
	
		
The capacitor is initially uncharged. A discrete-time integrator is used to approximate the 
continuous output v t
0( ) when the input v t
i( ) is an AC signal sin
.
ωt
	
a.	 Find the difference equation used to obtain v
n
A
0, ( ) if forward Euler integration is used with 
a step size of T.
FIGURE E3.5

103
Elementary Numerical Integration
	
b.	 For v t
t
i( )
sin
,
=
ω  find and plot v
n
A
0, ( ) corresponding to 0
4
≤
≤
n
T
π ω
/
 when
	
i.	 ω =
=
100
10
 rad/s,
/
T
RC
	
ii.	 ω =
=
1000
100
 rad/s, 
/
T
RC
	3.6	 The flow out of the tank shown in Figure E3.6 is given by F
cH
0
1 2
=
/ . The cross-sectional area 
of the tank A = 50 ft2 and the constant c = 2ft /min
3
 per ft1 2
/ . The tank is 25 ft in height and 
the initial level in the tank H( )
0
16
=
 ft.
	
a.	 The flow into the tank is F t
F
t
1
1
10
0
( )
,
=
=
≥
 ft /min  
3
. Find the steady-state height of 
liquid in the tank, H(
).
∞
	
b.	 Use forward Euler integration with a suitable step size and compare Lim H
n
A
n
  
( )
→∞
 to the 
result from part (a).
	
c.	 The flow into the tank is F t
t
t
1
4
10
0
( )
(
),
=
+
≥
/
 
. Use forward Euler integration with a step 
size T and find the difference equation for updating the state H
n
A( ). Leave your answer in 
terms of c, A, and T.
	
d.	 For the input flowrate in part (c), using forward Euler integration with T = 0.1 min, find nf, 
where n T
f  is the time required to fill the tank, i.e. H
n
H
n
A
f
A
f
(
)
(
)
.
−
<
≥
1
25
25
  and  
 Plot 
the results.
	3.7	 The input to the integrator shown in Figure E3.7 is the continuous-time signal 
u t
t
t
( )
(
),
=
+
≥
1
1
0
/
 
	
a.	 Find the difference equation for computing the state x
n
A( ) recursively when implicit Euler 
integration with a step size T is used.
	
b.	 Find x
x
A
A
( ),
( )
1
2
 
 and xA( )
3  if T = 0.1.
	
c.	 Compare your answer for xA( )
3  to the exact value x(3T).
	
Note: 
1
1
1
0 t
dt
t
t
+
=
+
∫
ln(
)
	3.8	 Show that an approximate solution of the first-order continuous-time model
	
d
d
x
t
f x u
=
( , )
	
		
based on replacing the derivative d /d
x
t with the finite difference [ (
)
( )]
x n
x n
T
+
−
1
/  is equiva­
lent to using forward (explicit) Euler integration.
	3.9	 Consider the case of a liquid discharged from a tank at a rate proportional to the square root 
of the level in the tank. The continuous model is
	
A H
t
H
F
d
d
+
=
α
1 2
1
/
	
FIGURE E3.7
FIGURE E3.6

104
Simulation of Dynamic Systems with MATLAB® and Simulink®
		
where H = H(t) is the continuous tank level, F
F t
1
1
=
( ) is the flow in and α is a constant depen­
dent on the physical characteristics of the tank.
	
a.	 Use implicit Euler integration to find a difference equation involving the time signals H
n
A( ) 
and F n
1( ) where H
n
H nT
A( )
(
)
≈
 and F n
F nT
1
1
( )
(
).
=
 Write the equation in implicit form 
with H
n
A(
)
+1  on both sides.
	
b.	 Show that the implicit equation can be solved explicitly for H
n
A(
)
+1  in terms of H
n
A( ) and 
F n
1
1
(
)
+
 by making the substitution x
H
n
A
=
+


(
)
/
1
1 2 and solving the resulting quadratic 
equation in x.
3.4  TRAPEZOIDAL INTEGRATION
Of the numerical integrators, the Euler integrators are the simplest to implement. However, for 
a given integration step size they are also the least accurate. This is not necessarily a reason to 
choose another integrator since any desired level of accuracy is achievable with Euler integrators 
(in ­principle) simply by reducing the step size and performing additional calculations. Indeed, the 
simplicity of Euler integration is responsible for its widespread use in far ranging applications.
There may be circumstances which dictate the integration step size in a simulation study and thus 
compel the developer to consider other methods for approximating the dynamics of a continuous 
system. Accordingly, we shall investigate other formulas and algorithms for numerical integration.
Starting with Equation 3.43, repeated below
	
x n
T
x nT
f x u
t
nT
n
T
[(
) ]
(
)
(
)d
(
)
+
=
+
+
∫
1
1
,
	
(3.63)
Recall that approximating the derivative function f(x,u), by a constant over the interval 
nT ≤ t ≤ (n + 1)T (see Figure 3.4) resulted in
	
x
n
x
n
T f x
n u n
A
A
A
(
)
( )
[
( ), ( )]
+
=
+
1
	
(3.64)
or
	
x
n
x
n
T f x
n
u n
A
A
A
(
)
( )
[
(
), (
)]
+
=
+
+
+
1
1
1 	
(3.65)
Using a linear approximation to the derivative function f(x,u) over the interval nT ≤ t ≤ (n + 1)
T instead leads to a more accurate discrete system representation than either Equation 3.64 or 
Equation 3.65. Figure 3.7 illustrates the situation.
f(xn–1,un–1)
f(xn+1,un+1)
f(xn,un)
f(x,u)
Approximation of 
f(x,u)dt
(n – 1)T
(n + 1)T
nT
t
(n + 1)T
nT∫
FIGURE 3.7  Trapezoidal approximation of area under f(x,u), nT ≤ t ≤ (n + 1)T.

105
Elementary Numerical Integration
Note f(xn−1,un−1), f(xn,un) and f(xn+1,un+1) are short for f[x(n − 1)T,u(n − 1)T], f[x(n)T,u(n)T] and 
f[x(n + 1)T,u(n + 1)T], respectively. The equation of the line connecting the points [nT,f(xn,un)] and 
[(n + 1)T,f(xn+1,un+1)] is easily found. Integrating the linear equation over the interval nT ≤ t ≤ (n + 1)
T results in the approximation to the integral in Equation 3.63 and the required difference equation.
A far simpler approach is based on recognizing the approximating area is a trapezoid leading 
directly to the difference equation
	
x
n
x
n
T
f x
n u n
f x
n
u n
A
A
A
A
(
)
( )
[
( ), ( )]
[
(
), (
)]
+
=
+
+
+
+
{
}
1
2
1
1
	
(3.66)
In the case of a continuous integrator, f(x,u) = u, and Equation 3.66 reduces to
	
x
n
x
n
T u n
u n
A
A
(
)
( )
( )
(
)
+
=
+
+
+


1
2
1
	
(3.67)
Equation 3.67 is the difference equation of a trapezoidal integrator, so named because the area 
approximating ∫
= ∫
+
+
nT
n
T
nT
n
T
f x t u t
t
u t
t
(
)
(
)
1
1
[ ( ), ( )]
( )
d
d  is a trapezoid.
EXAMPLE 3.3
The input to a continuous integrator is u(t) = e−2t, t ≥ 0. Find the difference equation for approxi­
mating the continuous output x(t) at t = 0.1, 0.2, …, 1.0 using
	
a.	explicit Euler integration
	
b.	implicit Euler integration
	
c.	trapezoidal integration
	
d.	Choose the step size T = 0.1 and compute xA(n), n = 0, 1, 2, …, 10 to approximate x(t) at 
t = 0.1, 0.2, …, 1.0.
	
e.	Compare the results to the continuous response x(t) at t = 0.1, 0.2, …, 1.0.
  The continuous and discrete integrators are shown in Figure 3.8.
	
a.		
u n
e
n
nT
( )
,
, , ,...
=
=
−2
0 1 2
  

(3.68)
	
x n
x n
Tu n
A
A
(
)
( )
+
=
+
( )
1
	
(3.69)
Continuous integrator
Discrete integrator
1. Explicit Euler
1. xA(n + 1) = xA(n) + Tu(n)
2. xA(n + 1) = xA(n) + Tu(n + 1)
2. Implicit Euler
3. Trapezoidal
u(t) = e–2t
x(t) = u(t)
x(t) = u(0) + u(t)dt
dt
d
u(n) = e–2nT
T
t
0∫
3. xA(n + 1) = xA(n) +
[u(n) + u(n + 1)]
T
T
FIGURE 3.8  Continuous and discrete integrators for Example 3.3.

106
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
+
=
−
x n
Te
n
A
nT
( )
  
2
0 1 2
,
, , , ...	
(3.70)
	
n
x
x
e
e
n
x
x
A
A
A
A
=
=
+
=
+
=
=
=
+
−
0
1
0
0 1
0
0 1
0 1
1
2
1
2 0 0 1
0
:
.
.
.
:
( )( . )
( )
( )
( )
( )
0 1
0 1
0 1
0 1819
2
3
2
0 1
2 1 0 1
0 2
2
.
.
.
.
:
.
( )( . )
.
(
e
e
n
x
x
e
A
A
−
−
−
=
+
=
=
=
+
( )
( )
2 0 1
0 4
0 1819
0 1
0 2489
)( . )
.
.
.
.
=
+
=
−
e
	
	
The remaining values are computed in “Ch3_Ex3_3.m” and shown in Table 3.4.
	
b.		
x n
x n
Tu n
A
A
(
)
( )
(
)
+
=
+
+
1
1 
(3.71)
	
                 =
+
=
−
+
x n
Te
n
A
n
T
( )
  
2
1
0 1 2
(
) ,
, , ,...	
(3.72)
	
n
x
x
e
e
n
x
A
A
A
=
=
+
=
+
=
=
=
−
−
0
1
0
0 1
0
0 1
0 0819
1
2
2 1 0 1
0 2
:
.
.
.
:
( )( . )
.
( )
( )
( )
x
e
e
n
x
x
A
A
A
( )
( )
(
1
0 1
0 0819
0 1
0 1489
2
3
2
2 2 0 1
0 4
+
=
+
=
=
=
−
−
.
.
.
.
:
( )( . )
.
)+
=
+
=
−
−
0 1
0 1489
0 1
0 2038
2 3 0 1
0 6
.
.
.
.
( )( . )
.
e
e
	
	
The remaining values are computed in “Ch3_Ex3_3.m” and shown in Table 3.4.
	
c.		
x n
x n
T u n
u n
A
A
(
)
( )
( )+ (
)
+
=
+
+
[
]
1
2
1 
(3.73)
	
=
+
+


=
−
−
+
x n
T e
e
n
A
nT
n
T
( )
  
2
0 1 2
2
2
1
(
)
,
, , ,...	
(3.74)
	
n
x
x
e
e
A
A
=
=
+
+

=
+
+
−
−
0
1
0
0 1
2
0
0 05 1
2 0 0 1
2 1 0 1
:
.
.
( )( . )
( )( . )
( )
( )
e−

=
0 2
0 0909
.
.
	
	
n
x
x
e
e
A
A
=
=
+
+

=
+
−
−
1
2
1
0 1
2
0 0909
0
2 1 0 1
2 2 0 1
:
.
.
( )( . )
( )( . )
( )
( )
..
.
.
.
05
0 1654
0 2
0 4
e
e
−
−
+

=
	
	
n
x
x
e
e
A
A
=
=
+
+

=
+
−
−
2
3
2
0 1
2
0 1654
0
2 2 0 1
2 3 0 1
:
.
.
( )( . )
( )( . )
( )
( )
..
.
.
.
05
0 2263
0 4
0 6
e
e
−
−
+

=
	
	
	   The remaining values are computed in “Ch3_Ex3_3.m” and shown in Table 3.4.
	
d.	The output of the continuous integrator is
	
x t
e
dt
e
e
t
t
t
t
t
( )
(
)
=
′ = −






=
−
−
′
−
′
−
∫
2
2
0
0
2
2
1
2 1
	
(3.75)
	
	   Table 3.4 compares the continuous and discrete outputs at tn = nT = 0, 0.1, 0.2 , …, 1.
	
	   For the same step size, the trapezoidal integrator is superior to the Euler integrators. 
An advantage of trapezoidal integration compared to Euler is the increased step size that 
can be used while maintaining comparable accuracy.
	
	   The following example illustrates the use of trapezoidal integration for a first-order 
system modeled by a differential equation with time varying parameters.

107
Elementary Numerical Integration
EXAMPLE 3.4
A nonlinear, time-varying dynamic system is modeled by the differential equation
	
t dx
dt
x dx
dt
tx
u t
2
2
+
+
= ( )
	
(3.76)
	
a.	Find the difference equation of the discrete system based on trapezoidal integration for 
approximating the response of the continuous system.
	
b.	Solve the difference equation for xA(n), n = 0, 1, 2, … when the continuous input 
u(t) = −3t2/2. The initial condition is x(0) = 1 and the step size T = 0.01.
	
c.	Plot the discrete response xA(n), n = 0, 1, 2, …, 100 and the continuous response
	
x t
t
t
t
t
( )
(
)
,
/
= −
+
−
+
≤≤
2
4
3
1 2
1
0
1
  
	
(3.77)
	
on the same graph.
	
a.	Solving for the state derivative,
	
dx
dt
f t x u
t
x t u t
tx t
=
=
+
−
( , , )
( )[ ( )
( )]
1
2
2
	
(3.78)
	
  The difference equation based on trapezoidal integration is
	
x n
x n
T f nT x n u n
f
n
T x n
u n
A
A
A
A
(
)
( )
,
( ), ( )
(
) ,
(
), (
)
+
=
+
{
}+
+
+
+
{
}

1
2
1
1
1

	
(3.79)
	
   
=
+
+
−



+
+
+
x n
T
nT
x n u n
nT x n
n
T
A
A
A
( )
(
)
( )
( )
(
)
( )]
[(
) ]
2
1
2
1
1
2
2
[
 
x n
u n
n
T x n
A
A
(
)
(
)
[(
) ]
(
)
+
+
−
+
+
[
]



1
1
2
1
1
	
(3.80)
TABLE 3.4
Comparison of Output from Continuous and 3 Discrete Integrators for u(t) = e−2t
n
tn = nT
Explicit Euler xA(n)
Implicit Euler xA(n)
Trapezoidal xA(n)
Continuous x(tn)
0
0.0
0.0
0.0
0.0
0.0
1
0.1
0.1000
0.0819
0.0909
0.0906
2
0.2
0.1819
0.1489
0.1654
0.1649
3
0.3
0.2489
0.2038
0.2263
0.2256
4
0.4
0.3038
0.2487
0.2763
0.2753
5
0.5
0.3487
0.2855
0.3171
0.3161
6
0.6
0.3855
0.3156
0.3506
0.3494
7
0.7
0.4156
0.3403
0.3780
0.3767
8
0.8
0.4403
0.3605
0.4004
0.3991
9
0.9
0.4605
0.3770
0.4187
0.4174
10
1.0
0.4770
0.3905
0.4338
0.4323

108
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	Equation 3.80 is an implicit equation for xA(n + 1) which generally means some type 
of iterative, numerical root solving algorithm is required to find xA(n + 1) at each time 
step. This can increase the computational requirements dramatically, not to mention the 
additional programming required to implement the algorithm. In this example however, 
Equation 3.80 can be manipulated to produce a quadratic function of the form
	
a x n
bx n
c
A
A
[
(
)]
(
)
+
+
+
+
=
1
1
0
2
	
(3.81)
	
where a,b,c are expressible in terms of u(n),xA(n) and u(n + 1), all of which can be cal­
culated at time tn = nT. “Ch3_Ex3_4.m” includes the statements to determine a,b,c and 
solve Equation 3.81 at each time step for the positive root.
	
c.	The discrete and continuous responses are shown in Figure 3.9.
	
	
The discrete and continuous responses are indistinguishable from each other at times 
tn = nT, n = 0, 1, 2, …, 100. The discrete signal xA(n) is defined solely at the discrete 
times 0, T, 2T, …, which explains why discrete signals should always be plotted as dis­
crete data points.
	
	
Consider finding a discrete approximation of the linear first-order system
	
d
d
( )
( )
( )
t x t
a x t
b u t
+
=
0
0
	
(3.82)
	
	
using trapezoidal integration.
	
	
Solving for the derivative function f [x(t),u(t)],
	
f x t u t
x
t
b u t
a x t
[ ( ), ( )]
d
d
( )
( )
=
=
−
0
0
	
(3.83)
1
Trapezoidal integration of nonlinear time-varying system
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
0.9
0.8
0.7
0.6
0.5
t
0.4
0.3
T = 0.01
xA(n), n = 0, 2, 4, ..., 100
x(t)
0.2
0.1
0
FIGURE 3.9  Graph of discrete (trapezoidal, T = 0.01) and continuous responses.

109
Elementary Numerical Integration
	
x n
x n
T f x n u n
f x n
u n
A
A
A
A
(
)
( )
[
( ), ( )]
[
(
), (
)]
+
=
+
+
+
+
{
}
1
2
1
1
	
(3.84)
	
=
+
−
{
}+
+
−
+
{
}




x n
T
b u n
a x n
b u n
a x n
A
A
A
( )
( )
( )
(
)
(
)
2
1
1
0
0
0
0
	
(3.85)
Equation 3.85 is implicit as a result of xA(n + 1) appearing on both sides of the equation. 
However, owing to the linear nature of Equation 3.85, it is easily solved for xA(n + 1),
	
x n
a T
a T x n
b T
a T
A
A
(
)
( )
+
=
−






+






+
+
1
1
2
1
2
2
1
2
0
0
0
0






+
+
u
u
(n)
(
)
n
1
	
(3.86)
EXAMPLE 3.5
The velocity v = v(t) of an object sinking in a body of water is described by
	
dv
dt
cg
W v
g
W W
FB
+
=
−
(
)
	
(3.87)
where W is the weight of the object; c is the drag coefficient; FB is the buoyant force; g is the 
gravitational constant (32.2 ft/s2).
The buoyant force is a constant which equals the weight of the volume of water displaced by 
the object. The object is a drum full of hazardous materials [Braun] weighing 350 lb and its vol­
ume is such that the buoyant force is 275 lb. The drag coefficient c was determined experimentally 
to be 0.8 lb/(ft/s). The drum is released at the surface with zero velocity.
	
a.	Find a difference equation based on trapezoidal integration to approximate the dynam­
ics of the sinking drum.
	
b.	Find the approximate velocity, vA(n), n = 0, 10, 20, …, 150. Choose a step size of T = 0.5 s.
	
c.	Find the continuous velocity v(t). Use it to find
	
i.	 the terminal velocity v
v t
t
(
)
( )
∞=
→∞
lim
.
	
ii.	 v(nT), n = 0, 10, 20, …, 150.
	
d.	Graph the approximate and continuous velocity over a period of time sufficient for the 
drum to reach its terminal velocity.
	
e.	If the drum impacts the ocean floor, 1 mile below the surface, at greater than 60 mph, it 
will break apart. Comment on the possibility of this happening.
	
a.	Equation 3.87 can be expressed in the form
	
d
d
v
t
f v u
b u
a v
=
=
−
( , )
0
0
	
(3.88)
	
where a
cg
W
b
g
W W
FB
0
0
0 8 32 2
350
0 0736
32 2
350 350
275
=
=
=
=
−
=
−
. (
. )
.
,
(
)
. (
)
   
= 6 9
.
 and 
the input u treated as a unit step function u(t) = 1, t ≥ 0. 
	
  Evaluating the coefficient terms in Equation 3.86,
	
1
2
1
0 0736 0 5
2
1
2
1
0 0736 0 5
2
1
0
0
−
= −
=
+
= +
=
a T
a T
.
( . )
,
.
( . )
.
0.9816      
0184
	
	
b T
0
2
6 9 0 5
2
1 725
=
=
. ( . )
.
	

110
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
From Equation 3.86, the difference equation for approximating the dynamics of the sink­
ing drum using trapezoidal integration is
	
v
n
v
n
A
A
(
)
.
.
( )
.
.
+
=
+
+
[
]
1
0 9816
1 0184
1 725
1 0184 1
1
	
(3.89)
	
                =
+
=
0 9639
3 3877
0 1 2 3
.
( )
.
,
, , , ,...
v
n
n
A
  
	
(3.90)
	
b.	Table 3.5 shows the results for vA(n) at discrete times n = 0, 10, 20, …, 150.
	
The numerical values in Table 3.5 were computed in the Matlab file “Ch3_Ex3_5.m”.
	
c.	The continuous response is the analytical solution to Equation 3.87, namely
	
v t
W
F
c
e
B
cg W t
( ) =
−
−


−
1
(
/
)
	
(3.91)
	
  From Equation 3.91, the terminal velocity is
	
v
v t
W
F
c
t
B
(
)
 ft/s
∞=
=
−
=
−
=
→∞
lim ( )
.
.
350
275
0 8
93 75
	
(3.92)
	
  The analytical solution v(t) is evaluated at t = 0, 5, 10, …, 75 s and the values entered 
in Table 3.5.
	
d.	Graphs of v(t) and the approximate solution (every fifth point) are shown in Figure 3.10.
	
e.	Since the terminal velocity of the drum exceeds 88 ft/s (60 mph), the possibility exists of 
it breaking when it reaches the ocean floor. It remains to be determined what the veloc­
ity of the drum is at the 1 mile depth of the ocean floor.
From Table 3.5, it’s apparent that trapezoidal integration with a step size of T = 0.5 s results in 
a very accurate approximation of the continuous response. However, in most simulation studies 
TABLE 3.5
Discrete Response from Trapezoidal Integration 
(T = 0.5 s) and Continuous Response
n
tn = nT
vA(n)
v(tn)
0
0
0.0
0.0
10
5
28.8667
28.8640
20
10
48.8450
48.8413
30
15
62.6718
62.6679
40
20
72.2411
72.2376
50
25
78.8640
78.8609
60
30
83.4475
83.4450
70
35
86.6198
86.6177
80
40
88.8153
88.8136
90
45
90.3347
90.3334
100
50
91.3863
91.3853
110
55
92.1141
92.1134
120
60
92.6178
92.6173
130
65
92.9664
92.9660
140
70
93.2077
93.2074
150
75
93.3747
93.3745

111
Elementary Numerical Integration
an exact solution of the governing differential equations is not available. In that case, what can we 
do to assure accurate simulation results?
An iterative method to determine an acceptable integration step size requires the simulation 
be executed with different values of T. For example, the step size can be continually reduced (say 
by one half, or a factor of 10) until changes in the output are deemed insignificant. The next to 
last step size is used in subsequent investigations. The method is not fool-proof and should be 
repeated if the simulation conditions change as a result of significant changes in the system inputs 
or initial conditions. We will have more to say about how to select the integration step size in 
Chapters 6 and 8 when we investigate the subject of truncation errors and dynamic errors.
EXERCISES
	3.10	 Referring to Figure 3.7,
	
a.	 Find the equation of the linear approximation f t
1( ) through the end points [
(
,
)]
nT f x u
n
n
,
 
and [(
)
(
,
)].
n
T f x
u
n
n
+
+
+
1
1
1
,
 
	
b.	 Verify Equation 3.66 by integrating f t
1( )  from nT to (n + 1)T.
	3.11	 The first-order system d /d
x
t
x
= λ  with initial condition x
x
( )
0
0
=
 is to be simulated using trap­
ezoidal integration with step size T. The truncation error after n steps is εn
A
x
n
x nT
=
−
( )
(
), 
where x t
t
( ), ≥0 is the exact solution and x
n
n
A( ),
, , , ...
 = 0 1 2
 is the approximate (simulated) 
solution, i.e. x
n
x nT
n
A( )
(
),
, , ,
...
≈
=
 
0 1 2 3
. Suppose the truncation error after the first step is 
equal to a fraction of the initial condition, i.e.
	
ε
α
α
1
0
1
0
1
=
−
=
<
x
x T
x
A( )
( )
,
)
     (

	
		
λT satisfies the condition
	
e
a T
b
T
c
T
λ
λ
λ
=
+
+
	
		
	
Express the constants a b c
, ,  in terms of α and x0.
	3.12	 The population of a city P(t) is modeled by the differential equation  d /d
P
t
kP
=
.
	
a.	 Find the equation for updating P n
A( ), the approximate population at the end of year nT, 
using trapezoidal integration with step size T. Leave your answer in terms of k and T.
100
80
60
40
20
0
80
70
60
50
40
t (s)
Discrete (trapezoidal) and continuous responses
vA(n), n = 0, 5, 10, ..., 150
v(t) = 93.75 (1 – e–t/13.587)
T = 0.5 s
v(t), vA(n) (ft/s)
v(t), 0 ≤ t ≤ 75
30
20
10
0
FIGURE 3.10  Discrete (trapezoidal, T = 0.5 s) response vA(n) and continuous response v(t).

112
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	 Suppose k = 0.01 people/year per person, the initial population is 1 million people and the 
step size T = 1 yr. Find PA( )1  and PA( )
2  to the nearest person.
	
c.	 Find the general solution for P n
A( ) and use it to find PA(
).
100
	
d.	 Compare the result from part (c) to the exact value P(100).
3.13	 The mass m in Figure E3.13 is subjected to a time varying damping force f t
d( ). The ­differential 
equation describing the motion is m t v t
f t
d
d
d
( )
( )
=
 where v t( ) is the velocity of the mass and 
f t
t
t v t
d( )
( ).
=−+
1
	
a.	 Use trapezoidal integration with suitable step size T to approximate the velocity v t
t
( ),
.
 ≥0  
Note, m =1 slug and the initial velocity v( )
0
10
=
 ft/s.
	
b.	 Compare the simulated response v
n
n
A( ),
, , , ...
 = 0 1 2
 in part (a) to the exact solution 
v t
t e
t
t
( )
(
)
,
.
=
+
≥
−
10 1
0
 
3.14	 Find the largest step size T in Example 3.5 for which v nT
v
n
A
(
)
( )
.
−
< 0 05 for the entire tran­
sient response.
	
  Start with T = 0.025 s and keep incrementing by 0.025 s until the condition is no longer 
satisfied.
3.15	 Rework Example 3.5 using forward Euler integration. Choose the integration step size as 
T = 0 5.  s, the same value used for trapezoidal integration. Prepare a similar table of results for 
the approximate and exact solutions.
3.16	 The position of the sinking drum in Example 3.5 is related to its velocity by
	
y t
y
v t
t
t
( )
( )
( )
=
+
′
′
∫
0
0
d
	
	
	
Using trapezoidal integration and a step size T = 2 s, find the approximate solution 
v
n
A( ) for 100 s and feed this discrete signal to another trapezoidal integrator to generate 
y
n
A( ), the approximation to the actual position of the drum.
3.5  DISCRETE APPROXIMATION OF NONLINEAR FIRST-ORDER SYSTEMS
We now turn our attention to nonlinear first-order systems, that is, systems in which the state deriva­
tive f(x,u) is a nonlinear function of the state x. The implicit numerical integrators produce implicit 
difference equations for updating the state.
Consider the first-order system governed by
	
d
d
x
t
N x
Ku
+
=
( )
	
(3.93)
where N(x) is a nonlinear function of the state x. The derivative function is
	
f x u
x
t
Ku
N x
(
)
d
d
,
( )
=
=
−
	
(3.94)
FIGURE E3.13

113
Elementary Numerical Integration
and the equation for updating the state using implicit Euler integration is
	
x
n
x
n
T f x
n
u n
A
A
A
(
)
( )
[
(
), (
)]
+
=
+
+
+
1
1
1 	
(3.95)
	
               =
+
+
−
+
{
}
x
n
T Ku n
N x
n
A
A
( )
(
)
[
(
)]
1
1
	
(3.96)
Rearranging Equation 3.96 gives
	
x
n
TN x
n
x
n
KTu n
A
A
A
(
)
+
+
+
=
+
+
1
1
1
[
(
)]
( )
(
) 	
(3.97)
a nonlinear equation that may prove difficult or impossible to solve for xA(n + 1). To complicate 
matters further, multiple solutions may exist. The situation is illustrated in the following example.
EXAMPLE 3.6
The continuous model for the sinking drum in Example 3.5 governed its motion v(t) as a function 
of time t. A relationship between its velocity v = v(t) and depth y = y(t) is obtained by solving the 
differential equation |Braun]
	
W
g v
v
y
cv
W
FB
d
d
+
=
−
	
(3.98)
	
a.	Find the difference equation to approximate the velocity of the drum as a function of 
depth using an implicit Euler integrator. Choose the integration step T = 1 ft.
	
b.	Find the approximate velocity vA(n) at depths of 0, 1000, 2000, 3000, 4000, 5000, and 
6000 ft.
	
c.	Compare the results from part (b) to the true velocities v(nT) at depths of 0, 1000, 2000, 
3000, 4000, 5000, and 6000 ft.
	
a.	Dividing both sides of Equation 3.98 by Wv/g and introducing the input u gives
	
d
d
v
y
g
W F
W v
gc
W u
B
+
−
(
)
= −
1
	
(3.99)
	
where u = u(y) = 1, y ≥ 0. Comparing Equations 3.93 and 3.99, it follows the nonlinear 
function N(v) is
	
N v
g
W F
W v
B
( ) =
−
(
) 1
	
(3.100)
	
and the constant K is expressible as
	
K
gc
W
= −
	
(3.101)
	
	
According to Equation 3.97, the implicit equation for vA(n + 1) is
	
v
n
T g
W F
W v
n
v
n
gc
W T
A
B
A
(
)
(
)
( )
( )
+
+
−
(
)
+
=
−
1
1
1
1
A
	
(3.102)

114
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
Substituting the values g = 32.2, c = 0.8, W = 350, FB = 275 and T = 1 ft yields
	
v
n
v
n
v
n
A
A
A
(
)
.
(
)
( )
.
+
−
+
=
−
1
6 9
1
1
0 0736
	
(3.103)
	
b.	Multiplying Equation 3.103 by vA(n + 1) and collecting terms gives
	
v
n
v
n v
n
A
A
A
2
1
0 0736
1
6 9
0
(
)
[ .
( )]
(
)
.
+
+
−
+
−
=
	
(3.104)
	
which can be solved using the quadratic formula. The result is
	
v
n
v
n
v
n
A
A
A
(
)
[
( )
.
]
[
( )
.
]
.
+
=
−
±
−
+
1
0 0736
0 0736
27 6
2
2
	
(3.105)
	
	
Hence, in this case we are still able to update the new state vA(n + 1) explicitly in 
terms of the previous state vA(n). The first two iterations are illustrated below.
	
n
v
v
v
A
A
A
=
=
−
±
−
+
=
−
0
1
0
0 0736
0
0 0736
27 6
2
0
0
2
:
( )
[
( )
.
]
[
( )
.
]
.
        
.
[
.
]
.
.
0736
0
0 0736
27 6
2
2 5902
2
+
−
+
=
	
	
n
v
v
v
A
A
A
=
=
−
±
−
+
=
1
2
1
0 0736
1
0 0736
27 6
2
2 5
2
:
( )
[
( )
.
]
[
( )
.
]
.
.
        
902
0 0736
2 5902
0 0736
27 6
2
4 1709
2
−
+
−
+
=
.
[ .
.
]
.
.
	
	
	
Note, since the velocity is increasing, the negative root of Equation 3.105 was dis­
carded. The M-file “Chap3_Ex3_6.m” generates the values of vA(n), n = 1 to 6000. The 
approximate velocities at depths yn = nT, n = 0, 1000, 2000, 3000, 4000, 5000, 6000 
are listed in Table 3.6.
	
c.	An exact solution to Equation 3.98, v = v(y) is not possible. However, it is possible to 
obtain an exact solution for depth y as a function of the velocity v, namely
	
y
W
g
v
c
W
F
c
W
F
cv
W
F
B
B
B
= −
+
−
−
−
−












2
ln
	
(3.106)
	
	
We are interested in the depths corresponding to velocities up to the terminal veloc­
ity of 93.75 ft/s. Equation 3.106 can be evaluated for 0 ≤ v ≤ 93.75 ft/s and the results 
­plotted with depth y along the abscissa and velocity v along the ordinate axis as in 
Figure 3.11.
	
	
From observation of Figure 3.11, the true velocities at the required depths, 0, 1000, 
2000, 3000, 4000, 5000, and 6000 ft agree with the approximate values in Table 3.6.
	
	
The question in part (e) of Example 3.5 can now be answered. From Figure 3.11, the 
velocity of the drum at a depth of 1 mile (5280 ft) does exceed 60 mph 88 ft/s])

115
Elementary Numerical Integration
	
	
In the majority of cases, difference equations resulting from the use of implicit numer­
ical integrators can only be solved by iterative schemes for finding the roots of nonlinear 
algebraic equations, as illustrated in the following example.
	
	
Consider an object falling in a viscous medium where the drag force is a nonlinear 
function of velocity as shown in Figure 3.12.
	
	
The continuous model describing the object’s velocity v(t) is given in Equation 3.107.
	
m v
t
W
fD
d
d =
−
	
(3.107)
	
Solving for the derivative function f(v,W) = dv/dt,
	
f v W
m W
fD
( ,
) =
−
(
)
1
	
(3.108)
	
       
=
−
(
)
1
m W
cv p
	
(3.109)
	
Note the input is the constant weight W.
100
90
80
70
60
50
40
30
20
10
0
y (ft)
vA(n), n = 0, 1000, 2000, ..., 6000
v(y), 0 ≤ y ≤ 6000
Actual velocity v(y) vs depth y
v (ft/s)
0
1000
2000
3000
4000
5000
6000
FIGURE 3.11  Plot of Equation 3.106 with v and y axes reversed.
TABLE 3.6
Implicit Euler Integration (T = 1 ft) of 
Continuous Model in Equation 3.98
n
yn = nT, (ft)
vA (n), (ft/s)
0
0
0
1000
1000
74.3629
2000
2000
85.9310
3000
3000
90.3467
4000
4000
92.2281
5000
5000
93.0618
6000
6000
93.4373

116
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The difference equation based on implicit Euler integration is obtained as follows.
	
v
n
v
n
Tf v
n
W
A
A
A
(
)
( )
(
)
+
=
+
+
1
1
[
,
]	
(3.110)
	
               
=
+
−
+
[
]
{
}
v
n
T
m W
c v
n
A
A
p
( )
(
)1
	
(3.111)
	
v
n
cT
m v
n
v
n
WT
m
A
A
A
p
(
)
(
)
( )
+
+
+
[
] =
+
1
1
      	
(3.112)
	
	
Unless p is numerically equal to 1 or 2, a root solving algorithm is required to solve 
Equation 3.112 for vA(n + 1) once vA(n) has been determined. This process can dramati­
cally increase the amount of computational overhead in comparison to what would be 
required for an explicit numerical integrator.
EXERCISES
	3.17	 In Example 3.6, find the largest step size T for which
	
Max v nT
v
nT
A
(
)
(
)
.
−
≤0 1 	
	
	
Start with T = 0 025
.
 s and keep incrementing T by 0.025 s until the condition is no 
longer satisfied. Graph Max v nT
v
nT
T
A
(
)
(
)
−
 versus  and also prepare a plot of the exact 
and approximate velocities versus time.
3.18	 Suppose α = 0.5 and p = 1.2 in the example of the object falling in a viscous medium. 
The object is initially at rest.
	
a.	 Find the approximate velocity of the object after 5 s. Use an explicit Euler integrator with 
an appropriate step size.
	
b.	 Repeat part (a) using an implicit Euler integrator.
		
Hint: Use a root solving routine like the Single Point Iteration or Bisection Method to solve the 
implicit equation.
3.6  DISCRETE STATE EQUATIONS
Given the linear state equations
	
x
f x u
Ax
Bu
=
=
+
( , )
	
(3.113)
W
fD
v
FIGURE 3.12  Object falling in a viscous medium with nonlinear drag force fD = cvp.

117
Elementary Numerical Integration
	
y
g x u
Cx
Du
=
=
+
( , )
	
(3.114)
A discrete model approximation of Equation 3.113 can be obtained in a straightforward 
manner. The approximation to the continuous state x t( ) is x
nT
A(
) or simply x
n
A( ) for short. 
Difference equations for the discrete state x
n
A( ), using one of the previously discussed numeri­
cal integrators, are obtained in exactly the same way as before. For example, using explicit Euler 
integration,
	
x
n
x
n
T f x
n u n
A
A
A
(
)
( )
[
( ), ( )]
+
=
+
1
	
(3.115)
	
              =
+
+
x
n
T Ax
n
Bu n
A
A
( )
[
( )
( )]	
(3.116)
	
        =
+
+
(
)
( )
( )
I
TA x
n
TBu n
A
	
(3.117)
The discrete output is determined from
	
y
n
Cx
n
Du n
A
A
( )
( )
( )
=
+
	
(3.118)
An example involving the discrete state equations follows.
EXAMPLE 3.7
A circuit used in control systems is the RC lead-lag network shown in Figure 3.13. The differential 
equation relating the output vo(t) and input vi(t) is
	
RC R C v
RC
RC
R C v
v
RC R C v
RC
R C
1
1 2
2
1
1
1
2
2
2
1
1 2
2
1
1
2



o
o
o
i
+
+
+
+
=
+
+
(
)
(
2)v
v
i
i
+
	
(3.119)
	
a.	Represent the circuit in state variable form.
	
b.	Find the discrete state equations for approximating the circuit dynamics based on the use 
of explicit Euler integration.
	
c.	The capacitor voltages are initially zero and the input is a step vi(t) = 1V, t ≥ 0. 
Approximate the step response using explicit Euler integration with step size T = 0.001 s. 
The circuit parameter values are R1 = 10,000 Ω, R2 = 5000 Ω, C1 = 7.5 × 10−6 F, 
C2 = 2.5 × 10−6 F.
	
d.	The circuit shown in Figure 3.13 is governed by the state equations
	
d
d
i
v
t
C
R
R
v
R C v
R C v
C
C
C
1
1
2
1
1
1
1
1
1
1
2
2
1
2
1
= −
+






−
+
	
(3.120)
	
d
d
i
v
t
R C v
R C v
R C v
C
C
C
2
1
2
1
1
1
2
2
2
2
2
2
= −
−
+
	
(3.121)
	
	   Find the matrices A, B, C, and D in the state variable model with the states equal to 
the capacitor voltages.
	
e.	Repeat parts (b) and (c) using Equations 3.120 and 3.121. Compare the results in parts (c) 
and (e).

118
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a.	Dividing through by the lead coefficient term R1R2C1C2 and introducing new constants 
a1, a2, b0, b1, b2 gives
	




v
av
a v
b v
bv
b v
o
o
o
i
i
i
+
+
=
+
+
1
0
2
1
0
	
(3.122)
	
where
	
a
RC R C
a
RC
RC
R C
RC R C
0
1
1 2
2
1
1
1
1
2
2
2
1
1 2
2
1
=
=
+
+
,     
	
(3.123)
	
b
RC R C
b
RC
R C
RC R C
b
0
1
1 2
2
1
1
1
2
2
1
1 2
2
2
1
1
=
=
+
=
,
,
	
(3.124)
	
	
Constructing the simulation diagram for the system starts with the following two 
equations which are equivalent to Equation 2.73 (see Chapter 2, Section 4).
	


z
a z
a z
v
+
+
=
1
0
i 	
(3.125)
	
v
b z
b z
b z
o =
+
+
0
1
2

	
(3.126)
	
	
Solving for z in Equation 3.125 and substituting the result in Equation 3.126 yields
	
v
b z
b z
b v
a z
a z
i
o =
+
+
−
−
0
1
2
0
1


(
) 	
(3.127)
	
     =
−
(
) +
−
(
) +
b
a b
z
b
a b
z
b v
0
0
2
1
1 2
2

	
(3.128)
	
	
The simulation diagram follows directly from Equations 3.125 and 3.128. It is pre­
sented in Figure 3.14.
	
	
Choosing the outputs of the integrators in Figure 3.14 as the states results in
	
x
x
1
2
=
	
(3.129)
	
x
a x
a x
v
2
0 1
1 2
= −
−
+
i 	
(3.130)
	
v
b
a b x
b
a b x
b v
o
i
=
−
+
−
+
(
)
(
)
0
0
2
1
1
1 2
2
2
	
(3.131)
C1
C2
R1
R2
vC1
v0(t)
vi(t)
vC2
+
–
+
–
+
–
+
–
FIGURE 3.13  A lead-lag network.

119
Elementary Numerical Integration
	
	
From Equations 3.129–3.131, the matrices A, B, C, and D in the linear state equations 
x
Ax
Bu y
Cx
Du
=
+
=
+
,
 are
	
A
a
a
B
C
b
a b
b
a b
= −
−






=






=
−
−
0
1
0
1
0
1
0
0
2
1
1 2
,
,
     
     
[
]
= [
]
,     D
b2
	
(3.132)
	
	
In term of the electrical parameters
	
A
RC R C
RC
RC
R C
RC R C
=
−
−
+
+












0
1
1
1
1 2
2
1
1
1
2
2
2
1
1 2
2

=






=
−






=
,
,
,
[ ]
    
    
    
B
C
R C
D
0
1
0
1
1
2
1
	
(3.133)
	
b.	From Equations 3.117 and 3.118, the discrete state equations are
	
x n
T
T
RC R C
T RC
RC
R C
RC R C
A(
)
+
=
−
−
+
+








1
1
1
1
1 2
2
1
1
1
2
2
2
1
1 2
2




+






x n
T v n
A( )
( )
0
i
	
(3.134)
	
y
n
v n
R C
x n
v n
A
A
, ( )
( )
( )
( )
1
2
1
0
1
=
=
−






+
o
i
	
(3.135)
	
c.	Equation 3.134 is solved recursively in “Ch3_Ex3_7.m” for the state xA n
( ), which is used 
in Equation 3.135 to find the discrete step response vo(n), n = 0, 1, 2, …. The first 25 
discrete points and every 10th point after that until steady-state are plotted in the top 
window in Figure 3.15.
	
d.	Writing Equations 3.111 and 3.112 in state variable form
	


v
v
C
R
R
R C
R C
R C
C
C
1
2
1
1
1
1
1
1
1
1
2
2
1
2
2
2
2





=
−
+






−
−
−











+






v
v
R C
R C
v
C
C
1
2
1
1
2
1
2
2
i
	
(3.136)
b2
b1 – a1b2
b0 – a0b2
–a0
–a1
vi
x2
v0
x1
z
ż
z
∫
∫
FIGURE 3.14  Simulation diagram for RC lead-lag network based on Equation 3.119.

120
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	      From the circuit, the output equation is
	
v
v
vC
o =
−
i
1 	
(3.137)
	
             
= −
[
]





+[ ]
1
0
1
1
2
v
v
v
C
C
i
	
(3.138)
	
	      The matrices A, B, C, and D follow directly from Equations 3.136 and 3.138.
	
e.	 The new state equations are discretized based on the use of explicit Euler integration 
and solved recursively in “Ch3_Ex7_3.m”. The result is shown in the bottom window 
of Figure 3.15. The two step responses are identical.
The second choice of the state variables, namely the capacitor voltages is more intuitive than 
the state definition based on the simulation diagram in Figure 3.14. The output vector could be 
modified to include additional outputs y2
1
= vC  and y3
2
= vC  making y
v v
v
C
C
=[
]
o 
 
1
2
T to allow visu­
alizing the capacitor voltages.
A recursive solution to Equation 3.134 requires the initial discrete state vector 
x
x
x
x
x
A
A
A
( )
[
( )
( )]
[ ( )
( )]
,
,
0
0
0
0
0
1
2
1
2
=
=
 
 
T
T. Since the states are not physical quantities, their initial val­
ues must be calculated from knowledge of the initial capacitor voltages vC1(0) and vC2(0). In this 
example, x1,A(0) = x1(0) = 0 and x2,A(0) = x2(0) = 0 because vC1(0) and vC2(0) are both zero.
If either of the two implicit numerical integrators were used instead of the explicit Euler integra­
tor, Equation 3.115 is replaced with one of the following two equations:
	
Implicit Euler:
x n
x n
T f x n
u n
A
A
A
(
)
( )
[
(
), (
)]
+
=
+
+
+
1
1
1 	
(3.139)
	
Trapezoidal:
x n
x n
T
f x n u n
f x n
u n
A
A
A
A
(
)
( )
[
( ), ( )]
[
(
), (
)
+
=
+
+
+
+
1
2
1
1]
{
}
	
(3.140)
0.95
0.9
0.85
0.8
1
v0(n) (V)
v0(n) (V)
v0(n) vs t using states vC1, vC2
v0(n) vs t using states x1, x2 from simulation diagram
v0(n), n = 0, 1, 2, ..., 24, 25, 35, 45, ...
v0(n), n = 0, 1, 2, ..., 24, 25, 35, 45, ...
0.95
0.9
0.85
0.8
1
0
0.05
0.1
0.15
0.2
0.25
t (s)
0.3
0.35
0.4
0.45
0.5
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0.4
0.45
0.5
FIGURE 3.15  Discrete step response of circuit using different state definitions.

121
Elementary Numerical Integration
If the continuous system is linear,
	
x
f x u
Ax
Bu
=
=
+
( , )
	
(3.141)
	
y
g x u
Cx
Du
=
=
+
( , )
	
(3.142)
Equations 3.139 and 3.140 can be solved explicitly for x n
A(
)
+1 in terms of xA n
u n
( ),
( )
 
 and u n
(
)
+1. 
For implicit Euler integration,
	
x n
x n
T Ax n
Bu n
A
A
A
(
)
( )
[
(
)
(
)]
+
=
+
+
+
+
1
1
1 	
(3.143)
Solving for x n
A(
)
+1 gives
	
x n
I
TA
x n
TBu n
A
A
(
)
(
) [
( )
(
)]
+
=
−
+
+
−
1
1
1
	
(3.144)
Using trapezoidal integration to update the state,
	
x n
x n
T Ax n
Bu n
Ax n
Bu n
A
A
A
A
(
)
( )
( )
( )
(
)
(
)
+
=
+
+
+
+
+
+
[
]
1
2
1
1
	
(3.145)
Solving Equation 3.145 for x n
A(
)
+1 gives
	
x n
I
TA
I
TA x n
I
TA
A
A
(
)
( )
+
=
−






+






+
−
−
1
1
2
1
2
1
2
1
2
1






+
+
−1
1
TB u n
u n
[ ( )
(
)]
	
(3.146)
In Equations 3.144 and 3.146, the state is updated recursively without the need to solve an 
implicit equation for x n
A(
)
+1; however, the computations are more extensive than with explicit 
Euler integration because of the requirement to invert the matrix (l − TA) in Equation 3.144 and 
I
TA
−






1
2
 in Equation 3.146.
The difference equation for approximating the state response of the linear system using explicit 
Euler integration assumed the form
	
x n
Gx n
Hu n
A
A
(
)
( )
( )
+
=
+
1
	
(3.147)
where
	
G
I
TA
H
TB
=
+
=
(
),     
	
(3.148)
For a stable discrete system, the steady-state response to a constant input u n
u
n
( )
,
, , ,...
=
=
0
0 1 2
 
is found by setting lim
lim
( )
(
)
n
A
n
A
A
x n
n
x
x
→∞
→∞
+
=
=
∞
(
)1
. Doing this in Equation 3.147,
	
x
x
A
A
G
Hu
(
)
(
)
∞=
∞+
0
	
(3.149)
	
(I
G xA
Hu
−
∞=
)
(
)
0
	
(3.150)
	
xA
I
G
Hu
(
)
(
)
∞=
−
−1
0
	
(3.151)

122
Simulation of Dynamic Systems with MATLAB® and Simulink®
Substituting for G and H from Equation 3.148,
	
 
x
I
I
A
TA TBu
(
)
)]
[
(
∞
+
=
−
0
	
(3.152)
	
= −
−
A Bu
1
0
	
(3.153)
A similar approach applies to the implicit integrators with difference equations given in 
Equations 3.144 and 3.146. Starting with
	
x n
Gx n
H u n
H u n
A
A
(
)
( )
( )
(
)
+
=
+
+
+
1
1
0
1
	
(3.154)
	
Implicit Euler:
     
     
 G
I
TA
H
H
I
TA
TB
=
−
=
=
−
−
−
(
) ,
,
(
)
1
0
1
1
0
	
(3.155)
	
Trapezoidal:
     
G
I
TA
I
TA
H
=
−






+






−
1
2
1
2
1
0
,
=
=
−






−
H
I
TA
TB
1
1
1
2
1
2
	
(3.156)
The steady-state responses are obtained from
	
x
x
A
A
G
H u
H u
(
)
(
)
∞=
∞+
+
0
0
1
0
	
(3.157)
	
x
x
A
A
G
H
H u
(
)
(
)
(
)
∞−
∞=
+
0
1
0
	
(3.158)
	
xA
I
G
H
H u
(
)
(
) (
)
∞=
−
+
−1
0
1
0
	
(3.159)
Using G, H0 and H1 in Equation 3.155 for implicit Euler integration,
	
xA
I
I
TA
I
TA
TBu
(
)
[
(
) ] (
)
∞=
−
−
−
−
−
−
1
1
1
0
	
(3.160)
Using A−1B−1 = (BA)−1 from matrix algebra, Equation 3.160 becomes
	
x
I
TA
I
A
TBu
(
)
[(
)
]
∞=
−
−
−1
0
	
(3.161)
	
  = −
−
(
)
TA
TBu
1
0
	
(3.162)
	
= −
−
A Bu
1
0
      	
(3.163)
which is the identical result for explicit Euler integration in Equation 3.153. It should come as no 
surprise that the same result occurs when combining Equations 3.156 and 3.159 for trapezoidal 
integration.
Indeed, the difference equation resulting from the use of any numerical integrator will produce 
the same value for xA(
)
∞, provided a finite xA(
)
∞ exists. Note the predicted steady-state result for 
xA(
)
∞ is independent of the step size T. Of course the accuracy of the dynamic (transient) compo­
nent of the discrete response is strongly dependent on the step size T.
Its instructive to investigate the continuous system x
Ax
Bu
=
+
 at steady-state in response to a 
constant input u
u
=
0, t ≥ 0. The steady-state x
x t
t
(
)
lim ( )
∞=
→∞
 is obtained by setting the derivative 
x equal to the zero vector 0. That is,
	
0 =
∞+
Ax
Bu
(
)
0
	
(3.164)
	
x
A Bu
(
)
∞= −
−1
0
	
(3.165)
leading to the conclusion that x
x t
n
t
A
n
A
x
x
(
)
lim ( )
(
)
lim
( )
∞=
=
∞=
→∞
→∞
.

123
Elementary Numerical Integration
EXAMPLE 3.8
Consider the system of two interacting tanks presented in Chapter 2, Section 2.6. (See Figure 2.28) 
The state equations are are
	
d
d
d
d
H
t
H
t
AR
AR
A R
R
R
AR
1
2
1 12
1 12
2 12
1
2
1 1
1
1
1






=
−
−
+
(
)
2
2
1
2
1
2
1
0
0
1
R
H
H
A
A
F











+






1
2F






	
(3.166)
The numerical values of the physical parameters are:
R12 = 2 ft per cu ft/min, R2 = 0.5 ft per cu ft/min, A1 = 15 ft2, A2 = 10 ft2,
For input flows of F1(t) = 5 ft3/min and F2(t) = 2 ft3/min, the discrete responses for both tank 
levels, based on explicit Euler and implicit Euler integration with step size T = 0.25 min, are shown 
in Figures 3.16 and 3.17, respectively.
Methods for finding the continuous responses for H1(t) and H2(t) are deferred until Chapter 4. 
The continuous tank level responses are:
	
H t
e
e
t
t
t
1
0 2574
0 0259
13 5
0 0703
13 5703
0
( )
.
.
.
,
.
.
=
+
−
≥
−
−
	
(3.167)
	
H t
e
e
t
t
t
2
0 2574
0 0259
3 5
0 4723
3 0277
0
( )
.
.
.
,
.
.
=
−
−
≥
−
−
 
	
(3.168)
The discrete responses are in close agreement with the continuous responses.
The predicted steady-state levels are
	
x
A
A
Bu
(
)
.
.
.
.
.
.
∞
= −−
−






= −
−
−
1
0
0 0333
0 0333
0 05
0 25
0 0667
0
0
0 1
1










=






5
2
13 5
3 5
.
.
	
in agreement with the values obtained by letting t → ∞ in Equations 3.167 and 3.168.
H2(t), t ≥ 0
H2,A(n), n = 0, 10, 20, ...
H1(t), t ≥ 0
H1,A(n), n = 0, 10, 20, ...
(H2)ss = 3.5 ft
(H1)ss = 13.5 ft
H2 (ft)
4
3
2
1
0
H1 (ft)
Discrete (explicit Euler with T = 0.25 min) and continuous responses
15
10
5
100
90
80
70
60
t (min)
50
40
30
20
10
0
100
90
80
70
60
t (min)
50
40
30
20
10
0
0
FIGURE 3.16  Discrete (explicit Euler, T = 0.25 min) and continuous tank level responses.

124
Simulation of Dynamic Systems with MATLAB® and Simulink®
Figure 3.18 demonstrates the effect of step size T on accuracy of the discrete response. The 
step size is increased to T = 7.5 min producing a noticable difference between the discrete and 
continuous responses when using explicit Euler integration. In fact, H2,A(n) exhibits an oscilla­
tory response. However, despite the oscillatory response, both H1,A(n) and H2,A(n) are stable and 
approach the correct steady-state values.
EXERCISES
3.19	 Verify the solution for x
n
A(
)
+1  in Equation 3.146 which gives the updated state in the approx­
imate solution of x
Ax
Bu
=
+
 by trapezoidal integration.
3.20	 Find the discrete state equations for the circuit in Example 3.7 using
	
a.	 Implicit Euler integration
	
b.	 Trapezoidal integration
3.21	 In the lead-lag circuit of Example 3.7, the outputs are y
v
y
v
y
v
C
C
1
0
2
3
1
2
=
=
=
,
,
.
 
 
	
a.	 Find the difference equations based on trapezoidal integration with step size T for approxi­
mating the continuous system outputs to input v t
i( )
	
b.	 The capacitor voltages are both initially zero and the input is a step voltage of 12 volts 
applied at t = 0. Solve the difference equations recursively and plot the discrete-time out­
puts in the output vector y
n
y
n
y
n
y
n
A
A
A
A
T
( )
[
( )
( )
( )] .
,
,
,
=
1
2
3
  
  
	
c.	 The initial capacitor voltages are v
v
C
C
1
2
0
1
0
0
( )
( )
=
=
 V,  
 V and the input v t
t
i( )
.
=
≥
0
0
 V,  
 
Solve the difference equations recursively and plot the discrete outputs in the output vector 
y
n
y
n
y
n
y
n
A
A
A
A
T
( )
[
( )
( )
( )] .
,
,
,
=
1
2
3
  
  
3.22	 For the circuit in Example 3.7 described by Equations 3.120 and 3.121.
	
a.	 Use the technique presented in Chapter 2, Section 3 for converting two first-order differen­
tial equations into a single second order differential equation to eliminate v
t
C2( ) from the 
two equations and obtain
	




v
v
v
v
v
v
C
C
C
i
i
i
1
1
1
1
0
2
1
0
+
+
=
+
+
α
α
β
β
β
	
H2(t), t ≥ 0
H2,A(n), n = 0, 10, 20, ...
H1(t), t ≥ 0
H1,A(n), n = 0, 10, 20, ...
(H2)ss = 3.5 ft
(H1)ss = 13.5 ft
H2 (ft)
4
3
2
1
0
Discrete (implicit Euler with T = 0.25 min) and continuous responses
15
10
5
100
90
80
70
60
t (min)
50
40
30
20
10
0
100
90
80
70
60
t (min)
50
40
30
20
10
0
0
FIGURE 3.17  Discrete (implicit Euler, T = 0.25 min) and continuous tank level responses.

125
Elementary Numerical Integration
	
	 Express the coefficients α α
β
β β
1
0
2
1
0
,
,
,
,
 in terms of the electrical parameters R R C C
1
2
1
2
,
,
,
.
	
b.	 The circuit output is v t
0( ). Find the matrices A B C D
,
,
,
 in the continuous state equation 
model. Express your answers in terms of the circuit parameters R R C
1
2
1
,
,
, and C2.
	
c.	 Find the matrices G and H in the discrete state equations resulting from the use of explicit 
Euler integration to approximate the continuous response of the circuit.
	
d.	 The input v t
t
i( )
.
=
≥
1
0
 V,  
 Find and plot the discrete response v n
n
0
0 1 2
( ),
, , , ...
 =
 based 
on explicit Euler integration with step size T = 0 001
.
 s and compare your answer to the 
results shown in Figure 3.15.
3.23	 The dynamic interaction of rabbit and fox populations in a forest is under investigation. The 
predator-prey ecosystem is illustrated in Figure E3.23.
	
R(t) = Population of rabbits after “t” wks
	
F(t) = Population of foxes after “t” wks
	
h t
R( ) = Rate of rabbit hunting, (rabbits/wk)
	
h
t
F( ) = Rate of fox hunting, (fox/wk)
	
	
The mathematical model consists of the following coupled differential equations:
	
d
d
d
d
R
t
aR
bF
h
F
t
cF
dR
h
R
F
=
−
−
= −
+
−
	
	
a b
,  = constant parameters defining the growth rate of rabbits
	
c d
,  = constant parameters defining the growth rate of foxes
H2(t), t ≥ 0
H2,A(n), n = 0, 1, 2, ...
H1(t), t ≥ 0
H1,A(n), n = 0, 1, 2, ...
(H2)ss = 13.5 ft
(H1)ss = 13.5 ft
H2 (ft)
4
3
2
1
0
H1 (ft)
Discrete (explicit Euler with T = 7.5 min) and continuous responses
15
10
5
100
90
80
70
60
t (min)
50
40
30
20
10
0
100
90
80
70
60
t (min)
50
40
30
20
10
0
0
FIGURE 3.18  Discrete (explicit Euler, T = 7.5 min) and continuous tank level responses.
FIGURE E3.23

126
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a.	 Find the equilibrium point (
,
)
R F
e
e  when h t
h
t
R
R
( )
,
=
≥
 
0 and h
t
h
t
F
F
( )
,
.
=
≥
 
0  Express 
your answers for R
F
e
e
 and 
 in terms of the system parameters a b c d
, , ,  and constant hunting 
rates h
h
R
F
,
.
 
	
b.	 Baseline values of the system parameters are given below.
	
a
b
c
=
=
=
0 04
0 2
0 1
.
,
.
,
.
rabbits/wk
rabbit
 
rabbits/wk
fox
 
foxes/wk
fox
 
foxes/wk
rabbit
,
.
d = 0 0075
	
	
	   Foxes are endangered and hunting foxes is forbidden. Rabbits are hunted at a constant 
rate and after a long period of time the fox population stabilizes at 750. Find the constant 
rate of rabbit hunting. Find the rabbit population at the same time.
	
c.	 Let the state x be defined as x t
R t
F t
( )
( )
( )
=





 and the input vector u be defined as u t
h t
h
t
R
F
( )
( )
( ) .
=





 
Find the matrices A and B in the state equation x
Ax
Bu
=
+
.
	
d.	 Suppose neither rabbits or foxes are hunted. Using explicit Euler integration with step size 
T =1 week, find and plot the discrete responses R(n) and F(n) until steady-state is reached. 
The initial populations of rabbits and foxes are R( )
,
0
10 000
=
 and F( )
.
0
1000
=
3.24	 A mass is suspended from a stationary support by a spring as shown in Figure E3.24. The mass 
is displaced from its equilibrium position 1 ft and released with zero velocity. The continuous 
model of the system is mx
kx
+
= 0 .
	
a.	 Find the matrix A in the state equations x
Ax
=
 for the continuous model.
	
b.	 Find the matrix G in the discrete state equations x
n
Gx
n
A
A
(
)
( )
+
=
1
 resulting from the use 
of explicit Euler integration to approximate the response of the continuous system.
	
c.	 The system parameters are k = 4 lb/ft and m = 1 slug. Fill in Table E3.24.
TABLE E3.24
n
x
n
A( )
(
.
)
T = 0 05 s
x nT
(
)
n
x
n
A( )
(
.
)
T = 0 01 s
x nT
(
)
0
0
1
5
2
10
3
15
4
20
5
25
6
30
7
35
8
40
9
45
10
50
FIGURE E3.24

127
Elementary Numerical Integration
3.7  IMPROVEMENTS TO EULER INTEGRATION
Euler integration is popular in large measure due to its simplicity. A graphical interpretation of 
either explicit or implicit Euler integration is straightforward. A discussion of error characteris­
tics for Euler integrators is deferred until a later chapter. However, its apparent that serious errors 
can propagate as the discrete-time variable “n” increases with Euler integration as a result of the 
underlying assumption that the state derivative remains constant for an entire integration step. For 
systems in which one or more of the state variables experience frequent fluctuations (relative to the 
integration step size) this assumption is unjustified.
The inherent weakness of Euler integration can be overcome in ways other than simply reducing 
the integration step size, which may not always be practical. In addition to trapezoidal integration, 
another method for obtaining more accurate state updates than Euler integration is illustrated in 
Figure 3.19.
3.7.1  Improved Euler Integration
With explicit Euler integration, advancing the state xA(n) is equivalent to projecting line segment 
L1, whose slope is f[xA(n),u(n)] until it reaches the end of the interval at (n + 1)T. The updated state 
is shown as ˆx
n
A(
)
+1 . From there, another forward Euler integration step would proceed along the 
line segment L2, whose slope f x
n
u n
A
[
(
) (
)]
ˆ
,
+
+
1
1 .
Recognizing that L1 may not be the most judicious direction to move along for obtaining 
xA(n + 1), the approximation of the continuous state x[(n + 1)T], the question to be asked is “Is there 
a better choice for determining the path from xA(n) to xA(n + 1)?” The line segment L starting from 
xA(n) with slope equal to the average of the slopes of L1 and L2 appears to be a more prudent choice.
Since Euler integration is predicated on the assumption that the derivative function f(x,u) is 
constant, it makes sense to base the constant on evaluations of f(x,u) at more than one point. In sum­
mary, a new method for computing xA(n + 1) consists of the following:
	
1.	Prediction of the new state using forward Euler integration, that is, moving from xA(n) to 
ˆx
n
A(
)
+1  along the line segment with slope is L1.
	
ˆ (
)
( )
[
( ), ( )]
x
n
x
n
Tf x
n u n
A
A
A
+
=
+
1
	
(3.169)
L
L1
L2
t
x(t)
[slope of L1 + slope of L2]
1
2
x· = f(x,u)
Slope of L1 = f [xA(n),u(n)]
Slope of L2 = f [xˆA(n + 1), u(n + 1)]
Slope of L =
xA(n)
xA(n + 1)
(n + 1)T
nT
xA(n + 1)
FIGURE 3.19  Illustration of improved Euler method.

128
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
2.	Computing the derivative function f x
n
u n
A
[
(
) (
)]
ˆ
,
+
+
1
1  at ˆx
n
A(
)
+1 , that is, the slope of 
line segment L2.
	
3.	Improving the predicted value ˆx
n
A(
)
+1 , that is, moving from xA(n) along a line segment 
whose slope is the average of the slopes of line segments L1 and L2 to the new updated state 
xA (n + 1).
	
x
n
x
n
T
f x
n u n
f x
n
u n
A
A
A
A
(
)
( )
[
( ), ( )]
[
(
), (
)]
+
=
+
+
+
+
{
}
1
2
1
1
ˆ
	
(3.170)
The numerical integrator based on Equations 3.169 and 3.170 is called improved Euler integra­
tion, also known as Heun’s Method.
When the state is a vector and the system model is linear, that is,
	
x
f x u
Ax
Bu
=
=
+
( , )
	
(3.171)
the predicted state using forward Euler integration was shown to be
	
ˆ (
)
(
)
( )
xA
A
n
I
TA x
n
u n
+
=
+
+
1
( )
TB
	
(3.172)
The improved state estimate is computed from
	
x
n
x
n
T
f x
n u n
f x
n
u n
A
A
A
A
(
)
( )
[
( ), ( )]
[
(
), (
)]
+
=
+
+
+
+
{
}
1
2
1
1
ˆ
	
(3.173)
Substituting Equation 3.172 into Equation 3.173 results in
	
x
n
I
TA
TA
x
n
T I
TA Bu n
TBu n
A
A
(
)
(
)
( )
(
)
( )
(
+
=
+
+






+
+
+
+
1
1
2
1
2
1
2
1
2
)
	
(3.174)
Note the additional term 1
2
2
(
)
TA  in brackets in Equation 3.174 compared with explicit Euler 
integration.
The following example demonstrates the improved accuracy with improved Euler integration 
compared to ordinary Euler integration (explicit or implicit).
EXAMPLE 3.9
Consider the autonomous, undamped second-order system
	
x
x
+
=
ω2
0 	
(3.175)
Choosing state variables x1(t) = x(t) and x t
x t
2( )
( )
= 
 leads to the state equations
	
x
f x x
x
1
1
1
2
2
=
=
( ,
)
	
(3.176)
	
x
f x x
x
2
2
1
2
2
1
=
= −
( ,
)
ω
	
(3.177)
The initial conditions are x1(0) = x(0) = x0, x
x
x
2
0
0
(0) =
=


( )
.

129
Elementary Numerical Integration
	
a.	Find the system matrix A.
	
b.	Find the general solution of the discrete state equations using explicit and improved Euler 
integrators.
	
c.	Find the transient response using explicit and Improved Euler integrators when 
ω = 1 rad/s, x0 = 1 ft, x0
0
=
 ft/s, and T = 0.25 s. Plot the results.
	
d.	Find the exact solution for the transient response of the continuous system and compare 
it to the approximate solutions in part (c).
	
a.	From Equations 3.176 and 3.177, the system matrix is
	
A = −






0
1
0
2
ω
	
(3.178)
	
b.	It is left as an exercise problem to show the general solutions for the discrete states for 
each integrator are:
	
Explicit Euler:
x n
I
TA x
A
n
( )
(
)
( )
=
+
0 	
(3.179)
	
Improved Euler:
xA n
I
TA
TA
x
n
( )
(
)
( )
=
+
+






1
2
0
2
	
(3.180)
	
	   Substituting Equation 3.178 into Equations 3.179 and 3.180 gives
	
Explicit Euler:
x n
T
T
x
x
A
n
( ) = −












1
1
2
0
0
ω

	
(3.181)
	
Improved Euler:
x n
T
T
T
T
A( )
(
)
(
)
=
−
−
−






1
1
2
1
1
2
2
2
2
ω
ω
ω







n
x
x
0
0
	
(3.182)
	
c.	The transient responses of the discrete states x1,A(n) and x2,A(n) when ω = 1 rad/s, 
x0 = 1 ft, x0
0
=
ft/s, and T = 0.25 s are plotted in Figures 3.20 and 3.21 for the explicit 
and Improved Euler integrators.
	
d.	The exact solution for the continuous states of the undamped second-order system is
	
x t
x
t
1
0
( )
cos
=
ω 	
(3.183)
	
x t
x
t
2
0
( )
sin
= −ω
ω 	
(3.184)
	
	 and plotted in Figures 3.20 and 3.21.
  Note the considerable improvement in accuracy obtained with the Improved Euler integrator. 
The discrete state xA(n) = [x1,A(n) x2,A(n)]T based on explicit Euler integration is a poor approxima­
tion to the continuous state, to say the least. This is not surprising in light of the fact that the state 
derivatives x1 and x2 vary significantly over the interval T, in violation of the basic assumption 
underlying explicit Euler integration.

130
Simulation of Dynamic Systems with MATLAB® and Simulink®
In Chapter 8, we will learn that explicit Euler integration of an undamped second-order system 
is never stable and should not be used. However, lightly damped second-order systems, which 
have high natural frequencies, require smaller integration steps for accurate results. Dynamic 
accuracy is discused in great detail in Chapter 8. It will be shown that the controlling parameter 
for dynamic accuracy is ωT, the product of natural frequency and integration time step.
0
–4
–2
0
x2
x2,A(n), n = 0, 1, 2, ..., 50
x2(t), 0 ≤ t ≤ 2π
2
4
6
12
11
10
9
8
7
6
Explicit Euler (T = 0.25 s)
5
4
3
2
1
t (s)
0
–4
–2
0
x1
x1,A(n), n = 0, 1, 2, ..., 50
x1(t), 0 ≤ t ≤ 2π
2
4
6
12
11
10
9
8
7
6
5
4
3
2
1
t (s)
FIGURE 3.21  Continuous and discrete (implicit Euler, T = 0.25 s) responses.
0
–4
–2
0
x2
x2,A(n), n = 0, 1, 2, ..., 50
x2(t), 0 ≤ t ≤ 2π
2
4
6
12
11
10
9
8
7
6
Explicit Euler (T = 0.25 s)
5
4
3
2
1
t (s)
0
–4
–2
0
x1
x1,A(n), n = 0, 1, 2, ..., 50
x1(t), 0 ≤ t ≤ 2π
2
4
6
12
11
10
9
8
7
6
5
4
3
2
1
t (s)
FIGURE 3.20  Continuous and discrete (explicit Euler, T = 0.25 s) responses.

131
Elementary Numerical Integration
In general, explicit (also known as forward) Euler integration does not result in the “best” direc­
tion for advancing the state from xA(n) to xA(n + 1). As the name suggests, improved Euler integra­
tion represents an improvement although it comes with a penalty of requiring twice as many state 
derivative function evaluations compared with explicit Euler integration for the identical step size.
3.7.2  Modified Euler Integration
Another method for finding a better direction (compared with explicit Euler integration) to proceed 
from the current state is portrayed in Figure 3.22. It is called the midpoint or modified Euler method 
because the line segment L, which determines the new approximate state is based on a state deriva­
tive calculation at the midpoint of the interval.
Starting from the current discrete state xA(n), a forward Euler step is taken along line seg­
ment L1 ending up at the point [
(
]
(
) ,
)
n
T x
n
A
+
+
1 2
1 2
/
/
. A new direction is calculated, namely, 
f x
n
u n
A
[
(
]
(
),
)
+
+
1 2
1 2
/
/
 which represents the slope of line L2. Finally, the updated state xA(n + 1) 
is obtained by starting from the current state xA (n) and moving in the direction of line segment L, 
which is parallel to line segment L2, until the end of the interval.
A discrete state equation can be obtained for the approximate solution of x
f x u
Ax
Bu
=
=
+
( , )
, 
based on the use of modified Euler integration, in the same way it was obtained with Improved Euler 
integration. First the state x
n
A(
)
+1 2
/
 is calculated from
	
x
n
x
n
T f x
n u n
A
A
A
+
+





=
1
2
2
( )
[
( ), ( )]
	
(3.185)
The updated state x
n
A(
)
+1  is based on the derivative function f x u
( , ) evaluated at the point 
[
(
)]
(
) ,
n
T x
n
A
+
+
1 2
1 2
/
/
 according to
	
x
n
x
n
Tf x
n
u n
A
A
A
(
)
( )
,
+
=
+
+
+


















1
1
2
1
2
	
(3.186)
From Equations 3.185, 3.186, and f x u
Ax
Bu
( , ) =
+
, the equation for updating the state is
	
x
n
I
TA
TA
x
n
T ABu n
TBu n
A
A
(
)
(
)
(
)
( )
( )
+
=
+
+






+
+
+



1
1
2
1
2
1
2
2
2



	
(3.187)
2
L
L1
L2
t
x(t)
xA(n)
xA
xA(n + 1)
(n + 1)T
(n + 1)T
2
(n + 1)
nT
x· = f(x,u)
Slope of L1 = f [xA(n),u(n)]
Slope of L = Slope of L2
1
2
1
2
Slope of L2 = f [xA(n +
 ),u(n +   )]
FIGURE 3.22  Illustration of the modified Euler method.

132
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note the bracketed term multiplying x
n
A( ) in Equation 3.187 is identical to the bracketed term 
multiplying x
n
A( ) in Equation 3.174 in the improved Euler method.
The modified Euler integrator requires input sampling at twice the normal frequency of 1/T due 
to the presence of the term u n
(
)
+1 2
/
 in Equation 3.187.
3.7.3  Discrete-Time System Matrices
For autonomous systems governed by x
Ax
=
, the discrete state x
n
A( ) is updated according to
	
x
n
Gx
n
A
A
(
)
( )
+
=
1
	
(3.188)
where the discrete-time system matrix G for each of the five numerical integrators is
	
Explicit Euler:
G
I
TA
=
+
	
(3.189)
	
Implicit Euler:
G
I
TA
=
−
−
(
) 1
	
(3.190)
	
Trapezoidal:
G
I
TA
I
TA
=
−






+












−
1
2
1
2
1
	
(3.191)
	
Improved Euler:
G
I
TA
TA
=
+
+
(
)
(
)
1
2
2
	
(3.192)
	
Modified Euler:
G
I
TA
TA
=
+
+
(
)
(
)
1
2
2
	
(3.193)
It follows directly from Equation 3.188 that the general solution for x
n
A( ) is given by
	
x
n
G x
n
A
n
A
( )
( ),
, , ,...
=
=
0
1 2 3
	
(3.194)
The discrete-time state transition matrix Φ(n) is defined as
	
Φ( )
n
Gn
=
	
(3.195)
From Equations 3.194 and 3.195,
	
x
n
n x
A
A
( )
( )
= Φ( )
0 	
(3.196)
From Equation 2.128 in Chapter 2, Section 2.6, the solution to x
Ax
=
 is
	
x t
t x
( )
( )
= Φ( )
0 	
(3.197)
where Φ(t) is expressible as an infinite series (see Equation 2.129).
	
Φ( )t
I
tA
tA
tA
tA
=
+
+
+
+
(
)
!(
)
!(
)
!(
) ....
1
2
1
3
1
4
2
3
4
	
(3.198)

133
Elementary Numerical Integration
The difference between the continuous and discrete responses at t = tn = nT is
	
x t
x
n
t x
n x
n
A
n
A
( )
( )
( )
( )
−
=
−
Φ
Φ
( )
( )
0
0 	
(3.199)
Substituting Φ(n) = Gn from Equation 3.195 along with the fact that x
x
A( )
( )
0
0
=
,
	
x t
x
n
t
G
x
n
A
n
n
( )
( )
[
] ( )
−
=
−
Φ( )
0 	
(3.200)
	
=
+
+
+
+
+






−
I
t A
t A
t A
t A
G
n
n
n
n
(
)
!(
)
!(
)
!(
)
...
1
2
1
3
1
4
2
3
4
n x





( )
0
   	
(3.201)
	
=
+
+
+
+
+








−
I
nT A
nT
A
nT
A
nT
A
G
(
)
(
)
!
(
)
!
(
)
!
...
2
2
3
3
4
4
2
3
4
n x






( )
0
	
(3.202)
Confining our attention to the explicit numerical integrators, Equation 3.202 becomes
	
Explicit Euler:
x t
x
n
I
nT A
nT
A
nT
A
nT
n
A
( )
( )
(
)
(
)
!
(
)
!
(
)
−
=
+
+
+
+
2
2
3
3
2
3
4
4
4
0
!
...
(
)
( )
A
I
TA
x
n
+








−
+






	
(3.203)
	
Improved or modified Euler: x t
x
n
I
nT A
nT
A
nT
n
A
( )
( )
(
)
(
)
!
(
)
−
=
+
+
+
2
2
2
3
3
4
4
2
3
4
1
2
!
(
)
!
...
(
)
A
nT
A
I
TA
TA
+
+











−
+
+









n
x( )
0
		
	
	
(3.204)
The difference x t
x
n
n
A
( )
( )
−
, after a single step (n = 1), is
	
Explicit Euler: x T
x
I
TA
TA
TA
TA
A
( )
( )
!(
)
!(
)
!(
) .
−
=
+
+
+
+
1
1
2
1
3
1
4
2
3
4 ..
(
)
( )






−
+






I
TA x 0
	
	
	
	
(3.205)
	
        
=
+
+






1
2
1
3
1
4
0
2
3
4
!(
)
!(
)
!(
) ...
( )
TA
TA
TA
x
	
(3.206)
Improved or modified Euler: x T
x
I
TA
TA
TA
A
( )
( )
!(
)
!(
)
−
=
+
+
+
+
1
1
2
1
3
2
3
1
4
4
!(
) ...
TA









 −
+
+
I
TA
TA
1
2 (
)2
0








x( )
	
(3.207)

134
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
+
+






1
3
1
4
0
3
4
!(
)
!(
)
...
( )
TA
TA
x
	
(3.208)
The increase in accuracy of the improved and modified Euler integrators compared with the 
explicit Euler is apparent when comparing Equations 3.206 and 3.208.
EXAMPLE 3.10
Consider once again the interacting tanks in Example 3.8. Suppose there is no external input flows 
into either tank, that is, F1(t) = F2(t) = 0, t ≥ 0. The state equations reduce to
	
d
d
d
d
H
t
H
t
AR
AR
A R
R
R
AR
1
2
1 12
1 12
2 12
1
2
1 1
1
1
1






=
−
−
+
(
)
2
2
1
2
R
H
H












	
(3.209)
The initial conditions are H1(0) = 10 ft, H2(0) = 0 ft.
The system parameter values are unchanged, namely
R12 = 2 ft per ft3/min, R2 = 0.5 ft per ft3/min, A1 = 15 ft2, A2 = 10 ft2
The state vector is designated as H t
H t
H t
( )
( )
( )
=






1
2
	
a.	Find the continuous system matrix A and the continuous transition matrix Φ(t).
	
b.	Find the discrete transition matrix Φ(n) for explicit and improved Euler integration.
	
c.	Compare Φ( )t
t
T
| =  and Φ( )
n
n| =1 for T = 0.1, 1, and 2.5.
	
d.	Using the results from Part (c), compare H T( ) and HA( )1  for T = 0.1, 0.5, and 2.5.
	
e.	Find and plot the transient responses for H n
A( ) and H t( ) for T = 0.1, 0.5, and 2.5.
	
a.	The state equation for the autonomous system is
	
d
d
d
d
H
t
H
t
AR
AR
A R
R
R
AR
1
2
1 12
1 12
2 12
1
2
1 1
1
1
1






=
−
−
+
(
)
2
2
1
2
R
H
H












	
(3.210)
	
	
Using the numerical values for the system parameters, A = −
−






0 0333
0 0333
0 05
0 25
.
.
.
.
	
	
Finding the matrix Φ(t) is covered in Chapter 4. The result is
	
Φ( )t
e
e
e
t
t
t
=
+
−
−
−
−
0 0321
0 9679
0 1440
0 1440
0 2574
0 0259
0 2574
.
.
.
.
.
.
.
e
e
e
e
t
t
t
t
−
−
−
−
−
+
0 0259
0 2574
0 0259
0 2574
0 2159
0 2159
0 9679
0
.
.
.
.
.
.
.
..
.
0321
0 0259
e
t
−





	
(3.211)
	
b.	From Equations 3.189 and 3.192
	
Explicit Euler:
( )
Φ n
G
I
TA
T
T
T
T
n
n
=
=
+
=
−
−
(
)
.
.
.
.
1
0 0333
0 0333
0 05
1
0 25






n
	
(3.212)

135
Elementary Numerical Integration
	
Improved Euler:
( )
Φ n
G
I
TA
TA
T
n
n
=
=
+
+






=
−
+
(
)
(
)
.
.
1
2
1
0 0333
0
2
0014
0 0333
0 0047
0 05
0 0071
1
0 25
0 0321
2
2
2
2
T
T
T
T
T
T
T
.
.
.
.
.
.
−
−
−
+






n
	
(3.213)
	
c.	Φ( )t
t
T
| =  and Φ( )
n
n| =1 for T = 0.1, 1 and 2.5 are shown in Table 3.7.
	
d.	From Equations 3.212 and 3.213, HA( )1  and H T( ) are 
	
T = 0.1:
	
Explicit Euler:
( )
H
n
H
A
n
( )
|
( )
.
.
.
.
1
0
0 9967
0 0033
0 0050
0 9750
1
=
=

=
Φ










=






10
0
9 9667
0 0500
.
.
	
(3.214)
	
Improved Euler:
( )
H
n
H
A
n
( )
|
( )
.
.
.
.
1
0
0 9967
0 0033
0 0049
0 9753
1
=
=

=
Φ










=






10
0
9 9668
0 0493
.
.
	
(3.215)
	
Continuous:
( )
H T
t
H
t
T
( )
|
( )
.
.
.
.
=
=




=
Φ
0
0 9967
0 0033
0 0049
0 9753






=






10
0
9 9668
0 0493
.
.
	
(3.216)
	
T = 1:
	
Explicit Euler:
( )
H
n
H
A
n
( )
|
( )
.
.
.
.
1
0
0 9967
0 0333
0 0500
0 7500
1
=
=

=
Φ










=






10
0
9 6667
0 5000
.
.
	
(3.217)
	
Improved Euler:
( )
H
n
H
A
n
( )
|
( )
.
.
.
.
1
0
0 9681
0 0286
0 0429
0 7821
1
=
=

=
Φ










=






10
0
9 6806
0 4292
.
.
	
(3.218)
	
Continuous:
( )
H T
t
H
t
T
( )
|
( )
.
.
.
.
=
=




=
Φ
0
0 9680
0 0290
0 0435
0 7795






=






10
0
9 6797
0 4349
.
.
	
(3.219)
TABLE 3.7
Comparison of Discrete and Continuous Transition 
Matrices for Several Values of T
T
Φ( )
n
n| =1
Φ( )t t
T
=
Explicit Euler
Improved Euler
Continuous
0.1
0 9967
0 0033
0 0050
0 9750
.
.
.
.






0 9967
0 0033
0 0049
0 9753
.
.
.
.






0 9967
0 0033
0 0049
0 9753
.
.
.
.






1
0 9967
0 0333
0 0500
0 7500
.
.
.
.






0 9681
0 0286
0 0429
0 7821
.
.
.
.






0 9680
0 0290
0 0435
0 7795
.
.
.
.






2.5
0 9167
0 0833
0 1250
0 3750
.
.
.
.






0 9253
0 0538
0 0807
0 5755
.
.
.
.






0 9241
0 0593
0 0889
0 5386
.
.
.
.







136
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
T = 2.5:
	
Explicit Euler:
( )
H
n
H
A
n
( )
|
( )
.
.
.
.
1
0
0 9167
0 0833
0 1250
0 3750
1
=
=

=
Φ










=






10
0
9 1667
1 2500
.
.
	
(3.220)
	
Improved Euler:
( )
H
n
H
A
n
( )
|
( )
.
.
.
.
1
0
0 9253
0 0538
0 0807
0 5755
1
=
=

=
Φ










=






10
0
9 2535
0 8073
.
.
	
(3.221)
	
Continuous:
( )
H T
t
H
t
T
( )
|
( )
.
.
.
.
=
=




=
Φ
0
0 9241
0 0593
0 0889
0 5386






=






10
0
9 2408
0 8895
.
.
	
(3.222)
	
	
The results are summarized in Table 3.8.
	
	
As expected, improved Euler integration is more accurate than explicit Euler integra­
tion. Furthermore, at the smallest time step, namely T = 0.1, the improved Euler and 
continuous responses agree to at least 4 places after the decimal point.
	
e.	The discrete response is H n
n H
A
A
( )
( )
( )
= Φ
0 , n = 0, 1, 2, …. However, it is computation­
ally more efficient to use
	
H n
H n n
A
A
(
)
( ),
, , ,...
+
=
=
1
1
0 1 2
Φ( )
	
(3.223)
	
  The continuous state response H t
t x
( )
( ) ( )
= Φ
0  is
	
H t
H t
e
e
e
t
t
1
2
0 2574
0 0259
0 0321
0 9679
0 1440
( )
( )
.
.
.
.
.





=
+
−
−
−0 2574
0 0259
0 2574
0 0259
0 1440
0 2159
0 2159
0 9
.
.
.
.
.
.
.
.
t
t
t
t
e
e
e
−
−
−
−
−
679
0 0321
10
0
0 2574
0 0259
e
e
t
t
−
−
+












.
.
.
	
(3.224)
H n
A( ) for T = 0.1, 1 and 2.5  min and H t( ) are plotted in Figures 3.23–3.28.
Note the moderate error in H2,A(n), early in the response, using explicit Euler integration with 
T = 1  min. As expected, the error is more pronounced when T = 2.5  min. With improved Euler 
integration, the error is moderate, even with the larger step size.
We now focus on the discrete approximation of a second-order system step response using 
modified Euler integration. Starting with
	
d
d
d
d
2
2
2
2
2
t y t
t y t
y t
K
u t
n
n
n
( )
( )
( )
( )
+
+
=
ζω
ω
ω
	
(3.225)
TABLE 3.8
Comparison of Discrete and Continuous 
Responses for Several Values of T
T
HA( )1
H T
( )
Explicit Euler
Improved Euler
Continuous
0.1
9 9667
0 0500
.
.






9 9668
0 0493
.
.






9 9668
0 0493
.
.






1
9 6667
0 5000
.
.






9 6806
0 4292
.
.






9 6797
0 4349
.
.






2.5
9.1667
1.2500






9 2535
0 8073
.
.






9 2408
0 8895
.
.







137
Elementary Numerical Integration
System parameters are ζ = 0.5, ωn = 0.4 rad/s, K = 2. Both initial conditions are zero. Choosing 
states x1 = y and x2 = dy/dt, the state equations for this second-order system are
	
d
d
x
t
x
1
2
=
	
(3.226)
	
d
d
x
t
K
u
x
x
n
n
n
2
2
2
1
2
2
=
−
−
ω
ω
ζω
	
(3.227)
	
y
y
x
1
1
=
=
	
(3.228)
H2,A(n), n = 0, 20, 40, ..., 1000
H2(t), 0 ≤ t ≤ 100
H1,A(n), n = 0, 20, 40, ..., 1000
H1(t), 0 ≤ t ≤ 100
0
0
0.5
0
2.5
7.5
10
5
1
1.5
2
10
20
30
40
50
t (min)
H2 (ft)
H1 (ft)
60
70
80
90
100
0
10
20
30
40
50
Discrete (explicit Euler, T = 0.1 min) and continuous tank
levels
t (min)
60
70
80
90
100
FIGURE 3.23  Discrete (explicit Euler, T = 0.1 min) and continuous responses.
H1,A(n), n = 0, 20, 40, ..., 1000
H1(t), 0 ≤ t ≤ 100
0
2.5
7.5
10
5
H1 (ft)
H2,A(n), n = 0, 20, 40, ..., 1000
H2(t), 0 ≤ t ≤ 100
0
0
0.5
1
1.5
2
10
20
30
40
50
t (min)
H2 (ft)
60
70
80
90
100
Discrete (explicit Euler, T = 1 min) and continuous tank
levels
0
10
20
30
40
50
t (min)
60
70
80
90
100
FIGURE 3.24  Discrete (explicit Euler, T = 1 min) and continuous responses.

138
Simulation of Dynamic Systems with MATLAB® and Simulink®
H2,A(n), n = 0, 20, 40, ..., 1000
H2(t), 0 ≤ t ≤ 100
H1,A(n), n = 0, 20, 40, ..., 1000
H1(t), 0 ≤ t ≤ 100
0
0
0.5
0
2.5
7.5
10
5
1
1.5
2
10
20
30
40
50
t (min)
H2 (ft)
H1 (ft)
60
70
80
90
100
0
10
20
30
40
50
Discrete (explicit Euler, T = 2.5 min) and continuous
tank levels
t (min)
60
70
80
90
100
FIGURE 3.25  Discrete (explicit Euler, T = 2.5 min) and continuous responses.
H1,A(n), n = 0, 20, 40, ..., 1000
H1(t), 0 ≤ t ≤ 100
0
2.5
7.5
10
5
H1 (ft)
H2,A(n), n = 0, 20, 40, ..., 1000
H2(t), 0 ≤ t ≤ 100
0
0
0.5
1
1.5
2
10
20
30
40
50
t (min)
H2 (ft)
60
70
80
90
100
Discrete (improved Euler, T = 0.1 min) and continuous
tank levels
0
10
20
30
40
50
t (min)
60
70
80
90
100
FIGURE 3.26  Discrete (improved Euler, T = 0.1 min) and continuous responses.
H2,A(n), n = 0, 20, 40, ..., 1000
H2(t), 0 ≤ t ≤ 100
H1,A(n), n = 0, 20, 40, ..., 1000
H1(t), 0 ≤ t ≤ 100
0
0
0.5
0
2.5
7.5
10
5
1
1.5
2
10
20
30
40
50
t (min)
H2 (ft)
H1 (ft)
60
70
80
90
100
0
10
20
30
40
50
Discrete (improved Euler, T = 1 min) and continuous
tank levels
t (min)
60
70
80
90
100
FIGURE 3.27  Discrete (improved Euler, T = 1 min) and continuous responses.

139
Elementary Numerical Integration
The matrices A, B, C, and D in the state equations are
	
A
B
K
C
n
n
n
= −
−






=






=[
]
0
1
2
0
1
0
2
2
ω
ζω
ω
,
,
,
D =[ ]
0
	
The discrete system matrix (see Equation 3.193) is
	
G
I
TA
TA
= +
+
(
)
(
)
1
2
2
	
	
= +
−
−





+
−
−






I
T
T
n
n
n
n
0
1
2
1
2
0
1
2
2
2
2
2
ω
ζω
ω
ζω
	
(3.229)
	
=
−
−
(
)
−
−
(
)
−
+
−


1
1
2
1
1
1
2
1
2
4
1
2
2
2
2
(
)
(
) (
)
ω
ζω
ω
ζω
ζω
ω
ζ
n
n
n
n
n
n
T
T
T
T
T
T
T



	
(3.230)
Substituting the numerical values for the system parameters gives G = −






0 980
0 45
0 072
0 80
.
.
.
.
The discrete state is updated using Equation 3.187,
	
x n
Gx n
T ABu n
TBu n
A
A
(
)
( )
( )
(
)
+
=
+
+
+
1
1
2
1
2
2
	
(3.231)
	
= −






+
−
−




0 980
0 45
0 072
0 80
1
2 0 5
0
1
0 16
0 4
2
.
.
.
.
( )
( . )
.
.
x n
A








+






0
0 32 1
0 5
0
0 32 1
.
[ ]
( . )
.
[ ]
	
(3.232)
	
= −






+






0 980
0 45
0 072
0 80
0 040
0 144 1
.
.
.
.
( )
.
.
[ ]
x n
A
                	
(3.233)
H1,A(n), n = 0, 20, 40, ..., 1000
H1(t), 0 ≤ t ≤ 100
0
2.5
7.5
10
5
H1 (ft)
H2,A(n), n = 0, 20, 40, ..., 1000
H2(t), 0 ≤ t ≤ 100
0
0
0.5
1
1.5
2
10
20
30
40
50
t (min)
H2 (ft)
60
70
80
90
100
Discrete (improved Euler, T = 2.5 min) and continuous
tank levels
0
10
20
30
40
50
t (min)
60
70
80
90
100
FIGURE 3.28  Discrete (improved Euler, T = 2.5 min) and continuous responses.

140
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note that u n
( ) and u n
(
(
))
+ 1 2
/
 in Equation 3.231 are both equal to the 1 x 1 vector [1], 
Equation 3.233 is solved recursively in “Ch3_step.m” and x1,A(n) is plotted in Figure 3.29.
The step response for y(t) = x1 (t) is (see Chapter 2, Equation 2.23)
	
x t
K
e
t
t
t
nt
d
n
d
d
1
1
0
( )
cos
sin
,
=
−
+












≥
−ζω
ω
ζω
ω
ω
	
(3.234)
The damped natural ωd frequency is computed from its definition
	
ω
ζ
ω
d
n
=
−
(
)
=
−
(
)
=
1
1
0 5
0 4
3
5
2
2
.
.
rad/s
	
Substituting the system parameter values into the equation for x1(t) and simplifying leads to
	
x t
e
t
t
t
1
5
2 1
3
5
3
3
3
5
( )
cos
sin
/
=
−





+









−












≥
, t
0
	
(3.235)
The discrete response, x1,A(n), with integration step size T = 0.5 s, is an accurate representation 
of the continuous response x1(t) at discrete times tn = nT, n = 0, 1, 2, ….
A sample of the results for the discrete and continuous responses are compiled in Table 3.9.
As a final check on the results, the predicted steady-states (discrete and continuous) are
	
lim
lim
[ ].
x
A
x
x
n
x t
A Bu
u
→∞
→∞
−
( ) =
( ) =
=
1
0
0
1
where
	
	
A
n
n
= −
−





= −
−





= −
0
1
2
0
1
0 4
2 0 5 0 4
0
1
0 1
2
2
ω
ζω
( . )
( . )( . )
. 66
0 4
−






.
	
	
B
K
n
=





=





=






0
0
2 0 4
0
0 32
2
2
ω
( . )
.
	
	
x
x
A(
)
(
)
.
.
.
∞=
∞= −−
−











[ ]=





−
0
1
0 16
0 4
0
0 32 1
2
0
1

	
Continuous and discrete step responses
Modified Euler integration (T = 0.5 s)
0
2
4
6
8
10 12 14
t (s)
16 18 20 22 24 26 28
0
0.25
0.5
0.75
1
1.25
1.5
1.75
2
2.5
2.25
x1,A(n), n = 1, 2, 3, ..., 55
x1(t), 0 ≤ t ≤ 27.5
x1 (ft)
FIGURE 3.29  Continuous and discrete (modified Euler, T = 0.5 s) step responses of a second-order system.

141
Elementary Numerical Integration
in agreement with the graphs of x1(t) and x1,A(n). While x2(t) and x2,A(n) are not plotted, its clear 
that lim
( )
lim
( )
,
n
A
t
x
n
x t
→∞
→∞
=
=
2
2
0 because x t
dy
dt
2( ) =
 which is zero by definition at steady-state.
Our last example is that of a nonlinear second-order system. The equations developed in 
this and previous sections for linear systems are not applicable; however the implementation 
of numerical integration is nonetheless straightforward. A state variable model of the nonlinear 
system is required. The discrete state is updated using the state derivative functions in accordance 
with the desired numerical integration routine.
EXAMPLE 3.11
A simple nonlinear pendulum with damping is shown in Figure 3.30.
The mass of the rod is negligible compared to the mass m of the sphere. Linear damping at 
the fixed end is assumed. The angular position of the rod θ(t) satisfies the nonlinear differential 
equation
	
J
c
mgr


θ
θ
θ
+
+
=
sin
0 	
(3.236)
	
a.	Find the nonlinear state equations when x1 = θ and x2 = θ.
	
b.	Find the difference equations for updating the discrete state components x1,A(n) and 
x2,A(n) when explicit Euler integration is used.
	
c.	Numerical values of the system parameters are m = 0.25 slugs, r = 0.75 ft, c = 0.1 ft lb 
per rad/s. The moment of inertia J = 0.1406 ft lb s2.
Find a suitable value for T and solve the discrete state equations recursively under the follow­
ing conditions:
	
1.	θ(0) = π/6 rad, θ = 0 rad/s.
	
2.	θ(0) = 0 rad, θ = 0.5 rad/s.
Graph x1,A(n) and x2,A(n) for both sets of initial conditions.
TABLE 3.9
Summary of Results for Discrete x1,A(n) and Continuous x1(t)
n
x
n
A
1, ( )
tn
x tn
1(
)
n
x
n
A
1, ( )
tn
x tn
1(
)
0
0
0
0
30
2.0038
15
2.0046
5
0.6904
2.5
0.6806
35
1.9509
17.5
1.9487
10
1.7046
5
1.6989
40
1.9604
20
1.9580
15
2.2447
7.5
2.2487
45
1.9869
22.5
1.9859
20
2.2979
10
2.3062
50
2.0042
25
2.0043
25
2.1434
12.5
2.1492
55
2.0080
27.5
2.0086
m
r
θ
FIGURE 3.30  A simple nonlinear pendulum with damping.

142
Simulation of Dynamic Systems with MATLAB® and Simulink®
a.	


x
x
1
2
=
=
θ
	
(3.237)
	



x
J
mgr
c
2
1
=
=
−
−




θ
θ
θ
sin
	
(3.238)
	
=
−
−
(
)
1
1
2
J
mgr
x
cx
sin
	
(3.239)
	
	 The continuous state equations are
	
x
f x x
x
1
1
1
2
2
=
=
( ,
)
	
(3.240)
	
x
f x x
2
2
1
2
=
( ,
)                        	
(3.241)
	
=
−
−
1
1
2
J
mgr
x
cx
(
sin
)
	
(3.242)
	
b. Using explicit Euler integration, the difference equations for updating the discrete state are
	
x
n
x
n
Tf x
n x
n
A
A
A
A
1
1
1
1
2
1
,
,
,
,
(
)
( )
[
( ),
( )]
+
=
+
	
(3.243)
	
=
+
x
n
Tx
n
A
A
1
2
,
,
( )
( ) 	
(3.244)
	
x
n
x
n
Tf x
n x
n
A
A
A
A
2
2
2
1
2
1
,
,
,
,
(
)
( )
[
( ),
( )]
+
=
+
	
(3.245)
	
=
−
+
[
]
x
n
T
J mgr
x
n
cx
n
A
A
A
2
1
2
,
,
,
( )
sin
( )
( )
	
(3.246)
	
c.	Choosing T = 0.0025 s, a recursive solution of Equations 3.244 and 3.246 is easily 
obtained. The results for
	
1.	 θ(0) = π/6 rad, θ = 0 rad/s
	
2.	 θ(0) = 0 rad, θ = 0.5 rad/s
	
	 are shown in Figures 3.31 and 3.32.
Exact solutions for the state components are not easily obtained owing to the nonlinearity in 
Equation 3.236. A “quasi exact” solution could be found by choosing an exceedingly small value 
of T and plotting the results on the same graph for comparison with the discrete approximations 
shown in Figures 3.31 and 3.32. It’s left as an exercise to show that the discrete and “quasi exact” 
responses are in basic agreement.
Looking at the graphs in Figures 3.31 and 3.32, we might be inclined to believe that the inte­
gration step size T = 0.0025 s is a “one size fits all” value for simulating the pendulum dynamics. 
However, Figure 3.33 will quickly dispel this thinking. The results shown in Figure 3.33 corre­
spond to an undamped pendulum (c = 0) with the same initial conditions as in part (c) and the 
same step size of 0.0025 s. Every 20th point of the discrete state responses are plotted.
Clearly, explicit Euler integration using a step size of T = 0.0025 s is not advisable since the 
discrete state responses x1,A(n) and x2,A(n) bear no resemblance whatsoever to the real (continu­
ous) system responses. A valuable lesson of this example is the need to exercise caution when 
choosing the integration step for numerical integration. If we are not careful, the numerical 
integrators may be “unstable” under certain conditions. This point is revisited in detail in 
Chapter 8.

143
Elementary Numerical Integration
EXERCISES
3.25	 By trial and error, determine an acceptable value for the step size T in simulating the nonlin­
ear pendulum response in Example 3.11 using improved Euler integration. The initial condi­
tions are x
x
1
2
0
0
0 5
( )
( )
.
=
=
π/6 rad, 
 rad/s. Plot the discrete state x
n
A
1, ( ), n = 0, 1, 2, …, nf  where 
n T
f  = 10 s for each value of T.
3.26	 Repeat Problem 3.25 using trapezoidal integration instead of imroved Euler.
3.27	 Choose a very small time step, e.g. T = 0 0001
.
 s in Example 3.11 to obtain the “quasi exact” 
solution and plot the results on the same graph with the discrete responses in Figures 3.31 and 
3.32. Comment on the results.
3.28	 The nonlinear pendulum model in Example 3.11 is often approximated by
	
J
c
mgr


θ
θ
θ
+
+
= 0 	
0
10
9
8
7
6
5
4
3
2
1
0
10
9
8
7
6
5
4
3
2
1
t (s)
–4
–2
0
0
0.3
0.6
Discrete nonlinear damped pendulum response
(T = 0.0025 s)
–0.6
–0.3
x1,A(n) (rad)
x1,A(0) = x(0) = p/6 rad
x2,A(0) = dx(0)/dt = 0 rad/s
c = 0.1 ft lb/rad/s
x2,A(n) (rad/s)
2
4
FIGURE 3.31  Damped pendulum response using explicit Euler (T = 0.0025 s) x1(0) = π/6 rad, x2(0) =​
0 rad/s.
0
10
9
8
7
6
5
4
3
2
1
0
10
9
8
7
6
5
4
3
2
1
t (s)
Discrete nonlinear damped pendulum response
(T = 0.0025 s)
x1,A(n) (rad)
x2,A(0) = dx(0)/dt = 0.5 rad/s
x1,A(0) = x(0) = 0 rad
c = 0.1 ft lb/rad/s
x2,A(n) (rad/s)
–0.5
–0.25
–0.08
–0.04
0
0.04
0.08
0.25
0.5
0
FIGURE 3.32  Damped pendulum response using explicit Euler (T = 0.0025 s) x1(0) = 0 rad, x2(0) = 0.5 rad/s.

144
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
when the angular displacement θ is small, i.e. the small angle approximation θ
θ
= sin  is 
used resulting in the linear differential equation model above. Compare the results of simu­
lating the linear and nonlinear models using modified Euler integration. The initial angle 
θ( )
0
5
=  deg and the initial angular velocity θ( )
0
0
=  deg/s.
3.29	 A logistic population growth model
	
d
d
P
t
cP P
P
m
=
−
(
)
	
	
is to be simulated in order to approximate the population P(t) for a period of time.
	
a.	 Find the difference equation for P n
A( ) intended to approximate P(t) based on the use of the 
following numerical integrators
	
i.	 Explicit Euler (T = 0.25 yr)
	
ii.	 Trapezoidal (T = 0.5 yr)
	
iii.	 Improved Euler (T = 0.5 yr)
	
b.	 Fill in Table E3.29 with the simulated populations based on the three numerical integrators 
and the exact solution. Note, c = 1.25 × 10−9, Pm = 25 million and P(0) = 5 million. The 
exact solution is given by
	
P t
P P
P
P
P
e
t
m
m
cP t
m
( )
( )
( )
[
( )]
=
+
−
≥
−
0
0
0
0
	
TABLE E3.29
t (years)
0
50
100
150
200
250
Explicit Euler
5.0000
Trapezoidal
5.0000
Improved Euler
5.0000
Exact
5.0000
3.30	 The tank in Figure E3.30 has a brine solution flowing into it. The solution is stirred well enough 
so that the concentration of salt in the tank is uniform.
Discrete nonlinear undamped pendulum response
(T = 0.0025 s)
x1,A(n) (rad)
x2,A(0) = dx(0)/dt = 0 rad/s
x1,A(0) = x(0) = p/6 rad
c = 0 ft lb/rad/s
x2,A(n) (rad/s)
0
2
4
6
8
10
12
14
t (s)
16
18
20
0
2
4
6
8
10
12
14
16
18
20
–10
–5
–2
–1
0
1
2
0
5
10
FIGURE 3.33  Undamped pendulum response using explicit Euler (T = 0.0025 s) x1(0) = π/6 rad, 
x2(0) = 0 rad/s.

145
Elementary Numerical Integration
where,
	
	
c1 is the brine concentration (lb/gal)
	
	
F1 is the brine flow (gal/min)
	
	
c is the salt concentration in tank (lb/gal)
	
	
Q is the quantity of salt in tank (lb)
	
	
H is the liquid level in tank (ft)
	
	
V is the volume of liquid in tank (gal)
	
	
F0 is the flow rate from tank (gal/min)
	
	
The mathematical model consists of the following equations.
	
d
d
d
d
Q
t
c F
cF
c
Q
V
V
AH
A H
t
F
F
F
H
=
−
=
=
+
=
=
1 1
0
0
1
0
1 2
,
,
/
α
	
	
	
The system baseline parameter values are A = 25 ft2, α = 0.75 gal/min per ft1/2.
	
	
(Note: 1 ft3 of water is roughly 8.3 gal)
	
a.	 Draw a simulation diagram of the system.
	
b.	 Choose the state variables as x1 = Q, x2 = H and the outputs y1 = c, y2 = Q and y3 = V. 
Write the state equations in the form
	


x
f x x c F
y
g x x c F
x
f
x x c F
1
1
1
2
1
1
1
1
1
2
1
1
2
2
1
2
1
1
=
=
=
(
,
,
,
),
(
,
,
,
)
(
,
,
,
),
y
g x x c F
y
g x x c F
2
2
1
2
1
1
3
3
1
2
1
1
=
=
(
,
,
,
)
(
,
,
,
) 	
	
c.	 Find expressions for the steady-state values of the states x
x
1
2
(
)
(
)
∞
∞
 and 
 and the outputs 
y
y
y
1
2
3
(
),
(
)
(
)
∞
∞
∞
 and 
 assuming c1 and F1 are constant.
	
d.	 The tank is initially filled with 100 gal of water (no salt). Brine starts flowing in to the tank 
at a rate of 2 gal/min. The salt concentration of the brine is 0.25 lb/gal. Both the flowrate 
and salt concentration of the brine flow remain constant. Using explicit Euler and Improved 
Euler integration, find the discrete state equations
	
x
n
f
x
n u n
y
n
g x
n u n
A
A
A
A
(
)
[(
( ), ( )]
( )
[(
( ), ( )]
+
=
=
1
	
	
which are used to obtain an approximate solution for the continuous states and outputs.
	
e.	 Solve the discrete state equations recursively for the discrete states x
n
x
n
A
A
1
2
,
,
( ),
( ) and out­
puts y
n
y
n
A
A
1
2
,
,
( ),
( ) andy
n
A
3, ( ). Graph the transient responses. Comment on the values of T 
used for each type of numerical integrator.
FIGURE E3.30

146
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f.	 Compare the steady-state results obtained in part (e) with the predicted values from part (c). 
Comment on the results.
3.8  CASE STUDY: VERTICAL ASCENT OF A DIVER
As a diver submerges, pressure increases in direct proportion to the depth. This pressure is caused 
by the combined weight of the surrounding water and the atmosphere above, and is called ambient 
pressure. At a depth of 70 feet, ambient pressure is equal to more than three atmospheres (three 
times the atmospheric pressure at sea level). In order to overcome this pressure and fill his lungs 
with vital air, the diver must breathe air supplied to him at the ambient pressure.
The air is a mixture of approximately 20 percent oxygen and 80 percent inert nitrogen. The oxy­
gen component of the air is used by the body, and waste carbon dioxide is exhaled. Under normal 
atmospheric conditions, the nitrogen component of the mixture has no effect. But under pressure, it 
dissolves in the blood stream and in tissues and remains there after the diver begins to ascend. If the 
diver ascends too quickly, the nitrogen expands and equalizes with the decreasing ambient pressure. 
Nitrogen bubbles form in the blood stream and the tissues leading to an extremely painful condition 
known as Decompression Sickness (DCS), more commonly known as the “bends” which can cause 
paralysis and even death.
The focus of this study is an investigation of the cable forces that can be used to bring a diver 
safely to the surface. The mathematical model governing the diver’s ascent consists of differential 
equations relating the forces acting on the diver and the dynamics of the diver’s internal body pres­
sure [Klamrock]. The following notation is used:
h = h(t) is the depth of diver below sea level, ft
h
h
t
= d /d  is the velocity of diver, ft/s
h
h
t
= d
/d
2
2 is the acceleration of diver, ft/s2
p = p(t) is the internal body pressure of diver, relative to atmospheric pressure at sea level, 
lb/ft2
p
p
t
= d /d  is the rate of change of diver’s internal body pressure, lb/ft2 per s
fC = fC(t) external cable force on diver, lb
fD = fD(t) is the drag force on diver, lb
fB is the buoyant force on diver, lb
m is the mass of diver, slugs
W is the weight of diver and gear at sea level, lb
V is the volume of diver and gear, ft3
K is the body tissue constant of diver, s−1
µ is the drag coefficient of diver under water, lb s/ft
γ is the weight density of water (62.4 lb/ft3)
g is the gravitational constant (32.2 ft/s2)
The forces acting on the diver are a cable force fC, a drag force fD, a buoyant force fB, and the 
diver’s weight W. From Newton’s second law
	
mh
W
f
f
f
B
D
C
=
−
+
−
	
(3.247)
with h and all forces measured positive in the downward direction. The drag force is modeled by
	
f
h
D = −µ 
	
(3.248)

147
Elementary Numerical Integration
The buoyant force is equal to the weight of water displaced by the diver and gear
	
f
V
B = γ
	
(3.249)
Combining Equations 3.247, 3.248 and 3.249 gives
	
W
g h
h
W
V
fC


+
=
−
−
µ
γ
(
)
	
(3.250)
The right-hand side of Equation 3.250 is the difference between the diver’s effective weight in the 
water, (W − γV), and the cable force fC. Denoting the net cable force by
	
f
W
V
f
N
C
=
−
−
(
)
γ
	
(3.251)
leads to the second-order differential equation
	
W
g h
h
fN


+
=
µ
	
(3.252)
The rate of change of the diver’s internal body pressure is assumed proportional to the difference 
between the local underwater (ambient) pressure and the diver’s internal body pressure. That is,
	
p
K
h
p
=
−
(
)
γ
	
(3.253)
We are interested in h, the diver’s depth below the surface, and Δp, the difference between the 
internal body pressure of the diver and the ambient underwater pressure. The dynamic system under 
investigation is portrayed in Figure 3.34.
The third order linear dynamic system can be modeled in state variable form. The state variables 
are chosen as
	
x
h
x
h
x
p
1
2
3
=
=
=






	
(3.254)
Solving for the state derivatives
	


x
h
x
1
2
=
=
	
(3.255)
	



x
h
g
W h
g
W fN
2 =
= −
+
µ
	
(3.256)
	
= −
+
µg
W x
g
W fN
2
	
(3.257)
diver
fN
h
∆p
FIGURE 3.34  Dynamic system with input fN and outputs h and Δp.

148
Simulation of Dynamic Systems with MATLAB® and Simulink®
	


x
p
K x
Kx
3
1
3
=
=
−
γ
	
(3.258)
The outputs are expresed in terms of the states as
	
y
h
x
1
1
=
=
	
(3.259)
	
y
p
h
x
x
2
3
1
=
−
=
−
γ
γ
	
(3.260)
The complete state equations are
	



x
x
x
g
W
K
K
x
x
1
2
3
1
2
0
1
0
0
0
0






=
−
−






µ
γ
x
g
W
fN
3
0
0






+






[
]
	
(3.261)
	
y
y
x
x
x
1
2
1
2
3
1
0
0
0
1





= −












γ
	
(3.262)
The state equation matrices are given by
	
 
   
A
g
W
K
K
B
g
W
=
−
−






=






0
1
0
0
0
0
0
0
µ
γ
,

= −






=






,
,
   
   
C
D
1
0
0
0
1
0
0
γ
	
(3.263)
In order to obtain a numerical solution to the state equations, the initial conditions, or initial state 
x(0), must be known. Assuming the diver is initially in equilibrium with his or her surroundings 
leads to
	
h
x
( )
( )
0
0
0
2
=
=
	
(3.264)
	
p
K
h
p
( )
[
( )
( )]
0
0
0
=
−
γ
	
(3.265)
	
      =
−
K
x
x
[
( )
( )]
γ 1
3
0
0
	
(3.266)
Setting p( )
0
0
=
 in Equation 3.266 and solving for x3 (0) gives
	
x
x
3
1
0
0
( )
( )
= γ
	
(3.267)
Initial depth x1(0) is arbitrary; however, to be in equilibrium, the diver’s effective weight in the 
water, W − γV, must be counterbalanced by the initial cable force fC(0). Therefore,
	
f
W
V
c( )
0 =
−γ
	
(3.268)

149
Elementary Numerical Integration
Note, the initial net force to maintain the diver in equilibrium is
	
f
W
V
f
N
c
( )
(
)
( )
0
0
0
=
−
−
=
γ
	
(3.269)
A simulation of the diver’s ascent subject to a constant cable force in excess of fC(0) in Equation 
3.268 is needed. The discrete state equation depends on the choice of numerical integrator. Using 
trapezoidal integration for now and leaving the other discrete integrators for the exercise problems, 
the discrete state is updated according to
	
x
n
I
TA
I
TA x
n
I
TA
A
A
(
)
( )
+
=
−






+






+
−
−
1
1
2
1
2
1
2
1
2
1






+
+
−1
1
TB u n
u n
[ ( )
(
)]
	
(3.270)
With a constant cable force f
f
C
C
=
, t ≥ 0, the input fN is likewise constant. That is
	
f
f
W
V
f
t
N
N
c
=
=
−
−
≥
(
)
,
γ
  
0 	
(3.271)
The second term in Equation 3.270 can be simplified as follows.
	
1
2
1
2
1
1
2
1
2
1
1
I
TA
TB u n
u n
I
TA
−






+
+
=
−






−
−
[ ( )
(
)]
TB f
f
N
N
[
]
+
	
(3.272)
	
=
−






−
T I
TA
B fN
1
2
1
	
(3.273)
Baseline numerical values for the system parameters are K = 0.2, µ = 6.5, W = 300, V = 3 and 
the step size T = 0.25 s. Evaluating matrices A and B in Equation 3.263,
	
A
B
=
−
−






=



0
1
0
0
0 6977
0
12 48
0
0 2
0
0 1073
0
.
.
.
,
.
   



	
Combining Equations 3.270 and 3.273 along with the values for matrices A and B results in
	
x
n
x
A
A
(
)
+
=






1
1
0.2299
0
0
0.8396
0
3.0439
0.3500
0.9512
( )
n
fN
+






0.0031
0.0247
0.0047
	
(3.274)
Before simulating the diver’s ascent to the surface, we can make the cable force equal to its equi­
librium value in Equation 3.268 and observe whether the system remains in equilibrium. Setting 
fC = W − γV = 112.8 lbs makes the net force fN = 0. Additionally, we must remember to make 
x3(0) = γx1(0) where x1(0) is the arbitrary initial depth.
Figure 3.35 shows the results of solving Equation 3.274 under these conditions with the diver 
starting at 500 ft below the surface. As expected, the system remains in an equilibrium state.
	
f
W
gV
lb
C =
−
=  
 
112 8.
	

150
Simulation of Dynamic Systems with MATLAB® and Simulink®
Suppose the cable force is increased by 10% above its equilibrium value to 1.1 × (W − γV) = 
1.­1 × 112.8 = 124.08 lb. The Matlab script file “Ch3_CaseStudy.m” generates a recursive solu­
tion to Equation 3.274. The results are plotted in Figure 3.36 for a duration of time sufficient to 
bring the diver to the surface.
The integration step size T could be varied an order of magnitude in either direction and the 
results compared to those in Figure 3.36 to determine if the current value T = 0.25 s needs to be 
adjusted.
Since the system dynamics are linear, analytical solutions for the continuous state variables 
in Equation 3.261, with constant net force f
f
N
N
=
 are easily determined and given in Equations 
3.275–3.277. The derivation is left as an exercise problem at the end of the section.
	
x t
h
gf
W t
e
N
t
1
0
1
( )
( )
=
+
−−






−
α
α
α
	
(3.275)
0
0
0
0
1
2
3
4
5
10
200
x1 (ft)
x2 (ft/s)
x3 (lb/ft2)
400
600
10
9
8
7
6
5
t (s)
x1(t)
x1(n), n = 0, 1, 2, ...
x2(t)
x2(n), n = 0, 1, 2, ...
x3(t)
x3(n), n = 0, 1, 2, ...
4
3
2
1
0
10
9
8
7
6
5
4
3
2
1
0
×104
10
9
8
7
6
5
4
3
2
1
Discrete and continuous state varaibles for diver
at equilibrium
FIGURE 3.35  System at equilibrium: x1(0) = 500 ft, x2(0) = 0 ft/s, x3(0) = γx1(0) = 3120 lb/ft2 fc = W −
γV = ​112.8 lb.
600
400
200
0
0
0
1
2
3
4
–1
–2
x1 (ft)
x2 (ft/s)
x3 (lb/ft2)
t (s)
x1(t)
x2(t)
x1(n), n = 0, 25, 50, ...
x3(t)
x3(n), n = 0, 25, 50, ...
x2(n), n = 0, 25, 50, ...
0
50
100
150
200
250
300
0
50
100
150
200
250
300
0
50
100
150
200
250
300
×104
Discrete and continuous state variables for diver’s
ascent
FIGURE 3.36  State variables for diver’s ascent: fC = 1.1 × (W − γV) = 124.08 lb.

151
Elementary Numerical Integration
	
x t
g f
W
e
N
t
2
1
( ) =
−
(
)
−
α
α
	
(3.276)
	
x t
h
gf
W t
K
e
K
e
K
K
N
t
Kt
3
0
1
1
( )
( )
(
)
(
)
=
+
+
−
(
)
−
−
−
(
)
−





−
−
γ
α
α α
α
α
α











	
(3.277)
where the constant α = µg/W. The analytical solutions for the states are plotted in Figure 3.36 along 
with the discrete states. There is close agreement between the numerical (discrete) and analytical 
(continuous) solutions for each of the state variables. Notice that after about 6 s, the diver is surfac­
ing at a constant velocity and both depth and internal body pressure are decreasing linearly with 
time.
Equation 3.275 can be used to estimate the time required for the diver to surface. If the initial 
depth is great enough, the exponential term e−αt in the transient component has died out when the 
diver surfaces. Consequently, the time to surface, tS, can be estimated from
	
0
0
1
=
+
−






h
gf
W t
N
S
( )
α
α 	
(3.278)
	
t
W
g
h
f
S
N
=
−
µ
µ ( )
0
	
(3.279)
	
           
=
−
−
−
W
g
h
W
V
fC
µ
µ
γ
( )
(
)
0
	
(3.280)
	
                 
=
−
−
300
6 5 32 2
6 5 500
112 8
1 1 112 8
. (
. )
. (
)
.
. (
. ) 	
	
= 289 6.  s 	
in agreement with the graphs of x1,A(n) and x1(t) in Figure 3.36.
We have yet to look at the differential pressure Δp = p − γh, the second component of the output 
vector y2 in Equation 3.260. The discrete output yA n
( ) is given by
	
y
n
Cx
n
Du n
A
A
( )
( )
( )
=
+
	
(3.281)
The second component of yA n
( ) reduces to
	
y
n
C
x
n
C
x
n
C
x
n
A
A
A
A
2
2 1 1
2 2
2
2 3
3
,
,
,
,
,
,
,
( )
( )
( )
( )
=
+
+
 	
(3.282)
since the direct transmission matrix D is zero. Substituting the components of C in Equation 3.263 
into Equation 3.282 gives
	
y
n
x
n
x
n
A
A
A
2
1
3
,
,
,
( )
( )
( )
=−
+
γ
	
(3.283)

152
Simulation of Dynamic Systems with MATLAB® and Simulink®
We are now in a position to investigate the conditions necessary for a safe ascent. Suppose a safe 
ascent implies the differential pressure Δp is never to exceed a value denoted by Δpmax. The maxi­
mum cable force for a safe ascent, (fC)max, can be obtained by initializing the constant cable force fC 
slightly more than the diver’s effective weight, Weff . That is, f
W
C
eff
>
, where
	
W
W
V
eff =
−γ
	
(3.284)
The diver’s ascent is then simulated and if the maximum differential pressure during the 
ascent is less than Δpmax, the ascent is simulated again with a larger cable force. The reverse is 
true if the maximum differential pressure exceeds Δpmax. The process is repeated until the cable 
force producing a maximum differential pressure Δpmax (within some tolerance) is obtained. 
Figure 3.37 shows the result of simulating several ascents to find (fC)max for the case when 
Δpmax = 4 psi.
The discrete differential pressure responses are labeled and graphed as if they were continuous; 
however the points along each plot were obtained by recursive solution of difference equations. 
Note the dramatic increase in ascent time as the cable force approaches the equilibrium value 
of 112.8 lb.
A second approach to finding the maximum cable force, (fC)max, for a safe ascent is based on 
analytical solutions for the state variables x1(t) and x3(t). From Equations 3.275 and 3.277, the steady-
state responses, after the transient components have died out, are
	
x t
h
g f
W t
ss
N
1
0
1
( )
( )
=
+
−






α
α 	
(3.285)
	
x t
h
gf
W t
K
K
K
K
ss
N
3
0
( )
( )
(
)
(
)
=
+
+
−
−
−












γ
α
α α
α
α
	
(3.286)
t (s)
Differential pressure ∆p(t), (psi)
∆pmax = 4 psi
0
0
0.5
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
150
300
450
600
750
Search for maximum cable force for safe ascent
900
1500
1350
1200
1050
fC = 125 lbs
fC = 123 lbs
fC = 121 lbs
fC = 119 lbs
fC = 117 lbs
fC = 115 lbs
FIGURE 3.37  Differential pressure during ascent of diver for different cable forces.

153
Elementary Numerical Integration
The differential pressure at steady-state is
	
∆p
x t
x t
ss
ss
ss
=
−
3
1
( )
( )
γ
	
(3.287)
Substituting Equations 3.285 and 3.286 into Equation 3.287 and simplifying results in
	
∆p
f
K
ss
N
=−γ
µ
	
(3.288)
The cable force (fC)max for which Δpss = Δpmax is obtained by replacing Δpss with Δpmax and solv­
ing for  fN  resulting in
	
f
K
p
N =−µ
γ ∆max
	
(3.289)
Replacing  fN  with (W − γV) − (fC)max and solving for (fC)max,
	
(f
W
V
K
p
C)
(
)
max
max
=
−
+
γ
µ
γ ∆
	
(3.290)
	
                   
=
−
+
×
[
. ( )]
. ( . )(
)
.
300
62 4 3
6 5 0 2 4 144
62 4
	
	
=124 8.  lb        	
in agreement with the response shown in Figure 3.37.
A final observation about the diver model is relevant. The coupling between the second-order dif­
ferential equation for h in Equation 3.250 and the first-order differential equation for p in Equation 
3.253 is one way. That is, the diver’s internal pressure p does not affect the depth h, and a second-
order state model is suitable if the pressure is not of interest. On the other hand, the depth h influ­
ences the diver’s internal pressure p, and hence Equation 3.253 cannot be solved independently of 
Equation 3.250.
EXERCISES
3.31	 A simple study can be conducted to find the “best” value for T, the integration step size. Since 
a graph of the analytical solutions for the continuous state variables and the discrete state 
approximation are in close agreement (Figure 3.36) when T = 0.25 s, we would like to know 
if a larger value of T can be used without sacrificing significant accuracy. With this in mind, 
for T = 0 5 1 2 4
. , , , , ...
	
a.	 Find the discrete state equations resulting from the use of trapezoidal integration.
	
b.	 Solve the resulting discrete state equations for the discrete state vector x
n
A( ) = 
[
( ),
( ),
( )]
,
,
,
x
n x
n x
n
A
A
A
T
1
2
3
 and plot the results on the same graph as the continuous response 
similar to Figure 3.36. Stop when a noticeable difference between x
n
A( ) and x nT
(
) occurs.
3.32	 Using the baseline conditions for the system parameters unless stated otherwise,
	
a.	 Find the cable force ( fc)max to bring up divers (plus gear) weighing 200, 250, 300, 350 and 
400 lbs while not exceeding a maximum differential pressure ΔPmax = 4 psi. Enter the 
results in Table E3.32. Prepare a graph of ( fc)max vs W. Comment on the results.

154
Simulation of Dynamic Systems with MATLAB® and Simulink®
TABLE E3.32
W (lbs)
200
250
300
350
400
( fc)max
ts(s)
	
b.	 In part (a) record the time required for the diver to surface, ts and enter in Table E3.32. Plot 
a graph of ts vs W.
	
c.	 Suppose the volume V of the diver and gear vary with the diver’s weight according to 
V
W
= +
1
150
(
).
/
 Repeat Parts (a) and (b).
3.33	 For the diver with baseline conditions, find the “best” step size T for simulating the diver’s 
velocity during ascent from 250 ft using
	
a.	 Explicit Euler integration
	
b.	 Improved Euler integration.
	
c.	 Modified Euler integration.
Specify your criterion for determining the “best” step size.
3.34	 Derive the analytical solutions for the continuous states given in Equations 3.275 through 3.277.
		
Hint: It may be necessary to defer this problem until after reading Chapter 4, Section 4. 2 on 
The Laplace Transform.
3.35	 Using the baseline conditions given for the diver, simulate the response using explicit Euler 
integration when the constant cable force is 15% below the equilibrium value. Prepare plots of 
the continuous and discrete states for a duration of 100 s.
3.36	 It’s been suggested that a sinusoidal cable force f t
F
A
t P
c( )
sin(
)
=
+
2π /
 is more effective in 
bringing the diver to the surface safely, i.e. ∆
∆
p t
P
t
( )
,
≤
≥
max  
0 and in less time compared 
to a constant force. Using the baseline system parameters, choose a numerical integration 
method to approximate the system dynamics with the suggested type of cable force. That is, 
experiment with different values of F , A, and P and comment on the validity of the claim about 
using the sinusoidal cable force.
3.37	 For a diver with system parameters W
K
V
=
=
=
=
300
0 2
6 5
3
,
. ,
. ,
 
 
 
µ
	
a.	 Starting with Equation 3.290, plot the inverse relationship, that is Δpmax vs. (
)
.
max
fc
	
b.	 Simulate several diver ascents from different initial depths using constant cable forces and 
compare the simulated maximum differential pressure with the values from the graph.
3.38	 A 250 lb diver with gear weighing another 100 lbs is 400 ft below the surface in equilibrium 
with his surroundings. A winch cable begins bringing him to the surface using a constant 
force.
	
a.	 Using the analytical solutions for the continuous state variables, find the required force 
needed for the diver to be ascending at a constant rate of 1.5 ft/s (
.
h =−1 5 ft/s) when he 
reaches the surface. The remaining parameter values are K =
=
0 25
5
.
,
,
 µ
 V = 3 25
.
.
	
b.	 Simulate the diver ascent using the force determined in part (a) to verify the result. Use 
Euler integration with step size T = 0 1.  s.
	
c.	 Plot the discrete state variables for the simulation in part (b).
3.39	 A diver initially in equilibrium at a depth of 350 ft is ascending to the surface under the influ­
ence of a constant cable force equal to 10% greater than the equilibrium force. The cable snaps 
when the diver is 150 ft from the surface. Simulate the diver’s depth, velocity and differential 
pressure for 120 s. Use any of the numerical integrators presented. System parameters are 
W
K
=
=
325
0 23
,
.
,
 
 µ = 4 8. , V = 3 15
.
.
3.40	 A diver initially in equilibrium at a depth of 150 ft is ascending to the surface under the influ­
ence of a constant cable force equal to 10% greater than the equilibrium force. The cable snaps 
when the diver is 50 ft from the surface. Simulate the diver’s depth, velocity, and differential 
pressure for 120 s. Use any of the numerical integrators presented. System parameters are 
W = 325, K = 0.23, µ = 4.8, and V = 3.15.

155
Linear Systems Analysis
4.1  INTRODUCTION
Chapter 2 introduced first- and second-order linear time-invariant (LTI) systems in a very superficial 
way. A general form for the family of step responses, in the absence of input derivative terms, was 
presented for both types of systems. Alternate representations of LTI systems, namely, ­simulation 
diagrams and state-space models, were also discussed.
Chapters 1 and 3 outlined methods for transforming continuous-time differential equation 
­models into discrete-time system models comprising difference equations. In doing so, the grounds 
were laid for the foundation of continuous-time system simulation.
A natural question that arises is “How accurate is the simulation?” In the case of continuous-time 
systems with LTI models, it helps to have a solid grasp of how LTI systems respond to elementary 
inputs such as a step, polynomials, exponentials, and periodic functions. The analytical solutions 
serve as a benchmark in comparing different simulation (discrete-time system) models.
This chapter begins with a review of the Laplace transformation and its use in finding the free 
and forced response of continuous-time LTI system models. The counterpart of the Laplace trans­
form for discrete-time systems is the z-transform, and it is covered in the later sections along with 
examples of how it facilitates the process of finding the response of discrete-time LTI systems. 
Time and frequency domain characteristics of continuous- and discrete-time LTI system models are 
­discussed. Mappings from the s-plane to the z-plane corresponding to specific numerical integrators 
are introduced as a quick way of obtaining discrete-time model approximations of continuous-time 
systems.
4.2  LAPLACE TRANSFORM
The Laplace transform, as the name implies, is a transformation of functions between two domains. 
The independent variables in the two domains are commonly denoted “t” and “s” as shown in 
Figure  4.1, and the domains are referred to as the time domain (or t-domain) and s-domain, 
respectively.
A class of functions f(t) defined for t ≥ 0 in the time domain are transformed into functions F(s) 
in the s-domain according to
	
F s
f t
t
st
( )
( )e
=
−
∞
∫
d
0
	
(4.1)
Equation 4.1 is the definition of the one-sided Laplace transform of a function f(t). The definition 
of f(t) for t < 0 is irrelevant since the interval of integration in Equation 4.1 is 0 to ∞. It is valid 
for functions f(t), which are said to be of exponential order, that is, functions that are bounded by 
increasing exponentials as t → ∞, assuring the convergence of the integral in Equation 4.1. This 
includes all real-world signals as well as certain functions for which limt→∞ f(t) = ∞.
The notation ℒ{f (t)} is interpreted as the Laplace transform of f(t), that is, the function of “s” 
resulting from evaluating the integral in Equation 4.1. The function f(t) and its Laplace transform 
F(s) are referred to as a Laplace transform pair using the symbol ⇔ with the function f(t) on one side 
and its transform F(s) on the other side. To illustrate, consider the unit step function û(t) that equals 
1 for t ≥ 0 and zero for t < 0.
4

156
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
ˆ( )
{ˆ( )}
ˆ( )e
e
e
U s
L u t
u t
t
t
s
s
st
st
st
=
=
=
= −
=
−−



−
∞
−
∞
−
∞
∫
∫
d
d
0
0
0
1
0
1



= 1
s
	
(4.2)
The contribution from the upper limit, e−s(∞) in Equation 4.2, is zero provided s > 0. More 
­specifically, Re(s) > 0 because s is a complex variable s = σ + jω. Therefore,
	
ℒ{
}
Re( )
0
ˆ( )
,
u t
s
s
=
>
1
	
(4.3)
indicating the integral in Equation 4.2 converges so long as the complex variable s is located in 
the right half of the complex plane. Note that the constant function u(t) = 1, −∞ < t < ∞ is identi­
cal to û(t) for t ≥ 0 and consequently has the same Laplace transform.
Henceforth, we shall omit reference to the region of convergence for the integral in Equation 
4.1 and simply be concerned with the result. The region of convergence is only of interest when we 
perform the inverse Laplace transformation using an integration formula to transform F(s) into f(t). 
Returning to the example of the unit step function, the Laplace transform pair is
	
ˆ( )
u t
s
⇔1
	
(4.4)
The Laplace transform of other continuous-time functions f(t), t ≥ 0 is handled in the same 
­manner. For example, the exponential function f(t) = eat has a Laplace transform
	
F s
f t
t
t
s
a
at
at
st
s
a t
( )
{ ( )}
{e }
e
e (
)
=
=
=
=
=
−
−
∞
−
−
∞
∫
∫
ℒ
ℒ
e
d
d
0
0
1
	
(4.5)
Additional time signals of importance are f(t) = rn (n = 0, 1, 2, …) along with the trigonometric 
functions f(t) = cos ωt and f(t) = sin ωt. Applying the definition for the Laplace transform of f(t) in 
Equation 4.1 produces the results shown in Table 4.1.
4.2.1  Properties of the Laplace Transform
Certain properties of the Laplace transform enable F(s) to be determined without resorting to the 
definition in Equation 4.1. Several of these properties are presented without proof. The first is the 
linearity property, which states that the Laplace transform of a linear combination of continuous-
time functions is equal to the same linear combination of respective transforms.
P1:
	
Given
and
ℒ
ℒ
{
}
{
}
( )
( )
( )
( )
f t
F s
f t
F s
1
1
2
2
=
=
	
	
⇒
+
=
+
=
+
ℒ
ℒ
ℒ
{
( )
( )}
{ ( )}
{ ( )}
( )
( )
a f t
a f t
a
f t
a
f t
a F s
a F s
1 1
2 2
1
1
2
2
1 1
2
2
	
(4.6)
FIGURE 4.1  The Laplace transform ℒ{f(t)} = F(s) and its inverse f(t) = ℒ−1 {F(s)}.

157
Linear Systems Analysis
In properties P2 to P6 that follow, we start with ℒ{f(t)} = F(s).
P2:
	
ℒ{e
}
(s
)
+
=
at f t
F
a
( )
∓
	
(4.7)
P3:
	
ℒ{ (
) (
)}
( )
f t
t u t
t
e
F s
t s
−
−
=
−
0
0
0
ˆ
	
(4.8)
P2 and P3 are shifting theorems with P2 applying to a function f(t) multiplied by an exponential 
time function e±at. Its Laplace transform F(s) is shifted by an amount “a” in the s-domain. P3 applies 
to functions f(t) delayed t0 units, that is, shifted an amount t0 to the right. Note the presence of the 
delayed unit step function û(t − t0) that zeros out the portion of the signal f(t), −t0 ≤ t < 0 shifted from 
the negative to the positive t-axis. The ˆu(t − t0) can be omitted in P3 if f(t) = 0, t < 0 (see Figure 4.2).
TABLE 4.1
Table of Laplace Transform Pairs for 
Elementary Continuous-Time Signals
f(t)
F(s) = L{f(t)}
ˆ( )
,
,
u t
t
t
=
<
≥




0
0
1
0
1
s
e+at
1
s
a
∓
tn
n
s n
(
)
+1
cos ωt
s
s2
2
+ω
sin ωt
ω
ω
s2
2
+
FIGURE 4.2  Illustration of the shifting property P3.

158
Simulation of Dynamic Systems with MATLAB® and Simulink®
P4 applies to continuous-time functions in the t-domain expressible in product form when one 
of the factors is tn.
P4:
	
ℒ{
( )}
(
)
( )
t f t
s F s
n
n
n
n
= −1
d
d
	
(4.9)
P5 shows that integration of functions in the t-domain is equivalent to division by the Laplace 
variable “s” in the s-domain.
P5:
	
ℒ
f t
t
F s
s
t
( )d
( )
′
′










=
∫
0
	
(4.10)
P6 expresses the Laplace transform of derivatives of f(t) in terms of F(s) and initial conditions. 
This property is central to solving linear differential equations using algebraic techniques in ­contrast 
to the classical time-domain approach.
P6:
	
ℒ
d
d
d
d
d
n
n
n
n
n
n
t
f t
s F s
s
f
s
t f
s
( )
( )
( )
( )








=
−
−
−
−
−
−
1
2
0
0

−
−
−
−
−
2
2
1
1
0
0
d
d
d
t
f
t
f
n
n
n
( )
( )
	
(4.11)
Periodic signals occur frequently as inputs to dynamic systems. The following property applies 
to functions that are periodic for t ≥ 0.
P7:
If f(t) is periodic with period T, that is, f(t − T) = f(t), t ≥ 0
	
F s
f t
t
Ts
st
T
( )
( )d
= −
−
−
∫
1
1
0
e
e
	
(4.12)
The convolution of two functions f(t) and g(t) is defined in terms of an integral
	
f t
g t
f t
g
t
( )* ( )
(
) ( )d
=
−
∫
τ
τ
τ
0
	
(4.13)
where f(t) * g(t) denotes the operation of convolving the two continuous-time functions f(t) and 
g(t). The convolution g(t) * f(t) is equivalent to f(t) * g(t) because a change of variable λ = t − τ in 
Equation 4.13 leads directly to
	
f t
g
g t
f
g t
f t
t
t
(
) ( )d
(
)
( )* ( )
−
=
−
=
∫
∫
τ
τ
τ
λ
λ
λ
0
0
( )d
	
(4.14)
It will be shown in the following section that convolution can be used to represent the response of 
an LTI system to an arbitrary input, and the following property is useful in determining the response 
of LTI systems.

159
Linear Systems Analysis
P8:
	
ℒ
ℒ
{ ( )* ( )}
(
) ( )d
( ) (
f t
g t
f t
g
F s G s
t
=
−










=
∫
τ
τ
τ
0
)
	
(4.15)
The convolution property P8 is a useful reminder that
	
ℒ{ ( ) ( )}
( ) ( )
f t g t
F s G s
≠
	
(4.16)
that is, the Laplace transform of the product of two functions is not equal to the product of the 
­individual Laplace transforms. To illustrate, suppose g(t) is the unit step function.
	
ℒ
ℒ
ℒ
{ ( ) ( )}
{ ( ) ( )}
{ ( )}
( )
f t g t
f t u t
f t
F s
=
=
=
ˆ
	
(4.17)
If Equation 4.16 were an equality, Equation 4.17 would lead to
	
F s G s
F s
( ) ( )
( )
=
	
(4.18)
	
⇒
=
G s( )
1	
(4.19)
Equation 4.19 is false and the inequality in Equation 4.16 is correct. Several examples are 
­presented to illustrate the use of these properties.
EXAMPLE 4.1
Find ℒ{4e−2t sin 3t − 5t cos 3t}.
	
ℒ
ℒ
ℒ
{ e
sin
cos
}
{e
sin
}
{ cos
} (P )
4
3
5
3
4
3
5
3
1
2
2
−
−
−
=
−
t
t
t
t
t
t
t
t
	
(4.20)
	
ℒ{
}
sin 3t
s
=
+
3
9
2
	
(4.21)
	
⇒
=
+
=
+
+
−
←+
ℒ{e
sin
}
(
)
(P )
2
2
2
2
3
3
9
3
2
9
2
t
s
s
t
s
s
	
(4.22)
	
ℒ{cos
}
3
3
9
2
t
s
=
+
	
(4.23)
	
⇒
= −
+





=
−
+
ℒ{ cos
}
(
)
(P )
t
t
s
s
s
s
s
3
9
9
9
3
2
2
2
2
d
d
	
(4.24)
Hence,
	
ℒ{ e
sin
cos
}
(
)
(
)
4
3
5
3
4
3
2
9
5
9
9
2
2
2
2
2
−
−
=
+
+





−
−
+




t
t
t
t
s
s
s


	

160
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXAMPLE 4.2
f(t) = (t − 2)û(t − 2). Graph f(t) and find F(s).
First, the ramp function t, −∞ < t < ∞ is delayed (right shifted) two units of time to the right to 
produce the function t − 2, −∞ < t < ∞. Second, the shifted function is zeroed out for t ≤ 2 as a 
result of the multiplicative term û(t − 2). The result is shown in Figure 4.3.
Shifting property P3 is used to find the Laplace transform of f(t).
	
t
s
t
u t
s
s
⇔
⇒
−
−
⇔






−
1
2
2
1
2
2
2
(
) (
)
ˆ
e
	
(4.25)
EXAMPLE 4.3
Find the Laplace transform of the signal f(t) shown in Figure 4.4.
The piecewise continuous function f(t) is defined in different intervals by
	
f t
t
t
t
t
t
t
t
( )
,
(
),
,
,
,
=
<
−
≤<
≤<
−+
≤<
≤





0
1
2
1
1
2
3
2
4
7
4
7
0
7





	
(4.26)
FIGURE 4.3  Graph of f(t) = (t − 2)û(t − 2).
FIGURE 4.4  A piecewise continuous-time function.

161
Linear Systems Analysis
Next, we write the function f(t) in a single expression using unit step functions. The procedure 
is straightforward. The first nonzero term in Equation 4.26 is multiplied by the appropriate step 
function, so that it “turns on” at the correct time. This gives
	
f t
t
u t
( )
(
) (
)
=
−
−
2
1
1
ˆ
	
(4.27)
that is valid for the first two intervals t < 1 and 1 ≤ t < 2. The description of f(t) changes for t ≥ 2 
necessitating a new term that is activated (goes from 0 to 1) for t ≥ 2. Suppose we write
	
f t
t
u t
u t
( )
(
) (
)
[ ] (
)
=
−
−
+  
−
2
1
1
2
ˆ
ˆ
	
(4.28)
The missing term in brackets must subtract out the previous expression for f(t), that is, 2(t − 1) 
and add the expression that holds for 2 ≤ t < 4—in this case the constant 3.
	
f t
u t
u t
( )
(
)
t
(
)
[
(t
)
] (
)
=
−
−
+ −
−
+
−
2
1
1
2
1
3
2
ˆ
ˆ
	
(4.29)
that is correct for t < 1, 1 ≤ t < 2, and 2 ≤ t < 4. You should check this yourself by choosing 
values of t from −∞ < t < 4. The same procedure is repeated until the function f(t) is defined as 
follows:
	
f t
t
u t
t
u t
t
u t
( )
(
)
(
)
)
(
) (
)
(
)
(
=
−
−
+ −
−
+
−
+ −+ −+
−
+
2
1
1
2
1
3
2
3
7
4
ˆ
ˆ
[
]ˆ
[
[
]
−−+
+
−
(
)
(
)
t
u t
7
0
7
] ˆ
	
(4.30)
Simplifying Equation 4.30 yields
	
f t
t
u t
t
u t
t
u t
t
u t
( )
(
) (
)
(
) (
)
(
) (
)
(
) (
=
+
+
+
2
1
1
2
5
2
4
4
7
7
–
ˆ
–
–
ˆ
–
–
–
ˆ
–
–
ˆ
– )) 	
(4.31)
The first, third, and fourth terms in Equation 4.31 have the form f(t − t0)û(t − t0) and can be 
Laplace transformed using property P3. The second term in Equation 4.31 can be manipulated 
into a similar form by doing the following:
	
(
) (
)
(
)
(
)
–
ˆ
–
–
–
ˆ
–
[
]
2
5
2
2
2
1
2
t
u t
t
u t
+
=
+
	
(4.32)
	
=
±
–
–
–
–
(
) (
)
(
)
2
2
2
2
t
û t
û t
	
(4.33)
Consequently, f(t) is expressible as
	
f t
t
u t
t
u t
u t
t
u t
t
( )
(
) (
)
(
) (
)
(
)
(
) (
)
(
=
+
+
2
1
1
2
2
2
2
4
4
7
–
ˆ
–
–
–
ˆ
–
ˆ
–
–
–
ˆ
–
– ) (
)
ˆ
–
u t
7 	
(4.34)
Using property P3, the Laplace transform of f(t) in Equation 4.34 is
	
F s
s
s
s
s
s
s
s
s
s
s
( ) =
−
+
−
+
−
−
−
−
−
2
2
2
2
2
2
4
2
7
2
e
e
e
e
e
	
(4.35)
Note that the second term in Equation 4.31, the only one not of the form f(t − to)û(t − t0), is 
present due to the discontinuity in f(t) at t = 2.
EXAMPLE 4.4
Find the Laplace transform of the periodic signal u(t) shown in Figure 4.5.
The signal u(t) is periodic for t ≥ 0 with period T = 3. Let u1(t) represent the first cycle of u(t), 
that is,
	
u t
t
t
t
t
t
t
1
2
1
0
1
2
5
1
2
1
2
3
0
3
( )
,
,
,
=
+
≤<
−
+
≤<
≤<
≤





	
(4.36)

162
Simulation of Dynamic Systems with MATLAB® and Simulink®
From property P7,
	
U s
u t
t
s
st
( )
( )d
= −
−
−
∫
1
1
3
0
3
e
e
	
(4.37)
Since u(t) = u1(t), 0 ≤ t < 3, Equation 4.37 can be written with u(t) replaced by u1(t),
	
U s
u t
t
s
st
( )
( )d
= −
−
−
∞
∫
1
1
3
1
0
e
e
	
(4.38)
	
= −
−
1
1
3
1
e
s U s( )
	
(4.39)
Using the same approach as in Example 4.3, the piecewise continuous function u1(t) is decom­
posed into a sum of terms involving step functions.
	
u t
t
u t
t
t
u t
t
u
1
2
1
2
1
2
5
1
2
5
1
( )
(
) ( )
[
(
)
(
)] (
)
[
(
)
(
=
+
+
+
+
+
+
+
+
ˆ
–
–
ˆ
–
– –
ˆ] tt
u t
–
– ˆ
–
2
3
)
(
) 	 (4.40)
	
=
+
+
2
4
1
1
2
2
2
3
tu t
u t
t
u t
t
u t
u t
ˆ
ˆ
–
–
ˆ
–
–
ˆ
–
– ˆ
–
( )
( )
(
) (
)
(
) (
)
(
) 	
(4.41)
The shifting property P3 is used repeatedly to obtain the Laplace transform of u1(t) in 
Equation 4.41.
	
U s
s
s
s
s
s
s
s
s
1
2
2
2
2
3
2
1
4
2
( ) =
+
−
+
−
−
−
−
e
e
e
(P3)
	
(4.42)
From Equation 4.39, U(s) is therefore
	
U s
s
s
s
s
s
s
( ) = −
−
+
−
+






−
−
−
−
1
1
4
2
3
3
2
2
e
1
e
2
e
e
	
(4.43)
An alternate approach to finding U(s) is to evaluate the integral in Equation 4.37 in pieces, 
namely
	
U s
t
t
t
t
t
s
st
st
st
1
3
0
1
2
3
1
2
1
1
2
1
2
5
1
( )
(
)d
(
)d
( )d
= −
+
+
−
+
+
−
−
−
−
∫
∫
∫
e
e
e
e





	
(4.44)
FIGURE 4.5  Graph of signal u(t), periodic for t ≥ 0.

163
Linear Systems Analysis
In general, the second approach is more time-consuming because of the need to evaluate 
definite integrals.
EXAMPLE 4.5
Find the function y(t) whose Laplace transform is Y(s) = 1/(s2(s + 2)).
Y(s) is expressed as a product of terms,
	
Y s
s
s
F s
G s
( )
(
)
( )
( )
=
⋅
+
=
⋅
1
1
2
2
	
(4.45)
where
	
F s
s
G s
s
( )
,
( )
(
)
=
=
+
1
1
2
2
	
(4.46)
From Table 4.1, the functions f(t) and g(t) are
	
f t
t
t
g t
t
t
( )
,
,
)
,
=
≥
=
≥
−
0
0
2
and
(
e
	
(4.47)
From the convolution property P8, y(t) is the convolution of f(t) and g(t).
	
y t
f
g
f t
g
t
t
t
( )
(
) ( )d
(
d
=
=
−
=
−
∫
∫
−
*
)e
τ
τ
τ
τ
0
2
0
τ τ
	
(4.48)
Evaluating the definite integral in Equation 4.48 gives
	
y t
t
t
t
t
t
t
( )
(
=
−
=
−+
≥
−
−
−
∫
∫
e
d
e
d
e
),
2
0
2
2
0
1
4 2
1
0
τ
τ
τ
τ
τ
	
(4.49)
The same result is obtained using the alternate form of the convolution integral,
	
y t
g f
g t
f
t
t
t
t
t
( )
*
(
) (
(
)
=
=
−
=
=
∫
∫
∫
−
−
−
τ
τ
τ
τ
τ
τ
)d
e
d
e
e d
0
2
2
2
0
0
τ τ τ
	
(4.50)
4.2.2  Inverse Laplace Transform
The last example required us to find the function y(t) satisfying ℒ{y(t)} = Y(s). In this context, 
y(t) is referred to as the inverse Laplace transform of Y(s). In general, given a Laplace transform 
F(s) = ℒ{f(t)}, f(t) can be determined using the inverse function ℒ−1 {F(s)} (Ogata 1998),
	
f t
F s
j
F s
s
t
st
z
j
z
j
c
c
( )
( )
( )e
=
{
}=
>
−
−∞
+ ∞
∫
ℒ1
1
2
0
π
d ,
	
(4.51)
where zc is a real constant chosen to assure convergence of the integral. Finding f(t) in Equation 4.51 
requires evaluating an integral of a function of a complex variable over a contour in the s-plane. 

164
Simulation of Dynamic Systems with MATLAB® and Simulink®
Fortunately, there is a simpler approach to performing the inverse Laplace transformation when F(s) 
involves a ratio of polynomials in s. To illustrate, suppose we are asked to find the inverse Laplace 
transform of F(s) where
	
F s
s
s
s
( ) =
−
+
+
1 2
1 4
1 4
2
2
/
/
/
	
(4.52)
Inverse Laplace transforming both sides of Equation 4.52 and using the linearity property P1, 
we can write
	
f t
F s
s
s
s
( )
{ ( )}
=
=
−
+
+






−
−
ℒ
ℒ
1
1
2
1 2
1 4
1 4
2
/
/
/
	
(4.53)
	
=






−






+
+


−
−
−
ℒ
ℒ
ℒ
1
2
1
1
1 2
1 4
1 4
2
/
/
/
s
s
s




	
(4.54)
	
=






−






+
+


−
−
−
1
2
1
1
4
1
1
4
1
2
1
2
1
1
ℒ
ℒ
ℒ
s
s
s




	
(4.55)
From Table 4.1,
	
ℒ
ℒ
ℒ
−
−
−






=
≥






=
≥
1
2
1
1
1
0
1
1
0
1
s
t
t
s
t
s
,
,
,
,
+






=
≥
−
2
0
2
e
t
t
,
	
(4.56)
	
⇒
=
−
+
≥
−
f t
t
t
t
( )
,
1
2
1
4
1
4
0
2
e
	
(4.57)
Note y(t) in Equation 4.49 and f(t) in Equation 4.57 are the same functions. Therefore, Y(s) in 
Equation 4.45 and F(s) in Equation 4.52 are equal, that is,
	
1
2
1 2
1 4
1 4
2
2
2
s s
s
s
s
(
)
+
=
−
+ +
/
/
/
	
(4.58)
This suggests that the inverse Laplace transform of a quotient like the one on the left-hand side 
of Equation 4.58 can be found by first expressing it as a summation of terms and then resorting to 
a table of Laplace transform pairs. This method is termed partial fraction expansion and will be 
discussed shortly. First, we establish the need for inverting Laplace transforms expressed in terms 
of proper fractions with polynomials in “s” in the numerator and denominator.
4.2.3  Laplace Transform of the System Response
The significance of Laplace transforms in the analysis of LTI dynamic systems is in large part a 
consequence of property P6, which relates the Laplace transform of df(t)/dt and higher derivatives 
to F(s), the Laplace transform of f(t). For example, consider a linear second-order system with input 
u(t) and output y(t) with initial conditions y(0), y(0) modeled by
	
d
d
d
d
d
d
d
d
2
2
1
2
2
0
2
2
2
1
0
t y t
a
t y t
a y t
b
t u t
b
t u t
b u t
( )
( )
( )
( )
( )
( )
+
+
=
+
+
	
(4.59)

165
Linear Systems Analysis
Laplace transforming both sides of Equation 4.59, with ℒ{u(t)} = U(s) and ℒ{y(t)} = Y(s) 
results in
	
s Y s
sy
a sY s
y
a Y s
b s U s
su
y
2
1
0
2
2
0
0
0
0
( )
( )
( )
[
( )
( )]
( )
[
( )
( )
−
−
+
−
+
=
−
−

u
b sU s
u
b U s
( )
( )
( )]
( )
0
0
1
0
+
−
+


	
(4.60)
where u(0) and u(0) are the initial values of the input and its first derivative.
Collecting terms and solving for Y(s) give
	
Y s
b s
b s
b
s
a s
a
U s
b u
s
b u
( )
( )
( )
( )
=
+
+
+
+






−
+
+
2
2
1
0
2
1
0
2
2
0
0

b u
s
a s
a
u t
1
2
1
0
0
( )
( )
+
+






terms involving input






+
+
+
y
s
y
a y
( )
( )
( )
0
0
0
1
s
a s
a
y
y
T
2
1
0
0
0
+
+
terms involving initial state, [
]
( ), ( )






	
(4.61)
The complete response y(t) consists of two components. The first,
	
y
t
b s
b s
b
s
a s
a
U s
b u
s
b
zs( )
( )
( )
=
+
+
+
+






−
+
−
ℒ1
2
2
1
0
2
1
0
2
2
0
u
b u
s
a s
a
( )
( )
0
0
1
2
1
0
+
+
+







	
(4.62)
is called the zero-state response, so named because it represents the system’s response when the 
initial state is zero, that is, y(0) =  y(0) = 0. The terms in Equation 4.62 result from the presence of 
a forcing function u(t), which explains why the zero-state response is also referred to as the forced 
response.
The second component is the zero-input response, which is the response of the unforced system, 
that is, u(t) = 0, t ≥ 0. It is also known as the free response.
	
y
t
y
s
y
a y
s
a s
a
zi( )
( )
( )
( )
=
+
+
+
+






−
ℒ1
1
2
1
0
0
0
0

	
(4.63)
For an elementary type of input u(t), its Laplace transform U(s) will be a ratio of polynomials in 
s (see Table 4.1) with the order of the denominator higher than the order of the numerator by at least 
one. Thus, the terms inside the brackets in Equations 4.62 and 4.63 are also proper fractions with 
numerator and denominator polynomials in s.
For example, suppose y(0) = y0, y(0) =  y0 and u(t) = sin ωt, t ≥ 0. Since u(0) = 0 and u(0) = ω, 
Y(s) becomes
	
Y s
b s
b s
b
s
a s
a
b
s
a s
a
( ) =
+
+
+
+






+
−
+
+


2
2
1
0
2
1
0
2
2
1
0
ω
ω
ω
s2
2




+
+
+
+
+
y s
y
a y
s
a s
a
0
0
1 0
2
1
0

	
(4.64)
	
=
+
+
+
+
+
+
+
−
+
y s
a y
y s
b
y
s
a y
y
b
b
s
a s
0
3
1 0
0
2
1
0
1 0
0
0
2
2
4
1
3
(
)
(
)
(


ω
ω
ω
ω
ω
ω )
+
+
+
+
(
)
a
s
a
s
a
0
2
2
1
2
0
2
ω
ω
ω
	
(4.65)
Inverting Y(s) is facilitated by decomposing the right-hand side of Equation 4.65 into a sum of 
terms for which the inverse Laplace transform is readily determined from tables such as Table 4.1. 
The same applies for higher order systems with arbitrary inputs.

166
Simulation of Dynamic Systems with MATLAB® and Simulink®
4.2.4  Partial Fraction Expansion
The second-order system example demonstrates that Y(s) will ordinarily be a proper fraction with 
polynomials in “s” in the numerator and denominator, that is,
	
Y s
N s
D s
a s
a
s
a s
a
s
b
s
b s
b
m
m
m
m
n
n
n
( )
( )
( )
,
=
=
+
+
+
+
+
+
+
+
−
−
−
−
1
1
1
0
1
1
1
0


(nn
m
>
)
	
(4.66)
We begin the process of expanding Y(s) into a sum of terms by determining the roots of D(s) = 0. 
The nature of the n roots will dictate the form of the expansion. A number of cases will be considered.
Case I: All roots of D(s) = 0 are real and distinct
Let the n distinct roots be the real numbers p1, p2, …, pn obtained by factoring the denominator D(s) 
into
	
D s
s
p
s
p
s
pn
( )
(
)(
)(
)
=
−
−
−
1
2
	
(4.67)
	
⇒
=
=
+
+
+
+
−
−
⋅
−
−
−
Y s
N s
D s
a s
a
s
a s
a
s
p
s
p
s s
p
m
m
m
m
n
( )
( )
( )
(
)(
)
(
)
1
1
1
0
1
2

	
(4.68)
p1, p2, …, pn are called the poles of Y(s). The partial fraction expansion of Y(s) is
	
Y s
a s
a
s
a s
a
s
p
s
p
s
p
c
s
p
c
s
m
m
m
m
n
( )
(
)(
)
(
)
=
+
+
+
+
−
−
−
=
−
+ −
−
−
1
1
1
0
1
2
1
1
2


p
c
s
p
n
n
2
+
+ −

	
(4.69)
where the constants ci, i = 1, 2, …, n, referred to as the residues of Y(s) at the respective poles pi, 
i = 1, 2, …, n, are obtained from
	
c
s
p
N s
D s
i
i
s
pi
=
−






=
(
)
( )
( )
	
(4.70)
	
=
+
+
+
+
−
−
−
−
−
−
−
−
+
a s
a
s
a s
a
s
p
s
p
s
p
s
p
s
p
m
m
m
m
i
i
n
1
1
1
0
1
2
1
1



(
)(
)
(
)(
)
(
)
,
,
,






=
=
s
pi
i
n
1 2,…
	
(4.71)
EXAMPLE 4.6
Find the inverse Laplace transform of
	
Y s
s
s
s
s
( )
.
.
=
+
+
+
+
2
3
2
1
10 5
14
4 5 	
(4.72)
Factoring the denominator leads to the partial fraction expansion as follows:
	
Y s
s
s
s
s
c
s
c
s
c
s
( )
(
. )(
)(
)
.
=
+
+
+
+
=
+
+
+ +
+
2
1
2
3
1
0 5
1
0 5
1
9
9
	
(4.73)
The constants c2, c2, and c3 are obtained from Equation 4.71 as follows:

167
Linear Systems Analysis
	
c
s
s
s
s
s
s
1
2
0 5
2
0 5
1
0 5
1
0 5
1
0
=
=
+
+
+
+






=
−
+
−
=−
(
. ) (
. )(
)(
)
(
. )
(
.
9
.
)(
.
)
5
0 5
5
17
+
−
+
=
1
1
	
(4.74)
	
c
s
s
s
s
s
s
2
2
1
2
1
1
0 5
1
1
1
1
0 5
=
+
+
+
+
+






=
−
+
−+
=−
(
) (
. )(
)(
)
(
)
(
. )(
9
−+
= −
1
9
1
2
)
	
(4.75)
	
c
s
s
s
s
s
s
3
2
9
2
9
1
0 5
1
9
1
9
0 5
=
+
+
+
+
+






=
−
+
−+
=−
(
) (
. )(
)(
)
(
)
(
. )(
9
−+
=
9
1
41
34
)
	
(4.76)
	
⇒
=
+
−
+ +
+
Y s
s
s
s
( )
.
5 17
0 5
1 2
41 34
9
1
	
(4.77)
y(t) is obtained by inverse Laplace transforming the terms in Equation 4.77,
	
y t
s
s
s
( )
.
=
+
−
+ +
+





−
ℒ1
5 17
0 5
1 2
41 34
9
1
	
(4.78)
	
=
−
+
≥
−
−
−
5
17
1
2
41
34
0
0 5
9
e
e
e
.
,
t
t
t
t
	
(4.79)
Case II: All roots of D(s) = 0 are real and at least one is a multiple root
Suppose pi has multiplicity m1 and p2 multiplicity m2. There are a total of n − m1 − m2 + 2 distinct 
pole values, that is, p1, p2, p3, …, pn m
m
−
−
+
1
2
2. In factored form, D(s) is
	
D s
s
p
s
p
s
p
s
p
m
m
n m
( )
(
) (
)
(
)
(
)
=
−
−
−
−
−
+
1
2
2
3
2
1
2

	
(4.80)
The partial fraction expansion of Y(s) is
	
Y s
a
s
p
a
s
p
a
s
p
b
s
p
b
m
m
m
m
m
m
m
( ) =
−
+
−
+
+
−
+
−
+
−
−
1
1
1
1
2
2
1
1
1
1
1
1
2
(
)
(
)
(
)
(
)

2
2
1
2
1
1
2
1
1
2
1
3
2
4
−
−
+
+
−
+
−
+ −
+
+ −
−
−
−
−
−
(
)
(
)
s
p
b
s
p
c
s
p
c
s
p
c
s
p
m
n m
m
n m


m2
2
+
	
(4.81)
Note the number of terms in the expansion corresponding to a particular pole is identical to the 
order (multiplicity) of the pole. The constants ci, i = 1, 2, …, n − m1 − m2 are evaluated in the same 
way as in Case I. For example, c1 is obtained from
	
c
s
p
N s
D s
a s
a
s
a s
a
s
p
s
p
m
m
m
m
1
3
1
1
1
0
1
3
=
−






=
+
+
+
+
−
=
−
−
(
)
( )
( )
(
)

m
m
n m
m
s
p
s
p
s
p
s
p
s
p
1
2
1
2
3
2
4
5
2
(
)
(
)(
)
(
)
−
−
−
−






−
−
+
=


	
(4.82)

168
Simulation of Dynamic Systems with MATLAB® and Simulink®
The constants a
a
a a
m
m
1
1 1
2
,
,
,
,
−…
l are evaluated using
	
a
m
k
s
s
p
N s
D s
k
m
m
k
m
k
m
k
i
m
s
p
=
−
−






=
−
−
−
=
1
1
1
1
1
1
1
1
(
)
(
)
( )
( )
,
,
d
d
1,
,2 1
… ,
	
(4.83)
A similar formula applies for the constants b
b
b b
m
m
2
2 1
2
,
,
,
,
−…
1
EXAMPLE 4.7
	
Y s
s
s
s
s
s
( ) =
+
+
+
+
+
1
14
75
194
244
120
5
4
3
2
	
(4.84)
	
a.	Find the partial fraction expansion of Y(s).
	
b.	Find y(t).
	
a.	The poles of Y(s) are found by using a root-solving program such as the MATLAB® func­
tion “roots” that returns the roots of a polynomial. The call is “roots(a)” where “a” 
is the array of coefficients in descending order of the polynomial. With a = [1 14 75 194 
244 120], “roots (a)” returns −5, −3, −2, −2, −2. Y(s) is written with its denominator 
in factored form and then expanded as follows:
	
Y s
s
s
s
a
s
a
s
a
s
c
s
c
s
( )
(
)
(
)(
)
(
)
(
)
=
+
+
+
+
=
+
+
+
+
+
+
+
+
+
1
2
3
5
2
2
2
3
3
3
3
2
2
1
1
2
5 	
(4.85)
	
	
Evaluating c1 and c2 first,
	
c
s
s
s
s
s
1
3
3
3
3
1
2
3
5
1
3
2
3
5
=
+
+
+
+






=
−+
−+





=−
(
) (
) (
)(
)
(
) (
)
= −1
2 	
(4.86)
	
c
s
s
s
s
s
2
3
5
3
5
1
2
3
5
1
5
2
5
3
=
+
+
+
+






=
−+
−+





=−
(
) (
) (
)(
)
(
) (
)
= 1
54 	
(4.87)
	
	
Next, the coefficients a3, a2, and a1 are computed from Equation 4.83
	
a
s
s
s
s
s
s
3
3 3
3 3
3
3
2
1
3
3
2
1
2
3
5
1
=
−
+
+
+
+
+






= −
−
−
=−
(
)
(
) (
)
(
)(
)
(
d
d
2
3
2
5
1
3
+
−+





=
)(
)
	
(4.88)
	
a
s
s
s
s
s
s
2
3 2
3 2
3
3
2
1
3
2
2
1
2
3
5
=
−
+
+
+
+
+






−
−
=−
(
)
(
) (
)
(
)(
)
d
d
	
(4.89)
	
=
+
+






=
−
+
+
+






=−
=−
d
ds
s
s
s
s
s
s
s
1
3
5
12
8
8
15
2
2
2
(
)(
)
(
)
(
)
2
4
9
= −
	
(4.90)
	
a
s
s
s
s
s
1
3 1
3 1
3
3
2
1
3
1
2
1
2
3
5
=
−
+
+
+
+






−
−
=−
(
)!
(
) (
) (s
)(
)
d
d
	
(4.91)
	
=
+
+






=
+
+
+
+




=−
1
2
1
3
5
3
24
49
8
15
2
2
2
2
2
3
d
ds
s
s
s
s
s
s
s
(
)(
)
(
) 

=
=−
s
2
13
27 	
(4.92)
	
	
An alternative approach to finding the constants cl, c2, a3, a2, and al is to use the 
“residue” function in MATLAB that finds the poles of Y(s) and the residues as well. 

169
Linear Systems Analysis
Y(s) is defined by arrays n = [1], d = [1 14 75 194 244 120], and the statement “[R, P] = 
residue (n, d)” returns the poles −5, −3, −2, −2, −2 in array “P” and the residues 
1/54, −1/2, 13/27, −4/9, 1/3 in array “R.”
	
b.	From Table 4.1 and property P2, the inverse transform of Y(s) in Equation 4.85 is
	
y t
a
t
a
t
a
c
c
t
t
t
t
t
( ) =
+
+
+
+
−
−
−
−
−
3
2
2
2
1
2
3
5
2
e
e
e
e
e
2
1
2
	
(4.93)
	
	
Substituting the values for c1 and c2 from Equations 4.86 and 4.87 as well as a3, a2, 
and al from Equations 4.88, 4.90, and 4.92 into Equation 4.93 gives
	
y t
t
t
t
t
t
t
t
( ) =
−
+
−
+
−
−
−
−
−
1
6
4
9
13
27
1
2
1
54
2
2
2
3
5
e
e
e
e
e
2
	
(4.94)
Case III: Complex roots of D(s) = 0
When the polynomial D(s) possesses nonrepeated complex roots, it is possible to apply Case I or II 
and obtain the partial fraction expansion. However, the coefficients will be complex numbers, and 
the partial fraction expansion will include complex exponentials, which have to be combined in a 
way to produce real-valued functions. There are two alternatives that eliminate the need for complex 
number arithmetic. Both are presented followed by an illustrative example.
Suppose the denominator of Y(s) in Equation 4.66 has a single pair of complex roots. Factoring the 
denominator into a product of linear factors and a quadratic factor,
	
Y s
N s
D s
a s
a
s
a s
a
s
p
s
p
s
p
m
m
m
m
n
( )
( )
( )
(
)(
)
(
)(
=
=
+
+
+
+
−
−
−
−
−
−
1
1
1
0
1
2
2


as
bs
c
2 +
+ ) 	
(4.95)
where p1, p2, …, pn–2 are real and as2 + bs + c = 0 has complex roots α ± jβ (β > 0). For simplic­
ity, assume the poles p1, p2, …, pn–2 are distinct. The partial fraction expansion is
	
Y s
N s
D s
c
s
p
c
s
p
c
s
p
d s
d
as
bs
c
n
n
( )
( )
( )
=
=
−
+
−
+
+
−
+
+
+
+
−
−
1
1
2
2
2
2
1
2
2

	
(4.96)
The constants cl, c2, c3, …, cn–2 are obtained as before (Case I). The constants d1 and d2 are 
obtained by recombining the terms on the right-hand side of Equation 4.96 and then equating 
the coefficients of powers of s in the numerator with the coefficients of like powers of s in the 
original form of the numerator N(s). The inverse Laplace transform of the last term in Equation 
4.96 is
	
ℒ−
+
+
+






=
+






1
1
2
2
1
1
2
d s
d
s
as
b
d
t d
d
t
eα
β
cos
α
β







sinβt
	
(4.97)
To illustrate, consider
	
Y s
s
s
s
s
s
s
s s
s
s
( )
(
)(
)
=
+
+
+
+
=
+
+
+
+
1
5
11
15
1
3
2
5
4
3
2
2
	
(4.98)
	
=
+
+
+
+
+
+
c
s
c
s
d s
d
s
s
1
2
1
2
2
3
2
5 	
(4.99)

170
Simulation of Dynamic Systems with MATLAB® and Simulink®
From the quadratic formula, the roots of s2 + 2s + 5 are −1 ± j2. Thus, α = −1 and β = 2. 
The constants c1 and c2 are calculated from
	
c
s
s
s s
s
s
s
s
s
s
s
s
1
2
0
2
0
1
3
2
5
1
3
2
5
1
15
=
+
+
+
+






=
+
+
+
+
=
=
=
(
)(
)
(
)(
)
	
(4.100)
	
c
s
s
s s
s
s
s
s s
s
s
s
2
2
3
2
3
3
1
3
2
5
1
2
5
1
=
+
+
+
+
+






=
+
+
+
=
=−
=−
(
) (
)(
)
(
)
12 	
(4.101)
Combining terms in Equation 4.99 over a common denominator and equating the numerator to 
s + 1, the numerator in Equation 4.98 gives
	
s
s
s
s
s s
s
d s
d s s
+ =
+
+
+
+
+
+
+
+
+
1
1
15
3
2
5
1
12
2
5
3
2
2
1
2
(
)(
)
(
)
(
) (
)
	
(4.102)
	
⇒
+ =
+
+






+
+
+
+






+
s
d s
d
d
s
1
1
15
1
12
1
3
1
6
3
11
1
1
3
1
2
2
5
5
12
3
1
2
+
+





+
d
s
	
(4.103)
Equating coefficients of like powers of s on both sides of Equation 4.103,
	
s
d
d
s
d
d
d
3
1
1
2
1
2
2
0
1
15
1
12
1
15
1
12
3
20
0
1
3
1
6
3
1
3
1
:
:
=
+
+
⇒
= −
−
= −
=
+
+
+
⇒
= −
−6
3
1
2
3
3
20
1
20
1
11
15
5
12
3
1
3
11
1
1
2
2
−
= −
−
−





= −
=
+
+
⇒
=
−
d
s
d
d
:
15
5
12
1
20
1
1
0
−





= −
=
s :
	
Note, only two of the first three equations are needed to solve for d1 and d2, and the remaining 
two equations serve as a check. Solving for c1 and c2 directly in Equations 4.100 and 4.101 elimi­
nates the need to solve four simultaneous equations for the unknown constants c1, c2, d1, and d2. 
Substituting the values for cl, c2, d1, and d2 into Equation 4.99 yields
	
Y s
s
s
s
s
s
( )
(
)
=
+
+
+ −
−
+
+
115
112
3
3 20
1 20
2
5
2
	
(4.104)
	
=





+
+





−
+
+
+





1
15
1
1
12
1
3
1
20
3
1
2
5
2
s
s
s
s
s
	
(4.105)
The last term is inverted using Equation 4.97 with d1 = 3, d2 = 1, α = −1, and β = 2.
	
Y t
t
t
t
t
( )
(
)
sin
=
+
−
+
−+









−
−
1
15
1
12
1
20
3
3
1
1
2
2
3
e
e
cos 2


	
(4.106)
	
=
+
−
+−
−
−
1
15
1
12
1
20
3
2
3
e
e
cos 2
t
t
t
t
(
sin
)
	
(4.107)
The second method for inverse Laplace transforming terms like the one in Equation 4.97 is 
based on decomposing it into two terms that can be readily inverted. Starting with an expression 

171
Linear Systems Analysis
containing a quadratic in the denominator with complex roots, the first step is to complete the 
square as illustrated in the following equations:
	
F s
d s
d
s
as
b
( ) =
+
+
+
1
2
2
	
(4.108)
	
=
+
+
+
+
−
d s
d
s
as
a
b
a
1
2
2
2
2
4
4
(
)
(
) 	
(4.109)
	
=
+
+
+
=
−






d s
d
s
a
b
a
1
2
2
2
2
2
2
4
(
)
/
ω
ω
	
(4.110)
After completing the square in the denominator, Equation 4.110 is expressed as the sum of two 
terms that are the Laplace transforms of shifted trigonometric functions.
	
F s
d
s
a
a
d
s
a
( )
[(
)
]
(
)
=
+
−
+
+
+
1
2
2
2
2
2
2
ω
	
(4.111)
	
=
+
+
+
+
−






+
+
d
s
a
s
a
d
a
d
s
a
1
2
2
2
1
2
2
2
2
2
2
(
)
(
)
(
)
(
)
/
/
/
/
ω
ω
ω
ω 	
(4.112)
From Table 4.1 and the shifting property P2, f(t) = ℒ−1 {F(s)} is
	
f t
d
t
d
a
d
t
a
t
a
t
( )
cos
(
)
sin
(
)
(
)
=
+
−






−
−
1
2
2
1
2
2
e
e
ω
ω
ω
	
(4.113)
Returning to the previous example,
	
1
20
3
1
2
5
1
20
2
1
2
2
s
s
s
d s
d
s
as
b
+
+
+





=
+
+
+





	
(4.114)
making d1 = 3, d2 = 1, a = 2, b = 5, and ω2 = b − a2/4 = 4. Substituting the values for d1, d2, a, b, 
and ω into Equation 4.113 leads to the inverse Laplace transform,
	
1
20
2
1
2
2
1
2
d
t
d
a
d
t
a
t
a
t
e
/
e
−
−
+
−









( / )
( / )
cos
(
)
sin
ω
ω
ω



=
−
−
−
1
20 3
2
2
( e cos
sin
)
t
t
t
t
e
	
(4.115)
in agreement with the result shown in Equation 4.107.
Rather than having to remember
	
ℒ−
−
+
+
+






=
+
−
1
1
2
2
1
2
2
1
2
d s
d
s
as
b
d
t
d
a
d
a
t
e
/
( / ) cos
(
)
ω
ω






−
e ( / ) sin
a
t
t
2
ω
	
(4.116)
the inverse Laplace transform in the last example can be obtained directly by completing the square, 
that is,
	
F s
s
s
s
( ) =
+
+
+






1
20
3
1
2
5
2
	
(4.117)
	
=
+
−
+
+
+






1
20
3
1
1
1
1
2
2
2
[(
)
]
(
)
s
s
	
(4.118)
	
=
+
−
+
+






1
20
3
1
2
1
2
2
2
(
)
(
)
s
s
	
(4.119)

172
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
+
+
+
−
+
+






1
20 3
1
1
2
2
1
2
2
2
2
2
(
)
(
)
(
)
s
s
s
	
(4.120)
Inverse Laplace transformation of F(s) gives the same f(t) in Equation 4.115.
EXERCISES
	4.1	
Find the Laplace transforms of the functions f(t) given below. Note that û(t − t0) is the unit 
step function delayed t0 units of time.
(a) t2 sin 2t
(b) tû(t − 1)
(c) (t − 1)û(t)
(d) 2[û(t − 1) − û(t − 4)]
(e) (d/dt)(te−t)
(f) sin(2t + π/4)
(g) (1 − 3t)e−3t
(h) e−3t ∫0
t  sin 2τ cos 2τdτ
(i) sin2 t
(j) te−2t sin 3t
(k) ∫0
t τe−2τ cos 3(t − τ)dτ
	4.2	
Find the inverse Laplace transforms of the functions F(s) given in the following:
(a) 
1
1
2
(
)
s −
(b) 
1
2
9
2
(
)
s +
+
(c) 
s
s
s
+
+
+
1
2
3
(
)(
)
(d) 
s
s s
+
−
1
4
2
3
(
)
(e) e
e
−
−
−
+
s
s
s s
3
1
(
)
(f) s
s
+
+
1
1
2
(g) 
2
1
1
2
2
s
s
s
+
+ +
(
)
(h) 
s
s
s
s
s
(
)(
)
2
2
2
5
5
6
+
+
+
+
	4.3	
Find the Laplace transform of the functions f(t) in Figure E4.3a,b. In Figure E4.3b, the ­function 
is parabolic over the intervals 0 ≤ t < 2 and 4 ≤ t < 6 and passes through the points (0, 0), 
(1, 3), (2, 4) and (4, 4), (5, 3), (6, 0).
	4.4	
Graph the function f(t) defined by
	
f t
tu t
t
u t
tu t
u t
( )
( )
(
) (
)
(
)
(
)
=
+
−
−
−
−
+
−
ˆ
ˆ
ˆ
ˆ
1
1
2
2
3 	
	
and find its Laplace transform.
	4.5	
Find the Laplace transform of the periodic function f(t) shown in Figure E4.5:
FIGURE E4.3
FIGURE E4.5

173
Linear Systems Analysis
4.3  TRANSFER FUNCTION
Before we introduce the transfer function, the concept of an impulse function is presented because 
of its relevance to the response of LTI systems.
4.3.1  Impulse Function
An impulse function at t = t0, denoted δ(t − t0), is defined by its property of sifting the value of a 
function f(t) at t0 inside an integral, that is,
	
δ(
)
t
t f t
t
f t
t
−
=
−∞<
<∞
−∞
∞
∫
0
0
0
( )d
( ),
	
(4.121)
The impulse function δ(t − t0) is equal to zero wherever t ≠ t0 and is not finite at t = t0. No such 
function exists in a physical sense; however, it can be used to approximate real signals x(t), which 
occur over a very short duration Δ and satisfy the condition
	
x t
t
t
t
( )d =
+∆
∫
1
0
0
	
(4.122)
as illustrated in Figure 4.6.
From Equation 4.121, the Laplace transform of δ(t − t0) is given by
	
δ(
)e
e
t
t
t
t
st
st
−
=
>
−
−
∞
∫
0
0
0
0
0
d
,
	
(4.123)
When t0 = 0, Equation 4.123 with lower limit 0− reduces to
	
ℒ{ ( )}
δ t
=1 	
(4.124)
4.3.2  Relationship between Unit Step Function and Unit Impulse Function
The unit step function ˆ( )
u t  that equals 1 for t ≥ 0 and 0 for t < 0 is discontinuous at t = 0. Although 
it cannot be implemented in a physical sense, it serves as an approximation to actual signals, which 
switch from one level to another in a very short period of time. The first derivative of a unit step 
function is zero everywhere except at the origin where it fails to exist as a result of the discontinu­
ity. The unit impulse function δ(t) is likewise zero for all values of t except t = 0 where it is infinite.
The unit impulse function δ(t) can be thought of as the derivative of the unit step function û(t). 
This provides a framework for analyzing systems with discontinuous inputs that result when input 
FIGURE 4.6  The unit impulse function δ(t − t0) as a limit of a real function x(t).

174
Simulation of Dynamic Systems with MATLAB® and Simulink®
derivatives are present in the mathematical model (Ogata 1998). To illustrate, consider the first-
order system differential equation model
	
d
d
d
d
y
t
y
u
t
u
+
=
+
2
	
(4.125)
where the input u = û(t) and the system is initially at rest, that is, y(0−) = 0. Note that the initial 
time is taken as 0− to indicate the initial state value prior to application of the step input at t = 0. 
Substituting û(t) for u in Equation 4.125 and replacing (d/dt)û(t) with δ(t),
	
d
d
d
d
y
t
y
t u t
u t
t
u t
+
=
+
=
+
2
ˆ( )
ˆ( )
( )
ˆ( )
δ
	
(4.126)
We learned in Chapter 2 that differential equations, where the highest order derivatives of the 
input and output are identical, possess a direct path between the input and output. We should there­
fore expect the output y(t) in Equation 4.125 to be discontinuous at t = 0, that is, y(0+) ≠ y(0−) when 
the input is a unit step û(t). The impulse function on the right-hand side of Equation 4.126 is infinite 
at t = 0 accounting for the jump in y(t) over the infinitesimal time period from t = 0− to t = 0+.
It is possible to demonstrate this behavior without actually solving Equation 4.126 for y(t). 
Solving for dy/dt in Equation 4.126,
	
d
d
( )
( )
y
t
t
u t
y
=
+
−
δ
ˆ
2
	
(4.127)
Integrating both sides of Equation 4.127 from 0− to t,
	
y t
u
y
t
( )
[ ( )
( )
( )]
=
+
−
−∫δ λ
λ
λ
λ
ˆ
d
2
0
	
(4.128)
Decomposing the integral in Equation 4.128 into two separate integrals,
	
y t
u
y
u
y
t
( )
[ ( )
( )
( )]
( )
( )
( )]
=
+
−
+
+
−
−
+
+
∫
∫
δ
δ
λ
λ
λ
λ
λ
λ
λ
λ
ˆ
d
[
ˆ
d
2
2
0
0
0
	
(4.129)
The first integral simplifies because û(t) and y(t) are both finite at t = 0. The second integral 
simplifies by virtue of δ(t) = 0 and û(t) = 1 for t ≥ 0+. Equation 4.129 becomes
	
y t
y
t
( )
( )d
[
( )]d
=
+
−
−
+
+
∫
∫
δ
λ
λ
λ
λ
0
0
0
1
2
	
(4.130)
From the sifting property of the impulse function, Equation 4.121, the first term on the right-hand 
side of Equation 4.130 is 1. Evaluating y(t) at t = 0+,
	
y
y
(
)
[
( )]d
0
1
1
2
0
0
+
+
+
= +
−
=
∫
λ
λ
1
	
(4.131)

175
Linear Systems Analysis
proving that y(t) is discontinuous at t = 0 since y(0−) = 0.
For functions that are discontinuous at the origin, the initial conditions in the differentiation 
property of Laplace transforms (P6) apply at t = 0−. Hence, for n = 1
	
ℒd
d
y
t
sY s
y






=
−
−
( )
(
)
0
	
(4.132)
Returning to Equation 4.126, Laplace transformation of both sides yields
	
sY s
y
Y s
s
( )
(
)
( )
−
+
= +
−
0
2
1
1
	
(4.133)
	
⇒
=
+
+
+
+
=
+
+
=
+
+






−
Y s
s
s s
y
s
s
s s
s
s
( )
(
(
)
(
)
1
0
2
1
1
2
1
1
2
2)
2
	
(4.134)
	
⇒
=
+
≥
−
+
Y t
t
t
( )
(
),
1
2 1
0
2
e
	
(4.135)
Substituting t = 0+ in Equation 4.135 gives y(0+) = 1 in agreement with Equation 4.131.
The initial condition y(0+) can be obtained by applying the initial value property of Laplace 
transforms that states
P9:
	
y
y t
sY s
t
s
(
)
lim
( )
lim
( )
0
0
+
→
→∞
=
=
+  
 
	
(4.136)
In this example,
	
y
sY s
s
s
s s
s
s
(
)
lim
( )
lim
(
)
0
1
2
1
+
→∞
→∞
=
=
+
+





=
 
 
	
(4.137)
4.3.3  Impulse Response
The response of LTI systems to an impulse forcing function is of great interest. We shall see why 
momentarily, but first an example is presented illustrating the process of finding the response of a 
simple system to an “impulse-like” input and comparing it with the true impulse response of the 
system.
EXAMPLE 4.8
A spring-mass-damper system is struck by a hammer resulting in a force f(t) like the one shown in 
Figure 4.7.
	
a.	Find and graph the response x(t) for T = 1, 0.5, 0.1, 0.01 s.
	
b.	Find and graph the impulse response.
	
a.	The differential equation model of the system is
	
mx
cx
kx
f
x
x
x
T u t
u t
T




+
+
=
⇒
+
+
=
−
−
2
4
1[ ( )
(
)]
ˆ
ˆ
	
(4.138)

176
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
Laplace transforming Equation 4.138 with zero initial conditions,
	
(
) ( )
s
s
X s
T s
s
Ts
2
2
4
1 1
+
+
=
−






−
e
	
(4.139)
	
X s
T s s
s
Ts
( )
(
)
=
−
+
+






−
1
2
4
2
1
e
	
(4.140)
	
	
Inverse Laplace transformation of Equation 4.140 eventually results in
	
x t
T
t
t
T
t
t T
( )
e
e (
=
−
+












−
−
−
−−
1
4
1
3
1
3
3
1
4
1
cos
sin
) cos
(
)
sin
(
)
(
)
3
1
3
3
t
T
t
T
u t
T
−
+
−












−
ˆ
	
(4.141)
	
which is simply a linear combination of the step response and a delayed version of the 
step response. Graphs of Equation 4.141 for T = 1, 0.5, 0.1, 0.01 s are generated in the 
M-file “Ch4_Ex3_1.m” and shown in Figure 4.8.
0
–0.05
0
0.05
0.1
0.15
0.2
0.25
0.3
Pulse response for pulse widths T = 0.01, 0.1, 0.5, 1 s and impulse response
1
2
T = 1 s
T = 0.01 s
Impulse response
3
4
5
t (s)
x (t)
FIGURE 4.8  Pulse response of mechanical system for T = 1, 0.5, 0.1, 0.01 s and the impulse response.
FIGURE 4.7  Mechanical system with pulse input f(t).

177
Linear Systems Analysis
	
b.	The true impulse response is obtained by Laplace transforming
	


x
x
x
t
+
+
=
2
4
δ( ) 	
(4.142)
	
⇒
+
+
=
(
) ( )
s
s
X s
2
2
4
1	
(4.143)
	
	
Solving for X(s) followed by inverse Laplace transformation results in
	
x
t
t
t
t
impulse response
e
0
( )
sin
,
=
≥
−
1
3
3
	
(4.144)
It is graphed in Figure 4.8 and appears identical to the response x(t) when the pulse width 
T = 0.01 s. Hence, the impulse response provides an accurate approximation of how the mechan­
ical system responds to inputs of short (relative to the time constants of the system’s ­natural 
modes) duration.
In Section 4.4.2, a mathematical model of a second-order system with input u(t) and output 
y(t) was introduced as an example of how Laplace transforms can be used to solve for the system 
response. The second-order LTI system shown in Figure 4.9 is referred to as a single input–single 
output (SISO) system. The mathematical model is given by
	
d
d
d
d
d
d
d
d
2
2
1
0
2
2
2
1
0
t y t
a
t y t a y t
b
t u t
b
t u t
b u t
( )
( )
( )
( )
( )
( )
+
=
+
+
	
(4.145)
Laplace transforming Equation 4.145, with zero initial conditions for the input, output, and their 
derivatives, leads to
	
Y s
b s
b s
b
s
a s
a
U s
( )
( )
=
+
+
+
+






2
2
1
0
2
1
0
	
(4.146)
The ratio of Y(s) to U(s), when all initial conditions are identically zero, is called the transfer 
function of the system. Denoting it by H(s),
	
H s
Y s
U s
b s
b s
b
s
a s
a
( )
( )
( )
=
=
+
+
+
+






2
2
1
0
2
1
0
	
(4.147)
Consider an nth-order LTI system with transfer function expressible as the ratio of two poly­
nomials in proper fraction form, that is, the denominator polynomial is higher order than the 
numerator polynomial as in
	
H s
b s
b
s
b s
b
s
a
s
a s
a
n
m
m
m
m
m
n
n
n
( ) =
+
+
+
+
+
+
+
+
>
−
−
−
−
1
1
1
0
1
1
1
0


(
)
	
(4.148)
The transfer function in Equation 4.148 is an alternative to the differential equation model 
­representation of the system dynamics. It offers a convenient way of determining the forced 
FIGURE 4.9  Second-order system with input u(t) and output y(t).

178
Simulation of Dynamic Systems with MATLAB® and Simulink®
response of an LTI system. From Equation 4.147, Y(s) is equal to the product of the system transfer 
function H(s) and the Laplace transform of the input,
	
Y s
H s U s
( )
( ) ( )
=
	
(4.149)
and the response is obtained by inverse Laplace transformation y(t) = ℒ−1{Y(s)}.
The following examples illustrate the use of the transfer function to obtain the forced response 
of an LTI system.
EXAMPLE 4.9
A first-order system is governed by the differential equation
	
d
d
0
y
t
y
u
y
+
=
=
2
0
,
( )
	
(4.150)
	
a.	Find H(s), the transfer function of the system.
	
b.	Find y(t), the response when u(t) is (i) sin 3t, t ≥ 0 and (ii) û(t).
	
a.	From Equation 4.148 with n = 1, m = 0, b0 = 1, and a0 = 2
	
H s
b
s
a
s
( ) =
+
=
+
0
0
1
2 	
(4.151)
	
b.	For u(t) = sin 3t, U(s) = 3/(s2 + 9) and Equation 4.149 becomes
	
Y s
H s U s
s
s
( )
( ) ( )
=
=
+
+
1
2
3
9
2
	
(4.152)
	
=
+
−
−
+






3
13
1
2
2
9
2
s
s
s
	
(4.153)
	
=
+
−
+
+
+






3
13
1
2
9
2
3
3
9
2
2
s
s
s
s
	
(4.154)
	
y t
Y s
t
t
t
t
( )
{ ( )}
cos
,
=
=
−
+






≥
−
−
ℒ1
2
3
13
3
2
3
e
sin3
0
	
(4.155)
	
	
For u(t) = û(t), U(s) = 1/s and Equation 4.149 reduces to
	
Y s
H s U s
s
s
s
s
( )
( ) ( )
=
=
+
⋅
=
−
+






1
2
1
1
2
1
1
2 	
(4.156)
	
y t
Y s
t
t
( )
{ ( )}
),
=
=
−
≥
−
−
ℒ1
2
1
2(1
e
0
	
(4.157)
EXAMPLE 4.10
For the system with transfer function,
	
H s
s
s
s
s
s
( )
(
)(
)(
)
=
+
+
+
+
+
2
3
1
3
1
5 	
(4.158)
	
a.	Find the differential equation model of the system.
	
b.	Find the forced response to the input u(t) = t, t ≥ 0.

179
Linear Systems Analysis
	
a.	The differential equation of the system is obtained from H(s) as follows:
	
H s
Y s
U s
s
s
s
s
s
s
s
s
s
s
( )
( )
( )
(
)(
)(
)
=
=
+
+
+
+
+
=
+
+
+
+
+
2
2
3
2
3
1
1
3
5
3
1
9
23
15 	
(4.159)
	
⇒
+
+
+
=
+
+
(
)
(
)
( )
( )
s
s
s
Y s
s
s
U s
3
2
2
9
23
15
3
1
	
(4.160)
	
⇒
+
+
+
=
+
+
s Y s
s Y s
sY s
Y s
s U s
sU s
U s
3
2
2
9
23
15
3
( )
( )
( )
( )
( )
( )
( )
	
(4.161)
	
	
Performing the inverse Laplace transformation of the individual terms with all initial 
conditions zero results in the differential equation
	
d
d
d
d
d
d
d
d
d
d
3
3
2
2
2
2
9
23
15
3
t y t
t y t
t y t
y t
t u t
t u t
u
( )
( )
( )
( )
( )
( )
+
+
+
=
+
+ ( )t
	
(4.162)
	
b.	Substituting U(s) = 1/s2 in Equation 4.149 gives
	
Y s
s
s
s
s
s
s
( ) =
+
+
+
+
+
⋅
2
3
2
2
3
1
9
23
1
1
5
	
(4.163)
The MATLAB statements
n = [1 3 1]; d = [1 9 23 15 0 0];
[R, P] = residue(n, d)
result in the residues and poles of the partial fraction expansion leading to the following expan­
sion for Y(s),
	
Y s
s
s
s
( ) =





+





−
+






1
15
1
22
225
1
1
8
1
1
2
−
+





+
+






1
36
1
3
11
200
1
5
s
s
	
(4.164)
and the forced response is obtained by inverse Laplace transformation of Y(s),
	
y t
t
t
t
t
t
( )
,
=
+
−
−
+
≥
−
−
−
1
15
22
225
1
8
1
36
11
200
3
5
e
e
e
0
	
(4.165)
4.3.4  Relationship between Impulse Response and Transfer Function
The impulse response function and the transfer function of an LTI system are related. Suppose the 
input to an LTI system is a unit impulse function as illustrated in Figure 4.10.
Since Y(s) = H(s)U(s) = H(s) ⋅ 1 = H(s), it follows that
	
Y
t
H s
h t
impulse response( )
{ ( )}
( )
=
=
−
ℒ1
	
(4.166)
FIGURE 4.10  Linear time-invariant system with unit impulse input.

180
Simulation of Dynamic Systems with MATLAB® and Simulink®
In other words, the impulse response of an LTI system is simply the inverse Laplace ­transform of 
the system transfer function. It is denoted h(t) and referred to as the impulse response ­function. The 
impulse response function serves as alternative way of describing the dynamics of an LTI system. 
It can be used to find the forced response to an arbitrary input by first ­finding the transfer function 
H(s) = ℒ{h(t)} and then proceeding in a similar manner to Example 4.10.
Alternatively, the forced response of an LTI system can be obtained directly from
	
y t
H s U s
h t
u
t
( )
{ ( ) ( )}
(
) ( )d
=
=
−
−
∫
ℒ1
0
τ
τ
τ
	
(4.167)
that is, by convolution of the impulse response function h(t) and the input u(t). To illustrate, the unit 
step response of the third-order system in Example 4.10 is obtained using the convolution integral 
in Equation 4.167.
	
H s
s
s
s
s
s
s
s
s
( )
(
)(
)(
)
=
+
+
+
+
+
=
−+ −+
+
+






2
3
1
1
3
5
1
8
1
1
2
3
11
5 	
(4.168)
	
h t
H s
t
t
t
( )
{ ( )}
(
)
=
=
−
−
+
−
−
−
−
ℒ1
3
5
1
8
2
11
e
e
e
	
(4.169)
	
y t
h
u t
t
t
t
( )
( ) (
)
(
)
=
−
=
−
−
+
⋅
∫
∫
−
−
−
τ
τ
τ
τ
τ
τ
d
e
e
e
d
0
0
3
5
1
8
2
11
1
	
(4.170)
	
=
+
−












−
−
−
1
8
2
3
11
5
3
5
0
e
e
e
τ
τ
τ
t
	
(4.171)
	
=
+
+
−
≥
−
−
−
1
15
1
8
1
12
11
40
3
5
e
e
e
0
t
t
t
t
,
	
(4.172)
The initial condition y(0−) = 0 and from Equation 4.172, y(0+) = 0 as well. The response y(t) 
is therefore continuous at t = 0 despite the discontinuity in the step input. In other words, a direct 
coupling from the input to the output does not exist. We should expect this result by observing that 
the third-order differential equation in Equation 4.162 does not contain a term on the right-hand side 
involving the third derivative of the input. If we express the system model in state variable form, the 
1 × 1 direct coupling matrix D would be zero.
A simulation diagram for an LTI system offers a convenient way of defining the states and 
revealing whether a direct path (no integrators) exists from the input to the output. Figure 4.11 shows 
a simulation diagram for the third-order system
	
d
d
d
d
d
d
d
d
d
d
3
3
2
2
2
1
0
3
3
3
2
2
2
t y t
a
t y t
a
t y t
a y t
b
t u t
b
t
( )
( )
( )
( )
( )
+
+
+
=
+
u t
b
t u t
b u t
( )
( )
( )
+
+
1
0
d
d
	
(4.173)
in what is known as observer canonical form (Ogata 1998). This form clearly shows the direct 
path from the input u to the output y when b3 ≠ 0. For the case when b3 = 0, the state x3 is equal 

181
Linear Systems Analysis
to the output y and a direct path exists from u to x3. For a unit step input, the following is true if 
b3 = 0:
	
y
y
y
y
b
a b u
y
b
(
) (
), (
)
(
)
(
) (
)
(
)
0
0
0
0
0
0
2
2 3
2
+
−
+
−
+
−
=
+
−
=
+



	
(4.174)
Consider the third-order system with transfer function given in Equation 4.159 and modeled by 
the differential equation in Equation 4.162. Comparing Equations 4.162 and 4.173 implies a2 = 9, 
a1 = 23, and a0 = 15 and b3 = 0, b2 = 1, b1 = 3, and b0 = 1. Assuming zero initial conditions, the 
first derivative jumps from y(
)
0
0
−=  to 

y
y
b
(
)
(
)
0
0
1
2
+
−
=
+
=  at t = 0.
Differentiating the solution for the unit step response y(t) in Equation 4.172 gives
	
d
d
y
t
t
t
t
=
−
−
+
−
−
−
1
40
5
10
55
3
5
(
e
e
e
)
	
(4.175)
At t = 0+,
	
d
d
y
t (
)
(
)
0
1
40
5
10
55
1
+ =
−−
+
=
	
(4.176)
The system transfer function provides a convenient way of finding the forced response of an 
SISO LTI system. However, finding the transfer function can be a challenge when the mathemati­
cal model of the system consists of coupled algebraic and differential equations as opposed to a 
single nth-order differential equation relating the system input and output. Fortunately, the Laplace 
transform can be used to reduce the problem of finding the transfer function into one of an algebraic 
nature. The alternative, namely, eliminating dependent signals and their derivatives in the time 
domain, is far more cumbersome.
For example, consider the bridged-T network shown in Figure 4.12.
b0 – a0b3
∫
∫
∫
b1 – a1b3
b2 – a2b3
b3
–a0
–a1
–a2
x2
x1
x3
y
u
FIGURE 4.11  Simulation diagram of third-order system in observer canonical form.
FIGURE 4.12  Circuit with input ei and output v0.

182
Simulation of Dynamic Systems with MATLAB® and Simulink®
The node voltage method for analyzing the circuit results in the following equations:
	
e
v
R
C
v
t
v
v
R
i −
=
+
−
1
0
d
d
	
(4.177)
	
C
t e
v
v
v
R
i
2
0
0
0
d
d (
)
−
+
−
=
	
(4.178)
Rearranging Equations 4.177 and 4.178 with node voltage terms on one side and the input terms 
on the other gives
	
RC
v
t
v
v
ei
1
0
2
d
d +
−
=
	
(4.179)
	
RC
v
t
v
v
RC
e
t
i
2
0
0
2
d
d
d
d
+
−=
	
(4.180)
The node voltage v must be eliminated from Equations 4.179 and 4.180 to arrive at a second-
order differential equation involving ei and v0. Laplace transforming both equations with initial 
conditions set to zero and collecting terms produces the algebraic system of equations
	
(
)
( )
( )
(
)
( )
( )
( )
( )
RC s
V s
V s
E s
V s
RC s
V s
RC sE s
i
i
1
0
2
0
2
2
1
+
−
=
−
+
+
=
	
(4.181)
Using Cramer’s rule, the solution for V0(s) is
	
V s
RC s
E s
RC sE s
RC s
RC s
R C C s
RC
i
i
0
1
2
1
2
2
1
2
2
2
2
1
2
1
1
1
2
( )
( )
( )
=
+
−
+
−
−
+
=
+
s
R C C s
R C
C s
E s
i
+
+
+
+
1
2
1
2
1
2
2
1
2
(
)
( )
	
(4.182)
The transfer function is
	
V s
E s
R C C s
RC s
R C C s
R C
C s
i
0
2
1
2
2
2
2
1
2
2
1
2
2
1
2
1
( )
( )
(
)
=
+
+
+
+
+
	
(4.183)
Inverse Laplace transformation of Equation 4.183 leads to the differential equation
	
R C C
v
t
R C
C
v
t
v
R C C
e
t
RC
e
t
e
i
i
i
2
1
2
2
0
2
1
2
0
0
2
1
2
2
2
2
2
d
d
d
d
d
d
d
d
+
+
+
=
+
+
(
)
	
(4.184)
4.3.5  Systems with Multiple Inputs and Outputs
In general, linear systems (and nonlinear systems) have more than a single input and output. Those 
systems and their models are designated multiple input–multiple output, abbreviated as MIMO. 
The transfer function concept still applies.
Suppose, for example, an LTI system such as an electric circuit is driven by independent voltage 
sources e1(t) and e2(t), and signals iR(t), vC(t), and vload(t) appearing at various points in the circuit are 
defined as outputs. A total of six transfer functions exist, one from each of two inputs to each of 
three outputs. We can write

183
Linear Systems Analysis
	
I
s
G
s E s
G
s E s
R( )
( )
( )
( )
( )
,
,
=
+
1 1
1
1 2
2
	
(4.185)
	
V
s
G
s E s
G
s E s
C( )
( )
( )
( )
( )
,
,
=
+
2 1
1
2 2
2
	
(4.186)
	
V
s
G
s E s
G
s E s
load( )
( )
( )
( )
( )
,
,
=
+
3 1
1
3 2
2
	
(4.187)
where
	
G
s
I
s
E s
G
s
I
s
E s
R
E
s
R
E
s
1 1
1
0
1 2
2
0
2
1
,
( )
,
( )
( )
( )
( )
,
( )
( )
( )
=
=
=
= 	
(4.188)
	
G
s
V
s
E s
G
s
V
s
E s
C
E
s
C
E
s
2 1
1
0
2 2
2
0
2
1
,
( )
,
( )
( )
( )
( )
,
( )
( )
( )
=
=
=
= 	
(4.189)
	
G
s
V
s
E s
G
s
V
s
E s
E
s
E
s
3 1
1
0
3 2
2
0
2
1
,
( )
,
( )
( )
( )
( )
,
( )
( )
( )
=
=
=
=
load
load
	
(4.190)
The notation Gij (s) denotes the transfer function from the jth input to the ith output.
Equations 4.185 through 4.187 are a consequence of the principle of superposition that applies 
to linear systems. Superposition implies that the response of a system to multiple inputs applied 
simultaneously is equivalent to the sum of the system responses to the individual inputs applied one 
at a time.
An MIMO system and a method for finding its transfer functions are the focus of the following 
example.
EXAMPLE 4.11
The amount of solute (drug or metabolite) introduced to or produced in the human body is often 
assumed to be stored in different compartments of the body. A separate equation for each com­
partment relates the rate of solute removal to the amount or concentration of the solute in the 
compartment. The solute can either be transported to another compartment or eliminated from 
the body by metabolism or excretion. Consider the linear compartment model described in 
Riggs (1970) for describing the quantities of iodine in humans. The state variables are
x1: Amount of inorganic iodine in the thyroid gland
x2: Amount of organic iodine in the thyroid gland
x3: Amount of hormonal iodine in the extrathyroidal tissue
x4: Amount of iodine in the inorganic iodide compartment
and the inputs are
q3: Rate of entry of exogenous iodide
q4: Rate of entry of exogenous hormonal iodine
The model equations are summarized by the diagram illustrated in Figure 4.13, where k12, k13, 
k21, k24, k31, k43, ku, and kf are the rate constants governing the transfer of iodine between the com­
partments and its excretion from the body.
The outputs are
y1 = x1 + x2 + x3 + x4, total iodine in the body
y2 = kfx3 + kux4, rate of iodine excretion from the body

184
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a.	Write the state equations for the system and find the matrices A, B, C, and D.
	
b.	Draw a block diagram of the system, and label the Laplace transforms of the states xl, x2, 
x3, and x4 and outputs y1 and y2.
	
c.	Find the transfer function Y2(s)/Q4(s).
	
d.	Baseline values of the system parameters are
	
k
k
k
k
12
21
23
34
0 8
0 005
0 01
0 3
=
=
=
=
.
,
.
,
.
,
.
/day
/day
/day
and
/day 	
	
k
k
k
k
f
u
14
41
0 15
0 5
0 02
1 2
=
=
.
,
.
,
.
,
.
/day
/day
/day
and
/day
=
=
	
	
	
Find the steady-state iodine levels in each compartment in response to a daily intake 
of iodine, q4 = 150 µg/day. Assume q3 = 0 µg/day.
	
e.	Find and graph the step response of x2(t) if the daily intake of iodine drops from 
150 (where it has been for a long time) to 50 µg/day.
	
a.	From Figure 4.13, the state equations are
	



x
k
k
x
k x
k x
x
k x
k
k
x
x
k x
1
12
14
1
21 2
41 4
2
12 1
21
23
2
3
23
2
= −
+
+
+
=
−
+
=
(
)
(
)
−
+
+
=
+
−
+
+





(
)
(
)
k
k x
q
x
k x
k x
k
k x
q
f
u
34
3
3
4
14 1
34
3
14
4
4

	
(4.191)
	
y
x
x
x
x
y
k x
k x
f
u
1
1
2
3
4
2
3
4
=
+
+
=
+




+
	
(4.192)
	
	 The matrices A, B, C, and D in x = Ax + Bu and y = Cx + Du where u = [q3 q4]T are
	
A
k
k
k
k
k
k
k
k
k
k
k
k
f
=
−
+
−
+
−
+
−
(
)
(
)
(
)
(
)
12
14
21
41
12
21
23
23
34
14
34
0
0
0
0
0
0
(
)
,
k
k
B
u
41
0
0
0
0
1
0
0
1
+






=





	
(4.193)
	
C
k
k
D
f
u
=






=






1
1
1
1
0
0
0
0
0
0
,
	
(4.194)
FIGURE 4.13  Compartmental model for iodine distribution in a human.

185
Linear Systems Analysis
	
b.	The block diagram is obtained by Laplace transforming the state equations with A, B, 
C, and D given in Equations 4.193 and 4.194, then solving for X1(s), X2(s), X3(s), and 
X4(s) in the respective equations. Introducing the notation k1 = k12 + k14, k2 = k21 + k23, 
k3 = k34 + kf, and k4 = k41 + ku yields
	
X s
s
k k X s
k X s
1
1
21
2
41
4
1
( )
[
( )
( )]
=
+
+
	
(4.195)
	
X s
k
s
k
X s
2
12
2
1
( )
( )
=
+






	
(4.196)
	
X s
s
k
k X s
Q s
3
3
23
2
3
1
( )
[
( )
( )]
=
+
+
	
(4.197)
	
X s
s
k
k X s
k X s
Q s
4
4
14
1
34
3
4
1
( )
[
( )
( )
( )]
=
+
+
+
	
(4.198)
	
	
The block diagram follows immediately from Equations 4.195 through 4.198 and 
Equation 4.192. It is shown in Figure 4.14.
	
c.	The transfer function Y2(s)/Q4(s) can be obtained by graphical methods from the block 
diagram or directly from the model equations. The latter approach is illustrated. Laplace 
transforming the second output equation in Equation 4.192 followed by division of each 
term by Q4(s),
	
Y s
k X s
k X s
f
u
2
3
4
( )
( )
( )
=
+
	
(4.199)
	
⇒
+
Y s
Q s
k X s
Q s
k X s
Q s
f
u
2
4
3
4
4
4
( )
( )
( )
( )
( )
( )
=
	
(4.200)
	
	
Setting Q3(s) = 0 in Equation 4.197 and solving Equations 4.195 through 4.198 for X3(s) 
and X4(s),
FIGURE 4.14  Block diagram of system modeled by Equations 4.192 and 4.195 through 4.198.

186
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
X s
s
k
k
k
k
s
k
k
k
Q s
s
k
s
k
k
3
1
21
41
12
2
23
14
4
4
1
21
0
0
0
0
0
0
0
( )
( )
=
+
−
−
−
+
−
−
+
+
−
0
0
0
0
0
0
41
12
21
23
3
14
34
4
−
−
+
−
+
−
−
+
k
k
s
k
k
s
k
k
k
s
k
	
(4.201)
	
X s
s
k
k
k
s
k
k
s
k
k
k
Q s
s
k
k
4
1
21
12
2
23
3
14
34
4
1
21
0
0
0
0
0
0
0
( )
( )
=
+
−
−
+
−
+
−
−
+
−
0
0
0
0
0
0
41
12
2
23
3
14
34
4
−
−
+
−
+
−
−
+
k
k
s
k
k
s
k
k
k
s
k
	
(4.202)
	
	
Evaluation of the determinants in Equations 4.201 and 4.202 is a tedious process left 
as an exercise problem. The results are as follows:
	
X s
s
a s
a s
a s
a
Q s
3
0
4
3
3
2
2
1
0
4
( )
( )
=
α
+
+
+
+






	
(4.203)
	
X s
s
s
s
s
a s
a s
a s
a
Q s
4
3
2
2
1
0
4
3
3
2
2
1
0
4
( )
( )
=
+
+
+
+
+
+
+






β
β
β
	
(4.204)
	
α
β
β
β
0
12
23
41
0
1 2 3
12
21 3
1
1 2
1 3
2 3
12
21
2
=
=
−
=
+
+
−
k k k
k k k
k k k
k k
k k
k k
k k
,
,
=
+
+




k
k
k
1
2
3 	
(4.205)
	
a
k k k k
k k k k
k k k k
k k k k
a
k k k
k
0
1 2 3
4
14
41 2 3
12
21 3
4
12
23 34
41
1
1 2 3
1
=
−
−
−
=
+
k k
k k k
k k k
k k
k
k
k k
k
k
a
k k
k k
2
4
1 3
4
2 3
4
12
21
3
4
14
41
2
3
2
1 2
1
+
+
−
+
−
+
=
+
(
)
(
)
3
1 4
2 3
2
4
3
4
12
21
14
41
3
1
2
3
4
+
+
+
+
−
−
=
+
+
+



k k
k k
k k
k k
k k
k k
a
k
k
k
k

	
(4.206)
	
	
Combining Equations 4.200, 4.203, and 4.204 produces the desired transfer function,
	
Y s
Q s
k
k s
s
s
s
a s
a s
a s
a
f
u
2
4
0
3
2
2
1
0
4
3
3
2
2
1
0
( )
( )
(
)
=
+
+
+
+
+
+
+
+
α
β
β
β
	
(4.207)
	
d.	The steady-state iodine levels in each compartment are obtained from the state 
­equations  x
Ax
Bu
=
+
 with x = 0.
	
x
A Bu
u
q
q
ss
ss
ss
ss
ss
= −
=





=






−1
3
4
0
150
where
g day
(
)
(
)
µ

	
(4.208)

187
Linear Systems Analysis
	
	
For the given values of the rate constants,
	
xss = −
−
−
−
−



0 95
0 005
0
0 5
0 8
0 015
0
0
0
0 01
0 32
0
0 15
0
0 3
1 7
.
.
.
.
.
.
.
.
.
.















=
−1 0
0
0
0
1
0
0
1
0
150
89.6
4780 9
149 4
122 5
.
.
.





	
(4.209)
	
e.	Using the same method we employed to find X3(s)/Q4(s) and X4(s)/Q4(s), the transfer func­
tion X2(s)/Q4(s) is
	
X s
Q s
s
s
a s
a s
a s
a
2
4
1
0
4
3
3
2
2
1
0
( )
( ) =
+
+
+
+
+
γ
γ
	
(4.210)
	
γ
γ
0
12
41 3
1
12
41
=
=
k k k
k k
,
	
(4.211)
Working backward from the transfer function X2(s)/Q4(s), the differential equation relating x2(t) 
and q4(t) is
	





x
a x
a x
a x
a x
q
q
2
3
2
2
2
1 2
0
2
1 4
0
4
+
+
+
+
=
+
γ
γ
	
(4.212)
Once the initial conditions are established, Equation 4.212 can be solved to find the complete 
step response.
Let us assume the input q4(t) has been constant at 150 µg/day long enough for the system 
to reach the steady-state levels given in Equation 4.209. It is possible to redefine t = 0 as the 
instant when q4(t) switches from 150 to 50 µg/day. Figure 4.15 shows the input dropping from 
q4(0−) = 150 µg/day to q4(0+) = 50 µg/day.
With the system at steady-state at t = 0−, the initial conditions are x2(0−) = 4780.9 µg, 



x
x
x
2
2
2
0
0
0
0
(
)
(
)
(
)
.
−
−
−
=
=
=
 Laplace transforming Equation 4.212,
	
s X s
s x
a s X s
s x
a s X s
sx
4
2
3
2
3
3
2
2
2
2
2
2
2
0
0 1
0
( )
(
[
( )
[
( )
)
(
)
(
)]
−
+
−
+
−
−
−
−
 
+
−
+
=
−
+
−
−
a sX s
x
a X s
sQ s
q
Q s
1
2
2
0
2
1
4
4
0
4
0
0
[
( )
(
)]
( )
[
( )
(
)]
( )
γ
γ
	
(4.213)
Solving for X2(s),
	
X s
s
s
a s
a s
a s
a Q s
x
s
a s
a s
a
2
1
0
4
3
3
2
2
1
0
4
2
3
3
2
2
1
0
( )
( )
(
)(
=
+
+
+
+
+
+
+
+
+
−
γ
γ
)
(
)
−
+
+
+
+
−
γ1 4
4
3
3
2
2
1
0
0
q
s
a s
a s
a s
a
	
(4.214)
where
	
Q s
q t
q
s
4
4
4 0
( )
{
( )}
(
)
=
=
+
ℒ
	
(4.215)
FIGURE 4.15  Step change in input q4(t).

188
Simulation of Dynamic Systems with MATLAB® and Simulink®
M-file “Ch3_Ex3_4.m” uses the “residue” function to evaluate the partial fraction expansion 
of each term on the right-hand side of Equation 4.214. The final expression for X2(s) is of the form
	
X s
c
s
p
i
i
i
2
1
5
( ) =
−
=∑
	
(4.216)
where the system poles are p1 = −1.7901, p2 = −0.8621, p3 = −0.3248, and p4 = −0.0080 
and the input pole p5 = 0. The residues are c1 = 13.6, c2 = −59.1, c3 = 2.4, c4 = 3230.4, and 
c5 = 1593.6. The partial fraction expansion of X2(s) is
	
X s
s
s
s
s
2
13 6
1 7901
59 1
0 8621
2 4
0 3248
3230 4
0 0080
( )
.
.
.
.
.
.
.
.
=
+
−
+
+
+
+
+
+ 1593 6
.
s
	
(4.217)
Inverting X2(s) gives
	
x t
t
t
t
2
1 7901
0 8621
0 3248
0 0
13 6
59 1
2 4
3230 4
( )
.
.
.
.
.
.
.
.
=
−
+
+
−
−
−
−
e
e
e
e
080
1593 6
t +
. 	
(4.218)
Note that a convenient check of x2(t) in Equation 4.218 is
	
x2 0
13 6
59 1
2 4
3230 4
1593 6
4780 9
(
)
.
.
.
.
.
.
−=
−
+
+
+
=
	
which agrees with the initial condition. The step response is shown in Figure 4.16.
The natural modes of the system are e−1.7901t, e−0.8621t, e−0.3248t, and e−0.0080t and the dominant 
time constant τdominant = 1/0.008 = 125 days. It takes approximately 5 × τdominant = 625 days for x2 
to attain the new steady-state value of 1593.6 µg.
There is another property of Laplace transforms that is particularly useful when it comes to 
finding the steady-state response of a system. Known as the Final Value Theorem, it relates the 
steady state or final value of a signal to its Laplace transform, that is,
0
1500
2000
2500
3000
x2 (t), μg
3500
4000
4500
5000
Response of x2(t) following step change in q4(t) from 150 to 50 μg/day
100
200
300
400
t (days)
500
600
FIGURE 4.16  Step response for x2(t) following step change in q4(t) from 150 to 50 µg/day.

189
Linear Systems Analysis
P10:
Given Y(s) = ℒ{y(t)}, if a final value y(∞) exists, it is given by
	
y
y t
sY s
t
s
(
)
lim ( )
lim
( )
∞=
=
→∞
→0
	
(4.219)
For a system with transfer function G(s), the steady-state response to a step input of magnitude 
U0 is
	
y
sY s
sG s U s
sG s U
s
G
U
x
s
s
(
)
lim
( )
lim
( ) ( )
lim
( )
( )
∞=
=
=
=
→∞
→
→
0
0
0
0
0
	
(4.220)
G(0) is referred to as the steady-state gain of the system. The final value property makes it pos­
sible to determine the final value y(∞) from Y(s) without having to find y(t). This is particularly use­
ful when trying to find the steady-state response of a system to a constant input. The input must 
be constant long enough to allow the transient response to vanish. Practically speaking, this is 
roughly four to five times the largest effective time constant of the system.
In Example 4.11, the transfer function Y1(s)/Q4(s) can be expressed as
	
Y s
Q s
X s
X s
X s
X s
Q s
1
4
1
2
3
4
4
( )
( )
( )
( )
( )
( )
( )
=
+
+
+
	
(4.221)
	
=
+
+
+
X s
Q s
X s
Q s
X s
Q s
X s
Q s
1
4
2
4
3
4
4
4
( )
( )
( )
( )
( )
( )
( )
( ) 	
(4.222)
where the last three terms on the right-hand side are obtained from Equations 4.210, 4.203, and 
4.204. The remaining term is left as an exercise. The result is
	
X s
Q s
s
s
s
a s
a s
a s
a
1
4
2
2
1
0
4
3
3
2
2
1
0
( )
( ) =
+
+
+
+
+
+
δ
δ
δ
	
(4.223)
	
δ
δ
δ
0
41 2 3
1
41
2
3
2
41
=
=
+
=
k k k
k
k
k
k
,
(
),
	
(4.224)
making the transfer function
	
G s
Y s
Q s
s
s
s
s
a s
( )
( )
( )
(
)
(
)
=
=
+
+
+
+
+
+
+
+
+
+
1
4
2
2
1
0
0
0
0
4
3
β
δ
β
γ
δ
α
β
γ
δ
2
2
1
1
3
2
2
1
0
+
+
+
a s
a s
a
	
(4.225)
The final value y1(∞) = x1(∞) + x2(∞) + x3(∞) + x4(∞) when q4(t) = 150, t ≥ 0 (same initial 
input in Example 4.11) is
	
y
G
a
1
0
0
0
0
0
0 150
150
0 004
0 00328
(
)
( )
.
.
∞=
⋅
=
+
+
+





⋅
=
+
+
α
β
γ
δ
0 128
0 0024
0 004016
150
5142 4
.
.
.
.
+





⋅
=
µg
	
(4.226)
in agreement with the sum of the components of xss in Equation 4.209.
A word of caution when applying the final value property. A function y(t) could theoretically 
grow without bound, that is, limt→∞y(t) = ∞ or have an undamped oscillatory component, and 
the final value property will nevertheless produce a finite value. Clearly, the result does not rep­
resent a final or steady-state value. We shall investigate the conditions that produce theoretical 
unbounded outputs of a linear system in a future section.

190
Simulation of Dynamic Systems with MATLAB® and Simulink®
4.3.6  Transformation from State Variable Model to Transfer Function
The state-space representation offers several advantages over the input–output transfer function 
method of describing the dynamics of a linear system. For one, it is a more complete representation 
since the states provide useful information about the internal behavior of the system. Properties of 
linear systems such as observability and controllability as well as system identification and state 
feedback are topics normally covered in modern control theory, which rely on state-space models. 
However, there are times when the transfer function of an SISO system (or transfer functions if the 
system is MIMO) is required for a system modeled in state variable form.
Consider an MIMO system with inputs u1, u2, …, ur and outputs y1, y2, …, ym, modeled in state 
space by
	
x
Ax
Bu
=
+
	
(4.227)
	
y
Cx
Du
=
+
	
(4.228)
where x is the n-dimensional state vector [x1 x2 … xn]T and the matrices A, B, C, and D are appropri­
ately dimensioned. Laplace transformation of Equation 4.227 with x(0) = 0 gives
	
sX
AX
BU s
s
s
( )
( )
( )
=
+
	
(4.229)
	
⇒
=
−
−
X
sI
A
BU s
s( )
(
)
( )
1
	
(4.230)
Laplace transforming y = Cx + Du and substituting X(s) from Equation 4.230 gives
	
Y s
C sI
A
B
D U s
( )
[ (
)
] ( )
 
 
=
−
+
−1
	
(4.231)
	
= G s U s
( ) ( ) 	
(4.232)
where G(s), known as the transfer matrix, is a matrix of transfer functions from each of the r inputs 
to each of the m outputs, that is,
	
G s
Y s
U s
ij
i
j
i
m
j
r
( )
( )
( )
,
, ,
,
,
, ,
,
=
=
=
1 2
1 2
…
…
	
(4.233)
To illustrate, let us revisit the state variable model for iodine storage in Example 4.11 where the 
matrices A, B, C, and D are given in Equations 4.193 and 4.194. There are two inputs u1(t) = q3(t) 
and u2(t) = q4(t), and outputs y1(t) and y2(t) are defined in Equation 4.192. One of the four transfer 
functions, namely, Y1(s)/Q4(s), is given in Equation 4.225. Using the baseline parameter values in 
Example 4.11 results in
	
Y s
Q s
s
s
s
s
s
s
1
4
3
2
3
3
2
1 785
0 88655
0 13768
2 985
2 42855
( )
( )
.
.
.
.
.
=
+
+
+
+
+
+
+
0 52054
0 004016
.
.
s
	
(4.234)
The matrix Φ(s) = (sI − A)−1 in Equation 4.231 is computed according to
	
Φ( )
(
)
.
.
.
.
.
.
.
.
s
sI
A
sI
=
−
=
−
−
−
−
−1
0 95
0 005
0
0 5
0 8
0 015
0
0
0
0 01
0 32
0
0 15
0
0 3
1 7
1
.
.
−












−
	
(4.235)

191
Linear Systems Analysis
	
=
+
−
−
−
+
−
+
−
−
+
s
s
s
s
0 95
0 005
0
0 5
0 8
0 015
0
0
0
0 01
0 32
0
0 15
0
0 3
1
.
.
.
.
.
.
.
.
.
.7
1






−
	
(4.236)
Φ(s) is the Laplace transform of the continuous-time system transition matrix Φ(t), used to obtain 
the state response in the time domain. Inverting (sI − A) results in
	
Φ( )
( )
( )
( )
( )
( )
( )
( )
( )
(
s
s
s
s
s
s
s
s
s
s
=
φ
φ
φ
φ
φ
φ
φ
φ
φ
11
12
13
14
21
22
23
24
31
)
( )
( )
( )
( )
( )
( )
( )
φ
φ
φ
φ
φ
φ
φ
32
33
34
41
42
43
44
s
s
s
s
s
s
s





	
(4.237)
where
	
φ11
1
0 015
0 32
1 7
( )
( )[(
.
)(
.
)(
. )]
s
s
s
s
s
=
+
+
+
∆
	
(4.238)
	
φ12
1
0 003
1 2
( )
( )[
.
(
. )]
s
s
s
=
−
+
∆
	
(4.239)
	
φ13
1
0 15
0 015
( )
( )[ .
(
.
)]
s
s
s
=
+
∆
	
(4.240)
	
φ14
1
0 5
0 015
0 32
( )
( )[ . (
.
)(
.
)]
s
s
s
s
=
+
+
∆
	
(4.241)
	
φ21
1
0 8
0 32
1 7
( )
( )[ . (
.
)(
. )]
s
s
s
s
=
+
+
∆
	
(4.242)
	
φ22
3
2
1
2 97
2 388
0 4928
( )
( )[
.
.
.
]
s
s
s
s
s
=
+
+
+
∆
	
(4.243)
	
φ23
1
0 12
( )
( )[
.
]
s
s
=
−
∆
	
(4.244)
	
φ24
1
0 4
0 32
( )
( )[ . (
.
)]
s
s
s
=
+
∆
	
(4.245)
	
φ31
1
0 008
1 7
( )
( )[ .
(
. )]
s
s
s
=
+
∆
	
(4.246)
	
φ32
2
1
0 01
2 65
0 865
( )
( )[ .
(
.
.
)]
s
s
s
s
=
+
+
∆
	
(4.247)

192
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
φ33
2
2
1
2 665
1 57575
0 0163
( )
( )[
.
.
.
]
s
s
s
s
s
=
+
+
+
∆
	
(4.248)
	
φ34
1
0 004
( )
( )[ .
]
s
s
= ∆
	
(4.249)
	
φ42
1
0 00375
0 824
( )
( )[ .
(
.
)]
s
s
s
=
+
∆
	
(4.250)
	
φ43
2
1
0 3
0 965
0 01025
( )
( )[ . (
.
.
)]
s
s
s
s
=
+
+
∆
	
(4.251)
	
φ44
3
3
1
1 285
0 31905
0 00328
( )
( )[
.
.
.
]
s
s
s
s
s
=
+
+
+
∆
	
(4.252)
	
∆
=|
−
|=
+
+
+
+
( )
.
.
.
.
s
sI
A
s
s
s
s
4
3
2
2 985
2 42855
0 52054
0 004016 	
(4.253)
Finally, the transfer function matrix G(s) in Equation 4.232 is given by
	
G s
C
s B
D
( )
( )
=
+
Φ
	
(4.254)
	
=






1
1
1
1
0
0
11
12
13
14
21
22
23
k
k
s
s
s
s
s
s
f
u
φ
φ
φ
φ
φ
φ
φ
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
s
s
s
s
s
s
s
s
s
s
φ
φ
φ
φ
φ
φ
φ
φ
φ
24
31
32
33
34
41
42
43
44












+






0
0
0
0
1
0
0
1
0
0
0
0
	
(4.255)
	
=
+
+
+
+
+
+
φ
φ
φ
φ
φ
φ
φ
φ
φ
13
23
33
43
14
24
34
44
( )
( )
( )
( )
( )
( )
( )
( )
s
s
s
s
s
s
s
s
k f
33
43
43
44
( )
( )
( )
( )
s
k
s
k
s
k
s
u
f
u
+
+






φ
φ
φ
	
(4.256)
The component G12(s) in Equation 4.256 is the transfer function Y1(s)/Q4(s) previously obtained 
in Equation 4.234. The reader can verify that the two are identical.
EXERCISES
	4.6	
Show that the step response of a system whose impulse response function h(t) = 3e−2t + 5δ(t) 
is discontinuous at t = 0.
	4.7	
The differential equation of an LTI system is
	
d
d
d
d
d
d
d
d
3
3
2
2
3
3
5
11
15
2
y
t
y
t
y
t
y
u
t
u
+
+
+
=
+
	
	
a.	 Find the transfer function H(s) = Y(s)/U(s) of the system.
	
b.	 Find the impulse response function h(t) for the system.

193
Linear Systems Analysis
	
c.	 Find the step response when the initial conditions at t = 0− are identically zero.
	
d.	 Find y(∞) using the final value property, and check your answer with the result obtained 
in part (c) as t → ∞.
	
e.	 Find y(0+) using the initial value property and check your answer with the result obtained 
in part (c) as t → 0+.
	
f.	 Find the step response by convolution and compare your answer to the step response 
found in part (c).
	
g.	 Draw a simulation diagram for the system in observer canonical form.
	
h.	 Represent the system in state variable form x
Ax
Bu y
Cx
Du
=
+
=
+
,
.
	
i.	 Find the 1 × 1 transfer function G(s) = Y(s)/U(s) using Equation 4.254.
	4.8	
Repeat Exercise 4.7 when the system differential equation is
	
a.	 d
d
y
t
y
u
+
=
5
10
	
b.	 d
d
d
d
2
2
5
6
y
t
y
t
y
u
+
+
=
	
c.	 d
d
d
d
d
d
3
3
2
2
5
11
15
y
t
y
t
y
t
y
u
+
+
+
=
	4.9	
Use convolution to find the response of the systems with transfer functions
	
a.	 H s
s
s
s
( ) =
+
+
+
3
2
1
2
	
b.	 H s
s
s
( ) =
+
+
1
3
2
2
	
c.	 H s
s
s
s
( ) =
+
+
+
1
2
2
2
	
to the following inputs: (i) u(t) = û(t), (ii) u(t) − û(t) − û(t − 2), and (iii) u(t) = tû(t).
	4.10	 The circuit in Figure E4.10 is governed by the differential equation
	
d
d
d
d
d
d
2
0
2
0
0
1
1
1
v
t
RC
v
t
LC v
C
i
t
g
+
+
=
	
	
Find the impulse response function and plot the results when (a) R = 400 Ω, (b) R = 500 Ω, 
and (c) R = 625 Ω.
	4.11	 Repeat Example 4.10 with H(s) = 1/[(s + 1)(s + 3)(s + 5)].
	4.12	 Find the transfer function of the bridged-T circuit in Figure 4.12 using equations in the 
time domain only to find the differential equation of the circuit.
	4.13	 For the system of interacting tanks shown in Figure E4.13:
	
a.	 Find the transfer functions H s
F
s
H s
F
s
H s
F
s
F s
F
s
i
i
i
i
2
1
1
2
1
1
2
2
( )
( ) ,
( )
( ) ,
( )
( ) ,
( )
( )
,
,
,
,
	
b.	 Find the differential equation relating H1(t) and Fi,2(t).
FIGURE E4.10

194
Simulation of Dynamic Systems with MATLAB® and Simulink®
	4.14	 The unit step response of a system is
	
y t
t
t
t
( )
(
)
= +
+
−
1
3
4
3
2
e
cos
 sin
	
	
a.	 Find the transfer function of the system.
	
b.	 Find the impulse response of the system.
	
c.	 Find the differential equation of the system.
	4.15	 In Example 4.11, find x3(∞) and x4(∞) when q4(t) = 150 µg/day, t ≥ 0 and q3(t) = 0, t ≥ 0 
using the final value property and the expressions for X3(s) and X4(s) in Equations 4.203 and 
4.204. Compare your answer with the results in Equation 4.209.
	4.16	 In Example 4.11, find X1(s)/Q4(s) and compare your answer with the expression in 
Equation 4.223.
	4.17	 In Example 4.11,
	
a.	 Find the transfer functions Y1(s)/Q3(s), Y2(s)/Q3(s) in a form similar to Equation 4.225.
	
b.	 Find the step responses for y1(t) and y2(t) to inputs q4(t) = 50 µg/day, t ≥ 0 and q3(t) = 0, 
t ≥ 0. Assume the initial state is xss in Equation 4.209.
	4.18	 In Example 4.11, verify that the transfer function Y2(s)/Q4(s) in Equation 4.207 is the same as 
G22(s) in Equation 4.256.
4.4  STABILITY OF LINEAR TIME INVARIANT CONTINUOUS-TIME SYSTEMS
In order for a physical system to operate as intended, it must be capable of generating output(s) 
in a stable fashion. Regulation of a process temperature is unsatisfactory if the heat source cycles 
continuously between extremes, that is, off or operating at maximum output, unless it is designed 
to operate that way like a room thermostat. A control system for maintaining a fixed amount of 
­material in a storage tank in the presence of a fluctuating input may not be performing as intended 
if the regulating valve in the input line continually cycles between its limits. Each is a real-world 
example of a control system operating in an unstable manner.
The starting point of an investigation concerning the stability of a system is its mathematical 
model. The discussion is confined to LTI systems. Excluding nonlinear systems may appear to 
significantly limit the range of systems considered. However, nonlinear systems can be linearized 
about specific operating points and stability analyses performed with respect to each operating 
point. The subject of linearization is treated in Chapter 7.
Consider the second-order system model from the previous section,
	
d
d
d
d
d
d
d
d
2
2
1
0
2
2
2
1
0
t y t
a
t y t
a y t
b
t u t
b
t u t
b u t
( )
( )
( )
( )
( )
( )
+
+
=
+
+
	
(4.257)
FIGURE E4.13

195
Linear Systems Analysis
Applying the differentiation property of the Laplace transform and collecting terms, the Laplace 
transform of the system output is
	
Y s
H s U s
b u
s
b u
b u
s
a s
a
y
( )
( ) ( )
(
)
(
)
(
)
=
−
+
+
+
+





+
−
−
−
2
2
1
2
1
0
0
0
0

(
)
(
)
(
)
0
0
0
1
2
1
0
−
−
−
+
+
+
+
s
y
a y
s
a s
a

	
(4.258)
where H(s) is the transfer function
	
H s
Y s
U s
b s
b s
b
s
a s
a
( )
( )
( )
=
=
+
+
+
+
2
2
1
0
2
1
0 	
(4.259)
For zero input, Y(s) reduces to the Laplace transform of the free response, that is,
	
Y
s
y
s
y
a y
s
a s
a
free( )
( )
( )
( )
=
+
+
+
+
0
0
0
1
2
1
0

	
(4.260)
Note that in the absence of an input, the “–” superscript on the initial conditions is no lon­
ger necessary. The free response yfree(t) = ℒ−1 {Yfree(s)} depends on the roots of the equation 
s2 + a1s + a0 = 0. Denoting the roots as p1 and p2, yfree(t) assumes one of the forms in
	
y
t
c
c
p p
c
t
p t
p t
t
free
e
e
 real and distinct
e
cos 
( )
,
,
[
=
+
1
2
1
2
1
1
2
σ
ω +
+
=
=





c
t
p p
c
c t
p
p
p
pt
2
1
2
1
2
1
2
sin 
 complex
e
ω ],
,
(
)
,
	
(4.261)
Constants c1 and c2 depend on the initial conditions y(0) and y(0). The constants σ, ω, p1, p2, and 
p depend on the values of a0 and a1, which are related to the physical parameters of the system. 
For example, a0 and a1 depend on M, B, and K in a mechanical system or R, L, and C for an electrical 
circuit. The free response in Equation 4.261 is also referred to as the natural response of the system. 
It consists of a linear combination of the system’s natural modes.
4.4.1  Characteristic Polynomial
The denominator of the transfer function H(s) in Equation 4.259 is
	
∆( )
(
)(
)
s
s
a s
a
s
p
s
p
=
+
+
=
−
−
2
1
0
1
2 	
(4.262)
It is called the characteristic polynomial of the system and Δ(s) = 0 is the characteristic ­equation. 
The roots of the characteristic polynomial are referred to as the poles of the system transfer ­function, 
and from Equations 4.259 and 4.262, H(p1) = H(p2) = ∞.
The stability of the system is related to the free response, specifically the limit L
y
t
t
free
=
→∞
lim
( ), 
when one or both initial conditions are nonzero. The following possibilities exist:
	
1.	L = 0.
	
2.	L = constant ≠ 0.
	
3.	L fails to exist because the free response oscillates with constant amplitude.
	
4.	L fails to exist because the magnitude of the free response approaches infinity.
The system is said to be asymptotically stable in the first case, marginally stable in the second 
and third cases, and unstable in the last case.

196
Simulation of Dynamic Systems with MATLAB® and Simulink®
Since the poles p1 and p2 dictate the behavior of the free response, they also determine the 
nature of the system’s stability. As a result, we can infer that the stability of the second-order linear 
system in Equation 4.257 is an inherent system property, that is, it depends on the values of the 
system parameters and not on the system inputs. The previous statement is entirely general and not 
restricted to the second-order system under consideration. The different possibilities for the poles of 
H(s) in Equation 4.259 are illustrated in Figure 4.17.
In (a), (b), (c), (d), and (e), the poles p1 and p2 are real and distinct. From Equation 4.261, the free 
response is the linear combination of natural modes e p t
1  and e p t
2 . Since
	
lim
,
,
,
t
pt
p
p
p
→∞
=
<
=
∞
>





e
0
0
1
0
0 	
(4.263)
the two natural modes decay to zero in (a), and the limit L = 0. Therefore, (a) corresponds to an 
asymptotically stable system. In (b), one of the natural modes grows monotonically over time and 
L fails to exist. Hence, (b) represents an unstable system. A similar analysis of the remaining cases 
(c) through (k) leads to the results shown in Table 4.2.
In summary, the second-order system with transfer function in Equation 4.260 is asymptotically 
stable provided the two poles are located entirely in the left half of the complex plane. The system is 
unstable if one or both of its poles lie in the right half of the complex plane or if it has a double pole 
at the origin. Lastly, it is marginally stable if there is a single pole at the origin and the other pole is 
negative or there exists a pair of purely imaginary poles located on the imaginary axis. The Routh–
Hurwitz stability condition is a simple test for the presence of right-half-plane poles of the transfer 
function for an nth order LTI system (Dorf and Bishop 2005).
FIGURE 4.17  Possible locations for transfer function poles of a second-order system.

197
Linear Systems Analysis
An alternate definition of asymptotic stability is based on the system’s forced response. It states 
that for a system to be asymptotically stable, its response to any bounded input must remain bounded 
over time. The same conclusions with respect to the pole locations of an asymptotically stable 
­system shown in Table 4.2 apply to this alternate definition as well.
Systems that are not asymptotically stable according to this definition, that is, bounded input–
bounded output (BIBO), are classified as marginally stable or unstable. In the case of a marginally 
stable system, the forced response to a bounded input may or may not be bounded depending on the 
input. Consider case (d) in Figure 4.17 where one of the poles is s = 0 and the other is located along 
the negative real axis. In particular, suppose the second pole is s = −2 and the second-order system 
transfer function is
	
H s
s
s s
( )
(
)
=
+
+
3
2 	
(4.264)
The forced response to input u1(t) = sin t, t ≥ 0 is obtained as follows:
	
Y s
H s U s
s
s s
s
s
s
s
s
s
1
1
2
2
2
3
2
1
1
1 5
0 1
2
1 4
1
0 2
( )
( )
( )
(
)
.
.
.
.
=
=
+
+
+ =
−+
−
+ −
+1 	
(4.265)
	
y t
t
t
t
t
1
2
1 5
0 1
1 4
0 2
0
( )
e
cos
sin
=
−
−
−
≥
−
.
.
.
.
,
	
(4.266)
The forced response to input u2(t) = 1, t ≥ 0 is obtained in similar fashion.
	
Y s
H s U s
s
s s
s
s
s
s
2
2
2
3
2
1 5
0 25
0 25
2
( )
( )
( )
(
)
.
.
.
=
=
+
+
=
−
+
+
	
(4.267)
	
y t
t
t
t
2
2
1 5
0 25
0 25
( )
.
.
.
=
−
+
≥
−
e
,
0 	
(4.268)
In both instances, the input is a bounded function of time. The output y1(t) remains bounded while 
the system response y2(t) is unbounded as a result of the first term. Careful examination of the system 
TABLE 4.2
Poles, Natural Modes, and Stability for a Second-Order System
Poles
Natural Modes
System Stability
(a) p1 < 0, p2 < 0
e p t1 , e p t
2
Asymptotically stable
(b) p1 < 0, p2 > 0
e p t1 , e p t
2
Unstable
(c) p1 > 0, p2 > 0
e p t1 , e p t
2
Unstable
(d) p1 < 0, p2 = 0
1, e p t1
Marginally stable
(e) p1 = 0, p2 > 0
1, e p t
2
Unstable
(f) p1 = p2 = p < 0
ePt, tePt
Asymptotically stable
(g) p1 = p2 = p = 0
1, t
Unstable
(h) p1 = p2 = p > 0
ePt, tePt
Unstable
(i) p1, p2 = σ ± jω (σ < 0)
eσt cos ωt, eσt sin ωt
Asymptotically stable
(j) p1, p2 = ± jω
cos ωt, sin ωt
Marginally stable
(k) p1, p2 = σ ± jω (σ > 0)
eσt cos ωt, eσt sin ωt
Unstable

198
Simulation of Dynamic Systems with MATLAB® and Simulink®
transfer function in Equation 4.264 reveals that the only bounded inputs capable of producing an 
unbounded output are those whose Laplace transform contains a pure “s” term in the denominator. 
In other words, the input must either be a constant or a sum of bounded time functions containing a 
constant.
The forced response of an unstable system to a bounded input is always unbounded due to the 
presence of an unstable natural mode (see Table 4.2) which appears in the response. For example, 
the forced response of a second-order system with a double pole at s = 0 (case [g] in Figure 4.17) to 
any bounded input contains the unstable mode “t” and is always unbounded.
A higher order LTI system is unstable if the transfer function contains one or more right-half-
plane poles, the same as for a second-order system. It is not surprising since the characteristic 
­polynomial of an nth-order system can always be factored into a number of linear and quadratic 
factors with real coefficients. Using partial fraction expansion, the transfer function with factored 
denominator can be decomposed into a sum of first- and second-order systems. For example, 
­consider the fifth-order system with transfer function given by
	
H s
Y s
U s
s
s
s
s
s
s
s
s
s
( )
( )
( )
=
=
+
+
+
+
+
+
+
+
+
7
19
45
62
52
5
12
26
32
24
4
3
2
5
4
3
2
	
(4.269)
With the help of the MATLAB “residue” function,
	
H s
s
s
s
s
s
s
( ) =
+
+
+
+
+
+
+
2
2
4
1
2
2
5
3 	
(4.270)
and the output Y(s) = H(s)U(s) of the fifth-order system can be expressed as
	
Y s
s
s
U s
s
s
s
U s
s
U s
( )
( )
( )
( )
=
+
+
+
+
+
+
+
2
2
4
1
2
2
5
3
	
(4.271)
The system is marginally stable as a result of the complex poles at s = ±j2 located on the 
­imaginary axis. The remaining poles at s = −1 ± j and s = −3 are associated with stable 
­natural modes. The step response of the system with transfer function in Equation 4.269 remains 
bounded. However, the bounded inputs u(t) = sin 2t or u(t) = cos 2t result in an (s2 + 4)2 term 
in the ­denominator of Y(s) and t sin 2t or t cos 2t terms in the output y(t). Hence, a bounded step 
response is necessary but not a sufficient condition for asymptotic stability of LTI systems.
For MIMO systems, the number of transfer functions can grow quickly. However, since stability 
is an intrinsic property of the system, that is, independent of the system inputs, it is not necessary to 
investigate each and every transfer function to determine if the system is stable. We shall soon see 
that the denominator polynomial of each transfer function is identical and, therefore, must be the 
characteristic polynomial of the system, Δ(s).
The transfer function matrix G(s) of a MIMO system is the matrix whose ijth element is the 
transfer function Yi(s)/Uj(s). From the previous section,
	
G s
C sI
A
B
D
C
s B
D
( )
(
)
( )
=
−
+
=
+
−1
Φ
	
(4.272)
where
A is the n × n coefficient matrix
B, C, and D are the other matrices in the state variable model description

199
Linear Systems Analysis
The inverse of sI − A is Φ(s), which can be expressed in terms of the adjoint of matrix sI − A and 
its determinant according to
	
Φ( )
(
)
s
sI
A
sI
A
sI
A
=
−
=
−
−
−1
1
Adj(
)
	
(4.273)
It follows from Equations 4.272 and 4.273 that every component transfer function of G(s) has the 
same denominator, that is, the nth-order polynomial
	
|
−
| =
+
+
+
+
+
−
−
−
−
sI
A
s
a
s
a
s
a s
a
n
n
n
n
n
1
1
2
2
1
0

	
(4.274)
Hence, the stability of a linear system described by the state variable model 
x
Ax
Bu y
Cx
Du
=
+
=
+
,
 depends solely on the coefficient matrix A. Furthermore, it is immate­
rial whether the system is SISO with one transfer function or MIMO with several transfer functions; 
the coefficient matrix A is all we need to determine whether the system is asymptotically stable, 
marginally stable, or unstable.
This is consistent with the earlier statement that the stability of the second-order system modeled 
by the differential equation in Equation 4.258 depends strictly on the constants a0 and a1. After all, 
the 2 × 2 coefficient matrix A, while not unique, is determined entirely by a0 and a1. One choice for 
the states is x1 = y and x2 =  y that leads to
	
A
a
a
= −
−






0
1
0
1 	
(4.275)
The characteristic polynomial in Equation 4.262 and the nth-order polynomial in Equation 4.274 
with n = 2 are identical, that is,
	
∆( )s
s
a s
a
sI
A
=
+
+
=
−
|
|
2
1
0
	
(4.276)
A compartment model for iodine storage in humans was presented in Example 4.11. The M-file 
“Ch4_iodine.m” computes the coefficient matrix
	
A =
−
−
−
−



0 95
0 005
0
0 5
0 8
0 015
0
0
0
0 01
0 32
0
0 15
0
0 3
1 7
.
.
.
.
.
.
.
.
.
.



	
The characteristic polynomial was given as
	
∆( )
.
.
.
.
s
s
s
s
s
=
+
+
+
+
4
3
2
2 985
2 42855
0 52054
0 004016 	
(4.277)
It is left as an exercise (Exercise 4.21) to show that expansion of the determinant |sI − A| 
­produces the characteristic polynomial given in Equation 4.277. The characteristic roots (poles of 
the system transfer functions) can be obtained by finding the roots of Δ(s) = 0 in Equation 4.277 or 
equivalently the roots of
	
∆( )s
sI
A
=
−
= 0 	
(4.278)

200
Simulation of Dynamic Systems with MATLAB® and Simulink®
that are also referred to as the eigenvalues of matrix A. The MATLAB functions 
'roots[1 2.985 2.43855 0.52054 0.004016]' and “eig(A)” both return the characteristic 
roots −1.7901, −0.8621, −0.3248, and −0.0080. Since all the characteristic roots are in the left half 
of the complex plane, the system is asymptotically stable.
4.4.2  Feedback Control System
Real-world processes are nonlinear and may possess one or more equilibrium states. Linear models 
used to approximate the dynamics in the neighborhood of the equilibrium points are for the most 
part stable. However, control systems designed to improve some aspect of the system’s performance 
may in fact produce the opposite effect. An example is presented of a stable open-loop system under 
closed-loop control, which can produce unstable modes in the natural response if the control system 
parameters are chosen incorrectly.
Figure 4.18 shows a simplified block diagram of a feedback control system for controlling the 
heading or yaw angle of a small ship. The open-loop system consists of the power converter (motor 
and gears that control the ship’s rudder) modeled by a first-order lag with gain Kp = 10° (rudder)/V 
and time constant τp = 7.5 s. The ship’s yaw dynamics include a gain Ks = 0.5° (heading)/s/° 
(­rudder) and time constant τS = 7.5 s resulting in a sluggish response to changes in rudder position. 
A feedback closed-loop control system is implemented to improve the response. θcom(s) and θ(s) are 
Laplace transforms of the commanded and actual ship headings, respectively. E(s) is the Laplace 
transform of the error signal input to the controller.
The closed-loop system transfer function θ(s)/θcom(s) is obtained by eliminating E(s) and U(s) 
from the following three equations:
	
E s
s
s
( )
( )
( )
com
=
−
θ
θ
	
(4.279)
	
U s
K
s
s
E s
C
( )
( )
=
+
+






1
10
	
(4.280)
	
θ( )
.
( .
) ( .
)
( )
s
s
s
s
U s
=
+






+






0 5
7 5
1
10
0 2
1
	
(4.281)
The result is
	
θ
θ
( )
( )
(
)
.
.
(
)
s
s
K
s
s
s
s
K
s
K
C
C
C
com
=
+
+
+
+
+
+
5
1
1 5
22 7
78
5
2
5
4
3
2
	
(4.282)
FIGURE 4.18  Block diagram of control system for ship heading.

201
Linear Systems Analysis
The characteristic polynomial is
	
∆
=
+
+
+
+
+
( )
.
.
(
)
s
s
s
s
K
s
K
C
C
1 5
22 7
78
5
2
5
4
3
2
	
(4.283)
For every value of controller gain KC, there are four closed-loop system poles, which are the 
solutions to the characteristic equation, Δ(s) = 0. Root-locus (Dorf and Bishop 2005) is a graphical 
design method used by control system engineers to plot the poles as the gain parameter KC varies 
from 0 to ∞. There are four branches or loci, each containing one of the poles.
The M-file “Ch4_feedback_yaw.m” produces a root-locus plot shown in Figure 4.19a. When 
the gain KC = 10, Δ(s) has two linear factors with real poles at s = −3.922 and s = −10.525 and a 
quadratic factor with a pair of complex poles located at −0.343 ± j0.831 (see Figure 4.19b).
The quadratic factor damping ratio, natural frequency, damped natural frequency, and effective 
time constant are shown in Table 4.3.
The natural response of the closed-loop system (KC = 10) is given by
	
θnat( )
e
e
e
cos
t
c
c
c
t
c
t
t
t
=
+
+
+
−
−
−
1
0 095
2
0 255
2 914
3
4
0 831
/ .
/ .
/ .
[
( .
)
sin ( .
)]
0 831t
	
(4.284)
The closed-loop system response, when KC = 10, is faster than the open-loop system as 
­evidenced by the reduction in dominant time constant from 7.5 to 2.914 s.
Suppose the ship is maintaining a heading of 0° (with the rudder angle at 0°) when it becomes 
necessary to increase the heading by 5°. In the open-loop system, a pulse input to the power converter 
and rudder subsystem is selected to produce the new desired heading. A pulse is specified rather 
than a step input because the rudder angle must return to zero once the new heading is achieved. 
What would happen if a step input were applied? For a pulse input of magnitude A and duration T,
	
u t
A
Au t
T
t
( )
(
),
=
−
−
≥0 	
(4.285)
the ship’s heading is from Equation 4.281
	
θopen-loop( )
.
( .
) ( .
)
(
e
s
s
s
s
A
=
+






+






−
−
0 5
7 5
1
10
0 2
1
1
Ts
s
)
	
(4.286)
FIGURE 4.19  (a) Root-locus plot. (b) Zoom in near complex poles where KC = 10.

202
Simulation of Dynamic Systems with MATLAB® and Simulink®
The inverse Laplace transform, θopen-loop(t) = ℒ−1{θopen-loop(s)}, is obtained by partial fraction 
expansion of Equation 4.286 without the 1 − e−Ts followed by the shifting property P3 introduced 
in Section 4.4.2. It is left as an exercise to find θopen-loop(t) and show that the final value, that is, new 
heading, is
	
θopen-loop(
)
∞=
=
K K AT
AT
p
S
5
	
(4.287)
The closed-loop system response with KC = 10 to a command heading of 5° is obtained from 
Eauation 4.282 as
	
θclosed-loop( )s
s
s
s
s
s
s
=
+
+
+
+
+
⋅
50
1
1 5
22 7
78
60
50
5
4
3
2
(
)
.
.
	
(4.288)
Using the MATLAB “residue” function to find the residues (partial fraction expansion coef­
ficients) and poles of θclosed-loop(s) in Equation 4.288 results in
	
R
R
R R
j
R
p
1
2
3
4
5
1
0 2188
1 3934
3 0873
0 6270
0
10 5254
=−
=
=−
=
=−
.
,
.
,
,
.
.
,
.
∓
,
.
,
,
.
.
,
p
p p
j
p
2
3
4
5
3 9215
0 3432
0 8305
0
=−
=−
=
∓
	
(4.289)
enabling θclosed-loop(s) to be expressed as the sum
	
θclosed-loop( )s
R
s
p
i
i
i
=
−






=∑
1
5
	
(4.290)
Invert Laplace transforming Equation 4.290 gives the time domain response
	
θclosed-loop
e
   
( )
,
t
R
t
i
pit
i
=
≥
=∑
0
1
5
	
(4.291)
The third and fourth terms involve complex coefficients and complex exponentials,
	 R
R
j
j
p
t
p
t
j
t
3
4
0 343
0 831
3
4
3 087
0 627
3 087
0
e
e
e
+
= −
−
+ −
+
−
+
(
.
.
)
(
.
.
(
)
.
.
627
0 343
0 831
) (
)
.
.
e −
−j
t
	
(4.292)
TABLE 4.3
Closed-Loop System Properties (KC = 10)
Characteristic polynomial
Δ(s) = 1.5s4 + 22.7s3 + 78s2 + 60s + 50
Poles
p1 = −10.525, p2 = −3.922, p3, p4 = −0.343 ± j0.831
Factors
s2 + 0.686s + 0.808, s + 10.53, s + 3.92
Damping ratio
ζ = 0.382
Natural frequency
ωn = 0.899 rad/s
Damped natural frequency
ωd = 0.831 rad/s
Time constants
τ
τ
τ
ζω
1
1
2
2
1
0 095
1
0 255
1
2 914
== −
=
= −
=
=
=
p
p
n
.
,
.
,
.
s
s
s

203
Linear Systems Analysis
It is inadvisable to express the real-valued closed-loop response θclosed-loop(t) in terms of com­
plex exponentials with complex coefficients. However, computing and plotting the response using 
MATLAB to evaluate the terms in Equation 4.292 produce real numbers because R3ep3t + R4ep4t is 
real-valued for all values of t. In fact, it is easily shown that θclosed-loop(t) reduces to the real expression
	
θclosed-loop
e
e
e
( )
.
.
.
.
.
t
t
t
=−
+
−
−
−
−
0 2188
1 3934
10 5254
3 9215
0 3432t
t
t
t
[
(
)
(
]
.
.
.
.
,
6 175
0 8305
1 254
0 8305
5
0
cos
sin
−
+
≥
	
(4.293)
The open-loop response with A = 0.1, T = 10 s and closed-loop response with KC = 10 are 
­plotted in Figure 4.20.
Figure 4.19a shows that the quadratic factor poles migrate to the right-half plane producing a 
pair of unstable modes when the gain KC is larger than the critical gain Kcrit. An approximation of 
Kcrit is possible by varying KC in Equation 4.283 until the MATLAB “roots” function indicates 
the presence of a pair of imaginary poles located on the imaginary axis. After several attempts at 
locating the critical gain, the approximate result is KC = 166.19, and the poles of the marginally 
stable closed-loop system are located at approximately −14.0705, −0.000011 ± j6.086566, 1.0627.
Increasing KC further produces an unstable system. Figure 4.21 shows the heading response for 
the closed-loop system with KC = 166.19. Note the sustained oscillations in the marginally stable 
­system. An unstable response corresponding to KC = 175 is also shown in Figure 4.21. The increas­
ing magnitude of oscillations in the unstable system results from a pair of complex poles in the 
right-half plane at 0.0601 ± j6.2285.
Applying the final value property to the closed-loop transfer function in Equation 4.282 gives
	
θss
s
C
C
C
s
K
s
s
s
s
K
s
K
=
+
+
+
+
+
+





→∞
lim
(
)
.
.
(
)
5
1
1 5
22 7
78
5
2
5
4
3
2


=
θ
θ
com
com
s
	
(4.294)
Equation 4.294 holds as long as the control system is asymptotically stable, that is, KC < Kcrit.
0
0
1
2
3
4
θ(t), (deg)
5
6
Closed-loop, KC = 10
Open-loop, A = 0.1, T = 10
7
8
Open-loop and stable closed-loop ship heading response
5
10
15
20
25
30
35
40
t (s)
FIGURE 4.20  Ship heading response with open- and closed-loop control.

204
Simulation of Dynamic Systems with MATLAB® and Simulink®
The previous example illustrates the concept of stability for an LTI system. The results are predi­
cated on the system response being confined to a range of values for which the linear model is an 
accurate representation of the actual system’s dynamics. Furthermore, limitations on power con­
sumption, component displacements, velocities, etc., must also be satisfied. For example, the design 
of the ship heading control system using the proportional controller with gain KC = 10 could result 
in an unrealizable rudder response. A strong argument for simulation is that it allows us to check 
and monitor such assumptions.
EXERCISES
	4.19	 For the systems governed by the following differential equations:
(a) y
u
=
 (an integrator)
(b) y
u
=
 (a double integrator)
(c) y
y
u
+
=
2
(d) y
y
u
– 2 =
(e) 

y
y
y
u
+
+
=
1 5
0 5
.
.
(f) y
y
u
+
=
4
(g) y
y
u
– 9 =
(h) 



y
y
y
y
y
u
+
+
+
=
+
4
6
5
2
(i) 



y
y
y
y
y
u
+
+
+
+
=
2 5
2
2 5
.
.
	
determine whether the system is asymptotically stable, marginally stable, or unstable, and 
find the natural response, that is, a linear combination of the natural modes.
	4.20	 Find the characteristic polynomial and characteristic roots of the system with state equation
	
a.	 x
x
u
x
=
−






+






0
1
2
3
0
1
1
0
, [
]
	
b.	 x
x
u
u
=
−
−
−






+









0
0
1
0
1
0
2
1
2
0
0
1
0
0
1
1
2
















, 1
0
0
1
1
2
x
x
0
0.5
1
1.5
2
2.5
3
3.5
4
θ(t), (deg)
KC = 166.19
KC = 175
10
8
6
4
2
0
–2
Marginally stable and unstable heading control system responses
t (s)
FIGURE 4.21  Heading response for marginally stable and unstable closed-loop system.

205
Linear Systems Analysis
	
c.	 x
x
x
=
−
−
−
−
−






20
4
8
40
8
20
60
12
26
1
0
1
, [
]
	4.21	 Show that |sI − A| = s4 + 2.985s3 + 2.42855s2 + 0.52054s + 0.004016 when A is the coef­
ficient matrix given by
	
A =
−
−
−
−



0 95
0 005
0
0 5
0 8
0 015
0
0
0
0 01
0 32
0
0 15
0
0 3
1 7
.
.
.
.
.
.
.
.
.
.



	
	4.22	 Derive the expression for the closed-loop transfer function θ(s)/θcom(s) in Equation 4.282.
	4.23	 Starting with the Laplace transform θopen-loop(s) of the open-loop system
	
θ
τ
τ
open-loop( )
(
) (
)
( )
s
K
s
s
K
s
U s
P
P
S
S
=
+






+






1
1
	
	
a.	 Find θopen-loop(t) in response to the pulse input given in Equation 4.285. Leave your answer 
in terms of the KP, KS, τp, τS and the pulse parameters A and T.
	
b.	 Verify Equation 4.287 for the final value θopen-loop(∞).
	
c.	 Verify the open-loop pulse response shown in Figure 4.20.
	
d.	 Find and plot the open-loop step response
	
i.	 As the limit as T → ∞ of the open-loop pulse response.
	
ii.	 By inverse Laplace transformation of θopen-loop(s) when U(s) = A/s.
	4.24	 In the ship heading example, the input to the ship yaw dynamics in Figure 4.18 is R(s), the 
rudder angle in degree.
	
a.	 Find the transfer function R(s)/θcom(s).
	
b.	 Find and plot a graph of r(t) for the case where θcom(t) = 5°, t ≥ 0 and KC = 10. Comment 
on the results.
	
c.	 For the same command input θcom(t) = 5°, t ≥ 0 as in part (b), find the maximum control­
ler gain KC for which the rudder deflection never exceeds 30°. Plot r(t) and θ(t) for a time 
sufficient for the system to reach steady state.
	4.25	 For the closed-loop system to control the ship’s heading
	
a.	 Find the fourth-order differential equation relating the output θ(t) and input θcom(t).
	
b.	 Find a suitable choice for matrices A, B, C, and D in the state variable form x = Ax + Bu, 
y = Cx where u = θcom and y = θ. Leave your answers in terms of the system parameters 
KC, KP, KS, τP, and τS.
	
Hint: Draw a simulation diagram.
	
c.	 Choose the same values for KP, KS, τP, and τS as in the example. Find the characteristic 
polynomial Δ(s) as a function of KC by evaluating |sI − A|.
	
d.	 Prepare a table with two columns. The first column contains values of KC = 1, 5, 10, 25, 
50, 75, …, 200 V/deg heading, and the second column lists the four closed-loop system 
poles.
	
e.	 Use the MATLAB M-file “Ch4_feedback_yaw.m” or write your own to find the value(s) 
of KC that results in an underdamped quadratic factor of Δ(s) with damping ratio equal 
to 0.5.

206
Simulation of Dynamic Systems with MATLAB® and Simulink®
	4.26	 The water current speed vw(t) influences the angle of the ship’s rudder and is considered a load 
variable or disturbance. The open-loop system is redrawn to reflect the disturbance input in 
Figure E4.26:
	
The load gain KL can be assumed constant if the angle between the ship’s rudder and the water 
current direction is relatively constant.
	
a.	 Find the closed-loop transfer functions θ
θ
θ
θ
( )
( )
( )
( )
( )
s
s
s
V
s
V
s
W
W
com
and
com(s)
=
=
0
0
	
where
	
θ
θ
θ
θ
θ
θ
( )=
com
com
com
s
s
s
s
s
V
s
V
s
W
W
s
( )
( )
( )
( )
( )
( )
( )
=






+
=
0
0






V
s
W( )
	
	
b.	 Find θ(t) when θcom(t) = 0, t ≥ 0 and vW(t) = 2 kn, t ≥ 0. Assume the parameter values KP, 
KS, τP, and τS are the same as in the example. The controller gain KC = 7.5 V/deg heading 
and the load gain KL = 0.5° rudder/kn.
	4.27	 A ship with parameters KP, KS, τP, and τS given in the text is traveling in its intended ­direction, 
due North as shown in Figure E4.27. The ship cruising speed is 20 kn. The ocean current 
­suddenly switches from zero to five knots in an east-to-west direction. Find the ship’s heading 
θ(t) with the control system gain KC = 5 V/deg heading.
Hint: Find the new command heading to keep the ship traveling due north.
4.5  FREQUENCY RESPONSE OF LTI CONTINUOUS-TIME SYSTEMS
The response of LTI continuous-time systems to sinusoidal inputs is of interest because it provides 
an alternative to time domain methods based on the impulse response function to characterize 
FIGURE E4.26
FIGURE E4.27

207
Linear Systems Analysis
the system’s dynamics. A nonperiodic signal f(t) can be resolved into sinusoidal functions over a 
­continuum of frequencies according to Jackson (1991)
	
f t
F j
j t
( )
(
)e
=
−∞
∞
∫
1
2π
ω
ω
ω d
	
(4.295)
where the sinusoidal functions are the complex exponentials
	
e
cos
sin
j t
t
j
t
ω
ω
ω
ω
=
+
−∞<
<∞
(
) 	
(4.296)
and the function F(jω) is given by
	
F j
f t
t
j t
(
)
( )e
ω
ω
=
−∞
∞
∫
d
	
(4.297)
The complex-valued function F(jω) is called the Fourier integral or Fourier transform of the 
signal f(t). Entire books have been written on the Fourier transform and its applications (Papoulis 
1962; Bracewell 1986) while other books in the area of signals and systems (Kailath 1980; Jackson 
1991; Kraniauskas 1992) include considerable coverage of the topic. F(jω) is a function that assumes 
complex values over the frequency range (−∞, ∞). In polar form, F(jω) is written as
	
F j
A j
A j
F j
j
F j
j
j
(
)
(
)e
, (
)
(
)
and
(
)
Arg[ (
)]
(
)
ω
ω
ω
ω
ω
ω
ω
=
= |
=
|
φ
φ
	
(4.298)
where the magnitude A(jω) is called the Fourier spectrum of f(t).
In rectangular form,
	
F j
R j
jX j
R j
F j
X j
F j
(
)
(
)
(
)
(
)
{ (
)}
(
)
{ (
)}
,
,
ω
ω
ω
ω
ω
ω
ω
=
+
=
=
Re
Im
	
(4.299)
If f(t) is causal, that is, f(t) = 0, t < 0, it can be expressed as a continuum of the real sinusoidal 
functions cos ωt or sin ωt (Papoulis 1962)
	
f t
R j
t
X j
t
t
( )
(
)cos
(
)sin
,
=
−
>
∞
∞
∫
∫
2
2
0
0
π
π
ω
ω
ω
ω
ω
ω
d
=
d
0
	
(4.300)
implying that R(jω) and X(jω) are not independent.
Suppose an LTI system with transfer function H(s) is subjected to an input u(t) with Fourier 
transform U(jω). By a convolution property similar to the one for Laplace transforms, the Fourier 
transform of the output y(t) is given by
	
Y j
H j
U j
(
)
(
) (
)
ω
ω
ω
=
	
(4.301)
where H(jω) is the system transfer function with s replaced by jω. H(jω) is called the frequency 
response function of the system. It follows from Equation 4.295
	
y t
H j
U j
j t
( )
(
) (
)e
=
−∞
∞
∫
1
2π
ω
ω
ω
ω d
	
(4.302)

208
Simulation of Dynamic Systems with MATLAB® and Simulink®
and, therefore, each input component (1/2π)U (jω)ejωt in the continuum of frequencies from −∞ 
to ∞ is scaled by H(jω) and integrated over (−∞, ∞) to form the output y(t). If the input u(t) = U0 
cos ω0t, its Fourier transform is (Jackson 1991)
	
U j
U
(
)
[ (
)
(
)]
ω
δ ω
ω
ω
ω
=
+
+
+
0
0
0
π
δ
	
(4.303)
and Equation 4.302 reduces to (see Exercise 4.28)
	
y t
U
H j
t
H j
( )
(
)
{
[
(
)]}
=
⋅
+
|
|
0
0
0
0
ω
ω
ω
cos
Arg
	
(4.304)
The amplitude of the output is equal to the amplitude of the input multiplied by the magnitude of 
the frequency response function evaluated at ω0. The phase angle (with respect to the input) equals the 
argument of the frequency response function at ω0. Equation 4.304 is an essential property of linear sys­
tems and the foundation of AC steady-state analysis of electric circuits. Equation 4.304, valid for stable 
LTI systems, applies only in the steady state, that is, after the system’s natural response has vanished.
In the case of nonlinear systems, the steady-state output in response to a sinusoidal input with 
frequency ω0 contains sinusoids at harmonic frequencies 2ω0, 3ω0, 4ω0, … along with a sinusoidal 
component at the fundamental frequency ω0. Example 4.12 illustrates the property in Equation 
4.304 for a simple first-order system.
EXAMPLE 4.12
For the first-order system in Figure 4.22,
	
a.	Find the transient and steady-state responses to the input u(t) = A sin ω0t. Leave your 
answer in terms of the system parameters K and τ and input parameters A and ω0.
	
b.	Find the frequency response function of the system.
	
c.	A = 1, ω0 = 2 rad/s, K = 3, and τ = 0.5 s. Plot u(t) and y(t) on the same graph.
	
d.	Find the time lag between the input and output at steady state, and verify the result from 
the graphs of u(t) and y(t).
	
a.	For input u(t) = A sin ω0t, Y(s) is given by
	
Y s
K
s
U s
K
s
A
s
KA
s
s
( )
( )
(
)(
=
+
=
+
+





=
+ /
τ
τ
ω
ω
ω
τ
τ
1
1
1
1
0
2
0
2
0
2
 
+






ω0
2) 	
(4.305)
	
Performing a partial fraction expansion of the last term in Equation 4.305 and simplifying,
	
Y s
KA
s
s
s
s
( ) =
+
+
+
−
+






ω
ω τ
τ
τ
ω
τ
ω
0
0
2
2
0
2
2
0
2
1
1
1
+(
)
	
(4.306)
	
The inverse Laplace transform of Y(s) is
	
y t
KA
t
t
t
( )
[
]
= +
+
−
−
ω
τ
τ
ω
ω
τ
ω
τ
0
0
2
0
0
0
1
1
(
)
e
sin
cos
ω
	
(4.307)
FIGURE 4.22  First-order system (K > 0).

209
Linear Systems Analysis
	
Using the trigonometric relationship
	
A cos
sin
sin
ω
ω
ω
ϕ
0
0
0
t
B
t
C
t
+
=
+
(
) 	
(4.308)
	
where
	
C
A
B
A B
=
+
=
−
(
)
,
(
)
/
2
2 1 2
1
ϕ
tan
/
	
(4.309)
	
the sin ω0t and cos ω0t terms in Equation 4.307 may be combined into a single term, that is,
	
y t
KA
t
t
t
( )
)]
(
)
=
+
+
+
+






−
ω τ
ω τ
ω
ω
ϕ
τ
0
0
2
0
1 2
0
1
1
(
) e
[1
(
sin
	
(4.310)
	
where
	
ϕ
ω τ
= –
(
)
–
tan 1
0
	
(4.311)
	
From Equation 4.310, the transient and steady-state responses are
	
y t
KA
tr
t
( ) = +
−
ω τ
ω τ
τ
0
0
2
1
(
) e
	
(4.312)
	
y
t
KA
t
ss( )
[
]
sin
=
+
+
1
0
2 1 2
0
(
)
(
)
ω τ
ω
ϕ
	
(4.313)
	
b.	The frequency response function is
	
H j
H s
K
s
s
j
s
j
(
)
( )
ω =
=
+
=
=
ω
ω
τ
1
	
(4.314)
	
=
K
j
1+ ωτ 	
(4.315)
	
From Equation 4.314, the magnitude and phase angle of H(jω) are
	
H j
K
j
(
)
ω
ωτ
=
+
1
	
(4.316)
	
=
+
>
K
K
[
(
]
1
0
2 1 2
ωτ)
(
)
	
(4.317)
	
Arg
tan
H j(
)
(
)
ω
ωτ
= −
−1
	
(4.318)
	
c.	Substituting the given values for A, K, τ, and ω = ω0 gives
	
y t
tr
t
t
( )
( )( )( )( . )
{
[( )( . )] }
.
=
+
=
−
−
3 1 2 0 5
1
2 0 5
1 5
2 1 2
2
e
e
τ
	
(4.319)

210
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
y
t
t
ss( )
( )( )
{
[( )( . )] }
sin{
tan [( )( . )]}
=
+
−
−
3 1
1
2 0 5
2
2 0 5
2 1 2
1
	
(4.320)
	
=
−






1 5 2
2
4
.
sin
t
π
	
(4.321)
	
The input u(t) = sin 2t and output y t
t
t
( )
.
.
(
)
=
+
−
−
1 5
1 5
2
4
2
2
e
sin
/
π
 are shown in 
Figure 4.23. The transient response dies out in approximately 5τ = 5(0.5) = 2.5 s.
	
d.	Figure 4.24 is a close-up of Figure 4.23 near the peaks of u(t) and y(t). The lag time T is 
estimated as T ≈ 4.31 − 3.92 = 0.39 s in agreement with the exact value
	
ω
ϕ
ϕ
ω
π
π
0
0
4
2
8
0 393
T
T
=
⇒
=
=
=
= .
s
	
(4.322)
This example illustrates how the steady-state sinusoidal response of an LTI system can be 
obtained considerably faster using the frequency response function compared to ­methods that 
determine the complete response.
Graphical tools exist for conveying the magnitude and phase properties of an LTI continu­
ous-time system with transfer function H(s). The simplest one consists of graphs of |H(jω)| and 
Arg H (jω) vs. ω. The graphs are typically plotted over a frequency range of interest. Control 
systems engineers and analog filter designers prefer a variation of the frequency response plots in 
which 20 log |H(jω)|, the magnitude measured in decibels (db), is plotted vs. ω on a logarithmic 
scale. The result (along with the phase plot) is called a Bode diagram or Bode plot.
To illustrate, consider a system with transfer function
	
H s
s
s
s
b
b
b
b
( )
(
)
=
+
+
+
ω
ω
ω
ω
3
2
2
)(
	
(4.323)
which describes a third-order low-pass Butterworth filter designed to pass frequencies in the band 
0 (DC) to ωb and reject all others. The M-file “Ch4_Fig4_25.m” includes statements to evaluate 
the magnitude and phase of H(s) when ωb = 100 rad/s for frequencies between 100 and 104 rad/s. 
The Bode plot is shown in Figure 4.25.
0
–2
–1
0
1
2
Sinusoidal response of first-order system, H(s) = K/(τs + 1)
1
2
3
u(t) = sin 2t
y(t) = 1.5e–2t + 1.5√sin(2t – π/2)
4
5
6
7
8
t (s)
FIGURE 4.23  Graph of input u(t) and output y(t).

211
Linear Systems Analysis
The control system toolbox, a complementary suite of utilities designed for use with the 
MATLAB environment, includes a function “bode” for drawing the Bode plot of an LTI system. 
The control system toolbox is covered later in Section 4.4.10.
The magnitude measured in db (sometimes referred to as the gain) is close to zero, and, hence, 
the magnitude is close to 1 over a considerable portion of the interval 0 ≤ ω ≤ ωb. At ω = ωb,
	
H j
s
s
s
j
b
b
b
b
b
s
j
b
(
)
(
)
ω
ω
ω
ω
ω
ω
=
+
+
+
=
−+
=
=
3
2
2
1
1
1
2
)(
	
(4.324)
3.6
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
2.2
3.7 3.8 3.8
4
4.1
T
Close-up showing output lag time T
Input u(t)
Output y(t)
4.2 4.3 4.4
t (s)
4.5 4.6 4.7
4.8
4.9
5
5.1
5.2
FIGURE 4.24  Close-up of input and response near peaks.
100
–300
–200
–100
0
Arg [H(jω)], deg
–150
–100
–50
0
Bode plot for 3rd order Butterworth low pass ﬁlter (ωb = 100 rad/s)
|H(jω|, db
101
102
103
104
ω (rad/s)
100
101
102
103
104
ω (rad/s)
FIGURE 4.25  Bode plot for third-order Butterworth low-pass filter (ωb = 100 rad/s).

212
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
=
−
20
20
1
2
3
log
(
)
log
H j
b
ω
≈
db
	
(4.325)
The gain is −3 db at ω = ωb and starts falling off from ωb at approximately 60 db for every 
10-fold increase in frequency (decade) (see Figure 4.25).
The frequency response function of a system dictates the extent to which sinusoidal inputs at 
specific frequencies are passed or rejected by the system, and coupled with the fact that input 
time signals can be resolved into sinusoids over a continuum of frequencies, explains why linear 
systems are often called linear filters.
The individual components in a linear feedback control system such as sensors, controllers, 
and power converters are examples of continuous-time filters, which transmit the range of frequen­
cies in the input according to their frequency response function. Control system design based on 
frequency response relies on assumptions related to the frequency content of the command inputs 
and the uncontrollable inputs, referred to as load variables or disturbances.
A simple unity feedback control system is shown in Figure 4.26. R(s) and D(s) are the reference 
(command) and disturbance inputs.
The open-loop system model is
	
Y s
G s U s
G
s D s
P
D
( )
( )[ ( )
( ) ( )]
=
+
	
(4.326)
The control system output Y(s) can be written as
	
Y s
T s R s
T s D s
R
D
( )
( ) ( )
( ) ( )
=
+
	
(4.327)
where
	
T s
G s G s
G s G s
T s
G
s G s
G s G s
R
C
P
C
P
D
D
P
C
P
( )
( )
( )
( )
( ) ,
( )
( )
( )
( )
( )
= +
= +
1
1
	
(4.328)
It frequently happens that the command input r(t) is a slow varying signal compared to the dis­
turbance input d(t). Assuming GP(s) and GD(s) are fixed, proper design entails selecting a ­controller 
transfer function GC(s) to simultaneously make |TR(jω)| close to 1 at the lower frequencies contained 
in r(t) and |TD(jω)| close to zero for the frequencies present in d(t). Suppose the command input is 
band-limited from 0 to 0.25 Hz (1.57 rad/s) and the disturbance frequencies start at roughly 10 Hz 
(62.8 rad/s) and the open-loop system transfer ­functions are
	
G s
K
s
s
s
s
P
n
n
( )
.
.
=
+
+
=
+
+
2
2
2
2
1
2 25
0 5625
ζω
ω
	
(4.329)
	
G
s
K
D
D
( ) =
= 40	
(4.330)
FIGURE 4.26  A feedback control system with command and disturbance inputs.

213
Linear Systems Analysis
The controller is of the proportional plus integral (P-I) type,
	
G s
K
K
s
s
C
C
( ) =
+
=
+
1
5
2
	
(4.331)
Bode plots of TR(jω) and TD(jω) are generated in “Ch4_Fig4_27.m” and shown in 
Figure  4.27. The frequency content of the command input r(t) is confined primarily to fre­
quencies below  1.57 rad/s. The output will track the input closely since the gain 20 log 
|TR(jω)| is roughly 0 db, corresponding to a magnitude of 1 from DC (ω = 0) to approximately 
1 rad/s. The phase angle Arg [TR(jω)] is close to 0° from ω = 0 to ω ≈ 0.5 rad/s and is −36.1° 
at ω = 1.57 rad/s.
Conversely, the gain 20 log |TD(jω)| = −40 db, which is equivalent to a magnitude of 0.01 at 
approximately 62 rad/s. The control system effectively filters out the disturbances by attenuating 
all frequencies above 62.8 rad/s.
The steady-state error, ess = y(∞) = r(∞), is zero when r(t) or d(t) is constant. This can be 
demonstrated by showing that the DC gains TR(j0) = 1 and TD(j0) = 0, a direct consequence of 
the open-loop gain GC(0)Gp(0) = ∞. The infinite open-loop gain results from the presence of the 
integrator in GC(s). While zero steady-state error is a desirable condition, we must still be mind­
ful of the location of the control system’s characteristic roots since it determines the transient 
response.
The transfer functions of real-world components and complete systems possess Bode plots in 
which the gain “rolls off” at high frequencies. Properly designed closed-loop control systems track 
low-frequency command inputs reasonably well. Further increases in frequency require excessive 
power be delivered to control system components, thus ­limiting the system’s ability to track higher 
frequency command inputs.
Any component or system with transfer function G(s) given by the ratio of polynomials 
in proper fraction form, that is, numerator polynomial, is lower order than denominator will 
satisfy
	
lim
(
)
lim
log
(
)
ω
ω
ω
ω
→∞
→∞
|
|=
|
|
−∞
G j
G j
0
20
⇒
=
	
(4.332)
10–2
–200
–100
0
100
Arg [TD(jω)]
Arg [TR(jω)]
10–1
Phase angel (deg)
Gain (db)
100
101
102
ω (rad/s)
10–2
–60
–40
–20
0
20
10–1
100
101
Bode plots of TR(jω) and TD(jω)
|TD(jω)|
|TR(jω)|
102
ω (rad/s)
FIGURE 4.27  Bode plot for closed-loop frequency response functions TR(jω) and TD(jω).

214
Simulation of Dynamic Systems with MATLAB® and Simulink®
A common measure of the frequency where “roll off” begins is ωb and the interval (0, ωb) is 
called the bandwidth of the system. The frequency ωb satisfies
	
G j
G j
G j
G j
b
b
(
)
(
)
log
(
)
log
(
)
ω
ω
=
⇒
=
1
2
0
20
20
0
3
1 2
−db
	
(4.333)
Consequently, ωb is the (lowest) frequency at which the gain (magnitude function measured 
in db) is 3 db below the DC gain of the system.
Consider the first-order system in Figure 4.22 with magnitude function |H(jω)| given in Equation 
4.316. The frequency ωb is obtained from
	
H j
K
H j
K
b
b
(
)
[
(
)
]
(
)
/
ω
ω τ
=
+
=
⋅
=
⋅
1
1
2
0
1
2
2 1 2
1 2
1 2
	
(4.334)
	
⇒+
=
1
2
2
(
)
ω τ
b
	
(4.335)
	
⇒
=
ω
τ
b
1
	
(4.336)
Equation 4.336 is important because it relates ωb, a frequency domain parameter to the 
time constant τ, which characterizes the system’s transient response in the time domain. 
Furthermore, being inversely proportional to the system, time constant tells us that the band­
width frequency ωb is a measure of the speed of response of the first-order system. Hence, 
first-order systems like the one in Figure 4.22 with a fast natural mode (τ small) exhibit larger 
bandwidths.
For a second-order system with transfer function
	
G s
K
s
s
n
n
n
( ) =
+
+
ω
ζω
ω
2
2
2
2
	
(4.337)
increasing the natural frequency ωn (with ζ constant) decreases the transient response time 
regardless of whether the system is underdamped, overdamped, or critically damped (see 
expressions for step response in Section 2.3). It is left as an exercise to show that the bandwidth 
frequency ωb for the system with transfer function in Equation 4.337 is proportional to ωn. 
Specifically,
	
ω
ζ
ζ
ζ
ω
b
n
K
=
−
+
−
+


=
1
2
2
4
4
1
2
2
4 1 2 1 2
(
)
,
/
/
(
) 	
(4.338)
and, therefore, ωb is a measure of the speed of response for a second-order system as well.
A Bode plot for three second-order systems, all with ωn = 1 rad/s and damping ratios of 
ζ = 0.25, 1, 2, is shown in Figure 4.28. Also shown is an enlargement of the plots for the purpose 
of estimating the corresponding bandwidths. The calculated values of ωb from Equation 4.338 
are 1.4845 rad/s (ζ = 0.25), 0.6436 rad/s (ζ = 1), and 0.2666 rad/s (ζ = 2) in agreement with the 
values estimated from Figure 4.28.
Figure 4.28 shows a peak in the gain (and magnitude function) for the underdamped system 
indicating the presence of a resonant frequency. The resonant frequency is ωr = 0.935 rad/s with 
|G(.jωr)| = 2.0656 (6.3 db). Not all underdamped second-order ­systems exhibit resonance (see 
Exercise 4.32).
The Bode plots and bandwidth calculations are handled in the MATLAB script file 
“Ch4_Fig4_28.m.”
The step responses of the three second-order systems are shown in Figure 4.29. The rise time 
is defined as tr = t0.9 − t0.1, where t0.1 and t0.9 are the times required for the step response to 

215
Linear Systems Analysis
reach 10% and 90% of its final value, respectively. The rise time is another measure of the sys­
tem’s speed of response. The times t0.1 and t0.9 and the ­approximate rise times are shown on the 
zoomed-in plots of the step responses. As expected, the lightly damped system (ζ = 0.25) with the 
greatest bandwidth responds the quickest (shortest rise time) while the overdamped system (ζ = 2) 
with the smallest bandwidth is the most ­sluggish and least responsive.
10–2
–150
–100
Arg [G(jω)] (deg)
Arg [G(jω)] (deg)
|G(jω)| (db)
|G(jω)| (db)
–50
–20
–40
–60
–80
0
0
0
5
Bode plots of 3 second-order systems
Close-up of Bode plots
–5
–3
–150
–100
–50
0
10–1
100
100
102
ω (rad/s)
ω (rad/s)
ζ = 2
ζ = 2
ζ = 2
ζ = 2
ζ = 1
ζ = 1
ζ = 1
ζ = 1
ζ = 0.25
ζ = 0.25
ζ = 0.25
ζ = 0.25
10–2
10–1
100
100
102
ω (rad/s)
ω (rad/s)
FIGURE 4.28  Bode plots for second-order systems (ωn = 1 rad/s) with ζ = 0.25, 1, 2.
FIGURE 4.29  Step responses and rise times for three second-order systems.

216
Simulation of Dynamic Systems with MATLAB® and Simulink®
The step responses are generated in the M-file “Ch4_Fig4_29.m.”
LTI systems modeled by transfer functions where the order of the numerator and that of the 
denominator polynomials are equal, that is, a direct connection exists from the input to the output, 
exhibit finite gain at frequencies approaching infinity. That is,
	
lim
(
)
lim
ω
ω
ω
α
α
α
α
β
β
β
→∞
→∞
−
−
−
−
=
+
+
+
+
+
+
+
H j
s
s
s
s
s
n
n
n
n
n
n
n
n
1
1
1
0
1
1
1


s
s
j
n
n
+
=
=
β
α
β
ω
0
	
(4.339)
Since a real system cannot respond in a way suggested by Equation 4.339, the transfer function 
H(s) with equal order polynomials in the numerator and denominator, or equivalently the same 
number of finite zeros and poles, is an ideal approximation that breaks down above a certain fre­
quency. Nonetheless, it is a useful approximation to the transfer function of a system that readily 
passes high-frequency components present in its input(s), as in the case of a high-pass filter. Of 
course, when the high-frequency signals represent unwanted noise, which is invariably present in 
control systems, the closed-loop transfer function should be designed to attenuate the noise (see 
Exercise 4.34).
The simple RC circuit in Figure 4.30 with the voltage vR(t) as output is an example of a high-
pass filter. The transfer function is
	
H s
V s
E s
RC
RC
R
s
s
( )
( )
( )
=
=
+
0
1 	
(4.340)
At high frequencies (ω  1/RC), the magnitude |H(.j∞)| ≈ 1 (0 db). Note that the capacitor 
behaves like a short circuit at high frequencies.
4.5.1  Stability of Linear Feedback Control Systems Based on Frequency Response
Linear control systems are a class of LTI systems, and the basic premises of stability presented in 
the previous section are applicable. The following is a brief introduction to stability, as it applies 
to simple feedback control systems from the viewpoint of frequency response. For a more detailed 
­discussion of the subject, the reader is encouraged to refer to any of the texts in linear feedback 
control systems listed in the References.
Figure 4.31 is a block diagram of a servo control system with transfer functions for the controller, 
actuator, plant, and sensor/transmitter.
Insight into the stability of the system can be ascertained by tracking the response to the error 
signal e(t) = ℒ−1 {E(s)} as it propagates around the loop. Suppose the loop is broken immediately 
following the transmitter and a test signal e(t) = sin ωt is inserted at the controller input. Each 
component along the open-loop path processes a sinusoidal input and delivers a sinusoidal output 
FIGURE 4.30  Circuit with high-pass filter transfer function.

217
Linear Systems Analysis
(both at radian frequency ω) to the next component. Magnitude and phase shift of the individual 
sinusoids are determined by the frequency response functions of each component at radian fre­
quency ω.
The closed-loop control system is unstable if −uT(t) = −ℒ−1 {UT(s)} is ever in phase with e(t) 
and its amplitude is greater than one. When this occurs, the error signal propagates around the 
loop and increases in magnitude while doing so. Conversely, when e(t) and −uT(t) are in phase and 
|−uT(t)| = |uT(t)| < 1, a stable system results. Finally, a marginally stable system exists when e(t) and 
−uT(t) are in phase and |−uT(t)| = |uT(t)| = 1.
Since the negative sign in −uT(t) is equivalent to −180° phase shift, −uT(t) will be in phase 
with e(t) whenever uT(t) lags e(t) by −180°, that is, there is a combined total of −180° phase 
lag in the open-loop system. The frequency at which this occurs is called the phase crossover 
­frequency ωcp. Hence, for a closed-loop, negative feedback control system to be marginally sta­
ble (or unstable), there must exist at least one frequency where the open-loop phase lag is equal 
to −180°.
The open-loop transfer function is
	
G
s
G
s G
s G
s G
s
OL
C
A
P
T
( )
( )
( )
( )
( )
=
	
(4.341)
For this example, assume the dynamics of each component are described by
	
G
s
K
G
s
K
s
G
s
K
s
s
G
s
K
s
C
C
A
A
A
P
P
P
T
T
T
( )
,
( )
,
( )
(
) ,
( )
=
=
+
=
+
=
+
τ
τ
τ
1
1
1 	
(4.342)
where KC = 0.25, KA = 2, τA = 0.25, Kp = 8, τP = 4, KT = 0.1, and τT = 0.003.
The open-loop transfer function becomes
	
G
s
K
K
s
K
s
s
K
s
OL
C
A
A
P
P
T
T
( )
(
)
=
+ ⋅
+
⋅
+
τ
τ
τ
1
1
1 	
(4.343)
	
=
+ ⋅
+
⋅
+
( .
) .
(
)
.
0 25
2
0 25
1
8
4
1
0
0 003
1
s
s
s
s
	
(4.344)
	
=
+
+
+
0 4
0 25
1 4
1 0 003
1
.
( .
)(
)( .
)
s
s
s
s
	
(4.345)
A Bode plot of the open-loop transfer function is shown in Figure 4.32.
FIGURE 4.31  Block diagram of representative linear feedback control system.

218
Simulation of Dynamic Systems with MATLAB® and Simulink®
Inspection of Equation 4.345 reveals the open-loop phase varies from −90° at ω = 0 to −360° at 
ω → ∞ indicating the possibility of a marginally stable or unstable system.
The phase crossover frequency ωcp, was determined by trial and error to be approximately 
0.9936 rad/s. As a check,
	
Arg[
(
)]
.
G
j
OL
0 9936
180
≈−
° 	
(4.346)
The magnitude function evaluated at ωcp ≈ 0.9936 rad/s is
	
|
|
|
=
=
−
G
j
G
j
OL
cp
OL
(
)
(
)
(
)
.
.
.
ω
0 9936
0 0953
20 4db 	
(4.347)
The system is stable since the magnitude function is less than one, or equivalently the gain is less 
than 0 db, at the phase crossover frequency. The gain of −20.4 db is a measure of stability. Control 
engineers would say the “gain margin” is 20.4 db.
Another indicator of stability, the “phase margin,” is the difference between the open-loop phase 
lag and −180° at the frequency where the gain is 0 db. This frequency, called the gain crossover fre­
quency ωcg, is approximately 0.271 rad/s for the stable system in Figure 4.32. Since Arg [GOL(jωcg)] = 
Arg[GOL(j0.271)] = −141.2°, the phase margin is equal to −142.1 − (−180) = 37.9°. Higher phase 
margins imply a greater measure of relative stability.
Increasing the controller gain KC generally makes the system more responsive. Consider 
raising the gain KC by an amount sufficient to make the system marginally stable, that is, 
|GOL(jωcp)| = 1 ⇒ 20 log |GOL(jωcp)| = 0 db. From Equation 4.347, it follows that if we multiply the 
­current gain KC = 0.25 by 1/|GOL(jωcp)| = 1/0.0953, the new open-loop gain will be equal to 0 db 
at ωcp (which remains unchanged at 0.9936 rad/s). The Bode plot of the open-loop system transfer 
function when KC = 0.25(1/0.0953) = 2.62 is shown in Figure 4.33.
The gain crossover frequency is identical to the phase crossover frequency, and the two stabil­
ity margins have been reduced to zero. The control system is marginally stable, and there will 
be persistent oscillations at the crossover frequency 0.9936 rad/s in the natural response of the 
system.
10–2
–200
–100
0
–300
–400
–200
–100
0
100
ωcp = 0.994 rad/s
ωcg = 0.271 rad/s
10–1
Phase (deg)
Gain (db)
100
101
102
103
10–2
10–1
100
101
102
103
ω (rad/s)
Bode plot of open-loop transfer function (KC = 0.25)
FIGURE 4.32  Bode plot of GOL(s) for stable system (KC = 0.25).

219
Linear Systems Analysis
The closed-loop transfer function is
	
G
s
G
s G
s G
s
G
s G
s G
s G
s
CL
C
A
P
C
A
P
T
( )
( )
( )
( )
( )
( )
( )
( )
=
+
1
	
(4.348)
and the closed-loop system poles are the roots of
	
1
1
2 6224
2
0 25
1
8
4
1
0
0 003
+
= +
+ ⋅
+
⋅
G
s G
s G
s G
s
s
s
s
s
C
A
P
T
( )
( )
( )
( )
( .
) .
(
)
.
+ =
1
0
	
(4.349)
	
⇒
+
+
+
+
=
(
) (
)(
)
(
)( )( )(
)
.
.
.
.
0 25
1
4
1 0 003
1
2 6224 2 8 0 1
0
s
s
s
s
	
(4.350)
	
⇒
+
+
+ +
=
0 003
1 01275
4 253
4 1958
0
4
3
2
.
.
.
.
s
s
s
s
	
(4.351)
Solving the characteristic equation above produces the four closed-loop system poles,
	
s
s
s
j
s
j
1
2
3
4
333 3
4 25
0 9936
0 9936
=
=
=
=
–
. ,
– .
,
.
,
–
.
	
demonstrating the marginal stability (poles on the imaginary axis) of the system as well as the 
­frequency of sustained oscillations, namely, ωcp = 0.9936 rad/s.
Further increase in controller gain KC produces an unstable system resulting in negative ­stability 
margins (gain and phase) as well as closed-loop system poles in the right-half plane. Superior 
­performance requires a different type of controller, that is, one which provides sufficient phase lead 
in the vicinity of the gain crossover frequency for adequate stability and possibly phase lag at lower 
frequencies to improve steady-state response. Indeed, this is the essence of synthesizing controllers 
for feedback control systems using frequency response methods. Simulation is an indispensable tool 
for verifying control system design.
Phase (deg)
10–2
10–1
100
101
102
103
10–2
10–1
100
101
102
103
ω (rad/s)
ωcp = 0.994 rad/s
ωcg = 0.994 rad/s
Bode plot of open-loop transfer function (KC = 2.62)
–200
–100
0
–300
–400
–200
–100
0
100
Gain (db)
FIGURE 4.33  Bode plot of GOL(s) for marginally stable system.

220
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXERCISES
	4.28	 Use Equations 4.302 and 4.303 to derive Equation 4.304.
	4.29	 The Fourier spectrum |F(jω)| of a signal f(t) can be used to find the energy in the signal in the 
frequency spectrum (ω1, ω2) according to
	
E
F j
f (
)
(
ω ω
ω
ω
ω
ω
1
2
2
1
2
,
) d
=∫
	
	
a.	 Find the Fourier transform of the exponential f t
t
t
t
( )
,
,
.
=
<



−
0
0
0
e α
≥
	
b.	 Find and graph |F(jω)|.
	
c.	 Find ω0 such that Ef(0, ω0) = 1/2Ef(0,∞).
	4.30	 For the third-order Butterworth filter in Equation 4.323 with ωb = 2π rad/s, find
	
a.	 The poles of H(s).
	
b.	 The impulse response function h(t).
	
c.	 The filter output at steady state when the input is u(t) = sin(0.5ωbt) + sin(2ωbt).
	4.31	 Derive Equation 4.338 relating the bandwidth and natural frequency of a second-order system 
in standard form.
	4.32	 For a second-order system with natural frequency ωn = 1 rad/s, find
	
a.	 The maximum value of ζ for which the system has a resonant frequency.
	
b.	 The resonant frequency if ζ = 0.
	
c.	 The response when ζ = 0 to a sinusoidal input at the resonant frequency.
	4.33	 The circuit shown in Figure E4.33 is designed to block 60 Hz noise in the input vi(t) from 
appearing in the output vo(t).
	
a.	 Show that the transfer function H(s) = Vo(s)/Vi(s) = (R(LCs2 + 1))/(RLCs2 + Ls + R).
	
b.	 Find the frequency response function H(jω).
	
c.	 Find the inductance L for which |H(j2π ⋅ 60)| = 0.
	
d.	 Write an M-file to draw a Bode plot for 102 ≤ ω ≤ 104 rad/s.
	
e.	 Find and graph vo(t) when vi(t) = sin(2π ⋅ 55)t + sin(2π ⋅ 60)t.
	
f.	 Find and graph vo(t) when vi(t) = sin(2π ⋅ 100)t + sin(2π ⋅ 60)t.
	4.34	 A system for controlling the attitude of a rigid satellite is shown in Figure E4.34:
	
	
The controller determines the torque T(t) developed by a pair of thrusters to control 
the ­satellite’s ­attitude θ(t). The controller input is an error voltage signal e(t), which is the 
­difference between the commanded attitude θcom(t) converted to a voltage and the filtered sen­
sor ­output vF(t). The sensor output voltage vS(t) contains an additive noise component n(t).
	
	
A low-pass filter is inserted between the comparator and the sensor output to attenuate the 
noise in the feedback signal. The gain K converts the commanded angle (deg) to a voltage for 
FIGURE E4.33

221
Linear Systems Analysis
comparison to the output voltage from the filter vF(t). The numerical value of K is the same as 
the sensor gain KS.
	
	
The command and noise inputs are
	
θ
ω
com
0
( )
,
,
,
( )
sin
,
t
t
At
t
t
At
t
t
n t
N
t
t
=
<
≤<
≥





=
≥
0
0
0
0
0
0
0
0
	
	
	
Baseline parameter values are
	
K
KS
=
= 0 1.
,
V/deg 	
	
J
B
=
=
150
15
2
ft lb/deg/s
ft lb/deg/s
,
	
	
K
T
T
N
C
l
D
=
=
=
10
60
30
10
ft lb/V
s
s
,
,
,
=
	
	
A
t
=
°
=
1 2
2 5
0
.
,
.
/s
s	
	
N0
0
1
50
=
=
V
Hz
,ω
	
	
In parts (a) through (d), assume the filter is not present, that is, VS(s) is input to the summer.
	
a.	 Find the transfer functions Hcom(s) = θ(s)/θcom(s) and HN(s) = θ(s)/N(s). Leave your answers 
in terms of the parameters K, Ks, J, KC, TI, TD, N.
	
b.	 Obtain Bode Plots for Hcom(jω) and HN(jω).
	
c.	 Find and graph θ(t), t ≥ 0.
	
d.	 Find and graph the torque T(t), t ≥ 0.
	
In parts (e) through (i) the filter is present.
	
e.	 Find the filter time constant τF if the filter gain is −40 db at the noise frequency.
	
f.	 Find the transfer functions Hcom(s) = θ(s)/θcom(s) and HN(s) = θ(s)/N(s). Leave your answers 
in terms of K, KS, J, KC, TI, TD, N, τF.
	
g.	 Obtain Bode Plots for Hcom(jω) and HN(jω) using the value for τF.
	
h.	 Find and graph θ(t), t ≥ 0.
	
i.	 Find the gain and phase margins of the closed-loop system.
FIGURE E4.34

222
Simulation of Dynamic Systems with MATLAB® and Simulink®
	4.35	 For the control system shown in Figure 4.31,
	
a.	 Use the given baseline parameter values (except KC), and fill in the missing values in 
Table E4.35:
TABLE E4.35
Kc = 0.1
KC = 0.25
KC = 1
KC = 2.5
Phase margin
Gain margin
Band margin
	
b.	 Compare the step responses for each of the cases in Table E4.35.
4.6  z-TRANSFORM
Difference equations result from approximation of continuous-time differential equation models. Inputs 
to the difference equations are commonly discrete-time signals resulting from sampling a continuous-
time signal (sample data systems). Inherently discrete-time systems are modeled by difference equations 
relating inputs and outputs that change only at discrete points in time, as in the case of a numeric proces­
sor with a fixed cycle time or a loan balance with monthly payments to reduce the outstanding balance.
In the same way, we characterized continuous-time signals and continuous-time systems; 
­discrete-time counterparts (signals and systems) can be analyzed with the help of a mathematical 
transformation. Instead of an integral transformation from a continuous-time signal f(t), t ≥ 0 to its 
Laplace transform F(s), a different type of mapping is applied to a discrete-time function f(k) or fk, 
k = … −3, −2, −1, 0, 1, 2, 3, …. Similar to F(s), the z-transform F(z) is a complex-valued function, 
that is, s and z are both complex variables. Only causal signals, those that satisfy fk = 0, k = … −3, 
−2, −1, will be considered.
The z-transform of a causal discrete-time signal fk, k = 0, 1, 2, 3, … denoted F(z) or z{fk} is 
defined by the infinite series
	
F z
z f
f z
k
k
k
k
( )
{
=
=
−
=
∞
∑
}
0
	
(4.352)
The region of convergence of F(z) in the z-plane is all complex numbers greater than a certain 
distance from the origin, that is, |z| > R where R depends on the particular sequence of ­numbers 
(discrete-time signal) fk (Kuo 1980). As in the case of the Laplace transformation, the region of 
convergence of the z-transform for a particular discrete-time signal is of passing interest. The main 
consideration is that the sum in Equation 4.352 converges to a complex number somewhere in 
the  z-plane. Several simple discrete-time signals and their z-transforms follow. The derivations 
­follow directly from the definition in Equation 4.352.
EXAMPLE 4.13
Find the z-transform of the unit step ûk = 1, k = 0, 1, 2, 3, … shown in Figure 4.34.
	
U z
z u
z
z
z
z
k
k
k
( )
{
}
=
=
⋅
= +
+
+
+
−
−
−
−
=
∞
∑
ˆ
(
)
(
)
1
1
1
1 2
1 3
0

	
(4.353)
The infinite series converges to a sum, that is,
	
U z
z
z
z
z
k
k
( )
(
)
=
= −
=
−
−
=
∞
−
∑
1
0
1
1
1
1 	
(4.354)

223
Linear Systems Analysis
provided |z−1| < 1 or equivalently |z| > 1. Hence, the region of convergence is outside the Unit 
Circle, |z| = 1. A closed form for U(z) is preferable to the infinite series and often easy to recognize 
when uk is a simple expression.
EXAMPLE 4.14
	
a.	Find the z-transform of the discrete-time signal uk resulting from sampling the continu­
ous-time function u(t) = e−at, t ≥ 0 every T s.
	
b.	Suppose u(t) and uk are as shown in Figure 4.35. Find U(z).
	
a.	Sampling a continuous-time signal u(t) every T s results in a discrete-time signal uk where 
uk = u(t)|t = kT = u(kT), k = 0, 1, 2, 3, …. Hence, from the definition of the z-transform 
and uk = e−akT, k = 0, 1, 2, …,
	
U z
z
z
z
z
z
z
akT
k
aT
k
k
k
akT
aT
( )
e
(e
)
e
e
,
=
= −
=
−
=
>
−
−
−
−
=
∞
=
∞
−
−
−
∑
∑
1
0
0
1
1
1
e−aT
	
(4.355)
	
	
Note the dependence of U(z) on the sampling interval T.
	
b.	For a = 1, T = 0.25
	
U z
z
z
z
( )
e
,
.
.
=
−
>
−
−
0 25
0 25
e
	
(4.356)
FIGURE 4.34  The discrete-time unit step.
0
0 1 2 3 4
T = 0.25 s
a = 1
uk = e–akT, k = 0, 1, 2, 3, …
u(t) = e–at, t ≥ 0
0
0.2
0.4
0.6
0.8
1
u0
u1
u2
u3
Uniform sampling of a continuous-time exponential function
1
2
3
4
5
6
t (s)
k
FIGURE 4.35  Uniform sampling of a continuous-time exponential function.

224
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The next example looks at a discrete-time signal, which occurs frequently in the 
analysis of linear discrete-time systems, namely, the geometric sequence.
EXAMPLE 4.15
Find the z-transform of the discrete-time signal
	
u
a
k
k
k
=
=
,
, , , ,. . .
0 1 2 3   	
(4.357)
Once again, our starting point is the definition of the z-transform in Equation 4.352.
	
U z
a z
az
az
z
z
a
z
a
k
k
k
k
k
( )
(
)
,
=
=
= −
=
−
>
−
−
=
∞
=
∞
−
∑
∑
1
0
0
1
1
1
	
(4.358)
The result is easily checked by long division, that is, if the denominator in Equation 4.358 is 
divided into the numerator, the result is
	
z
z
a
az
a z
a z
a z
k
k
−
= +
+
+
+
+
+
−
−
−
−
1
1
2
2
3
3


	
(4.359)
From the definition of U(z) as an infinite series,
	
U z
u z
u
u z
u z
u z
u z
k
k
k
k
k
( ) =
=
+
+
+
+
+
+
−
−
−
−
−
=∑
0
1
1
2
2
3
3
0


∞
	
(4.360)
Comparing Equations 4.359 and 4.360, it follows that u0 = 1, u1 = a, u2 = a2, u3 = a3, …, and, 
therefore, uk = ak, k = 0, 1, 2, 3, …. The long division method provides a quick check on U(z) for 
a discrete-time signal uk, k = 0, 1, 2, 3, …. Typically, the first several coefficients in the infinite 
series expression for U(z) are compared to the corresponding values of the discrete-time signal uk 
with an equivalence necessary (but not sufficient) for U(z) = z{uk}.
Depending on the numerical value of the constant “a,” the discrete-time signal uk in Equation 
4.357 can asymptotically approach zero in magnitude (|a| < 1), remain constant in magnitude 
(|a| = 1), or increase in magnitude without bound (|a| > 1). All six cases are shown in Figure 4.36. 
Note that when a = 1, the discrete-time unit step (Figure 4.34) results and Equation 4.358 reduces 
to Equation 4.354.
The exponential sequence in Example 4.14 is also a geometric sequence. This is evident by 
expressing it in a slightly different way, that is,
	
u
b
k
b
k
akT
aT k
k
aT
=
=
=
=
=
e
e
  
where
e
–
–
–
(
)
( ) ,
, , , ,. . .
0 1 2 3
	
(4.361)
The sequences resulting from uniform sampling of continuous-time sine and cosine 
­functions are fundamental discrete-time signals with z-transforms that follow directly from the 
basic ­definition. The results are
	
sin
(sin
)
( cos
)
k T
T z
z
T z
ω
ω
ω
⇔
−
+
2
2
1 	
(4.362)
	
cos
(
cos
)
( cos
)
k T
z z
T
z
T z
ω
ω
ω
⇔
−
−
+
2
2
1	
(4.363)
where the symbol ⇔ denotes a z-transform pair, that is, a discrete-time signal and its z-transform.

225
Linear Systems Analysis
The discrete-time signals in Equations 4.362 and 4.363 produce interesting results when the 
sampling occurs at certain frequencies as shown in Example 4.16.
EXAMPLE 4.16
Find the z-transform of the discrete-time signal obtained from sampling
	
a.	x(t) = sin 3t, t ≥ 0 when T = π/6 s
	
b.	x(t) = sin 3t, t ≥ 0 when T = π/3 s
	
c.	x(t) = cos ωt, t ≥ 0 when T = 2π/ω s
From Equations 4.362 and 4.363,
	
a.
	
x
kT
z
z
z
z
z
k =
⇔
⋅
−
⋅
+ =
−
sin
(sin
)
( cos
)
(sin
)
( cos
3
3
2
3
1
2
2
2
π
π
π
π
/6
/6
/2
/2)z
z
z
+ =
+
1
1
2
	
(4.364)
	
b.
	
x
kT
z
z
z
z
z
z
k =
⋅
−
⋅
+ =
−
+
sin
(sin
)
( cos
)
(sin )
( cos )
3
3
2
3
1
2
2
2
⇔
π
π
π
π
/3
/3
1
0
=
	
(4.365)
	
c.
	
cos
(
cos
)
( cos
)
(
cos
)
( cos
k T
z z
z
z
z z
z
ω
ω
π ω
ω
π ω
π
⇔
−
⋅
−
⋅
+ =
−
−
2
2
2
1
2
2
2
2
/
/
2
1
1
2
1
1
2
π)
(
)
z
z z
z
z
z
z
+
=
−
−
+ =
−
	
(4.366)
Figure 4.37 shows the continuous-time signal x(t) = sin 3t, t ≥ 0 and the discrete-time signals 
xk = sin 3kT, k = 0, 1, 2, 3, … resulting from sampling in parts (a) and (b).
0
0
0.25
0.5
0.75
1
0
0.5
1.5
a = 0.5
a = 1
a = 2
a = –2
a = –1
a = –0.5
Discrete-time signal uk = ak, k = 0, 1, 2, 3, … for a = –0.5, –1, –2, 0.5, 1, 2
2
1
0
0
–0.5
–0.5
–1
0.5
0.5
1
1
2
4
6
8
10
k
0
2
4
6
8
10
0
250
500
750
1000
0
–500
500
1000
k
0
2
4
6
8
10
k
0
2
4
6
8
10
k
0
2
4
6
8
10
k
0
2
4
6
8
10
k
FIGURE 4.36  Discrete-time signal uk = ak, k = 0, 1, 2, 3, … for a = −0.5, −1, −2, 0.5, 1, 2.

226
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note, in part (a), the frequency of sampling ωs = 2π/T = 12 rad/s is four times the frequency of 
the signal x(t). The result given in Equation 4.364 is easily verified by long division of z2 + 1 into 
z giving the infinite series
	
U z
z
z
z
z
z
z
z
z
( ) =
+
−
+
−
+
−
+
−
−
−
−
−
2
1
3
5
7
9
11
1

	
(4.367)
	
⇒
=
−
=
=
=
=
=
−
u
k
k
k
k
k
0
1
1
0 2 4 6
1 5 9
3 7 11
0
0 2 4 6
1
,
,
,
, , , ,
, , ,
, ,
,
,
, , , ,
(
…
…
…
…
)
,
, , , ,
(
)/
k
k
+
=









3 2
1 3 5 7 …
	
(4.368)
At the slower sampling frequency of 6 rad/s in part (b), the discrete-time signal is identically 
zero for all k. In part (c), the cosine function is sampled once per cycle resulting in the discrete-
time unit step function shown in Figure 4.38.
Table 4.4 is a brief listing of elementary continuous-time functions and their Laplace transforms 
along with the discrete-time signals resulting from uniform sampling of the continuous-time signals 
and the corresponding z-transforms (Jacquot 1981).
4.6.1  Discrete-Time Impulse Function
We now introduce a discrete-time function, which plays a prominent role in analyzing the behavior 
of linear discrete-time systems. The unit strength discrete-time impulse occurring at discrete-time 
k = 0 is defined by
	
δk
k
k
=
=
=



1
0
0
1 2 3
,
,
, , ,…	
(4.369)
0
–1
–0.5
0
0.5
1
–1
–0.5
0
0.5
1
1
2
x(t) = sin 3t, t ≥ 0  and  xk = x(kT), k = 0, 1, 2, 3, … T = π/3 s
x(t) = sin 3t, t ≥ 0  and  xk = x(kT), k = 0, 1, 2, 3, … T = π/6 s
3
4
5
6
0
1
2
3
4
5
6
0
1
2
3
4
5
t (s)
k
0
1
2
3
4
5
6
7
8
9
10
11
k
xk
xk
x(t)
x(t)
FIGURE 4.37  Uniform sampling of x(t) = sin 3t (T = π/6 s and T = π/3 s).

227
Linear Systems Analysis
Delaying the discrete-time impulse by n units of discrete-time produces
	
δk n
k
n
k
n
n
−=
=
=
−
+



1
0
0 1 2
1
1
,
,
, , ,
,
,
…
…
,
	
(4.370)
It follows directly from the definition of the z-transform that
	
z
z
z
k
k n
n
{ }
{
}
δ
δ
=
=
−
−
1
and
	
(4.371)
–1
–0.5
0
0.5
1
x(t) = cos ωt, t ≥ 0  and  xk = x(kT), k = 0, 1, 2, 3, … T = 2π/ω s
t (s)
k
xk
x(t)
0
1
2
3
4
5
FIGURE 4.38  Uniform sampling of cos ωt (T = 2π/ω s).
TABLE 4.4
Table of Laplace and z-Transforms
f(t), t ≥ 0
F(s) = L{ff(t)}
fk = f(kT), k = 0, 1, 2, …
F(z) = z{fk}
1
1
s
1
z
z−1
T
1
2s
KT
Tz
z(
)
−1 2
e−at
1
s
a
+
e−akT
z
z
aT
−
−
e
te−at
1
2
(
)
s
a
+
kTe−akT
Te
z
z
aT
aT
−
−
−
(
)
e
2
sin ωt
ω
ω
s2
2
+
sin kωT
(sin
)
(cos
)
ω
ω
T z
z
T z
2
2
1
−
+
cos ωt
s
s2
2
+ω
cos kωT
z
T z
z
T z
2
2
2
1
−
−
+
(cos
)
(cos
)
ω
ω
e−at sin ωt
ω
ω
(
)
s
a
+
+
2
2
e−akt sin kωT
(e
sin
)
(e
cos
)
e
−
−
−
−
+
aT
aT
aT
T z
z
T z
ω
ω
2
2
2
e−at cos ωt
s
a
s
a
+
+
+
(
)2
2
ω
e−akt cos kωT
z
T z
z
T z
aT
aT
aT
2
2
2
2
−
−
+
−
−
−
(e
cos
)
(e
cos
)
e
ω
ω

228
Simulation of Dynamic Systems with MATLAB® and Simulink®
An arbitrary discrete-time signal fk, k = 0, 1, 2, … can be expressed as a weighted sum of unit 
discrete-time impulses, that is,
	
f
f
f
f
f
f
k
k
i k i
k
k
k
k
i
=
=
+
+
+
+
=
−
−
−
−
=
∞
∑δ
δ
δ
δ
δ
0
1
1
2
2
3
3
0
0 1 2 3
, , , ,…
	
(4.372)
The output of a linear discrete-time system subject to a unit discrete-time impulse is termed the 
unit impulse response. Just like in the case of continuous-time systems, the discrete-time impulse 
response reflects the natural dynamics of the system. This will be demonstrated after the z-domain 
transfer function is introduced.
EXAMPLE 4.17
Represent the discrete-time signal uk, k = 0, 1, 2, 3, … shown in Figure 4.39 in terms of discrete-
time impulses and find U(z).
	
u
k
k
k
k =
=
=
=





0
0 1 2 6 7
1
3 5
2
4
,
, , , , ,
,
,
,
…
	
(4.373)
From Equation 4.372,
	
uk
k
k
k
= ⋅
+
⋅
+ ⋅
1
2
1
3
4
5
δ
δ
δ
–
–
– 	
(4.374)
	
U z
z u
z
z
z
z
z
z
z
k
k
k
k
( )
{
}
{
}
=
=
+
+
=
+
=
+
+
−
−
−
−
−
−
δ
δ
δ
3
4
5
3
4
5
2
5
2
2
2
1
	
(4.375)
Note in Equation 4.375 we employed the linearity property of z-transforms, that is,
	
z
z
z
k
k
k
k
z
k
k
{
}
{
}
{
}
{
}
δ
δ
δ
δ
δ
δ
−
−
−
−
−
−
+
+
=
+
+
3
4
5
3
4
5
2
2
	
(4.376)
In the general case,
	
zz au
by
au
by z
a
u z
b
ykz
aU z
bY
k
k
k
k
k
i
k
k
k
k
{
}
{
}
( )
(
+
=
+
=
+
=
+
−
=
∞
−
=
∞
−
∑
∑
0
0
z
k
)
=
∞
∑
0
	
(4.377)
Other useful properties (analogous to those of the Laplace transform) of the z-transform are 
included in Table 4.5.
The “delay” property is especially important. Suppose a discrete-time signal uk for which uk = 0 
when k < 0 is delayed n units of discrete-time. The delayed signal, denoted uk–n, is expressed in 
terms of uk in Table 4.5. The case where n = 1 and 2 along with the general case is illustrated in 
Figure 4.40a through d.
The unit-delay operator, as the name suggests, delays its input by one unit of discrete-time. The 
symbol for a unit-delay operator is a block with z−1 inside. If the input to a unit-delay operator is 
the discrete-time signal uk shown in Figure 4.40a, the output would be uk–1 in Figure 4.40b. A pair 
of unit-delay operators in series is shown in Figure 4.41.
FIGURE 4.39  Graph of discrete-time signal uk, k = 0, 1, 2, 3, ….

229
Linear Systems Analysis
TABLE 4.5
Useful Properties of the z-Transform
Description
Discrete-Time Signal
Property
Linearity
uk = axk + byk
U(z) = aX(z) + by(z)
Delay (right shifting)
given uk, k = 0, 1, 2, 3, …, where uk = 0 for k < 0
z{uk–n} = z−nU(z)
u
k
n
u
k
n
u
k
n
u
k
n
k n
−=
=
−
=
=
+
=
+





0
0 1 2
1
1
2
0
1
1
,
, , ,
,
,
,
,
…
etc.

Summation
y
u
k
i
i
k
=
=∑
0
Y z
z
z
U z
( )
( )
=
−1
Multiplication by geometric sequence
yk = akuk
Y z
U z
a
( ) =






Multiplication by k property
yk = kuk
Y z
z z U z
( )
( )
=−
d
d
Initial value property
f
f
k
k
i
k i
i
=
=
−
=
∞
∑δ
,
, , , ,
0 1 2 3
0
…
f
F z
z
0 =
→∞
lim
( )
Final value property
f
f
k
k
i
k i
i
=
=
−
=
∞
∑δ
,
, , , ,
0 1 2 3
0
…
f
z
F z
z
∞
→
=
−
lim (
) ( )
1
1
Periodic signal
F z
z
z
F z
n
n
( )
( )
=
−1
ˆ
fk = fk + n, k = 0, 1, 2, 3, …
where ˆ( )
F z
f z
k
k
k
n
=
−
=
−
∑
0
1
FIGURE 4.40  Illustration of the delay property in Table 4.5.

230
Simulation of Dynamic Systems with MATLAB® and Simulink®
The outputs xk and yk are related to the input uk by
	
x
u
k
u
k
u
k
k
k
=
=
=
=
=





−1
0
1
0
0
1
2
,
,
,
…
… 	
(4.378)
	
y
x
u
k
u
k
u
k
k
k
k
= 
−
−
=
=
=
=
=





1
2
0
1
0
0 1
2
3
,
,
,
,
…
…
	
(4.379)
In a later section when we introduce simulation diagrams for discrete-time systems, it will be 
apparent that the unit delay is the counterpart to a continuous-time integrator in the simulation 
diagram of continuous-time systems.
Several examples illustrating the properties in Table 4.5.
EXAMPLE 4.18
A unit alternating sequence (a = −1 in Figure 4.36) is the input to a summer as shown in Figure 4.42.
	
a.	Find the output yk, k = 0, 1, 2, 3, ….
	
b.	Find Y(z).
	
a.	Referring to the graphs of the geometric sequence in Figure 4.36 for the case when 
a = −1, it is apparent that the output of the summer is
	
y
k
k
k =
=
=




1
0 2 4
0
1 3 5
,
, , ,
,
, , ,
…
… 	
(4.380)
	
b.	From the definition of the z-transform as an infinite series in z−1,
	
y z
z
z
( )
z
= + ⋅
+ ⋅
+ ⋅
+
−
−
−
1
1
1
1
2
4
6
	
(4.381)
	
= +
+
+
+
+
−
−
−
−
1
2
2 2
2 3
2 3
(
)
(
)
(
)
(
)
z
z
z
z
	
(4.382)
	
= −
−
1
1
2
(
)
z
	
(4.383)
	
=
−
z2
2
1
z
	
(4.384)
FIGURE 4.41  Unit-delay operators in series.
FIGURE 4.42  A summer with a unit alternating sequence input.

231
Linear Systems Analysis
	
Alternatively, from the summation property in Table 4.5 and knowing z{ak} = z/(z − a),
	
Y z
z
z
U z
z
z
z
z
z
z
( )
( )
=
−
=
−
+





=
−
1
1
1
1
2
2
	
(4.385)
EXAMPLE 4.19
Find the z-transform of the discrete-time signal resulting from sampling the output of a half-wave 
rectifier whose input is the continuous-time function sin ω0t. Sampling starts at t = 0 at a ­frequency 
of 8ω0, where ω0 = 2π rad/s.
The output of the half-wave rectifier is
	
v t
t
k
t
k
k
k
t
k
( )
sin
,
(
)
,
(
)
(
=
≤≤
+
+
≤≤
ω
π ω
π ω
π ω
0
0
0
0
1
0
1
/
/
for
= 0, 2, 4,
/
…
+




2
0
)π ω
/
for
= 1, 3, 5,
k
… 	
(4.386)
Both v(t) and vk = v(kT), k = 0, 1, 2, 3, … are shown in Figure 4.43. The discrete-time signal vk 
is periodic, and the period is n = 8, that is, vk+8 = vk, k = 0, 1, 2, 3, ….
The z-transform of the first cycle of vk is
	
ˆ( )
sin(
)
sin
V z
v z
kT z
z
k
k
k
k
k
k
k
k
=
=
=
⋅
=




−
=
−
−
=
=
∑
∑
∑
0
7
0
7
0
3
2
0
4
π
π


−
=∑
z
k
K
0
3
	
(4.387)
	
=
+






+






+






−
−
0
4
2
4
1
2
sin
sin
sin
π
π
π
z
z
3

−
z
3
	
(4.388)
	
=
+
+
+
−
−
−
0
2
2
2
2
1
2
3
z
z
z
	
(4.389)
0
0
0.2
0.4
0.6
0.8
1
T = 1/8 s
vk
v(t)
v(t) = sin 2πt, k/2 ≤ t ≤ (k + 1)/2, n = 0, 2, 4, …
0, elsewhere
Sampling the output of a half-wave rectifier with input sin 2πt
0
1
2
3
4
5
6
7
8
9 10 11 12 13 14 15 16 17
k
0.25
0.5
0.75
1
1.25
1.5
t (s)
1.75
2
FIGURE 4.43  Sampling the continuous-time output of a half-wave rectifier with input sin 2πt.

232
Simulation of Dynamic Systems with MATLAB® and Simulink®
Applying the property in Table 4.5 for periodic signals gives
	
V z
z
z
V z
z
z
z
z
z
n
n
( )
( )
=
−
=
−
+
+






−
−
−
1
1
2
2
2
2
8
8
1
2
3
ˆ
	
(4.390)
	
=
−
+
+






z
z
z
z
5
8
2
1
2
2
2
2
	
(4.391)
Long division of z8 − 1 into ( 2 /2)z7 + z6 ( 2 /2)z5 will generate a power series in z−1 with 
coefficients corresponding to the sampled values shown in Figure 4.43.
4.6.2  Inverse z-Transform
The analysis of discrete-time system dynamics requires the capability of inverting a z-transform 
F(z) to find the discrete-time signal fk, k = 0, 1, 2, 3, …. It is similar to the way in which the inverse 
Laplace transform was obtained, that is, by exploiting the basic properties of the z-transform, refer­
ring to tables of z-transform pairs, partial fraction expansion, and using one additional method 
not applicable to continuous-time systems, namely, long division. A simple example of finding the 
inverse z-transform based on some of the methods outlined above follows.
EXAMPLE 4.20
Find the inverse z-transform of
	
F z
z
z z
( ) (
)
+
+
1
2 	
(4.392)
	
a.	Using properties of the z-transform along with the lookup table of z-transform pairs.
	
b.	By the method of long division.
	
a.
		
F z
z
z z
z
z
z
( )
(
)
=
+
+
=
+
+






−
1
2
1
2
1
	
(4.393)
	
=
+





+
+






−
−
z
z
z
z
z
z
1
2
2
2 	
(4.394)
	
	
From Equations 4.357 and 4.358, the term (z/(z + 2)) is the z-transform of the dis­
crete-time signal gk = (−2)k, k = 0, 1, 2, 3, …. From the delay property in Table 4.5, 
fk is the sum of gk delayed one unit of time and gk delayed two units of discrete-time. 
Denoting the delayed signals by g˜ k,1 and g˜ k,2, we can write
	
f
g
g
k
k
k
k
=
+
=
...


,
,
1
2
0 1 2 3
, , , ,
	
(4.395)
	
where
	
g
k
k
k
k
,
(
)
,
, ,
...
1
1
0
0
2
1 2 3
=
=
−
=




−
,
	
(4.396)
	
g
k
k
k
k
,
,
(
)
,
,
...
2
2
0
0
2
2 3
=
=
−
=




−
1
, 4,
	
(4.397)

233
Linear Systems Analysis
	
	
Combining Equations 4.395 and 4.396, the inverse z-transform is
	
f
k
k
k
k
k
k
=
=
=
−
+ −
=





−
−
0
0
1
1
2
2
2
1
2
,
,
(
)
(
)
,
, 3, 4,... 	
(4.398)
	
	
Simplifying the expression in Equation 4.398 when k = 2, 3, 4, … gives
	
f
k
k
k
k
k
=
=
=
−−
=





−
0
0
1
1
2
2
2
,
,
(
)
,
, 3, 4,... 	
(4.399)
	
c.	Long division of the denominator in Equation 4.392 into the numerator results in an infi­
nite series. The first few terms are
	
z
z
z
z
z
z
z
z
+
+
=
−
+
−
+
−
−
−
−
−
−
1
2
2
4
8
2
1
2
3
4
5

	
(4.400)
	
	
Looking at Equation 4.400, it is possible to recognize a pattern in the coefficients 
starting with the z−2 term. This pattern results in the expression in the third line of the 
general solution in Equation 4.399. The reader should verify that Equations 4.399 and 
4.400 generate identical values for fk, k = 0, 1, 2, 3, … as they must.
4.6.3  Partial Fraction Expansion
Causal signals, that is, discrete-time signals fk that are identically zero for negative values of 
­discrete-time k, possess z-transforms of the form
	
F z
N z
D z
b z
b z
b z
z
a z
a
z
a
n
m
n
n
m
n
m
n
n
n
n
( )
( )
( )
(
=
=
+
+
+
+
+
+
+
≥
−
−
−
−
0
1
1
1
1
1


)
	
(4.401)
The partial fraction expansion of F(z) depends on the nature of the roots of D(z). Equation 4.401 
is rewritten with the denominator D(z) in factored form,
	
F z
b z
b z
b z
z
p
z
p
z
p
n
m
n
n
m
n
m
n
( )
(
)(
)
(
) (
)
=
+
+
+
−
−
−
≥
−
−
0
1
1
1
2


	
(4.402)
where p1, p2, …, pn are the poles of F(z). Three cases are considered for finding the inverse z-transform 
of F(z) by partial fractions.
Case I: Poles of F(z) are real and distinct
When the poles p1, p2, …, pn are real and unequal, F(z) in partial fraction form is
	
F z
c
c
z
z
p
c
z
z
p
c
z
z
p
n
n
( ) =
+
−





+
−





+
+
−

0
1
1
2
2





	
(4.403)
The constant c0 is easily determined by substituting z = 0 in Equations 4.402 and 4.403.
	
c
F z
F
n
m
b
p
p
p
n
m
z
n
n
0
0
1
2
0
0
=
=
>
−
−
−
=





=
( ) |
( )
,
(
)(
)
(
) ,

	
(4.404)

234
Simulation of Dynamic Systems with MATLAB® and Simulink®
The remaining coefficients c1, c2, …, cn are obtained from (Cadzow 1973)
	
c
z
p
z
F z
i
n
i
i
z
pi
=
−






=
=
( )
,
, , ,
,
   
1 2 3 …
	
(4.405)
From the z-transform pairs δk ⇔ 1, ak ⇔ z/(z − a) and the linearity property of the z-transform, 
the inverse z-transform of F(z) in Equation 4.403 is
	
f
c
c p
c p
c p
k
k
k
k
k
n
n
k
=
+
+
+
+
=
0
1
1
2
2
0 1 2 3
δ
 
,
, , , ,

…	
(4.406)
EXAMPLE 4.21
Find the discrete-time signal with z-transform given by
	
F z
z
z
z
( ) =
+
+
−
2
2
1
4
	
(4.407)
Factoring the denominator leads to the partial fraction expansion
	
z
z
z
z
z
z
z
c
c
z
z
c
z
z
2
2
2
0
1
2
1
4
1
2
2
2
2
+
+
−
=
+
+
−
+
=
+
−





+
+



(
)(
)



	
(4.408)
where
	
c
F
z
z
z
z
z
0
2
0
0
1
2
2
1
4
=
=
+
+
−
+
⋅= −
=
( )
(
)(
)
	
(4.409)
	
c
z
z
F z
z
z
z z
z
z
1
2
2
2
2
1
2
7
8
=
−






=
+
+
+
=
=
=
( )
(
)
	
(4.410)
	
c
z
z
F z
z
z
z z
z
z
2
2
2
2
2
1
2
3
8
=
+






=
+
+
−
=
=−
=−
( )
(
)
	
(4.411)
	
⇒
= −
+
−





+
+






F z
z
z
z
z
( )
1
4
7
8
2
3
8
2 	
(4.412)
	
⇒
= −
+
+
−
=
f
k
k
k
k
k
1
4
7
8 2
3
8
2
0 1 2 3
δ
( )
(
) ,
, , , ,…
	
(4.413)
It is left as an exercise to show that the first several values of fk, k = 0, 1, 2, 3, … are in 
­agreement with the values obtained by long division of z2 − 4 into z2 + z + 1.
If the denominator D(z) in Equation 4.401 has a factor zP, the inverse z-transform of zPF(z) 
should be determined first, followed by use of the delay property to obtain the final result. To 
illustrate, suppose F(z) is given by
	
F z
z
z
z z
( )
(
)
=
+
+
−
2
3
2
1
4 	
(4.414)

235
Linear Systems Analysis
We start by inverting z3F(z),
	
z F z
z
z
z
3
2
2
1
4
( ) =
+
+
−
	
(4.415)
From Example 4.21, we know
	
z
z
z
z
k
k
k
−
+
+
−








= −
+
+
−
1
2
2
1
4
1
4
7
8 2
3
8
2
δ
( )
(
)
	
(4.416)
Hence, the inverse z-transform of F(z) in Equation 4.414 is the discrete-time signal in Equation 
4.416 delayed three units of discrete-time, that is,
	
f
k
k
k
k
k
k
=
=
−
+
+
−
=





−
−
−
0
0 1 2
1
4
7
8 2
3
8
2
3 4 5
3
3
3
,
, , ,
( )
(
)
,
, , ,
δ
…

	
(4.417)
Case II: Repeated real poles of F(z)
Suppose the pole p1 has multiplicity m1. The partial fraction expansion contains the m1 terms
	
c
z
z
p
c
z
z
p
c
z
z
p
m
m
m
1
1
1
1
1
1
1
1
1
−





+
+
−






+
−

−
−






m1
	
(4.418)
associated with the factor (z − p1)m1 in the denominator of F(z). Simultaneous equations are devel­
oped for the constants c1, c2, …, cm1 1
−. An illustrative example follows.
EXAMPLE 4.22
Find fk, k = 0, 1, 2, 3, … when
	
F z
z
z
z
z
( )
(
) (
)
=
+
−
+
2
1
1
2
3
	
(4.419)
The partial fraction expansion of F(z) is
	
F z
z
z
z
z
c
c
z
z
c
z
z
( )
(
) (
)
=
+
−
+
=
+
−






−






2
1
1
1
1
2
3
0
1
2
+
−





+
+






2
3
3
4
1
1
c
z
z
c
z
z
	
(4.420)
The constants c0 and c4 are obtained as they would in Case I, that is,
	
c
F
0
0
0
=
=
( )
	
(4.421)
	
c
z
z
F z
z
z
z
z
4
1
3
1
1
2
1
1
1
8
=
+






=
+
−
=
=−
=−
( )
(
)
	
(4.422)
The coefficient of the highest order term is evaluated directly from
	
c
z
z
F z
z
z z
z
z
3
3
1
2
1
1
2
1
1
3
2
=
−






=
+
+
=
=
=
( )
(
)
	
(4.423)

236
Simulation of Dynamic Systems with MATLAB® and Simulink®
Substituting the values for c0, c3, and c4 into Equation 4.420 yields
	
F z
z
z
z
z
c
z
z
c
z
z
( )
(
) (
)
=
+
−
+
=
−





+
−






2
1
1
1
1
2
3
1
2
2
+
−





+
−






3
2
1
1
8
1
3
z
z
z
z
	
(4.424)
Combining the terms on the right-hand side of Equation 4.424 into a single term with common 
denominator (z − 1)3(z + 1) and then equating the numerators give
	
2
1
1
1
1
3
2
1
1
8
1
2
1
2
2
2
3
3
z
z
c z z
z
c z z
z
z z
z z
+
=
−
+
+
−
+
+
+
+
−
(
) (
)
(
)(
)
(
)
(
)
	
(4.425)
Expanding the right-hand side of Equation 4.425 and equating coefficients of like powers of z 
on both sides lead to
	
z
c
c
z
c
z
c
c
z
c
4
1
2
3
1
2
1
2
1
0
3
2
1
8
0
3
2
3
8
2
3
8
1
1
8
:
:
:
:
=
+
+
+
= −
+
+
= −
−
+
=
−





	
(4.426)
Selecting two of the above equations for simultaneous solution results in c1 = 9/8 and 
c2 = −11/4. Substituting the known values for c1 and c2 in Equation 4.424 gives
	
F z
z
z
z
z
z
z
( ) =
−





−
−





+
−






9
8
1
11
4
1
3
2
1
2
+
+






3
1
8
1
z
z
	
(4.427)
Inverting F(z) is accomplished using Table 4.6 (Cadzow 1973)
	
f
k
k
k
k
k
k
=
−
+
+
+
+





+
−
=
9
8
11
4
1
3
2
1
2
2
1
8
1
0 1 2 3
(
)
(
)(
)
(
) ,
, , , ,…
	
(4.428)
TABLE 4.6
Table for Inverting z-Transforms of the Form 
[z/(z − a)]n, n = 1, 2, 3, …
F(z)
fk, k = 0, 1, 2, 3, …
z
z
a
(
)
−
ak
z
z
a
(
)
−






2
(k + 1)ak
z
z
a
(
)
−






3
(
)(
)
k
k
ak
+
+
1
2
2
z
z
a
(
)
−






4
(
)(
)(
)
k
k
k
ak
+
+
+
1
2
3
3
z
z
a
(
)
−






5
(
)(
)(
)(
)
k
k
k
k
ak
+
+
+
+
1
2
3
4
4

237
Linear Systems Analysis
Evaluating the first several values of fk gives
	
f
f
f
0
1
2
9
8
11
4
3
2
1
8
0
9
8
22
4
18
2
1
8
0
9
8
33
4
36
2
1
8
2
=
−
+
+
=
=
−
+
+
=
=
−
+
+
=
,
,
	
	
f
f
f
3
4
5
9
8
44
4
60
4
1
8
5
9
8
55
4
90
2
1
8
10
9
8
66
4
126
4
1
8
1
=
−
+
−
=
=
−
+
+
=
=
−
−
=
,
,
+
6
Checking the above by long division confirms the numerical values above.
	
|
2
5
10
16
2
0
2
1 2
2
4
0
4
2
2
3
4
5
4
3
2
2
2
1
z
z
z
z
z
z
z
z
z
z
z
z
z
−
−
−
−
−
+
+
+
−
+
+
−
+
−
+
+
−z
z
z
z
z
z
z
z
z
z
z
−
−
−
−
−
−
−
−
−
+
−
+
−
+
+
−
−
−
+
2
1
2
1
2
3
1
2
3
5
0
4
2
5
10
0
10
5
10
4
8
5
10−
−
+
−
−
−
+
−
−
−
−
−
−
−
−
20
0
20
10
16
8
15
10
1
1
3
4
1
2
3
4
z
z
z
z
z
z
z
z
	
Case III: Complex poles of F(z)
When F(z) possesses complex poles, the partial fraction expansion is dictated by the last two z-trans­
form pairs in Table 4.4. An example serves to illustrate the procedure.
	
F z
z
z
z
z
( )
(
)(z
)
=
+
+
−
+
2
2
1
3
9 	
(4.429)
The first step is to decompose F(z) in two parts,
	
F z
Az
Bz
z
z
C
z
z
( )
(
)
=
+
−
+
+
−






2
2
3
9
1 	
(4.430)
The constant C is evaluated from
	
C
z
z
z
z
z
z
z
z
z
z
z
z
=
−






+
−
−
+
=
+
−
+
=
=
1
1
3
9
1
3
9
2
7
2
2
1
2
1
(
)(
)
)
	
(4.431)
Constants A and B are obtained by combining the terms in Equation 4.430 into a single term with 
common denominator (z − 1) (z2 − 3z + 9) and then equating the numerator to z2 + z the numerator 
in Equation 4.429. The resulting expression for F(z) is
	
F z
z
z
z
z
z
z
( )
( / )
(
)
= −
+
−
+
+
−






2 7
11 7
3
9
2
7
1
2
2
/
	
(4.432)
	
=−
−
−
+





+
−






1
7
2
11
3
9
2
7
1
2
2
z
z
z
z
z
z
	
(4.433)
The quadratic factor in the denominator of Equation 4.433 implies that inverting F(z) will 
require a linear combination of e−akT sin kωT and e−akT cos kωT (see Table 4.4). Comparing the 

238
Simulation of Dynamic Systems with MATLAB® and Simulink®
standard form of the denominator in the last row of Table 4.4 and the quadratic denominator in 
Equation 4.433,
	
z
T z
z
z
aT
aT
2
2
2
2
3
9
−
+
=
−
+
−
−
−
(e
)
e
cos ω
	
(4.434)
Equating like powers of z and solving for e−αT- and ωT,
	
e
e
−
−
=
⇒
=
2
9
3
aT
aT
	
(4.435)
	
−
=−⇒
=
⇒
=
−
2
3
1
2
3
(e
cos
)
cos(
)
aT
T
T
T
ω
ω
ω
π
	
(4.436)
The quadratic numerator in F(z) in Equation 4.433 must be expressed as a linear combination of 
the standard numerator forms in the last two rows of Table 4.4, that is,
	
2
11
2
1
2
2
z
z
T z
c z
T z
T
T
−
=
+
−
−
−
c (e
sin
)
[
(e
cos
) ]
α
α
ω
ω
	
(4.437)
Solving for c1 and c2 in Equation 4.437 leads to c1 = −16 3 9
/ , c2 = 2. F(z) is now written in a 
form where Table 4.4 can be used to find fk.
	
F z
c
T
z
T z
c z
T
T
T
T
( )
(e
sin
)z
(e
cos
)
(
(e
co
=−
−
+
+
−
−
−
−
−
1
7
2
1
2
2
2
2
α
α
α
α
ω
ω
e
s
) ]
(e
cos
)
ω
ω
α
α
T z
z
T z
z
z
T
T
2
2
2
2
7
1
−
+








+
−






−
−
e
	
(4.438)
	
f k
c
k T
c
k T
k
kT
T
( )
[
sin
e
cos
]
,
, , , ,
−
+
+
=
−
−
1
7
2
7
0 1 2 3
1
2
e α
α
ω
ω
…
	
(4.439)
	
=−
−





+









1
7
16 3
9
3
3
2 3
3
( ) sin
( ) cos
k
k
k
k
π
π 


+
=
2
7
0 1 2 3
,
, , , ,
k
…
	
(4.440)
By observation of F(z) in Equation 4.429, it follows that f0 = 0 and f1 = 1. The reader can readily 
verify these values from Equation 4.440 with k = 0, 1.
An alternative approach when F(z) contains complex poles is to proceed the same way as in Case 
1 where all the poles were real and distinct. The key is appropriate conversion between rectangular 
and polar representations of the complex roots of F(z) and the complex coefficients arising from 
partial fraction expansion.
Suppose F(z) is of the form
	
F z
N z
D z
N z
z
p
z
p
( )
( )
( )
( )
(
)(
)
=
=
−
−
1
2 	
(4.441)
where the complex poles expressed in polar form are p1 = Rejθ, p2 = Re−jθ.
Expanding F(z) as we did in Case 1 (real and distinct poles),
	
F z
A
z
z
p
A
z
z
p
( ) =
−





+
−






1
1
2
2 	
(4.442)
where
	
A
z
p
z
N z
z
p
z
p
N p
p p
p
z
p
1
1
1
2
1
1
1
2
1
=
−
−
−






=
−
=
(
)
( )
(
)(
)
(
)
(
)	
(4.443)

239
Linear Systems Analysis
and A2 is the conjugate of A1. In polar form, A1 = Cejφ, A2 = Ce−jφ Equation 4.442 becomes
	
F z
C
z
z
Re
C
z
z
Re
j
j
j
j
( ) =
−





+
−






−
−
e
e
φ
θ
φ
θ 	
(4.444)
The inverse z-transform of F(z) in Equation 4.444 is
	
f
C
R
C
R
k
j
j
k
j
j
k
=
+
−
−
e
e
e
e
φ
θ
φ
θ
(
)
(
) 	
(4.445)
	
=
+
−
−
CR
R
k
j
j
k
j
j
k
[
(
)
(
)
e
e
e
e
φ
θ
φ
θ 	
(4.446)
	
=
+






+
+
2
2
CRk
j k
j k
e
e
(
)
(
)
θ φ
θ φ
	
(4.447)
	
=
+
=
2
0 1 2
CR
k
k
k cos (
),
, , ,
θ
φ
…	
(4.448)
Thus, F(z) in Equation 4.441 can be inverted simply by finding polar coordinates of the poles p1, 
p2, and complex coefficients A1, A2.
EXAMPLE 4.23
Find the inverse z-transform of F(z) = z2 − z/z2 − 0.6z + 0.25.
Factoring the denominator to find the poles p1 and p2,
	
F z
z
z
z
z
z
z
z
p
z
p
p
j
( )
.
.
(
)(
) ,
.
.
,
=
−
−
+
=
−
−
−
=
±
2
2
2
1
2
12
0 6
0 25
0 3
0 4
	
(4.449)
Converting the complex poles to polar form gives
	
p
j
Re
j
1 2
0 3
0 4
,
.
.
=
±
=
± θ
	
(4.450)
where
	
R =
+
=
[( . )
( . ) ]
.
/
0 3
0 4
0 5
2
2 1 2
	
	
θ =





=
−
tan
rad
1 4
3
0 9273
.
	
From Equation 4.443, the constant A1 in the partial fraction expansion of F(z) is
	
A
N p
p p
p
p
p
p p
p
p
p
p
j
1
1
1
1
2
1
2
1
1
1
2
1
1
2
1
0 3
0 4
1
0 3
=
−
=
−
−
=
−
−
=
+
−
+
(
)
(
)
(
)
.
.
.
j
j
j
0 4
0 3
0
1
2
7
8
.
( .
)
−
−
=
+
.4
	
(4.451)

240
Simulation of Dynamic Systems with MATLAB® and Simulink®
Converting A1 to polar form,
	
C
A
j
=
=
+
=
1
1
2
7
8
65
8
	
(4.452)
	
φ =
=
+





=





=
−
Arg(
tan
ra
A
j
1
1
1
2
7
8
7
4
1 0517
)
Arg
.
dd
	
(4.453)
From Equation 4.448, the discrete-time signal fk is
	
f
k
k
k
k
=
+
=
2
65
8
0 5
0 9273
1 0517
( . ) cos( .
.
),
0,1, 2,...
	
(4.454)
	
=
+
=
2 0156 0 5
0 9273
1 0517
0 1 2
.
( . )
.
.
,
, , ,
(
)
k
k
k
cos
… 	
(4.455)
The reader should check that the first several values of fk obtained from Equation 4.455 agree 
with the numerical values obtained by long division of the denominator z2 − 0.6z + 0.25 of F(z) 
into the numerator z2 − z.
EXERCISES
	4.36	 Find the z-transforms of the following causal sequences fk, k = 0, 1, 2, 3, …. Use long division 
to check the first two nonzero values of fk.
(a) kak
(b) k2( − 1)k
(c) δk + (0.5)k
(d) sin kπ
(e) (− 1)k cos (2kπ/3)
(f) (k + 1)δk–1
(g) f
k
k
k =
=
=




0
0 2 4 6
1
,
, , , ,...
,
0,1, 3, 5,...
(h) f
k
k
k
k =
=
=




0
0 1 2 3
4 5 6
,
, , , ,...
,
, , ,...
(i) f
k
k
k
k
k
=
=
=
−
=





1
0
0
0 1 3 5 7
1
2
2
2 4 6
2
,
,
, , , , ,...
(
)
,
, , ,...
	4.37	 Find the inverse z-transform of the expressions below. Use long division to check the first two 
nonzero values of fk.
(a) z
a
z
b
+
+
(b)
(
)
z
z
z
2
2
2
1
1
+
−
(c) (
)
z
z
2
3
3
−
(d) (
)
z
z
2
2
1
1
+
+
(e) (
)
z
z
z
3
2
2
1
+
−
(f)
z
z
z
2
3
2
1
+
+
(g)
z
z
z
+
−+
2
4
2
(h)
(
)
(
)
z z
z
z
−
−+
2
3 4
2
(i)
z
z
4
4
1
−
(j) z
z
2
2
1
2
+
+
(k)
(
)
z
z z
z
+
+ +
1
2
2
 
	4.38	 Find the z-transforms of the discrete-time signals resulting from uniform sampling of the 
continuous-time functions below. All functions are zero for t < 0.
	
(a) 1 + 2t (b) te−2t (c) e−at − e−bt (d) t2 sin 2t (e) e−2t cos t (f) 1/2t
	4.39	 a.	 Find the z-transforms U(z) and F(z) of the discrete-time signals pictured in Figure E4.39.

241
Linear Systems Analysis
	
b.	 Express the signal uk in below figure as uk = α + β(−1)k, k = 0, 1, 2, 3, … and determine 
α and β. Use the linearity property and the z-transforms of the unit step and unit alternat­
ing sequence, that is, z{ûk} = z/(z − 1) and z{(−1)k} = z/(z + 1), to find U(z).
	4.40	 Graph the discrete-time signals fk, k = 0, 1, 2, 3, … below and find F(z).
	
a.	
fk
k i
i
=
−
=
∞
∑δ
0
	
b.	
fk
i
k
=
=∑1
0
	
c.	
f
i
k
i
k
=
=∑
0
	
d.	
fk
i
i
k
=
−
=∑(
)1
0
	4.41	 Use the two methods discussed for inverting z-transforms with complex poles to find the 
discrete-time signal fk, k = 0, 1, 2, … with z-transform
	
F z
z
z
z
z
z
( )
(
)(
)
=
+
−
+
+
3
1
2
2
2
2
	
	4.42	 Write a MATLAB function to invert
	
F z
b z
b z
b z
b
z
p
z
a z
a
( )
(
)(
)
=
+
+
+
−
+
+
3
2
2
2
1
0
1
2
1
0 	
	
where the quadratic term z2 + a1z + a0 = (z − p2)(z − p3), p2, p3 = α ± jβ.
	
	
The inverse z-transform is given by
	
f
F
A p
CR
k
k
k
k
k
k
=
+
+
+
=
0
1
1
2
0 1 2 3
δ
θ
φ
(
)
(
),
, , , ,
.
cos
… 	
	
	
The function input parameters are p1, a1, a0, b3, b2, b1, and b0 and the outputs are A1, C, R, 
θ, φ, and F0. The function declaration line is
	
[A1, C, R, theta, phi, F0]= invert(p1,a1,a0,b3,b2,b1,b0)
	
	
Check the function by running it for
	
i.	
F z
z
z
z
z
z
( )
(
)(
)
=
+
−
+
+
3
1
2
2
2
2
	
ii.	
F z
z
z
z
z
z
z
( )
(
)(
)
=
+
+
+
−
+
+
2
4
5
3
2
4
3
2
2
	
and comparing the first several values of fk, k = 0, 1, 2, … with the values obtained by long 
division of the cubic denominator into the quadratic numerator.
FIGURE E4.39

242
Simulation of Dynamic Systems with MATLAB® and Simulink®
4.7  Z-DOMAIN TRANSFER FUNCTION
We have seen how the transfer function of a linear continuous-time system is used to find the sys­
tem’s response to elementary inputs. Stability and frequency response characteristics of the system 
can be inferred from the transfer function as well. A discrete-time system transfer function does 
the same for linear discrete-time systems. We begin with the nth-order, linear, constant coefficient 
difference equation
	
y
a y
a y
b u
b u
n
m
k
k
n
k n
k
m
k m
+
+
+
=
+
+
≥
−
−
−
−
1
1
0
1


,
	
(4.456)
z-Transforming both sides and applying the linearity property gives
	
z y
a z y
a z y
b z u
b z u
b z u
k
k
n
k n
k
k
m
k m
{ }
{
}
{
}
{ }
{
}
{
}
+
+
+
=
+
+
+
−
−
−
−
1
1
0
1
1


	
(4.457)
Assuming the input is applied at k = 0 and the initial values y–1, y–2, …, y–n are zero, we can use 
the delay property in Table 4.5 in the previous section to arrive at
	
Y z
a z Y z
a z Y z
b U z
b z U z
b z
U z
n
n
m
m
( )
( )
( )
( )
( )
( )
+
+
+
=
+
+
+
−
−
−
−
1
1
0
1
1


	
(4.458)
The z-domain transfer function is defined as the ratio of Y(z) to U(z). Thus,
	
H z
Y z
U z
b
b z
bmz
a z
a
z
a z
n
m
n
n
n
n
( )
( )
( )
,
=
=
+
+
+
+
+
+
+
−
−
−
−
−+
−
0
1
1
1
1
1
1


 1
≥m
	
(4.459)
	
=
+
+
+
+
+
+
+
≥
−
−
−
−
b z
b z
b z
z
a z
a
z
a
n
m
n
n
m
n m
n
n
n
n
0
1
1
1
1


 1
,
	
(4.460)
Depending on the application, one of the two forms given in Equations 4.459 and 4.460 for the 
transfer function, also called the pulse transfer function, is usually preferable. A good example to 
illustrate how to find the z-domain transfer function of a discrete-time system is an Euler integrator. 
Recall from Section 3.3 that the difference equation for approximating a continuous-time integrator 
using explicit Euler integration is
	
x
n
x
n
Tu n
n
A
A
(
)
( )
( ),
, , ,
+
=
+
=
1
0 1 2 …	
(4.461)
where u(n) and xA(n) are the discrete-time input and outputs and xA(0) = 0. Employing the notation 
of this chapter, the difference equation is written
	
x
x
Tu
k
k
k
k
–
,
, , ,
–
–
1
1
1 2 3
=
=
… 	
(4.462)
where uk = u(kT), k = 0, 1, 2, … are sampled values of the input signal and xk, k = 0, 1, 2, … 
is the discrete-time output intended to approximate the continuous-time integrator output x(t) 
at the end of each integration step. The initial condition is x0 = x(0) = 0 and the first computed 
value is x1.
z-transforming Equation 4.462,
	
z x
z x
Tz u
k
k
k
{ }
{
}
{
}
−
=
−
−
1
1 	
(4.463)

243
Linear Systems Analysis
Since xk and uk are both zero for k < 0, the delay property in Table 4.5 applies.
	
X z
z
X z
Tz U z
( )
( )
( )
−
=
−
−
1
1
	
(4.464)
	
H z
X z
U z
Tz
z
T
z
( )
( )
( )
=
= −
=
−
−
−
1
1
1
1 	
(4.465)
EXAMPLE 4.24
The input to a continuous-time integrator is u(t) = sin πt.
	
a.	Approximate the output x(t) using Euler integration with step size T = 0.1 s.
	
b.	Find the exact solution x(t) and plot on the same graph with xk.
	
a.	Solving for X(z) in Equation 4.465 and looking up U(z) = z{uk} = z{sin kωT} from 
Table 4.4 give
	
X z
H z U z
T
z
T z
z
T z
T
( )
( ) ( )
(sin
)
(cos
)
. ,
=
=
−
−
+






=
1
2
1
2
0 1
ω
ω
ω π
= 	
(4.466)
	
=
−
−
+






0 1
1
0 1
2
0 1
1
2
.
(sin .
)
(cos .
)
z
z
z
z
π
π
	
(4.467)
	
	
Using the method of partial fraction expansion presented in Section 4.6.3, the inverse 
z-transform of X(z) is (details are left as an exercise)
	
x
k
k
k
k =
−
−
−






=
0 05
0 1
1
0 1 1
0 1
.
sin .
cos .
(
)
sin
,
,
π
π
π
π
cos 0.1
0.1
,, , ,...
2 3
	
(4.468)
	
b.	The continuous-time integrator output is obtained by integration of the input u(t),
	
x t
u
t
t
t
( )
( )d
sin
d
(
)
=
−
∫
∫
λ
λ
πλ λ
π
π
=
=
cos
0
0
1 1
	
(4.469)
The discrete-time signal xk and the continuous-time integrator output x(t) are plotted in 
Figure 4.44 for one cycle of the input.
4.7.1  Nonzero Initial Conditions
Using the z-transform to solve a difference equation with nonzero initial conditions requires addi­
tional terms to account for the nonzero values. Suppose yk is a discrete-time signal for which y–1 ≠ 
0 like the one shown in Figure 4.45. Also shown is yk–1.
z{yk–1} is obtained from the basic definition of the z-transform, that is,
	
z y
y
z
y
y z
y z
y z
k
k
k
k
{
}
−
−
−
−
−
−
−
=
∞
=
=
+
+
+
+
∑
1
1
1
0
1
1
2
2
3
0

	
(4.470)
	
=
+
+
+
+
−
−
−
−
y
z
y
y z
y z
1
1
0
1
1
2
2
[
]
	
(4.471)
	
=
+
−
−
y
z Y z
1
1 ( ) 	
(4.472)

244
Simulation of Dynamic Systems with MATLAB® and Simulink®
Consider the first-order difference equation
	
y
u
y
k
k
k
k
=
+
=
−
β
α
1
0 1 2 3
,
, , , ,... 	
(4.473)
with input uk applied at k = 0 and nonzero initial condition y–1. It will be shown later that Equation 
4.473 is the difference equation of a low-pass digital filter. z-transforming Equation 4.473 and using 
the result in Equation 4.472 give
	
Y z
U z
y
z Y z
( ) =
+
+
−
−
β ( )
[
( )]
α
1
1
	
(4.474)
Multiplying Equation 4.474 by z and solving for Y(z) give
	
Y z
z
z
U z
y
z
z
( )
( )
=
−
+
−






−
β
α
α
1
α 	
(4.475)
The first term on the right-hand side of Equation 4.475 is H(z) U(z). The additional term results 
from the nonzero initial condition. A similar procedure is employed for higher order difference 
equations with several nonzero initial conditions.
0
0.2
0.3
0.4
0.5
0.7
0.6
0
0.1
T = 0.1 s
xk, k = 0, 1, 2, …, 20
x(t), 0 ≤ t ≤ 2
x(t) = (1/π)(1 – cos πt)
0 1
2 3 4 5 6 7 8 9 10 11 12
Explicit Euler integration of u(t) = sin πt
13 14 15 16 17 18 19 k
0.2
0.6
0.4
0.8
1
1.6
1.4
1.2
t (s)
1.8
2
FIGURE 4.44  Continuous- and discrete-time (explicit Euler) integrator outputs.
FIGURE 4.45  Discrete-time signals yk and yk–1(y–1 ≠ 0).

245
Linear Systems Analysis
EXAMPLE 4.25
For the discrete-time system described by Equation 4.473,
	
a.	Find the response to a unit step when the initial condition y–1 ≠ 0.
	
b.	Find the response to a unit alternating input when y–1 ≠ 0.
	
c.	For α = 0.9 and β = 0.1, graph the responses in parts (a) and (b) when y–1 = 2.
	
a.	uk = 1, k = 0, 1, 2, 3, …, and U(z) = z/(z − 1).
	
Y z
z
z
z
z
y
z
z
( ) =
−
−





+
−






−
β
α
α
α
1
1
	
(4.476)
	
= −
−−
−





+
−






−
β
α
α
α
α
α
1
1
1
z
z
z
z
y
z
z
	
(4.477)
	
y
y
k
k
k
k
= −
−
+
=
+
−
+
β
α
α
α
1
1
0 1 2
1
1
1
(
)
,
, , ,...
	
(4.478)
	
b.	u
k
U z
z z
k
k
= −
=
=
+
(
) , 
0,1, 2, 3,
, and
( )
/(
)
1
1
…
.
	
Y z
z
z
z
z
y
z
z
( ) =
−
+





+
−






−
β
α
α
α
1
1
	
(4.479)
	
= −
+ −
−





+
−






−
β
α
α
α
α
α
1
1
1
z
z
z
z
y
z
z
	
(4.480)
	
yk
y
k
k
k
k
= +
−
+
+
=
+
−
+
β
α
α
α
1
1
0 1 2
1
1
1
[(
)
]
, , ,...
’
	
(4.481)
	
	
Note that the solutions in Equations 4.478 and 4.481 reduce to the given initial 
­condition y–1 for k = −1.
	
c.	Graphs of yk, k = −1, 0, 1, 2, … in Equations 4.478 and 4.481 are shown in 
Figure 4.46.
	
	
Note how the system passes the low-frequency unit step and effectively blocks 
the higher frequency unit alternating sequence once the transient component αk+1 
dies out. Setting β = 1 − α, the normalized unit step and unit alternating steady-state 
responses are
	
(
)
,
, , , ,
yk
u
k
ss
k
=
=
=
1
1
0 1 2 3
for
…
	
(4.482)
	
(
)
(
)
.
. (
)
(
)
(
) ,
y
u
k
k ss
k
k
k
k
k
= −
+
−
= −
−
−
=
−
= −
=
1
1
1
1
0 9
1
0 9
1
1
19
1
1
0
α
α
for
,, , , ,...
1 2 3
	
(4.483)
4.7.2  Approximating Continuous-Time System Transfer Functions
It is common practice to start with a block diagram representation of a continuous-time system and 
transform it to a block diagram of a discrete-time system with comparable dynamics. The discrete-
time signals are intended to approximate the corresponding signals in the continuous-time system 

246
Simulation of Dynamic Systems with MATLAB® and Simulink®
at discrete points in time. To illustrate, suppose we have a need to approximate the behavior of a 
second-order system
	
H s
Y s
U s
K
s
s
n
n
n
( )
( )
( )
=
=
+
+
ω
ζω
ω
2
2
2
2
	
(4.484)
A simulation diagram is shown in Figure 4.47.
The continuous-time integrator blocks with transfer function H1(s) = 1/s are replaced by dis­
crete-time (numerical) integrators with z-domain transfer functions H1(z), and the signals become 
discrete-time in nature (see Figure 4.48).
0
5
10
15
20
25
30
35
40
45
50
yk, for uk = 1, k = 0, 1, 2, … and y–1 = 2
yk, for uk = (–1)k, k = 0, 1, 2, … and y–1 = 2
α = 0.9, β = 1 – α = 0.1
Unit step and unit alternating responses of yk = βuk + αyk–1
k
0
0.25
0.5
0.75
1
1.25
1.5
1.75
2
FIGURE 4.46  Responses of discrete-time system with nonzero initial condition.
FIGURE 4.47  Simulation diagram for second-order system in Equation 4.484.
FIGURE 4.48  Discrete-time system with numerical integrator z-domain transfer functions.

247
Linear Systems Analysis
Block diagram reduction or any other suitable method, for example, Mason’s Gain Formula 
(Dorf and Bishop 2005), using signal flow graphs or solution of simultaneous equations results in 
the pulse transfer function of the discrete-time system given in Equation 4.485.
	
H z
Y z
U z
K
H
z
H
z
H z
n
I
n
I
n
( )
( )
( )
( )
( )
( )
=
=
+
+
ω2
2
2
2
1
2
1
ω
ζω
	
(4.485)
Choosing HI(z) as the z-domain transfer function for an explicit Euler integrator (see 
Equation 4.465) gives
	
H z
Y z
U z
K
T
z
T
z
T
z
n
n
n
( )
( )
( )
(
(
))
(
(
))
(
(
))
=
=
−
−
+
−
+
ω
ω
ζω
2
2
2
2
1
1
2
1
1 	
(4.486)
Simplifying the above expression yields
	
H z
Y z
U z
K
T
z
T z
T
T
n
n
n
n
( )
( )
( )
(
)
(
)
(
)
=
=
−
−
+ −
+
ω
ζω
ζω
ω
2
2
2
2 1
1
2
	
(4.487)
The difference equation for the discrete-time system is obtained directly from the z-domain 
transfer function expressed in terms of negative power of z.
	
Y z
U z
K
T
z
T z
T
T
z
n
n
n
n
( )
( )
(
)
(
)
[
(
) ]
= −
−
+
−
+
−
−
−
ω
2
2
1
2
2
1
2 1
1
2
ζω
ζω
ω
	
(4.488)
	
⇒
−
−
+
−
+
=
−
−
−
Y z
T z Y z
T
T
z Y z
K
T
z U
n
n
n
n
( )
(
)
( )
[
(
]
( )
(
)
2 1
1
2
1
2
2
2
2
ζω
ζω
ω
ω
)
( )z 	
(4.489)
	
⇒
−
−
+
−
+
=
−
−
−
Y
T y
T
T
y
K
T
u
k
n
k
n
n
k
n
k
2 1
1
2
1
2
2
2
2
(
)
[
(
) ]
(
)
ζ
ζ
ω
ω
ω
ω
	
(4.490)
Assuming the initial conditions are y–1 and y0, the discrete-time variable k in Equation 4.490 
assumes the values k = 1, 2, 3, …. The first computed value is y1.
Initial conditions in the discrete-time system model are based on the initial conditions for 
the  continuous-time system, y(0) and y(0). Figure 4.49 illustrates a derivation for y–1 using 
backward extrapolation from the point y(0) along the line with slope y(0). Note the depen­
dence on T in the result for y–1. A similar approach is used to extrapolate y1 when the initial 
conditions  are  y0  and y1. The first computed value is y2. What is the starting value for k in 
Equation 4.490?
FIGURE 4.49  Initial conditions y0, y–1 obtained from y(0) and y(0).

248
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXAMPLE 4.26
Consider a second-order system with parameters K = 1, ωn = 2 rad/s, and ζ = 0.5.
	
a.	Using explicit Euler integration with step size T = 0.025 s, find a difference equation that 
can be solved recursively to approximate the unit step response of the continuous-time 
system.
	
b.	Find the analytical solution for the step response of the continuous-time system.
	
c.	Plot the continuous- and discrete-time responses on the same graph.
	
a.	A recursive solution for yk, k = 1, 2, 3, … is obtained from Equation 4.490 as follows.
	
y
T y
T
T
y
K
T u
k
k
n
k
n
n
k
n
k
=
−
−−
+
+
=
−
−
−
21
1
2
1 2 3
1
2
2
2
2
(
)
[
(
) ]
(
)
,
ζω
ζω
ω
ω
, , ,...	
(4.491)
	
⇒
=
−
+
=
...
−
−
−
y
y
y
u
k
k
k
k
k
1 95
0 9525
0 0025
1 2 3
1
2
2
.
.
.
,
, , ,
	
(4.492)
	
b.	The continuous-time step response can be obtained from the transfer function of the 
second-order system by inverse Laplace transformation of Y(s) = H(s)U(s). Alternatively, 
we can use Equation 2.23 or 2.24 for the step response of an underdamped second-
order system. Adopting the latter approach,
	
y t
K
t
t
t
nt
d
n
d
d
( )
cos
sin
=
−
+












≥
−
1
0
e
,
  
ζω
ω
ζω
ω
ω
ωd
n
=
−
(
)
1
2
ζ ω
	
(4.493)
	
⇒
= −
+






−
y t
t
t
t
( )
cos
sin
1
3
1
3
3
e
	
(4.494)
	
c.	Graphs of the solution to Equations 4.492 (every other point) and 4.494 are plotted in 
Figure 4.50, and selected values are presented in Table 4.7 for comparison (see MATLAB 
M-file “Ch4_Ex4_26.m”).
0
0
0.2
0.4
0.6
0.8
1
1.2
Step response of discrete and continuous second-order systems
0.5
1
1.5
2
2.5
3
3.5
4
Explicit Euler integration, T = 0.025 s
yk, k = 0, 2, 4, 6, … 200
y(t), 0 ≤ t ≤ 5
4.5
5
t (s)
FIGURE 4.50  Continuous- and discrete-time (Euler integration) second-order system step responses (K = 1, 
ωn = 2 rad/s, ζ = 0.5).

249
Linear Systems Analysis
From the numerical values in Table 4.7, it appears that the discrete- and continuous-time tran­
sient responses are in agreement to one place after the decimal point. Greater accuracy requires 
we reduce the step size or consider a more accurate numerical ­integrator like the ones discussed 
in Chapter 3.
A general approach to deriving the z-domain transfer function H(z) for a discrete-time sys­
tem intended to approximate a linear continuous-time system with transfer function H(s) is now 
given. Starting with a simulation diagram of the continuous-time system, each integrator block 
with ­transfer function HI(s) = 1/s is replaced by a discrete-time transfer function block HI(z) 
­corresponding to a specific numerical integrator. For ­example, replacing HI(s) by HI(z) for explicit 
Euler integration,
	
1
1
1
1
s
H z
T
z
s
H z
z
T
I
I
←
=
−⇒
←
=
−
( )
( )
	
(4.495)
Hence, when explicit Euler integration is used to approximate the continuous-time integrators 
in an LTI system with transfer function H(s), the z-domain transfer function of the discrete-time 
system is obtained by replacing s in H(s) with (z − 1)/T. That is,
	
H z
H s
s
z
T
( )
( )|
(
)/
=
←
−1
	
(4.496)
For the continuous-time second-order system of Equation 4.484,
	
H z
K
s
s
K
z
T
z
T
n
n
n s
z
T
n
n
( )
((
)
)
((
)
(
)/
=
+
+
=
−
+
−
←
−
ω
ζω
ω
ω
ζω
2
2
2
1
2
2
2
1
2
1
/
/ )+ ωn
2
	
(4.497)
Simplifying Equation 4.497 results in Equation 4.487.
EXAMPLE 4.27
Use trapezoidal integration in place of explicit Euler to approximate the unit step response of the 
second-order system in Example 4.26.
Approximating a continuous-time integrator with input u(t) and output y(t) using trapezoidal 
integration results in (see Equation 3.40)
	
y
y
T u
u
k
k
k
k
=
+
+
−
−
1
1
2[
]
	
(4.498)
TABLE 4.7
Continuous- and Discrete-Time 
(Euler Integration) Responses
K
yk
tk
y(tk)
0
0
0
0
10
0.1170
0.25
0.1044
20
0.3643
0.5
0.3403
30
0.6425
0.75
0.6105
40
0.8845
1.0
0.8494
50
1.0562
1.25
1.0234
60
1.1506
1.5
1.1244
70
1.1787
1.75
1.1616
80
1.1605
2.0
1.1531
90
1.1174
2.25
1.1184
100
1.0677
2.5
1.0746

250
Simulation of Dynamic Systems with MATLAB® and Simulink®
z-transforming Equation 4.498,
	
Y z
z
Y z
T z U z
U z
( )
( )
[
( )
( )]
−
+
=
+
−
−
1
1
2
	
(4.499)
and solving for HI(z) give
	
H z Y z
U z
T
z
z
I( )
( )
( ) =
+
−






−
−
2
1
1
1
1
	
(4.500)
	
=
+
−






T z
z
2
1
1 	
(4.501)
The z-domain transfer function of the discrete-time system is therefore
	
H z
H s
K
s
s
s
HI z
n
n
n s
T
z
z
( )
( )
( / )((
)/(
))
=
=
+
+
←
←
−
+
( )
1
2
2
2
2
1
1
2
ω
ζω
ω
	
(4.502)
Replacing s by (2/T)((z − 1)/(z + 1)) in Equation 4.502 and simplifying result in
	
H z
K
T
z
z
T
T
z
T
z
n
n
n
n
( )
(
) (
)
[ (
)
(
) ]
[(
)
]
(
=
+
+
+
+
+
−
+
ω
ζω
ω
ω
2
2
2
2
2
2
1
4 1
2
4
4 1−
+
ζω
ω
n
n
T
T
)
(
)2
	
(4.503)
Multiplying the numerator and denominator of H(z) in Equation 4.503 by z−2 leads to the 
­difference equation of the discrete-time system,
	
[ (
)
(
) ]
[
)
]
[ (
)
(
) ]
4 1
2
4
4 1
2
2
1
2
2
+
+
+
−
+
−
+
−
−
ζω
ω
ω
ζω
ω
n
n
k
n
k
n
n
k
T
T
y
T
y
T
T
y
=
+
+
−
−
K
T
u
u
u
n
k
k
k
(
) (
)
ω
2
1
2
2
	
(4.504)
Substituting the given values for K, ζ, and ωn gives
	
y
y
y
u
u
u
k
k
k
k
k
k
k
=
−
+
+
+
=
−
−
−
−
1
4 1025 7 995
3 9025
0 0025
2
1
1
2
1
2
.
[ .
.
.
(
)],
, , ,
2 3 …
	
(4.505)
where uk = 1, k = 0, 1, 2, 3, … (zero otherwise) and y–1 = y0 = 0.
The unit step responses of the continuous- and discrete-time system approximation in Equation 
4.505 are calculated in the M-file “Ch4_Ex4_27.m.” The results are graphed in Figure 4.51 and 
tabulated in Table 4.8. As expected, the trapezoidal integrator is more accurate than the explicit 
Euler.
4.7.3  Simulation Diagrams and State Variables
When a discrete-time system is modeled by one or more difference equations, a simulation diagram 
represents a more visual description of the system’s dynamics. Furthermore, a simulation diagram 
leads directly to an equivalent discrete-time state-space model, in much the same way a continuous-
time state variable model was developed from a simulation diagram of the continuous-time system. 
As in the continuous-time case, the simulation diagram and state-space models of a discrete-time 
system are not unique.

251
Linear Systems Analysis
The dynamic block in a simulation diagram representation of a continuous-time system is 
the integrator or 1/s block. In a discrete-time system, delaying yk for one time step results in yk–1. 
If y–1 = 0, the delay property states z{yk–1} = z−1z{yk}. For a discrete-time system, the unit-delay 
block is the counterpart to the integrator block. Figure 4.52 shows several common ways of repre­
senting a unit-delay block.
A block diagram implementation of the nth-order difference Equation 4.456 is shown in 
Figure 4.53.
0
0
0.2
0.4
0.6
0.8
1
1.2
Step response of discrete and continuous second-order systems
0.5
1
1.5
2
2.5
3
3.5
4
Trapezoidal integration, T = 0.025 s
yk, k = 0, 2, 4, 6, … 200
y(t), 0 ≤ t ≤ 5
4.5
5
t (s)
FIGURE 4.51  Continuous- and discrete-time (trapezoidal integration) second-order system step responses 
(K = 1, ωn = 2 rad/s, ζ = 0.5).
TABLE 4.8
Continuous- and Discrete-Time 
(Trapezoidal Integration) Responses
K
yk
tk
y(tk)
0
0
0
0
10
0.1090
0.25
0.1044
20
0.3468
0.5
0.3403
30
0.6169
0.75
0.6105
40
0.8546
1.0
0.8494
50
1.0268
1.25
1.0234
60
1.1261
1.5
1.1244
70
1.1620
1.75
1.1616
80
1.1526
2.0
1.1531
90
1.11175
2.25
1.1184
100
1.0736
2.5
1.0746
FIGURE 4.52  Graphical representation of the delay property.

252
Simulation of Dynamic Systems with MATLAB® and Simulink®
The block diagram shown in Figure 4.53 contains n + m unit delays to implement the nth-order 
discrete-time system governed by the difference equation in Equation 4.456. Only block diagrams 
with the minimum number of n delays are classified as simulation diagrams. A simulation diagram 
serves as a convenient way of identifying the discrete-time states in much the same way continuous-
time simulation diagrams were used to define the continuous-time states. The discrete-time states 
x1,k, x2,k, …, xn,k are chosen as the outputs of the n unit delays. As in the case of continuous-time 
systems, the simulation diagram and, hence, the states are not unique.
When the past input terms uk–1, uk–2, …, uk–m are not present in Equation 4.456, the constants 
b1 = b2 =  = bm, = 0 and the block diagram in Figure 4.53 reduces to a simulation diagram. 
When one or more past input terms appear in the difference equation, a simulation diagram can be 
constructed by starting with the z-domain transfer function in Equation 4.459 expressed as
	
Y z
U z
Y z
W z
W z
U z
( )
( )
( )
( )
( )
( )
=
	
(4.506)
where
	
W z
U z
a z
a z
a z
n
n
( )
( ) =
+
+
+
+
−
−
1
1
1
1
2
2

	
(4.507)
	
Y z
W z
b
b z
b z
m
m
( )
( ) =
+
+
+
−
−
0
1
1

	
(4.508)
Difference equations corresponding to Equations 4.507 and 4.508 are
	
w
u
a w
a w
a w
k
k
k
k
n
k
n
=
−
−
−
−
−
−
−
1
1
2
2

	
(4.509)
	
y
b w
b w
b w
k
k
k
m
k
m
=
+
+
+
−
−
0
1
1

	
(4.510)
FIGURE 4.53  Block diagram for nth-order discrete-time system in Equation 4.456.

253
Linear Systems Analysis
Implementation of Equations 4.509 and 4.510 results in the simulation diagram shown in 
Figure  4.54. Discrete-time state equations relate the state vector at time k + 1 to the discrete-
time state vector and input vector at time k. In the single input case with the states as shown in 
Figure 4.54, the result is
	
x
x
x
x
x
x
x
w
a x
a
k
k
k
k
n
k
n k
n k
k
n
k
1
1
2
2
1
3
1
1
1
1
2
,
,
,
,
,
,
,
,
+
+
−
+
+
=
=
=
=
= −
−
−


x
a x
u
n
k
n k
k
−
−
+





1
1
,
,
	
(4.511)
The output yk is expressed in terms of the state and input according to
	
y
b x
b x
b x
b w
k
m
n
m
k
n
k
n k
k
=
+
+
+
+
−+
−
1
2
1
1
0
,
,
,

	
(4.512)
	
=
+
+
+
+
−
−
−
−+
−
−
b x
b x
b x
b u
a x
a x
a x
m
n m
k
n
k
n k
k
n
k
n
k
n
1
2
1
1
0
1
2
1
1
,
,
,
,
,


[
,
k] 	
(4.513)
	
y
a b x
a
b x
a b x
b u
m
a b x
a
b
k
n
k
n
k
n k
k
n
k
n
=
−
−
−
−
+
=
−
−
−
−
0 1
1 0
2
1 0
0
0 1
1
0
,
,
,
,
,

0
2
1 0
0
1
1
1 0
0
x
a
b x
b
a b x
b
a b x
b u
k
m
n m k
m
m
n m
k
n k
,
,
,
,
(
)
(
)


−
+
−
+
+
−
+
+
−
−+
k
n
n
k
n
n
n
k
m
n
b
a b x
b
a
b x
b
a b x
,
,
,
(
)
(
)
(
)
,
,
=
−
−
+
−
+
+
−
−
−
−
1
1
0
1
1
1 0
1
1
1 0
…

n k
k
b u
m
n
,
,
+
=





0
	
(4.514)
FIGURE 4.54  Simulation diagram for nth-order system showing states x1,k, x2,k, …, xn,k.

254
Simulation of Dynamic Systems with MATLAB® and Simulink®
In the general case of a linear discrete-time system with r inputs and p outputs, the discrete-time 
state equations are of the form
	
x
Ax
Bu
yu
y
Cx
Du
k
k
k
k
k
k
k
+ =
+
+
=
+
1
,
,
	
(4.515)
where the system matrix A is n × n, the input matrix B is n × r, the output matrix C is p × n, and 
the direct coupling matrix D is p × r. For the discrete-time system described by Equations 4.511 
and 4.514, the system matrix A and input matrix B are
	
A
a
a
a
a
a
n
n
n
=
−
−
−
−
−




−
−
0
1
0
0
0
0
0
1
0
0
0
0
0
0
1
1
2
2
1












=






,
B
0
0
0
1

	
(4.516)
and the output matrix C and direct transmission matrix D are
	
C
a b
a
b
a b
m
a b
a
b
a
b
b
a b
b
n
n
n
n
m
m
m
=
−
−
−
=
−
−
−
−
−
−
−
+
[
],
[
0
1 0
1 0
0
1 0
1 0
0
1
0
…
…

a b
m
n
b
a b
b
a
b
b
a b
m
n
n
n
n
n
1 0
0
1
1 0
1
1 0
1
1
],
,
,
[
],
=
−
−
−
−
=





−
−
…
…

	
(4.517)
	
D
b
=[
]
0 	
(4.518)
The simulation diagram is redrawn for the case where m = n in Figure 4.55.
To illustrate the use of the state equations, consider the discrete-time approximation to a second-order 
continuous-time system using trapezoidal integration. From Equation 4.504, the difference equation is
	
y
a y
a y
b u
b u
b u
m
n
k
k
k
k
k
k
+
+
=
+
+
=
=
−
−
−
−
1
1
2
2
0
1
1
2
2
2
(
) 	
(4.519)
	
a
T
T
T
a
T
T
T
n
n
n
n
n
n
1
2
2
2
2
2
4
4 1
4 1
4 1
=
−
+
+
=
−
+
+
[(
)
]
(
)
(
) ,
(
)
(
)
(
ω
ζω
ω
ζω
ω
ζω
)
(
)
+ ωnT 2
	
(4.520)
	
b
K
T
T
T
b
K
T
T
T
b
n
n
n
n
n
n
0
2
2
1
2
2
2
4 1
2
4 1
=
+
+
=
+
+
=
(
)
(
)
(
) ,
(
)
(
)
(
) ,
ω
ζω
ω
ω
ζω
ω
K
T
T
T
n
n
n
(
)
(
)
(
)
ω
ζω
ω
2
2
4 1+
+
	
(4.521)
FIGURE 4.55  Simulation diagram for nth-order discrete-time system in Equation 4.456 (m = n).

255
Linear Systems Analysis
The simulation diagram is shown in Figure 4.56.
The state equations follow directly from Figure 4.56.
	
x k
x k
x k
a x
a x
u
k
k
k
1
2
2
2 1
1 2
1
1
,
,
,
,
,
+ =
+ = −
−
+




	
(4.522)
	
y
b
a b x
b
a b x
b u
k
l k
k
k
–
–
–
(
)
(
)
,
,
2
2 0
1
1 0
2
0
+
+
	
(4.523)
and the matrices A, B, C, and D in Equation 4.515 are
	
A
a
a
T
T
T
T
n
n
n
n
= −
−





= −
+
+
+
+
−
0
1
0
1
4 1
4 1
2
2
1
2
2
(
)
(
)
(
)
(
)
[(
ζω
ω
ζω
ω
ω
ζω
ω
n
n
n
T
T
T
B
)
(
)
(
)
,
2
2
4
4 1
0
1
−
+
+






=






	
(4.524)
	
C
b
a b
b
a b
K
T
T
T
T
n
n
n
n
=
−
−
=
+
+






[
]
(
)
(
)
[
2
2 0
1
1 0
2
2
8
4 1
ω
ζω
ω
ζω
2+ζωnT]
	
(4.525)
	
D
b
K
T
T
T
n
n
n
=
=
+
+






[
]
(
)
(
)
(
)
0
2
2
4 1
ω
ζω
ω
	
(4.526)
Using the same second-order system parameter values as in Examples 4.26 and 4.27, recursive 
solution of Equations 4.522 and 4.523 produces identical results to those shown in Figure 4.51 and 
Table 4.8 (see M-file “Ch4_trapezoidal_state.m”).
Discrete-time approximations to the step responses of two additional continuous-time sec­
ond-order systems, one with light damping (K = 1, ζ = 0.1, ωn = 1 rad/s) and the other heavily 
damped (K = 1, ζ = 2.5, ωn = 1 rad/s) are shown in Figure 4.57. Results are based on recur­
sive solution of the state equations for trapezoidal integration (see M-file “Ch4_Fig4_57.m”). 
Agreement between the exact and approximate solutions for both systems appears to be accept­
able. More detailed comparisons require numerical outputs from the continuous- and discrete-
time systems.
FIGURE 4.56  Simulation diagram for trapezoidal integration of second-order system.

256
Simulation of Dynamic Systems with MATLAB® and Simulink®
4.7.4  Solution of Linear Discrete-Time State Equations
A general solution to the discrete-time state equations gives the state xk for any value of discrete-
time k without resorting to a recursive (sequential) solution. Solving for the first several values of xk 
in Equation 4.515 leads to the observation
	
x
A x
A
Bu
A
Bu
ABu
Bu
k
k
k
k
k
k
k
=
+
+
+
+
+
=
−
−
−
−
0
1
0
2
1
2
1
0 1 2 3

…
,
, , , ,
	
(4.527)
	
=
+
=
−−
=
−
∑
A x
A
Bu
k
k
k i
i
k
i
0
1
0
1
0 1 2 3
,
, , , ,…
	
(4.528)
Equation 4.528 for the state xk is substituted in Equation 4.515 to obtain the general solution for 
the output yk, k = 0, 1, 2, 3, …. The result is
	
y
CA x
C
A
Bu
Du
k
k
k
k i
i
k
i
k
=
+






+
=
…
−−
=
−
∑
0
1
0
1
,
0,1, 2, 3,
	
(4.529)
The discrete-time state transition matrix Φk is defined as
	
Φk
k
A
k
=
=
,
,0 1 2 3
, , ,…	
(4.530)
Solutions for xk and yk, in terms of Φk, are
	
x
x
Bu
k
k
k
k i
i
k
i
=
+
=
…
−−
=
−
∑
Φ
Φ
0
1
0
1
,
0,1, 2, 3,
	
(4.531)
0
2
4
6
8
10
12
14
18
16
20
0
2
4
6
8
10
12
14
18
16
20
T = 0.025 s
T = 0.025 s
0
0
0.2
0.4
0.6
0.5
1
1.5
2
0.8
1
Trapezoidal integration of underdamped second-order system
Trapezoidal integration of overdamped second-order system
yk, k = 0, 10, 20, … 800
yk, k = 0, 10, 20, … 800
k = 1, ωn = 1 rad/s, ζ = 2.5
k = 1, ωn = 1 rad/s, ζ = 0.1
y(t), 0 ≤ t ≤ 20
y(t), 0 ≤ t ≤ 20
t (s)
FIGURE 4.57  Trapezoidal integration of (a) light and (b) heavily damped second-order systems.

257
Linear Systems Analysis
	
y
C
x
C
Bu
Du
k
k
k
k i
i
k
i
k
=
+
+
=
…
−−
=
−
∑
Φ
Φ
0
1
0
1
(
)
,
0,1, 2, 3,
	
(4.532)
Observe that an unforced system (uk = 0, k = 0, 1, 2, 3, …) transitions from its initial state x0 to 
a new state xk at time k according to xk = Φkx0. The discrete-time state equations and solutions are 
analogous to the results for continuous-time systems.
An expression for evaluating the discrete-time transition matrix can be obtained by 
­z-­transforming the first equation in Equation 4.515 resulting in
	
z x
z Ax
Bu
AX z
BU z
k
k
k
{
}
{
}
( )
( )
+
=
+
=
+
1
	
(4.533)
It is left as an exercise to show that
	
z x
z X z
x
k
{
}
[
]
( )
+
=
−
1
0 	
(4.534)
Combining Equations 4.533 and 4.534 gives
	
z X z
x
AX z
BU z
[ ( )
]
( )
( )
−
=
+
0
	
(4.535)
	
(
) ( )
( )
zI
A X z
zx
BU z
−
=
+
0
	
(4.536)
	
X z
zI
A
zx
BU z
( )
(
) [
( )]
=
−
+
−1
0
	
(4.537)
	
x
z
zI
A
zx
z
zI
A
BU z
k =
−
+
−
−
−
−
−
1
1
0
1
1
{
)
(
)}
{(
)
( )}	
(4.538)
Comparison of Equations 4.531 and 4.538 with uk = 0, k = 0, 1, 2, … implies
	
Φ
Φ
k
z
z
z
z zI
A
=
=
−
−
−
−
1
1
1
{ ( )}
{ (
)
) 	
(4.539)
An example using the discrete-time state equations follows.
EXAMPLE 4.28
The yearly increase in a monetary fund is a weighted sum of the increases over the prior 2 years 
plus an end-of-year (EOY) deposit. The fund starts with an initial amount P0.
	
a.	Write the difference equation for yk, k = 0, 1, 2, 3, … the fund balance at the end of 
the kth year. Let uk, k = 0, 1, 2, 3, … be the EOY deposit in the fund. The weights are a 
(­previous year increase) and β (increase 2 years ago).
	
b.	Draw a simulation diagram and convert the difference equation to state variable form.
	
c.	Given α = 0.5, β = 0.25, and P0 = $100, and all EOY deposits are zero, find the compo­
nents of the discrete-time state transition matrix needed to solve for yk, k = 0, 1, 2, 3, ….
	
d.	Find and plot the fund balance yk, k = 0, 1, 2, 3, ….
	
a.	The time line in Figure 4.58 shows the relationship between the discrete-time variable k 
and the EOY marker. Note that the initial fund amount is y–1.
	
	
The difference equation for yk, k = 0, 1, 2, 3, … is
	
y
y
y
y
y
y
u
k
k
k
k
k
k
k
k
−
=
−
+
+
=
−
−
−
−
−
1
1
2
2
3
α
β
(
)
(
)
,
0,1, 2, 3,… 	
(4.540)

258
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The initial conditions are y–1 = P0, y–2 = y–3 = 0.
	
	
Rewriting Equation 4.540 in the ­standard from introduced in Equation 4.456
	
y
a y
a y
a y
b u
k
k
k
k
k
k
+
+
+
=
=
−
−
−
1
1
2
2
3
3
0
0 1 2 3
,
, , , ,... 	
(4.541)
	
where a1 = −(1 + α), a2 = α − β, a3 = β, and b0 = 1.
	
b.	Referring to Figure 4.53 or 4.54 with n = 3, m = 0, and b0 = 1, the simulation diagram 
reduces to Figure 4.59.
	
	
The state equations follow from the simulation diagram.
	
x
x
x
x
x
a x
a x
a x
u
k
k
k
k
k
k
k
k
k
1
1
2
2
1
3
3
1
3 1
2
2
1 3
,
,
,
,
,
,
,
,
+
+
+
=
=
= −
−
−
+





	
(4.542)
	
y
a x
a x
a x
u
k
k
k
k
k
= −
−
−
+
3 1
2
2
1 3
,
,
,
	
(4.543)
	
A
a
a
a
=
−
−
−






=
−
−
+






0
1
0
0
0
1
0
1
0
0
0
1
1
3
2
1
β
β
α
α
=






,
B
0
0
1 	
(4.544)
	
C
a
a
a
D
= −
−
−
= −
−
+
=
[
]
[
,
3
2
1
β
β
α
α
1
]
[1] 	
(4.545)
	
c.	a1 = −(1 + α) = −(1 + 0.5) = −1.5, a2 = α − β = 0.5 − 0.25 = 0.25, a3 = β = 0.25
	
zI
A
z
a
a
a
−
=






−
−
−
−






1
0
0
0
1
0
0
0
1
0
1
0
0
0
1
3
2
1	
(4.546)
FIGURE 4.58  Relationship between discrete-time variable k and end of year.
FIGURE 4.59  Simulation diagram for monetary fund example.

259
Linear Systems Analysis
	
=
−
−
+






=
−
−
−



z
z
a
a
z
a
z
z
z
1
0
0
1
1
0
0
1
0 25
0 25
1 5
3
2
1
.
.
.



	
(4.547)
	
Φ( )
z
z zI
A
=
−
−
(
) 1
	
(4.548)
	
	
Inverting (zI − A) followed by multiplication by z results in
	
Φ( )
.
.
.
.
.
.
.
(
. )
z
z
z
z
z
z
z
z
z z
z
=
−
+
+
−
+
−
−
−
−
3
2
2
1 5
0 25
0 25
1 5
0 25
1 5
1
0 25
1 5
0 25
0 25
1
2
.
.
(
)
z
z
z
−
+





	
(4.549)
	
	
From Equation 4.532, with uk = 0, k = 0, 1, 2, … the solution for yk is
	
y
C
x
k
k
=
Φ
0 	
(4.550)
	
where the initial state
	
x
y
y
y
P
0
3
2
1
0
0
0
=






=






−
−
−
	
	
	
The transition matrix Φk is obtained by inverse z-transforming Φ(z) in Equation 4.549. 
The last column of Φk is all that is necessary to determine yk as a result of the zeros in the 
first and second rows of x0. The last column of Φk comprises
	
(
)
{
( )}
.
.
.
,
,
Φ
Φ
k
z
z
z
z
z
z
z
13
1
11
1
3
2
1 5
0 25
0 25
=
=
−
+
+






−
−
	
(4.551)
	
(
)
{
( )}
.
.
.
,
,
Φ
Φ
k
z
z
z
z
z
z
z
2 3
1
2 1
1
2
3
2
1 5
0 25
0 25
=
=
−
+
+








−
−
	
(4.552)
	
(
)
{
( )}
.
.
.
,
,
Φ
Φ
k
z
z
z
z
z
z
z
3 3
1
3 1
1
3
3
2
1 5
0 25
0 25
=
=
−
+
+








−
−
	
(4.553)
	
	
The roots of z3 − 1.5z2 + 0.25z + 0.25 = 0 are p1 = 1, p2 = 0.8090, p3 = −0.3090. 
(Φk)1,3, (Φk)2,3, (Φk)3,3 are linear combinations of the geometric sequences (p1)k, p2
k, (p3)k, 
that is,
	
(
)
(
)
(
)
(
)
,
Φk
k
k
k
A p
A p
A p
13
1
1
2
2
3
3
=
+
+
	
(4.554)
	
(
)
(
)
(
)
(
)
,
Φk
k
k
k
B p
B p
B p
2 3
1
1
2
2
3
3
=
+
+
	
(4.555)
	
(
)
(
)
(
)
(
)
,
Φk
k
k
k
C p
C p
C p
3 3
1
1
2
2
3
3
=
+
+
	
(4.556)

260
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The partial fraction expansion coefficients are evaluated in M-file “Ch4_Ex4_28.m.” 
The results are
	
A
A
A
B
B
B
C
C
1
2
3
1
2
3
1
2
4
4 6833
0 6833
4
3 7889
0 2111
4
=
= −
=
=
= −
= −
=
,
.
,
.
,
.
,
.
,
= −
=
3 065
0 0652
3
.
,
.
C
	
	
d.	From Equations 4.545 and 4.550, the fund balance is
	
y
a
a
a
P
k
k
k
k
= −
−
−






[
]
(
)
(
)
(
)
,
,
,
3
2
1
13
2 3
3 3
0
Φ
Φ
Φ
	
(4.557)
	
= −
−
+
+
+
+
+
[
]
(
)
(
)
(
)
(
)
(
)
(
)
β β
α
α
1
A p
A p
A p
B p
B p
B p
C
k
k
k
k
k
k
1
1
2
2
3
3
1
1
2
2
3
3
1
1
2
2
3
3
0
(
)
(
)
(
)
p
C p
C p
P
k
k
k
+
+






	
(4.558)
	
= −
+
+
+
−
+
+
{
[
(
)
(
)
(
) ]
(
)[ (
)
(
)
(
)
β
β
α
A p
A p
A p
B p
B p
B p
k
k
k
k
k
1
1
2
2
3
3
1
1
2
2
3
3
k]	
	
+
+
+
+
(
)[
(
)
(
)
(
) ]}
1
1
1
2
2
3
3
0
α C p
C p
C p
P
k
k
k
	
(4.559)
	
	
A graph of yk, k = −3, −2, −1, 0, 1, 2, … is show in Figure 4.60.
	
	
The limiting value, y∞ = $400 from the root p1 = 1. Since the magnitude of roots p2 
and p3 are less than 1, it follows from Equation 4.559 at steady state that the output y∞, 
is given by
	
y
y
A
B
C P
k
k
∞
→∞
=
= −
+
−
+
+
= −
+
−
lim
[
(
)
(
)
]
[ ( .
)( )
( .
.
β
β
α
α
1
1
1
0
1
0 25 4
0 25
0 5)( )
(
. )( )]
4
1
0 5 4 100
400
+
+
=
	
(4.560)
–3
0
50
100
150
200
250
yk, $
300
350
400
Fund value vs. time
y2
y–2
y–3
y1
y0
y–1
y∞
–2 –1 0 1 2 3 4 5 6 7 8 9 10
Year k
yk, k = –3, –2, –1, 0, 1, 2, …
11 12 13 14 15 16 17 18 19 20 21
FIGURE 4.60  Discrete-time system output in Example 4.28.

261
Linear Systems Analysis
	
	
We will have a lot more to say about the location of these roots in the next section 
on stability.
	
	
The complete transition matrix is left as an exercise problem. However, a suitable 
check on the correctness of Φk is that it satisfies Φ0 = I, where I is the n × n identity 
matrix. This follows from Equation 4.530 with k = 0 as well as Equation 4.531 with zero 
input and k = 0. A quick glance at Φ0 = I in Equation 4.549 should be enough to con­
vince you that Φ0 = I (Hint: only the diagonal terms of Φ(z) contain cubic polynomials in 
z in the numerator). Keep in mind that Φ0 = I is necessary but not sufficient for Φk to be 
correct.
4.7.5  Weighting Sequence (Impulse Response Function)
A difference equation and a z-domain transfer function are but two of several different ways of 
characterizing a discrete-time system. A third approach is based on the system’s impulse response 
function, similar to the case of continuous-time systems. Recall from our discussion of linear con­
tinuous-time systems that the response to an arbitrary input u(t), t ≥ 0 is expressible in the form of 
a convolution integral, that is,
	
y t
h
u t
t
( )
( ) (
)d
=
−
∫
τ
τ
τ
0
	
(4.561)
where h(t), t ≥ 0 is the impulse response function. It is related to the continuous-time system 
­transfer function H(s) according to h(t) = ℒ−1 {H(s)}.
We now demonstrate the existence of a sequence, hk, k = 0, 1, 2, 3, … which allows us to find the 
forced response of a linear discrete-time system to an arbitrary input uk, k = 0, 1, 2, 3, … similar to 
the convolution integral in Equation 4.561 for linear continuous-time systems. The only restriction 
is that the initial conditions prior to application of the input, namely, y–1, y–2, …, y–n, are zero for an 
nth-order linear discrete-time system.
Consider the first-order system
	
Y
a
b u
b u
k
k
k
k
+
=
+
1
1
0
1
1
y –
– 	
(4.562)
where y–1 = 0 and the input uk = 0, k < 0. Evaluating the first several values of yk,
	
k
y
b u
=
=
0
0
0 0
:
	
(4.563)
	
k
y
a y
b u
b u
=
+
=
+
1
1
1 0
0 1
1 0
:
	
(4.564)
	
y
b u
b
a b u
1
0 1
1
1 0
0
=
+
−
(
)
	
(4.565)
	
k
y
a y
b u
b u
=
+ =
=
+
2
2
1 1
0 2
1 1
:
	
(4.566)
	
y
b u
b
a b u
a b
a b u
2
0 2
1
1 0
1
1
1
1 0
0
=
+
−
−
−
(
)
(
)
	
(4.567)
	
k
y
a y
b u
b u
=
+
=
+
3
3
0
2
1 3
0 2
:
	
(4.568)
	
y
b u
b
a b u
a b
a b u
b
a b u
a
3
0 3
1
1 0
2
1
1
1 0
1
1
1 0
0
1
2
=
+
−
−
−
+
−
(
)
(
)
(
)
	
(4.569)

262
Simulation of Dynamic Systems with MATLAB® and Simulink®
By induction, a general solution for yk, k = 0, 1, 2, 3, … is
	
y
hu
k
k
i
k i
i
k
=
=
−
=∑
,
0
0,1, 2, 3,...
	
(4.570)
where
	
h
b
i
b
a b
a
i
i
i
=
=
−
−
=



−
0
1
1 0
1
1
0
1 2 3
,
(
)(
)
,
, , ,…	
(4.571)
The discrete-time variable in Equation 4.571 is written as “i” instead of “k” to avoid confusion; 
however, it is helpful to think of the sequence as hk, k = 0, 1, 2, 3, …. Equation 4.570 reveals that 
the current output yk is a linear combination of the current and past inputs, that is, writing out the 
terms in the sum
	
y
h u
h u
h u
h u
k
k
k
k
k
k
=
+
+
+
+
=
0
1
1
2
2
0
0 1 2 3
–
–
,
, , , ,

…	
(4.572)
The weights are in fact the numerical values of the sequence hk, k = 0, 1, 2, 3, … with the cur­
rent input uk weighted by h0, the previous input uk–1 weighted by h1 up to the oldest input u0 with a 
weight of hk. The sequence hk, k = 0, 1, 2, 3, … in Equations 4.570 and 4.572 is called the weighting 
sequence of the discrete-time system.
The sum in Equation 4.570 is called the convolution sum, the counterpart to the convolution inte­
gral for continuous-time systems in Equation 4.561. The weighting sequence and convolution sum 
representation are not restricted to the simple first-order discrete-time system in Equation 4.562. 
They are applicable to nth-order LTI discrete-time systems. Fortunately, a more efficient tech­
nique for determining the weighting sequence than was previously illustrated exists. The method is 
deferred until after the following example.
EXAMPLE 4.29
The low-pass filter in Equation 4.473 is a first-order discrete-time system.
	
a.	Find the weighting sequence hk, k = k = 0, 1, 2, 3, ….
	
b.	Graph the weighting sequence for α = 0.9 and β = 0.1.
	
c.	Find the unit step response by convolution, and compare the result with the response in 
Equation 4.478 with y–1 = 0.
	
a.	For the discrete-time system in Equation 4.473, a1 = −α, b0 = β, and b1 = 0. The weight­
ing sequence given in Equation 4.571 reduces to
	
h
k
k
k
k
=
=
=




−
β
αβ α
,
(
)( )
,
, , ,...
0
1 2 3
1
	
(4.573)
	
=
=
. . .
β α
( )
, , , ,
k
k
,
0 1 2 3
	
(4.574)
	
b.	The weighting sequence with α = 0.9 and β = 0.1 is graphed in Figure 4.61.
	
c.	From Equation 4.570 with uk = 1, k = 0, 1, 2, 3, …, the unit step response is
	
y
hu
h
k
i
k
i
i
k
i
i
k
i
i
k
=
=
=
−
=
=
=
∑
∑
∑
0
0
0
βα
	
(4.575)

263
Linear Systems Analysis
	
=
1
1
β
α
α
−
−






+
k 1
	
(4.576)
	
=
=
+
1
0 9
0 1 2 3
1
– ( . )
,
, , , ,
k
k
… 	
(4.577)
in agreement with the unit step response obtained from Equation 4.478 with y–1 = 0.
The memory and transient response of a stable linear discrete-time system are reflected in its 
weighting sequence. Loosely speaking, the memory in a discrete-time system depends on how 
far back past inputs affect the current output in a significant way, that is, if the current output 
is ­predominantly influenced by only the last several inputs, then the system is said to exhibit a 
­relatively short memory. Conversely, if distant inputs are influential in determining the current 
output, the system possesses a longer memory.
From the convolution sum representation for the current output yk in Equation 4.572, it is read­
ily apparent that the amount of memory in the system is directly related to how fast the weight­
ing sequence approaches zero. (Discrete-time systems with weighting sequences that do not 
approach zero as k approaches infinity are considered in the next section dealing with ­stability.) 
Transient and steady-state response will also be considered at the same time; however, it should 
be clear even now that a fast responding system, that is, one with a short transient response must 
have a weighting sequence that approaches zero quickly and is, therefore, characterized as a 
system with a short memory.
For the first-order system considered in Example 4.29, the rate of decay to zero in the weighting 
sequence depends solely on the parameter α. Figure 4.62 shows the unit step responses of three 
first-order systems with different values of α and β = 1 − α.
One is a fast responding system (α = 0.3), one with moderate speed (α = 0.7), and the last one 
is seen to have a sluggish response (α = 0.9).
The response of an LTI discrete-time system to an impulse δk is quite significant. From the 
­convolution sum in Equation 4.570, the unit impulse response is
	
(
)
,
, , , ,
y
h
h
k
k
i k i
k
i
k
impulse response =
=
=
−
−∑
δ
0 1 2 3
0
…
	
(4.578)
k
0
0
0.01
0.02
0.03
0.04
0.05
0.06
0.07
hk
0.08
0.09
0.1
Weighting sequence hk, k = 0, 1, 2, 3, … for first-order system
yk = βuk + αyk–1, k = 0, 1, 2, 3, …
(α = 0.9, β = 0.1)
hk = β(α)k, k = 0, 1, 2, 3, …
2
4
6
8
10 12 14 16 18 20 22 24 26 28 30
FIGURE 4.61  Weighting sequence hk, k = 0, 1, 2, 3, … for first-order system in Equation 4.473.

264
Simulation of Dynamic Systems with MATLAB® and Simulink®
In other words, the impulse response is identical to the weighting sequence. Furthermore, for 
a system with z-domain transfer function H(z), the z-transform of the impulse response is given by
	
Y
z
H z z
H z
H z
k
impulse response( )
( ) {
}
( )
( )
=
=
⋅=
δ
1
	
(4.579)
Invert z-transforming Equation 4.579,
	
(
)
{ ( )}
y
h
z
H z
k
k
impulse response =
=
−1
	
(4.580)
Equation 4.580 tells us the impulse response of an LTI discrete-time system is equal to the 
inverse z-transform of the z-domain transfer function of the system. Henceforth, the impulse 
response sequence will be denoted hk, k = 0, 1, 2, …. This most important property of discrete-
time systems is illustrated in Figure 4.63.
The z-domain transfer function of the first-order system in Example 4.29 is
	
H z
Y z
U z
z
z
( )
( )
( )
=
=
−
β
α 	
(4.581)
	
h
z
H z
k =
−1{ ( )} 	
(4.582)
0
0
0
0.2
0.2
0.4
0.4
0.6
0.6
yk
hk
0.8
0.8
1
2
4
6
8
10
12
14
16
18
α = 0.3 (fast)
α = 0.3 (fast)
α = 0.7 (moderate)
α = 0.7 (moderate)
α = 0.9 (slow)
α = 0.9 (slow)
20
k
0
2
4
6
8
Weighting sequence hk = βαk, k = 0, 1, 2, … (β = 1 – α)
Unit step response of yk = βuk
 + αyk–1, k = 0, 1, 2, 3, … (β = 1 – α)
10
12
14
16
18
20
k
FIGURE 4.62  Weighting sequences and unit step responses of three first-order discrete-time systems 
­governed by yk = (1 − α)uk + αyk–1, k = 0, 1, 2, ….
FIGURE 4.63  Relationship of impulse response to z-domain transfer function.

265
Linear Systems Analysis
	
=
−






−
z
z
z
1
β
α
	
(4.583)
	
=
=
βαk
k
,
, , , ,
0 1 2 3 … 	
(4.584)
The impulse response (weighting sequence) is therefore the same as in Equation 4.574.
The impulse response is fundamental to the design of digital filters implemented by linear dif­
ference equations. The two major categories of such filters are FIR and IIR, which stand for “finite 
impulse response” and “infinite impulse response,” respectively (Orfanidis 1996).
EXERCISES
	4.43	 Find the z-domain transfer function of the discrete-time system, which results from an 
approximation to a continuous-time integrator using
	
a.	 Implicit Euler integration
	
b.	 Improved Euler integration
	4.44	 Find the z-domain transfer function H(z) of the discrete-time system resulting from 
approximation of the first-order system τ y(t) + y(t) = ku(t) using the following numerical 
integrators:
	
a.	 Explicit Euler
	
b.	 Implicit Euler
	
c.	 Trapezoidal
	4.45	 Let uk, k = 0, 1, 2, 3, … be uniformly spaced samples of an input u(t) and yk, k = 0, 1, 2, 3, … 
be an approximation to y(t) = ∫0
t u t
t
( )d  based on trapezoidal integration.
	
a.	 Find a difference equation relating uk and yk.
	
b.	 Solve the difference equation recursively using an appropriate step size to approximate 
the area under
	
i.	 u(t) = te−t/2, 1 ≤ t ≤ 2
	
ii.	 u(t) = ( /
)e
,
/
1
2
0
5
2 2
π
−
≤≤
t
t
	4.46	 Prove Equation 4.534 for the scalar case, that is, show that z{xk+1} = z[X(z) − x0], where x0 
isthe value of xk at k = 0.
	4.47	 In Example 4.28, find the complete transition matrix and verify that Φ0 = I.
	4.48	 In Example 4.28,
	
a.	 Find Y(z), the z-transform of the response, by z-transforming the difference equation of 
the system with appropriate initial conditions.
	
b.	 Find y∞ by applying the final value property (see Table 4.5).
	
c.	 Find y0 by applying the initial value property (see Table 4.5).
	
d.	 Find y k = z − 1{Y(z)}.
	4.49	 In Example 4.28, assume the initial conditions y–3 = y–2 = y–1 = 0.
	
a.	 Find H(z) = Y(z)/U(z), the z-domain transfer function of the system.
	
b.	 The input is uk = A0δk + A1δk–1 + A2δk–2 and y–1 = y–2 = y–3 = 0. Find A0, A1, A2 if the 
response is identical to the case when uk = 0, k = 0, 1, 2, … and y–1 = P0, y–2 = y–3 = 0.
	4.50	 The unit step response of a discrete-time system is yk = −1 + 3k + 1, k = 0, 1, 2, 3, ….
	
a.	 Find the difference equation relating uk and yk.
	
b.	 Find the impulse response, hk, k = 0, 1, 2, 3, ….
	4.51	 The discrete-time signal uk = 1 + k, k = 0, 1, 2, 3, … is delayed one unit of discrete-time and 
then input to a discrete-time system with z-domain transfer function H(z) = Y(z)/U(z) = z2/
(z + 1)2. Find the output yk at k = 3 and k = 6.
	4.52	 A discrete-time system with input uk and output yk is governed by the difference equation 
yk = α1yk–1 + β1uk–1 + β0uk, k = 0, 1, 2, 3, …
	
a.	 Find the z-domain transfer function of the system

266
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	 Find the impulse response sequence hk, k = 0, 1, 2, 3, …
	
i.	 By inverse z-transformation of H(z)
	
ii.	 By recursive solution of the difference equation with uk = δk
	
c.	 Find the final value of the unit step response in terms of α1, β0, and β1.
	
i.	 By letting k → ∞ in the unit step response
	
ii.	 By applying the final value property
	
iii.	 By setting uk = 1, k = 0, 1, 2, 3, … and solving for y∞ = limk→∞, yk = limk→∞ yk–1 
in the difference equation
	4.53	 Use the same approach for finding z{yk–1} when y–1 ≠ 0 resulting in Equation 4.472 to find
	
a.	 z{yk–2}, y–1, y–2 ≠ 0
	
b.	 z{yk–n}, y–1, y–2, …, y–n ≠ 0
	4.54	 A discrete-time system is described by yk + a1 yk–1 + a2 yk–2 = 0, k = 0, 1, 2, 3, …
	
a.	 Find Y(z) for the case when y–1 = 0 and y–2 = 0.
	
b.	 Find Y(z) for the case when the right-hand side is b0δk + b1δk–1 and y–1 = y–2 = 0.
	
c.	 Find expressions for the weights b0 and b1 in terms of a1, a2, y–1, and y–2, so that the 
response yk, k = 0, 1, 2, 3, … is the same in parts (a) and (b). Comment on the implication 
of replacing initial conditions with impulse forcing functions.
	4.55	 A simulation diagram for an M-B-K mechanical system governed by the second-order 
­differential equation M y(t) + B y(t) + Ky(t) = f(t) is shown in Figure E4.55:
	
a.	 Find a difference equation relating yk and fk based on the use of explicit Euler integration. 
Convert the difference equation to state variable form.
	
b.	 Find a difference equation relating yk and fk based on the use of implicit Euler integration. 
Convert the difference equation to state variable form.
	
c.	 Find a difference equation relating yk and fk based on the use of trapezoidal Euler integra­
tion. Convert the difference equation to state variable form.
	
d.	 Find a difference equation relating yk and fk based on the use of explicit Euler integra­
tion for the first integrator ( y) and implicit Euler integration for the second integrator (y). 
Convert the difference equation to state variable form.
	
e.	 Approximate the unit step response of the system for parts (a) through (d) when M = 1, 
B = 2, and K = 1, and compare each with the continuous-time response.
	4.56	 Consider the double integrator shown in Figure E4.56:
FIGURE E4.55
FIGURE E4.56

267
Linear Systems Analysis
	
a.	 Write the differential equation relating y(t) and u(t).
	
b.	 Find the difference equation relating yk and uk if both numerical integrators are based on 
explicit Euler integration.
	
c.	 Find dy/dt and y(t) when the initial conditions are y(0) = 0, y(0) = 1 and the input 
u(t) = 10 − e−t/2, t ≥ 0.
	
d.	 Find the z-domain transfer function and impulse response of the discrete-time system.
	
e.	 Find the output yk, k = 1, 2, 3, … when the integration step size T = 0.1 s.
	
f.	 Plot the continuous- and discrete-time outputs on the same graph, and comment on the results.
	4.57	 A discrete-time system is described by yk + a1 yk–1 + a2 yk–2 = 0, k = 0, 1, 2, 3, ….
	
a.	 Find Y(z) for the case when y–1 ≠ 0, y–2 ≠ 0.
	
b.	 Find Y(z) for the case when the right-hand side is b0δk + b1δk–i and y–1 = y–2 = 0.
	
c.	 Find expressions for the weights bo and b1 in terms of a1, a2, y–1, y–2 so that the response yk, 
k = 0, 1, 2, 3, … is the same in parts (a) and (b). Comment on the implication of replacing 
initial conditions with impulse forcing functions.
	4.58	 Show that the unit step response of a discrete-time system with z-domain transfer function H 
(z) is given by
	
y
z
z
z
H z
k
k =
−






=
−1
1
( ) ,
0,1, 2,...
	
4.8  STABILITY OF LTI DISCRETE-TIME SYSTEMS
One way of characterizing the stability of a discrete-time system is by the way it responds to a 
bounded input. When the response remains bounded, the system is said to exhibit BIBO stability. 
The implications of BIBO stability on the system’s z-domain transfer function, impulse response 
(weighting sequence), and natural response will be explored.
Consider an nth-order LTI discrete-time system described by Equation 4.456 in the previous sec­
tion. The z-domain transfer function is
	
H z
Y z
U z
b z
b z
b z
z
a z
a
z
a
n
n
m
n
m
n
n
n
n
( )
( )
( )
=
=
+
+ ⋅⋅⋅+
+
+ ⋅⋅⋅+
+
−
−
−
−
0
1
1
1
1
1
,
n
m
≥
	
(4.585)
Suppose the poles of H(z) are real and distinct. Then
	
Y z
H z U z
b z
b z
b z
z
p
z
p
z
p
U
n
n
m
n
m
n
( )
( ) ( )
(
)(
)
(
)
=
=
+
+ ⋅⋅⋅+
−
−
⋅⋅⋅
−
−
−
0
1
1
1
2
( )z
	
(4.586)
In the case where the poles of U(z) are different from p1, p2, … pn,
	
Y z
A
A
z
z
p
A
z
z
p
A
z
z
p
n
n
( ) =
−
+
−
+⋅⋅⋅+
−






+
0
1
1
2
2
terms due poles of U z z
U z
( )
{ ( )}
−1
	
(4.587)
The response yk k = 0, 1, 2, 3, … is therefore
	
y
A
A
A
A
z
U z
p
p
p
k
k
n
k
k
n
k
=
+
+
+
+
+
−
0
1
2
1
1
2
δ
{
}
{ ( )

terms generated from
}}	
(4.588)
The bracketed expression is the natural response, that is, a linear combination of the natural 
modes p
p
p
k
k
n
k
1
2
,
,
,
,
…
 while the terms arising from the inverse z-transformation of U(z) are similar 
in nature to the input and comprise the forced component of the overall response. Since the natural 

268
Simulation of Dynamic Systems with MATLAB® and Simulink®
response is excited by the presence of an input, it must obviously be a bounded sequence for a BIBO 
stable system.
The impulse response hk = z−1{H(z)} is also a linear combination of the system’s natural modes 
p
p
p
k
k
n
k
1
2
,
,
,
,
…
 (plus in some cases, a weighted impulse at the origin). Imagine a discrete-time system 
with impulse response hk, k = 0, 1, 2, … subject to a unit step input uk = 1, k = 0, 1, 2, …. Using the 
convolution sum form of the output,
	
y
hu
h
h
k
k
i
k i
i
k
i
i
k
i
i
k
=
=
<
=
−
=
=
=
∑
∑
∑
0
0
0
0 1 2
,
, , ,…
	
(4.589)
From Equation 4.589, the step response at discrete-time k remains finite provided the sum of the 
first k + 1 values of the magnitude of the impulse response satisfies
	
h
k
i
i
k
<∞
=
=∑
,
, , , ,
0 1 2 3
0
…
	
(4.590)
It follows that the entire response yk, k = 0, 1, 2, 3, … is bounded whenever the impulse response 
sequence satisfies
	
hk
k
< ∞
=
∞
∑
0
	
(4.591)
While Equation 4.591 was derived for the case where the input is a unit step, it applies to any 
bounded input. Equation 4.591 is a necessary and sufficient condition for the output of an LTI dis­
crete-time system to remain bounded in response to any bounded input. A consequence of Equation 
4.591 is that the weighting sequence of a BIBO stable system must decay to zero as k → ∞.
From Equation 4.588, an nth-order LTI discrete-time system with z-domain transfer function 
having real and distinct poles is BIBO stable when the poles satisfy
	
–
,
, , ,
,
1
1
1 2 3
<
<
=
p
i
n
i
…
	
(4.592)
The expression for the output yk in Equation 4.588 assumed that the poles of H(z) were real and 
distinct. A real pole p with multiplicity m generates a weighted sum of the natural modes pk, kpk, …, 
km−1 pk in the output; however, Equation 4.592 still applies for BIBO stability.
When a pair of complex poles of H(z) is present, yk contains trigonometric terms like Rk (kθ + φ) 
where R is the magnitude of the complex poles. In order to include the possibility of complex poles 
of H(z), Equation 4.592 is appropriately expressed as
	
|
| <
=
p
i
n
i
1
1 2
,
, ,
,
…
	
(4.593)
Consequently, a sufficient condition for BIBO stability of LTI discrete-time systems is that all of 
its z-domain transfer function poles have a magnitude less than 1, that is, all poles are located inside 
the Unit Circle in the complex plane.
In Example 4.30, we look at a second-order system with real and distinct poles subject to a 
bounded input. The effect of moving one of the poles is investigated. Following that, we consider 
the ramifications of various locations of the z-domain transfer function’s poles in the complex plane.

269
Linear Systems Analysis
EXAMPLE 4.30
A discrete-time system is described by the difference equation
	
y
a y
a y
b u
k
k
k
k
k
+
+
=
=
1
–
–
,
, , , ,
1
2
2
0
0 1 2 3 …	
(4.594)
Initial conditions y–1 = y–2 = 0. The input sequence is given by
	
u
k
k
k
= +
=
1
0 1
0 1 2 3
( . ) ,
, , , ,…	
(4.595)
Find the z-domain transfer function H(z) and its poles, the impulse response hk, k = 0, 1, 2, 
3, …, the total response yk, k = 0, 1, 2, 3, …, and the natural and forced components of the total 
response, and comment on stability for the following cases:
	
(a)
,
.
,
(b)
. ,
. ,
(c)
. ,
a
a
b
a
a
b
a
a
1
2
0
1
2
0
1
2
0
0 25
1
0 5
0 5
1
1 5
=
= −
=
= −
= −
=
= −
= −−
=
1
1
0
,
b
	
	
a.	z-transforming the difference equation yk − 0.25yk–2 = uk, k = 0, 1, 2, 3, … yields
	
H z
Y z
U z
z
z
z
z
z
( )
( )
( )
.
(
. )(
)
=
=
−
=
−
+
2
2
2
0 25
0 5
0.5 	
(4.596)
	
with poles p1 = −0.5, p2 = 0.5. The impulse response is obtained from
	
h
z
H z
z
z
z
z
k =
=
+
−








−
−
1
1
2
0 5
{ ( )}
(
. )(
)
0.5
	
(4.597)
	
=
+
+
−






−
z
z
z
z
z
1
0 5
0 5
.
.
0.5
0.5 	
(4.598)
	
=
−
+
=
0 5
0 5
0 5
0 1 2 3
. [(
. )
( . ) ],
, , , ,...
k
k
k
	
(4.599)
	
=
−
+
=
+
( . )
[(
)
)],
, , , ,...
0 5
1
1
0 1 2 3
1
k
k
k
	
(4.600)
	
=
=
( . ) ,
, , , ,
0 5
0 2 4 6
k
k
…	
(4.601)
	
	
The complete response yk, k = 0, 1, 2, … is determined by inverse z-transformation of
	
Y z
z
z
z
z
z
z
( )
(
.
)
.
=
+
−+
−






2
2
0 25
0 1
1
	
(4.602)
	
=
−
+
−
−
−
z
z
z
z
z
z
3 2
1 1
0 5
0 1
(
. )
(
. )(
.
0.5)(
1)(
) 	
(4.603)
	
=
+





+
−





+
−






7
12
0 5
1
8
0 5
4
3
1
z
z
z
z
z
z
.
.
−
−






1
24
0 1
z
z
.
	
(4.604)

270
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
=
−
+
−
+
−
=
y
k
k
k
k
k
7
12
0 5
1
8
0 5
4
3
1
24 0 1
0 1 2 3
(
. )
(
. )
( . ) ,
, , , ,...
	
(4.605)
	
	
From Equation 4.605, the natural (free) response and forced response are
	
(
)
(
. )
( . ) ,
, , ,...
y
k
k
k
k
natural =
−
+
=
7
12
0 5
1
8 0 5
0 1 2
	
(4.606)
	
(
)
( . ) ,
, , ,...
y
k
k
k
forced =
=
4
3
1
24 0 1
0 1 2
−
	
(4.607)
	
	
The system is stable as evidenced by the natural response decaying to zero as 
k → ∞. This was expected since the two poles of H(z) are located between −1 
and +1. Can you show that Equation 4.591 is satisfied as well? Note the similar­
ity between the natural response in Equation 4.606 and the impulse response in 
Equation 4.599.
	
b.	The difference equation becomes yk − 0.5yk–1 − 0.5yk–2 = uk, k = 0, 1, 2, 3, …. The 
results for this system are obtained in an analogous fashion to part (a).
	
H z
z
z
z
z
z
z
p
p
( )
.
(
. )(
)
. ,
=
−
−
=
+
−
= −
=
2
2
2
1
2
0 5
0 5
1
0 5
0.5
(
1)
	
(4.608)
	
h
k
k
k
=
−
+
=
1
3
0 5
2
0 1 2 3
[(
. )
],
, , , ,...
	
(4.609)
	
y
k
k
k
k
k
=
−
+
+
−
=
7
18
0 5
44
27
2
3
1
54 0 1
0 1 2 3
(
. )
( . ) ,
, , , ,...
	
(4.610)
	
(
)
(
. )
,
, , , ,...
y
k
k
k
nat =
−
+
=
7
18
0 5
44
27
0 1 2 3
	
(4.611)
	
(
)
( . ) ,
, , , ,...
y
k
k
k
k
forced =
−
=
2
3
1
54 0 1
0 1 2 3
	
(4.612)
	
	
The forced response also contains a constant component resulting from the pole of 
U(z) at z = 1. This constant is combined with the constant in the natural response, and 
the sum of 44/27 is shown entirely in the natural response in Equation 4.611.
	
	
The second pole of H(z), namely, p2 = 1, does not satisfy Equation 4.592, and 
the system is not BIBO stable. In this case, a bounded input produced an unbounded 
output. The impulse response in Equation 4.609 does not asymptotically decay 
to zero.
	
c.	The difference equation is yk − 1.5yk–1 − yk–2 = uk, k = 0, 1, 2, 3, ….
	
H z
z
z
z
z
z
z
p
p
( )
.
(
. )(
) ,
. ,
=
−
−=
+
−
= −
=
2
2
2
1
2
1 5
1
0 5
2
0 5
(
2)
	
(4.613)
	
h
k
k
k
k
=
−
+
=
1
5
0 5
4
5 2
0 1 2 3
(
. )
( ) ,
, , , ,…
	
(4.614)

271
Linear Systems Analysis
	
y
k
k
k
k
k
=
−
+
−
−
=
7
30
0 5
232
95 2
2
3
1
114 0 1
0 1 2 3
(
. )
( )
( . ) ,
, , , ,...
	
(4.615)
	
(
)
(
. )
( ) ,
, , , ,...
y
k
k
k
k
natural =
−
+
=
7
30
0 5
232
95 2
0 1 2 3
	
(4.616)
	
(
)
( . ) ,
, , , ,...
y
k
k
k
forced = −
−
=
2
3
1
114 0 1
0 1 2 3
	
(4.617)
	
	
Once again, the system is unstable. The natural response and, by implication, the 
impulse response are unbounded as k → ∞.
	
	
The real poles of an nth-order LTI discrete-time system transfer function are located 
on the real axis in the complex plane. Figure 4.64 shows real poles located at (from right 
to left) 1.25, 1, 0.75, −0.5, −1, and −1.5 along the real axis.
	
	
There are six distinct regions for location of real poles along the real axis, each with a dif­
ferent type of natural mode. According to Equation 4.592, only the poles at 0.75 and −0.5 
located inside the Unit Circle correspond to stable natural modes. The impulse response hk, 
k = 0, 1, 2, … approaches zero as k → ∞ in both cases. When the poles are located on the 
Unit Circle at +1 and 1, the impulse response sequence remains finite as k → ∞; however, 
a linear discrete-time system with a pole at either location is not BIBO stable.
	
	
The remaining two cases correspond to real poles located outside the Unit Circle, either 
in the region p > 1 or p < −1. The natural response of an LTI discrete-time system with 
poles located in either region is unbounded, and, hence, the system is not BIBO stable.
	
	
Figure 4.65 illustrates the natural modes corresponding to each of the real poles.
4.8.1  Complex Poles of H(z)
Three pairs of complex poles are also shown in Figure 4.64. The z-domain transfer function H(z) 
possesses a pair of complex poles if there is a quadratic factor in its denominator with complex 
roots. Figure 4.66 illustrates the case where H(z) has complex poles at z = a ± jb. The transforma­
tion to polar form z = re±jθ is shown as well.
In terms of polar coordinates, the quadratic factor is
	
Q z
z
r
z
r
z
r
z
r
j
j
( )
(
)(
)
(
)
=
−
−
=
−
+
−
e
e
cos
θ
θ
θ
2
2
2
	
(4.618)
Consider a second-order discrete-time system with z-domain transfer function
	
H z
Az
Bz
z
r
z
r
( )
(
)
=
+
−
+
2
2
2
2 cos θ
	
(4.619)
FIGURE 4.64  The Unit Circle and various locations of real and complex poles.

272
Simulation of Dynamic Systems with MATLAB® and Simulink®
For reasons that will soon become apparent, H(z) is expressed as
	
H z
c r
z
c z
r
z
z
r
z
r
( )
( sin )
[
(
) ]
(
)
=
+
−
−
+
1
2
2
2
2
2
θ
θ
θ
cos
cos
	
(4.620)
where c1 and c2 are obtained by equating like powers of z in the numerators of Equations 4.619 and 
4.620. The result is
	
c
Ar
B
r
c
A
1
2
=
+
=
cos θ
θ
sin
,
	
(4.621)
H(z) in Equation 4.620 is expressed as
	
H z
c
r
z
z
r
z
r
c
z
r
z
z
r
( )
( sin )
(
)
( sin )
(
=
−
+





+
−
−
1
2
2
2
2
2
2
2
θ
θ
θ
cos
cos θ)z
r
+






2
	
(4.622)
–0.5
–0.5
–1
–0.25
–25
0
25
50
75
–50
0
0
0.25
0.5
0.5
0.75
1
0
0
0
0
0.5
0.25
0.5
0.75
1
1
1.5
1k
(0.75)k
(1.25)k
(–1)k
(–0.5)k
(–1.5)k
2
Pole of H(z), p > 1
Pole of H(z), p = 1
Pole of H(z), 0 < p < 1
Pole of H(z), –1 < p < 0
Pole of H(z), p = –1
Pole of H(z), p < –1
2
2
4
4
6
6
8
10
10
0
2
4
6
8
8
10
0
5
10 15 20 25
1
k
0
2
4
6
8
10
k
0
2
4
6
8
10
k
0
2
4
6
8
10
FIGURE 4.65  Natural modes corresponding to real poles of H(z).
FIGURE 4.66  Complex poles of discrete-time system transfer function H(z).

273
Linear Systems Analysis
Referring to Table 4.4 with e−aT = r and ωT = θ suggests the impulse response hk = z−1 {H(z)} is
	
h
c r
k
c r
k
r
c
k
c
k
k
k
k
k
k
=
+
=
+
=
1
2
1
2
0 1 2 3
sin
cos
sin
cos
θ
θ
θ
θ
(
),
, , , ,…	
(4.623)
There are three cases to consider, which are illustrated in Figure 4.64. The three cases cor­
respond to the region inside the Unit Circle (r < 1), all points on the Unit Circle (r = 1), and the 
exterior of the Unit Circle (r > 1). It follows from Equation 4.623 that the impulse response satisfies 
the necessary condition for BIBO stability in Equation 4.591 only in the first case, r < 1, that is, 
when the poles are located inside the Unit Circle. The natural response, being of similar form to the 
impulse response, decays to zero as k → ∞. Hence, the system is BIBO stable.
When the poles are either on the Unit Circle or outside, Equation 4.591 is not satisfied, and the 
system is therefore not BIBO stable. The natural response consists of sustained oscillations when 
r = 1 and oscillations of increasing magnitude when r > 1.
EXAMPLE 4.31
A second-order discrete-time system has a z-domain transfer function given by
	
H z
z
z
Q z
( )
( )
=
+
2
3
	
(4.624)
where Q(z) is a quadratic with complex roots located in the three different regions like the ones 
shown in Figure 4.64. Suppose the roots are
	
( )
( )
(
)
( )
.
.
.
a
b
c
−
±
±
±
0 25
0 5
0 51
1
3
j
j
j 	
	
a.	Find the z-domain transfer function H(z) for each case.
	
b.	Find the impulse response hk, k = 0, 1, 2, 3, … for each case.
	
c.	Graph the impulse response for each case.
	
a.	
	
i.	 (a = −0.25, b = 0.5). The polar coordinates of the transfer function poles are
	
r = −
+
=
−





=
−
[(
.
)
( . ) ]
.
,
.
.
/
0 25
0 5
0 5990
0 5
0 25
2
2
2 1 2
1
θ = tan
.0344 rad
	
	
Q
cos
( )
(
)
z
z
r
z
r
=
−
+
2
2
2
θ
	
	
=
−
+
z
z
2
2
2 0 5990
20344
0 5990
[ (
)
(
)]
(
)
:
cos
:
:
	
	
=
+
+
z
z
2
0 5
0 3125
:
:
	
	
⇒
=
+
+
+
+
H z
z
z
Q z
z
z
z
z
( )
( )
.
.
3
3
2
3
3
0 5
0 3125
=
	
(4.625)
	
ii.	
(
. ,
.
)
,
( )
a
b
r
H z
z
z
z
z
=
=
⇒
=
=
=
+
−
+
0 5
0 5 3
1
3
1
3
2
θ
1.0472rad
	
(4.626)
	
iii.	
(
,
)
,
( )
a
b
r
H z
z
z
z
z
=
=
⇒
=
=
=
+
−
+
1
1
2
4
3
2
2
3
2
θ
π rad,
	
(4.627)

274
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	 c
Ar
B
r
1
10 5990
2 0344
3
0 5990
2 0344
5
=
+
=
+
=
cos
sin
( .
)cos( .
)
.
sin( .
)
θ
θ
. ,5
1
2
c
A
=
=
	
	
The constants c1 and c2 for (ii) and (iii) are determined in similar fashion. 
From Equation 4.623, the impulse responses are
	
i.	 h
k
k
k
k
k
=
+
=
(
) [
(
)
(
)]
.
.
.
.
,
, , , ,
0 5990
5 5
2 0344
2 0344
0 1 2 3
sin
cos
… 	
(4.628)
	
ii.	 h
k
k
k
k =
+
=
4 0415
1 0472
1 0472
0 1 2 3
.
( .
)
.
,
, , , ,
sin
cos(
)
…	
(4.629)
	
iii.	 h
k
k
k
k
k
=





+












=
(
)
sin
cos
,
, ,
2
4
4
4
0 1
π
π
2 3
, ,… 	
(4.630)
	
c.	Graphs of the impulse responses in Equations 4.628 through 4.630 are shown in Figure 4.67.
	
	
The discrete-time system with poles located inside the Unit Circle is BIBO stable. 
The impulse response given in Equation 4.628 satisfies the necessary and sufficient con­
dition for BIBO stability in Equation 4.591. Poles of the transfer functions in Equations 
4.626 and 4.627 are situated on the Unit Circle and outside it, respectively. Neither 
system is BIBO stable.
	
	
Consider a system with a pair of complex poles of H(z) on the Unit Circle at e±jθ. 
Its response to the bounded input uk = sin kθ, k = 0, 1, 2, 3, … is obtained from
	
Y z
H z U z
N z
z
z
z
z
z
j
j
( )
( ) ( )
( )
(
)(
)
(
)
=
=
−
−
⋅
⋅
−
+
−
e
e
sin
cos
θ
θ
θ
θ
2
2
1	
(4.631)
	
=
−
−
⋅
⋅
−
−
−
−
N z
z
z
z
z
z
j
j
j
j
( )
(
)(
)
sin
(
)(
)
e
e
e
e
θ
θ
θ
θ
θ
	
(4.632)
	
=
⋅
−
−
−
sin
( )
(
)(
)
θ
θ
θ
zN z
z
z
j
j
e
e
2
	
(4.633)
It is left as an exercise to show that yk contains a linear combination of the terms, cos kθ, sin kθ, k 
cos kθ, and k sin kθ. Consequently, the response is unbounded, and the system is not BIBO stable.
hk
hk
hk
0
0
–50
50
100
150
–2
0
2
–5
0
5
1
2
3
4
5
7
9
6
8
10
0
1
2
3
4
5
7
9
6
8
10
0
1
2
3
4
Impulse response sequences for systems with complex poles of H(z)
5
7
9
6
8
10
k
Poles of H(z) at z = 1 ± j
Poles of H(z) at z = 0.5 ± j0.5
Poles of H(z) at z = –0.5 ± j0.5
FIGURE 4.67  Impulse responses for discrete-time systems with different complex poles of H(z).

275
Linear Systems Analysis
When a real pole of H(z) is located on the Unit Circle at z = −1 or z = +1, and the input 
is uk = (−1)k, k = 0, 1, 2, 3, or the unit step uk = 1, k = 0, 1, 2, 3, …, respectively, the response 
is unbounded due to the presence of (z + 1)2 or (z − 1)2 in the denominator of the output Y(z). 
The first case results in the term k(−1)k (multiplied by a constant) appearing in the output. In the 
second case, yk contains a term proportional to k(1)k = k (see Example 4.30, part [b]).
We conclude this section with a simulation of the continuous-time control system in Figure 4.68.
The analog P–I (Proportional–Integral) controller GC(s) is approximated by a discrete-time con­
troller with transfer function GC(z) based on the use of trapezoidal integration. It was shown in 
Example 4.27 in Section 4.7.2 that the z-domain transfer function of a trapezoidal integrator is
	
H z
T z
z
I( ) =
+
−






2
1
1 	
(4.634)
And, therefore, GC(z) is obtained by replacing s with 1/HI(z), that is,
	
G z
K
K
s
K
K T z
K
K T
z
C
P
I
s
T
z
z
P
I
P
I
( )
(
)
(
)
( / )((
)/(
))
=
+
=
+
−
+
−
←
−
+
2
1
1
2
2
2
1
	
(4.635)
Several discrete-time approximations to the second-order system in Figure 4.68 were devel­
oped in Section 4.7.2. Explicit Euler approximation resulted in
	
G z
Y z
U z
K
T
z
T z
T
T
n
n
n
n
( )
( )
( )
(
)
(
)
(
)
=
=
−
−
+ −
+
ω
ζω
ζω
ω
2
2
2
21
1
2
	
(4.636)
The block diagram of the discrete-time system intended to simulate the continuous-time 
­control system is shown in Figure 4.69.
The closed-loop transfer function is
	
H z Y z
R z
G z G z
G z G z
C
C
( )
( )
( )
( )
( )
=
( )
1 + 
( )
	
(4.637)
and the poles of H(z) are the roots of the characteristic equation
	
∆( )
( ) ( )
z
G z G z
C
= +
=
1
0 	
(4.638)
Substituting Equations 4.635 and 4.636 into Equation 4.638 yields
	
∆( )
z
z
z
z
=
+
+
+
=
3
1
2
2
3
0
α
α
α
	
(4.639)
FIGURE 4.68  P–I control of a second-order continuous-time process.
FIGURE 4.69  Block diagram of discrete-time system.

276
Simulation of Dynamic Systems with MATLAB® and Simulink®
where
	
α
ζω
α
ζω
ω
α
ζω
ω
1
2
2
1
3
3
2
3
4
1
0 5
1
2
= −+
=
−
+
+
+
= −+
+
n
n
n
p
n
T
T
T
K K
K T
T
(
) [
(
.
)]
(
n
p
T
K
K
K T
) [
(
.
)]
2
1
1
0 5
−+
−
+




	
(4.640)
Table 4.9 summarizes the results for different combinations of continuous-time second-order 
systems, controllers, and integration step size.
The continuous-time system and discrete-time poles are shown in Figure 4.70. All three con­
tinuous-time control systems are stable since the poles are located in the left-half plane. The dis­
crete-time systems for simulating them, however, are not all BIBO stable. In fact, the discrete-time 
TABLE 4.9
Continuous- and Discrete-Time Control System Poles
System Parameters and 
Integration Step Size
Poles of H(s)
Poles of H(z)
Mag of H(z) 
Complex Poles
K = 1, ωn = 10, ζ = 1.0
KP = 0.5, KI = 2
−9.1616 ± j5.9448
0.5398 ± j0.3201
0.628
T = 0.05
−1.6768
0.9205
K = 1, ωn = 5, ζ = 0.5124
Kp = 1, KI = 3
−1.7133 ± j6.4225
0.8674 ± j0.4979
1.000
T = 0.075
−1.6975
0.8808
K = 1, ωn = 20, ζ = 0.15
KP = 1, KI = 3
−2.2436 ± j28.0745
0.9436 ± j0.7085
1.180
T = 0.025
−1.5128
0.9629
Real axis
Image axis
Image axis
–1
0
–1
0
1
–10
–5
0
5
–20
0
20
–5
0
5
–10
–5
0
5
–10
–5
0
5
–1
0
1
H(z) poles, row 1
H(z) poles, row 2
H(z) poles, row 3
H(s) poles, row 1
H(s) poles, row 2
H(s) poles, row 3
–1
0
1
–1
0
1
1
–1
0
1
Real axis
Real axis
Real axis
Real axis
Real axis
–5
0
5
FIGURE 4.70  Continuous- and discrete-time system poles for rows 1, 2, 3 in Table 4.9.

277
Linear Systems Analysis
systems in Rows 2 and 3 in Table 4.9 possess a pair of complex poles located on the Unit Circle 
and outside it, respectively.
It is important to keep in mind that while the discrete-time system approximation in Row 1 of 
Table 4.9 is stable, its accuracy in approximating the continuous-time system response to various 
inputs is another matter. Suppose the input to the control system in Figure 4.68 is r(t), t ≥ 0 and the 
output is y(t), t ≥ 0. If the discrete-time system response to rk = r(kT), k = 0, 1, 2, … is yk, k = 0, 1, 
2, …, an accurate simulation requires that yk ≈ y(kT), k = 0, 1, 2, ….
The locations of the continuous- and discrete-time poles corresponding to Row 1 in 
Figure  4.70  imply that the natural responses consist of a monotonically decaying and 
damped  oscillatory modes. The question still remains whether the time constants and 
damped  natural frequencies are comparable. A thorough examination of this point is 
deferred to a later chapter; however, we can gain insight by looking at the step responses of 
each system.
EXAMPLE 4.32
Find and graph the unit step response of the continuous-time system in Figure 4.68 (K = 1, ωn = 10, 
ζ = 1.0, KP = 0.5, KI = 2) and the discrete-time system shown in Figure 4.69 with integration step 
size T = 0.01, 0.05, 0.1 s.
The step responses are computed in M-file “Ch4_Ex4_32.m” and shown in Figure 4.71. 
The top graph is a plot of every fourth point of the discrete-time system step response.
The discrete-time system is stable for all three values of integration step size T and the steady-
state values are identical to the continuous-time steady-state value. However, the transient 
response of the discrete-time system when T = 0.1 s varies considerably from the continuous-
time system transient response.
EXERCISES
	4.59	 Find the poles of the z-domain transfer functions H(z) below, and comment on the stability of 
the corresponding discrete-time systems.
0
0
0.5
1
0
0.5
1
0
0.5
1
0.25
0.5
0.75
T = 0.1 s
T = 0.05 s
T = 0.01 s
y(t), t ≥ 0
y(t), t ≥ 0
yk, k = 0, 5, 10, …
yk, k = 0, 1, 2, …
y(t), t ≥ 0
yk, k = 0, 1, 2, …
1
1.25
1.5
1.75
2
2.25
2.5
0
0.25
0.5
0.75
1
1.25
1.5
1.75
2
2.25
2.5
0
0.25
0.5
0.75
1
1.25
Continuous and discrete step response
1.5
1.75
2
2.25
2.5
t (s)
FIGURE 4.71  Unit step response of continuous-time system (Figure 4.68) and discrete-time system 
(Figure 4.69) with T = 0.01, 0.05, 0.1 s.

278
Simulation of Dynamic Systems with MATLAB® and Simulink®
(a)
z
z
z
z
z
2
3
2
2
32
16
22
1
+
−
−
+
(b)
(
)
(
)
(
)
4
3 2
3 4
1 8
2
3
2
z
z
z
z
−
+
−
/
/
/
(c)
3
1
4
3
1
3
z
z
z
+
−
+
(d)
z
z
z
z
z
z
4
4
2
2
16
28
22
8
1
−
−
+
−
+
(e)
1
4
3
1
4
2
z
z
+
−
(f)
z
z
z
z
z
z
3
2
3
2
2
2
5
6
2
+
+
−
+
−
	4.60	 Prove Σk
kh
=
∞|
|<∞
0
 is a sufficient condition for BIBO stability of an LTI discrete-time 
system.
	4.61	 A discrete-time system is described by the difference equation
	
4
3
0 1 2 3
0
2
3
1
2
3
y
y
y
u
k
y
y
y
k
k
k
k
–
,
, , , ,
(
)
–
–
–
–
–
+
=
=
=
=
=
… 
	
	
a.	 Find the weighting sequence hk, k = 0, 1, 2, 3, … of the system.
	
b.	 Check whether the condition Σk
kh
=
∞|
<∞
0
|
 is satisfied. Is the system stable?
	
c.	 Find and graph the system response to the input uk = 1 + 2(−1)k, k = 0, 1, 2, 3, ….
	4.62	 Show the work required to establish Equations 4.608 through 4.610 in part (b) and Equations 
4.613 through 4.615 in part (c) of Example 4.30.
	4.63	 Find the inverse z-transform of Y z
zN z
z
z
j
j
( )
(sin
( ))
((
e ) (
) )
=
⋅
−
−
θ
θ
θ
2
2
e
in Equation 4.633.
	4.64	 For a discrete-time system with z-domain transfer function given by
	
H z
Y z
U z
z
z
z
z
z
( )
( )
( )
.
.
=
=
+ +
−
−+
2
3
2
1
0 5
0 5 	
	
a.	 Find the zeros and poles of H(z).
	
b.	 Find the impulse response sequence hk, k = 0, 1, 2, 3, ….
	
c.	 Find the unit step response.
	
d.	 Find the forced response to uk = (−1)k, k = 0, 1, 2, 3, ….
	4.65	 For the control system in Figure 4.68,
	
a.	 Find the transfer function HE(s) = E(s)/R(s).
	
b.	 Use explicit Euler integration with integration step T to obtain HE(z), an approximation to 
the continuous-time transfer function HE(s).
	
c.	 Assume K = 1, ωn = 10, ζ = 1.0, KP = 0.5, KI = 2, and T = 0.05, and find the poles of 
HE (z). Compare your answer with the results shown in Table 4.9 for the same parameter 
values.
	
d.	 Find the difference equation relating ek and rk, k = 0, 1, 2, 3, ….
	
e.	 Solve the difference equation when rk = 1, k = 0, 1, 2, 3, ….
	4.66	 For the control system in Figure 4.69 with baseline parameters specified in the last row of 
Table 4.9, find the poles of H(z) and plot the magnitude of the most distant pole(s) from the 
origin when
	
a.	 ζ varies from 0 to 2
	
b.	 T varies from 0.01 to 0.5 s
	
c.	 Kp varies from 0.5 to 5
	
d.	 ωn varies from 5 to 50 rad/s
	4.67	 End-of-month deposits dk, k = 0, 1, 2, 3, … are placed in an investment account paying inter­
est at a rate of i per month. The initial account balance is P0. The difference equation for Pk, 
the account balance after k months, is
	
P
i P
d
k
k
k
k
+
+
=
+
+
=
1
1
1
0 1 2 3
(
)
,
, , , ,…	

279
Linear Systems Analysis
	
a.	 Find the z-domain transfer function H(z) = P(z)/D(z) and its pole.
	
Hint: Use the left shifting property, z{Pk+1} = zP(z) − zP0. Comment on the stability of 
the discrete-time system.
	
b.	 Sketch Pk, k = 0, 1, 2, 3, … when no deposits are made and i > 0. Repeat for i < 0.
	
c.	 Find the general solution for Pk, k = 1, 2, 3, … when
	
(i)
,
,
, , ,
d
k
D
k
k =
=
=



0
0
1 2 3 … 	
	
(ii)
,
, , ,
,
, , ,
d
k
D
k
k =
=
=



0
0 2 4
1 3 5
…
… 	
	
(iii)
,
,
, , ,
,
, , ,
d
k
D
k
D
k
k =
=
=
−
=





0
0
2
1 3 5
2 4 6
…
…	
	4.68	 Figure E4.68 shows the relationship between acceleration, velocity, and position of a particle 
moving along a straight line.
	
a.	 Write the differential equations relating v(t) and a(t), x(t) and v(t), and x(t) and a(t).
	
b.	 Use trapezoidal integration to approximate the three differential equations. That is, find 
the difference equations relating vk and ak, xk and vk, and xk and ak.
	
c.	 Find the poles of the three transfer functions V(z)/A(z), X(z)/V(z), and X(z)/A(z). Comment 
on the stability of each.
	
d.	 Suppose the acceleration is given by
	
a t
t
t
t
t
t
t
( )
,
,
,
,
=
≤<
≤<
−
≤<
<





0
1
1
1
2
3
2
3
0
3
	
	
Find analytical expressions for v(t) and x(t).
	
e.	 Solve the difference equations recursively for a suitable value of T. Plot v(t), t ≥ 0 along with vk, 
k = 0, 1, 2, 3, … on the same graph, and do the same for x(t), t ≥ 0 and xk, k = 0, 1, 2, 3, ….
	4.69	 The motion of a mass suspended from a spring without friction is governed by md2x/
dt2 + kx = f, where f = f(t) is the applied force acting on the mass.
	
a.	 Find the transfer function H(s) = X(s)/F(s) in terms of the natural frequency ωn
k m
=
/
 
and the constant c = 1/m. Where are the poles located?
	
b.	 Use explicit Euler, implicit Euler, and trapezoidal integration to obtain discrete-time 
approximations, that is, find H(z) = X(z)/F(z). Leave your answers in terms of c, ωn, and 
the integration step size T.
FIGURE E4.68

280
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	 Find the poles for each z-domain transfer function H(z) in part (b). Comment on the stabil­
ity in each case.
	
d.	 Let m = 1 slug, k = 0.5 lb/in., x(0) = 2 in., x(0) = 0 in./s, and f(t) = 0, t ≥ 0. Find and 
graph the continuous-time response x(t).
	
e.	 Choose the integration step T, so that ωnT = 0.01. Find the poles of each transfer function 
H(z) and the discrete-time responses xk, k = 0, 1, 2, 3, … for the same conditions in part 
(d). Plot the discrete-time responses on the same graph as x(t).
4.9  FREQUENCY RESPONSE OF DISCRETE-TIME SYSTEMS
By now, it should be apparent that the methods for describing and analyzing the behavior of LTI 
continuous-time and discrete-time systems are similar. Indeed, both types of systems possess a 
natural response, independent of the system’s input (or inputs), and similar in form to the impulse 
response of the system. The impulse response and the system transfer function form a Laplace trans­
form pair for continuous-time systems and a z-transform pair in the case of discrete-time systems. 
The forced response of each is expressible by convolution, an integral for continuous-time systems 
and a sum for discrete-time systems.
BIBO stable systems are characterized by the location of transfer function poles in the s 
and z complex planes. Alternatively, the impulse response function of the continuous-time 
­system and  the impulse response (weighting sequence) of the discrete-time system satisfy 
equivalent types of constraints (in integral or summation form) when the systems are stable. In 
both instances, stability is an inherent property requiring the asymptotic decay of the natural 
modes.
The analogy continues into the realm of frequency response. The response of discrete-time 
­systems to sinusoidal inputs characterizes the system dynamics in the same way as it does for 
continuous-time systems. Moreover, methods based on frequency response often play a critical role 
in the overall design of a discrete-time system.
4.9.1  Steady-State Sinusoidal Response
We begin by considering the response of a stable LTI discrete-time system with z-domain transfer 
function H(z) to the sinusoidal input
	
u
k T
k
k =
=
sin ω ,
, , ,...
0 1 2
	
(4.641)
The z-transform of the output yk, k = 0, 1, 2, …, is expressed as
	
Y z
H z U z
H z
T z
z
T z
( )
( ) ( )
( )
(sin
)
( cos
)
=
=
−
+






ω
ω
2
2
1 	
(4.642)
	
=
−
−






H z
T z
z
z
j T
j T
( )
(sin
)
(
)(
)
ω
ω
ω
e
e
	
(4.643)
A partial fraction expansion of Y(z) in Equation 4.643 includes the first two terms shown in 
Equation 4.644 along with additional terms resulting from the poles of H(z).
	
Y z
c
z
z
c
z
z
H z
j T
j T
( )
{terms due to poles of
( )}
=
−
+
−
+
−
1
2
e
e
ω
ω
	
(4.644)

281
Linear Systems Analysis
where c1 and c2 are a complex conjugate pair. The constant c1 is obtained from
	
c z
z
H z
T z
z
z
H
j T
j T
j T
z
j T
j T
1
−
−
−






=
=
e
e
e
e
ω
ω
ω
ω
ω
ω
( )
(sin
)
(
)(
)
(e
)
sin ω
ω
ω
T
j T
j T
e
e
−
−
	
(4.645)
From Euler’s identity, e jθ = cos θ + j sin θ, the denominator reduces to 2j sin ωT, and the con­
stants c1 and c2 become
	
c H
j
c
c
H
j
j T
j T
1
2
1
2
2
(
) ,
(
)
e
e
ω
ω
=
=
−
	
(4.646)
Combining Equations 4.644 and 4.646 yields
	
Y z
H
j
z
z
H
j
z
z
j T
j T
j T
j T
( )
(
)
(
)
{
=
−





−
−





+
−
−
e
e
e
e
ω
ω
ω
ω
2
2
terms due to poles of
( )}
H z
	
(4.647)
H(e jωT) and H(e−jωT) are complex conjugates. In polar form,
	
H
M
H
M
j T
j
j T
j
(
)
(
)
,
e
e
e
e
ω
θ
θ
=
=
−
−
ω
	
(4.648)
where
	
M
H
H
j T
j T
=
=
|
|
(
)
{ (
)}
,
e
Arg
e
ω
ω
θ
	
(4.649)
Substituting both parts of Equation 4.648 into Equation 4.647 gives
	
Y z
M
j
e z
z
e
z
z
H z
j
j T
j
j T
( )
{terms to poles of
(
=
−
−−





+
−
−
2
θ
ω
θ
ω
e
e
)}
	
(4.650)
Inverting Y(z) produces the discrete-time system response
	
y
M
j
z
H z
k
j
j T
k
j
j T
k
=
−
+
−
−
−
2
1
[e (e
)
e
(e
)
{termsduetopolesof
( )}
θ
ω
θ
ω
]
	
(4.651)
	
=
−





+
+
+
−
+
−
M
j
z
H z
j k T
j k T
e
e
{terms due to poles of
(
(
(
ω
θ
ω
θ
)
)
2
1
)}
	
(4.652)
The first term is equal to M sin(kωT ± θ), and z−1 {terms due to poles of H(z)} is the transient 
response, which decays to zero at steady state for a stable system. Hence, at steady state, the 
response of a stable LTI discrete-time system with transfer function H(z) to the sinusoidal input 
in Equation 4.641 is
	
(
)
(
)
y
M
k T
k ss =
+
sin
ω
θ 	
(4.653)
	
=
+
|
|
H
k T
H
j T
j T
(
)
[
{ (
)}]
e
sin
Arg
e
ω
ω
ω
	
(4.654)

282
Simulation of Dynamic Systems with MATLAB® and Simulink®
H(e jωT) is the discrete-time frequency response function of the system. Note the dependence of M 
and θ in Equation 4.649 on the period T as well as on the frequency ω.
An expression similar to Equation 4.654 applies to LTI continuous-time systems (see Equation 
4.304). Once the transient response has vanished, the steady-state response consists of a sinusoid at 
the same frequency as the input. The frequency response function, H(jω), in the case of continuous-
time systems, and H(e jωT) for discrete-time systems, establishes the frequency dependent amplitude 
and phase shift in the steady-state response.
Linear systems are effectively filters that pass certain frequency components in their inputs more 
readily than others. Analog and digital filters are examples of how a system designer can exploit 
frequency response to produce a system with desirable frequency discrimination characteristics.
Frequency response is important in the study of continuous-time system simulation. It allows 
us to characterize the dynamic errors of a discrete-time system model intended to approximate 
(simulate) the dynamics of a continuous-time system. In particular, the frequency response function 
H1(e jωT) of a numerical integrator can be compared with the frequency response function of a con­
tinuous-time integrator HI( jω) = (1/s)|s=jω = 1/jω. For the most part, this is deferred until Chapter 8; 
however, we will lay some of the groundwork for what is to come later in this section.
4.9.2  Properties of the Discrete-Time Frequency Response Function
There are several important properties of H(e jωT) worthy of discussion. First and foremost is its peri­
odic nature. The argument e jωT is a unit vector beginning at (1,0) in the complex plane when ω = 0. 
As the frequency ω increases, the vector rotates counterclockwise around the Unit Circle as shown 
in Figure 4.72. At the sampling frequency ωs = 2π/T, the unit vector has completed one revolution, 
that is,
	
H
H
H
H
H
j
T
j
T T
j
j
s
(e
)
(e
)
(e
)
(e )
( )
(
/ )
ω
π
π
=
=
=
=
2
2
0
1 	
(4.655)
The complex values of H(e jωT) generated by the first revolution around the Unit Circle are 
repeated during subsequent revolutions, that is, as w increases from kωs to (k + 1)ωs, k = 1, 2, 3, …. 
In mathematical terms, the periodicity property is
	
H
H
k
j
T
j T
s
(e
)
(e
),
1, 2, 3,
(
)
ω
ω
ω
+
=
=
κ
…	
(4.656)
Another property of the frequency response function is the symmetry of |H(e jωT)| about the 
angles ωT = π, 3π, 5π, …, that is, the magnitude of |H(e jωT)| is symmetric or folded about the fre­
quencies ω = π/T, 3π/T, 5π/T, …. |H(e jωT)| is referred to as “even” function about the radian frequen­
cies ω = 0.5ωs, 1.5ωs, 2.5ωs, …. In mathematical terms,
FIGURE 4.72  Rotation of unit vector e jωT around the Unit Circle.

283
Linear Systems Analysis
	
|
|=|
|
=
+
−
H
H
n
j n
j
s
s
(
)
(
)
. , . , . ,...
[
]
[
]
e
e
,
ω
ω
∆
∆
0 5 1 5 2 5
	
(4.657)
The phase of H(e jωT) is an “odd” function about the same frequencies, that is,
	
Arg
(e
)
Arg
(e
),
. , . , . ,
[
]
[
]
H
H
n
j n
j n
s
s
ω
ω
+
−
=−
=
∆
∆
0 5 1 5 5 5 … 	
(4.658)
Due to the periodic behavior of H(e jωT), it is unnecessary to plot |H(e jωT)| and Arg [H(e jωT)] out­
side (0 ≤ ω < ωs). In fact, it is customary to draw a Bode plot of H(e jωT) from a lower frequency 
(greater than or equal to zero) up to the so-called Nyquist frequency ωN = 0.5ωs, from the theory 
of sampling. We shall have more to say about the sampling theorem after the following example, 
which illustrates the frequency response function of a discrete-time system and its aforementioned 
properties.
EXAMPLE 4.33
A first-order system described by τdy/dt + y = u is to be simulated using explicit Euler integration 
with a step size T.
	
a.	Find the z-domain transfer function H(z) of the resulting discrete-time system.
	
b.	Plot the magnitude (in db) and phase components of the frequency response function 
H(ejωT) over the interval 0.1 ≤ ω ≤ 0.5ws. The system time constant τ is 0.25 s, and the 
step size T is chosen according to T/τ = 0.1.
	
c.	Find the transient and steady-state response of the continuous-time system when the 
input is given by u(t) = 2sin 3t, t ≥ 0.
	
d.	Use the discrete-time frequency response function H(e jωT) to determine the steady-state 
output of the simulated (discrete-time) system. Verify the results graphically.
	
e.	Compare the steady-state sinusoidal responses of the continuous- and discrete-time 
systems.
	
a.	The transfer function of the continuous-time system is
	
H s
s
( ) =
+
1
1
τ
	
(4.659)
	
The z-domain transfer function of the discrete-time system approximation obtained by 
the use of explicit Euler integration is
	
H z
s
T
z
T
s
z
T
( )
(
)
(
)
=
+
=
−+
←
−
1
1
1
1
τ
τ
τ 	
(4.660)
	
b.	The frequency response function of the discrete-time system is given by
	
H
T
z
T
j T
z
j T
j T
(e
)
(
)
.
e
.
e
ω
ω
τ
τ
ω
=
−+
=
−
←
1
0 1
0 9 	
(4.661)
	
=
−
+
0 1
0 9
.
. )
sin
(cos ω
ω
T
j
T 	
(4.662)
	
	
The magnitude function is
	
H
T
T
j T
(e
)
.
. )
sin
]
ω
ω
ω
=
−
+
0 1
0 9 2
2
1 2
[(cos
	
(4.663)

284
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
Using the trigonometric identity sin2 θ + cos2 θ = 1, the magnitude function becomes
	
H
T
j T
(e
)
.
.
]
ω
ω
=
−
0 1
1 8
1 2
[1.81
cos
	
(4.664)
	
	
From Equation 4.662, the phase angle of H(e jωT) is
	
Arg
cos
[ (e
)]
tan
sin
.
H
T
T
j T
ω
ω
ω
= −
−






−1
0 9 	
(4.665)
	
	
The sampling frequency ωs = 2π/T = 80π rad/s. The Nyquist frequency ωN = 0.5ωs = 
40π = 125.67 rad/s. “Ch4_Ex4_33.m” contains the MATLAB code to generate the Bode 
plot shown in Figure 4.73.
	
c.	The continuous-time response y(t) to the input u(t) = 2 sin 3t, t ≥ 0 is obtained from the 
transfer function of the continuous-time system
	
H s
Y s
U s
s
s
( )
( )
( )
.
=
=
+ =
+
1
1
1
0 25
1
τ
	
(4.666)
	
Y s
H s U s
s
s
( )
( ) ( )
.
=
=
+
+












1
0 25
1 2
3
9
2
	
(4.667)
	
=
+
+
24
4
9
2
(
)(
)
s
s
	
(4.668)
	
	
Inverting Y(s) by partial fractions leads to
	
y t
t
t
t
( )
e
sin
.
=
+
−






−
24
25
4
3
3
3
0 25
cos
	
(4.669)
10–1
100
101
ω (rad/s)
ω (rad/s)
ω = 3 rad/s
ω = 3 rad/s
102
10–1
0
0
–50
–10
–20
–100
–150
Arg H(ejωT) (deg)
|H(ejωT)| (db)
100
T = 0.025 s
ωs = 2π/T = 80π rad/s
ωN = 0.5ωs = 40π rad/s
Bode plot of frequency response function H(e jωT)
101
102
FIGURE 4.73  Bode plot for system with frequency response function H(e jωT) in Equation 4.661.

285
Linear Systems Analysis
	
	
The transient and steady-state components of y(t) are
	
y
y
t
t
tr
t
ss
=
=
−






−
24
25
24
25
4
3
3
3
0 25
e
,
sin
.
cos
	
(4.670)
	
d.	The magnitude and phase of the discrete-time frequency response function at ω = 3 rad/s 
and T = 0.025 s are obtained from Equations 4.664 and 4.665, respectively.
	
H
j
(e
)
.
[ .
.
]
.
( .
)
3 0 025
1 2
0 1
1 81 1 8
0 815
=
−
=
cos 3(0.025)
	
(4.671)
	
Arg
cos 3(0.025)
H
j
(e
)
tan
sin ( .
)
.
( .
)
3 0 025
1
3 0 025
0 9
= −
−





=
−
−0 657
.
rad
	
(4.672)
	
	
The dashed lines in Figure 4.73 show the gain 20 log(0.815) = −1.78 db and phase 
angle −0.657 rad = −37.63° at ω = 3 rad/s. For a sinusoidal input with magnitude 
|u(t)| = 2, the discrete-time system output at steady state is from Equation 4.654
	
(
)
[
(
)]
.
.
.
y
k
k ss =
−
2 0 815
0 075
0 657
sin
	
(4.673)
	
	
A graph of uk and (yk)ss is shown in Figure 4.74.
	
	
The steady-state output component lags the input by 37.63°, and its amplitude is
	
2
2 0 815
1 63
3 0 025
|
|=
=
H
j
(
)
( .
)
.
.
( .
)
e
	
	
	
In order to verify the frequency response values in Equations 4.671 and 4.672, a 
blown-up portion of Figure 4.74 near consecutive peaks is shown in Figure 4.75.
	
	
The amplitude of (yk)ss is in agreement with the predicted value of 1.63. The peak 
amplitudes occur at approximately k = 105 for uk and k = 114 for (yk)ss. The measured 
0
–2
–1.5
–1
–0.5
0
0.5
1
1.5
2
Discrete system input and sinusoidal output at steady-state
25
50
75
100
125
k
150
175
200
uk
 (yk)ss
FIGURE 4.74  Sinusoidal input and steady-state sinusoidal output of discrete-time system.

286
Simulation of Dynamic Systems with MATLAB® and Simulink®
phase lag is ΔkωT = (114 − 105)(3 rad/s)(0.025 s) = 0.675 rad, which compares favorably 
with the analytical value of 0.657 rad.
	
e.	The continuous-time system response y(t) in Equation 4.669 for 0 ≤ t ≤ 5 and (yk)ss, the 
steady-state component of the discrete-time system output, are plotted in Figure 4.76.
	
	
Note the agreement between the two outputs once the continuous-time transient 
response has vanished.
	
	
The discrete-time system transient component cannot be obtained solely from the 
discrete-time frequency response function H(e jωT). However, from Equation 4.660, we 
know it has the form cpk where p = 1 − T/τ = 0.9. Finding the constant c requires partial 
1
Transient
period
(4τ = 1 s)
0.5
0
–1.5
–1
–0.5
0
0.5
1
1.5
Continuous response and discrete steady-state response
2
2.5
1.5
3
3.5
uk
(yk)ss
y(t)
t (s)
4
4.5
5
FIGURE 4.76  Continuous-time system response and sinusoidal steady-state response of discrete-time 
­system obtained using frequency response function.
90
1
1.2
1.4
1.6
1.8
2
2.2
Graphical verification of frequency response characteristics
95
100
105
110
uk
(yk)ss
Max (yk)ss
k
115
120
ΔK = 114–105 = 9
125
FIGURE 4.75  Graphical enlargement of Figure 4.74 for verifying frequency response characteristics.

287
Linear Systems Analysis
fraction expansion of Y(z) = H(z)U(z) where U(z) is the z-transform of the discrete-time 
input uk = 2 sin kωT, k = 0, 1, 2, ….
4.9.3  Sampling Theorem
The Bode plot in Figure 4.73 displays the frequency response characteristics of the discrete-time 
system used to simulate a first-order continuous-time system. H(e jωT) is a periodic function with 
period ωs = 2π/T. The maximum frequency on Bode plots of discrete-time systems is generally 
limited to ωN = ωs/2 = π/T, where ωN is called the Nyquist frequency. The limitation is based on the 
sampling theorem, which we shall explore in a very rudimentary fashion.
First, let us verify the periodic nature of H(e jωT) as well as its symmetry about the frequencies 
0.5ωs, 1.5ωs, 2.5ωs, … or equivalently ωN, 3ωN, 5ωN, …. Figure 4.77 shows the magnitude H(ejωT) 
and phase Arg[H(ejωT)] corresponding to the frequency response function H(ejωT) in Equation 4.662. 
The sampling frequency ωs = 2π/T = 251.3 rad/s and the plots in Figure 4.77 extend for three peri­
ods, that is (0 ≥ ω < 3ωs). The symmetry of H(ejωT) in both magnitude and phase about the Nyquist 
frequency, ωN = ωs/2 = 125.7 rad/s, 3ωN, 5ωN, 7ωN, … is evident.
The sampling theorem, as the name suggests, applies to sample data systems where a continuous-
time signal is periodically sampled. The theorem, however, has important ramifications for discrete-
time systems and continuous system simulation.
Continuous-time sinusoids sin ωt are sampled every T s as shown in Figure 4.78. In the top frame, 
the frequency of the sinusoid is ω = 0.2π rad/s, and sampling occurs at a rate of one sample per sec­
ond (ωs = 2π rad/s). The period of the sinusoid is 2π/ω = 10 s, and the sampling rate of 10 samples 
per period is sufficient to reconstruct the original sinusoid.
In the middle plot, the frequency of the continuous-time sinusoid is 1.4π rad/s while the sam­
pling remains fixed at 2π rad/s. The sampled points appear to come from the lower frequency 
(ω = 0.4π rad/s) continuous-time sinusoid shown in dashed form. In the bottom graph, the contin­
uous-time sinusoid has a frequency of 2.2π rad/s. Sampling it at the rate of 2π rad/s produces the 
0
–180
–135
–90
–45
0
45
90
135
180
100
Arg H(ejωT) (deg)
|H(ejωT)|
200
300
400
500
600
700
0
0
0.5
1
Frequency response function H(e jωT)
100
200
300
400
500
600
700
ω (rad/s)
ωN
ωs
3ωN
2ωs
5ωN
3ωs
FIGURE 4.77  (a) Periodic nature and (b) symmetry of frequency response function H(ejωT).

288
Simulation of Dynamic Systems with MATLAB® and Simulink®
identical set of data points obtained in the top graph making it appear as if the continuous-time 
sinusoid being sampled is the one at ω = 0.2π rad/s.
There is no ambiguity in identifying the correct sinusoid being sampled provided sampling 
occurs more than twice as fast as the frequency of the sinusoid, that is, ωs > 2ω. In other words, the 
sampled points uniquely determine any continuous-time sinusoid whose frequency is less than one 
half the sampling frequency, that is, ω < ωs/2.
By definition, the Nyquist frequency is ωN = ωs/2. Hence, for a given sampling frequency ωs, only 
sinusoids with frequency less than the Nyquist frequency can be distinguished from lower ­frequency 
sinusoids. A sinusoid with frequency greater then the Nyquist frequency will be “aliased” into a lower 
frequency sinusoid as in the last two cases shown in Figure 4.78. This explains why Bode plots of dis­
crete-time frequency response functions range from a lower frequency up to the Nyquist frequency ωN.
The sampling theorem applies to sampling of continuous-time signals in general. Aliasing 
occurs when ωs ≤ 2ω0, where ω0 represents the highest frequency present in the band-limited sig­
nal. In terms of the sampling period, T < π/ω0 to prevent aliasing. The sampling theorem presents 
a formula, albeit difficult to implement, for reconstructing the band-limited continuous-time signal 
from the numerical values of the samples (Cadzow 1973).
The sampling theorem extends to simulation of continuous-time systems. The sampling inter­
val T becomes the integration step size. Continuous-time inputs to the differential equations 
are ­sampled  in the process of generating the discrete-time inputs to the difference equations. 
Consequently, the frequency content of the continuous-time input signals influences the choice of 
appropriate step size in the simulation.
EXAMPLE 4.34
The continuous-time first-order system in Example 4.33 is to be simulated using trapezoidal 
integration
	
a.	Find the z-domain transfer function of the discrete-time system and the difference equa­
tion. Leave your answers in terms of the continuous-time system time constant τ and the 
integration step size T.
20
18
16
14
12
10
8
6
4
2
0
0
–1
–1
–1
0
0
1
1
1
20
18
16
14
12
10
8
6
4
2
0
20
18
16
14
12
10
8
6
4
2
0
t (s)
Effect of sampling sin ωt (ω = 0.2π, 1.4π, 2.2π rad/s) at ωs = 2π rad/s
FIGURE 4.78  Illustration of aliasing of a sampled sinusoid.

289
Linear Systems Analysis
	
b.	Find the sampling frequency and Nyquist frequency when τ = 5 s and T = 0.25 s.
	
c.	Find the continuous-time output y(t) when the input u(t) = sin ωt, t ≥ 0.
	
d.	Plot the continuous-time and discrete-time outputs on the same graph when
	
(i)
rad/s
rad/s
rad/s
ω
π
ω
π
ω
π
=
=
=
7
8
.	
	
e.	Compare H(jω) and H(ejωT) at ω = π, 77, and 8π rad/s.
	
a.	The z-domain transfer function of the discrete-time system is
	
H z
H s
s
s
T
z
z
s
T
z
z
( )
( )
(
)((
) (
))
(
)((
) (
))
=
=
+
←
−
+
←
−
+
2
1
1
1
1
2
1
1
τ
	
(4.674)
	
=
−
+
+
1
1
τ[(2
)((
1)
]
1
T
z
z
(
))
	
(4.675)
	
=
+
+
−
−
T z
T z
T
(
)
(
)
(
)
1
2
2τ
τ
	
(4.676)
	
⇒
=
=
+
+
−
−
−
−
H z
Y z
U z
T
z
T
T z
( )
( )
( )
(
)
(
)
(
)
1
2
1
1
2τ
τ
	
(4.677)
	
	
Inverting Equation 4.677 produces the difference equation
	
(
)
(
)
(
),
, , ,...
2
2
1 2 3
1
1
τ
τ
+
−
−
=
+
=
−
−
T y
T y
T u
u
k
k
k
k
k
	
(4.678)
	
b.	ωs = 2π/T = 2π/0.25 = 8π rad/s, ωN = ωs/2 = 8π/2 = 4π rad/s.
	
c.	The continuous-time output y(t) is obtained by inverse Laplace transformation of
	
Y s
H s U s
s
s
( )
( ) ( )
=
=
+
+






1
2
2
τ
ω
ω
1
	
(4.679)
	
	
Following partial fraction expansion and inverse Laplace transformation, the 
result is
	
y t
t
t
t
( )
(
)
cos
sin
=
+
−
+






−
τω
τω
ω
τω
ω
τ
1
1
2 e
	
(4.680)
	
d.	Substituting τ = 5 s, ω = π, 7π, and 8π rad/s gives the continuous-time output for the 
three cases enumerated. The simulated output is obtained by recursive solution of the 
difference equation after solving explicitly for yk in Equation 4.678.
	
y
T
T y
T u
u
k
k
k
k
k
=
−
+
+
=
−
−
1
2
1 2 3
1
1
2 +
τ
τ
[(
)
(
)],
, , ,…
	
(4.681)
	
	
The continuous- and discrete-time outputs are evaluated in “Ch4_Ex4_34.m.” 
Plots of y(t), t ≥ 0 and yk, k = 0, 1, 2, …. for the three input sinusoids are presented in 
Figures 4.79 through 4.81 along with the continuous- and discrete-time inputs.

290
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
In Figure 4.79, the input frequency ω = π rad/s is well below the Nyquist frequency 
ωN = 4π rad/s. Sampled values of the discrete-time input uk = sin(kωT) are an accurate 
reflection of the continuous-time sinusoidal input u(t) = sin ωt. As a result, the continu­
ous-time response y(t) and simulated response yk are in close agreement at the sample 
times tk = kT, k = 0, 1, 2, ….
	
	
In Figure 4.80, ω = 7π rad/s exceeds the Nyquist frequency ωN = 4π rad/s. The simu­
lated output is the response to the alias term whose frequency is π rad/s (shown dotted 
in Figure 4.80). Understandably, the simulated response yk bears no resemblance to the 
continuous-time response y(t).
8
7
6
5
Continuous output y(t) and discrete output yk
u(t)
uk
y(t)
yk
4
3
2
1
0
8
7
6
5
4
3
2
1
0
–0.05
0
0.05
0.1
–0.05
0
0.5
1
–1
t (s)
u(t) = sin(ωt), uk = sin(ωkT), ω = π rad/s, T = 0.25 s
FIGURE 4.79  Continuous- and discrete-time inputs and outputs (ω = π rad/s).
4.5
4
3.5
3
Continuous output y(t) and discrete output yk
u(t)
uk
y(t)
yk
2.5
2
1.5
1
0.5
0
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
–0.05
–0.1
–0.5
0
1
–1
0.5
t (s)
u(t) = sin(ωt), uk = sin(ωkT), ω = 7π rad/s, T = 0.25 s
FIGURE 4.80  Continuous- and discrete-time inputs and outputs (ω = 7π rad/s).

291
Linear Systems Analysis
	
	
In Figure 4.81, the sampling frequency is the same as the frequency of the sinusoid, 
that is, ωs = ω = 8π rad/s. The same value of zero is sampled once per cycle making 
the effective input to the discrete-time system uk = 0, k = 0, 1, 2, …. The simulated 
(discrete-time) output is identically zero as well. The continuous-time response is also 
shown.
	
e.	There are several ways to determine the magnitude and phase of the continuous-time 
and discrete-time frequency response functions. One is to start with H(jω) and H(ejωT) 
and express the magnitude and phase components in terms of ω with τ and T (in the 
discrete-time case) as parameters.
	
H j
H s
s
j
s
j
s
j
(
)
( )|
ω
τ
τ ω
ω
ω
=
=
+
=
+
=
=
1
1
1
1	
(4.682)
	
=
+
∠−
−
1
1
2
1 2
1
[(
)
   
(
)
τω
τω
]
tan
/
	
(4.683)
	
H
H z
T z
T z
T
j T
z
z
j T
j T
(e
)
( )
(
)
(
)
(
)
e
ω
ω
ω
τ
τ
=
|
=
+
+
−
−
=
=
1
2
2
e
	
(4.684)
	
=
+
+
−
−
T
T
T
j T
j T
(e
)
(
)e
(
)
ω
ω
τ
1
2
2τ
	
(4.685)
	
=
+
+
+
+
−
−
T
T
j
T
T
T
j
T
T
(cos
sin
)
(
)(cos
sin
)
(
)
ω
ω
τ
ω
ω
τ
1
2
2
	
(4.686)
	
|
|=
+
+
+
−
−
+
H
T
T
T
T
T
T
j T
(e
)
[(
cos
)
sin
]
{[(
)cos
(
)]
[(
/
ω
ω
ω
τ
ω
τ
1
2
2
2
1 2
2
2
τ
ω
+T
T
)sin
] } /
2 1 2
	
(4.687)
3
2.5
Continuous output y(t) and discrete output yk
u(t)
uk
y(t)
yk
2
1.5
1
0.5
0
3
2.5
2
1.5
1
0.5
0
0
15
×10–3
5
10
–5
–0.5
0
1
–1
0.5
t (s)
u(t) = sin(ωt), uk = sin(ωkT), ω = 8π rad/s, T = 0.25 s
FIGURE 4.81  Continuous- and discrete-time system inputs and outputs (ω = 8π rad/s).

292
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
Arg[
2
n
H
T
T
T
j T
(e
)]
tan
sin
cos
tan
(
)si
ω
ω
ω
τ
ω
=
+





−
+
−
−
1
1
1
T
T
T
T
(
)cos
(
)
2
2
τ
ω
τ
+
−
−






	
(4.688)
	
	
A simpler alternative for computing either frequency response function for a given 
frequency ω is by direct substitution of s = jω and z = ejωT. The resulting complex num­
bers in rectangular form are then expressed in polar form. To illustrate, consider the 
continuous-time frequency response function H(jω) when ω = π rad/s.
	
H j
j
j
j
j
(
)
π
π
π
π
π
=
+ = −
−
⋅+
1
5
1
1
5
1
5
1
1
5
	
(4.689)
	
=
+
−
+
1
1
5
5
1
5
2
2
(
(
π
π
π
)
)
j
	
(4.690)
	
=
−
|
|=
+ −
=
0 0040
0 0634
0 0040
0 0634
0 0635
2
2 1 2
.
.
(
)
[( .
)
(
.
) ]
.
/
j
H jπ
Arg[
rad(
86.4 )
H j(
)]
tan
.
.
.
π =
−





= −
−
°
−1
0 0634
0 0040
1 5072
	
	
	
The discrete-time frequency response function is evaluated in the same fashion.
	
H
j
j
j
(e
)
.
(e
)
[( )( )
.
)]e
[( )( )
.
π
π
π
0.25
0.25
0.25
=
+
+
−
−
0 25
1
2 5
0 25
2 5
0 25)] 	
(4.691)
	
|
|=
−
=
+ −
=
H
j
j
(e
)
.
.
[( .
)
(
.
) ]
.
/
π..25
0 0036
0 0601
0 0036
0 0601
0 06
2
2 1 2
02
0 0601
0 0036
1 5105
1
Arg[
ra
0.25
H
j
(e
)]
tan
.
.
.
π
=
−





= −
−
d(
86.6 )
−
°
	
	
	
Table 4.10 lists the magnitude and phase of the continuous-time and discrete-time 
frequency response functions evaluated at ω = π, 7π, and 8π rad/s. The DC (ω = 0) val­
ues are also included. It follows from Equation 4.682 that the DC gain and phase of the 
continuous-time system are 1° and 0°, respectively. For the discrete-time system, the 
DC gain and phase are obtained from me H(e j0T) = H(1) = 1. The period of H(e jωT) is 
ωs = 8π rad/s and its symmetric about the Nyquist frequency ωN = 4π rad/s.
	
	
In order to verify the magnitudes shown in Table 4.10, it is necessary to extend the 
time scale in Figures 4.79 through 4.81. For example, in Figure 4.79, when the input is 
u(t) = sin πt, t ≥ 0, the continuous- and discrete-time steady-state responses are sinusoids 
with amplitudes in the neighborhood of 0.06 (see Table 4.10). Looking at Figure 4.79, 
TABLE 4.10
Continuous- and Discrete-Time Frequency Response (ω = 0, π, 7π, 8π)
ω, rad/s
|H(jω)|
Arg[H(jω)] (°)
|H(e jω0.25)|
Arg[H(e jω0.25)] (°)
0
1
0
1
0
π
0.0635
−86.36
0.0602
−86.54
7π
0.0091
−89.48
0.0602
−86.54
8π
0.0080
−89.54
1
0

293
Linear Systems Analysis
the continuous- and discrete-time responses have yet to reach steady state. Figure 4.82 
shows both responses for a period of time equal to five time constants (5τ = 25 s). 
The steady-state amplitudes are in agreement with the values in the table.
4.9.4  Digital Filters
Linear discrete-time systems process signals with known frequency content in a predictable 
­fashion. Digital filters are designed to block or pass selected frequencies present in the discrete-
time inputs. Numerous references in the area of digital signal processing are available for further 
reading about digital filters.
Low-pass filters, as the name suggests, are intended to readily pass low frequencies and attenuate all 
others. Figure 4.73 showed the discrete-time frequency response function of a low-pass filter. The cut­
off frequency (bandwidth) of a low-pass filter with DC gain of 0 db is the frequency at which the gain 
equals −3 db. A low-pass filter can be thought of as passing those frequencies within its bandwidth.
Two ways of implementing a low-pass digital filter are illustrated next.
EXAMPLE 4.35
Twenty-five years of end-of-month lake water temperature readings Tk, k = 0, 1, 2, 3, …, 300 
months, are stored in MATLAB data file “Ch4_LakeTemp.mat.” Researchers would like to deter­
mine if the lake temperature, adjusted for monthly variations, has changed over that time.
	
a.	A moving average of the past 12 readings is used to smooth the seasonal temperature 
variations, that is,
	
ˆ
[
],
,
,
,
T
T
T
T
k
k
k
k
k
=
+
+
+
=
−
−
−
1
12
12 13
300
1
2
12

…
	
(4.692)
	
where ˆTk  is the seasonally adjusted end-of-month lake temperature starting with end-
ofmonth 12. (Note that T0 is the lake temperature on December 31 of a given year and 
ˆT12 represents the seasonally adjusted lake temperature on December 31 of the following 
year.) Find the z-domain transfer function H(z) =  ˆT(z)/T(z), and plot the magnitude of the 
discrete-time frequency response function.
22.5
25
Continuous response y(t) and discrete response yk
y(t)
yk
20
15
17.5
12.5
10
7.5
5
2.5
0
0
0.02
–0.02
–0.04
–0.06
0.04
0.06
0.08
0.10
0.12
t (s)
u(t) = sin πt
H(s) = 1/(5s + 1)
FIGURE 4.82  Continuous- and discrete-time responses showing steady state.

294
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	The period of the seasonal variation is P = 12 months. The frequency is ω0 = 2π/P = π/6 
rad/month. Find |H(ejωT)| and plot where T = 1 month (sampling period).
	
c.	Find ˆTk , k = 12, 13, …, 300 and plot the values on the same graph with Tk, k = 0, 1, 2, …, 
300. Estimate the yearly increase in lake temperature.
	
d.	A first-order low-pass digital filter with z-domain transfer function
	
H z T z
T z
z
z
z
( ) ( )
( )
(
)
(
)
ˆ
ˆ
=
−
−
=
−
−
−
1
1
1
1
α
α
α
α
	
(4.693)
	
is used to filter the monthly temperature variations and pass any low-frequency lake tem­
perature variation with time. Plot the discrete-time frequency response magnitude and 
phase for α = 0.99. Find the cutoff frequency and determine whether it is less or greater 
than ω0 = π/6 rad/month. In addition, find | (e
)|
H
j
T
ω0
.
	
e.	Find the difference equation relating ˆTk  and Tk. Solve it recursively for ˆTk , k = 1, 2, …, 
300 and plot both input and output on the same graph.
	
a.	Taking the z-transform of Equation 4.692 gives
	
ˆ( )
[
( )
( )
( )]
T z
z T z
z T z
z
T z
=
+
+
+
−
−
−
1
12
1
2
12

	
(4.694)
	
⇒
=
=
+
+
+
−
−
−
H z
T z
T z
z
z
z
( )
( )
( )
(
)
ˆ
1
12
1
2
12

	
(4.695)
	
	
The magnitude function is shown in Figure 4.83. The data points for generating the 
graph in Figure 4.83 are computed in M-file “Ch4_Ex4_35.m.”
	
b.	From Figure 4.83, we see that the zeros of |H(ejωT)| are located at ω0 = π/6 and multiples 
of ω0, namely, 2π/6, 3π/6, 4π/6, 5π/6, π, ….
	
c.	The smoothing algorithm, Equation 4.692, is applied to the monthly lake temperature 
data, and the results ˆTk , k = 12, 13, …, 300 are plotted along with the discrete-time 
input Tk, k = 0, 1, 2, …, 300 in Figure 4.84.
Magnitude function vs frequency for smoothing filter (T = 1 month)
π/6
2π/6
3π/6
4π/6
5π/6
π
0
0.4
0.2
0.3
0.1
|H(ejωT)|
0.5
0.6
0.7
0.8
0.9
1
ω (rad/month)
H(z) = (1/12)[z–1 + z–2 + … + z–12]
FIGURE 4.83  Magnitude function for smoothing filter.

295
Linear Systems Analysis
	
The estimated annual increase in lake temperature is
	
m
T
T
1
300
12
24
71 016
65 353
24
0 236
=
−
=
−
=
°
ˆ
ˆ
.
.
.
F
year 	
(4.696)
	
d.	The gain of the filter with z-domain transfer function in Equation 4.693 and α = 0.99 is 
shown in Figure 4.85.
Month
0
58
60
62
64
66
68
70
Temperature (°F)
72
74
76
78
50
100
150
200
^
250
300
Digital filtering using moving average
Tk (monthly temperature)
Tk (filter output)
FIGURE 4.84  Input Tk, k = 0, 1, 2, …, 300 and smoothing filter output ˆTk, k = 12, 13, …, 300.
10–3
–39
–36
–33
–30
–27
–24
20 log |H(ejωT| (db)
–21
–18
–15
–12
–9
–6
–3
0
10–2
10–1
ω (rad/month)
ω0 = π/6
ωc = 0.01
100
Gain of first-order digital filter (α = 0.99)
FIGURE 4.85  Gain of first-order low-pass filter with H(z) in Equation 4.693.

296
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The cutoff frequency ωc is obtained from
	
20
3
log
e
H
j
T
c
(
)
ω
= −	
(4.697)
	
	
It is left as an exercise problem to show that
	
ω
α
α
α
c
T
=
+
−






−
+
−
1
1
10
2
1
2
0 3
2
1
cos
.
log(
)
	
(4.698)
	
	
Substituting α = 0.99, T = 1 into Equation 4.698 yields ωc = 0.01 rad/month. Referring 
to Figure 4.85, ω0 = π/6 rad/month is well beyond the cutoff frequency, and we should 
expect the seasonal fluctuations to be removed by the digital filter. The magnitude of 
H
j
T
(e
)
ω0  is 0.0194 (−34.2 db).
	
e.	The difference equation is obtained from Equation 4.693 by inverse z-transformation.
	
ˆ
ˆ
(
)
–
–
,
, , ,
,
T
T
T
k
k
k
k
α
α
−=
=
1
1
1 2 3
300
 
…
	
(4.699)
	
where ˆT
T
0
0
=
. Equation 4.699 is solved recursivelyfor ˆTk , k = 1, 2, 3, …, 300 in “Ch4_
Ex4_35.m.” The discrete-time input and output are shown in Figure 4.86.
Example 4.35 illustrates the use of FIR and IIR filters. From Equation 4.695, the FIR smoothing 
filter impulse response is
	
hk
k
k
k
=
+
+
+
−
−
−
1
12
1
2
12
(
)
δ
δ
δ

	
(4.700)
	
=
=
=
=





0
0
1
12
1 2
12
0
13 14
,
,
, ,
,
,
,
,
k
k
k
…
…
    
	
(4.701)
Month
0
Temperature (°F)
58
60
62
64
66
68
70
72
74
76
78
50
100
150
200
250
300
Digital filtering using first-order filter (α = 0.99)
Tk (monthly temperature)
^Tk (filter output)
FIGURE 4.86  Input Tk, k = 0, 1, 2, …, 300 and first-order filter output ˆTk, k = 1, 2, …, 300.

297
Linear Systems Analysis
From Equation 4.693, the first-order IIR low-pass digital filter impulse response is
	
h
k
k
k
=
−
=
(
)
,
, , , ,
1
0 1 2 3
α α
… 	
(4.702)
Based on the convolution sum for the output of a discrete-time system, the FIR filter output 
depends solely on the past 12 inputs (not surprising) while the infinite memory IIR filter output 
relies on the entire set of past inputs.
Choosing α = 0.99 places the pole of H(z) precariously close to the Unit Circle, the stability 
boundary in the z-plane. As a consequence, discrete-time input signals with poles near z = 0.99, 
for example, a step input with pole at z = 1, are readily passed.
The transient response period is considerable since the natural mode αk = 0.99k takes a long 
while to decay to zero. In Figure 4.86, if we arbitrarily assume the transient period to be 150 months 
[0.99150 = 0.22], the estimated slope of the linear rise in lake temperature is computed as
	
m
T
T
2
300
150
300
150
1 12
69 179
66
=
−
°
−
×
=
−
(
)
(
)
year/month
ˆ
ˆ
F
month
/
.
.649
12 5
0 202
.
.
=
°F
year 	
(4.703)
which is close to the value obtained using the FIR smoothing filter.
EXERCISES
	4.70	 Repeat Example 4.33 using implicit Euler instead of explicit Euler integration for approximat­
ing the continuous-time system.
	4.71	 A second-order system with damping ratio ζ and natural frequency ωn is simulated using 
trapezoidal integration. The DC gain of the system is unity.
	
a.	 Find the discrete-time frequency response function H(ejωT). Leave your answer in terms 
of, ζ, ωn, T, and ω.
	
b.	 Draw a Bode plot of H(ejωT) when the continuous-time system poles are as shown in 
Figure E4.71. Assume ωnT = 0.1.
	4.72	 The electrical circuit shown in Figure E4.72 is that of a biquad filter, so named because the 
transfer function from the input to the output contains quadratic factors in the numerator and 
denominator. The differential equation of the circuit is
FIGURE E4.71
FIGURE E4.72

298
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a e
a
a e
b e
b e
b e
e
2 0
1 0
0 0
2 1
1 1
0 1




+
+
+
+
–
	
	
where the constants a0, a1, a2 and b0, b1, b2 are related to R, C1, C2 by
	
a
a
RC
RC a
RC RC b
b
RC b
RC RC
0
1
1
2
2
1
2
0
1
2
2
1
2
1
2
1
2
=
=
+
=
=
=
=
,
,
,
,
,
	
	
a.	 Find the transfer function G(S) = E0(S)/E1(S).
	
b.	 A discrete-time system approximation based on trapezoidal integration has a z-domain 
transfer function G(z) given by
	
G z
z
z
z
z
( ) =
+
+
+
+
β
β
β
α
α
α
2
2
1
0
2
2
1
0 	
	
	
Show that
	
β
τ τ
τ
β
τ τ
β
τ τ
τ
α
τ τ
0
2
2
1
1
2
2
2
1
2
2
2
0
4
4
8
2
4
4
4
2
=
−
+
=−
+
=
+
+
=
−
1
2
1
2
T
T
T
T
T
,
,
(τ
τ
α
τ τ
α
τ τ
τ
τ
1
2
2
1
1
2
2
2
1
2
2
2
8
2
4
2
2
+
+
=−
+
=
+
+
+
)
,
(
)
T
T
T
T
T
1
2
	
	
	
where τ1 = RC1 and τ2 = RC2 and T is the integration step size.
	
c.	 Draw a Bode plot for the discrete-time frequency response G(ejωT) when τ1 = 0.1 s, 
τ2 = 0.001 s, and T = 2 × 10−4 s.
	
d.	 Fill in the following table.
ω, rad/s
|G(jω)|
Arg[G(jω)]
|G(ejωT)|
Arg[G(ejωT)]
0
5
100
5000
	4.73	 An analog signal r(t) is the command input to a digital control system, part of which is shown 
in Figure E4.73. The signal r(t) must be sampled and converted to a discrete-time signal for 
use by the digital controller. The command input consists of a signal component s(t) and a 
high-frequency (compared to the sampling rate 1/Ts) noise component n(t). An antialiasing 
filter is inserted before sampling to eliminate aliasing in ˆrk the input to the controller.
	
	
A fourth-order Butterworth low-pass filter is chosen. The transfer function is
	
G s
R s
R s
s
s
s
n
n
n
n
( )
( )
( )
(
/ )
=
=
+
+






+
ˆ
cos
co
ω
πω
ω
ω
2
2
2
2
2
2
8
2
s (
/ )
3
8
2
πω
ω
n
n
s +





	
FIGURE E4.73

299
Linear Systems Analysis
	
a.	 The control system sampling rate is 1000 Hz. Find the Nyquist frequency ωN.
	
b.	 Find ωn, so that the magnitude of G(jω) is −60 db at the Nyquist frequency.
	
Hint: Use trial and error guesses for ωn along with Bode plots until the condition 
|G(jωN)| = −60 db is approximately satisfied.
	
c.	 The signal and noise components of the command input r(t) are s(t) = 1, t ≥ 0 and 
n(t) = 5 × 10−3 sin (2 × 106t), t ≥ 0. Find the filter output ˆr(t) at steady state.
	
d.	 Find G(z), the z-domain transfer function of the discrete-time system approximation to 
G(s) using explicit Euler integration. Leave your answer in terms of the integration step 
size T.
	
e.	 Comment on the choice of T necessary to simulate the filter response by recursive solution 
of the difference equation corresponding to G(z).
	4.74	 A method for approximating a continuous-time system with transfer function G(s) is illus­
trated in Figure E4.74. A continuous-time input u(t) is sampled every T s to produce the 
discrete-time input uk. A zero-order hold (ZOH) reconstructs a piecewise continuous approxi­
mation to u(t) denoted ˆu(t), which is the input to the continuous-time system. The continuous-
time output y(t) is sampled every T s resulting in the discrete-time output yk. The discrete-time 
system with input uk and output yk serves as an approximation to the continuous-time system 
with input u(t) and output y(t). The z-domain transfer function of the discrete-time system is 
(Jacquot)
	
G z
Y z
U z
z
z
z
s
s
( )
( )
( )
( )
=
=
−


















−
1
1
L
G
	
	
where z[ℒ−1[G(s)/s]} stands for the z-transform of the discrete-time signal resulting from 
­sampling the continuous-time signal ℒ−1 [ℊ(s)/s].
	
a.	 Find the z-domain transfer function using the ZOH approximation method when the 
­continuous-time system is first order with transfer function G(s) = 1/(τs + 1). Leave your 
answer in terms of the time constant τ and sampling period T.
	
b.	 Find the discrete-time frequency response function G(ejωT), and obtain expressions for the 
magnitude |G(ejωT)| and phase Arg[G(ejωT)].
	
c.	 Plot the magnitude and phase of G(ejωT) when τ = 1 s and T = 0.1 s.
	
d.	 Compare the continuous- and discrete-time unit step responses and comment on the 
results.
	
e.	 Find G(ejωT) and Arg[G(ejωT)] and compare with the values given in Table 4.10 where 
τ = 5 s and T = 0.25 s.
	4.75	 Derive Equation 4.698 for the cutoff frequency of the first-order low-pass digital filter with 
z-domain transfer function H(z) = (1 − α)z/(z − α).
FIGURE E4.74

300
Simulation of Dynamic Systems with MATLAB® and Simulink®
	4.76	 A notch filter is designed to attenuate input signals at one specific frequency called the notch 
frequency. The transfer function of a notch filter is
	
G s
s
s
s
n
n
n
n
( )
(
)
=
+
+
+
2
2
2
2
2
ω
ω
ω
ω
ς
 is notch frequency
	
	
a.	 Find G(z), the z-domain transfer function of a digital filter obtained by approximation of 
G(s) using trapezoidal integration. Leave your answer in terms of ζ, ωn and the integration 
step size T.
	
b.	 The digital filter is to be used to filter out the monthly lake temperature fluctuations in 
Example 4.35. The notch frequency is ωn = π/6 rad/month and the sampling period is 
T = 1 month. On the same graph, plot |G(ejωT)| vs. ω from zero to the Nyquist ­frequency 
for ζ = 0.25, 0.5, 0.75.
	
c.	 Choose the value of ζ, which produces the largest attenuation at the notch frequency, and 
use the digital notch filter to filter out the monthly lake temperature fluctuations in the data­
set “Ch4_LakeTemp.mat.” Prepare a graph similar to the ones in Figures 4.84 and 4.86.
	4.77	 The design of a digital filter calls for the placement of a pair of poles and zeros as shown in 
Figure E4.77.
	
a.	 Find the difference equation relating the filter’s input u(n) and output y(n). The filter coef­
ficients should be expressed in terms of rp, θ, rz, and φ.
	
b.	 Express the magnitude function |H(ejωT)| in terms of the parameters rp, θ, rz, φ and the 
sampling time T.
	
c.	 Plot the magnitude function for the case when T = 1 s, rp = 0.9, rz = 2, φ = π/4 and 
θ = 0.2, 0.4, 0.6, 0.8, 1 rad. Comment on the results.
4.10  CONTROL SYSTEM TOOLBOX
This chapter has emphasized analytical methods for obtaining continuous- and discrete-time system 
response to elementary types of inputs. In this section, we explore the use of MATLAB functions in the 
control system toolbox designed to facilitate the process of modeling and simulation of LTI dynamic 
systems. The control system toolbox is a supplement to MATLAB. The reader is encouraged to check 
out the entire suite of available functions either online or in the control system toolbox lab manual 
(from The Mathworks, Inc.). Many of the functions are discussed and illustrated in recent linear con­
trols texts and companion lab manuals (D’Azzo and Houpis, 1995; Ogata 1998; Dorf and Bishop 2005).
Continuous- and discrete-time transfer functions are defined by specifying numerator and 
denominator polynomials in vector form. SISO and MIMO dynamic systems portrayed in block 
FIGURE E4.77

301
Linear Systems Analysis
diagram form can be reduced to obtain specific transfer functions, which can be analyzed (by other 
control system toolbox functions) in the time and frequency domain. Impulse and step responses 
as well as responses to arbitrary inputs of both types of systems are easily obtained. The z-domain 
transfer functions for simulating continuous-time systems based on various methods of approxima­
tion are available. Conversion between state-space and transfer function descriptions of a system is 
accomplished using specific toolbox commands.
This section contains some relatively simple examples of the control system toolbox functions. 
Exposition is kept to a minimum. For more information, the reader should check out the robust set 
of online interactive demos, tutorials, and case studies illustrating how the toolbox can be used to 
support modeling and simulation functions.
4.10.1  Transfer Function Models
Continuous- and discrete-time transfer functions are constructed using “tf” with proper arguments 
and stored as a named MATLAB object such as “sys.” For example, the transfer function
	
G s
s
s
s
s
s
1
4
3
25
10
1
2
2
5
4
1
( )
(
)(
)
=
+
+
+
+
+





	
(4.704)
is implemented by the following statements:
num = 25*cony ([10 1],[1 2])
den = [2 5 0 4 1]
sys_Gl = tf (num, den)
Note conv ([10 1],[1 2]) produces the numerator vector [10 21 2]. A more intuitive way of 
creating the same transfer function is
s = tf ('s')
sys_G1 = 25* (10*s^2+21*s+2)/(2*s^4+5*s^3+4*s+1)
A discrete-time system with sampling period T = 0.01 s and pulse (z-domain) transfer function
	
G z
z
z
z
z
2
2
2
5
3
2
10
4
( ) =
+
+
+
+
	
(4.705)
is created from either of the two sets of statements below:
num = [5 3 2]; den = [1 10 4]
sys_G2 = tf (num, den, 0.01)
z = tf('z',0.01)
sys_G2  = (5*z^2+3*z+2)/(z^2+10*z+2)
The poles and zeros of a continuous- or discrete-time system transfer function are obtained using 
the “pzmap (sys)” command where “sys” refers to the MATLAB description of the transfer 
function. A pole-zero map of the transfer function G1(s) in Equation 4.704 is obtained from the 
­command “pzmap (sys_G1)” and shown in Figure 4.87.
The numerical values of the poles and zeros shown in Figure 4.87 are returned in “P” and “Z” 
after issuing the command “[P, z] = pzmap (sys_G1).” The result is
	
P
i
i
=−
+
−
−
2 7418 0 2385
0 8475 0 2385
0 8475
0 2353
.
,
.
.
.
.
,
.
 
	
	
Z =
−
– .
,
.
2 0000
0 1000	

302
Simulation of Dynamic Systems with MATLAB® and Simulink®
4.10.2  State-Space Models
State-space models of continuous-time systems are described by matrices A, B, C, and D appearing 
in the state equations. The same holds for a discrete-time system, which also requires a sampling 
time T for a complete representation. State-space models for continuous-time systems are created 
using “sys = ss (A,B,C,D),” while discrete-time models in state space are generated by
"sys = ss (A,B,C,D,T)."
A continuous-time second-order system with damping ratio ζ = 0.5 and natural frequency 
ωn = 2 rad/s was approximated using trapezoidal integration with step size T = 0.025 s in Section 
4.7 resulting in discrete-time system state equations
	
x
Ax
Bu
k
k
k
+ =
+
1
	
(4.706)
	
y
Cx
Du
k
k
k
=
+
	
(4.707)
with A, B, C, and D given in Equations 4.516 through 4.518.
The resulting matrices A, B, C, and D and sampling time T appear in the M-file “Ch4_Tustin.m” 
statement “sys = ss (A, B, C, D, T)” to create a discrete-time system state-space model 
with numerical values
a =
xl
x2
xl
1.949
—0.9512
x2
1
0
b =
ul
xl
1
x2
0
c =
xl
x2
(Continued)
FIGURE 4.87  Pole-zero map for G1(s) in Equation 4.704.

303
Linear Systems Analysis
yl
0.002406
2.971e-005
d =
ul
yl
0.0006094
Sampling time: 0.025 discrete-time model.
The object “sys” can be referenced by other control system toolbox commands to investigate 
frequency response characteristics of the discrete-time system as well as dynamic response to 
­specific types of forcing functions. It is also instrumental in the process of converting a state-space 
model to a transfer function representation, the next subject of discussion.
4.10.3  State-Space/Transfer Function Conversion
The state equations for a submarine depth control system were developed in Section 2.8. The closed-
loop control system is third order with three outputs, θ (stern plane angle), v (depth rate), c (depth), 
and a single input r (commanded depth). The MATLAB file “Ch4_sub.m” below illustrates several 
commands for converting between state-space models of the system and the transfer function form.
% Ch4_sub.m
KC = 0.6; KI = 0.1;
tau = 10; Kthd = 20; Kth = 10;
a11 = − Kthd*KC/tau; a12 = (Kth − (Kthd/tau)); a13 = Kthd*KI/tau;
a21 = − KC/tau; a22 = −1/tau; a23 = KI/tau;
a31 = − 1; a32 = 0; a33 = 0;
b1 = Kthd*KC/tau; b2 = KC/tau; b3 = 1;
c11 = − KC; c12 = 0; c13 = KI;
c21 = − Kthd*KC/tau; c22 = Kth−(Kthd/tau); c23 = Kthd*KI/tau;
c31 = 1; c32 = 0; c33 = 0;
d1 = KC; d2 = Kthd*KC/tau; d3 = 0;
A1 = [a11 a12 a13; a21 a22 a23; a31 a32 a33];
B1 = [b1; b2; b3];
C1 = [c11 c12 c13; c21 c22 c23; c31 c32 c33];
D1 = [d1; d2; d3];
Sys_ss_l = ss(Al,B1,Cl,D1)%
creates state-space system object for (Al,Bl,Cl,D1)
Sys_tf = tf(sys_ss_1)%
converts state-space system object to transfer 
function system object
[numl,denl] = 
ss2tf(Al,Bl,Cl,D1)%
alternate method for converting state space 
(Al,Bl,Cl,D1) to transfer function
sys_ss_2 = ss(sys_tf)%
converts transfer function object to state-space 
object
[A3,B3,C3,D3] = 
tf2ss(numl,den1)%
converts transfer function to state-space control 
canonical form with matrices (A3,B3,C3,D3)
[num2,den2] = 
ss2tf(A3,B3,C3,D3)%
converts state-space (A3,B3,C3,D3) to transfer 
functions
Numerical values are assigned to matrices A1, B1, C1, and D1 using the baseline system parameter 
values from Section 2.8. The system matrices are
Al =
−1.2000
8.0000
0.2000
−0.0600
−0.1000
0.0100
−1.0000
0
0
(Continued )

304
Simulation of Dynamic Systems with MATLAB® and Simulink®
Bl =
1.2000
0.0600
1.0000
Cl =
−0.6000
0
0.1000
−1.2000
8.0000
0.2000
1.0000
0
0
Dl =
0.6000
1.2000
0
The statement “sys_ss_l = ss(Al,B1,C1,D1)” creates the object “sys_ss_1” associated 
with the continuous-time system matrices A1, B1, C1, and D1. The next statement “sys_tf”(sys_
ss_1)” creates the transfer function object “sys_tf” with embedded information about the three 
system transfer functions, one each from the command input to the three outputs. The transfer func­
tions are displayed as
Transfer function from input to output …
0.6 s^3 + 0.16 s^2 + 0.01 s − 1.506e-018
#1: ——————————
s^3 + 1.3 s^2 + 0.8 s + 0.1
1.2 s^3 + 0.8 s^2 + 0.1 s − 3.474e-017
#2: ——————————
s^3 + 1.3 s^2 + 0.8 s + 0.1
1.2 s^2 + 0.8 s + 0.1
#3: ——————————
s^3 + 1.3 s^2 + 0.8 s + 0.1
Note that the first two transfer functions are consistent with the control system simulation 
diagram (Figure 2.55), which shows direct paths from the input r to outputs θ and v. The numera­
tor of transfer function #3 is second order due to the presence of the integrator in the path from 
r to c.
An alternative approach to finding the same three transfer functions uses “[numl,denl] =  ss2
tf(Al,B1,C1,D1).” Output matrix “numl” (with three rows, one for each output) stores the coef­
ficients of the three numerator polynomials, and row vector “denl” contains the coefficients of the 
denominator, that is, characteristic polynomial. The result is
numl =
0.6000
0.1600
0.0100
0.0000
1.2000
0.8000
0.1000
0.0000
0
1.2000
0.8000
0.1000
denl =
1.0000
1.3000
0.8000
0.1000
Converting the transfer function of an SISO system to a state-space model is achieved using 
either “ss” or “tf2ss.” The command “sys_ss_2 = ss(sys_tf)” computes a state-space real­
ization of the transfer function object “sys_tf” displayed as
a = 
xl
x2
x3
x1
−1.3
−0.4
−0.1
x2
2
0
0
x3
0
0.5
0
(Continued )

305
Linear Systems Analysis
b = 
u1
x1
1
x2
0
x3
0
c = 
x1
x2
x3
y1
−0.62
−0.235
−0.06
y2
−0.76
−0.43
−0.12
y3
1.2
0.4
0.1
d = 
u1
y1
0.6
y2
1.2
y3
0
Referring to the above matrices as A2, B2, C2, and D2, it is not surprising that they differ from A1, 
B1, C1, and D1 since the state-space model representation of a continuous-time system is not unique.
An alternative method for creating a state-space model from a transfer function is to use 
­“[A3,B3,C3,D3] = tf2ss(numl,denl)” where “numl” and “denl” are the numerator and 
denominator arrays, respectively, created previously by the command “ss2tf.” This results in 
creation of output matrices A3, B3, C3, and D3 given below:
A3 = 
−1.3000
−0.8000
−0.1000
1.0000
0
0
0
1.0000
0
B3 = 
1
0
0
C3 = 
−0.6200
−0.4700
−0.0600
−0.7600
−0.8600
−0.1200
1.2000
0.8000
0.1000
D3 = 
0.6000
1.2000
0
State-space models created by “tf2ss” are in controller canonical form (Ogata 1998).
The last statement [num2,den2] = ss2tf(A3,B3,C3,D3) in “Ch4_sub.m” converts the state-
space model in controller canonical form back to the three transfer functions.
The state-space models for the submarine control system are summarized in Table 4.11. A good 
way of checking the results is to compute the eigenvalues of the coefficient matrices A1, A2, and 
A3 in the table. The MATLAB command “eig(A)” returns the same characteristic roots, namely, 
−0.5687 ± j0.5400 and −0.1626, for all three matrices.
4.10.4  System Interconnections
Block diagrams can be systematically reduced in complexity using control system toolbox 
­functions such as “parallel,” “series,” and “feedback.” Consider the block diagram shown 
in Figure 4.88.
	
G s
s
s
H s
s
c( )
,
( )
=
+
+






=
+
2 10
1
2
1
1
50
1 	
(4.708)

306
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
G s
s
G s
s
s
s
G s
s
G s
s
1
2
2
3
4
8
3
1
5
12
25
1
0 2
1
1
( )
,
( )
,
( )
.
,
( )
=
+
=
+
+
+
=
+
=
	
(4.709)
Using block diagram algebra, the transfer function Y(s)/R(s) can be found by executing the 
­statements below found in M-file “Ch4_block_diagram.m.”
1. s = tf('s');
2. Gc = 5*(10*s+1)/(2*s+1);
3. G1 = 8/(3*s+1);
4. G2 = (s+5)/(s^2+12*s+25);
5. G3 = 1/(0.2*s+1);
6. G4 = 1/s;
7. H = 1/(50*s+1);
8. G1G2 = series(G1,G2);
9. G1G2_plus_G3 = parallel(G1G2,G3);
10. TF_inner_loop = feedback(G1G2_plus_G3,H)
11. G = series(Gc,TF_inner_loop);
12. G_forward_path_1 = series(G,G4);
13. TF_outer_loop_1 = feedback(G_forward_path_1,1)
	
The inner loop transfer function “TF_inner_loop” and outer loop transfer function 
TF_outer_loop_1 are
FIGURE 4.88  Block diagram of a continuous-time system.
TABLE 4.11
Three Different State-Space Models of Submarine Depth Control 
System
i
Ai
Bi
Ci
Di
1
−
−
−
−






1 2
8
0 2
0 06
0 1
0 01
1
0
0
.
.
.
.
.
1 2
0 06
1
.
.






−
−






0 6
0
0 1
1 2
8
0 2
1
0
0
.
.
.
.
0 6
1 2
0
.
.






2
−
−
−






1 3
0 4
0 1
2
0
0
0
0 5
0
.
.
.
.
1
0
0






−
−
−
−
−
−






0 62
0 235
0 06
0 76
0 43
0 12
1 2
0 4
0 1
.
.
.
.
.
.
.
.
.
0 6
1 2
0
.
.






3
−
−
−






1 3
0 8
0 1
1
0
0
0
1
0
.
.
.
1
0
0






−
−
−
−
−
−






0 62
0 47
0 06
0 76
0 86
0 12
1 2
0 80
0 1
.
.
.
.
.
.
.
.
.
0 6
1 2
0
.
.







307
Linear Systems Analysis
	
Transfer function:
	
150 s^4 + 1933 s^3 + 5189 s^2 + 3353 s + 65
	
————————————————————————————————————
	
30 s^5 + 520.6 s^4 + 2733 s^3 + 4693 s^2 + 1445 s + 90
	
Transfer function:
	
7500 s^5 + 97400 s^4 + 269095 s^3 + 193593 s^2 + 20015 s + 325
	
————————————————————————————————————
	
60 s^7 + 1071 s^6 + 1.349e004 s^5 + 1.095e005 s^4 + 276678 s^3 + 195218 s^2 + 
20105 s + 325
	
Other transfer functions may be obtained by proper use of the three system interconnection 
commands. For example, X(s)/R(s) in Figure 4.88 can be found by deleting statement 11 
and changing statements 12 and 13 to read
14. G_forward_path_2 = series(Gc,TF_inner_loop);
15. TF_outer_loop_2 = feedback(G_forward_path_2,G4)
	
An alternate implementation of the transfer function X(s)/R(s) is possible by expressing it 
in terms of Y(s)/R(s). Starting with
	
Y s
G s X s
( )
( )
( )
=
4
	
(4.710)
	
⇒
=
Y s
R s
G s X s
R s
( )
( )
( )
( )
( )
4
	
(4.711)
	
⇒
=
X s
R s
G s
Y s
R s
( )
( )
( )
( )
( )
1
4
	
(4.712)
	
The transfer function X(s)/R(s) can now be obtained by statement 14 below:
16. TF_outer_loop_2 = series(l/G4,TF_outer_loop_1)
	
The functions “parallel,” “series,” and “feedback” to reduce a system with for­
ward and feedback connections apply to discrete-time system block diagrams as well.
4.10.5  System Response
The impulse and step response of continuous- and discrete-time LTI systems can be generated in 
either graphical form or stored in an array of data points. To illustrate, suppose we are interested in 
the step response of the submarine depth control system considered earlier. Unit step responses of 
the stern plane angle θ, depth rate v, and depth c are obtained by appending “step(sys_ss_1)” or 
“step(sys_tf)” at the end of M-file “Ch4_sub.m.” The graphs are shown in Figure 4.89.
Step and impulse responses of the system in Figure 4.88 with y(t) as output are obtained by issu­
ing the control system toolbox commands “step(TF_outer_loop_1)” and “impulse(TF_
outer_loop_1)” in M-file “Ch4_block_diagram.m.” The step and impulse responses are shown 
in Figure 4.90.
The response of an LTI system to an arbitrary input is obtained using “LSIM(SYS,U,T)” where 
“SYS” represents a MATLAB system object. “U” and “T” are arrays used to define the input (s) 
values and corresponding regularly spaced values of time, respectively.
The case study in Section 3.7 involved the ascent of a diver subject to a vertical cable force fc. A 
state-space model was formulated and repeated as follows:
	



x
x
x
W
K
K
x
x
1
2
3
1
2
0
1
0
0
0
0






=
−
−






µ
γ
g
x
W
fn
3
0
0






+






g [
]
	
(4.713)

308
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
y
y
x
x
x
1
2
1
2
3
1
0
0
0
1






=
−












γ
	
(4.714)
The input fn = W − γV − fc is the net force (weight–buoyant force–cable force) acting on the 
diver. The output yi is depth below the surface, and y2 is the difference between the internal body 
pressure of the diver and the local (same depth as diver) underwater pressure. The states x1, x2, and 
0
–5
0
0
0.5
1
1.5
5
10
Amplitude
Amplitude
0.25
0.5
0.75
1
1.25
1.5
1.75
2
0
0.25
0.5
0.75
1
1.25
1.5
1.75
2
Time (seconds)
Time (seconds)
Impulse response
Step response
FIGURE 4.90  (a) Step and (b) impulse response of continuous-time system in Figure 4.88.
0
0
0
0
1
0.5
1
To: out(3)
To: out(2)
To: out(1)
Amplitude
1.5
–0.5
0.5
Step response
–1
1
2
5
10
15
20
25
Time (seconds)
FIGURE 4.89  Unit-step response in θ, v, and c.

309
Linear Systems Analysis
x3 are depth, velocity, and internal pressure of the diver, respectively. The system parameters are µ, 
W, and K; and g and γ are physical constants.
Suppose the diver’s ascent from an initial equilibrium state x1,e = 500 ft, x2,e = 0 ft/s, and 
x3,e = γx1,e − 62.4 lb/ft3 × 500 ft = 31,200 lb/ft2 (216.7 psi) is required. A cable force
	
f t
W
V
t
F
c( )
(
)
(
),
/
=
−
+
−
≥
−
γ
1
0
e
t T
	
(4.715)
where F and τ are design parameters is under investigation. The cable force fc(t) and the result­
ing net force fn(t) are plotted in Figure 4.91 for the case where F = 25 lb and τ = 40 s (see M-file 
“Ch4_diver.m.”)
The M-file “Ch4_diver.m” includes a statement to create the state-space object “sys” from matri­
ces A, B, C, and D in Equations 4.713 and 4.714. The time vector “t” is defined and input vector “fn” 
is calculated from the equation fn, = (W − γV) − fc. The statement “y = LSIM(sys,fn,t,x0),” 
where “x0” is the initial state vector, returns data points for outputs y1 and y2 in the array “y.” 
Graphs of y1(t) and y2(t) are shown in Figure 4.92.
4.10.6  Continuous-/Discrete-Time System Conversion
We are well aware of the need to approximate the dynamics of continuous-time systems using 
discrete-time systems. Replacing the differential equations of LTI continuous-time system models 
with difference equations is an important aspect of continuous system simulation. Section 4.4.7 
introduced a technique for accomplishing the task based on substitution of a suitable function of z 
for the Laplace variable s in the continuous-time system transfer function. Examples were presented 
illustrating how to obtain the z-domain transfer function of the discrete-time system based on the 
use of explicit Euler integration and trapezoidal integration, also known as Tustin’s method.
Additional transformations s = f(z) for other methods are discussed in a later chapter. For all but 
the simplest continuous-time systems, the algebraic manipulation required to obtain the z-domain 
or pulse transfer function in a suitable form is unwieldy at best. The MATLAB control system 
toolbox “c2d” function expedites the process of converting continuous-time models to discrete-time 
approximations. The required arguments are a MATLAB system object for the continuous-time 
0
–20
–10
fn (lb)
fc (lb)
10
110
120
130
140
0
20
40
60
80
100
t (s)
120
140
160
0
20
40
60
80
100
120
Net force vs time
Cable force vs time
(a)
(b)
140
–F = 25 lb, τ = 40 s
Effective weight = W – γV = 112.8 lb
160
FIGURE 4.91  (a) Cable force and (b) net force on diver vs. time.

310
Simulation of Dynamic Systems with MATLAB® and Simulink®
system, the sample time (integration step size), and an optional string to select one of the five 
­available approximation methods listed below:
'zoh' Zero-order hold on the inputs.
'foh' Linear interpolation of inputs (triangle apex.).
'imp' Impulse-invariant discretization.
'tustin' Bilinear (Tustin) approximation.
'prewarp' Tustin approximation with frequency prewarping. The critical 
frequency Wc (rad/sec) is specified as 4th input by SYSD = C2D (SYSC, Ts, 
'prewarp', Wc)
'matched' Matched pole-zero method (for SISO systems only).
To illustrate, consider the problem of approximating a second-order system with natural 
­frequency ωn = 2 rad/s, ζ = 0.5, and DC gain of unity. Example 4.27 presented solutions based on 
the use of explicit Euler integration and trapezoidal integration (Tustin’s method), also known as the 
bilinear transform method. The following statements are from the M-file “Ch4_Tustin.m,” which 
creates the continuous-time transfer function “H_s” and generates the discrete-time system transfer 
function “H_z” using Tustin’s method.
T = 0.025; wn = 2; zeta = 0.5; K = 1;
H_s = tf(K*wn^2, [12*zeta*wnwn^2])
H_z = c2d(H_s,T,'tustin')
The continuous- and discrete-time transfer functions appear in the MATLAB Command Window as
Transfer function:
4
-------------------
s^2+2 s+4
Transfer function
0.0006094 z^2+0.001219 z+0.0006094
---------------------------------------
z^2 − 1.949 z+0.9512
Sampling time: 0.025
0
2.5
0
5
y1(t), ft
y2(t), psi
10
100
200
400
300
500
7.5
20
40
60
80
100
t (s)
120
140
160
0
0
20
40
60
80
100
120
Differential pressure (internal diver pressure minus water pressure) vs time
Depth of diver vs time
140
160
FIGURE 4.92  Outputs y1 and y2 from diver state-space model with input fn.

311
Linear Systems Analysis
The pulse transfer function approximation of the continuous-time second-order system using 
Tustin’s method is (see Equation 4.503)
	
H z
K
T
z
z
T
T
z
T
z
n
n
n
n
( )
(
) (
)
[ (
)
(
) ]
[(
)
]
(
=
+
+
+
+
+
−
+
ω
ζω
ω
ω
2
2
2
2
2
2
1
4 1
2
4
4 1−
+
ζω
ω
n
n
T
T
)
(
)2
	
(4.716)
Substituting the numerical values ωn = 2, ζ = 0.5, K = 1, and T = 0.025 for the system param­
eters gives
	
H z
z
z
z
z
( )
.
(
)
.
.
.
=
+
+
−
+
0 0025
2
1
4 1025
7 9950
3 9025
2
2
	
(4.717)
	
=
+
+
−
+
0 00060938
0 0012187
0 00060938
1 9488
0 9512
2
2
.
.
.
.
.
z
z
z
z
	
(4.718)
in agreement with the result from using the “c2d” function.
There is also a function called “d2c” for converting a discrete-time transfer function previously 
created as an object “sysd” to an equivalent continuous-time transfer function object “sysc.” The 
syntax is “SYSC = D2C(SYSD,METHOD)” where the second argument is a string signifying the 
method of approximation.
4.10.7  Frequency Response
The magnitude and gain of a system transfer function at a particular frequency ω were evalu­
ated in earlier sections by substituting jω for s in continuous-time transfer functions and ejωT for 
z in discrete-time transfer functions. Choosing a range of values for ω led to plots of magnitude, 
gain = 20(log[magnitude]) and phase vs. frequency.
The control system toolbox provides an easier way of obtaining the frequency response char­
acteristics of both continuous- and discrete-time system models. Assuming an LTI model object 
called “sys” has been created using “tf” or possibly “ss,” a Bode plot is drawn by execution of the 
command “BODE(sys).” If “sys” represents a discrete-time system, the call is modified to include 
an additional argument for the sampling time T, namely, “BODE(sys,T).”
Optional arguments permit specifying multiple systems with different line plot characteristics and a 
user selectable range of frequencies. To illustrate, consider the two blocks in series shown in Figure 4.93.
The first component is a low-pass filter with transfer function
	
G s
X s
U s
s
n
1
1
1
1
1
( )
( )
( )
(
)
=
=
+
τ
	
(4.719)
and break frequency ω1 = 1/τ1. The second component transfer function
	
G s
X s
s
s
s
n
2
2
1
2
1
( )
( )
X ( )
=
=
+






τ
	
(4.720)
FIGURE 4.93  Low- and high-pass filters in series.

312
Simulation of Dynamic Systems with MATLAB® and Simulink®
represents a high-pass filter with break frequency ω2 = 1/τ2. The frequency response characteristics 
of the series combination with transfer function
	
G
s
s
s
s
n
n
12
1
2
1
1
1
( )
)
=
+
+






(τ
τ
	
(4.721)
	
=
+
+






s
s
s
n
(τ
τ
1
2
1
1
)(
)
	
(4.722)
are obtained using the “BODE” function for a model object “sys” corresponding to Equation 4.722. 
The following M-file statements generate plots of the gain (magnitude in db) for the low-pass fil­
ter (τ1 = 1 s), high-pass filter (τ2 = 0.01 s), and the band-pass filter with pass band (ω1 ≤ ω ≤ ω2) 
­resulting from the combination of the two filters in series. The plots are shown in Figure 4.94. 
The exponent n was chosen to be three.
tau1 = 1; tau2 = 0.01; n = 3;
sys1 = tf(1,[tau1 1])
sys2 = tf([1 0],[tau2 1])
for i = 1:n-1
sysG1 = SERIES(sys1,sys1)
sysG2 = SERIES(sys2,sys2)
end
sysG12 = SERIES(sysG1,sysG2)
BODEMAG(sysG1,'b',sysG2, 'r',sysG12, 'k')
A discrete-time approximation of the continuous-time band-pass filter using Tustin’s method is 
obtained by adding the statements
T = pi/1e4; % sample time to make wN = 10^4 rad/sec
sysG12_d = C2D(sysG12,T, 'tustin');% converts continuous-time filter % to 
discrete-time filter using Tustin's method
10–2
–150
–100
–50
50
|G1(jω)|
|G12(jω)|
|G2(jω)|
100
Bode diagram
Magnitude (dB)
0
10–1
100
101
102
103
Frequency (rad/s)
104
FIGURE 4.94  Gain of individual and combined blocks in Figure 4.93.

313
Linear Systems Analysis
BODEMAG(sysG12_d, 'r') % plot gain of discrete-time filter
BODEMAG(sysG12, 'b') % plot gain of continuous-time filter
The sample time should be at least an order of magnitude less than τ2 = 0.01 s and possibly 
smaller depending on the frequency content of the continuous-time input. A value of T = π/104 s was 
chosen to make the Nyquist frequency ωN = π/T = 104 s, the same as the upper limit in Figure 4.94. 
Selecting appropriate values of T for discrete-time models is deferred until Chapter 8.
A comparison of the continuous-time and discrete-time band-pass filter gains for 
(10−2 ≤ ω ≤ ωN = 104) is shown in Figure 4.95. The two gains are nearly identical for ω up to 
103 rad/s. Frequency response includes phase characteristics as well as gain. The phase properties 
of the two filters are left for an exercise problem.
4.10.8  Root Locus
For simple feedback control systems with a controller gain KC, the closed-loop system poles depend on 
the value of KC. A root-locus plot displays the location of all the poles as the design parameter KC var­
ies from zero to infinity. The starting point is creation of the open-loop system model “sys” followed 
by a call to the control system toolbox function “rlocus(sys).” The following example illustrates 
the use of “BODE” and “rlocus” to determine the limits of stability for a simple control system.
EXAMPLE 4.36
An overdamped second-order system is subject to proportional control as shown in Figure 4.96.
A sensor is present in the feedback loop.
Baseline values of the system and sensor parameters are
	
K
K
p
T
T
=
=
=
=
=
15
3
15
0 1
0 25
1
2
,
,
,
. ,
.
τ
τ
s
s
s
τ
	
	
a.	Create a model “sys” for the open-loop system with KC = 1.
	
b.	Use the control system toolbox to draw a Bode plot of the open-loop system.
|G12(jω)|
|G12(e jωT)|
Bode diagram
10–2
10–1
100
101
102
103
Frequency (rad/s)
104
–120
–100
–60
–80
–40
–20
0
Magnitude (dB)
FIGURE 4.95  Gain of continuous- and discrete-time band-pass filters.

314
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	Determine the stability margins of the control system and the critical gain Kcr.
	
d.	Find ω0, the frequency of oscillations for the marginally stable system.
	
e.	Check the results for Kcr using a root-locus plot and the characteristic equation.
	
f.	Plot step responses of the closed-loop system for KC = 0.25Kcr, 0.5Kcr, 0.75Kcr, Kcr.
	
a.	The model object “sys” is created in “Ch4_Ex4_36.m” with the statements
	
KP = 15; tau1 = 3; tau2 = 15; KT = 0.5; tauT = 0.25; KC = 1;
	
denG = conv([tau1 1],[tau2 1])
	
G = tf(KP,denG); % process transfer function
	
denH =[tauT 1];
	
H = tf(KT,denH); %sensor transfer function
	
sys = KC*SERIES(G,H)
	
b.	The command “BODE(sys)” results in the Bode plot in Figure 4.97.
	
c.	The stability margins were defined in Section 4.4.5. The gain margin is the open-loop 
system gain at the frequency where the phase of the open-loop system equals −180°. 
The phase margin is the difference between the open-loop phase and −180° at the 
frequency where the gain is 0 db. Figure 4.97 shows the gain margin is 20.5 db and the 
phase margin is 50.5°. Increasing the controller gain KC by the equivalent of 20.5 db 
moves the gain plot in a vertical direction to a point where the system is marginally 
stable, that is, the new gain margin is 0 db. Solving for Kcr in magnitude,
FIGURE 4.97  Bode plot for control system in Figure 4.96.
FIGURE 4.96  Feedback control system with proportional control.

315
Linear Systems Analysis
	
20
20 5
10
10 5925
20 5 20
logK
K
cr
cr
=
⇒
=
=
.
.
. /
	
	
d.	The 0 db gain margin would occur at the same frequency as the 20.5 db gain margin 
in Figure 4.97, that is, 1.27 rad/s, which is also ω0, the frequency of oscillations of the 
marginally stable system.
	
e.	The root-locus plot is shown in Figure 4.98. The approximate value of Kcr is 10.6, that is, 
the value of KC where the locus intersects the imaginary axis. Note that the imaginary 
part of the complex pole is ω0 = 1.27 rad/s, in agreement with the crossover frequency 
shown in Figure 4.97.
	
	
As a check on the value of Kcr from part (c), the statement
	
[R,K]= rlocus(sys,Kcr)
	
returns the three closed-loop poles in array R = [−4.4006, 0.003 ± j1.2747]. The real 
part of the complex poles should be zero when KC = Kcr; however, 0.003 results because 
of the round-off in the gain margin value of 20.5 shown in Figure 4.97.
	
	
The exact values of Kcr and ω0 can be obtained from the characteristic equation
	
K K K
s
s
C
P
T
T
+
+
+
+
=
(
)(
)(
)
τ
τ
τ
1
2
1
1
1
0 	
(4.723)
	
with KC = Kcr and s = jω0. Setting the real and imaginary components of the resulting 
equation to zero leads to the following two equations:
	
ω
τ
τ
τ
τ τ τ
0
2
1
2
1 2
=
+
+
T
T
	
(4.724)
	
K
K K
cr
T
P
T
=
+
+
−
[τ τ
τ τ
τ ω
1 1
1
2
0
2
1
(
)
	
(4.725)
	
	
The solution is (see “Ch4_Ex4_36.m”) Kr = 10 5733
.
, ω0 = 1.273665 rad/s.
–6
0.7
0.7
0.82
0.91
0.975
0.975
0.91
0.82
0.56
0.42
0.28
0.14
6
0.56
0.42
0.28
0.14
6
5
4
3
2
System: sys
Gain: 10.6
Pole: 0.000902 +1.28i
Damping: –0.000707
Overshoot (%): 100
Frequency (rad/s): 1.28
5
4
3
2
1
–6
–4
–2
0
Imaginary axis (seconds–1)
2
4
6
Root locus
–5
–4
–3
–2
–1
0
1
Real axis (seconds–1)
2
3
4
FIGURE 4.98  Root-locus plot for control system in Figure 4.96.

316
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f.	Step responses of the closed-loop system with KC = 0.25Kcr, 0.5Kcr, 0.75Kcr, Kcr are 
­generated by the statements
	
for i = 1:4
	
subplot(2,2,i)
	
sys_cl = FEEDBACK(0.25*i*KCR*G,H); % closed-loop system
	
step(sys_cl) % step response
	
end
	
where “KCR” is the exact value for Kcr. The step responses, shown in Figure 4.99, exhibit 
less damping as the controller gain increases. The step response of the marginally stable 
system (KC = Kcr) contains an oscillatory component at the frequency ω0 = 1.27 rad/s.
EXERCISES
Use the control system toolbox whenever possible to do the following problems:
	4.78	 The block diagram of a typical feedback control system was presented in Figure 4.31 and 
redrawn Figure E4.78:
	
	
Use the transfer functions given in Section 4.4.5 and the baseline parameter values unless 
stated otherwise.
0
0
1
2
3
4
0
1
2
3
4
Amplitude
Amplitude
0
1
2
3
4
Amplitude
0
1
2
3
4
Amplitude
20
40
60
80
Time (seconds)
Time (seconds)
Time (seconds)
0
0
0
5
10
10
15
Step response: KC = 0.25 Kcr
Step response: KC = 0.5 Kcr
Step response: KC = 0.75 Kcr
Step response: KC = Kcr
20
20
30
40
40
30
25
5
10
15
20
Time (seconds)
FIGURE 4.99  Step responses of control system in Figure 4.96.
FIGURE E4.78

317
Linear Systems Analysis
	
a.	 Find the magnitude and phase of each component GC(s), GA(s), GP(s), and GT(s) at the 
open-loop system phase crossover frequency ω0 = 0.9936 rad/s. Compare the results to 
the magnitude and phase of the open-loop transfer function GOL(s) = GC(s)GA(s)GP(s)GT(s) 
at the same frequency.
	
b.	 Input to the open-loop system (feedback path broken at summer) is r(t) = sin ω0t. Generate 
graphs of e(t) = r(t), along with uC(t), uA(t), y(t), and uT(t). Comment on the stability of the 
closed-loop system.
	
Hint: Recall the closed-loop system is unstable if the magnitude of uT(t) is greater than or 
equal to 1 at the phase crossover frequency ω0, that is, the frequency where uT(t) lags e(t) 
by 180°.
	
c.	 Graph the step response of the closed-loop system.
	
d.	 Repeat parts (a), (b), and (c) using KC = (KC)max = 2.62.
	4.79	 The block diagram of a heading control system for a ship, presented in Section 4.4.4, is shown 
in Figure E4.79. The baseline parameter values are
	
KC = 10 V/° (heading)
	
KP = 10° (rudder)/volt, τP = 0.2 s,
	
KS = 0.5° (heading)/s/° (rudder), τS = 7.5 s
	
a.	 Find the closed-loop transfer functions
	
E s
s
U s
s
R s
s
s
s
( )
( ) ,
( )
( ) ,
( )
( ) ,
( )
( )
θ
θ
θ
θ
θ
com
com
com
com
and
	
	
b.	 For a step input θcom = 5°, t ≥ 0 graph e(t), u(t), r(t), and θ(t).
	4.80	 A system of two interacting tanks is shown in Figure E4.80a:
	
	
The state equations are given as
	
d
d
d
d
H
t
H
t
A R
A R
A R
A R
A R
1
2
1
12
1
12
2
12
2
12
2
12
1
1
1
1
1





=
−
−
−
























H
H
A
A
F
F
1
2
1
2
1
2
1
0
0
1

	
FIGURE E4.79
FIGURE E4.80A

318
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
H
H
H
A
A
H
H
1
2
3
1
2
1
2
1
0
0
1






=












	
	
The parameter values are
	
A
A
R
R
1
2
2
2
12
3
2
3
25
100
0 1
0 4
=
=
=
=
ft
ft
ft/ft /min
ft/ft /min
,
,
.
,
.
	
	
a.	 Find the transfer functions VT (s)/F1(s) and VT (s)/F2(s).
	
b.	 With both tanks initially empty, find and graph H1(t) and H2(t) in response to
	
i.	 F1(t) = 12 ft3/min, F2(t) = 0 ft3/min
	
ii.	 F1(t) = 0 ft3/min, F2(t) = 12 ft3/min
	
iii.	 F1(t) = 12 ft3/min, F2(t) = 12 ft3/min
	
iv.	 F1(t) in Figure E4.80b
	4.81	 The transfer function for the circuit in Figure E4.81 is (see Equation 4.183)
	
V s
E s
R C C s
RC s
R C C s
R C
C s
i
0
2
1
2
2
2
2
1
2
2
1
2
2
1
2
1
( )
( )
(
)
=
+
+
+
+
+ 	
	
a.	 Convert the system transfer function to a state variable model with output v0.
	
b.	 Use the state variable model to find and plot the impulse response.
	
c.	 Find the unit step response of the circuit by inverse Laplace transforming V0(s).
	
d.	 Repeat part (c) using the control system toolbox to find the unit step response. Compare 
the results from parts (c) and (d).
	
e.	 Approximate the continuous-time transfer function with a discrete-time z-domain trans­
fer function based on Tustin’s method. Choose an appropriate integration step size.
	
f.	 Find and plot the unit step response of the discrete-time system. Compare the step 
responses of the continuous-time and discrete-time systems.
FIGURE E4.80B
FIGURE E4.81

319
Linear Systems Analysis
	4.82	 Use “BODE” instead of “BODEMAG” to plot the magnitude and phase plots for the filters 
with transfer functions in Equations 4.719 through 4.721.
	4.83	 Compare the phase characteristics of the continuous- and discrete-time band-pass filters 
introduced in this section.
	4.84	 A simple control system block diagram is shown in Figure E4.84:
	
a.	 Find the closed-loop transfer function of the system using block diagram reduction.
	
b.	 Check your answer to part (a) using the control system toolbox.
	
c.	 Draw a simulation diagram of the system.
	
d.	 Represent the system in state variable form based on your simulation diagram.
	
e.	 Use the control system toolbox to find a state variable model for the system.
	
f.	 Compare the eigenvalues (characteristic poles) of the coefficient matrix A in parts (d) and (e).
	
g.	 Use “bode” to plot the frequency response of the open-loop system transfer function. Find 
the gain and phase margins of the system.
	
h.	 Compute the maximum gain (KC)crit which makes the system marginally stable. Redraw 
the Bode plot for KC = (KC)crit.
	
i.	 Check your answer to part (h) using a root-locus plot and identifying the value of gain KC 
where the locus is on the Imaginary axis.
	4.85	 A continuous-time system is modeled by the differential equation
	
d
d
d
d
d
d
3
3
2
3
5
33
29
y
t
y
t
y
t
y
u
+
+
+
=
	
	
a.	 Find the transfer function H(s) = Y(s)/U(s) of the system.
	
b.	 Create a model object “sys” to represent H(s).
	
c.	 Use the control system toolbox to plot the impulse and step response of the system.
	
d.	 Approximate the continuous-time transfer function H(s) with a discrete-time z-domain 
transfer function H(z) = Y(z)1U(z) using Tustin’s method with appropriate sample time T.
	
e.	 Find the difference equation for the discrete-time system approximation.
	
f.	 Write a MATLAB M-file to find and plot the step response of the discrete-time system.
	
g.	 Use the control system toolbox to plot the step response of the discrete-time system, and 
compare the result with your answer in part (f).
4.11  CASE STUDY: LONGITUDINAL CONTROL OF AN AIRCRAFT
The equations of motion for an aircraft are derived using a moving coordinate system fixed to the 
aircraft as shown in Figure 4.100. The x–y–z axes are referred to as body axes. The x-axis is aligned 
with the longitudinal axis of the airplane. The equations are based on Newton’s laws of motion for 
a rigid body in translation and rotation. The result is a system of six coupled nonlinear differential 
equations. Three of the six equations express accelerations 
u v w
, ,
 in terms of body axis velocities 
u, v, w, angular velocities p, q, r, and external, aerodynamic, and gravitational forces acting on the 
plane. The remaining three equations relate the angular accelerations 
p q r
, ,  to p, q, r and moments 
produced by the external and aerodynamic forces about the plane’s center of mass.
FIGURE E4.84

320
Simulation of Dynamic Systems with MATLAB® and Simulink®
The position and orientation of the airplane are referenced to an inertial (earth-fixed) coor­
dinate system x′–y′–z′ also shown in Figure 4.100. The horizontal x′-axis is in the vertical plane 
containing the initial velocity vector, and the plane’s center of mass is located at the origin of the 
x′–y′–z′ system at t = 0. The plane’s attitude is fixed by three rotations of the x–y–z axes starting 
from an orientation initially aligned with the x′–y′–z′ axes of the inertial coordinate system. The 
angular rotations ψ, θ, and φ are called Euler angles and denote the roll, pitch, and yaw of the plane, 
respectively.
Solution to the flight dynamics equations yields u, v, w in the x–y–z body axis coordinate system. 
The velocity vector v is converted from body axis components u, v, w to inertial components 

′
′ ′
x y z
,
,
 
by a transformation matrix Ce
b (Etkin 1982),
	



′
′
′






=






x
y
z
C
u
v
w
e
b
	
(4.726)
	
Ce
b =
−
+
cos
sin
cos
θ
ψ
φ
θ
ψ
φ
ψ
φ
θ
ψ
φ
ψ
cos
sin cos
cos
sin
sin cos
 
 sin
sin
cos sin
sin
cos
cos
cos
si
θ
ψ
φ
θ
ψ
φ
ψ
φ
θ
ψ
φ
ψ
sin sin
cos
sin sin
 
 sin
+
−
−n
sin
cos
θ
φ
θ
φ
θ
cos
cos





	
(4.727)
The position of the plane’s center of mass in inertial coordinates x′, y′, z′ is obtained by integra­
tion of the respective velocities in Equation 4.726.
Solving the equations of motion also yields the angular velocities p, q, r, which are transformed 
into, 
ψ θ φ
, ,  by
	



ψ
θ
φ
θ
φ
θ
φ
φ
φ






=
−
0
0
1
sin
sec
cos
sec
cos
sin
sin
tan
φ
θ
φ
θ
cos
tan












p
q
r
	
(4.728)
FIGURE 4.100  Body axis coordinates (x, y, z) and Euler angles (ψ, θ, φ).

321
Linear Systems Analysis
The Euler angles ψ, θ, and φ are obtained by integration of the respective velocities in 
Equation 4.728.
Solution of the nonlinear flight dynamics equations is complicated by the dependency of the 
aerodynamic forces and moments on the variable flight conditions, for example, altitude, cruising 
speed, weight, angle of attack, side slip, and control surface positions. A simpler approach is based 
on a linearized model that describes the aircraft’s motion provided the excursions in flight from a 
known steady state are small. The subject of linearization is treated in some detail in Chapter 7.
When the conditions for linearization of the flight equations are satisfied, the linearized model 
can be decoupled into two sets of equations. One set describes the longitudinal dynamics of the 
aircraft, and the remaining equations apply to the lateral dynamics. The longitudinal dynamics 
involve changes in u and w, the plane’s velocity in the x- and z-directions, and the pitch rate q about 
the y-axis. Lateral dynamics involve changes in side velocity v and the yaw and roll rates r and p 
about the z- and x-axes, respectively.
Figure 4.100 shows the velocity vector v aligned differently from the x-axis. The projection of v 
in the x–z plane is v, shown in Figure 4.101. The angle between vxz and the x-axis (longitudinal axis 
of plane) is called the angle of attack. Note that when the lateral dynamics of the plane are zero, the 
flight path is confined to the x–z plane, v = vxz, and the instantaneous direction of flight is given by 
γ in Figure 4.101, the angle between the velocity vector and the horizontal direction. The thrust (δT) 
from the engine, the aerodynamic forces, lift (L) and drag (D), and the gravitational force (W) are 
also shown in Figure 4.101.
The primary control surfaces for controlling the aircraft’s position and attitude are the elevators, 
ailerons, and rudder. The longitudinal dynamics respond to changes in elevator deflection δe and 
thrust δT. Elevator deflection and thrust result from changes to the yoke and throttle by the pilot (or 
autopilot). The rudder and ailerons are used primarily to control the lateral response for banking 
and turning maneuvers.
Our interest is solely in the longitudinal dynamics, specifically pitch and altitude response of 
the aircraft to changes in elevator deflection when the plane is flying at a constant cruising speed 
in horizontal flight under steady-state conditions. From Figure 4.101, for the plane to be in level 
flight, the velocity vector v must be horizontal, the flight angle γ = 0, and the pitch is equal to 
the angle of attack. The plane is pitched slightly in order for the wings to develop sufficient lift 
to overcome gravity. The steady-state conditions are shown in Figure 4.102 with v0 (horizon­
tal cruising speed), u (longitudinal speed), w (speed in z-direction), θ (pitch), and α (angle of 
attack). The elevator input and engine thrust necessary to maintain these conditions are δe  and 
δT, respectively.
The deviations in u, α, θ, w, and q from their steady-state operating levels are
	
∆
∆
∆
∆
∆
u
u
u
w
w
w
q
q
q
w
q
=
=
=
=
−
= −
=
−
=
–
–
,
,
,
,
,
α
α
θ
θ
α
θ
	
(4.729)
FIGURE 4.101  Illustration of angle of attack (α) and forces influencing flight dynamics.

322
Simulation of Dynamic Systems with MATLAB® and Simulink®
Since we are considering only changes in elevator deflection,
	
∆
∆
δ
δ
δ
δ
δ
δ
e
e
e
T
T
T
=
−
=
−
=
,
0 	
(4.730)
The state vector Δx in a linearized model of the longitudinal dynamics can be chosen as either 
[Δu Δw Δq Δθ]T or [Δu Δα Δq Δθ]T. The relationship between u, w, and α is (see Figure 4.101)
	
tan
=
α
w
u 	
(4.731)
For small angles of attack, tan α = sin α/cos α ≈ α. Replacing tan α in Equation 4.731 with α 
and solving for w give
	
w
u
= α 	
(4.732)
Solving for u, α, and w in Equation 4.729 and substituting the results into Equation 4.732,
	
w
w
u
u
u
u
u
u w
+
=( +
+
=
+
+
+
∆
∆
∆
∆
∆
∆∆
)(
)
α
α
α
α
α
	
(4.733)
Recognizing that w
u
= α and ignoring the high-order term ΔuΔw lead to
	
∆
∆
∆
w
u
u
=
+
α
α
	
(4.734)
Suppose the linearized model of an aircraft cruising in level flight under steady-state conditions 
with v0 = 500 ft/s and α
θ
=
= 0 05
.
rad (2.86°) is
	
d
dt
u
q
∆
∆
∆
∆






=
−
−
−
−
α
θ
0 04
11 59
0
32 2
0 00073
0 6
.
.
.
.
. 5
1
0
0 000048
0 49
0 58
0
0
0
1
0
.
.
.
−
−






∆
∆
∆
∆



u
q
α
θ




+ −









0
0 1
0
0
0 014
0
0
0
.
.
∆
∆
δ
δ
e
T



	
(4.735)
where
Δu has units of ft/s
Δα, Δθ are in rad
Δq is in rad/s
Δδe is in degree of elevator deflection
ΔδT is in lb of thrust
Choosing the output Δy = Δx = [Δu Δα Δq Δθ]T leads to the system of state equations 
∆
∆
∆
x
A
x
B
u
=
+
, ∆
∆
∆
y
D
u
C
x
=
+
 with A and B the matrices in Equation 4.735, C equal to 
the 4 × 4 identity matrix and D is a 4 × 2 matrix of zeros. Note that Δu = [Δδe ΔδT]T is the input 
vector, not to be confused with Δu, the first component of the state vector.
FIGURE 4.102  Initial steady-state conditions of aircraft.

323
Linear Systems Analysis
The linearized equations in state variable form can be converted to a transfer function matrix 
relating the four outputs Δu(s), Δα(s), q(s), and Δθ(s) to the two inputs Δδe(s) and ΔδT(s). The ­transfer 
function matrix can be found using Equation 4.231, repeated again for convenience in Equation 4.736.
	
G s
u s
s
u s
s
s
s
s
s
q s
s
e
T
e
T
e
( )
( )
( )
( )
( )
( )
( )
( )
( )
( )
(
=
∆
∆
∆
∆
∆
∆
∆
∆
∆
δ
δ
α
δ
α
δ
δ
)
( )
( )
( )
( )
( )
( )
q s
s
s
s
s
s
T
e
T
∆
∆
∆
∆
∆






δ
θ
δ
θ
δ

=
−
+
−
C sI
A
B
D
(
) 1
	
(4.736)
The control system toolbox in MATLAB contains a function “ss2tf” for expediting the pro­
cess of converting from the state-space model to the transfer function description of an LTI system. 
Calling this function with arguments (A, B, C, D, i), where i = 1 designates the first input Δδe and 
i = 2 specifies the second input ΔδT, generates the eight transfer functions in Equation 4.736.
The MATLAB statement “[numG denG] = ss2tf (A, B, C, D, 1)” returns
numG = 0
0.0000
−0.0000
0.2906
0.2951
0
0.0000
−0.0141
−0.0006
−0.0003
0
−0.0141
−0.0097
−0.0005
0.0000
0
0.0000
−0.0141
−0.0097
0.0125
denG =
1.0000
1.2700
0.9247
0.0406
0.0125
The transfer function relating elevator input to aircraft pitch is therefore
	
G
s
s
e s
s
s
s
s
e
∆
∆
∆
∆
δ
θ
θ
δ
( )
.
.
.
.
=
=
−
−
−
+
+
( )
( )
0 0141
0 0097
0 0005
1 2700
2
4
3
0 9247
0 0406
0 0125
2
.
.
.
s
s
+
+
	
(4.737)
Factoring the numerator and denominator gives
	
G
s
s
e s
K s
c
s
c
s
a s
b
s
a s
b
e
∆
∆
=
=
+
+
+
+
+
+
δ
θ
θ
θ
δ
( )
(
)(
)
(
)(
)
∆
∆
( )
( )
1
2
2
1
1
2
2
2 	
(4.738)
The constants in Equation 4.738, computed in M-file “Ch4_CaseStudy1.m,” are
	
K
c
c
a
a
θ =
=
=
=
=
– .
,
.
,
.
,
.
,
.
,
0 0141
0 6358
0 0542
1 2440
0 0260
1
2
1
2
	
	
b
b
1
2
0 8780
0 0143
=
=
.
,
.
	
The quadratic factors in the denominator of Equation 4.738 are both underdamped, regard­
less of whether the aircraft is a small passenger plane, a commercial jet, or a high-performance 
­military aircraft. However, as we shall soon learn, the natural frequencies and damping ratios of 
each ­quadratic are quite different.
We begin by finding the pitch response to a step change in elevator input of “A” deg. The Laplace 
transform of the response is
	
∆θ
θ
( )s
K s
c
s
c
s
a s
b
s
a s
b
A
s
=
+
+
+
+
+
+
⋅
(
)(
)
(
)(
)
1
2
2
1
1
2
2
2
	
(4.739)

324
Simulation of Dynamic Systems with MATLAB® and Simulink®
Using partial fraction expansion, Equation 4.739 is written as
	
∆θ( )s
K A
R
s
p
R
s
p
R
s
p
R
s
p
R
s
=
−
+ −
+ −
+ −
+






θ
1
1
2
2
3
3
4
4
5
	
(4.740)
where p1 and p2 are the poles from the quadratic s2 + a1s + b1, and p3 and p4 are the poles associ­
ated with the quadratic s2 + a2s + b2. R1, R2, R3, R4, and R5 are the constants (residues) in the partial 
fraction expansion. Letting p1 = α1 + jβ1, p3 = α3 + jβ3 and recognizing that p
j
p
2
1
1
1
=
= α
β
–
, 
p
j
p
4
3
3
3
=
= α
β
–
 as well as R
R
2
1
=
, R
R
4
3
=
 give
	
∆θ
θ
θ
( )
{ ( )}
[
]
t
s
K A R
R
R
t
R
R
p t
p
p t
p t
=
=
+
+
+
+
≥
−
ℒ1
1
3
5
1
3
1
3
1
3
0
e
e
,
e
e
t
	
(4.741)
It is left as an exercise to show that
	
Re
R
t
R
t
R
pt
t
pt
+
=
−
e
e
Re
cos
Im
sin
2 α
β
β
[
( )
]
( )
	
(4.742)
where
	
p
j
j
R
R
j
R
j
p
R
=
+
=
−
=
+
=
−
α
β
α
β
,
,
( )
,
( )
( )
Re
Im(R)
Re
Im R 	
The pitch response (in rad) to an A = 1° elevator deflection is given by
	
∆θ
β
β
θ
α
( )
{
[
(
)
(
)
]
t
K
R
t
R
t
t
=
−
2
1
1
1
1
1
e
Re
cos
Im
sin
	
	
+
−
+
2
3
3
3
3
3
5
e
Re
cos
Im
sin
t
α
β
β
[
(
)
(
)
]
]
R
t
R
t
R
	
(4.743)
Assuming the aircraft’s natural dynamics are stable, the poles are located in the left-half plane, 
that is, α1 < 0 and α3 < 0. From Equation 4.739 and the final value theorem and Equation 4.743 with 
t → ∞, the steady-state pitch response to a unit step input is
	
∆θ
θ
θ
ss
K c c
b b
K R
=
=
1 2
1 2
5
	
(4.744)
The poles and residues are obtained in “Ch4_CaseStudy1.m.”
	
p
j
p
j
R
j
1 2
3 4
1 2
0 6220
0 7008
0 0130
0 1187
0 0331
0 5
,
,
,
.
.
,
.
.
.
.
= −
±
= −
±
= −
±
589
1 3429
2 9777
2 7519
3 4
5
,
.
.
,
.
,
R
j
R
= −
±
=
	
From Equation 4.743, the pitch step response is
	
∆θ( )
{
[
.
.
.
.
.
.
t
t
t
=−
−
−
−
0 0141 2
0 0331
0 7008
0 5586
0 7008
0 6220
e
cos
sin
t
e
t
t
t
]
[
]
}
.
.
.
.
.
.
+
−
−
+
−
2
1 3429
0 1187
2 9777
0 1187
2 7519
0 0130
cos
sin
	
(4.745)
The two damped oscillatory components are referred to as the short period and phugoid modes. 
The natural frequencies, damping ratios, and exponential envelope time constants are given in 
Table 4.12.

325
Linear Systems Analysis
The complete step response is shown in Figure 4.103. The steady-state pitch is from Equation 
4.744, θss = −0.0388 rad (−2.2232°).
The short period and phugoid mode oscillation components of the step response are shown in 
Figure 4.104.
Shortly, we will look at the design of an autopilot to control the plane’s altitude. Before doing so, 
a way of determining altitude is needed. From Equations 4.726 and 4.727,
	
′ = −
+
+
z
u
v
w
(
)
(
)
(
)
sin
sin
cos
cos
cos
θ
θ
θ
ϕ
ϕ
	
(4.746)
where ′z  is the rate of change of altitude, a positive value indicating that the plane is descending. 
For small values of θ and motion in the longitudinal direction only, v = 0, φ = 0, sin θ ≈ θ, cos θ ≈ 1, 
sin φ = 0, cos φ = 1 and Equation 4.746 simplifies to
	
′ =
+
z
u
w
–θ
	
(4.747)
In terms of steady-state values and deviations, Equation 4.747 becomes
	
d
dt z
z
u
u
w
w
(
)
(
)(
)
+∆′ =−
+
+∆
+
+∆
θ
θ
∆
	
(4.748)
0
–0.12
–0.1
–0.08
–0.06
–0.04
Δθ(t) (rad)
–0.02
0
0.02
Linearized aircraft pitch response to 1 deg elevator deflection
50
100
150
200
250
v0 = 500 ft/s
α = θ = 0.05 rad
–
–
300
350
400
t (s)
FIGURE 4.103  Linearized aircraft pitch response due to 1° step change in elevator deflection.
TABLE 4.12
Short Period and Phugoid Mode Parameters
Mode
ωn (rad/s)
Z
τenvelope = 1/ζωn (s)
Short period
0.9370
0.6638
1.6077
Phugoid
0.1194
0.1089
76.9042

326
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
′ +
∆′ =−
+
+
+
+
+∆
d
d
d
d
t z
t
z
u
u
u
u
w
w
( )
(
)
(
)
θ
θ
θ
θ
∆
∆
∆∆
	
(4.749)
	
⇒
′ +
∆′ =−−
+
−
−∆+
+
d
d
d
d
t z
t
z
u
w
u
u
u
w
( )
(
)
(
)
θ
θ
θ
θ
∆
∆∆
∆
	
(4.750)
Equation 4.747 evaluated at steady state is
	
d
dt z
u
w
( )
(
)
′ =−
+
θ
	
(4.751)
Subtracting Equation 4.751 from Equation 4.750, ignoring the higher order term Δθ Δu, and 
recognizing that d
/d
d
/d
d /d
∆z
t
z
t
z
t
z
′
=
′−
=
′
′
(
)
) yield
	
d ′ =−∆−∆+∆
z
t
u
u
w
d
θ
θ
	
(4.752)
Substituting Δw in Equation 4.734 into Equation 4.752 gives
	
d
(
)
′ =−∆−∆+
∆
+ ∆
z
t
u
u
u
u
d
θ
θ
α
α
	
(4.753)
	
=−
−
−
−
(
)
)(
)
θ
α
θ
α
(∆
∆
∆
u
u
	
(4.754)
	
=−
−
u(
)
∆
∆
θ
α 	
(4.755)
0
–0.05
0
0.05
0
0
2
4
6
2
4
6
Short period oscillation
(a)
(b)
×10–3
8
10
Phugoid mode
Δθphugoid(t) (rad)
Δθshort period(t) (rad)
50
100
150
200
250
Δδe = 1 deg
Δδe = 1 deg
300
350
400
t (s)
FIGURE 4.104  (a) Short period and (b) phugoid oscillations of elevator unit step response.

327
Linear Systems Analysis
Laplace transforming Equation 4.755,
	
′
=−
−
z s
u
s
s
( )
[
( )
( )]
∆
∆
θ
α
	
(4.756)
The transfer function from elevator input Δδe(t) to output ′z t( ) is
	
G
s
z s
s
u
s
s
s
s
z
e
e
e


′
=
′
∆
=−
−






( )
( )
( )
( )
( )
δ
θ
δ
α
δ
∆
∆
∆
∆
( )
( )
	
(4.757)
The transfer function Δα(s)/Δδe(s) is obtained in the same way we found Δθ(s)/δe(s) in Equation 
4.738. The result is
	
∆
∆
=
+
+
+
+
+
+
α
δ
( )s
s
K
s
d s
d
s
a s
b
s
a s
b
e( )
(
)
(
)(
)
α
2
1
0
2
1
1
2
2
2 	
(4.758)
where Kα = −0.141, d1 = 0.0400, and d0 = 0.0235 are from “Ch4_CaseStudy1.m.”
Substituting Equations 4.738 and 4.758 into Equation 4.757 gives
	
G
s
u
K s
c
s
c
s
a s
b
s
a s
b
K
s
d s
d
z′
= −
+
+
+
+
+
+
−
+
+
( )
(
)(
)
(
)(
)
(
θ
α
1
2
2
1
1
2
2
2
2
1
0
2
1
1
2
2
2
)
(
)(
)
s
a s
b
s
a s
b
+
+
+
+






	
(4.759)
	
⇒
= −−
−
+
+
−
+
−
+
′
G
s
u K
K
s
K c
c
K d s
K c c
K d
s
a
z( )
[(
)
{
(
)
}
]
(
θ
α
θ
α
θ
α
2
1
2
1
1 2
0
2
1
1
2
2
2
s
b
s
a s
b
+
+
+
)(
)
	
(4.760)
	
⇒
=
+
+
+
+
+
+
′
G
s
s
s
s
a s
b
s
a s
b
z( )
(
)(
)
λ
λ
λ
2
2
1
0
2
1
1
2
2
2 	
(4.761)
	
λ
λ
λ
θ
α
θ
α
θ
α
2
1
1
2
1
0
1 2
0
=−
−
=−
+
−
=−
−
u K
K
u K c
c
K d
u K c c
K d
(
),
[
(
)
],
(
)	
(4.762)
From “Ch4_CaseStudy1.m,” λ2 = 0, λ1 = 4.5768, and λ0 = 0.0771.
For a step input in elevator deflection of A°, Equation 4.761 and λ2 = 0 give
	
′
=
+
+
+
+
+






z s
s
s
a s
b
s
a s
b
A
s
( )
(
)(
)
λ
λ
1
0
2
1
1
2
2
2
	
(4.763)
The partial fraction expansion of ′z (s) is
	
′
=
−
+ −
+ −
+ −
+






z s
A
R
s
p
R
s
p
R
s
p
R
s
p
R
s
( )
1
1
2
2
3
3
4
4
5
	
(4.764)
where the residues, evaluated in “Ch4_CaseStudy1.m,” are
	
R
j
R
j
R
1 2
3 4
5
3 7283
0 4124
6 8081
21 2231
6 1596
,
,
.
.
,
.
.
,
.
=
±
=−
±
=
	

328
Simulation of Dynamic Systems with MATLAB® and Simulink®
From Equations 4.763 and 4.764, the final value of ′z  is given by
	
′ =
=
z
A
b b
AR
ss
λ0
1 2
5
	
(4.765)
The step response is from Equation 4.764,
	
′
=
+
+
+
+
z t
A R
R
R
R
R
p t
p t
p t
p t
( )
[
]
1
2
3
4
5
1
2
3
4
e
e
e
e
	
(4.766)
Equation 4.766 is converted to a trigonometric form with real coefficients and real exponents 
similar to Equation 4.743 for Δθ(t). The unit step response is graphed in Figure 4.105. According to 
Equation 4.765, the steady-state value ′ =
= ×
z
AR
ss
5
1
6 1596
.
ft/s.
The change in altitude Δz(t) resulting from a step change in elevator input is obtained by integra­
tion of ′z t( ). From Equation 4.763,
	
∆′
=
′
=
+
+
+
+
+






z s
s z s
s
s
s
a s
b
s
a s
b
A
s
( )
( )
(
)(
)
1
1
1
0
2
1
1
2
2
2

λ
λ
	
(4.767)
	
=
+
+
+
+
+
A
s
s s
a s
b
s
a s
b
(
)
(
)(
)
λ
λ
1
0
2
2
1
1
2
2
2 	
(4.768)
The inverse transform of Equation 4.768 is left as an exercise problem. The change in altitude 
Δz′(t) is graphed in Figure 4.105 below the derivative d /d
′z
t.
The phugoid mode is an undesirable fact of life when it comes to control of an aircraft. In the 
previous example, it takes 300–400 s for the plane to establish a new steady-state pitch and rate of 
descent following a step change in the elevator position.
0
0
1000
2000
3000
–20
0
20
40
50
100
150
v0 = 500 ft/s
α = θ = 0.05 rad
–
–
v0 = 500 ft/s
α = θ = 0.05 rad
–
–
200
250
300
350
400
0
50
100
150
200
250
300
350
400
t (s)
Δδe = 1 deg
Δδe = 1 deg
Rate of change of altitude vs time
Change in altitude from steady-state vs time
Δz′(t) (ft)
dz′/dt (ft/s)
FIGURE 4.105  Changes in altitude rate and altitude from steady-state flight conditions.

329
Linear Systems Analysis
Consider a scenario where the plane is required to decrease its cruising altitude by some amount. 
One approach is for the pilot to pull back on the yoke to increase the elevator deflection from its neutral 
position, which produces steady-state level flight conditions. The plane will begin a descent similar to 
the one shown in Figure 4.105. The actual descent will depend on the magnitude of the elevator deflec­
tion. Some time later, the yoke is returned to the neutral position, and the plane returns to level flight 
conditions at a reduced altitude. To illustrate, suppose the pilot’s action results in an elevator deflec­
tion of ∆ˆδe degree for a period of Tpulse s. The aircraft’s altitude response to the pulse input in elevator 
deflection is obtained as the difference between the step response and the delayed step response, that is,
	
∆
∆
∆
∆∆
z t
z t
z t
T
u t
T
p
p
e
( )
( )
(
) (
)
pulse
pulse
=
−
−
−
ˆ
ˆ
ˆ
δ
δ
1
1
	
(4.769)
where
Δz1(t) is the change in altitude response to a unit step elevator deflection
ˆ
–
u t
T
(
)
pulse  is the unit step function starting at t = Tpulse
Δzp(t) is the change in altitude response to a pulse elevator deflection of ∆ˆδe deg lasting Tpulse s
For a 5° elevator pulse input of 30 s, the aircraft’s descent is computed according to Equation 
4.769 in “Ch4_CaseStudy1.m” and shown in Figure 4.106. The label “open-loop” refers to the lack 
of feedback used to determine the control surface deflection Δδe(t).
The open-loop response settles at a value of approximately 927.5 ft once the phugoid oscillations 
have disappeared. Some form of corrective action is necessary to dampen the excessive phugoid 
mode oscillations. A feedback control system or autopilot can automate the process without relying 
on human input.
Figure 4.107 is a simplified block diagram of a control system for regulating an aircraft’s 
altitude. Sensors convert the plane’s altitude and rate of descent (or ascent) to voltages, which 
are transmitted to the autopilot. In Figure 4.107, the gain of the altitude sensor Kz is shown 
combined with the controller transfer function GC(s), allowing the command signal Δzcom to be 
in ft rather than volts. (Note that the’ symbol designating inertial coordinates is dropped from 
here on.)
0
100
–1000
1000
Δz (ft)
2000
3000
4000
Open and closed-loop aircraft altitude response vs time
Open-loop response: Δδe = 5 deg pulse of 30 s duration
Closed-loop response: Δzcom = 927.5 ft
Δzss = 927.5 ft
KC = 0.001
^
Δzss = 927.5 ft
0
200
300
400
500
t (s)
FIGURE 4.106  Open- and closed-loop altitude response vs. time.

330
Simulation of Dynamic Systems with MATLAB® and Simulink®
The inner loop provides feedback of the altitude rate, which improves the damping and speed of 
the outer altitude control loop. There are several ways of obtaining the closed-loop transfer function 
Δz(s)/Δzcom(s). The inner loop can be reduced to
	




z s
U s
G s G s
K G s G s
a
z
z
a
z
( )
( )
( )
( )
( )
( )
=
+
1
	
(4.770)
Using the same block diagram reduction formula for the outer loop gives
	
∆
∆
z s
z
s
K G s z s U s
s
K G s z s U s
z
c
z
c
( )
( )
( )[ ( )
( )]
( )[ ( )
( )]
com
/
/
/
=
+


1
1
1/s 	
(4.771)
	
=
+
+
K G s G s G s
K G s G s
K G s G s
z
c
a
z
z
a
z
z
c
a
( )[
( )
( ) (
( )
( ))] s
( )[
( )



/
/
1
1
1
G s
K G s G s
z
z
a
z



( ) (
( )
( ))] s
/
/
1
1
+
	
(4.772)
	
=
+
+
K G s G s G s
K G s G s s
K G s G s G s
z
c
a
z
z
a
z
z
c
a
z
( )
( )
( )
[
( )
( )]
( )
( )
( )





1
	
(4.773)
To start with, a proportional controller Gc(s) = KC is considered. The product of the gain Kz and 
controller gain Kc is ˆKC, that is, ˆK
K K
C
z
c
=
 is the effective controller gain for design purposes. 
For now, we ignore the actuator dynamics and let Ga(s) = Ka measured in deg/volt. Equation 4.773 
becomes
	
∆
∆
z s
z
s
K K G s
K K G s s
K K G s
C
a
z
z
a
z
C
a
z
( )
( )
( )
[
( )]
( )
com
=
+
+
ˆ
ˆ




1
	
(4.774)
The DC gain of the autopilot is
	
lim
( )
( )
lim
( )
[
( )]
com
s
s
C
a
z
z
a
z
C
z s
z
s
K K G s
K K G s s
K K
→
→
=
+
+
0
0 1
∆
∆
ˆ
ˆ



a
z
G s
( )
=1
	
(4.775)
Substituting Equation 4.761 with λ2 = 0 for Gz(s) into Equation 4.774 gives
	
∆
∆
z s
z
s
K K
s
s
s
s
s
s
C
a
( )
( )
(
)
com
=
+
+
+
+
+
+
ˆ
λ
λ
1
0
5
4
4
3
3
2
2
1
0
µ
µ
µ
µ
µ 	
(4.776)
FIGURE 4.107  Block diagram for altitude control system.

331
Linear Systems Analysis
	
µ
µ
µ
λ
µ
λ
4
1
2
3
1 2
1
2
2
1 2
2 1
1
1
1 2
0
=
+
=
+
+
=
+
+
=
+
+
a
a
a a
b
b
a a
a b
K K
b b
K K
z
a
z
a


ˆK K
K K
C
a
C
a
λ
µ
λ
1
0
0
=





ˆ
	
(4.777)
“Ch4_CaseStudy1.m” creates a system object for the control system transfer function in Equation 
4.776 and then issues the MATLAB “step” command to acquire the unit step response values, 
which are multiplied by Δzcom and then plotted. The statements are
num_cs_z = Kc_hat*Ka*[lambda1 lambda0];
den_cs_z = [1 mu4 mu3 mu2 mu1 mu0];
sys_cs_z = tf(num_cs_z, den_cs_z)
T = linspace(0, 500, 1000); % t array for step response
[Y,T] = step(sys_cs_z,T); %Y is unit step response of control system
z_com = 927.5; % command input (ft)
z_cs = z_com*Y; % control system response to z_com
plot(T,z_cs,'r')
Numerical values used to obtain the closed-loop response in Figure 4.106 were Δzcom = 927.5 ft, 
Ka = 1°/V, Kz= 0 1.  volt/ft/s, and ˆKC = 0.001. The closed-loop transfer function corresponding to 
those values is
	
∆
∆
z s
z
s
s
s
s
s
( )
( )
.
.
.
.
.
com
=
+
+
+
+
0 004577
0 00007713
1 27
0 9247
0 086
5
4
3
34
0 01787
0 00007713
2s
s
+
+
.
.
	
(4.778)
Both responses in Figure 4.106 approach 927.5 ft; however, the closed-loop response is far supe­
rior to the open-loop pulse response. The elevator deflection in the closed-loop system response 
must be small enough to justify the use of the linearized model in Equation 4.735, which assumes 
small deviations in u, α, q, and θ. The small angle approximations and omission of high-order 
terms, key to the linearized model’s accuracy, may not hold if there are sizable changes in any 
of the responses. We must look at a graph of Δδe(t) responsible for the closed-loop response in 
Figure 4.106.
Δδe(s)/Δzcom(s) can be obtained by observing from Figure 4.107 that
	
∆
∆
z s
s G s
s
z
e
( )
( )
( )
= 1

δ
	
(4.779)
Solving Equation 4.779 for Δδe(s) and then dividing both sides by Δzcom(s) lead to
	
∆
∆
∆
∆
δe
z
s
z
s
s
G s
z s
z
s
( )
( )
( )
( )
( )
com
com
=

	
(4.780)
Substituting for G s
z( ) the expression in Equation 4.761 gives
	
∆
∆
δ
µ
µ
µ
e
C
a
s
z
s
K K s s
a s
b
s
a s
b
s
s
s
( )
( )
(
)(
com
=
+
+
+
+
)
+
+
+
ˆ
2
1
1
2
2
2
5
4
4
3
3
2s
s
2
1
0
+
+
µ
µ
	
(4.781)

332
Simulation of Dynamic Systems with MATLAB® and Simulink®
The closed-loop elevator and altitude step responses for ˆKC = 0.001, 0.003, and 0.005 along with 
the open-loop response are shown in Figures 4.108 and 4.109.
Looking at Figure 4.108, it is clear that the closed-loop system elevator input Δδe(t), t ≥ 0 
remains less than the 5° pulse amplitude in the open-loop system. It is left as an exercise problem to 
­investigate the deviations Δu, Δα, q, and Δθ as well.
The proportional gain compensator for the autopilot is far too simplistic; however, the results are 
fairly dramatic even for this simple design. One of the problems with this design is related to stabil­
ity. The sluggish response ( ˆ
.
KC = 0 001) in Figure 4.109 is the most stable, yet the location of the 
closed-loop system poles, which determine the transient response, is far from optimal. Table 4.13 
lists the location of the closed-loop system poles corresponding to the values of ˆKC.
0
100
–100
–1
0
1
2
3
4
5
Open and closed-loop elevator deflections for different controller gains
Open-loop
v0 = 500 ft/s
KC = 0.003
^
KC = 0.005
^
KC = 0.001
^
Δzcom = 927.5 ft
Δδe (t) (deg)
–
–
α = θ = 0.05 rad
200
300
400
t (s)
FIGURE 4.108  Elevator response for open- and closed-loop control of altitude.
0
100
50
Open and closed-loop altitude responses for different controller gains
150
200
250
300
350
400
t (s)
–1000
0
1000
2000
3000
4000
Open-loop
v0 = 500 ft/s
KC = 0.003
^
KC = 0.001
^
KC = 0.005
^
Δzcom = 927.5 ft
Δz (ft)
–
–
α = θ = 0.05 rad
FIGURE 4.109  Altitude response for open- and closed-loop control.

333
Linear Systems Analysis
The reader should consult one of the numerous control system texts for a discussion of more 
sophisticated compensators to achieve superior dynamic response with increased stability margins.
The gain (magnitude in db) of the open- and closed-loop frequency response functions is shown 
in Figure 4.110. The open-loop |z(jω)/Δδe(jω)| is obtained from the transfer function in Equation 
4.761, (recall λ2 = 0). The open-loop |Δ z(jω)/Δδe(jω)| comes from the transfer function
	
G
s
z s
s
s
s s
a s
b
s
a s
b
z
e
∆
∆
∆
( )
( )
( )
(
)(
)
=
=
+
+
+
+
+
δ
λ
λ
1
0
2
1
1
2
2
2 	
(4.782)
The closed-loop |Δz(jω)/Δzcom(jω)| is based on the transfer function in Equation 4.776 with 
ˆ
.
KC = 0 005.
Note that the resonant frequency in the open-loop functions at the natural frequency of the phugoid 
ωn = 0.1194 rad/s (see Table 4.12). The closed-loop system gain is close to 0 db from DC to somewhat 
less than the resonant frequency. The bandwidth of the control system is approximately 0.28 rad/s.
4.11.1  Digital Simulation of Aircraft Longitudinal Dynamics
A digital simulation of longitudinal dynamics requires z-domain transfer functions to approxi­
mate the corresponding continuous-time transfer functions. A z-domain transfer function to 
Bode diagram
Frequency (rad/s)
101
100
10–1
10–2
10–3
80
60
40
20
–20
–40
–60
–80
–100
–120
0
KC = 0.005
^
Magnitude (dB)
·|z(jω)/Δδe(jω)|
|Δz(jω)/Δδe(jω)|
|Δz(jω)/Δzcom(jω)|
ωBW = 0.28 rad/s
ωBW
FIGURE 4.110  Open- and closed-loop magnitude functions.
TABLE 4.13
Closed-Loop System Poles for Autopilot with 
Proportional Control
ˆKC
Closed-Loop Poles
0.001
−0.5981 ± j0.6759, −0.0347 ± j0.1424, −0.0044
0.003
−0.6066 ± j0.6748, −0.0240 ± j0.1772, −0.0088
0.005
−0.6150 ± j0.6742, −0.0145 ± j0.2055, −0.0109

334
Simulation of Dynamic Systems with MATLAB® and Simulink®
approximate the continuous-time transfer function in Equation 4.776 based on explicit Euler 
integration is
	
∆
∆
z z
z
z
K K
s
s
s
s
s
s
C
a
s
z
( )
( )
(
)
com
=
+
+
+
+
+
+
= −
ˆ
(
)
λ
λ
µ
µ
µ
µ
µ
1
0
5
4
4
3
3
2
2
1
0
1 /T 	
(4.783)
Substituting (z − 1)/T for s in Equation 4.783 leads to
	
∆
∆
z z
z
z
K K T
z
T
z
z
z
z
z
C
a
( )
( )
(
)
com
=
−
−
+
+
+
+
+

ˆ
4
1
1
0
5
4
4
3
3
2
2
1
0
λ
λ
λ
γ
γ
γ
γ
γ




	
(4.784)
where
	
γ
µ
γ
µ
µ
γ
µ
µ
µ
γ
µ
4
4
3
4
3
2
2
4
3
2
2
3
1
4
5
10
4
10
6
3
5
4
3
= −+
= −
−
+
= −
+
+
+
= −
+
T
T
T
T
T
T
T
µ
µ
µ
γ
µ
µ
µ
µ
µ
3
2
2
3
1
4
0
4
3
2
2
3
1
4
0
5
2
1
T
T
T
T
T
T
T
T
+
+
= −+
−
+
−
+




	
(4.785)
To simulate the altitude response to a step input command of magnitude Δzcom = A, we need the 
difference equation relating Δzk and (Δzcom)k. Cross multiplying Equation 4.784 after multiplying 
numerator and denominator by z−5 gives
	
(
)
( )
1
4
1
3
2
2
3
1
4
0
5
+
+
+
+
+
−
−
−
−
−
γ
γ
γ
γ
γ
z
z
z
z
z
z z
∆
	
	
= ˆ
[
(
)
]
( )
–
–
–
–
K K T
z
T z
z
z
C
a
4
1
4
1
0
5
λ
λ
λ
∆com
	
(4.786)
Invert z-transforming both sides of Equation 4.786 and solving for Δzk give
	
∆
∆
∆
∆
∆
∆
z
z
z
z
z
z
k
k
k
k
k
k
=
+
+
–
–
–
–
–
–
–
–
γ
γ
γ
γ
γ
4
1
3
2
2
3
1
4
0
5 	
	
= ˆ
[
(
)
(
)(
)
]
–
–
–
–
K K T
z
T
z
C
a
k
k
4
1
4
1
0
5
λ
λ
λ
∆
∆
com
com
	
(4.787)
The first several values of Δzk are evaluated sequentially from Equation 4.787 as
	
k
zk
=
=
0 1 2 3
0
, ,
,
:
  
 
∆
	
(4.788)
	
k
z
z
K K T
K K T
A
C
a
C
a
=
=
=
4
4
0
4
1
4
1
: 
(
)
com
∆
∆
ˆ
ˆ
λ
λ
	
(4.789)
	
k
z
z
T
z
K K T
z
C
a
=
=−
+
−
−
5
5
4
4
1
0
0
4
1
1
: 
(
)
(
)(
com
∆
∆
∆
∆
γ
λ
λ
λ
ˆ
[
) ]
com
	
(4.790)
	
=
+
−
−
–
( ˆ
)
ˆ
[
(
) ]
γ
λ
λ
λ
λ
4
4
1
4
1
1
0
K K T
A
K K T
A
T A
C
a
C
a
	
(4.791)
	
=
−
+
ˆ
(
)
K K T
A
T
C
a
4
1
4
1
0
λ
γ λ
λ
	
(4.792)

335
Linear Systems Analysis
Δzk, k = 6, 7, 8, … is computed by recursion according to
	
∆
∆
∆
∆
∆
∆
z
z
z
z
z
z
K K T A
k
k
k
k
k
k
C
a
=−
−
−
−
−
+
γ
γ
γ
γ
γ
4
1
3
2
2
3
1
4
0
5
5
0
–
–
–
–
–
ˆ
λ 	
(4.793)
“Ch4_CaseStudy1.m” contains statements to implement Equations 4.788, 4.789, 4.792, and 
4.793. The simulated altitude response of the closed-loop system with ˆ
.
KC = 0 003 to the altitude 
command previously considered (Δzcom = 927.5 ft) is shown in Figure 4.111. The analytical solution 
previously plotted in Figure 4.109 is also presented. For purposes of clarity, the simulated points 
are plotted 1 s apart, that is, every 10th point is plotted. The exact and simulated responses are in 
close agreement.
Analytical and simulated (Euler T = 0.1 s) closed-loop system altitude response.
4.11.2  Simulation of State Variable Model
The linearized model describing the longitudinal dynamics of an aircraft was given in state variable 
form in Equation 4.735. Subsequent analysis of dynamic response, however, was done using transfer 
function descriptions relating a specific input, namely, Δδe(t), and a certain output, for example, 
Δθ(t), z t( ), and Δz(t). The conversion from a state-space description to input—output models is 
accomplished using Equation 4.736 or the MATLAB function “ss2tf” available in the control 
­system toolbox. The remainder of this section is devoted to simulation of the aircraft dynamics 
based on the continuous-time state-space model
	
∆
∆
∆
∆
∆
∆
x
A
x
B
u
y
C
x
D
u
=
+
=
+
,
	
(4.794)
where
A, B, Δx, Δu are evident from Equation 4.735
Δy is the output vector, which determines C and D
Suppose a simulation of the state equations using trapezoidal integration is required. 
Equation 3.121 is the difference equation for updating the discrete-time state based on trapezoidal 
t (s)
Δz (ft)
0
0
50
100
150
200
250
300
350
v0 = 500 ft/s
400
100
200
300
400
500
600
700
800
900
1000
KC = 0.003
^
Analytical and simulated closed-loop system altitude response
Δz (t), t ≥ 0
Δzk, k = 0, 10, 20, …,
Δzcom = 927.5 ft
α = θ = 0.05 rad
–
–
FIGURE 4.111  Altitude step responses of analytical and simulated closed-loop system.

336
Simulation of Dynamic Systems with MATLAB® and Simulink®
integration. It is repeated below (using the deviation variable notation) along with the equation for 
computing the output vector.
	
∆
∆
x n
I
TA
I
TA
x n
I
TA
(
)
( )
+
=
−






+






+
−
−
1
1
2
1
2
1
2
1
2
1






+
+
−1
1
TB
u n
u n
[
( )
(
)]
∆
∆
	
(4.795)
	
∆
∆
∆
y n
C
x n
D
u n
( )
( )
( )
=
+
	
(4.796)
Equations 4.795 and 4.796 represent a straightforward approach to simulation of the state equations 
using trapezoidal integration. The equations are implemented in the script file “Ch4_CaseStudy1.m” 
for the case where Δu = [Δδe ΔδT]T = [5° 0 lb]T, Δy = [Δu Δa Δq Δθ]T. Accordingly, C is the 4 × 4 
identity matrix and D is a 4 × 2 matrix of zeros. The simulated output Δy(n) = [Δu(n) Δα(n) Δq(n) 
Δθ(n)]T was recorded for T = 1, 5, 10 s and the results graphed for T = 1 and 10 s in Figure 4.112.
There was very little difference in the outputs for T = 1 and 5 s suggesting that the higher value 
is appropriate for further simulation studies using trapezoidal integration.
Setting ∆x = 0 in Equation 4.794 and solving for Δx at steady state give
	
∆
∆
x
A B
u
ss = –
–1
	
(4.797)
	
⇒






=−
−
−
−
∆
∆
∆
∆
u
q
ss
ss
ss
ss
α
θ
0 04
11 59
0
32 2
0 00
.
.
.
.
073
0 65
1
0
0 000048
0 49
0 58
0
0
0
1
0
0
0 1
1
−
−
−






−
.
.
.
.
.
00
0
0 014
0
0
0
5
0
117 83
0 13
−












= −
.
.
.
ft/s
rad
rad/s
rad
0
0 19
−






.
	
(4.798)
400
t (s)
t (s)
Δq (rad/s)
Δu (ft/s)
Δθ (rad)
Δα (rad)
–0.1
–0.6
–0.2
–0.4
–0.2
–0.15
–0.1
–0.05
0
0
–0.05
0.05
0
200
100
0
T = 10 s
T = 10 s
T = 10 s
T = 10 s
T = 1 s
T = 1 s
T = 1 s
T = 1 s
300
400
t (s)
200
100
0
300
400
200
100
0
300
t (s)
400
200
100
0
300
200
150
100
50
0
Simulation of state vector using trapezoidal integration (Δδe = 5 deg)
FIGURE 4.112  Simulation of state vector using trapezoidal integration (δe = 5 deg).

337
Linear Systems Analysis
Setting Δx(n + 1) = Δx(n) = Δx(∞) in Equation 4.795,
	
∆
∆
x
I
TA
I
TA
x
I
TA
(
)
(
)
∞=
−






+






∞
+
−


−
1
2
1
2
1
2
1
2
1




∞+
∞
−1
TB
u
u
[
(
)
(
)]
∆
∆
	
(4.799)
Solving for the steady-state vector Δx(∞) gives
	
∆x
I
I
TA
I
TA
I
(
)
∞=
−
−






+












+
−
−
1
2
1
2
1
1
1
2
117 83
0 13
0
0 19
1
TA
TB
u






∞
=
−
−
−
∆(
)
[
.
ft/ s
.
rad
rad/ s
.
rad]T
	
(4.800)
The continuous-time Δxss and discrete-time (simulated) Δx(∞) are identical, in agreement with 
the values observed in Figure 4.112.
EXERCISES
	4.86	 Prove the relationship in Equation 4.742 involving complex numbers.
	4.87	 Use the control system toolbox to
	
a.	 Find the transfer functions Δu(s)/ΔδT(s), Δα(s)/ΔδT(s), q(s)/ΔδT(s), Δθ(s)/ΔT(s).
	
b.	 Plot the unit step responses for the linearized model in Equation 4.735 with Δy = Δx.
	4.88	 Find Δz′(t) by inversion of Δz′(s) in Equation 4.768.
	4.89	 a.	 Use a similar approach to the one for finding Δz′(s)/Δδe(s) to determine Δx′(s)/Δδe(s).
	
b.	 Use the control system toolbox to plot Δx′(t) in response to a step change in elevator input 
of 5°.
	
c.	 Find the response Δz′(t) to the same input.
	
d.	 Plot the aircraft’s flight trajectory Δz′ vs. Δx′ for (0 ≤ Δx′ ≤ 25,000 ft).
	4.90	 Find the time duration of a −5° elevator pulse input required to increase the plane’s elevation 
by 1500 ft.
	4.91	 The actuator that controls elevator deflection was assumed to exhibit negligible dynamics in 
the typical range of frequencies encountered. The actuator transfer function is first order with 
gain Ka = 1°/V and time constant τa = 0.4 s.
	
a.	 Find the closed-loop transfer functions Δz(s)/Δzcom(s) and Δδe(s)/Δzcom(s) with the actua­
tor dynamics included. Express both transfer functions as a ratio of polynomials similar 
to Equations 4.776 and 4.781.
	
b.	 Find the closed-loop system ( ˆ
.
KC = 0 005) poles with and without the actuator dynamics. 
Comment on the results.
	
	
With ˆKC = 0.005, verify the assumption of negligible actuator dynamics by
	
c.	 Plotting the frequency response of the open-loop transfer function with and without 
­actuator dynamics.
	
d.	 Comparing the elevator deflection response when Δzcom = 500 ft with and without the 
actuator dynamics.
	
e.	 Comparing the aircraft altitude response when Δzcom = 500 ft with and without the 
­actuator dynamics.

338
Simulation of Dynamic Systems with MATLAB® and Simulink®
	4.92	 For the conditions in Figure 4.111, find the maximum deviation between the analytical and 
simulated altitude responses when using Euler integration with the step sizes shown in 
Table E4.92. Fill in Table E4.92.
TABLE E4.92
Step Size
T = 0.025 s
T = 0.05 s
T = 0.1 s
T = 0.25 s
Max |Δzanal − Δzsim|
	4.93	 Starting with the open-loop transfer function G
s
s
s
e
e
∆
∆
∆
∆
δ
θ ( )
/
=
θ
δ
( )
( ) in Equation 4.738,
	
a.	 Use Tustin’s method with a sample time of T = 1 s to obtain a discrete-time system 
approximation G
z
e
∆
∆
δ
θ ( ). Use the control system toolbox function “c2d” if available, other­
wise be prepared for some tedious algebraic work.
	
b.	 Use the pulse transfer function G
z
e
∆
∆
δ
θ ( ) to find the difference equation relating Δθk and 
(Δδe)k.
	
c.	 Find the aircraft’s pitch response to a unit step change in elevator position by recursive 
solution of the difference equation.
	
d.	 Compare the simulated pitch step response in part (c) to the continuous-time pitch step 
response shown in Figure 4.103.
4.12  CASE STUDY: NOTCH FILTER FOR ELECTROCARDIOGRAPH WAVEFORM
An electrocardiograph (ECG) signal is corrupted with 60 Hz noise from an electrical power source. 
A portion of the noisy signal, sampled regularly at 0.004 s intervals, is shown in Figure 4.113.
A notch filter is needed to remove the noise. One realization of a second-order filter transfer 
function is given by (Orfanidis 1996)
	
H z
Y z
U z
b
T z
z
b
T
b
z
( )
( )
( )
(cos
)
(cos
)
(
)
=
=
−
+
−
+
−



−
−
−
1
2
1
2
2
1
0
1
2
0
2
ω
ω




	
(4.801)
t (s)
u (t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
Filter input: ECG + noise
FIGURE 4.113  ECG signal corrupted with 60 Hz noise sampled at T = 0.004 s intervals.

339
Linear Systems Analysis
where ω0 is the notch frequency (in rad/s). The filter parameter Q relates the notch frequency ω0 to 
the width of the 3 db interval Δω on a plot of |H(ejωT)|2 vs. ω.
	
Q = ω
ω
0
∆
	
(4.802)
The higher Q is, the narrower is the 3 db interval Δω. The filter parameter b is obtained from
	
b
T
Q
=
+
1
1
2
0
tan (
)
ω
/
	
(4.803)
Two notch filters will be investigated. One with Q = 10 and the other with Q = 50. The M-file 
“Ch4_CaseStudy2.m” computes the filter coefficients and plots both |H(ejωT)|2 vs. ω and the magni­
tude function (in db), |H(ejωT)| vs. ω (see Figures 4.114 through 4.117).
Note, when |H(ejωT)|2 = 0.5 it is 3 db below the DC value |H(ej0T)|2 = 1.
The filtered outputs are shown in Figures 4.118 and 4.119. There is little difference in the outputs 
of the two filters except for the longer transient period of the filter with Q = 50.
4.12.1  Multinotch Filters
When more than one notch frequency exists, a multinotch filter design is required. The previous 
reference includes several methods of designing a multinotch filter. One approach is to simply use 
the singlenotch design for each notch frequency and cascade the respective filters. To illustrate, sup­
pose the ECG signal contains a 25 Hz square wave noise signal like the one shown in Figure 4.120.
The noise n(t) contains harmonics at multiples of the fundamental frequency ω0 = 2πf0 = 50π rad/s. 
The Fourier Series expansion of n(t) is given by (see Exercise 4.95)
	
n t
t
t
t
( )
sin
sin
sin
=
+
+
+
1
1
3
3
1
5
0
0
0
π
ω
π
ω
π
ω
5

	
(4.804)
0
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
20
10
30
40
50
60
70
80
90
100
ω (Hz)
ω0 = 60 Hz
Magnitude squared function of notch filter (Q = 10)
3 db
Δω = 63 Hz – 57 Hz = 6 Hz
|H(ejωT)|2
FIGURE 4.114  Magnitude squared function for notch filter (Q = 10).

340
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXAMPLE 4.37
A clean ECG signal, 10 s in duration, is sampled every Ts = 0.004 s and stored in the data file 
“Ch4_clean_ecg_10sec.mat.” The time and signal data are stored in arrays “t” and “s.”
	
a.	Sample the square wave noise shown in Figure 4.120 at the sampling frequency ωs = 1/Ts 
and plot the sampled noise n(t) and the noisy ECG signal s(t) + n(t).
	
b.	Design notch filters:
	
i.	 Hω0(z) to remove the fundamental frequency
	
ii.	 H3ω3(z) to remove the first nonzero harmonic term
	
iii.	 H5ω0(z) to remove the second nonzero harmonic term.
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
ω0 = 60 Hz
Magnitude squared function of notch filter (Q = 50)
3 db
Δω = 60.6 Hz – 59.4 Hz = 1.2 Hz
|H(ejωT)|2
0
20
10
30
40
50
60
70
80
90
100
ω (Hz)
FIGURE 4.116  Magnitude squared function for notch filter (Q = 50).
100
–60
–50
–40
–30
|H(ejωT|) (db)
–20
–10
0
Magnitude function of notch filter (Q = 10)
101
102
ω (Hz)
ω0 = 60 Hz
FIGURE 4.115  Magnitude function (in db) for notch filter (Q = 10).

341
Linear Systems Analysis
	
Choose the Q values such that the 3 db width Δω for |H(ejωT)|2 versus ω is the same for 
each filter.
	
c.	Draw the magnitude function (in db) for the following filters:
	
i.	 Hω0(z) (ii) Hω0(z)H3ω0(z) (iii) Hω0(z)H3ω0(z)H5ω0(z)
	
d.	Filter the noisy ECG signal in part (a) using the three filters in part (c) and graph the 
results.
100
–15
|H(ejωT)| (db)
–20
–25
–30
–35
–40
–45
–50
–10
–5
0
5
Magnitude function of notch filter (Q = 50)
101
102
ω (Hz)
ω0 = 60 Hz
FIGURE 4.117  Magnitude function (in db) for notch filter (Q = 50).
Filter input: ECG + noise
Filter output (Q = 10)
t (s)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.5
1
1.5
y(t)
0
0.5
1
1.5
u(t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
FIGURE 4.118  Output of notch filter (Q = 10).

342
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a.	Figure 4.121 shows 5 s of the noise square wave n(t) and the combined signal plus noise 
s(t) + n(t).
	
b.	The filter parameter Q was chosen as 10 for the first filter. From Equation 4.802 the 
3 db width Δω = 2.5 Hz. Using this value for notch frequencies 3ω0 = 75 Hz and 
5ω0 = 125 Hz in Equation 4.802 gives
	
Q
Q
=
=
=
=
=
=
3
3 25
2 5
30
5 25
2 5
50
0
0
ω
ω
ω
ω
∆
∆
(
)
.
,
(
)
.
5
	
(4.805)
Noise f0 = 25 Hz
t (s)
0.4
0.36
0.32
0.28
0.24
0.2
0.16
0.12
0.08
0.04
0
0
–0.25
0.25
n(t)
FIGURE 4.120  Square wave noise component of ECG signal.
Filter input: ECG + noise
Filter output (Q = 50)
t (s)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.5
1
1.5
y(t)
0
0.5
1
1.5
u(t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
FIGURE 4.119  Output of notch filter (Q = 50).

343
Linear Systems Analysis
	
	
The M-file “Ch4_Ex4_37.m” computes the filter coefficients for the three notch 
­filters with Q values 10, 30, and 50 using Equations 4.801 and 4.803. The results are
	
H
z
z
z
z
ω0
0 9695
1 1 6180
1 1 5687
0 9391
1
2
1
( )
.
.
.
.
=
−
+
−
+






−
−
−
(
)
Q = 10
	
(4.806)
	
H
z
z
z
z
3
1
2
1
0
0 9695
1
1 6180
1
0 5992
0 9391
ω ( )
.
.
.
.
=
+
+
+
+






−
−
−

=
(
)
Q
30
	
(4.807)
	
H
z
z
z
z
Q
5
1
2
1
0
0 9695
1
2
1
1 9391
0 9391
5
ω ( )
.
.
.
(
=
+
+
+
+






=
−
−
−
0)
	
(4.808)
	
c.	“Ch4_Ex4_37.m” includes statements to plot the magnitude functions of H
z
ω0( ) and 
the cascaded filters H
z
ω0( ) H
z
3 0
ω ( ) and H
z
ω0( ) H
z
5 0
ω ( ) H
z
5 0
ω ( ). The results are shown in 
Figures 4.122 through 4.124.
	
d.	The three filters are shown in Figure 4.125 with their corresponding inputs and out­
puts. Output of the filter with transfer function H
z
ω0( ) in Equation 4.806 is shown in 
Figure 4.126. The simple notch filter was designed to remove the fundamental frequency 
term in Equation 4.804.
	
	
Output of the first filter y1(k) is passed to the notch filter with transfer function 
H
z
3 0
ω ( ) in Equation 4.807. Output y2(k) of the multinotch filter H
z H
z
ω
ω
0
0
3
( )
( )  is shown in 
Figure 4.127. Finally, the output of the middle filter in Figure 4.125 is the input to the third 
filter in the series of cascaded filters. The output of the last filter y3(k) is plotted as y3(t) in 
Figure 4.128.
	
	
The multinotch filter output in Figure 4.128 is similar in appearance to the single 
notch filter outputs shown in Figures 4.118 and 4.119 (after the transient response has 
vanished) when the noise was a pure sinusoid at 60 Hz. Even though the square wave 
noise contains an infinite number of harmonics, that is, odd multiples of the fundamental 
25 Hz square wave noise
ECG signal with 25 Hz square wave noice
t (s)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.5
1
1.5
s(t) + n(t)
0
–0.2
–0.4
0.2
0.4
n(t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
FIGURE 4.121  Square wave noise and noise-corrupted ECG signal.

344
Simulation of Dynamic Systems with MATLAB® and Simulink®
frequency (see Equation 4.804), all but the first two nonzero harmonics 3ω0 = 75 Hz 
and 5ω0 = 125 Hz are above the Nyquist frequency ωnyq = 0.5ωs = 0.5 × (1/Ts) = 125 H
z. Consequently, the harmonics at 7ω0 = 175 Hz, 9ω0 = 225 Hz, and so forth, are aliased 
back to the lower frequencies which are effectively removed by the multinotch filter in 
Figure 4.125.
100
–15
|H(ejωTs)| (db)
–20
Ts = 0.004 s
3ω0 = 75 Hz
–25
–30
–35
–10
–5
0
5
Magnitude function (db) for multi-notch filter Hω0(z) H3ω0(z)
101
102
ω (Hz)
ω0 = 25 Hz
FIGURE 4.123  Magnitude function (db) for multinotch filter H
z H
z
ω
ω
0
0
3
( )
( ).
100
–15
|H(ejωTs)| (db)
–20
Ts = 0.004 s
Q = 10
–25
–30
–35
–10
–5
0
5
Magnitude function (db) for notch filter Hω0(z)
101
102
ω (Hz)
ω0 = 25 Hz
FIGURE 4.122  Magnitude function (db) for notch filter H
z
ω0( ).

345
Linear Systems Analysis
100
–15
|H(ejωTs)| (db)
–20
Ts = 0.004 s
3ω0 = 75 Hz
5ω0 = 125 Hz
–25
–30
–35
–10
–5
0
5
Magnitude function (db) for multi-notch filter Hω0(z) H3ω0(z) H5ω0(z)
101
102
ω (Hz)
ω0 = 25 Hz
FIGURE 4.124  Magnitude function (db) for multinotch filter H
z H
z H
z
ω
ω
ω
0
0
0
3
5
( )
( )
( ).
FIGURE 4.125  Multinotch filter for removing fundamental frequency and first two nonzero harmonics.
ECG signal with 25 Hz square wave noise
Output of notch filter Hω0(z)
t (s)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.5
1
1.5
y1(t)
1
0.5
0
1.5
s(t) + n(t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
FIGURE 4.126  Input and output of notch filter H
z
ω0( ).

346
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXERCISES
	4.94	 Create a noisy ECG signal u(tk) by starting with the clean signal s(tk), where tk = kTs, k = 0, 1, 
2, … (Ts = 0.004 s) in “Ch4_clean_ecg_10sec.mat.” Add a 50 Hz sinusoidal noise n(tk) with 
amplitude of 0.75.
	
a.	 Design and implement an appropriate notch filter to remove the noise.
ECG signal with 25 Hz square wave noise
Output of multi-notch filter Hω0(z) H3ω0(z)
t (s)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.5
1
1.5
y2(t)
1
0.5
0
1.5
s(t) + n(t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
FIGURE 4.127  Input and output of multinotch filter H
z H
z
ω
ω
0
0
3
( )
( ).
ECG signal with 25 Hz square wave noise
Output of multi-notch filter Hω0(z) H3ω0(z) H5ω0(z)
t (s)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
0.5
1
1.5
y3(t)
1
0.5
0
1.5
s(t) + n(t)
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
FIGURE 4.128  Input and output of multinotch filter H
z H
z H
z
ω
ω
ω
0
0
0
3
5
( )
( )
( ).

347
Linear Systems Analysis
	
b.	 Graph the filter input u(tk) and its output y(tk) below it.
	
c.	 Compare the clean ECG signal s(tk) and the filter output y(tk).
	4.95	 The clean ECG signal described in Exercise 4.94 is corrupted by the periodic noise n(t) shown 
in Figure E4.95. The period P = 1/30 s (ω0 = 30 Hz) and amplitude A = 1.
	
a.	 Sample the noise at the frequency ωs = 250 Hz (Ts = 0.004 s), and add it to the clean ECG 
signal. Denote the corrupted signal by u(tk), where tk = kTs, k = 0, 1, 2, 3, ….
	
b.	 Expand the noise in a Fourier series expansion,
	
n t
a
a
k
t
b
k
t
P
k
k
k
( )
(
cos
sin
),
/
, ,...
=
+
+
=
=
=
=∑
0
1 2
0
2
2
2
1 30
60
ω
ω
ω
π
π
π
0
0
rad/s
d
0
0
a
P
n t
k
t t
k
b
P
n t
k
t
k
P
P
k
=
=
=
−∫
2
0 1 2
2
2
2
( ) cos
,
, , ,
( ) sin
/
/
ω
ω

dt
k
P
P
,
, ,
/
/
=
−∫
1 2
2
2

	
	
c.	 Design and implement a multinotch filter to remove all the frequency components 
(except DC) below the Nyquist frequency ωnyq = 0.5ωs = 125 Hz.
	
d.	 Graph the filter input u(tk) and its output y(tk) below it.
	
e.	 Compare the clean ECG signal s(tk) and the filter output y(tk).
FIGURE E4.95


349
5 Simulink®
5.1  INTRODUCTION
This chapter serves as an introduction to the continuous simulation program, Simulink®. It is 
similar in many ways to its predecessors such as CSMP (Continuous System Modeling Program), 
ACSL (Advanced Continuous Simulation Language), TUTSIM (Twente University of Technology 
Simulator), MATRIX-X, STELLA, and EASY5. The major advantage of Simulink stems from its 
tight integration with MATLAB®, the data analysis and visualization program with its own struc­
tured programming language. The numerous (37 at the time of this printing) MATLAB toolboxes 
in diverse areas of engineering, science, and business extend the capabilities of Simulink.
In addition to the toolboxes, there are a number of Simulink blocksets that extend Simulink into 
various disciplines such as aerospace, communications, signal processing, image processing, and 
so forth. A complete list of toolboxes and blocksets with descriptions of each can be found at http://
www.mathworks.com/products/product_li sting/index.html.
Chapters 1 through 4 cover some basic essentials of linear continuous-and discrete-time systems. 
Elementary simulation techniques based on numerical integration are also introduced. In all but the 
simplest cases, the simulated solutions were programmed in MATLAB M-files.
The early continuous-time system simulation languages (CSSLs) consisted of individual sections, 
for example, “Initial,” “Dynamic,” “Derivative,” and “Terminal” with special demarcation headers for 
inputting constants and system parameters, calculating new parameters, setting initial conditions for 
the states, evaluating inputs over time, numerically integrating the state derivative vector, and comput­
ing the system outputs (Korn and Wait 1978). The continuous-time system dynamics were confined to 
a section containing expressions for the state derivatives. Lookup tables (in one or more dimensions) 
were often included in the section to evaluate the state derivatives. Crucial savings in simulation 
development time resulted from the built-in numerical integration routines and graphing capabilities.
Despite minor variations among the CSSLs, they were classified as “equation-oriented” because 
expressions for the state derivatives, difference equations, and outputs were entered on one or more 
lines in equation format. Later, general-purpose, block-oriented simulation programs emerged 
with powerful graphical user interfaces (GUIs). Dragging and dropping blocks from libraries con­
taining blocks of similar functionality is the most intuitive way for creating a simulation model. 
Even more so than equation-oriented CSSLs, block-oriented simulation programs such as Simulink 
free the simulationist from the tedious grunt work required to develop a model structure, implement 
­numerical integration, and produce useful output.
Our initial exploration of Simulink in this chapter is merely the “tip of the iceberg.” Later 
­chapters will delve further into the world of Simulink and its capabilities.
5.2  BUILDING A SIMULINK MODEL
To begin our introduction to Simulink we will demonstrate the procedure for creating a model of a sim­
ple system and run the model to obtain useful information about its dynamic response. Our purpose here 
is to get comfortable with the Simulink user interface at a macroscopic level. The Math Works web site at 
mathworks.com provides excellent tutorials for the beginner interested in getting started with Simulink.
5.2.1  The Simulink Library
The Simulink library contains blocks for representing the mathematical models of commonly occur­
ring components in dynamic systems. The blocks are grouped in sublibraries according to function. 

350
Simulation of Dynamic Systems with MATLAB® and Simulink®
The standard Simulink sublibraries are shown in the left pane of Figure 5.1. The blocks residing in 
the selected “Continuous” sublibrary are shown in the right pane. The “Integrator” block is 
selected and the transfer function, 1/s, is used to designate the integrator.
Building a Simulink model of a system consists of selecting the appropriate blocks and con­
necting them in a way that represents the mathematical model. Inputs, when present, are imple­
mented using blocks from the “Sources” sublibrary which can generate a host of input signals. 
Simulation output is saved and displayed using various blocks such as “Scopes,” “XY Graphs,” 
and “Displays” from the “Sinks” sublibrary.
Our first Simulink model will simulate the dynamics of the linear second-order system model 
introduced in Chapter 2. The differential equation is
	
d
d
d
d
2
2
2
2
2
t y t
t y t
y t
K
u t
n
n
n
( )
( )
( )
( )
+
+
=
ζω
ω
ω
	
(5.1)
Assuming for the moment that the second derivative term d
/d
2
2
y
t  is present in a new model win­
dow, it can be twice integrated as shown in Figure 5.2 where “ydd,” “yd,” and “y” are the Simulink 
variable names. The “Integrator” blocks are dragged or copied from the “Continuous” sub­
library into the model window.
By inspection of Equation 5.1, the second derivative term is a linear combination of the input 
u(t), the output y(t), and its first derivative d /d
y
t. The Simulink Library Browser allows us to search 
the standard sublibraries for the blocks needed to “build” the second derivative and thus complete 
the Simulink model.
FIGURE 5.1  The Simulink Library Browser.

351
Simulink®
The system parameters K
n
,
,
ω ζ and the literal constant “2” are generated using a “Constant” 
block found in the “Sources” sublibrary. The “Math” sublibrary provides the additional blocks 
for addition and multiplication of the signals.
We have yet to specify an input or forcing function, assuming there is one. For now, let’s pick 
a simple step input applied at t = 0. Looking in the “Sources” sublibrary, the step input can be 
implemented with a “Constant” or “Step” block, however the latter is more flexible should we 
later decide to delay the time at which the step is applied.
Numerical values of the system parameters are set by selecting the individual blocks and typing in 
the appropriate values in a properties dialog box. Some Simulink blocks contain several parameters, 
all of which should be specified or else the default values will be used. For example, the “Step” 
block generally requires values for “Step time,” “Initial value,” and “Final value” as 
shown in Figure 5.3 and the “Integrator” block requires an “Initial condition”.
FIGURE 5.2  Integrating the second derivative “ydd” twice to obtain the output “y”.
FIGURE 5.3  Dialog box for specifying input step paramater values.

352
Simulation of Dynamic Systems with MATLAB® and Simulink®
Figure 5.4 shows a Simulink diagram for simulation of the unit step response of the second-order 
system. The choice of Simulink blocks and their location in a Simulink diagram is not unique. 
The appearance or layout of blocks depends to a large extent on individual user preferences. Some 
prefer the diagram be the most economical in terms of Simulink blocks used. Others are more 
­concerned with layout style striving to make the diagram visually appealing.
Often times, the mathematical model of the system is available in block diagram form, as in the 
case of a control system. A Simulink diagram of the system will be strikingly similar, especially 
when Simulink blocks for modeling actual system components are available.
An alternate Simulink diagram for the second order-system in Equation 5.1 is shown in Figure 5.5. 
A “Gain” block with parameter value equal to the product 2ζωn replaces the “Product” block in 
FIGURE 5.4  Simulink model for step response of a second-order system.
FIGURE 5.5  Alternate Simulink model for a second-order sytem step response.

353
Simulink®
the inner feedback loop and the three constant blocks feeding it. Another “Gain” block is inserted 
in the outer feedback loop with parameter value numerically equal to ωn
2 replacing the “Product” 
and “Constant” blocks in Figure 5.4. A third “Gain” block is employed to multiply the input u(t) 
by K
n
ω 2, further reducing the number of blocks required.
Note the similarity between the Simulink diagram in Figure 5.5 and the simulation diagram of 
the system in Figure 2.13. In fact, the thought process for preparing a simulation diagram of a sys­
tem is nearly identical to the steps required to arrive at a Simulink diagram.
Before we delve further into the Simulink library, let’s run one of the Simulink models for simu­
lating the step response of the second-order system.
5.2.2  Running a Simulink Model
The Simulink model is similar to a conventional block diagram of a system. For a system with ana­
log components, it embodies the algebraic and differential equations of the continuous-time math 
model. For inherently discrete-time systems, the Simulink model encapsulates algebraic and dif­
ference equations governing the system’s behavior. Simulink models of hybrid systems containing 
analog and discrete-time components implement solutions to algebraic, differential and difference 
equations.
A computer program is created from the Simulink model to solve the equations that comprise 
the mathematical model of the system. Some of its functions include initialization of state variables, 
calculation of state derivatives, solution of algebraic equations, updating the state variables and 
calculation of the system’s outputs. Simulink offers a variety of numerical integrators to advance 
the continuous-time state vector over an integration step. The user has the option of choosing a par­
ticular integrator and step size (applicable for fixed-step size algorithms), tolerances for satisfying 
accuracy requirements, the simulation start and stop times, and exchanging simulation data with 
MATLAB via The MATLAB Workspace.
Clicking on the “Model Configuration Parameters” icon located directly under 
“Simulation” in the Simulink tool bar leads to a dialog box like the one shown in Figure 5.6 
where the simulation is configured according to the user’s preferences as previously described. The 
improved Euler integrator (Heun’s method) with a fixed step size of 0.01 s and simulation time of 
5 s has been selected.
After configuring the simulation, hitting the “Start” icon on the Simulink tool bar begins the 
simulation. The simulation terminates when the simulation time reaches the selected “stop time” 
of 5 s.
The simplest way to view simulation output is to select one of the scopes, double click it, and 
observe the time history of its input. The output of the second integrator “y” is displayed in Figure 5.7.
FIGURE 5.6  Dialog box for configuring simulation.

354
Simulation of Dynamic Systems with MATLAB® and Simulink®
A scope output graph can be edited in Simulink by hitting the drop down arrow located under 
“File” at the top of Figure 5.7. Properties related to the overall appearance of the figure such as 
colors, axis scales and limits, line thickness, labels, etc. are under the control of the scope property 
editor. Figure 5.8 shows the result of editing the scope output in Figure 5.7.
The simulation results can also be imported to the MATLAB Workspace several different ways. 
For simulation data displayed in scopes, the process consists of hitting the “Configuration 
Properties” icon directly under “File” in the Simulink scope menu bar. A “Configuration 
Properties” dialog box opens and the “Logging” option at the top is selected. A second dialog 
box opens and the variable (or variables) to be saved are named. Additional properties of the data 
are specified as shown in Figure 5.9.
Once in the MATLAB Workspace, the logged signals can be graphed from within the MATLAB 
environment. Figures 5.10 through 5.12 illustrate the results of data logging “ydd,” “yd” and “y,” 
FIGURE 5.7  Screen capture of ‘y(t)’ scope output.
FIGURE 5.8  Screen capture after editing of Figure 5.7.

355
Simulink®
respectively, for subsequent plotting in MATLAB. An additional scope was added to the model to 
capture the second derivative “ydd.”
EXERCISES
	5.1	
Suppose the flow out of Tank 1 enters Tank 2 at the bottom instead of the top.
	
a.	 Amend the cascaded tank model equations to account for the interaction between the 
tanks.
	
b.	 Run the simulation for the baseline conditions given in the text and prepare similar graphs 
to those in Figures 5.129–5.132.
	
c.	 Run the simulation for the parameter values in Cases I–V given in the text for
	
i.	 tfinal = 30 min
	
ii.	 tfinal sufficient for steady-state to be achieved and prepare a tables similar to 
Table 5.5.
FIGURE 5.9  Dialog boxes for enabling data logging of scope signals.
0
0.5
–5
–2.5
0
2.5
d2y/dt2
5
7.5
10
12.5
15
Second derivative d2y/dt2 versus time
1
1.5
2
2.5
K = 1, ωn = 4 rad/s, ζ = 0.5
3
4
4.5
5
3.5
t (s)
FIGURE 5.10  MATLAB plot of second-order system response dy2/dt2.

356
Simulation of Dynamic Systems with MATLAB® and Simulink®
	5.2	
For the case of non-interacting tanks (outflow from Tank 1 flows in to top of Tank 2), deter­
mine the constant flowrate “A” from the external source which results in Tank 1 filling up 
without overflowing. Use baseline conditions for all parameters other than “A”.
	5.3	
Modify the simulation to allow the value of K2 to vary continuously between zero and 1, i.e. 
f1,2 = K2 f0,2, 0 ≤ K2 ≤ 1
	
	
Run baseline simulations for 3 values of K2, between zero and 1, until steady-state is achieved.
	
a.	 Prepare plots similar to Figures 5.129–5.132.
	
b.	 Prepare a table similar to Table 5.5.
0
0.5
0
0.2
0.4
y
0.6
0.8
1
1.2
y(t) versus time
1
1.5
2
2.5
K = 1, ωn = 4 rad/s, ζ = 0.5
3
4
4.5
5
3.5
t (s)
FIGURE 5.12  MATLAB plot of a second-order system unit step response.
0
0.5
–0.5
0
0.5
dy/dt
1
1.5
2
2.5
Second derivative dy/dt versus time
1
1.5
2
2.5
K = 1, ωn = 4 rad/s, ζ = 0.5
3
4
4.5
5
3.5
t (s)
FIGURE 5.11  Parameter dialog box for saving output to the MATLAB Workspace.

357
Simulink®
5.3  SIMULATION OF LINEAR SYSTEMS
Simulink offers the user a variety of approaches when it comes to simulation of linear continu­
ous-time systems. The form of the system model generally dictates the choice of blocks from the 
“Continuous” sublibrary to be used in the Simulink model. For example, a linear second-order 
system comprising two first-order systems in series like that shown in Figure 5.13 suggests an over­
all Simulink model constructed using Simulink models of the individual first-order systems.
The Simulink diagram of the system is shown in Figure 5.14. Note that the two integrators are 
not in series like they were when the system model was a second-order differential equation. The 
state variables are x and y.
A Simulink model of the cascaded first-order systems employing consecutive “Integrator” 
blocks is easily obtained once the variable x is eliminated from the coupled first-order differential 
equations in Figure 5.13. The resulting second-order differential equation in y and the Simulink 
diagram is left as an exercise.
5.3.1  Transfer Fcn Block
A glimpse of the Simulink blocks in the “Continuous” sublibrary reveals additional options for 
simulation of linear system models. The “Transfer Fcn” and “Zero-Pole” blocks provide 
alternative representations for the dynamics of a linear continuous-time component. The n individ­
ual integrators and arithmetic blocks for a system component with nth-order dynamics are collapsed 
into a single block, incorporating the higher-order dynamics. The “Transfer Fcn” and “Zero-
Pole” blocks correspond to transfer function models in polynomial and factored form, respectively.
To illustrate the use of the “Transfer Fcn” block, consider a variation of the case study in 
Section 2.8 for the submarine depth control system. The reference signal vcom(t) for the control 
loop is the command depth rate and the controlled variable is the actual depth rate v(t) as shown in 
Figure 5.15. The depth y(t) is obtained by integrating the depth rate v(t).
The submarine is assumed initially to be in steady state at the surface when the command depth 
rate is suddenly increased to 25 ft/s and held constant for 30 s and then returned to zero. The transfer 
function for the controller and stern plane actuator is
	
G
s
s
E s
K s
K
s
K
K
C
C
I
C
I
( )
( )
=
=
+
=
=
θ( )
(
0.6, 
0.1)
	
(5.2)
dx + x = K1u
τ1 dt
u
y
x
dy + y = K2x
τ2 dt
FIGURE 5.13  A second-order system comprised of two cascaded first-order systems.
FIGURE 5.14  Simulink diagram of a second-order system shown in Figure 5.13.

358
Simulation of Dynamic Systems with MATLAB® and Simulink®
and the submarine dynamics is modeled by the transfer function
	
G
s
V s
s
K s
K
s
K
K
P( )
( )
=
=
+
+
=
=
=
( )
(
20, 
10, 
10)
θ
τ
θ
θ
θ
θ


τ
1
	
(5.3)
The Simulink diagram is shown in Figure 5.16. A “Transfer Fcn” block was used to model 
the controller and submarine dynamics.
Note the use of two step blocks with the same amplitude (25 ft/s), the first commencing at t = 0 
and the second starting at t = 30 s along with the summation block to implement the overall com­
mand depth rate signal. The command and actual depth rates are multiplexed and fed to the scope in 
the upper right corner of the diagram. The submarine depth is captured by the scope directly below. 
The simulation was configured using Simulink’s fixed-step “ode4” numerical integrator with step 
size 0.01 s. The “ode4” numerical integrator belongs to a family of numerical integrators collec­
tively referred to as Runga–Kutta. Chapter 6 includes a discussion of Runga–Kutta integration.
The command and actual depth rate signals are shown in Figure 5.17. Note the discontinuity in 
the actual depth rate at t = 0 and t = 30 s. This implies the existence of a direct path from the com­
mand depth rate vcom to the actual depth rate v without integrators present. The direct path is not 
apparent in Figure 5.16; however, it would be evident on a simulation diagram of the system.
The stern plane angle (°) and the actual submarine depth (ft) are shown in Figure 5.18.
The presence of a direct path with only algebraic blocks from command input vcom to the actual 
submarine depth rate v is easier to visualize if we express the transfer functions in Figure 5.16 
­differently, that is,
	
G
s
s
E s
K
K
s
C
C
I
( )
( )
=
=
+
θ( )
	
(5.4)
FIGURE 5.15  Submarine depth rate control system.
FIGURE 5.16  Simulink diagram for sub depth control using transfer function blocks.

359
Simulink®
	
G
s
V s
s
K s
K
s
P( )
( )
=
=
+
+
( )
θ
θ
θ

τ
1
	
(5.5)
	
=
+
−
+
K
K
K
s


θ
θ
θ
τ
τ
τ
(
(
))
1
	
(5.6)
Hence, the direct path starts from “v _ com” through the summer and on through constant blocks 
with gains “KC” and “Kthd/tau” to the output “v.” The Simulink diagram in Figure 5.16 can 
be modified to implement the controller and submarine dynamics transfer functions as given in 
Equations 5.4 and 5.6 (see Exercise 5.5).
FIGURE 5.17  Command and actual submarine depth rates.
(a)
(b)
FIGURE 5.18  Simulated (a) stern plane angle (deg) and (b) sub depth (ft).

360
Simulation of Dynamic Systems with MATLAB® and Simulink®
The submarine depth, shown in Figure 5.18, is continuous at t = 0 due to the presence of the 
integrator between “v” and “y.”
Referring to Figure 5.15, the closed-loop transfer function is
	
V s
V
G
s G
s
G
s G
s
s
C
P
C
P
( )
( )
( )
( )
( )
com( )
=
+
1
	
(5.7)
	
=
+
+
+
+
+
+
+
((
)
)((
) (
))
((
)
)((
) (
)
K s
K
s
K s
K
s
K s
K
s
K s
K
s
C
I
C
I


θ
θ
θ
θ
τ
τ
1
1
1 ) 	
(5.8)
	
=
+
+
+
+
+
+
(
)(
)
(
)
(
)(
)
K s
K
K s
K
s
s
K s
K
K s
K
C
I
C
I


θ
θ
θ
θ
τ
1
	
(5.9)
The steady-state value v(∞) resulting from the step input vcom(t) = 25, t ≥ 0 is obtained from the 
final value theorem (Section 4.2),
	
v
s V s
s
K s
K
K s
K
s
s
K s
K
s
s
C
I
C
I
(
)
lim
( )
lim
(
)(
)
(
)
(
)(
∞=
=
+
+
+
+
+
→
→
0
0
1
θ
θ
τ
K s
K
s
θ
θ
+






=
)
25
25
	
(5.10)
confirmed in Figure 5.17, which shows the depth rate v(t) approaching the commanded 25 ft/s once 
the transient response has vanished.
The discontinuity in depth rate at t = 0 shown in Figure 5.17 can also be verified. According to 
the initial value; theorem,
	
v
s V s
s
K s
K
K s
K
s
s
K s
K
s
s
C
I
C
I
(
)
lim
( )
lim
(
)(
)
(
)
(
)
0
1
+
→∞
→∞
=
=
+
+
+
+
+
θ
θ
τ
(
)
K s
K
s
θ
θ
+






25
	
(5.11)
	
=
+
+
+
+
+
+
→∞
lim
(
(
))(
(
))
(
))
(
(
))(
(
))
s
C
I
C
I
K
K
s
K
K
s
s
K
K
s
K
K
s


θ
θ
θ
θ
τ
(
1





25
	
(5.12)
	
=
+
=
+
=
/
25
25 0 6 20
10
0 6 20
13 64
K K
K K
C
C


θ
θ
τ
( . )(
)
( . )(
)
.
ft s
	
(5.13)
is in agreement with the graph of v(t) shown in Figure 5.17.
The following example further illustrates the use of the “Transfer fcn” block.
EXAMPLE 5.1
For the submarine depth rate control system shown in Figure 5.15,
	
a.	Find the analytical solution for the submarine depth rate v(t), 0 < t ≤ 30 in response to 
the command input vcom(t) = 25, t ≥ 0.
	
b.	Model the closed-loop control system dynamics using a “Transfer fcn” block for 
V(s)/Vcom(s) and use it to simulate the depth rate response to the command depth rate 
shown in Figure 5.17. Compare the simulated and analytical depth rate responses for v(t), 
0 < t ≤ 30.

361
Simulink®
	
a.	From Equation 5.9,
	
V s
K s
K
K s
K
s s
K s
K
K s
K
V
C
I
C
I
( )
(
)(
)
(
)
(
)(
)
=
+
+
+
+
+
+








θ
θ
θ
θ
τ
1
com( )s
	
(5.14)
	
=
+
+
+
+
+
+
+
+
(
(
)
)
(
)
(
)
K K s
K K
K K s
K K
K K s
K K
K K s
K
C
C
I
I
C
C
I




θ
θ
θ
θ
θ
θ
θ
2
2
1
τ
IK
s
θ






25
	
(5.15)
	
=
+
+
+
+






12
8
1
22
9
1
25
2
2
s
s
s
s
s 	
(5.16)
	
=
+
+
+
+






25
22
12
8
1
9 22
1 22
2
2
s
s
s s
s
{
(
)
}
/
/
	
(5.17)
	
	
Using partial fraction expansion of the right-hand side of Equation 5.17 followed by 
inverse Laplace transformation, the solution for v(t), 0 < t ≤ 30 becomes
	
v t
t
t
t
( )
sin
/
=
−





−



−
25
25
22
10
7
44
47
4
7
44
9
44
e
cos









< ≤
,
0
30
t
	
(5.18)
	
b.	The analytical solution for v(t) in Equation 5.18 is incorporated in Simulink using a “Sine 
wave” block from the “Sources” sublibrary and a “Math Function” block from the 
“Math” sublibrary for the exponential term. The Simulink diagram appears in Figure 5.19.
	
	
The “Sine Wave” parameters dialog box for the cosine term cos ( 7 44
/
 t) in the 
analytical solution, Equation 5.18, is shown in Figure 5.20. Note that the phase angle is 
π/2 rad to produce the cosine function.
FIGURE 5.19  Simulink diagram with simulated and analytical submarine depth rate.

362
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
The control system loop with input vcom(t) and output v(t) in Figure 5.15 is replaced 
with the equivalent closed-loop transfer function V(s)/Vcom(s) in Figure 5.21.
	
	
The Simulink diagram shown in Figure 5.22 includes a “Transfer fcn” block for 
implementing the closed-loop transfer function. The simulated and analytical depth rates 
for a time period 0 < t ≤ 12 s are shown in Figure 5.23. The graphs were generated in the 
MATLAB M-file “Ch5_Ex5_1.m” by saving the data in the scope shown with the heavy 
line multiplexed input in Figure 5.22. The complete set of time values along with the 
simulated and analytical results is saved in the MATLAB Workspace in a named array 
set in the scope dialog box. Also shown is the difference between the two depth rates. It 
is clear from looking at the difference that the simulated depth rate is nearly identical to 
the analytical solution.
FIGURE 5.20  “Sine Wave” parameter box to generate cosine term in analytical solution.
FIGURE 5.21  Closed-loop transfer function of submarine depth rate control system.

363
Simulink®
5.3.2  State-Space Block
The process of transforming models consisting of linear algebraic and differential equations into 
state variable form was demonstrated in Section 2.6. Conversion of SISO (single input–single out­
put) or MIMO (multiple input–multiple output) system transfer functions to state-space models 
and vice versa was illustrated using the control system toolbox in Section 4.10. Simulink provides 
FIGURE 5.22  Simulink diagram using “Transfer fcn” block for submarine closed-loop depth rate 
control system dynamics.
FIGURE 5.23  Analytical and simulated depth rate using “Transfer fcn” for V(s)/Vcom(s).

364
Simulation of Dynamic Systems with MATLAB® and Simulink®
a mechanism for incorporating state variable models of system components using the “State-
Space” block located in the “Continuous” sublibrary. A partial description of the “State-
Space” block is shown in Figure 5.24. The next example illustrates its use.
EXAMPLE 5.2
An automobile traveling along a level road at a constant speed v0 encounters a speed bump shown in 
Figure 5.25. The vehicle’s suspension system (front and rear springs and shock absorbers) is modeled 
by linear springs and dampers, and the compliance of the tires is modeled by front and rear springs. 
The vehicle cab motion is limited to heave in the y-direction and a small amount of pitch θ of the vehi­
cle’s longitudinal axis. The tires are assumed to remain in contact with the road surface at all times.
The road profile is responsible for the system’s input u = [uf ur]T, where uf and ur are the height 
of the road (with respect to some reference) underneath the front and rear tires, respectively. 
The system has three translational degrees of freedom, y, yf, yr, which are the vertical displace­
ments of the vehicle cab and both front and rear axles from their equilibrium positions. The lone 
rotational degree of freedom is the pitch angle θ.
Three of the four model equations are obtained by equating the sum of suspension and tire 
forces acting on the three masses to the appropriate acceleration term, Mÿ, Mfÿr, and Mrÿr. The 
fourth equation sets the torques about the vehicle cab’s center of gravity created by the suspension 
forces equal to the inertial acceleration Iθ.
The model equations are listed as follows:
	My
K y
y
L
B y
y
L
K y
y
L
B
fs
f
f
f
f
f
rs
r
f
f




=
−
+
+
−
+
+
−
−
+
[
(
)]
[
(
)]
[
(
)]
[
θ
θ
θ



y
y
L
r
r
−
−
(
)]
θ
	
(5.19)
     =
+
+
+
+
+
+
+
–(
) – (
)
(
–
K
K
y
B
B y
K y
B y
K y
B y
K L
K
fs
rs
f
r
fs
f
f
f
rs
r
r
r
rs r
fs
 



L
B L
B L
f
r r
f
f
)
(
–
)
θ
θ
+
	
(5.20)
FIGURE 5.24  The Simulink “State-Space” block.

365
Simulink®
	
M y
K y
y
L
B y
y
L
K u
y
f
f
fs
f
f
f
f
f
ft
f
f




= −
−
+
+
−
+
+
−
[
(
)]
[
(
)]
(
)
θ
θ
	
(5.21)
	
= −
+
−
+
+
+
+
+
(
)
K
K y
B y
K y
B y
K L
B L
K u
fs
ft
f
f
f
fs
f
fs f
f
f
ft
f



θ
θ
	
(5.22)
	
M y
K y
y
L
B y
y
L
K u
y
r
r
rs
r
r
r
r
r
rt
r
r




= −
−
+
+
−
+
+
−
[
(
)]
[
(
)]
(
)
θ
θ
	
(5.23)
	
= −
+
−
+
+
+
+
+
(
)
K
K y
B y
K y
B y
K L
B L
K u
rs
rt
r
r
r
rs
r
rs r
r r
rt
r



θ
θ
	
(5.24)
	
I
K y
y
L
B y
y
L
L
fs
f
f
f
f
f
f




θ
θ
θ
=
−
+
+
−
+
{
[
(
)]
[
(
)]}
	
	
−
−
−
+
−
+
{
[
(
)]
[
(
)]}
K y
y
L
B y
y
L
L
rs
r
r
r
r
r
r
θ
θ



	
(5.25)
	
= −
+
−
+
+
+
{
)
(
) )
(
)
K L
K L
B L
B L
K L
K L y
fs f
rs r
f
f
r r
rs r
fs f
2
2
2
2
θ
θ
	
	
+
−
+
−
+
−
(
)
B L
B L y
K L y
K L y
B L y
B L y
r r
f
f
fs f
f
rs r
r
f
f
f
r r
r


	
(5.26)
Note that the equations are linear as a result of assuming small pitch angles, allowing the 
approximations sin θ ≈ θ and cos θ ≈ 1.
	
a.	Introduce state variables
	
x
y x
y
x
y x
f
r
1
3
5
7
=
=
=
=
,
,
,
,θ 	
	
x
y x
y
x
y
x
f
r
2
4
6
8
=
=
=
=




,
,
,
,θ 	
	
and solve for the state derivatives, that is, find the matrices A and B in x = Ax + Bu.
FIGURE 5.25  Moving vehicle and suspension system model.

366
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	Define the outputs as y1 = y, y2 = yf, y3 = yr, and y4 = θ and find matrices C and D in 
y = Cx + Du.
	
c.	Simulate and plot the vehicle dynamics using the following values for the weight of the 
vehicle and tires, suspension parameters, forward speed, and speed bump profile.
	
W
W
W
K
K
f
r
fs
rs
=
=
=
=
=
42
 lb
125 lb
125 lb
12  lb/in
18  lb/in
00
0
0
,
,
,
,
,
B
B
K
K
f
r
ft
rt
=
=
=
=
25 lb s/in
35 lb s/in
 lb/in
 lb/in
,
,
,
1100
1100
,
,
.
,
.,
.,
,
.,
I
L
L
v
A
L
f
r
b
=
=
=
=
=
4
 inlb s
55in
65in
2  mph
4 in
2
0 000
0
0
=1 ft 	
	
a.	Using the definition of the state variables and solving for the state derivatives in Equations 
5.19 through 5.26 give
	
x
x
1
2
=
	
(5.27)
	
x
K
K
M
x
B
B
M
x
K
M x
B
M x
K
M x
B
M x
K
fs
rs
f
r
fs
f
rs
rs
2
1
2
3
4
5
6
= −
+
−
+
+
+
+
+
+
(
)
(
)
(
rs r
fs f
r r
f
f
L
K L
M
x
B L
B L
M
x
+
+
+
)
(
)
7
8
	
(5.28)
	
x
x
3
4
=
	
(5.29)
	
x
K
M x
B
M x
K
K
M
x
B
M x
K L
M
x
B L
M
x
fs
f
f
f
fs
ft
f
f
f
fs f
f
f
f
f
4
1
2
3
4
7
8
=
+
−
+
−
+
+
(
)
+ K
M u
ft
f
f
	
(5.30)
	
x
x
5
6
=
	
(5.31)
	
x
K
M x
B
M x
K
K
M
x
B
M x
K L
M
x
B L
M x
rs
r
r
r
rs
rt
r
r
r
rs r
r
r r
r
6
1
2
5
6
7
8
=
+
−
+
−
−
−
(
)
+ K
M u
rt
r
r
	
(5.32)
	


x
x
7
8
=
	
(5.33)
	
x
K L
K L
I
x
B L
B L
I
x
K L
I
x
B L
I
x
K L
rs r
fs f
r r
f
f
fs f
r f
rs r
8
1
2
3
4
=
−
+
−
+
+
−
(
)
(
)
I
x
B L
I
x
K L
K L
I
x
B L
B L
I
x
r r
fs f
rs r
f
f
r r
5
6
2
2
7
2
2
8
−
−
−
−
+
(
)
(
)
	
(5.34)
	
	
The system matrix A and input matrix B are
A
K
K
M
B
B
M
K
M
B
M
K
M
B
M
K L
K L
M
B
fs
rs
f
r
fs
f
rs
r
rs r
fs f
r
=
−
+
−
+
−
0
1
0
0
0
0
0
0
(
)
(
)
L
B L
M
K
M
B
M
K
K
M
B
M
K L
M
B L
M
r
f
f
fs
f
f
f
fs
ft
f
f
f
fs f
f
f
f
f
−
−
+
−
0
0
0
1
0
0
0
0
0
0
(
)
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
K
M
B
M
K
K
M
B
M
K L
M
B L
M
rs
r
r
r
rs
rt
r
r
r
rs r
r
r r
r
−
+
−
−
−
(
)
0
1
(
)
(
)
(
K L
K L
I
B L
B L
I
K L
I
B L
I
K L
I
B L
I
K
rs r
fs f
r r
f
f
fs f
f
f
rs r
r r
fs
−
−
−
−
−
L
K L
I
B L
B L
I
f
rs r
f
f
r r
2
2
2
2
+
−
+






)
(
)


(5.35)

367
Simulink®
	
B
K
M
K
M
ft
f
ft
r
=






0
0
0
0
0
0
0
0
0
0
0
0
0
0
	
(5.36)
	
b.	The output matrix C and direct transmission matrix D are given by
	
C
D
=






=
1
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
1
0
0
0
0
,
0
0
0
0
0





	
(5.37)
	
The direct transmission matrix D is all zeros, since the system inputs uf and ur are not 
directly coupled to the outputs, that is, step changes in either input are integrated before 
influencing the outputs, and, hence, the outputs are continuous at the time the step 
input(s) is applied.
	
c.	The Simulink diagram for simulating the vehicle’s response as it travels over the speed 
bump is shown in Figure 5.26. The “state–space” block parameters are the matrices 
FIGURE 5.26  Simulink diagram for vehicle response traveling over a speed bump.

368
Simulation of Dynamic Systems with MATLAB® and Simulink®
A, B, C, and D of Equations 5.35 through 5.37, which have been defined in a MATLAB 
M-file “Ch5_VehParams.m” for convenience.
	
	
The input displacements uf and ur are based on the speed bump profile shown in 
Figure 5.25 and the forward speed of the car. The front tire displacement is given by
	
u
t
D
L
v
A
L D
v t
D
L
v
t
D
L
v
t
D
L
v
f
b
=
<
−
−
−
≤≤
+
>
+


0
2
0
0
0
0
0
0
0
0
0
0
0
,
cos
(
),
,
π



	
(5.38)
	
	
The Simulink blocks to implement uf (and ur) are shown in the top left (and lower left) 
corner of Figure 5.26. Note the use of the “Clock” from the “sources” sublibrary to 
generate the simulation time variable “t.” Also, the wider (and heavier) arrows in and out 
of the “state-Space” block designate the presence of nonscalar signals, and the “2” 
and “4” indicate the number of components in each.
	
	
The inputs uf and ur are captured in a scope and plotted for 1.75 < t ≤ 2.5 s in the 
M-file “Ch5_Ex5_2.m” (see Figure 5.27).
	
	
The output vector “y” of the “state-space” block is decomposed in a “Demux” 
block and sent to a scope with four input channels (one for each output). It is also saved 
for use by the M-file “Ch5_Ex5_2.m.” The results are plotted for the interval 1.5 ≤ t ≤ 3.5 
s in Figure 5.28.
	
	
The vehicle cab displacement varies from –0.189 to 0.627 in. despite the 4 in. height 
of the speed bump. Also, the pitch of the vehicle is constrained to –0.403° ≤ θ ≤ 0.358°.
	
	
The “Data history” tab in the “scope” with multiplexed input containing “uf” 
and “ur” is shown in Figure 5.29. Simulation time values and front and rear tire displace­
ments are saved to the MATLAB Workspace in array “uf _ ur.”
	
	
The following MATLAB statements placed at the beginning of M-file “Ch5_Ex5_2.m” 
store the saved values of the time array and tire displacements in arrays “t,” “uf,” and 
“ur” and produce the graph shown in Figure 5.27.
4
3
2
1
0
4
3
2
ur (in)
uf (in)
1
0
Front tire displacement versus time
1.8 1.85  1.9  1.95
2
2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4
1.8 1.85  1.9  1.95
2
2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.4
Rear tire displacement versus time
t (s)
FIGURE 5.27  Inputs uf and ur for vehicle traveling at constant speed v0.

369
Simulink®
t=uf_ur(:,1);
uf=uf_ur(:,2);
ur=uf_ur(:,3);
figure(1) % begin Figure 5.27
subplot(2,1,1)
plot(t,uf,'b','LineWidth',1.3)
grid on
set(gca,'XTick',[1.8:0.05:2.4],'YTick',[0:4],'FontSize',11)
ylabel('u_f (in)','FontSize',13)
axis([1.75 2.45 −0.5 4.5])
set(gca,'XTick',[1.8:0.05:2.4],'YTick',[0:4])
Vehicle c.g. displacement versus time
Front  axle displacement versus time
Rear axle displacement versus time
Vehicle pitch angle versus time
1.5
0
1
2
3
0
1
2
3
0
y (in)
yf (in)
yr (in)
θ (deg)
1
2
3
0
–0.5
0.5
1.75
2
2.25
2.5
2.75
3 
3.25
3.5
t (s)
FIGURE 5.28  Outputs y, yf, yr, and θ of vehicle suspension system for 1.5 ≤ t ≤ 4 s.
FIGURE 5.29  Saving “uf” and “ur” for plotting in M-file “Ch5_Ex5_2.m.”

370
Simulation of Dynamic Systems with MATLAB® and Simulink®
title('Front Tire Displacement vs Time','FontSize',11)
subplot(2,1,2)
plot(t,ur,'b','LineWidth',1.3)
grid on
ylabel('u_r (in)','FontSize',13)
axis([1.75 2.45 −0.5 4.5])
set(gca,'XTick',[1.8:0.05:2.4],'YTick',[0:4],'FontSize',11)
xlabel('t (s)','FontSize',12)
title('Rear Tire Displacement vs Time','FontSize',11))
	
The first statement runs another M-file “Ch5 _ VehParams.m,” which loads the param­
eter values. The next command sim (‘CarDynamics’) causes execution of the Simulink 
model “CarDynamics.mdl.”
EXERCISES
	5.4	
Modify the cascaded tank system by introducing a third tank with area A3 = 7.5 ft2 and suffi­
ciently tall to hold the spillover from both tanks. Run several simulations where spillover from 
one or both tanks occurs and plot the tank levels H1(t), H2(t), and H3(t) vs. time on the same 
graph. Stop the simulations when steady-state is achieved. Specify the entire set of parameter 
values used in each simulation run.
	5.5	
For the submarine depth control system shown in Figure 5.15,
	
a.	 Draw a simulation diagram. Is there a direct connection from vcom to v?
	
b.	 Redraw the Simulink diagram in Figure 5.16 using the alternate expressions for the con­
troller and submarine dynamics transfer functions in Equations 5.4 and 5.6.
	
c.	 Run the Simulink model and compare the responses for v(t), y(t), and θ(t) with those shown 
in the text.
	5.6	
Two linear tanks are arranged in series as shown in Figure E5.6:
	
a.	 Write the differential equation models for the tanks.
	
b.	 The system parameters are
	
A1
2
2
2
1
3
2
3
50
100
0 2
0 3
=
=
=
=
ft
ft
ft/ft /min
and
ft/ft /min
,
,
.
,
.
A
R
R
	
	
	
Prepare a Simulink diagram of the system, and simulate the response of both tank 
levels under the following conditions:
	
i.	 H1(0) = 0, H2(0) = 0, F1(t) = 40 ft3/min, t ≥ 0
	
ii.	 H1(0) = 0, H2(0) = 10, F1(t) = 0, t ≥ 0
	
iii.	 H
H
F t
t
t
t
t
t
1
2
1
0
0
0
0
5
0
5
5
50
5
10
0
0
( )
,
( )
,
( )
,
,
,
=
=
=
≤≤
−
+
< ≤
>





FIGURE E5.6 

371
Simulink®
	
	
Obtain one graph with time histories of H1(t) and H2(t) and a second graph with F0(t), 
F1(t), and F2(t).
	
c.	 Eliminate H1(t) from the two first-order differential equations in part (a) to obtain a sec­
ond-order differential equation relating H2(t) and F1(t).
	
d.	 Prepare a Simulink diagram based on the continuous-time model in part (c).
	
e.	 Run the Simulink model for the same conditions in part (b), and compare the response for 
H2(t) with the one obtained in part (b).
	
f.	 Find the analytical solution [H2(t)]anal when both tanks are initially empty and 
F1(t) = 40 ft3/min, t ≥ 0. Compare the analytical solution [H2(t)]anal with the simulated 
solution [H2(t)]sim obtained in part (b).
	
Hint: Use Simulink to implement the analytical solution and feed both [H2(t)]sim and 
[H2(t)]anal into a summer to obtain the difference.
	5.7	
Solve Exercise 2.3 using Simulink.
	5.8	
Solve Exercise 2.4 using Simulink.
5.4  ALGEBRAIC LOOPS
Execution of the Simulink model in this chapter, Figure 5.16, poses a dilemma often encountered 
when simulating dynamic systems with feedback loops. A runtime warning (default) or error 
appears in the MATLAB Command Window stating
Block diagram 'SubDepth_A' contains 1 algebraic loop(s). To see more 
details about the loops use the command
Simulink.BlockDiagram.getAlgebraicLoops('SubDepth_A') or the command 
line Simulink debugger by typing sldebug('SubDepth_A') in the MATLAB 
command window. To eliminate this message, set the Algebraic loop option 
in the Diagnostics page of the Configuration Parameters Dialog to 
"None".
Component: Simulink | Category: Block diagram warning
Found algebraic loop containing:
'SubDepth_A/Controller and Stern Plane Actuator Transfer Fcn'
Component: Simulink | Category: Block
'SubDepth_A/Sub Dynamics Transfer Fcn'
Component: Simulink | Category: Block
'SubDepth_A/Sum1' (algebraic variable)
An algebraic loop is any closed loop appearing in the Simulink diagram composed of strictly 
algebraic and implicit blocks such as the implicit discrete-time numerical integrators (discussed in 
Section 5.6). Consequently, the output of any block in an algebraic loop is ultimately an implicit 
function of itself. In large scale simulations with several 100 blocks, it is nearly ­impossible to iden­
tify the presence of an algebraic loop by visual inspection. The Simulink diagrams of even relatively 
simple simulations with only a handful of blocks may contain ­algebraic loops, which escape detec­
tion. Simulink (and other block-oriented continuous ­simulation ­languages) detects the presence of 
an algebraic loop and reports the blocks comprising it.
Before we discuss its implications, let us confirm the existence of an algebraic loop in the 
Simulink model “SubDepth_A.mdl” consisting of the two “Transfer fcn” blocks and the 
“Sum” block. Referring to Figure 5.16, the controller and stern plane actuator transfer function can 
be rewritten as follows:
	
G
s
s
s
s
C( )
.
.
.
.
=
+
=
+
0 6
0 1
0 6
0 1
	
(5.39)

372
Simulation of Dynamic Systems with MATLAB® and Simulink®
and the submarine dynamics transfer function is expressible as
	
G
s
s
s
s
P( ) =
+
+
=
+
+
20
10
10
1
2
8
10
1 	
(5.40)
leading to an equivalent block diagram shown in Figure 5.30.
The algebraic loop is shown in bold, and a similar algebraic loop is present in the Simulink dia­
gram for “SubDepth_A.mdl.” Note that if the controller and stern plane actuator transfer function 
were replaced by a pure gain, the diagram would still have an algebraic loop due to the direct path 
from the input to the output in the submarine dynamics transfer function.
The dilemma posed by algebraic loops can be demonstrated by looking at the equations the 
Simulink program is attempting to solve in the submarine example at the time t = 0. After initial­
izing the state θ(0) and v(0) and evaluating the input vcom(0), Simulink calculates e(0) according to
	
e
v
v
( )
( )
( )
0
0
0
=
−
com
	
(5.41)
Existence of direct paths, that is, pure gain (zero-order dynamics), from e(t) to θ(t) and θ(t) to v(t) 
implies
	
v( )
( )
0
0
= 2θ
	
(5.42)
	
θ( )
.
( )
0
0
0
=
6e
	
(5.43)
Substituting θ(0) in Equation 5.43 into Equation 5.42 gives
	
v
e
e
( )
[ .
( )]
.
( )
0
0
0
0
=
=
2
6
12
	
(5.44)
Replacing e(0) in Equation 5.44 with e(0) in Equation 5.41 results in
	
v
v
v
( )
. [
( )
( )]
0
0
0
=
−
12
com
	
(5.45)
The circular nature of algebraic loops is demonstrated by Equation 5.45, an implicit equation 
with v(0) on both sides. In the general case, the implicit equation is nonlinear. Simulink attempts to 
solve the implicit equations associated with an algebraic loop using the iterative Newton–Raphson 
method (Chapra and Canale 2002). Solving implicit equation (s) at each iteration, especially 
­nonlinear ones, can dramatically decrease the simulation execution speed. Further, the method can 
fail to converge to a solution.
FIGURE 5.30  Block diagram for submarine depth control showing algebraic loop.

373
Simulink®
The initial depth rate value, more precisely, the value at t = 0+ in the submarine example, is eas­
ily verified from Equation 5.45.
	
v
v
v
(
)
. [
( )
(
)]
0
0
0
+
+
=
−
12
com
	
(5.46)
	
⇒
=
=
=
+
v
v
(
)
.
.
( )
.
. (
)
.
0
1 2
2 2
0
1 2
2 2 25
13 64
com
	
(5.47)
in agreement with the value given in Equation 5.13 as well as the graph for v(t) shown in Figure 5.17.
5.4.1  Eliminating Algebraic Loops
The most desirable method for eliminating an algebraic loop is by means of algebraic manipulation 
of the loop equations to produce an equivalent system explicit in nature. It is up to the user to obtain 
an explicit solution, if one exists, and modify the Simulink diagram accordingly. Simulink does 
not perform the symbolic math operations necessary to obtain the solution shown in Equation 5.47.
To illustrate, consider the block diagram of a system shown in Figure 5.31. The algebraic loop is 
shown in bold.
By algebraic manipulation or similar block diagram reduction techniques, the transfer function 
Y(s)/R(s) is obtained as
	
Y s
R s
K
K G s
K
K G s
( )
( )
(
) ( )
(
)
(
) ( )
=
+
+
+
+
+
1
1
2
	
(5.48)
Suppose the constant K = 1 and the transfer function G(s) = 1/(s + 10). The transfer function 
Y(s)/R(s) reduces to
	
Y s
R s
s
s
( )
( )
. (
)
.
=
+
+
0 5
12
11 5
	
(5.49)
It is left as an exercise to demonstrate that a Simulink diagram based on the block diagram in Figure 
5.31 and one with a single “Transfer Fcn” to implement Equation 5.49 produce identical outputs.
Unfortunately, the dynamic model equations rarely permit this approach. In most cases, the 
­algebraic loop entails nonlinear blocks, making it difficult or impossible to reformulate the ­equations 
to produce a new block diagram with the algebraic loop removed. Several algebraic loops with 
shared blocks may exist, complicating matters even further.
A second approach to dealing with algebraic loops consists of inserting a “Memory” block into 
the loop. A “Memory” block is equivalent to a one-integration step delay. Its output is the input from 
the previous time step. This allows Simulink to calculate outputs of all the blocks in the algebraic 
loop in the proper sequence.
The system shown in Figure 5.32 consists of a cart with an inverted pendulum. The position of 
the cart x(t) and the angle of the pendulum from the vertical θ(t) are of interest. The pendulum is 
FIGURE 5.31  Block diagram of system with algebraic loop.

374
Simulation of Dynamic Systems with MATLAB® and Simulink®
free to rotate without friction in a plane, and the cart moves along a frictionless surface. The input 
is a horizontal force u. The outputs are x and θ.
From Newton’s second law (translation and rotation), the equations of motion are
	
(
)
M
m x
ml
u
+
−
+
=



ml sin 
cos
2θ
θ
θ
θ
	
(5.50)
	
mx
ml
mg


cos 
sin 
θ
θ
θ
+
=
	
(5.51)
where
l is the length of the pendulum
m is the pendulum mass (assumed to be concentrated at the end)
M is the mass of the cart
g is the gravitational constant
Later, in Section 5.6, Equations 5.50 and 5.51 will be converted into a pair of equations, one for 
x and the other with θ where both are explicit functions of the state variables θ and θ.
A Simulink diagram of the system is shown in Figure 5.33.
FIGURE 5.32  Inverted pendulum.
FIGURE 5.33  Simulink model of inverted pendulum with “Memory” block.

375
Simulink®
The algebraic loop shown in bold is broken by the insertion of a “Memory” block, eliminating 
the need for the Newton–Raphson iterative root solving at each integration step.
A simulation of the inverted pendulum when u(t) = 0, t ≥ 0 was run for a period of 10 s using 
a fixed-step numerical integrator. All initial conditions are zero except the initial pendulum 
­deflection, θ(0) = π/2 rad. The output θ(t) is shown in Figure 5.34.
It is important to verify the results obtained when “Memory” blocks are employed to break 
algebraic loops. The delay introduced by the “Memory” block adversely affects the numeri­
cal accuracy and stability of the simulation. A considerable reduction in the time required to 
execute a simulation is hardly a suitable trade-off for inaccurate results. In other words, if the 
integration step size has to be reduced significantly to combat the existence of the “Memory” 
block, then the overall savings in execution time may be insignificant, or worse yet, the net result 
might be an overall increase in time of execution. A “Memory” block is worth considering when 
Simulink reports difficulty in converging to a solution of the implicit equations arising from an 
algebraic loop.
5.4.2  Algebraic Equations
While Simulink is generally used for simulating dynamic systems described by ordinary differ­
ential equations, it can also be used to solve a system of algebraic equations. For example, the 
­algebraic equations
	
y
f x
x
g y
=
=



( )
( ) 	
(5.52)
comprise an algebraic loop. Consider the dynamic system modeled by
	
d
d
y
t
F x y
f x
y
x
g y
=
=
−
=





( , )
( )
( )
	
(5.53)
280
255
230
205
180
155
130
105
80 0
0.5
Angular displacement (deg) versus time (s)
θ(t), (deg)
1.5
1
2
2.5
3
3.5
4
4.5
5
5.5
6
t (s)
FIGURE 5.34  Simulink output for θ(t), t ≥ 0 using a “Memory” block.

376
Simulation of Dynamic Systems with MATLAB® and Simulink®
The two parts of Equation 5.53 represent the model of a first-order autonomous system, that is,
	
d
d
y
t
y
f g y
+ −
=
[ ( )]
0
	
(5.54)
Suppose we are able to find an equilibrium point y0 of the system described by Equation 5.54. 
Then (x0, y0), where x0 = g(y0), constitutes a solution to the system of algebraic equations in Equation 
5.52. To illustrate, let us attempt to find a point that lies on the circle x2 + y2 = 100 and the curve 
x = y2/5. In this case,
	
y
f x
x
x
g y
y
=
=
−
=
=
( )
(
)
( )
/
100
5
2 1 2
2
	
(5.55)
The Simulink diagram in Figure 5.35 incorporates an integrator for solution to
	
d
d
y
t
f x
y
x
y
=
−
=
−
−
( )
(
) /
100
2 1 2
	
(5.56)
along with the block to generate x from the second of the two equations in Equation 5.55.
The search for the solution to the algebraic equations in Equation 5.55 begins at (x(0), y(0)) 
where y(0) is the initial condition of the integrator and x(0) = g[y(0)]. Starting from the point (0, 0), 
the approach to the equilibrium point y0 and corresponding value of x0 is viewable by clicking on 
the “Scope” block. The edited output is shown in Figure 5.36.
The solution x0 = 7.804, y0 = 6.247 is visible in the respective “Display” blocks shown in the 
Simulink diagram. The “XY Graph” block allows a view of the trajectory x = g(y) = y2/5 from (0, 
0) up to the solution (x0, y0), as shown in Figure 5.37.
FIGURE 5.35  Simulink diagram for solving algebraic equations in Equation 5.55.

377
Simulink®
If the simulation fails to converge to an equilibrium point, restarting from a new point (x(0), y(0)) 
may help. Only stable equilibrium points of Equation 5.53 can be discovered. Keep in mind that 
nonlinear algebraic equations may possess none, one, or several equilibrium points, and the number 
of such points may not be known beforehand.
A more direct approach to solving nonlinear algebraic equations with Simulink involves the 
use of an “Algebraic Constraint” block. This block changes its output in an iterative 
manner until its input approaches zero indicating that the algebraic constraint equation is satis­
fied, that is, the existence of a solution. Note that a feedback path must exist from the output to 
the input.
0
0.25
8
6
4
2
0
x
8
6
4
2
0
y
0.5
0.75
1
1.25
y versus t
x versus t
t
1.5
1.75
2
2.25
0
0.25
0.5
0.75
1
1.25
t
1.5
1.75
2
2.25
FIGURE 5.36  Graph of x(t) and y(t) from Simulink scope block.
0
0
–1
1
2
3
4
5
6
7
2
4
6
x(t)
y(t)
[x(0), y(0)]
(x0, y0)
y(t) versus x(t)
8
10
FIGURE 5.37  Trajectory from initial point x(0) = 0, y(0) = 0 to solution (x0, y0).

378
Simulation of Dynamic Systems with MATLAB® and Simulink®
The previous system of algebraic equations is solved using “Algebraic Constraint” blocks 
as shown in Figure 5.38. Initial guesses for the variables x and y are required. Note that the inputs 
to both “Algebraic Constraint” blocks have converged to zero and the algebraic states x and 
y are in agreement with the previous solution.
The “Algebraic Constraint” block is an effective tool for locating the equilibrium points 
of a nonlinear dynamic system.
EXERCISES
	5.9	
Run the Simulink model in Figure 5.33 using the “ode1” Euler integrator, and determine the 
largest step size possible for simulating the inverted pendulum dynamics with u(t) = 0, t ≥ 0, 
and θ(0) = π/2 for a period of 10 s. Repeat without the “Memory” block.
	5.10	 Starting with Equations 5.50 and 5.51 for the inverted pendulum,
	
a.	 Find explicit functions f
u
( , , )
θ θ
 and g
u
( , , )
θ θ
 where
	




x
f
u
g
u
=
=
( , , )
( , , )
θ θ
θ
θ θ
and
	
	
b.	 Introduce state variables x1, x2, x3, and x4 where x1 = x, x2 =  x, x3 = θ, and x4 = θ, and find 
the state derivative functions f1(x1, x2, x3, x4, u), f2(x1, x2, x3, x4, u), f3(x1, x2, x3, x4, u), and 
f4(x1, x2, x3, x4, u), where
	
x
f x x x x u
1
1
1
2
3
4
=
(
,
,
,
, ) 	
	
x
f
x x x x u
2
2
1
2
3
4
=
(
,
,
,
, ) 	
FIGURE 5.38  Using algebraic constraint blocks to solve algebraic equations in Equation 5.55.

379
Simulink®
	
x
f x x x x u
3
3
1
2
3
4
=
(
,
,
,
, ) 	
	
x
f
x x x x u
4
4
1
2
3
4
=
(
,
,
,
, ) 	
	
c.	 The outputs are y1 = x and y2 = θ. Find the output functions g1(x1, x2, x3, x4, u) and g2(x1, 
x2, x3, x4, u), that is,
	
y
g x x x x u
1
1
1
2
3
4
=
(
,
,
,
, ) 	
	
y
g x x x x
2
2
1
2
3
4  u
–
(
,
,
,
,
) 	
	
d.	 Prepare a Simulink diagram of the system based on the nonlinear state equations obtained 
in parts (b) and (c). Is an algebraic loop present?
	
e.	 Compare outputs for θ(t), t ≥ 0 using the Simulink diagram from Figure 5.33 and a 
Simulink diagram based on the state equations x = f(x, u), y = g(x, u) for the following 
cases:
	
i.	 u(t) = 0, t ≥ 0 and x1(0) = x2(0) = 0, x3(0) = 1°, x4(0) = 0
	
ii.	 u(t) = 0, t ≥ 0 and x1(0) = x2(0) = x3(0) = 0, x4(0) = 10°/s
	5.11	 Rework the example designed to find the first quadrant solution to
	
y
f x
x
x
g y
y
=
=
−
=
=
( )
(
)
( )
/
100
5
2 1 2
2
and
 
	
	
by looking for an equilibrium point of
	
d
d
x
t
G x y
g y
x
y
f x
=
=
−
=
( , )
( )
( )
	
	5.12	 Find both solutions to the algebraic equations
	
y
y
x
x
=
=
 e
 1
 5 
 
 1 2
–
,
– ( –
) 	
	
using “Algebraic Constraint” blocks.
	5.13	 Consider the system represented in block diagram form in Figure 5.31 and the equivalent 
closed-loop transfer function in Equation 5.48.
	
Find the differential equation relating the output y(t) and input r(t) when
	
G s
K
s
( ) =
+
1
1
τ
 
	
(i)
	
G s
K
s
s
( )
(
)
=
+
+
1
1
2
1
1
τ
τ
 
	
(ii)
	
G s
K
s
s
n
( ) =
+
+
1
2
2
1
ζω
 
	
(iii)

380
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
Prepare Simulink diagrams to simulate the block diagram and transfer function represen­
tations of the system when G(s) = 2/(0.5s + 1) and K = 10. Find and plot the responses to the 
following inputs:
	
i.	 r(t) = û(t), the unit step input
	
ii.	 r(t) = e−t/2, t ≥ 0
	
iii.	 See graph of r(t) in Figure E5.13
5.5  MORE SIMULINK BLOCKS
In this section, we introduce additional Simulink blocks to extend the simulation capabilities devel­
oped so far. The next example is a common one from the field of traffic engineering. The objective 
is to formulate a mathematical model suitable for describing the characteristics of a driver/vehicle 
attempting to follow a lead vehicle in a single lane of traffic. The result is referred to as a micro­
scopic car-following model. Car-following models are an essential component of traffic simulation 
software used to predict traffic flows in tunnels and other roads where passing is restricted.
The basic situation is illustrated in Figure 5.39, which shows a lead vehicle (n – 1) and a following 
vehicle (n), each of length L.
The system, comprised of the lead and following vehicle, is driven (no pun intended) by the 
speed of the lead vehicle xn–1, and the outputs include {xn–1, xn, xn, x n} in addition to the following 
quantities, which relate directly to the combination of lead and following vehicle movements.
	
Vehicle spacing
 
1
: s
x
x
n
n
n
=
−
−
	
(5.57)
	
Vehicle following distance
 
1
:
(
)
d
x
L
x
n
n
n
=
−
−
−
	
(5.58)
	
Speed difference:∆


x
x
x
n
n
n
=
−
−1
	
(5.59)
	
Vehicle gap: g
x
x
x
n
n
n
n
=
−
−1

	
(5.60)
The subscripts “n − 1” and “n” are used, so that we can model a platoon consisting of a lead 
vehicle and several following vehicles. Except for the platoon leader and the last vehicle in the 
FIGURE 5.39  Diagram showing lead and following vehicles.
FIGURE E5.13 

381
Simulink®
platoon, each vehicle operates in a following and lead vehicle mode as depicted in Figure 5.39. 
Platoon dynamics is considered in the next section.
We have yet to formulate a mathematical model that governs the motion of the following vehicle 
in the case of small-to-moderate vehicle spacing. Note that car-following models are not applicable 
at low traffic densities since each vehicle is essentially a leader moving independently of the preced­
ing vehicle.
Standard practice is to postulate an equation for the acceleration of the following vehicle in 
response to certain stimuli that are based on the relative movements of the two vehicles, that is,
	



x t
T
f x
t x t x
t x t
n
n
n
n
n
(
)
(
( ),
( ),
( ),
( ))
+
=
−
−
1
1
	
(5.61)
The acceleration response is delayed by an amount T, which represents the sum of the driver’s 
cognition and reaction times in addition to the vehicle response time. The literature is replete with 
articles and chapters in books describing suitable candidates for the function “f()” in Equation 5.61 
(Bender and Fenton 1966; Haberman 1977; Mesterton-Gibbons 1988; Aycin and Benekohal 2001).
The block diagram in Figure 5.40 represents a specific function developed by the author used to 
simulate realistic traffic in a driving simulator.
The driver/vehicle combination behaves like a regulatory controller with output xn(t + T), a 
function of two error terms e1, eg and the following vehicle’s speed xn. The first error term el is the 
difference between 0 and xn – xn–1 weighted by the reciprocal of the spacing (xn–1 – L) – xn. The 
second term eg represents a gap error, that is, the difference between some desirable gap G and the 
actual gap g. The driver/vehicle controller attempts to drive both errors to zero by implementation 
of the control law
	



x t
T
K e x
e
K
e x
e
n
n
g
g
n
g
(
)
( ,
)
(
,
)
+
=
⋅
+
⋅
1
1
1
 
	
(5.62)
Note that when xn–1 is constant and both errors are zero, the following vehicle is traveling at the 
same speed with a separation xn–1 – xn = G xn–1.
The functions K1(e1, xn) and Kg(eg, xn) are implemented as shown in Tables 5.1 and 5.2. The con­
stants K1,a, K1,d, Kg,d, and Kg,a are gain parameters reflecting driver aggressiveness, SL is the speed 
limit, and ∆ is a threshold above the speed limit.
A block diagram of the system is shown in Figure 5.41. The blocks to limit the acceleration 
and speed are self-explanatory. The spacing limiter assures that the minimum vehicle separation 
xn–1 – xn is greater than one car length at all times.
A Simulink diagram of the system is shown in Figure 5.42. The M-file “Ch5_cfparams1.m” 
assigns values to the system parameters referenced in a number of the Simulink blocks. Accordingly, 
FIGURE 5.40  Block diagram of a car-following model.

382
Simulation of Dynamic Systems with MATLAB® and Simulink®
it must be run prior to executing the simulation model file “car_following.mdl.” The new Simulink 
blocks in Figure 5.42 and their function are described briefly as follows.
	
1.	“Clock”: Outputs the simulation time variable “t” for the “Lookup Table” block.
	
2.	“Lookup Table”: Linearly interpolates between specified data points to generate the 
lead car speed profile.
	
3.	“MATLAB fcn”: Passes the inputs “xld,” “el,” and “eg” to the MATLAB function 
“acc.m,” which computes the vehicle’s acceleration response.
TABLE 5.1
Function K1 (e1, xn)
xn
e1
≤SL + ∆
>SL + ∆
>0
K1,a
0
≤0
K1,d
K1,d
TABLE 5.2
Function Kg(eg, xn)
xn
e1
≤SL + ∆
>SL + ∆
>0
Kg,d
Kg,d
≤0
Kg,d
0
FIGURE 5.41  Block diagram of a car-following system.

383
Simulink®
	
4.	“Saturation”: Sets limits for minimum and maximum vehicle acceleration.
	
5.	“Transport Delay”: Delays vehicle acceleration by T, the driver/vehicle reaction time.
	
6.	“Limited Integrator”: An integrator configured to limit vehicle speed between zero 
and a maximum value of “vmax.”
	
7.	“Switch”: Logical blocks that limit the spacing “x0–x1” to at least L + 1 ft and the speed 
“xld” to at least 1 ft/s for calculation of the gap g.
Access to the MATLAB Workspace during execution allows Simulink block parameters to be 
variables specified in MATLAB script files. For example, The “Lookup Table” block parameters 
“T0,” “T1,” “T2,” “A1,” and “A2” shown in Figure 5.43 are set in the M-file “Ch5_cfparamsl.m.”
The “MATLAB Function” block is a powerful feature of Simulink, which exploits the tight 
integration between MATLAB and Simulink. The Simulink block outputs “xld,” “el,” and “eg” 
FIGURE 5.42  Simulink diagram for a car-following system.
FIGURE 5.43  “Lookup Table” block parameters.

384
Simulation of Dynamic Systems with MATLAB® and Simulink®
are accessible as inputs to the MATLAB function M-file “acc.m,” which implements the car-follow­
ing algorithm in Equation 5.62. The computed output is sent to the “Acceleration Limiter” 
block in Figure 5.42.
The M-file “acc.m” is listed as follows.
% function acc.m computes the temporary commanded acceleration
  function y = acc(x1d,e1,eg,K1d,K1a,Kgd,Kga,SL,delta)
  if e1< = 0
     y1 = K1d*e1;
  elseif x1d< = SL+delta
     y1 = K1a*e1;
  else
     y1 = 0
  end
  if eg>0
     yg = Kgd*eg;
  elseif x1d< = SL+delta
     yg = Kga*eg;
  else
     yg = 0;
  end
y = y1+yg;
The results of simulating a pair of initially stopped vehicles, with one car length separation, 
­followed by the lead vehicle accelerating (with constant acceleration) to 60 mph in 30 s are obtained 
by running the M-file “Ch5_Fig5_44_thru_5_48.m” and shown in Figures 5.44 through 5.48. 
The commanded gap G is 2 s, the value recommended for highway driving by The American 
Automobile Association.
The initial blip in speed of the following vehicle (see Figure 5.45) is due to the excessive gap g 
that results whenever the following vehicle is moving at very low speeds. The car-following model, 
Equation 5.62, implemented in the M-file “acc.m” is not robust, that is, it is not valid at following 
vehicle speeds close to zero, which occurs when the simulation begins. Similar artifacts are present 
7500
6000
4500
1500
3000
0
0
10
20
30
40
50
60
70
80
90
0
10
20
30
40
50
60
70
80
90
Lead car displacement versus time
Following car displacement versus time
x0 (ft)
7500
6000
4500
1500
3000
0
x1 (ft)
Time (s)
FIGURE 5.44  Lead and following vehicle positions.

385
Simulink®
in the gap (Figure 5.46) and acceleration (Figure 5.48) plots. One of the exercise problems addresses 
this point further.
5.5.1  Discontinuities
Each of the nonlinear elements presented in Section 2.7 are available as blocks in Simulink. 
From within the Simulink Library Browser, click on “Discontinuities” to display the element 
blocks as shown in Figure 5.49.
0
10
20
30
40
50
60
70
80
90
Actual and desired gap versus time
Actual gap
Desired gap
2.4
2.7
3
2.1
1.5
g, G (s)
1.8
1.2
0.9
0.6
0.3
0
Time (s)
FIGURE 5.46  Desired and actual gaps.
70
60
40
50
10
20
30
0
0
10
20
30
40
50
60
70
80
90
0
10
20
30
40
50
60
70
80
90
Lead car speed versus time
Following car speed versus time
v0 (mph)
70
60
40
50
10
20
30
0
v1 (mph)
Time (s)
FIGURE 5.45  Lead and following vehicle speeds.

386
Simulation of Dynamic Systems with MATLAB® and Simulink®
In the right-hand column are nonlinear blocks for friction, dead zone, saturation, backlash, 
­hysteresis (relay), and quantization.
5.5.2  Friction
Figure 5.50 shows the “Coulomb and Viscous Friction” parameter dialog box.
While the default conditions are shown in Figure 5.50, a more practical way to use the block is 
to assign a scalar value to the Coulomb friction value (Offset). This would represent 
the coefficient of static friction as in the case of initiating the motion of a sliding mass. Of course, 
the Coefficient of viscous friction (Gain) corresponds to the kinetic friction as the 
coefficient of the velocity term in the dynamic equations of motion.
0
10
20
30
40
50
60
70
80
90
Following distance versus time
x0 – x1 (ft)
25
50
75
100
125
150
175
225
200
0
Time (s)
FIGURE 5.47  Following distance.
0
10
–4
–6
0
2
4
6
8
10
12
–2
20
30
40
50
60
70
80
90
Time (s)
Following vehicle acceleration versus time
a1 (ft/s2)
FIGURE 5.48  Simulink output of following vehicle acceleration.

387
Simulink®
A detailed description of the “Coulomb and Viscous Friction” block can found by 
clicking on Help from the dialog box.
5.5.3  Dead Zone and Saturation
Figure 5.51 shows the “Dead Zone” parameter dialog box.
The parameter dialog box for the dead zone block is rather intuitive. The user simply sets the 
beginning and the end of the dead zone according to the input being sent to the block. In the default 
FIGURE 5.49  Simulink Library Browser–Discontinuities.
FIGURE 5.50  “Coulomb and Viscous Friction” parameter dialog box.

388
Simulation of Dynamic Systems with MATLAB® and Simulink®
example, the output is zero if the input signal is between −0.5 and 0.5. Otherwise, the output tracks 
the input.
A detailed description of the “Dead Zone” block can found by clicking on Help from the 
dialog box.
Figure 5.52 shows the “Saturation” parameter dialog box.
The parameter dialog box for the saturation block is also intuitive. The user simply sets the 
beginning and the end of the saturation limits according to the input being sent to the block. In the 
default example, the output is −0.5 for input values less than −0.5, the output tracks the input 
between −0.5 and 0.5, and the output is 0.5 for input values greater than 0.5.
FIGURE 5.51  “Dead Zone” parameter dialog box.
FIGURE 5.52  “Saturation” parameter dialog box.

389
Simulink®
A detailed description of the “Saturation” block can found by clicking on Help from the 
dialog box.
5.5.4  Backlash
Figure 5.53 shows the “Backlash” parameter dialog box.
For the backlash block, the user sets the Deadband width and the Initial output. If the defaults 
are taken, the output of the backlash block is split evenly between upper and lower values of the 
input. For example, if the input is a square wave with an upper limit of +1 and a lower limit of 
−1, the deadband width is centered on zero (the Initial output default), and half of the Deadband 
width (0.5) is taken from the upper limit while the other half of the Deadband width is taken from 
the lower limit yielding an output of +0.5 (when the input is +1) and an output of −0.5 (when the 
input is −1).
Clarifying, if the Deadband width is 0.4, then 0.2 will be taken from each of the input values, 
that is, the output is a square wave between +0.8 and −0.8 (using the input square wave between 
+1 and −1).
If the Initial output is nonzero and exceeds the input value, then the backlash block can be used 
to simulate gears that have yet to be engaged. Continuing with the same square wave input between 
+1 and −1, if the Initial output is set to 2, then the output is +1 plus half of the Deadband width or 
+1.2. It is only when the gears engage that the output returns to the limits of +0.8 and −0.8.
A detailed description of the “Backlash” block can found by clicking on Help from the 
dialog box.
5.5.5  Hysteresis
One of the examples in Section 2.7 on nonlinear systems dealt with maintaining the temperature 
inside a building using a thermostat to control the heat from a furnace. The building temperature 
and thermostat control are governed by the equations repeated as follows.
	
τ d
d
T
t
T
RQ
T
+
=
+
0
	
(5.63)
FIGURE 5.53  “Backlash” parameter dialog box.

390
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
Q
Q T
T
T
T
T
T
t
T
T
T
T
T
d
d
d
d
d
d
=
≤
−
−
<
<
+
>
>
+
−
<
<
+
,
,
∆
∆
∆
∆
∆
∆
or
and   d
d
or
an
0
0
d   d
d
T
t <





0
	
(5.64)
where
T is the building temperature (°F)
Q is the heat input from furnace (Btu/h)
T0 is the outside temperature (°F)
R is the thermal resistance of building (°F/Btu/h)
τ is the time constant of building temperature response (h)
Q is the rating of furnace (Btu/h)
Td is the thermostat setting (°F)
∆ is the dead zone parameter for thermostat
The hysteresis effect associated with the thermostat, Equation 5.64, is illustrated graphically in 
Figure 2.43. This type of nonlinear behavior is readily simulated using a “Relay” block from the 
Simulink “Discontinuities” sublibrary. A description of the “Relay” block can be found 
in the online Simulink Reference, which contains detailed documentation for each block (see 
Figure 5.54).
A Simulink diagram for simulating building temperature with conditions as described in 
Example 2.11 is shown in Figure 5.55. The “Relay” block parameter box is also shown.
The furnace output and building temperature are shown in Figure 5.56. The building temperature 
increases from 50°F, the constant outside temperature. The hysteresis kicks in once the temperature 
FIGURE 5.54  Description of the Simulink “Relay” block.

391
Simulink®
exceeds “Td-del” = 75–3 = 72°F. The initial portion of the building temperature response in 
Figure 5.56 is identical to the temperature response graphed in Section 2.7.
5.5.6  Quantization
Figure 5.57 shows the “Quantization” parameter dialog box.
To demonstrate the use of the quantization block, use the default value given for the 
Quantization interval, that is, 0.5, where the input is a ramp with a slope of 0.5. When the 
input is between 0 and 0.5, the quantized output is 0; between 0.5 and 1, the quantized output is 0.5; 
et cetera.
Following the example from Section 2.7, the Quantization interval is set to 10/256. This 
corresponds to the analog input range of 0–10V for an 8-bit microprocessor with 28 = 256 states, 
0–255.
A detailed description of the “Quantization” block can be found by clicking on Help from 
the dialog box.
FIGURE 5.55  Simulink diagram for a simulation of building temperature using the “Relay” block for 
thermostat.
FIGURE 5.56  Furnace output and building temperature.

392
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXERCISES
	5.14	 Simulate the motion of a lead vehicle and following vehicle for a period of time sufficient to 
reach steady state for the conditions given in Table E5.14. The lead vehicle speed is
	
x t
v
t
P
v
A
t
P
P
t
P
v
t
P
0
0
0
0
0
4
2
4
5
4
5
4
( )
,
/
|
sin
,
/
/
,
/
=
≤≤
+
< ≤
>





π

	
	
Plot graphs similar to the ones shown in Figures 5.44 through 5.48.
	5.15	 Consider the second column of above table as baseline numerical values for simulation of a 
pair of vehicles. Perform a simulation study to analyze the effect of the desirable gap G on 
the following vehicle’s ability to follow at or near the desirable gap. Run the simulation for 
TABLE E5.14
Parameters
Case I
Case II
Case III
v0
50 mph
60 mph
70 mph
A
5 mph
5 mph
10 mph
P
30 s
30s
60s
G
2 s
2.5s
3s
x0(0)
Gv0
Gv0
Gv0
x1(0)
v0
v0
v0
x1(0)
0 ft
0 ft
0 ft
SL
v0
v0
v0
∆
5 mph
10 mph
55 mph
amin
–10 ft/s2
–12 ft/s2
–15 ft/s2
amax
10 ft/s2
12 ft/s2
15 ft/s2
vmax
90 mph
90 mph
90 mph
K1,a
3 ft/s
4 ft/s
5 ft/s
K1,d
3 ft/s
4 ft/s
5 ft/s
Kg,a
–5 ft/s3
–5 ft/s3
–5 ft/s3
Kg,d
–4 ft/s3
–4 ft/s3
–4 ft/s3
T (delay)
0.5s
0.75s
1 s
L
15 ft
15 ft
15 ft
FIGURE 5.57  “Quantization” parameter dialog box.

393
Simulink®
G = {1, 1.5, 2, 2.5, 3, 3.5, 4} for a duration of 3P s, and record the value of the average absolute 
gap error, that is,
	
|
|
| ( )
|
|
e
P
g t
G
t
e
G
g ave
P
P
g ave
=
−
∫
1
2
3
d
Plot |
|
vs. 
	
	5.16	 Improve the robustness of the car-following simulation to make the output more realistic at very 
low vehicle speeds. Specifically, modify the code in “acc.m” and add additional blocks as nec­
essary to the Simulink diagram in Figure 5.42. Use the baseline values from the above table to 
simulate the following vehicle’s response to a lead car with speed profile shown in Figure E5.16.
	5.17	 The Simulink diagram in Figure 5.42 contains a “Switch” block to maintain the vehicle 
separation xn – xn–1 greater than L + 1. This effectively eliminates the possibility of a rear end 
collision.
	
a.	 Remove the “Switch” block and add the necessary Simulink blocks to detect the exis­
tence of a collision and halt the simulation.
	
b.	 Use the lead car profile in above figure and adjust the parameters ∆ and K1,a, K1,d, Kg,a, Kg,d 
to force a rear-end collision.
	5.18	 Flow into the tank shown in Figure E5.18a is either on or off. It turns on when the level falls 
below 20 ft and remains on when the tank is filling until there is 25 ft of liquid in the tank. It 
remains off as the tank empties until the level falls below 20 ft. In the on condition, the flow 
rate is 18 ft3/min. The tank dynamics are described by
	
A H
t
F
F
F
H
d
d
+
=
=
0
1
0
1 2
,
/
α
	
	
where A = 50 ft2, α = 3 ft3/min/ft1/2, and H(0) = 0 ft.
FIGURE E5.16
FIGURE E5.18A

394
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a.	 Develop your own Simulink diagram or use the one shown in Figure E5.18b to simulate the tank 
dynamics for a period of time sufficient to see several cycles of filling and emptying. Plot the tank 
level and the two flows vs. time.
	
b.	 What is the minimum flow necessary to assure the tank is capable of filling to a level of 
25 ft? Find the answer analytically and verify with Simulink.
	
c.	 Supplement your Simulink diagram with additional blocks to measure the percentage of 
time during a cycle in which the tank is filling up.
	
d.	 Instead of switching the flow off and on immediately when the level reaches 25 and 20 ft, 
respectively, suppose the flow switches off 30 s after the tank level reaches 25 ft and 
switches on 30 s after the tank level falls to 20 ft. The tank is 25 ft tall. Add Simulink 
blocks to account for spillover from the tank. Plot the flow in, flow out, ­spillover, and tank 
level vs. time.
	5.19	 Cascading the dead zone and saturation blocks, model the valve described in Section 2.7.2. 
Set the dead zone block’s parameters to model opening currents of –0.5 and 0.5 amp (default 
settings) and set the saturation block’s parameters to model saturation currents of –1.0 and 
1.0 amp. Verify that the valve is modeled correctly by using a ramp input and observing the 
characteristics shown in Figure 2.39.
5.6  SUBSYSTEMS
As the physical systems we model become progressively more complex, the Simulink representa­
tion increases in size, that is, the number of blocks required to model the systems’ dynamics grows 
significantly. A Simulink diagram with hundreds of blocks makes it difficult, if not impossible, to 
understand the interactions among the systems’ components. A more instructive approach consists 
of grouping specific blocks associated with various subsystems into single entities. At the highest 
level, the system is viewed in terms of the interactions between these entities.
This hierarchical approach is illustrated for the case of modeling the dynamics of an automobile. 
Figure 5.58 shows a block diagram of the top level description for modeling the dynamics. At this 
level, the important interconnections between individual subsystems are identified.
The next step requires the development of concrete descriptions of the individual subsystems, 
either in mathematical or block diagram form. The mathematical models are transformed into 
Simulink models that are reusable, much in the same way a procedural function is used in high-
level programming languages. Multiple levels are possible in this modeling hierarchy. Moving down 
one or more levels from the top subsystem level provides more of a microscopic, that is, detailed, 
description involving low-level components.
FIGURE E5.18B

395
Simulink®
An advantage of this approach is the distribution of the modeling effort to individuals with 
­expertise necessary for modeling the individual subsystems. For example, the “Tire Model” 
­subsystem is a critical component in modeling vehicle response. A person knowledgeable in tire/
road surface interaction phenomena and the properties of specific tires is needed to develop models 
that will produce correct tire forces required by the equations of motion.
Suppose a question arises concerning the handling characteristics of a vehicle with different 
classes of tires. The existing vehicle subsystem models are already in place and can be reused with 
a “Tire Model” developed specifically for the class of tire under consideration.
5.6.1  PHYSBE
PHYSBE is a benchmark simulation of the human circulatory system. It was first introduced by 
John Mcleod in 1966 in an article titled “PHYSBE … a Physiological Simulation Benchmark 
Experiment.” Over the years, it has appeared in numerous references involving modeling and simu­
lation. The underlying dynamics have been simulated using the popular continuous simulation pro­
grams including Simulink.
The human circulatory system is represented by three main components: the lungs (pulmonary 
circulation), heart (coronary circulation), and the rest of the body (systemic circulation). Coronary 
and systemic circulations were further divided into subsystems as shown in the Simulink diagram 
in Figure 5.59 (provided by The Mathworks, Inc.).
The simulation computes pressures, blood flows, volumes, temperatures, and heat flows after a 
number of parameters describing the physical nature of each subsystem have been specified. The 
dynamics of each subsystem are hidden in the macroscopic view of the human circulatory system 
in Figure 5.59. A detailed description of the individual subsystem models is accessible by “looking 
inside” each of the blocks. For example, the LUNGS subsystem opens up to reveal the components 
used in modeling the blood flow, blood temperature, heat content, and heat dissipation within the 
lungs (see Figure 5.60).
The modular structure of the overall system makes it relatively simple to simulate, for example, 
the effects of partial blockages in the blood vessels of the systemic regions or the effect of changes 
in vascular compliance on blood pressure.
FIGURE 5.58  Top-level description of vehicle dynamics model. (From Allen, R.W. and Rosenthal, 
T.  Systems  technology/requirements for vehicle dynamics simulation models, Society of Automotive 
Engineers, SAE 941075, 1994.)

396
Simulation of Dynamic Systems with MATLAB® and Simulink®
5.6.2  Car-Following Subsystem
The next example of Simulink subsystems involves the dynamic behavior of a platoon of vehicles, 
that is, a lead car (platoon leader) followed by several vehicles whose motion is governed by the 
dynamics of the preceding vehicle. The Simulink diagram in Figure 5.42 was used to simulate car-
following behavior. Deleting the “Scope” blocks, the “Clock” and “Lookup” blocks for ­generating 
the lead vehicle speed profile, and the integrator block for ­creating the lead ­vehicle ­position leaves 
the essential blocks for defining a Simulink car-following subsystem.
FIGURE 5.59  Simulink diagram of PHYSBE model.
FIGURE 5.60  Subsystem model description of LUNGS.

397
Simulink®
Input and output ports to the subsystem are created using Simulink “In” and “Out” blocks from the 
“Ports and Subsystems” sublibrary. A certain amount of discretion is possible when choosing 
subsystem inputs and outputs. For example, “In” blocks can be connected to the lead vehicle speed 
“x0d” and position “x0,” while the following vehicle speed “x1d” and position “x1” are selected as 
outputs by connecting them to “Out” blocks. Alternatively, the subsystem could be described in terms 
of a single input, namely, vehicle speed “x0d,” and a single output such as vehicle acceleration “x1dd.”
A “car-fo1lowing” subsystem is created by enclosing selected blocks in the Simulink dia­
gram with a bounding box and choosing “Edit: Create Subsystem” from the menu. The 
selected blocks collapse into the “car-following” subsystem with renamed inputs and outputs 
as shown in Figure 5.61. Opening (double clicking) the subsystem reveals the underlying Simulink 
blocks that can be edited at any time.
The “car-following” subsystem constituent blocks are shown in Figure 5.62. Note that con­
version factors from mph to fps (3600/5280) and vice versa were added (see “Gain” blocks in 
Figure 5.62) to maintain the vehicle speeds in and out of the subsystem in mph, while internal to 
the subsystem, vehicle speeds are in fps. Simulation of a platoon of vehicles is accomplished by 
repeated use of the “car-following” subsystem block.
Suppose we wish to simulate the dynamics of a five-vehicle platoon in response to a lead vehicle that 
decelerates and then accelerates back to a constant steady-state speed. In particular, our interest will 
focus on the induced perturbations in the stream of traffic. At the beginning of the simulation, each 
vehicle is traveling at the speed “SL,” separated in time by the desired gap G, as shown in Figure 5.63.
FIGURE 5.61  “Car-following” subsystem with lead vehicle inputs “x_in,” “v_in” and following 
vehicle outputs “x_out,” “v_out.”
FIGURE 5.62  Simulink blocks comprising the car-following subsystem.

398
Simulation of Dynamic Systems with MATLAB® and Simulink®
The file “Ch5_cfparams2.m” loads the parameters required by the Simulink subsystems and 
“Lookup Table” block for setting the lead vehicle speed. A top-level view of the model “car _
following _ platoon.mdl” is shown in Figure 5.64.
Initial conditions, namely, speeds and positions, of the trailing vehicles are set in the integra­
tors of the appropriate subsystem blocks. The initial position of the lead vehicle is determined by 
the parameter of the integrator block feeding the first subsystem. The “Mux” block (lower right) 
multiplexes the five vehicle speeds on a single line for input to a “Scope” block that draws the five 
plots on a single set of axes. The heavy arrow emanating from the “Mux” indicates the presence of 
multiple signals.
Speeds of the lead vehicle and four following vehicles are shown in Figure 5.65. Figure 5.66 is 
a graph of the successive gaps between the vehicles of the platoon. The responses in Figures 5.65 
and 5.66 indicate that the platoon achieves a new steady state identical to the initial one after the 
perturbations die out.
The “Car-following” subsystem can be daisy-chained as shown in Figure 5.64 to simu­
late the response of platoons of vehicles of any size. Furthermore, the following vehicles can be 
­individualized by including a vector of randomly chosen driver/vehicle parameters as an additional 
input to each “Car-following” subsystem block.
5.6.3  Subsystem Using Fcn Blocks
The “Fcn” block is a convenient time saver when the mathematical model of the system consists 
primarily of algebraic and differential equations. Lengthy expressions are evaluated in equation 
form instead of being constructed from Simulink blocks. To illustrate, the frictionless inverted 
pendulum introduced in Section 5.4 can be treated as a subsystem with the governing equations for 
x and θ implemented by the use of “Fcn” blocks. Equations 5.50 and 5.51 are implicit in nature as 
a result of. x and θ appearing in both equations. (Recall the presence of an algebraic loop in the 
FIGURE 5.63  Initial conditions of the platoon vehicles.
FIGURE 5.64  Simulink diagram with multiple instances of the “car-following” subsystem.

399
Simulink®
Simulink diagram.) This can be overcome by solving for the second derivative terms explicitly 
­leading to Equations 5.65 and 5.66.
	


x
ml
mg
u
M
m
=
−
+
θ
θ
θ
θ
θ
2
2
sin
sin
cos  sin  + 
	
(5.65)
	


θ
θ
θ
θ
θ
θ
θ
= −
+
+
−
+
ml
m
M g
u
l M
m
2
2
cos
sin
(
sin 
)
)
cos
(
sin
	
(5.66)
FIGURE 5.65  Speeds (mph) of platoon leader and following vehicles vs. time (s).
FIGURE 5.66  Gaps (s) of following vehicles vs. time (s).

400
Simulation of Dynamic Systems with MATLAB® and Simulink®
Figure 5.67 shows the top layer with the “cart model” subsystem.
It includes Simulink blocks to generate the input u, decompose the state vector [ , , , ]
x x


 θ θ  into its 
components, and feed the components to individual “scope” blocks. Note the use of the Simulink 
supplied “R2D” block for converting from radians to degrees. It is found in the “Simulink 
Extras” sublibrary under the “Transformations” heading. A number of useful coordinate 
transformation blocks are available there.
Opening the “cart model” subsystem reveals the blocks shown in Figure 5.68. Note that the 
“Display option” of the “Mux” parameter blocks is set to “signals” in order to identify its 
inputs. The parameters of the two “Fcn” blocks are expressions relating the accelerations “xdd” 
and “thetadd” to the inputs “x,” “xd,” “u,” “thetad,” and “theta” (from the “mux” block). 
The “Fcn” block input notation is u[1], u[2], …, u[5] where u[1] is the first input “x,” u[2] is 
“xd,” and so forth.
From Equation 5.65, the “Fcn” block parameter expression for “xdd” is
(m*l*u [4]^2*sin (u[5])-m*g*cos (u [5])*sin(u[5])+u[3])/
   (M+m*sin(u[5])^2)
FIGURE 5.67  Top layer of a Simulink diagram for simulating an inverted pendulum.
FIGURE 5.68  Cart subsystem using “Fcn” blocks.

401
Simulink®
Referring to Equation 5.66, the “Fcn” block parameter expression for “thetadd” is
(–m*l*u[4]^2*cos(u[5])*sin(u[5])+(m+M)*g*sin(u[5])–u[3]*
  cos(u[5])/(l*(M+m*sin(u[5])^2))
The angular position of the pendulum θ(t) is plotted in Figure 5.69 for the case when the cart 
and pendulum are initially at rest, that is, x
x
( )
( )
( )
( )
0
0
0
0
0
=
=
=
=


θ
θ
, and the input u(t) is the 
triangular pulse shown in Figure 5.70. The numerical values of the system parameters are M = 2 kg, 
m = 0.1 kg, and l = 0.5 m.
EXERCISES
	5.20	 Randomize the car-following behavior by assuming that the desired gap G and driver/vehicle 
delay T are both normally distributed random variables, that is,
	
T
N
T
T
T
T
∼
(
,
),
.
,
.
µ
σ
µ
σ
=
=
0
0
75 s  
15 s 	
	
G
N
G
G
G
G
∼
(
,
),
.
,
.
µ
σ
µ
σ
=
=
2 5 s  
3 s
0
	
	
Use MATLAB to generate {Gi, Ti}, i = 1, 2, 3, 4 for four following vehicles, and repeat the 
simulation of the five vehicles shown in Figure 5.63.
	5.21	 Six vehicles are stopped at a traffic light with a distance of L feet from the rear bumper of the 
car in front to the front bumper of the following vehicle. The lead car accelerates uniformly 
from zero mph to the speed limit SL = 45 mph in 30 s and continues traveling at the speed 
limit. Use the robust car-following model developed in Exercise 5.16 to simulate the transient 
(a)
(b)
FIGURE 5.69  θ(t) vs. t for u(t) shown in Figure 5.70 from (a) Simulink scope and (b) Matlab m-file 
“Ch5_invert_pend_params.m.”
FIGURE 5.70  Force u(t) applied to cart.

402
Simulation of Dynamic Systems with MATLAB® and Simulink®
response of the platoon. Use the baseline conditions in the second column of Table E5.14 for 
the parameters, or choose a new set of appropriate values. Obtain time history plots of
	
a.	 Vehicle positions
	
b.	 Vehicle speeds
	
c.	 Vehicle gaps
	
d.	 Vehicle-following distances
	5.22	 A total of 11 cars are traveling at the speed limit SL with initial spacing similar to those in 
Figure 5.63. At t = 0, the lead car speed begins to vary sinusoidally with amplitude of 3 mph 
and period of 20 s. Determine the peak amplitude in speed of the following vehicles for the 
nine combinations: SL = 30, 45, 60 mph and G = 1.5, 2, 3 s.
	5.23	 Starting with Equations 5.65 and 5.66 for the cart and inverted pendulum,
	
a.	 Develop a state variable model of the system, that is, x = f(x, u) and y = g(x, u) where the 
state x
x x
T
=[ , , , ]


 θ θ  and output y = [x, θ]T.
	
b.	 Find the state equations for updating the discrete-time state x A(n) and computing y A(n) 
using forward Euler integration with step size T.
	
c.	 Solve the equations in part (b) recursively to find x A(n) and y A(n), n = 1, 2, …, nf where 
T = 0.05 s, Tfinal – nfT = 5 s, u(t) = 0, t ≥ 0, and x(0) = [0, 0, π/6, 0].
	
d.	 Plot the discrete-time state vector x A(n), n = 0, 5, 10, …, nf.
	
e.	 Simulate the response with Simulink for the same conditions in part (c) using the ode1 
(Euler) integrator. Plot the state vector and compare the results to part (d).
	5.24	 Show that the frictionless cart and pendulum have two equilibrium points when the input 
u(t) = 0, t ≥ 0, namely,
	
x
x
x
x
e
e
e
e
1
2
3
4
m
m/s
 rad
 rad/s
,
,
,
,
,
,
,
=
=
=
=
0
0
0
0
	
	
x
x
x
x
e
e
e
e
1
2
3
4
m
m/s
 rad
 rad/s
,
,
,
,
,
,
,
=
=
=
=
0
0
0
π
	
	
and verify by using Simulink that the first equilibrium point is unstable and the second one is 
stable. Is the second equilibrium point asymptotically stable?
	5.25	 Develop a subsystem model of the cart and pendulum where the pendulum rotation is opposed 
by a damping torque T
c
D = θ and the cart motion is subject to a constant friction force
	
f
m
M g
x
x
x
µ
µ
= −
+
⋅
≠
=



(
)
sgn( ),
,



0
0
0 	
	
Simulate the response of the cart and pendulum, starting from the stable equilibrium point, to 
the input
	
u t
t
U
t
t
( )
,
,
,
=
≤<
≤<
≤





0
0
1
1
3
0
3
0
	
	
	
Numerical values of the system parameters are m = 0.25 kg, M = 10 kg, l = 1 m, c = 0.5 
N · m/rad/s, µ = 0.015, and U0 = 10 N.
5.7  DISCRETE-TIME SYSTEMS
Up to this point, we have focused on using Simulink for simulation of systems with continuous-
time mathematical models. Discrete-time systems evolve as approximate representations of con­
tinuous-time systems at specific points in time. The numerical integrators already considered as 

403
Simulink®
well as those to come are predicated on some form of discrete-time approximation to the deriva­
tive ­function. Digital processors that manipulate streams of sampled numerical data are like­
wise ­discrete time in nature. Indeed, much of the first part of this book deals with methods for 
obtaining discrete-time model approximations of continuous-time systems. In the case of linear 
time-invariant (LTI) discrete-time systems, methods for finding solutions to specific inputs were 
presented as well.
Alternatively, some discrete-time systems process information, which by its very nature is 
allowed to change only at discrete instants of time. In that case, the systems are inherently dis­
crete time. The difference equations are solved either recursively or by the use of a general solu­
tion (if one exists), resulting in an output sequence of numbers defined solely at discrete times 0, 
T, 2T, 3T, … .
Simulink is well suited to obtain solutions of discrete-time system models regardless of whether 
they are approximations of continuous-time systems or inherently discrete time to begin with. 
The procedure for obtaining a Simulink diagram of a discrete-time system is similar to the way 
Simulink diagrams of continuous-time systems were developed. With discrete-time systems, the 
goal is to express the highest order difference term as an explicit function of the lower order terms. 
For example, suppose an nth-order discrete-time system with output y(k) and input u(k) is modeled 
by the nth-order difference equation,
	
g y k
n y k
n
y k
y k
u k
p
u k
u k
[ (
), (
),
, (
), ( ), (
),
, (
), ( )]
+
+ −
+
+
+
=
1
1
1
…
…
0 	
(5.67)
with initial conditions y(0), y(1), …, y(n – 1). Oftentimes it is possible to solve Equation 5.67 
­explicitly for y(k + n), giving
	
y k
n
f y k
n
y k
y k
u k
p
u k
u k
(
)
[ (
),
, (
), ( ), (
),
, (
), ( )]
+
=
+ −
+
+
+
 
1
1
1
…
…
	
(5.68)
Starting with y(k + n) and u(k + p), delayed signals y(k + n – 1), …, y(k + 1), y(k) and u(k + p – 1), 
…, u(k + 1), u(k) are generated using the “Unit Delay” block and combined according to 
Equation 5.68 to complete the simulation diagram of the discrete-time system.
5.7.1  Simulation of an Inherently Discrete-Time System
We begin with an inherently discrete-time system most of us are familiar with, namely, a fixed inter­
est loan with constant periodic payments. An amount of money is borrowed for a specified period of 
time, and equally spaced installments are paid to the lender until the loan is completely repaid. The 
interest rate on the loan is established at the time of the loan. Furthermore, each payment consists of 
a portion that reduces the loan principal and the remaining portion that is interest on the outstanding 
balance. The situation is illustrated in Figure 5.71.
The system parameters consist of
P0: Loan amount
i: Interest rate per period (fixed for the duration of the loan)
n: Number of interest periods for duration of loan
FIGURE 5.71  Repayment and amortization of a loan.

404
Simulation of Dynamic Systems with MATLAB® and Simulink®
The discrete-time input
	
u k
k
A
k
n
( )
,
,
, , ,
,
=
=
=



0
0
1 2 3 …
	
(5.69)
is the constant payment A made at the end of the kth interest period. The discrete-time outputs are
y(k): Outstanding balance of loan immediately following the kth payment
P(k): Portion of kth payment used to reduce the outstanding balance
I(k): Interest portion of kth payment
The unpaid balance after the (k + 1)st payment is simply the unpaid balance following the kth 
payment plus the interest accrued for one period on the unpaid balance minus the amount of the 
(k + 1)st payment. Thus,
	
y k
y k
iy k
u k
k
n
(
)
( )
( )
(
),
, , ,
,
+
=
+
−
+
=
−
1
1
1 2
1
0
…
	
(5.70)
(
) ( )
(
),
, , ,
,
=
+
−
+
=
−
1
1
1 2
1
i y k
u k
k
n
0
…
	
(5.71)
P(k + 1), the portion of u(k + 1) used for loan principal reduction, is equal to the reduction in 
outstanding balance from the kth to the (k + 1)st payment, that is,
	
P k
y k
y k
k
n
(
)
( )
(
),
, , ,
,
+
=
−
+
=
−
1
1
1 2
1
0
…
	
(5.72)
I(k), the interest portion of u(k), is obtained from
	
P k
I k
u k
A
k
n
( )
( )
( )
,
, ,
,
+
=
=
=1 2 …
	
(5.73)
	
⇒
=
−
=
I k
A
P k
k
n
( )
( ),
, ,
,
1 2 …
	
(5.74)
It can be shown (Thuesen 1971) that the constant payment A necessary to fully repay the loan in n 
periods, that is, make y(n) = 0, is given by
	
A
P
i
i
i
n
n
=
+
+
−






0
1
1
1
(
)
(
)
	
(5.75)
Equations 5.71, 5.72, and 5.74 are the difference equations for the first-order discrete-time system in 
Figure 5.71. A Simulink diagram of the system is shown in Figure 5.72. Note the use of a single “Unit 
Delay” block to generate the signal y(k) and the sum block in the upper right corner producing 
y(k + 1) as the difference of (1 + i)y(k) and the payment amount u(k + 1) according to Equation 5.71.
The “Simulation Parameters” dialog box is shown in Figure 5.73. A “Fixed-step” 
integrator with “Fixed-step size” of 1 is selected to force the simulation to step through inte­
ger values of discrete time. Since there is no continuous-time integration present in an inherently 
discrete-time system, the “discrete (no continuous states)” option is chosen from the 
drop-down menu of integrators.
The numerical values shown in Figure 5.72 correspond to a $125,000 loan at 8% interest per 
annum repaid over 30 years. The monthly payment A is calculated inside the “Fcn” block and 
appears in the “Display” as $917.20. The unpaid balance y(k) is shown in Figure 5.74. As expected, 
the loan balance is zero following the 360th monthly payment.

405
Simulink®
FIGURE 5.72  Simulink diagram for loan repayment.
FIGURE 5.73  Simulation parameters dialog box for loan simulation.
12
10
8
6
4
2
0
0
50
100
150
n = 30 months
n(k), ($)
i = 8% per year
× 104
Unpaid balance for a loan
P0 = $125,000
k (month)
250
300
350
FIGURE 5.74  Unpaid balance y(k) vs. interest period k.

406
Simulation of Dynamic Systems with MATLAB® and Simulink®
The total monthly payment A, interest portion I(k), and principal portion P(k) are shown in 
Figure  5.75. Note that the early payments consist almost entirely of interest with only a small 
amount going towards principal reduction. As the loan progresses, the portion of each monthly 
installment used to reduce the outstanding balance increases. Conversely, the interest portion of 
each ­subsequent ­payment is less than the previous one.
The total interest paid over the life of the loan is computed in two different ways. The simplest 
approach is to compute nA – P0, the result shown in the “Display” block on the left side of the 
Simulink diagram. The second method employs a “Discrete-Time Integrator” situated in 
the lower right corner of Figure 5.72.
5.7.2  Discrete-Time Integrator
A “Discrete-Time Integrator” is a numerical integrator from the “Discrete” sublibrary 
reserved for discrete-time systems. The “Discrete-Time Integrator” can be configured 
as a forward (explicit) Euler, backward (implicit) Euler, or trapezoidal integrator. The z-domain 
­transfer functions derived in Section 4.7 for each of the discrete-time integrators are placed inside 
the ­appropriate block shown in Figure 5.76.
The two discrete-time integrators in Figure 5.72 function as summing devices, one for the total 
interest and the other for the computation of the total of all the principal payments. To understand 
1000
A, I(k) and P(k) vs. k
k (month)
A, I, P ($)
I(k)
P(k)
1
50
150
250
350
A
900
800
700
600
500
400
300
300
200
200
100
100
0
FIGURE 5.75  Monthly installment A, interest portion I(k), and principal portion P(k) vs. k.
FIGURE 5.76  Simulink discrete-time integrators.

407
Simulink®
why, consider a discrete-time backward (implicit) Euler integrator with input signal I(k) and output 
IT(k). The difference equation is
	
I
k
I
k
T I k
T
T
(
)
( )
(
)
+
=
+
⋅
+
1
1 	
(5.76)
With T = 1 and IT(0) = 0, it follows that IT(1) = I(1), IT (2) = I(1) + I(2), … and
	
I
n
I k
T
k
n
( )
( )
=
=∑
1
	
(5.77)
Simulink’s fixed-step integrators “odel” (Euler), “ode2” (Heun) through “ode5” are all explicit. 
Thus, if we elect to use a fixed-step implicit integrator, our choice is limited to either “Backward 
Euler” or “Trapezoidal” from the “Discrete” sublibrary. In this case, the Simulink diagram 
is similar to the simulation diagram representation of the continuous-time system with the exception 
that the continuous-time integrators (1/s blocks) are replaced by the preferred implicit discrete-time 
integrator.
To illustrate, consider the vehicle of weight W lb in Figure 5.77 rolling backwards down an 
incline (θ) subject to an aerodynamic drag force FD, a rolling friction force Fµ (Fµ/4 on each tire), 
and a gravitational component of weight FW. The vehicle travels a length L along the inclined ­section 
and then continues on a level section of road.
Summing the forces on the vehicle in the direction of travel gives
	
mx
F
F
F
D
w
=
−
+
–
µ
	
(5.78)
	
= −
−
+
≤
−
−
>




0 5
0 5
2
2
.
.
,
C
Ax
W
W
x
L
C
Ax
W
x
L
D
D
ρ
µ
θ
θ
µ


cos
sin ,
ρ
	
(5.79)
where
m is the mass of the vehicle
CD is the aerodynamic drag coefficient
ρ is the density of air
A is the exposed vehicle front area
µ is the coefficient of rolling friction between the tires and the road
A Simulink diagram using trapezoidal integration for both integrators is shown in Figure 5.78. 
The first is a limited integrator with the lower limit set to zero. The “Switch” block guarantees that 
the friction force is zero when the vehicle is stopped.
Numerical values of the system parameters are shown in the “Con” and “Gain” blocks except 
for L = 200 ft and θ = 10°, which appear in the “Lookup table” parameters. Results are shown 
FIGURE 5.77  Vehicle rolling down an incline.

408
Simulation of Dynamic Systems with MATLAB® and Simulink®
in Figures 5.79 through 5.81 for the case when the vehicle is released from a stopped position and 
starts rolling down the incline.
Implicit integrators like the “Backward Euler” and “Trapezoidal” may lead to ­algebraic 
loops, which require additional computational effort to resolve at each discrete-time step. In fact, 
an “Algebraic Loop Warning” appears in executing the simulation corresponding to 
the Simulink diagram in Figure 5.78. Algebraic loops never include a continuous-time integra­
tor because all of Simulink’s continuous-time integrators are implemented by explicit numerical 
­integration algorithms.
300
298
296
294
0
Fμ (lb)
Fμ vs. t
5
10
15
20
25
600
400
200
0
0
FW (lb)
FW vs. t
5
10
15
20
25
20
10
0
0
FD (lb)
FD vs. t
t (s)
5
10
15
20
25
FIGURE 5.79  Fµ, FW, FD vs. t.
FIGURE 5.78  Simulink diagram for vehicle rolling down incline.

409
Simulink®
Typical of all Simulink blocks in the “Discrete” sublibrary, the discrete-time integrator 
­outputs are clamped or held constant for the duration of the sample time (integration step), 0.01 s, 
in this example (see Figure 5.82).
5.7.3  Centralized Integration
The simulation diagram of an nth-order continuous-time system model will contain n dis­
tinct ­integrators. The Simulink diagram will contain one integrator for each continuous-time 
state or equivalently a “State-Space,” “Transfer Fcn,” or “Zero-Pole” block from the 
“Continuous” sublibrary to model components with one or more continuous-time states. In either 
5
0
–5
0
xdd (ft/s2)
xdd vs. t
5
10
15
20
25
40
20
0
0
xd (ft/s)
xd vs. t
5
10
15
20
25
400
200
0
0
x (ft)
x vs. t
t (s)
5
10
15
20
25
FIGURE 5.80 
xn, xn, x vs. t.
10
8
6
4
θ (deg)
θ(t) vs. t
2
0
0
5
10
t (s)
15
20
25
FIGURE 5.81  θ vs. t.

410
Simulation of Dynamic Systems with MATLAB® and Simulink®
case, the numerical integrator selected from the choice of fixed-step and variable-step integrators 
in the “Simulation Parameters” dialog box will be applied to all the continuous-time state 
derivatives.
For “One-Step” numerical integration algorithms (discussed in Chapter 6), which includes 
the explicit Euler integrator, all state derivatives are calculated at tn = nT prior to updating a single 
state at tn+1 = (n + 1)T. The entire collection of continuous-time states are updated at tn+1 based on 
the state derivatives at tn, which in turn depend on the values of the states and inputs (if present) at 
tn = nT. This is referred to as centralized integration.
There are situations when centralized integration is not the most advantageous approach when 
it comes to updating the states. For example, when the state derivatives are themselves states, some 
of the states can be updated at time tn+1 = (n + 1)T based on calculated values of other states at tn+1.
Figure 5.83 is a simulation diagram of a mechanical system with inertia. It contains an accelera­
tion term that is twice integrated to produce velocity and position.
With centralized explicit Euler integration, the discrete-time states x1,A(n) and x2,A(n) are updated 
at time tn+1 = (n + 1)T in the sequence of steps as follows:
	


x n
x n
M F n
Kx
n
Bx
n
A
A
2
1
2
1
( )
( )
[ ( )
( )
( )]
,
,
=
=
−
−
	
(5.80)
FIGURE 5.82  Close-up of discrete-time integrator output illustrating discrete-time nature (sample time 
equal 0.01 s).
FIGURE 5.83  Simulation diagram of second-order system with sequential integrators.

411
Simulink®
	
x n
x
n
A
1
2
( )
( )
,
=
	
(5.81)
	
x
n
x
n Tx n
A
A
2
2
2
1
,
,
(
)
( )
( )
+
=

	
(5.82)
	
⇒
+
=
+
−
−
x
n
x
n
T
M F n
Kx
n
Bx
n
A
A
A
A
2
2
1
2
1
,
,
,
,
(
)
( )
[ ( )
( )
( )]
	
(5.83)
	
x
n
x
n
Tx n
A
A
1
1
1
1
,
,
(
)
( )
( )
+
=
+ 
	
(5.84)
	
⇒
+
=
+
x
n
x
n
Tx
n
A
A
A
1
1
2
1
,
,
,
(
)
( )
( ) 	
(5.85)
Instead of starting with Equation 5.84 to update x1,A(n), the implicit Euler form can be used, that 
is, the updated state x1,A(n + 1) is obtained from
	
x
n
x
n
Tx n
A
A
1
1
1
1
1
,
,
(
)
( )
(
)
+
=
+
+

	
(5.86)
	
⇒
+
=
+
+
x
n
x
n
Tx
n
A
A
A
1
1
2
1
1
,
,
,
(
)
( )
(
) 	
(5.87)
Equations 5.83 and 5.87 form the basis of a noncentralized integration scheme, which uses explicit 
Euler integration to update x2,A(n) and implicit Euler integration to update x1,A(n) at tn+1 = (n + 1)T. 
The explicit Euler/implicit Euler combination is superior to explicit Euler/explicit Euler integration 
by virtue of its using the updated velocity x2,A(n + 1) in the computation for the new state x1,A(n + 1) 
in Equation 5.87.
With Simulink, explicit Euler/implicit Euler (or explicit Euler/trapezoidal) integration of a sec­
ond-order component is straightforward. Figure 5.84 is a Simulink diagram for simulating the unit 
step response of the second-order system
	



x
x
x
u
n
n
n
+
+
=
2
2
2
ςω
ω
ω
	
(5.88)
FIGURE 5.84  Simulink diagram with explicit Euler/explicit Euler integration, explicit Euler/trapezoidal 
integration and exact solution of second-order system unit step response (ζ = 0.15, ωn = 5 rad/s), sample time 
T = 0.02 s.

412
Simulation of Dynamic Systems with MATLAB® and Simulink®
The explicit Euler/explicit Euler and explicit Euler/trapezoidal integration routines are imple­
mented, and the exact solution is generated for comparison. The lightly damped system step 
responses are shown in Figure 5.85. The response obtained using noncentralized integration (explicit 
Euler/­trapezoidal) is closer to the exact solution.
5.7.4  Digital Filters
Digital filters were introduced in this chapter. A digital filter is a discrete-time system designed to 
process discrete-time data for the purpose of extracting useful information. In many cases, the data 
is comprised of a useful signal and an unwanted component such as noise. When the frequency 
components in the signal and noise are confined to distinct regions in the frequency spectrum, a 
properly designed digital filter can remove a significant portion of the noise without appreciable 
degradation of the signal component. The following example (Cadzow 1973) illustrates a notch filter 
designed to remove 60 Hz (ω0 = 2π × 60 rad/s) noise from a signal.
The sixth-order digital filter with input u(k) and output y(k) is represented as a cascaded system 
of second-order filters governed by the following difference equations:
	
y k
u k
b u k
u k
a y k
a y k
1
1
1 1
2 1
1
2
1
2
( )
( )
(
)
(
)
(
)
(
)
=
+
−
+
−
−
−
−
−
	
(5.89)
	
y k
y k
b y k
y k
a y k
a y k
2
1
1 1
1
3
2
4
2
1
2
1
2
( )
( )
(
)
(
)
(
)
(
)
=
+
−
+
−
−
−
−
−
	
(5.90)
	
y k
y k
b y k
y k
a y k
a y k
3
2
1 2
2
5 3
6
3
1
2
1
2
( )
( )
(
)
(
)
(
)
(
)
=
+
−
+
−
−
−
−
−
	
(5.91)
	
y k
by k
( )
( )
=  
3
	
(5.92)
Parameters a1, a2, …, a6 and b1 influence the location of the six poles and two zeros of the filter’s 
z-domain transfer function H(z). The first requirement is for the magnitude function at the noise 
frequency, |H(ejω0T)| = 0.
The constant b is selected to make the magnitude function approximately one at other 
­frequencies. Numerical values of the filter’s constants are listed in the Simulink diagram shown in 
Figure 5.86. A sampling period of T = 0.001 s is used.
1.8
1.6
1.4
1.2
1
0.8
0.6
0.4
0.2
0
0
Explicit Euler–explicit Euler
y(t)
Explicit Euler–implicit trapezoidal
Centralized, non-centralized integration and exact step response
ζ = 0.15
ωn = 5 rad/s
T = 0.02 s
Exact
t
1
2
3
4
5
FIGURE 5.85  Results of centralized integration and noncentralized integration.

413
Simulink®
The continuous-time signal u(t) consists of a sinusoidal component s(t) = 2.5 sin ωt and 60 Hz 
noise component n(t) = sin 120πt. Figure 5.87 shows the sampled input signal u(k) with a low fre­
quency 5 Hz (ω = 10π rad/s) signal component. Also shown is the filter output y(k) at steady state 
following the transient period. Figure 5.88 shows that the signal component s(k) and the discrete-
time filter output y(k) are nearly identical.
FIGURE 5.86  Simulink diagram for a notch filter (notch frequency = 60 Hz).
FIGURE 5.87  u(k), y(k), ω = 10π rad/s.

414
Simulation of Dynamic Systems with MATLAB® and Simulink®
Figures 5.89 and 5.90 show the steady-state response of the filter when the frequency of the 
­signal component is closer to the noise frequency, that is, 57.5 Hz (ω = 115π rad/s).
The reader should try running the simulation for the case when the signal frequency is higher 
than the notch frequency (but less than the Nyquist frequency π/T = 1000π rad/s) to verify similar 
results.
5.7.5  Discrete-Time Transfer Function
Simulink is capable of simulating the response of linear discrete-time systems based on the 
­knowledge of the system’s discrete-time transfer function. Similar to continuous-time systems with 
transfer function H(s) in pole-zero form or a ratio of polynomials, the response of a discrete-time 
system with transfer function H(z) to a discrete-time input is obtained by using one of the blocks 
shown in Figure 5.91.
The “Discrete Filter” block is used primarily for digital filters where the numera­
tor and denominator are polynomials in z−1. It is easily obtained from either of the other two 
forms by multiplying numerator and denominator by z−n where n is the order of the denomina­
tor ­polynomial. The following example illustrates the use of the “Discrete Zero-Pole” 
block for a low-pass digital filter obtained by approximating the dynamics of a continuous-time 
filter.
The RC circuit in Figure 5.92 was shown to exhibit the characteristics of a low-pass filter in 
Chapter 4.
The continuous-time transfer function H(s) is given by
	
H s
K
s
c
c
( ) =
+
ω
ω 	
(5.93)
FIGURE 5.88  s(k), y(k), ω = 10π rad/s.

415
Simulink®
FIGURE 5.89  u(k), y(k), ω = 115π rad/s.
FIGURE 5.90  s(k), y(k), ω = 115π rad/s.

416
Simulation of Dynamic Systems with MATLAB® and Simulink®
where ωc, the cutoff frequency, and DC gain K are related to circuit parameters RS, RL, and 
C ­according to
	
ωc
S
L
R
R
C
=
+
(
)
(
)
1
1
/
/
	
(5.94)
	
K
R
R
R
L
S
L
=
+
	
(5.95)
Suppose the signal vs(t) is the square wave shown in Figure 5.93.
The capacitor in the circuit of Figure 5.92 removes high-frequency components from vS(t), 
­resulting in smoother pulse transitions in vL(t).
For values of RS = 50 Ω and RL = 200 Ω, the capacitance C is selected to make the cutoff 
­frequency 5 kHz (ωc = 5 × 103 × 2π rad/s). The initial design calls for the Nyquist frequency 
π/T to be twice the cutoff frequency making the sample time T = 50 µS (20 kHz sampling rate).
The discrete-time filter transfer function H(z) is to be synthesized from the continuous-time filter 
transfer function H(s) using the bilinear transform (see Chapter 4).
	
H z
H s
s
T
z
z
( )
( )
( / )((
)/(
))
=
| =
−
+
 
2
1
1 	
(5.96)
	
=
−
+
+
K
T
z
z
c
c
ω
ω
(
)((
) (
))
2
1
1
/
/
	
(5.97)
FIGURE 5.91  Simulink discrete-time transfer function blocks.
FIGURE 5.93  Input signal vs(t), t ≥ 0.
FIGURE 5.92  Circuit for a low-pass filter.

417
Simulink®
	
⇒
=
+
+
−
−
+






H z
K
T
T
z
z
T
T
c
c
c
c
( )
((
) (
))
ω
ω
ω
ω
2
1
2
2
/
	
(5.98)
Figure 5.94 shows the Simulink diagram for simulating the response of the continuous-time 
filter when the input is vs(t), t ≥ 0 and the digital filter when the discrete-time input is vs(kT), k = 0, 
1, 2, … . The “Zero-Order Hold” block is required when the discrete-time system sample 
time T exceeds the integration step size (10 µs) for the continuous-time “Transfer Fcn” block. 
The ­continuous-time signals are shown in Figure 5.95.
The discrete-time signals are shown in Figure 5.96 (T = 50 µs) and Figure 5.97 (T = 10 µs). As 
expected, the digital filter response vL(K) is closer to the output vL(t) of the analog circuit at the 
higher sampling rate.
FIGURE 5.94  Simulink diagram for continuous- and discrete-time low-pass filters.
FIGURE 5.95  Low-pass continuous-time filter input and output.

418
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXERCISES
	5.26	 A car loan in the amount of $25,000 is to be paid off in 5 years with an annual interest rate of 
8%. Use the Simulink loan simulation to find
	
a.	 The monthly installment
	
b.	 The unpaid balance after the 30th payment
	
c.	 The principal portion of the 12th payment
FIGURE 5.96  Digital filter input and output (T = 50 µs).
FIGURE 5.97  Digital filter input and output (T = 10 µs).

419
Simulink®
	
d.	 The total interest paid over the life of the loan
	
e.	 The time required for the unpaid balance to equal $12,500
5.27	 A prospective home buyer is considering purchasing a $200,000 house with a 10% down pay­
ment and financing the balance over 30 years. He is able to afford monthly payments of $1,450.
	
a.	 What is the maximum interest rate per annum on the mortgage for which the house is 
affordable?
	
b.	 Repeat part (a) for a 15 year mortgage.
5.28	 A college savings account is created on January 1, 2000 with a deposit of $1000. The account 
earns 4% per year. End-of-month deposits in the amount of $150 are made for a period of 18 
years with the last deposit scheduled for December 31, 2017.
	
a.	 Write a difference equation for y(k), k = 1, 2, 3, … the account balance after the kth 
deposit. Note that y(0) = 1000 and u(k) = 150, k = 1, 2, 3, …, 216.
	
b.	 Find the account balance after the last deposit.
5.29	 Numerical differentiation is a procedure for approximating the derivatives of a mathematical 
function based on sampled values from it. The following backward difference formulas esti­
mate the first three derivatives of a signal f(t) at time ti:
	
′
=
−
−
−
+
f t
T
f t
T
f t
T
f t
i
i
i
i
( )
[ (
)
(
)
( )]
1
2
2
4
3
	
	
′′
=
−
−
+
−
−
−
+
f
t
T
f t
T
f t
T
f t
T
f t
i
i
i
i
i
( )
[
(
)
(
)
(
)
( )]
1
3
4
2
5
2
2
	
	
′′′
=
−
−
−
+
−
−
−
+
f
t
T
f t
T
f t
T
f t
T
f t
T
f
i
i
i
i
i
( )
[
(
)
(
)
(
)
(
)
1
2
3
4
14
3
24
2
18
5
2
( )]
ti
	
	
Develop a Simulink program to approximate
	
a.	 f′ (ti), ti = 2T, 3T, 4T, … given f(0), f(T)
	
b.	 f″ (ti), ti = 3T, 4T, 5T, … given f(0), f(T), f(2T)
	
c.	 f″ (ti), ti = 4T, 5T, 6T, … given f(0), f(T), f(2T), f(3T) where the function f(t) is obtained 
from an “Fcn” block as shown in Figure E5.29:
56
55
54
53
52
51
50
49
48
47
46
45
44
0
6 AM
6 AM
6 PM
Midnite
Noon
2
4
6
8
10
12
14
Outside temperature vs. time of day
T0(t), °F
16
18
20
22
24 t (h)
FIGURE E5.29

420
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	 Run the simulations for approximating the derivatives for the following cases:
	
f t
A
t
A
T
( )
sin
,
,
.
=
=
=
=
ω
ω
π
1
0 012
2 ,
π
ω 	
(i)
	
f t
Ke
K
T
t
( )
,
,
,
.
/
=
=
=
=
−τ
τ
τ
1
1
1
0
0 0
	
(ii)
	
f t
K
t
K
T
n
d
t
d
n
n
( )
sin (
,
,
,
=
−
+






=
=
=
−
1
1
4
0
ω
ω
ω
ϕ
ζ
ω
ζω
e
)
 = 0.25,
.01
1
ζωn





	
(iii)
	
	
  where
	
ω
ζ ω
ϕ
ω
ζω
d
n
d
n
=
−
=
−
1
2
1
tan
/
(
) 	
	
	   Run the simulations for a period of time sufficient to include two cycles of the sine 
­function and the transient periods of the second and third functions.
	
e.	 Compare the approximate and exact values of f ′ (ti), f ″ (ti), and f ‴ (ti) for each function at 
10 equally spaced points.
	5.30	 A second-order system is governed by the differential equation
	




y t
y t
y t
K
u t
b u t
b u t
n
n
n
( )
( )
( )
( )
( )
( )
+
+
=
+
+
2
2
2
1
1
ζω
ω
ω
	
	
a.	 Draw a simulation diagram of the system and label the states x1 and x2.
	
b.	 Draw a Simulink diagram using “Forward Euler” and “Trapezoidal” discrete-
time integrators to calculate x2,A(n) and x1,A(n), respectively.
	
c.	 Use the values ζ = 0.5, ωn = 4, K = 2, b1 = 0, and b2 = 1 to simulate y(t) in response to 
the input
	
u t
t
t
t
( )
,
,
=
−
≤<
≥




9
0
3
0
3
2
	
	
	
  with y(0) =  y(0) = 0.
	
d.	 Find the analytical solution for y(t). Use an “Fcn” block in the Simulink diagram with 
input t and output the analytical solution for y(t). Compare the simulated and analytical 
solutions.
	5.31	 For the notch filter given by Equations 5.89 through 5.92, find an expression for the constant 
b in Equation 5.92 if the DC gain of the filter is one.
	5.32	 An electronic sensor is used to measure ambient temperature Tamb(t), which varies over a 24 h 
period in sinusoidal fashion about 45°F with amplitude of 15°F (Figure E5.32a). The sensor 
output Ts(t) is corrupted with an additive white noise component (power = 0.01). A Simulink 
diagram for generating Tamb(t) and TS(t) is shown in Figure E5.32b, along with time histories 
of each signal.

421
Simulink®
	
	
A simple low-pass digital filter is required to smooth the output signal without seriously 
degrading the signal component. The first-order filter ­difference equation is
	
T k
T k
T k
k
f
s
f
(
)
(
)
(
)
( ),
, , ,
+
=
−
+
+
=
1
1
1
1 2
α
α
0
… 	
	
where
	
Ts(k) is the sampled output of the sensor
	
Tf(k) is the filter output
(a)
(b)
FIGURE E5.32

422
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	
Note that the initial filter output Tf(0) = Tamb(0) = 45°F.
	
	
The filter sample time is T = 0.01 h. The parameter α is related to the bandwidth of the 
filter ω0 by
	
α
ω
ω
ω
=
−
−
−
−
2
cos
0
0
0
3
1
T
T
T
(
cos
)(
cos
) 	
	
	
Choose ω0 as the frequency of the ambient temperature (in rad/h), and simulate the filter’s 
response over a 24 h period. Plot Tamb(t), Ts(t), and Tf(k) on the same graph.
	5.33	 Differentiation of noisy analog signals in continuous-time systems is often accom­
plished by first removing the high-frequency components. To illustrate, suppose the signal 
x(t) = s(t) + n(t) where s(t) = 2t, t ≥ 0, and n(t) = 0.25 sin 120πt is fed to a differentiator as 
shown in Figure E5.33. A series of low-pass filters with H(z) = (1 – a)z/(z – a) like the ones 
shown in Figure E5.33 are inserted between the signal x(t) and another differentiator. Vary the 
number of low-pass filters and the constant “a” and compare
	
a.	 The noisy analog signal “x” and the filtered signal “xf”
	
b.	 The outputs “xd” and “xfd” of the two differentiators
5.8  MATLAB AND SIMULINK INTERFACE
While it is possible to work with signals and systems exclusively within the MATLAB environ­
ment, it is far more efficient to utilize Simulink and the MATLAB toolboxes to solve problems 
in ­specific disciplines. Sharing of data between MATLAB and Simulink is a seamless process, 
enabling MATLAB’s extensive capabilities in data analysis and visualization to be utilized.
The following example illustrates how to effectively exploit the MATLAB and Simulink 
­interface. It deals with the Fourier Series and its application to frequency response of linear 
systems.
A periodic signal u(t) is shown in Figure 5.98. Equation 5.99 describes the signal over one period 
from –T/2 to T/2. It is periodic as a result of u(t + T) = u(T), –∞ < t < ∞.
FIGURE E5.33
FIGURE 5.98  Periodic signal u(t).

423
Simulink®
	
u t
T
t
A
t
T
( )
,
,
=
−
≤<
≤<





0
2
0
0
2
	
(5.99)
Its Fourier Series expansion (O’Neil 1983) is
	
u t
a
a
n
t
n
n
( )
sin
, , ,
=
+
=
∞
∑
0
0
1 3 5
ω
…
	
(5.100)
where
ω0 = 2π/T is called the fundamental frequency
un(t) = an sin nω0t, n = 1, 3, 5, … is the nth harmonic
the Fourier coefficients are
	
a
A
a
n
n
n
0
2
2
1 3 5
=
=
=
,
,
, , ,
π
…
	
(5.101)
Suppose u(t) is the input to a second-order system with transfer function
	
G s
Y s
U s
s
s
n
n
n
( )
( )
( )
=
=
+
+
ω
ζω
ω
2
2
2
2
	
(5.102)
By the principle of superposition, y(t) is equal to the sum of the second-order system response 
to the constant a0 and the responses to the harmonic components un(t), n = 1, 3, 5, … Fourier coef­
ficients of the truncated series a
a
n
n
0
1 3 5
19
+
=
Σ
, , ,...
 sin nω0t are evaluated in the M-file “Ch5_Fourier_
Series.m,” a portion of which is listed as follows:
% MATLAB Script File Ch5_Fourier_Series.m
% Fourier Series of periodic function u(t)
% f(t) = A, 0 < = t<T/2
% = 0, T/2 < = t<T
n = 19; % order of truncated Fourier Series of u(t)
k = 1:2:n; % harmonics of u(t)
A = 10; % amplitude of u(t)
a = 2*A./(k.*pi); % Fourier Series coefficients a(k), k = 1,3,5,…,n
a0 = 0.5*A; % ave value of u(t)
T = 0.1; % period of u(t)
w0 = 2*pi/T; % input frequency
wh = k*w0; % harmonic frequencies
wr = wh(5); % Set resonant frequency equal to freq of 9th harmonic
wn = 1.01*wr; % calculate natural frequency
zeta = sqrt((1– (wr/wn)^2)/2); % calculate damping ratio
w = linspace (0,1500,500); % range of freq for jG(jw)j plot
s = j*w; % complex freqs
magG_w = (wn.^2)./abs(s.^2þ2*zeta*wn*sþwn^2); % jG(jw)j plot(w,magG_w)
hold on,s=j*wh;
magG_wh = (wn.^2)./abs(s.^2þ2*zeta*wn*sþwn^2); % jG(jwh)j 
plot(wh,magG_wh,".","MarkerSize",12)
num = [wn^2]; % numerator of G(s)
denom = [1 2*zeta*wn wn^2]; % denominator of G(s)

424
Simulation of Dynamic Systems with MATLAB® and Simulink®
SYS = TF (num, denom); % transfer function of G(s)
Figure, bode (SYS,{50, 1500})
[MAG, PHASE, wh] = BODE (SYS, wh); % Evaluate jG(jwh)j and Angle (G(jwh))
sim("resonance") % call Simulink model "resonance.mdl"
subplot(4, 2, 1); plot(t, harmonics (:,1))
subplot (4, 2, 3); plot(t, harmonics (:,2))
The truncated series expansion of u(t) is evaluated and compared to the input u(t) as part of a 
Simulink simulation shown in Figure 5.99. The Fourier coefficients and harmonic frequencies are 
used to set the parameters in the “Sine Wave” blocks. A comparison of the signal u(t) and the 
truncated Fourier Series is shown in Figure 5.100.
FIGURE 5.99  Simulink diagram for finding the response to u(t) and truncated Fourier Series of u(t).
12
10
u(t)
u(t) and its truncated Fourier series
Truncated Fourier series of u(t)
t
8
6
4
2
0
–2
0
0.05
0.1
0.15
0.2
FIGURE 5.100  Periodic signal u(t) (t = 0.1 s) and 19th-order truncated series.

425
Simulink®
The resonant frequency ωr of the second-order system with transfer function G(s) is set equal 
to the frequency of the ninth harmonic 9ω0 = 9(2π/T) = 565.49 rad/s. The natural frequency ωn is 
chosen slightly higher, that is, ωn = 1.01ωr, producing a lightly damped system with damping ratio 
of approximately 0.1 calculated from (Ogata 1998)
	
ζ
ω ω
 = 
/
1
2
2
−(
)
r
n
	
(5.103)
The second-order system response to u(t) and its response to the truncated Fourier Series repre­
sentation of u(t) are shown in Figure 5.101.
Clearly, enough harmonics of u(t) have been retained in the truncated Fourier Series to ­accurately 
predict the response of the second-order system under consideration.
Next, we discuss how MATLAB and Simulink can be used effectively to demonstrate the 
phenomenon of resonance. The M-file “Ch5_Fourier_Series.m” evaluates the magnitude func­
tion |G(jω)| over the frequency range 0 ≤ ω ≤ 1500 rad/s and plots the results with the harmonic 
­frequencies shown in Figure 5.102. Note that the resonant frequency ωr where the peak amplitude of 
|G(jω)| occurs is in fact equal to the frequency of the ninth harmonic. A similar finding is possible 
using the control system toolbox to specify the transfer function and draw a Bode plot or merely 
compute the magnitude function with “MAG” at selected frequencies and plot the results.
The Fourier coefficients of the truncated series expansion of u(t) are shown in Table 5.3. Also listed 
are the frequency response characteristics of the second-order system at the harmonic frequencies.
The peak magnitude at the resonant frequency is
	
Max
(
)|
(
)|
5.0624
ω
ω
ω
≥0 |
|
G j
G j
r
=
=
	
(5.104)
The harmonic components un(t), n = 1, 7, 9, 11 in the truncated series expansion of u(t) in 
Figure 5.98 are given by
	
u t
a
t
t
1
1sin 
 6 3662 sin 62 8
( )
.
.
=
=
ω0
	
(5.105)
20
10
0
–10
0
0.05
0.1
Second-order system response y(t) to input u(t)
0.15
0.2
20
10
0
–10
0
0.05
0.1
t
Second-order system response to truncated Fourier series of u(t)
0.15
0.2
FIGURE 5.101  Response of a second-order system to u(t) and its truncated Fourier Series.

426
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
u t
a
t
t
7
7sin 7
 9 95 sin 439 8
( )
.
.
=
=
ω0
0 0
	
(5.106)
	
u t
a
t
t
9
9sin 9
 7 74 sin 565 5
( )
.
.
=
=
ω0
0 0
	
(5.107)
	
u
t
a
t
t
11
11sin 11
 5787 sin 6912
( )
.
.
=
=
ω0
0
	
(5.108)
The second-order system response to the above components is
	
y t
G j
a
t
G j
1
1sin 
( )
(
)
[
(
)]
=
+∠
ω
ω
ω
0
0
0
	
(5.109)
	
=
−
1 12
6 3662  sin 62 8
221
.
( .
)
(
.
.
)
0
0
0 0
t
	
(5.110)
	
=
−
6 4426 sin 62 8
221
.
(
.
.
)
t
0 0
	
(5.111)
TABLE 5.3
Fourier Coefficients and Magnitude Function at Selected Frequencies
N
nω0 (rad/s)
an
|G(jnω0)|
∠G(jnω0) (rad)
0
0
5
1
0
1
ω0 = 62.8
6.3662
1.0120
–0.0221
3
3ω0 = 188.5
2.1221
1.1192
–0.0734
5
5ω0 = 314.2
1.2732
1.4166
–0.1553
7
Tω0 = 439.8
0.9095
2.3002
–0.3593
9
9ω0 = 565.5
0.7074
5.0624
–1.4709
11
11ω0 = 691.2
0.5787
1.9126
–2.6642
13
13ω0 = 816.8
0.4897
0.9232
–2.8764
15
15ω0 = 942.5
0.4244
0.5702
–2.9537
17
17ω0 = 1068.1
0.3745
0.3960
–2.9940
19
19ω0 = 1193.8
0.3351
0.2946
–3.0190
6
5
4
3
2
1
0
0
250
500
750
ω (rad/s)
ωr = 565.49 rad/s
11ω0
13ω0
19ω0
7ω0
9ω0
5ω0
3ω0
ω0
ωn = 571.14 rad/s
G(s): 2nd order
G(jω)
ζ = 0.1
1000
Harmonic frequencies
Magnitude function of second-order system
1250
1500
FIGURE 5.102  Magnitude function of a second-order system.

427
Simulink®
	
y t
G j
a
t
G j
7
7
7
sin 7
7
( )
(
)
[
(
)]
=
+∠
ω
ω
ω
0
0
0
	
(5.112)
	
=
−
2 3
2
9 95  sin 439 8
3593
.
( .
)
(
.
.
)
00
0 0
0
t
	
(5.113)
	
=
−
2 92 sin 439 8
3593
.
(
.
.
)
0
0
0
t
	
(5.114)
	
y t
G j
a
t
G j
9
9
9
sin 9
9
( )
(
)
[
(
)]
=
+∠
ω
ω
ω
0
0
0
	
(5.115)
	
=
−
5 624
7 74  sin 565 5
147 9
.
( .
)
(
.
.
)
0
0 0
0
t
	
(5.116)
	
=
−
3 5811 sin 565 5
147 9
.
(
.
.
)
t
0
	
(5.117)
	
y
t
G j
a
t
G j
11
11
11
sin 11
11
( )
(
)
[
(
)]
=
+∠
ω
ω
ω
0
0
0
	
(5.118)
	
=
−
19126
5787  sin 6912
2 6642
.
( .
)
(
.
.
)
0
t
	
(5.119)
	
=
−
11 68 sin 6912
2 6642
.
(
.
.
)
0
t
	
(5.120)
The Simulink data for the signals in Equations 5.105 through 5.108, 5.111, 5.114, 5.117, and 
5.120 are returned to the MATLAB Workspace (see Figure 5.99) for use by M-file “Ch5_Fourier_
Series.m” in preparing the graph shown in Figure 5.103. The input and output components can be 
identified by referring to the amplitudes in Equations 5.105 through 5.120.
5
–5
0.05
0.1
0
0
5
–5
0.05
0.1
0
0
7ω0 = 439.8 rad/s
ω0 = 62.8 rad/s
u1(t) and y1(t)
u7(t) and y7(t)
5
–5
0.05
0.1
0
0
5
–5
0.05
0.1
0
0
11ω0 = 691.2 rad/s
ωr = 9ω0 = 565.5 rad/s
u9(t) and y9(t)
u11(t) and y11(t)
t(s)
t(s)
FIGURE 5.103  Several harmonic components of u(t) and response of second-order system.

428
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note that y1(t) has a larger amplitude than y9(t), the system response to the harmonic component at 
the resonant frequency. This results from |G(jω0)|a1 = 6.4426 being larger than |G(j9ω0)|a9 = 3.5811. 
As a final comment, the line in “Ch5_Fourier_Series.m”
sim('resonance') % call Simulink model 'resonance.mdl'
enables the MATLAB script file “Ch5_Fourier_Series.m” to initiate execution of the Simulink 
model file “resonance.mdl.” With additional parameters in the “sim” command, the user has 
­control of many of the settings entered in the Simulink “Simulation Parameters” dialog box.
EXERCISES
	5.34	 A spring mass system described by mÿ + ky = F is subject to an external periodic force F(t) 
shown in Figure E5.34:
	
a.	 The Fourier series expansion of F(t) is
	
f t
a
a
n
t
T
n
n
( )
cos
,
=
+
=
=
∞
∑
0
0
0
1
2
2
ω
ω
π
	
	
a
T
F t
t
a
T
F t
n t
T
t
n
n
T
T
0
2
2
2
2
2
1 2 3
=
=






=
−∫
( )
,
( )cos
,
, ,
/
/
d
d
π
,
/
/
…
−∫
T
T
2
2
	
	
	
  Find expressions for the Fourier coefficients an, n = 0, 1, 2, 3, … .
	
b.	 The mass m = 1 slug and the natural frequency of the system is ωn = 25 rad/s. The period 
of the forcing function T is related to the natural frequency according to T = 2Nπ/cωn where 
N is a positive integer and c is a constant. Write a MATLAB script file that reads values of 
c and N and computes the period T and Fourier coefficients an, n = 0, 1, 2, 3, …, 3N.
	
	
For A = 1, c = 1, and N = 5, use the MATLAB script file to
	
c.	 Plot on the same graph F(t) and the truncated Fourier Series
	
f
t
a
a
n
t
FS
n
n
N
( )
cos
=
+
=∑
0
0
1
3
2
ω
	
	
for 0 ≤ t ≤ 3 T. Comment on the results.
	
d.	 Prepare a Simulink diagram for simulating the response of the system with zero ini­
tial conditions. Call the simulation from the script file using the same values for c and 
N.  Return  the values of {t, y(t)} to the MATLAB Workspace and plot the response. 
(The simulation should run long enough to recognize the steady-state response.) Comment 
on the results.
FIGURE E5.34

429
Simulink®
	5.35	 The dynamic interaction of rabbit and fox populations in a forest is under investigation. 
The predator–prey ecosystem is illustrated in block diagram form in Figure E5.35a:
	
	
R(t) = Population of rabbits after “t” weeks
	
	
F(t) = Population of foxes after “t” weeks
	
	
hR(t) = Rate of rabbit hunting (rabbits/week)
	
	
hF(t) = Rate of fox hunting (fox/week)
	
	
A Simulink diagram of the system is shown in Figure E5.35b:
	
	
aR, bR, cR = constant parameters defining the growth rate of rabbits
	
	
aF, bF, cF = constant parameters defining the growth rate of foxes
	
a.	 Find the mathematical model governing the system dynamics.
	
b.	 Find the nontrivial equilibrium points (Re, Fe) when hR(t) = 0, t ≥ 0 and hF(t) = 0, t ≥ 0.
	
c.	 Write a MATLAB script file to set the following baseline parameter values:
	     
a
b
c
R
R
R
=
= ×
−
0 05
5 10
2
7
3
.
,
,
rabbits/week
rabbit
rabbits/week
rabbit
=
×
−
−
1 25 10 5
2
.
rabbits/week
rabbit
fox
          	
a
b
c
F
F
F
=
= ×
= ×
−
−
0 04
2 10
8 10
2
5
3
7
.
,
,
foxes/week
fox
foxes/week
fox
foxes/week
foxes
rabbit
2 −
	
h t
t
h
t
t
R
F
( )
,
( )
,
=
≥
=
≥
 
 
 
 
0
0
0
0 	
	
R
F
( )
,
( )
0
0 000
0
000
=
=
5
1
	
	
d.	 Run the simulation and plot R(t) and F(t) vs. t until the system reaches equilibrium.
	
e.	 Obtain a solution trajectory R vs. F. Place a vertical line at F = Fe and a horizontal line at 
R = Re. This will allow you to verify by inspection if the solution trajectory approaches 
the theoretical equilibrium.
FIGURE E5.35A
FIGURE E5.35B

430
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f.	 Investigate the effect of changes in cR, a parameter that measures the interaction between 
foxes and rabbits. Plot families of appropriate responses corresponding to 0%–50% 
change in cR.
	
g.	 Establish a policy for hunting rabbits that makes the number of foxes equal to approxi­
mately 2500 at equilibrium.
	
h.	 Establish a policy for hunting foxes that makes the number of rabbits equal to approxi­
mately 35,000 at equilibrium.
	5.36	 The tank shown in Figure E5.36 has a brine solution flowing into it. The solution is stirred 
well enough, so that the concentration of salt in the tank is uniform.
	
	
The mathematical model consists of the following equations:
	
d
d
Q
t
c F
cF
=
−
1 1
0
	
	
c
Q
A
V
AH
=
=
,
	
	
A H
t
F
F
F
H
d
d
+
=
=
0
1
0
1 2
,
/
α
	
	
	
The system baseline parameter values are A = 20 ft2 and α = 6 gal/min per ft1/2.
	
	
Note: 1 ft3 of water is roughly 8.3 gal.
	
a.	 Draw a simulation diagram of the system.
	
b.	 Choose the state variables as x1 = Q and x2 = H and the outputs y1 = c, y2 = Q, and 
y3 = V. Write the state equations in the form
	
x
f x x c F
y
g x x c F
1
1
1
2
1
1
1
1
1
2
1
1
=
=
(
,
,
,
),
(
,
,
,
) 	
	
x
f
x x c F
y
g x x c F
2
2
1
2
1
1
2
2
1
2
1
1
=
=
(
,
,
,
),
(
,
,
,
) 	
	
y
g x x c F
3
3
1
2
1
1
=
(
,
,
,
) 	
	
c.	 Find expressions for the steady-state values of the states x1(∞) and x2(∞) and the outputs 
y1(∞), y2(∞), and y3(∞) assuming c1 and F1 are constant.
	
d.	 The tank is initially filled with 100 gal of water (no salt). Brine starts flowing into the tank 
at the rate of 12 gal/min. The salt concentration of the brine is 0.25 lb/gal. Both the flow 
rate and salt concentration of the brine flow remain constant. Using explicit Euler integra­
tion, find the discrete-time state equations
FIGURE E5.36

431
Simulink®
	
x
n
f x
n u n
A
A
(
)
[
( ), ( )]
+
=
1  
	
	
y
n
g x
n u n
A
A
( )
[(
( ), ( )]
=
	
	
	
used to obtain an approximate solution for the continuous-time states and outputs.
	
e.	 Solve the discrete-time state equations recursively for the discrete-time states x1,A(n) and 
x2,A(n) and the outputs y1,A(n), y2,A(n), and y3,A(n). Graph the transient responses. Comment 
on the value of T used for the numerical integrator.
	
f.	 Compare the steady-state results obtained in part (e) with the predicted values from part 
(c). Comment on the results.
	
g.	 Use Simulink to verify the responses obtained in part (e).
5.9  HYBRID SYSTEMS: CONTINUOUS- AND DISCRETE-TIME COMPONENTS
Hybrid systems consist of continuous-and discrete-time components and the interfaces bridging 
the gap between them. A good example is a digital controller (microprocessor or general-purpose 
digital computer) determining discrete-time input (s) to a continuous-time process.
Figure 5.104 shows a digital controller used to regulate the temperature inside a chamber. 
The DC voltage input to the heater v(t) is determined by a digital control algorithm represented 
by discrete-time transfer function D(z). The heat input to the chamber is assumed proportional to 
the square of the heater voltage. A temperature sensor with gain KS produces a voltage signal vS(t) 
for comparison with a reference voltage vR(t). The reference voltage is based on the commanded 
­temperature TR(t) (not shown in Figure 5.104).
The error signal e(t) is sampled every T s in an analog-to-digital (A/D) converter. The A/D con­
verter functions as an interface between the continuous-time inputs (sensor and reference voltage) 
and the discrete-time digital controller. The error signal e(k) is processed by the digital controller, 
resulting in an output v(k), the intended voltage to the heater. A digital-to-analog (D/A) converter, 
operating synchronously with the A/D, produces the voltage. Internal circuitry in the D/A latches 
the discrete-time input for the duration of the sampling period, resulting in a stepwise constant 
­voltage v(t) applied to the heater. The D/A converter serves as an interface between the discrete-time 
and continuous-time components. It is modeled by a zero-order hold (ZOH) in Figure 5.104.
The digital controller implements a linear difference equation for v(k) in terms of past values 
v(k – 1), v(k – 2), …, v(k – n) as well as present and past values e(k), e(k – 1), …, e(k – p). Digital 
controllers are often synthesized by approximating continuous-time controllers. For example, the 
transfer function of a continuous-time proportional-integral-derivative (PID) controller is
	
V s
E s
K
K
s
K s
P
I
D
( )
( ) =
+
+
	
(5.121)
FIGURE 5.104  Digital control of chamber temperature.

432
Simulation of Dynamic Systems with MATLAB® and Simulink®
Approximating the integral by trapezoidal integration and the derivative by a backward differ­
ence equation leads to the equivalent digital transfer function (Jacquot 1981)
	
D z
c z
c z
c
z
z
( ) =
+
+
−
1
2
2
3
2
	
(5.122)
where
	
c
K
K T
K
T
c
K T
K
K
T
c
K
T
P
I
D
I
P
D
D
1
2
3
2
2
2
=
+
+
=
−
−
=
,
,
	
(5.123)
The continuous-time process model is (see Section 2.7)
	
C T
t
R T
R T
QH
d
d +
=
+
1
1
0
	
(5.124)
where
C is the thermal capacitance of the interior space (objects and volume of air assumed to be at 
the same temperature)
R is the effective thermal resistance of the material separating the inside and outside of the 
chamber
The heater output is
	
Q
t
v t
R
H
e
( )
( )
=
2
	
(5.125)
where Re is the electrical resistance of the heater coil. A temperature sensor produces a voltage 
proportional to the interior temperature
	
v t
K T t
s
s
( )
( )
=
	
(5.126)
A Simulink diagram of the system is shown in Figure 5.105. The commanded reference tem­
perature TY is converted to a reference voltage input with a Units Converter, that is, a “Gain” block 
with parameter equal to KS. A “Saturation” block limits the actual voltage v(t) to the heater. 
The “Zero-Order Hold” and “Rate Transition” blocks are included to resolve timing 
issues related to the faster simulation execution rate (based on the integration step) and the slower 
­sampling rate of the digital controller.
System parameters were set in the MATLAB script file “Ch5_dig_cont.m.”
Chamber: R = 0.175°F/Btu/min, C = 50 Btu/°F
FIGURE 5.105  Simulink diagram of a digital control system for chamber temperature.

433
Simulink®
Sensor: KS = 0.25V/°F
Controller: KP = 2, KI = 2, KD = 0.25
Heater: Re = 1.25 Ω, vmax = 100 V
Inputs: TR(t) = 125°F, t ≥ 5, T0(t) = 75°F, t ≥ 0
Timing: T = 0.02 min (sample time), ∆t = 0.002 min (integration step size)
Figure 5.106 shows the voltage v(k) computed from the digital control algorithm and the actual 
voltage v(t) to the heater. Note the initial spike due to the presence of the proportional control and 
derivative action in the controller. The initial continuous-time voltage to the heater is “maxed out” 
at a 100V, the upper limit of the saturation block.
Figure 5.107 shows the heat flows to and from the chamber. Note the constant heat flow to the 
chamber when the heater is at saturation. At the end of the transient response period, the heat flows 
have equalized, and the chamber interior is in thermal equilibrium with its surroundings.
Figure 5.108 is a graph of the chamber temperature increasing from its initial value of 75°F to the 
commanded value of 125°F. The step response is typical of a slightly underdamped second-order 
system with a settling time between 50 and 60 min.
The thermal time constant of the chamber is
	
τ =
=
°
×
°
=
RC
0 175
50
8 75
.
.
min
F
Btu/min
Btu
F
	
The sampling time T = 0.02 min of the A/D converter is chosen several orders of magnitude less 
than the process time constant in order to capture the transient behavior of the chamber temperature. 
A more precise way of determining the sampling rate will be discussed in a subsequent chapter.
The control system is nonlinear as a consequence of Equation 5.125. Laplace transforms cannot 
be used to find an analytical solution for the system variables. Simulation is the only viable approach 
to examining the system dynamics.
EXERCISES
In Exercises 5.37 through 5.40, use baseline values for the system parameters found in “Ch5_dig_
cont.m” unless otherwise stated.
FIGURE 5.106  Digital controller output v(k) and heater input v(t).

434
Simulation of Dynamic Systems with MATLAB® and Simulink®
	5.37	 Plot the simulated chamber temperature responses (on the same graph) corresponding to a 
range of sampling intervals from 0.01 to 0.25 min. Comment on the results.
	5.38	 The maximum output from the chamber heater in watts is (QH)max = vmax
2 /Re.
	
a.	 Find Tmax, the maximum temperature achievable in the chamber.
	
b.	 Note: 1 kW = 56.896 Btu/min.
FIGURE 5.108  Chamber temperature response T(t) to reference input TR(t) = 125°F, t ≥ 5.
FIGURE 5.107  Heater input QH(t) and heat loss Q0(t) from chamber to surroundings.

435
Simulink®
	
c.	 Simulate the chamber temperature when the commanded temperature is set to
	
i.	 Tmax
	
ii.	 10% higher than Tmax
	
iii.	 25% higher than Tmax
	5.39	 Simulate the temperature response of the control system with proportional control only, that 
is, KI = 0 and KD = 0. The set point temperature is 200°F. Vary KP from 1 to 10 and plot the 
responses on the same graph.
	5.40	 Suppose the chamber temperature has been constant at TR = 125°F for some time. Simulate 
the chamber temperature T(t) when
	
a.	 the heater is turned off
	
b.	 the reference temperature is set to 150°F
	5.41	 Simulate the chamber temperature using a digital controller obtained by approximating 
the continuous controller in Equation 5.121 using Tustin’s method (trapezoidal integration). 
Compare the results with those shown in Figures 5.106 through 5.108.
5.10  MONTE CARLO SIMULATION
The dynamic systems, which have been simulated to this point, were all deterministic, that is, there 
have been no random components associated with either the system’s parameters or inputs. In ­reality, 
knowledge of the values of a system’s parameters is inexact for a number of reasons. Precise 
­measurement or observation of the parameters may be difficult, or it is possible that the numerical 
values drift over time as the components age. Quantitative descriptions of the input ­signals a priori 
may be probabilistic in nature. The existence of random inputs and uncertain ­system parameter val­
ues leads to stochastic differential equation models with solutions in the form of ­stochastic processes.
An alternate approach is based on the technique of Monte Carlo simulation. An empirical 
rather than analytical method, its name stems from the random nature of gambling and associated 
­probabilities. The underlying premise in Monte Carlo simulation is that by repeatedly sampling 
from known probability distributions, the probabilities of events or probability distributions of func­
tions of a random variable (s) can be approximated. Sampling from the probability distribution of 
a ­random variable (or random variables) to generate random deviates is substituted for the process 
of making observations of the random variable (s) from the real world or physical process itself. 
In other words, random samples obtained by actual measurements or observations of a random 
variable are replaced by simulated random samples based on random number generators and known 
probability distributions.
Consider a simple mechanical system with mass M, spring constant K, and damping coefficient 
B described by
	
My
By
Ky
f t


+
+
=
( ) 	
(5.127)
where
y is the displacement of the mass from equilibrium
f(t) is a force acting on the mass
Suppose M, B, and K are continuous random variables with known probability density functions 
(pdf’s) fM(u), fB(u), and fK(u), respectively. The damping ratio ζ
	
ζ
ζ
=
=
(M B K
B
MK
,
,
)
2
	
(5.128)
is a new random variable, which, along with the natural frequency, characterizes the system’s 
natural dynamics. Finding the theoretical probability distribution of ζ, that is, its pdf fζ(u), is a 

436
Simulation of Dynamic Systems with MATLAB® and Simulink®
formidable task despite the relative simplicity of Equation 5.128. The following example demon­
strates a Monte Carlo simulation to obtain what we shall refer to as an empirical probability density 
function denoted ˆ ( )
f u
ζ
 to distinguish it from the true pdf fζ(u). The empirical pdf can be used to 
approximate probability distributions of other random variables functionally related to the damping 
ratio such as the overshoot in the step response of underdamped second-order systems.
The parameters M, B, and K are each assumed to vary uniformly between specified limits. 
The pdf for random variable M is the uniform pdf, denoted U(Ml, Mu) where Ml and Mu are the lower 
and upper limits of M, respectively. In mathematical terms, the pdf is given by
	
f
u
M
M
M
u
M
M
u
l
l
u
( )
,
,
=
−
≤
≤





1
0
elsewhere
	
(5.129)
Similar expressions apply for the pdfs of random variables B and K, that is,
	
f
u
B
B
B
u
B
B
u
l
l
u
( )
,
,
=
−
≤
≤





1
0
elsewhere
	
(5.130)
	
f
u
K
K
K
u
K
K
u
l
l
u
( )
,
,
=
−
≤
≤





1
0
elsewhere
	
(5.131)
A random variable, uniformly distributed between 0 and 1, also referred to as a random number, 
is generated by the MATLAB function “rand.” To be more precise, the generated numbers are 
­actually pseudo random numbers, which depend on the specific algorithm implemented for genera­
tion. A random number Ri uniformly distributed U(0, 1) is transformed to a new random variable Xi 
with pdf U(A, B) by
	
X
A
B
A R
i
i
=
+
−
(
)
	
(5.132)
The MATLAB M-file “Ch5_MonteCarlo_damping_ratio.m” generates 100,000 random vec­
tors (Mi, Bi, Ki), i = 1, 2, …, 100,000 using lower and upper limits Ml = 0.9, Mu = 1.1, B1 = 1.75, 
Bu = 2.25, Kl = 3.8, and Ku = 4.2. The corresponding 100,000 damping ratios ζi = 1, 2, …, 100,000 
computed from Equation 5.128 are segregated into equal intervals of width 0.005, several of which 
are shown in Table 5.4.
A histogram based on the first and third columns of the complete table is shown in the left graph 
of Figure 5.109. The empirical probability density function ˆ ( )
f u
ζ
 is obtained by connecting the 
points ( ,
)
ζi
in  and rescaling the ordinate values to fi using Equation 5.133 to make the area under 
the resulting curve equal to 1.
	
f
n
n
n
i
i
i
i
=
×
=
×
=
Number of trials
width of interval
100 000
0 005
,
.
500 	
(5.133)
Finally, a data point is added ζi = 0 0 0
.6 5 , fi = 0 to assure the pdf ˆ ( )
f u
ζ
 returns to zero at the 
upper tail. The result is shown in the right graph of Figure 5.109.
The theoretical probability of ζ falling in a certain interval is the area under fζ(u) for that interval. 
It is approximated by the area under the empirical pdf ˆ ( )
f u
ζ
 for the same interval. For example, the 

437
Simulink®
estimate of Pr(0.45 ≤ ζ ≤ 0.5) is computed in the M-file “Chain _MonteCarlo_damping_ratio.m” 
to be 0.4105.
The empirical pdf4 ˆ ( )
f u
ζ
 can be used to approximate probabilities involving various perfor­
mance measures related to the damping ratio. For example, the percent overshoot in the unit step 
response and the peak amplitude of the frequency response
	
P O
f
. .
(
=
=
−
/
−
1
1
2
ζ
ζπ
ζ
)
100e
	
(5.134)
	
M
f
pω
ζ
=
=
−
2
2
1
2
1
( )
ζ
ζ
	
(5.135)
TABLE 5.4
Monte Carlo Simulation Results for Damping Ratio
Interval (ζi–1 ≤ ζ ≤ ζi)
Center of Interval ζi
Frequency of 
Occurrence ni
Normalized Frequency 
of Occurrence fi
(0.3975, 0.4025)
0.4000
0
0
(0.4025, 0.4075)
0.4050
0
0
(0.4075, 0.4125)
0.4100
33
0.0660
(0.4875, 0.4925)
0.4900
4053
8.1060
(0.4925, 0.4975)
0.4950
4098
8.1960
(0.4975, 0.5025)
0.5000
4062
8.1240
(0.5025, 0.5075)
0.5050
4033
8.0660
(0.5075, 0.5125)
0.5100
3986
7.9720
(0.5875, 0.5925)
0.5900
341
0.6820
(0.5925, 0.5975)
0.5950
164
0.3280
(0.5975, 0.6025)
0.6000
59
0.1180
4000
100,000 trials
Histogram of damping ratio values
3500
3000
2500
2000
1500
1000
500
0
0.4
0.45
0.5
Damping ratio, u
0.55
0.6
Frequency of occurrence, ni
Monte Carlo damping ratio pdf
Empirical pdf
Damping ratio, u
0.4
0.45
0.5
fi
Kl = 3.8, Kl = 4.2
Bl = 1.75, Bu = 2.25
Ml = 0.9, Mu = 1.1
0.55
0.6
8
7
6
5
Approximation of fζ (u)
4
3
2
1
0
FIGURE 5.109  Histogram of ζ values and empirical pdf ˆ ( )
f u
ζ
.

438
Simulation of Dynamic Systems with MATLAB® and Simulink®
How shall we go about determining the empirical pdf ˆ
( )
f
u
Mpω
? A table similar to Table 5.4 
with equally spaced intervals of Mpω and frequencies of occurrence is needed. The first step is to 
generate a random sample from a population with pdf ˆ ( )
f u
ζ
. The random sample (ζ1, ζ2, …, ζn)
and Equation 5.135 are used to generate the sample [(Mpω)1, (Mpω)2, …, (Mpω)n] needed for the new 
table.
The random sample (ζ1, ζ2, …, ζn) can be generated in several ways. One method relies on the 
use of random numbers (R1, R2, …, Rn) and the cumulative probability distribution function (cdf), 
ˆ ( )
F u
ζ
 given by
	
ˆ ( )
ˆ ( )
,
F u
f x
x
u
u
ζ
ζ
=
−∞<
< ∞
−∞∫
d
	
(5.136)
The empirical pdf ˆ ( )
f u
ζ
 is numerically integrated in “Ch5_MonteCarlo_damping_ratio.m,” 
resulting in ˆ ( )
F u
ζ
 shown in Figure 5.110. A random damping ratio ζi is obtained as the solution to 
the equation
	
R
F
i
i
= ˆ ( )
ζ ζ 	
(5.137)
where (Ri) is a random number uniformly distributed between 0 and 1. That is, ζi is obtained from
	
ζ
ζ
i
i
F
R
=
−
ˆ
(
)
1
	
(5.138)
where ˆ
(
)
F
Ri
ζ
−1
 is the inverse function. The Inverse Transformation Method (Gordon 1978) based on 
Equation 5.138 is illustrated in Figure 5.110.
After the random sample [(Mpω)1, (Mpω)2, …, (Mpω)n] is generated from (ζ1, ζ2, …, ζn) and Equation 
5.135, the empirical pdf ˆ
( )
f
u
Mpω
 is obtained in the same way ˆ ( )
f u
ζ
 was determined.
1
0.9
0.8
0.7
0.6
Generation of random ζ1 iValues
Fζ (u)
ζi
Ri
0.5
0.4
0.3
0.2
0.1
0
0.35
0.4
0.45
0.5
Damping ratio, u
Empirical cumulative distribution function
0.55
0.6
0.65
∧
FIGURE 5.110  Illustration of method for generating ζi using ˆ ( )
F u
ζ
.

439
Simulink®
Suppose we have reason to estimate Pr[1.1 ≤ Mpω ≤ 1.3]. The area under ˆ
( )
f
u
Mpω
 between 1.1 
and 1.3 is easily computed. Alternatively, we could numerically integrate ˆ
( )
f
u
Mpω
 to obtain ˆ
( )
F
u
Mpω
 
and estimate the required probability from
	
Pr [1.1
1.3] 
,(1.3)
(1.1)
≤
≤
=
−
M
F
F
p
M
M
p
p
ω
ω
ω
ˆ
ˆ
	
(5.139)
The details are left for an exercise at the end of the section.
5.10.1  Monte Carlo Simulation Requiring Solution of a Mathematical Model
In the previous example, the parameters M, B, and K of a second-order system were random vari­
ables with known probability density functions fM(u), fB(u), and fK(u). Additional random variables 
were introduced, namely, ζ and Mpω in Equations 5.128 and 5.135. Using Monte Carlo simulation, 
the theoretical probability density functions fζ(u) and fMpω(u) were approximated by empirical pdfs 
ˆ ( )
f u
ζ
 and ˆ
( )
f
u
Mpω
 without ever solving the differential equation model, Equation 5.127. In the next 
example, simulation of the mathematical model is an integral component of the overall Monte Carlo 
simulation study.
Suppose an archer is attempting to hit a falling target as shown in Figure 5.111.
Considering the aerodynamic drag forces on the arrow and target, the differential equations 
governing the motions of each are
	
m x
x
A
A
A
A
nA


=  – α
	
(5.140)
	
m y
m g
y
y
A
A
A
A
A
A
nA



=
⋅
–
–
(
)
 
sgn
α
	
(5.141)
	
m y
m g
y
T
T
T
T
T
nT


=
+
 
 
–
α
	
(5.142)
where
mA and mT are masses of the arrow and target
αA, nA, αT and nT are parameters for modeling arrow and target drag forces
xA(t), yA(t), xT and yT(t) are the x–y coordinates of the center of the arrow and center of 
the ­circular target
FIGURE 5.111  Arrow fired at a falling target.

440
Simulation of Dynamic Systems with MATLAB® and Simulink®
The sgn (
)
yA  function
	
sgn(




y
y
y
y
y
A
A
A
A
A
)
| (
) |
,
,
=
=
>
−
<



1
0
1
0 	
(5.143)
is required to produce the proper sign on the arrow drag term for both upward and downward flights. 
Absolute values appear in Equations 5.141 and 5.142 to avoid raising negative speeds to noninteger 
powers.
The velocity of the arrow is uniquely determined by its speed vA(t) and direction θ(t), that is, the 
angle between the arrow and the horizontal axis. The speed is calculated from
	
v
t
x
t
y
t
A
A
A
( )
[
( )
( )] /
=
+


2
2
1 2
	
(5.144)
and the angle θ(t) is determined from
	
tan ( )
( )
( )
θ t
y
t
x
t
A
A
= 

	
(5.145)
	
⇒
=






−
θ( )
tan
( )
( )
t
y
t
x
t
A
A
1 

	
(5.146)
Baseline parameter values for the system are
	
m
g
n
A
A
A
=
=
×
=
−
0
0
.
,
.
,
.
125/ slugs
4 75 1
185
6
α
	
	
m
g
n
T
T
T
=
= ×
=
−
1/ slugs
2 3
6
,
,
.
α
3 10
	
	
x
y
v
A
A
A
( )
,
( )
,
( )
0
0
0
0
0
0
=
=
=
 ft
 ft
8  ft/s 	
	
′ =
=
x
y
T
T
1
 ft
15  ft
00
0
0
,
( )
	
The arrow is 2.4 ft in length and the target is 3 ft in diameter.
A Simulink diagram for simulating the trajectories of the arrow and target is 
shown in Figure  5.112.  The Simulink model “arrow.mdl” is called from the M-file 
“Ch5_MonteCarlo_arrow.m.”
Initially, the aerodynamic drag forces were zeroed out (αA = αT = 0) and the arrow’s angle of 
departure θ(0) was set to the angle of the line of sight to the target because the archer knows, from 
Physics, that the target will be struck (in the absence of aerodynamic drag forces) under those condi­
tions. The flight path of the arrow and its position at 0.25 s increments is shown in Figure 5.113. The 
target is captured at 0.25 s increments starting at 2 s and shown as well. Figure 5.113 confirms that 
the arrow and target appear to be at the same point after approximately 2.25 s.
Figure 5.114 is a close-up snapshot of the arrow and target when the arrow has traveled the 
­horizontal distance to the target. The arrow strikes the target after 2.25 s have elapsed. The arrow 
and target coordinates at impact are (xA = 100 ft, yA = 68.32 ft) and (xT = 100 ft, yT = 68.39 ft), 
respectively. How do you explain the slight difference between yA and yT? Note that the simulation 
is halted when the arrow strikes the ground after 4.15 s (see “display” in Figure 5.112).

441
Simulink®
The reader should experiment with different target heights and arrow initial velocities to confirm 
the result whereby the arrow always intercepts the target. Naturally, the time and location where the 
arrow hits the target will depend on the new initial conditions.
A natural question to ask is “What happens when the drag forces are accounted for and 
an element of randomness associated with the archer’s aim and initial speed of the arrow is 
­introduced?” To answer the question, let us assume that the arrow’s angle of departure θ(0) = θ0 
and its initial velocity v(0) = v0 off the bow are random variables with probability density 
functions
	
f
u
N
u
θ
θ
θ
µ
σ
0
0
0
( ) ~
(
,
),
−∞<
< ∞	
(5.147)
90
80
80
100
Horizontal distance, x (ft)
Flight of arrow
Arrow location at t = 0, 0.25, 0.5 s, ...
Target location at t = 2, 2.25, 2.5 s, ...
Trajectories of arrow and target
Height above ground, y (ft)
120
140
160
180
70
60
60
50
40
40
30
20
20
10
0
0
FIGURE 5.113  Path of the arrow and target at selected times.
FIGURE 5.112  Simulink diagram of arrow and target simulation.

442
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f
v
U v
v
v
v
v
v
L
U
L
U
0
0
0
0
0
( )
[(
) ,(
) ],
(
)
(
)
∼
≤
≤
	
(5.148)
where
µθ0 and σθ0 are the mean and standard deviation of the Normal population
(v0)L and (v0)U are the lower and upper limits of the Uniform population
A Monte Carlo experiment can be designed to estimate the probability of hitting the target. 
“Ch5_MonteCarlo_arrow.m” uses the MATLAB functions “rand” and “randn” to generate ran­
dom deviates Ri ~ U(0, 1) and zi ~ N(0, 1). Ri and zi are transformed to random deviates from the 
desired populations, Equations 5.147 and 5.148 by
	
(
)
θ
µ
σ
θ
θ
0
0
0
i
iz
=
+
	
(5.149)
	
(
)
(
)
[(
)
(
) ]
v
v
v
v
R
i
L
U
L
i
0
0
0
0
=
+
−
	
(5.150)
For now, let us assume that the mean angle of departure of the arrow is equal to the sight angle to 
the target and the standard deviation is 1°. Further, assume that the initial velocities are uniformly 
distributed between 75 and 85 ft/s. Two Monte Carlo experiments were performed, each with a total 
of 50,000 random vectors [(θ0)i, (v0)i] generated and 50,000 Simulink simulation runs executed. 
During each run, the occurrence of a “hit” or “miss” is determined and recorded. A “hit” occurs at 
time t
t
= ˆ when the arrow has traveled a horizontal distance xT, that is, x
t
x
A
T
( )ˆ =
 provided
	
y t r
y
t
y t
r
T
T
A
T
T
( )
( )
( )
ˆ
ˆ
ˆ
≤
≤
+
	
(5.151)
where rT = 1.5 ft is the radius of the target. The vertical separation between the arrow and target at 
t
t
= ˆ is the distance ∆,
	
∆ 
( )
( )
= y
t y t
A
T
ˆ
ˆ 	
(5.152)
80
75
70
65
60
55
85
90
95
100
105
110
115
Horizontal distance, x (ft)
Height above ground, y (ft)
t = 2.25 s
Arrow height = 68.32 ft
Target height = 68.39 ft
Close-up of arrow striking target
Path of falling target
FIGURE 5.114  Close-up of the arrow and target.

443
Simulink®
Results of both experiments are saved in MATLAB data files “arrowdata1.mat” and 
“arrowdata2.mat.” Histograms of the separations ∆i, i = 1, 2, …, 50,000 for both Monte Carlo 
runs are plotted in M-file “Ch5_plot_arrow_histogram.m” and shown in Figure 5.115 along with 
the estimated probability of hitting the target.
The histograms suggest that the separation ∆ is approximately normally distributed with mean 
zero. Since more than 99% of the total area under a Normal pdf lies within the mean plus and minus 
three standard deviations, the standard deviation of ∆ is approximately 5 ft.
A question that naturally arises with Monte Carlo simulation is “How many random trials are 
needed to accurately estimate an unknown theoretical probability?” Figure 5.116 is a plot of the 
1500
1000
500
Freq of occurrence
0
–25
25
–20
v(0) ~ U(75 fps, 85 fps)
θ(0) ~ N(56.31°, 1°)
50,000 runs
Pr(Hit) = 0.2087
Arrowdata1.mat
20
–15
15
–10
10
–5
5
0
Histogram of vertical separation between arrow and target
1500
1000
500
Freq of occurrence
0
–25
25
–20
v(0) ~ U(75 fps, 85 fps)
θ(0) ~ N(56.31°, 1°)
Δ = yA –  yA (ft)
50,000 runs
Pr(Hit) = 0.2082
Arrowdata2.mat
20
–15
15
–10
10
–5
5
0
Histogram of vertical separation between arrow and target
FIGURE 5.115  Estimated Pr(hit) and histogram of separations.
0.24
0.235
0.223
0.225
0.22
0.215
0.21
0.205
0
100
200
300
400
500
Number of trials
Arrowdata1.mat
Eﬀect of number of trials on estimated probability of hitting target
Estimated probability of a hit
600
700
800
900
1000
FIGURE 5.116  Estimated probability of a hit after 100, 200, …, 1000 trials.

444
Simulation of Dynamic Systems with MATLAB® and Simulink®
estimated probability of hitting the target computed after 100, 200, …, 1000 trials from the first 
data file “arrowdatal.mat.”
After 1000 trials, an estimate of the true (unknown) probability of hitting the target, under the 
conditions given for θ(0) and v(0), is accurate to one place after the decimal point. Figure 5.117 is a 
similar plot showing the estimated probability of hitting the target computed after every 1000 trials. 
The estimated probability of a hit based on 50,000 trials is now accurate to three places after the 
decimal point.
Figure 5.118 shows arrow and target locations from four of the random trials. Note the correlation 
between the height of the arrow and the initial speed v(0). The arrow is located at a higher elevation 
when the initial speed is greater. Also, ∆, the separation between the arrow and target, should be 
0.216
0.214
0.212
0.21
0.208
0.206
0
1
2
3
4
Number of trials
× 104
Arrowdata1.mat
Eﬀect of number of trials on estimated probability of hitting target
Estimated probability of a hit
5
FIGURE 5.117  Estimated probability of a hit after 1000, 2000, …, 50,000 trials.
60
55
50
45
90
95
100
Height above ground, y (t)
Height distance, x (t)
105 110
t = 2.46 s
v(0) = 75.21 ft/s
θ(0) = 55.99°
80
75
70
65
90
95
100
Height above ground, y (t)
Height distance, x (t)
105 110
t = 2.46 s
v(0) = 87.67 ft/s
θ(0) = 55.65°
55
50
45
40
90
95
100
Height above ground, y (t)
Height distance, x (t)
105 110
t = 2.54 s
v(0) = 75.39 ft/s
θ(0) = 57.28°
80
85
75
70
90
95
100
Height above ground, y (t)
Height distance, x (t)
105 110
t = 2.13 s
v(0) = 83.85 ft/s
θ(0) = 55.59°
FIGURE 5.118  Arrow and target positions from four runs.

445
Simulink®
dependent on the angle of departure θ(0), specifically its relationship to the line of sight angle θLS 
(see Figure 5.111).
	
θLS
T
T
y
x
=





=





=
−
−
tan
( )
tan
.
1
1
0
150
100
0 9828 rad (56.31 )°
	
(5.153)
In the first run (upper left graph in Figure 5.118), the angle of departure (55.99°) is slightly less than 
the line of sight angle, and the arrow strikes the target just below its center. In the second run (upper 
right), the initial angle θ(0) is even less and the arrow passes under the target. In the last two runs, 
the angle of departure is significantly greater (lower left) and significantly less (lower right) than θLS, 
and the corresponding separations are greater and in the expected direction.
The arrow speed v(t) and pitch angle θ(t) for the last case (lower right corner) are shown in 
Figure 5.119. When the arrow is directly below the target at t = 2.13 s, the speed is 45.22 ft/s and 
the pitch angle is –2.93°.
EXERCISES
In Exercises 5.42 and 5.43, M, B, and K are randomly distributed according to Equations 5.129 
through 5.131 with the same limits given in the text.
	5.42	 Use “Ch5_MonteCarlo_damping_ratio.m” or write your own program to find and graph the 
approximate pdf ˆ
( )
f
u
Mpω
 and cdf ˆ
( )
F
U
Mpω
. Find Pr[1.1 ≤ Mpω ≤ 1.3].
	5.43	 The resonant frequency of a second-order system depends on the damping ratio and natural 
frequency according to
	
ω
ω
ζ
ζ
r
n
=
−
≤
1
2
0 707
2,
.
  
	
	
a.	 Use Monte Carlo simulation to approximate the true pdf and cdf for ωr.
	
b.	 Graph ˆ
( )
f
u
r
ω
 and ˆ
( )
F
u
r
ω
.
	
c.	 Estimate Pr
rad/s
[
]
ωr >
2
.
90
80
70
60
v(t), ft/s
50
40
75
50
25
0
θ(t), °F
–25
–50
–75
0
0.5
1.5
2.5
3.5
4
4.5
2
Speed of arrow
Pitch angel of arrow
3
1
0
0.5
1.5
2.5
3.5
4
4.5
2
3
1
FIGURE 5.119  Arrow speed v(t) and pitch θ(t) for v(0) = 83.85 ft/s, θ(0) = 54.59°.

446
Simulation of Dynamic Systems with MATLAB® and Simulink®
	5.44	 Repeat Exercise 5.43 if the mass M is normally distributed with mean µM = 1 slug and stan­
dard deviation σM = 0.25 slugs. Assume B and K are no longer random, instead B = 2 lb s/ft 
and K = 4 lb/ft.
	5.45	 Suppose the arrow and target with mass and aerodynamic properties given in the text are 
dropped from an airplane in level flight at a cruising speed of vcr = 600 ft/s.
	
a.	 Find expressions for the terminal velocities of both.
	
b.	 Simulate their descent from an altitude of 10,000 ft with zero initial velocity.
	
c.	 Plot the acceleration of each during their descent.
	5.46	 Neglecting aerodynamic damping forces and assuming that the initial firing angle of the 
arrow is equal to the sight angle to the target, perform a simulation study to produce the miss­
ing graphs in Figure E5.46:
	5.47	 A boy is throwing rocks, aiming at a circular target with diameter D. The center of the target 
is xT ft down range from where he is located (see Figure E5.47). The aerodynamic drag force 
is proportional to the speed of the rock with drag constant α. The rocks are launched from a 
height of y0 at an angle ϕ(0) and initial speed v(0). The weight of the rock is W. The distance 
downrange where the rock lands is R.
FIGURE E5.46
(a)
(b)
45
40
35
30
25
20
20
40
60
80
Horizontal distance of stone, x (ft)
Trajectory of stone
Height of stone, y (ft)
100
120
140
160
15
10
5
0
0
FIGURE E5.47

447
Simulink®
	
	 Baseline system parameter ­values are
	
y0 = 6 ft, xT = 160 ft, D = 4 ft, α = 9 × 10−4 lb/ft/s, W0 = 0.5 lb,
	
ϕ(0) = 45°, and v(0) = 75 ft/s
	
a.	 Write the equations comprising the mathematical model of the system in state variable 
form x = f(x, u) where the state vector x = [x x y y].
	
b.	 Use Simulink to simulate the system under baseline conditions, and verify the stone tra­
jectory shown in figure of Exercise 5.47:
	
c.	 The boy picks up a rock, the weight of which is uniformly distributed between 0.25 and 
0.75 lb, and throws it with initial speed and angle given by the baseline values. Find the 
probability of the rock landing on the target.
	
d.	 Prepare a histogram for the random variable ∆ = |R – xT| and use it to find the empirical 
probability density function ˆ ( ),
f
u
∆
∆ 
 
≥0.
	
e.	 Repeat parts (d) and (e) if W = W0 = 0.5 lb and θ(0) ~ U(40°, 50°).
	5.48	 A particle slides without friction along a path given by y = f(x) = x1/2 under the influence of 
gravity as shown in Figure E5.48:
	
The time required for the particle to slide down the curve starting from the origin to the point 
(x0, y0) is (Speckhart 1976)
	
t
g
y
x
y
x
x
0
2
0
1
2
1
=
+
∫
(d
)
/d
d
o
	
	
	
The termination value x0 is a random variable uniformly distributed between 1 and 5 along 
the curve. Implement a Monte Carlo experiment culminating in a histogram for the random 
variable t0.
	5.49	 Consider the second-order system 


y
y
y
n
n
+
+
=
2
0
2
ζω
ω
 with initial conditions y(0) = y0, 
y (0) = 0. Introduce state variables x1 = y, x2 = y. Phase plots for an underdamped (ζ = 0.25), 
critically damped (ζ = 1), and overdamped (ζ = 2) case with ωn = 1 rad/s and y0 = 1 are 
shown in Figure E5.49:
	
a.	 Plot a histogram for the distance from the initial point x1(0) = 1, x2(0) = 0 to the steady-
state equilibrium point x1(∞) = 0, x2(∞) = 0 along the trajectories in state space if the 
damping ratio is uniformly distributed between 0 and 2.
	
	   Note that the distance from the initial point (1,0) to the point [x1(t), x2(t)] along the 
­trajectory is given by
	
s t
x
y
t
t
( )
(
) /
=
+
∫


1
2
2
2 1 2
0
d
	
	
i.	 Repeat part (a) for the case where ζ = 0.25, and the natural frequency ωn is 
­uniformly distributed between 0 and 100 rad/s.
FIGURE E5.48

448
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
ii.	 Repeat part (a) for the case where ζ = 1, and the natural frequency ωn is uniformly 
distributed between 0 and 12.5 rad/s.
	
iii.	 Repeat part (a) for the case where ζ ~ U(0, 2), ωn ~ U(0, 100), and y0 ~ U(0, 1).
5.11  CASE STUDY: PILOT EJECTION
Several benchmark applications of continuous-time simulation using analog and digital computers 
have been around for decades. Simulation of a pilot and seat ejected from a fighter aircraft falls in 
this category (Korn and Wait 1978). The system is shown in Figure 5.120.
When forced to eject, the combination of pilot and seat trajectory is controlled by a set of 
guide rails until it is clear of the plane. The ejection velocity vE is constant along a direction 
θE from the y axis of the plane. Ejection occurs when the pilot and seat have traveled a vertical 
distance yi.
After ejection from the aircraft, the pilot and seat follow a ballistic trajectory subject to an 
aerodynamic drag force and its own weight. The equations of motion can be developed in the x–y 
coordinate system or n–t coordinate system, where n and t refer to directions normal and tangential 
to the flight of the pilot and seat as shown in Figure 5.121. Summing forces in the n and t directions,
FIGURE 5.120  Diagram of pilot ejection.
0.4
Phase trajectories of unforced second-order system
0.4
–0.4
–0.4
ζ = 0.25
ζ = 1
x1(0) = 1, x2(0) = 0
x1
x2
ζ = 2
ωn = 1 rad/s
–0.5
–0.6
–0.6
0.6
–0.7
–0.8
0.8
0.3
–0.3
0.2
0.2
–0.2
–0.2
0.1
0
0
–0.1
1
FIGURE E5.49

449
Simulink®
	
F
ma
t
t
=
∑
	
(5.154)
	
⇒−
−
=
F
W
mv
D
sinθ
	
(5.155)
	
F
ma
n
n
=
∑
	
(5.156)
	
⇒−
=
W
m v
R
cosθ
2
	
(5.157)
where R is the instantaneous radius of curvature of the pilot and seat trajectory. The plane is assumed 
to be traveling in a horizontal direction at constant speed vA.
The forward velocity v and angular velocity θ are related by
	
v
R
=
θ 	
(5.158)
Solving for R in Equation 5.158 and substituting the result in Equation 5.157 give
	
–W
mv
cos  θ
θ
=
	
(5.159)
With W = mg and state variables v and θ, the state derivatives are obtained from Equations 5.155 
and 5.159 as
	
v
y
y
F
m
g
y
y
D
=
≤
<
−
−
≥





0
0
1
1
,
sin ,θ
	
(5.160)
	
θ
θ
=
≤
<
−
≥





0
0
1
1
,
cos ,
y
y
g
v
y
y
	
(5.161)
The intervals 0 ≤ y < y1 and y ≥ yl correspond to before and after ejection.
Additional state variables x and y, the relative coordinates of the pilot and seat with respect to the 
moving aircraft, are needed to view its trajectory with respect to the plane in order to determine if it 
safely clears the plane’s rear vertical stabilizer. The state derivatives are expressed as (see Figure 5.121)
	
x
v
vA
= cos  θ –
	
(5.162)
FIGURE 5.121  Trajectory of pilot and seat after ejection.

450
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
y
v
= sin θ 	
(5.163)
It is convenient to start the simulation, that is, integrating the state derivatives, at the moment of 
ejection. The initial conditions are obtained with the help of Figure 5.122.
The initial states v(0) and θ(0) are computed from
	
v
v
v
x
y
( )
( )
( )
/
0
0
0
2
2
1 2
=
+


	
(5.164)
	
⇒
=
−
+
v
v
v
v
A
E
E
E
E
( )
[(
sin
)
(
cos
) ] /
0
2
2 1 2
θ
θ
	
(5.165)
	
θ( )
tan
( )
( )
0
0
0
1
=






−
v
v
y
x
	
(5.166)
	
⇒
=
−






−
θ
θ
θ
( )
tan
cos
sin
0
1
v
v
v
E
E
A
E
E 	
(5.167)
Finally, the drag force FD is obtained from
	
F
C
Av
D
D
= 1
2
2
ρ
	
(5.168)
where
CD is the drag coefficient
ρ is the density of air
A is the surface area of the pilot and seat normal to the velocity vector
A simulation study is required to investigate the combinations of aircraft speed vA and altitude 
h associated with safe ejection, that is, pilot and seat clear the rear vertical stabilizer by a prede­
termined amount. First, we shall simulate a single case where vA = 500 ft/s and h = 0 (sea level). 
A Simulink diagram is shown in Figure 5.123.
Baseline numerical values of the system parameters are θE = 15°, vE = 40 ft/s, m = 8 slugs, 
A = 10 ft2, CD = 1, and y1 = 4 ft. The “Lookup Table” contains air density ρ (slug ft2) vs. ­altitude 
h (ft) data points from sea level to 60,000 ft.
The pilot and seat trajectory relative to the aircraft is obtained by calling the Simulink model 
“ejection_seat.mdl” from the M-file “Ch5_eject.m” using the command “sim(‘ejection _
seat’).” Figure 5.124 illustrates the relative separation between the pilot and seat combination and 
FIGURE 5.122  Initial states x(0), y(0), v(0), and θ(0) at ejection (t = 0).

451
Simulink®
the plane during the time when the pilot and seat are located above the plane. The pilot and seat 
safely clear the vertical stabilizer.
At a given altitude h, the pilot and seat trajectory will safely clear the stabilizer provided the 
­aircraft cruising speed vA falls within a range of values. At slow speeds, the exit velocity is insuf­
ficient to propel the pilot and seat safely over the stabilizer, while at very high speeds, the excessive 
drag force and backward velocity (relative to the plane) produce a similar outcome.
FIGURE 5.123  Simulink diagram of pilot ejection.
20
Pilot and seat ejection trajectory relative to plane
Plane proﬁle
Starting point
Vertical stabilizer
Pilot and seat trajectory
y (ft)
18
16
14
12
10
8
6
4
2
0
–60
–50
–40
–20
–30
x (ft)
–10
0
FIGURE 5.124  Plot of pilot and seat trajectory relative to the aircraft (h = 0 ft, vA = 500 ft/s).

452
Simulation of Dynamic Systems with MATLAB® and Simulink®
A simulation study was performed to determine a region of safe ejection conditions, that is, 
altitude and speed combinations resulting in a clearance of 5 ft when the pilot and seat are directly 
over the back part of the rear stabilizer. The M-file “Ch5_safe_eject.m” calls the simulation model 
for altitudes from zero to 50,000 ft (in increments of 5,000 ft) and finds the range of aircraft speeds 
for a safe ejection. The result is shown in Figure 5.125.
Figure 5.126 shows a plot of y(t), the height of the pilot and seat combination above the plane, 
corresponding to the safe ejection trajectory shown in Figure 5.124. The lower graph shows θ(t), 
the angle between the velocity vector and the horizontal. Can you locate the point on each plot 
where the pilot and seat are located at the rear of the plane?
20
15
10
y (ft)
θ (deg)
–10
–5
0
5
5
0
Pilot and seat height above plane vs. time
Pilot and seat angle of trajectory vs. time
0
0.25
0.5
0.75
1
1.25
1.5
1.75
2
0
0.25
0.5
0.75
1
t (s)
1.25
1.5
1.75
2
FIGURE 5.126  Pilot and seat height above plane and trajectory after ejection.
Safe conditions for pilot ejection
Region of safe ejection
Aircraft speed vA (ft/s)
1800
1600
1400
1200
1000
800
600
400
200
0
0
0.5
1
1.5
2
2.5
Altitude h (ft)
×104
3
3.5
4
4.5
5
FIGURE 5.125  Lower and upper aircraft speeds at a given altitude for safe ejection.

453
Simulink®
EXERCISES
	5.50	 With respect to the ballistic trajectory of the pilot and seat,
	
a.	 Develop an alternate mathematical model using x, y coordinates. The states are x, x, y, 
and y.
	
b.	 Prepare a Simulink diagram for simulating the trajectory following ejection.
	
c.	 Run the simulation for the same conditions as in Figure 5.124 and compare results.
	
d.	 Suppose the aircraft is cruising at 30,000 ft in level flight when ejection occurs. Simulate 
pilot and seat trajectories corresponding to vA = 500, 600, …, 1200 ft/s. Plot the entire set 
of trajectories (with respect to the plane) on the same axes with the plane profile similar 
to Figure 5.124. Are the results consistent with the safe ejection conditions portrayed in 
Figure 5.125?
	5.51	 Use either n–t or x–y coordinate systems to model the pilot and seat trajectory and obtain 
plots of
	
a.	 x vs. t
	
b.	 y vs. t
	
c.	 θ vs. t
	
when ejection occurs from 50,000 ft at a speed of 900 ft/s.
	5.52	 Reexamine the limiting plane speeds for a safe ejection from 25,000 ft as the mass of the pilot 
and seat varies from 8 slugs to 12 slugs. How important is the combined mass of the pilot and 
seat with respect to the limiting plane speeds at 25,000 ft?
	5.53	 Obtain new curves for lower and upper safe ejection speeds in terms of altitude if the criterion 
for a safe ejection is that the pilot and seat simply clear the rear vertical stabilizer. Use the 
baseline value for m = 8 slugs.
	5.54	 Modify the code in M-file “Ch5_safe_eject.m” to check whether the pilot and seat have 
cleared the rear stabilizer over its entire length of 48–60 ft back from the point of ejection. 
How does this affect the curves in Figure 5.125?
5.12  CASE STUDY: KALMAN FILTERING
Estimations of the Moon and planetary orbits were performed by early pioneers such as Kepler, 
Legendre, and Gauss. More recent estimation algorithms have been developed in an effort to 
obtain the optimal estimate of a dynamic object, the Kalman filter being the most popular. In this 
case study, the continuous-time Kalman filter, the steady-state Kalman filter, and the discrete-
time Kalman filter are applied to the trajectory of an asteroid. First, the algorithms of the differ­
ent filters will be presented in summary form, and then simulations will be run in Simulink for 
comparison.
5.12.1  Continuous-Time Kalman Filter
The state equations of a continuous dynamic system are given by
	
x
Ax
Bu
w
=
+
+
	
	
y
Cx
v
 
 
=
+
	
(5.169)
where
x is the state vector
u is the input vector
y is the output vector
A is the system matrix

454
Simulation of Dynamic Systems with MATLAB® and Simulink®
B is the input matrix
C is the output matrix
In the state equations, w and v are zero-mean, uncorrelated, continuous-time, white noise 
with process covariance matrix Qc and measurement covariance matrix Rc, respectively. 
Mathematically,
	
w
Qc
~ ( ,
)
0
	
	
v
Rc
~ ( ,
)
0
	
	
E
T
c ij
ww
Q

=
δ
	
(5.170)
	
E
R
T
c ij
vv

=
δ
	
	
E
T
vw

= 0
	
The algorithm of the continuous-time Kalman filter is given by
	
K
T
c
= PC R –1
	
	
ˆ
ˆ
(
ˆ)



x
Ax
Bu
K
Cx
=
+
+
−
y
	
(5.171)
	
P
R
CP
AP
PA
Q
=
+
+
+
–
–
Pc
c
T
T
c
1
	
where the last equation in 5.171 is referred to as the Riccati equation. The algorithm is initialized 
with the expectation values of the state and state covariance
	
ˆ( )
[ ( )]
( )
[( ( )
ˆ( ))( ( )
ˆ( )) ]
x
x
P
x
x
x
x
0
0
0
0
0
0
0
=
=
−
−
E
E
T
	
(5.172)
5.12.2  Steady-State Kalman Filter
In the case of the steady-state Kalman filter, the system dynamics do not change with respect to 
time; therefore, P = 0, so that the Riccati equation of 5.171 becomes
	
0
1
 =−
+
+
+
−
PC R
CP
AP
PA
Q
T
c
T
c 	
(5.173)
5.12.3  Discrete-Time Kalman Filter
The state equations of a discrete dynamic system are given by
	
x
F
x
G
u
w
y
H
x
v
k
k
k
k
k
k
k
k
k
k
=
+
+
=
+
−
−
−
−
−
−
−
−
1
1
1
1
1
1
1
1
	
(5.174)

455
Simulink®
where
Fk–1 is the system matrix
Gk–1 is the input matrix
Hk–1 is the output matrix
In this case, wk–1 and vk–1 are zero-mean, uncorrelated, discrete-time, white noise with process 
covariance matrix Qk and measurement covariance matrix Rk, respectively. Mathematically,
	
w
Q
v
R
w w
Q
v v
R
w v
k
k
k
k
k
j
T
k k
j
k
j
T
k k
j
k
j
T
E
E
E
∼
∼
(0,
)
(0,
)
[
]
[
]
[
]
=
=
=
−
−
δ
δ
0
	
(5.175)
The algorithm of the discrete-time Kalman filter is given by
	
ˆ
ˆ
(
x
F
x
G
u
F
P
F
Q
K
P H
H
k
k
k
k
k
k
k
k
k
T
k
k
k
k
T
−
−
−
−
−
−
−
−
−
+
−
−
−
=
+
=
+
=
1
1
1
1
1
1
1
1
P
k
k
k
T
k
k
k
k
k
k
k
k
k
k
k
k
P H
R
x
x
K
y
H x
P
I
K H
P
I
K H
−
−
+
−
−
+
−
+
=
+
−
=
−
−
)
ˆ
ˆ
(
ˆ )
(
)
(
1
k
T
k
k
k
T
) + K R K 	
(5.176)
and is initialized with the expectation values of the state and state covariance
	
ˆ
[
]
(
ˆ )(
ˆ )
x
x
P
x
x
x
x
0
0
0
0
0
0
0
+
+
+
+
=
=
−
−


E
E
T
	
(5.177)
5.12.4  Simulink Simulations
The three different Kalman filters (continuous, steady-state, and discrete) are used to estimate the 
kinematics (position and velocity) of an incoming meteorite. It is assumed that the meteorite is 
tracked with a radar system that picks up the object at a range of 200,000 m with a velocity of 
5000 m/s. The measurement error R of the radar tracking station is 100 m. The process noise statis­
tics Q in range, velocity, and acceleration are 1 m, 0.1 m/s, and 0.1 m/s2, respectively. Since the ini­
tial conditions of the meteorite are unknown, the diagonal elements of the state covariance matrix 
P are large. The meteorite is tracked for 30 s at a frequency of 10 Hz.
Figure 5.127 shows a Simulink diagram for estimating the range of the meteorite with a con­
tinuous-time Kalman filter. (In most cases, element blocks retained their default names for ease 
of locating them in the Simulink library. A few subsystem names were changed to reflect their 
contents.) At the top of the continuous-time Kalman filter hierarchy, two major subsystems are 
shown: (1) the actual range of the meteorite corrupted by noise and (2) the estimated range contain­
ing the continuous-time Kalman filter elements. To run this model, execute the MATLAB M-file 
Ch5_CTKF_Model_Data.m.
By double clicking on the “Actual” subsystem, Figure 5.128 shows the elemental blocks 
that calculate the kinematics of the meteorite y = y0 + v0t + 1/2at2 and v = v0 + at where 

456
Simulation of Dynamic Systems with MATLAB® and Simulink®
the initial conditions are represented by xhat0, a vector defined in the MATLAB M-file 
“Ch5_DTKF_Model_Data.m”.
Returning to the top-level view and then double clicking on the “Estimates” subsystem, 
Figure  5.129 shows the elemental blocks of the continuous-time Kalman filter algorithm, 
Equation 5.171. The integrator block requires the initial conditions xhat0 defined in the 
MATLAB M-file. For legibility, the computation of the state covariance matrix P is placed into 
its own subsystem.
FIGURE 5.127  Top view of the continuous-time Kalman filter.
FIGURE 5.128  The “Actual” subsystem.

457
Simulink®
By double clicking on the “P” subsystem, Figure 5.130 shows the elemental blocks that update 
the state covariance matrix P, Equation 5.171. The integrator in this subsystem requires the initial 
conditions P0 defined in the M-file.
Simulating the model by executing the MATLAB M-file Ch5_CTKF_Model_Data.m created 
the following plots. Figure 5.131 shows the actual range R and the estimated range Rhat of the 
­meteorite vs. time. The meteorite is picked up at a range of 200,000 m and tracked for 30 s. Over 
this time period, the meteorite traveled approximately 150,000 m. The continuous-time Kalman 
FIGURE 5.129  The continuous-time Kalman filter algorithm.
FIGURE 5.130  Simulink diagram of the continuous-time Kalman filter.

458
Simulation of Dynamic Systems with MATLAB® and Simulink®
filter performs very well, such that it is difficult to see any differences between the actual range and 
the estimated range.
Figure 5.132 shows the actual velocity V and the estimated velocity Vhat of the meteorite vs. 
time. The continuous-time Kalman filter takes approximately 10 s for transients to settle before 
obtaining reasonable velocity estimates.
Figure 5.133 shows the actual acceleration A and the estimated acceleration Ahat of the mete­
orite vs. time. It is unnecessary to estimate the acceleration of gravity, but it is shown here for 
completeness. Again, the transients take approximately 10 s to settle before obtaining reasonable 
estimates.
Figure 5.134 shows the range error, the difference between the actual range and the estimated 
range, vs. time. In theory, the range error should be bounded by the standard deviation of the 1,1 
Range (R) and range estimate (R) (m) versus time (s)
∧
R∧
R
×105
Range (m)
2
1.8
1.6
1.4
1.2
1
0.8
0.6
0.4
0
5
10
15
20
25
30
FIGURE 5.131  Plot of range and range estimates (m) vs. time (s).
–4900
–4950
–5000
–5050
–5100
–5150
–5200
–5250
–5300
Velocity estimate (V)
∧
Velocity (V) and velocity estimate (V) (m/s) versus time (s)
∧
Velocity and velocity estimate (m/s)
Velocity (V)
Time (s)
0
5
10
15
20
25
30
FIGURE 5.132  Plot of velocity and velocity estimates (m/s) vs. time (s).

459
Simulink®
element of the state covariance matrix, which it is. It appears as if the maximum range error at any 
given time is about 50 m. Recall (Figure 5.131) that the meteorite traveled roughly 150,000 m over 
30 s. An error of 50 m, even at the end of the 30 s when the meteorite is at a range of 50,000 m, 
is 0.1%.
Figure 5.135 shows the velocity error, the difference between the actual velocity and the 
­estimated velocity, vs. time. In this case, the velocity error should be bounded by the standard 
deviation of the 2,2 element of the state covariance matrix, which it is. After the filter transients 
settle out, the maximum velocity error appears to be less than 10 m/s. Recall (Figure 5.132) 
that the meteorite obtained a speed of roughly 5300 m/s over 30 s. An error of 10 m/s is less 
than 0.2%.
This concludes the implementation and analysis of the continuous-time Kalman filter as applied 
to the range and velocity estimates of an incoming meteorite.
Time (s)
0
–5
–10
–15
–20
–25
–30
–35
0
5
10
15
20
25
30
Acceleration estimate (A)
∧
Grav. Acc. and acceleration estimate (A) (m/s2) versus time (s)
∧
Acceleration and acceleration estimate (A) (m/s2)
Gravitational acceleration
FIGURE 5.133  Plot of acceleration and acceleration estimates (m/s/s) vs. time (s).
Time (s)
0
5
10
15
20
25
30
–150
–100
Range error (m) compared with theoretical bounds
Range error
Upper bound
Lower bound
100
150
–50
50
0
Range error (m)
FIGURE 5.134  Plot of range error vs. time.

460
Simulation of Dynamic Systems with MATLAB® and Simulink®
Next, the steady-state Kalman filter is applied to the same problem for comparison with 
the continuous-time Kalman filter. The only difference between the two models is the calcula­
tion of the state covariance matrix P. In the continuous-time algorithm, the Riccati equation 
is time dependent; for the steady-state algorithm, the Riccati equation is independent of time, 
Equation 5.173. With regard to model structure, the top-level diagram and “Actual” subsys­
tem diagram are the same for the steady-state Kalman filter as they were for the continuous-
time Kalman filter. However, the “Estimates” subsystem reflects the difference with regard to 
the Riccati equation, which is represented by a constant element block called “SSP” seen in 
Figure 5.136.
Simulating the model by executing the MATLAB M-file SSCTKF_Model_Data.m created the 
following plots. Figure 5.137 shows the actual range R and the estimated range Rhat of the meteorite 
vs. time. From this plot, it appears that the steady-state Kalman filter performs just as well as the 
continuous-time Kalman filter. As before, it is difficult to see any differences between the actual 
range and the estimated range.
Figure 5.138 shows the actual velocity V and the estimated velocity Vhat of the meteorite vs. 
time. From this plot, it can be seen that the steady-state Kalman filter performs better than the con­
tinuous filter in estimating the velocity of the meteorite. Obviously missing from this plot are the 
transients associated with the time-dependent state covariance updates. The steady-state Kalman 
filter eliminates the need to perform this calculation–which may be significant for an application 
where real-time processing is limited.
Figure 5.139 shows the actual acceleration A and the estimated acceleration Ahat of the mete­
orite vs. time. As mentioned before, it is unnecessary to estimate the acceleration of gravity, but 
it is shown for completeness. Again, there are no transients with the steady-state Kalman filter.
Figure 5.140 shows the range error, the difference between the actual range and the estimated 
range, vs. time. Again, the range error is bounded by the standard deviation of the 1,1 element of the 
state covariance matrix, which is constant. The maximum range error at any given time is negligible 
for the steady-state Kalman filter.
Figure 5.141 shows the velocity error, the difference between the actual velocity and the 
­estimated velocity, vs. time. The velocity error is bounded by the standard deviation of the 2,2 ele­
ment of the state covariance matrix, which is constant. Here, too, the maximum velocity error at any 
given time is negligible for the steady-state Kalman filter.
Time (s)
0
5
10
15
20
25
30
–150
–100
–50
0
50
100
150
Upper bound
Lower bound
Velocity error
Velocity error (m/s) compared with theoretical bounds
Velocity error (m/s)
FIGURE 5.135  Plot of velocity error vs. time.

461
Simulink®
FIGURE 5.136  The steady-state Kalman filter algorithm.
Range (R) and range estimate (R) (m) versus time (s)
∧
R∧
R
×105
Range and range estimate (m)
2
1.8
1.6
1.4
1.2
1
0.8
0.6
0.4
0
5
10
15
Time (s)
20
25
30
FIGURE 5.137  Plot of range and range estimates (m) vs. time (s).

462
Simulation of Dynamic Systems with MATLAB® and Simulink®
This concludes the implementation and analysis of the steady-state Kalman filter as applied to 
the range and velocity estimates of an incoming meteorite.
Next, the discrete-time Kalman filter is applied to the same problem for comparison with the 
continuous-time Kalman filter. The dynamic system of the meteorite kinematics are discretized, 
Equation 5.174, and then simulated with the discrete-time Kalman filter algorithm, Equation 5.176. 
At this time, a few comments regarding the algorithm are in order. The first two equations of the 
algorithm ˆxk
− and Pk
− are known as the a priori state and state covariance estimates, respectively. 
They take the name “a priori” because the calculations are performed before the meteorite’s state 
is measured. The third equation of the algorithm Kk is the Kalman gain. The last two equations 
of the algorithm ˆxk
+ and Pk
+ are known as the a posteriori state and state covariance estimates, 
Velocity (V) and velocity estimate (V) (m/s) versus time (s)
V
Velocity (V) and velocity estimate (m/s)
∧
V
∧
–5000
–5050
–5100
–5150
–5200
–5250
–5300
0
5
10
15
Time (s)
20
25
30
FIGURE 5.138  Plot of velocity and velocity estimates (m/s) vs. time (s).
Time (s)
–5
–15
–13
–11
–9
–7
0
5
10
15
20
25
30
Acceleration estimate (A)
∧
Grav. Acc. and acceleration estimate (A) (m/s2) versus time (s)
∧
Acceleration and acceleration estimate (m/s2)
Gravitational acceleration
FIGURE 5.139  Plot of acceleration and acceleration estimates (m/s/s) vs. time (s).

463
Simulink®
respectively. They take the name “a posteriori” because the calculations are performed after the 
meteorite’s state is measured.
As in the previous two cases, the top-level diagram and “Actual” subsystem diagram are 
the same  for the discrete-time Kalman filter. However, the “Estimates” subsystem, shown in 
Figure 5.142, shows the Simulink diagram for the discrete-time Kalman filter algorithm. From this 
view, the a priori state and state covariance, the Kalman gain, and the a posteriori state and state 
covariance subsystems are clearly represented.
By double clicking on the “a priori state” subsystem, Figure 5.143 shows the elemental blocks 
that calculate the a priori state estimate of the algorithm. The initial conditions are represented by 
xm0, a vector defined in the corresponding MATLAB M-file.
Returning to the top-level view and then double clicking on the “a priori covariance” subsystem, 
Figure 5.144 shows the elemental blocks that calculate the a priori state covariance estimate of the 
Time (s)
0
5
10
15
20
25
30
Range error (m) compared with theoretical bounds
Range error
Upper bound
Lower bound
Range error (m)
25
20
15
10
5
0
–5
–10
–15
–20
–25
FIGURE 5.140  Plot of range error vs. time.
Time (s)
0
5
10
15
20
25
30
–1
1
0.75
0.5
0.25
–0.25
–0.75
–0.5
0
Upper bound
Lower bound
Velocity error
Velocity error (m/s) compared with theoretical bounds
Velocity error (m/s)
FIGURE 5.141  Plot of velocity error vs. time.

464
Simulation of Dynamic Systems with MATLAB® and Simulink®
algorithm. The initial conditions are represented by Pm0, a matrix defined in the corresponding 
MATLAB M-file.
Returning to the top-level view and then double clicking on the “Kalman gain” subsystem, 
Figure 5.145 shows the elemental blocks that calculate the Kalman gain of the algorithm.
By double clicking on the “a posteriori state” subsystem, Figure 5.146 shows the elemental blocks 
that calculate the a posteriori state estimate of the algorithm.
Returning to the top-level view and then double clicking on the “a posteriori covariance” sub­
system, Figure 5.147 shows the elemental blocks that calculate the a posteriori state covariance 
estimate of the algorithm.
FIGURE 5.142  The discrete-time Kalman filter algorithm.
FIGURE 5.143  The “a priori state” subsystem.

465
Simulink®
Simulating the model by executing the MATLAB M-file Ch5_DTKF_Model_Data.m created 
the following plots. Figure 5.148 shows the actual range R and the estimated range Rhat of the 
meteorite vs. time. The meteorite is picked up at a range of 200,000 m and tracked for 30 s. Over 
this time period, the meteorite traveled approximately 150,000 m. Like the previous two filters, the 
discrete-time Kalman filter performs very well. Indeed, it is difficult to see any differences between 
the actual range and the estimated range.
FIGURE 5.144  The “a priori covariance” subsystem.
FIGURE 5.145  The “Kalman gain” subsystem.

466
Simulation of Dynamic Systems with MATLAB® and Simulink®
Figure 5.149 shows the actual velocity V and the estimated velocity Vhat of the meteorite vs. 
time. The discrete-time Kalman filter takes approximately 10 s for transients to settle before obtain­
ing reasonable velocity estimates. This is similar to the behavior of the continuous-time Kalman 
filter.
Figure 5.150 shows the actual acceleration A and the estimated acceleration Ahat of the meteor­
ite vs. time. The transients take approximately 15 s to settle before obtaining reasonable estimates, 
5 s more than the continuous-time Kalman filter.
FIGURE 5.146  The “a posteriori state” subsystem.
FIGURE 5.147  The “a posteriori covariance” subsystem.

467
Simulink®
Figure 5.151 shows the range error, the difference between the actual range and the estimated 
range, vs. time. In theory, the range error should be bounded by the standard deviation of the 1,1 
element of the state covariance matrix. For the discrete-time Kalman filter, a few data points lie 
outside this theoretical limit, but only marginally. Recall (Figure 5.149) that the meteorite traveled 
roughly 150,000 m over 30 s. An error of 100 m, even at the end of the 30 s when the meteorite is 
at a range of 50,000 m, is 0.2%.
Figure 5.152 shows the velocity error, the difference between the actual velocity and the 
­estimated velocity, vs. time. Again, in theory, the velocity error should be bounded by the standard 
Range (R) and range estimate (R) (m) versus time (s)
∧
R∧
R
×105
Range and range estimate (m)
2
1.8
1.6
1.4
1.2
1
0.8
0.6
0.4
0
5
10
15
Time (s)
20
25
30
FIGURE 5.148  Plot of range and range estimates (m) vs. time (s).
–4900
–4950
–5000
–5050
–5100
–5150
–5200
–5250
–5300
V
V
∧
Velocity (V) and velocity estimate (V) (m/s) versus time (s)
∧
Velocity and velocity estimate (m/s)
Time (s)
0
5
10
15
20
25
30
FIGURE 5.149  Plot of velocity and velocity estimates (m/s) vs. time (s).

468
Simulation of Dynamic Systems with MATLAB® and Simulink®
­deviation  of  the 2,2 element of the state covariance matrix. After the discrete-time Kalman 
­filter ­transients settle out, the maximum velocity error appears to be less than 10 m/s. Recall 
(Figure 5.149) that the meteorite obtained a speed of roughly 5300 m/s over 30 s. An error of 10 m/s 
is less than 0.2%.
5.12.5  Summary
Three different Kalman filters (continuous, steady-state, and discrete) were used to estimate the 
kinematics (position and velocity) of an incoming meteorite. Once filter transients settled out, both 
the continuous-time and discrete-time Kalman filters provided acceptable results with regard to 
meteorite range and velocity estimation as evidenced by comparing the range and velocity errors 
Time (s)
25
20
15
10
5
0
–5
–10
–15
0
5
10
15
20
25
30
Acceleration estimate (A)
∧
Grav. Acc. (A) and acceleration estimate (A) (m/s2) versus time (s)
∧
Acceleration and acceleration estimate (m/s2)
Gravitational acceleration (A)
FIGURE 5.150  Plot of acceleration and acceleration estimates (m/s/s) vs. time (s).
0
–200
–150
–100
–50
0
50
100
150
200
5
10
15
20
25
30
Time (s)
Lower bound
Upper bound
Range error (m) compared with theoretical bounds
Range error
Range error (m)
FIGURE 5.151  Plot of range error vs. time.

469
Simulink®
with actual range and velocity magnitudes. If real-time processing poses limitations, it is recom­
mended to use the steady-state Kalman filter.
EXERCISES
	5.55	 Develop the steady-state Kalman filter for the discrete model.
	
Hint: Combine the a priori and the a posteriori equations into a single equation 
and note in the steady-state, ˆ
ˆ
ˆ
x
x
x
k
k
−
−
−
−
=
=
1
 P
P
P
k
k
−
−
−
−
=
=
1
 in the a priori case or 
ˆ
ˆ
ˆ
x
x
x P
P
P
k
k
k
k
+
−
+
+
+
−
+
+
=
=
=
=
1
1
 in the a posteriori case.
5.13  CASE STUDY: CASCADED TANKS WITH FLOW LOGIC CONTROL
The system shown below consists of two tanks arranged in a series configuration (Figure 5.153).
The first tank has two input flow sources.
Time (s)
–200
–150
–100
–50
0
50
100
150
200
Lower bound
Upper bound
Velocity error (m/s) compared with theoretical bounds
Velocity error
Velocity error (m/s)
0
5
10
15
20
25
30
FIGURE 5.152  Plot of velocity error vs. time.
Tank 1 height = L1
F1
K1
K2
K1 = 0
K1 = 1
K2 = 1
K2 = 0
f1,2
f0,1
A1
H1
A1
H2
f2,1
f0,2
f1,1
0
Tank 2 height = L2
FIGURE 5.153  Cascaded tanks.

470
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
1.	The external input f1,1 which is zero if the parameter K1 = 0, or a flowrate F1 when K = 1,
	
f
K
F
K
1 1
1
1
1
0
0
1
,
,
,
=
=
=



	
(5.178)
	
	
The constant flowrate F1 is regulated by a control valve which is in the wide open position 
over the time interval t0 ≤ t ≤ t1 and closed at all other times. A constant flow of magnitude 
“A” occurs when the valve is in the open position. Hence,
	
F
t
t
A
t
t
t
t
t
1
0
0
1
1
0
0
=
<
≤≤
>





,
,
,
	
(5.179)
	
2.	A second input f1,2 which depends on the value of parameter K2 according to
	
f
K
f
K
1 2
2
0 2
2
0
0
1
,
,
,
,
=
=
=




	
(5.180)
	
where f0,2 is the outflow from the bottom of the second tank.
	
	
The flowrates f0,1 and f0,2 from the bottom of Tank 1 and 2, respectively are
	
 f
c H
0 1
1
1
1 2
,
/ ,
=
	
(5.181)
	
f
c H
0 2
2
2
1 2
,
/
=
	
(5.182)
	
	
The flow into the top of the second tank is the discharge flow from the bottom of the 
first tank,
	
f
f
2 1
0 1
,
,
=
	
(5.183)
	
	
Setting f1 = f1,1 + f1,2 the overflow from each tank (not shown in figure) is
	
f1
1
1
1
0 1
1
1
0 1
1
1
1 2
0
,
,
max
,
max
/
,
(
)
,
(
s
H
L
f
f
H
L
f
c L
=
<
−
=
=



where   
)


	
(5.184)
	
f
H
L
f
f
H
L
f
c
s
2
2
2
2 1
0 2
2
2
0 2
2
0
,
,
,
max
,
max
,
(
)
,
(
=
<
−
=
= 
     where   
)
L2
1 2
/




	
(5.185)
	
	
Baseline parameter values are:
A1 = 4 ft2, A2 = 4 ft2
L1 = 20 ft, L2 = 10 ft
c1 = 2 ft3/min per ft1/2, c2= 2 ft3/min per ft1/2
H1(0) = 0 ft, H2(0) = 0 ft

471
Simulink®
t0 = 0 min, t1 = 20 min
A = 15 ft3/min
K1 = 1, K2= 0
A Simulink diagram for simulating the cascaded tank system dynamics is shown in Figure 5.154. 
Scopes for viewing the variables f1,1, f1,2, f1,f0,1, f2,1, f0,2, f1,s, f2,s, H1, H2 are included. In addition, 
blocks are present for generating
	
1.	V1,in: the cumulative flow (ft3) into Tank 1 from the external source from t = 0 to t = tfinal
	
2.	V1,spill: the cumulative overflow (ft3) from Tank 1 from t = 0 to t = tfinal
	
3.	V2,spill: the cumulative overflow (ft3) from Tank 2 from t = 0 to t = tfinal
	
4.	V2,out: the cumulative flow (ft3) out of Tank 2 not returned to Tank 1 from t = 0 to t = tfinal
The Simulink model “cascaded_tanks.mdl” is called from the MATLAB script file “Ch5_call_
cascaded_tanks.m” using the baseline values and ‘ode1 (Euler)’ integrators with a step size of 
0.005 s. Simulation results are presented in Figures 5.155–5.157.
Note how the level in the first tank increases until it reaches the tank height of L1 = 20 ft. The 
tank level H1(t) and outflow F0,1(t) begin decreasing simultaneous with the cessation of inflow f1(t) 
at t = 20 s.
Note the level H2(t) rising to the tank height of 10 ft and remaining there until the outflow f0,2(t) 
equals the inflow f0,1(t), at which time the level begins to fall.
Note the eventual emptying of both tanks as a result of the outflow from the second tank leaving 
the system as opposed to recycling back to the first tank.
Figure 5.158 depicts the tank levels H1(t) and H2(t) for the same baseline conditions with the 
exception of K2 = 1 which makes the outflow from the second tank an input to the first tank. 
The tanks are now interacting as a result of the recycled flow.
Note the steady-state levels of both tanks H1(∞) = H2(∞) = L2 = 10 ft. With 40 ft3 of fluid 
in each tank, the spillover from both tanks is the difference betwen the 300 ft3 of fluid from 
the ­external source and the 80 ft3 of fluid in the tanks at steady-state. According to the simulation, 
the spillover amounts are 159.5 ft3 and 60.5 ft3 from Tanks 1 and 2, respectively.
FIGURE 5.154  Simulink diagram for simulation of cascaded tanks.

472
Simulation of Dynamic Systems with MATLAB® and Simulink®
Additional simulations with parameter values listed in Cases I–V below were run for a period of 
30 min, less than the time required for steady-state to be achieved.
Case I:
A1 = 4 ft2, L1 = 20 ft, c1 = 2 ft3/min per ft1/2, H1(0) = 0 ft,
A2 = 4 ft2, L2 = 10 ft, c2 = 2 ft3/min per ft1/2, H2(0) = 0 ft
t0 = 0 min, t1 = 20 min, A = 8 ft3/min
K1 = 1, K2 = 0
Case II:
A1 = 4 ft2, L1 = 20 ft, c1 = 2 ft3/min per ft1/2, H1(0) = 0 ft,
A2 = 4 ft2, L2 = 10 ft, c2 = 2 ft3/min per ft1/2, H2(0) = 0 ft
Tank 1 level, ﬂow in and ﬂow out vs. time
0
2
4
6
8
10
12
14
16
18
20
H1(t), (ft) and f1(t),  f0,1(t), (ft3/min)
f0,1(t)
f1(t)
H1(t)
t (min)
0
5
10
15
20
25
50
40
45
30
35
FIGURE 5.155  H1(t), f1(t), and f0,1(t) vs. t.
Tank 2 level, Tank 1 and Tank 2  outﬂows vs. time
H2(t), (ft) and f0,1(t),  f0,2(t), (ft3/min)
0
1
2
3
8
7
6
5
4
9
10
11
f0,2(t)
f0,1(t)
H2(t)
t (min)
0
5
10
15
20
25
50
40
45
30
35
FIGURE 5.156  H2(t), f0,1(t) and f0,2(t) and vs. t.

473
Simulink®
t0 = 0 min, t1 = 20 min, A = 20 ft3/min
K1 = 1, K2 = 0
Case III:
A1 = 5 ft2, L1 = 20 ft, c1 = 2 ft3/min per ft1/2, H1(0) = 10 ft,
A2 = 3 ft2, L2 = 10 ft, c2 = 2 ft3/min per ft1/2, H2(0) = 5 ft
t0 = 0 min, t1 = 20 min, A = 20 ft3/min
K1 = 1, K2 = 0
Case IV:
A1 = 4 ft2, L1 = 20 ft, c1 = 2.25 ft3/min per ft1/2, H1(0) = 0 ft,
A2 = 4 ft2, L2 = 10 ft, c2 = 1.5 ft3/min per ft1/2, H2(0) = 0 ft
t0 = 0 min, t1 = 20 min, A = 25 ft3/min
K1 = 1, K2 = 0
Tank 1 and Tank 2 levels vs. time
0
0
2
4
6
8
10
12
14
16
18
20
5
10
H2(t)
H1(t), H2(t), (ft)
H1(t)
15
20
25
50
40
45
30
35
t (min)
FIGURE 5.157  H1(t) and H2(t) vs. t.
Tank 1 and Tank 2 levels vs. time
0
2
4
6
8
10
12
14
16
18
20
H1(t), H2(t), (ft)
H2(t)
H1(t)
0
5
10
15
20
25
70
65
60
40
55
50
45
30
35
t (min)
FIGURE 5.158  H1(t) and H2(t) vs. t with recycling of flow from Tank 2 to Tank 1.

474
Simulation of Dynamic Systems with MATLAB® and Simulink®
Case V:
A1 = 4 ft2, L1 = 20 ft, c1 = 2 ft3/min per ft1/2, H1(0) = 0 ft,
A2 = 4 ft2, L2 = 10 ft, c2 = 2 ft3/min per ft1/2, H2(0) = 0 ft
t0 = 0 min, t1 = 20 min, A = 30 ft3/min
K1 = 1, K2 = 1
The following dynamic variables are returned from the simulation for post-simulation analysis.
	
a.	V1(0), the initial volume of fluid in Tank 1 (ft3).
	
b.	V2(0), the initial volume of fluid in Tank 2 (ft3).
	
c.	V1,in, the cumulative flow (ft3) into Tank 1 from the external source from t = 0 to t = tfinal.
	
d.	V1(tfinal), the final volume of fluid in Tank 1 (ft3) at t = tfinal.
	
e.	V2(tfinal) the final volume of fluid in Tank 2 (ft3) at t = tfinal.
	
f.	V2,out, the cumulative flow (ft3) out of Tank 2 not returned to Tank 1 from t = 0 to t = tfinal.
	
g.	V1,spill, the cumulative overflow (ft3) from Tank 1 from t = 0 to t = tfinal.
	
h.	V2,spill, the cumulative overflow (ft3) from Tank 1 from t = 0 to t = tfinal.
Results are displayed in Table 5.5. All volumes are in ft3.
The significance of the columns in the table are as follows.
a+b: V1(0) + V2(0), total volume of fluid initially in both tanks.
c: V1,in, total volume of fluid introduced into the first tank from the external source.
d+e: V1(tfinal) + V2(tfinal), total volume of fluid in both tanks at the end of the simulation.
f: V2,out, total volume of fluid exiting the system from the second tank.
g+h: V1,spill + V2,spill, total volume of fluid spillover from both tanks.
Conservation of fluid volume requires
	
V
V
V in
final
final
V t
V t
V
V
V
out
spill
1
2
1
0
0
1
2
2
1
2
( )
( )
,
(
)
(
)
,
,
+
+
=
+
+
+
+
,spill 	
(5.186)
Note the agreement between the numerical values in the column labeled a+b+c and the column 
labeled d+e+f+g+h assuring the accuracy of the simulation results.
TABLE 5.5
Summary of Simulation Results for Cases I–V
Case
V1(0)
V2(0)
V1,in
a+b+c
V1(tfinal)
V2(tfinal)
V2,out
V1,spill
V2,spill
d+e+f+g+h
a
b
c
d
e
f
g
h
I
0
0
160
160
4.2
22.7
133.1
0
0
160.0
II
0
0
300
300
15.6
35.0
159.5
64.6
25.3
300.0
III
50
15
400
465
30.6
27.9
184.3
175.9
46.3
465.0
IV
0
0
500
500
11.0
39.2
128.7
232.3
88.7
499.9
V
0
0
600
600
60.2
40.0
0.0
455.1
44.7
599.9

475
Intermediate Numerical 
Integration
6.1  INTRODUCTION
We continue our exposition of numerical integration introduced in Chapter 3. Additional algorithms 
to approximate the solution of differential equation models of continuous-time systems will be 
examined. In previous chapters, there was no mention of how to quantify the degree of accuracy one 
could expect with the simple Euler and trapezoidal integrators. Truncation errors are introduced in 
this chapter as a way of remedying this omission.
This chapter introduces two broad classifications of numerical integrators known as one-step 
methods and multistep formulas and presents a case for when to use each type. Adaptive techniques 
for changing the integration step size when using one-step methods are discussed.
Later on, a property of system models referred to as “stiffness” is explored along with ways of 
dealing with it to make sure accurate and stable simulations result. Numerical stability is mentioned 
only briefly near the end of the chapter; however, more will be mentioned about this important 
property when we revisit numerical integration in Chapter 8.
This chapter concludes with a case study that relies on one of the numerical integration methods 
introduced earlier in the chapter.
6.2  RUNGE–KUTTA (RK) (ONE-STEP METHODS)
One-step methods refer to a family of numerical integration algorithms designed to update the cur­
rent state across an interval of time, called the integration step, in such a way that the state derivative 
function is evaluated at one or more points of the interval. In contrast, multistep methods incorpo­
rate computed state values from previous intervals in the process of updating the state.
Our discussion of one-step methods begins with an autonomous system involving a single state 
variable x = x(t) with state derivative function f(t, x).
	
d
d
x
t
f t x
=
( , )
	
(6.1)
The state derivative function could be written f(t, x, u) when there are external inputs present. The 
reason for choosing a first-order system is simple. Dynamic system models are typically higher than 
first order; however, the differential equations comprising an nth-order model can be recast as a set 
of coupled first-order differential equations for the state derivatives 


x t
t
x t
n
1
2
( ),
( )
( )
x
, 
, 
…
 in terms of 
the state variables x1(t), x2(t), …, xn(t) and when present, inputs u1(t), u2(t), …, ur(t). The algorithms 
derived for numerical integration of Equation 6.1 are easily extended to the case of more than one 
state variable.
Suppose x(ti), the solution to Equation 6.1 at time t = ti, were known and denoted xi for short. 
A way of approximating xi+1 = x(ti+1), the state x(t) at t = ti+1 = ti + T, is needed. The approximation 
is written as xA(i + 1) (see Figure 6.1).
We can proceed along a line whose slope is ϕi (see Figure 6.1) starting from the point (ti, xi) on 
the solution x(t) and terminating when t = ti+1. This leads to
	
x
i
x
T
A
i
i
(
)
+
=
+
1
ϕ 	
(6.2)
6

476
Simulation of Dynamic Systems with MATLAB® and Simulink®
The slope ϕi is a suitably chosen approximation to the state derivative function f (t, x) over the 
interval ti ≤ t ≤ ti+1. We shall return to this notion of a line with slope ϕi from (ti, xi) to [ti+1, xA(i + 1)] 
momentarily.
6.2.1  Taylor Series Method
Consider the Taylor Series expansion of the function x(t) shown in Figure 6.1.
Expanding the function x(t) in a Taylor Series about the point ti,
	
x
x
t x t T
t x t T
t x t T
i
i
i
i
i
+ =
+
+
+
+
1
2
2
2
3
3
1
2
1
3
d
d
d
d
d
d
( )
!
( )
!
( )
3

	
(6.3)
Equation 6.3 can be expressed in terms of the state derivative function,
	
f t x
t x t
( , )
( )
= d
d
	
(6.4)
	
⇒
=
+
+
+
+
+
x
x
f t x T
t f t x T
t
f t x T
i
i
i
i
i
i
i
i
1
2
2
2
3
1
2
1
3
( ,
)
!
( ,
)
!
( ,
)
d
d
d
d

	
(6.5)
The derivatives (d/dt)f (ti, xi), (d2/dt2) f(ti, xi), and so forth can be obtained from the chain rule. For 
example, the first derivative is
	
d
d
d
d
t f t x
t f t x
x f t x
t x t
i
i
i
i
i
i
i
( ,
)
( ,
)
( ,
)
( )
= ∂
∂
+ ∂
∂
	
(6.6)
	
=
+
f t x
f t x f t x
t
i
i
x
i
i
i
i
(
)
(
) (
)
,
,
,
	
(6.7)
where
	
f t x
t f t x
f t x
x f t x
t
i
i
i
i
x
i
i
i
i
( ,
)
( ,
),
( ,
)
( ,
)
= ∂
∂
= ∂
∂
	
(6.8)
Substituting Equation 6.7 into Equation 6.5 yields
	
x
x
Tf t x
T
f t x
f t x f t x
i
i
i
i
t
i
i
x
i
i
i
i
+ =
+
+
+
+⋅⋅⋅
1
2
2
( ,
)
[ ( ,
)
( ,
) ( ,
)]
	
(6.9)
FIGURE 6.1  Graphical representation of calculation for new state xA(i + 1).

477
Intermediate Numerical Integration
Truncating Equation 6.9 after the second term produces the explicit Euler integrator
	
x
i
x
Tf t x
A
i
i
i
(
)
( ,
)
+
=
+
1
	
(6.10)
which would normally be written as
	
x
i
x
i
Tf t x
i
A
A
i
A
(
)
( )
[
( )]
,
+
=
+
1
	
(6.11)
since xi is known only at the initial point (0, x0).
Truncating Equation 6.9 after the third term results in a more accurate approximation of the true 
value xi+1, namely,
	
x
i
x
i
Tf t x
i
T
f t x
i
f t x
i
f
A
A
i
A
t
i
A
x
i
A
(
)
( )
[ ,
( )]
{ [ ,
( )]
[ ,
( )] [
+
=
+
+
+
1
2
2
t x
i
i
A
,
( )]}
	
(6.12)
The Taylor Series method can be used to obtain difference equations such as Equations 6.11 and 
6.12 for updating the discrete-time state xA(i). However, it is rarely attempted because expressions 
for the higher-order derivatives of f(t, x) are often complex functions involving higher-order partial 
derivatives of f(t, x). What is needed is an algorithm for computing xA(i + 1) with comparable accu­
racy to the truncated Taylor Series without requiring partial derivatives of f(t, x).
6.2.2  Second-Order Runge–Kutta Method
Recalling our previous discussion of ϕi, the slope of the line from the point (ti, xi) to [ti+1, xA(i + 1)] 
in Figure 6.1, suppose we choose it to be a weighted sum of the state derivative f(t, x) evaluated at 
several points on the interval. In particular, if ϕi is a weighted average of f(t, x) at two points on the 
interval ti ≤ t ≤ ti+1, the result is
	
ϕi
a k
a k
a
a
a
a
=
+
≤
≤
≤
≤
+
=
1 1
2 2
1
2
1
2
0
1 0
1
1
(
,
,
) 	
(6.13)
where k1 is the state derivative function f(t, x) at (ti, xi), that is,
	
k
f t x
i
i
1 =
(
)
,
	
(6.14)
and k2 is the state derivative function f(t, x) at [ti + pT, xi + qTf(ti, xi)], that is,
	
k
f t
pT x
qTf t
x
p
q
i
i
i
i
2
0
1 0
1
=
+
+
≤
≤
≤
≤
[
(
)]
(
)
,
,
,
,
 
 
 
 
	
(6.15)
Lines with slopes k1 and k2 are shown in Figure 6.2.
From Equations 6.14 and 6.15,
	
k
f t
pT x
qTk
i
i
2
1
=
+
+
[
]
,
	
(6.16)
indicating that k2 can be determined once k1 is known. The weights a1 and a2 as well as the constants 
p and q are to be determined.
Substituting Equation 6.13 into Equation 6.2 gives
	
x
i
x
T a k
a k
A
i
(
)
(
)
+
=
+
+
1
1 1
2 2 	
(6.17)

478
Simulation of Dynamic Systems with MATLAB® and Simulink®
The derivative function f(t, x) can be expanded in a two-dimensional Taylor Series about the point 
(ti, xi) as follows:
	
f t
t x
x
f t x
f t x
t
f t x
x
f
t x
i
i
i
i
t
i
i
x
i
i
tt
i
(
,
)
( ,
)
( ,
)
( ,
)
( ,
+
+
=
+
+
+
∆
∆
∆
∆
1
2
i
tx
i
i
xx
i
i
t
f
t x
t
x
f
t x
x
)
( ,
)
( ,
)
∆
∆∆
∆
2
2
2
+
+

+
	
(6.18)
Letting Δt = αpT, Δx = qTf(ti, xi) in Equation 6.18 makes k2 in Equation 6.16 equal to
	
k
f t x
f t x pT
f t x qTf t x
f
t x
p
i
i
t
i
i
x
i
i
i
i
tt
i
i
2
1
2
=
+
+
+
( ,
)
( ,
)
( ,
)
( ,
)
( ,
)( T
f
t x
pT
qTf t x
f
t x
qTf t x
tx
i
i
i
i
xx
i
i
i
i
)
( ,
)(
)[
( ,
)]
( ,
)[
( ,
)]
2
2
2
+
+
{
}+
	
(6.19)
Substituting Equation 6.14 for k1 and Equation 6.19 for k2 into Equation 6.17 results in
	
x
i
x
i
Ta f t x
Ta
f t x
f t x pT
f t
A
A
i
i
i
i
t
i
i
x
i
(
)
( )
(
)
[ (
)
(
)
(
,
,
,
,
+
=
+
+
+
+
1
1
2
 
x qTf t x
Ta
f
t x
pT
f
t x
pT
qTf t
i
i
i
tt
i
i
tx
i
i
i
)
(
)]
{
(
)(
)
(
)(
)[
(
,
,
,
+
+
2
2
2
,
,
,
)]
(
)[
(
)] }
x
f
t x
qTf t x
i
xx
i
i
i
i
+
+
 
2
	
(6.20)
Simplifying Equation 6.20 by collecting terms involving powers of T leads to
	
x
i
x
a
a Tf t x
a T
pf t x
q f t x f t
A
i
l
i
i
t
i
i
x
i
i
i
(
(
)
(
)
[
(
)
(
) (
)
,
,
,
+
=
+
+
+
+
1
2
2
2
,
)]
xi
+	
(6.21)
Equating the right-hand sides of Equations 6.9 and 6.21 gives
	
a
a
a p
a q
1
2
2
2
1
1
2
1
2
+
=
=
=
,
,
	
(6.22)
The first three terms in Equation 6.3 comprise the second-order truncated Taylor Series expan­
sion of x(t) about the point ti, that is,
	
x t
T
x t
t x t T
t x t T
i
i
i
i
2
2
2
2
1
2
(
)
( )
( )
!
( )
+
=
+
+
d
d
d
d
	
(6.23)
FIGURE 6.2  Representation of ϕi = a1ki + a2k2 as weighted sum of f(t, x) at two points.

479
Intermediate Numerical Integration
where the subscript “2” indicates that the Taylor Series is truncated after the term containing T2. 
Hence, by choosing the constants a1, a2, p, and q according to Equation 6.22, we can be certain that 
the computed state xA(i + 1) in Equation 6.21 achieves comparable accuracy as the second-order 
truncated Taylor Series.
There are, however, an infinite number of solutions to the three equations in four unknowns 
in Equation 6.22. Numerical integrators based on the use of Equation 6.17 with a1, a2, p, and 
q  ­satisfying the constraints in Equation 6.22 are referred to as second-order RK or RK-2 
integrators.
6.2.3  Truncation Errors
The local truncation error εT is the difference between the exact solution x(ti + T) and the approxi­
mate solution xA(i + 1) obtained by the Taylor Series method or some other numerical approxima­
tion technique such as the RK-2 integrators. Hence,
	
εT
i
A
x t
T
x
i
=
+
−
+
(
(
)
)1 	
(6.24)
For the approximation based on the second-order truncated Taylor Series method, Equation 6.24 
becomes
	
εT
i
i
i
i
i
i
x t
T
x
f t x T
t f t x T
=
+
−
+
+






(
)
( ,
)
!
( ,
)
1
2
2
d
d
	
(6.25)
Thus, the local truncation error reduces to the sum of all the terms in the Taylor Series expansion 
for x(ti + T) beginning with the term containing T3. That is,
	
εT
i
i
t x t T
t x t T
=
+
+
1
3
1
4
3
3
3
4
4
4
!
( )
!
( )
d
d
d
d

	
(6.26)
Since the first term on the right-hand side of Equation 6.26 is generally the dominant term (mag­
nitude-wise), the local truncation error is proportional to T3 and is said to be of order T3, denoted εT 
~ O(T3). The global truncation error ET is the accumulation of individual truncation errors incurred 
in the process of numerically integrating over several intervals. It turns out that ET is proportional 
to T2 or equivalently ET ~ O(T2).
It is important to distinguish between the order of the local truncation error and its actual value 
for a particular numerical integrator. We should not expect to find the numerical value of εT in the 
process of computing xA(i), i = 0, 1, 2, …. Were that possible, the exact solution x(ti), i = 0, 1, 2, …  
could be computed from Equation 6.24.
We have seen that RK-2 integrators achieve comparable accuracy to the second-order truncated 
Taylor Series method and, as a result, are referred to as second-order accurate. The local truncation 
error εT ~ O(T3) regardless of how we solve for a1, a2, p, and q in Equation 6.22. The numerical value 
of εT will, however, be sensitive to the particular RK-2 integrator.
Knowing εT ~ O(T3) and ET ~ O(T2) for RK-2 integrators makes the consequence of adjusting 
the integration step size predictable. For example, halving the step size reduces the local and global 
truncation errors by a factor of 1/8 and 1/4 respectively. For the explicit Euler integrator (RK-1), 
εT ~ O(T2) and ET ~ O(T) implying the local truncation error are reduced by 1/4 while the global 
truncation is approximately 1/2 as large when the step size is halved.

480
Simulation of Dynamic Systems with MATLAB® and Simulink®
We now investigate two possible choices for the set of constants a1, a2, p, and q.
Solution I: al = a2 = 1/2 and p = q = 1
From Equations 6.2 and 6.13, the RK-2 integrator becomes
	
x
i
x
T k
k
A
i
(
)
(
)
+
=
+
+
1
2
1
2
	
(6.27)
Since xi is unknown after the initial step, it must be replaced by xA(i) in Equation 6.27 to yield the 
difference equation for a numerical integrator. Using the definitions for k1 and k2 in Equations 6.14 
and 6.15 and remembering that p = q = 1 give
	
x
i
x
i
T
f t x
i
f t
T x
i
Tf t x
i
A
A
i
A
i
A
i
A
(
)
( )
{ [ ,
( )]
[
,
( )
[ ,
( )]]}
+
=
+
+
+
+
1
2
	
(6.28)
Denoting xA(i) + Tf [ti, xA(i)] by ˆ (
)
x
i
A
+1  in Equation 6.28 gives
	
x
i
x
i
T
f t x
i
f t
T
i
A
A
i
A
i
A
(
)
( )
{ [ ,
( )]
[
,
(
)]}
+
=
+
+
+
+
1
2
1
x
	
(6.29)
You should recognize ˆ (
)
x
i
A
+1  as the explicit Euler estimate of xi+1 in Equation 6.11 (see Figure 
6.2). Hence, the explicit Euler (an RK-1 integrator) establishes the second point [
(
,
)]
t
T
i
x
i
A
+
+1

 
for evaluating the derivative function, and the average derivative function or slope is then used to 
update the state according to Equation 6.29.
The RK-2 integrator of Equation 6.29 is the improved Euler or Heun’s method introduced in 
Section 3.6. At that time, it was developed using a geometrical argument instead of the formal 
approach presented here.
The second solution for the constants a1, a2, p, and q will also look familiar.
Solution II: a1 = 0, a2 = 1 and p = q = 1/2.
From Equations 6.2 and 6.13, the RK-2 integrator is
	
x
i
x
Tk
A
i
(
)
+
=
+
1
2 	
(6.30)
As in the case of the improved Euler integrator, the difference equation for xA(i) results from 
replacing xi by xA(i) in Equation 6.30 giving
	
x
i
x
i
Tf t
T x
i
T f t x
i
A
A
i
A
i
A
(
)
( )
,
( )
[ ,
( )]
+
=
+
+
+






1
2
2
	
(6.31)
Introducing the notation
	
x
i
x
i
T f t x
i
A
A
i
A
+





=
+
1
2
2
( )
[ ,
( )]
	
(6.32)
implies the new state xA(i + 1) is calculated according to
	
x
i
x
i
Tf t
T x
i
A
A
i
A
(
)
( )
,
+
=
+
+
+












1
2
1
2
	
(6.33)
Equation 6.33 is identical to the modified Euler integrator in Section 3.6.

481
Intermediate Numerical Integration
In summary, the Taylor Series method (second order and higher) for approximating x(ti + T) 
requires the derivative function f(ti, xi) as well as its derivatives (see Equation 6.5). RK-2 integra­
tors produce estimates of xi+1 to the same accuracy as the first three terms in Equation 6.5 without 
requiring the total derivative (d/dt) f(t, x). The price is an extra derivative function evaluation 
f(t, x).
The following example illustrates use of the Taylor Series method and the RK-2 integrators.
Results are compared with the first-order explicit Euler (RK-1) integrator and the exact solution.
EXAMPLE 6.1
The object shown in Figure 6.3 is initially at rest and then subjected to a constant force f t
F
( ) =
, 
t ≥ 0. The motion of the object is opposed by the damper force fD(t) = αv(t). The contents of the 
object are leaking so that the object’s mass diminishes from its initial value m0 to a final mass mf.
At a given time t, the mass of the object is given by
	
m t
m
ct
t
m
m
c
m
t
m
m
c
f
f
f
( )
,
(
)
,
(
)
=
−
≤≤
−
>
−





0
0
0
0
	
(6.34)
	
a.	Find an expression for the state derivative function f(t, v) while the mass of the object is 
still decreasing.
	
b.	Find the difference equation for updating the state vA(i) using the second-order Taylor 
Series method.
	
c.	Find the difference equation for updating the state vA(i) using the RK-1 explicit Euler 
integrator.
	
d.	Find the difference equation for updating the state vA(i) using the RK-2 improved Euler 
integrator.
	
e.	Find the difference equation for updating the state vA(i) using the RK-2 modified Euler 
integrator.
	
f.	Find the exact solution for the state v(t).
	
g.	Numerical values of the system parameters are m0 = 1 slug, mf = 0.2 slugs, c = 0.05 slugs/
min, and α = 0.25 lb/ft/min and the external force is F =10 lb. Tabulate and graph the 
results when T = 0.5 min.
	
a.	The differential equation model for the system is
	
m t
v
t
F
v
( ) d
d
=
−α
	
(6.35)
	 	
Solving for the derivative function,
	
d
d
v
t
f t v
F
v
m
ct
t
m
m
c
f
=
=
−
−
≤≤
−
( , )
,
(
)
α
0
0
0
	
(6.36)
FIGURE 6.3  Moving object with decreasing mass.

482
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	From Equation 6.9,
	
v
v
Tf t v
T
f t v
fv t v f t v
i
i
i
i
t
i
i
i
i
i
i
+ =
+
+
+
+
1
2
2
( ,
)
[ ( ,
)
( ,
) ( ,
)]

	
(6.37)
	
Partial differentiation of Equation 6.36 gives
	
f t v
F
v
c
m
ct
t
i
i
i
i
( ,
)
(
) (
)
=
−
−
α
0
2
	
(6.38)
	
f t v
m
ct
v
i
i
i
( ,
) =
−
−
α
0
	
(6.39)
	
	 Substituting Equations 6.36, 6.38, and 6.39 into Equation 6.37 yields
	
v
v
T F
v
m
ct
T
c F
v
m
ct
m
ct
i
i
i
i
i
i
i
+ =
+
−
−





+
−
−
−
−
1
0
2
0
2
0
2
α
α
α
(
)
(
)
(
)
F
v
m
ct
i
i
−
−





+
α
0

	
(6.40)
	
Truncating Equation 6.40 after the T2 term, replacing vi by vA(i), vi + 1 by vA(i+1), and set­
ting t = iT lead to the difference equation
	
v
i
v
i
F
v
i
m
ciT T
c
F
v
i
m
ci
A
A
A
A
(
)
( )
( )
(
)
( )
(
+
=
+
−
−






+
−
−
−
1
2
0
0
α
α
α
T
T
2
2
)






	
(6.41)
	
c.	The RK-1 explicit Euler integrator is
	
ˆ (
)
ˆ ( )
ˆ
v
i
v
i
A
A
+
=
+
1
Tf t v
i
i
A
[
( )]
,
	
(6.42)
	
=
+
−
−






ˆ ( )
ˆ ( )
v
i
T F
v
i
m
ciT
A
A
α
0
	
(6.43)
	
d.	The RK-2 improved Euler integrator, Equation 6.29, is
	
v
i
v
i
T f t v
i
f t
T v
i
A
A
i
A
i
A
(
)
( )
{ [ ,
( )]
[
,
(
)]}
+
=
+
+
+
+
1
2
1
ˆ
	
(6.44)
	
=
+
−
−
+
−
+
−
+






v
i
T F
v
i
m
ciT
F
v
i
m
c i
T
A
A
A
( )
( )
(
)
(
)
2
1
1
0
0
α
α ˆ
	
(6.45)
	
e.	The RK-2 modified Euler integrator, Equations 6.32 and 6.33, is
	
v
i
v
i
T f t v
i
A
A
i
A
+





=
+
1
2
2
( )
[ ,
( )]
	
(6.46)
	
=
+
−
−






v
i
T F
v
i
m
ciT
A
A
( )
( )
2
0
α
	
(6.47)

483
Intermediate Numerical Integration
	
v
i
v
i
Tf t
v
i
A
A
i
A
(
)
( )
’
+
=
+
+












+
1
1
2
1 2
	
(6.48)
	
=
+
−
+






−
+











v
i
T
F
v
i
m
c i
T
A
A
( )
α
1
2
1
2
0
	
(6.49)
	
f.	The exact solution for v(t) is obtained from Equation 6.36 by integration.
	
d
d
′
−
′ =
′
−
′
∫
∫
v
F
v
t
m
ct
v
v
t
α
( )
0
0
0
	
(6.50)
	
⇒
=
−
−






−






≤≤
−
v t
F
F
v
ct
m
t
m
m
c
c
f
( )
( )
,
(
)
/
α
α
α
0 1
0
0
0
	
(6.51)
	
g.	For the numerical values given, results from the Taylor Series method, the three numeri­
cal integrators, and the exact solution are tabulated in Table 6.1 at 1 min intervals after 
the first two steps.
Figure 6.4 contains a graph of the four numerical integrators and the exact solution. Both the 
table and figure confirm the improved accuracy possible with the use of the Taylor Series method 
and RK-2 integration compared to the explicit Euler (RK-1) integrator.
TABLE 6.1
Taylor Series Method, RK-1 (Explicit Euler), RK-2 (Improved Euler), RK-2 (Modified Euler) 
with T = 0.5 min, and Exact Solution
i
ti = iT
Taylor Series
Method vA(i)
RK-1 Explicit
Euler ˆv
i
A( )
RK-2 Improved
Euler vA(i)
RK-2 Modified
Euler vA(i)
Exact
Solution
0
0
0
0
0
0
0
1
0.5
4.75
5.0
4.7436
4.7468
4.7562
2
1
9.0375
9.4872
9.0257
9.0317
9.0488
4
2
16.3617
17.0828
16.3421
16.3520
16.3804
6
3
22.2287
23.0849
22.2045
22.2168
22.2518
8
4
26.8677
27.7584
26.8415
26.8548
26.8928
10
5
30.4826
31.3371
30.4562
30.4696
30.5078
12
6
33.2532
34.0256
33.2280
33.2408
33.2772
14
7
35.3370
36.0013
35.3139
35.3256
35.3588
16
8
36.8704
37.4162
36.8501
36.8604
36.8896
18
9
37.9706
38.3992
37.9534
37.9622
37.9869
20
10
38.7368
39.0575
38.7226
38.7298
38.7500
22
11
39.2515
39.4792
39.2403
39.2460
39.2619
24
12
39.5826
39.7345
39.5741
39.5785
39.5904
26
13
39.7843
39.8783
39.7782
39.7814
39.7899
28
14
39.8991
39.9519
39.8948
39.8970
39.9028
30
15
39.9586
39.9847
39.9559
39.9573
39.9609

484
Simulation of Dynamic Systems with MATLAB® and Simulink®
Knowing the exact solution, we can check the results obtained from the Taylor Series method. 
For the numerical values given, the exact solution in Equation 6.51 becomes
	
v t
t
t
(
(
)
)
.
,
=
−
−
≤≤
40
40 1
0 05
0
16
5
	
(6.52)
The second-order truncated Taylor Series v2(t) about the point t = 0 is
	
v T
v
t v
T
t v
T
2
2
2
2
0
0
1
2
0
( )
( )
( )
( )
=
+
+
d
d
d
d
	
(6.53)
Setting v(0) to zero, differentiating Equation 6.52 to find the first two derivatives and substitut­
ing the results into Equation 6.53 give
	
v T
T
T
v
2
2
2
2
10
1
2
2
0 5
10 0 5
0 5
4 75
( )
(
)
.
.
.
.
=
+
−
(
)
(
)
(
)
⇒
=
−
=
	
(6.54)
which agrees with the value in Table 6.1.
6.2.4  High-Order Runge–Kutta Methods
Higher-order RK formulas are derived in the same manner as the RK-2 integrators. For RK-3 inte­
gration, the formula for updating the state xA(i), is
	
x
i
x
i
T a k
a k
a k
A
A
(
)
( )
(
)
+
=
+
+
+
1
1 1
2 2
3 3 	
(6.55)
where k1, k2, and k3 are derivative function evaluations at specific points. There are now three con­
stants p, q, and r, which determine the points at which the derivatives are to be evaluated. Matching 
coefficients of powers of T in the expression for xA(i + 1) using Equation 6.55 with the truncated 
0
0
5
10
15
v(t), vA(i)
20
25
30
35
Comparison of numerical integrators and exact solution
Taylor series method
Euler (RK-1), T = 0.5 min
Improved Euler (RK-2), T = 0.5 min
Modified Euler (RK-2), T = 0.5 min
Exact
40
1
2
3
4
5
6
7
8
t
9
10
11
12
13
14
15
FIGURE 6.4  Comparison of numerical integrators and exact solution for Example 6.1.

485
Intermediate Numerical Integration
Taylor Series for x(t) through the T3 term generates four equations in the six unknowns a1, a2, and 
a3 and p, q, and r.
One particular solution leads to the frequently used RK-3 integration formula
	
x
i
x
i
T k
k
k
A
A
(
)
( )
(
)
+
=
+
+
+
1
6
4
1
2
3
	
(6.56)
where
	
k
f
1 = [ ,
( )]
t x
i
i
A
	
(6.57)
	
k
f t
T x
i
k T
i
A
2
1
1
2
1
2
=
+
+






,
( )
	
(6.58)
	
k
f t
T x
i
k T
k T
i
A
3
1
2
2
=
+
−
+
[
,
( )
] 	
(6.59)
The local truncation error of an RK-3 integrator εT ~ O(T 4) and the global truncation error 
ET ~ O(T3).
Fourth-order RK formulas are the most common of all the RK numerical integrators for reasons 
we shall discuss shortly. The derivation is patterned after the approach used for the lower-order RK 
methods. Flexibility in the choice of several parameters results in a family of RK-4 integrators. A 
popular RK-4 integrator is illustrated in Figure 6.5.
The derivative function evaluations are computed according to
	
k
f t x
i
x
i
x
i
T k
i
A
A
A
1
1
1
2
2
=
+





=
+
[ ,
( )],
( )
	
(6.60)
	
k
f t
x
i
x
i
x
i
A
A
A
2
1 2
1
2
1
2
=
+












+





=
+ / ,
,
(i
T k
)+ 2
2

	
(6.61)
	


k
f t
x
i
x
i
x
i
Tk
i
A
A
A
3
1 2
3
1
2
1
=
+












+
=
+
+ / ,
,
(
)
( )
	
(6.62)
	
k
f
x
4
1
=
+
+
[
,
(
)]
t
i
i
A
1

	
(6.63)
FIGURE 6.5  Illustration of an RK-4 integrator.

486
Simulation of Dynamic Systems with MATLAB® and Simulink®
and the updated state xA(i + 1) is obtained from
	
x
i
x
i
T k
k
k
k
A
A
(
)
( )
(
)
+
=
+
+
+
+
1
6
2
2
1
2
3
4
	
(6.64)
Note that of the four required derivative evaluations, one is at the beginning of the interval, 
two occur at the midpoint, and the last one takes place at the end of the interval. The algorithm is 
straightforward to program because of the sequential nature in the calculations of k1, k2, k3, and k4.
RK-1 through RK-4 (and higher) integrators are incorporated in simulation and numerical analy­
sis software packages. MATLAB® and Simulink® offer a choice of RK-1 through RK-5 integrators.
6.2.5  Linear Systems: Approximate Solutions Using RK Integration
The special case of linear system models is worth looking at in some detail. Suppose the derivative 
function in Equation 6.1 is linear in x, that is,
	
d
d
x
t
f t x
ax
=
=
( , )
	
(6.65)
Applying RK-1, RK-2, RK-3, and RK-4 integrators to the linear system in Equation 6.65 
­produces the following difference equations for updating the state xA(i):
	
RK-1
1
1
:
)
(
)
(
( )
x
i
aT x
i
A
A
+
=
+
	
(6.66)
	
RK-2: x
i
aT
aT
x
i
A
A
(
)
!(
)
( )
+
=
+
+






1
1
1
2
2
	
(6.67)
	
RK-3: x
i
aT
aT
aT
x
i
A
A
(
)
!(
)
!(
)
( )
+
=
+
+
+






1
1
1
2
1
3
2
3
	
(6.68)
	
RK-4: x
i
aT
aT
aT
aT
x
i
A
A
(
)
!(
)
!(
)
!(
)
( )
+
=
+
+
+






1
1
1
2
1
3
1
4
2
3
4
	
(6.69)
The general solutions to Equations 6.66 through 6.69 are easily obtained by recursion. 
The results are
	
RK-1
1
0
:
)
( )
(
)
(
x
i
aT
x
A
i
=
+
	
(6.70)
	
RK-2: x
i
aT
aT
x
A
i
( )
!(
)
( )
=
+
+






1
1
2
0
2
	
(6.71)
	
RK-3: x
i
aT
aT
aT
x
A
i
( )
!(
)
!(
)
( )
=
+
+
+






1
1
2
1
2
0
2
3
	
(6.72)
	
RK-4: x
i
aT
aT
aT
aT
x
A
i
( )
(
)
!(
)
!(
)
( )
=
+
+
+
+






1
1
2
1
3
1
4
0
2
3
4
	
(6.73)

487
Intermediate Numerical Integration
where x(0) is the initial condition. In general, an RK-m integrator applied to the linear system 
model, Equation 6.65, results in
	
x
i
aT
k
x
A
k
k
m
i
( )
(
)
!
( )
=






=∑
0
0
	
(6.74)
	
=
+
+
+
+ ⋅⋅⋅+






1
1
2
1
3
1
0
2
3
aT
aT
aT
m
aT
x
m
i
!(
)
!(
)
!(
)
( )
	
(6.75)
In the case of more than a single state variable, that is, x
Ax
=
 a similar result applies for RK-m 
integrators.
	
x
i
TA
k
x
A
k
k
m
i
( )
(
)
!
( )
=






=∑
o
0
	
(6.76)
	
=
+
+
+
+ ⋅⋅⋅+






I
TA
TA
TA
m
TA
x
m
i
1
2
1
3
1
0
2
3
!(
)
!(
)
!(
)
( )
	
(6.77)
Equation 6.76 for the explicit Euler integrator (m = 1) as well as the improved and modified Euler 
integrators (m = 2) was first introduced in Section 3.6.
The discrete-time signal xA(i), i = 0, 1, 2, 3, …  is intended to approximate the continuous-time 
state x(t),|t = iT, i = 0, 1, 2, 3, …. The solution x(t) to Equation 6.65 is
	
x t
x
e
t
at
( )
( )
,
=
≥
0
0 	
(6.78)
	
⇒
=
=
x iT
x
x
aiT
aT
i
(
(
(
)
)
)(
)
0
0
e
e
	
(6.79)
Expanding eaT in a Taylor Series about zero, Equation 6.79 becomes
	
x iT
aT
aT
aT
m
aT
x
m
i
(
)
!(
)
!(
)
!(
)
( )
=
+
+
+
+ ⋅⋅⋅+
+






1
1
2
1
3
1
0
2
3

	
(6.80)
From Equations 6.74 and 6.80 with i = 1, the m + 1 terms in the approximate value xA(1) are 
identical to the first m + 1 terms of the infinite series expression for x(T).
After one step, the local truncation error of an RK integrator is
	
εT
A
x T
x
=
−
( )
)
(1 	
(6.81)
For an RK-m integrator,
	
εT
aT
m
x
aT
aT
aT
m
aT
x
=
−
+
+
+
+ ⋅⋅⋅+






e
( )
!(
)
!(
)
!(
)
( )
0
1
1
2
1
3
1
0
2
3
	
(6.82)

488
Simulation of Dynamic Systems with MATLAB® and Simulink®
Replacing eaT in Equation 6.82 by its Taylor Series expansion leads to
	
εT
m
m
m
aT
m
aT
x
=
+
+
+
⋅⋅⋅






+
+
1
1
1
2
0
1
2
(
)!(
)
(
)!(
)
( )
	
(6.83)
and, therefore, εT ~ O(Tm+1) as expected. All RK-m integrators are said to be of mth order, not to be 
confused with their local truncation error, which is of order m + 1, that is, εT ∼ O(Tm+1). The mth 
order reference stems from the high-order term in the truncated Taylor Series. For an RK-m integra­
tor, the global truncation error ET ~ O(Tm).
RK-1 through RK-4 integrators require one to four derivative function evaluations per step. RK 
integrators of order higher than four are not as efficient. For example, an RK-5 integrator requires 
six derivative function evaluations per step for comparable agreement with the fifth-order Taylor 
Series expansion of the solution. A penalty of one additional derivative function evaluation per step 
is the price incurred in moving from an RK-4 integrator with εT ~ O(T5) to an RK-5 integrator with 
εT ~ O(T6). The computational effort during each integration step results primarily from evaluating 
the derivative function. Hence, the penalty is nontrivial.
Worse yet, RK-6 integrators require eight derivative function evaluations to achieve a local trun­
cation error εT ~ O(T 7). RK-4 methods are popular because they are the highest order one-step 
integrators that do not require more derivative function evaluations than their order.
6.2.6  Continuous-Time Models with Polynomial Solutions
The Taylor Series method for finding xA(i + 1) starting from the point (ti, xi) on the solution x(t) is
	
x
i
x
t x t T
t x t T
m
t
x t T
A
i
i
i
m
m
i
m
(
)
( )
!
( )
!
( )
+
=
+
+
+
+
1
1
2
1
2
2
2
d
d
d
d
d
d

	
(6.84)
where the total derivatives (d2/dt2)x(ti), (d3/dt3)x(ti), …, (dm/dtm)x(ti) are computed from partial deriv­
atives of the derivative function f (ti, xi).
Suppose the exact solution is the mth-order polynomial
	
x t
a
a t
a t
a t
m
m
( ) =
+
+
+
+
0
1
2
2

	
(6.85)
The exact solution at t = ti+1 is
	
x t
a
a t
a t
a t
i
i
i
m
m
(
)
+
+
+
+
=
+
+
+
+
1
0
1
1
2
1
2
1

i
	
(6.86)
With xA(0) set equal to x(0), Equations 6.84 and 6.86 produce identical results at the discrete 
points 0, T, 2T, …. In other words,
	
xA(
)
i
x t
i
i
+
=
=
+
1
(
1),
0, 1, 2, … 	
(6.87)
Proof for the case when m = 2 follows. Starting with
	
x
i
x
t x t T
t x t T
A
i
i
i
(
)
( )
!
( )
+
=
+
+
1
1
2
2
2
2
d
d
d
d
	
(6.88)
The two derivatives in Equation 6.88 are obtained from the exact solution for x(t) in Equation 
6.85 with m = 2. Substituting them into Equation 6.88 and simplifying give

489
Intermediate Numerical Integration
	
x
i
x
a
a t T
a T
A
i
i
(
)
(
)
(
)
+
=
+
+
+
1
2
1
2 2
1
2
2
2
	
(6.89)
	
=
+
+
+
+
+
(
)
a
a t
a t
a T
a t T
a T
i
i
i
0
1
2
2
1
2
2
2
2
	
(6.90)
	
=
+
+
+
+
a
a t
T
a t
T
i
i
0
1
2
2
(
)
(
) 	
(6.91)
	
=
+
x ti
(
)
1 	
(6.92)
The proof is similar for higher-order polynomial solutions.
In Example 6.1, the exact solution v(t) in Equation 6.52 is a fifth-order polynomial. Hence, the 
Taylor Series method using the fifth-order truncated Taylor Series would agree with the exact solu­
tion at 0, T, 2T, …. However, in Example 6.1, a second-order Taylor Series was used to generate the 
discrete-time values vA(1), vA(2), vA(4), vA(6), …, vA(30) shown in Table 6.1. This explains the discrep­
ancy between the discrete-time values and the exact solution v(ti), v(t2), v(t4), v(t6), …, v(t30) shown 
in the last column of the table.
In general, when x(t) is an mth-order polynomial, unlike the mth-order Taylor Series method, 
RK-m integrators will not generate the true solution values x(t1), x(t2), x(t3), …. Different RK-m inte­
grators will produce different discrete-time solutions; however, they achieve comparable accuracy 
with the Taylor Series method in the sense that the local truncation errors are the same order of 
magnitude. A similar result holds for RK integrators and the truncated Taylor Series method when 
both are the same order and less than m. In that case, the Taylor Series method will no longer be 
exact. The following example illustrates this point.
EXAMPLE 6.2
In Example 6.1, if we change the value of α from 0.25 to 0.1, the exact solution to Equation 6.35 
becomes
	
v t
t
( )
(
)
=
−
−
100
1
4 20
2
	
(6.93)
Approximate the solution for v(t) using the second-order Taylor Series, RK-1 integration, and 
both RK-2 integrators with a step size of T = 0.5. Compare results with the exact solution.
The state derivative function, Equation 6.36, is given by
	
f t v
F
v
m
ct
v
t
v
t
i
i
i
i
i
i
i
i
( ,
)
.
.
=
−
−
=
−
−
=
−
−






α
0
10
0 1
1
0 05
2 100
20
	
(6.94)
The first partials in Equations 6.38 and 6.39 become
	
f t v
v
t
t
i
i
i
i
( ,
)
(
)
=
−
−






2 100
20
2
	
(6.95)
	
f t v
t
v
i
i
i
( ,
)
(
)
=
−
−
2
20
	
(6.96)
and the Taylor Series method for calculating the approximation to v(t + T) is
	
v
i
v
i
Tf t v
i
T
f t v
i
f t v
i f
A
A
i
A
t
i
A
v
i
A
(
)
( )
[ ,
( )]
{ [ ,
( )]
[ ,
( )] [
+
=
+
+
+
1
2
2
t v
i
i
A
,
( )]}
	
(6.97)

490
Simulation of Dynamic Systems with MATLAB® and Simulink®
From Equations 6.94 through 6.97 with i = 0, ti = t0 = 0 and vA(i) = vA(0) = v(0) = 0,
	
v
T
T
A( )1
10
1
4
2
=
−
	
(6.98)
For a step size of T = 0.5, vA(1) = 4.9375. The exact solution v(T)|T=0.5 is computed from
	
v t
t
t
T
t
T
( )|
(
)
.
.
.
= =
= =
=
−
−
=
0 5
2
0 5
100
1
4 20
4 9375
	
which agrees with the result from the Taylor Series method.
Results for the Taylor Series method, RK-1, both RK-2 integrators, and the exact solution are 
tabulated in Table 6.2.
6.2.7  Higher-Order Systems
The application of RK numerical integration to higher-order systems is straightforward. The dif­
ferential equations of an nth-order system model are expressed as a system of first-order differential 
equations as shown in Equations 6.99 through 6.101.
	
d
d
x
t
f t x x
xn
1
1
1
2
=
( ,
,
,
,
)
…
	
(6.99)
	
d
d
x
t
f t x x
xn
2
2
1
2
=
( ,
,
,
,
)
...
…
	
(6.100)
	
d
d
x
t
f t x x
x
n
n
n
=
( ,
,
,
,
)
1
2 …
	
(6.101)
Updating the current discrete-time state vector [x1,A(i), x2,A(i), …, xn,A(i)] to the new vector 
[x1,A(i + 1), x2,A(i + 1), …, xn,A(i + 1)] with RK-m integration consists of determining, in the proper 
sequence, the derivatives kj,p, j = 1, 2, …, m and p = 1, 2, 3, …, n. By the proper sequence, we mean 
k1,1, k1,2, …, k1,n, followed by k2,1, k2,2, …, k2,n up through by km,1, km,2, …, km,n.
TABLE 6.2
Comparison of Taylor Series Method, RK-1, RK-2, and Exact Solution
i
ti
Taylor Series 
vA(i)
RK-1 Explicit 
vA(i)
RK-2 Improved 
vA(i)
RK-2 Modified 
vA(i)
Exact 
v(ti)
0
0
0
0
0
0
0
1
0.5
4.9375
5.0000
4.9359
4.9367
4.9375
2
1.0
9.7500
9.8718
9.7468
9.7484
9.7500
4
2.0
19.0000
19.2308
18.9938
18.9970
19.0000
6
3.0
27.7500
28.0769
27.7410
27.7455
27.7500
8
4.0
36.0000
36.4103
35.9883
35.9942
36.0000
10
5.0
43.7500
44.2308
43.7357
43.7430
43.7500

491
Intermediate Numerical Integration
To illustrate, suppose we are dealing with a third-order (n = 3) system and choose to implement 
a fourth-order (m = 4) RK-4 integrator to update the discrete-time state. The three derivative func­
tions are each calculated four times in the following order:
	
k
f t x
i x
i x
i
k
f t x
i x
i
A
A
A
i
A
A
1 1
1
1
2
3
1 2
2
1
2
,
,
,
,
,
,
,
[ ,
( ),
( ),
( )]
[ ,
( ),
=
=
( ),
( )]
[ ,
( ),
( ),
( )]
,
,
,
,
,
i x
i
k
f t x
i x
i x
i
A
i
A
A
A
3
1 3
3
1
2
3
=




	
(6.102)
	
k
f t
T x
i
Tk
x
i
Tk
x
i
i
A
A
A
2 1
1
1
1 1
2
1 2
3
0 5
0 5
0 5
,
,
,
,
,
,
[
.
,
( )
.
,
( )
.
,
( )
=
+
+
+
+0 5
0 5
0 5
0 5
1 3
2 2
2
1
1 1
2
1
.
]
[
.
,
( )
.
,
( )
.
,
,
,
,
,
,
Tk
k
f t
T x
i
Tk
x
i
Tk
i
A
A
=
+
+
+
2
3
1 3
2 3
3
1
1 1
2
0 5
0 5
0 5
,
( )
.
]
[
.
,
( )
.
,
(
,
,
,
,
,
,
x
i
Tk
k
f t
T x
i
Tk
x
A
i
A
A
+
=
+
+
i
Tk
x
i
Tk
A
)
.
,
( )
.
]
,
,
,
+
+





0 5
0 5
1 2
3
1 3
	
(6.103)
	
k
f t
T x
i
Tk
x
i
Tk
x
i
i
A
A
A
3 1
1
1
2 1
2
2 2
3
0 5
0 5
0 5
,
,
,
,
,
,
[
.
,
( )
.
,
( )
.
,
( )
=
+
+
+
+0 5
0 5
0 5
0 5
2 3
3 2
2
1
2 1
2
2
.
]
[
.
,
( )
.
,
( )
.
,
,
,
,
,
,
Tk
k
f t
T x
i
Tk
x
i
Tk
i
A
A
=
+
+
+
2
3
2 3
3 3
3
1
2 1
2
0 5
0 5
0 5
,
( )
.
]
[
.
,
( )
.
,
(
,
,
,
,
,
,
x
i
Tk
k
f t
T x
i
Tk
x
A
i
A
A
+
=
+
+
i
Tk
x
i
Tk
A
)
.
,
( )
.
]
,
,
,
+
+





0 5
0 5
2 2
3
2 3
	
(6.104)
	
k
f t
T x
i
Tk
x
i
Tk
x
i
Tk
k
i
A
A
A
4 1
1
1
3 1
2
3 2
3
3 3
4
,
,
,
,
,
,
,
,
[
,
( )
,
( )
,
( )
]
=
+
+
+
+
2
2
1
3 1
2
3 2
3
3 3
4 3
=
+
+
+
+
=
f t
T x
i
Tk
x
i
Tk
x
i
Tk
k
i
A
A
A
[
,
( )
,
( )
,
( )
]
,
,
,
,
,
,
,
f t
T x
i
Tk
x
i
Tk
x
i
Tk
i
A
A
A
3
1
3 1
2
3 2
3
3 3
[
,
( )
,
( )
,
( )
]
,
,
,
,
,
,
+
+
+
+




	
(6.105)
The components of the state are updated according to
	
x
i
x
i
T k
k
k
k
A
A
1
1
1 1
2 1
3 1
4 1
1
6
2
2
,
,
,
,
,
,
(
)
( )
(
)
+
=
+
+
+
+
	
(6.106)
	
x
i
x
i
T k
k
k
k
A
A
2
2
1 2
2 2
3 2
4 2
1
6
2
2
,
,
,
,
,
,
(
)
( )
(
)
+
=
+
+
+
+
	
(6.107)
	
x
i
x
i
T k
k
k
k
A
A
3
3
1 3
2 3
3 3
4 3
1
6
2
2
,
,
,
,
,
,
(
)
( )
(
)
+
=
+
+
+
+
	
(6.108)
An example of a second-order system model using RK-4 integration is now presented. The stan­
dard form of a linear second-order system is
	
d
d
d
d
2
2
2
2
2
x
t
x
t
x
K
u
n
n
n
=
=
ζω
+ ω
ω
	
(6.109)
Letting x1 = x and x2 = dx/dt leads to the state equation model
	
d
d
x
t
f t x x u
x
1
1
1
2
2
=
=
( ,
,
, )
	
(6.110)
	
d
d
2
x
t
f t x x u
x
x
K
u
n
n
n
2
2
1
2
2
1
2
2
=
=−
+
( ,
,
, )
ω
ζω
ω
−
	
(6.111)
where the last argument u of f1(t, x1, x2, u) and f2(t, x1, x2, u) refers to the system input.

492
Simulation of Dynamic Systems with MATLAB® and Simulink®
Expressions for the derivatives k1, k2, k3, and k4 associated with states x1 and x2 are
	
k
f t x
i x
i u t
i
A
A
i
1 1
1
1
2
,
,
,
[
(
(
(
,
),
),
)]
=
	
(6.112)
	
= x
i
A
2, ( ) 	
(6.113)
	
k
f t x
i x
i u t
i
A
A
i
1 2
2
1
2
,
,
,
[
(
(
(
]
,
),
),
)
=
	
(6.114)
	
= −
−
+
ω
ζω
ω
n
A
n
n
x
x
u
2
1
2
2
2
,
,
( )
( )
( )
i
i
K
t
A
i 	
(6.115)
	
k
f
2,1
1,1
2
1,2
0.5 ,
0.5
,
0.5
, (
0.5
=
+
+
+
+
1
1
[
( )
( )
,
t
T x
i
Tk
x
i
Tk
u t
T
i
A
A
i
)]	
(6.116)
	
=
+
x
i
Tk
A
2
1 2
0 5
,
,
( )
.

(6.117)
	
k
f t
T x
i
Tk
x
i
Tk
u t
i
A
A
i
2 2
2
1
1 1
2
1 2
0 5
0 5
0 5
0 5
,
,
,
,
,
[
( )
(
(
.
,
.
,
)
.
,
.
=
+
+
+
+
T)]	
(6.118)
	
= −
+
−
+
+
+
ω
ζω
ω
n
A
n
A
n
x
x
u
2
1
2
2
0 5
2
0 5
0
[
( )
.
]
[
( )
.
]
(
.
,
,
i
Tk
i
Tk
K
ti
1,1
1,2
5T)	 (6.119)
	
k
f t
T x
i
Tk
x
i
Tk
u t
i
A
A
i
3 1
1
1
2 1
2
2 2
0 5
0 5
0 5
0 5
,
,
,
,
,
[
( )
(
.
,
.
,
.
,
.
=
+
+
+
+
( )
T)] 	
(6.120)
	
=
+
x
i
Tk
A
2
2 2
0 5
,
,
( )
.

(6.121)
	
k
f t
T x
i
Tk
x
i
Tk
u t
i
A
A
i
3 2
2
1
2 1
2
2 2
0 5
0 5
0 5
0 5
,
,
,
,
,
[
(
.
,
.
,
.
,
.
=
+
+
+
+
( )
( )
T)]	
(6.122)
	
= −
+
−
+
+
+
ω
ζω
ω
n
A
n
A
n
x
x
u
2
1
2
2
0 5
2
0 5
0
[
( )
.
]
[
( )
.
]
(
.
,
,
i
Tk
i
Tk
K
ti
2,1
2,2
5T) 	
(6.123)
	
k
f
4 1
1
,
[
( )
( )
=
+
+
+
+
t
T,x
i
Tk
x
i
Tk
u t
T
i
A
A
i
1,
3,1
2,
3,2
,
, (
)]	
(6.124)
	
=
+
( )
x
i
Tk
A
2
3 2
,
, 
(6.125)
	
k
f t
,x
i
Tk
x
i
Tk
u t
T
i
,A
A
i
4 2
2
3 1
2
3 2
,
,
,
,
[
( )
,
( )
,
]
=
+
+
+
+
T
1
(
) 	
(6.126)
	
= −
+
−
+
+
+
ω
ζω
ω
n
A
n
A
n
x
x
u
T
2
1
2
2
2
[
( )
]
[
( )
]
(
)
,
,
i
Tk
i
Tk
K
ti
3,1
3,2
	
(6.127)
The updated state [x1,A(i), x2,A(i)] is obtained from
	
x
i
x
i
T k
k
k
k
A
A
1
1
1 1
2 1
3 1
4 1
1
6
2
2
,
,
,
,
,
,
(
)
( )
(
)
+
=
+
+
+
+
	
(6.128)
	
x
i
x
i
T k
k
k
k
A
A
2
2
1 2
2 2
3 2
4 2
1
6
2
2
,
,
,
,
,
,
(
)
( )
(
)
+
=
+
+
+
+
	
(6.129)
An example illustrating the application of Equations 6.110 through 6.129 follows.

493
Intermediate Numerical Integration
EXAMPLE 6.3
A simplified model to predict the levels of a drug in an individual is accomplished using compartmen­
tal analysis similar to the iodine model in Section 4.3. After oral ingestion, a drug enters the gastroin­
testinal tract (compartment 1) and is then distributed into the bloodstream (compartment 2) where it is 
metabolized and eliminated. State equations describing the drug dynamics in each compartment are
	
Gastrointestinal tract: d
d
m
t
c m
u
1
1
1
= −
+
	
(6.130)
	
Bloodstream: d
d
m
t
c m
c m
2
1
1
2
2
= −
−
	
(6.131)
where
m1 and m2 are the amounts of drug in each compartment (mg)
u is the ingestion rate of the drug (mg/min)
c1 and c2 are drug distribution and elimination constants of the individual (min−1)
The output y is the amount of drug in the bloodstream, that is, m2.
	
a.	Convert the state equations into a single second-order differential equation relating the 
output y and input u. Find ζ, ωn, and K for the second-order system.
	
b.	Define x1 = y = m2 and x2 = dy/dt = dm2/dt and simulate the response using classic 
RK-4 integration with a step size T = 1 min for the following conditions:
	
m
m
c
c
1
2
1
1
2
1
0
0
0
0
0 06
0 015
(
(
)
,
)
,
.
,
.
=
=
=
=
mg
mg
min
and
min
−
−
	
	
	   Assume the drug ingestion rate is given by
	
u t
Me
t
M
t
(
(
)
,
,
)
/
=
≥
=
=
−τ
τ
0
5
4
mg/min
min 	
(6.132)
	
c.	Find the exact solution for x1(t).
	
d.	Plot the simulated response x1,A(i) and the exact solution x1(t) on the same graph.
	
a.	Elimination of m1 from Equations 6.130 and 6.131 is easily accomplished by Laplace 
transforming the equations and algebraically solving for M2(s), which is also Y(s).
	
(
)
( )
( )
s
c M s
U s
+
=
1
1
	
(6.133)
	
(
)
(
( )
)
s
c M s
c M s
+
=
2
2
1
1
	
(6.134)
	
Y s
M s
c
s
c M s
( )
( )
( )
=
=
+
2
1
2
1
	
(6.135)
	
=
+
+






c
s
c
s
c U s
1
2
1
1
( )
	
(6.136)
	
	   Inverse Laplace transformation of Y(s) leads to the differential equation
	
d
d
d
d
2
2
1
2
1 2
1
y
t
c
c
y
t
c c y
c u
+
+
+
=
(
)
	
(6.137)

494
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	   Comparing Equation 6.137 with the standard form of Equation 6.109 yields
	
ω
ζ
n
c c
c
c
c c
K
c
=
=
+
=
(
)
,
(
)
,
1 2
1 2
1
2
1 2
1 2
2
2
1
	
(6.138)
	
	   Solving for the second-order system parameters,
	
ωn =
=
=
=
(
)
[( .
)( .
)]
.
/
/
c c
1
1 2
1 2
0 06 0 015
0 03
2
rad
min 	
	
ζ =
+
=
+
=
c
c
c c
1
2
1 2
1 2
2
0 06
0 015
2 0 03
1 25
(
)
.
.
( .
)
.
	
	
K =
=
=
−
1
1
0 015
66 66
2
1
c
.
.
min
	
	
b.	The RK-4 calculations follow the procedure outlined in Equations 6.112 through 6.129. 
The integration step begins with the k1 derivative evaluation for each state, that is,
	
k
x
x
k
x
x
K
A
n
A
n
A
n
11
2
2
12
2
1
2
2
0
0
0
2
0
,
,
,
,
,
( )
( )
( )
=
=
=
= −
−
+
=
ω
ζω
ω
(0)
(0)
u
−
−
+
= −
−
+
ω
ζω
ω
n
n
n
x
x
K
M
2
1
2
2
2
0 0009 0
21 25 0 03 0
1
0
(0)
(0)
.
( )
( .
)( .
)( )
.015 0 0009 5
0 3






=
( .
)( )
.
	
	
	 followed by the k2 derivative evaluation for each state, that is,
	
k
x
k T
A
2 1
2
1 2
0
1
2
0
1
2 0 3 1
0 15
,
,
,
( )
( . )( )
.
=
+
=
+
=
	
	
k
x
i
k T
x
i
k T
n
A
n
A
2 2
2
1
11
2
12
1
2
2
1
2
,
,
,
,
,
( )
( )
= −
+





−
+





ω
ζω
+
+






= −
+





−
K
u t
T
n
i
ω2
1
2
0 0009 0
1
2 0 1
21 25
.
( )( )
( .
)( .
)
( . )( )
.
( .
) e
.
0 03 0
1
2 0 3 1
1
0 015 0 0009 5
0
+






+





−
5 4
0 2535
/
.
=
	
	
	   The remaining derivative evaluations are obtained in a similar fashion.
	
k
k
k
k
3 1
3 2
4 1
4 2
0 1267
0 2552
0 2552
0 2144
,
,
,
,
.
,
.
,
.
,
.
=
=
=
=
	
	
	   M-file “Ch6_Ex6_3.m” recursively solves the RK-4 difference equations for the dis­
crete-time states x1,A(i) and x2,A(i). Table 6.3 contains selected values of x1,A(i).
	
c.	The exact solution for x1(t) = y(t) can be determined by substituting the Laplace transform 
of u(t) into Equation 6.136,
	
X s
c
s
c
s
c
M
s
1
1
2
1
1
1
( )
(
)
=
+
+
+












/τ
	
(6.139)

495
Intermediate Numerical Integration
	
	   Inverse Laplace transforming Equation 6.139 gives the exact solution (Figure 6.6),
	
x t
Mc
c
c
c
c
c
c
t
c t
1
1
1
2
1
2
2
1
1
1
( )
(
)(
)(
)
(
=
−
−
−
−
−
−
+
−
−
τ
τ
τ
τ
τ
(1
)e
(1
)e
1
c2
c
c
t
1
2
−


−
)
/
τ
τ
e
	
(6.140)
	
d.	Table 6.3 contains values of the discrete-time response x1,A(i) and the exact solution x1(t) 
at different times. The approximate and exact solutions agree to four places after the 
decimal point.
Figure 6.6 contains plots of the discrete-time states x1,A(i) and x2,A(i) and the exact solution x1(t).
Every fourth point of the discrete-time signals is plotted for the sake of clarity.
TABLE 6.3
Approximate (RK-4, T = 1 min) and Exact 
Solutions
i
ti
x1,A(i)
x1(ti)
0
0
0.0
0.0
1
1
0.13477907
0.13477243
2
2
0.48560007
0.48558842
3
3
0.98658006
0.98656465
4
4
1.58751933
1.58750114
5
5
2.25036682
2.25034661
25
25
11.68143041
11.68141034
50
50
11.65359364
11.65357994
100
100
6.24296647
6.24295986
150
150
2.98572189
2.98571876
200
200
1.41218500
1.41218352
250
250
0.66716006
0.66715936
300
300
0.31514864
0.31514831
0
50
100
x2, A(i), i = 0, 4, 8, ...
x1,A(i), i = 0, 4, 8, ...
x1(t)
150
t (min)
0.8
15
10
5
0
0.6
0.4
x2 = dm2/dt (mg/min)
x1 = m2 (mg)
0.2
0
–0.2
200
250
300
0
50
100
RK-4 integration (T = 1 min)
150
t (min)
200
250
300
FIGURE 6.6  Discrete-time signals x1,A(i) and x2,A(i) and continuous-time signal x1(t).

496
Simulation of Dynamic Systems with MATLAB® and Simulink®
Before we proceed further, it would be useful to know the total amount of drug ingested by the 
individual. Integrating the rate of drug ingestion over time,
	
M
u t
t
M
t
M
T
t
=
=
=
∞
−
∞
∫
∫
( )d
d
/
0
0
e
τ
τ
	
(6.141)
For a continuous-time integrator, the derivative function f(t, x) is equal to the input u(t) to the 
integrator. Hence, MT in Equation 6.141 can be found for an arbitrary input function u(t) using any 
of the numerical integrators we have studied. Of course, the upper limit must be finite, presumably 
the time required for the drug to be fully ingested.
We conclude this section with a simple nonlinear system model.
EXAMPLE 6.4
The cooling of a high-temperature oven is governed by the following differential equation 
(McClamroch 1980):
	
C
T
t
K T
T
K T
T
r
d
d
c



= −
−
−
−
(
)
(
)
0
4
0
4
	
(6.142)
where


T
T t
= ( ) is the oven temperature (°R)
T0 is the surrounding temperature (°R)
C is the thermal capacity of the oven
Kc and Kr are convective and radiation heat loss coefficients
Simulate the oven’s cooling from an initial temperature of 1000°R if the surrounding tempera­
ture is 500°R. Numerical values of the thermal parameters are
	
C
K
K
c
r
=
°
=
°
= ×
°
24
8
2 10 8
4
Btu/ R
Btu/h/ R
Btu/h/ R
,
,
−
	
RK-1 through RK-4 integrators were used to numerically integrate the derivative function
	
f T
T
t
K
C T
T
K
C T
T
c
r
( )
(
)
(
)




=
= −
−
−
−
d
d
0
4
0
4
	
(6.143)
The results are shown in Table 6.4. The integration step size was chosen for each integration 
method to make the total number of derivative function evaluations and, hence, the computa­
tional effort, roughly the same.
The last column is labeled “Exact”; however, the exact solution is not easily obtained. The numbers 
in the last column were obtained using RK-4 integration with a small enough step size (T = 0.005 
h) to generate approximate values in agreement with the exact solution values to at least one place 
after the decimal point. How can we check this assumption?
Figure 6.7 shows the results of using RK-1 and RK-4 to integrate the derivative function, Equation 
6.143. RK-1 is used with a step size T = 0.3 h and RK-4 is used with a step size T = 0.8 h. Note that 
RK-4 with T = 0.8 h produces more accurate results than RK-1 with T = 0.3 h.
EXERCISES
	6.1	 Show that the difference equation resulting from using RK-m integration to approximate the 
behavior of dx/dt = f(t, x) = ax is
	
x
i
aT
aT
aT
aT
x
i
A
m
A
(
)
!(
)
!(
)
!(
)
( )
+
=
+
+
+
+
+






1
1
1
2
1
3
1
2
3

m
	

497
Intermediate Numerical Integration
	6.2	 The mass m of a radioactive material in a container decays according to the equation
	
d
d
subject to
(0)
m
t
km
m
m
=−
=
0
	
		
where
	
	
m = m(t)
	
	
k is a constant for the specific radioactive material
	
	
m0 is the initial mass of radioactive material in the container
TABLE 6.4
Comparison of RK-1, 2, 3, 4 Integrators with Different Step Sizes and Exact Solution
RK-1
RK-2
RK-3
RK-4
“Exact”
T = 0.1
T = 0.2
T = 0.3
T = 0.4
i
ti
T
i
A( )
i
ti
T
i
A( )
i
ti
T
i
A( )
i
ti
T
i
A( )
T
i
A( )
0
0
1000.0
0
0
1000.0
0
0
1000.0
0
0
1000.0
1000.0
2
0.2
841.0
1
0.2
864.1
859.9
3
0.3
793.1
1
0.3
806.2
813.2
4
0.4
755.6
2
0.4
784.9
1
0.4
774.3
775.5
6
0.6
699.8
3
0.6
730.8
2
0.6
713.5
718.0
8
0.8
660.0
4
0.8
691.1
2
0.8
675.6
676.2
9
0.9
644.0
3
0.9
656.1
659.3
10
1.0
630.1
5
1.0
660.6
644.4
12
1.2
607.0
6
1.2
636.4
4
1.2
617.2
3
1.2
619.1
619.5
16
1.6
573.9
8
1.6
600.8
4
1.6
583.4
583.6
20
2.0
552.1
10
2.0
576.3
5
2.0
559.4
559.6
30
3.0
522.7
15
3.0
540.7
10
3.0
526.2
526.7
40
4.0
510.2
20
4.0
523.3
10
4.0
512.3
512.3
48
4.8
505.4
24
4.8
515.4
16
4.8
506.6
12
4.8
506.7
506.7
RK-1 integration with step size T = 0.3 h
RK-4 integration with step size T = 0.8 h
1000
800
600
T (°R)
T (°R)
400
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
0
0.5
400
600
800
1000
1
1.5
2
2.5
3
3.5
4
4.5
5
Exact
T = 0.3 h
Exact
T = 0.8 h
t (h)
FIGURE 6.7  RK-1 and RK-4 solution of oven cooling with three different step sizes.

498
Simulation of Dynamic Systems with MATLAB® and Simulink®
		
The half-life of a radioactive material, T1/2, is related to the decay constant k by T1/2 = ln 2/k.
		
  Suppose the half-life of a radioactive material is 2 years and there is initially 1 kg of mate­
rial present in the container.
	
a.	 Use RK-1 through RK-4 integration to obtain approximations of the mass of radioactive 
material present in the container every month until less than 0.25 kg of material remains.
	
b.	 Compare the results from part (a) with the exact solution for m(t).
	6.3	 The amount of fish in a lake at any time is assumed to obey the following logistic growth model:
	
d
d
x
t
Kx M
x
u
=
−
−
(
)
	
		
where
	
	
x = x(t) is the number of fish present
	
	
u = u(t) is the rate at which fish are harvested
		
  Nominal values of the system parameters are K = 2.5 × 10−7 (fish-day)−1 and M = 2,00,000 
fish. The lake is initially stocked with 50,000 fish.
	
a.	 Use RK-4 integration with appropriate step size T to approximate the fish population in the 
absence of harvesting. Plot the results.
	
b.	 Plot the exact solution x(t) = M/(1 − [1 − M/x(0)]e−KMt) on the same graph.
	
c.	 Repeat part (a) for a constant harvesting rate u = 2750 fish/day.
	
d.	 Repeat part (a) for a constant harvesting rate u = 2250 fish/day.
	6.4	 For the system in Example 6.1, let α = 0.15, c = 0.05, m0 = 1, F = 0, and v(0) = 2. The deriv­
ative function is
	
d
d
v
t
f t v
v
t
t
=
= −
−
≤≤
( , )
,
3
20
0
16
	
		
and the exact solution is
	
v t
t
t
(
(
)
)
.
,
=
−
≤≤
2 1
0 05
0
16
3
	
  	
Show that v(0.5) and vA(1) are identical, where vA(1) is the result of using RK-3 integration with 
a step size T = 0.5.
	6.5	 Repeat Example 6.3 using RK-1 and RK-2 integrator with a step size T = 1 min. Compare the 
accuracy of each with the RK-4 method results shown in Table 6.3.
	6.6	 In Example 6.3, choose the states x1 = m1 and x2 = m2 and the outputs y1 = x1 and y2 = x2.
	
a.	 Find the matrices A, B, C, and D in the continuous-time state variable model of the system.
	
b.	 Apply RK-4 integration with T = 1 min to obtain approximate solutions for the amount of 
drug in the gastrointestinal tract and the bloodstream. Compare the results of drug amounts 
in the bloodstream with results in Table 6.3.
	
c.	 Use RK-4 integration with T = 1 min to find an approximate solution for the case where 
m1(0) = 20 mg, m2(0) = 0 mg, and u(t) = 0, t ≥ 0.
	
d.	 Verify the results in part (c) by using
	
x
i
I
TA
TA
TA
TA
x
A
i
( )
!(
)
!(
)
!(
)
( )
=
+
+
+
+






1
2
1
3
1
4
0
2
3
4
	

499
Intermediate Numerical Integration
	6.7	 Approximate the amount of drug ingested by an individual using RK-1 through RK-4 integra­
tion (using an appropriate step size T) when the drug ingestion rate is
	
a.	 u(t) = Me−t/τ, t ≥ 0 (M = 5 mg/min, τ = 4 min)
	
b.	 u(t) = Me−t/τ, t ≥ 0 (M = 1 mg/min, τ = 45 min)
	
c.	 u(t) = A sin (2πt/P), 0 ≤ t ≤ P/2 (A = 2 mg/min, P = 30 min)
	
d.	 u(t) is available in tabular form in the Table E6.7:
	6.8	 Since RK-4 integrators require four times the number of derivative function evaluations as 
RK-1 integrators and RK-2 integrators require twice the number of derivative function evalu­
ations as RK-1 integrators, it is reasonable to compare the three integrators when the compu­
tational effort is roughly the same for all three. In other words, if the step size for the RK-1 
integrator is T, then the RK-2 and RK-4 integrators should be run with step sizes 2T and 4T, 
respectively. Simulate the response of the system in Example 6.1 where
	
d
d
v
t
f t v
v
t
v
=
=
−
−






=
( , )
,
( )
5 2
20
0
0
	
		
using RK-1, RK-2 (improved or modified Euler), and the classic RK-4 integrator using step 
sizes of 0.25, 0.5, and 1 s, respectively. Enter the results in Table E6.8. Comment on the results.
	6.9	 The model for finding the temperature in the oven of Example 6.4 when there is an internal 
heat source is
	
C dT
t
K T
T
K T
T
u
c
r



d
= −
−
−
−
+
(
)
(
)
0
4
0
4
	
		
where u = u(t) is the heat source. Suppose the oven and its surroundings are in equilibrium at 
a temperature of 600°R.
	
a.	 Simulate the transient response of the oven temperature using an RK-2 integrator with step 
size T = 0.25 h when the heat transferred to the oven is as shown in Figure E6.9:
TABLE E6.7
t (min)
0
0.5
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0
u(t) (mg/min)
0.0
0.4
1.0
3.0
2.2
1.4
0.8
0.4
0.2
0.1
0.0
TABLE E6.8
RK-1 (T = 0.25)
RK-2 (T = 0.5)
RK-4 (T = 1)
i
ti
vA(i)
v(ti)
i
ti
vA(i)
v(ti)
i
ti
vA(i)
v(ti)
0
0
0.00000
0.00000
0
0
0.00000
0.00000
0
0
0.00000
0.00000
4
1
2
1
1
1
8
2
4
2
2
2
12
3
6
3
3
3
16
4
8
4
4
4
20
5
10
5
5
5
24
6
12
6
6
6
28
7
14
7
7
7
32
8
16
8
8
8

500
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	 Find the exact solution for T t( ) to one place after the decimal point by solving for T i
t
A
i
(
( )
) ≈
, 
i = 0, 1, 2, 3, …  using RK-4 integration with step size T = 0.001 h. Compare the results with 
those from part (a) and (b).
6.3  ADAPTIVE TECHNIQUES
The computational efficiency of RK methods can be improved if the step size is allowed to vary 
­during a simulation. A reasonable criterion must be established for determining when it is appro­
priate to modify the step size and by how much. The criterion is usually based on an estimate 
of the local truncation error as the simulation progresses with time. If an estimate of the local 
truncation error is outside an acceptable tolerance, then it is possible to either reduce the step size 
when the estimated error is too large or quite possibly increase the step size if it appears that the 
error is unnecessarily small. Techniques for estimating the local truncation error and modifying 
the step size, if ­warranted, are referred to as adaptive step size control.
6.3.1  Repeated RK with Interval Halving
If we use the local truncation error as the basis for determining when the step size needs adjustment, 
then a method is needed for approximating it. One approach requires that we obtain two estimates 
of the updated state from an RK integrator and use the difference to estimate the local truncation 
error. Interval halving refers to the case where the step sizes differ by a factor of 2.
Refer to Figure 6.8 to understand how the method works. Let xA(i + 1|T) be the approximate 
solution to x = f(t, x) at ti+1 obtained using a step size of T. Similarly, let xA(i + 1|T/2) be the approxi­
mate solution to x
f t x
=
(
)
,
 at ti+1 obtained after two steps using a step size of T/2.
Assume xA(i) is exact, that is, xA(i) = x(ti). It follows that
	
x t
x
i
T
i
A
T
(
)
(
|
)
+
=
+
+
1
1
ε 	
(6.144)
FIGURE 6.8  Illustration of interval halving for estimation of local truncation error.
FIGURE E6.9 

501
Intermediate Numerical Integration
	
x t
x
i
T
i
A
T
(
)
/
+
=
+





+
1
2
1 2
ε
	
(6.145)
where εT and εT/2 are the local truncation errors in xA(i + 1|T) and xA(i + 1|T/2), respectively.
From Equations 6.144 and 6.145,
	
x
i
T
x
i
T
A
T
A
T
(
|
)
/
+
+
=
+





+
1
1 2
2
ε
ε
	
(6.146)
Suppose the numerical integrator is an RK-4 with local truncation error εT ~ O(T 5). Then εT can 
be expressed as
	
εT
cT
=
5
	
(6.147)
and εT/2, which is the sum of local truncation errors for the two half-intervals, is given by
	
εT
c T
c T
c T
c
/2
5
5
5
2
2
2
2
1
16
= 




+ 




=





=
T
T
5
1
16
=
ε
	
(6.148)
In reality, c in Equation 6.147 and the two occurrences of c in Equation 6.148 are different and 
depend on the derivative function and the intervals; however, for suitably small T, the differences 
are negligible. Eliminating εT from Equations 6.146 and 6.148 gives
	
x
i
T
x
i
T
A
T
A
T
(
|
)
/
+
+
=
+





+
1
16
1 2
2
2
ε
ε
/
	
(6.149)
Solving for εT/2 in Equation 6.149 gives
	
εT
A
A
x
i
T
x
i
T
/2
1 2
1
15
=
+





−
+
(
|
)
	
(6.150)
εT/2 in Equation 6.150 is an estimate of the local truncation error of the RK-4 integrator when the step 
size is T/2. It can be used to adjust the step size in subsequent calculations. For example, Table 6.5 
shows a possible approach to step size adjustment using predetermined tolerance limits εL and εU.
The truncation error εT/2 can be added to xA(i + 1|(T/2)) to obtain a fifth-order accurate estimate 
of x(ti + 1), that is, a new estimate xA(i + 1) with local truncation error εT ~ O(T 5). This gives
	
ε
ε
ε
L
T
U
≤
≤
|
|
/2
	
(6.151)
TABLE 6.5
Step Size Adjustment Based on Outcome of |εT/2|
Outcome
Action (Next Integration Step)
εL > |εT/2|
Double current step size
εL ≤ |εT/2| ≤ εU
Keep current step size
|εT/2| > εU
Halve current step size

502
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
+





−
+
16
1 2
1
15
x
i
T
x
i
T
A
A(
|
)
	
(6.152)
The following example includes a one-step numerical integrator with the step size determined by 
the interval halving method previously described.
EXAMPLE 6.5
A cone-shaped tank is filling with water at a constant rate F t
F
1( ) =
 as shown in Figure 6.9. 
The ­initial level is h0. Water evaporates from the tank at a rate proportional to the surface area of 
liquid. The constant of proportionality is α.
	
a.	Find the derivative function in the continuous-time model of the tank.
	
b.	For F = πft /min
3
, α = 0.01 ft/min, and h0 = 10 ft, estimate the local truncation error in 
the RK-4 estimate hA(1) when T = 1 in using interval halving, that is, find εT/2.
	
c.	Use εT/2 to obtain a fifth-order accurate estimate of h(T).
	
d.	Simulate the tank dynamics for a period of time sufficient to allow the tank level to 
increase by 90% of the ultimate change in level. Use an adaptive step size based on the 
algorithm in Table 6.5 with εL = 10−13 and εU = 10−11.
	
e.	Find the analytical solution of the continuous-time model and plot it along with the 
simulated solution.
	
a.	The continuous-time model of the tank is
	
d
d
V
t
F t
S
=
−
1( )
α 	
(6.153)
	
	 where
	
	
V is the volume of water in the tank
	
	
S is the surface area of water at the top where evaporation occurs
	
	 For the conical shape in Figure 6.9,
	
V
h
S
h
=
=
π
π
3
2
12
4
,
	
(6.154)
FIGURE 6.9  Conical tank with evaporation.

503
Intermediate Numerical Integration
	
	 Substituting Equation 6.154 into Equation 6.153 and solving for the derivative function give
	
d
d
h
t
F
h
=
−
4
2
π
α
	
(6.155)
	
b.	Using the given values for α and F  gives
	
d
d
h
t
h
=
−
4
0 01
2
.
	
(6.156)
	
	   Starting from the initial point (0, h0) = (0, 10), the results from interval halving after one 
integration step are given in Table 6.6.
	
	   The second column contains the results from a single-step RK-4 integrator with step 
size T = 1 min. The last two columns list the results from two consecutive steps of an 
RK-4 integrator with step size T = 0.5 min.From Equation 6.150, an estimate of the local 
truncation error in hA(1|(T/2)) is given by
	
εT
A
A
h
T
h
T
/
( | )
.
2
1 2
1
15
10 0298806754
=











−
=
3399
10 02988067543460
15
0 40619359727619
10 13
−
= −
×
−
.
.
	
	
c.	From Equation 6.152, the fifth-order accurate estimate of h(T) is
	
h
h
T
h
T
A
A
A
( )
( | )
(
.
1
16
1 2
1
15
16 10 0298
=











−
=
8067543399
10 02988067543460
15
10 02988067543395
)
.
.
−
=
	
	
d.	The steady-state tank level is easily obtained by setting the derivative function to zero in 
Equation 6.155 and solving for h = h(∞).
	
⇒
∞=
=
=
h
F
(
)
4
4
20
πα
π
π(0.01)
ft
	
(6.157)
TABLE 6.6
Results after One Step of Interval Halving Using RK-4 (T = 1 min)
t1 = T
t1/2 = T/2
t1 = T/2 + T/2
k1
0.03000000000000
0.03000000000000
0.02988050771064
k2
0.02988026946101
0.02994006743256
0.02982108077964
k3
0.02988074623874
0.02994018702867
0.02982119883721
k4
0.02976202120809
0.02988050764055
0.02976202170051
hA(1/T) = 10.02988067543460
h
T
A 1
2 2
10 01497008471359





=
.
h
T
A 1 2
10 02988067543399





=
.

504
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	   The tank dynamics were simulated using RK-4 integration with interval halving 
for step size control in “Ch6_Ex6_5.m.” The ultimate change in tank level is h(∞) − 
h(0) = 20 − 10 = 10 ft. The simulation terminates when hA(i) exceeds the level h(0) + 
0.­9[h(∞)−h(0)] = 10 + 0.9(10) = 19 ft.
	
	   Table 6.7 summarizes how the step size was changed in accordance with the given 
tolerances on the estimated local truncation error. Note the significant increase in step 
size from the starting value of T = 1 min as the simulation progresses.
	
e.	The analytical solution is an implicit function for h(t). The derivation is left as an exercise. 
The result is
	
100 10
10
60
3
20
−
−
−
+











=
h t
h t
h t
t
( )
ln
( )
( )
	
(6.158)
	
	   Data points were obtained by increasing h(t) from 10 to 19 ft in small increments, 
solving for the corresponding value of t, and plotted in Figure 6.10 with t values along 
the abscissa. The simulated results (every fourth point) are also plotted demonstrating 
the close agreement with the exact solution. Notice that the step size is progressively 
increased as the slope, that is, derivative of the solution, gradually decreases.
TABLE 6.7
Simulation Time Interval and the Constant Step Size T 
Using Interval Halving for Adaptive RK-4 Integration
Time Interval
Step Size, T
0 ≤ t ≤ 1
1
1 ≤ t < 69
2
69 ≤ t < 209
4
209 ≤ t < 313
8
313 ≤ t < 1673
16
Simulated and analytical tank level vs. time
20
19
18
17
16
15
14
13
12
11
10 0
200
400
600
800
1000
t (min)
1200
1400
1600
1800
h(t), hA (ft)
h(t)
hA(i), i = 0, 3, 7, ...
FIGURE 6.10  Results of RK-4 integration with adaptive step size control.

505
Intermediate Numerical Integration
	
	   The average of the estimated local truncation errors is
	
ε
ε
T
T
i
i
/
/
(
)
.
2
2
12
1
169
1 6653
10
⇒
=
×
−
=∑
	
(6.159)
	
	   In this example, the simulated time was approximately 1670 min, which would have 
required 1670 integration steps if the step size had remained constant at T = 1 min. With 
adaptive step size control, the number of integration steps was 169, a nearly 90% reduc­
tion. Of course, each of the 169 integration steps requires two passes, one using a full 
step size and the other using two half-steps. The number of derivative function evalua­
tions for each method is summarized below.
6.3.2  Constant Step Size (T = 1 min)
	
Total numbr of function evaluations 
1670 min
1 min/step
f
=
×4 unction evaluations
step
= 6680
	
6.3.3  Adaptive Step Size (Initial T = 1 min)
	
1.	Number of function evaluations (first pass)
	
169 steps 
4 function evaluations
step
×
= 676
	
	
2.	Number of new function evaluations (second pass)
	
169 steps 
function evaluations
first half interval
169
×
=
3
507
 steps 
function evaluations
second half interval
×
=
4
676
	
	
	 Total number of function evaluations = 676 + 507 + 676 = 1859.
The number of derivative function evaluations has been reduced by over 72%. This comparison 
is clearly sensitive to the order of the RK integrator used as well as the constant step size T and 
total simulation time. For example, halving the value of T from 1 to 0.5 min doubles the number of 
derivative function evaluations in the first case where the step size remains constant. With interval 
halving and adaptive step size control, the total number of steps would remain nearly the same 
regardless of the initial step size. Consequently, the total number of derivative function evaluations 
would remain about the same in either case.
The step size control logic is also significant. The adaptive step size control is typically more 
complex (Borse 1997; Chapra and Canalel 2002) than the simple approach presented here where the 
new step size is either one half, the same, or twice the current step size.
Since an implicit solution for h(t) is known (Equation 6.158), it is possible to compare the 
­estimated local truncation error with the actual local truncation error, although not in a straightfor­
ward manner due to the implicit nature of the solution.
6.3.4  RK–Fehlberg
In the case of RK-4 integration, the interval halving method requires seven additional deriva­
tive function evaluations for the second pass over the two half-intervals. A total of 11 function 

506
Simulation of Dynamic Systems with MATLAB® and Simulink®
evaluations are required for each interval, independent of the interval size. An alternative method 
for estimating the local truncation error is based on the difference of two different order RK inte­
grators over the same integration time step. By choosing two RK integrators with several common 
points for the derivative function evaluations, efficiency is improved significantly compared to the 
interval halving method.
The RK–Fehlberg method employs RK-4 and RK-5 integrators where the four function evalua­
tions k1, k2, k3, and k4 of the RK-4 integrator are used in the RK-5 integrator as well. Recall that RK-5 
integration methods require six function evaluations per step. Therefore, RK–Fehlberg methods com­
bining RK-4 and RK-5 integrators employ a total of six derivative function evaluations per interval.
A common RK–Fehlberg integrator is given as follows (Rao 2002):
	
k
f
1 = [ ,
( )]
t x
i
i
A
	
(6.160)
	
k
f t
T x
i
Tk
i
A
2
1
1
4
1
4
=
+
+






,
( )
	
(6.161)
	
k
f t
T x
i
Tk
Tk
i
A
3
1
2
3
8
3
32
9
32
=
+
+
+






,
( )
	
(6.162)
	
k
f t
T x
i
Tk
Tk
Tk
i
A
4
1
2
3
12
13
1932
2197
7200
2197
7296
2197
=
+
+
−
+



,
( )


	
(6.163)
	
k
f t
T x
i
Tx
Tk
Tk
Tk
i
A
5
1
2
3
4
439
216
8
3680
513
845
4104
=
+
+
−
+
+






,
( )
	
(6.164)
	
k
f t
T x
i
Tx
Tk
Tk
Tk
T
i
A
6
1
2
3
4
1
2
8
27
2
3544
2565
1859
4104
11
40
=
+
−
+
−
+
−
,
( )
k5





	
(6.165)
The estimate of x[(i + 1)T] using RK-4 integration is
	
x
i
x
i
T
k
k
k
k
A
A
(
)
( )
+
=
+
+
+
−






1
25
216
1408
2565
2197
4104
1
5
1
3
4
5
	
(6.166)
The RK-5 estimate of x[(i + 1)T] and eventual updated state is
	
x
i
x
i
T
k
k
k
k
k
A
A
(
)
( )
+
=
+
+
+
−
+
1
16
135
6656
12825
28561
56430
9
50
2
55
1
3
4
5
6





	
(6.167)
The local truncation error incurred in the ith integration interval is estimated from the difference 
of Equations 6.167 and 6.166. Thus,
	
Estimate of (εT
i
T
k
k
k
k
k
) =
−
−
+
+
1
360
128
4275
2197
75240
1
50
2
55
1
3
4
5
6





	
(6.168)
Example 6.6 illustrates the use of RK–Fehlberg integration, specifically, the RK-4 and RK-5 
methods previously described.

507
Intermediate Numerical Integration
EXAMPLE 6.6
A motor boat is being driven across a river L ft wide to the opposite side as shown in Figure 6.11. 
The boat departs from point 0, the origin of an x−y coordinate system, attempting to reach a 
point H ft upstream. The boat travels at a constant speed vb mph relative to the water that flows 
downstream at a speed of vr mph. The boat is continuously steered in the direction of its intended 
destination. The boat’s heading is given by the angle θ as shown in the diagram. Numerical values 
of the system parameters are L = 1000 ft, H = 5000 ft, vb = 15 mph, and vr = 5 mph.
	
a.	Choose the state variables as x(t) and y(t) and obtain expressions for the state derivative 
functions in terms of x and y and the system parameters L, H, vb, and vr.
	
b.	Use the “ode45” numerical integrator in Simulink and simulate the boat’s x and y posi­
tion as a function of time. Plot x vs. t, y vs. t, and θ vs. t.
	
c.	Plot the steering angle θ vs. horizontal position x.
	
d.	Find an expression for the derivative dy/dx in terms of x and y and the system parameters 
L, H, vb, and vr.
	
e.	Write a program to implement the RK–Fehlberg method to numerically integrate dy/dx. 
Adjust the step size when the estimated local truncation error falls outside an acceptable 
tolerance range. Choose the initial integration step to be T = 1 ft.
	
f.	Find the exact solution for y(x) and compare it with the simulated results.
	
a.	From the diagram, the state derivatives are
	
d
d
x
t
v
v
L
x
L
x
H
y
b
b
=
=
−
−
+
−
cos
[(
)
(
) ] /
θ
2
2 1 2
	
(6.169)
	
d
d
y
t
v
v
r
b
= −
+
sinθ
	
(6.170)
	
= −
+
−
−
+
−
v
v
H
y
L
x
H
y
r
b [(
)
(
) ] /
2
2 1 2
	
(6.171)
	
b.	A Simulink diagram of the system is shown in Figure 6.12.
	
	   Selecting the “ode45” integrator with maximum step size set to 20 and relative toler­
ance equal to 10−6 produces graphs of the state variables x(t) and y(t) and the additional 
output θ(t) shown in Figure 6.13.
	
	   The exact solutions for x(t), y(t), and θ(t) were approximated using Simulink’s RK-4 
integrator with a very small step size, namely, T = 0.01 s. The adaptive step size control 
quickly adjusts the step size to its maximum value and maintains it at the upper limit until 
the simulation is nearly complete. Comparison with the “exact” (T = 0.01 s) solution 
shows that the truncation errors are minimal.
FIGURE 6.11  Boat trajectory crossing the river.

508
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	A plot of steering angle θ vs. horizontal position x is shown in Figure 6.14. Note that the 
river current causes the boat to be steered at increasingly greater angles as it approaches 
the right bank of the river.
	
d.	States x(t) and y(t) represent a parametric description of the boat’s trajectory y = y(x). 
The trajectory can be found in one of two ways. First, the parameter t can be eliminated 
FIGURE 6.12  Simulink diagram of boat crossing.
150
t (s)
200
250
300
350
100
50
0
150
200
250
300
350
100
50
0
150
200
250
300
350
100
Results of boat crossing simulation
1000
750
Ode45
Ode45
Ode45
x(t)
y(t)
θ(t)
500
250
x (ft)
y (ft)
θ (deg)
0
5000
3750
2500
1250
0
90
85
80
50
0
FIGURE 6.13  Time histories of state variables x(t) and y(t) and output θ(t) using Simulink variable-step 
integrator “ode45” and “exact” solutions (RK-4 with T = 0.01).

509
Intermediate Numerical Integration
from equations for the states x(t) and y(t). Since we have not developed the solutions 
for x(t) and y(t), we resort to the second approach, namely, integration of the derivative 
dy/dx.
	
	   Dividing Equation 6.170 by Equation 6.169 gives
	
d
d
y
x
v
v
v
r
b
b
= −
+
sin
cos
θ
θ
	
(6.172)
	
	   Expressing sin θ and cos θ in terms of the distances x, y, L, and H (see Figure 6.11) and 
simplifying the result yield
	
d
d
y
x
H
y
L
x
v
v
H
y
L
x
r
b
=
−
−
−
+
−
−












1
2 1 2
/
	
(6.173)
	
e.	The RK–Fehlberg Equations 6.160 through 6.168 are solved in “Ch6_Ex3_2.m.”
	
	 A simulation summary is shown in Table 6.8.
400
500
x (ft)
Steering angle θ(x) (deg) vs. horizontal distance x (ft)
θA(i) using ode45
θ (x)
600
700
800
900
1000
300
200
100
0
78
80
θ (deg)
82
84
86
88
90
FIGURE 6.14  Steering output θ vs. horizontal location x with Simulink variable-step integrator “ode45” 
and “exact” solution.
TABLE 6.8
Summary of RK–Fehlberg Simulation Results for Boat Crossing
Minimum tolerance
10−7 ft
Minimum tolerance
10−5 ft
Minimum step size
0.1 ft
Minimum step size
25 ft
Number of integration steps
87
Average step size
11.49 ft
Average estimated local truncation error
1.6427 × 10−4

510
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f.	Derivation of the exact solution to Equation 6.173 is left as an exercise. The result is
	
y x
H
L
x c L
x
L
x
c
k
k
( )
(
)
(
)
=
−
−
−
−
−






−
2
	
(6.174)
	
	 where
	
c
L
H
L
H
k
v v
k
r
b
=
+
+
=
−1
2
2
(
)
/
	
	
	   Plots of the approximate solution yA(i) obtained in part (e) and the exact solution, 
Equation 6.174, are shown in Figure 6.15.
EXERCISES
	6.10	 In Example 6.5,
	
a.	 Find the analytical solution to the continuous-time model of Equation 6.155.
	
b.	 Write a program to numerically integrate the derivative function using RK-4 with adaptive 
control of step size. Compare your results with those in Tables 6.6 and 6.7.
	
c.	 Experiment with the tolerances used to establish the step size, and plot the results on the 
same graph with the analytical solution.
	
d.	 Is the tank initially in equilibrium? Explain. Find the constant flow in F1 for which the tank 
is in equilibrium when the height of water is 15 ft.
	
e.	 With 15 ft of water in the tank and equilibrium conditions established, the flow in is 
decreased by 50%. Simulate the response using RK-4 with step size control.
	
f.	 For the same conditions as in part (e), find the estimated and true local truncation errors 
resulting from the use of RK-4 numerical integration when the water level is 14.9 ft.
	
	 Hint: Find the actual time required for the tank level to reach 14.9 ft, and use that value as 
the initial integration step size.
Path of boat
5000
4500
4000
3500
3000
2500
2000
1500
1000
500
00
RK–Fehlberg: yA(i), i = 0, 1, 2, 3, ...
100
200
300
400
500
600
700
800
900
1000
Exact: y(x)
x (ft)
y (ft)
FIGURE 6.15  Simulated (RK–Fehlberg) and exact solutions for y(x) in boat crossing.

511
Intermediate Numerical Integration
	6.11	 In Example 6.6,
	
a.	 Find the analytical solution y = y(x) to Equation 6.173 repeated as follows:
	
d
d
y
x
H
y
L
x
v
v
H
y
L
x
r
b
=
−
−
−
+
−
−












1
2 1 2
/
	
		
Hint: Let ˆ
–
x
L
x
=
, ˆ
–
y
H
y
=
, introduce u
y x
= ˆ ˆ/ , and obtain an implicit solution of the sepa­
rable differential equation in u.
	
b.	 Compute the estimated and actual local truncation errors using RK-4 with interval halving 
to adjust the step size. Choose the initial step size T = 1 ft.
	6.12	 Find the trajectory of the boat in Example 6.6, assuming it is steered continuously at the des­
tination point (L, H), if the river current varies sinusoidally according to
	
v x
A
L x
x
L
r( )
sin
,
=
≤
≤
π
0
	
		
where A = 10 mph.
	6.13	 In the boat-crossing problem of Example 6.6, suppose the boat steering angle θ is an input to 
the continuous-time model.
	
a.	 Find the state derivative functions in dx/dt = f1(x, y, θ) and dy/dt = f2(x, y, θ).
	
	 For parts (b) through (d), find the analytical solution and check your answer using Simulink 
with the “ode45” solver.
	
b.	 The steering angle θ is held constant at the initial heading of the destination point, that is,
	
θ
θ
( )
,
t
H
L
t
=
=






≥
−
tan
1
0
	
	
	   Find the location of the boat when it reaches the other side. Use the values of vr, vb, L, and 
H from Example 6.6.
	
c.	 The captain wishes to cross the river and reach the opposite shore line at x = L, y = 0, 
which is directly across from where he started. Find the constant heading θ, which allows 
him to accomplish this. Assume the river current is constant at vr = 6 mph and the boat 
moves at a constant speed of vb = 24 mph. Plot the boat’s trajectory.
	
d.	 Make a plot of y(L) vs. θ for 0 ≤θ < π/2 where y(L) is the y coordinate of the location 
where the boat reaches the opposite side of the river. Assume vr = 10 mph and vb = 25 mph.
	
e.	 The captain observes a large fish swimming upstream at a constant speed of vf = 6 mph 
in the middle of the river (x = L/2). Starting from (0, 0), he begins to steer directly at the 
fish when it is directly across from him, that is, located at (L/2, 0). Find and plot the boat’s 
trajectory until it catches up with the fish if the river current is 0 mph and the boat speed is 
10 mph.
	6.14	 A hydraulic accumulator is shown in Figure E6.14. Its purpose is to damp fluctuations in the 
input flow rate f1(t) caused by pressure peaks upstream. The flow exits downstream of the 
accumulator through a linear resistance. The continuous-time model for the pressure p(t) in 
the accumulator section is (Palm 1983)
	
A
k
p
t
f
R p
p
2
1
0
1
d
d =
−
−
(
)
	

512
Simulation of Dynamic Systems with MATLAB® and Simulink®
		
where
	
	
A is the area of the accumulator plate
	
	
k is the spring constant
	
	
R is the fluid resistance
		
The input flow rate is given by
	
f t
t
t
t
t
1
3
3
3
0 01
0
0 05
0 01
0 01
0 01
( )
.
.
.
.
.
=
≤
< ≤
>


ft /s,
s
ft /s,
s
ft /s,
s



	
		
Numerical values of the system parameters are
	
A
ft
lb/ft
lb s/ft
lb/in
=
=
=
=
0 0055
30
10
14 7
2
5
2
0
2
.
,
,
,
.
.
k
R
p
	
		
The system is at steady state prior to the pulse input in flow.
	
a.	 Use the RK–Fehlberg integrator to simulate the transient response of p(t).
	
b.	 Find the analytical solution for p(t).
	
c.	 Find the solution for p(t) without the accumulator present.
	
d.	 Plot the responses from parts (a), (b), and (c) on the same graph.
	
e.	 Simulate the response for p(t) with Simulink using the “ode45” integrator, and compare the 
results with those in parts (a) and (b).
6.4  MULTISTEP METHODS
RK integrators were classified as one-step methods. The calculations for determining xA(i + 1), the 
approximate solution to the continuous-time model
	
d
d
x
t
f t x
=
( , )
	
(6.175)
at t = ti+1, relies on the previous estimate xA(i) and one or more derivative function evaluations on 
the interval ti ≤ t ≤ ti+1. The previous state estimate xA(i) is ignored once xA(i + 1) has been com­
puted. In contrast, multistep methods exploit knowledge of previous state estimates because they 
provide information about the local behavior of x(t) that can be used to advance the state.
Formulas for multistep methods are derived by integrating Equation 6.175 from ti to ti+1,
	
dx
f t x t
t
x t
x t
t
t
i
i
i
i
=
+
+
∫
∫
( )
(
)
[ , ( )]d
1
1
	
(6.176)
FIGURE E6.14 

513
Intermediate Numerical Integration
	
⇒
=
+
+
+
∫
x t
x t
f t x t
t
i
i
t
t
i
i
(
)
( )
[ , ( )]d
1
1
	
(6.177)
The integrand f [t, x(t)] is unknown since x(t) is the solution to Equation 6.175.
6.4.1  Explicit Methods
An mth-order interpolating polynomial Pm(t) that passes through the current derivative f[ti, xA(i)] 
and previous m derivatives f[ti−1, xA(i − 1)], f[ti−2, xA(i − 2)], …, f[ti−m, xA(i − m)] can be used to 
obtain an approximation of the integral in Equation 6.177 (see Figure 6.16). Replacing the integrand 
in Equation 6.177 by the interpolating polynomial Pm(t) gives
	
x
i
x
i
P t
t
A
A
m
t
t
i
i
(
)
( )
( )d
+
=
+
+
∫
1
1
	
(6.178)
where the approximations xA(i) and xA(i + 1) are used instead of x(ti) and x(ti+1), the actual points 
on the solution x(t). The integral in Equation 6.178 is equal to the shaded area under the polynomial 
Pm(t), which has been extrapolated over the current integration interval (ti, ti+1)
To illustrate, suppose the polynomial is the linear function passing through {ti−1, f[xA(i−1)]} and 
{ti, f[xA(i)]}. Then m = 1 and
	
P t
f t x
i
f t x
i
f t
x
i
t
t
i
A
i
A
i
A
i
i
1
1
1
1
( )
[ ,
( )]
[ ,
( )]
[
,
(
)]
=
+
−
−
−



−
−




−
(
)
t
ti
	
(6.179)
Integrating P1(t) and substituting the result in Equation 6.178 yield after simplifying
	
x
i
x
i
T
f t x
i
f t
x
i
A
A
i
A
i
A
(
)
( )
{
[ ,
( )]
[
,
(
)]}
+
=
+
−
−
−
1
2 3
1
1
	
(6.180)
The formula in Equation 6.180 is known as the two-step Adams–Bashforth (AB-2) method. 
“Two-step” refers to the use of two intervals, (ti−1, ti) and (ti, ti+1), to compute the new state xA(i + 1). 
Note that the method is explicit since xA(i + 1) does not appear on the right-hand side of Equation 
6.180.
The Taylor Series expansion of the derivative function f(t, x) leads to an alternative derivation of 
Equation 6.180, which also provides an expression for the local truncation error of the AB-2 integra­
tor. The Taylor Series expansion of x(t) about ti evaluated at ti+1 is given by
	
x t
x t
t x t
t
t
t x t
t
t
i
i
i
i
i
i
i
i
(
)
( )
( )(
)
( )(
)
+
+
+
=
+
−
+
−
+
1
1
2
2
1
2
1
2
d
d
d
d

	
(6.181)
	
=
+
+
+
x t
Tf t x t
T
t f t x t
i
i
i
i
i
( )
[ , ( )]
[ , ( )]
2
2
d
d

	
(6.182)
where T is the fixed-step size, that is, T = ti+1 − ti = ti − ti−1 = …. The Taylor Series expansion of 
the derivative function f(t, x) about ti evaluated at ti−1 is

514
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f t
x t
f t x t
t f t x t
t
t
t
i
i
i
i
i
i
i
i
[
, (
)]
[ , ( )]
[ , ( )](
)
−
−
−
=
+
−
+
1
1
1
2
1
2
d
d
d
d 2
1
2
f t x t
t
t
i
i
i
i
[ , ( )](
)
−−
+
	
(6.183)
	
=
−
+
+
f t x t
T
t f t x t
T
t
f t x t
i
i
i
i
i
i
[ , ( )]
[ , ( )]
[ , ( )]
d
d
d
d
2
2
2
2

	
(6.184)
Solving for T
t f t x t
i
i
d
d
[ , ( )] in Equation 6.184 and substituting into Equation 6.182 give
	
x t
x t
T
f
t x t
f t
x t
T
t
i
i
i
i
i
i
(
)
( )
{
[| , ( )]
[
, (
)]}
+
−
−
=
+
−
+
1
1
1
3
2
2
2 3
5
12
d
d
f t x t
i
i
[ , ( )]+
	
(6.185)
Truncating Equation 6.185 after the linear term and replacing x(ti−1), x(ti), x(ti+1) with xA(i−1), 
xA(i), xA(i + 1) lead to the AB-2 formula in Equation 6.180. Furthermore, since the first term omitted 
in Equation 6.185 is of order T3, the local truncation error εT ~ O(T3). The global truncation error 
ET, ~ O(T2) and AB-2 is said to be second-order accurate.
More accurate Adams–Bashforth integration formulas exist. It is simply a question of the num­
ber of points, that is, m + 1 in Figure 6.16, used to establish the interpolating polynomial Pm(t). 
Several higher-order AB integrators are listed as follows using the simpler notation fA(i) = f[ti, xA(i)], 
fA(i−1) =  f [ti−1, xA(i−1)], etc.
	
AB-3:
x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
(
)
( )
[
( )
(
)
(
)]
+
=
+
−
−
+
−
1
12 23
16
1
5
2
	
(6.186)
	
AB-4:
x
i
x
i
T
f
i
f
i
f
i
f
i
A
A
A
A
A
A
(
)
( )
[
( )
(
)
(
)
(
+
=
+
−
−
+
−
−
−
1
24 55
59
1
37
2
9
3)]
	
(6.187)
	
AB-5:
x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
(
)
( )
[
( )
(
)
(
)
+
=
+
−
−
+
−
−
1
720 1901
2774
1
2616
2
1274
3
251
4
f
i
f
i
A
A
(
)
(
)]
−
+
−
	
(6.188)
FIGURE 6.16  An mth-order interpolating polynomial for approximating integrand in Equation 6.177.

515
Intermediate Numerical Integration
Local truncation errors for AB integrators are obtained using the Taylor Series expansion 
approach illustrated for deriving the AB-2 formula. Truncating the respective series to obtain 
Equations 6.186 through 6.188 results in (
)
[ , ( )]
3 8
4
3
/
d
d
3
T
t
f t x t
i
i , (
)
[ , ( )]
251 720
5
4
4
/
d
d
T
t
f t x t
i
i , and 
(
)
[ , ( )]
475 1440
6
5
5
/
d
d
T
t
f t x t
i
i  as the first omitted terms in the AB-3, AB-4, and AB-5 formulas. The 
local and global truncation errors for the third-order accurate AB-3 integrator are ET ~ O(T 4) 
and ET ~ O(T3), respectively. An mth-order accurate AB-m integrator has a local truncation error 
ET ~ O(Tm+1) and global truncation error ET ~ O(Tm).
Both AB and RK integrators rely on a weighted sum of derivative function evaluations. In the case 
of one-step RK integration, the derivative function is evaluated numerous times over a single interval in 
contrast to the multistep AB integrators, which rely on derivative evaluations from previous intervals.
The mth-order accurate multistep integration formulas are more efficient than one-step methods 
of identical order because the same derivative function fA(i) is utilized m times for updating the state 
over m consecutive intervals. Another way of looking at it is only a single new derivative function 
evaluation fA(i) is required to advance the state from xA(i) to xA(i + 1). For example, suppose we have 
just determined the state xA(i) using AB-3 integration. Since fA(i−1) and fA(i−2) are still in memory, 
only fA(i) = f[ti, xA(i)] is needed to compute the new state xA(i + 1) in Equation 6.186.
Multistep methods are not self-starting. One approach is to utilize a one-step method for the 
first several integration steps before transitioning to a multistep formula. Alternatively, a one-step 
method followed by lower-order multistep methods can be used prior to implementing a specific 
multistep method. Once again, let us choose the AB-3 integrator for illustration purposes. From 
Equation 6.186 with i = 0, 1
	
x
x
T
f
f
f
A
A
A
A
A
( )
( )
[
( )
(
)
(
)]
1
0
12 23
0
16
1
5
2
=
+
−
−
+
−
	
(6.189)
	
x
x
T
f
f
f
A
A
A
A
A
( )
( )
[
( )
( )
(
)]
2
1
12 23
1
16
0
5
1
=
+
−
+
−
	
(6.190)
It is impossible to know fA(−1) and fA(−2) without knowing x(−T) and x(−2T). Hence, two inte­
grations are performed using a one-step method starting from the known initial point [0, x(0)] to 
determine xA(1) and xA(2). Subsequent state estimates xA(3), xA(4), … are computed from the AB-3 
formula. The “weakest link in the chain” argument dictates the choice of an appropriate one-step 
method to initiate the numerical solution. In other words, for a third-order accurate AB-3 integrator 
with local truncation error εT ∼ O(T 4), a third-order accurate RK-3 integrator with comparable local 
truncation error εT ∼ O(T 4) is used.
In the second approach, a third-order accurate one-step method can be used to find xA(1) ­followed 
by the second-order accurate multistep AB-2 integrator to determine xA (2) before switching to 
AB-3 integration. The first approach is preferred since the AB-2 integrator degrades the accuracy 
of the numerical solution.
The difference equations for AB-2, AB-3, and so forth are higher order than the first-order 
differential equation of the continuous-time system given in Equation 6.175. In other words, the 
resulting discrete-time systems for approximating the first-order continuous-time system dynamics 
have two or more discrete-time states depending on the order of the AB integrator used. Later, in 
Chapter 8, we shall see that there is a penalty for implementing higher order (and hence more accu­
rate) ­multistep integrators to simulate linear continuous-time systems. The penalty takes the form of 
a constraint imposed on the integration step size in order to assure a stable simulation.
6.4.2  Implicit Methods
Equations 6.180 and 6.186 through 6.188 are explicit methods since all the terms on the right-hand 
side have already been computed. There are, however, compelling reasons for using the derivatives 

516
Simulation of Dynamic Systems with MATLAB® and Simulink®
f[ti+1, xA(i + 1)], f[ti, xA(i)], f[ti−1, xA(i − 1), …, f[ti−m+1, xA(i − m + 1)] instead of f[ti, xA(i)], f[ti−1, 
xA(i − 1)], f [ti−2, xA(i − 2)], …, f [ti−m, xA(i − m)] (see Figure 6.16) to determine the mth order inter­
polating polynomial Pm(t). Since our objective is to compute xA(i + 1), the eventual difference equa­
tion will be implicit, that is, xA(i + 1) will appear on both sides of Equation 6.178.
Using the implicit form in Equation 6.178 yields formulas for the Adams–Moulton implicit 
numerical integrators given in Equations 6.191 through 6.194.
	
AM- :2
1
2
1
x
i
x
i
T f
i
f
i
A
A
A
A
(
)
( )
[
(
)
( )]
+
=
+
+
+
	
(6.191)
	
AM-3:
x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
(
)
( )
[
(
)
( )
(
)]
+
=
+
+
+
−
−
1
12 5
1
8
1
	
(6.192)
	
AM-4:
x
i
x
i
T
f
i
f
i
f
i
f
i
A
A
A
A
A
A
(
)
( )
[
(
)
( )
(
)
(
)]
+
=
+
+
+
−
−
+
−
1
24 9
1
19
5
1
2
	
(6.193)
	
AM-5:
x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
(
)
( )
[
(
)
( )
(
)
+
=
+
+
+
−
−
+
1
720 251
1
646
246
1
106 f
i
f
i
A
A
(
)
(
)]
−
−
−
2
19
3
	
(6.194)
Note that the AM-2 integration formula is the implicit trapezoidal integrator introduced in 
Section 3.4. If the system model is linear, fA(i + 1) is a linear function of xA(i + 1), and an explicit 
solution for xA(i + 1) in Equations 6.191 through 6.194 is possible. In general, implicit equations are 
solved in iterative fashion by numerical methods.
AB-m and AM-m integrators are both mth-order accurate. However, the local truncation error εT 
for the implicit AM-m integrator is less than the comparable explicit AB-m integrator (see Table 6.9). 
The local truncation errors cannot actually be calculated because the value of ˆti is unknown except 
for t
t
t
i
i
a
i
≤≤
+
ˆ
1 .
Multistep methods are not well suited for adaptively changing the step size based on the esti­
mated local truncation error. With a change in step size from xA(i) to xA(i + 1), some or all of the past 
values [xA(i), fA(i)], [xA(i − 1), fA(i − 1)], …, [xA(i − m), fA(i − m)] can no longer be used, defeating 
the essential reason for using a multistep method in the first place. The use of multistep integration 
methods is demonstrated in Example 6.7.
TABLE 6.9
Local Truncation Errors for AB-m, AM-m Integrators (m = 2, 3, 4, 5)
Local Truncation Error, εT
Local Truncation Error, εT
AB-2
5
12
3
2
2
T
t
f t x t
i
i
d
d
[ , ( )]


AM-2
−1
12
3
2
2
T
t
f t x t
i
i
d
d
[ , ( )]


AB-3
3
8
4
3
3
T
t
f t x t
i
i
d
d
[ , ( )]


AM-3
−1
24
4
3
3
T
t
f t x t
i
i
d
d
[ , ( )]


AB-4
251
720
5
4
4
T
t
f t x t
i
i
d
d
[ , ( )]


AM-4
−19
720
5
4
4
T
t
f t x t
i
i
d
d
[ , ( )]


AB-5
475
1440
6
5
5
T
t
f t x t
i
i
d
d
[ , ( )]


AM-5
−27
1440
6
5
5
T
t
f t x t
i
i
d
d
[ , ( )]



517
Intermediate Numerical Integration
EXAMPLE 6.7
The dynamics of a tumor growth is described by the first-order differential equation as follows 
(Braun 1978):
	
d
d
e
t V t
V t
t
( )
( )
=
−
λ
α
	
(6.195)
	
a.	Find the difference equations for approximate tumor growth VA(i), i = 1, 2, 3, …  using 
AB-2 and AM-3 integrators.
	
b.	Find the analytical solution V(t) to Equation 6.195.
	
	 The model parameters are λ = 0.2 new cells per cell per week and α = 0.02 per week. 
A tumor initially contains one thousand cells.
	
c.	Compare results from the exact solution and approximate solutions with a step size of 
T = 0.25 week. Plot the approximate and exact solutions on the same graph.
	
a.	Combining the derivative function
	
f i
f t V i
e
V i
A
i
A
t
A
i
(
[
( ]
(
)
,
)
)
=
= λ
α
−
	
(6.196)
	
	 with the AB-2 integrator of Equation 6.180, that is,
	
V i
V i
T
f i
f i
A
A
A
A
(
)
( )
[
( )
(
)]
+
=
+
−
−
1
2 3
1
	
	
	 yields the second-order difference equation
	
V i
V i
T
V i
V i
A
A
t
A
t
A
i
i
(
)
( )
[
( )
(
)
+
=
+
−
−
−
−
−
1
2 3
1
1
λ
λ
e
e
α
α
	
(6.197)
	
=
+






−
−
=
−
−
−
1
3
2
1
2
1
1
λ
λ
Te
V i
Te
V i
i
iT
A
i
T
A
α
α
( )
(
),
(
)
1, 2, 3, …
	
(6.198)
	
	   Repeating the steps for the AM-2 integrator, Equation 6.191 yields the implicit form of 
the difference equation, that is,
	
V i
T
V i
T
V i
A
i
T
A
iT
A
(
)
(
)
( )
)
+
=
+
+
+






−
−
+
−
1
5
12
1
1
8
2
1
λ
λ
e
e
(
α
α
λ
α
T
V i
i
T
A
e−
−
(
)
( )
1
	
(6.199)
	
	   Solving for VA(i + 1) in Equation 6.199 produces the explicit form,
	
V i
T
T
V i
A
iT
i
T
A
(
)
(
)
(
)
( )
( /
)
+
=
+
−






−
−
−
+
1
1
2 3
1
5 12
1
1
/
e
/
e
(
λ
λ
α
α
12
1
5 12
1
1 2
1
1
)
(
)
(
),
, ,
)
)
λ
λ
T
T
V i
i
i
T
i
T
A
e
/
e
  
(
(
−
−
−
+
−






−
=
α
α
…
	
(6.200)
	
	   Note that the discrete-time system models, Equations 6.198 and 6.200, are time-vary­
ing due to the appearance of the discrete-time variable “i” in the coefficients of VA(i) 
and VA(i − 1). This is expected since the continuous-time model, Equation 6.195 is time-
varying as a result of the e−αt term in the coefficient of V(t).
	
b.	The exact solution is obtained by separating the differential equation, Equation 6.195, 
and integrating from t = 0, V = V0 where V0 is the initial volume of cells.
	
d
e
d
V
V
t
v
v
t
t
=
∫
∫
−
0
0
λ
α
	
(6.201)

518
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
=
−−
V
at
( )
(
)(
e
)
t
V0e λ/α 1
	
(6.202)
	
c.	The AB-2 and AM-3 integrators require a single integration step using a one-step method 
to provide a starting value for VA(1). Ordinarily, an RK-2 one-step integrator would be 
used for the first step with the AB-2 and AM-3 multistep integrators. In lieu of that, we 
shall use the exact solution to generate VA(1) and leave the use of one-step methods to 
start the solution process as an exercise.
From the initial condition and Equation 6.202, the starting values for the AB-2 and AM-3 inte­
grators are VA(0) = 1000, VA(1) = 1051.14.
Plots of the exact solution for tumor growth and every 50th discrete-time output of the AB-2 
and AM-3 integrators are shown in Figure 6.17. Based on comparison with the exact solution of 
the continuous-time model, both integrators appear to predict cell growth exceptionally well (see 
“Ch6_Ex6_7.m”).
  The limiting value of tumor size V(∞) occurs when the growth rate (1/V)(dV/dt) approaches zero. 
This limit cannot be obtained from the continuous-time model by setting the derivative to zero 
as in the case of logistic growth (see Section 1.5). However, it is possible to compute V(∞) as the 
limiting value of the exact solution, that is,
	
V
V
V
t
t
(
)
lim
(
)(
e
)
∞=
=
→∞
−−
0
1
e
e
λ α
λ α
α
/
/
0
	
(6.203)
Substituting the value of VA(0) for V0 along with the given values for λ and α gives V(∞) = 
1000e0.2/0.002 = 2.203 × 107 in agreement with the plots in Figure 6.17.
6.4.3  Predictor–Corrector Methods
Generally speaking, implicit methods are more accurate than explicit methods of the same order. In 
all but the simplest cases, the solution requires an iterative root-solving scheme, which can wreak 
havoc on the computational efficiency of the implicit integrator. Fortunately, a solution to the prob­
lem exists, although with a slight trade-off in the number of required derivative function evaluations.
0
50
2
×107
Tumor growth, exact and AB-2
Tumor growth, exact and AM-3
×107
1
0
2
1
0
100
150
200
Number of cells
Number of cells
250
t (weeks)
300
Exact: V(t)
AB-2: VA(i), i = 0, 50, 100, ...
Note: VA(1) for AB-2 from exact solution
T = 0.25 weeks
Exact: V(t)
AB-3: VA(i), i = 0, 50, 100, ...
Note: VA(1) for AB-3 from exact solution
T = 0.25 weeks
350
400
450
500
0
50
100
150
200
250
300
350
400
450
500
FIGURE 6.17  Tumor growth—exact solution, AB-2 and AM-3 integrators.

519
Intermediate Numerical Integration
The alternative approach is to employ an explicit method to predict the new state followed by 
an implicit method using the predicted state on the right-hand side of the equation. This eliminates 
the primary obstacle of implicit methods, namely, a nonlinear algebraic equation with the unknown 
updated state on both sides. The combination of explicit and implicit numerical integration is called 
a predictor–corrector method.
If this sounds familiar, it is because we have already implemented a simple predictor–corrector 
method in Section 3.6, namely, the improved Euler or Heun’s method. In that case, the predictor is 
the first-order explicit Euler integrator, and the corrector is the second-order trapezoidal integra­
tor. The common practice is to combine explicit Adams–Bashforth and implicit Adams–Moulton 
integrators of the same order. Integration formulas for several of these predictor–corrector combina­
tions are
	
AB-  predictor:
2
1
2 3
1
ˆ (
)
( )
{
[ ,
( )]
[
,
(
x
i
x
i
T
f t x
i
f t
x
i
A
A
i
A
i
A
+
=
+
−
−
−
1)]}
	
(6.204)
	
AM-  corrector:
2
1
2
1
x
i
x
i
T
f
i
f
i
A
A
A
A
(
)
( )
[
(
)
( )]
+
=
+
+
+

	
(6.205)
where ˆ (
)
ˆ
fA i
f t
x
i
i
A
+
=
1
[
,
(
1)]
1
+
+
 is the derivative based on the predicted state ˆx
i
A(
1)]
+
.
	
AB-3 predictor: ˆ (
)
( )
[
( )
(
)
(
x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
+
=
+
−
−
+
−
1
12 23
16
1
5
2)]
	
(6.206)
	
AM-3 corrector: x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
(
)
( )
[
(
)
( )
(
)]
+
=
+
+
+
−
−
1
12 5
1
8
1

	
(6.207)
	
AB-4 predictor: ˆ (
)
( )
[
( )
(
)
(
x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
+
=
+
−
−
+
1
24 55
59
1
37
−
−
−
2
9
3
)
(
)]
f
i
A
	
(6.208)
	
AB-4 corrector: x
i
x
i
T
f
i
f
i
f
i
A
A
A
A
A
(
)
( )
[
(
)
( )
(
)
+
=
+
+
+
+
−
1
24 9
1
19
5
1 ++
−
f
i
A(
)]
2

	
(6.209)
It should be noted that some authors refer to the implicit numerical integrators in Equations 
6.191 through 6.194 as Adams integrators and the predictor–corrector formulas in Equations 6.204 
through 6.209 as Adams–Moulton integration formulas.
In certain applications, it may be desirable to execute several iterations of the corrector equa­
tion before advancing to the next integration step. In other words, corrected values are continu­
ally inserted on the right-hand side of the corrector equation until some threshold or tolerance is 
attained, resulting in improved estimates of the new state. In general, it is inadvisable to execute the 
corrector equation more than once or twice due to the additional derivative function calculations 
required. When the corrector equation is implemented only once, predictor–corrector integration 
formulas are examples of a two-pass (one for the predictor and one for the corrector) approach to 
updating the discrete-time state. There are no implicit equations to solve.
When the order of the predictor and corrector is the same, the combined predictor–corrector 
integration formula is also of that order. Furthermore, the truncation errors (local and global) are the 
same as those of the more accurate implicit corrector (see Table 6.9). Combining same order predic­
tor and corrector makes it possible to estimate the local truncation error after each step (Ralston and 
Wilf 1965) based on the predicted and corrected states with virtually no computational overhead. 

520
Simulation of Dynamic Systems with MATLAB® and Simulink®
This permits the step size to be changed in an adaptive fashion. Of course, repeatedly changing the 
step size with a multistep integration method is counterproductive.
The stability of numerical integration methods refers to the sequence of numerical values com­
puted for the discrete-time states when simulating a stable continuous-time system. We shall learn 
in Chapter 8 that explicit multistep methods exhibit poorer stability characteristics compared with 
implicit methods. Suffice it to say for now that the higher-order AB multistep integrators are prone 
to instability. This is mitigated to some extent by the choice of step size. However, reducing the step 
size to combat the problem adversely impacts computational efficiency reflected in the total number 
of derivative function evaluations required to simulate the system.
EXAMPLE 6.8
A manufacturer of high-end luxury automobiles has determined that the monthly demand for its 
cars follows an inverse price relationship, that is,
	
d p
a p
p
( )
,
=






>
1
0
	
(6.210)
where
p is the base price of a single vehicle
d is the monthly demand
a is a constant
The number of vehicles produced by the manufacturer is based on the fluctuating price. 
Suppose the monthly supply of vehicles (up to some limit) is related to price by
	
s p
bp
p
( )
,
/
=
>
1 2
0 	
(6.211)
where
s is the monthly production
b is another constant
Furthermore, assume the actual price is governed by supply and demand according to
	
d
d
  
p
t
K d p
s p
p
=
−
>
[ ( )
( )],
0
	
(6.212)
	
=





−






K a p
bp
1
1 2
/
	
(6.213)
where K is also a constant.
Several months ago when the price was $200,000, 16 cars were sold. The car maker would 
produce 25 vehicles per month if the vehicle price were $250,000. The current price is $180,000.
The numerical value of K is $2000 per vehicle.
	
a.	Use an AB-4/AM-4 predictor–corrector with step size T = 0.5 month to find the response 
of the price. Generate the required starting values from an RK-4 integrator.
	
b.	Simulate the response in part (a) using RK-4 with step size sufficiently small to approxi­
mate the exact response. Graph the simulated and “exact” response.
	
a.	The MATLAB file to compute the RK-4 starting values and implement AB-4/AM-4 pre­
dictor–corrector integration is “Ch6_Ex6_8.m.” Using the classic RK-4 integrator with 

521
Intermediate Numerical Integration
step size T = 0.5 month, the following values were obtained to start the AB-4/AM-4 
predictor–corrector:
	
p
p
A
A
( )
( )
$
,
,
,
.
0
180 000
1
176 823 92
=
=
	
	
p
p
A
A
(
(
)
$
,
.
,
)
$
,
.
2
174 122 06
3
171832 02
=
=
	
	
b.	Basing the exact solution p(t) on RK-4 with T = 0.01 months produced the results in 
Table 6.10 and plotted in Figure 6.18. Values from the simulated response pA(i) are also 
tabulated in Table 6.10 and plotted in Figure 6.18. According to the graphs, the transient 
period for the price to reach equilibrium is approximately 15 months. The equilibrium 
point is easily obtained from Equation 6.213, that is,
	
0
1
1 2
=
∞





−
∞






K a p
bp
(
)
(
)
/
	
(6.214)
0
1.8
×105
Price of luxury automobiles vs. time
p(t)
pA(i)
1.78
1.76
1.74
1.72
1.7
1.68
1.66
Car price ($)
1.64
1.62
1.6
1
2
3
4
5
6
7
t (months)
8
9
10
11
12
13
14
15
FIGURE 6.18  Price response pA(i) from AB-4/AM-4 (T = 0.25 months) and “Exact” p(t) based on RK-4 
(T = 0.01 months).
TABLE 6.10
pA(i) from AB-4/AM-4 Integration Using RK-4 Starting Values with T = 0.5 Months and 
Exact Solution p(t) Approximated by RK-4 with T = 0.01 Months
i
ti, Months
pA(i), $
p(ti), $
i
ti, Months
pA(i), $
p(ti), $
0
0
180,000.00
180,000.00
16
8
161,086.76
161,086.85
2
1
174,122.06
174,122.02
18
9
160,748.08
160,748.17
4
2
169,897.30
169,897.25
20
10
160,514.70
160,514.77
6
3
166,897.64
166,897.62
22
11
160,354.00
160,354.06
8
4
164,787.43
164,787.46
24
12
160,243.42
160,243.47
10
5
163,313.01
163,313.07
26
13
160,167.36
160,167.39
12
6
162,287.89
162,287.97
28
14
160,115.05
160,115.08
14
7
161,577.64
161,577.73
30
15
160,079.08
160,079.10

522
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
∞= 





= 





=
p
a
b
(
)
,
,
.
$
,
/
/
2 3
2 3
3 200 000
0 05
160 0000
	
(6.215)
	
	 in agreement with the value shown in Figure 6.18.
EXERCISES
	6.15	 Rework Example 6.7 using RK-2 to find the starting value VA(1) for the AB-2 and AM-3 inte­
grators, respectively. Comment on the results.
	6.16	 Rework Example 6.7 with step size T = 2 weeks using an RK-4 method to find the starting 
values VA(1), VA(2), and VA(3) for the AB-4 and AM-4 integrators. Comment on the results.
	6.17	 Show that the equilibrium price in Example 6.8 is stable by choosing initial prices slightly 
less and slightly greater than p(∞) and observing the transient price responses. Use a suitable 
numerical integrator to obtain the transient response.
	6.18	 An unforced continuous-time system is described by the first-order differential equation 
(t + 1) (dx/dt) + x = 0. An AB-2 numerical integrator with step size T is used to simulate the 
response of the system with initial condition x(0) = 1.
	
a.	 The difference equation for updating the discrete-time state xA(n) is
	
x
n
x
n
x
n
n
A
A
A
(
)
(
(
)
)
,
, , ,
+
=
+
−
=
1
1
1 2 3
0
1
α
α
…	
	
	 Express α0 and α1 in terms of the step size T and discrete-time variable n.
	
b.	 Use an RK-2 integrator with step size T = 0.1 s to find xA(1), the starting value needed for 
the AB-2 integration.
	
c.	 Use the AB-2 integrator to find xA(2).
	
d.	 Compare the approximate values xA(2), xA(3), …, xA(10) with the exact values x(0.2), 
x(0.3), …, x(1). Note that the exact solution is given by x(t) = 1/(t + 1).
	6.19	 A double integrator is shown in Figure E6.19. Initial conditions are x(0) = y(0) = 0.
	
a.	 Find the discrete-time system approximation (difference equation) of the first integrator using 
explicit Euler integration with step size T. Denote the input as u(n) and the output as xA(n).
	
b.	 The input is a unit step u(t) = 1, t ≥ 0. Find xA(1), xA(2), and xA(3). Leave your answers in 
terms of T.
	
c.	 Find the general solution for xA(n).
	
d.	 Show that the local truncation error (εT)n = xA(n)−x(nT) = 0, n = 0, 1, 2, 3, …. Comment 
on the result, that is, explain why the discrete-time output xA(n) is identical with the contin­
uous-time output at the end of each integration step.
	
e.	 Find the discrete-time system approximation (difference equation) of the second integrator 
using explicit Euler integration with step size T. Denote the input as xA(n) and the output as 
yA(n).
	
f.	 Find yA(1), yA(2), yA(3), yA(4), and yA(5). Leave your answers in terms of T.
	
g.	 The general solution for the output yA(n) is
	
y
n
an
bn
c T
n
A(
(
)
)
,
, , , ,
=
+
+
=
2
2
0 1 2 3 … 	
	
	   Find the numerical values of the constants a, b, and c.
FIGURE E6.19 

523
Intermediate Numerical Integration
	
h.	 Find the differential equation relating the output y(t) and input u(t).
	
i.	 Find the local truncation error (εT)n = yA(n)−y(nT).
6.5  STIFF SYSTEMS
Linear time-invariant models of dynamic systems are termed “stiff” when the time constants, or 
more specifically the characteristic roots (eigenvalues of the system matrix A), vary significantly 
in magnitude. For nonlinear system models, the concept applies to the characteristic roots of a 
linearized model that represents the dynamics of the nonlinear system in some operating region. 
Linearization of nonlinear systems is discussed in Chapter 7.
Systems tend to be stiff for a number of reasons. Mechanical systems composed of stiff and soft 
components exhibit resonant frequencies that differ greatly in magnitude. The natural response of 
certain electrical networks contains spikes, which die out rapidly in comparison to terms with far 
slower dynamics. Control system components such as controllers, actuators, and sensors oftentimes 
respond much quicker than the plant or process being controlled.
Figure 6.19a and b contain s-plane pole plots corresponding to stiff systems, and Figure 6.19c is 
a pole plot of a fast system, but not stiff. The stiffness can be quantified by the ratio of the largest (in 
magnitude) to the smallest characteristic root.
Stiff systems impose requirements on numerical integrators, in particular explicit methods, 
which can result in exceedingly small integration steps to assure the result is a stable solution. 
Numerical stability is considered in some detail in Chapter 8. For the present time, we can think of 
numerical stability as a property of numerical integration, which implies that a stable discrete-time 
system will result whenever the continuous-time system model is stable.
Suppose the fast pole in Figure 6.19a, the pole furthest from the imaginary axis, is designated 
s1 and the slower poles are s2 and s3, s4 = −ζωn, ± jωd. The natural response consists of a lin­
ear combination of the real modes es t
1 , es t
2 and the oscillatory modes e
sin
−ζωnt
dt
ω , e−ζωnt
dt
cosω . 
That is,
	
x
t
c
c
t
A
t
nat
s t
s t
t
d
d
n
( )
[
sin
cos
]
=
+
+
+
−
1
2
1
2
e
e
e
2
ζω
ω
ω
A1
	
(6.216)
The transient response of the system with poles in Figure 6.19a is of the same form as the nat­
ural response in Equation 6.216. Due to the inherent stiffness of the system, the time constant 
τ1 = −1/s1 is considerably shorter than either τ2 = −1/s2 or τ = 1/ζωn, the effective time constant of 
the damped oscillations. Hence, the fast component c
s t
1
1
e  vanishes well before the remaining terms. 
However, the numerical stability of fixed-step explicit integrators is controlled by the fast mode, 
requiring the use of a far smaller integration step than would be necessary in the absence of the fast 
characteristic root s1.
Integration formulas have been developed specifically for stiff systems. References by Gear 
(1971) and Hartley (1994) contain excellent descriptions of specific “stiff” integrators. MATLAB 
FIGURE 6.19  s-Plane location of characteristic roots for stiff system (a), (b), and nonstiff system (c).

524
Simulation of Dynamic Systems with MATLAB® and Simulink®
and Simulink offer a choice of one-step and multistep integrators designed for efficient simulation 
of stiff systems.
6.5.1  Stiffness Property in First-Order System
Before we illustrate an example of a stiff system, it should be mentioned that the “stiffness” prop­
erty can be present in a forced system with only a single state variable, that is, a system with a single 
characteristic root or eigenvalue modeled by a linear first-order differential equation. The basic 
requirement is merely the existence of two or more terms in the response with markedly different 
time constants. Consider the simple forced mechanical system shown in Figure 6.20.
Assuming that the mass M is negligible leads to the continuous-time model,
	
B t x t
Kx t
F t
d
d
( )
( )
( )
+
=
	
(6.217)
The state derivative function is
	
f x
t x t
K F
x
( )
( )
=
=
−






d
d
1 1
τ
	
(6.218)
where τ = B/K is the first-order system time constant.
Suppose the forcing function F(t) is an ideal step input whose amplitude is numerically equal 
to the spring constant K, that is, F(t) = K, t ≥ 0. Because a step input is physically impossible, it is 
approximated by ˆ( )
F t
	
ˆ
–
,
(
)
/
F t
K
t
t
F
( )=
≥
−
 
 1
0
e
τ
	
(6.219)
where τF is the time constant of the exponential rise. From the system’s perspective, ˆ(t)
F
 will look 
like a step input provided its rise time is several orders of magnitude less than τ, the system time 
constant.
Analytical solutions for the state x(t) based on the ideal step input F(t) of magnitude K and the 
approximation in Equation 6.219 are easily obtained by the use of Laplace transforms. Laplace 
transforming Equation 6.217 and solving for X(s) give
	
X s
s
K F s
( )
( )
=
+






1
1
1
τ
	
(6.220)
FIGURE 6.20  Simple mechanical system.

525
Intermediate Numerical Integration
The Laplace transform of the state response to an ideal step input of magnitude K is therefore
	
X s
s
K
K
s
s
s
( ) =
+
⋅





=
+






1
1
1
1
1
1
τ
τ
	
(6.221)
When the input ˆ( )
F t  is used, ˆ( )
F s  replaces F(s) in Equation 6.220, making the Laplace transform 
of the state response, denoted. ˆ( )
x t , equal to
	
ˆ( )
(
X s
s
K K s
s
s
s
s
F
F
F
=
+
⋅
−
+











=
+
+
1
1
1
1
1
1
1
1
1
τ
τ
τ
τ
τ
)






	
(6.222)
Inverse Laplace transformation of Equations 6.221 and 6.222 gives
	
x t
t
t
( )
,
/
= −
≥
−
1
0
e
τ
	
(6.223)
	
ˆ( )
,
(
)
/
/
x t
t
F
t
F
t
F
F
= −
−
−
(
)
≥
−
−
1
1
0
τ
τ
τ
τ
τ
τ
τ
τe
e

	
(6.224)
Note that the response ˆ( )
x t  consists of a fast and a slow component, that is,
	
ˆ( )
ˆ ( )
ˆ ( )
x t
x
t
x t
F
S
=
+
	
(6.225)
where
	
ˆ ( )
/
x
t
F
F
F
t
F
=
−
−
τ
τ
τ
τ
e
	
(6.226)
and
	
ˆ ( )
/
x t
S
F
t
= −
−
−
1
τ
τ
τ
τ
e
	
(6.227)
Simulation of the first-order system response to ˆ( )
F t  poses problems not previously encountered. 
To illustrate, consider the case when B = 1 and K = 10. The system time constant τ = B/K = 0.1 s. 
Suppose the fast component time constant τF in Equation 6.219 is chosen two orders of magnitude 
less than the system time constant, that is, τF = τ/100 = 0.001 s.
Dividing ˆ( )
F t  by K produces the exponential rise approximation to a unit step input shown in the 
upper left corner of Figure 6.21. The ideal unit step input and unit step response in Equation 6.223 
are shown in the lower left quadrant of Figure 6.21.
RK-4 integration was used to generate the simulated responses shown on the right side of Figure 
6.21. In the top right quadrant, the integration time step T was chosen to be an order of magni­
tude less than τF, that is, T = τF/10 = 0.0001 s, to guarantee accuracy of the simulation. Every 
150th point of the simulated response is plotted. The unit step response x(t) and the simulated step 
response are nearly identical at ti = iT, i = 0, 1, 2, ….
The integration step size T = 0.0001 s is a great deal smaller than would seem necessary for 
RK-4 integration of a first-order system with time constant τ = 0.1 s. Since the fast component. ˆ ( )
x
t
F
 
decays in 5τF = 5 × 0.001 = 0.005 s, an adaptive procedure can be employed, which increases the 
step size after the transient period of the fast component has elapsed.

526
Simulation of Dynamic Systems with MATLAB® and Simulink®
What do you suppose would happen if we tried a fixed-step RK-4 integrator with T, an order of 
magnitude smaller than the system time constant, that is, T = τ/10 = 0.01 s? To answer that ques­
tion, the simulation was rerun using RK-4 with T a little less than 0.01 s, namely, T = 0.0075 s. The 
simulated response (every other point) is shown in the lower right quadrant of Figure 6.21. It bears 
no resemblance to either x(t) or ˆ( )
x t .
Despite the gross inaccuracy, the numerical integrator is nonetheless stable as evidenced by 
the limiting value approaching the correct steady-state value of unity. Further increases in T will 
eventually result in an unstable response of the discrete-time system. The integration step size is 
therefore limited by the fast time constant τF.
This example illustrates how a first-order system appears to be stiff, despite the fact there is only 
a single state. The fast input component (τF = 0.001 s) in conjunction with the slower system natural 
mode (τ = 0.1 s) is responsible for this happening.
6.5.2  Stiff Second-Order System
A second-order system is stiff if it contains a “fast” and a “slow” natural mode. Consequently, for a 
second-order system to be inherently stiff, it must be overdamped. The second-order circuit shown 
in Figure 6.22 is stiff provided the circuit parameters produce a pair of real characteristic roots 
several orders of magnitude apart.
Compared with fixed-step-size numerical integrators, stiff integrators increase the step size after 
the fast transients decay to zero, reducing execution time significantly. The following example illus­
trates the use of one of Simulink’s stiff integrators.
EXAMPLE 6.9
In the circuit shown in Figure 6.22, after the capacitor has fully charged to the battery voltage v0, 
the switch disconnects the battery at t = 0, and the capacitor discharges its stored energy to the 
RLC circuit. The current i(t) satisfies the differential equation
1
0.8
0.6
0.4
0.2
0
0
1
2
t (s)
t (s)
Approximate unit
Step input
RK-4 response to
T = 0.0001 s
Ideal unit step
Unit step response and simulated (RK-4)
Response to approximate step input
1 F(t)
–K
Input 1 F(t)
–K
× 10–3
3
4
5
0
0.1
0.2
0.3
0.4
0.5
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
0
t (s)
t (s)
Unit step response, x(t)
RK-4 response to
T = 0.0075 s
Ideal unit step
Input 1 F(t)
–
∧
∧
∧
K
0
0.1
0.2
0.3
0.4
0.5
0
0.1
0.2
0.3
0.4
0.5
0
–4
–12
–16
–8
–20
0
FIGURE 6.21  Unit step response and simulated (RK-4) response to input (1/K) ˆ( )
F t .

527
Intermediate Numerical Integration
	
L
i
t
R
i
t
C i
v
v
i
c
d
d
d
d
2
0
1
0
0
0
0
+
+
=
=
=
( )
, ( )
	
(6.228)
	
a.	Represent the circuit in state variable form where x1 = i and x2 = di/dt.
	
b.	Show that the system is stiff when the circuit parameter values are R = 25 Ω, L = 20 mH, 
C = 200 mF, and v0 = 12 V.
	
c.	Simulate the transient response using a fixed-step RK-2 integrator, and determine the 
largest step size T, which yields a stable and accurate solution.
	
d.	Use one of the stiff numerical integrators available in Simulink to simulate the transient 
response.
	
e.	Find the analytical solution for the transient response, and compare the results of parts 
(c) and (d) with the exact solution.
	
a.	Derivation of the state equations is straightforward.
	
x
i
t
x
1
2
=
=
d
d
	
(6.229)
	


x
x
i
t
2
1
2
2
=
= d
d
	
(6.230)
	
=
−
−






1
1
L
C i
R
i
t
d
d
	
(6.231)
	
= −
−
1
1
2
LC x
R
L x
	
(6.232)
	
b.	The characteristic equation is |sI−A| = 0 where A is the system matrix in the state repre­
sentation x
Ax
=
. Thus,
	
sI
A
s
LC
R
L
−
=





−−
−






=
1
0
0
1
0
1
1
0
	
(6.233)
	
s
R
L s
LC
2
1
0
+
+
=
	
(6.234)
	
	   The characteristic roots are
	
s
R L
R L
LC
1 2
2
4 1
2
,
(
)
(
)
= −
±
−
/
/
/
	
(6.235)
FIGURE 6.22  A second-order RLC circuit.

528
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	 Substituting the given values for R, L, and C in Equation 6.235 yields a stiff system with 
characteristic roots s1 = −1249.8 rad/s and s2 = −0.2 rad/s.
	
c.	The Simulink model for the system is shown in Figure 6.23.
	
	 The natural modes are e
e
s t
t
1
1249 8
=
−
.  and e
e
s t
t
2
0 2
=
– . . Using Simulink’s RK-2 integra­
tor with different step sizes eventually produces a stable and accurate simulation with 
T = 0.0015 s. The discrete-time state x1,A(i) is plotted in the upper left graph of Figure 
6.24. It requires 16,663 steps to simulate the transient response, lasting approximately 
25 s. The first 41 points x1,A(i), i = 0, 1, 2, …, 40 are shown in Figure 6.24 and every 
500th point thereafter.
	
	   Increasing the step size T from 0.0015 s to 0.0016 s with RK-2 produces the graph 
of x1A(i) in the lower left corner of Figure 6.24. Every 500th point is plotted. While the 
FIGURE 6.23  Simulink model for RLC circuit.
0.5
0.4
0.3
0.2
0.1
0
0.5
0.4
0.3
0.2
0.1
0
0
5
10
15
20
25
0
5
10
15
20
25
0
–2
–4
–6
–8
–10
0
–2000
–4000
–6000
–8000
0
5
10
15
20
25
0
0.01
x1,A(i), i = 0, 1, 2, ...
x1,A, i = 0, 1, 40, 540, ...
i(t), t ≥ 0
x1,A(i), i = 0, 1, 2, ..., 72
i(t), t ≥ 0
x1,A(i), i = 0, 500, 1000, ...
RK-2 (T = 0.0016 s)
RK-2 (T = 0.0015 s)
RK-2 (T = 0.002 s)
Stiff integrator ode23s
× 10–14
0.02
0.03
0.04
t (s)
t (s)
FIGURE 6.24  RK-2 integration with step sizes T = 0.0015, 0.0016, 0.002 s, stiff integrator “ode23s” and 
exact solution for current i(t).

529
Intermediate Numerical Integration
response is stable, that is, limi→∞ x1,A(i) = 0, it is clearly inaccurate. The graph in the lower 
right quadrant contains the first 0.04 s of the discrete-time state x1,A(i) when the RK-2 inte­
gration step size is 0.002 s. In this case, the discrete-time system is unstable with the simu­
lated response becoming increasingly more negative (approaching −∞) as time increases.
	
d.	Choosing the “ode23s” stiff integrator produces the response shown in the upper right 
corner of Figure 6.24. It is similar in appearance to the graph obtained with RK-2 inte­
gration and step size T = 0.0015 s; however, the entire simulation required a total of 
72 steps. The improvement in efficiency compared to the RK-2 integrator is dramatic, 
that is, an average step size of 25/72 = 0.3472 s compared to 0.0015 s.
	
e.	The exact solution for i(t) is obtained by Laplace transformation of Equation 6. 228, that is,
	
L s I s
si
i
t
R sI s
i
C I s
2
0
0
0
1
0
( )
( )
( )
[ ( )
( )]
( )
−
−





+
−
+
=
d
d
	
(6.236)
	
I s
i
t
s
R L s
LC
( )
( )
(
)
)
=
+
+






d
d
/
/
0
1
1
2
	
(6.237)
Replacing the initial derivative (di/dt) (0) by vc(0)/L gives
	
i t
v
L
s
s
c
s t
s t
( )
( )
(e
e
)
=
−






−
0
1
1
2
1
2
	
(6.238)
where s1 and s2 are the characteristic roots found in Equation 6.235. Using the values for vc(0) = v0, 
L and the characteristic roots s1 and s2, the exact solution for i(t) is
	
i t
e
e
t
t
( )
(
)
.
.
.
=−
−
−
−
0 4802
1249 8
0 2 	
(6.239)
	
= – .
–
(
)
– / .
– /
0 4802
0 0008
5
e
e
t
t
	
(6.240)
The exact solution for i(t) is plotted on the graphs with the RK-2. (T = 0.0015 s) and “ode23s” 
responses. Both are in excellent agreement with the exact solution. Note the initial spike in i(t) from 
zero to approximately 0.48 amp. This results from the rapid decay of the fast mode e−1249.8t in the 
first 5 × 0.0008 = 0.004 s. After 0.004 s have elapsed, the response is essentially the slow compo­
nent 0.4802e−0.2t, which lasts for approximately 5 × 5 = 25 s.
Stiff integrators are designed to take smaller steps while the fast component of the transient 
response is decaying and then accelerate after the fast component has vanished. Figure 6.25 illus­
trates how the integrator “ode23s” creeps along for the first 20 or so steps and then ramps up 
for the last 52 integration steps. Indeed, after the first 21 steps, the simulation has progressed to 
0.03675 s with an average step size of 0.00175 s. The average step size over the final 51 steps is 
0.4894 s.
6.5.3  Approximating Stiff Systems with Lower-Order Nonstiff System Models
Stiff systems typically consist of components or subsystems that operate at significantly different speeds. 
For example, consider the control system shown in Figure 6.26 comprising a proportional controller, 
a second-order system, and a first-order sensor in the feedback loop. An additive disturbance or load 
component combines with the second-order system output to produce the complete output signal y(t).
The output Y(s) is expressed in terms of two transfer functions GR(s) and GD(s)
	
Y s
G
s R s
G
s D s
R
D
(
( ) (
(
( )
)
)
)
=
+
	
(6.241)

530
Simulation of Dynamic Systems with MATLAB® and Simulink®
where
     
G
s
Y s
R s
K K
s
s
s
s
R
D s
C
n
n
n
( )
( )
( )
(
)
(
)
( )
=
=
+
+
+
+
+
(
)
=0
3
2
2
1
1
2
2
τ
τ
ζω τ
ζω
ω τ
+
+
ωn
C
S
K KK
2
	
(6.242)
and
	
G
s
Y s
D s
K
s
s
s
D
R s
L
n
n
n
n
( )
( )
( )
[
(
)
]
( )
=
=
+
+
+
+
(
) +
=0
3
2
2
2
1
2
2
τ
ω τ
ω
ω τ
ω
τ
ζ
ζ
s
s
s
K KK
n
n
n
n
C
S
3
2
2
2
1
2
2
+
+
+
+
(
) +
+
(
)
ζ
ζ
ω τ
ω
ω τ
ω
	
(6.243)
The sensor dynamics are considerably faster than those of the second-order plant, a common 
situation in control systems. Suppose the numerical values of the system parameters are KC = 2, 
K = 5, ζ = 0.7, ωn = 1.5 rad/s, KS = 0.75, τ = 0.00125 s, and KL = 3. The characteristic polynomial 
of the third-order system is
	
∆( )s
s
s
K KK
n
n
n
n
C
S
=
+
+
+
(
)
+(
+
 
 
 
τ
ζ
τ
ζ
τ
ω
ω
ω
ω
3
2
2
2
1
2
2
s
)
	
(6.244)
0.5
0.4
0.3
0.2
0.1
0
0
10
20
30
40
Step number
Stiﬀ integrator “ode23s” step sizes
Step size
t = 0.0368 s
t = 0.1529 s
t = 25 s
t = 24.6490 s
t = 0.6528 s
50
60
70
80
FIGURE 6.25  Step size vs. step number for “ode23s” integrator in Example 6.9.
FIGURE 6.26  A stiff system with fast and slow components.

531
Intermediate Numerical Integration
Substituting the given values of the system parameters into Equation 6.244 and using the 
MATLAB function “roots” to find the characteristic roots (poles) of the closed-loop control system 
result in p1 = −800.01, p2,3 = −1.0453 ± j2.9423. The stiffness ratio is
	
stiffness =
=
−
−
+
=
p
p
j
1
2
800 01
1 0453
2 9423
256 21
.
.
.
.
	
(6.245)
indicating a moderately stiff system. A Simulink diagram of the system is shown in Figure 6.27. 
Both reference input and disturbance inputs are accounted for.
The simulated response to a unit step input r(t) = 1, t ≥ 0 is to be obtained using RK-4 integra­
tion. Analytical methods exist to compute the largest value of step size T, which results in a stable 
simulation; however, they are deferred until Chapter 8. Trial and error with different values of T 
produced the responses shown in Figure 6.28.
The correct step response is shown on top, whereas the one on the bottom is the result of numeri­
cal instability of the RK-4 integrator at the larger step size of T = 0.0035 s. The results are typical 
of what happens when a numerical integrator becomes unstable, that is, the simulated results may 
be quite accurate and suddenly become useless as the integration step size is increased by a slight 
FIGURE 6.27  Simulink diagram for simulating stiff control system dynamics.
1.5
0.5
y(t)
0
0
0.5
1.5
2
2.5
RK-4 with T = 0.0034 s
Step response of stiff third-order system
3
3.5
4
4.5
5
1
1
10000
5000
y(t)
t (s)
0
0
0.5
1.5
2
2.5
RK-4 with T = 0.0035 s
Step response of stiff third-order system
3
3.5
4
4.5
5
1
FIGURE 6.28  Stable and unstable simulated responses using RK-4 integration.

532
Simulation of Dynamic Systems with MATLAB® and Simulink®
amount. Try modifying the Simulink model “stiff_approx_1.mdl” to allow a disturbance step input 
or simply make one of the initial conditions nonzero and look at the natural response. In either case, 
a step size of T = 0.0034 s produces a stable output and T = 0.0035 s does not.
The stiffness is attributable to the disparity in the time constant of the sensor and the effective 
time constant of the second-order system. The question that naturally arises is “What happens if the 
sensor dynamics are ignored, that is, the sensor responds instantaneously to its inputs?” The charac­
teristic polynomial in Equation 6.244 becomes second order when the sensor time constant τ is set 
to zero. The control system is underdamped with a pair of complex poles, −1.50 ± j2.9407, nearly 
identical to the complex poles of the third-order control system with sensor time constant included. 
The system is no longer stiff and a larger value of T can be used for RK-4 simulation.
Step responses of the original third-order control system and the reduced second-order system 
are generated in the MATLAB script file “Ch6_stiffsys_approx.m,” which calls the Simulink 
model “stiff_approx_2.mdl” shown in Figure 6.29. Both systems are simulated concurrently using 
RK-4 integration with step size T = 0.001 s.
The plant output y(t) and sensor output x(t) for the third-order control system with the sensor dynam­
ics included and second-order control system with sensor approximated as a pure gain are shown in 
Figure 6.30. There is no noticeable difference in y(t) or x(t) for the second- and third-order systems.
The second-order system was simulated to determine how large the step size could be without 
concern for numerical instability of the RK-4 integrator. The reader should verify that step sizes up 
to approximately T = 0.2 s produce accurate (and therefore stable) results. This represents a ­sizable 
reduction in execution time, a speedup of roughly 0.2/0.0034 ≈ 59 times. Chapter 8 includes a 
­discussion on how to find the limiting value of T precisely.
Consider the load transfer function GD(s) in Equation 6.243 for the case when τ = 0.00125 s and 
when τ = 0. Putting GD(s) in pole-zero form,
	
G
s
b s
b s
b s
b
a s
a s
a s
a
D( ) =
+
+
+
+
+
+
3
3
2
2
1
0
3
3
2
2
1
0 	
(6.246)
	
=





+
+
+
+
+
+
b
a
s
z
s
z
s
z
s
p
s
p
s
p
3
3
1
2
3
1
2
3
(
)(
)(
)
(
)(
)(
) 	
(6.247)
FIGURE 6.29  Simulink diagram for third-order and second-order control systems.

533
Intermediate Numerical Integration
From M-file “Ch6_stiffsys_approx.m,” the results are τ = 0.00125 s:
	
G
s
s
s
s
s
s
s
D( )
(
)(
.
.
)
(
.
)(
.
.
=
+
+
+
+
+
+
3
800
2 1
2 25
800 0094
2 0906
9 7499
2
2
) 	
(6.248)
τ = 0:
	
G
s
s
s
s
D( )
(
. s
.
)
.
.
=
+
+
+
+
3
2 1
2 25
2 1
9 75
2
2
	
(6.249)
Canceling the real pole and real zero in Equation 6.248 results in a nonstiff second-order system, 
which accurately represents the dynamics of the stiff third-order system.
Canceling factors from the numerator and denominator in a transfer function when the pole-zero 
plot indicates that a pole and zero are close to each other is valid under most conditions. In fact, 
one of the goals of control system design based on “pole placement” is to mitigate or eliminate 
entirely the effect of undesirable modes in the open-loop system natural response. A controller 
with a ­combination zero and pole is inserted in the loop with the zero located near the undesirable 
open-loop pole.
1.5
1.25
0.75
0.25
0.5
y(t)
0
0
2
3
4
5
1
1
t (s)
1.5
1.25
0.75
0.25
0.5
x(t)
0
0
2
3
4
5
1
1
t (s)
1.5
1.25
0.75
0.25
0.5
y(t)
y(t), second-order system
x(t), second-order system
y(t), third-order system
x(t), third-order system
0
0
2
3
4
5
1
1
1.5
1.25
0.75
0.25
0.5
x(t)
0
0
2
3
4
5
1
1
FIGURE 6.30  Step response of stiff and nonstiff control system models.
b0 = 6.75
ao = 9.75
z1 = −800
p1 = −800.0094
b1 = 6.3084
a1 = 2.1028
z2 = −1.05 + j1.0712
p2 = −1.0453 + j2.9423
b2 = 3.0079
a2 = 1.0026
z3 = −1.05 −j1.0712
p3 = −1.0453 −j2.9423
b3 = 0.0039
a3 = 0.0013
b0 = 6.75
a0 = 9.75
z1 = −1.05 + j1.0712
p1 = −1.05 + j2.9407
bi = 6.3
al = 2.1
z2 = −1.05 − j1.0712
p2 = −1.05 − j2.9407
b2 = 3
a2 = 1
b3 = 0
a3 = 0

534
Simulation of Dynamic Systems with MATLAB® and Simulink®
Another example of approximating a stiff system model with a lower-order dynamics model is 
now given. In this case, the order of the approximate system is reduced by ignoring a fast mode 
and retaining the slower dominant mode as opposed to canceling nearly equivalent numerator and 
denominator factors.
EXAMPLE 6.10
An armature-controlled DC motor with a load inertia mounted on its shaft is shown in Figure 6.31. 
The inputs are the armature voltage e0(t) and the load torque TL(t). The outputs are the motor 
torque T(t) and angular speed of the motor ω(t). Dependent variables (in addition to the outputs) 
are the armature current i(t) and back emf of the motor vb(t). R and L are the electrical resistance 
and inductance of the armature circuit while B and J are the viscous damping coefficient and load 
inertia. Kb and KT are the back emf and torque constants of the motor.
The following equations govern the dynamics of this electromechanical system:
	
e0( )
( )
( )
( )
t
Ri t
L t i t
v t
b
=
+
+
d
d
	
(6.250)
	
v t
K
t
b
b
(
(
)
)
=
ω
	
(6.251)
	
T t
K i t
T
(
(
)
)
=
	
(6.252)
	
J
t
t
B
t
T t
T t
L
d
d
( )
ω
ω
( )
( )
( )
+
=
+
	
(6.253)
	
a.	Draw a block diagram of the system and find the transfer functions I(s)/E0(s) and Ω(s)/E0(s) 
where E0(s) = L{e0(t)}, I(s) = L{i(t)}, and Ω(s) = L{ω(t)}.
	
b.	Find the steady-state gain (from armature voltage to angular speed), natural frequency, 
and damping ratio of the motor as a function of the motor parameters.
	
c.	Find expressions for the motor time constants in terms of the motor parameters.
	
d.	The motor constants and load inertia are
	
R
L
=
Ω
=
=
×
−
0 2
8
10 3
.
,
0.1 mH,
ft lb A
f
KT
/
	
	
K
B
J
b =
=
=
×
−
0 05
0 01
4 5
10 3
2
.
,
.
,
.
V
rad/s
ft lb
rad/s
ft lb
rad/s
f
f
	
	
	   Compute the second-order system parameters, characteristic roots, time constants, 
and stiffness ratio.
FIGURE 6.31  Armature-controlled DC motor and load.

535
Intermediate Numerical Integration
	
e.	Find expressions for the time constants when the armature inductance is assumed to be 
negligible. Find the reduced order transfer functions I(s)/E0(s) and Ω(s)/E0(s) when L ≈ 0.
	
f.	Simulate the response ω(t), t ≥ 0 of the first- and second-order models to a unit step input 
in armature voltage using Simulink’s Euler integrator. Compare the results and comment 
on the step size required to achieve a stable response in each case.
	
g.	Use one of Simulink’s stiff integrators to obtain the step response of the DC motor sec­
ond-order system model. Compare the number of steps and execution time required for 
the stiff integrator and the RK-1 Euler integrator with step size T = 0.0005 s.
	
h.	Compare the frequency response function GΩ(jω) = Ω(jω)/E0(jω) when L = 0.1 and 
0 mH. Comment on the results.
	
i.	Compare the outputs i(t), t ≥ 0 and ω(t), t ≥ 0 in response to a load torque TL(t) = sin ωLt, 
t ≥ 0 for the following cases shown in Table 6.11.
	
a.	Laplace transforming Equations 6.250 through 6.253 with initial conditions zero 
­provides the basis for constructing the block diagram shown in Figure 6.32.
	
G s
s
E s
Ls
R K
Js
B
K
Ls
R K
T s
T
b
T
L
Ω
=
= Ω
=
+
+
+
+
( )
( )
( )
( (
))
(
))
( (
))
(
( )
0
0
1
1
1
1
1 Js
B
+ )) 	
(6.254)
	
=
+
+
+
K
Ls
R Js
B
K K
T
b
T
(
)(
)
	
(6.255)
	
G s
I s
E s
s
E s
s
I s
I
T s
L
( )
( )
( )
( )
( )
( )
( )
( )
=
=
=
0
0
0
Ω
Ω
	
(6.256)
	
=
+
+
+
+
K
Ls
R Js
B
K K
K
Js
B
T
b
T
T
/[(
)(
)
]
(
)
	
(6.257)
	
=
+
+
+
+
(
)
(
)(
)
Js
B
Ls
R Js
B
K K
b
T 	
(6.258)
TABLE 6.11
Motor Inductance and Load Torque 
Frequency Values
ωL
ωL
L(mH)
2π rad/s
200 rad/s
0
1
0.1
FIGURE 6.32  Block diagram of armature-controlled DC motor.

536
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	Dividing GΩ(s) in Equation 6.255 by JL and equating the result to the standard form of a 
second-order system,
	
G s
K
JL
s
R L
s
B J
K K
JL
K
s
s
T
b
T
m
n
n
n
Ω( )
[
(
)][
(
)]
=
+
+
+
=
+
+
/
/
/
/
ω
ζω
ω
2
2
2
2
	
(6.259)
	
	   Solving for the steady-state gain Km, the natural frequency ωn, and the damping ratio ζ 
in terms of the motor parameters results in
	
K
K
BR
K K
m
T
b
T
=
+
	
(6.260)
	
ωn
b
T
BR
K K
JL
=
+






1 2
/
	
(6.261)
	
ζ =
+
+
BL
JR
JL BR
K K
b
T
2
1 2
[ (
)]
	
(6.262)
	
c.	It is possible to show that the motor is overdamped (ζ > 1), and, therefore, the transfer 
function in Equation 6.259 is expressible as
	
G s
K
s
s
K
s
s
m
n
n
n
m
n
Ω( )
(
)
=
+
+
=
+
+
ω
ζω
ω
ω τ τ
τ
τ
2
2
2
2
1 2
1
2
2
1
1
)(
	
(6.263)
	
	   The denominator of GΩ(s) is the characteristic polynomial Δ(s) whose roots are
	
s s
n
n
1
2
2
1
,
= −
±
−
ζω
ζ
ω
	
(6.264)
	
	   The motor time constants in Equation 6.263 are related to the characteristic roots 
according to τ1 = −1/s1, τ2 = −1/s2. Substituting Equations 6.261 and 6.262 into Equation 
6.264 produces an expression for the characteristic roots,
	
s s
JL BL
JR
BL
JR
JL BR
K K
b
T
1
2
2
1 2
1
2
4
,
[(
)
{(
)
(
)}
]
= −
+
±
+
−
+
	
(6.265)
	
	   Taking the negative reciprocals of s1 and s2 gives
	
τ τ
1
2
2
1 2
2
4
,
=
+
±
+
−
+
JL
BL
JR
BL
JR
JL BR
K K
b
T
(
)
{(
)
(
)}
	
(6.266)
	
d.	The second-order system parameters are computed using Equations 6.260 through 
6.262. The results are Km = 3 33
.
 rad/s/V, ωn = 73.03 rad/s, and ζ = 13.71. The charac­
teristic polynomial of the second-order system model is
	
∆(
(
(
)
)
)
s
Ls
R Js
B
K K
b
T
=
+
+
+
	
(6.267)
	
=
+
+
+
+
LJs
LB
RJ s
RB
K K
b
T
2
(
)
	
(6.268)

537
Intermediate Numerical Integration
	
	   Substituting the numerical values of the motor constants gives
	
∆( )
.
.
.
s
s
s
=
×
+
×
+
×
4 5 10
9 0
10
2 4
10
7
2
4
3
−
−
−
	
(6.269)
	
	   The characteristic roots s1 and s2 can be found directly from Equation 6.265 or by solving 
for the roots of Δ(s) in Equation 6.269. The result is s1 = −1999.6 rad/s and s2 = −2.67 rad/s. 
The motor time constants are τ1 = −1/s1 = 0.0005 s and τ2 = −1/s2 = 0.375 s. The stiff­
ness ratio is s1/s2 = 749.7.
	
e.	Ignoring terms involving L in the denominator of Equation 6.266 gives
	
τ1
2
1 2
0
2
4
≈
+
±
+
−
+






=
≈
JL
BL
JR
BL
JR
JL BR
K K
L
R
b
T
L
(
)
{(
)
(
)}
	
(6.270)
	
τ2
0
2
1 2
2
4
≈
+
−
+
−
+






→
lim (
)
{(
)
(
)}
L
b
T
JL
BL
JR
BL
JR
JL BR
K K
	
(6.271)
	
	   Application of L’Hospital’s rule in Equation 6.271 results in
	
τ2 ≈
+
JR
BR
K K
b
T 	
(6.272)
	
	   Ignoring the effect of armature inductance, that is, assuming L = 0 in Equations 6.255 
and 6.258, yields a first-order model of the motor with transfer functions
	
Ω
=
+
+
( )
( )
s
E s
K
JRs
RB
K K
T
b
T
0
	
(6.273)
	
J s
E s
Js
B
JRs
RB
K K
b
T
( )
( )
0
=
+
+
+
	
(6.274)
	
	   Hence, the motor can be modeled as a first-order component
	
Ω
=
+
( )
( )
s
E s
K
s
m
m
0
1
τ
	
(6.275)
	
	 with time constant τm = τ2 = 0.375 s and Km = 3 33
.
rad/s/V.
	
f.	The Simulink diagram for the step responses of the first- and second-order system mod­
els using Euler integration is shown in Figure 6.33.
	
	   The simulated responses of the motor to a unit step input in armature voltage 
occurring at t = 0.25 s are shown in Figure 6.34. Euler integration at T = 0.001 s is 
stable for both cases, L = 0.1 and 0 mH. Note that both responses approach the pre­
dicted steady-state value ωss = Km× =
×
=
1
3 3
1
3 33
3
3
.
.
rad/s/V
V
 rad/s in roughly 
5 × τm = 5 × 0.375 = 1.875 s after the unit step is applied.
	
	   Figure 6.35 shows the simulated response of the second-order system model 
(L = 0.1 mH) with Euler integration for step sizes of T = 0.001001 and 0.001002 s. The first 
plot indicates the onset of numerical instability, while the second shows clear instability at 
the larger step size. By trial and error, the upper limit for stable Euler integration of the stiff 
system model, the second-order system with L = 0.1 mH, is approximately T = 0.001 s.
	
	   The first-order system model obtained by ignoring the fast pole at s1 = −1999.6 rad/s 
leaving only the dominant pole at s2 = −2.7 rad/s can be simulated with Euler integration 
using a far greater integration step. Figure 6.36 shows what to expect with step sizes of 

538
Simulation of Dynamic Systems with MATLAB® and Simulink®
T = 0.1, 0.25, 0.75, and 1 s, respectively. The lowest value of T results in a step response 
nearly identical to the analytical solution (not shown). The result is still quite acceptable 
for T = 0.25 s. The integrator appears to be marginally stable (and grossly inaccurate) 
when T is equal to 0.75 s. The response in the lower right is clearly unstable.
	
g.	The Simulink model in Figure 6.33 was called from M-file “Ch6_Ex6_10.m” with the 
“odel” and “odel5s” integrators selected to simulate the motor angular speed and 
current. Simulated outputs of the second-order system are plotted in Figure 6.37. “odel” 
is Euler and “odel5s” is one of the stiff integrators available in MATLAB.
	
	   The y-labels are written as ω(t) and i(t) even though the plots are actually of the discrete-
time (simulated) system outputs. The armature voltage e0(t) was applied at t = 0.25 s, and 
the simulation ran for 0.25 ± 5 τm = 0.25 + 5(0.375) = 2.125 s. The analytical solutions 
for ω(t) and i(t) are considered in Exercise 6.24.
	
	   Euler simulation required (0.25 + 5τm)/T = 4250 integration steps. The stiff integrator 
needed only 83 steps to produce comparably accurate results. The execution times for 
FIGURE 6.33  Simulink diagram for step responses of first- and second-order models.
3
2
ω(t) (rad/s)
ω(t) (rad/s)
0
0
0.25
0.5
0.75
2
1.25
Euler integration, T = 0.001 s
Euler integration, T = 0.001 s
Step response of motor (L = 0.1 mH)
1.5
1.75
1
0
0.25
0.5
0.75
2
1.25
1.5
1.75
1
1
3
2
t (s)
0
1
Step response of motor (L = 0 mH)
FIGURE 6.34  Unit step responses of first- and second-order system models.

539
Intermediate Numerical Integration
each were obtained using the MATLAB command “cputime,” which returns the CPU 
time used by MATLAB from the time it is first loaded. Execution times for the Euler and 
stiff integrator were 63 and 47 ms, respectively.
	
h.	The frequency response functions GΩ(jω) for the first-order model (L = 0) and second-
order model (L = 0.1 mH) are shown in Figure 6.38. The magnitude function |GΩ(jω)| for 
L = 0.1 and 0 mH is nearly identical up to 1000 rad/s well beyond the cutoff frequency 
or bandwidth of the motor. The DC gain GΩ(j0) is the same as the motor gain Km = 3 33
.
 
rad/s/V (10.46 db). At ω = 2000 rad/s, the magnitudes are 0.0031 rad/s/V (−50.05 db) 
with L = 0.1 mH and 0.0044 rad/s/V (−47.04 db) with L = 0.
	
	   Figure 6.38 suggests that the dynamic response of the motor to changes in armature 
voltage be accurately predicted by the first-order (nonstiff) model.
	
i.	The six cases in Table 6.11 were simulated using the Simulink model “dc_motor_2.
mdl” shown in Figure 6.39. “Ch6_Ex6_10.m” calls “dc_motor_2.mdl” twice, once with 
6
4
ω(t) (rad/s)
0
0
0.25
0.5
0.75
2
1.25
Euler integration, T = 0.001001 s
Euler integration, T = 0.001002 s
Step response of motor (L = 0.1 mH)
1.5
1.75
1
2
6
4
ω(t) (rad/s)
0
0
0.25
0.5
0.75
2
1.25
1.5
1.75
1
2
t (s)
Step response of motor (L = 0.1 mH)
FIGURE 6.35  Unstable second-order model step responses.
Simulated response of DC motor (L = 0) using Euler integration
4
3
2
1
0
0
2
4
T = 0.1 s
6
8
10
ω(t) (rad/s)
10
8
6
4
2
0
0
2
4
T = 0.75 s
6
8
10
ω(t) (rad/s)
t (s)
4
1
0
0
2
4
T = 0.25 s
6
8
10
3
2
ω(t) (rad/s)
400
300
200
100
–100
–200
0
0
2
4
T = 1 s
6
8
10
ω(t) (rad/s)
t (s)
FIGURE 6.36  Simulated response using Euler integration with four different step sizes.

540
Simulation of Dynamic Systems with MATLAB® and Simulink®
ωL = 2 π rad/s and the second time with ωL = 2000 rad/s. The armature voltage e0(t) is zero 
for both calls. RK-4 integration with step size 0.0001 s was specified in “Ch6_Ex6_10.m.”
	
	   The motor current and angular speeds for L = 0, 0.1, and 1 mH are indistinguishable 
from each other when the load torque frequency is 2π rad/s (see Figure 6.40). Figure 
6.41 shows angular speed and current of the motor when the load torque frequency 
ωL = 200 rad/s. The angular speeds are nearly identical; ­however, there is a noticeable 
difference in current when L = 1 mH. Hence, for an accurate simulation of motor current 
for the case when L = 1 mH and the load torque frequency is 200 rad/s (or greater), the 
stiff second-order system model is required.
ode1 (Euler), T = 0.0005 s
4250 steps
3
2
1
0
0
0.5
1
1.5
2
ω(t) (rad/s)
ode15s (stiff)
83 steps
3
2
1
0
0
0.5
1
1.5
2
ω(t) (rad/s)
ode1 (Euler), T = 0.0005 s
4250 steps
3
5
4
2
1
0
3
5
4
2
1
0
0
0.5
1
1.5
2
i(t) (rad/s)
ode15s (stiff)
83 steps
0
0.5
1
1.5
2
i(t) (rad/s)
t (s)
t (s)
FIGURE 6.37  Simulated DC motor step response using Euler and stiff integrator.
100
–100
–200
10–1
100
101
102
103
L = 0.1 mH
L = 0
104
105
0
ω (rad/s)
GΩ(jω), ﬁrst-order and second-order system models
GΩ(jω) (db)
–100
–200
10–1
100
101
102
103
L = 0.1 mH
L = 0
104
105
0
ω (rad/s)
Arg [GΩ(jω) (deg)]
FIGURE 6.38  Frequency response function GΩ(jω) for L = 0 and 0.1 mH.

541
Intermediate Numerical Integration
FIGURE 6.39  Simulink diagram for i(t) and ω(t) with L = 0, 0.1, and 1 mH.
10
5
L = 0, 0.1, 1 mH
L = 0, 0.1, 1 mH
Motor current, ωL = 2π rad/s
Motor speed, ωL = 2π rad/s
0
i(t) (A)
t (s)
–5
–10
0
0.5
1
1.5
2
2.5
3
40
60
20
0
ω(t) (rad/sec)
–20
–40
0
0.5
1
1.5
2
2.5
3
FIGURE 6.40  Motor current and speed for L = 0, 0.1, 1 mH, ωL = 2π rad/s.

542
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXERCISES
	6.20	 In Example 6.9,
	
a.	 Find the largest integration time step T, which yields stable and accurate approximations of 
the current i(t) using RK-1, RK-3, and RK-4 integrators.
	
b.	 Find the analytical solution for the current i(t).
	
c.	 Simulate the transient response of the circuit using the remaining stiff integrators available 
with Simulink and compare the number of integration steps required for each one. Calculate
	
e
N
i t
x
t
k
A
k
k
N
=
−
=∑
1
1
1 2
( )
( )
,
, ,...,
	
	
	 where tk, k = 1, 2, …, N are the discrete times used by the stiff integration method to 
approximate the exact solution i(tk).
	6.21	 Figure E6.21 shows a thermal second-order system with input u(t) and output y(t). The tempera­
ture output is converted by a transducer, modeled as a first-order lag, to an electronic signal v(t).
	
a.	 Find the exact solution for the unit step response of v(t).
	
b.	 Find the stiffness ratio relating the ratio of the largest to the smallest (in magnitude) 
­characteristic root of the system. Is the system stiff?
	
c.	 Simulate the unit step response with a fixed-step RK integrator. What is the largest 
­integration step size that can be used to obtain a stable solution?
	
d.	 Repeat part (c) using one of Simulink’s stiff integrators, and compare the number of steps 
used by the RK and stiff integrator.
0.2
0
–0.2
i(t) (A)
L = 1 mH
L = 0, 0.1 mH
–0.4
–0.6
0
0.05
0.1
0.2
0.25
0.3
0.15
t (s)
Motor current, ωL = 200 rad/s
2
1
ω(t) (rad/s)
L = 0, 0.1, 1 mH
0
0
0.05
0.1
0.2
0.25
0.3
0.15
Motor speed, ωL = 200 rad/s
FIGURE 6.41  Motor current and speed for L = 0, 0.1, 1 mH, ωL = 200 rad/s.
FIGURE E6.21

543
Intermediate Numerical Integration
	
e.	 Compare the frequency response function V(jω))/U(jω) with and without the sensor dynam­
ics by generating a Bode plot for each on the same graph. Comment on the results.
	6.22	 The liquid level in the tank shown in Figure E6.22 is regulated by controlling the flow in F1 
using an electronically actuated control valve. A level transmitter provides a voltage signal vT 
to the controller. The set point level Hcom is converted to a voltage vcom inside the controller. 
The actuating signal ev = vcom − vT is input to the controller that outputs the voltage signal 
v that determines the valve opening. The valve dynamics are described by a gain Kv and time 
constant τv as shown in the block diagram of the control system. The outflow from the tank 
F0 is assumed to be proportional to the level, that is, F0 = cH.
	
a.	 The characteristic equation of the closed-loop control system is
	
1
1
1
1
1
+
+






+






+





=
K K
T s
K
s
As
c
T
C
I
V
v
τ
0
	
	
	 The numerical values of the system parameters are
	
K
K
K
K
A
c
T
C
I
V
v
=
=
=
=
=
=
=
0 25
2
10
4
0 01
100
2
.
,
,
,
,
.
,
,
V/ft
min
cfm/V
min
ft
τ
3 cfm/ft.
	
	
b.	 Find the characteristic roots and the stiffness ratio.
	
c.	 The system is initially at steady state with the tank empty. The set point input is a step 
function Hcom(t) = 3 ft, t > 0. The step response H(t), 0 < t < 180 min is simulated using 
Simulink’s fixed-step integrators “ode1” through “ode4.” Use trial and error to estimate the 
integration step size T (to eight places after the decimal point), resulting in a marginally 
stable simulated response. Enter the values in the second column of the following table.
FIGURE E6.22

544
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	 Obtain plots of H(t) and F1 (t) with each integrator when the step size is one half the limit­
ing values found in part (b). Enter the number of integration steps used to simulate the tank 
level response in the third column of the following table.
	
e.	 Obtain plots of H(t) and F1(t) using Simulink’s stiff integrator “ode23s.”
	
f.	 Find the number of integration steps in part (d) and enter the value in Table E6.23.
	6.23	 Consider a third-order system with transfer function in Equation 6.248 and second-order sys­
tem approximation with transfer function in Equation 6.249. Denote the transfer functions by 
G3(s) and G2(s), respectively. Suppose the input to both systems is u(t) = 100eat, t ≥ 0.
	
a.	 Simulate the responses of each system and plot them on the same graph for the following 
cases:
	
(i)
(ii)
(iii)
(
)
.
( )
a
a
a
a
a
=
=
=
=
=
0
100
800
800 0094
5000
−
−
−
−
iv
v
	
	6.24	 Find analytical solutions for ω(t) and i(t) in response to a step input e0(t) in Example 6.10. Compare 
the exact solutions with the simulated results obtained using “ode1” and “ode15s” integrators.
	6.25	 For the DC motor in Example 6.10 with armature voltage zero,
	
a.	 Find the transfer functions
	
G
s
s
T s
G s
I s
T s
E
s
L
E
s
I
E
s
L
E
s
Ω
Ω
( )
( )
( )
,
( )
( )
( )
( )
( )
( )
( )
0
0
0
0
0
0
0
=
=
=
=
=
=
0 	
	
b.	 Draw Bode plots for G
j
G
j
E
s
I
E
s
Ω(
) |
(
) |
( )
( )
ω
ω
0
0
0
0
=
=
and
 for L = 0, 0.1, 1 mH.
	
c.	 Are the motor current and speed profiles in Figures 6.40 and 6.41 consistent with the results 
in part (b)?
	6.26	 An angular speed control system is shown in Figure E6.26a:
TABLE E6.23
Integrator
T (Marginally 
Stable Response)
Number of Steps 
(Step Size T/2)
Ode1
Ode2
Ode3
Ode4
Ode23s
n/a
FIGURE E6.26A

545
Intermediate Numerical Integration
	
	   The motor constants and load inertia are
	
R
L
K
K
B
T
b
=
=
=
=
=
1
0 1
0 8
0 05
0 01
Ω,
.
,
.
,
.
,
.
mH
ftlb /A
 V/rad/s
ft lb /rad
f
f
/s
ft lb /rad/s
f
,
.
.
J = 0 045
2
	
	
	   The tachometer gain in the feedback path is Ktach = 0.0475 V/rad/s and the amplifier gain 
Kamp = 50. A units converter is inserted before the first summer to convert the reference 
input from rad/s to volts. The gain of the units converter is the same as Ktach.
	
a.	 Find the stiffness of the DC motor.
	
b.	 Find the stiffness of the closed-loop control system.
	
c.	 Prepare a Simulink diagram for simulating the control system. The reference input and load 
torque profiles are shown in Figure E6.26b.
	
d.	 Use trial and error to find the maximum step size for stable integration of the model using 
RK-1 through RK-4 integration.
	
e.	 Simulate the control system using RK-1 through RK-4 integration with step sizes equal 
to one half the values found in part (d). Repeat using the stiff integrators “odel5s,” 
“ode23s,” “ode23t,” and “ode23tb.” Compare the execution times and number of 
integration steps required with each.
	6.27	 The block diagram of a control system is shown in Figure E6.27.
	
a.	 Find the closed-loop system transfer function Y(s)/R(s).
	
b.	 Find the closed-loop system poles (characteristic roots) and the stiffness ratio for controller 
gains of K = 1, 100, 1000.
	
c.	 Find the analytical solutions for the unit step responses when K = 1, 100, 1000.
	
d.	 Select any order RK integrator and find the step size for each value of K where the integra­
tor is on the verge of becoming unstable.
	
e.	 Simulate the step responses using the selected RK integrator with a step size of one half the 
value found in part (d) for each value of K.
	
f.	 Plot the analytical and simulated step responses on the same graphs.
	
g.	 Approximate the stiff closed-loop system dynamics when K = 100 with a second-order transfer 
function obtained by ignoring the fast pole of the third-order closed-loop transfer function. 
Introduce a gain in the numerator of the second-order transfer function that makes the DC gain 
of the second- and third-order system transfer functions identical. Compare the third-order 
FIGURE E6.26B
FIGURE E6.27

546
Simulation of Dynamic Systems with MATLAB® and Simulink®
system analytical and simulated step responses to the second-order system analytical and 
simulated step responses. Compare the step sizes, number of integration steps, and execution 
times used to simulate the original system and the reduced order system approximation.
6.6  LUMPED PARAMETER APPROXIMATION OF 
DISTRIBUTED PARAMETER SYSTEMS
Dynamic systems involving variables that exhibit both spatial and temporal variations are modeled 
by partial differential equations and referred to as distributed parameter systems. The introductory 
section in Chapter 1 cited the example of a room temperature T(x, y, z, t) that varies as a function of the 
point coordinates (x, y, z) as well as time t. Analytical solutions of partial differential equation models 
subject to various boundary conditions are rare in all but the simplest of examples. Numerical solu­
tions are based on a partitioning of the entire volume and surface areas within the system into meshes 
comprising finite-sized triangular elements with interior and exterior nodes at the vertices. Difference 
equations, sometimes numbering in the hundreds of thousands depending on the size and shape of the 
finite elements, are written for the dependent variable(s) at a subset of the nodes. Accurate approxi­
mations to the continuous solutions of the partial differential equation models are possible using this 
“finite element analysis” approach. Examples include the temperature distribution and heat flows from 
irregular-shaped cooling surfaces, structural analysis, fluid ­dynamics, and so forth.
In dynamic systems with regular-shaped geometries, a continuously varying spatial parame­
ter can be discretized into a finite number of values associated with discrete geometric regions. 
For example, consider a long, thin cylindrical rod with perfect insulation along its length and top 
face like the one shown in Figure 6.42.
Suppose one end of the rod is immersed in a liquid bath of constant temperature T . Assuming 
negligible heat flow in the x and y directions, temperature gradients exist solely in the longitudinal 
direction, that is, along the z-axis of the cylinder. The temperature is described by T(t, z). The initial 
temperature distribution T0(z) is known as well.
Derivation of the equation governing the cylinder’s temperature T(t, z) is straightforward 
(Miller 1975). The result is the partial differential equation
	
∂
∂
−
∂
∂
=
t T t z
z T t z
( , )
( , )
α
2
0
	
(6.276)
FIGURE 6.42  Lumped parameter depiction of rod with discrete thermal capacitances.

547
Intermediate Numerical Integration
subject to initial condition T(0,z) = T0(z), 0 ≤ z ≤ L along with the boundary conditions 
T t
T
(
)
,0 =
≥
,t
0 and (
)
,
.
∂∂
=
≥
=
/ z
t
L
z
L
T t,z
(
) |
0
0
 is the length of the cylinder, and α is a parameter 
related to the physical and thermal properties of the cylinder material.
A lumped parameter model consisting of coupled ordinary differential equations is obtained by 
dividing the cylinder into n equal segments of length Δz = L/n (see Figure 6.42). Each segment has, 
associated with it, a thermal capacitance Ci and is assigned a node temperature Ti. Energy balances 
for each segment relate the net heat flow to the accumulation of thermal energy, that is,
	
C
t T t
Q
Q
i
n
i
i
i
i
d
d
( )
,
, , ,
,
=
−
=
−1
1 2 3 …
	
(6.277)
Heat flows across the boundaries of each segment along the z-axis by conduction. Fourier’s law 
of heat conduction states that the conductive heat flow per unit area is negatively proportional to the 
temperature gradient in the direction of flow. The heat flow from the constant temperature source at 
the bottom to the first segment with temperature T1 is
	
Q
kA T
T
z
T
T
R
i
0
1
1
2
= −
−





=
−
∆/
	
(6.278)
The term in parenthesis is the temperature gradient, and k is the thermal conductivity of the 
material. R1 represents the thermal resistance at the lower boundary and is computed from
	
R
z
kA
1
2
= ∆
	
(6.279)
The internal heat flows are described by
	
Q
kA T
T
z
T
T
R
i
n
i
i
i
i
i
i
=−
−





=
−
=
−
+
+
+
1
1
1
1 2
1
∆
,
, ,
,
…
	
(6.280)
where
	
R
z
kA
i
n
i+ =
=
−
1
2
1 2
1
∆,
, ,
,
…
	
(6.281)
Heat flow between the top segment and its surroundings is zero as a result of assuming that the 
top face is perfectly insulated. Consequently,
	
Qn = 0 	
(6.282)
The cylindrical rod with n = 5 segments is illustrated in Figure 6.43.
Combining Equations 6.277, 6.278, and 6.280 through 6.282 leads to the linear system of 
­differential equations
	
d
dt
T t
T t
T t
T t
T t
A
T t
T
1
2
3
4
5
1
( )
( )
( )
( )
( )
( )






=
2
3
4
5
( )
( )
( )
( )
t
T t
T t
T t
BT






+
	
(6.283)

548
Simulation of Dynamic Systems with MATLAB® and Simulink®
The coefficient matrix A and input matrix B are given by
A
R
R
C
R C
R C
R
R
C
=
−
+






−
+






1
1
1
1
0
0
0
1
1
1
1
1
2
1
2
1
2
2
2
3
2
3
1
3
3
3
4
3
4
3
4
4
4
5
1
0
0
0
1
1
1
1
1
0
0
0
1
1
1
R C
R C
R
R
C
R C
R C
R
R
−
+






−
+






−





1
1
0
0
0
1
1
4
5
5
5
5
5
5
C
R C
R C
R C
	
(6.284)
	
B
R C
T
= 





1
0 0 0 0
1
1
        
	
(6.285)
EXAMPLE 6.11
The temperature of a 10 ft long, 2 ft diameter copper cylinder is initially 75°F throughout its entire 
length. One of its edges is placed in contact with a surface maintained at a constant temperature 
of 200°F. The cylinder is thermally insulated from its surroundings except for the edge surface in 
contact with the 200°F temperature. Assume heat flows in the longitudinal direction only.
The physical properties of copper are:
Thermal conductivity: k = 224 Btu/h/°F/ft
Specific heat: c = 2.93 Btu/°F/slug
Mass density: ρ = 17.3 slug/ft3
FIGURE 6.43  Cylinder with five distinct temperature nodes.

549
Intermediate Numerical Integration
Partition the cylinder into five equal-sized sections and
	
a.	Find the matrices A and B in the state equation T t
AT t
( )
( )
=
+BT  where T t( ) =
[ ( ) ( ) ( ) ( ) ( )]
T t T t T t T t T t
T
1
2
3
4
5
 is the state vector.
	
b.	Find the steady-state node temperatures.
	
c.	Simulate and plot the temperature responses of each section long enough for the tran­
sient response to die out.
	
d.	Plot the temperature profile along the bar at t = 0, 2.5, 5, 10, 20, 30 h.
	
a.	The volume of each section is
	
V
A
z
D
z
i
i
=
=






=











=
∆
∆
π
π
π
2
2
2
10
5
2
2
2  ft
  
3
1 2
5
,
, ,
,
i =
…
	
(6.286)
	
	 The thermal capacitance of each section is
	
C
c V
i
i
i
i
=
=
° −
×
×
=
°
=
ρ
π
2 93
17 3
2
318 49
1
3
3
.
.
.
,
,
Btu
F
slug
slug
ft
ft
Btu
F
22
5
,
,
…
	
(6.287)
	
	 and the thermal resistances at the interfaces of each section are
	
R
z
kA
1
1
1
2
2
2
2
224
0 0014
=
=
×
°
×
=
°
∆
ft
ft
F
Btu/h
(Btu/ h/ F ft)
.
π
	
(6.288)
	
R
z
kA
R
i
i
i
i
=
=
×
=
°
=
∆
2
0 0028
2 3 4 5
1
.
,
, , ,
F
Btu/h
	
(6.289)
	
	   Substituting the values for Ri and Ci into Equations 6.284 and 6.285 gives (see M-file 
“Ch6_Ex6_1.m”)
	
A =
−
−
−
3 3143
1 1048
0
0
0
1 1048
2 2096
1 1048
0
0
0
1 1048
2 2096
1 104
.
.
.
.
.
.
.
.
8
0
0
0
1 1048
2 2096
1 1048
0
0
0
1 1048
1 1048
.
.
.
.
.
−
−






=






,
.
B
2 2096
0
0
0
0
	
	
b.	The steady-state state vector Tss. is obtained from Equation 6.283 with the left-hand side 
equal to the zero vector. The result is
     
T
A BT
ss = −
= −
−
−
−
−1
3 3143
1 1048
0
0
0
1 1048
2 2096
1 1048
0
0
0
1 1048
2
.
.
.
.
.
.
.
.
.
.
.
.
.
2096
1 1048
0
0
0
1 1048
2 2096
1 1048
0
0
0
1 1048
1 1048
−
−












=
−1 2 2096
0
0
0
0
200
200
20
.
0
200
200
200






	
(6.290)

550
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	A “Constant” block and the “state-space” block in Simulink are all that are needed to 
simulate the response of the lumped parameter system model. The output matrix C is 
chosen to be the 5 × 5 identity matrix, forcing the output vector to be identical to the 
state vector. The direct transmission matrix D is a 5 × 1 column vector of all zeros. The 
Simulink diagram is shown in Figure 6.44.
	
	   The “Workspace I/O” tab in the “Simulation Parameters” dialog box must 
have “Time” and “states” checked. The Simulink model file “temp _ cylinder.
mdl” is called from within “Ch6_Ex6_1.m.” RK-4 integration with step size T = 0.01 h 
was used to generate the node temperature responses T1(t), T2(t), …, T5(t) shown in 
Figure 6.45.
	
d.	The temperature profiles are approximated by linearly interpolating the node tempera­
tures at the required times (see Figure 6.46).
6.6.1  Nonlinear Distributed Parameter System
The next example illustrating the approximation of a distributed parameter system with a lumped 
parameter model is that of a coffee pot used for brewing coffee. In the coffee pot shown in Figure 
200
180
160
140
120
100
80
60
0
5
10
Cylinder node temperature vs. time
T1(t)
T2(t)
T3(t)
T5(t)
T4(t)
T(°F)
15
t (h)
20
25
30
FIGURE 6.45  Time histories of cylinder node temperatures.
FIGURE 6.44  Simulink diagram for simulation of lumped parameter system model.

551
Intermediate Numerical Integration
6.47, liquid rises up through the riser, is distributed uniformly over the bed of coffee grounds, passes 
through the bed taking up coffee extract, and falls back to the bottom of the pot.
The following notation is used in the partial differential equation model, which governs the concen­
tration of coffee in the liquid as it passes through the layer of coffee grounds, and the ordinary differ­
ential, which describes the concentration of coffee in the well-mixed reservoir at the bottom of the pot.
Notation:
A: cross-sectional area of the contact bed, ft2
L: height of the contact bed, ft
HL: holdup of liquid per unit height of contact bed, lb water/ft
Ht: holdup of liquid in reservoir of pot, lb water
a: mass transfer area per unit of volume of bed, ft2/ft3
km: mass transfer rate coefficient, lb/s coffee/(ft2 × (lb coffee/lb water))
cs: saturated concentration of coffee, lb coffee/lb water
z: independent spatial variable measured from bottom to top of contact bed, ft
t: independent time variable, min
w(t): circulation of liquid, lb water/s
220
200
180
160
140
120
100
80
60
1
2
3
 Node
4
5
T(°F)
t = 2.5 h
t = 0 h
t = 5 h
t = 10 h
Temperature profiles along cylinder at various times
t = 20 h
t = 30 h
FIGURE 6.46  Temperature profiles along cylinder at t = 0, 2.5, 5, 10, 20, 30 h.
FIGURE 6.47  Coffee pot with liquid circulation.

552
Simulation of Dynamic Systems with MATLAB® and Simulink®
E0(z, t): fraction of coffee not yet extracted at height z and time t
c(z, t): concentration of coffee in liquid at height z and time t, lb coffee/lb water
cR(t): concentration of coffee in reservoir, lb coffee/lb water
Assuming no coffee concentration gradients in the radial direction of the contact bed and a 
well-mixed reservoir leads to a mathematical model based on conservation of coffee extract in the 
contact bed and reservoir (Huntsinger, personal notes)
	
Contact bed:−
∂
∂
+
−
=
∂
∂
w z c z t
E z t Aak
c
c z t
H
z c z t
m
s
L
( , )
( , )
[
( , )]
( , )
0
	
(6.291)
	
subject to: (0, )
,
c
t
c
c z
=
=
R t( ),
(
)
0
0	
(6.292)
	
Reservoir:
d
d
H
t c
t
wc
t
wc L t
c
t
R
R
R
( )
( )
( , ),
( )
+
=
=
0
0
	
(6.293)
The lumped parameter model of the coffee pot is developed in a similar manner to the way it 
was obtained for the temperature distribution along the cylindrical rod. That is, the contact bed is 
divided into a number of discrete layers with homogeneous properties throughout. The situation is 
illustrated in Figure 6.48 for the case of three sections with uniform liquid concentrations c1(t), c2(t), 
and c3(t). The liquid concentration in the reservoir is cR(t).
Equations expressing the conservation of coffee extract in each homogeneous section are
	
Section 1: w t c
t
w t c t
z AaK
c
c t E
t
H
R
m
s
L
( )
( )
( ) ( )
(
)
[
( )]
( )
,
−
+
−
=
1
1
0 1
∆
∆z t c t
d
d
1( )
	
(6.294)
	
Section :2
1
2
2
0 2
w t c t
w t c t
z AaK
c
c t
t
H
m
s
L
( ) ( )
( )
( )
(
)
[
( )]E
( )
,
−
+
−
=
∆
∆z t c t
d
d
2( )
	
(6.295)
FIGURE 6.48  Lumped parameter view of coffee pot.

553
Intermediate Numerical Integration
	
Section :3
2
3
3
0 2
w t c t
w t c t
z AaK
c
c t E
t
H
m
s
L
( )
( )
( ) ( )
(
)
[
( )]
( )
,
−
+
−
=
∆
∆z t c t
d
d
3( )
	
(6.296)
The third term in Equations 6.294 through 6.296 accounts for the mass transfer of coffee 
extracted from the coffee grounds to the liquid. E0,i(t), i = 1, 2, 3 represents the fraction of coffee 
not yet extracted from section “i” after time “t.” The equation for E0,i (t) is
	
E
t
B A z
K
t
B A z
i
i
i
0
0
0
1 2 3
, ( )
( ) ,
, ,
=
−
=
∆
∆
TE
	
(6.297)
where
B0 is the total coffee per volume of bed for fresh grounds
KTEi(t) is the total coffee extracted from section i in time “t” obtained from
	
K
t
E
z AaK
c
c
i
i
m
s
i
t
TE ( )
(
)
[
( )]d
,
=
−
∫
0
0
∆
τ
τ
	
(6.298)
The final equation of the lumped parameter model is the mass balance on the coffee in and out 
of the reservoir.
	
Reservoir:
d
d
w t c t
w t c
t
H
t c
t
R
t
R
( ) ( )
( )
( )
( )
3
−
=
	
(6.299)
A careful check of all terms in Equations 6.294 through 6.296 and 6.299 will reveal the units to 
be lb coffee/s.
The circulation of coffee is described by
	
w t
w
t
t
t
t
w
t
t
( )
,
,
=






≤<
≥





1
1
1
0
	
(6.300)
The model equations are represented in the Simulink model file “coffee.mdl” shown in Figure 
6.49. Numerical values of the system parameters are given in “Ch6_coffee.m” and listed as follows:
	
D
H
L
=
=
=
6
5
2 5
in
in of water
in of coffee
.,
.
,
.
.
	
	
a
km
=
=
×
3000
0 00003
2
3
2
ft of bed/ft of bed,
lb/s coffee
ft
.
(lb coffee/ lb
)
water 	
	
B
cs
0
3
3
0 2
=
=
lbcoffee/ft of bed
lbcoffee/lbwater
,
.
	
	
t
w
1
60
0 05
=
=
s
lbwater/s
,
.
	
Initial conditions: c1(0) = c2(0) = c3(0) = cR(0) = 0 lb of coffee/lb of water 
Coffee concentration in the three sections and reservoir are shown in Figure 6.50.

554
Simulation of Dynamic Systems with MATLAB® and Simulink®
The transient period is approximately 10 min (600 s). The steady-state concentration attained in 
each section and in the reservoir is slightly greater than 0.02 lb coffee/lb of water, well below the 
saturation limit of cs = 0.2 lb coffee/lb water.
There is no analytical method for determining (c1)ss, (c2)ss, (c3)ss, and (cR)ss from the model Equations 
6.294 through 6.296 and 6.299 when all the coffee has been extracted from the coffee grounds, that 
is, E0,1(∞) = E0,2(∞) = E0,3(∞) = 0. When this occurs, the steady-state concentrations are an identi­
cal amount that depends on the quantity of coffee grounds initially placed in the coffee pot.
Figure 6.51 shows the amount of coffee extracted (in oz) from each section and the overall 
amount as a function of time. The initial amount of coffee in each section (0.6545 oz) and the total 
FIGURE 6.49  Simulink model for simulating coffee pot.
0.025
0.02
0.015
0.01
0.005
00
100
200
300
Concentration, lb coﬀee per lb of water
Concentration of coﬀee vs. time for lumped parameter model
400
600
500
t (s)
cR(t)
c1(t)
c2(t)
c3(t)
FIGURE 6.50  Concentration of coffee in lumped sections and reservoir.

555
Intermediate Numerical Integration
(1.9635 oz) are calculated from the initial volumes of coffee extracted in each section and B0, the 
coffee density in lb coffee/cu ft of bed. After 10 min, the total amount of coffee extracted from sec­
tions 1, 2, and 3 is 1.8892 oz.
There is sufficient water for nearly ten 8 oz cups of coffee. Can you verify this? Figures 6.50 and 
6.51 are plotted in M-file “Ch6_coffee.m.”
EXERCISES
	6.28	 Rework Example 6.11 for the case where the top surface of the cylinder is no longer insulated. 
Instead, the top surface is maintained at 0°F.
	6.29	 Rework Example 6.11 using n = 10 and 20 segments, and compare the results with those 
shown in Figures 6.45 and 6.46.
	6.30	 Rework Example 6.11 for the case where the diameter of the cylinder is 1 ft instead of 2 ft. 
Compare the results to those shown in Figures 6.45 and 6.46.
	6.31	 Rework Example 6.11 for the case where the bottom face of the cylinder receives a constant 
supply of heat in the amount of 25,000 Btu/h and the top surface is maintained at 75°F, the 
same as the initial temperature of the cylinder.
6.7  SYSTEMS WITH DISCONTINUITIES
Mathematical models of dynamic systems sometimes exhibit discontinuities. Internal and external 
forces in mechanical systems and energy sources in electrical and thermal systems can change 
instantaneously as a result of infinitesimal displacements in the state of these systems. Distinct 
regions exist in the state space where the system model is represented by different sets of algebraic 
and differential equations. The situation is illustrated in Figure 6.52 for the case of a discontinuous 
second-order system with state variables x1 ≥ 0, x2 ≥ 0 and 3 distinct regions S1, S2, and S3.
For a second-order system without discontinuities, a suitable mathematical model assumes the 
form of a system of first-order differential equations
	
d
d
d
d
x
t
f t x x
x
t
f t x x
1
1
1
2
2
2
1
2
=
=





( ,
,
)
( ,
,
)
	
(6.301)
0.8
0.6
0.4
0.2
0
0
150
KTE1(t) (oz)
300
Section 1 coffee extraction
Initial amount of coffee
450
600
0.8
0.6
0.4
0.2
0
0
150
KTE2(t) (oz)
300
Section 2 coffee extraction
Initial amount of coffee
450
600
t (s)
t (s)
0.8
0.6
0.4
0.2
0
0
150
KTE3(t) (oz)
300
Section 3 coffee extraction
Initial amount of coffee
450
600
2.5
2
1.5
1
0.5
0
150
KTE(t) (oz)
300
Section 1, 2, 3 coffee extraction
Initial amount of coffee
450
600
FIGURE 6.51  Coffee extraction from each section and combined.

556
Simulation of Dynamic Systems with MATLAB® and Simulink®
For the second-order system with discontinuities like the one shown in Figure 6.52,
	
d
d
d
d
x
t
f
t x x
x x
S
x
t
f
t x x
x x
S
1
11
1
2
1
2
1
1
12
1
2
1
2
2
=
∈
=
∈
( ,
,
),
(
,
)
( ,
,
),
(
,
)
d
d
x
t
f
t x x
x x
S
1
13
1
2
1
2
3
=
∈





( ,
,
),
(
,
)
	
(6.302)
	
d
d
d
d
x
t
f
t x x
x x
S
x
t
f
t x x
x x
S
2
21
1
2
1
2
1
2
22
1
2
1
2
2
=
∈
=
∈
( ,
,
),
(
,
)
( ,
,
),
(
,
)
d
d
x
t
f
t x x
x x
S
2
23
1
2
1
2
3
=
∈





( ,
,
),
(
,
)
	
(6.303)
In the general case of an nth-order system with m regions S1, S2, …, Sm, we have
	
d
d
x
t
f t x x
x
i
n
j
m
i
ij
n
=
=
=
( ,
,
,
,
),
, ,
,
, ,
,
1
2
1 2
1 2
…
…
…
	
(6.304)
where the m regions are defined by a set of discontinuity functions φk(x1, x2, …, xn) such that a dis­
continuity occurs when one of the functions φk = 0.
Simulation of a dynamic system modeled as in Equation 6.304 is not as straightforward as the 
systems previously encountered. The complication arises from the requirement of knowing which 
region the state resides in to assure numerical integration of the appropriate equations. With fixed-
step as well as variable-step integration methods, the state (x1, x2, …, xn) and the set of discontinuity 
functions φk are available only at discrete points in time corresponding to the end point of each 
integration step. The presence of a discontinuity (or several discontinuities) at an interior point of 
the step is sensed by a change in sign of one (or more) of the discontinuity functions.
Several approaches to the problem are possible. The simplest is to merely assume the discontinu­
ity (or discontinuities) occurs at the end of the step in which it is detected. The appropriate model 
FIGURE 6.52  Discontinuous system with three distinct regions in state space.

557
Intermediate Numerical Integration
equations are numerically integrated, starting from the beginning of the next step. The shortcoming 
of this approach is apparent, namely, the creation of a cumulative error resulting from integration of 
the incorrect equations over a portion of the interval in which the discontinuity occurs. The error is 
minimized by choosing excessively small integration steps when using fixed-step integrators, not a 
very satisfactory solution, even impossible for certain applications.
The second approach is applicable for variable-step integration methods, which adjust the step 
size based on estimation of the local truncation error. Instead of waiting for the end of an integra­
tion step to check for the occurrence of a discontinuity, the discontinuity functions φk are evaluated 
after each derivative function evaluation within the interval. A change of sign in any φk triggers a 
switch in one of the derivative functions, eventually producing an artificially large estimate of the 
truncation error. The result is a self-correcting reduction in the current integration step leading up 
to the time of the discontinuity and slightly beyond.
The next approach is similar to the first in that the discontinuity functions φk are evaluated only 
at the end of each fixed-size integration step. When one or more discontinuities are found to have 
occurred in the current interval, some form of interpolation or possibly root finding is employed to 
locate their time(s) of occurrence to a prescribed accuracy. Once the time of occurrence is deter­
mined, the integration is repeated over the subinterval ending at the time of the first (earliest) dis­
continuity. Subsequent integrations proceed to the end of the fixed-size integration step using the 
state equations appropriate to the corresponding region in state space.
The last approach is best illustrated by a simple example. Figure 6.53 shows a pendulum 
swinging from a frictionless hinge with angular displacement confined to a single plane of 
motion. The bob at the end of the pendulum is immersed in a viscous fluid during a portion of 
its travel. The pendulum rod is assumed to be of negligible mass as is the drag force on the bob 
when exposed to air.
The bob is subject to a gravitational force W at all times along with a drag force FD and buoyant 
force FB acting on it while it is submerged. The forces are shown in Figure 6.54 for both cases.
The pendulum dynamics are modeled by the differential equation
	
J
t
W
F
R
F R
WR
B
D
L
L
L
d
d
,
>
2θ
θ
θ
θ
θ
θ
θ
θ
2 =
−
+
−
−
≤≤
−




(
)
sin
,
sin
	
(6.305)
Expressions for the constant buoyant force and assumed linear drag force are
	
F
V
E
r
B =
=






γ
4
3
3
π
	
(6.306)
FIGURE 6.53  Pendulum traveling through air and liquid.

558
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
F
v
R t
D =
=
α
α
θ
d
d 	
(6.307)
where
γ is the specific weight of the liquid
V is the volume of the bob
α is the drag coefficient
Combining Equations 6.305 through 6.307 gives
	
J
t
r
R
R
t
R
L
L
d
d
mg
d
d
mg
sin
2θ
γπ
θ
α
θ
θ
θ
θ
2
3
2
4
3
=
−
+






−
−
≤≤
−
sin
,
E
L
,
| θ
θ
|>





	
(6.308)
Introducing state variables x1(t) = θ(t) and x t
t
2( )
( )
= θ
 results in
	




x
x
x
J
r
R
1
2
2
3
1
4
3
=
=
=
=
−
+












θ
θ
γπ
,
si
mg
n
,
(
sin
x
R x
J
R
x
x
L
L
L
1
2
2
1
1
1
−
−
≤≤
−
>





α
θ
θ
θ
θ
mg
),
	
(6.309)
Defining regions S1 and S2 in the state space according to
	
S
x x
x
S
x x
x
L
L
L
1
1
2
1
2
1
2
1
=
≤
≤
=
>
{(
)
}
{(
)
}
,
,
,
,
−θ
θ
θ
and
	
(6.310)
and using the notation in Equation 6.304, the state derivative functions become
	
f
x x
x
x x
S
11
1
2
2
1
2
1
(
)
(
)
,
,
,
−
∈
	
(6.311)
	
f
x x
x
x x
S
12
1
2
2
1
2
2
(
)
,
,
,
(
)
−
∈
	
(6.312)
	
f
x
x
J
r
R
x
R x
x
21
1
2
3
1
2
2
1
1
4
3
(
,
)
sin
, (
=
−
+






−






mg
γπ
α
,
)
x
S
2
1
∈
	
(6.313)
	
f
x x
J
R
x
x
x
S
22
1
2
1
1
2
2
1
(
,
)
(
sin
), (
,
)
=
−
∈
mg
	
(6.314)
FIGURE 6.54  Diagram showing external forces acting on bob.

559
Intermediate Numerical Integration
The discontinuity functions are
	
φ
θ
1
1
2
1
(
)
,
x x
x
L
=
−
	
(6.315)
	
φ
θ
2
1
2
1
(
)
,
x x
x
L
= −
−
	
(6.316)
Note that φ1(x1, x2) = 0 ⇒  x1 = θL and φ2(x1, x2) = 0 ⇒ x1 = −θL. Hence, when either discontinu­
ity function is zero, the pendulum is transitioning from region S1 to S2 or vice versa. Figure 6.55 shows 
the state vector (x1, x2) is inside region S1 when the discontinuity functions satisfy the inequalities
	
φ
φ
1
1
2
2
1
2
0
0
(
)
(
)
,
,
x x
x x
≤
<
and
	
(6.317)
Conversely, the state vector (x1, x2) is in region S2 whenever
	
φ
φ
1
1
2
2
1
2
0
0
(
)
(
)
,
,
x x
x x
>
≥
or
	
(6.318)
A flow chart is shown in Figure 6.56 for simulating the pendulum dynamics. MATLAB routines 
called by the main program “Ch6_discont.m” are listed followed by a brief explanation of their 
function.
function [phi_1, phi_2] = DFUNCT (xl,x2)
% Evaluates discontinuity functions given state components
% Inputs: x1,x2 – components of state
% Outputs: phl,ph2 – discontinuity functions at (x1,x2)
global thetaL
phi_l = x1—thetaL;
phi_2 = —xl—thetaL;
  MATLAB function “DFUNCT.m” receives the coordinates (x1, x2) of the state vector and returns 
values of the two discontinuity functions φ1(x1, x2) and φ2(x1, x2).
function ISTATE = CNTRL (phi_l,phi_2)
% Determines whether state vector is in Region S1 or S2
% S1 – pendulum bob in liquid, i.e. |xl|< = theta_L
% S2 – pendulum bob in air, i.e. |xl|>theta_L
% Inputs: phi_1, phi_2 – discontinuity functions
% Output: ISTATE – marker indicating if state is in Region S1 or S2
FIGURE 6.55  Definition of regions S1 and S2 in terms of discontinuity functions.

560
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 6.56  Flow chart for simulation of pendulum dynamics.

561
Intermediate Numerical Integration
if phi_l< = 0 & phi_2 <0
    ISTATE = 1; % state is in Region S1
else
    ISTATE = 2; % state is in Region S2
end
  “CNTRL.m” accepts the values of the discontinuity functions φ1(x1, x2) and φ2(x1, x2) and 
checks which of the mutually exclusive conditions in Equation 6.317 or 6.318 are true. The marker 
“ISTATE” is set accordingly.
function [xl_new, x2_new] = RK4 (T,x1_old,x2_old, ISTATE)
% RK-4 numerical integrator for updating state
% Inputs: T – integration step size
% x1_old,x2_old – starting values of state components
% ISTATE – marker indicating if state is in Region S1 or S2
% Outputs: x1_new,x2_new – updated state vector
global g R m J gamma r alpha
[kll k12] = f (x1_old, x2_old, ISTATE);
xl_half = xl_old  + (T/2) * kll;
x2_half = x2_old  + (T/2) * k12;
[k21 k22] = f (xl_half, x2_half, ISTATE);
xl_half_hat = x1_old  + (T/2) * k21;
x2_half_hat = x2_old  + (T/2) * k22;
[k31 k32] = f (xl_half_hat, x2_half_hat, ISTATE);
Xl_full_hat = xl_old + T * k31;
x2_full_hat = x2_old + T * k32;
[k41 k42] = f(xl_full_hat, x2_full_hat, ISTATE);
xl_new = xl_old  + (T/6) * (k11 + 2 * k21 + 2 * k31 + k41);
x2_new = x2_old  + (T/6) * (k12 + 2 * k22 + 2 * k32 + k42);
  “RK4.m” implements the commonly used fourth-order RK integration algorithm presented in 
Equations 6.60 through 6.64. In addition to inputs specifying the integration step size and the cur­
rent state vector, the last input “ISTATE” is passed to the function “f.m” to assure the appropriate 
state derivative equations are selected, that is, Equations 6.311 and 6.313 or 6.312 and 6.314.
function [fl, f2] = f(x1,x2, ISTATE)
% Inputs: x1, x2 – components of state
%	
ISTATE – marker indicating if state is in Region S1 or S2
% Outputs: fl, f2 – state derivatives
    global g R m J gamma r alpha
fl = x2;
if ISTATE =  = 1
    f2 = (R/J)*(—m*g + (4/3)* (gamma*pi*r^3))*sin (x1) —alpha*x2;
elseif ISTATE =  = 2
    f2  = (R/J)*(—m*g*sin(xl));
end
  “f.m” is called from “RK4.m” four times (once at the start, twice in the middle, and once at the 
end of the integration interval) in the process of updating the state. It returns the values of the state 
derivative functions.
function a = INTRP (ti, ph_old, ph_new, xll, x22, k)
% Interpolates to estimate pt ti + aT where one of the discontinuity
% functions is zero. Uses linear interpolation to find intermediate
% pt ti + bT followed by quadratic interpolation based on given two pts 
and intermediate pt.

562
Simulation of Dynamic Systems with MATLAB® and Simulink®
% Inputs: ti - starting pt of interval to be interpolated
%	
ph_old,ph_new - starting and ending value of discontinuity
%	
function which changed sign over interval
%	
x11, x22 - state vector at start of interval
%	
k - index of discontinuity function which changed sign
% Outputs: a – decimal number between 0 and 1 indicating where
%	
discontinuity function is estimated to be zero
global T ISTATE
b = ph_old/(ph_old-ph_new); % zero crossing at ti + bT based on linear 
interpolation of (ti,ph_old) and (ti + T,ph_new)
t0 = ti + b*T;
tl = ti;
t2 = ti + T;
yl = ph_old;
    y2 = ph_new;
    [x11 x22] =  RK4(b*T, x11, x22, ISTATE);% compute state at ti + bT
    [phll ph22] = DFUNCT (x11, x22);% compute ph1 and ph2 at ti + bT
    if k =  = 1
      y0 = phll;
    else
      y0  =  ph22;
    end% if
t  =  [tl t0 t2];
y  =  [yl y0 y2];
p  =  polyfit (t, y, 2);% fit quadratic thru (ti,ph_old), (ti + T, ph_new)% 
and (ti + bT, y0)
r = roots (p);% roots of quadratic
if r (1) >  = ti & r(1)< =  ti + T% find root in interval (ti, ti + T)
t_root  =  r(1);
else
    t_root  =  r (2);
end % if
    a  =  (t_root-ti)/T; % normalizes “a” to between 0 and 1
  “INTRP.m” is invoked when a change in sign of either discontinuity function is detected from 
one end of the integration interval to the other (see Figure 6.56). Several options are possible when 
it comes to estimating the point in time where the discontinuity function is zero. One approach is 
illustrated in Figure 6.57.
FIGURE 6.57  Quadratic interpolation to locate approximate pt of discontinuity.

563
Intermediate Numerical Integration
The first step is to fit a linear function through the pts (ti, φold) and (ti + T, φnew), where ti, φold and 
φnew are provided as inputs to “INTRP.m.” The root of the linear function occurs at ti + bT, where
	
b
b
=
<
<
φ
φ
φ
old
old
new
−
(
)
0
1
	
(6.319)
The time ti + bT can be treated as the pt where the discontinuity function is approximately zero. 
However, an improved estimate is possible if we determine φ0, the value of the discontinuity func­
tion at ti + bT, and generate the quadratic function through all three pts, namely, (ti, φold), (ti + T, 
φnew), and (ti + bT, φ0). The root of the quadratic interpolation polynomial that falls between ti and 
ti + T is the desired time ti + aT, (0 < a < 1). “INTRP.m” returns the value of “a.”
Once the pt ti + aT is identified, RK-4 integration is repeated for the interval (ti, ti + T) by 
sequentially integrating from ti to ti + aT and then from ti + aT to ti + T. Note that since the state 
transitions between regions at points where either discontinuity function is zero, the state marker 
“ISTATE” is switched from 1 to 2 or vice versa in preparation of the RK-4 integration from ti + aT 
to ti + T (see Figure 6.56).
An alternative to the method described involves the use of an iterative root-solving technique 
(e.g., Bisection, False Position, and so forth) to locate the pt ti + aT. The number of iterations is 
controlled by setting a tolerance on the magnitude of the discontinuity function at ti + aT.
A numerical example for the pendulum shown in Figure 6.53 follows. Baseline system parameter 
values are
Radius of spherical pendulum bob: r = 2.5 in
Density of iron pendulum bob: ‘γbob = 491.32 lb/ft3
Length of negligible mass pendulum rod: R = 3 ft
Vertical distance from center of rotation to liquid surface: L = 2.25 ft
Density of liquid: γ = 62.4 lb/ft3
Drag coefficient on pendulum bob in liquid: α = 0.15 lb/ft/s
6.7.1  Physical Properties and Constant Forces Acting on the Pendulum Bob
	
Weight:
lb
ft
ft
lb
ft
f
iron
W
V
r
=
=
×
=
×
γ
π
π
491 32
4
3
491 32
4
3
2 5
12
3
3
3
3
.
.
.
t
Mass
slug
0.5785 slug





=
=
=
=
3
18 61
18 61
32 17
.
lb
:
.
.
m
W
g
	
Moment of inertia about axis of rotation: J = mR2 = 0.5785 slug × (3 ft2) = 5.21 ft lbf s2
	
Buoyant force:
lb
ft
ft
lb
ft
ft
F
V
r
B =
=
×
=
×
γ
π
π
62 4
4
3
62 4
4
3
2 5
12
3
3
3
3
.
.
.





=
3
2 36
.
lb
	
Angle of pendulum at initial contact with liquid:
	
θL
L
R
=












=
−
−
cos
cos
.
.
1
1 2 25
3
0 7227 rad (41.41°)
	

564
Simulation of Dynamic Systems with MATLAB® and Simulink®
In addition to the model system parameters, initial conditions must be specified. Choosing 
θ( )
0
75
=
°, θ( )
0
0
= °/s, the pendulum dynamics were simulated consistent with the logic outlined 
in the flow chart shown in Figure 6.56.
A Simulink diagram of the pendulum dynamics using fixed-step RK-4 integration, without 
searching for the precise time when a discontinuity occurs, is shown in Figure 6.58. A step size of 
T = 0.1 s was used in both cases.
Comparison of the simulation results for the pendulum angle θ(t) is shown in Figure 6.59. The 
MATLAB M-file “Ch6_discont.m” was executed with a time step of T = 0.1 s. A third plot intended 
to represent the exact solution for θ(t) is also shown. It was obtained by running the Simulink model 
FIGURE 6.58  Simulink diagram for pendulum dynamics.
FIGURE 6.59  Simulated results using method for locating discontinuities, Simulink, and approximation to 
“exact” solution.

565
Intermediate Numerical Integration
with RK-4 and step size of T = 0.001 s. Using a time step of this magnitude negates almost entirely 
the adverse effect of a discontinuity occurring part way into the integration interval. The three 
responses are in close agreement resembling that of a lightly damped linear second-order system.
Useful information about the pendulum dynamics can be obtained from inspection of time histo­
ries and phase plots of additional system variables. Figure 6.60 is a phase portrait of the state trajec­
tory evolving from the initial point θ(0) = 75°, θ( )
0
0
= °/s and lasting for a period of 15 s.
The points along the trajectory where θ(t) = θL and θ(t) = −θL indicates a transition from one 
region to the other, that is, the first marker corresponds to the pendulum entering the liquid for the 
first time on its way down.
Figure 6.61 includes time histories of θ(t), θ( )t , and θ( )t . In addition, the marker “ISTATE” is 
shown fluctuating between 1 and 2 corresponding to transitions of the pendulum bob from air to 
water and vice versa.
The pendulum bob velocity and the drag force exerted by the liquid opposing its motion were 
captured in the Simulink model scopes and are shown in Figure 6.62.
250
Phase portrait
1st transition
θ = –θL = –41.4 deg
θ = θL = 41.4 deg
θ (deg)
dθ/dt (deg/s)
200
150
100
50
0
–50
–100
–150
–200
–250
–80
–60
–40
–20
0
20
40
60
80
FIGURE 6.60  Plot of state trajectory x t
t
x t
t
2
1
( )
( )
( )
( )
.
=
=
θ
θ
vs
.
d2θ/dt2 (deg/s2)
0
–500
500
–250
250
0
5
10
15
t (s)
ISTATE
0
1
2
5
10
15
t (s)
0
–200
200
–100
100
0
5
10
15
dθ/dt (deg/s)
90
45
0
θ(t) (deg)
–45
–90
0
5
10
15
θ = θL = 41.4 deg
θ = –θL = –41.4 deg
FIGURE 6.61  Time histories of θ, dθ/dt, d2θ/dt2 and state marker “ISTATE.”

566
Simulation of Dynamic Systems with MATLAB® and Simulink®
The constant buoyant force of 2.36 lb opposes the motion of the pendulum bob on the way down 
and does the opposite while the bob is moving upward. The drag force never exceeds 2 lb in mag­
nitude. The pendulum bob weighs 18.6 lb. From Figure 6.62, we notice that it continues to oscillate 
for a relatively long period of time due to minimal damping forces.
The discontinuous nature of the system is best illustrated by taking a closer look at the angu­
lar acceleration. Figure 6.63 shows the step changes that occur as the pendulum bob transitions 
between the two media. Note that the step changes in angular acceleration are greater at the 
moments when the pendulum bob is going from air to liquid compared with transitions from 
­liquid to air. Can you explain why this happens? Exercise 6.34 addresses this point in greater 
detail.
Suppose we increase the damping effect of the liquid by replacing it with a heavier fluid. Instead 
of water, imagine a liquid with weight density of γ = 150 lb/ft3 responsible for producing a drag 
coefficient of α = 0.3 lb/ft/s. Further, suppose the pendulum bob is released with an initial angular 
displacement θ(0) = 75° and initial velocity of θ( )
0
90
=−
°/s.
Figure 6.64 shows a portion of the transient responses obtained from the discontinuity method 
(T = 0.1 s), Simulink with RK-4 (T = 0.1 s) and Simulink with RK-4 (T = 0.001 s) as the approxi­
mation to the exact solution. Values obtained from the method based on locating the points of 
100
–100
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
5.5
6
75
–75
50
–50
25
–25
0
1000
–1000
750
–750
500
–500
250
Air to liquid transition 
Liquid to air transition 
Angular displacement (left axis) and angular acceleration (right axis)
–250
0
t (s)
d2θ/dt2 (deg/s2)
θ (deg)
FIGURE 6.63  Angular acceleration showing discontinuities at air/liquid transitions.
FIGURE 6.62  Velocity and drag force on pendulum bob.

567
Intermediate Numerical Integration
discontinuity within the integration interval are closer to the “exact” solution than the values 
obtained from conventional implementation of RK-4 integration.
It is instructive to look at graphs of the discontinuity functions φ1(x1, x2) and φ2(x1, x2). Figure 6.65 
shows their time histories for the conditions listed in Figure 6.59.
The zero crossings of φ1(x1, x2) and φ2(x1, x2) correspond to the transitions of the system between 
regions S1 and S2. A close-up view of the discontinuity functions is shown in Figure 6.66.
Note how the quadratic interpolation function “INTRP” successfully locates the zero crossings, 
enabling the RK-4 integrator to stop at the correct point in time within the integration interval, reset 
the derivative functions, and then continue to integrate for the remainder of the interval as indicated 
in the flow chart in Figure 6.56.
100
75
50
25
0
–25
–50
–75
–100
0
0.5
1
1.5
2
2.5
Discontinuity method (T = 0.1 s)
Comparison of discontinuity method, simulink and “Exact” solutions
Simulink (T = 0.1 s)
“Exact” (simulink, T = 0.001 s)
3
3.5
4
4.5
5
t (s)
θ = θL = 41.4 deg
θ(0) = 75 deg, dθ(0)/dt = 0 deg/s
α = 0.15 lb per ft/s, γ = 62.4 lb per cu ft
θ(t) (deg)
θ = –θL = –41.4 deg
FIGURE 6.64  Comparison of solutions with new initial conditions and parameters.
1
0
0
1
2
3
4
5
ϕ1
6
7
Discontinuity functions
8
t (s)
9
10
11
12
13
14
15
–1
–2
1
0
0
1
2
3
4
5
ϕ2
6
7
8
t (s)
9
10
11
12
13
14
15
–1
–2
FIGURE 6.65  Plot of discontinuity functions.

568
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXAMPLE 6.12
Using the baseline conditions for the pendulum except for γ = 150 lb/ft3 and α = 0.3 lb/ft/s, deter­
mine the largest initial angle of the pendulum rod, so that when it is released with zero initial angu­
lar velocity, its fails to emerge from the liquid. Plot the angular rotation of the pendulum as a check.
The problem is to find the initial condition θ(0) ≥ 0, which satisfies
	
Min
θ
θ
θ
(0)
0
(
≥
=−
t
L
)
	
(6.320)
A simple search for the required initial condition was performed by varying θ(0) from 45° to 60° 
in increments of 0.5°. The results are shown in graphical form in Figure 6.67. The answer appears 
to be slightly less than 52°.
Discontinuity functions
0.5
–0.5
0
1
2
3
4
5
6
0.25
–0.25
ϕ1
ϕ1 = 0
ϕ1 = 0
ϕ1 = 0
0
t (s)
0.5
–0.5
0
1
2
3
4
5
6
0.25
–0.25
ϕ2
ϕ2 = 0
ϕ2 = 0
ϕ2 = 0
ϕ2 = 0
0
t (s)
FIGURE 6.66  Close-up view of discontinuity functions φ1(x1, x2) and φ2(x1, x2).
FIGURE 6.67  Results of search for θ(0) resulting in θmin = −θL.

569
Intermediate Numerical Integration
  The pendulum response with θ(0) = 52° was generated for the conditions shown in Figure 6.68 
using RK-4 integration with step size T = 0.001 s. The result is shown in Figure 6.68. As expected, 
the minimum angular response is approximately −θL = −41.4°.
EXERCISES
	6.32	 The pendulum bob in Example 6.12 is released from the vertical position θ(0) = π rad with 
initial angular velocity θ0. Find θ0 if the bob makes a complete revolution and returns to the 
vertical position with zero angular velocity.
	6.33	 The pendulum bob shown in Figure E6.33 passes through two different nonmixing liquids. 
Physical parameter values are
	
	 Radius of spherical pendulum bob: r = 3 in
	
	 Density of pendulum bob: γbob = 250 lb/ft3
	
	 Length of negligible mass pendulum rod: R = 4 ft
	
	 Vertical distance from center of rotation to liquid 1 surface: L1 = 2.5 ft
	
	 Vertical distance from center of rotation to liquid 2 surface: L2 = 3.5 ft
	
	 Density of liquid 1: γ1 = 62.4 lb/ft3
	
	 Density of liquid 2: γ1 = 175 lb/ft3
	
	 Drag coefficient on pendulum bob in liquid 1: αl = 0.10 lb/ft/s
	
	 Drag coefficient on pendulum bob in liquid 2: α2 = 0.65 lb/ft/s
FIGURE 6.68  Simulated pendulum response with initial condition θ(0) = 52°.
FIGURE E6.33

570
Simulation of Dynamic Systems with MATLAB® and Simulink®
		
With state vector (
)
x x
1
2
,
,
(
= θ θ), the state equations are
	
x
f
x x
x x
S
f
x x
x x
S
f
x x
1
11
1
2
1
2
1
12
1
2
1
2
2
13
1
2
=
∈
∈
(
,
), (
,
)
(
,
), (
,
)
(
,
), (x x
S
x
f
x x
x x
S
f
x x
1
2
3
2
21
1
2
1
2
1
22
1
2
,
)
(
,
), (
,
)
(
,
), (
∈





=
∈

x x
S
f
x x
x x
S
1
2
2
23
1
2
1
2
3
,
)
(
,
), (
,
)
∈
∈





	
		
where the regions S1, S2, and S3 in state space are described by
	
	
S1: {(xi, x2)|pendulum bob in air}
	
	
S2: {(x1, x2)|pendulum bob in liquid 1}
	
	
S3: {(x1, x2)|pendulum bob in liquid 2}
	
a.	 Find expressions for S1, S2, and S3 similar to those in Equation 6.310.
	
b.	 Find the state derivative functions fij, i = 1, 2, j = 1, 2, 3.
	
c.	 Find the discontinuity functions φ1(x1, x2), φ2(x1, x2), φ3(x1, x2), and φ4(x1, x2), where φi(x1, 
x2) = 0, i = 1, 2, 3, 4 indicates the pendulum bob is passing from region S1 to S2, S2 to S3, S3 
to S2, and S2 to S1, respectively.
	
d.	 Use the method outlined in the flow chart in Figure 6.66 to simulate the angular posi­
tion and angular velocity of the pendulum for initial conditions θ(0) = 90° and θ( )
0
0
= °/s. 
Choose any of the RK integrators with integration step size T selected on the basis of a 
trade-off between accuracy and computational effort. Plot time histories of θ(t) and θ( )t  
as well as a phase portrait similar to the one in Figure 6.60 showing the points where the 
system transitions between regions.
	
e.	 Simulate the same conditions in part (d) using Simulink with an excessively small integra­
tion step size T in order to obtain an approximation to the exact solution. Compare the 
results in parts (d) and (e).
	6.34	 According to the graphs in Figure 6.63, the angular acceleration appears to be continuous 
when the pendulum bob passes from liquid to air for the first time.
	
a.	 Verify this by plotting d2θ/dt2 vs. t shortly before to shortly after this occurs.
	
b.	 For this to happen, the component of the buoyant force FB in the direction of motion and 
the drag force FD must effectively cancel each other out. On the same axes, plot both 
quantities and compare them at the moment the pendulum bob exits from the liquid for 
the first time.
	6.35	 Consider the pendulum in Figure 6.53 with physical properties
		
Radius of spherical pendulum bob: r = 2 in
		
Density of pendulum bob: γbob = 400 lb/ft3
		
Length of negligible mass pendulum rod: R = 5 ft
		
Vertical distance from center of rotation to liquid surface: L = 3 ft
		
  The drag coefficient α (lb/ft/s) is related to the density of the liquid γ(lb/ft3) according to the 
relationship α = 0.05 + 0.02γ, 50 ≤ γ ≤ 400.
		
  The pendulum is released from an almost vertical position θ(0) = 179.9° with zero 
angular velocity. Simulate the pendulum dynamics using any suitable method and prepare 
graphs of
	
a.	 θmax vs. γ(50 ≤ γ ≤ 400) where θmax is the total number of degrees the pendulum rotates 
through on its first swing.
	
b.	 tsettling time vs. γ(50 ≤ γ ≤ 400) where tsettling time is the time in seconds for the transient 
response to remain within 2% of its steady-state equilibrium value θss = 0°.
	
c.	 θmaxvs.
)
(γ
γ
50
400
≤
≤
 where |
|
max
θ
 is the absolute value of the maximum angular velocity 
in. °/s.
	6.36	 A rolling cart of mass m is connected to a stationary support located at x = 0 by a spring with 
stiffness k and damper with damping constant c as shown in Figure E6.36a:

571
Intermediate Numerical Integration
		
  The cart is subjected to an external force F(t). The coefficient of rolling friction changes 
from surface 1 (µ = µ1) to surface 2 (µ = µ2) at x = L. The frictional force at each wheel is 
Fµ = µ (mg/4) where µ is either µ1 or µ2 depending on which surface the wheel is in contact 
with. A diagram of the cart and the forces acting on it is shown in Figure E6.36b. Note that the 
state definition x1 = x and x
x
2 = .
		
Introduce regions S1, S2, and S3 in state space {x1, x2} according to the cart location, that is,
	
	 S1 = {(x1, x2)|x1 + 0.5D < L}—cart is located entirely on surface 1
	
	 S2 = {(x1, x2)|x1 − 0.5D < L and x1 + 0.5D > L}—cart is on surface 1 and surface 2
	
	 S3 = {(x1, x2)|x1 − 0.5D > L}—cart is located entirely on surface 2
	
a.	 Find expressions for fij(xi, x2), i = 1, 2, j = 1, 2, 3, the ith state derivative xi when the state 
(x1, x2) is located in region Sj.
	
b.	 Find the discontinuity functions φ1(x1, x2) and φ2(xi, x2) where
	
	 φ1
2
1
2
0
(
)
(
)
,
,
x x
x x
i
=
⇒
 is transitioning between S1 and S2
	
	 φ2
1
2
1
2
0
(
)
(
)
,
,
x x
x x
=
⇒
 is transitioning between S2 and S3
	
c.	 Implement the method outlined in the flow chart of Figure 6.56 using RK-4 integration 
with integration step size T, based on a trade-off between accuracy and computational 
effort, to simulate the cart dynamics. Baseline conditions are
	
	 µ1 = 0.4, µ2 = 0.05
	
	 m = 30 slugs, c = 5 lb/ft/s, k = 25 lbf/ft
	
	 L = 25 ft, D = 5 ft
	
	 x(0) = L, x( )
0
0
= ft/s
FIGURE E6.36A
FIGURE E6.36B

572
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	   The applied force F(t) is a step input of magnitude F0 = 250 lb. Plot the cart position x(t) 
vs. time and cart velocity x t( ) vs. time.
	
d.	 Simulate the cart dynamics with Simulink, and compare the results with those obtained in 
part (c).
	6.37	 A block diagram for a simple on–off tank level control system is shown in below figure. 
The flow in to the tank F1 is either zero or F depending on the state of the on–off controller, 
that is,
	
F
Fu
u
e
e
e
H
H
com
1
0
0
1
0
=
=
≤
>



=
−
,
,
,
where
	
		
  The tank dynamics is modeled by
	
A H
t
F
F
F
cH
d
d
+
=
=
0
1
0
1 2
,
/
	
	
a.	 The state derivative is
	
d
d
H
t
f H
H
S
f H
H
S
=
∈
∈



1
1
2
2
(
),
(
),
	
	
	   Regions S1 and S2 are defined such that when H is in region S1 of state space, the control­
ler is off, and the opposite is true when H is in region S2. Find expressions for S1 and S2 in 
terms of the state H.
	
b.	 Find expressions for the state derivate functions f1(H) and f2(H).
	
c.	 Find the discontinuity function φ(H) that specifies which region the state is in based on its 
sign, that is, φ(H) = 0 implies the state H is transitioning between the two regions.
	
d.	 Use the method that finds the time of the discontinuity to simulate the tank level. Choose 
any RK integrator with suitable integration step size based on accuracy and computation 
requirements.
	
	 The following conditions apply:
	
A
c
H
F
=
=
=
=
20
0 4
10
0
0
2
3
1 2
3
ft
ft /min/ft
ft /min
ft
,
.
,
,
( )
/
	
	
H
t
com =
≥
15
0
,
	
	
	   Run the simulation for a period of time sufficient for the controller to cycle on and off 
several times and plot time histories of H(t) and H t( ).
	
e.	 Plot a phase portrait H vs. H showing the points where the controller cycles between its two 
states.

573
Intermediate Numerical Integration
	
f.	 Simulate the system for the same conditions in part (d) with Simulink using RK-4 
­integration with an excessively small step size in order to approximate the exact solution. 
Compare the results with those in part (d).
6.8  CASE STUDY: SPREAD OF AN EPIDEMIC
Epidemic models for various fatal and nonfatal diseases in humans and animals have been postu­
lated since the early 1900s (Kermack and McKendrick 1927; Hethcote 1976; Keen and Spain 1992; 
Brown and Rothery 1993). Modern-day epidemics such as the spread of AIDS have been studied 
with the help of simulation models (Isham 1988; Perelson 1993; Culshaw and Ruan 2000; Coutinho 
et al. 2001).
The formulation of a mathematical model in the field of epidemiology requires some basic infor­
mation about disease and how it spreads among a population. To start with, symptoms of the disease 
may not appear at the time a host is infected, rather an incubation period may be necessary prior to 
appearance of the symptoms. A host infected with a pathogen may become infectious only after a 
period of latency. The infectious period is the duration of time during which the host is capable of 
transmitting the disease to others in the population. The incubation, latent, and infectious periods 
depend on the pathology of the disease.
For certain diseases, the host may experience an immune period where the infection has run its 
course, the host has recovered, and cannot be re-infected. However, the individual may still be a 
carrier and capable of transmitting the disease to susceptible individuals. As a means of preventing 
or limiting the scope of an epidemic, some infected individuals may be isolated from the population 
to prevent transmission of the disease to susceptible individuals. If the disease is potentially fatal, a 
number of infected individuals will die. If a vaccine exists, individuals receiving the vaccine pass 
from the class of susceptibles to the class of recovered individuals.
Early epidemic models concentrated on the movement of individuals through three stages, 
namely, (S)usceptible, (I)nfected carrier, and (R)ecovered. The so-called S-I-R models relate the 
state derivatives dS/dt, dI/dt, and dR/dt to the states S, I, and R using expressions formulated 
by epidemiologists to describe the interactions between individuals in each group. Inherent in 
the models are a number of parameters (rate constants) associated with infection, transmission, 
recovery, mortality, and so forth. Later on, more sophisticated models were developed to account 
for additional stages. Finally, partial differential equations evolved as modelers attempted to pre­
dict both temporal and spatial variations of the populations in each stage during the course of an 
epidemic.
The following information is postulated to provide a framework for studying the dynamics of an 
epidemic stemming from the spread of a fatal disease.
•	 The initial population consists entirely of susceptible individuals, that is, those at risk of 
contracting the disease.
•	 The disease is introduced by individuals immigrating from outside the area, a fraction of 
which are sick.
•	 A subset of the susceptible individuals contract the disease through contact with sick 
individuals.
•	 An outbreak of the disease is recognized after a specified period of time immediately fol­
lowed by a cessation of immigration.
•	 After recognizing the existence of a possible epidemic, a segment of the susceptible indi­
viduals is inoculated with a vaccine making them immune to the disease.
•	 Starting at the same time inoculations begin, a portion of those who are sick or become 
sick later are separated from the general population by quarantine.
•	 Sick individuals either recover and become immune or die.

574
Simulation of Dynamic Systems with MATLAB® and Simulink®
Members of the population exist in one of five states.
x1(t): Number of susceptible people at time t
x2(t): Number of sick people in population at time t
x3(t): Number of immune people at time t
x4(t): Number of deceased people at time t
x5(t): Number of sick people quarantined from population at time t
Possible transitions between states are illustrated in Figure 6.69. Note that the m = m(t) is the rate 
of immigration and n = n(t) represents the rate of inoculation of susceptible individuals.
The state vector x is [x1 x2 x3 x4 x5]T. A mathematical model of the system requires knowledge of 
a vector function f
x
t
m
(
)
, ,
, describing the state derivatives. In this example, the system of coupled 
differential equations x
f
x
t
m
=
( , ,
) is given by
	
d
d
x
t
f t x m
cx x
m
n
1
1
1 2
=
= −
+
−
( , ,
)
α
	
(6.321)
	
d
d
)
x
t
f t x m
cx x
a x
a x
a x
m
2
2
1 2
23
2
24
2
25
2
1
=
=
−
−
−
+
−
( , ,
)
(
α
	
(6.322)
	
d
d
x
t
f t x m
a x
a x
n
3
3
23
2
53
5
=
=
+
+
( , ,
)
	
(6.323)
	
d
d
x
t
f t x m
a x
a x
4
4
24
2
54
5
=
=
+
( , ,
)
	
(6.324)
	
d
d
x
t
f t x m
t
t
a x
a x
a x
t
t
5
5
0
25
2
53
5
54
5
0
0
0
=
=
≤≤
−
−
>



( , ,
)
,
,
	
(6.325)
The constants a23, a24, a25, a53, a54, c, and α are system parameters, which describe the transi­
tions by individuals from one state to another. For example, the disease spreads by contact between 
susceptible and sick members of the population, and c is a transmission constant. The constant α 
is the fraction of immigrants who are susceptible. All terms on the right-hand side of Equations 
6.321 through 6.325 are in units of individuals per unit of time, the same as the left-hand-side state 
derivatives.
The time t0 in Equation 6.325 is the length of time it takes to recognize the outbreak of a possible 
epidemic. Quarantining of sick people, cessation of immigration, and inoculation of susceptible 
individuals begin at t = t0. Immigration and inoculation profiles are shown in Figure 6.70.
FIGURE 6.69  State transition diagram.

575
Intermediate Numerical Integration
The simple model ignores birth and deaths from other causes and does not account for emigra­
tion of individuals. The following values have been arbitrarily selected for conducting a baseline 
study.
	
a
a
a
23
24
25
0 1
0 003
0 05
=
=
=
.
,
.
,
.
per week
per week
per week 	
	
a
a
53
54
0 1
0 003
=
=
.
,
.
per week
per week 	
	
α =
=
×
−
0 9
2 25 10 8
1
. ,
.
c
−people
/week 	
	
t
I
N
0
0
0
8
2500
0
=
=
=
weeks
people/week
inoculations/week
,
,
	
Note that the baseline conditions assume zero inoculations following the recognition of a 
­possible epidemic. A number of interesting simulation studies are possible. First, we will investigate 
various inoculation policies and their mitigating effect on spreading of the disease in a population 
initially consisting of 10 million susceptible individuals.
The classic RK-4 numerical integrator introduced in Equations 8.60 through 8.64 was chosen 
for simulating the system response. After several trial runs with different integration step sizes, 
T = 0.1 weeks were selected. The results of a baseline and additional simulations using inoculation 
rates of 5000, 10,000, and 15,000 people per week are shown in Figures 6.71 through 6.74. Refer to 
FIGURE 6.70  Immigration and inoculation profiles.
10
8
6
4
2
0
0
20
40
60
Simulation results (N0 = 0 inoculations per week)
× 106
People
80
s
x3
x1
100
120
140
160
180
200
6
5
4
3
2
1
0
0
20
40
60
Simulation results (N0 = 0 inoculations per week)
× 105
People
80
x2
x5
x4
100
t (weeks)
120
140
160
180
200
FIGURE 6.71  Epidemic response for baseline conditions (N0 = 0 inoculations/week).

576
Simulation of Dynamic Systems with MATLAB® and Simulink®
MATLAB M-file “Ch6_CaseStudy.m.” For simplicity, the subscript “A” has been dropped from the 
notation for the discrete-time signals.
A summary of the results is listed in Table 6.12.
As expected, the highest inoculation level results in the fewest deaths. The third row shows the 
maximum number of sick people at any time in the 200 week study period. The peak is reduced 
from 585,834 sick at one time to 268,548 as a result of administering 15,000 vaccinations/week 
compared with none at all.
The discrete-time state variable x2(i) represents the number of infected individuals at the discrete 
times ti = iT, i = 0, 1, 2, …. The cumulative number of people who have been sick up through time 
10
8
6
4
2
0
0
20
40
60
Simulation results (N0 = 10,000 inoculations per week)
× 106
People
80
s
x3
x1
100
120
140
160
180
200
4
3
2
1
0
0
20
40
60
Simulation results (N0 = 10,000 inoculations per week)
× 105
People
80
x2
x5
x4
100
t (weeks)
120
140
160
180
200
FIGURE 6.73  Epidemic response (N0 = 10,000 inoculations/week).
10
8
6
4
2
0
0
20
40
60
Simulation results (N0 = 5000 inoculations per week)
× 106
People
80
s
x3
x1
100
120
140
160
180
200
6
5
4
3
2
1
0
0
20
40
60
Simulation results (N0 = 5000 inoculations per week)
× 105
People
80
x2
x5
x4
100
t (weeks)
120
140
160
180
200
FIGURE 6.72  Epidemic response (N0 = 5000 inoculations/week).

577
Intermediate Numerical Integration
ti is denoted s(i) (see Figures 6.71 through 6.74 and Table 6.12). It is computed by numerical integra­
tion of ds/dt, where (Figures 6.72 and 6.73)
	
d
d
s
t
m
cx x
=
−
+
(1
1 2
α)
	
(6.326)
Note the difference between ds/dt and dx2/dt. The former is the rate of change of newly infected 
individuals, that is, those people entering state x2. As a result, s(t) is monotonically increasing. The 
state derivative dx2/dt is the overall rate of change of infected people in the nonquarantined popula­
tion. It is negative when more individuals are leaving state x2 than entering, which results in x2(t) 
decreasing [Figure 6.74].
The same RK-4 integration method and step size were used to numerically integrate the discrete-
time signal (1 − α)m(i) + cx1(i)x2(i) to generate s(i).
A valuable check on the accuracy of the simulation is possible. Conservation of individuals can 
be verified at every discrete point in time. In this case, the total number of individuals begins at 10 
million and increases at a rate of 2500 per week for 8 weeks. Hence, after approximately 2 months, 
the total population consists of 10,020,000 people distributed among the five states x1, x2, x3, x4, and 
10
8
6
4
2
0
0
20
40
60
Simulation results (N0 = 15,000 inoculations per week)
× 106
People
80
s
x3
x1
100
120
140
160
180
200
3
2
1
0
0
20
40
60
Simulation results (N0 = 15,000 inoculations per week)
× 105
People
80
x2
x5
x4
100
t (weeks)
120
140
160
180
200
FIGURE 6.74  Epidemic response (N0 = 15,000 inoculations/week).
TABLE 6.12
Summary of Epidemic Simulation Results after 200 Weeks
N0 = 0
N0 = 5000
N0 = 10000
N0 = 15000
x1(200)
4,368,093
4,233,072
4,125,930
4,016,139
x2(200)
8089
8038
7614
6395
Max x2
585,834
469,690
362,637
268,548
x3(200)
5,471,549
5,630,535
5,763,273
5,900,147
x4(200)
164,146
140,116
115,298
90,604
x5(200)
8123
8238
7885
6715
s(200)
5,700,412
4,867,698
4,007,144
3,149,525

578
Simulation of Dynamic Systems with MATLAB® and Simulink®
x5. Summing x1(200), x2(200), x3(200), x4(200), and x5(200) in each column of Table 6.12 will show 
that all individuals are accounted for. This is crucial in the context of real-world simulations where 
analytical solutions of the continuous-time model are not available.
Sensitivity analyses with respect to each system parameter at baseline conditions offer insight 
into the dynamics of the epidemic. To illustrate this, suppose we are interested in relating the 
­number of individuals who contract the disease with the system parameter that measures how 
­contagious the disease is, that is, the transmission coefficient c that appears in Equations 6.321 and 
6.322. The parameter was allowed to vary by 25% in both directions from the nominal or baseline 
value c = 2.25 × 10−8 people−1/week, and the simulation is repeated with the remaining parameters 
fixed at their baseline values. Figure 6.75 shows that s(200), the predicted number of sick people in 
the first 200 weeks, increases as the transmission coefficient parameter c increases, as one would 
expect.
A similar study was conducted to investigate the relationship between the cumulative number 
of deaths x4(200) and the transmission coefficient c. The graph in Figure 6.76 shows what can be 
expected in terms of the number of people dying over the 200 week period as the level of conta­
giousness varies about the baseline value.
Try running the simulation with the same baseline conditions to ascertain the numerical value 
of c that results in the epidemic spreading to every member of the population. A number of other 
studies are suggested in the exercise problems.
EXERCISES
	6.38	 In the study that looked at the effect of various inoculation rates, prepare graphs of
	
a.	 Cumulative sick vs. inoculation rate
	
b.	 Number of deaths vs. inoculation rate
	
c.	 Peak number of sick vs. inoculation rate
		
  Use the classic RK-4 integrator with baseline values for all parameters (except inoculation 
rate), and run the simulations for a sufficient period of time to include the transient response. 
Consider inoculation rates from 0 to 50,000 per week.
		
  Repeat parts (a), (b), and (c) using Simulink with the same numerical integrator.
Sensitivity of cumulative sick after 200 weeks to variation in
parameter measuring contagiousness of disease
8
7
6
5
4
3
2
1
0
1.6
1.8
2
2.2
c (people–1 per week)
2.4
Cumulative sick
sA (200) (people)
Baseline
2.6
2.8
3
× 106
× 10–8
FIGURE 6.75  Sensitivity analysis: s(200) vs. c.

579
Intermediate Numerical Integration
	6.39	 In the inoculation study, find the cumulative number of individuals quarantined.
	
Hint: Let q(t) represent the cumulative number of people quarantined through time t, and 
write the differential equation for q(t) similar to the procedure for finding s(t).
	6.40	 Investigate the duration of the epidemic transient period as a function of the parameter c. 
Does the epidemic last longer when the disease is more contagious?
Sensitivity of cumulative deaths after 200 weeks to variation in
parameter measuring contagiousness of disease
2.5
2.25
2
1.25
1.5
1.75
1
0.75
0.5
0.25
0
c (people–1 per week)
Cumulative deaths
x4 (200) (people)
Baseline
1.6
1.8
2
2.2
2.4
2.6
2.8
3
× 105
× 10–8
FIGURE 6.76  Sensitivity analysis: x4(200) vs. c.


581
7 Simulation Tools
7.1  INTRODUCTION
Mathematical models of dynamic systems are derived with their intended use in mind. For example, 
systems with fast internal dynamics driven by inputs that change infrequently (relative to the system 
time constants) reside in steady state the majority of the time. Accordingly, the model consists of a 
system of coupled, possibly nonlinear, algebraic equations. In this context, a solution (or solutions) 
defines an equilibrium state (or states) corresponding to fixed values of the system inputs. When 
one or more inputs change, a stable system transitions from one equilibrium state to another and 
the dynamics, that is, transient response, is ignored. Solving the steady-state algebraic equations for 
an equilibrium solution is rarely a straightforward task, particularly when dealing with nonlinear 
systems. The MATLAB steady-state solver is introduced in Section 7.2. It is designed to locate 
equilibrium states of a Simulink model.
Tuning a simulation model of a real, continuous-time system is an iterative process like the one 
shown in Figure 7.1. Assumptions about the structure of the mathematical model, that is, the state 
derivative vector f(x, u, p) and parameter values p, are tested and refined using observed data acquired 
from the system. An essential component of the validation process is minimization of an error func­
tion ε(f, p), a measure of the differences between the actual system and simulation model outputs.
A Simulink add-on called Parameter Estimation compares empirical data with data gen­
erated by a Simulink model. Using optimization techniques, Simulink Parameter Estimation 
estimates the parameter and (optionally) initial conditions of states such that a user-selected cost 
function is minimized. The cost function typically calculates a least-square error between the 
empirical and model data.
Once the mathematical model has been determined, some type of exploratory study can be 
performed to determine the “best” (in some sense) values for the controllable system parameters. 
Optimization theory is a broad area of study with roots in Operations Research and Applied 
Mathematics. It is the foundation for implementation of what are collectively called optimum seek­
ing methods. The MATLAB optimization toolbox provides the simulationist access to a number of 
algorithms for locating points in the model’s parameter space where the system performs at opti­
mum or near optimum levels. Examples are presented in Section 7.3 of using optimization for both 
parameter identification and system optimization involving Simulink models.
Another Simulink add-on, Response Optimization, is a tool that helps you tune design 
parameters in Simulink models by optimizing time-based signals to meet user-defined constraints. 
It supports continuous-time, discrete-time, and multirate models accounting for model uncertainty 
by conducting Monte Carlo simulations. Simulink Response Optimization can be used to 
tune multiinput/multioutput and adaptive controllers in nonlinear systems and optimize physical 
parameters to minimize power consumption, reduce range of motion, and tune filter coefficients.
An equilibrium state is sometimes required to serve as the initial state for a simulation investiga­
tion of the system’s dynamic response. After locating an equilibrium point of a nonlinear system 
model, the system’s response to dynamically changing inputs can be approximated by linearizing 
the equations about the equilibrium point. Accuracy of the linearized model depends in part on the 
magnitude of the state vector’s excursions from the equilibrium state. In general, if the changing 
input vector remains in close proximity to its equilibrium level, the state vector will do the same. 
Regulatory control systems are a good example of an application where linearization of process 
models has proven beneficial in both the design and analysis of the system. Section 7.4 illustrates 
the capabilities of MATLAB to linearize nonlinear models created with Simulink.

582
Simulation of Dynamic Systems with MATLAB® and Simulink®
7.2  STEADY-STATE SOLVER
Unlike linear system models, it is possible for nonlinear systems to possess any number of equi­
librium points, that is, points in state space where the state derivatives are all zero. Furthermore, 
there is no uniform approach guaranteed to determine the number or location of the equilibrium 
points.
Knowledge of a nonlinear system’s equilibrium points is important for several reasons. The first 
relates to stability. Once an equilibrium point is located, stability can be determined by linearizing 
the model’s state equations in the neighborhood of the equilibrium point. Second, the behavior of 
forced nonlinear systems is often approximated by “small signal” linearized models. The char­
acteristic dynamics (time constants, poles, critical frequencies, eigenvalues, and so forth.) of the 
linearized system depend on the location of the equilibrium point. Linearization is discussed in a 
later section.
Consider a nonlinear state model
	
x
f x u
=
( , ) 	
(7.1)
where
x and u are the state and input vectors, respectively
f(x,u) is a vector of functions defining the state derivatives
Equilibrium points xe corresponding to a constant input vector ue are solutions to the nonlinear 
system of algebraic equations
	
f x u
e
e
(
,
) = 0 	
(7.2)
Some type of numerical method for finding the solutions (xe)1, (xe)2, …, given the input ue, is 
needed. Nonlinear autonomous systems described by
	
x
f x
=
( ) 	
(7.3)
may also possess a finite (or infinite) number of equilibrium points that satisfy
	
f x
(
)
e = 0 	
(7.4)
FIGURE 7.1  Iterative procedure for simulation model validation.

583
Simulation Tools
To illustrate the point, we focus on a nonlinear system model from the field of ecology. A ­predator–
prey model for the population of fish (prey) and sharks (predator) in the ocean is (Haberman 1997)
	
d
d
F
t
F a
bF
cS
=
−
−
(
)
	
(7.5)
	
d
d
S
t
S e
S
F
=
−






λ
	
(7.6)
where F = F(t) and S = S(t) are the instantaneous populations (or population densities) of fish and 
sharks in a fixed geographical area. The system is autonomous since there are no fish or sharks 
entering or leaving the region according to an external function of time t. Conversely, harvesting 
of either population according to some predetermined schedule, independent of the levels F and S, 
would require additional terms with explicit dependence on t resulting in a nonautonomous system 
model.
The model equations are based on the following observations:
	
1.	The growth rate of fish (1/F)dF/dt is reduced from a constant “a” by an amount propor­
tional to the number of fish (which compete for the limited food supply) as well as an 
amount proportional to the number of sharks (for which the fish are the primary food 
source). Proportionality constants b and c reflect the level of competition among the fish 
for their food and the aggressiveness of the sharks.
	
2.	Shark growth rate (1/S)dS/dt is reduced from a constant e by an amount proportional to the 
ratio of sharks to fish. A higher S/F depletes the fish supply more rapidly.
Equilibrium points (Fe, Se) satisfy the steady-state algebraic equations resulting from setting the 
state derivatives to zero. Thus,
	
0 =
−
−
(
)
F a
bF
cS
e
e
e 	
(7.7)
	
0 =
−






S
S
F
e
e
e
e
λ
	
(7.8)
There is more than one equilibrium point (see Exercise 7.2). Our interest is in the nontrivial equi­
librium point where neither fish nor sharks vanish. From Equation 7.8 with the term in parenthesis 
equal to zero,
	
S
e F
e
e
= λ
	
(7.9)
Substituting Se from Equation 7.9 into Equation 7.7 gives (after simplification)
	
F
a
b
ce
e =
λ
λ +
	
(7.10)
Finally, Se is obtained from Equations 7.9 and 7.10 as
	
S
ae
b
ce
e =
λ +
	
(7.11)

584
Simulation of Dynamic Systems with MATLAB® and Simulink®
We shall return to the predator–prey model to investigate the dynamic interaction between fish 
and sharks, particularly in the vicinity of the equilibrium point (Fe, Se).
7.2.1  Trim Function
Figure 7.2 shows a Simulink diagram for simulating the predator–prey ecosystem modeled by 
Equations 7.5 and 7.6. The model name is “Fish_Sharks.mdl.” Parameters “a,” “b,” “c,” “e,” and 
“lam” are assigned values in the MATLAB M-file “Ch7_Fish_Sharks.m.” There are no inputs and 
the two states are designated as outputs.
A function “trim” is called from MATLAB to search for equilibrium points associated with a 
named Simulink model file. The “trim” function call is
[x, u, y, dx] = trim ('Fish_sharks', x0)
The second parameter “x0” is the starting point in state space in the search for an equilibrium point. 
The output contains the equilibrium state “x,” input and output vectors “u” and “y” at equilibrium, 
respectively, and the value of the state derivative vector at the equilibrium point. Empty vectors are 
returned when there are no inputs or outputs defined. Should the numerical search algorithm fail to 
converge to an equilibrium point, a different starting point will sometimes fix the problem.
Optional parameters are available for constraining selected components of the state, input, and 
output vectors. For example, instead of a true equilibrium point, we may look for points in the state 
space where a subset of the state derivative vector is zero.
Numerical values of the parameters in Equations 7.5 and 7.6 were arbitrarily chosen as a = 50, 
b = 1, c = 5, e = 2, and λ = 10. Running M-file “Ch7_Fish_Sharks.m” with starting point x0 = 
(18.75; 3.75) results in
	
   x = 25.0000 u = Empty matrix: 0 – by – 1 y = 25.0000
	
       5.0000	
5.0000
	
dx = 1.0e - 011 * - 0.1954
	
                   0.0026
According to Equations 7.10 and 7.11,
	
F
a
b
ce
S
e
e
=
+
=
+
=
=
+
=
λ
λ
50 10
1 10
5 2
25
50 2
1 10
5 2
5
(
)
(
)
( )
,
( )
(
)
( )
	
FIGURE 7.2  Simulink diagram of predator–prey model.

585
Simulation Tools
in agreement with the results of the “trim” function call. Note that the ordering of the state vector 
“x” must be known. This will be addressed later in Section 7.4. The small “dx” values assure the 
accuracy of the located equilibrium point.
The transient response and state trajectory produced by the Simulink “scope” and “XY Graph” 
starting from the point (1.25Fe, 0.25Se) = (31.25, 1.25) are shown in Figures 7.3 and 7.4.
The behavior of the system starting from 100 randomly selected points in a region including the 
equilibrium point is shown in Figure 7.5. It appears that the equilibrium point is indeed stable since 
all trajectories terminate there.
50
45
40
35
30
25
20
0
0.25
0.5
0.75
F(t) vs. t
S(t) vs. t
t
1
1.25
1.5
1.75
2
6
5
4
3
S(t)
F(t)
2
1
0
0
0.25
0.5
0.75
1
1.25
1.5
1.75
2
FIGURE 7.3  Transient response of ecosystem.
5
4
3
2
1
0
20
25
30
Fish
S(t) vs. F(t)
Sharks
35
40
45
6
(Fe, Se)
(1.25Fe, 0.25Se)
Equilibrium pt
FIGURE 7.4  State trajectory of ecosystem.

586
Simulation of Dynamic Systems with MATLAB® and Simulink®
7.2.2  Equilibrium Point for a Nonautonomous System
The “trim” function can be used to locate the steady state of a forced system subjected to a con­
stant input(s). Figure 7.6 is a simplified diagram of a transducer that converts a low-level acoustic 
pressure signal p(t) to an output voltage vR(t). The movable membrane and fixed plate form a capaci­
tor. The sound waves deflect the membrane changing the separation between it and the back plate 
and, therefore, the capacitance. A bias voltage is applied to produce an electrical charge on the 
membrane. The motion of the membrane is opposed by damping and elastic forces as well as an 
electrostatic force.
The mathematical model consists of the following differential and algebraic equations describing 
the circuit and the forces acting on the membrane:
	
R Q
t
v
E
v
E
v
C
R
C
d
d +
=
=
−
0
0
,
	
(7.12)
	
Q
CvC
=
	
(7.13)
11
10
9
8
7
6
5
4
3
2
1
0
0
5
10
15
20
25
30
F
State trajectories near equilibrium point Fe = 25, Se = 5
S
35
40
45
50
55
FIGURE 7.5  State trajectories demonstrating stability of equilibrium point.
FIGURE 7.6  Variable capacitance transducer.

587
Simulation Tools
	
C
B
h
B
L
x
=
=
−
	
(7.14)
	
m
x
t
x
t
kx
F
F
e
d
d
d
d
2
2 +
+
= −
+
µ
	
(7.15)
	
F
Q
B
F
pA
e =
=
2
2
,
	
(7.16)
where
Q = Q(t) is the electric charge on the capacitor (C)
vC = vC(t) is the voltage across the capacitor (V)
vR = vR(t) is the output voltage across the resistor (V)
C = C(t) is the variable capacitance of the capacitor (F)
h = h(t) is the separation between the movable membrane and back plate (mm)
x = x(t) is the membrane displacement from equilibrium, that is, when p = E0 = 0 (mm)
Fe = Fe(t) is the electrostatic force on the membrane (N)
F = F(t) is the force acting on the membrane due to pressure p (N)
p = p(t) is the input acoustic pressure acting uniformly on the membrane (psi)
E0 is the bias voltage on the capacitor (V)
m is the mass of membrane (g)
µ is the damping coefficient (N/(mm/s))
k is the elastic constant (N/mm)
Choosing the states and output
	
x
x
x
Q x
x
y
x
y
h
y
C y
F
y
F y
vc y
Q y
v
e
R
1
2
3
1
2
3
4
5
6
7
8
=
=
=
=
=
=
=
=
=
=
=
,
,
,
,
,
,
,
,
,

	
leads to the state equations (see Exercise 7.4)
	



x
x
x
BR
x L
x
BE
x
m
kx
x
B
x
Ap
1
3
2
2
1
0
3
1
2
3
3
1
1
2
=
=
−
−
+
=
−
−
−
+




,
[
(
)
],
µ


	
(7.17)
	
y
x
y
L
x
y
B
L
x
y
x
B
1
1
2
1
3
1
4
2
2
2
=
=
−
=
−
=
,
,
,
	
(7.18)
	
y
Ap
y
x L
x
B
y
x
y
E
x L
x
B
5
6
2
1
7
2
8
0
2
1
=
=
−
=
=
−
−
,
(
) ,
,
(
)
	
(7.19)
For constant inputs E0 and p(t) = p0, the equilibrium states are found by setting the state deriva­
tives in Equation 7.17 to zero resulting in
	
x
x
L
x
BE
kx
x
B
Ap
e
e
e
e
e
3
2
1
0
1
2
2
0
0
0
2
0
,
,
,
,
,
,
(
)
,
=
−
−
+
=
−
−
+
=
	
(7.20)
Eliminating x2,e from the two equations yields a third-order polynomial in x1,e.
	
kx
kL
Ap
x
L kL
Ap
x
BE
AL p
e
e
e
1
3
0
1
2
0
1
0
2
2
0
2
2
0 5
0
,
,
,
.
−
+
(
)
+
+
(
)
+
−
=
	
(7.21)

588
Simulation of Dynamic Systems with MATLAB® and Simulink®
Equation 7.21 is solved in the M-file “Ch7_cap.m” using the following baseline parameter values:
	
A
L
m
k
R
B
=
=
=
=
=
=
π
µ
 (2 mm)
1 mm
5g  
1N/(mm/s)
5N/mm
1
2
0
0
0 0
0
00
,
,
,
.
,
.
,
,
Ω
= ×
=
=
−
5 1
F-mm
48V
1 psi
5
0
0 0
0
0
,
,
.
E
p
	
The single real root of Equation 7.21 is x1,e = xe = 0.17208282239091 mm. From the second of 
the equations in Equation 7.20, x2,e = Qe = 2.442023021386376 × 10−4 C.
A Simulink diagram of the system is shown in Figure 7.7. For reference by the “trim” function, 
the inputs are “E0” and “p0,” the states are “x,” “Q,” and “xd,” and the eight outputs are designated 
as shown. The “trim” function call in the M-file “Ch7_Cap.m” is
[x, u, y, dx] = trim ('cap_transducer', x0, u0, y0 ix, iu iy)
where the outputs “x,” “u,” and “y” are the computed equilibrium values of the state, input, and out­
put vectors, respectively. The last argument “dx” is the state derivative vector that is identically zero 
at true equilibrium conditions. The input parameters “x0, u0, and y0” are used to set initial guesses 
for the equilibrium state, input, and output while the remaining arguments “ix, iu, and iy” serve to 
constrain selected components of the state, input, and output vectors at equilibrium.
Running script file “Ch7_Cap.m” produces the results shown in Table 7.1.
Note that the second input u2,e = 0.00006894413789 is the equivalent of p0 = 0.001 psi con­
verted to N/m2. The equilibrium state from the “trim” function call is in agreement with the solu­
tion to the equilibrium equations in Equation 7.20 obtained by running the M-file “Ch7_Cap.m.”
FIGURE 7.7  Simulink diagram of capacitive transducer for use by “Trim” function.
TABLE 7.1
“Trim” Function Results
x1,e = 0.17208282239053,
x2,e = 0.00024420230214,
x3,e = –0.00000000000000
u1,e = 48.00000000000000,
u2,e = 0.00006894413789
yi,e = 0.17208282239053,
y2,e = 9.82791717760947,
y3,e = 0.00000508754796,
y4,e = 0.00059634764370,
y5,e = 0.08663775883916,
y6,e = 48.00000000001074,
y7,e = 0.00024420230214,
y8,e = –0.00000000001074
dx1 = 10−7 × 
–0.00000000000000,
dx2 = 10−7 × 
–0.00000107363007,
dx3 = 10−7 × 
–0.38882785879935

589
Simulation Tools
A common use of the “trim” function is in applications where a subset of the equilibrium state 
and/or output vector is specified and the goal is to determine the input conditions resulting in the 
partially or fully specified equilibrium state. Figure 7.8 portrays a block diagram of a system with 
four inputs, six states, and three outputs.
Instead of specifying constants for inputs u1(t), u2(t), u3(t), and u4(t), to establish an equilibrium 
state xe = [x1,e x2,e x3,e x4,e x5,e x6,e]T and output ye = [y1,e y2,e y3,e]T, only input u2 is fixed. Equilibrium 
levels of x2, x6, and y1 are also fixed, and the steady-state equations of the system must be solved 
subject to these constraints. The solution will include the values for the nonconstrained inputs u1, u3, 
and u4 along with the equilibrium values for the nonconstrained state and output components. Keep 
in mind that there may be no feasible solution or several solutions depending on the values assigned 
to the constrained variables.
To be more specific, consider an aircraft flying in level flight at a given altitude with constant 
speed, heading, and angle of attack. Certain constraints are imposed on the state vector of transla­
tional (longitudinal, lateral, and vertical) velocities (u, v, and w) and angular (roll, pitch, and yaw) 
velocities (r, p, and q) in a body reference coordinate system. The pilot wishes to know the throttle 
position and input settings that control the orientation of the control surfaces in order for the plane 
to achieve steady-state “trim” flight conditions.
The following example (Beltrami 1993) illustrates the point for an ecological system.
EXAMPLE 7.1
The growth rate of fish in a confined space at a fishery is modeled by
	
g x
u
x
rx
x
k
u
R
E
( ) =
+
−





−
1
ε
	
(7.22)
where
x = x(t) is the density of fish measured in tons per square mile
Parameters r and k determine the natural growth rate function rx(1 – x/k) of fish in the absence 
of external inputs related to harvesting and restocking
Input uE is a measure of the effort (ships, gear, manpower, etc.) per year expended in harvesting
The parameter e represents the efficiency of catching fish, measured as a fraction of each ton 
of fish caught per unit of effort
Finally, the first term accounts for restocking of fish with uR, the restocking rate measured in 
tons of fish per square mile per year.
	
a.	Find the state derivative function and verify whether the given units for parameters and 
variables are consistent. In particular, determine the units of r, k, and ε.
FIGURE 7.8  Dynamic system with equilibrium conditions specified for one input, two states, and one ­output.

590
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	Find the equation relating the equilibrium state xe and the constant inputs uR and uE  
where u
u
R
R
=
, t ≥ 0 and uE
E
t
u
( )−
, t ≥ 0.
	
	 Baseline numerical values of the system parameters are k = 4, r = 2, and ε = 0.1.
	
c.	Find xe when uR
.
= 0 3 tons = mi2/year and uE = 10 effort units/year.
	
d.	Repeat part (c) using the “trim” function. In addition, use xe found in part (c) and fix 
uR = 0 3
.  to find the equilibrium value of uE. Repeat using xe found in part (c) and fix 
uE = 10 to find the equilibrium value of uR.
	
e.	Change the numerical value of uE  to 20 and show that there exist three real solutions 
for xe.
	
f.	Verify the results in part (e) using the “trim” function with initial states x0 = 0, 2, and 5.
	
g.	Show that the middle equilibrium point is unstable and the remaining two are stable. 
Verify the nature of the equilibrium points by simulation.
	
a.	The state derivative function is obtained from
	
g x
x
x
t
u
x
rx
x
k
u
R
E
( ) =
=
+
−





−
1
1
d
d
ε
	
(7.23)
	
⇒
=
=
+
−





−
f x u u
x
t
u
rx
x
k
u x
R
E
R
E
( ,
,
)
d
d
2 1
ε
	
(7.24)
	
	
The units for each term in Equation 7.24 are tons/mi2/year, that is,
	
tons mi
year
tons mi
year
year
tons mi
tons
mi
2
2
2
2
1
=
+












−











2
1
effort
effort
year
tons m
(
i
2)
	
	
	
The units for r, k, and g are (1/year)/(tons/mi2), tons/(mi2), and 1/effort, respectively.
	
b.	Setting the state derivative function in Equation 7.24 to zero gives
	
u
rx
x
k
u x
R
e
e
E
e
+
−





−
=
2 1
0
ε
	
(7.25)
	
c.	Substituting the given values for r, k, ε, uR, and uE into Equation 7.25 produces a cubic 
polynomial in xe. The M-file “Ch7_Ex7_1.m” employs the “roots” function to find the 
roots. The results are 3.4740, 0.2630 ± j0.3218.
	
d.	“Ch7_Ex7_1.m” contains the statements
	
% A.1 Given uR_bar and uE_bar, find xe
	
uR_bar = 0.3; uE_bar = 10;
	
x0 = 10; ix = [];
	
u0 = [uR_bar;uE_bar];
	
iu = [1,2]; y0 = 0; iy = [];
	
[x, u, y, dx] = trim('fishery_1', x0, u0, y0, ix, iu, iy)
	
	 where “fishery_1” is the Simulink file name of the model shown in Figure 7.9. Note 
that “iu = [1, 2]” constrains the inputs to uR = 3 and uE = 10. The results are given in 
Table 7.2. The second part of part (d) is implemented using the following statements (see 
Table 7.2 for results):
	
% A.2 Given uR_bar and xe, find uE_bar
	
uR_bar = 0.3;
	
x0 = 3.4740;

591
Simulation Tools
	
ix = 1;
	
u0 = [uR_bar;0];
	
iu = 1;
	
y0 = 0; iy = [];
	
[x, u, y, dx] = trim("fishery_1", x0, u0, y0, ix, iu, iy)
	
	 The third part of part (d) is accomplished in a similar fashion except that uE and xe are 
fixed and uR is returned by the “trim” function. In this case, the assignments “ix = 1” 
and “iu = 1” fix xe = 3.4740 and uR = uR
	
e.	When uE = 20, the “roots” function in “Ch7_Ex7_1.m” yields three solutions to Equation 
7.25, namely, 0.1814, 1.3278, and 2.4908.
	
f.	Using the “trim” function with initial state guesses of 0, 2, and 5 produces the identical 
equilibrium states (see Cases B.1, B.2, and B.3 in Table 7.2).
	
g.	The stability of each equilibrium point can be ascertained by looking at a graph of the 
growth rate function shown in Figure 7.10. Note that the fish density increases wherever 
g(x) is positive as indicated by right-pointing arrows and conversely decreases in regions 
where g(x) is negative, shown with left-pointing arrows. Fish densities initially located in 
the region (xe)1 < x < (xe)2 will move towards (xe)1 = 0.1814 whereas initial densities satis­
fying (xe)2 < x < (xe)3 eventually approach (xe)3 = 2.4908. Consequently, the equilibrium 
point (xe)2 = 1.3278 is unstable.
The system is simulated using “fishery _ 2.mdl” (not shown) that is identical to 
“fishery _ l.mdl” except for the input blocks that are replaced by “constant” blocks and the 
“output” block is removed. Results are shown in Figure 7.11.
FIGURE 7.9  Simulink diagram of fishery system dynamics.
TABLE 7.2
Results of Using “trim” Function for Different Conditions
Case
Given
Given
Initial Guess
Result
“xd”
A.1
ūR = 0.3
ūE = 10
x0 = 10
xe = 3.4740
–2.8234 × 10−8
A.2
ūR = 0.3
xe = 3.4740
x0 = 10
ūE = 10
5.1090 × 10−11
A.3
ūE = 10
xe = 3.4740
x0 = 10
ūR = 0.3
1.2261 × 10−12
B.1
ūR = 0.3
ūE = 20
x0 = 0
xe = 0.1814
2.1407 × 10−12
B.2
ūR = 0.3
ūE = 20
x0 = 2
xe = 1.3278
0
B.3
ūR = 0.3
ūE = 20
x0 = 5
xe = 2.4908
–3.3323 × 10−10

592
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note that the middle responses in the second graph starting at x0 = 1.3, slightly less than 
(xe)2 = 1.3278 and x0 = 1.35 and slightly more than (xe)2 = 1.3278, diverge from the neighborhood 
of (xe)2, the unstable equilibrium point.
Before we proceed further, it is interesting to consider the market place’s influence on the fish 
supply. If we adopt a very rudimentary model for the harvesting effort uE, one that says the rate of 
change of harvesting depends solely on net profit as measured by the difference between revenue 
and cost, then uE(t) is governed by the first-order differential equation
	
d
d
(
)
u
t
R
C
E =
−
α
	
(7.26)
3
3
2.5
2.5
3.5
2
2
x, tons per sq mile
1.5
1.5
1
1
0.5
0
–0.5
–1
0
0.5
(xe)1 = 0.1814
(xe)1 - stable
(xe)2 = 1.3278
g(x), yr–1
(xe)2 - unstable
(xe)3 = 2.4908
(xe)3 - stable
Growth rate of fish vs. fish density
FIGURE 7.10  Graph of fish growth rate and equilibrium points.
0.2
0.1
0
0
0.5
1.5
2
2.5
(xe)1 = 0.1814 (stable)
x (tons/sq mile)
x (tons/sq mile)
x (tons/sq mile)
(xe)2 = 1.3278 (unstable)
(xe)3 = 2.4908 (stable)
x vs. t
t (yr)
3
3.5
4
4.5
5
1
3
2
1
0
0
1
3
4
5
6
7
8
9
10
2
6
4
3
5
2
0
0.5
1.5
2
2.5
3
3.5
4
4.5
5
1
FIGURE 7.11  State responses starting from several initial points.

593
Simulation Tools
where
R and C are the revenue and cost, respectively, in $/year/mi2
α is a constant
Assuming revenue depends on harvesting εuE x and selling price p leads to
	
R
u x
p
E
= ε
  ·
	
(7.27)
Where p is the selling price in $/ton. The cost is a function of effort and restocking, that is,
	
C =
+
c u
c u
E
E
R
R 	
(7.28)
where
cE is in $/effort/year/mi2
cR is in $/ton
Equations 7.26 through 7.28 give
	
d
d
u
x
p u x
c u
c u
E
E
E
E
R
R
=
−
+
α
ε
[
(
)]
	
(7.29)
  The expanded system dynamics are now modeled by the coupled nonlinear differential equa­
tions given in Equations 7.24 and 7.29. A block diagram of the system displaying the system param­
eters, input, states, and outputs is shown in Figure 7.12.
System parameters r, k, …, cR can be thought of as inputs to the system. However, they are 
distinguished from the system input uR because they generally remain fixed at assigned values. 
When they do vary, fluctuations (often unpredictable) occur with less frequency than the input.
Suppose the set of parameters in Figure 7.12 are fixed at baseline values except for the selling 
price p. Viewing the system as being “driven” by the conventional input restocking rate uR as well 
as p, we can employ the “trim” function to search for the equilibrium state and output vectors. 
The M-file “Ch7_fishery_w_economics.m” uses k = 4, r = 2, ε = 0.1, α = 0.75, cE = 2, and cR = 1 
for the fixed parameters and varies uR and p as inputs in the “trim” function call. The results are 
shown in Table 7.3.
Certain combinations of uR and p produce no solution, which raises the question of whether 
there may in fact be other equilibrium states in addition to the one given in Table 7.3 for the com­
binations considered. There is no certainty when using a search algorithm. All we can do is begin 
the search from different starting points in the hope of finding additional equilibrium states, should 
they exist. The results in Table 7.3 were obtained using a starting guess of x = 10 and uE = 20.
We now explore the possibility of the existence of an analytical solution for the equilibrium 
state. The algebraic equations resulting from setting the state derivative functions in Equations 7.24 
and 7.29 to zero are
	
   
0
1
2
=
+
−





−
u
rx
x
k
u
x
R
e
e
E e
e
ε(
)
	
(7.30)
FIGURE 7.12  Block diagram of system showing parameters, input, states, and output.

594
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
0 =
−
−
p x
c u
u
e
E
E e
R
R
ε
(
)
c
	
(7.31)
Solving for xe in Equation 7.31 gives
	
x
p u
c u
c u
e
E e
E
E e
R
R
=
+
1
ε(
) [
(
)
]
	
(7.32)
and substituting the result for xe in Equation 7.30 produces a fourth-order polynomial in (uE)e. The 
details are left for an exercise problem; however, the result is
	
β
β
β
β
β
4
4
3
2
2
1
0
0
(
)
)
(
)
(
)
u
u
u
u
E e
E e
E e
E e
+
+
+
+
=
(
	
(7.33)
where
	
β
ε
β
ε
ε
β
ε
4
3
2
= −
= −
−
+
−
=
−
kp c
kp
u p
c
rc kp
c
rc c u
kp
c
E
R
R
E
E
E
R
R
3
2 3
2
2
3
(
)
(
)
(
E
R
R
E
R
R
r c u
kp
c
r c u
)
(
) (
)
(
)
β
ε
β
1
0
= −
−
= −
2
3
3
	
(7.34)
For uR = 0 3
.  and p = 6, the solutions from “Ch7_fishery_w_economics.m” are
	
(
)
.
,
.
,
.
.
.
, .
,
.
uE
j
x
e
e
=
−
±
=
−
114 53  
75
1471
168
3 3772 4
0
0
00
0
0 0
0000
0 0219
3842
± j0.
	
There are two feasible solutions, namely, xe = 3.3772, (uE)e = 11.4053 and xe = 4.0000, 
(uE)e = 0.7500. The “trim” function has converged to the first solution (see Table 7.3).
The values shown in Table 7.3 can be verified by simulation. For example, Figure 7.13 is a simu­
lation of the system initially at equilibrium with inputs uR = uR = 0.3, p
p
=
= 6, and xe = 3.3772, 
(uE)e = 11.4053. Step changes in uR and p occur at t = 1 year. The new inputs correspond to the 
lower right corner of Table 7.3, namely, uR = uR = 1, p
p
=
= 8. The new equilibrium state agrees 
with the values shown in the table. Refer to M-file “Ch7_Fig2_12.m.”
TABLE 7.3
Equilibrium States xe and (uE)e as a Function of Input (
)
u
p
R,
uR
p
6
7
8
0.3
xe = 3.3772
xe = 2.8821
xe = 2.5189
(uE)e = 11.4053
(uE)e = 17.1501
(uE)e = 19.8447
0.5
xe = 3.4052
xe = 2.8975
xe = 2.5304
(uE)e = 11.5954
(uE)e = 17.6981
(uE)e = 20.5694
1
xe = 3.4716
xe = 2.9321
xe = 2.5559
(uE)e = 12.0522
(uE)e = 19.0668
(uE)e = 22.3675

595
Simulation Tools
EXERCISES
	7.1	
An alternate predator–prey model for fish and sharks is
	
d
d
F
t
aF
bSF
=
−
	
	
d
d
S
t
cS
dFS
= −
+
	
	
a.	 Find the nontrivial equilibrium point (Fe, Se) in terms of parameters a, b, c, and d.
	
b.	 Use the “trim” function to find the equilibrium point when the system parameters are 
a = 0.1, b = 0.03, c = 0.02, and d = 0.0025, and compare the answer with the value 
obtained using the result in part (a).
	
c.	 Verify by simulation that the equilibrium point (Fe, Se) is “neutrally stable,” which means 
that sustained oscillations in fish and shark populations occur regardless of the initial con­
ditions F(0) ≠ 0 and S(0) ≠ 0. Plot time histories F(t) and S(t), t ≥ 0 and a phase plot S vs. F.
	7.2	
For the predator–prey system governed by Equations 7.5 and 7.6,
	
a.	 Show that the points (Fe, Se) in Table E7.2 are equilibrium points.
TABLE E7.2
Fe
Se
0
0
a
b
0
Aλ
ae
bλ + ce
bλ + ce
	
b.	 Investigate the local stability of each equilibrium point by simulation of the system with ini­
tial conditions in the neighborhood of each point. Draw the phase trajectories for each case.
3.5
3.25
3
2.75
2.5
25
20
15
10
0
1
2
x (tons per sq mile)
uE (effort per year)
3
4
5
6
7
8
9
10
0
1
2
3
4
5
t (years)
uR =
0.3, t ≤ 1
t > 1
1,
p =
6, t ≤ 1
t > 1
8,
uR =
0.3, t ≤ 1
Transient response of system to step changes in uR and p
t > 1
1,
p =
6, t ≤ 1
t > 1
8,
6
7
8
9
10
FIGURE 7.13  Simulated transient response to step changes in uR and p.

596
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	 The system parameters are a = 50, b = 2.5, c = 4, e = 2, and λ = 8. Use the “trim” 
function starting at different points in the F–S plane to try and locate the last two equilib­
rium points.
	
d.	 The system parameters are a = 40, b = 4, c = 3, e = 2, and λ = 5. Use the “trim” func­
tion with S constrained to zero to find the equilibrium point (a/b, 0).
	
e.	 The system parameters are a = 50, b = 2.5, c = 0, e = 2, and λ = 8. Simulate the system 
and obtain time histories of F(t) and S(t) along with a phase trajectory when the initial 
populations are F(0) = 5 and S(0) = 2.
	7.3	
A three-species predator–prey model (Edelstein-Keshet 1988) is
	
       
d
d
x
t
axz
xy
yx
=
+
−
β
	
	
d
d
y
t
y
xy
=
−
δ
ε
	
	
     
d
d
z
t
z v
z
xy
=
−
−
µ
λ
(
)
	
	
	 where
	
	
x is a predator
	
	
y and z are its prey
	
a.	 Express the nontrivial equilibrium pt (xe, ye, ze) in terms of the system parameters.
	
b.	 Use the “trim” function to find the equilibrium pt when the system parameters are 
α = 0.075, β = 0.009, γ = 0.2, δ = 0.1, ε = 0.025, µ = 0.0015, v = 10, and λ = 0.003. 
Compare the answer with the value obtained using the result in part (a).
	
c.	 The equilibrium point is asymptotically stable. Verify by simulating the response of the 
autonomous system starting from various randomly selected points in the neighborhood of 
the equilibrium point.
	7.4	
Derive the state Equations 7.17–7.19.
7.3  OPTIMIZATION OF SIMULINK MODELS
System designers often resort to simulation to verify whether a newly designed system performs 
in a manner consistent with a set of predefined requirements and constraints. Generally speaking, 
multiple simulations are necessary to “observe” how the system responds to a range of inputs and 
parameter variations. For some systems, a subset of the inputs and parameters that affect its per­
formance are controllable. For example, ground vehicle performance can be characterized by fuel 
economy, vehicle handling, ride comfort, acceleration, emergency braking, and so forth. Given a 
single unambiguous measure of system performance, the design objective reduces to a determina­
tion of numerical values for the controllable system parameters (wheel base, springs and shocks, 
carburetor design, weight, steering ratio, and so forth) resulting in optimal performance. In contrast, 
a simulation model used to predict weather relies on knowledge of atmospheric conditions to fore­
cast future weather patterns. Neither inputs (at least not yet) nor the resulting weather is controllable.
Inherent in the process of optimizing system performance is the ability to observe or, some­
how, measure performance, that is, acquire data about the system as the parameters are varied. 
Experimenting with the real system is oftentimes impractical for reasons of expense and time con­
sumption or even dangerous depending on the levels of the system parameters. Herein lies the value 
of simulation in optimizing a system’s performance. The simulation model can be “exercised” in a 
systematic way to achieve optimum or near optimum results without the previously cited pitfalls of 
dealing with the physical system. A simple example of system optimization follows.

597
Simulation Tools
Figure 7.14 portrays a pair of objects, one designated the target and the other object intent on 
destroying it by firing a projectile weapon at it. The target is assumed to be a point moving at con­
stant velocity vT in a circular trajectory of radius L with the attacker permanently positioned at the 
center of the coordinate system. The attacker fires its weapon along a fixed direction denoted by the 
azimuth angle θ. The projectile is subjected to a linear drag force. Both objects are assumed to be 
at the same elevation for the entire time. The system is similar in nature to a surface vessel under 
attack by a torpedo fired from a submarine.
The mathematical model begins with equations describing the trajectories of the target and pro­
jectile. The angular velocity of the target is
	
ϕ = v
L
T
	
(7.35)
  The x and y coordinates of the target are related to the increasing angle ϕ (measured with respect 
to the y-axis) according to
	
x
L
y
L
T
T
=
=
sin
cos 
ϕ
ϕ
,
	
(7.36)
The projectile’s motion is governed by
	
mv
v
p
p
+
=
µ
0 	
(7.37)
where
m is the projectile mass
µ is the drag coefficient for determining the linear drag force acting on the projectile
Resolving the projectile’s velocity into x and y coordinates,
	


x
v
y
v
P
P
P
p =
=
cos 
sin 
θ
θ
,
	
(7.38)
  The distance separating the target and projectile is given by
	
D
x
x
y
y
T
P
T
P
=
−
+
−
[(
)
(
) ] /
2
2 1 2
	
(7.39)
A Simulink diagram incorporating Equations 7.35–7.39 is shown in Figure 7.15. Since the 
intended purpose of firing the projectile is to intercept the target, the performance measure of the 
system is taken as the separation between the target and projectile at the moment the projectile 
FIGURE 7.14  Diagram showing movement and position of target and projectile.

598
Simulation of Dynamic Systems with MATLAB® and Simulink®
has traveled a distance L. This distance is denoted as Dfinal. Note the presence of a “Relational 
Operator” block for terminating the simulation when the projectile’s distance “rP” exceeds “L.” 
The simulation final time is chosen as some arbitrarily large number ensuring that the simulation is 
halted at the appropriate time, which incidentally is monitored in the “Display” block.
The firing angle θ is treated as a controllable parameter. Our objective is to find θopt, that is, the 
projectile firing angle that minimizes the performance measure Dfinal (ideally to zero). A number of 
calls are made from the M-file “Ch7_target.m” to the simulation model “target_projectile.mdl” to 
explore the relationship between Dfinal and θ. The result is shown in Figure 7.16.
The function Dfinal(θ) is seen to possess a single minimum in the neighborhood of 70° when the 
remaining system parameter values are as shown in Figure 7.16. We must perform a search for θopt 
where
	
D
D
final
opt
final
Min
(
)
( )
θ
θ
θ
=
≥0
	
(7.40)
FIGURE 7.15  Simulink diagram of target and projectile system.
6000
5500
5000
4500
4000
3500
3000
2500
2000
1500
1000
500
0
0
10
20
30
40
vT = 15 mph, vP(0) = 45 mph
L = 5000 ft, m = 2000/32.2 slugs, μ = 0.1 lb-s/ft
Miss distance vs. firing angle
50
Firing angle, θ (deg)
Miss distance, Dfinal (ft)
60
70
80
90
FIGURE 7.16  Graph of miss distance Dfinal vs. projectile firing angle θ.

599
Simulation Tools
The M-file “Ch7_opt_search.m” performs a very rudimentary search for the optimum angle θopt. 
It begins by incrementing θ (starting from zero) until it finds an angle θU where Dfinal (θU) is greater 
than Dfinal at the previous firing angle. Since the previous point could be to the right of the minimum, 
the angle prior to the previous one is designated θL and the interval (θL ≤ θ ≤ θU) is guaranteed to 
contain θopt. A second sweep, with a finer gradation of θ values, is initiated, beginning at θL. It con­
tinues until θopt is found or the entire interval (θL ≤ θ ≤ θU) is traversed. θopt is detected when Dfinal(θ) 
is below some threshold, 10 ft in this case. A second sweep is tried with even finer divisions if the 
first one is unsuccessful. It must be borne in mind that each value of θ requires a simulation run to 
find Dfinal (θ). The two search phases are illustrated in Figure 7.17.
The optimization toolbox includes a number of algorithms for iteratively searching parameter 
spaces to locate local minima and maxima of a function that depends on the parameters. Optimum 
seeking methods are available for both unconstrained and constrained optimization. The optimiza­
tion toolbox and Simulink complement each other when the performance measure (objective func­
tion in optimization terminology) at some point in the parameter space depends on the dynamic 
response of a system. That is, the actual system response must be observed or simulated to obtain 
a numerical value of the objective function. This could be a final value of some output (dependent 
variable) or perhaps a certain function of several dependent variables. A common situation is 
where the objective function is evaluated as the integral of an appropriate function of the system’s 
outputs.
In situations where the objective function dependence on the system’s parameters is expressible 
in analytical or tabular form, a dynamic simulation is unnecessary and Simulink is not required. In 
either case, a unique value for the objective function at different locations in the parameter space 
must be available to the optimization routine.
Before we delve more into the practical aspects of optimization, let us take a look at how the 
MATLAB optimization toolbox can be used to find the optimum firing angle θopt in the previous 
example. The first step is the creation of a MATLAB function file to evaluate the objective function 
Dfinal for a given value of firing angle θ. The function M-file “obj_fcn_D” is listed as follows:
80
60
θU = 72.5 deg
θ (deg)
θL = 67.5 deg
40
20
0
1
5
10
15
Iteration
Phase 1 search: Δθ = 2.5 deg
20
25
30
6000
4000
Dfinal
2000
0
1
5
10
15
Iteration
20
25
30
Phase 2 search: Δθ = 0.2 deg
70
θopt = 69.7 deg
θ (deg)
69
68
1 2 3 4 5 6 7
Iteration
8 9 101112
Dfinal
200
150
100
50
0
1 2 3 4 5 6 7
Iteration
8 9 101112
FIGURE 7.17  Two-phase search for optimum firing angle.

600
Simulation of Dynamic Systems with MATLAB® and Simulink®
function f = obj_fcn_D (angle, L, m, mu, vT, vP)
% Objective function for finding D_final
T = 0.05; % integration step (sec) for RK-4
tfinal = 200; % final sim time (sec)
opts = simset ('SrcWorkSpace','current', 'DstWorkSpace', 'current'); theta 
= angle; % firing angle (rad) for 'CON' Simulink model block sim('target_
projectile', tfinal, opts); %run sim and return array D
f = D(end); % objective function: D_final (ft)
The first argument of “obj_fcn_D.m” is “angle” (the optimization parameter θ), and the remaining 
arguments are simply parameters passed to the function from the main program “Ch7_Toolbox_
opt_search.m.” The main program initializes the starting value of θ in the variable “angle_init” 
and then calls the optimization toolbox function “fminunc” to start the search θopt. The preferred 
way of calling “fminunc” depends on the version of MATLAB in use. Prior to MATLAB 6.0 
(R12), the correct syntax was
[opt_angle_rad, FVAL] = fminunc ('obj_fcn_D',angle_init, [], L, m, mu, vT, 
vP initial) % optimum angle (rad)
For MATLAB 6.0 (R12) and later, the string ‘obj_fcn_D’ was replaced by the function handle 
'@obj_fcn_D’ for faster calls to the objective function.
θopt and the minimum Dfinal are returned in “opt_angle_rad” and “FVAL” if the search algo­
rithm converges to a solution. “Ch7_Toolbox_opt_search.m” contains additional statements to sim­
ulate the system using the optimum firing angles returned by “fminunc” when the target speed is 
15 and 75 mph. Target and projectile trajectories are shown in Figures 7.18 and 7.19. The projectile’s 
position is plotted at 2.5 s intervals. The elapsed time in both cases is 80.8 s.
It is not surprising that elapsed time tf is the same for both target speeds. The time is easily found 
by recognizing that the solution to Equation 7.37 is given by
	
v
t
v
t
P
P
m t
( )
,
( /
)
=
≥
−
( )e
0
0
µ
	
(7.41)
and then integrating to obtain sp(t), the distance traveled by the projectile
FIGURE 7.18  Target and projectile motion for optimum firing angle (vT = 15 mph).

601
Simulation Tools
	
s t
v
p
p
m
t
( )
( )e (
)
=
−
∫
0
0
µ
τ τ
/
d
	
(7.42)
	
=
−
≥
−
m v
t
p
m t
µ
µ
( )[
e (
)
0 1
0
/
],
	
(7.43)
Setting sp(tf) = L and solving for tf give
	
t
m
L
mv
f
p
=−
−






=−
−
µ
µ
ln
/
1
0
2000 32 3
0 1
1
0 1 5000
2000
( )
.
.
ln
. (
)
(
/
/
s
32 2 45 5280 3600
80 79
. )
(
)
.





=
	
(7.44)
There are a number of system parameters that can be varied to study their effect on the optimum 
firing angle. Suppose we wish to investigate the relationship between θopt and the target’s speed vT. 
The M-file “Ch7_opt_theta_vT.m” sequences through a range of target speeds vT = 5, 15, 25, …, 
65, 75 mph and finds the optimum firing angle for each speed. The result is shown in Figure 7.20 
where it is apparent that the relationship is linear. Could this have been predicted?
Referring to Figure 7.14, at time tf, when the projectile has struck the target,
	
θ
π
π
θ
=
−
=
−





2
2
j t
v
L t
v
f
T
f
T
( )
(
in ft/s, in rad)
	
(7.45)
	
⇒
=
−


















θ
π
90
5000
5280
3600
180
80 7
vT
. 9 (vT in mph, in deg)
θ
	
(7.46)
FIGURE 7.19  Target and projectile motion for optimum firing angle (vT = 75 mph).

602
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
⇒
=
−
θ
90
1 3579
.
vT 	
(7.47)
which is the equation of the line shown in Figure 7.20.
The search algorithm used to find the optimum firing angle, illustrated in Figure 7.17, is rather 
simple. More sophisticated algorithms rely on the local topography of the objective function to 
guide the search for the local optimum point. The gradient vector (to be defined shortly) is computed 
at a point in multidimensional parameter space and used to arrive at a new direction and distance 
for continuing the search. The gradient vector reduces to the first derivative for one-dimensional 
searches.
Following is an example of a one-dimensional parameter search using the slope, that is, first 
derivative to locate the minimum of an objective function. In the target-projectile system, the pro­
jectile decelerates with time due to the linear drag force. Suppose the target attempts to “outrun” the 
projectile by traveling in the y-direction starting from the point (0, L), (see Figure 7.14) at constant 
speed vT . The target is in the clear if the pursuing projectile is moving slower than the target, that is, 
vp(t) < vT at some point in time and yT(t) ≥ yP(t) have been true up to that time.
We focus on the minimum separation between the target and projectile to see how close the 
two come. For a set of fixed parameters L, m, µ, vT and vP(0) ≥ vT, the time at which the minimum 
­separation occurs is required. Position of the target is given by
	
y
t
L
v t
t
T
T
( )
,
=
+
≥0 	
(7.48)
From Equation 7.42, the distance traveled and, hence, position of the projectile are
	
y
t
v
t
m
P
P
t
( )
( )(
),
/
=
−
≥
=
−
τ
τ
µ
τ
0 1
0
e
where 
	
(7.49)
The separation between the target and projectile as a function of time is
	
D t
y
t
y
t
L
v t
v
t
T
P
T
P
( )
( )
( )
( )(
),
/
=
−
=
+
−
−
≥
−
τ
τ
0
0
1
e t
	
(7.50)
FIGURE 7.20  Results of target speed sensitivity analysis.

603
Simulation Tools
A graph of Equation 7.50 with the nominal parameter values is shown in Figure 7.21. 
Differentiating D(t) in Equation 7.50 gives
	
d
dt D t
v
v
t
T
P
t
( )
( )
,
/
=
−
≥
−
0
0
e
τ
	
(7.51)
A search algorithm is implemented in “Ch7_min_sep_search.m,” which sequences through 
­values of t based on the first derivative. Specifically,
	
t
t
t D t
i
t
i
i
+ =
−
⋅
=
1
0 1 2
d
d
( )
,
, , ,...
∆
	
(7.52)
The search terminates when the magnitude of the derivative falls below a threshold that was set 
to 0.1 and ∆ was fixed at a value of 10.
Figure 7.22 shows the results of two searches for the minimum separation. The one on the left 
starts at t0 = 0 s and the other begins at t0 = 800 s. The two searches quickly locate the same 
­minimum separation of 572.4 ft at t = 349.7 s. Note the derivative function approaching zero from 
opposite directions as the two searches progress.
This example illustrates the power of using the derivative to scale the step size between 
­sequential points in the search for the optimum value of the objective function.
From elementary calculus, the local minima and maxima of a continuously differentiable func­
tion occur at critical points where the first derivative is equal to zero. Hence, from Equation 7.51, 
we can find tmin as follows
	
d
d
min
min
t D t
v
v
t
v
v
t
t
T
P
t
t
t
T
P
( )
( )e
ln
( )
/
min
=
−
=
=
−
=
⇒
=−



0
0
0
τ
τ


=−





=
2000 32 2
0 15
15
35
350 8
/
s
.
.
ln
.
	
(7.53)
5000
4500
4000
3500
3000
2500
2000
1500
1000
500
0
0
100
200
300
400
vT = 15 mph, vP(0) = 35 mph
L = 5000 ft, m = 2000/32.2 slugs, μ = 0.15 lb-s/ft
Separation between target and projectile
500
t (s)
D (ft)
600
700
800
FIGURE 7.21  Graph of separation distance vs. time.

604
Simulation of Dynamic Systems with MATLAB® and Simulink®
Substituting tmin in Equation 7.53 for t into Equation 7.50 gives (after simplification),
	
D
L
v
v
v
v
v
P
T
T
T
P
min
( )
ln
( )
=
−
−
+












τ
0
0
	
(7.54)
	
=
−
−
+












5000
2000 32 2
0 15
35
15
15
15
35
5280
36
/
ln
.
.
00
572 3





=
. ft
	
(7.55)
The numerical values obtained analytically in Equations 7.53 and 7.55 are in agreement with the 
values obtained from the iterative search for the minimum separation.
Analytical solutions for finding the optimum point are seldom possible. When the system dynam­
ics are modeled by nonlinear equations, iterative searches using simulation to obtain the objective 
function and numerical derivative approximations are often the only recourse. For example, the 
existence of nonlinear damping functions in the target–projectile system would necessitate a simu­
lation-based approach to finding the minimum separation.
The optimization toolbox employs a different search method when the objective function and its 
derivative (partial derivatives in the multivariable case) are expressible in analytic form. The M-file 
“obj_fcnD_sep.m” includes definitions of both the objective function and its first derivative. The 
essential statements are
function [f,g] = obj_fcn_D_sep(t, L, tau, vT, vP_initial)
f = L±vT*t-tau*vP_initial* (1-exp (-t/tau));
g = vT-vP_initial*exp (-t/tau);
and the calling program “Ch7_Toolbox_opt_sep_search.m” references the function file “obj_
fcn_D_sep.m” using
Sequence of points in search for minimum
6000
(a)
(b)
4500
3000
1500
0
t0 = 0
Δ = 10
Starting Pt
400
300
200
100
0
D (ft)
5000
4000
Starting Pt
t0 = 800
Δ = 10
3000
2000
1000
900
750
600
450
300
D (ft)
0
Sequence of derivative evaluations in search for minimum
t0 = 0
Δ = 10
400
300
200
t (s)
dD/dt (ft/s)
100
0
5
–5
–15
–25
–35
t0 = 800
Δ = 10
t (s)
dD/dt (ft/s)
900
750
600
450
300
20
15
10
5
0
–5
FIGURE 7.22  Results of two searches for minimum separation. (a) Sequence of points in search for mini­
mum. (b) Sequence of derivative evaluations in search for minimum.

605
Simulation Tools
options = optimset ('GradObj', 'on');
t_min = fminunc (@obj_fcn_D_sep, t_init, options, L, tau, vT, vP_initial)
The “options” declaration is required to enable the gradient search method, which uses the first 
derivative of the objective function given in “obj_fcn_D_sep.m,” when the call to “fminunc” is 
made. The results obtained from running the M-file “Ch7_Toolbox_opt_sep_search.m” are identi­
cal with the analytical values given in Equations 7.53 and 7.55.
7.3.1  Gradient Vector
Our experience in the previous example taught us that knowledge of the slope, that is, first derivative 
of the objective function, could be used to reduce the number of iterations required to locate a local 
optimum. The same holds for objective functions involving several parameters. Instead of a single 
derivative, a gradient vector with components equal to the partial derivatives of the objective func­
tion with respect to each parameter is computed. The gradient vector of a multivariable function at a 
point in parameter space points in the direction of maximum increase of the function. Furthermore, 
the magnitude of the gradient vector is a measure of the rate of increase in the objective function in 
the direction of the gradient.
Consider the function
	
f x x
c x
h
c x
k
x
x
(
,
)
(
)
(
) ,
,
1
2
1
1
2
2
2
2
1
2
 
 
 
 
=
−
+
−
−∞<
<∞−∞<
<∞	
(7.56)
The gradient vector at the point (x1, x2) is
	
∇
=
∂
∂
∂
∂






=
−
f x x
f x x
x
f x x
x
c x
(
,
)
(
,
)
(
,
)
(
1
2
1
2
1
1
2
2
1
1
2
h
c x
k
)
(
)
2 2
2 −






	
(7.57)
Figure 7.23 portrays the objective function as a surface z = f(x1, x2) for the case where h = 5, 
k = 10, c1 = 1, and c2 = 4. Several contours that are projections of constant z in the x1 – x2 plane are 
also shown. The global minimum occurs at x1 = h = 5 and x2 = k = 10 and the minimum value is 
f(h, k) = f(5, 10) = 0.
Since the gradient vector at (x1, x2) points in the direction of maximum increase of f(x1, x2), the 
orthogonal direction that coincides with the tangent to the contour at (x1, x2) represents the direction 
of zero change in f(x1, x2). The negative of the gradient vector is drawn at several points in the x1 – x2 
parameter space in Figure 7.24 because –∇f(x1, x2) points in the direction of maximum decrease of 
f(x1, x2), and we are looking at minimizing the objective function.
Table 7.4 includes the points shown in Figure 7.24, the value of z for the contour, which the points 
lie on, the negative gradient vector, and its magnitude. The lengths of the negative gradient vectors 
are drawn proportional to their magnitudes given in the table.
A multivariable function like f(x1, x2) is expandable about a point (x1, x2) using a two-­dimensional 
Taylor Series, that is,
	
f x x
f x x
f x x
x
x
x
f x x
x
x
x
(
,
)
(
,
)
(
,
) (
)
(
,
) (
)
1
2
1
2
1
2
1
1
1
1
2
2
2
2
=
+ ∂
∂
−
+ ∂
∂
−
+h o t
. . .
	
(7.58)
where h.o.t. represents higher order terms involving powers and products of (x1 – x1) and (x2 – x2). 
To a first-order approximation, the change in f(x1, x2) about the point (x1, x2) is

606
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
f x x
f x x
f x x
x
x
f x x
x
x
(
,
)
(
,
)
(
,
)
(
,
)
1
2
1
2
1
2
1
1
1
2
2
2
−
≈∂
∂
+ ∂
∂
∆
∆
	
(7.59)
	
⇒
≈∂
∂
+ ∂
∂
∆
∆
∆
f x x
f x x
x
x
f x x
x
x
(
,
)
(
,
)
(
,
)
1
2
1
2
1
1
1
2
2
2
	
(7.60)
11.5
11
10.5
10
9.5
9
8.5
3
3.5
4
4.5
5
x1
z = 0 at x1 = 5, x2 = 10
z = 5 contour
Objective function contours and negative gradient vectors in x1–x2 plane
5.5
6
6.5
7
x2
FIGURE 7.24  Contours of the objective function f(x1, x2) = (x1 – 5)2 + 4(x2 – 10)2.
35
30
25
20
15
10
5
0
12
10
8
0
2
x2
z = f(x1, x2)
z
x1
4
6
8
10
FIGURE 7.23  Graph of surface z = f(x1, x2) and several contours z = const.

607
Simulation Tools
	
⇒
≈
∂
∂
∂
∂







∆
∆
∆
f x x
f x x
x
f x x
x
x
x
(
,
)
(
,
)
(
,
)
1
2
1
2
1
1
2
2
1
2




= ∇f x x
x
T
(
,
)
1
2
∆
	
(7.61)
and therefore, ∆f (x1, x2) ≈ 0 provided the gradient vector is identically zero at (x1, x2). Quite 
understandably, the search for local extremes (minima and maxima) of the objective function f(x1, 
x2) is based on finding points where the gradient vector ∇f(x1, x2) = [0 0]T. The gradient vector also 
vanishes at a saddle point, which is neither a local minimum nor maximum. A test involving the 
matrix of second partials at points where the gradient is zero can distinguish between local extrema 
and saddle points.
Optimum seeking methods search for extreme values (minima and maxima) of an objective 
function using the gradient vector in some way (Converse 1970; Miller 1975, 2000; Hasdorff 1976; 
Daniels 1978; Bryson 1999). The references include both constrained and unconstrained optimiza­
tion problems. In constrained optimization, a subset of the parameters are constrained in some 
fashion limiting the region of feasible solutions for finding the optimum. Typically, the constraints 
are inequalities reflecting limitation of system resources or existence of physical boundaries for safe 
operation.
7.3.2  Optimizing Multiparameter Objective Functions Requiring Simulink Models
We now focus on multiparameter objective functions, which require execution of a Simulink model 
to evaluate. The following example is one of a control system where the objective is to minimize a 
performance measure by choosing two parameters associated with the controller. The performance 
measure is obtained from simulation and the optimization toolbox is used to find the optimum 
control settings.
A block diagram of a heading control system for a ship is shown in Figure 7.25. The ship’s 
autopilot and power amplifier are an ideal proportional-derivative (PD) controller that converts an 
error signal to an amplified voltage for driving the steering gear connected to the ship’s rudder. The 
steering gear, rudder, and hull dynamics are combined into a single ship dynamics transfer function. 
A gyro compass in the feedback loops senses the ship’s heading and sends a voltage to the autopilot. 
TABLE 7.4
Contour and Gradient Data for Points Shown in Figure 7.24
(x1, x2)
Contour
–∇f(x1, x2)
∇f x x
(
,
)
1
2
(2.7639, 10)
5
4 4721
0
.






4.47211
(4, 9.1340)
4
2
6 9282
.






7.2111
(6, 9.2929)
3
−






2
5 6569
.
6.0000
(5.5, 10.6614)
2
−
−






1
5 2915
.
5.3852
(4.5, 10.4330)
1
1
3 4641
−






.
3.6056
(5,10.15.81)
0.1
0
1 2649
−






.
1.2649

608
Simulation of Dynamic Systems with MATLAB® and Simulink®
A saturation block is inserted between the controller and ship transfer function to account for the 
limited power available to the steering system. The units converter transforms the commanded 
heading from degree to volts for compatibility with the autopilot’s electronics.
The control parameters Kp and Kd are to be selected to optimize the system response to a step 
input in command heading. There are numerous measures that can be used to characterize the step 
response. Five specific measures are enumerated as follows:
	
1.	Rise time tr: Time required for response to go from 10 to 90% of its final heading
	
2.	Maximum overshoot, OSmax: Difference between maximum heading and final heading in 
underdamped systems
	
3.	Maximum heading rate, ψmax : Maximum rate of change in ship’s heading
	
4.	Integral squared error, ISE: Integral of squared error from time zero to infinity
	
5.	Integral absolute error, IAE: Integral of absolute value of error from zero to infinity
The objective function f is assumed to be a function of these measures, that is,
	
f
f t
F K
K
r
P
d
=
=
( ,
,
,
)
(
,
)
max
OS
ISE IAE
max ψ
	
(7.62)
Note that the objective function is implicitly dependent on Kp and Kd because each of the mea­
sures tr, OSmax, ψmax  ISE, and IAE depends on these parameters. The goal is to find the optimum 
value fopt where
	
f
F K
K
K
K
P
d
p
d
opt
Min
=
>
>
0
0
,
(
,
)
	
(7.63)
In this example, f is set to a linear combination of the five measures. Hence,
	
f t
c t
c
c
c
r
r
( ,
,
)
max
max
max
max
OS
, ISE, IAE
OS
ISE
IAE


ψ
ψ
=
+
+
+
+
1
2
3
4
5c
	
(7.64)
The constants c1, c2, c3, c4, and c5 determine the weights of each measure. For example, if the goal 
is to minimize the integral squared error (ISE),
	
ISE
e
d
[
d
com
=
=
−
∞
∞
∫
∫
2
0
2
0
( )
( )]
t
t
t
t
ψ
ψ
	
(7.65)
the weights are set to c1 = c2 = c3 = c5 = 0 and c4 = 1.
The constrained optimization routine “fmincon” in the optimization toolbox implements a 
search for fopt subject to parameter constraints. The statement
FIGURE 7.25  Block diagram of ship heading control system.

609
Simulation Tools
[opt_Kp_Kd, FVAL, EXITFLAG, OUTPUT] = fmincon (@obj_fcn_ship, Kp_Kd_
init, A, B, Aeq, Beq, LB, UB, NONLCON, OPTIONS, Kg, L, Ks, tau, t1, 
theta_com, c)
in “Ch7_Toolbox_opt_ship.m” invokes a constrained search for the optimum values of parameters 
Kp and Kd. The arguments “A, B, Aeq, Beq, LB, UB, NONLCON” define the constraints. 
“LB” and “UB” are used to set lower and upper bounds on the parameters, and the remaining argu­
ments are empty arrays not applicable in this example.
Before we look at the results, it is instructive to visualize the objective function surface with 
respect to the Kp–Kd plane. The objective function in this example is
	
f
t
F K
K
r
p
d
=
+
+
=
OS
(
)
max
max
ψ
,
	
(7.66)
It is shown in Figure 7.26 for the region 0 ≤ Kp ≤ 25, 0 ≤ Kd ≤ 25. The data points for draw­
ing the surface were obtained by repeated calls to the Simulink model “ship.mdl” from the M-file 
“Ch7_ship_control.m.” The simulated step responses were executed for 100 s, a period of time 
sufficient to allow the transient response to vanish, except for heavily damped cases (low Kp, high 
Kd). Numerical values of the system parameters are Ku = Kg = 10 V/rad, Ks = 0.04 rad/s/V, and 
τ = 10 s, and the autopilot/amplifier saturates at 25 V. The commanded heading ψcom was set to 30°.
In runs where the ship’s heading had yet to reach 90% of the final heading (which did not occur 
for the points shown in Figure 7.26), the rise time was set to 100 s. When the ship’s heading failed to 
reach the final heading, the overshoot was set to zero. The final heading is the commanded heading 
for all combinations of Kp and Kd resulting in a stable response.
The Simulink block diagram for the model “ship.mdl” is shown in Figure 7.27.
The “PID” block in Figure 7.27 is present in the “Simulink Extras” library. It is an ideal PID 
controller with parameters P, I, and D in the transfer function
	
G s
P
I
s
Ds
( ) =
+
+
	
(7.67)
For simulation runs, P assumed the value of Kp, I was zero, and D assumed the value of Kd. The 
optimization toolbox search algorithm started from the point (1, 1) in the Kp–Kd plane. A gradi­
ent search is not used since the gradient of the objective function is not available in analytic form. 
40
35
30
25
20
20
20
15
15
15
Kd
Kp
F(Kp, Kd)
5
5
0
0
Objective function surface
10
10
10
25
25
FIGURE 7.26  Objective function surface f = tr + OSmax +  ψmax  = F(Kp, Kd).

610
Simulation of Dynamic Systems with MATLAB® and Simulink®
A gradient-based search would require numerical approximations to the gradient at a number of 
points along the way to finding the optimum. The number of objective function evaluations would 
likely increase significantly depending upon the algorithm’s efficiency in locating the optimum. 
In this example, a “medium-scale, SQP, Quasi-Newton, and line-search” algorithm (see optimi­
zation toolbox reference manual), was used successfully to find the optimum solution, namely, 
(Kp)opt = 1.3011, (Kd)opt = 7.1913, and fopt = 14.4395. A total of 344 function evaluations and, hence, 
the same number of simulation runs were required.
The simulation was run with the optimal parameter settings to verify the objective function 
value. The ship’s heading and heading rate are shown in Figure 7.28. The rise time, maximum over­
shoot, and maximum heading rate are 11.5000 s, 0.1154 deg, and 2.8241 deg/s, respectively. From 
Equation 7.66, f = 11.5000 + 0.1154 + 2.8241 = 14.4395.
7.3.3  Parameter Identification
Knowledge of the system parameters appearing in the differential and algebraic equations used to 
model continuous-time dynamic systems is often imperfect. When the simulationist is reasonably 
confident that the model’s structure is suitable for its intended purpose, the subject of parameter 
identification arises (see Figure 7.1). A simple approach predicated on minimizing the differences 
between observed and simulated responses is presented in the following example.
FIGURE 7.27  Simulink block diagram for ship heading step response.
FIGURE 7.28  Results with optimal parameter settings: (Kp)opt = 1.3011, (Kd)opt = 7.1913.

611
Simulation Tools
The decreasing concentration of a chemical in solution follows a law from reaction kinetics that 
states
	
d
d
  (
x
t
kx
k
n
n
=−
>
>
0
0
,
)
	
(7.68)
where
x = x(t) is the concentration
k is a rate constant
n is the order of the reaction
Suppose the concentration of a chemical in solution was measured and recorded once a minute 
for 60 min. The values at 5 min intervals are shown in Table 7.5.
The problem before us is to estimate the reaction constant k and reaction order n. We will do this 
by simulating the response for the chemical concentration starting with guessed values for k and n. 
The observed and simulated responses are used to compute the sum of squared errors, that is,
	
SSE
(
)
[
]
=
=
−
=∑
f k n
x
x
i
i
i
,
2
0
60

	
(7.69)
where
xi = x(ti), i = 0, 1, 2, …, 60 are simulated concentrations a minute apart
ˆ
ˆ( )
x
x t
i
i
=
, i = 0, 1, 2, …, 60 are values of concentration measured at one-minute intervals, some 
of which are shown in Table 7.5
Minimizing the objective function f(k, n) yields the optimal estimates of the reaction parameters.
Observed concentrations ˆxi, i = 0, 1, 2, …, 60 are obtained by running the M-file “Ch7_­
reaction_kinetics.m,” which calls the Simulink model “chemical.mdl” with k = 0.125 and n = 2.3, 
representative of the true reaction. The Simulink block diagram is shown in Figure 7.29. A search 
constrained to the first quadrant of the k–n plane is performed using one of the routines from 
the optimization toolbox. The search concludes with kopt = 0.1256, nopt = 2.3037 and SSE = f(kopt, 
nopt) = 3.2303 × 10−7.
A graph of the simulated concentration response with the optimal parameter values is shown in 
Figure 7.30. As expected, the observed concentrations fall on the simulated concentration response 
curve.
7.3.4  Example of a Simple Gradient Search
The common feature of all gradient search algorithms is their reliance on calculation of the gradient 
vector at a point in the parameter space. The logic for choosing a direction and step size leading to 
the next point along with the frequency of gradient calculations is what distinguishes one gradient 
TABLE 7.5
Measured Concentration of Chemical in Solution at the End of 5 min Intervals
t (min)
0
5
10
15
20
25
30
ˆ (
)
x mo1/L
0.5000
0.4015
0.3386
0.2945
0.2617
0.2363
0.2159
t (min)
35
40
45
50
55
60
ˆ (
)
x mol/L
0.1991
0.1851
0.1731
0.1628
0.1538
0.1459

612
Simulation of Dynamic Systems with MATLAB® and Simulink®
search algorithm from another. The gradient search presented in this section is intended to dem­
onstrate how to exploit the property of the gradient vector to find a local minimum of an objective 
function. It is less efficient in comparison with established gradient search algorithms reported in 
the literature.
The focus of our attention is a bowl-shaped tank shown in Figure 7.31. The bowl is the lower half 
of a sphere of radius R. Water flow into and out of the tank is controlled by the valves located in the 
inflow and exiting pipes. The inflow F1(t) is maintained at a constant value F1. The outflow F2(t) is 
FIGURE 7.29  Simulink diagram for chemical reaction.
FIGURE 7.30  Graph of observed and simulated (k = kopt, n = nopt) concentration with optimal parameters.

613
Simulation Tools
a function of water level H(t) and the opening of the valve in the discharge line, which effectively 
determines the constant c in the equation
	
F t
c H t
2
1 2
( )
[
( )] /
=
	
(7.70)
Conservation of mass requires
	
d
dt V t
F t
F t
( )
( )
( )
=
−
1
2
	
(7.71)
where the volume V(t) is related to the water level by
	
V t
H
t
R
H t
( )
( )[
( )]
=
−
1
3
3
2
π
	
(7.72)
Differentiating Equation 7.72 with respect to t and simplifying yield
	
d
d
d
d
t V t
R
H t H t
t H t
( )
[
( )]
( )
( )
=
−
π 2
	
(7.73)
Combining Equations 7.70, 7.71, and 7.73 results in the differential equation model
	
π[
( )]
( )
( )
( )
[
( )] /
2
1
1 2
R
H t H t
t H t
F t
c H t
−
=
−
d
d
	
(7.74)
The term π[2R – H(t)]H(t) is equal to the cross-sectional area of the bowl at the water level H(t), 
that is,
	
A H
R
H H
(
)
(
)
=
−
 
2
π
	
(7.75)
And, therefore, Equation 7.74 is expressible as
	
A H
H
t
F
cH
(
)
/
d
d
=
−
1
1 2
	
(7.76)
FIGURE 7.31  Hemispherical bowl with flows in and out.

614
Simulation of Dynamic Systems with MATLAB® and Simulink®
The objective is to fill the tank in a specified period of time. The inflow F1 and discharge constant 
c are the controllable parameters at our disposal. Before we discuss the gradient search, the objec­
tive function must be defined. Since the goal is to fill the tank in a given period of time, say Tdes, the 
objective function is defined as
	
F t
A t
T
t
T
T
t
T
B
t
L
L
L
H
(
)
,
,
fill
fill
fill
fill
f
=
−






≤
<
≤
≤
1
0
0
2
ill
fill
fill
−
−






<
≤
<



T
T
T
T
t
T
B
T
t
H
H
H
max
max
max
,
,
2



	
(7.77)
F(tfill) is zero whenever the time to fill the tank tfill falls between TL = Tdes – ∆/2 and TH = Tdes + ∆/2 
where ∆ is the width of the interval centered at Tdes. The constant Tmax is an arbitrarily chosen upper 
limit. A and B determine the objective function at the points tfill = 0 and tfill = Tmax. A graph of F(tfill) 
is shown in Figure 7.32.
It is helpful to visualize the objective function surface over the F1–c plane. For convenience, 
let the maximum inflow be (F1)max = 10 ft3/min when the inlet valve is wide open. Furthermore, 
a maximum value of cmax = 2 ft3/min/ft1/2 is assumed, corresponding to a wide-open valve in the 
discharge line.
The objective function surface is shown in Figure 7.33. It is plotted in the M-file “Ch7_globe_
fill_surface.m,” which loops through a range of F1 and c values, calling the Simulink model file 
“globe.mdl” to determine the fill time tfill. The simulation terminates when the tank is full, that is, 
H(t) = R = 5 ft, or failing that when the simulated time reaches Tmax = 300 min.
It appears from looking at Figure 7.33 that the surface contains a ridge extending from c = 0 to 
c = cmax = 2 (with corresponding F1 values) for which the objective function is zero. Indeed, this is 
consistent with our intuition, which suggests the likelihood of numerous combinations of F1 and c 
yielding a tank fill time between TL = 145 min and TH = 155 min and, thus, F(F1, c) = 0.
Another distinguishing characteristic in the surface’s topology is the plateau at an elevation of 50 
(the value of B) corresponding to points (F1, c) for which the tank fill time is greater than or equal 
100
A = 100
Objective function F(tfill)
F(tfill)
tfill
Tdes = 150 min
Tmax = 300 min
TL = 145 min
TH = 155 min
Δ = TH – TL = 10 min
B = 50
80
60
40
20
0
0
32.68
80.15
150
200
246.71
300
350
FIGURE 7.32  Graph of objective function F(tfill).

615
Simulation Tools
to 300 min or else the tank never fills. The challenge will be for the gradient search algorithm to 
find points in parameter space along the aforementioned ridge where the objective function is a 
minimum, that is, zero.
The Simulink block diagram is shown in Figure 7.34.
The parameters F1 and c and the tank fill time tfill are visible in Simulink “display” blocks. 
Note the limited integrator with upper limit set to R = 5 ft, which also happens to be identical to the 
threshold parameter of the “Switch” block. Consequently, the simulation is halted when the tank 
is full, that is, the level H(t) ≥ R.
A variable-step “ode45 Dormand Prince” numerical integrator with default tolerance set­
tings is used to control the truncation error. Execution times are reduced by a significant amount 
compared to one of the RK fixed-step integrators with suitably chosen integration step (see Exercise 
7.10).
The gradient search implemented in “Ch7_grad_search_globe_fill.m” is outlined in flow chart 
form in Figure 7.35. It begins with a user-selected starting point (F1, c) in F1–c parameter space. 
70
60
50
40
30
20
10
0
10
8
6
4
2
0
0
0.4
Objective function surface: z = F(F1, c)
0.8
1.2
1.6
2
c
F1
z
FIGURE 7.33  Objective function surface z = F(F1, c) for tank-filling problem.
FIGURE 7.34  Simulink diagram for hemispherical tank-filling simulation.

616
Simulation of Dynamic Systems with MATLAB® and Simulink®
Prior to the calculation of the gradient, the point is checked to verify the possibility of the tank fill­
ing up. At steady state, we know from Equation 7.76 that
	
(
)
(
) /
F
c H
ss
ss
1
1 2
 
−
= 0 	
(7.78)
and, therefore, imposing the constraint
	
F
cR
1
1 2
>
/
	
(7.79)
FIGURE 7.35  Flow chart for gradient search algorithm.

617
Simulation Tools
guarantees that the water will eventually attain a level of R = 5 ft, although not necessarily in less 
than Tmax = 300 min. If the initial point fails to satisfy the inequality in Equation 7.79, the initial 
inflow F1 is adjusted according to
	
F
cR
F
1
1 2
1 max
min 15
(
)
=
{
}
.
,
/
	
(7.80)
The remaining blocks in the flow chart are for computing the objective function, the gradient 
vector, and for determining how big a step to take in the negative gradient direction in searching for 
a minimum, that is, points where F(F1, c) = 0.
The so-called steepest descent gradient searches (Wilde 1964) look for the optimum distance to 
travel in the negative gradient direction before changing directions. The optimum distance is deter­
mined by the local minimum of the objective function along the negative gradient direction. When 
the local minimum is reached, the gradient vector is recalculated, and the search proceeds in the 
new direction that happens to be orthogonal to the previous search direction. Hence, with steepest 
descent as described, the search consists of a sequence of orthogonal moves from point to point. The 
distance between consecutive points varies, generally decreasing as the optimum is approached.
The gradient search illustrated in Figure 7.35 is not of the steepest descent type; rather, it con­
sistently takes a single step in the negative gradient direction from one point to the next and then 
recomputes the gradient vector.
The magnitude of the step is altered based on a comparison of the objective function at neighbor­
ing points, that is, after taking a full step, if the new objective function is greater than the previous 
value, the step size is reduced by 25% next time around. A lower threshold on step size is imposed 
to prevent the search from “slowing down to a crawl.” Compared to steepest descent, the steps are 
either too small or too large, and the search will require more gradient calculations. Even worse, the 
new gradient direction may steer the search away from the minimum altogether, and the method 
fails to converge.
The search is terminated using a stop condition based on the magnitude of the gradient vector, 
the value of the objective function, and the number of steps taken. After considerable experimenta­
tion, the tolerances were chosen to stop the search if
	
∇
=
∂
∂
∂
∂






≤
F F c
F F F c
c F F c
F F
(
, )
(
, )
(
, )
.
(
,
1
1
1
1
1
1
0 1
or
c)
.
≤
=
0 001
or
#  steps 
 50
	
(7.81)
The gradient vector ∇F(F1, c) is calculated numerically using a central difference approximation 
formula, namely,
	
∂
∂
=
+
−
−
F F F c
F F
F c
F F
F c
F
1
1
1
1
1
1
1
2
(
, )
(
, )
(
, )
∆
∆
∆
	
(7.82)
	
∂
∂
=
+
−
−
c F F c
F F c
c
F F c
c
c
(
, )
(
,
)
(
,
)
1
1
1
2
∆
∆
∆
	
(7.83)
where the deviations ∇F1 and ∇c are 0.005 and 0.01, respectively. The gradient vector is com­
puted by calling the MATLAB function “gradF_globe.m” from the M-file “Ch7_grad_search_
globe_fill.m” with arguments F1 and c. The components in Equations 7.82 and 7.83 are returned 
as outputs.

618
Simulation of Dynamic Systems with MATLAB® and Simulink®
Results of successful gradient searches starting from randomly chosen starting points in the 
region 0 ≤ F1 ≤ (F1)max = 10, 0 ≤ c ≤ cmax = 2 of F1–c parameter space are shown in Table 7.6. The 
search failed to locate the minimum on a few occasions.
A different approach to finding the optimum points located along the ridge in Figure 7.33 is to 
plot the F(F1, c) = 0 contour. Other contours F(F1, c) = F0, (F0 constant) can be plotted as well by 
searching for points in the F1–c plane, which result in filling times corresponding to the required 
contour values. Figure 7.32 shows the two filling times that result in F(F1, c) = 20 and the single 
filling time that leads to F(F1, c) = 60.
With F0 = 20, the next step is fixing the parameter c and varying F1 until the two values that lead 
to tmin = 80.15 min and tfill = 246.71 min are found. The search for F1 is constrained to the interval 
(F1)min ≤ F1 ≤ (F1)max, where (F1)min is the minimum flow needed to fill the hemispherical tank and 
is given by
	
(
)
/
F
cR
1 min
1 2
=
	
(7.84)
where c is the current fixed value. In other words, points {(c, Fl)|F1 < (F1)min} are infeasible and not 
searched. The process is repeated for c ranging from cmin = 0 to cmax = 2 ft3/min/ft1/2.
A similar process occurs when B ≤ F0 ≤ A, except in this case, there is a single value of fill 
time corresponding to F0 (see Figure 7.32). For F(F1, c) = F0 = 60, the fill time is 32.68 min. 
The F0 = 20 and F0 = 60 contours are shown in Figure 7.36. The F0 = 0 contour is also shown. 
The upper portion corresponds to fill times of tfill = TL = 145 min, and the lower segment is for 
tfill = TH = 155 min. (see M-file “Ch7_Fig7_36.m.”) Note that only three values of the parameter c 
were used, namely, cmin, (cmin + cmax)/2, and cmax, when searching for the corresponding value of F1 
because the contours appear to be linear.
The M-file “Ch7_globe_contours.m” can be used to draw the contours ranging from F0 = 0 
up to a maximum value (F0)max corresponding to c = cmin = 0 and F1 = (F1)max = 10 ft3/min. 
The contour for F0 = (F0)max is a single point located at (0,10) in Figure 7.36. “Ch7_globe_
contours.m” reports the value of (F0)max along with the corresponding fill time, which happens 
to be the shortest time in which the tank can be filled. From Figure 7.33, (F0)max appears to be 
approximately 68.
TABLE 7.6
Summary of Gradient Search Results for Five Starting Points in F1–c Plane
#1
#2
#3
#4
#5
(F1)start
2.026
9.218
1.762
0.578
8.131
cstart
1.344
1.476
0.811
0.705
0.019
F[(F1)start, cstart]
1.756
52.922
6.776
17.013
60.377
∇F[(F1)start, cstart]
11 293
21 173
.
.
−






6 038
10 780
.
.
−






−






46 318
86 859
.
.
−






96 765
81 472
.
.
4 288
7 400
.
.
−






|∇F[(F1)start, cstart]|
23.996
12.356
98.437
205.659
8.553
(F1)opt
5.407
5.279
2.777
2.381
5.393
copt
1.995
1.898
0.558
0.345
1.995
tfill
153.5
147.8
146.3
147.5
155.0
F[(F1)opt, copt]
0
0
0
0
0
∇F[(F1)opt, copt]
−






0 039
0 073
.
.
0
0






0
0






0
0






−






0 530
1 040
.
.
|∇F[(F1)opt, copt]|
0.083
0
0
0
1.167
Iterations
8
17
3
9
10

619
Simulation Tools
MATLAB will also draw the objective function contours. The statements
v = [5 20 60];
contour (cc, F11, z, v)
in “Ch7_Fig7_37.m” produce the contours corresponding to objective function values of 5, 20, and 60 
shown in Figure 7.37. There is substantial agreement between the contours in Figures 7.36 and 7.37.
10
60
20
20
0
F0 = 0, 20, 60 contours
9
8
7
6
5
4
3
2
1
0
0
0.2
0.4
0.6
0.8
1
c (ft3/min per ft1/2)
F1 (ft3/min)
1.2
1.4
1.6
1.8
2
Infeasible region: H(∞) < R = 5 ft
FIGURE 7.36  Objective function contours F0 = 0, 20, 60.
10
9
8
7
6
5
4
3
2
1
0
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
c (ft3/min per ft1/2)
F0 = 5, 20, 60 contours
F0 = 60
F0 = 20
F0 = 20
F0 = 5
F0 = 5
F1 (ft3/min)
FIGURE 7.37  Graph of several contours of objective function F(F1, c).

620
Simulation of Dynamic Systems with MATLAB® and Simulink®
7.3.5  Optimization of Simulink Discrete-Time System Models
We conclude this section with a simplified model of hospital–patient occupancy (McClamroch 
1980) using Simulink to simulate the dynamics. The goal will be to investigate the relationship 
between the average number of scheduled patients per day on the hospital’s utilization of exist­
ing capacity. Stochastic systems of this nature, where entities arrive in nondeterministic fashion 
requiring services of random duration at different stages, are typically studied using discrete-event 
simulation (Banks 2005). Popular programs for simulating systems of this nature are Process Model 
(Evans) and ARENA (Kelton 1997).
While Simulink may not be the ideal program to simulate the dynamics of patients flowing 
through a hospital’s facilities, a macroscopic discrete-time system model that captures some of the 
important features is still possible. In the model to be formulated, the basic unit of discrete-time is 
a day.
The types of daily arrivals and departures from the hospital are accounted for by
	
       e
i
i =
+
numberof emergencyarrivalson
1 stday
(
)
	
	
     
s
i
i =
+
numberof scheduledarrivalson
1 stday
(
)
	
	
d
i
i =
+
numberof departureson
1 stday
(
)
	
	
m
i
i =
+
numberof deathson
1 stday
(
)
	
Letting xi denote the number of occupied beds at the end of the ith day and L the total number of 
beds, a simple model describing the hospital’s daily occupancy is
	
x
L x
u
i
i
i
i
+ =
+
{
}
=
…
1
 Min
1 2 3
,
,
, , , ,
0
	
(7.85)
where ui = si + ei – di – mi. The components of ui in Equation 7.85 are assumed to be normally 
distributed, that is,
	
s
N
e
N
d
N
m
N
i
S
S
i
E
E
i
D
D
i
M
M
∼
∼
∼
∼
(
,
),
(
,
),
(
,
),
(
,
)
µ
σ
µ
σ
µ
σ
µ
σ
 
 
 
2
2
2
2
	
where µS, µE, µD, µM and σS
2, σE
2 , σD
2 , σM
2  are the respective means and variances.
Typical sequences of ui and xi are shown in Figure 7.38. Note that ui represents a summation of 
input components (arrivals and departures) during the (i + 1)st day.
FIGURE 7.38  Illustration of discrete-time input and output relationship in Equation 7.85.

621
Simulation Tools
A Simulink block diagram of the nonlinear, first-order, discrete-time system is shown in Figure 7.39.
In addition to generating the input components and implementation of the difference equation, 
additional blocks are used to decompose the input “u(i)” into two series, called “u(i) > 0” and 
“u(i) < 0.” The first series “u(i) > 0” is the subset of positive values in “u(i)” corresponding to 
days where the number of new patients exceeds the number of patients discharged or who have died. 
At the end of those days, the hospital’s occupancy either increases (relative to the previous day) or 
else remains constant at its capacity.
The second series “u(i) < 0” is the subset of negative values in “u(i)” corresponding to days 
when the number of discharged and dying patients surpasses the number of arrivals and the hospi­
tal’s occupancy at the end of the day is diminished from the previous day.
Note also the presence of two Simulink “switch” blocks feeding “scopes” labeled “delta 
(i) > 0” and “delta (i) < 0.” The former outputs a time series showing on which days and by 
how much the demand for beds exceeds the hospital’s capacity. The numerical values represent the 
overflow demand, that is, the amount of additional beds required to accommodate the influx of addi­
tional patients. The scope labeled “delta (i) < 0” shows the days when the hospital is operating 
at less than capacity and by how much.
Typical profiles for “u(i) > 0,” “u(i) < 0,” “delta (i) > 0,” and “delta (i) < 0” are shown 
in Figures 7.40–7.43 for the case where the average number of admissions exceeds the average num­
ber of discharges plus deaths.
FIGURE 7.39  Simulink diagram of hospital occupancy.
FIGURE 7.40  Typical “u(i) > 0” profile—Days with excess of new patients.

622
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 7.41  “u(i) < 0” profile—Excess discharged and dying patients.
FIGURE 7.43  Typical “delta (i) < 0” profile—Days at less than capacity.
FIGURE 7.42  Typical “delta (i) > 0” profile—Days when capacity exceeded.

623
Simulation Tools
Figures 7.44 and 7.45 show results of a single run for 100 days under the following conditions:
	
µ
σ
µ
σ
S
S
E
E
=
=
=
=
21  
4  
5  
,
,
,
2
2
2 	
	
    µ
σ
µ
σ
D
D
M
M
=
=
=
=
23  
9  
2  
,
,
,
.
2
2
0 25 	
	
L
x
=
=
2
2
00
00
0
,
	
Hospital occupancy fluctuates between 195 and 200 corresponding to occupancy rates ranging 
from 97.5 to 100%. The high occupancy rates are consistent with the condition µS + µE > µD + µM, 
that is, the average daily arrival of new patients is greater than the average number of patients leav­
ing the hospital. From Figure 7.45, it is clear there are a number of days when patients may have 
been scheduled for admittance but were not admitted. (Keep in mind the simplistic nature of the 
model that does not account for the hospital’s ability to accommodate excess patients.)
A Monte Carlo simulation can be performed to investigate the effect of scheduled arrivals on 
hospital utilization (occupancy rate) and the number of patients turned away due to lack of beds. 
FIGURE 7.44  Daily net patient input.
FIGURE 7.45  Hospital occupancy for 100 days.

624
Simulation of Dynamic Systems with MATLAB® and Simulink®
“Ch7_hospital.m” is an M-file, which varies µS, the mean number of scheduled arrivals, and com­
putes a number of performance measures based on 10 simulated records, each containing 1 year 
(365 days) of information. That is, for a given value of µS, 365 days of operation are simulated. The 
initial occupancy is reset to x0 = L, and the process repeated nine more times. The remaining sys­
tem parameters are fixed at the baseline values previously given.
A number of performance measures are computed for each value of µS:
	
a.	An objective function that accounts for the days when the hospital is unable to accept new 
patients due to excess demand, that is, “delta (i) > 0,” and other days when the hospital 
operates at less than capacity, that is, “delta (i) < 0.” It is a weighted average over all 10 
records given by
	
F
c
i
S
i
j
j
i
(
)
( )
( )
µ
=









=
=
>∑
∑
1
1
365
1
10
1
10
1
365
0
∆
∆








+





=
<∑
c
i
i
i
2
1
365
1
10
1
365
0
∆
∆
( )
( )











=∑
j
j
1
10
	
(7.86)
	
	 where c1 and c2 are the weights applied to the average number of excess patients per day 
and the average number of unused beds per day, respectively.
	
b.	The percent occupancy averaged over all 10 records (10 × 365 days).
	
c.	The average number of excess patients per day averaged over all 10 × 365 days.
	
d.	The average excess capacity (unused beds) per day averaged over all 10 × 365 days.
Results are shown in Figure 7.46 for c1 = c2 = 1.
Note the steep decline in objective function until µS = 20, which represents an equilib­
rium condition in the sense that new arrivals and departures are balanced (on average), that is 
µS + µE = µD + µM. Choosing c1 = c2 = 1 implies that an unused bed and a nonadmitted patient 
have equal importance.
200
150
100
50
0
μS
15 16 17 18
Objective function
19 20 21 22 23 24 25
μS
Ave percent occupancy
100
50
0
15 16 17 18 19 20 21 22 23 24 25
μS
Ave excess patients per day
4
2
0
15 16 17 18 19 20 21 22 23 24 25
200
μS
150
100
50
0
Ave excess capacity per day
15 16 17 18 19 20 21 22 23 24 25
FIGURE 7.46  Objective function (c1 = c2 = 1) and other performance measures.

625
Simulation Tools
A few points to consider as we conclude this section are as follows:
	
1.	Can you explain why the graphs of the objective function and the average excess capacity 
are nearly identical?
	
2.	What should the hospital’s admitting policy with respect to scheduled number of arrivals 
be to assure 100% occupancy rates?
	
3.	What will happen to the objective function as the mean number of arrivals continues to 
increase beyond 25 as shown in Figure 7.46.
	
4.	What is the implication of changing the weight c2 from 1 to 5 and what effect will it have 
on the objective function?
	
5.	What is the significance of setting σS
2
0?
=
	
6.	Is there a difference between simulating ten 1 year periods and one 10 year period as far as 
the Monte Carlo simulation is concerned?
EXERCISES
	7.5	
Suppose the movement of the target in Figure 7.14 is along the circular path of radius R = 2.5 
mi with speed given by
	
v s
V
v
s
s
s
( )
sin
=
+






≥
0
0
2
0
π
,
	
	
	 where s is the distance traveled along the circular trajectory. The mean speed V and amplitude 
v0 are uniformly distributed according to
	
V
U
v
U
~
~
(
,
),
( ,
)
2
4 mph
1 mph
0
0
0 0
0
	
	
	 and the period s0 = 2000 ft. The projectile’s dynamics are defined by the parameters 
m = 4000/32.2 slugs, µ = 0.15 lb s/ft, and vp(0) = 60 mph.
	
	 Use the MATLAB random number generator to generate values for V and v0.
	
a.	 Simulate single firings of the projectile corresponding to firing angles of θ = 0°, 5°, 10°, …, 
90°. Halt the simulation when the projectile has traveled a distance greater than R mi. Plot 
the miss distance (minimum separation between target and projectile) vs. the firing angle.
	
b.	 From the graph in part (a), estimate the optimum firing angle, that is, the one that results 
in the projectile striking the target.
	
c.	 Using the same values of V and v0, write an M-file to find the optimum firing angle. 
The use of MATLAB’s optimization toolbox is optional.
	
d.	 Verify the result in part (c) by simulation.
	7.6	
A projectile of mass m is fired with initial velocity v0 at an angle α0 from the horizontal 
­direction. Its position, while in flight, is given by coordinates (x, y), and its velocity is repre­
sented by v as shown in Figure E7.6a. The projectile is subject to a linear drag force fD in the 
tangential direction and a constant gravitational force in the vertical direction.
FIGURE E7.6A 

626
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	 The equations of motion are
	
d
d
cos
d
d
sin
2
2
2
2
x
t
f
m
y
t
f
m
g
D
D
=−
=−
α
α
,
−
	
	
f
v
x
t
y
t
D =
=





+











µ
µ
d
d
d
d
/
2
2 1 2
	
	
tanα = d /d
d /d
y
t
x
t 	
	
	 Baseline values of the system parameters are
	
m
v
c
=
=
=
=
°
0
00
0 0
0
0
.
,
,
.
,
25 slugs
5
ft/s
15 lbs/ft
45
α
	
	
	 Use the Simulink diagram as shown in Figure E7.6b or construct your own Simulink model 
to answer the following questions.
	
a.	 The projectile is fired in the vertical direction. Find
	
i.	 The analytical solution y(t), t ≥ 0 and plot it for the time period when y ≥ 0
	
ii.	 The peak altitude H attained by the projectile
	
iii.	 The time tp, when the peak altitude is reached
	
b.	 Find the maximum altitude H by optimization, that is, search for the time when –y(t) is a 
minimum. Compare the result with your answer in part (a).
	
c.	 Find the horizontal distance R corresponding to firing angles α0 = 0°, 5°, 10°, …, 90° and 
plot the results. Estimate the firing angle u0 that maximizes R.
FIGURE E7.6B

627
Simulation Tools
	
d.	 Find the value (α0)opt that maximizes R(α0) by the minimization of the objective function 
F(α0) = –R(α0) subject to 0° ≤ α0 ≤ 90°.
	
e.	 Find the initial velocity v0 that results in a peak altitude of H = 1200 ft when the projectile 
is fired at an angle of 45°. Formulate this as an optimization problem and then find the 
optimum solution.
	
f.	 Let H=15
 ft
00
 and R = 2
 ft
000
 be the design values of peak altitude and down range 
distance. The objective is to find combinations of initial firing angles and initial ­velocities 
resulting in H
H
=
 and R
R
=
. Choose the objective function to be minimized as
	
F
v
e
e
H
H
R
R
H
R
(
,
)
(
)
[(
)
(
) ]
/
/
α0
0
2
2 1 2
2
2 1 2
=
+
=
−
+
−
	
	
	 and plot the surface F(α0, v0) as well as several equally spaced (in numerical value) con­
tours for 0° ≤ α0 ≤ 90°, 0 ≤ v0 ≤ 600 ft/s.
	
g.	 Write an optimization program that starts from an initial point (α0, v0) in parameter space 
and locates an optimum point {(α0)opt, (v0)opt} where the objective function F(α0, v0) is a 
minimum. Fill in Table E7.6:
TABLE E7.6
Initial α0(°)
Initial vc, (fps)
(α0)opt
(v0)opt
Max H
R
F[(α0)opt, (v0)opt]
Number of 
Iterations
20
400
 
 
 
 
 
 
 
65
100
 
 
 
 
 
 
 
45
300
 
 
 
 
 
 
 
80
500
 
 
 
 
 
 
 
5
200
 
 
 
 
 
 
 
	7.7	
An alternative method for controlling the heading of a ship is to use rate feedback as shown in 
Figure E7.7. The saturation block is omitted. Using the same parameter values as in the text,
	
a.	 Find the amplifier gain Kp and rate gyro gain Kr, which minimizes the ISE in response to 
a step command heading of 5°.
	
b.	 Repeat part (a) for an IAE objective function.
	7.8	
Repeat the steps in estimating the parameters k and n if the observed chemical concentrations 
at the end of 5 min intervals are as given in the Table E7.8. Draw a graph similar to the one in 
Figure 7.30 showing simulated and observed values after 1 min intervals for the first hour.
FIGURE E7.7 

628
Simulation of Dynamic Systems with MATLAB® and Simulink®
TABLE E7.8
t (min)
0
5
10
15
20
25
30
ˆ(
)
x mol/L
2.0000
1.3333
1.0000
0.8000
0.6667
0.5714
0.5000
t (min)
 
35
40
45
50
55
60
ˆ(
)
x mol/L
 
0.4444
0.4000
0.3636
0.3333
0.3077
0.2857
	7.9	
Suppose the hemispherical tank shown in Figure 7.31 is turned upside down.
	
a.	 How does the mathematical model of the system change?
	
b.	 Modify the Simulink diagram to reflect the new configuration.
	
c.	 Show that the surface plot in Figure 7.33 and zero contour plot in Figure 7.36 remain 
unchanged.
	
d.	 Repeat parts (a) and (b) and generate new surface and zero contour plots if the tank is 
cylindrical with radius R = 5 ft.
	7.10	 Compare the execution time required to draw the surface in Figure 7.33 where the objective 
function is evaluated over a 40-by-40 grid of points in the F1–c plane when the numerical 
integrator is a fixed RK-4 integrator with step size 0.01 s and the default variable-step ode45 
(Dormand Prince).
	
Hint: Insert the MATLAB commands “tic” and “toc” at the beginning and end of the 
MATLAB statements. The execution time will be returned by “toc.”
	7.11	 The objective function defined in Equation 7.77, and shown in Figure 7.32, is modified to
	
F t
A
t
T
A t
T
T
t
T
L
(
)
,
,
min
min
fill
fill
fill
fill
=
≤
<
−






≤
<
0
1
2
L
L
H
H
H
H
T
t
T
B
t
T
T
T
T
t
T
B
0
2
,
,
max
max
≤
≤
−
−






≤
<
fill
fill
fill
,
max
T
t
<





fill
	
	
	 where Tmin is the shortest time possible for a hemispherical tank with radius R = 7.5 ft to 
fill. The controllable parameters are confined to the ranges 0 ≤ c ≤ 4 ft3/min/ft1/2 and 
0 ≤ F1 ≤ 20 ft3/min. The end points where the objective function is zero are TL = 190 min 
and TH = 210 min. Finally, Tmax = 500 min. The numerical values of A and B, the limiting 
values of the objective function, are A = 80 and B = 40.
	
a.	 Find Tmin.
	
b.	 Generate a new surface plot similar to the one shown in Figure 7.33 for the region 
0 ≤ F1 < 20, 0 < c < 4.
	
c.	 Modify the objective function definition in “Ch7_globe_contours.m,” and plot the con­
tours corresponding to objective function values 0, 10, 20, …, (F0)max where (F0)max is the 
objective function value corresponding to a fill time of Tmin.
	
d.	 Find several optimum points (
,
)
F
c
1
opt
opt  on the F(Fi, c) = 0 contour.
	
e.	 Run a simulation of the globe filling with F
F
1
opt
=
1  and c = copt from part (d) and verify 
that the fill time falls between TL and TH.
	7.12	 Write a program to implement a gradient-based search algorithm to find a point (F1, c) where 
the objective function is zero. Test the algorithm starting from
	
a.	 F1 = 4 ft3/min, c = 1 ft3/min/ft1/2
	
b.	 F1 = 7.5 ft3/min, c = 2 ft3/min/ft1/2
	
c.	 F1 = 1 ft3/min, c = 0 ft3/min/ft1/2

629
Simulation Tools
	7.13	 For the hospital occupancy model, do a Monte Carlo simulation and plot the objective func­
tion F(µS) for µS = 15, 16, …, 30 with weights c1 = 1, c2 = 5. Use baseline values given in the 
text for the system parameters. Assume the hospital is initially operating at full occupancy.
	7.14	 Suppose the hospital has a holding facility where new patients wait for a bed to become available. 
Let the state variables in the discrete-time model be xB(i), the number of patients in rooms with 
beds at the end of the ith day, and xH(i), the number waiting for an assigned bed in the holding area 
at the end of the ith day. Patients are transferred from the holding area to a room with a bed on 
days when the number of emergency and scheduled arrivals is less than the number of discharged 
and dying patients. The number of beds is LB; the holding area can accommodate LH patients.
	
	   Repeat the Monte Carlo simulation described in the text using the baseline values of the 
system parameters and LH = 15. Plot graphs similar to the ones in Figure 7.46. The weights 
are c1 = c2 = 1. Note that the occupancy rate is based on the number of patients with beds, 
that is, with LB = 200 and LH = 15, the occupancy rate is 90% if xB = 180, xH = 0, and 100% 
if xB = 200, xH = 5.
	7.15	 Investigate the effect of variability in the number of scheduled arrivals on the hospital’s occu­
pancy rate. Choose the mean µS = 21 scheduled patients per day and simulate the percent 
occupancy as a function of the standard deviation σs where σs ranges from zero to three 
scheduled patients per day.
	7.16	 Use Monte Carlo simulation to obtain an empirical probability density function for random 
variable Y, the hospital’s percent occupancy. Use the following values for the system parameters:
	
µ
σ
µ
σ
µ
σ
s
S
E
E
D
D
=
=
=
=
=
=
24
9
6
4
28
,
,
,
,
,
,
2
2
2
9 	
	
µ
σ
M
M
L
x
=
=
=
=
2
25
2
2
,
.
,
,
2
0
0
00
00	
	
Hint: Simulate 100 records of sufficient length (in days) to obtain 100 observations y1, y2, 
y3, …, y100 where yi, i = 1, 2, 3, …, 100 is the percent occupancy corresponding to the ith 
record. Plot the results
	7.17	 Consider a loan in the amount of P dollars to be repaid in n equal monthly installments of A dol­
lars with interest at i per month. The unpaid balance Pk made after the kth payment is given by
	
P
P
iP
A
P
i
A k
n
k
k
k
k
=
+
=
+
=
…
−
−
−
1
1
1
 
 
1
 
 1  2
–
(
) –
,
,
,
, 	
	
	   A Simulink block diagram is shown in Figure E7.17. Note that the loan amount P is the 
initial condition of the “Unit Delay” block and the simulation stop time is set to n. Also, 
be sure to set the “Solver options Type” to “Fixed-step,” “Fixed-step size” to 
1, and the integrator to “discrete no continuous states.”
	
	   The terms of a car loan are P = $30,000, n = 48 months, and i = 0.005 (0.5% per month). 
For a fixed value of monthly payment A, the unpaid balance at the end of the loan period is 
P48. Positive values of P48 means A is too low and the loan has not been paid off in its entirety. 
FIGURE E7.17

630
Simulation of Dynamic Systems with MATLAB® and Simulink®
A negative value of P48 implies A is too much and overpayment of the loan has occurred. 
The correct amount of the monthly payment A to retire the loan after the last (48th) payment 
is the value of A for which the unpaid balance at the end of the loan period is zero.
	
a.	 Prepare a graph of P48 vs. A, for A = $600, $625, $650, …, $800. Estimate the correct 
value of A to repay the loan.
	
b.	 Write your own or use MATLAB’s optimization toolbox to determine the correct A by 
finding the value of A, which minimizes the objective function P48.
	
c.	 Plot Pk vs. k, k = 0, 1, 2, 3, …, 48 using the value of A found in part (b). Compare your 
answer for A with the correct value of A, which can be obtained from the formula
	
A
p
i
i
i
n
n
=
+
+
−






(
)
(
)
1
1
1 	
7.4  LINEARIZATION
Chapter 4 introduced a number of important concepts instrumental in analyzing the behavior 
of linear systems. By linear systems, we are referring to actual systems modeled by linear alge­
braic and differential equations. Real-world systems are inherently nonlinear. However, in certain 
regions, they may respond in a way that a linear model provides an acceptable representation of 
the system’s dynamics. Whenever we employ linear models to describe nonlinear systems, it must 
be with the understanding that the system remains within its so-called linear-operating region.
Consider the simple mechanical spring shown in Figure 7.47. Its deflection x from equilibrium 
depends on the magnitude and direction of the applied force F.
Measurements of deflection and force over a range of forces resulting in fracture from excessive 
compression or elongation produce a graph like the one shown in Figure 7.48.
The linear region of the spring is the section of the operating characteristic where x is propor­
tional to F. Known as Hooke’s law, the familiar form is
	
F
kx
=
	
(7.87)
where k is the spring constant, a measure of its stiffness. The linear model in Equation 7.87 is a valid 
model of the spring provided the applied force is confined to F1 ≤ F ≤ F2.
Numerous components behave in a similar fashion. The current in an electrical resistor is assumed 
proportional to the voltage across its terminals over a range of currents. Conductive heat flow due 
to a temperature difference between two points and fluid flow caused by pressure differences at 
F 
x
Equilibrium length 
x = 0 
FIGURE 7.47  Deflection of a mechanical spring subjected to an applied force.
FIGURE 7.48  Operating characteristic of spring showing its linear region.

631
Simulation Tools
different locations are additional examples of cause-and-effect relationships assumed to be linear 
over a range of operating conditions.
In the example of the spring, the static operating curve shown in Figure 7.48 can be divided into 
three distinct regions, that is, points {F, x(F)} where
1.	 Fmin < F < F1
2.	 F1 ≤ F ≤ F2 (linear region)
3.	 F2 < F < Fmax
The relation x = x(F) between force and displacement in each region is based on empirical 
observation as opposed to an analytical model or equation based on scientific principles or natural 
laws. In contrast, the liquid tank with incompressible fluid shown in Figure 7.49 is modeled by the 
linear first-order differential equation based on conservation of volume,
	
A H
t
F
F
d
d
+
=
0
1
	
(7.88)
along with the operating characteristic of the tank, that is, the relationship between the out flow and 
the liquid level, which applies in both the steady state and otherwise.
	
F
F H
cH
H
0
0
0
=
=
≥
(
)
,
/1 2
	
(7.89)
Equation 7.89 is based on Bernoulli’s principle from Physics. The constant c depends on the 
physical properties of the fluid, tank, and the discharge line.
Equation 7.88 was derived in Section 1.2. The discharge F0 was assumed proportional to H, that 
is, F0(H) = cH, resulting in a linear system model of the tank. A “real” tank is nonlinear by virtue 
of Equation 7.89.
7.4.1  Deviation Variables
A linearized tank model can be obtained to approximate the nonlinear tank dynamics. The tech­
nique relies upon the concept of an operating point and deviation variables. To illustrate, let us 
suppose a linearized tank model is required, which provides a reasonable approximation to the 
nonlinear system provided the inflow, level, and outflow vary only slightly from the steady-state 
values F1, H, F0 shown in Figure 7.50.
The operating point, for purposes of linearization, is characterized by an inflow F1 and the point 
(
,
)
H F0  where
	
F
cH
0
1 2
=
/
	
(7.90)
With steady-state conditions at the operating point, F
F
0
1
=
. From Equation 7.90,
FIGURE 7.49  A liquid tank with input F1(t) and dependent variables F0(t) and H(t).

632
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
H
F
c
F
c
=
=
0
2
2
1
2
2 	
(7.91)
When the inflow F1(t) and outputs H(t) and F0(t) differ from their operating point values, devia­
tion variables ∆F1(t), ∆H(t), and ∆F0(t) are introduced according to
	
F t
F
F t
H t
H
H t
F t
F
F t
1
1
( )
( ),
( )
( ),
( )
( )
=
+
=
+
=
+
1
0
0
0
∆
∆
∆
	
(7.92)
Deviation variables relate the differences between actual values of the system variables and their 
operating point levels, that is,
	
∆
∆
∆
F t
F t
F
H t
H t
H
F t
F t
F
1
1
( )
( )
( )
,
( )
,
( )
( )
=
−
=
−
=
−
1
0
0
0 	
(7.93)
Expanding F0 in Equation 7.89 in a Taylor Series about the operating point (
,
)
H F0 ,
	
F
F
H F H
H
H
H F H
H
H
H
H
H
H
0
0
0
2
2
0
2
=
+
−
+
−
+
=
=
d
d
d
d
(
)
(
)
(
)
(
)

	
(7.94)
	
⇒
−
=
+
+
+
=
=
F
F
F
H F H
H
H F H
H
H
H
H
H
0
0
0
0
2
2
0
2
∆
∆
∆
d
d
d
d
(
)
(
)

	
(7.95)
If ∆H is small in absolute value, then the ∆H2 term and all succeeding terms are higher order 
terms that can be ignored (to a first-order approximation). The result is a first-order Taylor Series 
approximation for the deviation flow ∆F0, namely,
	
∆
∆
∆
F
H F H
H
F H
H
H
H
0
0
0
≈
=
′
=
d
d
(
)
(
)
	
(7.96)
Differentiating Equation 7.89 to find the first derivative ′
F H
0(
) and evaluating the result at H
H
=
 
lead to
	
∆
∆
F
cH
H
0
1 2
2
≈
−
1
/
	
(7.97)
where the accuracy depends on the magnitude of ∆H (more about this point later).
F1
F0
H
(H, F0)
H
F0
H
F0
F0 = cH1/2
Operating Pt 
A
FIGURE 7.50  Operating point (
,
)
H F0  for tank linearization.

633
Simulation Tools
Substituting expressions in Equation 7.92 for F1(t), H(t), and F0(t) into Equation 7.88 gives
	
A t H
H t
F
F t
F
F t
d
d [
( )]
( )
( )
+
+
+
=
+
∆
∆
∆
0
0
1
1
	
(7.98)
	
⇒
+
+
+
=
+
A t H
A t
H t
F
F t
F
F t
d
d
d
d ∆
∆
∆
( )
( )
( )
0
0
1
1
	
(7.99)
Knowing F
F
0
1
=
 and the fact that A(d/dt) H = 0 leads to
	
A t
H t
F t
F t
d
d ∆
∆
∆
( )
( )
( )
+
=
0
1
	
(7.100)
Substituting the approximation in Equation 7.96 for ∆F0(t) into Equation 7.100 results in the first-
order linearized differential equation model
	
A t
H t
F H
H t
F t
d
d ∆
∆
∆
( )
(
)
( )
( )
+
′
=
0
1
	
(7.101)
The nonlinear-operating characteristic for the tank, Equation 7.89, has been approximated by the 
linear relationship of Equation 7.96, which can be written as
	
F
F
F H
H
H
0
0
0
=
+
′
−
(
)(
) 	
(7.102)
Equation 7.102 is the equation of the line tangent to the curve F0 = F0(H) at the operating point 
(
,
)
H F0 . Figure 7.51 illustrates the case when the tank constant c = 0.5 ft3/min/ft1/2 and the operating 
point (
,
)
H F0  = (9 ft, 1.5 ft3/min). Note that (
,
)
H F0  is the origin in a new coordinate system with 
∆H in the horizontal direction and ∆F0 in the vertical direction.
Before we generalize the procedure for linearization of certain types of nonlinearities, we illus­
trate, through the next example, a case where the nonlinear term in the system model is a product 
of dependent variables.
3
2.5
2
1.5
0.5
0
0
5
10
H (ft)
H = 9 ft, F0 = 1.5 ft3/min
F0 = (ft3/min)
F0 = 0.5 H1/2
Operating Pt:
Nonlinear tank operating curve and linearized model
ΔH
ΔF0 
ΔF0 = (1/12) ΔH
15
–
–
20
25
1
FIGURE 7.51  Nonlinear tank-operating curve and linearized approximation.

634
Simulation of Dynamic Systems with MATLAB® and Simulink®
Consider the well-stirred tank in Figure 7.52. The temperature of the liquid T(t) as well as its level 
H(t) is of interest. Accordingly, a second equation is required, one that introduces the additional 
dependent variable T(t).
The rate at which energy is stored in the liquid holdup is equal to the difference in the rate 
of energy flowing in and out of the tank. If we substitute the word “mass” for “energy,” we have 
the principle of conservation of mass, which led to the differential equation for the tank level in 
Equation 7.88. Applying the principle of conservation of energy in equation form gives
	
d
dt c
VT
c
FT
c
F T
p
p
p
(
)
γ
γ
γ
=
−
1 1
0
	
(7.103)
where
T(t) is the uniform liquid temperature in tank, °F
F1(t) is the input flow rate, ft3/min
T1(t) is the liquid temperature entering tank, °F
F0(t) is the output flow rate, ft3/min
V is the volume of liquid in tank, ft3
cp is the specific heat of liquid (Btu/lb-°F)
‘γ is the specific weight of liquid (lb/ft3)
The left-hand side accounts for the energy accumulation, and the right-hand side represents the 
difference in energy flows in the two streams. Replacing the tank volume V with the product AH in 
Equation 7.103 results in
	
A t HT
F T
FT
d
d (
)+
=
0
1 1
	
(7.104)
	
⇒
+
+
=
AH
T
t
AT
H
t
F T
FT
d
d
d
d
0
1 1
	
(7.105)
Equations 7.88, 7.89, and 7.105 comprise the nonlinear mathematical model of the system. 
Figure  7.53 illustrates the presence of two inputs (independent variables) and three dependent 
­variables. The state variables are T(t) and either H(t) or F0(t), but not both since they are related 
algebraically according to Equation 7.89.
FIGURE 7.52  Stirred tank with inputs F1(t), T1(t) and dependent variables H(t), F0(t), T(t).
FIGURE 7.53  Nonlinear system: tank with two inputs and three dependent variables.

635
Simulation Tools
A steady-state operating point is established where F t
F
1( ) =
1 and T t
T
1( ) =
1 with dependent 
­variables H t
H
( ) =
, F t
F
0
0
( ) =
, and T t
T
( ) =
. Introducing deviation variables
	
∆
∆
T
T t
T
T
T t
T
=
−
=
−
( )
,
( )
 
1
1
1 	
(7.106)
Equation 7.105 becomes
	
A H
H
t T
T
A T
T
t H
H
F
F
T
T
F
F
T
+∆
(
)
+∆
(
)+
+∆
(
)
+∆
(
)+
+∆
(
)
+∆
(
)
=
+∆
(
)
d
d
d
d
0
0
1
1
1
1
+∆
(
)
T
	
(7.107)
Deviation variables are assumed to be small in magnitude, and, therefore, the products 
Δ
Δ
Δ
Δ
H d
dt
T
T d
dt
H
,
, ∆F0∆T, and ∆F1∆T1 are negligible by comparison. Equation 7.107 
­simplifies to
	
AH t
T
AT
t
H
F T
F
T
T
F
FT
F
T
T
F
d
d
d
d
∆
+
∆
+
+
∆
+ ∆
=
+
∆
+
∆
0
0
0
1 1
1
1
1
1
	
(7.108)
Substituting AF0 from Equation 7.96 into Equation 7.108 and rearranging terms give
	
AH
T
t
AT
H
t
F
T
TF H
H
FT
F T
F
T
T
F
d
d
d
d
∆
∆
∆
∆
∆
∆
+
+
+
′
=
−
+
+
0
0
1 1
0
1
1
1
1
(
)
	
(7.109)
Recognizing that F
F
0
1
=
 and T
T
=
1 at the steady-state operating point, Equation 7.109 
reduces to
	
AH
T
t
AT
H
t
F
T
TF H
H
F
T
T
F
d
d
d
d
∆
∆
∆
∆
∆
∆
+
+
+
′
=
+
0
0
1
1
1
1
(
)
	
(7.110)
Equations 7.101 and 7.110 are coupled linearized differential equations of the tank. It is left as an 
exercise problem to show that the state derivatives are expressible as
	
d
d
d
d
t
H
t
T
F H
A
F
AH
∆
∆






=
−
′
−






0
0
0
0
(
)
∆
∆
∆
∆
H
T
A
F
AH
F
T





+












1
0
0
0
1
1
	
(7.111)
Simulation is an effective way to appreciate the limitations of a linearized model. The following 
example illustrates the point.
EXAMPLE 7.2
The tank shown in Figure 7.52 with cross-sectional area A = 100 ft2 is initially in equilibrium 
with F
F
1
0
=
= 25ft /min
3
, H= 9ft, and T
T
1
0
=
=
°
15
F. The input flow and temperature profiles are 
shown in Figure 7.54.
	
a.	Simulate the transient response of the nonlinear model when α = β = 0.1.
	
b.	Repeat part (a) using the linear state model in Equation 7.111.
	
c.	Compare the nonlinear and linearized responses and comment on the results.

636
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	Find the time constants τH and τT of the linearized system and show that τH = 2τT.
	
e.	Find expressions for H(∞) and T(∞) in response to constant inputs F t
F
1( ) = ˆ1, t ≥ 0 and 
T t
T
1( ) = ˆ1, t ≥ 0 based on the nonlinear model. Compute the numerical values for H(∞) 
and T(∞) when ˆ
(
)
F
F
1
1
=
+
1
α
 and ˆ
( – )
T
T
1
1
= 1 β
.
	
f.	Repeat part (e) using the linearized model and compare the results.
	
a.	Figure 7.55 is a Simulink diagram for simulating the dynamic response of the nonlinear 
and linearized system models.
	
	   The level H and temperature T of the nonlinear system are plotted in Figure 7.56. The 
transient period is on the order of 300 min for level and 200 min for temperature.
	
b.	The linearized system outputs are shown in Figure 7.57.
	
c.	The nonlinear and linearized transient responses for level and temperature are compared 
in Figure 7.58. For a 10% increase in inlet flow rate above F1 and a 10% decrease in inlet 
temperature below T1, the nonlinear system and linearized system approximation exhibit 
nearly identical transient responses.
	
d.	Referring to Equation 7.101, the time constant τH of the linearized system is
	
τH
A
F H
A
cH
AH
c
=
′
=
=
−
0
1 2
1 2
1 2
2
(
)
(
)
/
/
/
	
(7.112)
	
	 Solving for c in Equation 7.90 and substituting the result into Equation 7.112 give
	
τH
AH
F H
AH
F
=
=
=
=
−
2
2
2100 9
25
72
1 2
0
1 2
0
/
/
(
)( )
min
	
(7.113)
FIGURE 7.54  Tank system input profiles.
FIGURE 7.55  Simulink diagram for simulation of nonlinear and linearized system.

637
Simulation Tools
	
	 From the second of the two state equations in Equation 7.111, the time constant τT is
	
τT
AH
F
=
=
=
0
100 9
25
36
( )
min
	
(7.114)
	
	 τH = 2τT follows directly from Equations 7.113 and 7.114.
	
e.	At steady state (t = ∞), dH/dt and dT/dt are zero. Setting dH/dt equal to zero in Equation 
7.88 gives
	
F
F
F
0
1
1
(
)
(
)
∞=
∞= ˆ 	
(7.115)
10.8
11
10.6
10.2
10.4
10
9.6
9.4
9.2
9
8.8
9.8
0
60
120 180 240 300
H(t), (ft)
Tank height vs. time
(a)
(b)
t (min)
0
50
100
150
200
150
146
144
148
142
140
138
136
134
T(t), (°F)
Tank temperature vs. time
t (min)
FIGURE 7.56  Nonlinear system response of (a) level and (b) temperature.
10.8
10.4
10
9.6
9.2
8.8
0
0
25
50
75
100
125
150
175
200
50
100
150
250
300
200
150
146
142
138
134
H(t), (ft)
T(t), (°F)
t (min)
Linearized tank height vs. time
(a)
(b)
Linearized tank temperature vs. time
FIGURE 7.57  Linearized system (a) level and (b) temperature transient response (α = β = 0.1).

638
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	 According to the tank-operating characteristic (Equation 7.89),
	
F
c H
0
1 2
(
)
[ (
)] /
∞=
∞
	
(7.116)
	
	 Solving for H(∞) in Equation 7.116,
	
H
F
c
F
c
(
)
(
)
∞=
∞





=






0
2
1
2
ˆ
	
(7.117)
	
	 Setting (dH/dt) = (dT/dt) = 0 in Equation 7.105 gives
	
F
T
F
T
T
T
T
0
1
1
1
(
) (
)
(
) (
)
(
)
(
)
1
∞
∞=
∞
∞⇒
∞=
∞= ˆ 	
(7.118)
	
	 The tank constant c is obtained from the given operating point conditions, that is,
	
c
F
H
=
=
=
0
1 2
1 2
1 2
25
9
25
3
/
/
/
ft /min/ft
3
	
(7.119)
	
	 The numerical values of H(∞) and T(∞) are
	
H
F
c
F
c
(
)
/
∞=






=
+





= 





ˆ
(
)
. (
)
1
2
1
2
1
1 1 25
25 3
α
2
1
1
10 89
1
0 9 150
135
=
∞=
=
−
=
=
°
.
(
)
ˆ
(
)
. (
)
F
ft
T
T
T
β
	
(7.120)
10.8
10.4
10
9.6
9.2
8.8
0
60
120 180 240 300
H(t), (ft)
Nonlinear tank height vs. time
(a)
(b)
0
50
100
Nonlinear tank temperature vs. time
T(t), (°F)
150
200
150
146
142
138
134
Linearized tank height vs. time
t (min)
H(t), (ft)
10.8
10.4
10
9.6
9.2
8.8
0
60
120 180 240 300
Linearized tank temperature vs. time
t (min)
T(t), (°F)
0
50
100
150
200
150
146
142
138
134
FIGURE 7.58  Comparison of (a) nonlinear and (b) linearized system transient responses.

639
Simulation Tools
	
f.	Setting (d/dt)∆H = (d/dt)∆T = 0 in Equation 7.111 and solving for ∆H(∞) and ∆T(∞) give
	
∆
∆
H
H
F H
A
F
AH
A
(
)
(
)
(
)
∞
∞





= −
−′
−






−
−
0
0
1
0
0
1
0
0
F
AH
F
T
0
1
1












∆
∆
	
(7.121)
	
= −
−′
−






−






A
F H
AH
F
A
F
AH
0
0
0
0
0
1
0
0
(
)
∆
∆
F
T
1
1






	
(7.122)
	
=
′











=
′





1
0
0
1
1
0
1
1
0
1
F H
F
T
F H
F
T
(
)
(
)
∆
∆
∆
∆
	
(7.123)
	
	
The slope ′
F H
0(
) is obtained by differentiation of Equation 7.89 followed by substitu­
tion of the values c = 25/3 ft3/min/ft1/2 and H= 9ft. The result is ′
=
F H
0(
)
25/18ft /min/ft
3
. 
The deviation variables at steady state are
	
∆
∆
H
F H
F
F H
F
(
)
(
)
(
)
( . )(
)
. ft
∞=
′
=
′
=
=
1
1
1
25 18 0 1 25
1 8
0
0
1
α
/
	
(7.124)
	
∆
∆
T
T
T
(
)
.
∞=
= −
= −
= −
°
1
1(15 )
15
β 1
0
0
	
(7.125)
	
	
The steady-state level and temperature from the linearized model are
	
H
H
H
(
)
(
)
.
∞=
+
∞=
∆
1 8ft
0
	
(7.126)
	
T
T
T
(
)
(
)
∞=
+
∞=
°
∆
135 F 	
(7.127)
	
	
The steady-state level based on the linearized system model differs by 0.09 ft from 
the value based on the nonlinear model. The steady-state temperatures are the same 
from both the nonlinear and linearized system models.
7.4.2  Linearization of Nonlinear Systems in State Variable Form
The starting point is a nonlinear system model
	
x
f t x u
( , , )
=
	
(7.128)
	
y
g t x u
= ( , , ) 	
(7.129)
where
x = [x1 x2 … xn]T is the n × 1 state vector
y = [y1 y2 … yp]T is a p × 1 vector of outputs
u = [u1 u2 … um]T is the m × 1 input vector
t is time

640
Simulation of Dynamic Systems with MATLAB® and Simulink®
Equations 7.128 and 7.129 are short for
	





x
x
x
f t x u
f t x u
f t x u
n
n
1
2
1
2






=

( , , )
( , , )
( , , )











=
,
( , , )
(
y
y
y
g t x u
g t
p
1
2
1
2

, , )
( , , )
x u
g t x u
p






	
(7.130)
The objective is to linearize Equations 7.128 and 7.129 about a nominal operating point in the 
state space x
x x
xn
T
0
1
0
2
0
0
=[
]
…
 for a given (usually constant) input vector u
u u
um
T
0
1
0
2
0
0
=[
]
…
. The 
first-order Taylor Series approximation of the function f1(t, x, u) about the point (x0, u0) is given by
	
x
f t x u
x f t x u
x
x
x f t x u
x
1
1
0
0
1
1
0
0
1
1
0
2
1
0
0
2
=
+ ∂
∂
−
+ ∂
∂
( ,
,
)
( ,
,
)(
)
( ,
,
)(
−
+
+ ∂
∂
−
+ ∂
∂
−
+ ∂
x
x f t x u
x
x
u f t x u
u
u
n
n
n
2
0
1
0
0
0
1
1
0
0
1
1
0
)
( ,
,
)(
)
( ,
,
)(
)

∂
−
+
+ ∂
∂
−
u f t x u
u
u
u
f t x u
u
u
m
m
m
2
1
0
0
2
2
0
1
0
0
0
( ,
,
)(
)
( ,
,
)(
)

	
(7.131)
Similar relations hold for 

x
xn
2,…
. Introducing deviation variables
	
∆
=
−
∆
=
−
∆
=
−
∆
=
−
∆
=
−
x
x
x
x
x
x
x
x
x
u
u
u
u
u
u
n
n
n
1
1
1
0
2
2
2
0
0
1
1
1
0
2
2
2
0
,
,...,
,
,..., ∆
=
−
u
u
u
m
m
m
0	
leads to the linearized approximation of Equation 7.128 by
	
∆=
∆+ ∆
x
A
x
B
u 	
(7.132)
where
	
A
f
x
x u
f
x
x u
f
x
x u
f
x
x u
f
n
=
∂
∂
∂
∂
∂
∂
∂
∂
∂
1
1
0
0
1
2
0
0
1
0
0
2
1
0
0
2
(
,
)
(
,
)
(
,
)
(
,
)

∂
∂
∂
∂
∂
∂
∂
∂
x
x u
f
x
x u
f
x
x u
f
x
x u
f
n
n
n
n
2
0
0
2
0
0
1
0
0
2
0
0
(
,
)
(
,
)
(
,
)
(
,
)





∂






x
x u
n
(
,
)
0
0
	
(7.133)
	
B
f
u
x
u
f
u
x
u
f
u
x
u
f
u
x
u
f
m
=
∂
∂
∂
∂
∂
∂
∂
∂
∂
1
1
0
0
1
2
0
0
1
0
0
2
1
0
0
2
(
,
)
(
,
)
(
,
)
(
,
)

∂
∂
∂
∂
∂
∂
∂
∂
u
x
u
f
u
x
u
f
u
x
u
f
u
x
u
f
m
n
n
n
2
0
0
2
0
0
1
0
0
2
0
0
(
,
)
(
,
)
(
,
)
(
,
)





∂






u
x
u
m
(
,
)
0
0
	
(7.134)

641
Simulation Tools
and
	
∆= ∆
∆
∆


∆= ∆
∆
∆


∆= ∆
∆
∆






x
x
x
x
x
x
x
x
u
u
u
u
n
T
n
T
m
T
1
2
1
2
1
2
…
…
…
	
The combined matrix [A|B] of all partials is called the Jacobian matrix of the vector function 
f(t, x, u) defining the state derivatives. In similar fashion, the linearized approximation to Equation 
7.129 is given by
	
∆
∆
∆
y
C
x
D
u
=
+ 
	
(7.135)
where
	
∆
∆
∆
∆
y
y
y
y
y
y
y
y
y
y
p
T
p
p
T
=
=
−
−
−


[
]
1
2
1
1
0
2
2
0
0


	
and
	
y
g x u
i
p
i
i
0
0
0
1 2
=
=
(
,
),
, ,
,
…
	
(7.136)
C and D are matrix of partials with components
	
c
g
x
x u
i
p j
n
ij
i
j
= ∂
∂
=
=
(
,
),
, ,
, ,
, ,
,
0
0
1 2
1 2
…
…
	
(7.137)
	
d
g
u
x u
i
p j
m
ij
i
j
= ∂
∂
=
=
(
,
),
, ,
, ,
, ,
,
0
0
1 2
1 2
…
…
	
(7.138)
To illustrate the process of linearizing a nonlinear state variable model, consider the inverted 
pendulum previously introduced in Section 5.4, redrawn in Figure 7.59.
The coupled nonlinear differential equations describing the system (Equations 5.50 and 5.51) can 
be manipulated to read
	


x
ml
mg
u
M
m
=
−
+
+
θ
θ
θ
θ
2
2
2
2
sin
(
)sin
sin
/
	
(7.139)
	


θ
θ
θ
θ
θ
θ
= −
−
+
−
+
(
)
sin
(
) sin
cos
(
sin
)
ml
m
M g
u
l M
m
/2
2
2
2
	
(7.140)
FIGURE 7.59  A nonlinear system: the inverted pendulum.

642
Simulation of Dynamic Systems with MATLAB® and Simulink®
State variables are x1, x2, x3, x4 where x1 = x, x2 = x, x3 = θ, x4 = θ. The state derivatives are 
given by
	
x
f x u
x
1
1
2
=
=
( , )
	
(7.141)
	
x
f
x u
mlx
x
mg
x
u
M
m
x
2
2
4
2
3
3
2
3
2
2
=
=
−
+
+
( , )
sin
(
)sin
sin
/
	
(7.142)
	
x
f x u
x
3
3
4
=
=
( , )
	
(7.143)
	
x
f
x u
ml
x
x
m
M g
x
u
x
l M
m
x
4
4
4
2
3
3
3
2
3
2
2
=
= −
+
+
−
+
( , )
(
)
sin
(
) sin
(
sin
/
cos
)
	
(7.144)
Choosing the outputs as x and θ,
	
y
g x u
x
1
1
=
=
( , ) 
1	
(7.145)
	
y
g
x u
x
2
2
3
 
=
=
( , )
	
(7.146)
Components of the linearized system matrices A, B, C, and D consist of the partials
	
a
f
x
x
u
a
f
x
x
u
a
f
x
x
u
11
1
1
0
0
12
1
2
0
0
13
1
3
0
0
0
1
= ∂
∂
=
= ∂
∂
=
= ∂
∂
=
(
,
)
,
(
,
)
,
(
,
)
a
f
x
x
u
14
1
4
0
0
0
= ∂
∂
=
(
,
)
	
(7.147)
 
a
f
x
x
u
a
f
x
x
u
a
f
x
x
u
21
2
1
0
0
22
2
2
0
0
24
2
4
0
0
0
0
= ∂
∂
=
= ∂
∂
=
= ∂
∂
=
(
,
)
,
(
,
)
,
(
,
)
2
4
3
2
3
mlx
x
M
m
x
sin
sin
+
	
(7.148)
The component a23 is equal to N1/D1 evaluated at the operating point (x0, u0) where
	
N
M
m
x
mlx
x
mg
x
mlx
x
mg
1
2
3
4
2
3
2
3
4
2
3
1
2
=
+
−
−


−
−
(
sin
)
cos
(
sin
)
sin
2
2
2
3
3
sin
(
sin
)
x
u
m
x
+






	
(7.149)
	
D
M
msin x
1
2
3
2
=
+
(
) 	
(7.150)
 
a
f
x
x
u
a
f
x
x
u
a
f
x
x
u
a
31
3
1
0
0
32
3
2
0
0
33
3
3
0
0
34
0
= ∂
∂
=
= ∂
∂
=
∂
∂
=
(
,
)
(
,
)
(
,
)
,
= ∂
∂
=
f
x
x
u
3
3
0
0
1
(
,
)
	
(7.151)
 
a
f
x
x
u
a
f
x
x
u
a
f
x
x
u
41
4
1
0
0
42
4
2
0
0
44
4
4
0
0
0
0
= ∂
∂
=
= ∂
∂
=
∂
∂
=
−
(
,
)
,
(
,
)
,
(
,
)
mlx
x
l M
m
x
4
3
2
3
2
sin
(
sin
)
+
	
(7.152)

643
Simulation Tools
The component a43 is equal to N2/D2 evaluated at the operating point (x0, u0) where
	
N
l M
m
x
mlx
x
m
M g
x
u
x
2
2
3
4
2
2
3
3
3
1
2
−
+
−
−
+
+
+


+
(
sin
)
(
sin
)
(
) cos
sin
m lx
x
m
M g
x
u
x
lm
x
2
2
2
4
2
2
3
3
3
3
sin
(
) sin
cos
sin
−
+
+






	
(7.153)
	
D
l M
m
x
2
2
3
2
=
+
(
)




sin
	
(7.154)
	
b
f
u x
u
b
f
u x
u
M
m
x
11
1
0
0
21
2
0
0
2
3
0
1
= ∂
∂
=
= ∂
∂
=
+
(
,
)
,
(
,
)
sin
	
(7.155)
	
b
f
u x
u
b
f
u x
u
x
l M
m
x
31
3
0
0
41
4
0
0
3
2
3
0
= ∂
∂
=
= ∂
∂
=
−
+
(
,
)
,
(
,
)
cos
(
sin
) 	
(7.156)
 
c
g
x
x
u
c
g
x
x
u
c
g
x
x
u
c
11
1
1
0
0
12
1
2
0
0
13
1
3
0
0
1
0
= ∂
∂
=
= ∂
∂
=
∂
∂
=
(
,
)
,
(
,
)
,
(
,
)
14
1
4
0
0
0
= ∂
∂
=
g
x
x
u
(
,
)
	
(7.157)
 
c
g
x
x
u
c
g
x
x
u
c
g
x
x
u
c
21
2
1
0
0
22
2
2
0
0
23
2
3
0
0
0
1
= ∂
∂
=
= ∂
∂
=
∂
∂
=
(
,
)
(
,
)
,
(
,
)
,
24
2
4
0
0
0
= ∂
∂
=
g
x
x
u
(
,
)
	
(7.158)
	
d
g
u x
u
d
g
u
x
u
11
1
0
0
21
2
0
0
0
= ∂
∂
=
= ∂
∂
=
(
,
)
(
,
)
	
(7.159)
Suppose the steady-state operating point is x0 = [0 0 π 0]T and input u0 = 0. The nonzero ele­
ments of matrices A, B, C, and D are
	
a
a
m
M g
a
a
g
l
m
M
M
b
M
b
lM
c
c
12
23
34
43
21
41
11
23
1
1
1
1
=
= −
=
= −
+
=
=
=
=
,
,
,
(
) ,
,
,
1
	
(7.160)
For M = 3 kg, m = 0.1 kg, l = 0.75 m, g = 9.8 m/s2, the system matrices are
 
A
B
1
1
0
1
0
0
0
0
0 3267
0
0
0
0
1
0
0
13 5022
0
0
0 3
=
−
−






=
.
.
,
. 33
0
0 444
1
0
0
0
0
0
1
0
0
0
1
1
.
,
,






=






=




C
D


	
(7.161)
7.4.3  Linmod Function
Simulink estimates the matrices A, B, C, and D in the linearized approximation by using small per­
turbations in the state and input(s) to numerically calculate the partial derivatives. The “linmod” 

644
Simulation of Dynamic Systems with MATLAB® and Simulink®
and “1inmod2” functions extract the linearized model coefficient matrices from a Simulink 
­diagram of the nonlinear system.
The top level of a Simulink simulation of the inverted pendulum is shown in Figure 7.60.
The “cart” subsystem is shown in Figure 7.61.
The MATLAB statement
[sizes, X0, states] = InvertPend_1 ([], [], [],0);
in M-file “Ch7_InvertPend.m” returns the following information:
sizes = 4
x0 = 0
0
3.1416
2
0
1
0
0
 
1
 
1
 
	
states = 'InvertPend_l/cartmodel/x Integrator'
	
'InvertPend_l/cart model/theta Integrator'
	
'InvertPend_l/cart model/xd Integrator'
	
'InvertPend_l/cart model/thetad Integrator'
The first four components of the output ‘sizes’ reveal the number of continuous states (4), 
discrete states (0), outputs (2), and inputs (1) in the Simulink model. The ordering of the states is 
conveyed by the output vector “states,” which in the present case is seen to be “x,” “theta,” 
“xd,” and “thetad.” “X0” reports the initial values of the state vector in the order defined 
by the output “states.” It will soon become apparent why the ordering of the state vector is 
significant.
FIGURE 7.60  Simulink model of inverted pendulum showing input and two outputs.

645
Simulation Tools
The same M-file “Ch7_InvertPend.m” contains the statement
[A2, B2, C2, D2] = linmod('InvertPend_1',x_operpt,u0)
which returns the linearized system matrices. The first argument “InvertPend_1” is the Simulink 
model file name, while “x_operpt” and “uo” are arrays with numerical values of the state and 
input at the operating point.
The “1inmod” function returns the matrices
   
A
B
2
2
0
0
1
0
0
0
0
0
0
0 3267
0
1
0
13 5022
0
0
0
0
0
=
−
−






=
.
.
,
.333
0 444
1
0
0
0
0
0
1
0
0
0
2
2
.
,
,






=






=




C
D


	
(7.162)
The matrices in Equations 7.161 and 7.162 are different as a result of the difference in the order­
ing of the state vector in the two different linearized models of the system. That is, from Equation 
7.161, when the state is [
],
∆∆∆∆
x
x
T

θ
θ  we have
	
∆
∆
∆
∆






=
∆
∆
∆
∆











x
x
x
x
x
x
1
2
3
4
θ
θ



=
−
−






0
1
0
0
0
0
0 3267
0
0
0
0
1
0
0
13 5022
0
.
.
∆
∆
∆
∆






+






x
x

θ
θ
0
0 333
0
0 444
.
.

∆

u
	
(7.163)
FIGURE 7.61  Cart subsystem showing internal states.

646
Simulation of Dynamic Systems with MATLAB® and Simulink®
On the other hand, when the state is [
],
∆∆∆∆
x
x
T
θ

θ  Equation 7.162 implies
	
∆
∆
∆
∆






=
∆
∆
∆
∆











x
x
x
x
x
x
1
2
3
4
θ
θ



=
−
−






0
0
1
0
0
0
0
0
0
0 3267
0
1
0
13 5022
0
0
.
.
∆
∆
∆
∆






+






x
x
θ
θ


0
0
0 333
0 444
.
.

∆

u
	
(7.164)
Once the linearized system matrices A1, B1, C1, and D1 or A2, B2, C2, and D2 are known, the 
inverted pendulum dynamics can be approximated using either set, and the response should com­
pare favorably with the nonlinear system response provided the state and input deviations from the 
operating point are kept small. Figure 7.62 is the Simulink diagram for comparing the nonlinear 
system model and the linearized model using the set of matrices A2, B2, C2, and D2 obtained from 
the “1inmod” function.
Figure 7.63 shows the nonlinear and linearized response for θ(t) corresponding to a pulse input 
force of magnitude 2.5 N from 1 to 2 s. Agreement between the nonlinear and linearized responses 
is very good. Note the small deviation in θ(t) from θ0 = π rad resulting from the particular input.
Figure 7.64 exemplifies what happens when the state vector x(t) deviates by a significant amount 
from x0. The magnitude of the applied force pulse input is increased to 25 N. The nonlinear system 
model and linearized approximation no longer exhibit the same level of agreement as before.
Due to the absence of damping, the (nonlinear and linear) models predict sustained oscillations. 
Hence, the coefficient matrices Al and A2 must possess a pair of purely imaginary characteristic 
roots, easily confirmed by checking the eigenvalues of each. The statements “eig (Al)” and “eig 
(A2)” both return two real eigenvalues 0,0, and two imaginary eigenvalues ± j3.674537.
A closer look at Equations 7.163 and 7.164 reveals a simpler formulation of the governing equa­
tions. From Equation 7.164,
	
∆
∆
∆
x
u
=−
+
0
0
.
.
3267 
333
θ
	
(7.165)
	
∆
∆
∆
θ
.
.
+
=
13 5 22 
444
0
0
θ
u	
(7.166)
FIGURE 7.62  Simulink diagram for comparing nonlinear and linearized models.

647
Simulation Tools
The natural modes from Equation 7.166 are sl, s2 = (–13.5022)1/2 = ± j3.6745, and the frequency 
of undamped oscillations is ωn = 3.6745 rad/s (see Figures 7.63 and 7.64). Furthermore, the two 
remaining characteristic roots are, from Equation 7.165, both zero. Laplace transforming Equations 
7.165 and 7.166 and solving for ∆θ(s) and ∆X(s) result in
	
∆
=
+
∆
θ( )
.
.
( )
s
s
U s
0 444
13 5022
2
	
(7.167)
	
∆
=
+
+





∆
X s
s
s s
U s
( )
.
.
(
.
)
( )
0 333
13 0666
13 5022
2
2
2
	
(7.168)
Nonlinear and linearized pendulum angle in rad, u(t) = 2 N, 1 ≤ t ≤ 2
3.3
3.2
3.1
3
θNL (t), rad
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
3.3
3.2
3.1
3
θL (t), rad
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
Linear
Nonlinear
5
3.3
3.2
3.1
3
0
0.5
1
1.5
2
2.5
t (s)
3
3.5
4
4.5
5
FIGURE 7.63  Nonlinear and linearized model response θ(t) for u(t) = 2.5 N, 1 ≤ t ≤ 2.
Nonlinear and linearized pendulum angle in rad, u(t) = 25 N, 1 ≤ t ≤ 2
5
4
3
2
5
4
3
2
5
4
3
2
θNL (t), rad
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
5
θL (t), rad
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
Linear
Nonlinear
5
0
0.5
1
1.5
2
2.5
t (s)
3
3.5
4
4.5
5
FIGURE 7.64  Nonlinear and linearized model response θ(t) for u(t) = 25 N, 1 ≤ t ≤ 2.

648
Simulation of Dynamic Systems with MATLAB® and Simulink®
The inverted pendulum is often used as an example of an inherently (open-loop) unstable 
system, and numerous linear controls texts demonstrate techniques for designing linear control­
lers to balance the pendulum in the upright position (θ = 0). The steady-state operating point 
[
,
,
,
;
]
, , , ;
x
x
u
0
0
0
0
0
0 0 0 0 0


θ
θ
=(
) is unstable, easily verified by changing “x30” = θ0 to zero in M-file 
“Ch7_InvertPend.m” and observing the eigenvalues of the linearized system matrix A1 or A2. Of 
course, basic intuition suggests as much, that is, “What happens to the pendulum when it is dis­
placed from the upright equilibrium position?” Exercise 7.24 looks at this case in more detail.
You can implement your own “linmod” function to numerically compute the linearized sys­
tem matrices A, B, C, and D. To illustrate, suppose we wish to estimate a43 in Equation 7.163. The 
exact value of –13.5022 was computed from the analytical expression for the partial derivative 
(
)(
,
)
∂
∂
f
x
x u
4
3
0
0
/
 using Equations 7.153 and 7.154. A simple central difference formula to approxi­
mate (
)
∂
∂
f
x
x u
4
3
0
0
/
(
,
) is
	
∂
∂
≈
+∆
−
−∆
f
x
x
u
f
x
x
x
x u
f
x
x
x
x
4
3
0
0
4
1
0
2
0
3
0
4
0
0
4
1
0
2
0
3
0
4
(
,
)
(
,
,
,
,
)
(
,
,
,
0
0
2
,
)
u
∆
	
(7.169)
From Equation 7.144, the numerator terms are
	
f
x
x
x
x u
ml
x
x
m
M g
4
1
0
2
0
3
0
4
0
0
4
0 2
3
0
2
2
(
,
,
,
,
)
(
)(
) sin (
)
(
) sin
+∆
= −
+∆+
+
(
)
cos(
)
[
sin (
)]
x
u
x
l M
m
x
3
0
3
0
2
3
0
+∆−
+∆
+
+∆

(7.170)
	
f
x
x
x
x u
ml
x
x
m
M g
4
1
0
2
0
3
0
4
0
0
4
0 2
3
0
2
2
(
,
,
,
,
)
(
)(
) sin (
)
(
) sin
−∆
= −
−∆+
+
(
)
cos(
)
[
sin (
)]
x
u
x
l M
m
x
3
0
3
0
2
3
0
−∆−
−∆
+
−∆

(7.171)
The operating point is (x0; u0) = [0 0 π 0; 0]T. After substituting in the numerical values for m, 
M, g and choosing ∆ = 0.01, we have
	
∂
∂
≈
+
+
+
f
x
x
u
4
3
0
0
0 1
3 9 8
0 75 2 0 01
0 01
3
0 1
(
,
)
( .
)( . )
( .
)( )( .
)
sin(
.
)
. s
π
in (
)
sin(
.
)
. sin (
)
.
2
2
0 01
3
0 1
13 5020
π
π
π
+
−
−
+
−






≈−
0.01
0.01
	
(7.172)
which is very close to the analytically obtained value –13.5022. Another example of linearization 
involving nonlinear tanks is presented in Section 8.4.
7.4.4  Multiple Linearized Models for a Single System
When the inputs to a nonlinear system vary by a considerable amount, a single linearized model 
may no longer be sufficient to describe the excursions of the state vector about an individual operat­
ing point. It becomes necessary to linearize the system dynamics in terms of deviation variables 
about different operating points. The linearized models are applicable to specific regions in state 
space. While the initial state may have been at equilibrium, be mindful that the initial conditions 
of the deviation variables are no longer zero as the state transitions between different linearized 
regions in state space. The situation is illustrated in Figure 7.65 for an autonomous, second-order 
system with different linearized models in each of the four quadrants of state space.

649
Simulation Tools
An example of how to accommodate multiple operating points is illustrated using the nonlinear 
second-order system in Figure 7.66. The mathematical model describing the coupled dynamics of 
the two tanks is given in Equations 7.173 through 7.176.
	
A
H
t
F
F
1
1
1
0
d
d
+
=
	
(7.173)
	
F
c H
1
1
1
1 2
=
/
	
(7.174)
	
A
H
t
F
F
2
2
2
1
d
d
+
=
	
(7.175)
	
F
c H
2
2
2
1 2
=
/
	
(7.176)
Solving for the state derivative functions gives
	
d
d
H
t
f H H F
A
F
c H
1
1
1
2
0
1
0
1
1
1 2
1
=
=
−
(
,
,
)
(
)
	
(7.177)
	
     
d
d
H
t
f H H F
A
c H
c H
2
2
1
2
0
2
1
1
1 2
2
2
1 2
1
=
=
−
(
,
,
)
(
)
	
(7.178)
FIGURE 7.65  State trajectory of an autonomous, nonlinear, second-order system linearized about four 
­different operating points.
FIGURE 7.66  Second-order system consisting of two nonlinear first-order tanks.

650
Simulation of Dynamic Systems with MATLAB® and Simulink®
Suppose the flow into the first tank is constant, that is, F t
F
0
0
( ) = , t ≥ 0. Steady-state levels are 
obtained by setting both derivatives equal to zero. The result is
	
(
)
, (
)
H
F
c
H
F
c
ss
ss
1
0
1
2
2
0
2
2
=






=








	
(7.179)
A typical state trajectory starting from {H1(0), H2(0)} and ending at {(H1)ss, (H2)ss} is shown in Figure 
7.67. Four different operating points designated (
,
)
H H
1
2  in the (H1, H2) state space are also shown.
Equations 7.177 and 7.178 are initially linearized about the operating point (
,
)
H H
1
2  nearest to 
the initial state {H1(0), H2(0)}. The equations are relinearized as necessary, that is, when the state 
trajectory transitions from a neighborhood about one operating point to another region about a dif­
ferent operating point.
For nonlinear systems with inputs, linearization requires a nominal input for each operating 
point. The following example presents the results of using a single operating point compared with 
using multiple operating points for linearizing the two-tank system in Figure 7.66 with constant 
inflow.
EXAMPLE 7.3
For the two-tank system shown in Figure 7.66, baseline parameter values are
	
A
A
c
c
1
2
2
2
1
3
1 2
2
3
1 2
25 ft
15 ft
3 ft /min/ft
4 ft /min/ft
=
=
=
=
,
,
,
/
/
	
	
a.	Find the steady-state levels (H1)ss and (H2)ss when F0 =  12 ft /min
3
.
	
b.	Choose a steady-state operating point (
,
)
H H
1
2  where H
H
ss
1
1
5
= 0. (
)  Find the tank 2 level 
H2 at the operating point and the nominal inflow F0 at the operating point.
	
c.	Introduce deviation variables and linearize the model differential equations.
	
d.	Solve the linearized equations for the case where both tanks are initially empty and 
F0 = 12 ft /min
3
. Compare the level responses of both tanks to the solutions obtained 
from the nonlinear equations.
	
e.	Plot state trajectories for the linearized and nonlinear systems.
	
f.	Establish four steady-state operating points corresponding to tank 1 levels of 0.125(H1)ss, 
0375(H1)ss, 0.625(H1)ss, and 0.875(H1)ss.
	
g.	Repeat parts (d) and (e).
FIGURE 7.67  Several operating points and state trajectory for tanks subject to F t
F
0
0
( ) = , t ≥ 0.

651
Simulation Tools
	
a.	From Equation 7.179, the steady-state levels are
	
(
)
,
(
)
H
F
c
H
F
ss
ss
1
0
1
2
2
2
0
12
3
16
=





= 




=
=


ft
c2
2
2
12
4
9





= 




=
ft
	
(7.180)
	
b.	The required inflow F0 to maintain tank 1 level at H
H
ss
1
1
5(
)
8 ft
=
=
0.
 is equal to the 
steady-state outflow from tank 1, that is,
	
F
F
c H
0
1
1
1 2
=
=
=
= .
/
/
1
1 2
3
3(8)
8 4853 ft /min 	
(7.181)
	
	
For steady-state conditions, tank 2 level must be
	
H
F
c
F
c
2
2
2
2
1
2
2
1 2
3 8
4
=





=





=






( )
2
4 5
=
. ft
	
(7.182)
	
	
The steady-state operating point is (
,
)
(
, .
)
H H
1
2 = 8 ft 4 5 ft  and F0 = 8 4853ft /min
3
.
.
	
c.	Introducing deviation variables ∆H
H
H
1
1
=
–
1, ∆H
H
H
2
2
=
–
2 for the tank levels and 
∆F
F
F
F
F
0
0
0
0
0
=
=
−
–

 for the inflow to tank 1 produces a system of linearized differential 
equations
	
∆
=
∆
+
∆
+
∆
H
a
H
a
H
b
F
1
11
1
12
2
1
0 	
(7.183)
	
∆
=
∆
+
∆
+
∆
H
a
H
a
H
b
F
2
21
1
22
2
2
0 	
(7.184)
	
a
H f H H F
c
AH
H
H H
H F
F
11
1
1
1
2
0
1
1
1
1 2
1
1
2
2
0
0
2
=
∂
∂
=
−
=
=
=
(
,
,
)
,
,
	
(7.185)
	
a
H f H H F
H
H H
H F
F
12
2
1
1
2
0
1
1
2
2
0
0
0
=
∂
∂
=
=
=
=
(
,
,
)
,
,
	
(7.186)
	
a
H f H H F
c
A H
H
H H
H F
F
21
1
2
1
2
0
1
2
1
1 2
1
1
2
2
0
0
2
=
∂
∂
=
=
=
=
(
,
,
)
,
,
	
(7.187)
	
a
H f H H F
c
A H
H
H H
H F
F
22
2
2
1
2
0
2
2
2
1 2
1
1
2
2
0
0
2
=
∂
∂
=
−
=
=
=
(
,
,
)
,
,
	
(7.188)
	
b
F f H H F
A
H
H H
H F
F
1
0
2
1
2
0
1
1
1
2
2
0
0
1
= ∂
∂
=
=
=
=
(
,
,
)
,
,
	
(7.189)
	
b
F f H H F
H
H H
H F
F
2
0
2
1
2
0
1
1
2
2
0
0
0
= ∂
∂
=
=
=
=
(
,
,
)
,
,
	
(7.190)
	
	
Substituting values for A1, A2, c1, c2, H1, H2 in Equation 7.185 and Equations 7.187 
through 7.189, the linearized tank model is
	
∆
= −
∆
+
∆
H
H
F
1
1
0
0 212
0 04
.
.
	
(7.191)
	
∆
= −
∆
−
∆
H
H
H
2
1
2
0 0354
0 0629
.
.
	
(7.192)

652
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	The general solution to Equations 7.183 and 7.184 with a12 = b2 = 0, initial conditions 
∆H
H
H
1
1( )
( )
0
0
1
=
−
, ∆H
H
H
2
2
( )
( )
0
0
2
=
−
, and ∆F
F
F
0
0
0
=
−

 is (see Exercise 7.25)
	
∆
= −
∆
+ ∆
+
∆






H t
b
F
a
H
b
F
a
a t
1
1
0
11
1
1
0
11
0
11
( )
( )
e
	
(7.193)
	
∆
=
∆
+
−
∆
+
∆






H t
a b
F
a a
a
a
a
H
b
F
a
2
21 1
0
11 22
21
11
22
1
1
0
11
0
( )
(
)
( )
ea t
H
a
a
a
H
b
F
a
11
2
21
22
11
1
1
0
22
0
0
+ ∆
+
−
∆
+
∆









( )
(
)
( )


ea t
22
	
(7.194)
	
	
With H1(0) = H2(0) = 0, ∆F
F
F
0
0
0
=
−
=
=

12
8 4853
3 5147 ft /min
3
– .
.
, the linearized 
tank-level responses H t
H
H t
1
1
( )
( )
=
+
1
∆
 and H t
H
H t
2
2
( )
( )
=
+
2
∆
 become
	
H t
t
1
212t
14 6274 1 
 e
( )
.
,
.
=
−
(
)
≥
−0 0
0 	
(7.195)
	
H t
t
t
t
2
212
629
8 2279
12 4195e
4 1916e
( )
.
.
.
,
.
.
=
−
+
≥
−
−
0
0 0
0 	
(7.196)
	
	
The nonlinear system responses can be approximated by resorting to simulation with 
a fixed-step numerical integrator and small integration step. The Simulink diagram is 
shown in Figure 7.68.
	
	
An RK-4 integrator with step size of 0.01 s was used to approximate the tank 1 and 
tank 2 nonlinear system level responses. The linearized system responses in Equations 
7.195 and 7.196 are plotted along with the nonlinear system responses in Figure 7.69.
	
	
Note that the nonlinear system step responses approach the correct steady-state lev­
els (H1)ss = 16 ft and (H2)ss = 9 ft predicted in Equation 7.180. Can you verify whether the 
tank levels for the linearized system shown in Figure 7.69, namely, H1(350) = 14.62 ft 
and H2(350) = 8.22 ft, are correct?
	
e.	The state trajectories are shown in Figure 7.70.
	
f.	A similar procedure to the one used in parts (a) through (e) establishes four distinct 
steady-state operating points (
,
)
H H
1
2  where H1 is one of the four values 0.125(H1)ss = 2 ft, 
0.375(H1)ss = 6 ft, 0.675(H1)ss = 10 ft, 0.875(H1)ss = 14 ft. The corresponding values of H2 
and F0 are shown in Table 7.7.
FIGURE 7.68  Simulink diagram for nonlinear two-tank system.

653
Simulation Tools
15
10
H1 (t), (ft)
5
0
0
50
100
150
Nonlinear
Linear
Tank 1 level response
200
250
300
350
10
7.5
H2 (t), (ft)
5
0
2.5
0
50
100
150
Nonlinear
Linear
Tank 2 level response
200
t (min)
250
300
350
FIGURE 7.69  Comparison of linearized and nonlinear system tank-level responses.
State trajectories of linearized (H –
1 = 8 ft, H–
2 = 4.5 ft) 
and nonlinear systems
10
9
8
7
6
5
4
3
2
1
0
0
2
4
Nonlinear
Linear
6
8
H1 (t) (ft)
H2 (t) (ft)
10
12
14
16
(H2)ss = 9 ft
(H1)ss = 16 ft
(H–
1, H–
2)
FIGURE 7.70  State trajectories of linearized (
1
H  = 8 ft, H2 = 4.5 ft) and nonlinear systems.
TABLE 7.7
Steady-State Operating Points (
)
1
H H
,
2  and Corresponding F0
Region
H1(ft)
H2(ft)
F0
3
(ft min)
/
I
2
1.125
4.2426
II
6
3.375
7.3485
III
10
5.625
9.4868
IV
14
7.875
11.2250

654
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
g.	The nonlinear and linearized system responses for both tanks are shown in Figures 7.71 
and 7.72.
	
	
The static nonlinear operating curves for each tank are shown in Figure 7.73, and 
the state trajectories of the linearized and nonlinear systems are shown in Figure 7.74. 
The operating points listed in Table 7.7 are shown as well. Note the improved accuracy 
in the step response of the system linearized about multiple operating points com­
pared to the case illustrated in Figure 7.70 where a single operating point (
,
)
H H
1
2  was 
used.
H2 (t), (ft)
Tank 2 level linearized and nonlinear system responses
Nonlinear
8
7
6
5
4
3
2
1
0
Linearized
Region IV
Region III
Region II
Region I
0
50
100
150
200
t (min)
250
300
350
(H2)ss = 9
FIGURE 7.72  Tank 2 linearized system response using four operating points and nonlinear system 
response.
H1 (t), (ft)
Tank 1 level linearized and nonlinear system responses
Nonlinear
14
12
10
8
6
4
2
0
Linearized
Region IV
Region III
Region II
Region I
0
50
100
150
200
t (min)
250
300
350
(H1)ss = 16
FIGURE 7.71  Tank 1 linearized system response using four operating points and nonlinear system 
response.

655
Simulation Tools
EXERCISES
	7.18	 The nonlinear tank model in which the outflow is based on Equation 7.89 can be thought of as 
exhibiting a variable fluid resistance, that is, R = f (H). When the tank is linearized about an 
operating pt (
,
)
H F0 , the resistance R
f H
H
F
(
)
=
=  
/
∆
∆
0, which is the reciprocal of the slope 
of the tangent drawn to the function F0 = cH1/2 at the operating point (see Figure 7.51). Hence, 
for small variations about the operating point, the tank behaves similar to a linear tank with 
resistance R.
12
(a)
(b)
Tank 1 and tank 2 nonlinear system operating characteristic
10
8
6
4
2
0
0
4
8
H1 (ft)
(H–
1, F–
1)
(H–
2, F–
2)
F1 = c1H1
1/2
F2 = c2H2
1/2
F1 (ft3/min)
12
16
12
10
8
6
4
2
0
0
2
4
H2 (ft)
F1 (ft3/min)
6
8
FIGURE 7.73  Static nonlinear operating curves for both tanks. (a) Tank 1 nonlinear system operating char­
acteristic. (b) Tank 2 nonlinear system operating characteristic.
10
State trajectories of linearized and nonlinear systems
8
6
4
Nonlinear
Linear
2
0
H2 (ft)
H1 (ft)
H1 (0), H2 (0)
(H1)ss, (H2)ss
(H–
1, H–
2)
10
12
14
16
8
6
4
2
0
FIGURE 7.74  State trajectories for linearized and nonlinear systems.

656
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
a.	 Show that the linearized resistance R about the point (
,
)
H F0  is equal to 2
0
0
H F
/
.
	
b.	 For the tank whose operating curve is shown in Figure 7.51, find the linearized resistance 
R when the tank level fluctuates by a small amount about
	
	
(i) 5 ft (ii) 10 ft (iii) 15 ft (iv) 20 ft.
	
c.	 Comment on the apparent fluid resistance of a nonlinear tank as the level rises.
	7.19	 A tank with nonlinear operating curve, shown in Figure 7.51, and cross-sectional area 25 ft2 
is initially filled to a height of 9 ft. There is no inflow.
	
a.	 Employ Simulink (with suitable integrator and step size) to simulate the emptying of the 
tank. Graph Hsim(t).
	
b.	 Linearize the differential equation model about the initial point H(0) = 9 ft, F0(0) = 1.5 ft3/
min, that is, choose the operating pt as (
,
)
H F0  = (9, 1.5), and find the linear differential 
equation describing the deviation ∆H t
H t
H
( )
( )
=
−
.
	
c.	 Find the analytical solution for ∆H(t) and plot H
t
H
H t
lin( )
( )
=
+∆
 on the same graph as 
the simulated solution Hsim(t). Comment on the results.
	
d.	 Find the analytical solution for the level, Hanal(t), and compare it with the simulated 
response Hsim(t) in part (a) and linearized response Hlin(t) in part (c).
	7.20	 Starting with Equations 7.101 and 7.110, obtain Equation 7.111 for the linearized state 
derivatives.
	7.21	 The nonlinear tank shown in Figure E7.21a has an adjustable valve in the discharge line. The 
valve opening is given by the normalized variable θ (0 ≤ θ ≤ 1) where θ = 0 is a closed valve 
and θ = 1 represents a fully open valve. The outflow is obtained from F0 = F0(θ, H) = c(θ)H1/2.
	
	
An expression for ∆F0(t) in the linearized differential equation model of the tank A(d/dt) 
∆H(t) + ∆F0(t) = ∆F1(t) is obtained as follows:
	
F
F
H
F
H
H F
H
H
0
0
0
0
0
0
0
=
+ ∂
∂
∆+ ∂
∂
∆
( ,
)
( ,
)
( ,
)
θ
θ
θ
θ
θ
	
	
 
⇒∆
= ∂
∂
∆+ ∂
∂
∆
=
=
=
=
F
c
H
H c
H
H
H
H
H
H
0
1 2
1 2
θ
θ
θ
θ
θ
θ
θ
θ
[ ( ),
]
[ ( ),
]
,
,
	
	
=
∆+
∆
=
=
H
c
c
H H
H
H
H
1 2
1 2
d
d
d
d
θ
θ
θ
θ
θ
θ
( )
( )
	
	
=
′
∆+





∆
−
H
c
c
H
H
1 2
1 2
1
2
( )
( )
θ
θ
θ
	
	
	 Data points along the valve-operating characteristic c(θ) are shown in Figure E7.21b:
FIGURE E7.21A

657
Simulation Tools
	
a.	 Find the linearized differential equation about the steady-state operating point where 
θ
.
=0 5, H =9 ft .
	
b.	 Simulate the tank-level response when the inflow increases by 10% and valve opening decreases 
by 15% with respect to their operating point values. The initial conditions are H(0) = H, 
θ(0) = θ. Assume both changes are step inputs. The cross-sectional area of the tank is 50 ft2.
	7.22	 In Example 7.2, let β = 0 and vary α from –0.5 to 0.5 in steps of 0.05.
	
a.	 Plot the linearized level responses on the same graph.
	
b.	 Plot the nonlinear level responses on the same graph.
	
c.	 Repeat parts (a) and (b) for H
,
= 4 16 and 25 ft.
	7.23	 The populations of two species coexisting in the same environment are governed by the 
­predator–prey equations
	
d
d
x
t
x a
bx
cy
ux
=
−
−
+
(
)
	
	
d
d
y
t
y
k
x
uy
=
−+
+
(
)
λ
	
	
	 where x = x(t) is the population of the prey at time “t,” y = y(t) is the population of predators at 
time “t,” ux = ux(t) is the net rate of new prey introduced at time “t,” uy = uy(t) is the net rate of new 
predators entering the environment at time “t,” and a, b, c, λ, and k are parameters of the system.
	
a.	 Find the nontrivial equilibrium points ( , )
x y  in the x, y plane when the two inputs are 
u
u
x
x
=
= 0, u
u
y
y
=
= 0, t ≥ 0. Leave your answers for x and y in terms of the system 
parameters.
	
b.	 Introduce deviation variables ∆x, ∆y, ∆ux, and ∆uy and choose the outputs as ∆y1 = ∆x 
and ∆y2 = ∆y. Linearize the state equations about the operating point where x
x
=
, y
y
=
, 
u
u
x
x
=
, and u
u
y
y
=
 and find the linearized system matrices A, B, C, and D in terms of the 
system parameters.
	
c.	 Find the transfer functions ∆x(s)/∆ux(s), ∆x(s)/∆uy(s), ∆y(s)/∆ux(s), and ∆y(s)/∆uy(s).
	
d.	 Suppose the numerical values of the system parameters are a = 12, b = 0, c = 2, k = 20, 
and λ = 4. Further, let the inputs be ux = 1, t ≥ 0 and uy = 0, t ≥ 0. Simulate the nonlinear 
and linearized system responses starting from the point x(0) = 0, y(0) = 0 and compare 
results using plots of
	
i.	 x(t) vs. t and xlin(t) vs. t on the same graph
	
ii.	 y(t) vs. t and ylin(t) vs. t on the same graph
	
iii.	 y(t) vs. x(t) and ylin(t) vs. xlin(t) on the same graph
	
	
Comment on the results.
FIGURE E7.21B

658
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
e.	 Repeat part (d) with ux = 0, t ≥ 0, and uy = –1, t ≥ 0.
	
f.	 Repeat parts (d) and (e) with x(0) = 1 and y(0) = 1.
	7.24	 The dynamics of an inverted pendulum with physical parameters M = 4 kg, 
m = 0.15 kg, and l = 0.8 m is to be linearized about a steady-state operating point 
(
;
)
[
,
,
,
;
]
[
;
]
x
u
x
x
u
T
0
0
0
0
0
0
0
0 0 0 0 0
=
=


 
 
   
 
θ θ
.
	
a.	 Find the linearized system matrices A, B, C, and D
	
i.	 Analytically
	
ii.	 Using “linmod”
	
iii.	 By numerical approximation using a central difference approximation formula with 
suitably small ∆
	
b.	 Find the eigenvalues of the coefficient matrix A for the three methods in part (a). Comment 
on the results.
	
c.	 Use the A, B, C, and D matrices resulting from the analytical approach and simulate θ(t), 
t ≥ 0 in response to the pulse input u(t) = 0.01 N, 1 ≤ t ≤ 2.
	
d.	 Simulate the nonlinear system response for θ(t), t ≥ 0 due to the same input in part (c). 
Compare the linearized and nonlinear responses.
	7.25	 For the two-tank system in Figure 7.66,
	
a.	 Show that the solution of the linearized differential equations in Equations 7.183 and 7.184 
is given in Equations 7.193 and 7.194.
	
b.	 Check the solution at t = 0 and t = ∞
	
c.	 The system in Example 7.3 is linearized about a steady-state operating point where 
H1=1 ft. Find expressions for H2 and F0 in terms of H1 and the system parameters c1, c2, 
A1, and A2 and then evaluate them numerically.
	
d.	 Plot the linearized system response for constant inputs of F0
, ,
= 2 4 8 ft /min
3
 and both 
tanks initially empty.
	
e.	 Simulate the nonlinear system dynamics for the same constant input values, and plot the 
responses on the same graph used for the linearized system responses. Comment on the 
results.
	7.26	 Repeat Example 7.3 for the case where the tanks interact, that is, the flow out of the first tank 
F1 enters tank 2 at the bottom and is modeled by
	
F
c
H
H
1
12
1
2
1 2
=
−
(
) /
	
	
	 where c12 = 2 ft3/min/ft1/2.
	7.27	 The nonlinear pendulum in Figure E7.27 is modeled by Jθ + cθ + mgr sin θ = 0.
	
a.	 The state components are x1 = θ and x2 = θ. Find the state derivative functions f1(x1, x2) 
and f2(x1, x2) in the state equations x1 = f1 (x1, x2) and x2 = f2(x1, x2).
	
b.	 Linearize the state equations about the equilibrium point x1 = 0 rad, x2 = 0 rad/s.
FIGURE E7.27

659
Simulation Tools
	
c.	 The initial conditions are x1(0) = 0 rad, x2(0) = 0.1 rad/s. Find expressions for the linear­
ized responses x1(t), x2(t) when the system parameters are
	
m
r
c
J
mr
=
=
=
=
=
0
0
.
,
,
.
,
25 slugs
2ft
1 ft lb/rad/s
1ft 1bs
2
2	
	
d.	 Obtain the nonlinear system response by simulation, and plot the linearized and nonlinear 
system responses on the same graph.
	
e.	 Repeat parts (c) and (d) when the initial conditions are x1(0) = 0.25 rad, x2(0) = 0 rad/s.
7.5  ADDING BLOCKS TO THE SIMULINK LIBRARY BROWSER
7.5.1  Introduction
In order to keep development costs down, previously verified and validated models are reused in 
the development of new simulations. A verified model means the model was built right, whereas 
a validated model means the right model was built. As an example, in Section 5.12, various 
Kalman filters (continuous, discrete, and steady-state continuous) were developed in Simulink. 
These models were verified and validated by comparing them to known results (outputs and 
plots) from MATLAB scripts. It would be beneficial if these models were made available for use 
by other members of the simulation development team. What follows is the process by which 
models are added to a library and made available for modeling through the Simulink Library 
Browser.
Recall from Section 5.12 the case study of Kalman filtering led to the development of three dif­
ferent models: the continuous-time Kalman filter (CTKF), the discrete-time Kalman filter (DTKF), 
and the steady-state continuous-time Kalman filter (SSCTKF) whose top-level blocks are repeated 
in Figures 7.75–7.77 for convenience.
In each of Figures 7.75–7.77, the Kalman filter algorithms labeled CTKF Estimates, DTKF 
Estimates, and SSCTKF Estimates, respectively, have been selected to identify which particular 
blocks will be added to the library. In order to make these filters available to developers as indi­
vidual drag and drop blocks within the Simulink Library browser, follow the procedure outlined 
next.
Start Simulink and click on Create Library as shown in Figure 7.78.
This action opens an untitled library window shown in Figure 7.79.
FIGURE 7.75  Continuous-time Kalman filter.

660
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 7.77  Steady-state continuous-time Kalman filter.
FIGURE 7.78  Creating a library.
FIGURE 7.76  Discrete-time Kalman filter.

661
Simulation Tools
Simply drag and drop the CTKF estimates block into the untitled library window. The result of 
this action is shown in Figure 7.80.
Repeating this procedure for the DTKF Estimates block and the SSCTKF block results in 
Figures 7.81 and 7.82.
From the MATLAB command window, type set_param(gcs, ‘enableLBRepository’, ‘on’), then 
save the blocks into the library as shown in Figure 7.83.
In the Save As dialog box, enter the name of the library, chosen here as “kflib” (to represent 
Kalman filter library) in Figure 7.84.
Once the library is saved, the name will change from “Library: untitled*” to “Library: kflib” as 
shown in Figure 7.85.
The next step in the process is the creation of the S-block M-file to load the library when Simulink 
is started. To view a template, type “edit slblocks” in the MATLAB command window. The M-file 
template is given as follows where executable lines are identified in bold.
For the Kalman filter library, the simplified S-block M-file was edited as shown in Figure 7.86. 
This file must be saved as “slblocks.m” in the same folder as the library file in order for Simulink to 
acknowledge existence of the “kflib” library at startup.
When Simulink is started, Figure 7.87 shows the Simulink Library Browser with an explod­
ing directory named “My Kalman Filters” containing the three Kalman filters “CTKF Estimates,” 
FIGURE 7.79  Library: untitled.
FIGURE 7.80  Drag and drop of CTKF estimates.

662
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 7.82  Drag and drop of SSCTKF estimates.
FIGURE 7.83  Saving the blocks into the library.
FIGURE 7.81  Drag and drop of DTKF estimates.

663
Simulation Tools
FIGURE 7.84  Saving the Kalman filter library, kflib.
FIGURE 7.85  Library: kflib.
FIGURE 7.86  S-block M-file “slblocks.m.”

664
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 7.87  Simulink Library Browser with my Kalman filters.
FIGURE 7.88  DTKF estimates subsystems.

665
Simulation Tools
“DTKF Estimates,” and “SSCTKF Estimates,” which are now available to drag and drop into a 
Simulink model.
Simulink Library Browser.
By double-clicking on “DTKF Estimates” in the right window of the Simulink Library Browser, 
the subsystems of the algorithm (Kalman gain, a posteriori covariance, a posteriori state, a priori 
covariance, and a priori state) are displayed in the window as shown in Figure 7.88. These are also 
available for dragging and dropping for developing Simulink models.
7.5.2  Summary
This section demonstrated how to create a Simulink library and add it to the Simulink Library 
Browser, thereby making custom models available to other members of a development team.
EXERCISE
	7.28	 In Simulink, create a simple model for the equation of a line y = mx + b where x is the 
input signal, m is a gain block on the input signal, b is a constant block added to the out­
put of the gain block, and y is the output signal. Once the model is built, create a library 
named “linelib” and add it to the Simulink Library Browser by editing the slblocks.m file 
accordingly.
7.6  SIMULATION ACCELERATION
7.6.1  Introduction
The default simulation option in Simulink is Normal mode. It is set by clicking Simulation Normal 
in Simulink as shown in Figure 7.89 for the discrete-time Kalman filter model from Section 5.12. 
In this mode, the simulation is executed as a single (interpreted) process within the MATLAB/
Simulink environment. Normal mode supports debugging, M-files, scopes/viewers, run-time diag­
nostics, parameter tuning, and algebraic loops. However, depending on the level of fidelity built into 
the Simulink model, or depending on how many replications of the Simulink model are run, the 
simulation could consume a lot of the user’s time.
Simulink offers two compiled options: Accelerator mode (Figure 7.90) and Rapid Acceleration 
mode (Figure 7.91).
FIGURE 7.89  Normal simulation.

666
Simulation of Dynamic Systems with MATLAB® and Simulink®
In Accelerator mode, the simulation executes as a single (compiled) process within the MATLAB/
Simulink environment. This mode supports debugging, M-files, and scopes/viewers, and allows the 
user to tune parameters. In order to run the simulation in Accelerator mode, simply select Simulation 
→ Accelerator in Simulink as shown in Figure 7.90 and execute the model.
In Rapid Accelerator mode, the simulation executes as two separate processes: MATLAB/Simulink 
running as one process while another compiled process runs in parallel. This mode only supports 
scopes/viewers and parameter tuning. In order to run the simulation in Rapid Accelerator mode, sim­
ply select Simulation → Rapid Accelerator in Simulink as shown in Figure 7.91 and execute the model.
After selecting Accelerator mode for the discrete-time Kalman filter model, the MATLAB 
Command Window displays the following message just before running the simulation.
### Building the Accelerator target for model: DTKF_Model
### Successfully built the Accelerator target for model: DTKF_Model
This message (with italics added) indicates that Accelerator mode was selected and that a com­
piled version was created.
After selecting Rapid Accelerator mode for the discrete-time Kalman filter model, the MATLAB 
Command Window displays the following message just before running the simulation.
### Building the rapid accelerator target for model: DTKF_Model
### Successfully built the rapid accelerator target model: DTKF_Model
FIGURE 7.90  Accelerator mode simulation.
FIGURE 7.91  Rapidly accelerated simulation.

667
Simulation Tools
This message (with italics added) indicates that Rapid Accelerator mode was selected and that a 
compiled version was created. Note that while both Accelerator mode and Rapid Accelerator mode 
use aspects of MATLAB’s Real-Time Workshop, the user does not need Real-Time Workshop to 
accelerate simulations. However, the user does need Real-Time Workshop to generate source code 
for other purposes.
One final comment is that the Rapid Accelerator mode lends itself toward running Monte Carlo 
simulations. Please see Section 5.10 for more information.
7.6.2  Profiler
Sometimes, the user would like to know which sections of the simulation are consuming the most 
time. Simulink provides a tool called the Profiler for such analysis. To turn on the Profiler, click 
Tools → Profiler in Simulink (Figure 7.92) and rerun the simulation.
Output from the Profiler for the discrete-time Kalman filter simulation is shown in Figure 7.93. 
By examining this information, the user can take action (e.g., change an algorithm) to help reduce 
the amount of time the simulation is spending in any one area.
FIGURE 7.92  Simulink’s profiler.
FIGURE 7.93  Profiler output (partial).

668
Simulation of Dynamic Systems with MATLAB® and Simulink®
7.6.3  Summary
This section demonstrated how to accelerate simulations using the Accelerator mode and the Rapid 
Accelerator mode. While both modes are compiled and are generally faster than the Normal (inter­
preted) mode, which one to use depends on the type of tool support needed. Both compiled modes 
support scopes/viewers and parameter tuning, but only Accelerator mode adds debugging and 
M-file support.
This section also briefly mentioned the Profiler–a tool to assist users in examining which areas 
of the simulation require the most amount of execution time. With this knowledge, the user can aug­
ment algorithms to increase simulation performance. This can pay dividends, particularly if the user 
is running many replications of a Monte Carlo simulation with a high level of fidelity.
EXERCISE
	7.29	 Open the discrete-time Kalman filter from Section 5.12.
	
a.	 Run the model in Normal mode.
	
b.	 Run the model in Accelerator mode.
	
c.	 Run the model in Rapid Accelerator mode.
	
d.	 Turn on the Profiler and run the model to see where the model spends most of its time.
7.7  BLACK SWANS
7.7.1  Introduction
A black swan is an improbable event with colossal consequences. It is a metaphor for believing 
something is impossible until the belief is disproven. For example, all swans were assumed to be 
white, and black swans were thought to be non-existent until discovered in Western Australia. In 
The Black Swan, Taleb (2010, p. xxii) defines three black swan attributes: (1) It’s an outlier, outside 
the realm of expectation because nothing in the past points to its possibility; (2) It brings extreme 
impact; and (3) We concoct explanations for it after the fact, making it seem predictable. In short, 
the three attributes are: “rarity, impact, and retrospective apparent predictability” (Taleb 2010). 
Also, by symmetry, non-occurrence of a seemingly certain event is also a black swan. Furthermore, 
lack of evidence of black swans doesn’t mean they do not exist.
While swans of unusual character are labeled black, Benoit Mandlebrot (Wright 2007) claims 
we can predict something of their behavior – and in doing so, they are no longer black, but can be 
thought of as gray. They only seem black if we fail to acknowledge their potential existence or we 
fail to look. Modeling and simulation tools applied to examine potential black swans are inherently 
stochastic – they are based on probabilistic inputs and outputs and are viewed from a statistical 
perspective.
An appropriately visualized model architecture may identify the succession of events leading 
to the colossal black swan which may be confirmed by examination of the Percent Point Function. 
Additional help with exposing black swans is available through stochastic optimization, where ran­
dom variables appear in the formulation of the optimization problem thus producing a random 
objective function for which random iterates are employed to solve the problem. When equipped 
with these tools and their insights, we can reduce the surprise of a black swan, rendering it gray, and 
thus be prepared for black swan resiliency.
7.7.2  Modeling Rare Events
With a general understanding of black and gray swans, a model is created such that rare events 
may be simulated. We need a distribution that shows non-zero probabilities for data lying far from 
the mean on either side. To make our points, we use the financial markets because most of us can 

669
Simulation Tools
relate to risk versus reward from a financial perspective. We will see that if thin tail distributions 
are used, risk is modeled too conservatively; whereas a fat tail distribution exposes a greater degree 
of risk and the potential for a black swan. The analogy can be generalized to a portfolio of lines of 
business, where different business opportunities may be assessed for return on investment, given its 
corresponding risk.
A recent example of a black swan event is the financial collapse of 2008. While we’re not 
interested in the cause of the collapse, per se, we are interested in one of the many lessons 
learned, i.e. observance of the fat tail distribution as a more accurate representation of the col­
lapse, and thereby categorize it as a black swan event. While implementing a normal distri­
bution in a Monte Carlo simulation is far superior to simply using average values of risk and 
return (Savage 2009), the “thin tail” of the normal distribution assigns negligible probability to 
data far from the mean. Harry Markowitz (Markowitz 1952; Markowitz 1979; Markowitz 1999) 
consistently warned that distribution selection was tricky and urged that when moving from 
theory to practice, some caution was warranted. Benoit Mandlebrot (Mandlebrot, 1963) found 
price changes in some markets (especially cotton futures) were well described by Lévy stable 
distributions. Eugene Fama (Fama 1963) performed similar research to what is presented here 
and further demonstrated the merits of “fat tail” distributions in stocks. Paul Kaplan (Kaplan 
2012) shows a log-stable distribution (see Appendix) captures the non-zero probability of occur­
rence for rare events far from the mean. The log-stable is a generalization of the log-normal 
distribution commonly used to model investment return. It assumes the logarithm of one plus 
the decimal form of risk and return following what Mandlebrot referred to as a stable Paretian 
distribution (Wright, 2007).
The top pane of Figure 7.94 shows monthly returns of the S&P 500 stock index from January 
1926 to March 2009 as represented by the frequency histogram. Historical returns over this time 
period include maximum monthly losses of 26% in November 1929, 24% in April 1932, 20% in 
October 2008, and 19% in December 1931; while the maximum gain was +50% in August 1932. 
The data is fitted with a normal distribution (dashed line) and a log-stable distribution (solid line). 
In the bottom pane, a closer examination displays the characteristics of the normal distribution’s 
thin tail (dashed) versus the log-stable distribution’s fat tail (solid). The normal distribution shows 
a negligible probability of losses beyond 16% (−0.16). While the theoretical tail of the normal dis­
tribution extends to infinity, it is clear from this exploded view that the probability of a 16% loss is 
practically zero. Using the normal distribution curve fit parameters, the actual probability is only 
1.4%. Contrast this with the log-stable distribution which more accurately shows losses beyond 26% 
are indeed possible. In fact, using the log-stable curve fit parameters, the probability of a 16% loss 
is 9.6%—almost seven times more likely to occur.
From this analysis, we conclude that the log-stable distribution is superior to the normal distribu­
tion for modeling rare events of this type. While we have shown this to be true for the S&P 500, 
if rare events have a non-zero probability of occurrence in any practical application, the log-stable 
distribution should certainly be considered as the apparatus of choice.
7.7.3  Measurement of Portfolio Risk
In order to show the impact of portfolio risk, we model an aggressive asset allocation with the per­
centages shown in Table 7.8, where each asset class is represented by a corresponding Exchange 
Traded Fund (ETF) ticker symbol, e.g., small cap stocks are represented by the ETF ticker sym­
bol IWM, etc. Historical monthly return data for each ETF was obtained from the Investools/TD 
Ameritrade database.
Furthermore, we set up two portfolios according to this asset allocation: one called the Normal 
Portfolio where historical monthly returns of each asset class are fitted with normal distributions 
and the other, called the Log-Stable Portfolio, where the historical returns are fitted with log-stable 
distributions. The following plots were generated from 10,000 Monte Carlo trials.

670
Simulation of Dynamic Systems with MATLAB® and Simulink®
TABLE 7.8
Portfolio Asset Allocations and ETFs
Asset Class
Allocation
ETF
Small Cap Stocks
20%
IWM
Mid Cap Stocks
15%
MDY
Large Cap Stocks
5%
SPY
Int’l Developed Stocks
5%
EFA
Int’l Emerging Stocks
10%
EEM
Corporate bonds
15%
LQD
Government Bonds
10%
AGZ
Real Estate
10%
IYR
Commodities
10%
DBC
2.5
S&P returns
Normal fit
Logstable fit
S&P returns
Normal fit
Logstable fit
S&P 500 monthly returns - Jan 1926 to Mar 2009
S&P 500 monthly returns - Jan 1926 to Mar 2009
2
1.5
1
Frequency
14
12
10
8
6
4
2
0
Frequency
0.5
0
–0.4
–0.3
Return rate
–0.2
–0.1
–0.4
–0.3
–0.2
–0.1
0
0.1
Return rate
0.2
0.3
0.4
0.5
0.6
FIGURE 7.94  S&P 500 data from January 1926 to March 2009 fitted with Normal (top) and Log-Stable 
(bottom) Distributions.

671
Simulation Tools
From Figure 7.95, it is difficult to tell the difference between the Normal Portfolio and the Log-
Stable Portfolio.
However, upon zooming-in, we see (top pane of Figure 7.96) the maximum loss for the Normal 
Portfolio is 7% (−0.07) with a maximum gain of 7% (not shown). One may recall the normal distri­
bution is characterized by the mean plus or minus the standard deviation and is therefore symmetric 
about the mean. The Log-Stable Portfolio (bottom pane of Figure 7.96) shows a maximum loss of 
71% (−0.71) with a maximum gain of 16% (not shown). This left-skew (−71% versus +16%) is based 
on the data and the characteristic parameters of the log-stable distribution: alpha, beta, gamma, and 
delta (see Appendix of this chapter).
For the S&P 500 data from January 1926 to March 2009, alpha = 1.5901, beta = −0.5586, 
gamma = 0.0219, and delta = 0.0023. Here, we see the negative value of beta as representing the 
left skew (see Appendix) corresponding to more risk than reward. If the data had been such that 
beta was positive, the distribution would have been right skewed with returns being greater than risk 
20
15
10
Frequency
5
0
–0.7
–0.6
–0.5
–0.4
–0.3
Return rate
Log-stable portfolio
Log-stable portfolio
Logstable ﬁt
–0.2
–0.1
0
20
15
10
Frequency
5
0
–0.7
–0.6
–0.5
–0.4
–0.3
Return rate
Normal portfolio
Normal portfolio
Normal ﬁt
–0.2
–0.1
0
FIGURE 7.95  Portfolios of Asset Allocations Fitted with Normal (top) and Log-Stable (bottom) Distributions.

672
Simulation of Dynamic Systems with MATLAB® and Simulink®
(an elusive investment). Incidentally, fat tails can occur on either or both sides of the distribution, 
depending on the data being fitted to the log-stable distribution.
Importantly, the results illustrate how the log-stable distribution more accurately predicts high 
levels of risk, ten-fold. Both normal and log-stable distributions are fitted to the same historical 
return data. Yet, the normal distribution models risk at only 7%, while the log-stable more accu­
rately characterizes the risk at 71%, for the portfolio. This sheds a little light on the 2008 financial 
collapse from a risk versus reward perspective. There was actually a higher degree of risk present 
than otherwise indicated by normal distributions.
Again, while a financial portfolio has been used to show how the log-stable distribution is 
superior to the normal distribution, if rare events (e.g., earthquake magnitudes, city populations, 
sizes of power outages, etc.) have a non-zero probability of occurrence (either left-skewed or 
right-skewed), fitting the event data to a log-stable distribution will model these characteris­
tics, raising our awareness and allowing to prepare, organize, train and equip for black swan 
resiliency.
0.2
Normal portfolio
Normal portfolio
Normal fit
0.18
0.16
0.14
0.12
Frequency
0.1
0.08
0.06
0.04
0.02
0
–0.08
–0.06
–0.04
Return rate
–0.02
0.2
Log-stable portfolio
Log-stable portfolio
Logstable fit
0.18
0.16
0.14
0.12
Frequency
0.1
0.08
0.06
0.04
0.02
0
–0.8
–0.7
–0.6
–0.5
–0.4
–0.3
Return rate
–0.2
–0.1
FIGURE 7.96  Zoom of Asset Allocations Fitted with Normal (top) and Log-Stable (bottom) Distributions.

673
Simulation Tools
7.7.4  Exposing Black Swans
This is all rudimentary with simple portfolios of historical returns separated into normal and log-
stable distributions. What if your model of influential architecture contains thousands of inputs, 
including normally distributed data as well as (rare event) log-stable distributed data?
In this section, we model a portfolio with all asset classes fitted to a normal distribution except 
for one asset class in order to see which tools are useful for finding which input is causing the down­
side risk. The tools available are Tornado charts, Percent Point Functions, and stochastic optimiza­
tion methods.
7.7.4.1  Percent Point Functions (PPFs)
A PPF shows the probability of a random number being less than or equal to a particular point on 
the plot. For example, in Figure 7.97 (top pane), there is a 50% probability the return will be 1% 
or less and there is a 90% probability the return will be 3% or less. The latter statement could be 
interpreted as a 10% probability the return will be greater than 3%.
By examining Figure 7.97 (top pane), it appears as if the Normal and Log-Stable PPFs are iden­
tical. However, upon closer inspection (bottom pane), we see the Normal Portfolio tail stops near 
−7%, while the Log-Stable Portfolio tail continues down to −71%. Similarly, but not shown, the 
positive tails for the Normal and Log-Stable PPF returns are 7 and 16%, respectively. Once more, 
we’ve shown the log-stable distribution reveals larger risk, ten-fold for the portfolios. Therefore, 
the method of “PPF tail inspection” is a viable method to see if potential rare events (black swans) 
might be lurking in the data.
Rather than comparing Normal and Log-Stable Portfolios, we now blend two portfolios – one 
with historical monthly returns for all asset classes fit to normal distributions except for government 
bond returns (AGZ) which are fit with the log-stable distribution; the other portfolio will fit only 
real estate returns (IYR) to the log-stable distribution. These two (separate, but mixed) portfolios 
are selected knowing ahead of time government bonds have the lowest (historical) spread between 
risk and reward (−2 to 4%), while real estate has the highest (historical) spread (−31 to 29%). The 
reason for this is to examine the tails to see if any black swans might be identified, independent of 
risk and reward spread.
In the case of the AGZ Mixed Portfolio (Figure 7.98, top pane), we see it has significantly more 
risk (−27%) than the Normal Portfolio, which had 7% to the downside (Figure 7.96, top pane). Even 
by modeling a less volatile asset class with the log-stable distribution, we are able to see additional 
risk through the lens of the PPF tail. Of course, for the IYR Mixed Portfolio (Figure 7.98, bottom 
pane) the risk is more pronounced (−48%) due to its higher volatility and by virtue of being mod­
eled with a log-stable distribution. The risk of IYR alone is driving the risk of the entire portfolio. 
In sum, the PPF tail exposes the possibility of the occurrence of a rare event.
7.7.4.2  Stochastic Optimization
Finally, we come to the method of stochastic optimization, where random variables appear in the 
formulation of the optimization problem thus producing a random objective function for which 
random iterates are employed to solve the problem. When optimizing (maximizing or minimizing) 
an objective function (portfolio), stochastic optimization assesses the range of each probabilistic 
input and selects whatever values are necessary to yield the desired result. For example, to find the 
minimum portfolio value, the minimum historical return of each asset class will be chosen.
For a small portfolio of only nine asset classes, it is rather simple to calculate deterministic mini­
mum and maximum portfolio returns. Table 7.9 (below) shows minimum and maximum historical 
returns for each ETF. Based on the asset allocation we’ve been using (repeated in the table), the 
minimum and maximum portfolio returns are −22 and 14%, respectively.
The results of running stochastic optimization on this small portfolio were identical with the 
deterministic case, i.e. minimum and maximum returns of −22 and 14%, respectively. Using 

674
Simulation of Dynamic Systems with MATLAB® and Simulink®
stochastic optimization for this sized problem is excessive. But, if a portfolio contains thousands of 
random inputs, including complex interconnections, it soon becomes intractable to perform these 
calculations with a spreadsheet, let alone by hand. The result of stochastic optimization is a list of 
all the inputs and the values that have been chosen so as to achieve either the minimum or maximum 
return.
The astute reader will wonder how the stochastic optimization risk and return range (−22 to 14%) 
relates to the prior results of the Normal (−7 to 7%) and Log-Stable (−71 to 16%) Portfolios. We’ve 
already discussed the normal distribution and how it naïvely characterizes risk. This explains why 
the risk and return range is lower than either of the other results. To explain the difference between 
the stochastic optimization and the Log-Stable Portfolio results, we recognize the historic lows and 
highs from Table 7.9 are bounded. For example, when stochastic optimization seeks a minimum, 
the algorithm selects minimal values of the inputs, which are the lower bounds. Likewise, for the 
maximum portfolio value, upper bounds are chosen. Stochastic optimization is dependent on the 
bounded values of the inputs. Compare this to the log-stable distribution which can return values 
beyond these limits, albeit with small (but non-zero) probability. Even though the historical data is 
Normal and log-stable CDFs
Normal and log-stable CDFs
Normal minimum = –7% (–0.07)
Log-stable minimum = –71% (–0.71)
0.2
0.1
0
–0.1
–0.2
–0.3
Return
–0.4
–0.5
–0.6
–0.7
–0.8
0
–0.1
–0.2
–0.3
Return
–0.4
–0.5
–0.6
–0.7
–0.01
0
0.01
0.02
0.03
0.04
0.05
0.1
0
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
Normal
Log-stable
Normal
Log-stable
FIGURE 7.97  PPFs for Normal and Log-Stable Portfolios.

675
Simulation Tools
IYR mixed portfolio
AGZ mixed portfolio
Risk = 27% (–0.27)
Risk = 48% (–0.48)
0.1
0
–0.1
Return
–0.2
–0.3
–0.4
–0.5
0.1
0
–0.1
–0.2
Return
–0.3
–0.4
–0.5
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0.1
0
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
FIGURE 7.98  PPFs for AGZ (top) and IYR (bottom) Portfolios.
TABLE 7.9
Allocated Portfolio Minimum and Maximum Returns
ETF
Allocation
Minimum
Maximum
IWM
20%
−24%
14%
MDY
15%
−24%
15%
SPY
5%
−18%
10%
EFA
5%
−23%
12%
EEM
10%
−29%
16%
LQD
15%
−11%
13%
AGZ
10%
−2%
4%
IYR
10%
−38%
26%
DBC
10%
−29%
15%
Portfolio
−22%
14%

676
Simulation of Dynamic Systems with MATLAB® and Simulink®
bounded, the log-stable distribution fits the data with parameters which allows random numbers 
to be drawn in excess of these bounds—again, with small, but non-zero probability. Think of it 
this way, while the largest earthquake on record is magnitude 9.5, the possibility exists for a larger 
earthquake to occur—we just haven’t experienced it, yet.
7.7.5  Summary
We briefly discussed black swans and their attributes, showing it’s possible to identify potential 
black swans and in doing so, render them gray.
We showed the log-stable distribution is preferred to the normal distribution when it comes to mod­
eling data that includes rare events lying far from the mean. The log-stable achieves this by assign­
ing a non-zero probability of occurrence with its fat tail, whereas the normal distribution assigns a 
negligible probability due to its thin tail. We showed practical (financial) applications of log-stable 
modeling for both individual data sets (S&P 500) as well as a portfolio comprised of data sets (ETFs).
Finally, we discussed how PPFs and stochastic unconstrained optimization and their insights can 
reduce the surprise of a black swan, rendering it gray.
In the end, we have shown how modeling and simulation can be used to analyze and prepare or cre­
ate a black swan and in practice, we’ve developed models and simulation tools that enable the analysis.
7.7.6  Acknowledgements
We wish to thank Dr. Paul Kaplan (Morningstar) and Dr. John Nolan (University of Virginia) for 
personal email correspondence. We wish to recognize Investools/TD Ameritrade as the database 
from which we were able to obtain historical monthly data for each asset class.
7.7.7  References
Fama, E., Mandelbrot and the stable paretian hypothesis. Journal of Business, 36(4), 420–429, 1963.
Kaplan, P., Frontiers of Modern Asset Allocation. Hoboken, NJ: John Wiley & Sons, Inc., 2012.
Kaplan, P., Using fat tails to model gray swans. Retrieved from http://morningstardirect.morningstar.
com/clientcomm/LogStableDistributions.pdf, 2008.
Mandelbrot, B., The variation of certain speculative prices. Journal of Business, 36(4), 394–419, 1963.
Markowitz, H., Portfolio selection. Journal of Finance, 7(1), 77–91, 1952.
Markowitz, H., Approximating expected utility by a function of mean and variance. The Economic 
Review, 69(3), 308–317, 1979.
Markowitz, H., The early history of portfolio theory: 1600–1960. Financial Analysts Journal, 55(4), 
5–16, 1999.
Nolan, J., User manual for STABLE 5.1: MATLAB version. Retrieved from www.robustanalysis.
com/MatlabUserManual.pdf, 2009b.
Savage, S., The Flaw of Averages. Hoboken, NJ: John Wiley & Sons, Inc., 2009.
Taleb, N., The Black Swan: The Impact of the Highly Impossible. NY: Random House Inc., 2010.
Veillette, M., STBL: Alpha stable distributions for MATLAB. Retrieved from http://www.
mathworks.com/matlabcentral/fileexchange/37514-stbl--alpha-stable-distributions-for-matlab/
all_files, 2015.
Wright, C., Tail tales. CFA Institute Magazine, 2007, March/April.
7.7.8  Appendix—Mathematical Properties of the Log-Stable Distribution
The log-stable distribution is frequently used to model investment returns. Returns are expressed in 
decimal form, where negative returns represent losses and positive returns represent profit. We then 
normalize the returns by adding one and taking the natural log of the result. Once in this form, the 

677
Simulation Tools
returns conform to a stable distribution. The probability density function (pdf) for a (fat-tail) stable 
distribution is
	
f x
g x
: , , ,
; ,
α β γ δ
γ
δ
γ
α β
(
)=
−






1
	
α represents the “fatness” of the tails and is in the range between 0 and 2, with 2 being a normal 
distribution. Also, if α < 1, then the mean of distribution is infinite.
β represents the skewness of the distribution and lies within the range of −1 to 1, where −1 sig­
nifies fully left-skewed and +1 signifies fully right-skewed. If β = 0, the distribution is symmetric.
γ represents the scale of the distribution and is positive. If α = 2 (normal), then γ2 = is one-half 
the variance.
δ represents the location of the distribution. If α > 1, then δ is the mean of distribution.
7.8  THE SIPMATH STANDARD
7.8.1  Introduction
This section discusses a means for efficiently representing uncertainty as probability distributions: 
Stochastic Information Packets (SIPs) are arrays of realizations of uncertainties, for example Monte 
Carlo simulation trials. Sets of SIPs, which maintain statistical dependence are known as Stochastic 
Library Units with Relationship Preserved (SLURPs). The SIPmath standard enables legacy and 
future simulation models to communicate with each other.
Strings of numbers representing uncertainty and probability distributions have been used at least 
since 1991 (Dembo, 1991). In 2005, the use of number strings (SIPs and SLURPs) was extended to 
drive interactive simulations for high-level decision-makers at Royal Dutch Shell (Savage, Scholtes, & 
Zweidler, 2006). Subsequently, the discipline of probability management was formalized. The approach 
is further described in The Flaw of Averages, Why We Underestimate Risk in the Face of Uncertainty 
(Savage, 2009) and Calculating Uncertainty: Probability Management with SIP Math (Thibault, 2013).
SIPs advance the modeling of uncertainty in four fundamental ways:
Actionable—SIPs may be used directly in calculations involving uncertainty on numerous 
platforms
Additive—SIPs allow uncertainties to be aggregated across platforms across the enterprise
Auditable—Uncertainties are represented as unambiguous data with provenance
Agnostic—Platform independence
Beyond modeling uncertainty, the SIP (as a vector array) makes data from one database/­
simulation easily accessible to other databases/simulations, thereby facilitating the movement of 
potentially large and unstructured data between distributed simulators. SIPs/SLURPS can accom­
modate both “big data” and data as small as a single number. Furthermore, conversion between 
file types (currently XLSX, CSV, XML, JSON) is facilitated with ease. SIP/SLURP formats have 
been successfully used with a wide range of software and simulation types, including R, MATLAB, 
Autobox, and other proprietary software.
The SIP standard is open, neutral, and not tied to any particular format or firm. It is sponsored by 
Probability Management (PM), a non-profit. There is no fee or license to use SIPs, and the standard 
is freely available at www.probabilitymanagement.org.
7.8.2  Standard Specification
The purpose of the specification is to define standards for probability distributions as auditable and 
transportable data. The standard defined herein is for the Stochastic Information Packet (SIP) and 

678
Simulation of Dynamic Systems with MATLAB® and Simulink®
the Stochastic Library Unit with Relationships Preserved (SLURP). The standard defines a simple, 
adaptable data architecture that makes it easy to create and use SIP libraries by piggybacking on com­
mon data formats: CSV, XML, and XLSX (Excel Worksheets). The open SIPmath™ 2.0 Standard 
may be downloaded from the Probability Management web site http://­probabilitymanagement.org/
library/SIP-Standard-Version2.pdf.
While the standard was created to support simulation and analysis dealing with uncertainty 
(“Stochastic Processes”) any data can be archived using the specification. The features of storing 
a string or table of numbers, or even a single value with all of the descriptive information is valu­
able. The SIP provides a way to deliver units, the name of the variable, data provenance, and other 
information. Even when the data delivered in a SIP doesn’t “seem” stochastic, it provides a useful 
way to create open interfaces among simulation tools and organizations. Because information in 
one format can easily and reliably be translated to another format, the cost and barriers to informa­
tion sharing are reduced.
The SIP provenance described below is the “data about the data.” This is one of the most valu­
able features of the specification standard. It provides a way to communicate important information 
about the origins, vintage, and details of the data. There are two fields in the specification for pro­
viding “data about the data,” one is the “about” field and the other is “provenance” field.
7.8.3  SIP Details
The Stochastic Information Packet (SIP) represents a probability or frequency distribution as a data 
structure that holds an array of values and metadata. In the current standard, the values are realiza­
tions of the possible outcomes of an uncertain variable. The array for a probability distribution is 
composed so that the default probability of each element is 1/N where N is the number of elements 
in the array. The key benefit of using SIPs is that they are actionable, in that they may be used in 
calculations. If X is a random variable represented by SIP(X), and F(X) is a function of X, then 
SIP(F(X)) = F(SIP(X)). That is, the function, F, is applied sequentially to each element of SIP(X). 
This means in effect that SIPs and the arithmetic, relational, and logical operators comprise a group 
Tables 7.10 and 7.11.
7.8.4  SLURP Details
A coherent set of SIPs that preserve statistical relationships between uncertainties is known as 
a Stochastic Library Unit with Relationships Preserved (SLURP). Two or more SIPs are coher­
ent if the values of their corresponding samples are in some way interdependent. For calculations 
with these SIPs to be valid, the alignment of the samples must be preserved; if one of the SIPs 
is ­permuted, the others must be permuted by the same permutation index to preserve coherence. 
In this respect, the importance of the SLURP is that any SIP calculated with arithmetic, relational, 
or logical operations on SIPs in a given SLURP will also be coherent with that SLURP. Two attri­
butes are required: name and coherent; one is optional: count Table 7.12.
TABLE 7.10
SIP Standard Attributes
Name
Description
name
Required. A text string identifying the SIP, usually unique in context
count
Required. The number of samples
type
Required. The format type
ver
Required. The format version

679
Simulation Tools
7.8.5  SIPs/SLURPs and MATLAB
To demonstrate how to export data from the MATLAB Workspace directly to an XML SLURP, 
we’ve adapted an open-source, econometric forecasting model developed by the Federal Reserve 
Bank of Philadelphia. The Philadelphia Research Intertemporal Stochastic Model (PRISM) is a 
research project available for download from http://www.philadelphiafed.org/research-and-data/
real-time-center/prism
Its output is not an official forecast of the Philadelphia Federal Reserve. Furthermore, our 
­adaptation is in no way sponsored by nor endorsed by the Philadelphia Federal Reserve.
First, we use the econometric forecasting model to generate MATLAB Workspace data represent­
ing the state variables: Gross Domestic Product (GDP), Consumption, Investment, Hours Worked, 
Inflation, and Fed Funds Rate. Each MATLAB Workspace stochastic state variable is ­represented 
by 1,000 sample paths with a forecast over several ten quarters. Multiple financial institutions can 
all access the same data to execute their own individual risk models. Because each model observes 
the same state of the world on each trial, the results of these models may, in principle, be aggregated 
into a SLURP of the entire financial sector.
In the vernacular of SIPmath, we will create a GDP SLURP of 1,000 sample paths reflecting the 
temporal stochastic forecast, comprised of 10 SIPs, one for each quarter. Of course, there would be 
TABLE 7.11
Common Optional Attributes
Name
Description
about
A description of the SIP or SLURP
avg
The average or mean of the SIP sample values before they’re encoded into the string
csvr
The number of digits to the right of the decimal for CSV conversion
dataver
A number or date indicating the currency of the data in a SIP or SLURP
dims
The dimensions of a multidimensional SIP
hbin
The bin width of a histogram of the SIP
hmin
The minimum value in a histogram of the SIP
hnum
The number of bins in a histogram of the SIP
hvalN
The value in the Nth bin in a histogram of the SIP
max
The SIP maximum sample value
min
The SIP minimum sample value
offset
An offset factor to be applied to a SIP encoded value to get the sample value. The “b” in ax + b. Default is 
0.
origin
An arbitrary text string should say something about the institution or project that produced a SIP or SLURP
provenance
Information about the source and authority of the data
Ptile
The (P/100) percentile
scale
A scale factor to be applied to a SIP encoded value to get the sample value. The “a” in ax + b. Default is 1.
units
A text string for the SIP data measurement units e.g., “Can$” for Canadian dollars
TABLE 7.12
SLURP Standard Attributes
Name
Description
name
Can be any string, should be a unique identifier in context.
coherent
Must be either “true” or “false”. If false, the coherence of the included SIPs is not assured.
count
Optional. The number of SIPs in the SLURP.

680
Simulation of Dynamic Systems with MATLAB® and Simulink®
SLURPS for the remaining state variables as well, which would reflect cross-correlation between 
state variables. The union of all these SLURPs therefore form an overall SLURP. However, this 
example will remain focused on GDP.
If the reader has downloaded and installed the PRISM model, the following MATLAB code was 
added to the end of the dsgefcst.m script:
% Define SLURP attributes
attributeSlurpStruct.name = 'GDP';
attributeSlurpStruct.coherent = 'true';
attributeSlurpStruct.count = 1000;
% Define SIP attributes
for j = 1:2
attributeSipStruct(j).name = strcat('GDP_0',num2str(j));
attributeSipStruct(j).count = 1000;
attributeSipStruct(j).type = 'CSV';
attributeSipStruct(j).ver = '1.0';
attributeSipStruct(j).dataArray = yfcst2(:,j);
end
slurpXmlCreator(2,attributeSlurpStruct,attributeSipStruct);
The slurpXmlCreator function is found in the appendix. Upon execution of the sample code, an 
XML file named, GDP.xml is created. A portion of the XML file is displayed below. The actual 
stochastic data for GDP is suppressed to conserve space. Where it reads (1000 data points), there are 
1000 comma separated values.
<?xml version="1.0" encoding="utf-8"?>
<SLURP name="GDP" coherent="true" count="1000">
<SIP name="GDP_01" count="1000" type="CSV" ver="1.0"> (1000 data points) 
</SIP>
<SIP name="GDP_02" count="1000" type="CSV" ver="1.0"> (1000 data points) 
</SIP>
…
<SIP name="GDP_10" count="1000" type="CSV" ver="1.0"> (1000 data points) 
</SIP>
</SLURP>
To fully appreciate the power of SIPmath, the XML SLURP (GDP SIPs) from the PRISM model 
was imported into an Excel workbook with VBA code written to the specification. The simplicity 
of the standard was demonstrated by its success on first use, in spite the fact that the MATLAB 
encoding and VBA decoding algorithms were developed by two independent programmers com­
municating only through the documented specification. The 1,000 sample paths stored as SIPs, now 
in Excel, were then run through an interactive SIPmath model that generated two new sets of sample 
paths through lagged regressions representing a hypothetical predicted metric at each of two finan­
cial institutions. These two sets of 1,000 paths were then consolidated to represent the predicted 
sum of the metrics across all institutions. Consolidating the results of two simulations in this way 
is not usually possible.
7.8.6  Summary
Interfacing multiple modeling environments together requires two things: (1) that the transfer 
­protocol of data between the modeling environments is standardized, and (2) that the variables 
of interest are known and well defined. In order to address these requirements, the data should 
be transitioned to standardized SIP and/or SLURP format. In addition, it is highly recommended 

681
Simulation Tools
that the definition of data classes expected to be transferred between modeling environments be 
jointly researched and specified.
7.8.7  Appendix
function slurpXmlCreator(nSips,attributeSlurpStruct,attributeSipStruct)
% This function generates an XML SLURP given metadata and data according
% to the SIPmath standard written by Marc Thibault of Probability 
Management.
% http://probabilitymanagement.org/standards.html
% Randal Allen, 31 March 2017
% Contributor: Soham Chowdhury (dataArray to CSV)
% INPUTS
% nSips - the number of SIPs within each SLURP
% attributeSlurpStruct - the attribute structure of the SLURP (metadata)
% - Required: name, coherent
% - Optional: count, type, ver, about, origin
% attributeSipStruct - the attribute structure of each SIP (metadata and 
data)
% - Required: name, count, type, and ver
% - Optional: min, max, avg, about, origin, units, scale, offset
% USAGE (how variables are assigned prior to function call)
% Define the SLURP attributes
% attributeSlurpStruct.name = 'slurp_name';
% attributeSlurpStruct.count = number_of_sips;
% attributeSlurpStruct.type = 'CSV';
% attributeSlurpStruct.ver = '1.2.4';
% attributeSlurpStruct.coherent = 'true';
% attributeSlurpStruct.about = 'info_about_slurp';
% attributeSlurpStruct.origin = 'more_provenance';
% Define the SIP attributes for each (j) of the SIPs (nSips)
% for j = 1:nSips
% attributeSipStruct(j).name = strcat('sip_name_',num2str(j));
% attributeSipStruct(j).count = number_of_sips;
% attributeSipStruct(j).type = 'CSV';
% attributeSipStruct(j).ver = '1.2.4';
% attributeSipStruct(j).about = 'info_about_sip';
% attributeSipStruct(j).min = min(data(j));
% attributeSipStruct(j).max = max(data(j));
% attributeSipStruct(j).avg = mean(data(j));
% attributeSipStruct(j).dataArray = data(j);
% end
% Call this function
% slurpXmlCreator(nSips,attributeSlurpStruct,attributeSipStruct);
% Create the top-level node for the SLURP
docNode = com.mathworks.xml.XMLUtils.createDocument('SLURP');
slurpName = docNode.getDocumentElement;
% Set the SLURP attributes
slurpName.setAttribute('name',attributeSlurpStruct.name);
slurpName.setAttribute('coherent',attributeSlurpStruct.coherent);
slurpName.setAttribute('count',num2str(attributeSlurpStruct.count));
slurpName.setAttribute('type',attributeSlurpStruct.type);
slurpName.setAttribute('ver',attributeSlurpStruct.ver);
slurpName.setAttribute('about',attributeSlurpStruct.about);
slurpName.setAttribute('origin',attributeSlurpStruct.origin);

682
Simulation of Dynamic Systems with MATLAB® and Simulink®
% Set the attributes for each SIP of the SLURP
for j = 1:nSips
sipName(j) = docNode.createElement('SIP');
sipName(j).setAttribute('type',attributeSipStruct(j).type);
sipName(j).setAttribute('count',num2str(attributeSipStruct(j).count));
sipName(j).setAttribute('name',attributeSipStruct(j).name);
sipName(j).setAttribute('ver',attributeSipStruct(j).ver);
sipName(j).setAttribute('about',attributeSipStruct(j).about);
sipName(j).setAttribute('min',num2str(attributeSipStruct(j).min));
sipName(j).setAttribute('max',num2str(attributeSipStruct(j).max));
sipName(j).setAttribute('avg',num2str(attributeSipStruct(j).avg));
[nR, nC] = size(attributeSipStruct(j).dataArray);
% Convert data array to a row vector for use with vec2str function
% "round" added to suppress scientific notation
if nR > nC %if a column vector
dataArray = round(attributeSipStruct(j).dataArray,5)';
else
dataArray = round(attributeSipStruct(j).dataArray,5);
end
% Convert the dataArray into a comma-separated string of values
csvDataString = vec2str(dataArray,[],[],0);
sipName(j).setTextContent(csvDataString);
slurpName.appendChild(sipName(j));
end
% Write the SLURP to an XML file.
xmlwrite(strcat(attributeSlurpStruct.name,'.xml'),docNode);
type(strcat(attributeSlurpStruct.name,'.xml'));
end
7.8.8  References
Dembo, R. S., Scenario optimization, Annals of Operations Research, 30(1), 63–80. http://link.springer.com/
article/10.1007%2FBF02204809, 1991.
Savage, S., S. Scholtes, and D. Zweidler, Probability management, OR/MS Today, February, 33(1). http://www.
lionhrtpub.com/orms/orms-2-06/frprobability.html, 2006.
Savage, S., The Flaw of Averages: Why We Underestimate Risk in the Face of Uncertainty, Wiley 2009.
Thibault, J. M., Calculating Uncertainty: Probability Management with SIP Math, 2013.
Schorfheide, F., K. Sill, and M. Kryshko, DSGE Model-based forecasting of non-modeled variables, Research 
Department, Federal Reserve Bank of Philadelphia, 2008.

683
8 Advanced Numerical 
Integration
8.1  INTRODUCTION
Dynamic errors, an important aspect in digital simulation of dynamic systems, are introduced. 
Instead of focusing on truncation errors, the simulationist may be more concerned with errors 
in dynamic response, a yardstick of simulation accuracy involving comparisons of transient and 
­sinusoidal responses of continuous-time and discrete-time models.
The subject of dynamic errors has been covered in great detail by Howe (1986). The commonly 
used numerical integrators are analyzed by considering the characteristic roots, magnitude, and 
phase properties of the “equivalent continuous-time system,” that is, the continuous-time system 
whose sampled values coincide with the discrete-time (simulated) system outputs. The connection 
between digital simulation and discrete-time systems is further illustrated by exploring the subject 
of stability in both arenas.
Stiff systems, initially introduced in Chapter 6, are once again considered. Multirate integration 
schemes are presented as an alternative to the use of stiff integrators for the case where the overall 
system can be decomposed into several interconnected subsystems operating at different speeds.
Real-time simulation is a specialized application involving interactions between a digital simula­
tion and real-time inputs from physical components or a human operator. The necessity of synchro­
nizing with signals to and from external components places additional constraints on the simulation 
environment and numerical integrators. Real-time compatible numerical integrators are discussed 
along with numerical integrators not suitable for real-time implementation and an explanation of 
why they are not.
The chapter concludes with a look at some additional techniques for developing discrete-time 
models intended to approximate the dynamic behavior of linear time-invariant (LTI) continuous-
time models.
8.2  DYNAMIC ERRORS (CHARACTERISTIC ROOTS, TRANSFER FUNCTION)
The use of numerical integrators to simulate the behavior of continuous-time systems introduces 
errors, that is, the transient and steady-state behavior of the discrete-time responses differs from that 
of the continuous-time outputs at the times where the simulated response is computed. Some insight 
with respect to the differences is possible by considering expressions for the truncation errors inher­
ent in the various types of numerical integrators. We know that the local and global truncation 
errors are sensitive to the integration step size and the state derivative functions which define the 
continuous-time system model.
The differences in transient and steady-state sinusoidal responses are termed dynamic errors. 
Truncation errors, on the other hand, relate numerical solutions of differential equation models to 
various-order Taylor Series expansions of the continuous-time solutions. A mathematical frame­
work for comparing dynamic errors resulting from numerical integration of linear continuous-time 
models is possible. Given that real-world system models are invariably nonlinear, the first step is 
therefore to linearize the system of nonlinear differential and algebraic equations about a steady-
state operating point, similar to the procedures discussed in Section 7.4.
The dynamic errors associated with the use of fixed-step numerical integrators applied to linear 
system models fall in one of two categories (Howe 1986). One type of error focuses on differences 

684
Simulation of Dynamic Systems with MATLAB® and Simulink®
between characteristic roots of the continuous-time system model and the apparent or equivalent 
continuous-time system. By equivalent continuous-time system, we mean the continuous-time sys­
tem that generates sampled values identical with the discrete-time (simulated) system.
The second type of error relates to differences between the frequency response function of the 
continuous-time system and the discrete-time system used to approximate its behavior. Only linear 
first- and second-order systems will be considered because higher-order systems can be represented 
as linear combinations of these lower-order subsystems.
8.2.1  Discrete-Time Systems and the Equivalent Continuous-Time Systems
Consider a first-order linear system modeled by
	
d
d
x
t
f x u
x
u
=
=
+
( , )
λ
	
(8.1)
The characteristic root is λ, the pole of the system transfer function
	
H s
X s
U s
s
( )
( )
( )
=
=
−
1
λ 	
(8.2)
Digital simulation of the system requires solution of a difference equation obtained by numerical 
integration of the state derivative function f(x, u). For explicit Euler integration, the z-domain transfer 
function of the resulting discrete-time system can be obtained by z-transforming the difference equation
	
x
n
x
n
T
x
n
u n
A
A
A
(
)
( )
( )
[
( )]
+
=
+
+
1
λ
	
(8.3)
or equivalently from (see Section 4.7)
	
H z
H s
s
z
T
T
z
T
s
s
z
T
z
T
( )
( )
(
)
(
)
=
=
−
=
−
−
=
−
+
←
←
−
−
1
1
1
1
1
1
λ
λ
λ
/
	
(8.4)
The discrete-time system pole is located at z1 = 1 + λT.
The equivalent continuous-time system is the system whose output x(t), t ≥ 0 is identical to the 
discrete-time output xA(nT) at times tn, = nT, n = 0, 1, 2, …. To illustrate, suppose the input to the 
system in Equation 8.1 is u(t) = 1, t ≥ 0. The response is
	
x t
t
t
( )
[e
],
,
=
−
≥
1
1
0
λ
λ
	
(8.5)
The use of explicit Euler integration with step size T to approximate the continuous-time step 
response produces the discrete-time approximation xA(n), short for xA(nT), n = 0, 1, 2, … obtained 
from
	
X
z
H z U z
A( )
( ) ( )
=  
	
(8.6)
	
=
−
+






−
T
z
T
z
z
(
)
1
1
λ
	
(8.7)

685
Advanced Numerical Integration
Partial fraction expansion of Equation 8.7 followed by inverse z-transformation of the resulting 
terms gives
	
x
n
T
n
A
n
( )
[(
)
],
, , ,
=
+
−
=
…
1
1
1
0 1 2
λ
λ
	
(8.8)
Let the equivalent continuous-time system be described by
	
d
d
x
t
f x u
x
Ku
=
=
+
( , )
*
λ
	
(8.9)
where λ* and K are the characteristic root and gain parameter of the equivalent first-order continu­
ous-time system, respectively. The step response is
	
x
t
K
t
t
* ( )
[
],
*
=
−
≥
λ
λ
* e
1
0
	
(8.10)
Sampling the equivalent continuous-time system response every T s gives
	
x
nT
K
n
nT
*(
)
*[
],
, , ,
*
=
−
=
…
λ
λ
e
1
0 1 2
	
(8.11)
Equating the discrete-time responses in Equations 8.8 and 8.11,
	
1
1
1
1
0 1 2
λ
λ
λ
λ
[(
)
]
[
],
, , ,
*
+
−
=
−
=
…
T
K
n
n
nT
* e
	
(8.12)
Solving for K and λ*,
	
e
*
λ
λ
λ
λ
*
(
)
ln(
)
nt
n
T
T
T
=
+
⇒
=
+
1
1
1
	
(8.13)
	
K
K
T
T
λ
λ
λ
λ
λ
λ
*
*
=
⇒
=
=
+
1
1
ln(
)
	
(8.14)
The step response of the first-order continuous-time system in Equation 8.1 with characteristic 
root λ = −2 is shown in Figure 8.1. Also shown is the step response of the discrete-time system 
in Equation 8.3 corresponding to explicit Euler integration of the derivative function with step size 
T = 0.05 s. The step response of the equivalent continuous-time system in Equation 8.9 with λ* and 
K computed from Equations 8.13 and 8.14 is also shown.
From Equation 8.4, the pole of the discrete-time system is z1 = 1 + λT. Replacing 1 + λT in 
Equation 8.13 with z1 leads to an expression relating the characteristic root of the equivalent contin­
uous-time system and the pole of the discrete-time system. That is,
	
λ*
ln
= 1
1
T
z
	
(8.15)
Solving Equation 8.15 for the discrete-time system pole leads to
	
z
T
1 = eλ*
	
(8.16)

686
Simulation of Dynamic Systems with MATLAB® and Simulink®
Uniform sampling of the equivalent continuous-time system response x*(t) every T s generates 
the discrete-time system signal xA(n) with pole z1 given in Equation 8.16. In the general case, sam­
pling continuous-time signals with real and complex poles produces discrete-time system signals 
with z-plane poles given by
	
z
e
i
n
Tsi
1
1 2
=
=
…
,
, ,
, 	
(8.17)
where si are the poles of the continuous-time system (Jacquot).
Equation 8.17 applies to LTI systems and their characteristic roots as well. The sampled output 
of a continuous-time system with characteristic root (s-plane pole) s1 is identical to the output from 
a discrete-time system with characteristic root (z-plane pole) located at z
Tsi
1
e
=
. Looking at it from 
the opposite direction, the continuous-time system equivalent to a discrete-time system with a pole 
z1 has an s-plane pole at s1 = 1/T × ln z1.
According to Equation 8.17, a continuous-time integrator with a pole at s = 0 in the s-plane is the 
continuous-time system equivalent to a discrete-time system with a pole at z = 1. Figure 8.2 illus­
trates the point by showing that a pure integrator generates a continuous-time signal x(t) in response 
to the input u(t), which matches the response of the discrete-time system with z-domain transfer 
function H(z) = K/(z − 1) at the discrete times tn = nT, n = 0, 1, 2, …
FIGURE 8.2  An integrator as the equivalent continuous-time system to a discrete-time system with pole at 
z = 1.
0
0
0.05
0.15
0.2
0.25
0.30
0.35
0.4
0.45
0.5
0.1
0.25
xA(n), Euler integration (T = 0.05 s)
x(t), (λ = –2)
x*(t), (λ* = –2.1072, K = 1.0536)
0.5
0.75
1
2
2.5
1.25
Continuous-time, discrete-time and
equivalent continuous-time system responses
t (s)
1.5
1.75
2.25
FIGURE 8.1  Step response of continuous-time, discrete-time, and equivalent continuous-time systems.

687
Advanced Numerical Integration
Suppose u(t) = e−at, t ≥ 0 is the input to the integrator. The output x(t) is
	
x t
u t
t
a
t
at
t
( )
( )
(
),
=
=
−
≥
−
∫
d
e
1 1
0
0
	
(8.18)
The discrete-time response is found from inverse z-transformation of
	
X z
K
z
z
z
K
z
z
z
z
aT
aT
aT
( ) =
−





−
= −
−−−






−
−
−
1
1
1
e
e
e
	
(8.19)
	
⇒
= −
−
=
…
−
−
x
n
K
n
A
aT
anT
( )
(
),
, , ,
1
1
0 1 2
e
e
	
(8.20)
and it follows that x(nT) = xA(n), n = 0, 1, 2, … provided
	
K
a
aT
= −
−
1
e
	
(8.21)
Figure 8.3 shows the characteristic root of the continuous-time system in Equation 8.2 for the case 
when λ = −2. The pole of the discrete-time system resulting from explicit Euler integration with 
step size T = 0.05 is located at z1 = (1 + λT) = 1 + (−2)(0.05) = 0.9 in the z-plane. The character­
istic root of the equivalent continuous-time system is λ* = 1/T × ln z1 = 1/0.05 × ln 0.9 = −2.107 
in the s-plane.
8.2.2  Characteristic Root Errors
The fractional error in characteristic root incurred using numerical integration for digital simulation 
of a first-order continuous-time system with characteristic root λ is defined as (Howe 1986)
	
e
*
λ
λ
λ
λ
=
−
	
(8.22)
For an underdamped second-order system with complex poles λ
ζω
ω
1 2, = −
±
n
d
j
 where ζ and ωn 
are the damping ratio and natural frequency, respectively, and ω
ζ ω
d
n
=
−
1
2
 is the damped natural 
frequency, the characteristic root errors are
	
e
*
e
e
*
*
ζ
ω
ω
ζ
ζ
ω
ω
ω
ω
ω
ω
=
−
=
−
=
−
,
,
n
d
n
n
n
d
d
d
	
(8.23)
FIGURE 8.3  Mapping z = eTs for finding the equivalent continuous-time system characteristic root 
λ* = −2.107 when z1 = 0.9, T = 0.05.

688
Simulation of Dynamic Systems with MATLAB® and Simulink®
ζ ω
ω
*
*
*
n
d
and
 are the damping ratio, natural frequency, and damped natural frequency of the equiva­
lent continuous-time second-order system, respectively. The characteristic roots of the equivalent 
continuous-time system are
	
λ
ζ ω
ω
ζ ω
ζ
ω
1 2
2
1
,
*
*
*
*
*
*
*
( *)
=−
±
=−
±
−
n
d
n
n
j
j
	
(8.24)
High-order linear continuous-time systems can be represented as the sum of first-and second-
order continuous-time systems. Hence, the characteristic root errors introduced in Equations 8.22 
and 8.23 are sufficient to analyze transient response dynamic errors of higher-order systems com­
prising first- and second-order subsystems.
EXAMPLE 8.1
The first-order system in Equation 8.1 is simulated using trapezoidal integration.
	
a.	Find an expression for eλ, the fractional error in characteristic root.
	
b.	Find an asymptotic formula for eλ valid for |
|
.
λT 1
	
c.	Over what range of values for λT is the asymptotic formula for eλ accurate?
	
a.	The difference equation for trapezoidal integration is based on
	
x n
x n
T f x n u n
f x n
u n
A
A
A
A
(
)
( )
{ [
( ), ( )]
[
(
), (
)]}
+
=
+
+
+
+
1
2
1
1
	
(8.25)
	
	 where f[xA(n), u(n)] and f[xA(n + 1), u(n + 1)] refer to the derivative function in Equation 
8.1. Z-transforming the difference equation and then solving for the ratio X(z)/U(z) results 
in the z-domain transfer function
	
H z
X z
Y z
T
z
T z
T
( )
( )
( )
(
)
(
)
=
=
+
−
−
+






1
2
2
λ
λ
	
(8.26)
	
	 The z-plane pole is
	
z
T
T
T
T
1
2
2
1
2
1
2
=
+
−
=
+
−
λ
λ
λ
λ
/
/
	
(8.27)
	
	 From Equation 8.15, the characteristic root of the equivalent continuous-time system is
	
λ
λ
λ
*
/
/
=
=
+
−






1
1
1
2
1
2
1
T
z
T
T
T
ln
ln
	
(8.28)
	
	 and the fractional error in characteristic root is
	
e
*
/
/
λ
λ
λ
λ
λ
λ
=
−=
+
−





−
1
1
1
2
1
2
1
T
T
T
ln
	
(8.29)
	
b.	Equation 8.29 is expressed in the form
	
eλ
λ
λ
λ
=
+





−
−











−
1
1
2
1
2
1
T
T
T
ln
ln
	
(8.30)

689
Advanced Numerical Integration
	
	 The asymptotic formula for eλ is obtained by truncating the Taylor Series expansion
	
ln(
)
1
2
3
4
2
3
4
+
=
−
+
−
+
a
a
a
a
a

	
(8.31)
	
	 after the cubic term where a = λT/2 and a = −λT/2 in Equation 8.30. After simplification, 
the result is
	
eλ
λ
λ
≈1
12
1
2
(
) ,
T
T 
	
(8.32)
	
c.	A plot of the exact and asymptotic formulas for eλ is shown in Figure 8.4. From the 
graph, it appears that the exact and asymptotic formulas for eλ are nearly identical for 
−0.5 ≤ λT < 0.
	
	   The first-order continuous-time system in Equation 8.1 is asymptotically stable pro­
vided λ < 0. The graphs of exact and asymptotic error in Figure 8.4 are for λT < 0; 
hence, they apply strictly to asymptotically stable, first-order systems. Equations 8.29 
and 8.32 are not valid for λT = 0, that is, when the continuous-time system reduces to a 
marginally stable integrator with characteristic root λ = 0.
	
	   Consider the use of trapezoidal integration with step size T to simulate the autono­
mous first-order system x
f x
x
=
=
( )
λ  with initial condition x(0). The discrete-time signal 
xA(n) satisfies the difference equation
	
x n
T
T
x n
n
A
A
(
)
( ),
, , , ,
+
=
+
−






=
1
1
2
1
2
0 1 2 3
λ
λ
/
/
…
	
(8.33)
	
	 with solution given by
	
x n
T
T
x
n
A
n
( )
( ),
, , , ,
=
+
−






=
1
2
1
2
0
0 1 2 3
λ
λ
/
/
…
	
(8.34)
0.05
0
0.1
0.15
0.2
0.25
0.3
–1.5
–1.25
eλ (asymptotic)
eλ (exact)
–1
–0.75
Exact and asymptotic fractional characteristic root errors
–0.5
0
–0.25
FIGURE 8.4  Exact and asymptotic fractional characteristic root errors for trapezoidal integration (with step 
size T) of first-order system x
x
u
=
+
λ
.

690
Simulation of Dynamic Systems with MATLAB® and Simulink®
Table 8.1 summarizes the results for a first-order system with characteristic root λ = −0.5 
simulated using trapezoidal integration with four different step sizes. The results are consistent 
with the graphs in Figure 8.4.
Several different responses are shown in Figure 8.5. The top two plots show the response of the 
continuous-time system and the discrete-time response corresponding to the top two rows in Table 
8.1. Due to the close agreement between λ and λ*, the response of the equivalent continuous-time 
system is indistinguishable from the response of the actual system. Additionally, the discrete-time out­
put (not all points shown) is in close agreement with the continuous-time response at times 0, T, 2T,…
In the last two cases (λT = −0.75 and λT = −1.25), the difference between λ and λ* is signifi­
cant, and the response of the equivalent continuous-time system is noticeably different from the 
actual system response, particularly for the case where λT = −1.25. The simulated (discrete-time) 
response is off as well.
Characteristic root errors resulting from simulation of second-order systems using specific 
numerical integrators are obtained in a straightforward manner. To illustrate, consider an under­
damped second-order continuous-time system with characteristic roots λ
ζω
ζ ω
1,2 = −
±
−
n
n
j 1
2
. 
Similar to the approach used in Equation 8.4, replacing the Laplace variable s in the continuous-
system transfer function with the reciprocal of the z-domain transfer function for Euler integration 
leads to the z-domain transfer function of the discrete-time system. This gives
TABLE 8.1
Effect of Parameter λT on Equivalent Characteristic Root and Fractional 
Characteristic Root Errors with Trapezoidal Integration
λ
T
λT
λ*
eλ (Exact)
eλ (Asymptotic)
−0.5
0.015
−0.0075
−0.500002
4.68754 × 10−6
4.68750 × 10−6
−0.5
0.15
−0.075
−0.500234
4.69146 × 10−4
4.68750 × 10−4
−0.5
1.5
−0.75
−0.526538
5.12764 × 10−2
4.68750 × 10−2
−0.5
2.5
−1.25
−0.586535
1.73070 × 10−1
1.30208 × 10−1
Table 2.1 row 1 responses
Table 2.1 row 2 responses
Table 2.1 row 3 responses
Table 2.1 row 4 responses
λT = –0.0075
λ = –0.5
T = 0.015
λT = –0.075
λ = –0.5
T = 0.15
λT = –0.75
λ = –0.5
T = 1.5
λT = –1.25
λ = –0.5
T = 2.5
0
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
2.5
5
t
t
7.5
10
0
2.5
5
7.5
10
0
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
2.5
5
7.5
10
0
2.5
5
7.5
10
FIGURE 8.5  Responses of first-order continuous-time, discrete-time, and equivalent continuous-time 
­systems for conditions in Table 8.1.

691
Advanced Numerical Integration
	
H z
K
s
s
n
n
n s
z
T
( ) =
+
+
←−
ω
ζω
ω
2
2
2
1
2
	
(8.35)
	
=
−
−
+ −
+
K
T
z
T z
T
T
n
n
n
n
(
)
(
)
(
)
ω
ζω
ζω
ω
2
2
2
21
1
2
	
(8.36)
Setting the denominator to zero and solving for the poles of H(z) give
	
z
j
T
n
n
12
2
1
1
,
(
)
= −
±
−
ζω
ζ ω
	
(8.37)
From Equation 8.15, the characteristic roots of the equivalent continuous-time system are
	
s
T
z
12
12
1
,
*
,
ln
=
	
(8.38)
Finding an expression for s1
* is easier when the corresponding z-plane pole z1 is written in polar 
form.
	
s
T
R
T
R
j T
j
1
1
1
*
ln( e )
ln
=
=
+
θ
θ
	
(8.39)
where R and θ are obtained from Equation 8.37 (after simplification) as
	
R
T
T
n
n
=
−
+
1
2
2
ζω
ω
(
) 	
(8.40)
	
θ
ζ ω
ζω
=
−
−






−
tan 1
2
1
1
n
n
T
T
	
(8.41)
Substituting Equations 8.40 and 8.41 into Equation 8.39 gives s
a
jb
1
*
*
*
=
+
 where the real and 
imaginary components a* and b* are given by
	
a
T
T
T
n
n
* =
−
+
(
)
1
1
2
2
ln
(
)
ζω
ω
	
(8.42)
	
b
T
T
T
n
n
*
tan
=
−
−






−
1
1
1
1
2
ζ ω
ζω
	
(8.43)
The continuous-time pole s1, the z-plane pole z1, and the equivalent continuous-time system pole 
s1
* are shown in Figure 8.6.

692
Simulation of Dynamic Systems with MATLAB® and Simulink®
From Figure 8.6, it follows that
	
ω
ζω
ω
ζ ω
n
n
n
n
a
b
T
T
T
*
*
*
(
)
(
)
tan
=
+
=
−
+
(
)



+
−
−
2
2 1 2
2
2
1
2
1
1
2
1
/
In
T
T
n
1
2
−






















ζω
	
(8.44)
	
ζ
ϕ
ω
ζω
ω
ω
*
*
*
*
cos
ln
(
)
=
= −
=
−
−
+
(
)
a
T
T
T
n
n
n
n
1
2
2
	
(8.45)
Asymptotic formulas for ωn
* and ζ* are given in (Howe 1986) as
	
ω
ζω
ω
ω
n
n
n
n
T
T
*
,
≈
+






1
2
1

	
(8.46)
	
ζ
ζ
ζ
ω
ω
*
,
≈
−
−






1
2
1
2
n
n
T
T 
	
(8.47)
Exact and approximate (asymptotic) expressions for the fractional error in natural frequency of the 
equivalent continuous-time system
	
eω
ω
ω
n
n
n
=





−
*
1
	
(8.48)
are obtained from Equation 8.44 for the exact result and Equation 8.46 for the asymptotic one. 
Figure 8.7 shows exact and asymptotic fractional errors for several second-order continuous-time 
system damping ratios using explicit Euler integration.
Substituting Equation 8.46 into Equation 8.48 results in the asymptotic fractional error as a 
linear function of ωnT, that is,
FIGURE 8.6  Relationship between second-order continuous-time system, discrete-time, and equivalent 
continuous-time system complex pole.

693
Advanced Numerical Integration
	
eω
ζ ω
ω
n
n
n
T
T
≈0 5
1
.
(
),
	
(8.49)
From Equation 8.45, the damping ratio error eζ is expressible as
	
e
*
ζ
ζ
ζ
ζ
ω
ω
ω
ζ
=
−
=
−
−
+
(
)
−
ln
(
)
*
1
2
2
n
n
n
T
T
T
	
(8.50)
where ωn
*  is given in Equation 8.44. From Equation 8.47, the asymptotic approximation for eζ is
	
eζ
ζ
ω
ω
≈
−
0 5
1
1
2
. (
)
,
n
n
T
T 	
(8.51)
The asymptotic expressions for eωn in Equation 8.49 and eζ in Equation 8.51 are of order O(ωnT) 
when using Euler integration to simulate an underdamped second-order system.
A plot of the exact and asymptotic formulas for the equivalent system damping ratio ζ* as a 
function of ωnT when ζ = 0.1 is shown in the top half of Figure 8.8. Agreement between the two 
plots is excellent over the interval 0 ≤ ωnT ≤ 0.5.
The equivalent continuous-time system is marginally stable when its two characteristic roots 
(transfer function poles) are purely imaginary, that is, ζ* = 0 (see Figure 8.6). From Equation 8.51 
with ζ = 0.1 and ζ* = 0, the dimensionless parameter ωnT is computed as
	
ζ
ζ
ω
ω
*−
=
−
≈
−
⇒
=
−
−
=
0
0 1
0 5 0 1
1
0 1
0 5
0 99
0 202
2
.
. [( . )
]
.
. (
.
)
.
n
n
T
T
	
(8.52)
The damping ratio ζ* of the equivalent continuous-time system is negative whenever 
ωnT > 0.202. The implication of ζ* < 0 is obvious from Figure 8.6, namely, the characteristic roots 
0
0
0.25
0.5
0.75
1
0.2
0.4
0
0
0
0.005
0.01
0.015
0.02
0.1
0.2
0.3
0.4
0.5
0.6
0.02
0.04
0.06
0.08
0.1
0
0.5
1.5
2.5
1
2
3
×10–3
Exact and asymptotic fractional error in natural frequency
0.6
ω nT
eωn
eωn
ω nT
0
0
0.1
0.2
0.3
0.4
0.05
0.1
0.15
ω nT
ω nT
ζ = 0.1
Exact
Asymptotic
ζ = 0.5
Exact
Asymptotic
Asymptotic
ζ = 0.25
ζ = 0.9
Exact
Exact
Asymptotic
FIGURE 8.7  Exact and asymptotic fractional errors in natural frequency with explicit Euler integration.

694
Simulation of Dynamic Systems with MATLAB® and Simulink®
are located in the right half of the complex plane, and the equivalent system is unstable despite 
the fact that the actual continuous-time system is asymptotically stable with positive damping ratio 
ζ = 0.1. The lower half of Figure 8.8 shows plots of the error eζ = ζ*− ζ = ζ* − 0.1 vs. ωnT based 
on the exact and asymptotic formulas in Equations 8.50 and 8.51.
Figure 8.9 points out a serious shortcoming of using explicit Euler integration to simulate the 
response of a marginally stable (ζ = 0) second-order system. The equivalent continuous-time sys­
tem is unstable because ζ* < 0 regardless of how small ωnT is chosen. The natural modes of the 
equivalent continuous-time system are oscillatory with increasing amplitude. The discrete-time 
system based on the use of explicit Euler integration is likewise unstable with a pair of complex 
poles outside the Unit Circle. This problem can be fixed by using trapezoidal integration instead 
of Euler integration (see Exercise 8.2).
Figures 8.7 through 8.9 are generated in M-file “Ch8_Fig2_7throughFig2_9.m.”
0
–0.6
–0.5
–0.4
–0.4
–0.3
–0.3
–0.2
–0.1
0
0.1
–0.2
–0.1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
ζ = 0.1
Exact
Exact
Equivalent
system
stable
ζ ∗ > 0
Equivalent system unstable
Equivalent continuous-time system damping ratio, ζ ∗
Equivalent continuous-time system damping ratio error, eζ
Asymptotic
Asymptotic
eζ
ζ∗
ω nT
ζ = 0.1
ζ∗ < 0
FIGURE 8.8  Equivalent system damping ratio (ζ*) and error (eζ) vs. ωnT.
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
ω nT
ζ = 0, Explicit Euler integration
Exact
Asymptotic
Equivalent continuous-time system damping ratio, ζ∗
–0.4
–0.5
–0.45
–0.35
–0.25
–0.15
–0.05
–0.3
–0.2
–0.1
0
ζ∗
FIGURE 8.9  Equivalent system damping ratio using explicit Euler integration.

695
Advanced Numerical Integration
EXAMPLE 8.2
A second-order system with damping ratio ζ = 0.1, natural frequency ωn = 50 rad/s, and steady-
state gain K = 1 is initially in equilibrium. A unit step input is applied at t = 0. The step response 
is simulated using explicit Euler integration with step size T.
	
a.	Find the step response x(t), t ≥ 0.
	
b.	Find the equivalent system natural frequency ωn
*  and damping ratio ζ* for T = 0.001, 
0.002, 0.004, 0.005 s.
	
c.	Plot the continuous-time system response x(t) and the discrete-time system response 
xA(n), n = 0, 1, 2, … corresponding to the values of T in part (b).
	
a.	The unit step response of an underdamped second-order system is (see Chapter 2)
	
x t
K
t
t
t
nt
d
n
d
d
( )
e
=
−
+












≥
−
1
0
ζω
ω
ζω
ω
ω
cos
sin
,
	
(8.53)
	
	 Substituting the given values for the system parameters, ζ, ωn, and K and evaluating the 
damped natural frequency ω
ζ ω
d
n
=
−
1
2
 give
	
x t
t
t
t
t
( )
e
= −
(
)+
(
)






≥
−
1
50 0 99
1
10 0 99
50 0 99
0
5 cos
.
.
sin
.
,
	
(8.54)
	
b.	Using Equations 8.44 and 8.46 for the exact and asymptotic equivalent system natural 
frequencies along with Equations 8.45 and 8.47 for the exact and asymptotic equivalent 
system damping ratios, the results are tabulated in Table 8.2. The damped natural fre­
quency of the continuous-time system ωd and the exact and asymptotic damped natural 
frequency approximation of the equivalent system are also shown.
	
	   Note that the equivalent continuous-time (as well as the discrete-time) system is 
on the verge of instability at ωnT = 0.2 in agreement with the top graph shown in 
Figure 8.8.
	
c.	The continuous-time response is plotted on the same graph as the simulated 
response  for the four distinct values of T in Figure 8.10. Every third point of the 
discrete-time response is plotted in the top left graph. Every point is shown in the 
remaining plots.
The damped natural frequency of the four simulated step responses corresponding to ωnT = 0.05, 
0.01, 0.2, 0.25 appears to be in close agreement with the continuous-time system response. 
However, even the discrete-time response in the top left graph where the integration step size is 
T = 0.001 s deviates considerably from the continuous-time response in the neighborhood of the 
peaks and low points. The oscillatory discrete-time response in the lower left graph in Figure 8.10 
TABLE 8.2
Comparison of Actual System and Equivalent System Parameters
ωnT
ωn
ωn* Exact
ωn
* Approximate
ζ
ζ* Exact
ζ* Approximate  
ωd
ωd
*  Exact
ωd* Approximate
0.05
50
50.099
50.125
0.1
0.0751
0.0753
49.749
49.958
49.983
0.10
50
50.147
50.250
0.1
0.0501
0.0505
49.749
50.084
50.186
0.20
50
50.084
50.500
0.1
0.0000
0.0010
49.749
50.084
50.500
0.25
50
49.975
50.625
0.1
−0.0249
−0.0237
49.749
49.959
50.611

696
Simulation of Dynamic Systems with MATLAB® and Simulink®
is consistent with Figure 8.8, which shows the equivalent continuous-time system damping ratio 
is zero when ωnT ≈ 0.2.
It is clear from this example that the use of explicit Euler integration to approximate the dynam­
ics of an underdamped, stable, second-order system (0 < ζ < 1) may result in an equivalent 
continuous-time system that is asymptotically stable (0 < ζ* < 1), marginally stable (ζ* = 0), or 
unstable (ζ* < 0). From Figure 8.6, the equivalent continuous-time system is marginally stable 
when a* = 0. Setting the argument of the natural log term in the expression for a* in Equation 8.42 
to 1 and solving for ωnT gives
	
(
)
(
)
ω
ζ
ζ
ω
ζ
n
max
max
n
T
T
=
⇒
=
<
<
2
2
0
1
	
(8.55)
where (ωnT)max and Tmax are the values of (ωnT) and T, which result in marginally stable, discrete-
time, and equivalent continuous-time systems. A plot of (ωnT)max = 2ζ is shown in Figure 8.11 
along with ωnT ranging from 0.01 up to (ωnT)max when ζ = 0.707.
Consider the second-order system
	


x
x
x
K
u
n
n
n
+ 2
2
2
ζω
+ ω
=
ω
	
(8.56)
with parameters ζ = 0.707, ωn = 10 rad/s, and K = 1. Differentiating the unit step response in 
Equation 8.53 gives the unit impulse response (Ogata 1998). Alternatively, the impulse response 
can be obtained by inverse Laplace transformation of the system transfer function H(s) = X(s)/U(s). 
Either way, the result is
	
h t
K
t
n
t
d
d
n
n
( )
sin
,
=
−
=
−
−
ω
ζ
ω
ω
ζ ω
ζω
1
1
2
2
e
	
(8.57)
Step response of continuous-time and discrete-time (explicit Euler) system
ωnT = 0.2
t (s)
t (s)
ωnT = 0.25
ωnT = 0.05
Continuous
2
3
2
1
0
5
3
1
–1
–3
1.5
0.5
1
0
2
1.5
0.5
1
0
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
Discrete
Continuous
Discrete
ωnT = 0.1
FIGURE 8.10  Continuous-time and discrete-time unit step responses of second-order system (ζ = 0.1, 
ωn = 50 rad/s) using explicit Euler integration.

697
Advanced Numerical Integration
Suppose we attempt to simulate the impulse response of the system in Equation 8.56 using explicit 
Euler integration. The difference equation for explicit Euler integration of the second-order system 
in Equation 8.56 was developed in Section 4.7 and is repeated in Equation 8.58.
	
x
T x
T
T
x
K
T u
k
k
n
k
n
n
k
n
k
+
+ +
+
=
=
2
1
2
2
21
1 2
1 0 1 2
– ( –
)
–
(
)
(
)
,
– , , ,
[
]
ζω
ζω
ω
ω
,…	
(8.58)
The unit impulse response of the second-order system in Equation 8.56 is identical to the response 
of the unforced system with initial conditions x(0) = 0, x
n
( )
0
2
= ω  (see Exercise 8.6). Therefore, 
the impulse response can be simulated by solving the difference equation in Equation 8.58 with 
uk = −1, 0, 1, 2, … along with the appropriate initial conditions, namely, x(0) = 0 and x
T
n
(
)
.
−
= −
1
2
ω
 
The simulated impulse responses for the values of ωnT in Figure 8.11 are shown in Figures 8.12 and 
8.13. Not all the data points for the discrete-time response when ωnT = 0.01 are shown.
Figure 8.12 illustrates the necessity of choosing the time step to achieve an accurate transient 
response. Indeed, all four simulated responses in Figure 8.12 are stable and converge to the cor­
rect steady state, but only one is reasonably accurate. Figure 8.13 represents the case where the 
discrete-time system (and the equivalent continuous-time system) are marginally stable with oscil­
latory natural modes.
It may have occurred to you that the impulse response of the second-order system in Equation 
8.56 could be simulated by finding the impulse response hk, k = 0, 1, 2, … of the discrete-time 
system described by Equation 8.58, either analytically or by recursive solution of the difference 
equation with uk = δk = 1, k = 0, 1, 2, …. Think twice before doing so because hk ≠ h(t)|t = kT, 
k = 0, 1, 2, ….
8.2.3  Transfer Function Errors
A second class of dynamic error involves the frequency response functions of the continuous-time 
system and the discrete-time system used to simulate it. The fractional error in the (discrete-time 
system) transfer function is
	
eH
j T
H
H j
H j
=
−
(e
)
(
)
(
)
ω
ω
ω
	
(8.59)
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
ω nT = 0.01
(ω nT)max = 1.414
(ω nT)max
ω nTmax vs. z
0.25(ω nT)max
0.5(ω nT)max
0.75(ω nT)max
ζ
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
FIGURE 8.11  Plot of (ωnT) vs. ζ resulting in marginally stable, second-order equivalent continuous-time 
system using explicit Euler integration.

698
Simulation of Dynamic Systems with MATLAB® and Simulink®
where it is important to remember that
	
H j
H s
H z
H s
H
H z
s
j
s
H
z
j T
z
I
j T
(
)
( )
,
( )
( )
,
( )
(
)
/
( )
ω
ω
ω
ω
=
=
=
|
|
|
←
←
←
1
e
 
e
	
(8.60)
The fractional error in transfer function is a complex-valued, frequency-dependent function, which 
can be expressed in terms of a real and imaginary component, that is,
	
e
e
e
H
j T
M
A
H
H j
j
=
−=
+
(e
)
(
)
ω
ω
1
	
(8.61)
0
–15
–10
–5
0
5
10
15
20
1.6
1.4
1.2
1
0.8
t
0.6
0.4
0.2
Simulated impulse response of second-order
system, (ωnT)max = 2, ζ = 1.414
ζ = 0.707, ωn = 10 rad/s, T = 0.1414 s, ωnT = 1.414
x(t)
xA(n)
FIGURE 8.13  Simulated impulse response of second-order system with marginally stable Euler integrator.
Simulated impulse responses of second-order
system, ζ = 0.707, (ω nT)max = 2ζ = 1.414
ωnT = 0.01
x(t)
xA(n)
x(t)
xA(n)
ωnT = 0.3536
ωnT = 0.7071
x(t)
xA(n)
x(t)
xA(n)
ωnT = 1.0607
t
t
–4
–1
0
1
2
3
4
5
–1
0
1
2
3
4
5
–1
0
1
2
3
4
5
–2
0
2
4
6
8
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
0
0.2
0.4
0.6
0.8
1
FIGURE 8.12  Continuous-time and simulated second-order system impulse responses using explicit 
Euler integration with different values for parameter ωnT.

699
Advanced Numerical Integration
In polar form, the frequency response functions are expressed as
	
H j
H j
H j
j
(
)
(
) e
where
Arg[ (
)]
ω
ω
φ
ω
φ
=
=
|
|
,
	
(8.62)
	
H
H
H
j T
j T
j
j T
(e
)
(e
e
where
Arg[ (e
ω
ω
φ
ω
φ
=
=
|
)|
,
)]
∗
∗
	
(8.63)
Substitution of Equations 8.62 and 8.63 into Equation 8.61 yields
	
e
e
e
H
j T
j
j
H
H j
=
−
(e
)
(
)
*
ω
φ
φ
ω
1
	
(8.64)
	
=
−
−
H
H j
j T
j
(e
)
(
)
( *
)
ω
φ
φ
ω
e
1
	
(8.65)
Approximating e j(φ*−φ) in a first-order Taylor Series expansion, that is,
	
e
*
j
j
( *
)
(
)
φ
φ
φ
φ
−
≈+
−
1
	
(8.66)
	
⇒
≈
+
−
−
e
[1
*
H
j T
H
H j
j
(e
)
(
)
(
)
ω
ω
φ
φ
1
	
(8.67)
	
⇒
≈
+
−
−
e
*
H
j T
j T
H
H j
H
H j
j
(e
)
(
)
(e
)
(
)
(
)
ω
ω
ω
ω
φ
φ
1
	
(8.68)
When the simulation is reasonably accurate, H(ejωT) ≈ H(jω) over a range of frequencies and the 
term (|H(ejωT)|)/(|H(jω)|)j(φ* − φ) can be approximated by j(φ* − φ) (Howe 1986).
The final expression for eH is therefore
	
e
*
H
j T
H
H j
j
≈
−+
−
(e
)
(
)
(
)
ω
ω
φ
φ
1
	
(8.69)
Comparison of Equations 8.61 and 8.69 reveals
	
eM
H
j T
j T
H
H j
H
H
=
=
−














≈
Re(e )
Re
(e
)
(
)
(e
)
(
ω
ω
ω
1
jω) −1
	
(8.70)
	
e
*
A
H
j T
H
H j
=
=
−














≈
−
Im(e )
Im
(e
)
(
)
ω
ω
φ
φ
1
	
(8.71)
From Equation 8.70, eM, the real part of eH (the fractional error in discrete-time transfer function), is 
approximately equal to the fractional error in the discrete-time transfer function gain. Furthermore, 
eA, the imaginary part of eH, is approximately equal to the phase error of H(e jωT).

700
Simulation of Dynamic Systems with MATLAB® and Simulink®
Consider the case of a continuous-time integrator approximated by explicit Euler integration 
with step size T. Setting λ = 0 in Equation 8.4 or referring to Equation 4.465, the z-domain transfer 
function is
	
H z
T
z
( ) =
−1 	
(8.72)
Substituting expressions for H(ejωT) and H(jω) in the definition of eH gives
	
e
(e
)
H
j T
T
j
=
−
−
/
/
ω
ω
1
1
1
	
(8.73)
	
=
−
+
−
j T
j T
j T
ω
ω
ω
e
e
1
1
	
(8.74)
	
= −
+
−
−+
1
1
cos
(
sin
)
cos
sin
ω
ω
ω
ω
ω
T
j
T
T
T
j
T
	
(8.75)
Rationalizing Equation 8.75, that is, multiplying numerator and denominator by cos ωT − 1 − j 
sin ωT, and simplifying lead to
	
e
e
e
H
M
A
j
T
T
T
j
T
=
+
=
−
−+
−






ω
ω
ω
sin
(
cos
)
2 1
1
2
ω
	
(8.76)
From Equation 8.70, an approximation for the fractional gain error in H(ejωT) is
	
H
H j
T
T
T
j T
M
(e
)
(
)
sin
(
cos
)
ω
ω
ω
ω
ω
−≈
=
−
−
1
2 1
1
e
	
(8.77)
and from Equation 8.71, the approximation for the phase error in H(ejωT) is
	
Arg
Arg
e
[
(e
)]
[
(
)]
H
H j
T
j T
A
ω
ω
ω
−
≈
= −2 	
(8.78)
Exact expressions for the fractional gain error and phase error for the explicit Euler integrator are 
(see Exercise 8.7)
	
Fractional gain error =
−=
−
−
H
H j
T
T
j T
(e
)
(
)
[ (
cos
)] /
ω
ω
ω
ω
1
2 1
1
1 2
	
(8.79)
	
Phase error
Arg
Arg
=
−
=−
−



−
[
(e
)]
[
(
)]
tan
sin
cos
H
H j
T
T
j T
ω
ω
ω
ω
1
1


−−






π
2 	
(8.80)
Figure 8.14 contains graphs of the exact and approximate expressions for the fractional error in 
gain for 0 ≤ ωT ≤ 1 rad. Note that eM is a good approximation to the fractional gain error in H(ejωT) 

701
Advanced Numerical Integration
provided ωT 1. An asymptotic approximation for eM, which holds for ωT 1, can be obtained by 
replacing sin ωT and cos ωT in Equation 8.77 with the first two nonzero terms in the Taylor Series 
expansions,
	
sin
cos
ω
ω
ω
ω
ω
T
T
T
T
T
≈
−
≈−
(
)
!
,
(
)
!
3
2
3
1
2
	
(8.81)
eventually leading to eM ≈ 0, ωT 1 confirmed by the graph of eM in Figure 8.14.
The phase angle plots for the continuous-time integrator and explicit Euler integrator are shown 
in Figure 8.15. The top graph shows the constant phase angle −π/2 rad for the continuous-time 
0
–0.08
–0.06
–0.04
–0.02
Fractional error gain of H(ejωT)
0
0.02
0.04
0.1
0.2
0.3
0.4
Approximate and exact fractional error
in gain of H(ejωT), explict Euler integration
0.5
eM (approximate)
Exact
0.6
0.7
0.8
0.9
1
ωT (rad)
FIGURE 8.14  Approximate and exact fractional error in discrete-time transfer function gain using explicit 
Euler integration.
0
–0.6
–0.4
–0.2
–2
–1.8
–1.6
–1.4
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
ωT
Approximate and exact error in phase angle of H(ejωT)
Phase angle of continuous-time integrator and explicit Euler integrator
Phase angle (rad)
Phase error (rad)
Arg[H(ejωT)]
Arg[H(jω)] = –π/2
eA (approximate)
Exact
FIGURE 8.15  Phase angle plots for continuous-time and explicit Euler integrator.

702
Simulation of Dynamic Systems with MATLAB® and Simulink®
integrator along with the phase angle of the discrete-time transfer function given in Equation 8.72. 
The lower graph shows eA in Equation 8.78 and equally spaced points computed from the exact 
expression for the phase error in Equation 8.80. The linear approximation eA is virtually identical to 
the exact expression for the phase error.
An asymptotic expression for H(ejωT) can be derived starting with Equation 8.72.
	
H
T
T
j T
j T
j T
j T
j T
(e
)
[
((
)
!)
((
)
!)
]
ω
ω
ω
ω
ω
=
−=
+
+
+
+
−
e
/
/
1
1
2
3
1
2
3

	
(8.82)
Truncating the power series for ejωT after the quadratic term gives
	
H
T
j T
j T
T
j T
(e
)
(
)
,
ω
ω
ω
ω
≈
+
2 2
1
/

	
(8.83)
	
≈
+
1
1
2
1
j
T
j T
T
ω
ω
ω
(
) ,
/

	
(8.84)
The frequency response function of the continuous-time integrator is H(jω) = 1/jω. The second term
	
1
1
2
1
1
2 2 1 2
2
1
+
=
+
−
j T
T
j
T
ω
ω
ω
/
[
(
/ ) ] /
tan
(
/ )
e
	
(8.85)
	
≈
−
e
j T
ω / ,
2
ωΤ 1	
(8.86)
	
⇒
≈
−
H
H j
T
j T
j T
(e
)
(
)e
,
1
/2
ω
ω
ω
ω
	
(8.87)
implying that the asymptotic behavior (ωT 1) of the explicit Euler integrator is that of a pure 
continuous-time integrator with an additional delay of −ωT/2 rad.
To illustrate Equation 8.87, a sine wave u(t) at a frequency of ω rad/s is input to an integrator 
shown in Figure 8.16. The signal u(t) is sampled every T s, and the resulting discrete-time signal is 
input to an explicit Euler integrator updating at 1/T Hz.
The top half of Figure 8.17 shows the sinusoidal input u(t) = sin 2t, the explicit Euler output 
xA(n), n = 0, 5, 10, … when the step size T = 0.025 s, and the continuous-time output x(t). The 
parameter ωT = 2(0.025) = 0.05 rad is small enough for the asymptotic formula in Equation 8.87 to 
accurately predict the characteristics of the discrete-time output xA(n). According to Equation 8.87, 
the steady-state amplitudes of xA(n) and x(t) are equal for all input frequencies provided ωT 1. 
The amplitude is
FIGURE 8.16  Continuous- and discrete-time integration of a sinusoidal input.

703
Advanced Numerical Integration
	
|
( )|
| ( )|
|
(
)| | ( )|
x
n
x t
H j
u t
j
A
=
=
⋅
=
⋅=
=
ω
ω
ω
1
1
1
1
2 	
(8.88)
easily verified by looking at the plots of xA(n) and x(t) in the top half of Figure 8.17.
The asymptotic approximation for H(ejωT) in Equation 8.87 also predicts a delay of ωT/2 rad in 
xA(n) relative to the continuous-time output x(t). The time delay can be estimated by zooming in on 
the responses in the top half of Figure 8.17.
Alternatively, the time delay can be determined by finding the time between occurrences of 
equal values of xA(n) and x(t). For example, at t = 4 s, the discrete-time variable n = 4/0.025 = 160 
and from M-file “Ch8_Fig8_17.m,” xA(160) = 0.05603. Setting x(t0) = xA(160) = 0.5603 and solv­
ing for t0.
	
x t
t
xA
( )
(
cos
)
(
)
.
0
0
1 1
160
0 5603
=
−
=
=
ω
ω
	
(8.89)
	
t0
1
1
2
1
2 0 5603
2
3 9874
=
−
+
=
−
cos [
( .
)]
.
π
ω
s 
	
(8.90)
The simulated response xA(n) is lagging the output x(t) by 4 − 3.9874 = 0.0126 s, in close agree­
ment with the predicted value of T/2 = 0.0125 s.
The lower half of Figure 8.17 illustrates the case where ω = 2 rad/s, T = 0.25 s, and the asymp­
totic approximation in Equation 8.87 based on ωT 1 no longer applies. From Equation 8.79, the 
fractional gain error in H(ejωT) when ωT = 0.5 rad is 0.010493 (see Figure 8.14). Solving for |H(ejωT) 
in Equation 8.79,
1
–1
–0.5
0
0.5
1
–1
–0.5
0
0.5
1
1.5
2
2.5
3
t (s)
u(t)
u(t)
x(t)
x(t)
xA(n)
xA(n)
ωT = 0.5
ωT = 0.5
3.5
4
4.5
5
5.5
6
0.5
0
1
1.5
2
2.5
3
3.5
4
4.5
5
5.5
6
0.5
0
Input u(t) = sin 2t
output: xA(n), explicit Euler integrator (T = 0.025 s), output: x(t)
Input u(t) = sin 2t
output: xA(n), explicit Euler integrator (T = 0.25 s), output: x(t)
FIGURE 8.17  Explicit Euler and continuous-time integrator outputs (ωT = 0.05 rad).

704
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
|
(e
)|
(
) |
(
)|
(
.
)
H
H j
j
j T
ω
ω
=
+
=
+
=
1
1
0 010493
1
2
0
fractionalgainerror
.505247
	
(8.91)
Since |u(t)| = 1, the predicted peak-to-peak swing in xA(n) is 2 × 0.505247 = 1.010494. The dis­
crete-time response xA(n) was generated for different lengths of time (instead of two periods as in 
Figure 8.17) to capture the peak-to-peak swing in xA(n) using the MATLAB statement “max (xA) 
–min (xA)” in “Ch8_Fig8_17.m.” The results are tabulated in Table 8.3.
The time delay was computed in the same manner used for the case when ωT = 0.05 rad. The 
results are n = 4/0.25 = 16, xA(16) = 0.4371, x(3.8639) = 0.4371 and the time delay is equal to 
4 − 3.8639 = 0.1361 s. The asymptotic formula in Equation 8.87 for H(ejωT) underestimates the time 
delay, that is, T/2 = 0.125 s.
8.2.4  Asymptotic Formulas for Multistep Integration Methods
The same steps used to obtain the asymptotic formula in Equation 8.84 for the explicit Euler inte­
grator are applicable to the multistep integration formulas introduced in Section 6.4. For example, 
simulating the response x(t) of a continuous-time integrator subject to input u(t), using a second-
order explicit Adams–Bashforth (AB-2) numerical integrator, reduces to solve the difference 
equation
	
x
n
x
n
T
u n
u n
A
A
(
)
( )
[
( )
(
)]
+
=
+
−
−
1
2 3
1
	
(8.92)
z-Transforming Equation 8.92 and solving for the z-domain transfer function give
	
X z
U z
H z
T
z
z
I
( )
( )
( )
=
=
−
−






−
2
3
1
1
	
(8.93)
where the subscript I in HI(z) reminds us that we are dealing with the z-domain transfer function 
approximation of a continuous-time integrator. Replacing z by ejωT in Equation 8.93 produces the 
discrete-time system frequency response function
	
H
T
I
j T
j T
j T
(e
)
ω
ω
ω
=
−
−






−
−
2
3
1
e
e
	
(8.94)
TABLE 8.3
Measured Peak-to-Peak Swing in xA(n) 
for Different Time Periods
Duration of Simulation (s)
Max(xA) – Min(xA)
P = 2π/ω = π
1.010481
25P = 25π
1.010491
50P = 50π
1.010491
100P = 100π
1.010492

705
Advanced Numerical Integration
Approximating the complex exponentials ejωT and e−jωT by power series up to the third-order term 
generates the asymptotic formula (see Exercise 8.10)
	
H
j
T
T
I
j T
(
)
(
)(
)
,
e
1 
ω
ω
ω
ω
≈
−






1
1
1
5 12
2

	
(8.95)
According to the asymptotic approximation in Equation 8.95, the frequency response of an AB-2 
integrator is identical in phase to that of an ideal continuous-time integrator while the gain is off by 
the factor in parenthesis in Equation 8.95. Hence, the phase error in the asymptotic approximation 
of HI(ejωT) is zero and the fractional gain error is
	
H
H j
T
I
j T
(e
)
(
)
(
)(
)
ω
ω
ω
−≈
−





−
1
1
1
5 12
1
2
	
(8.96)
	
≈−
(
)(
)
(
)(
)
5 12
1
5 12
2
2
ω
ω
T
T
	
(8.97)
	
≈(
)(
) ,
|
|
5 12
2
/
1
ω
ω
T
T 	
(8.98)
Equations 8.84 and 8.95 are special cases of a general formula (Howe 1986, 1995)
	
H
j
j T
T
I
j T
I
k
(
)
(
)
,
e
e
1
ω
ω
ω
ω
≈
+






1
1
1

	
(8.99)
which holds for the multistep integrators in Section 6.4, namely, explicit Adams–Bashforth, implicit 
Adams–Moulton, and predictor–correctors. Numerical values for the error coefficient eI depend on 
the order k and type of integrator. A table of values for low-order numerical integrators is given in 
Table 8.4. The error coefficients are identical to the constants in the local truncation error term for 
each integrator (see Table 6.9).
Frequency responses for a continuous-time integrator and AB-1 (explicit Euler) through AB-4 
numerical integrators are shown in Figure 8.18a through d. Also shown are the frequency responses 
for the same AB integrators based on the asymptotic formula in Equation 8.99 where eI, k = 1, 2, 3, 
4 are given in Table 8.4. The plots are generated in M-file “Ch8_Fig8_18abcd.m.”
Figure 8.18a shows close agreement between the exact and asymptotic Euler magnitude functions 
up to ωT = ω(1) ≈ 0.5 rad. Beyond that, the two plots begin to deviate from the continuous-time 
integrator magnitude function with the exact Euler the better approximation. Hence, for ωT 1, the 
Euler integrator introduces essentially zero gain error. The exact and asymptotic Euler phase plots 
also agree up to approximately ωT = 0.5 rad. However, Figure 8.18 shows the Euler integrator intro­
ducing phase error with respect to the continuous-time integrator beginning around ωT = 0.04 rad. 
Significant phase error in the neighborhood of 30° is present for ωT = 1 rad.
The AB-2 integrator and its asymptotic approximation are both quite accurate in the range of 
frequencies for which ωT < 0.4 rad. Beyond that, the asymptotic approximation of the magni­
tude begins to deviate from both the continuous-time and exact AB-2 magnitude functions. From 
Equation 8.99 with k = 2, the asymptotic curve approaches infinity at the point where
	
1
e (
)
e
(
)
rad/s
+
= +
= −
=
⇒
=
I
k
I
j T
j
T
ω
ω
ω
ω
1
1
5
12
0
1 5492
2
2
2
( )
.
	
(8.100)

706
Simulation of Dynamic Systems with MATLAB® and Simulink®
TABLE 8.4
Error Coefficients in Asymptotic Formula in Equation 8.99 for kth 
Order, z-Domain Frequency Response Functions of Numerical 
Integrators
Numerical Integrator
Equation
Order k
Error Coefficient eI
AB-1 (explicit Euler)
1
1/2
AB-2
6.180
2
5/12
AB-3
6.186
3
3/8
AB-4
6.187
4
251/720
AB-5
6.188
5
475/1440
AM-2 (trapezoidal)
6.191
2
−1/12
AM-3
6.192
3
−1/24
AM-4
6.193
4
−19/720
AM-5
6.194
5
−27/1440
AB-2 predictor
6.204
2a
−1/12a
AM-2 corrector
6.205
AB-3 predictor
6.206
3b
−1/24b
AM-3 corrector
6.207
AB-4 predictor
6.208
4c
−19/720c
AM-4 corrector
6.209
a	 AB-2/AM-2.
b	 AB-3/AM-3.
c	 AB-4/AM-4.
Frequency response of continuous and Euler (T = 1 s) integrators
(a)
Euler
Euler
Continuous
Continuous
Euler (asymptotic)
Euler (asymptotic)
40
30
20
10
Magnitude (db)
Phase (deg)
0
–10
–20
–80
–100
–120
–140
–160
–180
10–2
10–1
ω (rad/s)
100
10–2
10–1
ω (rad/s)
100
FIGURE 8.18  Exact and asymptotic frequency response of (a) AB-1 (Euler) integrator.
(Continued)

707
Advanced Numerical Integration
Frequency response of continuous and AB-2 (T = 1 s) integrators
AB-2
Continuous
AB-2
Continuous
AB-2 (asymptotic)
AB-2 (asymptotic)
40
30
20
10
Magnitude (db)
Phase (deg)
0
–10
–20
–80
–100
–120
–140
–160
–180
10–1
ω (rad/s)
100
10–1
ω (rad/s)
100
Frequency response of continuous and AB-3 (T = 1 s) integrators
AB-3
Continuous
AB-3
Continuous
AB-3 (asymptotic)
AB-3 (asymptotic)
20
10
Magnitude (db)
Phase (deg)
0
–10
–20
0
–45
–90
–135
–180
10–1
ω (rad/s)
100
10–1
ω (rad/s)
100
Frequency response of continuous and AB-4 (T = 1 s) integrators
AB-4
Continuous
AB-4
Continuous
AB-4 (asymptotic)
AB-4 (asymptotic)
20
10
Magnitude (db)
Phase (deg)
0
–10
–20
–45
–90
–135
–180
10–1
ω (rad/s)
100
10–1
ω (rad/s)
100
(b)
(c)
(d)
FIGURE 8.18 (Continued)  Exact and asymptotic frequency response of (b) AB-2 integrator, (c) AB-3 
­integrator, and (d) AB-4 integrator.

708
Simulation of Dynamic Systems with MATLAB® and Simulink®
The asymptotic phase plot is exact up to ω = 1.5492 rad/s where it increases from −90° to 90° 
due to the change in sign of the denominator. It follows from Equation 8.99 that the asymptotic 
phase plots for k = 2, 6, 10, … are similar to the one in Figure 8.18b and the asymptotic plots are 
exact, that is, arg{H(ejωT)} = −180 deg for k = 4, 8, 12, ….
8.2.5  Simulation of Linear System with Transfer Function H(s)
In addition to a simple continuous-time integrator, it is possible to approximate the discrete-time 
frequency response of higher-order linear systems simulated using numerical integrators like the 
ones represented in Table 8.4. We learned in Section 4.7 that H(z) resulting from digital simulation 
of a continuous-time system with transfer function H(s) is obtained by substituting 1/HI(z) for s, 
where HI(z) is the z-domain transfer function of the numerical integrator.
Consider the first-order system governed by
	
d
d
x
t
x
Ku
=
+
λ
	
(8.101)
similar to Equation 8.1 except for the gain K on the right-hand side of the equation. Simulation of 
the system using a numerical integrator with transfer function HI(z) results in a discrete-time system 
with frequency response function
	
H
H s
K
s
j T
s
H
s
H
I
j T
I
j T
(e
)
( )
/
(e
)
/
(e
)
ω
ω
ω
=
=
−
←
←
1
1
λ
	
(8.102)
	
= −
KH
H
I
j T
I
j T
(e
)
(e
)
ω
ω
1
λ
	
(8.103)
An approximate expression for H(ejωT) is obtained using the asymptotic approximation for H(ejωT) 
in Equation 8.99.
	
H
K
j
j T
j
j T
T
j T
I
k
I
k
(e
)
[
(
) ]
[
(
) ]
,
ω
ω
ω
λ
ω
ω
ω
≈
+
(
)
−
+
(
)
1
1
1
1
1
/
e
e
1 

	
(8.104)
	
≈
+
−
K
j
j T
T
I
k
ω
ω
ω
[
(
) ]
,
1
e
1
λ

	
(8.105)
Using trapezoidal integration, k = 2, eI = −1/12 from Table 8.4,
	
H
K
j
T
T
j T
(e
)
[
]
,
ω
ω
ω
λ
ω
≈
+
−
1
1 12
2
(
)(
)
1

	
(8.106)
The exact expression for H(ejωT) is obtained from
	
H z
H s
K
s
s
H
z
s
T
z
z
I
( )
( )
/
( )
=
=
−
←
←
−
+






1
2
1
1
λ
	
(8.107)

709
Advanced Numerical Integration
	
⇒
=
−
+
−
←
H
K
T
z
z
j T
z
j T
(e
)
((
)(
) (
))
e
ω
λ
ω
2
1
1
/
/
	
(8.108)
	
=
+
−
−
+
KT
T
T
j T
j T
(e
)
(
)e
(
)
ω
ω
λ
λ
1
2
2
	
(8.109)
The use of trapezoidal integration for digital simulation of linear continuous-time systems is referred 
to as Tustin’s method.
EXAMPLE 8.3
The capacitor in the circuit shown in Figure 8.19 is initially uncharged when the switch closes.
	
a.	Find the discrete-time transfer function H(z) = VC(z)/E0(z) using Tustin’s method.
	
b.	Find the asymptotic form of the discrete-time frequency response function.
	
c.	Find the exact expression for the discrete-time frequency response function.
	
d.	Graph the frequency response function of the continuous-time system and the discrete-
time frequency response functions obtained in parts (b) and (c) if the time constant of the 
circuit is 25 µs and the integration step size is 1 µs.
	
e.	Compute the gain and phase errors based on the asymptotic expression for H(ejωT) when 
the input is a sinusoidal input at 1 × 105 Hz.
	
a.	The differential equation of the circuit is
	
τ d
dt v t
v t
t
RC
c
c
( )
( )
e ( ),
(
)
+
=
=
0
τ
	
(8.110)
	
	 Laplace transforming Equation 8.110 leads to the transfer function
	
H s
V s
E s
s
s
c
( )
( )
( )
=
=
+ =
+
0
1
1
1
1
τ
τ
τ
/
/
	
(8.111)
	
⇒
=
=
+
←
−
+






H z
V z
E z
s
c
s
T
z
z
( )
( )
( )
0
2
1
1
1
1
τ
	
(8.112)
	
=
+
+
+
−
z
T z
T
1
1
2
1
[
(
)]
(
)
τ/
2 /
τ
	
(8.113)
	
b.	The transfer function for the first-order system in Equation 8.101 is identical to H(s) in 
Equation 8.111 when λ = −1/τ and. K = −1/τ. Making those substitutions in Equation 
8.106 gives the asymptotic formula for H(ejωt).
FIGURE 8.19  RC circuit for digital simulation.

710
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
H
j
T
T
j T
(e
)
[
]
(
) ,
ω
τ
ω
ω
τ
ω
≈
−−
1
1
112
1
2
/
( /
)(
)
/
1
+

	
(8.114)
	
≈
+
1
1
112
1
2
j
T
T
ωτ
ω
ω
[
]
,
+( /
)(
)
1

	
(8.115)
	
c.	The exact expression for H(ejωT) is from Equation 8.109,
	
H
T
T
T
j T
j T
j T
(e
)
(
)(e
)
e
(
)
ω
ω
ω
τ
τ
=
+
−
−
+
−
/
(2
)
/
1
2
1
λ
λ
λ=
	
(8.116)
	
=
+
−
−
(
)(e
)
(
)| e
[
(
)]
T
T
T
j T
j T
/
[2
/
/
τ
τ
τ
ω
ω
1
2
+
	
(8.117)
	
d.	The MATLAB M-file “Ch8_Ex8_3.m” computes the magnitude and phase of
	
H j
s
j
s
j
(
)
ω
ω
ω
=
+
=
+
←
1
1
1
1
τ
τ 	
(8.118)
	
	 The magnitude and phase of H(ejωT) using the asymptotic and exact formulas in Equations 
8.115 and 8.117 are computed. The gain and phase plots are shown in Figure 8.20.
	
e.	At ω = 1 × 105 Hz × 2π rad/cycle = 2π × 105 rad/s,
	
H j
j
j
j
(
)
(
)
.
(
.
)
2
10
1
1
2
10 25 10
1
1
5
0 0635
5
5
6
1 5072
π
π
π
×
=
+
×
×
=
+
=
−
−
 e
	
(8.119)
	
H
j
j
(
)
(
)[
(
)(
) ]
e
/
2
10
10
5
6
5
6 2
5
6
1
2
10 25 10
1
112 2
10
10
π
π
π
×
×
−
−
−
≈
×
×
+
×
×
+1	
(8.120)
	
≈
−
0 0615
1 5092
.
(
.
)
e j
	
(8.121)
Gain of continuous-time and discrete-time frequency response functions
0
Trapezoidal integration of
first-order system
Continuous
Continuous
ω (rad/s)
Discrete (asymptotic)
Discrete (asymptotic)
Discrete (exact)
Discrete (exact)
H (s) = 1/(τs + 1), τ = 25 µs
T = 1 µs
–20
Gain (db)
Phase (deg)
–40
–60
0
–15
–30
–45
–60
–75
–90
103
104
106
105
103
104
106
105
Phase of continuous-time and discrete-time frequency response functions
FIGURE 8.20  Continuous-and discrete-time (exact and asymptotic) bode plots for first-order system using 
trapezoidal integration.

711
Advanced Numerical Integration
The fractional gain error and phase errors in the discrete-time frequency response function based 
on the asymptotic approximation for H(ejωT) in Equation 8.115 at ω = 1 × 105 Hz are
	
Fractional gain error
e
≈
×
−
≈
×
×
−
|
(
)|
|
(
)|
.
H
H j
j2
10
10
5
5
6
2
10
1
0 063
π
π
5
0 0615
1
0 0317
.
.
−= −
	
(8.122)
	
Phase error
Arg[
e
]
Arg[
≈
−
×
≈−
−−
×
×
−
H
H j
j
(
)
(
]
.
(
2
10
10
5
5
6
2
10
1 5092
π
π
1 5072
0 002
0 1157
.
)
.
rad(
.
deg)
≈−
−
	
(8.123)
Figure 8.20 shows the asymptotic formula for approximating H(ejωT) is accurate up to approximately 
ωT = 106 rad/s × 10−6 s = 1 rad. The exact and asymptotic discrete-time frequency response func­
tions are close to the continuous-time frequency response function up until frequencies approach­
ing the Nyquist frequency π/T = 106 π rad/s.
For an underdamped second-order system with damping ratio ζ and natural frequency ωn, 
the asymptotic approximation of the discrete-time frequency response function using a kth-order 
numerical integrator with error coefficient eI is obtained in the same manner employed for the 
first-order system, namely,
	
H
s
s
j T
n
n
n s
HI
j T
(e
)
(e
)
ω
ω
ω
ω
ω
=
+
+
←
2
2
2
1
2ζ
/
	
(8.124)
Substituting the asymptotic expression for H(ejωT) in Equation 8.99 into Equation 8.124 results in 
(after simplification) (Howe 1986)
	
H
j T
j
j T
T
j T
n
I
k
n
I
k
(e
)
[
e (
) ]
[
e (
) ],
ω
ω
ω
ω
ω ω
ω
ω
≈
−
+
+
+
1
1
2
2
1
1
2
2
ζ

	
(8.125)
and the fractional error in H(ejωT) is approximated by the asymptotic formula
	
e
/
( /
/
H
j T
I
k
n
n
n
H
H j
j T
j
j
=
−≈
−
−
+
(e
)
(
)
e (
) [(
)
)]
(
)
ω
ω
ω
ω ω
ω ω
ω ω
1
2
1
2
2
2
ζ
ζ( /
ω ω
ω
n
T
)
,
1
	
(8.126)
Rationalizing Equation 8.126 leads to expressions for eM and eA, the real and imaginary compo­
nents of eH, which provide suitable approximations for the fractional gain error and phase error of 
H(ejωT), respectively. The expressions are of the form
	
e
f
k e
T
e
f
k e
T
T
M
M
n
k
A
A
n
I
k
=
=
(
)
ζ ω ω
ω
ζ ω ω
ω
ω
,
, ,
,
,
, ,
,
(
)
(
)(
)
/
/
1
1

	
(8.127)
The functions fM(ζ, ω/ωn, k, eI) and fA(ζ, ω/ωn, k, eI) are further addressed in Exercise 8.13. 
The ­notable feature in Equation 8.127 is the dependence of both error measures on the term (ωT)k, 
emphasizing the importance of choosing the step size T and the integrator order k.
EXERCISES
	8.1	
Repeat Example 8.1 for the case where explicit Euler is used in place of trapezoidal integration.
	8.2	
A second-order system with damping ratio ζ = 0 and natural frequency ωn is simulated using 
trapezoidal integration with step size T.
	
a.	 Plot the equivalent continuous-time system damping ratio ζ* as a function of the 
­parameter ωnT for 0 ≤ ωnT ≤ 1.

712
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
b.	 Plot the equivalent continuous-time system natural frequency ωn
* as a function of the con­
tinuous-time system natural frequency ωn for 0 ≤ ωn ≤ 10 rad/s when T = 0.1 s.
	
c.	 Repeat parts (a) and (b) for ζ = 0.1 and 1.
	
d.	 What effect does changing the value of T have on the equivalent continuous-time system 
damping ratio and natural frequency?
	8.3	
Consider the overdamped continuous-time second-order system with transfer function
	
H s
s
s
( )
(
)(
)
=
+
+
1
1
1
1
2
τ
τ
	
	
	 shown in Figure E8.3.
	
a.	 Decompose H(s) into the sum of two first-order transfer functions H(s) = H1(s) + H2(s) 
where H1(s) = A1/(τ1s + 1) and H2(s) = A2/(τ2s + 1) (see above figure) and express the 
constants A1 and A2 in terms of the time constants τ1 and τ2.
	
b.	 The equivalent realizations of the same second-order system are simulated using explicit 
Euler integration with step size T. Find the fractional error in the frequency response 
functions H(ejωT), H1(ejωT), and H2(ejωT). Leave your answers in terms of τ1, τ2, and T.
	
c.	 Resolve the fractional errors into real and imaginary components, that is,
	
e
e
e
e
e
e
e
H
j T
M
A
H
j T
M
A
H
H
H j
j
H
H
j
j
=
−=
+
=
−=
+
=
(e
)
(
)
,
(e
)
(
)
ω
ω
ω
ω
1
1
1
1
1
2
1
1
H
H
j
j
j T
M
A
2
2
1
2
2
(e
)
(
)
ω
ω
−=
+
e
e
	
	
	
For τ1 = 1 s, τ2 = 10 s, and T = 0.05 s, plot eM, eM1, eM2 vs. ωT on a single graph and eA, 
eA1, eA2, vs. ωT on a different graph. Comment on the results.
	
d.	 Find exact expressions for the fractional gain error in H(ejωT), H1(ejωT), and H2(ejωT). Plot 
the fractional gain error in H(ejωT) vs. ωT and eM vs. ωT on the same graph. Repeat for 
H1(ejωT) and eM1 and then for H2(ejωT) and eM2.
	
e.	 Find exact expressions for the phase error in H(ejωT), H1(ejωT), and H2(ejωT). Plot the phase 
error in H(ejωT) vs. ωT and eA vs. ωT on the same graph. Repeat for H1(ejωT) and eA1 and then 
for H2(ejωT) and eA2.
	
f.	 Simulate the two configurations shown in Figure E8.3 when u(t) = sin 50t, t ≥ 0 using an 
explicit Euler integrator with step size T = 0.01 s. Plot the continuous-time input and out­
put and the simulated response on the same graph for each configuration. Do the results 
agree with the graphs obtained in parts (d) and (e)?
	8.4	
For AB-2 integration,
	
a.	 Find the discrete-time frequency response function H1(ejωT).
	
b.	 Find expressions for the exact and asymptotic fractional gain and phase errors.
	
c.	 Plot the results over a suitable range of values for ωT.
FIGURE E8.3

713
Advanced Numerical Integration
	 8.5	 Generate a new table and figure similar to Table 8.2 and Figure 8.9 where a second-order sys­
tem with damping ratio ζ and natural frequency ωn is simulated using numerical integration 
for the following cases:
Z
ωn (rad/s)
Numerical Integrator
0
50
Explicit Euler
0
50
Implicit Euler
0
50
Trapezoidal
0.1
50
Implicit Euler
0.1
50
Trapezoidal
0.707
1
Explicit Euler
0.707
1
Implicit Euler
0.707
1
Explicit Euler
2
0.01
Explicit Euler
2
0.01
Implicit Euler
2
0.01
Trapezoidal
	 8.6	 For a second-order system described by
	


x
x
x
K
u
n
n
n
+
+
=
2
2
2
ζω
ω
ω
	
	
a.	 Show that the unit impulse response is identical to the response of the autonomous system 
(u = 0, t ≥ 0) with initial conditions x(0) = 0, x
K
n
( )
.
0
2
=
ω
	
b.	 Show that the initial conditions for the difference equation of the discrete-time system 
resulting from the use of explicit Euler integration are x(0) = 0 and x
K
T
n
(
)
.
−
=−
1
2
ω
	
c.	 Suppose the parameter values are ζ = 0.5, ωn = 10, and K = 1. Simulate the continu­
ous-time step and impulse responses using explicit Euler integration with ωnT = 0.05. 
Compare the simulated and analytical solutions.
	8.7	
Derive the exact expressions for the fractional gain error and phase error in the discrete-time 
transfer function H(ejωT) using explicit Euler integration given in Equations 8.79 and 8.80.
	8.8	
Show that the asymptotic expression for the fractional error in the discrete-time transfer func­
tion H(ejωT) resulting from explicit Euler integration of the first-order system x
x
u
=
+
λ
 is 
given by
	
e
2
H
j T
H
H j
T
j
T
T
=
−≈
+
−
+
(e
)
(
)
(
)
(
)
,
ω
ω
ωλ
ω
λ
ω
ω
ω
λ
ω
ω
1
2
2
1
2
2
2
2

	
	
	 What does the system reduce to when λ = 0? Comment on what happens to the real and 
imaginary components.
	8.9	
Verify the curves plotted in Figures 8.14 and 8.15 for the fractional gain and phase errors 
based on explicit Euler integration by using the MATLAB functions “real,” “imag,” “abs,” 
and “angle,” that is,
	
Fractional gain error
e
Re(e )
e
≈
=
=
−








M
H
j T
R
H
H j
(e
)
(
)
ω
ω
1
=
−−






Re
j T
j T
ω
ω
e
1
1
	
	
Fractional gain error
e
=
−=
−
−
|
(e
)|
|
(
)|
H
H j
T
j T
j T
ω
ω
ω
ω
1
1
1
	

714
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
Phase error
e
Im(e )
e
≈
=
=
−








=
A
H
j T
H
H j
j T
Im
(e
)
(
)
Im
ω
ω
ω
1
j T
ω −−






1
1
	
	
Phase error
Arg[
Arg[
Arg[
=
−
=−
−
−−




H
H j
j T
j T
(e
)]
(
)]
e
)]
ω
ω
ω
π
1
2
	
	8.10	 Derive the asymptotic formula for H1(ejωT) in Equation 8.95 starting with the exact expression 
for the discrete-time frequency response function in Equation 8.94.
	8.11	 Using trapezoidal integration to simulate the first-order system in Equation 8.1,
	
a.	 Find the fractional error in transfer function eH.
	
	
Hint: Start with Equation 8.109.
	
b.	 Find the real and imaginary parts of eH, that is, eH = eM + jeA.
	
c.	 Compare eM and eA with the exact expressions for the fractional gain and phase errors.
	8.12	 For simulation of the first-order system x
x
u
=
+
λ
 using a kth-order numerical integrator with 
error coefficient eI
	
a.	 Show that the asymptotic expression for the fractional error in transfer function is given by
	
e
e
H
j T
I
k
H
H j
j
j T
j
T
=
−=
−
(e
)
(
)
(
) ,
ω
ω
ω
ω
ω
λ
ω
1
1

	
	
b.	 Derive expressions for eM and eA when the order k is odd and different expressions when 
k is even.
	8.13	 Derive the asymptotic expressions for H(ejωT) in Equation 8.125 and eH in Equation 8.126. 
Find the functions fM (ζ, ω/ωn, k, eI) and fA(ζ, ω/ωn k, eI) in Equation 8.127 when the numerical 
integrator order k is odd and even.
	8.14	 Show that the characteristic root error resulting from simulation of a first-order continuous­
time system with characteristic root λ is approximated by
	
e
*
e
λ
λ
λ
λ
λ
=
−≈−
1
1
I
k
T
T
(
) ,
|
|
	
	
	 where eI and k are the error coefficient and order of the numerical integrator, respectively.
8.3  STABILITY OF NUMERICAL INTEGRATORS
We have seen a number of examples where digital simulation of a stable continuous-time system 
with a bounded input (or even no input with nonzero initial conditions) produced a sequence of 
numbers that grow without bound as time increases. The unstable conditions can be attributed 
to a combination of the numerical integrator and integration step size (for fixed-step integrators). 
Stability of fixed-step numerical integrators is reflected in the natural dynamics of the discrete-time 
system used to approximate the continuous-time system. The family of explicit multistep Adams–
Bashforth integrators introduced in Section 6.4 is now examined in some detail.
8.3.1  Adams–Bashforth Numerical Integrators
Difference equations resulting from the application of second-order and higher Adams–Bashforth 
integration are higher-order than the LTI continuous-time systems being simulated. For example, a 
first-order continuous-time system with a pole at s = λ simulated using AB-2 integration produces a 
second-order discrete-time system with discrete-time input u(n) and output x(n), previously referred 
to as xA(n). The z-domain transfer function is

715
Advanced Numerical Integration
	
H z
X z
U z
s
s
H
z
( )
( )
( )
( )
=
=
−
←
1
1
1
λ
	
(8.128)
	
=
−
←
−
−
1
1
3
1 2
1
s
s
T
z
z z
λ
(
)/
(
) 	
(8.129)
	
=
−
−
+
+
(
)(
)
(
(
)
)
(
)
T
z
z
T z
T
/
/
/
2 3
1
1
3 2
1 2
2
λ
λ
	
(8.130)
Note that HI(z) for AB-2 integration is given in Equation 8.93 of the previous section. Multiplying 
numerator and denominator in Equation 8.130 by z−1 followed by inverse z-transformation leads to 
the second-order difference equation
	
x n
T x n
Tx n
T
u n
u u
(
)
( )
(
)
[
( )
(
)]
+
−
+






+
−
=
−
−
1
1
3
2
1
2
1
2 3
1
λ
λ
	
(8.131)
The states x(n) and x(n − 1) are needed to compute the updated state x(n + 1). This is easily 
explained by referring to Figure 6.16. P1(t); the linear interpolating polynomial integrated to gener­
ate x(n + 1) depends on current and previous derivative functions, which in turn are functions of the 
current and previous discrete-time states x(n) and x(n − 1).
The resulting z-domain transfer function in Equation 8.130 has two poles that are the roots of the 
characteristic polynomial in the denominator. The dominant pole for the case when λT 1 corre­
sponds to an equivalent continuous-time system characteristic root λ*, which can be estimated from 
the characteristic root error formula (Howe 1986)
	
e
*
e
λ
λ
λ
λ
λ
=
−
≈−I
k
T
(
)
	
(8.132)
where eI and k are the integrator error coefficient and order, respectively. For AB-2 integration, 
eI = 5/12 and k = 2. Hence,
	
λ
λ
λ
λ
λ
λ
*
e
=
−
≈
−






[
(
) ]
(
) ,
1
1
5
12
1
2
I
k
T
T
T
	
(8.133)
Suppose the continuous-time system pole is λ = −100 and AB-2 integration is used with a step 
size T = 0.0001 s. From Equation 8.133,
	
λ
λ
* ≈−
−
−






≈−
100 1
5
12
100 0 0001
1
99 99583
2
{(
)( .
)} ,
.
T 
	
(8.134)
The exact value of λ* is obtained from
	
λ* = 1
1
T
z
ln
	
(8.135)

716
Simulation of Dynamic Systems with MATLAB® and Simulink®
where z1 is the dominant pole, that is, larger (in magnitude) root of the characteristic equation
	
z
T z
T
z
z
2
2
1
3
2
1
2
0 985
0 005
0
−
+





+
=
−
−
=
λ
λ
.
.
	
(8.136)
The poles are located at z1 = 0.99005, z2 = −0.00505, and the equivalent characteristic root is 
from Equation 8.135
	
λ* =
=−
1
0 0001
0 99005
99 99581
.
ln( .
)
.
	
There is no real equivalent system characteristic root for the extraneous pole z2; however, x(n), 
n = 0, 1, 2, … does include a transient component c2z2
k, which rapidly vanishes to zero leaving the 
dominant component c1z1
k and input mode (if present) terms to accurately track the continuous-time 
system response x(t), t ≥ 0.
Numerical stability of the simulation becomes an issue when the AB-2 integration step size pro­
duces z-plane poles in proximity of the Unit Circle. For a given first-order continuous-time system 
with characteristic root λ < 0, the discrete-time system resulting from AB-2 integration is margin­
ally stable when the dominant pole is located at 1 or −1. From Equation 8.136,
	
z
T
T
T
=
−
+






+
=
⇒
=
1
1
1
3
2
1
1
2
0
0
2
:
( )
( )
λ
λ
λ
	
(8.137)
	
z
T
T
T
=−
−
−
+





−
+
=
⇒
=−
1
1
1
3
2
1
1
2
0
1
2
:
(
)
(
)
λ
λ
λ
	
(8.138)
Combining the above two results imposes the condition for stability, namely,
	
−<
<
⇒
>−
>
⇒
< −
1
0
1
0
1
λ
λ
λ
T
T
T
	
(8.139)
In other words, the AB-2 integration step size T is limited by the time constant τ = −(1/λ) of the 
first-order continuous-time system. Where is the second z-plane pole when λT = 0 and λT = −1?
Second-order systems can be analyzed in the same way by allowing λ to be complex in the case 
of an underdamped second-order system or a pair of distinct real values for an overdamped second-
order system. For example, a stable, second-order system with complex poles located at −7.5 ± j5 
simulated with AB-2 integration using a step size T = 0.1 s generates a stable discrete-time system 
if the two z-plane poles (principal and extraneous) are located inside the Unit Circle. This is easily 
checked by substituting λT = (−7.5 + j5)(0.1) = −0.75 + j0.5 into the characteristic equation,
	
z
T z
T
z
j
z
T
j
2
0 75
0 5
2
1
3
2
1
2
0 125
0 75
−
+





+
=
+
−
−
=−
+
λ
λ
λ
.
.
( .
.
)
0 375
0 25
0
.
.
+
=
j
	
(8.140)
Solution of Equation 8.140 reveals that the poles are located inside the Unit Circle at
	
z
j
e j
1
2 3379
0 6188
0 6418
0 8916
=
+
=
– .
.
.
.
	
	
z
j
e j
2
0 2157
0 4938
0 1082
0 2157
=
+
=
.
.
.
.
	

717
Advanced Numerical Integration
and the discrete-time system is therefore stable. Increasing T eventually causes one of the z-plane 
poles to be on the Unit Circle where the system becomes marginally stable.
A closed locus of λT points can be identified in the complex plane with the property that all 
interior points produce stable discrete-time systems using AB-2 integration. The locus of points is 
called a stability boundary and the interior points comprise the stability region. There is a different 
stability boundary for each AB integrator.
The starting point for locating the stability boundary is finding H(z), the z-domain transfer func­
tion of the discrete-time system resulting from numerical integration of the stable, continuous-time 
system
	
d
d
x
t
x
u
+
=
<
λ
λ
,
Re( )
0
	
(8.141)
A similar approach to the one used for finding H(z) for AB-2 integration of the continuous-time 
system in Equation 8.141 is employed to find H(z) for different-order AB integrators. For AB-1 
(Euler), AB-3, and AB-4 integration, HI(z) in Equation 8.128 is
	
AB-1
1
1
:
( )
H z
T
z
=
−	
(8.142)
	
AB-3
12
23
16
5
1
1
2
2
:
( )
(
)
H z
T
z
z
z
z
=
−
+
−





	
(8.143)
	
AB-4:
( )
(
)
H z
T
z
z
z
z z
1
3
2
3
24
55
59
37
9
1
=
−
+
−
−





	
(8.144)
Replacing s by 1/H1(z) in H(s) = 1/(s − λ) leads to the z-domain transfer function H(z). For AB-1 
through AB-4 integration, the results are
	
AB-1
1
:
( )
(
)
H z
T
z
T
=
−
+λ
	
(8.145)
	
AB-2:
( )
(
)
(
)
H z
T
z
z
T z
T
=
−
−
+
+
3
1
2
2
3
2
λ
λ 	
(8.146)
	
AB-3
23
16
5
12
12
23
16
5
2
3
2
:
( )
(
)
(
)
H z
T
z
z
z
T z
Tz
T
=
−
+
−
+
+
−
λ
λ
λ
	
(8.147)
	
AB-4:
( )
(
)
(
)
H z
T
z
z
z
z
T z
Tz
Tz
=
−
+
−
−
+
+
−
+
55
59
37
9
24
24
55
59
37
3
2
4
3
2
λ
λ
λ
9λT 	
(8.148)
Note the existence of one, two, and three extraneous z-plane poles in Equations 8.146 through 
8.148. The stability boundaries are obtained by setting z = ejθ in the denominators of Equations 
8.145 through 8.148 and solving for λT. For example, with AB-3 integration, λT is given by
	
λ
θ
θ
θ
θ
T
j
j
j
j
=
−
−






12 5
16
3
2
2
e
e
e
23e
+
	
(8.149)

718
Simulation of Dynamic Systems with MATLAB® and Simulink®
Results for AB-1, AB-2, AB-3, and AB-4 integrators are obtained in the MATLAB M-file 
“Ch8_AB_Stability_Boundaries.m” and shown in Figure 8.21.
Only the top half of each stability boundary is shown since they are symmetric with respect to 
the real axis. Points along the top half of a stability boundary are computed by varying θ from 0 to 
π rad causing ejθ to traverse the top half of the Unit Circle. The lower half is generated by sweeping 
θ from 0 to −π rad.
A note of caution in finding the stability boundaries. The pole moving along the Unit Circle must 
be the largest in magnitude. For example, in the case of AB-4, the additional three poles must lie 
inside the Unit Circle. Values of λT for which this is not the case are ignored, that is, they are not 
points on the stability boundary (see Exercise 8.17).
Figure 8.21 confirms the result in Equation 8.139, namely, λT < −1 for AB-2 integration of 
a stable, first-order system with real characteristic root λ. AB-1 integration is explicit Euler, and 
it is clear from Equation 8.145 that the lone z-plane pole of H(z) migrates to z = −1 = 1ejπ when 
λT = −2, also confirmed by observing the leftmost point on the AB-1 stability boundary.
The equation of the stability boundary for AB-1 integration in the λT plane is easily derived. 
Figure 8.22 shows the z-plane pole of H(z) in Equation 8.145 varying from 1 to −1 along the Unit 
Circle as θ increases from zero to π.
From Equation 8.145, the parameter λT on the AB-1 stability boundary is
	
λ
θ
θ
θ
θ
θ
T
j
j
j
=
−=
+
−=
−
+
e
1
1
1
cos
sin
(cos
)
sin 	
(8.150)
If we let x and y be the real and imaginary parts of λT, respectively, that is, λT = x + jy, then
Stability boundaries for AB-1 through AB-4 integrators
λT plane
Re (λT)
Im (λT )
1.4
1.2
1
0.8
AB-1
AB-2
AB-3
AB-4
0.6
0.4
0.2
0
–0.2
–0.4
–2
–1.5
–1
–0.5
0
FIGURE 8.21  Stability boundaries for AB-1 through AB-4 integration.
FIGURE 8.22  Variation of z-plane pole for determining AB-1 stability boundary.

719
Advanced Numerical Integration
	
x
y
=
−
=
cos
,
sin
θ
θ
1
	
(8.151)
	
⇒
+
+
=
+
=
(
)
cos
sin
x
y
1
1
2
2
2
2
θ
θ
	
(8.152)
and the AB-1 stability boundary is therefore a circle with center at (−1, 0) and radius 1 in the λT or 
x–y plane.
AB-1 integration is inappropriate for simulation of an undamped second-order system, a result 
we observed earlier in Section 3.6. The characteristic roots of a second-order system with ζ = 0 are 
λ = ±jωn, and hence λT = ±jωnT, which corresponds to the imaginary axis in the λT plane. From 
Figure 8.21, it is clear that the imaginary axis lies outside the AB-1 stability region (except for the 
origin).
A more general approach to locating stability boundaries is to view them as locus of points in the 
λT plane resulting from a mapping of the Unit Circle in the z-plane. Figure 8.23 illustrates the AB-2 
stability boundary resulting from mapping points z = rejθ = 1ejθ (0 ≤ θ < 2π) along the Unit Circle 
in the z-plane according to the transformation
	
λ
θ
θ
θ
T
j
j
j
=
−
−






2
1
2
e
e
3e
	
(8.153)
obtained by solving for λT in the denominator of Equation 8.146 with z replaced by ejθ. The stability 
boundary (polar form λT = Mejψ) is shown in Figure 8.23.
Polar coordinates of the points along the AB-2 stability boundary are
	
M
j
j
j
=
−
−
2 1
2
e
e
3e
θ
θ
θ
	
(8.154)
	
=
−
+
−
−
+ −






2
2
2
1
3
3
2
2
2
2
1
(cos
cos
)
(sin
sin
)
(
cos )
(
sin )
θ
θ
θ
θ
θ
θ
/2
	
(8.155)
	
=
−
−






2
1
5
3
1 2
cos
cos
θ
θ
/
	
(8.156)
Stability boundary for AB-2 integrator
1
0.8
0.6
0.4
0.2
0
z-plane
z = rejθ
ejθ–ej2θ
1–3ej2θ
r
Im (λT)
λT plane
λT = Mejψ
λT = 2
θ
Μ
Re (λT)
–0.2
–0.4
–0.6
–0.8
Unit Circle
r = 1
–1
–1
–0.8
–0.6
–0.4
–0.2
0
0.2
ψ
FIGURE 8.23  Mapping the Unit Circle to the AB-2 stability boundary.

720
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
ψ
θ
θ
θ
=
−
−






Arg e
e
e
j
j
j
2
1
3
	
(8.157)
	
=
−
−
−






−
tan
sin
sin
cos
cos
1
4
2
4
2
3
θ
θ
θ
θ
	
(8.158)
Rectangular coordinates of λT on the AB-2 stability boundary are given in Exercise 8.30.
EXAMPLE 8.4
For AB-2 integration,
	
a.	Find the image points on the AB-2 stability boundary in the λT plane of the following 
points:
	
z
j
j
e
j
j
=





+
−
−





−
1
2
2
1
1
2
2
1
4
3
,
(
), ,
,
,
,
(
π/
j).
	
	
b.	Is it possible for an AB-2 simulation of an undamped second-order system to be stable? 
Verify the result.
	
a.	The image points are computed using Equations 8.156 and 8.158 in the M-file “Ch8_
Ex8_4.m.” They are tabulated in Table 8.5.
	
b.	An undamped second-order system is governed by
	
d
d
2
2
2
t x t
x t
u t
n
( )
( )
( )
+
=
ω
	
(8.159)
The characteristic roots are located on the imaginary axis at λ = ±jωn. Close-ups of the AB-2 
stability boundary near the imaginary axis are shown in Figure 8.24. Observation of the left graph 
in Figure 8.24 implies λT = jωnT is limited to approximately j0.12 for the AB-2 integrator to result in 
a stable discrete-time system. However, a closer look at the AB-2 stability region in the right graph 
indicates that the limit is considerably smaller. Further enlargement of the AB-2 stability region in 
the vicinity of the origin will show that the imaginary axis is exterior to the AB-2 stability region 
(with the exception of the origin, λT = 0).
TABLE 8.5
Points on Unit Circle and Image Points on AB-2 Stability 
Boundary
z = rejθ
r, θ
z = a + jb
a, b
λT = Mejψ
M, ψ
λT = c + jd
c, d
1, 0
1, 0
0, 0
0, 0
1, π/4
2 2
2 2
/
/
,
0.6380, π/4
−0.0596, 0.6352
1, π/2
0, 1
0.8944, π/2
−0.4, 0.8
1, π
−1, 0
1, π
−1, 0
1, 4π/3
−1/2, −3 2
/
0.9608, −2.0944
−0.6923, −0.6662
1, 3π/2
0, −1
0.8944, −π/2
−0.4, −0.8
1, 7π/8
2 2
/ , −2 2
/
0.6380, −π/4
−0.0596, −0.6352

721
Advanced Numerical Integration
The instability of an AB-2 integrator for simulation of an undamped second-order system can 
be established by investigating the characteristic polynomial of the z-domain transfer function 
H(z) given by
	
H z
s
n s
T
z
z
( )
(
)[ (z
) (
)]
=
+
←
−
−
1
2
2
2
1
3
1
ω
/
/
	
(8.160)
	
⇒
=
−
+
−
+
+
−
X z
U z
T
z
z
z
z
T
z
T
n
n
( )
( )
.
(
)
[
.
(
) ]
. (
)
0 25
9
6
1
2
1
2 25
1 5
2
2
4
3
2
2
ω
ω
2
2
0 25
z
T
n
+ .
(
)
ω
	
(8.161)
Figure 8.25 is a plot of the loci of the four poles of H(z) corresponding to numerical values of 
ωnT = 0.05, 0.01, 0.15, …, 0.95, 1. The AB-2 integrator generates a discrete-time output x(n) from 
the fourth-order system governed by
Close-up of stability boundary for AB-2 integrator near origin of λT plane
0.4
0.3
0.2
0.1
0
Im (λT)
λT plane
Re (λT)
Re (λT)
λT plane
Im (λT)
–0.1
–0.2
–0.3
–0.4
0.04
0.03
0.02
0.01
0
–0.01
–0.02
–0.03
–0.04
–10
–5
0
×10–3
×10–7
–6
–4
–2
0
FIGURE 8.24  Close-ups of AB-2 stability boundary near origin of λT plane.
Locus of z-plane poles z1, z2, z3, z4, for AB-2 
simulation of system x.. + ω 2
nx = u
1
z-plane
z3 locus
z4 locus
z1 locus
z2 locus
ω nT = 0.3
ω nT = 0.3
0.75
0.5
0.25
0
Im (z)
–0.25
–0.5
–0.75
–1
Unit Circle
–1
–0.5
0
Re (z)
0.5
1
FIGURE 8.25  Locus of poles of H(z) for AB-2 simulation of undamped second-order system x
x
u
n
+
=
ω2
.

722
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
x n
x n
T
x n
T
x n
n
n
(
)
(
)
[
.
] (
)
.
)
(
.
+
−
+
+
+
+
−
+
+
4
2
3
1
2 25(
)
2
15(
1)
25(
ω
ω
ω
2
2
0
nT
x n
T
u n
u n
u n
)
( )
.
[
(
(
)
( )]
2
2
0
=
+
−
+
+
25
9
2)
6
1
	
(8.162)
Up until ωnT ≈ 0.3, there is a pair of equivalent complex roots that die out rapidly due to the 
close proximity to the origin of the extraneous poles z3 and z4. At the same time, z1 and z2 appear 
to lie on the Unit Circle implying that the other pair of equivalent, continuous-time poles (corre­
sponding to poles z1 and z2) lie on the imaginary axis in the s-plane.
If z1 and z2 were actually on the Unit Circle, the damping ratio of the equivalent second-
order continuous-time system would be zero and the discrete-time output would reflect an 
undamped second-order system response once the fast transient component vanishes. In real­
ity, all the points along the two loci shown in Figure 8.25 are outside the Unit Circle, and 
the equivalent continuous-time second-order system damping ratio is slightly negative (see 
Exercise 8.20).
Howe (1986) includes asymptotic formulas for natural frequency and damping ratio errors 
incurred when using low-order multistep Adams–Bashforth integration methods. The formulas for 
k = 1, 2, 3, 4 are
	
k
T
T
T
n
n
I
n
n
=
≈
≈
−
1
1
1
2
:
,
(
)
,
e
e
e
e
/
ω
ζ
ζ ω
ζ
ω
ω
	
(8.163)
	
k
T
T
T
n
I
n
I
n
n
=
≈
−
≈
−
2
1
2
2
1
2
2
3
2
:
(
)
,
(
)
,
(
)
(
)
e
e
e
e
ω
ζ
ζ
ω
ζ
ζ
ω
ω
	
(8.164)
	
k
T
T
T
n
I
n
I
n
n
=
≈−
−
≈
−
+
3
3
4
1
5
4
1
3
3
2
4
3
:
(
)
,
(
)
,
(
)
(
)
e
e
e
e
ω
ζ
ζ
ζ
ω
ζ
ζ
ω
ω
	
(8.165)
	
k
T
T
T
n
I
n
I
n
n
=
≈−−
+
≈−
−
+
4
1
8
8
4
3
2
2
4
4
3
5
4
:
(
)
,
(
)
,
(
)
(
)
e
e
e
e
ω
ζ
ζ
ζ
ω
ζ
ζ
ζ
ω
ω
1	(8.166)
where eI are the integration error coefficients given in Section 8.2. For accurate (
)
ω nT 1 simu­
lations of undamped (ζ = 0) second-order continuous-time systems, Equations 8.163 and 8.165 
imply damping ratio errors of −1/2(ωnT) with AB-1 and 3/8(ωnT)3 with AB-3 integration, respec­
tively. Equations 8.164 and 8.166 imply the damping ratio error is zero for AB-2 and AB-4 integra­
tion to order O(ωnT)2 and O(ωT)4, respectively. The actual damping ratio error is of order O(ωnT)3 
for AB-2 and O(ωnT)5 for AB-4 integration.
8.3.2  Implicit Integrators
The Adams–Moulton implicit integrators were introduced in Section 6.4. The z-domain transfer 
functions for AM-2, AM-3, and AM-4 integrators are obtained in a similar fashion to the Adams–
Bashforth integrators, that is, the difference equation approximation of a pure continuous-time inte­
grator is developed and then z-transformed to produce HI(z). The results for AM-2 through AM-4 
integrators are given below (see Exercise 8.22).
	
AM-2:
( )
H z
T z
z
I
=
+
−






2
1
1 	
(8.167)
	
AM-3:
( )
(
)
H z
T
z
z
z z
I
=
+
−
−






12
5
8
1
1
2
	
(8.168)
	
AM-4:
( )
(
)
H z
T
z
z
z
z
z
I
=
+
−
+
−






24
9
19
5
1
1
3
2
2
	
(8.169)

723
Advanced Numerical Integration
Replacing s by 1/HI(z) in the first-order system transfer function H(s) = 1/(s − λ) leads to the 
following expressions for the z-domain transfer functions using AM-2 through AM-4 integration,
	
AM-2:
( )
(
)
(
)
(
)
H z
T z
T z
T
=
+
−
−
+
1
2
2
λ
λ
	
(8.170)
	
AM-3:
( )
(
)
(
)
(
)
H z
T
z
z
T z
T z
T
=
+
−
−
−
+
+
5
8
1
12
5
12
8
2
2
λ
λ
λ 	
(8.171)
	
AM-4
9
19
:
( )
(
)
(
)
(
)
H z
T
z
z
z
T z
T z
Tz
T
=
+
−
+
−
−
+
+
−
9
19
5
1
24
24
5
3
2
3
2
λ
λ
λ
λ 	
(8.172)
We may conclude from Equations 8.170 through 8.172 that AM-2 integration does not introduce 
extraneous roots (system poles), whereas AM-3 and AM-4 introduce one and two extraneous roots 
for each state. Stability boundaries for AM-2, AM-3, and AM-4 integration are obtained using the 
same method for the Adams–Bashforth integrators. Starting with AM-2, the characteristic polyno­
mial for H(z) in Equation 8.170 is
	
(
)
(
)
2
2
0
−
−
+
=
λ
λ
T z
T
	
(8.173)
Setting z = ejθ and solving for λT yield
	
λ
θ
θ
θ
θ
T
z
z
z
j
j
j
j
=
+
−






=
−
+





⋅
←
−
−
2
1
1
2
1
1
2
e
e
e
e
e
jθ 2





	
(8.174)
	
=
−
+






−
−
2
2
2
2
2
e
e
e
e
j
j
j
j
θ
θ
θ
θ
	
(8.175)
	
=






j2
2
2
sin(
)
cos(
)
θ
θ
/
/
	
(8.176)
	
= j2
2
tan(
)
θ/
	
(8.177)
From Equation 8.177, the top half of the Unit Circle, that is, z = ejθ, 0 ≤ θ < π, is mapped into 
the imaginary axis from λT = 0 to λT = j∞. The entire Unit Circle is mapped into the imaginary 
axis in the λT plane, which is the stability boundary for AM-2 or trapezoidal integration. In other 
words, the entire left-half plane is the stability region assuring that any stable continuous-time sys­
tem (Re λ < 0) simulated by AM-2 integration leads to a stable discrete-time system regardless of 
the integration step size.
The stability regions for AM-3 and AM-4 integration are obtained from mapping the Unit Circle 
according to
	
AM-3
e
e
5e
8e
: λ
θ
θ
θ
θ
T
j
j
j
j
=
−
−






12
1
2
2 +
	
(8.178)

724
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
AM-4
e
e
9e
+19e
e
: λ
θ
θ
θ
θ
θ
T
j
j
j
j
j
=
−
−
+






24
5
1
3
2
3
2
	
(8.179)
The stability boundaries for AM-3 and AM-4 integration are computed in “Ch8_AM_Stability_
Boundaries.m” and shown along with the AM-2 stability boundary in Figure 8.26.
Note the restrictions imposed on AM-3 and AM-4 simulation of a stable, first-order system 
(λ < 0). The integration step size T is limited to less than −6/λ and −3/λ, respectively. Equivalently, 
the step size T < 6τ for AM-3 and T < 3τ for AM-4 integration, where τ = −1/λ is the system time 
constant.
EXAMPLE 8.5
The concentration of a chemical in the vessel shown in Figure 8.27 is determined by the differ­
ential equation
	
V
Q
c
t
c
c
d
d +
=
1
	
(8.180)
where
V is the constant volume of liquid in the vessel
Q is the constant flow rate of liquid in and out of the vessel
c1 is the concentration of chemical in the liquid flowing in
c is the concentration of the chemical in the well-stirred vessel
FIGURE 8.27  Chemical flowing in and out of a vessel with constant liquid volume.
Stability boundaries for AM-2 through AM-4 integrators
λT plane
Re (λT)
Im (λT )
4
3.5
3
2.5
1.5
2
1
0.5
0
–0.5
–1
–6
–5
–4
–3
–2
–1
0
AM-3
AM-4
AM-2
FIGURE 8.26  Stability boundaries for AM-2 through AM-4 integrators.

725
Advanced Numerical Integration
	
a.	Find the analytical solution for the concentration c(t), t ≥ 0 when the input c t
c
1
1
( ) =
, 
t ≥ 0.
	
b.	Find the difference equation for simulating the concentration response using AM-2 inte­
gration with step size T.
	
c.	Find an expression for the steady-state value c(n)|n→∞, and compare it with c(t)t→∞.
	
d.	Repeat parts (b) and (c) for AM-3 integration.
	
e.	Numerical values of the system parameters are Q = 25 m3/min and V = 150 m3, and the 
initial concentration of chemical in the tank is c(0) = 5 mg/m3. The input c1
3
60
=
mg/m . 
Simulate the concentration response using AM-2 and AM-3 integration with step size 
T = 1.5τ, 1.25τ, τ, 0.75τ where τ = V/Q is the system time constant. Plot and compare 
the simulated responses and the analytical solution.
	
a.	The analytical solution is obtained by Laplace transforming the differential equation with 
input c1 constant along with the given initial condition. Alternatively, the step response 
of a first-order system is given in Equation 2.6 and repeated as follows using the current 
notation for the stirred tank.
	
c t
c
c
t
Q V t
Q V t
( )
( )
,
[
]
(
)
(
)
=
+
−
≥
−
−
0
1
0
1
e
e
/
/
	
(8.181)
	
b.	Rewriting the differential equation as
	
d
d
c
t
Q
V c
Q
V c
c
c
= −
+
= −
+
1
1
1
1
τ
τ
	
(8.182)
	
	 and comparing it with dx/dt = λx + u, the z-domain transfer function of the discrete-time 
system is obtained by replacing λ with −1/τ in Equation 8.170 and inserting 1/τ in the 
numerator to give
	
H z
C z
C z
T
z
T
z
T
( )
( )
( )
(
)(
)
[
(
)]
[
(
)]
=
=
+
+
−
−
1
1
2
2
/
/
/
τ
τ
τ
	
(8.183)
	
=
+
+
−−
(
)(
)
[
(
)]
[
(
)]
T
z
T
z
T
/
/
/
2
1
1
2
1
2
τ
τ
τ
	
(8.184)
	
	 Inverting Equation 8.184 leads to the difference equation
	
1
2
1
1
2
2
1
1
1
+






+
−
−






=
+
+
T
c n
T
c n
T c n
c
τ
τ
τ
(
)
( )
[ (
)
( )],
, , ,
n
n = 0 1 2 …
	
(8.185)
	
	 which is used to update the state according to
	
c n
T
T
c n
T
T
c
(
)
(
)
(
)
( )
(
)
,
+
=
−
+






+
+






1
1
2
1
2
1
2
1
/
/
/
/
τ
τ
τ
τ
n = 0 1 2
, , ,…
	
(8.186)
	
c.	The steady-state value c(n)|n→∞, is obtained from Equation 8.186 after replacing c(n) and 
c(n + 1) with c(n)|n→∞. Solving for c(n)|n→∞ yields
	
c n
c
n
( )| →∞=
1 	
(8.187)
	
	 Hence, c(n)|n→∞ = c1 = c(t)|t→∞, the final concentration of the continuous-time system.

726
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
d.	Inserting 1/τ in the numerator of Equation 8.171, and simplifying the result give
	
H z
C z
C z
z
z
T
z
T
z
( )
( )
( )
[
(
))
]
[
(
)
]
=
=
+
−
+
−
−
−
1
2
2
5
8
1
12
5
12
8
1
τ
τ
/
/
	
(8.188)
	
	 and the difference equation is
	
12
5
2
12
8
1
5
τ
τ
T
c n
T
c n
c n
c n
+






+
−
−






+
−
=
(
(
( )
(
)
)
1
+
+
+
−
2
8
1
1
)
(
)
( )
c n
c n
1
	
(8.189)
	
⇒
+
=
+
−






+
+
+




c n
T
T
c n
c n
c
(
[
(
)
]
(
( )
2
1
12
5
12
8
1
12 1
)
/
)
τ
τ


=
,
, , ,
n
0 1 2 …
	
(8.190)
	
	   Letting c(n + 2) = c(n + 1) = c(n) = c(n)|n→∞, in Equation 8.190 and solving for c(n)|n→∞, 
give the same result as Equation 8.187, that is, the AM-3 integrator also converges to 
c t
c
n
( )| →∞=
1.
	
e.	The simulated responses using AM-2 and AM-3 integration along with the analytical 
solution are computed in “Ch8_Ex8_5.m” and shown in Figures 8.28 and 8.29. An RK-3 
integrator would normally be used to generate c(1), which is required to compute c(2) in 
Equation 8.190. However, the exact value c(T) was used instead.
Note the improvement in the AM-3 integrator compared with the AM-2 integrator.
8.3.3  Runga–Kutta (RK) Integration
RK numerical integration was introduced in Section 6.2. Unlike the multistep methods, RK inte­
gration algorithms are referred to as single pass or one step in nature. Depending on the order of 
Analytical and simulated (AM-2) concentration responses
60
50
40
30
τ = 6 min
T = 1.5τ = 9 min
Concentration (mg/m3)
20
10
0
0
5
10
15
20
25
30
60
50
40
30
τ = 6 min
T = 1.25τ = 7.5 min
Concentration (mg/m3)
20
10
0
0
5
10
15
20
25
30
60
50
40
30
τ = 6 min
T = τ = 6 min
Concentration (mg/m3)
20
10
0
0
5
10
15
t (min)
t (min)
20
25
30
60
50
40
30
τ = 6 min
T = 0.75τ = 4.5 min
Concentration (mg/m3)
20
10
0
0
5
10
15
20
25
30
FIGURE 8.28  Analytical and simulated AM-2 concentration response.

727
Advanced Numerical Integration
the RK integrator, one or more state derivative function evaluations are required per step in order 
to advance the discrete-time state approximation to the next step. Fixed-step and variable-step RK 
formulas are popular in continuous-time system simulation.
Numerical stability with fixed-step RK integrators is important because of the limitations 
imposed on the integration step size. A similar approach to the one used for multistep methods is 
employed to obtain the stability boundary corresponding to a particular RK integrator. To illustrate, 
consider the second-order RK-2 integrator first introduced in Section 3.6 known as improved Euler 
or Heun’s method. A continuous-time first-order system modeled by dx/dt = f(x, u) = λx + u is 
simulated using improved Euler integration by first predicting the updated state as
	
ˆ(
)
( )
[ ( ), ( )]
x n
x n
Tf x n u n
+
=
+
1
	
(8.191)
	
=
+
+
x n
T
x n
u n
( )
[
( )
( )]
λ
	
(8.192)
	
=
+
+
(
) ( )
( )
1
λT x n
Tu n 	
(8.193)
followed by correction to
	
x n
x n
T
f x n u n
f
n
u n
(
)
( )
{ [ ( ) ( )]
[ (
), (
)]}
+
=
+
+
+
+
1
2
1
1
,
x
	
(8.194)
	
=
+
+
+
+
+
x n
T
f x n u n
f
T x n
Tu n u n
(
{ [ ( ), ( )]
[
) ( )
( ), (
) }
)
]
2
1
1
λ
	
(8.195)
	
=
+
+
+
+
+
+
+
x n
T
x n
u n
T x n
Tu n
u n
(
{
( )
( )]
[
) ( )
( )]
(
)}
)
2
1
1
λ
λ
λ
	
(8.196)
Analytical and simulated (AM-3) concentration responses
60
50
40
30
τ = 6 min
T = 1.5τ = 9 min
Concentration (mg/m3)
20
10
0
0
5
10
15
20
25
30
60
50
40
30
τ = 6 min
T = 1.25τ = 7.5 min
Concentration (mg/m3)
20
10
0
0
5
10
15
20
25
30
60
50
40
30
τ = 6 min
T = τ = 6 min
Concentration (mg/m3)
20
10
0
0
5
10
15
t (min)
t (min)
20
25
30
60
50
40
30
τ = 6 min
T = 0.75τ = 4.5 min
Concentration (mg/m3)
20
10
0
0
5
10
15
20
25
30
FIGURE 8.29  Analytical and simulated AM-3 concentration response.

728
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
+
+






+
+
+
+
1
2
2
1
1
2
λ
λ
λ
T
T
x n
T
T u n
u n
(
)
(
[(
) ( )
(
)]
)
	
(8.197)
Taking the z-transform of Equation 8.197 and solving for the ratio X(z)/U(z) give
	
H z
X z
U z
T
z
T
z
T
T
( )
( )
( )
(
)(
)
[
(
)
]
=
=
+
+
−
+
+
/
/
2
1
1
2
2
λ
λ
λ
	
(8.198)
Another popular RK-2 integrator, first introduced in Section 3.6, is the modified Euler integra­
tor. The difference equation for modified Euler integration with a step size T can be obtained by 
reference to Figure 8.30. Note that the intervals of width ˆT
T
=
/2 correspond to one-half the basic 
simulation frame rate (1/T) to accommodate the input sampling rate of two samples per integration 
step T.
The first step in advancing the state using modified Euler integration with step size T is to com­
pute the value ˆ(
)
x n+1  halfway through the integration interval, that is,
	
ˆ(
)
ˆ
( )
[ ( ), ( )]
x
T
n
x n
f x n u n
±
=
+
1
	
(8.199)
	
=
+
+
x n
x n
u n
T
( )
( )
( )
[
]
ˆ λ
	
(8.200)
	
=
+
+
(
) ( )
( )
1
λ ˆ
ˆ
T
T
x n
u n 	
(8.201)
The derivative function at t
n
T
=
+
(
)1 ˆ  is calculated using the predicted value ˆ(
)
x n+1  in Equation 
8.201. The updated state x(n + 2) is computed by taking a step of length T
T
= 2 ˆ  in the direction 
based on the midpoint derivative. Thus,
	
x n
x n
n
u n
Tf x
(
)
[ (
)
(
)]
( )
+
=
+
+
+
2
2
1
1
ˆ ˆ
,
	
(8.202)
	
=
+
+
+
+
x n
n
u n
T
x
( )
[
(
)
(
)]
2
1
1
ˆ
ˆ
λ
	
(8.203)
FIGURE 8.30  Modified Euler integration running at state update rate (1/T).

729
Advanced Numerical Integration
	
=
+
+
+
+
x n
n
u n
Tx
T
( )
(
)
(
)
2
1
2
1
λ ˆˆ
ˆ
	
(8.204)
	
=
+
+
+
+
+
x n
x n
u n
u n
T
T
T
T
( )
( )
( )
[(
)
]
(
)
2
1
2
1
λ
λ
ˆ
ˆ
ˆ
ˆ
	
(8.205)
	
=
+
+
+
+
+
[
(
)]
(
)]
( )
( )
1
2
1
2
1
λ
λ
λ
ˆ
ˆ
ˆ[
ˆ
T
T
T
T
x n
u n
u n
	
(8.206)
In terms of the modified RK-2 integration step size T
T
= 2 ˆ, the difference equation for updating 
the discrete-time state x(n) is
	
x n
T
T
x n
T
T u n
u n
n
(
)
(
)
( )
( )
(
) ,
+
=
+
+






+
+
+






=
2
1
2
2
1
0
2
λ
λ
λ
, , , , ,
1 2 3 4 …
	
(8.207)
Note that n = 0, 1, 2, 3, 4, … in Equation 8.207 corresponds to times 0, T/2, T, 3T/2, 2T, …, and, 
therefore, x(n), n = 0, 2, 4, … are the modified RK-2 states updated every T (s). The z-domain trans­
fer function for modified RK-2 integration with step T is obtained by z-transforming Equation 8.207,
	
H z
T z
T
z
T
T
( )
[
(
)]
[
(
)
]
=
+
−
+
+
λ
λ
λ
/
/
2
1
2
2
2
	
(8.208)
Difference equations and z-domain transfer functions for higher-order RK integrators are 
obtained in a similar fashion to the procedure outlined in Equations 8.199 through 8.208 for modi­
fied RK-2 integration. An RK-3 integrator with step size T requiring input samples at the beginning, 
one-third and two-thirds into the interval, is described by
	
k
f x n u n
1 = [ ( ), ( )] 	
(8.209)
	
k
f x n
T k u n
2
1
3
1
3
=
+
+












( )
,
	
(8.210)
	
k
f x n
T k u n
3
2
2
3
2
3
=
+
+












( )
,
	
(8.211)
	
x n
x n
T k
k
(
)
( )
(
)
+
=
+
+
1
4
3
1
3
	
(8.212)
Using this RK-3 integrator with a sampling interval ˆT
T
=
/3 to simulate the first-order contin­
uous-time system dx/dt = λx + u results in the third-order difference equation (see Exercise 8.27)
	
x n
T
T
T
x n
T
T
u n
(
)
(
)
(
)
( )
( )
+
=
+
+
+






+
+






3
1
2
6
4
6
2
3
2
3
λ
λ
λ
λ
+
+
+
+
=
…
λT u n
T u n
n
2
2
1
3
4
2
0 1 2 3
(
)
(
),
, , , ,
	
(8.213)
where x(n), n = 0, 3, 6, 9, … are the RK-3 states updated once every T(s).

730
Simulation of Dynamic Systems with MATLAB® and Simulink®
z-Transforming Equation 8.213 leads to the z-domain transfer function
	
H z
T
z
T
z
T
T
z
T
T
T
( )
(
)
(
)
(
)
(
)
[
(
)
(
)
=
+
+
+
−
+
+
+
3
4
2
4
6
1
2
2
2
2
3
3
2
/
/
/
/
/
λ
λ
λ
λ
λ
3 6
/ ]
	
(8.214)
Consider the RK-4 integrator presented in Section 6.2, Equations 8.60 through 8.64 with integra­
tion step size T and input sampled at the beginning and midpoint of each interval. The z-domain 
transfer function is (Howe 1986, 1995)
	
H z
T
z
T
T
z
T
T
T
z
( )
(
){
[
(
)
]
(
)
(
)
}
[
=
+
+
+
+ +
+
+
−
/
/
/
/
6
4
2
2
1
2
4
1
2
2
2
2
3
2
λ
λ
λ
λ
λ
+
+
+
+
λ
λ
λ
λ
T
T
T
T
(
)
(
)
(
)
]
2
3
4
2
6
24
/
/
/
	
(8.215)
The characteristic polynomials for the one-step RK integrators with z-domain transfer functions 
given in Equations 8.198, 8.208, 8.214, and 8.215 are summarized as follows.
	
RK- (Improved Euler):
2
1
2
2
z
T
T
−
+
+






λ
λ
(
)
	
(8.216)
	
RK- (Modified Euler):
2
1
2
2
2
z
T
T
−
+
+






λ
λ
(
)
	
(8.217)
	
RK-3 (Input sampling at / ):
3
1
2
6
3
2
3
T
z
T
T
T
−
+
+
+






λ
λ
λ
(
)
(
)
	
(8.218)
	
RK-4 (Input sampling at
/ ):
2
1
2
6
24
2
2
3
4
T
z
T
T
T
T
−
+
+
+
+



λ
λ
λ
λ
(
)
(
)
(
) 

	
(8.219)
For an mth-order RK integrator requiring ks input samples per integration step T, the character­
istic polynomial is given by
	
RK-
Input sampling at
:
m
k
T
z
T
T
T
s
ks






−
+
+
+
1
2
3
2
3
λ
λ
λ
(
)
!
(
)
!
+
+







(
)
!
λT
m
m
	
(8.220)
Note that the bracketed expression in Equation 8.220 is the truncated Taylor Series approxima­
tion for eλT. Let us explore this point further. λ*, the characteristic root of the equivalent continuous-
time system, is related to the z-plane pole by
	
z
T ks
= e *( /
)
λ
	
(8.221)
The z-plane pole for the RK-4 integrator is from Equation 8.219
	
z
T
T
T
T
=
+
+
+
+






1
2
6
24
2
3
4 1 2
λ
λ
λ
λ
(
)
(
)
(
)
/
	
(8.222)

731
Advanced Numerical Integration
Substituting this z into Equation 8.221 with ks = 2 and squaring both sides lead to
	
1
2
6
24
2
3
4
+
+
+
+





=
λ
λ
λ
λ
λ
T
T
T
T
T
(
)
(
)
(
)
*
e
	
(8.223)
Expanding the exponential term in Equation 8.223 in a fifth-order truncated power series eventu­
ally leads to the asymptotic formula for the fractional characteristic root error, that is,
	
RK-4:
e
*
1
λ
λ
λ
λ
λ
=
−≈−
1
1
120
4
(
) ,
|
|
T
T 
	
(8.224)
which implies the integrator error coefficient eI for RK-4 is −1/120.
EXAMPLE 8.6
Find the equivalent continuous-time system characteristic root for the system in Example 8.5 using 
RK-2, RK-3, and RK-4 integration with step size T = 0.25 s.
From Equation 8.223 and similar expressions for RK-2 and RK-3,
	
RK-2:
*
λ
λ
λ
=
+
+






1
1
2
2
T
T
T
ln
(
)
	
(8.225)
	
RK-3:
*
λ
λ
λ
λ
=
+
+
+






1
1
2
6
2
3
T
T
T
T
ln
(
)
(
)
	
(8.226)
	
RK-4:
*
λ
λ
λ
λ
λ
1
1
2
6
24
2
3
4
T
T
T
T
T
ln
(
)
(
)
(
)
+
+
+
+





	
(8.227)
The characteristic root for the system in Example 8.5 is λ = −1/6. Substituting λT = (−1/6)
(1/4) = −1/24 in Equations 8.225 through 8.227 results in
	
λ*
-2
-3
-4
=
−
−
−

0 16661691
0 16666719
0 16666666
.
,
(RK
)
.
,
(RK
)
.
,
(RK
)




	
The stability boundaries for the RK integrators are obtained as before by mapping the Unit 
Circle in the z-plane into the λT plane using the denominator of H(z) to define the mapping. The 
MATLAB M-file “Ch8_RK_Stability_Boundaries.m” finds and plots the top half of the RK-2, RK-3, 
and RK-4 stability boundaries shown in Figure 8.31.
Unlike the Adams–Bashforth and Adams–Moulton integrators, the stability regions become 
larger for the higher-order RK integrators. There is a single stability boundary for all mth-order RK 
integrators, independent of the number of input samples required during each integration step. 
This is logical since stability of the discrete-time system associated with RK integration is an inher­
ent system property unrelated to the possible existence of inputs.
The fractional characteristic root error eλ for the mth-order numerical integrators discussed in 
this section and the previous section is related to the integrator error coefficient eI according to 
(Howe 1995)

732
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
e
*
1
λ
λ
λ
λ
λ
=
−≈−
1
e
T
T
I
m
(
) ,

	
(8.228)
A comparison of characteristic root errors for comparable order, Adams–Bashforth, Adams–
Moulton, and RK integrators, is shown in the middle three columns of Table 8.6.
Keep in mind the RK-m integrator requires m derivative function evaluations per step. The RK-4 
integrator, for example, would take roughly four times longer than either AB-4 or AM-4 integrators 
to execute a single step. In order to keep the computational effort between the multistep AB-m 
and AM-m integrators comparable to the one-step RK-m integrators, the step size should be m 
times larger with RK-m integration.
The last column in Table 8.6 reflects the effect of increasing the step size with RK integration to 
make the computational effort approximately the same as the comparable order AB and AM inte­
grators. In the case of RK-4, the effective characteristic root error eλ is proportional to −(256/120)
(λT)4, and the ratio of eλ for AB-4 integration to eλ for RK-4 integration is
	
e
e
(
(
λ
λ
λ
λ

=
−
−
=
251
720
256
120
0 1634
4
4
T
T
)
)
.
	
(8.229)
Stability boundaries for RK-2 through RK4 integrators
0
–3
–2.5
–2
–1.5
–0.5
0
0.5
–1
0.5
1.5
2.5
RK-4
RK-3
RK-2
1
2
3
Im (λT)
λT plane
Re (λT)
FIGURE 8.31  Stability boundaries for RK-2 through RK-4 integrators.
TABLE 8.6
Characteristic Root Errors for AB, AM, and RK Integrators
m
eλ, AB-m Step Size T
eλ, AM-m Step Size T
eλ, RK-m Step Size T
eλ, RK-m Step Size T
2
−5
12
2
(
)
λT
1
12
2
(
)
λT
−1
6
2
(
)
λT
−
=−
1
6
2
4
6
2
2
(
)
(
)
λ
λ
T
T
3
−3
8
3
(
)
λT
1
24
3
(
)
λT
−1
24
3
(
)
λT
−
=−
1
24
3
27
24
3
3
(
)
(
)
λ
λ
T
T
4
−251
720
4
(
)
λT
19
720
4
(
)
λT
−1
120
4
(
)
λT
−
=−
1
120
4
256
120
4
4
(
)
(
)
λ
λ
T
T

733
Advanced Numerical Integration
making AB-4 integration roughly six times more accurate than RK-4 integration when execution 
time is taken into consideration.
EXAMPLE 8.7
A simplified block diagram for the forward speed control of a ground vehicle is shown in 
Figure 8.32. The system parameters are the open-loop system gain K and poles located at s = −a 
and s = −b.
	
a.	Find expressions for the natural frequency, damping ratio, and steady-state gain of the 
second-order closed-loop system in terms of the system parameters.
	
b.	Find the analytical solution for the unit step response.
	
c.	An RK-2 (improved Euler) simulation is performed for the cases where K = 100, 250 using 
step sizes of T = 0.025 and 0.1 s. The open-loop poles are located at s = −a = −2 s−1 
and s = −b = −5 s−1. Plot the analytical and simulated step responses for each case on 
separate graphs. Comment on the accuracy and numerical stability of the RK-2 integra­
tor. Repeat using RK-4 integration with step sizes of 0.1 and 0.2 s.
	
d.	For the case where K = 250, a = 2, and b = 5, find the maximum value of T that can be 
used to implement RK-3 simulation. Verify the result.
	
a.	The closed-loop system transfer function is
	
V s
V
s
K
s
a
b s
ab
K
com
( )
( )
(
)
=
+
+
+
+
2
	
(8.230)
	
	   Comparing Equation 8.230 to the standard form of a second-order system transfer 
function
	
K
s
a
b s
ab
K
K
s
s
ss
n
n
n
2
2
2
2
2
+
+
+
+
=
+
+
(
)
ω
ζω
ω
	
(8.231)
	
	 and solving for the second-order system parameters Kss, ωn, and ζ results in
	
K
K
ab
K
ab
K
a
b
ab
K
ss
n
=
+
=
+
=
+
+
,
(
)
,
(
)
ω
ζ
1 2
1 2
2
	
(8.232)
	
b.	The analytical solution for the step response is (see Equation 2.24)
	
y t
K
t
t
ss
n
d
t
d
n
( )
sin(
) ,
=
−
+






≥
−
1
0
ω
ω
ω
ϕ
ω
e ζ
	
(8.233)
	
ω
ω
ϕ
ω
ω
d
n
d
n
=
−
=






−
(
)
tan
/
1
2 1 2
1
ζ
ζ
,
	
(8.234)
FIGURE 8.32  Block diagram of speed control system.

734
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	RK integrators “odel” through “ode5” of order one through five are available in MATLAB 
and Simulink. The Simulink diagram is shown in Figure 8.33.
	
	   The Simulink model file “speed_control.mdl” is called from the MATLAB M-file “Ch8_
Ex8_7.m,” which sets the system parameters, selects the numerical integrator as either 
RK-2 or RK-4, sets the timing parameters (step size and simulation duration), and plots the 
analytical and simulated responses. The results are shown in Figures 8.34 and 8.35.
	
	   Some of the data points at the end of the simulated responses when T = 0.025 s in 
Figure 8.34 are omitted to make it easier to visualize the discrete-time nature of the 
response. Several of the simulated transient responses are quite accurate, whereas oth­
ers deviate by a significant amount from the analytical solution. The RK-2 integrator is 
unstable when K = 250 and T = 0.1 s, and the RK-4 integrator exhibits instability for the 
case when K = 250 and T = 0.2 s. The reader should confirm that λT = −0.35 + j1.5740 
and λT = −0.7 + j3.1480 fall outside the stability regions for RK-2 and RK-4, respectively.
	
d.	For the case when K = 250, the continuous-time system characteristic roots are 
λ = −3.5 ± j15.7401. The limiting value of T for numerical stability is found by locat­
ing the intersection of the ray λT = (−3.5 + j15.7401)T, T > 0 and the RK-3 stability 
boundary as shown in Figure 8.36. The M-file “Ch8_Ex8_7.m” contains MATLAB code, 
which tracks the values of λT along the RK-3 boundary as the point z rotates around 
the Unit Circle in the z-plane. The common point on the ray and stability boundary is 
located where the angle of λT on the stability boundary is equal to the constant angle of 
the ray (see Figure 8.36). It occurs at λT = −0.5198 + j2.3386. The limiting step size is 
found from
FIGURE 8.33  Simulink diagram for RK simulation of speed control system.
K = 100, T = 0.025 s
RK-2
ωn = 10.49 rad/s, ζ = 0.33
λ = –3.5 + j9.8869
λT = –0.0875 + j0.2472
1.5
1.25
1
0.75
v (ft/s)
0.5
0.25
0
0
0.5
1
1.5
2
RK-2
ωn = 10.49 rad/s, ζ = 0.33
λ = –3.5 + j9.8869
λT = –0.35 + j0.9887
1.5
1.25
1
0.75
0.5
0.25
0
0
0.5
1
1.5
2
K = 100, T = 0.1 s
K = 250, T = 0.025 s
RK-2
ωn = 16.12 rad/s, ζ = 0.22
λ = –3.5 + j15.7401
λT = –0.0875 + j0.3935
1.5
1.25
1
0.75
v (ft/s)
0.5
0.25
0
0
0.5
1
t (s)
t (s)
1.5
2
RK-2
ωn = 16.12 rad/s, ζ = 0.22
λ = –3.5 + j15.7401
λT = –0.35 + j1.5740
100
75
50
25
0
–25
–50
0
0.5
1
1.5
2
2.5
3
K = 250, T = 0.1 s
FIGURE 8.34  Analytical and RK-2 simulation of speed control system step response.

735
Advanced Numerical Integration
	
λT
j
T
j
max
max
=
+
=
+
(
.
.
)
.
.
–
–
3 5
15 7401
0 5198
2 3386 	
(8.235)
	
	   Solving for Tmax in Equation 8.235,
	
– .
– .
.
3 57
0 5198
0 1485
T
max
max
T
s
=
⇒
=
	
	
	   The Simulink model was run using the “ode3” RK-3 integrator with a step size of Tmax. 
The marginally stable simulated response is shown in Figure 8.37.
K = 100, T = 0.1 s
RK-4
ωn = 10.49 rad/s, ζ = 0.34
λ = –3.5 + j9.8869
λT = –0.35 + j0.9887
1.5
1.25
1
0.75
v (ft/s)
0.5
0.25
0
0
0.5
1
1.5
2
RK-4
ωn = 10.49 rad/s, ζ = 0.34
λ = –3.5 + j9.8869
λT = –0.7 + j1.9774
1.5
1.25
1
0.75
0.5
0.25
0
0
0.5
1
1.5
2
K = 100, T = 0.2 s
K = 250, T = 0.1 s
RK-4
ωn = 16.12 rad/s, ζ = 0.22
λ = –3.5 + j15.7401
λT = –0.35 + j1.5740
1.5
1.25
1
0.75
v (ft/s)
0.5
0.25
0
0
0.5
1
t (s)
t (s)
1.5
2
RK-4
ωn = 16.12 rad/s, ζ = 0.22
λ = –3.5 + j15.7401
λT = –0.7 + j3.1480
200
0
–200
–400
–600
0
0.5
1
1.5
2
K = 250, T = 0.2 s
FIGURE 8.35  Analytical and RK-4 simulation of speed control system step response.
Stability boundaries for RK-3 integrator and 
locus of λT points for system
0
–3
–2.5
–2
–1.5
–0.5
0
0.5
–1
0.5
1.5
2.5
–0.5198 + j2.3386
Ray: λT = (–3.5 + j15.7401)T
1
2
Im (λT)
λT plane
Re (λT)
FIGURE 8.36  Finding λTmax point for RK-3 simulation of system.

736
Simulation of Dynamic Systems with MATLAB® and Simulink®
EXERCISES
	8.15	 Show that the extraneous z-plane pole z2 resulting from AB-2 integration of the first-order 
system dx/dt = λx + u is approximately equal to 0.5λT when λT 1.
	8.16	 Simulate the unit step response of the first-order system dx/dt = λx + u using AB-2 integra­
tion, and plot both x(t), t ≥ 0 and x(n), n = 0, 1, 2, … for the following cases:
λ
T
−0.1
1, 2, 5, 9, 10, 11
−2
0.1, 0.2, 0.3, 0.4, 0.5, 0.6
−50
0.002, 0.005, 0.01, 0.019, 0.02, 0.021
	8.17	 Show that the procedure for finding the AB-4 stability region must be modified to account for 
the existence of extraneous poles outside the Unit Circle, that is, for certain values of λT, the 
principal pole may lie on the Unit Circle; however, there may be other poles of H(z) larger in 
magnitude.
	8.18	 The stability boundary for AB integration in polar form is λT = Mejψ where M = |λT| and 
ψ = Arg(λT) are both functions of the angle θ as shown in Figure 8.23 for AB-2 integration.
	
a.	 Show that M = (2 − 2 cos θ)1/2 and ψ = tan−1 (sin θ/(cos θ − 1)) for AB-1 integration.
	
b.	 Derive Equations 8.156 and 8.158.
	
c.	 Find M and ψ for AB-3 and AB-4 integration.
	8.19	 Investigate the stability of AB-3 and AB-4 integration for undamped continuous-time second-
order systems. Specifically,
	
a.	 Find the z-domain transfer functions of the system, and plot the loci of the poles as the 
parameter ωnT varies, similar to Figure 8.25 for AB-2 integration.
	
b.	 Include close-ups of the stability boundaries near the imaginary axis of the λT plane.
	8.20	 In Example 8.4,
	
a.	 Find all the z-plane poles when ωnT = 0.05, 0.1, …, 0.45, 0.5. Comment on how the results 
affect the stability of AB-2 integration of undamped second-order systems.
	
b.	 Show that the difference equation for implementing AB-2 integration of the system 
x
x
u
n
+
=
ω2
 is
Analytical solution and RK-3 simulated response 
with λT on stability boundary
2.5
2.25
v(n), RK-3 simulated response
v(t), analytical solution
v (ft/s)
2
1.75
1.5
1.25
1
0.75
0.5
0.25
0
0
0.5
1
1.5
2
t (s)
2.5
3
3.5
4
FIGURE 8.37  Analytical step response and marginally stable RK-3 simulated response.

737
Advanced Numerical Integration
	
x n
x n
T
x n
T
x n
n
n
(
)
(
)
(
)
[
.
(
) ] (
)
. (
)
.
(
+
−
+
+
+
+
−
+
+
4
2
3
1
2 25
2
1 5
1
0 25
2
2
ω
ω
ωn
A
T
x
n
T
u n
u n
u n
n
)
.
(
)
(
)
( ) ,
, , , ,
( )
[
]
2
2
0 25
9
2
6
1
0 1 2 3
=
+
−
+
+
=
…	
	
c.	 Find the difference equation for explicit Euler integration of the undamped second-order 
system.
	
d.	 Write a MATLAB M-file that accepts values for ωn and T and implements AB-2 integra­
tion to simulate the unit step response of the system. Use the explicit Euler integrator to 
compute the starting values x(2) and x(3).
	
e.	 Plot the exact and simulated step responses for the following cases:
	
i.	 ωn = 1 rad/s, T = 0.01 s
	
ii.	 ωn = 100 rad/s, T = 0.002 s
	
iii.	 ωn = 0.02 rad/s, T = 15 s
	
iv.	 ωn = 10 rad/s, T = 0.5 s
	8.21	 Discuss the implications of the AB-3 stability boundary extending into the first quadrant of the 
λT plane. Illustrate by simulating the step response of the continuous-time second-order system
	
d
d
d
d
49.25 ( )
2
2t x t
t x t
x t
u t
( )
( )
( )
−
+
=
	
	
	 using AB-3 integration with step size T = 0.1 s. Plot the exact and simulated response on the 
same graph. What is the damping ratio and natural frequency of the continuous-time system?
	8.22	 Derive expressions for
	
a.	 HI(z) for AM-2, AM-3, and AM-4 integrators given in Equations 8.167 through 8.169.
	
b.	 H(z) for AM-2, AM-3, and AM-4 integration of dx/dt = λx + u, (Re λ < 0) given in 
Equations 8.170 through 8.172.
	
c.	 λT in Equations 8.178 and 8.179.
	8.23	 Use the final value theorem (see Table 4.5) to obtain the final value for c(n)|n→∞, given in 
Equation 8.187.
	8.24	 Find an expression for the equivalent continuous-time system characteristic root λ* corre­
sponding to the z-plane pole resulting from AM-2 simulation of the system dx/dt = λx + u. 
Compute λ* and eλ (the characteristic root error) for the values of λ and T used in Example 
8.5. Are your answers consistent with the responses in Figures 8.28 and 8.29?
	8.25	 For RK-2 integration of dx/dt = λx + u resulting in Equation 8.198 for H(z),
	
a.	 Find the z-plane pole of the discrete-time system.
	
b.	 Find the equivalent continuous-time system characteristic root λ*.
	
c.	 Find asymptotic formulas for λ* and the fractional error in λ*, that is, eλ = λ*/λ − 1.
	8.26	 Find the difference equation for the RK-4 integrator in Section 6.2.
	8.27	 Derive the result in Equation 8.214 for the z-domain transfer function of the RK-3 integrator 
in Equations 8.209 through 8.212.
	8.28	 Derive the expression in Equation 8.224 for the fractional characteristic root error incurred 
using RK-4 integration.
	8.29	 Consider an unstable, second-order system with DC gain kss = 1, natural frequency ωn = 50 rad/s, 
and damping ratio ζ = −0.02. The initial conditions are x(0) = 1 and x( )
.
0
0
=
	
a.	 Use Simulink to simulate the transient response of the autonomous system using RK-2 
and RK-4 integration with a step size of T = 0.05 s.
	
b.	 Find the analytical solution and plot it along with the RK-2 and RK-4 simulated responses 
on the same graph.
	
c.	 Comment on the results. Does λT lie inside the RK-2 and RK-4 stability regions?
	8.30	 Polar coordinates of the AB-2 stability boundary are expressed parametrically in Equations 
8.156 and 8.158. Show that a parametric representation for the rectangular coordinates of the 
AB-2 stability boundary is given by

738
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
x
T
y
T
=
=
−
−
−
=
=
−
−
Re(
)
cos
cos
cos
Im(
)
sin
sin
cos
λ
θ
θ
θ
λ
θ
θ
θ
4
2
3
5
3
4
2
5
3
	
	
	 for 0 ≤ θ ≤ 2π.
8.4  MULTIRATE INTEGRATION
The topic of stiff systems was introduced in Section 6.5. Recall that the stiffness property is a mea­
sure of the variation in magnitude between the smallest and largest characteristic roots (eigenvalues 
of the coefficient matrix A in state variable model) of a linear or linearized system. When the char­
acteristic roots of a stiff system are as portrayed in Figure 8.38a, variable-step stiff integrators like 
MATLAB’s “ode15s,” “ode23s,” “ode23tb” are more computationally efficient in simulating 
the system dynamics than fixed-step numerical integrators owing to the excessively small time steps 
necessary with fixed-step integrators to assure numerical stability.
When the system poles are clustered in distinct regions of the s-plane as shown in Figure 8.38b, 
the overall continuous-time system is composed of two or more subsystems that effectively operate 
at different speeds. Different time scales are required to view the time histories of the individual 
subsystem state variables. The pole locations in Figure 8.38b implies the existence of three subsys­
tems, a relatively slow sixth-order subsystem associated with the six dominant poles nearest to the 
origin and imaginary axis, an intermediate speed fourth-order subsystem corresponding to the mid­
dle four poles, and a third-order fast subsystem arising from the three poles furthest from the origin.
Multirate integration methods are often effective in simulating continuous-time systems with 
identifiable subsystems like the one shown in Figure 8.38b. As the name suggests, numerical inte­
grators running at different frame rates (step sizes) are tailored to the individual subsystems. The 
explanation and example that follow are geared toward a two-time scale system, that is, a system 
with characteristic roots in two distinct regions located an order of magnitude apart from the origin 
of the s-plane. By implication, a subset of the system’s state variables are predominantly character­
ized by fast dynamics, that is, short time constants, high natural frequencies, and bandwidth, and 
the remaining states are just the opposite, namely, those associated with slow natural modes and 
longer transient responses.
Electromechanical control systems are frequently composed of fast and slow subsystems. 
Components in electronic controllers and sensors are much faster than the mechanical systems 
being controlled. The result is an overall system with fast and slow dynamics. Figure 8.39 is the 
block diagram of an aircraft pitch control system similar to one in Howe (1995). The airframe is 
modeled as a linear second-order system to account for the short-period longitudinal dynamics. 
The actuating signal for the controller is the difference between the commanded elevator deflec­
tion δi coming from the autopilot and the actual elevator deflection δe. The control surface actuator 
FIGURE 8.38  Stiff system (a) without distinct grouping of poles and (b) with distinct grouping of poles.

739
Advanced Numerical Integration
(lumped with the controller) moves the elevator. The pitch θ and pitch rate θ are fed back to the 
autopilot, which receives the pitch angle command θcom from the pilot.
The airframe dynamics and subsequent integrator constitute the slow subsystem, and the fast 
subsystem is composed of the remaining components. Since the slow and fast states are to be inte­
grated at different rates, it is necessary to define the slow and fast states and express the state deriva­
tives in terms of the states and the command input. We begin with the slow subsystem blocks and 
perform the steps necessary to generate an equivalent simulation diagram. The transfer function of 
the airframe dynamics is
	
θ
ω τ
ξω
ω
( )
( )
(
)
s
s
K
s
s
s
A
n
A
n
n
δe
=
+
+
+
2
2
2
1
2
	
(8.236)
leading to the differential equation
	
d
d
d
d
d
d
e
e
2
2
2
2
2
2



θ
ζω
θ
ω θ
ω τ
δ
ω δ
t
t
K
t
K
n
n
A
n
A
A
n
+
+
=
+
	
(8.237)
The simulation diagram is shown in Figure 8.40. The integrator outputs are chosen as the slow 
system states xl, x2, and x3.
The fast systems states are obtained by breaking the controller/control surface actuator transfer 
function into serial first-order blocks as shown in Figure 8.41. The simulation diagrams for the first-
order blocks are drawn using the techniques introduced in Section 2.4.
The simulation diagram with the fast states x4, x5, x6, and x7 is shown in Figure 8.42.
From Figures 8.39, 8.40, and 8.42, we are able to write algebraic and state derivative equation, 
which eventually lead to the following state model (see Exercise 8.31).
FIGURE 8.39  Block diagram of aircraft pitch control system.
FIGURE 8.40  Simulation diagram of airframe dynamics with states xl, x2, and x3.

740
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
x
Ax
B com
=
+ θ
	
(8.238)
	
y
Cx
D com
=
+
θ
	
(8.239)
where the matrices A, B, C, and D are given by
A
K
K
K K
A
n
A
n
A
n
n
C
=
−
−
−
0
0
0
0
0
0
0
1
0
0
0
0
0
2
1
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
1
0
2
2
2
ω
ω τ
ω
ω
ζ
−
−
−
−
−
−
−
−
K KK K
K KK K
K
p
K
z
p
K
KK K
KK
C
A
n
C
A
n
A
C
C
A
n




θ
θ
θ
ω
ω τ
ω
2
2
2
1
2
0
(
)
θ
ω τ
K
p
A
n
A
2
1
1
0
0
−
−






	
(8.240)
	
B
K K
K
C
C
=






=
0
0
0
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
0
,
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
1






=






,
D
0
0
0
0
0
0
0 	
(8.241)
Note that the output vector y = [y1 y2 y3 y4 y5 y6 y7]T is chosen to be identical to the state vector x. 
Decomposing the state vector x into a vector of slow states u = [u1 u2 u3]T = [x1 x2 x3]T and fast states 
w = [w1 w2 w3 w4]T = [x4 x5 x6 x7]T leads to a definition of the slow state derivatives u
f u w
=
(
)
,
 as
	


u
x
u
f
w
A u
A u
1
1
1
1 2 2
1 3 3
=
=
=
+
(
)
,
,
,
	
(8.242)
	


u
x
f u w
A u
2
2
2
2 3 3
=
=
=
(
)
,
,
	
(8.243)
FIGURE 8.41  Controller/control surface actuator.
FIGURE 8.42  Simulation diagram of fast subsystem with states x4, x5, x6, and x7.

741
Advanced Numerical Integration
	


u
x
f u w
A u
A u
A W
3
3
3
3 2 2
3 3 3
3 4
1
=
=
=
+
+
(
)
,
,
,
,
	
(8.244)
and the fast state derivative vector w
g u w
com
= (
)
, ,θ
 is
	


w
x
g u w
A w
com
1
4
1
4 5
2
=
=
=
(
)
, ,
,
θ
	
(8.245)
	


w
x
g u w
A w
com
2
5
2
5 6
3
=
=
=
(
)
, ,
,
θ
	
(8.246)
	


w
x
g u w
A u
A u
A u
A w
A w
A
com
3
6
3
6 1 1
6 2 2
6 3 3
6 4
1
6 6
3
6
=
=
+
+
+
+
+
=
(
)
, ,
,
,
,
,
,
θ
,7
4
6
w
B
com
+
θ
	
(8.247)
	


w
x
g u w
A u
A u
A u
w
A w
B
com
com
4
7
4
7 1 1
7 2 2
7 3 3
1
7 7
4
7
=
=
=
+
+
+
+
−
(
)
, ,
,
,
,
,
θ
θ
	
(8.248)
where the coefficients Ai,j are the elements in the coefficient matrix A in Equation 8.240.
Figure 8.43 portrays the slow and fast subsystems and the coupling between them. Once the 
system is decomposed into a slow and fast subsystem, the numerical integration routine and 
frame times (step size Ts for the slow subsystem and Tf for the fast one) must be selected. The 
numerical integrator to update the slow states is referred to as the “master” routine, and the 
integration method for advancing the fast states is called the “slave” routine (Palusinski 1986). 
The situation is illustrated in Figure 8.44 for the case where both “master” and “slave” are the 
classic RK-4 integrator (see Equations 6.60 through 6.64) with step sizes Ts and Tf ; respec­
tively. The quotient N = Ts/Tf is called the frame ratio. A single slow and fast state is shown for 
simplicity.
There are several choices when it comes to scheduling the order of execution for slow and fast 
frames. Referring to Figure 8.44, starting at time tn, we can take a half step through the slow 
frame starting from un in the direction defined by slope k1. The endpoints (tn, un) and (tn + 0.5Ts, 
un+1/2) determine the equation of a line that is interpolated to provide the value of the slow state at 
the beginning of each fast frame. The fast state is then advanced using RK-4 integration up until 
the time tn + 0.5NTf, generating values for wnN+1, wnN+2, …, wnN+0.5N. Next, the slow state derivative 
function k2 is evaluated at tn + 0.5Ts, using the predicted slow state un+1/2 along with the previously 
computed fast state w(n+0.5)N.
FIGURE 8.43  Slow and fast subsystem interaction.

742
Simulation of Dynamic Systems with MATLAB® and Simulink®
The step-by-step process for updating the slow state vector u and fast state vector w from tn to 
tn+1 is outlined in the following.
8.4.1  Procedure for Updating Slow and Fast States: Master/Slave = RK-4/RK-4
	
1.	Compute k1 = f(un, wnN)
	
2.	Compute un+1/2 = un + 0.5Tsk1
	
3.	Determine equation of lines connecting (tn, un) and (tn+1/2, un+1/2)
	
4.	Use “slave” RK-4 to integrate fast state from tn to tn + 0.5NTf based on interpolated values 
for slow state at beginning of fast frame times.
	
5.	Compute k2 = f(un+1/2, w(n+0.5)N)
	
6.	Compute ûn+1/2 = un + 0.5Tsk2
	
7.	Compute k3 = f(ûn+1/2, w(n+0.5)N)
	
8.	Compute ûn+1 = un + Tsk3
	
9.	Determine equation of line connecting and (tn + 0.5Ts, ûn+1/2) and (tn + 1, ûn+1)
	 10.	Use “slave” RK-4 to integrate fast state from tn + 0.5NTf to tn+1 = tn + NTf based on inter­
polated values for slow state at beginning of fast frame times.
	 11.	Compute k4 = f(ûn+1, w(n+1)N)
	 12.	Compute updated slow state u
u
k
k
k
k
n
n
+ =
+
+
+
+
1
1
2
3
4
1
6
2
2
(
)
The choice of frame times Tf and Ts depends on the integrators used for the “master” and “slave” 
routines as well as the dynamics of the slow and fast subsystems. Baseline values of the system 
parameters for the following discussion are (see Figure 8.39)
Airframe dynamics: KA = 10, τA = 0.8 s, ωn = 5 rad/s, ζ = 0.2
Controller/control surface actuator: Kc = 4 × 105, z = 12.5, p1 = p2 = 100
Autopilot gain: K = 0.1625, pitch rate feedback sensor gain: Kθ = 0 2.
Substituting the parameter values into Equation 8.240 gives the coefficient matrix A with eigen­
values (characteristic roots) equal to the closed-loop system poles. The result is
FIGURE 8.44  Multirate integration for one frame of slow state and N frames of fast state.

743
Advanced Numerical Integration
	
λ
λ
λ
λ
λ
1
2 3
4
5 6
7
0 67
4 31
6 48
21 97
11 07
37 46
=
=
±
=
=
±
=
– .
,
– .
.
,
–
.
,
–
.
.
,
,
,
j
j
–
.
148 59 	
Magnitudes of the system poles range from a low of |λ1| = 0.67 to a high of |λ7| = 148.59, dem­
onstrating the stiffness of the system. The magnitude of the remaining poles suggests the existence 
of a slow subsystem characterized by the first three poles λ1, λ2, and λ3, and a fast subsystem cor­
responding to the remaining four poles λ4, λ5, λ6, and λ7 located further from the origin than λ1, 
λ2, and λ3.
8.4.2  Selection of Step Size Based on Stability
Simulation of the seventh-order control system with classic RK-4 integration and step size T is sta­
ble provided the points λiT, i = 1, 2, …, 7 fall within the RK-4 stability region. Figure 8.45a shows 
the location of λiT, i = 1, 2, …, 7 when the integration step size T is 0.01 s. Since all 7 λiT points 
are inside the stability boundary, the RK-4 simulation is stable. The RK-4 simulation is marginally 
stable when the leftmost λiT point is located on the stability boundary at −2.785. The step Tmax is 
obtained from
	
−
= −
= −
⇒
=
max
.
.
.
max
λ1
148 59
2 785
0 0187
T
T
T
max
max
s 	
(8.249)
Figure 8.45b illustrates the case where T = Tmax = 0.0187 s. The leftmost value of λiT is on the 
RK-4 stability boundary at −2.785, leading to a z-plane pole of the discrete-time system located on 
the Unit Circle.
A Simulink diagram of the pitch control system is shown in Figure 8.46.
The diagram includes a “State-Space” block to implement the state equations in Equations 
8.238 through 8.241. The pitch input command is given by the exponential rise
	
θ
θ
τ
com
com
t
com
t
t
( )
(
),
=
−
≥
−
1
0
e
/
	
(8.250)
Im (λT)
3
(a)
(b)
RK-4 stability boundary
RK-4 stability boundary
2
1
0
–1
–2
–3
–4
–3
–2
λiTi, i = 1,..,7 (T = 0.01 s)
λiTi, i = 1,..,7 (T = 0.0187 s)
–1
0
Re (λT)
Im (λT )
3
2
1
0
–1
–2
–3
–4
–3
–2
–1
0
Re (λT)
λT plane
λT plane
FIGURE 8.45  RK-4 simulation boundary: (a) stable and (b) marginally stable.

744
Simulation of Dynamic Systems with MATLAB® and Simulink®
which represents a real-world approximation to a step input provided τcom is chosen appropriately, 
that is, 5τcom is set equal to 10–20 times the fixed integration step size.
Figure 8.47 shows the pitch responses from the scopes labeled “pitch (deg)” and “x1 theta 
(deg)” for the integration step sizes of 0.018 and 0.019 s. The numerical instability when T = 0.019 s 
is predicted by Equation 8.249.
FIGURE 8.46  Simulink diagram of aircraft pitch control system in Figure 8.39.
5
Pitch θ (deg), T = 0.018 s
4
3
2
θ (deg)
1
0 0
1
2
3
4
5
150
Pitch θ (deg), T = 0.019 s
100
50
θ (deg)
0 0
1
2
3
4
5
5
4
3
2
x1(deg)
1
0 0
1
2
t (s)
t (s)
3
4
5
150
Pitch x1 (deg), T = 0.019 s
Pitch x1 (deg), T = 0.018 s
100
50
x1(deg)
0 0
1
2
3
4
5
FIGURE 8.47  Simulink scope outputs showing stable (T = 0.018 s) and unstable (T = 0.019 s) pitch 
responses with RK-4 integration.

745
Advanced Numerical Integration
The reader can run the M-file “Ch8_Multi_Rate_Integ.m” with different system parameter val­
ues to compare outputs x1(t), x4(t), and x6(t) from the state variable model and the equivalent signals 
θ(t) and δe(t) and the output of the controller block.
8.4.3  Selection of Step Size Based on Dynamic Accuracy
The transfer function of the closed-loop system in Figure 8.39 can be obtained using block diagram 
reduction or other graphical techniques such as Mason’s gain formula for signal flow graphs. The 
result is
	
G
s
s
s
s
s
s
s
s
s
s
com
com
θ
θ
θ
θ
β
β
β
α
α
α
α
α
→
=
=
+
+
+
+
+
+
+
( )
( )
( )
2
2
1
0
7
6
6
5
5
4
4
3
3
2
2
1
0
s
s
+
+
α
α 	
(8.251)
where
	
β
ω
β
τ
ω
β
ω τ
0
2
1
2
2
2
1
=
=
+
=
KK K
z
KK K
z
KK K
c
A
n
c
A
A
n
c
A
n
A
,
(
)
,
	
(8.252)
	
α
α
α
0
2
1
2
2
2
2
1
=
=
+
+
=
+
KK K
z
KK K
z
K
z
KK K
KK K
K
c
A
n
c
A
n
c
n
A
c
A
n
A
c
ω
ω
ω
ω τ
θ
,
(
)

2
1
2
2
2
3
2
1
2
ζω
ω
ω
τ
ζω
ω
θ
n
n
c
n
A
c
n
c
n
c
z
KK K
z
K z
K
p p
KK
+
+
+
(
)


=
+
+
+

α
K K
K
p p
p
p
p p
p p
A
n
c
n
n
n
n
θ
ω
ζω
ω
ζω
ω
τΑ
2
4
1
2
2
1
2
5
1
2
1
2
2
2
2
α
α
=
+
+
+
=
+
+
(
)
(
)
α6
1
2
2
=
+
+





p
p
n
ζω
	
(8.253)
An equivalent implementation of the system with transfer function in Equation 8.251 consists of 
the input θcom(t) feeding parallel first-and second-order components with the outputs of each block 
summed to generate the pitch response θ(t). Partial fraction expansion of Equation 8.251 using 
numerical values for β0, β1, β2, and α0, α1 …, α6 based on the given system parameter values leads 
to the configuration shown in Figure 8.48.
Dashed lines identify the slow and fast subsystem components. Despite the fact that θ = x1 is 
classified as one of the slow states, it is clear from Figure 8.48 that θ(t) comprises both fast and slow 
components. However, it will be shown later that the fast component is negligible compared with 
the slow component.
The slow subsystem constants are
	
A
B
B
b
b
l =
=−
=
=
=
=
0 3373
0 67
0 7930
37 0325
8 6254
60 60
1
1
0
1
0
.
,
.
,
.
,
.
,
.
,
.
λ
57 	
and the fast subsystem constants are
	
C
D
D
d
1
4
1
0
1
1 7568
21 97
0 6477
49 8169
22 1383
=
=
=
=
=
– .
,
–
.
,
.
,
–
.
,
.
,
 
 
 
 
λ
d
E
0
1
7
1525 7
0 0328
148 59
=
=
=
. ,
.
,
–
.
 
 λ
	
The poles of the slow subsystem second-order component (roots of s2 + b1s + b0) are 
λ2,3 = −4.31 ± j6.48. The fast subsystem second-order component poles are roots of s2 + d1s + d0, 
namely, λ5,6 = −11.07 ± j37.46.

746
Simulation of Dynamic Systems with MATLAB® and Simulink®
Table 8.6 lists asymptotic formulas for the characteristic root errors resulting from the use of 
certain low-order numerical integrators. In particular, for RK-4 with step size T and integrator error 
coefficient eI = 1/120,
	
RK-4: e
*
e
λ
λ
λ
λ
λ
λ
=
−≈−
≈−
1
1
120
1
4
4
I
T
T
T
(
)
(
) ,

	
(8.254)
where λ* is the characteristic root of the equivalent continuous-time system.
For second-order systems Howe (1986) presents formulas for dynamic errors in damping ratio 
ζ, natural frequency ωn, and damped natural frequency ωd using first-order through fourth-order 
integration methods. For RK-4, the asymptotic expressions are
	
e
*
ζ
ζ
ζ
ζ
ζ
ζ
ζ
ω
=
−
≈−
−
+
4
3
2
3
5
4
(
)e (
)
I
nT
	
(8.255)
	
≈−
−
+
1
30
3
2
1
3
5
4
(
)(
) ,
ζ
ζ
ζ
ω
ω
n
n
T
T 
	
(8.256)
	
eω
ω
ω
ω
ζ
ζ
ω
n
n
n
n
I
nT
=
−
≈−−
+
*
(
)e (
)
1
8
8
2
4
4
	
(8.257)
	
≈−
−
+
1
120 1
8
8
1
2
4
4
(
)(
) ,
ζ
ζ
ω
ω
n
n
T
T 
	
(8.258)
	
eω
ω
ω
ω
ζ
ζ
ω
d
d
d
d
I
nT
=
−
≈−−
+
*
(
)e (
)
1
12
16
2
4
4
	
(8.259)
FIGURE 8.48  Parallel implementation of pitch control system transfer function.

747
Advanced Numerical Integration
	
≈−
−
+
1
120 1
12
16
1
2
4
4
(
)(
) ,
ζ
ζ
ω
ω
n
n
T
T 
	
(8.260)
For the first-order component in the slow subsystem in Figure 8.48,
	
eλ
λ
≈−
≈−
−
≈−
1
120
1
120
0 673
0 00171
1
4
4
4
4
(
)
(
.
)
.
T
T
T
	
(8.261)
The damping ratio, natural frequency, and damped natural frequency of the slow subsystem 
­second-order component are found by equating the term s2 + b1s + b0 and the standard form of a qua­
dratic characteristic polynomial s2 + 2ζωns + ωn
2. The results are ζslow = 0.554, (ωn)slow = 7.785 rad/s, 
and (ωd)slow = 6.481 rad/s. Substituting the values of ζslow and (ωn)slow into Equations 8.256, 8.258, and 
8.260 gives
	
eζ
ζ
ζ
ζ
ω
≈−
−
+
1
30
3
2
3
5
4
(
)[(
)
]
slow
slow
slow
n slowT
	
(8.262)
	
≈−
−
+
1
30 0 554
3 0 554
2 0 554
7 785
3
5
4
[ .
( .
)
( .
) ]( .
)
T
	
(8.263)
	
≈−18 1562
4
.
T 	
(8.264)
	
eωn
slow
slow
n slowT
≈−
−
+
1
120 1
8
8
2
4
4
(
)[(
)
]
ζ
ζ
ω
	
(8.265)
	
≈−
−
+
1
120 1
8 0 554
8 0 554
7 785
2
4
4
(
( .
)
( .
) ]( .
)
T
	
(8.266)
	
≈21 4777
4
.
T 	
(8.267)
	
eωd
slow
slow
n slowT
≈−
−
+
1
120 1
12
16
2
4
4
(
)[(
)
]
ζ
ζ
ω
	
(8.268)
	
≈−
−
+
1
120 1
12 0 554
16 0 554
7 785
2
4
4
[
( .
)
( .
) ]( .
)
T
	
(8.269)
	
≈35 9894
4
.
T 	
(8.270)
Choosing the RK-4 step size to limit the characteristic error in damped natural frequency to 0.025%,
	
Tslow
des
d
= 





= 





(e
)
.
.
.
ω
35 9894
0 00025
35 9894
1 4
1 4
/
/
= 0 0513
.
s 
	
(8.271)
The actual characteristic error in damped natural frequency will be slightly different from 
(
)
.
%
eωd
des = 0 025
 because (ωn)slow Tslow = 0.3997, which is not an order of magnitude less than 1, a 
requirement for the asymptotic formula in Equation 8.260.

748
Simulation of Dynamic Systems with MATLAB® and Simulink®
A similar procedure can be performed to determine an appropriate step size for RK-4 simu­
lation of the fast subsystem. Suppose the fast subsystem step size is selected to limit the sum of 
the characteristic root errors associated with the fast poles λ4 = −21.97 and λ7 = −148.59. From 
Equation 8.261,
	
e
e
λ
λ
λ
λ
4
7
1
120
4
4
7
4
4
+
≈−
+


≤
T
Edes
	
(8.272)
	
⇒−
−
+ −
≤
1
120
21 97
148 59
4
4
4
[(
.
)
(
.
)]T
Edes
	
(8.273)
Choosing Edes = −0.02%,
	
T
Tfast
4
4
4
0 0002
1 120
21 97
148 59
0 0026
≤
−
−
−
+ −
⇒
≤
.
(
)[(
.
)
(
.
) ]
.
/
s
	
(8.274)
Once again, there will be a slight difference between eλ4 + eλ7 and Edes when Tfast = 0.0026 s, 
because the product |λ7Tfast| = |(−148.589)0.0026| = 0.3936 is not significantly less than 1 as 
required in the asymptotic formula of Equation 8.254.
Henceforth, multirate integration using RK-4 for both slow and fast systems will be performed 
with Tf = 0.0025 s and Ts = 0.05 s resulting in a frame ratio N = 20.
8.4.4  Analytical Solution for State Variables
In most cases, analytical solutions for the state variables are not available with the possible excep­
tion of linear (or linearized) system models and elementary input signals. An advantage of know­
ing the analytical solution for the state variables is that it can serve as a benchmark for comparing 
results obtained by different simulation-based approaches. Consequently, the analytical solution for 
a subset of the state variables in the pitch control system will be determined with this purpose in 
mind.
Laplace transforming the pitch command signal given in Equation 8.250 gives
	
θ
β
β
β
α
α
α
α
α
α
α
( )s
s
s
s
s
s
s
s
s
s
=
+
+
+
+
+
+
+
+
+






2
2
1
0
7
6
6
5
5
4
3
3
3
2
2
1
0
θ
τ
com
com
s
s
(
)
+1 	
(8.275)
Choosing (θcom = °
5 , τcom = 0.01 s and substituting the baseline parameter values into Equations 
8.252 and 8.253 determine θ(s). Using MATLAB’s “conv” function to expand the denominator into 
a ninth-order polynomial and then the “residue” function results in the partial fraction expansion 
of θ(s). Converting pairs of terms with complex poles and coefficients into real terms results in the 
analytical pitch response
	
θ
θ
θ
θ
( )
( )
( )
( )
t
t
t
t
slow
fast
forced
=
+
+
	
(8.276)
where θslow(t) comprises the slow subsystem natural mode terms,
	
θslow
t
t
t
t
( )
{
[
.
.
cos( .
)
.
.
.
=
+
−
−
−
−
−
5
0 5047
0 6150
6 4812
0
0 673
4 313
e
e
3474
6 4812
sin( .
)]}
t
	
(8.277)

749
Advanced Numerical Integration
θfast(t) is made up of fast subsystem natural mode terms,
	
θ fast
t
t
t
t( )
{
[
.
.
.
.
.
=
+
+
−
−
−
5 0 0004548
0 1025
0
148 589
21 975
11 069
e
e
e
.
cos(
.
)
.
sin(
.
)]}
0204
37 4583
0 0388
37 4583
t
t
+
	
(8.278)
and θforced(t) includes the input mode terms
	
θ forced
t
t( )
.
=
−
(
)
−
5 1
0 0035
100
e
	
(8.279)
The exponential decay in the forced component results from the exponential term in the com­
mand input (see Equation 8.250).
Plots of the slow component θslow(t) and fast component θfast(t) shown in the top half of Figure 8.49 
suggest that the fast component contributes a negligible amount to the overall response. Hence, θ(t) 
is appropriately classified as a slow subsystem state variable.
The bottom half of Figure 8.49 shows the forced component given in Equation 8.279 and the total 
pitch response comprising the slow, fast, and forced components. Note that on the time scale used 
in Figure 8.49, the forced component appears to be a step input. In reality, it contains an exponential 
rise term with time constant τcom = 0.01 s.
A similar approach can be used to find the analytical solution for the fast state variable x4 = δe. 
The transfer function from θcom(s) to δe(s) is
	
G
s
s
s
s
s
s
s
s
s
com
s
com
θ
δ
δ
θ
γ
γ
γ
γ
γ
α
α
→
=
=
+
+
+
+
+
+
e
e
( )
( )
( )
4
3
3
3
2
2
1
0
7
6
6
5
5 +
+
+
+
+
α
α
α
α
α
4
4
3
3
2
2
1
0
s
s
s
s
	
(8.280)
	
γ
γ
γ
ζω
γ
ζω
γ
ω
ω
0
1
2
3
4
2
2
0
2
2
=
=
=
+
=
+
=
,
,
,
,
(
)
(
)
KK
z
KK
z
KK
z
KK
c
c
n
c
n
c
n
n
	
(8.281)
and the analytical solution for the elevator deflection δe(t) is
	
δ
δ
δ
δ
e
e slow
e
fast
e
forced
t
t
t
t
( )
(
)
( )
(
)
( )
(
)
( )
=
+
+
	
(8.282)
Slow and fast components of pitch response θ (t)
0
2
0
–2
–4
–6
θslow (t)
θfast (t)
θfast and θslow (deg)
1
2
3
4
5
Forced component and total pitch response
0
6
4
2
0
θ (t)
θforced (t)
θforced and θ (deg)
1
2
t (s)
3
4
5
FIGURE 8.49  Total pitch response and its components.

750
Simulation of Dynamic Systems with MATLAB® and Simulink®
  (
)
( )
{ .
[ .
cos ( .
)
.
.
δe slow
t
t
t
e
e
t
=
+
−
−
−
5 0 0709
0 0844
6 4812
0
0 673
4 313
.
sin( .
)]}
1440
6 4812t
	
(8.283)
	
(
)
( )
{ .
e
.
e
[
.
.
.
.
δe
e
fast
t
t
t
t =
+
+
−
−
−
−
5 0 050
0 25
0 2
148 589
21 975
11 069
842
37 4583
0 1644
37 4583
cos(
.
)
.
sin(
.
)]
t
t
−
}
	
(8.284)
	
(
)
( )
(
e
)
eδ
forced
t
t =
−
−
5
0 1733
100
.
	
(8.285)
The total response δe(t) and its components (δe)slow(t), (δe)fast(t), and (δe)forced(t) are shown in 
Figure 8.50.
From the top graph, it is clear that both fast and slow components are present in δe(t). Despite 
the existence of an appreciable slow component, δe(t) is nonetheless identified as a fast state vari­
able. Multirate simulation of the overall system must integrate δe(t) at the fast frame rate due to the 
significant high-frequency component (δe)fast(t).
8.4.5  Multirate Integration of Aircraft Pitch Control System
The MATLAB M-file “Ch8_multi_rate_integ.m” includes code for implementing multirate inte­
gration of Equations 8.242 through 8.248 with RK-4 as the “master” and “slave” integration 
routines.
Figure 8.51 shows Simulink and multirate integration results for the slow states u1 = x1, u2 = x2, 
and u3 = x3. The Simulink model was integrated using RK-4 with integration step size identical 
to the fast frame time Tf = 0.0025 s. The slow frame time was Ts = 0.05 making the frame ratio 
N = 20.
The Simulink and multirate simulation responses are in general agreement; however, the accu­
racy of each can only be established by comparison with the analytical solutions. Accordingly, 
Figures 8.52 and 8.53 show the analytical solutions for x1(t) and x2(t) on the same graph with the 
RK-4 and multirate simulation results. For purposes of clarity, not all simulated points are shown in 
FIGURE 8.50  Total elevator deflection and its components.

751
Advanced Numerical Integration
the graph. The analytical solution for x1(t) = θ(t) is given by Equations 8.276 through 8.279, and the 
one for x2(t) is obtained in the MATLAB M-file “Ch8_multi_rate_integ.m.”
From Figures 8.52 and 8.53, it is clear that the simulated responses using Simulink with RK-4 
and step size Tf = 0.0025 s are virtually identical with the analytical solutions. As expected, the 
responses obtained using multirate integration with RK-4/RK-4 and Tf = 0.0025 s, Tf = 0.05 s are 
not as accurate.
Simulated responses of two of the fast states, namely, w1 = x4 and w2 = x5, obtained using 
Simulink and multirate integration are shown in Figure 8.54. The M-file “Ch8_multi_rate_integ.m” 
plots the remaining fast states w3 = x6 and w4 = x7.
The analytical solution for x4 = δe, the elevator deflection, is shown in Figure 8.55 along with the 
responses from Simulink and multirate integration. Once again, the Simulink RK-4 and analytical 
5
4
3
Analytical
Simulink RK-4 (T = 0.0025 s)
Multirate RK-4/RK-4 (Tf = 0.0025 s, Ts = 0.05 s)
Frame ratio N = 20
2
1
0
0
1
2
3
t (s)
x1 (t) vs. t
x1 (deg)
4
5
FIGURE 8.52  Comparison of analytical, Simulink, and multirate x1(t) responses.
Simulink and multirate simulation of slow states x1, x2 and x3
5
2.5
0
0.015
0.01
0.005
0
10 ×10–4
×10–4
5
0
–5
10
5
0
–5
0.015
0.01
0.005
0
0
1
2
3
x1-Simulink RK-4
x2-Simulink RK-4
x3-Simulink RK-4
4
5
5
2.5
0
0
1
2
3
u1-Multirate RK-4/RK-4
u3-Multirate RK-4/RK-4
4
5
0
1
2
3
4
5
0
1
2
3
4
5
0
1
2
t (s)
t (s)
3
4
5
0
1
2
3
4
5
u2-Multirate RK-4/RK-4
FIGURE 8.51  Simulation of slow states using Simulink and multirate integration.

752
Simulation of Dynamic Systems with MATLAB® and Simulink®
responses are indistinguishable from each other, while the multirate solution deviates from both 
during the transient response period.
Multirate integration introduced errors in the transient response of each state variable in the 
aircraft pitch control system. The errors can be reduced by decreasing the frame ratio; however, the 
benefits from using multirate integration are lessened. An acceptable trade-off is generally possible.
Significant increases in performance are achieved using multirate integration for multiple time 
scale systems where the predominant number of states are associated with the slow subsystem(s). 
Moreover, the computational savings can be substantial when the times required to compute 
the slow subsystem state derivatives are appreciable due to the complex nature of the derivative 
­functions or possibly due to the use of table lookups involved in the computation process.
0.75
0.5
0.25
0
0.2
0.1
0
–0.1
–0.2
0.2
0.1
0
–0.1
–0.2
0
0.25
0.5
t (s)
0.75
1
0
0.25
0.5
t (s)
0.75
1
0
1
2
3
4
5
0
1
2
3
4
5
0.75
Simulink and multirate integration of fast states
x4-Simulink RK-4
w1-Multirate RK-4/RK-4
x5-Simulink RK-4
w2-Multirate RK-4/RK-4
0.5
0.25
0
FIGURE 8.54  Simulation of fast states using Simulink and multirate integration.
0
0.014
0.012
Multirate RK-4/RK-4 (Tf = 0.0025 s, Ts = 0.05 s)
Simulink RK-4 (T = 0.0025 s)
Analytical
Frame ratio N = 20
0.01
0.008
0.006
x2
x2 vs. t
0.004
0.002
0
1
2
3
t (s)
4
5
FIGURE 8.53  Comparison of analytical, Simulink, and multirate x2(t) responses.

753
Advanced Numerical Integration
8.4.6  Nonlinear Dual Speed Second-Order System
We now turn our attention to a second-order stiff system with a fast and a slow state. Furthermore, 
the system dynamics are nonlinear and the stiffness varies with the operating point of the linearized 
system. The system consists of two cylindrical tanks in series as shown in Figure 8.56.
Flow F0(t) into the first tank (open at the top) is completely controlled by a regulating valve in the 
inflow line. The outflow F2(t) from the second tank (sealed at the top) is a function of valve opening 
in the outflow line along with the liquid pressure at the bottom of the tank.
The system is modeled by differential and algebraic equations. Dynamics of the first tank are 
governed by
	
A
t H t
F
t
F t
H t
L
1
1
12
0
1
1
d
d
( )
( )
( ),
( )
+
=
≤
	
(8.286)
FIGURE 8.55  Comparison of analytical, Simulink, and multirate x4(t) responses.
FIGURE 8.56  System of two different capacity tanks in series.

754
Simulation of Dynamic Systems with MATLAB® and Simulink®
where
Al is the cross-sectional area
L1 is the height of the first tank
The flow from the first tank into the second tank F12(t) depends on the pressure differential 
between the bottom of the first tank and the top of the second tank.
	
F
t
c p
H t
L
p t
p
H t
L
p t
12
1
0
1
2
2
1 2
0
1
2
2
0
0
( )
[
( )
( )]
,
( )
( )
,
o
=
+
−
−
+
−
−
>
γ
γ
γ
γ
/
therwise




	
(8.287)
where
c1 is a constant related to the fluid resistance in the line connecting the tanks
p0 is atmospheric pressure (14.7 psi)
γ is the specific weight of water (62.4 lb/ft3)
The air pressure above the liquid in the sealed tank p2(t) is related to the liquid level H2(t) accord­
ing to
	
p
L
L
H
p
2
2
2
2
0
=
−






	
(8.288)
Equation 8.288 assumes that the air pressure in the sealed tank obeys the relationship p2V2 = con­
stant and that p2 = P0 when H2 = 0. Hence,
	
p A L
p A L
H
0
2
2
2
2
2
2
=
−
(
) 	
(8.289)
The differential equation for the second tank is
	
A
t H t
F t
F
t
H t
L
2
2
2
12
2
2
d
d
( )
( )
( ),
( )
+
=
≤
	
(8.290)
The flow out of the second tank is governed by the algebraic relation
	
F t
c
p t
H t
p
2
2
2
2
0
1 2
( )
[{
( )
( )}
]
=
+
−
γ
/
	
(8.291)
where c2 is a constant related primarily to the physical construction of the valve in the discharge line 
and its percent opening.
Stiffness is a property of linear systems relating the magnitudes of the fast poles (eigenvalues) to 
the slower poles. We can linearize the nonlinear system modeled by Equations 8.286 through 8.291 
about a steady-state operating point (H H
1
2
,
) corresponding to a constant input flow F t
t
F
0
0
0
( )
,
.
=
≥
At steady state, F
F
F
2
0
2
=
∞=
(
)
 and it follows from Equation 8.291
	
F
p
H
F
c
p
2
2
2
0
2
0
1 2
=
+
=
−
[
)
]
γ
/
	
(8.292)
	
⇒
−






+
−






=
c
L
L
H
p
H
p
F
2
2
2
2
0
2
0
1 2
0
γ
/
	
(8.293)

755
Advanced Numerical Integration
Rearranging Equation 8.293 leads to a quadratic equation in H2,
	
γ
γ
H
p
L
F
c
H
F
c
2
2
0
2
0
2
2
2
0
2
−
+
+












+






2
2
0
L =
	
(8.294)
It is left as an exercise to show that the steady-state operating level in the first tank is
	
H
L
F
c
H
L
H
p
1
2
0
1
2
2
2
2
0
1
=
+





+
−












γ
	
(8.295)
Given F0, Equations 8.294 and 8.295 can be solved in that order to find the operating point levels 
H H
2
1
,
 and ultimately the remaining dependent variable operating point values, namely, F
F
12
2
,
, and 
p2.
The nonlinear system model in Equations 8.286 through 8.291 can be reduced to
	
d
d
H
t
f H H F
1
1
1
2
0
=
(
,
,
)
	
(8.296)
	
=
−
−
−
−

















1
1
0
1
1
2
2
2
2
0
1 2
A F
c
H
L
H
L
H
p
γ(
)




≤
,
H
L
1
1
	
(8.297)
	
d
d
H
t
f H H F
2
2
1
2
0
=
(
,
,
)
	
(8.298)
	
=
−
−
−














−
1
2
1
1
2
2
2
2
0
1 2
2
2
2
A c
H
L
H
L
H
p
c
H
L
γ(
)
−






+














H
p
H
2
0
2
1 2
γ
	
(8.299)
The linearized state model is
	
d
dt
H t
A H t
B
F t
∆
=
∆
+ ∆
( )
( )
( )
0
	
(8.300)
	
∆
∆
∆
y t
C
H t
D
F t
( )
( )
( )
=
+
0
	
(8.301)
where
	
∆
= ∆
∆





=
−
−






H t
H t
H t
H t
H
H t
H
( )
( )
( )
( )
( )
1
2
1
1
2
2 	
(8.302)
	
∆
=
∆
∆
∆
∆
∆






y t
H t
H t
F
t
F t
p t
( )
( )
( )
( )
( )
( )
1
2
12
2
2

=
−
−
−
−
−





H t
H
H t
H
F
t
F
F t
F
p t
p
1
1
2
2
12
12
2
2
2
2
( )
( )
( )
( )
( )
	
(8.303)

756
Simulation of Dynamic Systems with MATLAB® and Simulink®
The coefficient matrix A comprises the first partial derivatives
	
A
H f H H F
11
1
1
1
2
0
=
∂
∂
(
,
,
)
	
(8.304)
	
= −
−
−
−












−
γc
A
H
L
H
L
H
p
1
1
1
2
2
2
2
0
1 2
2
γ(
)
	
(8.305)
	
A
H
f H H F
12
2
1
1
2
0
=
∂
∂
(
,
,
)
	
(8.306)
	
=
−
−
−












−
−
p c
A
H
L
H
L
H
p
L
L
H
0 1
1
1
2
2
2
2
0
1 2
2
2
2
2
γ(
)
(
)2





	
(8.307)
	
A
H f H H F
21
1
2
1
2
0
=
∂
∂
(
,
,
)
	
(8.308)
	
=
−
−
−












−
γc
A
H
L
H
L
H
p
1
2
1
2
2
2
2
0
1 2
2
γ(
)
	
(8.309)
	
A
H
f H H F
22
2
2
1
2
0
=
∂
∂
(
,
,
)
	
(8.310)
	
= −
−
−
−












−
−
p L c
A
H
L
H
L
H
p
L
H
0
2 1
2
1
2
2
2
2
0
1 2
2
2
1
γ(
)
(
2
2)





	
	
−
−






+






−
+


−
c
A
H
L
H
p
H
p L
L
H
2
2
2
2
2
0
2
1 2
0
2
2
2
2
2
γ
(
)
γ




	
(8.311)
The components of the input matrix B and output matrix C are obtained from partial derivatives 
as well (see Exercise 8.41).
EXAMPLE 8.8
The baseline numerical values of the system parameters are
	
R
L
c
A
R
R
1
1
1
3
2 1 2
1
2
2
1
2
15
50
4
225
=
=
=
=
=
=
ft
ft
ft /min/(lb/ft )
ft
,
,
,
/
π
π
5
7 5
2
56 25
2
2
3
2 1 2
2
2
2
2
ft
ft
 ft /min/(lb/ft
ft
,
.
,
)
,
.
/
L
c
A
R
=
=
=
=
π
π
	
and the baseline inflow under steady-state operating conditions is F0
3
60
=
ft /min.
For the given baseline conditions,
	
a.	Find the steady-state operating point values H H
F
F
1
2
12
2
,
,
,
, and p2.
	
b.	Compute the numerical values of the components of matrix A.
	
c.	Find the eigenvalues of A and compute the stiffness ratio.

757
Advanced Numerical Integration
	
d.	Draw a Simulink diagram for simulating the system dynamics.
	
e.	Use the MATLAB “linmod” function to approximate the matrices A, B, C, and D.
	
f.	Compare the linearized system response and the simulated response of the nonlinear 
system for the case where the system is initially in steady state and the inflow to the first 
tank is given by
	
F t
F
t
F
t
0
0
0
50
5
50
( )
,
,
min
=
≤
−
>




	
(8.312)
	
g.	Determine the new steady-state levels in both tanks predicted by the nonlinear model 
and the linearized model.
	
a.	The steady-state operating levels are obtained from Equations 8.294 and 8.295 in the 
M-file “Ch8_Ex8_8.m.” The results are
	
H
H
1
2
23 52
2 01
=
=
.
.
ft,
ft 	
	
F
F
12
2
3
60
=
=
ft /min 	
	
p2
2
2891 4
=
. lb/ft 	
 	
b.	The same M-file contains code for evaluating the components of matrix A using Equations 
8.304 through 8.311. The result is
	
A = −
−






0 0118
0 0993
0 1059
1 1440
.
.
.
.
	
	
c.	The eigenvalues of A are λ1 = −0.00255151 and λ2 = −1.15318422, and the stiffness 
ratio of the system linearized about the given steady-state operating point is
	
λ
λ
2
1
1 15318422
0 00255151
451 96
= −
−
=
.
.
.
	
	
	 The time constants of the linearized system are
	
τ
λ
1
1
1
1
0 00255151
391 92
= −
−
−
=
.
.
min
	
	
τ
λ
2
2
1
1
1 15318422
0 867
= −
−
−
=
.
.
min
	
	
	 demonstrating the dual time scales involved.
	
d.	A Simulink diagram is shown in Figure 8.57.
	
e.	MATLAB statements in “Ch8_Ex8_8.m” for employing the “linmod” function are
	
[sizes, X0, states] = TwoTanks ([],[],[],0)
	
H_opert = [Hl_ss;H2_ss];
	
u0 = F0;
	
[A, B, C, D] = linmod(‘TwoTanks_linmod’, H_opert, u0)

758
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	 The first line returns the variable “states,” which identifies the limited integrator out­
puts “H1” and “H2” as the first and second states, respectively. The last line refers to a 
Simulink model file “TwoTanks_linmod.mdl,” which is similar to “TwoTanks.mdl” 
shown in Figure 8.57 except an input port block replaces the “Constant” block with 
parameter ”F0” and the addition of five output port blocks to identify the system out­
puts. The last line produces the linearized system matrices
	
A
B
= −
−






=






0 0118
0 0993
0 1059
1 1440
0 0014
0
.
.
.
.
,
.
,
  
   C =
−






1
0
0
1
8 3200
70 2135
0
19 6334
0
526 6010
.
.
.
.

=






,   D
0
0
0
0
0 	
	
	   Note that the coefficient matrix A using ”linmod” is identical (to at least four places 
after the decimal point) to the previous result based on the analytical expressions for the 
partial derivatives in Equations 8.304 through 8.311.
	
f.	The Simulink diagram in Figure 8.57 is supplemented with additional blocks to gener­
ate the deviation input variable ∆F t
F t
F
0
0
0
( )
( )
=
−
 into a “state-space” block with 
output Δy(t) = [ΔH1(t) ΔH2(t) ΔF12(t) ΔF2(t) Δp2(t)]T. The linearized system out puts 
H t
t
H
H
1
1
1
( )
( )
=
+∆
 and H t
H t
H
2
2
2
( )
( )
=
+∆
 are compared with the simulated nonlin­
ear system responses in Figures 8.58 and 8.59. RK-4 simulation with a short time step 
T = 0.1 s was used to generate accurate approximations of the nonlinear responses. 
The Simulink model file is “TwoTanks_NL_and_L.mdl.” The linearized responses are 
approaching steady state after 1500 min in agreement with the larger time constant of 
391.92 min.
	
g.	The new steady-state levels established when the inflow is held constant at 55 ft3/
min are obtained from Equations 8.294 and 8.295. The result is (H1)ss = 20.89 ft and 
(H2)ss = 1.76 ft. From Equation 8.300 at steady state,
	
∆
∆
H
A B F
ss = −
−1
0 	
(8.313)
FIGURE 8.57  Simulink diagram for simulation of two-tank system with stiff dynamics.

759
Advanced Numerical Integration
	
= −−
−











−
=
−
0 0118
0 0993
0 1059
1 1440
0 0014
0
5
1
.
.
.
.
.
[
]
−
−






⇒
=
+
=
+ −
=
2 7501
0 2547
23 52
2 75
1
1
1
.
.
(
)
(
)
.
(
.
)
  
H
H
H
ss
ss
∆
20 77
2 01
0 25
1 76
2
2
2
.
(
)
(
)
.
(
.
)
.
  
 ft
⇒
=
+
=
+ −
=
H
H
H
ss
ss
∆
	
	
	   It is clear from Figures 8.58 and 8.59 that the linearized system approximation to the 
nonlinear system about the given steady-state operating point is more than adequate 
when the perturbation in F0(t) about F0 is limited to −5 ft3/min.
	
	   Figure 8.60 contains graphs showing how the steady-state operating point levels 
H H
p
1
2
2
,
,
 vary with changes in the flow F0. The baseline operating point in Example 8.8 
with F0
3
60
=
ft /min is also shown.
	
	   The stiffness of the linearized system is shown in the top left corner. Note how the stiff­
ness increases from a little over 200 to around 950 before the first tank starts to overflow 
FIGURE 8.59  Tank 2 nonlinear and linearized system level responses.
FIGURE 8.58  Tank 1 nonlinear and linearized system level responses.

760
Simulation of Dynamic Systems with MATLAB® and Simulink®
when the level reaches L1 = 50 ft. At that point, the linearized system eigenvalues are 
−0.0015 and −1.4724, resulting in natural modes with time constants of approximately 
0.679 and 645.8 min. The large difference in time constants of the linearized system 
results primarily from the significant disparity in the capacities of the two tanks.
8.4.7  Multirate Simulation of Two-Tank System
In view of the large difference between the linearized system time constants, multirate integration 
offers the possibility of reducing simulation execution time without significant loss of accuracy. The 
first step is to choose the “master” and “slave” integration routines and determine the slow and fast 
frame times. The aircraft pitch example used the one-step RK-4 for “master” and “slave.” For this 
example, the multistep AB-2 integrator will be used to integrate both the slow and fast states.
AB-2 integration is a popular numerical integrator, particularly in applications involving ground 
vehicle, aircraft, missile, ship, power plant, and chemical process simulators where a real-time 
solution of the model equations is required. Real-time numerical integration is the subject of the 
following section.
Looking at the AB stability regions in Figure 8.21 of the previous section, the simulation step 
size T is limited by the condition λT = −1 for AB-2 integration of a linear first-order continuous-
time system with characteristic root λ. Consequently, for small changes from the baseline operating 
point of the two-tank system, that is, (F0
3
60
=
ft /min; H1
23 52
=
.
ft, H2
2 01
= .
ft), AB-2 simula­
tion will be stable provided
	
λT
T
T
= −
<−⇒
<
(
.
)
.
min
1 1532
1
0 8672
	
Figure 8.61 shows the results of AB-2 simulation of the system when the inflow F0(t) = 55 ft3/
min, t ≥ 0.
The initial tank levels are the steady-state values when F0
3
60
=
ft /min. The two plots on the 
left are the result of selecting the step size T = 0.1 min while the graphs on the right correspond to 
an integration step of T = 0.87 min, just slightly larger than the upper limit for AB-2 stability. The 
unstable nature of both tank level responses when T = 0.87 min is apparent. The unstable responses 
Linearized system stiffness
Steady-state tank 1 level
Steady-state tank 2 level
Steady-state tank 2 air pressure
Operating Pt
Operating Pt
Operating Pt
Operating Pt
1000
60
30
25
20
15
10
5
0
45
30
15
0
800
600
400
200
0
4
3
2
1
0
0
20
40
60
80
100
20
40
60
80
100
0
0
20
40
F–
0 (ft3/min)
H–
2 (ft)
H–
1 (ft)
p–
2 (psi)
F–
0 (ft3/min)
60
80
100
20
40
60
80
100
0
Stiffness
FIGURE 8.60  Graph of linearized system stiffness and nonlinear system steady-state operating 
characteristics.

761
Advanced Numerical Integration
are similar to the stable transient responses up to a point. All graphs were generated in M-file 
“Ch8_TwoTanks_AB2.m.”
The next set of graphs in Figure 8.62 illustrate AB-2 simulation of tank level responses when both 
tanks are initially empty and the inflow is a step input described by F t
t
F
0
3
0
60
0
( )
,
=
≥
=
ft /min
. 
The fluid level H2(t) remains at zero until the first tank level.
H1(t) reaches a height of L2 = 7.5 ft, that is, high enough to push fluid from the bottom of the first 
tank up to the top of the second tank. Thus, F12(t) = 0 as long as H1(t) < L2.
Due to the magnitude of the step, the system variables H1(t) and H2(t) are not confined to a small 
region about the initial steady-state operating point (
,
)
( , )
H H
1
2
0 0
=
. Consequently, a single linear­
ized model to accurately predict deviations in both levels is not valid, and the discussion in Section 
7.4 dealing with multiple linearized models is applicable.
H2 (ft)
2.5
20
0
1000
2000
3000
0
1000
2000
3000
21
22
T = 0.1 min
AB-2 simulation of tank 1 level, F0(t) = 55 ft3/min, t ≥ 0, H1(0) = 23.52 ft
AB-2 simulation of tank 2 level, F0(t) = 55 ft3/min, t ≥ 0, H2(0) = 2.01 ft
T = 0.87 min
23
24
21
22
23
24
2
1.5
1
0.5
0
H2 (ft)
H1 (ft)
H1 (ft)
2.5
2
1.5
1
T = 0.1 min
T = 0.87 min
0.5
0
0
1000
2000
t (min)
3000
0
1000
2000
t (min)
3000
FIGURE 8.61  Stable and unstable AB-2 simulation for H
H
1
1
0
( ) =
, H
H
2
2
0
( ) =
.
H2 (ft)
2.5
3
0
1000
2000
3000
0
1000
2000
3000
T = 0.1 min
AB-2 simulation of tank 1 level, F0(t) = 60 ft3/min, t ≥ 0, H1(0) = 0 ft
AB-2 simulation of tank 2 level, F0(t) = 60 ft3/min, t ≥ 0, H2(0) = 0 ft
T = 0.87 min
30
25
20
15
10
5
0
30
25
20
15
10
5
0
2
1.5
1
0.5
0
H2 (ft)
H1 (ft)
H1 (ft)
2.5
3
2
1.5
1
T = 0.1 min
T = 0.87 min
0.5
0
0
1000
2000
t (min)
3000
0
1000
2000
t (min)
3000
FIGURE 8.62  Stable and unstable AB-2 simulation for H1(0) = H2(0) = 0.

762
Simulation of Dynamic Systems with MATLAB® and Simulink®
Multirate integration of the nonlinear two-tank system with AB-2 integration as the “mas­
ter” routine and AB_2 integration as the “slave” routine is straightforward to implement (see 
“Ch8_TwoTanks_Multirate_AB2.m”). Time histories of each tank level when the fast frame time 
Tf = 0.25 min and the slow frame time Ts = 25 min (frame ratio N = Ts/Tf = 100) are shown in 
Figure 8.63. Note that every 200th point in the H2(t) response is plotted in the lower graph.
Results from another multirate simulation run are shown in Figure 8.64. The fast state H2(t) 
was updated using AB-2 integration with frame time Tf = 0.1 min while the slow state H1(t) was 
advanced by AB-2 integration every Ts = 100 min. The frame ratio was 1000. Every 200th point in 
the fast subsystem is plotted.
The solid lines in Figures 8.63 and 8.64 were obtained from Simulink RK-4 integration of the 
state equations with integration step size T = 0.1 min. Due to the small step size, they serve as 
25
20
15
10
5
0
0
200
400
600
800
1000
1200
1400
1600
0
200
400
600
800
t (min)
Simulated tank 2 level vs. time
Simulated tank 1 level vs. time
Simulink RK-4 (T = 0.1 min)
Multirate integration AB-2/AB-2 (Ts = 25 min, Tf = 0.25 min)
Simulink RK-4 (T = 0.1 min)
Multirate integration AB-2/AB-2 (Ts = 25 min, Tf = 0.25 min)
1000
1200
1400
1600
2
1.5
1
0.5
0
H1 (ft)
H2 (ft)
FIGURE 8.63  Multirate simulation (AB-2/AB-2) of nonlinear two-tank system (Ts = 25 min, Tf = 0.25 min, 
N = 100).
Simulated tank 1 level vs. time
Simulated tank 2 level vs. time
Multirate integration AB-2/AB-2 
(Ts = 100 min, Tf  = 0.1 min)
Multirate integration AB-2/AB-2
(Ts = 100 min, Tf  = 0.1 min)
Simulink RK-4 (T = 0.1 min)
Simulink RK-4 (T = 0.1 min)
0
0
0
5
10
15
20
25
0.5
1.5
2
1
200
400
600
800
t (min)
1000
1600
1400
1200
0
200
400
600
800
1000
1600
1400
1200
H2(ft)
H1(ft)
FIGURE 8.64  Multirate simulation (AB-2/AB-2) of nonlinear two-tank system (Ts = 100 min, Tf = 0.1 min, 
N = 1000).

763
Advanced Numerical Integration
accurate approximations to the exact solutions of the nonlinear state equations. Note that the AB-2/
AB-2 response for H1(t) is quite accurate in both cases; however, the level response H2(t) is superior 
in the first case where the frame ratio is less. Exercise 8.45 explores the effect of frame ratio on the 
overall accuracy of the multirate simulation results.
8.4.8  Simulation Trade-Offs with Multirate Integration
The case for multirate integration is based on the reduced number of derivative evaluations of the 
slow state required compared with the number of evaluations required when both slow and fast 
states are integrated at the same frame rate. The savings in execution time can be dramatic for 
high-order systems in which the majority of the state variables are associated with the slow sub­
system. Even low-order systems experience significant reduction in simulation time when the slow 
derivatives are computationally more intensive. Be aware that real-world derivative functions often 
involve more than a few simple calculations. Logical branching, multidimensional lookup tables 
along with the sheer number of model equations to be evaluated contribute to the duration as well 
as uncertainty in the cpu time required to compute the state derivatives.
Without multirate integration, the total number of frames (integration steps) is given by tfinal/T, 
where tfinal is the simulation time and T is the integration step size. In the simplest case with only 
two states, fixed execution times of each derivative function and single-pass integration routines for 
“master” and “slave,” the reduction in execution time from implementing multirate integration is 
straightforward. Suppose the cpu times required to execute the slow and fast derivative functions 
are Δs and Δf, respectively.
Case I: Without multirate integration (Ts = Tf = T)
The derivatives are numerically integrated at the simulation frame rate (1/T). The total execution 
time for fast derivative evaluations is
	
Γ
∆
∆
f
final
f
f
final
f
t
T
t
T
=






=





	
(8.314)
with a similar expression for the time required to perform slow derivative calculations,
	
Γ
∆
∆
s
final
s
f
final
s
t
T
t
T
=





=





	
(8.315)
The total time to compute both fast and slow derivatives is therefore
	
Γ
Γ
Γ
∆
∆
w
f
s
final
f
final
s
fina
t
T
t
T
t
/o =
+
=





+





=
l
f
s
T
(
)
∆
∆
+
	
(8.316)
Case II: With multirate integration (Ts = NTf = NT)
The total time required for both fast and slow derivatives is
	
Γ
Γ
Γ
∆
∆
w
f
s
final
f
f
final
s
s
t
T
t
T
=
+
=






+





	
(8.317)
	
=





+





t
T
t
NT
final
f
final
s
∆
∆
	
(8.318)

764
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
=
+






t
T
N
final
f
s
∆
∆
	
(8.319)
Assuming cpu times to execute fast and slow derivative functions are related by
	
∆
∆
s
f
=
>
α
α
,
0 	
(8.320)
From Equations 8.319 and 8.320,
	
Γ
∆
w
final
f
t
T
N
=
+






1
α
	
(8.321)
The cpu time (in seconds) required to evaluate two state derivatives using single-pass, mul­
tirate integration is illustrated in Figure 8.65 for the case where the transient response requires 
tfinal/T = 100,000 simulation frames. This number of integration steps would be required, for exam­
ple, if the step size needed to satisfy numerical stability and dynamic accuracy requirements was 
T = 0.01 s and the transient response lasted for 1000 s. The cpu time to execute the fast state deriva­
tive function Δf was fixed at 100 µs, and the slow state derivative requires αΔf µs where α ranges 
from 0.5 to 2.5.
Observe from Figure 8.65 that the total cpu time without multirate integration varies from a 
low of 15 s when Δs = 0.5Δf to a high of 35 s when Δs = 2.5Δf. The reduction in cpu time is more 
­pronounced for lower values of frame ratio, that is, N ≤ 10. Also, note that when the fast and slow 
state derivatives require the same amount of cpu time to execute, that is, α = 1, the savings in 
­overall cpu time is reduced from 20 min down to the limiting value of 10 min as expected.
The reduction in cpu time for the conditions illustrated in Figure 8.65 may seem trivial. The 
largest reduction in cpu time only approaches 25 s for the case where α = 2.5 and the frame ratio 
is large. Simulation studies often entail multiple simulation runs with one or more system param­
eters varying from run to run. A two-parameter sensitivity study where each parameter assumes 10 
numerical values requires 100 simulation runs. In this scenario, the use of multirate integration can 
achieve significant savings in overall computational time at the slight expense of reduced accuracy 
in the simulated responses.
Single rate integration (step size T)
tﬁnal/T = 1000,000 frames
∆f =100 µms
α = 0.5, 1, 1.5, 2, 2.5
Multirate integration
(fast state Tf = T, slow state Ts = NTf)
Total Simulation cpu Execution Time vs. Frame Ratio
Frame ratio (N)
0
10
15
20
25
30
35
5
10
15
20
25
30
35
40
45
50
cpu execution time, Γ(s)
FIGURE 8.65  Total cpu time required to simulate transient response of system with single rate (N = 1) and 
multirate (N > 1) integration.

765
Advanced Numerical Integration
EXERCISES
	8.31	 Derive the state equation matrices A, B, C, and D given in Equations 8.240 and 8.241.
	8.32	 In the aircraft pitch control system, find the maximum step size allowable for stable 
RK-4 simulation of the slow subsystem second-order component with poles located at 
−4.3127 ± j6.4812.
	8.33	 In the aircraft pitch control system, use MATLAB to find
	
a.	 The analytical solution for state variable x3(t) and compare with the simulated results 
obtained with Simulink RK-4 and multirate RK-4/RK-4
	
b.	 The analytical solution for the pitch rate θ( )t  and compare it with the simulated response 
obtained from Simulink using RK-4
	8.34	 For the aircraft pitch control system represented by the block diagram shown in Figure 8.48,
	
a.	 Draw a simulation diagram and label the states x1, x2, x3, …, x7.
	
b.	 Write the state equations and find the matrices A, B, C, and D in x
Ax
B com
=
+ θ
, 
y
C
D
x
com
=
+
θ
. The output is y(t) = θ(t). Leave your answer in terms of parameters A1, 
B1, B0, b1, b0, …, El.
	
c.	 Using the given baseline values for the control system parameters K, Kc, …, Κ θ, evaluate 
the matrices A, B, C, and D.
	
d.	 Use MATLAB to verify that the eigenvalues of the coefficient matrix A are identical to 
those of the matrix A in Equation 8.240. Compare the eigenvalues to the roots of the char­
acteristic polynomial in Equation 8.251.
	
e.	 Supplement the diagram shown in Figure 8.46 with additional Simulink blocks to simu­
late the pitch response based on the block diagram in Figure 8.48. Plot the three pitch 
responses on the same graph.
	8.35	 Label the five inputs to the summer in Figure 8.48 as θ1, θ2, …, θ5. Find and plot the analytical 
solutions for θ1(t), θ2(t), …, θ5(t), on the same graph in response to the command pitch input in 
Equation 8.250. Comment on the results.
	8.36	 Simulate the aircraft control system pitch response to the input given in Equation 8.250 
using multirate integration with Tf = 0.001 s and Ts = 0.02 s. Choose RK-1 for the “slave” 
routine and RK-4 for the “master” integration. Plot the response along with the analytical 
solution.
	8.37	 Consider the aircraft pitch control system operating in regulator mode, that is, zero input and 
initial condition θ(0) = θ0.
	
a.	 Find analytical solutions for the pitch response θ(t) and the elevator deflection δe,(t) when 
θ0 = 10°.
	
b.	 Find Tmax, the maximum integration step for a stable simulation using RK-2 integration.
	
c.	 Simulate the pitch and elevator responses of the regulator control system (θ0 = 10°) using 
Simulink with RK-2 integration. Choose the step size T = 0.1 Tmax.
	
d.	 Simulate the pitch and elevator responses of the regulator control system using RK-2/
RK-2 multirate integration. Choose the fast frame time Tf, so that the characteristic error 
in damping ratio of the fast subsystem second-order component in Figure 8.48 is 0.1%. 
Round Tf to three places after the decimal point. Choose the slow frame time Ts to make 
the frame ratio N = Ts/Tf = 10.
	
e.	 Plot the three pitch responses (analytical and two simulated) on the same graph. Repeat 
for the three elevator responses.
	8.38	 In the aircraft pitch control system, find the analytical solution for the fast state variables x5(t), 
x6(t), and x7(t) and plot the analytical, Simulink RK-4 and multirate RK-4/RK-4 solutions on 
the same graph similar to Figure 8.55.
	8.39	 Run the multirate integration of the aircraft pitch control system in the M-file “Ch8_ multi_
rate_integ.m” for the cases where the frame ratio N = 20, 10, 5, 1, and plot the simulated and 
analytical responses for x1(t) = θ(t), θ( )t , and x4(t) = δe(t).

766
Simulation of Dynamic Systems with MATLAB® and Simulink®
	8.40	 Derive Equation 8.295 for the steady-state operating level in the first tank.
	8.41	 Find analytical expressions in terms of the system parameters A1, c1, A2, L2, and c2 and 
the steady-state levels H H
1
2
,
 for the components of matrices B and C in Equations 8.300 
and 8.301. Evaluate B and C for the given baseline values of the system parameters when 
F0
3
60
=
ft /min, and compare your results with those given in the text.
	8.42	 Generate responses similar to those in Figure 8.58 for the case where the initial conditions cor­
respond to an input flow F t
F
0
3
3
0
20
20
( ) =
=
=
ft /min
ft /min. The inflow suddenly increases 
by ΔF0(t) = 2.5 ft3/min at t = 50 min.
	8.43	 Plot an H1 vs. H2 operating characteristic for the two-tank system.
	
	 Hint: Vary F0  from zero until the first tank begins to overflow. Find the steady-state values 
for H1 and H2.
	8.44	 Use AB-2 integration with step size T to simulate and plot the fluid level responses of both 
tanks like the ones shown in Figures 8.58 and 8.59 for T = 0.05, 0.1, …, 1.0. Comment on the 
results.
	8.45	 For the baseline nonlinear two-tank system with tanks initially empty and tank one inflow 
given by F0(t) = 75 ft3/min, t ≥ 0.
	
a.	 Run the Simulink model “TwoTanks.mdl” using RK-4 integration for a simulated time of 
1500 min with decreasing step sizes T until there is negligible change in output for con­
secutive runs. Save the simulated tank levels at the end of each minute and denote them 
H1,A(n), H2,A(n), n = 0, 1, 2, …,1500. Assume that the simulated values are exact, that is, 
H1,A(n) ≈ H1(nT), H2,A(n) ≈ H2(nT), n = 0, 1, 2, …,1500.
	
b.	 Run the MATLAB M-file “Chap8_TwoTanks_Multirate_AB2_AB2.m” or write your 
own to implement multirate AB-2/AB-2 integration for a simulated time of 1500 min 
with fixed frame time Tf = 0.1 min. Let the frame ratio N = Ts/Tf vary according to 
1, 5, 10, 15, 20, 25, 50, 75, 100, 500, 1000 and denote tank levels at the end of each 
minute by ˆ
( ) ˆ
( )
, ,
,
,
,
H
n H
n n
A
A
1
2
1 2
1500
,
,
=
…
. Compute the mean squared errors for each 
value of N as
	
E
N
H
n
H
n
H
A
A
n
1
1
1500
1
1
2
0
1500
( ) =
−
{
}






=∑
ˆ
( )
( )
,
,
	
	
E
N
H
n
H
n
H
A
A
n
2
1
1500
2
2
2
0
1500
( ) =
−
{
}






=∑
ˆ
( )
( )
,
,
	
	
c.	 Plot EH1(N) and EH1 (N) vs. N and comment on the results.
	8.46	 Eight of ten natural modes of a linear 10th-order system are slow in comparison with the 
remaining two natural modes. The average cpu time required to compute the slow and fast 
state derivatives is 12 and 0.3 µs, respectively. A multirate integration scheme is proposed 
to simulate the transient response using RK-4 to integrate the slow states and RK-2 for the 
fast states. The fast states are updated at a rate of 250 Hz to assure numerical stability and 
reasonable dynamic accuracy. The dominant mode of the system corresponds to a real pole at 
s = −0.05.
	
	   A simulation study to investigate the effect of three parameters calls for 10×10×10 simu­
lation runs. Generate a graph like the one shown in Figure 8.65 relating the total simulation 
study cpu time vs. the multirate integration frame ratio.
8.5  REAL-TIME SIMULATION
Until now, the simulation execution time required by whatever computer resources might be available 
to update the state and algebraic variables of the system received minimal attention. A simulation 

767
Advanced Numerical Integration
study could “run long” for a number of reasons such as model complexity, dynamic accuracy and 
numerical stability requirements, limited cpu processing capabilities, and so forth; however, the 
consequences of waiting on the simulation to complete were not a critical concern. Simulations of 
this nature fall in the category of “off-line,” “batch,” or, more generally, nonrealtime simulation.
In some real-time simulations, a component that may have been simulated in the past has been 
replaced by the actual hardware. Alternatively, the component of interest may be physically inte­
grated into the simulation from the beginning, making it unnecessary to simulate it beforehand. The 
component could be a gyroscopic sensor, a control surface actuator, an autopilot, or a combination 
of various sensors, actuators, and controllers in a particular system. The hardware must communi­
cate with the simulation computer at precise intervals of time. The situation, illustrated in Figure 
8.66, is referred to as “hardware-in-the-loop” simulation or HIL simulation for short.
HIL is used extensively in the development and testing of missile systems. Missile sensors are 
stimulated with input signals generated from real-time control computers representing the motion 
of targets during an engagement. Guidance and control hardware respond by providing inputs to the 
missile flight dynamics model, which is simulated in real-time to determine the missile’s trajectory 
and calculate target intercept conditions.
The automotive industry incorporates real-time HIL simulation to design and test electronic 
control units (ECUs) for efficient operation of key systems such as power train control, the antilock 
braking system (ABS), and traction and cruise control. Classical simulation was performed off-line 
using simulation models of the vehicle’s dynamics, sensors, and ECUs. While it was beneficial to 
demonstrate interaction of the various components and subsystems, it was still necessary to evaluate 
an ECU design using expensive prototype vehicles on a test track. Reproducing test track conditions 
to investigate unexpected results posed additional challenges.
One solution was to use HIL simulation composed of a real-time computer that runs a model 
of the vehicle to be controlled and the input/output (I/O) interfaces required to electrically connect 
to the controller. Benefits include a reduction in control system development and testing, no need 
for expensive prototype vehicles, elimination of risk that improper control software could lead to 
a ­hazardous failure during a test track run, and no concern about test track interactions with a 
­prototype vehicle.
Figure 8.67 shows the main components of an HIL implementation for testing an ABS con­
troller used by the German automaker Audi (Hanselmann). A digital-to-analog (D2A) converter 
generates wheel speed signals, sinusoidal voltages proportional in both frequency and amplitude to 
wheel speed, that replaces those from magnetic sensors in the actual vehicle. This accounts for the 
“interface-to-hardware” component in Figure 8.66. The “interface from hardware” consists of an 
analog-to-digital (A2D) converter for generating pressure sensor signals (in digital form) required 
by the vehicle dynamics model in the simulation computer to simulate the vehicle’s response. 
Steering angle and other signals shown in Figure 8.67 are used for testing advanced levels of vehicle 
FIGURE 8.66  Hardware-in-the-loop real-time simulation.

768
Simulation of Dynamic Systems with MATLAB® and Simulink®
dynamics control such as automated braking on individual wheels at different intensity levels to 
stabilize vehicle motion in extreme situations.
It is imperative that the simulation computer be able to integrate the state variables in synchro­
nization with real time. The beginning of each integration step must be properly aligned with the 
corresponding point in real time. In other words, the simulation must be capable of running fast 
enough on the digital computer that the computed outputs, in response to real-time inputs, occur at 
the exact time these outputs would take place in the real world.
A realistic vehicle dynamics model consists of coupled algebraic and differential equations with 
lookup tables for evaluating certain vehicle parameters that vary as driving conditions change. The 
equations are available as commercial C-language modules or in block diagram form (Simulink 
or other continuous simulation modeling program) with blocks representing transfer functions and 
system nonlinearities. Code is generated automatically from the block diagrams for real-time execu­
tion on the target DSP hardware.
Pushing the vehicle dynamics envelope to model evasive driving maneuvers adds to the complex­
ity while imposing even more stringent timing requirements for numerically stable simulation of the 
differential equations. Additional mechanical degrees of freedom are present in the more detailed 
models used by Audi to account for slight movements in the vehicle’s axles and suspension.
The time required to read input devices, perform simulation computations, and write to output 
devices determines the required frame rate for the simulation. In Audi’s case, the simulation frame 
rate is less than 1 ms. The simulator generates signals and communicates them to the ECU in a 
matter of microseconds.
The simulated portion of the system in an HIL simulation may be all continuous-time, all dis­
crete-time, or a combination of both. Furthermore, other types of signals, other than analog, are 
frequently encountered in HIL simulation. It is not uncommon for actual hardware to communi­
cate with the simulation computer via I/O devices involving discrete digital (TTL), serial (RS-232, 
RS-422), instrumentation bus (IEEE-488) or network (Ethernet) signals (Ledin 2001).
Sometimes, the hardware in Figure 8.66 is actually a human such as a pilot in a flight simulator 
or an operator in a power plant simulator. A “human-in-the-loop” simulation can be used to evaluate 
the dynamic response of the system, the effectiveness of instrumentation displays and controls, or 
as a trainer to instruct the human in routine and emergency operation of the system. In the case of 
FIGURE 8.67  HIL simulation of vehicle ABS system. (From Hanselman, H. and Smith, K., Test Meas. 
World Manage., 35, 1996.)

769
Advanced Numerical Integration
real-time interactive simulators (vehicle, aircraft, train, ship, plant, and so forth), several channels 
of output from the simulation computer may be used to drive motion systems as well as audio and 
visual displays to provide additional cues designed to enhance the overall sense of being physically 
immersed in a realistic, high-fidelity simulation environment. Figure 8.68 is a picture of a highfidel­
ity-driving simulator used for conducting research in traffic engineering, human factors, and design 
of new vehicle systems.
8.5.1  Numerical Integration Methods Compatible with Real-Time Operation
The timing issues inherent in real-time simulation preclude the use of variable-step methods, which 
adaptively regulate the integration step size. The iterative nature of implicit methods makes the 
solution times unpredictable and, therefore, unsuitable for real-time applications as well. We will 
begin by looking at several one-step RK integrators (see Section 6.2) and determine whether they 
are compatible with real-time simulation. A continuous-time dynamic system is assumed to be 
modeled by the scalar, possibly nonlinear differential equation
	
d
d
x
t
f x u
=
( , )
	
(8.322)
where
x = x(t) is the state
u = u(t) is the single input
For simplicity, the derivative function is assumed not to be an explicit function of “t.” If the sys­
tem is time-varying, the derivative function should be expressed as f(t, x, u).
Figure 8.69 illustrates the sequence of operations for a real-time simulation running at a basic 
frame rate of 1/T using an integrator requiring two passes, that is, two derivative function evalua­
tions per frame. The initial operation is an I/O read of the input un = u(tn). The next process is the 
two derivative function evaluations including the calculations to advance the state from xA(n) to 
FIGURE 8.68  The National Advanced Driving Simulator used for Traffic Engineering Research and Vehicle 
System Design. (Courtesy of NHTSA, Washington, DC.)

770
Simulation of Dynamic Systems with MATLAB® and Simulink®
xA(n + 1). Note that the time to evaluate the derivative function may be random due to the necessity 
of searching through tables of empirical data or as a result of branching when the code is executed. 
Lower and upper limits to compute the derivative functions and perform the calculations necessary 
for updating the state are τ1 and τ2 s. The final operation is an I/O write to the hardware interface 
as shown in Figure 8.66. The residual time before the frame ends is spare time to minimize the 
chances of a frame overrun and allow for expansion of the derivative function evaluation time 
should the model increase in complexity.
The following analysis of compatibility of real-time, single frame rate (as opposed to multirate) 
integration is based on the following assumptions:
	
1.	The time required to complete the I/O read and write operations is negligible in compari­
son with the time to evaluate the derivative function and update the state.
	
2.	The execution time to compute the derivative function is deterministic.
	
3.	The spare time per frame is zero.
The net effect of these assumptions is that the frame time T is subdivided into m equal subframes 
where m is the number of passes through the derivative function. Several RK-m integrators will now 
be considered. In each instance, the test for compatibility with real-time simulation is whether or 
not the input u(t) is needed at a point in time within the frame prior to it being available in real time.
8.5.2  RK-1 (Explicit Euler)
The simplest of all the numerical integrators, explicit Euler, is compatible with real-time simulation 
because the input u(t) is needed only at the beginning of the frame. Thus, updating the discrete-time 
state from xn to xn+1 with RK-1 requires un be available at tn, the start time of the nth frame, which is 
certainly true (see Figure 8.70). Note that xn is short for xA(n), the discrete-time approximation to x(tn).
FIGURE 8.69  Real-time simulation with two-pass numerical integration method.
FIGURE 8.70  RK-1 (Euler) integration compatibility with real-time simulation.

771
Advanced Numerical Integration
8.5.3  RK-2 (Improved Euler)
Improved Euler RK-2 integration was introduced in Section 3.6 and again in Section 6.2. 
Figure 8.71 helps to explain why this one-step, two-pass numerical integrator is not suitable for 
real-time simulation under the previously assumed conditions. Specifically, the calculation of xn+1 
commencing at tn+(1/2) requires knowledge of un+1, which is not available until T/2 s later at the end 
of the frame.
8.5.4  RK-2 (Modified Euler)
This version of RK-2 integration was first introduced in Section 3.6. The equations for updating the 
discrete-time state from xn, to xn+1 are
	
ˆ
(
,
)
x
x
T f x u
n
n
n
n
+
=
+
1 2
2
/
	
(8.323)
	
x
x
Tf x
u
n
n
n
n
+
+
+
=
+
1
1 2
1 2
(
)
/
/
ˆ
,
	
(8.324)
The initial derivative evaluation starts at tn and requires un. The second pass at evaluating the 
derivative function begins at tn+1/2, precisely the time at which un+1/2 becomes available. Hence, both 
inputs are synchronized in real time with requirements of Equations 8.323 and 8.324. Howe (1995) 
refers to modified RK-2 integration as RTRK-2 to designate its suitability for real-time simulation.
Next, we look at two versions of RK-3 integration, one that is compatible with real-time simula­
tion and the other that is not compatible.
8.5.5  RK-3 (Real-Time Incompatible)
The equations for the first RK-3 integrator are as follows:
	
Starting at
(
),
/
t
k
f x u
x
x
T k
n
n
n
n
n
:
,
1
1 2
1
2
=
=
+
+

	
(8.325)
	
Starting at
(
),
(
)
/
/
t
k
f x
u
x
x
T
k
k
n
n
n
n
n
+
+
+
=
=
+
−
+
1 3
2
1 2
1 2
1
2
2
:
,


	
(8.326)
	
Starting at
:
(
),
(
)
t
k
f x u
x
x
T k
K
k
n
n
n
n
n
+
+
+
=
=
+
+
+
2 3
2
1
1
1
2
3
6
4
 ,
	
(8.327)
FIGURE 8.71  RK-2 (improved Euler) incompatibility with real-time simulation.

772
Simulation of Dynamic Systems with MATLAB® and Simulink®
The unsuitability for real-time implementation of Equations 8.325 through 8.327 stems from 
the requirement of needing un+1/2 at tn+1/3, which is before it is available (see Equation 8.326) and a 
similar dilemma at time tn+2/3 where un+1 is required according to Equation 8.327.
8.5.6  RK-3 (Real-Time Compatible)
A real-time compatible RK-3 integrator is described by
	
Starting at t
k
f x u
x
x
T k
n
n
n
n
n
:
(
,
),
1
1 3
1
3
=
=
+
+

	
(8.328)
	
Starting at t
k
f x
u
x
x
T k
n
n
n
n
n
+
+
+
+
=
=
+
1 3
2
1 3
1 3
2 3
2
2
3
:
(
,
),


	
(8.329)
	
Starting at t
k
f x
u
x
x
T k
k
n
n
n
n
n
+
+
+
+
=
=
+
+
2 3
3
2 3
2 3
1
1
3
4
3
:
(
,
),
[
]

	
(8.330)
8.5.7  RK-4 (Real-Time Incompatible)
Fourth-order RK integration is widely used in applications not requiring real-time simulation. 
It can be shown that all RK-4 integrators require the input un+1 for evaluation of the state derivative 
on the fourth pass at a time prior to the end of the current frame. Hence, none is compatible with 
real-time; however, a five-pass RK integrator with fourth-order accuracy suitable for real-time 
exists.
8.5.8  Multistep Integration Methods
The entire family of Adams–Bashforth numerical integrators presented in Section 6.4 is compatible 
with real time. The lower-order formulas are commonly used in real-time simulation applications. 
They are preferable to similar order real-time compatible RK integrators because they are single 
pass in nature and, hence, require less time to execute. For example, AB-m integration requires 
approximately 1/m as much time as any of the RK-m integrators. In HIL applications, AB-m simu­
lation can run at frame rates roughly m times greater than any real-time compatible RK-m integra­
tor. Dynamic errors are less for RK-m than AB-m integration with identical step size T; however, the 
advantage goes to AB-m integration running at m × (1/T) frames per second (fps) compared with 
RK-m integration at 1/T fps.
AB-1 integration is identical to explicit Euler. It is used sparingly in real-time simulation for 
the same reason it is used infrequently in nonreal-time simulation mode, namely, it is a first-order 
method, and even moderately accurate results require excessively small integration time steps. 
AB-2 through AB-4 are the most popular choices for real-time simulation. The stability regions of 
AB integrators higher than fourth order are quite small and become smaller as the order increases 
(see Figure 8.21). As a result, numerical stability constraints imposed by high-order AB integrators 
require the magnitude of λT (λ is the largest magnitude characteristic root of the stable linear or 
linearized system) be excessively small, thus requiring higher frame rates.
The predictor–corrector multistep methods (referred to by some as Adams–Moulton predic­
tor–correctors) are not real-time compatible. They are two-pass integration algorithms, which 
combine an explicit Adams–Bashforth integrator to predict the new state followed by an implicit 
formula based on the predicted state to correct it. Equations 6.204 through 6.209 represent second-
through fourth-order methods. The dynamic error properties of predictor–corrector methods (see 
Table 8.4) are comparable to the single-pass implicit integrators (which are referred to in this text as 
Adams–Moulton integrators).

773
Advanced Numerical Integration
A real-time compatible predictor–corrector formula is possible. An example from Howe (1995) 
of a second-order method is now presented. The scalar state equation is the same as Equation 8.322. 
The first step is to generate an estimate of the statel ˆxn+1 2
/  at the midpoint of the current interval 
(see Figure 8.72).
This is accomplished by using a form of modified Euler integration, that is, ˆxn+1 2
/  is computed 
based on a step size of T/2 according to
	
ˆ
ˆ
x
x
T f
n
n
n
+
+
=
+
1 2
1 4
2
	
(8.331)
The derivative estimate ˆfn+1 4
/  is obtained by linear extrapolation through (tn−1, fn−1) and (tn, fn) as 
shown in Figure 8.72. From the principle of similar triangles,
	
f
f
t
t
f
f
t
t
n
n
n
n
n
n
n
n
−
−
=
−
−
−
−
+
−
+
−
1
1
1 4
1
1 4
1
ˆ
	
(8.332)
Setting tn − tn−1 = T, tn+1/4 − tn−1 = 5T/4 and solving for ˆfn+1 4
/  give
	
ˆ
(
)
f
f
f
f
n
n
n
n
+
−
−
=
+
−
1 4
1
1
5
4
	
(8.333)
Substituting ˆfn+1 4
/  into Equation 8.331 results in the second-order predictor
	
ˆ
(
)
x
x
T
f
f
n
n
n
n
+
−
=
+
−
1 2
1
8 5
	
(8.334)
The derivative estimate ˆfn+1 4
/  is calculated from
	
ˆ
(ˆ
,
)
f
f x
un
n
n
+
=
+
+
1 2
1 2
1 2
/
/
/
	
(8.335)
Finally, the new state xn+1 is obtained from modified Euler integration,
	
x
x
Tf
n
n
n
+ =
+
+
1
1 2
ˆ
/ 	
(8.336)
FIGURE 8.72  Diagram for illustrating real-time predictor–corrector method.

774
Simulation of Dynamic Systems with MATLAB® and Simulink®
Equations 8.334 through 8.336 describe a real-time, predictor–corrector algorithm (which Howe 
refers to as RTAM-2). It is a two-pass method since it requires two derivative function evaluations 
per step—the dynamic error coefficient eI = 1/24 making it twice as accurate as the implicit (trap­
ezoidal) and the AB-2/AM-2 predictor–corrector, since both have error coefficients of eI = −1/12 
(see Table 8.4), and neither is compatible with real time. It is 10 times more accurate than AB-2 
integration, which has an error coefficient eI = 5/12.
For execution times comparable to single-pass formulas, this method would utilize a step size 
twice as large and generate state updates at half the frequency. After compensating for different 
step sizes, it still exhibits two and half times the dynamic accuracy of the single-pass AB-2 based 
on the approximate asymptotic formulas for small step sizes. The estimate ˆxn+1 2
/  is available for 
real-time output; hence, the real-time predictor–corrector can output the state at the same frequency 
as the single-pass integrators. The integrator requires inputs at the beginning and midpoint of the 
frame making the sampling frequency twice that of a single-pass integrator. Higher-order real-time 
compatible predictor–correctors are possible (Howe 1995).
8.5.9  Stability of Real-Time Predictor–Corrector Method
The stability region for the real-time predictor–corrector given in Equations 8.334 through 8.336 is 
obtained in the same way as for the explicit Adams–Bashforth, implicit Adams–Moulton, and RK 
integrators (see Section 8.3). Both the nonreal-time and real-time compatible predictor–correctors 
introduce extraneous roots in the z-domain and, therefore, are subject to stability limitations on step 
size. The characteristic polynomials for each integrator are
	
Nonreal-time predictor-corrector: ∆
=
−
+
+





( )
(
)
z
z
T
T
2
2
1
3
4
λ
λ
+
z
T
1
4
2
(
)
λ
	
(8.337)
	
Real-time predictor-corrector: ∆
=
−
+
+






( )
(
)
z
z
T
T
z
4
2
1
5
8
λ
λ
2
2
1
8
+
(
)
λT
	
(8.338)
The stability regions are shown in Figure 8.73.
The real-time compatible predictor–corrector has a somewhat larger region, making it preferable 
from a stability standpoint.
–2 –1.75–1.5 –1.25 –1
Re (λT)
0
–0.75–0.5 –0.25
0.25
0
0.2
0.4
0.6
0.8
Im (λT)
1.0
1.2
1.4
1.6
Stability region for second-order,
nonreal-time and real-time predictor correctors
Real-time
Nonreal-time
λT plane
FIGURE 8.73  Stability regions for second-order predictor–corrector methods.

775
Advanced Numerical Integration
EXAMPLE 8.9
Obtain difference equations for simulating the unit step response of the system
	
d
d
x
t
x
u
=
+
= −
λ
λ
,
.
0 25
	
(8.339)
using the real-time compatible integrators
	
a.	Modified Euler.
	
b.	AB-2.
	
c.	Real-time predictor–corrector.
	
d.	Choose the step size T, so that λT = −0.25, −1 for the modified Euler and real-time 
predictor–corrector and λT = −0.125, −0.5 for the AB-2 integrator. Graph the step 
responses along with the exact solution and comment on the results.
	
a.	From Equation 8.323 for modified Euler, the estimated state at the halfway point is
	
ˆ
.
x
x
Tf
n
n
n
+
=
+
1 2
0 5
/
	
(8.340)
	
=
+
+
x
T
x
u
n
n
n
0 5
.
(
)
λ
	
(8.341)
	
=
+
+
(
.
)
.
1
0 5
0 5
λT x
Tu
n
n 	
(8.342)
	
	 and the second pass produces the updated state from Equation 8.324 as
	
x
x
Tf
n
n
n
+
+
=
+
1
1 2
ˆ
/ 	
(8.343)
	
=
+
+
+
+
x
T
u
x
n
n
n
(
)
/
/
λˆ
1 2
1 2 	
(8.344)
	
=
+
+
+
{
}+
+
x
T
T x
Tu
u
n
n
n
n
[
(
.
)
.
]
/
λ
λ
1
0 5
0 5
1 2 	
(8.345)
	
=
+
+
+
+
+
[
(
.
)]
( .
)
/
1
1
0 5
0 5
1 2
λ
λ
λ
T
T x
T
Tu
u
n
n
n
	
(8.346)
	
b.	The AB-2 difference equation for computing the state is
	
x
x
T
f
f
n
n
n
n
+
−
=
+
−
1
1
0 5 3
.
(
) 	
(8.347)
	
=
+
+
−
+
−
−
x
T
x
u
x
u
n
n
n
n
n
0 5 3
1
1
.
(
(
)]
[
)
λ
λ
	
(8.348)
	
=
+
−
+
−
−
−
(
)
.
.
.
.
1
1 5
0 5
1 5
0 5
1
1
λ
λ
T x
Tx
Tu
Tu
n
n
n
n
	
(8.349)
	
c.	The real-time predictor–corrector first step is from Equation 8.334,
	
ˆ
.
(
)
x
x
T
f
f
n
n
n
n
+
−
=
+
−
1 2
1
0 125 5
/
	
(8.350)
	
=
+
+
+
−
−
−
x
T
x
u
x
u
n
n
n
n
n
0 125 5
1
1
.
(
(
)]
[
)
λ
λ
	
(8.351)
	
=
+
+
−
−
−
−
(
.
)
.
.
.
1
0 625
0 125
0 625
0 125
1
1
λ
λ
T x
Tx
Tu
Tu
n
n
n
n
	
(8.352)

776
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	 The new state is obtained from Equations 8.335 and 8.336,
	
x
x
Tf
n
n
n
+
+
=
+
1
1 2
ˆ
/ 	
(8.353)
	
=
+
+
+
+
x
T
u
x
n
n
n
(
)
/
/
λˆ
1 2
1 2 	
(8.354)
	
=
+
+
−
+
−
+
−
−
+
x
T
T x
Tx
Tu
Tu
u
n
n
n
n
n
n
[
.
)
.
.
.
{
}
λ
λ
λ
1
0 625
0 125
0 625
0 125
1
1
1/2]	
(8.355)
	
=
+
+
−
+
−
−
−
[
(
.
)]
.
(
)
( .
.
1
1
0 625
0 125
0 625
0 125
2
1
1
λ
λ
λ
λ
T
T x
T
x
T
Tu
Tu
n
n
n
n )
/
+
+
Tun 1 2

(8.356)
	
d.	The difference Equations 8.346, 8.349, and 8.356 were solved recursively in the M-file 
“Ch8_Ex8_9.m.” The AB-2 integrator and real-time predictor–corrector were started 
with a single step of the improved Euler integrator. The results are shown in Figures 8.74 
and 8.75 along with the exact solution for the unit step response,
	
x t
t
t
( )
[e
],
=
−
≥
1
1
λ
λ
0
	
(8.357)
	
	 The single-pass AB-2 integrator was running at twice the frame rate of the two-pass 
modified Euler and real-time predictor–corrector to keep the execution times compa­
rable. In Figure 8.74, the simulated responses using the numerical integrators are in close 
agreement with the exact solution. In Figure 8.75, the accuracy of the numerical integra­
tors has deteriorated as a result of the increased values of the parameter λT. The M-file 
“Ch8_Ex8_9.m” includes runs for intermediate values of λT as well.
8.5.10  Extrapolation of Real-Time Inputs
A solution to the problem of numerical integrators being incompatible with real-time simulation is 
to employ extrapolated input data. Consider the improved Euler integrator illustrated in Figure 8.71. 
0
0
1
2
3
4
4
8
t
12
16
20
Real-time predictor–corrector, λT = –0.25
λ = –0.25
Exact
0
0
1
2
3
4
4
8
12
16
20
AB-2, λT = –0.25
λ = –0.25
Exact
0
0
1
2
3
4
4
8
12
16
20
Modiﬁed Euler (RK-2), λT = –0.25
λ = –0.25
Exact
FIGURE 8.74  Unit step response of first-order system using three real-time compatible numerical integra­
tors with λT = −0.25, −0.125 and the exact solution.

777
Advanced Numerical Integration
The evaluation of fn = f(xn, un) lasts from tn to approximately tn+1/2 After calculating ˆxn+1, the evalu­
ation of, ˆ
(ˆ
)
,
f
x
f
u
n
n
n
+
+
+
=
1
1
1  is scheduled to begin at tn+1/2. The input un+1 is required a half frame 
before it is available, thus explaining why improved Euler is incompatible with real-time simulation.
A possible remedy is to use first-order (linear) extrapolation based on un−1 and un to predict un+1. 
An alternative approach is to sample the input at tn+1/2 and predict un+1 based on linear extrapolation 
of un, and un+1/2. The predicted values for each approach is denoted ˆun+1 in Figure 8.76.
Adopting the first approach leads to
	
ˆ
(
)
u
u
u
u
n
n
n
n
+
−
=
+
−
1
1 	
(8.358)
If we think of Equation 8.358 as the difference equation for a discrete-time system with input un 
and output y
u
n
n
=
+
ˆ
1, n = 0, 1, 2, …, the first several values of the output are
	
n
y
u
u
u
u
=
=
=
+
=
−
−
0
2
0
0
0
1
0
1
: 
(
)
ˆu
	
(8.359)
	
n
y
u
u
u
u
u
=
=
=
+
=
−
−
1
2
1
1
1
0
1
0
2
: 
(
)
ˆu
	
(8.360)
0
0
1
2
3
4
4
8
12
16
20
Real-time predator–corrector, λT = –1
λ = –0.25
Exact
0
0
1
2
3
4
4
8
12
16
20
AB-2, λT = –0.5
λ = –0.25
Exact
0
0
1
2
3
4
4
8
12
16
20
Modiﬁed Euler (RK-2), λT = –1
λ = –0.25
Exact
FIGURE 8.75  Unit step response of first-order system using three real-time compatible numerical integra­
tors with λT = −1, −0.5 and the exact solution.
FIGURE 8.76  Use of extrapolation to make improved Euler compatible with real-time.

778
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
n
y
u
u
u
u
u
u
=
=
=
±
=
−
−
2
2
2
2
2
1
2
1
3
: 
ˆ
(
)
	
(8.361)
Figure 8.77 shows a continuous-time function u(t), the first four sampled values u0, u1, u2, and u3, 
and the first three extrapolated values ˆ , ˆ , ˆ
u u u
1
2
3.
The z-transform of the output sequence yn, n = 0, 1, 2, 3, … is by definition
	
Y z
y
y z
y z
y z
( ) =
+
+
+
−
−
−
0
1
1
2
2
3
3	
(8.362)
	
=
+
+
+
+
−
−
−
−
−
−
2
2
2
2
0
1
0
1
2
1
2
3
2
3
u
u
u z
u
u z
u
u z
(
)
(
)
(
)
	
(8.363)
Rearranging the terms in Equation 8.363 gives
	
Y z
u
u z
u z
z
u
u
u z
lZ
( )
(
)
(
)
=
+
+
+
−
+
+
+
−
−
−
−
−
2
0
1
1
2
2
1
0
1
2
2

	
(8.364)
	
=
−
−
(
) ( )
2
1
z
U z 	
(8.365)
The same result follows directly from Equation 8.358 with ˆun+1 replaced by yn. The z-domain 
transfer function of the linear extrapolator is therefore
	
G z
Y z
U z
z
( )
( )
( )
=
=
−
−
2
1
	
(8.366)
Before we discuss the dynamic errors incurred from the use of extrapolation, it is necessary to 
define the characteristics of an ideal extrapolator. Figure 8.78 illustrates the point for an arbitrary 
signal u(t) sampled at regular intervals of T units of time.
FIGURE 8.77  Linear extrapolation of input u(t).
FIGURE 8.78  Illustration of an ideal extrapolator.

779
Advanced Numerical Integration
At time t = nT, if the input to an ideal extrapolator is un = u(nT), the output yn = un+1 = u[(n+1)T]. 
Hence, an ideal extrapolator advances the input u(t) by an amount T to the left along the t-axis. 
In contrast, a pure delay of the same duration shifts the input u(t) by the same amount to the right 
along the t-axis.
The Laplace transform of the ideal extrapolator GI(s) can be obtained by replacing T in the trans­
form for a pure delay of length T with −T leading to
	
G s
Y s
U s
I
T s
Ts
( )
( )
( )
(
)
=
=
=
−−
e
e
	
(8.367)
The frequency response functions of the real and ideal extrapolators are
	
G z
G
z
j T
j T
j T
( )
(e
)
e
e
|
=
=
−
=
−
ω
ω
ω
2
	
(8.368)
	
G s
G
j
I
s
j
I
j T
( )
(
)
e
|
=
=
= ω
ω
ω
	
(8.369)
The fractional error in G(ejωT), the extrapolator frequency response function, is
	
e
e
e
e
e
e
e
G
j T
I
I
j T
j T
j T
j T
j T
G
G
j
G
j
=
−
=
−
−
=
−
−
−
−
−
(
)
(
)
(
)
ω
ω
ω
ω
ω
ω
ω
ω
2
2
1
2
	
(8.370)
The fractional error in extrapolator frequency response gain is
	
e G
j T
I
I
j T
G
G
j
G
j
=
−
=
−
−
−
(e
)
(
)
(
)
e
ω
ω
ω
ω
2
1
	
(8.371)
Replacing e−jωt with cos ωT − j sin ωT, Equation 8.371 reduces to
	
e
/
| |
(
cos
)
G
T
=
−
−
5
4
1
1 2
ω
	
(8.372)
An asymptotic formula for e|G| is (see Exercise 8.50)
	
e| |
(
) ,
G
T
T
≈ω
ω
2
1
	
(8.373)
The phase error in extrapolator frequency response is
	
e
Arg
e
Arg{
}
∠=
{
}−
G
j T
I
G
G
j
(
)
(
)
ω
ω
	
(8.374)
	
=
−
−
−
Arg
e
{
}
2
j T
T
ω
ω
	
(8.375)
An asymptotic formula for e∠G  is (Howe 1995)
	
e∠≈−
G
T
T
(
) ,
ω
ω
3
1
	
(8.376)

780
Simulation of Dynamic Systems with MATLAB® and Simulink®
Magnitude and phase angle plots of a real and ideal extrapolator are shown in Figure 8.79 for 
0 ≤ ωT ≤ 0.5 rad. The graphs are in agreement with Equations 8.373 and 8.376, which imply that 
the magnitude error is more significant than the phase angle error.
EXAMPLE 8.10
An input signal u(t) = sin ωt, t ≥ 0 is sampled every T = 0.1 s, and the resulting discrete-time signal 
un, n = 0, 1, 2, …. is input to an extrapolator governed by Equation 8.358.
	
a.	Graph the continuous-time signal u(t), discrete-time signal un, and the extrapolator 
­output ˆ
, , , ,
un+ =
1
0 1 2 3 … for the following cases:
	
i.	  ωT = 0.1 rad
	
ii.	  ωT = 0.25 rad
	
iii.	  ωT = 0.5 rad
	
iv.	  ωT = 1 rad
	
b.	An improved Euler integrator with step size T = 0.1 s is used to simulate the response 
of the first-order system in Equation 8.339 to the sinusoidal input u(t) = sin ωt, t ≥ 0. In 
order to simulate the real-time response, the input is extrapolated as shown in Figure 8.80 
before being numerically integrated. Find the exact and simulated responses for the four 
cases in part (a) and plot the results.
	
a.	The signals u(t), un, and ˆun+1 are generated in the script file “Ch8_Ex8_10.m” and the 
results are shown in Figures 8.81 and 8.82. For purposes of clarity, not all discrete points 
are plotted. The extrapolator gain error is first noticeable at ωT = 0.25 rad, becoming 
progressively worse at ωT = 0.5 rad and ωT = 1 rad, respectively.
	
b.	The analytical solution for the response is obtained by Laplace transformation of the dif­
ferential equation x
x
u
=
+
λ
 with sinusoidal input u = sin ωt. The Laplace transform of 
x(t) is
	
X s
s
s
( )
(
)(
)
=
−
+
ω
λ
ω
2
2
	
(8.377)
	
	 which is easily inverted by partial fractions to give
0
0
0.1
0.2
0.3
0.4
0.5
0.9
1.1
1.2
1.3
1
Phase error (rad)
Magnitude
0.5
0.4
0.3
0.2
Phase angle of real and ideal extrapolator frequency response functions
Magnitude of real and ideal extrapolator frequency response functions
0.1
0.05
0.15
0.25
0.05
0.45
ωT (rad)
0
0.5
0.4
0.3
0.2
0.1
0.05
0.15
0.25
0.05
0.45
|G(ejωT)|
|GI(jω)|
Arg [GI(jω)]
Arg [G(ejωT)]
FIGURE 8.79  Magnitude and phase plots for first-order and ideal extrapolator.

781
Advanced Numerical Integration
FIGURE 8.80  Real-time simulation of first-order system dynamic response.
u(t)
un
u^
n+1
u(t)
un
u^
n+1
–1.75
–1.5
–1.25
–0.75
–0.25
–0.5
–1
0
0.25
0.5
0.75
1
1.25
–1.75
–1.5
–1.25
–0.75
–0.25
–0.5
–1
0
0.25
0.5
0.75
1
1.25
Continuous-time, sampled and extrapolated inputs
0
2
4
6
8
t (s)
16 12
0
2
4
6
8
t (s)
16 12
T = 0.1 s, ωT = 0.1 rad
T = 0.1 s, ωT = 0.25 rad
FIGURE 8.81  Continuous-time, sampled and extrapolated inputs (ωT = 0.1, 0.25 rad).
u(t)
un
u^
n+1
–1.5
–1
–2
–0.5
0
0.5
1
1.5
–1.5
–1
–2
–0.5
0
0.5
1
1.5
Continuous-time, sampled and extrapolated inputs
0 0.4 0.8 1.2 1.6
2
t (s)
2.4
0 0.4 0.8 1.2 1.6
2
t (s)
2.4
T = 0.1 s, ωT = 0.5 rad
T = 0.1 s, ωT = 1 rad
FIGURE 8.82  Continuous-time, sampled and extrapolated inputs (ωT = 0.5, 1 rad).

782
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
x t
t
t
t
( )
cos
sin
=
+
−
−






ω
λ
ω
ω
λ
ω
ω
λ
2
2 e
	
(8.378)
	
=
+
−
+
+
=
+






−
ω
λ
ω
λ
ω
ω
ϕ
ϕ
π
ω
λ
λ
(
)
(
)
sin (
),
/
2
2
2
2 1 2
1
1
e
tan
t
t
	
(8.379)
	
	 The exact response x(t) and the simulated responses xn for the cases when ωT = 0.1 rad 
and ωT = 0.25 rad are plotted in Figure 8.83. Results for the remaining two cases, 
ωT = 0.5 rad and ωT = 1 rad, are shown in Figure 8.84. Error in the simulated response 
due to extrapolator gain error is significant at input frequencies ωT = 0.5 rad and 
0 1 2 3 4 5 6 7 8
T = 0.1 s, ωT = 0.5 rad
T = 0.1 s, ωT = 1 rad
0.4
0.3
0.2
0.1
0
–0.1
–0.2
–0.3
0.4
0.3
0.2
0.1
0
–0.1
–0.2
–0.3
Simulated ouput with extrapolated
input for real-time compatability
t (s)
0 1 2 3 4 5 6 7 8
t (s)
x(t)
xn
x(t)
xn
FIGURE 8.84  Exact and simulated (improved Euler) responses (ωT = 0.5, 1 rad).
0
T = 0.1 s, ωT = 0.1 rad
–1.5
–1
–0.5
0
0.5
1
1.5
4
8
12
Simulated ouput with extrapolated
input for real-time compatability
t (s)
x(t)
xn
16
20
0
T = 0.1 s, ωT = 0.1 rad
–1.5
–1
–0.5
0
0.5
1
1.5
4
8
12
t (s)
x(t)
xn
16
20
FIGURE 8.83  Exact and simulated (improved Euler) responses (ωT = 0.1, 0.25 rad).

783
Advanced Numerical Integration
ωT = 1 rad where the asymptotic approximations in Equations 8.373 and 8.376 are no 
longer valid.
8.5.11  Alternate Approach to Real-Time Compatibility: Input Delay
When numerical integrators are not compatible with real-time simulation, it is because the input(s) 
are required at points in time prior to their occurrence. One solution to this dilemma is to use input 
values previously sampled in place of the input data required by the formula in the numerical inte­
gration algorithm. Refer to Figure 8.85, which shows an input u(t) and delayed versions u(t − T/2), 
u(t − T).
Let us assume once again that improved Euler, a second-order, two-pass RK integrator incom­
patible with real-time simulation, is to be used. Starting at time tn, the first stage is an Euler pre­
diction of the state at tn+1. However, instead of using the current input un, suppose the input from 
one-half a time step in the past is used, namely, un−1/2. That is, ˆxn+1 is computed from
	
ˆ
(
)
,
x
x
Tf x u
n
n
n
n
+
−
=
+
1
1 2
/
	
(8.380)
Starting at time tn+1/2, the second pass to compute the new state is
	
x
x
T
f x
u
f x
n
n
n
n
n
n
+
+
+
+
=
+
+
1
1 2
1
1 2
2 [ (
, 
)
(
, 
)]
ˆ
u
	
(8.381)
Assuming Equation 8.381 requires approximately T/2 units of time to execute, the updated state 
xn+1 is available at time tn+1. Hence, by using un−1/2 in place of un and un−1/2 instead of un+1, the 
improved Euler integrator is running in real time. Equations 8.380 and 8.381 applied to the first-
order system dx/dt = λx + u lead to the difference equation
	
x
T
T
x
T
T u
T u
n
n
n
n
+
−
+
=
+
+






+
+
+
1
2
1 2
1 2
1
2
2 1
2
λ
λ
λ
(
)
(
)
/
	
(8.382)
Equation 8.382 is similar to the difference equation for simulation of the first-order system 
using classical improved Euler integration except for the presence of the delayed input, that is, un is 
replaced by un−1/2 and un+1 is replaced by un+1/2.
There is of course a penalty incurred as a result of using “old” values from the delayed input u(t). 
To illustrate, consider the case where sampled values are obtained from the input delayed a full time 
step T as shown in Figure 8.86.
FIGURE 8.85  Use of delayed input to make numerical integrator real-time compatible.

784
Simulation of Dynamic Systems with MATLAB® and Simulink®
Simulation of the system dx/dt = λx + u with real-time, improved Euler integration leads to a 
discrete-time system with z-domain transfer function
	
G
z
X z
U z
z G z
b z
b
z z
a
R T
/ ( )
( )
( )
( )
(
)
=
=
=
+
+
−1
1
0
0 	
(8.383)
where
	
a
T
T
b
T
T
b
T
0
2
0
1
1
2
2 1
2
= +
+
=
+
=
λ
λ
λ
(
) ,
(
),
	
(8.384)
The continuous-time system transfer function is
	
G s
s
( ) =
−
1
λ 	
(8.385)
The dynamic errors in the discrete-time frequency response functions are
	
e
e
G
z
s
j
s
j
G z
G s
G s
j T
=
−
←
←
←
( )
( )
( )
ω
ω
ω
	
(8.386)
	
=
+
+
−
−
(
e
) (e
)
(
)
b
b
a
j
j T
j T
1
0
0
1
1
ω
ω
ω
λ
/
/
	
(8.387)
	
=
−
+
+
−
(
)(
e
)
e
j
b
b
a
j T
j T
ω
λ
ω
ω
1
0
0
1
	
(8.388)
	
e
/
/
e
G
R T
z
s
j
s
j
R T
j T
G
z
G s
G s
=
−
←
←
←
( )
( )
( )
ω
ω
ω
	
(8.389)
	
=
+
−
−
−
(
e
) (e
(e
))
(
)
b
b
a
j
j T
j T
j T
1
0
0
1
1
ω
ω
ω
ω
λ
/
/
	
(8.390)
	
=
−
+
−
−
(
)(
e
)
e
(e
)
j
b
b
a
j T
j T
j T
ω
λ
ω
ω
ω
1
0
0
1
	
(8.391)
FIGURE 8.86  z-Domain transfer function for real-time implementation.

785
Advanced Numerical Integration
The fraction gain errors are
	
e
e
G
j T
G
G j
G j
=
−
(
)
(
)
(
)
ω
ω
ω
	
(8.392)
	
=
+
−
−
−
(
e
) (e
)
(
)
b
b
a
j
j T
j T
1
0
0
1
1
ω
ω
ω
λ
/
/
	
(8.393)
	
e
e
/
/
G
R T
j T
R T
G
G j
G j
=
−
(
)
(
)
(
)
ω
ω
ω
	
(8.394)
	
=
+
−


−
−
(
e
) (e
(e
)
(
)
b
b
a
j
j T
j T
j T
1
0
0
1
1
ω
ω
ω
ω
λ
/
/
	
(8.395)
	
=
+
−


−
−
(
e
) (e
)
(
)
b
b
a
j
j T
j T
1
0
0
1
1
ω
ω
ω
λ
/
/
	
(8.396)
	
= e| |
G 	
(8.397)
The phase error are
	
e
e
∠= ∠
∠
−
G
j T
G
G j
(
)
(
)
ω
ω 	
(8.398)
	
=
+
−





−
−






Arg
Arg
b
b
a
j
j T
j T
1
0
0
1
e
e
ω
ω
ω
λ 	
(8.399)
	
e
LG
G j
G
R T
j T
R T
∠
=
∠
−
/
/
e(
)
(
)
ω
ω 	
(8.400)
	
=
+
−





−
−






Arg
Arg
b
b
a
j
j T
j T
j T
1
0
0
1
e
e
(e
)
ω
ω
ω
ω
λ
	
(8.401)
	
=
+
−





−
−
−






Arg
Arg
b
b
a
T
j
j T
j T
1
0
0
1
e
(e
)
ω
ω
ω
ω
λ 	
(8.402)
	
=
−
∠
e G
T
ω
	
(8.403)
The fractional gain and phase errors for the classical and real-time, improved Euler integrators 
are graphed in Figure 8.87 for the case when λ = −0.5. As expected from Equation 8.397, the 
fractional gain errors are equal and from Equation 8.403, the real-time, improved Euler integrator 
introduces an additional phase lag of ωT rad. Note that the fractional gain error varies from zero to 
approximately −2% over the interval 0 ≤ ωT ≤ 0.5 rad.

786
Simulation of Dynamic Systems with MATLAB® and Simulink®
Also, note that e∠≈
G
0 for 0 v ωT ≤ 0.5 rad. Hence, the classical improved Euler integrator con­
tributes essentially zero phase shift with respect to the continuous-time frequency response.
The phase angles (in deg) of the two discrete-time and the continuous-time frequency response 
functions are shown in Figure 8.88. As expected from Equation 8.403, the separation between 
the top two plots ∠G(ejωT) and ∠G(jω) and the bottom plot ∠GR/T(ejωT) is ωT rad. For example, at 
ωT = 0.3 rad, ∠G(ejωT) =  ∠G(jω) = −1.4031 rad (−80.3914 deg) and ∠GR/T(ejωT) = −1.7031 rad 
(−97.5801 deg).
EXAMPLE 8.11
An object with thermal capacitance C and thermal resistance R shown in Figure 8.89 is exposed 
to a surrounding temperature that varies according to T t
T
f t t
T
0
0
0
0
2
0
( )
sin
,
=
+
≥
∆
π
. The 
0
–0.5
0.1
0
–0.1
–0.2
Phase error (rad)
–0.3
–0.4
–0.025
0.005
0
–0.005
–0.01
Fractional gain error
–0.015
–0.02
0.5
0.4
0.3
0.2
Phase error in discrete-time frequency response functions
Fractional gain error in discrete-time frequency response functions
0.1
0
0.5
0.4
0.3
0.2
0.1
ωT (rad)
e∠GR/T
e∠G
e|G|
e|GR/T|
FIGURE 8.87  Dynamic errors from simulation of dx/dt = −0.5x + u with classical and real-time, improved 
Euler integration (T = 0.1 s).
Phase angle of discrete-time and continuous-time systems
Phase angle (deg)
0
–20
–40
–60
–80
–100
–200 0
0.1
0.2
ωT (rad)
∠GR/T(ejωT)
∠G(ejωT)
∠G(jω)
ωT = 0.3 rad (17.2 deg)
0.3
0.4
0.5 
FIGURE 8.88  Phase of discrete-time and continuous frequency response functions.

787
Advanced Numerical Integration
mathematical model governing ˆ( )
T t , the temperature of the object, consists of Equations 8.404 
and 8.405.
Baseline system parameter values are
	
C
R
=
°
=
°
200
0 005
Btu/ F
F/Btu/h
,
.
,	
	
T
T
f
T
0
0
0
50
20
1
24
0
50
=
°
=
°
=
=
°
F
F
cycle every
h
F
,
,
, ( )
∆
	
Find the difference equations for simulating the temperature response using
	
a.	Improved Euler integration
	
b.	Real-time, improved Euler integration using a one-step delayed version of the input
	
c.	Find the analytical solution for ˆ( )
T t .
	
d.	Simulate the temperature response over two cycles in T0(t) by recursive solution of the 
difference equations in parts (a) and (b). Choose the time step T, so that T/RC = 0.25. Plot 
the analytical and numerical solutions on the same graph.
	
e.	Repeat part (d) for f0 = 1 cycle every 3 h.
	
C dT
dt
Q t
ˆ
( )
=
	
(8.404)
	
Q t
R T t
T t
( )
[
( )
( )]
=
−
1
0
ˆ
	
(8.405)
	
a.	Combining Equations 8.404 and 8.405 leads to the differential equation of the system.
	
τ
τ
d
d
ˆ
ˆ( )
( ),
T
t
T t
T t
RC
+
=
=
0
	
(8.406)
	
	   The state derivative function is
	
f T T
T
t
T
T
(
)
d
d
(
)
ˆ,
ˆ
ˆ
0
0
1
=
=
−
τ
	
(8.407)
	
	 and the difference equation for implementing standard improved Euler integration is
	
ˆ
ˆ
T
T
T
T
T
T
n
n
+ =
−
+












+
−






1
2
1
1
2
2
1
τ
τ
τ
τ
+





=
+
T
T
T
n
n
n
0
0
1
2
0 1 2
,
,
,
, , ,
τ
…
	
(8.408)
FIGURE 8.89  Thermal system for Example 8.11.

788
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
	 where
	
T
T
nT
n
f
T
n
0
0
0
0 1 2
2
,
sin
,
, , ,
(
)
=
+
=
…
=
∆
ω
ω
π
	
(8.409)
	
b.	Delaying the input T0(t) by T h before sampling leads to the difference equation
	
ˆ
ˆ
T
T
T
T
T
T T
n
n
+ =
−
+











+






−
1
2
1
2
1
τ
τ
τ
τ
0
1
0
2
0 1 2
,
, ,
, , ,
n
n
T
T
n
−+





=
τ
…
	
(8.410)
	
c.	The analytical solution for ˆ( )
T t  is obtained by Laplace transforming Equation 8.406 fol­
lowed by inverse Laplace transformation of the expression for ˆ( )
T s . The steps are left for 
an exercise. The result is
	
T
T
T
T
T
t
t
0
0
0
2
0
2
1
1
+
−
+






+ +
−
−
ˆ
(
)
(
) [sin
(
)
/
(0)
e
τω
τω
τω
ω
τω
τ
∆
∆
cos
]
ωt
	
(8.411)
	
d.	The simulated responses are determined by recursive solution of the appropriate differ­
ence equation in “Ch8_Ex8_11.m.” The step size is determined from
	
T
RC
=
=
°
°
=
0 25
0 25 0 005
200
0 25
.
.
( .
)(
)
.
F/Btu/h
Btu/ F
h 	
	
	   The continuous-time input T0(t) is shown in the top half of Figure 8.90. The discrete-
time input T0,n, n = 0, 1, 2, 3, … are the sampled values at 0.25 h intervals; however, only 
the sampled values at the end of each hour are shown in Figure 8.90. The lower half of 
Figure 8.90 shows the continuous-time output ˆ( )
T t  and the discrete-time outputs at the 
end of each hour, that is, every fourth value.
	
	   The continuous-time response ˆ( )
T t  and the simulated response ˆTn generated by 
improved Euler integration are indistinguishable from each other at the end of the inte­
gration steps. The discrete-time response ˆ
,
TR T n
/
 is simply ˆTn delayed by T = 0.25 h. There 
is close agreement between the simulated and analytical responses because the dynamic 
errors are very small when ωT = 0.065 (see Figure 8.87).
T0(t)
t (h)
T0,n
T = 0.25 h
T = 0.25 h
τ = 1 h
ωT = 0.065 rad
f0 = 1 cycle per 24 h
Continuous-time input T0(t) and sampled values T0,n
0
30
40
50
Temperature (deg F)
60
70
30
40
50
Temperature (deg F)
60
70
4
8
12
16
20
24
28
32
36
40
44
48
0
4
8
12
16
20
24
28
32
36
40
44
48
T^ (t)
T^ R/T,n
T^ n
Continuous-time output T^(t) and discrete-time outputs T^ n and T ^ R/T,n
FIGURE 8.90  Continuous- and discrete-time inputs and outputs (f0 = 1 cycle/24 h).

789
Advanced Numerical Integration
	
e.	The period of input temperature fluctuations is reduced from 24 to 3 h. The new radian 
frequency is ω = 2πf0 = 2π (1/3) = 2.094 rad/h and ωT = 0.524 rad. A slight difference 
between the simulated response ˆTn, and the continuous-time response is now evident as 
shown in Figure 8.91. According to Figure 8.87, the two are in phase and the fractional 
gain error is approximately −0.02 (−2%).
	
	   The real-time, ilmproved Euler temperature response ˆTR T n
/ ,  is once again a delayed 
version of ˆ ,
Tn  the delay being T = 0.25 h. There is a significant difference between the 
analytical solution and the real-time, improved Euler response.
EXERCISES
	8.47	 Rework Example 8.9 using two half steps of RK-2 to generate the starting value for the real-
time predictor–corrector.
	8.48	 Use the real-time predictor–corrector to simulate the response of the first-order system in 
Example 8.9 for λT = 0.1 and a sinusoidal input u(t) = sin ωt, t ≥ 0. Write a MATLAB script 
file that accepts values for the radian frequency in the range 0.1 ωBW ≤ ω < 10 ωBW, where ωBW 
is the system bandwidth and plots the simulated response and exact solution.
	8.49	 Suppose a zero-order extrapolator y
u n
u
n
n
n
=
=
…
−
+
ˆ
,
, , ,
1
0 1 2
 is used instead of the first-
order extrapolator in Equation 8.358.
	
a.	 Find the z-transform G(z) = Y(z/U(z) of this extrapolator.
	
b.	 Find an expression for the fractional error in the frequency response function eG.
	
c.	 Find expressions for the fraction error in gain e|G| and the error in phase e∠G .
	
d.	 Find asymptotic formulas for the errors in part (c).
	
e.	 Plot the magnitude and phase of the zero order and ideal extrapolator.
	8.50	 Derive the asymptotic expression in Equation 8.373 for the fractional error in extrapolator 
frequency response gain.
	8.51	 Estimate the fractional gain and phase errors from the graph in Example 8.10 (Figure 8.79) 
for the case when ωT = 0.5 rad. Compare the results with the exact values given in Equations 
8.372 and 8.375.
	
	 Hint: Run “Ch8_Ex8_10.m” and enlarge the plots to facilitate the measurements needed to 
estimate the respective errors.
T0(t)
T0,n
T = 0.25 h
ωT = 0.524 rad
f0 = 1 cycle per 3 h
t (h)
Continuous-time input T0(t) and sampled values T0,n
T = 0.25 h
T^ (t)
τ = 1 h
30
40
50
Temperature (deg F)
60
70
30
40
50
Temperature (deg F)
60
70
0
6
5
4
3
2
0.5
1.5
T^ R/T,n
2.5
3.5
4.5
5.5
1
0
6
5
4
3
2
0.5
1.5
2.5
3.5
4.5
5.5
1
T^ (t)
n
Continuous-time output T^(t) and discrete-time outputs T^ n and T ^ R/T,n
FIGURE 8.91  Continuous- and discrete-time inputs and outputs (f0 = 1 cycle/3 h).

790
Simulation of Dynamic Systems with MATLAB® and Simulink®
	8.52	 Repeat Example 8.10 part (b) using the second-order system
	
d
d
d
d
/
2
2
2
2
2
2
10
x
t
x
t
x
K
u
K
n
n
n
n
+
+
=
=
=
ξω
ω
ω
ω
(
,
rad s)
	
	
	 in place of the first-order system. Plot the exact and simulated responses for ζ = 0.1, ζ = 0.707, 
and ζ = 2 when ωT = 0.1 rad, ωT = 0.25 rad, ωT = 0.5 rad, and ωT = 1 rad. Note that there are 
a total of 12 distinct combinations of ζ and ωT.
	8.53	 Derive the analytical expression for ˆT(t) in Equation 8.411.
	8.54	 Run the M-file “Ch8_Ex8_11.m.”
	
a.	 Zoom in the bottom graph in Figure 8.91 in order to accurately measure the peak ampli­
tudes (with respect to T0 = 50° F) after the transient response has died out. Calculate the 
fractional error in |G(ejωt)| and compare to the value estimated from Figure 8.87.
	
b.	 Measure the time phase shift in ˆ( )
T t  and ˆTn with respect to the input T0(t), and convert the 
value to degrees. Compare your answer with the phase angle estimated from Figure 8.87.
	8.55	 Rework Example 8.11 and include the real-time, modified Euler integrator given in Equations 
8.323 and 8.324.
	8.56	 The classic RK-4 integrator introduced in Section 6.2 is incompatible with real-time simula­
tion. Choose a step size of T = 0.01 s for the RK-4 integrator given by
	
k
Tk
k
1
1 2
2
1 2
1 2
1 2
=
=
+
=
=
+
+
+
+
f x
u
x
x
f x
u
x
x
n
n
n
n
n
n
n
(
,
),
0.5
(
,
),
/
1
/
/
/
ˆ
ˆ
n
n
n
n
n
n
Tk
f x
u
x
x
Tk
f x
+
=
=
+
=
+
+
+
+
0 5
0 5
2
3
1 2
1 2
1 2
3
4
1
.
ˆ
ˆ
.
ˆ
k
k
(
,
),
(
,
/
/
/
ˆun+1)
	
	
x
x
T k
k
k
k
n
n
+ =
+
+
+
+
1
1
2
3
4
6
2
2
(
)
	
	
	 to simulate the response of the system dx/dt = x + u when the input is given by u = u(t) = sin 
25t, t ≥ 0. The initial condition x(0) = 0. Compute ˆun+1 2
/  and ˆun+1 based on linear extrapo­
lation through the points (t−n−1, un−1) and (tn, un). Plot the exact solution and the simulated 
response on the same graph.
8.6  ADDITIONAL METHODS OF APPROXIMATING 
CONTINUOUS-TIME SYSTEM MODELS
Several additional methods for simulating the dynamics of continuous-time systems are presented 
in this section. Explanations of each are followed by the application of the methods to a linear con­
tinuous-time system to produce the z-domain transfer function, difference equations, and frequency 
response functions of the resulting discrete-time systems.
8.6.1  Sampling and Signal Reconstruction
A special case of this method was introduced briefly in Exercise 4.74. A discrete-time system to 
approximate an LTI continuous-time system can be synthesized by sampling the continuous-time 
input and then reconstituting the input using a reconstruction process. The reconstructed signal is 
applied to the LTI continuous-time system. Finally, the output is sampled to produce a discrete-time 
signal. The process is illustrated in Figure 8.92.
The sampled values uk, k = 0, 1, 2, … can be used to reconstruct a piecewise continuous approxi­
mation to u(t) in different ways. The simplest approach is to use a zero-order hold (ZOH) circuit, 

791
Advanced Numerical Integration
which generates a zero-order polynomial fit through the sampled values to produce the piecewise 
constant staircase function u t( ) shown in Figure 8.93. A single value of uk, k = 0, 1, 2, … in each 
interval is all that is required to reconstruct the continuous-time signal approximation for that 
interval.
The piecewise constant function u t( ) can be decomposed into a series of rectangular pulses as 
shown in Figure 8.94.
Expressing u t( ) in terms of the unit step function u(t),
	
u
u
u
u
u
u
t
u
t
T
u
t
T
t
T
u
t
T
t
( )
[
(
)]
[ (
)
(
)]
[ (
)
(
=
−
−
+
−
−
+
−
−
−
−
0
1
2
1
2
2
ˆ
ˆ
ˆ
ˆ
ˆ
3T)]+	
(8.412)
Laplace transforming Equation 8.412 gives
	
U s
u
s
s
u
s
s
u
s
Ts
Ts
Ts
Ts
( ) =
−





+
−





+
−
−
−
−
−
0
1
2
2
2
1
e
e
e
e
e−





+
2Ts
s

	
(8.413)
The output of the continuous-time system with transfer function G(s) is
	



y
Y s
U
t
G s
s
( )
{ ( )}
{
( )}
( )
=
=
−
−
ℒ
ℒ
1
1
	
(8.414)
	
=
−
+
−
+
−
+


−
−
−
−
−
−
ℒ1
0
1
2
2
1
1
1
1
G s u
u
u
Ts
Ts
Ts
Ts
Ts
( )
(
)
(
)
(
)
e
e
e
e
e
s





	
(8.415)
FIGURE 8.93  Representative signals in Figure 8.92 using a ZOH reconstruction device.
FIGURE 8.94  ZOH output u(t) shown as a sum of rectangular pulses.
FIGURE 8.92  Sampling and signal reconstruction to approximate a linear time-invariant continuous-time 
system.

792
Simulation of Dynamic Systems with MATLAB® and Simulink®
The discrete-time output yk consists of the sampled values y t
k
Y z
t
kT
( ) |
,
, , ,
( )
=
=
…
0 1 2
 is obtained 
by z-transforming Equation 8.415 after setting z = eTs, resulting in
	
Y z
z
u
z
u z
z
u z
z
G s
s
( )=
−
(
)+
−
(
)+
−
(
)+



−
−
−
−
−
−
[
]
( )
0
1
1
1
1
2
2
1
1
1
1
1
ℒ








	
(8.416)
	
=
+
+
+
−











−
−
−
−
z
u
u z
u z
z
G s
s
[
](
)
( )
0
1
1
2
2
1
1
1

ℒ

	
(8.417)
The inside bracketed expression is recognized as U(z) = z{uk}. Hence,
	
Y z
U z
z
z
G s
s
( )
( )(
)
( )
=
−












−
−
1
1
1
ℒ
	
(8.418)
where z{L−1 {G(s)/s}} represents the z-transform of the discrete-time signal obtained from uniform 
sampling of the continuous-time signal L−1 {G(s)/s}. The z-domain transfer function resulting from 
the sampling and ZOH reconstruction method illustrated in Figure 8.92 is given by
	
G z
Y z
U z
z
z
G s
s
( )
( )
( )
(
)
( )
=
=
−












−
−
1
1
1
ℒ
	
(8.419)
The errors resulting from the use of Equation 8.419 are related to the signal reconstruction pro­
cess. As you might expect, properties of the input u(t), sampling interval T, and the method of 
reconstructing the input from the sampled values uk, k = 0, 1, 2, … play a central role in the process.
We now illustrate the application of Equation 8.419 in finding a discrete-time system approxima­
tion of a second-order continuous-time system.
EXAMPLE 8.12
Consider an underdamped second-order system with damping ratio ζ = 1
10
/
, natural frequency 
ωn =
10 , rad/s, and steady-state gain of unity.
	
a.	Find the z-domain transfer function and difference equation of the discrete-time system 
approximation. Leave your answer in terms of the sampling period T.
	
b.	Input to the continuous-time system is u(t) = 5(1 − e−2t), t ≥ 0. Find the continuous-time 
system response y(t), t ≥ 0.
	
c.	Plot the continuous-time system response y(t) and the discrete-time approximation yk, 
k = 0, 1, 2, … for T = 0.05, 0.1, 0.25, 0.5 s.
	
a.	The transfer function of the continuous-time system is
	
G s
k
s
s
s
s
n
n
n
( ) =
+
+
=
+
+
ω
ζω
ω
2
2
2
2
2
10
2
10 	
(8.420)
	
G s
s
s s
s
s
s
s
s
( )
(
)
=
+
+
=
−
+
+
+
10
2
10
1
1
2
10
2
2
	
(8.421)
	
ℒ−
−






= −
+






1
1
3
1
3
3
G s
s
t
t
t
( )
cos
sin
e
	
(8.422)

793
Advanced Numerical Integration
	
	 From Table 4.4,
	
z
z
z
{ }1
1
=
−
	
(8.423)
	
z
kT
z
T z
z
T z
kt
T
T
T
{e
cos
}
(
cos
)
( e
cos
)
−
−
−
−
=
−
−
3
e
3
+ e
2
2
2
3
2
	
(8.424)
	
z
kT
T z
z
T z
kt
T
T
T
{e
sin
}
(
sin
)
( e
cos
)
−
−
−
−
=
−
3
e
3
+ e
3
2
2
2
	
(8.425)
	
	   Using Equations 8.423 through 8.425 in Equation 8.419 for G(z) results in (after 
simplification)
	
G z
b z
b
z
a z
a
( ) =
+
+
+
1
2
2
1
2 	
(8.426)
	
b
T
T
b
T
T
T
T
T
1
2
2
1
3
1
3
3
1
3
= −
+






=
−
+

−
−
−
e
3
e
e
3
cos
sin
,
cos
sin




	
(8.427)
	
a
T a
l
T
T
= −
=
−
−
2
3
2
2
e
e
cos
,
	
(8.428)
	
	   Equation 8.426 leads to the difference equation of the discrete-time system
	
y
a y
a y
bu
b u
k
k
k
k
k
+
+
=
+
−
−
−
1
1
2
2
1
2
1	
(8.429)
	
b.	The continuous-time system response to the input u(t) is obtained from
	
y t
G s U s
s
s
s
s
( )
{ ( ) ( )}
=
=
+
+
⋅
−
+









−
−
ℒ
ℒ
1
1
2
10
2
10
1
1
2
5



	
(8.430)
	
	   Partial fraction expansion of the terms in brackets followed by inverse Laplace trans­
formation leads to
	
y t
t
t
t
t
( )
sin
,
=
−
−
≥
−
−
5
5
10
3
2
e
e
3
0
	
(8.431)
	
c.	The MATLAB M-file “Ch8_Ex8_12.m” includes statements to solve Equation 8.429 in 
recursive fashion. Figure 8.95 shows the continuous-time system response and the dis­
crete-time response when T = 0.05, 0.1, 0.25, 0.5 s.
For signals that are not band limited such as the input u(t) = 5(1 − e−2t), a good rule of thumb is to 
sample 10 times faster than the shortest time constant (τ = 0.5 s in this case). The top left graph in 
Figure 8.95 corresponds to T = τ/10 = 0.05 s, and the agreement between the continuous-time 
and discrete-time responses is excellent.
The outputs of the ZOH for the two extremes (T = 0.05 and 0.5 s) are shown in Figure 8.96, 
illustrating the importance of the sampling process.
The ZOH has characteristics similar to a low-pass filter. To see this, suppose the first sampler 
in Figure 8.92 produces a train of impulses of strength u(kT) at the sampling instants kT, k = 0, 
1, 2, … instead of the discrete-time signal uk = u(kT), k = 0, 1, 2, …. Knowing the output of the 

794
Simulation of Dynamic Systems with MATLAB® and Simulink®
ZOH is uk, kT ≤ t ≤ (k + 1)T implies that the ZOH is effectively integrating the kth impulse for 
kT ≤ t < (k + 1)T. The situation is portrayed in Figure 8.97. The transfer function of the ZOH is 
therefore
	
G
s
s
Ts
ZOH
e
( ) = −
−
1
	
(8.432)
Keep in mind that the impulse sampler is a mathematical fiction that allows the zero-order 
hold to be modeled by the continuous-time transfer function in Equation 8.432.
The frequency response function is obtained by replacing s with jω in Equation 8.432.
6
5
4
3
2
1
0
0
1
2
3
4
5
T = 0.05 s
t (s)
6
5
4
3
2
1
0
0
1
2
3
4
5
t (s)
6
5
4
3
2
1
0
0
1
2
3
4
5
t (s)
6
Continuous-time and discrete-time system responses
5
4
3
2
1
0
0
1
2
3
4
5
t (s)
y(t)
yk
T = 0.1 s
y(t)
yk
T = 0.25 s
y(t)
yk
T = 0.5 s
y(t)
yk
FIGURE 8.95  Illustration of “sample and ZOH reconstruction” method.
FIGURE 8.96  Effect of sampling rate on ZOH reconstruction of input u(t).

795
Advanced Numerical Integration
	
G
j
j
j T
ZOH
e
(
)
ω
ω
ω
= −
−
1
	
(8.433)
Equation 8.432 can be manipulated into the form (Kuo 1980)
	
G
j
T
T
T
j
T
ZOH
e
(
)
sin (
)
(
)
ω
ω
ω
ω
=
−
2
2
2
	
(8.434)
	
= 





−
2π
ω
π ω ω
π ω ω
π ω ω
s
s
s
j
s
sin (
)
(
)
(
)
e
	
(8.435)
where ωs = 2π/T is the sampling frequency. Equation 8.434 reveals that the ZOH introduces a half 
sample period (T/2) delay, which explains the need for choosing T small when the input contains 
significant high-frequency components.
The magnitude and phase of GZOH(jω) are shown in Figure 8.98 for the case where T = 0.05 s 
and ωs = 2π/T = 125.67 rad/s. Note the DC gain |GZOH(j0)| = T.
For band-limited inputs with cut-off frequency ω0, the minimum sampling frequency is 
ωs = 2ω0. The actual sampling period should be chosen to minimize the attenuation of GZOH(jω) 
FIGURE 8.97  Impulse sampler feeding ZOH device.
0
–1250
–1000
–750
–500
–250
0
50
100
150
200
250
300
350
400
450
500
ω (rad/s)
0.5 ωs
2 ωs
ωs
ω0 = 0.5 ωs’
T = 0.5 s
3 ωs
4 ωs
Arg [GZOH (jω)], deg
0
0.06
0.05
0.04
0.03
0.02
0.01
0
50
100 150 200 250
Frequency response of zero-order hold
300 350 400
450 500
ω (rad/s)
[GZOH (jω)]
FIGURE 8.98  Frequency response of GZOH(jω).

796
Simulation of Dynamic Systems with MATLAB® and Simulink®
over the information band (0, ω0). Furthermore, additive noise components above the cutoff fre­
quency will also be passed, since there is no sharp drop in attenuation at ω0.
The “c2d” function in the MATLAB control system toolbox introduced in Section 4.10 sup­
ports sampling and ZOH signal reconstruction to find the z-domain transfer function given in 
Equation 8.419. The syntax for calling the “c2d” function using ZOH approximation is sysd = 
c2d(sysc,T,‘zoh’) where ‘‘sysc’’ is created using the control system toolbox command “tf” to 
represent the continuous-time transfer function.
8.6.2  First-Order Hold Signal Reconstruction
More accurate signal reconstruction methods are possible using polynomial fits through several 
data points, resulting in different expressions for the z-domain transfer function G(z). The output 
of a first-order hold circuit that approximates the sampled continuous-time signal by a sequence of 
linear functions is shown in Figure 8.99.
The analytical expression for the piecewise continuous output of the first-order hold is given by
	

…
u t
u
u
u
T
t
nT
nT
t
n
T
n
n
n
n
( )
(
),
,
=
+
−
−
≤<
+
=
−1
1
0
(
)
(
1, 2,
)
	
(8.436)
where u−1 is assumed to be zero. A derivation of G(z) based on a first-order hold approximation 
is possible using a similar approach to the derivation leading to the z-domain transfer function in 
Equation 8.419 using the zero-order hold approximation. However, it is quite laborious and unneces­
sary, since the “c2d” function includes the first-order hold approximation method. The approxima­
tion is invoked by issuing also the command sysd = c2d(sysc,T,‘foh’).
8.6.3  Matched Pole-Zero Method
Another approach to developing a discrete-time approximation to a continuous-time system is by 
the process of matching the z-plane poles and zeros to their s-plane counterparts. This method can 
be applied to any asymptotically stable, LTI system with nonzero steady-state gain.
Consider an nth-order, stable, LTI system with transfer function G(s). Uniform sampling every 
T s of the system’s impulse response produces a discrete-time signal from an equivalent nth-order 
discrete-time system with z-domain transfer function G(z). The n poles of G(z) are obtained by a 
mapping of the s-plane poles according to
	
z
i
n
i
siT
=
=
…
e
,
, ,
,
1 2
	
(8.437)
FIGURE 8.99  First-order hold reconstruction of a sampled continuous-time signal.

797
Advanced Numerical Integration
Two examples of this are
	
G s
s
a
g t
G s
at
( )
( )
{ ( )}
e
=
+
⇒
=
=
−
−
1
1
ℒ
	
(8.438)
	
gk
g kT
G z
z gk
z
z
akT
aT
=
=
⇒
=
=
−
−
−
(
)
e
( )
{
}
e
	
(8.439)
	
G s
s
s
s
s
j
s
j
( )
(
)
[
(
)][
(
)]
=
+
+
+
=
+
−
+
−
−
α
α
β
α
α
β
α
β
2
2
	
(8.440)
	
g t
G s
T
T
( )
( )
cos
{
}
=
=
−
−
ℒ1
e α
β
	
(8.441)
	
g
g kT
kT
k
T
=
=
−
(
)
cos
e α
β
	
(8.442)
	
G z
z
T
z
T z
T
aT
T
( )
cos
(e
cos
)
=
−
−
+
−
−
−
e
e
α
α
β
β
2
2
	
(8.443)
	
=
−
−
−
−
−+
−+
z
T
z
z
T
T
j
T
j
e α
α
β
α
β
β
cos
[
e
) ][
e
] 	
(8.444)
When zeros of G(s) are present as in Equation 8.440, they are not mapped into zeros of G(z) 
according to Equation 8.437. However, in the matched pole-zero method, a discrete-time transfer 
function is created with the poles and zeros of G(z) determined from Equation 8.437.
Two additional steps complete the process. First, the term zn−m, where m is the order of the 
numerator polynomial of G(s), is inserted in the numerator of G(z) (Smith 1987). An alternative 
approach inserts the term (z + 1)n−m in the numerator of G(z). Second, the gains of the two transfer 
functions are matched at some frequency by appropriate choice of a gain term in G(z).
The matched pole-zero method is illustrated for the second-order system in Example 8.12. The 
poles of G(s) in Equation 8.420 are s1,2 = α ± jβ, (α = −1, β = 3). Since there are no zeros of G(s), 
m = 0 and the z-domain transfer function G(z) is of the form
	
G z
K
z
z
z
s T
e
T
s
( )
(
)(
)
=
′
−
−
2
1
2
e
e
	
(8.445)
	
=
′
−
−
+
−
K
z
z
z
j
T
j
T
2
[
e
][
e
]
(
)
(
)
α
β
α
β
	
(8.446)
	
=
′
−
+
K
z
z
T z
T
T
2
2
2
2(e
cos
)
α
α
β
e
	
(8.447)
Substituting the given values of α and β into Equation 8.447 results in
	
G z
K
z
z
T z
T
T
( )
(e
cos
)
=
′
−
+
−
−
2
2
2
2
3
e
	
(8.448)

798
Simulation of Dynamic Systems with MATLAB® and Simulink®
The DC gains of G(s) and G(s) are
	
G s
s
s
s
( ) =
=
=
+
+
=
0
2
0
10
2
10
1
	
(8.449)
	
G z
K
z
z
T z
z
T
T
z
( )
(e
cos
)
=
−
−
=
=
′
−
+
1
2
2
2
1
2
3
e
	
(8.450)
	
=
′
−
+
−
−
K
T
T
T
1
1
2
3
2
e
cos
e
	
(8.451)
Equating the DC gains gives
	
′ =
+
K
T
T
T
1
2
3
2
–
cos
–
–
e
e
	
(8.452)
Substituting K ′ in Equation 8.452 into Equation 8.448 gives
	
G z
T
z
z
T z
T
T
T
T
( )
(
e
cos
)
(e
cos
)
=
−
+
−
+
−
−
−
−
1
2
3
2
3
2
2
2
2
e
e
	
(8.453)
A frequency response plot of the continuous-time system transfer function G(s)|s=jω and the 
approximating discrete-time system transfer functions G(z)|z=e
jωT based on the two methods are 
shown in Figure 8.100 for sampling times of T = 0.05 s and T = 0.25 s, respectively. G1(ejωT) refers 
to the discrete-time transfer function in Equation 8.426 arrived at by using the ZOH method, and 
G2(ejωT) corresponds to the one in Equation 8.453 obtained using the matched pole-zero method.
The plots extend from zero (DC) to the Nyquist frequency (π/T), which is 62.83 rad/s for 
T = 0.05 s and 12.57 rad/s when T = 0.25 s. An accurate (magnitude and phase) approximation of 
Frequency response of continuous-time and
approximate discrete-time systems
ω (rad/s)
Arg G2(ejωT)
|G2(ejωT)|
|G1(ejωT)|
|G1(ejωT)|
|G1(ejωT)|
|G(jω)|
|G(jω)|
T = 0.05 s
T = 0.25 s
Arg G1(ejwT)
Arg G(jω)
Arg G2(ejωT)
Arg G1(ejwT)
Arg G(jω)
Phase (deg)
0
–250
–200
–150
–100
–50
0
0
0.25
0.5
0.75
Magnitude
1
1.25
1.5
1.75
0
0.25
0.5
0.75
Magnitude
1
1.25
1.5
1.75
Phase (deg)
–250
–200
–150
–100
–50
0
0
12
10
8
6
4
2
10 20 30 40 50 60
ω (rad/s)
ω (rad/s)
0
0
12
10
8
6
4
2
10 20 30 40 50 60
ω (rad/s)
FIGURE 8.100  Frequency response of continuous-time and approximate discrete-time systems.

799
Advanced Numerical Integration
the continuous-time system frequency response characteristics is possible using the ZOH approxi­
mation method or the matched pole-zero technique with T = 0.05 s for frequencies up to around 
5 rad/s. The magnitude functions for both discrete-time systems and the continuous-time system are 
nearly identical over the entire range of frequencies shown for T = 0.05 s.
The “c2d” function in the MATLAB control system toolbox implements a “modified matched 
pole-zero” approximation. A (z + 1)(n−m)−1 term is inserted in the numerator where m and n are the 
orders of the numerator and denominator of G(s). The resulting G(z) will contain an (n − 1)st-order 
polynomial in the numerator. The current output of the nth-order discrete-time system yk depends 
on outputs yk−1, yk−2, …, yk−n and most importantly only on the past inputs uk−1, uk−2, …, uk−n. With 
an nth-order term in the numerator of G(z), yk will depend on the current input uk as well. In real-
time applications, the current output would have to wait for an A/D read, implementation of the 
difference equation followed by a D/A write to hardware, all performed in theoretically zero time. 
The problem is mitigated to a large extent when these operations consume a small fraction of the 
sample time T.
The matched pole-zero and modified matched pole-zero methods are applied to the continu­
ous-time transfer function in Equation 8.420 in “Ch8_matched_pole.m” with a sampling time of 
T = 0.05 s. Results are as follows:
	
Matched pole-zero: G z
z
z
z
( )
.
.
.
=
−
−
0 0237
1 8811
0 9048
2
2
	
(8.454)
	
Modified matched pole-zero: G z
z
z
z
( )
.
(
)
.
.
=
+
−
+
0 01187
1
1 8811
0 904
2
8 	
(8.455)
An important property of the ZOH approximation and matched pole-zero methods is related to 
the stability of the resulting discrete-time systems. Note that the characteristic polynomials of the 
transfer functions G(z) in Equations 8.426, 8.454, and 8.455 are identical, namely, z2 − 2(e−T cos 3T) 
z + e−2T. The continuous-time system poles are mapped to the z-plane according to Equation 8.437 
in each case. Consequently, continuous-time system poles in the left-hand plane are mapped to the 
interior of the Unit Circle in the z-plane and, therefore, produce stable discrete-time modes as well.
8.6.4  Bilinear Transform with Prewarping
The use of trapezoidal integration to discretize a continuous-time system with transfer function G(s) 
was discussed in Section 4.7. The z-domain transfer function of the discrete-time system approxi­
mation was shown to be
	
G z
G s
s
T
z
z
( )
( )
=
←
−
+






2
1
1 	
(8.456)
An alternate derivation of Equation 8.456 is based on the transformation z = eTs, which can be 
written in terms of a pair of infinite series expansions according to
	
z
Ts
Ts
Ts
Ts
T
s
T
s
=
=
+
+
+
+
−
+
−
e
e
(
)
(
)
(
)
(
!)(
)
(
!)(
)
(
)
(
2
2
2
3
1
2
1 2
2
1 3
2
1
2

1 2
2
1 3
2
2
3
!)(
)
(
!)(
)
Ts
Ts
−
+	
(8.457)
Truncating both series after the linear term gives
	
z
T
s
T
s
=
+
−
1
2
1
2
(
)
(
) 	
(8.458)

800
Simulation of Dynamic Systems with MATLAB® and Simulink®
Solving for s in Equation 8.458 gives
	
s
T
z
z
=
−
+






2
1
1 	
(8.459)
Equation 8.459 is known as the bilinear transform, and the process for obtaining the discrete-
time approximation is commonly referred to as Tustin’s method. The left half of the s-plane con­
sisting of points s = σ + jω, −∞ < σ < 0 is mapped into the interior of the Unit Circle, |z| < 1. 
Consequently, the method produces stable discrete-time systems regardless of the step size T pro­
vided the continuous-time system is stable. For this reason, it is among the most popular methods 
for simulation of continuous-time systems.
The frequency response of discretized systems obtained using the bilinear transform in Equation 
8.459 is examined by considering the image of points along the jω axis, that is, s = jω − ∞ < ω < ∞ 
From Equation 8.458 with s = jω,
	
z
T
j
T
j
j
=
+
−
=
1
2
1
2
1
(
)
(
)
ω
ω
θ
e
	
(8.460)
where
	
θ
ω
ω
=






−∞<
<∞
−
2
2
1
tan
T ,
	
(8.461)
The entire length of the jω axis from −j∞ (pt A) to j∞ (pt C) is mapped one-to-one into the Unit 
Circle starting at θ = −π (pt A′) to θ = π (pt C′) (see Figure 8.101).
Compressing the jω axis into the Unit Circle according to Equation 8.461 results in a warping 
of the frequency response. This can be overcome by prewarping a critical frequency, say ω0, in the 
s-plane before applying the bilinear transform to the continuous-time transfer function H(s).
Frequency response of the resulting z-domain transfer function ˆ ( )
H z  and the continuous-time 
transfer function H(s) will agree at the selected critical frequency, that is,
	
H s
H z
s
j
z
j
T
( )|
( )|
e
=
=
=
ω
ω
0
0
ˆ
	
(8.462)
	
ˆω
ω
0
0
2
2
=






T
T
tan
	
(8.463)
FIGURE 8.101  Bilinear transform mapping of the imaginary axis in the s-plane.

801
Advanced Numerical Integration
The following example illustrates the process of prewarping a second-order continuous-time fil­
ter transfer function to force agreement in the frequency response functions at the natural frequency 
of the filter.
EXAMPLE 8.13
An analog filter is described by
	
H s
s
s
s
n
n
n
n
( ) =
+
+
+
=
=
ω
ζω
ω
ζ
ω
2
2
2
2
(
0.25,
1000 rad s)
	
(8.464)
	
a.	Find H(z) using the bilinear transform with a sampling time of T = 0.001 s.
	
b.	Find the transfer function ˆ( )
H s  resulting from prewarping the natural frequency ωn.
	
c.	Find ˆ( )
H z  using the bilinear transform on the prewarped transfer function ˆ( )
H s .
	
d.	Plot the magnitude and phase of H(s), H(z), and ˆ( )
H z  on the same graph and comment 
on the results.
	
a.	Substituting the filter parameter values ζ and ωn into Equation 8.464 gives
	
H s
s
s
s
( ) =
+
+
+
10
500
10
6
2
6 	
(8.465)
	
	 H(z) is obtained by replacing s with the right-hand side of Equation 8.459. The MATLAB 
control system toolbox functions “BILINEAR” and “c2d” are both designed to facilitate 
implementation of the bilinear transform. One form of the function “BILINEAR,” which 
is applicable in this case, is
	
[NUMd, DENd] = BILINEAR (NUM, DEN, FS)
	
	 where the parameters “NUM” and “DEN” are row vectors describing the numerator and 
denominator of H(s) in descending powers of s, and “FS” is the sampling frequency in 
Hz. The numerator and denominator of H(z) are specified in the output arrays “NUMd” 
and “DENd.”
	
	   The M-file “Ch8_Ex8_13.m” contains the call to the “BILINEAR” function and the 
result is
	
NUMd = 0.1670 0.333 0.1663
	
DENd = 1.000 −1.0000 0.6667
	
	 Invoking the “c2d” function with “sysd = c2d (sync, T, ‘tustin’) results in
	
	 Transfer function:
	
0.167z^2 + 0.3333z + 0.1663
	
-------------------------------
	
z^2-z + 0.6667
	
sampling time = 0.001 sec
	
	 in agreement with the results obtained using the “BILINEAR” command.
	
b.	Prewarping the natural frequency using Equation 8.463 yields
	
ˆ
tan
.
tan
( .
)
ω
ω
n
n
T
T
=





=






2
2
2
0 001
1000 0 001
2
= 1092.6 rad s
	
(8.466)
	
	 The prewarped transfer function is therefore
	
ˆ( )
ˆ
ˆ
ˆ
.
.
.
H s
s
s
s
s
s
s
n
n
n
=
+
+
+
=
+
×
+
+
×
ω
ζω
ω
2
2
2
6
2
2
1 1938
10
546 3
1 1938
106
	
(8.467)

802
Simulation of Dynamic Systems with MATLAB® and Simulink®
	
c.	 ˆ( )
H z  results from the bilinear transformation applied to the transfer function in Equation 
8.467. Equivalently, the MATLAB statement
	
Sysd_prewarp = c2d(sysc, T, ‘prewarp’, w_crit)
	
	 can be found in “Ch8_Ex8_13.m” with “w_crit” set equal to the natural frequency 
ωn = 1000 rad/s. The resulting z-domain transfer function appears as
	
0.1902 z^2 + 0.3798z + 0.1896
	
--------------------------------------------
	
z^2 − 0.8928z + 0.6524
	
d.	The magnitude and phase plots for the continuous-time system frequency response H(jω) 
and the two discrete-time systems (with and without prewarping the natural frequency 
ωn = 1000 rad/s) are shown in Figure 8.102. As expected, Equation 8.462 is verified at 
the critical frequency of 1000 rad/s.
There is one additional method included in the “c2d” function, which requires the Signal 
Processing Toolbox for converting continuous-time models to discrete-time models. It is called the 
impulse invariant method. It is predicated on making the discrete-time system impulse response 
proportional to the sampled values of the continuous-time system impulse response function. The 
syntax for implementing this method is “sysd = c2d (sync,T, ‘imp’).”
EXERCISES
	8.57	 Implement the “c2d” function using the zero-order hold approximation in Example 8.12 and 
show that the results are consistent with Equations 8.426 through 8.428 when T = 0.05 s.
	8.58	 Derive the expression for GFOH(s), the transfer function of a first-order hold driven by an 
impulse sampler. Plot the frequency response for the case when T = 0.05 s, and compare the 
result with the frequency response plot of a ZOH with T = 0.05 s shown in Figure 8.98.
	8.59	 Redo Example 8.12 using
	
a.	 The first-order hold approximation and compare the results with the ZOH approximation 
method
FIGURE 8.102  Illustration of prewarping critical frequency prior to bilinear transform.

803
Advanced Numerical Integration
	
b.	 The bilinear transform method and compare the results with the ZOH approximation 
method
	8.60	 Apply the bilinear transform to the prewarped continuous-time transfer function ˆ ( )
H s  in 
Equation 8.46 and compare the result with z-domain transfer function ˆ ( )
H z  given in part (c) 
of Example 8.13.
	8.61	 The circuits in below figure are low- and high-pass filters.
	
a.	 Find the z-domain transfer function of the approximating discrete-time filters based on 
the bilinear transform with sample time T = 0.005 s for the low-pass filter and T = 0.05 s 
for the high-pass filter.
	
b.	 Repeat part (a) after first prewarping the critical frequencies of each filter.
	
c.	 Compare the frequency responses of the continuous-time and discrete-time filters.
	
d.	 Find and plot the unit step responses of the low-pass filter and its discrete-time 
approximations.
	
e.	 Repeat part (d) for the high-pass filter.
	8.62	 For the transfer function G(s) = 10/(s2 + 2s + 10) in Example 8.12,
	
a.	 Convert to state-space form x
x
A
Bu
=
+
, y
C
Du
x
=
+
 using the MATLAB function 
“tf2ss.”
	
b.	 Convert the continuous-time state-space model to discrete-time form using the MATLAB 
function “c2dm.” Choose the sample time T = 0.05 s and specify “zoh” as the method of 
approximation.
	
c.	 Obtain the unit step response by solving the discrete-time state model equations recur­
sively and plot the results.
	8.63	 For the filters in Exercise 8.62,
	
a.	 Obtain discrete-time filter approximations to each using the impulse invariant method.
	
b.	 Compare the frequency response functions of the continuous- and discrete-time filters.
	
c.	 Compare the impulse response functions of the continuous- and discrete-time filters.
8.7  CASE STUDY: LEGO MINDSTORMSTM NXT
8.7.1  Introduction
In the November 2008 issue of Mechanical Engineering, the American Society of Mechanical 
Engineers surveyed its members for the trend they thought would have the most significant impact 
10 years hence. In second place, with 26% of the responses, was Mechatronics—the integration of 
mechanical and electronic design. Incidentally, first place (28%) went to nanotechnology and micro­
electromechanical systems—devices that are demanded by mechatronicians.
The discipline of Mechatronics is a nexus of four technical sub-disciplines: mechanical systems, 
electronics systems, control systems, and computers. The intersection of mechanical and electronic 
systems is electromechanics; electronic and control systems intersect at control electronics; con­
trol systems and computers combine to form digital control systems; and finally, computers and 
mechanical systems form mechanical computer-aided design (CAD). Figure 8.103 displays these 
relationships graphically.

804
Simulation of Dynamic Systems with MATLAB® and Simulink®
From a feedback control systems perspective, mechatronics is the implementation or realization 
of a controller design. A feedback control system involves either tracking a changing input or regu­
lating a constant reference input. The block diagram for a generic feedback control system is given 
in Figure 8.104.
The feedback control system diagram begins with the reference input, which is fed into a com­
parator. The comparator measures the difference between the reference input and the feedback 
signal, generating an error signal. In order for the computer to process the error signal, it must 
first be converted by an A2D converter. Once the control signal is processed, it is converted by a 
D2A converter. It is this signal, fed into the actuator, that controls the process. Note that this signal 
may need to be amplified in order to actuate the controlling hardware. A sensor is connected to 
the process in order to measure the performance of the system. The sensor provides the feedback 
signal, which is used in the comparator. This loop is continually repeated for the process to be con­
trolled. Simply stated, control design synthesis involves mathematically modeling and analyzing a 
physical process (e.g., missile airframe) and then designing a controller (e.g., acceleration autopilot). 
Simulink’s graphical environment facilitates this “model-based design” approach. These steps of 
controller design synthesis are usually performed on the same host development platform, that is, a 
personal computer.
FIGURE 8.103  Mechatronics: mechanical, electronics, and control systems, and computers.
FIGURE 8.104  Feedback control system block diagram.

805
Advanced Numerical Integration
Beyond modeling, analysis, and design, mechatronics adds the implementation step. In this 
step, the controller design is realized on the actual (e.g., flight) hardware. Generated source code is 
compiled and assembled for a particular microprocessor that is executed for the digital controller 
design. Source code interfaces for actuators and sensors, called device drivers, are typically pro­
vided by vendors that manufacture these various pieces of hardware. An application that facilitates 
this extended development process is called an Integrated Development Environment (IDE). By 
adding MATLAB’s Real-Time Workshop to the host’s suite of tools, code generation, compilation, 
and assembly for a specific microprocessor are enabled. The repetitive process of making changes 
to the controller design in the Simulink model, generating, compiling, assembling, downloading, 
and running code on the microprocessor is known as rapid prototyping. This allows the engineer 
to build a little and test a little, thereby rooting out errors early in the development process and 
potentially avoiding the larger costs associated with redesigning the system late in the development 
process.
By combining the popular Lego MindstormsTM NXT (henceforth referred to NXT) robotics plat­
form with MATLAB’s Simulink and Real-Time Worshop tools, this development process can be 
demonstrated end to end. Therefore, the remainder of this section is devoted to
•	 Product requirements, software download, and installation
•	 Creating a Simulink model that provides a noisy input signal and then running the 
“unfiltered” model on the NXT to observe how the noisy signal affects the physical 
motor
•	 Modifying the Simulink model by adding a discrete-time Kalman filter (DTKF) (Section 
5.12), which filters the noisy input signal and then running the “filtered” model on the NXT 
observing the effect of the filtered signal on the physical motor
8.7.2  Requirements and Installation
The software and hardware requirements are
•	 MATLAB, Simulink, Real-Time Workshop, and Real-Time Workshop’s Embedded Coder 
available from The Mathworks
•	 CygwinTM and the GNU ARMTM compiler available as a download
•	 NXT hardware and corresponding device drivers available from Lego
Once The Mathworks software is installed and functioning properly, the third-party software 
download and installation (CygwinTM and the GNU ARMTM compiler) is facilitated by a MATLAB 
m-file script. CygwinTM is a UNIX shell environment that runs on Windows and the GNU ARMTM 
compiler compiles C source code for the ARM processor that runs on the NXT. The script is avail­
able from The Mathworks’ Web site at http://www.mathworks.com by searching for “ECRobot 
Installer.” (ECRobot is an abbreviation for Embedded Controller Robot.) Locate the hyperlink 
“Download the ECRobot installer” to download (ecrobot_installer_v1_2.zip at the time). Extract 
the files and then follow the README.pdf instructions. The ECRobotlnstaller contains three 
MATLAB m-file scripts:
•	 A script “download_ecrobot_tools” to download all the necessary software. Note: Before 
running the script in Step 1: Automated Download of the README file, it may need to be 
edited to accommodate the current version of nxtOSEK.
•	 A script “install_ecrobot_tools” to configure and install the necessary software.
•	 A script “update_nxt_firmware” that updates the firmware on the NXT to run ARM 
binary files

806
Simulation of Dynamic Systems with MATLAB® and Simulink®
Note: At the time of this writing, sg.exe had been removed from nxtOSEK. Therefore, sg.exe 
is obtained by downloading and extracting osek_os-1.1.1zh for nxtOSEK from the Web site http://
lejos-osek.sourceforge.net/download.htm. Copy/toppers_osek/sg/sg.exe to the nxtOSEK/toppers_
osek/sg directory.
At this point, follow Step 5: Verify that everything works as outlined in the README file. Note 
that the README file contains answers to commonly asked questions. If you have additional ques­
tions, please e-mail: mindstorms@mathworks.com.
8.7.3  Noisy Model
In this section, a Simulink model is created that generates a noisy input signal, which drives an 
NXT motor. First, the model is built and simulated to view the noisy signal. Then, C source code is 
generated, compiled, assembled, downloaded, and run on the NXT to observe how the noisy signal 
affects the physical motor.
Knowing ahead of time that C source code will be generated with MATLAB’s Real-Time 
Workshop, the model is architected such that the portion of the model that is generated into C source 
code exists within a function—where the function is driven by a scheduler. Upon starting Simulink, 
a new block set has been installed and added to the Simulink Library Browser called “ECRobot 
NXT Blockset.” In this blockset, there is a block called “ExpFcnCalls Scheduler.” This block gener­
ates function-call events according to the rate specified within the block parameters. For the model 
shown in Figure 8.105, this block generates function calls at the rate of 100 ms. The function-call 
scheduler expects to be connected to a demux block in case there are multiple functions being 
called by the scheduler. Even though there is only one function, a demux block is still necessary. 
The output of the demux block is the input into a subsystem block—which contains the function. 
However, at this top-level, a servo motor interface block (from the ECRobot NXT Blockset) is con­
nected to a scope, so the (noisy) output can be viewed. The blocks nxtbuild(Noisy’, ‘build’) and 
nxtbuild(‘Noisy’, ‘rxeflash’) are annotation blocks with call-back functions enabled to execute the 
corresponding command in MATLAB.
By double clicking on the subsystem block named “Noisy,” the function-call subsystem (from the 
standard Simulink library blockset) is seen as in Figure 8.106.
By double clicking on the function-call subsystem, the model that generates the noisy signal is 
seen as in Figure 8.107.
FIGURE 8.105  Top-level block diagram of the noisy model.

807
Advanced Numerical Integration
The creation of the function-call sSubsystem automatically places the f() block in this subsystem 
to indicate that the included elemental blocks are part of the function. A random number block with 
a mean of 32 and a variance of 322 generates the random signal. The saturation block limits possible 
signals to ±100 as these are the limits of the NXT motor signals. The data type conversion is set 
to int8 to represent the signed 8-bit integer, that is, −128 to 127. (The andom number, saturation, 
and data type conversion blocks are all part of the standard Simulink library blockset.) Finally, the 
Servo Motor Write block (from the ECRobot NXT blockset) is connected to port B. Port B is the 
second output (top/left) from the Lego “brick” as seen in Figure 8.108.
Upon running a Simulink simulation, the noisy data may be viewed from the scope block as seen 
in Figure 8.109.
Alternatively, the noisy data are available in the MATLAB Workspace as a variable “structure 
with time” named “noisy.” A plot of this noisy data is shown in Figure 8.110.
The next part of this exercise is to generate, compile, assemble, download, and run C source 
code for the “noisy” function on the NXT to observe how the noisy signal affects the physical 
motor.
FIGURE 8.106  Function-call subsystem.
FIGURE 8.107  Noisy signal model.

808
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 8.110  MATLAB plot of the noisy data.
FIGURE 8.108  Lego Mind-stormsTM NXT “brick.” (LEGO® and LEGO® Mind-storms® NXTTM are trade­
marks of the LEGO® Group, which does not sponsor nor endorse this book. This photo of the LEGO® Mind-
storms® NXTTM brick is used here with permission. © 2010 The LEGO® Group.)
FIGURE 8.109  Noisy output viewed from the Scope Block.

809
Advanced Numerical Integration
By clicking on the annotation block nxtbuild (Noisy’, ‘build’), the Real-Time Workshop code 
generator is invoked, which creates C source code and corresponding header files from the Simulink 
function. The following text appears in MATLAB’s Command Window.
### Starting Real-Time Workshop build procedure for model: Noisy
### Successful completion of Real-Time Workshop build procedure for 
model: Noisy
### Generating ECRobot NXT scheduler file(s) for model: Noisy
### Successful completion of ECRobot NXT scheduler file (s) generation 
for model: Noisy
### Executing GNU-ARM toolchain for building executable …
Successful C source code and header file generation result in the Real-Time Workshop Report 
appearing as shown in Figure 8.111.
On the left side of the Real-Time Workshop Report window, hyperlinks indicate the various sec­
tions of the C source code related to the function from the Simulink model. In particular, by clicking on 
“Noisy.c,” one can view portions of the code that correspond directly with the elemental blocks that con­
stitute the function of the Simulink model. The rest of the messages in MATLAB’s Command Window 
correspond to the build portion of compiling and assembling the binary image file named “Noisy.rxe.”
.
.
.
(many messages corresponding to the build process, i.e., compiling and 
assembling)
.
.
.
Generating binary image file: Noisy_rom.bin
Generating binary image file: Noisy_ram.bin
Generating binary image file: Noisy.rxe.
Once the binary image file “Noisy.rxe” has been created, click on the annotation block nxtbuild 
(“Noisy,” “rxeflash”) to load the binary image into the flash memory of the NXT. For this part of the 
procedure, MATLAB’s Command Window shows the following:
### Execute NeXTTool for uploading a program to the enhanced NXT standard 
firmware:./nxtprj/Noisy.rxe
Executing NeXTTool to upload Noisy.rxe …
FIGURE 8.111  Real-time workshop report.

810
Simulation of Dynamic Systems with MATLAB® and Simulink®
Noisy.rxe = 26144
NeXTTool is terminated.
Note: NeXTTool is a utility that transfers files from the PC to the NXT.
At this time, the NXT is ready to run the noisy motor program. Be certain there is a motor 
­connected to Port B on the brick. Upon running this program, the motor indeed runs erratically, 
exhibiting its response to the noisy input.
8.7.4  Filtered Model
In this section, the noisy Simulink model is modified by adding a DTKF (Section 5.12), which 
filters the noisy input signal. The model is simulated in Simulink to view the filtered signal. Then, 
as before, C source code is generated, compiled, assembled, downloaded, and run on the NXT to 
observe how the physical motor responds to the filtered signal.
As shown in Figure 8.112, the top-level block for the filtered model is similar to that of the noisy 
model, except the name of the subsystem block has been changed to “Filtered” and the annotation 
blocks have been updated as well.
By double clicking on the subsystem block named “Filtered,” the function-call subsystem (from 
the standard Simulink library blockset) is seen as in Figure 8.113.
FIGURE 8.112  Top-level block diagram for the filtered model.
FIGURE 8.113  Function-call subsystem.

811
Advanced Numerical Integration
By double clicking on the function-call subsystem, the model that generates the filtered signal is 
seen as in Figure 8.114.
A subsystem block named “DTKF” has been added to the model in order to filter the noisy 
signal. This is the same DTKF that was developed in Section 5.12 for the meteorite. However, 
rather than setting the variables in MATLAB (as in Section 5.12), the parameters are set directly 
in the Simulink blocks. Also, while the DTKF had three states: position, velocity, and acceleration, 
the position of the meteorite was of primary interest in that example. Therefore, the first output of 
the DTKF (corresponding to position) is selected as the input to the saturation block. The major 
subsystems of the DTKF are the a priori and a posteriori calculations of the state and covariance 
matrix updates as seen in Figure 8.115.
FIGURE 8.114  Filtered signal model.
FIGURE 8.115  Discrete-time Kalman filter subsystems.

812
Simulation of Dynamic Systems with MATLAB® and Simulink®
The details of the DTKF are shown in Figures 8.116 through 8.120. Notice in Figure 8.116 (a 
priori state) and 8.117 (a priori covariance) that the unit delay block inherits the sample time, that is, 
the function-call scheduler time, by setting sample time equal to −1 in the block properties.
Upon running a Simulink simulation, the filtered data may be viewed from the Scope Block as 
seen in Figure 8.121. Notice that the filtered value appears to be approximately 32, which was the 
mean of the random number block.
Alternatively, the filtered data are available in the MATLAB Workspace as a variable “structure 
with time” named “filtered.” A plot of the filtered data is shown in Figure 8.122.
By clicking on the annotation block nxtbuild(“Filtered,” “build”), the Real-Time Workshop code 
generator is invoked, which creates C source code and corresponding header files from the Simulink 
function. The following text appears in MATLAB’s Command Window.
### Starting Real-Time Workshop build procedure for model: Filtered
### Successful completion of Real-Time Workshop build procedure for 
model: Filtered
FIGURE 8.116  “A priori” state.
FIGURE 8.117  “A priori” covariance.

813
Advanced Numerical Integration
### Generating ECRobot NXT scheduler file(s) for model: Filtered
### Successful completion of ECRobot NXT scheduler file(s) generation for 
model: Filtered
### Executing GNU-ARM toolchain for building executable …
Successful C source code and header file generation result in the Real-Time Workshop Report 
appearing as shown in Figure 8.123.
On the left side of the Real-Time Workshop Report window, hyperlinks indicate the various sec­
tions of the C source code related to the function from the Simulink model. In particular, by clicking 
on “Filtered.c,” one can view portions of the code that correspond directly with the elemental blocks 
and the DTKF blocks that constitute the function of the Simulink model. The rest of the messages 
in MATLAB’s Command Window correspond to the build portion of compiling and assembling the 
binary image file named “Filtered.rxe.”
FIGURE 8.118  Kalman gain.
FIGURE 8.119  “A posteriori” state.

814
Simulation of Dynamic Systems with MATLAB® and Simulink®
FIGURE 8.121  Filtered output viewed from the Scope Block.
FIGURE 8.122  MATLAB plot of the filtered data.
FIGURE 8.120  “A posteriori” covariance.

815
Advanced Numerical Integration
.
.
.
(many messages corresponding to the build process, i.e., compiling and 
assembling)
.
.
.
Generating binary image file: Filtered_rom.bin
Generating binary image file: Filtered_ram.bin
Generating binary image file: Filtered.rxe
Once the binary image file “Filtered.rxe” has been created, click on the annotation block nxt­
build (“Filtered,”, “rxeflash”) to load the binary image into the flash memory of the NXT. For this 
part of the procedure, MATLAB’s Command Window shows the following:
### Execute NeXTTool for uploading a program to the enhanced NXT standard 
firmware:./nxtprj/Filtered.rxe
Executing NeXTTool to upload Filtered.rxe …
Filtered.rxe = 28720
NeXTTool is terminated.
At this time, the NXT is ready to run the filtered motor program. As before, be sure there is a 
motor connected to Port B on the NXT brick. Upon running this program the motor indeed runs 
smoothly, exhibiting its response to the filtered input.
8.7.5  Summary
In this Case Study, the build-a-little/test-a-little rapid prototyping development process was facili­
tated by an IDE. The technology (software and hardware) that enabled the IDE was made available 
by tools from The Mathworks (MATLAB, Simulink, Real-Time Workshop, and RTW’s Embed-
deed Coder), CygwinTM, GNU ARMTM, and Lego (MindstormsTM NXT).
Once the IDE is enabled with the technology, the intent was to demonstrate how easy it is to 
rapidly change the model from within Simulink, and then with two mouse clicks: generate, compile, 
assemble, download, and run the model on the NXT.
FIGURE 8.123  Real-time workshop report.

816
Simulation of Dynamic Systems with MATLAB® and Simulink®
It is left as an exercise for the student to now unleash his/her creativity in developing various 
applications on this platform.
EXERCISES
	8.64	 While a noisy input signal was generated from within Simulink, modify the model such 
that a sensor provides the input. Examine the various sensors that are available physically, 
as well as from the ECRobot NXT Blockset in the Simulink Library Browser. For addi­
tional assistance, see the samples that were part of the software installation, for example, 
TestUltrasonicSensor.mdl.

817
References
Akai, T. J., Applied Numerical Methods, John Wiley & Sons, New York, 1994.
Allen, R. W. and T. Rosenthal, Systems technology/requirements for vehicle dynamics simulation models, 
Society of Automotive Engineers, SAE 941075, 1994.
Aycin, M. and R. Benekohal, Stability and performance of car-following models in congested traffic, Journal 
of Transportation Engineering, 127, 2–12, 2001.
Banks, J., J. S. Carson II et al., Discrete-Event System Simulation, 4th edn., Pearson Prentice-Hall, Upper 
Saddle River, NJ, 2005.
Baruh, H., Analytical Dynamics, WCB/McGraw-Hill, Boston, MA, 1999.
Beltrami, E., Mathematical Models in the Social and Biological Sciences, Jones and Bartlett, Boston, MA, 
1993.
Bender, J. G. and R. E. Fenton, A study of automatic car following, IEEE Transactions on Vehicular 
Technology, VT-18, 134–140, 1966.
Borse, G. J., Numerical Methods with MATLAB, PWS Publishing, Boston, MA, 1997.
Bracewell, R., The Fourier Transform and Its Applications, McGraw-Hill, New York, 1986.
Braun, M., Differential Equations and Their Applications, Springer-Verlag, New York, 1978.
Brown, D. and P. Rothery, Models in Biology: Mathematics, Statistics and Computing, John Wiley & Sons, 
West Sussex, U.K., 1993.
Bryson, A. E., Dynamic Optimization, Addison-Wesley, Menlo Park, CA, 1999.
Buckley, P., Techniques of Process Control, John Wiley & Sons, New York, 1964.
Burns, R. S., Advanced Control Engineering, Butterworth Heinemann, Oxford, U.K., 2001.
Cadzow, J. A., Discrete-Time Systems—An Introduction with Interdisciplinary Applications, Prentice-Hall, 
Englewood Cliffs, NJ, 1973.
Canova, B. S., P. H. Christensen, M. D. Lee, B. R. Tripp, M. H. Pack, and D. L. Pack, Simulation to support 
operational testing: A practical approach, in Proceedings of the 1999 Winter Simulation Conference, 
pp. 1071–1078, 1999.
Chapra, S. and R. Canale, Numerical Methods for Engineers with Software Programming Applications, 
4th edn., McGraw-Hill, New York, 2002.
Close, C. M., Modeling and Analysis of Dynamic Systems, 3rd edn., John Wiley & Sons, New York, 2002.
Converse, A. O., Optimization, Holt, Rinehart & Winston, New York, 1970.
Coutinho, F. A. B., L. F. Lopez, M. N. Burattini, and E. Massad, Modeling the natural history of HIV infection 
in individuals and its epidemiological implications, Bulletin of Mathematical Biology, 63, 1041–1062, 
2001.
Culshaw, R. V. and S. Ruan, A delay differential equation model of HIV infection of CD4+ T cells, 
Mathematical Biosciences, 165, 27–39, 2000.
Dabney, J. B. and T. L. Harman, Mastering Simulink 4, Prentice Hall, Upper Saddle River, NJ, 2001.
Daniels, R. W., An Introduction to Numerical Methods and Optimization Techniques, Elsevier/North Holland, 
New York, 1978.
D’Azzo, J. J. and C. H. Houpis, Linear Control System Analysis and Design, 4th edn., McGraw-Hill, New 
York, 1995.
Dorf, R. C. and R. H. Bishop, Modern Control Systems, 10th edn., Pearson/Prentice-Hall, Upper Saddle River, 
NJ, 2005.
Edelstein-Keshet, L., Mathematical Models in Biology, McGraw-Hill, New York, 1988.
Eguchi, H., K. Obana, and M. Kamiya, Hardware-in-the-loop missile simulation facility, Proceedings of 
SPIE, 3368, 2–9, 1998.
Etkin, B., Dynamics of Flight, John Wiley & Sons, New York, 1982.
Farlow, S. J., An Introduction to Differential Equations and Their Applications, McGraw-Hill, New York, 
1994.
Fausett, L. V., Numerical Methods—Algorithms and Applications, Prentice-Hall, Upper Saddle River, NJ, 
2003.
Fishwick, P. A., Simulation Model Design and Execution—Building Digital Worlds, Prentice-Hall, 
Upper Saddle River, NJ, 1995.

818
References
Franklin, G. F., J. D. Powell, and A. Emami-Naeini, Feedback Control of Dynamic Systems, 4th edn., Prentice-
Hall, Upper Saddle River, NJ, 2002.
Gawthrop, P. and L. Smith, METAMODELLING: Bond Graphs and Dynamic Systems, Prentice-Hall, 
London, U.K., 1996.
Gear, W. C., Numerical Initial Value Problems in Ordinary Differential Equations, Prentice-Hall, Englewood 
Cliffs, NJ, 1971.
Gerald, J. Theusen and W.J. Fabrycky, Engineering Economy (9th Edition), Prentice-Hall, 2000.
Gordon, G., System Simulation, Prentice-Hall, Englewood Cliffs, NJ, 1978.
Green, R. and K. Jackson, The design drive—Advanced HITL simulation systems for automotive controllers, 
Modern Simulation and Training Journal, 56–58, 1997.
Haberman, R., Mathematical Models—Mechanical Vibrations, Population Dynamics and Traffic Flow, 
Prentice-Hall, Englewood Cliffs, NJ, 1977.
Hannon, B. and R. Matthias, Dynamic Modeling with STELLA II, Springer-Verlag, New York, 1994.
Hanselmann, H. and K. Smith, Real-time simulation replaces test drives, Test & Measurement World 
Magazine, 35–40, February 15, 1996.
Haraldsdottir, A. and R. Howe, Multiple frame rate integration, Flight Simulation Technologies Conference, 
Atlanta, GA, September 7–9, 1988, Technical Paper (A88–53626 23–09), 1988.
Hartley, T. T., Digital Simulation of Dynamic Systems—A Control Theory Approach, Prentice-Hall, 
Englewood Cliffs, NJ, 1994.
Hasdorff, L., Gradient Optimization and Nonlinear Control, John Wiley & Sons, New York, 1976.
Hay, J. L., R. E. Crosbie, and R. I. Chaplin, Integration routines for systems with discontinuities, The Computer 
Journal, 17, 275–279, 1973.
Hethcote, H., Qualitative analyses of communicable disease models, Mathematical Biosciences, 28, 335–356, 
1976.
Hoffman, J. D., Numerical Methods for Engineers and Scientists, Marcel Dekker, New York, 1992.
Hostetter, G. H., M. S. Santina, and Paul D’Carpio-Montalvo, Analytical, Numerical and Computational 
Methods for Science and Engineering, Prentice-Hall, Englewood Cliffs, NJ, 1991.
Howe, R., Transfer function and characteristic root errors for fixed-step integration algorithms, Transactions 
of SCS, 2, 293–320, 1986.
Howe, R., Dynamics of Real-Time Digital Simulation, Applied Dynamics International, Ann Arbor, MI, 1995.
Hultquist, P. F., Numerical Methods for Engineers and Computer Scientists, Benjamin Cummings, Menlo 
Park, CA, 1988.
Huntsinger, R., Personal notes.
Hutton, D. V., Fundamentals of Finite Element Analysis, McGraw-Hill, New York, 2004.
Isham, V., Mathematical modeling of the transmission dynamics of HIV infection and AIDS, Journal of the 
Royal Statistical Society, 151, 5–30, 1988.
Jackson, L. B., Signals, Systems and Transforms, Addison-Wesley, Reading, MA, 1991.
Jacquot, R., Modern Digital Control Systems, Marcel Dekker, New York, NY, 1981.
Kailath, T., Linear Systems, Prentice-Hall, Englewood Cliffs, NJ, 1980.
Karayanakis, N., Computer-Assisted Simulation of Dynamic Systems with Block Diagram Languages, 
CRC Press, Boca Raton, FL, 1993.
Karnopp, D. C., D. L. Margolis, and R. C. Rosenberg, System Dynamics—Modeling and Simulation of 
Mechatronic Systems, 4th edn., John Wiley & Sons, New York, 2000.
Keen, R. E. and J. D. Spain, Computer Simulation in Biology—A Basic Introduction, John Wiley & Sons, 
New York, 1992.
Kelton, W. D., R. P. Sadowski, and D. A. Sadowski, Simulation with Arena, McGraw-Hill, New York, 1997.
Kermack, W. D. and A. D. McKendrick, A contribution to the mathematical theory of epidemics, Proceedings 
of the Royal Society of London, 115, 700–721, 1927.
Korn, G. A. and J. V. Wait, Digital Continuous-System Simulation, Prentice-Hall, Englewood Cliffs, NJ, 1978.
Kraniauskas, P., Transforms in Signals and Systems, Addison-Wesley, Wokingham, U.K., 1992.
Kuo, B., Digital Control Systems, Holt, Rinehart & Winston, New York, 1980.
Ledin, J., Simulation Engineering, CMP Books, Lawrence, KS, 2001.
Linz, P. and R. L. C. Wang, Exploring Numerical Methods—An Introduction to Scientific Computing Using 
MATLAB, Jones and Bartlett, Boston, MA, 2003.
Mathews, J. H. and K. D. Fink, Numerical Methods Using MATLAB, 3rd edn., Prentice-Hall, Upper Saddle 
River, NJ, 1999.
McClamroch, N. H., State Models of Dynamic Systems, Springer-Verlag, New York, 1980.
McLeod, J., PHYSBE … A physiological simulation benchmark experiment, SIMULATION, 7, 324–329, 1966.

819
References
Meerschaert, M. M., Mathematical Modeling, 2nd edn., Academic Press, San Diego, CA, 1999.
Mesterton-Gibbons, M., A Concrete Approach to Mathematical Modeling, Addison-Wesley, Redwood City, 
CA, 1988.
Miller, K. S., Partial Differential Equations in Engineering Problems, Prentice-Hall, Englewood Cliffs, 
NJ, 1975.
Miller, R. E., Optimization Foundations and Applications, John Wiley & Sons, New York, 2000.
Mokhtari, M. and M. Marie, Engineering Applications of MATLAB 5.3 and SIMULINK 3, Springer-Verlag, 
London, U.K., 2000.
Natke, H. G., Introduction to Multi-Disciplinary Model-Building, WIT Press, Southampton, U.K., 2003.
Nekoogar, F. and G. Moriarty, Digital Control Using Digital Signal Processing, Prentice-Hall, Upper Saddle 
River, NJ, 1999.
Nise, N. S., Control Systems Engineering, 2nd edn., Benjamin Cummings, Redwood City, CA, 1995.
Ogata, K., Discrete-Time Control Systems, 2nd edn., Prentice-Hall, Englewood Cliffs, NJ, 1995.
Ogata, K., System Dynamics, 3rd edn., Prentice-Hall, Upper Saddle River, NJ, 1998.
Ogata, K., Modern Control Engineering, 4th edn., Prentice-Hall, 2002.
O’Neil, P. V., Advanced Engineering Mathematics, Wadsworth, Belmont, CA, 1983.
Oppenheim, A. V., R. W. Schafer, and R. J. Buck, Discrete-Time Signal Processing, 2nd edn., Prentice-Hall, 
Eaglewood Cliffs, NJ, 1999.
Orfanidis, S., Introduction to Signal Processing, Prentice-Hall, Upper Saddle River, NJ, 1996.
Palm, W. J., Modeling, Analysis and Control of Dynamic Systems, John Wiley & Sons, New York, 1983.
Palusinski, O. A., Simulation of dynamic systems using multirate integration techniques, Transactions of the 
Society for Computer Simulation, 2, 257–273, 1986.
Papoulis, A., The Fourier Integral and Its Applications, McGraw-Hill, New York, 1962.
Parks, T. W. and C. S. Burrus, Digital Filter Design (Topics in Digital Signal Processing), John Wiley & Sons, 
New York, 1987.
Perelson, A., Dynamics of HIV infection of CD4+ T cells, Mathematical Biosciences, 114, 81–125, 1993.
Ralston, A. and H. S. Wilf, Mathematical Methods for Digital Computers, John Wiley & Sons, New York, 1965.
Rao, S. S., Applied Numerical Methods for Engineers and Scientists, Prentice-Hall, Upper Saddle River, NJ, 
2002.
Recktenwald, G., Numerical Methods with MATLAB—Implementation and Application, Prentice-Hall, 
Upper Saddle River, NJ, 2000.
Reseck, J., SCUBA, Safe and Simple, Simon and Schuster, New York, 1990.
Richmond, B., An Introduction to Systems Thinking: STELLA Software, High Performance Systems Inc., 
Hanover, NH, 2001.
Riggs, D. S., Control Theory and Physiological Feedback Mechanisms, The Williams & Wilkins Co., 
Baltimore, MD, 1970.
Rohrs, C. E., J. L. Melsa, and D. G. Schultz, Linear Control Systems, McGraw-Hill, New York, 1993.
Schilling, R. J. and S. L. Harris, Applied Numerical Methods for Engineers Using MATLAB and C, Brooks/
Cole, Pacific Grove, CA, 2000.
Shampine, L., Numerical Solution of Ordinary Differential Equations, Chapman & Hall, New York, 1994.
Shearer, J. L., Dynamic Modeling and Control of Engineering Systems, Prentice-Hall, Upper Saddle River, 
NJ, 1997.
Shevell, R. S., Fundamentals of Flight, 2nd edn., Prentice-Hall, Englewood Cliffs, NJ, 1989.
Shier, D. R., Applied Mathematical Modeling, CRC Press, Boca Raton, FL, 2000.
Smith, W. A., Elementary Numerical Analysis, Prentice-Hall, Englewood Cliffs, NJ, 1986.
Smith, J. M., Mathematical Modeling and Digital Simulation for Engineers and Scientists, 2nd edn., 
John Wiley & Sons, New York, 1987.
Speckhart, F. H., A Guide to Using CSMP—The Continuous System Modeling Program, Prentice-Hall, 
Englewood Cliffs, NJ, 1976.
Theusen, G. J. and W. J. Fabrycky, Engineering Economy, Prentice-Hall, 1971.
Theusen, G. J. and W. J. Fabrycky, Engineering Economy, 9th edn., Prentice-Hall, Upper Saddle River, NJ, 
2001.
Tse, I. E., F. S. Hinkle, and R. T. Marse, Mechanical Vibrations: Theory and Applications, Allyn and Bacon, 
1963.
Wellstead, P. E., Introduction to Physical System Modelling, Academic Press, London, U.K., 1979.
Wilde, D. J., Optimum Seeking Methods, Prentice-Hall, Englewood Cliffs, NJ, 1964.
Woods, R. L. and K. L. Lawrence, Modeling and Simulation of Dynamic Systems, Prentice-Hall, 
Upper Saddle River, NJ, 1997.


821
Index
A
AB-m integrator, 515, 516
ACSL, see Advanced Continuous Simulation Language
Adams–Bashforth numerical integrators
characteristic root error formula, 715
method, 513–514
stability boundaries, 717–720
stability condition, 716
undamped second-order system, 719–722
z-domain transfer function, 714–715
Adams–Moulton implicit integrators, 519
chemical concentration, 724–726
stability boundaries, 723–724
z-domain transfer functions, 723
Adaptive step size, 505
Adaptive techniques
adaptive step size, 505
constant step size, 505
repeated Runge–Kutta with interval halving, 500–505
Runge–Kutta–Fehlberg method, 505–510
Advanced Continuous Simulation Language (ACSL), 349
Advanced numerical integration
continuous-time system models
bilinear transform, 799–801
first-order hold signal reconstruction, 796
matched pole-zero method, 796–799
sampling and signal reconstruction, 790–792
dynamic errors
asymptotic formulas, 704–708
characteristic root errors, 687–688
definition, 683
discrete-time and equivalent continuous-time 
systems, 684–687
linear system simulation, 708–711
transfer function errors, 697–704
types, 683–684
Lego MindstormsTM NXT
feedback control systems, 804
filtered model, 810–815
IDE, 805
installation, 805–806
mechatronics, 803
noisy model, 806–810
software and hardware requirements, 805
multirate integration
aircraft pitch control system, 739
airframe dynamics, 739
analytical solution, state variables, 748–750
frame ratio, 741
master routine, 741
nonlinear dual speed second-order system, 
753–760
simulation trade-offs, 763–764
slave routine, 741
slow and fast states procedure, 742–743
slow and fast subsystem interaction, 741
step size selection, 743–745
stiff system, 738
two-tank system, 760–763
real-time simulation
extrapolation, 776–783
high-fidelity-driving simulator, 769
HIL, 767–768
input delay, 783–786
predictor–corrector method, 772–776
RK-1 (explicit Euler), 770–771
RK-2 (improved Euler), 771
RK-2 (modified Euler), 771
RK-3 (real-time compatible), 772
RK-3 (real-time incompatible), 771–772
RK-4 (real-time incompatible), 772
two-pass numerical integration method, 769–770
vehicle ABS system, 768
stability
Adams–Bashforth numerical integrators, 714–720
Adams–Moulton implicit integrators, 722–726
Runge–Kutta (RK) integration, 726–736
Aircraft, longitudinal control, 319
altitude control system, 330
altitude from steady-state flight conditions, 328
angle of attack and forces, 321
body axis coordinates and Euler angles, 320
elevator response for open-and closed-loop, 332
linearized aircraft pitch response, 325
open-and closed-loop altitude response vs. time, 329
partial fraction expansion, 327
primary control surface, 321
short period and phugoid modes, 324–326
transfer function, 323, 327, 330
Aircraft longitudinal dynamics, digital simulation 
of, 333–335
Aircraft pitch control system
block diagram of, 738–739
multiple integration of, 750–753
simulation diagram for, 56, 744
Algebraic constraint blocks, 378
Algebraic equations, 375–378
algebraic constraint blocks, 378
first-order autonomous system, 376
Algebraic loops, 371–373
circular nature, 372
eliminating, 373–375
equations, 375–378
Memory block, 373–375
submarine dynamics transfer function, 374
Algebraic manipulation, 373
AM-m integrator, 516, 732
Armature-controlled DC motor, 535
Asymptotic stability, 197
Autonomous nonlinear system, 80
B
Backlash, 72, 73
Backlash block, 389

822
Index
Backward rectangular integration, 100
BIBO, see Bounded input-bounded output
Bode plot, 210
closed-loop frequency response functions, 213
for control system, 314
of discrete-time systems, 287, 298
for first-order system, 710
of frequency response function, 284
for marginally stable system, 219
of open-loop transfer function, 217–219
for second-order systems, 214–215
third-order Butterworth low-pass filter, 211
Bounded input–bounded output (BIBO), 197, 267–268, 
271, 273–274
C
Car-following
models, 380, 381, 384
subsystem, 396–398
Cascaded tanks with flow logic control, 121–126
Centralized integration, 409–412
Characteristic root errors, dynamic errors
asymptotic formula, 689–690
complex pole relationship, 691–692
continuous and discrete-time unit step responses, 
695–697
damping ratio error, 693, 694
equivalent system natural frequency, 695
exact and asymptotic fractional errors, 692–693
fractional error, 687–688
impulse responses, 697
responses, 690
step response, 695–696
trapezoidal integration, 690
z-domain transfer function, 690
Closed-loop depth rate control system, 363
Closed-loop transfer function, 362
Constant forces, physical properties and, 563–569
Constant step size, 505
Continuous-/discrete-time system
conversion, 309–311
poles, 276
Continuous System Modeling Program 
(CSMP), 349
Continuous-time first-order system
discrete-time system approximation, 92
exact and approximate solution, 95–96
first-order, continuous-time systems, 92–93
improved Euler integration, 727
using trapezoidal integration, 288–293
Continuous-time Kalman filter, 453–454
Continuous-time system
bilinear transform
frequency response, 800–801
mapping, 800
prewarped transfer function, 801–802
dynamic systems with, 349
first-order continuous system, 92–93
n distinct integrations, 91–92
object’s velocity, 115
state derivative vector, 92
first-order hold signal reconstruction, 796
first-order systems
description, 29–30
step response, 30–36
higher-order systems
aircraft pitch control system, 56
feedback control system, 55
railroad cars, 57, 65
linear time invariant
frequency response, 206–216
stability, 194–206
matched pole-zero method
DC gains, 798
frequency response, 798–799
nonlinear systems
applied force vs. time, 69–70
backlash, 72, 73
coulomb friction, 68
dead zone, 71
first-order systems, 66
friction force vs. applied force, 68–69
hysteresis, 72–74
linear model approximation, 67
mechanical system, 81
progressive, 68
quantization, 76–77
saturation, 71–72
sustained oscillations and limit cycles, 77–80
temperature response, 74–76
time constant, 75
valve flow vs. current, 72
with polynomial solutions, 488–490
sampling and signal reconstruction
continuous-time system response, 790–792
frequency response function, 794–795
illustration, 791
piecewise constant function, 791
transfer function, 791
z-domain transfer function, 792
second-order systems
description, 36
first-order equation conversion, 41–42
mechanical system, 39–41
two-tank mixing system, 42–44
unit step response, 36–39
simulation diagrams
aircraft pitch control system, 56
description, 45
first-order system, 45–47
heat flows and temperatures, two-room 
building, 51–52
room temperature model, 51–52
second-order system, 53–54, 58–59
state variables
dynamic system, 58, 61
interacting tank system, 61–62
linear state variable form conversion, 62–63
spring-mass-damper system, 57
state equations, 61–62
transition matrix, 63
submarine depth control system
block diagram, 85
controller and stern plane actuator, 89–90
difference equations, 88

823
Index
discrete-time approximation, 89
simulation diagram, 86
state equations, 86–87
unit step response of, 277
Continuous-time system models, advanced numerical 
integration
bilinear transform, 799–801
first-order hold signal reconstruction, 796
matched pole-zero method, 796–799
sampling and signal reconstruction, 790–792
Continuous-time system simulation languages 
(CSSLs), 349
Control systems, 29
aircraft pitch, 739
components, 523
continuous-and discrete-time, 276
higher-order systems
aircraft pitch, 56
feedback, 55
Lego MindstormsTM NXT, 804
linear, 216–219
Runge–Kutta (RK) method, see Runge–Kutta 
(RK) method
ship heading, see Ship heading control system
stiff systems, see Stiff systems
toolbox, 300
continuous-/discrete-time system 
conversion, 309–311
frequency response, 311–313
root locus, 313–316
state-space models, 302–303
state-space/transfer function conversion, 303–305
system interconnections, 305–307
system response, 307–309
transfer function models, 301–302
unity, 212
Coulomb friction, 68
CSMP, see Continuous System Modeling Program
CSSLs, see Continuous-time system simulation languages
Cylinder node temperatures, 550
D
Data logging of scope signals, 355
Dead zone block, 387–389
Dead zone nonlinearity, 71
Decompression Sickness (DCS), 146
Digital control system, for chamber temperature, 432
Digital filters, 293–297, 412–414
Digital simulation, of aircraft longitudinal dynamics, 
333–335
Discontinuity functions, 385–386, 559, 568
Discrete event models, 3
Discrete state equations, 116, 126
discrete step response of circuit, 120
lead-lag network, 117–118
linear state equations, 116–117
predator-prey ecosystem, 125–126
simulation diagram for RC lead-lag network, 119
steady-state response, 121–122
tank level responses, discrete and continuous, 123–125
using explicit Euler integration, 117, 121
Discrete-time frequency response function, 282
Discrete-time impulse function, 226–228
Discrete-time signal, 222–226
Discrete-time systems, 402–403
block diagram of, 275
centralized integration, 409–412
digital filters, 412–414
impulse responses for, 274
integrators, 406–409
Kalman filter, 454–455
mathematical modeling
exact vs. approximate solutions, 13–14
inherent, 19–22
liquid tank continuous-time system, 19
liquid tank discrete-time system, 19
step size, 16–18
matrices, 132–146
damped natural frequency, 140
discrete and continuous responses, 136–139
discrete system matrix, 139
explicit numerical integrators, 133
improved or modified Euler, 133
interacting tanks, 134–136
nonlinear pendulum with damping, 141–143
nonlinear second-order system, 141
quasi exact solution, 142
step responses of a second-order system, 140
transition matrix, 132
output, 260
simulation of inherently, 403–406
transfer function, 414–418
Distributed parameter systems, 546–550
Dynamic errors
asymptotic formulas
Euler integrator, 705–707
numerical integrators, 704–705
z-domain transfer function, 704
characteristic root errors
asymptotic formula, 689–690
complex pole relationship, 691–692
continuous and discrete-time unit step 
responses, 695–697
damping ratio error, 693, 694
equivalent system natural frequency, 695
exact and asymptotic fractional errors, 692–693
fractional error, 687–688
impulse responses, 697
responses, 690
step response, 695–696
trapezoidal integration, 690
z-domain transfer function, 690
definition, 683
discrete-time and equivalent continuous-time system
characteristic root, 688
continuous-time integrator, 686
step response, 685–686
linear system simulation
frequency response function, 708–709
RC circuit, 709–711
transfer function errors
continuous-and discrete-time integration, 702
explicit Euler and continuous-time integrator 
outputs, 703
fractional error, 697–699

824
Index
Dynamic errors (Continued)
frequency response functions, 697
phase angle plots, 701
time delay, 703–704
types, 683–684
E
ECRobot NXT Blockset, 806, 807
Elementary numerical integration, 91–92
discrete state equations, 116, 126
discrete step response of circuit, 120
lead-lag network, 117–118
linear state equations, 116–117
predator-prey ecosystem, 125–126
simulation diagram for RC lead-lag network, 119
steady-state response, 121–122
tank level responses, discrete and 
continuous, 123–125
using explicit Euler integration, 117, 121
discrete-time system matrices, 132–146
damped natural frequency, 140
discrete and continuous responses, 136–139
discrete system matrix, 139
explicit numerical integrators, 133
improved or modified Euler, 133
interacting tanks, 134–136
nonlinear pendulum with damping, 141–143
nonlinear second-order system, 141
quasi exact solution, 142
step responses of a second-order system, 140
transition matrix, 132
discrete-time system, of continuous first-order 
system, 92–98
Euler integration, see Euler integration
improved Euler integration, 127–131
modified Euler integration, 131–132
nonlinear first-order systems, discrete approximation 
of, 112–117
trapezoidal integration, 104–111
area approximation, 104–105
continuous integrators, 105–106, 108
difference equation based on, 105, 107
discrete and continuous responses, 108–109, 
110, 111
dynamics of sinking drum, 109–110
for first-order system, 106–107
integration step size, 104, 111
quadratic function, 108
vertical ascent of diver, 146–154
Epidemic model
baseline conditions, 575–577
fatal disease, 573
immigration and inoculation profiles, 574–575
sensitivity analysis, 578–579
S-I-R models, 573
state transition diagram, 574
symptoms, 573
Euler integration, 410, 539
area approximation, 98
comparison of explicit and implicit, 101
continuous-time signal, 103
discrete-time integrator, 102
explict, see Explict Euler integration
implicit, see Implict Euler integration
improvements to
accuracy, 128–131
improved state estimate, 128
new state using forward Euler integration, 127–128
inherent weakness of, 127
modified, 131–132
RC circuit, 102
tank flow, 103
Euler integrator (RK-1), 353, 479–481, 483, 486
Explicit Euler integration, 99–100, 133, 242, 244, 248, 
283, 334, 411
damped pendulum response using, 141–143
discrete state equations, 117, 121, 142
numerical integrator, 100
undamped pendulum response using, 144
Explicit methods, 513–515, 519
F
Fcn blocks, 398–401
Feedback control system
block diagram, 200
characteristic polynomial, 201
closed-loop system
properties, 202
transfer function, 200
inverse Laplace transform, 202
ship heading response, 203–204
stability of linear, frequency response
block diagram, 217
Bode plot of open-loop transfer function, 217–218
closed-loop transfer function, 219
First-order autonomous system, 376
First-order differential equations, 490
First-order discrete-time system, low-pass filter in, 262–265
First-order systems
block diagram, 46
continuous-time models, 92–93
description, 29–30
difference equations, 10
exact vs. approximate solution, 13–15
LTI continuous-time systems, 208–210
nonlinear system, 66
simulation diagram
linear tank, 47
RC circuit, 47–48
step response of
graphs of, 30, 31
liquid storage tank model, 32, 34–35
RC circuit, 32–34
rule of thumb, 31
stiffness property in, 524–526
temperature-controlled chamber, 35–36
trapezoidal integration for, 106–107
Fishery system dynamics
block diagram, 593
equilibrium states, 593–594
growth rate and equilibrium points, 592
Simulink® diagram, 591
state derivative function, 589–590
state responses, 592
Forward rectangular integration, 100
Fourier coefficients, 423, 424–426, 428

825
Index
Fourier Series expansion, 423–424
Frequency response
control system toolbox, 311–313
function, 287, 540
LTI continuous-time systems
Bode plot for second-order systems, 214–215
circuit with high-pass filter transfer function, 216
closed-loop frequency response functions, 213
first-order system, 208–210
Fourier integral, 207
linear feedback control systems, 216–219
step responses for second-order systems, 215–216
third-order Butterworth low-pass filter, 211
unity feedback control system, 212
LTI discrete-time systems, 280
digital filters, 293–297
properties of, 282–283
sampling theorem, 287–288
steady-state sinusoidal response, 280–282
Friction, 386–387
G
Global truncation error, 479
Gradient search algorithm, 611–619
Gradient vector, 605–607
Graphical user interfaces (GUIs), 349
H
Hardware-in-the-loop (HIL) simulation, 767–768
Hemispherical tank-filling simulation
gradient search algorithm, flow chart, 616
objective function contours, 618–619
objective function surface, 614–615, 627–628
Simulink diagram, 615
Heun’s method, 128
Higher-order systems, 490–496
Higher-order systems, continuous-time system
aircraft pitch control system, 56
feedback control system, 55
railroad cars, 57, 65
High-order Runge–Kutta methods, 484–485
HIL simulation, see Hardware-in-the-loop (HIL) simulation
Human circulatory system, 395
Hybrid systems, continuous-and discrete-time 
components, 431–433
Hysteresis, 389–391
I
IDE, see Integrated development environment
Implicit Euler integration, 100–102, 133
of continuous model, 115
difference equation based on, 116
numerical integrator, 100
Implicit methods, multistep methods, 515–518
Impulse response, LTI systems, 175–179
spring-mass-damper system
differential equation model of, 175–176
Laplace transform, 177–178
and transfer function, 179–182
Impulse responses
for discrete-time systems, 274
function, 261–265
graphs of, 274
Inherently discrete-time system, 403–406
Integrated development environment (IDE), 805
Integration step, 475
Intermediate numerical integration, 475
adaptive techniques, 500
adaptive step size, 505
constant step size, 505
repeated Runge–Kutta with interval halving, 
500–505
Runge–Kutta–Fehlberg method, 505–510
epidemic model
baseline conditions, 575–577
fatal disease, 573
immigration and inoculation profiles, 574–575
sensitivity analysis, 578–579
S-I-R models, 573
state transition diagram, 574
symptoms, 573
lumped parameter approximation, 546–550
nonlinear distributed parameter system, 550–555
multistep methods, 512–513
explicit methods, 513–515
implicit methodd, 515–518
predictor–corrector methods, 518–522
Runge–Kutta one-step methods, 475–476
continuous-time models with polynomial solutions, 
488–490
higher-order systems, 490–496
high-order Runge–Kutta methods, 484–485
linear system models, 486–488
second-order Runge–Kutta method, 477–479
Taylor Series method, 476–477
truncation errors, 479–484
stiff systems, 523–524
lower-order nonstiff system models, 529–542
stiffness property in first-order system, 524–526
stiff second-order system, 526–529
systems with discontinuities, 555–563
case study, 573–578
physical properties and constant forces, 563–569
Internal heat flows, 547
Interval halving, repeated Runge–Kutta with, 500–505
Inverse Laplace transform, 163–164
Inverse z-transform, 232–233, 239–240
Inverted pendulum, algebraic loop, 374
Iodine distribution, human body
block diagram, 185
compartmental model for, 184
state equations, 184–185
state variable model, 190–192
steady-state iodine levels, 186–187
step response, 187–188
transfer function, 185–187
K
Kalman filtering, 453
continuous-time, 453–454, 457
discrete-time, 454–455
Simulink simulations, see Simulink simulations
steady-state, 454
Kinetic friction, 386

826
Index
L
Laplace transform, 524–525
inverse, 163–164
one-sided, 155
pairs for elementary continuous-time signals, 157
partial fraction expansion, 166–172
properties of, 156–163
region of convergence, 156
spring-mass-damper system, 175–177
of system response, 164–166
Lego MindstormsTM NXT
feedback control systems, 804
filtered model
block diagram, 811
discrete-time Kalman filter subsystems, 811
filtered data, 812, 814
function-call subsystem, 810
MATLAB plot, 814
real-time workshop report, 809, 813
signal generation, 811
IDE, 805
installation, 805–806
mechatronics, 803
noisy model
block diagram, 806
ECRobot NXT Blockset, 806
function-call subsystem, 807
MATLABO plot, 808
noisy data, 808
real-time workshop report, 809
signal generation, 809
software and hardware requirements, 805
Linear discrete-time state equations, 256–261
Linear second-order system, 491, 493–494
Linear system analysis
aircraft, longitudinal control of
altitude control system, 330
altitude from steady-state flight conditions, 328
angle of attack and forces, 321
body axis coordinates and Euler angles, 320
elevator response for open-and closed-loop, 332
linearized aircraft pitch response, 325
open-and closed-loop altitude response vs. 
time, 329
partial fraction expansion, 327
primary control surface, 321
short period and phugoid modes, 324–326
transfer function, 323, 327, 330
control system toolbox, 300
continuous-/discrete-time system conversion, 
309–311
frequency response, 311–313
root locus, 313–316
state-space models, 302–303
state-space/transfer function conversion, 303–305
system interconnections, 305–307
system response, 307–309
transfer function models, 301–302
frequency response, LTI continuous-time systems
Bode plot for second-order systems, 204–215
circuit with high-pass filter transfer function, 216
closed-loop frequency response functions, 213
first-order system, 208–210
Fourier integral, 207
linear feedback control systems, 216–219
step responses for second-order systems, 215–216
third-order Butterworth low-pass filter, 211
unity feedback control system, 212
frequency response, LTI discrete-time systems
digital filters, 293–297
properties, 282–283
sampling theorem, 287–288
steady-state sinusoidal response, 280–282
Laplace transform
inverse, 163–164
one-sided, 155
pairs for elementary continuous-time signals, 157
partial fraction expansion, 166–172
properties of, 156–163
region of convergence, 156
of system response, 164–166
models, 486–488
notch filter for electrocardiograph waveform
magnitude function, 339
magnitude squared function, 339
multinotch filters, 339–346
stability
LTI continuous-time system, 195–206
LTI discrete-time system, 267–280
transfer function
impulse function, 173
impulse response, 175–179
and impulse response, relationship, 179–182
multiple inputs and outputs, 182–189
transformation from state variable model to, 
190–194
unit step and unit impulse function, 173–175
z-domain transfer function
approximating continuous-time system transfer 
functions, 245–247
definition, 242
Euler integration, 242–244
linear discrete-time state equations, 256–261
monetary fund, 257–258
nonzero initial conditions, 243–244
relationship of impulse response to, 264
simulation diagrams and state variables, 250–256
trapezoidal integration, 249–251
weighting sequence (impulse response function), 
261–265
z-transform
discrete-time impulse function, 226–228
discrete-time signal, 222–226
inverse, 232–233, 239–240
Laplace and, 227
partial fraction expansion, 233–234
properties of, 229
table for inverting, 236
Linear systems simulation
state-space block, 363–370
Transfer Fcn block, 357–363
Linear time invariant (LTI), continuous-time systems
frequency response
Bode plot for second-order systems, 214–215
circuit with high-pass filter transfer 
function, 216
closed-loop frequency response functions, 213

827
Index
first-order system, 208–210
Fourier integral, 207
linear feedback control systems, 216–219
step responses for second-order systems, 215–216
third-order Butterworth low-pass filter, 211
unity feedback control system, 212
stability
feedback control system, 200–206
polynomial characteristic, 195–200
Linear time invariant (LTI), discrete-time systems
frequency response
digital filters, 293–297
properties, 282
sampling theorem, 287–288
steady-state sinusoidal response, 280–282
stability
BIBO, 267
complex poles of H(z), 271–273
impulse response, 268
z-domain transfer function, 267–268
Local truncation error, 479, 500–501, 515
Logistic population growth model, 144
Lookup Table block parameters, 383
Lower-order dynamics model, 534
Lower-order nonstiff system models
RK-4 integrator, 531–532
second-order system, 529, 532
sensor dynamics, 530
Simulink diagram, 531
step response, 531–532
step size vs. step number, 530
third-order system, 530
Low-pass digital filters, 293–297
Lumped parameter approximation, 546–550
nonlinear distributed parameter system, 550–555
Lumped parameter system model, 2, 550
LUNGS subsystem, 395
M
Matched pole-zero method, 796–799
Mathematical modeling
derivation, open tank
dynamic behavior, 4
flow between tanks, 8–9
fluid resistance, 7
volume, liquid flow, 5–6
difference equations, 10–12
discrete-time systems
exact vs. approximate solutions, 13–14
inherent, 19–22
liquid tank continuous-time system, 19
liquid tank discrete-time system, 19
step size, 16–18
dynamic systems, 555
lumped parameter model, 2
population dynamics
discrete-time model, 24
logistic growth population, 26–28
observed, discrete-time and continuous-time 
populations, 25
population data, 22, 23
simulation models, 3
stochastic models, 3
MATLAB, 422–428, 436, 457
control system, 309
Fourier Series, 422–423
function, 531, 559
optimization toolbox, 599–600, 630
second-order system, 356, 426
truncated Fourier Series, 424–425
Workspace, 354, 356, 383
Memory block, algebraic loops, 373–375
MIMO, see Multiple input-multiple output
Modified Euler integration, 131–132, 133–134
Monte Carlo simulation, 435–439, 629
hospital occupancy, 623–624
mathematical model, 439–445
Multinotch filters, 339–346
input and output of, 341, 342, 346
magnitude function, 340, 341, 344, 345
magnitude squared function, 339, 340
for removing fundamental frequency, 345
Multiple input–multiple output (MIMO) system, 363
electric circuit, 182
iodine distribution, human
block diagram, 185
compartmental model for, 184
state equations, 184–185
state variable model, 190–192
steady-state iodine levels, 186–187
step response, 187–188
transfer function, 185–187
Multirate integration
aircraft pitch control system, 739
analytical, Simulink, and multirate 
responses, 751
Simulink and multirate integration, 751
airframe dynamics, 739
analytical solution, state variables
advantage, 748
total elevator deflection and its 
components, 750
total pitch response and its components, 749
frame ratio, 741
master routine, 741
nonlinear dual speed second-order system
air pressure, 754
coefficient matrix, 756
eigenvalues, 756–757
linmod function, 757–758
Simulink diagram, 758
two tank system, 753–754
procedure, slow and fast states, 742–743
simulation trade-offs
cpu time, 763–764
total execution time, 763
slave routine, 741
slow and fast subsystem interaction, 741
step size selection
dynamic accuracy, 745–748
stability, 743–745
stiff system, 738
two-tank system, 760–763
Multistep methods, 512–513
explicit methods, 513–515
implicit method, 515–518
predictor–corrector methods, 518–522

828
Index
N
Nonlinear algebraic equations, 377
Nonlinear distributed parameter system, 550–555
Nonlinear dual speed second-order system
air pressure, 754
coefficient matrix, 756
eigenvalues, 756–757
linmod function, 757–758
Simulink diagram, 758
two tank system, 753–754
Nonlinear first-order systems, discrete approximation of, 112
continuous model for sinking drum, 113–116
exact solution for depth, 114
implicit numerical integrators, 112–113
object falling in a viscous medium, 116
Nonlinear systems
continuous-time systems
applied force vs. time, 69–70
backlash, 72, 73
coulomb friction, 68
dead zone, 71
first-order systems, 66
friction force vs. applied force, 68–69
hysteresis, 72–74
linear model approximation, 68
mechanical system, 81
progressive, 68
quantization, 76–77
saturation, 71–72
sustained oscillations and limit cycles, 77–80
temperature response, 74–76
time constant, 75
valve flow vs. current, 72
Nonstiff control system models, step response, 533
Notch filter, for electrocardiograph waveform, 338
input and output of, 345
magnitude function, 339, 344
magnitude squared function, 339
multinotch filters, 339–346
input and output of, 341, 342, 346
magnitude function, 340, 341, 344, 345
magnitude squared function, 339, 340
for removing fundamental frequency, 345
square wave noise
components of ECG signal, 342
noise-corrupted ECG signal, 343
Numerical integration methods, 520
Nyquist frequency, 288
O
One-sided Laplace transform, 155
One-step methods, 475–476, 515
Optimization, Simulink
discrete-time system models, 620–625
gradient vector, 605–607
ground vehicle performance, 596
MATLAB optimization, 599–600, 630
minimum separation, 604
multiparameter objective functions, 607–610
optimum firing angle, 600–601
parameter identification, 610–611
projectile firing angle, 598–599
separation distance vs. time, 603
simple gradient search, 611–619
target and projectile system, 597–598
target speed sensitivity analysis, 602
P
Parameter Estimation, 581
Parenthesis, 547
Partial differential equation models, 1–2
Partial fraction expansion
coefficients, 260
Laplace transform
complex roots, 169–172
real and at least one multiple root, 167–169
real and distinct roots, 166–167
z-transform, 233–234
Pendulum bob dynamics, 564, 565
drag force, 566
physical properties and constant forces, 563–569
simulation of, 560
velocity, 565, 566
Periodic signals, 158
PHYSBE, 395–396
Physical models, 1
Pilot ejection, 448–452
diagram, 448
Simulink diagram, 451
trajectory of, 449
Pitch control system transfer function, 746
Plot of discontinuity functions, 567
Polynomial characteristic
asymptotic stability, 197
bounded input-bounded output, 197
higher order LTI system, 198
MIMO systems, 198–199
poles, natural modes, and stability, 197
stability of second-order linear system, 196
Population dynamics
discrete-time model, 24
logistic growth population, 26–28
observed, discrete-time and continuous-time 
populations, 25
population data, 22, 23
Posteriori covariance subsystem, 466
Posteriori state subsystem, 466
Predator-prey
ecosystem, 125–126
model, 583–584, 595–596
Predictor–corrector methods, 518–522
Priori covariance subsystem, 465
Priori state subsystem, 464
Progressive nonlinearity, 68
Public safety organizations, 1
Q
Quadratic interpolation, 562
Quantization block, 391–392, 391–394
Quantization nonlinearity, 76–77
R
Real-time HIL simulation, 767–768
Real-time predictor–corrector method, 774–776

829
Index
Real-time simulation
extrapolation
fractional error, 779
ideal extrapolator, 778–779
linear, 778
magnitude and phase plots, 780
uses, 777
input delay
fraction gain error, 785
phase angles, 786
phase error, 785
thermal system, 786–789
uses, 783
z-domain transfer function, 784
Repeated Runge–Kutta with interval halving, 500–505
Response Optimization, 581
RK-Fehlberg method, 505–510
boat crossing, 507–510
RK-1 integrators, 479–481, 483, 486
RK-2 integrators, 479–481, 483, 486, 528
RK-3 integrators, 484–485, 486
RK-4 integrators, 485, 486, 491, 505–506, 525–526, 567
RK-5 integrators, 486, 505–506
RK-6 integrators, 486
RK method, see Runge–Kutta (RK) method
Root locus, control system toolbox, 313–316
Runge–Kutta integration, 358
Runge–Kutta (RK) method
characteristic root errors, 730–731
modified Euler integration, 727–728
one-step methods, 475–476
continuous-time models with polynomial solutions, 
488–490
higher-order systems, 490–496
high-order Runge–Kutta methods, 484–485
linear system models, 486–488
second-order Runge–Kutta method, 477–479
Taylor Series method, 476–477
truncation errors, 479–484
polynomials, 730
speed control system
analytical and RK-2 simulation, 734
analytical and RK-4 simulation, 735
analytical step response and RK-3 simulated 
response, 736
block diagram, 733
RK-3 stability boundary, 734, 735
Simulink diagram, 734
z-domain transfer function, 729–730
S
Sampled sinusoid, aliasing of, 288
Sampling theorem, 287–288
Saturation block, 387–389
Saturation nonlinearity, 71–72
Second-order continuous-time, P-I control of, 275
Second-order RLC circuit, 527
Second-order Runge–Kutta method, 477–479
Second-order systems, 526–529, 555
Adams–Bashforth numerical integrators, 720–722
Bode plot, 214–215
characteristic polynomial, 196
description, 36
first-order equation conversion, 41–42
mechanical system
block diagram, 39
damping ratio and natural frequency, 39–40, 42
position and velocity response, 41
steady-state gain, 39, 42–43
transient period, 40
nonlinear dual speed
air pressure, 754
coefficient matrix, 756
eigenvalues, 756–757
linmod function, 757–758
Simulink diagram, 758
steady-state operating levels, 757
two tank system, 753–754
oscillatory step response, 38
phase angle term, 37
poles, natural modes, and stability, 197
response, 355
simulation diagrams, 53, 58–59
step responses, 215–216, 352
two-tank mixing system, 42–45
unit step response, 36–39
z-domain transfer function, 273–277
Second-order truncated Taylor Series method, 479
Ship heading control system
block diagram, 608
control parameters, 608
feedback control system, 200–206
objective function, 608–609
optimal parameter settings, 611
Simulink block diagram, 610
Simulated response, 569
using Euler integration, 539
Simulation diagrams
airframe dynamics, 739
continuous-time systems
aircraft pitch control system, 56
description, 45
first-order system, 45–48
heat flows and temperatures, two-room 
building, 51–52
room temperature model, 51–52
second-order system, 48–49, 53–54, 58–59
fast subsystem, 741
nth-order continuous-time system, 252, 253
for RC lead-lag network, 119
second-order system
trapezoidal integration, 251
state variables and, 250–256
third-order system, 180
Simulation models, 3
Simulation tools
iterative procedure, 582
optimization, Simulink
discrete-time system models, 620–625
gradient vector, 605–607
ground vehicle performance, 596
MATLAB optimization toolbox, 599–600, 630
minimum separation, 604
multiparameter objective functions, 607–610
optimum firing angle, 600–601, 625–627
parameter identification, 610–611
projectile firing angle, 598–599

830
Index
Simulation tools (Continued)
separation distance vs. time, 603
simple gradient search, 611–619
target and projectile system, 597–598
target speed sensitivity analysis, 602
steady-state solver
equilibrium point, nonautonomous system, 
586–589
nonlinear state model, 582
predator-prey model, 583–584
trim function, 584–586
Simulink, 349
algebraic loops, see Algebraic loops
blocks, 380–385
acceleration response, 381
backlash, 389
car-following models, 380, 381–382, 384
dead zone and saturation, 387–389
discontinuities, 385–386
friction, 386–387
hysteresis, 389–391
lead and following vehicles, 380, 384–385
Lookup Table block parameters, 383
quantization, 391–392, 391–394
continuous-and discrete-time components, 431–433
diagram, 508
arrow and target simulation, 441
capacitive transducer, 588
car-following system, 383, 397, 398
cascaded tanks, 471
closed-loop depth rate control system, 363
continuous-time Kalman filter, 457
digital control system for chamber temperature, 432
explicit Euler integration, 411
first-and second-order models, 532
fishery system dynamics, 591
hemispherical tank-filling simulation, 615
hospital occupancy, 621
inverted pendulum, 400, 644
loan repayment, 405
low-pass filters, 417
lumped parameter system model, 550
nonlinear two-tank system, 652
nonlinear vs. linearized models, 646
notch filter, 413
pendulum dynamics, 564
PHYSBE model, 396
pilot ejection, 451
Relay block for thermostat, 391
second-order system, 357, 410, 532
ship heading step response, 610
simulating stiff control system dynamics, 531
for simulation of nonlinear and linearized 
system, 636
solving algebraic equations, 376
sub depth control, 358
submarine depth rate., 361
third-order control systems, 532
truncated Fourier Series, 424
vehicle response traveling, 367
vehicle rolling down incline, 408
discrete-time systems, 402–403
centralized integration, 409–412
digital filters, 412–414
integrators, 406–409
simulation of inherently, 403–406
transfer function, 414–418
interface, 422–428
Kalman filtering, 453
continuous-time, 453–454
discrete-time, 454–455
Simulink simulations, see Simulink simulations
steady-state, 454
MATLAB, see MATLAB
model, 349, 353–355, 357
data logging of scope signals, 355
dialog box for configuring, 353
Euler integrator, 353
inverted pendulum with "Memory" block, 374
for RLC circuit, 528
running Simulink, 353–355
scope output, 354
screen capture, 354
second-order system response, 355
simulating coffee pot, 554
Simulink library, 349–353
model optimization
discrete-time system models, 620–625
gradient vector, 605–607
ground vehicle performance, 596
MATLAB optimization toolbox, 599–600
minimum separation, 604
multiparameter objective functions, 607–610
optimum firing angle, 600–601, 625–627
parameter identification, 610–611
projectile firing angle, 598–599
separation distance vs. time, 603
simple gradient search, 611–619
target and projectile system, 597–598
target speed sensitivity analysis, 602
Monte Carlo simulation, 435–439
mathematical model, 439–445
pilot ejection, 448–452
simulation of linear systems, 357
state-space block, 363–370
Transfer Fcn block, 357–363
subsystems, 394–395
car-following, 396–398
Fcn block, 398–401
PHYSBE, 395–396
Simulink library
blocks, 349–350
Browser, 350, 385
Discontinuities, 387
second-order system step response, 352
step response of second-order system, 352
Simulink optimization, hospital-patient occupancy
block diagram, 621
daily arrivals and departures, 620
daily net patient input, 621, 623
input and output relationship, 620
Monte Carlo simulation, 623–624, 629
objective function, 624
patient profiles, 621–622
Simulink simulations, 455–468
actual subsystem, 456
continuous-time Kalman filter, 456–457
discrete-time Kalman filter, 462, 464

831
Index
Kalman gain subsystem, 465
plot of
acceleration, 459, 462, 468
range, 458
range error vs. time, 459, 463, 468
range estimates, 461, 467
velocity, 458, 462, 467
velocity error vs. time., 460, 463, 469
posteriori covariance subsystem, 466
posteriori state subsystem, 466
priori covariance subsystem, 465
priori state subsystem, 464
steady-state Kalman filter algorithm, 461
Simulink’s stiff integrators, 526
Single input-single output (SISO), 363
Spring-mass-damper system, 57
differential equation model of, 175–176
impulse response, 177–178
Stability, linear time invariant
continuous-time system
characteristic polynomial, 195–200
feedback control system, 200–206
discrete-time systems
BIBO, 267
complex poles of H(z), 271–273
impulse response, 268
z-domain transfer function, 267–268
linear feedback control systems, 216–219
State derivative function, 475
State-space block, 363–370
moving vehicle and suspension system model, 365
vehicle cab displacement, 368
State-space models, 302–303
State variable model, simulation of, 335–337
State variables, simulation diagrams and, 250–256
Steady-state Kalman filter, 454
Steady-state solver
equilibrium point, nonautonomous system, 586–589
nonlinear state model, 582
predator-prey model, 583–584
trim function, 584–586
Step response of second-order system, 352
Stiff control system models, step response, 533
Stiff integrators, 529
Stiffness property in first-order system, 524–526
Stiff second-order system, 526–529
Stiff systems, 523–524
lower-order nonstiff system models, 529–542
stiffness property in first-order system, 524–526
stiff second-order system, 526–529
Stochastic models, 3
Submarine depth control system, 358
block diagram, 85
closed-loop transfer function, 362
controller and stern plane actuator, 89–90
difference equations, 88
discrete-time approximation, 89
simulation diagram, 86
state equations, 86–87
state-space models, 303–305
Submarine dynamics transfer function, 374
Subsystems, 394–395
car-following, 396–398
Fcn block, 398–401
PHYSBE, 395–396
Tire Model, 395
vehicle dynamics model, 395
System interconnections, 305–307
System response, 307–309
Systems with discontinuities, 555–563
case study, 573–578
physical properties and constant forces, 563–569
T
Taylor Series method, 476–477, 479, 480, 483, 488–490
Tire Model, 395
Transfer Fcn block, 373
command and actual submarine depth rates, 359
second-order system, 357, 358
submarine depth rate control system, 358, 360
Transfer function, 414–418
conversion, 303–305
errors
continuous-and discrete-time integration, 702
explicit Euler and continuous-time integrator 
outputs, 703
fractional error, 697–699
frequency response functions, 697
phase angle plots, 701
time delay, 703–704
of linear systems analysis
impulse function, 173
impulse response, 175–179
and impulse response, relationship, 179–182
multiple inputs and outputs, 182–189
transformation from state variable model to, 
190–194
unit step and unit impulse function, 173–175
models, 301
Trapezoidal integration, 104–111, 249–251, 254, 255
area approximation, 104–105
continuous-and discrete-time, 251
continuous integrators, 105–106, 108
continuous-time first-order system in, 288–293
difference equation based on, 105, 107
discrete and continuous responses, 108–109, 110, 111
discrete integrators, 105–106, 108
dynamics of sinking drum, 109–110
for first-order system, 106–107
integration step size, 104, 111
of nonlinear time-varying system, 107–108
of second-order system, 255
state equations for, 255
of underdamped second-order system, 256
Trim function, 584–586
Truncated Fourier Series, 424–425
Twente University of Technology Simulator (TUTW), 349
U
Undamped pendulum response, using explicit Euler, 144
Unit impulse function, 173–175
Unit step function, 173–175
Unit step responses
first-and second-order system models, 538
unstable second-order model, 539
weighting sequences and, 264

832
Index
V
Variable capacitance transducer
circuit diagram, 586
dynamic system with equilibrium conditions, 589
mathematical model, 586–587
Simulink diagram, 588
Vehicle dynamics model, 767–768
Vehicle response traveling, 367
Vertical ascent of diver, 146
air, 146
cable forces, 146
discrete differential pressure responses, 152
discrete-time system
equilibrium state, 149
outputs, 148, 151
state equation matrices, 148
state variables, 150
diver’s internal body pressure, 146
drag force, 146
dynamic system, 146–147
initial cable force, 148–149
maximum cable force, 152–153
net cable force, 147
second-order differential equation, 147, 153
third order linear dynamic system, 147
W
Weighting sequence (impulse response function), 261–265
Z
z-domain transfer function
approximating continuous-time system transfer 
functions, 245–247
definition, 242
Euler integration, 242–244
linear discrete-time state equations, 256–261
monetary fund, 257–258
nonzero initial conditions, 243–244
relationship of impulse response to, 264
simulation diagrams and state variables, 250–256
trapezoidal integration, 249–251
weighting sequence (impulse response function), 261–265
z-transform
discrete-time impulse function, 226–228
discrete-time signal, 222–226
inverse, 232–233, 239–240
Laplace and, 227
partial fraction expansion, 233–234
properties of, 229
table for inverting, 236

