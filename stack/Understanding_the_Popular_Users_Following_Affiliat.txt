See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/283538433
Understanding the Popular Users: Following, Afﬁliation Inﬂuence and
Leadership on GitHub
Article  in  Information and Software Technology · October 2015
DOI: 10.1016/j.infsof.2015.10.002
CITATIONS
99
READS
912
5 authors, including:
Kelly Blincoe
University of Auckland
99 PUBLICATIONS   2,394 CITATIONS   
SEE PROFILE
Sean P. Goggins
University of Missouri
130 PUBLICATIONS   1,494 CITATIONS   
SEE PROFILE
Eva Petakovic
University of Missouri
7 PUBLICATIONS   513 CITATIONS   
SEE PROFILE
Daniela Damian
University of Victoria
143 PUBLICATIONS   6,302 CITATIONS   
SEE PROFILE
All content following this page was uploaded by Kelly Blincoe on 26 July 2018.
The user has requested enhancement of the downloaded file.

Understanding the Popular Users: Following, Aﬃliation
Inﬂuence and Leadership on GitHub
Kelly Blincoea,∗, Jyoti Sheoranb, Sean Gogginsc, Eva Petakovicc, Daniela
Damianb
aAuckland University of Technology, New Zealand
bUniversity of Victoria, Canada
cUniversity of Missouri, USA
Abstract
Context: The ability to follow other users and projects on GitHub has intro-
duced a new layer of open source software development participants who observe
but do not contribute to projects. It has not been fully explored how following
others inﬂuences the actions of GitHub users. Objective: This papers studies
the motivation behind following (or not following) others and the inﬂuence of
popular users on their followers. Method: A mixed methods research approach
was used including a survey of 800 GitHub users to uncover the reasons for fol-
lowing on GitHub and a complementary quantitative analysis of the activity of
GitHub users to examine inﬂuence. Our quantitative analysis studied 199 pop-
ular (most followed) users and their followers. Results: We found that popular
users do inﬂuence their followers by guiding them to new projects. As a user’s
popularity increases, so does their rate of inﬂuence, yet the same is not true
for a popular user’s rate of contribution. Conclusions: These results indicate
that a new type of leadership is emerging through GitHub’s following feature
and popularity can be more important than contribution in inﬂuencing others.
We discuss implications of popularity and inﬂuence and their impact on social
structure and leadership on OSS projects.
Keywords:
GitHub, Open Source Software, Social Computing, Following,
∗Corresponding author
Email address: kblincoe@acm.org (Kelly Blincoe )
Preprint submitted to Journal of LATEX Templates
October 10, 2015

Inﬂuence, Leadership.
1. Introduction
Understanding how inﬂuence is exerted on social computing platforms is
critical for participants and leaders because it impacts their patterns of work,
interactions, and knowledge management in collaborative environments. While
much work has been done to understand inﬂuence on purely social platforms like
5
Twitter and Facebook [1, 2, 3], inﬂuence on social software development envi-
ronments like GitHub has been understudied. GitHub enables users to “follow”
individuals; much like one follows another user on Twitter. However, users on
Twitter broadcast their own messages and diﬀuse only ephemeral information,
links and perspectives 140 characters at a time. In contrast, notiﬁcations sent
10
to GitHub followers embody evidence of work that has occurred and are not
broadcast by the user, but rather, by the system [4]. The GitHub following
feature is, therefore, interesting to study since structure and inﬂuence in OSS
seem connected to the types of activities participants engage in.
Previous studies of inﬂuence in Open Source Software (OSS) found a “pyra-
15
mid meritocracy” [5, 6, 7], where there is hierarchy and centralization, but
usually not an authoritarian “great leader” at the top. Leadership is shared
by a group of developers who “act as [inﬂuential] peers at the top echelon of
the pyramid” [7]. The metaphor of a pyramid depicts new contributors at the
bottom, “leaders” in the middle and “elders”, who may have previously led
20
projects but now advise, at the top. Elders are particularly common on long
running OSS projects. OSS projects that are led by a software company may
also have a community manager who acts as a liaison between the company and
the OSS community [8]. With the advent of GitHub, new types of leadership
are emerging because GitHub fosters a lower barrier to entry than other OSS
25
platforms like SourceForge [9].
Other studies of OSS projects (e.g.
[10, 11, 12, 13, 14]) reveal patterns
of organization participants as “a series of concentric circles”, where at the
2

center are the core developers. The core developers are surrounded by a ring
of “maintainers” who are responsible for one or more modules of a project.
30
The outer-most circle contains the “patchers” who ﬁx bugs, “bug reporters”,
“documenters” and “users.” As Ducheneaut [10] points out, even users can be
“highly skilled”, suggesting that the “periphery” is a “nebulous arrangement of
both skilled and unskilled individuals.”
This nebulous skill arrangement is further extended on GitHub through its
35
following feature, which allows users to “observe” without participating. This
type of participation has the capacity to alter OSS engagement models. Our
research goal is to understand how the lightweight connection of following an-
other user builds into cascades of inﬂuence and to study the relationship between
emerging social structures in projects on GitHub, the most followed (popular)
40
users, and leadership in these projects. In this paper we take a ﬁrst step in this
direction by investigating the most followed users and their inﬂuence on their
followers.
In this paper, we investigate following behavior and the inﬂuence of follow-
ing others using a mixed-method research approach. We surveyed 800 GitHub
45
users to identify motivations behind following other users on GitHub and why
some users choose not to follow others. To examine inﬂuence of following, we
conducted an analysis of the 199 most popular GitHub users (measured by
number of followers). By analyzing the actions of popular GitHub users and
their followers, we found that popular users often attract their followers to new
50
projects. This is in line with previous results [15] that found that users who
are both very popular and very active inﬂuence their followers. In this previous
work, only users who fall into both of these categories were included; therefore,
the two dimensions were intertwined and unable to be studied individually [15].
Instead, we study all popular users regardless of activity level. This allows a
55
deeper investigation into the eﬀect of popularity. Through our investigation, we
found that the rate of a popular users’ contribution does not impact her rate
of inﬂuence. However, the rate of inﬂuence of a popular user does increase as
the user accumulates more followers. Our ﬁndings indicate that GitHub’s fol-
3

lowing feature may be enabling a new type of leadership in GitHub-hosted OSS
60
projects and that popularity may be more inﬂuential than actual contribution.
1.1. GitHub: Open, Collaborative Software Development Environment
GitHub is a web-based, social software development environment that pro-
vides source code management, issue tracking and other features. GitHub allows
users to set up a public repository that anyone can fork and use for their own
65
code and/or to contribute changes to the code. Pull requests are a way in which
code from one developer is contributed back to a GitHub repository publicly.
A “fork” is a clone or copy of a repository. Forks are made for two main rea-
sons: ﬁrst, to use the code in some derivative way; and second, as a precursor
to contributing back to the original project through a pull request, which can
70
then be merged with the main branch of code by those with access. All of these
activities are published in an open, visible stream on GitHub, and content and
discussion associated with issues, commits and pull requests are also public.
Users of GitHub can receive alerts (via desktop clients and email) about code
changes, pull requests, comments, issues, etc. for any public project.
75
Some of the social features on GitHub include following other users and
starring other projects. Starring a project is a way for users to indicate that
the project is interesting to them. Since there are often multiple GitHub OSS
projects providing the same functionality, stars are often used as a ‘vote’ to
indicate that the project is worth using and, thus, are a signal of the health of
80
GitHub-hosted OSS projects.
2. Related Work
Although research on ways of working in GitHub has been growing rapidly,
aspects of project organization, social structures, and leadership and its inﬂu-
ence on work performance in such open environments have not received much
85
attention. Dabbish et al. [9] do provide insight into how GitHub’s design en-
ables new types of collaboration and collaboration patterns through increased
4

platform transparency for individual users. They discuss the “collaborative util-
ity” and value when “transparency is integrated into a web-based workspace” as
well as the value of social features that make activity visible to users – GitHub
90
supports learning “better ways to code and access to superior knowledge” [9].
Not only are GitHub users able to evaluate contributions by examining dis-
cussions around those contributions [16], GitHub’s social interface also allows
people to make inferences about other contributors’ “technical goals and vision
when they edit code.” [9]. This transparency of activity allows users to deﬁne
95
“eﬀective strategies for coordinating work, advancing technical skills and man-
aging their reputation” [9]. Through this transparency, new types of leadership
and inﬂuence may have emerged, but this has yet to be studied.
2.1. Social Structure and Leadership in Open Source Software Development
Studies of social structures and interaction in other working environments
100
that oﬀer transparency exist in the literature prior to GitHub’s popularity. Here
we highlight studies from the larger body of research on OSS development ex-
amining social interactions, through studies of online systems and how norms
are developed among online teams (e.g. [10]).
Long and Siau [17] elaborate on “social structure” in SourceForge OSS
105
projects by examining changes in communication network structures over time.
They focus on interaction patterns in the bug tracking system in three Source-
Forge projects, showing that projects evolve from a single “hub” to a core/periphery
structure. While these networks are centralized in the sense that a core group of
individuals (or “key members”) are at the center of communication, “it is decen-
110
tralized in the sense that the decision or communication core is not concentrated
on one or two members but a group of key members” [17].
Similarly, Crowston and Howison’s [18] study of communications interactions
in SourceForge’s bug tracking system reveals the extent to which 120 project
teams show uniformity and diﬀerence in their social structure. The communica-
115
tion structures surrounding bug ﬁxes were neither consistently centralized nor
decentralized. Instead, they display a range of centralization. One key pattern
5

they uncover is that centralization is negatively correlated to both the number
of developers and the number of active users contributing to bug reports. The
authors oﬀer their interpretation that as “projects grow, they have to become
120
more modular, with diﬀerent people responsible for diﬀerent modules ... re-
sulting in what might be described as a ‘shallot-shaped’ structure with layers
around multiple [cores]” [18].
This multi-layered organizational structure was also reported in the study
of Mockus, Fielding and Herbsleb [19] who found that, although development
125
is quite centralized (with only 15 developers responsible for more than 80%
of the code), centralization decreases dramatically in the context of new code
contribution, bug ﬁxes and bug reporting.
Their ﬁndings lead them to this
hypothesis: “In successful open source developments, a group larger by an order
of magnitude than the core will repair defects, and a yet larger group (by another
130
order of magnitude) will report problems” [19].
GitHub allows users to “follow” other individuals. The actions (commits,
pull requests, comments, etc.) of followed users appear on a dashboard. This
creates an additional layer to organizations of individuals who observe but do
not participate. Due to the newness of GitHub’s following feature, the social
135
structure of followers has yet to be fully explored.
2.2. Following and Followers on GitHub
Lee et al. studied a small set of GitHub users and examined how four users
who are both the most popular and the most active (rockstars) inﬂuenced their
followers [15]. They found that when rockstars are more active on the projects
140
they own, they attract more of their followers to contribute to that project.
They also saw that these rockstars guided their followers to new projects when
they contributed on a new project. This study was limited to three months of
activity of the four rockstars. Our study builds on these ﬁndings by studying all
GitHub users with a large number of followers and considering all available con-
145
tribution history. Further, our study considers the inﬂuence of all GitHub users
with a large number of followers regardless of the amount they have contributed
6

to projects on GitHub. This approach teases out the distinction between pop-
ularity and contribution. We also investigate who the most popular users are
and the motivations behind following (or not following) others on GitHub.
150
Following is distinguished conceptually from contribution as a more passive
act.
On GitHub, Goggins and Petakovic [4] refer to following as aﬃliation,
and pull requests and issue comments as participation. In their examination
of inﬂuence across social technologies, they noted that diﬀerent trajectories
for inﬂuence exist among those who participate and those who aﬃliate with
155
projects, groups or other forms of open online community. Using examples from
across social technology platforms, Goggins and Petakovic illustrate how clear
distinctions between acts of participation and acts of aﬃliation are important
for understanding how inﬂuence occurs in social technologies.
A number of questions remain open. How does aﬃliation inﬂuence (follower
160
inﬂuence) play out in a social coding environment like GitHub? How might fol-
lower inﬂuence be conceptualized as part of the previous participation-focused
core/periphery model in OSS? The relationship between having a lot of fol-
lowers, without consideration of activity level, and leading those followers in a
particular direction is unexplored in prior studies of OSS in general, and GitHub
165
in particular. In this paper we take a ﬁrst step in this direction and tackle the
following research questions:
RQ1: Why do GitHub users follow others and who are the most followed
users?
RQ2: Are GitHub users inﬂuenced by the users they follow?
170
3. Method
To answer our research questions, we used a mixed-methods approach com-
prised of repository analysis as well as analysis of data from a survey of 800
GitHub users. The survey focused on the motivations behind following other
GitHub users, while the repository analysis investigated the inﬂuence of such
175
relationships. In this study, inﬂuence is deﬁned as the ability of a user to guide
7

their followers to star or contribute to new projects. In this section, we discuss
our data sources, survey design, and process for analyzing survey responses. We
focus our analysis on the actions of the popular users and their followers. We
deﬁned popular users as GitHub users who have many (500 or more) followers.
180
3.1. Description of Survey
In order to understand why GitHub users utilize the ‘following’ feature, we
conducted an online survey (see Appendix A) targeting three diﬀerent user sets,
1) users who follow popular users, 2) users who follow other users but do not
follow popular users and 3) users who do not follow any user on GitHub.
185
We emailed our survey to the 4,000 most active GitHub users (measured by
number of commits made in January to April 2014). We received 800 responses
(20% response rate). All questions were optional (see Appendix A for number
of responses per question). Survey questions were a mixture of multiple choice,
open-ended and yes/no or agree/disagree. Firstly, we asked participants about
190
their job, work-experience, their primary use of GitHub and the beneﬁts of
following users on GitHub. Then based on target user category, we asked them
why they do or do not follow other users and how many users they follow.
We also asked respondents if they follow speciﬁc user groups on GitHub, e.g.
GitHub staﬀ, creators of new library or framework, etc. and why they follow
195
these speciﬁc user groups. We were also interested in knowing if respondents
believe that the users they follow are experts.
3.2. Survey Participants
We asked each participant to provide their occupation and the type of
projects they work on within GitHub (multiple selections were allowed for each
200
question).
The majority of our survey respondents are software developers.
There were also a signiﬁcant number of managers and students.
Thirty-ﬁve
percent of respondents selected more than one occupation. The most common
mixed responses received were software developer and manager (14% of respon-
dents) as well as software developer and student (19% of respondents). Table
205
8

Table 1: Occupation of survey respondents (in percentage).
Occupation
Overall
Following
Popular
Users (1)
Following
Other
Users (2)
Not
Following
(3)
Software Developer
87.6
92.8
86.2
83.7
Manager
14.6
16.4
12.4
15.3
Student
26.9
15.1
33.9
31.2
Other
8.4
6.2
8.1
12.1
Table 2: Survey respondents working on each type of GitHub project (in percentage).
GitHub Projects
Overall
Following
Popular
Users (1)
Following
Other
Users (2)
Not
Following
(3)
OSS
89.6
97.2
92.9
74.8
Commercial (Proprietary)
40
57.7
32.9
25.2
Personal
82.3
89.3
89.8
70.1
Other
7.1
4.8
7.4
9.8
1 shows the occupations of the respondents.
The Other category responses
included researchers, scientists, teachers, system administrators and designers.
Nearly 90% of our survey respondents use GitHub for OSS projects. Table
2 shows the type of project work our respondents use GitHub for. The Other
category includes respondents using GitHub for academic purposes (thesis, class-
210
work, research, teaching, etc.), to store user conﬁguration ﬁles, write books, for
non-proﬁt projects, presentations, transcribing and coding competitions.
3.3. Survey Analysis
To analyze the responses of open-ended questions, we used methods from
grounded theory [20]. We started with open-coding to deﬁne initial categories.
215
We then performed axial coding to conﬁrm that our open-codes represented
the survey responses and to merge related categories. Two independent coders
9

Table 3: Inter-coder Reliability. Krippendorﬀ’s Alpha Scores.
Question
Initial
Agree-
ment
Final
Agree-
ment
Alpha
What do you see as the beneﬁts of following other people?
0.87
1
0.94
Why do you follow staﬀ?
0.74
1
1
Why do you follow organizations?
0.83
1
0.91
Why do you follow contributors?
0.81
1
0.93
Why do you follow creators?
0.82
1
0.92
completed the coding. When each coder was satisﬁed with their codes, their
code lists were combined to create a master code list. Each coder performed
another iteration to apply a code from the master code list to each response.
220
Next, the two coders discussed and reconciled any case where their codes did not
align, resulting in 100% ﬁnal agreement for all coded questions. We measured
inter-coder reliability with Krippendorﬀ’s alpha measure [21], results in Table
3. With the acceptance threshold for Krippendorﬀ’s alpha at >0.8, our scores
indicate high inter-coder reliability.
225
3.4. Repository Analysis
To investigate the activity of users who follow others and users who have
many followers, we performed a repository analysis in GitHub. We obtained
data from the GHTorrent project [22], which provides a mirror of the GitHub
API data. The GHTorrent project fetches GitHub public data using the GitHub
230
REST API and stores it in MongoDB and MySQL databases. We used the
2014-04-02 MySQL data dump, which included 8,510,504 projects and 3,426,046
users. The dataset contains 527,712 users who follow other users. For popular
users, we used a threshold of 500 or more followers. There are 199 popular
users, which is a manageable set of elite users to analyze. These 199 users have
235
a combined set of 101,688 followers and have created, contributed to, forked or
starred 49,927 projects.
10

Figure 1: Number of users the followers are following.
4. Results
4.1. Motivation for Following
RQ1: Why do GitHub users follow others and who are the most followed
240
users? Following other users is popular on GitHub —more than half of a million
GitHub users follow at least one other user. Figure 1 shows the number of users
being followed by GitHub users. Many users follow only a small number of other
users. Of the users who do follow at least one other user, 45.5% follow only one
user and 15% follow only two users. This suggests a core/periphery structure
245
of popularity on GitHub with a small set of very popular users surrounded by
a large set of their followers and other less popular users.
4.1.1. Motivation Behind Following
In our survey, we asked all respondents to explain the beneﬁts of following
others on GitHub. Through axial coding, we categorized the responses into 8
250
11

categories:
• Getting updates on activity. 27.2% of respondents said the beneﬁt of fol-
lowing others on GitHub is to receive updates on their activity.
Even
though GitHub also allows users to “watch” a project to receive notiﬁca-
tions on project activity, some users stated that they would prefer to follow
255
the main contributor or project owner to see updates on project activity.
“[Following others is] good for keeping track of how others are progressing
with their own projects or how much they have contributed lately.”
• Discovering new projects and trends. 24.8% of the users surveyed follow
other users with similar interests in order to identify new projects and stay
260
up-to-date with the latest trends in OSS or a particular technology. “If
I ﬁnd a skilled person that is active in the type of projects I’m interested
in.
By following that person I might stumble upon a new open source
projects.”
• No beneﬁt.
18.8% of total respondents (including those who do follow
265
others) could not identify a beneﬁt of following others. “Not much value
in following people. Far too noisy. Twitter is the only place I actively
follow people and read anything.”
• Learning. 11.2% of respondents follow others to learn from them. “It is a
great opportunity to learn from their code and see how thing are done by
270
the best in the business.”
• Socializing. 7.3% of respondents follow others for social reasons. They
follow their friends and co-workers and/or inﬂuential developers to show
respect or support. They also feel motivated by their followers. “Showing
a peer that you respect them via a follow. I don’t use follows to keep tabs
275
on what others are doing though I just do it for the socialization.”
• Collaboration. 5.8% of respondents follow others to identify opportunities
for collaboration or to share code. “If somebody is working on a similar
12

problem to you, you can collaborate with them through pull requests to
solve problems” and “Being able to grab commits from others repo.”
280
• General interest / Miscellaneous. 2.8% of respondents follow others out of
general interest or for reasons that did not ﬁt into any of our categories.
“see if something interesting created or changed.”
• Gaining easy access to others. 2.1% of respondents follow others to “book-
mark” their proﬁles so they can easily access them later. “It’s like book-
285
marking interesting people - I could potentially come back to their proﬁles”
While these reasons may appear to mostly relate to the social network within
GitHub, such social aspects can have an important impact on development ac-
tivities [23]. For example, our results show that 24.8% of respondents indicate
they follow others to discover new projects and trends. Thus, these social re-
290
lationships guide potential new contributors to OSS projects who rely on these
volunteers for their success. Furthermore, 11.2% indicate they follow others to
learn; therefore, these relationships can develop the technical skills of emerging
developers. For these reasons, the social network of following is impacting the
working patterns within GitHub.
295
The stated beneﬁts were consistent across all of the occupations of our survey
respondents. While we saw some minor diﬀerences (for example, managers were
more likely to state that following others provides no beneﬁt with 21.2% of
managers giving this response compared to only 13.8% of students and 18.9%
of software developers), the diﬀerences were not statistically signiﬁcant across
300
the occupations for any of the categories.
4.1.2. Proﬁling Popular Users
There are 199 users who have 500 or more followers on GitHub. We ex-
amined each of these users’ GitHub proﬁle page and, if a link was available
from their proﬁle, their personal webpage. Through this analysis, we identi-
305
ﬁed four categories of popular users: 1) GitHub staﬀ, 2) organizations, 3) OSS
developers, and 4) creators of library/frameworks.
13

Table 4: Popular users’ GitHub activity.
Mean
Median
Followers
1348.6
891
Projects Starred
91.7
38
Forks
28
15
Pull Requests
68.7
21
Commits
3320.2
2203
Comments
1602.1
801
Organizations (member of)
2.7
2
Projects (member of)
20.6
14
It should be noted that before GitHub introduced their ‘organizations’ fea-
ture many companies and projects used a shared GitHub user account to rep-
resent their organization. Thus, organizations could be followed much like any
310
other user. Once the GitHub organizations feature was introduced, many teams
transferred their existing user account to an organization account.
It is not
possible to follow a GitHub organization account in the same way users are
followed. Thus, organizations will no longer be a category of popular users once
the GitHub organizations feature is fully embraced and all user accounts are
315
transformed to utilize this feature.
Many, but not all, popular users are also very active. Table 4 shows the
activity levels of the popular users who are not organizations. For many of the
metrics, the median is much smaller than the mean showing that there is a wide
range of activity levels among the popular users.
320
Popular users are more likely to be viewed as experts.
We asked survey
respondents if they believe that the users that they follow are experts. 39.54%
of survey respondents responded positively that the users that they follow are
experts, while only 8.47% believe that the users they follow are not experts.
The remaining 51.9% respondents responded neutrally. Respondents following
325
popular users were more likely to believe these users are experts (x2 = 5.1, p
14

Table 5: Survey Responses to ‘Do you consider the people you follow as experts?’
Categories
Overall
Following
Popular Users
(1)
Following Other
Users (2)
Yes
39.54%
44.03%
33.9%
No
8.47%
4.11%
12.44%
Maybe
51.9%
51.85%
53.65%
= 0.02) and less likely to believe they are not (x2 = 10.98, p < 0.001) than
respondents who follow users who are not among the 199 most popular, as
illustrated in Table 5.
4.1.3. Motivation for Following Popular Users
330
We divided our survey respondents into three groups. Group 1 is composed
of users who follow the 199 popular users who have 500 or more followers. Group
2 includes people who only follow users outside the 199 popular users, and Group
3 includes users who do not follow other users.
For survey respondents who did follow popular users, we asked whether they
335
followed users in each of the popular user categories and why they followed those
users. Table 6 shows reasons given by survey respondents for following popular
users from these deﬁned categories. We excluded any responses that did not
provide a reason for following these users.
The most popular reason for following each of these user types is to obtain
340
updates on activity. Finding new projects and trends was not cited as often for
these users as it was for following in general.
4.1.4. Motivation Behind Not Following
The responses from Group 3 respondents who do not follow any other users
represent the perceived beneﬁts of following others, while the responses from
345
Groups 1 and 2 represent the actual beneﬁts experienced by users who do follow
others. Table 7 shows survey responses broken into the three groups. There are
15

Table 6: Reasons for following popular user categories.
Categories
GitHub
Staﬀ
Orgs
OSS
Devs
Creators
Obtain updates on activity
31.6%
57%
32.3%
45.3%
Find new projects / trends
9.2%
5.6%
14.5%
10.5%
No Beneﬁt
1.3%
0%
1.6%
1.1%
Learn
10.5%
5.6%
9%
7.5%
Socialize
11.9%
2.8%
16%
5.9%
Coordinate
1.3%
2.8%
1.5%
1.1%
General Interest / Misc.
9.2%
2.8%
9.3%
6%
Easy access to others
0%
0.7%
0.6%
4.2%
Table 7: Beneﬁts of following users on GitHub. Percentage of responses from each targeted
group.
Categories
Overall
Following
Popular
Users (1)
Following
Other
Users (2)
Not
Following
(3)
Updates on activity
27.2%
23.2%
30.5%
29.4%
New projects / trends
24.8%
37.4%
23.3%
5.2%
No Beneﬁt
18.8%
14.7%
11.5%
37.3%
Learn
11.2%
10.0%
13.1%
10.5%
Socialize
7.3%
8.5%
9.3%
2.6%
Collaboration
5.8%
3.1%
5.1%
10.5%
General Interest / Misc.
2.7%
1.2%
5.1%
3.3%
Easy access to others
2.1%
1.9%
3.0%
1.3%
a number of diﬀerences in the responses across groups.
Collaboration is more a perceived beneﬁt than an actual beneﬁt. Interest-
ingly, the users who do not follow any other users (Group 3) were more likely
350
to cite collaboration as a beneﬁt of GitHub’s following feature than the users
who did follow others (Groups 1 and 2). A chi-squared test of diﬀerence in
16

proportion shows the diﬀerence is signiﬁcant (x2 = 5.7, p = 0.017). This could
show that collaboration is only a perceived beneﬁt of following, but the actual
implementation of the feature falls short in this area. We used chi-squared tests
355
in our analysis since our dataset was large and, thus, the expected value for
each observational class was greater than 5 [24].
Finding new projects / trends likely not a well-known beneﬁt. Respondents
who do not follow any other users (Group 3), were much less likely to cite
ﬁnding new projects / trends as a beneﬁt of following others. A chi-squared
360
test of diﬀerence in proportion shows the diﬀerence is signiﬁcant (x2 = 55.7, p
< 0.001). This is not a well-advertised beneﬁt of following, and it is likely that
those who have never used the follow feature simply have not thought about
this as a possible beneﬁt.
Not surprisingly, many respondents who did not follow any other GitHub
365
users (Group 3) did not believe there was a beneﬁt from following others (37.3%).
We also asked respondents from this group why they did not follow others on
GitHub. The reasons were varied:
• 39.5% found no beneﬁt of following others on GitHub. “I don’t see the
value in it.”
370
• 14.2% found watching projects more useful. “I would rather follow the
projects that they contribute to instead. I think following people is rather
unnecessary
a programmer works on speciﬁc projects, not with speciﬁc
people.”
• 11.6% were not aware of the ‘following’ feature. “Hadn’t noticed the feature
375
or found a need for it.”
• 7.9% use GitHub for personal projects. “I just use GitHub for personal
projects; I don’t have an interest in the social features.”
• 6.8% are busy. “Following someone else’s code contributions sounds like a
signiﬁcant time investment to get value out of it. Right now, I don’t have
380
the time for that.”
17

• 6.8% were experiencing information overload. “I already have too much
information to follow. I wouldn’t be able to keep up with receiving notiﬁ-
cations about other GitHub users activities.”
• 3.2% respondents follow GitHub users on other social media or websites.
385
“I generally use twitter to follow the people/topics I am interested in.”
• Miscellaneous (10%).
Again, these reasons for not following others were consistent across each of
the occupations of our survey respondents.
These ﬁndings have important HCI-related implications as social features
390
continue to be added to software development environments. First, information
overload is still an important problem and should be considered when imple-
menting features that provide notiﬁcations of activity. Second, while the main
purpose of following was to provide notiﬁcations of activity, many users are
using these notiﬁcations to explore and ﬁnd new projects within their areas
395
of interest. Users who do not follow others do not seem to be aware of this
beneﬁt of the follow feature. Sites like GitHub could likely ﬁnd ways to tailor
notiﬁcations for this purpose and encourage this exploration.
4.2. Inﬂuence of Following
RQ2: Are GitHub users inﬂuenced by the users they follow?
400
To answer this research question, we examined user behavior. We performed
a quantitative analysis of GitHub behavioral trace data to determine if the
actions of popular users inﬂuenced their followers to star or contribute to new
projects.
We analyzed the actions of the 173 popular users who are not organizations
405
to identify evidence of inﬂuence in their followers. We examined when a popular
user identiﬁes a new project by creating, starring, forking or contributing to
a project for the ﬁrst time to see if their action attracted their followers to
that project.
We considered the following actions for project contributions:
1) making a commit; 2) submitting a pull-request; 3) creating an issue; or 4)
410
18

commenting on an issue, commit, or pull-request. We analyzed the ﬁrst activity
of a popular user’s followers who joined the same project after that popular user.
We analyzed starring, contributing and forking for the followers ﬁrst activities.
Popular user actions attract their followers to new projects. We found that
43.5% of followers are attracted to new projects when a popular user whom they
415
are following performs some activity on that project. Table 8 shows the ﬁrst
activity a popular user makes on a new project and the ﬁrst activity of their
followers who joined the same project after the popular user’s activity on that
project. Conversely, only 0.01% of a popular user’s followers star or contribute
to a new project before the popular user indicating that the popular user is
420
inﬂuencing his followers and not just part of the herd. In fact, for users who
are following the popular users, popular user activity on a project precedes the
follower’s activity for 90.5% of the new projects they star or contribute to.
Followers are likely to star new projects after a popular user whom they are
following does any activity on that project. Table 8 illustrates that when popular
425
users star, fork, contribute to or create a new project, a large percentage of their
followers (24.7%, 10.2%, 23.9% and 17% respectively) will star that project.
Considering that the most starred project on GitHub is starred by less than 1%
of all users, these are in fact high percentages and suggest that the followers
were inﬂuenced by the actions of the popular user.
430
Followers are also likely to contribute to new projects after a popular user
whom they are following performs any activity on that project. As also shown in
Table 8, the highest rate of contribution follows from a popular user contributing
to or starring a new project with 13.7% and 12.5% of their followers contributing
to that project.
435
Starring a project is powerful. We ran a Mann-Whitney test of distribution
on the number of users inﬂuenced by a popular user when they star a project
compared to when they contribute to a project.
We expected that when a
popular user contributed to a project they would inﬂuence more users than
when they simply starred a project. However, a Mann-Whitney test shows no
440
statistical signiﬁcance. This demonstrates that contributions may not be any
19

Table 8: Popular User Inﬂuence. Followers who star, contribute to, or fork a project after a
popular user stars, forks, contributes to, or creates a new project as their ﬁrst activity on a
project. The ratios in this table represent the average percent of followers for all popular users
who performed each given action as their ﬁrst action on a project over all projects. Popular
users can take only a single type of action as their ﬁrst action on a given project, and followers
may follow more than one popular use. Therefore, the columns are not expected to add up to
100%.
Popular User First Activity
Follower First
Activity
Star
Fork
Contribute
Create New Project
Star
24.7%
10.2%
23.9%
17%
Contribute
12.5%
6.7%
13.7%
3.3%
Fork
<0.1%
<0.1%
<0.1%
<0.1%
Total
37.2%
16.9%
37.6%
20.3%
more powerful than stars in attracting users to a project. Mann-Whitney was
selected to compare the average of the two groups since the data is not normally
distributed.
The more followers a popular user has, the more their followers are inﬂu-
445
enced by their actions. There is a non-linear relationship between the number of
followers a popular user has and the number of followers that they inﬂuence. We
used curve ﬁtting to identify the best ﬁtting mathematical function to explain
the relationship between inﬂuence (measured as the total number of a popular
user’s followers who star or contribute to a new project after the popular user
450
performs some action on that new project over all projects) and the number
of followers. A linear model (Inﬂuence = NumFollowers) was able to predict
60% of the data. However, as shown in Table 9, as the degree of the equation
increases, so does the predictive power. We compared each polynomial equa-
tion to the linear equation with an Analysis of Variance and obtained signiﬁcant
455
p-values for each showing that polynomial functions are a better ﬁt than the
linear model. This shows that as a user’s number of followers increases, their
rate of inﬂuence increases.
20

Table 9: Inﬂuence and Popularity. Summary of the R-squared values using diﬀerent degrees
of polynomials.
Degree
Predictive Power (r2)
Analysis
of
Variance
(compared to linear)
1
0.607
−
2
0.683
< 0.001
3
0.688
< 0.001
5
0.694
< 0.001
10
0.754
< 0.001
15
0.789
< 0.001
Figure 2 illustrates the residuals graphed against predicted values of Inﬂu-
ence (ﬁtted values) for both the linear and 5th degree polynomial statistical
460
models. The residuals show the amount of variability in Inﬂuenced that is not
explained by our model [25]. For the polynomial model (Fig. 2b), the shape of
the line is ﬂat except near the outliers, in contrast to the linear model (Fig. 2a),
which is heavily distorted. This suggests a reasonable ﬁt between the polyno-
mial model and the data showing that the rate of inﬂuence increases as a person
465
accumulates more followers.
The additional predictive power of the polynomial model follows our hypoth-
esis that there is some point at which inﬂuence accrues faster than the number
of followers alone. Our two statistical outliers, labeled as 24 and 27 in Figure
2, further support this point. Those two popular users inﬂuenced signiﬁcantly
470
more actions than every other popular user, yet they do not have the most
number of followers. These two users have very diﬀerent proﬁles. User 27 is
one of the most active popular users in terms of his number of comments on
issues, pull requests and commits and his number of commits. He has created
many popular OSS projects. While he has a large number of followers, he has
475
less than half of the most followed popular user. On the other hand, user 24 is
closer to average in regards to his activity within GitHub. However, he is one of
21

500
1000
1500
2000
2500
3000
-1000
0
1000
2000
Fitted values
Residuals
Residuals vs Fitted
24
27
89
500
1000
1500
2000
2500
-1500
-1000
-500
0
500
1000
1500
Fitted values
Residuals
Residuals vs Fitted
108
24
27
(a)	  
(b)	  
Figure 2: Residuals vs Fits Plots. (a) Linear model (b) 5th Degree Polynomial Model.
the most followed users, and he is a member of a large number of organizations.
He contributes to a wide range of projects.
The more active a popular user is does not impact their inﬂuence. There
480
is not a clear relationship between the activity level of a popular user and
the number of followers they inﬂuence. We measured the activity level of a
user by considering various forms of activity, including number of commits,
pull requests, forks, project membership, repositories owned and number of
comments. Table 10 shows the results of a linear regression model that considers
485
each of these measures of activity together with the number of followers a user
has. The number of comments (made on issues, commits and pull requests) is
the only measure of activity that has an impact on inﬂuence; this is interesting
since this is the most social of our activity measures. However, even for this
measure, the eﬀect size is small as measured by Cohen’s f 2. Conversely, the
490
number of followers shows a large impact on inﬂuence. This indicates a social
inﬂuence is occurring where followers are inﬂuenced by the popularity of a user
more than the user’s development activity.
22

Table 10: Impact of various measures of activity on inﬂuence compared with the inﬂuence of
popularity (measured by number of followers).
t-value
Cohen’s f 2
Intercept
0.124
Commits
-0.557
0.002
Pull requests
-1.378
0.011
Repositories Owned
-1.187
0.008
Forks Created
1.046
0.006
Project Membership
1.684
0.016
Comments
4.99 ***
0.144
Followers
17.796 ***
1.831
5. Discussion
Our research goal was to better understand the following relationship on
495
GitHub. GitHub users can “follow” another user to receive notiﬁcations about
that user’s activity on GitHub.
We investigated why users choose to follow
other users and what types of actions are taken as a result of receiving these
notiﬁcations. Our main goal was to identify if a user’s actions are inﬂuenced by
the notiﬁcations they receive through these following relationships.
500
RQ1: Why do GitHub users follow others and who are the most followed
users?
To answer our ﬁrst research question, we surveyed 800 GitHub users
and investigated GitHub’s 199 most popular users (measured by number of
followers). We identiﬁed four categories of popular users: 1) GitHub staﬀ, 2)
organizations, 3) OSS developers, and 4) creators of library/frameworks.
505
Getting updates on activity is the most commonly cited reason for following
others showing that following others is mostly used an awareness mechanism.
Another commonly cited reason for following others is to discover new projects
and trends showing that users will investigate new projects that appear in their
notiﬁcations. Other reasons given for following others were learning, socializ-
510
ing, collaboration and general interest. Users who do not follow others were
23

more likely to cite collaboration as a beneﬁt than users who do follow others,
which suggests that collaboration, learning and socializing exist on a Contin-
uum for GitHub users. Understanding their interconnection in future studies
will likely help projects and companies who use GitHub to better understand
515
how to build their project communities up by attending to a more sophisticated
understanding of participant motivation.
Our ﬁndings show that following other users is being used for much more
than project activity awareness. Yet, 14.2% of our survey respondents found
watching projects more useful than following other users. When the goal of
520
following is to maintain awareness around a particular project, watching the
project of interest is intuitive since project activity is often much more than
the actions of one contributor. This paper focused on how individuals are in-
ﬂuenced by other individuals, and we, therefore, did not gather data or analyze
project oriented following behavior. Future research could investigate inﬂuence
525
of notiﬁcations from watching projects.
RQ2: Are GitHub users inﬂuenced by the users they follow? For our second
research question, we analyzed the actions of popular GitHub users and their
followers to look for evidence that popular users are inﬂuencing the actions of
their followers. We found that when a popular user stars, forks, contributes
530
to or creates a new project their followers are attracted to that project. We
observed that a popular user’s rate of inﬂuence increases as they accumulate
more followers. However, their rate of contribution does not impact their rate
of inﬂuence. This can indicate that popularity may be more inﬂuential than
actual contribution. Thus, GitHub’s following feature may be enabling a new
535
type of leadership in GitHub-hosted OSS projects with popular users emerging
as leaders. These ﬁndings can be validated by future studies. For example,
a targeted survey could ask individual developers how they are inﬂuenced by
particular popular users whom they follow. In Sections 5.1 and 5.2, we discuss
our ﬁndings in relation to existing literature and their implications on OSS social
540
structure and leadership, and we highlight open research questions our study
identiﬁed.
24

5.1. New Type of Leadership Emerging Through Following
In prior literature, leadership in OSS projects has been examined as an ex-
plicit, participatory act of discussion or contribution evaluation [10, 5, 6, 7]. In
545
contrast to these participation-focused framings of OSS leadership, our ﬁndings
show that a new type of leadership may be taking shape through follower re-
lationships on GitHub-hosted projects. We found that popular users who are
followed by many other users have inﬂuence over their followers, and thus are
serving as leaders. The inﬂuence we observed was related to guiding users to
550
new projects. Many OSS projects rely on volunteers to ﬁx bugs and contribute
new features, and having a large pool of potential contributors is important to
the health of these projects. The fact that popular users are able to attract new
contributors to projects is, therefore, important. If a project hosted on GitHub
is able to attract a very popular user, it is likely that that user will bring a
555
large pool of contributors with them leading to more contributions and greater
project success.
The type of leadership we identiﬁed is thus at a higher-level than is typically
studied as it over-arches all GitHub projects. Future research could focus on
the impact of popularity within a project. Does a popular user’s opinion impact
560
the success of a pull request? When a popular user comments on an issue or
pull request does the sentiment of their comment inﬂuence the remainder of the
discussion around that artifact? It is also worth investigating the impact to a
project when this type of leader leaves a project. Do other popular leaders take
their place? If not, does the project continue to thrive without a popular user
565
leader?
One type of popular user we identiﬁed were the creators of libraries/frameworks.
For example, Linus Torvalds 1, the creator of the Linux operating system, is one
of the most popular users in our dataset. Yu et al. [26] found that project own-
ers are followed by more users external to their project as their project grows
570
in popularity. This indicates that very popular projects on GitHub will have at
1https://github.com/torvalds
25

least one popular user. However, future research could investigate the existence
of popular users and its relation to project success. Measures related to project
success may be derived from the number of popular leaders engaged on the
project or other metrics around popular leaders to build on existing measures
575
of OSS project success [9, 27, 28, 29, 19].
Finally, the new type of leadership we have identiﬁed could have implications
on OSS leadership theories for projects hosted on GitHub. For instance, we wit-
nessed a very small subset of users who are very popular on GitHub indicating
a new category of core/periphery structure in OSS. While Crowston and Howi-
580
son [18] describe a shallot shaped structure focusing on contributions and work
oriented leadership in OSS, our explication of popularity suggest a new type of
leadership altogether. While popular users may also be contributors, they may
not play the same central role in each particular project they contribute to. Do
popular users inﬂuence projects they participate in to a greater extent than the
585
popularity they bring to a project from prior accomplishments in some cases?
Do we need to re-conceptualize how we think about OSS project structure for
projects hosted on GitHub?
These questions and others are important topics
for future research. In OSS, as in team research in the physical world, we may
ﬁnd that task oriented and social inﬂuence are becoming two diﬀerent ways of
590
moving OSS projects forward.
5.2. Popularity is Altering OSS Participation on GitHub
Further, we observed that a user’s popularity impacts their level of inﬂu-
ence. Prior literature on merit in OSS focused on contributions and technical
skills [18, 30]. People earn respect for getting work done. Our ﬁndings im-
595
ply that popularity, now clearly visible in the GitHub interface, also inﬂuences
how users perceive others. Marlow et al [12] found that GitHub users use the
information from user proﬁles to form impressions of each other and make judg-
ments about potential contributors, which then inﬂuence whether or not their
code contributions are accepted. Are these impressions being made based on
600
the users contributions and technical skills or on the user’s popularity, which is
26

prominently displayed on their proﬁle? Are popular users’ contributions more
likely to be accepted on GitHub? Does a user’s popularity reduce entry barriers
on new projects?
We found that as a user’s popularity increases, so does their rate of inﬂu-
605
ence. At some point, inﬂuence accrues faster than the number of followers alone.
Investigating the most inﬂuential users did not reveal any particular character-
istics of the users that would explain this phenomenon. Future research could
continue this investigation. Why are some users more inﬂuential than others?
What are the characteristics of the most inﬂuential users? Are users more likely
610
to follow already popular users?
5.3. Threats to Validity
One threat stems from our selection of the GHTorrent dataset, which may
not be a full copy of all GitHub data [22].
Nevertheless, it is a best-eﬀort
approach that has been widely accepted in the research community as evidenced
615
by its inclusion as the dataset for the MSR 2013 Mining Challenge [31] and the
many recent papers that utilize its data in their analysis.
Another threat surrounds the dates in which a user began following another
user, which may not always be accurate. This data is not available from the
GitHub API [32], so this threat stems from a limitation of the GitHub API
620
itself. GHTorrent attempts to obtain this data by monitoring GitHub events
and recording the corresponding date. When GHTorrent was not able to record
the corresponding event, it provides a best guess for this missing data by setting
the following date to be the date of the creation of the latest created user of the
follower or followee.
625
Our analysis is focused on all GitHub users with more than 500 followers.
It is possible that our dataset is impacted by developers who have artiﬁcially
increased the number of their followers through services such as the one available
at http://githubfollowers.com.
Such services typically result in an overnight
spike in followers. We did not observe such spikes in our dataset, but the threat
630
still exists that some users in our data are popular only because of this artiﬁcial
27

measure. However, the existence of a small number of malicious users should
not greatly impact our results.
Finally, our survey respondents were self-selected, and their opinions may
not generalize to all GitHub users. However, we received a large number of
635
survey responses (800) from a diverse set of users contributing to a wide-range
of GitHub projects, and we reached saturation in our results.
6. Conclusion
GitHub’s follow feature introduced a new social aspect to OSS projects where
users can aﬃliate themselves with each other. We found that popular GitHub
640
users attract their followers to new projects. As a user’s popularity increases, so
does their rate of inﬂuence. Our ﬁndings indicate that a new type of leadership
may be emerging through follower relationships. Yet, activity level does not
have the same impact on inﬂuence.
A user’s popularity is clearly visible to
other users, thus users may be inﬂuenced by the popularity of a user showing a
645
new social phenomenon emerging in OSS projects. Thus, the open collaboration
environment of GitHub is shaping a new understanding of social structure on
OSS projects shaped by popularity and inﬂuence.
This paper introduced several avenues for future research around popularity
in software development projects. Future research should investigate the impact
650
of popular users joining or leaving a project, the inﬂuence of a popular user
within a discussion, and whether project success can be measured in some way
based on popular users.
Further, research can investigate popularity within
transparent development environments to understand better if visible popularity
itself elicits inﬂuence and attracts further popularity. Finally, research should
655
continue to investigate how the social structure on OSS projects is changed by
popularity.
28

Acknowledgements
This work was partially supported by the grants NSERC NECSIS and NSF
VOSS OCI-1221254. The authors would like to thank the survey participants
660
for the time they dedicated to this study.
29

Appendix A.
Survey Questions and Number of Responses
1. Do you recognize yourself in any of the following categories?
• Software Developer (coder, tester, etc.)
665
• Manager
• Student
• Other (please specify)
2. How much experience (in years) do you have in the occupation type that
you selected in Question 1?
670
3. Do you use GitHub for any of the following work?
• Open-source project
• Commercial project
• Personal project
• Other (please specify)
675
4. What do you see as the beneﬁts of following other people on GitHub?
5. Do you follow other people on GitHub? (Yes or No)
(a) If yes, how many GitHub users do you follow?
(b) If no, why don’t you follow other people on GitHub? (skip to Q14)
6. Do you follow GitHub staﬀmembers on GitHub? (Yes or No)
680
(a) If yes, why do you follow GitHub staﬀmembers on GitHub?
7. Do you follow organizations on GitHub? (Yes or No)
(a) If yes, why do you follow organizations on GitHub?
8. Do you follow open-source contributors on GitHub? (Yes or No)
(a) If yes, why do you follow open-source contributors on GitHub?
685
9. Do you follow creators of library, framework, technology, etc. on GitHub?
(Yes or No)
(a) If yes, why do you follow creators of library, framework, technology,
etc. on GitHub?
30

10. Do you follow any other type of GitHub users? (Yes or No)
690
(a) If yes, please specify what type of GitHub users?
(b) If yes, why do you follow these other types of GitHub users?
11. Do you consider the people you follow as experts? (Yes, No or Maybe)
12. Do you follow GitHub users on other websites too? If yes, Please specify.
• StackOverﬂow
695
• Personal website/blog
• Twitter
• Facebook
• Google Plus
• Other (please specify)
700
13. What is your GitHub username? (optional)
14. Are you willing to participate in a follow-up survey or interview?
31

Table A.11: Number of Responses for Each Survey Question
Question
Number of
Participants
Presented this
Question
Number of
Responses
1
800
796
2
800
765
3
800
798
4
800
657
5
800
794
5a
575
528
5b
218
185
6
575
545
6a
90
71
7
575
544
7a
168
134
8
575
537
8a
423
310
9
575
541
9a
379
265
10
575
529
10a
294
254
10b
294
221
11
575
531
12
575
523
13
800
577
14
800
722
References
[1] E. Bakshy, J. M. Hofman, W. A. Mason, D. J. Watts, Everyone’s an inﬂu-
encer: Quantifying inﬂuence on twitter, in: Proceedings of the 4th ACM
705
32

International Conference on Web Search and Data Mining, ACM, 2011, pp.
65–74.
[2] R. M. Bond, C. J. Fariss, J. J. Jones, A. D. Kramer, C. Marlow, J. E.
Settle, J. H. Fowler, A 61-million-person experiment in social inﬂuence and
political mobilization, Nature 489 (7415) (2012) 295–298.
710
[3] M. Cha, H. Haddadi, F. Benevenuto, P. K. Gummadi, Measuring user
inﬂuence in twitter: The million follower fallacy, ICWSM 10 (10-17) (2010)
30.
[4] S. Goggins, E. Petakovic, Connecting theory to social technology platforms
a framework for measuring inﬂuence in context, American Behavioral Sci-
715
entist.
[5] R. T. Fielding, Shared leadership in the apache project, Communications
of the ACM 42 (4) (1999) 42–43.
[6] A. J. Kim, Community Building on the Web: Secret Strategies for Success-
ful Online Communities, Addison-Wesley Longman Publishing Co., Inc.,
720
2000.
[7] W. Scacchi, Free/open source software development practices in the com-
puter game community, IEEE Software 21 (2004) 5967.
[8] M. Michlmayr, Community management in open source projects, The Eu-
ropean Journal for the Informatics Professional X (3) (2009) 22–26.
725
[9] L. Dabbish, C. Stuart, J. Tsay, J. Herbsleb, Social coding in github: Trans-
parency and collaboration in an open software repository, in: Proceedings
of the ACM 2012 Conference on Computer Supported Cooperative Work,
ACM, 2012, pp. 1277–1286.
[10] N. Ducheneaut, Socialization in an open source software community: A
730
socio-technical analysis, Computer Supported Cooperative Work (CSCW)
14 (4) (2005) 323–368.
33

[11] D. German, A. Mockus, Automating the measurement of open source
projects, in: Proceedings of the 3rd Workshop on Open Source Software
Engineering, Citeseer, 2003, pp. 63–67.
735
[12] J. Marlow, L. Dabbish, J. Herbsleb, Impression formation in online peer
production: Activity traces and personal proﬁles in github, in: Proceedings
of the 2013 Conference on Computer Supported Cooperative Work, ACM,
2013, pp. 117–128.
[13] J. Moon, L. Sproull, Essence of distributed work, Online Communication
740
and Collaboration: A Reader (2010) 125.
[14] W. Zhang, J. Storck, Peripheral members in online communities, AMCIS
2001 Proceedings (2001) 117.
[15] M. J. Lee, B. Ferwerda, J. Choi, J. Hahn, J. Y. Moon, J. Kim, Github
developers use rockstars to overcome overﬂow of news, in: CHI’13 Extended
745
Abstracts on Human Factors in Computing Systems, ACM, 2013, pp. 133–
138.
[16] J. Tsay, L. Dabbish, J. Herbsleb, Inﬂuence of social and technical factors for
evaluating contribution in github, in: Proceedings of the 36th international
Conference on Software Engineering, ACM, 2014, pp. 356–366.
750
[17] Y. Long, K. Siau, Social network structures in open source software devel-
opment teams, Journal of Database Management 18 (2) (2007) 25.
[18] K. Crowston, J. Howison, The social structure of free and open source
software development, First Monday 10 (2).
[19] A. Mockus, R. T. Fielding, J. D. Herbsleb, Two case studies of open source
755
software development: Apache and mozilla, ACM Transactions on Software
Engineering and Methodology (TOSEM) 11 (3) (2002) 309–346.
[20] J. Corbin, A. Strauss, Basics of Qualitative Research: Techniques and Pro-
cedures for Developing Grounded Theory, Sage Publications, 2014.
34

[21] K. Krippendorﬀ, Content Analysis: An Introduction to its Methodology,
760
Sage, 2012.
[22] G. Gousios, D. Spinellis, Ghtorrent: Github’s data from a ﬁrehose, in: Pro-
ceedings of the 9th IEEE Working Conference on Mining Software Repos-
itories, IEEE, 2012, pp. 12–21.
[23] C. Amrit, M. Daneva, D. Damian, Human factors in software development:
765
On its underlying theories and the value of learning from related disciplines;
a guest editorial introduction to the special issue, Information and Software
Technology.
[24] R. A. Fisher, F. Yates, et al., Statistical tables for biological, agricultural
and medical research, Statistical Tables for Biological, Agricultural and
770
Medical Research (Ed. 3).
[25] F. J. Anscombe, Graphs in statistical analysis, The American Statistician
27 (1) (1973) 17–21.
[26] Y. Yu, G. Yin, H. Wang, T. Wang, Exploring the patterns of social behavior
in github, in: Proceedings of the 1st International Workshop on Crowd-
775
based Software Development Methods and Technologies, ACM, 2014, pp.
31–36.
[27] C. Fershtman, N. Gandal, The determinants of output per contributor
in open source projects: An empirical examination, Available at SSRN
515282.
780
[28] P. Giuri, M. Ploner, F. Rullani, S. Torrisi, Skills and division of labor in an
ecology of ﬂoss projects: Implications for performance, in: DRUID Tenth
Anniversary Summer Conference, Copenhagen, Denmark, June, 2005, pp.
27–29.
[29] J. W. Kuan, Open source software as consumer integration into production,
785
Available at SSRN 259648.
35

[30] W. Sack, F. D´etienne, N. Ducheneaut, J.-M. Burkhardt, D. Mahendran,
F. Barcellini, A methodological framework for socio-cognitive analyses of
collaborative design of open source software, Computer Supported Coop-
erative Work (CSCW) 15 (2-3) (2006) 229–250.
790
[31] G. Gousios, The ghtorent dataset and tool suite, in: Proceedings of the
10th Working Conference on Mining Software Repositories, IEEE Press,
2013, pp. 233–236.
[32] E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer, D. M. German,
D. Damian, The promises and perils of mining github, in: Proceedings
795
of the 11th Working Conference on Mining Software Repositories, ACM,
2014, pp. 92–101.
36
View publication stats

