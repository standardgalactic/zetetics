IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
1
Linking Terrorist Network Structure to Lethality:
Algorithms and Analysis of Al Qaeda and ISIS
Youdinghuan Chen, Chongyang Gao
, Daveed Gartenstein-Ross
, Kevin T. Greene, Karin Kalif, Sarit Kraus,
Francesco Parisi
, Chiara Pulice
, Anja Subasic, and V. S. Subrahmanian
Abstract—Without measures of the lethality of terrorist
1
networks, it is very difﬁcult to assess if capturing or killing a
2
terrorist is effective. We present the predictive lethality analysis of
3
terrorist organization (PLATO) algorithm, which merges machine
4
learning with techniques from graph theory and social network
5
analysis to predict the number of attacks that a terrorist network
6
will carry out based on a network structure alone. We show that
7
PLATO is highly accurate on two novel datasets, which cover Al
8
Qaeda (AQ) and the Islamic State (ISIS). Using both machine
9
learning and statistical methods, we show that the most signiﬁcant
10
macrofeatures for predicting AQ’s lethality are related to their
11
public communications (PCs) and logistical subnetworks, while
12
the leadership and operational subnetworks are most impactful
13
for predicting ISISs lethality. Across both groups, the average
14
degree and the diameters of the strongly connected components
15
(SCCs) within these networks are strongly linked with lethality.
16
Index Terms—Counterterrorism, machine learning, terrorism.
17
I. INTRODUCTION
18
T
HOUGH terrorism has been a major concern since the
19
1970s, the events of 11 September 2001 saw the emer-
20
gence of the “global war on terror.” Since then, billions of
21
dollars and thousands of lives of military personnel, and even
22
more lives of civilians, have been expended in this war.
23
Counterterrorism efforts over the last 20 years have included
24
a number of instruments aimed at targeting the lethality of ter-
25
ror networks. These include offering rewards for information
26
Manuscript
received
11
January
2022;
revised
29
June
2022;
accepted 30 July 2022. This work was supported in part by the Ofﬁce
of Naval Research (ONR) under Grant N00014-16-1-2918. (Corresponding
author: V. S. Subrahmanian.)
Youdinghuan Chen is with the Department of Biomedical Data Science,
Dartmouth College, Hanover, NH 03755 USA (e-mail: youdinghuan.chen.gr@
dartmouth.edu).
Chongyang Gao, Chiara Pulice, and V. S. Subrahmanian are with the
Computer Science Department, Buffett Institute for Global Affairs, North-
western University, Evanston, IL 60208 USA (e-mail: chongyanggao2026@
u.northwestern.edu; chiara.pulice@northwestern.edu; vss@northwestern.edu).
Daveed
Gartenstein-Ross
is
with
Valens
Global,
Washington,
DC 20003 USA (e-mail: daveed@valensglobal.com).
Kevin
T.
Greene
is
with
the
School
of
Public
and
International
Affairs, Princeton University, Princeton, NJ 08544 USA (e-mail: kg2082@
princeton.edu).
Karin Kalif and Sarit Kraus are with the Department of Computer Science,
Bar-Ilan University, Ramat Gan 5290002, Israel (e-mail: karinsheri28@
gmail.com; sarit@cs.biu.ac.il).
Francesco Parisi is with the Department of Computer Engineering, Mod-
eling, Electronics, and Systems, University of Calabria, 87036 Rende, Italy
(e-mail: fparisi@dimes.unical.it).
Anja Subasic is with the Computer Science Department, Dartmouth College,
Hanover, NH 03755 USA (e-mail: anja.subasic.gr@dartmouth.edu).
This
article
has
supplementary
downloadable
material
available
at
https://doi.org/10.1109/TCSS.2022.3198820, provided by the authors.
Digital Object Identiﬁer 10.1109/TCSS.2022.3198820
leading to the capture and/or conviction of certain individuals,
27
as well as operations to remove terrorists from their networks
28
(e.g., the operation to capture Osama bin Laden).
29
When a terror network is targeted in this way, the net-
30
work reshapes itself [1], [2], and so when considering the
31
removal of a terrorist, such as Osama bin Laden from the
32
Al Qaeda (AQ) network, it is important to be able to predict
33
the lethality of the resulting network (after the removal).
34
In this article, we propose methods to correlate the structure
35
of a network with its lethality. While several deﬁnitions of
36
lethality are possible, we deﬁne lethality as the estimated
37
number of attacks carried out by a future terror network after
38
reshaping. We develop a novel algorithm called predictive
39
lethality analysis of terrorist organization (PLATO) for this
40
purpose. When a counterterrorism agency considers removing
41
a terrorist, it can use a system, such as shaping terrorist
42
organizational network efﬁciency (STONE) [1], [2], to identify
43
the new possible networks that result (and their associated
44
probabilities) and then use a lethality model, such as the one
45
proposed in this article, to identify the expected lethality of
46
the resulting network.
47
The ﬁrst effort at building such a lethality model was in [3]
48
who proposed removing critical nodes in a network using a
49
node centrality measure. But, they did not link networks to
50
lethality, and because their data were cross sectional, they
51
were unable to assess the impact of their method on lethality,
52
as there were no “before removal” and “after removal” states
53
of the network. Horowitz and Potter [4] ﬁnd a correlation
54
between the connections between groups and lethality, but
55
also rely on cross-sectional data. Others have analyzed terror
56
networks from the point of view of cell structure [5], their abil-
57
ity to communicate while remaining covert [6], [7], and how
58
they can be destabilized [8]. STONE [1], [2] developed four
59
simple lethality measures, which were tested on small datasets,
60
along with sophisticated methods to identify who to remove
61
from the network. To effectively forecast the lethality of terror
62
groups and to evaluate how various policy interventions impact
63
a terrorist network’s lethality, we need features that involve the
64
group’s network structure, which are longitudinal (vary over
65
time) and a model that can accurately map these features to
66
group violence.
67
Our contributions fall into three categories. First, we lever-
68
age two novel longitudinal network datasets detailing the rela-
69
tionships between members of two prominent terror groups,
70
AQ and the Islamic State (ISIS). Our AQ time-series network
71
dataset consists of 16 years of data comprising 139 networks.
72
2329-924X © 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

2
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
Our ISIS dataset consists of 49 networks spanning four years.
73
To the best of our knowledge, these are the most extensive
74
datasets showing the evolution of these two networks over
75
time. We deﬁne a set of network-related features, some of
76
which are used for the ﬁrst time in terrorist network analysis.
77
These features are based on the functional roles played by
78
individual terrorists and the subnetworks induced by different
79
functional roles using concepts from graph theory and social
80
network analysis.
81
Second, we devise new algorithms to predictively link
82
a terrorist network structure to future attacks. Our PLATO
83
algorithm is an ensemble that uses a mix of regression
84
methods, feature selection methods, and time lags to solve the
85
following problem. Suppose a new network Nt+1 comes into
86
existence at the beginning of a time period It+1. We would
87
like to predict the lethality of Nt+1 as soon as it comes into
88
existence. PLATO is initially invoked with a set of features,
89
some of which are eliminated by the algorithm. Using past
90
ground-truth data up to and before time period It, PLATO
91
identiﬁes the best parameters for an ensemble of regressors
92
and uses late fusion to learn the optimal weights. Thus,
93
PLATO uses a careful mix of feature engineering, subnetwork
94
selection, feature selection, and regression, together with an
95
ensemble model for generating predictions. We show that
96
all three versions of PLATO signiﬁcantly beat out a strong
97
regression baseline in terms of predictive accuracy measured
98
by Pearson correlation coefﬁcient (PCC).
99
Third, we derive a new understanding of the link between
100
the lethality of AQ and ISIS and their network structure.
101
Because many features vary slightly, we introduce the
102
concept of a macrofeature, which is an aggregation of similar
103
features into one. We study which macrofeatures are most
104
closely linked to AQ and ISIS’s lethality. Surprisingly, the
105
subnetwork of AQ involved in public communications (PCs)
106
contributes to ﬁve of the most signiﬁcant macrofeatures,
107
while the logistical subnetwork of AQ is involved in four.
108
In contrast, in the case of ISIS the top-ten most signiﬁcant
109
features are dominated by the leadership subnetwork (six
110
of ten), followed by the operational subnetwork (two of
111
ten). Moreover, in the case of AQ, the average degrees
112
of nodes in various subnetworks are strongly linked with
113
lethality, as are properties associated with the diameters of
114
the strongly connected components (SCCs), as well as other
115
centrality measures. This is also mirrored in the case of ISIS
116
where degrees, centrality measures, and diameters of strongly
117
connected subnetworks play important roles.
118
II. NETWORK AND FEATURES
119
A terrorist network N = (V, E, π, cat) consists of four
120
parts: a set V
of nodes (terrorists), a set E of edges
121
linking those nodes (relationships between terrorists), and
122
two functions π and cat. The function cat assigns a set of
123
functional categories to each terrorist. The set of possible
124
functional categories is C = {operational, financial,
125
logistical, R&T, PC, leadership}, where R&T and
126
PCs stand for recruitment and training and public communi-
127
cations, respectively. For instance, during the March–August
128
2015 time period, Bana Fanaye, one of the leaders of Boko
129
Fig. 1.
AQ network during September–October 2014. This network has
48 nodes and 58 edges in total. The different node shapes denote the functional
categories, and the colors denote the individual’s state during that time frame.
Node size is proportional to the individual’s rank.
Haram, had two associated functional categories: logistical
130
and leadership. The function π assigns a value for each
131
property that a terrorist (node) might have. For instance, rank
132
is a property on a 0 (lowest rank) to 10 (top leader) scale.
133
Thus, we might have rank(Osama bin Laden, 10), signifying
134
that bin Laden had a value of 10 for the rank property in
135
a given network. Nodes may have other properties, such
136
as dead, jail, and alive (and free). Another important node
137
property we consider is role (e.g., with values, such as trainer,
138
bomb maker, and so on). Every node is required to have
139
values for the rank and role properties, but other properties
140
may or may not have associated values.
141
Formally, a terrorist’s category of a terrorist can be included
142
within π. We treat cat separately as our analysis focuses
143
on these categories. The properties in π may be positively
144
or negatively correlated with cat. A bomb maker (role) is
145
rarely the leader (negative correlation), but is often in the
146
operational category (positive correlation). This does not
147
affect our analysis.
148
As terrorist networks evolve over time, our data for each
149
of the AQ and ISIS networks have an associated set of T
150
time intervals I0, I1, . . . , IT . We use Nt = ⟨Vt, Et, πt, catt⟩to
151
denote the snapshot of a network at the time interval It (with
152
t ∈T). An example of network from our dataset for the time
153
interval September–October 2014 is shown in Fig. 1. For each
154
network Nt, which existed during the time interval It, we also
155
collected At, the number of attacks carried out by the terror
156
network during time It.
157
We built such tiime series of networks for AQ from Novem-
158
ber 2001 to January 2017 and for ISIS from December
159
2012 to January 2017. The ISIS dataset consists of 49 time-
160
indexed networks, with an average time interval (i.e., the
161
period of validity of time-indexed networks) of approximately
162
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

CHEN et al.: LINKING TERRORIST NETWORK STRUCTURE TO LETHALITY: ALGORITHMS AND ANALYSIS OF AQ AND ISIS
3
TABLE I
WbFs. DEFINITIONS 1–3 CAN BE FOUND IN APPENDIX A-A
one month. The average number of members per network
163
is 74.17, with 10 as the min and 110 as the max. The
164
number of relationships in the ISIS dataset ranged from 12 to
165
642 across the networks, with an average of 437.11. The AQ
166
dataset consists of 139 time-indexed networks with an average
167
time interval of between three and four months. The average
168
number of members per network is 39.16, with a min of
169
2 and a max of 159. The average number of relationships per
170
network was 113.90, with a minimum of 26 and a maximum
171
of 808. We designed a codebook detailing the data collection
172
procedures involving more than 20 social scientists to code the
173
data. The data were collected from a variety of open-source
174
materials in multiple languages, including English, Arabic,
175
French, and Spanish. The coders mainly relied on primary
176
sources, including jihadist propaganda and social media posts,
177
publicly available intercepted documents produced by these
178
organizations, and declassiﬁed intelligence reports. Examples
179
of primary sources we relied upon include statements issued
180
by the media arm of AQ in the Islamic Maghreb (Al-Andalus
181
Media Foundation), ﬁrst-hand accounts of troop movements
182
in Idlib Governorate posted to Twitter in December 2015, and
183
U.S. Department of State announcements of additions to its
184
list of designated terrorists. The coders also consulted sec-
185
ondary sources, including books, journal articles, newspapers
186
and news sites, and other publications. Coders factored in
187
the credibility and possible biases of each source consulted
188
and sought to corroborate all factual claims across multiple
189
independent sources. The coding process included meetings
190
to harmonize the data via discussion when coders coded data
191
differently. Values for some missing properties were ﬁlled
192
in using a set of assumptions. Missing start/end dates of a
193
terrorist’s membership were manually set to be consistent with
194
the known relationships of the terrorists. If a relationship start
195
date was unknown, we set the start date of the relationship to
196
the start date of one of the two members who next joined the
197
network. A similar adjustment was made for relationship end
198
dates. We remove isolated vertices in the network. In total,
199
the number of vertices and relationships ﬁlled in by such
200
assumptions is 14.6% and 32.05%, respectively, for the ISIS
201
and AQ datasets.
202
Features: We developed a feature vector for each network
203
Nt. We use fv(Nt, SF) to denote the feature vector extracted
204
for Nt for a given set SF of features. We developed a total of
205
3738 features consisting of 534 basic features and 3204 time-
206
lagged variants of the basic features. Because our data detail
207
the category of each individual, and their rank and role within
208
the network, we can construct a variety of novel features.
209
We are able to treat terror groups, not as unitary actors, but
210
rather as collections of individuals who exhibit considerable
211
heterogeneity and dynamics over time. Our ability to construct
212
a range of novel network features can help guide future work
213
aiming to predict and understand the behavior of terror groups.
214
Our basic features include weight-based features (WbFs),
215
restricted network-based features (RbFs), group-based features
216
(GbFs), and cluster-based features (CbFs). WbFs assign a
217
weight to each node (e.g., role, a centrality score, and a
218
combination of rank and centrality score) and then aggre-
219
gate them together for the network in different ways (e.g.,
220
mean/median of these node weights with respect to all nodes;
221
mean/median/expected value of these node weights with
222
respect to nodes belonging to a given functional category).
223
RbFs look at the characteristics of the induced subnetwork that
224
results when only certain functional categories are considered,
225
e.g., operational. It includes features, such as the number
226
of k-SCCs of size k or more with varying k, the average
227
diameter of k-SCCs, the average standard deviation of k-SCCs,
228
the density of various subnetworks induced by restricting
229
to speciﬁc functional categories, and more. GbFs look at
230
sets of nodes belonging to a given functional category (e.g.,
231
all operational nodes) and compute the group PageR-
232
ank (GPR; which we deﬁne), group betweenness centrality
233
(GBC) [9], and various combinations of such metrics. CbFs
234
include global clustering coefﬁcients for both the directed and
235
undirected versions of the networks, different kinds of cluster-
236
ing coefﬁcients obtained by focusing on speciﬁc subnetworks.
237
Tables I–IV summarize the basic features that we introduced.
238
Every row of one of these tables contains the name of a class of
239
features, together with a brief description and an example of a
240
concrete feature from that class. The formal deﬁnitions of the
241
features can be found in Appendix A. For the sake of brevity,
242
we use φi(t, F) with i ∈[1, 21] and F ⊆C to refer to the
243
different kinds of features whose name and description are
244
provided in the table. In most cases, F is a singleton—so
245
we simply write φi(t, f ) with f ∈C. Some features take an
246
additional parameter, such as a natural number k, as input—so
247
we may write φi(t, f, k). Time-lagged variants of these four
248
types of basic features are also deﬁned, because, for instance,
249
the lethality of a network may depend upon the values of these
250
basic features from past networks. Deﬁnitions can be found in
251
Appendix A.
252
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

4
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
TABLE II
FEATURES BASED ON RESTRICTIONS OF THE NETWORK. DEFINITIONS 4–13 CAN BE FOUND IN APPENDIX A-B
TABLE III
GbFs. DEFINITIONS 14–17 CAN BE FOUND IN APPENDIX A-C
TABLE IV
CbFs. DEFINITIONS 18–21 CAN BE FOUND IN APPENDIX A-D
III. PLATO ALGORITHM
253
Algorithm 1 shows our PLATO algorithm to predict the
254
number of attacks that a terrorist group will carry out at the
255
next time point. As mentioned earlier, our data consist of a
256
time-series of networks N1, N2, . . . Each network N j is in
257
existence during an associated time interval I j. Without loss of
258
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

CHEN et al.: LINKING TERRORIST NETWORK STRUCTURE TO LETHALITY: ALGORITHMS AND ANALYSIS OF AQ AND ISIS
5
Algorithm 1 PLATO With Ensemble and Late Fusion
Input: Set
of
features
SF;
Training
dataset
T Sx
=
{⟨f v(N1, SF), A1+x⟩, . . . , ⟨f v(Nt−x, SF), At⟩}; New net-
work Nt+1; Ensemble of n Regression Model types E =
{RM1, . . . , RMn}; Feature window size wF < t −x, Train-
ing window size wT ≤wF; Feature selection approach FA;
Number of top features k.
Output: Estimated number of attacks At+1+x for Nt+1+x;
PCC score.
1: groundTruth = ⟨A1+x, . . . , At⟩;
2: prediction[ j] = ∅, result[ j] = ⊥, 1 ≤j ≤n;
3: i = 0;
4: for SWi = {⟨f v(Nℓ, SF), Aℓ+x⟩| ℓ∈[i + 1, i + wF]}
do
5:
if FA = I FS then
6:
SFi j = IterativeFeatureSearch(SWi, E, SF, wT );
7:
else
8:
SFi j = Select top-k features from SF using FA for
SWi;
9:
end if
10:
T W = {⟨f v(Nl, SF), Al+x⟩| l ∈[i +1+wF −wT , i +
wF]}
11:
for each regressor type RM j ∈E in parallel do
12:
T Wi j = {⟨f v(Nl, SFi j), Al+x⟩|⟨f v(Nl, SF), Al+x⟩∈
T W}
13:
RM∗
j
= Select best parameter setting for RM j on
T Wi j;
14:
if i + wF < t −x then
15:
result[ j] = Apply RM∗
j to f v(Ni+wF +1, SFi j);
16:
prediction[ j] = prediction[ j] ⊕j result[ j];
17:
i = i + 1;
18:
else
19:
result[ j] = Apply RM∗
j to f v(Nt+1, SFi);
20:
break;
21:
end if
22:
end for
23: end for
24: W
=
argmax
Ws.t.n
i=1W[i]=1
PCC(n
j=1W[ j] · prediction[ j],
groundTruth);
25: score
=
PCC(n
j=1W[ j]
·
prediction[ j],
groundTruth);
26: resultl f = n
j=1W[ j] · result[ j];
27: return resultl f , score
generality, we assume that the interval I j precedes the interval
259
I j+1 for all j.
260
Suppose the network in existence now is network Nt; i.e.,
261
networks N1, . . . , Nt−1 are from the past, and the current
262
network is Nt. A new network Nt+1 comes into effect when
263
a change occurs (e.g., a terrorist is captured or killed, some
264
relationships between terrorists change, we have information
265
about some new terrorists, and so on). The idea is that PLATO
266
will be used to predict the lethality of a new network Nt+1
267
as soon as the new network comes into being. For instance,
268
the AQ network Ni changed on May 2011 when Osama bin
269
Laden was killed. PLATO could be applied immediately on
270
the new network Ni+1 resulting from the change of Osama
271
bin Laden’s status from “alive (and free)” to “dead.” Though
272
the nodes and edges in this new network may be the same
273
as in the previous one, it is considered different, because a
274
property of one node (bin Laden) has changed. The ability to
275
produce a new predictions when there are structural changes
276
in the network, new edges or nodes are added, or simply a
277
change in roles within the network, and a lower ranked leader
278
is promoted, opens new possibilities for making more dynamic
279
forecasts of terror group lethality.
280
Suppose
the
networks
in
{N1, . . . , Nt}
are
known,
281
Nt+1
is
the
new
network,
and
we
are
interested
282
in
estimating
At+1+x,
the
number
of
attacks
in
the
283
future
network
Nt+1+x.
PLATO
takes
a
training
set
284
TSx
=
{⟨fv(N1, SF), A1+x⟩, . . . , ⟨fv(Nt−x, SF), At⟩}
285
consisting of feature vectors of the ﬁrst t −x networks
286
we have, along with the corresponding numbers of attacks
287
carried out 1 + x networks in the future (but never going
288
beyond network Nt), and tries to predict how many attacks
289
the network Nt+1+x will carry out. One challenge in making
290
this prediction is that we do not know how many and which
291
past networks in {N1, . . . , Nt} should be considered. The
292
reason is that we do not know which of the networks in
293
{N1, . . . , Nt} provides an important signal for predicting
294
Nt+1+x. For instance, does the number of attacks carried out
295
by Nt+1 depend on just Nt? On just Nt−2, Nt−1 and Nt?
296
Additionally, we do not know which subset of features are
297
relevant.
298
PLATO handles these challenges using a sliding window
299
(Line 4) of wF networks from the training set TSx in each iter-
300
ation of the main for loop (Lines 4–23). For each sliding win-
301
dow SWi, it iteratively selects relevant features (Lines 5–9).
302
Feature selection can be done using any method—in our
303
experiments, we consider principal component analysis (PCA)
304
and mutual information (MI) as well as a feature selection
305
approach that we deﬁned called iterative feature search (IFS)
306
(Line 6). The best features for each regressor-type RM j are
307
stored in the set SFi j. In the case of PCA and MI, these
308
sets of features are the same for each regressor. In the case
309
of IFS, they can change as IFS selects the best features by
310
considering the regression model type used. More details on
311
IFS are provided at the end of this section.
312
PLATO then creates a training set TW consisting of the
313
feature vectors/number of attacks of the last wT networks from
314
TSx in SWi (Line 10). In Lines 11–22, PLATO trains each
315
regression model type [e.g., lasso versus ridge versus support
316
vector regression (SVR)] in parallel and does hyperparameter
317
optimization to create the best regressors RM∗
j for each
318
regressor type (Line 13). Each regression model type in the
319
ensemble is trained using the feature vectors TWi j (i.e., the
320
training set restricted to the selected features). If the sliding
321
window is not the last, i.e., there are still networks that have
322
not been considered in the training dataset, the regression
323
model RM∗
j is used to predict the number of attacks Ai+wF+1+x
324
using the network following the sliding window (Line 15),
325
and the prediction list is updated with this new prediction
326
(Line 16). Otherwise, RM∗
j is applied to the test network Nt+1,
327
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

6
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
Fig. 2.
Execution of PLATO. (a) First iteration. (b) Second iteration. (c) Last
iteration.
thus making a prediction of At+1+x (Line 19). In particular,
328
in Line 16, the best jth regression model type generates a
329
prediction, and the ⊕j operator concatenates the vector of
330
results (prediction vector) generated by the jth regression
331
model type. The ⊕j reﬂects this concatenation operator.
332
When we get to Line 24, the situation is as follows: the
333
best regressor RM∗
j for each regressor-type RM j has made
334
the same number of predictions, each stored in prediction[ j]
335
(whose size is the same as that of groundTruth). PLATO tries
336
to ﬁnd an assignment of weights W (such that the weights
337
sum to 1) for the regressors in the ensemble, so that PCC
338
of the linear combination of the predictions made by the
339
ensemble and the ground truth is the highest possible. The
340
weights are discovered using a grid search that considers all
341
combinations of weights in the increments of 0.2. PLATO
342
eventually returns the PCC corresponding to the best weight
343
assignment (Line 25) along with the predicted number of
344
attacks At+1+x for network Nt+1+x (Line 26).
345
Fig. 2 illustrates how PLATO works when wF
= 3,
346
wT
= 2, and x = 1, and the ensemble consists of just
347
one regression model, showing the ﬁrst two iterations of the
348
algorithm [Fig. 2(a) and (b)] and the last one [Fig. 2(c)] on
349
a toy example. At each iteration, a subset SFi j of features
350
(highlighted in green) is selected and used by the regression
351
model to make a prediction of the number of attacks carried
352
out one time point ahead.
353
Selecting Features via Iterative Search: Computing the set
354
of best features is an integral part of PLATO. To do this,
355
we deﬁned a bottom-up greedy algorithm called iterated fea-
356
ture search (Function 1) that iteratively selects features as long
357
as predictive accuracy increases. Intuitively, a set of features
358
are good if they allow us to accurately predict the number
359
of attacks occurring in the future. To this end, Function 1
360
considers the regression model type during its execution and,
361
for each model RM j, keeps track (via the BestSet[ j] vector)
362
of the features that allow RM j to generate the highest PCC
363
score. The latter is found upon calling the ﬁndPath subroutine,
364
which takes as input, a set of features SF, a regression model-
365
type RM j, a set of features SFb, and PCC Score obtained
366
by RM j using the features in SFb, and then extends SFb as
367
much as possible (i.e., till Score increases). Initially, the set
368
of features is empty, and the score is set to 0 (Line 3). The
369
set is then updated by exploring all unexplored features in SF
370
and adding to it the feature fb that, together with those in
371
SFb, generates the highest score (Line 7). The score is then
372
updated according to the predictionScore (Line 8) procedure.
373
The process is continued until no more features can be added
374
to SFb (Lines 9–12).
375
IFS relies on the predictionScore subroutine to detect the
376
most relevant features. This procedure takes the regression
377
model type and a set of features as input and returns the
378
average PCC that is computed as follows: the set TS is split
379
in a training window TW of size wT (Line 21) and a test
380
set TestNtw of size wF (Line 24). The subroutine trains the
381
regression model RM on the feature vectors TWi (restricted
382
to the features in SFb) and uses the resulting model RM∗to
383
make predictions on the restricted test set (Line 24). The PCC
384
of the predicted values and the ground truth is then computed
385
(Line 26). The average of these scores, obtained by repeating
386
the abovementioned operations for all consecutive training
387
windows of size wT in TS, is eventually returned (Line 29).
388
IV. EXPERIMENTAL EVALUATION
389
This section reports on our experimental assessment of
390
PLATO’s performance. We also show that PLATO identiﬁes
391
features that are important for the prediction. We conclude
392
this section by discussing results on predicting the density
393
of attacks, instead of number of attacks and extending the
394
ensemble of regression models used by PLATO.
395
We analyzed the impact of various parameters on the
396
performance of PLATO: the feature window size (wF =
397
{3, 4, 5, 10, 15, 20, 25}), the training window size (wT
=
398
{3, 4, 5, 6, 10, 15, 20, 25}), the number of features to be
399
selected (k = {10, 20, 30, 40, 50}), the temporal offset (x =
400
{0, 1, 2, 3, 4, 5}), three feature selection approaches (MI, PCA,
401
and our IFS), and an ensemble of six regression models:
402
ridge [10], lasso [11], random forest [12], linear, polynomial,
403
and radial basis function (RBF) SVR [13]1.
404
Because classic k-fold cross validation may end up using
405
networks from the future (in training folds) to predict the
406
number of attacks for networks in the past (in the test fold),
407
we used a standard rolling window technique that ensures that
408
networks in the test data always occur after the networks in
409
the training data. The baseline, named BAS, splits the data
410
into a training set containing the ﬁrst 80% of the time-indexed
411
networks and a test set with the last 20%. Predictions are made
412
for the last 20% of the data, and a PCC is calculated using
413
these predictions. Given a feature selection method X (either
414
MI or PCA), our baseline results BAS used four well-known
415
regression models (lasso, SVR, ridge, and random forest)
416
using X. The result reported by BAS is the best result obtained
417
by running these eight models in conjunction with X—hence,
418
this is a strong baseline. The only past work linking network
419
structure to lethality [1], [2] used a very small number of
420
features (already included in our BAS baseline) and used a
421
very simple linear regressor. BAS already does more than this
422
past work and, furthermore, augments it with eight models.
423
Table V shows the PCC score of each approach using
424
various feature selection methods. For readability, for each
425
1All experiments were run on a Linux cluster of Intel Xeon nodes with
RAM ranging from 16 to 64 GB. All the algorithms were written in Python.
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

CHEN et al.: LINKING TERRORIST NETWORK STRUCTURE TO LETHALITY: ALGORITHMS AND ANALYSIS OF AQ AND ISIS
7
TABLE V
BEST PCC SCORES FOR BASELINE BAS AND PLATO
Function 1 Iterative Feature Search
Input:
Training dataset T Sx = {⟨f v(N1, SF), A1+x⟩, . . . ,
⟨f v(NwF , SF), AwF+x⟩}; Ensemble of n Regression Model
types E = {RM1, . . . , RMn}; Set of features SF; Sliding
window size wT .
Output:
Top features BestSet[ j] ⊆SF for each RM j ∈E.
1: BestSet[ j] ←∅, BestScore[ j] = 0, 1 ≤j ≤n
2: for each regressor type RM j ∈E in parallel do
3:
ﬁndPath(SF, RM j, BestSet[ j], BestScore[ j]);
4: end for
5: return BestSet
6: procedure ﬁndPath(SF, RM j, SFb, Score)
7: fb = argmax
f ∈SF\SFb
predictionScore(RM j, SFb ∪f )
8: CurrentScore = predictionScore(RM, SFb ∪fb);
9: if CurrentScore > Score then
10:
SFb = SFb ∪fb
11:
Score = CurrentScore
12:
ﬁndPath(RM j, SF, SFb, Score)
13: else if Score > BestScore[ j] then
14:
BestSet[ j] ←SFb
15:
BestScore[ j] = Score
16: end if
17: SF ←SF \ { fb}
18: procedure predictionScore(RM, SFb)
19: avgScore = 0;
20: i = 0;
21: for
T W = {⟨f v(Nl, SF), Al+x⟩|l ∈[i + 1, i + wT ]} ⊆
T Sx
do
22:
T Wi = {⟨f v(Nl, SFb), Al+x⟩| ⟨f v(Nl, SF), Al+x⟩
∈
T W}
23:
RM∗= Select best parameter setting for RM on T Wi;
24:
Test Ntw = {⟨f v(Nl, SF), Al+x⟩| l ∈[i +wT +1, i +
wF]}
25:
predictions = Apply RM∗to { f v(T est Ntw, SFb)};
26:
avgScore = avgScore + PCC(predictions,
groundTruth);
27:
i = i + 1;
28: end for
29: return avgScore/i
dataset and temporal offset, we highlight the best PCC score in
426
red. PLATO[MI] and PLATO[PCA] have the best scores, with
427
the former outperforming the latter by a negligible amount.
428
PLATO[IFS] obtains comparable scores as well. However,
429
we note that both PLATO[PCA] and PLATO[MI] are faster
430
TABLE VI
PAIRED t-TEST COMPARISONS OF PLATO VERSUS BASELINE
than PLATO[IFS] (one to two days versus two to three
431
weeks). To compare PLATO with the baseline in an unbi-
432
ased manner, we implemented two-tailed paired Students t-
433
tests and found that PLATO has signiﬁcantly higher Pearson
434
coefﬁcients than the baseline across groups, temporal offsets,
435
and feature-selection methods (all mean differences >0 and
436
P < 1.0e −12, see Table VI).
437
A. Statistical Analysis
438
In this section, we provide an analysis showing that PLATO
439
identiﬁes features that are important for prediction. For both
440
PLATO[PCA] and PLATO[MI] and for each temporal offset
441
x ∈[0, 5], we selected the 20 most relevant features by
442
counting the number of times they were selected across all
443
training windows and ranked them from 1 to 20. That is,
444
every time a feature was selected as being a relevant feature
445
in a training window, we increased the count of that feature.
446
Hence, for each dataset (either AQ or ISIS) and for each
447
feature selection approach (either PCA or MI), we obtained
448
six lists of most relevant features (one for each value of x).
449
A total of 24 lists of features was, thus, obtained, each
450
consisting of 20 features. We then introduced the notion of
451
rank and occurrence to measure the frequency of a given
452
feature with respect to the different values of the temporal
453
offset x. In particular, rank is the average of the six individual
454
ranks obtained for each value of x, while occurrence is the
455
percentage of times that a given feature occurs over the
456
different temporal offsets (e.g., a feature has occurrence equal
457
to 100% if it is in the list of the top-20 features for each value
458
of x).
459
Table VII reports the rank and occurrence of the top features
460
with respect to the two datasets for PLATO[PCA]. It turned
461
out that, in the case of PLATO[PCA], for all values of x, all
462
the top ranked features rely on one SCC, regardless of the
463
dataset used. Moreover, Table VII shows that most of these
464
features involve the category operational, followed by
465
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

8
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
TABLE VII
OCCURRENCE (OCC.) AND RANK OF THE TOP-FEATURES USED BY PLATO[PCA]
leadership. In fact, both datasets share the same top-four
466
features—to ensure readability, the ranks of ﬁrst-, second-,
467
third-, and fourth-ranked features are highlighted in green,
468
yellow, orange, and red, respectively—and, since these features
469
involve the category operational and occurrence is 100%,
470
it means that operational is used for all values of the
471
temporal offset x.
472
1) Macrofeatures: In the case of PLATO[MI], the “top”
473
features look very heterogeneous. But, if we disregard the
474
time lag, the “top” features become more homogeneous, which
475
suggests that the same features are in play, but at different
476
time lags. Therefore, to analyze the features selected by
477
PLATO[MI], which according to Table V performs better than
478
the other approaches, we grouped the most relevant features
479
into macrofeatures. Two features were considered to be in
480
the same group if they only differ in the time lag or if they
481
only distinguish between features using different properties
482
of nodes (e.g., alive and jail). Speciﬁcally, let φπ(t, f ) be a
483
feature evaluated on the network Nt restricted to the functional
484
category f and to the nodes, such that property π is true
485
(where π ∈{alive, jail, free}). Let π(t, f, τ) be the τ-lagged
486
variant of a φπ(t, f ); the lagged variant uses the information
487
provided by the network Nt−τ; i.e., its value is equal to
488
φπ(t −τ, f ). We, thus, collapsed all time-lagged features
489
π(t, f, τ), for τ ∈{1, 2, 3} and π ∈{alive, jail, free}, of a
490
given feature into a single macrofeature (t, f ). We obtain
491
66 macrofeatures for AQ and ISIS using PLATO[MI]. The
492
original features from which a macrofeature is obtained are
493
said to be compatible with the macrofeature [e.g., φπ(t, f ) is
494
compatible with (t, f )].
495
Given a dataset and the six lists of top-20 features (one for
496
each value of x) for that dataset, we measure the importance
497
of macrofeatures as follows. For each macrofeature mf and
498
rank r ∈[1, 20], let mf(r) be the percentage of lists out of six
499
in which mf is compatible with a top-h feature in the list, with
500
h ≤r. This means that if a macrofeature mf is compatible with
501
every top-1 feature in all the lists of most relevant features for
502
a dataset, then mf(r) = 100% for each r ∈[1, 20]. Then, the
503
importance of mf is given by the integral of mf(r) between
504
r = 1 and r = 20, that is, the area under the cumulative
505
percentage mf(r).
506
Table VIII reports the top-ten highest ranked macrofeatures
507
for AQ and ISIS, respectively. For each dataset, they are
508
ranked from the most important to the least important. Due
509
to space constraints, we
report the complete list of the
510
highest-ranked macrofeatures in the Supplemental Material.
511
The subnetworks of AQ involved in logistical support and
512
PCs are consistently among the most predictive macrofeatures.
513
As with the PLATO[PCA] results, the leadership and opera-
514
tional subnetworks are most important for predicting future
515
ISIS violence. Moreover, in the case of AQ, the average
516
degrees of nodes in various subnetworks are strongly linked
517
with lethality, as are properties associated with the diameters
518
of the SCCs, as well as other centrality measures. This is also
519
mirrored in the case of ISIS where degrees and diameters of
520
strongly connected subnetworks play an important role.
521
Due to space limitations, additional analytic results we
522
performed are reported in the Supplemental Material.
523
B. Density Prediction and Ensemble Extension
524
As different networks can last for different time periods, it is
525
of interest to predict the density of attacks, i.e., the number
526
of attacks per month when the network is valid. Predicting
527
density is complementary to predicting the number of attacks
528
and is of interest to analysts who cannot estimate the duration
529
of a network. We used PLATO to predict the number of attacks
530
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

CHEN et al.: LINKING TERRORIST NETWORK STRUCTURE TO LETHALITY: ALGORITHMS AND ANALYSIS OF AQ AND ISIS
9
TABLE VIII
MACROFEATURES FOR PLATO[MI] FOR AQ (LEFT) AND ISIS (RIGHT) RANKED BY IMPORTANCE
TABLE IX
BEST PCC SCORES FOR PLATO PREDICTING DENSITY AND FOR PLATO WITH GCN IN THE ENSEMBLE
per month, as time intervals of our networks are multiple
531
of one month. This makes no difference for the prediction
532
for ISIS, as the duration of each network in ISIS is about
533
one month. For AQ, the PCC scores of the PLATO[MI] and
534
PLATO[PCA] variant predicting the density are shown in
535
the third and fourth rows of Table IX, respectively. Density
536
predictions by PLATO are more accurate, improving the PCC
537
scores of 3.4% and 4.1% on average as opposed to predicting
538
the raw number of attacks (see Table VI).
539
Finally, we analyzed the impact of augmenting the PLATO
540
ensemble (consisting of six regression models) with a graph
541
convolution network (GCN) approach [14] appropriate for
542
our network-based data. Although using advanced GCNs can
543
avoid using application-speciﬁc features, the results shown in
544
Table IX (rows from ﬁfth to eighth) show that adding GCN
545
to the ensemble leads to a very small improvement that is
546
not statistically signiﬁcant (all paired Students t-tests give
547
p-values > 0.13 with 95% CI) for both ISIS and AQ for
548
attacks or density prediction.
549
V. LIMITATIONS AND FUTURE WORK
550
While our AQ and ISIS data are among the ﬁrst longitudinal
551
datasets on these terror groups, we (like most researchers)
552
are limited, because much data on these groups are classiﬁed.
553
Though strong efforts were made to harmonize differences in
554
the data collected by different coders, we do make assumptions
555
on some missing data as detailed in Section II. Measuring
556
lethality as the number of attacks as we have done is valid, but
557
also a limitation. Measuring it via other metrics (e.g., number
558
of casualties and economic damage) offers possible avenues
559
for future work.
560
Finally, embedding lethality computations into algorithms
561
for reshaping terror networks need to be studied further. Past
562
work suffered from being unable to measure the dependent
563
variable, i.e., efﬁcacy of reshaping efforts [1], [2]. These
564
efforts may also be aided by parallel studies on how to shape
565
corporate board networks where data (e.g., when a person
566
joined or left a board) are more readily available and where
567
related dependent variables (e.g., share price) are also publicly
568
available.
569
VI. CONCLUSION
570
Our work contributes to the growing body of research
571
on forecasting political violence [15], [16], [17], [18]. Our
572
model, based on network features within terror groups, adds
573
to the existing research, which has found that including
574
network information about violent groups improves predictive
575
performance [19], [20]. We extend these efforts by leveraging
576
novel data about not only the nodes and edges within AQ
577
and ISISnetworks, but also node attributes (e.g., the rank and
578
role of individuals) and category types (e.g., logistical and
579
operational). Our ability to accurately predict the lethality of
580
AQ and ISIS suggests that there may be future gains to be
581
made by collecting and leveraging data on such networks.
582
Additional results (included in the Supplemental Material)
583
also suggest potential policy implications. For the top-ranked
584
features for PLATO[MI] we assessed the relationship between
585
the number of attacks via bivariate Poisson regression account-
586
ing for the robust variance and multiple hypothesis testing
587
(through the Bonferroni correction). For AQ, we ﬁnd that
588
the coefﬁcient for the features related to the average degree
589
of the PC subnetworks is generally statistically signiﬁcant
590
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

10
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
and positive. Put another way, AQ’s PCs network becoming
591
more connected is associated with AQ carrying out more
592
violence. This might explain why previous work does not ﬁnd
593
an association between propaganda output and the number of
594
attacks carried out [21]. Previous works have not considered
595
the impact of the members of the PCs network, so it is possi-
596
ble scholars have overlooked important factors. For instance,
597
it may be that changes in the connections between the mem-
598
bers responsible for propaganda inﬂuences group effective-
599
ness, possibly having a lagged impact. However, more work
600
is needed to more fully assess the causality of this relationship.
601
APPENDIX A
602
DEFINITIONS OF FEATURES
603
We ﬁrst provide the deﬁnitions of the basic features listed in
604
Tables I–IV and then discuss, in more detail, the time-lagged
605
features. Recall that Nt = ⟨Vt, Et, πt, catt⟩denotes a network
606
existing during the time interval It.
607
A. Weighted-Based Features
608
The ﬁrst class of features provides insights about the frac-
609
tion of people at time t belonging to the subnetwork associated
610
with a speciﬁc functional category f (e.g., operational).
611
Deﬁnition 1 (Functional Category Fraction):
612
φ1(t, f ) = |{v | v ∈Vt, f ∈catt(v) }|
|Vt|
.
613
Next, we deﬁne two classes of features, which are parame-
614
trized by a weight function W : V →N. For instance, we may
615
choose W(v) to be the vertex rank by deﬁning W(v) equal to
616
π(v, rank) for each v ∈V .
617
The ﬁrst family of features consists of the average of the
618
weights W(v) of people v in category f in the network Nt.
619
Deﬁnition 2 (Average Category Weight):
620
φW
2 (t, f ) =

v | v∈Vt, f ∈catt(v) W(v)
|{v | v ∈Vt, f ∈catt(v)}|.
621
The second class of features is the sum of the weights W(v)
622
of people in category f divided by the sum of the weights of
623
all people in the network at time t.
624
Deﬁnition 3 (Normalized Category Weight):
625
φW
3 (t, f ) =

v | v∈Vt, f ∈catt(v) W(v)

v | v∈Vt W(v)
.
626
Thus, if function W returns the rank, i.e., W is the function
627
r(v) = π(v, rank), we obtain φr
2(t, f ), which is the average
628
rank of people in category f in the network Nt. Likewise,
629
φr
3(t, f ) is the sum of the rank of people in category f divided
630
by the sum of the ranks of all people in Nt.
631
The next two features are obtained by doing the same as
632
mentioned earlier with PageRank [22] instead of rank. Let
633
PR(v) be the PageRank of vertex v. Then, φPR
2 (t, f ) is the
634
average PageRank of people in category f in the network at
635
time t, while φPR
3 (t, f ) is the sum of the PageRanks of people
636
in category f divided by the sum of the PageRanks of all
637
people in the network at time t.
638
Similarly, we deﬁne φg
2(t, f ) and φg
3(t, f ) where the weight
639
function g(v) = PR(v) · r(v) is used.
640
In summary, using φW
2 (t, f ) and φW
3 (t, f ), we deﬁned six
641
features, three for each group, where the weight function W(·)
642
is one of the following: rank r(·), PageRank PR(·), and the
643
product g(·) of rank and PageRank.
644
B. Features Based on Restrictions of the Network (RbF)
645
We use the concept of restriction of a network with respect
646
to a functional category to deﬁne features. The restriction
647
of N with respect to f
∈C, denoted as Nt[ f ], is the
648
subnetwork induced by the nodes whose functional categories
649
include f ; functions π and cat are then restricted to nodes
650
in Nt[ f ].
651
We start by deﬁning features measuring the diameter of
652
our networks at different time points, possibly restricting the
653
network to some features. However, the diameter of a graph
654
is inﬁnite if it is not strongly connected, and this may happen
655
for the kinds of networks we are dealing with. Thus, to deﬁne
656
features returning ﬁnite values, we will consider SCCs of
657
different sizes.
658
Given a network N, we use SCC(N) to denote the set
659
of SCCs in N. Moreover, we use SCC(N, k) to denote the
660
set of SCCs of size k (i.e., containing k vertices). Given
661
N = ⟨V, E, π, cat⟩, we say that N is strongly connected if
662
SCC(N, |V |) is N itself.
663
Deﬁnition 4 (k-SCCs):
664
φ4(t, f, k) =

k′∈[k,|Vt[ f ]|
SCC(Nt[ f ], k′)
.
665
Feature φ4(t, f, k) is the number of SCCs of Nt[ f ] of
666
size greater than or equal to k. In the following, we use
667
kmax to denote the size of the largest SCCs of Nt[ f ]. Thus,
668
φ4(t, f, k) > 0 for k ≤kmax; 0 otherwise. Moreover, if kmax =
669
|Vt[ f ]|, then φ4(t, f, k) = 1—the unique largest connected
670
component is Nt[ f ] itself.
671
Let dN (u, v) be the shortest distance (i.e., number of
672
edge hops) between vertices u and v in a network N. The
673
diameter of N
= ⟨V, E, π, cat⟩is deﬁned as D(N) =
674
maxu,v∈V dN (u, v); it is inﬁnite if N is not strongly connected.
675
Deﬁnition 5 (Average k-SCC Diameter):
676
φ5(t, f, k) = avg{|D(N)| s.t. N ∈SCC(Nt[ f ], k)}.
677
Feature φ5(t, f, k) is the average diameter of the SCCs of
678
Nt[ f ] having size k. It is worth noting that if N is strongly
679
connected, then φ5(t, f, |V |) coincides with the diameter of
680
|V|. Moreover, φ5(t, f, k) is ﬁnite for each k lower than or
681
equal to the size kmax of the largest SCCs of Nt[ f ].
682
The last family of features based on the concept of diameter
683
considers the standard deviation σ of the diameters of SCCs
684
for the network Nt[ f ]:
685
Deﬁnition 6 (Standard Deviation SCC Diameters):
686
φ6(t, f ) = σ{φ5(t, f, k) | k ≤kmax}.
687
The next family of features considers the density, instead
688
of the diameter. Feature φ7(t, f ) is the density of Nt[ f ].
689
Deﬁnition 7 (Functional Subnetwork Density):
690
φ7(t, f ) = |{(u, v) | (u,l, v) ∈Et[ f ]}|
|Vt[ f ]|2
.
691
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

CHEN et al.: LINKING TERRORIST NETWORK STRUCTURE TO LETHALITY: ALGORITHMS AND ANALYSIS OF AQ AND ISIS
11
The next family of features, φ8(t, f ), represents the prob-
692
ability that a random vertex v in Nt[ f ] is internally bicon-
693
nected; i.e., it is involved in a triangle with two neighbors
694
u′ and u′′ in Nt[ f ], which are connected to other vertices in
695
Nt[ f ]. We use IB to denote the set of vertices in Nt[ f ] that
696
are internally biconnected.
697
Deﬁnition 8 (Internally Biconnected Fraction):
698
φ8(t, f ) = |{v | v ∈Vt[ f ] and v ∈IB|
|Vt[ f ]|
.
699
Similarly, feature φ9(t, f ) will represent the probability that
700
a random vertex v in Nt[ f ] forms a pentagon involving two
701
neighbors u and u′ outside Nt[ f ] (i.e., u and u′ belong to
702
Nt[{C \ f }], the restriction of the network to the functional
703
categories different from f ). More formally, given N
=
704
⟨V, E, π, cat⟩and N[ f ] = ⟨V [ f ], E[ f ], π[ f ], cat[ f ]⟩, we
705
say that v ∈N[ f ] is externally biconnected with respect to
706
N[ f ] if the set of edges of the whole network N contains the
707
edges (v, u′), (v, u′′), (u′, w′), (u′′, w′′), and (w′, w′′), where
708
all the vertices are distinct and both u′ and u′′ belongs to
709
V \ V [ f ]. We use EB to denote the set of vertices in Nt[ f ]
710
that are externally biconnected.
711
Deﬁnition 9 (Externally Biconnected Fraction):
712
φ9(t, f ) = |{v | v ∈Vt[ f ] and v ∈EB|
|Vt[ f ]|
.
713
The features deﬁned earlier rely on restricting the network
714
to functional categories. More speciﬁc kinds of restriction are
715
considered in the following.
716
We deﬁne φa¬ j
i
(t, f ) with i
∈{4, . . . , 9} as the ver-
717
sions of φi(t, f ), where we use the restriction of net-
718
work N to the vertices v, such that π(v, alive) = true
719
and π(v, jail) = false; that is, we only focus on peo-
720
ple who are alive and not in jail. That is, given N
=
721
⟨V, E, π, cat⟩, features φa¬ j
i
(t, f ) are deﬁned using the net-
722
work N[ f, aj] =
⟨V [ f, aj], E[ f, aj], π[ f, aj], cat[ f, aj]⟩
723
instead of N[ f ], where V [ f, aj] = {v | v
∈
V,
f
∈
724
catt(v) π(v, alive)
=
true, π(v, jail)
=
false}, E[ f ]
=
725
(V [ f, aj]×L×V [ f, aj])∩E, and π[ f, aj] and cat[ f, aj] are
726
the restrictions of functions π and cat to the domain V [ f, aj].
727
Likewise, we deﬁne features focusing only on people who
728
are alive and use φa
i (t, f ) with i ∈{4, . . . , 9} to denote them,
729
which are versions of φi(t, f ), where we use the restriction
730
of network N to the vertices v, such that π(v, alive) = true.
731
Let degin
N (v) and degout
N (v) be the in- and out-degrees
732
of vertex v with respect to network N, respectively. The
733
following two features represent the average in- and out-
734
degrees (calculated considering the edges of N at time t) of
735
vertices belonging to the restriction of network N with respect
736
to f at time t, respectively.
737
Deﬁnition 10 (Functional In-Degree):
738
φ10(t, f ) = avg

degin
Nt (v)
 v ∈Vt[ f ]

.
739
Deﬁnition 11 (Functional Out-Degree):
740
φ11(t, f ) = avg

degout
Nt (v)
 v ∈Vt[ f ]

.
741
In contrast to the two features deﬁned earlier, the following
742
features consider the restriction of the network to all the
743
functional categories except that given in input.
744
Deﬁnition 12 (Complementary Functional In-Degree):
745
φ12(t, f ) = avg

degin
Nt (v)
 v ∈Vt[C \ { f }]

.
746
Deﬁnition 13 (Complementary Functional Out-Degree):
747
φ13(t, f ) = avg

degout
Nt (v)
 v ∈Vt[C \ { f }]

.
748
C. Group-Based Features
749
Given Nt
= ⟨Vt, Et, πt, catt⟩and a set S of vertices
750
(e.g., the set Vt[ f ] of vertices whose set of functional cat-
751
egories includes f ), we deﬁne the GPR of a set of nodes as
752
follows:
753
GPR(S) = (1 −δ) · |S|
|Vt|
+ δ ·
⎛
⎜⎜⎜⎜⎝

(u,l,v)∈Et,
u∈V\S,
v∈S
GPR({u})
degout
Nt (u)
⎞
⎟⎟⎟⎟⎠
754
where degout
Nt (u) is the out-degree of vertex u in Nt, and δ is a
755
damping factor as in the original deﬁnition of PageRank [22].
756
Note that the GPR of a singleton {v} coincides with the
757
PageRank of v itself, that is, GPR({v}) = PR(v).
758
The deﬁnition of GPR allows us to deﬁne a family of feature
759
for Nt that depends on the choice of the set S. Speciﬁcally,
760
we deﬁne feature φ14(t, f ) as the GPR of the set of vertices
761
whose functional category is f .
762
Deﬁnition 14 (GPR): φ14(t, f ) = GPR(Vt[ f ]).
763
We deﬁne another family of features using the GBC [9] of
764
a given set S as follows. GBC(S) is the sum of the fractions
765
of all shortest paths, which traverse at least one node in S,
766
and, thus, represents the probability that a randomly selected
767
shortest path between two randomly selected vertices in Vt
768
contains a node in S. For instance, if S is the set of vertices
769
belonging to category f in the network at time t, then we
770
obtain the following feature.
771
Deﬁnition 15 (GBC):
772
φ15(t, f ) = GBC(Vt[ f ]).
773
This feature represents the probability that a randomly
774
selected shortest path between two randomly selected vertices
775
in Vt traverse a vertex whose functional category is f .
776
We can deﬁne several variants of φ14 and φ15 depending on
777
the choice of S. Also, we can aggregate the values of GPRs
778
and GBCs for different sets to obtain new features as follows.
779
Given a network Nt = ⟨Vt, Et, πt⟩and a functional category
780
f
∈C, we use Pr
t, f to denote be the set of the vertices
781
of Nt involved in the functional category f and with rank
782
greater than or equal to r, that is, Pr
t, f = {v | v ∈Vt, f ∈
783
catt(v), πt(v, rank) ≥r}. For instance, assuming that the
784
maximum rank is 10, P10
2010,operational is the set the top-ranked
785
operational persons in 2010.
786
For a subset F
=
{ f1, . . . , f|F|} ⊆
C of functional
787
categories, let Rr
t (F) =
Pr
t, f1 × Pr
t, f2 × · · · × Pr
t, f|F| be
788
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

12
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS
the Cartesian product of the sets of r-ranked people from
789
the functional categories in F at time t. Therefore, after
790
appropriately choosing the value of r, Rr
t (F) consists of all
791
possible |F|-tuples of highly ranked persons, one for each
792
functional category in F. For each tuple τ ∈Rr
t (F), let
793
Sτ = {p1, . . . , p|F| | τ = (p1, . . . , p|F|)} be the set of the
794
|F| people in τ.
795
The next features are the average of GPRs and GBCs of all
796
combinations of people at rank r or more for categories in F.
797
Deﬁnition 16 (Functional Rank GPR):
798
φ16(t, F,r) = avg

GPR(Sτ)
 τ ∈Rr
t (F)

.
799
Deﬁnition 17 (Functional Rank GBC):
800
φ17(t, F,r) = avg

GBC(Sτ)
 τ ∈Rr
t (F)

.
801
D. Clustering-Based Features
802
Given a path of length two in a network, we call a triplet
803
the set of the three vertices in the path. A triplet is said to
804
be open if the three vertices are connected by exactly two
805
edges, while it is said to be closed if it consists of three
806
edges—a closed triplet corresponds to a path of length 2 that
807
is closed. Thus, a triangle consists of three closed triplets,
808
corresponding to three closed path of length two, each starting
809
on one of the vertices. The clustering coefﬁcient is then deﬁned
810
as the number of closed triplets (i.e., three times the number
811
of triangles) over the total number of triplets (both open and
812
closed ones). It represents the probability that two vertices that
813
are connected possibly through the third one are also directly
814
connected.
815
The clustering coefﬁcient can be deﬁned for both directed
816
graphs, such as our network N = ⟨V, E, π, cat⟩, and undi-
817
rected graphs such as the undirected (and unlabeled) version
818
of N deﬁned through E, the set of undirected (and unlabeled)
819
edges obtained from E, as N = ⟨V, E, π, cat⟩. Speciﬁcally,
820
given a (directed or undirected) graph G whose set of edges
821
is E, the cluster coefﬁcient for G is as follows:
822
CC(G) = 3 × |{(u, v, w) | (u, v), (v, w), and (w, u) ∈E}|
|{(u, v, w) | (u, v) and (v, w) ∈E}|
.
823
Thus, considering Nt = ⟨Vt, Et, πt⟩and Nt = ⟨Vt, Et, πt⟩,
824
we deﬁne the following two features.
825
Deﬁnition 18 (Global Directed Clustering Coefﬁcient):
826
φ18(t, f ) = CC(Nt[ f ]).
827
Deﬁnition 19 (Global Undirected Clustering Coefﬁcient):
828
φ19(t, f ) = CC(N t[ f ]]).
829
We now deﬁne two classes of features that rely on groups
830
of top-ranked people from functional categories in a set F.
831
Let Rr
t (F) = Pr
t, f1 × Pr
t, f2 × · · · × Pr
t, f|F| be the Cartesian
832
product of the sets of r-ranked people from the functional
833
categories in F = { f1, . . . , f|F|} ⊆C at time t, and Sτ =
834
{p1, . . . , p|F| | τ = (p1, . . . , p|F|)} be the set of the |F|
835
people in τ ∈Rr
t (F), as deﬁned for the GbFs. Given a
836
network N = ⟨V, E, π, cat⟩and a set S of vertices, we use
837
N[S] to denote the subnetwork consisting of only the vertices
838
and edges involving S. Thus, for τ ∈Rr
t (F), Nt[Sτ] is the
839
subnetwork (at time t) consisting of only the edges between a
840
group of r-ranked people, each having a functional category
841
in F. The following feature is the average of the clustering
842
coefﬁcients of all groups of r-ranked people whose functional
843
category is in F and belonging to the network at time t.
844
Deﬁnition 20 (Average Group Functional Ranked CC):
845
φ20(t, F,r) = avg

CC(Nt[Sτ])
 τ ∈Rr
t (F)

.
846
Next, we consider immediate neighbors of r-ranked people
847
in Rr
t (F) and deﬁne a feature representing the average of the
848
clustering coefﬁcients of the neighbors of r-ranked people.
849
More formally, given a network N = ⟨V, E, π⟩and a set S of
850
vertices, we use nbN (S) to denote the immediate neighbors of
851
S in N, i.e., nbN (S) = {v | (v,l, u) or (u,l, v) ∈E, u ∈S}.
852
Given this, we obtain the following feature.
853
Deﬁnition 21 (Average Neighbor Functional Ranked CC):
854
φ21(t, F,r) = avg

CC(Nt[Sτ ∪nbNt (Sτ)])
 τ ∈Rr
t (F)

.
855
E. Time-Lagged Features
856
We deﬁne time-lagged variants for each feature. For each
857
t ∈T, functional category f ∈C, and feature φi, we deﬁne
858
time-lagged features with τ ∈{1, 2, 3}.
859
Deﬁnition 22 (Lagged Feature Value):
860
i(t, f, τ) = φi(t −τ, f ).
861
That is, i(t, f, τ) is the value taken by feature φi at the
862
previous time point t −τ.
863
Deﬁnition 23 (Lagged Average Value):
864
i(t, f, τ) = avg{φi(t′, f ) | t′ ∈[t −τ, t]}.
865
Thus, i(t, f, τ) is the average of the values of the last
866
τ + 1 single-time point features.
867
REFERENCES
868
[1] F. Spezzano, V. Subrahmanian, and A. Mannes, “Stone: Shaping terrorist
869
organizational network efﬁciency,” in Proc. IEEE/ACM Int. Conf. Adv.
870
Social Netw. Anal. Mining (ASONAM), Aug. 2013, pp. 348–355.
871
[2] F. Spezzano, V. S. Subrahmanian, and A. Mannes, “Reshaping terrorist
872
networks,” Commun. ACM, vol. 57, no. 8, pp. 60–69, Aug. 2014.
873
[3] V. Latora and M. Marchiori, “How the science of complex networks
874
can help develop strategies against terrorism,” Chaos, Solitons Fractals,
875
vol. 20, no. 1, pp. 69–75, Apr. 2004.
876
[4] M. C. Horowitz and P. B. Potter, “Allying to kill: Terrorist intergroup
877
cooperation and the consequences for lethality,” J. Conﬂict Resolution,
878
vol. 58, no. 2, pp. 199–225, 2014.
879
[5] V. Krebs, “Mapping networks of terrorist cells,” Connections, vol. 24,
880
no. 3, pp. 43–52, 2002.
881
[6] R. Lindelauf, P. Borm, and H. Hamers, “The inﬂuence of secrecy on
882
the communication structure of covert networks,” Social Netw., vol. 31,
883
no. 2, pp. 126–137, 2009.
884
[7] R. Lindelauf, H. Hamers, and B. Husslage, “Cooperative game theoretic
885
centrality analysis of terrorist networks: The cases of Jemaah Islamiyah
886
and Al Qaeda,” Eur. J. Oper. Res., vol. 229, no. 1, pp. 230–238, 2013.
887
[8] K. M. Carley, J. Reminga, and N. Kamneva, “Destabilizing terrorist
888
networks,” in Proc. NAACSOS Conf., Pittsburgh, PA, USA, 2003,
889
pp. 1–6.
890
[9] S. Dolev, Y. Elovici, and R. Puzis, “Routing betweenness centrality,”
891
J. ACM, vol. 57, no. 4, p. 25, 2010.
892
[10] A. E. Hoerl and R. W. Kennard, “Ridge regression: Biased estimation
893
for nonorthogonal problems,” Technometrics, vol. 12, no. 1, pp. 55–67,
894
1970.
895
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

CHEN et al.: LINKING TERRORIST NETWORK STRUCTURE TO LETHALITY: ALGORITHMS AND ANALYSIS OF AQ AND ISIS
13
[11] R. Tibshirani, “Regression shrinkage and selection via the lasso,” J. Roy.
896
Statist. Soc., B Methodol., vol. 58, no. 1, pp. 267–288, 1996.
897
[12] L. Breiman, “Random forests,” Mach. Learn., vol. 45, no. 1, pp. 5–32,
898
Oct. 2001.
899
[13] V. N. Vapnik, The Nature of Statistical Learning Theory. Berlin,
900
Germany: Springer-Verlag, 1995.
901
[14] T. N. Kipf and M. Welling, “Semi-supervised classiﬁcation with graph
902
convolutional networks,” in Proc. Int. Conf. Learn. Represent. (ICLR),
903
2017, pp. 1–14.
904
[15] H. Hegre et al., “ViEWS: A political violence early-warning system,”
905
J. Peace Res., vol. 56, no. 2, pp. 155–174, Mar. 2019.
906
[16] Y. Yang, A. R. Pah, and B. Uzzi, “Quantifying the future lethality
907
of terror organizations,” Proc. Nat. Acad. Sci. USA, vol. 116, no. 43,
908
pp. 21463–21468, Oct. 2019.
909
[17] V. Subrahmanian, A. Mannes, A. Sliva, J. Shakarian, and J. P. Dickerson,
910
Computational Analysis of Terrorist Groups: Lashkar-e-Taiba. Berlin,
911
Germany: Springer, 2012.
912
[18] C. Leuprecht, O. Walther, D. B. Skillicorn, and H. Ryde-Collins,
913
“Hezbollah’s global tentacles: A relational approach to convergence with
914
transnational organized crime,” Terrorism Political Violence, vol. 29,
915
no. 5, pp. 902–921, Sep. 2017.
916
[19] N. W. Metternich, C. Dorff, M. Gallop, S. Weschle, and M. D. Ward,
917
“Antigovernment networks in civil conﬂicts: How network structures
918
affect conﬂictual behavior,” Amer. J. Political Sci., vol. 57, no. 4,
919
pp. 892–911, 2013.
920
[20] C. Dorff, M. Gallop, and S. Minhas, “Networks of violence: Predicting
921
conﬂict in Nigeria,” J. Politics, vol. 82, no. 2, pp. 476–493, Apr. 2020.
922
[21] N. Rosenblatt, C. Winter, and R. Basra, “Islamic state propaganda and
923
attacks,” Perspect. Terrorism, vol. 13, no. 5, pp. 39–60, 2019.
924
[22] S. Brin and L. Page, “The anatomy of a large-scale hypertextual
925
web search engine,” Comput. Netw., vol. 30, nos. 1–7, pp. 107–117,
926
Apr. 1998.
927
Youdinghuan Chen has undertook Statistical and Machine Learning Scientist
928
in Industry. He is currently a Teaching Faculty of data and applied sciences
929
with the Wilmington College of Arts and Sciences, Wilmington University,
930
New Castle, DE, USA.
931
Chongyang Gao is currently pursuing the Ph.D. degree in computer science
932
with Northwestern University, Evanston, IL, USA.
933
Daveed Gartenstein-Ross is currently the Founder and the Chief Executive
934
Ofﬁcer of Valens Global, Washington, DC, USA, and also an Instructor
935
with Carnegie Mellon University, Pittsburgh, PA, USA, and Duke University,
936
Durham, NC, USA. He has authored or is a volume editor of over 30 books
937
and monographs.
938
Kevin T. Greene is currently an Associate Research Scholar with the
939
Empirical Studies of Conﬂict Project, Princeton University, Princeton, NJ,
940
USA. His research interests include the role of information communication
941
technologies in both international and domestic politics.
942
Karin Kalif received the B.Sc. degree in mathematics and the M.Sc. degree
943
in computer science from Bar-Ilan University, Ramat Gan, Israel, in 2012 and
944
2020, respectively.
945
She is currently a Computer Vision Algorithm Developer with Percepto,
946
Modi’in-Maccabim-Re’ut, Israel.
947
Sarit Kraus is currently a Professor of computer science with Bar-Ilan
948
University, Ramat Gan, Israel. Her research interests include intelligent
949
agents and multiagent systems integrating machine-learning techniques with
950
optimization and game theory methods.
951
Francesco Parisi is currently an Associate Professor of computer engineering
952
with the Department of Computer Engineering, Modeling, Electronics, and
953
System (DIMES), University of Calabria, Rende, Italy. His research interests
954
include inconsistency management, knowledge representation, and reasoning
955
under uncertainty.
956
Chiara Pulice is currently a Senior Research Scientist in computer science
957
with Northwestern University, Evanston, IL, USA. Her research interests
958
include counter terrorism, machine learning, and social network analysis.
959
Anja Subasic is currently a Machine Learning Engineer with Bloomberg LP,
960
New York, NY, USA, where she is involved in natural language processing.
961
V. S. Subrahmanian was a Professor with the University of Maryland,
962
College Park, MD, USA, where he was the Director of the Institute for
963
Advanced Computer Studies. He was a Dartmouth College Distinguished
964
Professor in cybersecurity, technology, and society and the Director of the
965
Institute for Security, Technology and Society, Northwestern University,
966
Evanston, IL, USA, where he is currently a Walter P. Murphy Professor of
967
computer science and a Buffett Faculty Fellow.
968
This article has been accepted for inclusion in a future issue of this journal. Content is final as presented, with the exception of pagination. 
Authorized licensed use limited to: Bar Ilan University. Downloaded on April 18,2023 at 21:06:30 UTC from IEEE Xplore.  Restrictions apply. 

