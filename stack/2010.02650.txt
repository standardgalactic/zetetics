If Beam Search is the Answer, What was the Question?
Clara Meister
Tim Vieira
Ryan Cotterell ,
ETH Z¨urich
Johns Hopkins University
University of Cambridge
clara.meister@inf.ethz.ch tim.vieira@gmail.com
ryan.cotterell@inf.ethz.ch
Abstract
Quite surprisingly, exact maximum a posteri-
ori (MAP) decoding of neural language gen-
erators frequently leads to low-quality results
(Stahlberg and Byrne, 2019).
Rather, most
state-of-the-art results on language generation
tasks are attained using beam search despite its
overwhelmingly high search error rate. This
implies that the MAP objective alone does not
express the properties we desire in text, which
merits the question: if beam search is the an-
swer, what was the question? We frame beam
search as the exact solution to a different de-
coding objective in order to gain insights into
why high probability under a model alone may
not indicate adequacy.
We ﬁnd that beam
search enforces uniform information density
in text, a property motivated by cognitive sci-
ence.
We suggest a set of decoding objec-
tives that explicitly enforce this property and
ﬁnd that exact decoding with these objectives
alleviates the problems encountered when de-
coding poorly calibrated language generation
models. Additionally, we analyze the text pro-
duced using various decoding strategies and
see that, in our neural machine translation ex-
periments, the extent to which this property
is adhered to strongly correlates with BLEU.
Our code is publicly available at https://
github.com/rycolab/uid-decoding.
1
Introduction
As a simple search heuristic, beam search has been
used to decode models developed by the NLP
community for decades.
Indeed, it is notewor-
thy that beam search is one of the few NLP al-
gorithms that has stood the test of time: It has
remained a cornerstone of NLP systems since the
1970s (Reddy, 1977). As such, it became the nat-
ural choice for decoding neural probabilistic text
generators—whose design makes evaluating the
full search space impossible (Kalchbrenner and
Blunsom, 2013; Sutskever et al., 2014; Vinyals
and Le, 2015; Yin et al., 2016). While there is
no formal guarantee that beam search will return—
Figure 1: Average std. deviation σ of surprisals (per
sentence) and corpus BLEU for translations generated
using exact search over the MAP objective with a
greedy regularizer (Eq. (11)) with varying degrees of
λ. References for beam search (k = 5 and k = 100)
are included. Sub-graph shows the explicit relationship
between BLEU and σ. λ and σ axes are log-scaled.
or even approximate—the highest-scoring candi-
date under a model, it has repeatedly proven its
merit in practice (Serban et al., 2017; Edunov et al.,
2018; Yang et al., 2019) and, thus, has largely been
tolerated—even embraced—as NLP’s go-to search
heuristic.
However, in the context of neural ma-
chine translation (NMT), a shocking empirical ﬁnd-
ing has emerged: Using beam search to decode
sentences from neural text generators almost invari-
ably leads to better text than using exact search (or
beam search with a very large beam size). In fact,
Stahlberg and Byrne (2019) report that exact search
arXiv:2010.02650v2  [cs.CL]  17 Jan 2021

returns the empty string in > 50% of cases,1 show-
ing that the success of beam search does not stem
from its ability to approximate exact decoding in
practice, but rather due to a hidden inductive bias
embedded in the algorithm. This inductive bias ap-
pears to be paramount for generating desirable text
from neural probabilistic text generators. While
several works explore this phenomenon (Murray
and Chiang, 2018; Yang et al., 2018; Stahlberg
and Byrne, 2019; Cohen and Beck, 2019), no one
has yet hypothesized what beam search’s hidden
inductive bias may be. Our work ﬁlls this gap.
We analyze the beam search blessing by re-
verse engineering an objective that beam search
returns the exact solution for. Speciﬁcally, we in-
troduce a regularizer for the the standard (MAP)
decoding objective for text generation models such
that the exact solution to this regularized objec-
tive is equivalent to the solution found by beam
search under the unmodiﬁed objective. Qualitative
inspection reveals that our “beam search regular-
izer” has a clear connection to a theory in cog-
nitive science—the uniform information density
hypothesis (UID; Levy and Jaeger, 2007). The UID
hypothesis states that—subject to the constraints
of the grammar—humans prefer sentences that dis-
tribute information (in the sense of information
theory) equally across the linguistic signal, e.g., a
sentence. In other words, human-produced text,
regardless of language, tends to have evenly dis-
tributed surprisal, formally deﬁned in information
theory as negative log-probability. This connec-
tion suggests beam search has an interpretation as
exact decoding, but with a UID-promoting regu-
larizer that encourages evenly distributed surprisal
in generated text. This insight naturally leads to
the development of several new regularizers that
likewise enforce the UID property.
Empirically, we experiment with our novel regu-
larizers in the decoding of NMT models. We ﬁrst
observe a close relationship between the standard
deviation of surprisals—an operationalization of
UID—and BLEU, which suggests that high-quality
text does indeed exhibit the UID property. Addi-
tionally, we ﬁnd that even with exact search, our
regularized objective leads to performance simi-
lar to beam search on standard NMT benchmarks.
Both of these observations are reﬂected in Fig. 1.
Lastly, we see that our regularizers alleviate the
1This rate tends to decrease for larger models, although it
is often still a considerable percentage.
text-quality degradation typically seen when de-
coding with larger beam sizes. We take all the
above as evidence that our proposed explanation of
beam search’s inductive bias indeed elucidates why
the algorithm performs so well as a search heuristic
for language generation tasks.
2
Neural Probabilistic Text Generation
Probabilistic text generators deﬁne a probability
distribution pθ(y | x) over an output space of hy-
potheses Y (to be deﬁned in Eq. (1)) conditioned
on an input x.2 Modern generators are typically
parameterized by a deep neural network—possibly
recurrent—with a set of learned weights θ. In the
case of text generation, the full set of possible hy-
potheses grows exponentially with the vocabulary
size |V|. We consider the set of complete hypothe-
ses, i.e., valid outputs, as
Y := {BOS ◦v ◦EOS | v ∈V∗}
(1)
where ◦is string concatenation and V∗is the
Kleene closure of V. In words, valid hypotheses
are text, e.g., sentences or phrases, padded with dis-
tinguished tokens, BOS and EOS. In this work, we
consider models that are locally normalized, i.e.,
the model pθ is deﬁned as the product of probability
distributions:
pθ(y | x) =
|y|
Y
t=1
pθ(yt | x, y<t)
(2)
where each pθ(· | x, y<t) is a distribution with sup-
port over ¯V := V ∪{EOS} and y<1 = y0 := BOS.
The decoding objective for text generation aims
to ﬁnd the most-probable hypothesis among all
candidate hypotheses, i.e. we aim to solve the
following optimization problem:
y⋆= argmax
y∈Y
log pθ(y | x)
(3)
This is commonly known as maximum a posteriori
(MAP) decoding since pθ is a probability model.
While there exists a wealth of literature on decod-
ing algorithms for statistical text generation mod-
els, e.g., phrase-based machine translation models,
many of these methods cannot reasonably be used
with neural models. Speciﬁcally, due to the non-
Markovian structure of most neural text generators,
dynamic-programming algorithms for searching
2The input could be another sentence, a semantic structure
or an image, to name a few examples.

over the exponentially large space are not efﬁcient
in this setting. Indeed, there are formal results that
solving Eq. (3) with a recurrent neural network
is NP-hard (Chen et al., 2018). Therefore decod-
ing is performed almost exclusively with heuristic
methods, such as beam search.
2.1
Beam Search
Beam search is a form of pruned breadth-ﬁrst
search where the breadth is limited to k ∈Z+
(i.e., a maximum of k hypotheses) are expanded
at each time step. We express beam search as the
following recursion:
Y0 = {BOS}
(4)
Yt = argmax
Y ′⊆Bt,
|Y ′|=k
log pθ(Y ′ | x)
(5)
where we deﬁne the candidate set at t > 0
Bt =
n
yt91 ◦y | y ∈¯V and yt91 ∈Yt91
o
(6)
For notational convenience, we deﬁne EOS◦EOS =
EOS. The above algorithm terminates after a ﬁxed
number of iterations3 nmax and the set Ynmax is
returned. We overload pθ(· | x) to take a set of hy-
potheses as an argument instead of just a single hy-
pothesis. In this case, pθ(Y | x) := Q
y∈Y pθ(y |
x).4 Using a similar schema, the argmax may
also operate over a different objective, e.g., log-
probabilities combined with various rewards or pe-
naties, such as those discussed in §2.2.
Beam search has a long history in sequence
transduction. For example, many of the decoding
strategies used in statistical machine translation
(SMT) systems were variants of beam search (Och
et al., 1999; Koehn et al., 2003; Koehn, 2004). As
language generation systems moved away from
phrase-based statistical approaches and towards
neural models, beam search remained the de-facto
decoding algorithm (Sutskever et al., 2014; Vinyals
and Le, 2015). However, it has been observed
that when used as a decoding algorithm for neural
text generation, beam search (for small beams)
typically has a large percentage of search errors
3If all hypotheses in Yt end in EOS for some t < nmax,
then we may terminate beam search early as it is then gau-
ranteed that Yt = Ynmax. We do not consider further early-
stopping methods for beam search (Huang et al., 2017; Yang
et al., 2018; Meister et al., 2020) as they generally should not
affect the quality of the decoded set.
4There do exist objectives that take into account interac-
tions between hypotheses in a set, e.g., diverse beam search
(Vijayakumar et al., 2018), but we do not consider those here.
(Stahlberg and Byrne, 2019). Counterintuitively,
it is widely known that increasing the beam size
beyond 5 can hurt model performance in terms
of downstream evaluation metrics (e.g., BLEU,
ROUGE); while a number of prior works have
referred to this phenomenon as a curse (Koehn and
Knowles, 2017; Yang et al., 2018; Cohen and Beck,
2019), it should perhaps be seen as a blessing.
Beam search typically generates well-formed and
coherent text from probabilistic models, whose
global optimum in many cases is the empty string,
when they otherwise might fail to produce text at
all. As we demonstrate in §4, this text also tends
to be human-like. We will subsequently explore
possible reasons as to why beam search leads
to desirable text from models that are otherwise
poorly calibrated, i.e., poor representations of the
true distribution p(y | x) (Guo et al., 2017).
2.2
Alternative Decoding Objectives
When the MAP objective (Eq. (3)) is used for de-
coding neural text generators, the results are gen-
erally not satisfactory. Among other problems, the
generated texts are often short and defaults to high-
frequency words (Cho et al., 2014; Vinyals and Le,
2015; Shen et al., 2016). Methods such as length
and coverage normalization (Jean et al., 2015; Tu
et al., 2016; Murray and Chiang, 2018), which aug-
ment the MAP objective with an additive term or
multiplicative factor, have been adopted to allevi-
ate these issues. For example, two such forms of
length5 and coverage normalization use the follow-
ing modiﬁed MAP objective respectively during
decoding to produce higher-quality output:
log pθ(y|x) + λ|y|
(7)
log pθ(y|x)+λ
|x|
X
i=1
log min

1,
|y|
X
j=1
αij


(8)
where λ > 0 is the (tunable) strength of the reward
and αij is the attention weight (Bahdanau et al.,
2015) from the jth decoding step over the ith input.
Eq. (7) directly rewards longer outputs (He et al.,
2016) while Eq. (8) aims to reward coverage of in-
put words in a prediction using the attention mecha-
nism of an encoder–decoder model as an oracle (Tu
5The predominant form of length normalization divides
(log) sequence probability by the length of the hypothesis
rather than using an additive reward as in (He et al., 2016).
We present results from the former in our experiments as we
ﬁnd it empirically leads to better performance.

et al., 2016). While such methods help obtain state-
of-the-art results in neural MT (Wu et al., 2016;
Gehring et al., 2017; Ng et al., 2019), we view
them as a patch to the observed problems. The
fact that text quality still degrades with increased
beam sizes when these rewards are used (Koehn
and Knowles, 2017; Ott et al., 2018a) suggests that
they do not address the inherent issues with text
generation systems. We subsequently hypothesize
about the nature of these issues and provide a set
of linguistically motivated regularizers—inspired
by beam search—that appear to alleviate them.
3
Deriving Beam Search
We introduce a regularized decoding framework.
The idea is simple; we seek to solve the regularized
optimization problem to decode
y⋆= argmax
y∈Y

log pθ(y | x) −λ · R(y)

(9)
for a strategically chosen R(·). Clearly, for certain
R(·), we recover the decoding objectives discussed
in §2.2. The question we ask in this work is the
following: If we want to view beam search as an
exact-decoding algorithm, which R(·) should we
choose to recover beam search?
We discovered an elegant answer rooted in infor-
mation theory and cognitive science (the connec-
tions are discussed in-depth in §4). We ﬁrst deﬁne
the model’s time-dependent surprisals, which are
an information-theoretic concept that characterizes
the amount of new information expressed at time t:
u0(BOS) = 0
ut(y) = −log pθ(y | x, y<t), for t ≥1 (10)
Note that minimally surprising means maximally
probable. For the special case of greedy decoding,
where k = 1, the following choice of regularizer
recovers beam search for sufﬁciently large λ:
Rgreedy(y) =
|y|
X
t=1

ut(yt) −min
y′∈V ut(y′)
2
(11)
The intuition behind Eq. (11) is to encourage lo-
cally optimal decisions: Every local surprise ut
should be close to the minimally surprising choice.
In the limiting case where locally optimal deci-
sions are not just encouraged, but rather enforced,
we recover greedy search.
Formally, we have the following theorem:
Theorem 3.1. The argmax of log pθ(y | x) −λ ·
Rgreedy(y) is exactly computed by greedy search
in the limiting case as λ →∞.
Proof. By induction. In App. A.
Theorem 3.1 establishes that greedy search is the
limiting case of a regularizer that seeks to encour-
age decisions to have high-probability locally. In
contrast, the optimal MAP solution will generally
not have this property. This is because a globally
optimal MAP decoder may require a locally subop-
timal decision for the sake of being able to make
a compensatory decision later that leads to global
optimality.6
We now consider the generalization of greedy
search (k = 1) to full beam search (k ≥1). Recall
that beam search returns not just a single output,
but rather a set of outputs. Thus, we must consider
the set-decoding objective
Y ⋆= argmax
Y ⊆Y,
|Y |=k

log pθ(Y | x)−λ·R(Y )

(12)
where, as before, we have used our overloaded nota-
tion pθ(· | x) to score sets of hypotheses. Similarly
to Rgreedy, we formulate a greedy set-regularizer
to recover beam search:
Rbeam(Y ) =
(13)
nmax
X
t=1


ut(Yt) −min
Y ′⊆Bt,
|Y ′|=k
ut(Y ′)



2
where Yt = {y1:t | y ∈Y } corresponds to the set
of hypotheses expanded by t steps.7 Note that we
additionally overload surprisal to operate on sets,
ut(Y ) = P
y∈Y ut(y). We prove an analogous
theorem to Theorem 3.1 for this regularizer.
Theorem 3.2. The argmax of log pθ(Y | x) −λ ·
R(Y ) is computed by beam search with beam size
of k = |Y | as λ →∞.
Proof. The proof follows from the same argument
as Theorem 3.1, albeit with sets instead of an indi-
vidual hypothesis.
6Indeed, we only have formal guarantees for greedy algo-
rithms when local optimality translates into global optimality
(Kleinberg and Tardos, 2005, Chapter 4).
7This includes both incomplete hypotheses of length t and
complete hypotheses that have reached EOS at step ≤t.

Note that in the (predominant) case where we want
to return a single candidate sentence as the output
rather than an entire set—as would be generated by
Eq. (12)—we can take the highest-probability se-
quence in the chosen set Y ⋆as our decoded output.
The objective in Eq. (12) boils down to a subset
selection problem which, given the size of Y, is a
computationally prohibitive optimization problem.
Nonetheless, we can use it to analyze the properties
enforced on generated text by beam search.
4
From Beam Search to UID
The theoretical crux of this paper hinges on a
proposed relationship between beam search and
the uniform information density hypothesis
(Levy, 2005; Levy and Jaeger, 2007), a concept
from cognitive science:
Hypothesis 4.1. “Within the bounds deﬁned by
grammar, speakers prefer utterances that distribute
information uniformly across the signal (informa-
tion density). Where speakers have a choice be-
tween several variants to encode their message,
they prefer the variant with more uniform informa-
tion density (ceteris paribus)” (Jaeger, 2010).
At its core, the theory seeks to explain various
aspects of human language processing in terms of
information theory; it is often applied to an area
of psycholinguistics known as sentence processing
where the UID hypothesis is used to explain exper-
imental data (Hale, 2001). As the UID hypothesis
concerns a cognitive process (virtually) indepen-
dent of the language in use, the theory should hold
across languages (Jaeger and Tily, 2011).
To see the hypothesis in action, consider the
classic case of syntactic reduction from Levy and
Jaeger (2007):
(1) How big is [NP the familyi [RC (that) you cook
for −i]]?
In the above example, the sentence does not require
the relativizer that at the start of the relative clause
(denoted by RC); it would also be syntactically
correct without it. However, many would agree
that the relativizer makes the text qualitatively bet-
ter. The information-theoretic explanation of this
perception is that without the relativizer, the ﬁrst
word of a relative clause conveys two pieces of in-
formation simultaneously: the onset of a relative
clause and part of its internal contents. Including
the relativizer spreads this information across two
words, thereby distributing information across the
sentence more uniformly and avoiding instances
of high surprisal—which, from a psycholinguistic
perspective, are displeasing. In short, the relativizer
helps to ensure the UID property of the sentence.
Importantly, the preference suggested by the
UID hypothesis is between possible utterances (i.e.,
outputs) where grammaticality and information
content are held constant. Any violation of these
assumptions presents confounding factors when
measuring, or optimizing, the information density
of the generated text. In our setting, there is reason
to believe that grammaticallity and information con-
tent are approximately held constant while select-
ing between hypothesis. First, the high-probability
outputs of neural generation models tend to be
grammatical (Holtzman et al., 2020). Second, be-
cause decoding is conditioned on a speciﬁc input
x, the conditional probability model pθ(y | x) is
able to assign high-probability to outputs y that are
plausible outputs (e.g., translations) of the given
x. Thus, even though the various y are not con-
strained to be sematically equivalent to one another,
they tend to express similar information because
they are at least relevant to the same x. This is
why our regularized optimization problem Eq. (9)
combines an information-density regularizer with
log pθ(y | x): the term log pθ(y | x) rewards
grammaticallity and content relevance, whereas the
information-density regularizer encourages the hu-
man preferences posited by the UID hypothesis.
The parameter λ allows the preferences to be cali-
brated to perform well on downstream evaluation
metrics, such as BLEU and ROUGE.
4.1
The UID Bias in Beam Search
It may not be immediately obvious how the UID
hypothesis relates to beam search. After all, beam
search narrows the scope of the search to only the
lowest surprisal candidates at each time step, which
does not clearly lead to a uniform distribution of
surprisals in the ﬁnal decoded sequences. The con-
nection is best seen visually.
Fig. 2 shows the time-dependent surprisals ut
under the model of several candidate translations
(German to English). Recall that we have ut(y) ∈
[0, ∞) and that the standard decoding objective ex-
plicitly minimizes the sum of surprisals, i.e., maxi-
mizes log-probability. Therefore, the only way the
distribution of a solution can become distinctly non-
uniform is when there are several high-surprisal

Figure 2: Surprisals (according to pθ) by time step of sequences generated with various decoding strategies. Values
of λ indicate the greedy regularizer was used with the corresponding λ value. Note that beam search (k=5) and
exact search (λ = 1.0) return the same prediction in this example, and thus, are represented by the same line.
decisions in the mix; we observe this in the or-
ange and red curves. Intuitively, this corresponds
to the notion of compensation discussed earlier:
a globally optimal decoding scheme may select a
high-surprisal step at some point in order to shorten
the length of the path or to take a low-surprisal step
later on. We observe an extreme example of this
behavior above: Selecting the EOS character at the
ﬁrst step leads to a very non-uniform distribution,
i.e., the degenerate distribution, which, violates our
operationalization of UID described subsequently.
In summary, we see that as λ is decreased, the de-
coded sentences obey the UID property less strictly.
Indeed, setting λ = 0, i.e., exact inference of the
MAP objective, results in the empty string.
A number of successful sampling methods (p-
nucleus sampling (Holtzman et al., 2020) and top-
k sampling (Fan et al., 2018)) enforce the UID
property in generated text by the same logic as
above. Both methods eliminate many of the high-
surprisal choices at any given decoding step by
narrowing the set of tokens that may be chosen.
4.2
Cognitive Motivation for Beam Search
The goal of this work is to expose a possible in-
ductive bias of beam search. We now exhibit our
primary hypothesis
Hypothesis 4.2. Beam search is a cognitively mo-
tivated search heuristic for decoding language gen-
eration models. The success of beam search on
such tasks is, in part, due to the fact that it inher-
ently biases the search procedure towards text that
humans prefer.
The foundation of the argument for this hypoth-
esis follows naturally from the previous sections:
First, we demonstrated in §3 that beam search is an
exact decoding algorithm for a certain regularized
objective—to wit, the one in Eq. (9). Qualitatively,
we related the behavior of the regularizer to the
UID hypothesis from cognitive science. As a ﬁ-
nal step, we next provide operationalizations of
UID—in the form of regularizers within our regu-
larized decoding framework—through which we
can empirically test the validity of this hypothesis.
5
Generalized UID Decoding
If beam search is trying to optimize for UID, can
we beat it at its own game? This section develops
a battery of possible sentence-level UID measures,
which can be used as regularizers in our regularized
decoding framework and compared experimentally
on downstream evaluation metrics.
Variance Regularizer.
We ﬁrst consider the vari-
ance regularizer from Jain et al. (2018). In essence,
UID concerns the distribution of information over
the course (i.e., time steps) of a sentence. A natural

measure for this is variance of the surprisals.
Rvar(y) = 1
|y|
|y|
X
t=1

ut(yt) −µ
2
(14)
where µ = 1/|y| P|y|
t=1 ut(yt). This regularizer,
in contrast to Eq. (11), is a much more straight-
forward encoding of the UID: it directly opera-
tionalizes UID through variance.
Local Consistency.
Next we consider a local
consistency regularizer, also taken from Jain et al.
(2018), that encourages adjacent surprisals to have
similar magnitude:
Rlocal(y) = 1
|y|
|y|
X
t=1

ut(yt) −ut−1(yt−1)
2
(15)
Again, this is a straightforward encoding of the
UID: if every surprisal is similar to its neighbor, it
will be close to uniform. Note that both of the
above regularizers are deﬁned for all decoding
steps t > 0 since we deﬁne u0(y0) = 0, y0 =
BOS for all valid hypotheses.
Max Regularizer.
We propose a UID-inspired
regularizer of our own design that exploits the na-
ture of MAP decoding, for which the overarching
goal is to ﬁnd a solution with low surprisal. In
this setting, one strategy is to penalize decisions
that move the distribution away from 0, the lowest
possible surprisal. This suggests
Rmax(y) =
|y|
max
t=1 ut(yt)
(16)
would regularize for UID. Such a regularizer would
also directly penalize extreme compensation dur-
ing decoding (discussed in §3). It is worth noting
that this regularizer has a connection to entropy
regularization, which can be seen by looking at the
formula for R´enyi entropy.
Squared Regularizer.
Finally, we consider a
novel squared penalty, that, again, exploits the goal
of MAP decoding. If we wish to keep everything
uniform, we can try to push all surprisals close to
0, but this time with a squared penalty:
Rsquare(y) =
|y|
X
t=1
ut(yt)2
(17)
Experimentally, we expect to see the following:
If encouraging decoded text to exhibit UID is
helpful—and our logic in constructing regulariz-
ers is sound—all the regularizers (Eq. (14) to (17))
should lead to roughly the same performance un-
der exact decoding and beam search with large
beam widths. Such results would not only validate
the connection between UID and high-quality text;
comparable performance of optimal beam search8
and exact search under our regularized objective
would provide explicit evidence for our declarative
explanation of the inductive bias in beam search.
6
Experiments
We explore how encouraging uniform information
density in text generated by neural probabalistic
text generators affects its downstream quality. To
this end, we decode NMT models using the reg-
ularized objective (Eq. (9)) with our UID regu-
larizers. We perform exact decoding for a range
of λ and observe how text quality (quantiﬁed by
BLEU (Papineni et al., 2002) using the SacreBLEU
(Post, 2018) system) and the distribution of sur-
prisal changes. We additionally evaluate our regu-
larizers under the beam search decoding strategy
to see if penalizing violations of UID alleviates
the text-quality degradation typically seen with in-
creased beam widths.
Experiments are performed using models trained
on the IWSLT’14 De-En (Cettolo et al., 2012) and
WMT’14 En-Fr (Bojar et al., 2014) datasets. For re-
producibility, we use the model provided by fairseq
(Ott et al., 2019) for the WMT’14 task;9 we use the
data pre-processing scripts and recommended hy-
perparameter settings provided by fairseq for train-
ing a model on the IWSLT’14 De-En dataset. We
use the Newstest’14 dataset as the test set for the
WMT’14 model. All model and data information
can be found on the fairseq NMT repository. 10
6.1
Exact Decoding
To perform exact decoding of neural probabilistic
text generators, we build on the decoding frame-
work of Stahlberg et al. (2017), albeit using Dijk-
stra’s algorithm (Dijkstra, 1959) instead of depth-
ﬁrst search as we ﬁnd it decreases decoding time.
Note that Dijkstra’s algorithm is guaranteed to ﬁnd
the global optimum when path cost is monotoni-
8By optimal beam search, we mean beam search using the
beam width that empirically leads to the best results.
9This model uses a transformer architecture (Vaswani et al.,
2017) and was trained as in Ott et al. (2018b).
10https://github.com/pytorch/fairseq/
tree/master/examples/translation

Figure 3: BLEU as a function of beam width for various regularizers. We choose λ for each regularizer by best per-
formance on validation sets (see App. B). y-scales are broken to show minimum BLEU values. x-axis is log-scaled.
cally increasing, which is the case for hypotheses
under the scoring scheme used by neural proba-
bilistic text generators (see Meister et al. (2020)
for more detailed discussion). While the variance
and local consistency regularizers Eq. (14) and (15)
break this monotonicity property, we can still guar-
antee optimality by using a stopping criterion sim-
ilar to the one proposed by Yang et al. (2018).
Explicitly, we check if the top-scoring complete
hypothesis has a greater score than the maximum
possible score of any hypothesis in the queue. All
scores are bounded due to the maximum-length cri-
terion. Additionally, we lower-bound each search
by the score of the empty string to decrease the
memory footprint, i.e., we stop considering hy-
potheses whose scores (or maximum possible score
in the case of Eq. (14) and (15)) drop below that of
the empty string at any time step.
Fig. 1 demonstrates how the addition of the
greedy UID regularizer (Eq. (11) ) to the regular-
ized MAP objective (Eq. (9)) affects characteristics
of the global optimum under the model as we vary
λ. Notably, increasing the strength of the regular-
izer appears to alleviate the text quality degradation
seen with exact search, leading to results that ap-
proach the BLEU of those generated using optimal
beam search. Fig. 1 also shows a strong inverse re-
lationship between BLEU and average standard de-
viation (per sentence) of surprisals. We take these
observations as empirical validation of Hyp. 4.2.
6.2
Regularized Beam Search
We next look at how the regularized decoding ob-
jective affects text generated using beam search. As
previously noted, text quality generally degrades
with increased beam size when using the standard
MAP objective; this phenomenon is demonstrated
in Fig. 3. UID regularization appears to alleviate
k=5
k=10
k=100
k=500
No Regularization
36.42
36.30
32.83
14.66
Squared Regularizer
36.92
36.42
36.13
35.96
Greedy Regularizer
36.45
36.49
36.22
36.15
Combined Regularizers
36.69
36.65
36.48
36.35
Length Normalization
36.02
35.94
35.80
35.11
Table 1: BLEU scores on ﬁrst 1000 samples of New-
stest2014 for predictions generated with various decod-
ing strategies. Best scores per beam size are bolded.
this problem. Notably, the greedy and squared
regularizer aid performance for larger beam sizes
more so than other regularizers, for which we still
see a slight drop in performance for larger beam
sizes. This drop is negligible compared to the
one observed for unregularized beam search—a
drop which is also frequently observed for length-
normalized decoding (Koehn and Knowles, 2017).
While intuitively, variance and local variance are
the purest encodings of UID, they perform the poor-
est of the regularizers. Arguably, this may be due
to the fact that they do not simultaneously (as the
other regularizers do) penalize for high surprisal.
We additionally decode with a combination of
the UID regularizers in tandem. We collectively
tune the λ value for each of the regularizers on
validation sets. We report performance in Tab. 1
and see that results outperform standard and length-
normalized, i.e. score divided by sequence length,
beam search with noticeable improvements for
larger beams. Search details and parameter set-
tings may be found in App. B. Notably, combining
multiple UID regularizers does not lead to as great
an increase in performance as one might expect,
which hints that a single method for enforcing UID
is sufﬁcient for promoting quality in generated text.

7
Related Work
Neural probabilistic text generators are far from
perfect; prior work has shown that they often gen-
erate text that is generic (Vinyals and Le, 2015;
Li et al., 2016), unnatural (Holtzman et al., 2020),
and sometimes even non-existent (Stahlberg and
Byrne, 2019). In the context of the degenerate be-
havior of these models, the beam search curse—a
speciﬁc phenomenon where using a larger beam
size leads to worse performance—has been ana-
lyzed by a number of authors (Koehn and Knowles,
2017; Murray and Chiang, 2018; Yang et al., 2018;
Stahlberg and Byrne, 2019; Jean et al., 2015; Tu
et al., 2016; He et al., 2016; Cohen and Beck, 2019).
Many of these authors attribute the performance
drop (as search becomes better) to an inherent bias
in neural sequence models to pefer shorter sen-
tences. Other authors have ascribed fault to the
model architectures, or how they are trained (Cho
et al., 2014; Bengio et al., 2015; Sountsov and
Sarawagi, 2016; Vinyals et al., 2017; Ott et al.,
2018a; Kumar and Sarawagi, 2019). To remedy the
problem, a large number of regularized decoding
objectives and modiﬁed training techniques have
been proposed. In contrast, this work analyzes the
behavior of neural text generators from a different
angle: We provide a plausible answer—inspired by
psycholinguistic theory—as to why beam search
(with small beams) leads to high-quality text, rather
than another explanation of why exact search per-
forms so badly.
8
Conclusion
We analyze beam search as a decoding strategy for
text generation models by framing it as the solu-
tion to an exact decoding problem. We hypothesize
that beam search has an inductive bias which can
be linked to the promotion of uniform informa-
tion density (UID), a theory from cognitive science
regarding even distribution of information in lin-
guistic signals. We observe a strong relationship
between variance of surprisals (an operationaliza-
tion of UID) and BLEU in our experiments with
NMT models. With the aim of further exploring
decoding strategies for neural text generators in the
context of UID, we design a set of objectives to
explicitly encourage uniform information density
in text generated from neural probabalistic models
and ﬁnd that they alleviate the quality degradation
typically seen with increased beam widths.
Acknowledgments
We would like to thank Ari Holtzman and Jason Eis-
ner for useful feedback and discussion that helped
improve this work.
References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015.
Neural machine translation by jointly
learning to align and translate. In 3rd International
Conference on Learning Representations.
Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and
Noam Shazeer. 2015.
Scheduled sampling for se-
quence prediction with recurrent neural networks.
In Advances in Neural Information Processing Sys-
tems 28.
Ondˇrej Bojar, Christian Buck, Christian Federmann,
Barry Haddow, Philipp Koehn, Johannes Leveling,
Christof Monz, Pavel Pecina, Matt Post, Herve
Saint-Amand, Radu Soricut, Lucia Specia, and Aleˇs
Tamchyna. 2014. Findings of the 2014 workshop
on statistical machine translation.
In Proceedings
of the Workshop on Statistical Machine Translation,
Baltimore, Maryland, USA. Association for Compu-
tational Linguistics.
Mauro Cettolo, Christian Girardi, and Marcello Fed-
erico. 2012. Wit3: Web inventory of transcribed and
translated talks. In Proceedings of the Conference of
the European Association for Machine Translation
(EAMT).
Yining Chen, Sorcha Gilroy, Andreas Maletti, Jonathan
May, and Kevin Knight. 2018.
Recurrent neural
networks as weighted language recognizers.
In
Proceedings of the 2018 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
Volume 1 (Long Papers), pages 2261–2271, New
Orleans, Louisiana. Association for Computational
Linguistics.
Kyunghyun Cho, Bart van Merri¨enboer, Dzmitry Bah-
danau, and Yoshua Bengio. 2014. On the properties
of neural machine translation: Encoder–decoder ap-
proaches. In Proceedings of SSST-8, Eighth Work-
shop on Syntax, Semantics and Structure in Statisti-
cal Translation, pages 103–111, Doha, Qatar. Asso-
ciation for Computational Linguistics.
Eldan Cohen and Christopher Beck. 2019. Empirical
analysis of beam search performance degradation in
neural sequence models. In Proceedings of the In-
ternational Conference on Machine Learning, vol-
ume 97, Long Beach, California, USA. PMLR.
Edsger W. Dijkstra. 1959.
A note on two problems
in connexion with graphs. Numerische Mathematik,
1(1).

Sergey Edunov, Myle Ott, Michael Auli, and David
Grangier. 2018. Understanding back-translation at
scale.
In Proceedings of the 2018 Conference on
Empirical Methods in Natural Language Processing,
pages 489–500, Brussels, Belgium. Association for
Computational Linguistics.
Angela Fan, Mike Lewis, and Yann Dauphin. 2018.
Hierarchical neural story generation.
CoRR,
abs/1805.04833.
Jonas Gehring, Michael Auli, David Grangier, Denis
Yarats, and Yann N. Dauphin. 2017. Convolutional
sequence to sequence learning. In Proceedings of
the International Conference on Machine Learning -
Volume 70, ICML’17. JMLR.org.
Chuan Guo, Geoff Pleiss, Yu Sun, and Kilian Q. Wein-
berger. 2017. On calibration of modern neural net-
works. In Proceedings of the International Confer-
ence on Machine Learning, ICML’17. JMLR.org.
John Hale. 2001. A probabilistic Earley parser as a psy-
cholinguistic model. In Second Meeting of the North
American Chapter of the Association for Computa-
tional Linguistics.
Wei He, Zhongjun He, Hua Wu, and Haifeng Wang.
2016. Improved neural machine translation with smt
features. In Proceedings of the Thirtieth AAAI Con-
ference on Artiﬁcial Intelligence, AAAI’16. AAAI
Press.
Ari Holtzman, Jan Buys, Maxwell Forbes, and Yejin
Choi. 2020. The curious case of neural text degener-
ation. International Conference on Learning Repre-
sentations.
Liang Huang, Kai Zhao, and Mingbo Ma. 2017. When
to ﬁnish? optimal beam search for neural text gen-
eration (modulo beam size). In Proceedings of the
2017 Conference on Empirical Methods in Natu-
ral Language Processing, pages 2134–2139, Copen-
hagen, Denmark. Association for Computational
Linguistics.
T. Florian Jaeger. 2010.
Redundancy and reduc-
tion: Speakers manage syntactic information density.
Cognitive Psychology, 61(1).
T. Florian Jaeger and Harry Tily. 2011. On language
’utility’: Processing complexity and communicative
efﬁciency. Wiley Interdisciplinary Reviews: Cogni-
tive Science, 2.
Ayush Jain, Vishal Singh, Sidharth Ranjan, Rajakrish-
nan Rajkumar, and Sumeet Agarwal. 2018.
Uni-
form information density effects on syntactic choice
in Hindi. In Proceedings of the Workshop on Lin-
guistic Complexity and Natural Language Process-
ing, pages 38–48, Santa Fe, New-Mexico. Associa-
tion for Computational Linguistics.
S´ebastien Jean, Orhan Firat, Kyunghyun Cho, Roland
Memisevic, and Yoshua Bengio. 2015.
Montreal
neural machine translation systems for WMT’15. In
Proceedings of the Tenth Workshop on Statistical
Machine Translation, pages 134–140, Lisbon, Por-
tugal. Association for Computational Linguistics.
Nal Kalchbrenner and Phil Blunsom. 2013. Recurrent
convolutional neural networks for discourse compo-
sitionality. In Proceedings of the Workshop on Con-
tinuous Vector Space Models and their Composition-
ality, pages 119–126, Soﬁa, Bulgaria. Association
for Computational Linguistics.
Jon Kleinberg and ´Eva Tardos. 2005. Algorithm De-
sign.
Addison-Wesley Longman Publishing Co.,
Inc., USA.
Philipp Koehn. 2004. Pharaoh: A beam search decoder
for phrase-based statistical machine translation mod-
els. In Machine Translation: From Real Users to
Research, Berlin, Heidelberg. Springer Berlin Hei-
delberg.
Philipp Koehn and Rebecca Knowles. 2017. Six chal-
lenges for neural machine translation. In Proceed-
ings of the First Workshop on Neural Machine Trans-
lation, pages 28–39, Vancouver. Association for
Computational Linguistics.
Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003.
Statistical phrase-based translation. In Proceedings
of the 2003 Human Language Technology Confer-
ence of the North American Chapter of the Associa-
tion for Computational Linguistics, pages 127–133.
Aviral Kumar and Sunita Sarawagi. 2019. Calibration
of encoder decoder models for neural machine trans-
lation. CoRR, abs/1903.00802.
Roger Levy. 2005. Probabilistic Models of Word Order
and Syntactic Discontinuity. Ph.D. thesis, Stanford,
CA, USA.
Roger P. Levy and T. F. Jaeger. 2007.
Speakers op-
timize information density through syntactic reduc-
tion. In B. Sch¨olkopf, J. C. Platt, and T. Hoffman,
editors, Advances in Neural Information Processing
Systems 19. MIT Press.
Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,
and Bill Dolan. 2016.
A diversity-promoting ob-
jective function for neural conversation models. In
Proceedings of the 2016 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 110–119, San Diego, California. Association
for Computational Linguistics.
Clara Meister, Tim Vieira, and Ryan Cotterell. 2020.
Best-ﬁrst beam search. Transactions of the Associa-
tion for Computational Linguistics.
Kenton Murray and David Chiang. 2018.
Correct-
ing length bias in neural machine translation.
In
Proceedings of the Third Conference on Machine
Translation: Research Papers, pages 212–223, Bel-
gium, Brussels. Association for Computational Lin-
guistics.

Nathan Ng, Kyra Yee, Alexei Baevski, Myle Ott,
Michael Auli, and Sergey Edunov. 2019. Facebook
FAIR’s WMT19 news translation task submission.
In Proceedings of the Fourth Conference on Ma-
chine Translation (Volume 2: Shared Task Papers,
Day 1), pages 314–319, Florence, Italy. Association
for Computational Linguistics.
Franz Josef Och, Christoph Tillmann, and Hermann
Ney. 1999. Improved alignment models for statisti-
cal machine translation. In 1999 Joint SIGDAT Con-
ference on Empirical Methods in Natural Language
Processing and Very Large Corpora.
Myle
Ott,
Michael
Auli,
David
Grangier,
and
Marc’Aurelio Ranzato. 2018a.
Analyzing uncer-
tainty in neural machine translation. ICML.
Myle Ott, Sergey Edunov, Alexei Baevski, Angela
Fan, Sam Gross, Nathan Ng, David Grangier, and
Michael Auli. 2019.
fairseq: A fast, extensible
toolkit for sequence modeling.
In Proceedings of
NAACL-HLT 2019: Demonstrations.
Myle Ott,
Sergey Edunov,
David Grangier,
and
Michael Auli. 2018b. Scaling neural machine trans-
lation. In Proceedings of the Third Conference on
Machine Translation: Research Papers, pages 1–9,
Belgium, Brussels. Association for Computational
Linguistics.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002.
BLEU: A method for automatic
evaluation of machine translation. In Proceedings
of the Annual Meeting on Association for Computa-
tional Linguistics.
Matt Post. 2018. A call for clarity in reporting BLEU
scores.
In Proceedings of the Conference on Ma-
chine Translation: Research Papers.
Raj Reddy. 1977. Speech understanding systems: A
summary of results of the ﬁve-year research effort at
carnegie mellon university.
Iulian Serban, Tim Klinger, Gerald Tesauro, Kartik
Talamadupula, Bowen Zhou, Yoshua Bengio, and
Aaron Courville. 2017.
Multiresolution recurrent
neural networks:
An application to dialogue re-
sponse generation.
Shiqi Shen, Yong Cheng, Zhongjun He, Wei He, Hua
Wu, Maosong Sun, and Yang Liu. 2016. Minimum
risk training for neural machine translation. In Pro-
ceedings of the 54th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 1683–1692, Berlin, Germany. Asso-
ciation for Computational Linguistics.
Pavel Sountsov and Sunita Sarawagi. 2016.
Length
bias in encoder decoder models and a case for global
conditioning.
In Proceedings of the 2016 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 1516–1525, Austin, Texas. Asso-
ciation for Computational Linguistics.
Felix Stahlberg and Bill Byrne. 2019. On NMT Search
Errors and Model Errors: Cat Got Your Tongue? In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing and the 9th In-
ternational Joint Conference on Natural Language
Processing (EMNLP-IJCNLP), Hong Kong, China.
Association for Computational Linguistics.
Felix Stahlberg, Eva Hasler, Danielle Saunders, and
Bill Byrne. 2017.
SGNMT – a ﬂexible NMT de-
coding platform for quick prototyping of new mod-
els and search strategies.
In Proceedings of the
2017 Conference on Empirical Methods in Natu-
ral Language Processing: System Demonstrations,
pages 25–30, Copenhagen, Denmark. Association
for Computational Linguistics.
Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. 2014.
Sequence to sequence learning with neural networks.
In Z. Ghahramani, M. Welling, C. Cortes, N. D.
Lawrence, and K. Q. Weinberger, editors, Advances
in Neural Information Processing Systems 27. Cur-
ran Associates, Inc.
Zhaopeng Tu, Zhengdong Lu, Yang Liu, Xiaohua Liu,
and Hang Li. 2016. Modeling coverage for neural
machine translation. In Proceedings of the 54th An-
nual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), pages 76–
85, Berlin, Germany. Association for Computational
Linguistics.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, volume 30.
Ashwin K. Vijayakumar, Michael Cogswell, Ram-
prasaath R. Selvaraju, Qing Sun, Stefan Lee, David J.
Crandall, and Dhruv Batra. 2018.
Diverse beam
search for improved description of complex scenes.
In Proceedings of the Thirty-Second AAAI Confer-
ence on Artiﬁcial Intelligence. AAAI Press.
Oriol Vinyals and Quoc V. Le. 2015. A neural conver-
sational model. CoRR, abs/1506.05869.
Oriol Vinyals, Alexander Toshev, Samy Bengio, and
Dumitru Erhan. 2017.
Show and tell:
Lessons
learned from the 2015 mscoco image captioning
challenge. IEEE Transactions on Pattern Analysis
and Machine Intelligence, 39(4):652–663.
Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V.
Le,
Mohammad Norouzi,
Wolfgang Macherey,
Maxim Krikun,
Yuan Cao,
Qin Gao,
Klaus
Macherey, Jeff Klingner, Apurva Shah, Melvin John-
son, Xiaobing Liu, Lukasz Kaiser, Stephan Gouws,
Yoshikiyo Kato, Taku Kudo, Hideto Kazawa, Keith
Stevens, George Kurian, Nishant Patil, Wei Wang,
Cliff Young, Jason Smith, Jason Riesa, Alex Rud-
nick, Oriol Vinyals, Gregory S. Corrado, Macduff
Hughes, and Jeffrey Dean. 2016.
Google’s neu-
ral machine translation system: Bridging the gap

between human and machine translation.
CoRR,
abs/1609.08144.
Yilin Yang, Liang Huang, and Mingbo Ma. 2018.
Breaking the beam search curse: A study of (re-
)scoring methods and stopping criteria for neural
machine translation.
In Proceedings of the 2018
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 3054–3059, Brussels, Bel-
gium. Association for Computational Linguistics.
Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Car-
bonell, Russ R Salakhutdinov, and Quoc V Le.
2019.
Xlnet: Generalized autoregressive pretrain-
ing for language understanding.
In H. Wallach,
H. Larochelle, A. Beygelzimer, F. d'Alch´e-Buc,
E. Fox, and R. Garnett, editors, Advances in Neu-
ral Information Processing Systems 32. Curran As-
sociates, Inc.
Jun Yin, Xin Jiang, Zhengdong Lu, Lifeng Shang,
Hang Li, and Xiaoming Li. 2016.
Neural gener-
ative question answering.
In Proceedings of the
Workshop on Human-Computer Question Answer-
ing, pages 36–42, San Diego, California. Associa-
tion for Computational Linguistics.

A
Theory
Proof. We prove Theorem 3.2 by induction. We denote the argmax of log pθ(y | x) −λ · Rgreedy(y)
as yR and the solution found by greedy search as ygreedy. We will show that ygreedy
t
= yR
t for all
0 ≤t ≤max(|yR|, |ygreedy|). The theorem holds trivially for the base case of t = 0 because y0 must
be BOS for any valid hypothesis by deﬁnition of the hypothesis space (Eq. (1)). Now, by the inductive
hypothesis, suppose ygreedy
i
= yR
i for all i < t. We will show that our regularized objective must choose
the same word as greedy search at time-step t. In the limiting case of Eq. (11), the following function
reﬂects the penalty to the distribution over tokens at position t:
lim
λ→∞
h
λ ·

ut(yt) −min
y′∈V ut(y′)
2i
=
(
0
if ut(yt) = miny′∈V ut(y′)
∞
otherwise
Since minimum surprisal implies maximum log-probability, the above function clearly returns either
0 or ∞depending on whether the decoding choice at time-step t is greedy. Therefore the only choice
that would not send the hypothesis score to −∞is the greedy choice, which implies any feasible
solution to our objective must have yR
t
= ygreedy
t
. By the principle of induction, ygreedy
t
= yR
t for all
0 ≤t ≤|yR| = |ygreedy|, which in turn implies ygreedy = yR.
B
Parameters
For values in Fig. 3, we perform grid search over λ ∈[0.2, 0.5, 0.7, 1, 2, 3, 4, 6, 7, 8, 9, 10] and choose
the λ with the best validation set performance. For combined UID regularization, we perform hyper-
parameter search over the 5 strength parameters, each sampled uniformly from the following values:
[0, 0.2, 0.5, 0.7, 1, 2, 3, 4, 6, 7, 8, 9, 10]. We run 50 trials on the validation set; λ = 5 and λ = 2 yield the
best performance for the greedy and squared regularizers, respectively with all others λ set to 0.
IWSLT’14
WMT’14
Greedy
10
5
Local Consistency
4
6
Max
5
3
Squared
3
2
Variance
7
3
Table 2: λ settings used during decoding in Fig. 3 and reported in table Tab. 1.
C
Additional Plots
Figure 4: BLEU vs. std. deviation of surprisals for
translations generated with beam search on test sets
of IWSLT’14 and WMT’14. Size of point indicates
beam width used (between 5 and 100). In contrast to
the subgraph of Fig. 1, the x-axis is not log-scaled.

