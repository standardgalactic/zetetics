REVERSE
MATHEMATICS
■■■■■


REVERSE
MATHEMATICS
proof s from the inside out
■■■■■
John Stillwell
p r i n c e t o n
u n i v e r s i t y
p r e s s
p r i n c e t o n
a n d
o x f o r d

Copyright © by John Stillwell
Requests for permission to reproduce material from this work should be sent to Permissions,
Princeton University Press
Published by Princeton University Press, William Street, Princeton, New Jersey 
In the United Kingdom: Princeton University Press, Oxford Street, Woodstock, Oxfordshire
OXTR
press.princeton.edu
Jacket images courtesty of Shutterstock
All Rights Reserved
Library of Congress Cataloging-in-Publication Data
Names: Stillwell, John, author.
Title: Reverse mathematics : proofs from the inside out / John Stillwell.
Description: Princeton : Princeton University Press, [] | Includes
bibliographical references and index.
Identiﬁers: LCCN | ISBN (hardback)
Subjects: LCSH: Reverse mathematics. | BISAC: MATHEMATICS / History &
Philosophy. | MATHEMATICS / General. | MATHEMATICS / Logic. | SCIENCE / History.
Classiﬁcation: LCC QA..S| DDC .–dcLC record available at
https://lccn.loc.gov/
British Library Cataloging-in-Publication Data is available
Tis book has been composed in Minion Pro
Printed on acid-free paper. ª
Printed in the United States of America


To Elaine
■■■■■


Contents
■■■■■
Preface
xi

Historical Introduction

.
Euclid and the Parallel Axiom

.
Spherical and Non-Euclidean Geometry

.
Vector Geometry

.
Hilbert’s Axioms

.
Well-ordering and the Axiom of Choice

.
Logic and Computability


Classical Arithmetization

.
From Natural to Rational Numbers

.
From Rationals to Reals

.
Completeness Properties of R

.
Functions and Sets

.
Continuous Functions

.
Te Peano Axioms

.
Te Language of PA

.
Arithmetically Deﬁnable Sets

.
Limits of Arithmetization


Classical Analysis

.
Limits

.
Algebraic Properties of Limits

.
Continuity and Intermediate Values

.
Te Bolzano-Weierstrass Teorem

.
Te Heine-Borel Teorem

.
Te Extreme Value Teorem

.
Uniform Continuity

.
Te Cantor Set

.
Trees in Analysis


Computability

.
Computability and Church’s Tesis


viii
■
CONTENTS
.
Te Halting Problem

.
Computably Enumerable Sets

.
Computable Sequences in Analysis

.
Computable Tree with No Computable Path

.
Computability and Incompleteness

.
Computability and Analysis


Arithmetization of Computation

.
Formal Systems

.
Smullyan’s Elementary Formal Systems

.
Notations for Positive Integers

.
Turing’s Analysis of Computation

.
Operations on EFS-Generated Sets

.
Generating Σ
Sets

.
EFS for Σ
Relations

.
Arithmetizing Elementary Formal Systems

.
Arithmetizing Computable Enumeration

.Arithmetizing Computable Analysis


Arithmetical Comprehension

.
Te Axiom System ACA

.
Σ
and Arithmetical Comprehension

.
Completeness Properties in ACA

.
Arithmetization of Trees

.
Te Kőnig Inﬁnity Lemma

.
Ramsey Teory

.
Some Results from Logic

.
Peano Arithmetic in ACA


Recursive Comprehension

.
Te Axiom System RCA

.
Real Numbers and Continuous Functions

.
Te Intermediate Value Teorem

.
Te Cantor Set Revisited

.
From Heine-Borel to Weak Kőnig Lemma

.
From Weak Kőnig Lemma to Heine-Borel

.
Uniform Continuity

.
From Weak Kőnig to Extreme Value

.
Teorems of WKL

.
WKL, ACA, and Beyond


A Bigger Picture

.
Constructive Mathematics

.
Predicate Logic

.
Varieties of Incompleteness


CONTENTS
■
ix
.
Computability

.
Set Teory

.
Concepts of “Depth”

Bibliography

Index



Preface
■■■■■
Tis is a book about the foundations of mathematics—a topic once of
interest to outstanding mathematicians, such as Dedekind, Poincaré, and
Hilbert, but today sadly neglected. Tis neglect is unfortunate for several
reasons:
• As mathematics splits into more and more specialties, the need for a uni-
fying viewpoint becomes more acute.
• Foundations unify not only mathematics but also the neighboring disci-
plines of computer science and physics.
• Recent advances in mathematical logic throw new light on the founda-
tions of analysis, and on the elusive concept of mathematical “depth.”
Tis book aims at the last point in particular, by focusing on the topic
of reverse mathematics.
As its name suggests, reverse mathematics looks at the concept of
proof in the opposite to normal direction. Instead of seeking the con-
sequences of given axioms, it seeks the axioms needed to prove given
theorems. Tis is actually an old idea, at least in the foundations of geo-
metry. From the time of Euclid until the nineteenth century it was a burn-
ing question whether the parallel axiom was needed to prove theorems
such as the Pythagorean theorem. We review the history of the parallel
axiom in chapter of this book, as a case study in reverse mathemati-
cal ideas, together with the similar story of the axiom of choice in set
theory.
Although both these axioms illustrate the idea of reverse mathemat-
ics, the subject as it is understood today lies mostly in a narrow but impor-
tant region between geometry and set theory: the theory of real numbers,
which is the foundation of calculus, analysis, and most of mathematical
physics. (Reverse mathematics has also made interesting contributions to
algebra, combinatorics, and topology which we mention more brieﬂy.)

xii
■
PREFACE
Te real numbers, as we understand them today, emerged from nine-
teenth century eﬀorts to arithmetize analysis and geometry. By building
real numbers from sets of rational numbers (and hence, ultimately, from
sets of natural numbers) it becomes possible to encode sequences of real
numbers and arbitrary continuous functions—and hence most of the ob-
jects of analysis—by sets of natural numbers. We review the arithmetiza-
tion of analysis, and also the basic theorems of analysis, in chapters and
. Afer this we are ready to ask: which axioms do we need to prove these
basic theorems? Te answer, roughly, is a set of axioms for the natural
numbers (the Peano axioms) plus a suitable set existence axiom.
Now set existence axioms come in various strengths, depending on
the strength of the theorems we wish to prove. Te lowest useful strength
turns out to be intimately related to the foundations of computation: it
asserts the existence of computable sets. Tis in turn involves a study of
the concept of computation, which merges with analysis because both
have a common basis in arithmetic. Afer an informal introduction to
computability in chapter we develop a formal concept of computation,
and its arithmetization, in chapter .
In chapters and we bring together the ideas of analysis, arithmetic,
and computation in some axiom systems for analysis, known as RCA,
WKL, and ACA. Tese systems, which are distinguished mainly by set
existence axioms of increasing strength, between them prove most of the
basic theorems of analysis. More remarkably, they sort the basic theorems
into three levels because, once above the “base” level of RCA, most the-
orems are equivalent to the set existence axiom of the system that proves
them. Tis makes each of these set existence axioms the “right axiom” in
the sense articulated by Friedman ():
When a theorem is proved from the right axioms, the axioms can
be proved from the theorem.
We will see, for example, that RCAcan prove the intermediate value
theorem; the deﬁning axiom of WKLis the right axiom to prove the
Heine-Borel theorem and the extreme value theorem; and the deﬁning
axiom of ACAis the right axiom to prove the Cauchy convergence cri-
terion and the Bolzano-Weierstrass theorem.
Tus in reverse mathematics we meet the usual cast of characters
from an introductory real analysis course, but in an entirely new story.

PREFACE
■
xiii
In chapter we give some glimpses of the bigger picture of analysis,
computation, and logic, which will hopefully prepare the reader for spe-
cialist treatments of reverse mathematics, notably Simpson (). Te
present book is very much for non-specialists—in some ways a sequel
to my book Elements of Mathematics. From Euclid to Gödel. It develops
computability and logic far enough to explain results that Elements of
Mathematics could only mention, but the latter book is not a prerequisite
for this one. Anyone at an upper undergraduate level with an interest in
foundations should be able to approach the reverse mathematics in this
book directly. Te same goes, of course, for professional mathematicians
who want to refresh their memory of foundations and to see how the
subject has reinvented itself in recent times.
Acknowledgements. I thank Harvey Friedman for information on
the history of reverse mathematics, Keita Yokoyama for his insights on
topology, and two anonymous referees for many helpful comments and
corrections. My wife Elaine as usual did sterling work in proofreading,
and Vickie Kearn and her team at Princeton University Press were ever-
helpful and meticulous in the production of the book.
John Stillwell
San Francisco, November 


REVERSE
MATHEMATICS
■■■■■


C H A P T E R 
■■■■■
Historical Introduction
Te purpose of this introductory chapter is to prepare the reader’s mind
for reverse mathematics. As its name suggests, reverse mathematics seeks
not theorems but the right axioms to prove theorems already known. Te
criterion for an axiom to be “right” was expressed by Friedman () as
follows:
When the theorem is proved from the right axioms, the axioms can
be proved from the theorem.
Reverse mathematics began as a technical ﬁeld of mathematical logic, but
its main ideas have precedents in the ancient ﬁeld of geometry and the
early twentieth-century ﬁeld of set theory.
In geometry, the parallel axiom is the right axiom to prove many the-
orems of Euclidean geometry, such as the Pythagorean theorem. To see
why, we need to separate the parallel axiom from the base theory of Eu-
clid’s other axioms, and show that the parallel axiom is not a theorem of
the base theory. Tis was not achieved until . It is easier to see that
the base theory can prove the parallel axiom equivalent to many other
theorems, including the Pythagorean theorem. Tis is the hallmark of a
good base theory: what it cannot prove outright it can prove equivalent
to the “right axioms.”
Set theory oﬀers a more modern example: a base theory called ZF, a
theorem that ZF cannot prove (the well-ordering theorem) and the “right
axiom” for proving it—the axiom of choice.
From these and similar examples we can guess at a base theory for
analysis, and the “right axioms” for proving some of its well-known
theorems.


■
CHAPTER 
.EUCLID AND THE PARALLEL AXIOM
Te search for the “right axioms” for mathematics began with Euclid,
around bce, when he proposed axioms for what we now call Eu-
clidean geometry. Euclid’s axioms are now known to be incomplete; nev-
ertheless, they outline a complete system, and they distinguish between
really obvious “basic” axioms and a less obvious one that is crucial for
obtaining the most important theorems. For historical commentary on
the axioms, see Heath ().
Te basic axioms say, for example, that there is a unique line through
two distinct points and that lines are unbounded in length. Also basic,
though expressed only vaguely by Euclid, are criteria for congruence of
triangles, such as what we call the “side angle side” or SAS criterion: if
two triangles agree in two sides and the included angle then they agree
in all sides and all angles. (Likewise ASA: they agree if they agree in two
angles and the side between them.)
Using the basic axioms it is possible to prove many theorems of a
rather unsurprising kind. An example is the isosceles triangle theorem: if
a triangle ABC has side AB = side AC then the angles at B and C are
equal. However, the basic axioms fail to prove the signature theorem of
Euclidean geometry, the Pythagorean theorem, illustrated by ﬁgure ..
Figure .: Te Pythagorean theorem
As everybody knows, the theorem says that the gray square is equal
to the sum of the black squares, but the basic axioms cannot even prove
the existence of squares. To prove the Pythagorean theorem, as Euclid
realized, we need an axiom about inﬁnity: the parallel axiom.

HISTORICAL INTRODUCTION
■

Te Parallel Axiom
I call the parallel axiom an axiom about inﬁnity because it is about lines
that do not meet, no matter how far they are extended—and one of Eu-
clid’s basic axioms is that lines can be extended indeﬁnitely. Tus paral-
lelism cannot be “seen” unless we have the power to see to inﬁnity, and
Euclid preferred not to assume such a superhuman power. Instead, he
gave a criterion for lines not to be parallel, since a meeting of lines can
be “seen” a ﬁnite distance away.
Parallel axiom. If a line n falling on lines l and m (ﬁgure .) makes
angles α and β with α + β less than two right angles, then l and m meet
on the side on which α and β occur.
l
m
n
β
α
Figure .: Angles involved in the parallel axiom
It follows that if α+β equals two right angles (that is, a straight angle)
then l and m do not meet. Because if they meet on one side (forming
a triangle) they must meet on the other (forming a congruent triangle,
by ASA), since there are angles α and β on both sides and one side in
common (ﬁgure .). Tis contradicts uniqueness of the line through any
two points.
l
m
n
α β
α
β
Figure .: Parallel lines


■
CHAPTER 
Tus Euclid’s axiom about non-parallel lines implies that parallel lines
exist. From parallel lines we quickly get the theorem that the angle sum
of a triangle is a straight angle (or π, as we will write it from now on), by
the construction shown in ﬁgure .. From this we ﬁnd in turn that an
isosceles triangle with angle π~between its equal sides has its other an-
gles equal to π~, so putting two such triangles together makes a square.
A
B
C
α γ
β
α
β
Figure .: Angle sum of a triangle
Te proof of the Pythagorean theorem can now get oﬀthe ground,
and there are many ways to complete it. Probably the one most easily
“seen” is shown in ﬁgure ., in which the gray square and the two black
squares both equal the big square minus four copies of the right-angled
triangle.
Figure .: Seeing the Pythagorean theorem
Equivalents of the Parallel Axiom
Many mathematicians considered the parallel axiom to be a “blemish”
on Euclid’s system—this is precisely what Saccheri () called it—so
they tried to show that it followed from the other axioms. Teir attempts

HISTORICAL INTRODUCTION
■

usually took the form of deducing the parallel axiom from a seemingly
more obvious statement, in the hope of reducing the problem to a simpler
one. Some of the statements found to imply the parallel axiom were:
• existence of rectangles (al-Haytham, al-Tusi in medieval times),
• existence of similar triangles of diﬀerent sizes (Wallis in ),
• angle sum of triangle = π (in Legendre’s Éléments de géométrie, ),
• three noncollinear points lie on a circle (Farkas Bolyai ()).
All of these theorems follow from the parallel axiom, so they are equiv-
alent to it in strength, in the sense that their equivalence to the parallel
axiom can be proved using only the other axioms. Of course, this no-
tion of equivalent strength is trivial if the parallel axiom itself is provable
from the other axioms, but by the hopes of such a proof were fading.
Farkas Bolyai’s own son, János, was one of the main explorers of a hypo-
thetical non-Euclidean geometry in which the parallel axiom (and hence
the four theorems above) is false, yet Euclid’s other axioms are true.
But before seeing non-Euclidean geometry, it helps to look at geom-
etry on the sphere. Spherical geometry is clearly diﬀerent from the Eu-
clidean geometry of the plane—not only in the absence of parallels, but
also in the absence of inﬁnite lines—yet they share a common language
of “points,” “lines,” and “angles.” Seeing two diﬀerent interpretations of
these words will make it easier to grasp yet another interpretation, or
model—a model of non-Euclidean geometry.
.SPHERICAL AND NON-EUCLIDEAN GEOMETRY
Just as circles and lines in the plane are part of two-dimensional Eucli-
dean geometry, spheres and planes are part of three-dimensional Eu-
clidean geometry. Indeed they are mentioned, though not deeply studied,
in Euclid’s Elements, Book XI. Te ancient Greeks made a serious study of
spherical geometry, particularly spherical trigonometry, in their study of
astronomy, because the stars appear from the earth to be ﬁxed on a heav-
enly sphere. Later, navigators on the earth also took an interest in spher-
ical geometry. For them, the natural concept of “line” is that of a great
circle—the intersection of the sphere with a plane through its center—
because a great circle gives the shortest distance between any two of its
points. Te concept of “angle” between any two such “lines” also makes
sense, as the angle between the corresponding planes (or, what comes to


■
CHAPTER 
the same thing, the angle between the tangents to the great circles).
Indeed, it is ofen easier to describe a spherical triangle by its angles
rather than the lengths of its sides. All spherical triangles with the same
angles in fact have the same size, because of a famous theorem of Harriot1
from : the angle sum of a spherical triangle, minus π, is proportional to
its area. Tere are several ways to tile the surface of the sphere with con-
gruent triangles. Figure .shows one in which the sphere is divided into
triangles, each of which has angles π~,π~,π~. Alternate triangles
have been cut out of the sphere, to make it easier to see them all, and the
sphere has been illuminated from the inside. Tis then is the standard
Figure .: Tiling the sphere with triangles
model of spherical geometry: “points” are ordinary points on the sphere,
“lines” are great circles, and “angles” are the angles between the tangents
to the great circles at their point of intersection. “Distance,” if we wish to
use the concept, is the distance between points on the sphere, measured
along the (shorter) piece of the great circle connecting them.
Now we move to another model, by projecting the sphere onto the
plane. Speciﬁcally, we use the light inside the sphere (at its north pole)
to cast a shadow on the plane. Te result is shown in ﬁgure .. Te pic-
1Tomas Harriot was mathematical consultant to Sir Walter Raleigh, and traveled
with him on some of his voyages.

HISTORICAL INTRODUCTION
■

Figure .: Projecting the sphere onto the plane
ture shows two remarkable features of projection from the north pole,
which is known as stereographic projection:
• circles map to circles (or, in exceptional cases, to straight lines, which
we might call “circles of inﬁnite radius”), and
• angles are preserved.
Tus “points” are still points, “lines” are still circles, and “angle” is still
the angle between the tangents to the circles. “Distance,” alas, is not a
Euclidean distance of any kind, since equal distances on the sphere can
be mapped to unequal Euclidean distances in the plane. Likewise, “area”
is not Euclidean area, but we can easily measure it by the angle sum
minus π.
Strictly speaking, we have not projected the whole sphere onto the
plane, but the sphere minus its north pole (the light source). To correct
for this we add a point at inﬁnity to the plane—a point approached by
the shadows of points on the sphere as they approach the north pole. Te
point at inﬁnity completes each straight line to a closed curve, so that they
too become circles. Tus our second interpretation of spherical geometry
models all “lines” by circles, and “angles” by angles between circles. In the


■
CHAPTER 
next subsection we will see a similar model of non-Euclidean geometry.
Models of Non-Euclidean Geometry
Beltrami () discovered several models of non-Euclidean geometry;
that is, of Euclid’s basic axioms plus a non-Euclidean parallel axiom stat-
ing that for any line l and a point P outside it, there is more than one line
m that does not meet l. Te easiest of Beltrami’s models to view in its
entirety is the one shown in ﬁgure ..
Figure .: Te conformal disk model
In this model, “points” are points in the interior of the disk, “lines” are
circular arcs perpendicular to the boundary circle of the disk (counting
the straight line segments through the disk center as circles of inﬁnite
radius) and “angle” is the angle between circles. As in spherical geometry,
triangles are congruent if they have the same angles, so in this picture
the disk is ﬁlled with inﬁnitely many congruent triangles, each with the
angles π~,π~,π~. Tese are the smallest triangles that can tile the non-
Euclidean plane and, as in spherical geometry, their area is determined
by their angle sum: π minus the angle sum of a non-Euclidean triangle is

HISTORICAL INTRODUCTION
■

proportional to its area.
As with the plane model of spherical geometry, the precise deﬁnition
of “distance” is complicated. But here one gets a better feel for it because
there are so many triangles, each of the same non-Euclidean size. One
sees, for example, that inﬁnitely many triangles lie along each “line,” so
each “line” is of inﬁnite “length.” It is even possible to accept that each
“line” gives the least “distance” between any two points in the disk, since
one counts fewer triangles when travelling on a circular arc perpendic-
ular to the boundary than on any other route. Tus one can understand
how the model satisﬁes the basic axioms of Euclid. But it clearly does not
satisfy the parallel axiom. If one takes the vertical “line” l through the
center of the disk and the point P, say, somewhat to its right, then there
are diﬀerent “lines” m and n through P that do not meet l, as is clear
from ﬁgure ..
l
m
n
P
Figure .: Failure of the parallel axiom
So, when the details of Beltrami’s construction are checked, one has
a model for the basic axioms of Euclid plus a counterexample to the par-
allel axiom. Terefore, the parallel axiom does not follow from the other
axioms of Euclid, and hence the theorems equivalent to the parallel ax-
iom (such as the four mentioned in the previous section) likewise do not
follow from Euclid’s other axioms. However, the equivalences between


■
CHAPTER 
the parallel axiom and these theorems are provable from Euclid’s other
axioms. Tis situation is typical of reverse mathematics: we have a base
theory which is too weak to prove certain desirable theorems, but strong
enough to prove equivalences between them.
New Foundations of Geometry and Mathematics
Te discovery of non-Euclidean geometry shook the foundations of math-
ematics, which before the nineteenth century had been implicitly based
on Euclid’s concepts of “line” and “plane.” By creating doubts about the
meaning of “line” and “plane,” non-Euclidean geometry prompted a
search for new foundations in arithmetic, since the fundamental prop-
erties of numbers were not in doubt.
In particular, the “line” was rebuilt as the system R of real numbers,
which has both algebraic and geometric properties. Te next few sections
describe the emergence of geometry based on, or inﬂuenced by, the real
number concept. In chapter we will see how the real numbers also be-
came the foundation of analysis.
.VECTOR GEOMETRY
Te ﬁrst major advance in geometry afer the Greeks was made by Fermat
and Descartes in the s, and published in the Geometry of Descartes
(). Teir innovation was to use algebra in geometry, describing lines
and curves by equations, thereby reducing many problems of geometry
to routine calculations. But before they could “algebraicize” geometry
they had to arithmetize it, a step that already took them far beyond Eu-
clid. In fact, it was the ﬁrst step towards a sweeping arithmetization of
geometry and analysis that occurred in the nineteenth century.
As every mathematics student now knows, the Euclidean plane is
arithmetized by assigning real number coordinates x and yto each point
P in the plane. Te numbers x and y are visualized as the horizontal
and vertical distances to P from the origin O, in which case the distance
SOPS of P from O is
»
x+ yby the Pythagorean theorem (ﬁgure .).
But P can be deﬁned as the ordered pair2 `x, ye, and its distance from O
deﬁned as
»
x+ y. More generally, the distance from P= `x, ye to
2In this book I use `a,be to denote the ordered pair of a and b, because (a,b) will be
on duty to represent the open interval between a and b.

HISTORICAL INTRODUCTION
■

P= `x, ye is deﬁned by
SPPS =
»
(x−x)+ (y−y).
Points `x, ye lie on a line if they satisfy an equation of the form ax+by+c
= (which is why we call such equations linear), and equations for cir-
cles are quadratic equations expressing constant distance for a point. For
example, the points at distance from O satisfy the equation x+ y= .
O
P = `x, ye
x
y
»
x+ y
Figure .: Coordinatizing the plane
Tus one has an easy algebraic translation of all of Euclid’s geometry—
and more, since there is no obstacle, other than algebraic diﬃculty, to
the study of curves satisfying arbitrary polynomial equations. Tus Eu-
clidean geometry and algebraic geometry are not a perfect match. Eu-
clidean geometry ought to be “more linear.”
Grassmann’s Linear Geometry
Te perfect algebraic match for Euclidean geometry was found by Grass-
mann in the s, in the concept of a real vector space. His ﬁrst works on
the subject, Grassmann () and Grassmann () were impenetrable
to other mathematicians, and his idea started to gain traction only when
Peano () gave axioms for real vector spaces.
Deﬁnition. A real vector space is a set V of objects called vectors (de-
noted by boldface letters), which includes a vector called the zero vector,
and for each u > V a vector −u called the negative of u. V has operations
of addition and scalar multiplication (by a,b,c,... > R) satisfying the


■
CHAPTER 
following conditions:
u + v = v + u
u + (v + w) = (u + v) + w
u + = u
u + (−u) = 
u = u
a(u + v) = au + av
(a + b)u = au + bu
a(bu) = (ab)u
Typically V = Rn = `x,...,xne  x,...,xn, with the origin, +
the usual sum of n-tuples, and scalar multiplication by a > R given by
a`x,...,xne = `ax,..., axne.
Tis vector space is called the real n-dimensional aﬃne space. It is not yet
a Euclidean space because it has no concept of distance or angle, but it
has considerable geometric content. Rn has lines, including parallel lines,
and also a concept of “length in a given direction.” For example, one can
say that 
v > R is the midpoint of the line from to v, and in general
av is a times as far from as v is. Another concept that makes sense in
vector geometry is that of center of mass. In particular, the center of mass
of the triangle with vertices u,v,w is the point 
(u + v + w).
To promote vector geometry to Euclidean geometry one adds the
concept of inner product of vectors u and v, written u ċ v:
Deﬁnition. If u = `u,...,une and v = `v,...,vne then
u ċ v = uv+  + unvn.
In particular, in Rwe have
u ċ u = u
+ u
,
so the Euclidean length SuS of u is given by SuS = ºu ċ u. As Grassmann
() remarked, the deﬁnition of inner product makes the Pythagorean
theorem true almost by deﬁnition.
Te Euclidean angle concept also derives from the inner product be-
cause
u ċ v = SuSSvScos θ,

HISTORICAL INTRODUCTION
■

where θ is the angle between the lines from to uandv respectively. Tus
Grassmann () found another way to describe Euclidean geometry as
a “base theory” plus the “right axiom” to derive the Pythagorean theorem.
Interestingly, his base theory (the vector space axioms) admits extension
by a diﬀerent axiom that gives non-Euclidean geometry.
Making a Vector Space Non-Euclidean
Te key property of Grassmann’s inner product is that it is positive def-
inite; that is, SuS= u ċ u A if u x , so every nonzero vector has pos-
itive length. Einstein’s theory of special relativity motivated Minkowski
() to introduce a non-positive deﬁnite inner product on the space R
of spacetime vectors `t,x, y,ze, namely
`t,x, y,ze ċ `t,x, y,ze = −tt+ xx+ yy+ zz.
With the Minkowski inner product u = `t,x, y,ze has “length” SuS given
by
SuS= −t+ x+ y+ z,
which clearly is zero or negative for many vectors. To make visualization
easier we consider the corresponding concept of length on the space R
of vectors u = `t,x, ye, namely
SuS= −t+ x+ y.
Tis means that in Rwe have a “sphere3 of radius
º
−about O,” con-
sisting of the vectors u = `t,x, ye such that
−t+ x+ y= −.
Tis surface in Ris the hyperboloid x+ y−t= .
It turns out that the Minkowski distance on the surface of the hyper-
boloid gives a non-Euclidean geometry—the same as that of the Beltrami
model in the previous section. Figure ., which is derived from a pic-
ture by Konrad Polthier of the Freel University of Berlin, shows the con-
nection between the two. Te tiling of the disk projects to a tiling of the
hyperboloid by triangles that are congruent in the sense of Minkowski
distance.
3In a remarkable prophecy, Lambert () conjectured that there might be a geome-
try on the sphere of imaginary radius for which the angle sum of a triangle is less than π,
and where the area of a triangle is proportional to π minus its angle sum. Tis is indeed
what happens in Beltrami’s non-Euclidean geometry.


■
CHAPTER 
Figure .: Te hyperboloid model of non-Euclidean geometry
.HILBERT’S AXIOMS
Euclid’s Elements is the ﬁrst organized presentation of mathematics that
survives from ancient times. It is best known for its treatment of geome-
try, deducing theorems from axioms in a style that became standard for
mathematics until the nineteenth century. Ten the discovery of non-
Euclidean geometry put Euclid’s geometry under the microscope, and by
the late nineteenth century his axioms were found to have some gaps. But
this only strengthened the movement towards axiomatization. Te gaps
in Euclid were ﬁlled by Hilbert () and, in the meantime, axiomatic
treatments of number theory and algebra were given by Dedekind, Peano,
and others.
Euclid also gave a deductive treatment of numbers in the Elements,
but it was complicated by the Greek discovery of irrationality, which was
thought to disqualify some geometric quantities (such as the diagonal
º
of the unit square) from being numbers at all. Irrational quantities
were not fully reconciled with whole or rational numbers until the pub-
lication of the Dedekind () book on irrational numbers. Dedekind
found that Euclid had been on the right track—the only new idea needed
to make his theory of irrational quantities part of his theory of numbers

HISTORICAL INTRODUCTION
■

was acceptance of inﬁnite sets of rational numbers (see section .).
Te two main threads of the Elements, geometry and the real num-
bers, were combined in the Grundlagen der Geometrie (foundations of
geometry) of Hilbert (). Here, Hilbert not only ﬁlled the gaps in Eu-
clid’s geometric axioms, he also introduced two axioms that complete a
geometric path to the real number system R. Tis was a historic achieve-
ment, though Hilbert’s path is not the best for all mathematical purposes.
Te arithmetization path to real numbers via the rational numbers ulti-
mately proved more useful for analysis, and we will take it up again in
chapter .
Hilbert () found that Euclid’s geometry and the arithmetic of real
numbers follow from axioms, described below. All but two of them
are purely geometric. Te exceptions are the Archimedean axiom, which
says no line segment is “inﬁnitely large” compared with another, and the
completeness axiom, which says there are no “gaps” in the points on a
line. (Tese two axioms were not needed by Euclid, who considered only
points constructible by ruler and compass.) Teir purpose is to prove that
any line satisfying the axioms is essentially the line R of real numbers. It
follows that any plane satisfying the axioms is essentially the plane of
Descartes, so Euclid’s geometry has really only one model—the plane of
pairs of real numbers.
Tis very satisfying convergence of the geometric and arithmetic view-
points comes about because Hilbert’s geometric axioms yield not just Eu-
clid’s geometric theorems—they also yield algebra, which Euclid did not
foresee. In fact, algebraic structure arises in stages corresponding to ax-
iom groups, which Hilbert introduces one by one.
Axioms of incidence. Tese relate lines and points. Tey include Euclid’s
axiom that two points determine a line, and a form of the parallel axiom:
for any line l and point P ~> l there is exactly one line m through P not
meeting l. Also (which went without saying in Euclid) each line has at
least two points, and there are three points not in a line.
Axioms of order. Te ﬁrst three of these axioms say the obvious things
about the order of three points on a line: if B is between A and C then
it is also between C and A; any A and C have a point B between them;
for any three points, one is between the other two. Te fourth, called
Pasch’s axiom, is about the plane: a line meeting one side of a triangle at


■
CHAPTER 
an internal point meets exactly one of the other sides.
Axioms of congruence. Te ﬁrst ﬁve of these axioms are about equality
of line segments or angles, and the addition of line segments. Tey state
the existence and uniqueness of line segments or angles equal to given
ones, at a given position. Tey also say (as Euclid put it) “things equal to
the same thing are equal to each other.” Te last congruence axiom is the
SAS criterion for congruence of triangles.
Circle intersection axiom. Two circles meet if one of them contains
points both inside and outside the other. (Euclid overlooked this axiom,
even though he assumed it in his very ﬁrst proposition, constructing an
equilateral triangle.) Note that the points “inside” a circle of radius r are
those at distance < r from its center.
Archimedean axiom. For any nonzero line segments AB and CD there
is a natural number n such that n copies of AB are together greater than
CD.
Completeness axiom. Suppose the points of a line l are divided into two
nonempty subsets A and B such that no point of A is between two points
of B and no point of B is between two points of A. Ten there is a unique
point P, in either A or B, that lies between any other two points, of which
one is in A and the other is in B. (Tus, there is no “gap” between A and
B.)
Tese axioms give precise meaning to the idea of a theorem being
equivalent to the parallel axiom: namely, the equivalence is provable in
the base theory of Hilbert’s axioms minus the parallel axiom. All theorems
previously thought to be equivalent to the parallel axiom (such as those
mentioned in section .) are equivalent to it in this sense. As suggested
at the end of section ., proving equivalences in a weaker system is the
hallmark of reverse mathematics. We will see further historical examples
in the later sections of this chapter. Today, the idea has been most fully
developed in systems of analysis, and we will see some its main results in
chapters and .

HISTORICAL INTRODUCTION
■

Algebraic Content of Hilbert’s Axioms
Te incidence axioms allow us to deﬁne sum and product of points on a
line by means of the constructions shown in ﬁgures .and ..
Te sum construction chooses a point on the line then, for any
points a and b on the line, constructs a point a + b with the help of the
parallels shown. In eﬀect, the parallels allow the point b to be “translated”
along the line by the distance between and a.

a
b
a + b
Figure .: Adding points on a line
Te product construction also requires a point on the line (the “unit
of length”), and various parallels now allow us to “magnify” the distance
from to b by the distance from to a, producing the point ab.


a
b
ab
Figure .: Multiplying points on a line
With the help of the congruence axioms one can prove that the sum
and product operations just deﬁned have the following algebraic prop-


■
CHAPTER 
erties, the ﬁeld properties (also used as the axioms that deﬁne a ﬁeld):
a + b = b + a
a ċ b = b ċ a
(commutativity)
a + (b + c) = (a + b) + c
a ċ (b ċ c) = (a ċ b) ċ c
(associativity)
a + = a
a ċ = a
(identity)
a + (−a) = 
a ċ a−= for a x 
(inverse)
a ċ (b + c) = a ċ b + a ċ c
(distributivity)
It is easiest to deduce the ﬁeld properties from the congruence ax-
ioms, but there is in fact a pure incidence axiom—the so-called Pappus
theorem—from which all the ﬁeld properties follow with the help of the
other incidence axioms.4 Tus the algebraic structure of a ﬁeld emerges
from axioms that Euclid almost completely overlooked: the incidence ax-
ioms describing how points and lines interact.
Te order axioms give the points on a line an ordering, B, with the
properties that, for any a,b,c:
• a B a,
• if a x b then either a < b or b < a, but not both,
• if a B b and b B c then a B c.
Te order relation meshes with the ﬁeld properties to produce an ordered
ﬁeld. Its deﬁning properties, beyond the ﬁeld properties above, are that:
• if a B b then a + c B b + c,
• if B a and B b then B ab.
Finally, the Archimedean and completeness axioms say that the or-
der relation is Archimedean and complete in the sense described by those
axioms. It can be proved that a complete Archimedean ordered ﬁeld is iso-
morphic to the ﬁeld R of real numbers. Given such a ﬁeld F, the idea of
the proof is to build a copy of R inside F in the following stages. (Readers
not yet familiar with the construction of the real numbers as Dedekind
cuts may wish to take these steps on faith and conﬁrm them later when
reading chapter .)
4Incidentally, the ﬁeld properties can be proved in the setting of projective geometry,
where all axioms are incidence axioms and the parallel axiom is replaced by the axiom
that any two lines meet in a unique point. Te above constructions can be carried out in
this setting when we call one line a “line at inﬁnity” and call lines “parallel” when they
meet on the line at inﬁnity.

HISTORICAL INTRODUCTION
■

. From the element > F build the “positive integers” of F, namely
,
+ ,
+ + ,
+ + + ,...,
using the + operation of F.
. Build “integers” of F using and the −operation.
. Build “rational numbers” of F using inverse and product opera-
tions.
. Use the order and completeness properties of F to build “real num-
bers” of F as Dedekind cuts in the “rational numbers” of F.
. Check that the “real numbers” of F exhaust the members of F and
have the same properties as the actual real numbers.
Tis proof shows that any complete Archimedean ordered ﬁeld is es-
sentially the “same” as R, so every line in Hilbert’s geometry is essentially
the real number line. Te next question is: how well do we understand R?
.WELL-ORDERING AND THE AXIOM OF CHOICE
In Book V of the Elements, Euclid gave a very sophisticated treatment
of the geometric line and its relationship to the rational numbers. He
stopped short of declaring irrational points to be numbers, but he es-
sentially showed that each point is approximated arbitrarily closely by
rational numbers. Tis means that each point is determined by rational
numbers (those to the lef of the point, for example), so we need only ac-
cept inﬁnite sets as mathematical objects in order to view points as arith-
metical objects.
However, until the mid-nineteenth century, most mathematicians re-
jected the idea of inﬁnite sets as mathematical objects. Tey were in-
ﬂuenced by the ancient Greek distinction between “potential” and “ac-
tual” inﬁnity. For example, it was permissible to view the natural num-
bers as an open-ended process—start with and keep adding —but not
as a completed or “actual” entity N = ,,,.... Today, this seems a
rather hair-splitting distinction, because—as far as anyone knew in the
mid-nineteenth century—all inﬁnite sets could be viewed as “potential”
inﬁnities.
For example, the integers, Z, can be viewed as a potential inﬁnity by
listing them in the order
,
,
−,
,
−,
,
−,
... .


■
CHAPTER 
Te positive rationals can likewise be viewed as a potential inﬁnity by
listing them in the order

,

,

,

,

,

,

,

,

,
... .
(Te rule is to list fractions m~n in order of the sums m + n: ﬁrst those
with m+n = , then those with m+n = , then those with m+n = , and
so on.) And then we can view all the rationals, Q, as a potential inﬁnity
by listing positive and negative elements alternately as we did with Z:
,

,
−
,

,
−
,

,
−
,

,
−
,

,
−
,
... .
Tus N, Z, and Q, which we now regard as sets, could all be ﬁnessed as
“potential” inﬁnities by mathematicians who were fastidious about the
distinction between potential and actual.
A much more serious problem arose in , when Cantor showed
that R is not by any means a potential inﬁnity.
Uncountability
Te means by which we showed the sets N, Z, and Q to be potential
inﬁnities was by counting, or ordering their members in a sequence:
st member,
nd member,
rd member,
...
—with an implied process for counting members that reaches each mem-
ber at some ﬁnite stage. Cantor () showed that R is uncountable in
the sense that no such ordering of R exists.
He showed that any sequence x,x,x,... of real numbers fails to
include some real number x. In fact, given the decimal expansions of
x,x,x,... we can compute the decimal expansion of x. For example,
we can use the rule:
nth decimal digit of x =
¢¨¨¦¨¨¤

if nth decimal digit of xn x 

if nth decimal digit of xn = .
Ten x x each xn because x diﬀers from xn in the nth decimal place.
Tus if we accept R we have to accept it as an actual inﬁnity. Te proof
given here is essentially one given by Cantor (). It is, incidentally, a
harbinger of many proofs about R that we will see later in this book.

HISTORICAL INTRODUCTION
■

Given an arbitrary object, such as a sequence or a function, we prove
existence of some other object by computing it from the given object. Te
computation of one object relative to others is seldom noticed in classical
analysis—in fact, many mathematicians have thought that Cantor’s proof
is nonconstructive—but it is important, as we will see in later chapters.
Well-ordering
Cantor’s theorem shows that R cannot be ordered in the simple way that
N, Z, and Q can: st member, nd member, rd member, ... . Neverthe-
less Cantor () stated his belief in a more general kind of order:
In a later article I shall discuss the law of thought that says that it
is always possible to bring any well-deﬁned set into the form of a
well-ordered set—a law which seems to me fundamental and mo-
mentous and quite astonishing. (Ewald (), vol. II, p. )
Cantor called a set S well-ordered if the ordering is such that every non-
empty subset T of S has a least member. Tis is clearly the case for the
orderings of N, Z, and Q above, where each member is labeled with a
positive integer (take the member of T whose integer is least). It is also
the case for the following ordering of Z,
,
,
,
,
...,
−,
−,
−,
−,
...,
in which and the positive integers precede all the negative integers. If
T is a nonempty subset of Z then the least member of T in the above
ordering is
the least non-negative integer in T, if T has any non-negative members,
or
the greatest negative integer in T, if T has only negative members.
When it comes to R, however, all human ingenuity fails to ﬁnd a well-
ordering of the real numbers. Te usual ordering < fails dismally, because
subsets such as x > R  < x have no least member. Tus Cantor was
very bold to assume that well-orderings exist for all “well-deﬁned” sets—
which surely include R.
Te Well-ordering Teorem and Zermelo’s Axioms
Cantor perhaps thought that his “fundamental law of thought” should
be an axiom of set theory. But he did not suggest a set of axioms for set


■
CHAPTER 
theory, so it remained unclear whether well-ordering should be an axiom
or a theorem. Te picture became clearer when Zermelo () proved
well-ordering from an intuitively simpler assumption, now known as the
axiom of choice.
Axiom of choice (AC). For any set X of nonempty sets x there is a choice
function; that is, a function f such that f(x) > x for each x > X.
To provide a precise framework for his proof (and at the same time
to clear up some doubts about the foundations of set theory) Zermelo
() gave the ﬁrst set of axioms for set theory. Within his system, now
called Z, it was possible to prove that AC is equivalent to the well-ordering
theorem. Fraenkel () strengthened one of Zermelo’s axioms, obtain-
ing a system now known as ZF set theory.
Te ZF axioms of set theory have remained stable since and
have become generally accepted as a foundation for all of mainstream
mathematics, at least when supplemented by AC. Indeed, it was proved
in ZF that AC is equivalent to many sought-afer theorems, including
the well-ordering theorem, that were apparently not provable outright
in ZF.
Tis put AC in a position, relative to ZF, like that of the parallel axiom
relative to the other axioms of Euclid (or, more precisely, relative to the
other axioms of Hilbert). Teorems proved equivalent to AC in ZF were
not of clear interest until it was known that AC is not provable in ZF. Tis
was done by Cohen (). As Beltrami in did for the parallel axiom,
Cohen showed the unprovability of AC by constructing a model of ZF in
which AC is false. His construction, like Beltrami’s, was a breakthrough
that completely changed the face of the subject. It is unfortunately too
technical to be described in this book, but we can describe some of its
consequences.
A Mathematical Equivalent of the Axiom of Choice
Like the parallel axiom in geometry, AC in set theory occupies an im-
portant position “above” the basic (ZF) axioms. ZF cannot prove AC,
but ZF is a good base theory because it can prove that AC is equivalent
to many other interesting statements of set theory and general mathe-
matics. In this sense, AC is the “right axiom” to prove these statements.
As we know, one such statement is the well-ordering theorem. Another
is the following property of vector spaces over an arbitrary ﬁeld F. (We

HISTORICAL INTRODUCTION
■

deﬁned a real vector space in section .. Te deﬁnition of an arbitrary
vector space is the same, except with F in place of R.)
Existence of a vector space basis. Any vector space V has a basis; that is,
a subset U of vectors u such that:
(i) For any v > V there are u,...,uk > U and f,..., fk > F such that
v = fu+  + fkuk. (“U spans V.”)
(ii) For any distinct u,...,uk > U and f,..., fk > F, = fu+  +
fkuk if and only if f=  = fk = . (“U is an independent set.”)
Te existence of a basis is clear for ﬁnite-dimensional real vector
spaces, where we can take the basis vectors u to be the unit points on the
coordinate axes. Te ﬁrst case in which a basis is hard to ﬁnd—in fact
utterly mysterious—is when R is viewed as a vector space over Q. Hamel
() showed existence of a basis with the help of a well-ordering of R,
but the so-called Hamel basis is no easier to deﬁne than a well-ordering
of R itself.
Tus it is no surprise that all proofs of the existence of a basis for an
arbitrary vector space depend on AC. We now know that AC is unavoid-
able because Blass () showed that existence of such a basis can be
proved equivalent to AC in ZF.
.LOGIC AND COMPUTABILITY
Te previous sections of this chapter suggest that the real number system
R is an essential part of the foundations of mathematics. When we turn
to analysis, in the next chapter, the unavoidability of R will become even
more obvious. At the same time, we have seen that our understanding of
R can never be complete, if only because of the uncountability of R.
Since we cannot list all real numbers we certainly cannot list all facts
about real numbers, let alone set up an axiom system for proving them.
Tis observation is the ﬁrst step on the road towards the profound theo-
rems of Gödel () and Turing () about unprovable theorems and
unsolvable algorithmic problems—a road we will describe in more detail
in chapter .
Gödel’s theorem rules out any possibility of a complete axiom system
for analysis. Yet it also presents an opportunity. If we are lucky we may be
able to ﬁnd a base theory for analysis, in which we can prove that sought-
afer theorems are equivalent to certain axioms—axioms that play a role,


■
CHAPTER 
like that of the parallel axiom in geometry or AC in set theory, of attract-
ing desirable theorems into their “orbit” of equivalent theorems.
Tis indeed is what happens. We now know a good base theory, called
RCA, and at least four set existence axioms that play this role for the-
orems of analysis. Moreover, the axioms are of increasing strength, in
the sense that each implies the one before, so they classify theorems of
analysis by increasing strength. Te crucial axioms state “set existence”
rather than “real number existence” because it is technically convenient
to encode real numbers by sets of natural numbers (see next chapter for
details). Te axioms in question state there is a set of natural numbers n
corresponding to each property φ(n) in a certain class.
For RCAwe assert set existence for the class of computable proper-
ties φ(n). Tese are the properties for which there is an algorithm that
decides, for each n, whether φ(n) holds. It turns out, because noncompu-
table properties exist, that RCAis too weak to prove many important
theorems of analysis. But RCAcan prove many equivalences, since these
ofen involve computing an object (such as a sequence or a function)
from a given object. For example, RCAcannot prove the Bolzano-
Weierstrass theorem, but it can prove that Bolzano-Weierstrass is equiva-
lent to an axiom stating the existence of sets realizing each arithmetically
deﬁnable property φ(n). Tus, if we add the latter axiom to RCA, we
obtain a stronger system in which Bolzano-Weierstrass is provable.
In this way we ﬁnd, rather surprisingly, that most of the well-known
theorems of analysis can be assigned a precise level of “strength.” Tey
are either at the lowest level—provable in RCA—or at a higher level
represented by one of four set existence axioms. In this book we focus
mainly on the lower three levels, where most of the well-known theorems
of analysis are known to reside (see chapters and ).
Arithmetization
From the discussion above we can see that a study of arithmetic and com-
putation will be needed before we can deﬁne the system RCA. Arith-
metic itself is axiomatized in a fairly standard way that goes back to the
Peano axioms of Peano (). But before that we have to talk about
arithmetization—both in the nineteenth-century sense of making anal-
ysis “arithmetical,” and in the s sense of making logic and computa-
tion “arithmetical.”

HISTORICAL INTRODUCTION
■

Te remarkable convergence of analysis and computation to a com-
mon source in arithmetic is what makes the reverse mathematics of anal-
ysis possible. Te arithmetization of analysis is discussed in chapter ,
computation is discussed in chapter , and its arithmetization in chapter
. We also give a refresher course on the real numbers and continuity in
chapter , including classical proofs of the best-known theorems.

C H A P T E R 
■■■■■
Classical Arithmetization
At the International Congress of Mathematicians in Paris in , Henri
Poincaré summed up the situation in the foundations of analysis as fol-
lows:
Today in analysis there remain only natural numbers or ﬁnite or
inﬁnite systems of natural numbers ...Mathematics, as one says,
has been arithmetized. (Poincaré (), p. )
Poincaré was speaking at the end of a century of progress and upheaval in
mathematics. As we know from chapter , the nineteenth century brought
to light new geometries, new algebras, new concepts of number and func-
tion, and new inﬁnities—for which the traditional foundation of mathe-
matics, in Euclid, was clearly inadequate.
In the hope of building a secure foundation for the vast new ediﬁce of
mathematics, mathematicians turned to the system N of natural numbers
,,,,... . From them (and from sets of them) they rebuilt the real and
complex numbers, functions, and the geometric objects that were then
the main concern of mathematicians. Tis was the project of arithmeti-
zation.
In this chapter we describe how one proceeds from natural to ra-
tional numbers, then to real and complex numbers, and to continuous
functions—thus arithmetizing the foundations of analysis and geome-
try. Ten we turn to the foundations of the natural numbers themselves,
the Peano axioms, which gives a ﬁrst glimpse of the logic underlying the
arithmetization project.

CLASSICAL ARITHMETIZATION
■

.FROM NATURAL TO RATIONAL NUMBERS
Integers
We assume for the moment that the natural numbers ,,,,... and
their operations of plus (+) and times (ċ) are given (section .explains
further). From them we create the system Z of integers as ordered pairs
`m,ne of natural numbers m,n, where the intended interpretation of
`m,ne is m−n. Tis means that the negative integer −is represented by
inﬁnitely many pairs:
−= `,e = `,e = `,e = `,e =  ,
however, we can tell when two pairs represent the same integer by a test
involving only natural numbers and addition, namely:
`m,ne = `m,ne  m+ n= m+ n.
Te creation of negative numbers from pairs of natural numbers is not
simply a pure mathematical abstraction. Te same idea has been used for
centuries in double entry bookkeeping, where an account balance (which
may be negative) is expressed by a pair of positive numbers, the amounts
of credit and debit. Tis idea goes back to Pacioli (), and its role in
the history of negative numbers is described in Ellerman ().
It is also easy, with the intended interpretation in mind, to extend the
+ and ċ functions from natural numbers to the integers. Namely,
`m,ne ċ `m,ne = `mm+ nn,mn+ mne.
Notice that this deﬁnition answers the vexed question of what (−)ċ(−)
is, because −is represented by the pair `,e and
`,e ċ `,e = `ċ + ċ ,ċ + ċ e = `,e,
which represents the number .
And of course (because this is the purpose of negative integers) we
now have the subtraction operation deﬁned for all integers:
`m,ne −`m,ne = `m+ n,m+ ne.
Tere are a couple of tedious, but straightforward, things to check.


■
CHAPTER 
. Tat +, −, and ċ are well deﬁned; that is, independent of the choice
of representatives.
. Tat +, −, and ċ have the desired algebraic properties—the so-called
ring axioms—which are the following (where −a stands for −a).
a + b = b + a
a ċ b = b ċ a (commutativity)
a + (b + c) = (a + b) + c
a ċ (b ċ c) = (a ċ b) ċ c
(associativity)
a + = a
a ċ = a
(identity)
a + (−a) = 
(inverse)
a ċ (b + c) = a ċ b + a ċ c
(distributivity)
Tese depend on related properties of the natural numbers, dis-
cussed further in section ..
Rational Numbers
From the integers we create the system Q of rational numbers as ordered
pairs `i, je of integers, where j x . Te intended interpretation of `i, je
is i~j, so again there are inﬁnitely many representations of each rational
number—but of course we are used to the fact that each rational number
is expressed by inﬁnitely many fractions, diﬀering only by a common
factor in i and j.
We are also used to the rule for multiplying fractions,
`i, je ċ `i, je = `ii, jje,
and the rule for adding them by taking the “common denominator” jj:
`i, je + `i, je = `ij+ ij, jje.
Te latter rule—a notorious stumbling block in elementary mathematics—
can be better appreciated when one tests the claim that + is well-deﬁned
for rational numbers. Since
`i, je = `mi,mje
for any integer m x ,
`i, je = `ni,nje
for any integer n x ,
their sum is
`minj+ nimj,mjnje.
Te latter expression is indeed independent of m and n, because of the
common factor mn in both members of the pair.

CLASSICAL ARITHMETIZATION
■

Algebraic Properties
Te deﬁnitions of integers and rational numbers above show why ques-
tions about them can, in principle, be reduced to questions about natural
numbers and their addition and multiplication. Tis is what it means to
say that the natural numbers are a foundation for the integer and rational
numbers.
In practice, of course, we prefer to work with integer or rational num-
bers. Tey admit not just addition and multiplication, but also subtrac-
tion and division, and their rules for calculation are simpler. We could
say that the rational numbers have better algebraic properties than the
natural numbers. Tese are the ﬁeld properties—already mentioned in
the geometric context of section .—which are the above ring proper-
ties plus the multiplicative inverse property: a ċ a−= when a x . Nev-
ertheless, the rules for calculating with rational numbers can be traced
back to the natural numbers, as we will see in section ..
Te next steps in the arithmetization project go beyond algebra. By
admitting sets of rational numbers we can enlarge the number system to
one that admits certain inﬁnite operations, such as forming inﬁnite sums.
Tis is crucial to building a foundation for analysis.
.FROM RATIONALS TO REALS
Since the time of Pythagoras it has been known that rational points do
not ﬁll the line. Tey do not include the point
º
, for example. To ﬁll gaps
in the line, mathematicians have devised various inﬁnite processes that
create new points, such as inﬁnite sums, inﬁnite decimals, and inﬁnite
continued fractions. But the most direct way to ﬁll the gaps in the rational
numbers is one that stems from an idea of Dedekind (): ﬁll each gap
by the gap itself!
We can view each gap (or cut as Dedekind called it) in the set Q of
rational numbers as a division of Q into two disjoint subsets, L and U
(“lower” and “upper”), where L has no greatest member, U has no least
member, and each member of L is less than all members of U. Tus gaps,
too, are inﬁnite objects, but they are the objects most suitable for com-
pleting the number line. Tere is Q, and there are gaps in Q, and together
they ﬁll the line.


■
CHAPTER 
Tis may seem at ﬁrst like a trick, a play on words, but the trick works
extremely well. It not only completes the set Q of rational numbers to the
gapless set R of real numbers, but also ensures that R is a ﬁeld, because
the ﬁeld properties are directly inherited from Q. Tis becomes clear if
we extend the concept of Dedekind cut to include rational numbers as
well, by dropping the condition that L have no greatest member. Indeed,
each real number can be represented by a lower set L alone, which we
will call a lower Dedekind cut:
Deﬁnition. A real number is a set L of rational numbers that is bounded
above and “closed downward”: that is, if s > L and rational t < s then
t > L.
We illustrate how R inherits the ﬁeld properties from Q in the case
of addition.
Deﬁnition. If Land Lare real numbers, their sum L+ Lis deﬁned by
L+ L= s+ s s> Land s> L.
From this deﬁnition the commutative, associative, identity, and in-
verse laws for addition follow immediately. For example, here is why as-
sociativity holds:
L+ (L+ L) = s+ (s+ s)  s> Land s> Land s> L
(by deﬁnition of sum)
= (s+ s) + s s> Land s> Land s> L
(by associativity in Q)
= (L+ L) + L
(by deﬁnition of sum)
Te deﬁnition of product is a little more tricky, since multiplying
numbers in the negative part of a cut will produce arbitrarily large posi-
tive rationals, so the resulting set is not a lower Dedekind cut. One way
around this problem is to deﬁne positive reals via cuts in the positive ra-
tionals, and to deﬁne their products ﬁrst. Ten treat arbitrary reals as
pairs of positive reals as we did when constructing integers from the ra-
tional numbers. It remains true that the ﬁeld properties of multiplication
for reals follow immediately from those for rationals.
Tus the real numbers behave as we expect “numbers” to behave. Now
let us see how well they behave under inﬁnite processes. First note that

CLASSICAL ARITHMETIZATION
■

R also inherits an ordering from Q, which is naturally deﬁned in terms
of set containment.
Deﬁnition. We say L< Lif Lú L.
An immediate consequence of this deﬁnition is a principle that was
the main goal of Dedekind’s deﬁnition of real numbers:
Least upper bound principle. If X is any bounded set of real numbers
then X has a least upper bound.
Proof. Consider the lower Dedekind cuts L representing the numbers
x > X. Since X is bounded above, there is a rational number q greater
than any member of any L. It follows that the union L of all the sets L is
itself a lower Dedekind cut, deﬁning some number x.
Clearly, each L b L, so x B x for each x > X. Tat is, x is an upper
bound of X. And x is the least upper bound, because for any y < x we
have y < some member of some L, and hence y < some x > X.
j
Te least upper bound principle was ﬁrst stated by Bolzano (), be-
fore there was a deﬁnition of R precise enough to allow the principle to
be proved. In the next section we will see that the least upper bound prin-
ciple underlies many properties of R stating that a certain kind of inﬁnite
process is meaningful. Tese properties reﬂect the so-called completeness
of R.
A simple example is the inﬁnite decimal .... . We take this ex-
pression to mean the least upper bound of the sequence .,.,.,
.,..., which exists by the least upper bound principle, and is nec-
essarily . It similarly follows that any inﬁnite decimal represents a well-
deﬁned real number.
Complex Numbers
From the foundational point of view the complex numbers involve no
ideas beyond those used to construct R, so we will not study them in de-
tail. However, they are interesting historically as the ﬁrst example where
numbers were deﬁned as ordered pairs. Hamilton () deﬁned the com-
plex numbers a + bi to be the ordered pairs `a,be of real numbers, and
he deﬁned their sum and product by the rules
`a,be + `a,be = `a+ a,b+ be,
`a,be ċ `a,be = `aa−bb, ab+ abe.


■
CHAPTER 
Te latter equation is motivated by the result
(a+ bi)(a+ bi) = aa−bb+ (ab+ ab)i,
obtained by assuming that complex numbers C have the ﬁeld properties
and that i= −. With Hamilton’s deﬁnitions of sum and product the
ﬁeld properties of the complex numbers are inherited from those of the
real numbers.
.COMPLETENESS PROPERTIES OF R
Te least upper bound property concerns bounded, but otherwise arbi-
trary, sets of real numbers. In the basic analysis studied in this book we
are more likely to use bounded sequences of real numbers x,x,x,... .
Since the members of a sequence constitute a set, x,x,x,..., it is
also true that a bounded sequence of real numbers has a least upper
bound. Since this special case of the least upper bound principle is partic-
ularly important, we will name it: the sequential least upper bound prin-
ciple.
An even more special case is the monotone convergence theorem, stat-
ing that a bounded nondecreasing (or nonincreasing) sequence has a limit.
We have not deﬁned limit until now, but it is clear what the “limit” of a
bounded nondecreasing sequence should be: its least upper bound.
Deﬁnition. A sequence x,x,x,... has limit l if, for each ε A , there
is a natural number N such that
n A N  Sxn −lS < ε.
We write this relation as limn ª xn = l, or sometimes xn   l as n   ª,
and also say that a sequence is convergent if it has a limit.
With this deﬁnition it is clear that if xB xB xB  and if l is the
least upper bound of x,x,x,..., then also limn ª xn = l.
Tere is a similar story about greatest lower bounds and the limits of
nonincreasing sequences. Te greatest lower bound for any bounded set
S exists, since it is the negative of the least upper bound of −s  s > S,
and the limit of a bounded nonincreasing sequence is clearly equal to its
greatest lower bound.

CLASSICAL ARITHMETIZATION
■

Nested Sequences of Closed Intervals
Bounded monotonic sequences commonly occur in the setting of nested
sequences of closed intervals. A closed interval is a set of the form
[a,b] = x > R  a B x B b.
A sequence [a,b],[a,b],[a,b],... of intervals is called nested if
[a,b] c [a,b] c [a,b] c  .
Such sequences are implicit, for example, in inﬁnite decimals, such as
x = . ,
which encapsulates a sequence of nested intervals which “narrow down
to” x, in the sense that x is the single common point of the nested se-
quence
[,] a [.,.] a [.,.] a [.,.] a [.,.] a  .
Te existence of a common point for an arbitrary nested sequence
[a,b] c [a,b] c [a,b] c 
follows from the monotonicity of the sequences
aB aB aB  , which has least upper bound a, say, and
bB bB bB  , which has least upper bound b, say.
Since an B a B b B bn for each n, a and b belong to all the intervals
[an,bn].
If, in addition, the intervals [an,bn] become arbitrarily small then we
cannot have a < b (because the intervals eventually have length < b−a).
So in this case the nested intervals have exactly one common point. (Tis is
so in the case of inﬁnite decimals, because the length of the nth interval
is −n.)
We may call this property of R nested interval completeness.
Te Cauchy Convergence Criterion
Being bounded and monotonic is a criterion for convergence of a se-
quence that does not require any mention of the limit of the sequence.


■
CHAPTER 
But monotonic sequences are very special. Tere is in fact a completely
general convergence criterion that does not mention the limit, namely,
the criterion of Cauchy (), chapter :
Cauchy convergence criterion. A sequence x,x,x,... is convergent if
and only if, for each ε A , there is an N such that
m,n A N  Sxm −xnS < ε.
Proof. If x,x,x,... is convergent, then it has a limit l and it follows
from the deﬁnition of limit that, for each ε A , there is an N such that
n A N  Sxn −lS < ε~.
It follows in particular that
m,n A N  Sxm−xnS = Sxm−l−(xn−l)S B Sxm−lS+Sxn−lS < ε~+ε~= ε,
as required.
Conversely, if x,x,x,... satisﬁes the Cauchy convergence criterion
then the sequence is bounded, because the ﬁnite sequence x,x,...,xN
is bounded and the terms thereafer diﬀer from xN by at most ε. Ten if
we let
an = greatest lower bound of xn,xn+,xn+,...,
bn = least upper bound of xn,xn+,xn+,...,
we have nested intervals
[a,b] c [a,b] c [a,b] c  ,
which become arbitrarily small by the Cauchy criterion, and hence con-
tain a single common point, l. It follows that, for any ε A , there is an N
such that
n A N  Sxn −lS < ε,
and hence x,x,x,... converges to l.
j
Tis theorem gives another common way to express completeness of
R: every sequence satisfying the Cauchy criterion has a limit.

CLASSICAL ARITHMETIZATION
■

.FUNCTIONS AND SETS
We have now seen how integer and rational numbers reduce to natural
numbers, and how real numbers reduce to sets of rational numbers (and
hence to sets of natural numbers). Te next objects to arithmetize are
functions. In fact we have already considered certain kinds of functions.
Te sequence x,x,x,... is a function f on the natural numbers
with real number values, namely
f(n) = xn.
Tis function can in turn be viewed as the set of ordered pairs
f = `, f()e,`, f()e,`, f()e,....
Indeed, any function f with domain D can be viewed as the set
`x, ye  x > D and f(x) = y.
Tis shows how functions may be reduced to sets, but it also adds to
the plethora of ordered pairs we have already used to deﬁne integers
and rational numbers. To achieve the ultimate goal of arithmetization—
reducing all concepts of analysis to natural numbers and sets of natural
numbers—we need a way to encode pairs of numbers by numbers.
Pairing Functions
A function that maps distinct ordered pairs of numbers to distinct num-
bers is called a pairing function. We begin by discussing the most impor-
tant example: pairing functions on the set N of natural numbers. Figure
.shows an arrangement of the set NN of ordered pairs `m,ne of nat-
ural numbers that makes it clear that a pairing function exists. In fact it
shows a bijection between N  N and N.
If we order the diagonals in N  N from lef to right and pairs along
each diagonal from top to bottom, as shown, then `m,ne is the mth ele-
ment on the (m + n)th diagonal, so it occurs at position
m + (+ + +  + (m + n)) = m + (m + n)(m + n + )

.
For example, `,e is at position and `,e at position + 
= += .


■
CHAPTER 
`,e
`,e
`,e
`,e
`,e
`,e
`,e
`,e
`,e
`,e


Ð Ð Ð Ð Ð Ð Figure .: Listing the ordered pairs of natural numbers
Tus the function
P(m,n) = m + (m + n)(m + n + )

is a pairing function for NN. Tis pairing function is algebraically sim-
ple,1 hence easily handled in the formal language of Peano arithmetic we
introduce in section ..
Using it, we can encode integers and rationals by natural numbers,
and hence we can encode sets of rationals (and thereby real numbers)
by sets of natural numbers. Tus we begin to see how analysis can be
arithmetized, though there is reason to doubt that arithmetization can
give a good account of sets of real numbers, as we will see in section ..
However, we can handle sequences of real numbers.
Encoding Sequences and Certain Other Functions
Given that each real xn can be encoded by a set Xn b N, we can encode
the sequence `n,xne  n > N by the set of pairs
`n, ke  k > Xn and n > N,
and hence by the set of natural numbers
X = P(n, k)  k > Xn and n > N.
1Tis function is essentially due to Cantor (), §, who introduced the correspond-
ing function for positive integers. Surprisingly, it is the only known quadratic bijection
from N  N to N, apart from the one obtained by exchanging m and n. Pólya and Fueter
() proved that P(m, n) and P(n, m) are the only quadratic bijections that map `,e
to . I learned this from the book Smoryński (), p. .

CLASSICAL ARITHMETIZATION
■

Tus a sequence of real numbers can be encoded by a set X b N because it
is a function with domain N. Te same idea works for any function whose
domain can be encoded by N, such as a function with domain Q. In the
next section we will see that this fact allows us to encode any continuous
function on the real numbers by a set of natural numbers.
.CONTINUOUS FUNCTIONS
Te standard way to deﬁne continuous real functions, which goes back to
Cauchy (), is as follows. It formalizes the idea that f(x) “approaches”
f(a) as x “approaches” a.
Deﬁnitions. A real-valued function f is called continuous at a > R if, for
each ε A , there is a δ A such that
Sx −aS < δ  Sf(x) −f(a)S < ε.
Te function f is continuous on a set S b R if f is continuous at each
a > S.
A consequence of this deﬁnition is that a continuous function be-
haves in the expected way on convergent sequences.
Sequential continuity. If f is continuous at x = a and deﬁned at points
a, a, a,... with limn ª an = a, then f(a) = limn ª f(an).
Proof. By deﬁnition of continuity, for each ε A there is a δ A such that
Sx −aS < δ  Sf(x) −f(a)S < ε.
Also, since limn ª an = a, for each δ A there is an N such that
n A N  San −aS < δ
 Sf(an) −f(a)S < ε
by continuity at x = a.
And this says limn ª f(an) = f(a)
j
Now, since each real number a is (by the deﬁnition in section .)
the least upper bound of a set L of rational numbers, it is the limit of a
sequence a, a, a,... of rational numbers. (Obtained, for example, by
choosing each an from L at distance less than ~n from a.) Terefore,
each function f continuous at a and deﬁned within some radius δ of a is


■
CHAPTER 
deﬁned on some sequence of rational numbers a, a, a,... with limit
a. Tus it follows from sequential continuity that
f(a) = lim
n ª f(an).
In other words, each value f(a) of f is determined by the values of f at
rational points.
It follows, by the remark at the end of the previous section, that each
continuous function on R (or on an interval of R) may be encoded by a set
of natural numbers, and hence that the arithmetization project extends
at least as far as the continuous functions. Tis remarkable result is due
to Borel (), p. , and it follows that each continuous function may
be encoded by a real number. Is it not surprising that each continuous
function, no matter how complicated, can be captured by a point on the
number line?
Encoding Continuous Functions by Rational Intervals
Tere is a more direct way to deﬁne continuous functions, introduced by
Hausdorﬀ(), which leads to rather more natural encoding of them.
Deﬁnitions. An open interval of R is a set of the form
(a,b) = x > R  a < x < b.
An open set (in R) is an arbitrary union of open intervals.
Te characteristic property of an open set U is that any x > U is “prop-
erly inside” U in the sense that, for some δ A , all points within dis-
tance δ of x are also in U. Tis leads to Hausdorﬀ’s characterization of
continuous functions, in which we use the notation f((c,d)) to denote
f(x)  x > (c,d).
Hausdorﬀcharacterization of continuity. A real-valued function f on
an open set U is continuous if and only if, for each value f(x) and each
(a,b) including f(x), there is an open interval (c,d) including x such that
f((c,d)) b (a,b).
Proof. Since f is continuous, for each x > U and each ε A there is a
δ A such that
Sx −x′S < δ  Sf(x) −f(x′)S < ε.

CLASSICAL ARITHMETIZATION
■

In particular, if f(x) > (a,b) and ε = min(f(x) −a,b −f(x)) there is
a δ A such that f(x′) > (a,b) for x′ > (x −δ,x + δ) b U. So if we set
(x −δ,x + δ) = (c,d) we have
f((c,d)) b (a,b).
Conversely, if for each (a,b) including f(x) there is a (c,d) includ-
ing x with f((c,d)) b (a,b) then, for each ε A , there is (c,d) including
x with f((c,d)) b (f(x) −ε, f(x) + ε).
Consequently, if δ = min(x −c,d −x) we have
Sx −x′S < δ  Sf(x) −f(x′)S < ε,
so f is continuous at x for each x > U, and hence f is continuous on U.
j
It follows from the Hausdorﬀcharacterization that we can encode
any f continuous on an open set U by the pairs of rational intervals
`(a,b),(c,d)e such that f((c,d)) b (a,b). Tis is because x and f(x)
are determined by the rational intervals containing them, and if f((c,d))
is contained in a rational interval (a,b) we can ensure that (c,d) is also
rational, by making it slightly smaller, if necessary.
By suitable use of pairing functions we can encode the set of ordered
pairs `(a,b),(c,d)e, and hence the function f itself, by a set of natural
numbers. Tus we recover the result found in the ﬁrst part of this section.
.THE PEANO AXIOMS
In the preceding sections of this chapter we have outlined how the basic
concepts of analysis, from the real numbers to continuous functions, may
be derived from the natural numbers and sets of natural numbers. Now
it is time to lay the foundations of the natural numbers themselves, and
their accompanying operations of addition and multiplication.
Te bedrock concept of this foundation is induction, ﬁrst recognized
by Grassmann () as the basis for deﬁning addition and multiplica-
tion, and for proving their algebraic properties such as a + b = b + a.
Grassmann’s ideas were encapsulated in an axiom system for the natu-
ral numbers by Peano (), and this system is now known as Peano
arithmetic (PA).
Over the years, the statement of the Peano axioms has varied slightly.
In Peano’s original system, was taken as the least number; we take to


■
CHAPTER 
be least. Tere is also some variation in the induction axiom. It was orig-
inally stated as property of arbitrary sets of natural numbers but we now
restrict it to properties deﬁnable in the language of PA, as explained be-
low. One reason for the restriction is that we wish to separate the concept
of set of natural numbers from the concept of natural number, so we no
longer include the concept of set in the axioms of PA.
Te proper place for axioms about sets is in axiom systems for anal-
ysis, as we will see at length in chapters and .
Axioms for Successor
Te ﬁrst two Peano axioms express our intuition that the natural num-
bers are generated from by applying the successor function S:
. For all n, x S(n).
. For all m and n, S(m) x S(n)  m x n.
From these, we deduce xS(), then S()xSS(), SS()xSSS(), and
so on. In this way we can prove that
,
S(),
SS(),
SSS(),

(the terms denoting the natural numbers) are all diﬀerent from each
other.
Axioms for Sum and Product
Te next two axioms implicitly deﬁne the functions + and ċ by induction
(also called “deﬁnition by recursion” or “recursive deﬁnition”).
. For all m and n, m + = m and m + S(n) = S(m + n).
. For all m and n, m ċ = and m ċ S(n) = m ċ n + m.
Tese axioms deﬁne + and ċ for all the terms ,S(),SS(),SSS(),...
that we interpret as the natural numbers. Axiom deﬁnes m+k for all m
and for k = ; then it deﬁnes m+ k for k = S(n), provided that m+n has
already been deﬁned. In fact from Axiom we can prove all particular
facts about sums of natural numbers, such as
SS() + SS() = SSSS()
(the equation we normally write as + = ).

CLASSICAL ARITHMETIZATION
■

However, we are not yet able to prove general facts about addition,
such as a + b = b + a for all a and b.
Axiom deﬁnes m ċ k for all m and for k = ; then it deﬁnes m ċ k
for k = S(n), provided that m ċ n and the + function have already been
deﬁned. For Axioms and we can prove all particular facts about sum
and product of natural numbers, such as
SS() ċ (S() + SSS()) = SSSSSSSS()
(the equation we normally write as (+ ) = ).
But, as before, we cannot prove general facts, such as a ċ (b + c) =
a ċ b + a ċ c for all a,b, and c. Tese facts do not follow from Axioms
–, as can be shown by concocting a model of Axioms –that includes
some alien objects (unequal to , S(), SS(), ...) with peculiar sums and
products.
Axioms –are a very concise way to encapsulate all particular facts
about sums and products of natural numbers—they cover something like
“elementary school arithmetic.” But to capture the “higher arithmetic” of
general facts about numbers we need to formalize the principle of induc-
tion that we used informally to see what follows from Axioms –. It is
induction that enables us to prove the algebraic properties underlying
the ﬁeld properties of Q and R.
Induction
Induction is the principle that allows us to conclude that a property φ(n)
holds for all n once we have proved
• φ() holds (the “base step”);
• for all n, if φ(n) holds then φ(S(n)) holds (the “induction step”).
Using the symbol ∀n to denote “for all n” we express this principle by
the axiom
. [φ() and ∀n(φ(n)  φ(S(n)))]  ∀nφ(n).
Axiom is known as the induction axiom or, more precisely, as the in-
duction axiom schema. It really consists of inﬁnitely many axioms, one
for each property φthat can be written in the language of arithmetic. Tis
language has variables for natural numbers, the function symbols S, +,
and ċ, the equality symbol =, parentheses, and logic symbols. Te latter


■
CHAPTER 
are symbols for “and,” “or,” “not,” “implies,” “for all,” and “there exists.”
For more details, see the next section, which describes a classiﬁcation of
formulas in this language according to “quantiﬁer complexity.”
Te induction axiom used by Peano is worth a brief mention here,
because we will eventually use it in the system ACAof analysis discussed
in chapter . We call it set variable induction because it involves a set
variable X and says n > X instead of φ(n), namely
[> X and ∀n(n > X  S(n) > X)]  ∀n(n > X).
Examples of Proofs by Induction
Proving even a + b = b + a takes more space than we care to use here, so
we will give only two simpler examples in the same vein.
Successor is +. For all natural numbers n, S(n) = n + .
Proof. Te number is deﬁned to be S(), so
n + = n + S()
= S(n + )
by deﬁnition of +,
= S(n)
since n + = n by deﬁnition of +.
j
Commutativity of adding . For all natural numbers n, + n = n + .
Proof. Since S(n) = n+ by the previous proposition, it suﬃces to prove
S(n) = + n. We do this by induction on n.
For the base step n = we have
S() = = + 
by deﬁnition of +.
For the induction step we assume S(k) = + k, so k + = + k, and
consider S(S(k)):
S(S(k)) = S(k + )
by the previous proposition,
= S(+ k)
by the induction hypothesis,
= + S(k)
by deﬁnition of +.
Tis completes the induction step, so S(n) = +n for all natural numbers
n.
j

CLASSICAL ARITHMETIZATION
■

By further use of induction one can obtain more general results about
natural numbers, such as m + n = n + m, l + (m + n) = (l + m) + n,
mn = nm, and l(m + n) = lm + ln. Ten, by introducing negative in-
tegers and rational numbers via ordered pairs as in section ., we can
prove all the ring properties of the integers and the ﬁeld properties of the
rationals. Tis was ﬁrst done by Grassmann (), and is quite laborious.
Te property mn = nm is Grassmann’s theorem ! However, each step
is fairly routine, so we will skip the details.
.THE LANGUAGE OF PA
Te language of arithmetic, mentioned in the discussion of induction
in the previous section, can be described more precisely as follows. Its
symbols are:
Constant: 
Variables: a,b,c,... (lowercase Roman letters)
Function symbols: S,+,ċ (for successor, sum, product)
Relation symbol: =
Logic symbols: , (and), - (or),  (not),  (implies), ∀(for all), §
(there is)
Parentheses: (, )
Tese symbols are combined by the following rules to build terms,
equations, and formulas. Te constant, variable, and function symbols
are used to build terms: or a variable is a term, and if tand tare
terms then so are
S(t),
(t+ t),
and
(tċ t).
In particular, the terms include the numerals ,S(),SS(),... for the
natural numbers, which we will ofen abbreviate by their usual names
,,,... . We need parentheses to distinguish between terms with po-
tentially diﬀerent meanings, such as
S((a + b))
and
(S(a) + b).
But, as in ordinary mathematics, we omit parentheses when there is no
risk of confusion. In particular, we write SS() instead of S(S()), and
so on.
From terms t, twe can also build the equation (t= t) with the
help of the equality symbol. An equation becomes a meaningful sentence


■
CHAPTER 
when numerals are substituted for its variables. Equations are the sim-
plest type of arithmetic formula; from them we build formulas in gen-
eral with the help of logic symbols: the connectives or Boolean operations
,,-, , and  and the quantiﬁers ∀and §. Tus if φand φare formulas
then so are
(φ, φ),
(φ- φ),
( φ),
∀xφ,
§xφ,
where x is a variable in φnot already in the scope of ∀or §.
Te language of PA is capable of expressing all the usual sentences
about natural numbers, and also all the usual relations between, and
properties of, natural numbers. Some examples are:
. ∀n (= S(n)),
which is the ﬁrst Peano axiom, stating that is not a successor.
. §l(l + m = n),
which says that m B n.
. §l(l ċ m = n),
which says that m divides n.
Examples and show that the relations “m B n” and “m divides n” are
deﬁnable in the language of PA, so we can use these relations (to help
readability) on the understanding that they abbreviate the formulas in
examples and . For example, using the “divides” abbreviation and the
abbreviation for S() we can deﬁne the property “p is prime” by the
formula
. ∀l(l divides p (l = - l = p)).
We can deﬁne the relation P(x, y) = z, where P denotes the pairing func-
tion found in section ., by the equation
. ċ z = ċ x + (x + y) ċ (x + y+ ),
where abbreviates S() and abbreviates SS(). Also, if Pand Pare
the projection functions that recover x = P(z) and y = P(z) from z =
P(x, y) then x = P(z) means §y(P(x, y) = z) and y = P(z) means
§x(P(x, y) = z), so:
. §y(ċ z = ċ x + (x + y)(x + y+ ))
expresses the relation x = P(z) and
. §x(ċ z = ċ x + (x + y)(x + y+ ))
expresses the relation y = P(z).

CLASSICAL ARITHMETIZATION
■

Simpliﬁcation of Connectives
Te Boolean operation symbols ,,-, , are used because they corre-
spond to the words “and,” “or,” “not,” and “implies” used in natural lan-
guage, hence they make it easy to move between natural language and
the language of PA. However, it is possible, and sometimes convenient,
to work with a smaller set of connectives.
For example, we can drop the connective  because
φ φis logically equivalent to ( φ) - φ.
Also, we can drop either of ,,- in favor of the other because
φ, φis logically equivalent to  (( φ) - ( φ)), and
φ- φis logically equivalent to  (( φ) , ( φ)).
Tus it suﬃces to use just the connectives -, .
Prenex Form
Te simpliﬁcation just achieved, reducing to the connectives -, , leads
to a more important simpliﬁcation in the use of quantiﬁers: the so-called
prenex form in which all quantiﬁers are at the front of the formula. Prenex
form is achieved by systematically applying the following equivalences
(where we write  to denote logical equivalence) to move quantiﬁers to
the lef of connectives:
 ∀xφ  §x φ
 §xφ  ∀x φ
φ- ∀x φ(x)  ∀y(φ- φ(y))
φ- §x φ(x)  §y(φ- φ(y))
In the latter two equivalences we rename the quantiﬁed variable x in φ,
if necessary, by a variable y not occurring in φ.
.ARITHMETICALLY DEFINABLE SETS
From now on we call the properties deﬁnable in PA, and the correspond-
ing sets, arithmetically deﬁnable. Using the equivalences above, we can


■
CHAPTER 
reduce any arithmetically deﬁnable property α(u) to one deﬁned by a
formula in prenex form:
QxQx Qnxn φ(x,x,...,xn,u),
where Q,Q,...,Qn are quantiﬁers ∀or §, and φ is quantiﬁer-free. Tat
is, φ consists of a series of equations between terms linked by the con-
nectives - and  (also known as a Boolean combination of equations).
And terms, as we explained in the previous section, are built from the
variables x,x,...,xn,u and the constant by means of the S, +, and ċ
functions.
At the cost of complicating terms by inclusion of the projection func-
tions Pand P, we can reduce any two adjacent quantiﬁers of the same
type to a single one, because
∀x∀y φ(x, y)  ∀z φ(P(z),P(z)), and
§x§y φ(x, y)  §z φ(P(z),P(z)).
By such reductions we eventually arrive at a prenex formula in which the
quantiﬁers alternate, either
∀z§z ψ(z,z,...,zm,u)
or
§z∀z ψ(z,z,...,zm,u),
where ψ is a quantiﬁer-free combination of equations between terms
built from z,z,...,zm,u using the functions S,+,ċ,P, and P. Te ﬁrst
type, in which there are m alternating quantiﬁers beginning with ∀, is
called a Π
m formula. Te second is called a Σ
m formula.2
It turns out that m is a good measure of the complexity of an arith-
metical property α(u). In particular, a Σ
property is one that is “com-
putably enumerable” in a sense we will explain in the next subsection.
Σ
Properties
It follows from the deﬁnition of Σ
m above that a property α(u) is Σ
if
there is a quantiﬁer-free formula ψ(z,u) such that
α(u)  §z ψ(z,u).
2Te reasons for the notation include: Π because the ∀quantiﬁer is like a logical
“product,” Σ because § is like a logical “sum,” and the superscript indicates that the
quantiﬁers are over the objects of lowest type, the natural numbers. Tis leaves the option
of a possible superscript when quantifers are over sets of natural numbers.

CLASSICAL ARITHMETIZATION
■

Te formula ψ(z,u) is a Boolean combination of equations t= tbe-
tween terms built from the variables u,z and the constant by means
of the functions S,+,ċ,P, and P. Tese functions are obviously com-
putable, so for any values of the variables u,z we can compute whether
each equation t= tis true or not.
Moreover, ψ(z,u) is a combination of these equations by the connec-
tives - and  . So, given the truth values (“true” or “false”) of the equa-
tions, we can compute the truth value of the combination ψ(z,u) with
the help of the so-called truth tables for - and  : e-eis true just in case
one of e, eis true,  e is true just in case e is false.
Tus, for any given values of u,z, we can compute whether ψ(z,u)
is true or false. By systematically trying all pairs `u,ze we can eventually
ﬁnd each u for which §z ψ(z,u). We can therefore make a list of all such
u, which is why we say that the set of u such that §z ψ(z,u) is computably
enumerable.
Note that we do not claim to be able to compute, for each u, whether
§z ψ(z,u) is true. We claim only that, if it is true, we will eventually ﬁnd
out. If §z ψ(z,u) is false we will search endlessly for a z such that ψ(z,u),
and may never know that our search is in vain. Indeed we will show, in
section ., that there are Σ
properties §z ψ(z,u) for which there is no
algorithm to compute the truth value of §z ψ(z,u) for each u.3
Te concept of a computably enumerable property obviously depends
on the deﬁnition of “computable,” a concept we study more deeply in
chapters and . However, we can reveal that the concept of computable
enumerability coincides with the concept of a Σ
property, in the follow-
ing precise sense.
If we deﬁne a Σ
property to be one deﬁned by a formula
§x§x§xn ψ(x,x,...,xn,u),
(*)
where ψ is a Boolean combination of equations between terms built from
variables, , and the S,+, and ċ functions, then such a property is clearly
computably enumerable, by an argument like that above. Conversely,
once the concept of “computable” is precisely deﬁned, it can be shown
that any computably enumerable relation is of the form (*). In fact, it was
3All mathematicians know computable properties ψ(z,u) with no known algorithm
to compute the truth value of §z ψ(z,u). One is the property “u consecutive zeros occur
before the zth decimal place of π.” But it is a diﬀerent matter to prove that no algorithm
exists.


■
CHAPTER 
shown by Matijasevič () that ψ(x,x,...,xn,u) can be a single equa-
tion t= t, where tand tare terms built from the S,+, and ċ functions.
In other words, tand tare polynomials in the variables x,x,...,xn,u.
Tus computably enumerable properties, and hence all Σ
properties,
are in fact Σ
of a particularly simple form.
.LIMITS OF ARITHMETIZATION
In section .we raised a doubt whether arithmetization can give a good
account of sets of real numbers—in contrast to sequences of real numbers,
which can be encoded by sets of natural numbers. In this section we will
explain why sets of real numbers cannot all be encoded by sets of natural
numbers. Tis puts arbitrary sets of real numbers beyond the scope of
arithmetization as it is normally understood.
At the same time we will see that sets of natural numbers cannot all
be encoded by natural numbers. Tis is why sets of natural numbers are
viewed as objects diﬀerent in type from the natural numbers themselves
(and why the arithmetization project for analysis needs sets of natural
numbers as well as natural numbers). An equivalent statement is that
the real numbers (which correspond to sets of natural numbers) cannot
all be encoded by natural numbers. Tis limits how many real numbers
we can deﬁne, because deﬁnitions are ﬁnite strings of symbols, which can
be encoded by natural numbers.
Te following theorem of Cantor () explains both of the facts
above, and much more.
Cantor’s theorem. For each set S there is no one-to-one correspondence
between the elements of S and the subsets of S.
Proof. Suppose that, for each x > S, there corresponds a subset Sx b S. It
suﬃces to show that the subsets Sx do not include all the subsets of S.
Indeed, they do not include the subset
X = x > S  x ~> Sx,
because X diﬀers from Sx with respect to the element x: x > X  x ~> Sx.
j
Obviously, there is a one-to-one correspondence between the ele-
ments of S and certain subsets of S—for example, we can let the element x
correspond to the subset x—so Cantor’s theorem essentially says that

CLASSICAL ARITHMETIZATION
■

any set has more subsets than elements. In particular, there are more sets
of natural numbers than natural numbers, and more sets of real numbers
than real numbers. Tis is why a set of natural numbers cannot in general
be encoded by a natural number, and why a set of real numbers cannot
in general be encoded by a real number (or by a set of natural numbers).
Te Diagonal Argument
Te devastatingly simple argument in Cantor’s theorem, called the diag-
onal argument, can be adapted to many situations. It shows, for example,
that if we have a deﬁned sequence S,S,S,... of sets of natural num-
bers, then we can explicitly deﬁne a set X not in the sequence by
n > X  n ~> Sn.
In particular, if the sequence is arithmetically deﬁnable—in the sense
that the relation m > Sn is arithmetically deﬁnable—then D is itself an
arithmetically deﬁnable set. We conclude immediately that it is impos-
sible to arithmetically deﬁne the sequence of all arithmetically deﬁnable
sets—even though we can certainly compute a list of all the formulas φ
that deﬁne these sets. Te catch is that the relation “φ(m) holds for the
nth formula φ on the list” is not arithmetically deﬁnable. Tis follows
from a further reﬁnement of the diagonal argument that we will see in
section ..
Tere we will show that the Σ
sets can be arranged in a sequence for
which the diagonal set X (necessarily not Σ
) is Π
. In the language of
computability, there is a computably enumerable set whose complement
is not computably enumerable. Te generalization of this result to any
number of quantiﬁers is that, for each k, there is a Π
k set that is not in
Σ
k. It follows that Σ
k+, which includes Π
k, is a larger class of sets than
Σ
k.
Now if m > Sn is an arithmetically deﬁnable relation, in Σ
k say, then
S,S,S,... are all in Σ
k. Tus an arithmetically deﬁnable sequence fails
to include all arithmetically deﬁnable sets because Σ
k fails to include
Σ
k+.
Deﬁnability and Computability
Te result just described is typical of the way our ability to deﬁne sets
falls short of the totality of all sets. It means that there is no well-deﬁned


■
CHAPTER 
class of “deﬁnable sets”—rather, we have to choose classes of sets that are
big enough for the purposes we have in mind.
In chapters and we will study the two most obvious choices: the
arithmetically deﬁnable sets and the computable sets. A system ACAof
analysis based on arithmetically deﬁnable sets is big enough to prove all
the theorems of basic analysis—the intermediate and extreme value the-
orems, Heine-Borel and Bolzano-Weierstrass theorems—and even some
theorems thought to be quite hard, such as the Brouwer ﬁxed point and
Jordan curve theorems. A system RCAbased on computable sets is not
as strong, but still useful. Te only theorem on the above list that RCA
can prove is the intermediate value theorem. However, RCAis strong
enough to prove equivalences between many theorems that it cannot
prove outright.
Tis makes RCAa good base theory for ﬁnding which theorems of
analysis are really equivalent to each other, and which are stronger than
others. A surprising outcome of this investigation, which will unfold in
chapters and , is that most of the basic theorems of analysis fall into
just three levels of “strength.”

C H A P T E R 
■■■■■
Classical Analysis
In the previous chapter we established that many of the basic objects of
analysis, such as real numbers, sequences, inﬁnite series, and continuous
functions, can be arithmetized. Tat is, they can be deﬁned in terms of, or
encoded by, natural numbers and sets of natural numbers. Tis discovery
paves the way for axiom systems of analysis, based on the system PA of
Peano arithmetic.
In the present chapter, we explore the basic concepts that arise when
real numbers and continuous functions are studied, particularly the limit
concept and its use in proving properties of continuous functions. We
give proofs of the Bolzano-Weierstrass and Heine-Borel theorems, and
the intermediate and extreme value theorems for continuous functions.
Also we use the Heine-Borel theorem to prove uniform continuity of con-
tinuous functions on closed intervals, and its consequence that any con-
tinuous function is Riemann integrable on closed intervals.
In several of these proofs there is a construction by “inﬁnite bisec-
tion,” which can be recast as an argument about binary trees. Te role
of trees in analysis will be explored more fully in chapter , but in this
chapter we use it to construct an object that will be important in that
chapter—the so-called Cantor set.
.LIMITS
Limits of Sequences
Analysis is fundamentally concerned with the outcomes of inﬁnite pro-
cesses on real numbers, or limits. For example, the following equations


■
CHAPTER 
express the real numbers /,
º
, and π as the outcomes of certain inﬁ-
nite processes.

= .
º
= +

+

+

+ 

π
= −
+ 
−
+ 
− .
In each case the right-hand side arises from a process producing an inﬁ-
nite sequence of rational numbers:
• Te inﬁnite decimal arises from the sequence of ﬁnite decimals
.,
.,
.,
... .
• Te inﬁnite continued fraction arises from the sequence of ﬁnite
fractions
,
+ 
,
+

+ 

,
... .
• Te inﬁnite sum arises from the sequence of partial sums
,
−
,
−
+ 
,
... .
And the lef-hand side is the limit of the sequence, as deﬁned in section
..
Limits of Functions
A sequence a, a, a,... may be seen as a function f on the positive
integers,
f(n) = an,
so we can view its limit l as the limit of f(n) as n tends to inﬁnity. We
also write f(n)   l as n   ª, as mentioned in section ..
More generally, we can deﬁne limits of a real-valued function f of a
real variable x (a special case of this occurred in the deﬁnition of conti-
nuity at a point in section .).

CLASSICAL ANALYSIS
■

Deﬁnitions. If f is a real-valued function, deﬁned on some subset of R,
. f(x)   l as x   a if, for each ε A , there is a δ A such that
Sx −aS < δ  Sf(x) −lS < ε.
. f(x)   l as x   ª if, for each ε A , there is an N A such that
x A N  Sf(x) −lS < ε.
Limit Points of a Set
Deﬁnition. A point l is called a limit point of a set S b R if, for each
ε A , there are points of S other than l in the interval (l −ε, l + ε).
We also express the deﬁning condition by saying “each neighborhood of
l contains points of S other than l.”
An important example is the set S = Q of rational numbers. Here,
every real number x is a limit point of S, since each neighborhood of x
contains members of the lower Dedekind cut for x, which are rational.
You may wonder: do we really need the concept of limit point? Might
not every limit point be the limit of a sequence of points drawn from S?
Well, yes, but we will see in section .that even the existence of limit
points is a weighty question, which brings to light some important issues
in the foundations of analysis.
.ALGEBRAIC PROPERTIES OF LIMITS
To avoid many tedious and complicated calculations of “δ for given ε”
we prove that the sum, diﬀerence, product, and quotient of convergent
sequences are themselves convergent, and that they converge to the ex-
pected values.
Algebra of limits. If an   a and bn   b as n   ª then also
an + bn   a + b
()
an −bn   a −b
()
an ċ bn   a ċ b
()
an~bn   a~b
if
b x .
()


■
CHAPTER 
Proof. For () we have to make an+bn within ε of a+b for n greater than
a suitably chosen N. Given that an   a and bn   b we can ﬁnd positive
integers A,B so that
n A A  San −aS < ε

and
n A B  Sbn −bS < ε
.
Ten with N = max(A,B) we have San −aS < ε~and Sbn −bS < ε~for
n A N, so
San + bn −(a + b)S B S(an −a) + (bn −b)S
B San −aS + Sbn −bS
B ε
+ ε
= ε.
Tus an + bn   a + b as n   ª.
For () the argument is similar.
For () we want to make anbn −ab < ε. To do this we use a trick,
writing
anbn −ab = anbn −abn + abn −ab = bn(an −a) + a(bn −b).
Now we have to make San −aS and Sbn −bS small enough to compensate
for the factors bn and a. By making Sbn −bS < ε~SaS (by choosing n A B
say) we can compensate for the factor a.
To compensate for the variable factor bn we ﬁrst choose nlarge enough
to make SbnS < SbS, which is possible because bn   b. Ten we make n
larger, if necessary, so as to make San −aS < ε~SbS (by choosing n A A
say). Ten for n A N = max(A,B) we have
Sanbn −abS = Sbn(an −a) + a(bn −b)S
B SbnSSan −aS + SaSSbn −bS
B SbS ε
SbS + SaS ε
SaS
= ε
+ ε
= ε,
as required to prove that anbn   ab.
For () we view an~bn as the product of an and ~bn. Ten, by the
result () we are reduced to proving that

bn
  
b
as
n   ª
when
b x .

CLASSICAL ANALYSIS
■

To do this we have to make U 
bn −
bU < ε. Well,

bn
−
b = b −bn
bbn
,
and we can make this smaller in absolute value than ε as follows. First
make SbnS A SbS~A , which is possible for suﬃciently large n since
bn   b x , and then choose n larger, if necessary (say n A N) so as to
make Sb −bnS < εSbS~.
Tis gives
V 
bn
−
bV = Vb −bn
bbn
V B εSbS~
SbS~= ε,
as required.
j
Tere are similar proofs that if f(x)   l and g(x)   m as x   c
then also
. f(x) + g(x)   l + m,
. f(x) −g(x)   l −m,
. f(x) ċ g(x)   l ċ m,
. f(x)~g(x)   l~m, if m x .
.CONTINUITY AND INTERMEDIATE VALUES
Our intuition of a continuous function is one whose graph is “unbroken”:
that is, a curve “without gaps” just as the number line R is without gaps.
However, the usual deﬁnition of continuous function is in terms of the
limit concept, and the idea of its graph having no gaps is captured by a
theorem—the intermediate value theorem.
Recall from section .that a function f is continuous at c if f(x)  f(c) as x   c; f is continuous on a set S b R if f is continuous at each
point in S.
Intermediate value theorem. If fis continuous on an interval [a,b], with
f(a) < and f(b) A , then f(c) = for some c in [a,b].
Before proving the theorem we remark that there is nothing special
about the value of f. A similar proof shows that f takes every value
between f(a) and f(b)—hence the name “intermediate value theorem.”
In fact, the endpoints a and b are unnecessarily general. We can take
a = and b = without loss of generality, as we do in the proof below.


■
CHAPTER 
Proof. On exactly one half of the interval [,]—either [,~] or [~,]—
we have f(x) B at one end of the subinterval and f(x) C at the other.
If f(x) = at either end we are done. If not, we have an interval [a,b]
with f(a) < and f(b) A and we can repeat the process in [a,b].
Tat is, if f(x) x at the midpoint of [a,b] we get exactly one half
[a,b] of [a,b] for which f(a) < and f(b) A . Proceeding in this
way we either ﬁnd a bisection point x, at some stage, where f(x) = , or
else we obtain an inﬁnite nested sequence of closed intervals
[a,b] a [a,b] a [a,b] a 
such that f(an) < and f(bn) A for each n. Also, since each interval
is half the one before, they have a single common point, c, by nested
interval completeness (section .).
We then must have f(c) = . If f(c) A then the continuity of f
gives f(an), f(bn) A for any an,bn suﬃciently close to c, contrary to
the construction of an,bn. And f(c) < is ruled out similarly.
Tus we either ﬁnd a point where f(x) = at some stage of the bi-
section process, or else we obtain such a point as the limit of intervals
arising in the bisection process.
j
Essentially the same proof as this was given by Cauchy (). An En-
glish translation of Cauchy’s proof may be found in Bradley and Sandifer
(), pages –.
Te Fundamental Teorem of Algebra
It follows from the algebraic properties of limits in the previous section,
and the deﬁnition of continuity, that the sum, diﬀerence, and product
of continuous functions are continuous. Add to these the easily checked
results that constant functions and the identity function are continuous,
and we can infer the continuity of any polynomial function
f(x) = anxn +  + ax + a,
where
a, a,..., an > R.
Notice also that for n odd, f(x) will have the same sign as an for n
large and positive, and the opposite sign for n large and negative. Tis is
because anxn exceeds the sum of all the others in absolute value when x
is suﬃciently large, and xn A for x A and xn < for x < .

CLASSICAL ANALYSIS
■

Tus it follows from the intermediate value theorem that f(x) = 
for some x when f is an odd-degree polynomial with real coeﬃcients. In
fact we have shown that any such equation has a real solution.
Tis is a special case of the fundamental theorem of algebra (FTA).
Te general case removes the restriction that n be odd, and allows the
solution to be a complex number. Gauss () gave a proof of FTA by
reducing any polynomial equation with real coeﬃcients, f(x) = , to
one of odd degree by a purely algebraic (though complicated) argument.
He was able to repeatedly divide the degree of the equation by —thus
ultimately obtaining an odd-degree equation—with the help of quadratic
equations (which is where complex solutions arise).
One such reduction may be found in Dawson (). From the foun-
dational point of view, the subtlest part of Gauss’s proof is the odd-degree
case and its reliance on the intermediate value theorem. Tis is the part
that rests upon the completeness of the real numbers. Indeed, it was the
attempt of Bolzano () to justify Gauss’s proof—by proving the inter-
mediate value theorem—that brought the issue of completeness to light.
Bolzano appealed to completeness in terms of least upper bounds but, as
the proof above shows, one may also appeal to the existence of a common
point in each nested sequence of closed intervals.
.THE BOLZANO-WEIERSTRASS THEOREM
It is clear that a set cannot have a limit point unless it is inﬁnite, and
that certain unbounded inﬁnite sets (such as N) do not have limit points
either. However, ﬁniteness and unboundedness are the only two obstruc-
tions to the existence of limit points.
Bolzano-Weierstrass theorem. If S is an inﬁnite set of points between real
numbers a and b, then S has a limit point.
Proof. Without loss of generality we can take a = and b = , so S is a set
of points in [,]. Since S is an inﬁnite set, at least one half of [,]—either
[,/] or [/,]—contains inﬁnitely many points of S.
We let [a,b] be the lefmost half of [,] that contains inﬁnitely
many points of S, and repeat the argument in [a,b]. Tis gives a half
[a,b] of [a,b] that also contains inﬁnitely many points of S. Contin-
uing in this way we obtain an inﬁnite nested sequence of closed intervals


■
CHAPTER 
[a,b] a [a,b] a [a,b] a  ,
each of which contains inﬁnitely many members of S.
Since each interval is half the length of its predecessor, there is a sin-
gle point c common to all the intervals [an,bn]. Also, since these inter-
vals become arbitrarily small, each ε-neighborhood of c contains some
[an,bn], and hence inﬁnitely many points of S.
Tus c is a limit point of the set S.
j
Corollary(sequentialBolzano-Weierstrass). A bounded inﬁnite sequence
x,x,x,... of reals contains a convergent subsequence xn,xn,xn,... .
Proof. Let S = x,x,x,..., and ﬁnd an inﬁnite nested sequence of
closed intervals
[a,b] a [a,b] a [a,b] a  ,
as in the proof of the theorem. Now deﬁne a subsequence of x,x,x,...
by
xn= x,
xnk = next term in the sequence, afer xnk−, that is in [ak,bk].
Since there are inﬁnitely many terms of the sequence in [ak,bk], xnk is
always deﬁned, so the subsequence is inﬁnite. And it is convergent (to c)
because its kth term lies in [ak,bk], and hence within distance −k of c.
j
We prove the sequential Bolzano-Weierstrass theorem to get around
the diﬃculty, noted in section ., of arithmetizing the concept of set
of real numbers. Notice that the sequence of intervals [ak,bk] is deﬁn-
able (by induction) but not obviously computable, since a ﬁnite computa-
tion cannot test whether there are inﬁnitely many terms of the sequence
x,x,x,... in a given interval. Tis prevents us from computing the
sequence of intervals [ak,bk]. Tis state of aﬀairs is a clue that classical
analysis sometimes requires non-computable processes, a fact that will
gradually become clearer.

CLASSICAL ANALYSIS
■

.THE HEINE-BOREL THEOREM
Te process of inﬁnite bisection, used to “narrow the region of inﬁnitude”
in the proof of Bolzano-Weierstrass, can be used in other situations. In
this section we study another situation of fundamental importance, in
the Heine-Borel theorem. Yet despite its similar proof, Heine-Borel is
weaker than Bolzano-Weierstrass in a subtle but precisely deﬁnable way
(see chapter ).
Heine-Borel theorem. If S is an inﬁnite set of open intervals that covers
[,], then some ﬁnite subset of S also covers [,].
Proof. Suppose on the contrary that no ﬁnite subset of S covers [,]. It
follows that at least one half of [,]—namely, [,/] or [/,]—also can-
not be covered by ﬁnitely many members of S.
Let [a,b] be the lefmost such half and repeat the argument in
[a,b]. Tis gives a half [a,b] of [a,b] that cannot be covered by
ﬁnitely many members of S, and so on. In this way obtain an inﬁnite
nested sequence of closed intervals
[a,b] a [a,b] a [a,b] a  ,
none of which can be covered by ﬁnitely many members of S.
Since each [an,bn] is half the length of its predecessor, these inter-
vals have a single common point c. But c lies inside some open interval I
belonging to S, and therefore so does any suﬃciently small [an,bn]. Tis
contradicts the conclusion that [an,bn] cannot be covered by ﬁnitely
many members of S. So it was wrong to suppose that [,] cannot be
covered by ﬁnitely many members of S.
j
Corollary(sequentialHeine-Borel). If I,I,I,...is an inﬁnite sequence
of open intervals that covers [,], then the ﬁnite sequence I,I,...,In
also covers [,] for some n.
Proof. Let S = I,I,I,.... Ten it follows from the theorem that
ﬁnitely many of the Ik cover [,]. And, for some n, these Ik are included
in the sequence I,I,...,In.
j
Te openness of the intervals I in S comes into play when we conclude
from c > I that some [an,bn] ⊂I. In fact, it is possible to cover [,] by
inﬁnitely many closed intervals, no ﬁnite subset of which covers [,].
An example is the following sequence of closed intervals: [,] (which


■
CHAPTER 
covers ), followed by [~,],[~,~],[~,~],... (which cover the
remaining points).
Heine-Borel has many important consequences, some of which we
will see in section .. But while we are on a roll with inﬁnite bisection
constructions we will do one more of fundamental importance.
.THE EXTREME VALUE THEOREM
We saw in section .that the graphs of continuous functions have “no
gaps in the middle” in a certain sense (the intermediate value theorem).
We now show that, on closed intervals, they also have “no gaps at the top
or bottom.” To be precise, we have:
Extreme value theorem. If f is a continuous function on [,] then f
attains both a maximum and a minimum value on [,].
Proof. We ﬁrst prove that f is bounded on [,]. Suppose on the contrary
that f is unbounded on [,]; that is, f takes arbitrarily large positive or
negative values.
In that case f is unbounded on some half of [,]. As usual, we let
the lefmost such half be [a,b], and repeat the argument (“narrow-
ing towards a point of unboundedness”). Tis ultimately gives an inﬁnite
nested sequence of closed intervals
[a,b] a [a,b] a [a,b] a  ,
with f unbounded on each [an,bn]. Since each [an,bn] is half the one
before, there is a single point c common to all the [an,bn].
But since f is continuous, we can ﬁnd an [an,bn] on which the values
of f diﬀer from f(c) by less than a given ε A . Tis means that f is
bounded on [an,bn], and we have a contradiction. Tis contradiction
shows that f is indeed bounded on [,]. Terefore, by the completeness
of R, there is a least upper bound l to the values of f on [,].
If l is not a value of f then the function

l−f(x) is continuous and
unbounded on [,], which we have just proved to be impossible. Tere-
fore, l is in fact the maximum value of f on [,]. We can similarly show
the existence of a minimum value.
j

CLASSICAL ANALYSIS
■

.UNIFORM CONTINUITY
Recall from section .that if f is deﬁned to be continuous at x = c if, for
each ε A , there is a δ such that
Sx −cS < δ  Sf(x) −f(c)S < ε.
It follows that
x,x′ > (c −δ,c + δ)  Sf(x) −f(x′)S < ε
because
Sf(x) −f(x′)S = Sf(x) −f(c) + f(c) −f(x′)S
B Sf(x) −f(c)S + Sf(c) −f(x′)S
B ε + ε = ε.
So, renaming ε as ε, we can rephrase the condition for continuity at
x = c as follows: for each ε A there is a δ A such that
x,x′ > (c −δ,c + δ)  Sf(x) −f(x′)S < ε.
(*)
Te δ in this condition depends on c, so if f is continuous over a certain
set S we have potentially varying values δ(c) for the same ε as c varies
over S.
If we can ﬁnd a δ satisfying (*) for all c in S then we have what is
called uniform continuity on S. Replacing the δ in (*) by δ~we get a
more concisely stated condition:
Deﬁnition. A function f is called uniformly continuous on a set S b R if,
for each ε A and all x,x′ > S, there is a δ A such that
Sx −x′S < δ  Sf(x) −f(x′)S < ε.
On an open interval S a continuous function may very well fail to
be uniformly continuous. For example, f(x) = ~x is continuous but
not uniformly continuous on (,), because the diﬀerence 
x −

x+δ grows
beyond all bounds as x approaches . (So this example also shows that
the extreme value theorem fails on open intervals, as is obvious from the
graph in ﬁgure .. Related to this, the Heine-Borel theorem can also fail
on open intervals.)


■
CHAPTER 
x
y
y = ~x
O

Figure .: Unbounded continuous function on the open interval (,)
However, a continuous function on a closed interval is uniformly con-
tinuous. It suﬃces to prove this for the interval [,].
Uniform continuity on closed intervals. If f is continuous on [,] then
f is uniformly continuous there.
Proof. Given ε A and any c > [,], continuity of f gives a δ(c) A 
such that
x,x′ > (c −δ(c),c + δ(c))  Sf(x) −f(x′)S < ε.
Te open intervals (c −δ(c),c + δ(c)), for all c > [,], cover [,]. So,
by the Heine-Borel theorem, some ﬁnite collection of them also covers
[,]. Call the ﬁnitely many covering intervals I,I,...,In.
Ten if x,x′ lie in the same Ik we have Sf(x) −f(x′)S < ε.
Since I,I,...,In are open intervals, any two of them that overlap
have an open interval in common. We let δ be the minimum length of
the overlaps among I,I,...,In.

CLASSICAL ANALYSIS
■

Now if x,x′ are not in the same Ik there is at least one interval of
overlap lying between them, and hence Sx −x′S C δ. Consequently,
Sx −x′S < δ  x,x′ > same Ik  Sf(x) −f(x′)S < ε,
which shows that f is uniformly continuous.
j
Remark. It is worth seeing how this proof can be modiﬁed so as to ap-
peal only to the sequential Heine-Borel theorem mentioned in section
.. Namely, inside each interval (c −δ(c),c + δ(c)) we can choose ra-
tional numbers c,d with
c −δ(c) < c < c < d < c + δ(c),
since any real number has rational numbers arbitrarily close to it. Ten
the rational intervals (c,d) cover [,], because they cover each c > [,].
Also, since (c,d) ⊂(c −δ(c),c + δ(c)) we have
x,x′ > (c,d)  Sf(x) −f(x′)S < ε,
so we can argue as before that f is uniformly continuous.
But now, the intervals (c,d) can be put in a sequence, since they
correspond to pairs of rational numbers, and hence (by the encoding of
pairs of natural numbers by natural numbers explained in section .) to
natural numbers. Tus it now suﬃces to appeal to the sequential Heine-
Borel theorem (and so we get around the diﬃculty that arbitrary sets of
intervals cannot be arithmetized).
Riemann Integrability
It follows from the above proof that if f is continuous on [,], and any
ε A is given, then we can divide [,] at points = c< c< c<  <
cm+= in such a way that
ci B x, y B ci+ Sf(x) −f(y)S < ε.
We can therefore ﬁt the graph of y = f(x) between the graphs of the
step functions whose values diﬀer by at most ε for all x in [,] (see ﬁgure
.). Te lower step function has the constant value, on [ci,ci+), equal to
the minimum value of f on [ci,ci+] (which exists by the extreme value
theorem). Te upper step function has the constant value, on [ci,ci+),
equal to the maximum value of f on [ci,ci+].


■
CHAPTER 
x
y
O

c
c
c
c
c
Figure .: Step functions approximating a curve
Te area under each step function is well-deﬁned, being just a union
of ﬁnitely many rectangles, with the values of the upper areas C the values
of all the lower areas. Also, the diﬀerence between these areas can be
made B any given ε, as we have just seen, so there is a unique value that
lies between them, called the Riemann integral of f on [,], R

f(x) dx.
Tus uniform continuity of continuous functions on [,] has the
corollary that each continuous function on a closed interval is Riemann
integrable.
.THE CANTOR SET
An important construction involving sequences of nested intervals is the
so-called Cantor set, or middle third set.1 It is constructed by removing
the open middle third, (~,~) of [,], then removing the open mid-
dle thirds of the closed intervals that remain, and so on indeﬁnitely. Te
points of the Cantor set are those common to all the sets of closed inter-
vals occurring in this inﬁnite construction. Te sets of intervals obtained
in the ﬁrst six stages are shown in ﬁgure ..
Te points of the Cantor set correspond to inﬁnite paths in the tree
shown in ﬁgure ., called a complete binary tree.
1Te idea, though not precisely the same construction, ﬁrst appears in Smith ().

CLASSICAL ANALYSIS
■

Figure .: Early stages in the construction of the Cantor set
Figure .: Constructing the Cantor set via a tree
We could label the vertices of this tree by ﬁnite sequences of s and
s (for “lef” and for “right”), so that each inﬁnite path corresponds to
an inﬁnite sequence of s and s. However, it is cleverer to replace each
by a , because then each inﬁnite path is given by the ternary (base
) expansion of the corresponding real number. Tis is because the lef
third of [,] consists of numbers whose ternary expansion begins with
, the right third consists of those whose ternary expansion begins with
, and the lef and right thirds of a subinterval give numbers whose next
ternary digit is or respectively. Tus the points of the Cantor set are
exactly those with ternary expansions containing only the digits and .
Examples are the rightmost path in the lef half of the tree, described
by the ternary expansion ċ, which represents the point /, and
the lefmost path in the right half of the tree, described by the ternary ex-
pansion ċ, which represents the point /. More generally, any
point in the Cantor set corresponds to an inﬁnite nested sequence of in-
tervals, to an inﬁnite path in the binary tree, and to an inﬁnite ternary
expansion containing only the digits and .


■
CHAPTER 
.TREES IN ANALYSIS
Te reader will now have noticed that several proofs in this chapter de-
pend on repeated bisection of closed intervals, and the subsequent deter-
mination of points by nested sequences of intervals whose lengths tend
to zero. Te set of all intervals obtainable by repeated bisection can be
conveniently viewed as a tree, as shown in ﬁgure ..


[
]
[
]
S
[
]
S
S
S
[
]
S
S
S
S
S
S
S
Figure .: Te complete binary tree of bisected intervals
Tis tree has the whole interval (typically [,]) as its top vertex, and
the vertices below it are the subintervals obtained by bisection. Tus each
vertex has two vertices below it, which is why the tree is called the com-
plete binary tree B. Points of [,] correspond to inﬁnite nested sequences
of subintervals, and hence to inﬁnite paths in B. For example, the lefmost
inﬁnite path in the tree corresponds to the sequence
[,] a [,~] a [,~] a [,~] a  ,
which determines the point .
In the proofs above we appeal to special arguments to ﬁnd inﬁnite
paths, but there is actually a simple general criterion for their existence,
due to Kőnig (), which concerns ﬁnitely branching trees. Such a tree
T can be deﬁned as a graph with top vertex v, connected by edges to
ﬁnitely many new vertices v,...,vk, and in general with each vertex vm
connected by edges to ﬁnitely many new vertices vn—and these are the
only edges. Figure .shows an example.
Te main theorem of Kőnig (), which we will call the Kőnig inﬁn-
ity lemma or the strong Kőnig lemma, states that if a ﬁnitely branching tree

CLASSICAL ANALYSIS
■

v
v
v
v
v
v
v
v
v
v
v



Figure .: A ﬁnitely branching tree
has inﬁnitely many vertices, then it has an inﬁnite path. Its proof, which re-
sembles the argument for Bolzano-Weierstrass or Heine-Borel, involves
repeated division of an inﬁnite set into ﬁnitely many parts. Namely, since
T has inﬁnitely many vertices, one of the ﬁnitely many edges out of v
leads into a subtree Twith inﬁnitely many vertices. By the same argu-
ment, one of the ﬁnitely many vertices out of the top vertex of Tleads
into a subtree Tof Twith inﬁnitely many vertices. Repeating this argu-
ment indeﬁnitely, we obtain an inﬁnite path in T.
Te weak Kőnig lemma is the special case where T is a subtree of the
complete binary tree. Te results earlier in this chapter suggest that the
weak Kőnig lemma is the principle underlying many basic theorems of
analysis. Tis will be conﬁrmed in chapter though, rather surprisingly,
the Bolzano-Weierstrass theorem turns out to be equivalent to the strong
Kőnig lemma, not the weak one.
Te strong Kőnig lemma is also equivalent to several completeness
properties of R, such as the least upper bound property and the Cauchy
convergence criterion of section .. Tus trees are a key concept of anal-
ysis—a fact that was not much appreciated until reverse mathematics
brought it to light.


■
CHAPTER 
Arithmetization of Trees
It is clear that only ﬁnitely many vertices of a binary tree, or of a ﬁnitely
branching tree, are a ﬁnite number of edges away from the top vertex.
So the vertices can be enumerated by listing those one edge away from
the top, then those two edges away, and so on. Tis means that such trees
can be encoded by sets of natural numbers, and hence brought within the
scope of the arithmetization project described in the previous chapter.
We will discuss speciﬁc methods for arithmetizing trees in section
.. For now, it suﬃces to see how trees can be encoded by sets of words,
or strings of symbols. Te complete binary tree has vertices most natu-
rally encoded by strings of s and s, as shown in ﬁgure ..














Figure .: Labeling the vertices of the complete binary tree
Te top vertex is labeled by the empty string, those below it by (on
the lef) and (on the right). In general, the vertices below the vertex la-
beled σ are labeled σ(on the lef) and σ(on the right). A binary tree T
can now be deﬁned as a subset of this set of binary strings with the prop-
erty that if σ> T or σ> T then σ > T. Figure .on the following page
shows an example where T = empty,,,,,,,,,....

CLASSICAL ANALYSIS
■









Figure .: A binary tree

C H A P T E R 
■■■■■
Computability
Tis chapter foreshadows a constructive approach to analysis, in chapter
, using a system called RCA. Te initials RCA stand for “recursive com-
prehension axiom,” and in this context “recursive” means “computable.”
Te goal of RCAis to capture the basic concepts of analysis—real num-
bers and continuous functions—using computable operations on rational
numbers. To prepare for RCAwe need to study computable sequences
and computable sets of rational numbers.
Here we will develop the basic results of computability theory, many
of which are about noncomputable sequences and sets, with the goal of
revealing the limits of computable analysis. Two of the key examples are
a bounded computable sequence of rational numbers whose limit is not
computable, and a computable tree with no computable inﬁnite path.
Computability is an unusual mathematical concept, because it is most
easily used in an informal way. One ofen talks about it in terms of hu-
man activities, such as making lists, rather than by applying a precise
deﬁnition. Nevertheless, there is a precise deﬁnition of computability,
so our informal description of computations can be formalized. We de-
scribe two such formalizations in the next chapter, and outline a proof of
their equivalence.
When it comes to applying the concept of computability in analy-
sis, the most appropriate deﬁnition of computably enumerable set is one
mentioned in section .: that of a Σ
set. Tis agreement between the
concept of computability and Σ
—the simplest class of arithmetically de-
ﬁnable sets—suggests that analysis and computability have a common
arithmetical basis, which we will explore further in the next chapter.

COMPUTABILITY
■

.COMPUTABILITY AND CHURCH’S THESIS
Around the year , mathematicians began to pose problems about the
existence of algorithms. A famous example was Hilbert’s tenth problem,
so-called because it was tenth on the list of problems that Hilbert pre-
sented to the International Congress of Mathematicians in Paris in .
An English translation of the problem, which may be found in Hilbert
(), reads as follows:
Given a diophantine equation with any number of unknown quan-
tities and with rational integral numerical coeﬃcients: to devise a
process according to which it can be determined by a ﬁnite number
of operations whether the equation is solvable in rational integers.
By “diophantine equation” Hilbert means a polynomial equation for
which integer solutions are sought. His “process” determining existence
of a solution “by a ﬁnite number of operations” is what we would call
an algorithm. We might also say that Hilbert was calling for a computer
program to decide existence of integer solutions for arbitrary polynomial
equations with integer coeﬃcients.
Te discovery of such an algorithm would have been a positive solu-
tion to Hilbert’s tenth problem, but the solution turned out to be negative:
there is no algorithm that decides, for any arbitrary polynomial
p(x, y,z,...), whether the equation p(x, y,z,...) = has a solution in
integers x, y,z,.... Tis result, due to Matijasevič (), could only be
proved afer a mathematical deﬁnition of algorithm had been found—
something not even known to be possible in . Te ﬁrst deﬁnitions
of algorithm were discovered by Post in the s, in an analysis of the
processes of formal logic. But Post declined to publish them (see Post
()) because it seemed impossible to prove that the vague concept
of algorithm, or computation, was completely captured by his deﬁni-
tions. It was only afer Church (b) and Turing () independently
proposed deﬁnitions—equivalent to each other and to the deﬁnitions of
Post—that mathematicians became sure that the concept of algorithm
really had been captured.
A precise deﬁnition of algorithm will be given in the next chapter,
along with Turing’s decisive analysis of the concept of computation. Here
it is more important to understand certain general characteristics of any
deﬁnition, namely:


■
CHAPTER 
. Each algorithm can be written as a ﬁnite sequence of symbols in a
ﬁnite alphabet.
. Each algorithm can receive inputs, which are also ﬁnite strings of
symbols in a ﬁnite alphabet.
. On each input, the algorithm performs a series of steps, always the
same steps for the same input. Te sequence of steps may be called
the computation of the algorithm on the given input.
. If the computation terminates, there is an output string, which may
be interpreted as a function of the input string.
. When algorithms are given as strings of symbols they have a uni-
form interpretation; so there is a universal algorithm which, given
an algorithm A and input I, will reproduce the computation of al-
gorithm Aon input I.
Two of the most important types of algorithms are:
• Where the input and output strings are numerals, in which case the
algorithm deﬁnes a computable function (of positive integers).
• Where the input strings form a set P of questions with yes/no an-
swers, and the output strings are the words yes and no. In this
case we have an algorithm for the problem P. Te algorithm is
said to solve P if it outputs the correct answer to each question
in P. We also say that the set of questions with answer yes is a
computable set.
Notice that we do not always require an algorithm’s computation to halt
for each input. Te reason for this liberal deﬁnition is that deciding
whether an algorithm halts for each input is itself a serious problem—
in fact, it is a problem that no algorithm can solve, as we will see shortly. It
follows, as we will also see, that any attempt to restrict the class of algo-
rithms to those that halt on all inputs will be incomplete. Te only way
to capture the concept of algorithm completely is to include algorithms
that sometimes do not halt.
It follows that the functions computable by algorithms include some
whose domain is only part of N. For that reason, they are called com-
putable partial functions. Te term computable function is usually re-
served for those whose domain is N, but we will also call them com-
putable total functions when we wish to emphasize that the function is
deﬁned for all positive integers.

COMPUTABILITY
■

Te assumption that the various deﬁnitions of algorithm by Post,
Church, and Turing capture the informal concept of algorithm is known
as Church’s thesis, because it was proposed by Church (b). As no-
ticed above, this assumption is needed when we wish to prove nonexis-
tence of an algorithm. But Church’s thesis also enables us to be informal
in proving the existence of algorithms. If we can describe an algorithm
informally, then we can be conﬁdent that the algorithm also has a formal
description.
An important feature of algorithms, which is not obvious from the
informal notion, is that they can be encoded in the language of arith-
metic. We will say more about this in chapter . For the moment we
note only a superﬁcial, but useful, connection between algorithms and
numbers: there is a computable list A, A, A,... of all algorithms, so
each algorithm can be given a number. Since each algorithm is repre-
sented by a string of letters in a ﬁnite alphabet, it suﬃces to enumerate
all the strings. Tis can be done by listing the one-letter words ﬁrst (say,
in alphabetical order), then the two-letter words, and so on. For all the
known deﬁnitions of algorithm it is easily decided whether a string of
symbols is a meaningful algorithm—this is what a computer does when
it checks whether a program is syntactically correct—so we can omit any
meaningless strings and thereby compute a list A, A, A,... of all the
algorithms.
Tis much is easy, in principle. Te hard part is to look at an algorithm
and decide what it actually computes, if anything.
.THE HALTING PROBLEM
Consider the problem consisting of the following questions, which we
call the self-examination problem.
Qn: Does algorithm An, on input n, output the answer no?
Suppose Ais an algorithm that solves this problem. It is fair to assume
that A is given the number n in lieu of the question Qn, since the ques-
tion can be reconstructed from the number n. Tus, for each input n, A
outputs yes if An with input n gives output no, and otherwise Aoutputs
no.
Now, since A is an algorithm, we have A = Am for some number m.
What can Am do on input m? If Am outputs no then the answer to the


■
CHAPTER 
question Qm is yes, so Am must output yes, which is a contradiction.
Tere is a similar contradiction if the answer to Qm is no, hence the al-
gorithm A = Am cannot correctly answer question Qm. Tus A fails to
solve the self-examination problem, and we have a contradiction.
I call this problem the “self-examination problem,” because we want
to know what happens when an algorithm is applied to its own number,
which is eﬀectively the algorithm itself. If An comes to a halt, then we
can see what the output is. So the only thing preventing us from knowing
the answer to question Qn is knowing whether An halts for a given input.
Te latter is called the halting problem, and it must be unsolvable because
otherwise we could solve the self-examination problem.
Te halting problem was ﬁrst proved unsolvable by Turing ()
(with Turing’s own deﬁnition of computation, but by a rather similar
argument). As we will see, the “self-reference” idea behind the unsolv-
ability proof is the key to many other proofs of noncomputability or
unsolvability.
.COMPUTABLY ENUMERABLE SETS
Closely related to the concepts of computable function and solvable prob-
lem is the concept of computably enumerable set. Informally, a set X is
called computably enumerable if there is a computation (typically, a non-
halting computation) which produces a list x,x,x,... of all the mem-
bers of X. Tere are several equivalent ways of deﬁning a computably
enumerable set X in terms of the concept of computable function.
. X (if it is not empty) is the range of a computable total function f
whose domain is the positive integers. In this case we obtain a list
of members of X as the list f(), f(), f(),....
. If inﬁnite, X is the range of an injective (that is one-to-one) com-
putable total function g whose domain is the positive integers.
Namely, compute f(), f(), f(),...as in the previous deﬁnition,
but do not put f(n) on the list until it has been checked that f(n)
diﬀers from all values of f previously listed. Let g(m) be the mth
number put on the list.
. X is the domain of a computable partial function Φ, where Φ is
computed by the following algorithm. Given input k, compute the
values f(), f(), f(),... in succession. If one of these is found
to be k, let Φ(k) = .

COMPUTABILITY
■

Conversely, if Φis any computable partial function, the members of
its domain can be listed by a computation in “stages” as follows. At
stage n, do n steps in the computations of each of Φ(),...,Φ(n).
If the computation of any Φ(k) halts at this stage, put k on the list.
In the three deﬁnitions above the members x,x,x,..., or f(), f(),
f(),..., are not assumed to be positive integers. Tey could be ratio-
nal numbers, or any other objects namable by words in a ﬁnite alphabet.
However, there is no real loss of generality in assuming them to be pos-
itive integers, since words in ﬁnite alphabet can be encoded by positive
integers, by enumerating them in order of length and (for each length) in
alphabetical order. From now on we will assume, unless otherwise stated,
that members of computably enumerable sets are positive integers.
Among the computably enumerable sets X are those for which the
membership problem is solvable. Tat is, there is an algorithm which de-
cides, for each positive integer k, whether k > X. Such a set is called com-
putable. Equivalent deﬁnitions of computable set in terms of the above
concepts are:
. Te characteristic function of X, namely
x(n) =
¢¨¨¦¨¨¤

if n > X

if n ~> X,
is computable.
. If inﬁnite, X is the range of an increasing computable function f of
positive integers.
To compute f(n), compute x(),x(),x(),...in turn until n val-
ues x(i) have been found equal to . If x(m) is the nth value that
equals , set f(n) = m. (Tus m is the nth member of X, in increas-
ing order.) Ten the range of f equals X.
Conversely, if X is the range of an increasing computable function
f, we can decide whether a given m belongs to X by computing the
values f(), f(), f(),... until a value f(n) C m is found. Ten
m > X if and only if one of these values equals m.
. X and its complement N −X are both computably enumerable.
If both these sets are computably enumerable, run enumerations of
both sets simultaneously. Te two sets together include any positive
integer, so any given n will eventually appear in one of them. When
it does, we will see whether n belongs to X or not.


■
CHAPTER 
Conversely, if X is computable, with characteristic function x, we
can compute enumerations of both X and N−X. Namely, compute
the values x(),x(),x(),..., and list n in X if x(n) = , in N−X
if x(n) = .
All of these results appeared in Post (), the ﬁrst paper on com-
putably enumerable sets (then called “recursively enumerable sets,” since
the word “recursive” was used where we now use “computable”). Post also
found examples of computably enumerable sets that are not computable.
His basic example was obtained by a “self-reference” argument like that
used to prove unsolvability of the “self-examination problem” in the pre-
vious section.
To describe Post’s basic example, and others we will construct later,
we introduce a notation for computable partial functions. Given an enu-
meration A, A, A,... of algorithms, let Φk be the computable partial
function of positive integers computed by algorithm Ak. Tus the value
of Φk(n) is the output (if any) when algorithm Ak is given the numeral
for n as input.
It follows from the universality property of algorithms in section
.that Φk(n) is computable as a function of the two variables k and n.
To compute Φk(n) one generates the list of algorithms as far as Ak, then
runs Ak on the input n. Now we are ready for Post’s example, which gives
a computably enumerable set with unsolvable membership problem.
Computably enumerable but noncomputable set. If D=kΦk(k)=
then D is computably enumerable but not computable.
Proof. Since Φk(n) is a computable partial function of k and n, Φk(k)
is a computable partial function. Tus D is computably enumerable: we
list its members in the computation which, at stage n, does n steps in the
computations of Φ(),...,Φn(n) and lists k at any stage when Φk(k)=
is found.
Now suppose that D is computable. Ten its characteristic function,
d(m) =
¢¨¨¦¨¨¤

if m > D

if m ~> D,
is computable, so d = Φk for some k. But then we have the contradiction
k ~> D  d(k) =  Φk(k) =  k > D,
by the deﬁnition of D. Hence D is not computable.
j

COMPUTABILITY
■

Te existence of a computably enumerable but noncomputable set in-
ﬂuences the treatment of analysis in the system RCA, which admits only
computable sets. Many naturally arising sequences r,r,r,... (of ratio-
nal numbers, typically) are computably enumerable but not necessarily
computable. To “represent” such a sequence in RCA, we encode it by
the set of pairs S = `n,rne  n > N. Since r,r,r,... is computably
enumerable, there is a computable function f with f(n) = rn. Te set
S of pairs is then computable, because we can decide whether a pair of
the form `n,re is in S by computing f(n) and seeing whether it equals r.
Computing the limit of the sequence r,r,r,..., however, is a diﬀerent
story.
.COMPUTABLE SEQUENCES IN ANALYSIS
Computable objects are the most “concrete” inﬁnite objects, so it would
be nice if analysis dealt only with computable real numbers and com-
putable functions. Te best-known irrational numbers, such as
º
, π,
and e are in fact computable, in the sense that the nth digit in their dec-
imal expansion is a computable function of n. We will explore “com-
putable analysis” further in chapter . However, it is easy to see that anal-
ysis cannot be completely computable. If we take a computable sequence
of rational numbers r,r,r,... to be one for which rn is a computable
function of n, then we have:
Computable sequence of rationals with a noncomputable limit. Tere
is a computable sequence of rational numbers with limit whose nth binary
digit is not a computable function of n.
Proof. Take an injective computable total function f with range D, where
D is a computably enumerable but noncomputable set (such as the one
found in the previous section). Tis gives a computable sequence r,r,r,...
of rational numbers rn, where
rn =
n
Q
i=
−f(i).
Indeed, rn has a ﬁnite binary expansion with a in the places f(),...,
f(n) and zeros elsewhere. And the binary expansion of the limit has 
in the kth place for k > D, and zeros elsewhere, so this binary expansion
encodes the characteristic function d of D. We know that the character-
istic function of D is not computable, so neither is the binary expansion
of the limit.
j


■
CHAPTER 
Tis example in fact shows more: a computable increasing sequence
of rational numbers may fail to have a computable least upper bound,
because it is obvious from the deﬁnition of rn that rn+A rn. So the com-
putable real numbers are not “complete” in the classic sense, which goes
back to Bolzano (). Bolzano assumed that any bounded set of real
numbers has a least upper bound in his proof of the intermediate value
theorem, and Dedekind ()—writing up an idea he had in —
deﬁned real numbers in such a way as to make this least upper bound
property almost obvious, as we saw in section .. Of course, these results
were proved long before computability was understood or even thought
to be an issue in analysis.
It is because of the failure of “least upper bound completeness” that
we adopted the nested interval concept of completeness in the previous
chapter. As we will see in chapter , for a computable sequence of closed
nested intervals, with a single common point, the common point is com-
putable. Tus, when analysis is limited to computable operations, in the
system RCAof chapter , the nested interval concept of real number is
available.
However, the above example shows that the least upper bound prin-
ciple is not provable in RCA. We can encode the computable sequence
above by the computable set of pairs `n,rne, which belongs to the model
of RCAwe construct in section ., whose sets are all the computable
sets. But the limit point of the sequence, being noncomputable, does not
belong to the model, so the model does not satisfy the sentence “every
bounded sequence has a least upper bound.”
.COMPUTABLE TREE WITH NO COMPUTABLE PATH
In section .we saw that many basic results of analysis stem from the
weak Kőnig lemma stating that an inﬁnite binary tree has an inﬁnite path.
Tese results are problematic in computable analysis, and in fact a new
axiom is needed to prove them, because a computable inﬁnite tree need
not have any computable inﬁnite path. In this section we give an example.
We ﬁrst construct a pair of computably enumerable sets A,B that are
computably inseparable. A computable total function f is said to separate
sets Aand B if f takes only the values and and
f(n) =
¢¨¨¦¨¨¤

if n > A,

if n > B.

COMPUTABILITY
■

(Informally, f is a machine that says yes or no for each input num-
ber, always saying yes for numbers in A and no for numbers in B.) We
deﬁne A and B using the numbering of computable partial functions
Φ,Φ,Φ,... from the previous section; namely
A = k  Φk(k) = ,
B = k  Φk(k) = .
Tese sets defeat any computable function Φ that tries to separate them.
Any computable f = Φk for some k, so if f separates Aand B we have
Φk(k) =  k > B  Φk(k) = ,
Φk(k) =  k > A  Φk(k) = .
Tus either value of Φk(k) is contradictory, and therefore no computable
f separates Aand B.
We now use the sets A and B to construct an inﬁnite binary tree T,
whose inﬁnite paths separate A and B when we interpret paths as se-
quences of s and s. Te inﬁnite paths are therefore not computable.
Computable tree with no computable inﬁnite path. Tere is an inﬁnite
binary tree T, the vertices of which form a computable set, but whose inﬁ-
nite paths all separate the sets Aand B.
Proof. We view the complete binary tree as the set of all ﬁnite sequences
of s and s, as in section .. A subset T of the vertices is a subtree if
any vertex above a member of T is also in T. An inﬁnite path in T is an
inﬁnite sequence of s and s—that is, a function σ(n) whose values are
or —whose initial segments are all vertices of T. We will construct a
tree T whose inﬁnite paths are functions σ that separate A and B in the
sense that σ(n) = if n > Aand σ(n) = if n > B.
To compute T, we construct it in stages, deciding at stage n which
vertices at level n belong to T. We also enumerate A and B in stages,
using the members found by stage n to decide which vertices at level n
to put in T. Te idea is to pick vertices that “separate” the members of A
and B found so far, which we can assume to be B n. For example, suppose
that by stage we have found and in Aand in B. Ten any vertex of
the form v =   (where  denotes either or ) “separates” the parts
of Aand B found so far, because v has value at places and and value
at place . We therefore put all four vertices of this form in T.
Notice that when v is put in T then all vertices above v are already
in T, because they too “separate” the parts of A and B known at earlier


■
CHAPTER 
stages. It follows that the set T is a tree. Also, T is computable, because
we can decide whether a given vertex v is in T by ﬁnding the level n of v
and then running n stages of the computation just described.
Now consider a path σ in the complete binary tree that separates A
from B; that is, σ(n) = for each n > Aand σ(n) = for each n > B. Te
vertex s at level n on σ separates the members of Aand Bthat are B n, and
hence s is in T. Since this is true for all vertices in σ, the whole inﬁnite
path σ is contained in T. Conversely, if τ is an inﬁnite path that does not
separate Afrom B, then we have either τ(n) = for some n > Aor τ(n) =
for some n > B. Ten the vertex t of τ at level n, or one somewhere
below it on τ, will not be put in T, because at the stage when n is listed
in Aor B it will be seen that t fails to separate Afrom B. Consequently, a
non-separating inﬁnite path τ is not contained in T.
To sum up, the inﬁnite paths in T are precisely those that separate A
from B, and hence (by the computable inseparability of Aand B) all the
inﬁnite paths of T are noncomputable.
j
.COMPUTABILITY AND INCOMPLETENESS
Te main theme of this book is the search for the “right axioms” to prove
important theorems, but a secondary theme is the failure of certain axiom
systems to prove certain theorems. Afer all, if there was an obvious ax-
iom system to prove all theorems then the question of the “right axioms”
would hardly arise. Te question is unavoidable because axiom systems
are inherently incomplete. Any consistent axiom system for mathematics
will fail to prove certain theorems, so we are bound to need new axioms
to prove the missing theorems.
As mentioned in section ., incompleteness is closely related to the
concept of computation. We can now reﬁne this claim by deﬁning a for-
mal system to be an algorithm that computably enumerates theorems.
Tis covers any axiom system actually in use, and any other theorem-
generating system that can reasonably claim to be formal.
It is now easy to see how unprovable sentences arise, via the com-
putably enumerable but not computable set D of section .. Since D is
computably enumerable its complement is not, so we cannot computably
enumerate all true sentences of the form “n ~> D.” But a formal system, by
deﬁnition, computably generates theorems, so there is no formal system
F whose theorems include all true sentences of the form “n ~> D” (unless

COMPUTABILITY
■

F is unsound, and it generates some false sentences). Tus, if we inter-
pret the concept of formal system broadly—as a machine for generating
theorems—the incompleteness of sound formal systems is an almost ob-
vious consequence of the existence of the set D. Incompleteness in this
general form was discovered by Post in the s, and he popularized the
argument in his paper Post ().
Incompleteness was rediscovered by Gödel () by a more tech-
nical argument, but in dramatically stronger form: formal systems for
arithmetic, such as PA, are incomplete. Gödel’s incompleteness can be
derived from Post’s by arithmetization of computation. We give more de-
tails in the next chapter. Te outcome of arithmetization is that sentences
about computably enumerable sets can be translated into sentences in the
language of PA. So, instead of ﬁnding unprovable sentences of the form
“n ~> D” we ﬁnd unprovable sentences about addition and multiplication
of natural numbers.
Gödel’s theorem reveals that incompleteness exists at quite an ele-
mentary level, but alas the unprovable sentences exposed by his con-
struction are not intrinsically interesting. Tey do not reveal any facts
about numbers that number theorists wished to know, though they cer-
tainly reveal things about PA that logicians wished to know. For more on
this, see section ..
.COMPUTABILITY AND ANALYSIS
Interesting unprovable sentences emerge when we expand PA to a system
of analysis by introducing variables for sets of natural numbers. Ten, as
we saw in chapter , it becomes possible to talk about inﬁnite sequences
and continuous functions, so we can ask which theorems about them are
provable. Te answer depends on which set existence axioms we adopt.
Te simplest reasonable set existence axiom says that computable sets
of natural numbers exist. Te arithmetization of computation shows that
computable sets have a natural description in the language of PA: they
are the sets that are both Σ
and Π
, as deﬁned in section .. Tus this
set existence axiom is a natural addition to PA, giving the system RCA
of “computable analysis.” We can immediately see, however, that if only
computable sets are required to exist then the resulting axiom system
cannot prove the existence of noncomputable sets such as D. More in-
terestingly, it cannot prove the existence of a limit for every monotonic,


■
CHAPTER 
bounded, sequence of rationals, as we saw in section .. Tus we have a
natural instance of incompleteness: the monotone convergence theorem,
stating that every bounded monotonic sequence has a limit, is not prov-
able in computable analysis.
We develop the system RCAof computable analysis further in sec-
tion .and chapter . Despite its obvious incompleteness—or indeed
because of it—RCAis a very useful system. It can prove only a few im-
portant theorems of analysis, such as the intermediate value theorem and
the fundamental theorem of algebra. But, crucially, it is able to prove
equivalences between theorems that it cannot prove outright. For exam-
ple, RCAcan prove that the monotone convergence theorem is equiva-
lent to the Bolzano-Weierstrass theorem.
Tis makes RCAan ideal base theory for studying theorems of anal-
ysis. Precisely because RCAis not able to prove certain theorems it is
able to compare their strengths by ﬁnding set existence axioms to which
they are equivalent. Te monotone convergence theorem, for example,
is equivalent to a set existence axiom (called arithmetical comprehen-
sion) asserting the existence of all sets deﬁnable in the language of PA.
We study the main set existence axioms, and their equivalents in analysis,
in chapters and .
Constructive Approaches to Analysis
In this chapter we have sketched the development of computability the-
ory from its origins in logic to its role in the foundations of analysis.
However, computability was an issue in analysis some time before the
concept had a precise deﬁnition. In fact, it could be said that both modern
logic and the associated concept of computation arose from nineteenth-
century concerns about the foundations of analysis. Te key ﬁgure in
this development was David Hilbert, and a detailed account of his foun-
dational work (the “Hilbert program”) may be found in Sieg (). Here
we give just a brief summary of some key events, which are the
following.
. Criticism of “nonconstructive” mathematics by Kronecker. In the
s, Kronecker raised objections to concepts like arbitrary real
numbers, which in his opinion were meaningless except in special
cases where the number could be given (essentially) by a
computation.

COMPUTABILITY
■

. Kronecker’s objections were provoked, in part, by the results about
real numbers proposed by Dedekind (deﬁning real numbers non-
computably) and Cantor (showing that there are uncountably many
real numbers).
. Cantor’s diagonal argument, when applied to the “set of all sets,”
led to the paradox of a “set” larger than the “set of all sets.” Tis
discovery made it clear that the set concept needed clariﬁcation if
it was to be used as a basis for analysis.
. Hilbert proposed a program for securing the foundations of mathe-
matics by means of axiomatics. He proposed that analysis, in partic-
ular, should be developed in an axiom system for the real numbers,
and that this system be proved consistent by constructive methods
that Kronecker would accept. Tis was essentially Hilbert’s second
problem of Hilbert ().
. In the following decades Hilbert reﬁned his program by describing
the problem as one about computation with ﬁnite objects, namely,
strings of symbols representing mathematical statements. Te prob-
lem was to show that the process of generating theorems in an
axiom system for analysis—by mechanically applying the rules of
logic—did not generate the sentence “=.”
. Tus the Hilbert program was reduced to a problem that Kronecker
would have considered meaningful. Indeed, by it was known
that the question of consistency of an axiom system was equivalent
(via arithmetization of computation) to a question of elementary
number theory (PA).
. Alas, this reduction of the consistency problem to a question in PA
was made by Gödel (), who at the same time showed that the
question could not be answered in PA! In fact, the consistency of
PA itself (a system much weaker than analysis) can be expressed
by a sentence Con(PA) in the language of PA—but Con(PA) is not
provable in PA. Tis result is called Gödel’s second incompleteness
theorem, and it applies as well to any system that contains PA—such
a system cannot prove its own consistency.
. Tis theorem of Gödel () derailed the Hilbert program (as well
as having an immense impact on logic and computability theory
that we discuss further in chapter ). But, in the meantime, other
mathematicians had followed Kronecker in doing analysis as far as
possible by constructive methods. One of the most eminent among


■
CHAPTER 
them was Hermann Weyl, whose book (Weyl ()) developed
most of basic analysis in a system rather like RCAplus the arith-
metical comprehension axiom mentioned above.
Of course, Weyl’s work predates the deﬁnition of computation, so he
has intuitively given “constructions” rather than formal computations.
But with hindsight we can see that Weyl’s constructions are indeed com-
putations, so his book is a precursor of the system we now call ACA
(RCAplus the arithmetic comprehension axiom). In chapter we con-
ﬁrm that ACAdoes indeed prove the standard theorems of basic
analysis.

C H A P T E R 
■■■■■
Arithmetization of Computation
In section .we saw that the Σ
formulas of Peano arithmetic (PA)
deﬁne sets that are “computably enumerable” in an intuitive sense. In
chapter we studied the intuitive idea of computable enumerability, as-
suming only that it has some formalization where each computably enu-
merable set may be recovered from a ﬁnite “description,” and the descrip-
tions themselves are computably enumerable.
Under this assumption, we discovered that noncomputable objects
exist: a computably enumerable but noncomputable set, disjoint com-
putably enumerable sets that are computably inseparable, and an inﬁnite
computable tree with no computable inﬁnite path. Tese results reveal
the absence of certain important objects in computable analysis, such as
least upper bounds of some bounded increasing sequences of rational
numbers.
Now it is time to explain why Σ
formulas of PA capture all com-
putably enumerable sets, as claimed by Church’s thesis of section .. Tis
allows us to capture “computable analysis” in the language of PA, since
computable sets and functions are deﬁnable in terms of computable enu-
merability, as we saw in section ..
To justify the claim that Σ
= “computably enumerable,” in this chap-
ter we make a thorough analysis of the concept of computation. We take
a precise, but intuitively natural, concept of computation and translate it
into the language of PA. Te translation is indeed Σ
, but with a slightly
diﬀerent (though equivalent) deﬁnition of Σ
.


■
CHAPTER 
.FORMAL SYSTEMS
Computation has been part of mathematics for thousands of years, but
computability was not thought to be a mathematical concept until the
twentieth century. It emerged from formal systems of mathematics about
years ago, particularly the Principia Mathematica of Whitehead and
Russell (). Teir aim was to produce completely rigorous proofs by
avoiding human errors, such as unconscious assumptions and gaps in
reasoning.
To avoid errors, formal proofs proceed from axioms by rules of infer-
ence. Axioms are viewed as strings of symbols, and the rules produce new
strings (including the “theorems”) from old in a completely mechanical
way. Tis allows correctness of a proof to be veriﬁed without knowing
what its symbols mean. Indeed, proofs could be checked by a machine,
except that suitable machines had not been invented when the ﬁrst for-
mal systems appeared.
Te very idea of a general symbol-manipulation machine was implicit
in Principia Mathematica, because that system was thought to be capable
of generating all the theorems of mathematics. In the early s Emil
Post made an analysis of the axioms and rules of Principia, recasting them
as mechanical rules for producing strings of symbols, among which were
the theorems. Post then proceeded to simplify his rules, in the hope of
ﬁnding a mechanical way to test the truth of any mathematical statement.
Before long (in ) he realized that this hope was in vain, and that
neither Principia, nor any other consistent system, could generate all the
theorems of mathematics.1 However, he did suspect (correctly, as we now
believe) that he had discovered how to generate all sets of strings of sym-
bols that can be mechanically generated. In other words, he had discov-
ered a mathematically precise formulation of the concept of computabil-
ity, at least as it appears in the concept of computably enumerable set.
Post’s formal systems, which he called normal systems, are now
mainly of historical interest. Smullyan () introduced more usable sys-
tems in the same style. Smullyan’s elementary formal systems are not well-
known, but (to my knowledge) they are simpler and more elegant than
any other formalization of the computability concept. It is also easy to
use elementary formal systems to simulate the most popular realization
of the computability concept, the Turing machine of Turing (), as we
1Tis was his anticipation of Gödel’s incompleteness theorem; see Post ().

ARITHMETIZATION OF COMPUTATION
■

will see in section .. For this reason I will follow Smullyan’s approach
in this chapter.
.SMULLYAN’S ELEMENTARY FORMAL SYSTEMS
Smullyan models his systems on classical formal systems. Tey have ax-
ioms and rules of inference and they are written in a language with con-
stants and variables. But unlike the usual formal systems there are no
parentheses. Te constants a,b,c,... are simply strung together to form
words, such as aa, aba,cba,... . Te variables x, y,z,... stand for arbi-
trary words (which can be empty), and they can be strung together with
themselves or with constants to form variable words. For example, axb
represents any word that begins with a and ends with b.
In addition, there are upper case symbols P,Q,R,..., called set vari-
ables, that represent sets or properties. We write Pw to mean “w > P” or
“w has property P.” We note that w could represent an ordered pair, or
an ordered triple, and so on, in which case P could be viewed as repre-
senting a binary (or ternary, and so on) relation such as a function. We
do this simply by inserting commas between the members of the pair, or
triple, and so on. Finally, there is a symbol  that represents implication.
Te purpose of an elementary formal system (EFS) is to generate “the-
orems” of the form Pw, where w is a constant word, and thus to “com-
putably enumerate” the members of a set P of words. To this end, the
system has axioms of two kinds:
Axioms of an EFS.
• Pw, for certain constant words w, stating that these w belong to P.
• Px Px   Pxn, for certain variable words x,x,...,xn.
Tis axiom is read “Pximplies that Pximplies that  Pxn−im-
plies Pxn.” It is logically equivalent to
(Px, Px,  , Pxn−)  Pxn.
An example, which deﬁnes the set E of strings of the form aa a of
even positive length, is
Eaa
Ex  Exaa.


■
CHAPTER 
It is easy to see that we can derive all (and only) theorems of the form
Eaa a with a positive even number of letters a if we use the obvious
rules of inference, which in fact cover all EFS:
Rules of inference of an EFS.
• In any axiom, the result of substituting an arbitrary word for each
occurrence of a variable is a theorem.
• If U and U  V are theorems, and if U is not itself of the form
X  Y, then V is a theorem. (Tis rule is called modus ponens
afer the similar rule in classical logic.)
(Te reason for the restriction on modus ponens is the following. If U is
X  Y, with X and Y containing no arrows, then U  V is X  Y  V,
which means (X , Y)  V. But U is not the same as X , Y, so V does
not follow from U and U  V. However, if X and Y are theorems, and
we also have X  Y  V, then we can conclude V, as you would hope.)
Examples of Axiom Systems
. An EFS generating the set P of palindromes (words spelled the
same backwards and forwards) on the alphabet a,b.
Pa
Paa
Pb
Pbb
Px  Paxa
Px  Pbxb
Tese axioms allow us to start with any one- or two-letter palin-
drome and to expand it to an arbitrary palindrome by repeatedly
attaching the same letter at both ends.
. An EFS generating the set S of words on a,b,c which involve
only the letters a,b.
Sa
Sb
Sx  Sy  Sxy

ARITHMETIZATION OF COMPUTATION
■

Tese axioms generate any word consisting of as and bs by starting
with one-letter words and concatenating arbitrary words.
. An EFS generating the set T of nonempty words on a,b with
equal numbers of as and bs.
Tab
Tba
Txyz  Txaybz
Txyz  Txbyaz
Te ﬁrst two axioms give the two-letter words with equal numbers
of as and bs. Te latter two axioms, since x, y, or z may be empty,
allow one a and one b to be inserted at the same time anywhere in
a word, thus maintaining equal numbers of as and bs.
.NOTATIONS FOR POSITIVE INTEGERS
Elementary formal systems generate “words” rather than “numbers” be-
cause their purpose is to produce theorems or formulas, which are gener-
ally strings of symbols in an alphabet with more than one symbol. How-
ever, numbers themselves can be represented by strings of symbols—
namely, numerals—and hence we can interpret words over any ﬁnite al-
phabet as numbers by viewing the words as numerals.
Te simplest numerals are the words , , , ...on a single-symbol
alphabet, where the positive integer n is represented by a string of n ones.
Tese base one or unary numerals are simple and natural, but in some
ways too simple to be convenient. Te main inconvenience is that unary
numerals for even modest size numbers, say and , are hard to tell
apart—because they are so long.
Te usual base numerals are strings of symbols from the alphabet
,,,,,,,,,, but they have the disadvantage that many dif-
ferent strings represent the same number. For example, , , , and so
on all represent the number . Te usual base numerals have the same
disadvantage. If we are content to have numerals only for positive num-
bers then a solution to this problem is given by what Smullyan calls the
dyadic system of numerals. Tis system gives a one-to-one correspon-
dence between positive integers n and strings of the digits and . Te
dyadic numerals for the ﬁrst few positive integers are the following (with


■
CHAPTER 
base numerals on the lef):
= 
= 
= 
= 
= 
= 
= 
= 
= 
= 
= 
= 
= 
= 
...
In general, each positive integer n is represented by a string dk  dd,
where d,d,...,dk are the unique digits in , such that
n = dk ċ k−+  + dċ + dċ .
Obviously, each string of s and s represents a positive integer. Also, we
can show inductively that the string for each positive nis unique. Namely,
given the unique dyadic numeral for n, the obvious process for adding
gives the unique dyadic numeral for n + . (See section .for an EFS
that does this.)
Symbol strings in any alphabet a, a,..., an can be encoded by
dyadic numerals if we replace aby , aby , aby , and so on.
So all the operations on strings that occur in an EFS can be viewed as op-
erations on numbers. Tis gives a (distant) glimpse of how to arithmetize
computation.
But before doing so we will study the opposite problem: doing arith-
metic in elementary formal systems. Tis will improve our understand-
ing of the “computational ability” of elementary formal systems, and thus
bolster the claim that they can represent any computation. At the same

ARITHMETIZATION OF COMPUTATION
■

time, we will become more familiar with the computational content of
arithmetic, which will be useful when we come to arithmetize computa-
tion later.
Universal Elementary Formal Systems
An important side eﬀect of the encoding of aby , aby , aby ,
and so on, is that words in an arbitrary ﬁnite alphabet may be encoded by
words in the ﬁxed alphabet ,. Tis raises the possibility of a universal
EFS that can simulate the operations of any particular EFS. By encoding
the alphabet of each EFS in the alphabet ,, and perhaps adding a few
more letters for convenience, it should be possible to construct an EFS U
that is universal in the sense that U generates all true statements of the
form “system S generates theorem T,” with some appropriate encoding
of systems and theorems.
In the Turing machine model of computation the corresponding uni-
versal system is called a universal Turing machine, and one was con-
structed in the groundbreaking paper of Turing (). In the EFS model
of computation, a universal EFS is described in Smullyan (), pp. –
and –. We skip the details of a universal EFS, but mention that it
may be used to formalize the argument of section ., where we described
a computably enumerable set of natural numbers whose complement is
not computably enumerable.
.TURING’S ANALYSIS OF COMPUTATION
Before we explore EFS computation in detail, we should look at the clas-
sic introduction of computation in Turing (). Turing arrived at his
concept of computation by analyzing the way that humans compute with
pencil and paper. His assumptions (and his reasons for them) about the
way a human “computer” operates (or could operate) were the following:
. Te computer can recognize ﬁnitely many diﬀerent symbols Sj, and
scans one of them at a time. A “symbol” in this sense may be a ﬁnite
block of digits or letters of the alphabet, but only ﬁnitely many such
symbols can be distinguished. “Symbols” that are too similar will be
confused, for example, and .
. Te computer has ﬁnitely many internal states (think of them as
“mental states”) qi for the same reason: if there are inﬁnitely many,
then some will be too similar to distinguish.


■
CHAPTER 
. Computation is directed by a ﬁnite program, which tells what to do
when a given symbol is scanned while in a given internal state.
. It can be assumed that symbols are written on a tape divided into
squares, one symbol per square, and that at each step of compu-
tation a read/write head replaces the scanned symbol by another
symbol, moves one square to the lef or right, and enters another
internal state.
Te last condition, of course, restricts the way we normally use pencil and
paper, but it is a restriction we can endure at the cost of slower computa-
tion. For example, we can compute +on a single line by mov-
ing back and forth between the two numerals, crossing oﬀdigits (that is,
replacing a digit symbol such as by the crossed digit symbol ) as their
sums are computed and “carrying” digits mentally (that is, by internal
states).
With some practice, it becomes clear that all our familiar computa-
tions can be done under Turing’s conditions, and are “programmable”
by Turing machine. Te program of a machine can be written as a ﬁnite
sequence of quintuples, of the form qiSjSkRql (or qiSjSkLql). Te com-
mand qiSjSkRql says that if the state is qi and the scanned symbol is Sj,
then replace Sj by Sk, move one square to the right, and go into state ql.
(And similarly if L occurs instead of R.)
It is noteworthy that Post () arrived at virtually the same concept
of computation independently, as Turing himself said in Turing ().
Further details may be found in the papers of Turing and Post, or in-
deed in many books on the theory of computation. Te Turing machine
concept was decisive in convincing logicians, notably Gödel, that the in-
tuitive concept of computation could be formalized.
From Turing Machines to Elementary Formal Systems
Another historic paper2 worth reading is Post (), in which the Turing
machine concept of computation is translated into one based on word
replacement. Post shows that each computation by a Turing machine T
can be encoded by a sequence of words. Te kth word wk encodes the
machine conﬁguration, consisting of marked portion of T’s tape at step
2Tis paper is famous because it is the ﬁrst in which unsolvability is proved for a prob-
lem posed by a mainstream mathematician; namely, what we now call the word problem
for semigroups. Te word problem was posed by Tue ().

ARITHMETIZATION OF COMPUTATION
■

k, together with a symbol qi, inserted to the lef of the scanned symbol
Sj, denoting the current internal state. (Figure .shows an example, with
Sj = and the head in state q.)





q
[


j
q



]
Figure .: A machine conﬁguration and the word that encodes it
Te word wk+results from wk by replacing the subword qiSj in wk,
together with one or two symbols to its lef and right, by a new subword,
as required by the program for T. Since there are only ﬁnitely many such
subwords, only ﬁnitely many word transformations are needed to simu-
late the program for T. For example, if the program for T includes the
quintuple qLqthen we need the word replacement rules
Skq  qSk
for each symbol Sk.
In particular, the rule jq  qj allows the word in ﬁgure .,
wk = [j q],
to be replaced by the word
wk+= [qj ],
which encodes the next conﬁguration of the machine.
With a ﬁnite set of rules for word replacement we are very close to
an elementary formal system. Indeed, a rule u   v saying that word
u may be replaced by word v is implemented in an EFS by the axiom
Wxuy  Wxvy. Tis, then, is how Turing machines can be simulated
by elementary formal systems. Now it is time to explore EFS computation
directly.
.OPERATIONS ON EFS-GENERATED SETS
Te intuitive property of computable enumerability is preserved by some
of the basic operations on sets, such as union, intersection, and cartesian


■
CHAPTER 
product. If we suppose that we can generate lists of members of sets S
and T, then we can also generate lists of members of:
• S 8 T
namely, by listing S and T simultaneously and merging the two
lists.
• S 9 T
namely, by listing S and T simultaneously and making a third list—
of the elements that appear in both S and T.
• S  T
namely, by listing `x, ye for each x that appears on the list for S and
each y that appears on the list for T.
In terms of properties, rather than sets, we are saying that if the proper-
ties S(x) and T(x) (corresponding to the properties x > S and x > T)
are computably enumerable, then so are the properties S(x) - T(x),
S(x) , T(x), and S(x) , T(y).
Deﬁnition. A set S (of words in some ﬁnite alphabet) is called EFS-
generated if there is an EFS that proves Sx if and only if x > S.
With this deﬁnition we can conﬁrm that the above operations—which
preserve computable enumerability in the intuitive sense—also preserve
EFS-generated sets.
Operations on EFS-generated sets. If S and T are EFS-generated sets,
then so are S 8 T, S 9 T, and S  T.
Proof. Given an EFS to generate S and an EFS to generate T, we construct
EFS to generate each of (i) S 8 T, (ii) S 9 T, and (iii) S  T.
(i) Suppose we have an EFS for each of S and T. By rewriting the
system for T, if necessary, we can ensure that the systems have no set
variables in common. Te union of the two systems will then function
as two independent systems, proving the theorems Sx for x > S and the
theorems Tx for x > T.
So if X is a set variable not already used, adding the axioms
Sx  Xx,
Tx  Xx
gives an EFS that proves the theorems Xx for precisely the x in S 8 T.
(ii) Similarly, adding the axiom Sx  Tx  Xx gives a system that
proves the theorems Xx for exactly the x in S9T, because Sx  Tx  Xx
means (Sx , Tx)  Xx.

ARITHMETIZATION OF COMPUTATION
■

(iii) To set up a system to generate S  T we assume, without loss of
generality, that the comma is not one of the symbols in the systems for
S and T. (If it is, replace it by some other symbol not already used.) Tis
enables us to use the string x, y to represent the ordered pair `x, ye.
Under this assumption we combine the systems for S and T as above
and add the axiom
Sx  Ty  Px, y
where P is a set variable not already used.
Since this axiom means (Sx,Ty)  Px, y, the new system proves Px, y
for precisely the `x, ye in S  T.
j
Using the comma as in part (iii) of the proof above, we can speak of
EFS-generated sets of n-tuples.
Deﬁnition. A set S of ordered n-tuples `x,x,...,xne is said to be EFS-
generated if there is an EFS whose theorems of the form Sx,x,...,xn,
for comma-free words x,x,...,xn, are those for which `x,x,...,xne
> S.
We can now contemplate operations on EFS-generated sets of n-
tuples. Te most important of these is called existential quantiﬁcation
(when speaking in terms of properties) or projection (when speaking in
terms of sets).
Deﬁnition. If W(x,...,xk, y,..., yl) is a property of (k + l)-tuples,
then the property §x§xkW(x,...,xk, y,..., yl) is an existential
quantiﬁcation of the property W, and the set
`y,..., yle  §x§xkW(x,...,xk, y,..., yl)
is the corresponding projection of the set
`x,...,xk, y,..., yle  W(x,...,xk, y,..., yl).
Projection of EFS-generated sets. If W is an EFS-generated set of
(k + l)-tuples, then any projection of W is EFS-generated.
Proof. Given an EFS for W, let E be a new set variable and add the axiom
Wx, ,xk, y, , yl, Ey, , yl.
j


■
CHAPTER 
.GENERATING Σ
SETS
In section .we classiﬁed the sets deﬁnable in Peano arithmetic (PA) by
means of the formulas deﬁning them. We began with equations between
terms involving variables, the constant , and the S, +, and ċ functions,
then combined equations by the Boolean operations ,, -, and  to form
quantiﬁer-free formulas.
In the present section we follow a similar path, but we enlarge the
class of quantiﬁer-free formulas by allowing the bounded quantiﬁers
(∀x < y) and (§x < y) to occur in them. Te properties deﬁned by
the new formulas do not in fact include any not deﬁned by the old, but
it is useful to have the extra ﬂexibility aﬀorded by bounded quantiﬁers.
In particular, if we deﬁne Σ
formulas to be those obtained by existen-
tial quantiﬁcation of the new quantiﬁer-free formulas it becomes easier
to reach our ultimate goal of showing that the EFS-generated sets equal
the Σ
sets. Te more ﬂexible deﬁnition of Σ
is in fact the one used in
the deﬁnitive treatment of reverse mathematics, Simpson (). In this
section and the next we prove one direction of the equality: Σ
sets are
EFS-generated.
Since we have already shown, in the last section, that the existen-
tial quantiﬁcation of an EFS-generated set is EFS-generated, it suﬃces to
show that the sets deﬁned by quantiﬁer-free formulas are EFS-generated.
We begin with sets deﬁned by equations, and the related problem of rep-
resenting functions (and relations) by sets—particularly the S, +, and ċ
functions.
Deﬁnition. A relation R(x,x,...,xn) is EFS-representable if there is
an EFS for the set `x,x,...,xne  R(x,x,...,xn).
EFS-representation of basic relations. Te relations
(i) S(x) = y, (ii) x + y = z , (iii) x ċ y = z, (iv) x < y, (v) x B y, and (vi)
x x y
are EFS-representable.
Proof. (i) Te relation S(x) = y in dyadic numerals is represented by
Sx, y in the EFS:
S,
S,

ARITHMETIZATION OF COMPUTATION
■

Sx,x
Sx, y  Sx, y
Tese axioms are clearly true when Sx, y is interpreted as S(x) = y and
x, yare dyadic numerals. So the instances of Sx, yoccuring as theorems
of this EFS express true instances of S(x) = y. To see why all instances
occur as theorems we show that all dyadic numerals x occur in theorems
Sx, y. Te shortest instances x = and x = are in the ﬁrst two axioms;
the third axiom allows us to attach a to the right of any instance of x;
and the fourth axiom (about “carrying ”) allows us to attach a to the
right of any instance of x.
(ii) Given the EFS for S(x) = y, we obtain an EFS for x + y = z by
adding axioms that implement the inductive deﬁnition of + (for positive
integers). Writing Ax, y,z to represent x + y = z, suitable axioms are
Sx,u  Ax,,u
(base step)
and (using the “and” symbol , for the moment)
(Ax,v,w , Sv, y, Sw,z)  Ax, y,z.
(induction step)
Te induction step is written oﬃcially as the axiom
Ax,v,w  Sv, y  Sw,z  Ax, y,z.
(iii) Given the above EFS for S and +, we obtain an EFS for ċ by adding
axioms that deﬁne ċ inductively, writing Mx, y,z to represent x ċ y = z:
Mx,,x
(base step)
and
(Mx,v,w , Sv, y, Aw,x,z)  Mx, y,z.
(induction step)
Te induction step is written oﬃcially as the axiom
Mx,v,w  Sv, y  Aw,x,z  Mx, y,z.
(iv) Writing Lx, y to represent x < y, we can generate all correct in-
stances of Lx, y by adding the following axioms to those in (i):
Sx, y  Lx, y
Lx, y  Ly,z  Lx,z


■
CHAPTER 
(v) Writing L′x, y to represent x B y, we get axioms for x B y by
adding the following to those in (i) and (iv):
Lx, y  L′x, y
L′x,x
(vi) Te latter axiom (if we wrote it for a diﬀerent set variable, E say)
deﬁnes the equality relation x = y. Te inequality relation x x y can be
represented by Nx, y if we add the following axioms to those in (iv):
Lx, y  Nx, y
Ly,x  Nx, y
j
.EFS FOR Σ
RELATIONS
Boolean Combinations of Equations
We ﬁrst wish to use the theorem above to prove that an equation
t(x,...,xk) = t(y,..., yl),
where tand tare terms built from variables and by the S, +, and ċ func-
tions, is an EFS-representable relation between x,...,xk, y,..., yl. To
do this we need to prove that the composite of EFS-representable func-
tions is itself EFS-representable. An example will suﬃce to show how this
is done. Given the relations x + y = z and z = u ċ v we wish to represent
the relation
R(u,v,x, y)  x + y = u ċ v.
We already have an EFS that represents x + y = z by Ax, y,z and an EFS
that represents u ċ v = z by Mu,v,z. Ten all we have to do is add the
axiom
Ax, y,z  Mu,v,z  Ru,v,x, y.
In general, if Rx,...,xk,z represents the relation t(x,...,xk) = z
and Ry,..., yl,z represents the relation t(y,..., yl) = z, then we can
represent the relation t= tby the relation Qx,...,xk, y,..., yl if we
add the axiom
Rx,...,xk,z  Ry,..., yl,z  Qx,...,xk, y,..., yl.

ARITHMETIZATION OF COMPUTATION
■

We can also represent the relation tx tby writing down the axioms for
Nx, y, then adding
Rx,...,xk,w  Ry,..., yl,z  Nw,z.
Tus we can ﬁnd EFS-representations of both relations t= tand tx t.
Combining this with the EFS for union and intersection of EFS-
generated sets (from section .), we can obtain an EFS for any Boolean
combination of equations between terms; that is, any combination of equa-
tions by means of the connectives ,, -, and  . Tis is because the equiv-
alences
 (φ , ψ)  ( φ) - ( ψ),
 (φ - ψ)  ( φ) , ( ψ),
allow  signs to be “pushed inward” until they hit equations t= tand
turn them into inequations tx t. At this stage all other connectives
are - or ,, shown to be EFS-representable in section .. Since we can
represent t= tand tx t, we can obtain an EFS for any Boolean
combination of equations, as claimed.
Such Boolean combinations were called quantiﬁer-free formulas of
PA in section .. But we now wish to expand the concept “quantiﬁer-
free” to include the bounded quantiﬁers (∀x < y) and (§x < y).3 To
avoid confusing the two possible meanings of “quantiﬁer-free” we will
use the term Σ
formula for one built from equations between terms by
applying Boolean operations and bounded quantiﬁers. We will also show
that the result of applying a bounded quantiﬁer to an EFS-representable
relation is EFS-representable.
Bounded Quantiﬁers
First observe that a bounded existential quantiﬁer is no problem because
(§y < z)R(x,...,xk, y)  (§y)[R(x,...,xk, y) , y < z].
We know from section .that existential quantiﬁcation of an EFS-
representable relation is EFS-representable, and R(x,...,xk, y) , y < z
is representable if R is, because y < z is EFS-representable and so is the
intersection of EFS-representable relations.
3Tis includes the quantiﬁers (∀x B y), which is equivalent to (∀x < y + ), and
(§x B y), which is equivalent to (§x < y+ ).


■
CHAPTER 
Tus it remains to prove:
EFS-representationofboundeduniversalquantiﬁcation. If the relation
R(x,...,xk, y) is EFS-representable so is (∀y < z)R(x,...,xk, y).
Proof. We introduce a set variable R< such that R<(x,...,xk,z) is equiv-
alent to (∀y < z)R(x,...,xk, y). Te relation R< vacuously satisﬁes
R<(x,...,xk,) because there is no positive integer y < . Te relation
also satisﬁes
[R<(x,...,xk,z) , R(x,...,xk,z) , w = S(z)]  R<(x,...,xk,w).
Tus, if we write down the axioms for the function S from the previous
section, then add the EFS for R and also the axioms
R<x,...,xk,
R<x,...,xk,z  Rx,...,xk,z  Sz,w  R<x,...,xk,w
we obtain an EFS that generates all theorems of the form R<x,...,xk,z.
j
We now redeﬁne Σ
relations (as stated in the preview to this chapter),
to be the existential quantiﬁcations of Σ
relations of PA and we have:
Corollary. All Σ
relations are EFS-generated.
Proof. Te Σ
relations are those obtained from equations t= t, by
Boolean operations and bounded quantiﬁcations, where the terms tand
tresult from variables and by applying the S, +, and ċ functions.
Te theorems of this section show that Σ
relations are EFS-generated,
and hence so are the Σ
relations, by the theorem on existential quantiﬁ-
cation in section ..
j
.ARITHMETIZING ELEMENTARY FORMAL SYSTEMS
Te previous sections of this chapter have demonstrated the computa-
tional ability of EFS, by showing that they can represent all the Σ
re-
lations of PA. Indeed, the ingredients of Σ
relations—the S, +, and ċ
functions, equations and their Boolean combinations, bounded quanti-
ﬁers, and existential quantiﬁcation—are “simulated” in a way that closely
tracks their meaning.

ARITHMETIZATION OF COMPUTATION
■

When it comes to demonstrating the converse—that Σ
relations of
PA can “simulate” the workings of EFS—there are some technical diﬃ-
culties that make the simulation harder to track. Because of this, we will
carry out only the most fundamental parts of the simulation in detail,
and describe the overall process in broader terms, so that the reader has
a better chance of seeing the big picture. (Even so, there are some messy
details, which may best be skipped at ﬁrst reading.)
Words and Numbers
As we said in section ., the ﬁrst step in arithmetizing elementary formal
systems is to encode strings of letters (or “words”) by dyadic numerals.
Tese numerals have the potential to encode words in an arbitrary alpha-
bet, since we can encode diﬀerent letters by the numerals , , ,
and so on. Te hard part is to reﬂect natural operations on words by op-
erations on numbers, using only the language of PA with its built-in S, +,
and ċ functions. Te most fundamental operation on words x and y is to
form the word xy, the concatenation of x and y, by writing down x and
then y to its right.
If x and y are the numbers whose binary numerals are x and y re-
spectively, we let x ⌢y denote the number whose binary numeral is xy.
We can deﬁne the numerical concatenation function ⌢via the following
series of deﬁnitions. Notice that these deﬁnitions use at most bounded
quantiﬁers, hence they are Σ
as deﬁned in the previous section.
. First we deﬁne the relation “x divides y” by
x div y  (x = ) - (§z < y)(x ċ z = y).
. Next
x is a power of  (∀y < x)[(y div x , < y)  div y].
. Ten, if l(x) = length of dyadic numeral for x, we have
y = l(x)  y is a power of , [y−B x B ċ (y−)],
because, if y is a power of , y−is the smallest number with the
same length as y, and ċ (y−) is the largest.
. Finally,
x ⌢y = z  x ċ l(y) + y = z
 (§v < z)(§w < z)[v = l(y) , x ċ v = w , w + y = z].


■
CHAPTER 
Finite Sequences
Using the numerical concatenation function ⌢we can deﬁne numerical
properties that reﬂect properties of words relevant to the operations of
elementary formal systems. Tese include
“x is an initial segment of y,”
“x is a ﬁnal segment of y,”
“x is a subword of y,”
“x is of the form u  v,”
and all quantiﬁers occurring in the deﬁnitions can be bounded for the
same reasons as in the four deﬁnitions above.
Ten for a given EFS it is possible to deﬁne arithmetical relations
• Axiom(x) that reﬂects “x is an axiom,”
• x subst y that reﬂects “x gives y by substitution,”
• x, y modusponens z that reﬂects “x, y give z by modus ponens,”
using only bounded quantiﬁers. But to reﬂect the property “x is a theo-
rem” we need to state the existence of a ﬁnite sequence, each term of which
is either an axiom or a consequence of earlier terms. Such a sequence is
a “proof,” and to be a theorem is to be the last term of a proof.
Tus another prerequisite for arithmetizing computation is a device
for encoding and decoding ﬁnite sequences of positive integers. It is clear
that a ﬁnite sequence of words w,w,...,wk is easily encoded by a single
word wwwk with the help of a new symbol  as a “separator.”
We can then encode the sequence by a binary numeral and extract infor-
mation from the corresponding number with the help of the ⌢function.
However, there is an arithmetically simpler way to encode a ﬁnite se-
quence of numbers by a single number, due to Gödel (). Tis is by
means of the Gödel β-function, which is easily deﬁned in terms of the
remainder function:
rem(a,b) = r  (§q < a)(a = bq + r , r < b).
Te deﬁnition of the β-function is by the quantiﬁer-free formula:
β(c,d, i)=x  rem(c,+ (i + ) ċ d)=x
 (§q < c)[c=(+ (i + ) ċ d) ċ q + x , x < + (i + ) ċ d].
Now we can represent any ﬁnite sequence of positive integers x,x,
...,xn as the sequence of values β(c,d, i) for suitable c,d, and for

ARITHMETIZATION OF COMPUTATION
■

i = ,,...,n. Tis is a consequence of the Chinese remainder theorem
from elementary number theory, according to which any sequence of
positive remainders xi is attainable when a suitable c is divided by a suit-
able + (i + )d.4
EFS-generated Sets are Σ

Tanks to the β-function, we can express “there is a sequence x,x,...,xn”
by the formula:
(§c,d,n)(∀i B n)[β(c,d, i) = xi].
Consequently, “there is a proof” is expressed by the Σ
formula saying
that there is a sequence, each term of which is either an axiom or the
consequence of previous terms by substitution or modus ponens:
(§c,d,n)(∀i B n)[Axiomβ(c,d, i)-
(§j< i)(β(c,d, j) subst β(c,d, i))-
(§j, k < i)(β(c,d, j), β(c,d, k) modusponens β(c,d, i))].
And ﬁnally, “x is a theorem” is expressed by the Σ
formula which adds
the clause β(c,d,n) = x, saying “x is the last term in the sequence,” to
the formula above:
(§c,d,n)[β(c,d,n) = x,
(∀i B n)[Axiomβ(c,d, i)-
(§j< i)(β(c,d, j) subst β(c,d, i))-
(§j, k < i)(β(c,d, j), β(c,d, k) modusponens β(c,d, i))]].
Terefore, since an EFS-generated set W of words w corresponds, by
deﬁnition, to the set of theorems Pw of some EFS, it follows that W is
Σ
.
.ARITHMETIZING COMPUTABLE ENUMERATION
In this section we are going to formalize the idea that a nonempty Σ
set
S can be “listed” in a computable fashion. To be precise, we show that
4Smullyan takes the concatenation route to ﬁnite sequences because he wishes to
avoid using number theory. However, it is not clear to me where to draw the “number
theory” line. For example, we are using properties of divisors in our deﬁnition of “x is a
power of .”


■
CHAPTER 
there is a function f whose range is S—so f(), f(), f(),... is a “list”
of the members of S—and f is computable in the sense that the relation
f(m) = n can be expressed by both a Σ
and a Π
formula of PA. Tis is
the arithmetical equivalent of being computably enumerable and having
a computably enumerable complement.
Arithmetizing Recursion
Te main problem in arithmetizing the deﬁnition of f is that the deﬁni-
tion is recursive; that is, f(m+) is deﬁned in terms of f(m). So, to allow
the arithmetization to go as smoothly as possible, we ﬁrst explain how to
arithmetize (a special case of) recursion.
Deﬁnition. A function F  N   N is said to be representable in PA, or
arithmetically representable, if the relation F(n) = m is equivalent to a
formula ψ(m,n) in the language of PA.
Arithmetizing a recursion. If F is arithmetically representable and f is
deﬁned by f() = xand f(m + ) = F(f(m)), then f is arithmetically
representable.
Proof. Te idea is that f(m) is the last term in a sequence x,x,...,xm,
where x= f() and, for each i < m, xi+= F(xi). We can express
the existence of such a sequence with the help of the Gödel β-function
from the previous section. Namely, xi = β(c,d, i) for certain c,d, so the
statement that f(m) = n becomes
(§c,d)[β(c,d,) = x, (∀i < m)(β(c,d, i + )
= F(β(c,d, i))) , β(c,d,m) = n].
Since β and F are arithmetically representable, we now have an arith-
metical formula representing f.
j
We note at this stage that the only explicit quantiﬁers in this formula
are the § quantiﬁers in front. So, provided that F is itself Σ
, we will have
a Σ
formula for the relation f(m) = n. We will also have a Σ
formula
for the relation f(m) x n, because this requires only that we change
the “= n” at the end of the formula to “x n.” Ten, since f(m) = n is
equivalent to  f(m) x n we can also express the relation f(m) = n by
the negation of the Σ
formula for f(m) x n; that is, by a Π
formula.

ARITHMETIZATION OF COMPUTATION
■

Computable Enumeration
We begin with a couple of elementary observations that allow us to work
with simple hypotheses.
First, we observe that any Σ
formula §m§mk φ(m,...,mk,n),
where φ is Σ
, is equivalent to one with a single § quantiﬁer, namely
§m φ(Pk
(m),...,Pk
k(m),n),
where Pk
,...,Pk
k are the projection functions for the k-tupling function
Pk. All of these functions come from the pairing function P of section
.. Tus the k-tupling functions are
P(m,m) = P(m,m),
P(m,m,m) = P(m,P(m,m)),
P(m,m,m,m) = P(m,P(m,P(m,m))),
and so on. And when m = P(m,m,m), for example, the projection
functions are
P
(m) = m,
P
(m) = m,
P
(m) = m.
Te pairing function P is Σ
because (by section .)
P(x, y) = z  ċ z = ċ x + (x + y)(x + y+ ),
and hence so are its projection functions because
P(z) = x  (§y B z)[P(x, y) = z],
P(z) = y  (§x B z)[P(x, y) = z].
It follows that all of the functions Pk,Pk
,...,Pk
k are Σ
, so
§m φ(Pk
(m),...,Pk
k(m),n)
is a Σ
formula.
Tus, without loss of generality, we can assume that any Σ
set S is
deﬁned by
n > S  §m φ(m,n),
where φ is a Σ
formula.
Second, if S is nonempty, but ﬁnite, we can choose a φ(m,n) that
holds for inﬁnitely many pairs `m,ne. Namely, if S = n,...,nl then
n > S  §mφ(m,n),
where
φ(m,n) = §m[m = m,(n = n--n = nl)].


■
CHAPTER 
Computable enumeration of a Σ
set. If S is a nonempty Σ
set, then S
is the range of a function g that is both Σ
and Π
.
Proof. By the remarks above we can assume that
n > S  §m φ(m,n),
where φ is a Σ
formula satisﬁed by inﬁnitely many pairs `m,ne. We ﬁrst
consider a function f whose range consists of the numbers t = P(m,n)
such that φ(m,n). Namely, deﬁne f recursively by
f() = least t such that φ(P(t),P(t)),
f(s + ) = least t A f(s) such that φ(P(t),P(t)).
In other words, f is deﬁned recursively by the equations f() = t
(say) and f(s + ) = F(f(s)), where
F(u) = v  v = least t A u such that φ(P(t),P(t))
 v A u , φ(P(v),P(v)) , (∀i < v)(i A u   φ(P(i),P(i))).
Tus F has a Σ
deﬁnition and so it follows from arithmetization of re-
cursion that f is both Σ
and Π
.
Finally, since fhas range t  φ(P(t),P(t)) = P(m,n)  φ(m,n)
and P(P(m,n)) = n, it follows that the function
g(t) = P(f(t))
has range n  §m φ(m,n), as required.
j
.ARITHMETIZING COMPUTABLE ANALYSIS
Now that we know the arithmetical meaning of computably enumerable
set, computable set, and computable function, we can see how to modify
PA axioms to make a system for computable analysis.
First, there should be an axiom (schema) asserting the existence of
computable sets. Tat is, if φ is a property of natural numbers that can
be expressed in both Σ
and Π
forms, then we have the axiom
§X ∀n [n > X  φ(n)],
(RCAx)
called the recursive (meaning computable) comprehension axiom. RCAx
is really an axiom schema because there are inﬁnitely many properties

ARITHMETIZATION OF COMPUTATION
■

φ expressible in both Σ
and Π
forms. Note also that φ can contain set
variables other than X. Tis allows us to apply computable operations to
arbitrary sets. For example, RCAx allows us to conclude that if Y is a set,
so is the collection Z of even numbers in Y, because
n > Z  n > Y , (§m < n)(n = ċ m)
and the condition on the right is both Σ
and Π
.
Second, we restrict the induction axiom (schema) of PA,
[φ() , ∀n (φ(n)  φ(n + ))]  ∀n φ(n),
to Σ
formulas φ. We call the latter scheme Σ
induction. Te system ob-
tained from PA by restricting induction to Σ
induction and adding the
recursive comprehension axiom is called RCA, from the initial letters
of “recursive comprehension axiom.”5
As we have seen in chapter , there are many noncomputable sets and
functions, so we expect RCAto have limited scope. Indeed, we will see
that RCAfails to prove many of the basic theorems of analysis. However,
RCAis surprisingly good at proving equivalences between important
theorems. For example, RCAcan prove that the Heine-Borel theorem is
equivalent to the extreme value theorem for continuous functions, even
though it is unable to prove either of these theorems outright. Tis makes
RCAa good base theory for analysis, because the job of a base theory is
to give “elementary” equivalence proofs between theorems that are not
themselves “elementary.”
Example of a Proof in RCA
Te proof in the previous section, on the computable enumeration of a
Σ
set, translates into a proof in RCAof the following theorem.
5Te word “recursive” here is a relic of the time (roughly –) when all com-
putable functions were called “recursive.” Today the word “computable” is preferred when
the general computation concept is meant, and “recursive” is mostly conﬁned to deﬁni-
tions (like that in the previous section) where the value of a function is determined by
its previous values. But we seem to be stuck with the word “recursive” in the “recursive
comprehension axiom.”
Te subscript in RCAalso has a history. Friedman () proposed a system RCA
with induction for all arithmetical formulas φ, but Friedman () found that Σ
induc-
tion usually suﬃces, hence the name change. Σ
induction is preferred because we want
a base system to be as elementary as possible.


■
CHAPTER 
Realizinga Σ
conditionbyafunction. For any Σ
condition §mφ(m,n)
there is a function g  N   N such that §m [g(m) = n]  §m φ(m,n).
Proof. Given φ(m,n) we can proceed, as in the previous proof, to write
down the deﬁnition of a function g whose values are the n such that
§m φ(m,n). Te function g can be deﬁned by both a Σ
and a Π
for-
mula, as we observed, so g exists by the recursive comprehension axiom.
Te ﬁrst step of the previous proof, recursively deﬁning a function f
whose values are the numbers t = P(m,n) such that φ(m,n), can now
be justiﬁed by Σ
induction. Tus we have a proof in RCAthat g exists
and that §m [g(m) = n]  §m φ(m,n).
j
Remember that when RCAproves existence of a function g this
means that the set of ordered pairs `n, g(n)e is computable. We have not
proved in RCAthat the set n  §m φ(m,n), the range of g, exists. In-
deed, we cannot do this in RCAwhen n  §m φ(m,n) is computably
enumerable but not computable.
To claim the existence of the set n  §m φ(m,n) we would need
more than recursive comprehension; we would need Σ
comprehension.
A system which has Σ
comprehension, called ACA, is the subject of
our next chapter.
Te Minimal Model of RCA
Te recursive comprehension axiom means that any model of RCAin
which the symbols ,S(),SS(),... have their usual interpretation as
the natural numbers must contain all the computable sets, since these are
precisely the sets deﬁnable by both Σ
and Π
formulas. So the latter sets
are necessarily in any model by the recursive comprehension axiom. It is
also suﬃcient to have only the computable sets in the model, since any
set deﬁnable from computable sets by a condition that is both Σ
and Π

is itself computable.
Tus the minimal model of RCAconsists of the natural numbers (in-
terpreting the number variables) and the computable sets (interpreting
the set variables). It follows that any theorem of RCAmust hold in the
minimal model. Tis is why theorems that involve the existence of non-
computable sets cannot be proved in RCA.
For example, RCAcannot prove the existence of the range of every
function g, because there is a function g that is computable (and hence
in the minimal model) with a noncomputable range (hence not in the
minimal model).

C H A P T E R 
■■■■■
Arithmetical Comprehension
If we wish to develop analysis in a system based on PA with set vari-
ables, the most obvious set existence axiom to use is one called arithmeti-
cal comprehension. Tis axiom asserts the existence of a set X of natural
numbers for each property φ deﬁnable in the language of PA.
More precisely, if φ(n) is a property deﬁned in the language of PA
plus set variables, but with no set quantiﬁers, then there is a set X whose
members are the natural numbers n such that φ(n). In symbols,
§X∀n[x > X  φ(n)].
(*)
Since we assert (*) for all such formulas φ, the arithmetical comprehen-
sion axiom is really an axiom schema.
Te reason we allow set variables in φ is to enable sets to be deﬁned in
terms of “given” sets, as mentioned in section .. Te reason we disallow
set quantiﬁers in φis to avoid deﬁnitions in which a set is deﬁned in terms
of all sets of natural numbers (and hence in terms of itself).
Te system consisting of PA plus arithmetical comprehension (*) is
called ACA. Tis system lies at a remarkable “sweet spot” among axiom
systems for analysis. It is strong enough to prove all the basic theorems
of analysis—as we will see—yet of precisely the same strength as PA in
proving theorems of pure number theory (that is, theorems not involving
set variables).
Also remarkable is the fact that arithmetical comprehension does not
merely imply the basic theorems of analysis. It is actually equivalent to
some of them, and the equivalences can be proved in the weak system
RCAof “computable analysis” introduced at the end of the previous
chapter.


■
CHAPTER 
.THE AXIOM SYSTEM ACA
ACAhas the same axioms as PA, except that PA induction is replaced
by set variable induction (previously mentioned in section .),
∀X[[> X , ∀n(n > X  n + > X)]  ∀n(n > X)] ,
and the set existence axiom (schema) is arithmetical comprehension:
§X(n > X  φ(n))
(ACAx)
where φ(n) is any formula with no set quantiﬁers and in which X is not a
free variable. In particular, if φ(n) has no set variables—so it is a formula
of PA—then the set variable induction axiom above holds for the set X
of n with property φ(n), so
[φ() , ∀n(φ(n)  φ(n + ))]  ∀nφ(n).
Tus, in the presence of arithmetic comprehension, set variable induc-
tion implies PA induction, and therefore all theorems of PA can be proved
in ACA. In section .we explain a more surprising converse fact about
ACA: its theorems not involving set variables are theorems of PA.
Tus the ability of ACAto prove facts about sets of natural numbers
(and hence about real numbers and functions) does not help at all in
proving facts about the natural numbers themselves. However, it does
enable ACAto prove the basic theorems of analysis, as we will see in
the sections below.1
Te Minimal Model of ACA
Since the axioms of ACAinclude the Peano axioms, any model of ACA
includes objects denoted by ,S(),SS(),... with the properties of the
natural numbers. Conversely, these objects suﬃce to satisfy the Peano
axioms among those of ACA.
In addition, a model of ACAmust include enough subsets of the set
of objects denoted by ,S(),SS(),... to satisfy the arithmetic com-
prehension schema (ACAx). Since there is an instance of (ACAx) for
1Te subscript in ACAreﬂects its history as a weakening of a predecessor system
called ACA, in which the formula φ in (ACAx) was allowed to have set quantiﬁers. ACA
does not lie at such a “sweet spot” as ACA, because ACA is stronger than PA in proving
theorems of pure number theory. We give an example of such a theorem in section ..

ARITHMETICAL COMPREHENSION
■

each PA formula φ(n), these subsets include all the arithmetically de-
ﬁnable sets. Conversely, the arithmetically deﬁnable sets suﬃce to satisfy
the axioms of ACA. Tey satisfy arithmetic comprehension, even when
the deﬁning formula φ(n) contains set variables, because a set deﬁned in
terms of other arithmetically deﬁnable sets is itself arithmetically deﬁn-
able. And they satisfy set variable induction because, as explained above,
when the X in the induction axiom denotes an arithmetically deﬁnable
set, we have an instance of PA induction.
Tus the minimal model of ACAconsists of the natural numbers
together with all arithmetically deﬁnable sets of natural numbers.
.Σ
AND ARITHMETICAL COMPREHENSION
In this section we prove that arithmetical comprehension follows from a
seemingly weaker comprehension axiom: Σ
comprehension:
§X(n > X  φ(n))
where φ(n) is a Σ
formula in which X is not a free variable. (Tus any set
variables in φ are diﬀerent from X, and they are not quantiﬁed.) What
makes this result possible is the fact that the formula φ(n) in Σ
can
contain set variables, so sets can be deﬁned in terms of previously deﬁned
sets.
From Σ
to arithmetical comprehension. Each instance of arithmetical
comprehension is provable by Σ
comprehension.
Proof. We know from section .that each arithmetical formula is Σ
n for
some n. So it suﬃces to prove, by induction on n, that each Σ
n instance
of arithmetical comprehension is provable by Σ
comprehension.
Te base step n = is immediate by Σ
comprehension, so it remains
to show how to get from a Σ
k set to a Σ
k+set by Σ
comprehension.
Let φ(n) = §l∀mψ(l,m,n) be a Σ
k+formula, so §m ψ(l,m,n) is
Σ
k. It follows, by the induction hypothesis, that the set
Y = `l,ne  §m ψ(l,m,n)
is obtainable by Σ
comprehension. Notice `l,ne ~> Y  ∀mψ(l,m,n),
so the set
X = n  φ(n)


■
CHAPTER 
is deﬁnable by the formula
n > X  §l∀mψ(l,m,n)
 §l(`l,ne ~> Y).
Te latter formula is Σ
with the free set variable Y. Terefore, since Y is
obtainable by Σ
comprehension, so is X.
j
Σ
Comprehension and the Range of Functions
Te connection between arithmetical comprehension and analysis is es-
tablished by showing Σ
comprehension equivalent (in RCA) to the fol-
lowing proposition:
Range existence. Te range of any injective function f  N   N exists.
It is clear that Σ
comprehension implies range existence, because the
range R of f is deﬁnable from f by the Σ
condition
n > R  §m[f(m) = n].
However, the converse is quite subtle. It depends on the arithmetization
of recursion we established in section .and the recursive comprehen-
sion axiom of section .(we cannot expect to get Σ
comprehension
without assuming some form of comprehension).
Range existence  Σ
comprehension. If the range of any injective func-
tion f  N   N exists, then Σ
comprehension holds.
Proof. As we saw in section ., we can prove in RCAthe existence of
a function whose values satisfy a given Σ
condition. So, if the range of
any function exists, the set of values satisfying any Σ
condition exists.
Tat is, Σ
comprehension holds.
j
Σ
Induction and Systems Weaker than ACA
In later chapters we will compare ACAwith systems having weaker set
existence axioms and also the weaker form of induction: Σ
induction:
(φ() , (φ(n)  φ(n + )))  ∀nφ(n),
where φ is a Σ
formula.
In ACA, thanks to arithmetical comprehension, Σ
induction implies
induction for any arithmetical φ, but in systems with weaker compre-
hension this is not the case. Te two weaker systems we will be interested
in are:

ARITHMETICAL COMPREHENSION
■

• RCA, whose set existence axiom schema asserts only the existence
of computable sets, and
• WKL, whose set existence axiom schema asserts, in addition to
the existence of computable sets, the existence of inﬁnite paths in
inﬁnite binary trees (the weak Kőnig lemma).
RCAproves only a few basic theorems of analysis, notably the inter-
mediate value theorem. However RCAis strong enough to prove many
interesting equivalences between set existence axioms and theorems of
analysis.
We will prove several such equivalences in the present chapter, and
in the next chapter say more about why the proofs can be carried out
in RCA. In fact, we have already proved one implication in RCA: the
proof that range existence  Σ
comprehension. As we observed above
and in section ., this is because the proof assumes only the existence
of computable sets and Σ
induction. Roughly speaking, an implication
A  B is provable in RCAif the objects asserted to exist in B can be
computed from the objects asserted to exist in A.
.COMPLETENESS PROPERTIES IN ACA
In this section we see how ACAcaptures the fundamentals of analy-
sis, by proving arithmetical comprehension equivalent to the following
completeness properties of R. Tese results were announced by Fried-
man ().
. (Sequential) Bolzano-Weierstrass theorem.
Any bounded inﬁnite sequence of real numbers has a convergent sub-
sequence.
. (Sequential) least upper bound principle.
Any bounded sequence of real numbers has a least upper bound.
. Cauchy convergence criterion.
A sequence x,x,x,... is convergent if it has the property that, for
any ε A , there is an n such that Sxm −xnS < ε for all m A n.
. Monotone convergence theorem.
Any bounded monotonic sequence is convergent.
Te proofs reveal the “arithmetical content” of these famous theorems.
To streamline the proofs we assume that real numbers, sequences of
real numbers, sequences of closed intervals, and so on, are encoded by


■
CHAPTER 
sets of natural numbers as explained in chapter . We can then assert the
existence of various sequences deﬁned by arithmetical conditions (and
the objects they may determine—for example, a real number given by a
sequence of nested closed intervals whose lengths tend to zero) by arith-
metical comprehension. Te equivalences will be proved via the impli-
cations shown in ﬁgure ..
Arithmetical
comprehension
Sequential B-W
Cauchy
criterion
Monotone
convergence
Sequential lub
Ô
Ô
Ô
Ô
Ô
Ô
Figure .: Implications between completeness properties
Arithmetical comprehension  sequential Bolzano-Weierstrass.
Proof. Suppose that x,x,x,... is a sequence of real numbers, and as-
sume without loss of generality that each xi > [,] = I. To ﬁnd a con-
vergent subsequence we bisect I, choose the rightmost half Icontaining
inﬁnitely many xi, and repeat the process in I. Tis deﬁnes a sequence
of intervals
Ik = [f(k) ċ −k,(f(k) + ) ċ −k],
where
f(k) = greatest j< k such that jċ −k B xi B (j+ ) ċ −k
for inﬁnitely many i.
Tis deﬁnition is arithmetical, so f (hence the sequence I,I,I,...)
exists by arithmetical comprehension. Also the Ik are nested and Ik has
length −k, by a Σ
induction, so this sequence of intervals deﬁnes a real
number x. Now from the sequences x,x,x,... and I,I,I,... we de-
ﬁne (again, arithmetically)
xnk = ﬁrst member of x,x,x,... in Ik with nk A nk−.
And this sequence converges, to the point x deﬁned by the intervals Ik.
j
Sequential Bolzano-Weierstrass  Cauchy criterion.

ARITHMETICAL COMPREHENSION
■

Proof. Suppose that the sequence x,x,x,... satisﬁes the Cauchy crite-
rion
(∀ε A )§n∀m(m A n  Sxm −xnS < ε).
(*)
Ten the sequence is bounded and hence has a convergent subsequence
by Bolzano-Weierstrass.
Te limit x of this subsequence xn,xn,xn,...is necessarily the limit
of x,x,x,... . Because if xnk is within distance ε of x, then all xm with
m A nk are within distance ε of x by (*), hence the limit of x,x,x,...
exists and equals x.
j
Cauchy criterion  monotone convergence.
Proof. Tis holds because a monotone sequence that does not satisfy the
Cauchy criterion is unbounded. To see why, suppose we have ε A for
which there is no n such that xm −xn < ε for all m A n. In that case,
for any n there is an m A n with xm −xn A ε (assuming our monotone
sequence is increasing). By searching for larger and larger n we ﬁnd
xn < xm < xn′ < xm′ < xn′′ < xm′′ <  ,
with
xm −xn C ε,
xm′ −xn′ C ε,
xm′′ −xn′′ C ε,
 ,
so that the sequence x,x,x,... grows beyond all bounds.
Tus a bounded increasing sequence satisﬁes the Cauchy criterion,
and hence is convergent (and similarly for a bounded decreasing
sequence).
j
Monotone convergence  arithmetical comprehension.
Proof. It suﬃces to prove that, for any injective function f  N   N,
the range of f exists, because this implies Σ
comprehension (and hence
arithmetical comprehension) by section ..
Given an injective function f  N   N we will prove that the range
of f exists, in the sense that we can compute it from f. We ﬁrst compute
the bounded increasing sequence c,c,c,..., where2
cn =
n
Q
i=
−f(i).
2Readers will notice that this is exactly the same construction that we used in section
.to construct a computable sequence with a noncomputable limit.


■
CHAPTER 
Monotone convergence gives the existence of
c = lim
n ª =
ª
Q
i=
−f(i).
And from c we can compute the set of natural numbers n in the range of
f because
n > range of f  nth binary digit of c is .
j
Arithmetical comprehension  sequential least upper bound.
Proof. Suppose that x,x,x,... is a bounded sequence, for which we
can assume as usual that each xi > [,] = I. We let Ibe the rightmost
half of Icontaining some xi, and in general
Ik+= rightmost half of Ik containing some xi.
Ten, as in proving that arithmetical comprehension  Bolzano-
Weierstrass, we ﬁnd that the sequence I,I,I,... and its common point
x exists by arithmetical comprehension.
It follows from the deﬁnition of the Ik and x that each xi B x but that,
if y < x, then y < some xi. Tus x is the least upper bound of the xi. j
Sequential least upper bound  monotone convergence.
Proof. Tis is because the least upper bound of a monotone increasing
sequence is its limit. And a monotone decreasing sequence then has a
limit by considering negatives.
j
.ARITHMETIZATION OF TREES
In chapter we found that many basic theorems of analysis follow from
an inﬁnite bisection process. We noted in section .that this construc-
tion reﬂects the weak Kőnig lemma, stating that an inﬁnite binary tree has
an inﬁnite path. Te weak Kőnig lemma is so called because it is a special
case of the Kőnig inﬁnity lemma, stating that an inﬁnite ﬁnitely branching
tree has an inﬁnite path. In the next section we prove the König inﬁnity
lemma in ACA. Te proof is quite simple, but to pave the way for it we
have to ﬁnd suitable encodings of trees by sets of positive integers. Tere
are two natural ways to do this: one speciﬁc to binary trees and another
for trees in general.

ARITHMETICAL COMPREHENSION
■

Both ways encode each vertex of the tree by a ﬁnite sequence of posi-
tive integers, with the “top” vertex being encoded by the empty sequence,
and every other vertex v being encoded by a sequence `n,...,nk−,nke,
where `n,...,nk−e encodes another vertex of the tree (the vertex
“above” v). In section .we saw two ways to encode ﬁnite sequences:
• Encoding “letters” a, a, a,... by the dyadic numerals ,,
,... and stringing letters together by the concatenation func-
tion ⌢.
• Encoding a sequence of positive integers n,n,...,nk by the val-
ues of the Gödel β function β(c,d, i) for certain c,d, and i = ,,
..., k.
Both ways are usable, though the former seems preferable, since concate-
nation is an integral part of the deﬁnition of tree, and we have already
deﬁned the function ⌢for dyadic numerals.
Indeed, for binary trees we can represent vertices by arbitrary dyadic
numerals. Te complete binary tree C has vertices labelled as shown in
ﬁgure .(which is the same as ﬁgure .but with dyadic rather than
binary labels). And an arbitrary binary tree B is a subtree of C; that is, B
is a set of dyadic numerals with the property that if u⌢> B or u⌢> B
then u > B.














Figure .: Te complete binary tree of dyadic numerals
Deﬁnitions. A tree is a set T of ﬁnite sequences (appropriately coded by
dyadic numerals) of positive integers with the property that


■
CHAPTER 
`n,...,nk−,nke > T  `n,...,nk−e > T.
T is ﬁnitely branching if, for each `n,...,nk−e > T there are only
ﬁnitely many nk such that `n,...,nk−,nke > T. Vertex v is an extension
of vertex u if u = `m,...,mke and v = `m,...,mk,n,...,nle for some
n,...,nl.
An inﬁnite path in a tree T is an inﬁnite sequence `n,n,n,...e such
that each `n,n,...,nke > T.
For example, in the complete binary tree is an extension of , and
 is the lefmost inﬁnite path in the tree.
.THE KŐNIG INFINITY LEMMA
Te strength of the Kőnig inﬁnity lemma can be measured by showing
that it is equivalent to arithmetical comprehension, as we will do in this
section. Teir equivalence was announced by Friedman (). Surpris-
ingly, the weak Kőnig lemma really is weaker, despite its seemingly sim-
ilar proof. In both versions one ﬁnds an inﬁnite path in a tree by repeat-
edly choosing one of the ﬁnitely many edges that leads into an inﬁnite
part of the tree.
Although it is not obvious why, it makes a diﬀerence whether the
choice is between two edges or an arbitrary ﬁnite number. Te weak
Kőnig lemma will be studied in the next chapter, where we will ﬁnd its
most interesting equivalents.
Kőnig inﬁnity lemma. If T is an inﬁnite, ﬁnitely branching tree, then T
has an inﬁnite path.
Proof. We represent T, as in the previous section, by a set T of ﬁnite se-
quences uof natural numbers. Each member u > T represents a vertex, so
the initial segments of u also belong to T and they represent the vertices
above u on the unique path to the top (empty) vertex. Te possible suc-
cessors of u = `n,...,nk−e are the sequences `n,...,nk−,nke, where
nk > N, and we order them by the size of nk.
Te assumption that T is ﬁnitely branching means that each u > T has
only ﬁnitely many successors. Te inﬁnity lemma is proved by recursively
choosing successive members of an inﬁnite sequence `n,n,n,...e such
that each `n,...,nke > T.

ARITHMETICAL COMPREHENSION
■

Step . Let `ne be the least of the ﬁnitely many vertices below the top
(empty) vertex that has inﬁnitely many extensions in T.
Step k. Assuming that u = `n,...,nk−e is a vertex with inﬁnitely many
extensions in T, choose the successor `n,...,nk−,nke of u that
is least among the ﬁnitely many successors of u having inﬁnitely
many extensions in T.
Using the arithmetization of trees from the previous section, and arith-
metical deﬁnability of the property of having inﬁnitely many extensions,
we can make a recursive (and hence also arithmetical, by section .)
deﬁnition of the sequence `n,n,n,...e. Its existence, and hence that
of an inﬁnite path, therefore follows by arithmetical comprehension. j
Tis shows that the Kőnig inﬁnity lemma is provable in ACA. Con-
versely, we have the theorem:
Kőnig inﬁnity lemma  arithmetical comprehension.
Proof. As in the proof that monotone convergence implies arithmetical
comprehension it suﬃces to prove that the Kőnig inﬁnity lemma implies
that the range of any function f  N   N exists, because arithmetical
comprehension then follows by sections .and ..
Tus it remains to show that, given a function f  N   N, we can
compute the range of f (that is, decide for given n whether n > range f)
with the help of the Kőnig inﬁnity lemma. We do this by computing from
f a ﬁnitely branching tree Tf whose only inﬁnite path σ is deﬁned by
σ(i) =
¢¨¨¦¨¨¤

if i ~> range f
m + 
if f(m) = i.
From σ we can decide membership in range f, because
i > range f  σ(i) A .
So if σ exists then range f exists—and we will show that σ exists by the
Kőnig inﬁnity lemma.
As explained in the previous section, Tf has a top vertex equal to the
empty sequence, and below it vertices that are sequences `m,m,...,mke
of natural numbers. We decide whether `m,m,...,mke > Tf by the
following criterion:
`m,m,...,mke > Tf  (∀i, jB k)[mi =  f(j) x i] and
(∀i B k)[mi A  f(mi −) = i].
(*)


■
CHAPTER 
For example, if `,,,e > Tf this means that ,,> range f, because
f() = , f() = , f() = , and that ~> range f unless f(m) = for
some m A . More generally, we notice the following:
. If `m,m,...,mke > Tf then mi = only if f(m) = i, if at all, for
some m A k.
. If `m,m,...,mke > Tf and l < k then `m,m,...,mle > Tf,
because if (*) holds for k it also holds for l < k. Tus Tf is a tree.
. Since all quantiﬁers in (*) are bounded, (*) is decidable from f, so
Tf exists by recursive comprehension.
. Tf is ﬁnitely branching, because each vertex `m,m,...,mke > Tf
has at most two successors, `m,m,...,mk,e and `m,m,...,
mk,m + e, the latter if k + = f(m) for some m A k.
. Each initial segment `σ(),σ(),...,σ(k)e of σ is in Tf because it
satisﬁes condition (*). Tus Tf is inﬁnite, and hence it contains an
inﬁnite path by the Kőnig inﬁnity lemma.
It remains to show that σ is the only inﬁnite path in Tf. To do this it
suﬃces to show that, if
`m,m,...,mke x `σ(),σ(),...,σ(k)e,
then all paths through `m,m,...,mke eventually terminate. We can
assume, without loss of generality, that mk x σ(k) and that the preced-
ing terms of both sequences agree. Tis can happen only if mk = and
f(m) = k only for some m A k, in which case σ(k) = m + . But then
all extensions of `m,m,...,mke of length greater than m will fail to
satisfy condition (*), and hence they will not be in Tf.
j
It is worth noting that the tree Tf in the above proof is actually a
binary tree, since each vertex has at most two successors. So it might
seem that we need appeal only to the weak Kőnig lemma about inﬁnite
paths in binary trees. However, to construct Tf we have to work in the tree
of all natural number sequences, because we cannot foresee how large an
m may be needed to obtain a given number i as a value f(m). We cannot
construct Tf (or anything similar) inside the complete binary tree.
Since arithmetical comprehension implies the Kőnig inﬁnity lemma,
and hence the weak Kőnig lemma, all the classical theorems provable
from the weak Kőnig lemma are theorems of ACA. In the next chapter
we see that the best known of these theorems—the sequential Heine-
Borel theorem, uniform continuity, and extreme value theorems—can

ARITHMETICAL COMPREHENSION
■

be proved equivalent to the weak Kőnig lemma in RCA. Hence they are
best placed in a weaker system, WKL, which has the weak Kőnig lemma
as its set existence axiom.
Before leaving ACA, however, it is worth mentioning another im-
portant area of mathematics which depends on the full strength of arith-
metic comprehension.
.RAMSEY THEORY
Ramsey theory is a large area of mathematics concerned with ﬁnding “or-
der within disorder” in both ﬁnite and inﬁnite structures. It originated in
the paper Ramsey (), on logic, but has since become part of combina-
torics. In this section we will sketch some basic results of Ramsey theory
and describe their relation to ACA. A ﬁnite example which illustrates
the kind of “order” discovered by Ramsey theory is the following: in any
group of six people there are either three who all know each other or three
who do not know each other.
To prove this “baby Ramsey theorem” we represent the six people by
vertices of a graph, joining two vertices by a black edge if the correspond-
ing people know each other and by a gray edge if they do not. Figure .
shows one such “acquaintance graph.”
Figure .: An acquaintance graph for six people
We wish to show that there is always a monochromatic triangle (all
black or all gray). To see why this triangle exists, consider any vertex v
of the graph. It is the endpoint of ﬁve diﬀerent edges, so at least three of
these edges must have the same color, say black. Now look at the other
ends, v,v,v, of the three edges (ﬁgure .).
If any two ofv,v,vare connected by a black edge, this will complete
a black triangle with the black edges already present. And if none of the
three edges are connected by a black edge, then v,v,vare the vertices
of a gray triangle.


■
CHAPTER 
v
v
v
Figure .: Typical vertex of the graph
Ramsey theory becomes intertwined with reverse mathematics when
we consider inﬁnite vertex sets X b N. Te complete graph KX has the ver-
tex set X and an edge between any two members of X. Ten an example
of what we can prove is:
Inﬁnite Ramsey theorem for pairs. If the edges of KN are colored by a
ﬁnite number of colors, then KN contains a monochromatic KX, where X
is an inﬁnite subset of N.
Proof. Choose any v> N and consider the inﬁnitely many edges with
vat one end. Since there are only ﬁnitely many colors, inﬁnitely many
edges out of vhave the same color. Let Xbe the set of vertices at the
other end of these edges, and choose v> X. Again, inﬁnitely many of
the edges out of vhave the same color. We let Xbe the set of vertices at
the other end of these edges out of v, choose v> X, and so on.
In this way we obtain an inﬁnite set of vertices v,v,v,... such
that each vi is connected to vi+,vi+,vi+,... by edges of one color. Also,
since there are only ﬁnitely many colors, the same color occurs for in-
ﬁnitely many of the vi: call them x,x,x,.... Ten if X=x,x,x,...
the inﬁnite graph KX is monochromatic.
j
Te above theorem is called the Ramsey theorem for pairs because the
edges of the graph KX are essentially pairs of elements of X. We call the
theorem RT() for short. Tere is a more trivial Ramsey theorem RT(),
or the “Ramsey theorem for singletons,” stating that if the members of
N are colored by ﬁnitely many colors then N has an inﬁnite subset X
whose members all receive the same color. RT(), which also follows from
arithmetical comprehension, is known as the inﬁnite pigeonhole principle.
We actually assumed RT() in the proof above, so in eﬀect we proved
RT()  RT().
Likewise, there is a Ramsey theorem RT(), stating that if all triples of

ARITHMETICAL COMPREHENSION
■

members of N are colored by ﬁnitely many colors then N has an inﬁnite
subset X whose triples all have the same color. And RT()  RT() by
a slight elaboration of the argument above. Indeed, by similarly passing
from to , to , and so on, we can prove a Ramsey theorem RT(k)
about coloring k-tuples in ﬁnitely many colors.
Each Ramsey theorem RT(k) can be proved in ACAand, more inter-
estingly, each RT(k) for k C is equivalent to arithmetical comprehen-
sion over RCA. Two remarkable non-equivalents of arithmetical com-
prehension are the following:
. RT(), which does not imply arithmetical comprehension, but im-
plies recursive comprehension, and
. ∀kRT(k), which implies arithmetical comprehension but is not
provable in ACA.
For more on the position of Ramsey theorems in reverse mathematics,
see Hirschfeldt (). ∀kRT(k) is ofen called the inﬁnite Ramsey theo-
rem, and one of its claims to fame is that it implies the Paris-Harrington
theorem, a theorem in the language of PA which is not provable in PA.
Paris-Harrington is a modiﬁcation of the ﬁnite Ramsey theorem which
states that for all k, l,m > N there is an n > N such that, for any coloring of
the k-element subsets of ,,...,n by l colors, there is an m-element
subset of ,,...,n whose k-element subsets all have the same color.
Te ﬁnite Ramsey theorem is provable in PA,3 but if we add the condi-
tion that the least element of the m-element subset be greater than m,
then the resulting theorem, due to Paris and Harrington (), is not
provable in PA.
In section .we show that the “arithmetical” theorems of ACA—
those not involving set variables—are exactly the same as those of PA.
In particular, ACAdoes not prove the Paris-Harrington theorem, and
hence it cannot prove the inﬁnite Ramsey theorem ∀kRT(k) either. Tis
is an example of a phenomenon called ω-incompleteness, where a theory
can prove all instances P(),P(),P(),... of a certain property P(k),
but not ∀kP(k). (Te inﬁnite Ramsey theorem is provable in the system
ACA mentioned in the footnote in section ., and hence so is the Paris-
3Nevertheless, the ﬁnite Ramsey theorem remains diﬃcult when it comes to ﬁnding
the numbers that it proves to exist. Even in the case k = l = (-coloring the edges of a
graph) the minimum value of n is known only for m = ,,. For m = , obviously n = ;
for m = the value n = found in the “baby Ramsey theorem” cannot be bettered; for
m = it is known that the minimum n = . For m = the minimum n is not yet known.


■
CHAPTER 
Harrington theorem. Tis is how we know that ACA is stronger than
ACA.)
.SOME RESULTS FROM LOGIC
In his famous lecture Mathematical Problems, Hilbert () made a bold
statement about the meaning of “existence” in mathematics:
If contradictory attributes be assigned to a concept, I say that math-
ematically the concept does not exist. So, for example, a real num-
ber whose square is −does not exist mathematically. But if it can
be proved that the attributes assigned to the concept can never lead
to a contradiction by the application of a ﬁnite number of logical
processes, I say that the mathematical existence of the concept (for
example, of a number or a function which satisﬁes certain condi-
tions) is thereby proved.
Te language of predicate logic that we use for arithmetic is an excellent
illustration of the principle stated by Hilbert (at greater length): consis-
tency implies existence. By analyzing the structure of sentences in arith-
metic we will show that: for any consistent set of sentences in the language
of arithmetic there is an interpretation that satisﬁes them all.
Te nature of this interpretation (which is not necessarily the stan-
dard interpretation of arithmetic, but nevertheless quite concrete) will
become clearer as we build it. In outline, the process is to ﬁnd an equiva-
lent of each sentence of a particularly simple form—the so-called Skolem
form—which has only universal quantiﬁers and all of them in the front of
the sentence, so that satisfying the sentences amounts to satisfying their
instances for all possible values of their variables. Te instances are essen-
tially Boolean formulas, that is, formulas whose only logic symbols are
Boolean operations. Any inconsistency depends on only ﬁnitely many of
them, so the problem is reduced to satisfying an inﬁnite set of Boolean
formulas when any ﬁnite subset can be satisﬁed.
Te latter problem is easily solved by applying the weak Kőnig lemma.
Te reduction to Boolean formulas takes place in the following stages.
Stage . Reduction of sentences to prenex form.
A sentence σ is in prenex form if all of its quantiﬁers are to the lef of
the other symbols. We showed how to convert sentences to prenex form
in section ..
Stage . Making all quantiﬁers universal.

ARITHMETICAL COMPREHENSION
■

If not all quantiﬁers in the prenex form are universal, consider the
lefmost §. Ten we have either the form (in which P itself may begin
with quantiﬁers)
§xP(x),
which we replace by P(a), for some new constant a,
or else the form
∀x∀xk§yP(x,...,xk, y)
which we replace by
∀x∀xkP(x,...,xk, f(x,...,xk)), for some new function
symbol f.
Te function denoted by f is called a Skolem function. If P itself begins
with quantiﬁers we repeat the process in P, and so on, until all § quan-
tiﬁers are removed in favor of constants or function symbols. We then
have a universally quantiﬁed equivalent of the original formula called its
Skolem form.
Stage . Constructing the domain of Skolem terms.
We have now added new constants a, a, a,... and new function
symbols f, f, f,...to the constant and the function symbols S, +, and
ċ originally in the language of arithmetic. Te terms that can be built from
the constants and function symbols are called Skolem terms. Tey in-
clude the terms ,S(),SS(),... originally present—denoting the nat-
ural numbers—plus new Skolem terms such as S(a), S(a)+S(a), and
so on, which do not have an obvious interpretation.
We interpret the Skolem terms simply as themselves; that is, as strings
of symbols. Ten the function symbols are interpreted in the natural way
as functions on the set of these strings. For example, S is interpreted as
the function that sends the string to the string S(), ato the string
S(a), and so on.
Te interpretation of the relation symbol = remains open at this stage.
For example, a= amay be true under one interpretation, false under
another. We will assign truth values to atomic formulas only at the ﬁnal
stage, when we build a tree of all possible assignments of truth values,
and choose those that lie along a certain inﬁnite path in the tree.
Stage . Enumerating the atomic instances of the Skolem forms.
Once we have converted a sentence σ to an equivalent Skolem form
σS, which is of the form
∀xċ ∀xkR(x,...,xk)
with R quantiﬁer-free,


■
CHAPTER 
satisfying σ is equivalent to satisfying all instances R(t,..., tk) of σS,
where t,..., tk are Skolem terms. Since R is quantiﬁer-free, it is a
Boolean combination of atomic formulas t = t′, where t and t′ are Skolem
terms. Each of these atomic instances of σS has two possible interpreta-
tions, true or false.
To make a tree of all possible interpretations we enumerate the atomic
instances in a list α,α,α,.... Te list can be made by ordering the
atomic formulas by length, where ak and fk both have length k. With
this deﬁnition, there are only ﬁnitely many formulas of a given length,
so we can list them by taking the shortest formulas ﬁrst, then the next
shortest, and so on.
We now have all we need to prove a theorem about satisﬁability. It has
the corollary that any consistent set of sentences σ,σ,σ,... of arith-
metic has an interpretation that satisﬁes them all. Te domain of the in-
terpretation will be the set of Skolem terms constructed above.
Consistency implies satisﬁability. If τ,τ,τ,... are a consistent set of
Boolean formulas, then there is an interpretation that satisﬁes them all.
Proof. Let α,α,α,... be a list of the atomic parts of the formulas τ,τ,
τ,.... We ﬁrst construct the complete binary tree of all interpretations
(true or false) of α,α,α,... (ﬁgure .).
F
T
F
T
T
F
F
T
F
T
T
F
T
F
α
α
α
Figure .: Te tree of interpretations
At level (labelled by α) there are two vertices, for the two possible
interpretations of α. Below each of these there are two vertices, for the

ARITHMETICAL COMPREHENSION
■

two interpretations of αfor each interpretation of α, and so on. Tus the
path drawn heavily represents the interpretation α= T, α= F, α= T.
Next we prune the complete tree by terminating a path at a vertex
on level k if the corresponding values of α,α,...,αk falsify one of the
formulas τi. Since τ,τ,τ,... are consistent, at least one assignment of
values to α,α,...,αk falsiﬁes no τi. Hence the pruned tree has arbitrar-
ily long paths. Ten the weak Kőnig lemma gives an inﬁnite path, which
necessarily deﬁnes an assignment satisfying all of τ,τ,τ,... .
j
Corollary. If σ,σ,σ,... is a consistent set of sentences in the language of
arithmetic, then there is an interpretation that satisﬁes all of σ,σ,σ,... .
Proof. From σ,σ,σ,... we construct the Skolem forms σS
,σS
,σS
,...
and then all their instances, by dropping their quantiﬁers and replacing
their variables by all Skolem terms. Te instances make up a consistent
set of Boolean formulas, so the theorem above gives an interpretation
that makes them simultaneously true.
In making all instances true, the interpretation satisﬁes the Skolem
forms σS
,σS
,σS
,..., and hence the original sentences equivalent to them,
σ,σ,σ,....
j
.PEANO ARITHMETIC IN ACA
A remarkable feature of ACAis that, despite its strength in analysis, it
is no stronger than PA in proving theorems about natural numbers. Tis
is quite surprising, in view of the modern history of number theory,
where ideas from analysis have become virtually indispensable.4
4For example, it was thought for about years that analysis was indispensable in
the proof of the prime number theorem, which states that the number of primes less than
n is asymptotic to n~ ln n. Tere was even a premature attempt to develop the “reverse
mathematics” of number theory, based on the discovery of Landau that certain theorems
can be proved equivalent to the prime number theorem by elementary methods. Tis led
Hardy and Heilbron () to believe that
it was Landau who ﬁrst enabled experts to classify the theorems of prime num-
ber theory according to their “depths.”
However, their claim amounted to the conjecture that the prime number theorem itself
did not have an elementary proof—a conjecture which turned out to be false when ele-
mentary proofs of the prime number theorem were found by Selberg () and Erdős
(). To this day we know no “natural” example (that is, arising in number theory,
rather than logic) of a theorem of number theory without an elementary proof.


■
CHAPTER 
Apparently, analysis lights the path to new discoveries in number the-
ory, but once the path is found it can usually be reconstructed in PA. In
the case of ACA, we can show that its arithmetic theorems are already
in PA as follows.
Suppose that σis a true sentence in the language of PA not provable
in PA. (We know that there are many such sentences, by Gödel’s incom-
pleteness theorem.) Tis means that  σis consistent with the axioms
σ,σ,σ,... of PA, otherwise we could prove σby deriving a contra-
diction from  σ. It follows, by the theorem in the previous section, that
there is an interpretation satisfying all the sentences  σ,σ,σ,σ,... .
Te domain of this interpretation is an extension E of the usual natural
numbers ,S(),SS(),... by other Skolem terms.
We can extend this model of PA to a model of ACAby adding all the
“arithmetically deﬁnable” subsets of E, that is, all the sets
t > E  φ(t),
where φ is a formula of PA with one free variable.
For this to work we need φ(t) to have deﬁnite truth value for each for-
mula φ and Skolem term t or, equivalently, for the Skolem form φS of φ.
Tis is the case, because each φ occurs in an instance σi of the induction
schema. So its Skolem form φS acquires a truth value for each Skolem
term in the course of the construction described in the previous section,
where truth values are assigned to the atomic parts of all the formulas we
wish to satisfy.
Tus there is a model of ACAwhich satisﬁes all of  σ,σ,σ,σ,...,
and therefore σis not provable in ACA.
Conversely, if σ is a sentence provable in PA, then σ is provable in
ACA, since the PA induction schema follows from the ACAinduction
schema and the other axioms of PA are axioms of ACA. In summary:
the purely arithmetic theorems of ACAare the same as those of PA. Tis
theorem is due to Friedman ().
It follows in particular that ACAdoes not prove the Paris-Harrington
theorem mentioned in section ., since Paris-Harrington is not prov-
able in PA. Tis tells us why the inﬁnite Ramsey theorem that implies
Paris-Harrington (see section .) is not provable in ACA, despite its
considerable similarity to other Ramsey theorems that ACAcan prove.

ARITHMETICAL COMPREHENSION
■

Relative Consistency of ACA
As mentioned in section ., we cannot prove the consistency of PA with-
in PA itself, by Gödel’s second incompleteness theorem, and the same ap-
plies to any system that contains PA, such as ACA. Neverthess, proving
the consistency of ACAis not more diﬃcult than proving Con(PA), the
sentence of PA that expresses the consistency of PA. Tis is because
ACAis consistent  “=” is not provable in ACA
 “=” is not provable in PA
because “=” is a sentence of PA
 Con(PA).
We say that ACAis equiconsistent with PA. Tus the Hilbert program
(described in section .) for proving the consistency of analysis does not
fail more badly than the program for proving the consistency of number
theory—at least if we interpret “analysis” to be ACAand “number the-
ory” to be PA.

C H A P T E R 
■■■■■
Recursive Comprehension
RCAcan be viewed as an axiom system for “computable analysis.” Its set
existence axiom, called recursive comprehension, states the existence of
computable sets. (Te use of the term “recursive” to mean “computable”
is going out of style, but alas it seems set in stone in the name RCAand
its set existence axiom.)
Te second important feature of RCAis its induction axiom, Σ

induction, which essentially allows only properties of computably enu-
merable sets of objects to be proved. Tis makes RCAa rather weak
system—able to prove few theorems outright—yet RCAis surprisingly
capable of proving equivalences between classical theorems.
Tis makes RCAa suitable base theory for the reverse mathematics
of analysis. RCAproves, for example, the equivalence of arithmetical
comprehension with the theorems discussed in sections .and ., and
also a new set of equivalences with the weak König lemma. In the present
chapter we prove the equivalences between the weak Kőnig lemma and
the Heine-Borel, extreme value, and uniform continuity theorems. We
also discuss the equivalence of the weak Kőnig lemma with two famous
theorems of topology: the Brouwer ﬁxed point and the Jordan curve
theorems.
Tis latter collection of theorems, lying strictly between RCAand
ACA, establishes the importance of the system WKLwhose set exis-
tence axiom is the weak Kőnig lemma. Between them, RCA, WKL, and
ACAcover the basic theorems of analysis, and they sort them into three
diﬀerent levels of strength.

RECURSIVE COMPREHENSION
■

.THE AXIOM SYSTEM RCA
We brieﬂy introduced RCAin section .. To expand somewhat on
what we said there, the axioms of RCAare the non-induction axioms of
PA plus, for Σ
formulas φ,
∀n[φ() , ∀n(φ(n)  φ(n + ))]  ∀n φ(n).
(Σ
induction)
Typically, Σ
induction is used to prove that all members of a computably
enumerated sequence have a certain property. Te set existence axiom is,
for all Σ
formulas φ and Π
formulas ψ,
∀n[φ(n)  ψ(n)]  §X[n > X  φ(n)].
(Recursive comprehension)
Tis axiom arises from the result of Post () that a set is computable
if and only if it and its complement are computably enumerable, and the
fact that computably enumerable sets are Σ
. We reiterate that the for-
mulas φ and ψ can contain set variables, but not set quantiﬁers. In eﬀect,
this enables RCAto prove the existence of any set computable from a
given set Y; for example, the set Z of even numbers in Y.
An important example of computation from a given set is the diago-
nal computation by which we proved uncountability of R in section ..
Uncountability of R. For any sequence x,x,x,...of real numbers there
is a real number x x each xn.
Proof (in RCA). Given the sequence x,x,x,... we compute x by the
rule
nth decimal digit of x =
¢¨¨¦¨¨¤

if nth decimal digit of xn x 

if nth decimal digit of xn = .
Tus x exists by recursive comprehension, each digit of x is either or ,
and x diﬀers from xn in the nth decimal place. Since a decimal expansion
whose digits are each or is unique, this makes x x each xn.
j
However, as mentioned in section ., RCAhas a minimal model in
which all the sets are computable. So when a computable set Y is related
to a noncomputable set Z, RCAwill not be able to prove the existence
of Z, since the minimal model will contain Y but not Z. For example,


■
CHAPTER 
each computable function is in the minimal model (as a set of ordered
pairs), but not the range of each computable function, since the range can
be noncomputable. As we saw in section ., this is why RCAcannot
prove “the range of every function exists.” Similar arguments enable us to
show that some important theorems of analysis are not provable in RCA
because they imply the existence of noncomputable sets. In particular,
RCAis too weak to prove the least upper bound principle, the Heine-
Borel theorem, or the Bolzano-Weierstrass theorem.
Te weakness of RCAis a plus, however, when we want a base theory
to prove equivalences between stronger axioms and various theorems—
because RCAis strong enough to prove many equivalences. For exam-
ple, the proofs in the previous chapter that the arithmetic comprehen-
sion axiom is equivalent to (various statements of) completeness of R,
the Kőnig inﬁnity lemma, and the Bolzano-Weierstrass theorem can be
carried out in RCA. In this chapter we use RCAas base theory in which
to prove equivalents of the weak Kőnig lemma.
.REAL NUMBERS AND CONTINUOUS FUNCTIONS
In the above proof that R is uncountable we assumed that real numbers
are given by decimal expansions, and we used the computability of the
decimal expansion of the diagonal number x to prove its existence in
RCA. Tis is indeed the classical concept of computable number, intro-
duced by Turing (). But when doing analysis in RCAit is convenient
to use a slightly diﬀerent real number concept, better suited to the pro-
cesses of analysis.
Deﬁnition. A real number is a nested sequence of closed rational inter-
vals
[a,b] c [a,b] c [a,b] c 
such that bn −an   .
Te nested interval concept of real number gets around the diﬃcul-
ties RCAhas with convergent sequences. Te deﬁnition does not say the
nested sequence has to be computable, but of course to prove in RCA
that a real number exists we have to exhibit a computation, and then in-
voke recursive comprehension. To do this it suﬃces to give a computable
enumeration of the intervals [an,bn], because the sequence is the set of

RECURSIVE COMPREHENSION
■

pairs `n,[an,bn]e and this set is computable. (Namely, for each n run the
enumeration until the nth term appears.)
We note that any computable sequence of intervals [an,bn] with a
single common point determines a real number x in the above sense,
because we can compute from it the nested sequence
[a′
,b′
] c [a′
,b′
] c [a′
,b′
] c 
where [a′
n,b′
n] = [a,b] 9  9 [an,bn]. Te sequence [a′
n,b′
n] has the
same common point as the sequence [an,bn], so necessarily b′
n−a′
n   .
One diﬃculty we cannot avoid is that, in general, it is impossible to
know whether a real number x equals . When x is deﬁned by the se-
quence of intervals [an,bn] then x = if and only if an B B bn for all
n, and we cannot observe the whole inﬁnite sequence. But if x A we
will observe this fact at some ﬁnite stage, because it will eventually hap-
pen that an A . Similarly, when x < we will eventually observe this fact.
Tis limited knowledge is enough for some important purposes, such as
proving the intermediate value theorem, as we will see in the next sec-
tion.
Deﬁning real numbers by intervals also helps the study of continuous
functions in RCA, where we encode such functions by rational intervals
as in section .. We want to say that a continuous function f is given by
pairs of rational intervals `(c,d),(a,b)e such that f((c,d)) b (a,b),
and that there are “enough” intervals to determine f(x) for each real
number x in the domain of f. Te problem now is that f itself is not
given, so we cannot deﬁne the set of pairs in terms of it. Instead, we seek
some simple and natural conditions on a set of pairs, which ensure that
they encode a continuous function f on some domain.
Deﬁnitions. A set of ordered pairs `(c,d),(a,b)e of rational intervals is
called the code of a continuous function f, code(f),
. if `(c,d),(a,b)e > code(f) and `(c,d),(a′,b′)e > code(f) then
(a,b) and (a′,b′) intersect;
. if `(c,d),(a,b)e > code(f) and (c′,d′) b (c,d) then we have
`(c′,d′),(a,b)e > code(f); and
. if `(c,d),(a,b)e > code(f) and (a,b) b (a′,b′) then we have
`(c,d),(a′,b′)e > code(f).
A real number x is in the domain of f if the intervals (c,d) include a
nested sequence (cn,dn) with single common point x such that each


■
CHAPTER 
(cn,dn) is paired with an (an,bn), and the sequence of the (an,bn) has
a single common point, which we call f(x).
It
follows
from
these
deﬁnitions
that
if
a
whole
interval
(c,d) b domain(f) then in fact f((c,d)) b (a,b) for each pair
`(c,d),(a,b)e > code(f). We prove existence of a continuous function
f by exhibiting a computation of the set code(f) and appealing to recur-
sive comprehension.
Given code(f) and a point x in domain(f) we can compute f(x) from
them as follows. We are given x as a sequence (cn,dn) so, by listing the
(cn,dn) alongside all (c,d) occurring in code(f), we can ﬁnd all in-
tervals (a,b) paired with each (cn,dn). Tese (a,b) become arbitrarily
small, because f(x) exists, so for each k we can ﬁnd a pair `(cnk,dnk),
(ank,bnk)e with bnk −ank < ~k. Since (cnk,dnk) is a subsequence of
(cn,dn) its single common point is x. Te computable sequence (ank,bnk)
includes the point f(x) by property , and only this point because
bnk −ank < ~k. Tus f(x) is computable from x.
.THE INTERMEDIATE VALUE THEOREM
Te unavoidable diﬃculty with real numbers means that in general we
cannot know that f(x) = , for given x and continuous function f. But
when f(x) A or f(x) < we can eventually observe this fact, which
enables us to save the proof of the intermediate value theorem. A naive
attempt to prove it, following the classical argument in section ., goes
like this.
Given f() < and f() A , calculate f(~). If f(~) = we
are done. If not, then f passes from negative to positive values in either
[,~] or [~,]. Let Ibe the half of [,] in which this happens, and
repeat the argument in I. Either f = at the midpoint of I, or there is
a half Iof Iin which f passes from negative to positive values. And so
on. Tis process either ﬁnds a midpoint of some interval at which f = ,
or else it generates a nested sequence Ia Ia  of intervals, on each of
which f passes from negative to positive values. But then I,I,... have
a single common point x, at which we necessarily have f(x) = .
Tere are two problems with this attempt.
. If f(c) = at some midpoint c we will not necessarily observe this
fact, no matter how long we spend computing f(c).

RECURSIVE COMPREHENSION
■

. If f(c) < or f(c) A at some midpoint c we will eventually
observe this fact, but we do not know how long we have to wait.
Nothing can be done about problem , so we have to do our best with
problem . Tis is the kind of diﬃculty that computability theorists love!
To deal with it we start more and more computations, and wait for the
results. In this case, we wait for points c where f(c) < or f(c) A 
to show up, and use them as long as they are “suﬃciently close” to the
middle of the interval.
Intermediate value theorem. If f is continuous on [,] and f() < 
and f() A then f(c) = for some c in [,].
Proof. If f = on a whole subinterval of [,] then f(c) = for some
rational (and hence computable) point c, which exists by recursive com-
prehension.
Otherwise, compute values of f in stages as follows.
Stage . Do one step in the computation of f(~).
Stage s. Do s steps in the computation of f(r~s), for r = ,,...,s −.
Tus stage s continues all the computations in progress at stage s−,
as well as starting new computations at points half way between the
points where computations have already been started.
In this way we will eventually ﬁnd each point of the form x = r~s at
which f(x) A or f(x) < . And every subinterval of [,] contains
such points, since we now assume that there is no subinterval on which
f is constantly zero. Tis fact allows us to ﬁx the naive attempt above, by
looking at “midintervals” instead of midpoints.
We begin with an interval in the middle of [,], say the middle third,
and let cbe the ﬁrst point x found in it (during the above computation)
for which f(x) A or f(x) < . Ten f passes from negative to positive
values on either [,c] or [c,]. Let Ibe the subinterval on which this
happens, and look at the middle third of I. We similarly ﬁnd a subin-
terval Iof I, between a point cin the middle third of Iand one of its
endpoints, on which f passes from negative to positive values.
Continuing in this way we obtain (by Σ
induction) a nested sequence
of closed intervals Ia Ia Ia  such that f passes from negative to
positive values on each In. Also, each In is at most /the length of its
predecessor, so the length of In tends to zero, and hence the sequence
I,I,I,... deﬁnes a real number, c, by recursive comprehension.


■
CHAPTER 
It is clear from the continuity of f that f(c) = .
j
An important special case of the intermediate value theorem is where
f is an odd-degree polynomial with real coeﬃcients, say
f(x) = xn + an−xn−+  + ax + a.
In that case f(x) < for large negative x and f(x) A for large positive
x, so there is an interval Ion which f passes from negative to posi-
tive values. Ten the proof above goes through with Iin place of [,];
indeed we can rule out the possibility that f is constantly zero on a subin-
terval. We can then use the argument of Gauss (), which reduces an
arbitrary polynomial equation to one of odd degree, to prove in RCA:
Fundamental theorem of algebra. For any polynomial f with real co-
eﬃcients, the equation f(x) = has a solution in the complex numbers.
j
.THE CANTOR SET REVISITED
To study the weak Kőnig lemma we revisit binary trees and their connec-
tion with the Cantor set, C, introduced in section .. Tere we saw that
C consists of the points that remain in [,] afer removal of the following
open intervals, which we will call the C-complementary intervals:
 
, 

 
, 

 
, 

 
, 

 
, 

 
, 

 
, 

........................
We also saw that the points of C correspond to inﬁnite paths in a com-
plete binary tree whose vertices at level n are the closed intervals that re-
main afer removing the intervals in row nof the list of C-complementary
intervals above. Figure .shows these intervals again, in their successive
levels.
We now “expand” each black closed interval to a gray open interval
by increasing its length by one third at each end (but omitting the end-
points). For example, the intervals , 
 , 
, at level of ﬁgure .ex-
pand to −
, 
 , 
, 
. Te expanded intervals at each level cover C,
so we call them C-covering intervals. Te smallness of the expansion en-
sures that any two C-covering intervals not on the same path are dis-

RECURSIVE COMPREHENSION
■



Figure .: [,] afer removing the C-complementary intervals
joint. Figure .shows the ﬁrst four levels of C-covering intervals, su-
perimposed on the vertices of the tree whose inﬁnite paths represent the
members of C.
Figure .: C-covering intervals
Together, the C-complementary and C-covering intervals cover [,].
So, according to the Heine-Borel theorem, a ﬁnite subset of them also
covers [,]. Tis enables us, by choosing C-covering intervals to suit a
given binary tree, to use the Heine-Borel theorem to prove ﬁniteness re-
sults about trees. In particular, we can show that the Heine-Borel theo-
rem implies the weak Kőnig lemma, and that the implication is provable
in RCA.
.FROM HEINE-BOREL TO WEAK KŐNIG LEMMA
Te classical proof of the Heine-Borel theorem in section .suggests
that it follows from the weak Kőnig lemma, and we might also hope to
prove the converse. However, we have to proceed a little diﬀerently to
prove an equivalence between these two theorems in RCA. We have to
use the sequential form of Heine-Borel, and we have to make the proofs
as computable as possible. Tese results, and the related ones on uniform
continuity, are due to Simpson and we have mostly followed the proofs
in Simpson ().
Our ﬁrst aim is to prove that sequential Heine-Borel implies the weak


■
CHAPTER 
Kőnig lemma in the following form (logically equivalent to the usual
form): if T is a binary tree with no inﬁnite path, then T is ﬁnite. Our ap-
proach is to view T as a subtree of the complete binary tree B whose
inﬁnite paths are the members of C, and to associate certain C-covering
intervals with T. Ten we can use the Heine-Borel theorem to deduce
that T is ﬁnite.
We pass from T to a set of C-covering intervals using vertices called
fallen leaves of T, deﬁned below, on which we place the corresponding
C-covering intervals. Figure .shows an example, with the edges of T
drawn extra thick and C-covering intervals placed on the fallen leaves
of T.
Figure .: Covering the fallen leaves of a tree
Deﬁnition. A vertex v of B is called a fallen leaf of T if v ~> T but u > T,
where u is the vertex above v.
Two remarks are immediate from this deﬁnition:
• If T has no inﬁnite path, then the C-covering intervals that cover
fallen leaves of T cover all of C—because an uncovered point cor-
responds to an inﬁnite path, which T does not have.
• Te C-covering intervals corresponding to distinct fallen leaves of
a tree T are disjoint—because C-covering intervals overlap only if
they lie on the same path, and one fallen leaf cannot lie on the path
to another, since a fallen leaf terminates all paths below it.
A more substantive result about the paths not covered is the following:

RECURSIVE COMPREHENSION
■

Computable inﬁnite path lemma. If T is an inﬁnite computable tree with
a ﬁnite number of fallen leaves, then T has an inﬁnite computable path.
Proof. Since T has only ﬁnitely many fallen leaves, there is a level n below
which no fallen leaves occur. Let vbe the lefmost vertex of T below level
n, which must exist since T has inﬁnitely many vertices.
Since there is no fallen leaf below v, at least one of the two vertices
of B immediately below vis in T. Let vbe the lefmost of the two, and
repeat the argument at v. Again, at least one of the two vertices of B
below vis in T. Let vbe the lefmost of them, and so on.
In this way we can compute (from knowledge of the members of T)
an inﬁnite path v,v,v,... in T.
j
Heine-Borel implies the weak Kőnig lemma. If T is a tree with no inﬁ-
nite path, then T is ﬁnite.
Proof. If T is a tree with no inﬁnite path, consider the set of C-covering in-
tervals placed on fallen leaves of T. Ten, by the ﬁrst remark above, this
set of intervals covers C. Terefore, by combining these intervals with
the C-complementary intervals we get a covering of [,] by open inter-
vals. Te Heine-Borel theorem says that ﬁnitely many of these intervals
also cover [,]. In particular, we get ﬁnitely many C-covering intervals,
placed on fallen leaves of T, that cover C.
Next, since the intervals placed on distinct fallen leaves are disjoint,
by the second remark above, it follows that T has only ﬁnitely many fallen
leaves. But then, if T is inﬁnite, it follows from the computable inﬁnite
path lemma and recursive comprehension that T has an inﬁnite path,
contrary to hypothesis. Tus T is ﬁnite.
j
Te implication just proved can be established in RCA, thanks to the
computability of the path from the tree in the lemma. Te implication
actually requires only a special case of Heine-Borel, where the covering
intervals form a sequence. (Te set of C-complementary and C-covering
intervals can be written in a sequence by listing them level by level.) Also,
we can assume that the endpoints of the intervals are rational. Tis is the
natural version of Heine-Borel to use, but to make it clear that it is not
the general (and classical) version we call it the sequential Heine-Borel
theorem. Like the classical Heine-Borel theorem, the sequential Heine-
Borel theorem is not provable in RCA. Te counterexample in section
.already shows this.


■
CHAPTER 
Tus the proof above shows that the sequential Heine-Borel theorem
implies the weak Kőnig lemma in RCA. In the next section we will show
that the converse implication holds in RCA. As mentioned when we ﬁrst
proved the Heine-Borel theorem in section ., some modiﬁcation of the
argument is needed in order to pass “computably” from the weak Kőnig
lemma to Heine-Borel.
.FROM WEAK KŐNIG LEMMA TO HEINE-BOREL
Te sequential Heine-Borel theorem says: if a sequence (a,b),(a,b)
... of rational intervals covers [,] then some initial segment of the se-
quence (a,b),(a,b),...,(an,bn) also covers [,]. We will prove this
theorem by deducing it from the weak Kőnig lemma. Te proof is some-
what similar to the construction of the Cantor set C, building a binary
tree whose vertices at level n are closed intervals that remain (at least
in part) when the intervals (a,b),(a,b),...,(an,bn) are removed
from [,].
Weak Kőnig lemma implies sequential Heine-Borel. If (ai,bi) are ra-
tional intervals such that the inﬁnite sequence (a,b),(a,b),... covers
[,] then, for some n, (a,b),(a,b),...,(an,bn) also covers [,].
Proof. Given the sequence (a,b),(a,b),... we build a tree T whose
vertices at level n are closed subintervals of [,]; namely, the subintervals
of the form  m
n , m+
n  not completely covered by
(a,b),
(a,b),
...,
(an,bn).
For example, when the ﬁrst three intervals (ai,bi) are  
, 
, −
, 
,
and  
, 
 the ﬁrst three levels of T are as shown in ﬁgure .. (Te
covering intervals are drawn in white, so they erase the parts of [,] they
cover.)
Te corresponding vertices of T (below the top vertex [,]) are
, 
 on level because  
, is covered by  
, 
,
, 
 , 
, 
 on level because neither is covered by  
, 
 ,−
, 
,
, 
 , 
, 
 , 
, 
 on level because  
, 
 is not covered by  
, 
.
Tere is an edge of T from each subinterval at level n to each half of it
that remains at level n + . Tus T is a binary tree.

RECURSIVE COMPREHENSION
■



[
]
[
]
S
[
]
S
S
S
[
]
S
S
S
S
S
S
S
Figure .: Te tree of incompletely covered subintervals
Since (a,b),(a,b),... cover [,], each x > [,] falls into some
(ai,bi). Indeed, for n suﬃciently large, the one of the n subintervals
that contains x falls inside some (ai,bi), and so do the subintervals to
its lef and right. At the stage when this happens none of these three1
subintervals are put in T, thereby terminating all paths in T that lead to
x. Terefore, T has no inﬁnite path, and hence T is ﬁnite by the weak
Kőnig lemma.
If n is the ﬁrst level that includes no vertices of T, then it follows from
the deﬁnition of T that (a,b),(a,b),...,(an,bn) covers [,].
j
In the above proof the tree T is obviously computable from the se-
quence (a,b),(a,b),..., so the proof can be carried out in RCA,
like the proof of the converse result in the previous section. Tus, al-
though neither the weak Kőnig lemma nor the sequential Heine-Borel
theorem is provable in RCA(as we saw in section .) their equivalence
is. In this sense, the weak Kőnig lemma is the “right axiom” to add to
RCAin order to prove the sequential Heine-Borel theorem.
.UNIFORM CONTINUITY
In section .we deﬁned a function f to be uniformly continuous on a set
S if, for all x, y in S, and all ε A , there is a δ A such that
Sx −yS < δ  Sf(x) −f(y)S < ε.
As we mentioned at the time, uniformity means that δ depends only on
ε, not on x or y. It is now convenient to let δ be explicitly a function of
1Tis takes care of a worry when x is the endpoint of an interval, in which case two
diﬀerent inﬁnite paths in T could lead to x.


■
CHAPTER 
ε, and also to let the “arbitrarily small” ε A be explicitly −n, where n
is a positive integer. We can then express the dependence of δ on ε by a
function h of positive integers, called a modulus of uniform continuity, by
setting δ = −h(n) when ε = −n. Ten we make the following:
Deﬁnition. A function f on a set S is uniformly continuous with modulus
h if, for all x, y > S and all n > N,
Sx −yS < −h(n)  Sf(x) −f(y)S < −n.
Te classical theorem that any continuous function on [,] is uni-
formly continuous now has the following counterpart in RCA.
WeakKőniglemmaimpliesuniformcontinuity. Te weak Kőnig lemma
implies that any continuous function on [,] has a modulus of uniform
continuity.
Proof. We skip the details. But the idea is to combine the proof in RCA
that the weak Kőnig lemma implies sequential Heine-Borel, from the
previous section, with the proof that Heine-Borel implies uniform conti-
nuity in section .. Te latter proof can also be carried out “computably,”
leading to a proof in RCA.
j
More importantly, we can show in RCAthat uniform continuity im-
plies the weak Kőnig lemma, so the weak Kőnig lemma is the “right ax-
iom” to prove it.
Uniform continuity implies weak Kőnig lemma. Uniform continuity of
continuous functions on [,] implies the weak Kőnig lemma.
Proof. We will prove that if the weak Kőnig lemma fails, then there is
a continuous function on [,] that is not uniformly continuous. Sup-
pose then that T is an inﬁnite binary tree with no inﬁnite path. From T
we will compute a continuous function f on [,] that is not uniformly
continuous—in fact, f is unbounded, because the values of f include the
lengths of all paths in T.
By ﬁnding the vertices of T level by level, we can enumerate its fallen
leaves level by level, together with the corresponding C-covering inter-
vals described in sections .and .. At the same time, we can enumerate
the C-complementary intervals of section .down to the same level. At
stage n we deﬁne f for x in the union Un of the intervals (of both kinds)
listed down to level n, extending the deﬁnition of f at stage n−on each

RECURSIVE COMPREHENSION
■

new interval that appears so as to make f piecewise linear, hence contin-
uous, on Un.
Te deﬁnition of f is largely arbitrary; the only important require-
ment is the following: when a new C-covering interval I appears at stage
n, f(x) is deﬁned to be n for at least one point x in I. Tis is always pos-
sible, because the C-complementary intervals cover no points of C, so
at stage n they leave uncovered a whole interval containing points of C.
Consequently, when I ﬁrst appears, fis undeﬁned on a whole subinterval
J of I, which is contained in [,] since the C-complementary intervals
all lie in [,]. Tis allows us to continuously extend f to J so as to obtain
f(x) = n for at least one x > J.
It follows that f is unbounded on [,], taking the value n for arbi-
trarily large values of n. Tis is because T is inﬁnite, but all its paths are
ﬁnite, so fallen leaves occur at arbitrarily deep levels n. And f is continu-
ous, being continuous at each point x > [,]: indeed, each x > [,] falls
into the open set Un at some stage, at which stage f becomes deﬁned and
continuous at x.
j
Corollary. Te extreme value theorem implies the weak Kőnig lemma.
Proof. Te above proof also shows that, if the weak Kőnig lemma fails,
then so does the extreme value theorem, because f is unbounded and
continuous on [,]. Tus the extreme value theorem implies the weak
Kőnig lemma.
j
Te proof of the corollary can be carried out in RCA, and so can that
of its converse—weak Kőnig lemma implies the extreme value theorem—
by attending to computability in the classical proof (section .). We do
the converse implication in the next section. Tus the weak Kőnig lemma
is also the “right axiom” to prove the extreme value theorem. Not sur-
prisingly, considering the close relation between uniform continuity and
Riemann integrability, the weak Kőnig lemma is also the “right axiom" to
prove Riemann integrability of continuous functions. For more details on
these, and other theorems provably equivalent to the weak Kőnig lemma
in RCA, see Simpson (), pp. –.
.FROM WEAK KŐNIG TO EXTREME VALUE
We begin, as in the classical proof of the extreme value theorem (sec-
tion .), by supposing that we have an unbounded continuous function


■
CHAPTER 
on [,]. We seek a contradiction by narrowing the region on which f is
unbounded, by repeated bisection. But now we have to pursue the place
where f is unbounded by a computable process, so we compute a tree
of subintervals, discarding a subinterval I only when we discover that f
takes lower values on I than on some other subinterval. (See the expla-
nation below of how such intervals are discovered.) Te result turns out
to be an inﬁnite binary tree with no inﬁnite path, contradicting the weak
Kőnig lemma.
Finding intervals to discard. If f takes lower values on a subinterval I
than on some other subinterval, this is revealed by the representation of
f as a sequence of pairs of rational intervals `(cn,dn),(an,bn)e such that
f((cn,dn)) b (an,bn) (see section .). It follows that if I is suﬃciently
small then I ⊂some (cm,dm), so by enumerating the pairs in f we will
eventually discover I ⊂(cm,dm) and hence that am < f(x) < bm for all
x > I. If f takes values C bm on some interval J we will eventually know
this too, by ﬁnding J ⊂some (cn,dn) with f((cn,dn)) b (an,bn) and
an C bm. At this stage we know that f takes lower values on I than it does
on J.
Weak Kőnig lemma implies boundedness. If there is an unbounded con-
tinuous function on [,], then there is an inﬁnite binary tree with no in-
ﬁnite path.
Proof. Te intervals obtained by repeated bisection of [,] will be viewed
as vertices of the complete binary tree: [,] is the top vertex, [,/] and
[/,] are the two vertices below it, and so on. Figure .shows what the
complete binary tree looks like.
We compute a subtree T of the complete binary tree in stages, at stage
n enumerating the ﬁrst n pairs in f and inspecting the subintervals I at
level n (that is, the subintervals of length −n). We omit a subinterval I if
it lies below a subinterval previously omitted (to ensure that T is a tree),
or if we discover that the values of f on I are less than its values on some
other interval (by the process described above).
It follows that T is computable from f: to decide whether an interval
I on level n belongs to T we run the above computation up to stage n.
Tus the tree T exists by recursive comprehension.
Also, since f is unbounded there will be intervals not omitted at ev-
ery level, so T is inﬁnite. However, if T has an inﬁnite path, this path
represents a nested sequence of closed intervals with a single common

RECURSIVE COMPREHENSION
■



[
]
S
[
]
S
S
S
[
]
S
S
S
S
S
S
S
Figure .: Te complete binary tree of subintervals
point, c say. And the values of f on these intervals must be unbounded—
otherwise the sequence of intervals would be terminated when f was
discovered to have higher values elsewhere. But then f(c) is undeﬁned,
contrary to the continuity of f.
Tis contradiction shows that T has no inﬁnite path.
Tus a continuous unbounded f on [,] implies that there is an inﬁ-
nite binary tree with no inﬁnite path. Equivalently, if each inﬁnite binary
tree has an inﬁnite path (the weak Kőnig lemma), then every continuous
f is bounded.
j
Te above theorem is not actually needed for our proof of the ex-
treme value theorem, but it is good motivation for it. Now, instead of an
unbounded continuous function f we have one with no maximum, so
instead of seeking values of f(x) beyond all bounds, we seek values of
f(x) greater than any previously found. However, it remains true that
we can discover when f takes lower values on some interval I than on
some other interval, so we can apply the same construction.
Weak Kőnig lemma implies the extreme value theorem. If there is a
continuous function on [,] with no maximum value, then there is an
inﬁnite binary tree with no inﬁnite path.
Proof. Suppose that f is a continuous function on [,] that takes no
maximum value. As above, we repeatedly bisect the interval [,], and


■
CHAPTER 
compute from f a subtree T of the complete binary tree of subintervals
by the same algorithm.
Since f is continuous and with no maximum value, for any f(x)
there is a greater f(x), hence for suﬃciently small intervals Icontain-
ing xand Iwe will discover that f takes smaller values on Ithan on I,
and hence we will omit the interval Ifrom T. As in the previous proof,
an interval is omitted only when some other interval is retained, so T is
inﬁnite.
Again, as in the previous proof, an inﬁnite path in T represents a
nested sequence of intervals with a single common point c. And the val-
ues of f on these intervals must include values at least as great as any
value of f found elsewhere, otherwise the sequence would be terminated
when a greater value of f was discovered. But then f(c) exists, by conti-
nuity of f, and f(c) must be the maximum value of f on [,].
Tis contradiction shows that T has no inﬁnite path, so a continuous
f on [,] with no maximum value implies that there is an inﬁnite binary
tree with no inﬁnite path. Equivalently, if each inﬁnite binary tree has
an inﬁnite path (the weak Kőnig lemma) then any continuous f on [,]
takes a maximum value.
j
.THEOREMS OF WKL
We now deﬁne WKL= RCA+ weak Kőnig lemma, so WKLis RCA
with the weak Kőnig lemma as an additional set existence axiom (in
fact, the weak Kőnig lemma implies recursive comprehension, so it is
the set existence axiom for WKL). Ten it follows from the results of the
last three sections that the Heine-Borel, uniform continuity, and extreme
value theorems are theorems of WKL. Tey are not theorems of RCA
because the weak Kőnig lemma fails in RCA, thanks to the counter-
example in section ..
WKLis noteworthy because it can prove not only basic theorems
such as Heine-Borel, but also some important theorems generally thought
to be more diﬃcult than Heine-Borel. Among them are the Brouwer
ﬁxed point theorem in two or more dimensions,2 and the Jordan curve
theorem.
2Te Brouwer ﬁxed point theorem in one dimension follows easily from the interme-
diate value theorem, so it is provable in RCA. Tus the diﬀerence between RCAand
WKLreﬂects the diﬀerence between the Brouwer ﬁxed point theorem in one and higher
dimensions.

RECURSIVE COMPREHENSION
■

A proof of the Brouwer ﬁxed point theorem is fairly straightforward,
because one of the standard proofs—from the so-called Sperner’s lemma
of Sperner ()—translates into a proof in WKL. Much less obvious is
the converse, though an outline of it may be found in Shioji and Tanaka
(). Tus in fact the Brouwer ﬁxed point theorem is equivalent to the
weak Kőnig lemma over RCA.
Te situation is reversed for the Jordan curve theorem. Te known
proof of the theorem in WKL—by Sakamoto and Yokoyama ()—is
diﬃcult (as is the classical proof), but proving that the Jordan curve theo-
rem implies the weak Kőnig lemma is quite simple. One takes the Jordan
curve theorem to say that (R−the image of the curve) consists of two
components, where points P,Q belong to the same component if there
is a polygonal path from P to Q not meeting the curve. A counterexam-
ple may then be constructed using a positive continuous function f on
[,] with no maximum (implied as above by a “failed binary tree” that is
inﬁnite but has no inﬁnite path). From f we get the positive continuous
function ~f with no minimum but with greatest lower bound on [,].
By connecting the endpoints `,~f()e and `,~f()e of the graph
of ~f to the endpoints of [,] by vertical segments one obtains a sim-
ple closed curve (suggested by ﬁgure .) whose complement consists of
more than two components. To see why, consider two points P and Q
below the graph, but above the x-axis, and separated by x-values where
~f(x) becomes arbitrarily small. Neither P nor Q is in the “outer” com-
ponent of the curve complement, but they cannot be connected by a
polygonal path not meeting the curve, since any such path has a min-
imum positive distance from the x-axis.
Sakamoto and Yokoyama () also prove that a generalization of
the Jordan curve theorem, the Schönﬂies theorem, is equivalent to the
weak Kőnig lemma over RCA. Te Schönﬂies theorem says that the in-
terior of a simple closed curve in the plane can be mapped to a disk by a
continuous bijection. A stronger version, the Riemann mapping theorem,
implies that the interior is conformally equivalent to the disk: there is a
continuous bijection between them that preserves angles. Horihata and
Yokoyama () proved the Riemann mapping theorem equivalent to
arithmetical comprehension over WKL. Tis means that the Riemann
mapping theorem is provable in ACA, but not in WKL, for reasons we
will see in the next section.


■
CHAPTER 
x

.P
.Q
Figure .: Countering the Jordan curve theorem
Other Teorems of Topology
Brouwer (a) proved two other famous theorems of topology—in-
variance of domain and invariance of dimension—that are consequences
of his ﬁxed point theorem, proved in Brouwer (b). (Te lemma of
Sperner () was in fact used by Sperner not only to prove the ﬁxed
point theorem but also to streamline the proofs of Brouwer’s invariance
theorems.) Invariance of domain states that a continuous injective map
with open domain in Rn has an open image. Invariance of dimension
(which follows easily from invariance of domain) states that there is no
continuous bijection between Rm and Rn if m x n. Te proofs of these
theorems from the ﬁxed point theorem can be carried out in RCA, so
they are theorems of WKL.
However, it has apparently not yet been established whether either
of the invariance theorems is provable in RCA(at least for dimension
greater than one). Nor do we know whether either of them implies the
weak Kőnig lemma, and hence is equivalent to it. Finding the exact
strength of the Brouwer invariance theorems seems to me one of the most
interesting open problems in reverse mathematics.
Te special case of invariance of dimension where m = and n = is
provable in RCA. To prove it we suppose, for the sake of contradiction,
that f  R   Ris a continuous bijection. Now R can be separated by the
single point x = , in the sense that there is no continuous “path” in R
from −to avoiding ; that is, no continuous t  [,]   R − with

RECURSIVE COMPREHENSION
■

t() = −and t() = . Such a function t, since it does not take the value
, contradicts the intermediate value theorem. On the other hand, there
obviously is a continuous path in Rfrom f(−) to f() and avoiding
f(), since these points are distinct by the assumption that f is a bijec-
tion. Tis contradicts the assumption that f is a continuous bijection—
meaning that f−exists and is continuous—since f−would then give a
continuous path in R from −to avoiding .
Tis special case is provable in RCAbecause the intermediate value
theorem is. But the special case is generally considered much easier than
the case of arbitrary m and n, because “separation” is a trickier concept
in dimension greater than one. So provability of general invariance of
dimension in RCAseems doubtful. Te same holds a fortiori for invari-
ance of domain in higher dimensions, since invariance of domain implies
invariance of dimension.
.WKL, ACA, AND BEYOND
Since ACAproves the weak Kőnig lemma, all theorems of WKLare
provable in ACA. In fact ACAcan prove more theorems than WKL,
though the known proofs of this fact depend on some advanced results
of logic and computability theory. Te approach from logic will be dis-
cussed further in section ., and the approach from computability the-
ory in section .. However, it is worth mentioning both brieﬂy here.
ACAcan prove the consistency of WKLby deﬁning a class of sets
that satisfy the axioms of WKL. But a famous theorem of logic—Gödel’s
second incompleteness theorem—implies that WKLcannot prove its own
consistency. So a formal statement of the consistency of WKL,
Con(WKL), is a theorem of ACAthat is not a theorem of WKL. It
follows that any theorem of ACAequivalent to arithmetical compre-
hension, such as the full Kőnig lemma or the Bolzano-Weierstrass theo-
rem, is not a theorem of WKL—otherwise WKLwould prove as much
as ACA.
Another way to see this result is to show that WKLcan be modeled
by a class of sets that does not include all arithmetically deﬁnable sets.
Since any model of ACAincludes all arithmetically deﬁnable sets, as we
saw in section ., it follows that WKLdoes not include ACA.
WKLcan in fact be modeled by a class of sets in Σ
9 Π
. Tis is
shown with the help of a concept from computability theory called low


■
CHAPTER 
degree. Te sets of low degree are in Σ
9 Π
and they have the property
that any inﬁnite tree of low degree has an inﬁnite path of low degree. It
follows that a collection of sets of low degree provides a model of WKL.
And this model does not include all arithmetically deﬁnable sets, since
not all arithmetically deﬁnable sets are in Σ
9 Π
, as we saw in section
.. For more about the concept of low degree see section ., and for the
key theorem about low degrees see Simpson (), pp. –.
Te “Big Five” Systems
Te theorems of analysis and topology we have mentioned until now ﬁt
very neatly into the systems RCA, WKL, and ACA. If RCAdoes not
prove them outright then it proves them equivalent either to the weak
Kőnig lemma or to arithmetical comprehension, the deﬁning axioms of
WKLand ACArespectively. It is therefore tempting to end the book
here, with the following neat classiﬁcation of theorems.
RCAproves
Intermediate Value Teorem.
WKLproves
Sequential Heine-Borel Teorem
 Uniform Continuity Teorem
 Extreme Value Teorem
 Riemann Integrability of Continuous Functions
 Brouwer Fixed Point Teorem
 Jordan Curve Teorem
(Equivalences provable in RCA).
ACAproves
Kőnig Inﬁnity Lemma
 Sequential Bolzano-Weierstrass Teorem
 Sequential Least Upper Bound Property
 Cauchy Convergence Criterion
(Equivalences provable in RCA).
But mathematics never ends neatly, and in fact there are a few anomalous
theorems, some of which are accommodated by two new systems, and
others which seem to break the bounds of the neat classiﬁcation. One
such theorem is the inﬁnite Ramsey theorem ∀kRT(k), mentioned in
section .. As we said there, the inﬁnite Ramsey theorem is not provable

RECURSIVE COMPREHENSION
■

in ACA, though some of its special cases are equivalent to arithmetical
comprehension.
Tus we would hope that the inﬁnite Ramsey theorem is provable
from a stronger set existence axiom. Two such axioms have been singled
out as being natural and having a variety of interesting equivalents. Te
weaker of the two is called arithmetical transﬁnite recursion, and adding
it to PA gives a system called ATR. ATRis strong enough to prove the
inﬁnite Ramsey theorem, in fact ATRis more than enough, because the
inﬁnite Ramsey theorem does not imply arithmetical transﬁnite recur-
sion. However, arithmetical transﬁnite recursion is considered a better
axiom to add to PA, because it has more interesting equivalents.
Te strongest set existence axiom currently considered natural is
called Π
comprehension. Te symbol Π
indicates that the properties
φ(n) deﬁning sets are allowed to include one universal set quantiﬁer.
Such a quantiﬁer arises in the deﬁnition of a well-ordering R of N, where
one says that R is a linear ordering and that every subset of N has a least
member under the ordering relation R. Te system with Π
compre-
hension as its set existence axiom is called Π
-CA. Te systems RCA,
WKL, ACA, ATR, and Π
-CAare known as the “big ﬁve” because to-
gether they cover most theorems that arise in ordinary mathematics and
their set existence axioms attract large families of theorems into their
“orbits” (logical equivalence classes relative to the axioms of RCA).
Te systems ATRand Π
-CAcan both handle countable well-
orderings, and their theorems typically have a set-theoretic ﬂavor. An
example, equivalent to Π
comprehension, is the Cantor-Bendixson the-
orem stating that an uncountable closed subset of R is the union of a
countable set and a perfect set. Teorems of this ﬂavor are on the mar-
gins of “ordinary” analysis, so analysts may well be content with the the-
orems of RCA, WKL, and ACA. However, some important theorems
of combinatorics lie above the level of ACA. We have already seen one—
the inﬁnite Ramsey theorem—and two even more spectacular examples
are the theorems of Kruskal () and Robertson and Seymour ().
Te Teorems of Kruskal and Robertson-Seymour
Before stating the theorems in question, I would like to mention a “baby”
theorem of the same type, known as the ascending/descending sequence


■
CHAPTER 
principle (ADS): any inﬁnite sequence of rational numbers contains an in-
ﬁnite monotonic subsequence. Tis theorem has some of the ﬂavor of the
Bolzano-Weierstrass theorem (and is a consequence of it) but it seems
simpler. Nevertheless, it is not trivial because it is not provable in RCA.
Rather mysteriously, ADS does not seem to ﬁt neatly in the “big ﬁve”
system at all: it lies somewhere below ACAbut is not in WKL. (See
Hirschfeldt () for the complicated known facts about ADS.)
Te theorems of Kruskal and Robertson-Seymour can also be ex-
pressed in the form “inﬁnite sequence contains an inﬁnite monotonic
subsequence,” but the objects are ﬁnite graphs rather than numbers, and
the orderings are relations appropriate for ﬁnite graphs rather than the
usual order relation for numbers. For readers not familiar with graph the-
ory I recommend the book Diestel (), which explains the order re-
lations of “embedding” and “graph minor” and gives a proof of Kruskal’s
theorem. In this subsection I wish only to point out the remarkable po-
sition of the Kruskal and Robertson-Seymour theorems relative to the
“big ﬁve” systems.
Te usual statements of the theorems are as follows:
Kruskal’s theorem. If T,T,T,... is an inﬁnite sequence of ﬁnite trees,
then Ti embeds in Tj for some i < j.
Robertson-Seymour theorem. If G,G,G,... is an inﬁnite sequence of
ﬁnite graphs, then Gi is a minor of Gj for some i < j.
We obtain equivalent statements about inﬁnite monotonic sub-
sequences as follows. Given an inﬁnite sequence T,T,T,... of ﬁnite
trees, consider the trees Tm that embed in no tree Tn with m < n. By
Kruskal’s theorem there are only ﬁnitely many such Tm. Ten, if we re-
move these Tm from the given sequence, each remaining tree Ti embeds
in some Tj with i < j. Terefore, we can form an inﬁnite subsequence
Tih Tih Tih  ,
where h denotes the “embeds in” relation. A similar argument applies
to ﬁnite graphs under the graph minor relation, so we can also state the
theorems as follows (imitating the statement of ADS).
Kruskal’s theorem. Any inﬁnite sequence of ﬁnite trees contains an inﬁnite
subsequence that is increasing under the “embeds in” relation.

RECURSIVE COMPREHENSION
■

Robertson-Seymour theorem. Any inﬁnite sequence of ﬁnite graphs con-
tains an inﬁnite subsequence that is increasing under the graph minor
relation.
Here now are the known results, due to Friedman et al. (), which
show the lofy position of these theorems relative to the “big ﬁve” systems:
Kruskal’s theorem is not provable in ATR, and the Robertson-Seymour
theorem is not provable in Π
-CA.

C H A P T E R 
■■■■■
A Bigger Picture
In this book I have tried to minimize technicalities from logic and com-
putability theory, in order to maximize understanding of reverse mathe-
matics by ordinary mathematicians. Tis has meant, however, that many
ideas from logic were mentioned brieﬂy and then dropped—perhaps leav-
ing some readers eager to know more. (I hope so!)
Tis ﬁnal chapter aims to pick up some of the dropped ideas and set
them in a bigger picture of logic and computability theory. It is still not a
detailed picture, but I hope that it is a useful sketch, and that interested
readers will be able to pick up more details from the sources I suggest.
Te chapter begins with a sketch of constructive mathematics. Origi-
nally developed by a minority of mathematicians opposed to using actual
inﬁnities, constructive mathematics contributed some useful techniques
for computable mathematics in systems such as RCA.
Tis is followed by sections on the completeness of logic and the in-
completeness of PA and related systems. Tese results reveal mathemat-
ics as an arena where theorems cannot always be proved outright, but
in which all of their logical equivalents can be found. Tis creates the
possibility of reverse mathematics, where one seeks equivalents that are
suitable as axioms.
Next we explain how computability theory helps us to distinguish the
equivalence classes of theorems, and ﬁnally make a few speculative re-
marks on the ordering of the equivalence classes, and how this throws
light on the concept of mathematical depth.

A BIGGER PICTURE
■

.CONSTRUCTIVE MATHEMATICS
Te discovery that real numbers correspond to sets of natural numbers
was the key to the arithmetization of analysis described in chapter . At
the same time, Cantor’s discovery that R is uncountable raised the
old specter of actual inﬁnity. Most mathematicians overcame their fear
of actual inﬁnity because R was by then necessary (or at least conve-
nient) in their work. But a few eminent mathematicians rejected actual
inﬁnity and declared that they would accept only constructive objects in
mathematics—objects that would later be called “computable.”
Te ﬁrst advocate of constructive mathematics was the number theo-
rist Leopold Kronecker (–). Kronecker was in favor of arithme-
tization, but only as far as one could take it by constructive processes.
He famously rejected the fundamental theorem of algebra (FTA) in fa-
vor of what he called his “fundamental theorem of general arithmetic,”
because the classical FTA located the solutions of equations in C—a non-
constructible set. Instead he constructed, for each irreducible polynomial
p(x) with integer coeﬃcients, the domain of “integer polynomials mod
p(x),” in which the equation p(x) = has a solution in the form of the
equivalence class of x. Kronecker’s construction is computable, in the
modern sense, and it can be used to prove the classical FTA in RCA.
Te latter proof, perhaps, might have overcome Kronecker’s objections
to the classical FTA.
But later constructivists had other objections to classical mathematics—
and to classical logic. Te next eminent constructivist was L. E. J. Brouwer
(–). Brouwer made his name by outstanding contributions to
topology, such as the invariance of dimension (no continuous bijection
between Rm and Rn when m x n) and the Brouwer ﬁxed point theorem
mentioned in section .. Like Kronecker, Brouwer insisted that math-
ematical objects must be “constructed,” so an object cannot be claimed
to “exist” until a construction of it is given. Because of this, Brouwer re-
jected many classical theorems in which existence is proved without giv-
ing a construction. He likewise insisted that an object cannot be declared
“nonexistent” until its existence is constructively shown to lead to con-
tradiction. In this sense, we cannot (yet) claim that a string of consec-
utive zeros in the decimal expansion of π is either existent or nonexistent.


■
CHAPTER 
For reasons like this, Brouwer rejected a law of classical logic: the law of
excluded middle, which says that, for any proposition φ, either φ or  φ is
true.
Te ideas of Kronecker and Brouwer are considered extreme by most
mathematicians. Nevertheless, they have been useful in ﬁelds of mathe-
matics involving computation, since the concept of “computable” seems
to capture the previously vague concept of “constructive.” Constructive
proofs can ofen be put to use in RCAwhen classical proofs are not
constructive enough, and because of this RCAseems to capture the con-
tent of “constructive analysis” pretty well. Te match is not perfect, since
RCAuses classical logic, but the constructivist origins of many proofs
in reverse mathematics are documented in Simpson ().
Tus, reverse mathematics has a big debt to constructive mathemat-
ics. It has, in my opinion, repaid its debt. By accepting classical logic and
noncomputable functions, reverse mathematics can explain why theo-
rems are provable in one system but not in another, and can thereby
measure “how nonconstructive” are some of the theorems rejected by
constructivists. Te answer is ofen “not very.” Brouwer rejected some
of his own theorems, such as the ﬁxed point theorem, as being noncon-
structive.1 But we now know, thanks to reverse mathematics, that the
ﬁxed point theorem is not far outside constructive mathematics, since it
is constructively equivalent to the weak Kőnig lemma.
.PREDICATE LOGIC
Te language of logic has been mentioned, in passing, several times in
this book. Te language of PA and its extensions such as RCAare part
of a general language of predicate logic, which includes symbols for
variables: x, y,x,..., X,Y, Z,...
constants: a,b,c,...
function symbols: f, g, h,...
predicate symbols: P,Q,R,...
logic symbols: ,,-, ,,,∀,§, plus parentheses and commas.
1In Brouwer gave a lecture series in Berlin, in which he rejected the intermediate
and extreme value theorems, the Bolzano-Weierstrass theorem, and ﬁnally his own ﬁxed
point theorem. See the biography of Brouwer by van Dalen (), pp. and . Van
Dalen’s book is an excellent introduction to Brouwer’s ideas in both topology and the
foundations of mathematics, as well as being a fascinating account of Brouwer’s life.

A BIGGER PICTURE
■

We have also mentioned, in passing, certain formulas that are logically
valid; that is, true under all interpretations of the non-logic symbols. For
example, for any formulas φ and ψ the following are valid:
 (φ , ψ)  ( φ) - ( ψ),
 (φ - ψ)  ( φ) , ( ψ).
But we have not given rules of inference for ﬁnding logically valid for-
mulas, or even said whether a complete set of rules exists. In fact, a com-
plete set of rules was ﬁrst given by Frege (), though his rules were
not known to be complete at the time.
Te existence of a complete set of rules for generating the valid for-
mulas was ﬁrst proved by Gödel (). I will not give a completeness
proof here, because one may be found in many textbooks of mathemati-
cal logic, and also in Stillwell (). But in fact a rather similar proof has
already been given in section .of this book. Tere we showed that any
consistent set of sentences (of PA, but the proof works for any sentences
of predicate logic) has an interpretation that makes them all true.
By a similar argument one can show that there is a set of falsiﬁcation
rules, which falsify any sentence that is false under some interpretation.
Te rules repeatedly reduce the length of the sentence. For example, to
falsify  (φ - ψ) it suﬃces to falsify one of the shorter sentences  φ or
 ψ because  (φ - ψ)  ( φ) , ( ψ). Te rules succeed by breaking
formulas down to their smallest parts, at which point it is clear whether
they can be falsiﬁed or not. Now, the reverse of a falsiﬁcation rule is a
rule for proof —in this case: from  φ or  ψ infer  (φ - ψ). In this way,
the completeness of the falsiﬁcation process gives a complete set of rules
for proving all logically valid formulas.
Tis argument, I think, gives the general idea of the completeness
proof, and how it is related to the theorem in section .. What the two
have in common is reliance on the weak Kőnig lemma to obtain an in-
ﬁnite path in a tree: in section .to ﬁnd an interpretation satisfying a
consistent set of formulas; here to ﬁnd an interpretation falsifying an in-
valid formula. Tis is no accident. Te completeness theorem for predicate
logic is yet another equivalent of the weak Kőnig lemma.
Tis equivalence reveals some noncomputability in predicate logic.
Indeed it was proved by Church (a) and Turing () that the prob-
lem of deciding validity in predicate logic is unsolvable. Tat is, there is no
algorithm for deciding, given an arbitrary formula φ of predicate logic,


■
CHAPTER 
whether φ is logically valid. Once unsolvable problems in computation
are known the unsolvability of the validity problem is not a great sur-
prise. It was already known in that computation can be arithme-
tized, and this amounts to translating computation into deductions, in
predicate logic, from the axioms of PA. In fact, one can bypass arith-
metization and translate computation into predicate logic directly. Tis
is how Turing () proved unsolvability of the validity problem, or
the Entscheidungsproblem (“decision problem” in German) as it was then
known.
At any rate, the undecidability of the Entscheidungsproblem throws
new light on Gödel’s completeness theorem. It means that the valid for-
mulas of predicate logic are computably enumerable, but the invalid for-
mulas are not—thus there is a sense in which truth is more accessible
than falsehood! It also means that we can computably enumerate all the-
orems that RCAproves equivalent to, say, the weak Kőnig lemma or the
monotone convergence theorem, or any other statement we care to as-
sume. Tis is the best we can hope for, because it is not generally possible
to prove theorems outright, as we will see from many angles in the next
section.
Te main value of an axiom system for mathematics, such as RCA,
is its ability to prove equivalences between theorems it cannot prove out-
right. We can view RCAas shown in ﬁgure .: as a “planet” of theo-
rems proved outright, surrounded by “rings” or “orbits” of theorems that
RCAcan prove equivalent to each other. Tus the ring WKLcontains
all theorems in the orbit of the weak Kőnig lemma, the ring ACAcon-
tains all theorems in the orbit of the monotone convergence theorem,
and there are inﬁnitely many rings further out, because there is no end
to the theorems a consistent system cannot prove.
Tis is the message of Gödel incompleteness, which we study in the
next section. Gödel completeness mitigates the eﬀect of Gödel incom-
pleteness, a little, by allowing all equivalents of a given unprovable sen-
tence to be found.
Te hard part of axiomatic mathematics is showing unprovability of
sentences in the base theory. It has always been so. As we saw in chapter
, it was hard to show that the parallel axiom is not provable from Euclid’s
other axioms, and hard to show that the axiom of choice is not provable
in ZF. In both cases great ingenuity was needed to construct a model of
the base theory in which the axiom in question did not hold. Te same

A BIGGER PICTURE
■

RCA
WKL
ACA
Figure .: RCAand two of its rings. (From a picture of Saturn and its rings created from
images obtained by NASA’s Cassini spacecraf on Oct. , , by Gordan Ugarkovic.)


■
CHAPTER 
is true, though perhaps not to such an epic extent, of the axioms not
provable in RCA, such as the weak and strong Kőnig lemmas. We say
more about our evolving understanding of unprovability in the next two
sections.
.VARIETIES OF INCOMPLETENESS
Section .outlined a connection between unsolvability and incomplete-
ness, and sections .and .mentioned the unprovability of consis-
tency. It is worth saying a little more about diﬀerent versions of incom-
pleteness, because the step from each kind to the next involves an inter-
esting idea.
. Te computably enumerable, noncomputable set D gives the ex-
istence of unprovable theorems of the form n ~> D in any formal
system.
As we said in section ., D is not computable because its comple-
ment N −D is not computably enumerable, being diﬀerent from
the nth computably enumerable set (which we will now call Wn)
with respect to the number n. Namely: n > D  n > Wn, so
n > N −D  n ~> Wn.
But a formal system, by deﬁnition, has a computably enumerable
set of theorems, so we can computably enumerate its theorems of
the form n ~> D. Since N −D is not computably enumerable, these
theorems (if correct) do not include all true statements of the form
n ~> D.
. Suppose that our formal system F is consistent and that the set of
n for which F proves “n ~> Wn” is the computably enumerable set
Wm. We can also assume that F is strong enough to prove n > Wn
whenever this is true, because there is a computable enumeration
of all the Wn. What can we say about the sentence “m ~> Wm”?
If F proves “m ~> Wm,” then m > Wm, by deﬁnition of Wm. But
we have assumed that F can prove all such true statements, so F
also proves “m > Wm,” contradicting its consistency. So F does not
prove “m ~> Wm,” which means m ~> Wm, by the deﬁnition of Wm
again. Tus “m ~> Wm” is a speciﬁc true sentence that F fails to prove.
Notice that the sentence “m ~> Wm” essentially says “I am not prov-
able,” because m ~> Wm means “m ~> Wm” is not provable, by deﬁ-
nition of Wm.

A BIGGER PICTURE
■

. By arithmetizing computation we can ﬁnd a speciﬁc unprovable
sentence of PA that is equivalent to m ~> Wm, and hence is un-
provable, assuming that PA is consistent. Arithmetization of formal
deduction in PA enables us to express the consistency of PA by a
sentence in the language of PA, Con(PA).
. Version shows that “Con(PA)  m ~> Wm,” and version shows
that the proof can be carried out in PA. It follows that Con(PA) can-
not be proved in PA, otherwise modus ponens would give a proof
of “m ~> Wm,” and we know that “m ~> Wm” has no proof in PA. Tus
PA, if consistent, cannot prove its own consistency, and neither can
any consistent system that includes PA, because a similar argument
would apply.2
Tis is a brilliant train of thought—one of the most stunning in math-
ematics. Versions and are like those found by Post in the s, and re-
viewed by him in Post (). Versions and are essentially the ﬁrst and
second incompleteness theorems of Gödel (), though Gödel found
the ﬁrst theorem diﬀerently, by directly constructing a sentence that says
“I am not provable.” Interestingly, Gödel ﬁrst proved incompleteness for
a higher-level system of mathematics because he did not immediately re-
alize that computation could be arithmetized. He was prompted to arith-
metize by von Neumann, according to Wang ():
In September ...Gödel announced his result ...Von Neumann
was very enthusiastic about the result and had a private discus-
sion with Gödel. In this discussion, von Neumann asked whether
number-theoretical undecidable propositions could also be con-
structed ...and expressed his belief that it could be done. ...Shortly
aferward Gödel, to his own astonishment, succeeded in turning
the undecidable proposition into a polynomial form preceded by
quantiﬁers (over natural numbers).
Von Neumann also deserves credit for the second incompleteness the-
orem, because he pointed out unprovability of consistency in a letter to
Gödel (von Neumann ()) before Gödel announced the result him-
self. Tese incompleteness theorems are a wonderful feat of logic but, of
2Moreover, the argument applies to certain weaker systems in which computation is
representable, such as RCAand WKL. Tis is why we were able to say, in section .,
that WKLcannot prove Con(WKL).


■
CHAPTER 
the unprovable sentences found so far, only Con(PA) is of intrinsic in-
terest, and it is interesting mainly to logicians. In fact, all known unprov-
able sentences of PA have been devised by logicians. Te one most nearly
like “normal” mathematics is the Paris-Harrington theorem mentioned
in section ..
RCAis incomplete in an interesting way because it fails to prove
some ordinary mathematical sentences, such as the monotone conver-
gence theorem. And this unprovability comes directly from a computably
enumerable, noncomputable set, with no logical contortions. By seeking
unprovability in systems other than PA, reverse mathematics ﬁnds well-
known theorems not provable from (what some people think are) natural
axiom systems.
.COMPUTABILITY
Degrees of Unsolvability
In section .we introduced an enumeration of computable partial func-
tions Φ,Φ,Φ,...and mentioned that the computably enumerable sets
are the domains of these functions. We now let Wn denote the domain
of Φn, so W,W,W,... is an enumeration of all computably enumer-
able sets. Since Φn(m) is a computable partial function of the two vari-
ables m,n, the set K = P(m,n)  m > Wn (where P is the pairing
function introduced in section .) is computably enumerable and it en-
codes the sequence W,W,W... . We call K a universal computably
enumerable set.
Post () introduced essentially the same set and observed that the
membership problem for any computably enumerable set is “reducible”
to that of K, in the following way: to decide whether m > Wn, compute
P(m,n) and ask whether P(m,n) > K. It follows that the membership
problem for K is unsolvable because we know from section .that there
are particular Wm with unsolvable membership problem, such as the set
D deﬁned there.
More generally, we may be able to “reduce” a set A b N to a set B b N
by an algorithm that correctly answers each question “Does n > A?”
when given the answers to all questions of the form “Does m > B?” Post
called this reducibility notion Turing reducibility because it was intro-
duced brieﬂy by Turing (). We now denote Turing reducibility by
BT, so the reducibility of D to K can be written D BT K. It so happens

A BIGGER PICTURE
■

(though it is not obvious) that K BT D too, in which case we say that D
and K have the same Turing degree, or the same degree of unsolvability.
So far we know two degrees of unsolvability. All computable sets have
the same (trivial) degree, denoted by , and somewhere above is the
degree of K and D, denoted by ′ and called the Turing jump of . It can
be shown, with some diﬃculty, that there are degrees of unsolvability
between and ′, but ﬁnding degrees greater than ′ is easy by iterating
the Turing jump.
We apply the Turing jump to any set X b N by giving algorithms the
answers to all questions “Does m > X?” Tis yields sets WX
,WX
,WX
,...
computably enumerable in X and one, KX = P(m,n)  m > WX
n , with
maximal Turing degree. Te degree of KX is called the Turing jump of the
degree of X. In particular, when X = K the degree of KX is ′′, the double
Turing jump of . By iterating this construction we obtain an inﬁnite
ascending sequence of degrees <T ′ <T ′′ <T ′′′ <T  .
And Arithmetically Deﬁnable Sets
As we know from chapter , the computably enumerable sets are pre-
cisely the Σ
sets. So it follows from the results of the previous subsection
that each Σ
set has Turing degree BT ′. It is not the case that every set
of degree BT ′ is Σ
, but it can be proved that all such sets are in Σ
, by
arithmetizing the concept of computation relative to the Σ
set K.
More generally, we can prove that any set in Σ
n has degree BT (n)
(the nth jump of ) and that any set of degree BT (n) is in Σ
n+. So the
arithmetically deﬁnable sets are precisely those of degree BT (n) for some
n. Also, (n) is the maximal degree of sets in Σ
n, so the “arithmetic com-
plexity” of a set (measured by the number of quantiﬁers in its deﬁnition)
keeps pace with its “computational complexity” (measured by the num-
ber of jumps). A classic account of the relation between computability
and the arithmetically deﬁnable sets is in Rogers ().
Low Degrees
Te parallel between arithmetic complexity and computational complex-
ity enables us to bound the arithmetic complexity of sets by bounding
their computational complexity. Tis is the right way to bound the com-
plexity of models of WKL, and hence to show that WKLis weaker than
ACA.


■
CHAPTER 
Te appropriate computational concept is that of low degree, deﬁned
to be a Turing degree whose jump is ′. A theorem of computability the-
ory says that an inﬁnite tree of low degree has an inﬁnite path of low degree
(for a proof, see Simpson (), p. ), so a collection of low-degree
subsets of N satisﬁes the weak Kőnig lemma and hence is a model of
WKL.
But this collection does not include all arithmetically deﬁnable sets
(in fact, it includes only Σ
sets), so it is not a model of ACA. Tis ex-
plains more fully the claim in section .that ACAis stronger than
WKL.
In fact, both proofs mentioned in section .can be based on low de-
gree sets. One proof is the one just described: some low degree sets form
a model of WKLbut not of ACAbecause they do not include all arith-
metically deﬁnable sets. Te other proof argues that this collection of low
degree sets can be deﬁned in ACA, by arithmetizing computation. Tus
ACAcan deﬁne a model of WKL, and hence prove the consistency of
WKL. WKLitself cannot do this, by Gödel’s second incompleteness
theorem, so ACAis stronger than WKL.
.SET THEORY
Beyond the basic analysis discussed in this book there are areas that rely
on set theory, particularly the axiom of choice. An example is measure
theory. A certain amount of measure theory can be done in weak systems
such as WKL, in fact in a system called WWKLwith an even weaker
Kőnig lemma. But none of the “big ﬁve” can touch what is arguably the
fundamental question of measure theory: which subsets of R are measur-
able? Te answer to this question depends on AC, and more.
For example, AC implies that nonmeasurable sets exist, but the nature
of the nonmeasurable sets depends on further axioms not provable in
ZF. In ZF alone, it is consistent for all subsets of R to be measurable,
while weaker choice axioms still hold. For an introduction to the complex
interplay between measure theory and set theory, see Stillwell ().
Axioms of choice also control the existence of objects in algebra. Struc-
tures such as rings, ﬁelds, and vector spaces are virtually as “arbitrary” as
arbitrary sets, so associated objects such as
• maximal ideal of a ring,
• algebraic closure of a ﬁeld, and
• basis of a vector space

A BIGGER PICTURE
■

can generally not be explicitly deﬁned, only “called into being” by some
axiom of choice. Algebraists frequently use a general-purpose equivalent
of AC known as Zorn’s lemma, which states the existence of a maximal
object in a collection of sets partially ordered by containment.
For example, among the collection of independent sets in a vector
space, a maximal element is a basis. We have already mentioned, in sec-
tion ., that existence of a basis is equivalent to AC. Te existence of
maximal ideals and algebraic closures is also not provable in ZF, though
choice axioms weaker than AC suﬃce to prove them. Proofs from Zorn’s
lemma of the three results above may be found, for example, in Abhyankar
(), pp. –.
If we consider only countable algebraic structures, then they are well-
ordered by deﬁnition and the need for AC disappears. Instead, by coding
the structures by sets of natural numbers, reverse mathematics can come
into play, and indeed the existence of maximal structures is nicely related
to RCA, WKL, and ACA:
• Existence of a maximal ideal in a countable commutative ring is
equivalent to ACA.
• Existence of the algebraic closure of countable ﬁeld is provable in
RCA.
• Uniqueness of the algebraic closure of a countable ﬁeld is equiva-
lent to WKL.
• Existence of a basis for a countable vector space over Q is equivalent
to ACA.
Tese theorems are due to Friedman et al. (), and proofs may be
found in Simpson (). Tey reveal quite surprising equivalences, over
RCA, between theorems in analysis and countable algebra. To take a
random example, the Cauchy convergence criterion is equivalent to the
existence of a maximal ideal in a countable ring.
AC in Elementary Analysis
As mentioned above, ZF alone cannot decide certain questions of ad-
vanced analysis, such as the existence of nonmeasurable sets of real num-
bers. In elementary analysis it is possible to avoid using the full strength
of ZF—indeed we have seen that ACAis strong enough to prove the ba-
sic theorems, and even quite advanced ones such as the Riemann map-
ping theorem. But to use ACAwe have to formulate the basic theorems


■
CHAPTER 
appropriately. In particular, we have to avoid mention of arbitrary sets
of real numbers or intervals in theorems such as Bolzano-Weierstrass or
Heine-Borel.
Te strongest formulation of Bolzano-Weierstrass, which appears in
some textbooks, is the following: a bounded inﬁnite set of real numbers
contains a convergent subsequence. Tis formulation of Bolzano-
Weierstrass is not even provable in ZF, because in ZF it is not possible
to prove that an inﬁnite set S of real numbers contains an inﬁnite se-
quence s,s,s,... . Te obvious way to prove this claim, of course, is
to choose a member s> S, then a member s> S −s, then a mem-
ber s> S −s,s, and so on. Since S is inﬁnite, this process gives
an inﬁnite sequence s,s,s,... contained in S but it involves an inﬁ-
nite sequence of choices, and hence appeals to AC. Cohen () in fact
constructed a model of ZF in which there is a bounded inﬁnite set of
real numbers containing no inﬁnite sequence, so the strong formulation
of Bolzano-Weierstrass is not provable in ZF.
Te same model of ZF can be used to construct a function f which
is “sequentially continuous” at a certain point x = a—in the sense that
f(an) has limit f(a) for each sequence an with limit a—although f is
not continuous at x = a. Under AC, sequential continuity at a point is
equivalent to actual continuity at a point. So this equivalence is not prov-
able in ZF, although it is assumed in some textbooks of analysis, such as
Abbott ().
.CONCEPTS OF “DEPTH”
Mathematicians ofen call a theorem “deep” if it is some way fundamen-
tal, revealing, and hard to prove. Te proof of a deep theorem is ofen
uncovered only through the work of generations of mathematicians, by
which time the theorem has been found to underlie many others. Ex-
amples from the recent history of mathematics are the prime number
theorem, the classiﬁcation of ﬁnite simple groups, and the graph minor
theorem mentioned in section ..
Te deepest theorems of mathematics are understood by so few peo-
ple that there is probably no hope of saying precisely what makes them
deep. A more realistic goal is to look at the “relative depth” of some more
approachable theorems. Under what conditions might we say that Teo-
rem A is “deeper than” Teorem B?

A BIGGER PICTURE
■

One way, which should suggest itself to any reader of this book, is to
ﬁnd a natural axiom system that proves Teorem B but not Teorem A.
With this criterion, the axiom systems considered in this book allow us
to rank many theorems by relative depth. For example:
• Te parallel axiom is deeper than the theorems proved by Euclid’s
other axioms.
• AC is deeper than the theorems proved by ZF.
• Te extreme value theorem is deeper than the intermediate value
theorem.
• Te sequential Bolzano-Weierstrass theorem is deeper than the se-
quential Heine-Borel theorem.
• Te Riemann mapping theorem is deeper than the Jordan curve
theorem.
In all of these examples, we ﬁnd theorems that are not only harder to
prove, but also fundamental, in the sense of underlying many other the-
orems. Tus reverse mathematics has exposed a precise and new mathe-
matical concept, which might well be an indicator of “depth.”
However, we must admit that reverse mathematics has so far revealed
signs of “depth” only in theorems about inﬁnite objects, such as real num-
bers or subsets of N. Tere has been little progress on theorems about the
natural numbers. Te only examples where we might say Teorem A is
“deeper than” Teorem B is where Teorem B is provable in PA and Te-
orem A is not. Few such examples are known (see section .), and they
do not include theorems that number theorists really think are deep, such
as the prime number theorem.
As mentioned in section ., there was once thought to be a distinc-
tion between “elementary” methods in number theory and methods that
essentially involve analysis. Tat idea evaporated when an elementary
proof of the prime number theorem was found in , and in section .
we have seen how reverse mathematics conﬁrms that analysis is inessen-
tial in number theory—at least the analysis available in ACA.
Still, one feels there ought to be a distinction between “elementary”
and “analytic” methods. Finding it remains a challenge for the reverse
mathematics of the future.

Bibliography
■■■■■
Abbott, S. (). Understanding Analysis (Second ed.). Undergraduate Texts in Mathe-
matics. Springer, New York.
Abhyankar, S. S. (). Lectures on Algebra. Vol. I. World Scientiﬁc Publishing Co. Pte.
Ltd., Hackensack, NJ.
Beltrami, E. (). Teoria fondamentale degli spazii di curvatura costante. Annali di
Matematica Pura ed Applicata, ser. , , –. In his Opere Matematiche : –
, English translation in Stillwell ().
Blass, A. (). Existence of bases implies the axiom of choice. In Axiomatic Set Teory
(Boulder, Colorado, ), Volume of Contemporary Mathematics, pp. –. Amer-
ican Mathematical Society, Providence, RI.
Bolyai, F. ().
Tentamen juventutem studiosam in elementa matheseos purae, ele-
mentaris ac sublimioris, methodo intuitiva, evidentiaque huic propria, introducendi.
Marosvásárhely.
Bolzano, B. (). Rein analytischer Beweis des Lehrsatzes dass zwischen je zwey Werthen,
die ein entgegengesetzes Resultat gewähren, wenigstens eine reelle Wurzel der Gleichung
liege. Ostwald’s Klassiker, vol. . Engelmann, Leipzig, . English translation in
Russ (), –.
Borel, É. (). Leçons sur la théorie des fonctions. Paris: Gauthier-Villars.
Bradley, R. E. and C. E. Sandifer (). Cauchy’s Cours d’analyse. Sources and Studies
in the History of Mathematics and Physical Sciences. Springer, New York.
Brouwer, L. E. J. (a). Beweis der Invarianz des n-dimensionalen Gebiets. Mathema-
tische Annalen , –.
Brouwer, L. E. J. (b). Über Abbildungen von Mannigfaltigkeiten. Mathematische
Annalen , –.
Cantor, G. ().
Über eine Eigenschaf des Inbegriﬀes aller reellen algebraischen
Zahlen. Journal für reine und angewandte Mathematik , –. In his Gesam-
melte Abhandlungen, –. English translation by W. Ewald in Ewald (), Vol.
II, –.
Cantor, G. (). Über unendliche, lineare Punktmannigfaltigkeiten. Mathematische
Annalen , –. English translation by William Ewald in Ewald (), volume
II, pp. –.
Cantor, G. (). Über eine elementare Frage der Mannigfaltigkeitslehre. Jahresbericht
deutschen Mathematiker-Vereinigung , –.
English translation by W. Ewald in
Ewald (), Vol. II, –.
Cantor, G. (). Beiträge zur Begründung der transﬁniten Mengenlehre. Mathematis-
che Annalen (), –. English translation by P. E. B. Jourdain in Cantor ().
Cantor, G. (). Contributions to the founding of the theory of transﬁnite numbers. Dover

BIBLIOGRAPHY
■

Publications, Inc., New York, N. Y. Translated, and provided with an introduction and
notes, by Philip E. B. Jourdain.
Cauchy, A.-L. (). Cours d’Analyse. Chez Debure Frères. Annotated English translation
in Bradley and Sandifer ().
Church, A. (a). A note on the Entscheidungsproblem. Journal of Symbolic Logic ,
–.
Church, A. (b). An unsolvable problem in elementary number theory. American
Journal of Mathematics , –.
Cohen, P. (). Te independence of the continuum hypothesis I, II. Proceedings of the
National Academy of Sciences , , –, –.
Cohen, P. J. (). Set Theory and the Continuum Hypothesis. W. A. Benjamin, Inc., New
York-Amsterdam.
Davis, M. (Ed.) (). Te Undecidable. Mineola, NY: Dover Publications Inc. Cor-
rected reprint of the original [Raven Press, Hewlett, NY].
Dawson, Jr., J. W. (). Why Prove it Again? Springer, Cham. Alternative proofs in
mathematical practice. With the assistance of Bruce S. Babcock and with a chapter by
Steven H. Weintraub.
Dedekind, R. (). Stetigkeit und irrationale Zahlen. Braunschweig: Vieweg und Sohn.
English translation in: Essays on the Teory of Numbers, Dover, New York, .
Descartes, R. (). Te geometry of René Descartes. (With a facsimile of the ﬁrst edition,
.). New York, NY: Dover Publications Inc. Translated by David Eugene Smith and
Marcia L. Latham, .
Diestel, R. (). Graph Teory (Fourth ed.), Volume of Graduate Texts in Mathe-
matics. Springer, Heidelberg.
Ellerman, D. (). On Double-Entry Bookkeeping: The Mathematical Treatment. Ac-
counting Education (), –.
Erdős, P. (). On a new method in elementary number theory which leads to an
elementary proof of the prime number theorem. Proceedings of the National Academy
of Sciences U. S. A. , –.
Ewald, W. (). From Kant to Hilbert: A Source Book in the Foundations of Mathematics.
Vol. I, II. Te Clarendon Press, Oxford University Press, New York.
Fraenkel, A. (). Zu den Grundlagen der Cantor-Zermeloschen Mengenlehre. Math-
ematische Annalen , –.
Frege, G. (). Begriﬀschrif. English translation in van Heijenoort (), pp. –.
Friedman, H. (). Some systems of second order arithmetic and their use. In Pro-
ceedings of the International Congress of Mathematicians (Vancouver, B. C., ), Vol.
, pp. –. Canadian Mathematical Congress, Montreal, Quebec.
Friedman, H. (). Systems of second order arithmetic with restricted induction I, II.
Journal of Symbolic Logic , –.
Friedman, H., N. Robertson, and P. Seymour (). Te metamathematics of the graph
minor theorem. In Logic and Combinatorics, pp. –. American Mathematical
Society.
Friedman, H. M., S. G. Simpson, and R. L. Smith (). Countable algebra and set
existence axioms. Annals of Pure and Applied Logic (), –.
Gauss, C. F. ().
Demonstratio nova altera theorematis omnem functionem alge-
braicum rationalem integram unius variabilis in factores reales primi vel secundi
gradus resolvi posse. Commentationes societas regiae scientiarum Gottingensis recen-
tiores , –. In his Werke : –.


■
BIBLIOGRAPHY
Gödel, K. ().
Die Vollständigkeit der Axiome des logischen Funktionenkalküls.
Monatshefe für Mathematik und Physik , –.
Gödel, K. (). Über formal unentscheidbare Sätze der Principia Mathematica und
verwandter Systeme. I. Monatshefe für Mathematik und Physik , –. English
translation in van Heijenoort (), –.
Gödel, K. (). Collected Works. Vol. V. Correspondence H–Z. Te Clarendon Press,
Oxford University Press, Oxford. Edited by Solomon Feferman, John W. Dawson, Jr.,
Warren Goldfarb, Charles Parsons, and Wilfried Sieg, Paperback edition of the 
original.
Grassmann, H. (). Die lineale Ausdehnungslehre. Otto Wiegand, Leipzig. English
translation in Grassmann (), pp. –.
Grassmann, H. (). Geometrische Analyse geknüpf an die von Leibniz gefundene Ge-
ometrische Charakteristik. Weidmann’sche Buchhandlung, Leipzig. English transla-
tion in Grassmann (), pp. –.
Grassmann, H. (). Lehrbuch der Arithmetic. Berlin: Enslin.
Grassmann, H. (). A New Branch of Mathematics. Open Court Publishing Co.,
Chicago, IL. Te Ausdehnungslehre of and other works, Translated from the Ger-
man and with a note by Lloyd C. Kannenberg. With a foreword by Albert C. Lewis.
Hamel, G. (). Eine Basis aller Zahlen und die unstetigen Lösungen der Funktional-
gleichung f(x + y) = f(x) + f(y). Mathematische Annalen , –.
Harmilton, W. R. (). Teory of conjugate functions, or algebraic couples. Commu-
nicated to the Royal Irish Academy, June . In his Mathematical Papers –.
Hardy, G. H. and H. Heilbron (). Edmund Landau. Journal of the London Mathe-
matical Society .
Hausdorﬀ, F. (). Grundzüge der Mengenlehre. Veit and Comp.
Heath, T. L. (). Te Thirteen Books of Euclid’s Elements translated from the text of
Heiberg. Vol. I: Introduction and Books I, II. Vol. II: Books III–IX. Vol. III: Books X–
XIII and Appendix. New York: Dover Publications Inc. Translated with introduction
and commentary by Tomas L. Heath, nd ed.
Hilbert, D. (). Grundlagen der Geometrie. Leipzig: Teubner. English translation:
Foundations of Geometry. Open Court, Chicago, .
Hilbert, D. (). Mathematical problems. Bulletin of the American Mathematical Soci-
ety , –. Translated by Frances Winston Newson.
Hirschfeldt, D. R. (). Slicing the Truth, Volume of Lecture Notes Series. Institute for
Mathematical Sciences. National University of Singapore. World Scientiﬁc Publishing
Co. Pte. Ltd., Hackensack, NJ. On the computable and reverse mathematics of combi-
natorial principles. Edited and with a foreword by Chitat Chong, Qi Feng, Teodore
A. Slaman, W. Hugh Woodin, and Yue Yang.
Horihata, Y. and K. Yokoyama (). Nonstandard second-order arithmetic and Rie-
mann’s mapping theorem. Annals of Pure and Applied Logic (), –.
Kőnig, D. (). Über eine Schlussweise aus dem Endlichen ins Unendliche. Acta Lit-
terarum ac Scientiarum Regiae Universitatis Hungaricae Francisco-Josephinae, sectio
scientiarum mathematicarum , –.
Kruskal, J. B. (). Well-quasi-ordering, the Tree Theorem, and Vazsonyi’s conjecture.
Transactions of the American Mathematical Society , –.
Lambert, J. H. (). Die Theorie der Parallellinien. Magazin für reine und angewandte
Mathematik (), –, –.
Matijasevič, Y. V. (). Diophantine representation of recursively enumerable predi-

BIBLIOGRAPHY
■

cates. In Actes du Congrès International des Mathématiciens (Nice, ), Tome , pp.
–. Gauthier-Villars, Paris.
Minkowski, H. ().
Raum und Zeit.
Jahresbericht der Deutschen Mathematiker-
Vereinigung , –.
Pacioli, L. (). Ancient Double-Entry Bookkeeping. Lucas Pacioli’s Treatise. John B.
Geijsbeek, Denver, CO, . Accounting section of Pacioli’s Summa de Arithmetica
of , translated by John B. Geijsbeek.
Paris, J. and L. Harrington (). A mathematical incompleteness in Peano arithmetic.
In Handbook of Mathematical Logic, ed. J. Barwise, North-Holland, Amsterdam.
Peano, G. (). Calcolo Geometrico secondo l’Ausdehnungslehre di H. Grassmann, prece-
duto dalle operazioni della logica deduttiva. Bocca, Turin. English translation in Peano
().
Peano, G. (). Arithmetices principia. Torino: Bocca.
Peano, G. (). Geometric Calculus. Birkhäuser Boston, Inc., Boston, MA. According
to the Ausdehnungslehre of H. Grassmann, Translated from the Italian by Lloyd C.
Kannenberg.
Poincaré, H. (). Du rôle de l’intuition et de la logique en mathématiques. Compte
Rendu du Deuxième Congrès International des Mathématiciens, Paris.
Pólya, G. and R. Fueter (). Rationale Abzählung der Gitterpunkte. Vierteljahrschrif
der Naturforschende Gesellschaf in Zürich .
Post, E. L. (). Finite combinatory processes – formulation . Journal of Symbolic
Logic , –.
Post, E. L. (). Absolutely unsolvable problems and relatively undecidable propositions
– an account of an anticipation. In Davis (), pp. –.
Post, E. L. (). Recursively enumerable sets of positive integers and their decision
problems. Bulletin of the American Mathematical Society , –.
Post, E. L. (). Recursive unsolvability of a problem of Thue. Journal of Symbolic
Logic , –.
Ramsey, F. P. (). On a problem of formal logic. Proceedings of the London Mathemat-
ical Society , –.
Robertson, N. and P. D. Seymour (). Graph minors. XX. Wagner’s conjecture. Jour-
nal of Combinatorial Teory Series B (), –.
Rogers, Jr., H. ().
Teory of Recursive Functions and Eﬀective Computability.
McGraw-Hill Book Co., New York-Toronto, Ont.-London.
Russ, S. (). Te Mathematical Works of Bernard Bolzano. Oxford: Oxford University
Press.
Saccheri, G. (). Euclid Vindicated from Every Blemish. Classic Texts in the Sciences.
Birkhäuser/Springer, Cham, . Dual Latin-English text, edited and annotated by
Vincenzo De Risi. Translated from the Italian by G. B. Halsted and L. Allegri.
Sakamoto, N. and K. Yokoyama (). Te Jordan curve theorem and the Schönﬂies
theorem in weak second-order arithmetic. Archive for Mathematical Logic (-),
–.
Selberg, A. (). An elementary proof of the prime-number theorem. Annals of Math-
ematics. Second Series , –.
Shioji, N. and K. Tanaka (). Fixed point theory in weak second-order arithmetic.
Annals of Pure and Applied Logic (), –.
Sieg, W. (). Hilbert’s Programs and Beyond. Oxford University Press, Oxford.
Simpson, S. G. (). Subsystems of second order arithmetic (Second ed.). Perspectives


■
BIBLIOGRAPHY
in Logic. Cambridge University Press, Cambridge; Association for Symbolic Logic,
Poughkeepsie, NY.
Smith, H. J. S. (). On the integration of discontinuous functions. Proceedings of the
London Mathematical Society , –.
Smoryński, C. (). Logical number theory. I. Universitext. Springer-Verlag, Berlin.
Smullyan, R. M. (). Teory of Formal Systems. Annals of Mathematics Studies, No.
. Princeton, NJ: Princeton University Press.
Sperner, E. (). Neuer Beweis für die Invarianz der Dimensionszahl und des Gebietes.
Abhandlungen aus dem mathematischen Seminar der Universität Hamburg , –.
Stillwell, J. (). Sources of Hyperbolic Geometry. Providence, RI: American Mathe-
matical Society.
Stillwell, J. (). Roads to Inﬁnity. Natick, MA: A K Peters Ltd.
Stillwell, J. (). Te Real Numbers. Undergraduate Texts in Mathematics. Springer,
Cham. An introduction to set theory and analysis.
Tue, A. ().
Probleme über Veränderungen von Zeichenreihen nach gegebenen
Regeln. J. Dybvad, Kristiania, pages.
Turing, A. ().
On computable numbers, with an application to the Entschei-
dungsproblem. Proceedings of the London Mathematical Society , –.
Turing, A. M. (). Systems of Logic Based on Ordinals. Proceedings of the London
Mathematical Society (), –.
Turing, A. M. (). Te word problem in semi-groups with cancellation. Annals of
Mathematics () , –.
van Dalen, D. (). L. E. J. Brouwer—Topologist, Intuitionist, Philosopher. Springer,
London.
van Heijenoort, J. (). From Frege to Gödel. A Source Book in Mathematical Logic,
–. Cambridge, MA: Harvard University Press.
von Neumann, J. (). Letter to Gödel, November , in Gödel (), p. .
Wang, H. (). Some facts about Kurt Gödel. Journal of Symbolic Logic (), –.
Weyl, H. (). Das Kontinuum. Verlag von Veit and Comp., Leipzig. English translation
Weyl ().
Weyl, H. (). Te Continuum. Dover Publications, Inc., New York. Translated from
the German by Stephen Pollard and Tomas Bole, with a foreword by John Archibald
Wheeler and an introduction by Pollard. Corrected reprint of the translation
[Tomas Jeﬀerson Univ. Press, Kirksville, MO].
Whitehead, A. N. and B. Russell (). Principia Mathematica. Cambridge: Cambridge
University Press. vols. , , .
Zermelo, E. (). Beweis dass jede Menge wohlgeordnet werden kann. Mathematische
Annalen , –. English translation in van Heijenoort (), pp. –.
Zermelo, E. (). Untersuchungen über die Grundlagen der Mengenlehre I. Mathema-
tische Annalen , –. English translation in van Heijenoort (), pp. –.

Index
■■■■■
AC. See axiom of choice
ACA, 
proves inﬁnite Ramsey, 
ACA, xii, 
and maximal ideals, 
and Ramsey theory, 
and vector space basis, 
axioms, 
contains basic analysis, 
deﬁnition of, 
does not prove inﬁnite Ramsey, 
foreshadowed by Weyl, 
has arithmetic strength of PA, , 
has set variable induction, , 
has Σ
comprehension, 
minimal model, 
proves completeness properties, 
proves Con(WKL), 
proves Kőnig inﬁnity lemma, 
proves Riemann mapping theorem, 
sweet spot, 
ADS. See ascending/descending sequence
principle
al-Haytham, Hasan ibn, 
al-Tusi, Sharaf al-Din, 
algebra
countable, 
from Hilbert axioms, 
from Peano axioms, 
from projective geometry, 
fundamental theorem, 
of limits, 
of numbers, 
reverse mathematics of, 
algebraic closure, 
of countable ﬁeld, 
algorithm, , , 
general characteristics, 
stepwise computation, 
universal, 
analysis, xi
and computability, 
and computation, 
and Peano arithmetic, 
and trees, 
and weak Kőnig lemma, 
arithmetization of, xii, 
classical, 
computable, 
in PA language, 
in RCA, 
incompleteness, 
angle sum
and parallels, 
of Euclidean triangle, , 
of non-Euclidean triangle, 
of spherical triangle, 
Archimedean axiom, 
arithmetic, xii
computational content, 
elementary school, 
higher, 
in elementary formal systems, 
language of, 
Peano, 
arithmetical comprehension, , , , 
implies Kőnig inﬁnity lemma, 
implies sequential Bolzano-Weierstrass,

implies sequential least upper bound, 
arithmetical transﬁnite recursion, 
arithmetically deﬁnable sets, , , 
and the Turing jump, 
arithmetization, xii, 
as foundation of mathematics, 
classical, 
limits of, 
of analysis, xii, , , 
of computable analysis, 
of computable enumeration, 
of computation, xii, , , , 
of continuous functions, 


■
INDEX
arithmetization (continued)
of elementary formal systems, 
of geometry, 
of logic, 
of real numbers, 
of recursion, , 
of trees, , 
ASA, , 
ascending/descending sequence principle,

ATR, 
axiom
Archimedean, , 
arithmetical comprehension, , , 
ASA, 
choice, xi, 
circle intersection, 
completeness, , 
parallel, xi, 
recursive comprehension, , 
right, xii, 
SAS, , 
set existence, xii, , 
Σ
induction, 
weak Kőnig lemma, 
axiom of choice, xi, 
and measure theory, 
and strong Bolzano-Weierstrass, 
equivalents, , 
in algebra, 
introduced by Zermelo, 
right axiom for well-ordering, 
axioms
ACA, 
congruence, 
ﬁeld, 
for analysis, 
based on PA, 
Hilbert, 
incidence, 
of formal system, 
order, 
Peano, xii, 
RCA, 
real vector space, 
ring, 
WKL, 
base theory
for analysis, , , , 
for Euclidean geometry, , , 
for Hilbert’s geometry, 
for non-Euclidean geometry, 
for set theory, , 
basis, 
Hamel, 
of countable vector space over Q, 
of ﬁnite-dimensional vector space, 
of general vector space, 
Beltrami, Eugenio, , 
big ﬁve, –, 
binary tree, 
and Cantor set, , 
complete, , 
of interpretations, 
vertex labeling, , 
with no computable inﬁnite path, 
Blass, Andreas, 
Bolyai, Farkas, 
Bolyai, János, 
Bolzano, Bernard, 
and intermediate value theorem, 
assumed least upper bounds, 
Bolzano-Weierstrass theorem, , , 
strong formulation, 
and Kőnig inﬁnity lemma, 
classical proof, 
sequential, , 
implies Cauchy criterion, 
Boolean combination, , , 
by EFS, 
Boolean formula, 
Boolean operation, , , , 
Borel, Émile, 
Brouwer, L. E. J., 
ﬁxed point theorem, , 
provable in WKL, 
invariance of dimension, , 
invariance of domain, 
rejected classical logic, 
rejected his own theorem, 
C, 
is a ﬁeld, 
calculus, xi
Cantor set, , , 
and ternary expansions, 
as binary tree, 
complementary intervals, 
covering intervals, 
due to H. J. S. Smith, 
Cantor, Georg
and actual inﬁnity, 
assumed well-ordering, 
diagonal argument, 
pairing function, 

INDEX
■

set, , 
theorem on subsets, 
uncountability proof, , 
is constructive, 
Cantor-Bendixson theorem, 
Cauchy, Augustin-Louis
continuity concept, 
convergence criterion, xii, , 
implies monotone convergence, 
Chinese remainder theorem, 
Church, Alonzo, 
thesis, , 
computably enumerable is Σ
, 
closed interval, 
Cohen, Paul, 
completeness
of logic, , 
of R, , , 
via Cauchy criterion, 
via least upper bounds, , 
via nested intervals, , 
completeness axiom, 
comprehension
arithmetical, , , , 
Π
, 
recursive, , , 
Σ
, , 
computability, xii, 
and analysis, , 
and Church’s thesis, 
and deﬁnability, 
and incompleteness, 
and RCA, 
origins in logic, , 
Post formalization, 
Smullyan formalization, 
theory, 
Turing formalization, 
computable
analysis, 
in PA language, 
function, , 
is both Σ
and Π
, 
is total, 
increasing sequence, 
inﬁnite path, , 
list, 
partial function, , 
enumeration, 
property, 
separation, 
sequence, 
with noncomputable limit, , 
set, xii, , 
tree, 
with no computable inﬁnite path, 
computable set, xii, 
computable characteristic function, 
self and complement are computably
enumerable, , , , 
solvable membership problem, 
computably enumerable set, , , , 
can be noncomputable, , 
coincides with Σ
set, , , 
domain of computable partial function,

range of computable function, 
universal, 
computably inseparable sets, 
computation, xii, 
and analysis, 
arithmetization of, xii, , 
by EFS, , 
by Turing machine, 
by word replacement, 
formalization of, 
relative, 
Turing concept, 
Con(PA), , , 
and the consistency of ACA, 
Con(WKL), , 
concatenation, , 
and EFS operations, 
connective, , 
constructive mathematics, , 
adapted by RCA, 
and computability, 
continuity, , 
and intermediate values, 
and Riemann integral, 
at a point, 
Hausdorﬀcharacterization, 
in RCA, 
of polynomial function, 
on a set, 
sequential, , 
uniform, , 
fails on open intervals, 
implies Riemann integrability, 
modulus of, 
convergence, 
Cauchy criterion, 
of sequence, 
Dedekind, Richard, xi, 
book on irrational numbers, 


■
INDEX
Dedekind, Richard (continued)
cuts, , , 
least upper bound principle, 
degree of unsolvability, 
low, 
depth, xi, 
and elementary methods, 
and provability, 
Descartes, René, 
Géométrie, 
diagonal argument, 
in RCA, 
on computably enumerable sets, 
double entry bookkeeping, 
dyadic numeral, 
encoding, 
EFS. See elementary formal system
EFS-generated set, 
existential quantiﬁcation of, 
is Σ
, 
of n-tuples, 
projection of, 
EFS-representable relation, 
Einstein, Albert, 
elementary formal system, 
and Turing machines, , 
arithmetic in, 
arithmetization of, 
axioms, 
examples, 
language, 
rules of inference, 
theorems, 
universal, 
encoding, 
by dyadic numerals, 
continuous function, 
by a real, 
by rational intervals, 
in RCA, 
ﬁnite sequences, 
by concatenation, 
by Gödel β-function, 
Entscheidungsproblem, 
Euclid, xi
Elements, , , 
foundation of mathematics, 
overlooked axioms, 
parallel axiom, , 
theory of irrationals, , 
Euclidean geometry, 
base theory, 
unique model, 
vector base theory, 
via vector geometry, 
Euclidean plane, 
extreme value theorem, xii, , , 
fails on open intervals, 
implies weak Kőnig lemma, 
fallen leaf, 
Fermat, Pierre, 
ﬁeld
algebraic closure of, 
Archimedean ordered, 
axioms, 
complete Archimedean ordered, 
ordered, 
properties, , 
via induction, 
ﬁnite sequences, 
encoding, 
by concatenation, 
by Gödel β-function, 
representing proofs, 
formal system, , , 
axioms, 
consistency, 
elementary, 
incompleteness, , 
rules of inference, 
unprovability of consistency, 
unsound, 
foundations of mathematics, xi, 
in arithmetization, 
in Euclid, 
Fraenkel, Abraham, 
Frege, Gottlob, 
Friedman, Harvey, xii, xiii, 
introduced Σ
induction, 
on PA and ACA, 
on right axioms, 
on theorems of ACA, 
FTA. See fundamental theorem of algebra
Fueter, Rudolph, 
function, 
arithmetically representable, 
as set of ordered pairs, 
characteristic, 
composition, 
computable, , 
is both Σ
and Π
, 
continuous, 
encoded by rational intervals, 
encoded by real, 

INDEX
■

encoded by subset of N, 
given by values at rationals, 
in RCA, 
deﬁned by recursion, 
pairing, 
partial, 
representable in PA, 
successor, 
fundamental theorem of algebra, 
proof in RCA, 
provable in RCA, 
gaps, 
Gauss proof of FTA, , 
geometry, xi
aﬃne, 
algebraic, 
Euclidean, , 
linear, 
non-Euclidean, , 
projective, 
spherical, 
three-dimensional Euclidean, 
vector, 
Gödel, Kurt, 
β-function, , 
completeness, 
derailed the Hilbert program, 
ﬁrst incompleteness, , , 
second incompleteness, , , , 
graph minor, 
Grassmann, Hermann, 
based arithmetic on induction, 
proofs of algebraic properties, 
vector space geometry, 
great circle, 
greatest lower bound, 
halting problem, 
Hamel, Georg, 
Hamilton, William Rowan, 
Harriot, Tomas, 
Hausdorﬀ, Felix, 
characterization of continuity, 
Heine-Borel theorem, xii, , , 
applied to trees, 
fails on open intervals, 
implies weak Kőnig lemma, 
proof, 
sequential, , , 
Hilbert, David, xi
axioms for geometry, 
algebraic content, 
Grundlagen der Geometrie, 
on mathematical existence, 
program, , 
second problem, 
tenth problem, 
incompleteness, 
Gödel’s ﬁrst, , 
Gödel’s second, 
in analysis, 
of PA, , 
of RCA, 
omega, 
Post form, 
induction, 
axiom schema, 
deﬁnition by, , 
in PA, , 
proofs by, , 
set variable, , 
Σ
, , 
inﬁnite
bisection, , , 
as tree construction, 
continued fraction, 
decimal, , 
path
computable, , 
in tree, , , 
pigeonhole principle, 
process, 
Ramsey theorem, 
sum, 
inﬁnity
actual, 
line at, 
potential, 
inner product, 
and Pythagorean theorem, 
Minkowski, 
positive deﬁnite, 
intermediate value theorem, xii, , , 
and completeness of R, 
attempted proof by Bolzano, 
classical proof, 
implies FTA, 
proof in RCA, 
provable in RCA, 
irrationality, 
and inﬁnite sets, 
in Euclid, 
of
º
, 
isosceles triangle theorem, 


■
INDEX
Jordan curve theorem, , 
implies weak Kőnig lemma, 
provable in WKL, 
Kőnig, Dénes, 
Kőnig inﬁnity lemma, , 
and completeness of R, 
implies range existence, 
strength, 
strong form, 
weak form, 
weak weak form, 
Kronecker, Leopold, 
advocated constructive mathematics, 
rejected FTA, 
Kruskal’s theorem, 
not provable in ATR, 
Lambert, Joachim Heinrich, 
Landau, Edmund, 
law of excluded middle, 
least upper bound, 
as limit, 
noncomputable, 
least upper bound principle, 
assumed by Bolzano, 
not provable in RCA, 
proved by Dedekind, 
sequential, , 
implies monotone convergence, 
Legendre, Adrien-Marie, 
limit, , 
algebraic properties, 
noncomputable, 
of computable sequence, 
of function, 
of nested intervals, 
of sequence, , 
point
of Q, 
of sequence, 
of set, 
line
at inﬁnity, 
in Euclid Book V, 
low degree, , 
and Turing jump, 
model of WKL, 
paths in trees, 
lower Dedekind cut, , , 
mathematical physics, xi
Matijasevič, Yuri, 
unsolvability of Hilbert’s tenth, 
maximal ideal, 
of countable commutative ring, 
measure theory, 
Minkowski, Hermann, 
model, , 
hyperboloid, 
of ACA, 
of arithmetic without induction, 
of Euclidean geometry, 
of non-Euclidean geometry, 
of RCA, , 
of spherical geometry, 
of WKL, , 
of ZF, 
showing unprovability, 
modus ponens, , 
monotone convergence theorem, , 
equivalent to arithmetical comprehen-
sion, 
equivalent to Bolzano-Weierstrass, 
implies arithmetical comprehension, 
implies range existence, 
unprovable in computable analysis, 
N, 
natural number, xii, , 
neighborhood, 
non-Euclidean geometry, , 
area, , 
disk model, 
distance, 
falsiﬁes parallel axiom, 
hyperboloid model, 
in vector space, 
satisﬁes basic Euclidean axioms, 
triangle, 
number
complex, 
integer, 
irrational, 
natural, xii, , 
negative, 
rational, xii, , 
real, xi, , 
addition, 
as lower Dedekind cut, 
multiplication, 
ordering, 
positive, 
numeral
base , 
base , 

INDEX
■

dyadic, 
in PA, 
unary, 
open interval, , 
open set, 
ordered pair, , , 
ordering, 
of Q, 
of R, , 
PA. See Peano arithmetic
Pacioli, Luca, 
pairing function, 
and k-tupling functions, 
in PA, 
Pappus theorem, 
parallel axiom, xi, 
concerns inﬁnity, 
equivalent to Pythagorean theorem, 
equivalents, , 
falsiﬁed by non-Euclidean geometry, 
in Euclid, 
right axiom for Euclid, 
Paris-Harrington theorem, , 
not provable in PA, 
Peano arithmetic, 
and analysis, 
as basis for analysis, 
contained in ACA, 
deﬁnable properties, 
deﬁnable relations, 
in ACA, 
is incomplete, 
language, 
for analysis, 
pairing function, , 
projection functions, 
Peano axioms, xii, 
in foundations of mathematics, 
Peano, Giuseppe, 
axioms for arithmetic, 
axioms for vector space, 
Π
, 
Π
comprehension, 
Π
-CA, 
Poincaré, Henri, xi
on arithmetization of analysis, 
Polthier, Konrad, 
Pólya, Georg, 
Post, Emil, 
analysed Principia Mathematica, 
and the word problem, 
co-discovered Turing machines, 
computably enumerable sets, , 
discovered incompleteness, , , 
formalized computability, 
normal systems, 
translation of Turing machines, 
predicate logic, 
completeness, 
and weak Kőnig lemma, 
falsiﬁcation rules, 
language, 
rules of inference, 
validity problem, 
prenex form, , , 
prime number theorem, , 
elementary proofs, 
Principia Mathematica, 
problem, 
Entscheidungs, 
halting, , 
Hilbert’s tenth, 
membership, , 
self-examination, 
validity, 
projection
function, , , 
of EFS-generated set, 
stereographic, 
projective geometry, 
Pythagorean theorem, xi, 
arithmetized, 
equivalent to parallel axiom, 
proof by areas, 
statement, 
via inner product, 
Q, 
completion of, 
is a ﬁeld, 
ordering, 
quantiﬁer, 
alternation, 
bounded, 
by EFS, 
R, , , 
algebraic characterization, 
an actual inﬁnity, 
and foundations, 
completeness, 
Cauchy criterion, 
least upper bound, 
nested interval, , 


■
INDEX
R (continued)
completeness properties, 
geometric characterization, 
has no gaps, , 
is a ﬁeld, 
is uncountable, 
least upper bound property, 
ordering, 
well-ordering of, 
Ramsey theorem, 
baby, 
ﬁnite, 
for triples, 
equivalent to arithmetical compre-
hension, 
inﬁnite, 
for pairs, 
not provable in ACA, , 
provable in ACA, 
range existence, 
implies Σ
comprehension, 
not provable in RCA, , 
rational number, xii
RCA, xii, , 
adapts constructive mathematics, 
and algebraic closure, 
and arithmetic, 
and computability, 
and constructive mathematics, 
as computable analysis, 
axioms, 
base theory for analysis, , , , 
cannot prove range existence, , 
compares theorem strengths, 
deﬁnition of, 
encoding of computable sequences, 
encoding of continuous functions, 
equivalence proofs, , 
ﬁnds equivalents of
arithmetical comprehension, 
weak Kőnig lemma, 
has Σ
induction, , 
incompleteness, 
lacks least upper bound principle, 
minimal model, , 
non-theorems, , 
proves FTA, , 
proves intermediate value theorem, ,

proves uncountability of R, 
real number concept, , 
realizes Σ
condition by function, 
reason for name, 
real number, xi, , 
as lower Dedekind cut, 
in RCA, 
ordering, 
real vector space, 
axioms, , 
recursion
arithmetization of, , 
deﬁnition by, , 
recursive
deﬁnition, , , 
arithmetized, 
usage of word, , , 
recursive comprehension, , , , 
reverse mathematics, xi, , , , 
and constructiveness, 
big ﬁve, –, 
of algebra, 
of analysis, 
of number theory, , 
seeks equivalents of axioms, 
Riemann integral, , 
and weak Kőnig lemma, 
Riemann mapping theorem, 
implies arithmetical comprehension, 
ring
axioms, 
properties, , 
via induction, 
Robertson-Seymour theorem, 
not provable in Π
-CA, 
rule of inference, 
Saccheri, Girolamo, 
SAS, , 
Schönﬂies theorem, 
self-reference, , 
sequence, 
as function on N, , 
computable, 
convergent, 
in RCA, 
limit of, , 
noncomputable, 
of nested intervals, , 
of real numbers, 
with noncomputable least upper bound,

with noncomputable limit, 
set
arithmetically deﬁnable, , 
Cantor, 

INDEX
■

computable, xii, , 
computably enumerable, , , 
containment orders R, 
EFS-generated, 
encoding, 
inﬁnite, 
as mathematical object, , 
limit point, 
noncomputable, 
of low degree, 
of rational numbers, 
of real numbers, 
open, 
uncountable, 
well-ordered, 
set existence axiom, xii, , , , , 
set theory, xi, 
base theory ZF, , , 
Σ
, , 
Σ
, , 
as range of function in Σ
and Π
, 
by existential quantiﬁcation of Σ
, 
comprehension, 
implies arithmetical comprehension,

implies range existence, 
induction, , 
is computably enumerable, , 
is EFS-generated, , 
property, 
Simpson, Stephen, 
Sir Walter Raleigh, 
Skolem form, , 
Skolem function, 
Skolem term, 
Smullyan, Raymond, , 
Sperner’s lemma, , 
spherical geometry, 
planar model, 
standard model, 
triangle, 
area, 
º
, 
stereographic projection, 
strength, xii
of ACAin arithmetic, 
of analysis theorems, 
of axiom, xii
of parallel axiom, 
of RCA, WKL, ACA, 
of set existence axiom, 
relative to RCA, , 
theorem
Bolzano-Weierstrass, , 
Brouwer ﬁxed point, 
Cantor-Bendixson, 
extreme value, xii, , 
Harriot, 
Heine-Borel, xii, , 
intermediate value, xii, 
isosceles triangle, 
Jordan curve, 
Kruskal, 
monotone convergence, , 
Pappus, 
Paris-Harrington, 
prime number, 
Pythagorean, xi, , 
Ramsey, 
Riemann mapping, 
Robertson-Seymour, 
Schönﬂies, 
uniform continuity, 
well-ordering, , 
tree
arithmetization, , 
as set of binary strings, 
as set of ﬁnite sequences, 
binary, , 
complete binary, 
computable, 
with no computable inﬁnite path, 
concept in analysis, , 
embedding, 
fallen leaf, 
ﬁnitely branching, , 
for inﬁnite bisection, 
inﬁnite path in, , 
vertex labeling, 
truth tables, 
Turing, Alan, , 
analysis of computation, 
convinced Gödel, 
computable numbers, 
degree, 
jump, 
machine, , 
conﬁguration, 
simulated by EFS, 
universal, 
reducibility, 
unsolvability
of Entscheidungsproblem, 
of halting problem, 


■
INDEX
uncountability of R, 
leads to incompleteness, 
provable in RCA, 
uniform continuity
classical proof, 
equivalent to weak Kőnig, 
implies Riemann integrability, 
modulus of, 
via sequential Heine-Borel, 
universal
algorithm, 
computably enumerable set, 
elementary formal system, 
Turing machine, 
unsolvability
degree of, , 
implies incompleteness, 
of Entscheidungsproblem, 
of halting problem, 
of Hilbert’s tenth problem, 
of membership problem, , 
of self-examination problem, 
of validity problem, 
of word problem, 
vector geometry, 
vector space, 
addition, 
basis, 
equivalent to AC, 
over arbitrary ﬁeld, 
real, 
scalar multiplication, 
von Neumann, John
co-discovered second incompleteness,

prompted arithmetization, 
Wallis, John, 
weak Kőnig lemma, , 
and analysis, , 
and binary trees, , 
and logic completeness, 
and predicate logic, 
and Riemann integrability, 
deﬁnes WKL, , 
equivalent to uniform continuity, 
implies extreme value theorem, 
implies sequential Heine-Borel, 
in logic, 
really is weaker, 
well-ordering, , 
countable, 
of R, 
of Z, 
theorem, , 
Weyl, Hermann, 
WKL, xii, , 
and algebraic closure, 
and weak Kőnig lemma, 
deﬁnition of, 
has Σ
induction, 
model in ACA, 
modeled by low sets, , 
theorems, 
WWKL, 
Z, 
Zermelo, Ernst, 
axioms for set theory, 
introduced AC, 
ZF, , 
base theory for set theory, 
Zorn’s lemma, 

