Designing Approximately Optimal Search on
Matching Platforms
Nicole Immorlica
Microsoft Research, New York, NY, nicimm@gmail.com
Brendan Lucier
Microsoft Research, Cambridge, MA, brlucier@microsoft.com
Vahideh Manshadi
Yale School of Management, New Haven, CT, vahideh.manshadi@yale.edu
Alexander Wei
UC Berkeley, Berkeley, CA, awei@berkeley.edu
We study the design of a decentralized two-sided matching market in which agents’ search is guided by
the platform. There are ﬁnitely many agent types, each with (potentially random) preferences drawn from
known type-speciﬁc distributions. Equipped with knowledge of these distributions, the platform guides the
search process by determining the meeting rate between each pair of types from the two sides. Focusing on
symmetric pairwise preferences in a continuum model, we ﬁrst characterize the unique stationary equilibrium
that arises given a feasible set of meeting rates. We then introduce the platform’s optimal directed search
problem, which involves optimizing meeting rates to maximize equilibrium social welfare. We ﬁrst show
that incentive issues arising from congestion and cannibalization make the design problem fairly intricate.
Nonetheless, we develop an eﬃciently computable search design whose corresponding equilibrium achieves at
least 1/4 the social welfare of the optimal design. In fact, our construction always recovers at least 1/4 the
ﬁrst-best social welfare, where agents’ incentives are disregarded. Our directed search design is simple and
easy-to-implement, as its corresponding bipartite graph consists of disjoint stars. Furthermore, our design
implies the platform can substantially limit choice and yet induce an equilibrium with an approximately
optimal welfare. Finally, we show that approximation is likely the best we can hope for by establishing that
the problem of designing optimal directed search is NP-hard to even approximate beyond a certain constant
factor.
Key words : directed search, matching platforms, market design, search friction, sharing economy
1.
Introduction
Matching platforms have become prominent facilitators of social and economic connections in
recent years: Thirty percent of U.S. adults have used dating platforms to look for a partner (Pew
Research Center 2020); and 35% of U.S. workers have engaged in some form of freelance labor in
the past year, in part thanks to the growth of online marketplaces for freelance work (Ozimek 2019).
Platforms, such as e-Harmony, try to improve search via match recommendations that are based on
1
arXiv:2102.09017v2  [cs.GT]  18 Aug 2021

2
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
learned user characteristics and match compatibility models. While carefully designed models have
predictive power, the compatibility of a pair often also involves an idiosyncratic component that can
only be discovered upon meeting. Furthermore, since matching requires a “coincidence of wants,”
the platform cannot compel users to match, even if preferences are known. In such environments,
how can matching platforms improve the search process while respecting users’ incentives?
Toward answering this question, we construct a dynamic matching market between two heteroge-
neous populations, each composed of ﬁnitely many types. To be concrete, we take a dating market
for heterosexual couples as our base example and thus refer to agents of the two sides as women
and men. An agent’s type captures their common features observable to the platform and partially
determines their preferences for opposite-side agents.1 In addition to the type-speciﬁc component,
each agent’s preference for any opposite-side agent has an idiosyncratic component that is unknown a
priori and is only revealed when the pair meets.2 In our model, agents have cardinal preferences, and
each woman-man pair shares a symmetric valuation that is drawn from a distribution corresponding
to their types. Symmetric preferences capture the notion of mutual compatibility in a relationship,
i.e., any relationship is either win-win or lose-lose. Upon meeting, both agents observe their shared
valuation; each then decides whether to match or to wait for another candidate. We consider a
continuum model where agents of diﬀerent types arrive at exogenous rates and leave the market
either upon meeting a satisfactory match or unmatched due to a life event which occurs at a given
rate (see Section 2.1 and Figure 1). Such an exogenous departure rate captures search friction in
the sense that an agent can only meet a limited number of candidates before leaving unmatched
due to a life event.
With knowledge of preference distributions and exogenous arrival/unmatched departure rates, the
platform guides the search process by designing meeting rates between pairs of woman-man types.
The set of meeting rates for a given type can be viewed as an assortment of opposite-side types
oﬀered to them over time. Faced with such an assortment, an agent decides on which candidates
to accept or reject in order to maximize their long-run utility. We focus on the stationary and
symmetric equilibria of the underlying dynamic game: We show for any set of “feasible” meeting
rates that respect natural physical constraints (see eqs. (2) and (3)), there exists a unique such
equilibrium in which each agent type plays a threshold strategy (see Proposition 3.1). Establishing
the uniqueness of the stationary equilibrium relies on the symmetric structure of preferences. In
fact, in our constructive proof, we show that iterating the best response map converges after ﬁnitely
1 We remark that platforms such as e-Harmony extract these features using surveys; however, we abstract away from
such details and assume that these features are directly observable.
2 Such preference structures have been studied previously in matching literature; see e.g., Ashlagi et al. (2020) and
Kanoria and Saban (2021).

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
3
many rounds (see Proposition A.4). Uniqueness of equilibrium along with its simple structure
enables us to sidestep issues of instability and equilibrium selection which may make the platform’s
design problem ill-deﬁned. As such, our structural results may be of independent interest in future
work on the design of dynamic matching markets.3
We remark that by taking such a design approach to search, our work departs from the prevailing
search environment studied in the literature (Burdett and Coles 1997, Shimer and Smith 2000,
Adachi 2003, Lauermann and N¨oldeke 2014), which assumes agents meet uniformly at random. In
the presence of suﬃcient diﬀerentiation across types, such a “hands-oﬀ” approach to search can be
arbitrarily sub-optimal: If the platform already knows that sports fans only marry sports fans and
outdoor enthusiasts only marry outdoor enthusiasts, it should not waste time by letting outdoor
enthusiasts meet sports fans. (For a quantitative example, see the horizontal market presented in
Example 3.4.) At the same time, the optimal meeting design can be far more nuanced than simply
letting preferred pairs meet each other. This is due to disparities in arrival rates combined with
strategic behavior of agents, which can lead to issues of cannibalization and congestion. To alleviate
these issues, sometimes the platform may wish to restrict the choices of a type in order to induce a
matching outcome with globally higher welfare. To illustrate these behaviors, in Section 3.3, we
present an instance of an assortative market with deterministic preferences for which the optimal
meeting design is indeed non-assortative (see the vertical market presented in Example 3.5).
The aforementioned behaviors suggest that optimal design can be fairly subtle. In fact, we
show that the platform’s optimal directed search problem (formally introduced in Section 3.2)
is APX-hard, i.e., NP-hard to approximate beyond a ﬁxed constant factor (see Theorem 4.2).
Nonetheless, we develop a solution (i.e., a set of feasible meeting rates) whose equilibrium welfare
is at least 1/4 of that of the optimal design (see Theorem 4.1). Our design relies on ﬁrst relaxing
the incentive constraints and solving the ﬁrst best problem. Through an intricate reformulation,
we show that the ﬁrst-best problem can be reduced to a polynomial-time solvable “generalized
assignment problem” that admits a forest-structured solution (see Section 4.1). We then show
that the assignment problem admits a 2-approximate solution consisting of disjoint “star-shaped”
submarkets, i.e., submarkets where one side consists entirely of a single type. Finally, we recompute
the ﬁrst-best for each submarket; utilizing its star structure, we show that the ﬁrst-best solution
can be “modiﬁed” to respect incentive constraints with at most a factor of 2 loss in welfare (see
Section 4.2, Proposition 4.8, and Figure 2). This holds because for a star-shaped market, there is
an alignment of incentives between individual agents and the platform.
3 We highlight that several previous papers considered symmetric preference structures in static settings under other
names such as correlated two-sided or acyclic markets (Abraham et al. 2008, Ackermann et al. 2011).

4
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
We complement our theoretical developments with numerical studies of markets where agents’
preferences have both a vertical and a horizontal component (see Section 5.1). Our comparative
statics with respect to the strength of each component as well as the intensity of search friction
illustrate that, compared to random meeting, our design is particularly eﬀective in markets with
strong horizontal components or high search friction (see Figures 3 and 4 in Section 5). Furthermore,
our simulation results show that the welfare outcome of our approximation algorithm can be
substantially better than its theoretical guarantee.
The simple structure of our proposed solution—a collection of disjoint star-shaped markets—
implies that, with careful search design, platforms can substantially limit choice, oﬀer very simple
assortments, and yet induce an equilibrium with approximately optimal welfare. By limiting choice,
our proposed solution also signiﬁcantly simpliﬁes the agent’s decision problem and thus reduces
the need for complex strategization. Our result is particularly intriguing since it holds without any
restrictions on the structure of the symmetric preferences.
1.1.
Related Work
Our work relates to and contributes to several streams of literature on matching markets.
Search and Matching. There is a rich literature in economics that studies decentralized matching
models with search frictions and transferable/nontransferable utility. For an informative review, we
refer the interested reader to Chade et al. (2017). By and large, this literature focuses on uniformly
random meeting among agents and studies the properties of the resulting stationary equilibria. Our
framework is partly inspired by the seminal works of Burdett and Coles (1997) and Smith (2006) in
this literature. These papers consider matching models with nontransferable utility in which agents
of each side belong to a continuum of types. In the work of Burdett and Coles (1997), an agent’s
match utility only depends on the type (pizazz) of the other agent, while Smith (2006) considers
more general pair-speciﬁc utilities (production) that may be symmetric (akin to our preference
structure). However, unlike these papers, we do not assume that match utility is deterministic
and vertically diﬀerentiated.4 This implies that, in our general model, types are incomparable and
assortative matching is not well-deﬁned.5 (See Example 3.4 for a horizontally diﬀerentiated market
within our framework.)
Another line of work in this literature studies the relationship between the stationary equilibria
of decentralized search under uniformly random meeting and corresponding sets of stable matchings.
Under a “cloning” assumption—which keeps the distribution of agents unchanged by asserting that
4 Chade (2006) extends the model of Burdett and Coles (1997) to incorporate uncertainty in preferences; however,
their model diﬀers crucially from ours in that, even upon meeting, only a noisy version of the utility is observed.
5 After our Example 3.5, which considers a vertically diﬀerentiated market, we further discuss the connection between
this example and one of the examples presented in Burdett and Coles (1997).

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
5
each time two agents match and leave, two single agents identical to them join—Adachi (2003)
shows that as search friction vanishes, the set of stationary equilibria converges to the set of stable
matchings of a corresponding centralized market. Relaxing such a cloning assumption, and thus
allowing for the distribution of agents to be endogenously determined, Lauermann and N¨oldeke
(2014) show that stationary equilibria converge to stable matchings if and only if there exists a
unique stable matching in a corresponding discrete market.
Following this literature, we also model search friction as a time consuming process of meeting
partners and abstract away from incorporating any potential second-stage decision or cost upon
meeting (e.g., whether to go on a date with a potential partner). However, we emphasize that we
complement this literature by taking a design approach—motivated by online matching platforms—
to optimize directed search (i.e., non-uniform and pairwise type-speciﬁc meetings) in a model with
cardinal and symmetric preferences. In the spirit of designing the search environment, Shimer
and Smith (2001) study a model with transferable utility in which search is costly and search
intensities can vary across types. (However, agents still meet uniformly at random within the
searching population.) They show that a socially optimal solution (i.e., ﬁrst-best) can arise as an
equilibrium of a decentralized search process with a linear tax or subsidy on search intensity.
Directed Search and Platform Interventions. Moving beyond random meeting, a series of recent
papers has studied diﬀerent forms of platform design and intervention to facilitate search. Halaburda
et al. (2018) focus on the impact of limiting choice and show that when agents’ outside options are
heterogeneous, a platform that oﬀers limited choice and charges a higher price can still compete
with ones without any choice restriction. A recent work of Kanoria and Saban (2021) shows that
limiting the action of agents, e.g., allowing for only one side to propose, and hiding information
about the quality of some agents can lead to welfare improvement. We now further discuss some of
the key diﬀerences between our paper and Kanoria and Saban (2021). First, we remark that the set
of actions of agents in Kanoria and Saban (2021) is richer in that, in addition to deciding on whether
to match upon meeting, agents decide on whether to request meeting a candidate and whether to
inspect that candidate (at a cost). While the model of Kanoria and Saban (2021) also includes
exogenous departure rates, their paper focuses on the regime where departure rates approach zero.
As a result, each agent has eﬀectively unboundedly many meeting opportunities and the main search
friction is inspection cost. In contrast, in our model, each agent has a ﬁnite number of meeting
opportunities; upon each meeting—after observing the match utility—the agent decides whether to
accept the match or to risk departing unmatched before meeting another candidate. (As mentioned
above, a majority of papers in the search literature take a similar modeling approach.) Another
key diﬀerence is the nature of the platform intervention. Kanoria and Saban (2021) investigate
blocking one side from proposing and hiding information about quality in the special case of a

6
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
vertical market where one side consists of a single type and the other one has two (high/low) types.
In contrast, we focus on designing meeting distributions—inspired by platform recommendation
systems—for general (not necessarily vertical) markets. Overall, compared to the aforementioned
papers, our model and our intervention are more ﬁne-grained, in that both sides can have multiple
(potentially incomparable) types and we design pairwise type-speciﬁc meeting rates.
The approach of Banerjee et al. (2017) to designing visibility graphs in a two-sided market with
diﬀerent types of buyers and sellers bears some similarity with ours. However, there are several
key diﬀerences: We consider a matching market without transfers in which the platform’s directed
search design impacts agents’ acceptance thresholds on both sides, while Banerjee et al. (2017)
focus on a network of buyers and sellers exchanging a single undiﬀerentiated good in which the
platform impacts clearing prices by choosing a visibility subgraph.
Motivated by the role of matching platforms in shaping agent’s choice, a sequence of recent
papers (Ashlagi et al. 2019b, Aouad and Saban 2020, R´ıos et al. 2020) consider the problem of
assortment planning in two-sided matching in both static and dynamic settings. In this novel line
of work, agents are non-strategic in that their behavior is captured by a choice model such as the
Multinomial Logit model. Consequently, agents are oblivious to the action of those on the other
side and the platform design. While sharing a similar motivation with this emerging literature, our
work complements it by capturing agents’ strategic behavior in response to how the platform’s
design guides the search process. In our work, the set of meeting rates for a type can be viewed as
an assortment of options that the platform (sequentially) oﬀers to an agent type. The equilibrium
response to the collection of such assortments determines the matching and welfare outcome.
Matching with Incomplete Information. Outside the framework of search, several papers explore
the problem of ﬁnding a stable matching where preferences are a priori unknown. Taking a
communication complexity approach, Gonczarowski et al. (2019) and Ashlagi et al. (2020) establish
bounds on the the amount of communication, measured by the number of bits, needed to ﬁnd a stable
match in markets with private preferences. The recent work of Immorlica et al. (2020) focuses on a
setting where learning preferences is costly and show how costly information acquisition impacts an
agent’s preference. Furthermore, a few recent papers, such as Liu et al. (2020), use the multi-armed
bandit framework to model the process of learning preferences as an online learning problem and
develop eﬃcient learning algorithms. Finally, in another direction, Emamjomeh-Zadeh et al. (2020)
analyze an iterative query process for learning a stable matching under general preferences. A
closely related line of work focuses on speciﬁc matching algorithms such as the Men-Proposing
Deferred Acceptance Algorithm, and examines agents’ incentives to manipulate preferences (see for
example Roth (1982), Coles and Shorrer (2014), and Immorlica and Mahdian (2015)).

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
7
Figure 1
This schematic depicts the dynamics for a single type θ. Each dark gray box represents a type, with
the size corresponding to the type’s population mass. The light gray connections between boxes correspond to
how agents meet under directed search. The colored lines depict inﬂow and outﬂow for type θ, with width
corresponding to ﬂow rate: Blue for arrivals, green for matching, and red for leaving unmatched. In stationary
equilibrium, the inﬂow should balance the outﬂow (as is depicted).
ηθ
ηθ′
1
ηθ′
2
αθ
ξθ · ηθ
δ · ηθ
Matching in Dynamic Environments.
A growing number of papers study the design of dynamic
matching markets motivated by various applications ranging from school choice (Feigenbaum et al.
2020) to ride-sharing (Nikzad 2017) to public housing (Afeche et al. 2021). In this body of literature,
several papers focus on the timing (or frequency) of matching in a centralized market and the
trade-oﬀbetween market thickness and waiting time (Ashlagi et al. 2013, 2019a, Akbarpour et al.
2020). In a closely related direction, papers such as Doval and Szentes (2019) and Arnosti and Shi
(2020) study the setting where strategic agents have heterogeneous preferences and thus face a
trade-oﬀbetween matching with a less preferred choice (including their outside option) or waiting
longer. Recently, several papers examine the role of information design on managing congestion in
dynamic allocation problems (Anunrojwong et al. 2021, Ashlagi et al. 2021, Che and Tercieux 2021).
Our work complements the aforementioned papers by studying the design of a dynamic matching
market in which strategic agents with heterogeneous preferences repeatedly meet potential matches
recommended by the platform.
2.
Model
In this section, we introduce a search model in a dynamic, two-sided matching market, where the
search process is facilitated by recommendations from a centralized platform. A graphical depiction
of our model, focused on the dynamics around a single type, is shown in Figure 1.

8
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
2.1.
Agents, Types, and Dynamics
We model our matching market as a ﬂow economy, where the market consists of a continuum of
agents of inﬁnitesimal mass. Agents on the two sides are diﬀerentiated into ﬁnitely many types
belonging to the sets M and W, respectively. Agents’ types determine prior distributions over their
preferences (see Section 2.2). We use Θ = M ∪W to denote the combined type space of all agents.
For each type θ ∈Θ, we denote the population mass of type θ agents present on the platform by ηθ.
Throughout, we will use the notational convetion that θ′ refers to a generic type on the opposite
side of the market from type θ.
Our matching market takes place in continuous time. To track change in the population masses
ηθ over time, we use ﬂow rates—the mass of agents arriving or departing per unit time.6 We
assume entry into the market is ﬁxed exogenously, with type θ agents entering at a constant ﬂow
rate of αθ (i.e., an αθ mass of type θ agents enters per unit time). This corresponds to the blue
inﬂow in Figure 1. On the other hand, we let departure from the market be partially determined
endogenously, with all agents eventually either leaving with a match or experiencing an exogenous
“life event” that causes them to leave unmatched. More speciﬁcally, the two ways an agent can
depart are as follows:
Matching. Agents leave the market when they enter into a mutually agreed upon match with
another agent (see the green outﬂow in Figure 1). We deﬁne ξθ so that ξθηθ is the ﬂow rate at
which type θ agents do so. That is, each individual of type θ (assuming symmetry between
agents of type θ) leaves matched with probability ξθ dt during the inﬁnitesimally small time
interval [t,t+dt). The value of ξθ is determined both by how the platform recommends potential
matches and who the agents themselves choose to match with (see Lemma 3.2).7
Life event. Agents also leave unmatched when they experience a “life event” (see the red outﬂow
in Figure 1). We assume life events occur randomly for each individual at a constant rate of δ dt.
That is, each individual experiences a life event with probability δ dt during each inﬁnitesimally
small time interval [t,t + dt). (Equivalently, the time an agent spends in the market is drawn
(unknown to them) from an exponential distribution of rate δ.) At the individual level, the
possibility of leaving unmatched acts as a discount factor and ensures that agents do not search
forever. At the platform level, individuals leave at a total ﬂow rate of δηθ, which ensures that
the mass of unmatched agents does not grow unboundedly.
6 Although ηθ can in general vary over time, we suppress the time index on ηθ for notational compactness and because
our eventual focus will be on stationary equilibria, in which case ηθ will be constant over time.
7 Note that ξθ can also vary over time; we suppress the time index as we did for ηθ.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
9
Our focus will be on the stationary equilibria of this market, where the inﬂow of arriving agents
balances the outﬂow of departing agents. We say that stationarity holds if
αθ = (δ + ξθ)ηθ
(1)
for all θ ∈Θ. Note that δ + ξθ is the total rate at which individual type θ agents exit the market.
2.2.
Preferences and Utilities
We assume that agents have cardinal preferences (i.e., a utility associated to matching with each
potential partner) and normalize the value of leaving unmatched to 0. In our model, the utility values
of speciﬁc potential partners are unknown ex ante. Instead, pairs of agents learn their valuations for
each other when they meet while searching (see Section 2.3), with their utilities being drawn from
a prior distribution given by their types.8 These priors represent the fact that agents may have
idiosyncratic preferences—beauty being in the eye of the beholder—that are not captured by their
type. We assume that these priors are common knowledge among the platform and the agents.
More formally, the utilities that two agents of types m ∈M and w ∈W derive if they match
are drawn from some joint distribution Dmw. Because we use Dmw to capture idiosyncrasies in
preferences, we assume that utilities are drawn independently from Dmw for each such pair of agents.
To model mutual compatibility, we also assume agents have symmetric valuations, meaning that if
two agents match, then each agent derives the same utility u ∈R from the match.
As mentioned in the introduction, an agent’s type captures their common features. In our abstract
model, we assume that the platform directly observes these features and thus the agent’s type.
While some features in practice may be self-reported by agents and thus present opportunities for
misreporting, we argue that this is not a major concern in our setting and motivating applications.
In practice, repeated meetings make veriﬁcation easier: For example, if one misreports their height,
then that would be revealed after meeting a potential partner, who could report back to the platform.
At the same time, untruthful reporting may result in severe punishments for an agent, such as being
permanently banned from the platform.9 On a more abstract level, in many settings of interest,
e.g., horizontally diﬀerentiated markets, it is unclear whether misreporting even helps an agent.
Under the symmetric valuations assumption, each joint distribution Dmw can be thought of as a
distribution over R with cumulative distribution function Fmw. To avoid a technical discussion of
8 We assume that agents do not meet twice, since for any agent, there are uncountably many agents of each type that
they could meet.
9 For example, Hinge’s Terms of Service require each user to not “Misrepresent your identity, age, current or previous
positions, qualiﬁcations, or aﬃliations with a person or entity.” Violating these terms results in being banned from
the platform.

10
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
tiebreaking10 we make the mild assumption that Dmw is a continuous distribution for all (m,w).
Then Fmw is absolutely continuous and Fmw(τ) = Pr(u ≤τ) for u ∼Dmw. Finally, to make our
notation for distributions symmetric, we deﬁne Dwm := Dmw and Fwm := Fmw for all (m,w).
2.3.
Directed Search
A key feature of our model is that search is mediated by a platform. At a high level, the platform
directs search by picking for each agent type θ the rates at which they “meet” other agent types
while searching. For each agent, search consists of a sequence of meetings with potential partners
until either a match is formed or they leave unmatched. When two agents meet, each must decide
whether to accept or reject the match. If both parties accept (i.e., there is a double coincidence of
wants), then they match with each other and leave the market. Otherwise, both agents remain in
the market and continue their respective searches.
At the individual level, the frequency at which an agent encounters other agents of any given
type follows a Poisson process with rate given by the platform’s directed search policy. Upon two
agents of types θ and θ′ meeting, their valuation u for the match is drawn from Dθθ′ and revealed
to them. Each agent then decides whether to accept or reject the match, with the match forming
if and only if both accept. If the agents match, each leaves the market with utility u; otherwise,
each continues their search. We assume agents are rate-limited and normalize time so that agents
can meet at most one candidate per unit time on average. That is, we require the total frequency
of meetings for any agent to follow a Poisson process with at most unit rate—this is our capacity
constraint.
At the platform level, directed search can be thought of as some mass fmw of type m and type
w agents, for each pair of types (m,w), meeting each other per unit time. In particular, equal
masses of type m and type w agents should meet each other over any time interval. Note that this
property must be satisﬁed if we were to explicitly pair agents in a discrete model. While our model
is continuous, we can still imagine the platform “pairing” equal masses of randomly sampled agents
for meetings at each instant of time. By requiring that agent-level Poisson processes be consistent
with this fact, we obtain our ﬂow balancing constraint.
We now state the directed search model sketched above in more formal terms. For any θ ∈Θ,
deﬁne an assortment to be a collection of rates λθ(θ′) ≥0 for types θ′ on the opposite side such
that type θ agents meet type θ′ agents following a Poisson process with rate λθ(θ′). The platform,
as part of its design, chooses an assortment λθ for each type θ ∈Θ.
A set of assortments {λθ}θ∈Θ is feasible if it satisﬁes the following two sets of constraints:
10 While all of our arguments work with discrete distributions, one has to take care to deﬁne tiebreaking properly.
On the other hand, note that any non-continuous distribution can be approximated by a continuous distribution by
adding a small amount of (bounded) noise.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
11
Capacity. The total rate of meetings for type θ agents is bounded by 1 for all types θ ∈Θ:
X
θ′
λθ(θ′) ≤1.
(2)
(Note that P
θ′ λθ(θ′) is the total rate because merging Poisson processes sums their rates.)
Flow balance. For all pairs (m,w) ∈M × W, the mass of type w agents met by type m agents
per unit time equals the mass of type m agents met by type w agents per unit time. By an
exact law of large numbers (Sun 2006, Duﬃe et al. 2018)11, we can write this condition as
fmw := ηmλm(w) = ηwλw(m).
(3)
That is, the mass fmw of type m and w agents that meet per unit time is well-deﬁned.
We assume the platform can direct search according to any feasible set of assortments.
To motivate the Poisson assumption, we think of the platform as implementing a feasible set of
assortments by randomly sampling a subset of each type to meet some other type at each instant
in time. With uniform sampling, individual agents will experience meetings at a Poisson rate.
Note that by assuming uniform sampling, we implicitly restrict the platform to designs that are
anonymous and independent of agents’ histories.
3.
The Platform’s Design Problem
In this section, we introduce the platform’s design problem, namely: How should the platform
suggest meetings in directed search to maximize social welfare in equilibrium? In order to formally
deﬁne the problem, we ﬁrst describe the agents’ strategic decision-making problem and brieﬂy
characterize the equilibria that arise.
3.1.
Strategies and Equilibrium Play
Any set {λθ}θ∈Θ of assortments deﬁnes a game for the agents, in which agents strategically decide
which potential partners to accept and reject in their meetings. As our focus will be on stationary
equilibria, we assume agents play time- and history-independent strategies. We further assume that
strategy proﬁles are symmetric within each type. We can thus write the strategy of type θ agents
as a function σθ(θ′,u) taking values in [0,1], specifying the probability with which a type θ agent
accepts when meeting a type θ′ agent whom they value at utility u.
A property of our setup is that no individual agent can directly inﬂuence the behavior of other
agents, as agents are only aﬀected by the action proﬁles of types in aggregate. Thus, rather than
modeling agents as playing a full-ﬂedged dynamic game, we can think of each agent as facing a
11 As in the related literature on search and matching, we formally require a continuous-time exact law of large
numbers for random matching; such a result has only recently been developed rigorously for discrete-time settings by
Duﬃe et al. (2018).

12
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Markov decision process (MDP) derived from their assortment λθ and strategies σθ′ of the agents
on the opposite side.12 Then, a strategy σθ is a best response for type θ agents if and only if it is an
optimal policy for this MDP. It follows that a strategy proﬁle {σθ}θ∈Θ is a Nash equilibrium if and
only if the strategy of each type is an optimal policy for the MDP given by their assortment and
opposite side’s strategies.
In Section A.1, we formally describe the agents’ MDPs and show that any Nash equilibrium in
“non-dominated” strategies is equivalent to one in threshold strategies, i.e., strategies σθ for which
there exists a threshold τθ such that σθ(θ′,u) = 1 if u ≥τθ and σθ(θ′,u) = 0 if u < τθ.13 In fact,
each threshold τθ in this equilibrium equals the expected utility uθ of type θ agents upon entry.
(Note that uθ depends on type θ’s strategy, the other agents’ strategies, as well as the platform’s
assortments—see Lemma 3.3.) Furthermore, we show in Section A.3 that the equilibrium prediction
of our model is unique in the following sense: For any set of assortments, our model makes a unique
prediction of the distribution of matches that are realized. We record these observations in the
following proposition (proven in Section A.3):
Proposition 3.1 (Structure of Nash Equilibria). Given any ﬁxed set of assortments {λθ}θ∈Θ:
1. There exists a unique strategy proﬁle where each type plays a threshold strategy with threshold
equal to that type’s expected utility. Moreover, this strategy proﬁle is a Nash equilibrium.
2. Any Nash equilibrium in non-dominated strategies produces the same distribution (in both types
and utilities) of realized matches as the preceding Nash equilibrium in threshold strategies.
In light of Proposition 3.1, it suﬃces to focus our attention on equilibria in threshold strategies.
To facilitate our discussion of such equilibria, we state expressions for the rate ξθ at which agents
match (in Lemma 3.2) and their expected utility uθ when all agents play threshold strategies (in
Lemma 3.3).
Lemma 3.2 (Matching Rate). Suppose each type θ ∈Θ plays a threshold strategy with threshold τθ.
Then the rate ξθ at which individual type θ agents match is
ξθ =
X
θ′
 
λθ(θ′)
Z ∞
max(τθ,τθ′)
dFθθ′
!
.
(4)
Proof. The rate at which an agent of type θ matches is the sum of the rates at which they meet
each type θ′ weighted by the probability such a meeting results in a match. The latter probability
is 1 −Fθθ′(max(τθ,τθ′)) =
R ∞
max(τθ,τθ′) dFθθ′ in terms of the agents’ thresholds τθ and τθ′.
12 Note that agents are not directly aﬀected by the actions of other agents on the same side.
13 In our analysis, we eliminate dominated strategies that reject matches worth more than one’s expected continuation
utility. Performing such a pruning is necessary to rule out degenerate equilibria (e.g., the one where agents reject all of
their potential matches because they do not expect anyone to ever accept).

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
13
Lemma 3.3 (Expected Utility). Suppose each type θ plays a threshold strategy with threshold τθ.
Then the expected payoﬀuθ of type θ agents is
uθ =
P
θ′

λθ(θ′)
R ∞
max(τθ,τθ′) udFθθ′

δ + P
θ′

λθ(θ′)
R ∞
max(τθ,τθ′) dFθθ′
.
(5)
(Note that by Lemma 3.2, the denominator can also be written as δ + ξθ.)
While the proof of Lemma 3.3 depends on the formal deﬁnition of the MDP, the intuition for the
formula is simple: For any type θ agent, the memorylessness of the MDP implies their expected
utility equals their expected utility conditioned on leaving at any particular instant. Conditioning
on such an event, we see that with probability proportional to δ, they left due to a life event,
and with probability proportional to λθ(θ′)
R ∞
max(τθ,τθ′) Fθθ′, they left because they matched with an
agent of type θ′. In equation (5), we simply express the agent’s expected utility as the sum of their
expected utilities in each of these scenarios weighted by probability of occurrence.
3.2.
Optimal Directed Search
The platform’s design problem is to design the search process via assortments in order to induce a
stationary equilibrium that is (approximately) optimal in terms of social welfare. Thus, in addition
to designing the assortments, the platform should ensure that those assortments are sustainable
in equilibrium. When analyzing the design problem, we assume that the platform has access to
the departure rate δ, the arrival rates αθ for all θ ∈Θ, and the preference distributions Dmw for all
(m,w) ∈M × W.
More formally, we say that a set of assortments {λθ}θ∈Θ induces a stationary equilibrium if, for
the equilibrium strategy proﬁle {σθ}θ∈Θ, there exist population masses {ηθ}θ∈Θ such that:
1. Stationarity (as deﬁned in eq. (1)) holds for all types θ ∈Θ.
2. The assortments are feasible with respect to the population masses (i.e., (2) and (3) hold).
By Proposition 3.1, a set of assortments {λθ}θ∈Θ implies a unique Nash equilibrium in threshold
strategies. Furthermore, these threshold strategies determine ξθ for each θ by Lemma 3.2. Given
{ξθ}θ∈Θ, the stationarity condition then determines ηθ for each θ. Therefore, any choice of assortments
{λθ}θ∈Θ induces at most one stationary equilibrium, making the platform’s optimization problem
over the assortments well-deﬁned.14
Recall that the platform’s optimization objective is social welfare. For stationary equilibria, social
welfare is deﬁned as the total ﬂow rate of utility realized by agents matching with each other. Note
that the symmetric valuations assumption implies each of the two sides contributes exactly half of
14 Since our model uniquely predicts play given assortments, stationary equilibria are also self-sustaining once
established.

14
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
the total welfare. The platform’s optimization problem is thus to ﬁnd the assortments {λθ}θ∈Θ that
induce a stationary equilibrium with maximum welfare.
Our setup naturally lets us cast the platform’s design problem of ﬁnding a welfare-maximizing
policy for directed search as a computational one: Given inputs δ, {αθ}θ∈Θ, and {Dmw}(m,w)∈M×W,
compute the assortments {λθ}θ∈Θ that induce a stationary equilibrium with maximum welfare. We
name this problem OptimalDirectedSearch.15
We remark that we do not dwell on dynamical issues beyond steady state (e.g., convergence to
equilibrium from “cold starts”). Instead, we assume that the platform has the power to manipulate
entry into the market at time 0 and can ensure that the requisite populations of agents are present
for the desired equilibrium to sustain indeﬁnitely. This motivates our objective for the platform of
ﬁnding a welfare-maximizing stationary equilibrium.
3.2.1.
Optimal Directed Search as an Optimization Problem Stationarity, feasibility,
and agents playing best responses can all be encoded (albeit indirectly) as constraints on the
assortments. We can thus write OptimalDirectedSearch as the following constrained optimization
problem:
max
λθ,τθ,ξθ,ηθ
X
m∈M
X
w∈W

ηmλm(w)
Z
max(τm,τw)
udFmw

+
X
w∈W
X
m∈M

ηwλw(m)
Z
max(τm,τw)
udFmw

(6)
such that
αθ = (δ + ξθ)ηθ
∀θ ∈Θ
(6a)
ηmλm(w) = ηwλw(m)
∀(m,w) ∈M × W
(6b)
1 ≥
X
θ′
λθ(θ′)
∀θ ∈Θ
(6c)
ξθ =
X
θ′
 
λθ(θ′)
Z ∞
max(τθ,τθ′)
dFθθ′
!
∀θ ∈Θ
(6d)
τθ =
1
δ + ξθ
X
θ′
 
λθ(θ′)
Z ∞
max(τθ,τθ′)
udFθθ′
!
∀θ ∈Θ
(6e)
λm(w),λw(m) ≥0
∀(m,w) ∈M × W.
(6f)
Here, constraint (6a) is the stationarity constraint (1); constraints (6b) and (6c) are the feasibility
constraints of ﬂow balance (3) and capacity (2); constraint (6d) is formula (4) for individuals’ rate
of matching; constraint (6e) states that each type’s threshold is a ﬁxed point of their MDP payoﬀ
function (5); and constraint (6f) simply requires that the meetings rates be non-negative.
15 To formalize our computational problem while avoiding details relating numerical computation, we assume that
the platform’s knowledge of the preference distributions Dmw comes in the form of oracle access to the CDFs Fmw
and the tail expectations
R ∞
τ
udFmw. We further assume that the platform can solve for each agent’s best response
optimally. This is a mild assumption because the corresponding optimization problem boils down to a ternary search
on a unimodal function of the aforementioned oracle’s outputs (see Lemma 4.5 and its generalization Lemma B.1 in
Section A).

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
15
The validity of constraint (6e) follows from Proposition 3.1: Our model’s unique prediction for
which matches are realized occurs when agents all play threshold strategies with threshold equal
to their expected utility. Moreover, the proﬁle of thresholds satisfying this property is uniquely
determined by the assortments. Hence the social welfare of an assortment is given by the ﬂow of
utility realized when all agents play such threshold strategies.
We note that while the optimization program (6) is written as an optimization problem over four
sets of variables {λθ}θ∈Θ, {τθ}θ∈Θ, {ξθ}θ∈Θ, and {ηθ}θ∈Θ, it is really an optimization problem over
the assortments {λθ}θ∈Θ: Agents’ thresholds {τθ}θ∈Θ and matching rates {ξθ}θ∈Θ are determined
entirely by their assortments, and the stationary masses {ηθ}θ∈Θ are in turn determined entirely by
the matching rates.
3.3.
Illustrative Examples: Directed Search in Horizontal and Vertical Markets
With our setup of the model and the platform’s design problem now complete, we present two
simple examples with fundamentally diﬀerent market structures: a horizontal market and a vertical
one. In these special cases, we are able to optimally solve OptimalDirectedSearch and thus gain
insight into the structure and value of the optimal design. Through the former example, we show
that platform-directed search can provide signiﬁcant welfare gains relative to random meeting.
Through the latter, we illustrate some subtleties involving congestion and cannibalization that arise
(even in this very restricted setting) when solving OptimalDirectedSearch.
To motivate the utility of platform-directed search, we describe a market involving highly
heterogeneous preferences (i.e., horizontal diﬀerentiation) where directed search leads to signiﬁcantly
greater eﬃciency than random meeting.
Example 3.4 (Horizontal market). We consider a market where the two sides are M = {m1,...,mn}
and W = {w1,...,wn}, with types mi and wj achieving positive utility from matching only if i = j.
Suppose also that the types are symmetric, with each type having the same arrival rate αθ = 1 and
each pair of compatible types (mi,wi) having the same preference distribution Fmiwi = F. Finally,
let δ > 0 be arbitrary.
We compare the welfares of two stationary equilibria—one under random meeting and another
under optimal directed search. Consider the symmetric equilibrium where agents meet randomly.
By symmetry, only a 1/n fraction of each agent’s meetings are with agents of the compatible
type. On the other hand, with the optimal directed search, the platform sets assortments so that
λmi(wi) = λwi(mi) = 1 for all i.16 Then, agents meet other agents of the same type with probability
1. To compare these two equilibria, observe that the random meeting equilibrium is equivalent to
the optimal directed search equilibrium with search friction nδ—under random meeting, each agent
16 This policy is optimal because its welfare matches the that of the ﬁrst-best outcome (deﬁned in Section 4.1).

16
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
has a n times higher probability of leaving unmatched between meetings with compatible agents.
In the limit of large δ, where agents are likely to accept on their ﬁrst meeting (or not match at
all), this leads to a multiplicative gap approaching n between the welfares of random meeting and
optimal directed search.
This example demonstrates that in a market with horizontal preferences, there can be a signiﬁcant
amount of wasteful meeting if agents proceed with random search: In our example, under random
meeting, only one in n meetings involves pairs that are compatible with each other. On the
other hand, with directed search, the platform could eliminate such wasteful meeting entirely.
While admittedly stylized, this example nonetheless highlights the usefulness of directed search in
horizontally diﬀerentiated markets.
In our second example, of a vertically structured market, agents on each side of the market have
a common preference ordering over the types on the opposite side. In such a market, one might
expect that the optimal directed search scheme results in a positively assortative matching when
agents’ valuations are supermodular. However, this turns out not to always be the case. Because
agents arrive at disparate rates, matching assortatively can lead to ineﬃciency due to congestion at
the top of the market, and due to “high type” agents cannibalizing demand for “low type” agents.
While such phenomena make ﬁnding the exact optimal assortments challenging, we will show in
Section 4 that we can nonetheless ﬁnd a set of assortments that are approximately optimal.
Example 3.5 (A Vertical Market). Consider a market with strictly vertical preferences, where the
agents on each side belong to either a high type H or a low type L. That is, we let M = {mH,mL}
and W = {wH,wL}. Suppose the utility distributions FmHwH, FmLwH, FmHwL, and FmLwL are point
masses at u(1 + 2ε), u, 1 + ε, and 1, respectively, for u ≫1 and ε ≪1.17 Thus, agents always prefer
matching with high-type agents over low-type agents. Suppose further that the arrival rates are
such that αmH = αwL = 1 and αwH = αmL = 1/u. Finally, we consider this example in the regime
where δ is very small (i.e., suppose we are in a nearly frictionless market).
To analyze the possible stationary equilibria of this market, we ﬁrst consider what happens in the
equilibria where high-types only match with high-types and low-types only match with low-types. The
maximum possible welfare in such a equilibrium is bounded above by 2((1 + 2ε) + αmL)/(1 + δ) ≈2,
since the welfare generated by the high-types is at most 2 · αwH · u(1 + 2ε)/(1 + δ) and the utility
generated by the low-types is nearly negligible at 2 · αmL · 1/(1 + δ). In particular, matching for
both high- and low-types is bottlenecked by the low arrival rate of the less common type. One can
17 An astute reader may notice that, technically, our preference distributions do not satisfy our continuity assumption.
We present our example this way for simplicity’s sake—the same example can be made to work with continuous
distributions by adding some small amount of Gaussian noise to each utility value.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
17
think of these equilibria as being congested at both levels of the market: Due to the disparities in
arrival rates, there are many type mH agents hoping to match with only a few type wH agents and
many type wL agents hoping to match with only a few type mL agents. As a result, large numbers
of type mH agents and type wL agents go unmatched.
Next we observe that such equilibria—where high-types only match with high-types and low-types
only match with low-types—arise if the expected utility umH of type mH is greater than 1 + ε.
Notably, type mH agents are not willing to match with type wL agents due to the possibility of
matching with a type wH agent: If umH > 1 + ε, then Proposition 3.1 tells us that type mH agents
will not match with type wL agents, since type mH agents would only obtain 1+ε utility from doing
so. From the platform’s perspective, the presence of wH agents in type mH’s assortment cannibalizes
demand for type wL agents. Likewise, the possibility of matching with type mH makes type wH
reject type mL agents—the expected utility of type wH agents is at least (1 + ε) · αmH/αwH > u
from matching with type mH.
On the other hand, we can obtain a more eﬃcient equilibrium if the expected utility of type mH is
slightly lower, e.g., if they only match with type wL. Consider the assortment where type mH and wL
agents only meet each other and type wH agents and mL agents only meet each other. All agents meet
at maximal rates; furthermore, all meetings result in matches because no type has other options. As a
result, the social welfare in equilibrium is 2(αmH ·(1+ε)+αmL ·u)/(1+δ) = 2((1+ε)+1)/(1+δ) ≈4.
That is, the social welfare of this non-assortative “diagonal” set of assortments (which happens to
be optimal) is nearly twice that of any equilibrium where high-types only match with high-types
and low-types only match with low-types.
We conclude our discussion of the above market with two remarks. First, the cannibalization
eﬀect (and its welfare implications) is in the same spirit as the sorting externality discussed in
Burdett and Coles (1997) using a high/low type vertical market, but with a diﬀerent preference
structure. In that setting, the preference of an agent only depends on the type of the other side,
and agents meet each other uniformly at random. Depending on the belief that type H would
match with a type L or not (and its corresponding match threshold), two diﬀerent equilibria arise.
Interestingly, the assortative equilibrium has the lower welfare compared to the equilibrium under
which type H matches both types. Next, we note these phenomena arise in part due to the fact
that the platform design is anonymous and thus it cannot discriminate between agents beyond
their type. Indeed, at the opposite extreme, the platform could simply force agents to match with a
certain type, e.g., by having a subset of type mH agents only meet type wL agents and another
subset of type mH agents only meet type wH agents. However, we stress that such splitting of
types has two key drawbacks: (i) if agents are able to rejoin the platform under a diﬀerent identity,

18
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
then such separation is diﬃcult to enforce; (ii) such discriminatory treatment may be unpalatable
to users from a fairness perspective. We also show in Section 4 that such an assumption is not
restrictive—our solution is constant-factor competitive against the ﬁrst-best platform policy.
4.
Approximation Algorithms
In this section, we show how the platform can construct in polynomial time a set of assortments
{λθ}θ∈Θ such that its induced equilibrium obtains a 4-approximation to the optimal social welfare.
Furthermore, the equilibrium resulting from our computed assortments has a simple and appealing
structure: It consists of disjoint submarkets such that each submarket has only a single type on one
of the sides. We also establish hardness of approximation for the platform’s optimization problem,
meaning that we cannot do better than a constant-factor approximation unless P = NP.
We actually show a slightly stronger result: The resulting equilibrium obtains a 4-approximation
to the optimal welfare that could be obtained in the ﬁrst-best matching economy, where rather
than agents choosing to accept or reject, the platform gets to decide on behalf of the agents. (In
this ﬁrst-best economy, the platform gets to choose the assortments as well.) Our theorem can thus
also be interpreted as a price-of-anarchy-style result, that agents’ self-interested behavior causes
welfare to degrade by at most a factor of 4 relative to the ﬁrst-best optimum.
Theorem 4.1 (Computationally Eﬃcient Approximation). There is a polynomial-time 4-
approximation algorithm for OptimalDirectedSearch. (In fact, this algorithm gets a 4-approximation
to the platform’s ﬁrst-best optimal welfare.)
Our construction of these assortments and the resulting equilibrium proceeds as follows:
Solving for the platform’s ﬁrst-best. We start by considering the platform’s optimization
problem for the ﬁrst-best matching economy, where the platform gets to plan both the assort-
ments and which matches the agents accept. That is, we relax the agents’ incentive constraint
and allow the platform to optimize over thresholds τmw between each pair (m,w) of types. This
relaxation removes the main barrier—namely, incentives—to solving the optimization problem
exactly. Accordingly, we show that this relaxed problem can be reduced to a generalization of
the classical assignment problem and thus be eﬃciently solved.
Approximating via “star-shaped” markets. We then show that an optimal solution to this
“generalized” assignment problem can be converted into a stationary equilibrium (where we
now take agents’ incentives back into account) with at most a factor 4 loss in welfare. The key
ideas for this step are:
• Showing that the optimal ﬁrst-best solution can be 2-approximated by another consisting
of “star-shaped” submarkets (which have a side where all the agents are of the same

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
19
type). For this step, we draw on some classical observations about the structure of optimal
solutions from previous works on generalized assignment problems (Lenstra et al. 1990,
Chakrabarty and Goel 2010, Banerjee et al. 2017).
• Showing that for markets where all the agents are of the same type on one side, the
platform can obtain a 2-approximation to the optimal welfare of the ﬁrst-best matching
economy. This step relies on the observation that in such markets, there is an alignment
of incentives between individual agents and the platform.
A constant-factor approximation algorithm is likely the best we can hope for, computationally:
We show in Section C that approximating the platform’s optimization problem to a factor better
than 24
23 is NP-hard.
Theorem 4.2 (Hardness of Approximation). Approximating OptimalDirectedSearch up to a
  24
23 −ε

-
factor is NP-hard for any ε > 0.
We prove the above hardness result in Section C. From a technical perspective, our approach
very closely mirrors that of Chakrabarty and Goel (2010), who show hardness of approximation
for related problems (e.g., maximum budgeted allocation) by reducing from Hastad’s 3-bit PCP
(H˚astad 2001). While their technique applies to our setting, it is not clear that their hardness results
apply directly—a challenge speciﬁc to our setting is that our optimization problem is continuous
rather than discrete. To make this approach work, we must show that our complicated feasibility set
introduces a discrete element to the optimal allocation. But as a consequence, we obtain a slightly
worse constant c.
A
constant-factor
gap
between
ﬁrst-best
and
second-best
is
also
inherent
to
the
OptimalDirectedSearch problem. We show via example in Section B.1 that there exists a market
such that the ﬁrst-best and second-best are separated by a factor of 2.
Proposition 4.3 (Gap Between First- and Second-Best). For any ε > 0, there exists a market
such that the platform’s ﬁrst-best optimal welfare is at least 2 −ε times the optimal (second-best)
welfare for OptimalDirectedSearch.
Before proceeding with the proof of Theorem 4.1, we remark that the ﬁrst-best optimal welfare
and the welfare achieved by random meeting serve as natural benchmarks to compare our solution
against. (We remind the reader that, in our general setting, an assortative matching is not well-
deﬁned.) Theorem 4.1 ensures that our solution achieves at least 1/4 of the former benchmark. On
the other hand, Example 3.4 implies the welfare achieved under our solution can be arbitrarily
larger than that achieved by random meeting. In fact, it is straightforward to show that for the

20
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
horizontal market of Example 3.4, our solution coincides with the ﬁrst-best.18 Consequently, for
large δ, its welfare gain compared to random meeting would be proportional to n.
In the remainder of this section, we develop the proof of Theorem 4.1.
4.1.
The First-Best Matching Economy
In this section, we study the platform’s ﬁrst-best optimization problem, where the platform has the
power to plan the entire matching economy. That is, in addition to designing assortments, we allow
the platform to ignore agents’ incentives and dictate each type’s strategy. The ﬁrst-best relaxation is
obtained by modifying the optimization problem (6) as follows: Relax the best response constraint
(6e). Then, replace the per-type threshold variables τθ with pairwise threshold variables τmw that
take the place of max(τm,τw) in all expressions for all (m,w) ∈M × W in (6).
To see why this relaxation corresponds to the platform’s ﬁrst-best problem, note that rather than
optimizing over all agent strategies, the platform can restrict its attention to strategies σθ that have
a threshold for each type on the opposite side. This is because whenever two agents of types m and
w match at a certain rate, it is optimal for the matches realized to be the highest-valued ones. In
particular, the platform should never hope that agents of types m and w reject each other at utility
u but match at some utility u′ < u. Rather, there should exist a threshold τmw such that agents of
these types match if and only if u ≥τmw.
While even the relaxed optimization problem looks diﬃcult to work with, our goal in this section
is to show that a careful reparametrization reduces the optimization problem to a linear program.
The resulting linear program is related to (and in fact generalizes) the linear programming relaxation
of the assignment problem; the main diﬀerence is that instead of having unit capacities on the ﬂow
to each node, we allow for real-valued capacities. Formally, the reduction can be stated as follows:
Proposition 4.4 (First-Best “Assignment Problem”). Consider the linear program
max
βmw
2 ·
X
m∈M
X
w∈W
ρmw · βmw
(7)
such that
X
w∈W
βmw ≤αm
∀m ∈M
(7a)
X
m∈M
βmw ≤αw
∀w ∈W,
(7b)
where ρmw := maxτ≥0
R ∞
τ
u dFmw
δ+
R ∞
τ
dFmw . The platform’s ﬁrst-best optimization problem is equivalent to (7)
in the following sense:
1. The two optimization problems have the same optimal objective value.
2. Any feasible choice of {βmw}m∈M,w∈W corresponds to a feasible choice of {λθ}θ∈Θ, {ηθ}θ∈Θ,
{ξθ}θ∈Θ, and {τmw}m∈M,w∈W that achieves the same objective value.
18 See Section 5 for a numerical solution of a similar horizontal market as well as further numerical analysis.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
21
Proposition 4.4 implies that to solve the ﬁrst-best optimization problem, it suﬃces to solve the
linear program (7) and convert the resulting solution to an optimal choice of variables for the
ﬁrst-best optimization problem. The proof of the Proposition 4.4 proceeds by ﬁrst reparameterizing
the optimization program (6) using the ﬂow balance constraint: We introduce the variable
fmw := ηmλm(w) = ηwλw(m)
for the total rate of meetings between each pair (m,w) ∈M × W. We can then encode the ﬂow
balance, capacity, and stationary constraints into the single combined constraint
αθ ≥
X
θ′
 
fθθ′
 
δ +
Z ∞
τθθ′
dFθθ′
!!
.
(8)
That is, there exist corresponding values for λθ(θ′), ξθ, and ηθ that satisfy the constraints of (6) if
and only if the fθθ′ variables satisfy (8). To ﬁnish, we introduce the variables
βmw := fmw

δ +
Z ∞
τmw
dFmw

.
(9)
We then substitute into (8) and the objective of (6). The latter becomes
2
X
m∈M
X
w∈W
 
βmw ·
R ∞
τmw udFmw
δ +
R ∞
τmw dFmw
!
.
(10)
While the thresholds τmw are not yet ﬁxed, these substitutions make the optimization eﬀectively
unconstrained in τmw. Optimizing over τmw in the objective lets us write the objective in terms of
ρmw as in (7), since the only dependence on τmw is through the expression
R ∞
τmw udFmw
δ +
R ∞
τmw dFmw
(11)
We defer full details of this analysis to Section B.2.
The ﬁnal step in the above is setting τmw so that expression (11) is maximized. It turns out that
we can do so by setting τmw = ρmw. (That is, the expression achieves its maximum value at a ﬁxed
point.) We record this observation here:
Lemma 4.5 (Fixed Point Structure of Optimal Threshold). Deﬁne
A(τ) =
R ∞
τ udF
δ +
R ∞
τ
dF ,
where δ > 0 and F is a continuous distribution, and let ρ = maxτ≥0 A(τ). Then A(ρ) = ρ. Moreover,
A is monotonically increasing for τ ≤ρ and monotonically decreasing for τ ≥ρ.

22
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Figure 2
This ﬁgure depicts the process for converting an optimal ﬁrst-best solution to a stationary equilibrium,
while preserving welfare up to a factor of 4. We start with a ﬁrst-best solution whose graph of positive weight
variables forms a forest (i.e., step (1)). The ﬁrst arrow represents step (2), where we approximate the forest with
stars, each corresponding to a star-shaped submarket. The second arrow represents solving the ﬁrst-best for each
star-shaped submarket (see Lemma 4.9). The third pair of arrows corresponds to the cases we handle in the proof
of Proposition 4.8—in particular, whether the new ﬁrst-best solution induces a stationary equilibrium (Case 1) or
not (Case 2).
2-approx
re-solve each submarket
2-approx
Case 1
Case 2
OR
ﬁrst-best solution
“star-shaped” submarkets
ﬁrst-best solution
4.2.
Designing an Approximately Optimal Equilibrium
In the previous section, we described how the platform can solve for a ﬁrst-best solution, where
agents’ incentives are ignored. In this section, we now bring back agents’ incentives and show
how to convert the ﬁrst-best solution into a stationary equilibrium. We show that our conversion
process retains at least 1
4 of the welfare of the ﬁrst-best solution, thereby giving us an eﬃcient
4-approximation algorithm for OptimalDirectedSearch.
At a high-level, our conversion process works as follows (see Figure 2 for a visual depiction):
Step (1). Find a solution {β∗
mw}m∈M,w∈W to the linear program (7) such that the graph on Θ
that has an edge (m,w) for each β∗
mw > 0 is a forest.
Step (2). Approximate this edge-weighted forest with a union of vertex-disjoint star graphs such
that the star graphs contain at least half the total edge weight of the forest.
Step (3). Construct a set of assortments for each star-shaped submarket (where one side has
only one type of agent) that induces a stationary equilibrium whose social welfare is at least
half the ﬁrst-best social welfare of the submarket.
The ﬁrst two of the above steps have appeared in other works featuring generalized assignment
problems Lenstra et al. (1990), Chakrabarty and Goel (2010), Banerjee et al. (2017), where they
were similarly used to simplify the problem structure. Our main insight for this stage of the proof
lies in the third step, where we leverage structural properties of the agents’ decision problem to
show that the optimal stationary equilibrium in each submarket produces at least half the ﬁrst-best
welfare of that submarket.19
19 Note that this last step is distinct from simply computing the optimal stationary equilibrium. Computing the
equilibrium is not enough to show that it actually obtains at least half the ﬁrst-best welfare.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
23
These steps, together with Proposition 4.4, prove our approximation result Theorem 4.1.
4.2.1.
Steps (1) and (2) We now state the lemmas that give the results needed for steps
(1) and (2). The ﬁrst lemma, having appeared in various forms since Lenstra et al. (1990), shows
that there exists an optimal solution for our generalized assignment problem such that the positive
variables βmw > 0 form a forest when viewed as edges on a graph with vertex set Θ. This result is
true for the same reason that, in the classical assignment linear program, there exists an optimal
solution where all the variables are integral: As long as a cycle exists, one can push “ﬂow” through
this cycle to eliminate it while simultaneously reducing the value of some variable to 0.
Lemma 4.6 (Lenstra et al. (1990), Chakrabarty and Goel (2010), Banerjee et al. (2017)). For a
generalized assignment problem
max
X
m∈M
X
w∈W
ρmw · βmw
such that
X
w∈W
βmw ≤αm
∀m ∈M
X
m∈M
βmw ≤αw
∀w ∈W,
with real-valued capacities αθ, there exists an optimal solution {β∗
mw}m∈M,w∈W such that the graph
on Θ with edge set {(m,w) : β∗
mw > 0} is a forest.
The next lemma, which is the main ingredient for step (2), shows that we can take any edge-
weighted forest and approximate it up to a factor of 2 in terms of edge weight with a disjoint union
of star graphs. The precise formulation we cite is due to Banerjee et al. (2017), though simillar
ideas have also appeared in the contexts of budgeted allocations Lenstra et al. (1990), Chakrabarty
and Goel (2010). This lemma is simple to prove: Root each tree in the forest arbitrarily, and color
each edge red or blue based on its distance modulo 2 from its root. The colors partition the forest
into two subgraphs each made up of star-shaped graphs; one of these subgraphs must capture at
least half the edge weight of the forest.20
Lemma 4.7 (Banerjee et al. (2017)). Given an edge-weighted forest, there exists a subgraph that is
a union of vertex-disjoint star graphs (i.e., trees of radius 1) such that the total edge weight of the
subgraph is at least half that of the original tree.
In context, Lemma 4.6 tells us that we can ﬁnd a solution {β∗
mw}m∈M,w∈W to the linear program
(7) for the platform’s ﬁrst-best optimization problem such that the positive weight variables form a
20 We remark that the constant factor on this lemma is tight: Consider the tree with 2n + 1 vertices, where the root
vertex has n children and each of these children has another child. Then, any subgraph that is a vertex-disjoint union
of star graphs can only obtain edge weight n + 1.

24
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
forest on Θ. We weight the edges of this forest by their contribution βmw · ρmw to social welfare
in the ﬁrst-best optimization problem. Next, Lemma 4.7 tells us that we can 2-approximate this
edge-weighted forest with a union of vertex-disjoint star graphs. Each of these star graphs deﬁnes a
“star-shaped” submarket; note that each such submarket has a side where all agents are of the same
type. This completes steps (1) and (2).
4.2.2.
Step (3) We now show that for any star-shaped submarket (i.e., one where one side of
the market consists entirely of agents of the same type), the platform can design a set of assortments
that induce a stationary equilibrium with welfare at least half that of the platform’s ﬁrst-best
solution. Formally, we prove the following proposition:
Proposition 4.8 (Star-shaped Markets). For any star-shaped market, the platform can choose
assortments that induce a stationary equilibrium whose welfare is a 2-approximation to the platform’s
ﬁrst-best welfare.
For the proof of this proposition, a key observation is that the platform’s ﬁrst-best threshold
coincides with an agent’s optimal threshold if their assortment is saturated with agents of a single
type. In particular, such agents will not accept more than the platform would want them to in the
ﬁrst-best equilibrium. We obtain from this observation a condition for when the ﬁrst-best solution
induces a stationary equilibrium. We then show that the induced equilibrium achieves at least
half the ﬁrst-best welfare. When the condition fails to hold, it turns out that we can modify the
ﬁrst-best solution appropriately, by only matching agents whose capacity constraint is tight, and
still obtain an equilibrium where at least half the ﬁrst-best welfare is preserved.
For the remainder of this section, we assume without loss of generality that M = {m}, i.e., our
star-shaped market is such that the M side of the market consists only of type m agents.
Structural Observations for Star-Shaped Markets. Before giving the proof of Proposition 4.8, we
develop some structural observations about the optimal ﬁrst-best solution and agents’ thresholds.
We defer the proofs of all lemmas in this section to Section B.4.
In our ﬁrst lemma, we characterize the platform’s ﬁrst-best solution in star-shaped markets:
Lemma 4.9 (First-best Solution of a Star-Shaped Market). There exists a ﬁrst-best solution
{β∗
mw}w∈W and a subset w1,w2,...,wn ⊆W such that ρmw1 ≥ρmw2 ≥··· ≥ρmwn, β∗
mwi = αwi for all
i < n, and β∗
mw = 0 if w ̸∈{w1,...,wn}.
Now that we understand the platform’s ﬁrst-best optimal solution, we can start to incorporate
incentives through the incentive constraint (6e). By Lemma 4.5, each ﬁrst-best threshold τmwi in
the ﬁrst-best solution described in Lemma 4.9 can be taken to be ρmwi, since ρmwi maximizes
R ∞
τmwi udFmwi
δ +
R ∞
τmwi dFmwi
.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
25
Then, by the deﬁnition βmwi = fmwi

δ +
R ∞
τmwi dFmwi

in (9), this ﬁrst-best solution corresponds to
the choice of fmwi given by
fmwi = f ∗
mwi :=
β∗
mwi
δ +
R ∞
ρmwi dFmwi
.
Our next step is to consider incentives and characterize equilibrium when fmwi = f ∗
mwi. Fixing the
fmwi values gives us information about equilibrium thresholds τθ for all types because the incentive
constraint (6e) is equivalent to
τθ = 1
αθ
X
θ′
 
fθθ′
Z ∞
max(τθ,τθ′)
udFθθ′
!
(12)
after scaling both the numerator and the denominator of the right-hand side by ηθ. (Recall that
this ﬁxed point deﬁnition of equilibrium play comes from Proposition 3.1, which lets us restrict our
attention to equilibria where each type has threshold equal to their expected utility.)
As a point of comparison when analyzing agents’ equilibrium play, we consider the “idealized
thresholds” ˆτwi that arise when type wi has absolute market power. These idealized thresholds,
which are given by the ﬁxed point equation
ˆτwi =
1
αwi
f ∗
mwi
Z ∞
ˆτwi
udFmwi,
can also be thought of as the threshold that type wi agents would set if τm = 0. (Note that the left-
hand side is monotonically increasing in ˆτwi while the right-hand side is monotonically decreasing,
so the ﬁxed point exists and is well-deﬁned.) We care about these idealized thresholds because,
in equilibria where fmwi = f ∗
mwi, the threshold chosen by type m will be a best response to these
idealized thresholds. Namely, type m will play the threshold ˆτm which satisﬁes
ˆτm = 1
αm
n
X
i=1
 
f ∗
mwi
Z ∞
max(ˆτm,ˆτwi)
udFmwi
!
.
(13)
To prove this claim, we will proceed through the following series of lemmas. These lemmas and the
deﬁnition of ˆτm will also be useful for our later analysis.
For the idealized thresholds ˆτwi, it is not diﬃcult to establish using the deﬁnition of ρmwi and
the monotonicity property in Lemma 4.5 that:
Lemma 4.10 (Comparison to First-best Thresholds). If i < n, then ˆτwi = ρmwi (where ρmwi is
deﬁned in Proposition 4.4). And at i = n, it holds that ˆτwn ≤ρmwn.
A similar argument shows that these ˆτwi upper bound the equilibrium thresholds τwi for all i:
Lemma 4.11 (Comparison to Equilibrium Thresholds). In any equilibrium where fmwi = f ∗
mwi,
τwi ≤ˆτwi for all i.

26
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
While the thresholds of type wi are always upper bounded by ˆτwi, the quantity max(τm,τwi) is
always at least ˆτwi: Intuitively, if τm < ˆτwi, then type wi would set their threshold to be ˆτwi, since
that would be optimal for them. This property, together with Lemma 4.10, guarantees that no type
wi for i < n will match more than they would have under the platform’s ﬁrst-best solution.
Lemma 4.12 (Lower Bound on Equilibrium Matching Thresholds). In any equilibrium where
fmwi = f ∗
mwi, max(τm,τwi) ≥ˆτwi for all i.
From Lemmas 4.11 and 4.12, we deduce the threshold τm played in equilibria where fmwi = f ∗
mwi
for all i: These lemmas together imply that max(τm,τwi) = max(τm, ˆτwi) in such equilibria. Recall
that (by Proposition 3.1) τm must also satisfy
τm = 1
αm
n
X
i=1
 
f ∗
mwi
Z ∞
max(τm,τwi)
udFmwi
!
= 1
αm
n
X
i=1
 
f ∗
mwi
Z ∞
max(τm,ˆτwi)
udFmwi
!
.
(14)
This is exactly the deﬁnition of ˆτm as given in (13), so we may conclude τm = ˆτm.
Proving the Proposition. With our structural lemmas, we are now ready to prove Proposition 4.8.
We split our analysis into two cases based on the value of ˆτm. We show that if ˆτm > ρmwn, then
there exists a stationary equilibrium (with incentives) corresponding to the ﬁrst-best f ∗
mwi values.
Moreover, this equilibrium obtains at least half the welfare of the ﬁrst-best optimal. Otherwise,
if ˆτm ≤ρmwn, then we consider two further possibilities: If Pn−1
i=1 ρmwi · αmwi is at least half the
ﬁrst-best optimal, then we only let type m agents meet type wi agents for i < n. Otherwise, we
only let type m agents meet type wn agents. In each of these two remaining cases, we will show
that we still capture at least half of the ﬁrst-best optimal welfare.
Proof of Proposition 4.8. As mentioned above, we split our analysis into two cases based on the
value of ˆτm. For both, we use OPT to refer to the welfare value attained by the platform’s ﬁrst-best
optimal solution, i.e., OPT = 2Pn
i=1 ρmwi · β∗
mwi. We now discuss the two cases:
Case 1: ˆτm > ρmwn. If ˆτm > ρmwn, we show that the ﬁrst-best choice of f ∗
mwi induces a stationary
equilibrium obtaining at least half the ﬁrst-best optimal welfare.
To check feasibility, we need to check that the {ξθ}θ∈Θ and {ηθ}θ∈Θ given by the thresholds
in the preceding lemmas satisfy the constraints of (6). By our analysis in Proposition 4.4, it
is equivalent to check that the combined constraint (8) holds. By Lemmas 4.10 and 4.12, in
equilibrium, we have max(τm,τwi) ≥ˆτwi = ρmwi for all i < n and τm = ˆτm, so max(τm,τwn) ≥
ˆτm > ρmwn. This implies all the thresholds in equilibrium are higher than they were in the
platform’s ﬁrst-best solution. In other words, the corresponding matching rates ξθ are no larger
than they were in the ﬁrst-best solution. It follows that the combined constraint (8) can only
have more slack, meaning that a stationary equilibrium is indeed induced by the choice of
f ∗
mwi and the thresholds discussed above.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
27
Our remaining task is to check that the realized welfare is suﬃcient by lower bounding ˆτm.
The intuition for the following calculation is that if type m is rejecting potential matches of
value u, then the expected payoﬀof type m must be at least u. Indeed, we have:
1
2OPT =
X
w∈W
ρmw · β∗
mw
=
X
w∈W

f ∗
mw
Z ∞
ρmw
udFmw

=
n
X
i=1
 
f ∗
mwi
Z ∞
max(ˆτm,ρmwi)
udFmwi
!
+
n
X
i=1
 
f ∗
mwi
Z max(ˆτm,ρmwi)
ρmwi
udFmwi
!
≤
n
X
i=1
 
f ∗
mwi
Z ∞
max(ˆτm,ˆτwi)
udFmwi
!
+
n
X
i=1
 
f ∗
mwi
Z ∞
ρmwi
ˆτm dFmwi
!
≤αm · 1
αm
n
X
i=1
 
f ∗
mwi
Z ∞
max(ˆτm,ˆτwi)
udFmwi
!
+ ˆτm
n
X
i=1
β∗
mwi
≤2αmˆτm.
The last inequality follows from (13) and the constraint on the β∗
mw from (7). Since 2αmˆτm is
the social welfare under the current allocation (where the factor of 2 comes from accounting
for the utilities of both sides), we have the desired lower bound on welfare relative to OPT.
Case 2: ˆτm ≤ρmwn. When ˆτm ≤ρmwn, it is possible that the ﬁrst-best choice of f ∗
mwi may not
induce a feasible equilibrium outcome, since type wn might accept more than the platform
intended in equilibrium, resulting in the combined constraint (8) being violated for type m.
To resolve this, we modify the ﬁrst-best optimal solution in one of two ways by considering
two subcases: In the ﬁrst subcase, we simply ignore type wn and match type m to types
w1,w2,...,wn−1. In the second subcase, we only match type m to type wn. At least one of
these two subcases will obtain half the ﬁrst-best optimal welfare.
Subcase 2(a): Pn−1
i=1 ρmwi · β∗
mwi > 1
2OPT. In this subcase, we consider a modiﬁed version
of the ﬁrst-best optimal solution from before, where βmwn is set to 0. We will show that the
resulting equilibrium coincides with the ﬁrst-best equilibrium for the submarket involving
only type m and types w1,...,wn−1.
First, note that such a modiﬁcation incurs at most a 1
2OPT loss in ﬁrst-best welfare
by assumption. Next, recall that type m’s threshold in equilibrium must satisfy the ﬁxed
point equation (13) for the f ∗
mwi values for i < n. It follows that the resulting τm is at most
ˆτm (e.g., via the argument for Lemma 4.11).21 Since ˆτm ≤ρmwn ≤ρmwi = ˆτwi for all i < n
by Lemmas 4.9 and 4.10, we must have max(τm,τwi) = ˆτwi by Lemmas 4.11 and 4.12. This
21 Here, we clarify that ˆτm is as deﬁned in (13) for the f ∗
mwi values for the unmodiﬁed ﬁrst-best market.

28
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
shows that the resulting equilibrium is identical to the corresponding ﬁrst-best solution. (In
particular, it is feasible.) Hence the social welfare obtained is Pn−1
i=1 ρmwi · β∗
mwi > 1
2OPT.
Subcase 2(b): ρmwn · β∗
mwn ≥1
2OPT. In this subcase, we consider the ﬁrst-best solution
with βmw = 0 for all w ̸= wn, and set βmw = min(αm,αwn). In this new “single-edged”
market, where we only match types m and wn, the ﬁrst-best social welfare will be at least
1
2OPT by assumption. In equilibrium, the thresholds must satisfy max(τm,τwn) = ρmwn
by appropriate analogs of Lemmas 4.10 to 4.12. Thus, like in Subcase 2(a), the resulting
equilibrium is both feasible and identical to that of the corresponding ﬁrst-best solution
and its social welfare is at least 1
2OPT.
Wrapping Up. Theorem 4.1 now follows straightforwardly from our work up to this point. Since
the total of the ﬁrst-best welfares for the each of the “star-shaped” submarkets is at least half the
platform’s ﬁrst-best welfare for the overall market and since Proposition 4.8 shows that at least
half of the ﬁrst-best welfare for each submarket can be realized in stationary equilibrium, we obtain
the desired 4-approximation for Theorem 4.1.
5.
Further Examples via Simulations
To provide further intuition and to give some concrete examples of the model, we present in this
section the results of numerical simulations for a set of simple markets. We compare the outcome
achieved by our approach to search design against the ﬁrst-best outcome (deﬁned in Section 4) as
well as against the baseline outcome of random meeting.22 We present two sets of simulations: In the
ﬁrst set of simulations, we interpolate between the two settings—horizontal and vertical—featured in
Section 3.3. In the second set of simulations, we highlight the role of search friction (parameterized
by δ) on the relative performances of random meeting and designed search.
5.1.
Setup
For both sets of simulations, the market has four types on each side, i.e., M = {m1,m2,m3,m4} and
W = {w1,w2,w3,w4}. We assume that (αm1,αm2,αm3,αm4) = (1,4,4,1) and (αw1,αw2,αw3,αw4) =
(2,2,3,2). Note that these arrival rates are such that there is slight asymmetry between the types
on the two sides.23
For the ﬁrst set of experiments, we consider interpolating linearly between a purely horizontal
market and a purely vertical market. We assume that each distribution Dmiwj is normal N(µij,σ2),
22 While we do not give an algorithm with formal guarantees to compute the outcome of the market under random
meeting, the outcome can nonetheless be approximated via ﬁxed point iteration. Speciﬁcally, we iteratively compute
agents’ thresholds and equilibrium populations, under the assumption that agents meet uniformly randomly, until a
ﬁxed point is reached. This iteration-based approximation converges for all markets considered in this section.
23 This asymmetry leads to more interesting outcomes than if the markets were, say, symmetric. If the markets were
symmetric, for our choices of utility values, it would be optimal to fully match type mi to type wi for all i.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
29
Figure 3
On the left-hand side, we plot social welfare for our approximation algorithm and the two benchmarks
of the ﬁrst best and random meeting as q ranges from 0 to 1. On the right-hand side, we plot the same data, but
normalize the welfare values so that the ﬁrst-best social welfare is 1 for each market.
with mean µij determined linearly interpolating between two extreme horizontal and vertical
markets. In the horizontal market, we assume that µh
ij = 0 if i ̸= j and µh
ii = 8 for all i. That is,
agents only have positive expected utility from a match if they are of “corresonding” types. In the
vertical market, we assume that µv
ij = (5 −i)(5 −j) for all i,j. That is, each type prefers others
on the opposite side with smaller indices, with expected utilities being supermodular with respect
to this ordering. To interpolate with weight q ∈[0,1], we set µij = (1 −q)µh
ij + qµv
ij. Finally, we set
σ = 0.1 and δ = 1. The results of these simulations are plotted in Figure 3.
For the second set of experiments, we vary the search friction parameter δ. We run this experiment
using the market described above, with weighting q = 0.5. To illustrate the role that δ plays in the
relative performance of the approaches, we vary it between 0.01 and 10, evaluating the approaches
for δ belonging to the set {0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10}. The results of these simulations
are plotted in Figure 4.
5.2.
Discussion
For the ﬁrst set of simulations (see Figure 3), we ﬁnd that our approximation algorithm has
quite good performance relative to the ﬁrst best and is better than random meeting—sometimes
signiﬁcantly so—throughout. The performance gap between random meeting and our approximation
to the second best is most apparent for the purely horizontal market, corroborating the intuition from
Example 3.4 that directed search is particularly important when agents’ preferences have a strong
horizontal component. As the market becomes more vertical, the gap between the performances of
our approximation algorithm and random meeting narrows. One intuition for why this occurs is
that in more vertical markets, while agents match more “assortatively,” they also tend to ﬁnd more
types acceptable and thus random meeting can be more successful relative to the stark proﬁle of
the horizontal market. Nonetheless, even in such a setting, there is a clear value to directed search
(e.g., via our algorithm).

30
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Figure 4
On the left-hand side, we plot social welfare for our approximation algorithm and the two benchmarks
of the ﬁrst best and random meeting as δ ranges from 0.01 to 10. On the right-hand side, we plot the same data,
but normalize the welfare values so that the ﬁrst-best social welfare is 1 for each market.
For the second set of simulations (see Figure 4), we ﬁnd that as search friction increases—and
thus agents have fewer opportunities to search and match—directed search becomes increasingly
necessary to achieve high welfare. Intuitively, such a trend holds because when agents are allowed
more opportunities, agents can aﬀord to perform search on their own. On the other hand, when
agents only have few opportunities to match, directed search has a larger advantage because the
platform can arrange meetings so that agents are able to quickly ﬁnd desirable matches.
Finally, we note that for the examples considered, our approximation algorithm performs much
better than the worst-case 4-factor approximation proved in Theorem 4.1. This is likely because
the markets considered for the simulations are relatively simple, with only four types on each side.
6.
Conclusion
Similar to shopping platforms, matching platforms also rely on recommendation systems to facilitate
search by oﬀering personalized assortments. However, the two-sided and decentralized nature of
these markets makes the design of their recommendation systems fundamentally diﬀerent from those
used for product recommendation. Congestion and misaligned incentives often necessitate making
recommendations that are sub-optimal for certain agents but improve the overall social welfare. In
this work, we take a ﬁrst step toward understanding the intricacies of designing recommendation
systems based on imperfect knowledge about preferences while taking agents’ strategic behavior
into consideration. Somewhat surprisingly, we show that for general symmetric preferences, carefully
designed assortments with very limited choice can achieve approximately optimal welfare.
While our framework is general in terms of agent types and the structure of symmetric preferences,
it abstracts away from some considerations, which we discuss next. In our model, we assume that
once the platform suggests a meeting between two agents, those agents meet, observe the utility
of matching with each other, and make a decision to accept or reject the match. However, since

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
31
meeting—which corresponds to observing the realized utility via a screening action—can be costly,
one might consider a richer model (similar to that of Kanoria and Saban (2021)) in which agents
decide whether to (i) accept/reject the match without meeting, (ii) meet at a screening cost and then
make an accept/reject decision. Studying search design under such a model for general preference
structures is a valuable direction for future work. Incorporating screening cost would involve
enriching the set of actions for each agent. This, in turn, would make encoding agents’ strategic
behavior in the design problem more complex. Furthermore, the tractability of our framework as well
as our design problem crucially relies on having symmetric preferences and a stationary environment.
As such, incorporating asymmetric match utilities or non-stationary behavior—such as history-
dependent departure rates or strategies—would require new modeling/technical developments and
is an interesting direction for future research. It is well-known that even for simple asymmetric
preferences and under random meeting, multiple stationary equilibria may arise (Burdett and Coles
1997). Thus, the platform design problem may go beyond designing meeting distributions and
involve mechanisms for equilibrium selection.
We conclude by noting that in this work, we focus on the design of matching markets with
nontransferable utilities. Such models, also known as marriage models, are motivated by online
dating platforms or labor markets with ﬁxed wages. They can also be viewed as a special case
of markets with transferable utilities in which the match utility is evenly split between the two
parties (Smith 2006). Studying a similar setting with transfers—in which the two agents’ payoﬀs
constitute the Nash bargaining solution—is also well-motivated in the context of online labor
markets where wages are negotiable. In such a setting, the platform’s ﬁrst-best solution remains
unchanged. As a future direction, one could explore the possibility of building on our hardness
result and approximation scheme to establish analogous results for designing search in matching
markets with transferable utilities.
References
David J Abraham, Ariel Levavi, David F Manlove, and Gregg O’Malley. The stable roommates problem with
globally ranked pairs. Internet Mathematics, 5(4):493–515, 2008.
Heiner Ackermann, Paul W Goldberg, Vahab S Mirrokni, Heiko R¨oglin, and Berthold V¨ocking. Uncoordinated
two-sided matching markets. SIAM Journal on Computing, 40(1):92–106, 2011.
Hiroyuki Adachi. A search model of two-sided matching under nontransferable utility. Journal of Economic
Theory, 113(2):182–198, 2003.
Philipp Afeche, Rene Caldentey, and Varun Gupta. On the optimal design of a bipartite matching queueing
system. Operations Research, 2021.
Mohammad Akbarpour, Shengwu Li, and Shayan Oveis Gharan. Thickness and information in dynamic
matching markets. Journal of Political Economy, 128(3):783–815, 2020.

32
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Jerry Anunrojwong, Krishnamurthy Iyer, and Vahideh Manshadi. Information design for congested social
services: Optimal need-based persuasion. Available at SSRN 3849746, 2021.
Ali Aouad and Daniela Saban. Online assortment optimization for two-sided matching platforms. Available
at SSRN, 2020.
Nick Arnosti and Peng Shi. Design of lotteries and wait-lists for aﬀordable housing allocation. Management
Science, 66(6):2291–2307, 2020.
Itai Ashlagi, Patrick Jaillet, and Vahideh H. Manshadi. Kidney exchange in dynamic sparse heterogenous
pools. In Proceedings of the Fourteenth ACM Conference on Electronic Commerce, EC ’13, page
25–26, New York, NY, USA, 2013. Association for Computing Machinery. ISBN 9781450319621. doi:
10.1145/2482540.2482565. URL https://doi.org/10.1145/2482540.2482565.
Itai Ashlagi, Maximilien Burq, Patrick Jaillet, and Vahideh Manshadi. On matching and thickness in
heterogeneous dynamic markets. Operations Research, 67(4):927–949, 2019a.
Itai Ashlagi, Anilesh K Krishnaswamy, Rahul Makhijani, Daniela Saban, and Kirankumar Shiragur. Assortment
planning for two-sided sequential matching markets. arXiv preprint arXiv:1907.04485, 2019b.
Itai Ashlagi, Mark Braverman, Yash Kanoria, and Peng Shi. Clearing matching markets eﬃciently: informative
signals and match recommendations. Management Science, 66(5):2163–2193, 2020.
Itai Ashlagi, Faidra Monachou, and Afshin Nikzad. Optimal dynamic allocation: Simplicity through infor-
mation design. In Proceedings of the 22nd ACM Conference on Economics and Computation, pages
101–102, 2021.
Siddhartha Banerjee, Sreenivas Gollapudi, Kostas Kollias, and Kamesh Munagala. Segmenting two-sided
markets. In Proceedings of the 26th International Conference on World Wide Web, WWW 2017, Perth,
Australia, April 3-7, 2017, pages 63–72. ACM, 2017.
Ken Burdett and Melvyn G. Coles. Marriage and class. The Quarterly Journal of Economics, 112(1):141–168,
1997.
Hector Chade. Matching with noise and the acceptance curse. Journal of Economic Theory, 129(1):81–113,
2006.
Hector Chade, Jan Eeckhout, and Lones Smith. Sorting through search and matching models in economics.
Journal of Economic Literature, 55(2):493–544, 2017.
Deeparnab Chakrabarty and Gagan Goel. On the approximability of budgeted allocations and improved
lower bounds for submodular welfare maximization and GAP. SIAM J. Comput., 39(6):2189–2211,
2010.
Yeon-Koo Che and Olivier Tercieux. Optimal queue design. In Proceedings of the 22nd ACM Conference on
Economics and Computation, pages 312–313, 2021.
Peter Coles and Ran Shorrer. Optimal truncation in matching markets. Games and Economic Behavior, 87:
591–615, 2014.
Laura Doval and Bal´asz Szentes. On the eﬃciency of queueing in dynamic matching markets. Technical report,
Working paper, Division of the Humanities and Social Sciences, California Institute of Technology, 2019.
Darrell Duﬃe, Lei Qiao, and Yeneng Sun. Dynamic directed random matching. Journal of Economic Theory,
174:124–183, 2018.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
33
Ehsan Emamjomeh-Zadeh, Yannai A Gonczarowski, and David Kempe. The complexity of interactively
learning a stable matching by trial and error. arXiv preprint arXiv:2002.07363, 2020.
Itai Feigenbaum, Yash Kanoria, Irene Lo, and Jay Sethuraman. Dynamic matching in school choice: Eﬃcient
seat reassignment after late cancellations. Management Science, 66(11):5341–5361, 2020.
Yannai A Gonczarowski, Noam Nisan, Rafail Ostrovsky, and Will Rosenbaum. A stable marriage requires
communication. Games and Economic Behavior, 118:626–647, 2019.
Hanna Halaburda, Mikolaj Jan Piskorski, and Pinar Yildirim. Competing by restricting choice: The case of
matching platforms. Management Science, 64(8):3574–3594, 2018.
Johan H˚astad. Some optimal inapproximability results. J. ACM, 48(4):798–859, 2001.
Nicole Immorlica and Mohammad Mahdian. Incentives in large random two-sided markets. ACM Transactions
on Economics and Computation (TEAC), 3(3):1–25, 2015.
Nicole Immorlica, Jacob Leshno, Irene Lo, and Brendan Lucier. Information acquisition in matching markets:
The role of price discovery. Available at SSRN, 2020.
Yash Kanoria and Daniela Saban. Facilitating the search for partners on matching platforms. Management
Science, page to appear, 2021.
Stephan Lauermann and Georg N¨oldeke. Stable marriages and search frictions. Journal of Economic Theory,
151:163–195, 2014.
Jan Karel Lenstra, David B. Shmoys, and ´Eva Tardos. Approximation algorithms for scheduling unrelated
parallel machines. Mathematical Programming, 46:259–271, 1990.
Lydia T. Liu, Horia Mania, and Michael I. Jordan. Competing bandits in matching markets. In The
23rd International Conference on Artiﬁcial Intelligence and Statistics, AISTATS 2020, 26-28 August
2020, Online [Palermo, Sicily, Italy], volume 108 of Proceedings of Machine Learning Research, pages
1618–1628. PMLR, 2020.
Afshin Nikzad. Thickness and competition in ride-sharing markets. Available at SSRN 3065672, 2017.
Adam Ozimek. Report: Freelancing and the economy in 2019. 2019.
Pew Research Center. The virtues and downsides of online dating. 2020.
Ignacio R´ıos, Daniela Saban, and Fanyin Zheng. Improving match rates in dating markets through assortment
optimization. Available at SSRN, 2020.
Alvin E Roth. The economics of matching: Stability and incentives. Mathematics of operations research, 7(4):
617–628, 1982.
Robert Shimer and Lones Smith. Assortative matching and search. Econometrica, 68(2):343–369, 2000.
Robert Shimer and Lones Smith. Matching, search, and heterogeneity. The BE Journal of Macroeconomics, 1
(1), 2001.
Lones Smith. The marriage model with search frictions. Journal of political Economy, 114(6):1124–1144,
2006.
Yeneng Sun. The exact law of large numbers via Fubini extension and characterization of insurable risks.
Journal of Economic Theory, 126(1):31–69, 2006.

34
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Appendix
A.
Formal Deﬁnitions of MDP, Strategies, and Equilibrium
This section develops the mathematical formalization for the agents’ decision problem introduced in Section 3.1.
We also prove Lemma 3.3 and Proposition 3.1 using the formalization developed here.
A.1.
Solving for the Agent’s Best Response
Recall from Section 3.1 that any ﬁxed set of assortments deﬁnes a game for the agents, in which agents
decide who to accept and reject in their meetings. Recall also that agents play symmetric time- and history-
independent strategies. We thus write the strategy of type θ agents as a function σθ(θ′,u) taking values in
[0,1] which speciﬁes the probability that a type θ agent accepts when meeting a type θ′ agent whom they
value at utility u. Then σθ(θ′,u) · σθ′(θ,u) is the probability that two agents of types θ and θ′ who value each
other at utility u mutually accept. For measure-theoretic purposes, we restrict our attention to strategies σθ
that are measurable as a function in u for all θ′.
Rather than modeling a full-ﬂedged dynamic game, we model each type θ agent as facing a continuous-time
MDP deﬁned in terms of their (time-invariant) assortment λθ and opposing types’ (time-invariant) strategy
proﬁles σθ′. We may do this because, as noted in Section 3.1, agents are only aﬀected by the actions of other
types in aggregate; thus any agent’s own strategic decision will not aﬀect the (aggregate) action of others.
In this MDP, the agent starts in a “waiting” state. From here, they either transition to an “exited” state
when they leave unmatched due to a life event or to a “meeting” state when they meet another agent. At
this “meeting” state, the agent makes a decision to either “accept” or “reject”. Then, if they match, they
transition to “exited” with a payoﬀ; otherwise, they transition back to “waiting.”
That life events and meetings occur in a memoryless manner actually means we can rid ourselves of the
continuous-time aspect of this MDP and get an equivalent discrete-time MDP. Formally, we set up this
discrete-time MDP as follows: The agent’s initial state is Waiting. State Waiting transitions to Exited with
probability δ/(δ +P
θ′ λθ(θ′)) and to PreMeetingθ′ with probability λθ(θ′)/(δ +P
θ′ λθ(θ′)). State PreMeetingθ′
transitions to Meetingθ′,u with u drawn from Dθθ′. State Meetingθ′,u is a decision point where the agent can
either Accept or Reject. If Accept is chosen, with probability σθ′(θ,u) they transition to Exited and receive
payoﬀu. In all other cases, they return to state Waiting. Finally, Exited is a terminal state.
The optimal policy for this MDP admits a simple informal analysis: If uθ is the expected payoﬀof an
agent in state Waiting, then uθ is also the expected continuation payoﬀif an agent chooses Reject in state
Meetingθ′,u. Hence the agent should choose Accept if u > uθ and Reject if u < uθ. If u = uθ, the agent is
indiﬀerent between the two options; however, since the distributions Dmw are continuous, this occurs with
probability 0. We now state this observation more formally:
Lemma A.1. For any best response σθ, let uθ be its expected payoﬀ. Then
σθ(θ′,u) =
(
1
if u > uθ
0
if u < uθ
for all θ′ such that λθ(θ′) > 0 and almost all u in the support of σθ′(θ,u)dFθθ′.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
35
Proving such a claim is standard in the analysis of MDPs, so we omit a detailed formal proof.
Lemma A.1 delineates a collection of dominated strategies, namely those that reject potential matches that
provide greater utility than the continuation utility (i.e., strategies σθ such that σθ(θ′,u) < 1 for some θ′ and
u > uθ). In the subsequent analysis, we rule out such dominated strategies to eliminate “bad” equilibria, e.g.,
when all agents reject all potential matches (knowing that no one else ever accepts).
Ruling out dominated strategies as above in fact lets us focus on equilibria in threshold strategies, where
each type has a threshold τθ and accepts if and only if u ≥τθ. Our next lemma shows that any equilibrium in
non-dominated strategies is equivalent, in a certain sense, to an equilibrium in threshold strategies, where
each type’s threshold is also their expected utility:
Lemma A.2. Suppose all agents are playing best responses where they accept all potential matches worth at
least their expected utility. If type θ agents all switch to playing the threshold strategy with threshold τθ = uθ,
where uθ is the expected utility of type θ agents, then each type’s strategy is still a best response. Moreover,
the distribution of matches and the utilities at which they are realized remains the same (up to measure 0).
Proof. Since type θ agents already accept all potential matches worth at least uθ, by switching to the threshold
strategy with threshold uθ, the only change is that they now reject all potential matches worth less than uθ.
By Lemma A.1, accepting such potential matches was already a probability 0 event to begin with. Hence the
distribution of realized matches remains the same.
To see that all strategies are still best responses, notice that the expected utility of type θ agents does not
change. Furthermore, type θ agents rejecting more matches only restricts the choice sets of agents on the
opposite side. Hence their strategies σθ′ remain best responses also.
Applying Lemma A.2 in succession to all types θ ∈Θ allows us to convert any equilibrium to an equivalent
equilibrium in threshold strategies, such that each agent is thresholding at their expected utility. Thus,
without loss of generality, we may restrict our attention to such equilibria.
We can also show a converse of sorts to Lemma A.2, in which we characterize the optimal threshold for
type θ as a solution to a ﬁxed point equation:
Lemma A.3. There exists a unique ﬁxed point satisfying τθ = uθ (viewing uθ as a function of τθ). In
particular, if τθ satisﬁes the ﬁxed point equation, then τθ is the unique threshold best response for type θ
agents such that τθ = uθ.
Proof. Let τθ be a best response threshold satisfying the ﬁxed point equation. (By Lemma A.2, such a τθ
exists.) Note that no threshold τ ′
θ > τθ can satisfy the ﬁxed point equation because τθ is a best response. So
suppose τ ′
θ < τθ. Then, an agent thresholding at τ ′
θ would leave the market no later than an agent thresholding
at τθ. If they leave strictly earlier, then they must have left with payoﬀat least τ ′
θ. And conditioned on leaving
at the same time, their expected payoﬀis τθ. The latter occurs with positive probability, so their expected
payoﬀwhen thresholding at τ ′
θ exceeds τ ′
θ. It follows that τ ′
θ is not a ﬁxed point, making τθ the unique ﬁxed
point.

36
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
A.2.
Proof of Lemma 3.3
Proof of Lemma 3.3. To compute the agent’s expected payoﬀat state Waiting, we can condition on the event
that the agent does not return to Waiting. Then, the conditional probability of matching with an agent of
type θ′ is
λθ(θ′)
R ∞
max(τθ,τθ′ ) dFθθ′
δ + P
θ′

λθ(θ′)
R ∞
max(τθ,τθ′ ) dFθθ′

and the expected payoﬀconditioned on matching with an agent of type θ′ is
R ∞
max(τθ,τθ′ ) udFθθ′
R ∞
max(τθ,τθ′ ) dFθθ′ .
Summing over all θ′ the product of the above two expression gives us the ﬁrst equality. An application of
Lemma 3.2 along with the deﬁnition ζθ = ξθ + δ gives us the second statement.
A.3.
Proof of Proposition 3.1: Equilibrium Play for Fixed Assortments
In this section, we complete the proof Proposition 3.1, which states that our model makes a unique prediction
of equilibrium play given any ﬁxed set of assortments. We show that there exists a strategy proﬁle where
each strategy is a best response and that this strategy proﬁle is unique. Uniqueness implies that stationary
equilibria are robustly self-sustaining (e.g., a market in stationary equilibrium cannot be disrupted by agents
switching to another strategy proﬁle of best responses) and that the social welfare of an assortment is
well-deﬁned (see Section 3.2). Our proof of the existence of a proﬁle of best responses is constructive and can
be implemented as an algorithm to compute equilibrium play. Consequently, our model’s unique prediction of
equilibrium play can also be eﬃciently computed by the platform.
To prove that a proﬁle of best responses exists, we show that iterating the best response map converges
after ﬁnitely many iterations. (In a sense, this iteration behaves like a Gale-Shapley operator.) Our uniqueness
result derives from the symmetric valuations assumption that we make (see Section 2.2): Symmetric valuations
induce a linear ordering over all possible matches by their valuations. This rules out “cycles” in the preferences
and thus the possibility of multiple equilibria.
More formally, let the best response map take as input a strategy proﬁle {σθ}θ∈Θ and output a new strategy
proﬁle {σ′
θ}θ∈Θ such that each σ′
θ is the threshold strategy that thresholds at the expected utility of the
agent under the input strategy proﬁle. (This map is a best response by Lemma A.3.) To show existence of
equilibrium, we will show that iterating this map on the strategy proﬁle converges.
Proposition A.4. Given assortments {λθ}θ∈Θ, there is a unique proﬁle {σθ}θ∈Θ in non-dominated strategies
such that each σθ is a best response (up to the equivalence given in Lemma A.2). This strategy proﬁle can be
found by iterating the best-response map O(|Θ|) times.
Before we proceed with the proof of Proposition A.4, we note that the claims of Proposition 3.1 follow
from combining Lemmas A.2 and A.3 with Proposition A.4.
Proof. By applying Lemma A.2, we may restrict our attention to agents playing threshold strategies where
each type thresholds at their expected utility uθ.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
37
To show existence, we iterate the best response map starting from the strategy proﬁle where each type’s
threshold is 0. We show that this iteration converges after O(|Θ|) steps. In the sequel, when we refer to the
thresholds of the i-th iteration, we mean the thresholds after applying the best response map i times.
Our ﬁrst step is to show that each type’s threshold has the following pattern: The sequence of thresholds
after an odd number of iterations is (weakly) monotonically decreasing and that the sequence of thresholds
after an even number of iterations is (weakly) monotonically increasing. We prove this claim by induction.
For the base case, note that the claim is trivially true when comparing the zeroth and second iterations, since
all thresholds are initialized to 0. Next, suppose the claim is true for iterations i −3 and i −1. Then, note
that the thresholds after iterations i −2 and i are each given by the expected utilities of agents. Now, if i is
odd, then we know that thresholds after iteration i −1 are higher than those after iteration i −3; hence, the
expected utilities, and therefore the new thresholds, are uniformly lower. The analogous argument works for
even i.
A similar argument shows that for each type, the inﬁmum of that type’s thresholds after odd-numbered
iterations is at least the supremum of that type’s thresholds after even-numbered iterations: The claim clearly
holds for the initialization of all thresholds at 0. Next, suppose the claim holds for iteration i −1. If i is odd,
then let j > i be any even number. (Note that the claim follows from the monotonicity property above for
j < i.) The thresholds after the j-th iteration are best responses to thresholds after the (j −1)-th iteration.
By the inductive hypothesis, all the thresholds after the (j −1)-th iteration are at least those of the (i −1)-th
iteration. Hence the expected utility of each type in the (j −1)-th iteration must be at most that of each
type in the (i −1)-th iteration. Hence the thresholds after the j-th iteration are uniformly smaller than the
thresholds after the i-th iteration. The analogous argument works for even i.
The ﬁnal step for showing the convergence of this best response iteration is to show that after each
odd-numbered iteration, at least one additional type will have their threshold “frozen,” meaning that it will
not change in any future iterations. Indeed, after any odd-numbered iteration, consider the agent type θ with
the highest threshold τθ who has not yet been shown to be frozen. Then, observe that in all future iterations,
no unfrozen agent will have a higher threshold by the two claims above—the ﬁrst claim handles odd-numbered
iterations and the second claim handles even-numbered iterations. It follows that type θ would not want to
alter its best response in all following iterations: It will not be aﬀected by the strategy of any unfrozen type,
because their thresholds will be at most τθ; the strategies of all frozen types will remain the same. Thus, type
θ will be frozen after this iteration. Since at least one additional type has their threshold frozen after each
odd-numbered iteration, iterating the best response map will converge after O(|Θ|) iterations.
Next, we show the uniqueness of this equilibrium. Suppose for the sake of contradiction that there are
two distinct strategy proﬁles {σθ}θ∈Θ and {σ′
θ}θ∈Θ such that each strategy is both a best response and a
threshold strategy. Let the two sets of thresholds for these two strategy proﬁles be {τθ}θ∈Θ and {τ ′
θ}θ∈Θ.
Furthermore, suppose each threshold is its corresponding type’s expected utility. Since the two strategy
proﬁles are distinct, there exists a type θ such that τθ ̸= τ ′
θ and max(τθ,τ ′
θ) is maximal. Without loss of
generality, we may assume that τθ > τ ′
θ. It follows that if τθ′ > τθ, then τθ′ = τ ′
θ′, and if τθ ≥τθ′, then τθ ≥τ ′
θ′.

38
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Consequently, max(τθ,τθ′) = max(τθ,τ ′
θ′) for all θ′. But this gives us the following contradiction: Threshold τθ
is type θ’s expected utility, so Lemma 3.3 tells us
τ ′
θ < τθ =
P
θ′

λθ(θ′)
R ∞
max(τθ,τθ′ ) udFθθ′

δ + P
θ′

λθ(θ′)
R ∞
max(τθ,τθ′ ) dFθθ′
 =
P
θ′

λθ(θ′)
R ∞
max(τθ,τ′
θ′ ) udFθθ′

δ + P
θ′

λθ(θ′)
R ∞
max(τθ,τ′
θ′ ) dFθθ′
.
That the right-hand side exceeds the left-hand side means thresholding at τ ′
θ is not actually a best response,
since we could do better by choosing our threshold to be τθ. Therefore, two such distinct strategy proﬁles
cannot exist, proving the proposition.
B.
Omitted Proofs from Section 4
B.1.
Proof of Proposition 4.3
Proof of Proposition 4.3. We prove this proposition via example. Let ε′ = ε/3. Consider a market where
M = {m} and W = {wH,wL}. That is, there is a single type on side M, while side W is split into agents of
high (H) and low (L) types. We assume that the utility distributions DmwH and DmwL are point masses at
1
ε′
and 1
2, respectively.24 Suppose further that the arrival rates are such that αm = 2, αwH = ε′, and αwL = 2 −ε′.
Finally, we consider this example with δ = ε′ (i.e., the market becomes nearly frictionless as ε′ →0).
It is not hard to see that the ﬁrst-best payoﬀinvolves matching the entire supply of type m to the entire
supplies of types wH and wL, with agents accepting all matches. The ﬁrst-best social welfare is thus
2
1 + δ

αwH · 1
ε′ + αwL · 1
2

= 4 −ε′
1 + ε′ .
Notice that 4−ε′
1+ε′ ≥4 −5ε′.
On the other hand, consider any stationary equilibrium of this market. We consider two cases: whether
or not type m agents match with type wL agents. If type m agents match with type wL agents, then the
expected utility of type m agents must be at most 1
2, in which case the total welfare of the market is at most
2 · αm · 1
2 = 2. On the other hand, suppose type m does not match with type wL agents. We can upper bound
the welfare of this outcome by that of the utility of all type wH agents getting matched, i.e., 2·αwH · 1
ε′ = 2. It
follows that the ratio between the ﬁrst-best welfare and the best possible outcome for OptimalDirectedSearch
is at least
4−ε′
1+ε′
2
≥2 −5
2ε′ > 2 −ε′.
B.2.
Proof of Proposition 4.4
Proof of Proposition 4.4. We ﬁrst reparameterize the ﬂow balance constraint by introducing new variables
fmw := ηmλm(w) = ηwλw(m)
24 Technically, these distributions do not satisfy our continuity assumption. We present our example this way for
simplicity’s sake—the same example can be made to work with continuous distributions by adding a small amount of
Gaussian noise to each utility value.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
39
to replace λm(w) and λw(m). (For symmetry in notation, we will use fmw and fwm interchangeably.) With
these new variables, we may rewrite the objective symmetrically as
2
X
m∈M
X
w∈W

fmw
Z ∞
τmw
udFmw

.
Furthermore, note that ηθ > 0 by (6a). Hence we may scale the capacity constraint (6c) by ηθ and replace all
occurrences of ηθλθ(θ′) with fθθ′ to obtain the equivalent constraint
ηθ ≥
X
θ′
fθθ′
(15)
for all θ ∈Θ. We similarly replace the matching rate equation (6d) with
ξθηθ =
X
θ′
 
fθθ′
Z ∞
τθθ′
dFθθ′
!
.
(16)
Our next step is to absolve ourselves of the variables ξθ and ηθ. For the former, we can simply merge
constraints (6a) and (16), as both are equalities involving ξθηθ, to get
αθ = δηθ +
X
θ′
 
fθθ′
Z ∞
τθθ′
dFθθ′
!
.
(17)
Now, from (17), we can get a deﬁnition of ηθ, which we can substitute into the only remaining constraint (15)
on ηθ to get a combined ﬂow balance, capacity, and stationarity constraint
αθ ≥
X
θ′
 
fθθ′
 
δ +
Z ∞
τθθ′
dFθθ′
!!
(18)
for each θ ∈Θ.
To obtain the linear program constraints, we make one ﬁnal substitution of
βmw := fmw

δ +
Z ∞
τmw
dFmw

,
(19)
into (18), which gives us constraints (7a) and (7b) of the linear program. We also substitute βmw into the
objective, which yields the equivalent objective
2
X
m∈M
X
w∈W
 
βmw ·
R ∞
τmw udFmw
δ +
R ∞
τmw dFmw
!
.
(20)
The only remaining variables that we haven’t taken into account are the thresholds τmw. However, notice
that the optimization problem is eﬀectively unconstrained in τmw—given any choice of βmw and τmw, we may
choose a fmw so that the deﬁnition (19) is satisﬁed. Thus, we may simply set τmw so that its contribution
R ∞
τmw udFmw
δ +
R ∞
τmw dFmw
(21)
to the objective is maximized. As this is exactly the deﬁnition of ρmw, we conclude that the linear program
(7) has the same objective value as the platform’s ﬁrst-best optimization problem.
It remains to prove the second claim in the equivalence between the linear program (7) and the platform’s
ﬁrst-best optimization problem. For this, we note that given any feasible choice of {βmw}m∈M,w∈W, we can
reverse all of the substitutions made and obtain corresponding values for {λθ}θ∈Θ, {ηθ}θ∈Θ, {ξθ}θ∈Θ, where
the variables {τmw}m∈M,w∈W are set as to maximize (21).

40
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
B.3.
Proof of Lemma 4.5
Proof of Lemma 4.5. The logarithmic derivative of A(τ) is
d
dτ log(A(τ)) =
F ′(τ)
δ +
R ∞
τ
dF −τF ′(τ)
R ∞
τ udF =
Z ∞
τ
(u −τ)dF −τδ

F ′(τ)
 δ +
R ∞
τ
dF
 R ∞
τ udF
.
The sign of this derivative is given by the ﬁrst term on the right-hand side, since the fraction on the right-hand
side is always non-negative. This ﬁrst term is monotonically decreasing:
d
dτ
Z ∞
τ
(u −τ)dF −τδ

= −

δ +
Z ∞
τ
dF

< 0.
Therefore, the expression is maximized when this term vanishes, i.e., when
τ =
R ∞
τ udF
δ +
R ∞
τ
dF = ρ.
Moreover, since the derivative is non-negative when τ ≤ρ and is non-positive when τ ≥ρ, we have the desired
monotonicities when τ ≤ρ and τ ≥ρ as well.
We also state and prove a generalization of Lemma 4.5 to non-zero thresholds and multiple types on the
opposite side. That is, the ﬁxed point and monotonicity properties hold generally:
Lemma B.1. Deﬁne
B(τ) =
Pn
i=1

λi
R ∞
max(τ,τi) udFi

δ + Pn
i=1

λi
R ∞
max(τ,τi) dFi
,
where δ > 0, λi > 0 for all i, τi ≥0 for all i, and Fi is a continuous distribution for each i. Let ρ satisﬁes the
ﬁxed point equation ρ = maxτ≥0 B(τ). Then B(ρ) = ρ. Moreover, B is monotonically increasing for τ ≤ρ and
monotonically decreasing for τ ≥ρ.
Proof. Note that we can write B(τ) as
B(τ) =
R ∞
τ udG
δ +
R ∞
τ
dG,
where dG = Pn
i=1(λi · 1≥τi · dFi) is a new measure deﬁned on R in terms of λi, τi, and Fi. Here, 1≥τi denotes
the indicator function that is 1 on inputs at least τi and 0 otherwise. After appropriately normalizing the
numerator and denominator (by
R
R dG), the claim follows from Lemma 4.5.
B.4.
Proofs of Lemmas from Section 4.2.2
Proof of Lemma 4.9. Recall the platform’s ﬁrst-best optimization problem (7). In a star-shaped market, this
linear program reduces to a fractional knapsack problem where the platform has a knapsack of size αm
and wishes to ﬁll it with items for each w ∈W of weight αw and value ρmw. Thus, there exists a ﬁrst-best
solution {β∗
mw}w∈W that matches type m agents exclusively with some subset {w1,...,wn} ⊆W such that
ρmw1 ≥ρmw2 ≥··· ≥ρmwn and β∗
mwi = αw for all i < n.
Proof of Lemma 4.10. If i < n, then β∗
mwi = αwi. Therefore,
ˆτwi =
1
αwi
f ∗
mwi
Z ∞
ˆτwi
udFmwi =
R ∞
ˆτwi udFmwi
δ +
R
ρmwi dFmwi
.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
41
And by Lemma 4.5, ˆτwi = ρmwi solves the equation. For i = n, since β∗
mwn ≤αwn, we have
ˆτwn =
1
αwn
f ∗
mwn
Z ∞
ˆτwn
udFmwn ≤
R ∞
ˆτwn udFmwn
δ +
R
ρmwn dFmwn
.
If ˆτwn > ρmwn, then by Lemma 4.5, we would have that the right-hand side is at most ρmwn, since the
expression
R ∞
τ udFmwn is monotonically decreasing in τ. This contradicts the assumption that ˆτwn > ρmwn.
Hence it must be the case that ˆτwn ≤ρmwn.
Proof of Lemma 4.11. This follows from the fact that for any threshold τm, we have that
τwi = 1
αθ
f ∗
mwi
Z ∞
max(τm,τwi )
udFmwi ≤
1
αwi
f ∗
mwi
Z ∞
τwi
udFmwi.
The argument used in Lemma 4.10 when i = n then lets us conclude that τwi ≤ˆτwi for all i.
Proof of Lemma 4.12. The lemma is clearly true if τm ≥ˆτwi. Now, suppose τm < ˆτwi. Then ˆτwi would satisfy
the ﬁxed point equation (12), meaning ˆτwi would be the equilibrium threshold of type wi.
C.
Hardness of Approximation
In this section, we show that the platform’s computational problem of ﬁnding a c-approximate welfare-
maximizing stationary equilibrium is NP-hard for some constant c > 1. This shows that, conditioned on
P ̸= NP, one cannot hope to obtain better than a constant factor approximation to the optimal in polynomial
time.
From a technical perspective, our approach very closely mirrors that of Chakrabarty and Goel (2010),
who show hardness of approximation for related problems (e.g., maximum budgeted allocation). While their
technique applies to our setting, it is not clear that their hardness results apply directly—a challenge speciﬁc
to our setting is that our optimization problem is continuous rather than discrete. To make this approach
work, we must show that our complicated feasibility set introduces a discrete element to the optimal allocation.
But as a consequence, we obtain a slightly worse constant c.
At a high level, we show hardness of approximation by reducing the problem of approximating MAX3LIN2
to ﬁnding a suﬃciently good approximation for the platform’s welfare maximization problem. (Recall that
MAX3LIN2 is the optimization problem where, given m linear equations in n variables over F2 such that each
equation involves exactly three variables, the objective is to maximize the number of equations simultaneously
satisﬁed by an assignment to the variables.) That MAX3LIN2 is hard to approximate is due to H˚astad (2001)
and is a direct corollary of his celebrated 3-bit PCP. We state this hardness result in terms of a promise
problem version of MAX3LIN2:
Theorem C.1 (H˚astad (2001)). It is NP-hard to distinguish between MAX3LIN2 instances where all but εm
equations are simultaneously satisﬁable and where at most
  1
2 + ε

m equations are simultaneously satisﬁable
for any ε > 0.
From this classical starting point, we derive hardness of approximation for the platform’s optimization
problem:

42
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
Theorem C.2. Computing a
  24
23 −ε

-approximate solution to the platform’s welfare maximization problem
is NP-hard for any ε > 0.
Proof. As stated above, we reduce instances of MAX3LIN2 to instances of the platform’s welfare maximization
problem. Speciﬁcally, we reduce to instances where the discount rate δ is small and the distributions Dmw are
point masses.25
Consider a MAX3LIN2 instance in n variables x1,x2,...,xn and m equations xiℓ⊕xjℓ⊕xkℓ= bℓfor ℓ∈[m].
We construct an instance of our matching market by deﬁning types, arrival rates, and payoﬀs based on these
variables and equations:
Types. Deﬁne variable types xi,0,xi,1 ∈M and switch type si ∈W for each variable xi. Deﬁne equation
types eℓ,(0,0,0),eℓ,(0,1,1),eℓ,(1,0,1),eℓ,(1,1,0) ∈W for each equation xiℓ⊕xjℓ⊕xkℓ= bℓ, one type for each
satisfying assignment to equation ℓ. That is, type eℓ,(bi,bj,bk) corresponds to the satisfying assignment
(xiℓ,xjℓ,xkℓ) = (bi ⊕bℓ,bj ⊕bℓ,bk ⊕bℓ).
Arrival rates. Let the variable and switch types for xi each arrive at rate αi = 4mi, where mi is the
number of equations that involve xi. Let each equation type arrive at rate 3.
Payoﬀs. Let matching type xi,b and type si yield payoﬀ2(1 + 2δ) for all b. Let matching type xi,b with any
equation type whose corresponding satisfying assignment has the variable xi with parity b yield payoﬀ1.
All other matches provide no utility.
With this setup, no agent on side W will ever reject positive utility matches in equilibrium, since all positive
utility matches yield the same payoﬀfor them. Moreover, no switch type agent will ever be rejected in
equilibrium, since they yield maximal payoﬀfor variable type agents.26 And if in equilibrium an agent of type
xi,b has expected continuation utility greater than 1, then they must only accept agents of type si. These
observations set the stage for our key lemma:
Lemma C.3. In any welfare-maximizing equilibrium, the expected payoﬀof all switch type agents will be
2(1 + 2δ)/(1 + δ). Furthermore, such an equilibrium can be achieved by only showing type si and type xi,b
agents to each other for some b ∈{0,1} for each i.
Proof. First, we show that some variable type xi,b must have expected payoﬀgreater than 1 for each i ∈[n].
Suppose otherwise, that there exists a welfare-maximizing stationary equilibrium such that the expected
payoﬀs of both variable types xi,b are at most 1 for some i. Then we could stop matching both types entirely,
by setting their assortments to 0. This comes at a loss in welfare of at most 2 · 4mi. Then, we could match
type xi,0 entirely to si, and obtain an increase in welfare of 4mi · 2(1 + 2δ)/(1 + δ) > 2 · 4mi. Finally, note that
these new assortments also produce a stationary equilibrium: Unmatching the variable types xi,b only adds
slack to the assortment feasibility constraints. Unmatching also does not aﬀect any equation type’s threshold,
25 Although point masses are not continuous distributions, which we required in Section 2.2, we can make point masses
continuous by adding a small amount of (bounded) noise. Doing so does not change any of the conclusions. To simplify
our exposition, we focus on the case of point masses only.
26 When δ > 0, these observations still hold for distributions that are not point masses, so long as the variation in
payoﬀis suﬃciently small.

Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
43
since they always accept in the ﬁrst place. This new equilibrium has higher welfare, which contradicts our
premise that the original equilibrium is welfare-maximizing.
The preceding argument shows that in any welfare-maximizing equilibrium, there is a variable type xi,b
whose expected utility is greater than 1 for each i. Notice that this type must exclusively match with type
si agents, since equation type agents only yield payoﬀ1 and thus cannot be accepted in equilibrium. To
prove the second part of this lemma, we show that we can obtain another welfare-maximizing equilibrium by
matching the entire supply of type si agents to this variable type xi,b.
Suppose we have a welfare-maximizing equilibrium, and we modify it by matching the entire supply of type
si agents to a variable type xi,b whose expected utility exceeds 1. To restore a stationary equilibrium, note
that making this modiﬁcation may violate two sets of constraints: First, it might violate type xi,b’s feasibility
constraint; but this is not a problem, since we can simply stop showing xi,b type agents any types but type
si, since these agents were only accepting type si agents in the ﬁrst place. Second, it might cause type xi,b⊕1
to want to accept more equation type agents because they stop matching with switch type agents entirely. To
resolve this, we can simply reduce the supply of equation type agents to type xi,b⊕1 so that by accepting all
such agents, xi,b⊕1 accepts the same quantity of agents as in the original equilibrium. Finally, to see that this
new equilibrium has the same welfare as the original equilibrium, note that the ﬂow rates of matches for both
switch and equation types are at least as high as before.
This lemma tells us that there exists a welfare-maximizing equilibrium where, for every i, one of variable
types xi,0 and xi,1 is fully matched to the switch type si. Moreover, it suﬃces to optimize over such equilibria.
Notice that each such equilibrium also corresponds to an assignment (x1,...,xn) ∈{0,1}n, where xi = b if
type xi,b⊕1 is fully matched to the switch type si.
We are now ready to state our analogs of Lemmas 4.6 and 4.7 of Chakrabarty and Goel (2010):
Lemma C.4. Given a MAX3LIN2 instance with m′ ≥(1 −ε)m simultaneously satisﬁable equations, the
platform’s problem it maps to has OPT ≥(36 + 48δ −12ε)m/(1 + δ).
Proof. Given an assignment (x1,x2,...,xn) ∈{0,1}n that satisﬁes m′ equations, we can match the switch
types to the variable types as above. We can then match the remaining variable types to the equation types
so that each variable type matches with the equation types of each satisﬁed equation it is part of at a ﬂow
rate of 4/(1 + δ). We thus have payoﬀ2(1 + 2δ)/(1 + δ) · P
i 4mi from switch types and payoﬀ12/(1 + δ) per
satisﬁed equation. Summing these quantities gives us the lemma.
Lemma C.5. Given a MAX3LIN2 instance with m′ ≤
  1
2 + ε

m simultaneously satisﬁable equations, the
platform’s problem it maps to has OPT ≤(34.5 + 48δ + 3ε)m/(1 + δ).
Proof. Take any assignment (x1,x2,...,xn) ∈{0,1}n and match switch types to variable types as described
above. Now, for any equation that is not satisﬁed, notice that there must be some equation type that cannot
be matched at all to any of the remaining variable types. So the payoﬀfrom the equation types for unsatisﬁed
equations is at most 9/(1 + δ). Upper bounding the payoﬀs of the equation types of the satisﬁed equations
by 12/(1 + δ) per satisﬁed equation, we get 12m · 2(1 + 2δ)/(1 + δ) from switch types and at most payoﬀ
(( 1
2 −ε)m · 9 + ( 1
2 + ε)m · 12)/(1 + δ) from equation types. Summing these quantities proves the lemma.

44
Immorlica, Lucier, Manshadi, Wei: Designing Approximately Optimal Search
To ﬁnish, observe that Lemmas C.4 and C.5 show that if we can approximate the platform’s welfare-
maximization problem with a factor of
36 + 48δ −12ε
34.5 + 48δ + 3ε,
then we would be able to distinguish the two classes of MAX3LIN2 inputs in Theorem C.1. Thus, by taking
suﬃciently small δ and ε, we see that it is NP-hard to approximate the platform’s welfare-maximization
problem within any constant factor less than
36
34.5 = 24
23.

