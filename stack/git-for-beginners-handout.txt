Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
GIT for Beginners
Anthony Baire
Universit´e de Rennes 1 / UMR IRISA
March 9, 2023
This tutorial is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 3.0 France License
1 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Objectives
• Understand the basics about version control systems
• Getting started with GIT
• working with a local repository
• synchronising with a remote repository
• setting up a server
2 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Summary
1. About Version Control Tools
2. Overview of GIT
3. Working locally
4. Branching & merging
5. Interacting with a remote repository
6. Administrating a server
7. Working with third-party contributors
8. Extras
3 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 1.
About Version Control Tools
• Deﬁnition
• Use cases
• Base concepts
• History
4 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
What is a version control system ?
From: http://en.wikipedia.org/wiki/Revision_control
Revision control [...] is the management of changes to documents,
computer programs, large web sites, and other collections of information.
Changes are usually identiﬁed by a number or letter code, termed the
”revision number” [...]. For example, an initial set of ﬁles is ”revision 1”.
When the ﬁrst change is made, the resulting set is ”revision 2”, and so
on.
Each revision is associated with a timestamp and the person making the
change.
Revisions can be compared, restored, and with some types of ﬁles,
merged.
5 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Use case 1: keeping an history
The life of your software/article is recorded from the beginning
• at any moment you can revert to a previous revision 1
• the history is browseable, you can inspect any revision 2
• when was it done ?
• who wrote it ?
• what was changed ?
• why ?
• in which context ?
• all the deleted content remains accessible in the history
1let’s say your not happy with your latest changes
2this is useful for understanding and ﬁxing bugs
6 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Use case 2: working with others
VC tools help you to:
• share a collection of ﬁles with your team
• merge changes done by other users
• ensure that nothing is accidentally overwritten
• know who you must blame when something is broken
7 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Use case 3: branching
You may have multiple variants of the same software, materialised
as branches, for example:
• a main branch
• a maintainance branch (to provide bugﬁxes in older releases)
• a development branch (to make disruptive changes)
• a release branch (to freeze code before a new release)
VC tools will help you to:
• handle multiple branches concurrently
• merge changes from a branch into another one
8 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Use case 4: working with external contributors
VC tools help working with third-party contributors:
• it gives them visibility of what is happening in the project
• it helps them to submit changes (patches) and
it helps you to integrate these patches
• forking the development of a software and merging it back
into mainline3
3decentralised tools only
9 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Use case 5: scaling
Some metrics4 about the Linux kernel (developed with GIT):
• about 10000 changesets in each new version
(every 2 or 3 months)
• 1000+ unique contributors
4source: the Linux Foundation
10 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some illustrations
11 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Taxinomy
Architecture:
• centralised →everyone works on the same unique repository
• decentralised →everyone works on his own repository
Concurrency model:
• lock before edit (mutual exclusion)
• merge after edit (may have conﬂicts)
History layout:
• tree (merges are not recorded)
• direct acyclic graph
Atomicity scope: ﬁle vs whole tree
GIT
12 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Other technical aspects
Space eﬃciency: storing the whole history of a project requires
storage space (storing every revision of every ﬁle)
→most VC tools use delta compression to optimise the space
(except Git which uses object packing instead)
Access method: A repository is identiﬁed with a URL. VC tools
oﬀer multiple ways of interacting with remote repositories.
• dedicated protocol (svn:// git://)
• direct access to a local repository (ﬁle://path or just path)
• direct access over SSH (ssh:// git+ssh:// svn+ssh://)
• over http (http:// https://)
13 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating new revisions
14 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating new revisions
14 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating new revisions
14 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating new revisions
14 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating new revisions
14 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating new revisions
14 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
What shall be stored into the repository ?
You should store all ﬁles that are not generated by a tool:
• source ﬁles (.c .cpp .java .y .l .tex . . . )
• build scripts / project ﬁles (Makefile configure.in
Makefile.am CMakefile.txt wscript .sln)
• documentation ﬁles (.txt README . . . )
• resource ﬁles (images, audio, . . . )
You should not store generated ﬁles
(or you will experience many unneccessary conﬂicts)
• .o .a .so .dll .class .jar .exe .dvi .ps .pdf
• source ﬁles / build scripts when generated by a tool
(like autoconf, cmake, lex, yacc)
15 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Guidelines for committing
• commit often
• commit independent changes in separate revisions
• in commit messages, describe the rationale behind of your
changes (it is often more important than the change itself)
16 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
History (Centralised Tools)
• 1st generation (single-ﬁle, local-only, lock-before-edit)
• 1972: SCCS
• 1982: RCS
• 1985: PVCS
• 2nd generation (multiple-ﬁles, client-server, merge-before-commit)
• 1986: CVS
• 1992: Rational ClearCase
• 1994: Visual SourceSafe
• 3rd generation (+ repository-level atomicity)
• 1995: Perforce
• 2000: Subversion
• + many others
17 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
History (Decentralised tools)
18 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 2.
Overview of GIT
• History
• Git’s design & features
• User interfaces
19 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
History
• before 2005: Linux sources were managed with Bitkeeper
(proprietary DVCS tool) 5
• April 2005: revocation of the free-use licence
(because of some reverse engineering)
• No other tools were enough mature to meet Linux’s dev
constraints (distributed workﬂow, integrity, performance).
⇒Linus Torvald started developing Git
• June 2005: ﬁrst Linux release managed with Git
• December 2005: Git 1.0 released
5now open source! (since 2016)
20 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Git Design objectives
• distributed workﬂow (decentralised)
• easy merging (merge deemed more frequent than commit)
• integrity (protection against accidental/malicious corruptions)
• speed & scalability
• ease of use
21 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Git Design choices
• Easily hackable
• simple data structures (blobs, trees, commits, tags)
• no formal branch history
(a branch is just a pointer to the last commit)
• low-level commands exposed to the user
• Integrity
• cryptographic tracking of history (SHA-1 hashes)
• tag signatures (GPG)
• Merging
• pluggable merge strategies
• staging area (index)
• Performance
• no delta encoding
22 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Git Commands
23 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Git GUIs: gitk →browsing the history
24 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Git GUIs: git gui →preparing commits
25 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
3rd party GUIs
https://git-scm.com/downloads/guis
• Anchorpoint
• Aurees
• CommandGit
• Cong
• Fork
• Fugitive
• Git Extensions
• Git Klient
• GitAhead
• GitAtomic
• GitDrive
• GitFiend
• GitFinder
• GitHub
Desktop
• GitKraken
• GitUI
• GitUp
• GitViewer
• GitVine
• Gitfox
• Gitgui
• Gitnuro
• Gittyup
• Glint
• Guitar
• LazyGit
• Magit
• MeGit
• NitroGit
• Pocket Git
• PolyGit
• RepoZ
• SmartGit
• SnailGit
• SourceTree
• Sublime Merge
• TortoiseGit
• Tower
• Vershd
• Working Copy
• giggle
• git-cola
• gitg
• gitonic
• ungit
26 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 3.
Working locally
• creating a repository
• adding & committing ﬁles
• the staging area (or index)
27 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Create a new repository
git init myrepository
This command creates the directory myrepository.
• the repository is located in myrepository/.git
• the (initially empty) working copy is located in myrepository/


$ pwd
/tmp
$ git init helloworld
Initialized empty Git repository in /tmp/helloworld/.git/
$ ls -a helloworld/
.
..
.git
$ ls helloworld/.git/
branches
config
description
HEAD
hooks
info
objects
refs


Note:
The /.git/ directory contains your whole history,
do not delete it6
6unless your history is merged into another repository
28 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Commit your ﬁrst ﬁles
git add ﬁle
git commit [ -m message ]


$ cd helloworld
$ echo 'Hello World!' > hello
$ git add hello
$ git commit -m "added file 'hello'"
[master (root-commit) e75df61] added file 'hello'
1 files changed, 1 insertions(+), 0 deletions(-)
create mode 100644 hello


Note: “master” is the name of the default branch created by
git init
29 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
The staging area (aka the “index”)
Usual version control systems provide two spaces:
• the repository
(the whole history of your project)
• the working tree (or local copy)
(the ﬁles you are editing and that will be in the next commit)
Git introduces an intermediate space : the staging area
(also called index)
The index stores the ﬁles scheduled for the next commit:
• git add ﬁles →copy ﬁles into the index
• git commit →commits the content of the index
30 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
The staging area (aka the “index”)
31 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Update a ﬁle


$ echo 'blah blah blah' >> hello
$ git commit
# On branch master
# Changed but not updated:
#
(use "git add <file>..." to update what will be committed)
#
(use "git checkout -- <file>..." to discard changes in working directory)
#
#
modified:
hello
#
no changes added to commit (use "git add" and/or "git commit -a")


Git complains because the index is unchanged (nothing to commit)
→We need to run git add to copy the ﬁle into the index


$ git add hello
$ git commit -m "some changes"
[master f37f2cf] some changes
1 files changed, 1 insertions(+), 0 deletions(-)


32 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Bypassing the index7
Running git add & git commit for every iteration is tedious.
GIT provides a way to bypass the index.
git commit ﬁle1 [ ﬁle2 . . . ]
This command commits ﬁles (or dirs) directly from the working
tree
Note: when bypassing the index, GIT ignores new ﬁles:
• “git commit .” commits only ﬁles that were present in the last commit
(updated ﬁles)
• “git add .
&& git commit” commits everything in the working tree
(including new ﬁles)
7also named “partial commit”
33 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Bypassing the index
34 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Deleting ﬁles
git rm ﬁle
→remove the ﬁle from the index and from the working copy
git commit
→commit the index


$ git rm hello
rm 'hello'
$ git commit -m "removed hello"
[master 848d8be] removed hello
1 files changed, 0 insertions(+), 3 deletions(-)
delete mode 100644 hello


35 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Showing diﬀerences
git diff [ rev a [ rev b ] ]
[ -- path . . . ]
→shows the diﬀerences between two revisions rev a and rev b
(in a format suitable for the patch utility)
• by default rev a is the index
• by default rev b is the working copy
git diff --staged [ rev a ]
[ -- path . . . ]
→shows the diﬀerences between rev a and the index
• by default rev a is HEAD (a symbolic references pointing to the
last commit)
36 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
About git diff and the index
37 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Diﬀexample


$ echo foo >> hello
$ git add hello
$ echo bar >> hello
$ git diff
--- a/hello
+++ b/hello
@@ -1,2 +1,3 @@
Hello World!
foo
+bar
$ git diff --staged
--- a/hello
+++ b/hello
@@ -1 +1,2 @@
Hello World!
+foo
$ git diff HEAD
--- a/hello
+++ b/hello
@@ -1 +1,3 @@
Hello World!
+foo
+bar


38 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Resetting changes
git reset [ --hard ] [ -- path . . . ]
git reset cancels the changes in the index (and possibly in the
working copy)
• git reset drops the changes staged into the index8, but the
working copy is left intact
• git reset --hard drops all the changes in the index and in
the working copy
8it restores the ﬁles as they were in the last commit
39 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Resetting changes in the working copy9
git checkout -- path
This command restores a ﬁle (or directory) as it appears in the
index (thus it drops all unstaged changes)


$ git diff HEAD
--- a/hello
+++ b/hello
@@ -1 +1,3 @@
Hello World!
+foo
+bar
$ git checkout -- .
$ git diff HEAD
--- a/hello
+++ b/hello
@@ -1 +1,2 @@
Hello World!
+foo


9since v2.23 you may also use the experimental command git restore
40 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Other local commands
• git status →show the status of the index and working
copy
• git show →show the details of a commit (metadata + diﬀ)
• git log →show the history
• git mv →move/rename a ﬁle10
• git tag →creating/deleting tags (to identify a particular
revision)
10note that git mv is strictly equivalent to: “cp src dst && git rm src &&
git add dst” (ﬁle renaming is not handled formally, but heuristically)
41 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Exercises
1. create a new repository
2. create a new ﬁle, add it to the index and commit it
3. launch gitk to display it. Keep the window open and hit F5 after each
command (to visualise the results of your commands)
4. modify the ﬁle and make a new commit
5. rename the ﬁle (either with git mv or git add+git rm), do a git status
before committing (to ensure the renaming is correctly handled)
6. delete the ﬁle and commit it
7. create two new ﬁles and commit them. Then modify their content in the
working copy and display the changes with git diff
8. add one ﬁle into the index but keep the other one. Display the changes
between:
• the index and the working copy
• the last commit and the index
• the last commit and the working copy
9. run git reset to reset the index
10. run git reset --hard to reset the index and the working copy
42 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 4.
Branching & merging
• How GIT handles its history
• Creating new branches
• Merging & resolving conﬂicts
43 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
How GIT handles its history
Each commit object has a list of parent
commits:
• 0 parents →initial commit
• 1 parent →ordinary commit
• 2+ parents →result of a merge
→This is a Direct Acyclic Graph
44 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
How GIT handles its history
• There is no formal “branch history”
→a branch is just a pointer on the latest commit.
(git handles branches and tags in the same way internally)
• Commits are identiﬁed with SHA-1 hash (160 bits)
computed from:
• the commited ﬁles
• the meta data (commit message, author name, . . . )
• the hashes of the parent commits
→A commit id (hash) identiﬁes securely and reliably its
content and all the previous revisions.
45 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating a new branch
git checkout -b new branch [ starting point ]
• new branch is the name of the new branch
• starting point is the starting location of the branch (possibly a
commit id, a tag, a branch, . . . ). If not present, git will use
the current location.


$ git status
# On branch master
nothing to commit (working directory clean)
$ git checkout -b develop
Switched to a new branch 'develop'
$ git status
# On branch develop
nothing to commit (working directory clean)


46 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Switching between branches11
git checkout [-m] branch name


$ git status
# On branch develop
nothing to commit (working directory clean)
$ git checkout master
Switched to branch 'master'


Note: it may fail when the working copy is not clean. Add -m to
request merging your local changes into the destination branch.


$ git checkout master
error: Your local changes to the following files would be overwritten by checkout: hello
Please, commit your changes or stash them before you can switch branches.
Aborting
$ git checkout -m master
M
hello
Switched to branch 'master'


11since v2.23 you may also use the experimental command git switch
47 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Merging a branch
git merge other branch
This will merge the changes in other branch into the current
branch.


$ git status
# On branch master
nothing to commit (working directory clean)
$ git merge develop
Merge made by recursive.
dev
|
1 +
hello |
4 +++-
2 files changed, 4 insertions(+), 1 deletions(-)
create mode 100644 dev


48 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Notes about merging
• The result of git merge is immediately committed
(unless there is a conﬂict)
• The new commit object has two parents.
→the merge history is recorded
• git merge applies only the changes since the last common
ancestor in the other branch.
→if the branch was already merged previously, then only the
changes since the last merge will be merged.
49 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Branching example
50 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
How Git merges ﬁles ?
If the same ﬁle was independently modiﬁed in the two branches,
then Git needs to merge these two variants
• textual ﬁles are merged on a per-line basis:
• lines changed in only one branch are automatically merged
• if a line was modiﬁed in the two branches, then Git reports a
conﬂict. Conﬂict zones are enclosed within <<<<<<< >>>>>>>


Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.


• binary ﬁles always raise a conﬂict and require manual merging
51 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Merge conﬂicts
In case of a conﬂict:
• unmerged ﬁles (those having conﬂicts) are left in the
working tree and marked as “unmerged”12
• the other ﬁles (free of conﬂicts) and the metadata (commit
message, parents commits, ...) are automatically added into
the index (the staging area)
12Git will refuse to commit the new revision until all the conﬂicts are
explicitely resolved by the user
52 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Resolving conﬂicts
There are two ways to resolve conﬂicts:
• either edit the ﬁles manually, then run
git add ﬁle
→to check the ﬁle into the index
or
git rm ﬁle
→to delete the ﬁle
• or with a conﬂict resolution tool(xxdiﬀ, kdiﬀ3, emerge, ...)
git mergetool [ ﬁle ]
Then, once all conﬂicting ﬁles are checked in the index, you just
need to run git commit to commit the merge.
53 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Conﬂict example
54 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Deleting branches
git branch -d branch name
This command has some restrictions, it cannot delete:
• the current branch (HEAD)
• a branch that has not yet been merged into the current branch


$ git branch -d feature-a
Deleted branch feature-a (was 45149ea).
$ git branch -d feature-b
error: The branch 'feature-b' is not fully merged.
If you are sure you want to delete it, run 'git branch -D feature-b'.
$ git branch -d master
error: Cannot delete the branch 'master' which you are currently on.


→git branch -d is safe13
13unlike git branch -D which deletes unconditionnally (
) the branch
55 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Exercises
0. use “gitk --all” to display all branches
(and remember to hit F5 after each command to visualise the changes)
1. create a new branch named “develop”
2. make some commits in this branch
3. go back to branch “master” and make some commits
4. merge branch “develop” into “master”
5. make a new commit in each branch so as to generate a conﬂict (edit the
same part of a ﬁle)
6. merge branch “develop” into “master”, and ﬁx the conﬂict
7. merge “master” into “develop”
56 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 5.
Interacting with a remote
repository
• Overview
• Creating a shared repository
• Conﬁguring a remote repository
• Sending changes (push)
• Receiving changes (pull)
57 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Simple workﬂow (Centralised)
58 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Team Workﬂow
59 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
How git handles remote repositories
• It is possible to work with multiple remote repositories
• Each remote repository is identiﬁed with a local alias.
When working with a unique remote repository, it is usually
named origin14
• Remote repositories are mirrored within the local repository
• Remote branches are mapped in a separate namespace:
remote/name/branch.
Examples:
• master refers to the local master branch
• remote/origin/master refers to the master branch of the
remote repository named origin
14default name used by git clone
60 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Adding a remote repository
git remote add name url
• name is a local alias identifying the remote repository
• url is the location of the remote repository
Examples:


$ git remote add origin /tmp/helloworld.git
$ git remote add origin ssh://username@scm.gforge.inria.fr/gitroot/helloworld/helloworld.git


61 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Pushing (uploading) local changes to the remote repository
git push
• git push examines the current branch, then:
• if the branch is tracking an upstream branch, then the local
changes (commits) are propagated to the remote branch
• if not, then nothing is sent
(new branches created locally are considered private by default)
• In case of conﬂict git push will fail and require to run git
pull ﬁrst
62 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Pushing a new branch to the remote repository
git push -u destination repository ref [ref . . . ]
• explicit variant of git push: the local reference ref (a branch
or a tag) is pushed to the remote destination repository
• -u/--set-upstream conﬁgures the local branch to track the
remote branch15 (this is usually what you want)


$ git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use
git push --set-upstream origin master
$ git push -u origin master
To /tmp/helloworld.git/
* [new branch]
master -> master
Branch master set up to track remote branch master from origin.


15so that git pull an git push work with that repository by default
63 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Fetching (downloading) changes from the remote
repository
git fetch
git fetch updates the local mirror of the remote repository:
• it downloads the new commits from the remote repository
• it updates the references remote/remote name/* to match
their counterpart in the remote repository.
Example: the branch remote/origin/master in the local
repository is updated to match the new position of the branch
master in the remote reposity
64 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Merging remote changes into the current local branch
Changes in the remote repository can be merged explicitely into
the local branch by running git merge


$ git status
# On branch master
$ git fetch
...
$ git merge origin/master


In practice, it is more convenient to use git pull, which is a
shortcut for git fetch + git merge
git pull


$ git pull


65 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Remote example
66 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Importing a new remote branch
git checkout branch name
If the branch name does not exist locally, then GIT looks for it in
the remote repositories. If it ﬁnds it, then it creates the local
branch and conﬁgures it to track the remote branch.


$ git branch --all
* master
remotes/origin/master
remotes/origin/new-fancy-feature
$ git checkout new-fancy-feature
Branch new-fancy-feature set up to track remote branch new-fancy-feature from origin.
Switched to a new branch 'new-fancy-feature'
$ git branch
--all
master
* new-fancy-feature
remotes/origin/master
remotes/origin/new-fancy-feature


67 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Cloning a repository
git clone url [ directory ]
• git clone makes a local copy of a remote repository and
conﬁgures it as its origin remote repository.
• git clone is a shortcut for the following sequence:
1.
git init directory
2.
cd directory
3.
git remote add origin url
4.
git fetch
5.
git checkout master
• In practice you will rarely use git init, git remote and
git fetch directly, but rather use higher-level commands:
git clone and git pull.
68 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Typical Workﬂow
69 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Exercises
0. (remember to visualise your operations with “gitk --all” →hit F5)
1. clone the following repository https://allgo.inria.fr/git/hello
2. use gitk --all (to display remote branches too)
3. make some commits and synchronise (pull/push) with the origin repository
4. do it again so as to experience and resolve a conﬂict
5. use git fetch to review remote commits before merging them
6. create a new branch, make a commit and publish it to the shared repository
7. check out a branch created by another participant
70 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 6.
Administrating a server
• Shared repositories
• GIT servers
• Available protocols
71 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Creating a shared repository
git init --bare --shared my-shared-repository.git
• A bare repository (--bare) is a repository without any
working copy.
• by convention bare repositories use the .git extension
• bare repository are updated by importing changes from another
repository (push operation)
• --shared is meant to make this repository group-writable
(unix group)


$ git init --bare --shared helloworld.git
Initialized empty shared Git repository in /tmp/helloworld.git/
$ ls helloworld.git/
branches
config
description
HEAD
hooks
info
objects
refs


72 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Admin Considerations
Administrating a GIT server is relatively simple16
• no partial access
(access is granted to the full repository)
• no access policies in GIT itself
(access control to be handled by the HTTP/SSH server)
• low server load
(most git commands are local)
• server outages are much less disruptive
(user can collaborate by other means)
• only core developers need write access
16compared to centralised Version Control systems
73 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
How to publish a GIT repository (1/2)
• Native protocol (git daemon) on tcp port 9418
• public access only, no authentication
→git://server.name.org/path/to/the/repository.git
• GIT over SSH
• strong authentication & encryption
• restricted shell possible with git-shell
→ssh://username@server.name.org/path/to/the/repository.git
• Local access
→/path/to/the/repository.git
74 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
How to publish a GIT repository (2/2)
• HTTP/HTTPS server
• ﬁrewall friendly
• many authentication methods (provided by the HTTP server)
• can provide SSL encryption, even for anonymous users
→http://username@server.name.org/path/to/the/repository.git
• Dumb server (repository published as static ﬁles)
• very easy to set up (in read-only mode)
• less eﬃcient
• read-write mode requires webdav
• Smart server (git http-backend)
• cgi script running the native daemon over HTTP
• backward-compatible with the dumb client
75 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
GIT-centric forges
• Hosting only
• GitHub
https://github.com/
• BitBucket
https://bitbucket.com/
• Google Code
https://code.google.com/
• Open source software
• Gitlab
http://gitlab.org
• Gitorious
http://gitorious.org
76 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 7.
Working with third-party
contributors
• Common workﬂows
• Generating & applying patches
• Merging from third-party repositories
77 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Common workﬂows
more about workﬂows at: https://www.atlassian.com/git/workflows
78 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
About 3rd party contributions
Third-party contributors17 can submit their contributions by:
• sending patches (the traditional way)
• publishing their own (unoﬃcial) repository and asking an
oﬃcial developer to merge from this repository
(pull request or merge request)
17developers who are not allowed to push to the oﬃcial repository
79 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Explicit pull/push
push/pull can work on any arbitrary repository identiﬁed by its url
git push url ref [ref...]
git push url local ref:remote ref ...
(push as a diﬀerent name)
→push the local ref (a branch or a tag) to repository url
git pull url ref [ref...]
→merge the remote ref (a branch or a tag) from repository url
into the current local branch
80 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow
81 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Reviewing a remote branch
git pull merges immediately the remote branch into the current
local branch.
In practice you may prefer to review it before merging.
git fetch url branch
→fetch the branch branch from the repository url and store it
temporarily18 as FETCH HEAD


$ git fetch git://git.raoul-duke.org/helloworld.git master
From git://git.raoul-duke.org/helloworld.git
* branch
master
-> FETCH_HEAD
$ gitk FETCH_HEAD
...review the commits ...
$ git merge FETCH_HEAD


18the FETCH HEAD ref remains valid until the next time git fetch is run
82 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Decentralised workﬂow (GIT-centric forges)
83 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Generating patches
• git diff
The basic (legacy) way: use git diff
• git format-patch
The modern way: git format-patch converts you history
(commits) into a series of patches (on ﬁle per commit) and it
records the metadata (author name, commit message) 19
19Note: git format-patch does not preserve merge history & conﬂicts
resolution. You should only use it when your history is linear.
84 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Generating patches
git format-patch rev origin[..rev ﬁnal ]
git format-patch generates patches from revision rev origin to
rev ﬁnal (or to the current version if not given)
Example:


$ git format-patch origin/master
0001-added-foo.patch
0002-removed-bar.patch


85 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Applying patches
git am ﬁle1 [ ﬁle2 ...]
• git am20 applies a series of patches generated by
git format-patch into the local repository
(each patch produces one commit)
• the authorship of the submitter is preserved21


$ git am 0001-added-foo.patch 0002-removed-bar.patch
Applying: added foo
Applying: removed bar


20am originally stands for “apply mailbox”
21actually GIT distinguishes between the author and the committer of a
revision (usually they refer to the same person, but not when running git am)
86 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Exercises
In this part two separate repositories will be used :
- https://allgo.inria.fr/git/userDD →developer (oﬃcial repository)
- https://allgo.inria.fr/git/userCC →external contributor
0. (reminder: use gitk --all)
1. associate with your neighbour and distribute roles: one is the developer and one
is the external contributor
2. (developer) clone your repository (https://allgo.inria.fr/git/userDD) on
your local machine, make some commits and push them
3. (contributor) clone the developer’s repository
(https://allgo.inria.fr/git/userDD) and make some commits (but do not
push them, you are not supposed to have the rights)
4. (contributor) push your new commits to your own public repository at
https://allgo.inria.fr/git/userCC
5. (developer) pull the commits from the contributor’s repository and push them
to your own repository
6. (contributor) pull from the oﬃcial repository and check that your commits were
merged in the upstream branch
7. (contributor) make new commits (but do not push them)
8. (contributor) convert your new commits into patches and send them to the
developer
9. (developer) apply the contributor’s patches and push them
10. (contributor) pull the latest changes and check that your patches were
eﬀectively applied upstream
87 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Part 8.
Extras
• Some advices
• Common traps
• Documentation
• Next tutorial
88 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some advices (1/2)
• commit as often as you can (keep independent changes in
separate commits)
• run git diff before preparing a commit
• in commit messages, describe the rationale behind of your
changes (it is often more important than the change itself)
• do not forget to run git push
• use a .gitignore ﬁle to ignore generated ﬁles (*.o, *.a, . . . )
89 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Some advices (2/2)
• don’t be fully desynchronised →run git pull enough often
to avoid accumulating conﬂicts
• idem for feature branches
(merge from the mainstream branch enough often)
• when creating complex patches (as an external contributor)
prefer using one branch per patch
• keep a gitk instance open when doing fancy things
90 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Common traps (1/2)
• git diff without arguments shows the diﬀerence with the
index →run git diff HEAD to show the diﬀerences with
the last commit
• git reset reverts the index, but keeps the working copy
unchanged
→do git reset --hard if you need to revert the working
copy too
91 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Common traps (2/2)
• GIT is not forgiving, do not ignore its warnings and do not use
--force unless you have a clear idea of what you are doing
• GIT’s history is not immutable
• git checkout on an arbitrary commit or a tag (anything
that is not a branch) puts your in “detached HEAD” state.
You can commit, but your history be lost if you don’t create
any branch (or tag) to reference them.
92 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Detached head state
93 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Detached head state
93 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Detached head state
93 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Detached head state
93 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Detached head state
93 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Other useful utility commands
• git gc →garbage collector (run it when the /.git/
directory takes too much space)
• git stash →save/restore the state of the working copy and
index (useful when in need to commit an urgent ﬁx)
• git clean →clean the working tree (
you must ensure
that all your code is committed)
• git bisect →locating which commit introduced a bug
• git cherry-pick →merging a single commit
• git revert →cancelling a previous commit
94 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Further documentation
• man git cmd
(tough & exhaustive)
• man gitglossary
• The Git book
http://git-scm.com/book
• The Git community book
http://www.scribd.com/doc/7502572/The-Git-Community-Book
• Github learning materials
http://learn.github.com/
• Atlassian learning materials
https://www.atlassian.com/git/tutorial
https://www.atlassian.com/git/workflows
• Tech Talk: Linus Torvalds on git (May 2007)
https://www.youtube.com/watch?v=4XpnKHJAok8
95 / 96

Version Control
GIT Intro
Local GIT
Branches
Remote GIT
Server
Bazar
Extras
Next tutorial
Next tutorial sessions: “Git for advanced users”
• git internals
• rewriting the history
• playing with your index
• handling dependencies between repositories
• maintaining a set of patches
• interacting with other tools (SVN, Mercurial)
96 / 96

