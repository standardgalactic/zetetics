arXiv:2303.17399v1  [quant-ph]  30 Mar 2023
Submitted to:
QPL 2023
© N. Bot¨o, F. Forslund
This work is licensed under the Creative Commons
Attribution-Noncommercial-Share Alike License.
The Zeta Calculus
Nicklas Bot¨o
Fabian Forslund
boton@chalmers.se
fabfors@chalmers.se
Chalmers University of Technology
Gothenburg, Sweden
We propose a quantum programming language that generalizes the λ-calculus. The language is non-
linear; duplicated variables denote, not cloning of quantum data, but sharing a qubit’s state; that
is, producing an entangled pair of qubits whose amplitudes are identical with respect to a chosen
basis. The language has two abstraction operators, ζ and ξ, corresponding to the Z- and X-bases;
each abstraction operator is also parameterised by a phase, indicating a rotation that is applied to
the input before it is shared. We give semantics for the language in the ZX-calculus and prove its
equational theory sound. We show how this language can provide a good representation of higher-
order functions in the quantum world.
1
Introduction
Thanks to the no-cloning theorem [11], which famously states that a quantum state cannot be duplicated,
most attempts to create a λ-calculus-like language for quantum computing have employed a linear type
system. For example, the systems Quipper[6], Lineal[2] and QWIRE[8] all provide linear type systems,
with non-linear rules for classical data.
However, cloning of data is not the only possible way to interpret a duplicated variable. We can
also interpret a duplicated variable as indicating sharing of a qubit. That is, if the variable x holds a
reference to a qubit in the state α|0⟩+β|1⟩, then an expression which uses x twice should be interpreted
as an instruction to form an entangled pair of qubits in state α|00⟩+β|11⟩. This is the interpretation of
duplicated variables in QML[1], which however does not include support for higher-order functions.
In this paper we introduce the ζ-calculus, a non-linear typed system with support for higher-order
functions in which duplicated variables are interpreted as sharing. We provide the syntax, typing rules,
operational semantics mapping terms in ζ to diagrams of the ZX-calculus[5][10] and an equational theory
which is sound with respect to the rules of ZX. We show how the linear λ-calculus may be embedded in
the ζ-calculus, and also discuss a number of examples showing the capabilities of the language, including
examples of terms demonstrating the use of higher-order functions.
Note that, in order to share a qubit, we must choose a basis. We call this operation sharing across
the basis β. Thus, sharing across the basis Z = {|0⟩,|1⟩} is the operation that maps α|0⟩+ β|1⟩to
α|00⟩+β|11⟩, while sharing across the basis X = {|+⟩,|−⟩} is the operation that maps α|+⟩+β|−⟩to
α|++⟩+β|−−⟩.
Instead of privileging the standard basis, the ζ-calculus introduces a different binding abstraction for
each basis. It has two binders, ζ and ξ, corresponding to the Z- and the X-bases. Thus, ξxM should be
read as ’Perform the computation M and, if the variable x occurs more than once, then share the state of
x across the basis X’, and ζxM is read the same with respect to the Z-basis.

2
The Zeta Calculus
1.1
Example: Higher-order sharing.
We wish to highlight two of the main features of the language’s semantics: sharing and higher-order
functions. In the ζ-calculus, sharing in the basis Z is represented by the term ζx⟨x,x⟩, duplicating a
variable introduced in Z. This should be read like the term λx.(x,x) in the λ-calculus. The semantics of
this term, as a ZX-diagram, is presented in ﬁgure 1a.
∼=
ζx⟨x,x⟩
(a) regular
∼=
(ξf⟨f,f⟩)(ζx⟨x,x⟩)
(b) higher-order
Figure 1: Examples of sharing.
The term higher-order function (HOFs) should be familiar to the functional programmer, where a
function accepts another function as input. In ﬁgure 1b, we apply the function ξf⟨f,f⟩to the sharing
function ζx⟨x,x⟩. That is, we share the sharing function. Its derivation is in appendix C.
2
Syntax
We deﬁne the set of terms z (algiz) of the ζ-calculus as shown in ﬁgure 2. The variable x is bound within
the term βαxM, and we identify terms up to α-conversion. We write βxM for β0xM.
∗∈z
UNIT
x ∈z
VAR
β ∈{ζ,ξ}
α ∈[0,2π)
n ∈Z
βα
n ∈z
GEN
β ∈{ζ,ξ}
α ∈[0,2π)
M ∈z
βα xM ∈z
ABSβ
M ∈z
N ∈z
MN ∈z
APP
M ∈z
N ∈z
⟨M,N⟩∈z
TUP
M ∈z
N ∈z
β ∈{ζ,ξ}
let ⟨x,y⟩=β M in N ∈z
LET
Figure 2: Syntax of the calculus.
Informally, the abstraction βθxM can be read as ’Perform the computation M on the variable x
rotated about the basis β by an angle θ, and if x appears more than once in M then it is shared into M.
The rule GEN generates values from the basis vectors of a given basis. For some basis β, angle α and
positive n, states of the form |β0⟩⊗n +eiα |β1⟩⊗n are introduced. For negative n we get effects and for
n = 0 the value becomes a scalar. We deﬁne some commonly used syntactic sugar,
^βα :≡βαxx
M◦N :≡β0xM(Nx)
H :≡^ζ
π
2 ◦^ξ
π
2 ◦^ζ
π
2
.

N. Bot¨o, F. Forslund
3
3
Typing
The set of types is deﬁned in ﬁgure 3, consisting of numeral types, tensor products, and type duals.
n ∈N
n ∈Type
A ∈Type
B ∈Type
A⊗B ∈Type
A ∈Type
A∗∈Type
Figure 3: Deﬁnition of types.
A term of type n represents (a process that outputs) n qubits. Tensor products and dual types have
their usual interpretation. We deﬁne the function type A →B to be A∗⊗B. Since the category of
Hilbert spaces is closed monoidal, a function A →B can be represented as a state of type A∗⊗B [3].
The unit type ⊤is deﬁned as the zero numeral ⊤:= 0. The typing contexts are given by the grammar
Γ ::= /0 | Γ,x :β A.
A judgement of the ζ-calculus has the form x1 :β1 A1,...,xn :βn An ⊢M : B. This denotes a quantum
process that takes inputs of type A1, . . . , An and outputs a state of type B. If the variable xi occurs more
than once in the term M, then it is to be shared across basis βi.
The typing rules of the ζ-calculus are presented in ﬁgures 4 and 5.
Γ ⊢M : B
Γ,x :β A ⊢M : B
W
Γ,x1 :β A,...,xn :β A ⊢M : B
Γ,x :β A ⊢M[x1 := x,...,xn := x] : B
C
Γ1,∆,Γ2,Φ,Γ3 ⊢M : A
Γ1,Φ,Γ2,∆,Γ3 ⊢M : A
X
Figure 4: Structural rules.
Γ ⊢∗: ⊤
U
x :β A ∈Γ
Γ ⊢x : A
V
Γ ⊢βα
n : n
G
Γ ⊢βα
−n : n →⊤
D
Γ,x :β A ⊢M : B
Γ ⊢βαxM : A →B
B
Γ ⊢M : A →B
Γ ⊢N : A
Γ ⊢MN : B
A
Γ ⊢M : A
Γ ⊢N : B
Γ ⊢⟨M,N⟩: A⊗B
T
Γ ⊢M : A⊗B
Γ,x :βA,y :β B ⊢N : C
Γ ⊢let ⟨x,y⟩=β M in N : C
E
Figure 5: Typing rules.
Beyond the trivial axioms of (U) and (V) we have the type of the basis generators (G, D). In the case
of n ≥0 the type is simply a numeral equal to the size of the generator, while the negative case deﬁnes an
effect (that is, a function into the unit type). The rule (B) introduces the function type. The elimination
rule of the function type is (A), the usual application rule. The tensor product type is introduced by (T)
and eliminated by the let-rule (E). The structural rules for the system are weakening (W), contraction (C)
and exchange (X).

4
The Zeta Calculus
4
Semantics
We give semantics for the system by mapping every derivable judgement to a diagram of the ZX-calculus
as follows. Every type A and context Γ is interpreted as a set of labels, JΓK and JAK. The intention is that
a derivable judgement Γ ⊢M : A will be mapped to a diagram whose open input wires (left side of the
diagram) are labelled by the elements of JΓK and whose open output wires (right side of the diagram) are
labelled by the elements of JAK. One such labelling is presented below.
JnK := {0,1,...,n−1}
JA⊗BK := {(0,a) : a ∈JAK}∪{(1,b) : b ∈JBK}
JA∗K := {a∗: a ∈JAK}
Deﬁne the diagrams K(A,β,n) for A a type, β ∈{ζ,ξ} and n ∈N as in ﬁgure 6, where K∗is the
horizontal reﬂection of the sharing diagram. The intention is that it denotes the operation that produces
n shared copies of a value of type A, shared across the basis β.
K(A⊗B,β,n)
K(m,β,n)
...
...
...
m
n
n
K(A,β,n) ...
K(B,β,n) ...
K(A∗,β,n)
K∗(A,β,n)
...
Figure 6: Deﬁnition of the sharing operation K (kaun).
These operations can then be used to deﬁne the interpretation of the structural rules, see ﬁgure 7.
Γ1
Θ
Γ2
∆
Γ3
A
M
Γ1,∆,Γ2,Θ,Γ3 ⊢M : A
Γ1,Θ,Γ2,∆,Γ3 ⊢M : A
X
Γ, x1 :β A,...,xn :β A ⊢M : B
Γ,x :β A ⊢M[x1 := x,...,xn := x] : B
C
Γ
B
M
K(A,β,n) ...
x :β A
Γ ⊢M : B
Γ,x :β A ⊢M : B
W
Γ
A
M
K(A,β,0)
x :β A
Figure 7: Interpretation of structural rules.
Deﬁne the sharing of contexts K(Γ,n) as the operation that duplicates each variable in a context in its
introduced basis (x :β A 7→K(A,β,n)) and swaps them accordingly into n contexts. This is then used
to produce multiple copies of Γ in the operational semantics. Note that every wire and spider multiplies
over the size, that is the number of labels, of its type. Similar to how spiders and wires act for integers in
the SZX-calculus [4].
Now, we deﬁne the semantics of ζ as string diagram typing judgements in ﬁgure 8.

N. Bot¨o, F. Forslund
5
Γ ⊢∗: ⊤
U
x :β A ∈Γ
Γ ⊢x : A
V
A
Γ ⊢βα
n : n
G
α
n
Γ,x :β A ⊢M : B
Γ ⊢βαxM : A →B
B
α
A∗
B
Γ
M
x :β A
Γ ⊢M : A →B
Γ ⊢N : A
Γ ⊢MN : B
A
B
Γ
N
M
A
A∗
Γ ⊢M : A
Γ ⊢N : B
Γ ⊢⟨M,N⟩: A⊗B
T
A
B
N
M
Γ ⊢M : A⊗B
Γ,x :β A,y :β B ⊢N : C
Γ ⊢let ⟨x,y⟩=β M in N : C
E
M
N
C
...
Γ ⊢βα
−n : n →⊤
D
Γ
x :β A
Γ
α
... n∗
Γ
Γ
Γ
Figure 8: Operational semantics of the calculus.
We wish to deﬁne the familiar concept of substitution from the λ-calculus. This has some difﬁculties
since not all terms can be substituted when sharing is involved. To aid in the proof of substitution we
deﬁne the following.
Deﬁnition 1. Let Γ ⊢M : A be a derivable judgement, and β be a basis. Then we say M commutes with
sharing over β and Γ iff
M
K(A,β,n) ...
Γ
=
K(Γ,n)
...
Γ
M
M
A
A
A
A
We will use the rules of the ZX-calculus in the equational theory of ζ to deﬁne more speciﬁcally what
kinds of terms do commute over sharing. Using this deﬁnition, we can prove the following statement
introducing substitution.

6
The Zeta Calculus
Proposition 2 (Substitution). Let Γ,x :β A,∆⊢M : B, and Θ ⊢N : A. If N commutes with sharing over
β and Θ, then
Θ
Γ
∆
B
M
N
Γ,Θ,∆⊢M[x := N] : B
Proof. The proof is by induction on the derivation of Γ,x :βA,∆⊢M : B. We give the details for the case
of contraction here. Let Γ,x1 :β A,...,xn :β A,∆⊢M : B, and Θ ⊢N : A. Then, since N commutes with
sharing over β and Θ we have
...
Θ
Γ
∆
M
B
N
N
K(Θ,n)
...
Θ
Γ
∆
M
B
K(A,β,n)
N
=
.
From which we obtain Γ,Θ,∆⊢M[x := N] : B.
5
Equational theory
In this section we introduce some simple equational rules on the terms of the ζ-calculus. We introduce
a relation M ≡N to denote that two terms are equal. This relation under a predicate Φ is related to the
semantics of ζ for all valid judgements on the terms in equation (1).
M ≡N
(Φ)
=⇒
Γ ⊢M : A
Γ ⊢N : A
Φ
M ≡N
(1)
Then, if two terms can be made equal by the reﬂexive transitive closure of (≡) we write ζ ⊢M ≡N.
5.1
Embedding the linear λ-calculus
The linear λ-calculus can be embedded in ζ by deﬁning the λ-abstraction λxM :≡β0xM, where x occurs
only once in M (written as ωx(M) = 1). The identity removal rule of the ZX-calculus then allows us
to remove the spider from the interpretation of the abstraction all-together, producing a diagram on the
form in equation (2).
A∗
B
Γ
M
A∗
B
Γ
M
(id)
=
(2)
Then, since variables introduced by the λ-basis only occur once, no sharing occurs and every term
substituted for it commutes through. By proposition 2 we show that β-reduction holds for all terms when

N. Bot¨o, F. Forslund
7
substituting a variable introduced in this way.
A
Γ
M
N
∆
A
Γ
N
∆
M
=
=⇒
(λxM)N ≡M[x := N]
(3)
We also recover η-reduction by the same logic. Since the variable introduced by the λ-abstraction
can only occur once, the condition x /∈FV(M) always holds for λxMx.
B
Γ
M
=
A∗
B
Γ
M
A∗
=⇒
λxMx ≡M
(4)
5.2
Equational rules from substitution
In deﬁnition 1 the commuting of a term through sharing was introduced. This deﬁnition presupposes
the commutation rules of the ZX-calculus (principally (π) and (c)) shown in appendix A. We will deﬁne
some equalities on ζ-terms using these.
First we look at the term (ζαxM)ξaπ, where a ∈{0,1}. Using the basis state copy rule we show the
following:
A
Γ
M
x :ζ 1
aπ
α
A
aπ
Γ
M
(c)
=
(5)
By using the (c) rule again we note that the term ξaπ commutes with sharing over ζ and /0. Thus, by
substitution we have the equality (ζαxM)ξaπ ≡M[x := ξaπ].
Now we look at the term (ζαxM)◦^ξaπ, again where a ∈{0,1}. Then we can apply the π-commutation
rule to show:
B
Γ
M
x :ζ A
aπ
α
B
aπ
Γ
M
(π)
=
A∗
A∗
−α
(6)
Again we note that ^ξaπx commutes with sharing over ζ and {x :ζ A} by π-commutation (since the
spiders in sharing always have phase zero). By substitution we deﬁne the equality (ζαxM) ◦^ξaπ ≡
ζ9αxM[x := ^ξaπx].
Lastly we will look at colour change. In the interpretation of the abstraction ζαxM, note that we can
apply the colour change rule to obtain:
A∗
B
Γ
M
B
Γ
M
(h)
=
α
α
A∗
(7)
The term Hx commutes with sharing over ζ and {x :ξ A}, switching the basis which x is introduced
in by Hadamard pushing through the sharing spiders. Looking again at equation (7) we see that this is

8
The Zeta Calculus
expected since the abstraction has changed its basis. By substitution we obtain the term ξαxM[x := Hx],
which we then compose with H to reconstruct the original diagram. With this we get the colour change
rule in ζ as ζαxM ≡(ξαxM[x := Hx])◦H.
5.3
The full theory
The remaining equational rules relate to spider fusion together with more trivial rules on simple terms.
Combining these with the rules introduced in the previous sections we present the full equational theory
of the ζ-calculus in ﬁgure 9.
βxM ≡λxM
(ωx(M) = 1)
(λxM)N ≡M[x := N]
λxMx ≡M
(ζαxM)ξaπ ≡M[x := ξaπ]
(ζαxM)◦^ξaπ ≡ζ−αxM[x := ^ξaπx]
ζαxM ≡(ξαxM[x := Hx])◦H
βαxM ≡βαxN
(M ≡N)
(βαxM)βθ ≡(βxM)βθ+α
(βαxM)◦^βθ ≡βα+θxM
Hζα
n ≡ξα
n
H(HM) ≡M
⟨M,∗⟩≡M
⟨∗,M⟩≡M
Figure 9: Rules of the equational theory.
The equational theory presented here is not complete. To make it so a more comprehensive theory
of sharing is needed, and possibly more. This problem will be highlighted in section 6 where we rely
on translations between ZX and ζ instead. Nevertheless, the equational theory is sound shown by the
following theorem.
Theorem 3 (Soundness). ζ ⊢M ≡N =⇒ZX ⊢JΓ ⊢M : AK = JΓ ⊢N : AK
Proof. The proof is by showing equality of the interpretation of each of the rules in the equational theory
of the ZX-calculus. See appendix B for the full proof.
6
Examples
To highlight the main features of the ζ-calculus we present some illustrative examples in this section.
The focus is on common constructs of the ZX-calculus as well as higher-order functions and sharing. To
give some intuition on how ζ-terms are represented in ZX, we introduce the relation M ∼= D on closed
ζ-terms M and ZX-diagrams with boxes D. The intention is that this shows the interpretation J⊢M : AK
as a diagram, possibly with arbitrary terms represented by boxes, with function types ”externalised”.
That is, reversing the dual types into inputs. A simple example of this would be:
J ⊢ζαxM : 1 →1 K
=
M
α
1∗
1
⇝
M
α
(8)
For which we would then write ζαxM ∼=
M
α
. This provides a clear way to interpret for instance
the action of a higher order function in the ζ-calculus as a ZX-diagram.

N. Bot¨o, F. Forslund
9
6.1
Phase gadgets, linking functions, and multi-qubit unitaries
Phase gadgets are ZX-diagrams of the form (9) implementing the action of a unitary operator Uf on a
string of input wires |⃗x⟩:= |x1 ...xn⟩as Uf |⃗x⟩= eif(⃗x) |⃗x⟩, where f(⃗x) = α (x1 ⊕···⊕xn) for some phase
α [10].
...
α
(9)
We can implement phase gadgets that act on the inputs of a basis abstraction by supplying shared argu-
ments to a gadget function Gα : n →⊤,
Gα :≡λx ξk⟨ζα,x⟩
∼=
α
...
n
where k = −n−1.
(10)
We can then use this gadget function together with any basis abstraction to add a phase to the inputs
depending on their parity,
ζxζy ⟨Gα⟨x,y⟩,M⟩
∼=
α
M
.
(11)
We can use functions on this form in general to link variables introduced in a basis. The function that
links two variables through identity becomes L :≡ζ92 ∼=
, while linking through Hadamard becomes
LH :≡ζ
π
2
92 ◦^ξ
π
2 ∼=
π
2
π
2
π
2
. Using linking functions like these makes for a concise way to construct multi-
qubit unitaries, for example CNOT ≡ζcξt⟨L⟨c,t⟩,c,t⟩and Cz ≡ζcζt⟨LH⟨c,t⟩,c,t⟩.
6.2
Higher-order functions via sharing
To elaborate further on the features of ζ illustrated in section 1.1 we will look at a function using higher-
order sharing. We deﬁne the Pauli switching function switchβ : (A →A) →A →A in (12).
J ⊢βf f◦H◦f : (A →A) →A →A K
=
A
A∗
A∗
A
(A →A)∗
A →A
(A →A) →A →A (12)
Applying switchβ to some term M : A →A we can view it in a more digestible fashion:
switchβ M
∼=
M
(13)
We call it the Pauli switching function because of its behaviour when applied to the Pauli gates (σx ≡^ξπ,
σz ≡^ζπ, and σy ≡^ξπ ◦^ζπ). When applied to the identity function it ”switches on” the Pauli gate of the
basis it is shared through.
switchβ (λxx)
∼=
(f)
=
=
π
∼=
^βπ
(14)

10
The Zeta Calculus
Then, applying switchβ to the Pauli gate in the basis β switches it off.
switchβ ^βπ
∼=
(f)
=
=
π
π
(id)
=
∼=
λxx
(15)
We can see that this behaviour is expected more generally since the function is self-inverse (16).
switch◦2
β M
∼=
M
(f)
=
M
=
M
(id)
=
M
(16)
This function also illustrates the difference that sharing in different bases makes. Applying it to a Pauli
gate of a different basis does nothing.
π
(π)
=
π
π
(f)
=
π
π
(h)
=
π
π
π
(id)
=
∼=
switchζ ^ξπ
∼=
^ξπ
π
(f)
=
π
π
=
π
(17)
π
(π,f)
=
π
π
(f)
=
π
π
(h)
=
π
π
π
(f)
=
π
=
(h)
=
π
π
π
π
π
π
π
∼=
switchζ (^ξπ ◦^ζπ)
∼=
^ξπ ◦^ζπ
(18)
The switching function illustrates some of the peculiar properties of the use of sharing in higher-order
functions. This speciﬁc instance shows how one can use self-compositions of shared functions to modify
their actions, along with some intuition about what difference sharing in different bases makes.
Note that the calculuations performed in this section cannot be done using the equational rules that
we have presented in this paper. Extending the equational rules to a sound system that can prove facts
such as these is work for the future.
7
Conclusion and further work
We have presented the ζ-calculus, a formal system for denoting quantum operations, with higher-order
functions, where duplicated variables denote the sharing of a quantum state. We have given seman-
tics in terms of the ZX-calculus and provided a sound equational theory. The calculus has a notion of
substitution, which together with the commutation rules of ZX provides useful rewrite rules. We have
shown examples of how the abstraction mechanism of ζ can be used to represent ZX-diagrams, including
phase gadgets and a linking function. We also showed instances of higher-order functions in ζ and their
denotation as ZX-diagrams.
For future work, we want to expand the set of equational rules so that the behaviour of higher-order
functions such as the Pauli switching functions can be catputred.
We note also that very little of the ζ-calculus is depended on the fact that we are working with the
bases Z and X for a complex vector space. The typing rules for the calculus could easily be generated to
any set of bases over any vector space.

N. Bot¨o, F. Forslund
11
We have started investigating different versions of the ζ-calculus for different orders of computation,
denoted on:
• o0 — If we apply the ζ-calculus to the one basis {0,1} for the Z2-vector space Z2
2, we obtain the
familiar λ-calculus, which we know can be applied to classical computation.
• o1 — We can apply the ζ-calculus to real vector spaces R2, manipulating states on an axis deﬁned
by a single spider.
• o2 — We can apply the ζ-calculus to the bases Z and X for C2 to obtain the system presented in
this paper suitable for representing quantum computation.
• o3 — We can apply the ζ-calculus to bases T, X, Y, Z, (W) for the quaternionic vector space
H2 to obtain a calculus suitable for calculations involving Dirac spinors, suggesting the exciting
possibility of spacetime computation.
For each order ζ-abstractions on the form βπxx : 1 →1 seem to have some connection to the
generators of the different levels of the Clifford hierarchy[7]. These would be the Pauli matrices in o2
and the γ-matrices [9] in o3. We hope that this will aid in revealing deeper connections between the
different orders. In any case, each order extends the previous, and we hope that the correspondences
between levels will help with analysing and reasoning about these different forms of computation and
their commonalities.
Acknowledgements
We would like to extend our deepest appreciation to our supervisor Robin Adams for very helpful dis-
cussions about the semantics of the system and support with editing the paper. The theory presented
here makes up the foundation of the Master’s thesis work on the ζ-calculus both authors are currently
writing.
References
[1] T Altenkirch & J Grattage (2005): A functional quantum programming language. In: 20th Annual IEEE
Symposium on Logic in Computer Science (LICS’ 05), pp. 249–258, doi:10.1109/LICS.2005.1.
[2] Pablo Arrighi & Gilles Dowek (2017): Lineal: A Linear-Algebraic Lambda-Calculus. Logical Methods in
Computer Science 13(1), p. 8.
[3] John C Baez & Michael Stay (2009): Physics, Topology, Logic and Computation: A Rosetta Stone. Lecture
Notes in Physics 813, pp. 95–172.
[4] Titouan Carette, Dominic C Horsman & Simon Perdrix (2019): SZX-Calculus: Scalable Graphical Quantum
Reasoning. In: International Symposium on Mathematical Foundations of Computer Science.
[5] Bob Coecke & Ross Duncan (2011): Interacting quantum observables: categorical algebra and diagram-
matics. New Journal of Physics 13(4), p. 043016, doi:10.1088/1367-2630/13/4/043016. Available at
https://dx.doi.org/10.1088/1367-2630/13/4/043016.
[6] Alexander S. Green, Peter LeFanu Lumsdaine, Neil J. Ross, Peter Selinger & Benoˆıt Valiron (2013): Quipper.
ACM SIGPLAN Notices 48(6), pp. 333–342, doi:10.1145/2499370.2462177.
[7] B J Hiley (2011): Process, distinction, groupoids and Clifford algebras: An alternative view of the quantum
formalism. Lect. Notes Phys. 813, pp. 705–752, doi:10.1007/978-3-642-12821-9_12.

12
The Zeta Calculus
[8] Jennifer Paykin, Robert Rand & Steve Zdancewic (2017): QWIRE: a core language for quantum circuits.
In: Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages, POPL
’17, Association for Computing Machinery, New York, NY, USA, pp. 846–858, doi:10.1145/3009837.
3009894. Available at https://doi.org/10.1145/3009837.3009894.
[9] Steven Weinberg (1995): The Quantum Theory of Fields.
Cambridge University Press, doi:10.1017/
CBO9781139644167.
[10] John van de Wetering (2020): ZX-calculus for the working quantum computer scientist.
[11] W K Wootters & W H Zurek (1982): A single quantum cannot be cloned. Nature 299(5886), pp. 802–803,
doi:10.1038/299802a0. Available at https://www.nature.com/articles/299802a0.

N. Bot¨o, F. Forslund
I
A
The string diagram language
The string diagram language is, essentially, the ZX-calculus[10], with the only modiﬁcation being that
we denote a general spider by a purple node. The semantics and equational theory of the string diagrams
is described in ﬁgures 10 and 11. When naming the basis of a spider in a diagram, we hold the following
conventions on their names and colours.
• β is a general basis, and is purple.
• ζ and ξ are the Z and X bases, with their usual colours.
J
K := |0⟩⟨0|+|1⟩⟨1|
r
z
:= |00⟩+|11⟩
r
z
:= ⟨00|+⟨11|
r
z
:= |00⟩⟨00|+|01⟩⟨10|+|10⟩⟨01|+|11⟩⟨11|
J
K := |+⟩⟨0| +|−⟩⟨1|
t
m
n
...
...
θ
|
:= |β0⟩⊗n ⟨β0|⊗m +eiθ |β1⟩⊗n ⟨β1|⊗m
Figure 10: Denotational semantics of the string diagram language.
α
θ
...
...
...
...
...
(f)
=
α+θ
...
...
...
...
(h)
=
...
...
α
α
(id)
=
(hh)
=
α
aπ
...
(π)
=
aπ
aπ
aπ
−α
...
α
aπ
...
(c)
=
aπ
aπ
aπ
...
...
...
n
m (b)
=
...
...
n
m
Figure 11: The equational rules of the string diagram language.

II
The Zeta Calculus
B
Soundness of the equational theory
Γ ⊢(ζαxM)◦^ξaπ : A →B
Γ ⊢ζ−αxM[x := ^ξaπx] : A →B
(ζαxM)◦^ξaπ ≡ζ−αxM[x := ^ξaπx]
Γ ⊢βxM : A →B
Γ ⊢λxM : A →B
ωx(M) = 1
βxM ≡λxM
A∗
B
Γ
M
A∗
B
Γ
M
(id)
=
∆,Γ ⊢(λxM)N : A
∆,Γ ⊢M[x := N] : A
(λxM)N ≡M[x := N]
A
Γ
M
N
∆
A
Γ
N
∆
M
=
Γ ⊢λxM : A →B
Γ ⊢λyM[x := y]
λxM ≡λyM[x := y]
A∗
B
Γ
M
x : A
A∗
B
Γ
M
y : A
=
Γ ⊢λxMx : A →B
Γ ⊢M : A →B
λxMx ≡M
B
Γ
M
=
A∗
B
Γ
M
A∗
Γ ⊢βαxM : A →B
Γ ⊢βαxN : A →B
M ≡N
βαxM ≡βαxN
A∗
B
Γ
M
x :β A
A∗
B
Γ
N
x :β A
=
Γ ⊢(ζαxM)ξaπ : A
Γ ⊢M[x := ξaπ] : A
a ∈{0,1}
(ζαxM)ξaπ ≡M[x := ξaπ]
A
Γ
M
(f)
=
α
θ
Γ ⊢(βαxM)βθ : A
Γ ⊢(βxM)βθ+α : A
(βαxM)βθ ≡(βxM)βθ+α
x :β 1
A
Γ
M
θ+α
x :β 1
B
Γ
M
B
Γ
M
(f)
=
α
θ
Γ ⊢(βαxM)◦^βθ : A →B
Γ ⊢βα+θxM : A →B
(βαxM)◦^βθ ≡βα+θxM
A∗
α+θ
A∗
(h)
=
⊢Hζα
n : n
⊢ξα
n : n
Hζα
n ≡ξα
n
α
α
n
n
Γ ⊢ζαxM : A →B
Γ ⊢ξα(Hx)M[x := Hx] : A →B
ζαxM ≡ξα(Hx)M[x := Hx]
A∗
B
Γ
M
B
Γ
M
(h)
=
α
α
A∗
Γ ⊢⟨∗,M⟩: ⊤⊗A
Γ ⊢M : A
⟨∗,M⟩≡M
M
Γ
=
M
Γ
A
A
M
Γ
=
M
Γ
Γ ⊢⟨M,∗⟩: A⊗⊤
Γ ⊢M : A
⟨M,∗⟩≡M
A
A
α
α
x :β A
x :β A
A
Γ
M
x :ζ 1
aπ
α
A
aπ
Γ
M
(c)
=
B
Γ
M
x :ζ A
aπ
α
B
aπ
Γ
M
(π)
=
A∗
A∗
−α

N. Bot¨o, F. Forslund
III
C
Derivation of higher-order sharing
f :ξA →A ∈{f :ξ A →A}
f :ξA →A⊗A ⊢f : A →A⊗A
V
f :ξ A →A ∈{f :ξA →A}
f :ξ A →A⊗A ⊢f : A →A⊗A
V
f :ξ A →A⊗A ⊢⟨f,f⟩: (A →A⊗A)⊗(A →A⊗A)
T
⊢ξf⟨f,f⟩: (A →A⊗A) →(A →A⊗A)⊗(A →A⊗A)
B
x :ζ A ∈{x :ζ A}
x :ζ A ⊢x : A
V
x :ζ A ∈{x :ζ A}
x :ζA ⊢x : A
V
x :ζ A ⊢⟨x,x⟩: A⊗A
T
⊢ζx⟨x,x⟩: A →A⊗A
B
⊢(ξf⟨f,f⟩)(ζx⟨x,x⟩) : (A →A⊗A)⊗(A →A⊗A)
A
A∗
A∗
A
A∗
A
A
A∗
A
A
B†
V
V
T
V
V
T
B
A
u
wv
}
~
=
(1⊗σ⊗1)
(|++⟩⟨+|+|−−⟩⟨−|)⊗2
(|00⟩⟨0| +|11⟩⟨1|)
(|+⟩⟨++|+|−⟩⟨−−|)

