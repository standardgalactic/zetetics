Xenos: XBOX360 GPU
Michael Doggett
Architect
October 26, 2005
2
Overview
•
System architecture
•
Rendering performance
•
GPU architecture
•
Unified shader
•
Memory Export
•
Texture/Vertex Fetch
•
HDR rendering 
•
Displaced subdivision surfaces

3
System architecture
GPU
UNIFIED
MEMORY
32GB/s
700MHz
128bit
GDDR3
22.4GB/s
Northbridge
Southbridge
2x PCIE
500MB/s
2x 10.8 GB/s
DAUGHTER
DIE
CPU
4
Rendering performance
•
GPU to Daughter Die interface
•
8 pixels/clk
•
32BPP color
•
4 samples Z - Lossless compression
•
16 pixels/clk – Double Z
•
4 samples Z - Lossless compression
DAUGHTER
DIE
GPU
32GB/s

5
Rendering performance
•
Alpha and Z logic to EDRAM interface
•
256GB/s
•
Color and Z - 32 samples
•
32bit color, 24bit Z, 8bit stencil
•
Double Z - 64 samples
•
24bit Z, 8bit stencil
DAUGHTER DIE
10MB EDRAM
256GB/s
8pix/clk, 4x MSAA, Stencil and Z test, Alpha blending
6
Unified Shader
GPU architecture
Vertex Pipeline
Pixel Pipeline
Display Pixels
Primitive Setup
Clipper
Rasterizer
Hierarchical Z/S
Index Stream 
Generator
Tessellator
Output
Buffer
GPU
DAUGHTER
DIE
Memory Export
UNIFIED
MEMORY
Texture/Vertex Fetch

7
Unified Shader
•
A revolutionary step in Graphics 
Hardware 
•
One hardware design that performs 
both Vertex and Pixel shaders
•
Vertex processing power
Pixel Shader
Vertex Shader
Vertices
Pixels
Pixels
Vertices
Unified Shader
8
Unified Shader
•
GPU based vertex and pixel load 
balancing
•
Better vertex and pixel resource usage
•
Union of features 
•
E.g. Control flow, indexable constant, …
•
DX9 Shader Model 3.0+
Pixels
Vertices
Unified Shader
3 SIMDs
Vec4
Scalar
48 ALUs

9
Memory Export
•
Shader output to a computed address
•
Virtualize shader resources - multipass
•
Shader debug
•
Randomly update data structures from 
Vertex or Pixel Shader
•
Scatter write
GPU
EDRAM
Memory
Export
UNIFIED
MEMORY
10
Texture/Vertex Fetch
•
Shader fetch can be either:
•
Texture fetch (16 units)
• LOD computation
• Linear, Bi-linear, Tri-linear Filtering
• Uses cache optimized for 2D, 3D texture data 
with varying pixel sizes
• Unified texture cache
•
Vertex fetch (16 units)
• Uses cache optimized for vertex-style data

11
Texture Arrays
•
Generalization of 6 faced 
cube maps to 64 faces
•
Each face is a 2D mip
mapped surface
•
Not volume texture
•
Applications
•
Animation frames
•
Varying skins for 
instanced characters / 
objects
•
Character shadow 
texture flipbook 
animations
0
1
63
…
12
Texture array application :
Unique seeds for instanced shading

13
Texture array application :
Hundreds of instanced characters
14
Texture compression
•
All of the old DXT formats
•
DXT1, DXT2/3, DXT4/5
•
Several new formats (variations on above 
formats)
•
DXT3A
•
4 bit scalar replicated into four channels in shader
•
DXT3A as 1111
•
1 bit per channel pixel
•
DXT5A
•
3bit selection between 2 8bit endpoints
•
DXN 
•
3Dc normal compression, 
•
2-channel  version of DXT5A
•
CTX1
•
2bit selection between 2 8.8bit endpoints

15
High Dynamic Range Rendering
•
Special compact HDR render target 
format:
•
Just 32 bits: 7e3 7e3 7e3 2
•
Compatible with multisample antialiasing
•
R, G and B are unsigned floating point 
numbers
•
7 bits of mantissa
•
3 bits of exponent
•
Range of 0..16
•
2 bits of alpha channel
•
16-bit fixed point at half speed
•
With full blending
16
Displaced subdivision surfaces
Base mesh
• Used by Tessellator
to generate vertices
Subdivision surface
Displaced subdivision surface

17
Questions ?

