arXiv:2303.03865v1  [math.CT]  7 Mar 2023
Bicategories of automata, automata in bicategories⋆
Guido Boccalia, Andrea Larettob, Fosco Loregianc,1,∗, Stefano Luneiad
aUniversity of Torino, Torino, Italy
bTallinn University of Technology, Tallinn, Estonia
cTallinn University of Technology, Tallinn, Estonia
dUniversity of Bologna, Bologna, Italy
Abstract
We study bicategories of (deterministic) automata, i.e.
how automata E ←
E ⊗I →O organise as the 1-cells of a bicategory MlyK, drawing from prior work
of Katis-Sabadini-Walters, and Di Lavore-Gianola-Rom´an-Sabadini-Soboci´nski,
and linking their bicategories of ‘processes’ to a bicategory of Mealy machines
constructed in 1974 by R. Guitart. We make clear the sense in which Guitart’s
bicategory retains information about automata, proving that Mealy machines
`a la Guitart identify to certain Mealy machines `a la K-S-W that we call fugal
automata; there is a biadjunction between fugal automata and the bicategory
of K-S-W. Then, we take seriously the motto that a monoidal category is just
a one-object bicategory. We deﬁne categories of Mealy and Moore machines
inside a bicategory B; we specialise this to various choices of B, like categories,
relations, and profunctors. Interestingly enough, this approach gives a way to
interpret the universal property of ‘reachability of a state’ as a Kan extension
and leads to a new notion of 1- and 2-cell between Mealy and Moore automata,
that we call intertwiners, related to the universal property of K-S-W bicategory.
1. Introduction
A single historical fact can motivate, alone, the profound connection be-
tween category theory and automata theory: one of the founders of the ﬁrst
wrote extensively about the second [22, 23]. A more intrinsic reason is that a
natural way to interpret category theory is as a theory of systems and processes.
Morphisms in a category can be considered a powerful abstraction of ‘sequential
operations’ performed on a domain/input to obtain a codomain/output. Hence
why the introduction of categorical models for computational machines has been
⋆Loregian was supported by the ESF funded Estonian IT Academy research measure
(project 2014-2020.4.05.19-0001).
∗Corresponding author
Email addresses: andrea.laretto@altech.ee (Andrea Laretto),
fosco.loregian@gmail.com (Fosco Loregian), stefano.luneia@gmail.com (Stefano Luneia)
Preprint submitted to ArXiv
March 8, 2023

rich in results, starting from the elegant attempts by Arbib and Manes [2, 5–
8, 58] –cf. also [3, 20, 21] for exhaustive monographs– and Goguen [27–29], up
to the ultra-formal –and sadly, forgotten– experimentations of [9, 10, 31, 32, 34]
using hyperdoctrines, 2-dimensional monads, bicategories, lax co/limits. . . up
to the modern coalgebraic perspective of [37, 61, 62, 66]; all this, without men-
tioning categorical approaches to Petri nets [53], based essentially on the same
analogy, where the computation of a machine is concurrent –as opposed to sin-
gle-threaded.
Furthermore, many constructions of computational signiﬁcance often, if not
always, have a mathematical counterpart in terms of categorical notions: the
transition from a deterministic machine to a non-deterministic one is reﬂected
in the passage from automata in a monoidal category (cf. [21, 54]), to automata
in the Kleisli category of an opmonoidal monad (cf. [33, 39]; this approach is
particularly useful to capture categorically stochastic automata, [7, 15, 19] as
they appear as automata in the Kleisli category of a probability distribution
monad); minimisation can be understood in terms of factorisation systems (cf.
[18, 29]); behaviour as an adjunction (cf. [55, 56]).
The present work starts from the intuition, ﬁrst presented in [44, 59], that
the analogy between morphisms and sequential machines holds up to the point
that the series and parallel composition of automata should itself be reﬂected
in the ‘series’ and ‘parallel ’ composition of morphisms in a category. As a
byproduct of their ‘Circ’ construction, one can see how the 1-cells of a certain
monoidal bicategory specialise exactly a Mealy machines E
d
←−E ⊗I
s−→O with
inputs and outputs I and O.
Outline of the paper. The ﬁrst result we ﬁnd in this work, and that oc-
cupies section 2 is that this category relates to another bicategory constructed
by R. Guitart in [31], where the author observes that one can use certain cate-
gories Mac(M, N) of spans, where M, N are categories, as hom categories of a
bicategory Mac, and shows that Mac admits a concise description as the Kleisli
bicategory of the monad of diagrams [31, §1] (cf. also [34], by the same author,
and [57] for a more modern survey); Mealy machines shall be recognisable as
the 1-cells of Mac between monoids, regarded as categories with a single object.
The fundamental assumption in [31] is that a Mealy machine E
d
←−E ⊗M
s−→N
satisﬁes a certain property of compatibility with the action of d on E, cf. (14),
that we call being a fugal automaton:
s(e, m · m′) = s(e, m) · s(d(e, m), m′).
This notion can be motivated in the following way: if s satisﬁes (14), then
s ‘lifts’ to a functor E[d] →N deﬁned on the category of elements, and in
fact, deﬁnes a ‘relational action’ in its own right, compatible with the action d
(formally speaking, E[d] is a displayed category [4] over N). We show that there
is a sub-bicategory Mly♭
Set of MlySet made of fugal automata and that Mly♭
Set is
biequivalent (actually, strictly) to the 1-full and 2-full sub-bicategory of Mac
spanned by monoids.
2

The second result we propose in this paper is motivated by the slogan for
which a monoidal category is just a bicategory with a single object: what are
automata inside a bicategory B, where instead of input/output objects I, O we
have input/output 1-cells, arranged as e
δ⇐e ◦i
σ⇒o? Far from being merely
formal speculation (a similar idea was studied in a short, cryptic note [10] to
describe behaviour through Kan extensions: we take it seriously and present it
as a quite straightforward observation in Remark 3.6), we show how this allows
for a concise generalisation of ‘monoidal’ machines:
• ﬁrst, the simple fact that a diagram of 2-cells as above exists forces i to
be an endo-1-cell A →A, in order to be composable with the state 1-
cell e : A →B and map to the output 1-cell o : A →B; this hints at
some hidden structure that the one-object case, where every 1-cell is an
endomorphism for trivial reasons, did not allow to see (cf. Remark 3.2).
The take is that input and output are not interchangeable concepts: an
input 1-cell must be an endomorphism.
• Second, another piece of structure that in the monoidal case remained
hidden is a natural notion of 1- and 2-cell between bicategorical machines,
which specialises, in the monoidal case, to a novel notion of 1- and even 2-
cell between automata; we call such arrows intertwiners and intertwiner
2-cells, cf. subsection 3.1; they have apparently never been considered
before, in the monoidal case.
Related work.
A word on related work and how we ﬁt into it: the ideas
in section 2 borrow heavily from [44, 59] where bicategories of automata (or
‘processes’) are studied in ﬁne detail; in section 2 we carry on a comparison
with a diﬀerent approach to bicategories of automata, present in [31] but also
in [32, 34]; in particular, our proof that there is an adjunction between the two
bicategories is novel –to the best of our knowledge– and it hints at the fact
that the two approaches are far from being independent. At the level of an
informal remark, the idea of approaching automata via (spans where one leg is
a) ﬁbrations bears some resemblance to Walters’ work on context-free languages
through displayed categories in [68], and the requirement to have a ﬁbration as
one leg of the span should be thought as mirroring determinism of the involved
automata: if ⟨s, d⟩: E × M →N × E is fugal and s deﬁnes a ﬁbration over
N, then E is a M-N-bimodule, not only an M-set; there is extensive work of
Betti-Kasangian [11, 12, 41] and Kasangian-Rosebrugh [42] on ‘profunctorial’
models for automata, their behaviour, and the universal property enjoyed by
their minimisation: spans of two-sided ﬁbrations [63, 64] and profunctors are
well-known to be equivalent ways to present the same bicategory of two-sided
ﬁbrations. Carrying on our study will surely determine a connection between
the two approaches.
For what concerns section 3, the idea of valuing a Mealy or a Moore machine
in a bicategory seems to be novel, although in light of [59] and in particular of
their concrete description of C = ΩΣ(K, ⊗) it seems that both MlyB and MreB
3

allow deﬁning tautological functors into C. How these two bicategories relate is
a problem we leave for future investigation: [59] proves that when K is Cartesian
monoidal, MlyK is ΩΣ(K, ×). The conjecture is that our MlyB is ΩB under some
assumptions on the bicategory B: our notion of intertwiner seems to hint in that
direction. Characterising ‘behaviour as a Kan extension’ is nothing but taking
seriously the claim that animates applications of coalgebra theory [38, 39] to
automata; the -sadly forgotten- work of Bainbridge [10] bears some resemblance
to our idea, but his note is merely sketched, no plausibility for his intuition is
given. Nevertheless, we recognise the potential of his idea and took it to its
natural continuation with modern tools of 2-dimensional algebra.
1.1. Mealy and Moore automata
The scope of the following subsection is to introduce the main characters
studied in the paper:1 categories of automata valued in a monoidal category
(K, ⊗) (in two ﬂavours: ‘Mealy’ machines, where one considers spans E ←
E ⊗I →O, and ‘Moore’, where instead one consider pairs E ←E ⊗I, E →O).
‘Mealy’ automata are known as ‘deterministic automata’ in today’s parlance.
However, since we often need to distinguish between the two kinds of diagrams
or state deﬁnitions for both at a time, we stick to an older terminology.
The only purpose of this short section is to ﬁx the notation for section 2 and
3; comprehensive classical references for this material are [3, 21].
For the entire subsection, we ﬁx a monoidal category (K, ⊗, 1).
Deﬁnition 1.1 (Mealy machine). A Mealy machine in K of input object I and
output object O consists of a triple (E, d, s) where E is an object of K and d, s
are morphisms in a span
e :=

E
E ⊗I
d
o
s
/ O

(1)
Remark 1.2 (The category of Mealy machines). Mealy machines of ﬁxed input
and output I, O form a category, if we deﬁne a morphism of Mealy machines
f : e = (E, d, s) →(F, d′, s′) = f as a morphism f : E →F in K such that
E
f

E ⊗I
d
o
f⊗I

s
/ O
F
F ⊗I
d′
o
s′
/ O
(2)
Composition and identities are performed in K.
1An almost identical introductory short section appears in [13], of which the present note
is a parallel submission –although related, the two manuscripts are essentially independent,
and the purpose of this repetition is the desire for self-containment.
4

The category of Mealy machines of input and output I, O is denoted as
MlyK(I, O).
Deﬁnition 1.3 (Moore machine). A Moore machine in K of input object I and
output object O is a diagram
m :=

E
E ⊗I ; E
d
o
s
/ O

(3)
Remark 1.4 (The category of Moore machines). Moore machines of ﬁxed input
and output I, O form a category, if we deﬁne a morphism of Moore machines
f : e = (E, d, s) →(F, d′, s′) = f as a morphism f : E →F in K such that
E
f

E ⊗I
d
o
f⊗I

E
f

s
/ O
F
F ⊗I
d′
o
F
s′
/ O
(4)
Remark 1.5 (Canonical extension of a machine). If (K, ⊗) has countable co-
products preserved by each A ⊗
then the span (1), considering for example
Mealy machines, can be ‘extended’ to a span
E
E ⊗I∗
d∗
o
s∗
/ O
(5)
where d∗, s∗can be deﬁned inductively from components dn, sn : E ⊗I⊗n →
E, O; if K is closed, the map d∗corresponds, under the monoidal closed ad-
junction, to the monoid homomorphism I∗→[E, E] induced by the universal
property of I∗= P
n≥0 I⊗n.
2. Bicategories of automata
Let (K, ×) be a Cartesian category. There is a bicategory MlyK deﬁned as
follows (cf. [59] where this is called ‘Circ’ and studied more generally, in case
the base category has a non-Cartesian monoidal structure):
Deﬁnition 2.1 (The bicategory MlyK, [59]). The bicategory MlyK has
• its 0-cells I, O, U, . . . are the same objects of K;
• its 1-cells I →O are the Mealy machines (E, d, s), i.e. the objects of the
category MlyK(I, O) in Remark 1.2, thought as morphisms ⟨s, d⟩: E×I →
O × E in K;
• its 2-cells are Mealy machine morphisms as in Remark 1.2;
• the composition of 1-cells
♦
is deﬁned as follows: given 1-cells ⟨s, d⟩:
E ×I →J ×E and ⟨s′, d′⟩: F ×J →K ×F their composition is the 1-cell
5

⟨s′ ♦s, d′ ♦d⟩: (F × E) × I →K × (F × E), obtained as
F × E × I
F ×⟨s,d⟩/ F × J × E
⟨s′,d′⟩×E/ K × F × E;
(6)
• the vertical composition of 2-cells is the composition of Mealy machine
morphisms f : E →F as in Remark 1.2;
• the horizontal composition of 2-cells is the operation deﬁned thanks to
bifunctoriality of
♦
: MlyK(B, C) × MlyK(A, B) →MlyK(A, C);
• the associator and the unitors are inherited from the monoidal structure
of K.
Remark 2.2. Spelled out explicitly, the composition of 1-cells in Equation 6
corresponds to the following morphisms (where we freely employ λ-notation
available in any Cartesian category):
d2 ♦d1 : λefa.⟨d2(f, s1(e, a)), d1(e, a)⟩
(7)
s2 ♦s1 : λefa.s2(f, s1(e, a))
(8)
Remark 2.3 (Kleisli extension of automata as base changes). If P : K →K
is a commutative monad [47, 48], we can lift the monoidal structure (K, ⊗)
to a monoidal structure (Kl(P), ¯⊗) on the Kleisli category of P; this leads to
the notion of P-non-deterministic automata or Pλ-machines studied in [33, §2,
D´eﬁnition 6]. Nondeterminism through the passage to a Kleisli category is a
potent idea that developed into the line of research on automata theory through
coalgebra theory [39], cf. in particular Chapter 2.3 for a comprehensive refer-
ence, or the self-contained [37].
We do not investigate the theory of Pλ-machines apart from the following
two results the proof of which is completely straightforward: we content our-
selves with observing that the results expounded in [43, 59], and in general the
language of bicategories of processes, naturally lends itself to the generation of
base-change functors, of which the following two are particular examples.
Proposition 2.4. The correspondence deﬁned at the level of objects by sending
(E, d, s) ∈MlyK(I, O) to
PE
E
ηE
o
E ⊗I
d
o
s
/ O
ηO/ PO
(9)
extends to a functor L : MlyK(I, O) →MlyKl(P )(I, O).
Proposition 2.5. The correspondence sending (E, d, s) ∈MlyKl(P )(I, O) into
PE
PPE
µE
o
PE ⊗PI
P d◦D
o
P s◦D / PPO
µO / PO
(10)
extends to a functor (−)e : MlyKl(P )(I, O) →MlyK(PI, PO).
6

More precisely, the proof of the following result is straightforward –only
slightly convoluted in terms of notational burden– so much so that we feel
content to enclose it in a remark.
Remark 2.6. Let H, K be cartesian monoidal categories, then we can deﬁne
2-categories MlyH, MlyK as in Deﬁnition 2.1; let F : H →K be a lax monoidal
functor. Then, there exists a ‘base change’ pseudofunctor F∗: MlyH →MlyK,
which is the action on 1-cells of a 2-functor Cat× →Bicat from (Cartesian
monoidal categories, product-preserving functors, Cartesian natural transfor-
mations), to (bicategories, pseudofunctors, oplax natural transformations).
As a corollary, we re-obtain the functors of Proposition 2.5 and Proposi-
tion 2.4 from the free and forgetful functors FP : K →Kl(P) and UP : Kl(P) →
K.
2.1. Fugal automata, Guitart machines
A conceptual construction for MlyK in Deﬁnition 2.1 is given as follows in
[43]: it is the category ΩΣ(K, ⊗) of lax functors N →Σ(K, ×), where Σ is the
‘suspension’ of (K, ⊗), i.e. K regarded as a one-object bicategory; a universal
property for MlyK is provided in [44] (actually, for any ΩΣ(K, ⊗)): it is the free
category with feedbacks (op. cit., Proposition 2.6, see also [50]) on K. The bi-
category MlyK addresses the fundamental question of whether one can fruitfully
consider morphisms in a category as an abstraction of ‘sequential operations’
performed on a domain/input to obtain a codomain/output, and up to what
point the analogy between morphisms and sequential machines holds up (com-
posing 1-cells in MlyK accounts for the sequential composition of state machines,
where the ‘state’ E is an intrinsic part of the speciﬁcation of a machine/1-cell
⟨s, d⟩).
Twenty eight years before [44], however, Ren´e Guitart [31] exhibited another
bicategory Mac of ‘Mealy machines’, deﬁned as a suitable category of spans,
of which one leg is a ﬁbration, and its universal property: Mac is the Kleisli
bicategory of the diagram monad (monade des diagrammes in [31, §1], cf. [46,
57]) Cat//
.2
Deﬁnition 2.7 (The bicategory Macs, adapting [31]). Deﬁne a bicategory Macs
as follows:
• 0-cells are categories A, B, C. . . ;
2Guitart’s note [31] is rather obscure with respect of the ﬁne details of his deﬁnition, as
he chooses for 2-cells the H for which the upper triangle in (12) is only laxly commutative,
and when it comes to composition of 1-cells he invokes a produit ﬁbr´e canonique; apparently,
this can’t be interpreted as a strict pullback, or there would be no way to deﬁne horizontal
composition of 2-cells; using a comma object instead of a strict pullback, the lax structure
is given by the universal property –observe that the functor that must be an opﬁbration is
indeed an opﬁbration, thanks to [36, Exercise 1.4.6], but this opﬁbration does not remember
much of the opﬁbration q one pulled back. Our theorem involves a strict version of Guitart’s
Mac, because the functor Π of Theorem 2.17 factors through Macs ⊆Mac.
7

• 1-cells (E; p, S) : A →B consist of spans
A
E
p
oo
S
/ B
(11)
where p : E →A is a discrete opﬁbration;
• 2-cells H : (E; p, S) ⇒(F; q, T ) are pairs where H : E →F is a morphism
of opﬁbrations (cf. [36, dual of 1.7.3.(i)]): depicted graphically, a 2-cell is
a diagram
E
H
 ❅
❅
❅
❅
❅
❅
❅
❅
S
/
p 
B
A
F
q
oo
T
O
(12)
where both triangles commute and H is an opCartesian functor (it pre-
serves opCartesian morphisms);
• composition of 1-cells A
p←−E
S−→B and B
q←−F
T−→C is via pullbacks, as it
happens in spans, and all the rest of the structure is deﬁned as in spans.
Given this, a natural question that might arise is how do the two bicategories
of Deﬁnition 2.1 and Deﬁnition 2.7 interact, if at all?
In the present section, we aim to prove the existence of an adjunction (cf.
Theorem 2.18) between a suitable sub-bicategory of Macs and a sub-bicategory
of MlySet spanned over what we call fugal Mealy machines between monoids (cf.
Deﬁnition 2.11).3
Since the construction of Macs outlined in [31] requires some intermediate
steps (and it is written in French), we deem it necessary to delve into the details
of how its structure is presented. To ﬁx ideas, we keep working in the category
of sets and functions.
Notation 2.8. In order to avoid notational clutter, we will blur the distinction
between a monoid M and the one-object category it represents; also, given the
d part of a Mealy machine, we will denote as d∗both the extension E ×I∗→E
of Remark 1.5, which is a monoid action of I∗on E, and the functor I∗→Set
to which the action corresponds.
Remark 2.9. In the notation above, a Mealy machine e = (E, d, s) yields a
discrete opﬁbration (cf. [1, 36]) E[d∗] →I∗over the monoid I∗, and E[a] is the
translation category of an M-set a : M × X →X (cf. [14] for the case when M
is a group: clearly, E[a] is the category of elements of the action a : M →Set
regarded as a functor), i.e. the category having
3A fugue is ‘a musical composition in which one or two themes are repeated or imitated
by successively entering voices and contrapuntally developed in a continuous interweaving of
the voice parts’, cf. [67]. In our case, the interweaving is between s, d in a Mealy machine.
8

• objects the elements of E;
• a morphism m : e →e′ whenever e′ = d∗(e, m).
Composition and identities are induced by the fact that d∗is an action.
Remark 2.10. The hom-categories Macs(A, B) of Deﬁnition 2.7 ﬁt into strict
pullbacks
Macs(A, B)
/

Cat/B

opFib/A
/ Cat
(13)
where Cat/B is the usual slice category of Cat over B.
Deﬁnition 2.11 (Fugal automaton). Let M, N be monoids; a Mealy machine
⟨s, d⟩: E × M →N × E is fugal if its s part satisﬁes the equation
s(e, m · m′) = s(e, m) · s(d(e, m), m′).
(14)
Remark 2.12. This deﬁnition appears in [31, §2] and it looks an ad-hoc re-
striction for what an output map in a Mealy machine shall be; but (14) can be
motivated in two ways:
• A fugal Mealy machine ⟨s, d⟩: E × M →N × E induces in a natural way
a functor Σ : E[d∗] →N because (14) is exactly equivalent to the fact
that Σ deﬁned on objects in the only possible way, and on morphisms as
Σ(e →d∗(e, m)) = s(e, m) preserves (identities and) composition;
• given a generic Mealy machine ⟨s, d⟩: E × A →B × E one can produce a
‘universal’ fugal Mealy machine ⟨s, d⟩♭= ⟨s♭,
⟩: E × A∗→B∗× E, and
this construction is well-behaved for 1-cell composition in MlySet, in the
sense that (s2 ♦s1)♭= s♭
2 ♦s♭
1.
The remainder of this section is devoted to making these claims precise
(and prove them). In particular, the ‘universality’ of ⟨s, d⟩♭among fugal Mealy
machines obtained from ⟨s, d⟩is clariﬁed by the following Lemma 2.13 and by
Theorem 2.18, where we prove that there is a 2-adjunction between MlySet and
Mly♭
Set.
Lemma 2.13. Given sets A, B, denote with A∗, B∗their free monoids; then,
there exists a ‘fugal extension’ functor (
)♭
A,B : MlySet(A, B) →Mly♭
Set(A∗, B∗).
Proof. The proof is deferred to the appendix, p. 23. In particular, the map s♭
is constructed inductively as
(
s♭(e, [ ])
= [ ]
s♭(e, a :: as)
= s(e, a) :: s♭(d(e, a), as)
(15)
9

and it ﬁts in the Mealy machine ⟨s♭, d∗⟩: E×A∗→B∗×E where d∗is as in (5).
The proof that ⟨s♭, d∗⟩is fugal in the sense of (14) can be done by induction
and poses no particular diﬃculty.
Lemma 2.14. Given sets A, B there exists a commutative square
Mly♭
Set(A∗, B∗)
/

Cat/B∗

opFib/A∗
/ Cat.
(16)
Proof of Lemma 2.14. Given a fugal Mealy machine ⟨s, d⟩: E × A∗→B∗× E
between free monoids, from the action d we obtain a discrete opﬁbration E[d] →
A∗, and from the map s : E × A∗→B∗we obtain a functor Σ : E[d∗] →B∗as
in Remark 2.12. So, one can obtain a span
A∗
E[d∗]
D
oo
Σ
/ B∗
(17)
where the leg D : E[d∗] →A∗is as in Remark 2.9 and Σ is an in Remark 2.12.
The functors opFib/A∗←Mly♭
Set(A∗, B∗) →Cat/B∗project to each of the two
legs.
Corollary 2.15. The universal property of the hom-categories Macs(A, B) ex-
posed in Remark 2.10 yields the right-most functor in the composition
ΓA,B : MlySet(A, B)
(
)♭
A,B
/ Mly♭
Set(A∗, B∗)
ΠA,B
/ Macs(A∗, B∗)
(18)
Lemma 2.16 (Fugal extension preserves composition). Let A, B, C be sets,
s1 : E × A →B and s2 : F × B →C parts of Mealy machines ⟨s1,
⟩and
⟨s2,
⟩; then
(s2 ♦s1)♭= s♭
2 ♦s♭
1.
(19)
Proof. The proof is deferred to the appendix, p. 23.4
This, together with the fact that the identity 1-cell 1 × A →A × 1 is fugal
(the proof is straightforward), yields that there exists a 2-subcategory Mly♭
Set of
MlySet where 0-cells are monoids, 1-cells are the ⟨s, d⟩where s is fugal in the
sense of Deﬁnition 2.11, and we take all 2-cells.
Theorem 2.17. The maps ΓA,B of Corollary 2.15 constitute the action on 1-
cells of a 2-functor Γ : MlySet →Macs. More precisely, there are 2-functors
(
)♭: MlySet →Mly♭
Set and Π : Mly♭
Set →Macs whose composition is Γ.
4The argument is straightforward but tedious (the diﬃcult part is that the condition to
verify on (s2 ♦s1)♭involves d2 ♦d1, the expression of which we recall from (7), is the λ-term
λefa.⟨d2(f, s1(e, a)), d1(e, a)⟩).
10

Proof. The proof is deferred to the appendix, p. 24.
Theorem 2.18. The 2-functor (
)♭: MlySet →Mly♭
Set admits a right 2-adjoint;
the 2-functor Π : Mly♭
Set →Macs identiﬁes Mly♭
Set as the 1-full and 2-full subcat-
egory of Macs spanned by monoids.
Proof. The proof is deferred to the appendix, p. 24. The last statement essen-
tially follows from (17): the span (D, Σ) is essentially equivalent to the fugal
Mealy machine ⟨s, d⟩, since its left leg D determines a unique action of A∗on
the set of objects E[d∗]0, and Σ and s are mutually deﬁned.
3. Bicategory-valued machines
A monoidal category is just a bicategory with a single 0-cell; then, do Deﬁni-
tion 1.1 and Deﬁnition 1.3 admit a generalisation when instead of K we consider
a bicategory B with more than one object? The present section answers in the
positive. We also outline how, passing to automata valued in a bicategory, a
seemingly undiscovered way to deﬁne morphisms between automata, diﬀerent
(from (1.2) and) from the categories of ‘variable’ automata described in [21,
§11.1]: we study this notion in Deﬁnition 3.12.
In our setting, ‘automata’ become diagrams of 2-cells in B, and input, output
and state are 1-cells, in contrast with previous studies where automata appeared
as objects, and with [59] (and our section 2), where they appear as 1-cells. This
perspective suggests that 2-dimensional diagrams of a certain shape can be
thought of as state machines -so, they carry a computational meaning; but also
that state machines can be fruitfully interpreted as diagrams: in Example 3.11
we explore deﬁnitions of an automaton where input and output are relations, or
functors (in Example 3.9), or profunctors (in Example 3.10); universal objects
that can be attached to the 2-dimensional diagram then admit a computational
interpretation (cf. (28) where a certain Kan extension resembles a ‘reachability’
relation).
This idea is not entirely new: it resembles an approach contained in [9, 10]
where the author models the state space of abstract machines as a functor,
of which one can take the left/right Kan extension along an ‘input scheme’.
However, Bainbridge’s works are rather obscure (and quite ahead of their time),
so we believe we provide some advancement to state of the art by taking his
idea seriously and carrying to its natural development –while at the same time,
providing concrete examples of bicategories in which inputs/outputs automata
can be thought as 1-cells, and investigating the structure of the class of all such
automata as a global object.
Deﬁnition 3.1. Adapting from Deﬁnition 1.1 verbatim, if B is a bicategory
with 0-cells A, B, X, Y, . . . , 1-cells i : A →B, o : X →Y, . . . and 2-cells α, β, . . .
the kind of object we want in MlyB(i, o) is a span of the following form:
e
e ◦i
δ
ks
σ
+3 o
(20)
11

for 1-cells i : X →Y , e : A →B, o : C →D. Note that with
◦
, we denote
the composition of 1-cells in B, which becomes a monoidal product in B has a
single 0-cell.
Remark 3.2. The important observation here is that the mere existence of
the span (δ, σ) ‘coherces the types’ of i, o, e in such a way that i must be an
endomorphism of an object A ∈B, and e, o : A →B are 1-cells. Interestingly,
these minimal assumptions required even to consider an object like (20) make
iterated compositions i◦· · ·◦i as meaningful as iterated tensors I⊗· · ·⊗I, and in
fact, the two concepts coincide when B has a single object ∗and hom-category
B(∗, ∗) = K.
In the monoidal case, the fact that an input 1-cell stands on a diﬀerent level
from an output was completely obscured by the fact that every 1-cell is an
endomorphism.
Let us turn this discussion into a precise deﬁnition.
Deﬁnition 3.3 (Bicategory-valued Mealy machines). Let B be a bicategory,
and ﬁx two 1-cells i : A →A and o : A →B; deﬁne a category MlyB(i, o) as
follows:
bml1) the objects are diagrams of 2-cells as in (20);
bml2) the morphisms (e, δ, σ) →(e′, δ′, σ′) are 2-cells ϕ : e ⇒e′ subject to
conditions similar to Remark 1.2:
• σ′ ◦(ϕ ∗i) = σ;
• δ′ ◦(ϕ ∗i) = ϕ ◦δ.
Deﬁnition 3.4 (Bicategory-valued Moore machines). Deﬁne a category MreB(i, o)
as follows:
bmo1) the objects are pairs of 2-cells in B, δ : e ◦i ⇒e and σ : e ⇒o;
bmo2) the morphisms (e, δ, σ) →(e′, δ′, σ′) are 2-cells ϕ : e ⇒e′ such that
diagrams of 2-cells similar to those in Deﬁnition 3.3 are commutative.
Notation 3.5. In the following, an object of MlyB(i, o) (resp., MreB(i, o)) will
be termed a bicategorical Mealy machine (resp., a bicategorical Moore machine)
of input cell i and output cell o, and the objects A, B are the base of the
bicategorical Mealy machine (e, δ, σ).
To denote that a bicategorical Mealy
machine is based on A, B we write (e, δ, σ)A,B.
In [10] the author models the state space of abstract machines as follows: ﬁx
categories A, X, E and a functor Φ : X →A, of which one can take the left/right
Kan extension along an ‘input scheme’ u : E →X; a machine with input scheme
u is a diagram of 2-cells in Cat(E, A) of the form M = (I ⇒Φ ◦u ⇒J), and
the behaviour B(M) of M is the diagram of 2-cells LanuI ⇒Φ ⇒RanuJ.
All this bears some resemblance to the following remark, but at the same
time looks very mysterious, and not much intuition is given in op. cit. for what
12

the approach in study means; we believe our development starts from a similar
point (the intuition that a category of machines is, in the end, some category
of diagrams –a claim we substantiate in Proposition 3.8) but rapidly takes a
diﬀerent turn (cf. Deﬁnition 3.12), and ultimately gives a cleaner account of
Bainbridge’s perspective (see also [9] of the same author).
Remark 3.6 (Behaviour as a Kan extension). A more convenient depiction
of the span in bmo1 will shed light on our Deﬁnition 3.3 and 3.4, giving in
passing a conceptual motivation for the convoluted shape of ﬁnite products in
MreK(I, O) and MlyK(I, O) (cf. [21, Ch. 11]): a bicategorical Moore machine
in B of ﬁxed input and output i, o consists of a way of ﬁlling the dotted arrows
in the diagram
A
i
⑦⑦⑦⑦⑦⑦⑦⑦
e

o

    <D
σ
A
e
/
❴❴❴❴+3
δ
B
(21)
with e : A →B and two 2-cells δ, σ. But then the ‘terminal way’ of ﬁlling such
a span can be characterised by the right extension of the output object along a
certain 1-cell obtained from the input i. Let us investigate how.
First of all, we have to assume something on the ambient hom-categories
B(A, A), namely that each of these admits a left adjoint to the forgetful functor
B(A, A)
/ Mnd/A
(22)
so that every endo-1-cell i : A →A has an associated extension to an endo-1-cell
i♮: A →A with a unit map i ⇒i♮that is initial among all 2-cells out of i into
a monad in B; i♮is usually called the free monad on i.
Construction 3.7. Now, ﬁx i, o as in Deﬁnition 3.4; we claim that the terminal
object of MreB(i, o) is obtained as the right extension in B of the output o along
i♮. We can obtain
• from the unit η : idA ⇒i♮of the free monad on i, a canonical modiﬁcation
Rani ⇒Ranid = idA, with components at o given by 2-cells σ : Ranio ⇒o;
this is a choice of the right leg for a diagram like bmo1;
• from the multiplication µ : i♮◦i♮⇒i♮of the free monad on i, a canonical
modiﬁcation Rani♮⇒Rani♮◦Rani♮, whose components at o mate to a
2-cell δ0 : Rani♮o ◦i♮⇒Rani♮o; the composite
δ : Rani♮o ◦i
Rani♮o∗η +3 Rani♮o ◦i♮
+3 Rani♮o
(23)
The left leg is now chosen for a diagram like bmo1.
Together, (Rani♮o, δ, σ) is a bicategorical Mealy machine, and the universal
property of the right Kan extension says it is the terminal such.
A similar
line of reasoning yields the same result for MlyB(i, o), only now σ is the 2-cell
13

obtained as mate of ǫ ◦(Rani♮o ∗η) : Rani♮o ◦i ⇒Rani♮o ◦i♮⇒o from the
counit of
◦i♮⊣Rani♮.
Proposition 3.8 (MreB(i, o) and MlyB(i, o) as categories of diagrams.). There
exists a 2-category P and a pair of strict 2-functors W, G : P →B such that bi-
categorical Moore machines with ‘variable output 1-cell’ i.e. the 2-dimensional
diagrams like in (21) where o is variable, can be characterised as natural trans-
formations W ⇒G.
Proof. The proof is deferred to the appendix, p. 26.
As explained therein, bicategorical Moore machines with ﬁxed output o can
be characterised as particular such natural transformations that take value o on
one argument.
Also, minor adjustments to the shape of G yield a similar result for bicate-
gorical Mealy machines.
Example 3.9 (Bicategorical machines in Cat). Consider a span C
I←−C
O
−→D
in the strict 2-category Cat of categories, functors and natural transformations,
where D is a κ-complete category. The category MreCat(I, O) has objects the
triples (E, δ, σ) where E : C →D is a functor and σ, δ are natural transforma-
tions arranged as in (21); assuming enough limits in D, we can compute the
action of the right Kan extension of O along I♮(the free monad on the endo-
functor I, cf. [45], whose existence requires additional assumptions on C) on an
object C ∈C as the equaliser
RC
/ Q
C∈C OCC(A,I♮C)
// Q
C→B OBC(A,I♮C)
(24)
or (better, cf. [51, 2.3.6]) as the end5 A 7→
R
C OCC(A,I♮C), i.e. as the ‘space
of ﬁxpoints’ for the conjoint action of the functor O and of the presheaf C 7→
C(A, I♮C) on objects of C; the free monad I♮sends an object C to the initial
algebra of the functor A 7→C + IA, so that I♮C ∼= C + I(I♮C).
For the sake of simplicity, let us specialise the discussion when D is the
category of sets and functions: the input I and the output O of the state
machine in (1) are now variable objects ‘indexed’ over the objects of C, and
the behaviour of the terminal machine can be described as a known object:
unpacking the end (24) we obtain the functor
A ✤
/ [C, Set](C(A, I♮
), O)
(25)
sending an object A to the set of natural transformations α : C(A, I♮
) ⇒O;
the intuition here is that to each generalised A-element of I♮C corresponds an
5Recall that if S is a set and C is an object of a category C with limits, by CS we denote
the power of C and S, i.e. the iterated product Q
s∈S C of as many copies of C as there are
elements in S.
14

element of the output space ΥC(u) ∈OC, and that this assocition is natural in
C.
Example 3.10 (Bicategorical machines in profunctors). We can reason simi-
larly in the bicategory of categories and profunctors of [16, 17, 40], [51, Ch. 5];
now an endo-1-cell I : C →C on a category C consists of an ‘extension’ of the
underlying graph of UC to a bigger graph (UC)+,6 and the free promonad I♮
(cf. [49, §5]) corresponds to the quotient of the free category on (UC)+ where
‘old’ arrows compose as in C, and ‘new’ arrows compose freely; moreover, all
right extensions ⟨P/Q⟩: X ⇝Y of Q : A ⇝Y along P : A ⇝X exist in the
bicategory Pr of, as they are computed as the end in [51, 5.2.5],
⟨P/Q⟩: (X, Y ) ✤
/ R
A Set(P(Y, A), Q(X, A)).
(26)
Example 3.11 (Bicategorical machines in relations). When it is instantiated
in the (locally thin) bicategory of relations between sets, i.e. {0, 1}-profunctors,
given I : A ⇝A, O : A ⇝B, I♮is the reﬂexive-transitive closure of I, and the
above Kan extension is uniquely determined as the maximal E such that E ⊆O
and E ◦I♮⊆E (here ◦is the relational composition). So R = RanI♮O is the
relation deﬁned as
(a, b) ∈R ⇐⇒∀a′ ∈A.((a′, a) ∈I♮⇒(a′, b) ∈O).
(27)
This relation expresses reachability of b from a: it characterises the sub-relation
of O connecting those pairs (a, b) for which, for every other a′ ∈A, if there
is a ﬁnite path (possibly of length zero, i.e. a = a′) connecting a′, a through
I-related elements, then (a′, b) ∈O. In pictures:
a R b ⇐⇒

(a′ = a) ∨(a′
I−→a1
I−→. . .
I−→an
I−→a) ⇒a′ O b

(28)
When the above example is specialised to the case when A = ∗is a singleton,
there are only two possible choices for I (both reﬂexive and transitive), and
O identiﬁes to a subset of B; a bicategorical Moore machine is then a subset
R ⊆O, and thus for both choices of I, MreRel(I, O)∗,B = 2O. One can reason
in the same fashion for Mealy machines.
3.1. Intertwiners between bicategorical machines
In passing from MlyK(I, O) to MlyB(i, o) we gain an additional degree of
freedom by being able to index the category over pairs of 0-cells of B, and this
is particularly true in the sense that the deﬁnition of MlyB(i, o) and its indexing
over pairs of objects A, B of K leads to a seemingly undiscovered way to deﬁne
morphisms between automata:
6More precisely, to the underlying graph of C, made of ‘old’ arrows, we adjoin a directed
edge ex : C →C′ for each x ∈I(C, C′).
15

Deﬁnition 3.12 (Intertwiner between bicategorical machines). Consider two
bicategorical Mealy machines (e, δ, σ)A,B, (e′, δ′, σ′)A′,B′ on diﬀerent bases (so
in particular (e, δ, σ)A,B ∈MlyB(i, o) and (e′, δ′, σ′)A′,B′ ∈MlyB(i′, o′)); an in-
tertwiner (u, v) : (e, δ, σ) ↬(e′, δ′, σ′) consists of a pair of 1-cells u : A →A′, v :
B →B′ and a triple of 2-cells ι, ǫ, ω disposed as follows:
A
    |
ι
u
/
i

A′
i′

A
✁✁✁✁|
ǫ
u
/
e

A′
e′

A
✁✁✁✁| ω
u
/
o

A′
o′

A
u
/ A′
B
v
/ B′
B
v
/ B′
(29)
to which we require to satisfy the following identities (we provide a ‘birdseye’
view of the commutativities that we require, as (29) is unambiguous about how
the 2-cells ι, δ, σ, ǫ, ω can be composed):
=
δ
δ′
ǫ
ǫ
ι
=
σ
σ′
ω
ǫ
ι
and
;
(30)
Remark 3.13. Interestingly enough, when it is spelled out in the case when B
has a single 0-cell, this notion does not reduce to Remark 1.2, as an intertwiner
between a Mealy machine (E, d, s)I,O and another (E′, d′, s′)I′,O′ consists of a
pair of objects U, V ∈K, such that
ic1) there exist morphisms ι : I′⊗U →V ⊗I, ǫ : E′⊗U →V ⊗E, ω : O′⊗U →
V ⊗O;
ic2) the following two identities hold:
ǫ ◦(d′ ⊗U) = (V ⊗d) ◦(ǫ ⊗I) ◦(E′ ⊗ι)
ω ◦(s′ ⊗U) = (V ⊗s) ◦(ǫ ⊗I) ◦(E′ ⊗ι)
In the single-object case, this notion does not trivialise in any obvious way,
and –in stark contrast with the notion of morphism of automata given in (1.2)–
intertwiners between machines support a notion of higher morphisms even in
the monoidal case.
Deﬁnition 3.14 (2-cell between machines). In the same notation of Deﬁni-
tion 3.12, let (u, v), (u′, v′) : (e, δ, σ) ↬(e′, δ′, σ′) be two parallel intertwiners
between bicategorical Mealy machines; a 2-cell (ϕ, ψ) : (u, v) ⇒(u′, v′) consists
of a pair of 2-cells ϕ : u ⇒u′, ψ : v ⇒v′ such that the following identities hold
true:
ι
ϕ
ι
ϕ
=
ǫ
ϕ
ǫ
ψ
=
ω
ϕ
ω
ψ
=
(31)
16

Remark 3.15. When it is specialised to the monoidal case, Deﬁnition 3.14
yields the following notion: a 2-cell (f, g) : (U, V ) ⇒(U ′, V ′) as in Remark 3.13
consists of a pair of morphisms f : U →U ′ and g : V →V ′ subject to the
conditions that the following two squares commute:
E′ ⊗I′ ⊗U
d′⊗U
/
E′⊗I′⊗f

E′ ⊗U
E′⊗f

V ⊗E ⊗I
V ⊗d
/
g⊗E⊗I

V ⊗E
g⊗E

E′ ⊗I′ ⊗U ′
d′⊗U′ / E′ ⊗U ′
V ′ ⊗E ⊗I
V ′⊗d
/ V ′ ⊗E
(32)
Intuitively speaking, in this particular case, the machine 2-cells correspond to
pairs (f, g) of K-morphisms such that both pairs (E′ ⊗I′ ⊗f, E′ ⊗f) and
(g ⊗E ⊗I, g ⊗E) form morphisms in the arrow category of K.
Remark 3.16. Let B be a bicategory; in [43] the authors exploit the universal
property of a bicategory ΩB = Psd(N, B) as the category of pseudofunctors, lax
natural transformations and modiﬁcations with domain the monoid of natural
numbers, regarded as a single object category. The typical object of ΩB is an
endomorphism i : A →A of an object A ∈B, and the typical 1-cell consists of
a lax commutative square
A
/

✁✁✁✁|
A

B
/ B.
(33)
This presentation begs the natural question of whether there is a tautological
functor MlyB →ΩB given by ‘projection’, sending (i, o; (e, δ, σ)) into i; the
answer is clearly aﬃrmative, and in fact such functors mates to a unique 2-
functor N ⊠MlyB →B under the isomorphism given by Gray tensor product
[30]; this somehow preserves the intuition (cf. [65, §1]) of ΩB as a category of
‘lax dynamical systems’.
4. Conclusions
We sketch some directions for future research.
Conjecture 4.1. Let T be a monad on Set, and V a quantale [24, Ch. 2];
we can deﬁne the locally thin bicategory (T, V)-Pr of as in [35, Ch. III] where
1-cells a : A
T⇝B are (T, V)-relations, i.e. V-functors a : T A × B →V for a
ﬁxed lax extension ˆT : V-Pr of →V-Pr of of T to V-Pr of. In each of these
bicategories, we can interpret our Construction 3.7 and adapt Example 3.10,
considering the expression for Ranqr. For suitable choices of the pair (T, V), in-
side (T, V)-Pr of, one can recognise the categories of topological spaces, approach
spaces [52], metric and ultrametric, closure spaces. . . as the (T, V)-categories of
[35, §III.1.6]. We conjecture that when instantiated in (T, V)-Pr of, Equation 28
17

yields a 2-categorical way to look at topological, metric and loosely speaking
‘fuzzy’ approaches to automata theory.
Conjecture 4.2. From Example 3.9 and 3.10 we suspect that the ‘non-deter-
minism via Kleisli category’ approach of [33] can be carried over for the presheaf
construction on Cat and its Kleisli bicategory Pr of: if automata (classically
intended) in the Kleisli category of the powerset monad are nondeterministic
automata in Set, bicategorical automata in the Kleisli bicategory of the presheaf
construction (cf.
[25]) are nondeterministic bicategorical automata: passing
from Example 3.9 to Example 3.10 accounts for a form of non-determinism.
The exciting conjecture here is that one might be able to address nonde-
terministic bicategorical automata in B as deterministic bicategorical automata
in a proarrow equipment [60, 69, 70] for B. The well-established apparatus of
formal category theory could then elucidate classical constructions like minimi-
sation, behaviour, and bisimulation by putting them in the bigger conceptual
framework arising from Deﬁnition 3.3, Deﬁnition 3.4.
Conjecture 4.3. We have been left with two questions about the adjunction
we outline in Theorem 2.18:
• is the adjunction MlySet ⇆Mly♭
Set 2-monadic? In other words, can one
recognise fugal Mealy machines as the algebras for the 2-monad MlySet
(
)♭
−−−→
Mly♭
Set →MlySet?
• if Mly♭
Set or Macs are categories with feedback in the sense of [44, 2.6], it
is the case that the functors MlySet →Mly♭
Set and Γ can be characterised
more swiftly through the universal property of MlySet = Circ(Set, ×) to
be the free category with feedback over (Set, ×); in light of the results
expounded in [50, §2.4 and §3] that characterise many free categories with
feedback as categories of spans, it seems reasonable to conjecture that also
Mac and Macs are categories with feedback.
References
[1] J. Ad´amek, H. Herrlich, and G.E. Strecker. Abstract and concrete cate-
gories: the Joy of cats, volume 17 of Reprints in Theory and Applications
of Categories. Theory and Applications of Categories, 2006. Available on-
line at http://www.tac.mta.ca/tac/reprints/articles/17/tr17.pdf.
[2] J. Ad´amek. Realization theory for automata in categories. Journal of Pure
and Applied Algebra, 9:281–296, 1977.
[3] J. Ad´amek and V. Trnkov´a. Automata and Algebras in Categories. Kluwer,
1990.
[4] B. Ahrens and P. L. Lumsdaine. Displayed Categories. Logical Methods in
Computer Science, Volume 15, Issue 1, March 2019.
18

[5] M.A. Arbib and E.G. Manes. Adjoint machines, state-behavior machines,
and duality. Journal of Pure and Applied Algebra, 6(3):313–344, 1975.
[6] M.A. Arbib and E.G. Manes. A categorist’s view of automata and sys-
tems. In Lecture Notes in Computer Science, pages 51–64. Springer Berlin
Heidelberg, 1975.
[7] M.A. Arbib and E.G. Manes. Fuzzy machines in a category. Bulletin of
the Australian Mathematical Society, 13(2):169–210, 1975.
[8] M.A. Arbib and E.G. Manes. Machines in a category. Journal of Pure and
Applied Algebra, 19:9–20, December 1980.
[9] E.S. Bainbridge. A uniﬁed minimal realization theory, with duality, for
machines in a hyperdoctrine. In Technical Report. Computer and Commu-
nication Sciences Department, University of Michigan, 1972.
[10] E.S. Bainbridge. Addressed machines and duality. In Ernest Gene Manes,
editor, Category Theory Applied to Computation and Control, pages 93–98,
Berlin, Heidelberg, 1975. Springer Berlin Heidelberg.
[11] R. Betti and S. Kasangian.
A quasi-universal realization of automata.
Universit`a degli Studi di Trieste. Dipartimento di Scienze Matematiche,
1981.
[12] R. Betti and S. Kasangian. Una propriet`a del comportamento degli au-
tomi completi. Universit`a degli Studi di Trieste. Dipartimento di Scienze
Matematiche, 1982.
[13] G. Boccali, A. Laretto, F. Loregian, and S. Luneia.
Completeness
for categories of generalized automata.
In preparation. Draft available
at http://tetrapharmakon.github.io/stuff/completeness.pdf, mar
2023.
[14] R Brown. Topology and groupoids. www.groupoids.org, rev., updated, and
expanded version edition, 2006.
[15] E. Burroni. Lois distributives. applications aux automates stochastiques.
Theory and Applications of Categories, 22:199–221, 2009.
[16] J. B´enabou and T. Streicher. Distributors at work. Lecture notes written
by Thomas Streicher, 2000.
[17] G.L. Cattani and G. Winskel. Profunctors, open maps and bisimulation.
Mathematical Structures in Computer Science, 15(03):553–614, 2005.
[18] T. Colcombet and D. Petrisan. Automata Minimization: a Functorial Ap-
proach. In 7th Conference on Algebra and Coalgebra in Computer Science
(CALCO 2017), volume 72 of Leibniz International Proceedings in Infor-
matics (LIPIcs), pages 8:1–8:16, Dagstuhl, Germany, 2017.
19

[19] P.R. D’Argenio and J.-P. Katoen. A theory of stochastic systems part i:
Stochastic automata. Information and Computation, 203(1):1–38, Novem-
ber 2005.
[20] M. Droste, W. Kuich, and H. Vogler, editors. Handbook of Weighted Au-
tomata. Springer Berlin Heidelberg, 2009.
[21] H. Ehrig, K.-D. Kiermeier, H.-J. Kreowski, and W. K¨uhnel.
Universal
theory of automata. A categorical approach.
[22] S. Eilenberg. Automata, Languages and Machines, volume A. Academic
Press, New York, 1974.
[23] S. Eilenberg and J.B. Wright. Automata in general algebras. Information
and Control, 11(4):452–470, October 1967.
[24] P. Eklund, J. Guti´errez Garci´a, U. H¨ohle, and J. Kortelainen. Semigroups
in Complete Lattices. Springer International Publishing, 2018.
[25] M. Fiore, N. Gambino, M. Hyland, and G. Winskel. Relative pseudomon-
ads, kleisli bicategories, and substitution monoidal structures.
Selecta
Mathematica, 24(3):2791–2830, November 2017.
[26] T.M. Fiore. Pseudo Limits, Biadjoints, And Pseudo Algebras: Categorical
Foundations of Conformal Field Theory.
Memoirs AMS 860. American
Mathematical Society, 2006.
[27] J.A. Goguen. Realisation is universal. Mathematical System Theory, 6(4),
1973.
[28] J.A. Goguen. Discrete-time machines in closed monoidal categories. I. Jour-
nal of Computer and System Sciences, 10(1):1–43, February 1975.
[29] J.A. Goguen, J. W. Thatcher, E. G. Wagner, and J. B. Wright. Factor-
izations, congruences, and the decomposition of automata and systems. In
Lecture Notes in Computer Science, pages 33–45. Springer Berlin Heidel-
berg, 1975.
[30] J.W. Gray.
Formal Category Theory:
Adjointness for 2-Categories.
Springer Berlin Heidelberg, 1974.
[31] R. Guitart.
Remarques sur les machines et les structures.
Cahiers de
Topologie et G´eom´etrie Diﬀ´erentielle Cat´egoriques, 15:113–144, 1974.
[32] R. Guitart. Des machines aux bimodules. Univ. Paris 7, apr 1978.
[33] R. Guitart.
Tenseurs et machines.
Cahiers de topologie et g´eom´etrie
diﬀ´erentielle, 21(1):5–62, 1980.
[34] R. Guitart and L. Van den Bril.
D´ecompositions et Lax-compl´etions.
Cahiers de topologie et g´eom´etrie diﬀ´erentielle, 18(4):333–407, 1977.
20

[35] D. Hofmann, G.J. Seal, and W. Tholen. Monoidal Topology: A Categor-
ical Approach to Order, Metric, and Topology, volume 153.
Cambridge
University Press, 2014.
[36] B. Jacobs. Categorical Logic and Type Theory.
Number 141 in SLFM.
Elsevier, 1999.
[37] B. Jacobs.
A bialgebraic review of deterministic automata, regular ex-
pressions and languages. In Algebra, Meaning, and Computation, pages
375–404. Springer Berlin Heidelberg, 2006.
[38] B. Jacobs. New directions in categorical logic, for classical, probabilistic
and quantum logic. Logical Methods in Computer Science, 11(3):76, 2015.
Id/No 24.
[39] B. Jacobs. Introduction to Coalgebra: Towards Mathematics of States and
Observation. Cambridge Tracts in Theoretical Computer Science. Cam-
bridge University Press, 2016.
[40] M. B. Justesen. Bikategorien af profunktorer. Naturvidenskabelig embed-
seksamen, Aarhus University, 1968.
[41] S. Kasangian, G.M. Kelly, and F. Rossi. Coﬁbrations and the realization of
non-deterministic automata. Cahiers de topologie et g´eom´etrie diﬀ´erentielle
cat´egoriques, 24(1):23–46, 1983.
[42] S. Kasangian and R. Rosebrugh.
Glueing enriched modules and com-
position of automata.
Cahiers de topologie et g´eom´etrie diﬀ´erentielle
cat´egoriques, 31(4):283–290, 1990.
[43] P. Katis, N. Sabadini, and R.F.C. Walters. Bicategories of processes. Jour-
nal of Pure and Applied Algebra, 115(2):141–178, February 1997.
[44] P. Katis, N. Sabadini, and R.F.C. Walters. Feedback, trace and ﬁxed-point
semantics. RAIRO - Theoretical Informatics and Applications - Informa-
tique Th´eorique et Applications, 36(2):181–194, 2002.
[45] G.M. Kelly. A uniﬁed treatment of transﬁnite constructions for free alge-
bras, free monoids, colimits, associated sheaves, and so on. Bulletin of the
Australian Mathematical Society, 22(01):1–83, 1980.
[46] A. Kock. Limit monads in categories. The University of Chicago, 1967.
[47] A. Kock. Closed categories generated by commutative monads. J. Austral.
Math. Soc., 12:405–424, 1971.
[48] A. Kock. Strong functors and monoidal monads. Archiv der Mathematik,
23(1):113–120, 1972.
[49] S. Lack. Note on the construction of free monoids. Applied Categorical
Structures, 18(1):17–29, October 2008.
21

[50] E. Di Lavore, A. Gianola, M. Rom´an, N. Sabadini, and P. Soboci´nski. A
canonical algebra of open transition systems. In Gwen Sala¨un and Anton
Wijs, editors, Formal Aspects of Component Software - 17th International
Conference, FACS 2021, Virtual Event, October 28-29, 2021, Proceedings,
volume 13077 of Lecture Notes in Computer Science, pages 63–81. Springer,
2021.
[51] F. Loregian. Coend Calculus, volume 468 of London Mathematical Society
Lecture Note Series. Cambridge University Press, ﬁrst edition, jul 2021.
ISBN 9781108746120.
[52] R. Lowen. Approach Spaces: The Missing Link in the Topology-uniformity-
metric Triad. Oxford mathematical monographs. Clarendon Press, 1997.
[53] J. Meseguer and U. Montanari. Petri nets are monoids. Information and
Computation, 88(2):105–155, October 1990.
[54] J. Meseguer and I. Sols. Automata in semimodule categories. In Lecture
Notes in Computer Science, pages 193–198. Springer Berlin Heidelberg,
1975.
[55] G. Naud´e. On the adjoint situations between behaviour and realization.
Quaestiones Mathematicae, 2:245–267, 1977.
[56] G. Naud´e. Universal realization. Journal of Computer and System Sciences,
19(3):277–289, 1979.
[57] P. Perrone and W. Tholen. Kan extensions are partial colimits. Applied
Categorical Structures, 30(4):685–753, January 2022.
[58] I. Pohl and M.A. Arbib. Theories of abstract automata. Mathematics of
Computation, 24(111):760, jul 1970.
[59] R. Rosebrugh, N. Sabadini, and R.F.C. Walters. Minimal realization in
bicategories of automata. Mathematical Structures in Computer Science,
8(2):93–116, 1998.
[60] R. Rosebrugh and R.J. Wood. Proarrows and coﬁbrations. Journal of Pure
and Applied Algebra, 53(3):271–296, 1988.
[61] J.M. Rutten. Universal coalgebra: a theory of systems. Theoretical Com-
puter Science, 249(1):3–80, October 2000.
[62] S. Singh and S.P. Tiwari. On the category of L-fuzzy automata, coalgebras
and dialgebras. Fuzzy Sets and Systems, 420:1–28, September 2021.
[63] R. Street. Fibrations and Yoneda lemma in a 2-category. In G.M. Kelly,
editor, Proceedings Sydney Category Theory Seminar 1972/1973, volume
420 of Lecture Notes in Mathematics, pages 104–133. Springer, 1974.
22

[64] R. Street. Fibrations in bicategories. Cahiers de topologie et g´eom´etrie
diﬀ´erentielle cat´egoriques, 21(2):111–160, 1980.
[65] M. Tierney.
Categorical Constructions in Stable Homotopy Theory.
Springer Berlin Heidelberg, 1969.
[66] Y. Venema. Automata and ﬁxed point logic: A coalgebraic perspective.
Information and Computation, 204(4):637–678, April 2006.
[67] VV.AA. Fugal: deﬁnition & meaning.
[68] R.F.C. Walters. A note on context-free languages. Journal of Pure and
Applied Algebra, 62(2):199–203, December 1989.
[69] R.J. Wood.
Abstract pro arrows I.
Cahiers de topologie et g´eom´etrie
diﬀ´erentielle, 23(3):279–290, 1982.
[70] R.J. Wood. Proarrows II. Cahiers de Topologie et G´eom´etrie Diﬀ´erentielle
Cat´egoriques, 26(2):135–168, 1985.
Appendix A. Proofs
Proof of Lemma 2.13. In order to prove that the assignment s 7→s♭is well
deﬁned in the set of fugal automata, we proceed by induction on the length of
a string ℓ. We have to prove that
s♭(e, ℓ++ as) = s♭(e, ℓ) ++ s♭(d∗(e, ℓ), as)
(A.1)
The base case ℓ= [ ] is evidently true, so suppose that ℓ= x :: xs is not empty
and the claim is true for every choice of a shorter xs: then,
s♭(e, (x :: xs) ++ as) = s♭(e, (x :: xs) ++ as)
= s♭(e, x :: (xs ++ as))
= s(e, x) :: s♭(d(e, x), xs ++ as)
= s(e, x) ::
 s♭(d(e, x), xs) ++ s♭(d∗(e, xs), as)

=
 s(e, x) :: s♭(d(e, x), xs)

++ s♭(d(x, d∗(e, xs)), as)
= s♭(e, x :: xs) ++ s♭(d∗(e, x :: xs), as)
= s♭(e, ℓ) ++ s♭(d∗(e, ℓ), as).
We now have to show that any 2-cell f : (E, d, s) →(F, c, t) is in fact a 2-cell
(E, d∗, s♭) →(F, c∗, t♭). This can be done by induction as well, with completely
similar reasoning.
Proof of Lemma 2.16. We have to prove that
(s2 ♦s1)♭= s♭
2 ♦s♭
1.
(A.2)
23

The two functions coincide on the empty list by deﬁnition; hence, let ℓ= a :: as
be a nonempty list and (e, f) ∈E × F a generic element. The right-hand side
of the equation is
(s♭
2 ♦s♭
1)((e, f), a :: as) = s♭
2(f, s♭
1(e, a :: as))
= s♭
2
 f, s1(e, a) :: s♭
1(d1(e, a), as)

= s2(f, s1(e, a)) :: s♭
2(d2(f, s1(e, a)), s♭
1(d1(e, a), as))
= (s2 ♦s1)((e, f), a) :: (s2 ♦s1)♭((d2 ♦d1)((e, f), a), as)
which concludes the proof.
Proof of Theorem 2.17. Similarly to Lemma 2.16, we have to prove that d∗
2 ♦
d∗
1 = (d2 ♦d1)∗whenever d2, d1 are two dynamic maps of composable Mealy
machines ⟨s1, d1⟩: E×M →N ×E and ⟨s2, d2⟩: F ×N →P ×F. This, together
with Lemma 2.16, will establish functoriality on 1-cells of (
)♭. Functoriality
on 2-cells is very easy to establish. For what concerns Π, the proof amounts to
showing that the composition of (fugal) Mealy machines gets mapped into the
composition of spans in Macs; this can be checked with ease and follows from
the fact that the translation category of the action d2 ♦d1 as deﬁned in (7) has
the universal property of the pullback Z in
Z
"❋
❋
❋
❋
|①①①①
E[d∗
1]
Σ1
"❋
❋
❋
❋
D1
{①①①①
E[d∗
2]
Σ2
#❋
❋
❋
❋
D2
|①①①①
M
N
R.
(A.3)
This is a straightforward check, and it is also straightforward to see that the
composition of Σ2 with the right projection from Z coincides with the ‘Sigma’
functor induced by s2 ♦s1, which concludes the proof.
Proof of Theorem 2.18. It is worthwhile to recall what a biadjunction is
F : C
/
⊥
D : G
o
(A.4)
if C, D are bicategories (cf. [26, Ch. 9]): for each two objects C, D we are given
an equivalence between hom-categories D(FC, D) ≃C(C, GD), i.e. a pair of
functors H : D(FC, D) ⇆C(C, GD) : K whose composition in both directions
is isomorphic to the identity functor of the respective hom-category –and all
this depends naturally on C, D.
In order to prove this, let’s ﬁx a set A and a monoid M, let’s build functors
Mly♭
Set(A∗, M)
H
/ MlySet(A, UM)
MlySet(A, UM)
K
/ Mly♭
Set(A∗, M)
(A.5)
and prove that they form an equivalence of categories by explicitly showing that
24

HK and KH are isomorphic to the respective identities. We’ll often adopt the
convenient notation ⟨s, d⟩: E × X →Y × E for a Mealy machine of input X
and output Y .
• Let ⟨s, d⟩: E × A∗→M × E be a fugal Mealy machine; H⟨s, d⟩is deﬁned
as the composition
E × A
E×ηA/ E × A∗
⟨s,d⟩/ M × E
(A.6)
where ηA : A →A∗is the unit of the free-forgetful adjunction between Set
and monoids. In simple terms, H acts ‘restricting’ a fugal Mealy machine
to the set of generators of its input.
• Let ⟨s0, d0⟩: F × A →UM × F be any Mealy machine on Set, where
UM means that M is regarded as a mere set; K⟨s0, d0⟩is deﬁned as the
composition
F × A∗⟨s0,d0⟩♭/ (UM)∗× F
ε×F / M × F
(A.7)
where ε : (UM)∗→M is the counit of the free-forgetful adjunction be-
tween Set and monoids, and ⟨s0, d0⟩♭is the fugal extension of Lemma 2.13.
The claim is now that the fugal Mealy machine KH⟨s, d⟩coincides with ⟨s, d⟩,
and that the generic Mealy machine HK⟨s0, d0⟩coincides with ⟨s0, d0⟩.
Both statements depend crucially on the following fact: if s : E × M →N
satisﬁes Equation (14), then for all e ∈E the element s(1M, e) is idempotent in
N. In particular, if N is free on a set B, s(1M, e) = [ ] is the empty list, and
more in particular, for a generic Mealy machine ⟨s,
⟩the fugal extension s♭is
such that for all e ∈E, s♭([ ], e) = [ ].
Given this, observe that the Mealy machine HK⟨s0, d0⟩coincides with ⟨s♭
0 ◦
(F ×ηA), d∗
0 ◦(F ×ηA)⟩; now clearly the composition d∗
0 ◦(F ×ηA) coincides with
d0 : F × A →F and the two maps determine each other. As for s♭
0 ◦(F × ηA),
we have that for all (f, a) ∈F × A
s♭
0 ◦(F × ηA)(f, a) = s♭
0(f, a :: [ ])
= s0(f, a) :: s♭
0(f, [ ])
= s0(f, a) :: [ ]
Reasoning similarly, one proves that the fugal Mealy machine KH⟨s, d⟩has
components ⟨(s◦(E ×ηA))♭, (d◦(E ×ηA))∗⟩: again, since functions E ×A →E
correspond bijectively to monoid actions E × A∗→E, the map (d ◦(E × ηA))∗
25

coincides with d; as for (s ◦(E × ηA))♭, we can argue by induction that
(s ◦(E × ηA))♭(e, [ ]) = [ ] = s(e, [ ])
(s ◦(E × ηA))♭(e, a :: as) = s(e, a) :: (s ◦(E × ηA))♭(d(a, e), as)
= s(e, a) :: s(d(a, e), as)
= s(e, a :: as)
where the last equality uses that s was fugal to start with. This concludes the
proof.
Proof of Proposition 3.8. The category P is in fact 2-discrete (it has no 2-cells)
and its objects and morphisms are arranged as follows:
1
0
y
o
x
o
z
/
t
/ 2
(A.8)
For lack of a better name, P is the generic double span.
The functors W, G are then constructed as follows:
• G : P →Cat is constant on objects at the category K(A, B), and chooses
the double span
K(A, B)
K(A, B)
id
o
id
o
◦i /
id
/ K(A, B);
(A.9)
• W : P →Cat chooses the double span
{0 →1}
{♥, ♠}
j
o
j
o
c0
/
c1
/ {0 →1}
(A.10)
where {♥, ♠} is a discrete category with two objects, j =
  ♥7→0
♠7→1

, and ck
is constant at k ∈{0, 1}.
Now, it is a matter of unwinding the deﬁnition of a natural transformation
α : W ⇒G to ﬁnd that we are provided with maps
{e, #} = α0 : W0 →K(A, B)
σ = α1 : W1 →K(A, B)
(A.11)
δ = α2 : W2 →K(A, B)
and with commutative diagrams arising from naturality as follows, if we agree
to label α0(♥) = e and α0(♠) = o, and we blur the distinction between α0 and
26

the embedding of its image {e, o} in K(A, B):
{e, o}
j
/
α0

{0 →1}
α1

{e, o}
c0
/
α0

{0 →1}
α2

{e, o}
c1
/
α0

{0 →1}
α2

K(A, B)
K(A, B)
K(A, B)
◦i / K(A, B)
K(A, B)
K(A, B)
(A.12)
Altogether, we have that these data yield a diagram of 2-cells
A
i
⑦⑦⑦⑦⑦⑦⑦⑦
e
❅
❅
❅
❅
❅
❅
❅
o

    <D
σ
A
e
/
❴❴❴❴+3
δ
B
(A.13)
as in (21). Modiﬁcations between these natural transformations correspond to
suitable arrangements of 2-cells, in such a way that we recover the notion of
morphism of bicategorical Moore machine given in bmo2.
In case the output o is ﬁxed, we just constrain α0(♠) to be mapped in o and
modiﬁcations to be the identity at ♠.
For bicategorical Mealy machines, redeﬁne Gx = Gz =
◦i and the rest of
the argument is unchanged.
27

