Chapter 1
Logic
1.1
Statements and Compound Statements
A statement or proposition is an assertion which is either true or false, though
you may not know which. That is, a statement is something that has a truth
value.
Here are some examples of statements.
• There are no integers a and b so that
√
2 = a
b. (True.)
• For all integers n ≥0, the number n2 −n + 41 is prime. (False.)
• Every even positive integer except 2 is the sum of two prime numbers.
(Goldbach’s Conjecture: unknown.)
We usually use letters to denote statements. A good way to think of these
letters is as variables that can take the values “true” and “false”. Variables
that can take two possible values are sometimes called Boolean variables,
after the British logician George Boole.
A compound statement is one formed by joining other statements together
with logical connectives. Several such connectives are deﬁned below. The
statements that are joined together can themselves be compound statements.
Let p and q be statements.
1

2
CHAPTER 1. LOGIC
The conjunction of p and q (read: p and q) is the statement p ∧q
which asserts that p and q are both true. Notice that the wedge symbol
looks vaguely like the letter “n” in and.
The disjunction of p and q (read: p or q) is the statement p ∨q which
asserts that either p is true, or q is true, or both are true. Notice that this is
the inclusive sense of the word “or”. Also, the vee symbol looks vaguely like
the letter “r” in or.
The implication p →q (read: p implies q, or if p then q) is the state-
ment which asserts that if p is true, then q is also true.
We agree that
p →q is true when p is false. The statement p is called the hypothesis of the
implication, and the statement q is called the conclusion of the implication.
The biconditional or double implication p ↔q (read: p if and only
if q) is the statement which asserts that p and q if p is true, then q is true,
and if q is true then p is true. Put diﬀerently, p ↔q asserts that p and q
have the same truth value.
A truth table gives the truth values of a statement for all possible combi-
nations of truth values of the other statements from which it is made. Here
and elsewhere, 0 and 1 will represent the truth values “false” and “true”,
respectively.
p
q
p ∧q
p ∨q
p →q
p ↔q
0
0
0
0
1
1
0
1
0
1
1
0
1
0
0
1
0
0
1
1
1
1
1
1
Examples.
• “(e < π) ∧(57 is prime)” is false because “(57 is prime)” is false.
• “(
√
2 is rational) ∨(1+
√
5
2
< 2)” is true because “(1+
√
5
2
< 2)” is true
(the statement “(
√
2 is rational)” is false).
• “(52 < 0) →(1 < 2)” is true because the hypothesis “(52 < 0)” is false.
• “(1 < 2) →(52 < 0)” is false because the hypothesis is true and the
conclusion is false. This example demonstrates that p →q and q →p
are not the same.

1.2. NEGATION OF STATEMENTS
3
• “(1 = 2) ↔(the number of primes is ﬁnite)” is true because both
“(1 = 2)” and “(the number of primes is ﬁnite)” are false.
1.2
Negation of Statements
The negation of a statement p (read: not p) is the statement ¬p which
asserts that p is not true. Sometimes it is helpful to think of ¬p as asserting
“it is not the case that p is true”. Thus, ¬p is false when p is true, and true
when p is false.
p
¬p
0
1
1
0
Notice that “¬” is not a logical connective. It does not join two statements
together. Instead, it applies to a single (possibly compound) statement.
Negation has precedence over logical connectives. Thus ¬p ∨q means
(¬p) ∨q.
The negation of ¬p is the statement with the opposite truth value as ¬p,
thus ¬(¬p) is just another name for p.
The negation of p ∧q asserts “it is not the case that p and q are both
true”. Thus, ¬(p ∧q) is true exactly when one or both of p and q is false,
that is, when ¬p ∨¬q is true.
Similarly, ¬(p ∨q) can be seen to the same as ¬p ∧¬q.
Our reasoning can be checked on the truth tables below. Observe that
the pairs of statements in question have the same truth value given any
combination of possible truth values of p and q.
p
q
¬p
¬q
p ∧q
¬(p ∧q)
¬p ∨¬q
p ∨q
¬(p ∨q)
¬p ∧¬q
0
0
1
1
0
1
1
0
1
1
0
1
1
0
0
1
1
1
0
0
1
0
0
1
0
1
1
1
0
0
1
1
0
0
1
0
0
1
0
0
To ﬁnd the negation of p →q, we return to its description. The statement
is false only when p is true and q is false. Therefore ¬(p ∨q) is the same as

4
CHAPTER 1. LOGIC
p ∧¬q. Using the same reasoning, or by negating the negation, we can see
that p →q is the same as ¬p ∨q.
p
q
¬p
¬q
p →q
¬(p →q)
p ∧¬q
0
0
1
1
1
0
0
0
1
1
0
1
0
0
1
0
0
1
0
1
1
1
1
0
0
1
0
0
Finally, the statement p ↔q asserts that p and q have the same truth
value. Hence ¬(p ↔q) asserts that p and q have diﬀerent truth values. This
happens when p is true and q is false, or when p is false and q is true. Thus,
¬(p ↔q) is the same as (p ∧¬q) ∨(¬p ∧q).
p
q
¬p
¬q
p ↔q
¬(p ↔q)
p ∧¬q
p ∧¬q
(p ∧¬q) ∨(¬p ∧q)
0
0
1
0
0
1
0
0
0
0
1
1
0
1
0
0
1
1
1
0
0
1
1
0
1
0
1
1
1
0
0
0
1
0
0
0
1.3
Making and Using Truth Tables
Recall that the truth values of a statement can be summarized in a truth
table.
Also recall that “¬” has precedence over logical connectives, and
otherwise there is no implied order. This means that p ∨¬q is p ∨(¬q), and
that p∨q →r is actually (p∨q) →r, though it is far better to simply regard
the statement as ambiguous and insist on proper bracketing.
To make a truth table, start with columns corresponding to the most
basic statements (usually represented by letters). If there are k of these you
will need 2k rows to list all possible combinations of truth values. Then,
working with what’s inside the brackets ﬁrst (just like algebra!), add a new
column for each connective in the expression, and ﬁll in the truth values
using the deﬁnitions from before.
The truth table for (¬p →r) →(q ∨¬r) will have 8 rows. Starting
with the collection of truth possible values for p, q and r, we add columns to

1.3. MAKING AND USING TRUTH TABLES
5
obtain the truth values of ¬p, (¬p →r), ¬r, (q ∨¬r), and then, ﬁnally, the
entire statement we want.
p
q
r
¬p
¬p →r
¬r
q ∨¬r
(¬p →r) →(q ∨¬r)
0
0
0
1
0
1
1
1
0
0
1
1
1
0
0
0
0
1
0
1
0
1
1
1
0
1
1
1
1
0
1
1
1
0
0
0
1
1
1
1
1
0
1
0
1
0
0
0
1
1
0
0
1
1
1
1
1
1
1
0
1
1
0
0
Sometimes only part of the truth table needs to be made. For example,
suppose it is given a and b are false, and c is true. Then the truth value of
¬a ∨(b ∨¬c) can be found by completing the single row of the truth table
where a, b and c have the given truth values.
If we are given that p is false and q is true, then we can ﬁnd all possible
truth values of ¬(p ↔r) →(q →s) by completing the four rows of the truth
table where p and q have the truth values given, and all possible truth values
for r and s occur.
Sometimes information about truth values can be given a more indirectly.
Suppose we’re given that ¬a →(b ↔¬c) is false, and asked to determine
all possible truth values of (a ∨b) ∧(¬b ∨¬c). The information that given
implication is false, lets us conclude that its hypothesis, ¬a, is true (so a is
false), and its conclusion, (b ↔¬c), is false (so b and ¬c have diﬀerent truth
values, that is, b and c have the same truth value. Hence we need a truth
table with only two rows:
a
b
c
¬b
¬c
a ∨b
¬b ∨¬c
(a ∨b) ∧(b ∨¬c)
0
0
0
1
1
0
1
0
0
1
1
0
0
1
0
0
Therefore, if ¬a →(b ↔¬c) is false, so is (a ∨b) ∧(¬b ∨¬c).

6
CHAPTER 1. LOGIC
1.4
Converse and Contrapositive
The converse of the implication p →q is q →p. The example above shows
that an implication and its converse can have diﬀerent truth values, and
therefore can not be regarded as the same.
The contrapositive of the implication p →q is ¬q →¬p.
For example, the contrapositive of “if a and b are odd integers then the
integer ab is odd” is “if the integer ab is even then it is not the case that the
integers a and b are odd”, or equivalently “if the integer ab is even then the
integer a is even or the integer b is even”.
implication
contrapositive
converse
p
q
¬p
¬q
p →q
¬p ∨q
¬q →¬p
q →p
0
0
1
1
1
1
1
1
0
1
1
0
1
1
1
0
1
0
0
1
0
0
0
1
1
1
0
0
1
1
1
1
Notice that the implication p →q and its contrapositive ¬q →¬p have
exactly the same truth table, that is, they are each true for exactly the same
truth values of p and q. It is reasonable to regard these statements as being
“the same” (and we will) in a similar way as we regard 0.25 and 2/8 as being
the same.
For completeness, we note that the inverse of p →q is the statement
¬p →¬q. It is the contrapositive the converse (or the other way around) of
p →q.
1.5
Quantiﬁers
When we make an assertions like “if x2+3x+2 = 0 then x = −1 or x = −2”,
the intention is to convey that the assertion holds for every real number
x. Similarly, an assertion like “some rectangles are squares” is intended to
convey that at least one rectangle is a square.
If an assertion contains one or more variables, it isn’t possible to know

1.5. QUANTIFIERS
7
its truth value until something about the variables is known. There are two
options:
1. If values are given to the variables, then the assertion will be either
true or false for those particular values. Giving diﬀerent values to the
variables might result in a diﬀerent truth value for the assertion.
2. Specify the quantity (that is, number) of allowed replacements for each
variable that result in the assertion being true. This speciﬁcation is an
assertion that is either true or false, that is, it is a statement.
We will pursue the second option.
The universe of a variable is the collection of values it is allowed to take.
The universal quantiﬁer ∀asserts that the given assertion is true for
all allowed replacements for a variable. Think of the upside-down “A” as
representing “All”. Synonyms for “for all”, include “all”, “every” and “for
each”.
An example of using a universal quantiﬁer is: “for all integers n, the
integer n(n + 1) is even”. We could take a ﬁrst step towards a symbolic rep-
resentation of this statement by writing “∀n, n(n+1) is even”, and specifying
that the universe of n is the integers. (This statement is true.)
The existential quantiﬁer ∃asserts that there exists at least one allowed
replacement for a variable for which the given assertion is true. Think of the
backwards “E” as representing “exists”. Synonyms for “there exists” include
“there is”, “there are”, “some”, and “at least one”.
An example of using an existential quantiﬁer is “there exists an integer
n such that n2 −n + 1 = 0”. A symbolic representation of this statement is
obtained by writing ∃n, n2 −n + 1 = 0, and specifying that the universe of
n is the integers. (This statement is false.)
We can completely write the statement “∀n, n(n+1) is even” in symbols
by remembering the deﬁnition of an even integer. An integer k is even when
there is an integer t such that k = 2t. Symbolically, k is even when ∃t, k = 2t,
where the universe of t is the integers. With this in mind “∀n, n(n + 1) is
even” becomes “∀n, ∃t, n(n + 1) = 2t”.
Let s(x) denote a statement involving the variable x. Observe that if
∀x, s(x) is true, then so is ∃x, s(x), provided the universe contains a non-

8
CHAPTER 1. LOGIC
zero number of elements: if an assertion is true for all x is the universe, then
it is true for at least one x (provided there is one). If the universe contains
no elements, then ∀x, s(x) is always true, and ∃x, s(x) is never true (why?).
Of course, the truth of ∃x, s(x) tells us nothing about the truth of ∀x, s(x).
Both universal and existential quantiﬁers can be (unintentionally) hid-
den, as in the example used to begin this section. Another example is the
statement “if (a ̸= 0) and (ax2 + bx + c = 0) then
x = −b ±
√
b2 −4ac
2a
”
is meant to apply to all real numbers x.
If the universal quantiﬁer were
made explicit, it would read “for all real numbers x . . .”. Similarly, “a real
number can have more than one decimal expansion” is intended to assert
the existence of one or more such numbers. If the existential quantiﬁer were
made explicit, it would read “there is a real number x such that x has more
than one decimal expansion”.
When quantiﬁers are nested, they are read in order from left to right.
For example, if x and y are understood to be numbers, “∀x, ∃y, x + y = 0”
is read as follows: for all x, the statement “∃y, x + y = 0” is true.
No
matter the value of x, the number y can be chosen to be its negative. Hence,
∃y, x + y = 0 is true for any x. Consequently, ∀x, ∃y, x + y = 0 is true.
The order of quantiﬁers is important. The statement “∃x, ∀y, x + y = 0”
says that there is a real number x such that, for every real number y, the
quantity x + y = 0, which is false.
1.6
Negating Statements Involving Quanti-
ﬁers
The negation of a universally quantiﬁed statement is an an existentially quan-
tiﬁed statement. If it is not the case that a statement is true for all allowed
replacements in the universe, then it is false for at least one allowed replace-
ment.
For example “¬∀n ≥0, n2 −n + 41 is prime” says “it is not the case that
for every positive integer n the number n2 −n + 41 is prime”, or in other
words “there exists a positive integer n such that n2 −n + 41 is not prime”.

1.7. LOGICAL EQUIVALENCE
9
In symbols, if s(x) is an assertion involving the variable x (and maybe
some other variables and quantiﬁers) ¬∀x, s(x) is the same is ∃x, ¬s(x).
The negation of an existentially quantiﬁed statement is a universally
quantiﬁed statement. If it is not the case that a statement is true for at
least one allowed replacement in the universe, then it is false for all allowed
replacements.
For example “¬∃a, b, a
b =
√
2” says “it is not the case that there exists
(integers) a and b such that a
b =
√
2”, or in other words “for all (integers) a
and b, a
b ̸=
√
2”, that is, “
√
2 is irrational”.
In symbols, if s(x) is an assertion involving the variable x (and maybe
some other variables and quantiﬁers) ¬∃x, s(x) is the same is ∀x, ¬s(x).
Using what we’ve done above, the statement ¬∃x, ∀y, x + y = 0 is the
same as ∀x, ¬∀y, x+y = 0 (take s(x) to be ∀y, x+y = 0). In turn, this is the
same as ∀x, ∃y, ¬(x + y = 0), or equivalently ∀x, ∃y, x + y ̸= 0. The latter
statement is easily seen to be true. No matter number x is, we can choose y
to be any number diﬀerent than −x, and x + y ̸= 0.
1.7
Logical Equivalence
In the process of making the truth table for (p →q) ↔(¬p ∨q), we see that
the two bracketed statements have the same truth values for given truth
value assignments to p and q. Hence the double implication is always true.
A statement which is always true is called a tautology. A statement which
is always false is called a contradiction.
For example, p ∧(¬p) is a contradiction, while p ∨(¬p) is a tautology.
Most statements are neither tautologies nor contradictions.
One way to determine if a statement is a tautology is to make its truth
table and see if it (the statement) is always true. Similarly, you can determine
if a statement is a contradiction by making its truth table and seeing if it is
always false.
Informally, two statements s1 and s2 are logically equivalent if they have
the same truth table (up to the order of the rows). This happens exactly
when the statement s1 ↔s2 is a tautology.

10
CHAPTER 1. LOGIC
Formally, two statements s1 and s2 are logically equivalent if s1 ↔s2 is a
tautology.
We use the notation s1 ⇔s2 to denote the fact (theorem) that s1 ↔s2
is a tautology, that is, that s1 and s2 are logically equivalent. Notice that
s1 ↔s2 is a statement and can in general be true or false, and s1 ⇔s2
indicates the (higher level) fact that it is always true.
Logical equivalence plays the same role in logic that equals does in alge-
bra: is speciﬁes when two expressions are “the same”. In the same way that
equal expressions can be freely substituted for each other without changing
the meaning of an expression, logically equivalent statements can be freely
substituted for each other without changing the meaning of a compound
statement. And, if two statements are each equivalent to the same state-
ment, they are equivalent to each other.
Since logical equivalence is deﬁned in terms of a statement being a tau-
tology, a truth table can be used to check if (prove that) two statements are
logically equivalent. Soon we will have other methods to do this as well.
1.8
The Laws of Logic
We now set out to develop an algebra of propositions. To do so, we need
some basic operations (logical equivalences) that can be used. Each of the
following can be veriﬁed (proved) with a truth table. It is a good idea to
memorize them, so that they are at your ﬁngertips when needed.
In what follows, 1 denotes a statement that is always true (i.e. a tautol-
ogy) , and 0 denotes a statement that is always false (i.e. a contradiction).
• Idempotence: p ∨p ⇔p,
p ∧p ⇔p
• Commutative: p ∧q ⇔q ∧p,
p ∨q ⇔q ∨p
• Associative: (p ∧q) ∧r ⇔p ∧(q ∧r),
(p ∨q) ∨r ⇔p ∨(q ∨r)
• Distributative: p∨(q∧r) ⇔(p∨q)∧(p∨r),
p∧(q∨r) ⇔(p∧q)∨(p∧r)
• Double Negation: ¬(¬p) ⇔p
• DeMorgan’s Laws: ¬(p ∨q) ⇔¬p ∧¬q,
¬(p ∧q) ⇔¬p ∨¬q

1.8. THE LAWS OF LOGIC
11
• Absorbtion: p ∧1 ⇔p,
p ∧0 ⇔0
• Dominance: p ∨1 ⇔1,
p ∨0 ⇔p
The following are some other useful logical equivalences.
• p →q ⇔¬p ∨q
• p ↔q ⇔(p →q) ∧(q →p) ⇔(¬p ∨q) ∧(p ∨¬q)
It is apparent that the Laws of Logic come in pairs.
The dual of a
statement is obtained by replacing ∨by ∧; ∧by ∨; 0 by 1; and 1 by 0,
wherever they occur. It is a theorem of logic that if s1 is logically equivalent
to s2, then the dual of s1 is logically equivalent to the dual of s2.
For an example of using the Laws of Logic, we show that p ↔q ⇔
(p ∧q) ∨(¬p ∧¬q).
p ↔q
⇔
(¬p ∨q) ∧(p ∨¬q)
Known L.E.
⇔
(¬p ∧(p ∨¬q)) ∨(q ∧(p ∨¬q))
Distributive
⇔
[(¬p ∧p) ∨(¬p ∧¬q)] ∨[(q ∧p) ∨(q ∧¬q)]
Distributive (twice)
⇔
[0 ∨(¬p ∧¬q)] ∨[(q ∧p) ∨0]
Known contradictions
⇔
(¬p ∧¬q) ∨(q ∧p)
Dominance
⇔
(p ∧q) ∨(¬p ∧¬q)
Commutative (3 × )
There are two other forms of the Distributive Laws. These can be derived
from the versions given above:
(q ∧r) ∨p
⇔
p ∨(q ∧r)
Commutative
⇔
(p ∨q) ∧(p ∨r)
Distributive
⇔
(q ∨p) ∧(r ∨p)
Commutative (twice)
Similarly (q ∨r) ∧p ⇔(q ∧p) ∨(r ∧p).
The Laws of Logic can be used in several other ways. One of them is to
prove that a statement is a tautology without resorting to a truth table. This

12
CHAPTER 1. LOGIC
amounts to showing it is logically equivalent to 1. For example, ¬q ∨(p →q)
is a tautology because:
¬q ∨(p →q)
⇔
¬q ∨(¬p ∨q)
Known L.E.
⇔
¬q ∨(q ∨¬p)
Commutative
⇔
(¬q ∨q) ∨¬p
Associative
⇔
1 ∨¬p
Known tautology
⇔
1
Dominance
Similarly, a statement is proved to be a contradiction when it is shown to be
logically equivalent to 0.
Another use of the Laws of Logic is to “simplify” statements. While the
term “simplify” needs to be explained (quantiﬁed somehow) to be meaning-
ful, or so we know when we are done, sometimes it is clear that an equivalent
expression found is simpler than the one that was started with. For example:
¬(¬p →q) ∨(p ∧¬q)
⇔
¬(¬¬p ∨q) ∨(p ∧¬q)
Known L.E.
⇔
¬(p ∨q) ∨(p ∧¬q)
Double Negation
⇔
(¬p ∧¬q) ∨(p ∧¬q)
DeMorgan
⇔
(p ∧¬p) ∨¬q
Dist′ve (from right to left)
⇔
0 ∨¬q
Konown contradiction
⇔
¬q
Absorbtion
This section concludes with one last example. Suppose we are asked to
show that (p ∧q) ∧[(q ∧¬r) ∨(p ∧r)] ⇔¬(p →¬q). Use LHS to denote
the expression on the left hand side. Then
LHS
⇔
[(p ∧q) ∧(q ∧¬r)] ∨(p ∧q) ∧(p ∧r)]
Distributive
⇔
[((p ∧q) ∧q) ∧¬r) ∨[((p ∧q) ∧p) ∧r)]
Associative
⇔
[(p ∧(q ∧q)) ∧¬r) ∨[((p ∧p) ∧q) ∧r)]
Commutative, Associative
⇔
[(p ∧q) ∧¬r) ∨[(p ∧q) ∧r)]
Idempotence
⇔
(p ∧q) ∧(¬r ∨r)
Distributive
⇔
(p ∧q) ∧1
Known tautology
⇔
(p ∧q)
Absorbtion
⇔
¬¬(p ∧q)
Double Negation
⇔
¬(¬p ∨¬q)
DeMorgan
⇔
¬(p →q)
Known L.E.

1.9. USING ONLY AND, OR, AND NOT
13
1.9
Using Only And, Or, and Not
It turns out that any statement is logically equivalent to one that uses only
the connectives ∧, ∨, and ¬. The logical equivalences above allow statements
involving the logical connectives →and ↔to be replaced by equivalent
statements that use only ∧, ∨, and ¬.
It is also possible to do this directly from the truth table, as will now be
demonstrated. Let s be the statement involving p and q for which the truth
table is given below.
p
q
s
0
0
1
0
1
1
1
0
0
1
1
1
First, for each row of the truth table where the statement s is true, write a
statement that’s true only when p and q have the truth values in that row.
This statement will involve the logical connective “and”. For the truth table
above:
• Row 1: ¬p ∧¬q
• Row 2: ¬p ∧q
• Row 4: p ∧q
Now, to get an expression that’s logically equivalent to s, take the disjunction
of these statements: it will be true exactly when the truth values of p and q
correspond to a row of the truth table where s is true (row 1 or row 2 or row
4). Thus s ⇔(¬p ∧¬q) ∨(¬p ∧q) ∨(p ∧q). The process is exactly the same
if there are more than two statements involved.
There is some terminology and an important fact (important in computer
science) associated with what we have done. The expression associated with
each row of the truth table – a conjunction of variables or their negations
– is called a minterm. The compound statement derived using the process
consists of the disjunction of a collection of minterms (that is, they are all
joined together using “or”). It is called the disjunctive normal form of the
statement s. Since every statement has a truth table, and every truth table

14
CHAPTER 1. LOGIC
leads to a statement constructed as above, a consequence of the procedure
just described is the theorem that every statement is logically equivalent to
one that is in disjunctive normal form.
It can be observed directly from the truth table that
s
⇔
p →q
⇔
¬p ∨q
Known L.E.
The principle that things that are logically equivalent to the same statement
are logically equivalent to each other now implies it should be true that that
(¬p ∧¬q) ∨(¬p ∧q) ∨(p ∧q) ⇔¬p ∨q. This can be shown with the Laws
of Logic.
It is possible to go beyond writing statements so they involve only ∧, ∨,
and ¬. With careful use of DeMorgan’s Laws, really only need ∨and ¬, or
∧and ¬, are needed. For example, from before, p ↔q ⇔(¬p∨q)∧(¬q ∨p).
By DeMorgan’s Law, (¬p ∨q) ∧(¬q ∨p) ⇔¬
 ¬(¬p ∨q) ∨¬(¬q ∨p)

, so
p ↔q ⇔¬
 ¬(¬p ∨q) ∨¬(¬q ∨p)

. The latter statement uses only ∨and ¬.
If you use DeMorgan’s Law in a diﬀerent way, then you can get an expression
for p ↔q than involves only ∧and ¬.
One can go a bit farther and introduce the logical connective “nand”
(not and), so that “p nand q” is the statement ¬(p ∧q). It transpires that
any proposition can be expressed (in a possibly complicated way) using only
“nand”. The same thing applies to “nor”, where “p nor q” is the statement
¬(p ∨q).
1.10
Logical Implication
It is apparent from examining the truth table for a∧b that, if this statement
is true, then so is a. Since an implication is true by deﬁnition when the
hypothesis is false, this means that the statement (a ∧b) →a is a tautology.
If, in the midst of an argument, we were to discover that a ∧b is true, we
would be entitled to conclude (infer, or deduce) that a is true (and the same
for b).
In what follows we develop a collection of basic rules for making
inferences.
Informally statement, a statement p logically implies a statement q if the
truth or p guarantees the truth of q This happens exactly when p →q is a

1.11. VALID ARGUMENTS AND INFERENCE RULES
15
tautology. Note that we are not concerned about what happens if p is false.
This is because of the truth table for implies: p →q is true (by deﬁnition)
when p is false.
Formally, we say p logically implies q when p →q is a tautology.
We use the notation p ⇒q to denote the fact (theorem), that p →q is a
tautology, that is, that p logically implies q. Notice that p →q is a statement
and can in general be true or false, and p ⇒q indicates the (higher level)
fact that it is always true.
Suppose p ⇔q. Then p ↔q is a tautology. Since p ↔q ⇔(p →
q) ∧(q →p), the latter statement is also a tautology. Using the reasoning
in the ﬁrst paragraph of this section, this means that each of (p →q) and
(q →p) is a tautology. Therefore p ⇒q and p ⇐q (which has the obvious
intended meaning: q ⇒p). In the same way, if both p ⇒q and p ⇐q, then
p ⇔q.
1.11
Valid Arguments and Inference Rules
An argument is an implication (p1 ∧p2 ∧· · · ∧pn) →q. The statements
p1, p2, . . . , pn are called premises, and the statement q is called the conclusion.
Put diﬀerently, an argument is an assertion. Since the truth table for implies
says that an implication is true when its hypothesis is false, and since the
hypothesis is the conjunction of all of the premises, the assertion being made
is that if the premises are all true, then so is the conclusion.
An argument is called valid if the implication is a tautology (i.e., if the
premises logically imply the conclusion, so that the conclusion is guaranteed
to be true when all of the hypotheses are true), otherwise it is invalid.
To show that an argument is invalid, it needs to be demonstrated that
the implication is not a tautology. From the truth table for implies, this
amounts to describing a single row of a truth table where each premise is
true and the conclusion is false. Such a collection of truth values is called a
counterexample to the argument.
Arguments are usually presented in the tabular format shown below for
the example [(p →¬q) ∧(¬r →p) ∧q] →r. The premises are listed ﬁrst,

16
CHAPTER 1. LOGIC
and then the conclusion is listed below a separating line.
p →¬q
¬r →q
∴¬r →p
The argument given above is invalid.
To demonstrate that, we need
to give a counterexample: a truth assignment for p, q and r such that the
premises are all true and the conclusion is false. The best way to get started
is to ﬁnd the truth assignments that make the conclusion false. Here there is
only one: the statement ¬r →p is false only when ¬r is true (so r is false)
and p is false. Now we want to choose a truth value for q, if necessary, so
that all of the premises are true. When p is false, the implication p →¬q is
true. When r is false, the implication ¬r →q is true only when q is true.
Thus, if p, q, r have the truth values 0, 1, 0, respectively, the premises are all
true and the conclusion is false. Therefore, the argument is not valid.
A truth table can, in principle, be used to show an argument is valid. But,
if the number of premises involved is large, so is the table. A better way is
to give a proof: a chain of logical equivalences and implications involving
the premises (which are assumed to be true because an implication is true
when its hypothesis is false). The idea is that every statement you write
down is true, and is either a premise, or an allowed additional hypothesis,
or is derived from statements known to be true via logical equivalences and
implications.
Our ultimate goal is to write mathematical proofs in words.
Proving
logical implications using inference rules and logical equivalences is a step
towards that goal.
The two following inference rules are each a logical implication. They are
just common sense, but can be formally proved with a truth table. These
will get used frequently in arguments and hence need to be at your ﬁngertips,
so they should be memorized.
• Modus Ponens: (p →q) ∧p ⇒q
• Chain Rule (Law of Syllogism): (p →q) ∧(q →r) ⇒p →r

1.11. VALID ARGUMENTS AND INFERENCE RULES
17
We use these inference rules to prove some other rules. The rules above
are worth memorizing. The rules below are easy consequences of them and
need not be remembered.
Modus Tollens: [(p →q) ∧¬q] ⇒¬p.
Proof.
1.
p →q
Premise
2.
¬q →¬p
L.E. to 1
3.
¬q
Premise
4.
∴¬p
2, 3, M.P.
Disjunctive Syllogism: [(p ∨q) ∧¬p] ⇒q.
Proof.
1.
p ∨q
Premise
2.
¬p →q
L.E. to 1
3.
¬p
Premise
4.
∴q
2, 3, M.P.
Resolution: [(p ∨r) ∧(q ∨¬r)] ⇒p ∨q.
Proof.
1.
p ∨r
Premise
2.
¬p →r
L.E. to 1
3.
q ∨¬r
Premise
4.
¬r ∨q
3, Commutative
5.
r →q
L.E. to 4
6.
¬p →q
2, 5, Chain Rule
7.
p ∨q
L.E. to 6
Here are two more inference rules which are clearly true, and which can
be formally proved with a truth table.
• Disjunctive Ampliﬁcation: p ⇒p ∨q
• Conjunctive Simpliﬁcation: p ∧q ⇒p

18
CHAPTER 1. LOGIC
Here is another example of using inference rules to prove an argument is
valid.
¬p ↔q
¬q →r
p
∴r
Proof.
1.
¬p ↔q
Premise
2.
(¬p →q) ∧(q →¬p)
L.E. to 1
3.
q →¬p
2, Conjunctive Simpliﬁcation
4.
p →¬q
3, Contrapositive
5.
¬q →r
Premise
6.
p →r
4, 5, Chain Rule
7.
p
Premise
8.
r
6, 8, M.P.
In the next example, the argument is given in words. We can still check
its validity using inference rules. First, we need to translate the argument
into symbols.
If I run, then my ankle does not hurt
If I am not injured, then I run
My ankle hurts
∴
I am injured
Let p, q, and r denote the statements “I run”, “My ankle hurts”, and “I
am injured”, respectively. Then the argument is:
p →¬q
¬r →p
q
∴r

1.11. VALID ARGUMENTS AND INFERENCE RULES
19
This argument is valid (unlike most stories about sports injuries). We
can prove it using inference rules.
1.
p →¬q
Premise
2.
¬r →p
Premise
3.
¬r →¬q
2, 1, Chain Rule
4.
q →r
3, Contrapositive
5.
q
Premise
6.
∴r
4, 5, M.P.
We conclude this section with two more inference rules that can be proved
with a truth table, and then some discussion about them.
• Proof by Contradiction: (¬p →0) ⇒p
• Proof by Cases: (p →r) ∧(q →r) ⇒(p ∨q) →r
The rule “Proof by Contradiction” is best illustrated by a proof in words.
An example will be given in the next section. The idea behind the rule is that
one should only be able to obtain true statements when starting with true
statements, and using logical equivalences and logical implications. Hence, if
falsity of the desired conclusion leads to a statement that is never true (that
is, a contradiction), then the conclusion can not be false. Here, we illustrate
the use of this rule in a proof of the type above by giving a second proof of
the rule “Resolution”.
Alternate proof of the rule “Resolution”.
1.
¬(p ∨q)
Negation of conclusion, for proof by contradiction
2.
¬p ∧¬q
1, DeMorgan
3.
¬p
2, Conjunctive Simpliﬁcation
4.
¬q
2, Conjunctive Simpliﬁcation
5.
p ∨r
Premise
6.
¬p →r
L.E. to 5
7.
r
3, 6, M.P.
8.
q ∨¬r
Premise
9
¬q →¬r
L.E. to 8
10.
¬r
4, 9, M.P.
11.
r ∧¬r
(⇔0)
Known contradiction from 7, 10
12.
p ∨q
1, 11, Proof by Contradiction

20
CHAPTER 1. LOGIC
The rule “Proof by Cases” is also best illustrated by a proof in words. It
was mentioned in this section (as with proof by contradiction) to illustrate
that the proof methods we will use have a basis in logic. The intuition for
proof by cases is simple enough. If the truth of p guarantees the truth of a
conclusion, r, and the truth of q guarantees the truth of r, and one of p and
q must be true, then r must be true. The way this rule is applied is that
if one of several cases must arise, and the desired conclusion holds in each
case, then the premises logically imply the conclusion. An example is given
in the next section.
1.12
Proofs in Words
Suppose you want to write a proof in words for a statement of the form
“if p then q”. That is, you wish to establish the theorem p ⇒q. There
are many techniques (methods) that can be tried. There is no guarantee of
which method will work best in any given situation. Experience is a good
guide, however. Once a person has written a few proofs, s/he gets a sense of
the best thing to try ﬁrst in any given situation.
To use the method of direct proof to show p logically implies q, assume p
is true and then argue using deﬁnitons, known implications and equivalences
that q must be true.
The reason for assuming p is true comes from the
deﬁnition of logical implication. In this case the ﬁrst line of the proof is
“Assume p.”
and the last says, essentially, “q is true”.
What comes in
between depends on p and q.
In the following example of a direct proof, we use the deﬁnition of an
even integer: An integer n is even if there exists an integer k so that n = 2k.
Proposition 1.12.1 If the integer n is even, then n2 is even.
Proof. Suppose that the integer n is even. Hence, there exists an an integer
k so that n = 2k. Then, n2 = (2k)2 = 4k2 = 2(2k2). Since 2k2 is an integer,
n2 is even. □
It is customary in mathematics to use a box to indicate the end (or
absence) or an argument.

1.12. PROOFS IN WORDS
21
Another proof technique is to prove the contrapositive. That is, assume
q is false, and argue using the same things as above that p must also be
false. This works since p →q ⇔¬q →¬p. In this case the ﬁrst line of the
proof is “Assume ¬q.” and the last is, essentially, “¬p is true”. This method
is sometimes called giving an indirect proof. The motivation for the name
comes from the fact that the logical implication is proved indirectly, by its
contrapositive.
In the following example of proving the contrapositive, we use the deﬁ-
nition of an odd integer: An integer n is odd if there exists an integer k so
that n = 2k + 1.
Proposition 1.12.2 If the integer n2 is even, then n is even.
Proof. Suppose that the integer n is not even, that is, it is odd. We want
to show that n2 is odd. Since n is odd, there exists an an integer k so that
n = 2k + 1. Then, n2 = (2k + 1)2 = 4k2 + 4k + 1 = 2(2k2 + 2k) + 1. Since
2k2 + 2k is an integer, n2 is odd. □
Yet another technique is proof by contradiction. Such a proof begins by
assuming q is false and, again proceeding as above, until deriving a statement
which is a (logical) contradiction. This enables you to conclude that q is true.
In such a situation, the ﬁrst line of the proof is “Suppose ¬q.” and the proof
ends with “ We have obtained a contradiction. Therefore q.”
Here is a classic example of proof by contradiction. It uses the deﬁnition
of a rational number: a number x is rational if there exist integers a and b
so that x = a/b. A number is irrational if it is not rational.
Put slightly diﬀerently, x is rational if it is a ratio of two integers. There
are many ratios of integers that equal a given number. In particular, there
is always one where the fraction a/b is in lowest terms, meaning that a and
b have no common factors other than one.
Proposition 1.12.3
√
2 is not irrational.
Proof. Suppose
√
2 is rational. Then there exist integers a and b so that
√
2 = a/b. The integers a and b can be chosen so that the fraction a/b is

22
CHAPTER 1. LOGIC
in lowest terms, so that a and b have no common factor other than 1. In
particular, a and b are not both even.
Since
√
2 = a/b, we have that 2 = (a/b)2 = a2/b2. By algebra, 2b2 = a2.
Therefore a2 is even. By Proposition 1.12.2, a is even. Thus there exists an
integer k so that a = 2k. It now follows that 2b2 = a2 = (2k)2 = 4k2, so that
b2 = 2k2. Therefore b2 is even. By Proposition 1.12.2, b is even.
We have now derived the contradiction (a and b are not both even) and
(a and b are both even). Therefore,
√
2 is not rational. □
Sometimes the hypotheses lead to a number of possible situations, and
it is easier to consider each possibility in turn. In the method of proof by
cases, one lists the cases that could arise (being careful to argue that all
possibilities are taken into account), and then shows that the desired result
holds in each case. It could be that diﬀerent cases are treated with diﬀerent
proof methods. For example, one could be handled directly, and another by
contradiction.
In the following example we make use the fact that every integer n can
be uniquely written in the form 3k + r, where k is an integer and r equals
0, 1, or 2. The integer r is the remainder on dividing n by 3. When the
remainder equals 0 we have n = 3k, so that n is a multiple of 3.
Proposition 1.12.4 If the integer n2 is a multiple of 3, then n is a multiple
of 3.
Proof. We prove the contrapositive: if n is not a multiple of 3, then n2 is not
a multiple of 3. Suppose n is not a multiple of 3. Then the remainder when
n is divided by 3 equals 1 or 2. This leads to two cases:
Case 1. The remainder on dividing n by 3 equals 1.
Then, there exists an integer k so that n = 3k+1. Hence n2 = (3k+1)2 =
9k2 + 6k + 1 = 3(3k2 + 2k) + 1. Since (3k2 + 2k) is an integer, the remainder
on dividing n2 by 3 equals 1. Therefore n2 is not a multiple of 3.
Case 2. The remainder on dividing n by 3 equals 2.
Then, there exists an integer k so that n = 3k+2. Hence n2 = (3k+2)2 =
9k2 + 12k + 4 = 3(3k2 + 4k + 1) + 1. Since (3k2 + 4k + 1) is an integer, the
remainder on dividing n2 by 3 equals 1. Therefore n2 is not a multiple of 3.

1.12. PROOFS IN WORDS
23
Both cases have now been considered. In each of them, we have shown that
n2 is not a multiple of 3. It now follows that if n is not a multiple of 3, then
n2 is not a multiple of 3. This completes the proof. □

