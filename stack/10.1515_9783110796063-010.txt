|
Part III: Mathematical basics of data science


10 Mathematics as a language for science
10.1 Introduction
In data science, all problems will be approached computationally. For this reason,
we started this book with an introduction to the programming language R.
Since most of the models for data analysis are based on mathematics and statis-
tics, the next step will focus on the understanding of mathematical background
needed to formulate and build these models. However, before we present, in the sub-
sequent chapters, the mathematical basis of data science, we want to emphasize in
this chapter a more general point concerning the mathematical language itself. This
point refers to the abstract nature of data science.
In Figure 10.1, we visualize a generic framework that holds for every data anal-
ysis problem. The key point here is that every data analysis is conducted via a
computer program that represents methodological ideas from statistics and machine
learning, and every computer program consists of instructions (commands) that en-
able the communication with the processor of a computer to perform computations
electronically. Since every data analysis is conducted via a computer program that
contains instructions in a programming language, a good data scientist needs to
“speak” fluently a programming language. However, the basis of any programming
language for data analysis is mathematics, and its key characteristic is abstractness.
For this reason, a simplified message from the above discussion can be summarized
as follows:
Thinking in abstract mathematical terms makes you a better programmer and, hence, a
better data scientist.
This is also the reason why mathematics is sometimes called the language of science
[185, 188], as noted by Galileo.
Before we proceed, we would like to add a couple of notes for clarification. First,
by a programmer we mean actually a scientific programmer i. e., someone who is
concerned with the conversion of statistical and machine learning ideas into a com-
puter program rather than a general programmer who implements graphical user
interfaces (GUIs) or websites. The crucial difference is that the level of mathematics
needs for, e. g., the implementation of a GUI is minimal comparable to the imple-
mentation of a data analysis method. Also, such a way of programming is usually
purely deterministic and not probabilistic. On the other hand, the nature of a data
analysis is to deal with measurement errors and other imperfections of the data.
Hence, probabilistic and statistical methods cannot be avoided in data science since
they are integral pillars of the topic.
Second, although it is certainly not necessary to implement every method for
conducting a data analysis, a good data scientist should be capable to implement
https://doi.org/10.1515/9783110796063-010

150
|
10 Mathematics as a language for science
Figure 10.1: Generic visualization of any data analysis problem. Data analysis is conducted via
a computer program that has been written based on statistical- and machine-learning methods
informed with domain-specific knowledge, e. g., from biology, medicine, or the social sciences.
any method required for the analysis. Third, the natural language we are speaking,
e. g., English, does not translate equally well into a computer language like R, but
there are certain terms and structures that translate better. For instance, when we
speak about a “vector” and its components, we will not have a problem to capture
this in R, as shown in Chapter 5. Furthermore, in Chapter 12, we will learn much
more about vectors in the context of linear algebra. This is not a coincidence, but
the meaning of a vector is informed by its mathematical concept. Hence, whenever
we use this term in our natural language, we have an immediate correspondence to
its mathematical concept. This implies that the more we know about mathemat-
ics, the more we become familiar with terms that are well defined mathematically,
and such terms can be swiftly translated into a computer program for data analy-
sis.
We would like to finish this section by adding one more example that demon-
strates the importance of “language” and its influence on the way humans think.
Suppose, you have a twin sibling and you both are separated right after birth. You
grow up in the way you did, and your twin grows up on a deserted island without
civilization. Then, let say after 20 years, you both are independently asked a series
of questions and given tasks to solve. Given that you both share the same DNA,
one would expect that both of you have the same potential in answering these ques-
tions. However, practically it is unlikely that your twin will perform well, because
of basic communication problems in the first place. In our opinion the language of
“mathematics” plays a similar role with respect to “questions” and “tasks” from a
data analysis perspective.
In the remainder of this chapter, we provide a discussion of some basic abstract
mathematical symbols and operations we consider very important to (A) help for-
mulating concise mathematical statements, and (B) shape the way of thinking.

10.2 Numbers and number operations
|
151
10.2 Numbers and number operations
In mathematics, we distinguish five main number systems from each other:
–
natural numbers: N
–
integers: Z
–
rational numbers: Q
–
real numbers: R
–
complex numbers: C
Each of the above symbols represents a set of all numbers that belong to the cor-
responding number system. For instance, N represents all natural numbers, i. e.,
1, 2, 3, . . . ; Z represents all integer number, i. e., . . . , −2, −1, 0, +1, +2, . . . ; Q repre-
sents all rational numbers 𝑎
𝑏with 𝑎and 𝑏being any integer number; and R is the
set of all real numbers, e. g., 1.4271.
There is a natural connection between these number systems in the way that
N ⊂Z ⊂Q ⊂R ⊂C.
(10.1)
That means, e. g., every integer number is also a real number, but not every integer
number is a natural number. Furthermore, the special sets Z+ and R+ denote the
set of all positive integers and positive reals.
Intervals
When defining functions, it is common to limit the value of numbers to specific
intervals. One distinguishes finite from infinite intervals. Specifically, finite intervals
can be defined in four different ways:
[𝑎, 𝑏] = {𝑥| 𝑎≤𝑥≤𝑏}
closed interval,
(10.2)
[𝑎, 𝑏) = {𝑥| 𝑎≤𝑥< 𝑏}
half-closed interval,
(10.3)
(𝑎, 𝑏] = {𝑥| 𝑎< 𝑥≤𝑏}
half-closed interval,
(10.4)
(𝑎, 𝑏) = {𝑥| 𝑎< 𝑥< 𝑏}
open interval.
(10.5)
Similarly, infinite intervals can be defined as follows:
[𝑎, ∞) = {𝑥| 𝑎≤𝑥< ∞},
(10.6)
(𝑎, ∞) = {𝑥| 𝑎< 𝑥< ∞},
(10.7)
(−∞, 𝑏] = {𝑥| −∞< 𝑥≤𝑏},
(10.8)
(−∞, 𝑏) = {𝑥| −∞< 𝑥< 𝑏},
(10.9)
(−∞, ∞) = R.
(10.10)

152
|
10 Mathematics as a language for science
The difference between a closed interval and an open interval is that for a closed
interval the end point(s) belong to the interval, whereas this is not the case for an
open interval.
Modulo operation
The modulo operation gives the remainder of a devision of two positive numbers 𝑎
and 𝑏. It is defined for 𝑎∈R+ and 𝑏∈R+ ∖{0} by
𝑎
mod 𝑏= modulo(𝑎, 𝑏) = 𝑎−𝑛· 𝑏= 𝑟.
(10.11)
Here, 𝑛∈N ∪{0} is a natural number, and 𝑟∈R+ is the remainder of the division
of 𝑎by 𝑏. For programming, the modulo operation is frequently used for integer
numbers 𝑎and 𝑏, because a cyclic mapping can be easily realized, i. e., 𝑁+ 1 →1
can be obtained by
modulo(𝑁+ 1, 𝑁).
(10.12)
In R, the module operation is carried out using the following code:
Listing 10.1: Modulo Operation
a %% b
#
modulo(a, b)
Example 10.2.1. We calculate 17 mod 4
=
modulo(17, 4) and 3 mod 7
=
modulo(3, 7). In these examples, 𝑎and 𝑏are integers. Therefore, we use the fact
that in case we determine 𝑎
𝑏, we always find 𝑞, 𝑟∈Z such that 𝑎= 𝑏˙𝑞+ 𝑟, see [199].
We start with 17 mod 4 and see that 17 = 𝑞· 4 + 𝑟. Hence, 𝑞= 4, and 𝑟= 1.
Thus, 17 mod 4 = 1. If we consider 3 mod 7, we find 3 = 𝑞· 7 + 𝑟. Thus, 𝑞= 0,
and 𝑟= 3. This yields to 3 mod 7 = 3.
Rounding operations
The floor and ceiling operations round a real number to its nearest integer value up
or down. The corresponding functions are denoted by
⌊𝑥⌋
floor function,
(10.13)
⌈𝑥⌉
ceiling function.
(10.14)
As an example, the value of 𝑥= 1.9 results in ⌊𝑥⌋= 1 and ⌈𝑥⌉= 2.
In contrast, the command round(𝑥), rounds the value of the real number 𝑥to its
nearest integer value. For instance, round(0.51) = 1. In R, the value 0.5 is rounded
toward the lower integer value, e. g., round(−3.5) = −4.

10.3 Sets and set operations
|
153
Finally, the truncation function, trunc(𝑥), of a real number 𝑥is just the integer
digits of the number 𝑥without the fractional digits i. e., the numbers after the
decimal point. For instance, trunc(3.91) = 3.
Listing 10.2: Rounding operations, sign function and absolute value
floor(x)
# ⌊𝑥⌋
ceiling(x)
# ⌈𝑥⌉
round(x)
# round(x)
trunc(x)
# truncation(x)
sign(x)
# sign of x
abs(x)
# absolute value of x
Sign function
For any real number 𝑥∈R, the sign function, sign(𝑥), is given by
sign(𝑥) =
⎧
⎪
⎪
⎨
⎪
⎪
⎩
+1
if 𝑥> 0;
0
if 𝑥= 0;
−1
if 𝑥< 0.
(10.15)
Absolute value
The absolute value or the modulus of a real number 𝑥∈R is given by
abs(𝑥) = |𝑥| =
{︃
+𝑥
if 𝑥≥0;
−𝑥
if 𝑥< 0.
(10.16)
10.3 Sets and set operations
In the following, we introduce sets and some of their basic operations. In general,
a set is a well-defined collection of objects. For instance, 𝒜= {1, 2, 3} contains the
three natural numbers 1, 2, and 3, ℬ= {△, ∘} is a set consisting of two geometric
objects,
𝒞= {K, Q, N, B, p}
(10.17)
is the set containing chess pieces, and 𝒟= {𝒜, 𝒞} is a set of sets. From these
examples, one can see that an object is something very generic, and a set is just a
container for objects. Usually, the objects of a set are enclosed by the curly brackets
“{” and “}”.
The symbol ∈denotes the membership relation to indicate that an object is
contained in a set. For instance, 2 ∈𝒜, and ∘∈ℬ. Here, the objects 2 and ∘are also

154
|
10 Mathematics as a language for science
called elements of their corresponding sets. The symbol ∈is a relation, because it
establishes a connection between an object and a set and, hence, relates both with
each other.
If we have two sets, 𝐴1 and 𝐴2, and every element in 𝐴1 is also contained in
𝐴2, but there are also elements in 𝐴2 that are not in 𝐴1, we write 𝐴1 ⊂𝐴2. In this
case 𝐴1 is called a subset of 𝐴2. In contrast, if every element in 𝐴1 is also contained
in 𝐴2, and there are no additional elements in 𝐴2, we write 𝐴1 = 𝐴2, because both
sets contain the same elements. Finally, if every element in 𝐴1 is also contained in
𝐴2, and there is at least one additional element in 𝐴2, we write 𝐴1 ⊆𝐴2. In this
case 𝐴1 is a proper subset of 𝐴2.
A special set is the empty set, denoted by ∅, which does not contain any element.
|𝐴| is the cardinality of 𝐴, i. e., the number of its elements. It is possible that a set
contains a finite or infinite number of elements. For instance, for the above set ℬ,
we have |ℬ| = 2, and for the set of natural numbers we have |N| = ∞.
The set 𝐴1 ∪𝐴2 = {𝑥: 𝑥∈𝐴1 ∨𝑥∈𝐴2} is called the union of 𝐴1, and 𝐴2.
𝐴1 ∩𝐴2 = {𝑥: 𝑥∈𝐴1 ∧𝑥∈𝐴2} is called the intersection of 𝐴1 and 𝐴2. For the
definition of these sets, we used the colon symbol “:” within the curled brackets.
This symbol means “with the property’’. Hence, the set {𝑥: 𝑥∈𝐴1 ∨𝑥∈𝐴2} can be
read explicitly as every 𝑥that is element in 𝐴1 or every 𝑥that is element of 𝐴2 is a
member of the set 𝐴1 ∪𝐴2. Alternatively, sometimes the symbol “|” is used instead
of “:”.
In Figure 10.2, we show a visualization of the union and the intersection. It is
important to realize that both operations create new sets, i. e., 𝐵= 𝐴1 ∪𝐴2, and
𝐶= 𝐴1 ∩𝐴2 are two new sets. If 𝐴1 ∩𝐴2 = ∅, then 𝐴1, 𝐴2 are called disjoint sets.
Figure 10.2: Visualization of set operations. Left: The union of two sets. Right: The intersection
of 𝐴1 and 𝐴2.
An alphabet Σ is a finite set of atomic symbols, e. g., Σ = {𝑎, 𝑏, 𝑐}. That means, Σ
contains all elements for a given setting. No other elements can exist.
Σ⋆is the set of all words over Σ. For example if Σ = {𝑏}, then Σ⋆= {𝜖, 𝑏, 𝑏𝑏, 𝑏𝑏𝑏,
𝑏𝑏𝑏𝑏. . .}. Here 𝜖is the empty word.

10.4 Boolean logic
|
155
There are three quantifiers from predicate logic that allow a concise description
of properties of elements of sets.
Definition 10.3.1. The expression ∀means for all. For example if 𝐴= {𝑎1, 𝑎2, 𝑎3},
then by ∀𝑥∈𝐴, we mean all elements in set 𝐴, i. e., 𝑎1, 𝑎2, 𝑎3.
Definition 10.3.2. The expression ∃means there exits. For example if 𝐵
=
{−1, 2, 3}, then by ∃𝑥∈𝐵: 𝑥< 3, we mean that in set 𝐵there exists an el-
ement, which is less than 3. Possibly, there is more than one such element, as is the
case for 𝐵.
Definition 10.3.3. The expression ∃! means there exits only one. For example: ∃! 𝑥∈
𝐵: 𝑥< 2 means that in the set 𝐵there exists only one element, which is less than 2.
10.4 Boolean logic
The operators ∨and ∧are the logical or and and, respectively. They form logical
operators to combine logical variables 𝑣, 𝑞∈{1, 0}. Sometimes the logical variables
are expressed as {true, false}. By using operations from the set
𝒪:= {︀
¬, ∧, ∨, ()}︀
,
(10.18)
of logical operators, we can easily construct logical formulas. For instance, the for-
mulas
𝑣∨𝑞, (𝑣∨𝑞), (𝑣∨𝑞) ∧¬(𝑣∨𝑞)
(10.19)
represent valid logical formulas as they are derived by using the operators in (10.18).
However, according to this definition, the formulas
(𝑣∨𝑞)𝑞𝑞, (𝑣𝑞)
(10.20)
are not valid (their meaning is undefined).
Suppose that 𝑆1, 𝑆2, 𝑆3 are logical expressions (statements) derived by using
the elements of the set operators 𝒪, similar to the ones given in equation (10.19).
The following statements about logical formulas hold:
Theorem 10.4.1 (Commutative laws [98]).
𝑆1 ∧𝑆2 ⇐⇒𝑆2 ∧𝑆1
(10.21)
𝑆1 ∨𝑆2 ⇐⇒𝑆2 ∨𝑆1
(10.22)
Theorem 10.4.2 (Associative laws [98]).
(𝑆1 ∧𝑆2) ∧𝑆3 ⇐⇒𝑆1 ∧(𝑆2 ∧𝑆3)
(10.23)

156
|
10 Mathematics as a language for science
(𝑆1 ∨𝑆2) ∨𝑆3 ⇐⇒𝑆1 ∨(𝑆2 ∨𝑆3)
(10.24)
Theorem 10.4.3 (Distributive laws [98]).
𝑆1 ∨(𝑆2 ∧𝑆3) ⇐⇒(𝑆1 ∨𝑆2) ∧(𝑆1 ∨𝑆3)
(10.25)
𝑆1 ∧(𝑆2 ∨𝑆3) ⇐⇒(𝑆1 ∧𝑆2) ∨(𝑆1 ∧𝑆3)
(10.26)
Theorem 10.4.4 (Rules of de Morgan [98]).
¬(𝑆1 ∨𝑆2) ⇐⇒¬𝑆1 ∧¬𝑆2
(10.27)
¬(𝑆1 ∧𝑆2) ⇐⇒¬𝑆1 ∨¬𝑆2
(10.28)
Theorem 10.4.1 says that the logical arguments can be switched for the logical
operators and and or. Theorem 10.4.2 says that we may successively shift the brack-
ets to the right. Similarly, when expanding expressions over the reals, for instance
𝑥(𝑥+ 1) = 𝑥2 + 𝑥, Theorem 10.4.3 gives a rule for expanding logical expressions.
The rules of de Morgan given by Theorem 10.4.4 state that a negation applied
to the single expressions flips the logical operator. Note that these rules can be
formulated for sets accordingly.
Theorem 10.4.5 (Rules of de Morgan for sets [100]).
𝐴∪𝐵= 𝐴∩𝐵
(10.29)
𝐴∩𝐵= 𝐴∪𝐵
(10.30)
The resulting statements (or forms) are called normal forms, and important
examples thereof are the disjunctive normal form and conjunctive normal form of
logical expressions, see [98].
Definition 10.4.1 (Disjunctive normal form (DNF) [98]). A logical expression 𝑆is
given in disjunctive normal form if
𝑆= 𝑆1 ∨𝑆1 ∨· · · ∨𝑆𝑘,
(10.31)
where
𝑆𝑖= 𝑆𝑗1 ∧𝑆𝑗2 ∧· · · ∧𝑆𝑗𝑘𝑗.
(10.32)
The terms 𝑆𝑗𝑖are literals, i. e., logical variables or the negation thereof.
Two examples for logical formulas given in disjunctive normal form are
(𝑣∧𝑞) ∨(¬𝑣∧¬𝑞)
(10.33)

10.5 Sum, product, and Binomial coefficients
|
157
or
𝑣∨(𝑣∧𝑞).
(10.34)
Here we denote the literals by using the notations 𝑣and 𝑞for logical variables.
Definition 10.4.2 (Conjunctive normal form (DNF) [98]). A logical expression 𝑆is
given in conjunctive normal form if
𝑆= 𝑆1 ∧𝑆1 ∧· · · ∧𝑆𝑘,
(10.35)
where
𝑆𝑖= 𝑆𝑗1 ∨𝑆𝑗2 ∨· · · ∨𝑆𝑗𝑘𝑗.
(10.36)
The terms 𝑆𝑗𝑖are literals.
Examples for logical formulas given in conjunctive normal form are
(𝑣∨𝑞) ∧(¬𝑣∨¬𝑞)
(10.37)
or
𝑣∧(𝑣∨𝑞).
(10.38)
In practice, the application of Boolean functions [98] has been important to de-
velop electronic chips for computers, mobile phones, etc. A logic gate [98] represents
an electronic component that realizes (computes) a Boolean function 𝑓(𝑣1, . . . , 𝑣𝑛) ∈
{0, 1}; 𝑣𝑖are logical variables. These logic gates use the logical operators ∧, ∨, ¬
and transform input signals into output signals. Figure 10.3 shows the elementary
logic gates and their corresponding truth tables.
We see in Figure 10.3 that the OR-gate is based on the functionality of the
operator ∨. That means, the output signal of the OR-gate equals 1 as soon as one
of its input signals is 1.
The output signal of the AND-gate equals 1 if and only if all input signals
equal 1. As soon as one input signal equals 0, the value of the Boolean function
computed by this gate is 0.
The NOT-gate computes the logical negation of the input signal. If the input
signal is 1, the NOT-gate gives 0, and vice versa.
10.5 Sum, product, and Binomial coefficients
For a given set 𝐴= {𝑎1, . . . , 𝑎𝑛}, the sum and product of its components can be
conveniently summarized by the sum operation (∑︀) and the product operation (∏︀).

158
|
10 Mathematics as a language for science
Figure 10.3: Elementary logic gates of Boolean functions and their corresponding truth table.
The top symbol corresponds to the IEC, and the bottom to the US standard symbols.
Sum
The sum, ∑︀, for the numbers 𝑎𝑖involving the integer indices 𝑖𝑙, 𝑖𝑙+ 1 . . . , 𝑖𝑢∈N is
defined by
𝑖𝑢
∑︁
𝑖=𝑖𝑙
𝑎𝑖= 𝑎𝑖𝑙+ 𝑎𝑖𝑙+1 + · · · + 𝑎𝑖𝑢.
(10.39)
Here the index “l” indicates “lower” whereas “u” indicates “upper”, and they are
used to denote the start and end of the sequence of indices. For 𝑖𝑙= 1, and 𝑖𝑢= 𝑛,
we obtain the sum over all elements of 𝐴, ∑︀𝑛
𝑖=1 𝑎𝑖= 𝑎1 +· · ·+𝑎𝑛. Alternatively, the
sum can also be written using a different notation for the index of the sum symbol,
namely
∑︁
𝑖∈{𝑖𝑙,𝑖𝑙+1,...,𝑖𝑢}
𝑎𝑖= 𝑎𝑖𝑙+ 𝑎𝑖𝑙+1 + · · · + 𝑎𝑖𝑢.
(10.40)
The latter form is more convenient when the summation concerned a subset of the
indices. For instance, suppose that 𝐼= {2, 4, 5} is a subset containing the desired
indices for the summation then
∑︁
𝑖∈𝐼
𝑎𝑖=
∑︁
𝑖∈{2,4,5}
𝑎𝑖= 𝑎2 + 𝑎4 + 𝑎5.
(10.41)

10.5 Sum, product, and Binomial coefficients
|
159
Product
Similar to the sum, the product, ∏︀, for the numbers 𝑎𝑖involving the integer indices
𝑖𝑙, 𝑖𝑙+ 1 . . . , 𝑖𝑢∈N is defined as follows.
𝑖𝑢
∏︁
𝑖=𝑖𝑙
𝑎𝑖= 𝑎𝑖𝑙· 𝑎𝑖𝑙+1 · · · · · 𝑎𝑖𝑢;
(10.42)
∏︁
𝑖∈{𝑖𝑙,𝑖𝑙+1...,𝑖𝑢}
𝑎𝑖= 𝑎𝑖𝑙· 𝑎𝑖𝑙+1 · · · · · 𝑎𝑖𝑢.
(10.43)
Remark 10.5.1. In the above discussions of the sum and product, we assumed inte-
ger indices for the identification of the numbers 𝑎𝑖, i. e., 𝑖∈N. However, we would
like to remark that, in principle, this can be generalized to arbitrary “labels”. For
instance, for the set 𝐴= {𝑎△, 𝑎∘, 𝑎⊗}, we can define the sum and product over its
elements as
∑︁
𝑖∈{△,∘,⊗}
𝑎𝑖= 𝑎△+ 𝑎∘+ 𝑎⊗;
(10.44)
∏︁
𝑖∈{△,∘,⊗}
𝑎𝑖= 𝑎△· 𝑎∘· 𝑎⊗.
(10.45)
Hence, from a mathematical point of view, the nature of the indices is flexible.
However, whenever we implement a sum or a product with a programming language,
integer values for the indices are advantageous, because, e. g., the indexing of vectors
or matrices is accomplished via integer indices.
In R, the most flexible way to realize sums and products is via loops. However,
if one just wants a sum or a product over all elements in a vector 𝐴, from 𝑖𝑙= 1 to
𝑖𝑢= 𝑁, one can use the following commands:
Listing 10.3: Sum and product
sum(A)
# sum of all elements in vector A
prod(A)
# product of all elements in vector A
Binomial coefficients
For all natural numbers 𝑘, 𝑛∈N with 0 ≤𝑘≤𝑛, the binomial coefficient, denoted
𝐶(𝑛, 𝑘), is defined by
𝐶(𝑛, 𝑘) =
(︂𝑛
𝑘
)︂
=
𝑛!
𝑘!(𝑛−𝑘)!.
(10.46)
It is interesting to note that a binomial coefficient is a natural number itself, i. e.,
𝐶(𝑛, 𝑘) ∈N.

160
|
10 Mathematics as a language for science
Figure 10.4: Visualization of the meaning of the Binomial coefficient 𝐶(4, 2).
For the definition of a binomial coefficient, the factorial of a natural number, denoted
by the symbol “!”, is used. The factorial of an natural number 𝑛is just the product
of the numbers from 1 to 𝑛, i. e.,
𝑛! =
𝑛
∏︁
𝑖=1
𝑖= 1 · 2 · · · · · 𝑛.
(10.47)
The binomial coefficient has the combinatorial meaning that from 𝑛objects, there
are 𝐶(𝑛, 𝑘) ways to select 𝑘objects without considering the order in which the
objects have been selected. In Figure 10.4, we show an urn with 𝑛= 4 objects. From
this urn, we can draw 𝑘= 2 objects in 6 different ways.
Also, the factorial 𝑛! has a combinatorial meaning. It gives the number of dif-
ferent arrangements of 𝑛objects by considering the order. For instance, the objects
{1, 2, 3} can be arranged in 3! = 6 different ways:
(1, 2, 3) −(1, 3, 2) −(2, 3, 1) −(2, 1, 3) −(3, 1, 2) −(3, 2, 1).
(10.48)
Listing 10.4: Factorial and Binomial coefficients
factorial(k)
# factorial of the natural number k
choose(n, k)
# binomical coefficient 𝐶(𝑛, 𝑘)
Properties of Binomial coefficients
The binomial coefficients have interesting properties. Some of these are listed below.
𝐶(𝑛, 0) =
(︂𝑛
0
)︂
= 1,
(10.49)
𝐶(𝑛, 𝑛) =
(︂𝑛
𝑛
)︂
= 1,
(10.50)
(︂𝑛
𝑘
)︂
=
(︂
𝑛
𝑛−𝑘
)︂
,
(10.51)
∀𝑛∈N, and 0 ≤𝑘≤𝑛.

10.6 Further symbols
|
161
Figure 10.5: Pascal’s triangle for Binomial coefficients. Visualized is the recurrence relation for
Binomial coefficients in equation (10.52).
The following recurrence relation for binomial coefficients is called Pascal’s rule:
(︂𝑛+ 1
𝑘+ 1
)︂
=
(︂𝑛
𝑘
)︂
+
(︂
𝑛
𝑘+ 1
)︂
.
(10.52)
In Figure 10.5, we visualize the result of Pascal’s rule for 𝑛∈{0, . . . , 6}. The resulting
object is called Pascal’s triangle.
10.6 Further symbols
Let us again assume we have a given set 𝐴= {𝑎1, . . . , 𝑎𝑛}, where its elements 𝑎𝑖are
numbers.
Minimum and maximum
The minimum and the maximum of the set 𝐴are defined by
𝑎*
min =
min
𝑖=1,...,𝑛{𝐴} = {𝑎𝑖| 𝑎𝑖∈𝐴and 𝑎𝑖≤𝑎𝑗∀𝑗̸= 𝑖};
(10.53)
𝑎*
max =
max
𝑖=1,...,𝑛{𝐴} = {𝑎𝑖| 𝑎𝑖∈𝐴and 𝑎𝑖≥𝑎𝑗∀𝑗̸= 𝑖}.
(10.54)
If there is more than one element that is minimum or maximum, then the corre-
sponding sets 𝑎*
min and 𝑎*
max contain more than one element.

162
|
10 Mathematics as a language for science
Argmin and Argmax
There are two related functions to the minimum and maximum that return the
indices of the minimal/maximal elements instead of their values:
𝑖*
min = argmin
𝑖=1,...,𝑛
{𝐴} = {𝑖| 𝑎𝑖∈𝐴and 𝑎𝑖≤𝑎𝑗∀𝑗̸= 𝑖};
(10.55)
𝑖*
max = argmax
𝑖=1,...,𝑛
{𝐴} = {𝑖| 𝑎𝑖∈𝐴and 𝑎𝑖≥𝑎𝑗∀𝑗̸= 𝑖}.
(10.56)
Logical statements
A logical statement may be defined verbally or mathematically, and take one of the
values true or false. For simplicity, we define the Boolean value 1 for true, and 0 for
false. One can show that the set {true, false} is isomorphic to the set {0, 1}.
The Boolean value of the statement “The next autumn comes for sure” equals
1 and, hence, the statement is true. From a probabilistic point of view, this event is
certain and its probability equals one. Therefore, we may conclude that this state-
ment does not contain any information, see also [169]. The following inequalities and
equations
𝑖= −5,
(10.57)
100 = 50 + 20 + 30,
(10.58)
−1 ≥5,
(10.59)
1 < 2,
(10.60)
𝑛
∑︁
𝑗=1
𝑗= 𝑛(𝑛+ 1)
2
,
𝑛∈N,
(10.61)
are mathematical statements, which are true or false. The first equation is false, as
𝑖= √−1, where 𝑖is the imaginary unit of a complex number 𝑧= 𝑎+ 𝑖𝑏. The second
equation is obviously true, as 50 + 20 + 30 equals 100. For the third statement, a
negative number cannot be greater or equal than a positive number and its Boolean
value is therefore false. The fourth statement represents an inequality too, and is
true. Strictly speaking, the fifth equation is a statement form (Sf) over the natural
numbers, as it contains the variable 𝑛∈N.
In general, statement forms contain variables and are true or false. In case of
equation (10.61), we can write ⟨Sf(𝑛)⟩= ⟨∑︀𝑛
𝑗=1 𝑗= 𝑛(𝑛+1)
2
⟩. This statement form is
true for all 𝑛∈N and can be proven by induction. Another example of a statement
form is
⟨︀
Sf(𝑥)⟩︀
= ⟨𝑥+ 5 = 15⟩> .
(10.62)
For 𝑥= 10, ⟨Sf(𝑥)⟩is true. For 𝑥̸= 10, ⟨Sf(𝑥)⟩is false.

10.6 Further symbols
|
163
Generally, we can see that the statement changes if the variable of the statement
form (Sf) changes. Once we define statements (or statement forms), they can be
combined by using logical operations. We demonstrate these operations by first
assuming that 𝑆1 and 𝑆2 are logical statements. The statement 𝑆1 ∧𝑆2 means that
𝑆1 and 𝑆2 hold. This statement may have the value true or false, see Figure 10.3.
For instance, 𝑆1 := 2 + 2 = 4 ∧𝑆2 := 3 + 3 = 6 is true, but 𝑆1 := 2 + 2 =
4 ∧𝑆3 := 3 + 3 = 9 is false. Similarly, 𝑆1 ∨𝑆2 means that 𝑆1 or 𝑆2 holds. Here,
𝑆1 := 2 + 2 = 4 ∨𝑆2 = 3 + 3 = 6 is true, but 𝑆1 := 2 + 2 = 4 ∨𝑆3 := 3 + 3 = 9 is
true as well. The logical negation of the statement 𝑆is usually denoted by ¬𝑆. The
well-known triangle equation,
|𝑥1 + 𝑥2| ≤|𝑥1| + |𝑥2|,
𝑥1, 𝑣2 ∈R,
(10.63)
holds true, but not
¬(|𝑥1 + 𝑥2| ≤|𝑥1| + |𝑥2|).
(10.64)
This means
|𝑥1 + 𝑥2| > |𝑥1| + |𝑥2|
(10.65)
is generally false.
Statement: ⇒
The logical implication 𝑆1 =⇒𝑆2 means that 𝑆1 implies 𝑆2. Verbally, one can say
𝑆1 “logically implies” 𝑆2, or if 𝑆1 holds, then follows 𝑆2.
Statement ⇔
The statement 𝑆1 ⇐⇒𝑆2 is stronger, because 𝑆1 holds if and only if 𝑆2 holds.
For the above statements, it is important to note that to go from the left state-
ment to the right one, or vice versa, one needs to apply logical operators (¬, ∧, ∨)
or algebraic operations (+, −, /, etc.). For instance, by assuming the true statement
𝑛2 ≥2𝑛, 𝑛> 1, we obtain the implications
𝑛2 ≥2𝑛=⇒𝑛2 −2𝑛≥0 =⇒𝑛2 −2𝑛+ 1 = (𝑛−1)2 ≥0.
(10.66)
Finally, we want to remark that a false statement may imply a true statement; 𝑖2 = 1
(false as 𝑖2 = −1) implies 0 · 𝑖2 = 0 · 1 (true).

164
|
10 Mathematics as a language for science
10.7 Importance of definitions and theorems
In order to develop and formulate precise mathematical concepts and ideas, we need
a concise language. For instance, if we want to define a mathematical term, we
first need to understand what a mathematical definition is. In general, a definition
is a concept formation of a mathematical term that is (possibly) based on other
(mathematical) terms, which are either immediately clear or which have already
been defined. Put simply, a definition is used to give a precise meaning to a new term.
It is important not to confuse a definition with a theorem. As mentioned above,
a definition is just a concept formation, and not a statement and, therefore, it cannot
be proven, but it is assumed to be true. In contrast, a theorem is a mathematical
statement that needs to be proven by using other statements. In the following, we
give some examples of definitions:
Definition 10.7.1. Let 𝑎, 𝑏∈R. The sum of these two real numbers are defined by
sum(𝑎, 𝑏) := 𝑎+ 𝑏.
(10.67)
Definition 10.7.1 defines the sum of two real numbers based on the trivial defi-
nition of the symbol “+”.
Definition 10.7.2. Let 𝑎, 𝑏∈R. The function 𝑓𝐿: R −→R, given by
𝑓𝐿(𝑥) := 𝑎𝑥+ 𝑏,
(10.68)
defines a linear function or a linear mapping.
The next statement can be formulated as a theorem based on the previous
definition.
Theorem 10.7.1. The unique solution of the equation
𝑓𝐿(𝑥) = 0
(10.69)
is given by 𝑥= −𝑏
𝑎.
The proof of Theorem 10.7.1 is very simple, as 𝑓𝐿(𝑥) := 𝑎𝑥+𝑏= 0 leads directly
to 𝑥= −𝑏
𝑎by performing elementary calculations. Specifically, the first elementary
calculation is subtracting 𝑏from 𝑎𝑥+𝑏= 0. Second, we divide the resulting equation
by 𝑎and obtain the result.
Another example is the famous binomial theorem.
Theorem 10.7.2. Let 𝑎, 𝑏∈R and 𝑛≥1. Then,
(𝑎+ 𝑏)𝑛=
𝑛
∑︁
𝑘=1
(︂𝑛
𝑘
)︂
𝑎𝑛−𝑘𝑏𝑘.
(10.70)

10.8 Summary
|
165
Theorem 10.7.2 can be proven by induction over 𝑛.
Sometimes, one uses the term lemma instead of theorem. Also a lemma is a
statement that needs to be proven, however, it is not as important as a theorem.
An example of an important theorem is the well-known fundamental theorem of
Algebra [127], stating that any complex-valued polynomial with degree 𝑛has exactly
𝑛zeros. To give a function-theoretic proof, one needs several lemmas to conclude
this theorem, see, e. g., [49].
10.8 Summary
In general, the mathematical language is meant to help with the precise formulation
of problems. If one is new to the field, such formulations can be intimidating at first,
and verbal formulations may appear as sufficient. However, with a bit of practice one
realizes quickly that this is not the case, and one starts to appreciate and to benefit
from the power of mathematical symbols. Importantly, the mathematical language
has a profound implication on the general mathematical thinking capabilities, which
translate directly to analytical problem-solving strategies. The latter skills are key
for working successfully on data science projects, e. g., in business analytics, because
the process of analyzing data requires a full comprehension of all involved aspects,
and the often abstract relationships.

