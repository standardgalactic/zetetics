arXiv:1503.08326v2  [math.CT]  22 Jun 2015
Toward formalizing ologs:
linguistic structures, instantiations, and mappings
MARCO A. P´EREZ
Department of Mathematics
Massachusetts Institute of Technology
maperez@mit.edu
DAVID I. SPIVAK
Department of Mathematics
Massachusetts Institute of Technology
dspivak@math.mit.edu
October 17, 2018
Abstract
We deﬁne the notion of linguistic structure on a small category, in order to provide a more formal
description of ontology logs, also known as ologs, introduced in [20] by R. E. Kent and the second
author. In particular, we construct a bicategory Eng, of English noun phrases and verb phrases,
endorsed as functional by varying sets of authors. An olog is then deﬁned as a lax functor to Eng.
We then present a new notion of linguistic functor, which extends the notion of meaningful functors
deﬁned in [16]. Finally, we discuss the relationship between ologs and databases in this context.
Contents
1
Introduction
2
2
English language as a bicategory
5
2.1
Nouns, verbs, and functional sentences . . . . . . . . . . . . . . . . . . . . . . . .
5
2.2
Some postulates about endorsement . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.3
The bicategory Eng of English expressions . . . . . . . . . . . . . . . . . . . . . .
11
2.4
The bicategory InstEng of instantiated English expressions . . . . . . . . . . . . 16
3
Ologs, instantiated ologs, and mappings between them
19
3.1
Linguistic structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3.2
Mappings between ologs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
3.3
Instantiated linguistic structures
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
3.4
Instantiated functors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
References
34
1

1
Introduction
The theory of ontology logs (ologs for short) was introduced by Robert Kent and the second
author in their paper [20], as a framework for knowledge representation. Ologs are basi-
cally mathematical categories that have been wrapped in natural-language English. They
have been applied in several branches of science and engineering, [3, 5, 8, 9, 13, 19], as a
tool for various kinds of formal modeling.
Typically, a person who wishes to record and document some of her knowledge or ideas
will do so in prose, e.g., a scientist publishes ideas in the form of research papers. Ologs
offer the ability to express complex ideas using a special type of diagrams. Namely, the
objects of study and the relationships between them can be represented as the objects and
arrows in a category. The difference between an olog and a category is that an olog has
additional structure: each object is labeled with a noun phrase and each arrow is labeled
with a verb phrase, so that reading source-arrow-target yields an English sentence. These
must satisfy certain rules, giving a set-theoretic semantics to the olog, which in turn allows
it to serve a dual role as a database schema. There is a formula for composing sentences end-
to-end into a new sentence, when following a path of arrows through an olog, and a pair
of equivalent paths (also known as a commutative diagram) in the category is understood
as a declared fact equating the two English sentences.
The idea of regarding English sentences as mappings is not new. One interesting approach
on this matter is given by the notion of conceptual metaphor [22] which links one idea (a
source domain) to another (a target domain) to better understanding something. More for-
mal approaches (compared to the previous one) to language, knowledge and information
modeling have been developed by other authors, such as D. Kartsaklis, M. Sadrzadeh, S.
Pulman and B. Coecke. In [12], for instance, they make use of notions from category the-
ory, such as compact closed categories and strongly monoidal functors, to studying meaning in
natural language.
The primary goal of this paper is to present a reformulation of the previous concept of olog,
which leads to a categorical and linguistic description of mappings between ologs. In our
reformulation, any type, aspect, or fact (in the sense of [20]) in an olog must be endorsed
by a set of people, who understand its meaning, i.e., the way it indicates a set or a function.
This cultural understanding of the English language is captured by a certain bicategory Eng.
The above idea that ologs are categories wrapped in English will be formalized by saying
that ologs are categories mapping to Eng. Our notion of mapping between ologs falls out
of that structure. The result is that a map between ologs is not just a functor between their
underlying categories; it is a functor that respects the linguistic description on each node
and arrow of the ologs. For example, there is an obvious functor F (namely the identity)
between the underlying categories of the following ologs:
2

pa manh
pan objecth
is
“?”
ÐÐÐ→
pa womanh
pa number between 20 and 500h
has as weight (in kilograms)
(1)
But would this functor F mean anything? We will rephrase this question in § 3.2 as follows:
“does there exist an author who is willing to endorse a linguistic structure on F?” In this
paper we explain the difference between a (linguistic) map of ologs and a mere functor be-
tween their underlying categories. We will address this particular case (1) in Example 3.2.6.
To some extent, this issue is considered in [16], where the authors introduce the concept of
meaningful functor. One limitation of their approach is that it depends on a strong assump-
tion, namely that every olog C is equipped with a functor I ∶C Ð→Set, and that this functor
somehow controls the meaning of the olog. Such a set-valued functor is called an instan-
tiation, a term coming from database theory [17]. The idea is that I represents a kind of
database of examples, or instances, for the various types, aspects, and facts in the olog. For
example, if an author is writing an olog C describing a familiar real-world situation, then
for a type c (e.g., c = cat) the set I(c) represents all the examples of c (all cats) known by
the author. Somewhat strangely, however, there is no requirement in [16] that the database
functor I should in any way correspond to the linguistic structure on the olog. A similar
issue exists for functors between ologs in [16].
In this paper, we remedy these issues. First, we allow ologs to exist without being instanti-
ated; that is we disentangle ologs and their instantiations. This way, the set of documented
examples can evolve over time, without changing the olog to which they refer. On the
other hand, we add a constraint to instantiations: for a set-valued functor to count as an in-
stantiation of an olog C, it must conform to the linguistic structure, the labelings, on C. The
same goes for mappings between ologs: in order for a functor to count as a mapping be-
tween ologs, it must conform to the linguistic structures involved. We also take more care
to explain the relationship between an olog and its authors. We introduce the concept of
endorsement: an author can endorse that a certain concept or relationship between concepts
makes sense, that a certain fact is true, etc.
Here is an expert-level view of this paper. There is a bicategory Eng that denotes the English
language as it divides into noun phrases, which indicate sets, and verb phrases, which
indicate functions, where all of this “indicating” is decided solely by speakers. Given that
such a bicategory Eng exists, an olog is just a small category C and a lax functor L∶C Ð→Eng,
called a linguistic structure on C. Allowing the base category to vary, we get a ﬁbration
3

Olog Ð→Cat, where Olog denotes the category of ologs and Cat is the category of small
categories. Instantiated ologs are deﬁned similarly: there is a bicategory InstEng ⊆Eng×Set
in which the noun phrase associated to each object is exempliﬁed by a set, and each verb
phrase associated to a morphism is exempliﬁed by a function. An instantiated olog is a lax
functor C Ð→InstEng, and we again have a ﬁbration InstOlog Ð→Cat. All of this will be
explained in the main sections of the paper.
This paper is organized as follows: In § 2 we introduce the bicategory Eng of English lan-
guage. We present the notion of author endorsement for noun phrases, verb phrases and
equivalence between sentences, along with a list of linguistic guidelines needed to design
any olog within Eng. § 3 introduces the category Olog of ologs, as well as the category
InstOlog of instantiated ologs, by deﬁning mappings between ologs and between instanti-
ated ologs. To do so, we introduce the notion of linguistic functors and instantiated functors,
as mentioned above. The latter of these is an adaptation of the “meaningful functor” notion
deﬁned in [16].
Most of the assertions on the bicategory Eng have a linguistic element and so are not purely
mathematical. However, with the help of several linguistic postulates (mainly found in
§ 2.2), fairly formal proofs are possible. Once Eng is given, the rest is straightforward
category theory, thus giving to the theory of ologs a more solid theoretical basis. As the
paper is mainly written for a non-mathematical audience, all proofs are given as prose
arguments, merged with the text.
Background and Notation
We will assume the reader is familiar with some basic concepts from category theory, such
as opposite categories, isomorphisms, functors, and natural transformations. Readers without
category-theoretic background may still beneﬁt from reading the less categorical deﬁni-
tions and results, skimming the category theory, and trying to digest the examples. The
books [1, 18] are good sources for category theory, with many illustrations. No previous
knowledge on bicategories, lax functors and lax transformations is needed; everything we
say about these topics will be spelled out in concrete terms, but interested readers can check
the book [14, Chapter 1] as an excellent source for a brief review on this matter.
The word “category” will always mean a small category unless otherwise stated, i.e., the
collections of objects and morphisms (also called arrows) are sets. Given a category C, we
will denote the sets of objects and morphisms of C by Ob(C) and Mor(C), respectively.
For every two objects c,c′ ∈Ob(C), we will denote the set of morphisms from c to c′ by
HomC(c,c′). The composition of two morphism f1∶c →c′ and f2∶c′ →c′′ will be denoted
using the semicolon symbol “;”, e.g., by f1;f2∶c →c′′. Our reason to use this notation is
4

to make the composition on morphisms in C parallel to the concatenation of sentences (see
Deﬁnition 2.1.6) in any olog set on C. We denote the (large) category of sets, functions, and
function composition by Set.
2
English language as a bicategory
One of the goals of this paper is to formalize the deﬁnition of olog. As we mentioned in the
introduction, the idea is to deﬁne an olog as a category C together with a lax functor from
C to a particular bicategory Eng, which encodes how English speakers understand their
language. Details about bicategories, lax functors, and lax transformations will be given in
the context of ologs, through the constructions of Eng, linguistic structures, and linguistic
functors, respectively.
We begin this section presenting the notions of noun phrase, verb phrase, and equivalence
of sentences in § 2.1. These, along with the notion of author endorsement are going to
be principle components deﬁning the bicategory Eng, presented in § 2.3. As ologs are
straddling the world of categories and linguistics, we must explain what it means for the
labels on objects and morphisms to correspond to valid sets and functions. This concept
of endorsement should satisfy certain guidelines, which we will present as (linguistic) pos-
tulates. After assuming these postulates, we will be able in § 2.3 to regard the English
language as a bicategory Eng, whose collections of 0-cells, 1-cells, and 2-cells formalize the
concepts of types, aspects, and facts (respectively) that deﬁne an olog in the spirit of [20].
We formalize ologs as lax functors from small categories to Eng (see Deﬁnition 3.1.1).
In § 2.4 we will equip each type in Eng with a set of instances, i.e., an author-speciﬁed set
of examples corresponding to the linguistic label. Doing so, we obtain another bicategory,
denoted InstEng, and following the same plan as above, we deﬁne instantiated ologs later
in Deﬁnition 3.3.3.
2.1
Nouns, verbs, and functional sentences
When we speak of a noun phrase, we refer to what is more formally called a singular indef-
inite noun phrase, such as “a person”. If N is a symbol representing this noun phrase, we
write ⟨⟨N⟩⟩=“a person”; we call ⟨⟨N⟩⟩the reading of N (and say that N is read ⟨⟨N⟩⟩). We
use similar notation for verb phrases. For us, a verb phrase V is that which connects one
(singular indeﬁnite) noun phrase, often called the subject, to another, often called the object.
If ⟨⟨V⟩⟩=“is” and ⟨⟨N ′⟩⟩=“a mammal”, then we denote the concatenated string, “a person is
a mammal” by ⟨⟨N⟩⟩⟨⟨V⟩⟩⟨⟨N ′⟩⟩or simply by ⟨⟨NVN ′⟩⟩.
5

Deﬁnition 2.1.1 A noun phrase is formed by the indeﬁnite article a/an followed by an
English noun which refers to a set-like concept, i.e., a concept for which an author can
record a set of examples.
⧫
Example 2.1.2 The noun phrase ⌈a shirt⌉1 refers to the set of shirts, i.e., things that can be
called “a shirt”. Similarly, the noun phrase ⌈a prime number less than 10⌉refers to the set
{2,3,5,7}.
⧫
In order to clarify the semantics, we impose a certain rule on our verb phrases: they must
refer to functions, in the sense of set theory (see [20]).
Deﬁnition 2.1.3 Given two noun phrases N1 and N2 and a verb phrase V, one says that V
functionally connects N1 to N2 if the concatenation ⟨⟨N1VN2⟩⟩is an English sentence that
refers to a mathematical function. In this case one says that Σ = (N1,V,N2) is a functional
sentence.
⧫
For example, given two noun phrases ⌈a person⌉and ⌈a woman⌉, the arrow
a person
a woman
has as mother
can be read as a sentence, “a person has as mother a woman”. This sentence expresses
that for anything that could be called “a person” there is something it “has as mother”
that can itself be called “a woman”. This seems true, but more important for us, it seems
to represent a function: each person has only one mother. A reader who understands
these concepts probably has an example of a person (namely himself) and the woman that
corresponds to the mother he has. Thus the arrow text is a verb phrase that functionally
connects ⌈a person⌉and ⌈a mother⌉in the sense of Deﬁnition 2.1.3.
We can contrast the above situation with the following:
a woman
a canine
has as dog?
Because not every woman has a dog, and some women have two dogs, the arrow text is a
verb phrase that does not correspond to a function; i.e., it does not functionally connect its
source and target noun phrases.
We next consider the notion of equivalent verb phrases, by which we mean verb phrases
1As in [20, §2.1], we write ⌈a shirt⌉instead of a shirt , because some typographical problems emerge when writ-
ing a text-box in a line of text. Note that the text-box seems out of place in this paragraph, and so many in-line
text-boxes are troublesome for the aesthetic of this paper.
6

that indicate the same functional relationship. For example, if I say “An integer has as
successor an integer”, and you say “An integer yields, by adding 1, an integer”, we are
saying the same thing using different verbs.
Deﬁnition 2.1.4 Two sentences Σ = (N1,V,N2) and Σ′ = (N1,V′,N2) are said to be equiv-
alent, denoted Σ ≃Σ′, if they refer to the same functional relationship. If Σ ≃Σ′, then their
verb phrases are equivalent as well, and we denote V ≃V′.
Graphically, we will draw a checkmark ✓between the two sentences Σ and Σ′ if they—and
hence their verb phrases V,V′—are equivalent, as shown in the following ﬁgure.
N1
✓
N2
V
V′
Figure 1: Equivalence between V and V′.
As in [18, §2.3.3.4], an equivalence Σ ≃Σ′ can be given the following English-language
interpretation (where x,y1, and y2 are just symbols, to be copied verbatim):
For any ⟨⟨N1⟩⟩x, we know that x ⟨⟨VN2⟩⟩, that we call y1, and we know that x
⟨⟨V′N2⟩⟩, that we call y2; and the fact is, y1 and y2 are the same for any x.
Figure 2: How equivalences are interpreted as English.
⧫
Example 2.1.5 We explain how to use the syntax formula in Figure 2 to show that the
following two sentences are equivalent:
an integer
✓
an integer
has as successor
yields, by adding 1,
The equivalence Σ ≃Σ′ is read as follows:
For any integer x, we know that x has as successor an integer, that we call y1,
and we know that x yields by adding 1 an integer, that we call y2; and the fact
is, y1 and y2 are the same for any x.
We can agree that the previous statement is valid, since y1 = x + 1 = y2, by the deﬁnition of
successor, and thus Σ ≃Σ′.
⧫
7

Deﬁnition 2.1.6 Let Σ1 = (N1,V1,N2) and Σ2 = (N ′
2,V2,N3) be two sentences. If N2 = N ′
2,
we say that Σ1 and Σ2 are concatenatable. Let V1;V2 represent the verb phrase
⟨⟨V1;V2⟩⟩∶= ⟨⟨V1N2⟩⟩“which”⟨⟨V2⟩⟩.
We deﬁne the concatenation of Σ1 and Σ2, denoted Σ1;Σ2, to be the sentence
Σ1;Σ2 ∶= (N1,V1;V2,N3).
⧫
Example 2.1.7 Consider the diagram below:
N1
pan amino acidh
has
/
N2
pan amine grouph
includes /
N3
pa nitrogen atomh
If ⟨⟨V1⟩⟩= “has” and ⟨⟨V2⟩⟩= “includes”, then the sentences Σ1 = (N1,V1,N2) and Σ2 =
(N2,V2,N3) are concatenatable. Their concatenation is read
⟨⟨Σ1;Σ2⟩⟩= “an amino acid has an amine group, which includes a nitrogen atom”.
(2)
⧫
Example 2.1.8 In this example, we combine the concepts of equivalence and concatena-
tion of sentences. The following diagram represents an equivalence between sentences, as
indicated by the checkmark symbol ✓:
a person
an address
a city
lives at
lives in
includes
✓
First, note that the concatenation of the top and right arrows yields the sentence “a person
lives at an address, which includes a city”, and the diagonal arrow is read “a person lives
in a city”. According to Figure 2, the equivalence between these two sentences is read as
the assertion
For any person x, we know that x lives at an address which includes a city y1,
and we know that x lives in a city y2; and the fact is, y1 and y2 are the same for
any x.
Contrast that fact to the following diagram:
8

a person
a city
pan addressh
a house number
lives in
lives at
has its most
afﬂuent residence at
includes
(3)
which does not represent a valid equivalence (note the absence of the checkmark symbol ✓).
In this case, the assertion indicating the equivalence between the two involved sentences
would be read
For any person x, we know that x lives in a city, which has its most afﬂuent
residence at a house number y1, and we know that x lives at an address, which
includes a house number y2; and the fact is, y1 and y2 are the same for any x.
This assertion is quite dubious, because there seem to be many city-dwellers whose house
numbers are different from that of the most afﬂuent resident in their city. Hence, we as
authors cannot endorse (3) as an equivalence.
⧫
Deﬁnition 2.1.9 We say that a symbol L is a linguistic expression if it represents a noun
phrase, a verb phrase, a sentence, or an equivalence between sentences.
⧫
2.2
Some postulates about endorsement
In this section, we introduce the notion of author endorsement. This is the cultural aspect of
the English (or any) language: noun phrases and verb phrases do not inherently represent
sets and functions. The relationship between words and their meaning is, to some extent,
author dependent.
After deﬁning endorsement, we provide some postulates about it. These postulates are
what allows us to represent the English language as a bicategory Eng in § 2.3, which is the
main ingredient in our formal deﬁnition of ologs.
The following deﬁnition cannot, by its nature, be made mathematically rigorous. Indeed,
it asks the reader to grant that there are things called people, and that people can evaluate
whether verbs refer to functions, etc.
Deﬁnition 2.2.1 Let s be a person who understands Deﬁnitions 2.1.1, 2.1.3, and 2.1.4.
9

(a) If N is a noun phrase, we will say that s endorses N, denoted s ⊧N, if ⟨⟨N⟩⟩refers
to a distinction made and recognizable by s, i.e., if s agrees that N is a set-like noun
phrase, in the sense of Deﬁnition 2.1.1, and can imagine example elements of it.
(b) Suppose that Σ = (N1,V,N2) is a sentence and that s ⊧N1 and s ⊧N2. We say that s
endorses V, denoted s ⊧V, if s is willing to declare that V is functional, in the sense of
Deﬁnition 2.1.3, and understands how examples of N1 correspond via V to examples
of N2. In this case we also write s ⊧Σ.
(c) If Σ = (N1,V,N2) and Σ′ = (N1,V′,N2) are two sentences such that s ⊧Σ and s ⊧Σ′,
then we say that s endorses Σ ≃Σ′, denoted s ⊧[Σ ≃Σ′], if s is willing to declare that
Σ ≃Σ′ is an equivalence in the sense of Deﬁnition 2.1.4 and that the correspondences
V and V′ act identically on examples of N1, as in (b).
By an author set S we mean a set of people in which each member is able to decide whether
or not a linguistic expression (see Deﬁnition 2.1.9) is valid in the sense of (a), (b), (c) above.
If S is an author set and L is a linguistic expression, we say that S endorses L, denoted
S ⊧L, if s ⊧L for every s ∈S.
⧫
Example 2.2.2 A reader may not be able to endorse the sentences Σ1 and Σ2 of Exam-
ple 2.1.7 as functional, whereas others would endorse them. That is, some may not know
whether every amino acid always contains exactly one amine group or whether every
amine group contains exactly one nitrogen atom. But given that an author s endorses
them (and we should mention that Σ1 and Σ2 are broadly endorsed), Postulate 2.2.3 below
says that s must also endorse their concatenation Σ1;Σ2.
⧫
Recall that a postulate is an idea suggested or assumed as true as the basis for reasoning,
discussion, or belief. We make a few linguistic postulates throughout this section and § 2.4,
starting with the next one.
Linguistic postulate 2.2.3 Let Σ1 and Σ2 be two concatenatable sentences as in Deﬁni-
tion 2.1.6. If s endorses both sentences s ⊧Σ1 and s ⊧Σ2, then we will assume that s
endorses their concatenation, s ⊧Σ1;Σ2.
⧫
The following postulate says that every olog author must endorse sentences like “a bottle
is of course a bottle” as functional. We will later postulate (in 2.4.3) that such sentences
correspond to identity functions on sets, in what we call instantiated English.
Linguistic postulate 2.2.4 We will assume that there is a unique verb phrase e, read ⟨⟨e⟩⟩=
“is of course”, such that if N is a noun phrase and s is an author with s ⊧N, then s ⊧
(N,e,N). We call e the unit verb phrase.
⧫
The following postulate says that the unit verb phrase introduced above is unital with
10

respect to the string concatenation deﬁned in Deﬁnition 2.1.6.
Linguistic postulate 2.2.5 Let e be the unit verb phrase as in Postulate 2.2.4. For every
sentence Σ = (N1,V,N2) and any author s, if s ⊧Σ then
s ⊧[Σ;(N2,e,N2) ≃Σ]
and
s ⊧[(N1,e,N1);Σ ≃Σ].
⧫
Remark 2.2.6 Associativity of concatenation is always endorsed by any author endorsing
the sentences involved, but this does not require a postulate. It follows from the associativ-
ity of string concatenation.
⧫
2.3
The bicategory Eng of English expressions
In this section we explain how to combine the notions of noun phrase, verb phrase, equiv-
alence, and endorsement to construct a bicategory based on the English language.
Recall from Deﬁnition 2.2.1 the notion of endorsement (denoted by the symbol ⊧) for noun
phrases, verb phrases, and equivalence between sentences. Recall also that by an author,
we mean a person who understands Deﬁnitions 2.1.1, 2.1.3, and 2.1.4; an author set is a set
of authors.
Deﬁnition 2.3.1
(a) A type N = (N,T ) consists of a noun phrase N (see Deﬁnition 2.1.1) and an author
set T such that T ⊧N. The author set may be denoted Auth(N) ∶= T .
(b) Given two types N1 and N2, an aspect from N1 to N2, denoted V ∶N1 →N2, consists
of a pair V = (V,A), where V is a verb phrase functionally connecting N1 to N2 in the
sense of Deﬁnition 2.1.3, where A is an author set such that A ⊆Auth(N1)∩Auth(N2),
and where A ⊧V . The author set may be denoted Auth(V ) ∶= A.
(c) Given two types N1 and N2, and two aspects V1,V2 ∶N1 →N2, a fact from V1 to
V2, denoted V1 ⇒V2, is given by an author set F ⊆Auth(V1) ∩Auth(V2) and an
endorsement F ⊧[V1 ≃V2], in the sense of Deﬁnition 2.1.4. We allow an abuse of
notation and write F ∶V1 ⇒V2.2
⧫
We will soon show (see Proposition 2.3.5) that (a), (b), and (c) above deﬁne the collection
of 0-cells, 1-cells and 2-cells of a bicategory, which we denote Eng. Roughly speaking, we
need to deﬁne two operations on 1-cells and 2-cells, usually called horizontal and vertical
compositions, satisfying certain properties and coherence conditions.
2Notice that we use “✓” only to denote equivalence between sentences, and the double arrow “⇒” to denote
2-cells in Eng, which are formed by an equivalence between sentences and an endorsing author set.
11

Most of the work is dealing with author sets, a consideration with which many readers
need not be overly concerned. The main idea, which one should really know in order to
proceed, is that ordinary (“horizontal”) composition in Eng involves the concatenation of
sentences, from Deﬁnition 2.1.6. On a ﬁrst reading, one may skip to § 2.4. On a more careful
reading, on the other hand, a good way to understand this point in a more formal way, is
to study ﬁrst the collection of all noun phrases and verb phrases endorsed by a single
author s, which will form a category Engs. In that particular context, author endorsement
becomes straightforward, allowing us to treat the composition of morphisms in Engs as
a mere concatenation of sentences. We provide the details about this in the next section.
Once we have deﬁned Engs, we will focus on proving Proposition 2.3.5.
The category of English expressions endorsed by a single author
Proposition 2.3.2 Let s be an author. There is a category Engs with the following collection
of objects and morphisms:
(a) Ob(Engs) is the set of types in Eng which have the form N = (N,s), i.e., s ⊧N.
(b) Mor(Engs) is the set of aspects in Eng which have the form V = (V,s), i.e., s ⊧V.
⧫
Proposition 2.3.2 is basically a consequence of some of the linguistic postulates in § 2.2.
First, given two composable morphisms V1 ∶N1 →N2 and V2 ∶N2 →N3, the composition of
V1 and V2 in Engs is given by the concatenated verb phrase V1;V2, which is endorsed by s
by Postulate 2.2.3, and which is associative by Remark 2.2.6. Finally, for every object N in
Engs, one has that s endorses the sentence (N,e,N) by Postulate 2.2.4, because s ⊧N. The
morphisms of the form (e,s)∶N →N, which we denote by idN, are the identity morphisms
in Engs by Postulate 2.2.5.
One interesting property about Engs is that the equivalence between sentences is a congru-
ence relation ≃s on Engs, meaning it satisﬁes the conditions of Proposition 2.3.3. For every
N,N ′ ∈Ob(Engs) and every V,V ′ ∈HomEngs(N,N ′), we write
V ≃N,N ′
s
V ′
if s ⊧[V ≃V ′]. The following result provides the necessary theoretical framework to deﬁne
the horizontal composition of aspects and the vertical composition of facts in the bicategory
structure of Eng.
Proposition 2.3.3 For every author s, the relation ≃s satisﬁes the following properties:
• For every N,N ′ ∈Ob(Engs), the relation ≃N,N ′
s
is an equivalence relation on the
homset HomEngs(N,N ′). That is, for any aspects V,V ′,V ′′ ∈HomEngs(N,N ′)
12

(a) ≃N,N ′
s
is reﬂexive: V ≃N,N ′
s
V .
(b) ≃N,N ′
s
is symmetric: V ≃N,N ′
s
V ′ if, and only if, V ′ ≃N,N ′
s
V ′.
(c) ≃N,N ′
s
is transitive: if V ≃N,N ′
s
V ′ and V ′ ≃N,N ′
s
V ′′, then V ≃N,N ′
s
V ′′.
• The collection ≃s of equivalence relations ≃N,N ′
s
deﬁnes a congruence on Engs:
(d) For every N,N ′,N ′′, if V1 ≃N,N ′
s
V ′
1 and V2 ≃N ′,N ′′
s
V ′
2, then V1;V2 ≃N,N ′′
s
V ′
1;V ′
2.
N
✓
N ′
✓
N ′′
V1
V′
1
V2
V′
2
⧫
Remark 2.3.4 Although Propositions 2.3.2 and 2.3.3 are stated in terms of a single author
s, they are also valid for any ﬁxed author set S.
⧫
Proof that ≃s is a congruence relation on Engs [technical]
Proposition 2.3.3 is a consequence of the linguistic postulates of § 2.2. For (a), if V ∶N →N ′
is an aspect such that s endorses V as functional, then the syntax formula in Figure 2 is
true:
For any ⟨⟨N⟩⟩x, we know that x ⟨⟨VN ′⟩⟩, that we call y1, and we know that x
⟨⟨VN ′⟩⟩, that we call y2; and the fact is, y1 and y2 are the same for any x.
Note that the functionality of V implies that y1 = y2. Condition (b), on the other hand,
follows directly by applying the same syntax formula, since “=” is a symmetric relation.
Condition (c) follows similarly.
Condition (d) is more delicate to check. Suppose we are given aspects V1,V ′
1 ∶N →N ′ and
V2,V ′
2 ∶N ′ →N ′′ such that s ⊧[V1 ≃V ′
1] and s ⊧[V2 ≃V ′
2]. Let x be any ⟨⟨N⟩⟩. Then then
following statement is true:
We know that x⟨⟨V1N ′⟩⟩, that we call y1, and we know that x⟨⟨V ′
1N ′⟩⟩, that we
call y2; and the fact is, y1 and y2 are the same.
Set y = y1 = y2. Since s ⊧[V2 ≃V ′
2], we have that the following statement is true for y:
We know that y⟨⟨V2N ′′⟩⟩, that we call z1, and we know that y⟨⟨V ′
2N ′′⟩⟩, that we
call z2; and the fact is, z1 and z2 are the same.
13

Now, consider the following statement
We know that for any ⟨⟨N⟩⟩x, we know that x⟨⟨V1N ′⟩⟩, which ⟨⟨V2N ′′⟩⟩, that we
call w1, and we know that x⟨⟨V′
1N ′⟩⟩, which ⟨⟨V′
2N ′′⟩⟩, that we call w2; and the
fact is, w1 and w2 are the same.
Since s ⊧V1;V2 and s ⊧V′
1;V′
2 by Postulate 2.2.3, we have that w1 = z1 and w2 = z2. On the
other hand, we know that z1 = z2. It follows that the previous statement is true, and hence
s ⊧[V1;V2 ≃V′
1;V′
2].
Structure of Eng as a bicategory [technical]
Denote by Ob(Eng) the collection of types in Eng. In order to see that (a), (b) and (c) from
Deﬁnition 2.3.1 deﬁne a bicategory Eng, the ﬁrst thing we need to know is that for each
pair of types N1,N2 ∈Ob(Eng), there is a category Eng(N1,N2), whose objects are given by
aspects V ∶N1 →N2 (i.e., our 1-cells), and whose morphisms between aspects V1,V2 ∶N1 →
N2 (i.e., our 2-cells) are given by the facts F ∶V1 ⇒V2.
N1
⇓F
N2
V1
V2
Figure 3: 2-cells in Eng.
The composition of facts in Eng(N1,N2) is called vertical composition: given two facts
F1 ∶V1 ⇒V2 and F2 ∶V2 ⇒V3, the composition is given by intersecting author sets:
F2 ○F1 ∶= F1 ∩F2 ⊧[V1 ≃V3].
(4)
This composition deﬁnes a fact by Proposition 2.3.3 (c), and is associative since the inter-
section of sets is. Now, for every aspect V ∶N1 →N2 there is a unique identity fact at V ,
given by the endorsement Auth(V ) ⊧[(N1,V,N2) ≃(N1,V,N2)] (see Proposition 2.3.3 (a)).
It follows by deﬁnition that these facts, that we denote idV , are unital with respect to the
previous composition. Therefore, Eng(N1,N2) deﬁnes a category.
To deﬁne horizontal composition we will need to supply, for every N1,N2,N3 ∈Ob(Eng),
a functor
Eng(N1,N2) × Eng(N2,N3) Ð→Eng(N1,N3).
14

We will denote it by
(V,V ′) ↦V ;V ′ on aspects,
(F,F ′) ↦F ●F ′ on facts.
Horizontal composition of aspects V = (V,Auth(V )) works by intersecting author sets and
concatenating verb phrases, as in Deﬁnition 2.1.6, i.e.,
V ;V ′ = ((V;V′),Auth(V ) ∩Auth(V ))
(5)
Let Auth(V ;V ′) ∶= Auth(V ) ∩Auth(V ′).
Vertical composition of facts is given as follows. If we are given F ∶V1 ⇒V2 and F ′∶V ′
1 ⇒
V ′
2, deﬁne a fact F ●F ′∶V1;V ′
1 ⇒V2;V ′
2 to be the endorsed equivalence
F ∩F ′ ⊧[(V1;V2) ≃(V′
1;V′
2)]
(6)
(see Proposition 2.3.3 (d)). Note that this composition is associative at the level of aspects
(see Remark 2.2.6). Moreover, for each type N ∈Ob(Eng), there is an identity aspect idN
in Eng(N,N) given by the verb phrase e, as in Postulate 2.2.4, and endorsed by Auth(N).
Note that idN is unital with respect to the horizontal composition at the level of aspects. At
the level of facts, we can check that for each aspect V ∶N1 →N2, there are isomorphisms
V ;idN2 ⇒V and idN1;V ⇒V,
since the equivalences [V;e] ≃V and [e;V] ≃V are endorsed by Auth(V ) ∩Auth(N2) =
Auth(V ) and Auth(V ) ∩Auth(N1) = Auth(V ) by Postulate 2.2.5.
Finally, according to [14, Deﬁnitions 1.2.5 & 1.5.1], it is only remains to verify that the
previous associativity and unital isomorphisms satisfy the pentagon and triangle axioms
(coherence conditions) to conclude that Eng is a bicategory, but this is a straightforward con-
sequence of the previous constructions. Summarizing, we have proved Proposition 2.3.5.
Proposition 2.3.5 The collection Eng of all types, aspects, and facts as in Deﬁnition 2.3.1,
equipped with the vertical and horizontal compositions given by (4), (5), and (6), forms a
bicategory.
⧫
Remark 2.3.6 Let V1 ⇒V2 be a 2-cell in Eng, i.e., a fact. The direction “⇒” is determined
by the way the equivalence V1 ≃V2 is read according to Figure 2, i.e., we read the statement
involving “⟨⟨V1⟩⟩” ﬁrst. Note by the symmetry of the relation ≃(see Proposition 2.3.3), that
if V1 ⇒V2 is a fact with author set F, then so is V2 ⇒V1.
⧫
15

2.4
The bicategory InstEng of instantiated English expressions
In this section we add to Eng some additional structure by exemplifying each linguistic
expression in it. That is, we bundle each type N with a set of examples, or as we call
them, tokens,3 where the tokens must match the noun phrase ⟨⟨N⟩⟩. Thus, we obtain a new
bicategory InstEng of instantiated English expressions, as shown in Proposition 2.4.5. Its
0-cells, 1-cells and 2-cells will be described in Deﬁnition 2.4.4. The bicategory InstEng will
provide the necessary theoretical framework to present the concept of instantiated olog.
Just as for linguistic expressions, we need some postulates about author endorsement to
govern the behavior of tokens with respect to noun phrases and verb phrases. For exam-
ple, if you understand the noun phrase ⌈a US president⌉, then you probably endorse that
Abraham Lincoln is an example, or token, of the corresponding set.
Recall the notion of endorsement for noun phrases and functional verb phrases from Deﬁ-
nition 2.2.1.
Deﬁnition 2.4.1
(a) Let N be a noun phrase. One says that x is a token of N if x is an example to which
the noun phrase ⟨⟨N⟩⟩applies, i.e., if the following sentence is true:
N(x) ∶= x “is” ⟨⟨N⟩⟩.
(7)
If s is an endorsing author s ⊧N and x is a token of N according to s, we say that s
endorses x as a token of N; this will be denoted by s ⊧(x ∶N).
(b) Let (N1,V,N2) be a sentence, and let x and y be tokens of N1 and N2, respectively.
One says that x corresponds to y via V if the following sentence, denoted V(x,y), is
true:
V(x,y) ∶= x “is” ⟨⟨N1⟩⟩“which” ⟨⟨VN2⟩⟩, “namely” y.
(8)
If s is endorsing author s ⊧(N1,V,N2),s ⊧(x ∶N1),s ⊧(y ∶N2), and if x corresponds
to y via V according to s, then we say that s endorses the correspondence V(x,y)
between x and y; this will be denoted by s ⊧V(x,y).
If S is an author set, we say that S endorses either a token S ⊧(x ∶N) or a correspondence
between tokens S ⊧V(x,y), if every member of s endorses it, i.e., s ⊧(x ∶N) or s ⊧V(x,y)
for every s ∈S.
⧫
3The motivation behind the term “token” comes from the usual usage in philosophy, e.g., [21]. Tokens are real-
world examples and instances of abstract types. In this paper the word “example” has a wider connotation,
while the term “instance” will be reserved for Deﬁnition 3.3.3.
16

Example 2.4.2 Consider the following sentence, which we endorse as functional:
P
pa US presidenth
can, using the usual chronological
ordering of presidents, be assigned
ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ→
I
pan integerh
We endorse that Abraham Lincoln is a token of P, that 16 is a token of I, and that they
correspond via the verb phrase labeling the arrow. That is, we agree that: “Abraham Lin-
coln is a US president which can, using the usual chronological ordering of presidents, be
assigned an integer, namely 16.”
⧫
We now postulate that the correspondence (8) is functional, and that the unit verb phrase
and composition of verb phrases act like the identity function and function composition
for instances, respectively.
Linguistic postulate 2.4.3 Let s be a person who understands Deﬁnition 2.4.1.
(a) Suppose given an endorsement s ⊧(N1,V,N2). Then for every token x of N1 such
that s ⊧(x ∶N1), there exists a unique token y of N2 such that s ⊧V(x,y).
(b) Suppose given endorsements for concatenatable sentences, s ⊧(N1,V1,N2) and s ⊧
(N2,V2,N3). Note that s ⊧(N1,V1;V2,N3) by Postulate 2.2.3. Suppose also that s
endorses tokens s ⊧(x ∶N1),(y ∶N2),(z ∶N3) and correspondences s ⊧V1(x,y) and
s ⊧V2(y,z). Then we will assume that s ⊧(V1;V2)(x,z).
(c) Suppose given an endorsement s ⊧(x ∶N) for some noun phrase N. Then we will
assume that s ⊧e(x,x), with e as the unit verb phrase deﬁned in Postulate 2.2.4.
⧫
Recall the deﬁnitions of types, aspects, and facts from Deﬁnition 2.3.1, and the notion of
tokens and their correspondences from Deﬁnition 2.4.1.
Deﬁnition 2.4.4
(a) An instantiated type is a pair N = (N,T), where N is a type with noun phrase N and
T is a set such that for every x ∈T, we have an endorsement
Auth(N) ⊧(x ∶N)
that x is a token of N. We may write T(N) ∶= T and refer to it the token set of N.
(b) Suppose given two instantiated types N 1 and N 2. An instantiated aspect from N1
to N 2, denoted V ∶N 1 →N 2, consists of a pair (V,f), where V ∶N1 →N2 is an aspect,
and f is a function f ∶T(N 1) →T(N 2), such that for every token x ∈T(N 1), there is
an endorsement
Auth(V ) ⊧V(x,f(x)),
17

where V is the verb phrase of V . We may write T(V ) ∶= f and refer to it as the token
function of V .
(c) Suppose given two instantiated aspects V 1,V 2 ∶N1 →N 2 with equal token functions,
T(V 1) = T(V 2). An instantiated fact from V 1 to V 2, denoted F ∶V 1 ⇒V 2, consists
of a fact F = F, where
F ⊧[V1 ≃V2]
is a fact in Eng.
⧫
As in § 2.3, one can prove that the collections of instantiated types, aspects and facts in
Deﬁnition 2.4.4 form a bicategory InstEng ⊆Eng × Set. We do not give many details on
this, since the proof proceeds as it did with Eng in the previous section. However, we will
specify how vertical and horizontal compositions are deﬁned. On a ﬁrst reading, one may
skip to Proposition 2.4.5.
Structure of the bicategory InstEng [technical]
Denote by Ob(InstEng) the collection of instantiated types, as in Deﬁnition 2.4.4. For each
pair N 1,N 2 ∈Ob(InstEng), there is a category InstEng(N1,N 2) whose objects (i.e., 1-cells in
InstEng) are given by instantiated aspects V ∶N 1 →N2, and whose morphisms (i.e., 2-cells
in InstEng) V 1 ⇒V 2 are given by:
HomInstEng(N 1,N 2)(V 1,V 2) ∶=
⎧⎪⎪⎨⎪⎪⎩
HomEng(N1,N2)(V1,V2)
if T(V 1) = T(V 2),
∅
otherwise.
By the previous formula it follows that the vertical composition in InstEng is just the verti-
cal composition in Eng, and identities are also straightforward.
For every triple N 1,N 2,N 3 ∈Ob(InstEng), there is a horizontal composition functor
InstEng(N 1,N 2) × InstEng(N2,N 3) →InstEng(N1,N 3),
denoted V 1;V 2 for every V 1 ∈Ob(InstEng(N1,N 2)) and V 2 ∈Ob(InstEng(N 2,N 3)), acting
on instantiated aspects according to the intersection of sets, concatenation of verb phrases,
and composition of functions.
At the level of instantiated facts, if we are given F ∶V 1 ⇒V 2 and F
′∶V
′
1 ⇒V
′
2, then the
instantiated fact
F ●F
′∶V 1;V 2 ⇒V
′
1;V
′
2,
is given by the endorsed equivalence F ∩F
′ ⊧[V 1;V
′
1 ≃V 2;V
′
2]. Finally, for each instan-
18

tiated type N, there is an identity instantiated aspect idN given by unit the noun phrase e
as in Postulate 2.2.4, endorsed by Auth(N), and by the identity function idT(N)∶T(N) →
T(N), which is unital with respect to the horizontal composition of instantiated aspects.
Note that the previous operations are well deﬁned by Postulate 2.4.3.
Proposition 2.4.5 The collection of all types, aspects, and facts as in Deﬁnition 2.4.4 forms
a bicategory, denoted InstEng.
⧫
As was true with Eng, if we ﬁx a single author s (resp. an author set S), there is a subcate-
gory InstEngs ⊆InstEng of instantiated linguistic expressions endorsed by s (resp. S). There
is no need to consider 2-cells in InstEngs, and composition is given simply by concatenating
verb phrases and composing functions.
The following result is just a matter of checking the conditions in [14, Deﬁnition 1.5.8].
Proposition 2.4.6
(a) The mappings
N ↦N, for every instantiated type N, and
V ↦V, for every instantiated aspect V .
deﬁne an strict functor between bicategories U ∶InstEng Ð→Eng.
(b) The mappings
N ↦T(N), for every instantiated type N, and
V ↦T(V ), for every instantiated aspect V ,
deﬁne an strict functor between bicategories T∶InstEng Ð→Set.
Together, these deﬁne an inclusion (U,T)∶InstEng ↪Eng × Set.
⧫
3
Ologs, instantiated ologs, and mappings between them
We begin this section formalizing the deﬁnition of ologs found in [20], using a new construc-
tion, which we will call a linguistic structure in Deﬁnition 3.1.1. We suggest that readers who
are unfamiliar with ologs consult [16, §1, 2, 3, and 4] or [20, §1, 2, and 3].4
4Note that the later sections of [16], [20] also discuss pullbacks and pushouts within an olog; we do not address
these notions in this paper.
19

In § 3.2, we deﬁne mappings between ologs, called linguistic functors (see Deﬁnition 3.2.1).
These are mappings between categories that preserve the linguistic structure of the ologs.
In Example 3.2.6, we explain this by providing two functors F and G, between the same
two ologs, such that F is linguistic and G fails to be. In § 3.3 we deﬁne an instantiated
olog to be a standard olog equipped with a set of examples that conforms to its linguistic
structure. This formalizes the original notion of olog given in [20]. Finally, in § 3.4 we study
mappings between instantiated ologs, called instantiated functors, which are instantiated
analogues of linguistic functors. In particular, we provide a more linguistic version of the
notion of meaningful functor given in [20]. All of the above is achieved by appealing to our
deﬁnitions of Eng and InstEng from § 2.
3.1
Linguistic structures
Recall that an olog, as deﬁned in [20], is a category whose objects and morphisms are
labeled with noun phrases and verb phrases, respectively, in order to model a conceptual sit-
uation. Commutative diagrams in an olog are called facts5; they are equivalences between
two sentences in the English language. Importantly, these types, aspects, and facts must
follow certain guidelines, to ensure that the category-theoretic meaning is aligned with
the conceptual and linguistic meaning intended by the authors. The Rules of Good Practice
stated in [20, 2.1.2, 2.2.3, and 2.3.4] are such a set of guidelines. An example of these rules is
that the label of each arrow a →b corresponds to a mathematical function [25]. All of these
notions are author-dependent, as we made explicit using the notion of endorsement, as in
Deﬁnition 2.2.1. After our work deﬁning Eng in § 2, formalizing the notion of olog given in
[20] is straightforward.
Deﬁnition 3.1.1 Let C be a category. A linguistic structure on C is a lax functor L∶C Ð→
Eng. An olog is a pair (C,L), where C is a category, and L is a linguistic structure on C.
⧫
The notion of lax functor, found in Deﬁnition 3.1.1, is standard in category theory literature;
see for example [14, Deﬁnition 1.5.8]. However, we will now spell it out explicitly in our
case.
Remark 3.1.2 Let L∶C Ð→Eng be a linguistic structure on C. Then:
(a) Every c ∈Ob(C) is mapped into a type L(c), consisting of a noun phrase L(c) and an
endorsement Auth(L(c)) ⊧L(c).
(b) Every f ∈HomC(c,c′) is mapped into an aspect L(f), consisting of a functional verb
phrase L(f)∶L(c) →L(c′) and an endorsement Auth(L(f)) ⊧L(f).
5Notice that in our proposed deﬁnition of facts, equivalences between sentences must be endorsed by an author
set, and this is not explicitly mentioned in [20].
20

(c) Let a
fÐ→b
gÐ→c be a pair of composable morphisms in C, with h = f;g. Then L being
lax means that there 2-cell F ∶L(h) ⇒L(f);L(g), i.e., a fact,
F ⊧[L(h) ≃L(f);L(g)].
⧫
Example 3.1.3 We run through Deﬁnition 3.1.1 in the case of a category C,
C =
●1
●2
●3
h
f
g
and a linguistic structure L on it, depicted here:
(C,L) =
1
pa personh
2
p a pair (w,m) where w is
a woman and m is a man h
3
pa womanh
has as parents
has as mother
yields as w
⇙
(9)
Each object has been assigned a noun phrase, and each arrow has been assigned a verb
phrase. The two paths from 1 to 3, namely h and the composition of f followed by g, have
been declared equivalent.
We have not yet speciﬁed the author sets for the types, aspects, and facts above. This is
arbitrary, but we specify a full example for completeness. Suppose we say
Auth(1) ∶= {A,B,C},
Auth(2) ∶= {A},
Auth(3) ∶= {A,B}
Then we must have Auth(f) = ∅or Auth(f) = {A} because it must be a subset, Auth(f) ⊆
Auth(1) ∩Auth(2); similarly for Auth(g). Let’s say
Auth(f) = Auth(g) ∶= {A} and Auth(h) = {B}.
Since Auth(f;g) = Auth(f) ∩Auth(g) = {A}, but Auth(h) = {B}, we must have F = ∅.
That is, given our choices, there is no one who is capable of endorsing the equivalence
L(h) ≃L(f);L(g). However, it is still a fact because the diagram commutes in the ground
category C.
⧫
21

3.2
Mappings between ologs
In this section we deﬁne the notion of morphism between ologs, which we call a linguistic
functor, in Deﬁnition 3.2.1. After this, we can deﬁne the category of ologs, denoted Olog.
We then give in Example 3.2.6 two ologs and two functors between them, one of which
makes linguistic sense and the other does not, which recapitulates the issue we presented
in our introductory example (1).
Deﬁnition 3.2.1 Let (C,L) and (D,M) be ologs, as in Deﬁnition 3.1.1. A linguistic func-
tor between them, denoted (F,F #)∶(C,L) Ð→(D,M) consists of a functor F ∶C Ð→D
together with a lax transformation F # ∶L ↝M ○F as shown below:
C
D
F #
↝
Eng
F
L
M
Figure 4: Linguistic functor.
If F # is the identity, in which case L = M ○F, we say that the linguistic structure L is the
pullback of M along F and write L = F ∗(M).
We deﬁne the category of ologs, denoted Olog, to be the category whose objects are ologs
and whose morphisms are linguistic functors (see Remark 3.2.3).
⧫
Remark 3.2.2 The morphism F # includes, for each c ∈Ob(C), an aspect F #
c ∶L(c) ↝
M(Fc), called the c-component of F #, with endorsing author set Auth(F #
c ). And for
every f ∈HomC(c,c′), it includes a fact
L(c)
M(Fc)
F #
f ⇙
L(c′)
M(Fc′)
F #
c
L(f)
M(F f)
F #
c′
(10)
Both the arrows between objects in an olog, denoted →, and the component arrows for
maps between ologs, denoted ↝, are assigned functional verb phrases. Although we use
differently-shaped arrows to denote them, the equivalence in (10) is of the usual kind, as
in Deﬁnition 2.1.4.
⧫
22

Remark 3.2.3 There is an evident functor Olog →Cat, sending an olog (C,L) to its under-
lying category C. This is a Grothendieck ﬁbration, meaning that if F ∶B →C is any functor,
there is a notion of cartesian morphism of ologs over F. This is just the pullback along
F, in the sense of Deﬁnition 3.2.1. Grothendieck ﬁbrations also come with a notion of ver-
tical morphisms. These are the linguistic functors that restrict to the identity idC on the
underlying category.
⧫
Example 3.2.4 Consider the following linguistic structures L and M on the same category,
●2 ←Ð ●1 Ð→●3 :
L ∶=
2
pa fatherh
1
pa legitimate childh
phasp
O
phasp

pa motherh
3
M ∶=
2
pa manh
1
pa marriageh
pincludesp
O
pincludesp

pa womanh
3
The phrase “legitimate child” is an old-fashioned term for a child who was born in a mar-
riage, which itself is required to be between a man and a woman. Let S be an author set
who endorses the linguistic expressions in L and M. Suppose these authors also endorse
the following sentences as functional:
“a legitimate child was born in a marriage”
“a father is a man”
“a mother is a woman”.
Technically speaking, they endorse the verb phrases ⟨⟨α1⟩⟩:= “was born in”; ⟨⟨α2⟩⟩:= “is”;
and ⟨⟨α3⟩⟩:= “is” as components αc, for c ∈{1,2,3} = Ob(C), of a lax transformation α∶L ↝
M.
At this point, they have endorsed every object and arrow (both →and ↝) in the diagram
below:
23

2
pa fatherh
2
pa manh
⇖
1
pa legitimate childh
1
pa marriageh
⇙
pa motherh
3
pa womanh
3
has
has
was born in
is
is
includes
includes
Figure 5: Example of a morphism α∶L ↝M between two linguistic structures on C.
The 2-cells are drawn if each author s ∈S also endorses the corresponding equivalences.
For example, a legitimate child has a father who is a man, and a legitimate child was born
in a marriage, which includes a man. The point is, they had better be the same man(!) at
least according to any authors endorsing α.
⧫
Remark 3.2.5 Sometimes it is valuable to compare two linguistic structures L and M on
the same category C, even if one cannot satisfy the somewhat strong conditions of a mor-
phism of linguistic structures. Different ologs on the same underlying category have been
considered before in other ﬁelds, such as biology and materials science [7]. In this case, one
could consider a relaxed version of morphism α∶L ↝M in which the component aspects
αc∶L(c) ↝M(c) were not required to be functional, just “conceptual”, requiring a relaxed
version of Eng. We will not explain how to do this category-theoretically, although it is
possible. Instead, we just give an example to clarify the idea.
Consider the left and right column, each a linguistic structure on the category ●→●.
pa parliamentary
government
h
pa presidential
government
h
⇙
pa prime ministerh
pa presidenth
in a presidential system
corresponds to
has as head
has as head
in a presidential system
corresponds to
We cannot endorse the component maps between them (labeled, “in a presidential sys-
tem corresponds to”) as being functional. However, the diagram still shows a valid anal-
24

ogy between two forms of government. Analogies have been considered from a category-
theoretic perspective before; see [4].
⧫
Example 3.2.6 In this example we will show two ologs (C,L) and (D,M), and two func-
tors F,G∶C Ð→D between their underlying categories. We will ﬁnd that it is straightfor-
ward to put a linguistic structure on F. On the other hand, we will explain why there is
very little chance any author will endorse a linguistic structure on G. This way, we will
explain an example from the introduction, § 1, namely the lack of linguistic structure on
the functor in (1).
Consider the following ologs:
(C,L) ∶=
1
pa manh
2
pan objecth
is
(D,M):=
a
pa womanh
c
pan animalh
b
p
a number
between
20 and 500
h
d
pa numberh
is
has as weight
(in kilograms)
has as weight
(in kilograms)
is
⇙
Let F ∶C Ð→D be the unique functor such that F(1) = c and F(2) = d, and let G∶C Ð→D
be the unique functor such that G(1) = a and G(2) = b. Then the pulled back linguistic
structures F ∗(M) and G∗(M) on C are shown on the left and right below.
(C,F ∗(M)) ∶=
1
pan animalh
2
pa numberh
has as weight
(in kilograms)
F # ?
←ÐÐÐÐ
(C,L) ∶=
1
pa manh
2
pan objecth
is
G# ?
ÐÐÐÐ→
(C,G∗(M)) ∶=
1
pa womanh
2
p
a number
between
20 and 120
h
has as weight
(in kilograms)
(11)
25

In order to extend F and G to linguistic functors, we need lax transformation F # ∶L ↝
M ○F and G# ∶L ↝M ○G, as indicated in (11). We begin by endorsing a certain F #, and
then return to explaining the difﬁculty of ﬁnding G#.
To provide F #, we ﬁrst need two component aspects; we use those labeling the top and
bottom maps here:
2
pa manh
2
pan animalh
⇙
1
pan objecth
1
pa numberh
is
is
has as weight
(in kilograms)
has as weight (in kilograms)
(12)
It just sufﬁces to ask whether, if we measure the weight (in kilograms) of a man, regarding
him either as an object or as an animal, we get the same number. We endorse that fact, thus
providing a linguistic functor (F,F #)∶(C,L) Ð→(D,M).
On the other hand, it is difﬁcult to do the same for G# as in the right side of (11). One
can ﬁnd functional verb phrases connecting ⌈a man⌉to ⌈a woman⌉, for example “has as
mother”. However, it is not straightforward to ﬁnd a functional verb phrase that connects
⌈an object⌉to ⌈a number between 20 and 120⌉making the necessary diagram (analogous to
(12)) an endorsable equivalence between sentences. The reason, roughly, is that once one
has regarded a man as an object, there is no aspect that applies to an arbitrary object which
will correspond with the mother-having aspect of an arbitrary man.
⧫
The upshot of the above example is that linguistic structures give the necessary semantics
to constrain mappings between ologs. This has important applications to databases, as we
will show in Example 3.4.6.
3.3
Instantiated linguistic structures
In this section we study instantiated ologs and mappings between them. These are ologs
for which each type has been assigned a set of examples. The authors of an olog should,
and generally do, know more than just some types and relationships; they should also
have in mind some examples of these types and relationships. For example, someone who
writes an olog about dogs, say including the arrow ⌈a dog⌉
has
Ð→⌈a name⌉, probably knows
26

some examples of dogs and their names. This information can be stored in an instantiation
of the olog, which we will deﬁne in Deﬁnition 3.3.3.
Instantiating an olog—ﬁlling it with conforming data—serves three purposes:
i. It gives users a place to store data about—examples of—their subject of interest.
ii. It validates the olog as a mathematical structure.
iii. It differentiates between different author sets who endorse the same conceptual scheme
(we mean a noun phrase, a sentence, an equivalence between sentences, or an olog).
The ﬁrst of these purposes is probably the most important, but it is also straightforward, so
we brieﬂy explain the other two. Issues of functional connectivity and endorsed facts (see
Deﬁnition 2.1.3 and 2.1.4) rely on the authors’ understanding of mathematical functions
and their compositions. By instantiating an olog, the users validate that understanding.
Another reason to instantiate an olog is to differentiate one group of authors from another,
even if they use the same conceptual scheme. For example, consider the following linguis-
tic structure:
L =
pa personh
pa fatherh
has
(13)
One author set may be interested in the fathers of US politicians (e.g., George W. Bush’s
father is George H. W. Bush), whereas another set may be interested in the fathers of fa-
mous mathematicians (e.g., Emmy Noether’s father is Max Noether). The same linguistic
expressions in an olog can house multiple instantiations.
The mathematical motivation behind instantiations comes from the concept of set-valued
functors C Ð→Set as database instances, introduced by [6] and rediscovered by the second
author in [17]. The same notion was deﬁned for ologs in [20], where it was assumed that
every olog comes equipped with such a functor C Ð→Set. We ﬁnd three problems with
this:
i. An olog can exist before one has recorded the corresponding examples.
ii. The examples should have something to do with the linguistics expressions set in the
olog.
iii. Two authors may endorse the same linguistic expressions in an olog but have differ-
ent examples.
We have commented on iii above, and i is straightforward. We explain ii, which is probably
the most important, in Remark 3.3.1.
27

Remark 3.3.1 In [20], there was no assurance that the functor I ∶C Ð→Set had anything
to do with the linguistic expressions on C. So a type c = ⌈a dog⌉would be mapped to a set,
but there was nothing ensuring that it was a set of dogs. Of course, such a thing cannot be
ensured mathematically, but in Deﬁnition 2.4.1 we did the next best thing, by providing a
sentence for authors to endorse.
⧫
Example 3.3.2 Consider the person-father olog (C,L) from Figure (13), reproduced here:
pa personh
pa fatherh
has
An author s might endorse that George W. Bush is a person, i.e., s ⊧(George W. Bush
: a person), and similarly that George H. W. Bush is a father. Suppose, following (8) that s
also agrees with the sentence:
“George W. Bush is a person, which has a father, namely George H. W. Bush.”
Then s endorses that “has” is a correspondence between George W. Bush as a person and
George H. W. Bush as a father.
⧫
Let U ∶InstEng Ð→Eng and T∶InstEng Ð→Set be the functors from Proposition 2.4.6, and
recall from Proposition 2.4.6 that the induced functor InstEng ↪Eng × Set is an inclusion.
The following deﬁnition is motivated to adapt the notion of instance functor given in [20]
to our concept of linguistic structures.
Deﬁnition 3.3.3 Let C be a category. An instantiated linguistic structure on C is a functor
L∶C →InstEng. An instantiated olog is a pair (C,L), where L is an instantiated linguistic
structure on C.
Given a linguistic structure L∶C Ð→Eng and a set-valued functor I ∶C Ð→Set, we say that
I conforms to L if (L,I) factors through InstEng,
C
Eng × Set
InstEng
(L, I)
L
(U, T)
Figure 6: Functors C Ð→Set conforming linguistic structures.
The lax functor L∶C Ð→InstEng will be sometimes referred as an instantiation of L. We
may refer to L and I (respectively) as the underlying linguistic structure and underlying
instance of L.
⧫
28

It is this notion, that an instance should conform to the linguistic structure, which we ﬁnd
missing in [20]; see Remark 3.3.1.
Remark 3.3.4
If L∶C Ð→InstEng is a lax functor, then we obtain an instantiated linguistic
structure (L,I) on C by setting L ∶= U ○L and I ∶= T ○L; by deﬁnition the instance I
conforms to the linguistic structure L. We therefore do not distinguish between functors
C Ð→InstEng and a pair (L,I) of functors L∶C Ð→Eng and I ∶C Ð→Set, with L lax, such
that I conforms to L.
⧫
Example 3.3.5 Recall again the person-father olog (C,L) from Figure 13, reproduced here:
pa personh
pa fatherh
has
We adopt a tabular description similar to that used in [17], except with column headings
taken from (8). Using it, we can record the data of a functor I ∶C Ð→Set as follows: 6
a person
has a father, namely
George W. Bush
George H. W. Bush
Jeb Bush
George H. W. Bush
Emmy Noether
Max Noether
a father
George H. W. Bush
Max Noether
Bill Clinton
This table then shows three correspondences, associated to the arrow labeled “has”:
• George W. Bush is a person, which has a father, namely George H. W. Bush;
• Jeb Bush is a person, which has a father, namely George H. W. Bush; and
• Emmy Noether is a person, which has a father, namely Max Noether.
An author who endorses the six tokens and three correspondences shown here then also
endorses I as an instantiation of the olog (C,L).
⧫
Remark 3.3.6 The rules of instantiated English, as presented in Deﬁnition 2.4.4, can be un-
derstood in terms of how people should interact with a database, as in [17]. The database
corresponding to an olog would have tables named by noun phrases and columns labeled
by verb phrases. A person should only enter a new row in table N if they understand (en-
dorse) that noun phrase as a set, and thus can evaluate whether something was a member
of it or not. A person should only ﬁll a cell in column V if they understand how it is a
function, and thus can evaluate how the row corresponds to a row in some foreign table.
srsrd
⧫
6For a sentence (N1, V, N2), the instance will ﬁt into a table with ⟨⟨N1⟩⟩as the head of the ﬁrst column and
⟨⟨VN2⟩⟩as the head of the second column.
29

3.4
Instantiated functors
We ﬁnish this section providing a notion of mappings between two instantiated ologs (C,L)
and (D,M) in terms of lax transformations, as in Deﬁnition 3.2.1, by constraining the set
of linguistic functors (C,L) Ð→(D,M) to those that respect the tokens and their corre-
spondences (See Deﬁnition 2.4.1). We will see in Remark 3.4.3 how this concept adapts the
notion of meaningful functor introduced in [16, §4] to the context of linguistic functors.
Deﬁnition 3.4.1 Let (C,L) and (D,M) be instantiated ologs, as in Deﬁnition 3.3.3. An
linguistic functor between them, denoted (F,F ♮)∶(C,L) Ð→(D,M) consists of a functor
F ∶C Ð→D together with a lax transformation F ♮∶L ↝M ○F as shown below:
C
D
F ♮
↝
InstEng
F
L
M
Figure 7: Instantiated functor.
If F ♮is the identity, in which case L = M ○F, we say that the linguistic structure L is the
pullback of M along F and write L = F ∗(M).
We deﬁne the category of instantiated ologs, denoted InstOlog, to be the category whose
objects are instantiated ologs and whose morphisms are instantiated linguistic functors. ⧫
Deﬁnition 3.4.2 Suppose that L,M ∶C Ð→InstEng are instantiated linguistic structures on
C, where L = (L,I) and M = (M,J) are the underlying linguistic structures and conform-
ing instances. If α∶L ↝M is a morphism of linguistic structures, i.e., a lax transformation,
and p∶I ⇒J is a morphism of instances, i.e., a natural transformation,
Eng
C
Set
L
M
α ⇓
I
J
p ⇓
Figure 8: Morphisms α of linguistic structures, and morphisms p of instances.
30

then we say that p conforms to α if the lax transformation (α,p)∶C →Eng × Set factors
through InstEng ↪Eng × Set.
Explicitly, for each object c ∈C, we have a verb phrase αc ∶L(c) ↝M(c) and a function
pc∶I(c) →J(c). We say that p conforms to α if for each c ∈C and token x ∈I(c), each
author s ∈Auth(αc) endorses the correspondence αc(x,pc(x)).
⧫
Remark 3.4.3 In [16], a mapping between ologs is called a meaningful functor; it is given by
a functor F ∶C Ð→D between two ologs C and D, and a natural transformation p∶I ⇒J ○F,
where I ∶C Ð→Set and J ∶D Ð→Set are instances of C and D. One particular issue with this
notion is that there is no guarantee that the data deﬁned by p conforms to the linguistics
deﬁned by F (nor that I and J conform to the linguistic structures on the olog).
Our deﬁnition of instantiated functor remedies these issues. It is not hard to note from
Deﬁnitions 3.4.1 and 3.4.2, along with Proposition 2.4.6, that every instantiated functor
(C,L) Ð→(D,M) is given by a functor F ∶C Ð→D, a lax transformation F ♯∶L ↝M ○F,
and a natural transformation F ♭∶I ⇒J ○F conforming to F ♯, where L = U ○L, M = U ○M,
I = T ○L and J = T ○M as in Remark 3.3.4. This can be understood better with the help of
Example 3.4.6.
⧫
In some situations, it is more natural to consider morphisms between instantiated ologs by
reversing the lax transformations and natural transformations involved. Doing this yields
another category of instantiated ologs, in which all the results obtained so far also hold. We
explain this better in the following remark.
Remark 3.4.4 Suppose we are given an inclusion functor of categories i∶C Ð→D, i.e., C
is a subcategory of D, and that both are underlying categories of instantiated linguistic
structures. Then there should be more people who understand C, and therefore more data
on C (than D). For example, consider the following inclusion of ologs:
pa personh
i
Ð→
pa personh
has as mother
So in this case, there would be a map of instances q∶J ○i ⇒I, where I is an instance on C
and J is an instance on D. There would also be a map of linguistic structures β ∶M ○i ↝L,
where L is a linguistic structure on C and M is a linguistic structure on D, to which q
conforms. In fact, note that if J ○i ⇒I is the direction of instances, then it is only natural
that the linguistics could go “the other way” M ○i ↝L:
31

C
D
(β,q)
⇐Ô
InstEng
i
(L, I)
(M, J)
(14)
We deﬁne the category InstOlog† of co-instantiated ologs to have the same objects as InstOlog,
but where morphisms are given as in (14).7
⧫
Remark 3.4.5 As we did with the category Olog in Remark 3.2.3, we note there is an evi-
dent functor InstOlog →Cat, sending every instantiated olog (C,L) to its underlying cate-
gory C. This is a Grothendieck ﬁbration whose cartesian arrows coincide with the strongly
meaningful functors deﬁned in [16, §4].
⧫
Example 3.4.6 Suppose we are given two categories C,D, which we think of as database
schemas (as in [17]), a functor F ∶C Ð→D, and two instantiations I ∶C Ð→Set and J ∶D Ð→
Set. Suppose that these two databases are to be merged. We are asked to ﬁnd a morphism
F ♭∶I ⇒J ○F. In this example, we show that our job will be easier if F has been equipped
with a morphism F # of linguistic structures, so we can ﬁnd F ♭conforming to F #.
In order to emphasize the issue, we suppose that C and D are both single-object categories
C = ●1
and D = ●a
equipped with the following linguistic structures:
(C,L) =
1
pa humanh
and
(D,M) =
a
pa personh
Suppose we want to compare two instantiations, I ∶C Ð→Set and J ∶D Ð→Set, which are
represented by the following tables:
I(1) ∶=
a human
Emmy Noether
George W. Bush
J(a) ∶=
a person
Emmy Noether
Max Noether
Bill Clinton
George H. W. Bush
George W. Bush
7The † symbol in our case has nothing to do with the dagger category [23].
32

To compare instances on different schemas, we ﬁrst need a functor between them. In our
case there is a unique functor F ∶C Ð→D (it sends 1 ↦a), so this is not an issue. With this
functor in hand, we can pull back J to an instantiation J ○F on C, and attempt to compare
it to I.
The purpose of this example is to show that the choice of linguistic structure F # on F is
an important aid to making this comparison, i.e., to choosing a database homomorphism
I ⇒J ○F out of the 52 = 25 possible choices. Consider the following two morphisms for F:
pa humanh
pa personh
pa humanh
pa personh
is
has as father
We denote the ﬁrst by α and the second by β, i.e., α,β ∶L ↝M ○F. Clearly, these morphisms
give a useful hint at the intended semantics for the mapping. The only natural transforma-
tion I ⇒J ○F we endorse as conforming to α (see Deﬁnition 3.4.2) is p, and the only one
that conforms to β is q, as shown below:
(α,p) ∶=
a human
is a person, namely
Emmy Noether
Emmy Noether
George W. Bush
George W. Bush
(β,q) ∶=
a human
has as father a person, namely
Emmy Noether
Max Noether
George W. Bush
George H. W. Bush
This example complements, but also extends the scope of “meaningful functors” found in
[16, §4].
⧫
Acknowledgements
The authors are supported by the following grants: Ofﬁce of Naval Research ONR N00014131
0260, Air Force Ofﬁce of Scientiﬁc Research AFOSR FA9550-14-1-0031, and National Aero-
nautics and Space Administration NASA (Langley Research Center) NNH13ZEA001N-
SSAT.
The authors want to thank Dr. Patrick Schultz from MIT for patiently listening to some
of the authors’ discussions on this research, and for his comments which cleared up some
doubts at the abstract level of this paper.
33

Finally, special thanks to Dr.
Spencer Breiner from NIST, who patiently read the ﬁrst
manuscript, and whose comments and corrections improved the quality of the present
paper. The ﬁrst author also thanks him for the discussions both had during his visit to
MIT in April 2015, which inspired alternative ways to present some of the most important
concepts in the theory of ologs.
References
[1] J. Ad´amek, H. Herrlich, G. E. Strecker. (2004). Abstract and Concrete Categories. The Joy
of Cats. Dover Publications, Inc. Mineola, NY, USA.
[2] M. Barr, C. Wells. (1999). Category Theory for Computing Science. Centre de Recerches
Math´ematiques, Montreal.
[3] J. A. Bergstra, P. Weijland. (2014). Bitcoin: a Money-like Informational Commodity.
[4] R. Brown, T. Porter. (2006). Category Theory: an abstract setting for analogy and comparison.
What is Category Theory?. Advanced Studies in Mathematics and Logic. Polimetrica
S.a.s. International Scientiﬁc Publisher. Milan, Lombardy, Italy.
[5] S. W. Cranford, M. J. Buehler. (2012). Universality-Diversity Paradigm: Music, Materi-
omics, and Category Theory. Biomateriomics. Springer Series in Materials Science. Vol-
ume 165, 2012, pp. 109-169.
[6] M. Fleming, R. Gunther, R. Rosebrugh. (2002). A database of categories. Journal of Sym-
bolic Computation. Vol. 35, Issue 2, pp.127-135.
[7] T. Giesa, D. I. Spivak, M. J. Buehler. (2011). Reoccurring patterns in hierarchical protein
materials and music: The power of analogies. BioNanoScience. Volume 1, No. 4, pp. 153-
161.
[8] T. Giesa, D. I. Spivak, M. J. Buehler. (2012). Category Theory Based Solution for the Build-
ing Block Replacement Problem in Materials Design. Advanced Engineering Materials.
Volume 14, Issue 9, pp. 810-817.
[9] J. G´omez Ramirez. (2014). A New Foundation for Representation in Cognitive and Brain
Science. Category Theory and the Hippocampus. Springer Series in Cognitive and Neural
Systems, Vol. 7. Dordrecht, South Holland, The Netherlands.
[10] B. Jacobs. (1999). Categorial Logic and Type Theory. Studies in Logic and Foundations in
Mathematics. Volume 141. Elsevier. Amsterdam, The Netherlands.
34

[11] P. T. Johnstone. (2002). Sketches of an Elephant. A Topos Theory Compendium. Volume 2.
Oxford Science Publications. Oxford University Press Inc. New York, NY, USA.
[12] D. Kartsaklis, M. Sadrzadeh, S. Pulman, B. Coecke. Reasoning about Meaning in Natural
Language with Compact Closed Categories and Frobenius Algebras. Logic and Algebraic
Structures in Quantum Computing and Information, Association for Symbolic Logic
Lecture Notes in Logic. Cambridge University Press. (To appear).
[13] R. E. Kent. (2013). The First-Order Logical Environment. Conceptual Structures for STEM
Research and Education. Lecture Notes in Computer Science Volume 7735. Springer.
[14] T. Leinster. (2004). Higher Operads, Higher Categories. London Mathematical Society.
Lecture Note Series. Vol. 298. Cambridge University Press. Cambridge, United King-
dom.
[15] nLab contributors. Fibration. nLab.
[16] D. I. Spivak. (2011). Ologs: A categorical framework for knowledge representation. ArXiV
preprint (ﬁrst version).
[17] D. I. Spivak. (2012). Functorial data migration. Information and Computation. Vol. 217.
pp. 31-51.
[18] D. I. Spivak. (2014). Category Theory for the Sciences. The MIT Press. Cambridge, MA,
USA.
[19] D. I. Spivak, T. Giesa, E. Wood, M. J. Buehler. (2011). Category Theoretic Anal-
ysis of Hierarchical Protein Materials and Social Networks. PLoS One 6(9):
e23911.
doi:10.1371/journal.pone.0023911.
[20] D. I. Spivak, R. E. Kent. (2012). Ologs: A categorical framework for knowledge representa-
tion. PLoS ONE 7(1): e24274. doi:10.1371/journal.pone .0024274.
[21] L. Wetzel. (2009). Types and Tokens. MIT Press. Cambridge, MA, USA.
[22] Wikipedia contributors. Conceptual metaphor. Wikipedia, The Free Encyclopedia. May
22, 2015, 11:11 UTC. Accessed June 13, 2015.
[23] Wikipedia contributors. Dagger category. Wikipedia, The Free Encyclopedia. May 3,
2015, 00:18 UTC. Accessed May 19, 2015.
[24] Wikipedia contributors. Fibred category. Wikipedia, The Free Encyclopedia. November
15, 2014, 19:58 UTC. Accessed January 19, 2015.
[25] Wikipedia contributors. Function (mathematics). Wikipedia, The Free Encyclopedia.
February 20, 2015, 03:19 UTC. Accessed January 19, 2015.
35

