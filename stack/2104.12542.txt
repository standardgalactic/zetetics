Catalogs of C and Python
Antipatterns by CS1 Students
Technical Report RT-MAC-2021-01
Department of Computer Science – IME
University of São Paulo
Yorah Bosse (yorah.bosse@ufms.br)
Federal University of Mato Grosso do Sul (Brazil)
Igor Scaliante Wiese (igor@utfpr.edu.br)
Federal Univ.of Technology - Paraná (Brazil)
Marco Aurélio Graciotto Silva (magsilva@utfpr.edu.br)
Federal Univ.of Technology - Paraná (Brazil)
Nelson Lago (lago@ime.usp.br)
University of São Paulo (Brazil)
Leônidas de Oliveira Brandão (leo@ime.usp.br)
University of São Paulo (Brazil)
David Redmiles (redmiles@ics.uci.edu)
University of California (USA)
Fabio Kon (kon@ime.usp.br)
University of São Paulo (Brazil)
Marco A. Gerosa (marco.gerosa@nau.edu)
Northern Arizona University (USA) / University of São Paulo (Brazil)
2021
arXiv:2104.12542v1  [cs.CY]  2 Apr 2021

Contents
Introduction ............................................................................................ 3
Methodology............................................................................................4
Data Collection.....................................................................................................4
Data Analysis ........................................................................................................5
Antipatterns Catalogs............................................................................ 5
Description of the Antipatterns Format .........................................................7
Final Consideration ................................................................................7
Future Work...........................................................................................................8
Acknowledgement................................................................................. 9
References................................................................................................ 9
Appendices
A – Statements of the Chosen Exercises.......................................... 11
B – Suggested Solution for Professors and Students.................... 14
C – Antipattern Catalog in C ............................................................. 18
D – Antipattern Catalog in Python................................................... 63
E – Antipattern Catalog in Both, C and Python............................. 86

Catalogs of C and Python Antipatterns by CS1 Students
•
3
Catalogs of C and Python
Antipatterns by CS1 Students
Technical Report RT-MAC-2021-01
Department of Computer Science – IME
University of São Paulo
Yorah Bosse, Igor Scaliante Wiese, Marco Aurélio Graciotto Silva,
Nelson Lago, Leônidas de Oliveira Brandão, David Redmiles,
Fabio Kon, Marco A. Gerosa
Abstract: Understanding students’ programming misconceptions is critical. Doing so
depends on identifying the reasons why students make errors when learning a new
programming language. Knowing the misconceptions can help students to improve
their reflection about their mistakes and also help instructors to design better teaching
strategies. In this technical report, we propose catalogs of antipatterns for two program-
ming languages: C and Python. To accomplish this, we analyzed the codes of 166 CS1
engineering students when they were coding solutions to programming exercises. In
our results, we catalog 41 CS1 antipatterns from 95 cataloged misconceptions in C and
Python. These antipatterns were separated into three catalogs: C, Python, and antipat-
terns found in code using both programming languages. For each antipattern, we present
code examples, students’ solutions (if they are present), a possible solution to avoid the
antipattern, among other information.
Keywords: CS1, misconceptions, antipatterns, programming learning
1
Introduction
Learning to program is a complex (Mhashi and Alakeel, 2013) and arduous task (Robins,
J. Rountree, and N. Rountree, 2003; Jenkins, 2002; Kristi, 2003), as evidenced by the number
of studies considering the student failure rates shown in the literature (Watson and Li,
2014; Oliveira Brandão, Bosse, and Gerosa, 2016; Bosse and Gerosa, 2017; Bennedsen and
Caspersen, 2019; Luxton-Reilly et al., 2019).
Understanding the mistakes made by CS1 students when learning to program can provide
benefits to the students’ growth. Such mistakes are an essential part of the learning process,
and research has shown that students can learn from error (Streumer and Kho, 2006;
Ellström, 2001).

4
•
Bosse, Y. et al.
In this study, that was a part of the thesis entitled “Patterns of Difficulties Related to Pro-
gramming Learning” (Bosse, 2020), we observed how a group of CS1 students approached
and solved the programming exercises proposed throughout their “introduction to pro-
gramming” class. Our goal was to identify frequent misconceptions made by them when
developing code and thereby define a set of antipatterns.
A pattern is the description of a problem that occurs repeatedly in our environment
together with the core of a usable solution to that problem (Alexander et al., 1977). An
antipattern, in turn, is a common response that looks like an appropriate and effective
solution, but resulting in negative consequences (Brown et al., 1998). Brown et al. (1998)
further add that an antipattern is the result of lack of knowledge or the application of a
“good” pattern in the wrong context (Brown et al., 1998). In addition, they state that mistakes
that occurred at least three times in different situations becomes a pattern (antipattern).
In this technical report, we are presenting a set of antipattern catalogs for C, Python,
and the intersection of both, in addition to directions on how to learn from them. These
antipattern catalogs may help instructors to teach and students to learn how to program,
reducing difficulties faced by CS1 students. They also may play a key role in research
that aims to develop programming oriented teaching-learning systems, giving greater
conditions for developing helpful feedback not only on reducing syntax errors but also on
decreasing semantic errors and misleading programming styles.
2
Methodology
The code analyzed in this research came from introductory programming classes taught
for engineering courses at the University of São Paulo, Brazil, in 2017. In the following
subsections, we detail the steps of data collection and analysis of this study.
2.1 Data Collection
The data collection happened in a distance learning course with no face-to-face classes,
where all 3 exams were performed on-site. To enroll in this course, students had to have
taken the compulsory CS1 face-to-face course in the previous year, had to have at least 70%
attendance, and had to have failed it. There were initially 166 students, 34 of them using
the C programming language (Electrical and Computational Engineering students) and 132
students using the Python language (other engineering courses). Each student had to use
the same language adopted in their previous face-to-face course when they failed.
The course took 16 weeks. In each week, students had to solve a set of practical exercises,
with automatic evaluation, using Moodle with the VPL plugin (Rodríguez-del-Pino, Rubio
Royo, and Hernández Figueroa, 2012). Every compilation had the code and its result
recorded. These exercises were mandatory and were considered in the final grade, weighting
one fifth of the total grade. There were 62 exercises, approximately 4 per week. The weekly

Catalogs of C and Python Antipatterns by CS1 Students
•
5
exercises were chosen by the instructor to address concepts of a particular set of topics
covering the main topics in programming languages (e.g., input/output, variables, selection
and repetition structure, functions, array).
2.2 Data Analysis
For the analysis, we chose exercises covering all of the content taught in the course. The
Appendix A present the statements of the 15 chosen exercises. Exercises were grouped by
topic and we chose representative exercises giving preference for the first ones in each
topic. From the 15 chosen exercises, we analyzed 2,233 student code submissions (1,253 in
C and 980 in Python). All students, ∼20% using C and ∼80% using Python, solved the same
exercises.
After choosing which exercises to explore, the choice of code submissions to be analyzed
for each of them was random, but giving preference to students’ codes with up to 20
submissions. For each exercise, a minimum of 50 submissions was analyzed.
During the analysis, several misconceptions were found. Each new mistake found was
cataloged in a new datasheet, and those that already existed were added as a new event in
a existing one.
We used the following criteria to classify the 3 types of errors: syntax, semantics or
style. Syntax errors detected by the compiler; semantic errors identified by the wrong
results; and the Style errors considered not appropriate because they could generate future
problems in code development or poor programming practice (Rogers et al., 2014).
When we finished analysing the codes and classifying the mistakes, the antipattern
catalogs of each language were organized with the errors that presented themselves in at
least three distinct student events. Next, we organized a catalog with the antipatterns that
appear in both languages.
3
Antipatterns Catalogs
Codes developed in C and Python were recorded and analyzed during CS1 taught for engi-
neering courses at the University of São Paulo, Brazil. We found 95 types of misconceptions
made by students using C and 44 by students using Python.
The misconceptions with at least three registered events yielded three antipattern catalogs
(Table 1). The first catalog presents the antipatterns found in codes developed with the
C programming language, a total of 21 (rows 1 to 21). The second catalog presents the
antipatterns found in Python, totaling 11 (rows 31 to 41). The third one presents the 9 that
occurred in both C and Python programming languages (rows 22 to 30).
The last five columns of Table 1 show the total of events found, in how many of these
events the student was unable to solve the problem and the average, median, and mode
of submissions necessary to correct the error. Appendices C, D, and E show the complete

6
•
Bosse, Y. et al.
Table 1. Summary of the antipattern catalogs.
N
ID
Anti-Pattern Name
Language
Error 
Type
Total of 
Events
Total of Events 
without Error 
Correction (?)
Submissions Until Correction
C
Python
Average
Median
Mode
1
C_G2
Missing ";” at end of line
X
Syntax
15
0
1.5
1
1
2
C_GL1
Library call missing
X
Syntax
8
2
2.3
2
2
3
C_IF1
Missing "&" in front of 
variable in "scanf"
X
Semantics
8
1
1.4
1
1
4
C_IF6
Missing “,” to separate first 
from second parameter in 
“scanf”
X
Syntax
3
0
2.3
1
1
5
C_OF1
Improper use of "&" in front 
of variable in "printf"
X
Semantics
5
0
1.0
1
1
6
C_OF3
Wrong spelling of “printf” 
command
X
Syntax
8
1
1.0
1
1
7
C_OF5
Parameter identifying 
incorrect or non-existent 
output data type
X
Syntax
4
1
3.0
2
Amodal
8
C_OF6
Use of "&" instead of "%" in 
“printf”
X
Semantics
3
0
3.7
3
Amodal
9
C_OF7
Result not presented to the 
user
X
Semantics
4
0
1.3
1
1
10
C_AE1
Float result type in integer 
division
X
Semantics
9
1
3.3
3
3
11
C_AE2
Wrong arithmetic formula
X
Semantics
8
0
3.8
2.5
2
12
C_AE3
Calculation performed before 
having values in the used 
variables
X
Semantics
5
0
2.2
1
1
13
C_RE5
Comparison performed before 
having values in the used 
variables
X
Semantics
3
0
1.7
1
1
14
C_SS1
Incorrect use of "{" and "}" 
opening or closing "if" or 
"else"
X
Syntax
3
0
1.0
1
1
15
C_SS4
Improper “;” after “if” 
condition and/or after “else”
X
Semantics
3
0
10.3
7
Amodal
16
C_RS3
Result printed in wrong place
X
Semantics
7
1
3.2
2.5
Bimodal (1, 3)
17
C_F1
Missing “return”
X
Semantics
12
7
2.0
1
?
18
C_F2
Missing “{“ and / or “}” in 
function
X
Syntax
5
0
2.6
1
1
19
C_F6
Incorrect call of a typed 
function
X
Semantics
5
0
2.0
2
Bimodal (1, 2)
20
C_F9
Incorrect declaration of 
function parameters
X
Syntax
6
4
1.5
1.5
? 
21
C_F10
“return” x “printf”
X
Style
7
3
2.5
2
? 
22
G1
Lack of indentation
X
X
P = Syntax
P = 9
P = 0
P = 2.2
2
1
C = Style
C = 5
C = 4
C = 3.0
3
? 
23
V1
Use of nonexistent variable
X
X
Syntax
P = 4
P = 0
P = 1.8
1.5
1
C = 13
C = 0
C = 1.4
1
1
24
V3
Assignment using “==” instead 
of “=”
X
X
P = Syntax
P = 3
P = 1
P = 3.0
3
Amodal
C = Semantics
C = 5
C = 2
C = 2.0
1
Bimodal (1, ?)
25
IF2
Missing quotes in the input 
function call 
X
X
Syntax
P = 3
P = 0
P = 1.0
1
1
C = 3
C = 1
C = 2.0
2
Amodal
26
OF2
Missing quotes in output 
function
X
X
Syntax
P = 5
P = 0
P = 1.8
2
Bimodal (1, 2) 
C = 4
C = 0
C = 1.0
1
1
27
OF4
Missing comma to separate 
parameters in data output 
function
X
X
Syntax
P = 3
P = 0
P = 1.3
1
1
C = 4
C = 0
C = 1.0
1
1
28
RE1
Use of “=” instead of “==”
X
X
P = Syntax
P = 10
P = 0
P = 2.7
1
1
C = Semantics
C = 5
C = 0
C = 1.8
1
1
29
SS2
Not using "else" where it 
would be appropriate to do so
X
X
Style
P = 5
P = 1
P = 2.5
2
2
C = 9
C = 8
C = 1.0
1
?
30
RS2
Control variable is not change
X
X
Semantics
P = 3
P = 0
P = 3.7
2
Amodal
C = 5
C = 1
C = 1.8
1.5
1
31
P_V2
Use of reserved word for 
variable name
X
Syntax
4
3
1.0
1
?
32
P_V4
Incorrect data type conversion
X
Syntax
3
0
3.3
3
3
33
P_V5
Missing type conversion
X
Semantics
4
0
1.5
1.5
Bimodal (1, 2) 
34
P_IF4
Missing parentheses in 
“input”
X
Syntax
3
0
2.3
2
Amodal
35
P_OF5
“print” followed by “=” or 
other incorrect parameter
X
Syntax
3
1
2.0
2
Amodal
36
P_AE2
Wrong arithmetic operator
X
Syntax
4
0
1.0
1
1
37
P_SS1
Missing “:” at end of “if” or 
“else” line
X
Syntax
7
1
2.0
1.5
1
38
P_RS1
Wrong sequence of 
commands in structure
X
Semantics
4
1
3.0
3
Amodal
39
P_SRS1 Use of repetition structure 
where selection should be
X
Semantics
3
1
1.5
1.5
Amodal
40 P_MDA1 Wrong creation of multi-
dimensional array lines
X
Semantics
3
0
7.3
8
Amodal
41
P_F8
Function created but not 
called
X
Semantics
6
0
1.2
1
1
Legend: P and C correspond respectively to the Python and C programming languages.

Catalogs of C and Python Antipatterns by CS1 Students
•
7
Antipattern 
identification 
code
Self explanatory name 
that identifies the 
antipattern
Image showing it in a code 
snippet developed by a CS1 
student
Choice of 
type of error
Citation of the 
content(s) 
related to the 
antipattern
Choice of 
language where 
the antipattern 
occurred
Explanation of why 
this antipatterns is 
considered a 
problem
ID and Title of other antipatterns 
that have any relation to this
Fig. 1. Explanation of the first part of the antipatterns datasheets.
datasheets of all antipatterns that make up each catalog, according to the format explained
in the Figures 1, 2, and 3.
3.1 Description of the Antipatterns Format
The format adopted for the datasheets is an adaptation of the presentation template of a
pattern suggested by Alexander et al. (1977). Each datasheet of the catalog consists of three
parts. The first part serves to identify the antipattern in a unique way. Figure 1 shows the
information that makes up this part of the datasheets.
The second part is intended to show in detail the occurrences found. There are three
to four events presented to characterize an antipattern. Information such as in which
submission/compilation the mistake occurred and in which it was solved helps, for example,
to know if the student solved the antipattern and, if so, to show how and how much ’time’
was necessary for that (Figure 2). Appendix A shows the statements of the exercises
identified by item “The exercise that was being solved.”
The last part serves to suggest a step by step of how professors can present the antipattern
to their students, and also suggestion of a step by step of how students can study it by
themselves (Figure 3). Appendix B shows the statements of the exercises identified by item
“The exercise that was being solved.”
4
Final Consideration
We found 139 types of misconceptions in C and Python, which 41 of them were identified
as antipatterns in the CS1 students’ code. Professors could work these antipatterns while

8
•
Bosse, Y. et al.
Anonymous 
identifier of the 
student who made 
the mistake
Number of times 
the code was 
compiled
Identification of the exercise 
the student was solving
Image of the student 
code containing the 
mistake
Image of the student 
code with the solution
The submission 
(compilation) that the 
mistake occurred
The submission 
(compilation) where 
the mistake was fixed
Explanations that 
may be necessary 
(optional)
This part is repeated at least 3 times (max.4) 
to characterize the antipattern
Fig. 2. Explanation of the second part of the antipatterns datasheets.
A step by step of how professors can present 
this antipattern to their students, thus 
helping to prevent it from occurring
A step by step for self-taught students of 
how they could study the antipattern
Fig. 3. Explanation of the third part of the antipatterns datasheets.
teaching the corresponding content, avoiding the time spent looking for and solving
problems in the codes developed by their students.
The data exposed in the last five columns of Table 1 can provide vital information for
professors. With this data, the professor can identify the antipatterns that most occurred,
those that students typically failed to resolve, those that took a long time for students to
find a solution, among much other information.
These catalogs can be another step in a broader movement to lift and categorize the
specific difficulties faced by students who may help professors to teach and students to
learn programming, as well as researchers in the development of new research and tools to
assist them in these tasks.
4.1 Future Work
As a future work, a study that verifies the impact on the CS1 students’ code in case
the antipatterns were constantly highlighted during the introductory programming
classes. Besides, the creation of a questions repository could be helpful. This reposi-
tory’s goal would be to address each antipattern in many different ways, looking to develop

Catalogs of C and Python Antipatterns by CS1 Students
•
9
some essential skills for programmers, like finding errors in their code. According to Gomes
and Mendes (2014), one way to help students is with well-designed, carefully thought
out exercises, reflecting how, which, when, and why each exercise would be presented. A
question repository could help the professors when choosing and varying the exercises
used in each situation.
Acknowledgment
The first author was supported by a scholarship from the CAPES Foundation, an agency
under the Ministry of Education of Brazil – Program name: PDSE–Programa de Doutorado
Sanduiche no Exterior (Doctoral Program Abroad)/Process number: PDSE – 88881.135066/2016-
01), to study in the University of California – Irvine, and also supported by UFMS – Univer-
sity of Mato Grosso do Sul to develop the thesis. In addition, this study was financed in part
by the Coordenação de Aperfeiçoamento de Pessoal de Nível Superior – Brazil (CAPES) –
Finance Code 001.
References
Alexander, Christopher et al. (1977). A pattern language. Oxford University Press, New
York.
Bennedsen, Jens and Michael E Caspersen (2019). “Failure rates in introductory program-
ming: 12 years later”. In: ACM Inroads 10.2, pp. 30–36.
Bosse, Yorah (2020). “Patterns of Dificulties Related to Programming Learning (Text in
Portuguese)”. PhD thesis. Institute of Mathematics and Statistics, University of São Paulo,
São Paulo, Brazil.
Bosse, Yorah and Marco Aurélio Gerosa (2017). “Why is programming so difficult to learn?:
Patterns of Difficulties Related to Programming Learning Mid-Stage”. In: ACM SIGSOFT
Software Engineering Notes 41.6, pp. 1–6.
Brown, William H et al. (1998). AntiPatterns: refactoring software, architectures, and projects
in crisis. John Wiley & Sons, Inc.
Ellström, Per-Erik (2001). “Integrating learning and work: Problems and prospects”. In:
Human resource development quarterly 12.4, pp. 421–435.
Gomes, Anabela and Antonio Mendes (2014). “A teacher’s view about introductory pro-
gramming teaching and learning: Difficulties, strategies and motivations”. In: 2014 IEEE
Frontiers in Education Conference (FIE) Proceedings. IEEE, pp. 1–8. doi: 10.1109/FIE.2014.
7044086.

10
•
Bosse, Y. et al.
Jenkins, Tony (2002). “On the difficulty of learning to program”. In: Proceedings of the 3rd
Annual Conference of the LTSN Centre for Information and Computer Sciences. Vol. 4. 2002.
Citeseer, pp. 53–58.
Kristi, AM (2003). “Problems in learning and teaching programming-a literature study for
developing visualizations in the Codewitz-Minerva Project”. In: Codewitz Need Analysis,
Institute of Software System, Tampere University of Technology, Finland, pp. 1–12.
Luxton-Reilly, Andrew et al. (2019). “Pass rates in STEM disciplines including computing”.
In: Proceedings of the 2019 ACM Conference on Innovation and Technology in Computer
Science Education. ACM, pp. 267–268.
Mhashi, Mahmoud M and ALIM Alakeel (2013). “Difficulties facing students in learning
computer programming skills at Tabuk University”. In: Proceedings of the 12th Inter-
national Conference on Education and Educational Technology (EDU’13), Iwate, Japan,
pp. 15–24.
Oliveira Brandão, Leônidas de, Yorah Bosse, and Marco Aurélio Gerosa (2016). “Visual
programming and automatic evaluation of exercises: An experience with a STEM course”.
In: 2016 IEEE Frontiers in Education Conference (FIE). IEEE, pp. 1–9.
Robins, Anthony, Janet Rountree, and Nathan Rountree (2003). “Learning and teaching
programming: A review and discussion”. In: Computer science education 13.2, pp. 137–172.
Rodríguez-del-Pino, Juan Carlos, Enrique Rubio Royo, and Zenón Hernández Figueroa
(2012). “A Virtual Programming Lab for Moodle with automatic assessment and anti-
plagiarism features”. In.
Rogers, Stephanie et al. (2014). “ACES: Automatic evaluation of coding style”. PhD thesis.
Master’s thesis, EECS Department, University of California, Berkeley.
Streumer, JN and M Kho (2006). “The world of work-related learning”. In: Work-related
learning. Springer, pp. 3–49.
Watson, Christopher and Frederick WB Li (2014). “Failure rates in introductory program-
ming revisited”. In: Proceedings of the 2014 conference on Innovation & technology in
computer science education. ACM, pp. 39–44.

Catalogs of C and Python Antipatterns by CS1 Students
•
11
Appendix A – Statements of the Chosen Exercises
Below, we present the statements of the exercises chosen to analyze the codes generated
by the students of introduction to programming.
Exercise 1.1 – Develop a code that reads an integer entered by the user and prints the
value typed.
Exercise 1.2 – Develop a code that receives an integer (int), typed by the user, and prints
the square of that number.
Exercise 2.1 – Develop a code that reads two integers typed by the user, and prints the
largest of the two numbers.
Exercise 2.2 – Develop a code that reads two integers as inputs (say in variables 𝑎and 𝑏),
and prints 1 if “𝑎< 𝑏” and 0 otherwise.
Exercise 3.1 – Develop a code in C or Python that checks whether 3 numbers can represent
the angles of a triangle or not. Your algorithm should prompt the user to enter the 3 natural
numbers (representing angles in degrees) and print: “Sim” (Yes) and the 3 numbers in the
sequence entered if they add up to 180, and “NAO” (NO) and the sum of the 3 numbers
otherwise.
Exercise 3.2 – Develop a code that reads three natural numbers as inputs and checks
to see if those numbers are Pythagorean. Three numbers are Pythagorean if the square
of the largest of them (hypotenuse) is equal to the sum of the square of the other two.
Your program should print: if Pythagorean, the value “1” and the value of the hypotenuse
squared; if not Pythagorean, only the value “0”.
Three numbers, represented by ℎ, 𝑎, and𝑏are called Pythagorean if, and only if, ℎ2 = 𝑎2+𝑏2.
The name is because they correspond to the sides length of a right triangle.
Exercise 3.3 – Develop a C/Python program that reads a natural (say in the "total" variable)
and computes the largest sum of consecutive naturals, starting at 1, that is less than or
equal to the value entered (<= total).

12
•
Bosse, Y. et al.
Exercise 4.1 – Develop a program with functions named “soma” (sum) and “media” (aver-
age), both with 2 formal parameters of type “int”, which respectively return the sum of the
parameters and their average. Functions must have 2 integer parameters, such as “soma(a,
b)” and “media(a, b)”. Your main program should receive from the user 2 integers, invoke
with them first the sum function and print their sum, then invoke media and print their
arithmetic mean (invoking the functions).
Exercise 4.2 – Make a program in C / Python necessarily implementing a function named
𝑓𝑎𝑡, with one parameter 𝑛, which, given an integer 𝑛, returns the factorial of 𝑛if 𝑛≥0,
otherwise return −1. Make a "main" program that prompts the user to type any integer
and using the function 𝑓𝑎𝑡returns the factorial of 𝑛, if 𝑛≥0, otherwise return −1.
Remember, the factorial function 𝑓𝑎𝑡(𝑛) is defined only for naturals (starting by zero), as
follows: 𝑓𝑎𝑡(0) = 1 and 𝑓𝑎𝑡(𝑛) = 𝑛∗𝑓𝑎𝑡(𝑛−1),𝑛> 0. Thus, for example, the factorial of
4 (represented by 4!) is computed as follows: 𝑓𝑎𝑡(4) = 4! = 4.3.2.1 = 24.
Therefor, it is necessary that your program prints −1 whenever the user enter a negative
integer (e.g., if the input is 𝑛= −10, the output is −1; input 𝑛= −21 implys output −1).
Exercise 4.7 – Develop a code that receives a positive natural number 𝑛(𝑛≥1) and then 𝑛
lists of integer values, each list is ended by a 0 (ending mark of the subsequence), calculating
the sum of all odd numbers in each subsequence and print them (as soon as you read each
0).
Examples: For the subsequences below, all with 𝑛= 3
Ex. 1. Inputs (including n): 3 0 0 0 => outputs: 0
Ex. 2. Inputs (including n): 3 2 0 2 0 2 0 => outputs: 0
Ex. 3. Inputs (including n): 3 1 0 3 0 5 0 => outputs: 1 3 5)
Exercise 7.1 – Construct an algorithm that receives a positive natural n (𝑛> 0) and prints
the sum of the first n terms of the harmonic series defined below.
𝐻= 1/1 + 1/2 + 1/3 + 1/4 + . . . + 1/𝑘+ . . .
Exercise 7.2 – Build an algorithm that takes a positive natural number and real value (𝑛
and 𝑥), calculates and prints the value of 𝑥ˆ𝑛(power from 𝑥to 𝑛). Use only the sum and
product operators.

Catalogs of C and Python Antipatterns by CS1 Students
•
13
Exercise 7.4 – Build a program that receives an integer 𝑛and then 𝑛characters as input
by printing the ASCII (American Standard Code for Information Interchange) code for each
character.
Exercise 8.1 – 1. Implement a function called determineSeOrdenado that takes as param-
eters an integer 𝑛and array of integers called 𝑣𝑒𝑡. The function should return 1, if the
elements in vet[] are in ascending order and 0, otherwise (that is, if vet[0] < vet[1] <
... < vet[n-1], returns 1 and in any other setting returns 0).
2. Make a main program in which the user types a number n>0, followed by 𝑛integer
values that are stored in the array (which can have up to 40 elements). Using the value
returned by the function of item 1, your program should print 1, if the array is in ascending
order, and 0 otherwise.
Exercise 13.1 – Make a program in which the user enters positive integers 𝑚and 𝑛
(m > 0, n > 0), followed by 𝑚x 𝑛real values (float), which should be stored in a
matrix of order 𝑚x 𝑛. Then your program should print each line, followed by the “=” sign
and the sum of the line, starting at line 0, then line 1, and so on. Thus, you must first print
the value of M[0][0], followed by M[0][1], and so on to the last of the line (M[0][n-1])
and then the equal sign and the sum of the number from line zero. Then follow lines 1, 2, 3
to m-1.

14
•
Bosse, Y. et al.
Appendix B – Suggested Solution for Professors and
Students
Below, we present detailed descriptions of solutions for professors and students mentioned
in the antipattern catalogs.
FOR PROFESSORS
1. Explanation using blackboard and projector – reinforce the concept using Ka-
hoot
It is important to make clear to the learner that this anti-pattern exists. For this, a solution
suggestion would be:
1. Bring to class code snippets with antipatterns related to previously presented topics
with at most one error per line
2. show them to the learners
3. ask them to point out some error
4. ask if someone in class could explain the consequences of the error for the program
5. reinforce the explanation, if possible, showing other examples of the same error
6. explain the correct way to write the command (line), without the error
7. rewrite the line on the blackboard, without the error, or make the correction visible
on the projector
8. repeat steps 3 to 7 as long as there are errors in the code Then (it is necessary for the
teacher’s computer and the learners’ phones or computers to have Internet access):
9. show the password for the previously prepared kahoot quiz and ask learners to con-
nect to kahoot with their phone
10. If this method has not been used before with them, explain the “game”
11. start the “game”, cheer each learner’s victory, and make notes on the questions they
fail most often
12. In the end, present the results and go back to the exercises they had the most diffi-
culty with.
P.S: The teacher will obtain a valuable resource, as it will become clear on which topics
students need reinforcement and may address them further during class.

Catalogs of C and Python Antipatterns by CS1 Students
•
15
2. Groups working with step-by-step execution to understand errors – reinforce
with exercises
It is important to make clear to the learner that this anti-pattern exists. For this, a solution
suggestion would be:
1. assemble teams of 2 or 3 students;
2. give the teams codes with the error. Not necessarily the same code for all teams;
3. ask them to do a step-by-step execution of the code presented;
4. then ask for a team to show the class what they have found and explain how they got
this result;
5. ask others with the same snippet if they had different results. If so, ask them to present
to the class;
6. now you (instructor), using visuals, simulating computer memory space, for in- stance,
show, correct or reinforce what was presented;
7. repeat steps 3 through 6 if you have more than one type of exercise;
8. give them exercises to solve in which they could make the mistakes mentioned above;
9. ask them to solve on the blackboard so you can correct them if the mistake still
appears.
3. Programming in front of the students, making the error appear– reinforce by
asking students to develop new codes
It is important to make clear to the learner that this anti-pattern exists. For this, a solution
suggestion would be:
1. ask learners to solve an exercise in which the error you want to address might happen;
2. go to the blackboard and expose a superficial outline of what the code needs to do
and in what sequence;
3. use the projector to start programming on the computer in front of the students;
4. make the error appear;
5. compile and ask the learners for suggestions on how the code could be fixed;
6. test each suggestion and explain if necessary, the reasons why it did not work;
7. finish with working code projected for learners to see;
8. give them one more exercise to solve;
9. ask a learner to develop their code right on the computer to project for all;
10. explain what is happening while the learner is typing;
11. repeat steps 8 through 10 as many times as you like, using intensive practice for
learning.

16
•
Bosse, Y. et al.
4. Apply the bench test (table test) in code samples with and without the error,
compare the results – reinforce by asking the students to solve some exercises
It is important to make clear to the learner that this anti-pattern exists. For this, a solution
suggestion would be:
1. show an example of the error to the learner. Make sure the only mistake in your
example is the one you want to address;
2. make it very clear, highlighting the mistake with a colored circle or arrow;
3. explain why it is wrong;
4. do a bench test (table test) showing what happens;
5. fix the code, and redo the bench test (table test);
6. compare the results;
7. make sure the learners understand by asking them to do one or two exercises like
this, but with other code snippets.
8. correct during class, in the presence of the learners.
FOR STUDENTS
1. Solve exercises, add code errors, and ask classmate to find them
Learners may study this antipattern to avoid it in the future with an exercise:
Note:It is important that students work with at least one peer and that they have a
computer to work on the exercise.
1. Study some of the antipatterns of a given topic
2. Choose similar exercises that depend on the topic and solve them independently
3. After the exercises are done and error-free with correct outputs, each one copies their
code to paper with added errors (each one chooses how many errors to add)
4. Switch papers
5. Each one corrects their peer’s exercise, pointing out the errors found
6. When done, learners check with their peer, who previously solved the exercise,
whether any problem slipped through or if all errors were found
7. Each one explains the solution they developed to their peer, showing the difficulties
they had and how they solved them.

Catalogs of C and Python Antipatterns by CS1 Students
•
17
2. Study one or more anti-patterns, introduce to classmate and reinforce with ex-
ercise
Learners may study this antipattern to avoid it in the future with an exercise:
Note:It is important to do this with at least one peer.
1. Choose a topic already seen in class and select different parts of the topic for each
learner to explain
2. Each one is to study the material, prepare a quick presentation, and search for examples
to illustrate the explanation
3. Search for at least 1 exercise to be solved after your presentation
4. Choose whose turn it is to present
5. Start the presentation. The explanation should clarify everyone’s difficulties. Showcase
the possible errors (antipatterns) that may occur. In case some doubt remains, all may
help search for answers if the presenter does not know enough.
6. Present the chosen exercise and ask colleagues to solve it
7. Check it together with bench test (table test) of the found solutions
8. Analyze what would happen if the antipattern existed in the code
9. Repeat steps 4 to 9 as many times as necessary for all to present their part
3. Introduce the error into a code and understand the consequences it generates.
Learners may study this antipattern to avoid it in the future with an exercise:
Note:It is important to have a computer available to undertake the exercise.
1. Copy into the development environment some completed exercise from a previous
class, a book, or the internet where the error (antipattern) may be inserted
2. execute the program and reason about what it does
3. insert the error (antipattern) in the code and try to execute it again
4. If there is a compilation error, note how the compiler present the error, so you can
more easily understand what the compiler points to in cases of error
5. If the program executes, note how results are presented, trying to understand where
the error is and how it behaves
6. Do this with multiple exercises, until you are certain that you understand the antipat-
tern

 
 
 
 
 
ANTIPATTERNS CATALOG IN C 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_G2 Missing ";” at end of line 
 
EXAMPLE:    
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- General  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
Missing the ";" (semicolon) at the end of lines that require it will cause a syntax error and the code 
will not execute before the error is corrected. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2558 
Total of submissions for the exercise: 
3 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 
Student Id: 2719 
Total of submissions of the exercise: 
3 
18
•
Bosse, Y. et al.
Appendix C – Antipattern Catalog in C
Below, we present the catalog of antipatterns found in code developed using C as program-
ming language.

The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 4738 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4 
Student Id: 5242 
Total of submissions of the exercise: 
14 
The exercise that was being solved: 
Exercise 7.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 9 
Observation: 
Fixed on submission: 10 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_GL1 Library call missing 
Catalogs of C and Python Antipatterns by CS1 Students
•
19

 
EXAMPLE:  
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Library  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
When a command is actually a function, such as "scanf", "printf", "malloc," and so on, and these 
functions were developed within libraries, calling these is indispensable for the program to 
recognize such commands/functions. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2670 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The code does not compile. 
Missing library call containing Input and Output 
functions. 
Fixed on submission: 3 
Observation: 
EVENT 2 
Student Id: 3167 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
20
•
Bosse, Y. et al.

Occurred in submission: 1 
Observation: 
Fixed on submission: 6 
Observation: 
EVENT 3 
Student Id: 2040 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4 
Student Id: 5226 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_IF1 Missing "&" in front of variable in "scanf" 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
21

EXAMPLE:  
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Variable  
- Data input function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The C programming language requires "&" in front of the variable to indicate that the value that 
the user types as input will be stored in the address of the variable. Failure to do so will generate 
a runtime error, causing the program not to execute appropriately. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_IF2 – Missing quotes in the input function call  
- C_IF6 – Missing “,” to separate first from second parameter in “scanf” 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2257 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
Fixed Error 
 
Tentativa 1: 
 
 
Final 
 
 
Occurred in submission: 1 
Observation: The error occurs during program 
execution. 
Fixed on submission: 4 
Observation: Before reaching this result, 
she/he tried to put “;” (semicolon) in place of the 
comma inside the parentheses. 
EVENT 2 
Student Id: 2670 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
22
•
Bosse, Y. et al.

Student Id: 2719 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4 
Student Id: 1781 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: Other errors persist. 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_IF6 
Missing “,” to separate first from second parameter in “scanf” 
 
EXAMPLE:   
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Data input function  
- Function: parameter declaration  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
23

PROBLEM: 
This error prevents the program from running because, by the language rules, the parameters 
must be separated by a comma. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_IF1 – Missing "&" in front of variable in "scanf"  
- C_IF2 – Missing quotes in the input function call  
- C_F9 – Incorrect declaration of function parameters  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2040 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The comma between the two 
“%d” will cause the program to stop executing 
reading the data, which means the program will 
not run properly. 
Fixed on submission: 6 
Observation: 
EVENT 2 
Student Id: 3167 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 2810 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
24
•
Bosse, Y. et al.

 
Error 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_OF1 Improper use of "&" in front of variable in "printf" 
 
 EXAMPLE:   
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Variable  
- Data Output Function  
- Function: passing parameter by reference  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The program will run, but the result will not be the expected as the address of the variable instead 
of the value stored inside it will be printed. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF2 – Wrong spelling of “printf” command  
- C_OF3 – Missing quotation mark in output function  
- C_OF4 – Use of "&" instead of "%" in “printf”  
- C_OF5 – Parameter identifying incorrect or non-existent output data type  
- C_OF6 – Missing comma to separate parameters in data output function  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Catalogs of C and Python Antipatterns by CS1 Students
•
25

Student Id: 1781 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 
Student Id: 2257 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 4 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 3 
Student Id: 3167 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 5 
Observation: 
Fixed on submission: 8 
Observation: 
EVENT 4 
Student Id: 1830 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 7.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 3 
Observation: 
Fixed on submission: 4 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
26
•
Bosse, Y. et al.

 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_OF3 Wrong spelling of “printf” command 
 
 EXAMPLE:   
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Data Output Function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The compiler does not recognize the command name and thus does not know what to do. The 
error message says that the identifier was not created in the current scope. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF1 – Improper use of "&" in front of variable in "printf"  
- C_OF3 – Missing quotation mark in output function  
- C_OF4 – Use of "&" instead of "%" in “printf”  
- C_OF5 – Parameter identifying incorrect or non-existent output data type  
- C_OF6 – Missing comma to separate parameters in data output function  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2243 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 2 
Student Id: 3430 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 1.1 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
27

Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 3300 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4 
Student Id: 5242 
Total of submissions of the exercise: 
62 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 8 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_OF5 Parameter identifying incorrect or non-existent output data type 
28
•
Bosse, Y. et al.

 
 EXAMPLE:   
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Data Output Function 
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The compiler expects to find the parameter that identifies the type of data to be printed, and 
missing this information generates a syntax error that causes the program not to execute. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF1 – Improper use of "&" in front of variable in "printf"  
- C_OF2 – Wrong spelling of “printf” command  
- C_OF3 – Missing quotation mark in output function  
- C_OF4 – Use of "&" instead of "%" in “printf”  
- C_OF6 – Missing comma to separate parameters in data output function  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2040 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 7 
Observation: 
EVENT 2 
Student Id: 5730 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Failed to identify the type of 
output data, which should be "%d" since "n1" is 
of type "int". 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 5242 
Total of submissions of the exercise: 
62 
The exercise that was being solved: 
Catalogs of C and Python Antipatterns by CS1 Students
•
29

Exercise 3.3 
 
Error 
 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 8 
Observation: The variable “soma” is of type 
“int”, so “%d” was missing, followed by a 
comma, before the variable. It is noteworthy that 
the command name “printf” is spelled wrong. 
Fixed on submission: 
Observation: In the 16th submission, the 
student erases this "printf" line, solving the 
problem without solving the error. 
EVENT 4 
Student Id: 3430 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 7.1 
 
Error 
 
 
... 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: Line 5 shows the student 
declaring the variable “soma” as “float”, but she 
or he used “%d” to print the value instead of 
"%f". 
Fixed on submission: 3 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_OF6 Use of "&" instead of "%" in “printf” 
30
•
Bosse, Y. et al.

 
 EXAMPLE:   
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Data Output Function 
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The program will run, but will not show the value stored in the variable. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF1 – Improper use of "&" in front of variable in "printf" 
- C_OF2 – Wrong spelling of “printf” command  
- C_OF3 – Missing quotation mark in output function  
- C_OF5 – Parameter identifying incorrect or non-existent output data type  
- C_OF6 – Missing comma to separate parameters in data output function  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 3139 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
Attempt 1: 
 
 
Final: 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 2 
Student Id: 2257 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 2950 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Catalogs of C and Python Antipatterns by CS1 Students
•
31

Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 8 
Observation: 
EVENT 4 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
 
Error 
 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_OF7 Result not presented to the user 
 
EXAMPLE:   
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- General  
- Data Output Function  
32
•
Bosse, Y. et al.

IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The program will run, but the result will not be presented to the user. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2243 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 11 
Observation: 
EVENT 2 
Student Id: 1963 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 1781 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 7.2 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
33

 
 
 
 
Occurred in submission: 1 
Observation: The result calculated within the 
repetition was not presented to the user. PS: 
The formula in this code is wrong. 
Fixed on submission: 3 
Observation: 
EVENT 4 
Student Id: 2061 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 8.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_AE1 Float result type in integer division 
 
EXAMPLE:   
 
34
•
Bosse, Y. et al.

 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Variable: Type Conversion  
- Arithmetic Expression  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
In a division of integer values, although the result may be of the real type, the C language stores 
as an integer unless the data type is converted to float. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 1858 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
Attempt 1: 
 
 
Attempt 2: 
 
 
Final: 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 8 
Observation: 
EVENT 2 
Student Id: 4930 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 4.1 
Catalogs of C and Python Antipatterns by CS1 Students
•
35

 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: The result generated by the 
operation on line 20 will be a value of type “int.” 
For the division to generate a "float" result, the 
divisor should be “2.0” or “(float)” should 
precede “(a + b)” to cast the operand (misuse 
of parentheses is another error dealt with in 
another table). 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 
Student Id: 2061 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 3 
Observation: This division generates a result 
of type "int" instead of "float." 
Fixed on submission: 6 
Observation: 
EVENT 4 
Student Id: 3139 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 7.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: Line 8 shows variables "sum" 
and "n" being declared as "int," however, the 
result stored in sum should be of type "float." 
Apart from making a mistake in the declaration, 
merely doing this division would not generate a 
float value in the variable "soma." 
Fixed on submission: 6 
Observation: The student solved the problem 
by declaring all variables as "float." 
36
•
Bosse, Y. et al.

A SUGGESTED SOLUTION 
FOR PROFESSORS 
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_AE2 Wrong arithmetic formula 
 
EXAMPLE:   
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Arithmetic Expression  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
Respecting the order of the operations is critical to generate a correct result. As written, the 
calculus will not be done in the desired order, i.e., first the sum and then the division. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_AE1 – Float result type in integer division  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4770 
Total of submissions of the exercise: 
13 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
37

 
Occurred in submission: 1 
Observation: To calculate the average, the 
sum should be in parentheses; otherwise, the 
division will be done first. 
Fixed on submission: 12 
Observation: 
EVENT 2 
Student Id: 4930 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 3 
Student Id: 2243 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4 
Student Id: 1781 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 7.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The goal was to do xn, so “y” 
would 
accumulate 
the 
results 
of 
the 
multiplications, but this is not happening. 
Fixed on submission: 6 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
38
•
Bosse, Y. et al.

Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_AE3 Calculation performed before having values in the used variables 
 
EXAMPLE:   
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- General: Execution Order  
- Variable  
- Data input function  
- Arithmetic Expression  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The sum was performed (line 4) before the values were typed by the user (line 5). 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 1781 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Lines 4 and 5 should be 
Fixed on submission: 2 
Observation: 
Catalogs of C and Python Antipatterns by CS1 Students
•
39

reversed. 
EVENT 2 
Student Id: 5098 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 5 
Observation: 
Fixed on submission: 12 
Observation: 
EVENT 3 
Student Id: 5226 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 7 
Observation: The sum operation on line 9 
used the variable “x,” but without assigning 
value to it. 
Fixed on submission: 8 
Observation: Operation deleted on the next 
submission, but other errors arose. These new 
errors will be addressed in other tables. 
EVENT 4 
Student Id: 1963 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 7.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Fixed on submission: 2 
40
•
Bosse, Y. et al.

Observation: The multiplication operation on 
line 9 uses variable “x,” but without assigning 
value to it. 
Observation: “Scanf” has been added to 
initialize the variable “x” used in line 7. 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_RE5 Comparison performed before having values in the used variables 
 
EXAMPLE:   
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Variable  
- Relational Expression  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The comparison will be made with so-called “memory junk", unknown and uncontrolled values. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 1781 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
41

 
 
 
 
Occurred in submission: 2 
Observation: In line 3 the variables “a” and “b” 
are declared without value assignment and in 
the next line, they are already compared. 
Fixed on submission: 3 
Observation: 
EVENT 2 
Student Id: 2243 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 3.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 1830 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: 
Fixed on submission: 6 
Observation: 
EVENT 4 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
 
Error 
 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
42
•
Bosse, Y. et al.

 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_SS1 Incorrect use of "{" and "}" opening or closing "if" or "else" 
 
EXAMPLE:   
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Selection Structure: If..else  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
Braces should be used when there is more than one command inside "if" and/or inside "else". The 
braces are opened just after the parentheses where the conditional expression is and are closed 
immediately before the "else" or where the conditional statements end. If there is more than one 
command to be executed by "else", the opening brace is placed immediately after "else" and 
closed after the completion of the commands that make up this structure. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2558 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
43

Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 
Student Id: 3167 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 1830 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: 
Fixed on submission: 4 
Observation: 
EVENT 4 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
 
Error 
 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
44
•
Bosse, Y. et al.

 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_SS4 Improper “;” after “if” condition and/or after “else” 
 
EXAMPLE:   
 
 
 
 
 
ERROR TYPE: 
X Syntax 
X Semantics 
 
Style 
CONTENT: 
- General 
- Selection Structure  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The semicolon right after the selection condition will cause it to end exactly at that point, and 
commands that should only be executed if the condition were true will execute regardless of the 
response. The same goes for "else". However, if a semicolon is placed after the "if" condition and 
it has an "else" associated with it, a compilation error occurs, meaning that the code will not be 
executed. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_G2 – Missing ";” at end of line 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 5098 
Total of submissions of the exercise: 
20 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 19 
Observation: 
Catalogs of C and Python Antipatterns by CS1 Students
•
45

EVENT 2 
Student Id: 5730 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 8 
Observation: 
EVENT 3 
Student Id: 2901 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: The "if" of line 21 has a 
semicolon at the end of the parentheses of the 
condition, 
causing 
the 
structure 
to 
be 
improperly terminated at that point. 
Fixed on submission: 9 
Observation: Because it is unnecessary, the 
"if" with the semicolon was eliminated in the 
penultimate submission. 
EVENT 4 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
 
Error 
 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
46
•
Bosse, Y. et al.

 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_RS3 Result printed in wrong place 
 
EXAMPLE:  
 
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Data Output Function  
- Repetition Structure: while  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
In some cases, it may occur that the result is displayed inside the repetition. However, in this case, 
it is wrong because it is an intermediate result and, being inside the repetition, all of such 
intermediate results will be shown”. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF7 – Result not presented to the user  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 5906 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
Fixed Error 
Catalogs of C and Python Antipatterns by CS1 Students
•
47

 
 
 
 
 
Occurred in submission: 1 
Observation: The "printf" that is inside the loop 
will make the intermediate result to be printed 
out every repetition, even though it is not the 
final result. 
Fixed on submission: 2 
Observation: The "printf" has been deleted 
from the loop (line 20), thus correcting the error. 
EVENT 2 
Student Id: 5730 
Total of submissions of the exercise: 
59 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: With “printf” on line 10, the result 
was printed on each repetition rather than 
presented only at the end. 
Fixed on submission: 10 
Observation: The "printf" was taken from inside 
the loop and placed outside in line 15. 
EVENT 3 
Student Id: 5242 
Total of submissions of the exercise: 
62 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 8 
Observation: 
Fixed on submission: 
Observation: 
EVENT 4 
Student Id: 1830 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 4.7 
48
•
Bosse, Y. et al.

 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 3 
Observation: The exercise asks to show the 
sum of all odd numbers of each of the n 
subsequences, i.e., "printf" should be right after 
the internal repeating structure closes. 
Fixed on submission: 6 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Apply the bench test (table test) in code samples with and without the error, compare the results – 
reinforce by asking the students to solve some exercises. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_F1 
Missing “return” 
 
EXAMPLE:    
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
Catalogs of C and Python Antipatterns by CS1 Students
•
49

CONTENT: 
- Function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
The lack of return may go unnoticed when the value is not needed in the program, as is often the 
case with return in the main function. However, the functions developed serve to process 
something and when programmed to return the value, the result is necessary for the continuity of 
the program, and a lack of return, in this case, will cause the results to fail. For this reason, a typed 
function must have a return on completion. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_F2 – Missing “{“ and / or “}” in function  
- C_F9 – Incorrect declaration of function parameters  
- C_F10 – “return” x “printf”  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2670 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 
Student Id: 2950 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 
Student Id: 5226 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
50
•
Bosse, Y. et al.

 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 4 
Student Id: 5554 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 4.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
 
 
 
Occurred in submission: 3 
Observation: The "fat" function does not 
return any value if the value of “n” received by 
the parameter is less than “0”. The student did 
not realize that in this case, the function of type 
"int" is without "return". 
Fixed on submission: 
Observation: The error has not been fixed. 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
51

 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_F2 
Missing “{“ and / or “}” in function 
 
EXAMPLE:  
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
Opening and closing curly braces are mandatory in function declaration; their absence causes a 
compilation error.  
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_F1 – Missing “return”  
- C_F9 – Incorrect declaration of function parameters  
- C_F10 – “return” x “printf”  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 5730 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
52
•
Bosse, Y. et al.

Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 
Student Id: 3167 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: Although many other errors 
persist, it was in the 2nd submission that the 
student noticed the lack of the closing brace. 
EVENT 3 
Student Id: 2950 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 5 
Observation: 
The 
student 
insisted 
on 
changing the selection structure from the 2nd 
to the 4th submission and only in the 5th 
submission could he compile the code by 
closing the function. Even the selection 
structure of the first submission was better 
designed by using the "else". 
EVENT 4 
Student Id: 2243 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
53

 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_F6 
Incorrect call of a typed function 
 
EXAMPLE:  
 
 
... 
 
 
... 
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
When calling a typed function, it is necessary for the caller to be prepared to receive the returned 
54
•
Bosse, Y. et al.

value. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 1858 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Line 33, except the semicolon, 
should replace “soma” on line 34. The same for 
lines 35/36. Another option would be to assign 
the returned value to a variable. 
Fixed on submission: 3 
Observation: The error was fixed on lines 34 
and 36. 
EVENT 2 
Student Id: 1963 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
55

 
 
 
 
Occurred in submission: 1 
Observation: Incorrect call on lines 6 and 7. 
Fixed on submission: 2 
Observation: In lines 6 and 7, the function call 
was placed inside "printf", solving the problem. 
EVENT 3 
Student Id: 5906 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: Lines 14 and 15 call the "soma" 
and 
"media" 
functions 
respectively, 
but 
incorrectly because the return value is not 
handled. 
Fixed on submission: 3 
Observation: The values returned were stored 
in the variables “calc” and “med”. 
EVENT 4 
Student Id: 1781 
Total of submissions of the exercise: 
14 
The exercise that was being solved: 
Exercise 8.1 
 
Error 
 
 
Fixed Error 
 
 
56
•
Bosse, Y. et al.

 
Occurred in submission: 1 
Observation: The problem with this call is the 
declaration of "j" and "v". In function calls, “int” 
within parentheses cannot exist. 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Apply the bench test (table test) in code samples with and without the error, compare the results – 
reinforce by asking the students to solve some exercises. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_F9 
Incorrect declaration of function parameters 
 
 EXAMPLE:  
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Função: passando parâmetro  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
Parameters are variables that will receive values from where the function was called so that it can 
perform the proposed task. These variables need to be declared in parentheses immediately after 
the function name at the place of its creation. Each of these variables is given a type, placed 
immediately before its name and are separated from each other with commas. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_F1 – Missing “return”  
- C_F2 – Missing “{“ and / or “}” in function  
- C_F10 – “return” x “printf”  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 1830 
Total of submissions of the exercise: 
10 
Catalogs of C and Python Antipatterns by CS1 Students
•
57

The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
 
Occurred in submission: 1 
Observation: Lines 2 and 7 have parameters 
“a” and “b” incorrectly declared. 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 2 
Student Id: 2040 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
 
Occurred in submission: 1 
Observation: Line 3 has parameters “a” and “b” 
incorrectly declared. 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 
Student Id: 3139 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
 
58
•
Bosse, Y. et al.

Occurred in submission: 2 
Observation: Line 3 has parameters “a” and “b” 
incorrectly declared. 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 4 
Student Id: 2131 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 2 
Observation: Line 3 has parameters “a” and “b” 
incorrectly declared. 
Fixed on submission: 3 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
C_F10 
“return” x “printf” 
 
EXAMPLE:  
 
 
... 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
59

 
... 
 
 
 
 
 
ERROR TYPE: 
 
Syntax 
 
Semantics 
X Style 
CONTENT: 
- Data Output Function  
- Function: Return value  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
 
Python 
 
PROBLEM: 
When the function is set to return the calculated value, it must return it, and the responsibility for 
printing lies with the function that receives the return and not with the function that generated the 
result. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_F1 – Missing “return”  
- C_F2 – Missing “{“ and / or “}” in function  
- C_F9 – Incorrect declaration of function parameters  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 5226 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 7.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
 
Occurred in submission: 1 
Observation: The function should return 
Fixed on submission: 
Observation: The error has not been fixed. 
60
•
Bosse, Y. et al.

"result" on line 26 and the "printf" call on line 25 
should be in the function where it was called. 
EVENT 2 
Student Id: 2950 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: The result should be printed and 
not returned, as was done on lines 6 and 8. 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 5098 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The values “1” and “0” should be 
printed and not returned, as was done on lines 
10 and 13. 
Fixed on submission: 4 
Observation: 
EVENT 4 
Student Id: 5554 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 4.2 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
61

 
 
 
 
Occurred in submission: 2 
Observation: The "fat" function returns the 
result of the calculation for the "main" function 
which receives this value in the variable 
"resultadofatorial" (factorial result) (line 9), but 
the result is printed inside the “fat” function and 
not in “main”, after receiving the value (line 9). 
Fixed on submission: 3 
Observation: Error partially corrected on the 
next submission because “-1” is still being 
printed on “fat” (line 20) instead of returning this 
value to be printed on “main” on line 10. If the 
result was “-1”, “Fat” will print “-1” and "main" will 
print some “garbage” existing in the memory 
inside the variable “resultadodafatorial" (factorial 
result), usually the value “0”. 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Apply the bench test (table test) in code samples with and without the error, compare the results – 
reinforce by asking the students to solve some exercises. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
62
•
Bosse, Y. et al.

 
 
 
 
 
ANTIPATTERNS CATALOG IN PYTHON 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_V2 
Use of reserved word for variable name 
 
EXAMPLE:   
 
 
 
ERROR TYPE:  
X Syntax  
 
Semantics  
 
Style  
CONTENT:  
- General: Identifier names  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
Reserved words such as "print," "int," "input," among others, cannot be used for identifiers, such 
as variable names. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- V1 – Use of nonexistent variable  
- V3 – Assignment using “==” instead of “=”  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 3237 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Fixed on submission: 2 
Catalogs of C and Python Antipatterns by CS1 Students
•
63
Appendix D – Antipattern Catalog in Python
Below, we present the catalog of antipatterns found in code developed using Python as
programming language.

Observation: Used the reserved word “int” to 
name the variable. 
Observation: 
EVENT 2 
Student Id: 4730 
Total of submissions of the exercise: 
16 
The exercise that was being solved: 
Exercise 1.1  
 
Error 
 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Used the reserved word “int” to 
name the variable. 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 
Student Id: 3498 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 3.3  
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Instead of "int" should have a 
value or a variable. 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 4 
Student Id: 2068 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 7.2  
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: Instead of "float" should have a 
value or a variable. 
Fixed on submission: 
Observation: The error has not been fixed. 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
64
•
Bosse, Y. et al.

Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS  
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_V4 
Incorrect data type conversion 
 
EXAMPLE:  
 
 
 
ERROR TYPE: 
X Syntax  
 
Semantics  
 
Style  
CONTENT:  
- Type Conversion  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
The conversion syntax must be maintained for the compiler to understand, and Python type 
conversion is done by enclosing the type name followed by parentheses with the data to be 
converted. Ex .: int (“1234”) 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- P_V5 – Missing type conversion  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4762 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
There 
are 
missing 
the 
Fixed on submission: 5 
Observation: 
Catalogs of C and Python Antipatterns by CS1 Students
•
65

parentheses with the parameter of what will be 
converted, right after "int". 
EVENT 2 
Student Id: 5594 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The "int" and the "input" are in 
reverse order. 
Fixed on submission: 4 
Observation: 
EVENT 3 
Student Id: 4842 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: After this "int" must have 
parentheses. 
Fixed on submission: 4 
Observation: 
EVENT 4  
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error  
 
 
 
Fixed Error  
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
66
•
Bosse, Y. et al.

ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_V5 
Missing type conversion 
 
EXAMPLE:  
 
 
 
ERROR TYPE: 
 
Syntax  
X Semantics  
 
Style  
CONTENT:  
- Variable: Type Conversion  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
Failure to convert, when necessary, will make the data not be in the proper format so that the 
program can work. This error will be noticed during program execution. 
 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- P_V4 – Incorrect data type conversion 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 5594 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The conversion of input data to 
numeric type is missing. 
Fixed on submission: 3 
Observation: 
EVENT 2  
Student Id: 4730 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3  
Student Id: 4762 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Catalogs of C and Python Antipatterns by CS1 Students
•
67

Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4  
Student Id: 4842 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_IF4 
Missing parentheses in “input” 
 
EXAMPLE:  
 
 
 
ERROR TYPE:  
X Syntax  
 
Semantics  
 
Style  
CONTENT:  
- Data input function  
- Function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
68
•
Bosse, Y. et al.

PROBLEM:  
Every function name is followed by parentheses used to put parameters, even if they do not exist. 
Since "input" is a function, it must be followed by parentheses. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- P_IF4 - Missing quotes in the input function call  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4746 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Parentheses are missing right 
after “input.” 
Fixed on submission: 2 
Observation: 
EVENT 2  
Student Id: 4690 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 3  
Student Id: 4962 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4  
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error  
 
 
 
Fixed Error  
 
Catalogs of C and Python Antipatterns by CS1 Students
•
69

Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_OF5 
“print” followed by “=” or other incorrect parameter 
 
EXAMPLE:  
 
 
 
ERROR TYPE:  
X Syntax  
 
Semantics  
 
Style  
CONTENT:  
- Data Output Function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
The “=” sign is used for assignment and since “print” is not a variable, it cannot be followed by this 
sign. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- P_OF2 – Missing quotation mark in output function  
- P_OF4 – Missing comma to separate parameters in data output function  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4858 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
70
•
Bosse, Y. et al.

Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2  
Student Id: 3498 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The '%d' will be considered text, 
but the "%" in front of the variable "soma" is 
wrong because the student wanted to print the 
value stored in "soma". 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 
Student Id: 4698 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 4 
Observation: 
EVENT 4  
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error  
 
 
 
Fixed Error  
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
71

 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_AE2 Wrong arithmetic operator 
 
EXAMPLE:  
 
 
 
ERROR TYPE:  
X Syntax  
 
Semantics  
 
Style  
CONTENT:  
- Arithmetic Expression 
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
Each operation has its own operator. Using a wrong operator may cause a syntax error as it does 
not exist within the Python language or, if it exists, will give a semantic error as it will not generate 
the expected result. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4858 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: Used operator “^” instead of “**.” 
Fixed on submission: 2 
Observation: 
EVENT 2  
Student Id: 4914 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 5002 
Total of submissions of the exercise: 
2 
72
•
Bosse, Y. et al.

The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4  
Student Id: 4954 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_SS1 Missing “:” at end of “if” or “else” line 
 
EXAMPLE:  
 
 
 
 
ERROR TYPE:  
X Syntax  
 
Semantics  
 
Style  
Catalogs of C and Python Antipatterns by CS1 Students
•
73

CONTENT:  
- Selection structure 
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
Colon “:” indicates the beginning of a block, so after “if” and “else” it must be inserted in the code. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- SS2 – Not using "else" where it would be appropriate to do so  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 2068 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Missing ":" at the end of the "if" 
and "else" lines. 
Fixed on submission: 3 
Observation: 
EVENT 2  
Student Id: 2257 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 4698 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
Fixed Error 
 
74
•
Bosse, Y. et al.

 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 4 
Observation: 
EVENT 4  
Student Id: 4794 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_RS1 Wrong sequence of commands in structure 
 
EXAMPLE:  
Catalogs of C and Python Antipatterns by CS1 Students
•
75

 
 
 
ERROR TYPE:  
 
Syntax  
X Semantics  
 
Style  
CONTENT:  
- Repetition structure: execution  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
The order of the commands influences the result of the program, so it is essential to take care of 
the order stipulated for the commands used. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4962 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
Fixed Error 
` 
76
•
Bosse, Y. et al.

 
 
 
Occurred in submission: 1 
Observation: Each time you pass the line “l = []” 
all values of the array will be deleted. 
Fixed on submission: 6 
Observation: The initialization of the array 
was placed out of repetition. 
EVENT 2  
Student Id: 3498 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: The reading of the value for "c" 
(2nd line) should be done within the "while" 
because it needs to repeat "n" times. 
Fixed on submission: 5 
Observation: 
EVENT 3 
Student Id: 4674 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 4 
Observation: The reading of the value for "x" 
(2nd line) should be done within the "while" 
because it needs to repeat "n" times. 
Fixed on submission: 5 
Observation: 
EVENT 4  
Student Id: 5626 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 8.1 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
77

Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The command “ordem = False” 
should be before “for” and the structure “if order:” 
after. 
Fixed on submission: 
Observation: The error has not been fixed. 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_SRS1 
Use of repetition structure where selection should be 
 
EXAMPLE:  
 
 
 
ERROR TYPE:  
 
Syntax  
X Semantics  
 
Style  
CONTENT:  
- Selection structure  
78
•
Bosse, Y. et al.

- Repetition structure  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
Each structure has its purpose. Using repetition where only selection would be required will cause 
wrong results. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4890 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Instead of the "while," it should be 
an "if." 
Fixed on submission: 
Observation: The error has not been fixed.  
EVENT 2  
Student Id: 4914 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 5 
Observation: Instead of the "while," it should be 
an "if." 
Fixed on submission: 7 
Observation: 
EVENT 3 
Student Id: 4970 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
Fixed Error 
Catalogs of C and Python Antipatterns by CS1 Students
•
79

 
 
 
 
 
 
Occurred in submission: 1 
Observation: "While" was used to verify that the 
values of "a", "b" and "c" are greater than 0 
(zero). Although this check is not necessary for 
context, this check should have been used "if." 
Fixed on submission: 2 
Observation: 
EVENT 4  
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error  
 
 
 
Fixed Error  
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_MDA1 
Wrong creation of multi-dimensional array lines 
 
EXAMPLE:  
 
80
•
Bosse, Y. et al.

 
 
 
ERROR TYPE:  
 
Syntax  
X Semantics  
 
Style  
CONTENT:  
- Matrix: Creation  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
Incorrectly creating an array row will cause the program to work improperly because the program 
will be incorrectly storing data. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 5538 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 13.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The line "linha= []" that creates the 
matrix line must be between the two "for" or 
repeated after "A.append (line)." As it stands, the 
second row will hold data from the first, the third 
from the second, and so on. 
Fixed on submission: 9 
Observation: 
Catalogs of C and Python Antipatterns by CS1 Students
•
81

EVENT 2  
Student Id: 5714 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 13.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The line "l = []" that creates the 
matrix line must be between the two "for" or to 
be repeated after "A.append (l)". 
Fixed on submission: 6 
Observation: 
EVENT 3 
Student Id: 4946 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 13.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
Occurred in submission: 1 
Observation: The line "l = []" that creates the 
matrix line must be between the two "for" or to 
be repeated after "matriz.append(linha).” 
Fixed on submission: 10 
Observation: 
EVENT 4  
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error  
 
 
 
Fixed Error  
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION  
82
•
Bosse, Y. et al.

FOR PROFESSORS  
Apply the bench test (table test) in code samples with and without the error, compare the results – 
reinforce by asking the students to solve some exercises. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
P_F8 
Function created but not called 
 
EXAMPLE:  
 
 
 
ERROR TYPE:  
 
Syntax  
X Semantics 
 
Style  
CONTENT:  
- Function: Call  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
 
C 
X 
Python 
 
PROBLEM:  
With the creation of a function, it is assumed that it is necessary for the correct operation of the 
program. Creating it but not calling it will cause that any task that the program needs to perform 
will not be executed. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 
Student Id: 4826 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
83

 
 
 
Occurred in submission: 3 
Observation: The “main” function was created 
but not called. 
Fixed on submission: 4 
Observation: 
EVENT 2 
Student Id: 4842 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 
Student Id: 4850 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 1 
Observation: 
EVENT 4  
Student Id: 4674 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
84
•
Bosse, Y. et al.

 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION  
FOR PROFESSORS  
Programming in front of the students, making the error appear – reinforce by asking students to 
develop new codes. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
85

 
 
 
 
 
ANTIPATERNS CATALOG IN C AND PYTHON 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
G1 
Lack of indentation 
 
EXAMPLES:  
(C) 
 
 
(Python) 
 
 
 
 
ERROR TYPE: 
(TIPO DE ERRO) 
X (P) 
Syntax 
 
Semantics 
X (C) Style 
CONTENT: 
- General  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - Lack of indentation is not exactly an error when using C language but highly recommended 
in any language to give readability to code.  
Python - Indentation is required in the Python language. Lack of it causes the program not to 
run. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 1781 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
Fixed Error 
d
d
86
•
Bosse, Y. et al.
Appendix E – Antipattern Catalog in Both, C and
Python
Below, we present the catalog of antipatterns found in code developed using Python and C
as well.

 
 
 
 
 
 
Occurred in submission: 1 
Observation: Lack of indentation is a bad 
programming practice that will compromise 
code readability. 
Fixed on submission: 
Observation: The indentation has not been 
corrected. 
EVENT 2 – C 
Student Id: 5554 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
Occurred in submission: 1 
Observation: Lack of indentation is a bad 
programming practice that will cause code 
viewing to be compromised. 
Fixed on submission: 
Observation: The indentation has not been 
corrected. 
EVENT 3 – C 
Student Id: 4930 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
87

 
Occurred in submission: 1 
Observation: Lack of indentation is a bad 
programming practice that will cause code 
viewing to be compromised. 
Fixed on submission: 4 
Observation: In the 4th submission the student 
indented part of the code and was improving 
during the following submissions. 
EVENT 4 – C 
Student Id: 2040 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Occurred in submission: 1 
Observation: Lack of indentation is a bad 
programming practice that will cause code 
viewing to be compromised. 
Fixed on submission: 
Observation: The indentation has not been 
corrected. 
EVENT 1 – Python 
 
Student Id: 4666 
Total of submissions of the exercise: 
12 
 
The exercise that was being solved: 
Exercise 1.1 
 
 
Error 
 
 
Fixed Error 
 
 
88
•
Bosse, Y. et al.

 
 
 
Occurred in submission: 11 
Observation: 
Fixed on submission: 12 
Observation: In reality, the student did not 
get the indentation, he solved the problem by 
removing the statement of the function that 
required indentation. 
 
EVENT 2 – Python 
 
Student Id: 2635 
Total of submissions of the exercise: 
7 
 
The exercise that was being solved: 
Exercise 2.1 
 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 7 
Observation: 
 
EVENT 3 – Python 
 
Student Id: 4698 
Total of submissions of the exercise: 
5 
 
The exercise that was being solved: 
Exercise 2.1 
 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
 
Occurred in submission: 2 
Observation: Python requires indentation to 
work, even if it is only on one line, as is the 
case with the "print" line, it will not work. 
Fixed on submission: 4 
Observation: 
 
EVENT 4 – Python 
 
Student Id: 4826 
Total of submissions of the exercise: 
4 
 
The exercise that was being solved: 
Exercise 4.1 
 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
89

 
 
 
Occurred in submission: 3 
Observation: The "return" is not indented 
correctly. 
Fixed on submission: 4 
Observation: 
 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
V1 
Use of nonexistent variable 
 
EXAMPLES:  
 
(C) 
 
 
 
(Python) 
 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Variable: declaration  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - When using an identifier, such as variable names, constants, structs, etc., it is necessary to 
tell the C language program what the identifier refers to. In the case of undeclared variables, the 
compiler will not be able to identify what that name is about in this scope.  
Python - Python variable declaration is by assignment, which will define its data type. Using the 
90
•
Bosse, Y. et al.

variable before the assignment will generate an error. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- P_V2 – Use of reserved word for variable name  
- V3 – Assignment using “==” instead of “=”  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 3430 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 5 
Observation: This error was made when the 
student was trying to solve another one 
(C_OF1). 
Fixed on submission: 6 
Observation: 
EVENT 2 – C 
Student Id: 4930 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 4 
Observation: Variables “a” and “b” were used 
from line 10, but they were not declared. 
Fixed on submission: 5 
Observation: 
EVENT 3 – C 
Student Id: 5098 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
91

 
 
 
 
Occurred in submission: 1 
Observation: Variables “a”, “b,” and “c” were 
used from line 3, but they were not declared. 
Fixed on submission: 2 
Observation: 
EVENT 4 – C 
Student Id: 1781 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The variable “m” had not been 
declared. 
Fixed on submission: 2 
Observation: 
EVENT 1 – Python 
Student Id: 2068 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The variable “a” does not exist. 
Fixed on submission: 2 
Observation: 
EVENT 2 – Python 
Student Id: 4666 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 5 
Observation: The variable “a” does not exist. 
Fixed on submission: 7 
Observation: 
EVENT 3 – Python 
Student Id: 5650 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
92
•
Bosse, Y. et al.

Exercise 8.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The "cont" variable used in the 
"while" condition is nonexistent. 
Fixed on submission: 4 
Observation: 
EVENT 4 – Python 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Groups working with step-by-step execution to understand errors – reinforce with exercises. 
FOR STUDENTS 
Study one or more antipatterns, introduce to classmate and reinforce with exercise. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
V3 
Assignment using “==” instead of “=” 
 
EXAMPLES:    
 
(C) 
 
 
 
(Python)  
 
 
 
ERROR TYPE: 
(TIPO DE ERRO) 
X(P) 
Syntax 
X(C) 
Semantics 
 
Style 
CONTENT: 
- Variable: attribution 
Catalogs of C and Python Antipatterns by CS1 Students
•
93

IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - The program will execute, but will not run properly, because the compiler understands the "==" 
as being used for comparison and not for assignment.  
Python - If “==” is used to first assign value to a variable, i.e., to declare it, it will cause a syntax 
error and the program will not execute. Otherwise, the program will execute, disregarding the 
assignment line with “==” because the compiler will understand that command as a comparison. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- RE2 – Use of “=” instead of “==”  
- V1 – Use of nonexistent variable  
- P_V2 – Use of reserved word for variable name  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 2950 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 3 
Observation: The assignment is made 
with "=" not "==," which is used in 
comparisons. 
Fixed on submission: 4 
Observation: 
EVENT 2 – C 
Student Id: 2936 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 7.4 
 
Error 
 
 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 6 
Observation: 
Fixed on submission: 
Observation: Uncorrected error. The student 
deleted line 7 where the error was and practically all 
the code for not being able to generate the expected 
result. 
EVENT 3 – C 
Student Id: 2558 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 1.2 
94
•
Bosse, Y. et al.

 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4 – C 
Student Id: 1830 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 1 – Python 
Student Id: 4666 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 3 
Observation: Used “==” instead of “=” to 
assign read value to the variable. 
Fixed on submission: 5 
Observation: 
EVENT 2 – Python 
Student Id: 4978 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 3.3 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 3 – Python 
Student Id: 4914 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Fixed on submission: 2 
Catalogs of C and Python Antipatterns by CS1 Students
•
95

Observation: 
Observation: 
EVENT 4 – Python 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
IF2 
Missing quotes in the input function call  
 
EXAMPLES:    
 
(C) 
 
 
 
(Python)  
 
 
 
ERROR TYPE: 
X 
Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Data input function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - The compiler does not understand what "%d" is and reports that "d" was not declared in the 
current scope. The program will not run.  
Python – The text inside the parentheses following the “input” command is used to write a 
statement to the user about what the program expects them to type. This statement must be 
enclosed in double-quotes. Missing quotation marks will generate a syntax error causing the 
program not to run. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_IF1 – Missing "&" in front of variable in "scanf"  
96
•
Bosse, Y. et al.

- C_IF6 – Missing “,” to separate first from second parameter in “scanf”  
- P_IF4 – Missing parentheses in “input” 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 2950 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 – C 
Student Id: 3529 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
Attempt (Tentativa) 1: 
 
 
Final (Final): 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 4 
Observation: 
EVENT 3 – C 
Student Id: 5226 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been 
fixed. 
EVENT 4 – C 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error 
 
Fixed Error 
Catalogs of C and Python Antipatterns by CS1 Students
•
97

 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
EVENT 1 – Python 
Student Id: 4762 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 – Python 
Student Id: 4786 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 – Python 
Student Id: 4730 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Missing double quotation marks 
before the word "Digite" (type). 
Fixed on submission: 2 
Observation: 
EVENT 4 – Python 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
98
•
Bosse, Y. et al.

 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
OF2 
Missing quotes in output function 
 
EXAMPLES:    
 
(C) 
 
 
 
(Python) 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Data output function  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - The compiler does not understand what "%d" is and reports that "d" was not declared in the 
current scope. The program will not run. 
Python - When outputting a string, it must be enclosed in double quotation marks after the print 
command. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF1 – Improper use of "&" in front of variable in "printf"  
- C_OF3 – Wrong spelling of “printf” command  
- C_OF5 – Parameter identifying incorrect or non-existent output data type  
- C_OF6 – Use of "&" instead of "%" in “printf”  
- OF4 – Missing comma to separate parameters in data output function  
- P_OF5 – “print” followed by “=” or other incorrect parameter  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 2950 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 1.1 
 
Error 
 
 
 
Fixed Error 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
99

 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 2 – C 
Student Id: 1963 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 – C 
Student Id: 1830 
Total of submissions of the exercise: 
10 
The exercise that was being solved: 
Exercise 4.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The variable is missing to know 
the value to be printed, as well as other errors. 
Fixed on submission: 2 
Observation: 
EVENT 4 – C 
Student Id: 4922 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 2.2 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 1 – Python 
Student Id: 4826 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
Fixed Error 
 
 
100
•
Bosse, Y. et al.

 
 
Occurred in submission: 1 
Observation: Missing double quotation marks 
within the parentheses of the two "print" 
commands. 
Fixed on submission: 2 
Observation: 
EVENT 2 – Python 
Student Id: 4874 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The words "Sim" and "NAO" 
within the "print" must be enclosed in quotation 
marks. 
Fixed on submission: 4 
Observation: 
EVENT 3 – Python 
Student Id: 3498 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4 – Python 
Student Id: 4682 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
101

 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
OF4 
Missing comma to separate parameters in data output function 
 
EXAMPLES:   
 
(C) 
 
 
 
(Python) 
 
 
 
ERROR TYPE: 
X Syntax 
 
Semantics 
 
Style 
CONTENT: 
- Data output function  
- Function: passing parameter  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - The compiler does not understand that the comma is missing and identifies this point as the 
end of the parameters of the output function, informing that it expected to find a “)”.  
Python - The compiler does not understand parameters that are not separated with a comma, 
causing the program not to run. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- C_OF1 – Improper use of "&" in front of variable in "printf"  
- C_OF3 – Wrong spelling of “printf” command  
- OF2 – Missing quotes in output function  
- C_OF6 – Use of "&" instead of "%" in “printf”  
- C_OF5 – Parameter identifying incorrect or non-existent output data type  
- P_OF5 – “print” followed by “=” or other incorrect parameter  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 2810 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
102
•
Bosse, Y. et al.

Occurred in submission: 4 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 2 – C 
Student Id: 3167 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 – C 
Student Id: 5554 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 7.4 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4 – C 
Student Id: 2061 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 7.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 1 – Python 
Student Id: 4914 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 5 
Observation: Both "print" commands lack the 
required comma to separate the first from the 
second parameter. 
Fixed on submission: 6 
Observation: 
EVENT 2 – Python 
Student Id: 4682 
Total of submissions of the exercise: 
3 
Catalogs of C and Python Antipatterns by CS1 Students
•
103

The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Missing comma to separate 
"print" parameters (Note: instead of "/n" should 
be "\n" and need to be enclosed in double 
quotes (antipattern P_OF2)) 
Fixed on submission: 2 
Observation: Instead of adding commas to 
separate variables, it was separated into more 
"print." 
EVENT 3 – Python 
Student Id: 5010 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: Both "print" lack comma to 
separate the first from the second parameter. 
Fixed on submission: 4 
Observation: 
EVENT 4 – Python 
Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
 
 
 
104
•
Bosse, Y. et al.

ANTIPATTERN GENERAL DATA 
ID 
TITLE 
RE1 
Use of “=” instead of “==” 
 
EXAMPLES:   
 
(C) 
 
 
 
(Python) 
 
 
 
ERROR TYPE: 
C (P) 
Syntax 
X (C) 
Semantics 
 
Style 
CONTENT: 
- Variable: attribution  
- Relational expression  
- Selection structure: if  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C - Within parentheses after the "if" there should be a relational expression resulting in "True" or 
"False," but using only an equals sign "=" is attribution and not a comparison. For relational 
expressions, when you want to compare whether one value is equal to another, two equal signs 
together “==” are used.  
Python - Equality check relational expressions use the "==" sign. Improper use of "=," which 
means assignment, where there should be "==," will cause the program not to run. 
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- V3 – Assignment using “==” instead of “=”  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 1781 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 4 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 2 – C 
Student Id: 2950 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
105

Occurred in submission: 2 
Observation: 
Fixed on submission: 5 
Observation: 
EVENT 3 – C 
Student Id: 1830 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4 – C 
Student Id: 3300 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 4 
Observation: 
EVENT 1 – Python 
Student Id: 4850 
Total of submissions of the exercise: 
15 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: For comparison “==” and not “=” 
is used. 
Fixed on submission: 14 
Observation: 
EVENT 2 – Python 
Student Id: 4890 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 3 – Python 
Student Id: 4914 
Total of submissions of the exercise: 
11 
The exercise that was being solved: 
Exercise 3.1 
106
•
Bosse, Y. et al.

 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
EVENT 4 – Python 
Student Id: 2558 
Total of submissions of the exercise: 
2 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Explanation using blackboard and projector – reinforce the concept using Kahoot. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
SS2 
Not using "else" where it would be appropriate to do so 
 
EXAMPLES:   
 
(C) 
 
 
 
(Python) 
 
 
Catalogs of C and Python Antipatterns by CS1 Students
•
107

 
ERROR TYPE: 
 
Syntax 
 
Semantics 
X Style 
CONTENT: 
- Selection structure: if..else  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C and Python - The structure can give the expected result, but since only one of the selections 
can be true, the second would only need to be checked if the first were false.  
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
- P_SS1 – Missing “:” at end of “if” or “else” line  
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 1781 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 2 – C 
Student Id: 2040 
Total of submissions of the exercise: 
8 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 – C 
Student Id: 2061 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
 
108
•
Bosse, Y. et al.

Error 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 4 – C 
Student Id: 5730 
Total of submissions of the exercise: 
6 
The exercise that was being solved: 
Exercise 3.1 
 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 1 – Python 
Student Id: 4674 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
Attempt (Tentativa) 1: 
 
 
Final (Final): 
 
 
 
Occurred in submission: 4 
Observation: As the above selection structure 
was set up, before the second "if" an "else" is 
Fixed on submission: 6 
Observation: 
Catalogs of C and Python Antipatterns by CS1 Students
•
109

required. 
EVENT 2 – Python 
Student Id: 4730 
Total of submissions of the exercise: 
7 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 6 
Observation: 
EVENT 3 – Python 
Student Id: 4794 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 3 
Observation: 
EVENT 4 – Python 
Student Id: 4826 
Total of submissions of the exercise: 
21 
The exercise that was being solved: 
Exercise 2.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: 
Fixed on submission: 2 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Apply the bench test (table test) in code samples with and without the error, compare the results – 
reinforce by asking the students to solve some exercises. 
FOR STUDENTS 
Solve exercises, add code errors, and ask classmate to find them. 
 
110
•
Bosse, Y. et al.

 
 
 
ANTIPATTERN GENERAL DATA 
ID 
TITLE 
RS2 
Control variable is not change 
 
EXAMPLES:   
 
(C) 
 
 
 
  (Python) 
 
 
 
 
ERROR TYPE: 
 
Syntax 
X Semantics 
 
Style 
CONTENT: 
- Repetition structure: while  
IN WHAT LANGUAGE WAS THE MISTAKE MADE? 
X 
C 
X 
Python 
 
PROBLEM: 
C and Python: The program will go into an infinite loop because, since the control variable is never 
changed, the result of the condition that controls the repetition will not change either.  
 
CONNECTIONS TO OTHER ANTIPATTERNS: 
 
EVENTS 
Note: In the code snippets presented below, only the antipattern question of this table was analyzed. If 
other errors exist, these errors have been handled in other antipatterns. 
EVENT 1 – C 
Student Id: 3300 
Total of submissions of the exercise: 
4 
The exercise that was being solved: 
Exercise 3.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The control variable “aux” was 
initialized to 0 (zero) but did not change its value 
within the “while,” generating infinite repetitions. 
Fixed on submission: 3 
Observation: Error fixed by adding the 
increment in line 16. 
EVENT 2 – C 
Catalogs of C and Python Antipatterns by CS1 Students
•
111

Student Id: 1781 
Total of submissions of the exercise: 
12 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: It will go into infinite repetition 
because of control variable “a” is not changing 
its value. 
Fixed on submission: 
Observation: The error has not been fixed. 
EVENT 3 – C 
Student Id: 4770 
Total of submissions of the exercise: 
3 
The exercise that was being solved: 
Exercise 4.7 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: Control variable “j” is initialized 
(line 6), compared (line 7), but has not changed 
its value, which should happen between lines 
10 and 11. 
Fixed on submission: 3 
Observation: 
EVENT 4 – C 
Student Id: 1963 
Total of submissions of the exercise: 
21 
The exercise that was being solved: 
Exercise 8.1 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: The control variable “i” of “while” 
Fixed on submission: 4 
Observation: 
112
•
Bosse, Y. et al.

did not change its value within the repetition. 
EVENT 1 – Python 
Student Id: 3498 
Total of submissions of the exercise: 
5 
The exercise that was being solved: 
Exercise 7.4 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 2 
Observation: Control variable “i” is not change 
within “while,” causing infinite repetitions. 
Fixed on submission: 3 
Observation: 
EVENT 2 – Python 
Student Id: 4690 
Total of submissions of the exercise: 
16 
The exercise that was being solved: 
Exercise 7.4 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Control variable “n” is not 
changing 
within 
“while,” 
causing 
infinite 
repetition. 
Fixed on submission: 3 
Observation: 
EVENT 3 – Python 
Student Id: 4730 
Total of submissions of the exercise: 
9 
The exercise that was being solved: 
Exercise 7.4 
 
Error 
 
 
 
 
Fixed Error 
 
 
 
Occurred in submission: 1 
Observation: Disregarding other errors and 
looking at the "while" repetition structure, the 
control variable "n" is not changing, causing 
infinite repetition. 
Fixed on submission: 9 
Observation: 
EVENT 4 – Python 
Catalogs of C and Python Antipatterns by CS1 Students
•
113

Student Id: 
Total of submissions of the exercise: 
 
The exercise that was being solved: 
 
Error 
 
 
Fixed Error 
 
Occurred in submission: 
Observation: 
Fixed on submission: 
Observation: 
A SUGGESTED SOLUTION 
FOR PROFESSORS 
Apply the bench test (table test) in code samples with and without the error, compare the results – 
reinforce by asking the students to solve some exercises. 
FOR STUDENTS 
Introduce the error into a code and understand the consequences it generates. 
 
 
114
•
Bosse, Y. et al.

