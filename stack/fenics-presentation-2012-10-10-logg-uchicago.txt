The FEniCS Project
Presented by Anders Logg∗
Simula Research Laboratory, Oslo
University of Chicago
2012–10–09
∗Credits: http://fenicsproject.org/about/team.html
1 / 40

What is FEniCS?
2 / 40

FEniCS is an automated programming
environment for diﬀerential equations
• C++/Python library
• Initiated 2003 in Chicago
• 1000–2000 monthly downloads
• Part of Debian and Ubuntu
• Licensed under the GNU LGPL
http://fenicsproject.org/
Collaborators
Simula Research Laboratory, University of Cambridge,
University of Chicago, Texas Tech University, University of
Texas at Austin, KTH Royal Institute of Technology, . . .
3 / 40

FEniCS is automated FEM
• Automated generation of basis functions
• Automated evaluation of variational forms
• Automated ﬁnite element assembly
• Automated adaptive error control
4 / 40

FEniCS is automated scientiﬁc computing
Input
• A(u) = f
• ϵ > 0
Output
• Approximate solution:
uh ≈u
• Guaranteed accuracy:
∥u −uh∥≤ϵ
5 / 40

How to use FEniCS?
6 / 40

Installation
Oﬃcial packages for Debian and Ubuntu
Drag and drop installation on Mac OS X
Binary installer for Windows
Automated installation from source
7 / 40

Hello World in FEniCS: problem formulation
Poisson’s equation
−∆u = f
in Ω
u = 0
on ∂Ω
Finite element formulation
Find u ∈V such that
Z
Ω
∇u · ∇v dx
|
{z
}
a(u,v)
=
Z
Ω
f v dx
|
{z
}
L(v)
∀v ∈V
8 / 40

Hello World in FEniCS: implementation
from
dolfin
import *
mesh = UnitSquare(32 , 32)
V = FunctionSpace (mesh , "Lagrange", 1)
u = TrialFunction (V)
v = TestFunction(V)
f = Expression("x[0]*x[1]")
a = dot(grad(u), grad(v))*dx
L = f*v*dx
bc = DirichletBC(V, 0.0, DomainBoundary ())
u = Function(V)
solve(a == L, u, bc)
plot(u)
9 / 40

Linear elasticity
Diﬀerential equation
Diﬀerential equation:
−∇· σ(u) = f
where
σ(v) = 2µϵ(v) + λtr ϵ(v) I
ϵ(v) = 1
2(∇v + (∇v)⊤)
• Displacement u = u(x)
• Stress σ = σ(x)
10 / 40

Linear elasticity
Variational formulation
Find u ∈V such that
a(u, v) = L(v)
∀v ∈ˆV
where
a(u, v) = ⟨σ(u), ϵ(v)⟩
L(v) = ⟨f, v⟩
10 / 40

Linear elasticity
Implementation
element = VectorElement("Lagrange", "tetrahedron", 1)
v = TestFunction(element)
u = TrialFunction(element)
f = Function(element)
def epsilon(v):
return 0.5*(grad(v) + grad(v).T)
def sigma(v):
return 2.0*mu*epsilon(v) + lmbda*tr(epsilon(v))*I
a = inner(sigma(u), epsilon(v))*dx
L = dot(f, v)*dx
10 / 40

Poisson’s equation with DG elements
Diﬀerential equation
Diﬀerential equation:
−∆u = f
• u ∈L2
• u discontinuous across
element boundaries
11 / 40

Poisson’s equation with DG elements
Variational formulation (interior penalty method)
Find u ∈V such that
a(u, v) = L(v)
∀v ∈V
where
a(u, v) =
Z
Ω
∇u · ∇v dx
+
X
S
Z
S
−⟨∇u⟩· JvKn −JuKn · ⟨∇v⟩+ (α/h)JuKn · JvKn dS
+
Z
∂Ω
−∇u · JvKn −JuKn · ∇v + (γ/h)uv ds
L(v) =
Z
Ω
fv dx +
Z
∂Ω
gv ds
11 / 40

Poisson’s equation with DG elements
Implementation
V = FunctionSpace(mesh, "DG", 1)
u = TrialFunction(V)
v = TestFunction(V)
f = Expression(...)
g = Expression(...)
n = FacetNormal(mesh)
h = CellSize(mesh)
a = dot(grad(u), grad(v))*dx
- dot(avg(grad(u)), jump(v, n))*dS
- dot(jump(u, n), avg(grad(v)))*dS
+ alpha/avg(h)*dot(jump(u, n), jump(v, n))*dS
- dot(grad(u), jump(v, n))*ds
- dot(jump(u, n), grad(v))*ds
+ gamma/h*u*v*ds
Oelgaard, Logg, Wells, Automated Code Generation for Discontinuous Galerkin Methods (2008)
11 / 40

Simple prototyping and development in Python
# Tentative
velocity
step (sigma
formulation)
U = 0.5*(u0 + u)
F1 = rho*(1/k)*inner(v, u - u0)*dx +
rho*inner(v, grad(u0)*(u0 - w))*dx \
+ inner(epsilon(v), sigma(U, p0))*dx \
+ inner(v, p0*n)*ds - mu*inner(grad(U).T*n, v)*ds \
- inner(v, f)*dx
a1 = lhs(F1)
L1 = rhs(F1)
class
StVenantKirchhoff ( MaterialModel):
def
model_info(self):
self. num_parameters = 2
self. kinematic_measure = \
" GreenLagrangeStrain "
def
strain_energy (self , parameters):
E = self.E
[mu , lmbda] = parameters
return
lmbda/2*(tr(E)**2) + mu*tr(E*E)
class
GentThomas( MaterialModel ):
def
model_info(self):
self. num_parameters = 2
self. kinematic_measure = \
" CauchyGreenInvariants "
def
strain_energy (self , parameters):
I1 = self.I1
I2 = self.I2
[C1 , C2] = parameters
return C1*(I1 - 3) + C2*ln(I2/3)
# Time -stepping
loop
while
True:
# Fixed
point
iteration on FSI
problem
for iter in range(maxiter):
# Solve
fluid
subproblem
F.step(dt)
# Transfer
fluid
stresses to structure
Sigma_F = F. compute_fluid_stress (u_F0 , u_F1 ,
p_F0 , p_F1 ,
U_M0 , U_M1)
S. update_fluid_stress (Sigma_F)
# Solve
structure
subproblem
U_S1 , P_S1 = S.step(dt)
# Transfer
structure
displacement to fluidmesh
M. update_structure_displacement (U_S1)
# Solve
mesh
equation
M.step(dt)
# Transfer
mesh
displacement to fluid
F. update_mesh_displacement (U_M1 , dt)
# Fluid
residual
contributions
R_F0 = w*inner(EZ_F - Z_F , Dt_U_F - div(Sigma_F ))*dx_F
R_F1 = avg(w)*inner(EZ_F(’+’) - Z_F(’+’),
jump(Sigma_F , N_F))*dS_F
R_F2 = w*inner(EZ_F - Z_F , dot(Sigma_F , N_F))*ds
R_F3 = w*inner(EY_F - Y_F ,
div(J(U_M)*dot(inv(F(U_M)), U_F )))*dx_F
12 / 40

Simple development of specialized applications
# Define
Cauchy
stress
tensor
def sigma(v,w):
return 2.0*mu*0.5*(grad(v) + grad(v).T)
-
w*Identity(v.cell ().d)
# Define
symmetric
gradient
def
epsilon(v):
return
0.5*(grad(v) + grad(v).T)
# Tentative
velocity
step (sigma
formulation)
U = 0.5*(u0 + u)
F1 = rho*(1/k)*inner(v, u - u0)*dx +
rho*inner(v, grad(u0)*(u0 - w))*dx \
+ inner(epsilon(v), sigma(U, p0))*dx \
+ inner(v, p0*n)*ds - mu*inner(grad(U).T*n, v)*ds \
- inner(v, f)*dx
a1 = lhs(F1)
L1 = rhs(F1)
# Pressure
correction
a2 = inner(grad(q), k*grad(p))*dx
L2 = inner(grad(q), k*grad(p0))*dx - q*div(u1)*dx
# Velocity
correction
a3 = inner(v, u)*dx
L3 = inner(v, u1)*dx + inner(v, k*grad(p0 - p1))*dx
• The Navier–Stokes solver is implemented in Python/FEniCS
• FEniCS allows solvers to be implemented in a minimal amount of code
• Simple integration with application speciﬁc code and data management
Valen-Sendstad, Mardal, Logg, Computational hemodynamics (2011)
13 / 40

FEniCS under the hood
14 / 40

Automatic code generation
Input
Equation (variational problem)
Output
Eﬃcient application-speciﬁc code
15 / 40

Code generation framework
• UFL - Uniﬁed Form Language
• UFC - Uniﬁed Form-assembly Code
• Form compilers: FFC, SyFi
a(u, v) = ⟨∇u, ∇v⟩
16 / 40

Form compiler interfaces
Command-line
>> ffc poisson.ufl
Just-in-time
V = FunctionSpace(mesh, "CG", 3)
u = TrialFunction(V)
v = TestFunction(V)
A = assemble(dot(grad(u), grad(v))*dx)
17 / 40

Code generation system
mesh = UnitSquare(32, 32)
V = FunctionSpace(mesh, "Lagrange", 1)
u = TrialFunction(V)
v = TestFunction(V)
f = Expression("x[0]*x[1]")
a = dot(grad(u), grad(v))*dx
L = f*v*dx
bc = DirichletBC(V, 0.0, DomainBoundary())
A = assemble(a)
b = assemble(L)
bc.apply(A, b)
u = Function(V)
solve(A, u.vector(), b)
18 / 40

Code generation system
mesh = UnitSquare(32, 32)
V = FunctionSpace(mesh, "Lagrange", 1)
u = TrialFunction(V)
v = TestFunction(V)
f = Expression("x[0]*x[1]")
a = dot(grad(u), grad(v))*dx
L = f*v*dx
bc = DirichletBC(V, 0.0, DomainBoundary())
A = assemble(a)
b = assemble(L)
bc.apply(A, b)
u = Function(V)
solve(A, u.vector(), b)
(Python, C++–SWIG–Python, Python–JIT–C++–GCC–SWIG–Python)
18 / 40

Just-In-Time (JIT) compilation
19 / 40

Geometry and meshing
20 / 40

Geometry and meshing
Built-in meshing
mesh = UnitSquare(64 , 64)
mesh = UnitCube(64 , 64 , 64)
External mesh generators
mesh = Mesh("mesh.xml")
dolfin-convert
mesh.inp mesh.xml
Conversion from Gmsh, Medit, Tetgen, Diﬀpack, Abaqus, ExodusII, Star-CD
Extensions / work in progress
• Constructive solid geometry (CSG)
• Meshing from biomedical image data using VMTK
21 / 40

Constructive solid geometry (CSG)
Boolean operators
A ∪B
A + B
A ∩B
A * B
A \ B
A - B
Implementation
• Modeled after NETGEN
• Implemented using CGAL
Example
r = Rectangle(-1, -1, 1, 1)
c = Circle(0, 0, 1)
g = c - r
mesh = Mesh(g)
22 / 40

Meshing from biomedical images
• Biomedical image data (DICOM)
• VMTK generates high quality
FEniCS meshes
• Adaptive a priori graded meshes
• Simple speciﬁcation of boundary
markers
• Resolution of boundary layers
Antiga, Mardal, Valen-Sendstad, Tangui Morvan
23 / 40

Meshing from biomedical images
• Biomedical image data (DICOM)
• VMTK generates high quality
FEniCS meshes
• Adaptive a priori graded meshes
• Simple speciﬁcation of boundary
markers
• Resolution of boundary layers
Antiga, Mardal, Valen-Sendstad, Tangui Morvan
23 / 40

Meshing from biomedical images
• Biomedical image data (DICOM)
• VMTK generates high quality
FEniCS meshes
• Adaptive a priori graded meshes
• Simple speciﬁcation of boundary
markers
• Resolution of boundary layers
Antiga, Mardal, Valen-Sendstad, Tangui Morvan
23 / 40

Meshing from biomedical images
• Biomedical image data (DICOM)
• VMTK generates high quality
FEniCS meshes
• Adaptive a priori graded meshes
• Simple speciﬁcation of boundary
markers
• Resolution of boundary layers
Antiga, Mardal, Valen-Sendstad, Tangui Morvan
23 / 40

Meshing from biomedical images
• Biomedical image data (DICOM)
• VMTK generates high quality
FEniCS meshes
• Adaptive a priori graded meshes
• Simple speciﬁcation of boundary
markers
• Resolution of boundary layers
Antiga, Mardal, Valen-Sendstad, Tangui Morvan
23 / 40

Automated error control
24 / 40

Automated goal-oriented error control
Input
• Variational problem: Find u ∈V : a(u, v) = L(v)
∀v ∈V
• Quantity of interest: M : V →R
• Tolerance: ϵ > 0
Objective
Find Vh ⊂V such that |M(u) −M(uh)| < ϵ where
a(uh, v) = L(v)
∀v ∈Vh
Automated in FEniCS (for linear and nonlinear PDE)
solve(a == L, u, M=M, tol=1e-3)
25 / 40

Poisson’s equation
a(u, v) = ⟨∇u, ∇v⟩
M(u) =
Z
Γ
u ds,
Γ ⊂∂Ω
26 / 40

A three-ﬁeld mixed elasticity formulation
a((σ, u, γ), (τ, v, η)) = ⟨Aσ, τ⟩+ ⟨u, div τ⟩+ ⟨div σ, v⟩+ ⟨γ, τ⟩+ ⟨σ, η⟩
M((σ, u, η)) =
Z
Γ
g σ · n · t ds
27 / 40

Incompressible Navier–Stokes
Outﬂux ≈0.4087 ± 10−4
Uniform
1.000.000 dofs, N hours
Adaptive
5.200 dofs, 127 seconds
from
dolfin
import *
class
Noslip(SubDomain): ...
mesh = Mesh("channel -with -flap.xml.gz"
V = VectorFunctionSpace (mesh , "CG", 2)
Q = FunctionSpace (mesh , "CG", 1)
W = V*Q
# Define
test
functions
and
unknown(s)
(v, q) = TestFunctions (W)
w = Function(W)
(u, p) = split(w)
# Define (non -linear) form
n = FacetNormal(mesh)
p0 = Expression("(4.0 - x[0])/4.0")
F = (0.02*inner(grad(u), grad(v)) + inner(grad(u)*u), v)*dx
- p*div(v) + div(u)*q + dot(v, n)*p0*ds
# Define
goal
functional
M = u[0]*ds(0)
# Compute
solution
tol = 1e-4
solve(F == 0, w, bcs , M, tol)
Rognes, Logg, Automated Goal-Oriented Error Control I (2010)
28 / 40

Cut ﬁnite elements
29 / 40

Multiple geometries – multiple meshes
Massing, Larson, Logg, Rognes, A Nitsche overlapping mesh method for the Stokes problem (2012)
30 / 40

Multiple geometries – multiple meshes
Massing, Larson, Logg, Rognes, A Nitsche overlapping mesh method for the Stokes problem (2012)
30 / 40

Multiple geometries – multiple meshes
Massing, Larson, Logg, Rognes, A Nitsche overlapping mesh method for the Stokes problem (2012)
30 / 40

Optimal a priori estimates
Theorem
Let k, l ⩾1 and assume that (u, p) ∈[Hk+1(Ω)]d × Hl+1(Ω) is a (weak) solution
of the Stokes problem. Then the ﬁnite element solution (uh, ph) ∈V k
h × Ql
h
satisﬁes the following error estimate:
|||(u −uh, p −ph)||| ≲hk|u|k+1 + hl+1|p|l+1.
10
-2
10
-1
hmax
10
-2
10
-1
10
0
10
1
H1  error
A: 1.00
10
-2
10
-1
hmax
10
-3
10
-2
10
-1
10
0
10
1
L2  error
A: 1.49
31 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
32 / 40

Bounded condition numbers
Theorem
There is a constant C > 0 independent of the position of Γ, s.t. the
condition number of the stiﬀness matrix A associated with the Nitsche
ﬁctitious domain method satisﬁes
κ(A) ⩽Ch−2,
0.00
0.02
0.04
0.06
0.08
d
10
2
10
3
10
4
10
5
10
6
10
7
10
8
10
9
h2 κ(A)
β =0.000
β =0.001
β =0.010
β =1.000
32 / 40

Stokes ﬂow for diﬀerent angles of attack
Velocity streamlines
Pressure
33 / 40

Stokes ﬂow for diﬀerent angles of attack
Velocity streamlines
Pressure
33 / 40

Stokes ﬂow for diﬀerent angles of attack
Velocity streamlines
Pressure
33 / 40

Stokes ﬂow for diﬀerent angles of attack
Velocity streamlines
Pressure
33 / 40

Stokes ﬂow for diﬀerent angles of attack
Velocity streamlines
Pressure
33 / 40

Fluid–structure interaction on cut meshes
Fluid
Structure
Mesh + Fluid
Interface
34 / 40

Fluid–structure interaction on cut meshes
Larson, Logg, Massing, Rognes, Fluid–structure interaction on cut meshes (in preparation)
35 / 40

Fluid–structure interaction: displacement
Larson, Logg, Massing, Rognes, Fluid–structure interaction on cut meshes (in preparation)
36 / 40

Fluid–structure interaction: velocity magnitude
Larson, Logg, Massing, Rognes, Fluid–structure interaction on cut meshes (in preparation)
37 / 40

Closing remarks
38 / 40

Current and future plans
• Parallelization (2009)
• Automated error control (2010)
• Debian/Ubuntu (2010)
• Documentation (2011)
• FEniCS 1.0 (2011)
• The FEniCS Book (2012)
• FEniCS’13
Cambridge March 2013
• Visualization, mesh generation
• Parallel AMR
• Hybrid MPI/OpenMP
• Overlapping/intersecting meshes
39 / 40

Summary
• Automated solution of PDE
• Easy install
• Easy scripting in Python
• Eﬃciency by automated code generation
• Free/open-source (LGPL)
http://fenicsproject.org/
40 / 40

