FORTH
FOR
THE
COMPLETE
IDIOT
79-FORTH ROM for Apple II
The DesIgn Goals
The main purpose of this project
was to implement a FORTH system of
the lowest possible cost, and to carry
this exciting language to the large
population of Apple II users. To lower
the system cost, it is necessary to fully
utilize all the existing resources inside
the Apple II computer, without such
expensive peripherals as the floppy
disk drives. The design goals were
thus set as follows:
• Use a stripped Apple II as the
host
• Put the FORTH dictionary in
8lCbytesofROM
• Implement the 79-Standard
with editor and assembler ex
tensions
• Build a pseudo disk in RAM
with cassette tape as the off
line storage medium
The result will be a FORTH com
puter in a small box, which can be
operated• standing-alone and has the
capacity of expanding into many
educational and professional appli
cations.
D.velopm.nt Tools
I did not have very sophisticated
tools to develop 6502 based mi?rocom
puter systems. The only toot was a HP
65000 Development System, which
had a 6502 cross assembler in it The
only way to build a FORTH system
was to assemble the 6502 assembly
source program on this development
system, burn the object codes into a set
of PROMs, and insert the PROMs in
to the Apple for testing and debugging.
Any uncovered bug would have to be
fixed at the source level. However, I.
bad both the Auto Start Monitor and
the Old Monitor in the Apple. The lat
ter was very useful in the debugging
process because of its trace capability.
Approach
Because of the lack of good develop
ment tools, it would be very difficult
trying to build a FORTH system from
scratch towards the design goals. The
best approach was to divide the pro
ject into two phases:
• Implement a fig-FORTH sys
tem using the 6502 fig-FORTH
source listing; and
• Modify the
fig-FORTH
to
meet the design goals.
It was extremely important to build
a working fig-FORTH system, because
the object codes can be checked out by
comparing byte-by-byte with the
source. This greatly eased the task of
debugging. Once I had the fig-FORTH
running, further modifications could
be checked and debugged using the
FORTH interpreter, which was much
more convenient to use and test.
Implementation
I first keyed in the 6502 source
codes, identical to the 6502 fig-FORTH
Source Listing. Both the source codes
and the assembled object codes were
thoroughly checked out. After chang
ing the terminal 110 routines and off
seting the object codes to start at
6000H, the resulting object codes were
burnt into 2716’s and moved into the
Apple on the Apple ROM Card. Using
the Apple Monitor, I could move the
dictionary
from the
PROM’s
into
RAM area, starting at 6000H. Debug
ging in RAM was much easier than
doing it in ROM. The tracing aids pro
vided by the fig-FORTH was helpful.
However, I found it was more conve
nient to replace the JMP W-1 instruc
tion by BRK, which returned the
system to the monitor. To continue
execution, I just keyed in OBOG in the
monitor, which jumped over to W-1
(address OBOH) and continued onto
the next word.
Only minor errors were detected
and fixed at this stage, because most
errors were flushed out by byte com
parison of object codes. Since the en
tire system was in RAM, errors were
corrected immediately and more tests
could be carried out before a new set
of PROMs were burnt.
After the fig-FORTH was thoroughly
bug free, I proceeded to the task of
modifications. The first thing to do
was to trim the fig tree, making room
for the editor and the assembler. I
deleted the name fields and the link
fields of all the run-time codes and
some system words which the users
are not expected to use. AU the disk
words were also deleted because the
final system would not have a disk.
The pseudo disk was implemented by
a simple redefinition of BLOCK:
BLOCK (n—addr)
MAXBUF MOD B!BUF
• FiRST +
It returns a RAM address of the
desired block, from which data can be
referred.
The second task was to make the
FORTH system ROMmable. All varia
bles were either eliminated or changed
to user variables. The only impure
words were the vocabulary words like
FORTH. To make FORTH, EDITOR, and
ASSEMBLER stay comfortably in ROM,
a new defining word ROM-VOCABULARY
ought to be used:
Dr. C. H. Ting
The result was four
2716 PROMs
sitting neatly on a
small PC board.
Continued on next page

FORTH
FOR
THE
COMPLETE
IDIOT
7B-FOTH ROM for Apple II (contue
ROM-VOCABUL.ARY (addr —)
CREATE,00ES>
@ CURRENT
I
HEX
1062 ROM-VOCABULARY FORTH
1068 ROM-VOCABULARY EDITOR
lOBE ROM-VOCABULARY ASSEMBLER
The addresses specified above point
to the RAM locations where the nameS
field addresses of the last words
defined in the respective vocabularies
are stored. These RAM locations are
to be initialized at boot-up to:
FORTHUNK: 1060K:
A0B1
EF3D
EDITRUNK:
1066H:
A081
EBDF
ASSEMUNK: IO6CH:
A081
EEO1
The original VOCABULARY remained in
the dictionary for the purpose of
creating new vocabularies in RAM by
the user.
The editor was basically the fig-
FORTH editor. However, the com
mand structure was modified to that
used by Brodie in his Starting FORTH.
I hoped to use Starting FORTH as an
instruction manual for this
ROM
FORTH system and a compatible
editor would not do any harm. The
only major departure from the Starting
FORTH editor was the handling of
null strings. Only one string buffer
(PAD) was used here, while Brodie used
two independent buffers for searching
and inserting.
Bill Ragsdale’s 6502 Assembler was
included in this FORTH to let the user
experiment at the code level.
Finally, the whole system was up
dated to the 79-Standard. Many words
needed to have their names changed.
A few new words were added, and a
few words needed to be redefined.
Bob Smith’s ‘79-FORTH Conversion
was most helpful in this phase.
Result
The result was four 2716 PROMs sit
ting neatly on a small PC board. When
it was inserted into Slot 0 in an Apple
II, it turned the Apple into a very
powerful FORTH computer. In an
Apple II with 48K bytes RAM, 24K are
used as a pseudo disk which holds lots
of programs. With some tricks like
—32 OFFSET
I
one coulLl even turn the 16K high
graphics memory into a second disk,
nialdng the total disk memory 40K.
The programs can be dumped to cas
sette tape for storage. By loading or
dumping large chunks of memory
from or to tape, the necessity of disk
can be avoided while still having all
the advantages of FORTH. The main
dictionary, securely stored in PROMs,
makes the system immune from fre
quent crashes during program devel
opment and testing.

FORTH
FOB:
THE
COMPLETE
IDIOT
A FORTH ASSEMBLER
FOR THE 6502
by William F. Ragadale
INTRODUCTION
This article should further polarize the
attitudes
of
those
outside
the
growing
community of FORTH users. Some will be
fascinated
by
a
label-less,
macro
assembler whose source code is only 96
lines
long!
Others will be repelled by
reverse Polish syntax end the absence of
labels.
The author immodestly claims that this
is the best FORTH assembler ever distri
buted.
It is the only such assembler that
detects all errors in op-code generation
end conditional structuring. it is released
to the public domain as a defense mechan
ism.
Three good 6502 assemblers were
submitted to the FORTH Interest Group
but each had some lack.
Rather than
merge and edit for publication, I chose to
publish mine with all the submitted fea
tures plus several more.
Imagine having an assembler in 1300
bytes of object code with:
1.
User macros (like F, UNTIL.,) de
finable at any time.
2.
Literal
values
expressed
In
any
numeric
base,
alterable
at
any
time.
3.
Expressions
using
any
resident
computation capability.
4.
Nested control structures without
labels, with error controL
5.
Assembler source itself In a port
able high level language.
OVERVIEW
Forth is provided with a machine lang
uage assembler to create execution pro
cedures that would be time inefficient, If
written as colon-definitions. It is intended
that “code” be wrItten similarly to high
level, for clarity of expression.
Functions
may be written first in high-level, tested,
and then re-coded into assembly, with a
minimum of restructuring.
THE AS5EMBLY PROCESS
Code assembly just consists of inter
preting with the ASSEMBLER vocabulary
as CONTEXT.
Thus, each word in the in
put stream will be matched according the
Forth practice
of
searching
CONTEXT
first then CURRENT.
ASSEMBLER (now CONTEXT)
FORTH
(chained to ASSEMBLER)
user’s
(CURRENT If one exits)
FORTH
(chained to user’s vocab)
try for literal number
else, do error abort
The above sequence Is the usual action
of Forth’s text interpreter, which remains
In control during assembly.
During assembly of CODE definitions,
Forth
continues
interpretation
of
each
word encountered in the Input stream (not
in the compile mode).
These assembler
words specify operands, address modes,
and op-codes.
At the conclusion of the
CODE definition a final error check veri
fies correct completion by “unemudging”
the definition’s name, to make it available
for dictionary searches.
RUN-TIME, ASSEMBLY-TIME
One must be careful to understand at
what
time
a particular word definition
executes.
During
assembly,
each as
sembler ward interpreted executes.
Its
function at that instant is called ‘assemb
ling’
or ‘assembly-time’.
This function
may involve op—code generation, address
calculation, mode selection, etc.
The later execution of the generated
code is called ‘run-time’.
This distinction
is particuiary important with the condi
tionals.
At assembly time each such word
(i.e., F, UNTIL, BEGIN, etc.) itself ‘runs’
to produce machine code which will later
execute at what is labeled ‘run-time’ when
its named code definition is used.
AN EXAMPLE
As a practical example, here’s a simple
call to the system monitor, via the NM!
address vector (using the BRK opoode).
CODE MON ( exit to monitor)
BRK, NEXT 3MP, END-CODE
The word CODE is first encountered,
and executed by Forth.
CODE builds the
following name “MON” into a dictionary
header
and
calls
ASSEMBLER
as
the
CONTEXT vocabularly.
The “C” is next found in FORTH and
executed to skip UI “)“. This method skips
over comments. Note that the name after
CODE and the “)“ after “C” must be on the
same text line.
OP-CODES
BRK, is next found in the assembler as
the op-code.
When BRK, executes, it as
sembles the byte value
DO into the dic
tionary as the op-code for “break to moni
tor via “NM!”.
Many assembler words names end in
“,“. The significance of this is
1.
The comma shows the conclusion
of a logical grouping that would be
one
line
of
classical
assembly
source code.
2.
“,“ compiles into the dictionary;
thus a comma implies the point at
which code is generated.
3.
The
“,“
distinguishes
op-codes
from possible hex numbers ADC
and ADD.
NEXT
Forth executes your word definitions
under control of the address interpreter,
named NEXT.
This short code routine
moves execution from one definition, to
the next.
At the end of your code defini
tion, you must return control to NEXT or
else to code which returns to NEXT.
RETURN OF CONTROL
Most 6502 systems can resume execu
tion after a break, since the monitor iaves
the CPU register contents. Therefore, we
must
return
control
to
Forth after
a
return from the monitor.
NEXT Is a con
stBnt that specifies the machine address
of
Forth’s
address
interpreter
(say
$0242).
Here it is the operand for 3MP,.
As 3MP, executes, it assembles a machine
code jump to the sddress of NEXT from
the assembly time stack value.
SECURITY
Numerous tests are made within the
assembler for user errors:
1.
All
parameters
used
in
CODE
definitions must be removed.
2.
ConditIonals
must
be
properly
nested and paired.
3.
Address modes and operands must
be allowable for the op-codes
These
tests
are
accomplished
by
checking the stack position (in CSP) at the
creation
of
the
definition
name
and
comparing it with the position at END-
CODE.
Legality of address modes and
operands is insured by means of a bit mask
associated with each operand.
Remember
that
if
an
error
occurs
during assembly, END-CODE never exe
cutes.
The result is that the “smudged”
condition of the definition name remains
in the “smudged” condition and will riot be
found during dictionary searches.
The user should
be aware that one
error not trapped is referencing a defir,i
tion in the wrong vocabulary:
i.e.,
0= of ASSEMBLER when you want
0= of FORTH
FORTH ENSIONS IWS
Page 4)

FORTH
FOR
THE
COMPLETE
IDIOT
(Editor’s note: the listing assumes that
the fIgFORTH error messages are already
available in the system, as follows:
?CSP issues the error message “DEfl
NITION
NOT
FiNISHED”
if
the
stack
position differs from the value saved in
the user variable CSP, which is set at the
creation of teh definition name.
?PAIRS
issues
the
error
message
“CONDITIONALS NOT IMPAIRED” if its
two arguments do not match.
3
ERROR prints the
error
message
“HAS INCORRECT ADDRESS MODE”.)
SUMMARY
The object code of our example is:
OP-CODES, revisited
The bulk of the assembler consists of
dictionary entries for each op-code.
The
6502 one mode op—codes are:
BRK,
CLC,
CLD,
CU,
CLV,
DEX,
DEY,
!NX,
INY,
NOP,
PHA,
PHP,
PLA,
PLP,
RTI,
RTS,
SEC,
SED,
SEI,
TAX,
TAY,
TSX,
TXS,
TXA,
WA,
When any of these are executed, the
corresponding op-code byte
is assembled
into the dictionary.
The multi-mode op-codes are:
ADC,
AND,
CMP,
EDR,
LDA,
ORA,
SBC,
STA,
ASL,
DEC,
INC,
LSR,
ROL,
ROR,
STX,
CPX,
CPY,
LDX,
LDY,
STY,
JSR,
3MP,
BIT,
These usually take an operand, which
must already be on the stack.
An address
mode may also be specified.
If none is
given, the op-code uses z-psge or absolute
addressing.
The address modes are deter
mined by:
Symbol
Mode
Operand
.A
accumulator
#
immediate
,X
indexed X
,Y
indexed Y
X)
indexed indirect X
)Y
indirect indexed V
indirect
none
memory
EXAMPLES
Here are examples of Forth vs. con
ventional assembler.
Note that the oper
and comes first, followed by any mode
modifier,
and
then
the
op-code
mnemonic.
This makes best use of the
•tack at assembly time.
Also, each as
sembler word is set off by blanks, as is
required for all Forth source text.
(.A distinguishes from hex number (IA)
The words DATA and VECTOR specify
machine addresses.
In the case of “6 )X
ADC,” the operand memory address $0006
was given directly. This
is occasionally
done if the usage of a value doesn’t justify
devoting the dictionary space to a symbol
ic value.
6502 CONVENTIONS
Stack Addressing
The data stack is located in z-page,
usually addressed by “Z-PAGE,X”.
The
stack starts near $009E and grows down
ward.
The X index register is the data
stack pointer.
Thus, incrementing X by
two removes a data stack value; decre
menting X twice makes room far one new
data stack value.
Sixteen bit values are placed on the
stack according to the 6502 convention;
the low byte is at low memory, with the
high byte following.
This allows “indexed,
indirect X” directly off a stack value.
The bottom and second stack values
are referenced often enough that the sup
port words BOT and SEC are included.
Using
SOT LDA, assembles LDA (0,X) and
SEC ADC, assembles ADC (2,X)
BOT leaves 0 on the stack and sets the
address mode to ,X.
SEC leaves 2 on the
stack also setting the address mode to ,X.
Here
is a pictorial representation of
the stack in z-page.
eec high
sec low
bot high
bot low
Here is an examples of code to “or” to
the accumulator four bytes on the stack:
To obtain the 14-th byte on the stack:
BOT 13 + LDA,
RETURN STACK
The Forth Return Stack is located in
the 6502 machine stack
in Page 1.
It
starts at $Qi.FE and builds downward.
No
lower bound is set or checked as Page 1
has
sufficient
capacity
for
all
(non—
recursive) applications.
By 6502 convention the CPU’s register
points to the next free byte below the bot
tom of the Return Stack.
The byte order
follows the convention of low significance
byte at the lower address.
Return stack values may be obtained
by:
PLA, PLA, which will pull the low
byte, then the high byte from the return
stack.
To operate on aribitrary bytes, the
method is
1)
save X in XSAVE
2)
execute
TSX,
to bring the
S
register to X.
3)
use
RP)
to address the lowest
byte of the return stack.
Offset
the
value
to
address
higher
bytes.
(Address
mode
is
automatically set to ,X.)
4)
Restore
X from
XSAVE.
As
an example,
this definition non
destructively tests that the second item
on
the
return stack (also
the
machine
stack) is zero.
CODE IS-IT
( zero?
XSAVE STX, TSX,
(setup for
return stack)
RP) 2+ LDA, RP)
3 • ORA,
or 2nd item’s two bytes
together)
0 IF, INY, THEN, ( If zero, bump
V to one)
WA, PHA, XSAVE LDX, (save
low byte, rstore data stack)
PUSH .JMP, END-CODE ( push
boolean)
Return Stack
hi byte
Ia byte
hi byte
1 byte
free byte
BOT
LDA,
SOT 1+ ORA,
SEC
ORA,
SEC 1- ORA,
LDA (0,X)
ORA (1,X)
ORA (2,X)
ORA (3,X)
.A ROL,
1 # LDY,
DATA ,X STA,
DATA ,Y CMP,
6 X) ADC,
POINT )Y STA,
VECTOR ) iMP,
ROL A
LDY #1
STA DATA,X
CMP DATA,Y
ADC (06,X
STA (POINT),Y
iMP (VECTOR)
305
9834D4FCE
305D4D3D
305F 61 30
3061 00
3062 4C 42 02
CODE MON
link field
code field
BRK
iMP NEXT
none
8 bits only
z-page or
absolute
z-paqe or
absolute
z-page only
z-pege only
absolute only
z-page or
absolute
PR) =$0101,X—>
<==X offset
above $0000
second
Item
bottom
item
Iage 14
FORTH DIMtNSIUNS U117

FORTH
FOR
THE
COMPLETE
IDIOT
35
FORTH REGISTERS
Several Forth registers are available
only at the assembly level and have been
given names that return their memory ad
dresses. These are:
IP
address
of
the
Interpretive
Pointer, specifying the next Forth
address which will be interpreted
by NEXT.
W
address of the pointer to the code
field of the dictionary definition
just interpreted by NEXT.
W-1
contains $6C, the op-code for in
direct jump.
Therefore, jumping
to W-1 will indirectly jump via W
to the machine code for the def
inition.
UP User Pointer containing ad
dress of the base of the user
area.
N
a utility area In z-page from
N-i thru N+7.
CPU Registers
When Forth execution leaves NEXT to
execute a CODE definition, the following
conventions apply:
1.
The V index register is zero.
It
may be freely used.
2.
The
X index register defines the
low byte of the bottom data stack
item relative to machine address
$0000.
3.
The CPU stack pointer
S points
one byte below the low byte of the
bottom return stack Item.
Exe
cuting PLA, will pull this byte to
the accumulator.
4.
The accumulator may be freely
used.
5.
The
processor
Is
in
the
binary
mode and must be returned in that
mode.
XSAVE
XSAVE is a byte buffer in z-page, for
temporary
storage
of
the
X
register.
Typical
usage,
with
a
call
which
will
change X, is:
N Area
CODE DEMO
XSAVE STX, USER’S 3SR,
(which will change X)
XSAVE LDX, NEXT 3MP,
END-CODE
When
absolute memory registers are
required,
use the
‘N
Area’ In the base
page.
These registers may be used as
pointers for Indexed/inairect addressing or
for temporary values.
As an example of
use,
see
CMOVE
in the system source
code.
The assembler word
N
returns the
base address (usually $0001). The N Area
spans 9 bytes, from N-). thru N+7.
Con
ventionally, N-i
holds one byte end N,
N+2,
N.s.4,
N+6
are pairs which may hold
16-bit
values.
See
SETUP for help
on
moving values to the N Area.
It Is very important to note that many
Forth procedures use N. Thus, N may only
be used within a single code definition.
Never expect that
a
value will remain
there, outside a single definltioni
CODE DEMO
HEX
6
if LDA, N 1
- STA,
(setup a counter)
BEGIN, 8001 BIT,
(tickle a port)
N 1
- DEC,
(decrement the counter)
0= UNTIL, NEXT 3MP, END-CODE
(loop till negative)
SETUP
Often we wish to move stack values to
the N area.
The sub-routine SETUP has
been provided far this purpose.
Upon en
tering SETUP the accumulator specifies
the quantity of 16-bit stack values to be
moved to the N area.
That Is,
A
may
be 1, 2, 3, or 4 only:
3 1 LDA,
SETUP 35R,
stack before
N after
stack after
1-Ihigh
I-i
C low
bot—> C
F
—
CONTROL FLOW
Forth discards the usual convention of
assembler labels.
Instead, two replace
ments are used.
First, each Forth defini
tion name is permanently Included in the
dictionary.
This allows procedures to be
located and executed by name at any time
as well as be compiled within other defiril
tions.
Secondly,
within
a
code
definition,
execution flow is controlled by label-less
branching according to “structured pro
gramming”.
This method is identical to
the form used in colon-definitions. Branch
calculations are done at assembly time by
temporary stack values placed by the con-
trol words:
BEGIN,
UNTIL,
THEN,
Here again, the assembler words end
with a comma, to indicate that code is
being produced
and to clearly differen
tiate from the high-level form.
One major difference occursl
High-
level
flow
Is
controlled
by
run-time
boolean values on the data stack.
As
sembly flow is instead controlled by pro
cessor status bits.
The programmer must
indicate which status bit to test, just be
fore a conditional branching word
(IF,
and UNTIL,).
Examples are:
PORT LDA, 0= IF, <a> THEN,
(read port, If equal to zero do <a>)
PORT LDA, 0= NOT IF, <a> THEN,
(read port,
if not equal to zero
do <a>)
The conditional specifiers for 6502 are:
CS
test carry set
processor
status
0<
byte less than zero
0=
equal to zero
CS NOT test carry clear
0 <NOT
test positive
0= NOT test not equal zero
The overflow status bit
is so rarely
used, that
It
Is not
included.
If
it is
desired, compile:
ASSEMBLER DEFINITIONS
HEX
50 CONSTANT
VS
(test overflow
set)
CONDITIONAL LOOPING
A conditional
loop
is formed at as
sembler level by placing the portion to be
repeated between BEGIN, and UNTIL,:
6 1 LDA,
N STA,
(define loop counter in N)
BEGIN,
PORT DEC,
(repeated action)
N DEC,
0= UNTIL,
(N reaches zero)
First, the byte at address N
is loaded
with the value 6.
The beginning of the
ioop
is
marked (at
assembly
time)
by
BEGIN,.
Memory at PORT is decrement
ed, then the loop counter in N is decre
mented.
Of course, the CPU updates its
status
register
as
N
is
decremented.
Finally, a test for Z=1 is made; If N hasn’t
reached
zero,
execution
returns
to
BEGIN,.
When N reaches zero (after exe
cuting
PORT
DEC,
6
times)
execution
continues ahead after UNTIL,.
Note that
IF,
ELSE,
C=1
In
N=1
z=1
C=0
N=0
z=0
E
D
eec—>
C
B
bat—>
A
E
0
C
B
N—>
FORTH DIMENSIONS 1W5
Page L4

FDF.TH
FOR
THE
COMPLETE
IDIOT
BEGIN, generates no machine code, but is
only en assembly time locator.
CONDITIONAL EXECUTION
Paths of execution may be chosen at
assembly in a similar fashion and done in
colon-definitions.
In this case, the branch
is chosen based on a processor status con
dition code.
PORT LDA,
0=
F,
(for zero set)
THEN, (continuing code)
In
this example,
the accumulator
is
loaded from PORT.
The zero status is
tested if set (Z=1).
If so, the code
(for
zero set) is executed.
Whether the zero
status is set or not, execution will resume
at THEN,.
The conditional branching also allows a
specific action for the false case.
Here
we see the addition of the ELSE, part.
PORT LDA, 0= IF,
<for zero set>
ELSE, <for zero clear>
THEN, <continuing code>
The test of PORT will select one of
two
execution
paths,
before
resuming
execution
after
THEN,.
The
next
example increments N based on bit 07 of
a port:
PORT LDA,
(fetch one byte)
0< F, N DEC,
(if 07=1, decrement
N)
ELSE,
N INC,
(If 07 =0, increment
N)
THEN,
(continue ahead )
CONDITIONAL NESTING
Conditionals may be nested, according
to
the
conventions
of
structured
pro
gramming.
That is, each conditional se
quence begun (F,
BEGIN,) must be ter
minated
(THEN,
UNTIL,) before the next
earlier
conditional
is
terminated.
Ai
ELSE,
must pair with the immediately
preceding F,.
BEGIN, <code always executed>
CS IF, <code If carry set)
ELSE,
<code
if
carry
clear>
THEN,
0= NOT UNTIL,
C loop till condition
flag is non—zero)
<code that continues onward>
Next
is on error that the assembler
security will reveaL
BEGIN,
PORT LDA,
0= IF,
SOT NC,
0= UNTIL,
ENDIF,
The
UNTIL,
will
not complete
the
pending
BEGIN,
since
the
immediately
preceding IF, is not completed.
An error
trap will occur at
UNTIL, saying “condi
tionals not paired”.
RETURN OF CONTROL, revisited
When
concluding
a
code
definition,
several common stack manipulations often
are needed.
These functions are already
in the nucleus, so we may share their use
just by knowing their return points. Each
of these returns control to NEXT.
POP
POPTWO remove one 16-bit stack
values.
POPTWO
remove two 16-bit stack
values.
PUSH
add two bytes to the data
stack.
PUT
write two bytes to the
data
stack,
over
the
present
bottom
of
the
stack.
Our next example complements a byte
in memory.
The bytes’ address is on the
stack when INVERT Is executed.
CODE INVERT (a memory byte)
HEX
SOT X) LDA,
(fetch byte addressed
by stack)
FT
EOR,
(complement accumu
lator)
SOT X) STA,
(replace In memory
POP 3MP,
END-CODE
(discard
pointer from stack,
return to NEXT)
A new stack value may result from a
code definition. We could program placing
It on the stack by:
CODE ONE (put 1 on the stack)
DEX, DEX,
(make room on the
data stack)
1 i LDA, SOT STA, (store low byte)
BOT 1. STY, (hi byte stored from V
since = zero)
NEXT 3MP, END-CODE
A simpler version could use PUSH:
CODE ONE
1 0 LDA,
Pt-IA,
(push low byte to
machine stack)
TYA,
PUSH
.3MP,
(high byte to
accumulator, push to data stack)
END-CODE
The convention for PUSH and PUT ir
1.
push
the
low byte
onto
the
machine stack.
2.
leave
the
high
byte
in
the
accumulator.
3.
jump to PUSH or PUT.
PUSH will place the two bytes as the
new bottom of the data stack.
PUT will
over-write
the
present
bottom
of
the
stack with the two bytes. Failure to push
exactly one byte on the machine stack will
disrupt execution upon usagel
FOOLING SECURITY
Occasionally
we
wish
to
generate
unstructured code. To accomplish this, we
can control
the assembly
time security
checks, to our purpose.
First, we must
note
the
parameters
utilized
by
the
control structures at assembly time.
The
notation
below
is
taken
from
the as
sembler glossary.
The
—
indicates as
sembly time execution, and separate input
stack values from the output stack values
of the words execution.
BEGIN,
-
— addrB 1
UNTIL, ==>
- addrB
1
cc
—
IF,
==>
cc
ELSE,
==>
addrl 2
THEN, ==>
addrl 2
or
addrE 2
The
address
values
indicate
the
machine
location
of
the
corresponding
‘B’EGIN, ‘PF, or ‘E’LSE,. cc represents the
condition
code
to select
the processor
status bit referenced.
The digit 1 or 2 is
tested for conditional pairing.
The general method of security control
Is to drop off the check digit and manipu
late the addresses at assembly time.
The
security against errors is less, but the pro
grammer Is usually paying intense atten
tion to detail during this effort.
To generate the equivalent of the high
level:
BEGIN (a> WHILE (b>
REPEAT
we write in assembly:
BEGIN, DROP (the check digit
1, leaving addrB)
<a>
CS IF,
Cleaves addrl and digit
2)
ROT C bring addrB to bottom)
JMP, (to addrB of BEGIN,)
ENDIF, (complete false for-
ward branch from IF,)
It is essential to write the assembly
time stack on paper, and run through the
assembly steps, to be sure that the check
digits are dropped and re-inserted at the
correct points and addresses are correctly
available.
ASSEMBLER OLOSSARY
I
Specify
‘Immediate’
addressing
mode for the next op-code gener
ated.
)Y
Specify ‘indirect
indexed V’ ad
dressing
mode
for the next
op..
code generated.
eddrl
2
addrE 2
Page 1Lo6
FORTH DJMENSION5 1W)

