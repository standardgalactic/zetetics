
Scalable Magento 
Development with 
Containers

About me
Andreas Koch
•
Software developer at arvato SCM
•
Located in Germany
•
Passionate about
– Deployment automation
– Scalable software and processes
– PHP, C# and Go
andreaskoch
andykdocs.de

arvato – Bertelsmann

arvato SCM Solutions
Shop 
Development
Digital 
Imaging
Customer 
Service
Global Online 
Marketing
E-Commerce 
Consulting
Warehousing 
& Distribution
Transport 
Management
Financial 
Services
Business 
Intelligence
Returns 
Management
Omnichannel
Value added 
services
Service portfolio
Reference customers

Development,
Hosting &
Operations
of Magento Shops

Hosting Magento is simple. Right?

Hosting Magento is simple. Right? Nope!

Challenge #1: Knowledge Transfer
«I dunno how to configure Nginx. Andy always does that. But he is 
currently on vacation in Vegas.» Knowledge Monopolies

Challenge #2: Parallelization
«Don’t touch the integration environment the next days – we are going 
to test feature xyz!»
Parallelization

Challenge #3: Operations
«How could that have ever worked on the integration environment?!»
Operations

Challenge #3: Operations
Keeping environments in sync is hard.

Challenge #4: Scaling
«Just a little something for the current sprint, Andy: We need a new 
integration and production for the new project. asap!»
Scaling

Introduction to Docker
Container virtualization made easy

What is Docker?
Docker automates the deployment of applications inside containers
•
Based on Linux technologies like
– LXC
– cgroups
– aufs
•
Avoids the overhead of classical virtual machines
– Small and portable containers
– Ideal for application packaging

Solving the Challenges
1.
Knowledge Monopolies
2.
Parallelization
3.
Operations
4.
Scaling

Solving Knowledge Monopolies
Docker allows you to
•
split your infrastructure components into immutable units of 
execution by using standard Docker images such as Nginx, PHP 
and MySQL
•
make your software configuration transparent and traceable with 
Dockerfiles
•
combine all your software dependencies into a single docker-
compose.yml file

Leveraging Docker Standard Images
Docker provides a long list of standard images that are maintained by
Docker or the software authors
Operating System Images
•
Alpine
•
Ubuntu
•
Debian
•
CentOS
•
…
Software components
•
PHP
•
MySQL
•
Nginx
•
Redis
•
…

Docker Standard Images: PHP
Software components
•
PHP
•
MySQL
•
Nginx
•
Redis
•
…

Docker Standard Images: MySQL
Software components
•
PHP
•
MySQL
•
Nginx
•
Redis
•
…

Docker Standard Images: Nginx
Software components
•
PHP
•
MySQL
•
Nginx
•
Redis
•
…

Docker Standard Images: Redis
Software components
•
PHP
•
MySQL
•
Nginx
•
Redis
•
…

Infrastructure Definition with Dockerfiles
FROM ubuntu:latest
RUN apt-get update 
&& apt-get install 
nginx
EXPOSE 80 443
CMD ["nginx", "-g", 
"daemon off;"]
1. Base image
2. Setup commands
3. Expose ports
4. Entry point

Infrastructure Definition with Dockerfiles

Running a Default Nginx Container
$ docker run –p 8080:80 
nginx:1.9

Customization via Docker Volumes
Customizing dockers container with volumes:
$ docker run -p 8080:80 
-v `pwd`/custom-content:/usr/share/nginx/html
nginx:1.9

Customization via Docker Volumes

Customization via Docker Volumes

Orchestration with Docker Compose
•
Multi-container orchestration
•
Define infrastructure setups
•
YAML-based config format
•
Define
– Images
– Ports
– Volumes
version: '2'
services:
web:
image: nginx:stable-alpine
ports:
- 8080:80
volumes_from:
- php:ro
php:
image: php:7.0-fpm
volumes:
- ./web:/var/www/html
docker-compose.yml

Orchestration with Docker Compose
•
Multi-container orchestration
•
Define infrastructure setups
•
YAML-based config format
•
Define
– Images
– Ports
– Volumes
version: '2'
services:
web:
image: nginx:stable-alpine
ports:
- 8080:80
volumes_from:
- php:ro
php:
image: php:7.0-fpm
volumes:
- ./web:/var/www/html
docker-compose.yml

Orchestration with Docker Compose
•
Multi-container orchestration
•
Define infrastructure setups
•
YAML-based config format
•
Define
– Images
– Ports
– Volumes
version: '2'
services:
web:
image: nginx:stable-alpine
ports:
- 8080:80
volumes_from:
- php:ro
php:
image: php:7.0-fpm
volumes:
- ./web:/var/www/html
docker-compose.yml

Orchestration with Docker Compose
•
Multi-container orchestration
•
Define infrastructure setups
•
YAML-based config format
•
Define
– Images
– Ports
– Volumes
version: '2'
services:
web:
image: nginx:stable-alpine
ports:
- 8080:80
volumes_from:
- php:ro
php:
image: php:7.0-fpm
volumes:
- ./web:/var/www/html
docker-compose.yml

Orchestration with Docker Compose

Solving Knowledge Monopolies
Automate the environment setup with Docker Compose

Solving Knowledge Monopolies
Automate the environment setup with Docker Compose
docker-
compose.yml
docker-
compose.yml

Solving the Challenges
1.
Knowledge Monopolies ✓
2.
Parallelization
3.
Operations
4.
Scaling

Enable Parallelization
Combination of tools and processes:
•
Docker Compose
•
Git
Combine infrastructure and software
•
Composer
•
git-flow
Branch on feature level
•
Cloud hosting
Create feature instances for testing on-the-fly
Develop and test features in parallel

Enable Parallelization
Get rid of bottlenecks

Enable Parallelization
Get rid of bottlenecks … by creating feature instances

Enable Parallelization
Create feature-instance with the arvato CloudAPI on-the-fly:

Solving the Challenges
1.
Knowledge Monopolies ✓
2.
Parallelization ✓
3.
Operations
4.
Scaling

Ease Operations
Docker and Docker Compose will reduce operation efforts:
•
Better quality. All environments look the same

Ease Operations
Docker and Docker Compose will reduce operation efforts:
•
Better quality. All environments look the same
•
Easier patching. Download the latest Docker images and restart

Ease Operations
Docker and Docker Compose will reduce operation efforts:
•
Better quality. All environments look the same
•
Easier patching. Download the latest Docker images and restart
•
Easier handling. All projects can be controlled by the same 
commands

Ease Operations
Docker and Docker Compose will reduce operation efforts:
•
Better quality. All environments look the same
•
Easier patching. Download the latest Docker images and restart
•
Easier handling. All projects can be controlled by the same 
commands
•
Easier handover. Between development and operations team(s)

Ease Operations: Deployment & Patching
1.
Copy the new project version to production
2.
Pull the latest Docker images
3.
Run the new project version
docker-
compose.yml
docker-
compose.yml

Solving the Challenges
1.
Knowledge Monopolies ✓
2.
Parallelization ✓
3.
Operations ✓
4.
Scaling

Scaling
Scaling can mean different things:
•
More Load
•
More Features
•
More Businesses

Scaling
What can you do to scale?
•
Add more developers and testers to your team
•
Optimize the infrastructure and code
•
Add more RAM, CPU and storage to your existing servers
•
Add new servers to your production environment

Complexity with Automation

Complexity without Automation

Scaling with Docker
– More Load: Scale horizontally or vertically
– More Features: We can now parallelize our development
– More Businesses: Copy an existing project and customize it
Still not easy. But easier than without it!

Solving the Challenges
1.
Knowledge Monopolies ✓
2.
Parallelization ✓
3.
Operations ✓
4.
Scaling ✓

Combining
Infrastructure & Code
Project structure of a dockerized Magento shop

Combining Code + Infrastructure
−
app
−
bin
−
vendor
−
pub
−
composer.json
−
index.php
−
config
−
mysql
−
nginx
−
php
−
docker-compose.yml
Code
Infrastructure

Handling different environments
−
app
−
…
−
config
−mysql
−nginx
−php-dev
−php-prod
−
docker-compose.yml
−
docker-compose.prod.yml
Configs for other environments
should also be tracked in the
same project, e.g.
•
The production config of your
PHP container should not 
contain Xdebug
•
Usage of a central MySQL 
cluster on production

Handling different environments
−
app
−
…
−
config
−mysql
−nginx
−php-dev
−php-prod
−
docker-compose.yml
−
docker-compose.prod.yml
Using a different Docker Compose
file:
> docker-compose -f docker-
compose.prod.yml up -d

Development Environment
Using Docker on Linux, OS X and Windows

Development Environment
The dockerized development process works on Linux, OS X & Windows. 
All you need is:
– Docker Machine (only for Mac and Windows)
– Docker & Docker Compose
– Git + PHP + Composer
+ An editor or IDE of your choice

Linux
Install Docker:
> curl -fsSL https://get.docker.com/ | sh
and Docker Compose:
> curl -L https://github.com/docker/compose/releases/download/1.7.0-
rc1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-
compose chmod +x /usr/local/bin/docker-compose

Linux

Path in container
/var/www/html
Local path
~/magento2

Docker for Windows and Mac
Install the Docker Toolbox to use Docker on Mac or Windows

Docker Machine

docker-machine ls

docker-machine create

docker-machine create

Docker Machine

Using Docker on Linux, Mac and Windows
• Linux works best
• Mac OS works good
– Use docker-machine-nfs for better performance
• Windows is (imho) a bit awkward to use
• Always get your file system permissions right!

Demo
Dockerizing Magento 2

Dockerizing Magento 2
1.
Create a Magento 2 project
2.
Install arvatoscm/dockerize-
magento2
3.
Start the Docker infrastructure 
and install Magento

Tool check

docker-machine version

docker-machine ls

docker version

docker-compose version

git version

git flow version

composer --version

composer create-project

composer create-project

git flow init

git commit

git flow feature start

Install arvatoscm/dockerize-magento2

Adapt .gitignore

Review installed files

docker-compose.yml

composer.json

config folder

config folder

bin/console script

Make bin/console executable

bin/console

Install Magento 2

Install Magento 2: Generate SSL Certificates

Install Magento 2: Start containers

Install Magento 2: Download Docker Images

Install Magento 2: Trigger Magento Installer

Install Magento 2: Display Shop URLs

Open Magento Frontend & Backend

Try it yourself
1. Install
arvatoscm/dockerize-
magento2
2. Have fun with Magento 
& Docker

Questions
Feedback, questions and pull-requests are welcome.
Thank you.
github.com/arvatoSCM/dockerize-magento2

