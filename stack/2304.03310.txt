Simple ZX and ZH calculi for arbitrary ﬁnite dimensions, via
discrete integrals
Niel de Beaudrap∗
Department of Informatics, University of Sussex, Brighton UK
Richard D. P. East†
4 April 2023
Abstract
The ZX calculus and the ZH calculus use diagrams to denote and to compute properties of quan-
tum operations, and other multi-linear operators described by tensor networks. These calculi involve
‘rewrite rules’, which are algebraic manipulations of the tensor networks through transformations of
diagrams. The way in which diagrams denote tensor networks is through a semantic map, which as-
signs a meaning to each diagram in a compositional way. Slightly diﬀerent semantic maps, which may
prove more convenient for one purpose or another (e.g., analysing unitary circuits versus analysing
counting complexity), give rise to slightly diﬀerent rewrite systems. Through a simple application
of measure theory on discrete sets, we describe a semantic map for ZX and ZH diagrams for qudits
of any dimension D>1, well-suited to represent unitary circuits, and admitting simple rewrite rules.
In doing so, we reproduce the ‘well-tempered’ semantics of Ref. [19] for ZX and ZH diagrams in
the case D=2. We demonstrate rewrite rules for the ‘stabiliser fragment’ of the ZX calculus and a
‘multicharacter fragment’ of the ZH calculus; and demonstrate relationships which would allow the
two calculi to be used interoperably as a single ‘ZXH calculus’.
1
Introduction
The ZX calculus [1–29] and the ZH calculus [30–35, 19] are notational systems for quantum computation,
and other problems which can be mapped onto tensor networks [33, 36–40]. They use annotated graphs —
‘ZX diagrams’ and ‘ZH diagrams’ — to denote tensor networks, in a way which may be used to represent
quantum circuits. They are also equipped with with rules to perform computations without recourse to
exponentially large matrices, through transformations of diagrams. While complicated procedures may
require diagrams of mounting complexity to analyse, in many cases the ZX- and ZH-calculi simplify the
analysis of many-qubit procedures. In recent years, it has also become more common to consider versions
of the ZX- and ZH-calculi which denote operations on qudits [8, 12, 23, 27–29, 35, 41]. These promise
the same beneﬁts for analysis of procedures on qudits, as the corresponding rewrite systems on qubits.
Most treatments of the ZX-calculus [3–7, 9–11, 14–20, 22–27] and the ZH-calculus [30–32, 19, 34, 35]
are ‘scalar exact’, in that diagram transformations preserve the exact meaning as an operator over C,
without glossing over normalisation factors. Such scalar factors are irrelevant for certain applications
(e.g., the analysis of quantum circuits without measurement); but they are important when describing
procedures which have probabilistic elements (e.g., postselection), or problems in which the numerical
value of some coeﬃcient is the subject of interest [40]. To keep track of scalar factors, one might have
to account for changes to the normalising factors with each rewrite, either explicitly or through scalar
gadgets: disconnected subdiagrams which obliquely denote normalising factors.
It is of practical interest to consider what presentations of the ZX- or ZH-calculus avoid frequent
changes to the scalar gadgets or normalising factors associated with the diagrams. An appropriate choice
of presentation may also allow the two calculi to be combined into a single rewrite system (a ‘ZXH cal-
culus’) to transform diagrams using the rules of each [19, 36, 38], allowing the user to make use of the
intuitions oﬀered by both calculi. In previous work [19], one of us addressed this issue of bookkeeping of
scalars for ZX- and ZH-diagrams on qubits, by considering a carefully modiﬁed notational convention for
these diagrams. The result, described as ‘well-tempered’ versions of these calculi, are scalar exact but do
∗niel.debeaudrap@sussex.ac.uk
†rdp.east@gmail.com
1
arXiv:2304.03310v1  [quant-ph]  6 Apr 2023

not introduce modiﬁcations to the scalar factors for the most often-used rewrites. These well-tempered
versions of the ZX- and ZH-calculi are also well-suited to work together, representing a convenient pre-
sentation of a ZXH calculus. However, while the ‘well-tempered’ notation was determined systematically
and led to simpler rewrite rules, the notational convention itself (i.e., the meanings which are assigned
to the simplest diagrams) is slightly unweildly. Furthermore, this analysis did not address the same issue
of scalars which arises for versions of these calculi for qudits of dimension D > 2.
In this work, we consider how diﬀerent normalisations of the ZX- and ZH-calculus may be expressed
in a more uniform way, by representing operators on qudits (of any ﬁxed dimension D > 1) through the
use of integrals with respect to a discrete measure. We may summarise these results, as follows.
Versatile generators for ZX and ZH diagrams.
Let D > 1 be an integer, and let H ∼= CD. We
present a version of the ZX calculus on qudits with state-space H, with generator nodes
Θ
...
m

...

n ,
Θ
...
m

...

n ,
+
,
-
,
(1)
where m, n ∈N and Θ : Z →C is a function which assigns amplitudes to elements of [D]. We call these
generators ‘green dots’, ‘red dots’, and ‘Hadamard plus boxes’, and ‘Hadamard minus boxes’. (In using
functions Θ : Z →C to parameterise green and red dots, we loosely follow Wang [23]. When Θ is absent,
we assume the constant function Θ(x) = 1; if instead a parameter θ ∈R is provided, we assume the
function Θ(x) = eiθx.) We also present a version of the ZH calculus for qudits with Hilbert space H, with
generator nodes
...
m

...

n ,
A
...
m

...

n ,
...
m

...

n ,
c
,
(2)
where m, n ∈N, c ∈Z, and A : Z →C. We call these generators ‘white dots’, ‘H-boxes’, ‘gray dots’,
and ‘generalised-not dots’.1 (We adopt the convention of using functions A : Z →C for the sake of
uniformity with our presentation of ZX diagrams, but allow a complex unit α ∈C× to stand for the
function A(t) = αt. We deﬁne some short-hand notations below for functions A(t) = e2πict/D for c ∈Z.)
Simple semantics for qudit ZX and ZH generators, via integrals.
We label the standard basis
states of H by |x⟩for x ∈[D], where we take the somewhat unconventional choice2
[D] = (−1
2D, 1
2D] ∩Z = {LD, LD+1, . . . , UD−1, UD}
(3)
for LD = −⌊D−1
2 ⌋and UD = ⌊D
2 ⌋. (Note that [D] = {0, 1} for D = 2, but that LD is negative for
D>2.) We deﬁne simple semantics for both sets of generators above, using a notion of integration over
[D]. Speciﬁcally: we consider a measure µ on subsets of [D], deﬁned by µ(S) = #S · ν2, where #S is
the cardinality of S ⊆[D] and ν > 0 is some real number which we later characterise. For functions
f : Z →C, this allows us to deﬁne integrals over [D],
Z
x∈[D]
f(x) :=
Z
x∈[D]
f(x) dµ(x) :=
X
x∈[D]
f(x) ν2 ,
(4)
where for the sake of brevity, we leave the measure µ implicit in the left-hand expression. Such integrals
allow us to express sums with certain normalising factors more uniformly, by absorbing the factors into
the measure µ by an appropriate choice of ν > 0. We also deﬁne non-normalised point-mass distributions
|x⟩⟩= 1
ν |x⟩∈H, expressly to obtain
Z
x∈[D]
⟨⟨z|x⟩⟩f(x) = f(z),
(5)
similarly to the way that Dirac measures may be used with integration over R. (We elaborate on this
notion in Section 3.) We then deﬁne a semantic map [[ · ]] on the ZX and ZH generators as follows:
1We follow Ref. [19] in considering the gray and not dots to be (primitive) generators, rather than gadgets or ‘derived
generators’, e.g., as in Refs. [30, 35].
2We suggest this convention to support rewrites which become possible for arbitrary D > 1. This choice is independent
of the main idea of our work, which is the use discrete integrals such as the one shown in Eqn. (4); this article promotes a
few other such independently motivated conventions (such as the amplitude functions Θ, A : Z →C) which seem fruitful.
2

""
Θ
...
m

...

n
##
=
Z
x∈[D]
Θ(x) |x⟩⟩⊗n⟨⟨x|⊗m
hh
+
ii
=
ZZ
x,k∈[D]
e2πikx/D|k⟩⟩⟨⟨x|
""
Θ
...
m

...

n
##
=
Z
k∈[D]
Θ(k) |ω−k⟩⟩⊗n⟨⟨ωk |⊗m
hh
-
ii
=
ZZ
x,k∈[D]
e−2πikx/D|k⟩⟩⟨⟨x|
""
A
...
m

...

n
##
=
ZZ
x∈[D]m
y∈[D]n
A(x1··· xmy1··· yn) |y⟩⟩⟨⟨x| ,
""
...
m

...

n
##
=
Z
x∈[D]
|x⟩⟩⊗n⟨⟨x|⊗m ,
""
...
m

...

n
##
=
ZZ
x∈[D]m
y∈[D]n


 P
h
xh + P
k
yk
|0

|y⟩⟩⟨⟨x| ,
hh
c
ii
=
Z
x∈[D]
|−c−x⟩⟩⟨⟨x| ,
(6)
where |ωk⟩⟩=
1
√
D
P
x ω−kx |x⟩⟩is an ωk-eigenstate of the operator X, for ω = e2πi/D a primitive Dth
root of unity and X the cyclic shift operator given by X |a⟩= |a+1⟩. Here and elsewhere in our work,
any expression E which indexes a standard basis vector |E⟩or point-mass distribution |E⟩⟩should be
understood as being reduced mod D in that context, to an element of [D] ⊆(−1
2D, 1
2D]. The precise
semantics deﬁned above depends on the parameter ν, which governs the normalisation of the measure µ
on subsets of [D].
Simple rewrites for qudit ZX and ZH diagrams.
We show that imposing the constraint that

+

is a unitary operator, suﬃces to ﬁx the value ν = D−1/4, so that µ([D]) =
√
D. This allows
us to deﬁne a system of scalar-exact rewrites for ZX and ZH diagrams for arbitrary D > 1 which involve
very few scalar gadgets. A selection of such rewrites is presented in Figures 1 & 3, which we prove sound
in Appendix F. (Figure 2 presents some equivalences between ZX and ZH diagrams; Figure 4 presents
how some well-known operators would be represented by diagrams involving ZX and ZH generators.) —
Note that these rewrites have not been chosen either to be either minimal or complete. Rather, we hope
to demonstrate representative rewrites to persuade the reader that ﬁxing the semantics as we do above,
is likely to be beneﬁcial to the exploration of versions of these calculi for qudits of various dimensions.
The special case D = 2.
In addition to being a promising approach to deﬁning ZX and ZH calculi
with simple rewrite systems on qudits, this approach to interpreting ZX and ZH diagrams reproduces3
the ‘well-tempered’ semantic map [[ · ]]ν described in Ref. [19] for D = 2. In this way, Eqns. (6) provide a
more intuitive deﬁnition of those semantics, and extends them to arbitrary D > 1.
Related work.
As we note above, there is recent and ongoing work [8, 12, 23, 27–29, 35, 41] on ZX, ZH,
and related calculi on qudits of dimension D > 2, though often considering the special case where D is an
odd prime. Our work is strongly inﬂuenced in particular by certain ideas of Booth and Carette [27] and
Roy [35], and we are aware of parallel work by collaborations involving these authors [42, 43]. However,
we have reason to believe that our work is distinguished in presenting convenient semantics for both
ZX and ZH diagrams for arbitrary D>1. In particular, our work is intended only to present results
which hold for arbitrary D (albeit allowing for minor variations between the cases of D even and D odd).
Structure of the paper.
Section 2 provides what background we rely upon in number theory and
measure theory, and also for the ZX and ZH calculi, to present our results. Section 3 introduces discrete
measures on [D] and integrals on [D], and considers constraints on normalisation which may be motivated
by particular presentations of the discrete Fourier transform ˆf of a function f : Z →C. In Section 4,
we demonstrate how this yields convenient representations of generalised Cliﬀord gates on H, as well as
general diagonal operations. In Section 5, we outline a normal form for qudit ZH diagrams for all D > 1,
building on a similar construction for D=2. [30]. In Section 6, we remark on the relationship between this
construction and the development of the ‘well-tempered’ semantics for ZX and ZH diagrams for D = 2.
(Throughout, we refer the reader to the various Appendices for particularly technical details which may
be of interest.) We conclude in Section 7 with a summary and general commentary on these results.
3Strictly speaking, the calculi of Ref. [19] involve red and green dots with parameters θ ∈R, H-boxes with parameters
α ∈C, only one type of Hadamard box instead of two, and a ‘nu box’ which is entirely missing in the calculus presented
here. We may bridge these diﬀerences in the case D = 2 by considering the special case of red and green dots parameterised
by functions Θ(x) = exp(iθx) for θ ∈R, H-boxes parameterised by A(x) = αx for α ∈C, identifying both the Hadamard
plus and minus boxes with the single Hadamard box of Ref. [19], and replacing the nu-boxes with some suitable scalar
gadgets (such as H-boxes parameterised by powers of ν = D−1/4).
3

(ZX-GI)
←−−−→
[c] [c]
(ZX-RI)
←−−−→
+
-
(ZX-HI)
←−−−→
θ
Θ
...
...
Φ
...
...
(ZX-GF)
←−−−−→
Θ·Φ
...
...
θ
...
...
φ
...
...
(ZX-GFP)
←−−−−→
θ+φ
...
...
[a1; b1]
...
...
[a2; b2]
...
...
(ZX-GFS)
←−−−−→
[a1+a2 ;
b1+b2]
...
...
Θ
...
...
(ZX-RGC)
←−−−−−→
Θ
+
+
...
+
+
...
...
...
...
...
(ZX-RGB)
←−−−−−→
...
...
[a]
...
(ZX-CPY)
←−−−−→
[a]
[a]
...
θ
¬
¬
...
¬
¬
...
(ZX-NS)
←−−−−→
−θ
...
...
σθ
[1]
[c] [a ; b] [c]
(ZX-RS)
←−−−→
[a−bc ; b]
[c]
[a ; b]
Z
(ZX-Z)
←−−−→
Z
[ ˜a ]
(ZX-ZCP)
←−−−−→
[ ut′ ; t ]
(ZX-ZSP)
←−−−−→Z
...


u
(ZX-MH)
←−−−−→
[0 ; u]
[0 ; u−1]
[0 ; u]
+
[0 ; −u]
[a, b]
...


u
(ZX-ME)
←−−−−→
[−au−1; bu−2]
...


D
(ZX-MEH)
←−−−−−→
(ZX-A)
←−−−→
θ
(ZX-PU)
←−−−−→
[a ; b]
(ZX-SU)
←−−−−→
[a ; u]
[−a ; −u]
(ZX-GU)
←−−−−→
Figure 1:
Various scalar-exact rewrites (including axioms and corollaries) on ZX diagrams, which are sound for
the semantics described in Eqn. (6) subject to ν = D−1/4. Chains of rewrites Dj
(x)
←→· · · ↔Df are intended to
indicate that Dj
(x)
←→Df is either an axiom or notable corollary. Throughout, we have θ, φ ∈R, and Θ, Φ : Z →C,
and a, a1, a2, b, b1, b2, c ∈Z. We deﬁne the constant 0 function, Z : Z →{0}. We let 1 < t < D be a divisor of D,
1 < t′ < t be a divisor of t (and thus also of D), u ∈N an integer which has no common factors t > 1 with D
(sometimes interpreted as an element u ∈Z×
D), and ˜a ∈Z an integer which is not a multiple of D. Many of the
rules involve green dots or red dots parameterised by a label [a] or [a ; b] for a, b ∈Z: these stand respectively
for the amplitude functions x 7→τ −2ax and x 7→τ −2ax−bx2, where τ = exp(πi(D2+1)/D). An annotation ¬ on a
red or green dot indicates a dimension-dependent parameter [−σ], where σ = 0 for D odd and σ = 1 for D even.
Soundness proofs for these rewrites may be found in Appendix F.4.
...
...
(ZXH-GW)
←−−−−−→
...
...
...
...
(ZXH-RG)
←−−−−−→
...
...
Θ
...
...
(ZXH-GP)
←−−−−−→
...
...
Θ
Θ
(ZXH-WH)
←−−−−−→
Θ
[c]
(ZXH-RN)
←−−−−−→
c
(ZXH-RA)
←−−−−−→
+
(ZXH-HP)
←−−−−−→
+1
-
(ZXH-HM)
←−−−−−→
−1
(ZXH-GH0)
←−−−−−→
√
D
Θ
(ZXH-GH)
←−−−−−→
Z
x∈[D]
Θ(x)
Θ
(ZXH-S0)
←−−−−→
Θ(0)
Θ
[c]
(ZXH-S)
←−−−−→
Θ(c)
Figure 2: Sound rewrites between the ZX generators and the ZH generators, subject to the semantics of Eqn. (6).
Some of these rewrites are special cases or (together with ZX- or ZH-rewrites) easy corollaries of the others. For
instance, (ZXH-GP) follows from (ZXH-WH), (ZXH-GW), and fusion of green dots; while (ZXH-S0) is an immediate
consequence of (ZXH-S). Soundness proofs for these rewrites may be found in Appendix F.3.
4

(ZH-WI)
←−−−−→
1
√
D
(ZH-WQS)
←−−−−−→
(ZH-AI)
←−−−→
u
−u
(ZH-HI)
←−−−→
θ
...
...
...
...
(ZH-WF)
←−−−−→
u
u
...
u
u
...
(ZH-GWC)
←−−−−−→
c
c
...
c
c
...
(ZH-WNS)
←−−−−−→
...
...
...
...
...
...
(ZH-GF)
←−−−−→
...
...
(ZH-GL)
←−−−−→
u
u
...
u
u
...
(ZH-WGC)
←−−−−−→
...
...
...
)
D
(ZH-MEH)
←−−−−−→
(ZH-A)
←−−−→

...
...
...
...
(ZH-WGB)
←−−−−−→
...
...
B
A
(ZH-HM)
←−−−−→A·B

0
(ZH-HU)
←−−−−→

α
...
¬
(ZH-EC)
←−−−−→
α−1
ασ
...
c1
...
...
c2 ...
...
−u
(ZH-MF)
←−−−−→
u–1c1c2
...
...

b
a
(ZH-MCA)
←−−−−−→
a+b

+
-
+
-
(ZH-UM)
←−−−−→
+
-
...
...
+
0
+
1
+
2
+
D−1
√
D
(ZH-O)
←−−−→
...
...
+
0
+
1
+
2
+
D−1

−u
−u
u
u
...
...
...
...
(ZH-HWB)
←−−−−−→
v
−v
...
...
u
u
...
...
...
...
(ZH-HMB)
←−−−−−→
−u
...
...
uk
−u
(ZH-ME)
←−−−−→
...
)
k
c1
c2
(ZH-ND)
←−−−−→
c2−c1
0

u
u
c
(ZH-NH)
←−−−−→
u–1c

0
(ZH-NA)
←−−−−→
Figure 3:
Various scalar-exact rewrites (including axioms and corollaries) on ZH diagrams, which are sound for
the semantics described in Eqn. (6) subject to ν = D−1/4. Chains of rewrites Dj
(x)
←→· · · ↔Df are intended to
indicate that Dj
(x)
←→Df is either an axiom or notable corollary. Throughout, we have k ∈N, a, b, c, c1, c2 ∈Z
(which may be evaluated modulo D); u, v ∈Z×
D ; A, B : Z →C; and α ∈C×. H-boxes which are labeled inside
with an integer parameter such as c ∈Z, indicates an amplitude of ωc = e2πic/D; H-boxes labelled with + or -
indicate c = ±1 (see Figure 2). A not dot labeled with ¬ indicates a dimension-dependent parameter −σ ∈Z,
where σ = 0 for D odd and σ = 1 for D even; more generally, not-dots may be parameterised by c ∈Z for the
sake of convenience and reduced modulo D to an element of [D]. Soundness proofs for these rewrites may be
found in Appendix F.2.
hh
[a]
ii
= |a⟩⟩
hh
[a]
ii
= |ωa⟩⟩
hh
[1]
ii
= X
hh
[1]
ii
= Z







= CX




+



= CZ
hh α ii
= α




c



= CCZc

+

=
1
√
D
X
k,x∈[D]
ωkx |k⟩⟨x|




A



=
X
x,y∈[D]
A(xy) |x, y⟩⟨x, y|
hh
Θ
ii
=
X
x∈[D]
Θ(x) |x⟩⟨x|
Figure 4: A selection of simple diagrams to represent vectors and unitary operators, subject to the semantics
of Eqn. (6) and ν = D−1/4. We let α ∈C×, a, c ∈[D], and A, Θ : Z →C. In this case, |a⟩⟩= D1/4|a⟩and
|ωa⟩⟩= D1/4|ωa⟩. We deﬁne X|t⟩= |t+1⟩and Z|t⟩= ωt|t⟩to be the usual generalised Pauli operators on H,
and CX|x, y⟩= |x, y+x⟩and CZ|x, y⟩= ωxy|x, y⟩to be the (integer-)controlled versions of those same operators.
These constructions are discussed in Section 4.
5

2
Preliminaries
2.1
Mathematical preliminaries
Number theory.
Let D > 1 be a ﬁxed integer, and ω = e2πi/D. We assume some basic familiarity
with number theory, in particular with ZD, the integers modulo D. While it is common to associate ZD
with the set {0, 1, . . . , D−1} of non-negative ‘residues’ of integers modulo D, one might also associate
them ZD with a set of ‘signed residues’ [D] = (−1
2D, 1
2D] ∩Z = {LD, LD+1, . . . , UD−1, UD}, where
LD = −⌊D−1
2 ⌋and UD = ⌊D
2 ⌋. We may then occasionally substitute ZD for [D] when this is unlikely to
cause confusion: this will most often occur in the context of expressions such as ωxy, which is well-deﬁned
modulo D in each of the variables x and y (i.e., adding any multiple of D to either x or y does not change
the value of the expression). In such an expression, while we may intend for one of x or y or both may be
an element of ZD in principle, they would in practise be interpreted as a representative integer x, y ∈[D].
Measure theory.
We rely only on a modest amount of measure theory, as follows. For a set X, let
℘(X) be the power-set of X. We may deﬁne a σ-algebra on X to be a set Σ ⊆℘(X) which contains
X, which is closed under set complements (S ∈Σ ⇔X \ S ∈Σ), and which is closed under countable
unions (if S1, S2, . . . ∈Σ, then S1 ∪S2 ∪· · · ∈Σ). — The purpose of deﬁning Σ is to allow the notion of
a measure µ : Σ →R ∪{+∞} to be deﬁned, where the sets S ∈Σ are the ones which have a well-deﬁned
measure. Such a function µ is a measure, if and only if µ(∅) = 0, µ(S) ⩾0 for all S ∈Σ, and if
µ
 S1 ∪S2 ∪· · ·

= µ(S1) + µ(S2) + · · ·
(7)
for any sequence of disjoint sets Sj ∈Σ. An example is the σ-algebra Σ consisting of all countable unions
of intervals over R, with µ deﬁned by assigning µ(J) = b−a to any interval J = (a, b), J = (a, b],
J = [a, b), or J = [a, b] for a ⩽b. A somewhat more exotic measure is the Dirac distribution µδ on R, for
which µδ(S) = 1 if 0 ∈S, and µδ(S) = 0 otherwise.4 However, we will be mainly interested in measures
µ which can be deﬁned on the subsets of [D], in which µ({x}) is the same for every singleton set.
2.2
ZX and ZH diagrams
ZX and ZH diagrams are both systems of ‘string diagrams’. ZX diagrams are eﬀective for representing
operations generated by single-qubit rotations and controlled-NOT gates. In most cases (excepting, e.g.,
Refs. [20, 27]), it rests on the unitary equivalence of two sets of conjugate bases. ZH diagrams were
developed as an alternative notation to ZX diagrams, to facilitate reasoning about quantum circuits over
the Hadamard-Toﬀoli gate set [44, 45]. In each case, the diagrams are composed of dots or boxes, and
wires. These diagrams can be described as being a composition of ‘generators’, which typically consist
of one (or zero) dots/boxes with some amount of meta-data, and any number (zero or more) directed
wires, where the direction is usually represented by an orientation in the diagram. (In this article, wires
are oriented left-to-right, though they are also allowed to bend upwards or downwards.)
Composition of diagrams.
For two generators (or two more complicated diagrams) D1 and D2, we
may deﬁne composite diagrams D1 ⊗D2 and D1 ; D2, which we represent schematically by
D1 ⊗D2
=
D1
D2
;
D1 ; D2
=
D1
D2
,
(8)
which we call the ‘parallel’ and ‘serial’ composition of D1 and D2. In the latter case we require that the
number of output wires of D1 (on the right of D1) equal the number of input wires of D2 (on the left of
D2), for the composition to be well-deﬁned.
Semantic maps.
ZX and ZH diagrams are assigned a meaning, e.g., as operators over C, through a
semantic map [[ · ]] which maps each generator to some scalar, functional, or operator. To each generator
D with m input wires and n output wires, one assigns an operator [[D]] : H⊗m →H⊗n for some ﬁxed
vector space H over C. (For ZX and ZH diagrams over qubits, one takes H ∼= C2; more generally one
may consider H ∼= CD to consider a qudit of dimension D > 1, as we do in this article.) This semantic
map is deﬁned to be consistent with respect to composition, in the sense that
hh
D1 ⊗D2
ii
=

D1

⊗

D2

,
hh
D1 ; D2
ii
=

D2

◦

D1

,
(9)
4For more remarks on the Dirac distribution and related concepts, see Appendix A.
6

where the reversal of the order for sequential composition comes from the convention of considering
matrices as acting on a column vector on their right (so that function application is consistent between
diagrams and operators).
This allows diagrams to denote multi-linear operators on H in a straight-
forward way. The semantics of the ZX and ZH generators are usually deﬁned to facilitate certain ways
of reasoning about multilinear maps on H, through how the diagrams represent those operators.
Wire generators / compact structure.
To represent string diagrams to represent operations in
which some qudits are being permuted or left unaﬀected, we also consider generators consisting only of
wires. Furthermore, we are interested in allowing deformations of diagrams in which the generators are
ﬂex-symmetric [46]. We consider four such generators, to which we assign semantics as follows:

θ

= 1 =
X
x∈[D]
|x⟩⟨x| ,


=
X
x,y∈[D]
|y,x⟩⟨x,y| ,


=
X
x∈[D]
|x,x⟩,


=
X
x∈[D]
⟨x,x| .
(10)
Semantics for ZX generators.
The usual approach to assigning semantics to ZX generators is by
considering the green and red dots to represent similar operations, subject to diﬀerent (conjugate) choices
of orthonormal basis, and a unitary ‘Hadamard’ (or Fourier transform) gate relating the two bases.
Conventionally, one indexes the standard basis of H by |0⟩, |1⟩, . . . , |D−1⟩, in short by |x⟩for x ∈[D]
deﬁned by [D] = {0, 1, . . . , D−1}.
We instead take [D] = (−1
2D, 1
2D] ∩Z as above, and index the
standard basis by |LD⟩, |LD−1⟩, . . . , |−1⟩, |0⟩, |+1⟩, . . . , |UD⟩. We then deﬁne ‘green’ (lighter-coloured)
dots in terms of an action on the basis |x⟩, and the ‘red’ (darker-coloured) dots in terms of an action
on the basis |ωx⟩, where |ωk⟩=
1
√
D
P
x ω−kx |x⟩for k ∈[D].5
Speciﬁcally: for a green dot with
angular parameters θ ∈R[D], one conventionally assigns the interpretion P
x∈[D] eiθx |x⟩⊗n⟨x|⊗m; and
one assigns the interpretation P
x∈[D] eiθx |ωx⟩⊗n⟨ωx|⊗m to a red dot with parameter θ. For D > 2,
taking such a conventional interpretation does not yield a ‘ﬂexsymmetric’ [46] calculus, in eﬀect because
⟨ωa|T = |ωa⟩∗= |ω−a⟩. In particular, this would mean that

θ

=

θ

=

θ

(11)
would not hold: the ﬁrst would denote P
x eiθx |ω−x, ωx⟩, the second would denote P
x eiθx |ωx, ωx⟩, and
the third would denote P
x eiθx |ωx, ω−x⟩. Speciﬁcally, this represents a way in which such a calculus
would fail to have the useful syntactic property that “only the connectivity matters” [1, 13]; and other
inconveniences would also arise, which would make these diagrams more diﬃcult to work with. In order
to avoid this problem, we endorse the convention adopted Refs. [27, 28] of involving a generator which
is related to the green dot by diﬀerent unitary transformations on the inputs and outputs. We then
interpret the generators of Eqn (1) as operators using a model [[ · ]] which typically satisﬁes the following:
""
Θ
...
m

...

n
##
∝
X
x∈[D]
Θ(x) |x⟩⊗n⟨x|⊗m
hh
+
ii
∝
X
k∈[D]
|k⟩⟨ωk| =
1
√
D
X X
x,k∈[D]
e2πikx/D |x⟩⟨k|
""
Θ
...
m

...

n
##
∝
X
k∈[D]
Θ(k) |ω−k⟩⊗n⟨ωk |⊗m
hh
-
ii
∝
X
k∈[D]
|ωk⟩⟨k| =
1
√
D
X X
x,k∈[D]
e−2πikx/D |x⟩⟨k|
(12)
where we allow a general function Θ(x) for Θ : Z →C in place of a phase parameter eiθx given by a
vector θ ∈R[D].6 We can recover the usual convention of parameterising nodes by a simple phase angle
when desired, by adopting a short-hand in which an angle θ stands for the function Θ(x) = eiθx and a
vector θ ∈R[D] stands for the function Θ(x) = eiθx. Note that the semantics for the
+
box, makes
it proportional to the quantum Fourier transform over ZD.
Semantics for ZH generators.
The main feature of ZH diagrams is the use of the H boxes to
represent scalar coeﬃcients in a symmetric way depending on products of indices. We typically interpret
the generators of Eqn (2) as operators using a model [[ · ]] which satisﬁes the following:
""
...
m

...

n
##
∝
X
x∈[D]
|x⟩⊗n⟨x|⊗m
hh
c
ii
∝
X
x∈ZD
|−c−x⟩⟨x|
""
A
...
m

...

n
##
∝
X X
x∈[D]m, y∈[D]n
A(x1··· xmy1··· yn) |y⟩⟨x|
""
...
m

...

n
##
∝
X X
x∈Zm
D, y∈Zn
D
P
h
xh+P
k
yk = 0
|y⟩⟨x| .
(13)
5In the notation of Booth and Carette [27], we have |ωk⟩= |k:X⟩, up to a relabeling of the basis elements of H.
6For the case D = 2, Ref. [19] shows advantages to including scalar factors diﬀerent from +1 for a semantic map following
Eqn. (12). Our work is to describe one fruitful way to choose such scalar factors.
7

where we allow a general function A : Z →C in place of an amplitude α ∈C which one would con-
ventionally use to parameterise H-boxes. Again, we can recover the usual convention by adopting the
short-hand, that an amplitude α ∈C× stands for the function A(t) = αt for t ∈Z.7 In particular, we ﬁx
the semantics so that
hh α ii
=
X
(singleton)
α(empty product) · 1 = α1 = α.
(14)
Note that for the H-boxes, we consider the products of the input and output labels x1, . . . , xm, y1, . . . , ym
as integers in the context of the expression A(x1 · · · ym). By contrast, for the gray dots and the not-dots,
we adopt an interpretation of the elements of [D] as integers modulo D, and consider ZD arithmetic in
the labels of the point-mass functions. (For instance, for the gray dots, we constrain the summation
indices x ∈Zm
D and y ∈Zn
D, so that the sum of their entries is 0 ∈ZD .)
Rewrite systems.
In addition to merely denoting operators over C, we may perform calculations using
ZX and ZH diagrams, by considering transformations of diagrams D1 7→D2 that satisfy [[D1]] = [[D2]].
This is occasionally relaxed, to consider rewrite systems for which [[D1]] ∝[[D2]]; systems in which equality
holds may be called scalar exact to emphasise this fact. A rewrite which preserves semantics in this way,
are said to be sound for that semantic map [[ · ]]; which rewrites have this property depends on the choice
of [[ · ]]. A separate, more diﬃcult to analyse property is how easy a rewrite system is to use. We suggest
that rewrite systems, in which the most commonly used rewrite rules can be expressed simply, are to
be preferred over others; but this depends on obtaining a semantic map [[ · ]] for which such a rewrite
system is sound. In Ref. [19], in the case D = 2, one of us formulated just such a semantic map [[ · ]]ν
for both ZX and ZH diagrams. However, the semantics assigned to the ZX and ZH generators by [[ · ]]ν
is non-obvious, presenting a diﬀerent obstacle to working with those semantics. This raises the question
of how one might obtain semantics for the ZX and ZH generators, which are themselves easily to express
and reason about, and also leads to a system of rewrites which is simple and easy to reason about.
3
Qudit operators as multi-linear maps on a measure space
In this section, we consider how we may express sums and multilinear operators on H ∼= CD, in terms
of integrals over [D] with a discrete measure. We then consider the constraints imposed on Ockhamic
semantic map of ZX- and ZH-generators, by requiring that they be simply expressed by such integrals.
We then describe some of the consequences of these semantics for rewrite systems on these diagrams.
3.1
Measures and integration over ZD
We may consider the σ-algebra B = ℘([D]), consisting of all subsets of [D], and deﬁne the measure
µ : B →R on this σ-algebra given by
µ(S) = #S · ν2,
(15)
for some ν > 0 which in principle may be chosen freely. (Here, #S simply denotes the number of elements
of S.) Let N = Dν2 represent the measure that we assign to the entire set [D] in that µ([D]) = N; we
also have µ({a}) = ν2 = N/D for an arbitrary singleton a ∈[D].
This presents [D] as a measure space, the purpose of which is to allow us to deﬁne (multi-)linear
operators on H as arising from integrals with respect to that measure. For a function f : Z →C, we may
deﬁne a notion of integration of f over a subset S ⊆[D]:
Z
x∈S
f(x) dµ(x) =
X
x∈S
f(x) µ({x}) =
X
x∈S
f(x) ν2,
and in particular N =
Z
x∈[D]
1 · dµ(x) ,
(16)
consistent with the notion of normalisation of N for the entire measure space [D].
Our use of integrals and discrete measures in this way is standard, if somewhat uncommon in quantum
information theory: see Ref. [47] for a comparable example (though in our work, we sometimes emphasise
the measure more). Nor are we the ﬁrst to use integration in relation to describing diagrammatic calculi:
see for instance the work of Majid [29], which however is much more concerned with deﬁning a form of
7Note that our convention of indexing the basis vectors of H by |x⟩for x ∈[D] = {LD, LD+1, . . . , UD−1, UD}, means
that for D > 2 we the exponential function t 7→αt for α = 0 is not well-deﬁned. We may instead consider a more function
X{0} : Z →C given by X{0}(t) = 1 for t = 0, with X{0}(t) = 0 otherwise; this substitution is adequate to play the same
role that A(t) = αt plays for α = 0 where t ∈{0, 1, . . . , D−1}, e.g., in certain applications to counting complexity [33, 40].
8

the ZX calculus to non-(co-)commutative algebras and co-algebras. By contrast, our intent is explicitly
to draw attention to integrals as an means of deﬁning multi-linear operators on H, as an approach to
deﬁning semantic maps for ZX and ZH diagrams.
We may apply this notion of integration to operator-valued functions, as is typical for wave-functions
in quantum mechanics. For instance, one may deﬁne
Z
x∈S
f(x) |x⟩dµ(x) = ν2 X
x∈S
f(x) |x⟩.
(17)
Note that in the usual approach to describing wave-functions over R, one takes |x⟩to represent a point-
mass distribution (i.e., it isn’t a vector v ∈CR for which vx = 1), so that the following equality holds:
⟨z|
" Z
x∈R
f(x) |x⟩dx
#
=
Z
x∈R
f(x)δz(x) dx = f(z),
(18)
where here δz(x) is a shifted Dirac distribution (see Appendix A.1 for more details). In the vector space
H, to avoid notational confusion, we prefer to reserve the symbol ‘|x⟩’ to represent a unit-norm standard
basis vector (i.e., a vector v ∈H such that vx = 1); but we may introduce a symbol ‘|x⟩⟩’ which denotes
the vector |x⟩⟩=
1
ν |x⟩, speciﬁcally so that we may write
⟨⟨z|
"
Z
x∈[D]
f(x) |x⟩⟩dµ(x)
#
=
Z
x∈[D]
f(x) ⟨⟨z|x⟩⟩dµ(x) = ν2 X
x∈[D]
f(x)⟨z|x⟩
ν2
= f(z) ,
(19)
and also
Z
x∈[D]
|x⟩⟩⟨⟨x| dµ(x) = ν2 X
x∈[D]
|x⟩⟨x|
ν2
=
X
x∈[D]
|x⟩⟨x| = 1 .
(20)
This notation ‘|x⟩⟩’ for a possibly-non-normalised basis vector provides us the ﬂexibility to consider which
measures µ : B →R are best suited for deﬁning convenient semantics for ZX and ZH generators, while
retaining the features provided by Dirac distributions over R.
The above is in principle all the background that is necessary to interpret these integrals over [D], as
we use them in this article. However, it is also possible to interpret this notion of integration over [D] in
terms of integration over ZD, which in turn may be interpreted in terms of integration over a continuous
group. Readers who are interested in such an interpretation may ﬁnd it in Appendix C.3.
3.2
Constraints on normalisation motivated by the Fourier transform
A precise value for ν > 0 or for N > 0 is something that can only be ﬁxed by imposing constraints on the
way that we represent certain integrals, operators, or functionals. We are particularly interested in the
constraints imposed by how one would represent the discrete Fourier transform over ZD, as an analogue
of the Fourier transform over R.
For a function f : ZD →C, in analogy to a common representation of the Fourier transform of a
real-valued function,8 suppose that we wished to describe the (discrete) Fourier transform of f by a
function ˆf : ZD →C given by
ˆf(k) =
Z
x∈ZD
e−2πikx/D f(x) dµ(x),
(21)
where here we adopt a notion of integration over ZD induced by the one described above for [D]. Diﬀering
conventions exist for how one might normalise the Fourier transform, over R or indeed over ZD : in
particular, opinions could diﬀer about whether Eqn. (21) should be modiﬁed by including a non-trivial
scalar factor on the right-hand side. Whether this should be done is connected to the question of whether
we consider the Fourier transform to preserve the measure µ of ZD, the separate question of whether we
consider it to preserve the ℓ2 norm of the functions it acts on in an appropriate sense, and the further
question of what the measure N = µ(ZD) should be.
8We emulate the presentation of the Fourier transform in terms of an oscillation frequency k (as the more common
convention of angular frequency 2πk used by physicists does not admit an obvious deﬁnition over the integers mod D). The
factor of 1/D in the exponent, which is the main notational diﬀerence between Eqn. (21) and the usual Fourier transform
over R, can be shown to arise from formal connections between the Fourier transform over R and representations of functions
f : ZD →C in terms of discrete distributions on R (see Appendix C.4). Note also the presence of a minus sign in the
exponent, which for historical reasons is absent in the usual deﬁnition of the quantum Fourier transform.
9

We adopt the convention of deﬁning the Fourier transform of f : ZD →C as in Eqn. (21). It will be
useful (again in analogy to standard practise in physics) to use f to describe a ‘wave-function’,9
|f⟩⟩:=
Z
x∈ZD
f(x) |x⟩⟩dµ(x) .
(22)
Whether the Fourier transform “preserves the measure of ZD”, is the question of how we should interpret
the domain of ˆf as a measure space (ZD, µ′), where µ′ in principle may diﬀer from µ.10 We would write
| ˆf ⟩⟩=
Z
k∈ZD
ˆf(k) |k⟩⟩dµ′(k) ,
(23)
integrating with respect to that diﬀerent measure, for which µ′(ZD) = N ′ might diﬀer from N. Taking
µ′ ̸= µ would imply that the domain of the Fourier transform, consisting of functions f : (ZD, µ) →C,
is strictly speaking not the same as the codomain ˆf : (ZD, µ′) →C. The string diagrams that would
result, would involve wires of more than one type. While not impossible in principle, this is a departure
from the usual approach of deﬁning the ZX and ZH calculus, in which the wires all have the same type.
For the sake of simplicity — both in analysis of integrals, and in the design of ZX and ZH calculi — we
prefer to conceive of f and ˆf as having the same measure space (ZD, µ) for their domains. Identifying
µ′ = µ, we may simplify Eqn. (23) to
| ˆf ⟩⟩=
Z
k∈ZD
ˆf(k) |k⟩⟩dµ(k) =
ZZ
k,x∈ZD
e−2πikx/Df(x) |k⟩⟩dµ(x) dµ(k) .
(24)
This would then motivate the deﬁnition for the discrete Fourier transform operator F over ZD, as
F =
ZZ
k,x∈ZD
e−2πikx/D |k⟩⟩⟨⟨x| dµ(x) dµ(k) ,
(25)
so that F|f⟩⟩= | ˆf ⟩⟩.
The question of whether the Fourier transform preserves the norm, is precisely the question of whether
F is unitary. We adopt the convention that F is indeed unitary, to allow it to directly represent a possible
transformation of state-vectors over H. This has the further beneﬁt that the inverse Fourier transform
can be expressed simularly to the Fourier transform, i.e., without scalar factors:
F −1 = F † =
ZZ
x,k∈ZD
e2πikx/D |x⟩⟩⟨⟨k| dµ(k) dµ(x) ,
(26)
so that in particular we may write
f(x) = ⟨⟨x|F †| ˆf ⟩⟩=
Z
k∈ZD
e2πikx/D ˆf(k) dµ(k) ,
(27)
again in close analogy to the standard deﬁnition of the Fourier transform over R.
The deﬁnition of F in Eqn. (25) and the constraint that it should be unitary, imposes a constraint on
the measure µ on ZD. We ﬁrst prove a routine Lemma (which will be of some use in the Appendices in
simplifying iterated integrals):
Lemma 1. Let ω = e2πi/D and E ∈[D]. Then
R
k∈ZD
ωEk dµ(k) = ⟨⟨E|0⟩⟩Dν4.
Proof. This holds by reduction to the usual exponential sum:
Z
k∈[D]
e2πiEk/D dµ(k) = ν2 X
k∈[D]
 ωEk =





ν2 · ωELD · (ωE)D −1
ω −1
, if ωE ̸= 1
ν2 · D, if ωE = 1





= δE,0 Dν2
= ⟨E|0⟩Dν2
= ⟨⟨E|0⟩⟩Dν4 .
9Note that |f⟩⟩is not necessarily a unit vector; whether |f⟩⟩∈H is normalised depends on the values taken by f.
10This may seem like quite a technical consideration, but it is in principle unavoidable in physics when performing Fourier
analysis over R, as it is connected to the choice of units for the domain of the function f and for its Fourier transform ˆf.
10

We may apply this in the case of the Fourier transform as follows. If F as expressed in Eqn. (25) is
unitary, we have
1 = F †F =
"
ZZ
y,h∈[D]
e2πihy/D |y⟩⟩⟨⟨h| dµ(y) dµ(h)
#"
ZZ
k,x∈[D]
e−2πikx/D |k⟩⟩⟨⟨x| dµ(k) dµ(x)
#
=
ZZZZ
y,h,k,x∈[D]
e2πi(hy−kx)/D |y⟩⟩⟨⟨h|k⟩⟩⟨⟨x| dµ(y) dµ(h) dµ(k) dµ(x)
=
ZZZ
y,k,x∈[D]
e2πik(y−x)/D |y⟩⟩⟨⟨x| dµ(y) dµ(k) dµ(x)
=
ZZ
y,x∈[D]
"
Z
k∈[D]
e2πik(y−x)/D dµ(k)
#
|y⟩⟩⟨⟨x| dµ(y) dµ(x)
=
ZZ
y,x∈[D]
h
Dν4 · ⟨⟨y|x⟩⟩
i
|y⟩⟩⟨⟨x| dµ(y) dµ(x) = Dν4
Z
x∈[D]
|x⟩⟩⟨⟨x| dµ(x) = Dν4 · 1 .
(28)
This implies that ν = D−1/4 (or equivalently, N = µ(ZD) = Dν2 =
√
D).
It may be of interest to consider, how imposing a value for N diﬀerent from
√
D would aﬀect the
presentation of the Fourier transform, or the relationships between the measures of the domain of a
function f : (ZD, µ) →C and that of ˆf. We discuss this in Appendix B.
4
Application to ZX- and ZH-calculi
There are a number of convenient consequences to deﬁning a discrete integral on [D] as we do in the
preceding Section, ﬁrstly for analysis of the Fourier transform and certain discrete integrals of roots
of unity, and for sound rewrite systems on ZX and ZH diagrams when we assign semantics for the
ZX and ZH generators as we do in Eqn. (6). In this section, we demonstrate these features — in part to
demonstrate how simple operators would be denoted using our semantics for the ZX and ZH generators,
but also in part to demonstrate how those same operators can be denoted using discrete integrals.
Fourier basis distributions.
We deﬁned the vectors |ωk⟩⟩on page 3 essentially as a formal (super-
normalised) analogue of the orthonormal Fourier basis states |ωk⟩. As a simple consequence of choosing
the normalisation for integrals over [D], so that the Fourier transform is a unitary transformation on
wave-functions, we may express the vectors |ωk⟩⟩quite simply (dropping the dµ(x) for brevity):
|ωk⟩⟩= F|k⟩⟩=
Z
x∈[D]
ω−kx |x⟩⟩.
(29)
Quadratic Gaussian integrals.
Following Ref. [50], deﬁne the complex unit τ = eπi(D2+1)/D, which
is relevant to the analysis of stabiliser circuits on qudits of dimension D. To analyse such circuits using
ZX diagrams, the following integral will be relevant:
Γ(a, b, D) :=
Z
x∈[D]
τ 2ax+bx2 .
(30)
Evaluating this discrete integral is connected with the subject of quadratic Gaussian sums, which we
address in some detail Appendix D. As a result of the normalisation convention for our discrete integrals,
it is possible to show (see Eqn. (100) on page 29) that
Γ(a, b, D)
 = 1 when b is a multiplicative unit
modulo D (e.g., b = ±1); if a = 0 as well, Γ(a, b, D) is a power of eπi/4. More generally, Γ(a, b, D)
will either be 0, or have magnitude
√
t, where t = gcd(b, D). Speciﬁcally, we have Γ(a, b, D) = 0 if
a is not divisible by t, or if (D + Db/t2) ∈Z is odd; and |Γ(a, b, D)| =
√
t otherwise. In particular,
Γ(0, 0, D) =
R
x 1 dµ(x) =
√
D.
The stabiliser fragment of ZX for qudits of dimension D.
The scalar τ is deﬁned in such a way
that τ 2 = ω, but also so that τX†Z† is an operator of order D, where X and Z given by
X |t⟩= |t + 1⟩,
Z |t⟩= ωt |t⟩,
(31)
11

are the D-dimensional generalised Pauli operators. (As always, arithmetic performed in the kets are
evaluated modulo D.) Choosing τ in this way makes it possible [50] to deﬁne a simple and uniform
theory of unitary stabiliser circuits on qudits of dimension D, generated by the single-qudit operators11
S =
Z
x∈[D]
τ x2 |x⟩⟩⟨⟨x| ;
F =
ZZ
k,x∈[D]
τ −2kx |k⟩⟩⟨⟨x| ;
Mu =
Z
x∈[D]
|ux⟩⟩⟨⟨x|
for various u ∈Z×
D,
(32)
and either one of the two-qudit operators
CX =
ZZ
x,y∈[D]
|x⟩⟩⟨⟨x| ⊗|x+y⟩⟩⟨⟨y| ;
CZ =
ZZ
x,y∈[D]
τ 2xy |x, y⟩⟩⟨⟨x, y| .
(33)
Using a slightly diﬀerent notational convention to Booth and Carette [27], we may easily denote these
with ZX diagrams using the semantics of Eqn. (6). For a, b ∈Z, when parameterising a green or red dot,
let [a ; b] stand for the amplitude function Θ(x) = τ 2ax+bx2, so that

[a ; b]

=
Z
x∈[D]
τ 2ax + bx2 |x⟩⟩;

[a ; b]

=
Z
k∈[D]
τ 2ak + bk2 |ω−k⟩⟩;
(34)
generalising these to dots with multiple edges (or with none) similarly to Ref. [27]. When b = 0, we may
abbreviate this function simply by [a], so that we may then easily represent the operators S, Z, and X
as 1 →1 dots:

[1]

=
Z
x∈[D]
τ 2x |x⟩⟩⟨⟨x| = Z ;

[0 ; 1]

=
Z
x∈[D]
τ x2 |x⟩⟩⟨⟨x| = S ;
(35a)

[1]

=
Z
h∈[D]
τ 2h |ωh⟩⟩⟨⟨ωh| = X .
(35b)
We may also represent the states |a⟩⟩and |ωa⟩⟩straightforwardly (albeit with the use of auxiliary red dots
to represent an antipode operator, mapping |ωa⟩⟩7→|ω−a⟩⟩and |a⟩⟩7→|−a⟩⟩for a ∈ZD):

[a]

=
ZZ
k,x∈[D]
τ 2ax |ω−k⟩⟩⟨⟨ωk|x⟩⟩= |ωa⟩⟩;
(36a)

[a]

=
ZZ
h,k∈[D]
τ 2ah |ω−k⟩⟩⟨⟨ωk|ω−h⟩⟩= |a⟩⟩.
(36b)
The remaining operators may be expressed without any phases, using multi-edges between green and red
dots, or using Hadamard boxes:
""
##
= CX ,
""
+
##
= CZ ,
""
...
)
u
##
= Mu .
(37)
(The diagram shown for Mu also generalises to operators Mu =
R
x |ux⟩⟩⟨⟨x| for u not a multiplicative unit
modulo D, though in that case the operator will not be invertible.) Finally, dots of degree 0 frequently
have a simple interpretation:
hh
[a ; b]
ii
=
Z
x∈[D]
τ 2ax+bx2 =: Γ(a, b, D) =
(√
t · eiγ,
if t = gcd(b, D) and a is divisible by t;
0,
otherwise,
(38)
where γ is a phase parameter described in more detail in Eqn. (100); where in particular for b a multi-
plicative unit modulo D, this represents a global phase factor. This provides a diagrammatic language
which is capable of expressing the rewrites similar to those described by Ref. [27], while involving fewer
11Note that the deﬁnitions below are equivalent to those of Ref. [50], despite the diﬀerent convention we adopt for the
labeling of the standard basis. For each x ∈[D], we either have x ⩾0 or x < 0: in the latter case the relative phases τ 2ax+bx2
remain well-deﬁned on substitution of values x < 0 with D + x, as τ 2a(D+x)+b(D+x)2 = τ 2aD+2ax+bD2+2bD+bx2 = τ 2ax+bx2
(using the fact that τ D2 = τ 2D = 1 for both even and odd D).
12

scalar factors; and the semantics can be easily described through the use of discrete integrals over [D].
To make our presentation of the ZX-calculus complete for the stabilizer fragment (i.e., for the subtheory
in which all amplitudes are given by [a ; b] for various a, b ∈Z),12 it would suﬃce to describe rewrites for
particular values of D which force an interpretation of [a ; b]
as being either Γ(a, b, D) or Γ(a, b, D)∗.
Multipliers and multicharacters in qudit ZH.
In practise, it would be cumbersome to reason
about multiplication operators Mu or iterated CX or CZ gates using parallel edges between dots. Booth
and Carette describe [27] how these may be denoted using recursively deﬁned gadgets called ‘multipliers’,
denoted
c
for c ∈N, which represent a limited form of scalable ZX notation [51, 52]. Using discrete
integrals and the semantics described in Eqn. (6), we would simply write
""
c
##
=
""
...
)
c
##
=
Z
x∈[D]
|cx⟩⟩⟨⟨x| .
(39)
Using these multipliers, Booth and Carette [27, p. 24] then deﬁne ‘Fourier boxes’
c
:=
c
+
(using our notation for Hadamard boxes), with semantics given by
hh
c
ii
=
ZZ
x,y∈[D]
ωcxy |y⟩⟩⟨⟨x| .
(40)
As a ZH generator, this is an H-box with an amplitude parameter ωc. Using this as a primitive, and
composing this with the inverse
-
of the positive Hadamard box
+
, we may directly describe
multipliers instead as a ZH gadget, also loosely following Roy [35]:
c
-
=:
c
.
(41)
The amplitude parameter ωc corresponds to a character function χc : Z →C given by χc(x) = ωcx, which
is well-deﬁned modulo D, and which we may then regard as a character on ZD. The function Z × Z →C
given by (x, y) 7→χc(xy) is a bicharacter, which is also well-deﬁned modulo D on each of its arguments;
and more generally we may consider multicharacters, which are functions ZD × · · · × ZD →C given by
(x1, . . . , xn) 7→ωcx1···xn. We may call H-boxes with any number of edges, and with amplitude parameter
ωc for some c ∈ZD, a (ZD-)multicharacter box. We may use multiplier gadgets and multicharacter boxes
themselves to usefully describe unitary transformations:




-
c



= CXc =
ZZ
x,y∈[D]
|x, y+cx⟩⟩⟨⟨x, y| ,




c



= CZc =
ZZ
x,y∈[D]
ωcxy |x, y⟩⟩⟨⟨x, y| .
(42)
Note that for c ∈ZD, we may also easily describe unitary transformations operations which are in general
not stabiliser operators over ZD, such as highly-controlled-X and -Z operators. For example:




c
-



= CCXc =
ZZZ
x,y,z∈[D]
|x, y, z+cxy⟩⟩⟨⟨x, y, z| ,




c



= CCZc =
ZZZ
x,y,z∈[D]
ωcxyz |x, y, z⟩⟩⟨⟨x, y, z| . (43)
General controlled gates in qudit ZH.
The above construction is not special to multicharacters
over ZD, and can also be used in conjunction with an arbitrary amplitude α ∈C× (yielding a unitary
operator if and only if |α| = 1), or indeed a more general function A : Z →C:




α




=
ZZZZ
w,x,y,z∈[D]
αwxyz |w,x,y,z⟩⟩⟨⟨w,x,y,z|
=
X
w,x,y,z∈[D]
αwxyz |w,x,y,z⟩⟨w,x,y,z| ,




A




=
ZZZZ
w,x,y,z∈[D]
A(wxyz) |w,x,y,z⟩⟩⟨⟨w,x,y,z|
=
X
w,x,y,z∈[D]
A(wxyz) |w,x,y,z⟩⟨w,x,y,z| .
(44)
Note that here one must recall that the variables of integration are integers, and in particular that the
12Note in particular that we do not present any rules which are clear analogues to the rules (Gauss), (M-One), (Neg), or
(Pos) of Ref. [27]. We expect that such rules would be necessary to demonstrate completeness for the stabiliser fragment
of ZX for D > 2 prime. Still more work still may be necessary to demonstrate completeness for composite D, thoigh possibly
in the case where D is square-free may prove to be simpler than the general case.
13

product of the variables of integration are evaluated in Z. It is for the application of multiply-controlled α
gates for α ∈C×, that we have chosen to index the standard basis by [D] = {LD, LD+1, . . . , UD−1, UD},
where LD is negative for D > 2. The set [D] admits a simple involution,
¬ : [D] →[D] ;
¬x := σ −x ,
where σ = UD + LD =
(
1,
if D is even;
0,
if D is odd,
(45)
so that ¬x = 1−x for D even, and ¬x = −x for D odd.13 If we deﬁne the syntactic sugar
¬
:=
−σ
,
we may show that




¬
α




=




¬
α
¬




=
ZZZZ
w,x,y,z∈[D]
α(σ−w)xyz |¬w, x, y, z⟩⟩⟨⟨w, x, y, z|
=
ZZZZ
w,x,y,z∈[D]
ασxyzα−wxyz |¬w, x, y, z⟩⟩⟨⟨w, x, y, z| =




α−1
ασ
¬




.
(46)
As a consequence, for a green node with arbitrary phase parameter θ ∈R (representing an amplitude
function Θ(x) = eiθx), it is possible to show that




θ
¬
¬
...
¬
¬
...



=




−θ
...
...
eiθσ



,
(47)
generalising the situation in conventional presentations of the ZX calculus for D = 2, in which red π-phase
dots play the role of the ¬-dots.
Remark on the above constructions.
Throughout the above, the operators, vectors, and scalars
may be deﬁned simply using integrals and the super-normalised point-mass distributions |x⟩⟩.
These
lead to straightforward representations of a variety of unitary operators. We have also, incidentally, set
out a convention for representing stabiliser phases for ZX diagrams and for indexing basis states of H,
which we feel are helpful to present the vectors |a⟩⟩and |ωa⟩⟩themselves, and the Pauli and Cliﬀord
operators on H for arbitrary D > 1. These conventions allow us to analyse ZD-multicharacters in the
case of ZH diagrams, and are nearly suﬃcient to analyse the stabiliser fragment over ZD in the case of
ZX diagrams at least for D prime (apart from an absence of rules to reason about scalars).
Remark on rewrites.
The discussion above only begins to touch on the way in which these semantics
for ZX and ZH diagrams, supports simple and useful rewrites.
A greater variety of rewrites which
are sound for these semantics are demonstrated in Figures 1–3 (on pages 4 & 5), with proofs given in
Appendix F. While there is clearly work still to be done to demonstrate complete versions of these calculi
(suﬃcient to prove equality of diagrams through rewrites alone), we hope that this section provides
a convincing demonstration that developing useful and complete qudit ZX-, ZH-, and ZXH-calculi is
possible, through the use of semantics expressed as discrete integrals in this way.
5
Sketch of a qudit normal form for ZH
In this Section, we outline a normal form for ZH diagrams, which together with standard techniques for
ZH normal forms [30] suﬃce for any D > 1 to denote an arbitrary operator on H.
We may use the more general amplitude functions A : Z →C to deﬁne more ﬁne-grained operators
than with amplitude parameters alone. For instance, let XS be the characteristic function of a set S ⊆Z
(so that XS(t) = 0 if t /∈S, and XS(t) = 1 otherwise), and let VS(t) = (−1)XS(t). Then for D > 2, the
operation
13A similar involution ¬x = ˜σ −x exists for alternative deﬁnitions of [D], consisting of a sequence of D consecutive
integers. For instance: for the more conventional choice [D] = {0, 1, . . . , D−1}, one would take ˜σ = D−1 for all D > 1.
This leads to rewrites which motivated us, on aesthetic grounds, to consider what deﬁnition of [D] would yield the smallest
possible value of σ for various D > 1. This is what leads us to advocate the convention [D] = {LD, LD+1, . . . , UD−1, UD}
for LD = −⌊D−1
2 ⌋and UD = ⌊D
2 ⌋, most notably given that σ = 0 for all odd D.
14





V{1}



=
ZZ
x,y∈[D]
V{1}(xy) |x, y⟩⟩⟨⟨x, y| = 1 −2

|-1, -1⟩⟨-1, -1| + |+1, +1⟩⟨+1, +1|

(48)
induces a sign of −1 on the |-1, -1⟩and |+1, +1⟩components of the two qudits it acts on (as these are
precisely the basis states |x, y⟩for which xy = +1 ∈Z).14
We may use similar gadgets as the basis of a normal form for qudit ZH diagrams. For an arbitrary
number m ⩾0 of input wires, we may consider a gadget of the form15
m









...
1−σ
1−σ
M(2m)
α
,
where M(k)
α (t) =
(
α,
if t = U k
D ;
1,
otherwise.
(49)
We may describe the behaviour of this gadget as it acts on standard basis states. Each input wire of
this gadget admits a state |xj⟩⟩, and copies it to produce a pair |xj, xj⟩⟩. One copy is then acted on with
a (1−σ)-not-dot, yielding a state |xj, ρD(σ−1−xj)⟩⟩= |xj, ρD(¬x−1)⟩⟩, where ρD : Z →[D] is a map
which reduces each integer modulo D to a representative in [D]. (The map ρD is implicit in many of the
transformations in which one might prefer to evaluate arithmetic modulo D: it arises here because we
must map the associate the expression σ−1−xj , which we might prefer to implicitly evaluate modulo D
in the basis labels, to an explicit element of Z.) The M(2m)
α
box then maps |x⟩⟩7→α if and only if
n
Y
j=1

xj · ρD(¬x −1)

= U 2m
D
,
(50)
and maps |x⟩⟩7→+1 otherwise. For x ∈Zm, Eqn. (50) is satisﬁed only if xj · ρD(¬x −1) = ±U 2
D for each
xj individually, as UD ∈[D] is the element with the largest absolute value.
• Note that ρD(¬x −1) ̸= ¬x −1 if and only if ¬x = LD, which is to say precisely when x = UD: in
this case, we have x · ρD(¬x −1) = U 2
D.
• Otherwise, for x < UD, we have x · ρD(¬x −1) = x · (¬x −1) = σx −x −x2. For D even, we have
σx −x −x2 = −x2; for D odd, we instead have σx −x −x2 = −x2 = −x(x + 1). The absolute
values of these expressions are bounded strictly below U 2
D in either case.
Then Eqn. (50) is satisﬁed if and only if xj = UD for each 1 ⩽j ⩽m. The action of the gadget in
Eqn. (49) is then to map |UD⟩⟩⊗m 7→α and |x⟩⟩7→+1 for all other x ∈[D]m.
Using gadgets of this form, we may express any operator Ω: H⊗m →H⊗n in terms of its coeﬃcients,
in a similar manner to the normal form for ZH diagrams in D = 2 presented by Backens and Kissinger [30].
That is, we may take any operator, transform it into a vector using cup operators, use white dots to
make copies of each qudit in the standard basis (one copy for every coeﬃcient of the operator), and then
apply not-dots and gadgets of the form in Eqn. (49) to ﬁx the value of each coeﬃcient αx,y = ⟨⟨x| Ω|y⟩⟩=
ν−m−n Ωx,y for x ∈[D]m and y ∈[D]n.
Remark on the above construction.
We do not expect that the rewrite rules that we have set out,
for ZX or ZH diagrams, suﬃce to transform arbitrary diagrams to such a normal form. We leave open
the problem of demonstrating rewrites to transform arbitrary qudit ZH diagrams into a form such as the
one we have sketched here, or a similar one. We do think that it is likely that simple rewrite rules can be
found, which might allow the gadget of Eqn. (49) to be expressed using only phase-amplitude gadgets.
However, setting out such rules is beyond the scope of our current work, which is simply to present an
advantageous semantic map for ZX and ZH diagrams through discrete integrals.
14This is one drawback to the choice to index the standard basis by elements of {LD, LD+1, . . . , UD−1, UD} where LD
may be negative. A more conventional choice of [D] = {0, 1, . . . , D−1} would see a similar operation induce a sign only on
the |+1, +1⟩component, which would make possible a signiﬁcant simpliﬁcation of the normal form described just below.
15Similar constructions are in many cases possible using a gadget of the form illustrated on the
right — where εα(t) = α for t = 1 and εα(t) = 1 otherwise — relying on the fact that 1 −x2 = ±1
has no solutions over the integers except for x = 0, in which case 1−x2 = +1. However, to be more
precise, we must consider the conditions under which ρD(−ρD(−1−x)) · ρD(1−x) = ±1 admits
solutions for x ∈[D]; and speciﬁcally when D = 4 and x = 2, we have ρ4(−ρ4(−1−x))·ρ4(1−x) =
(−1)·(−1) = +1. Constructions which single out |x⟩⟩= |t⟩⟩⊗n for a ﬁxed t ∈Z will likely fail for
some single value of D, for similar reasons.
...
...
−1
+1
−1
+1
εα
15

6
The case D = 2, and ‘Ockhamic’ semantic maps
Notice that the normalisation ν = D−1/4, and the corresponding semantics, essentially reproduces the
‘well-tempered’ semantics of ZX and ZH diagrams [19] in the case that D = 2.
The process by which we obtain this semantic map in this article, may appear very diﬀerent from
how the well-tempered interpretation was devised in Ref. [19]. In the latter case, a family of ‘Ockhamic’
semantic maps were considered which diﬀered from each other in the values of normalising scalar factors
for each of the generators, subject to some constraints. (We discuss and generalise the notion of ‘Ock-
hamic semantic maps’ of ZX diagrams and of ZH diagrams in Appendix E.) A speciﬁc semantic map
was then isolated by imposing successive constraints in the form of equations on the semantics of speciﬁc
diagrams. This eﬀectively solved for a semantic map, for which certain rewrite rules were sound. How-
ever, it must be admitted that the analysis of Ref. [19] does not provide any particular intuition for why
ν = D−1/4 should be a natural parameter to govern the relationships between the ZX and ZH generators.
In this article, we instead set out a semantic map, making use of discrete integrals and an accompany-
ing system of point-mass distributions, with the intent that he ZX and ZH generators should be as simple
as possible within that framework. The precise semantics were determined by the single parameter ν,
which we then ﬁxed by constraining the representation of the (quantum) Fourier transform. However:
it is worth noting that the framework of discrete integrals and (what we have here called) ‘accompany-
ing’ point-mass distributions, implicitly impose some of the constraints that were explicitly imposed in
Ref. [19]. Speciﬁcally: by choosing our notation so that
Z
x∈[D]
|x⟩⟩⊗n⟨⟨x|a⟩⟩
=
|a⟩⟩⊗n,
(51)
it is not diﬃcult to show that we automatically ensure the correctness of a number of rewrites including
(ZX-GF), (ZX-CPY), (ZX-PU), (ZH-AI), (ZH-NS), (ZH-WGB), and (ZH-HM) for the semantics of Eqn. (6).
In this way, we may regard the framework of discrete integrals and accompanying point-mass distributions
as simplifying both the results and the methodology of Ref. [19]. This provides a clariﬁcation and a
theoretical justiﬁcation of the ‘well-tempered’ semantics, and indeed an extension of them to all D > 1.
Note that choosing the interpretations of Eqn. (6) just for the ZH generators, does not in fact impose
any constraints on either the measure µ on [D]. In the analysis of Section E.2, we show that (taken
on their own), the semantics of Eqn. (6) for the ZH generators only imposes the constraint on the
interpretation that the generators must be related to each other by simple geometric progressions related
to the parameter ν, but does not ﬁx what ν should be.
(If we take ν =1, Eqn. (6) reproduces the
original semantics provided by Backens and Kissinger [30] for the ZH generators for D=2.) In eﬀect,
the ZH calculus prioritises the standard basis to such an extent that it does not impose any strong
relationships between that basis and any other, and in so doing leaves ν unconstrained. It is the single
constraint on the ZX generators, that |ωk⟩⟩=
R
x ω−kx |x⟩⟩should be unitarily equivalent to |x⟩⟩, which
suﬃces to ﬁx the measure µ and thus to ﬁx speciﬁc semantics for all of the generators through Eqn. (6).
7
Summary and Discussion
We have presented an version of the ZX-and ZH-calculi over qudits of dimension D > 1, with an inter-
pretation of the generators given through simple discrete integrals over a set [D] of representatives of ZD,
using an accompanying set of point-mass distributions |x⟩⟩as the basis for the deﬁnition of operators.
This integral is determined by a measure µ on [D], which we constrain through a choice of representa-
tion for the Fourier transform. This latter constraint ﬁxes a measure such that µ({∗}) = D−1/2 and
µ([D]) =
√
D. With respect to this measure, we have demonstrated simple rewrite rules which are sound
for this interpretation. Continued work on these calculi (either as separate calculi or a uniﬁed calculus) is
necessary to demonstrate completeness, ideally while retaining the features which promise to make these
interpretations of the calculi easy to use.
In addition to the use of discrete integrals, we have made one other signiﬁcant and unusual choice of
representation: to index the standard basis by [D] = (−1
2D, 1
2D] rather than {0, 1, . . . , D−1}. Many of the
results in our work (in particular: all those to do with the stabiliser fragment of ZX, and multicharacter
boxes in ZH) will hold equally well with either set of labels for the standard basis. In particular, both
are equally adequate for representing what results might rest on interpreting arithmetic on the labels as
taking place in the ring ZD, for those expressions which are well-deﬁned modulo D. Our choice of labels
is motivated by certain elegant features of the special case D = 2, concerning an involution ¬ : [D] →[D]
given by ¬x = σ−x. Our notational choice is then motivated by imposing the constraint that [D] = {0, 1}
for D = 2, and then requiring σ to be as small and simply expressed as possible for all D > 1 subject to
16

that constraint. For [D] = (−1
2D, 1
2D], this yields the involutions ¬x = 1 −x for D even and ¬x = −x
for D odd. We look forward to feedback on this choice of convention, and are interested in whether there
would be any comparable notational conveniences to selecting the labels {0, 1, . . . , D−1} instead.16
We note that both in our choice of involution ¬ : [D] →[D] and in the stabiliser fragment of ZX,
there is a signiﬁcant distinction between the cases of D even and D odd. In particular: in the stabiliser
fragment of ZX, we are concerned with phases which are powers of τ = eπi(D2+1)/D, but for D even
this is a 2Dth root of unity, while for D odd it is a Dth root of unity. It is remarkable that, despite
this distinction, the semantics which one obtains for nodes such as [a ; b]
should be consistent for all
dimensions D > 1, in that (a) it denotes a complex phase whenever b is a multiplicative unit modulo D,
(b) it denotes the scalar
√
D = µ([D]) for a = b = 0, and (c) more generally, the magnitude of the scalar
that it denotes is either 0 or
√
t for t = gcd(b, D). It should be noted that there will be other respects
in which the case of D even will be signiﬁcantly more complicated than D odd: see Ref. [50] for more
details. However, as our work manages to present a simple and unifying presentation for the stabiliser
fragment of ZX over all dimensions D > 1, perhaps these can be managed so long as one remains mindful
of the other major distinction, of whether D is prime or composite.
We conclude with a highly speculative thought regarding discrete measures. A signiﬁcant constraint
which we imposed on the measure µ on [D] — interpreted as a measure on ZD — was that the Fourier
transform should be interpretable as an involution C(ZD,µ) →C(ZD,µ) on functions on the measure space
(ZD, µ), rather than a bijection C(ZD,µ) →C(ZD,µ′) between functions on distinct measure spaces (ZD, µ)
and (ZD, µ′). This may seem like a necessary but technical step; from the perspective of conventional
presentations of ZX diagrams, it is necessary, if all of the wires are to have the same type. However,
it is noteworthy that many quantum algorithms have a structure similar to Fourier sampling, in which
some classical operation (with a distinguished control register) is made to act on some state which is in
not in the standard basis, but rather in a superposition (often through the involvement of the Fourier
transform), after which the amplitudes of the diﬀerent components are made to interfere (often through
the involvement of the inverse Fourier transform). In this respect, many quantum algorithms have a
structure which suggest the possibility of changes in the datatype associated with a physical qubit at
diﬀerent stages of the algorithm. Could it be that it would be more appropriate on the logical level, to
have multiple types of qubit — a ‘standard’ type and a ‘Fourier’ type, possibly among others — than
to have just a single type of logical qubit? It would be interesting to consider what insights into the
structure of quantum algorithms might arise, by considering multiple types of qubit or quantum register
apart from distinctions of dimension and resister size, and contrasting the roles in which they play in
existing quantum algorithms. Should such a program prove to be non-trivial, it is conceivable that this
could give rise to new insights into structured quantum programming.
Acknowledgements
NdB would like to thank Patrick Roy, Titouan Carette, John van de Wetering, and Robert Booth for
helpful technical discussions.
References
[1] B. Coecke and R. Duncan.
Interacting quantum observables:
categorical algebra and diagrammatics.
New. J. Phys 13 (043016), 2011. DOI: 10.1088/1367-2630/13/4/043016; See also [arXiv:0906.4725].
[2] R. Duncan and S. Perdrix. Graph States and the Necessity of Euler Decomposition. Mathematical The-
ory and Computational Practice (pp. 167–177), 2009.
DOI: 10.1007/978-3-642-03073-4__18;
See also
[arXiv:0902.0500].
[3] M. Backens. Making the stabilizer ZX-calculus complete for scalars. Electronic Proceedings in Theoretical
Computer Science 195 (pp. 17–32), 2015. [arXiv:1507.03854]
[4] S. Perdrix and Q. Wang.
Supplementarity is Necessary for Quantum Diagram Reasoning.
Proceedings
of 41st International Symposium on Mathematical Foundations of Computer Science (76:1–76:14), 2016.
DOI: 0.4230/LIPIcs.MFCS.2016.76; see also [arXiv:1506.03055].
[5] M. Backens, S. Perdrix, and Q. Wang.
A Simpliﬁed Stabilizer ZX-calculus.
Electronic Proceedings in
Theoretical Computer Science 236 (pp. 1–20), 2017. DOI: 10.4204/EPTCS.236.1; See also [arXiv:1602.04744],
16The simpliﬁcation of the normal form that would be made possible is worth noting, but we would suggest that this
beneﬁt should be assigned an importance based on how often a practitioner might expect to compute a normal form.
17

[6] E. Jeandel, S. Perdrix, R. Vilmart, and Q. Wang. ZX-Calculus: Cyclotomic Supplementarity and Incom-
pleteness for Cliﬀord+T Quantum Mechanics. Proceedings of 42nd International Symposium on Mathemat-
ical Foundations of Computer Science (11:1–11:13), 2017. DOI: 10.4230/LIPIcs.MFCS.2017.11; See also
[arXiv:1702.01945].
[7] B. Coecke and A. Kissinger. Picturing Quantum Processes: A First Course in Quantum Theory and Dia-
grammatic Reasoning. Cambridge University Press, 2017. DOI: 10.1017/9781316219317.
[8] X. Gong and Q. Wang. Equivalence of Local Complementation and Euler Decomposition in the Qutrit ZX-
calculus. [arXiv:1704.05955], 2017.
[9] K. F. Ng and Q. Wang. A universal completion of the ZX-calculus. [arXiv:1706.09877], 2017.
[10] E. Jeandel, S. Perdrix, and R. Vilmart.
A Complete Axiomatisation of the ZX-Calculus for Cliﬀord+T
Quantum Mechanics. 33rd Annual ACM/IEEE Symposium on Logic in Computer Science (pp. 559–568),
2018. DOI: 10.1145/3209108.3209131; See also [arXiv:1705.11151], 2017.
[11] K. F. Ng and Q. Wang. Completeness of the ZX-calculus for Pure Qubit Cliﬀord+T Quantum Mechanics.
[arXiv:1801.07993], 2018.
[12] Q. Wang. Qutrit ZX-calculus is Complete for Stabilizer Quantum Mechanics. Electronic Proceedings in The-
oretical Computer Science 266 (pp. 58–70), 2018. DOI: 10.4204/EPTCS.266.3; See also [arXiv:1803.00696].
[13] B. Coecke and Q. Wang. ZX-rules for 2-qubit Cliﬀord+T quantum circuits. Lecture Notes in Computer
Science 11106 (pp. 144–161), 2018. DOI: 10.1007/978-3-319-99498-7_10; See also [arXiv:1804.05356].
[14] R. Vilmart.
A Near-Minimal Axiomatisation of ZX-Calculus for Pure Qubit Quantum Mechan-
ics.
34th
Annual
ACM/IEEE
Symposium
on
Logic
in
Computer
Science
(pp.
1–10),
2019.
DOI: 10.1109/LICS.2019.8785765; See also [arXiv:1812.09114],
[15] R. Vilmart. A ZX-Calculus with Triangles for Toﬀoli-Hadamard, Cliﬀord+T, and Beyond. Electronic Pro-
ceedings in Theoretical Computer Science 287 (pp. 313–344), 2019. DOI: 10.4204/EPTCS.287.18; See also
[arXiv:1804.03084],
[16] E. Jeandel, S. Perdrix, and R. Vilmart. Completeness of the ZX-Calculus. [arXiv:1903.06035], 2019.
[17] Q. Wang. An algebraic axiomatisation of ZX-calculus. [arXiv:1911.06752], 2019.
[18] Q.
Wang.
ZX-calculus
over
arbitrary
commutative
rings
and
semirings
(extended
abstract).
[arXiv:1912.01003], 2019.
[19] N. de Beaudrap. Well-tempered ZX and ZH calculi. Electronic Proceedings in Theoretical Computer Sci-
ence 340 (pp. 13–45), 2021. DOI: 10.4204/EPTCS.340.2; See also [arXiv:2006.02557].
[20] Q. Wang.
Algebraic complete axiomatisation of ZX-calculus with a normal form via elementary matrix
operations. [arXiv:2007.13739], 2020.
[21] J. van de Wetering. ZX-calculus for the working quantum computer scientist. [2012.13966], 2020.
[22] A. Toumi, R. Yeung, and G. de Felice. Diagrammatic Diﬀerentiation for Quantum Machine Learning. Elec-
tronic Proceedings in Theoretical Computer Science 343 (pp. 132–144), 2021. DOI: 10.4204/EPTCS.343.7;
See also [arXiv:2103.07960].
[23] Q. Wang. Quﬁnite ZX-calculus: a uniﬁed framework of qudit ZX-calculi. [arXiv:2104.06429], 2021.
[24] Q. Wang, R. Yeung, and M. Koch. Diﬀerentiating and Integrating ZX Diagrams. [arXiv:2201.13250], 2022.
[25] E.
Jeandel,
S.
Perdrix,
and
M.
Veshchezerova.
Addition
and
Diﬀerentiation
of
ZX-diagrams.
[arXiv:2202.11386], 2022.
[26] T.
Stollenwerk
and
S.
Hadﬁeld.
Diagrammatic
Analysis
for
Parameterized
Quantum
Circuits.
[arXiv:2204.01307], 2022.
[27] R. I. Booth and T. Carette. Complete ZX-Calculi for the Stabiliser Fragment in Odd Prime Dimensions.
47th International Symposium on Mathematical Foundations of Computer Science (pp. 24:1–24:15), 2022.
DOI: 10.4230/LIPIcs.MFCS.2022.24; See also [arXiv:2204.12531].
[28] J. van de Wetering and L. Yeh. Phase gadget compilation for diagonal qutrit gates. [arXiv:2204.13681], 2022.
[29] S. Majid.
Quantum and braided ZX calculus.
J. Phys. A: Math. Theor. 55 (254007),
2022.
DOI: 10.1088/1751-8121/ac631f; See also [arXiv:2103.07264].
[30] M. Backens and A. Kissinger. ZH: A Complete Graphical Calculus for Quantum Computations Involving
Classical Non-linearity.
Electronic Proceedings in Theoretical Computer Science 287 (pp. 23–42), 2019.
DOI: 10.4204/EPTCS.287.2; See also [arXiv:1805.02175].
[31] J. van de Wetering and S. Wolﬀs. Completeness of the Phase-free ZH-calculus. [arXiv:1904.07545], 2019.
[32] S. Kuijpers, J. van de Wetering, and A. Kissinger.
Graphical Fourier Theory and the Cost of Quantum
Addition. [arXiv:1904.07551], 2019.
18

[33] N. de Beaudrap, A. Kissinger, and K. Meichanetzidis.
Tensor Network Rewriting Strategies for Satis-
ﬁability and Counting.
Electronic Proceedings in Theoretical Computer Science 340 (pp. 46–59), 2021.
DOI: 10.4204/EPTCS.340.3; See also [arXiv:2004.06455].
[34] M. Backens, A. Kissinger, H. Miller-Bakewell, J. van de Wetering, and S. Wolﬀs.
Completeness of the
ZH-calculus. [arXiv:2103.06610], 2021.
[35] P. Roy. Qudit ZH-calculus. MSc. Thesis, University of Oxford.
Available at https://www.cs.ox.ac.uk/people/aleks.kissinger/theses/roy-thesis.pdf
(accessed 27 February 2023).
[36] R. D. P. East, J. van de Wetering, N. Chancellor, and A. G. Grushin. AKLT-states as ZX-diagrams: diagram-
matic reasoning for quantum states. PRX Quantum 3 (010302), 2022. DOI: 10.1103/PRXQuantum.3.010302;
See also [arXiv:2012.01219].
[37] A. Townsend-Teague and K. Meichanetzidis. Classifying Complexity with the ZX-Calculus: Jones Polyno-
mials and Potts Partition Functions. Accepted submission to QPL 2022. [arXiv:2103.06914], 2021.
[38] R. D. P. East,
P. Martin-Dussaud,
and J. van de Wetering.
Spin-networks in the ZX-calculus.
[arXiv:2111.03114], 2021.
[39] G. de Felice and B. Coecke. Quantum Linear Optics via String Diagrams. Accepted submission to QPL 2022.
[arXiv:2204.12985]
[40] T. Laakkonen, K. Meichanetzidis, and J. van de Wetering. A Graphical #SAT Algorithm for Formulae with
Small Clause Density. [arXiv:2212.08048], 2022.
[41] B. Poór, Q. Wang, R. A. Shaikh, L. Yeh, R. Yeung, and B. Coecke.
Completeness for arbitrary ﬁnite
dimensions of ZXW-calculus, a unifying calculus, [arXiv:2302.12135], 2023.
[42] P. Roy, J. van de Wetering, L. Yeh. Title to be determined. Submission to QPL 2023, to appear.
[43] B. Poór, R. I. Booth, T. Carette, J. van de Wetering, L. Yeh. The Qupit Stabiliser ZX-travaganza: Simpliﬁed
Axioms, Normal Forms and Graph-Theoretic Simpliﬁcation. Submission to QPL 2023, to appear.
[44] Y. Shi. Both Toﬀoli and Controlled-NOT Need Little Help to Do Universal Quantum Computing. Quantum
Information & Compututation 3 (pp. 84–92), 2003. [arXiv:quant-ph/0205115].
[45] D. Aharonov. A Simple Proof that Toﬀoli and Hadamard are Quantum Universal. [arXiv:quant-ph/0301040],
2003.
[46] T. Carette. Wielding the ZX-calculus, Flexsymmetry, Mixed States, and Scalable Notations. Ph.D. Thesis,
Loria, Université de Lorraine, 2021. https://hal.archives-ouvertes.fr/tel-03468027/document
[47] D. Schlingemann. Cluster States, Algorithms and Graphs. Quantum Info. & Comput. 4 (pp. 287–324), 2004.
DOI: 10.5555/2011827.2011831; See also [arXiv:quant-ph/0305170].
[48] A. Córdoba. Dirac combs. Lett. Math. Phys. 17 (pp. 191–196), 1989. DOI: 10.1007/BF00401584
[49] T. Carette and E. Jeandel. A recipe for quantum graphical languages. 47th International Colloquium on
Automata, Languages, and Programming (pp. 118:1–118:17), 2020. DOI: 10.4230/LIPIcs.ICALP.2020.118;
See also [arXiv:2008.04193].
[50] N. de Beaudrap. A linearized stabilizer formalism for systems of ﬁnite dimension. Quant. Info. & Comp. 13
(pp. 73–115), 2013. DOI: 10.26421/QIC13.1-2-6; See also [arXiv:1102.3354].
[51] T. Carette, D. Horsman, and S. Perdrix. SZX-Calculus: Scalable Graphical Quantum Reasoning. Proceedings
of 44th International Symposium on Mathematical Foundations of Computer Science (55:1–55:15), 2019.
DOI: 10.4230/LIPIcs.MFCS.2019.55; See also [arXiv:1905.00041].
[52] T. Carette, Y. D’Anello, and S. Perdrix. Quantum Algorithms and Oracles with the Scalable ZX-calculus. Elec-
tronic Proceedings in Theoretical Computer Science 343 (pp. 193–209), 2021. DOI: 10.4204/EPTCS.343.10;
See also [arXiv:2104.01043].
19

A
Discrete measures on R
A.1
Dirac deltas
When analysing functions on R, it is not uncommon to consider a Dirac distribution δ (also known as
the ‘Dirac delta’), which is deﬁned in such a way that for an interval J ⊆R,
Z
x∈J
f(x) δ(x −a) dx =
(
f(a),
if a ∈J;
0,
otherwise.
(52)
One may conceive of δ(x) as the limit of a family of formally deﬁnable functions, such as the Gaussians
N1/n(x) =
n
√
2π e−(nx)2/2 as n →∞. In principle, one may consider it as syntactic sugar for a measure
µδ on R, which for any interval J ⊆R satisﬁes µ(J) = 1 if 0 ∈J, and µ(J) = 0 otherwise: we call this a
‘point-mass distribution’. We may write δa(x) = δ(x−a) for any a ∈R, so that δa describes a point-mass
distribution at a ∈R: that is, a measure µa such that µa(S) = 1 if a ∈S, and µa(S) = 0 otherwise.
(More generally, a point-mass distribution is any distribution of the form paδa for pa ̸= 0: the ‘mass’
of such a distribution is then pa.) The purpose of the Dirac distributions would then be to allow us to
write
R
J f(x) δa(x) dx =
R
J f(x) δ(x−a) dx in place of
R
J f(x+a) dµa . This provides a notational bridge
between the discrete measures µa and the more common (Lebesgue) measure, so that we may perform
analysis as though consistently working with a single variety of integration.
A.2
Impulses and Dirac combs
A discrete measure ρ on R is a measure which is a linear combination of a countable (and possibly ﬁnite)
number of such point-mass distributions. While such measures are not real-valued functions on R, we
may say that ρ(a) ̸= 0 if for any function f : R →C, we have
R
(a−ε,a+ε) f(x) ρ(x) dx −→paf(a) for some
pa ̸= 0, as ε →0. We may refer to the contributions of the point-mass distributions as ‘impulses’: for a
discrete measure ρ, we say that ρ has an impluse at a if ρ(a) ̸= 0 in this sense.
We deﬁne the Dirac comb X (see, e.g., Ref. [48]) as a discrete distribution, consisting of a sequence
of a sum of unit point-mass distributions on Z:
X(x) =
X
t∈Z
δt(x) .
(53)
The Dirac comb is its own Fourier transform, which allows us to also express it as:
X(x) =
X
k∈Z
e2πikx =
X
k∈Z
e−2πikx.
(54)
We may use the Dirac comb to express any function φ : Z →C as a complex linear combination of
impulses at the integers: if we let φ′ : R →C be any extension of φ to the real numbers, we may deﬁne
the complex-valued discrete ‘distribution’ Iφ on R, by
Iφ(x) = X(x) φ′(x) =
X
t∈Z
δt(x) φ(t),
(55)
This will allow us to express sums on integers, in terms of integrals over R: for instance, for any integers
a < b, we then have
Z
(a,b]
Iφ(x) dx =
X
a<t⩽b
φ(t);
(56)
in particular, we have
R
(a,b] X(x) dx = b−a, which is the number of integers in the interval (a, b]. Finally,
we may consider normalised versions of the Dirac comb with impulses at integer multiples of any interval
length ℓ> 0:
Xℓ(x) = ℓ
X
t∈Z
δℓt(x) = ℓ
X
t∈Z
δ(x −ℓt) = ℓ
X
k∈Z
e2πikx/ℓ.
(57)
The leading scalar factor of ℓin these sums, ensures that for a < b which are integer multiples of ℓ,
we again have
R
(a,b] X(x) dx = b −a. We may then use this to deﬁne a generalisation of I, to embed
functions φ : Z →C as complex-valued measures in R, but with impulses at intervals of ℓ> 0: for φ′
again any extension of φ to R, we deﬁne
Iℓφ(x) = Xℓ(x) φ′( 1
ℓx) =
X
t∈Z
δℓt(x) φ(t).
(58)
20

B
Relationship between µ and the Fourier transform
In Section 3.2, we described the way in which the measure µ on ZD (induced from the measure on [D]
deﬁned in Section 3.1) is constrained by various constraints on the discrete Fourier transform, construed
as a map f 7→ˆf on functions f : ZD →C. In particular, if we consider ZD as a measure space and take
f : (ZD, µ) →C and ˆf : (ZD, µ) →C to have the same domain considered as measure spaces, and if
we also take F : |f⟩⟩7→| ˆf⟩⟩as deﬁned in Eqn. (25) to be unitary, we ﬁnd that N = µ(ZD) =
√
D (or
equivalently, ν = ⟨⟨x|x⟩⟩−1/2 = D−1/4).
If one wished instead to have a more general relation N = λD for some scalar λ ̸= D−1/2, one could
instead consider
• setting F †F = α1 for a scalar α > 0, which is equal to 1 if and only if F is unitary;
• Deﬁning ˆf to range over the space (ZD, µ′) for a measure µ′ = βµ for some scalar β > 0;
• Deﬁning the Fourier transform ˆf of f by modifying Eqn. (21) to incorporate an additional scalar
factor γ > 0 which may diﬀer from 1.
We consider the consequences of all three such modiﬁcations. Let X{0} : ZD →C be the function such
that X{0}(t) = 1 if and only if t = 0, and X{0}(t) = 0 otherwise; then
X{0}

=
Z
x∈(ZD,µ)
X{0}(x) |x⟩⟩= ν2|0⟩⟩= ν |0⟩,
(59)
from which it follows that
bX{0}(k) = γ
Z
x∈(ZD,µ)
X{0}(x) e−2πikx/D = γν2.
(60)
Let J : ZD →C be the constant function J(x) = 1: then J =
1
γν2 bX{0}. For the sake of uniformity, deﬁne
point-mass functions |k⟩⟩to accompany the integrals over k ∈(ZD, µ′) for µ′ = βµ, so that
Z
k∈(ZD,µ′)
⟨⟨k|k⟩⟩dµ′(k) = 1.
(61)
Using the fact that ν2 = µ({∗}) = N/D, we then have
N = µ(ZD) =
Z
x∈(ZD,µ)
1 dµ(x) = β
Z
k∈(ZD,µ′)
1 dµ′(k) = β
ZZ
h,k∈(ZD,µ′)
J(h)∗J(k) ⟨⟨h|k⟩⟩dµ′(h) dµ′(k)
= β ⟨⟨J|J⟩⟩=
β
γ2ν4


 bX{0}
 bX{0}

=
β
γ2ν4


X{0}
F †F
X{0}

=
αβ
γ2ν4


X{0}
X{0}

=
αβ
γ2ν2 = αβD
γ2N ,
(62)
so that
N =
√αβD
γ
.
(63)
Thus, we may vary any three of α, β, γ, and N to determine the remaining parameter.
If one wished to ﬁx a diﬀerent value for N (e.g., N = 1 or N = D), and separately ﬁx the extent to
which F increases or decreases the ℓ2 norm of its operands (if one wished to adopt a convention where F
might not be a unitary matrix), this would determine the extent to which the diﬀerence in the norm of ˆf
corresponds to a change of units µ to µ′ as we transform f 7→ˆf, or to which Eqn. (21) must be rescaled,
or both. Instead, we elect to ﬁx α, β, γ = 1, which allows us to take Eqn. (21) unmodiﬁed, to consider
only one measure µ on ZD in the context of the Fourier transform, and to take F to be unitary. This
imposes the constraint N =
√
D, or equivalently ν = D−1/4.
While these remarks stand apart from any analysis over R, it is possible to show how relating the
measure µ on ZD to a discrete measure on the compact continuous group RN further motivates distinct
measures µ, µ′ for the domains of f : (ZD, µ) →C and that of ˆf : (ZD, µ′) →C, if one ﬁxes N to be
diﬀerent from
√
D. See Appendix C.4 for more details.
21

C
Motivating measures for ZD via continuous groups
The analysis of Section 3, on measures on ZD and constraints on them motivated by the Fourier transform,
stands on its own in principle. However, the reader may be interested in certain observations of how
consistent this is with Fourier analysis on R, or whether our observations of measure could be motivated
with reference to continuous cyclic groups.
We discuss how this may be done below, by considering how we may model functions f : ZD →C in
terms of complex-valued discrete distributions with period N. This will require some further preliminaries,
in particular on the subject of discrete distributions on R.
C.1
Elementary number theory and periodic functions on Z
We begin with some supplemental background, providing a ring-theoretic framework in which to describe
arithmetic modulo D, using this as a framework to consider periodic functions f : Z →C.
In this article, ZD denotes the ring of the integers modulo D. These are often be represented by
integers drawn from the set of integers 0 ⩽x < D, though we will often prefer to represent them by
the set of integers [D] := (−1
2D, 1
2D] ∩Z. More properly speaking, ZD is a set of equivalence classes of
integers which diﬀer by multiples of D,
x + DZ =

x + nD
 n ∈Z
	
,
(64)
equipped with addition (x+DZ) + (y+DZ) = (x+y) + DZ and multiplication (x+DZ)·(y+DZ) =
(xy) + DZ. The representatives 0 ⩽x < D or −1
2D < x ⩽1
2D described above then serve as short-hand
for the corresponding equivalence class x + DZ. We may occasionally conﬂate ZD with such sets of
representatives.
There is a ring homomorphism πD : Z →ZD (the ‘canonical projection’) which may be deﬁned
by πD(x) = x + DZ. We may use this to deﬁne a transformation L on functions, which carries maps
f : ZD →C to periodic functions Lf : Z →C, given by Lf = f ◦πD. Then L ‘lifts’ functions f : ZD →C
to functions Lf, which are ‘well-deﬁned’ modulo D in the sense that Lf(x) = Lf(x + nD) for any n ∈Z.
By an abuse of notation, for any integer x ∈[D], we may write Lf(x) = f(x).
C.2
Constructing continuous cyclic groups from R
In order to consider Fourier analysis over ZD in terms of discrete integrals, in which the measure N =
µ(ZD) may be a parameter which we do not assign a value in advance, it will be helpful to relate functions
f : Z →C with period D, to functions g : R →C with period N. We use this to consider a measure on
ZD in terms of a measure on a compact continuous group.
We deﬁne an additive group of real numbers modulo N, for any N > 1, consisting of equivalence
classes of real numbers which diﬀer by multiples of N:
z + NZ =

z + tN
 t ∈Z
	
,
(65)
equipped with addition (y+NZ) + (z +NZ) = (y+z) + NZ. Just as we may represent ZD by represen-
tative integers x ∈[D] = (−1
2D, 1
2D] ∩Z, we adopt the convention of representing RN by an interval
JN = (−1
2N, 1
2N] of representatives. We may then think of RN in terms of the interval JN, with ‘wrap-
around’ boundary conditions for addition and subtraction when the result of normal addition over R
yields a result which lies outside of JN. Note that we may regard RN as a topological group, and one
with a measure µN inherited from the real numbers, consisting of the restriction of the Lebesgue measure
to the interval JN: in particular, we have µN(RN) = N.
Finally, for a ﬁxed integer D > 1, note that we may deﬁne an injection jN : ZD →RN from the
additive group ZD to the group RN, by simply taking
jN
 x + DZ

=
N
D
 x + DZ

=
N
D x + NZ
(66)
for x ∈Z; we may abuse notation to describe this more concisely by writing jN(x) = N
D x for x ∈ZD.
C.3
Interpretation of measures on ZD in terms of measures on R
To consider a notion of measure for ZD in terms of a continuous group, we may consider the injection
jN : ZD →RN for some N > 0. This motivates considering how we may represent functions f : ZD →C
in terms of ‘complex valued discrete measures’ φ : RN →C, which we may integrate over RN to assign a
meaning to an integral of f over ZD.
22

We do this by considering the related concept of periodic functions on Z, and their representation
by periodic discrete measures on R. Following Section C.1, we may ‘lift’ any f : ZD →C to a periodic
function Lf : Z →C with period D. We may then represent Lf as a complex-valued discrete distribution,
with impulses at invervals of length ℓ= N/D, by acting on it with the transform Iℓ= IN/D as deﬁned in
Eqn. (58). Deﬁne the composite operator EN = IN/D L, so that
ENf(z) = ℓ
X
t∈Z
δtℓ(z) Lf(t) = N
D
X
t∈Z
δtN/D(z) Lf(t).
(67)
In particular, representing elements of ZD by x ∈[D], the values of f : ZD →C at each x is represented
by an impulse at N
D x ∈(−1
2N, 1
2N] = JN, and also at N
D (x + tD) = N
D x + tN for each integer t ∈Z.
Then ENf is a discrete distribution with period N, which can be characterised in terms of its behaviour
on the interval JN. In particular,
Z
JN
dz ENf(z) = N
D
Z
RN
dz
X
t∈Z
δtℓ(z) Lf(t) = N
D
X
t∈[D]
Lf(t) = N
D
X
t∈ZD
f(t) =
Z
x∈ZD
f(x) dµ(x) .
(68)
The fact that µ(ZD) = N then reﬂects the choice of the period N (or equivalently: the modulus N) for
the injection jN : ZD →RN, and that as a discretisation of the measure µN on RN (derived from the
Lebesgue measure), we have µ(ZD) = µN(RN) = N. In some sense, one may regard the injection jN
as describing a way that ZD represents a discretisation of the continuous group RN, by condensing the
usual measure of RN at a discrete set of points at intervals of N
D .
C.4
The connection between the Fourier transform and measures on ZD
The discussion of normalisation in Appendix B can be interpreted, as arising from how the Fourier
transform on R aﬀects the discrete measures ENf arising from functions f : ZD →C. In particular:
the Fourier transform will generally transform such distributions, to other distributions which may be
regarded as being deﬁned with respect to a diﬀerent measure. Consider the Fourier transform [
ENf:
[
ENf(y) =
Z
R
dz ENf(z) e−2πiyz :
(69)
substituting in the expression for bfN in Eqn. (67), we obtain
[
ENf(y) = N
D
Z
R
dz
X
t∈Z
δtN/D(z) Lf(t) e−2πiyz = N
D
X
t∈Z
Lf(t) e−2πiy(tN/D) .
(70)
Separating the summation index t ∈Z into representatives of ZD and shifts by an entire period, we may
then write
[
ENf(y) = N
D
X X
x∈[D],τ∈Z
Lf(x) e−2πiyN(x+τD)/D = N
D
X
x∈ZD
f(x) e−2πiyNx/D
 X
τ∈Z
e−2πiτyN

,
(71)
factorising away the dependence on τ in square brackets. By Eqn. (57), that bracketed expression is in
fact
1
N XN(y): rewriting this as a sum of impulses, we then have
[
ENf(y) = N
D
X
x∈ZD
f(x) e−2πiyNx/D
 1
N
X
k∈Z
δk/N(y)

=
1
D
X X
x∈ZD,k∈Z
δk/N(y) f(x) e−2πikx/D .
(72)
That is, [
ENf is itself a complex discrete measure, which is zero for any y which is not an integer multiple of
1
N . By construction, it repeats after every D impulses, and so has a period of D/N. Then [
ENf = ED/Ng
for a function g : ZD →C,
ED/Ng(y) =
1
N
X
k∈Z
δk/N(y) Lg(k),
(73)
which we can see holds for
g(k) = N
D
X
x∈ZD
f(x) e−2πikx/D = ˆf(k),
(74)
23

for ˆf as deﬁned by Eqn. (21), with the integral over ZD explicitly expanded as a sum using Eqn. (16)
and using the measure µ such that µ(ZD) = N.
This demonstrates that [
ENf = ED/N ˆf , subject to this representation of the Fourier transform over R.
However, ED/N ˆf is a complex-valued discrete measure which has period D/N, and where in particular
a representative interval would be JD/N. This suggests that ˆf should be interpreted in terms of the
group injection jD/N : ZD →RD/N , which would motivate a measure µ′ on ZD such that µ′(ZD) =
µD/N(RD/N) = D/N.
In summary: if we take f : (ZD, µ) →C as a function on the measure space (ZD, µ) with µ(ZD) = N,
we eﬀectively interpret f in terms of a measure on the topological space RN, which has a total measure
of N. The Fourier transform ˆf is then most appropriately regarded as a measure on the topological space
RD/N, which has a total measure of D/N, so that ˆf : (ZD, µ′) →C, where µ′(ZD) = D/N. If we wish
for µ = µ′, so that f and ˆf have the same domain when we consider ZD as a measure space, we must
take N =
√
D, in agreement with the results of Section 3.2.
24

D
Quadratic Gaussian integrals
In this Section, we consider how to evaluate the quadratic Gauss integrals described in Eqn. (30).
D.1
Preliminaries on quadratic Gaussian sums
The scalars in Eqn. (30) may be expressed in terms of quadratic Gaussian sums, which are sums of the
form
G(r, s, N) =
N−1
X
x=0
e2πi(rx2+sx)/N =
N−1
X
x=0
ωrx2+sx
N
(75)
where ωN = exp(2πi/N) is a primitive N th root of unity. Motivated by the analysis of Ref. [50], we
consider two separate cases: the case where N is odd, and the case where N is a multiple of 4. (The case
where N is even but not a multiple of 4 does not arise in our work, as we consider N = D for D odd,
and N = 2D for D even, where D > 1 is the dimension of a qudit.)
We deﬁne the Jacobi symbol
  k
m

for m and odd integer and k ∈Z, as follows. Let χp be the quadratic
character on Zp :
χp(k) =





0,
if p divides k;
+1,
if k ≡u2
(mod p) for some u ∈[p];
−1,
otherwise.
(76)
For m = pt1
1 pt2
2 · · · ptn
n an odd integer with pj distinct primes and t1 ∈N, we deﬁne the Jacobi symbol as
 h
m

= χp1(k)t1 χp2(k)t2 · · · χpn(k)tn ,
(77)
which is 0 is k and m have any common prime factors pj, and is ±1 otherwise. For odd integers r, we
also deﬁne
εm =
(
1,
if m ≡1
(mod 4)
i,
if m ≡3
(mod 4)
)
= i(m−1)2/4,
(78)
which satisﬁes ε2
m = χm(−1). Suppose that r and N have a common divisor other than 1. Let t =
gcd(r, N). It is possible to show that
G(r, s, N) =



t · G
r
t , s
t , N
t

,
if t is a divisor of s;
0,
otherwise.
(79)
We can then reduce the general case, to the special case where r and N have no common divisor t > 1,
and where r ⩾0. Suppose, then, that r and N have no common divisor t > 1, so that r has an inverse
u ∈[N] modulo N (i.e., ur ≡1 mod N), and N has an inverse q ∈[r] modulo r (i.e., qN ≡q mod r).
• If N is odd, let h ∈[D] be such that 2h ≡1 (mod N), and let ˜s = uhs so that 2r˜s ≡s (mod N).
We then have
G(r, s, N) =
N−1
X
x=0
ωr(x−˜s)2+s(x−˜s)
N
=
N−1
X
x=0
ωr(x2−2˜sx+˜s2)+sx−s˜s
N
=
N−1
X
x=0
ωrx2+ru2h2s2 −uhs2
N
= ωru2(h−h2)s2
N
· G(r, 0, N).
(80)
For N odd and r having no factors in common with N greater than 1,
G(r, 0, N) = εN
 r
N
√
N
(81)
where
  r
N

is the Jacobi symbol. Then we have
G(r, s, N)
=
ωru2(h−h2)s2
N
εN
 r
N
√
N
=
e2πiru2(h−h2)s2/N i(N−1)2/4  r
N
√
N
(82)
In particular, we have
G(r, s, N)
 =
√
N, and for s = 0 we have G(r, s, N) = ik√
N for some k ∈Z.
25

• Suppose that N is even (in which case r must be odd as it would not be divisible by 2) Let N = 2M
for some integer M. We may consider the alternative sum
˜G(r, s, M) =
M−1
X
x=0
eπi(rx2+sx)/M,
(83)
which we may relate to G(r, s, N) as follows:
G(r, s, 2M) =
M−1
X
x=0
e2πi(rx2+sx)/2M +
2M−1
X
x=M
e2πi(rx2+sx)/2M
=
M−1
X
x=0
h
eπi(rx2+sx)/M + eπi
 r(M 2+2Mx+x2)+s(M+x)

/Mi
=
M−1
X
x=0
h
eπi(rx2+sx)/M + eπi(Mr+s) eπi(rx2+sx)/Mi
=

1 + (−1)Mr+s
˜G(r, s, M) .
(84)
If M is odd and s is even, then we have (−1)Mr+s = −1, in which case G(r, s, N) = 0; similarly if
M is even and s is odd. Thus it suﬃces to consider the cases where M and s are either both even,
or both odd, so that Mr + s is even.
(a) If M, s are both odd, let g ∈Z be such that 2g = u(M −s), where recall u ≡r−1 (mod 2M).
G(r, s, 2M) =
2M−1
X
x=0
e2πi(rx2+sx)/2M =
2M−1
X
x=0
e2πi(r(x+g)2+s(x+g)/2M
=
2M−1
X
x=0
e2πi(rx2+2grx+rg2+sx+sg)/2M = eπi(rg2+sg)/M
2M−1
X
x=0
(−1)x eπirx2/M
= eπi(rg2+sg)/M
M−1
X
x=0

(−1)xeπirx2/M + (−1)x eπir(M+x)2/M
= eπi(rg2+sg)/M
M−1
X
x=0

(−1)xeπirx2/M −(−1)xeπirx2/M
= 0 .
(85)
Together with the fact that G(r, s, N) = 0 for M odd and s even, we have in fact G(r, s, N) = 0
if N = 2M for M ∈Z odd.
(b) If M, s are both even, let M ′, s′ ∈Z be such that M = 2M ′ and s = 2s′. Let ς = +1 if r > 0
and ς = −1 if r < 0. We may show that
˜G(r, s, M) =
M−1
X
x=0
eπi(rx2+sx)/M
=
p
|Mr−1| eπi
 |Mr|−s2
4Mr
|r|−1
X
k=0
e−πi(Mk2+sk)/r
=
p
|Mr−1| eςiπ/4 e−iπs2/4Mr
|r|−1
X
k=0
e−ς iπ(Mk2+sk)

|r|
=
p
|Mr−1| eςiπ/4 e−iπs2/4Mr ˜G(−ςM, −ςs, |r|),
(86)
by quadratic reciprocity. By Eqn. (84), we have
G
 −ςM, −ςs, |r|

=

1 + (−1)Mr+s
˜G
 −ςM, −ςs, |r|

= 2 ˜G
 −ςM, −ςs, |r|

= 2 ˜G
 ςM, ςs, |r|
∗.
(87)
Recall that r is odd, and has no common divisors t > 1 with N; it then follows that r has no
such common divisors with M either, and in particular, we have (4q)M ′ = qN ≡1 (mod r).
26

Let η ∈Z be such that η ≡2−1 (mod r): we then have
G(r, s, N) = 2 ˜G(r, s, M)
= 2
p
|Mr−1| eςiπ/4 e−iπs2/4Mr ˜G
 ςM, ςs, |r|
∗
=
q
1
2|Nr−1| eςiπ/4 e−πis2/2Nr G
 ς2M ′, ς2s′, 2|r|
∗
=
q
1
2|Nr−1| eςiπ/4 e−πis2/2Nr · 2 · G
 ςM ′, ςs′, |r|
∗
=
p
2|Nr−1| eςiπ/4 e−ςπis2
2N|r|

e2πiςM ′(4q)2(η2−η)s2/|r| i−(|r|−1)2/4 M ′
|r|
p
|r|

= eςiπ/4 e−ςπis2
2N|r| e−2πiςqs2/|r| i−(|r|−1)2/4  N
|r|

·
√
2N
= eiπς/4 e−πiςs2(1+4Nq)

N|r| i−(|r|−1)2/4  N
|r|

·
√
2N .
(88)
In particular, we have
G(r, s, N)
 =
√
2N, and for s = 0 we have G(r, s, N) =
√
i
k·
√
2N for
some odd integer k ∈Z.
In summary, if r and N have no common divisor t > 1, we have:
G(r, s, N) =





eiϕ(r,s,N)√
N,
if N is odd;
eiϕ(r,s,N)√
2N,
if N is a multiple of 4 and s is even,
0,
otherwise,
(89a)
where ϕ(r, s, N) ∈R is some phase angle satisfying
eiϕ(r,s,N) =













e2πiru2(h−h2)s2/N i(N−1)2/4  r
N

,
if N is odd
(for u ≡r−1 mod N
and h ≡2−1 mod N),
eiπς/4 e−πiςs2(1+4Nq)

N|r| i−(|r|−1)2/4  N
|r|

,
if N is even
(for q ≡N −1 mod r),
(89b)
where
  r
N

and
  N
r

are Jacobi symbols as described by Eqn. (77). In particular, note that if s = 0 then
eiϕ(r,s,N) is a power of eiπ/4, and in particular is equal to eiπ(N+1)k/4 for some integer k. Using Eqn. (79)
to generalise this to include the case where t = gcd(r, N) may be greater than 1, we then have
G(r, s, N) =









eiϕ
  r
t , s
t , N
t

·
√
tN,
if N/t is odd, and s is a multiple of t;
eiϕ
  r
t , s
t , N
t

·
√
2tN,
if N/t is a multiple of 4, and s is a multiple of 2t;
0,
otherwise,
(90)
using the fact that when G(r, s, N) is non-zero, we have
G(r, s, N)
 = t ·
G( r
t , s
t , N
t )
, which is equal to
t ·
p
N/t =
√
tN for N odd and equal to t ·
p
2N/t =
√
2tN for N even.
D.2
Application to quadratic Gaussian integrals
In our analysis, we consider two sorts of integrals, depending on the parity of the qudit dimension D. In
each case, we are interested in the integral
Γ(a, b, D) =
Z
x∈[D]
τ 2ax+bx2 = ν2 X
x∈[D]
τ 2ax+bx2 ,
where τ = eπi(D2+1)/D and ν = D−1/4.
(91)
For all integers D > 1, we have τ 2 = eπi(2D2+2)/D = e2πi+2πi/D = e2πi/D. However, for D odd, τ is itself
also a Dth root of unity (speciﬁcally: τ = ωh for h ≡2−1 mod D), whereas for D even we have τ = eπi/D,
which is a primitive 2Dth root of unity.
27

For D an odd integer.
In the case of D odd, we are interested in the quantity
Γ(a, b, D) =
Z
x∈[D]
τ 2ax+bx2 =
Z
x∈[D]
e2πih(2ax+bx2)/D.
(92)
Using the deﬁnition of the integral and the normalisation ν = D−1/4, we have
Γ(a, b, D) = ν2
D−1
X
x=0
e2πi(2ahx+bhx2)/D =
1
√
DG(bh, a, D).
(93)
If t = gcd(b, D), we may apply Eqn. (90) to obtain
Γ(a, b, D) =





√
Dt
√
D · eiϕ
  bh
t , a
t , D
t

=
√
t · eiϕ
  bh
t , a
t , D
t

,
if a is also a multiple of t;
0,
otherwise;
(94)
in particular, if t = 1, we have |Γ(a, b, D)| = 1.
For D an even integer.
In the case of D even, we are interested in the quantity
Γ(a, b, D) =
Z
x∈[D]
τ 2ax+bx2 =
Z
x∈[D]
eπi(2ax+bx2)/D.
(95)
Again using the deﬁnition of the integral and the normalisation ν = D−1/4, we have
Γ(a, b, D) = ν2
D−1
X
x=0
eπi(2ax+bx2)/D =
1
√
D ˜G(b, 2a, D) =
1
2
√
DG(b, 2a, 2D),
(96)
where ˜G(b, 2a, D) is as deﬁned in Eqn. (83). Note that as D is even, 2D is then a multiple of 4. Let
v = gcd(b, 2D): we may again apply Eqn. (90) to obtain
Γ(a, b, D) =





















√
4Dv
2
√
D · eiϕ
  b
v , 2a
v , 2D
v

= √v · eiϕ
  b
v , 2a
v , 2D
v

,
if 2D/v is a multiple of 4
and 2a is a multiple of 2v;
√
2Dv
2
√
D · eiϕ
  b
v , 2a
v , 2D
v

=
p
v/2 · eiϕ
  b
v , 2a
v , 2D
v

,
if 2D/v is odd and
2a is a multiple of v;
0 ,
otherwise.
(97)
Again, let t = gcd(b, D). Furthermore, let g, g′ be the largest integers such that 2g divides D,and 2g′
divides b. For q = min {g, g′}, this means that 2q is the largest power of 2 which divides t. Let t′ = t/2q,
and D′ = D/2gt′ and b′ = b/2g′t′: then all of t′, D′, and b′ are odd integers with no common divisors
greater than 1, and D = 2gt′D′ = 2g−qtD′ and b = 2g′t′b′ = 2g′−qtb′. Then
v = gcd(b, 2D) = gcd
 2g′t′b′, 2g+1t′D′
= 2 min {g+1,g′} · t′
(98)
We may then present the cases in Eqn. (97) as follows.
• If 2D/v = 2g+1−min{g+1,g′}D′ is a multiple of 4, then g + 1 −min{g+1, g′} > 1, from which we may
infer that g+1 −g′ > 1 and that g −g′ > 0. Then q = g′ and v = t; and we have D/t even and b/t
odd. Conversely, if D/t is even, this also implies that g −g′ > 0, and that 2D/v is a multiple of 4.
(Notice also that in this case, 2a is a multiple of 2v if and only if a is a multiple of t).
• If 2D/v = 2g+1−min{g+1,g′}D′ is odd, then g+1 ⩽g′. In this case we would have q = g < g′ and
v = 2q+1t′ = 2t; and we have D/t odd and b/t even. Conversely, if D/t is odd and b/t is even,
this implies that q = g < g′, which in turn implies that 2D/v is odd. (In this case as well, 2a is a
multiple of v if and only if a is a multiple of t.)
28

From these observations, in the case of D even, we obtain
Γ(a, b, D) =

















√
t · eiϕ
  b
t , 2a
t , 2D
t

,
if D is even, D/t is even, b/t is odd,
and a is a multiple of t;
√
t · eiϕ
  b
2t , a
t , D
t

,
if D is even, D/t is odd, b/t is even,
and a is a multiple of t;
0 ,
otherwise.
(99)
Summary.
From the equations above, if t = gcd(b, D), we have
Γ(a, b, D) =



















√
t · eiϕ
  b
t , 2a
t , 2D
t

, if D and D/t are even but b/t is odd, and a is a multiple of t;
√
t · eiϕ
  b
2t , a
t , D
t

, if D and b/t are even but D/t is odd and a is a multiple of t;
√
t · eiϕ
  bh
t , a
t , D
t

, if D is odd, h ≡2−1 (mod D), and a is a multiple of t;
0 , otherwise.
(100)
In each case, if we let t = gcd(b, D), we have
Γ(a, b, D)
 =
√
t if a is a multiple of t and the value of
(D + Db/t2) is even, and Γ(a, b, D) = 0 otherwise. In particular: for b a multiplicative unit modulo D
(so that t = 1), we have
Γ(a, b, D)
 = 1. If furthermore we have a = 0, we have Γ(a, b, D) = eπi(D+1)k/4
for some k ∈Z, from the formula for ϕ(b, a, D) given in Eqn. (89b).
29

E
Semantics for ZX and ZH diagrams, motivated by measures
In this appendix, we consider some of the constraints imposed on the measure µ and Ockhamic semantic
maps [[ · ]], which arise from introducing relationships between them and/or the Fourier transform.
E.1
Ockhamic semantics for ZX and ZH diagrams
We propose to investigate a way to more clearly express diﬀerent semantic maps, through the investigation
of diﬀerent measures on [D]. To do so, we follow Ref. [19], by setting out a family of semantic maps
[[ · ]] for ZX- and ZH-diagrams, which is ﬂexible enough to represent a range of possible semantics for the
generators without a proliferation of parameters for the dots and boxes. However, those deﬁnitions were
proposed to guide investigation into semantics for ZX- and ZH-diagrams on qubits, which is a special case
which enjoys several special properties which do not readily extend to the general case D > 1 in general,
and which therefore may have been overspecialised in some ways. Therefore, we propose the following
revision of the deﬁnitions of [19, pp. 31 & 34] for D > 1 in general.17
• A semantic map [[ · ]] of ZX diagrams in terms of operators H⊗m →H⊗n for arbitrary m, n ∈N, is
Ockhamic if it satisﬁes Eqn. (10), and if there exists a sequence (uk)k∈N of positive scalars such that
u2 = 1,18 and so that the following equations are satisﬁed for functions Θ : Z →C:
""
Θ
...
m

...

n
##
= um+n
X
x∈[D]
Θ(x) |x⟩⊗n⟨x|⊗m,
hh
+
ii
=
1
√
D
X X
x,k∈[D]
e2πikx/D |k⟩⟨x| ,
""
Θ
...
m

...

n
##
= um+n
X
k∈[D]
Θ(k) |ω−k⟩⊗n⟨ωk |⊗m,
hh
-
ii
=
1
√
D
X X
x,k∈[D]
e−2πikx/D |k⟩⟨x| .
(101)
We propose this deﬁnition in the interest of having a calculus in which the green dots and the red dots
being are related by the two kinds of Hadamard boxes, which in turn relate to the quantum Fourier
transform; but also retaining the ‘Only the Connectivity Matters’ [1, 13] property.19
• A semantic map [[ · ]] of ZH diagrams in terms of operators H⊗m →H⊗n for arbitrary m, n ∈N,
is Ockhamic if it satisﬁes Eqn. (10), and if there exist sequences (uk)k∈N, (hk)k∈N, and (gk)k∈N of
positive scalars such that u2 = 1,18 h0 = 1, and so that the following equations are satisﬁed for c ∈ZD
and for functions A : Z →C:
""
A
...
m

...

n
##
= hm+n
X X
x∈[D]m, y∈[D]n
A(x1··· xmy1··· yn)|y⟩⟨x|
hh
c
ii
=
X
x∈ZD
|−c−x⟩⟨x|
""
...
m

...

n
##
= gm+n
X X
x∈Zm
D, y∈Zn
D
P
h
xh+P
k
yk = 0
|y⟩⟨x|
""
...
m

...

n
##
= um+n
X
x∈[D]
|x⟩⊗n⟨x|⊗m .
(102)
We propose this deﬁnition in the interest of emphasising the theme of simple constraints on classical
indices (in the form of the white, gray, and generalised-not dots), having the generalised-not dots
represent simple permutations of the standard basis,20 having degree-0 H-boxes with parameter α ∈C
(taken as short-hand for a function t 7→αt) stand directly for scalar factors of α, and retaining
ﬂexsymmetry of the interpretation of the generators.
17One way in which these deﬁnitions revise those of Ref. [19, pp. 31 & 34] is in allowing an amplitude diﬀerent from 1,
for the |0⟩⊗n⟨0|⊗m component of green dots, for the |ω0⟩⊗n⟨ω0|⊗m component of red dots, and the components |y⟩⟨x|
of H-boxes for which none of the entries x1, . . . , xm, y1, . . . , yn are zero. Given the introduction of functions Z →C to
represent amplitudes, this seems to us a mild extension.
18The constraint u2 = 1 was not present in the original proposed deﬁnitions of ‘Ockhamic’ semantic maps for ZX or
ZH diagrams in Ref. [19, pp. 31 & 34]. We propose this revised deﬁnition so that red and green phase-free 1 →1 dots, and
the white and gray 1 →1 dots, would all represent unitary transformations. This constraint is satisﬁed in practise for all
existing Ockhamic semantic maps for ZX and ZH diagrams.
19It may prove to be preferable, after all, to retain the notational convention seen in most existing presentations of ZX-
based calculi [8, 12, 23, 41] of having red dots be related to green dots via conjugation by the Fourier transform. One might
describe such an interpretation as a ‘conjugate-Ockhamic’ interpretation (or, elect to redeﬁne ‘Ockhamicity’ to favour the
interpretation in which this conjugation relation holds).
20Our attitude is ﬂexible as to whether c-not-dots should denote the transformation |x⟩7→|−c−x⟩as we deﬁne it here,
or instead |x⟩7→|c−x⟩. These two conventions lead to slightly diﬀerent rewrite systems, either of which may be considered
favourable depending on other conventions one might adopt to simplify notation.
We would in fact prefer the latter
convention of representing |x⟩7→|c−x⟩, were it not for the impact on the relationship with ZX red dots, the ZX stabiliser
phase notation, and the notation for the Pauli operators. A clever notational convention might possibly resolve these issues.
30

As in Ref. [19], these two conditions of ‘Ockhamicity’ (for ZX- and for ZH-diagrams) are proposed as
an interpretation of the design principles and features of the ZX- and ZH-calculi [1, 30], but does not
necessarily represent some unifying property of these two diﬀerent families of diagrams.21
Below, we consider how the constraint of using an Ockhamic semantic map for ZX and ZH diagrams,
interacts with the constraint of imposing a simple semantics for these diagrams via discrete integrals.
Speciﬁcally, we determine what constraints are imposed on the parameter ν governing the measure µ,
and on the scalar factors in Eqns. (101) and (102), by considering Ockhamic semantic maps on the ZX and
ZH generators for which Eqn. (6) holds.
E.2
Ockhamic semantics for ZH diagrams
We ﬁrst consider the constraints imposed on an Ockhamic semantic map of ZH diagrams, by requiring
Eqns. (6) to hold. (These will in fact be less restrictive in a sense than the comparable constraints for
semantics of ZX diagrams, owing to the explicit role in Eqn. (101) for the quantum Fourier transform.)
We proceed directly by considering how the expressions in Eqn. (102) may be expressed as integrals
with respect to the measure µ, and then considering the consequences of requiring Eqns. (6) to hold.
Note in particular how, for a multi-coeﬃcient vector x ∈[D]m, we have |x⟩= |x1⟩⊗|x2⟩⊗· · · ⊗|xm⟩=
νm|x1⟩⟩⊗|x2⟩⟩⊗· · · ⊗|xm⟩⟩= νm|x⟩⟩. Similarly, for every sum over x ∈[D]m that we turn into an integral,
we introduce a factor of ν−2m (one factor of ν−2 for each coeﬃcient xj ∈[D]). We then have:
hh
c
ii
=
X
x∈ZD
|−c−x⟩⟨x| = ν2 X
x∈ZD
|−c−x⟩⟩⟨⟨x| =
Z
x∈ZD
|−c−x⟩⟩⟨⟨x| ,
(103a)
""
...
m

...

n
##
= um+n
X
x∈[D]
|x⟩⊗n⟨x|⊗m
= um+n · νm+n X
x∈[D]
|x⟩⟩⊗n⟨⟨x|⊗m = um+n · νm+n−2
Z
x∈[D]
|x⟩⟩⊗n⟨⟨x|⊗m ,
(103b)
""
A
...
m

...

n
##
= hm+n · νm+n X X
x∈[D]m,y∈[D]n
A(x1··· xmy1··· yn) |y⟩⟩⟨⟨x|
= hm+n· ν−(m+n)
ZZ
x∈[D]m,y∈[D]n
A(x1··· xmy1··· yn) |y⟩⟩⟨⟨x| ,
(103c)
""
...
m

...

n
##
= gm+n
X X
x∈Zm
D, y∈Zn
D
P
h
xh+P
k
yk = 0
|y⟩⟨x| = gm+n
X X
x∈Zm
D, y∈Zn
D

 P
h
xh + P
k
yk |0⟩|y⟩⟨x|
= gm+n · νm+n+2 X X
x∈Zm
D, y∈Zn
D


 P
h
xh + P
k
yk
|0

|y⟩⟩⟨⟨x|
= gm+n · ν−m−n+2
ZZ
x∈Zm
D, y∈Zn
D
|y⟩⟩⟨⟨x|


 P
h
xh + P
k
yk
|0

.
(103d)
In particular, the imposed semantics for the generalised-not dot are automatically satisﬁed by the deﬁni-
tion of the point-mass vectors |x⟩⟩; requiring the leading scalar on the last line of Eqn. (103b) to be equal
to 1, imposes the constraint uk = ν−k+2 (which in particular is consistent with u2 = 1); requiring the
leasing scalar on the last line of Eqn. (103c) to be 1, imposes the constraint hk = νk (which in particular
is consistent with h0 = 1); and requiring the leading scalar of Eqn. (103d) to be equal to 1, imposes the
constraint gk = νk−2.
Note that none of the above imposes constraints on ν itself, essentially because the only unitarity
constraints happen to involve a single integral over [D] (as with the generalised-not dot or the 1 →1
21Indeed, if one identiﬁes an H-box with degree 2 and amplitude parameter ω = e2πi/D ∈C in the ZH calculus, with the
Hadamard plus box of ZX diagrams, this imposes signiﬁcant constraints on the parameters h2, gk, and uk.
31

white dot), so that all factors of ν cancel in those cases. Thus, the approach of deﬁning semantics for
ZH generators in terms of integrals as in Eqn. (6) is in itself suﬃcient to ensure the Ockhamicity of the
interpretation, regardless of the normalising factor ν is used to deﬁne the measure µ.
We note in particular that in the case D = 2, the original semantics for ZH diagrams presented by
Backens and Kissinger [30] satisﬁes these constraints for ν = 1. For arbitrary D > 1, such a choice yields
a measure for which µ({∗}) = 1 and µ([D]) = D. While the rewrite systems that one obtains for this
measure are likely to involve more frequent changes to the scalar factors through scalar gadgets, this does
seem (both intuitively and in practise [33, 40]) an appropriate choice to denote and analyse problems in
counting complexity.
E.3
Ockhamic semantics for ZX diagrams
By considering Ockhamic semantics for ZX generators, we necessarily consider an interpretation of the
(inverse) discrete Fourier transform which is unitary.
If we impose the constraint that the inverse Fourier transform as expressed in Eqn. (26) should be
equal to the quantum Fourier transform, this is equivalent to imposing unitarity on a Fourier transform as
expressed in Eqn. (25) that preserves the measure. From this, we would obtain the constraint ν = D−1/4,
as described in Section 3.2. We can also see this by directly considering the consequences of imposing
this constraint on the meaning of integration over [D]:
1
√
D
X X
x,k∈[D]
e2πikx/D |k⟩⟨x| =
hh
+
ii
:=
ZZ
k,x∈[D]
e2πikx/D |k⟩⟩⟨⟨x| = ν2 X X
k,x∈[D]
e2πikx/D |k⟩⟨x| ,
(104)
so that ν = D−1/4, and in particular µ([D]) = N = Dν2 =
√
D. In this way, unlike the case with
Ockhamic semantic map of ZH generators as we considered in Section E.2, relating Ockhamic semantics
of ZX generators to simple integrals necessarily constrains µ.
Following Section E.2, to obtain a simple representation of the semantics for green and red dots in an
Ockhamic semantic map, we might impose the following constraints:
""
...
m

...

n
##
=
Z
x∈[D]
|x⟩⟩⊗n⟨⟨x|⊗m ,
""
...
m

...

n
##
=
Z
k∈[D]
|ω−k⟩⟩⊗n⟨⟨ωk|⊗m .
(105)
As with the white dots in Ockhamic semantic maps of the ZH calculus (which is identical to the analysis
of green dots with phase function ˜θ(x) = 1), we would then obtain the constraint uk = ν−k+2.
32

F
Sound diagrammatic rewrites
Having considered semantic maps for ZX- and ZH-diagrams as above, we now brieﬂy survey what rewrites
we may show to be sound for these semantics.
We make no attempt to achieve complete calculi for these semantics: we expect that doing so will
be somewhat involved, though perhaps they can be informed by recent work [41] on a complete ZXW-
calculus in arbitrary dimensions D > 1. We also do not aim to achieve a minimal set of rewrite rules,
though we will in some instances point out when some rules may be derived from some others. Our
objective is to demonstrate the soundness of scalar-exact versions of familiar rewrite rules, motivated by
rules from complete versions of the ZX- and ZH-calculi [19, 34] in the special case D = 2, by ZX rewrite
rules presented for odd D > 1 presented by Booth and Carette [27], and by ZH-rewrite rules for D > 1
presented by Roy [35]. We aim also to describe versions of these rules, which are both simple and versatile
enough that their usefulness may be plausible despite the absence of a completeness proof.
F.1
A note on conventions in analysis of discrete integrals over [D]
Our approach is concrete, consisting of the direct manipulation of discrete integrals. We hope to demon-
strate that, in the large majority of cases, this is not diﬃcult to do. In the following, we will model what
we consider to be a reasonable approach to using discrete integrals in practise.
We have at times emphasised the role of the measure in our integrals. This has been partly because the
measure itself, and the possible use of more than one measure, have been subjects of interest. However,
in this section we consider only one form of integration (over [D]m for various m > 0) with respect to
only one measure (the measure µ(S) = #S · ν2, and induced measures on [D]m). Therefore, we do not
need to explicitly write dµ(x) or dµ(y) when integrating over x, y ∈[D], nor dµm(x) when integrating
over x ∈[D]m, and so forth. This is consistent with occasional practise in the mathematics literature
(see, e.g., Ref. [29]). One may regard the integral symbol itself as an operator on a given expression, with
the measure understood from context (e.g., the variable of integration).
Note also that, in order to shorten our calculations, we occasionally omit expressions
R
y∈[D] ⟨⟨x|y⟩⟩Φ(y)
that might arise due to x and y being indices for two diﬀerent nodes, corresponding to an edge incident
to both: we may implicitly simplify such integrals to Φ(x) .
Similarly, we may simplify expressions
RR
x∈[D]m,y∈[D]⟨⟨f(x1, . . . , xm)|y⟩⟩Φ(y) −→
R
x∈[D]m Φ(f(x1, . . . , xm)). On occasion, when we wish to em-
phasise the role of x1, x2, . . . ∈[D] as representatives of the integers modulo D, we may write these same
integrals as
R
x∈Zm
D Φ(f(x1, . . . , xm)) rather than
R
x∈[D]m Φ(f(x1, . . . , xm)); however, we do so only when
Φ is well-deﬁned modulo D in each of its arguments. (We routinely interpret arithmetic expressions E
modulo D, when they are used to indicate point-mass functions |E⟩⟩; though E ∈Z may not represent
an element of [D] outside of that context.) We also make liberal use of Lemma 1, which (except where
we assume ν = D−1/4) will give rise to frequent occurrences of the scalar expression Dν4.
F.2
Sound ZH rewrites
We ﬁrst consider rewrites for the ZH generators, which are sound for a semantic map as consdered in
Section E.2, without yet committing to a value of ν. This provides us with multiple versions of the
ZH calculus, parameterised by ν as well as by D, which may be suitable for diﬀerent purposes. For
instance, following our observation at the end of Section E.2, it is likely that a measure in which ν = 1
(corresponding to the original presentation of Backens and Kissinger [30] in the special case D = 2) may
be most appropriate to analyse counting problems; whereas for the analysis of unitary transformations
and interoperation with the ZX calculus, our analysis suggests that ν = D−1/4 would be more suitable
(as well as giving rise to simpler rewrites overall).
In the following, we make frequent use of the ‘multicharacter’ notation for H-boxes, in which an H-
box inscribed with c ∈Z denotes that the amplitude ωc is intended. Note that this is diﬀerent from the
original annotation convention set out for the ZH calculus in Ref. [30] and related works such as Ref. [33],
in which amplitudes α ∈C are written in the box. (In particular, in our work, an H-box with 0 ∈Z
inscribed indicates the constant amplitude function A(t) = ω0·t = 1t = 1, rather than A(t) = 0t, which
is not a function on [D] for D > 2.) As A(t) = ωt is well-deﬁned modulo D, we may abuse notation
slightly and parameterise such ‘multicharacter’ boxes by c ∈ZD, or conversely interpret c ∈Z as though
it were an element of ZD. In particular, for u ∈Z×
D, we will make frequent use of the generator
u
which denotes the operator
R
x,y ωuxy |y⟩⟩⟨⟨x|. We also occasionally make use of the short-hand
+
and
-
for u = ±1 in particular.
33

(ZH-WF):
White dot fusion.




...
k
n
...
o
m
...
o
n
...
ℓ
n




=
""
...
k+ℓ

...

m+n
##
Proof.
ZZ
x,y∈[D]

1⊗n ⊗|y⟩⟩⊗n⟨⟨y|⊗ℓ+1
|x⟩⟩⊗m+1⟨⟨x|⊗k ⊗1⊗m
=
ZZ
x,y∈[D]
|x⟩⟩⊗m⟨⟨x|⊗k ⊗⟨⟨y|x⟩⟩⊗|y⟩⟩⊗n⟨⟨y|⊗ℓ
=
Z
x∈[D]
|x⟩⟩⊗m⟨⟨x|⊗k ⊗|x⟩⟩⊗n⟨⟨x|⊗ℓ
=
Z
x∈[D]
|x⟩⟩⊗m+n⟨⟨x|⊗k+ℓ.
(ZH-WQS):
White quasi-special fusion.
""
ν2
##
=
hh
θ
ii
Proof.
ν2
ZZ
x,y∈[D]
|y⟩⟩⟨⟨y, y|x, x⟩⟩⟨⟨x| = ν2
ZZ
x,y∈[D]
|y⟩⟩

⟨⟨y|x⟩⟩⊗⟨⟨y|x⟩⟩

⟨⟨x|
=
Z
x∈[D]
ν2 ⟨⟨x|x⟩⟩|x⟩⟩⟨⟨x| =
Z
x∈[D]
|x⟩⟩⟨⟨x| .
This result essentially follows from the presence of a redundant factor of ⟨⟨y|x⟩⟩in the integral, which
does not further constrain the variables of integration but does contribute a factor of ⟨⟨x|x⟩⟩= ν−2.
(ZH-WGB):
White-gray bialgebra.
""
...
...
...
...
##
=

...
...

Proof.
ZZ
x∈[D]m
z∈[D]n
 n
O
j=1


zj +
m
P
h=1
xh |
0

!
|z⟩⟩⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]n
 n
Y
j=2
⟨zj|z1⟩
!


z1 +
m
P
h=1
xh |
0

 n
O
j=1
|zj⟩⟩
!
⟨⟨x|
=
ZZ
x∈[D]m
z1∈[D]


z1 +
m
P
h=1
xh |
0

 n
O
j=1
|z1⟩⟩
!
⟨⟨x|
=
ZZZ
x∈[D]m
y,z∈[D]
⟨⟨z|y⟩⟩


y +
m
P
h=1
xh |
0

|z⟩⟩⊗n⟨⟨x|
=
"
Z
y∈[D]
|z⟩⟩⊗n⟨⟨z|
#"
Z
x∈[D]m
y∈[D]


y +
m
P
h=1
xh |
0

|y⟩⟩⟨⟨x|
#
.
(ZH-WNS):
Not-dot symmetry.




c
c
...
c
c
...




=

...
...

Proof.
ZZZ
x∈Zm
D
y∈Zn
D
z∈ZD
" n
O
j=1
|−c−yj⟩⟩⟨⟨yj|
#"
|z⟩⟩⊗n⟨⟨z|⊗m
#" m
O
h=1
|xh⟩⟩⟨⟨−c−xh|
#
=
Z
z∈ZD
" n
O
j=1
|−c−z⟩⟩
#" m
O
h=1
⟨⟨−c−z|
#
=
Z
z∈ZD
|z⟩⟩⟨⟨z| .
N.B. We expect this rewrite can be derived from the others: the special
case of c = 0 is not diﬃcult to show using (ZH-WGB) and (ZH-NA).
34

(ZH-WGC):
White-gray colour change.
""
u
u
...
u
u
...
##
=



...
...
Dν4




Proof.
ZZZ
x∈[D]m
y∈[D]
z∈[D]n
 m
O
j=1
ωuxj y
! n
O
k=1
ωuyzk
!
|z⟩⟩⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]n
 
Z
yj∈[D]
ωuy
 P
j
xj+P
k
zk
!
|z⟩⟩⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]n
Dν4 

 P
j
xj + P
k
zk
|0

|z⟩⟩⟨⟨x| .
Corollary (“Double-H”):
u
u
←→
u
u
←→
Dν4
Corollary (ZH-GWC): Gray-white colour change — Using the white-gray colour change rules, the
double-H rule, and the ‘antipode symmetry’ rule, we may show:
u
u
...
m

u
u
...

n
↔
u
u
u
u
...
m

u
u
u
u
...

n
(Dν4)−1
↔
...
m

...

n
(Dν4)m+n−1
↔
...
m

...

n
(Dν4)m+n−1
Corollary (ZH-GL): Gray lollipop.
...
...
←→
+
+
...
+
+
...
+
(Dν4)−1
←→
+
+
...
+
+
...
(Dν4)−1
←→
+
+
...
+
+
...
(Dν4)−1
←→
...
...
Corollary (ZH-GF): Gray dot fusion.
...
k
n
...
o
m
...
o
n
...
ℓ
n
←→
+
+...
k

+
+
...

m
+
+...

n
+
+
...
ℓ

+
+
(Dν4)−2
←→
+
+...
k

+
+
...

m
+
+...

n
+
+
...
ℓ

(Dν4)−1
←→
+
+
...
k+ℓ

+
+
...

m+n
(Dν4)−1
←→
...
k+ℓ

...

m+n
Corollary (ZH-A): Antipode rule.
↔
↔
↔
↔
↔
35

(ZH-MF):
Multicharacter fusion.




c1
...
...
c2 ...
...
−u




=




u–1c1c2
...
...
Dν4




We use the notation Π(x), in
eﬀect representing a function
Π : Zm
D →ZD which we deﬁne
by Π(x) = x1x2 · · · xm. As a
mild abuse of notation, we al-
low Π to act on arguments of
various sizes, e.g., x ∈Zm
D and
y ∈Zn
D.
Proof.
ZZZZZZ
r∈Zk
D, s∈Zℓ
D
x∈Zm
D, y∈Zn
D
t,z∈ZD
ωc1Π(r)t Π(x) ω−utz ωc2Π(s)z Π(y) |x, y⟩⟩⟨⟨r, s|
=
ZZZZZ
r∈Zk
D, s∈Zℓ
D
x∈Zm
D, y∈Zn
D
t∈ZD
ωc1Π(r)t Π(x)
 
Z
z∈ZD
ωz
 −ut+v2Π(s) Π(y)
!
|x, y⟩⟩⟨⟨r, s|
=
ZZZZZ
r∈Zk
D, s∈Zℓ
D
x∈Zm
D, y∈Zn
D
t∈ZD
Dν4 ·


−ut + c2Π(s) Π(y)
|0

· ωc1Π(r)t Π(x) |x, y⟩⟩⟨⟨r, s|
= Dν4
ZZZZ
r∈Zk
D, s∈Zℓ
D
x∈Zm
D, y∈Zn
D
ωu−1c1c2·Π(r) Π(s) Π(x) Π(y) |x, y⟩⟩⟨⟨r, s| .
Corollary (“Multicharacter negation”):
c
...
←→
c
...
+
+
(Dν4)−1
←→
−c
...
This corollary is also in principle a special case of the “mixed bialgebra rule” (ZH-HMB). We note it here
as a frequently-used special case involving the relationship between multicharacters and the degree-2 gray
dot, which may be construed as actions on single qudits.
(ZH-EC):
Exponent complement.
""
α
...
¬
##
=




α−1
ασ
...




Proof.
ZZZ
x∈[D]m
y,z∈[D]
αΠ(x)y |¬z⟩⟩⟨⟨z|y⟩⟩⟨⟨x| =
ZZZ
x∈[D]m
y,z∈[D]
αΠ(x)y |z⟩⟩⟨⟨¬z|y⟩⟩⟨⟨x|
=
ZZZ
x∈[D]m
y,z∈[D]
αΠ(x)y |z⟩⟩⟨⟨σ−z|y⟩⟩⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]
αΠ(x)(σ−z) |z⟩⟩⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]
 ασ Π(x) ·
 α−1 Π(x)z |z⟩⟩⟨⟨x| .
(ZH-HU): H-box unit.
hh
0
ii
=
hh
ii
Proof.
Z
x∈[D]
ω0·x |x⟩⟩=
Z
x∈[D]
|x⟩⟩.
(ZH-HM):
H-box multiplication.

B
A

=
hh
A·B
ii
Proof.
ZZZ
x,y,z∈[D]
A(x) B(y) |z⟩⟩⟨⟨z, z|x, y⟩⟩
=
Z
z∈[D]
A(z)B(z) |z⟩⟩=
Z
z∈[D]

A · B

(z) |z⟩⟩.
36

Corollary (ZH-MCA): Multicharacter addition.
b
a
←→
a+b
(ZH-NH):
Generalised-not dots:

u
u
c

=
""
u–1c
Dν4
##
Proof.
ZZZ
x,y,z∈[D]
ωuxyωcyωuyz|z⟩⟩⟨⟨x|
=
ZZ
x,z∈[D]
 
Z
y∈[D]
ωuy(z + x + u−1c)
!
|z⟩⟩⟨⟨x|
=
ZZ
x,z∈[D]
Dν4 

z|
−u−1c −x

|z⟩⟩⟨⟨x|
= Dν4
Z
x∈[D]
−u−1c −x

⟨⟨x|.
Corollary (ZH-NA): Not-antipode.
0
←→
+
+
0
(Dν4)−1
←→
+
+
(Dν4)−1
←→
+
+
(Dν4)−1
←→
Corollary (ZH-ND): Not-displacement.
c1
c2
←→
+
+
+
+
c1
c2
(Dν4)−2
←→
+
+
c1
c2
(Dν4)−1
←→
+
+
c1
c2
(Dν4)−1
←→
+
+
−c1
c2
(Dν4)−1
←→
+
+
+
+
c2 −c1
(Dν4)−2
←→
c2−c1
←→
c2−c1
0
(ZH-WI), (ZH-AI),
(ZH-HI), etc. —
Identity rules:


=


=
hh
c
c
ii
=




u
−u
(Dν4)−1



=




u
u
u
u
(Dν4)−2



=

θ

Proof.
The white-dot identity is trivial: its semantics is the resolution of the identity, Eqn. (20). The
generalised not-dot identity rule can be proven from (ZH-NS):
c
c
←→
c
c
←→
←→
(106)
The gray-dot identity may be derived using this and (ZH-NA):
←→
0
0
←→
(107)
Finally, the two H-box identity rules can be proven using (ZH-MF) for c1 = c2 = 1, the ‘double-H-box’
rule, and the newly demonstrated gray-dot identity rule (simplifying scalar boxes immediately):
u
−u
(Dν4)−1
←→
u
u
u
u
(Dν4)−2
←→
←→
(108)
37

(ZH-HWB):
H-box & white-dot bialgebra.




−u
−u
u
u
...
m



...
...
...


n




=




v
−v
...
m
(
...
)
n
(Dν4)n−1




We use the notation Π(x), in
eﬀect representing a function
Π : Zm
D →ZD which we deﬁne
by Π(x) = x1x2 · · · xm. As a
mild abuse of notation, we al-
low Π to act on arguments of
various sizes, e.g., x ∈Zm
D and
y ∈Zn
D.
Proof.
ZZZ
x∈[D]m
y,z∈[D]n
 n
O
j=1
ω−uyjzjωuΠ(x) yj
!
|z⟩⟩⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]n
 n
Y
j=1
Z
yj∈[D]
ωuyj
 Π(x)−zj
!  n
O
j=1
|zj⟩⟩
!
⟨⟨x|
=
ZZ
x∈[D]m
z∈[D]n
 n
Y
j=1
Dν4

zj|
Π(x)

!  n
O
j=1
|zj⟩⟩
!
⟨⟨x|
= (Dν4)n−1
ZZ
x∈[D]m
z1∈[D]
Dν4

z1|
Π(x)

 n
O
j=1
|z1⟩⟩
!
⟨⟨x|
= (Dν4)n−1
ZZ
x∈[D]m
z∈[D]
 
Z
y∈[D]
ωvy
 Π(x)−z
!
|z⟩⟩⊗n⟨⟨x|
= (Dν4)n−1
"
Z
z∈[D]
|z⟩⟩⊗n⟨⟨z|
#"
ZZ
x∈[D]m
w,y∈[D]
ω−vyw ωvy Π(x) |w⟩⟩⟨⟨x|
#
.
Corollary (ZH-HMB): H-box mixed bialgebra — the rule described as ‘BA2’ in Refs. [30, 34] can be
generalised to D > 1 (in a way equivalent to but diﬀerent from that presented by Roy [35]), using the
above bialgebra rule in combination with (ZH-HI), (ZH-MF), and (ZH-WGC):
u
u
...
m
(
...
...
...
)
n
→
u
u
−u
u
−u
u
...
m
(
...
...
...
)
n
(Dν4)−n
→
u
−u
...
m
(
u
u
...
)
n
(Dν4)−1
→
u
u
u
u
...
m
(
u
u
...
)
n
(Dν4)−2
→
−u
...
m
(
...
)
n
(ZH-ME):
White-gray multiplication.




...


k
Dν4




=




uk
−u




Proof. Dν4
ZZZ
x,z∈[D]
y∈[D]k+1
|z⟩⟩⟨⟨z + yk+1|0⟩⟩


 P
h
yh
|0

 k
O
j=1
⟨⟨yj|x⟩⟩
!
⟨⟨x|
=
ZZ
x,z∈[D]
|z⟩⟩

Dν4 ⟨⟨kx −z|0⟩⟩

⟨⟨x|
=
ZZ
x,z∈[D]
|z⟩⟩
 
Z
t∈[D]
ωut(kx−z)
!
⟨⟨x|
=
ZZZZ
x,s,t,z∈[D]

ω−usz |z⟩⟩⟨⟨s|

ωuktx |t⟩⟩⟨⟨x|

.
38

Corollary (ZH-MEH): Multiedge Hopf Law — We may prove the following using the rules (ZH-AI),
(ZH-ME), (ZH-MF), (ZH-HU), (ZH-WGC), (ZH-GL), and (ZH-HMB):
...


D
Dν4
↔
...


D
Dν4
↔
D
-
←→
0
-
+
+
(Dν4)−1
↔
+
+
0
+
(Dν4)−1
↔
-
+
+
(Dν4)−1
↔
-
+
(Dν4)−1
↔
+
(Dν4)−1
↔
“Zero product Lemma”.




...
...
+
0
-
+
1
-
+
2
-
+
D−1
-




=




...
...
+
0
-
+
1
-
+
2
-
+
D−1
-
ν2




Following Roy [35, p. 36], this
Lemma represents the fact that
for x, a0, a1, a2, . . . ∈ZD such
that a0(0 −x) = a1(1 −x) =
a2(2 −x) = · · · , then in par-
ticular aj(j−x) = 0 for j =x,
so that in fact ak(k−x) = 0
for all k ∈ZD.
In the seventh line of the proof,
we introduce a redundant fac-
tor of ⟨⟨0|zx⟩⟩. This allows us
to re-incorporate the terms in
the ﬁrst set of parentheses into
the product over j ∈ZD. As
⟨⟨0|zx⟩⟩introduces a factor of
1
ν2 , we must multiply by ν2
to avoid changing the overall
normalisation.
This is what
introduces the factor of ν2 in
this rewrite.
Proof.
ZZZZZ
a,y,z∈ZD
D
u,x∈ZD
 D
O
j=1
ωajyj(j−x) ω−yjzj⟨⟨u|zj⟩⟩
!
|x⟩⟩⟨⟨a|
=
ZZZZ
a,z∈ZD
D
u,x∈ZD
Y
j∈ZD
 
Z
yj∈ZD
ωyj
 aj(j−x) −zj

⟨⟨u|zj⟩⟩
!
|x⟩⟩⟨⟨a|
=
ZZZZ
a,z∈ZD
D
u,x∈ZD
 Y
j∈ZD
Dν4 ⟨⟨zj|aj(j −x)⟩⟩⟨⟨u|zj⟩⟩
!
|x⟩⟩⟨⟨a|
=
ZZZZ
a,z∈ZD
D
u,x∈ZD
 
Dν4 ⟨⟨zx|aj · 0⟩⟩⟨⟨u|zx⟩⟩
!
×
 Y
j∈ZD
j̸=x
Dν4 ⟨⟨zj|aj(j −x)⟩⟩⟨⟨u|zj⟩⟩
!
|x⟩⟩⟨⟨a|
=
ZZZZ
a,z∈ZD
D
u,x∈ZD
 
Dν4 ⟨⟨zx|aj · 0⟩⟩⟨⟨u|0⟩⟩
!
×
 Y
j∈ZD
j̸=x
Dν4 ⟨⟨zj|aj(j −x)⟩⟩⟨⟨u|zj⟩⟩
!
|x⟩⟩⟨⟨a|
=
ZZZ
a,z∈ZD
D
x∈ZD
 
Dν4 ⟨⟨zx|aj · 0⟩⟩
!
×
 Y
j∈ZD
j̸=−x
Dν4 ⟨⟨zj|aj(j −x)⟩⟩⟨⟨0|zj⟩⟩
!
|x⟩⟩⟨⟨a|
=
ZZZ
a,z∈ZD
D
x∈ZD
ν2
 
Dν4 ⟨⟨zx|aj · 0⟩⟩· ⟨⟨0|zx⟩⟩
!
×
 Y
j∈ZD
j̸=x
Dν4 ⟨⟨zj|aj(j −x)⟩⟩⟨⟨0|zj⟩⟩
!
|x⟩⟩⟨⟨a|
= ν2
ZZZ
a,z∈ZD
D
x∈ZD
 Y
j∈ZD
Dν4 ⟨⟨zj|aj(j −x)⟩⟩⟨⟨0|zj⟩⟩
!
|x⟩⟩⟨⟨a|
39

· · · = ν2
ZZZZ
a,z∈ZD
D
u,x∈ZD
Y
j∈ZD
 
Z
yj∈ZD
ωyj
 aj(j−x) −zj

⟨⟨0|zj⟩⟩
!
|x⟩⟩⟨⟨a|
= ν2
ZZZZZ
a,y,z∈ZD
D
u,x∈ZD
 D
O
j=1
ωajyj(j−x) ω−yjzj⟨⟨0|zj⟩⟩
!
|x⟩⟩⟨⟨a| .
Corollary (ZH-O): ‘Ortho’ — Using the above equality, together with (ZH-WGC) and the the colour
change rule and the “multicharacter negation” rule, we may obtain:
...
...
+
0
+
1
+
2
+
D−1
Dν2
↔
...
...
+
0
-
+
1
-
+
2
-
+
D−1
-
ν−2
↔
...
...
+
0
-
+
1
-
+
2
-
+
D−1
-
↔
...
...
+
0
+
1
+
2
+
D−1
(ZH-UM):
Unit multiplication.




+
-
+
-




=
""
+
-
Dν4
##
On the third-to-last line of the
proof, we use the fact that the
expression is non-zero only for
components in which r ∈ZD,
two times. First, we use the
fact that only the term where
s = r−1 contributes to the in-
tegral in that case. Then, we
perform the substitution u =
ry, so that sy = u. The par-
ticular value of s then does not
play a role in the integrated
expression, so that we may sim-
ply eliminate s as a variable of
integration.
Proof.
ZZZZZZ
r,s,t,x,y,z∈ZD
ωrst ω−t ωxyz ω−z ⟨⟨r, x|
=
ZZZZ
r,s,x,y∈ZD
 
Z
z∈ZD
ωt(rs−1)
! 
Z
z∈ZD
ωz(xy−1)
!
⟨⟨r, x|
=
ZZZZ
r,s,x,y∈ZD

Dν4 ⟨⟨rs|1⟩⟩

Dν4 ⟨⟨xy|1⟩⟩

⟨⟨r, x|
= (Dν4)2
ZZZZ
r,s,x,y∈ZD
⟨⟨rs|1⟩⟩⟨⟨rs · xy|1⟩⟩⟨⟨r, x|
= (Dν4)2
ZZZZ
r,s,x,y∈ZD
⟨⟨rs|1⟩⟩⟨⟨rx · sy|1⟩⟩⟨⟨r, x|
= Dν4
ZZZ
r,x,u∈ZD

Dν4⟨⟨rx · u|1⟩⟩

⟨⟨r, x|
= Dν4
ZZZ
r,x,u∈ZD
 
Z
z∈ZD
ωz(rxu−1)
!
⟨⟨r, x|
= Dν4
ZZZZ
r,x,u,z∈ZD
ωrxu ω−z ⟨⟨r, x| .
This rule corresponds to Ref. [34, Lemma 2.28], which in eﬀect relies on the fact that for x, y ∈{0, 1} ,
xy = 1 if and only if x = y = 1. While this observation does not hold in ZD for any D > 2, we may
suitably generalise it by noting that for x, y ∈ZD, xy is a multiplicative unit if and only if both x and y
are; and that x, y are multiplicative units if and only if there are scalars a, b ∈ZD such that ax = 1 and
by = 1. Thus, for an input x ∈ZD, we use a small gadget which tests whether there is any a ∈ZD for
40

which ax = 1, in place of a small gadget which tests for x = 1.
(End of ZH rewrites.)
*
*
*
In the above, many rewrites involve scalars which are simply integer powers of Dν4. In the case that
ν = D−1/4, these all may be simpliﬁed by eliminating any scalar boxes which amount to multiplications
by +1. The rules presented in Figure 3 demonstrate rewrites which are sound subject to this value of ν.
F.3
ZX–ZH relations
Before we proceed with the ZX rewrites, we describe certain relationships which hold between the ZX
and ZH generators in the common semantic map that we have constructed. The reason for doing this
is to take advantage of these relationships to streamline the proving of certain ZX rewrites, which from
their deﬁnitions would be somewhat more laborious to carry out than similar ZH rewrites, owing to the
emphasis placed by the ZH calculus on the standard basis.
(ZXH-GW): Green and white dots.
""
...
...
##
=
""
...
...
##
(Proof: trivial.)
(ZXH-WH): Degree-1 green phase dots and H-boxes.
hh
Θ
ii
=
hh
Θ
ii
(Proof: trivial.)
Corollary (ZXH-GP): Green phase dots in ZH —
we may show this using (ZX-GF) to be shown below,
Θ
...
... ↔
...
...
Θ
(ZXH-GW), and (ZXH-GP).
(ZXH-HP), (ZXH-HM): Hadamard boxes and multicharacters — these equalities serve to motivate our
choice, to denote 1 →1 multicharacter H-boxes with parameters c = ±1, by the same symbol as the
quantum Fourier transform (which is to say, the inverse Fourier transform, F †):
Z
x,y∈[D]
ωxy |y⟩⟩⟨⟨x| =
Z
x,y∈[D]
e2πixy/D |y⟩⟩⟨⟨x| = F †;
Z
x,y∈[D]
ω−xy |y⟩⟩⟨⟨x| =
Z
x,y∈[D]
e−2πixy/D |y⟩⟩⟨⟨x| = F.
(109)
(ZXH-RG): Red and gray dots.
""
...
...
##
=
""
...
...
##
Proof:
We proceed by demonstrating the red-green colour change rule for ZX, which suﬃces to relate
the gray and phase-free red nodes. through the equivalence of white and phase-free green nodes. We take
advantage of the fact that |ωx⟩= F † |x⟩.
(F †)⊗n
"
Z
x∈[D]
Θ(x) |x⟩⟩⊗n⟨⟨x|⊗m
#
(F †)⊗m =
Z
x∈[D]
Θ(x)

F †|x⟩⟩
⊗n
⟨⟨x|F †⊗m
=
Z
x∈[D]
Θ(x)
ω−x⊗n⟨⟨ωx|⊗m .
(110)
From this it follows that
""
Θ
...
...
##
=




Θ
+
+
...
+
+
...




(111)
so that in particular, when Θ(x) = 1, we have
""
...
...
##
=




+
+
...
+
+
...



=




+
+
...
+
+
...



=



...
...




(112)
41

(ZXH-RN): Red and generalised not-dots.
""
[c]
##
=
""
c
##
Proof.
Using the amplitude function Ac(t) = τ 2ct = ωct, which is denoted by [c] in our stabiliser
shorthand for ZX green and red dots, we have:
""
[c]
##
=
""
+
[c]
+
##
=




+
+
Ac



=




+
+
c



=
""
c
##
(113)
(ZXH-S0), ZXH-S), (ZXH-GH0), (ZXH-GH): Phase scalar ZX gadgets and degree-0 H-boxes.
hh
Θ
ii
=
hh
Θ(0)
ii


=
hh
√
D
ii

Θ
[c]

=

Θ
[−c]

=
hh
Θ(c)
ii
hh
Θ
ii
=
""
Z
x∈[D]
Θ(x)
##
(114)
(Proof: trivial, with the ﬁrst line being a special case of the second in each set.)
(End of ZX-ZH relations.)
*
*
*
F.4
Sound ZX rewrites
We next consider rewrites for the ZX generators, which are sound for a semantic map as considered in
Section E.2, in which we ﬁx ν = D−1/4. (We will occasionally simplify our proofs using the fact that
F †|x⟩⟩= |ωx⟩.)
We are guided in no small part by the rule-set that Booth and Carette [27] set out for odd dimen-
sions D > 1, with some diﬀerences due to our deﬁnition of red dots, and the fact that we will prefer a
diﬀerent convention for describing stabiliser phases, broadly following Ref. [50] in taking [a ; b] to denote
a phase-function x 7→τ 2ax+bx2 for τ = eπi(D2+1)/D, rather than x 7→ω[(D+1)/2][ax+bx2] = τ ax+bx2 as
in Ref. [27],22 (using [a] as shorthand when b = 0). The motivation for the choice of 2ax + bx2 in the
exponent in place of ax+bx2, is to obtain a theory which describes stabiliser phases also when D is even,
and also for which

[1]

= Z ,

[1]

= X ,

[a]

= |a⟩⟩,

[a]

= |ωa⟩⟩.
(115)
We note also that the proof techniques of Booth and Carette [27] may be preferable to the ones demon-
strated below in many cases, at least in the case of D an odd prime. This constraint not only is the special
case considered in Ref. [27], but in particular implies that ZD is a ﬁeld, in which every u ∈ZD \ {0} is
a multiplicative unit. This simpliﬁes the situation with arithmetic substantially, and in particular allows
Ref. [27] to obtain simple normal forms. It is unclear to us how much of those techniques extend to the
more general case of D > 1 arbitrary. Our proof techniques are rather more direct and concrete: the
aim of which is to demonstrate the eﬀectiveness (in principle) of analysing operators through discrete
integrals, and also to reduce the amount of technical machinery on which our results depend.
(ZX-GI), (ZX-RI),
(ZX-HI), etc. —
Identity rules:


=
""
[c] [c] ##
=

+
-

=

+
+
+
+

=

θ

Proof.
These all follow from the relations between the generators described here, and corresponding
ZH generators as described in Section F.3.
22While Ref. [27] does not appear to make explicit use of the conventions of Ref. [50], we may show that τ = ω(D+1)/2,
by observing that τ · ω−(D+1)/2 = exp
 πi(D2 −D)/D

= (−1)D−1 = +1.
42

(ZX-GF): Green dot fusion.




Θ
...
...
Φ
...
...




=




Θ·Φ
...
...




Proof.
ZZ
x,y∈ZD

1⊗n ⊗Φ(y) |y⟩⟩⊗n⟨⟨y|⊗ℓ+1
Θ(x) |x⟩⟩⊗m+1⟨⟨x|⊗k ⊗1⊗m
=
ZZ
x,y∈ZD
Θ(x) Φ(y) |x⟩⟩⊗m⟨⟨x|⊗k ⊗⟨⟨y|x⟩⟩⊗|y⟩⟩⊗n⟨⟨y|⊗ℓ
=
Z
x∈ZD
Θ(x) Φ(x) |x⟩⟩⊗m⟨⟨x|⊗k ⊗|x⟩⟩⊗n⟨⟨x|⊗ℓ
=
Z
x∈ZD

Θ·Φ

(x) |x⟩⟩⊗m+n⟨⟨x|⊗k+ℓ.
In addition to the proof provided here, this could easily be demonstrated using white dot fusion and
H-box multiplication, using the correspondence to ZH generators as described in Section F.3.
Corollary (ZX-GFP), (ZX-GFS): Green phase fusion rules — these are two special cases, presenting
familiar versions of the green dot fusion rule, with additive phases.
θ
...
...
φ
...
...
←→
θ+φ
...
...
,
[a1; b1]
...
...
[a2; b2]
...
...
←→
[a1+a2 ;
b1+b2]
...
...
(ZX-RGC):
Red-green colour change.




Θ
+
+
...
+
+
...




=
""
Θ
...
...
##
Proof.
(F †)⊗n
"
Z
x∈ZD
Θ(x) |x⟩⟩⊗n⟨⟨x|⊗m
#
(F †)⊗m
=
Z
x∈ZD
Θ(x)

F †|x⟩⟩
⊗n
⟨⟨x|F †⊗m
=
Z
x∈ZD
Θ(x)
ω−x⊗n⟨⟨ωx|⊗m .
(ZX-CPY): Copy rule.



[a]
...




=




[a]
[a]
...




Proof.
ZZ
k,y∈ZD

|y⟩⟩⊗n⟨⟨y|

τ 2ak |ω−k⟩⟩

=
ZZ
x,y,k∈ZD

|y⟩⟩⊗n⟨⟨y|

ωak ωkx |x⟩⟩

=
Z
x∈ZD
|x⟩⟩⊗n Z
k∈ZD
ωk(x+a)
=
Z
x∈ZD
|x⟩⟩⊗n ⟨⟨x|−a⟩⟩= |−a⟩⟩⊗n.
(ZX-PU): Unit phase angle.
hh
θ
ii
=
""
##
Proof.
Z
x∈[D]
eiθx ⟨⟨0|x⟩⟩= e0 = 1 .
(ZX-SU): Unit stabiliser scalar.

[a ; b]

=
""
##
Proof.
Z
x∈[D]
τ 2ax+bx2 ⟨⟨0|x⟩⟩= τ 0 = 1 .
43

(ZX-GU):
Gaussian integral unit.
""
[a ; u]
[−a ; −u]
##
=
""
##
Proof.
"
Z
x∈[D]
τ −2ax−ux2
#"
Z
y∈[D]
τ 2ay+uy2
#
= Γ(a, u, D)∗Γ(a, u, D) =
Γ(a, u, D)
2 = 1 .
(ZX-Z): Zero scalar rule.
""
Z
##
=
""
Z
##
Proof.
Z
x∈[D]
Z(x) ⟨⟨x| =
Z
x∈[D]
0 · ⟨⟨x| = 0† =
Z
k∈[D]
0 · ⟨⟨ωk| =
Z
k∈[D]
Z(k) ⟨⟨ωk| .
(ZX-ZSP):
Zero stabiliser phase.
hh
[ ut′ ; t ]
ii
=
hh
Z
ii
Proof.
Z
x∈[D]
τ 2ut′x+tx2 = Γ(ut′, t, D)
= t · Γ(u, t/t′, D/t′) = 0 =
Z
x∈[D]
Z(x) .
(ZX-ZCP):
Zero clock phase.
hh
[ ˜a ]
ii
=
hh
Z
ii
Proof.
Z
x∈[D]
τ 2˜ax = ⟨⟨˜a|0⟩⟩= 0 =
Z
x∈[D]
Z(x) .
This result could likely be subsumed as a special case of (ZX-ZSP), if it were suitably modiﬁed to
accommodate the case of a stabiliser phase [a, b] in which b is a multiple of D (for D odd) or of 2D (for
D even), and in which a is not a multiple of D.
(ZX-RGB): Red-green bialgebra.
""
...
...
...
...
##
...
...

Proof.
This follows from the correspondence between green and white dots, and between red and gray
dots, shown in Section F.3.
(ZX-NS): Not-dot symmetry.




θ
¬
¬
...
¬
¬
...



=




−θ
...
...
σθ
[1]




Proof.
We may show this using (ZXH-GP), (ZXH-RN), and (ZH-NS):
θ
¬
¬
...
¬
¬
...
↔
¬
¬
...
¬
¬
...
eiθ
↔
...
...
eiθ
¬
↔
...
...
e−iθ
eiθσ
(116)
Applying (ZXH-S) for Θ(x) = eiσx for the scalar gadget, and (ZXH-GP) again for the H-box with ampli-
tude e−iθ, we then have
θ
¬
¬
...
¬
¬
...
↔
...
...
e−iθ
eiθσ
↔
−θ
...
...
σθ
[1]
(117)
44

(ZX-RS): Red shear rule.

[c] [a ; b] [c]

=




[a−bc ; b]
[c]
[a ; b]




Proof.
ZZZ
x,y,z∈[D]

τ 2cz |z⟩⟩⟨⟨z|

τ 2ax+bx2 |ω−x⟩⟩⟨⟨ωx|

τ 2cy |y⟩⟩⟨⟨y|

=
Z
x∈[D]
τ 2ax+bx2
"
Z
z∈[D]
τ 2cz ωxz |z⟩⟩
#"
Z
y∈[D]
τ 2cy ωxy ⟨⟨y|
#
=
Z
x∈[D]
τ 2ax+bx2
"
Z
z∈[D]
ωz(x+c) |z⟩⟩
#"
Z
y∈[D]
ωy(x+c) ⟨⟨y|
#
=
Z
x∈[D]
τ 2ax+bx2 |ω−(x+c)⟩⟩⟨⟨ωx+c|
=
Z
x∈[D]
τ 2ax−2ac+bx2−2bcx+bc2 |ω−x⟩⟩⟨⟨ωx|
= τ 2a(−c)+b(−c)2Z
x∈[D]
τ 2(a−bc)x+bx2 |ω−x⟩⟩⟨⟨ωx| .
(ZH-MH):
Multiplier-Hadamard rule.




...


u




=




[0 ; u]
[0 ; u−1]
[0 ; u]
+
[0 ; −u]




In this instance, we prove the
equality in reverse (by demon-
strating that the semantics of
the second diagram, is equal
to the semantics of the ﬁrst).
In the proof on the right, we
introduce the scalar constant
γu = Γ(0,−u,D) =
R
x τ −ux2 =

[0 ; −u] 
. By Eqn. (100),
we have |γu| = 1, and in par-
ticular γ−1
u
= γ∗
u =
R
x τ ux2.
Proof.
γu
ZZZZ
w,x,y,z∈[D]
τ uw2 τ u−1x2 τ uy2 ωyz |z⟩⟩⟨⟨y|ω−x⟩⟩⟨⟨ωx |w⟩⟩⟨⟨w|
= γu
ZZZZ
w,x,y,z∈[D]
τ uw2 τ u−1x2 τ uy2 ωyz ωxy ωwx |z⟩⟩⟨⟨w|
= γu
ZZZZ
w,x,y,z∈[D]
τ uw2 τ ux2 τ uy2 ωyz ωuxyωuwx |z⟩⟩⟨⟨w|
= γu
ZZZZ
w,x,y,z∈[D]
τ uw2 τ u(x+y)2 ωuwx+yz |z⟩⟩⟨⟨w|
= γu
ZZZZ
w,x,y,z∈[D]
τ uw2 τ ux2 ωuwx−uwy+yz |z⟩⟩⟨⟨w|
= γu
ZZZ
w,x,z∈[D]
 
Z
y∈[D]
ωy(z−uw)
!
τ u(x+w)2 |z⟩⟩⟨⟨w|
= γu
ZZZ
w,x,z∈[D]
⟨⟨z −uw|0⟩⟩τ ux2 |z⟩⟩⟨⟨w|
=
"
γu
Z
x∈[D]
τ ux2
#"
ZZ
w,z∈[D]
⟨⟨z −uw|0⟩⟩|z⟩⟩⟨⟨w|
#
=
ZZZ
w,y,z∈[D]
|z⟩⟩

⟨⟨z + y|0⟩⟩


y +
uP
j=1
w
|0

⟨⟨w|
=
ZZZZ
t∈[D]u
w,y,z∈[D]
|z⟩⟩

⟨⟨z + y|0⟩⟩


y +
uP
j=1
tj
|0

⟨⟨t|

|w⟩⟩⊗u⟨⟨w|

.
45

(ZX-ME):
Multiplier elimination.




[a, b]
...


u




=
hh
[−au−1; bu−2]
ii
Proof.
ZZZZ
t∈[D]u
w,y,z∈[D]

τ 2az+bz2⟨⟨ωz|y⟩⟩


y +
uP
j=1
tj
|0

⟨⟨t|

|w⟩⟩⊗u⟨⟨w|

=
ZZZ
w,y,z∈[D]

τ 2az+bz2ωzy

⟨⟨y + uw|0⟩⟩⟨⟨w|
=
ZZ
w,z∈[D]

τ 2az+bz2ω−zuw

⟨⟨w|
=
Z
z∈[D]
τ −2au–1z + bu–2z2
"
Z
w∈[D]
ωwz⟨⟨w|
#
=
Z
z∈[D]
τ −2au–1z + bu–2z2⟨⟨ωz| .
(ZX-MEH): Multi-edge Hopf Law.




...


D



=
hh
ii
Proof.
This follows from (ZH-MH), (ZXH-GW), and (ZXH-RG).
(ZX-A): Antipode Law.


=
hh
ii
Proof.
This follows from (ZXH-GW), (ZXH-RG), and (ZH-A).
(End of ZX rewrites.)
*
*
*
46

