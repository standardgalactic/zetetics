Neural Tangent Kernel:
Convergence and Generalization in Neural Networks
Arthur Jacot
´Ecole Polytechnique F´ed´erale de Lausanne
arthur.jacot@netopera.net
Franck Gabriel
Imperial College London and ´Ecole Polytechnique F´ed´erale de Lausanne
franckrgabriel@gmail.com
Cl´ement Hongler
´Ecole Polytechnique F´ed´erale de Lausanne
clement.hongler@gmail.com
Abstract
At initialization, artiﬁcial neural networks (ANNs) are equivalent to Gaussian
processes in the inﬁnite-width limit (16; 4; 7; 13; 6), thus connecting them to
kernel methods. We prove that the evolution of an ANN during training can also
be described by a kernel: during gradient descent on the parameters of an ANN,
the network function fθ (which maps input vectors to output vectors) follows the
kernel gradient of the functional cost (which is convex, in contrast to the parameter
cost) w.r.t. a new kernel: the Neural Tangent Kernel (NTK). This kernel is central
to describe the generalization features of ANNs. While the NTK is random at
initialization and varies during training, in the inﬁnite-width limit it converges
to an explicit limiting kernel and it stays constant during training. This makes it
possible to study the training of ANNs in function space instead of parameter space.
Convergence of the training can then be related to the positive-deﬁniteness of the
limiting NTK. We prove the positive-deﬁniteness of the limiting NTK when the
data is supported on the sphere and the non-linearity is non-polynomial.
We then focus on the setting of least-squares regression and show that in the inﬁnite-
width limit, the network function fθ follows a linear differential equation during
training. The convergence is fastest along the largest kernel principal components
of the input data with respect to the NTK, hence suggesting a theoretical motivation
for early stopping.
Finally we study the NTK numerically, observe its behavior for wide networks,
and compare it to the inﬁnite-width limit.
1
Introduction
Artiﬁcial neural networks (ANNs) have achieved impressive results in numerous areas of machine
learning. While it has long been known that ANNs can approximate any function with sufﬁciently
many hidden neurons (11; 14), it is not known what the optimization of ANNs converges to. Indeed
the loss surface of neural networks optimization problems is highly non-convex: it has a high number
of saddle points which may slow down the convergence (5). A number of results (3; 17; 18) suggest
that for wide enough networks, there are very few “bad” local minima, i.e. local minima with much
32nd Conference on Neural Information Processing Systems (NIPS 2018), Montr´eal, Canada.
arXiv:1806.07572v4  [cs.LG]  10 Feb 2020

higher cost than the global minimum. More recently, the investigation of the geometry of the loss
landscape at initialization has been the subject of a precise study (12). The analysis of the dynamics
of training in the large-width limit for shallow networks has seen recent progress as well (15). To
the best of the authors knowledge, the dynamics of deep networks has however remained an open
problem until the present paper: see the contributions section below.
A particularly mysterious feature of ANNs is their good generalization properties in spite of their
usual over-parametrization (20). It seems paradoxical that a reasonably large neural network can ﬁt
random labels, while still obtaining good test accuracy when trained on real data (23). It can be noted
that in this case, kernel methods have the same properties (1).
In the inﬁnite-width limit, ANNs have a Gaussian distribution described by a kernel (16; 4; 7; 13; 6).
These kernels are used in Bayesian inference or Support Vector Machines, yielding results comparable
to ANNs trained with gradient descent (2; 13). We will see that in the same limit, the behavior of
ANNs during training is described by a related kernel, which we call the neural tangent network
(NTK).
1.1
Contribution
We study the network function fθ of an ANN, which maps an input vector to an output vector, where
θ is the vector of the parameters of the ANN. In the limit as the widths of the hidden layers tend to
inﬁnity, the network function at initialization, fθ converges to a Gaussian distribution (16; 4; 7; 13; 6).
In this paper, we investigate fully connected networks in this inﬁnite-width limit, and describe the
dynamics of the network function fθ during training:
• During gradient descent, we show that the dynamics of fθ follows that of the so-called kernel
gradient descent in function space with respect to a limiting kernel, which only depends on
the depth of the network, the choice of nonlinearity and the initialization variance.
• The convergence properties of ANNs during training can then be related to the positive-
deﬁniteness of the inﬁnite-width limit NTK. In the case when the dataset is supported on a
sphere, we prove this positive-deﬁniteness using recent results on dual activation functions
(4). The values of the network function fθ outside the training set is described by the NTK,
which is crucial to understand how ANN generalize.
• For a least-squares regression loss, the network function fθ follows a linear differential
equation in the inﬁnite-width limit, and the eigenfunctions of the Jacobian are the kernel
principal components of the input data. This shows a direct connection to kernel methods
and motivates the use of early stopping to reduce overﬁtting in the training of ANNs.
• Finally we investigate these theoretical results numerically for an artiﬁcial dataset (of points
on the unit circle) and for the MNIST dataset. In particular we observe that the behavior of
wide ANNs is close to the theoretical limit.
2
Neural networks
In this article, we consider fully-connected ANNs with layers numbered from 0 (input) to L (output),
each containing n0, . . . , nL neurons, and with a Lipschitz, twice differentiable nonlinearity function
σ : R →R, with bounded second derivative 1.
This paper focuses on the ANN realization function F (L) : RP →F, mapping parameters θ to
functions fθ in a space F. The dimension of the parameter space is P = PL−1
ℓ=0 (nℓ+ 1)nℓ+1: the
parameters consist of the connection matrices W (ℓ) ∈Rnℓ×nℓ+1 and bias vectors b(ℓ) ∈Rnℓ+1 for
ℓ= 0, ..., L −1. In our setup, the parameters are initialized as iid Gaussians N(0, 1).
For a ﬁxed distribution pin on the input space Rn0, the function space F is deﬁned as
{f : Rn0 →RnL}. On this space, we consider the seminorm || · ||pin, deﬁned in terms of the
bilinear form
⟨f, g⟩pin = Ex∼pin 
f(x)T g(x)

.
1While these smoothness assumptions greatly simplify the proofs of our results, they do not seem to be
strictly needed for the results to hold true.
2

In this paper, we assume that the input distribution pin is the empirical distribution on a ﬁnite dataset
x1, ..., xN, i.e the sum of Dirac measures 1
N
PN
i=0 δxi.
We deﬁne the network function by fθ(x) := ˜α(L)(x; θ), where the functions ˜α(ℓ)(·; θ) : Rn0 →Rnℓ
(called preactivations) and α(ℓ)(·; θ) : Rn0 →Rnℓ(called activations) are deﬁned from the 0-th to
the L-th layer by:
α(0)(x; θ) = x
˜α(ℓ+1)(x; θ) =
1
√nℓ
W (ℓ)α(ℓ)(x; θ) + βb(ℓ)
α(ℓ)(x; θ) = σ(˜α(ℓ)(x; θ)),
where the nonlinearity σ is applied entrywise. The scalar β > 0 is a parameter which allows us to
tune the inﬂuence of the bias on the training.
Remark 1. Our deﬁnition of the realization function F (L) slightly differs from the classical one.
Usually, the factors
1
√nℓand the parameter β are absent and the parameters are initialized using
what is sometimes called LeCun initialization, taking W (ℓ)
ij
∼N(0, 1
nℓ) and b(ℓ)
j
∼N(0, 1) (or
sometimes b(ℓ)
j
= 0) to compensate. While the set of representable functions F (L)(RP ) is the same
for both parametrizations (with or without the factors
1
√nℓand β), the derivatives of the realization
function with respect to the connections ∂W (ℓ)
ij F (L) and bias ∂b(ℓ)
j F (L) are scaled by
1
√nℓand β
respectively in comparison to the classical parametrization.
The factors
1
√nℓare key to obtaining a consistent asymptotic behavior of neural networks as the
widths of the hidden layers n1, ..., nL−1 grow to inﬁnity. However a side-effect of these factors is
that they reduce greatly the inﬂuence of the connection weights during training when nℓis large: the
factor β is introduced to balance the inﬂuence of the bias and connection weights. In our numerical
experiments, we take β = 0.1 and use a learning rate of 1.0, which is larger than usual, see Section 6.
This gives a behaviour similar to that of a classical network of width 100 with a learning rate of 0.01.
3
Kernel gradient
The training of an ANN consists in optimizing fθ in the function space F with respect to a functional
cost C : F →R, such as a regression or cross-entropy cost. Even for a convex functional cost C,
the composite cost C ◦F (L) : RP →R is in general highly non-convex (3). We will show that
during training, the network function fθ follows a descent along the kernel gradient with respect to
the Neural Tangent Kernel (NTK) which we introduce in Section 4. This makes it possible to study
the training of ANNs in the function space F, on which the cost C is convex.
A multi-dimensional kernel K is a function Rn0 × Rn0 →RnL×nL, which maps any pair (x, x′) to
an nL ×nL-matrix such that K(x, x′) = K(x′, x)T (equivalently K is a symmetric tensor in F ⊗F).
Such a kernel deﬁnes a bilinear map on F, taking the expectation over independent x, x′ ∼pin:
⟨f, g⟩K := Ex,x′∼pin 
f(x)T K(x, x′)g(x′)

.
The kernel K is positive deﬁnite with respect to || · ||pin if ||f||pin > 0 =⇒||f||K > 0.
We denote by F∗the dual of F with respect to pin, i.e. the set of linear forms µ : F →R of the form
µ = ⟨d, ·⟩pin for some d ∈F. Two elements of F deﬁne the same linear form if and only if they
are equal on the data. The constructions in the paper do not depend on the element d ∈F chosen in
order to represent µ as ⟨d, ·⟩pin. Using the fact that the partial application of the kernel Ki,·(x, ·) is
a function in F, we can deﬁne a map ΦK : F∗→F mapping a dual element µ = ⟨d, ·⟩pin to the
function fµ = ΦK(µ) with values:
fµ,i(x) = µKi,·(x, ·) = ⟨d, Ki,·(x, ·)⟩pin .
For our setup, which is that of a ﬁnite dataset x1, . . . , xn ∈Rn0, the cost functional C only depends
on the values of f ∈F at the data points. As a result, the (functional) derivative of the cost C at a
3

point f0 ∈F can be viewed as an element of F∗, which we write ∂in
f C|f0. We denote by d|f0 ∈F,
a corresponding dual element, such that ∂in
f C|f0 = ⟨d|f0, ·⟩pin.
The kernel gradient ∇KC|f0 ∈F is deﬁned as ΦK

∂in
f C|f0

. In contrast to ∂in
f C which is only
deﬁned on the dataset, the kernel gradient generalizes to values x outside the dataset thanks to the
kernel K:
∇KC|f0(x) = 1
N
N
X
j=1
K(x, xj)d|f0(xj).
A time-dependent function f(t) follows the kernel gradient descent with respect to K if it satisﬁes
the differential equation
∂tf(t) = −∇KC|f(t).
During kernel gradient descent, the cost C(f(t)) evolves as
∂tC|f(t) = −

d|f(t), ∇KC|f(t)

pin = −
d|f(t)
2
K .
Convergence to a critical point of C is hence guaranteed if the kernel K is positive deﬁnite with
respect to || · ||pin: the cost is then strictly decreasing except at points such that ||d|f(t)||pin = 0.
If the cost is convex and bounded from below, the function f(t) therefore converges to a global
minimum as t →∞.
3.1
Random functions approximation
As a starting point to understand the convergence of ANN gradient descent to kernel gradient descent
in the inﬁnite-width limit, we introduce a simple model, inspired by the approach of (19).
A kernel K can be approximated by a choice of P random functions f (p) sampled independently
from any distribution on F whose (non-centered) covariance is given by the kernel K:
E[f (p)
k (x)f (p)
k′ (x′)] = Kkk′(x, x′).
These functions deﬁne a random linear parametrization F lin : RP →F
θ 7→f lin
θ
=
1
√
P
P
X
p=1
θpf (p).
The partial derivatives of the parametrization are given by
∂θpF lin(θ) =
1
√
P
f (p).
Optimizing the cost C ◦F lin through gradient descent, the parameters follow the ODE:
∂tθp(t) = −∂θp(C ◦F lin)(θ(t)) = −1
√
P
∂in
f C|f lin
θ(t) f (p) = −1
√
P
D
d|f lin
θ(t), f (p)E
pin .
As a result the function f lin
θ(t) evolves according to
∂tf lin
θ(t) =
1
√
P
P
X
p=1
∂tθp(t)f (p) = −1
P
P
X
p=1
D
d|f lin
θ(t), f (p)E
pin f (p),
where the right-hand side is equal to the kernel gradient −∇˜
KC with respect to the tangent kernel
˜K =
P
X
p=1
∂θpF lin(θ) ⊗∂θpF lin(θ) = 1
P
P
X
p=1
f (p) ⊗f (p).
This is a random nL-dimensional kernel with values ˜Kii′(x, x′) = 1
P
PP
p=1 f (p)
i
(x)f (p)
i′ (x′).
Performing gradient descent on the cost C ◦F lin is therefore equivalent to performing kernel gradient
descent with the tangent kernel ˜K in the function space. In the limit as P →∞, by the law of large
numbers, the (random) tangent kernel ˜K tends to the ﬁxed kernel K, which makes this method an
approximation of kernel gradient descent with respect to the limiting kernel K.
4

4
Neural tangent kernel
For ANNs trained using gradient descent on the composition C ◦F (L), the situation is very similar to
that studied in the Section 3.1. During training, the network function fθ evolves along the (negative)
kernel gradient
∂tfθ(t) = −∇Θ(L)C|fθ(t)
with respect to the neural tangent kernel (NTK)
Θ(L)(θ) =
P
X
p=1
∂θpF (L)(θ) ⊗∂θpF (L)(θ).
However, in contrast to F lin, the realization function F (L) of ANNs is not linear. As a consequence,
the derivatives ∂θpF (L)(θ) and the neural tangent kernel depend on the parameters θ. The NTK
is therefore random at initialization and varies during training, which makes the analysis of the
convergence of fθ more delicate.
In the next subsections, we show that, in the inﬁnite-width limit, the NTK becomes deterministic at
initialization and stays constant during training. Since fθ at initialization is Gaussian in the limit, the
asymptotic behavior of fθ during training can be explicited in the function space F.
4.1
Initialization
As observed in (16; 4; 7; 13; 6), the output functions fθ,i for i = 1, ..., nL tend to iid Gaussian
processes in the inﬁnite-width limit (a proof in our setup is given in the appendix):
Proposition 1. For a network of depth L at initialization, with a Lipschitz nonlinearity σ, and in the
limit as n1, ..., nL−1 →∞, the output functions fθ,k, for k = 1, ..., nL, tend (in law) to iid centered
Gaussian processes of covariance Σ(L), where Σ(L) is deﬁned recursively by:
Σ(1)(x, x′) = 1
n0
xT x′ + β2
Σ(L+1)(x, x′) = Ef∼N(0,Σ(L))[σ(f(x))σ(f(x′))] + β2,
taking the expectation with respect to a centered Gaussian process f of covariance Σ(L).
Remark 2. Strictly speaking, the existence of a suitable Gaussian measure with covariance Σ(L) is
not needed: we only deal with the values of f at x, x′ (the joint measure on f(x), f(x′) is simply a
Gaussian vector in 2D). For the same reasons, in the proof of Proposition 1 and Theorem 1, we will
freely speak of Gaussian processes without discussing their existence.
The ﬁrst key result of our paper (proven in the appendix) is the following: in the same limit, the
Neural Tangent Kernel (NTK) converges in probability to an explicit deterministic limit.
Theorem 1. For a network of depth L at initialization, with a Lipschitz nonlinearity σ, and in the
limit as the layers width n1, ..., nL−1 →∞, the NTK Θ(L) converges in probability to a deterministic
limiting kernel:
Θ(L) →Θ(L)
∞⊗IdnL.
The scalar kernel Θ(L)
∞: Rn0 × Rn0 →R is deﬁned recursively by
Θ(1)
∞(x, x′) = Σ(1)(x, x′)
Θ(L+1)
∞
(x, x′) = Θ(L)
∞(x, x′) ˙Σ(L+1)(x, x′) + Σ(L+1)(x, x′),
where
˙Σ(L+1) (x, x′) = Ef∼N(0,Σ(L)) [ ˙σ (f (x)) ˙σ (f (x′))] ,
taking the expectation with respect to a centered Gaussian process f of covariance Σ(L), and where
˙σ denotes the derivative of σ.
Remark 3. By Rademacher’s theorem, ˙σ is deﬁned everywhere, except perhaps on a set of zero
Lebesgue measure.
Note that the limiting Θ(L)
∞only depends on the choice of σ, the depth of the network and the variance
of the parameters at initialization (which is equal to 1 in our setting).
5

4.2
Training
Our second key result is that the NTK stays asymptotically constant during training. This applies
for a slightly more general deﬁnition of training: the parameters are updated according to a training
direction dt ∈F:
∂tθp(t) =
D
∂θpF (L)(θ(t)), dt
E
pin .
In the case of gradient descent, dt = −d|fθ(t) (see Section 3), but the direction may depend on
another network, as is the case for e.g. Generative Adversarial Networks (10). We only assume that
the integral
R T
0 ∥dt∥pindt stays stochastically bounded as the width tends to inﬁnity, which is veriﬁed
for e.g. least-squares regression, see Section 5.
Theorem 2. Assume that σ is a Lipschitz, twice differentiable nonlinearity function, with bounded
second derivative. For any T such that the integral
R T
0 ∥dt∥pindt stays stochastically bounded, as
n1, ..., nL−1 →∞, we have, uniformly for t ∈[0, T],
Θ(L)(t) →Θ(L)
∞⊗IdnL.
As a consequence, in this limit, the dynamics of fθ is described by the differential equation
∂tfθ(t) = ΦΘ(L)
∞⊗IdnL

⟨dt, ·⟩pin

.
Remark 4. As the proof of the theorem (in the appendix) shows, the variation during training of the
individual activations in the hidden layers shrinks as their width grows. However their collective
variation is signiﬁcant, which allows the parameters of the lower layers to learn: in the formula of
the limiting NTK Θ(L+1)
∞
(x, x′) in Theorem 1, the second summand Σ(L+1) represents the learning
due to the last layer, while the ﬁrst summand represents the learning performed by the lower layers.
As discussed in Section 3, the convergence of kernel gradient descent to a critical point of the cost
C is guaranteed for positive deﬁnite kernels. The limiting NTK is positive deﬁnite if the span of
the derivatives ∂θpF (L), p = 1, ..., P becomes dense in F w.r.t. the pin-norm as the width grows
to inﬁnity. It seems natural to postulate that the span of the preactivations of the last layer (which
themselves appear in ∂θpF (L), corresponding to the connection weights of the last layer) becomes
dense in F, for a large family of measures pin and nonlinearities (see e.g. (11; 14) for classical
theorems about ANNs and approximation). In the case when the dataset is supported on a sphere, the
positive-deﬁniteness of the limiting NTK can be shown using Gaussian integration techniques and
existing positive-deﬁniteness criteria, as given by the following proposition, proven in Appendix A.4:
Proposition 2. For a non-polynomial Lipschitz nonlinearity σ, for any input dimension n0, the
restriction of the limiting NTK Θ(L)
∞to the unit sphere Sn0−1 = {x ∈Rn0 : xT x = 1} is positive-
deﬁnite if L ≥2.
5
Least-squares regression
Given a goal function f ∗and input distribution pin, the least-squares regression cost is
C(f) = 1
2||f −f ∗||2
pin = 1
2Ex∼pin 
∥f(x) −f ∗(x)∥2
.
Theorems 1 and 2 apply to an ANN trained on such a cost. Indeed the norm of the training direction
∥d(f)∥pin = ∥f ∗−f∥pin is strictly decreasing during training, bounding the integral. We are
therefore interested in the behavior of a function ft during kernel gradient descent with a kernel K
(we are of course especially interested in the case K = Θ(L)
∞⊗IdnL):
∂tft = ΦK

⟨f ∗−f, ·⟩pin

.
The solution of this differential equation can be expressed in terms of the map Π : f 7→
ΦK

⟨f, ·⟩pin

:
ft = f ∗+ e−tΠ(f0 −f ∗)
6

where e−tΠ = P∞
k=0
(−t)k
k! Πk is the exponential of −tΠ. If Π can be diagonalized by eigenfunctions
f (i) with eigenvalues λi, the exponential e−tΠ has the same eigenfunctions with eigenvalues e−tλi.
For a ﬁnite dataset x1, ..., xN of size N, the map Π takes the form
Π(f)k(x) = 1
N
N
X
i=1
nL
X
k′=1
fk′(xi)Kkk′(xi, x).
The map Π has at most NnL positive eigenfunctions, and they are the kernel principal components
f (1), ..., f (NnL) of the data with respect to to the kernel K (21; 22). The corresponding eigenvalues
λi is the variance captured by the component.
Decomposing the difference (f ∗−f0) = ∆0
f + ∆1
f + ... + ∆NnL
f
along the eigenspaces of Π, the
trajectory of the function ft reads
ft = f ∗+ ∆0
f +
NnL
X
i=1
e−tλi∆i
f,
where ∆0
f is in the kernel (null-space) of Π and ∆i
f ∝f (i).
The above decomposition can be seen as a motivation for the use of early stopping. The convergence
is indeed faster along the eigenspaces corresponding to larger eigenvalues λi. Early stopping hence
focuses the convergence on the most relevant kernel principal components, while avoiding to ﬁt
the ones in eigenspaces with lower eigenvalues (such directions are typically the ‘noisier’ ones: for
instance, in the case of the RBF kernel, lower eigenvalues correspond to high frequency functions).
Note that by the linearity of the map e−tΠ, if f0 is initialized with a Gaussian distribution (as is the
case for ANNs in the inﬁnite-width limit), then ft is Gaussian for all times t. Assuming that the kernel
is positive deﬁnite on the data (implying that the NnL ×NnL Gram marix ˜K = (Kkk′(xi, xj))ik,jk′
is invertible), as t →∞limit, we get that f∞= f ∗+ ∆0
f = f0 −P
i ∆i
f takes the form
f∞,k(x) = κT
x,k ˜K−1y∗+

f0(x) −κT
x,k ˜K−1y0

,
with the Nnl-vectors κx,k, y∗and y0 given by
κx,k = (Kkk′(x, xi))i,k′
y∗= (f ∗
k(xi))i,k
y0 = (f0,k(xi))i,k .
The ﬁrst term, the mean, has an important statistical interpretation: it is the maximum-a-posteriori
(MAP) estimate given a Gaussian prior on functions fk ∼N(0, Θ(L)
∞) and the conditions fk(xi) =
f ∗
k(xi) . Equivalently, it is equal to the kernel ridge regression (22) as the regularization goes to
zero (λ →0). The second term is a centered Gaussian whose variance vanishes on the points of the
dataset.
6
Numerical experiments
In the following numerical experiments, fully connected ANNs of various widths are compared to the
theoretical inﬁnite-width limit. We choose the size of the hidden layers to all be equal to the same
value n := n1 = ... = nL−1 and we take the ReLU nonlinearity σ(x) = max(0, x).
In the ﬁrst two experiments, we consider the case n0 = 2. Moreover, the input elements are taken on
the unit circle. This can be motivated by the structure of high-dimensional data, where the centered
data points often have roughly the same norm 2.
In all experiments, we took nL = 1 (note that by our results, a network with nL outputs behaves
asymptotically like nL networks with scalar outputs trained independently). Finally, the value of the
parameter β is chosen as 0.1, see Remark 1.
2The classical example is for data following a Gaussian distribution N(0, Idn0): as the dimension n0 grows,
all data points have approximately the same norm √n0.
7

3
2
1
0
1
2
3
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
n = 500, t = 0
n = 500, t = 20
n = 10000, t = 0
n = 10000,
0
n = 500, t = 0
n = 500, t = 200
n = 10000, t = 0
n = 10000, t = 200
Figure 1: Convergence of the NTK to a ﬁxed limit
for two widths n and two times t.
3
2
1
0
1
2
3
0.4
0.2
0.0
0.2
0.4
f (sin( ), cos( ))
n = 50
n = 1000
n =
, P50
n =
, {P10, P90}
Figure 2: Networks function fθ near convergence
for two widths n and 10th, 50th and 90th per-
centiles of the asymptotic Gaussian distribution.
6.1
Convergence of the NTK
The ﬁrst experiment illustrates the convergence of the NTK Θ(L) of a network of depth L = 4 for
two different widths n = 500, 10000. The function Θ(4)(x0, x) is plotted for a ﬁxed x0 = (1, 0)
and x = (cos(γ), sin(γ)) on the unit circle in Figure 1. To observe the distribution of the NTK, 10
independent initializations are performed for both widths. The kernels are plotted at initialization
t = 0 and then after 200 steps of gradient descent with learning rate 1.0 (i.e. at t = 200). We
approximate the function f ∗(x) = x1x2 with a least-squares cost on random N(0, 1) inputs.
For the wider network, the NTK shows less variance and is smoother. It is interesting to note that
the expectation of the NTK is very close for both networks widths. After 200 steps of training, we
observe that the NTK tends to “inﬂate”. As expected, this effect is much less apparent for the wider
network (n = 10000) where the NTK stays almost ﬁxed, than for the smaller network (n = 500).
6.2
Kernel regression
For a regression cost, the inﬁnite-width limit network function fθ(t) has a Gaussian distribution for
all times t and in particular at convergence t →∞(see Section 5). We compared the theoretical
Gaussian distribution at t →∞to the distribution of the network function fθ(T ) of a ﬁnite-width
network for a large time T = 1000. For two different widths n = 50, 1000 and for 10 random
initializations each, a network is trained on a least-squares cost on 4 points of the unit circle for 1000
steps with learning rate 1.0 and then plotted in Figure 2.
We also approximated the kernels Θ(4)
∞and Σ(4) using a large-width network (n = 10000) and used
them to calculate and plot the 10th, 50th and 90-th percentiles of the t →∞limiting Gaussian
distribution.
The distributions of the network functions are very similar for both widths: their mean and variance
appear to be close to those of the limiting distribution t →∞. Even for relatively small widths
(n = 50), the NTK gives a good indication of the distribution of fθ(t) as t →∞.
6.3
Convergence along a principal component
We now illustrate our result on the MNIST dataset of handwritten digits made up of grayscale images
of dimension 28 × 28, yielding a dimension of n0 = 784.
We computed the ﬁrst 3 principal components of a batch of N = 512 digits with respect to the NTK
of a high-width network n = 10000 (giving an approximation of the limiting kernel) using a power
iteration method. The respective eigenvalues are λ1 = 0.0457, λ2 = 0.00108 and λ3 = 0.00078.
The kernel PCA is non-centered, the ﬁrst component is therefore almost equal to the constant function,
8

3
2
1
0
1
2
f(2)(x)
2
1
0
1
2
f(3)(x)
(a) The 2nd and 3rd principal
components of MNIST.
0
500
1000
1500
2000
2500
3000
3500
4000
t
0.00
0.02
0.04
0.06
0.08
0.10
0.12
0.14
n = 100
n = 1000
n = 10000
||ht||pin
(b) Deviation of the network function
fθ from the straight line.
0
500
1000
1500
2000
2500
3000
3500
4000
t
0.0
0.1
0.2
0.3
0.4
0.5
n = 100
n = 1000
n = 10000
n =
||gt||pin
(c) Convergence of fθ along the 2nd
principal component.
Figure 3
which explains the large gap between the ﬁrst and second eigenvalues3. The next two components are
much more interesting as can be seen in Figure 3a, where the batch is plotted with x and y coordinates
corresponding to the 2nd and 3rd components.
We have seen in Section 5 how the convergence of kernel gradient descent follows the kernel principal
components. If the difference at initialization f0 −f ∗is equal (or proportional) to one of the principal
components f (i), then the function will converge along a straight line (in the function space) to f ∗at
an exponential rate e−λit.
We tested whether ANNs of various widths n = 100, 1000, 10000 behave in a similar manner. We
set the goal of the regression cost to f ∗= fθ(0) + 0.5f (2) and let the network converge. At each time
step t, we decomposed the difference fθ(t) −f ∗into a component gt proportional to f (2) and another
one ht orthogonal to f (2). In the inﬁnite-width limit, the ﬁrst component decays exponentially fast
||gt||pin = 0.5e−λ2t while the second is null (ht = 0), as the function converges along a straight line.
As expected, we see in Figure 3b that the wider the network, the less it deviates from the straight line
(for each width n we performed two independent trials). As the width grows, the trajectory along the
2nd principal component (shown in Figure 3c) converges to the theoretical limit shown in blue.
A surprising observation is that smaller networks appear to converge faster than wider ones. This may
be explained by the inﬂation of the NTK observed in our ﬁrst experiment. Indeed, multiplying the
NTK by a factor a is equivalent to multiplying the learning rate by the same factor. However, note
that since the NTK of large-width network is more stable during training, larger learning rates can in
principle be taken. One must hence be careful when comparing the convergence speed in terms of the
number of steps (rather than in terms of the time t): both the inﬂation effect and the learning rate
must be taken into account.
7
Conclusion
This paper introduces a new tool to study ANNs, the Neural Tangent Kernel (NTK), which describes
the local dynamics of an ANN during gradient descent. This leads to a new connection between ANN
training and kernel methods: in the inﬁnite-width limit, an ANN can be described in the function
space directly by the limit of the NTK, an explicit constant kernel Θ(L)
∞, which only depends on
its depth, nonlinearity and parameter initialization variance. More precisely, in this limit, ANN
gradient descent is shown to be equivalent to a kernel gradient descent with respect to Θ(L)
∞. The
limit of the NTK is hence a powerful tool to understand the generalization properties of ANNs, and
it allows one to study the inﬂuence of the depth and nonlinearity on the learning abilities of the
network. The analysis of training using NTK allows one to relate convergence of ANN training with
the positive-deﬁniteness of the limiting NTK and leads to a characterization of the directions favored
by early stopping methods.
3It can be observed numerically, that if we choose β = 1.0 instead of our recommended 0.1, the gap between
the ﬁrst and the second principal component is about ten times bigger, which makes training more difﬁcult.
9

Acknowledgements
The authors thank K. Kyt¨ol¨a for many interesting discussions. The second author was supported by
the ERC CG CRITICAL. The last author acknowledges support from the ERC SG Constamis, the
NCCR SwissMAP, the Blavatnik Family Foundation and the Latsis Foundation.
References
[1] M. Belkin, S. Ma, and S. Mandal. To understand deep learning we need to understand kernel
learning. arXiv preprint, Feb 2018.
[2] Y. Cho and L. K. Saul. Kernel methods for deep learning. In Advances in Neural Information
Processing Systems 22, pages 342–350. Curran Associates, Inc., 2009.
[3] A. Choromanska, M. Henaff, M. Mathieu, G. B. Arous, and Y. LeCun. The Loss Surfaces of
Multilayer Networks. Journal of Machine Learning Research, 38:192–204, nov 2015.
[4] A. Daniely, R. Frostig, and Y. Singer. Toward deeper understanding of neural networks: The
power of initialization and a dual view on expressivity. In D. D. Lee, M. Sugiyama, U. V.
Luxburg, I. Guyon, and R. Garnett, editors, Advances in Neural Information Processing Systems
29, pages 2253–2261. Curran Associates, Inc., 2016.
[5] Y. N. Dauphin, R. Pascanu, C. Gulcehre, K. Cho, S. Ganguli, and Y. Bengio. Identifying
and attacking the saddle point problem in high-dimensional non-convex optimization. In
Proceedings of the 27th International Conference on Neural Information Processing Systems -
Volume 2, NIPS’14, pages 2933–2941, Cambridge, MA, USA, 2014. MIT Press.
[6] A. G. de G. Matthews, J. Hron, M. Rowland, R. E. Turner, and Z. Ghahramani. Gaussian
process behaviour in wide deep neural networks. In International Conference on Learning
Representations, 2018.
[7] A. G. de G. Matthews, J. Hron, R. E. Turner, and Z. Ghahramani. Sample-then-optimize
posterior sampling for bayesian linear models. In NIPS workshop on Advances in Approximate
Bayesian Inference, 2017.
[8] S. S. Dragomir. Some Gronwall Type Inequalities and Applications. Nova Science Publishers,
2003.
[9] T. Gneiting.
Strictly and non-strictly positive deﬁnite functions on spheres.
Bernoulli,
19(4):1327–1349, 2013.
[10] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley, S. Ozair, A. Courville,
and Y. Bengio. Generative Adversarial Networks. NIPS’14 Proceedings of the 27th International
Conference on Neural Information Processing Systems - Volume 2, pages 2672–2680, jun 2014.
[11] K. Hornik, M. Stinchcombe, and H. White. Multilayer feedforward networks are universal
approximators. Neural Networks, 2(5):359 – 366, 1989.
[12] R. Karakida, S. Akaho, and S.-i. Amari. Universal Statistics of Fisher Information in Deep
Neural Networks: Mean Field Approach. jun 2018.
[13] J. H. Lee, Y. Bahri, R. Novak, S. S. Schoenholz, J. Pennington, and J. Sohl-Dickstein. Deep
neural networks as gaussian processes. ICLR, 2018.
[14] M. Leshno, V. Lin, A. Pinkus, and S. Schocken. Multilayer feedforward networks with a non-
polynomial activation function can approximate any function. Neural Networks, 6(6):861–867,
1993.
[15] S. Mei, A. Montanari, and P.-M. Nguyen. A mean ﬁeld view of the landscape of two-layer
neural networks. Proceedings of the National Academy of Sciences, 115(33):E7665–E7671,
2018.
[16] R. M. Neal. Bayesian Learning for Neural Networks. Springer-Verlag New York, Inc., Secaucus,
NJ, USA, 1996.
10

[17] R. Pascanu, Y. N. Dauphin, S. Ganguli, and Y. Bengio. On the saddle point problem for
non-convex optimization. arXiv preprint, 2014.
[18] J. Pennington and Y. Bahri. Geometry of neural network loss surfaces via random matrix
theory. In Proceedings of the 34th International Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research, pages 2798–2806, International Convention
Centre, Sydney, Australia, 06–11 Aug 2017. PMLR.
[19] A. Rahimi and B. Recht. Random features for large-scale kernel machines. In Advances in
Neural Information Processing Systems 20, pages 1177–1184. Curran Associates, Inc., 2008.
[20] L. Sagun, U. Evci, V. U. G¨uney, Y. Dauphin, and L. Bottou. Empirical analysis of the hessian
of over-parametrized neural networks. CoRR, abs/1706.04454, 2017.
[21] B. Sch¨olkopf, A. Smola, and K.-R. M¨uller. Nonlinear component analysis as a kernel eigenvalue
problem. Neural Computation, 10(5):1299–1319, 1998.
[22] J. Shawe-Taylor and N. Cristianini. Kernel Methods for Pattern Analysis. Cambridge University
Press, New York, NY, USA, 2004.
[23] C. Zhang, S. Bengio, M. Hardt, B. Recht, and O. Vinyals. Understanding deep learning requires
rethinking generalization. ICLR 2017 proceedings, Feb 2017.
A
Appendix
This appendix is dedicated to proving the key results of this paper, namely Proposition 1 and Theorems
1 and 2, which describe the asymptotics of neural networks at initialization and during training.
We study the limit of the NTK as n1, ..., nL−1 →∞sequentially, i.e. we ﬁrst take n1 →∞, then
n2 →∞, etc. This leads to much simpler proofs, but our results could in principle be strengthened to
the more general setting when min(n1, ..., nL−1) →∞.
A natural choice of convergence to study the NTK is with respect to the operator norm on kernels:
∥K∥op =
max
∥f∥pin≤1∥f∥K =
max
∥f∥pin≤1
q
Ex,x′[f(x)T K(x, x′)f(x′)],
where the expectation is taken over two independent x, x′ ∼pin. This norm depends on the input
distribution pin. In our setting, pin is taken to be the empirical measure of a ﬁnite dataset of distinct
samples x1, ..., xN. As a result, the operator norm of K is equal to the leading eigenvalue of the
NnL × NnL Gram matrix (Kkk′(xi, xj))k,k′<nL,i,j<N. In our setting, convergence in operator
norm is hence equivalent to pointwise convergence of K on the dataset.
A.1
Asymptotics at Initialization
It has already been observed (16; 13) that the output functions fθ,i for i = 1, ..., nL tend to iid
Gaussian processes in the inﬁnite-width limit.
Proposition 1. For a network of depth L at initialization, with a Lipschitz nonlinearity σ, and in the
limit as n1, ..., nL−1 →∞sequentially, the output functions fθ,k, for k = 1, ..., nL, tend (in law) to
iid centered Gaussian processes of covariance Σ(L), where Σ(L) is deﬁned recursively by:
Σ(1)(x, x′) = 1
n0
xT x′ + β2
Σ(L+1)(x, x′) = Ef[σ(f(x))σ(f(x′))] + β2,
taking the expectation with respect to a centered Gaussian process f of covariance Σ(L).
Proof. We prove the result by induction. When L = 1, there are no hidden layers and fθ is a random
afﬁne function of the form:
fθ(x) =
1
√n0
W (0)x + βb(0).
11

All output functions fθ,k are hence independent and have covariance Σ(1) as needed.
The key to the induction step is to consider an (L + 1)-network as the following composition: an
L-network Rn0 →RnL mapping the input to the pre-activations ˜α(L)
i
, followed by an elementwise
application of the nonlinearity σ and then a random afﬁne map RnL →RnL+1. The induction
hypothesis gives that in the limit as sequentially n1, ..., nL−1 →∞the preactivations ˜α(L)
i
tend to
iid Gaussian processes with covariance Σ(L). The outputs
fθ,i =
1
√nL
W (L)
i
α(L) + βb(L)
i
conditioned on the values of α(L) are iid centered Gaussians with covariance
˜Σ(L+1)(x, x′) = 1
nL
α(L)(x; θ)T α(L)(x′; θ) + β2.
By the law of large numbers, as nL →∞, this covariance tends in probability to the expectation
˜Σ(L+1)(x, x′) →Σ(L+1)(x, x′) = Ef∼N(0,Σ(L))[σ(f(x))σ(f(x′))] + β2.
In particular the covariance is deterministic and hence independent of α(L). As a consequence,
the conditioned and unconditioned distributions of fθ,i are equal in the limit: they are iid centered
Gaussian of covariance Σ(L+1).
In the inﬁnite-width limit, the neural tangent kernel, which is random at initialization, converges in
probability to a deterministic limit.
Theorem 1. For a network of depth L at initialization, with a Lipschitz nonlinearity σ, and in the
limit as the layers width n1, ..., nL−1 →∞sequentially, the NTK Θ(L) converges in probability to a
deterministic limiting kernel:
Θ(L) →Θ(L)
∞⊗IdnL.
The scalar kernel Θ(L)
∞: Rn0 × Rn0 →R is deﬁned recursively by
Θ(1)
∞(x, x′) = Σ(1)(x, x′)
Θ(L+1)
∞
(x, x′) = Θ(L)
∞(x, x′) ˙Σ(L+1)(x, x′) + Σ(L+1)(x, x′),
where
˙Σ(L+1) (x, x′) = Ef∼N(0,Σ(L)) [ ˙σ (f (x)) ˙σ (f (x′))] ,
taking the expectation with respect to a centered Gaussian process f of covariance Σ(L), and where
˙σ denotes the derivative of σ.
Proof. The proof is again by induction. When L = 1, there is no hidden layer and therefore no limit
to be taken. The neural tangent kernel is a sum over the entries of W (0) and those of b(0):
Θkk′(x, x′) = 1
n0
n0
X
i=1
n1
X
j=1
xix′
iδjkδjk′ + β2
n1
X
j=1
δjkδjk′
= 1
n0
xT x′δkk′ + β2δkk′ = Σ(1)(x, x′)δkk′.
Here again, the key to prove the induction step is the observation that a network of depth L + 1 is
an L-network mapping the inputs x to the preactivations of the L-th layer ˜α(L)(x) followed by a
nonlinearity and a random afﬁne function. For a network of depth L + 1, let us therefore split the
parameters into the parameters ˜θ of the ﬁrst L layers and those of the last layer (W (L), b(L)).
By Proposition 1 and the induction hypothesis, as n1, ..., nL−1 →∞the pre-activations ˜α(L)
i
are
iid centered Gaussian with covariance Σ(L) and the neural tangent kernel Θ(L)
ii′ (x, x′) of the smaller
network converges to a deterministic limit:

∂˜θ ˜α(L)
i
(x; θ)
T
∂˜θ ˜α(L)
i′ (x′; θ) →Θ(L)
∞(x, x′)δii′.
12

We can split the neural tangent network into a sum over the parameters ˜θ of the ﬁrst L layers and the
remaining parameters W (L) and b(L).
For the ﬁrst sum let us observe that by the chain rule:
∂˜θpfθ,k(x) =
1
√nL
nL
X
i=1
∂˜θp ˜α(L)
i
(x; θ) ˙σ(˜α(L)
i
(x; θ))W (L)
ik .
By the induction hypothesis, the contribution of the parameters ˜θ to the neural tangent kernel
Θ(L+1)
kk′
(x, x′) therefore converges as n1, ..., nL−1 →∞:
1
nL
nL
X
i,i′=1
Θ(L)
ii′ (x, x′) ˙σ

˜α(L)
i
(x; θ)

˙σ

˜α(L)
i′ (x′; θ)

W (L)
ik W (L)
i′k′
→1
nL
nL
X
i=1
Θ(L)
∞(x, x′) ˙σ

˜α(L)
i
(x; θ)

˙σ

˜α(L)
i
(x′; θ)

W (L)
ik W (L)
ik′
By the law of large numbers, as nL →∞, this tends to its expectation which is equal to
Θ(L)
∞(x, x′) ˙Σ(L+1)(x, x′)δkk′.
It is then easy to see that the second part of the neural tangent kernel, the sum over W (L) and b(L)
converges to Σ(L+1)δkk′ as n1, ..., nL →∞.
A.2
Asymptotics during Training
Given a training direction t 7→dt ∈F, a neural network is trained in the following manner: the
parameters θp are initialized as iid N(0, 1) and follow the differential equation:
∂tθp(t) =
D
∂θpF (L), dt
E
pin .
In this context, in the inﬁnite-width limit, the NTK stays constant during training:
Theorem 2. Assume that σ is a Lipschitz, twice differentiable nonlinearity function, with bounded
second derivative. For any T such that the integral
R T
0 ∥dt∥pindt stays stochastically bounded, as
n1, ..., nL−1 →∞sequentially, we have, uniformly for t ∈[0, T],
Θ(L)(t) →Θ(L)
∞⊗IdnL.
As a consequence, in this limit, the dynamics of fθ is described by the differential equation
∂tfθ(t) = ΦΘ(L)
∞⊗IdnL

⟨dt, ·⟩pin

.
Proof. As in the previous theorem, the proof is by induction on the depth of the network. When
L = 1, the neural tangent kernel does not depend on the parameters, it is therefore constant during
training.
For the induction step, we again split an L + 1 network into a network of depth L with parameters
˜θ and top layer connection weights W (L) and bias b(L). The smaller network follows the training
direction
d′
t = ˙σ

˜α(L)(t)
 
1
√nL
W (L)(t)
T
dt
for i = 1, . . . , nL, where the function ˜α(L)
i
(t) is deﬁned as ˜α(L)
i
(·; θ(t)). We now want to apply
the induction hypothesis to the smaller network. For this, we need to show that
R T
0 ∥d′
t∥pindt is
stochastically bounded as n1, . . . , nL →∞. Since σ is a c-Lipschitz function, we have that
∥d′
t∥pin ≤c∥
1
√nL
W (L)(t)∥op∥dt∥pin.
To apply the induction hypothesis, we now need to bound ∥
1
√nL W (L)(t)∥op. For this, we use the
following lemma, which is proven in Appendix A.3 below:
13

Lemma 1. With the setting of Theorem 2, for a network of depth L + 1, for any ℓ= 1, . . . , L, we
have the convergence in probability:
lim
nL→∞· · · lim
n1→∞sup
t∈[0,T ]
∥1
√nℓ

W (ℓ)(t) −W (ℓ)(0)

∥op = 0
From this lemma, to bound ∥
1
√nL W (L)(t)∥op, it is hence enough to bound ∥
1
√nL W (L)(0)∥op. From
the law of large numbers, we obtain that the norm of each of the nL+1 rows of W (L)(0) is bounded,
and hence that ∥
1
√nL W (L)(0)∥op is bounded (keep in mind that nL+1 is ﬁxed, while n1, . . . , nL
grow).
From the above considerations, we can apply the induction hypothesis to the smaller network, yielding,
in the limit as n1, . . . , nL →∞(sequentially), that the dynamics is governed by the constant kernel
Θ(L)
∞:
∂t˜α(L)
i
(t) =
1
√nL
ΦΘ(L)
∞
 
˙σ

˜α(L)
i
(t)
 
W (L)
i
(t)
T
dt, ·

pin
!
.
At the same time, the parameters of the last layer evolve according to
∂tW (L)
ij (t) =
1
√nL
D
α(L)
i
(t), dt,j
E
pin .
We want to give an upper bound on the variation of the weights columns W (L)
i
(t) and of the
activations ˜α(L)
i
(t) during training in terms of L2-norm and pin-norm respectively. Applying the
Cauchy-Schwarz inequality for each j, summing and using ∂t|| · || ≤||∂t · ||), we have
∂t
W (L)
i
(t) −W (L)
i
(0)

2 ≤
1
√nL
||α(L)
i
(t)||pin||dt||pin.
Now, observing that the operator norm of ΦΘ(L)
∞is equal to ||Θ(L)
∞||op, deﬁned in the introduction of
Appendix A, and using the Cauchy-Schwarz inequality, we get
∂t
˜α(L)
i
(t) −˜α(L)
i
(0)

pin ≤
1
√nL
Θ(L)
∞

op
 ˙σ

˜α(L)
i
(t)

∞
W (L)
i
(t)

2 ∥dt∥pin ,
where the sup norm ∥·∥∞is deﬁned by ∥f∥∞= supx |f(x)|.
To bound both quantities simultaneously, study the derivative of the quantity
A(t) = ||α(L)
i
(0)||pin + c
˜α(L)
i
(t) −˜α(L)
i
(0)

pin + ||W (L)
i
(0)||2 +
W (L)
i
(t) −W (L)
i
(0)

2 .
We have
∂tA(t) ≤
1
√nL

c2 Θ(L)
∞

op
W (L)
i
(t)

2 + ||α(L)
i
(t)||pin

||dt||pin
≤max{c2∥Θ(L)
∞∥op, 1}
√nL
∥dt∥pinA(t),
where, in the ﬁrst inequality, we have used that | ˙σ| ≤c and, in the second inequality, that the sum
∥W (L)
i
(t)∥2 + ||α(L)
i
(t)||pin is bounded by A(t). Applying Gr¨onwall’s Lemma, we now get
A(t) ≤A(0) exp
 
max{c2∥Θ(L)
∞∥op, 1}
√nL
Z t
0
∥ds∥pinds
!
.
Note that ∥Θ(L)
∞∥op is constant during training. Clearly the value inside of the exponential converges
to zero in probability as nL →∞given that the integral
R t
0 ∥dt∥pinds stays stochastically bounded.
The variations of the activations
˜α(L)
i
(t) −˜α(L)
i
(0)

pin and weights
W (L)
i
(t) −W (L)
i
(0)

2 are
bounded by c−1(A(t)−A(0)) and A(t)−A(0) respectively, which converge to zero at rate O

1
√nL

.
14

We can now use these bounds to control the variation of the NTK and to prove the theorem. To
understand how the NTK evolves, we study the evolution of the derivatives with respect to the
parameters. The derivatives with respect to the bias parameters of the top layer ∂b(L)
j
fθ,j′ are always
equal to δjj′. The derivatives with respect to the connection weights of the top layer are given by
∂W (L)
ij fθ,j′(x) =
1
√nL
α(L)
i
(x; θ)δjj′.
The pre-activations ˜α(L)
i
evolve at a rate of
1
√nL and so do the activations α(L)
i
. The summands
∂W (L)
ij fθ,j′(x) ⊗∂W (L)
ij fθ,j′′(x′) of the NTK hence vary at rate of n−3/2
L
which induces a variation
of the NTK of rate
1
√nL .
Finally let us study the derivatives with respect to the parameters of the lower layers
∂˜θkfθ,j(x) =
1
√nL
nL
X
i=1
∂˜θk ˜α(L)
i
(x; θ) ˙σ

˜α(L)
i
(x; θ)

W (L)
ij .
Their contribution to the NTK Θ(L+1)
jj′
(x, x′) is
1
nL
nL
X
i,i′=1
Θ(L)
ii′ (x, x′) ˙σ

˜α(L)
i
(x; θ)

˙σ

˜α(L)
i′ (x′; θ)

W (L)
ij W (L)
i′j′ .
By the induction hypothesis, the NTK of the smaller network Θ(L) tends to Θ(L)
∞δii′ as
n1, ..., nL−1 →∞. The contribution therefore becomes
1
nL
nL
X
i=1
Θ(L)
∞(x, x′) ˙σ

˜α(L)
i
(x; θ)

˙σ

˜α(L)
i
(x′; θ)

W (L)
ij W (L)
ij′ .
The connection weights W (L)
ij
vary at rate
1
√nL , inducing a change of the same rate to the whole sum.
We simply have to prove that the values ˙σ(˜α(L)
i
(x; θ)) also change at rate
1
√nL . Since the second
derivative of σ is bounded, we have that
∂t

˙σ

˜α(L)
i
(x; θ(t))

= O

∂t˜α(L)
i
(x; θ(t))

.
Since ∂t˜α(L)
i
(x; θ(t)) goes to zero at a rate
1
√nL by the bound on A(t) above, this concludes the
proof.
It is somewhat counterintuitive that the variation of the activations of the hidden layers α(ℓ)
i
during
training goes to zero as the width becomes large4. It is generally assumed that the purpose of the
activations of the hidden layers is to learn “good” representations of the data during training. However
note that even though the variation of each individual activation shrinks, the number of neurons grows,
resulting in a signiﬁcant collective effect. This explains why the training of the parameters of each
layer ℓhas an inﬂuence on the network function fθ even though it has asymptotically no inﬂuence on
the individual activations of the layers ℓ′ for ℓ< ℓ′ < L.
A.3
A Priori Control during Training
The goal of this section is to prove Lemma 1, which is a key ingredient in the proof of Theorem 2.
Let us ﬁrst recall it:
Lemma 1. With the setting of Theorem 2, for a network of depth L + 1, for any ℓ= 1, . . . , L, we
have the convergence in probability:
lim
nL→∞· · · lim
n1→∞sup
t∈[0,T ]
∥1
√nℓ

W (ℓ)(t) −W (ℓ)(0)

∥op = 0
4As a consequence, the pre-activations stay Gaussian during training as well, with the same covariance Σ(ℓ).
15

Proof. We prove the lemma for all ℓ= 1, . . . , L simultaneously, by expressing the variation of
the weights
1
√nℓW (ℓ) and activations
1
√nℓ˜α(ℓ) in terms of ‘back-propagated’ training directions
d(1), . . . , d(L) associated with the lower layers and the NTKs of the corresponding subnetworks:
1. At all times, the evolution of the preactivations and weights is given by:
∂t˜α(ℓ) = ΦΘ(ℓ)

< d(ℓ)
t , · >pin

∂tW (ℓ) =
1
√nℓ
< α(ℓ), d(ℓ+1)
t
>pin,
where the layer-wise training directions d(1), . . . , d(L) are deﬁned recursively by
d(ℓ)
t
=



dt
if ℓ= L + 1
˙σ
 ˜α(ℓ) 
1
√nℓW (ℓ)T
d(ℓ+1)
t
if ℓ≤L,
and where the sub-network NTKs Θ(ℓ) satisfy
Θ(1) =
"
1
√n0
α(0)
T 
1
√n0
α(0)
#
⊗Idnℓ+ β2 ⊗Idnℓ
Θ(ℓ+1) =
1
√nℓ
W (ℓ) ˙σ(˜α(ℓ))Θ(ℓ) ˙σ(˜α(ℓ)) 1
√nℓ
W (ℓ)
+
" 1
√nℓ
α(ℓ)
T  1
√nℓ
α(ℓ)
#
⊗Idnℓ+ β2 ⊗Idnℓ.
2. Set w(k)(t) :=

1
√nk W (k)(t)

op and a(k) (t) :=

1
√nk α(k) (t)

pin. The identities of the
previous step yield the following recursive bounds:
d(ℓ)
t

pin ≤cw(ℓ)(t)
d(ℓ+1)
t

pin ,
where c is the Lipschitz constant of σ. These bounds lead to
d(ℓ)
t

pin ≤cL+1−ℓ
L
Y
k=ℓ
w(k)(t) ∥dt∥pin .
For the subnetworks NTKs we have the recursive bounds
∥Θ(1)∥op ≤(a(0)(t))2 + β2.
∥Θ(ℓ+1)∥op ≤c2(w(ℓ)(t))2∥Θ(ℓ)∥op + (a(ℓ)(t))2 + β2,
which lead to
∥Θ(ℓ+1)∥op ≤P

a(1), . . . , a(ℓ), w(1), . . . , w(ℓ)
,
where P is a polynomial which only depends on ℓ, c, β and pin.
3. Set
˜a(k) (t) :=

1
√nk

˜α(k) (t) −˜α(k) (0)

pin
˜w(k) (t) :=

1
√nk

W (k) (t) −W (k) (0)

op
and deﬁne
A (t) =
L
X
k=1
a(k) (0) + c˜a(k) (t) + w(k) (0) + ˜w(k) (t) .
16

Since a(k) (t) ≤a(k) (0) + c˜a(k) (t) and w(k) (t) ≤w(k) (0) + ˜w(k) (t), controlling A (t)
will enable us to control the a(k) (t) and w(k) (t). Using the formula at the beginning of the
ﬁrst step, we obtain
∂t˜a(ℓ) (t) ≤
1
√nℓ
∥Θ(ℓ)(t)∥op∥d(ℓ)
t ∥pin
∂t ˜w(ℓ) (t) ≤
1
√nℓ
a(ℓ) (t) ∥d(ℓ+1)
t
∥pin.
This allows one to bound the derivative of A (t) as follows:
∂tA (t) ≤
L
X
ℓ=1
c
√nℓ
∥Θ(ℓ)(t)∥op∥d(ℓ)
t ∥pin +
1
√nℓ
a(ℓ) (t) ∥d(ℓ+1)
t
∥pin.
Using the polynomial bounds on ∥Θ(ℓ)(t)∥op and ∥d(ℓ+1)
t
∥pin in terms of the a(k) and w(k)
for k = 1, . . . ℓobtained in the previous step, we get that
∂tA (t) ≤
1
p
min {n1, . . . , nL}
Q

w(1) (t) , . . . , w(L) (t) , a(1) (t) , . . . , a(L) (t)

∥dt∥pin,
where the polynomial Q only depends on L, c, β and pin and has positive coefﬁcients. As a
result, we can use a(k) (t) ≤a(k) (0) + c˜a(k) (t) and w(k) (t) ≤w(k) (0) + ˜w(k) (t) to get
the polynomial bound
∂tA (t) ≤
1
p
min {n1, . . . , nL}
˜Q (A (t)) ∥dt∥pin.
4. Let us now observe that A (0) is stochastically bounded as we take the sequential limit
limnL→∞· · · limn1→∞as in the statement of the lemma. In this limit, we indeed have that
w(ℓ)and a(ℓ) are convergent: we have w(ℓ) →0, while a(ℓ) converges by Proposition 1.
The polynomial control we obtained on the derivative of A (t) now allows one to use
(a nonlinear form of, see e.g. (8)) Gr¨onwall’s Lemma: we obtain that A (t) stays uni-
formly bounded on [0, τ] for some τ = τ (n1, . . . , nL) > 0, and that τ →T as
min (n1, . . . , nL) →∞, owing to the
1
√
min{1,...,nL}in front of the polynomial. Since
A (t) is bounded, the differential bound on A (t) gives that the derivative ∂tA (t) converges
uniformly to 0 on [0, τ] for any τ < T, and hence A (t) →A (0). This concludes the proof
of the lemma.
A.4
Positive-Deﬁniteness of Θ(L)
∞
This subsection is devoted to the proof of Proposition 2, which we now recall:
Proposition 2. For a non-polynomial Lipschitz nonlinearity σ, for any input dimension n0, the
restriction of the limiting NTK Θ(L)
∞to the unit sphere Sn0−1 = {x ∈Rn0 : xT x = 1} is positive-
deﬁnite if L ≥2.
A key ingredient for the proof of Proposition 2 is the following Lemma, which comes from (4).
Lemma 2 (Lemma 12(a) in suppl. mat. of (4)). Let ˆµ : [−1, 1] →R denote the dual of a Lipschitz
function µ : R →R, deﬁned by ˆµ (ρ) = E(X,Y ) [µ (X) µ (Y )] where (X, Y ) is a centered Gaussian
vector of covariance Σ, with
Σ =

1
ρ
ρ
1

.
If the expansion of µ in Hermite polynomials (hi)i≥0 is given by µ = P∞
i=0 aihi, we have
ˆµ (ρ) =
∞
X
i=0
a2
i ρi.
17

The other key ingredient for proving Proposition 2 is the following theorem, which is a slight
reformulation of Theorem 1(b) in (9), which itself is a generalization of a classical result of Sch¨onberg:
Theorem 3. For a function f : [−1, 1] →R with f (ρ) = P∞
n=0 bnρn, the kernel K(n0)
f
: Sn0−1 ×
Sn0−1 →R deﬁned by
K(n0)
f
(x, x′) = f
 xT x′
is positive-deﬁnite for any n0 ≥1 if and only if the coefﬁcients bn are strictly positive for inﬁnitely
many even and inﬁnitely many odd integers n.
With Lemma 2 and Theorem 3 above, we are now ready to prove Proposition 2.
Proof of Proposition 2. We ﬁrst decompose the limiting NTK Θ(L) recursively, relate its positive-
deﬁniteness to that of the activation kernels, then show that the positive-deﬁniteness of the activation
kernels at level 2 implies that of the higher levels, and ﬁnally show the positive-deﬁniteness at level 2
using Lemma 2 and Theorem 3:
1. Observe that for any L ≥1, using the notation of Theorem 1, we have
Θ(L+1) = ˙Σ(L)Θ(L) + Σ(L+1).
Note that the kernel ˙Σ(L)Θ(L) is positive semi-deﬁnite, being the product of two positive
semi-deﬁnite kernels. Hence, if we show that Σ(L+1) is positive-deﬁnite, this implies that
Θ(L+1) is positive-deﬁnite.
2. By deﬁnition, with the notation of Proposition 1 we have
Σ(L+1) (x, x′) = Ef∼N(0,Σ(L)) [σ (f (x)) σ (f (x′))] + β2.
This gives, for any collection of coefﬁcients c1, . . . , cd ∈R and any pairwise distinct
x1, . . . , xd ∈Rn0, that
d
X
i,j=1
cicjΣ(L+1) (xi, xj) = E


 X
i
ciσ (f (xi))
!2
+
 
β
X
i
ci
!2
.
Hence the left-hand side only vanishes if P ciσ (f (xi)) is almost surely zero. If Σ(L) is
positive-deﬁnite, the Gaussian (f (xi))i=1,...d is non-degenerate, so this only occurs when
c1 = · · · = cd = 0 since σ is assumed to be non-constant. This shows that the positive-
deﬁniteness of Σ(L+1) is implied by that of Σ(L). By induction, if Σ(2) is positive-deﬁnite,
we obtain that all Σ(L) with L ≥2 are positive-deﬁnite as well. By the ﬁrst step this hence
implies that Θ(L) is positive-deﬁnite as well.
3. By the previous steps, to prove the proposition, it sufﬁces to show the positive-deﬁnitess of
Σ(2) on the unit sphere Sn0−1. We have
Σ(2) (x, x′) = E(X,Y )∼N(0,˜Σ) [σ (X) σ (Y )] + β2
where
˜Σ =

1
n0 + β2
1
n0 xT x′ + β2
1
n0 xT x + β2
1
n0 + β2

.
A change of variables then yields
E(X,Y )∼N(0,˜Σ) [σ (X) σ (Y )] + β2 = ˆµ
n0β2 + xT x′
n0β2 + 1

+ β2,
(1)
where ˆµ : [−1, 1] →R is the dual in the sense of Lemma 2 of the function µ : R →R
deﬁned by µ (x) = σ

x
q
1
n0 + β2

.
18

4. Writing the expansion of µ in Hermite polynomials (hi)i≥0
µ =
∞
X
i=0
aihi,
we obtain that ˆµ is given by the power series
ˆµ (ρ) =
∞
X
i=0
a2
i ρi,
Since σ is non-polynomial, so is µ, and as a result, there is an inﬁnite number of nonzero
ai’s in the above sum.
5. Using (1) above, we obtain that
Σ(2) (x, x′) = ν
 xT x′
,
where ν : R →R is deﬁned by
ν (ρ) = β2 +
∞
X
i=0
ai
n0β2 + ρ
n0β2 + 1
i
,
where the ai’s are the coefﬁcients of the Hermite expansion of µ. Now, observe that by the
previous step, the power series expansion of ν contains both an inﬁnite number of nonzero
even terms and an inﬁnite number of nonzero odd terms. This enables one to apply Theorem
3 to obtain that Σ(2) is indeed positive-deﬁnite, thereby concluding the proof.
Remark 5. Using similar techniques to the one applied in the proof above, one can show a converse
to Proposition 2: if the nonlinearity σ is a polynomial, the corresponding NTK Θ(2) is not positive-
deﬁnite Sn0−1 for certain input dimensions n0.
19

