See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/267810033
Semantic Web Approach to the GitHub Database Processing
Article  in  Lecture Notes on Software Engineering · November 2015
DOI: 10.7763/LNSE.2015.V3.201
CITATIONS
0
READS
173
2 authors, including:
Some of the authors of this publication are also working on these related projects:
Theoretical and Applied Informatics. Vol.2014, No 26 View project
Erasmus+ project: Innovative Open Education on IoT: improving higher education for European digital global competitiveness IOT-OPEN.EU View project
Piotr Czekalski
Silesian University of Technology
37 PUBLICATIONS   69 CITATIONS   
SEE PROFILE
All content following this page was uploaded by Piotr Czekalski on 22 June 2016.
The user has requested enhancement of the downloaded file.

 
 
 
Abstract—Despitethe vast choice of RDFS (resource 
description framework schema) vocabularies being published in 
projects like LOV (Linked Open Vocabularies), there are still 
areas for which proper ontology has to be developed. GitHub, 
being both a reliable source of open Git repositories and a social 
platform, introduces new termsfor which no proper description 
by means of the Semantic Web has been made yet. This paper 
regards every aspect of introducing a new set of semantic data: 
extracting the data, creating or refining the vocabulary, and 
possible ways to operate on properly integrated data set using 
SPARQL (SPARQL protocol and RDF query language). 
Authors of the paper would like to present a methodology of 
developing a unique RDFS vocabulary. Having this vocabulary, 
data extracted from GitHub can be described bythe use of new 
terms as well as those from well-established ontologies, such as 
SIOC (semantically-interlinked online communities), DOAP 
(description of a project) or DC (dublin core). 
 
Index Terms—GitHub, RDF, semantic web, semantic, 
SPARQL, vocabulary, WEB 3.0. 
 
I. INTRODUCTION 
The amount of data stored and provided to users through 
the WEB has exceeded the reasonable size years ago. The 
repositories are the case as well, because they are used not 
only in ICT market but more and more often for document 
editing and teamwork on a daily basis. Whether a user seeks 
particular content, browses related social data, manages the 
projects or searches for relation among various properties 
and files in the repository or even estimates programmer’s 
productivity, processing the huge amount of the repository 
data with ease is essential. Here is where semantic 
presentation and semantic approach comes in handy.  
One of the most popular and available systems present 
currently over the WEB is GitHub. The base for operating 
GitHub is Git, a distributed revision control and source code 
management system. What makes GitHub special is that it 
provides a web user interface for browsing its database. It 
provides several functionalities, such as a user activity 
overview, follower system, or organizations that also make it 
a social platform of its own. Basic relations between data 
gathered by GitHub are presented by the platform itself. On 
the other hand, GitHub API provides a means of extracting 
the data and presenting it in a different, perhaps semantically 
 
Manuscript received June 13, 2014; revised August 19, 2014. This 
publication was supported by the Human Capital Operational Programme 
and was co-financed by the European Union from the financial resources of 
the European Social Fund, project no. POKL.04.01.02-00-209/11. 
The authors are with the Faculty of Automatic Control, Electronics and 
Computer Science, Silesian University of Technology, Gliwice, Poland 
(e-mail: piotr.czekalski@polsl.pl, micekpwl@gmail.com). 
cleaner, way. 
RDF is a standardized way to do so. It is intended for 
situations in which information on the WEB needs to be 
processed and thoroughly understood by applications [1]. 
The format itself yields large overhead of information; 
however, semantic correctness of the dataset should be 
considered more important nowadays. Whenever the amount 
of sent metadata becomes a problem, another means of 
sending and processing it by third-party applications, e.g. 
JSON (JavaScript Object Notation), can be used. 
Currently, no vocabulary describing unique ideas of 
GitHub has been published in open dictionary databases. 
However, there exist some classes and descriptions which 
may be reused. DOAP (Description of a Project) vocabulary 
describes terms strictly connected with version control layer: 
programming languages, repositories, project names, project 
pages, whereas SIOC (Semantically-Interlinked Online 
Community) and FOAF (Friend of a Friend) describe social 
platform terms, such as: user account, user ID, e-mail [2], [3]. 
 
II. EXTRACTING STRUCTURED DATA FROM GITHUB 
A. Structured Data Model 
Data is extracted from the GitHub database by means of 
theGitHub API with the use of an open source C# library - 
Octokit.net. The API itself is accessed over HTTPS and the 
data is both sent and received as JSON [4]. The number of 
requests per hour is limited; however, it is sufficiently high to 
obtain a representative dataset. The amount of gathered data 
can be further increased with the use of conditional requests 
and queries optimization.  
The exemplary HTTP responsefrom the API server is 
shown in the code snippet below.   
$ curl -i https://api.GitHub.com/users/octocat/orgs 
HTTP/1.1 200 OK 
Server: nginx 
Date: Fri, 12 Oct 2012 23:33:14 GMT 
Content-Type: application/json; charset=utf-8 
Connection: keep-alive 
Status: 200 OK 
ETag: "a00049ba79152d03380c34652f2cb612" 
X-GitHub-Media-Type: GitHub.v3 
X-RateLimit-Limit: 5000 
X-RateLimit-Remaining: 4987 
X-RateLimit-Reset: 1350085394 
Content-Length: 5 
Cache-Control: max-age=0, private, must-revalidate 
X-Content-Type-Options: nosniff 
Objects in JSON represent four main concepts of GitHub 
Semantic Web Approach to the GitHub Database 
Processing 
Piotr Czekalski and Paweł Micek 
Lecture Notes on Software Engineering, Vol. 3, No. 4, November 2015
263
DOI: 10.7763/LNSE.2015.V3.201

 
 
system, namely: 
 Repositories – every repository has its name (obligatory, 
shortened one), ID, and owner, being a user or an 
organization. Additional attributes (see Fig. 1), such as 
description or homepage URL, can also be specified. 
 Commits – every commit to a repository is identified by its 
unique SHA token. Additionally, the object contains 
information about the author and the date of the commit. 
 Users – the user object contains information about a user’s 
account, i.e. their login and ID. Further information about 
their activity, especially the list of repositories a user 
participates in, allows creating connections between 
users. 
 Organizations – GitHub allows the creation of 
organization accounts, which are, similarly to user 
accounts, described by login and ID. Moreover, an 
organization can be the owner of a repository. 
 
 
Fig. 1. The structure of an exemplary received repository object in JSON. 
 
Access to the database is also limited by the way it is 
achieved. The list of all open repositories cannot be simply 
iterated, thus the dataset is accessible only on specific 
demands, e.g. by querying specific repository ID or searching 
for a given repository description. However, semantic data 
approach is suitable for an instantly and non-linearly growing 
dataset. 
B. Internal Structure of the Program 
Octokit.net library, while being still in early stages of 
development, 
provides almost 
a full reflection of 
functionalities provided by the API [5]. The structure of 
classes and methods resembles documentation of the GitHub 
API presented on the webpage. After a connection is set, data 
can be extracted from the JSON structured response. 
The response is interpreted by Octokit.net internal routines 
(see Fig. 2) and then stored in memory for the time of 
operation of the program. Such data can be used to create 
RDF structures: 
 Triples, in the form: Subject + Predicate + Object 
  Quadruples (being, in fact, triples embedded in aspecified 
context to avoid duplicates), in the form: Context + 
Subject + Predicate + Object 
 Graphs – storing lists of triples. Triples can be freely 
added and removed. Moreover, basic set operations, such 
as unions and intersections between two graphs, are 
allowed. 
 Stores – analogously to graphs, stores contain lists of 
quadruples. 
 Containers -- storing a group of homogeneous items (RDF 
literals or RDF resources) with the possibility of adding 
further elements to it [6]. 
 Collections – similarly to containers, storing a group of 
items, without the possibility of further changes. 
 
 
Fig. 2. Technologies used to extract structured GitHub data and serialize it as 
semantic dataset. 
 
Semantic data, originally saved as triples with use of 
RDFSharp library, can be exported to text files [7]. Although 
the library provides several types of syntax, we use 
RDF/XML, as it is a widely supported format [8]. Files with 
serialized triples grouped into collections describing 
repositories can be further processed. To ensure correctness 
of the content, data types of every field are explicitly declared 
and checked by RDFSharp internal routines. Exemplary 
serialized triples are shown in the snippet below. 
<rdf:Description 
rdf:about="https://GitHub.com/12meses12katas/Enero
-String-Calculator"> 
<dcterms:created 
rdf:datatype="http://www.w3.org/2001/XMLSchema#dat
eTime">2011-01-14T09:31:27</dcterms:created> 
<doap:descriptionrdf:datatype="http://www.w3.org/2
001/XMLSchema#string">Kata del mes de Enero del 2011: 
String Calculator</doap:description> 
<doap:homepage 
rdf:datatype="http://www.w3.org/2001/XMLSchema#str
ing">www.12meses12katas.com</doap:homepage> 
<sioc:id 
rdf:datatype="http://www.w3.org/2001/XMLSchema#int
eger">1253909</sioc:id> 
<doap:programming-language 
rdf:datatype="http://www.w3.org/2001/XMLSchema#str
ing">PHP</doap:programming-language> 
<doap:name 
rdf:datatype="http://www.w3.org/2001/XMLSchema#str
ing">Enero-String-Calculator</doap:name> 
</rdf:Description> 
 
III. DEVELOPING SPECIFIC ONTOLOGY 
The ontology designed for describing data mined from 
GitHub incorporates existing vocabularies, such as DOAP, 
Lecture Notes on Software Engineering, Vol. 3, No. 4, November 2015
264

 
 
accessible and understandable for awider choice of 
third-party agents [9]. Moreover, new elements of 
vocabulary are introduced to express connections and objects 
not described earlier. The new ontology describes ideas 
strictly connected to GitHub, especially the system being its 
heart, Git. 
 
 
Fig. 3. An exemplary list of triples produced bydoap:repository subject. 
 
The main goal is to create a vocabulary specific enough to 
describe the dataset properly and minimalistic enough, using 
vocabulary imports and extensions, to avoid duplication of 
attributes and classes [10]. 
 
TABLE I: SCHEMA METADATA FIELDS 
Element 
Description 
voaf:Vocabulary 
Type of the resource which 
describes the vocabulary 
vann:preferredNamespacePrefix 
Gh 
vann:preferredNamespaceUri 
Location of the namespace: 
http://www.piotrczekalski.pl/ns/g
h 
dc:title 
Main vocabulary label: GitHub 
vocabulary (gh) 
dc:description 
The GitHub (gh) vocabulary, 
described using W3C RDF 
Schema and the Web Ontology 
Language. (note:  descriptions in 
other languages may be added) 
dc:issued 
Date of the first vocabulary 
publication: 2014-06-19 
dc:modified 
Last vocabulary modification date 
owl:versionInfo 
The current version of the 
vocabulary: 1.0 (note: additional 
comment with rdfs: comment tag 
can be added to explain last 
changes) 
dc:rights 
The property rights of the 
vocabulary – additional cc:license 
property may come in handy 
dc:creator 
Creator(s) of the vocabulary: Piotr 
Czekalski, PawełMicek (note: 
each creator can be a foaf:Person 
entity with all personal 
information included) 
 
The FOAF vocabulary is designed to establish a 
decentralized language for describing personal and 
professional interests and social network linkage. We 
focused on the first part particularly, using FOAF to describe 
only basic personal attributes, e.g. name or homepage of a 
person. A special distinction between a person and a user 
account has to be made, as – theoretically – one person can 
create multiple accounts. This is where SIOC vocabulary 
comes in handy. Using SIOC, we can describe terms strictly 
related to GitHub as a social platform or, more precisely, 
online community. A user is explicitly defined as an entity 
distinct from a person, having an avatar, associated e-mail, 
ID etc.  
To describe attributes related to repositories, DOAP 
vocabulary is used. It contains classes and attributes suitable 
for a description of a project in general;however, it lacks 
terms specific to GitHub as an open repository platform. 
Aforementioned vocabularies are the base for the new 
RDF vocabulary. Although some attributes may be 
duplicated, the creator of a new vocabulary has the right to do 
so. Semantic data must be specific in the given context after 
all. 
A new vocabulary should contain metadata describing the 
vocabulary itself [11]. A list of recommended properties is 
presented below (see Table I). Note the usage of various 
external vocabularies. 
Having all necessary metadata of the vocabulary specified, 
we could add what is the main content of the schema – 
definitions of classes and properties (see Table II). 
 
TABLE II: SCHEMA DEFINITION FIELDS 
Element 
Description 
rdfs:label 
Element main title, e.g. 
gh:Commit(note: title may be 
specified for more languages) 
 
rdfs:comment 
Role of the element (also may be 
specified for more languages) 
 
rdfs:isDefinedBy 
Explicit link between an element 
and the namespace itbelongs to 
 
vs:term_status 
Element status, e.g. stable or 
testing(note: in case of deprecated 
elements dc:isReplacedBy may be 
used to identify the new element to 
replace the deprecated one) 
 
 
 
IV. ACCESSING THE DATASET 
When serializing large amount of data, further 
optimizations concerning the size of the output files can be 
done. To reduce the overhead, several namespaces can be 
introduced with the use of xmlns attribute, so that the 
addresses of the vocabularies are not repeated. Special 
attention has to be paid to the risk of occurring naming 
conflicts. 
In our particular case, a dataset is described using several 
vocabularies, including a new one.When accessing the 
dataset, prefixes have to be specified. 
 
PREFIX doap: <http://usefulinc.com/doap/ns/doap> 
PREFIX foaf: <http://xmlns.com/foaf/0.1/> 
PREFIX gh: <http://www.piotrczekalski.pl/ns/gh> 
PREFIX sioc: <http://rdfs.org/sioc/ns> 
SELECT * WHERE {  
 ?x doap:name ?name . 
 ?x doap:homepage ?homepage . 
 ?x sioc:id ?id . 
} 
 
The above example shows a basic SPARQL query listing 
Lecture Notes on Software Engineering, Vol. 3, No. 4, November 2015
265
SIOC or FOAF (see Fig. 3). It makes the semantic data 

 
 
all repositories having a homepage address specified.  
 
V. CONCLUSIONS AND FUTURE WORKS 
As the Web of data is growing, more attention has to be 
paid to organizing the data not only at the level of a single 
database, but also at a higher level of metadata. This is where 
Linked Open Data project comes in handy [12]. The quality 
of such data is improved by connecting related data that was 
not previously linked. However, to make this project possible, 
every creator of vocabulary has to follow recommendations 
specified by vocabulary aggregates (such as LOV). Another 
important aspect is the maintenance of the vocabulary: it is 
recommended that the author hosts the vocabulary schema 
and updates it to fit changing properties of the dataset. 
Authors of the paper would like to extend or update 
created vocabulary, according to possible changes to the 
structure of GitHub services in the future. GitHub is a living 
project, thus certainly such changes will be needed. That is 
clearly one of the challenges a creator of a vocabulary has to 
face. 
REFERENCES 
 
 
 
 
 
 
 
 
 
 
 
[9] 
T. B. Lee, J. Hendler, and O. Lassila, “The semantic web,” Scientific 
American, vol. 284, no. 5, 2001, pp. 28-37. 
[10] J. Hunter and C. Lagoze, “Combining RDF and XML schemas to 
enhance interoperability between metadata application profiles,” in 
Proc. the 10th international conference on World Wide Web, 2001, pp. 
457-466. 
[11] P. Y. Vandenbussche and B.Vatant, “Metadata recommendations for 
linked open data vocabularies,” vol. 1, 2011. 
[12] C. Bizer, T. Heath, and T. Berners-Lee, “Linked Data – the story so 
far,” Int. J. Semantic Web Inf. Syst., vol. 5, no. 3, 2009, pp. 1-22. 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Lecture Notes on Software Engineering, Vol. 3, No. 4, November 2015
266
[1]
G. Schreiber and Y. Raimond. (February 25, 2014). W3C Working 
Group Note. [Online]. Available: http://www.w3.org/TR/rdf11-primer/
[2]
M. Russell, Mining the Social Web, 2nd Edition, Data Mining 
Facebook, Twitter, LinkedIn, Google+, GitHub, and More, O'Reilly 
Media, 2013
[3]
A. Gomez-Perez, M. Fernández-López, and O. Corcho, Ontological 
Engineering, vol. 139, Heidelberg: Springer, 2004.
[4]
GitHub, Inc.
GitHub API v3 overview. [Online]. Available: 
http://developer.GitHub.com/v3/
[5]
GitHub, Inc. Octokit libraries official website. [Online]. Available: 
http://octokit.GitHub.io/
[6]
D. Brickley and R. V. Guha. (February 25, 2014). RDF Schema 1.1.
W3C 
Recommendation. 
[Online]. 
Available: 
http://www.w3.org/TR/2014/REC-rdf-schema-20140225/
[7]
RDF
sharp 
library 
overview. 
[Online]. 
Available: 
http://rdfsharp.codeplex.com/
Piotr Czekalski was born in Zabrze on 8th March 
1975. He graduated from 1st Comprehensive High 
School in Gliwice and started engineering and master 
degree studies at the Silesian University of 
Technology in Gliwice, Poland. In 1999 he received
his master of science, engineer titled on computer 
science (graduated with distinction) and then 
continued doctorate degree course in the same place. 
In 2004, Piotr finished his dissertation on automatic knowledge learning 
using hybrid fuzzy-evolutionary systems in Silesian University of 
Technology, Institute of Computer Science, Gliwice, Poland.
By the research, he continued his educational and commercial career, 
cooperating actively with corporate partners including Sygnity (formerly 
Computerland), Kamsoft, Tauron, Ernst and Young and others. The main 
research activity related to the AI hybrid technologies, particularly fuzzy and 
evolutionary ones, innovative user interfaces and automation control resulted 
in the following papers (among others): Evolution-fuzzy rule based system 
with parameterized consequences(ZielonaGóra, AMCS, 2006), Touch-Less 
Java Based Hand Tracking System to Control an Artificial Arm (Switzerland, 
Trans Tech Publications, 2014), SMAC - Dataflow and Storage Modeling for 
Remote Personnel Identification in Restricted Areas (Kuala Lumpur, 
Springer, 2013).
Paweł Micek was born in Ruda Śląska on 14th October 
1992. He graduated from Comprehensive High School 
in Ruda Śląska and started engineering studies at the 
Silesian University of Technology in Gliwice, Poland. 
He is a student of the macrocourse on automatic 
control 
and 
robotics, 
electronics 
and 
telecommunication, and computer science.
His 
research interests include software engineering, data 
analysis and web applications development. Currently, he is working on his 
final year engineering project of a webcam time-lapse video observation 
website.
[8]
S. Decker, S. Melnik, F. Van Harmelen, D. Fensel, M. Klein, J. 
Broekstra, and I. Horrocks, “The semantic web: The roles of XML and 
RDF,” IEEE Internet Computing, vol. 4, no. 5, pp. 63-73, 2000.
View publication stats
View publication stats

