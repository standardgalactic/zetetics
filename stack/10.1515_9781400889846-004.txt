2
⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄⋄
WHAT IS A COMPUTER PROGRAM?
Programs are independent of their realization in machines; ...the
same program could be realized by an electronic machine, a Cartesian
mental substance, or a Hegelian world spirit.
— John Searle, Minds, Brains, and Programs (1980)
T
he main point of this book is to analyze what can be computed by computer
programs. Therefore, it might seem important to agree on a clear deﬁnition of
“computer program” before we start. Surprisingly, the precise deﬁnition doesn’t
matter much. As we will see in chapter 5, it turns out that different types of
computers, and different types of programs written in different programming
languages, are all equivalent in terms of which problems they can solve.
Most of the time, however, it will be useful to focus our attention on a much
more speciﬁc class of programs. This will make it easier to understand and prove
concrete facts about programs, and to give meaningful examples. Throughout
the book, therefore, we will focus on the class of Python programs. In principle,
the ideas in the book apply equally well to other programming languages. But
we need to choose one speciﬁc language for our examples, and in this text
we use Python for that. The online materials also give Java versions of all the
programs.
For our purposes, a Python program is a program written in the Python
programming language and saved in a single ﬁle. A more formal deﬁnition of
Python programs will be given in section 2.5. But at this point, we need to pause
for a detour through the basics of running and editing Python programs.
2.1 SOME PYTHON PROGRAM BASICS
Typically, the name of a Python program ﬁle ends in “.py”. Our ﬁrst example
is containsGAGA.py, which you can download with the online materials for
the book. The contents of this ﬁle are given in ﬁgure 2.1. The purpose of
containsGAGA.py is to examine an input string, returning “yes” if the input
contains “GAGA” as a substring, and “no” otherwise.

16
•
2 What is a computer program?
import utils; from utils import rf
2 def containsGAGA(inString):
if 'GAGA' in inString:
4
return 'yes'
else:
6
return 'no'
Figure 2.1: The Python program containsGAGA.py.
Like many of the examples in this book, containsGAGA.py is intended
to operate on genetic strings—that is, strings containing the four letters C, G,
A, T that represent the possible bases present in a fragment of DNA. Usually,
these examples have no real biomedical signiﬁcance. In the particular case of
containsGAGA.py, for example, it’s unlikely there is any real application
in genetics or medicine that requires the detection of the substring GAGA.
Nevertheless, we will frequently use genetic strings in our examples, purely to
add the ﬂavor of practicality. Because real-life genetic strings can be billions of
characters long, this will also remind us that we want our programs to work on
inputs of any ﬁnite length, not just the tiny inputs that can easily be discussed on
the pages of this book.
Let’s get back to some Python basics. The next few paragraphs give the
minimal background and instructions needed to understand and run Python
programs for this book. If you don’t already know some Python, it would be
a good idea at this point to stop reading, and spend an hour or two working
through an online tutorial. Excellent introductions are available at the ofﬁcial
Python site, www.python.org.
Here’s a quick explanation of the code in ﬁgure 2.1. Line 1 imports some
utilities that we’ll use later. Line 2 deﬁnes a Python function, using the Python
keyword def. The name of the function is containsGAGA, and the function
receives a single parameter, called inString (an abbreviation of “input string”).
The function uses an if statement to check whether the string GAGA occurs as a
substring anywhere in inString, returning yes or no as appropriate. Searching
for substrings is particularly easy in Python, using the in keyword (see line 3).
Note the absence of curly braces, {}, which are used to surround blocks of code
in other languages like Java and C++. In Python, blocks of code are identiﬁed
purely by indentation. Also note the use of single quotes to surround strings, as
in 'GAGA'. In fact, Python lets you use single or double quotes (e.g., "GAGA"),
but single quotes are more common.
To run this program, install a recent version of Python (preferably, version 3
or higher), which is freely available for all common operating systems at
www.python.org. The installation comes with a program called IDLE, which
can be used to edit and run Python programs. Launch IDLE; this will open a
window and display an introductory message, followed by a prompt where you
can type input. The prompt looks like this:
>>>
Let’s call this window the shell window. From the shell window, use the
File|Open menu to open the ﬁle containsGAGA.py. The ﬁle appears in a

2.1 Some Python program basics
•
17
new window that we’ll call the code window. In the code window, hit F5 (or
equivalently, choose Run Module from the Run menu). This does two things:
(i) it restarts the Python interpreter, wiping out anything that may have been
placed in memory by previously entered commands, and (ii) executes the code in
the code window. In particular, the Python function containsGAGA() is now
loaded into Python’s table of available functions, and is ready for use. Try it out
now:
>>> containsGAGA('CTGAGAC')
Once you have got this working (you should see the output yes), try it with
a few different input strings. Convince yourself that the outputs (yes or no)
are correct for every input. And note this important time-saving tip: use Ctrl+P
or Alt+P (depending on your operating system) to cycle through your history
of commands. You can edit previous commands too. This saves a great deal of
typing.
Editing and rerunning a Python program
Next, make a small change to containsGAGA.py. For example, change the
outputs to be yep and nope. Do this by editing the code directly in the code
window. Save the ﬁle, then reload it (hit F5). Go back to the shell window and
verify that your changes worked.
Running a Python program on input from a ﬁle
Suppose we want to ﬁnd out if a genetic string that is thousands, millions, or
billions of characters long contains the substring GAGA. It’s obviously not going
to be practical to paste our input string into the shell window. A better way
to do this is to read the string directly from a ﬁle. The materials for this book
include a ﬁle called utils.py, which contains many useful utilities, including
a function that lets us read the contents of a ﬁle into a string. Every program
provided with this book imports these utilities before doing anything else (see
line 1 of containsGAGA.py). So the utilities will always be available, provided
you have ﬁrst loaded one of the book’s program ﬁles.
In particular, there is a function called utils.readfile() that reads the
entire contents of a ﬁle and returns it as a string. In the online book materials,
there is a ﬁle called geneticString.txt. This ﬁle contains a genetic string that
is 2093 characters long. We can store the ﬁle’s contents in a string variable using
>>> longString = utils.readFile('geneticString.txt')
Because utils.readfile() is needed so often, we provide “rf()” as a
convenient abbreviation for it—that’s the purpose of the code fragment “from
utils import rf” in line 1 of containsGAGA.py. So the previous command
can be rewritten as
>>> longString = rf('geneticString.txt')
Try it now, and also use print(longString) to see the genetic string itself.

18
•
2 What is a computer program?
Next, we can easily ﬁnd out whether this genetic string contains “GAGA”:
>>> containsGAGA(longString)
Of course, this could have been done more compactly in a single line:
>>> containsGAGA(rf('geneticString.txt'))
Running more complex experiments on Python programs
Ideally, readers will have fun experimenting with the provided Python programs
and with creating new Python programs too. As you become more experienced
with Python, you may choose to switch to a more advanced development
environment. IDLE is designed to be easy for beginners, but lacks some features
preferred by professional software developers. So, feel free to adopt whatever
technology you wish. But at a minimum, you need a way of easily experimenting
with Python. Here’s one way to do that. From IDLE’s shell window, create a new
ﬁle by choosing File|New. Save the ﬁle as temp.py, in the same folder as the
online book materials. To make the utilities and containsGAGA() available,
enter the following lines:
import utils
from utils import rf
from containsGAGA import *
These variants of the import command have slightly different effects. The
import variant makes all functions in utils.py available, but their names must
be preﬁxed by “utils.”, as in utils.writefile(). The from variant lets you
use imported functions, without requiring any preﬁx. With from, you can import
speciﬁc functions (e.g., rf) or use * to import all functions from a ﬁle.
Next, add some more commands to temp.py, so that you can conduct an
experiment with containsGAGA(). For example, you could add the following
lines:
shortString = 'CTGAGAC'
print('short string result:', containsGAGA(shortString))
longString = rf('geneticString.txt')
print('long string result:', containsGAGA(longString))
If you then save the ﬁle and hit F5, the two results of the containsGAGA()
calls are printed in the shell window. By editing and adding to temp.py, you can
expand and improve your experiment without having to retype commands in the
shell window.
2.2 SISO PYTHON PROGRAMS
Notice that the containsGAGA function receives a string parameter as input,
and returns a string (“yes” or “no”) as output. Any Python function that receives
string parameters as input and returns a string value as output is called a SISO
function. (SISO is an acronym of String In, String Out.) Usually, we will deal

2.2 SISO Python programs
•
19
def multiplyAll(inString):
2
# split on whitespace
numbers = inString.split()
4
# convert strings to integers
6
for i in range(len(numbers)):
numbers[i] = int(numbers[i])
8
# compute the product of the numbers array
10
product = 1
for num in numbers:
12
product = product * num
14
# convert the product to a string, and return it
productString = str(product)
16
return productString
Figure 2.2: The Python program multiplyAll.py.
with SISO functions that take exactly one string parameter, but we’ll sometimes
also consider SISO functions with multiple string parameters.
The formal deﬁnition of a “Python program” will be given in section 2.5. Until
then, let’s think of a Python program as just a single .py ﬁle containing one
or more Python functions. The ﬁrst function in the program is called the main
function. Programs with a SISO main function are called SISO Python programs.
In this book, the main function of every Python program will be a SISO function.
In fact, because every Python program in the book is a SISO program, the word
SISO is unnecessary, and we will usually omit it. So from now on, we use “Python
program” and “SISO Python program” interchangeably.
This SISO requirement may seem strange or unnecessarily restrictive. After
all, many computer programs deal with numbers, not strings. The reason for
restricting to SISO programs is that it simpliﬁes our analysis of what can be
computed. But in fact, the restriction is only a superﬁcial one. The next example
shows how to convert between numbers and strings in Python. And much more
complicated objects (e.g., graphs) can also be described by strings—look ahead to
ﬁgure 4.3 (page 48) for an example of this.
Let’s now examine how SISO programs can compute numerical results.
Figure 2.2 shows the listing for multiplyAll.py, a SISO program that com-
putes the product of a list of numbers. (Note that this listing omits the ﬁrst line,
“import utils; from utils import rf”. From this point on, listings
will usually omit import statements and certain other kinds of “plumbing”
code.) Here’s an explanation of multiplyAll.py, assuming we provide “5 8
3” as the input parameter:
• Line 1: The parameter inString is “5 8 3”.
• Line 3: inString gets split into an array of strings, using the split()
method for Python strings. By default, split() splits on whitespace, which
means that any combinations of space, newline, and tab characters are used

20
•
2 What is a computer program?
from containsGAGA import *
2 def containsGAGAandCACAandTATA(inString):
if containsGAGA(inString)=='yes' and \
4
containsCACA(inString) and \
containsTATA(inString):
6
return 'yes'
else:
8
return 'no'
10 def containsCACA(searchString):
return containsSubstring(searchString, 'CACA')
12
def containsTATA(searchString):
14
return containsSubstring(searchString, 'TATA')
16 def containsSubstring(searchString, subString):
if subString in searchString:
18
return True
else:
20
return False
Figure 2.3: The Python program containsGAGAandCACAandTATA.py.
as separators. As a result, after line 3 has been executed, numbers is a three-
element array containing the three strings “5”, “8”, and “3”.
• Lines 6–7: Each element of the numbers array is converted from a string to
an integer, using the built-in Python function int().
• Lines 10–12: Compute the product of all values in the numbers array.
• Line 15: Convert the integer product into a string, using the built-in
Python function str().
• Line 16: Return the answer as a string of digits, “120”.
As you can see, it’s trivial to convert between strings and integers using the
built-in functions int() and str(). So this SISO function works with strings
on the surface, but deals with numbers under the covers.
Programs that call other functions and programs
One of the most powerful ideas of modern programming languages is that
functions or methods can call other functions or methods, which in turn call
other functions or methods, and so on. Figure 2.3 illustrates these possibilities
with a slightly silly example: the Python program containsGAGAandCACA-
andTATA.py. This program imports containsGAGA() from another ﬁle, and
provides additional functions containsCACA(), containsTATA(), and con-
tainsSubstring() below the main function. These last three functions return
Boolean values, demonstrating that non-main functions do not have to be SISO.
Figure 2.3 also introduces one new feature of Python: excessively long lines
can be continued onto a new line using the “\” character. This can be seen at

2.3 ASCII characters and multiline strings
•
21
line 5: this line and the two previous ones constitute a single “virtual” line, as far
as the Python interpreter is concerned.
2.3 ASCII CHARACTERS AND MULTILINE STRINGS
In this book, we will often use a set of characters known as ASCII, which is
an acronym for American Standard Code for Information Interchange. ASCII
is a standard set of 128 characters often used in storing and transmitting text
ﬁles. For example, in some word-processing programs, when you choose the
“Save As” menu option and select the .txt ﬁle format, your document is
saved as a sequence of ASCII characters. The ASCII character set includes all
the letters, digits, and punctuation characters that appear on English keyboards
(including !@#$%^&*()-\/"'_~|+,.<>?=), as well as the space character, the
tab character, and two variants of the newline character. These last-mentioned
characters (space, tab, newlines) are collectively known as whitespace. Sometimes
we’ll use “ ” to represent a newline character within a string. For example,
the string “a b c” represents the letters a, b, and c printed on separate lines.
Within a Python program itself, a newline character can be represented by the
special character combination “\n”. Look ahead to countLines.py (ﬁgure 2.4,
page 22) for an example of this. One other technicality needs to be mentioned:
strictly speaking, Python uses a character set called Unicode, which includes ASCII
as a subset but incorporates many thousands of other characters too. This book,
however, avoids Unicode. Our programs and strings will be restricted to the
128 ASCII characters, with some minor exceptions that will be clearly noted.
The fact that ASCII includes space and newline characters is extremely useful.
It means that we can think of large, multiline blocks of text as being single strings.
Thus, the following excerpt from T. S. Eliot’s poem The Waste Land is a single
ASCII string:
Here is no water but only rock
Rock and no water and the sandy road
The road winding above among the mountains
Which are mountains of rock without water
For us, the main importance of strings is that they can be used as the inputs and
outputs of computer programs. For example, the excerpt above could be used as
the input to a computer program that counts the number of lines (output: 4), or
ﬁnds the longest word (output: mountains). See ﬁgure 2.4 for implementations
of these two examples. Test them out now using the ﬁle wasteland.txt
provided with the online book materials:
>>> countLines(rf('wasteland.txt'))
>>> longestWord(rf('wasteland.txt'))
The programs in ﬁgure 2.4 demonstrate another feature of the Python
examples used in this book. Generally speaking, the code presented here does
not strive for efﬁciency, and does not attempt to use typical, elegant Python
idioms. For example, countLines.py is rather inefﬁcient, because it creates
a new array containing all the lines of the input, rather than simply counting

22
•
2 What is a computer program?
def countLines(inString):
2
# split on newlines
lines = inString.split('\n')
4
# return the number of lines, as a string
return str(len(lines))
def longestWord(inString):
2
words = inString.split()
longest = ''
4
lengthOfLongest = 0
for word in words:
6
if len(word) > lengthOfLongest:
longest = word
8
lengthOfLongest = len(word)
return longest
Figure 2.4: The Python programs countLines.py and longestWord.py.
the newline characters in the input. As for longestWord.py, experienced
Python programmers will frown at the long-winded use of a for loop with two
local variables. In fact, this program can be written in only one or two lines
of elegant Python. But the “elegant” approach requires some more advanced
Python constructs, and we will avoid those advanced features when it makes
sense to do so. At all times, the emphasis will be on making the programs easy to
understand, especially for readers with little or no Python background. Elegance
and efﬁciency will often be sacriﬁced to achieve this goal.
2.4 SOME PROBLEMATIC PROGRAMS
Figure 2.5 presents ﬁve Python programs that are problematic in different ways—
either they don’t meet our deﬁnition of SISO Python programs, or they exhibit
some kind of behavior that we want to avoid. It’s important to understand what
makes each of these programs problematic. So, run each of the programs yourself,
in IDLE. You should observe the following behaviors:
• syntaxError.py: This program is not syntactically correct Python be-
cause the parentheses are not balanced at line 2. When you hit F5 to evaluate
the code, you get a message similar to “SyntaxError: unexpected EOF while
parsing.”
• noMainFunction.py: This program has no main function. Although it
is syntactically correct Python, it does not meet this book’s deﬁnition of a
Python program.
• throwsException.py: When you run this program on any input, the
result is a Python exception, because the program tries to divide by zero.
The precise output in this case is “ZeroDivisionError: division by zero.”
Python programs can throw many different kinds of exceptions. Real-world
Python software often uses exceptions in a beneﬁcial way. But in this book,

2.5 Formal deﬁnition of Python program
•
23
def syntaxError(inString):
2
return 2 * (3 + 5
import utils; from utils import rf
2 x = 5
y = 7
4 z = x + y
def throwsException(inString):
2
return 5 / 0
def infiniteLoop(inString):
2
x = 1
while x > 0:
4
x = x + 1
return str(x)
def returnsNumber(inString):
2
return 32
Figure 2.5: Five problematic Python programs: syntaxError.py,
noMainFunction.py, throwsException.py, infiniteLoop.py, and
returnsNumber.py.
throwing an exception is considered bad behavior and makes the output of
the program undeﬁned.
• infiniteLoop.py: The main function enters an inﬁnite loop and never
returns, so its output is undeﬁned.
• returnsNumber.py: Our deﬁnition of Python programs requires a SISO
main function. Here, the main function returns an integer. This would
be common in real-world Python software, but in this book the program
output is undeﬁned unless the main function returns a string.
2.5 FORMAL DEFINITION OF PYTHON PROGRAM
It’s now time to give a careful deﬁnition of SISO Python programs and their
outputs. These deﬁnitions can be skipped on ﬁrst reading; they are targeted at
readers who are interested in making the “practical” Python program approach
as rigorous as possible. If that goal doesn’t interest you, jump ahead to section 2.6
on page 25.
Our deﬁnitions will make use of a reference computer system, denoted C for
Computer. The reference computer C will be discussed in more detail below.
For now, you can imagine that C is a complete description of a real computer,
including the computer architecture, operating system, and ﬁle-system contents.
It might be easiest to imagine that C is your own laptop or desktop computer,
complete with the particular version of Python that you have chosen to install.

24
•
2 What is a computer program?
In general, it’s possible for real computer programs to produce different
outputs on different runs (e.g., by using a source of randomness, or accessing
some frequently changing data on the Internet, or using multiple threads that
get interleaved arbitrarily by the operating system). Programs that can produce
different outputs are called nondeterministic and will be studied in chapter 8.
In contrast, we call a program deterministic if its execution path is uniquely
determined by the state of C when the program begins executing. Programs in
this book are assumed to be deterministic unless stated otherwise.
With those technical details taken care of, we can launch into our formal
deﬁnitions:
Deﬁnition of a Python program. With respect to a reference computer
system C, a Python program is a string of ASCII characters P, such that
• P is syntactically correct Python;
• P deﬁnes at least one Python function (in which case the ﬁrst deﬁned
function is the main function).
We also need to deﬁne the output of a Python program. Our initial deﬁnition
assumes the main function has a single parameter; we will later describe how to
relax that requirement.
Deﬁnition of P(I), the output of a Python program. Let P be a Python
program with respect to a reference computer system C. Suppose P has
main function M, and let I be a string of ASCII characters that will be
used as input to P. The output of P on input I, written P(I), is produced
by using computer C to execute M with input I, then deﬁning P(I) as
follows:
• If M returns an ASCII string S, then P(I) = S.
• If M returns a Python object that is not an ASCII string, then P(I) is
undeﬁned.
• If M throws an exception on input I, then P(I) is undeﬁned.
• If M doesn’t terminate on input I, then P(I) is undeﬁned.
In plain English, P(I) is the string output by P’s main function on input I,
whenever this makes sense, and undeﬁned otherwise. The detailed deﬁnition
above gives the precise meaning of “whenever this makes sense.”
Note that the deﬁnition can easily be generalized for main functions that
receive multiple string parameters. We replace I with multiple strings I1, I2, . . . ,
and obtain a corresponding deﬁnition for P(I1, I2, . . .).
The above deﬁnitions of Python programs and their outputs work perfectly
well in practice, but from a mathematical point of view they might appear to
have some technical problems. What exactly do we mean by “syntactically correct
Python”? Does the deﬁnition depend on which computer and operating system
are used? Do different versions of Python produce different results? How do we
deﬁne the output if the computer crashes during execution? What if someone has
edited the Python library ﬁles, so that a statement such as “import sys” does
not import the expected functionality from the sys module? What if the Python
program runs out of memory?

2.6 Decision programs and equivalent programs
•
25
Ultimately, the correct way to answer all these questions is to deﬁne a
mathematical model of a completely abstract computer with ﬁxed, known
behavior. In chapter 5, we will meet the Turing machine, which is precisely the
kind of mathematical model needed. We will see that it’s always possible to think
of a Python program as a convenient representation of a Turing machine. So
any lack of rigor in real Python programs can be eliminated by considering the
underlying Turing machine instead.
But we would like to use Python programs as our computational model
whenever possible. What kind of computer systems should we imagine our
Python programs are running on? The short answer is, choose whatever hardware
and software conﬁguration you want, and then add as much memory as needed
to execute the program. This is the reference computer system C to which the
above deﬁnitions apply. In other words, whenever we prove a theoretical result
about a Python program, feel free to consider that we are really proving the
result for programs running on your computer, with your operating system, your
ﬁles, and your version of Python. When you examine the proof, you’ll ﬁnd that
none of our assumptions depend on the hardware architecture, Python version,
or any other speciﬁc details of the computing conﬁguration. It’s true that there
may be minor differences in output between different architectures, operating
systems, and Python versions. But our results will always hold, despite these
differences.
For example, the precise deﬁnition of “syntactically correct Python” is deter-
mined by the actual computer system C you have chosen to use. If prog.py
runs on your computer with no syntax errors, then it’s syntactically correct with
respect to your system. In some cases, prog.py might be syntactically correct on
your machine but incorrect on mine. However, any theorem that we prove about
Python programs in general will be true on your computer and my computer,
and for any other reasonable computer system C.
The problem of running out of memory is more fundamental, and we will
return to it in chapter 5 (see page 97). For now, just imagine that we can add as
much memory as needed to the computer system C.
2.6 DECISION PROGRAMS AND EQUIVALENT PROGRAMS
This section gives two important technical deﬁnitions about Python programs.
We will often need to analyze an important class of programs with particularly
simple outputs, known as decision programs.
Deﬁnition of a decision program. A decision program is a Python
program that always returns one of the two strings “yes” or “no”,
whenever the output is deﬁned.
For example, containsGAGA.py is a decision program, but multiplyAll.py,
countLines.py, and longestWord.py are not decision programs.
Decision programs are central to computational theory, so we have special
terminology for the outputs. If P(I) = yes, then P accepts I. If P(I) = no, then
P rejects I. For example, containsGAGA.py accepts “CTGAGAA” but rejects
“CCGA”.

26
•
2 What is a computer program?
We also need a notion of equivalence between Python programs. Two
programs are equivalent if for any given input, both programs produce the same
output. Formally,
Deﬁnition of equivalence of Python programs. Python programs P1
and P2 are equivalent if P1(I) = P2(I) for all strings I. For multiparameter
programs, we of course require P1(I1, I2, . . .) = P2(I1, I2, . . .).
Note that the deﬁnition of equivalence includes undeﬁned outputs: if P1 and P2
are equivalent, then P1(I) is undeﬁned if and only if P2(I) is undeﬁned.
2.7 REAL-WORLD PROGRAMS VERSUS SISO PYTHON PROGRAMS
Let us now return to the main topic of this chapter: What is a computer program?
The answer depends on your point of view. In real life, computer programs do
many wonderful things. They display graphics on the screen; they receive input
from keyboards, mice, and touchscreens; they send information to, and receive
information from, other computers on the Internet. However, the particular class
of programs analyzed in this book is much more restricted. Our programs will
always receive as input one or more strings of ASCII characters. And they will
always produce as output a single string of ASCII characters. These are the SISO
Python programs deﬁned in the previous section.
It may seem surprising, but we don’t lose much generality in restricting to
SISO programs. The reason is that ASCII strings can easily be converted to and
from binary strings. (Look ahead to page 50 if you’re curious about this.) And
all the input and output methods mentioned above (including keyboards, disks,
touchscreens, monitors, wireless networks, and wired networks) provide input
and output as binary strings. So it’s always possible to think of any computer
program as receiving exclusively ASCII string input, and providing exclusively
ASCII string output. Hence, in the remainder of this book, the phrase “computer
program” will refer only to SISO programs—but keep in mind that all our results
will apply equally well to programs with more general types of input and output.
Even if we restrict to SISO programs, however, there are at least three
different—but equivalent—answers to the question, what is a computer pro-
gram?:
1. The “Turing machine” deﬁnition. As already discussed on page 25,
Turing machines are the abstract models of computation that we will meet
in chapter 5. Because they are completely abstract, Turing machines are
well suited to rigorous mathematical proofs.
2. The “Python program” deﬁnition. On page 24, we gave a reasonably
formal deﬁnition of SISO Python programs, but it wasn’t completely
rigorous from a mathematical point of view. Python programs provide a
practical approach to discussing and analyzing computation, so we will
use Python programs as the main computational model in this book.
The equivalence of Python programs and Turing machines is discussed in
chapter 5.
3. The “anything reasonable” deﬁnition. It turns out that any other reason-
able deﬁnition of “computer program” is equivalent to the previous two!
That is, any piece of SISO computer code written in any programming

Exercises
•
27
language, and run on any existing computer (with as much memory
as necessary), is equivalent to some Python program and some Turing
machine.
When reading this book, it will help to keep all three of the above deﬁnitions
of computer program in mind. When proving theorems, we will use Python
programs or Turing machines, choosing whichever deﬁnition leads to the easiest
proof. But we should acknowledge that our deﬁnition of Python programs
doesn’t quite achieve the level of rigor required for formal mathematical reason-
ing. If there is ever any doubt about the rigor of a mathematical proof that uses
Python programs, we should think of the Python program as simply a convenient
representation of an equivalent Turing machine.
One of the beautiful properties of computational theory is that it applies to
all computer programs, on all computers. Indeed, as John Searle observed in the
quotation opening this chapter, we can imagine programs being instantiated in
biological entities, or even spiritual ones—but for our purposes in this book, it
will be easiest to restrict ourselves to more standard computer hardware.
EXERCISES
2.1
Spend a few hours working through the basics of Python using an online
tutorial. At a minimum, make sure you understand
• if statements, for loops, and while loops;
• basic operations on the three main data structures in Python: lists, tuples,
and dictionaries;
• using the string join() method to convert a list of strings into a single
string with a given separator between the original items in the list;
• array slicing, for example, s[3:7] is a list of s[3] to s[6] inclusive;
• negative indices, for example, s[-4] is s[len(s)-4].
2.2
Implement each of the following programs as a SISO Python program. In
each case you may assume the input is valid (i.e., consists of a correctly formatted
list of integers).
(a) Write a program that takes as input a list of integers separated by
whitespace. The output is a string representing the sum of every second
integer in the list. For example, if the input is “58 41 78 3 25 9” then
the output is “53”, because 41 + 3 + 9 = 53.
(b) Write a program, similar to the program in (a), but adding up every third
element of the input instead of every second element.
(c) Write a decision program that accepts a list of integers if the sum of every
third element is greater than the sum of every second element, and rejects
otherwise. Your program must import and use the programs from (a)
and (b).
2.3
Write a SISO Python program that takes two parameters, and returns a
string representing the number of times the character G occurs in each parameter,
separated by a newline character. For example, if the two input parameters are
(“CAGGT”, “GTGTGTGT”), the output should be “2 4”.

28
•
2 What is a computer program?
2.4
Which of the following strings P is a Python program, according to the
formal deﬁnition given in the section 2.5? (You may base your deﬁnition on any
reasonable reference computer C.)
(a) P = “def f(x): return x”
(b) P = “def f(x): x = 'am I a Python program?'”
(c) P = “x = str(7+2*5)”
(d) P = “def f(x,y,z): return y”
(e) P = “def f(x): return y”
(f) P = “def f(x): ret x”
2.5
For each of the following Python programs P and input strings I, give
the output P(I), using the formal deﬁnition of P(I) given in section 2.5, and
employing any reasonable reference computer C:
(a) P = “def f(x): return x[-2]”,
I = “abcdefgh”
(b) P = “def f(x): return x+5”,
I = “43”
(c) P = “def f(x): while True:
x=7 return x”
(note that “x=7” is indented here but “return” is not),
I = “CAGGT”
(d) P = “def f(x): return x[3:7]”,
I = “abcdefghij”
(e) P = “def f(x): return x[3:7]”,
I = “ab”
(f) P = “def f(x): return str(len(x+x+'x'))”,
I = “GAGAT”
(g) P = “def f(x): return str(len(x))”,
I = P
(h) P = “def f(x): return str(1/int(x))”,
I = “0”
(i) P = “def f(x,y): return x[-1]+y[-1]”,
I1 = “abc”, I2 = “xyz” (give P(I1, I2) for this question)
2.6
Which pairs of the following Python programs are equivalent?
• P = “def f(x): return str(len(x)+1)”
• Q = “def f(x): return str(len(x+'a'))”
• R = “def f(x):
L=1
while L!=len(x): L=L+1
return str
(L+1)” (note that all lines except the ﬁrst are indented here)
2.7
Consider the following Python program:
def hmmmm(inString):
2
m = int(inString)
if m>0 and m%10==0:
4
return 'yes'
else:
6
return 'no'

Exercises
•
29
def oooops(inString):
2
try:
val = int(inString)
4
except ValueError:
val = len(inString)
6
s = 'A'
i = 0
8
while i != val:
s += inString[2]
10
i += 1
return s
Figure 2.6: The Python program oooops.py. See exercise 2.9.
(a) Describe the set of strings accepted by this program.
(b) Describe the set of strings rejected by this program.
(c) Describe the set of strings that are neither accepted nor rejected by this
program. (Hint: It is a nonempty set.)
(d) Is the program a decision program?
2.8
Write a Python decision program that is as short as possible, as measured by
the number of characters in the source code ﬁle. Your program must satisfy the
formal deﬁnition of a Python program (page 24).
2.9
Read a tutorial about using try...except blocks with Python exceptions.
Then consider the program oooops.py in ﬁgure 2.6, and answer the following
questions:
(a) What is oooops(“abc”)?
(b) What is oooops(“abcdefghij”)?
(c) What is oooops(“a”)?
(d) What is oooops(“008”)?
(e) What is oooops(“8”)?
(f) What is oooops(“-11”)?
(g) Describe the set of all strings I for which oooops(I) is undeﬁned,
according to the formal deﬁnition of Python program outputs on page 24.

