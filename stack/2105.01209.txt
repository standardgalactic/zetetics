arXiv:2105.01209v1  [cs.LG]  3 May 2021
LABORECOMMENDER: A CRAZY-EASY TO USE PYTHON-BASED
RECOMMENDER SYSTEM FOR LABORATORY TESTS
Fabián Villena
www.fabianvillena.cl
Chile
villenafabian@gmail.com
ABSTRACT
Laboratory tests play a major role in clinical decision making because they are essential for the
conﬁrmation of diagnostics suspicions and inﬂuence medical decisions. The number of different
laboratory tests available to physicians in our age has been expanding very rapidly due to the rapid
advances in laboratory technology. To ﬁnd the correct desired tests within this expanding plethora of
elements, the Health Information System must provide a powerful search engine and the practitioner
need to remember the exact name of the laboratory test to correctly select the bag of tests to order.
Recommender systems are platforms which suggest appropriate items to a user after learning the
users’ behaviour. A neighbourhood-based collaborative ﬁltering method was used to model the
recommender system, where similar bags, clustered using nearest neighbours algorithm, are used
to make recommendations of tests for each other similar bag of laboratory tests. The recommender
system developed in this paper achieved 95.54 % in the mean average precision metric. A fully
documented Python package named LaboRecommender was developed to implement the algorithm
proposed in this paper.
Keywords Recommender Systems · Clinical Decision Support Systems · Data Science
1
Introduction
Laboratory tests (we are going to be referring to clinical chemistry tests speciﬁcally) play a major role in the clinical
decision making, because they are essential for the conﬁrmation of diagnostics suspicions and inﬂuence medical
decisions in general. A large proportion of clinical encounters, inpatient and outpatient, requires laboratory testing,
henceforth, the value of these diagnostic procedures is signiﬁcant. Literature dictates that overall 35 % of the clinical
encounters requires at least one laboratory test and for inpatient the proportion goes up to 98 % [9].
The number of different laboratory tests available to physicians in our age has been expanding very rapidly to nearly
3000 different laboratory tests, this number will continue to increase due to the rapid advances in laboratory technology
[12]. To ﬁnd the correct desired tests within this expanding plethora of elements, the Health Information System (HIS)
must provide a powerful search engine and the practitioner need to remember the exact name of the laboratory test to
correctly select the bag of tests to order.
The process of selection of the laboratory tests, taking into account the attributes described above, is time-consuming
and prone to errors by misselection or omission in the clinical order entry process [13].
Typically laboratory tests are ordered through a logic of order sets, this term refers to a selection of a group of labora-
tory tests related to each other to answer a speciﬁc clinical question. These clinical questions are often operationalized
in clinical guidelines based on the state of the art evidence to describes the best route to manage certain clinical events.
Therefore is common and suggested to order laboratory tests in bags [4].
Based on the premise of the existence of laboratory test bags there is an intuition for solving the problem of the
resource-intensive selection of laboratory tests by ﬁlling the bags semiautomatically by suggesting to the practitioners
the most probable tests to select next based on currently present tests in the bag. This clinical decision support (CDS)

LaboRecommender
solution I am proposing is called a recommender system. There is evidence dictating that CDS systems applied to
laboratory test orders improve the quality of the orders, clinical outcomes and cost-effectiveness [5, 3].
Besides the construction, training and validation of the recommendersystem for laboratory tests, an easy to use Python
package is developed, documented and released to the public1, implementing the best ﬁndings of this paper.
Recommender systems are platforms which suggest appropriate items to a user after learning the users’ behaviour. In
this work, I want to recommend a laboratory test addition to a bag of laboratory tests to a practitioner, based on already
added laboratory tests. These systems use information ﬁltering to recommend information of interest to a user [2].
Recommender systems are a technology that has been used in a variety of ﬁelds, ranging from social media to health-
care. Speciﬁcally in medical informatics, these systems have been developed to support clinical decisions, for example,
recommender systems are used in food recommendations for diabetic patients [11], suggesting cardiac diagnostics [8]
and suggesting where to publish medical papers [6].
The basic principle of recommender systems is that signiﬁcant dependencies exist between users and items. These
dependencies can be modelled in a data-driven manner through historical interaction data. Many different approaches
can be used to model this process and the most used method is collaborative ﬁltering, which refers to the use of
interaction from multiple users to predict future interactions of similar users. In this work, a neighbourhood-based
collaborative ﬁltering method was used [1].
2
Methods
A neighbourhood-based collaborative ﬁltering method was used to model the recommender system, where similar
bags, clustered using nearest neighbours algorithm, are used to make recommendations of tests for each other similar
bag of laboratory tests. The data used to train and validate this model is the public demo data of the MIMIC-III
dataset2, even though I have access to the complete dataset, the demo data was selected for easy reproducibility.
A python package named LaboRecommender was developed alongside this paper. This python package is completely
based and compliant with the scikit-learn API. Every experiment communicated in this paper can be reproduced using
the LaboRecommender package.
Medical Information Mart for Intensive Care III (MIMIC-III) is a database containing comprehensive clinical data
relating to tens of thousands of Intensive Care Unit (ICU) patients. This dataset was used to extract test orders from
real-world clinical encounters.
The table used for this paper was the LABEVENTS3 table which contains all laboratory measurements for a given patient.
The attributes extracted from the table were speciﬁcally the name of the laboratory test and the order date and time.
The demo dataset of the MIMIC-III dataset contains data from 100 different patients.
Each laboratory test in the LABEVENTS table of MIMIC-III is a row, to extract the bags of laboratory tests, tests ordered
at the same time were considered as ordered in a single bag. The number of different bags of laboratory tests extracted
was 1596.
To represent the bags used in this study and its contents, a bag-item matrix was used. This representation is a unary
m × n matrix V = [vuj] containing m bags and n items. This matrix represent each bag as a row where vuj = 1 if
item j is present in bag u.
To ﬁnd the most similar bags to a query, a nearest neighbour search algorithm was used, where the distance function
is a hyperparameter. The functions we compared were Jaccard, Kulinski, Matching, Rogerstanimoto and Rusellrao,
these functions were selected because they are custom tailored for unary vectors.
After selecting the s most similar bags to the query (where s is a hyperparameter) the frequency of each item in the
retrieved bags is calculated to further sort the items in descending order respect to its frequency. Finally, I select the
top k items to return these items as the recommendation, this parameter needs to be selected after training depending
on the implementation needs, 3, 5 and 10 recommendations were used to compute the metrics.
One-third of the dataset was selected for validation and the other two-thirds were used for training the model. For the
optimization of the model hyperparameters, a grid-search with 5-fold cross-validation was used.
1LaboRecommender - https://github.com/fvillena/laborecommender
2MIMIC-III Clinical Database Demo - https://physionet.org/content/mimiciii-demo/1.4/
3MIMIC-III LABEVENTS Table - https://mimic.physionet.org/mimictables/labevents/
2

LaboRecommender
Precision and recall metrics were used to validate the model over the testing subset implemented as a Mean average
metric, namely Mean Average Precision (MAP) and Mean Average Recall (MAR). Mean average metrics are used to
measure the performance of information retrieval systems which return a list of ranked results. For more information
refer to [7].
3
Results
The mean values of the 5-fold cross-validated precisions of each hyperparameter combination of the parameter grid
are displayed in Table 1. The best hyperparameter combination of the model is s = 20 and Jaccard distance metric.
The performance metrics over the test subset of the model trained with the best hyperparameters are showed in Table
2, these results are disaggregated by the number of tests suggested by the model. The value of k = 3 achieved the best
mean average precision and the value of k = 10 achieved the best mean average recall.
A fully documented Python package named LaboRecommender was developed to implement the algorithm proposed
in this paper.
Value of s
Distance metric
10
20
50
80
100
jaccard
93.67%
94.12%
93.69%
93.46%
93.38%
kulsinski
87.33%
89.69%
92.64%
93.17%
93.30%
matching
84.48%
88.01%
89.06%
88.87%
89.37%
rogerstanimoto
84.78%
87.78%
89.03%
88.80%
89.33%
russellrao
81.25%
85.96%
90.36%
92.21%
92.85%
Table 1: Grid-search result. Values are mean 5-fold cross-validated precisions.
Value of k
Performance metric
3
5
10
MAP
95.54%
94.47%
91.83%
MAR
18.51%
22.67%
31.13%
Table 2: Recommender system performance metrics over test subset by k.
4
Discussion
Best hyperparameters were the usage of Jaccard distance as the distance function between laboratory test sets and 20
as the number of most similar laboratory test sets in the neighbour search s. These hyperparameters achieved the best
precision metric. These hyperparameters are consistent with current literature on systems that use nearest neighbour
search as the core of its implementations [10].
Precision and recall behave inversely with the modulation of the parameter k and for the application proposed in this
paper the precision metric is the most important, because we want to retrieve the most number of relevant tests in each
suggestion set to enhance the user experience, therefore I suggest a lower value of k.
To select the correct number for k, metrics must be taken into account but also user experience. Based on the results
I recommend a k of 5 to lower the time the user searches over the list of suggestions alongside the tradeoff between
precision and recall.
To enhance the availability of evidence-based medical informatics software the code of the method described in this
paper is open source and ready-available to deploy inside clinical decision support systems. In medical informatics,
the release of software alongside the description of new methods should be a common practice.
5
Conclusion
Collaborative ﬁltering algorithms can be used to develop a recommender system for laboratory tests. This clinical
decision support system can be packaged into a ready-to-use software released for free to the medical informatics
community.
3

LaboRecommender
References
[1]
Charu C. Aggarwal. Recommender Systems. en. 2016. DOI: 10.1007/978-3-319-29659-3.
[2]
Fatemeh Alyari and Nima Jafari Navimipour. “Recommender systems: A systematic review of the state of the
art literature and suggestions for future research”. en. In: Kybernetes 47.5 (May 2018), pp. 985–1017. ISSN:
0368-492X. DOI: 10.1108/K-06-2017-0196.
[3]
Sharon L. Cadogan et al. “The effectiveness of interventions to improve laboratory requesting patterns among
primary care physicians: a systematic review”. In: Implementation Science : IS 10 (Dec. 2015). ISSN: 1748-5908.
DOI: 10.1186/s13012-015-0356-4.
[4]
Alvita J. Chan et al. “Order sets in health care: A systematic review of their effects”. en. In: International
Journal of Technology Assessment in Health Care 28.3 (July 2012), pp. 235–240. ISSN: 0266-4623, 1471-6348.
DOI: 10.1017/S0266462312000281.
[5]
Nicolas Delvaux et al. “The Effects of Computerized Clinical Decision Support Systems on Laboratory Test
Ordering: A Systematic Review”. en. In: Archives of Pathology & Laboratory Medicine 141.4 (Apr. 2017).
Publisher: Allen Press, pp. 585–595. ISSN: 0003-9985. DOI: 10.5858/arpa.2016-0115-RA.
[6]
Xiaoyue Feng et al. “The Deep Learning–Based Recommender System “Pubmender” for Choosing a Biomedi-
cal Publication Venue: Development and Validation Study”. en. In: Journal of Medical Internet Research 21.5
(May 2019). Publisher: JMIR Publications Inc. DOI: 10.2196/12957.
[7]
Christopher D. Manning, Prabhakar Raghavan, and Hinrich Schütze. Introduction to Information Retrieval.
2008. ISBN: 978-0-521-86571-5. DOI: 10.1017/CBO9780511809071.
[8]
Anam Mustaqeem, Syed Muhammad Anwar, and Muhammad Majid. “A modular cluster based collaborative
recommender system for cardiac patients”. en. In: Artiﬁcial Intelligence in Medicine 102 (Jan. 2020), p. 101761.
ISSN: 09333657. DOI: 10.1016/j.artmed.2019.101761.
[9]
Andy Ngo, Paras Gandhi, and W Greg Miller. “Frequency that Laboratory Tests Inﬂuence Medical Decisions”.
en. In: (2017), p. 5.
[10]
Suphakit Niwattanakul et al. “Using of Jaccard Coefﬁcient for Keywords Similarity”. en. In: Hong Kong (2013),
p. 6.
[11]
Somaye Norouzi et al. “A Mobile Application for Managing Diabetic Patients’ Nutrition: A Food Recommender
System”. en. In: Archives of Iranian Medicine 21.10 (Oct. 2018). Number: 10 Publisher: Academy of Medical
Sciences of the I.R. Iran, pp. 466–472. ISSN: 1029-2977.
[12]
Frank H Wians. “Clinical Laboratory Tests: Which, Why, and What Do The Results Mean?” en. In: (), p. 9.
[13]
Ming Zhi et al. “The Landscape of Inappropriate Laboratory Testing: A 15-Year Meta-Analysis”. In: PLoS ONE
8.11 (Nov. 2013). ISSN: 1932-6203. DOI: 10.1371/journal.pone.0078962.
4

