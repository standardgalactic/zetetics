http://www.hep.umn.edu/~border/phys1905f02/
Physics 1905.3
Physically Realistic Animation
Pete Border, lecturer
Fall term , 2002
Welcome to physics 1905.3! We will be exploring learning physics through making animations 
and games. Physics is used extensively in animations and games; without getting the physics 
right, you can't make a realistic movie. We will try to keep the technical side of the course as 
easy as possible, but some programming is inevitable. The main language we use will be 
Python, which is a very high-level scripting language (you can read more at 
http://www.python.org). We will use python with the vpython extensions 
(http://www.vpython.org) and as a scripting language in Blender (www.blender3d.com), a free 
animation software package.
News
This week we talked about classes and OOP on Tuesday, and finished covering collisions on 
Thursday. Your homework is to make a vpython game featuring collisions. It is due in class on 
Oct. 22. 
Next week we will discuss the homework on Tuesday, and begin with planar rotations on 
Thursday.
Officialness
The course syllabus is here.
An introduction to the course is here.
http://www.hep.umn.edu/~border/phys1905f02/ (1 of 5) [7/03/2005 10:34:06 AM]

http://www.hep.umn.edu/~border/phys1905f02/
Course Calendar
Sep 3: Introductions: 
H     Lecture Slides 
Sep 5: Coordinates and Velocity: 
H     Lecture Slides 
Sep 10: Hand in and discuss homework 1
Sep 12: Acceleration and the basic animation loop 
H     Lecture Slides 
H     circular.xls 
H     falling.xls 
H     falling2D.xls 
Sep 17: Hand in and discuss homework 2
Sep 19: Forces 1 
H     Lecture Slides 
H     sled.xls 
Sep 24: Hand in and discuss homework 3; intro to vPython
Sep 26: More Forces
Lecture slides
Oct 1: Topics with python- files, keyboard, mouse 
H     files.py 
H     hithere.txt 
H     outfile.txt 
H     function.py 
H     keyboard.py 
H     linecontrol.py 
H     mouse_pick.py 
H     variables_and_lists.py 
http://www.hep.umn.edu/~border/phys1905f02/ (2 of 5) [7/03/2005 10:34:06 AM]

http://www.hep.umn.edu/~border/phys1905f02/
H     walker.py 
Oct 3: Collisons 1 
H     Lecture Slides 
H     collider.py 
H     collider_friction.py 
Oct 8: class cancelled
Oct 10: Hand in and discuss trajectory game
Oct 15: Topics with python-classes and OOP 
H     Lectures Slides 
H     inheritance.py 
Oct 17: Collision 2 (vocabulary) 
H     Lecture Slides 
Oct 22: Hand in and discuss collision game 
Oct 24: Begin Rigid Bodies and Rotation 
H     Lecture Slides 
H     rotator1.py 
H     rotator2.py 
H     rotator3.py 
H     rotator4.py 
H     modeller.py 
Oct 31: Rigid Body Rotation part 2 
H     Lecture Slides 
Nov 5: Guest Lecture from Chuck Carter 
Nov 7: Rigid Body Collisions and Fun with Blender 
H     Lecture Slides 
H     wallbounce.py 
http://www.hep.umn.edu/~border/phys1905f02/ (3 of 5) [7/03/2005 10:34:06 AM]

http://www.hep.umn.edu/~border/phys1905f02/
Nov 12: Modelling with Blender 
H     Lecture Slides 
H     blockBath.blend 
H     bouncer.blend 
H     ipoAnimation.blend 
H     keyframes.blend 
H     metaballs.blend 
H     particles.blend 
H     pathAnimation.blend 
H     twoBallBouncer.blend 
Nov 14: Scripting with Blender 
H     bounce.blend 
H     oneBallBouncer.blend 
H     twoBallBouncer.blend 
H     string.blend 
H     2DRotator.blend 
H     2DRotatorCollider.blend 
H     gameballs.blend 
H     game_with_colors.blend 
Nov 19: Homework and Joints with Blender 
H     Lecture Slides 
H     parentAnimation.blend 
H     IKAnimation.blend 
H     IKAnimation2.blend 
Nov 21: More Joints with Blender 
H     Lecture Slides from Nov 19 
H     IKA1.blend 
H     IKleg.blend 
H     springJoint.blend 
H     IKPoseMode.blend 
Nov 26: Watched cool demos from Siggraph 
Dec 3: Start on 3D rotations 
http://www.hep.umn.edu/~border/phys1905f02/ (4 of 5) [7/03/2005 10:34:06 AM]

http://www.hep.umn.edu/~border/phys1905f02/
H     Lecture Slides from Dec 03 
H     rotator-works.blend 
H     top.blend 
Dec 5: More on 3D rotations, ODE integration, quaternions 
H     Lecture Slides from Dec 5 
H     besttop.blend 
H     top.blend 
Peter Border 
Dec 03, 2002 
http://www.hep.umn.edu/~border/phys1905f02/ (5 of 5) [7/03/2005 10:34:06 AM]

Phys1905.003 Fall 2002 Syllabus
  
 
Physics 1905.003 Fall 2002 
Syllabus 
Dr. Peter Border, teaching 
Welcome!
Welcome to Physics 1905.003! This course is about exploring how things move with 
the tools of computer animation and simulation. Making a believable animation 
requires a good understanding of motion, and flaws are very apparent. The human 
brain is very good at detecting unrealistic motion, so looking at motions in simulation 
should produce immediate feedback on how well the physics is understood.
On the other hand, physically correct motion is a tremendous boon to lifelike 
animation. Puppeteers have known for centuries that making something move like a 
human makes people see it as a human being, even though it may have almost no 
resemblance to a human being when it is still. See, for example, Karl Sims virtual 
creatures. When stopped, they are just a series of boxes, but, moving, they make 
most excellent fish.
The plan for this course is to teach the physics of motion concurrently with the 
technology needed to illustrate the motion. There are several technological tools 
available to us, of varying degrees of complexity. The final set of tools we wind up 
using will depend on how things go during the semester, and it is quite possible that 
not everyone will use all the tools (grading will not depend on which tools people use, 
but on how well they use it).
Textbook
http://www.hep.umn.edu/~border/phys1905f02/syllabus.html (1 of 4) [7/03/2005 10:34:14 AM]

Phys1905.003 Fall 2002 Syllabus
The text for this course is Physics for Game Designers, by David Bourg. It is available 
at the University bookstore.
You will be required to download various free programs through the semester. If there 
is need for it, the downloads can be supplied on CD for those without high-speed 
lines.
Course Structure
Physics 1905 has two parts- the lecture and the homework. 
Lectures
Physics 1905.300 will meet on Tuesday and Thursday afternoons from 3:30 to 4:30 in 
Physics 210. Generally, Tuesdays will be spent going over projects (you may be made 
to explain your project to the group!), and Thursdays will be more formal lectures. 
Lecture notes will be posted on the internet, but blackboard work done in class will not 
be. 
Websites, Chat Rooms, Bulletin Boards and Such
There will be a course website, hosted the UMN WebCT. The URL will be 
The website will eventually contain links to 
H     The syllabus you're reading now 
H     Class news 
H     Lecture notes- these will not contain any work done on the blackboard, so you 
really should come to class! 
H     Links to any surveys, bulletin boards, chat room schedules, etc
The website will be hosted by the University-wide WebCT server, so chat rooms, 
whiteboards, discussion lists, etc. are available. 
Office Hours
The lecturer for this course is Dr. Peter Border, who can emailed at 
http://www.hep.umn.edu/~border/phys1905f02/syllabus.html (2 of 4) [7/03/2005 10:34:14 AM]

Phys1905.003 Fall 2002 Syllabus
border@physics.umn.edu. More conventional addresses are: 
    Peter Border
    Room 257, Tate Lab of Physics
    612-624-1020
My office hours will be on Wednesday mornings from 10:00- 11:00, or by appointment.
Projects
Final grades will depend on projects. Each week, a homework project will be assigned 
on Thursday. It will be due the next Tuesday, and you are quite likely to be called in 
front of the class to discuss your work. Some projects will take several weeks to finish. 
These projects should count more in the final grade, so each project will have a weight 
equal to the number of weekends between the assignment and the due date. Note 
that even if a project is not actually due on some Tuesday, you will still be required to 
give a progress report on that day, and “no progress” will not be a good answer.
Many of the projects will be done in groups. Each person in the group will receive the 
same grade for a group project. If you feel that you are doing more than your fair 
share of the work in your group, see the instructor.
Several of the assignments may seem rather vague, especially if you've taken physics 
courses before. The assignments are meant to open up frontiers to you, and to allow 
you to find physics in your everyday life, rather than imposing some abstract, 
meaningless exercise. Try to have fun with them- if something isn't specified in the 
problem statement, make it up!.
Tentative Schedule 
This schedule will be subject to change! 
Week
Dates
Physics topic
Tech
Chapter
http://www.hep.umn.edu/~border/phys1905f02/syllabus.html (3 of 4) [7/03/2005 10:34:14 AM]

Phys1905.003 Fall 2002 Syllabus
1 9/3,5
Velocity and position
SS
2 9/10,12
Acceleration
SS
3 9/17,19
Forces 1- falling
VP, SS
4 9/26,28
Forces 2- contact forces
VP, SS
5 10/1,3
Forces 3- drag, kinetic friction, lift
VP, SS
6 10/8,10
Blender, animation, keyframes
Blender
7 10/15,17
Collisions 1- force pairs, impulse
Blender
8 10/22,24
Collisions 2- conserved stuff
Blender
9 10/29,31
Rotations 1- variables in 2D
Blender
10 11/5,7
Rotations 2- dynamics in 2D
Blender
11 11/12,14
Realtime programming
Java
12 11/19,21
Matrices
Java
13 11/26
3D Rotations
Java
14 12/3,5
Collisions with rotations
Java
15 12/10,12
Constrained motions
Java
August 28, 2002
Pete Border   
http://www.hep.umn.edu/~border/phys1905f02/syllabus.html (4 of 4) [7/03/2005 10:34:14 AM]

Class News
Click here to start
Table of contents
Class News
Slide 2
Syllabus
Spreadsheets
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/sep03.html [7/03/2005 10:34:18 AM]

News
Click here to start
Table of contents
News
Today
Slide 3
Coordinate Systems
More on Coordinates
Slide 6
Math with Vectors
Displacements and Time
Velocity 
From One Frame to the Next
Constant Velocity
Averaging velocities
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/sep05.html [7/03/2005 10:34:21 AM]

News
Click here to start
Table of contents
News
Acceleration
Today
Definitions
V and A are Different
Acceleration in Animations
Examples
Constant Acceleration
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/sep12.html [7/03/2005 10:34:24 AM]

News
Click here to start
Table of contents
News
Last time
Forces
Slide 4
Example Forces
Normal forces
Kinetic Friction
Using Newton's Laws
Trigonometry Reminder
Example of Forces
Example Free Body Diagram
Slide 12
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/sep19.html [7/03/2005 10:34:34 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/files.py
# working with files
# pmb 10/1/02
# open existing file for reading
myfile = open ( 'hithere.txt', 'r' )
s = myfile.readline()
print "read line ",s
electionYears = myfile.readline()
print electionYears
# formatted strings
# spose you have a number you wish to put in a string
string = "Your score is %d points" % 10
print string
string2 = "Fight,fight for %s " % "Minnesota"
print string2
string3 = "The plane is %f meters above ground" % 2000
print string3
# now open a new file to write to
outfile = open ('outfile.txt', 'w')
outfile.write ( 'this goes to the output file' );
positions = [ 0.12, 98.23, 87.2 ]
outfile.write ( "\nfirst position is %e" % positions[0] )
outfile.write ( electionYears )
print "done!"
http://www.hep.umn.edu/~border/phys1905f02/oct01/files.py [7/03/2005 10:34:40 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/hithere.txt
this text was in a file
1980 1984 1988 1992 1996 2000 2004
http://www.hep.umn.edu/~border/phys1905f02/oct01/hithere.txt [7/03/2005 10:34:42 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/outfile.txt
this goes to the output file
first position is 1.200000e-0011980 1984 1988 1992 1996 2000 2004
http://www.hep.umn.edu/~border/phys1905f02/oct01/outfile.txt [7/03/2005 10:34:44 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/function.py
#
# functions
#   pmb 10/1/02
from visual import *
# functions let you take some code that gets executed a lot
# and just write it once
def turnRed ( obj ):
    obj.color = color.red
    return
def turnYellow (obj):
    obj.color= color.yellow
    return color.yellow
ball = sphere ( pos= (3,0,0,) )
cube = box ( pos=(-3,0,0 ) )
while 1:
    # wait for mouse click
    if scene.mouse.clicked:
        # get the click- without this it never gets unclicked
        click = scene.mouse.getclick()
        
        # what got clicked?
        if scene.mouse.pick == ball:
            print "ball was clicked"
            turnRed(ball)
        # same for cube; elif is really else if    
        elif scene.mouse.pick == cube:
            print "cube was clicked"
            if ( cube.color == color.red ):
                print "cube is ",turnYellow( cube )
            else:
                turnRed(cube)
http://www.hep.umn.edu/~border/phys1905f02/oct01/function.py [7/03/2005 10:34:46 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/keyboard.py
from visual import *
#
# this file gets input from keyboard and does things
# pmb 9/27/02
# set up a cube
cubecolor = ( 0.5,0.5,0.5 )
cube = box ()
cube.color= cubecolor
print dir(scene)
# just go straight into main loop
while 1:
    # this waits until a key is pushed
    # then prints the nameof the key
    # print "wait for getkey"
    s = scene.kb.getkey()
    print " getkey returned ",s
    # rotate cube based for arrow keys; note angle is in radians!
    if ( s == "left" ):
        cube.rotate( angle= pi/30, axis= ( 0,1,0), origin = (0,0,0) )
    if ( s == "right" ):
        cube.rotate( angle= -pi/30, axis= ( 0,1,0), origin = (0,0,0) )
    if ( s == "up" ):
        cube.rotate( angle= pi/30, axis= ( 1,0,0), origin = (0,0,0) )
    if ( s == "down" ):
        cube.rotate( angle= -pi/30, axis= ( 1,0,0), origin = (0,0,0) )
        
    # if +/- pressed, make cube lighter or darker
    if ( s == "+" ):
        cubecolor= ( cubecolor[0]+0.1, cubecolor[1]+0.1, cubecolor[2]+0.1 )
        cube.color = cubecolor
    if ( s == "-" ):
        cubecolor= ( cubecolor[0]-0.1, cubecolor[1]-0.1, cubecolor[2]-0.1 )
        cube.color = cubecolor
    # "r" makes cube redder
    if ( s == "r" ):
        cubecolor= ( cubecolor[0]+0.1, cubecolor[1], cubecolor[2] )
        cube.color = cubecolor
    # "g" makes cube greener
    if ( s == "g" ):
        cubecolor= ( cubecolor[0], cubecolor[1]+0.1, cubecolor[2] )
        cube.color = cubecolor
    # "b" makes cube bluer
    if ( s == "b" ):
        cubecolor= ( cubecolor[0], cubecolor[1], cubecolor[2]+0.1 )
        cube.color = cubecolor
        
        
    # if "a" is pressed, turn off/on annoying autoscaling
    if ( s == "a" ):
        if (scene.autoscale):
            scene.autoscale = 0
        else :
            scene.autoscale = 1
    # "z" goes forward, "x" pulls back
    if ( s == "z" ):
        scene.range = scene.range * 0.99
    if ( s == "x" ):
        scene.range = scene.range * 1.01
    
http://www.hep.umn.edu/~border/phys1905f02/oct01/keyboard.py [7/03/2005 10:34:48 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/linecontrol.py
# this program shows basic line control
#  pmb 10/1/02
# lines are usually executed one after the other
print "this line comes frst"
print "then this line"
# soometimes control jumps around, if desired
x=5
y=6
# if statement does exactly like it looks
if ( x<y ):
    # do these lines if x is less than y
    print "x is less than y"
    print x,y
else:
    # otherwise, do these
    print "x is not less than y"
    print x,y
# a while loop gets executed until the condition is no longer true
i = 4
while ( i < 10 ):
    # do this until i is no longer less than 10
    print "i is less than 10 ", i
    i=i+1
print "i is no longer less than 10, it is ", i
http://www.hep.umn.edu/~border/phys1905f02/oct01/linecontrol.py [7/03/2005 10:34:50 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/mouse_pick.py
#
# this file shows how to handle mouse clicks in vpython
# directions: clickk on the ball or the cube to change its color
#  pmb 10/1/02
from visual import *
# set up a ball and a cube
ball = sphere ( pos=( 5,0,0 ), radius=2, color=color.red )
cube = box ( size = (3,3,3), pos = (-5,0,0), color= color.red )
# a vector of colors; clicks cycle through them
colorVec = [ color.red, color.yellow, color.green, color.cyan, color.blue, color.magenta ]
# current color of ball and cube
ballState = 0
cubeState = 0
while 1:
    # wait for mouse click
    if scene.mouse.clicked:
        # get the click- without this it never gets unclicked
        click = scene.mouse.getclick()
        
        # what got clicked?
        if scene.mouse.pick == ball:
            print "ball was clicked"
            #advance ball color counter
            ballState = ballState + 1
            # if counter too high,reset
            if (ballState > 5 ):
                ballState = 0
            #change ball color to next
            ball.color = colorVec[ballState]
        # same for cube; elif is really else if    
        elif scene.mouse.pick == cube:
            print "cube was clicked"
            cubeState = cubeState+1
            if ( cubeState > 5 ):
                cubeState = 0
            cube.color = colorVec[cubeState]
        # nothing was clicked; make a little red ball where the mouse is
        else:
            loc = click.pos
            print "make a new ball at ", loc
            sphere(pos=loc, color=color.red, radius=0.5 )
http://www.hep.umn.edu/~border/phys1905f02/oct01/mouse_pick.py [7/03/2005 10:34:53 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/variables_and_lists.py
# variables and lists
# pmb 10/2/02
# variable are sort-of like the cells in a spreadsheet
# they can hold numbers or character strings
x=5
iamavariable='hi mom'
print x,iamavariable
# all variables have names; variables with different caps
# are different variables
IamAVariable='hi dad'
print iamavariable, IamAVariable
# you can do math on variables if they both have numbers in them
zxy = 32
print "zxy is now ", zxy,
zxy = zxy + 10
print " and now its ",zxy
# lists- you can make lists of variables if it's a handy way to access them
years = [ 1980, 1982, 1984, 1986, 1977 ]
print " list of years is ", years
# lists are accessed thusly- this gets the 4th year in the list
print "4th year is ",years[4]
# for loops let you cycle through entries in a list easily
for zxy in years:
    print zxy
# you can cycle through consecutive numbers with a range list
for zxy in range( 2,10 ):
    print "for list with range ",zxy
# there are also lists of characters
presidents = [ 'carter','ford','reagan','bush','clinton']
print "there are ",len(presidents)," presidents, first is ",presidents[0]
for x in presidents:
    print 'hail to chief ', x
# sorting lists of chars is easy
presidents.sort()
print "sorted presidents ", presidents
# can even have lists of chars and numbers
aMixedList = [ 1996, 'clinton',2002, 'churchill' ]
for x in aMixedList:
    print x
#variables can also be objects, like in vpython demos
#there are also hashes and tuples
http://www.hep.umn.edu/~border/phys1905f02/oct01/variables_and_lists.py [7/03/2005 10:34:56 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct01/walker.py
from visual import *
#
# this is meant to let people walk around with the standard doom
# buttons- i dont really understand how the controls go
# note that you can walk thru all of the objects
#  pmb, 9/27/02
# setup world
floor = box ( size=(100,1,100), pos = ( 0,-3,0 ))
ball = sphere ( pos = ( 0,0,30), radius=1,color=color.red)
dunce = cone ( pos = ( 0,-3,-50), axis = (0,1,0), radius=10,
               color=(0.8,0.9,0.0), length=10)
hoop = ring ( pos = ( 25,0,0 ), color=color.yellow)
#make a house
house1= box ( size= (20,5,20 ), pos =( -30,2,0 ), color=color.white ) 
house2= box ( size= (30,10,10 ), pos =( -30,7,10 ), color=color.white ) 
house3= box ( size= (10,7,20 ), pos =( -25,4,-10 ), color=color.white ) 
house4= box ( size= (15,20,15 ), pos =( -35,17,-12 ), color=color.white )
# make a tree
tree =[ 0,0,0 ]
tree[0] = cone ( pos= ( 20,-4,20 ), axis = ( 0,0.9,0.1 ), color=color.green,
                 radius=5, length=7 )
tree[1] = cone ( pos= ( 20,0,20 ), axis = ( 0.1,0.9,0 ), color=color.green,
                 radius=4, length=6 )
tree[2] = cone ( pos= ( 20,4,20 ), axis = ( 0,0.9,-0.1 ), color=color.green,
                 radius=3, length=4 )
count =0
scene.autoscale =0
print dir(scene)
while 1:
    # get key from keyboard
    s = scene.kb.getkey()
    #print "center is ", scene.center
    #print "camera is ", scene.mouse.camera
    #print "forward is ", scene.forward, "\n"
    # go forward
    if ( s == "up" ):
        scene.center = scene.center + scene.forward
    # go back
    if ( s == "down" ):
        scene.center = scene.center - scene.forward
    # go left
    if ( s == "left" ):
        newforward = rotate (scene.forward, axis=(0,1,0), angle=pi/30 )
        scene.center = scene.mouse.camera + newforward * mag ( scene.mouse.camera- 
scene.center)
        scene.forward = newforward
    # go forward
    if ( s == "right" ):
        newforward = rotate (scene.forward, axis=(0,1,0), angle=-pi/30 )
        scene.center = scene.mouse.camera + newforward * mag ( scene.mouse.camera- 
scene.center)
        scene.forward = newforward        
        
    #shutdown autoscale after 1st lap
    if ( count > 0 ):
        scene.autoscale = 0
        count = count+1        
http://www.hep.umn.edu/~border/phys1905f02/oct01/walker.py [7/03/2005 10:34:59 AM]

News
Click here to start
Table of contents
News
Last time
This time
Programming Hints
Functions
Collisions 1
Collision Detection
What forces?
Collision force loop
Closing Velocity
Rebound
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/oct03.html [7/03/2005 10:35:00 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct03/collider.py
from visual import *
# this function does the actual movement
# of an object, given the force on it
# and time it acts
# it also moves fake shadows around
def mover ( obj, force, dt, shadow ):
    # find acceleration
    acc = vector (0,0,0)
    acc = force / obj.mass
    # move object
    obj.velocity = obj.velocity + acc * dt
    obj.pos = obj.pos + obj.velocity * dt
    # check limits on movement
    # the floor
    if ( obj.pos.y < 0.0 + obj.radius ):
        # next line prevents obj digging in on bounces
        obj.pos.y = - (obj.pos.y - obj.radius ) + obj.radius
        obj.velocity.y = - obj.velocity.y
    # left wall
    if ( obj.pos.x < -10.0 + obj.radius ):
        obj.velocity.x = - obj.velocity.x
    # right wall
    if ( obj.pos.x > 10.0 - obj.radius ):
        obj.velocity.x = - obj.velocity.x
    # back wall
    if ( obj.pos.z < -10.0 + obj.radius ):
        obj.velocity.z = - obj.velocity.z
    # front wall
    if ( obj.pos.z > 10.0 - obj.radius ):
        obj.velocity.z = - obj.velocity.z
    # move shadows
    shadow.pos.x = obj.pos.x
    shadow.pos.z = obj.pos.z
    return
    
# make two balls bounce around and collide
# set up balls
ballRad = 1.5
ball1 = sphere ( pos=( 3,ballRad+5,0 ), radius = ballRad, color= color.red )
ball2 = sphere ( pos=(-2,ballRad+2,2 ), radius = ballRad, color=color.yellow )
# initial velocities, masses
ball1.velocity = vector( -1, 6, 1.5 )
ball2.velocity = vector( 1, -4, 3 )
ball1.mass = 5.0
ball2.mass = 3.0
# ball shadows
shadow1 = cylinder ( pos=( ball1.pos.x,0,ball1.pos.z ),
                     radius=ballRad, length= 0.05,
                     color=color.black, axis= (0,0.05,0) )
shadow2 = cylinder ( pos=( ball2.pos.x,0,ball2.pos.z ),
                     radius=ballRad, length= 0.05,
                     color=color.black, axis= (0,0.05,0) )
# make world
floor = box ( size = (20, 0.5, 20 ))
floor.pos.y = -0.25
http://www.hep.umn.edu/~border/phys1905f02/oct03/collider.py (1 of 2) [7/03/2005 10:35:01 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct03/collider.py
backwall = box ( size = ( 20,20, 0.5 ), pos= ( 0,10,-10.25 ))
scene.autoscale = 0
#collision epsilon- fraction of velocity conserved after collision
epsilon = 0.9
# world vars
g = -2
dt =0.04
drag = 0.01
# big loop
while 1:
    rate(100)
    
    # move balls- find forces and move them
    f1 = vector( 0,1,0 ) * ball1.mass * g
    mover ( ball1, f1, dt, shadow1 )
    f2 = vector( 0,1,0 ) * ball2.mass * g
    mover ( ball2, f2, dt, shadow2 )
    
    #check for collisions
    n = ball2.pos - ball1.pos
    if ( mag(n) < (ball1.radius + ball2.radius) ):
        # they collided
        print "collision!"
        
        # figure out collision
        # set up some variables for collision
        # analyze collision in tiny time steps
        dt2 = dt/100
        nhat = norm(n)
        # closing velocities
        v1n = dot ( ball1.velocity, nhat )
        v2n = dot ( ball2.velocity, nhat )
        # force applied at each time step- a guess
        dF = nhat * (ball1.mass + ball2.mass)*(v1n-v2n)*10.0
        # number of time steps
        nHits = 0
        # have forces work on balls, then see if velocities are still
        # closing, or are they moving apart yet
        while ( v2n-v1n ) < 0:
            # apply dF to each ball for dt2 time
            mover ( ball1, -dF, dt2, shadow1 )
            mover ( ball2, dF, dt2, shadow2 )
            # find new closing velocities
            v1n = dot ( ball1.velocity, nhat )
            v2n = dot ( ball2.velocity, nhat )
            nHits = nHits + 1
            
        # balls have now stopped closing on each other
        # now they do forces as they spread apart
        print " collision took ", nHits, " steps"
        while ( nHits > 0 ):
            mover ( ball1, -dF*epsilon, dt2, shadow1 )
            mover ( ball2, dF*epsilon, dt2, shadow2 )
            nHits = nHits -1
    
        
http://www.hep.umn.edu/~border/phys1905f02/oct03/collider.py (2 of 2) [7/03/2005 10:35:01 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct03/collider_friction.py
from visual import *
# this function does the actual movement
# of an object, given the force on it
# and time it acts
# it also moves fake shadows around
def mover ( obj, force, dt, shadow ):
    # find acceleration
    acc = vector (0,0,0)
    acc = force / obj.mass
    # move object
    obj.velocity = obj.velocity + acc * dt
    obj.pos = obj.pos + obj.velocity * dt
    # check limits on movement
    # the floor
    if ( obj.pos.y < 0.0 + obj.radius ):
        # next line prevents obj digging in on bounces
        obj.pos.y = - (obj.pos.y - obj.radius ) + obj.radius
        obj.velocity.y = - obj.velocity.y
    # left wall
    if ( obj.pos.x < -10.0 + obj.radius ):
        obj.velocity.x = - obj.velocity.x
    # right wall
    if ( obj.pos.x > 10.0 - obj.radius ):
        obj.velocity.x = - obj.velocity.x
    # back wall
    if ( obj.pos.z < -10.0 + obj.radius ):
        obj.velocity.z = - obj.velocity.z
    # front wall
    if ( obj.pos.z > 10.0 - obj.radius ):
        obj.velocity.z = - obj.velocity.z
    # move shadows
    shadow.pos.x = obj.pos.x
    shadow.pos.z = obj.pos.z
    return
    
# make two balls bounce around and collide
# set up balls
ballRad = 1.5
ball1 = sphere ( pos=( 8, ballRad, 0 ), radius = ballRad, color= color.red )
ball2 = sphere ( pos=(-8, ballRad, 2.5 ), radius = ballRad, color=color.yellow )
# initial velocities, masses
ball1.velocity = vector( -0.25, 0, 0 )
ball2.velocity = vector( 3, 0, 5 )
ball1.mass = 5.0
ball2.mass = 3.0
# ball shadows
shadow1 = cylinder ( pos=( ball1.pos.x,0,ball1.pos.z ),
                     radius=ballRad, length= 0.05,
                     color=color.black, axis= (0,0.05,0) )
shadow2 = cylinder ( pos=( ball2.pos.x,0,ball2.pos.z ),
                     radius=ballRad, length= 0.05,
                     color=color.black, axis= (0,0.05,0) )
# make world
floor = box ( size = (20, 0.5, 20 ))
floor.pos.y = -0.25
http://www.hep.umn.edu/~border/phys1905f02/oct03/collider_friction.py (1 of 3) [7/03/2005 10:35:03 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct03/collider_friction.py
backwall = box ( size = ( 20,20, 0.5 ), pos= ( 0,10,-10.25 ))
scene.autoscale = 0
scene.lights = [ vector ( 0,1,0 ) ]
#collision epsilon- fraction of velocity conserved after collision
epsilon = 0.9
# mu-sub-k
muk = 1.0
# world vars
g = -2
dt =0.04
drag = 0.01
# cm is a cube
cm = box ( color= color.blue, size= (0.5,0.5,0.5))
cm.pos = (ball1.mass*ball1.pos + ball2.mass*ball2.pos)/(ball1.mass+ball2.mass)
# big loop
while 1:
    rate(100)
    
    # move balls- find forces and move them
    f1 = vector( 0,1,0 ) * ball1.mass * g
    mover ( ball1, f1, dt, shadow1 )
    f2 = vector( 0,1,0 ) * ball2.mass * g
    mover ( ball2, f2, dt, shadow2 )
    
    cm.pos = (ball1.mass*ball1.pos + ball2.mass*ball2.pos)/(ball1.mass+ball2.mass)
    #check for collisions
    n = ball2.pos - ball1.pos
    if ( mag(n) < (ball1.radius + ball2.radius) ):
        # they collided
        print "collision!"
        
        # figure out collision
        # set up some variables for collision
        # analyze collision in tiny time steps
        dt2 = dt/100
        nhat = norm(n)
        # closing velocities
        v1 = ball1.velocity
        v2 = ball2.velocity
        v1n = dot ( v1, nhat )
        v2n = dot ( v2, nhat )
        # force applied at each time step- a guess
        dNorm = (ball1.mass + ball2.mass)*(v1n-v2n)*10.0
        # number of time steps
        nHits = 0
        # have forces work on balls, then see if velocities are still
        # closing, or are they moving apart yet
        while ( v2n-v1n ) < 0:
            # find new closing velocities
            v1 = ball1.velocity
            v2 = ball2.velocity
            v1n = dot ( v1, nhat )
            v2n = dot ( v2, nhat )
            # scraping velocity
            v1s = ( v1-v2 ) - nhat * ( dot((v1-v2), nhat ) )
            v1shat = norm(v1s)
            # total force applied each time step to ball 2
            dF = nhat * dNorm + v1shat * muk * dNorm
http://www.hep.umn.edu/~border/phys1905f02/oct03/collider_friction.py (2 of 3) [7/03/2005 10:35:03 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct03/collider_friction.py
            # apply dF to each ball for dt2 time
            mover ( ball1, -dF, dt2, shadow1 )
            mover ( ball2, dF, dt2, shadow2 )
            nHits = nHits + 1
            
        # balls have now stopped closing on each other
        # now they do forces as they spread apart
        print " collision took ", nHits, " steps"
        while ( nHits > 0 ):
            mover ( ball1, -dF*epsilon, dt2, shadow1 )
            mover ( ball2, dF*epsilon, dt2, shadow2 )
            nHits = nHits -1
    
        
http://www.hep.umn.edu/~border/phys1905f02/oct03/collider_friction.py (3 of 3) [7/03/2005 10:35:03 AM]

News
Click here to start
Table of contents
News
Classes
Objects
Using objects
Object-Oriented Programming
Make your Own Class
Slide 7
Instances
Using Instances
Overloading
Doc strings
Modules
Thursday
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/oct15.html [7/03/2005 10:35:03 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/inheritance.py
#
# demo file for objects and inheritance
# make a class of vehicles, which is inherited
# from by the car and truck classes
#              pmb, 10/15/02
# put everything for a vehicle here
class vehicle:
    # initialize method. called when vehicle is created
    def __init__(self):
        self.gas = 10
        self.v = 0
        self.pos = 0
        print "made a vehicle"
    # fill up gastank
    def gasUp(self,fuel):
        self.gas = self.gas + fuel
        print "vehicle gassed Up"
    # go faster
    def goFaster( self ):
        self.v = self.v + 1
    # stop!
    def stop( self ):
        self.v = 0.0
    # set mass of vehicle
    def setMass ( self, m ):
        self.mass = m
    # update position
    def updatePos ( self ):
        if ( self.gas > 0 ):
            self.pos = self.pos + self.v * 0.04
            self.gas = self.gas - 0.5
            self.mass = self.mass -0.5
        else:
            self.v =0;
            print "Out of gas!"
# now put stuff just needed for a car    
class car(vehicle):
    # init- called automatically when its made
    def __init__(self):
        # must call init for superclass manually
        vehicle.__init__(self)
        self.passengers=[]
        print "made a car"
    # add a new passenger
    def addPass(self, newP):
        self.passengers.append( newP )
        self.mass = self.mass + newP.mass
        print "added passenger ", self.passengers
# things just needed for a truck
class truck(vehicle):
    # next line is a docstring
    # print it with print truck.__doc__
    "The truck class- inherits from vehicle. addCargo is additional method."
    def __init__(self):
        # make a vehicle manually
        vehicle.__init__(self)
        self.cargo=[]
        print "made a truck"
    # add some cargo
    def addCargo(self, stuff ):
        self.cargo.append( stuff )
        self.mass = self.mass + stuff.mass
        print "added cargo ", self.cargo
http://www.hep.umn.edu/~border/phys1905f02/oct15/inheritance.py (1 of 3) [7/03/2005 10:35:05 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/inheritance.py
# a superclass of things to carry
class things:
    "A superclass of carryable items."
    # this can probly go away
    def __init__(self):
        return
    def setMass( self, m ):
        self.mass = m
# two inheriting subclasses, passengers and cargo
class passenger( things ):
    "A class of passengers. Inherits from things class."
    def __init__(self):
        things.__init__(self)
    # passengers ahve names
    def setName(self, n ):
        self.name = n
#cargo inherits from things
class cargo(things ):
    def __init__(self):
        things.__init__(self)
    # cargo has names too
    def setName(self, n ):
        self.name = n
        
# main program here
#
# make some passengers
joe = passenger()
joe.setMass ( 150 )
joe.setName("Joe")
print joe.__doc__
mary = passenger()
mary.setMass ( 130 )
mary.setName ("Mary")
# make some cargo
widgets = cargo()
widgets.setMass ( 300 )
gadgets = cargo()
gadgets.setMass ( 500 )
# make a car
toronado= car()
toronado.setMass( 10000 )
toronado.addPass( joe )
toronado.goFaster()
toronado.goFaster()
# make another car
vwbug = car()
vwbug.setMass ( 1500 )
vwbug.addPass ( mary )
vwbug.goFaster()
# make a truck
semi = truck()
semi.setMass ( 80000 )
semi.addCargo(widgets)
semi.addCargo(gadgets)
semi.goFaster()
print semi.__doc__
#
ontheroad= [ toronado, vwbug, semi ]
http://www.hep.umn.edu/~border/phys1905f02/oct15/inheritance.py (2 of 3) [7/03/2005 10:35:05 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/inheritance.py
while semi.gas > 5:
    for aVehicle in ontheroad:
        print "vehicle mass ",aVehicle.mass,
        print "velocity ", aVehicle.v
        aVehicle.updatePos()
        aVehicle.goFaster()
        
http://www.hep.umn.edu/~border/phys1905f02/oct15/inheritance.py (3 of 3) [7/03/2005 10:35:05 AM]

News
Click here to start
Table of contents
News
Last time
Collision loop
Collision Vocabulary
Center of Mass
Momentum
Conservation of Momentum
Impulse
Kinetic Energy
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/oct17.html [7/03/2005 10:35:06 AM]

News
Click here to start
Table of contents
News
Last Time
Rigid Bodies
Planar Rotation
Angular Position
Angular Velocity
Animation loops and Angles
w changes
Angular and Linear Acceleration
torques
Definition of Torque
Moment of Inertia
F=ma for rotations
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/oct24.html [7/03/2005 10:35:08 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator1.py
from visual import *
import math
#
# this program makes an object and rotates it
#    pmb, 10/24/02
#
# make axes
xaxis = cylinder ( pos=(0,0,0), axis=(5,0,0), radius=0.05, color=color.red )
yaxis = cylinder ( pos=(0,0,0), axis=(0,5,0), radius=0.05, color=color.green )
zaxis = cylinder ( pos=(0,0,0), axis=(0,0,5), radius=0.05, color=color.blue )
# label axes
xlabel = label ( pos= (5,0,0),text='X',height=10, border=5 )
ylabel = label ( pos= (0,5,0),text='Y',height=10, border=5 )
zlabel = label ( pos= (0,0,5),text='Z',height=10, border=5 )
#
# make a box
whiteBox = box(pos=(0,0,0), length= 5.0, height=1.0, width=0.1, color=color.white)
#
# setup for rotation
dt = 0.05
angPos = 0.0
angVel = 0.0
angAcc = 2 * 3.14159 /100.0
angAxis = ( 0,1,0 )
#
# draw paths??
drawPaths = 0
if drawPaths:
    path1 = curve( pos=[], radius= 0.02, color= color.yellow )
    r1 = 2.0
    path2 = curve( pos=[], radius= 0.02, color= color.yellow )
    r2 = 1.5
#
# main loop
while 1:
    rate(20)
    # find angular velocity
    angVel = angVel + angAcc * dt
    angPos = angPos + angVel * dt
    
    # the vpython "rotate" takes CHANGES to omega as argument, not omega
    whiteBox.rotate( angle= angVel * dt, axis = angAxis )
    # draw paths if wanted
    if ( drawPaths ):
        x1 = r1 * cos ( angPos )
        y1 = 0.0
        z1 = -r1 * sin ( angPos )
        path1.append ( pos= ( x1, y1, z1 )) 
        x2 = r2 * cos ( angPos )
        y2 = 0.0
        z2 = -r2 * sin ( angPos )
        path2.append ( pos= ( x2, y2, z2 )) 
http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator1.py [7/03/2005 10:35:10 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator2.py
from visual import *
import math
#
# this program makes an object and rotates it
# this version is like rotator1, but draws acceleration and
# velocity vectors
#    pmb, 10/24/02
#
# make axes
xaxis = cylinder ( pos=(0,0,0), axis=(5,0,0), radius=0.05, color=color.red )
yaxis = cylinder ( pos=(0,0,0), axis=(0,5,0), radius=0.05, color=color.green )
zaxis = cylinder ( pos=(0,0,0), axis=(0,0,5), radius=0.05, color=color.blue )
# label axes
xlabel = label ( pos= (5,0,0),text='X',height=10, border=5 )
ylabel = label ( pos= (0,5,0),text='Y',height=10, border=5 )
zlabel = label ( pos= (0,0,5),text='Z',height=10, border=5 )
#
# make a box
whiteBox = box(pos=(0,0,0), length= 5.0, height=1.0, width=0.1, color=color.white)
#
# setup for rotation
t = 0.0
dt = 0.05
angPos = 0.0
angVel = 0.0
angAxis = ( 0,1,0 )
#
# draw acc and vel?
drawAcc = 1
rPoint = 2.0
if drawAcc:
    acc = arrow ( pos = ( rPoint,0,0 ), axis = ( 0,0,1 ), shaftwidth= 0.05, color= color.red ) 
    vel = arrow ( pos = ( rPoint,0,0 ), axis = ( 0,0,1 ), shaftwidth= 0.05, color= color.blue ) 
    posNow = vector ( rPoint,0,0 )
    posPrev1 = vector ( rPoint,0,0 )
    posPrev2 = vector ( rPoint,0,0 )
#
# main loop
while 1:
    rate(20)
    t = t+ dt
    # find angular velocity
    angAcc = 2 * 3.14159/100.0
    angVel = angVel + angAcc * dt
    angPos = angPos + angVel * dt
    
    # the vpython "rotate" takes CHANGES to omega as argument, not omega
    whiteBox.rotate( angle= angVel * dt, axis = angAxis )
    # draw acc, vel if wanted
    if ( drawAcc ):
        # find position now
        posNow.x = rPoint * cos ( angPos )
        posNow.y = 0.0
        posNow.z = -rPoint * sin ( angPos )
        print "poses ", posNow, posPrev1, posPrev2
        
        # draw velocity
        vel.pos = posNow
        vel.axis = (posNow - posPrev1)/ dt 
        print " vel= ", vel.pos, vel.axis
        
        # draw acc
        acc.pos = posNow
        acc.axis = (( posNow - posPrev1 )/ dt - ( posPrev1 - posPrev2 )/ dt ) /dt
http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator2.py (1 of 2) [7/03/2005 10:35:13 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator2.py
        acc.axis = acc.axis 
        print " acc= ", acc.pos, acc.axis
        
        # save new pos
        posPrev2.x  = posPrev1.x
        posPrev2.y  = posPrev1.y
        posPrev2.z  = posPrev1.z
        posPrev1.x  = posNow.x
        posPrev1.y  = posNow.y
        posPrev1.z  = posNow.z
http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator2.py (2 of 2) [7/03/2005 10:35:13 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator3.py
from visual import *
import math
#
# this program makes an object and rotates it
# this version is like rotator1, but draws
# ANGULAR velocity and acceleration vectors
#    pmb, 10/24/02
#
# make axes
xaxis = cylinder ( pos=(0,0,0), axis=(5,0,0), radius=0.025, color=color.red )
yaxis = cylinder ( pos=(0,0,0), axis=(0,5,0), radius=0.025, color=color.green )
zaxis = cylinder ( pos=(0,0,0), axis=(0,0,5), radius=0.025, color=color.blue )
# label axes
xlabel = label ( pos= (5,0,0),text='X',height=10, border=5 )
ylabel = label ( pos= (0,5,0),text='Y',height=10, border=5 )
zlabel = label ( pos= (0,0,5),text='Z',height=10, border=5 )
#
# make a box
whiteBox = box(pos=(0,0,0), length= 5.0, height=1.0, width=0.1, color=color.white)
#
# setup for rotation
t = 0.0
dt = 0.05
angPos = 0.0
angVel = 0.0
angAxis = ( 0,1,0 )
#
# draw angular vel and acc?
drawAngAcc = 1
rPoint = 2.0
if drawAngAcc:
    angAccVec =arrow(pos=( 0,0,0 ),axis=( 0,1,0 ),shaftwidth=0.15,color=color.red ) 
    angVelVec =arrow(pos=( 0,0,0 ),axis=( 0,1,0 ),shaftwidth=0.15,color=color.blue )
#
# main loop
while 1:
    rate(20)
    t = t+ dt
    # find angular velocity
    angAcc = 2 * 3.14159/100.0
    angVel = angVel + angAcc * dt
    angPos = angPos + angVel * dt
    
    # the vpython "rotate" takes CHANGES to omega as argument, not omega
    whiteBox.rotate( angle= angVel * dt, axis = angAxis )
    # draw acc, vel if wanted
    if ( drawAngAcc ):
        # draw ang velocity
        angVelVec.axis = vector ( 0,1,0 ) * angVel
        
        # draw ang acc
        angAccVec.pos = angVelVec.axis
        angAccVec.axis = vector( 0,angAcc,0 ) * 5.0
        
http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator3.py [7/03/2005 10:35:16 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator4.py
from visual import *
import math
# scene.autoscale=0
#
# this program makes an object and rotates it
# this version is like rotator1, but it experiments
# with various values of various parameters
#    pmb, 10/24/02
#
# make axes
xaxis = cylinder ( pos=(0,0,0), axis=(5,0,0), radius=0.05, color=color.red )
yaxis = cylinder ( pos=(0,0,0), axis=(0,5,0), radius=0.05, color=color.green )
zaxis = cylinder ( pos=(0,0,0), axis=(0,0,5), radius=0.05, color=color.blue )
# label axes
xlabel = label ( pos= (5,0,0),text='X',height=10, border=5 )
ylabel = label ( pos= (0,5,0),text='Y',height=10, border=5 )
zlabel = label ( pos= (0,0,5),text='Z',height=10, border=5 )
#
# make a box
whiteBox = box(pos=(0,0,0), length= 5.0, height=1.0, width=0.1, color=color.white)
yellowBox = box(pos=(10,0,0), length= 2.0, height=1.0, width=3.0, color=color.yellow)
redBox = box(pos=(0,3,0), length= 2.0, height=1.0, width=3.0, color=color.red)
blueBox = box(pos=(0,-5,0), length= 0.5, height=1.0, width=0.3, color=color.blue)
#
# setup for rotation
t = 0.0
dt = 0.05
angPos = 0.0
angVel = 0.0
xAxis = ( 1,0,0 )
yAxis = ( 0,1,0 )
zAxis = ( 0,0,1 )
#
# main loop
while 1:
    rate(20)
    t = t+ dt
    # find angular velocity
    angAcc = 2 * 3.14159/100.0
    angVel = angVel + angAcc * dt
    angPos = angPos + angVel * dt
    
    # the vpython "rotate" takes CHANGES to omega as argument, not omega
    whiteBox.rotate( angle= angVel * dt, axis = yAxis )
    yellowBox.rotate ( angle = angVel * dt, axis= xAxis )
    redBox.rotate ( angle = angVel*dt, axis= zAxis )
    # docs say "The transform is a rotation of angle radians,
    # counterclockwise around the line defined by origin and
    # origin+axis."
    blueBox.rotate ( angle = angVel*dt, axis= yAxis, origin = xAxis )
http://www.hep.umn.edu/~border/phys1905f02/oct24/rotator4.py [7/03/2005 10:35:18 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/modeller.py
from visual import *
import math
# scene.autoscale=0
#
# this program makes an object and rotates it
# this version is like rotator1, but it experiments
# with various values of various parameters
#    pmb, 10/24/02
#
# make axes
xaxis = cylinder ( pos=(0,0,0), axis=(5,0,0), radius=0.05, color=color.red )
yaxis = cylinder ( pos=(0,0,0), axis=(0,5,0), radius=0.05, color=color.green )
zaxis = cylinder ( pos=(0,0,0), axis=(0,0,5), radius=0.05, color=color.blue )
# label axes
xlabel = label ( pos= (5,0,0),text='X',height=10, border=5 )
ylabel = label ( pos= (0,5,0),text='Y',height=10, border=5 )
zlabel = label ( pos= (0,0,5),text='Z',height=10, border=5 )
#
# make a box
whiteBox = box(pos=(0,2.5,0), length= 2.0, height=5.0, width=1.0, color=color.white)
yellowBox = box(pos=(-0.5,-2,0), length= 0.7, height=4.0, width=1.0, color=color.yellow)
redBox = box(pos=(0.5,-2,0), length= 0.7, height=4.0, width=1.0, color=color.red)
blueBox = box(pos=(0,6,0), length= 1.0, height=1.0, width=1.0, color=color.blue)
#
# setup for rotation
t = 0.0
dt = 0.05
angPos = 0.0
angVel = 0.0
xAxis = ( 1,0,0 )
yAxis = ( 0,1,0 )
zAxis = ( 0,0,1 )
#
# main loop
while 1:
    rate(20)
    t = t+ dt
    # find angular velocity
    angAcc = 2 * 3.14159/100.0 * cos(t)
    angVel = angVel + angAcc * dt
    angPos = angPos + angVel * dt
    
    # the vpython "rotate" takes CHANGES to omega as argument, not omega
    whiteBox.rotate( angle= -angVel * dt, axis = xAxis, origin= xAxis )
    yellowBox.rotate ( angle = angVel * dt, axis= xAxis, origin = xAxis )
    redBox.rotate ( angle = -angVel*dt, axis= xAxis, origin = xAxis )
    blueBox.rotate ( angle = -angVel * dt, axis = xAxis, origin = xAxis )
    # docs say "The transform is a rotation of angle radians,
    # counterclockwise around the line defined by origin and
    # origin+axis."
    blueBox.rotate ( angle = angVel*dt, axis= yAxis, origin = yAxis )
http://www.hep.umn.edu/~border/phys1905f02/oct24/modeller.py [7/03/2005 10:35:21 AM]

News
Click here to start
Table of contents
News
Last Time
Total animation Loop
Collisions and Rotstions
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/nov07.html [7/03/2005 10:35:28 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov07/wallbounce.py
from visual import *
# this function does the actual movement
# of an object, given the force on it
# and time it acts
# this version doesnt do shadows
#
# 10/31/02- it also does rotation around
# the y-axis. the R argument is the
# distance from the center of mass of the object
def moveAndRotate ( obj, force, R, dt ):
    # find acceleration of CM
    acc = vector (0,0,0)
    acc = force / obj.mass
    
    # move object CM
    obj.velocity = obj.velocity + acc * dt
    obj.pos = obj.pos + obj.velocity * dt
    # now find torque and rotate it
    torque = cross ( R, force )
    alpha = torque / obj.I
    obj.angVel = obj.angVel + alpha *dt
    obj.angPos = obj.angPos + obj.angVel *dt
    # note rotate needs change to theta, not new theta
    obj.rotate ( angle = obj.angVel.y * dt, axis=(0,1,0) )
    return 
    
# make a stick slide around and bounce off a wall
# set up stick
stickL = 3
stickH = 1
stickW = 1
stick = box ( pos=( 0, 0.5, 5 ), length = stickL, height=stickH, width=stickW, color=color.red 
)
# initial velocities, masses
stick.velocity = vector( 0, 0, -0.2 )
stick.mass = 5.0
stick.I = stick.mass * ( stickL*stickL + stickW*stickW )/12.0
stick.angVel = vector( 0, 0.1, 0 )
stick.angPos = vector( 0, 0.3, 0 )
stick.rotate ( angle = stick.angPos.y, axis=(0,1,0) )
cornerR = math.sqrt( stickL*stickL/4.0 + stickW*stickW/4.0 )
cornerPhi = math.atan(stickW/stickL)
# make world
floor = box ( size = (20, 0.5, 20 ), pos = ( 0, -0.25, 10 ), color= color.green)
scene.autoscale = 0
scene.background = ( 0.8,0.8,1.0)
scene.lights = [ vector ( 0,1,0 ) ]
#collision epsilon- fraction of velocity conserved after collision
epsilon = 0.9
# mu-sub-k
muk = 1.0
# world vars
http://www.hep.umn.edu/~border/phys1905f02/nov07/wallbounce.py (1 of 3) [7/03/2005 10:35:32 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov07/wallbounce.py
g = -2
dt =0.04
drag = 0.01
# big loop
while 1:
    rate(100)
    
    # move stick- find forces and move them
    force = vector(0,0,0)
    # vector from CM to corner of stick (needed for torque in moveAndRotate )
    stickR = cornerR * vector( math.sin(stick.angPos.y),0,math.cos(stick.angPos.y) )
    
    moveAndRotate ( stick, force, stickR, dt)
    # has it hit the wall at z=0? have any of its corners?
    # lets find the corners
    phis = [ cornerPhi, -cornerPhi ]
    thetas = [ 0, 3.14159 ]
    # cycle thru corners
    for phi in phis:
        for theta in thetas:
            
            # find vector from CM to corner
            relCornerPos = cornerR * vector( math.cos( stick.angPos.y+theta+phi ),0, math.sin( 
stick.angPos.y+theta+phi ) )
            # add to cm pos to get abs position of corner
            cornerPos = stick.pos + relCornerPos
            # check if this is less than z=0
            if cornerPos.z < 0:
                # it is, we have a corner inside the wall
                print "Hit the wall!!!"
                energy = 0.5 * stick.mass * mag(stick.velocity) * mag(stick.velocity)
                energy = energy + 0.5 * stick.I * stick.angVel.y * stick.angVel.y
                print "energy before collision is ",energy
                # do a mini force loop until it has bounced out
                # n is perp to surface
                n = vector( 0,0,1 )
                
                dt2 = dt /100
                # guess at force
                dF = stick.mass * mag (stick.velocity)/dt2 * n /100
                # find closing speed
                # it is stick vcm +
                vCorner = stick.velocity
                # omega R tangent to circle
                tan2Circle = vector( math.sin(stick.angPos.y+theta+phi),0,
                                     math.cos(stick.angPos.y+theta+phi))
                vCorner = vCorner + cornerR * stick.angVel.y * tan2Circle
                # closing speed is vCorner-dot-normal
                closingSpeed = dot( vCorner, n )
                #now loop until no more closing v
                nHits = 0
                while ( closingSpeed < 0 ):
                    
                    # do some force and torque on stick
                    # find vector from CM to corner for torque
                    relCornerPos = cornerR * vector( math.cos( stick.angPos.y+theta+phi ),0,
                                                     math.sin( stick.angPos.y+theta+phi ) )
                    # do force and torque on stick
                    moveAndRotate ( stick, dF, -relCornerPos, dt2)
http://www.hep.umn.edu/~border/phys1905f02/nov07/wallbounce.py (2 of 3) [7/03/2005 10:35:32 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov07/wallbounce.py
                    nHits = nHits + 1
                    # find new closing speed
                    vCorner = stick.velocity
                    tan2Circle = vector( math.sin( stick.angPos.y + theta + phi),0,
                                     math.cos( stick.angPos.y + theta + phi))
                    vCorner = vCorner + cornerR * stick.angVel.y * tan2Circle
                    closingSpeed = dot( vCorner, n )
                # okay time to rebound
                print "collision took ", nHits, " hits"
                while ( nHits > 0):
                    moveAndRotate ( stick, dF*epsilon, -relCornerPos, dt2)
                    nHits = nHits - 1
                    
                # print energy after collision
                energy = 0.5 * stick.mass * mag(stick.velocity) * mag(stick.velocity)
                energy = energy + 0.5 * stick.I * stick.angVel.y * stick.angVel.y
                print "energy after collision is ",energy
    
    
http://www.hep.umn.edu/~border/phys1905f02/nov07/wallbounce.py (3 of 3) [7/03/2005 10:35:32 AM]

News
Click here to start
Table of contents
News
Last Time
Blender Modelling
More Odds and Ends
Animation and Blender
Particles and Blender
Lights and Shadows
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/nov12.html [7/03/2005 10:35:34 AM]

News
Click here to start
Table of contents
News
Last Time
Writing scripts
Today- Constrained Motion
Pretend There's a Spring
Linear A;lgebra
Blender and Constrained Motion
Armatures
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/nov19.html [7/03/2005 10:39:18 AM]

News
Click here to start
Table of contents
News
Where we are now
3D changes
3D Rotations
Moment of Inertia Tensor
Dynamics
Using 3D dynamics
Thursday
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/dec03.html [7/03/2005 10:41:14 AM]

News
Click here to start
Table of contents
News
Last Time
3D some more
Integrators
Algorithms
Runge-Kutta
Quaternions 
Quaternion arithmetic
Homework
Author: Pete Border
E-mail: border@physics.umn.edu
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/dec05.html [7/03/2005 10:41:45 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img0.html [7/03/2005 10:44:11 AM]

Last Time
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img1.html [7/03/2005 10:53:24 AM]

Acceleration
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img1.html [7/03/2005 10:59:52 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img0.html [7/03/2005 11:00:41 AM]

http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img2.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img2.html [7/03/2005 11:00:51 AM]

http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img3.html [7/03/2005 11:01:07 AM]

V and A are Different
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img4.html [7/03/2005 11:01:16 AM]

Acceleration in Animations
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img5.html [7/03/2005 11:01:30 AM]

Examples
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img6.html [7/03/2005 11:01:44 AM]

Constant Acceleration
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img7.html [7/03/2005 11:01:56 AM]

Homework
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/img8.html [7/03/2005 11:02:06 AM]

V and A are Different
First page Back Continue Last page Overview Graphics
V and A are Different
G     Velocity and acceleration are very different 
things
G     They dont need to be in same direction or 
prop to each other
G     Think of
H     Car slowing down 
H     High fly ball 
H     Satellite orbiting earth 
H     Train rolling down hill 
H     Superball bouncing up and down 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text4.html [7/03/2005 11:04:19 AM]

Homework
First page Back Continue Last page Overview Graphics
Homework
G     The homework this week is to play 
“Racetrack”, and write a spreadsheet which 
keeps track of your positions
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text8.html [7/03/2005 11:04:29 AM]

Today
First page Back Continue Last page Overview Graphics
Today's Topics
G     What if velocity changes?
G     Acceleration- very different from V!
G     Tied to Forces
G     Finding a from Vi, Vi+1
G     Vpython demos
G     Constant a formulas
G     Circular motion at constant speed-
spreadsheet 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text2.html [7/03/2005 11:04:36 AM]

News
First page Back Continue Last page Overview Graphics
1905.3 News
G     Last time we did position and velocity
G     Today we will talk about the homework
G     Thursday we do acceleration
G     Interactive Arts Circle meets Friday, 5:30 pm in 
Anderson 170
G     MCAD will host “Schoolgirls and Mobile 
Suits”, Anime weekend- see www.mcad.edu
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text0.html [7/03/2005 11:04:48 AM]

Acceleration
First page Back Continue Last page Overview Graphics
Last Time
G     Position specified by 3 distances from origin 
along mutually perp axes
G     Vectors have size and direction, unlike scalars
G     Vectors add to vectors, get mult'ed by scalars
G     Displacement is change of position
G     Velocity is displacement/time
G     Frame-to-frame rules: Pi+1 = Pi + Vi dt
G     Easy if V is constant!
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text1.html [7/03/2005 11:04:58 AM]

Definitions
First page Back Continue Last page Overview Graphics
Definition
G     Acceleration in a frame is the change in V 
during the frame / time during the frame = 
(Vi+1-Vi)/dt
G     A is (vector-vector)/scalar -> a is a vector, has 
both direction and size
G     Units are meters/sec**2 or meters/(frames**2)
G     “Average acceleration” over some trip from A 
to B = VB – VA / time 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text3.html [7/03/2005 11:05:06 AM]

Acceleration in Animations
First page Back Continue Last page Overview Graphics
Acceleration in Animations
G     Velocity changes; must keep track of it 
(vx,vy,and vz) in each frame, also usually 
ax,ay,az
G     Frame-to-frame rules:
H     Find ai 
H     Update v: vi+1 = vi + ai *dt 
H     Update position: pi+1 = pi + vi * dt 
H     Note: There are more accurate ways to do this 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text5.html [7/03/2005 11:05:09 AM]

Examples
First page Back Continue Last page Overview Graphics
Examples with Vpython
G     Straight-line acceleration
G     Parabolic motion
G     Circular motion at constant speed
H     Finding a from position with SS 
H     Vpython demo 
G     Springs and damped springs
G     www.vpython.org
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text6.html [7/03/2005 11:05:11 AM]

Constant Acceleration
First page Back Continue Last page Overview Graphics
Constant Acceleration
G     A is constant when falling over (cosmically) 
short distances, in lab afalling = 9.8 m/s/s 
downwards
G     Only true if air friction is small
G     Start at A and go to B; a is constant= 
H     aavg= (vB-vA)/t , so 
H     VB=VA + aavg t 
G     V is not constant from A to B, calculus says: 
H     XB = XA + vA t + ½ aavg t2 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep12/html/text7.html [7/03/2005 11:05:13 AM]

Class News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/img0.html [7/03/2005 11:05:53 AM]

Class News
First page Back Continue Last page Overview Graphics
Physics 1905.3 News
G     Welcome!
G     Why Animation?
G     Introduce yourselves
G     Syllabus
H     Grades, assignments 
H     Projects- group work and presentations 
G     How Spreadsheets Work
G     Preliminary survey
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/text0.html [7/03/2005 11:05:58 AM]

Slide 2
First page Back Continue Last page Overview Graphics
Why Animation?
G     Animation is about how things move- 
animators need to know physics
G     Animation/simulation is fun- nice motivator
G     Mistakes are obvious
G     “Frames” are very useful for physics
H     Worry about how to go from one frame to the next, not motion over long time 
H     Vastly easier 
H     Much more physical too 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/text1.html [7/03/2005 11:06:00 AM]

Syllabus
First page Back Continue Last page Overview Graphics
Syllabus
G     Posted online with WebCT
G     Freshman Seminar- 2 credits, 15 students
G     Grades from projects
H     Projects are often group work 
H     You may have to present to class 
H     Graded A-F 
H     Assigned on Thursdays, due on Tuesdays 
H     Weighted by number of weekends 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/text2.html [7/03/2005 11:06:01 AM]

Spreadsheets
First page Back Continue Last page Overview Graphics
Spreadsheets
G     Easiest way ever to handle numbers
G     “Cells” have words, numbers or formulas
G     Formulas reference other cells
G     Formulas updated when dependencies change
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/text3.html [7/03/2005 11:06:03 AM]

Slide 2
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/img1.html [7/03/2005 11:06:35 AM]

Syllabus
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/img2.html [7/03/2005 11:07:04 AM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img0.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img0.html [7/03/2005 11:07:42 AM]

News
First page Back Continue Last page Overview Graphics
Phys 1905.3 News
G     Last time we finished acceleration
G     This time we will start on forces
G     Events of interest:
H     Emerging ditterati at Weisman 10/7/02 all day- does this class want to do one of 
these????? 
H     MNSiggraph at Theatre de Jeune Lune, 10/10/02, 5:00 pm-midnight. FREE 
H     “Schoolgirls and Mobile Suits” at MCAD- see www.mcad.edu Costs $$. 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text0.html [7/03/2005 11:07:48 AM]

Last time
First page Back Continue Last page Overview Graphics
Last time
G     Last time we did the homework 
G     And talked about 2 special cases of a:
H     Circular motion at constant speed 
I     A is twd center of circle, |a| = v2/R 
I     A is not constant 
H     Constant a motion 
I     v(t) = v0 + a t 
I     x(t) = x0 + vx0 t + ½ ax t2 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text1.html [7/03/2005 11:07:52 AM]

Forces
First page Back Continue Last page Overview Graphics
Forces
G     Until now, we have covered “how” things 
move
G     Now start on “why” things move
G     Known as dynamics or kinetics
G     Things move due to forces!
G     3 basic rules (Newtons Laws)
G     Free Body Diagrams simplify adding
G     Units are newtons: 1N = 1kg m/sec2, vectors
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text2.html [7/03/2005 11:07:54 AM]

Slide 4
First page Back Continue Last page Overview Graphics
Newtons Laws
G     Isaac Newton in 1750??
G     N1: No net force on object-> a=0, object moves 
at constant velocity
G     N2: S F = m a, sum of forces on object = mass 
times acceleration (Note vector sum!)
G     N3: If object A causes force F on object B, 
then B causes force -F on A
G     All of mechanics comes from these 3 laws
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text3.html [7/03/2005 11:08:00 AM]

Example Forces
First page Back Continue Last page Overview Graphics
Examples of Forces
G     Lab gravity- everything in lab has force in 
“down” direction , |Fg| = mg 
H     g=9.8 m/s2 
G     Tension- strings make forces in “pulling” 
direction. 
H     Physics strings have exactly same size force on both ends (in opposite directions) 
H     Physics strings are usually veryvery low mass 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text4.html [7/03/2005 11:08:03 AM]

Normal forces
First page Back Continue Last page Overview Graphics
Normal forces
G     Why dont people fall thru the floor? Floor 
pushes up on them. This is a “normal force”
G     Normal force directions are always perp to 
surface.
G     Magnitude is as big as required to prevent 
fallthrough.
G     Magnitude cant be found unless other forces 
on object are known.
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text5.html [7/03/2005 11:08:05 AM]

Kinetic Friction
First page Back Continue Last page Overview Graphics
Kinetic Friction
G     Clean, dry, smooth objects sliding over other 
clean, dry, smooth surfaces have easy friction
G     Friction direction is opposite to v
G     |Friction| is prop to normal force |Fkf| = mk |N|
G     Doesnt depend on area of contact surface or 
size of v
G     There are many other kinds of friction!
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text6.html [7/03/2005 11:08:08 AM]

Using Newton's Laws
First page Back Continue Last page Overview Graphics
Using Newton's Laws
G     Draw a picture of the situation
G     Then draw a picture of each object with all the 
forces that happen to it
G     Break each force into x,y,z components
G     S Fx = m ax ; S Fy = m ay ; S Fz = m az
G     Can use spreadsheets to solve problems
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text7.html [7/03/2005 11:08:10 AM]

Trigonometry Reminder
First page Back Continue Last page Overview Graphics
Trigonometry
G     Spose you have vector's magnitude, but need 
x and y parts
G     Use sin, cos to find x, y parts
G     |v| = sqrt (vx2 + vy2 + vz2) 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text8.html [7/03/2005 11:08:12 AM]

Example of Forces
First page Back Continue Last page Overview Graphics
Example scenario
G     You're working on a snowspeeder game, and 
want to have a skidoo drag a sled up a 20 deg. 
hill with a rope
G     the rope is 30 deg from horizontal
G     You know the sled mass, mu-k and force on 
rope 
G     What happens to the sled?
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text9.html [7/03/2005 11:08:17 AM]

Example Free Body Diagram
First page Back Continue Last page Overview Graphics
Free Body Diagram
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text10.html [7/03/2005 11:08:19 AM]

Slide 12
First page Back Continue Last page Overview Graphics
Comments on FBD
G     Okay, the FBD gives us algebra tying everything together. But how does it solve the problem? We 
still dont know how large N is, and without that, we cant find a. 
G     What else do we know? We know that the sled moves up the hill. 
G     What does that mean? 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text11.html [7/03/2005 11:08:27 AM]

Homework
First page Back Continue Last page Overview Graphics
Homework
G     This weeks homework is to
H     download and install vpython from www.vpython.org 
H     download the vpython documentation from same site 
H     look at demo files (especially bounce.py and bounce2.py) 
H     make your own demo program that does something interesting 
H     python information is at www.python.org 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/text12.html [7/03/2005 11:08:30 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img0.html [7/03/2005 11:08:55 AM]

News
First page Back Continue Last page Overview Graphics
Physics 1905.3 News
G     Last time we did friction forces
G     This time we start on collisions
G     Events of note:
H     Digerati at Weisman 10/7/02 6-7:30 pm 
H     MNSiggraph at Jeune Lune 10/10/02 5-midnite 
H     DIG.IT! at Walker 10/15-10/20 
I     10/17 Student Forum (free) 
I     10/19 Quake! Doom! Sims! ($7) 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text0.html [7/03/2005 11:08:57 AM]

Last time
First page Back Continue Last page Overview Graphics
Last time
G     Last time we talked about more forces
G     Springs: F = -k x where x is “stretch” from 
“rest position”
G     Static Friction: |Fs| < ms |N|, dir opposes slip
H     Buoyancy: |F| = r V, dir is up 
H     laminar drag: F = -Cf v 
H     Turbulent drag: |Fd| = Cf v2, dir is -v 
H     Lift, Magnus effect- see Bourg 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text1.html [7/03/2005 11:09:00 AM]

This time
First page Back Continue Last page Overview Graphics
This time
G     Finish controls with keyboard
G     Two programming hints
G     Start on collisions
H     When balls collide 
H     Forces in very tight loop 
H     When does the loop end? 
H     Demo 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text2.html [7/03/2005 11:09:02 AM]

Programming Hints
First page Back Continue Last page Overview Graphics
Fake Shadows, etc.
G     Shadows of Balls are cylinders 0.05 high
H     shade.pos.x= ball.pos.x, same for y 
G     No digging if you change ball.pos as well as 
ball.v
H     if it originally went to ball.y= -0.02, change it to ball.y= +0.02 for a bounce off y=0 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text3.html [7/03/2005 11:09:03 AM]

Functions
First page Back Continue Last page Overview Graphics
Functions
G     Sometimes there is a chunk of code you need 
to do several times
G     make it a function- between def and return
H     bifster.velocity = myfunc( joe, sam, debby) 
G     arguments- can feed in variables for 
calculation, rename inside function
H     def myfunc( obj1, obj2, obj3 ) 
G     return at end - may hand back something 
H     return obj2.velocity 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text4.html [7/03/2005 11:09:05 AM]

Collisions 1
First page Back Continue Last page Overview Graphics
What happens in collisions?
G     Two balls collide- 
G     very fast! big forces!
G     Forces! what kind? 
G     Force pairs
G     Forces work until no closing velocity
G     Then (maybe) more force in rebound
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text5.html [7/03/2005 11:09:07 AM]

Collision Detection
First page Back Continue Last page Overview Graphics
Collision Detection
G     When do objects collide?
G     Real answer is very hard...
G     Many shortcuts!
G     Treat everything as spheres- if mag(A.pos-
B.pos) < (A.radius+B.radius), collided!
G     use bounding boxes
H     Axis-aligned or oriented 
G     tile space; only need to look at tiles with two 
or more occupants
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text6.html [7/03/2005 11:09:11 AM]

What forces?
First page Back Continue Last page Overview Graphics
What kinds of forces?
G     Force keeps balls from interpenetrating
H     Normal force! 
H     perp to surface, as big as required (?) 
G     Force due to balls scraping past each other
H     Friction! 
H     parallel to surfaces, opposite slippage 
H     sliding- kinetic |F| = mk |N| 
H     stopped- static |F| < ms |N| 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text7.html [7/03/2005 11:09:13 AM]

Collision force loop
First page Back Continue Last page Overview Graphics
Collision force loop
G     collisons are very fast- make a loop with 
dt2=dt/100
G     add a little force dF to A, -dF to B
G     find new v's. pos
G     still closing? yes- loop, no-
G     rebound- do another loop, add e dF at each 
step, do same # steps
G     this way friction is easy; just add to dF
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text8.html [7/03/2005 11:09:23 AM]

Closing Velocity
First page Back Continue Last page Overview Graphics
Closing velocity??
G     Need to know “closing velocity”, or “velocity 
along a line joining centers”
G     Given by dot( v,n ) = nx*vx+ny*vy+nz*vz
G     dot multiply two vectors, get a scalar
G     dot( A,B ) is the amount of B in direction of A
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text9.html [7/03/2005 11:09:25 AM]

Rebound
First page Back Continue Last page Overview Graphics
The rebound
G     Objects get squished during 1st phase of 
collision
G     When vclose=0, objects are really squished
G     Some objects stay that way! ( e=0, “perfectly 
inelastic” ) Think of silly putty....
G     Some objects bounce back to original state ( 
e=1, “elastic” ) Think of pool balls...
G     Most come back some of the way, not all ( 
e~0.8, “inelastic” ) Superball e~ 0.95
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text10.html [7/03/2005 11:09:27 AM]

Homework
First page Back Continue Last page Overview Graphics
Homework for 10/8/02
G     Finish trajectory game
G     Read Bourg, 87-95, 98-100
G     Next week we will talk about momentum, 
impulse, etc.
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/text11.html [7/03/2005 11:09:29 AM]

Programming Hints
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img3.html [7/03/2005 11:09:55 AM]

Last time
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img1.html [7/03/2005 11:10:37 AM]

This time
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img2.html [7/03/2005 11:10:46 AM]

Functions
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img4.html [7/03/2005 11:11:09 AM]

Collisions 1
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img5.html [7/03/2005 11:11:28 AM]

Collision Detection
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img6.html [7/03/2005 11:11:44 AM]

What forces?
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img7.html [7/03/2005 11:11:56 AM]

Collision force loop
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img8.html [7/03/2005 11:12:08 AM]

Closing Velocity
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img9.html [7/03/2005 11:12:19 AM]

Rebound
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img10.html [7/03/2005 11:12:37 AM]

Homework
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct03/html/img11.html [7/03/2005 11:12:56 AM]

Python Programming Language
Search: 
 
  Home 
Search 
Download 
Documentation 
Help 
Developers 
Community 
SIGs 
What is Python? 
Python FAQs 
Python versions 
Python 2.4 (docs) 
Python 2.3 (docs) 
Python 2.2 (docs) 
MacPython 
http://www.python.org/ [7/03/2005 11:13:54 AM]
submit

News
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img0.html [7/03/2005 11:14:36 AM]

Today
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img1.html [7/03/2005 11:14:47 AM]

Slide 3
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img2.html [7/03/2005 11:15:08 AM]

Coordinate Systems
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img3.html [7/03/2005 11:15:28 AM]

More on Coordinates
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img4.html [7/03/2005 11:15:41 AM]

Slide 6
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img5.html [7/03/2005 11:15:53 AM]

Math with Vectors
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img6.html [7/03/2005 11:16:02 AM]

Displacements and Time
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img7.html [7/03/2005 11:16:13 AM]

Velocity 
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img8.html [7/03/2005 11:16:26 AM]

From One Frame to the Next
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img9.html [7/03/2005 11:16:39 AM]

Constant Velocity
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img10.html [7/03/2005 11:16:55 AM]

Averaging velocities
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img11.html [7/03/2005 11:17:19 AM]

Homework
First page Back Continue Last page Overview Text
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/img12.html [7/03/2005 11:17:40 AM]

Slide 6
First page Back Continue Last page Overview Graphics
Vectors and Scalars
G     Position is one idea, 3 numbers- a Vector!
G     Vectors have size and direction
G     Usually drawn as arrows
G     An Object, in programming terms
G     Contrast to, for example, temperature
H     One idea, one number- a Scalar 
G     Magnitude is 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text5.html [7/03/2005 11:20:55 AM]

News
First page Back Continue Last page Overview Graphics
Phys 1905.3 News
G     First Homework due next Tuesday
G     No Late Homework without advance approval
G     Last time we talked about 
H     Syllabus, introductions, etc 
H     Physics for animators 
H     Animation for physicists 
G     Physics gives rules to get from one frame to 
next
G     Computers string frames together
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text0.html [7/03/2005 11:20:58 AM]

Today
First page Back Continue Last page Overview Graphics
Today's Topics
G     Specifying position
G     Coordinate systems
G     Vectors and Scalars
G     Displacements
G     Velocity
G     From one Frame to the Next
G     Constant Velocity
G     Average V and Speed
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text1.html [7/03/2005 11:21:01 AM]

Slide 3
First page Back Continue Last page Overview Graphics
Position
G     Normal life has many ways to specify position
H     Lunch at the Dinkydome 
H     I'm at 624-1020 
H     Classes are in Phys 210. 
H     4342 Tenth Ave South 
H     43o 10.32' South, 97o 32.12' East, 2341 feet underwater 
H     http://www.slashdot.org 
H     TL 8321.45A2 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text2.html [7/03/2005 11:21:02 AM]

Coordinate Systems
First page Back Continue Last page Overview Graphics
X-Y-Z Coordinates
G     Positions must be computer-friendly
G     x-y-z coordinates
G     3 axes at right angles to each other
G     Position specified by 3 distances from origin
G     Origin and angles chosen for ease of use
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text3.html [7/03/2005 11:21:04 AM]

More on Coordinates
First page Back Continue Last page Overview Graphics
More on XYZ Coordinates
G     Origin can be moving- as long as it doesnt 
accelerate, physics experiments get same 
results
G     Units are usually meters
G     You made up the system- answers must same 
for all systems
G     Distance from point A to point B is
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text4.html [7/03/2005 11:21:06 AM]

Math with Vectors
First page Back Continue Last page Overview Graphics
Vector Math
G     Vectors can add to other vectors, not to 
scalars 
G     Vectors can be multiplied by scalars
G     More to come!
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text6.html [7/03/2005 11:21:11 AM]

Displacements and Time
First page Back Continue Last page Overview Graphics
Displacements and Time
G     Change in position is called a “displacement”
G     Displacements are vectors 
G     Displacements take place over time
G     Displacement from A to B is B-A
G     Time for animators is in frames ( 1/24th of a 
second for movies)
G     Time for physicists is in seconds
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text7.html [7/03/2005 11:21:14 AM]

Velocity 
First page Back Continue Last page Overview Graphics
Velocity in a Frame
G     An objects velocity is its displacement/time 
G     If an object has displacement D in time dt, 
V=D/dt
G     Velocity in a frame is (displacement during the 
frame) / (time in the frame) = D/dt
G     If it goes from pos A to pos B in one frame
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text8.html [7/03/2005 11:21:16 AM]

From One Frame to the Next
First page Back Continue Last page Overview Graphics
From One Frame to the Next
G     If we know position at start of a frame, and the 
velocity during the frame
G     Position at end of frame is easy! 
G     V= D/dt, so D=V dt
G     Now we just need to find V during the frame, 
and how that changes- this is the rest of the 
course
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text9.html [7/03/2005 11:21:19 AM]

Constant Velocity
First page Back Continue Last page Overview Graphics
Constant Velocity
G     Sometimes V is constant (in both magnitude 
and direction) for long times
G     Going from one frame to next is particularly 
easy
G     Always add same displacement!
G     Can predict position for long time periods
G     Do things moving in circles move at constant 
velocity?
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text10.html [7/03/2005 11:21:21 AM]

Averaging velocities
First page Back Continue Last page Overview Graphics
Averaging Velocities
G     Suppose you have something moving over a 
long time, and V changes (speeds up, stops, 
turns, etc)- there are 2 versions of “typical 
velocity”
G     Average velocity= total displacement / total 
time
H     Only depends on start, stop positions- independent of path 
H     Vector! 
G     Speed= total distance travelled / total time
H     “odometer” distance, depends on path 
H     Scalar! 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text11.html [7/03/2005 11:21:24 AM]

Homework
First page Back Continue Last page Overview Graphics
Home work
G     Homework is due next Tuesday, 9/10/02 at 
start of class- no late homework without prior 
authorization!
G     Some homeworks will be discussed in class
G     Your assignment: Find a scenario in real life 
that moves at a constant velocity. Write a 
paragraph, in English, describing your 
scenario. Then make a spreadsheet that 
predicts where it will be in the future.
G     Also read pages 1-5 and 25-48 in Bourg book- 
dont worry about the C++ code
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep05/html/text12.html [7/03/2005 11:21:27 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img0.html [7/03/2005 11:22:09 AM]

Last time
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img1.html [7/03/2005 11:22:32 AM]

Collision loop
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img2.html [7/03/2005 11:22:58 AM]

Collision Vocabulary
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img3.html [7/03/2005 11:23:14 AM]

Center of Mass
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img4.html [7/03/2005 11:23:32 AM]

Momentum
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img5.html [7/03/2005 11:23:47 AM]

Conservation of Momentum
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img6.html [7/03/2005 11:24:06 AM]

Impulse
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img7.html [7/03/2005 11:24:27 AM]

Kinetic Energy
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img8.html [7/03/2005 11:24:39 AM]

Homework
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/img9.html [7/03/2005 11:24:52 AM]

News
First page Back Continue Last page Overview Graphics
Phys 1905 News
G     Last time we did classes
G     Today we finish collisions
G     Next Tuesday is homework day
G     Next Thursday start Rigid Bodies
G     Events of interest: 
H     DIG.IT! Student show is tonight (free) 
H     DIG.IT! Game engine show is Saturday night($7) 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text0.html [7/03/2005 11:30:34 AM]

Last time
First page Back Continue Last page Overview Graphics
Two weeks ago
G     Covered Collisions- when spheres bounce
G     Collision detection is complicated, use several 
algorithms
H     space tiles 
H     Bounding Boxes- spheres, AABBs, or OBBs 
H     Hierarchies of BB's 
G     Collisions best modelled as very fast (dt is 
small) dynamic loops
G     Forces are all normals and friction
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text1.html [7/03/2005 11:30:38 AM]

Collision loop
First page Back Continue Last page Overview Graphics
Collision Loop
G     Use tiny time step ( dt/100)
G     Guess at total force, set df = total/100
G     Loop:
H     do df to one object, -df to other 
H     find closing velocity 
H     still closing? do again 
H     Now into rebound- do e df to each object same number of times 
H     e depends on whats colliding 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text2.html [7/03/2005 11:30:42 AM]

Collision Vocabulary
First page Back Continue Last page Overview Graphics
Collision Vocabulary
G     6 concepts usually used with collisions
G     dynamic loop is better at complicated 
collisions
H     easier to add friction and rotation 
H     what if the bodies hit, stick, slide, spin, crumple? 
G     Vocabulary is standard
H     need it to read about collisions 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text3.html [7/03/2005 11:30:47 AM]

Center of Mass
First page Back Continue Last page Overview Graphics
Center of Mass
G     Center of mass is an imaginary point that 
moves as the objects move
G     posCM = ( pos1 m1 + pos2 m2 )/(m1 + m2)
G     As long as the forces on the objects ONLY 
come from each other, CM moves in straight 
lines at constant speeds
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text4.html [7/03/2005 11:30:49 AM]

Momentum
First page Back Continue Last page Overview Graphics
Momentum
G     defined as p = m v
G     for several body system, ptot = mtot vCM
G     If no outside forces, ptot is always the same
H     aka “conservation of momentum” 
G     Loops add a dt to v; same as adding F dt to p 
H     over long run, p changes by the sum of all the F dt's added to it 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text5.html [7/03/2005 11:30:51 AM]

Conservation of Momentum
First page Back Continue Last page Overview Graphics
Conservation of Momentum
G     If there are only internal forces, then Ptot is 
always the same
G     If there are outside forces, Ptot changes
H     what is an outside force?? 
G     If Ptot = mtot VCM, is constant then Vcm is 
constant (acm=0), CM moves in straight lines 
at constant velocities
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text6.html [7/03/2005 11:30:53 AM]

Impulse
First page Back Continue Last page Overview Graphics
Impulse
G     Impulse is the name for S F dt
G     every dt we add a dt to v, which is the same as 
adding F dt to p
G     S F dt is the total change in p == impulse!
G     Impulse is somewhat easier to use than F and 
dt- F is large and dt is small; impulse is easier 
to add accurately
H     less prone to numerical disasters 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text7.html [7/03/2005 11:30:55 AM]

Kinetic Energy
First page Back Continue Last page Overview Graphics
Kinetic Energy
G     There is energy associated with motion
G     KE = ½ m v2
G     KE is usually NOT conserved in collision; 
friction causes energy to be lost inside 
molecular structures
G     inelastic collisions ( e=0 ) lose max KE 
possible (p is still conserved during collision)
G     elastic ( e=1 ) collisions conserve KE
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text8.html [7/03/2005 11:30:57 AM]

Homework
First page Back Continue Last page Overview Graphics
Next week
G     Next week we will begin talking about objects that can rotate. First we will talk about objects that 
only rotate in a plane, then later we will do real 3D rotations. 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct17/html/text9.html [7/03/2005 11:31:06 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img0.html [7/03/2005 11:31:49 AM]

Last Time
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img1.html [7/03/2005 11:32:06 AM]

Rigid Bodies
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img2.html [7/03/2005 11:32:22 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img3.html [7/03/2005 11:32:39 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img4.html [7/03/2005 11:32:56 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img5.html [7/03/2005 11:33:18 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img6.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img6.html [7/03/2005 11:34:04 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img7.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img7.html [7/03/2005 11:34:26 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img8.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img8.html [7/03/2005 11:34:45 AM]

http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img9.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img9.html [7/03/2005 11:35:02 AM]

Definition of Torque
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img10.html [7/03/2005 11:35:17 AM]

Moment of Inertia
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img11.html [7/03/2005 11:35:31 AM]

F=ma for rotations
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img12.html [7/03/2005 11:35:43 AM]

Homework
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/img13.html [7/03/2005 11:35:53 AM]

News
First page Back Continue Last page Overview Graphics
Phys 1905.3 News
G     Website has moved to
H     http://www.physics.umn.edu/~border/phys1905f02 
G     Today we will go over homework
G     Thursday we start on rigid bodies
G     Have a look at Numerical Python at 
sourceforge.net
H     IAC this Friday; 5:30 in Anderson 170 
H     Digerati first Monday in November 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text0.html [7/03/2005 11:41:31 AM]

Last Time
First page Back Continue Last page Overview Graphics
Last Time- Collision Vocab
G     Center of Mass- average position of several 
objects
G     Momentum p = mv 
G     Total momentum ptot = mtot vCM
G     No external forces-> ptot doesnt change
H     “momentum conservation” 
G     Kinetic energy KE = ½ m v2
G     KE may be conserved (elastic), or maybe not
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text1.html [7/03/2005 11:41:35 AM]

Rigid Bodies
First page Back Continue Last page Overview Graphics
Extended Bodies
G     So far, we have only talked about particle 
motions
G     Today we start with extended objects
G     The basics of dynamics ( F=ma, Fab= -Fba ) 
continue unchanged
H     use vCM where used to have v 
H     S F = mtot aCM 
G     New thing is rotation
H     can have motion without changing position 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text2.html [7/03/2005 11:41:37 AM]

Planar Rotation
First page Back Continue Last page Overview Graphics
Planar Rotation
G     Easiest to start with rotations in a plane; no 
wobbling
G     examples are
H     turntables, wheels, balls rolling down hills 
G     axis stays in same direction; object just goes 
around faster or slower- axis is usually 
through CM
G     things can move around as well as rotate- CM 
motion comes S F = mtot acm
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text3.html [7/03/2005 11:41:38 AM]

Angular Position
First page Back Continue Last page Overview Graphics
Angular Position
G     Planar rotation only needs one number to 
specify rotation- call it W
G     Point at (x,y) before rotation by W is at (x+rcos 
W,y+r sinW ) afterwards
G     Point moves through distance r W in the 
process
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text4.html [7/03/2005 11:41:42 AM]

Angular Velocity
First page Back Continue Last page Overview Graphics
Angular Velocity
G     As an object rotates through angle dW,the 
parts of the object move; they have a nonzero 
velocity even if the CM is stationary
G     Vpt = dist/time = rpt dW/dt = rpt w
G     w is “angular velocity” 
G     units are radians/sec
G     visualize as a vector parallel to axis; direction 
from Right-hand-rule
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text5.html [7/03/2005 11:41:44 AM]

Animation loops and Angles
First page Back Continue Last page Overview Graphics
Animation and Rotations
G     Angular velocity works very similar to regular 
velocity in animation loop
G     Change in angle between frame i and i+1 is 
given by wi dt
H     Wi+1 = Wi + wi dt 
H     draw object rotated by Wi+1 
H     OK as long as you know what wi is..... 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text6.html [7/03/2005 11:41:51 AM]

w changes
First page Back Continue Last page Overview Graphics
Suppose w changes...
G     What happens if wi is not = wi+1 ?
G     Known as “angular acceleration”, or a
H     ai = change in w between frames i and i+1 
G     Add into animation loop same as regular 
acceleration
H     wi+1 = wi + ai t 
H     Wi+1 = Wi + wi dt 
H     draw object rotated by Wi+1 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text7.html [7/03/2005 11:41:52 AM]

Angular and Linear Acceleration
First page Back Continue Last page Overview Graphics
Angular and Linear 
G     Points on rotating objects are moving
G     In time dt, a point rpt from axis moves through 
distance s = rpt dW = rpt w dt with v = rpt w
G     What about acceleration? 
G     Two pieces- one is twd center
H     aradial = v2/rpt= rpt2 w2 / rpt = w x ( w x rpt ) 
G     Other is tangent to circle
H     atang = a x rpt 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text8.html [7/03/2005 11:41:54 AM]

torques
First page Back Continue Last page Overview Graphics
But where does a come from?
G     a comes from torque 
G     force applied to extended object doesnt just 
accelerate it; also makes it spin faster
G     How much a depends on three things
H     bigger force-> more a 
H     farther from center-> more a for same force 
H     force points at center-> less a for same force 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text9.html [7/03/2005 11:41:57 AM]

Definition of Torque
First page Back Continue Last page Overview Graphics
Definition of Torque
G     Put all three together and get M = r x F
G     | r x F | = |r| |F| sin q
G     r x F = 
H     ( ry Fz – rz Fy, 
H     rz Fx – rx Fz, 
H     rx Fy – ry Fx ) 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text10.html [7/03/2005 11:41:58 AM]

Moment of Inertia
First page Back Continue Last page Overview Graphics
Moment of Inertia
G     Finally need some rotational version of mass
G     tells how much a you get from a torque
G     depends on object being rotated
G     divide object into pieces; add up ( r2 dm ) for 
each piece
G     known as “inertia tensor” 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text11.html [7/03/2005 11:42:00 AM]

F=ma for rotations
First page Back Continue Last page Overview Graphics
F=ma for rotations
G     Finally have version of SF=ma for rotations, 
tells how much a you get for a torque M on 
object with moment I
G     S M = I a
G     Loop to get frame i to i+1
H     find all forces; find S torques M from M = r x F 
H     find ai from S torques and I 
H     wi+1 = wi + ai dt 
H     Wi+1 = Wi + wi dt 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text12.html [7/03/2005 11:42:02 AM]

Homework
First page Back Continue Last page Overview Graphics
Homework
G     Homework this week is to finish the collider games 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct24/html/text13.html [7/03/2005 11:42:05 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img0.html [7/03/2005 11:42:33 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img1.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img1.html [7/03/2005 11:42:43 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img2.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img2.html [7/03/2005 11:42:56 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/img3.html [7/03/2005 11:43:15 AM]

News
First page Back Continue Last page Overview Graphics
Phys 1905.3 News
G     Website has moved to
H     http://www.physics.umn.edu/~border/phys1905f02 
G     Today we will do more with Blender
G     Events of interest
H     IAC tomorrow night, Anderson 170- Gary Dahl on fabricating textures 
H     MNSiggraph in Phys 435 next wednesday night 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/text0.html [7/03/2005 11:44:14 AM]

Last Time
First page Back Continue Last page Overview Graphics
Last Time- Rotations 2
G     How does w change?
G     Changes due to torque M acting on object with 
moment of inertia I
H     M = r x F 
H     I = S r2 Dm 
H     M =I a 
G     This is F=ma for rotational motions
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/text1.html [7/03/2005 11:44:24 AM]

Total animation Loop
First page Back Continue Last page Overview Graphics
Rigid Body Animation Loop
G     Loop to get from frame i to i+1
H     find all forces, get a from SF=ma 
H     update v: vi+1 = vi + a dt 
H     update pos: posi+1 = posi + vi dt 
H     find S torques M from SM = r x F 
H     find ai from S torques and I 
H     update w: wi+1 = wi + ai dt 
H     update W: Wi+1 = Wi + wi dt 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/text2.html [7/03/2005 11:44:28 AM]

Collisions and Rotstions
First page Back Continue Last page Overview Graphics
Collisions and Rotations
G     How do rotations fit in with collisions?
G     Same as before- collisions just make new 
forces
H     add in little loop that swaps forces and torques until closing speed =0, then rebounds 
H     note torques need to know where collision forces are acting 
G     Collision detection is more complicated- must 
check body-body intersections
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov07/html/text3.html [7/03/2005 11:44:32 AM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img0.html [7/03/2005 11:46:59 AM]

News
First page Back Continue Last page Overview Graphics
Physics 1905.3 News
G     Last time we talked about scripting with 
Blender
G     Today is a homework day
G     Thursday we will talk about constrained 
motion and Iks
G     News
H     www.blender.org has some nice scripting docs 
H     www.elysiun.com does too 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text0.html [7/03/2005 11:47:23 AM]

Last Time
First page Back Continue Last page Overview Graphics
Last Time
G     Scripting with Blender
G     Type script into text window, give it a name
G     link script (via script button) to either
H     object, world, lamp, material, .... 
G     script is executed every time frames changes
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text1.html [7/03/2005 11:47:26 AM]

Writing scripts
First page Back Continue Last page Overview Graphics
Writing Scripts
G     world script-> obj=Blender.Object.Get(name)
G     object script-> obj=Blender.Link()
G     change position with obj.LocX=-12.5, etc
G     change velocity with obj.dLocX = 12
G     rotate with obj.RotX = 3.14159
G     list of changeables on RHS of IPO window
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text2.html [7/03/2005 11:47:27 AM]

Today- Constrained Motion
First page Back Continue Last page Overview Graphics
Two linked objects
G     Spose we have two sticks tied together and 
push on one- how does that move??
G     F=ma! But what is F for each stick?
G     Depends on how much force goes through the 
link
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text3.html [7/03/2005 11:47:29 AM]

Pretend There's a Spring
First page Back Continue Last page Overview Graphics
Pretend There's a Spring
G     Force of A on B = -Force of B on A
G     Sticks move in such a way that link attach 
points stay on top of each other- a constraint
G     We could pretend the points are connected by 
a little spring- spring forces are easy; will keep 
them connected; add a little damping at the 
joint too
G     Falls apart if separation ever becomes large-> 
huge forces
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text4.html [7/03/2005 11:47:46 AM]

Linear A;lgebra
First page Back Continue Last page Overview Graphics
Simultaneous Equations
G     OR, we can write down equations of motion 
for both sticks, include FAB
H     wind up with F=ma and M=Ia for both sticks 
G     Constraint is that link pts stay together <-> 
their accelerations are equal
G     Write down another equation about alinkA = 
alinkB; has unknowns aA, aB, aA and aB
G     This bunch of equations is solvable
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text5.html [7/03/2005 11:47:48 AM]

Blender and Constrained Motion
First page Back Continue Last page Overview Graphics
Blender and Forward Kinematics
G     Blender parenting allows building hierarchies
H     hands are children of lower arms 
H     lower arms are children of upper arms 
H     upper arms are children of torso 
H     head is child of torso 
G     rotate torso and everything goes with it
G     rotate upper arm and lower arm moves too
G     “forward kinematics”
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text6.html [7/03/2005 11:47:49 AM]

Armatures
First page Back Continue Last page Overview Graphics
Armatures
G     Blender allows “bones”- objects to tie other 
objects to
H     bones are NOT in the final render- purely for control 
G     Can make hierarchies of bones
G     Can have “inverse kinematics”-move lowest 
and others move to fit- handy for feet
G     known as “armatures”- 
H     http://www.elysiun.com 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/text7.html [7/03/2005 11:47:51 AM]

Last Time
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img1.html [7/03/2005 11:48:15 AM]

Last Time
First page Back Continue Last page Overview Graphics
Last Time- Collisions and Rotations
G     How do rotations fit in with collisions?
G     Same as before- collisions just make new 
forces
H     add in little loop that swaps forces and torques until closing speed =0, then rebounds 
H     note torques need to know where collision forces are acting 
G     Collision detection is more complicated- must 
check body-body intersections
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text1.html [7/03/2005 11:48:46 AM]

News
First page Back Continue Last page Overview Graphics
Phys 1905.3 News
G     Website has moved to
H     http://www.physics.umn.edu/~border/phys1905f02 
G     Today we will continue with Blender
G     Events of interest
H     MNSiggraph in Phys 435 tommorrow night- we will look over proceedings from last 2 
siggraphs and talk about animation and physics 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text0.html [7/03/2005 11:48:50 AM]

Blender Modelling
First page Back Continue Last page Overview Graphics
Modelling with Blender
G     How do you make a single object out of 
several meshes?
H     make the next object while editing the first 
G     How do you change an objects center?
H     look under “points” with the object selected- find “center new” button 
G     What are NURBS?
H     under toolbox, surfaces- donut, etc 
G     How about metaballs?
H     under toolbox, see metaball 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text2.html [7/03/2005 11:49:03 AM]

More Odds and Ends
First page Back Continue Last page Overview Graphics
More Odds and Ends
G     What are constraints? 
H     They let you have a light track some object- enter the lamps name in the constraint field 
H     or one object can track another in x only 
G     How can I find some objects name? 
H     select it and click constraints 
H     or go to points and click on show name 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text3.html [7/03/2005 11:49:06 AM]

Animation and Blender
First page Back Continue Last page Overview Graphics
Animation and Blender
G     Simple animation with keyframes
H     put things where you want, get to desired frame, hit “I” key 
G     IPO window lets you adjust keyframes
H     IPO window allows editing of keyframed params, edits same as other points 
G     Object can follow defined paths
H     make object and path, then select object, shift-select path. Finally hit ctrl-P to make the 
path the parent 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text4.html [7/03/2005 11:49:09 AM]

Particles and Blender
First page Back Continue Last page Overview Graphics
Particles and Blender
G     make object to be emitter
G     click on “animation” button
G     set up particle params and supply particle 
texture
G     particles are emitted by vertices of emitter 
object
G     texture can evolve with time
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text5.html [7/03/2005 11:49:11 AM]

Lights and Shadows
First page Back Continue Last page Overview Graphics
Lights and Shadows
G     Lamps are made from toolbox
G     Select lamp, then click on light-bulb to change 
params
G     Spotlight makes shadows; others do not
G     can make light track object with constraints
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/text6.html [7/03/2005 11:49:14 AM]

Blender Modelling
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img2.html [7/03/2005 11:49:35 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img3.html [7/03/2005 11:50:12 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img4.html [7/03/2005 11:50:27 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img5.html [7/03/2005 11:50:36 AM]

http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img6.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov12/html/img6.html [7/03/2005 11:50:56 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img0.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img0.html [7/03/2005 11:51:32 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img1.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img1.html [7/03/2005 11:51:45 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img2.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img2.html [7/03/2005 11:52:08 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img3.html [7/03/2005 11:52:29 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img4.html [7/03/2005 11:52:48 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img5.html [7/03/2005 11:53:02 AM]

Using 3D dynamics
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img6.html [7/03/2005 11:53:13 AM]

Thursday
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/img7.html [7/03/2005 11:53:23 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img0.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img0.html [7/03/2005 11:54:51 AM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img1.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img1.html [7/03/2005 11:59:47 AM]

Moment of Inertia Tensor
First page Back Continue Last page Overview Graphics
Moment of Inertia Tensor
G     I has to be a matrix to handle general axes
G     Multiply w by I to get angular momentum H
G     matrix multiplication- rows, columns, etc
G     Ixx = S ( y2 + z2 ), Ixy = - S ( xy), etc
G     off-axis pieces=0 for symmetric bodies
G     I changes as object rotates around
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text4.html [7/03/2005 12:00:04 PM]

Dynamics
First page Back Continue Last page Overview Graphics
Basic Dynamics
G     F=ma becomes S Mcm = d/dt ( Iw ) 
G     Recalculating I every step is hard- just rotate 
one in body coords- how does that change?
G     d/dt ( Iw ) = w x (Ibody w) + I dw/dt
G     first piece is wobble; second is speed/slow
G     if no torque-> w x ( Ibody w ) = - I dw/dt
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text5.html [7/03/2005 12:00:11 PM]

News
First page Back Continue Last page Overview Graphics
News
G     Today we start 3D rotations
G     Thursday we will finish 3D/start on integration 
methods
G     No final exam
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text0.html [7/03/2005 12:00:15 PM]

Where we are now
First page Back Continue Last page Overview Graphics
Progress to date
G     Particle motions: F=ma
G     rigid bodies: Ftot = mtot aCM
G     planar rotation: S Mcm = I a
G     3D rotation: S Mcm = d/dt ( I w )
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text1.html [7/03/2005 12:00:22 PM]

3D changes
First page Back Continue Last page Overview Graphics
Changes with 3D 
G     3D rotations need at least 3 numbers
H     other schemes too- R matrices, quaternions 
G     Moment of Inertia has to work for different 
axes
H     becomes a matrix (tensor) instead of a number 
G     Moment of inertia changes as object rotates
H     two ways for Iw to change; use chain rule 
G     Two reference frames- earth and body
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text2.html [7/03/2005 12:00:25 PM]

3D Rotations
First page Back Continue Last page Overview Graphics
3D Angles
G     Blender uses qx, qy, qz to specify 3d rotation
G     result depends on order applied- diff small for 
small changes
G     Rotation matrices rotate vectors in body 
system into earth system
G     formulas for R, dR/dt, R-1
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text3.html [7/03/2005 12:00:28 PM]

Writing scripts
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img2.html [7/03/2005 12:01:07 PM]

http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img3.html [7/03/2005 12:01:20 PM]

http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img4.html [7/03/2005 12:01:36 PM]

http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img5.html [7/03/2005 12:01:50 PM]

http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img6.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img6.html [7/03/2005 12:02:07 PM]

http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img7.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/nov19/html/img7.html [7/03/2005 12:02:28 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img3.html [7/03/2005 12:10:59 PM]

VPython
VPython
3D Programming for Ordinary Mortals
VPython is a package that includes: 
G     the Python programming language, with the IDLE 
interactive development environment 
G     "Visual", a Python module that offers real-time 3D 
output, and is easily usable by novice programmers
G     "Numeric", a Python module for fast processing of 
arrays
VPython is free and open-source.
Brief overview of VPython
Download
(Windows, Mac, Linux, Unix)
Subscribe to VPython
mailing list 
Simple program example
Documentation
Recent developments
Tutorial Introduction
FAQ
Announcement: Change to mouse functioning starting with Python 2.2
Other links:
The Python language 
www.python.org
A module by Ruth Chabay to export a 
VPython scene to POV-Ray: 
povexport-2004-07-22.zip
For developers: source 
files etc.
Matter & Interactions, an 
introductory 
physics course using 
VPython
Contributed programs from users
The cT archives
Members of the team who originally worked on VPython at Carnegie Mellon:
David Scherer 
David Andersen 
Ruth Chabay 
Ari Heitner 
Ian Peters
Bruce Sherwood basherwo@unity.ncsu.edu 
   (Write if you don't find what you need, or to tell us how you are using VPython)
Major contributions have been made by Jonathan Brandmeyer, North Carolina State University
http://www.vpython.org/ (1 of 2) [7/03/2005 12:20:45 PM]

VPython
Supported in part by the National Science Foundation
  
 
http://www.vpython.org/ (2 of 2) [7/03/2005 12:20:45 PM]

blender3d.org :: Home
About Blender
Download
InfoCenter
Support
Community
Blender Foundation
E-shop
features
gallery
applications
blender
3dwebplugin
sourcecode
resources
using_blender
development
website
faq
knowledgebase
helpforums
graphicscards
websites
professionals
opensource
chat
about
blenderconf
history
press
mediaexposure
header graphic
 
 
 
E-shop
 
 
Development
 
 
Blender, the open source software for 3D modeling, animation, rendering, post-
http://www.blender3d.com/ (1 of 2) [7/03/2005 12:22:07 PM]
(search)

blender3d.org :: Home
 
Image Gallery
 
 
Tutorials
 
production, interactive creation and playback (see the features and screenshots). 
Available for Windows, Linux, Irix, Sun Solaris, FreeBSD or Mac OS X under the 
GNU Public License.
Here you can download Blender 2.36 for all platforms.
Latest Release:  
Blender 2.36 
Just released; a version with over 5 weeks of only stabilizing and bug fixing. 
This is the definite version to use to enjoy the new full undo system, 
complete rewritten and upgraded mesh modeling, Outliner tool, new deform 
features, and much much more... Read the additions and fixes in 2.36 or 
the full list of new features in 2.35. 
New! Video tutorial collection
 
 
Site powered by Typo3 CMS / design by matt 
http://www.blender3d.com/ (2 of 2) [7/03/2005 12:22:07 PM]

Thursday
First page Back Continue Last page Overview Graphics
Thursday
G     On Thursday, we will look at examples of 3D 
rotations
G     We will also talk about how to avoid numerical 
instabilities
G     Runge- Kutta
G     Quaternions
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text7.html [7/03/2005 1:03:05 PM]

Last Time
First page Back Continue Last page Overview Graphics
3D Rotations
G     Last time we talked about 3D rotations
G     Need 3 numbers to specify 3D rotation
H     Blender uses qx, qy, qz 
G     Moment of inertia is a matrix
H     depends on mass distribution in object 
G     Moment of inertia changes as object rotates
H     include terms due to I changing 
G     Loop stays (schematically) same 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text1.html [7/03/2005 1:17:42 PM]

News
First page Back Continue Last page Overview Graphics
News
G     Today we will go over better methods of 
integrating and quaternions
G     Next week we will look at soft things
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text0.html [7/03/2005 1:17:53 PM]

3D some more
First page Back Continue Last page Overview Graphics
More 3D
G     Basic eqn is S Mcm = d/dt ( Hcm) = d/dt (I w)
G     I w changes in two ways
H     change from I rotating = w x Ibody w 
H     change from w changing = I(t) a 
G     find a from a = I(t)-1 ( SM – w x Ibody w )
G     use that in loop wi+1 = wi + ai dt
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text2.html [7/03/2005 1:18:00 PM]

Integrators
First page Back Continue Last page Overview Graphics
Better Ways 
G     We have been using this formula:
H     xi+1 = xi + vi dt 
G     Not very accurate! Okay for a few, small steps
G     Falls apart for rotation matrices- hundreds of 
frames, many calculations for each, tiny errors 
add up
G     Assumes vi is constant for entire interval
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text3.html [7/03/2005 1:18:04 PM]

Algorithms
First page Back Continue Last page Overview Graphics
Algorithms
G     We have been using the “explicit Euler” or 
“Newtonian” method
G     “Improved Euler”- use average of vi and vi+1 
instead of vi
G     “Implicit Euler”- more stable than accurate- 
use vi+1 instead of vi- good for very stiff eqns
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text4.html [7/03/2005 1:18:06 PM]

Runge-Kutta
First page Back Continue Last page Overview Graphics
Runge-Kutta
G     Use carefully chosen terms to approximate 
functions (see handout)
G     Second-order: use vi+0.5 to approximate over 
interval
H     find vi+0.5 by approximating to i+0.5 with Newtons method 
G     Fourth-order: adds two more terms
H     accurate to 5th order- see handout 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text5.html [7/03/2005 1:18:10 PM]

Quaternions 
First page Back Continue Last page Overview Graphics
Quaternions
G     Rotation matrices allow errors to pile up badly
G     Errors in R matrices do weird things like 
change scaling
G     Renormalizing is expensive
G     use quaternions instead- renormalizing is 
much easier
G     quaternions dont get “gimbal lock”
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text6.html [7/03/2005 1:18:13 PM]

Quaternion arithmetic
First page Back Continue Last page Overview Graphics
Using Quaternions
G     q = s + x i + y j + z k
G     quaternions are numbers, can add, multiply, 
dot product, conjugate, etc
H     see Bourg, Appendix C for full set of routines 
G     dq/dt = ½ w q where w = [0,w]
G     see use of quaternion in Bourg, chapter 13
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text7.html [7/03/2005 1:18:15 PM]

Homework
First page Back Continue Last page Overview Graphics
Last Homework
G     Please make something move with a script in 
Blender.
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/text8.html [7/03/2005 1:18:18 PM]

3D some more
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img2.html [7/03/2005 1:18:37 PM]

Integrators
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img3.html [7/03/2005 1:18:52 PM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img4.html [7/03/2005 1:19:07 PM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img5.html [7/03/2005 1:19:17 PM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img6.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img6.html [7/03/2005 1:19:34 PM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img7.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img7.html [7/03/2005 1:19:45 PM]

http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img8.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec05/html/img8.html [7/03/2005 1:19:52 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep03/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep03/html/img3.html [7/03/2005 1:22:48 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img1.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img1.html [7/03/2005 1:24:05 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img2.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img2.html [7/03/2005 1:24:35 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img4.html [7/03/2005 1:24:48 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img5.html [7/03/2005 1:25:01 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img6.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img6.html [7/03/2005 1:25:18 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img7.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img7.html [7/03/2005 1:25:37 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img8.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img8.html [7/03/2005 1:25:53 PM]

http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img9.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img9.html [7/03/2005 1:26:08 PM]

Example Free Body Diagram
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img10.html [7/03/2005 1:26:21 PM]

Slide 12
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img11.html [7/03/2005 1:26:41 PM]

Homework
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/sep19/html/img12.html [7/03/2005 1:26:59 PM]

Python 2.3.5
Search: 
 
  Home 
Search 
Download 
Documentation 
Help 
Developers 
Community 
SIGs 
Python 2.3.5 
Index 
Release notes 
Bugs 
License 
New-style classes 
C3 MRO algorithm 
 
Email Us 
webmaster@python.org 
  
  
© 2005 
Python Software 
Foundation 
  
Python 2.3.5
We're happy to announce the release of Python 2.3.5 (final) on Feb 8th, 2005. This is a bug-fix release for 
Python 2.3. There have been around 50 bugs fixed since 2.3.4 - in the Python interpreter, the standard 
library and also in the build process - see the release notes for details. 
Python 2.3.5 supersedes the previous Python 2.3.4 release. 
No new features have been added in Python 2.3.5 -- the 2.3 series is in bugfix-only mode. 
2.3.5 contains an important security fix for SimpleXMLRPCServer - see the advisory (PSF-2005-
001) for more. 
Python 2.3.5 is the last planned release in the Python 2.3 series, and is being released for those people who 
are stuck on Python 2.3 for some reason. Python 2.4 is a newer release, and should be preferred where 
possible. From here, bugfix releases will be made from the Python 2.4 branch - 2.4.1 will be the next 
Python release. 
Please see the separate bugs page for known issues and the bug reporting procedure. 
Download the release
Windows users should download the Windows installer, Python-2.3.5.exe, run it and follow the friendly 
instructions on the screen to complete the installation. Windows users may also be interested in Mark 
Hammond's win32all, a collection of Windows-specific extensions including COM support and 
Pythonwin, an IDE built using Windows components.
All others should download either Python-2.3.5.tgz or Python-2.3.5.tar.bz2, the source archive. The 
tar.bz2 is considerably smaller, so get that one if your system has the appropriate tools to deal with it. 
Unpack it with "tar -zxvf Python-2.3.5.tgz" (or "bzcat Python-2.3.5.tar.bz2 | tar -xf -"). Change to the 
Python-2.3.5 directory and run the "./configure", "make", "make install" commands to compile and install 
Python. The source archive is also suitable for Windows users who feel the need to build their own 
version. 
Warning for Solaris and HP-UX users: Some versions of the Solaris and HP/UX versions of tar(1) 
report checksum errors and are unable to unpack the Python source tree. This is caused by some pathnames 
being too long for the vendor's version. Use GNU tar instead. 
If you're having trouble building on your system, check the top-level README file for platform-specific 
tips, or check the Build Bugs section on the Bugs webpage. 
What's New?
G     A detailed list of the changes since 2.3.4 is in the release notes, also available as the file 
Misc/NEWS in the source distribution. 
G     See the highlights of the Python 2.3 release. As noted, the 2.3.5 release is a bugfix release of 
2.3.4, itself a bugfix release of 2.3. 
G     The Windows installer now includes the documentation in searchable htmlhelp format, rather 
than individual HTML files. You can still download the individual HTML files. 
http://www.python.org/2.3.5/ (1 of 2) [7/03/2005 1:30:35 PM]
submit

Python 2.3.5
G     Andrew Kuchling's What's New in Python 2.3 describes the most visible changes since 
Python 2.2 in more detail. 
G     For the full list of changes, you can poke around in CVS. 
Documentation
The documentation has been updated too: 
G     Browse HTML documentation on-line
G     Download using HTTP or FTP
The interim documentation for new-style classes, last seen for Python 2.2.3, is still relevant for Python 
2.3.5. Raymond Hettinger has also written a tutorial on descriptors, introduced in Python 2.2. In addition, 
The Python 2.3 Method Resolution Order is a nice paper by Michele Simionato that explains the C3 MRO 
algorithm (new in Python 2.3) clearly. (Also available as reStructured Text. Copied with permission.) 
Files, MD5 checksums, signatures, and sizes
7a1ecc1196c5c0e9d4eef90ba684c4e9 Python-2.3.5.tgz (8535749 bytes, sig)
c12b57c6e0cf8bc676fd9444d71c9e18 Python-2.3.5.tar.bz2 (7230000 bytes, sig)
ba6f9eb9da40ad23bc631a1f31149a01 Python-2.3.5.exe (9881382 bytes, sig)
HTTP not working for you? All the above files can be found via FTP too. 
The signatures above were generated with GnuPG using the release manager's (Anthony Baxter) public 
key which has a key id of 6A45C816. 
  
http://www.python.org/2.3.5/ (2 of 2) [7/03/2005 1:30:35 PM]

Python 2.3.5 Documentation
Search: 
 
  Home 
Search 
Download 
Documentation 
Help 
Developers 
Community 
SIGs 
Documentation 
Index 
FAQ 
Introductions 
Hints 
Guido's essays 
HOWTOs 
Topic guides 
Current 
Older versions 
 
Email Us 
docs@python.org 
  
  
© 2005 
Python Software 
Foundation 
  
Python 2.3.5 Documentation (released February 
8th, 2005)
G     Download all these documents 
(Many formats are available, including typeset versions for 
printing.) 
G     Locate previous versions 
G     What's New in Python 2.3 
(changes since previous major release)
G     Tutorial 
(start here)
G     Global Module Index 
(for quick access to all modules)
G     Library Reference 
(keep this under your pillow)
G     Macintosh Library Modules 
(this too, if you use a Macintosh)
G     Language Reference 
(for language lawyers)
G     Extending and Embedding 
(tutorial for C/C++ programmers)
G     Python/C API 
(reference for C/C++ programmers)
G     Documenting Python 
(information for documentation authors)
G     Installing Python Modules 
(information for installers & sys-admins)
G     Distributing Python Modules 
(sharing modules with others)
If you have comments or suggestions for the Python documentation, 
please send email to <docs@python.org>. 
http://www.python.org/doc/2.3.5/ [7/03/2005 1:31:06 PM]
submit

Using 3D dynamics
First page Back Continue Last page Overview Graphics
Using 3D dynamics
G     just like everything else
G     find sum of torques, w, R
G     use R to get I-1
G     solve for dw/dt = I-1 ( SM – w x Ib w )
G     add dw/dt dt to w,
G     add w dt to q vector
G     next!
Notes:
http://www.hep.umn.edu/~border/phys1905f02/dec03/html/text6.html [7/03/2005 1:34:09 PM]

News
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img0.html [7/03/2005 1:38:41 PM]

Classes
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img1.html [7/03/2005 1:39:04 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img2.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img2.html [7/03/2005 1:39:17 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img3.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img3.html [7/03/2005 1:39:35 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img4.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img4.html [7/03/2005 1:39:48 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img5.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img5.html [7/03/2005 1:40:05 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img6.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img6.html [7/03/2005 1:40:25 PM]

Instances
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img7.html [7/03/2005 1:40:43 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img8.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img8.html [7/03/2005 1:40:55 PM]

http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img9.html
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img9.html [7/03/2005 1:41:05 PM]

Doc strings
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img10.html [7/03/2005 1:41:15 PM]

Modules
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img11.html [7/03/2005 1:41:25 PM]

Thursday
 
 
 
 
 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/img12.html [7/03/2005 1:41:39 PM]

News
First page Back Continue Last page Overview Graphics
News
G     Last time we did game presentations
G     Today we have progress reports and
G     Classes and object-oriented programming
G     Thursday we finish collisions
G     Events of interest
H     DIG.IT at Walker- student show Thursday (free) 
H     Quake! Doom! Sims! Saturday ($7) 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text0.html [7/03/2005 1:42:38 PM]

Classes
First page Back Continue Last page Overview Graphics
Classes
G     What happens when you make a box?
G     Would'nt it be nice to be able to do something 
similar- and make, for example, a car just as 
easily as you can make a vpython box?
G     Box, sphere, etc are all classes.
G     Programming with classes is Object- Oriented 
Programming
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text1.html [7/03/2005 1:42:43 PM]

Objects
First page Back Continue Last page Overview Graphics
Objects
G     Objects, or classes, have data and things you 
can do with the data
G     Consider a car
H     data: mass, length,height,width,fuel,state of 4 tires, position, velocity, etc 
H     methods: go faster, turn left, stop, get gas, slow down, etc 
H     many things in common with trucks 
H     cars contain people, tires, radios 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text2.html [7/03/2005 1:42:44 PM]

Using objects
First page Back Continue Last page Overview Graphics
Using Objects
G     One would like to have cars interact with the 
world: Car7.goFaster() should make car 7's 
velocity incrtease, and fuel decrease
G     RedCar.updatePos () should make the red car 
update position [ ie, advance dt]
G     Note that trucks need same stuff
G     Cars should also be able to add passengers, 
get a radio fixed 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text3.html [7/03/2005 1:42:46 PM]

Object-Oriented Programming
First page Back Continue Last page Overview Graphics
Object- Oriented Programming
G     OOP is telling objects what to do
G     not changing lists of data
G     Tell a box to be red, not change color in your 
program
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text4.html [7/03/2005 1:42:47 PM]

Make your Own Class
First page Back Continue Last page Overview Graphics
Make a Class
G     It's so easy!
G     start with class 
G     define methods
G     self.mass use the mass of this car
G     self is always first argument
G     __init__ is called when it's made
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text5.html [7/03/2005 1:42:49 PM]

Slide 7
First page Back Continue Last page Overview Graphics
Inheritance
G     Cars and trucks share a lot of methods
G     why write them twice?
G     make a class called vehicle
G     both cars and trucks inherit from vehicle; 
share code for goFast, gasUp, etc
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text6.html [7/03/2005 1:42:50 PM]

Instances
First page Back Continue Last page Overview Graphics
Instances
G     Each “car” object is known as an instance of 
the car class
G     Instances have separate data stashes- self.fuel 
for one car is NOT the same as self.fuel for 
another
G     Different instances have different names
H     redCar, vwBug, Herbie 
H     policeCar[0], policecar[1], policeCar[2], etc 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text7.html [7/03/2005 1:42:51 PM]

Using Instances
First page Back Continue Last page Overview Graphics
Using Instances
G     First make one: policeCar[27] = car()
G     access data from it with a dot
H     if (policeCar[27].mass > 1500 ): 
G     make it do things also with a dot
H     policecar[27].stopRealHard() 
G     get at objects it holds with a dot too!
H     policeCar[27].radio.tuneInAM( 770 ) 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text8.html [7/03/2005 1:42:53 PM]

Overloading
First page Back Continue Last page Overview Graphics
Overloading
G     Spose you make a vector class- it has 3 
numbers, etc
G     Want to make adding vectors easy
G     make method def __add__(self,other):
G     python will your method when it sees 
vector1+vector2
G     similar for many others
G     called “function overloading”
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text9.html [7/03/2005 1:42:54 PM]

Doc strings
First page Back Continue Last page Overview Graphics
Doc Strings
G     include a descriptive comment right after 
class
G     shows up as __doc__
G     print myObj.__doc__, there it is
G     self-documenting code!
G     available at run-time; look for in output of print 
dir statements
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text10.html [7/03/2005 1:42:55 PM]

Modules
First page Back Continue Last page Overview Graphics
Modules
G     You can put classes in modules and dont have 
to look at them all the time
G     and use import to bring them in
G     import visual 
H     reference as visual.box 
G     from visual import *
H     reference as box 
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text11.html [7/03/2005 1:42:57 PM]

Thursday
First page Back Continue Last page Overview Graphics
The future
G     This is week 7, were halfway through
G     So far we did kinematics, forces, and 
collisions using spreadsheets and vpython
G     Coming up are rigid 3d bodies, soft bodies, 
constrained motions using Blender and maybe 
Java- the fun stuff
G     Should we do animations or games????
Notes:
http://www.hep.umn.edu/~border/phys1905f02/oct15/html/text12.html [7/03/2005 1:42:58 PM]

Non-Programmers Tutorial For Python
next  up  previous
 contents
 
Next: Front Matter   Contents 
Non-Programmers Tutorial For Python
Josh Cogliati
Copyright(c) 1999-2002 Josh Cogliati. 
Permission is granted to anyone to make or distribute verbatim copies of this document as received, in 
any medium, provided that the copyright notice and permission notice are preserved, and that the 
distributor grants the recipient permission for further redistribution as permitted by this notice. 
Permission is granted to distribute modified versions of this document, or of portions of it, under the 
above conditions, provided also that they carry prominent notices stating who last altered them. 
All example python source code in this tutorial is granted to the public domain. Therefore you may 
modify it and relicense it under any license you please. 
G     Front Matter 
G     Contents 
G     Intro 
H     First things first 
H     Installing Python 
H     Interactive Mode 
H     Creating and Running Programs 
H     Using Python from the command line 
G     Hello, World 
H     What you should know 
H     Printing 
H     Expressions 
H     Talking to humans (and other intelligent beings) 
H     Examples 
H     Exercises 
G     Who Goes There? 
http://www.honors.montana.edu/~jjc/easytut/easytut/ (1 of 3) [7/03/2005 1:48:55 PM]

Non-Programmers Tutorial For Python
H     Input and Variables 
H     Examples 
H     Exercises 
G     Count to 10 
H     While loops 
H     Examples 
G     Decisions 
H     If statement 
H     Examples 
H     Exercises 
G     Debugging 
H     What is debugging? 
H     What should the program do? 
H     What does the program do? 
H     How do I fix the program? 
G     Defining Functions 
H     Creating Functions 
H     Variables in functions 
H     Function walkthrough 
H     Examples 
H     Exercises 
G     Lists 
H     Variables with more than one value 
H     More features of lists 
H     Examples 
H     Exercises 
G     For Loops 
G     Boolean Expressions 
H     Examples 
H     Exercises 
G     Dictionaries 
G     Using Modules 
H     Exercises 
G     More on Lists 
G     Revenge of the Strings 
http://www.honors.montana.edu/~jjc/easytut/easytut/ (2 of 3) [7/03/2005 1:48:55 PM]

Non-Programmers Tutorial For Python
H     Examples 
G     File IO 
H     Exercises 
G     Dealing with the imperfect (or how to handle errors) 
H     Exercises 
G     The End 
G     FAQ 
G     About this document ... 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/ (3 of 3) [7/03/2005 1:48:55 PM]

Front Matter
next  up  previous
 contents
 
Next: Contents Up: Non-Programmers Tutorial For Python Previous: Non-Programmers Tutorial For 
Python   Contents 
Front Matter 
Abstract:
Non-Programmers Tutorial For Python is a tutorial designed to be a introduction to the Python 
programming language. This guide is for someone with no programming experience. 
If you have programmed in other languages I recommend using The Python Tutorial written by Guido 
van Rossum. 
This document is available as LATEX, HTML, PDF, and Postscript. Go to 
http://www.honors.montana.edu/~jjc/easytut/ to see all these forms. 
If you have any questions or comments please contact me at jjc@iname.com I welcome questions and 
comments about this tutorial. I will try to answer any questions you have as best as I can. 
Thanks go to James A. Brown for writing most of the Windows install info. Thanks also to Elizabeth 
Cogliati for complaining enough :) about the original tutorial,(that is almost unusable for a non-
programmer) for proofreading and for many ideas and comments on it. Thanks to Joe Oppegaard for 
writing all the exercises. Thanks to everyone I have missed. 
Here are a few links that you may find useful: 
G     Python Home Page 
G     Python Documentation} 
G     Python Tutorial for Programmers 
G     LaTeX, PDF, and Postscript, and Zip versions 
Dedicated to Elizabeth Cogliati 
next  up  previous
 contents
 
Next: Contents Up: Non-Programmers Tutorial For Python Previous: Non-Programmers Tutorial For 
Python   Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node1.html (1 of 2) [7/03/2005 1:49:04 PM]

Front Matter
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node1.html (2 of 2) [7/03/2005 1:49:04 PM]

Contents
next  up  previous
 
Next: Intro Up: Non-Programmers Tutorial For Python Previous: Front Matter 
Contents 
G     Front Matter 
G     Intro 
H     First things first 
H     Installing Python 
H     Interactive Mode 
H     Creating and Running Programs 
H     Using Python from the command line 
G     Hello, World 
H     What you should know 
H     Printing 
H     Expressions 
H     Talking to humans (and other intelligent beings) 
H     Examples 
H     Exercises 
G     Who Goes There? 
H     Input and Variables 
H     Examples 
H     Exercises 
G     Count to 10 
H     While loops 
H     Examples 
G     Decisions 
H     If statement 
H     Examples 
H     Exercises 
G     Debugging 
H     What is debugging? 
H     What should the program do? 
H     What does the program do? 
H     How do I fix the program? 
http://www.honors.montana.edu/~jjc/easytut/easytut/node2.html (1 of 2) [7/03/2005 1:49:11 PM]

Contents
G     Defining Functions 
H     Creating Functions 
H     Variables in functions 
H     Function walkthrough 
H     Examples 
H     Exercises 
G     Lists 
H     Variables with more than one value 
H     More features of lists 
H     Examples 
H     Exercises 
G     For Loops 
G     Boolean Expressions 
H     Examples 
H     Exercises 
G     Dictionaries 
G     Using Modules 
H     Exercises 
G     More on Lists 
G     Revenge of the Strings 
H     Examples 
G     File IO 
H     Exercises 
G     Dealing with the imperfect (or how to handle errors) 
H     Exercises 
G     The End 
G     FAQ 
G     About this document ... 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node2.html (2 of 2) [7/03/2005 1:49:11 PM]

Intro
next  up  previous
 contents
 
Next: Hello, World Up: Non-Programmers Tutorial For Python Previous: Contents   Contents 
Subsections 
G     First things first 
G     Installing Python 
G     Interactive Mode 
G     Creating and Running Programs 
G     Using Python from the command line 
Intro 
First things first 
So, you've never programmed before. As we go through this tutorial I will attempt to teach you how to 
program. There really is only one way to learn to program. You must read code and write code. I'm 
going to show you lots of code. You should type in code that I show you to see what happens. Play 
around with it and make changes. The worst that can happen is that it won't work. When I type in code 
it will be formatted like this: 
##Python is easy to learn
print "Hello, World!"
That's so it is easy to distinguish from the other text. To make it confusing I will also print what the 
computer outputs in that same font. 
Now, on to more important things. In order to program in Python you need the Python software. If 
you don't already have the Python software go to http://www.python.org/download/ and get the proper 
version for your platform. Download it, read the instructions and get it installed. 
Installing Python 
First you need to download the appropriate file for your computer from 
http://www.python.org/download. Go to the 2.0 link (or newer) and then get the windows 
installer if you use Windows or the rpm or source if you use Unix. 
The Windows installer will download to file. The file can then be run by double clicking on the icon 
http://www.honors.montana.edu/~jjc/easytut/easytut/node3.html (1 of 3) [7/03/2005 1:49:20 PM]

Intro
that is downloaded. The installation will then proceed. 
If you get the Unix source make sure you compile in the tk extension if you want to use IDLE. 
Interactive Mode 
Go into IDLE (also called the Python GUI). You should see a window that has some text like this: 
Python 2.0 (#4, Dec 12 2000, 19:19:57) 
[GCC 2.95.2 20000220 (Debian GNU/Linux)] on linux2
Type "copyright", "credits" or "license" for more information.
IDLE 0.6 -- press F1 for help
>>>
The >>> is Python way of telling you that you are in interactive mode. In interactive mode what you 
type is immediately run. Try typing 1+1 in. Python will respond with 2. Interactive mode allows you 
to test out and see what Python will do. If you ever feel you need to play with new Python statements 
go into interactive mode and try them out. 
Creating and Running Programs 
Go into IDLE if you are not already. Go to File then New Window. In this window type the 
following: 
print "Hello, World!"
First save the program. Go to File then Save. Save it as hello.py. (If you want you can save it to 
some other directory than the default.) Now that it is saved it can be run. 
Next run the program by going to Run then Run Module (or if you have a older version of IDLE 
use Edit then Run script). This will output Hello, World! on the *Python Shell* 
window. 
Confused still? Try this tutorial for IDLE at 
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html 
Using Python from the command line 
If you don't want to use Python from the command line, you don't have too, just use IDLE. To get into 
http://www.honors.montana.edu/~jjc/easytut/easytut/node3.html (2 of 3) [7/03/2005 1:49:20 PM]

Intro
interactive mode just type python with out any arguments. To run a program create it with a text 
editor (Emacs has a good python mode) and then run it with python program name. 
next  up  previous
 contents
 
Next: Hello, World Up: Non-Programmers Tutorial For Python Previous: Contents   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node3.html (3 of 3) [7/03/2005 1:49:20 PM]

Hello, World
next  up  previous
 contents
 
Next: Who Goes There? Up: Non-Programmers Tutorial For Python Previous: Intro   Contents 
Subsections 
G     What you should know 
G     Printing 
G     Expressions 
G     Talking to humans (and other intelligent beings) 
G     Examples 
G     Exercises 
Hello, World 
What you should know 
You should know how to edit programs in a text editor or IDLE, save them to disk (floppy or hard) 
and run them once they have been saved. 
Printing 
Programming tutorials since the beginning of time have started with a little program called Hello, 
World! So here it is: 
print "Hello, World!"
If you are using the command line to run programs then type it in with a text editor, save it as hello.py 
and run it with ``python hello.py'' 
Otherwise go into IDLE, create a new window, and create the program as in section 1.4. 
When this program is run here's what it prints: 
Hello, World!
Now I'm not going to tell you this every time, but when I show you a program I recommend that you 
type it in and run it. I learn better when I type it in and you probably do too. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node4.html (1 of 6) [7/03/2005 1:49:29 PM]

Hello, World
Now here is a more complicated program: 
print "Jack and Jill went up a hill"
print "to fetch a pail of water;"
print "Jack fell down, and broke his crown,"
print "and Jill came tumbling after."
When you run this program it prints out: 
Jack and Jill went up a hill
to fetch a pail of water;
Jack fell down, and broke his crown,
and Jill came tumbling after.
When the computer runs this program it first sees the line: 
print "Jack and Jill went up a hill"
so the computer prints: 
Jack and Jill went up a hill
Then the computer goes down to the next line and sees: 
print "to fetch a pail of water;"
So the computer prints to the screen: 
to fetch a pail of water;
The computer keeps looking at each line, follows the command and then goes on to the next line. The 
computer keeps running commands until it reaches the end of the program. 
Expressions 
Here is another program: 
print "2 + 2 is", 2+2
print "3 * 4 is", 3 * 4
print 100 - 1, " = 100 - 1"
print "(33 + 2) / 5 + 11.5 = ",(33 + 2) / 5 + 11.5
And here is the output when the program is run: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node4.html (2 of 6) [7/03/2005 1:49:29 PM]

Hello, World
2 + 2 is 4
3 * 4 is 12
99  = 100 - 1
(33 + 2) / 5 + 11.5 =  18.5
As you can see Python can turn your thousand dollar computer into a 5 dollar calculator. 
Python has six basic operations for numbers: 
Operation
Symbol Example
Exponentiation
**
5 ** 2 == 25
Multiplication
*
2 * 3 == 6
Division
/
14 / 3 == 4
Remainder
%
14 % 3 == 2
Addition
+
1 + 2 == 3
Subtraction
-
4 - 3 == 1
Notice that division follows the rule, if there are no decimals to start with, there will be no decimals to 
end with. (Note: This will be changing in Python 2.3) The following program shows this: 
print "14 / 3 = ",14 / 3
print "14 % 3 = ",14 % 3
print
print "14.0 / 3.0 =",14.0 / 3.0
print "14.0 % 3.0 =",14 % 3.0
print
print "14.0 / 3 =",14.0 / 3
print "14.0 % 3 =",14.0 % 3
print
print "14 / 3.0 =",14 / 3.0
print "14 % 3.0 =",14 % 3.0
print
With the output: 
14 / 3 =  4
14 % 3 =  2
14.0 / 3.0 = 4.66666666667
14.0 % 3.0 = 2.0
http://www.honors.montana.edu/~jjc/easytut/easytut/node4.html (3 of 6) [7/03/2005 1:49:29 PM]

Hello, World
14.0 / 3 = 4.66666666667
14.0 % 3 = 2.0
14 / 3.0 = 4.66666666667
14 % 3.0 = 2.0
Notice how Python gives different answers for some problems depending on whether or not there 
decimal values are used. 
The order of operations is the same as in math: 
1.  parentheses () 
2.  exponents ** 
3.  multiplication *, division \, and remainder % 
4.  addition + and subtraction - 
Talking to humans (and other intelligent 
beings) 
Often in programming you are doing something complicated and may not in the future remember 
what you did. When this happens the program should probably be commented. A comment is a note 
to you and other programmers explaining what is happening. For example: 
#Not quite PI, but an incredible simulation
print 22.0/7.0
Notice that the comment starts with a #. Comments are used to communicate with others who read the 
program and your future self to make clear what is complicated. 
Examples 
Each chapter (eventually) will contain examples of the programming features introduced in the 
chapter. You should at least look over them see if you understand them. If you don't, you may want to 
type them in and see what happens. Mess around them, change them and see what happens. 
Denmark.py 
print "Something's rotten in the state of Denmark."
print "                -- Shakespeare"
http://www.honors.montana.edu/~jjc/easytut/easytut/node4.html (4 of 6) [7/03/2005 1:49:29 PM]

Hello, World
Output: 
Something's rotten in the state of Denmark.
                -- Shakespeare
School.py 
#This is not quite true outside of USA
# and is based on my dim memories of my younger years
print "Firstish Grade"
print "1+1 =",1+1
print "2+4 =",2+4
print "5-2 =",5-2
print
print "Thirdish Grade"
print "243-23 =",243-23
print "12*4 =",12*4
print "12/3 =",12/3
print "13/3 =",13/3," R ",13%3
print
print "Junior High"
print "123.56-62.12 =",123.56-62.12
print "(4+3)*2 =",(4+3)*2
print "4+3*2 =",4+3*2
print "3**2 =",3**2
print
Output: 
Firstish Grade
1+1 = 2
2+4 = 6
5-2 = 3
Thirdish Grade
243-23 = 220
12*4 = 48
12/3 = 4
13/3 = 4  R  1
Junior High
123.56-62.12 = 61.44
(4+3)*2 = 14
4+3*2 = 10
3**2 = 9
http://www.honors.montana.edu/~jjc/easytut/easytut/node4.html (5 of 6) [7/03/2005 1:49:29 PM]

Hello, World
Exercises 
Write a program that prints your full name and your birthday as separate strings. 
Write a program that shows the use of all 6 math functions. 
next  up  previous
 contents
 
Next: Who Goes There? Up: Non-Programmers Tutorial For Python Previous: Intro   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node4.html (6 of 6) [7/03/2005 1:49:29 PM]

Who Goes There?
next  up  previous
 contents
 
Next: Count to 10 Up: Non-Programmers Tutorial For Python Previous: Hello, World   Contents 
Subsections 
G     Input and Variables 
G     Examples 
G     Exercises 
Who Goes There? 
Input and Variables 
Now I feel it is time for a really complicated program. Here it is: 
print "Halt!"
s = raw_input("Who Goes there? ")
print "You may pass,", s
When I ran it here is what my screen showed: 
Halt!
Who Goes there? Josh
You may pass, Josh
Of course when you run the program your screen will look different because of the raw_input 
statement. When you ran the program you probably noticed (you did run the program, right?) how you 
had to type in your name and then press Enter. Then the program printed out some more text and also 
your name. This is an example of input. The program reaches a certain point and then waits for the 
user to input some data that the program can use later. 
Of course, getting information from the user would be useless if we didn't have anywhere to put that 
information and this is where variables come in. In the previous program s is a variable. Variables are 
like a box that can store some piece of data. Here is a program to show examples of variables: 
a = 123.4
b23 = 'Spam'
first_name = "Bill"
b = 432
http://www.honors.montana.edu/~jjc/easytut/easytut/node5.html (1 of 5) [7/03/2005 1:49:36 PM]

Who Goes There?
c = a + b
print "a + b is", c
print "first_name is", first_name
print "Sorted Parts, After Midnight or",b23
And here is the output: 
a + b is 555.4
first_name is Bill
Sorted Parts, After Midnight or Spam
Variables store data. The variables in the above program are a, b23, first_name, b, and c. The 
two basic types are strings and numbers. Strings are a sequence of letters, numbers and other 
characters. In this example b23 and first_name are variables that are storing strings. Spam, 
Bill, a + b is, and first_name is are the strings in this program. The characters are 
surrounded by " or '. The other type of variables are numbers. 
Okay, so we have these boxes called variables and also data that can go into the variable. The 
computer will see a line like first_name = "Bill" and it reads it as Put the string Bill into 
the box (or variable) first_name. Later on it sees the statement c = a + b and it reads it as Put 
a + b or 123.4 + 432 or 555.4 into c. 
Here is another example of variable usage: 
a = 1
print a
a = a + 1
print a
a = a * 2
print a
And of course here is the output: 
1
2
4
Even if it is the same variable on both sides the computer still reads it as: First find out the data to 
store and than find out where the data goes. 
One more program before I end this chapter: 
num = input("Type in a Number: ")
str = raw_input("Type in a String: ")
print "num =", num
http://www.honors.montana.edu/~jjc/easytut/easytut/node5.html (2 of 5) [7/03/2005 1:49:36 PM]

Who Goes There?
print "num is a ",type(num)
print "num * 2 =",num*2
print "str =", str
print "str is a ",type(str)
print "str * 2 =",str*2
The output I got was: 
Type in a Number: 12.34
Type in a String: Hello
num = 12.34
num is a  <type 'float'>
num * 2 = 24.68
str = Hello
str is a  <type 'string'>
str * 2 = HelloHello
Notice that num was gotten with input while str was gotten with raw_input. raw_input 
returns a string while input returns a number. When you want the user to type in a number use 
input but if you want the user to type in a string use raw_input. 
The second half of the program uses type which tells what a variable is. Numbers are of type int or 
float (which are short for 'integer' and 'floating point' respectively). Strings are of type string. 
Integers and floats can be worked on by mathematical functions, strings cannot. Notice how when 
python multiples a number by a integer the expected thing happens. However when a string is 
multiplied by a integer the string has that many copies of it added i.e. str * 2 = HelloHello. 
The operations with strings do slightly different things than operations with numbers. Here are some 
interative mode examples to show that some more. 
>>> "This"+" "+"is"+" joined."
'This is joined.'
>>> "Ha, "*5
'Ha, Ha, Ha, Ha, Ha, '
>>> "Ha, "*5+"ha!"
'Ha, Ha, Ha, Ha, Ha, ha!'
>>>
Here is the list of some string operations: 
Operation
Symbol Example
Repetition
*
"i"*5 == "iiiii"
Concatenation
+
"Hello, "+"World!" == "Hello, World!"
http://www.honors.montana.edu/~jjc/easytut/easytut/node5.html (3 of 5) [7/03/2005 1:49:36 PM]

Who Goes There?
Examples 
Rate_times.py 
#This programs calculates rate and distance problems
print "Input a rate and a distance"
rate = input("Rate:")
distance = input("Distance:")
print "Time:",distance/rate
Sample runs: 
> python rate_times.py
Input a rate and a distance
Rate:5
Distance:10
Time: 2
> python rate_times.py 
Input a rate and a distance
Rate:3.52
Distance:45.6
Time: 12.9545454545
Area.py 
#This program calculates the perimeter and area of a rectangle
print "Calculate information about a rectangle"
length = input("Length:")
width = input("Width:")
print "Area",length*width
print "Perimeter",2*length+2*width
Sample runs: 
> python area.py
Calculate information about a rectangle
Length:4
Width:3
Area 12
Perimeter 14
> python area.py
Calculate information about a rectangle
Length:2.53
http://www.honors.montana.edu/~jjc/easytut/easytut/node5.html (4 of 5) [7/03/2005 1:49:36 PM]

Who Goes There?
Width:5.2
Area 13.156
Perimeter 15.46
temperature.py 
#Converts Fahrenheit to Celsius
temp = input("Farenheit temperature:")
print (temp-32.0)*5.0/9.0
Sample runs: 
> python temperature.py
Farenheit temperature:32
0.0
> python temperature.py
Farenheit temperature:-40
-40.0
> python temperature.py
Farenheit temperature:212
100.0
> python temperature.py
Farenheit temperature:98.6
37.0
Exercises 
Write a program that gets 2 string variables and 2 integer variables from the user, concatenates (joins 
them together with no spaces) and displays the strings, then multiplies the two numbers on a new line. 
next  up  previous
 contents
 
Next: Count to 10 Up: Non-Programmers Tutorial For Python Previous: Hello, World   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node5.html (5 of 5) [7/03/2005 1:49:36 PM]

Count to 10
next  up  previous
 contents
 
Next: Decisions Up: Non-Programmers Tutorial For Python Previous: Who Goes There?   Contents 
Subsections 
G     While loops 
G     Examples 
Count to 10 
While loops 
Presenting our first control structure. Ordinarily the computer starts with the first line and then goes down from there. 
Control structures change the order that statements are executed or decide if a certain statement will be run. Here's the 
source for a program that uses the while control structure: 
a = 0
while a < 10:
        a = a + 1
        print a
And here is the extremely exciting output: 
1
2
3
4
5
6
7
8
9
10
(And you thought it couldn't get any worse after turning your computer into a five dollar calculator?) So what does the 
program do? First it sees the line a = 0 and makes a zero. Then it sees while a < 10: and so the computer 
checks to see if a < 10. The first time the computer sees this statement a is zero so it is less than 10. In other words 
while a is less than ten the computer will run the tabbed in statements. 
Here is another example of the use of while: 
a = 1
s = 0
print 'Enter Numbers to add to the sum.'
print 'Enter 0 to quit.'
while a != 0 :
        print 'Current Sum:',s
http://www.honors.montana.edu/~jjc/easytut/easytut/node6.html (1 of 3) [7/03/2005 1:49:42 PM]

Count to 10
        a = input('Number? ')
        s = s + a
print 'Total Sum =',s
The first time I ran this program Python printed out: 
  File "sum.py", line 3
    while a != 0 
                ^
SyntaxError: invalid syntax
I had forgotten to put the : after the while. The error message complained about that problem and pointed out where 
it thought the problem was with the SPMquot^" . After the problem was fixed here was what I did with the program: 
Enter Numbers to add to the sum.
Enter 0 to quit.
Current Sum: 0
Number? 200
Current Sum: 200
Number? -15.25
Current Sum: 184.75
Number? -151.85
Current Sum: 32.9
Number? 10.00
Current Sum: 42.9
Number? 0
Total Sum = 42.9
Notice how print 'Total Sum =',s is only run at the end. The while statement only affects the line that are 
tabbed in (a.k.a. indented). The != means does not equal so while a != 0 : means until a is zero run the tabbed 
in statements that are afterwards. 
Now that we have while loops, it is possible to have programs that run forever. An easy way to do this is to write a 
program like this: 
while 1 == 1:
     print "Help, I'm stuck in a loop."
This program will output Help, I'm stuck in a loop. until the heat death of the universe or you stop it. 
The way to stop it is to hit the Control (or Ctrl) button and `c' (the letter) at the same time. This will kill the program. 
(Note: sometimes you will have to hit enter after the Control C.) 
Examples 
Fibonnacci.py 
#This program calulates the fibonnacci sequence
a = 0
b = 1
count = 0
max_count = 20
http://www.honors.montana.edu/~jjc/easytut/easytut/node6.html (2 of 3) [7/03/2005 1:49:42 PM]

Count to 10
while count < max_count:
    count = count + 1
    #we need to keep track of a since we change it
    old_a = a
    old_b = b
    a = old_b
    b = old_a + old_b
    #Notice that the , at the end of a print statement keeps it
    # from switching to a new line
    print old_a,
print
Output: 
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
Password.py 
# Waits until a password has been entered.  Use control-C to break out with out
# the password
#Note that this must not be the password so that the 
# while loop runs at least once.
password = "foobar"
#note that != means not equal
while password != "unicorn":
    password = raw_input("Password:")
print "Welcome in"
Sample run: 
Password:auo
Password:y22
Password:password
Password:open sesame
Password:unicorn
Welcome in
next  up  previous
 contents
 
Next: Decisions Up: Non-Programmers Tutorial For Python Previous: Who Goes There?   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node6.html (3 of 3) [7/03/2005 1:49:42 PM]

Decisions
next  up  previous
 contents
 
Next: Debugging Up: Non-Programmers Tutorial For Python Previous: Count to 10   Contents 
Subsections 
G     If statement 
G     Examples 
G     Exercises 
Decisions 
If statement 
As always I believe I should start each chapter with a warm up typing exercise so here is a short 
program to compute the absolute value of a number: 
n = input("Number? ")
if n < 0:
        print "The absolute value of",n,"is",-n
else:
        print "The absolute value of",n,"is",n
Here is the output from the two times that I ran this program: 
Number? -34
The absolute value of -34 is 34
Number? 1
The absolute value of 1 is 1
So what does the computer do when when it sees this piece of code? First it prompts the user for a 
number with the statement n = input("Number? "). Next it reads the line if n < 0: If n is 
less than zero Python runs the line print "The absolute value of",n,"is",-n. 
Otherwise python runs the line print "The absolute value of",n,"is",n. 
More formally Python looks at whether the expression n < 0 is true or false. A if statement is 
followed by a block of statements that are run when the expression is true. Optionally after the if 
statement is a else statement. The else statement is run if the expression is false. 
There are several different tests that a expression can have. Here is a table of all of them: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node7.html (1 of 6) [7/03/2005 1:49:47 PM]

Decisions
operator function
<
less than
<=
less than or equal to
>
greater than
>=
greater than or equal to
==
equal
!=
not equal
<>
another way to say not equal
Another feature of the if command is the elif statement. It stands for else if and means if the 
original if statement is false and then the elif part is true do that part. Here's a example: 
a = 0
while a < 10:
        a = a + 1
        if a > 5:
                print a," > ",5
        elif a <= 7:
                print a," <= ",7
        else:
                print "Neither test was true"
and the output: 
1  <=  7
2  <=  7
3  <=  7
4  <=  7
5  <=  7
6  >  5
7  >  5
8  >  5
9  >  5
10  >  5
Notice how the elif a <= 7 is only tested when the if statement fail to be true. elif allows 
multiple tests to be done in a single if statement. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node7.html (2 of 6) [7/03/2005 1:49:47 PM]

Decisions
Examples 
High_low.py 
#Plays the guessing game higher or lower 
# (originally written by Josh Cogliati, improved by Quique)
#This should actually be something that is semi random like the
# last digits of the time or something else, but that will have to
# wait till a later chapter.  (Extra Credit, modify it to be random
# after the Modules chapter)
number = 78
guess = 0
while guess != number : 
    guess = input ("Guess a number: ")
    if guess > number :
        print "Too high"
    elif guess < number :
            print "Too low"
print "Just right"
Sample run: 
Guess a number:100
Too high
Guess a number:50
Too low
Guess a number:75
Too low
Guess a number:87
Too high
Guess a number:81
Too high
Guess a number:78
Just right
even.py 
#Asks for a number.
#Prints if it is even or odd
http://www.honors.montana.edu/~jjc/easytut/easytut/node7.html (3 of 6) [7/03/2005 1:49:47 PM]

Decisions
number = input("Tell me a number: ")
if number % 2 == 0:
    print number,"is even."
elif number % 2 == 1:
    print number,"is odd."
else:
    print number,"is very strange."
Sample runs. 
Tell me a number: 3
3 is odd.
Tell me a number: 2
2 is even.
Tell me a number: 3.14159
3.14159 is very strange.
average1.py 
#keeps asking for numbers until 0 is entered.
#Prints the average value.
count = 0
sum = 0.0
number = 1 #set this to something that will not exit
#           the while loop immediatly.
print "Enter 0 to exit the loop"
while number != 0:
    number = input("Enter a number:")
    count = count + 1
    sum = sum + number
count = count - 1 #take off one for the last number
print "The average was:",sum/count
Sample runs 
Enter 0 to exit the loop
Enter a number:3
Enter a number:5
Enter a number:0
The average was: 4.0
http://www.honors.montana.edu/~jjc/easytut/easytut/node7.html (4 of 6) [7/03/2005 1:49:47 PM]

Decisions
Enter 0 to exit the loop
Enter a number:1
Enter a number:4
Enter a number:3
Enter a number:0
The average was: 2.66666666667
average2.py 
#keeps asking for numbers until count have been entered.
#Prints the average value.
sum = 0.0
print "This program will take several numbers than average them"
count = input("How many numbers would you like to sum:")
current_count = 0
while current_count < count:
    current_count = current_count + 1
    print "Number ",current_count
    number = input("Enter a number:")
    sum = sum + number
print "The average was:",sum/count
Sample runs 
This program will take several numbers than average them
How many numbers would you like to sum:2
Number  1
Enter a number:3
Number  2
Enter a number:5
The average was: 4.0
This program will take several numbers than average them
How many numbers would you like to sum:3
Number  1
Enter a number:1
Number  2
Enter a number:4
Number  3
Enter a number:3
The average was: 2.66666666667
http://www.honors.montana.edu/~jjc/easytut/easytut/node7.html (5 of 6) [7/03/2005 1:49:47 PM]

Decisions
Exercises 
Modify the password guessing program to keep track of how many times the user has entered the 
password wrong. If it is more than 3 times, print ``That must have been complicated.'' 
Write a program that asks for two numbers. If the sum of the numbers is greater than 100, print ``That 
is big number''. 
Write a program that asks the user their name, if they enter your name say "That is a nice name", if 
they enter "John Cleese" or "Michael Palin", tell them how you feel about them ;), otherwise tell them 
"You have a nice name". 
next  up  previous
 contents
 
Next: Debugging Up: Non-Programmers Tutorial For Python Previous: Count to 10   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node7.html (6 of 6) [7/03/2005 1:49:47 PM]

Debugging
next  up  previous
 contents
 
Next: Defining Functions Up: Non-Programmers Tutorial For Python Previous: Decisions   
Contents 
Subsections 
G     What is debugging? 
G     What should the program do? 
G     What does the program do? 
G     How do I fix the program? 
Debugging 
What is debugging? 
As soon as we started programming, we found to our surprise that it wasn't as easy to 
get programs right as we had thought. Debugging had to be discovered. I can remember 
the exact instant when I realized that a large part of my life from then on was going to 
be spent in finding mistakes in my own programs. 
- Maurice Wilkes discovers debugging, 1949 
By now if you have been messing around with the programs you have probably found that sometimes 
the program does something you didn't want it to do. This is fairly common. Debugging is the process 
of figuring out what the computer is doing and then getting it to do what you want it to do. This can 
be tricky. I once spent nearly a week tracking down and fixing a bug that was caused by someone 
putting an x where a y should have been. 
This chapter will be more abstract than previous chapters. Please tell me if it is useful. 
What should the program do? 
The first thing to do (this sounds obvious) is to figure out what the program should be doing if it is 
running correctly. Come up with some test cases and see what happens. For example, let's say I have a 
program to compute the perimeter of a rectangle (the sum of the length of all the edges). I have the 
following test cases: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (1 of 8) [7/03/2005 1:49:54 PM]

Debugging
width height perimeter
3
4
14
2
3
10
4
4
16
2
2
8
5
1
12
I now run my program on all of the test cases and see if the program does what I expect it to do. If it 
doesn't then I need to find out what the computer is doing. 
More commonly some of the test cases will work and some will not. If that is the case you should try 
and figure out what the working ones have in common. For example here is the output for a perimeter 
program (you get to see the code in a minute): 
Height: 3
Width: 4
perimeter =  15
Height: 2
Width: 3
perimeter =  11
Height: 4
Width: 4
perimeter =  16
Height: 2
Width: 2
perimeter =  8
Height: 5
Width: 1
perimeter =  8
Notice that it didn't work for the first two inputs, it worked for the next two and it didn't work on the 
last one. Try and figure out what is in common with the working ones. Once you have some idea what 
the problem is finding the cause is easier. With your own programs you should try more test cases if 
you need them. 
What does the program do? 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (2 of 8) [7/03/2005 1:49:54 PM]

Debugging
The next thing to do is to look at the source code. One of the most important things to do while 
programming is reading source code. The primary way to do this is code walkthroughs. 
A code walkthrough starts at the first line, and works its way down until the program is done. While 
loops and if statements mean that some lines may never be run and some lines are run many times. 
At each line you figure out what Python has done. 
Lets start with the simple perimeter program. Don't type it in, you are going to read it, not run it. The 
source code is: 
height = input("Height: ")
width = input("Width: ")
print "perimeter = ",width+height+width+width
Question: What is the first line Python runs? 
Answer: The first line is alway run first. In this case it is: height = input("Height: ") 
Question: What does that line do? 
Answer: Prints Height: , waits for the user to type a number in, and puts that in the variable 
height. 
Question: What is the next line that runs? 
Answer: In general, it is the next line down which is: width = input("Width: ") 
Question: What does that line do? 
Answer: Prints Width: , waits for the user to type a number in, and puts what the user types in the 
variable width. 
Question: What is the next line that runs? 
Answer: When the next line is not indented more or less than the current line, it is the line right 
afterwards, so it is: print "perimeter = ",width+height+width+width (It may also 
run a function in the current line, but thats a future chapter.) 
Question: What does that line do? 
Answer: First it prints perimeter =, then it prints width+height+width+width. 
Question: Does width+height+width+width calculate the perimeter properly? 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (3 of 8) [7/03/2005 1:49:54 PM]

Debugging
Answer: Let's see, perimeter of a rectangle is the bottom (width) plus the left side (height) plus the 
top (width) plus the right side (huh?). The last item should be the right side's length, or the height. 
Question: Do you understand why some of the times the perimeter was calculated `correctly'? 
Answer: It was calculated correctly when the width and the height were equal. 
The next program we will do a code walkthrough for is a program that is supposed to print out 5 dots 
on the screen. However, this is what the program is outputting: 
. . . .
And here is the program: 
number = 5
while number > 1:
    print ".",
    number = number - 1
print
This program will be more complex to walkthrough since it now has indented portions (or control 
structures). Let us begin. 
Question: What is the first line to be run? 
Answer: The first line of the file: number = 5 
Question: What does it do? 
Answer: Puts the number 5 in the variable number. 
Question: What is the next line? 
Answer: The next line is: while number > 1: 
Question: What does it do? 
Answer: Well, while statements in general look at their expression, and if it is true they do the next 
indented block of code, otherwise they skip the next indented block of code. 
Question: So what does it do right now? 
Answer: If number > 1 is true then the next two lines will be run. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (4 of 8) [7/03/2005 1:49:54 PM]

Debugging
Question: So is number > 1? 
Answer: The last value put into number was 5 and 5 > 1 so yes. 
Question: So what is the next line? 
Answer: Since the while was true the next line is: print ".", 
Question: What does that line do? 
Answer: Prints one dot and since the statement ends with a , the next print statement will not be on a 
different screen line. 
Question: What is the next line? 
Answer: number = number - 1 since that is following line and there are no indent changes. 
Question: What does it do? 
Answer: It calculates number - 1, which is the current value of number (or 5) subtracts 1 from it, 
and makes that the new value of number. So basically it changes number's value from 5 to 4. 
Question: What is the next line? 
Answer: Well, the indent level decreases so we have to look at what type of control structure it is. It 
is a while loop, so we have to go back to the while clause which is while number > 1: 
Question: What does it do? 
Answer: It looks at the value of number, which is 4, and compares it to 1 and since 4 > 1 the while 
loop continues. 
Question: What is the next line? 
Answer: Since the while loop was true, the next line is: print ".", 
Question: What does it do? 
Answer: It prints a second dot on the line. 
Question: What is the next line? 
Answer: No indent change so it is: number = number - 1 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (5 of 8) [7/03/2005 1:49:54 PM]

Debugging
Question: And what does it do? 
Answer: It talks the current value of number (4), subtracts 1 from it, which gives it 3 and then finally 
makes 3 the new value of number. 
Question: What is the next line? 
Answer: Since there is an indent change caused by the end of the while loop, the next line is: while 
number > 1: 
Question: What does it do? 
Answer: It compares the current value of number (3) to 1. 3 > 1 so the while loop continues. 
Question: What is the next line? 
Answer: Since the while loop condition was true the next line is: print ".", 
Question: And it does what? 
Answer: A third dot is printed on the line. 
Question: What is the next line? 
Answer: It is: number = number - 1 
Question: What does it do? 
Answer: It takes the current value of number (3) subtracts from it 1 and makes the 2 the new value of 
number. 
Question: What is the next line? 
Answer: Back up to the start of the while loop: while number > 1: 
Question: What does it do? 
Answer: It compares the current value of number (2) to 1. Since 2 > 1 the while loop continues. 
Question: What is the next line? 
Answer: Since the while loop is continuing: print ".", 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (6 of 8) [7/03/2005 1:49:54 PM]

Debugging
Question: What does it do? 
Answer: It discovers the meaning of life, the universe and everything. I'm joking. (I had to make sure 
you were awake.) The line prints a fourth dot on the screen. 
Question: What is the next line? 
Answer: It's: number = number - 1 
Question: What does it do? 
Answer: Takes the current value of number (2) subtracts 1 and makes 1 the new value of number. 
Question: What is the next line? 
Answer: Back up to the while loop: while number > 1: 
Question: What does the line do? 
Answer: It compares the current value of number (1) to 1. Since 1 > 1 is false (one is not greater 
than one), the while loop exits. 
Question: What is the next line? 
Answer: Since the while loop condition was false the next line is the line after the while loop exits, 
or: print 
Question: What does that line do? 
Answer: Makes the screen go to the next line. 
Question: Why doesn't the program print 5 dots? 
Answer: The loop exits 1 dot too soon. 
Question: How can we fix that? 
Answer: Make the loop exit 1 dot later. 
Question: And how do we do that? 
Answer: There are several ways. One way would be to change the while loop to: while number 
> 0: Another way would be to change the conditional to: number >= 1 There are a couple others. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (7 of 8) [7/03/2005 1:49:54 PM]

Debugging
How do I fix the program? 
You need to figure out what the program is doing. You need to figure out what the program should 
do. Figure out what the difference between the two is. Debugging is a skill that has to be done to be 
learned. If you can't figure it out after an hour or so take a break, talk to someone about the problem or 
contemplate the lint in your navel. Come back in a while and you will probably have new ideas about 
the problem. Good luck. 
next  up  previous
 contents
 
Next: Defining Functions Up: Non-Programmers Tutorial For Python Previous: Decisions   
Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node8.html (8 of 8) [7/03/2005 1:49:54 PM]

Defining Functions
next  up  previous
 contents
 
Next: Lists Up: Non-Programmers Tutorial For Python Previous: Debugging   Contents 
Subsections 
G     Creating Functions 
G     Variables in functions 
G     Function walkthrough 
G     Examples 
G     Exercises 
Defining Functions 
Creating Functions 
To start off this chapter I am going to give you a example of what you could do but shouldn't (so don't 
type it in): 
a = 23
b = -23
if a < 0:
    a = -a
if b < 0:
    b = -b
if a == b:
    print "The absolute values of", a,"and",b,"are equal"
else:
    print "The absolute values of a and b are different"
with the output being: 
The absolute values of 23 and 23 are equal
The program seems a little repetitive. (Programmers hate to repeat things (That's what computers are 
for aren't they?)) Fortunately Python allows you to create functions to remove duplication. Here's the 
rewritten example: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (1 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
a = 23
b = -23
def my_abs(num):
    if num < 0:
        num = -num
    return num
if my_abs(a) == my_abs(b):
    print "The absolute values of", a,"and",b,"are equal"
else:
    print "The absolute values of a and b are different"
with the output being: 
The absolute values of 23 and -23 are equal
The key feature of this program is the def statement. def (short for define) starts a function 
definition. def is followed by the name of the function my_abs. Next comes a ( followed by the 
parameter num (num is passed from the program into the function when the function is called). The 
statements after the : are executed when the function is used. The statements continue until either the 
indented statements end or a return is encountered. The return statement returns a value back to 
the place where the function was called. 
Notice how the values of a and b are not changed. Functions of course can be used to repeat tasks that 
don't return values. Here's some examples: 
def hello():
    print "Hello"
def area(width,height):
    return width*height
def print_welcome(name):
    print "Welcome",name
    
hello()
hello()
print_welcome("Fred")
w = 4
h = 5
print "width =",w,"height =",h,"area =",area(w,h)
with output being: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (2 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
Hello
Hello
Welcome Fred
width = 4 height = 5 area = 20
That example just shows some more stuff that you can do with functions. Notice that you can use no 
arguments or two or more. Notice also when a function doesn't need to send back a value, a return is 
optional. 
Variables in functions 
Of course, when eliminiating repeated code, you often have variables in the repeated code. These are 
dealt with in a special way in Python. Up till now, all variables we have see are global variables. 
Functions have a special type of variable called local variables. These variables only exist while the 
function is running. When a local variable has the same name as another variable such as a global 
variable, the local variable hides the other variable. Sound confusing? Well, hopefully this next 
example (which is a bit contrived) will clear things up. 
a_var = 10
b_var = 15
e_var = 25
def a_func(a_var):
    print "in a_func a_var = ",a_var
    b_var = 100 + a_var
    d_var = 2*a_var
    print "in a_func b_var = ",b_var
    print "in a_func d_var = ",d_var
    print "in a_func e_var = ",e_var
    return b_var + 10
c_var = a_func(b_var)
print "a_var = ",a_var
print "b_var = ",b_var
print "c_var = ",c_var
print "d_var = ",d_var
The output is: 
in a_func a_var =  15
in a_func b_var =  115
in a_func d_var =  30
in a_func e_var =  25
a_var =  10
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (3 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
b_var =  15
c_var =  125
d_var = 
Traceback (innermost last):
  File "separate.py", line 20, in ?
    print "d_var = ",d_var
NameError: d_var
In this example the variables a_var, b_var, and d_var are all local variables when they are inside 
the function a_func. After the statement return b_var + 10 is run, they all cease to exist. The 
variable a_var is automatically a local variable since it is a parameter name. The variables b_var 
and d_var are local variables since they appear on the left of an equals sign in the function in the 
statements b_var = 100 + a_var and d_var = 2*a_var . 
Inside of the function a_var is 15 since the function is called with a_func(b_var). Since at that 
point in time b_var is 15, the call to the function is a_func(15) This ends up setting a_var to 15 
when it is inside of a_func. 
As you can see, once the function finishes running, the local variables a_var and b_var that had 
hidden the global variables of the same name are gone. Then the statement print "a_var = 
",a_var prints the value 10 rather than the value 15 since the local variable that hid the global 
variable is gone. 
Another thing to notice is the NameError that happens at the end. This appears since the variable 
d_var no longer exists since a_func finished. All the local variables are deleted when the function 
exits. If you want to get something from a function, then you will have to use return something. 
One last thing to notice is that the value of e_var remains unchanged inside a_func since it is not a 
parameter and it never appears on the left of an equals sign inside of the function a_func. When a 
global variable is accessed inside a function it is the global variable from the outside. 
Functions allow local variables that exist only inside the function and can hide other variables that are 
outside the function. 
Function walkthrough 
TODO Move this section to a new chapter, Advanced Functions. 
Now we will do a walk through for the following program: 
def mult(a,b):
    if b == 0:
        return 0
    rest = mult(a,b - 1)
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (4 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
    value = a + rest
    return value
print "3*2 = ",mult(3,2)
Basically this program creates a positive integer multiplication function (that is far slower than the 
built in multiplication function) and then demonstrates this function with a use of the function. 
Question: What is the first thing the program does? 
Answer: The first thing done is the function mult is defined with the lines: 
def mult(a,b):
    if b == 0:
        return 0
    rest = mult(a,b - 1)
    value = a + rest
    return value
This creates a function that takes two parameters and returns a value when it is done. Later this 
function can be run. 
Question: What happens next? 
Answer: The next line after the function, print "3*2 = ",mult(3,2) is run. 
Question: And what does this do? 
Answer: It prints 3*2 = and the return value of mult(3,2) 
Question: And what does mult(3,2) return? 
Answer: We need to do a walkthrough of the mult function to find out. 
Question: What happens next? 
Answer: The variable a gets the value 3 assigned to it and the variable b gets the value 2 assigned to 
it. 
Question: And then? 
Answer: The line if b == 0: is run. Since b has the value 2 this is false so the line return 0 is 
skipped. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (5 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
Question: And what then? 
Answer: The line rest = mult(a,b - 1) is run. This line sets the local variable rest to the 
value of mult(a,b - 1). The value of a is 3 and the value of b is 2 so the function call is 
mult(3,1) 
Question: So what is the value of mult(3,1) ? 
Answer: We will need to run the function mult with the parameters 3 and 1. 
Question: So what happens next? 
Answer: The local variables in the new run of the function are set so that a has the value 3 and b has 
the value 1. Since these are local values these do not affect the previous values of a and b. 
Question: And then? 
Answer: Since b has the value 1 the if statement is false, so the next line becomes rest = 
mult(a,b - 1). 
Question: What does this line do? 
Answer: This line will assign the value of mult(3,0) to rest. 
Question: So what is that value? 
Answer: We will have to run the function one more time to find that out. This time a has the value 3 
and b has the value 0. 
Question: So what happens next? 
Answer: The first line in the function to run is if b == 0: . b has the value 0 so the next line to 
run is return 0 
Question: And what does the line return 0 do? 
Answer: This line returns the value 0 out of the function. 
Question: So? 
Answer: So now we know that mult(3,0) has the value 0. Now we know what the line rest = 
mult(a,b - 1) did since we have run the function mult with the parameters 3 and 0. We have 
finished running mult(3,0) and are now back to running mult(3,1). The variable rest gets 
assigned the value 0. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (6 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
Question: What line is run next? 
Answer: The line value = a + rest is run next. In this run of the function, a=3 and rest=0 
so now value=3. 
Question: What happens next? 
Answer: The line return value is run. This returns 3 from the function. This also exits from the 
run of the function mult(3,1). After return is called, we go back to running mult(3,2). 
Question: Where were we in mult(3,2)? 
Answer: We had the variables a=3 and b=2 and were examining the line rest = mult(a,b - 
1) . 
Question: So what happens now? 
Answer: The variable rest get 3 assigned to it. The next line value = a + rest sets value to 
3+3 or 6. 
Question: So now what happens? 
Answer: The next line runs, this returns 6 from the function. We are now back to running the line 
print "3*2 = ",mult(3,2) which can now print out the 6. 
Question: What is happening overall? 
Answer: Basically we used two facts to calulate the multipule of the two numbers. The first is that 
any number times 0 is 0 (x * 0 = 0). The second is that a number times another number is equal to 
the first number plus the first number times one less than the second number (x * y = x + x * 
(y - 1)). So what happens is 3*2 is first converted into 3 + 3*1. Then 3*1 is converted into 3 
+ 3*0. Then we know that any number times 0 is 0 so 3*0 is 0. Then we can calculate that 3 + 
3*0 is 3 + 0 which is 3. Now we know what 3*1 is so we can calculate that 3 + 3*1 is 3 + 3 
which is 6. 
This is how the whole thing works: 
3*2
3 + 3*1
3 + 3 + 3*0
3 + 3 + 0
3 + 3
6
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (7 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
These last two sections were recently written. If you have any comments, found any errors or think I 
need more/clearer explanations please email. I have been known in the past to make simple things 
incomprehensible. If the rest of the tutorial has made sense, but this section didn't, it is probably my 
fault and I would like to know. Thanks. 
Examples 
factorial.py 
#defines a function that calculates the factorial
def factorial(n):
    if n <= 1:
        return 1
    return n*factorial(n-1)
print "2! = ",factorial(2)
print "3! = ",factorial(3)
print "4! = ",factorial(4)
print "5! = ",factorial(5)
Output: 
2! =  2
3! =  6
4! =  24
5! =  120
temperature2.py 
#converts temperature to fahrenheit or celsius
def print_options():
    print "Options:"
    print " 'p' print options"
    print " 'c' convert from celsius"
    print " 'f' convert from fahrenheit"
    print " 'q' quit the program"
def celsius_to_fahrenheit(c_temp):
    return 9.0/5.0*c_temp+32
def fahrenheit_to_celsius(f_temp):
    return (f_temp - 32.0)*5.0/9.0
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (8 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
choice = "p"
while choice != "q":
    if choice == "c":
        temp = input("Celsius temperature:")
        print "Fahrenheit:",celsius_to_fahrenheit(temp)
    elif choice == "f":
        temp = input("Fahrenheit temperature:")
        print "Celsius:",fahrenheit_to_celsius(temp)
    elif choice != "q":
        print_options()
    choice = raw_input("option:")
Sample Run: 
> python temperature2.py
Options:
 'p' print options
 'c' convert from celsius
 'f' convert from fahrenheit
 'q' quit the program
option:c
Celsius temperature:30 
Fahrenheit: 86.0
option:f
Fahrenheit temperature:60
Celsius: 15.5555555556
option:q
area2.py 
#By Amos Satterlee
print
def hello():
    print 'Hello!'
def area(width,height):
    return width*height
def print_welcome(name):
    print 'Welcome,',name
name = raw_input('Your Name: ')
hello(),
print_welcome(name)
print
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (9 of 10) [7/03/2005 1:50:04 PM]

Defining Functions
print 'To find the area of a rectangle,'
print 'Enter the width and height below.'
print
w = input('Width:  ')
while w <= 0:
    print 'Must be a positive number'
    w = input('Width:  ')
h = input('Height: ')
while h <= 0:
    print 'Must be a positive number'
    h = input('Height: ')
print 'Width =',w,' Height =',h,' so Area =',area(w,h)
Sample Run: 
Your Name: Josh
Hello!
Welcome, Josh
To find the area of a rectangle,
Enter the width and height below.
Width:  -4
Must be a positive number
Width:  4
Height: 3
Width = 4  Height = 3  so Area = 12
Exercises 
Rewrite the area.py program done in 3.2 to have a separate function for the area of a square, the area 
of a rectangle, and the area of a circle. (3.14 * radius**2). This program should include a menu 
interface. 
next  up  previous
 contents
 
Next: Lists Up: Non-Programmers Tutorial For Python Previous: Debugging   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node9.html (10 of 10) [7/03/2005 1:50:04 PM]

Lists
next  up  previous
 contents
 
Next: For Loops Up: Non-Programmers Tutorial For Python Previous: Defining Functions   Contents 
Subsections 
G     Variables with more than one value 
G     More features of lists 
G     Examples 
G     Exercises 
Lists 
Variables with more than one value 
You have already seen ordinary variables that store a single value. However other variable types can hold more than 
one value. The simplest type is called a list. Here is a example of a list being used: 
which_one = input("What month (1-12)? ")
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\
        'August', 'September', 'October', 'November', 'December']
if 1 <= which_one <= 12:
        print "The month is",months[which_one - 1]
and a output example: 
What month (1-12)? 3
The month is March
In this example the months is a list. months is defined with the lines months = ['January', 
'February', 'March', 'April', 'May', 'June', 'July',\ 'August', 'September', 
'October', 'November', 'December'] (Note that a \ can be used to split a long line). The [ and ] start 
and end the list with comma's (``,'') separating the list items. The list is used in months[which_one - 1]. A list 
consists of items that are numbered starting at 0. In other words if you wanted January you would use months[0]. 
Give a list a number and it will return the value that is stored at that location. 
The statement if 1 <= which_one <= 12: will only be true if which_one is between one and twelve 
inclusive (in other words it is what you would expect if you have seen that in algebra). 
Lists can be thought of as a series of boxes. For example, the boxes created by demolist = ['life',42, 
'the universe', 6,'and',7] would look like this: 
box number
0
1
2
3
4
5
demolist
`life' 42 `the universe' 6 `and' 7
Each box is referenced by its number so the statement demolist[0] would get 'life', demolist[1] would 
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (1 of 7) [7/03/2005 1:50:13 PM]

Lists
get 42 and so on up to demolist[5] getting 7. 
More features of lists 
The next example is just to show a lot of other stuff lists can do (for once I don't expect you to type it in, but you 
should probably play around with lists until you are comfortable with them.). Here goes: 
demolist = ['life',42, 'the universe', 6,'and',7]
print 'demolist = ',demolist
demolist.append('everything')
print "after 'everything' was appended demolist is now:"
print demolist
print 'len(demolist) =', len(demolist)
print 'demolist.index(42) =',demolist.index(42)
print 'demolist[1] =', demolist[1]
#Next we will loop through the list
c = 0
while c < len(demolist):
    print 'demolist[',c,']=',demolist[c]
    c = c + 1
del demolist[2]
print "After 'the universe' was removed demolist is now:"
print demolist
if 'life' in demolist:
    print "'life' was found in demolist"
else:
    print "'life' was not found in demolist"
if 'amoeba' in demolist:
    print "'amoeba' was found in demolist"
if 'amoeba' not in demolist:
    print "'amoeba' was not found in demolist"
demolist.sort()
print 'The sorted demolist is ',demolist
The output is: 
demolist =  ['life', 42, 'the universe', 6, 'and', 7]
after 'everything' was appended demolist is now:
['life', 42, 'the universe', 6, 'and', 7, 'everything']
len(demolist) = 7
demolist.index(42) = 1
demolist[1] = 42
demolist[ 0 ]= life
demolist[ 1 ]= 42
demolist[ 2 ]= the universe
demolist[ 3 ]= 6
demolist[ 4 ]= and
demolist[ 5 ]= 7
demolist[ 6 ]= everything
After 'the universe' was removed demolist is now:
['life', 42, 6, 'and', 7, 'everything']
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (2 of 7) [7/03/2005 1:50:13 PM]

Lists
'life' was found in demolist
'amoeba' was not found in demolist
The sorted demolist is  [6, 7, 42, 'and', 'everything', 'life']
This example uses a whole bunch of new functions. Notice that you can just print a whole list. Next the append 
function is used to add a new item to the end of the list. len returns how many items are in a list. The valid indexes 
(as in numbers that can be used inside of the []) of a list range from 0 to len - 1. The index function tell where 
the first location of an item is located in a list. Notice how demolist.index(42) returns 1 and when 
demolist[1] is run it returns 42. The line #Next we will loop through the list is a just a reminder 
to the programmer (also called a comment). Python will ignore any lines that start with a #. Next the lines: 
c = 0
while c < len(demolist):
    print 'demolist[',c,']=',demolist[c]
    c = c + 1
Create a variable c which starts at 0 and is incremented until it reaches the last index of the list. Meanwhile the 
print statement prints out each element of the list. 
The del command can be used to remove a given element in a list. The next few lines use the in operator to test if a 
element is in or is not in a list. 
The sort function sorts the list. This is useful if you need a list in order from smallest number to largest or 
alphabetical. Note that this rearranges the list. 
In summary for a list the following operations occur: 
example
explanation
list[2]
accesses the element at index 2
list[2] = 3
sets the element at index 2 to be 3
del list[2] 
removes the element at index 2
len(list)
returns the length of list
"value" in list
is true if "value" is an element in list
"value" not in list
is true if "value" is not an element in list
list.sort()
sorts list
list.index("value")
returns the index of the first place that "value" occurs
list.append("value") adds an element "value" at the end of the list
This next example uses these features in a more useful way: 
menu_item = 0
list = []
while menu_item != 9:
        print "--------------------"
        print "1. Print the list"
        print "2. Add a name to the list"
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (3 of 7) [7/03/2005 1:50:13 PM]

Lists
        print "3. Remove a name from the list"
        print "4. Change an item in the list"
        print "9. Quit"
        menu_item = input("Pick an item from the menu: ")
        if menu_item == 1:
                current = 0
                if len(list) > 0:
                        while current < len(list):
                                print current,". ",list[current]
                                current = current + 1
                else:
                        print "List is empty"
        elif menu_item == 2:
                name = raw_input("Type in a name to add: ")
                list.append(name)
        elif menu_item == 3:
                del_name = raw_input("What name would you like to remove: ")
                if del_name in list:
                        item_number = list.index(del_name)
                        del list[item_number]
                        #The code above only removes the first occurance of
                        # the name.  The code below from Gerald removes all.
                        #while del_name in list:
                        #       item_number = list.index(del_name)
                        #       del list[item_number]
                else:
                        print del_name," was not found"
        elif menu_item == 4:
                old_name = raw_input("What name would you like to change: ")
                if old_name in list:
                        item_number = list.index(old_name)
                        new_name = raw_input("What is the new name: ")
                        list[item_number] = new_name
                else:
                        print old_name," was not found"
print "Goodbye"
And here is part of the output: 
--------------------
1. Print the list
2. Add a name to the list
3. Remove a name from the list
4. Change an item in the list
9. Quit
Pick an item from the menu: 2
Type in a name to add: Jack
Pick an item from the menu: 2
Type in a name to add: Jill
Pick an item from the menu: 1
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (4 of 7) [7/03/2005 1:50:13 PM]

Lists
0 .  Jack
1 .  Jill
Pick an item from the menu: 3
What name would you like to remove: Jack
Pick an item from the menu: 4
What name would you like to change: Jill
What is the new name: Jill Peters
Pick an item from the menu: 1
0 .  Jill Peters
Pick an item from the menu: 9
Goodbye
That was a long program. Let's take a look at the source code. The line list = [] makes the variable list a list 
with no items (or elements). The next important line is while menu_item != 9:. This line starts a loop that 
allows the menu system for this program. The next few lines display a menu and decide which part of the program to 
run. 
The section: 
current = 0
if len(list) > 0:
        while current < len(list):
                print current,". ",list[current]
                current = current + 1
else:
        print "List is empty"
goes through the list and prints each name. len(list_name) tell how many items are in a list. If len returns 0 
then the list is empty. 
Then a few lines later the statement list.append(name) appears. It uses the append function to add a item to 
the end of the list. Jump down another two lines and notice this section of code: 
item_number = list.index(del_name)
del list[item_number]
Here the index function is used to find the index value that will be used later to remove the item. del 
list[item_number] is used to remove a element of the list. 
The next section 
old_name = raw_input("What name would you like to change: ")
if old_name in list:
        item_number = list.index(old_name)
        new_name = raw_input("What is the new name: ")
        list[item_number] = new_name
else:
        print old_name," was not found"
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (5 of 7) [7/03/2005 1:50:13 PM]

Lists
uses index to find the item_number and then puts new_name where the old_name was. 
Congraduations, with lists under your belt, you now know enough of the language that you could do any 
computations that a computer can do (this is technically known as Turing-Completness). Of course, there are still 
many features that are used to make your life easier. 
Examples 
test.py 
## This program runs a test of knowledge
true = 1
false = 0
# First get the test questions
# Later this will be modified to use file io.
def get_questions():
    # notice how the data is stored as a list of lists
    return [["What color is the daytime sky on a clear day?","blue"],\
            ["What is the answer to life, the universe and everything?","42"],\
            ["What is a three letter word for mouse trap?","cat"]]
# This will test a single question
# it takes a single question in
# it returns true if the user typed the correct answer, otherwise false
def check_question(question_and_answer):
    #extract the question and the answer from the list
    question = question_and_answer[0]
    answer = question_and_answer[1]
    # give the question to the user
    given_answer = raw_input(question)
    # compare the user's answer to the testers answer
    if answer == given_answer:
        print "Correct"
        return true
    else:
        print "Incorrect, correct was:",answer
        return false
# This will run through all the questions
def run_test(questions):
    if len(questions) == 0:
        print "No questions were given."
        # the return exits the function
        return
    index = 0
    right = 0
    while index < len(questions):
        #Check the question
        if check_question(questions[index]):
            right = right + 1
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (6 of 7) [7/03/2005 1:50:13 PM]

Lists
        #go to the next question
        index = index + 1
    #notice the order of the computation, first multiply, then divide
    print "You got ",right*100/len(questions),"% right out of",len(questions)
#now lets run the questions
run_test(get_questions())
Sample Output: 
What color is the daytime sky on a clear day?green
Incorrect, correct was: blue
What is the answer to life, the universe and everything?42
Correct
What is a three letter word for mouse trap?cat
Correct
You got  66 % right out of 3
Exercises 
Expand the test.py program so it has menu giving the option of taking the test, viewing the list of questions and 
answers, and an option to Quit. Also, add a new question to ask, "What noise does a truly advanced machine make?" 
with the answer of "ping". 
next  up  previous
 contents
 
Next: For Loops Up: Non-Programmers Tutorial For Python Previous: Defining Functions   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node10.html (7 of 7) [7/03/2005 1:50:13 PM]

For Loops
next  up  previous
 contents
 
Next: Boolean Expressions Up: Non-Programmers Tutorial For Python Previous: Lists   Contents 
For Loops 
And here is the new typing exercise for this chapter: 
onetoten = range(1,11)
for count in onetoten:
        print count
and the ever-present output: 
1
2
3
4
5
6
7
8
9
10
The output looks awfully familiar but the program code looks different. The first line uses the range 
function. The range function uses two arguments like this range(start,finish). start is 
the first number that is produced. finish is one larger than the last number. Note that this program 
could have been done in a shorter way: 
for count in range(1,11):
        print count
Here are some examples to show what happens with the range command: 
>>> range(1,10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(-32, -20)
[-32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21]
>>> range(5,21)
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
>>> range(21,5)
[]
http://www.honors.montana.edu/~jjc/easytut/easytut/node11.html (1 of 4) [7/03/2005 1:50:19 PM]

For Loops
The next line for count in onetoten: uses the for control structure. A for control 
structure looks like for variable in list:. list is gone through starting with the first 
element of the list and going to the last. As for goes through each element in a list it puts each into 
variable. That allows variable to be used in each successive time the for loop is run through. 
Here is another example (you don't have to type this) to demonstrate: 
demolist = ['life',42, 'the universe', 6,'and',7,'everything']
for item in demolist:
    print "The Current item is:",
    print item
The output is: 
The Current item is: life
The Current item is: 42
The Current item is: the universe
The Current item is: 6
The Current item is: and
The Current item is: 7
The Current item is: everything
Notice how the for loop goes through and sets item to each element in the list. (Notice how if you 
don't want print to go to the next line add a comma at the end of the statement (i.e. if you want to 
print something else on that line). ) So, what is for good for? (groan) The first use is to go through 
all the elements of a list and do something with each of them. Here a quick way to add up all the 
elements: 
list = [2,4,6,8]
sum = 0
for num in list:
        sum = sum + num
print "The sum is: ",sum
with the output simply being: 
The sum is:  20
Or you could write a program to find out if there are any duplicates in a list like this program does: 
list = [4, 5, 7, 8, 9, 1,0,7,10]
list.sort()
prev = list[0]
del list[0]
for item in list:
http://www.honors.montana.edu/~jjc/easytut/easytut/node11.html (2 of 4) [7/03/2005 1:50:19 PM]

For Loops
        if prev == item:
                print "Duplicate of ",prev," Found"
        prev = item
and for good measure: 
Duplicate of  7  Found
Okay, so how does it work? Here is a special debugging version to help you understand (you don't 
need to type this in): 
l = [4, 5, 7, 8, 9, 1,0,7,10]
print "l = [4, 5, 7, 8, 9, 1,0,7,10]","\tl:",l
l.sort()
print "l.sort()","\tl:",l
prev = l[0]
print "prev = l[0]","\tprev:",prev
del l[0]
print "del l[0]","\tl:",l
for item in l:
        if prev == item:
                print "Duplicate of ",prev," Found"
        print "if prev == item:","\tprev:",prev,"\titem:",item
        prev = item
        print "prev = item","\t\tprev:",prev,"\titem:",item
with the output being: 
l = [4, 5, 7, 8, 9, 1,0,7,10]   l: [4, 5, 7, 8, 9, 1, 0, 7, 10]
l.sort()        l: [0, 1, 4, 5, 7, 7, 8, 9, 10]
prev = l[0]     prev: 0
del l[0]        l: [1, 4, 5, 7, 7, 8, 9, 10]
if prev == item:        prev: 0         item: 1
prev = item             prev: 1         item: 1
if prev == item:        prev: 1         item: 4
prev = item             prev: 4         item: 4
if prev == item:        prev: 4         item: 5
prev = item             prev: 5         item: 5
if prev == item:        prev: 5         item: 7
prev = item             prev: 7         item: 7
Duplicate of  7  Found
if prev == item:        prev: 7         item: 7
prev = item             prev: 7         item: 7
if prev == item:        prev: 7         item: 8
prev = item             prev: 8         item: 8
http://www.honors.montana.edu/~jjc/easytut/easytut/node11.html (3 of 4) [7/03/2005 1:50:19 PM]

For Loops
if prev == item:        prev: 8         item: 9
prev = item             prev: 9         item: 9
if prev == item:        prev: 9         item: 10
prev = item             prev: 10        item: 10
The reason I put so many print statements in the code was so that you can see what is happening in 
each line. (BTW, if you can't figure out why a program is not working, try putting in lots of print 
statements to you can see what is happening) First the program starts with a boring old list. Next the 
program sorts the list. This is so that any duplicates get put next to each other. The program then 
initializes a prev(ious) variable. Next the first element of the list is deleted so that the first item is not 
incorrectly thought to be a duplicate. Next a for loop is gone into. Each item of the list is checked to 
see if it is the same as the previous. If it is a duplicate was found. The value of prev is then changed so 
that the next time the for loop is run through prev is the previous item to the current. Sure enough, the 
7 is found to be a duplicate. (Notice how \t is used to print a tab.) 
The other way to use for loops is to do something a certain number of times. Here is some code to 
print out the first 11 numbers of the Fibonacci series: 
a = 1
b = 1
for c in range(1,10):
        print a,
        n = a + b
        a = b
        b = n
with the surprising output: 
1 1 2 3 5 8 13 21 34
Everything that can be done with for loops can also be done with while loops but for loops give a 
easy way to go through all the elements in a list or to do something a certain number of times. 
next  up  previous
 contents
 
Next: Boolean Expressions Up: Non-Programmers Tutorial For Python Previous: Lists   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node11.html (4 of 4) [7/03/2005 1:50:19 PM]

Boolean Expressions
next  up  previous
 contents
 
Next: Dictionaries Up: Non-Programmers Tutorial For Python Previous: For Loops   Contents 
Subsections 
G     Examples 
G     Exercises 
Boolean Expressions 
Here is a little example of boolean expressions (you don't have to type it in): 
a = 6
b = 7
c = 42
print 1, a == 6
print 2, a == 7
print 3,a == 6 and b == 7
print 4,a == 7 and b == 7
print 5,not a == 7 and b == 7
print 6,a == 7 or b == 7
print 7,a == 7 or b == 6
print 8,not (a == 7 and b == 6)
print 9,not a == 7 and b == 6
With the output being: 
1 1
2 0
3 1
4 0
5 1
6 1
7 0
8 1
9 0
What is going on? The program consists of a bunch of funny looking print statements. Each print 
statement prints a number and a expression. The number is to help keep track of which statement I am 
dealing with. Notice how each expression ends up being either 0 or 1. In Python false is written as 0 and 
true is written as 1. The lines: 
print 1, a == 6
http://www.honors.montana.edu/~jjc/easytut/easytut/node12.html (1 of 4) [7/03/2005 1:50:24 PM]

Boolean Expressions
print 2, a == 7
print out a 1 and a 0 respectively just as expected since the first is true and the second is false. The third 
print, print 3,a == 6 and b == 7, is a little different. The operator and means if both the 
statement before and the statement after are true then the whole expression is true otherwise the whole 
expression is false. The next line, print 4,a == 7 and b == 7, shows how if part of an and 
expression is false, the whole thing is false. The behavior of and can be summarized as follows: 
expression
result
true and true
true
true and false
false
false and true
false
false and false false
Notice that if the first expression is false Python does not check the second expression since it knows the 
whole expression is false. 
The next line, print 5,not a == 7 and b == 7, uses the not operator. not just gives the 
opposite of the expression (The expression could be rewritten as print 5,a != 7 and b == 7). 
Heres the table: 
expression result
not true
false
not false
true
The two following lines, print 6,a == 7 or b == 7 and print 7,a == 7 or b == 6, use 
the or operator. The or operator returns true if the first expression is true, or if the second expression is 
true or both are true. If neither are true it returns false. Here's the table: 
expression
result
true or true
true
true or false
true
false or true
true
false or false false
Notice that if the first expression is true Python doesn't check the second expression since it knows the 
whole expression is true. This works since or is true if at least one half of the expression is true. The first 
part is true so the second part could be either false or true, but the whole expression is still true. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node12.html (2 of 4) [7/03/2005 1:50:24 PM]

Boolean Expressions
The next two lines, print 8,not (a == 7 and b == 6) and print 9,not a == 7 and b 
== 6, show that parentheses can be used to group expressions and force one part to be evaluated first. 
Notice that the parentheses changed the expression from false to true. This occurred since the parentheses 
forced the not to apply to the whole expression instead of just the a == 7 portion. 
Here is an example of using a boolean expression: 
list = ["Life","The Universe","Everything","Jack","Jill","Life","Jill"]
#make a copy of the list.  See the More on Lists chapter to explain what
#[:] means.
copy = list[:]
#sort the copy
copy.sort()
prev = copy[0]
del copy[0]
count = 0
#go through the list searching for a match
while count < len(copy) and copy[count] != prev:
    prev = copy[count]
    count = count + 1
#If a match was not found then count can't be < len
#since the while loop continues while count is < len
#and no match is found
if count < len(copy):
    print "First Match: ",prev
And here is the output: 
First Match:  Jill
This program works by continuing to check for match while count < len(copy and 
copy[count]. When either count is greater than the last index of copy or a match has been found the 
and is no longer true so the loop exits. The if simply checks to make sure that the while exited because 
a match was found. 
The other `trick' of and is used in this example. If you look at the table for and notice that the third entry 
is ``false and won't check''. If count >= len(copy) (in other words count < len(copy) is false) 
then copy[count] is never looked at. This is because Python knows that if the first is false then they both 
can't be true. This is known as a short circuit and is useful if the second half of the and will cause an error 
if something is wrong. I used the first expression (count < len(copy)) to check and see if count 
was a valid index for copy. (If you don't believe me remove the matches `Jill' and `Life', check that it still 
works and then reverse the order of count < len(copy) and copy[count] != prev to 
copy[count] != prev and count < len(copy).) 
http://www.honors.montana.edu/~jjc/easytut/easytut/node12.html (3 of 4) [7/03/2005 1:50:24 PM]

Boolean Expressions
Boolean expressions can be used when you need to check two or more different things at once. 
Examples 
password1.py 
## This programs asks a user for a name and a password.
# It then checks them to make sure the the user is allowed in.
name = raw_input("What is your name? ")
password = raw_input("What is the password? ")
if name == "Josh" and password == "Friday":
    print "Welcome Josh"
elif name == "Fred" and password == "Rock":
    print "Welcome Fred"
else:
    print "I don't know you."
Sample runs 
What is your name? Josh
What is the password? Friday
Welcome Josh
What is your name? Bill
What is the password? Money
I don't know you.
Exercises 
Write a program that has a user guess your name, but they only get 3 chances to do so until the program 
quits. 
next  up  previous
 contents
 
Next: Dictionaries Up: Non-Programmers Tutorial For Python Previous: For Loops   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python Tutorial 
Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node12.html (4 of 4) [7/03/2005 1:50:24 PM]

Dictionaries
next  up  previous
 contents
 
Next: Using Modules Up: Non-Programmers Tutorial For Python Previous: Boolean Expressions   Contents 
Dictionaries 
This chapter is about dictionaries. Dictionaries have keys and values. The keys are used to find the values. Here 
is an example of a dictionary in use: 
def print_menu():
    print '1. Print Phone Numbers'
    print '2. Add a Phone Number'
    print '3. Remove a Phone Number'
    print '4. Lookup a Phone Number'
    print '5. Quit'
    print
numbers = {}
menu_choice = 0
print_menu()
while menu_choice != 5:
    menu_choice = input("Type in a number (1-5):")
    if menu_choice == 1:
        print "Telephone Numbers:"
        for x in numbers.keys():
            print "Name: ",x," \tNumber: ",numbers[x]
        print
    elif menu_choice == 2:
        print "Add Name and Number"
        name = raw_input("Name:")
        phone = raw_input("Number:")
        numbers[name] = phone
    elif menu_choice == 3:
        print "Remove Name and Number"
        name = raw_input("Name:")
        if numbers.has_key(name):
            del numbers[name]
        else:
            print name," was not found"
    elif menu_choice == 4:
        print "Lookup Number"
        name = raw_input("Name:")
        if numbers.has_key(name):
            print "The number is",numbers[name]
        else:
            print name," was not found"
    elif menu_choice != 5:
        print_menu()
And here is my output: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node13.html (1 of 6) [7/03/2005 1:50:30 PM]

Dictionaries
1. Print Phone Numbers
2. Add a Phone Number
3. Remove a Phone Number
4. Lookup a Phone Number
5. Quit
Type in a number (1-5):2
Add Name and Number
Name:Joe
Number:545-4464
Type in a number (1-5):2
Add Name and Number
Name:Jill
Number:979-4654
Type in a number (1-5):2
Add Name and Number
Name:Fred
Number:132-9874
Type in a number (1-5):1
Telephone Numbers:
Name:  Jill     Number:  979-4654
Name:  Joe      Number:  545-4464
Name:  Fred     Number:  132-9874
Type in a number (1-5):4  
Lookup Number
Name:Joe
The number is 545-4464
Type in a number (1-5):3
Remove Name and Number
Name:Fred
Type in a number (1-5):1
Telephone Numbers:
Name:  Jill     Number:  979-4654
Name:  Joe      Number:  545-4464
Type in a number (1-5):5
This program is similar to the name list earlier in the the chapter on lists. Heres how the program works. First the 
function print_menu is defined. print_menu just prints a menu that is later used twice in the program. Next 
comes the funny looking line numbers = {}. All that line does is tell Python that numbers is a dictionary. 
The next few lines just make the menu work. The lines: 
for x in numbers.keys():
    print "Name: ",x," \tNumber: ",numbers[x]
go through the dictionary and print all the information. The function numbers.keys() returns a list that is 
then used by the for loop. The list returned by keys is not in any particular order so if you want it in alphabetic 
order it must be sorted. Similar to lists the statement numbers[x] is used to access a specific member of the 
dictionary. Of course in this case x is a string. Next the line numbers[name] = phone adds a name and 
http://www.honors.montana.edu/~jjc/easytut/easytut/node13.html (2 of 6) [7/03/2005 1:50:30 PM]

Dictionaries
phone number to the dictionary. If name had already been in the dictionary phone would replace whatever was 
there before. Next the lines: 
if numbers.has_key(name):
    del numbers[name]
see if a name is in the dictionary and remove it if it is. The function numbers.has_key(name) returns true if 
name is in numbers but other wise returns false. The line del numbers[name] removes the key name and 
the value associated with that key. The lines: 
if numbers.has_key(name):
    print "The number is",numbers[name]
check to see if the dictionary has a certain key and if it does prints out the number associated with it. Lastly if the 
menu choice is invalid it reprints the menu for your viewing pleasure. 
A recap: Dictionaries have keys and values. Keys can be strings or numbers. Keys point to values. Values can be 
any type of variable (including lists or even dictionaries (those dictionaries or lists of course can contain 
dictionaries or lists themselves (scary right? :) )). Here is an example of using a list in a dictionary: 
max_points = [25,25,50,25,100]
assignments = ['hw ch 1','hw ch 2','quiz   ','hw ch 3','test']
students = {'#Max':max_points}
def print_menu():
    print "1. Add student"
    print "2. Remove student"
    print "3. Print grades"
    print "4. Record grade"
    print "5. Print Menu"
    print "6. Exit"
def print_all_grades():
        print '\t',
        for i in range(len(assignments)):
            print assignments[i],'\t',
        print
        keys = students.keys()
        keys.sort()
        for x in keys:
            print x,'\t',
            grades = students[x]
            print_grades(grades)
def print_grades(grades):
    for i in range(len(grades)):
        print grades[i],'\t\t',
    print
    
http://www.honors.montana.edu/~jjc/easytut/easytut/node13.html (3 of 6) [7/03/2005 1:50:30 PM]

Dictionaries
print_menu()
menu_choice = 0
while menu_choice != 6:
    print
    menu_choice = input("Menu Choice (1-6):")
    if menu_choice == 1:
        name = raw_input("Student to add:")
        students[name] = [0]*len(max_points)
    elif menu_choice == 2:
        name = raw_input("Student to remove:")
        if students.has_key(name):
            del students[name]
        else:
            print "Student: ",name," not found"
    elif menu_choice == 3:
        print_all_grades()
        
    elif menu_choice == 4:
        print "Record Grade"
        name = raw_input("Student:")
        if students.has_key(name):
            grades = students[name]
            print "Type in the number of the grade to record"
            print "Type a 0 (zero) to exit"
            for i in range(len(assignments)):
                print i+1,' ',assignments[i],'\t',
            print
            print_grades(grades)
            which = 1234
            while which != -1:
                which = input("Change which Grade:")
                which = which-1
                if 0 <= which < len(grades):
                    grade = input("Grade:")
                    grades[which] = grade
                elif which != -1:
                    print "Invalid Grade Number"
        else:
            print "Student not found"
    elif menu_choice != 6:
        print_menu()
and here is a sample output: 
1. Add student
2. Remove student
3. Print grades
4. Record grade
5. Print Menu
6. Exit
http://www.honors.montana.edu/~jjc/easytut/easytut/node13.html (4 of 6) [7/03/2005 1:50:30 PM]

Dictionaries
Menu Choice (1-6):3
        hw ch 1         hw ch 2         quiz            hw ch 3         test 
#Max    25              25              50              25              100
Menu Choice (1-6):6
1. Add student
2. Remove student
3. Print grades
4. Record grade
5. Print Menu
6. Exit
Menu Choice (1-6):1
Student to add:Bill
Menu Choice (1-6):4
Record Grade
Student:Bill
Type in the number of the grade to record
Type a 0 (zero) to exit
1   hw ch 1     2   hw ch 2     3   quiz        4   hw ch 3     5   test 
0               0               0               0               0 
Change which Grade:1
Grade:25
Change which Grade:2
Grade:24
Change which Grade:3
Grade:45
Change which Grade:4
Grade:23
Change which Grade:5
Grade:95
Change which Grade:0
Menu Choice (1-6):3  
        hw ch 1         hw ch 2         quiz            hw ch 3         test 
#Max    25              25              50              25              100 
Bill    25              24              45              23              95 
Menu Choice (1-6):6
Heres how the program works. Basically the variable students is a dictionary with the keys being the name of 
the students and the values being their grades. The first two lines just create two lists. The next line students 
= {'#Max':max_points} creates a new dictionary with the key #Max and the value is set to be 
[25,25,50,25,100] (since thats what max_points was when the assignment is made) (I use the key 
#Max since # is sorted ahead of any alphabetic characters). Next print_menu is defined. Next the 
print_all_grades function is defined in the lines: 
def print_all_grades():
        print '\t',
        for i in range(len(assignments)):
http://www.honors.montana.edu/~jjc/easytut/easytut/node13.html (5 of 6) [7/03/2005 1:50:30 PM]

Dictionaries
            print assignments[i],'\t',
        print
        keys = students.keys()
        keys.sort()
        for x in keys:
            print x,'\t',
            grades = students[x]
            print_grades(grades)
Notice how first the keys are gotten out of the students dictionary with the keys function in the line keys = 
students.keys() . keys is a list so all the functions for lists can be used on it. Next the keys are sorted in 
the line keys.sort() since it is a list. for is used to go through all the keys. The grades are stored as a list 
inside the dictionary so the assignment grades = students[x] gives grades the list that is stored at the 
key x. The function print_grades just prints a list and is defined a few lines later. 
The later lines of the program implement the various options of the menu. The line students[name] = 
[0]*len(max_points) adds a student to the key of their name. The notation [0]*len(max_points) 
just creates a array of 0's that is the same length as the max_points list. 
The remove student entry just deletes a student similar to the telephone book example. The record grades choice 
is a little more complex. The grades are retrieved in the line grades = students[name] gets a reference to 
the grades of the student name. A grade is then recorded in the line grades[which] = grade. You may 
notice that grades is never put back into the students dictionary (as in no students[name] = grades). 
The reason for the missing statement is that grades is actually another name for students[name] and so 
changing grades changes student[name]. 
Dictionaries provide a easy way to link keys to values. This can be used to easily keep track of data that is 
attached to various keys. 
next  up  previous
 contents
 
Next: Using Modules Up: Non-Programmers Tutorial For Python Previous: Boolean Expressions   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python Tutorial 
Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node13.html (6 of 6) [7/03/2005 1:50:30 PM]

http://www.honors.montana.edu/~jjc/easytut/easytut/node14.html
next  up  previous
 contents
 
Next: More on Lists Up: Non-Programmers Tutorial For Python Previous: Dictionaries   Contents 
Subsections 
G     Exercises 
Using Modules 
Here's this chapter's typing exercise (name it cal.py) [*] : 
import calendar
year = input("Type in the year number:")
calendar.prcal(year)
And here is part of the output I got: 
Type in the year number:2001
                                  2001                                  
       January                  February                    March       
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7                1  2  3  4                1  2  3  4  
 8  9 10 11 12 13 14       5  6  7  8  9 10 11       5  6  7  8  9 10 11  
15 16 17 18 19 20 21      12 13 14 15 16 17 18      12 13 14 15 16 17 18  
22 23 24 25 26 27 28      19 20 21 22 23 24 25      19 20 21 22 23 24 25  
29 30 31                  26 27 28                  26 27 28 29 30 31
(I skipped some of the output, but I think you get the idea.) So what does the program do? The first line 
import calendar uses a new command import. The command import loads a module (in this case 
the calendar module). To see the commands available in the standard modules either look in the library 
reference for python (if you downloaded it) or go to 
http://www.python.org/doc/current/lib/lib.html. The calendar module is described in 
5.9. If you look at the documentation lists a function called prcal that prints a calendar for a year. The 
line calendar.prcal(year) uses the function. In summary to use a module import it and then use 
module_name.function for functions in the module. Another way to write the program is: 
from calendar import prcal
year = input("Type in the year number:")
prcal(year)
http://www.honors.montana.edu/~jjc/easytut/easytut/node14.html (1 of 2) [7/03/2005 1:50:36 PM]

http://www.honors.montana.edu/~jjc/easytut/easytut/node14.html
This version imports a specific function from a module. Here is another program that uses the Python 
Library (name it something like clock.py) (press Ctrl and the 'c' key at the same time to kill the program): 
from time import time, ctime
prev_time = ""
while(1):
    the_time = ctime(time())
    if(prev_time != the_time):
        print "The time is:",ctime(time())
        prev_time = the_time
With some output being: 
The time is: Sun Aug 20 13:40:04 2000
The time is: Sun Aug 20 13:40:05 2000
The time is: Sun Aug 20 13:40:06 2000
The time is: Sun Aug 20 13:40:07 2000
Traceback (innermost last):
  File "clock.py", line 5, in ?
    the_time = ctime(time())
KeyboardInterrupt
The output is infinite of course so I canceled it (or the output at least continues until Ctrl+C is pressed). The 
program just does a infinite loop and each time checks to see if the time has changed and prints it if it has. 
Notice how multiple names after the import statement are used in the line from time import time, 
ctime. 
The Python Library contains many useful functions. These functions give your programs more abilities and 
many of them can simplify programming in Python. 
Exercises 
Rewrite the high_low.py program from section 5.2 to use the last two digits of time at that moment to be 
the 'random' number. 
next  up  previous
 contents
 
Next: More on Lists Up: Non-Programmers Tutorial For Python Previous: Dictionaries   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python Tutorial 
Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node14.html (2 of 2) [7/03/2005 1:50:36 PM]

More on Lists
next  up  previous
 contents
 
Next: Revenge of the Strings Up: Non-Programmers Tutorial For Python Previous: Using Modules   Contents 
More on Lists 
We have already seen lists and how they can be used. Now that you have some more background I will go into more 
detail about lists. First we will look at more ways to get at the elements in a list and then we will talk about copying 
them. 
Here are some examples of using indexing to access a single element of an list: 
>>> list = ['zero','one','two','three','four','five']   
>>> list[0]
'zero'
>>> list[4]
'four'
>>> list[5]
'five'
All those examples should look familiar to you. If you want the first item in the list just look at index 0. The second 
item is index 1 and so on through the list. However what if you want the last item in the list? One way could be to 
use the len function like list[len(list)-1]. This way works since the len function always returns the last 
index plus one. The second from the last would then be list[len(list)-2]. There is an easier way to do this. 
In Python the last item is always index -1. The second to the last is index -2 and so on. Here are some more 
examples: 
>>> list[len(list)-1]  
'five'
>>> list[len(list)-2]
'four'
>>> list[-1]
'five'
>>> list[-2]
'four'
>>> list[-6]
'zero'
Thus any item in the list can be indexed in two ways: from the front and from the back. 
Another useful way to get into parts of lists is using slices. Here is another example to give you an idea what they 
can be used for: 
>>> list = [0,'Fred',2,'S.P.A.M.','Stocking',42,"Jack","Jill"]
>>> list[0]  
0
>>> list[7]
'Jill'
>>> list[0:8]
[0, 'Fred', 2, 'S.P.A.M.', 'Stocking', 42, 'Jack', 'Jill']
http://www.honors.montana.edu/~jjc/easytut/easytut/node15.html (1 of 5) [7/03/2005 1:50:43 PM]

More on Lists
>>> list[2:4]
[2, 'S.P.A.M.']
>>> list[4:7]
['Stocking', 42, 'Jack']
>>> list[1:5]
['Fred', 2, 'S.P.A.M.', 'Stocking']
Slices are used to return part of a list. The slice operator is in the form 
list[first_index:following_index]. The slice goes from the first_index to the index before the 
following_index. You can use both types of indexing: 
>>> list[-4:-2]
['Stocking', 42]
>>> list[-4]
'Stocking'
>>> list[-4:6]
['Stocking', 42]
Another trick with slices is the unspecified index. If the first index is not specified the beginning of the list is 
assumed. If the following index is not specified the whole rest of the list is assumed. Here are some examples: 
>>> list[:2]
[0, 'Fred']
>>> list[-2:]
['Jack', 'Jill']
>>> list[:3]
[0, 'Fred', 2]
>>> list[:-5] 
[0, 'Fred', 2]
Here is a program example (copy and paste in the poem definition if you want): 
poem = ["<B>","Jack","and","Jill","</B>","went","up","the","hill","to","<B>",\
"fetch","a","pail","of","</B>","water.","Jack","fell","<B>","down","and",\
"broke","</B>","his","crown","and","<B>","Jill","came","</B>","tumbling",\
"after"]
def get_bolds(list):
        true = 1  
        false = 0
        ## is_bold tells whether or not the we are currently looking at 
        ## a bold section of text.
        is_bold = false
        ## start_block is the index of the start of either an unbolded 
        ## segment of text or a bolded segment.
        start_block = 0
        for index in range(len(list)):
                ##Handle a starting of bold text
                if list[index] == "<B>":
                        if is_bold:
                                print "Error:  Extra Bold"
                        ##print "Not Bold:",list[start_block:index]
http://www.honors.montana.edu/~jjc/easytut/easytut/node15.html (2 of 5) [7/03/2005 1:50:43 PM]

More on Lists
                        is_bold = true
                        start_block = index+1
                ##Handle end of bold text
                ##Remember that the last number in a slice is the index 
                ## after the last index used.
                if list[index] == "</B>":
                        if not is_bold:
                                print "Error: Extra Close Bold"
                        print "Bold [",start_block,":",index,"] ",\
                        list[start_block:index]
                        is_bold = false
                        start_block = index+1
get_bolds(poem)
with the output being: 
Bold [ 1 : 4 ]  ['Jack', 'and', 'Jill']
Bold [ 11 : 15 ]  ['fetch', 'a', 'pail', 'of']
Bold [ 20 : 23 ]  ['down', 'and', 'broke']
Bold [ 28 : 30 ]  ['Jill', 'came']
The get_bold function takes in a list that is broken into words and token's. The tokens that it looks for are <B> 
which starts the bold text and <\B> which ends bold text. The function get_bold goes through and searches for 
the start and end tokens. 
The next feature of lists is copying them. If you try something simple like: 
>>> a = [1,2,3]
>>> b = a
>>> print b
[1, 2, 3]
>>> b[1] = 10
>>> print b
[1, 10, 3]
>>> print a
[1, 10, 3]
This probably looks surprising since a modification to b resulted in a being changed as well. What happened is that 
the statement b = a makes b a reference to a. This means that b can be thought of as another name for a. Hence 
any modification to b changes a as well. However some assignments don't create two names for one list: 
>>> a = [1,2,3]
>>> b = a*2
>>> print a
[1, 2, 3]
>>> print b
[1, 2, 3, 1, 2, 3]
>>> a[1] = 10
>>> print a
[1, 10, 3]
>>> print b
http://www.honors.montana.edu/~jjc/easytut/easytut/node15.html (3 of 5) [7/03/2005 1:50:43 PM]

More on Lists
[1, 2, 3, 1, 2, 3]
In this case b is not a reference to a since the expression a*2 creates a new list. Then the statement b = a*2 gives 
b a reference to a*2 rather than a reference to a. All assignment operations create a reference. When you pass a list 
as a argument to a function you create a reference as well. Most of the time you don't have to worry about creating 
references rather than copies. However when you need to make modifications to one list without changing another 
name of the list you have to make sure that you have actually created a copy. 
There are several ways to make a copy of a list. The simplest that works most of the time is the slice operator since it 
always makes a new list even if it is a slice of a whole list: 
>>> a = [1,2,3]
>>> b = a[:]
>>> b[1] = 10
>>> print a
[1, 2, 3]
>>> print b
[1, 10, 3]
Taking the slice [:] creates a new copy of the list. However it only copies the outer list. Any sublist inside is still a 
references to the sublist in the original list. Therefore, when the list contains lists the inner lists have to be copied as 
well. You could do that manually but Python already contains a module to do it. You use the deepcopy function of 
the copy module: 
>>> import copy
>>> a = [[1,2,3],[4,5,6]]
>>> b = a[:]
>>> c = copy.deepcopy(a)
>>> b[0][1] = 10
>>> c[1][1] = 12
>>> print a
[[1, 10, 3], [4, 5, 6]]
>>> print b
[[1, 10, 3], [4, 5, 6]]
>>> print c
[[1, 2, 3], [4, 12, 6]]
First of all notice that a is an array of arrays. Then notice that when b[0][1] = 10 is run both a and b are 
changed, but c is not. This happens because the inner arrays are still references when the slice operator is used. 
However with deepcopy c was fully copied. 
So, should I worry about references every time I use a function or =? The good news is that you only have to worry 
about references when using dictionaries and lists. Numbers and strings create references when assigned but every 
operation on numbers and strings that modifies them creates a new copy so you can never modify them 
unexpectedly. You do have to think about references when you are modifying a list or a dictionary. 
By now you are probably wondering why are references used at all? The basic reason is speed. It is much faster to 
make a reference to a thousand element list than to copy all the elements. The other reason is that it allows you to 
have a function to modify the inputed list or dictionary. Just remember about references if you ever have some weird 
problem with data being changed when it shouldn't be. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node15.html (4 of 5) [7/03/2005 1:50:43 PM]

More on Lists
next  up  previous
 contents
 
Next: Revenge of the Strings Up: Non-Programmers Tutorial For Python Previous: Using Modules   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node15.html (5 of 5) [7/03/2005 1:50:43 PM]

Revenge of the Strings
next  up  previous
 contents
 
Next: File IO Up: Non-Programmers Tutorial For Python Previous: More on Lists   Contents 
Subsections 
G     Examples 
Revenge of the Strings 
And now presenting a cool trick that can be done with strings: 
def shout(string):
    for character in string:
        print "Gimme a "+character
        print "'"+character+"'"
shout("Lose")
def middle(string):
    print "The middle character is:",string[len(string)/2]
middle("abcdefg")
middle("The Python Programming Language")
middle("Atlanta")
And the output is: 
Gimme a L
'L'
Gimme a o
'o'
Gimme a s
's'
Gimme a e
'e'
The middle character is: d
The middle character is: r
The middle character is: a
What these programs demonstrate is that strings are similar to lists in several ways. The shout 
procedure shows that for loops can be used with strings just as they can be used with lists. The 
middle procedure shows that that strings can also use the len function and array indexes and slices. 
http://www.honors.montana.edu/~jjc/easytut/easytut/node16.html (1 of 5) [7/03/2005 1:50:50 PM]

Revenge of the Strings
Most list features work on strings as well. 
The next feature demonstrates some string specific features: 
def to_upper(string):
    ## Converts a string to upper case
    upper_case = ""
    for character in string:
        if 'a' <= character <= 'z':
            location = ord(character) - ord('a')
            new_ascii = location + ord('A')
            character = chr(new_ascii)
        upper_case = upper_case + character
    return upper_case
print to_upper("This is Text")
with the output being: 
THIS IS TEXT
This works because the computer represents the characters of a string as numbers from 0 to 255. 
Python has a function called ord (short for ordinal) that returns a character as a number. There is also 
a corresponding function called chr that converts a number into a character. With this in mind the 
program should start to be clear. The first detail is the line: if 'a' <= character <= 'z': 
which checks to see if a letter is lower case. If it is than the next lines are used. First it is converted 
into a location so that a=0,b=1,c=2 and so on with the line: location = ord(character) - 
ord('a'). Next the new value is found with new_ascii = location + ord('A'). This 
value is converted back to a character that is now upper case. 
Now for some interactive typing exercise: 
>>> #Integer to String
... 
>>> 2
2
>>> repr(2)
'2'
>>> -123
-123
>>> repr(-123)
'-123'
>>> #String to Integer
... 
>>> "23"
http://www.honors.montana.edu/~jjc/easytut/easytut/node16.html (2 of 5) [7/03/2005 1:50:50 PM]

Revenge of the Strings
'23'
>>> int("23")
23
>>> "23"*2
'2323'
>>> int("23")*2
46
>>> #Float to String
... 
>>> 1.23
1.23
>>> repr(1.23)
'1.23'
>>> #Float to Integer
... 
>>> 1.23
1.23
>>> int(1.23)
1
>>> int(-1.23)
-1
>>> #String to Float
... 
>>> float("1.23")
1.23
>>> "1.23" 
'1.23'
>>> float("123")
123.0
If you haven't guessed already the function repr can convert a integer to a string and the function 
int can convert a string to an integer. The function float can convert a string to a float. The repr 
function returns a printable representation of something. Here are some examples of this: 
>>> repr(1)
'1'
>>> repr(234.14)
'234.14'
>>> repr([4,42,10])
'[4, 42, 10]'
The int function tries to convert a string (or a float) into a integer. There is also a similar function 
called float that will convert a integer or a string into a float. Another function that Python has is 
the eval function. The eval function takes a string and returns data of the type that python thinks it 
found. For example: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node16.html (3 of 5) [7/03/2005 1:50:50 PM]

Revenge of the Strings
>>> v=eval('123')
>>> print v,type(v)
123 <type 'int'>
>>> v=eval('645.123')
>>> print v,type(v)
645.123 <type 'float'>
>>> v=eval('[1,2,3]')
>>> print v,type(v)
[1, 2, 3] <type 'list'>
If you use the eval function you should check that it returns the type that you expect. 
One useful string function is the split function. Here's the example: 
>>> import string
>>> string.split("This is a bunch of words")
['This', 'is', 'a', 'bunch', 'of', 'words']
>>> string.split("First batch, second batch, third, fourth",",")
['First batch', ' second batch', ' third', ' fourth']
Notice how split converts a string into a list of strings. The string is split by spaces by default or by 
the optional second argument (in this case a comma). 
Examples 
#This program requires a excellent understanding of decimal numbers
def to_string(in_int):
    "Converts an integer to a string"
    out_str = ""
    prefix = ""
    if in_int < 0:
        prefix = "-"
        in_int = -in_int        
    while in_int / 10 != 0:
        out_str = chr(ord('0')+in_int % 10) + out_str
        in_int = in_int / 10
    out_str = chr(ord('0')+in_int % 10) + out_str
    return prefix + out_str
def to_int(in_str):
    "Converts a string to an integer"
    out_num = 0
    if in_str[0] == "-":
        multiplier = -1
http://www.honors.montana.edu/~jjc/easytut/easytut/node16.html (4 of 5) [7/03/2005 1:50:50 PM]

Revenge of the Strings
        in_str = in_str[1:]
    else:
        multiplier = 1
    for x in range(0,len(in_str)):
        out_num = out_num * 10 + ord(in_str[x]) - ord('0')
    return out_num * multiplier
print to_string(2)
print to_string(23445)
print to_string(-23445)
print to_int("14234")
print to_int("12345")
print to_int("-3512")
The output is: 
2
23445
-23445
14234
12345
-3512
next  up  previous
 contents
 
Next: File IO Up: Non-Programmers Tutorial For Python Previous: More on Lists   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node16.html (5 of 5) [7/03/2005 1:50:50 PM]

File IO
next  up  previous
 contents
 
Next: Dealing with the imperfect Up: Non-Programmers Tutorial For Python Previous: Revenge of the 
Strings   Contents 
Subsections 
G     Exercises 
File IO 
Here is a simple example of file IO: 
#Write a file
out_file = open("test.txt","w")
out_file.write("This Text is going to out file\nLook at it and see\n")
out_file.close()
#Read a file
in_file = open("test.txt","r")
text = in_file.read()
in_file.close()
print text,
The output and the contents of the file test.txt are: 
This Text is going to out file
Look at it and see
Notice that it wrote a file called test.txt in the directory that you ran the program from. The \n in the 
string tells Python to put a newline where it is. 
A overview of file IO is: 
1.  Get a file object with the open function. 
2.  Read or write to the file object (depending on how it was opened) 
3.  Close it 
The first step is to get a file object. The way to do this is to use the open function. The format is 
file_object = open(filename,mode) where file_object is the variable to put the file 
object, filename is a string with the filename, and mode is either "r" to read a file or "w" to write a 
file. Next the file objects functions can be called. The two most common functions are read and 
http://www.honors.montana.edu/~jjc/easytut/easytut/node17.html (1 of 5) [7/03/2005 1:50:56 PM]

File IO
write. The write function adds a string to the end of the file. The read function reads the next thing 
in the file and returns it as a string. If no argument is given it will return the whole file (as done in the 
example). 
Now here is a new version of the phone numbers program that we made earlier: 
import string
true = 1
false = 0
def print_numbers(numbers):
    print "Telephone Numbers:"
    for x in numbers.keys():
        print "Name: ",x," \tNumber: ",numbers[x]
    print
def add_number(numbers,name,number):
    numbers[name] = number
def lookup_number(numbers,name):
    if numbers.has_key(name):
        return "The number is "+numbers[name]
    else:
        return name+" was not found"
def remove_number(numbers,name):
    if numbers.has_key(name):
        del numbers[name]
    else:
        print name," was not found"
def load_numbers(numbers,filename):
    in_file = open(filename,"r")
    while true:
        in_line = in_file.readline()
        if in_line == "":
            break
        in_line = in_line[:-1]
        [name,number] = string.split(in_line,",")
        numbers[name] = number
    in_file.close()
def save_numbers(numbers,filename):
    out_file = open(filename,"w")
    for x in numbers.keys():
        out_file.write(x+","+numbers[x]+"\n")
http://www.honors.montana.edu/~jjc/easytut/easytut/node17.html (2 of 5) [7/03/2005 1:50:56 PM]

File IO
    out_file.close()
    
def print_menu():
    print '1. Print Phone Numbers'
    print '2. Add a Phone Number'
    print '3. Remove a Phone Number'
    print '4. Lookup a Phone Number'
    print '5. Load numbers'
    print '6. Save numbers'
    print '7. Quit'
    print
phone_list = {}
menu_choice = 0
print_menu()
while menu_choice != 7:
    menu_choice = input("Type in a number (1-7):")
    if menu_choice == 1:
        print_numbers(phone_list)
    elif menu_choice == 2:
        print "Add Name and Number"
        name = raw_input("Name:")
        phone = raw_input("Number:")
        add_number(phone_list,name,phone)
    elif menu_choice == 3:
        print "Remove Name and Number"
        name = raw_input("Name:")
        remove_number(phone_list,name)
    elif menu_choice == 4:
        print "Lookup Number"
        name = raw_input("Name:")
        print lookup_number(phone_list,name)
    elif menu_choice == 5:
        filename = raw_input("Filename to load:")
        load_numbers(phone_list,filename)
    elif menu_choice == 6:
        filename = raw_input("Filename to save:")
        save_numbers(phone_list,filename)
    elif menu_choice == 7:
        pass
    else:
        print_menu()
print "Goodbye"
Notice that it now includes saving and loading files. Here is some output of my running it twice: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node17.html (3 of 5) [7/03/2005 1:50:56 PM]

File IO
> python tele2.py
1. Print Phone Numbers
2. Add a Phone Number
3. Remove a Phone Number
4. Lookup a Phone Number
5. Load numbers
6. Save numbers
7. Quit
Type in a number (1-7):2
Add Name and Number
Name:Jill
Number:1234
Type in a number (1-7):2
Add Name and Number
Name:Fred 
Number:4321
Type in a number (1-7):1
Telephone Numbers:
Name:  Jill     Number:  1234
Name:  Fred     Number:  4321
Type in a number (1-7):6
Filename to save:numbers.txt
Type in a number (1-7):7
Goodbye
> python tele2.py
1. Print Phone Numbers
2. Add a Phone Number
3. Remove a Phone Number
4. Lookup a Phone Number
5. Load numbers
6. Save numbers
7. Quit
Type in a number (1-7):5
Filename to load:numbers.txt
Type in a number (1-7):1
Telephone Numbers:
Name:  Jill     Number:  1234
Name:  Fred     Number:  4321
Type in a number (1-7):7
Goodbye
The new portions of this program are: 
http://www.honors.montana.edu/~jjc/easytut/easytut/node17.html (4 of 5) [7/03/2005 1:50:56 PM]

File IO
def load_numbers(numbers,filename):
    in_file = open(filename,"r")
    while 1:
        in_line = in_file.readline()
        if len(in_line) == 0:
            break
        in_line = in_line[:-1]
        [name,number] = string.split(in_line,",")
        numbers[name] = number
    in_file.close()
def save_numbers(numbers,filename):
    out_file = open(filename,"w")
    for x in numbers.keys():
        out_file.write(x+","+numbers[x]+"\n")
    out_file.close()
First we will look at the save portion of the program. First it creates a file object with the command 
open(filename,"w"). Next it goes through and creates a line for each of the phone numbers with 
the command out_file.write(x+","+numbers[x]+"\n"). This writes out a line that 
contains the name, a comma, the number and follows it by a newline. 
The loading portion is a little more complicated. It starts by getting a file object. Then it uses a while 
1: loop to keep looping until a break statement is encountered. Next it gets a line with the line 
in_line = in_file.readline(). The readline function will return a empty string 
(len(string) == 0) when the end of the file is reached. The if statement checks for this and breaks out 
of the while loop when that happens. Of course if the readline function did not return the newline 
at the end of the line there would be no way to tell if an empty string was an empty line or the end of the 
file so the newline is left in what readline returns. Hence we have to get rid of the newline. The line 
in_line = in_line[:-1] does this for us by dropping the last character. Next the line 
[name,number] = string.split(in_line,",") splits the line at the comma into a name 
and a number. This is then added to the numbers dictionary. 
Exercises 
Now modify the grades program from section 11 so that is uses file IO to keep a record of the students. 
next  up  previous
 contents
 
Next: Dealing with the imperfect Up: Non-Programmers Tutorial For Python Previous: Revenge of the 
Strings   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node17.html (5 of 5) [7/03/2005 1:50:56 PM]

Dealing with the imperfect (or how to handle errors)
next  up  previous
 contents
 
Next: The End Up: Non-Programmers Tutorial For Python Previous: File IO   Contents 
Subsections 
G     Exercises 
Dealing with the imperfect (or how to 
handle errors) 
So you now have the perfect program, it runs flawlessly, except for one detail, it will crash on invalid 
user input. Have no fear, for Python has a special control structure for you. It's called try and it tries 
to do something. Here is an example of a program with a problem: 
print "Type Control C or -1 to exit"
number = 1
while number != -1:
    number = int(raw_input("Enter a number: "))
    print "You entered: ",number
Notice how when you enter @#& it outputs something like: 
Traceback (innermost last):
  File "try_less.py", line 4, in ?
    number = int(raw_input("Enter a number: "))
ValueError: invalid literal for int(): @#&
As you can see the int function is unhappy with the number @#& (as well it should be). The last line 
shows what the problem is; Python found a ValueError. How can our program deal with this? 
What we do is first: put the place where the errors occurs in a try block, and second: tell Python how 
we want ValueErrors handled. The following program does this: 
print "Type Control C or -1 to exit"
number = 1
while number != -1:
    try:
        number = int(raw_input("Enter a number: "))
        print "You entered: ",number
    except ValueError:
        print "That was not a number."
http://www.honors.montana.edu/~jjc/easytut/easytut/node18.html (1 of 2) [7/03/2005 1:51:01 PM]

Dealing with the imperfect (or how to handle errors)
Now when we run the new program and give it @#& it tells us ``That was not a number.'' and 
continues with what it was doing before. 
When your program keeps having some error that you know how to handle, put code in a try block, 
and put the way to handle the error in the except block. 
Exercises 
Update at least the phone numbers program so it doesn't crash if a user doesn't enter any data at the 
menu. 
next  up  previous
 contents
 
Next: The End Up: Non-Programmers Tutorial For Python Previous: File IO   Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node18.html (2 of 2) [7/03/2005 1:51:01 PM]

The End
next  up  previous
 contents
 
Next: FAQ Up: Non-Programmers Tutorial For Python Previous: Dealing with the imperfect   
Contents 
The End 
I have run out of interest in adding more to this tutorial. However, I have put it up on Wikibooks at 
http://wikibooks.org/wiki/User:Jrincayc/Contents, where you can edit it and 
discuss it. For the moment I recommend looking at The Python Tutorial by Guido van Rossum. You 
should be able to understand a fair amount of it. 
This tutorial is very much a work in progress. Thanks to everyone who has emailed me. If you have 
comments, I would recomend that you put them on the Wikibooks version (Note the discussion link 
on each page) so that everyone can discuss and think about them. 
Happy programming, may it change your life and the world. 
TODO=[ 'errors','how to make modules','more on loops','more on strings', 'file io','how to use online 
help','try','pickle','anything anyone suggests that I think is a good idea'] 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node19.html [7/03/2005 1:51:05 PM]

FAQ
next  up  previous
 contents
 
Next: About this document ... Up: Non-Programmers Tutorial For Python Previous: The End   
Contents 
FAQ 
Can't use programs with input.
If you are using IDLE then try using command line. This problem seems to be fixed in IDLE 
0.6 and newer. If you are using an older version of IDLE try upgrading to Python 2.0 or newer. 
Is there a printable version?
Yes, see the next question. 
Is there a PDF or zipped version?
Yes, go to http://www.honors.montana.edu/~jjc/easytut/ for several 
different versions. 
What is the tutorial written with?
LATEX, see the easytut.tex file. 
I can't type in programs of more than one line.
If the programs that you type in run as soon as you are typing them in, you need to edit a file 
instead of typing them in interactive mode. (Hint: interactive mode is the mode with the >>> 
prompt in front of it.) 
My question is not answered here.
Email me and ask. Please send me source code if at all relevent (even, (or maybe especially) if 
it doesn't work). Helpful things to include are what you were trying to do, what happened, what 
you expected to happen, error messages, version of Python, Operating System, and whether or 
not your cat was stepping on the keyboard. (The cat in my house has a fondness for space bars 
and control keys.) 
I want to read it in a different language.
There are several translations that I know of. One is in korean and is available at: 
http://home.hanmir.com/~johnsonj/easytut/easytut.html. Another is in 
Spanish and at: 
http://www.honors.montana.edu/~jjc/easytut/easytut_es/. Another is in 
italian and is available at http://www.python.it/doc/tut_begin/index.html. 
Another is in Greek and available at 
http://www.honors.montana.edu/~jjc/easytut/easytut_gr/. Several 
people have said they are doing a translation in other languages such as French, but I never 
heard back from them. If you have done a translation or know of any translations, please either 
send it to me or send me a link. 
How do I make a GUI in Python?
You can use either TKinter at http://www.python.org/topics/tkinter/ or 
WXPython at http://www.wxpython.org/ 
How do I make a game in Python?
The best method is probably to use PYgame at http://pygame.org/ 
http://www.honors.montana.edu/~jjc/easytut/easytut/node20.html (1 of 2) [7/03/2005 1:51:09 PM]

FAQ
How do I make an exectable from a Python program?
Short answer: Python is an interepreted language so that is impossible. Long answer is that 
something similar to an executable can be created by taking the Python interpreter and the file 
and joining them together and distributing that. For more on that problem see 
http://www.python.org/cgi-bin/faqw.py?req=all#4.28 
I need help with the exercises
Hint, the password program requires two variables, one to keep track of the number of times 
the password was typed in, and another to keep track of the last password typed in. Also you 
can download solutions from http://www.honors.montana.edu/~jjc/easytut/ 
What and when was the last thing changed?
2000-Dec-16, added error handling chapter. 
2000-Dec-22, Removed old install procedure. 
2001-Jan-16, Fixed bug in program, Added example and data to lists section. 
2001-Apr-5, Spelling, grammar, added another how to break programs, url fix for PDF 
version. 
2001-May-13, Added chapter on debugging. 
2001-Nov-11, Added exercises, fixed grammar, spelling, and hopefully improved explanations 
of some things. 
2001-Nov-19, Added password exercise, revised references section. 
2002-Feb-23, Moved 3 times password exercise, changed l to list in list examples question. 
Added a new example to Decisions chapter, added two new exercises. 
2002-Mar-14, Changed abs to my_abs since python now defines a abs function. 
2002-May-15, Added a faq about creating an executable. Added a comment from about the list 
example. Fixed typos from Axel Kleiboemer. 
2002-Jun-14, Changed a program to use while true instead of while 1 to be more clear. 
2002-Jul-5, Rewrote functions chapter. Modified fib program to hopefully be clearer. 
2003-Jan-3, Added average examples to the decisions chapter. 
2003-Jan-19, Added comment about value of a_var. Fixed mistake in average2.py program. 
2003-Sep-5, Changed idle instruction to Run->Run Module. 
next  up  previous
 contents
 
Next: About this document ... Up: Non-Programmers Tutorial For Python Previous: The End   
Contents 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node20.html (2 of 2) [7/03/2005 1:51:09 PM]

About this document ...
next  up  previous
 contents
 
Up: Non-Programmers Tutorial For Python Previous: FAQ   Contents 
About this document ... 
Non-Programmers Tutorial For Python
This document was generated using the LaTeX2HTML translator Version 2K.1beta (1.48) 
Copyright © 1993, 1994, 1995, 1996, Nikos Drakos, Computer Based Learning Unit, University of 
Leeds. 
Copyright © 1997, 1998, 1999, Ross Moore, Mathematics Department, Macquarie University, 
Sydney. 
The command line arguments were: 
latex2html -split 3 -local_icons -address 'Josh Cogliati 
jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers 
Python Tutorial Contents' easytut.tex 
The translation was initiated by Josh Cogliati on 2004-06-02 
Josh Cogliati jjc@honors.montana.edu Wikibooks Version: Wikibooks Non-programmers Python 
Tutorial Contents 
http://www.honors.montana.edu/~jjc/easytut/easytut/node21.html [7/03/2005 1:51:13 PM]

One Day of IDLE Toying
One Day of IDLE Toying
G     Spanish translation by Jose Miralles-Santana
G     Thai translation by Pramote Khuwijitjaru
G     Malaysian translation by Mohd. Fahmi Basar
G     Korean translation by Jisoo Yi
G     Chinese translation by Tongli Zhang
G     Greek translation by Leon IV Isauvros
G     Italian translation by Roberto Distefano
G     Indonesian translation by I Wayan Wandira
G     French translation by Yannick Gobin
G     Dutch translation by Mark Lambrecht
G     German translation by Gregor Lingl
G     Portuguese translation by Fernando Manaças Ferreira
This page is meant to help new users of Python who might feel a little disoriented. One question that might come to mind is: ok, we've installed 
Python... ummm... now what?
It might be nice to have a "visual" guide to reduce any initial anxieties. That's what this page is for. The plan is to go through a small session 
with IDLE: the Integrated Development Environment. IDLE is designed to provide a simple way of exploring the language. During this session, 
I'll make a few fumbling mistakes, just to show what to expect when things don't go exactly hunky-dory.
By the way, this is an online document If you have any suggestions, or if you want to make corrections or improvements, please feel free to 
email at dyoo@hkn.eecs.berkeley.edu. Small plug: also, don't forget that there's a great resource in the Python Tutor mailing list: we're a group 
of people who like to show each other interesting stuff in Python. We're all learning together, so feel free to subscribe and join us.
Changes
G     October 26, 2004: Jose Miralles-Santana sent me a Spanish translation. Gracias! 
G     February 10, 2004: Pramote Khuwijitjaru sent me a translation in Thai. Kob-Kkun!
G     February 2, 2004: A reader named Jim noticed that the link to the Beginner's tutorials doesn't go to the right place anymore! Fixed the 
link to http://www.python.org/topics/learn/non-prog.html
G     January 7, 2004: Mohd. Fahmi Basar has written a wonderful translation into Malaysian. Ka-sih! And Maafkan saya as well; I'm so sorry 
for being so late about updating the page. One thing drove out another, as one might say.
G     June 4, 2003: I forgot to put this link up: One Day of MacPython IDE Toying is an adaptation of this tutorial for MacPython. Much nicer 
screenshots, too. *grin* 
G     March 11, 2003: Jisoo Yi just sent me a translation into Korean! Gam sa hap nee da!
G     February 8, 2003: Tongli Zhang sent me a new translation of the IDLE tutorial in Chinese. Shie-shie!
G     January 9, 2003: Leon IV Isauvros has written a Greek translation! Sas efharisto poli!
G     December 13, 2002: Roberto Distefano wrote a translation in Italian. This is awesome! Grazie!
G     August 26, 2002: I Wayan Wandira has translated the tutorial into Indonesian. Selamat tinggal! Also, I've implemented Ferg_S's 
suggestion to add page-breaking BR tags to make a dead-wood version of the guide more pleasant to read. 
G     July 8, 2002: Yannick Gobin graciously donated a French translation. Merci!
G     April 30, 2002: Mark Lambrecht donated his Dutch translation. Dankzegging!
G     January 30, 2002: Fernando Manaças Ferreira sent me a Portuguese translation. This is wonderful! Obrigado!
G     December 4 (Evening): Gregor Lingl sent me a German translation of the guide. Danke! 
G     December 4, 2001: there's enough demand for this page to be done, so I've tried to patch the FIXME's throughout this page.]
G     [June 19, 2001: my computer monitor has just burnt to a brown crisp, so image updates to this page will be a little delayed until I get it 
replaced. My apologies!]
Ok, let's assume that we've already installed Python. (If not, we can visit: http://python.org and download the most recent Python interpreter. As 
of this writing, that's Python 2.1.) The first thing we'd like to do is actually start running it! We can do this by opening up IDLE, which should be 
in our Start Menu under the newly-created Python program group. 
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (1 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
We'll see that a new window magnificantly opens up: 
This is the main window to IDLE, and what we see right now is called the "Interpreter" window. The Interpreter allows us to enter commands 
directly into Python, and as soon as we enter in a command, Python will execute it and spit out its result back to us. We'll be using this 
Interpreter window a lot when we're exploring Python: it's very nice because we get back our results immediately. If it helps, we can think of it 
as a very powerful calculator.
Let's try something now! As per tradition, let's get Python to say the immortal words, "Hello World". 
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (2 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
Those '>>>' signs act as a prompt for us: Python is ready to read in a new command by giving us that visual cue. Also, we notice that as we enter 
in commands, Python will give us its output immediately. 
Ok, this seems pretty simple enough. Let's try a few more commands. If we look below:
we'll see the result of running a few more commands. Don't worry too much about knowing the exact rules for making programs yet: the idea is 
that we can experiment with Python by typing in commands. If things don't work, then we can correct the mistake, and try it again.
If you got to this point, you now know enough to start playing around with Python! Crack open one of the tutorials from the Python For 
Beginners web page, and start exploring with the interpreter. No time limit here. *grin*
Now that we've paddled long enough, we might be asking: ok, this is neat, but if we close down Python and start it up again, how do we get the 
computer to remember what we typed?
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (3 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
The solution is a little subtle: we can't directly save what's on the interpreter window, because it will include both our commands and the 
system's responses. What we'd like is to make a prepared file, with just our own commands, and to be able to save that file as a document. When 
we're in the mood, we can later open that file and "run" Python over it, saving us the time of retyping the whole thing over again.
Let's try this. First, let's start with a clean slate by opening up a new window.
Here's the result of that menu command:
We notice that there's nothing in this new window. What this means is that this file is purely for our commands: Python won't interject with its 
own responses as we enter the program, that is, not until we tell it to. I'll call this the "Program" window, to distinguish it from the Interpreter 
window.
What we wanted to do before was save some of the stuff we had tried out on the interpreter window. Let's do that by typing (or copy/pasting) 
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (4 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
those commands into our Program window.
Ok, we're done with copying and pasting. One big thing to notice is that we're careful to get rid of the ">>>" prompts because there's not really 
part of our program. The interpreter uses them just to tell us that we're in the interpreter, but now that we're editing in a separate file, we can 
remove the artifacts that the interpreter introduces.
Let's save the file now. The Save command is located under the File menu: 
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (5 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
Now that we've saved the program, how do we run the program? If we look at the menus on our program window,
we'll see that there's a menu option to "Run script", and that's what we'll do. What we want to see is Python running through the program, and 
displaying its results in the Interpreter window.
By the way, one thing to notice is that I made a typo: I didn't quite copy exactly what I had entered in the interpreter window before. Does this 
affect things?
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (6 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
Ooops. Here is an example of what Python calls a "syntax error". Python sees that we made a typo, and warns us to take a much closer look at 
our program. The designers of Python feel that having the system point out the error is better than trying to guess at what the programmer meant. 
It's the idea of explicitness versus implicitness. There are certain rules that Python follows that measure what looks good and what looks 
suspicious. As we speak the language, we'll get a feel for these rules. And if you're feeling suspicious, yes, this is a bit like grammar. *grin*
Python is often perceptive enough to direct us toward the problem, and in this case, it's telling us that we forgot to put something at the end of 
this line. In this case, we need to add an additional quotation mark. Let's add that in now.
Ok, let's say that we fixed that silly typo. Let's try to run the program again.
Another snag, but not that complicated, just silly. One other thing that might put us off guard is that IDLE wants us to save any Program 
windows before we run them; this is a user interface issue that makes sure that we save our work before we start running the program.
(Note: the comment above might be outdated; enough people got annoyed by IDLE's lazy behavior that they've clamored for change. We hope 
that the development version of IDLE doesn't give this error message anymore.)
They say that third time's the charm, so let's try running it again. Hopefully, it should run well now.
As we play with Python, we'll find ourselves "switching modes" between the Interpreter window and the Program window. The reason for this is 
because we can use the Interpreter as if it were a small laboratory and experimentally try small programs. After we're satisfied (or when we're 
tired), we can save what we've learned into a program file.
This, of course, assumes that we can actually load the file later on; it would be a silly thing to save a program, and not be able to load it up later. 
Let's show this, and then stop for today. I'll close everything down in IDLE, and start from a clean slate.
We'll find the Open command under the File menu:
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (7 of 8) [7/03/2005 1:54:23 PM]

One Day of IDLE Toying
and if all goes well, we should see a new Program window open up:
with our old program. We're in business! We can save our old work and open it up at a later time. It's not jaw-opening, but it is crucial for the 
person who wants to play with Python for more than a day. *grin*
This is pretty much all we need to know about IDLE to actually do interesting things. This guide has skipped a lot of stuff about IDLE: IDLE is 
much more than an mere editor, but it takes some time to explore all of its features, so let's stop for now. There's a IDLE Documentation page 
that explains advanced IDLE use, for those with an insatiable curiosity. Again, if you have any questions, please feel free to stop by the Python 
Tutor mailing list; there's usually someone there who'd be happy to chat about Python with you. It's been fun, and I hope this has been helpful!
Back to my personal Python page.
http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html (8 of 8) [7/03/2005 1:54:23 PM]

Python Tutorial
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Up: Python Documentation Index Next: Front Matter 
Python Tutorial
Guido van Rossum
PythonLabs 
Email: docs@python.org 
Fred L. Drake, Jr., editor
Release 2.3.5
February 8, 2005
G     Front Matter 
G     Contents 
G     1. Whetting Your Appetite 
G     2. Using the Python Interpreter 
H     2.1 Invoking the Interpreter 
I     2.1.1 Argument Passing 
I     2.1.2 Interactive Mode 
H     2.2 The Interpreter and Its Environment 
I     2.2.1 Error Handling 
I     2.2.2 Executable Python Scripts 
I     2.2.3 Source Code Encoding 
I     2.2.4 The Interactive Startup File 
G     3. An Informal Introduction to Python 
H     3.1 Using Python as a Calculator 
I     3.1.1 Numbers 
I     3.1.2 Strings 
I     3.1.3 Unicode Strings 
I     3.1.4 Lists 
H     3.2 First Steps Towards Programming 
G     4. More Control Flow Tools 
http://www.python.org/doc/2.3.5/tut/tut.html (1 of 4) [7/03/2005 2:32:56 PM]

Python Tutorial
H     4.1 if Statements 
H     4.2 for Statements 
H     4.3 The range() Function 
H     4.4 break and continue Statements, and else Clauses on Loops 
H     4.5 pass Statements 
H     4.6 Defining Functions 
H     4.7 More on Defining Functions 
I     4.7.1 Default Argument Values 
I     4.7.2 Keyword Arguments 
I     4.7.3 Arbitrary Argument Lists 
I     4.7.4 Unpacking Argument Lists 
I     4.7.5 Lambda Forms 
I     4.7.6 Documentation Strings 
G     5. Data Structures 
H     5.1 More on Lists 
I     5.1.1 Using Lists as Stacks 
I     5.1.2 Using Lists as Queues 
I     5.1.3 Functional Programming Tools 
I     5.1.4 List Comprehensions 
H     5.2 The del statement 
H     5.3 Tuples and Sequences 
H     5.4 Dictionaries 
H     5.5 Looping Techniques 
H     5.6 More on Conditions 
H     5.7 Comparing Sequences and Other Types 
G     6. Modules 
H     6.1 More on Modules 
I     6.1.1 The Module Search Path 
I     6.1.2 ``Compiled'' Python files 
H     6.2 Standard Modules 
H     6.3 The dir() Function 
H     6.4 Packages 
I     6.4.1 Importing * From a Package 
I     6.4.2 Intra-package References 
I     6.4.3 Packages in Multiple Directories 
G     7. Input and Output 
H     7.1 Fancier Output Formatting 
H     7.2 Reading and Writing Files 
I     7.2.1 Methods of File Objects 
I     7.2.2 The pickle Module 
G     8. Errors and Exceptions 
http://www.python.org/doc/2.3.5/tut/tut.html (2 of 4) [7/03/2005 2:32:56 PM]

Python Tutorial
H     8.1 Syntax Errors 
H     8.2 Exceptions 
H     8.3 Handling Exceptions 
H     8.4 Raising Exceptions 
H     8.5 User-defined Exceptions 
H     8.6 Defining Clean-up Actions 
G     9. Classes 
H     9.1 A Word About Terminology 
H     9.2 Python Scopes and Name Spaces 
H     9.3 A First Look at Classes 
I     9.3.1 Class Definition Syntax 
I     9.3.2 Class Objects 
I     9.3.3 Instance Objects 
I     9.3.4 Method Objects 
H     9.4 Random Remarks 
H     9.5 Inheritance 
I     9.5.1 Multiple Inheritance 
H     9.6 Private Variables 
H     9.7 Odds and Ends 
H     9.8 Exceptions Are Classes Too 
H     9.9 Iterators 
H     9.10 Generators 
G     10. Brief Tour of the Standard Library 
H     10.1 Operating System Interface 
H     10.2 File Wildcards 
H     10.3 Command Line Arguments 
H     10.4 Error Output Redirection and Program Termination 
H     10.5 String Pattern Matching 
H     10.6 Mathematics 
H     10.7 Internet Access 
H     10.8 Dates and Times 
H     10.9 Data Compression 
H     10.10 Performance Measurement 
H     10.11 Quality Control 
H     10.12 Batteries Included 
G     11. What Now? 
G     A. Interactive Input Editing and History Substitution 
H     A.1 Line Editing 
H     A.2 History Substitution 
H     A.3 Key Bindings 
H     A.4 Commentary 
http://www.python.org/doc/2.3.5/tut/tut.html (3 of 4) [7/03/2005 2:32:56 PM]

Python Tutorial
G     B. Floating Point Arithmetic: Issues and Limitations 
H     B.1 Representation Error 
G     C. History and License 
H     C.1 History of the software 
H     C.2 Terms and conditions for accessing or otherwise using Python 
G     D. Glossary 
G     Index 
G     About this document ... 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Up: Python Documentation Index Next: Front Matter 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/tut.html (4 of 4) [7/03/2005 2:32:56 PM]

Front Matter
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: Python Tutorial Up: Python Tutorial Next: Contents 
Front Matter 
Copyright © 2001, 2002, 2003 Python Software Foundation. All rights reserved. 
Copyright © 2000 BeOpen.com. All rights reserved. 
Copyright © 1995-2000 Corporation for National Research Initiatives. All rights reserved. 
Copyright © 1991-1995 Stichting Mathematisch Centrum. All rights reserved. 
See the end of this document for complete license and permissions information. 
Abstract:
Python is an easy to learn, powerful programming language. It has efficient high-level data structures 
and a simple but effective approach to object-oriented programming. Python's elegant syntax and 
dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid 
application development in many areas on most platforms. 
The Python interpreter and the extensive standard library are freely available in source or binary form 
for all major platforms from the Python Web site, http://www.python.org/, and can be freely 
distributed. The same site also contains distributions of and pointers to many free third party Python 
modules, programs and tools, and additional documentation. 
The Python interpreter is easily extended with new functions and data types implemented in C or C++ 
(or other languages callable from C). Python is also suitable as an extension language for 
customizable applications. 
This tutorial introduces the reader informally to the basic concepts and features of the Python 
language and system. It helps to have a Python interpreter handy for hands-on experience, but all 
examples are self-contained, so the tutorial can be read off-line as well. 
For a description of standard objects and modules, see the Python Library Reference document. The 
Python Reference Manual gives a more formal definition of the language. To write extensions in C or 
C++, read Extending and Embedding the Python Interpreter and Python/C API Reference. There are 
also several books covering Python in depth. 
This tutorial does not attempt to be comprehensive and cover every single feature, or even every 
http://www.python.org/doc/2.3.5/tut/node1.html (1 of 2) [7/03/2005 2:33:22 PM]

Front Matter
commonly used feature. Instead, it introduces many of Python's most noteworthy features, and will 
give you a good idea of the language's flavor and style. After reading it, you will be able to read and 
write Python modules and programs, and you will be ready to learn more about the various Python 
library modules described in the Python Library Reference. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: Python Tutorial Up: Python Tutorial Next: Contents 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node1.html (2 of 2) [7/03/2005 2:33:22 PM]

4. More Control Flow Tools 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 3. An Informal Introduction Up: Python Tutorial Next: 5. Data Structures 
Subsections 
G     4.1 if Statements 
G     4.2 for Statements 
G     4.3 The range() Function 
G     4.4 break and continue Statements, and else Clauses on Loops 
G     4.5 pass Statements 
G     4.6 Defining Functions 
G     4.7 More on Defining Functions 
H     4.7.1 Default Argument Values 
H     4.7.2 Keyword Arguments 
H     4.7.3 Arbitrary Argument Lists 
H     4.7.4 Unpacking Argument Lists 
H     4.7.5 Lambda Forms 
H     4.7.6 Documentation Strings 
4. More Control Flow Tools 
Besides the while statement just introduced, Python knows the usual control flow statements known from 
other languages, with some twists. 
4.1 if Statements 
Perhaps the most well-known statement type is the if statement. For example: 
>>> x = int(raw_input("Please enter an integer: "))
>>> if x < 0:
...      x = 0
...      print 'Negative changed to zero'
... elif x == 0:
...      print 'Zero'
... elif x == 1:
...      print 'Single'
... else:
...      print 'More'
...
There can be zero or more elif parts, and the else part is optional. The keyword `elif' is short for `else 
if', and is useful to avoid excessive indentation. An if ... elif ... elif ... sequence is a substitute for the 
switch or case statements found in other languages. 
http://www.python.org/doc/2.3.5/tut/node6.html (1 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
4.2 for Statements 
The for statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always 
iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define 
both the iteration step and halting condition (as C), Python's for statement iterates over the items of any 
sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended): 
>>> # Measure some strings:
... a = ['cat', 'window', 'defenestrate']
>>> for x in a:
...     print x, len(x)
... 
cat 3
window 6
defenestrate 12
It is not safe to modify the sequence being iterated over in the loop (this can only happen for mutable 
sequence types, such as lists). If you need to modify the list you are iterating over (for example, to duplicate 
selected items) you must iterate over a copy. The slice notation makes this particularly convenient: 
>>> for x in a[:]: # make a slice copy of the entire list
...    if len(x) > 6: a.insert(0, x)
... 
>>> a
['defenestrate', 'cat', 'window', 'defenestrate']
4.3 The range() Function 
If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It 
generates lists containing arithmetic progressions: 
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
The given end point is never part of the generated list; range(10) generates a list of 10 values, exactly 
the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, 
or to specify a different increment (even negative; sometimes this is called the `step'): 
>>> range(5, 10)
[5, 6, 7, 8, 9]
>>> range(0, 10, 3)
[0, 3, 6, 9]
>>> range(-10, -100, -30)
[-10, -40, -70]
To iterate over the indices of a sequence, combine range() and len() as follows: 
http://www.python.org/doc/2.3.5/tut/node6.html (2 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...     print i, a[i]
... 
0 Mary
1 had
2 a
3 little
4 lamb
4.4 break and continue Statements, and else 
Clauses on Loops 
The break statement, like in C, breaks out of the smallest enclosing for or while loop. 
The continue statement, also borrowed from C, continues with the next iteration of the loop. 
Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of 
the list (with for) or when the condition becomes false (with while), but not when the loop is terminated 
by a break statement. This is exemplified by the following loop, which searches for prime numbers: 
>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print n, 'equals', x, '*', n/x
...             break
...     else:
...         # loop fell through without finding a factor
...         print n, 'is a prime number'
... 
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
4.5 pass Statements 
The pass statement does nothing. It can be used when a statement is required syntactically but the program 
requires no action. For example: 
>>> while True:
...       pass # Busy-wait for keyboard interrupt
...
http://www.python.org/doc/2.3.5/tut/node6.html (3 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
4.6 Defining Functions 
We can create a function that writes the Fibonacci series to an arbitrary boundary: 
>>> def fib(n):    # write Fibonacci series up to n
...     """Print a Fibonacci series up to n."""
...     a, b = 0, 1
...     while b < n:
...         print b,
...         a, b = b, a+b
... 
>>> # Now call the function we just defined:
... fib(2000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597
The keyword def introduces a function definition. It must be followed by the function name and the 
parenthesized list of formal parameters. The statements that form the body of the function start at the next 
line, and must be indented. The first statement of the function body can optionally be a string literal; this 
string literal is the function's documentation string, or docstring. 
There are tools which use docstrings to automatically produce online or printed documentation, or to let the 
user interactively browse through code; it's good practice to include docstrings in code that you write, so try 
to make a habit of it. 
The execution of a function introduces a new symbol table used for the local variables of the function. More 
precisely, all variable assignments in a function store the value in the local symbol table; whereas variable 
references first look in the local symbol table, then in the global symbol table, and then in the table of built-
in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a 
global statement), although they may be referenced. 
The actual parameters (arguments) to a function call are introduced in the local symbol table of the called 
function when it is called; thus, arguments are passed using call by value (where the value is always an 
object reference, not the value of the object).4.1 When a function calls another function, a new local symbol 
table is created for that call. 
A function definition introduces the function name in the current symbol table. The value of the function 
name has a type that is recognized by the interpreter as a user-defined function. This value can be assigned 
to another name which can then also be used as a function. This serves as a general renaming mechanism: 
>>> fib
<function fib at 10042ed0>
>>> f = fib
>>> f(100)
1 1 2 3 5 8 13 21 34 55 89
You might object that fib is not a function but a procedure. In Python, like in C, procedures are just 
functions that don't return a value. In fact, technically speaking, procedures do return a value, albeit a rather 
boring one. This value is called None (it's a built-in name). Writing the value None is normally suppressed 
http://www.python.org/doc/2.3.5/tut/node6.html (4 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
by the interpreter if it would be the only value written. You can see it if you really want to: 
>>> print fib(0)
None
It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it: 
>>> def fib2(n): # return Fibonacci series up to n
...     """Return a list containing the Fibonacci series up to n."""
...     result = []
...     a, b = 0, 1
...     while b < n:
...         result.append(b)    # see below
...         a, b = b, a+b
...     return result
... 
>>> f100 = fib2(100)    # call it
>>> f100                # write the result
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
This example, as usual, demonstrates some new Python features: 
G     The return statement returns with a value from a function. return without an expression 
argument returns None. Falling off the end of a procedure also returns None. 
G     The statement result.append(b) calls a method of the list object result. A method is a 
function that `belongs' to an object and is named obj.methodname, where obj is some object 
(this may be an expression), and methodname is the name of a method that is defined by the 
object's type. Different types define different methods. Methods of different types may have the same 
name without causing ambiguity. (It is possible to define your own object types and methods, using 
classes, as discussed later in this tutorial.) The method append() shown in the example, is defined 
for list objects; it adds a new element at the end of the list. In this example it is equivalent to 
"result = result + [b]", but more efficient. 
4.7 More on Defining Functions 
It is also possible to define functions with a variable number of arguments. There are three forms, which can 
be combined. 
4.7.1 Default Argument Values 
The most useful form is to specify a default value for one or more arguments. This creates a function that 
can be called with fewer arguments than it is defined to allow. For example: 
def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
    while True:
        ok = raw_input(prompt)
        if ok in ('y', 'ye', 'yes'): return True
http://www.python.org/doc/2.3.5/tut/node6.html (5 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
        if ok in ('n', 'no', 'nop', 'nope'): return False
        retries = retries - 1
        if retries < 0: raise IOError, 'refusenik user'
        print complaint
This function can be called either like this: ask_ok('Do you really want to quit?') or like 
this: ask_ok('OK to overwrite the file?', 2). 
This example also introduces the in keyword. This tests whether or not a sequence contains a certain value. 
The default values are evaluated at the point of function definition in the defining scope, so that 
i = 5
def f(arg=i):
    print arg
i = 6
f()
will print 5. 
Important warning: The default value is evaluated only once. This makes a difference when the default is 
a mutable object such as a list, dictionary, or instances of most classes. For example, the following function 
accumulates the arguments passed to it on subsequent calls: 
def f(a, L=[]):
    L.append(a)
    return L
print f(1)
print f(2)
print f(3)
This will print 
[1]
[1, 2]
[1, 2, 3]
If you don't want the default to be shared between subsequent calls, you can write the function like this 
instead: 
def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L
4.7.2 Keyword Arguments 
http://www.python.org/doc/2.3.5/tut/node6.html (6 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
Functions can also be called using keyword arguments of the form "keyword = value". For instance, the 
following function: 
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print "-- This parrot wouldn't", action,
    print "if you put", voltage, "Volts through it."
    print "-- Lovely plumage, the", type
    print "-- It's", state, "!"
could be called in any of the following ways: 
parrot(1000)
parrot(action = 'VOOOOOM', voltage = 1000000)
parrot('a thousand', state = 'pushing up the daisies')
parrot('a million', 'bereft of life', 'jump')
but the following calls would all be invalid: 
parrot()                     # required argument missing
parrot(voltage=5.0, 'dead')  # non-keyword argument following keyword
parrot(110, voltage=220)     # duplicate value for argument
parrot(actor='John Cleese')  # unknown keyword
In general, an argument list must have any positional arguments followed by any keyword arguments, where 
the keywords must be chosen from the formal parameter names. It's not important whether a formal 
parameter has a default value or not. No argument may receive a value more than once -- formal parameter 
names corresponding to positional arguments cannot be used as keywords in the same calls. Here's an 
example that fails due to this restriction: 
>>> def function(a):
...     pass
... 
>>> function(0, a=0)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: function() got multiple values for keyword argument 'a'
When a final formal parameter of the form **name is present, it receives a dictionary containing all 
keyword arguments whose keyword doesn't correspond to a formal parameter. This may be combined with a 
formal parameter of the form *name (described in the next subsection) which receives a tuple containing the 
positional arguments beyond the formal parameter list. (*name must occur before **name.) For example, if 
we define a function like this: 
def cheeseshop(kind, *arguments, **keywords):
    print "-- Do you have any", kind, '?'
    print "-- I'm sorry, we're all out of", kind
    for arg in arguments: print arg
    print '-'*40
    keys = keywords.keys()
http://www.python.org/doc/2.3.5/tut/node6.html (7 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
    keys.sort()
    for kw in keys: print kw, ':', keywords[kw]
It could be called like this: 
cheeseshop('Limburger', "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           client='John Cleese',
           shopkeeper='Michael Palin',
           sketch='Cheese Shop Sketch')
and of course it would print: 
-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
client : John Cleese
shopkeeper : Michael Palin
sketch : Cheese Shop Sketch
Note that the sort() method of the list of keyword argument names is called before printing the contents 
of the keywords dictionary; if this is not done, the order in which the arguments are printed is undefined. 
4.7.3 Arbitrary Argument Lists 
Finally, the least frequently used option is to specify that a function can be called with an arbitrary number 
of arguments. These arguments will be wrapped up in a tuple. Before the variable number of arguments, 
zero or more normal arguments may occur. 
def fprintf(file, format, *args):
    file.write(format % args)
4.7.4 Unpacking Argument Lists 
The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a 
function call requiring separate positional arguments. For instance, the built-in range() function expects 
separate start and stop arguments. If they are not available separately, write the function call with the *-
operator to unpack the arguments out of a list or tuple: 
>>> range(3, 6)             # normal call with separate arguments
[3, 4, 5]
>>> args = [3, 6]
>>> range(*args)            # call with arguments unpacked from a list
[3, 4, 5]
4.7.5 Lambda Forms 
http://www.python.org/doc/2.3.5/tut/node6.html (8 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
By popular demand, a few features commonly found in functional programming languages and Lisp have 
been added to Python. With the lambda keyword, small anonymous functions can be created. Here's a 
function that returns the sum of its two arguments: "lambda a, b: a+b". Lambda forms can be used 
wherever function objects are required. They are syntactically restricted to a single expression. 
Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, 
lambda forms can reference variables from the containing scope: 
>>> def make_incrementor(n):
...     return lambda x: x + n
...
>>> f = make_incrementor(42)
>>> f(0)
42
>>> f(1)
43
4.7.6 Documentation Strings 
There are emerging conventions about the content and formatting of documentation strings. 
The first line should always be a short, concise summary of the object's purpose. For brevity, it should not 
explicitly state the object's name or type, since these are available by other means (except if the name 
happens to be a verb describing a function's operation). This line should begin with a capital letter and end 
with a period. 
If there are more lines in the documentation string, the second line should be blank, visually separating the 
summary from the rest of the description. The following lines should be one or more paragraphs describing 
the object's calling conventions, its side effects, etc. 
The Python parser does not strip indentation from multi-line string literals in Python, so tools that process 
documentation have to strip indentation if desired. This is done using the following convention. The first 
non-blank line after the first line of the string determines the amount of indentation for the entire 
documentation string. (We can't use the first line since it is generally adjacent to the string's opening quotes 
so its indentation is not apparent in the string literal.) Whitespace ``equivalent'' to this indentation is then 
stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they 
occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after 
expansion of tabs (to 8 spaces, normally). 
Here is an example of a multi-line docstring: 
>>> def my_function():
...     """Do nothing, but document it.
... 
...     No, really, it doesn't do anything.
...     """
...     pass
... 
>>> print my_function.__doc__
http://www.python.org/doc/2.3.5/tut/node6.html (9 of 10) [7/03/2005 2:33:59 PM]

4. More Control Flow Tools 
Do nothing, but document it.
    No, really, it doesn't do anything.
Footnotes
... object).4.1
Actually, call by object reference would be a better description, since if a mutable object is passed, 
the caller will see any changes the callee makes to it (items inserted into a list). 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 3. An Informal Introduction Up: Python Tutorial Next: 5. Data Structures 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node6.html (10 of 10) [7/03/2005 2:33:59 PM]

5. Data Structures 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 4. More Control Flow Up: Python Tutorial Next: 6. Modules 
Subsections 
G     5.1 More on Lists 
H     5.1.1 Using Lists as Stacks 
H     5.1.2 Using Lists as Queues 
H     5.1.3 Functional Programming Tools 
H     5.1.4 List Comprehensions 
G     5.2 The del statement 
G     5.3 Tuples and Sequences 
G     5.4 Dictionaries 
G     5.5 Looping Techniques 
G     5.6 More on Conditions 
G     5.7 Comparing Sequences and Other Types 
5. Data Structures 
This chapter describes some things you've learned about already in more detail, and adds some new 
things as well. 
5.1 More on Lists 
The list data type has some more methods. Here are all of the methods of list objects: 
append(x)
Add an item to the end of the list; equivalent to a[len(a):] = [x]. 
extend(L)
Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L. 
insert(i, x)
Insert an item at a given position. The first argument is the index of the element before which to 
insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is 
equivalent to a.append(x). 
remove(x)
Remove the first item from the list whose value is x. It is an error if there is no such item. 
http://www.python.org/doc/2.3.5/tut/node7.html (1 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
pop([i])
Remove the item at the given position in the list, and return it. If no index is specified, 
a.pop() returns the last item in the list. The item is also removed from the list. (The square 
brackets around the i in the method signature denote that the parameter is optional, not that you 
should type square brackets at that position. You will see this notation frequently in the Python 
Library Reference.) 
index(x)
Return the index in the list of the first item whose value is x. It is an error if there is no such 
item. 
count(x)
Return the number of times x appears in the list. 
sort()
Sort the items of the list, in place. 
reverse()
Reverse the elements of the list, in place. 
An example that uses most of the list methods: 
>>> a = [66.6, 333, 333, 1, 1234.5]
>>> print a.count(333), a.count(66.6), a.count('x')
2 1 0
>>> a.insert(2, -1)
>>> a.append(333)
>>> a
[66.6, 333, -1, 333, 1, 1234.5, 333]
>>> a.index(333)
1
>>> a.remove(333)
>>> a
[66.6, -1, 333, 1, 1234.5, 333]
>>> a.reverse()
>>> a
[333, 1234.5, 1, 333, -1, 66.6]
>>> a.sort()
>>> a
[-1, 1, 66.6, 333, 333, 1234.5]
5.1.1 Using Lists as Stacks 
The list methods make it very easy to use a list as a stack, where the last element added is the first 
element retrieved (``last-in, first-out''). To add an item to the top of the stack, use append(). To 
http://www.python.org/doc/2.3.5/tut/node7.html (2 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
retrieve an item from the top of the stack, use pop() without an explicit index. For example: 
>>> stack = [3, 4, 5]
>>> stack.append(6)
>>> stack.append(7)
>>> stack
[3, 4, 5, 6, 7]
>>> stack.pop()
7
>>> stack
[3, 4, 5, 6]
>>> stack.pop()
6
>>> stack.pop()
5
>>> stack
[3, 4]
5.1.2 Using Lists as Queues 
You can also use a list conveniently as a queue, where the first element added is the first element 
retrieved (``first-in, first-out''). To add an item to the back of the queue, use append(). To retrieve an 
item from the front of the queue, use pop() with 0 as the index. For example: 
>>> queue = ["Eric", "John", "Michael"]
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.pop(0)
'Eric'
>>> queue.pop(0)
'John'
>>> queue
['Michael', 'Terry', 'Graham']
5.1.3 Functional Programming Tools 
There are three built-in functions that are very useful when used with lists: filter(), map(), and 
reduce(). 
"filter(function, sequence)" returns a sequence (of the same type, if possible) consisting of those 
items from the sequence for which function(item) is true. For example, to compute some primes: 
>>> def f(x): return x % 2 != 0 and x % 3 != 0
...
>>> filter(f, range(2, 25))
[5, 7, 11, 13, 17, 19, 23]
http://www.python.org/doc/2.3.5/tut/node7.html (3 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
"map(function, sequence)" calls function(item) for each of the sequence's items and returns a list 
of the return values. For example, to compute some cubes: 
>>> def cube(x): return x*x*x
...
>>> map(cube, range(1, 11))
[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
More than one sequence may be passed; the function must then have as many arguments as there are 
sequences and is called with the corresponding item from each sequence (or None if some sequence is 
shorter than another). For example: 
>>> seq = range(8)
>>> def add(x, y): return x+y
...
>>> map(add, seq, seq)
[0, 2, 4, 6, 8, 10, 12, 14]
"reduce(func, sequence)" returns a single value constructed by calling the binary function func on 
the first two items of the sequence, then on the result and the next item, and so on. For example, to 
compute the sum of the numbers 1 through 10: 
>>> def add(x,y): return x+y
...
>>> reduce(add, range(1, 11))
55
If there's only one item in the sequence, its value is returned; if the sequence is empty, an exception is 
raised. 
A third argument can be passed to indicate the starting value. In this case the starting value is returned 
for an empty sequence, and the function is first applied to the starting value and the first sequence 
item, then to the result and the next item, and so on. For example, 
>>> def sum(seq):
...     def add(x,y): return x+y
...     return reduce(add, seq, 0)
... 
>>> sum(range(1, 11))
55
>>> sum([])
0
Don't use this example's definition of sum(): since summing numbers is such a common need, a built-
in function sum(sequence) is already provided, and works exactly like this. New in version 2.3. 
5.1.4 List Comprehensions 
http://www.python.org/doc/2.3.5/tut/node7.html (4 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
List comprehensions provide a concise way to create lists without resorting to use of map(), 
filter() and/or lambda. The resulting list definition tends often to be clearer than lists built using 
those constructs. Each list comprehension consists of an expression followed by a for clause, then 
zero or more for or if clauses. The result will be a list resulting from evaluating the expression in 
the context of the for and if clauses which follow it. If the expression would evaluate to a tuple, it 
must be parenthesized. 
>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
>>> [weapon.strip() for weapon in freshfruit]
['banana', 'loganberry', 'passion fruit']
>>> vec = [2, 4, 6]
>>> [3*x for x in vec]
[6, 12, 18]
>>> [3*x for x in vec if x > 3]
[12, 18]
>>> [3*x for x in vec if x < 2]
[]
>>> [[x,x**2] for x in vec]
[[2, 4], [4, 16], [6, 36]]
>>> [x, x**2 for x in vec]      # error - parens required for tuples
  File "<stdin>", line 1, in ?
    [x, x**2 for x in vec]
               ^
SyntaxError: invalid syntax
>>> [(x, x**2) for x in vec]
[(2, 4), (4, 16), (6, 36)]
>>> vec1 = [2, 4, 6]
>>> vec2 = [4, 3, -9]
>>> [x*y for x in vec1 for y in vec2]
[8, 6, -18, 16, 12, -36, 24, 18, -54]
>>> [x+y for x in vec1 for y in vec2]
[6, 5, -7, 8, 7, -5, 10, 9, -3]
>>> [vec1[i]*vec2[i] for i in range(len(vec1))]
[8, 12, -54]
List comprehensions are much more flexible than map() and can be applied to functions with more 
than one argument and to nested functions: 
>>> [str(round(355/113.0, i)) for i in range(1,6)]
['3.1', '3.14', '3.142', '3.1416', '3.14159']
5.2 The del statement 
There is a way to remove an item from a list given its index instead of its value: the del statement. 
This can also be used to remove slices from a list (which we did earlier by assignment of an empty list 
to the slice). For example: 
http://www.python.org/doc/2.3.5/tut/node7.html (5 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
>>> a = [-1, 1, 66.6, 333, 333, 1234.5]
>>> del a[0]
>>> a
[1, 66.6, 333, 333, 1234.5]
>>> del a[2:4]
>>> a
[1, 66.6, 1234.5]
del can also be used to delete entire variables: 
>>> del a
Referencing the name a hereafter is an error (at least until another value is assigned to it). We'll find 
other uses for del later. 
5.3 Tuples and Sequences 
We saw that lists and strings have many common properties, such as indexing and slicing operations. 
They are two examples of sequence data types. Since Python is an evolving language, other sequence 
data types may be added. There is also another standard sequence data type: the tuple. 
A tuple consists of a number of values separated by commas, for instance: 
>>> t = 12345, 54321, 'hello!'
>>> t[0]
12345
>>> t
(12345, 54321, 'hello!')
>>> # Tuples may be nested:
... u = t, (1, 2, 3, 4, 5)
>>> u
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
As you see, on output tuples are alway enclosed in parentheses, so that nested tuples are interpreted 
correctly; they may be input with or without surrounding parentheses, although often parentheses are 
necessary anyway (if the tuple is part of a larger expression). 
Tuples have many uses. For example: (x, y) coordinate pairs, employee records from a database, etc. 
Tuples, like strings, are immutable: it is not possible to assign to the individual items of a tuple (you 
can simulate much of the same effect with slicing and concatenation, though). It is also possible to 
create tuples which contain mutable objects, such as lists. 
A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra 
quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple 
with one item is constructed by following a value with a comma (it is not sufficient to enclose a single 
value in parentheses). Ugly, but effective. For example: 
http://www.python.org/doc/2.3.5/tut/node7.html (6 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
>>> empty = ()
>>> singleton = 'hello',    # <-- note trailing comma
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)
The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 
12345, 54321 and 'hello!' are packed together in a tuple. The reverse operation is also possible: 
>>> x, y, z = t
This is called, appropriately enough, sequence unpacking. Sequence unpacking requires that the list of 
variables on the left have the same number of elements as the length of the sequence. Note that 
multiple assignment is really just a combination of tuple packing and sequence unpacking! 
There is a small bit of asymmetry here: packing multiple values always creates a tuple, and unpacking 
works for any sequence. 
5.4 Dictionaries 
Another useful data type built into Python is the dictionary. Dictionaries are sometimes found in other 
languages as ``associative memories'' or ``associative arrays''. Unlike sequences, which are indexed by 
a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and 
numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or 
tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. 
You can't use lists as keys, since lists can be modified in place using their append() and extend() 
methods, as well as slice and indexed assignments. 
It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the 
keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a 
comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; 
this is also the way dictionaries are written on output. 
The main operations on a dictionary are storing a value with some key and extracting the value given 
the key. It is also possible to delete a key:value pair with del. If you store using a key that is already 
in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-
existent key. 
The keys() method of a dictionary object returns a list of all the keys used in the dictionary, in 
random order (if you want it sorted, just apply the sort() method to the list of keys). To check 
whether a single key is in the dictionary, use the has_key() method of the dictionary. 
http://www.python.org/doc/2.3.5/tut/node7.html (7 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
Here is a small example using a dictionary: 
>>> tel = {'jack': 4098, 'sape': 4139}
>>> tel['guido'] = 4127
>>> tel
{'sape': 4139, 'guido': 4127, 'jack': 4098}
>>> tel['jack']
4098
>>> del tel['sape']
>>> tel['irv'] = 4127
>>> tel
{'guido': 4127, 'irv': 4127, 'jack': 4098}
>>> tel.keys()
['guido', 'irv', 'jack']
>>> tel.has_key('guido')
True
The dict() constructor builds dictionaries directly from lists of key-value pairs stored as tuples. 
When the pairs form a pattern, list comprehensions can compactly specify the key-value list. 
>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
{'sape': 4139, 'jack': 4098, 'guido': 4127}
>>> dict([(x, x**2) for x in vec])     # use a list comprehension
{2: 4, 4: 16, 6: 36}
5.5 Looping Techniques 
When looping through dictionaries, the key and corresponding value can be retrieved at the same time 
using the iteritems() method. 
>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.iteritems():
...     print k, v
...
gallahad the pure
robin the brave
When looping through a sequence, the position index and corresponding value can be retrieved at the 
same time using the enumerate() function. 
 
>>> for i, v in enumerate(['tic', 'tac', 'toe']):
...     print i, v
...
0 tic
1 tac
2 toe
http://www.python.org/doc/2.3.5/tut/node7.html (8 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
To loop over two or more sequences at the same time, the entries can be paired with the zip() 
function. 
>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print 'What is your %s?  It is %s.' % (q, a)
...     
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.
5.6 More on Conditions 
The conditions used in while and if statements above can contain other operators besides 
comparisons. 
The comparison operators in and not in check whether a value occurs (does not occur) in a 
sequence. The operators is and is not compare whether two objects are really the same object; this 
only matters for mutable objects like lists. All comparison operators have the same priority, which is 
lower than that of all numerical operators. 
Comparisons can be chained. For example, a < b == c tests whether a is less than b and moreover 
b equals c. 
Comparisons may be combined by the Boolean operators and and or, and the outcome of a 
comparison (or of any other Boolean expression) may be negated with not. These all have lower 
priorities than comparison operators again; between them, not has the highest priority, and or the 
lowest, so that A and not B or C is equivalent to (A and (not B)) or C. Of course, 
parentheses can be used to express the desired composition. 
The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated 
from left to right, and evaluation stops as soon as the outcome is determined. For example, if A and C 
are true but B is false, A and B and C does not evaluate the expression C. In general, the return 
value of a short-circuit operator, when used as a general value and not as a Boolean, is the last 
evaluated argument. 
It is possible to assign the result of a comparison or other Boolean expression to a variable. For 
example, 
>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
>>> non_null = string1 or string2 or string3
>>> non_null
'Trondheim'
http://www.python.org/doc/2.3.5/tut/node7.html (9 of 10) [7/03/2005 2:34:12 PM]

5. Data Structures 
Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may 
grumble about this, but it avoids a common class of problems encountered in C programs: typing = in 
an expression when == was intended. 
5.7 Comparing Sequences and Other Types 
Sequence objects may be compared to other objects with the same sequence type. The comparison uses 
lexicographical ordering: first the first two items are compared, and if they differ this determines the 
outcome of the comparison; if they are equal, the next two items are compared, and so on, until either 
sequence is exhausted. If two items to be compared are themselves sequences of the same type, the 
lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the 
sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter 
sequence is the smaller (lesser) one. Lexicographical ordering for strings uses the ASCII ordering for 
individual characters. Some examples of comparisons between sequences with the same types: 
(1, 2, 3)              < (1, 2, 4)
[1, 2, 3]              < [1, 2, 4]
'ABC' < 'C' < 'Pascal' < 'Python'
(1, 2, 3, 4)           < (1, 2, 4)
(1, 2)                 < (1, 2, -1)
(1, 2, 3)             == (1.0, 2.0, 3.0)
(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)
Note that comparing objects of different types is legal. The outcome is deterministic but arbitrary: the 
types are ordered by their name. Thus, a list is always smaller than a string, a string is always smaller 
than a tuple, etc. Mixed numeric types are compared according to their numeric value, so 0 equals 0.0, 
etc.5.1 
Footnotes
... etc.5.1
The rules for comparing objects of different types should not be relied upon; they may change 
in a future version of the language. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 4. More Control Flow Up: Python Tutorial Next: 6. Modules 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node7.html (10 of 10) [7/03/2005 2:34:12 PM]

6. Modules 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 5. Data Structures Up: Python Tutorial Next: 7. Input and Output 
Subsections 
G     6.1 More on Modules 
H     6.1.1 The Module Search Path 
H     6.1.2 ``Compiled'' Python files 
G     6.2 Standard Modules 
G     6.3 The dir() Function 
G     6.4 Packages 
H     6.4.1 Importing * From a Package 
H     6.4.2 Intra-package References 
H     6.4.3 Packages in Multiple Directories 
6. Modules 
If you quit from the Python interpreter and enter it again, the definitions you have made (functions and 
variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text 
editor to prepare the input for the interpreter and running it with that file as input instead. This is known as 
creating a script. As your program gets longer, you may want to split it into several files for easier 
maintenance. You may also want to use a handy function that you've written in several programs without 
copying its definition into each program. 
To support this, Python has a way to put definitions in a file and use them in a script or in an interactive 
instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other 
modules or into the main module (the collection of variables that you have access to in a script executed at the 
top level and in calculator mode). 
A module is a file containing Python definitions and statements. The file name is the module name with the 
suffix .py appended. Within a module, the module's name (as a string) is available as the value of the global 
variable __name__. For instance, use your favorite text editor to create a file called fibo.py in the current 
directory with the following contents: 
# Fibonacci numbers module
def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while b < n:
        print b,
        a, b = b, a+b
def fib2(n): # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while b < n:
http://www.python.org/doc/2.3.5/tut/node8.html (1 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
        result.append(b)
        a, b = b, a+b
    return result
Now enter the Python interpreter and import this module with the following command: 
>>> import fibo
This does not enter the names of the functions defined in fibo directly in the current symbol table; it only 
enters the module name fibo there. Using the module name you can access the functions: 
>>> fibo.fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
>>> fibo.fib2(100)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
>>> fibo.__name__
'fibo'
If you intend to use a function often you can assign it to a local name: 
>>> fib = fibo.fib
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377
6.1 More on Modules 
A module can contain executable statements as well as function definitions. These statements are intended to 
initialize the module. They are executed only the first time the module is imported somewhere.6.1 
Each module has its own private symbol table, which is used as the global symbol table by all functions 
defined in the module. Thus, the author of a module can use global variables in the module without worrying 
about accidental clashes with a user's global variables. On the other hand, if you know what you are doing you 
can touch a module's global variables with the same notation used to refer to its functions, 
modname.itemname. 
Modules can import other modules. It is customary but not required to place all import statements at the 
beginning of a module (or script, for that matter). The imported module names are placed in the importing 
module's global symbol table. 
There is a variant of the import statement that imports names from a module directly into the importing 
module's symbol table. For example: 
>>> from fibo import fib, fib2
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377
This does not introduce the module name from which the imports are taken in the local symbol table (so in the 
example, fibo is not defined). 
http://www.python.org/doc/2.3.5/tut/node8.html (2 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
There is even a variant to import all names that a module defines: 
>>> from fibo import *
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377
This imports all names except those beginning with an underscore (_). 
6.1.1 The Module Search Path 
When a module named spam is imported, the interpreter searches for a file named spam.py in the current 
directory, and then in the list of directories specified by the environment variable PYTHONPATH. This has 
the same syntax as the shell variable PATH, that is, a list of directory names. When PYTHONPATH is not set, 
or when the file is not found there, the search continues in an installation-dependent default path; on Unix, this 
is usually .:/usr/local/lib/python. 
Actually, modules are searched in the list of directories given by the variable sys.path which is initialized 
from the directory containing the input script (or the current directory), PYTHONPATH and the installation-
dependent default. This allows Python programs that know what they're doing to modify or replace the module 
search path. Note that because the directory containing the script being run is on the search path, it is important 
that the script not have the same name as a standard module, or Python will attempt to load the script as a 
module when that module is imported. This will generally be an error. See section 6.2, ``Standard Modules,'' 
for more information. 
6.1.2 ``Compiled'' Python files 
As an important speed-up of the start-up time for short programs that use a lot of standard modules, if a file 
called spam.pyc exists in the directory where spam.py is found, this is assumed to contain an already-``byte-
compiled'' version of the module spam. The modification time of the version of spam.py used to create 
spam.pyc is recorded in spam.pyc, and the .pyc file is ignored if these don't match. 
Normally, you don't need to do anything to create the spam.pyc file. Whenever spam.py is successfully 
compiled, an attempt is made to write the compiled version to spam.pyc. It is not an error if this attempt fails; 
if for any reason the file is not written completely, the resulting spam.pyc file will be recognized as invalid 
and thus ignored later. The contents of the spam.pyc file are platform independent, so a Python module 
directory can be shared by machines of different architectures. 
Some tips for experts: 
G     When the Python interpreter is invoked with the -O flag, optimized code is generated and stored in .pyo 
files. The optimizer currently doesn't help much; it only removes assert statements. When -O is 
used, all bytecode is optimized; .pyc files are ignored and .py files are compiled to optimized 
bytecode. 
G     Passing two -O flags to the Python interpreter (-OO) will cause the bytecode compiler to perform 
optimizations that could in some rare cases result in malfunctioning programs. Currently only 
__doc__ strings are removed from the bytecode, resulting in more compact .pyo files. Since some 
programs may rely on having these available, you should only use this option if you know what you're 
http://www.python.org/doc/2.3.5/tut/node8.html (3 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
doing. 
G     A program doesn't run any faster when it is read from a .pyc or .pyo file than when it is read from a .py 
file; the only thing that's faster about .pyc or .pyo files is the speed with which they are loaded. 
G     When a script is run by giving its name on the command line, the bytecode for the script is never 
written to a .pyc or .pyo file. Thus, the startup time of a script may be reduced by moving most of its 
code to a module and having a small bootstrap script that imports that module. It is also possible to 
name a .pyc or .pyo file directly on the command line. 
G     It is possible to have a file called spam.pyc (or spam.pyo when -O is used) without a file spam.py 
for the same module. This can be used to distribute a library of Python code in a form that is moderately 
hard to reverse engineer. 
G     The module compileall can create .pyc files (or .pyo files when -O is used) for all modules in a 
directory. 
6.2 Standard Modules 
Python comes with a library of standard modules, described in a separate document, the Python Library 
Reference (``Library Reference'' hereafter). Some modules are built into the interpreter; these provide access to 
operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to 
provide access to operating system primitives such as system calls. The set of such modules is a configuration 
option which also depends on the underlying platform For example, the amoeba module is only provided on 
systems that somehow support Amoeba primitives. One particular module deserves some attention: sys, 
which is built into every Python interpreter. The variables sys.ps1 and sys.ps2 define the strings used as 
primary and secondary prompts: 
>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> sys.ps1 = 'C> '
C> print 'Yuck!'
Yuck!
C>
These two variables are only defined if the interpreter is in interactive mode. 
The variable sys.path is a list of strings that determine the interpreter's search path for modules. It is 
initialized to a default path taken from the environment variable PYTHONPATH, or from a built-in default if 
PYTHONPATH is not set. You can modify it using standard list operations: 
>>> import sys
>>> sys.path.append('/ufs/guido/lib/python')
6.3 The dir() Function 
http://www.python.org/doc/2.3.5/tut/node8.html (4 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
The built-in function dir() is used to find out which names a module defines. It returns a sorted list of 
strings: 
>>> import fibo, sys
>>> dir(fibo)
['__name__', 'fib', 'fib2']
>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',
 '__stdin__', '__stdout__', '_getframe', 'api_version', 'argv', 
 'builtin_module_names', 'byteorder', 'callstats', 'copyright',
 'displayhook', 'exc_clear', 'exc_info', 'exc_type', 'excepthook',
 'exec_prefix', 'executable', 'exit', 'getdefaultencoding', 'getdlopenflags',
 'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',
 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache',
 'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',
 'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',
 'version', 'version_info', 'warnoptions']
Without arguments, dir() lists the names you have defined currently: 
>>> a = [1, 2, 3, 4, 5]
>>> import fibo, sys
>>> fib = fibo.fib
>>> dir()
['__name__', 'a', 'fib', 'fibo', 'sys']
Note that it lists all types of names: variables, modules, functions, etc. 
dir() does not list the names of built-in functions and variables. If you want a list of those, they are defined 
in the standard module __builtin__: 
>>> import __builtin__
>>> dir(__builtin__)
['ArithmeticError', 'AssertionError', 'AttributeError',
 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError',
 'Exception', 'False', 'FloatingPointError', 'IOError', 'ImportError',
 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt',
 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented',
 'NotImplementedError', 'OSError', 'OverflowError', 'OverflowWarning',
 'PendingDeprecationWarning', 'ReferenceError',
 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration',
 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError',
 'True', 'TypeError', 'UnboundLocalError', 'UnicodeError', 'UserWarning',
 'ValueError', 'Warning', 'ZeroDivisionError', '__debug__', '__doc__',
 '__import__', '__name__', 'abs', 'apply', 'bool', 'buffer',
 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex',
 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod',
 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float',
 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id',
 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter',
 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'min',
 'object', 'oct', 'open', 'ord', 'pow', 'property', 'quit',
http://www.python.org/doc/2.3.5/tut/node8.html (5 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
 'range', 'raw_input', 'reduce', 'reload', 'repr', 'round',
 'setattr', 'slice', 'staticmethod', 'str', 'string', 'sum', 'super',
 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']
6.4 Packages 
Packages are a way of structuring Python's module namespace by using ``dotted module names''. For example, 
the module name A.B designates a submodule named "B" in a package named "A". Just like the use of 
modules saves the authors of different modules from having to worry about each other's global variable names, 
the use of dotted module names saves the authors of multi-module packages like NumPy or the Python 
Imaging Library from having to worry about each other's module names. 
Suppose you want to design a collection of modules (a ``package'') for the uniform handling of sound files and 
sound data. There are many different sound file formats (usually recognized by their extension, for example: 
.wav, .aiff, .au), so you may need to create and maintain a growing collection of modules for the conversion 
between the various file formats. There are also many different operations you might want to perform on sound 
data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in 
addition you will be writing a never-ending stream of modules to perform these operations. Here's a possible 
structure for your package (expressed in terms of a hierarchical filesystem): 
Sound/                          Top-level package
      __init__.py               Initialize the sound package
      Formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      Effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      Filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
When importing the package, Python searches through the directories on sys.path looking for the package 
subdirectory. 
The __init__.py files are required to make Python treat the directories as containing packages; this is done to 
prevent directories with a common name, such as "string", from unintentionally hiding valid modules that 
occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can 
also execute initialization code for the package or set the __all__ variable, described later. 
http://www.python.org/doc/2.3.5/tut/node8.html (6 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
Users of the package can import individual modules from the package, for example: 
import Sound.Effects.echo
This loads the submodule Sound.Effects.echo. It must be referenced with its full name. 
Sound.Effects.echo.echofilter(input, output, delay=0.7, atten=4)
An alternative way of importing the submodule is: 
from Sound.Effects import echo
This also loads the submodule echo, and makes it available without its package prefix, so it can be used as 
follows: 
echo.echofilter(input, output, delay=0.7, atten=4)
Yet another variation is to import the desired function or variable directly: 
from Sound.Effects.echo import echofilter
Again, this loads the submodule echo, but this makes its function echofilter() directly available: 
echofilter(input, output, delay=0.7, atten=4)
Note that when using from package import item, the item can be either a submodule (or subpackage) of 
the package, or some other name defined in the package, like a function, class or variable. The import 
statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to 
load it. If it fails to find it, an ImportError exception is raised. 
Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last must be a 
package; the last item can be a module or a package but can't be a class or function or variable defined in the 
previous item. 
6.4.1 Importing * From a Package 
Now what happens when the user writes from Sound.Effects import *? Ideally, one would hope 
that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports 
them all. Unfortunately, this operation does not work very well on Mac and Windows platforms, where the 
filesystem does not always have accurate information about the case of a filename! On these platforms, there is 
no guaranteed way to know whether a file ECHO.PY should be imported as a module echo, Echo or ECHO. 
(For example, Windows 95 has the annoying practice of showing all file names with a capitalized first letter.) 
The DOS 8+3 filename restriction adds another interesting problem for long module names. 
The only solution is for the package author to provide an explicit index of the package. The import statement 
uses the following convention: if a package's __init__.py code defines a list named __all__, it is taken to be 
the list of module names that should be imported when from package import * is encountered. It is up to 
http://www.python.org/doc/2.3.5/tut/node8.html (7 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
the package author to keep this list up-to-date when a new version of the package is released. Package authors 
may also decide not to support it, if they don't see a use for importing * from their package. For example, the 
file Sounds/Effects/__init__.py could contain the following code: 
__all__ = ["echo", "surround", "reverse"]
This would mean that from Sound.Effects import * would import the three named submodules of 
the Sound package. 
If __all__ is not defined, the statement from Sound.Effects import * does not import all 
submodules from the package Sound.Effects into the current namespace; it only ensures that the package 
Sound.Effects has been imported (possibly running its initialization code, __init__.py) and then imports 
whatever names are defined in the package. This includes any names defined (and submodules explicitly 
loaded) by __init__.py. It also includes any submodules of the package that were explicitly loaded by previous 
import statements. Consider this code: 
import Sound.Effects.echo
import Sound.Effects.surround
from Sound.Effects import *
In this example, the echo and surround modules are imported in the current namespace because they are 
defined in the Sound.Effects package when the from...import statement is executed. (This also 
works when __all__ is defined.) 
Note that in general the practice of importing * from a module or package is frowned upon, since it often 
causes poorly readable code. However, it is okay to use it to save typing in interactive sessions, and certain 
modules are designed to export only names that follow certain patterns. 
Remember, there is nothing wrong with using from Package import specific_submodule! In 
fact, this is the recommended notation unless the importing module needs to use submodules with the same 
name from different packages. 
6.4.2 Intra-package References 
The submodules often need to refer to each other. For example, the surround module might use the echo 
module. In fact, such references are so common that the import statement first looks in the containing 
package before looking in the standard module search path. Thus, the surround module can simply use 
import echo or from echo import echofilter. If the imported module is not found in the current 
package (the package of which the current module is a submodule), the import statement looks for a top-
level module with the given name. 
When packages are structured into subpackages (as with the Sound package in the example), there's no 
shortcut to refer to submodules of sibling packages - the full name of the subpackage must be used. For 
example, if the module Sound.Filters.vocoder needs to use the echo module in the 
Sound.Effects package, it can use from Sound.Effects import echo. 
6.4.3 Packages in Multiple Directories 
http://www.python.org/doc/2.3.5/tut/node8.html (8 of 9) [7/03/2005 2:34:24 PM]

6. Modules 
Packages support one more special attribute, __path__. This is initialized to be a list containing the name of 
the directory holding the package's __init__.py before the code in that file is executed. This variable can be 
modified; doing so affects future searches for modules and subpackages contained in the package. 
While this feature is not often needed, it can be used to extend the set of modules found in a package. 
Footnotes
... somewhere.6.1
In fact function definitions are also `statements' that are `executed'; the execution enters the function 
name in the module's global symbol table. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 5. Data Structures Up: Python Tutorial Next: 7. Input and Output 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node8.html (9 of 9) [7/03/2005 2:34:24 PM]

7. Input and Output 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 6. Modules Up: Python Tutorial Next: 8. Errors and Exceptions 
Subsections 
G     7.1 Fancier Output Formatting 
G     7.2 Reading and Writing Files 
H     7.2.1 Methods of File Objects 
H     7.2.2 The pickle Module 
7. Input and Output 
There are several ways to present the output of a program; data can be printed in a human-readable 
form, or written to a file for future use. This chapter will discuss some of the possibilities. 
7.1 Fancier Output Formatting 
So far we've encountered two ways of writing values: expression statements and the print statement. 
(A third way is using the write() method of file objects; the standard output file can be referenced as 
sys.stdout. See the Library Reference for more information on this.) 
Often you'll want more control over the formatting of your output than simply printing space-separated 
values. There are two ways to format your output; the first way is to do all the string handling yourself; 
using string slicing and concatenation operations you can create any lay-out you can imagine. The 
standard module string contains some useful operations for padding strings to a given column width; 
these will be discussed shortly. The second way is to use the % operator with a string as the left 
argument. The % operator interprets the left argument much like a sprintf()-style format string to be 
applied to the right argument, and returns the string resulting from this formatting operation. 
One question remains, of course: how do you convert values to strings? Luckily, Python has ways to 
convert any value to a string: pass it to the repr() or str() functions. Reverse quotes (``) are 
equivalent to repr(), but their use is discouraged. 
The str() function is meant to return representations of values which are fairly human-readable, while 
repr() is meant to generate representations which can be read by the interpreter (or will force a 
SyntaxError if there is not equivalent syntax). For objects which don't have a particular 
representation for human consumption, str() will return the same value as repr(). Many values, 
such as numbers or structures like lists and dictionaries, have the same representation using either 
function. Strings and floating point numbers, in particular, have two distinct representations. 
http://www.python.org/doc/2.3.5/tut/node9.html (1 of 7) [7/03/2005 2:34:35 PM]

7. Input and Output 
Some examples: 
>>> s = 'Hello, world.'
>>> str(s)
'Hello, world.'
>>> repr(s)
"'Hello, world.'"
>>> str(0.1)
'0.1'
>>> repr(0.1)
'0.10000000000000001'
>>> x = 10 * 3.25
>>> y = 200 * 200
>>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'
>>> print s
The value of x is 32.5, and y is 40000...
>>> # The repr() of a string adds string quotes and backslashes:
... hello = 'hello, world\n'
>>> hellos = repr(hello)
>>> print hellos
'hello, world\n'
>>> # The argument to repr() may be any Python object:
... repr((x, y, ('spam', 'eggs')))
"(32.5, 40000, ('spam', 'eggs'))"
>>> # reverse quotes are convenient in interactive sessions:
... `x, y, ('spam', 'eggs')`
"(32.5, 40000, ('spam', 'eggs'))"
Here are two ways to write a table of squares and cubes: 
>>> for x in range(1, 11):
...     print repr(x).rjust(2), repr(x*x).rjust(3),
...     # Note trailing comma on previous line
...     print repr(x*x*x).rjust(4)
...
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
>>> for x in range(1,11):
...     print '%2d %3d %4d' % (x, x*x, x*x*x)
... 
 1   1    1
 2   4    8
 3   9   27
http://www.python.org/doc/2.3.5/tut/node9.html (2 of 7) [7/03/2005 2:34:35 PM]

7. Input and Output 
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
(Note that one space between each column was added by the way print works: it always adds spaces 
between its arguments.) 
This example demonstrates the rjust() method of string objects, which right-justifies a string in a 
field of a given width by padding it with spaces on the left. There are similar methods ljust() and 
center(). These methods do not write anything, they just return a new string. If the input string is too 
long, they don't truncate it, but return it unchanged; this will mess up your column lay-out but that's 
usually better than the alternative, which would be lying about a value. (If you really want truncation 
you can always add a slice operation, as in "x.ljust( n)[:n]".) 
There is another method, zfill(), which pads a numeric string on the left with zeros. It understands 
about plus and minus signs: 
>>> '12'.zfill(5)
'00012'
>>> '-3.14'.zfill(7)
'-003.14'
>>> '3.14159265359'.zfill(5)
'3.14159265359'
Using the % operator looks like this: 
>>> import math
>>> print 'The value of PI is approximately %5.3f.' % math.pi
The value of PI is approximately 3.142.
If there is more than one format in the string, you need to pass a tuple as right operand, as in this 
example: 
>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
>>> for name, phone in table.items():
...     print '%-10s ==> %10d' % (name, phone)
... 
Jack       ==>       4098
Dcab       ==>       7678
Sjoerd     ==>       4127
Most formats work exactly as in C and require that you pass the proper type; however, if you don't you 
get an exception, not a core dump. The %s format is more relaxed: if the corresponding argument is not 
a string object, it is converted to string using the str() built-in function. Using * to pass the width or 
http://www.python.org/doc/2.3.5/tut/node9.html (3 of 7) [7/03/2005 2:34:35 PM]

7. Input and Output 
precision in as a separate (integer) argument is supported. The C formats %n and %p are not supported. 
If you have a really long format string that you don't want to split up, it would be nice if you could 
reference the variables to be formatted by name instead of by position. This can be done by using form 
%(name)format, as shown here: 
>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
>>> print 'Jack: %(Jack)d; Sjoerd: %(Sjoerd)d; Dcab: %(Dcab)d' % table
Jack: 4098; Sjoerd: 4127; Dcab: 8637678
This is particularly useful in combination with the new built-in vars() function, which returns a 
dictionary containing all local variables. 
7.2 Reading and Writing Files 
open() returns a file object, and is most commonly used with two arguments: "open(filename, 
mode)". 
>>> f=open('/tmp/workfile', 'w')
>>> print f
<open file '/tmp/workfile', mode 'w' at 80a0960>
The first argument is a string containing the filename. The second argument is another string containing 
a few characters describing the way in which the file will be used. mode can be 'r' when the file will 
only be read, 'w' for only writing (an existing file with the same name will be erased), and 'a' opens 
the file for appending; any data written to the file is automatically added to the end. 'r+' opens the file 
for both reading and writing. The mode argument is optional; 'r' will be assumed if it's omitted. 
On Windows and the Macintosh, 'b' appended to the mode opens the file in binary mode, so there are 
also modes like 'rb', 'wb', and 'r+b'. Windows makes a distinction between text and binary files; 
the end-of-line characters in text files are automatically altered slightly when data is read or written. 
This behind-the-scenes modification to file data is fine for ASCII text files, but it'll corrupt binary data 
like that in JPEGs or .EXE files. Be very careful to use binary mode when reading and writing such 
files. (Note that the precise semantics of text mode on the Macintosh depends on the underlying C 
library being used.) 
7.2.1 Methods of File Objects 
The rest of the examples in this section will assume that a file object called f has already been created. 
To read a file's contents, call f.read(size), which reads some quantity of data and returns it as a 
string. size is an optional numeric argument. When size is omitted or negative, the entire contents of the 
file will be read and returned; it's your problem if the file is twice as large as your machine's memory. 
Otherwise, at most size bytes are read and returned. If the end of the file has been reached, f.read() 
will return an empty string (""). 
http://www.python.org/doc/2.3.5/tut/node9.html (4 of 7) [7/03/2005 2:34:35 PM]

7. Input and Output 
>>> f.read()
'This is the entire file.\n'
>>> f.read()
''
f.readline() reads a single line from the file; a newline character (\n) is left at the end of the 
string, and is only omitted on the last line of the file if the file doesn't end in a newline. This makes the 
return value unambiguous; if f.readline() returns an empty string, the end of the file has been 
reached, while a blank line is represented by '\n', a string containing only a single newline. 
>>> f.readline()
'This is the first line of the file.\n'
>>> f.readline()
'Second line of the file\n'
>>> f.readline()
''
f.readlines() returns a list containing all the lines of data in the file. If given an optional 
parameter sizehint, it reads that many bytes from the file and enough more to complete a line, and 
returns the lines from that. This is often used to allow efficient reading of a large file by lines, but 
without having to load the entire file in memory. Only complete lines will be returned. 
>>> f.readlines()
['This is the first line of the file.\n', 'Second line of the file\n']
f.write(string) writes the contents of string to the file, returning None. 
>>> f.write('This is a test\n')
To write something other than a string, it needs to be converted to a string first: 
>>> value = ('the answer', 42)
>>> s = str(value)
>>> f.write(s)
f.tell() returns an integer giving the file object's current position in the file, measured in bytes from 
the beginning of the file. To change the file object's position, use "f.seek(offset, from_what)". The 
position is computed from adding offset to a reference point; the reference point is selected by the 
from_what argument. A from_what value of 0 measures from the beginning of the file, 1 uses the 
current file position, and 2 uses the end of the file as the reference point. from_what can be omitted and 
defaults to 0, using the beginning of the file as the reference point. 
>>> f = open('/tmp/workfile', 'r+')
>>> f.write('0123456789abcdef')
>>> f.seek(5)     # Go to the 6th byte in the file
>>> f.read(1)        
'5'
http://www.python.org/doc/2.3.5/tut/node9.html (5 of 7) [7/03/2005 2:34:35 PM]

7. Input and Output 
>>> f.seek(-3, 2) # Go to the 3rd byte before the end
>>> f.read(1)
'd'
When you're done with a file, call f.close() to close it and free up any system resources taken up by 
the open file. After calling f.close(), attempts to use the file object will automatically fail. 
>>> f.close()
>>> f.read()
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
ValueError: I/O operation on closed file
File objects have some additional methods, such as isatty() and truncate() which are less 
frequently used; consult the Library Reference for a complete guide to file objects. 
7.2.2 The pickle Module 
Strings can easily be written to and read from a file. Numbers take a bit more effort, since the read() 
method only returns strings, which will have to be passed to a function like int(), which takes a string 
like '123' and returns its numeric value 123. However, when you want to save more complex data 
types like lists, dictionaries, or class instances, things get a lot more complicated. 
Rather than have users be constantly writing and debugging code to save complicated data types, 
Python provides a standard module called pickle. This is an amazing module that can take almost any 
Python object (even some forms of Python code!), and convert it to a string representation; this process 
is called pickling. Reconstructing the object from the string representation is called unpickling. Between 
pickling and unpickling, the string representing the object may have been stored in a file or data, or sent 
over a network connection to some distant machine. 
If you have an object x, and a file object f that's been opened for writing, the simplest way to pickle the 
object takes only one line of code: 
pickle.dump(x, f)
To unpickle the object again, if f is a file object which has been opened for reading: 
x = pickle.load(f)
(There are other variants of this, used when pickling many objects or when you don't want to write the 
pickled data to a file; consult the complete documentation for pickle in the Python Library 
Reference.) 
pickle is the standard way to make Python objects which can be stored and reused by other programs 
or by a future invocation of the same program; the technical term for this is a persistent object. Because 
http://www.python.org/doc/2.3.5/tut/node9.html (6 of 7) [7/03/2005 2:34:35 PM]

7. Input and Output 
pickle is so widely used, many authors who write Python extensions take care to ensure that new data 
types such as matrices can be properly pickled and unpickled. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 6. Modules Up: Python Tutorial Next: 8. Errors and Exceptions 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node9.html (7 of 7) [7/03/2005 2:34:35 PM]

8. Errors and Exceptions 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 7. Input and Output Up: Python Tutorial Next: 9. Classes 
Subsections 
G     8.1 Syntax Errors 
G     8.2 Exceptions 
G     8.3 Handling Exceptions 
G     8.4 Raising Exceptions 
G     8.5 User-defined Exceptions 
G     8.6 Defining Clean-up Actions 
8. Errors and Exceptions 
Until now error messages haven't been more than mentioned, but if you have tried out the examples you have 
probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions. 
8.1 Syntax Errors 
Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while 
you are still learning Python: 
>>> while True print 'Hello world'
  File "<stdin>", line 1, in ?
    while True print 'Hello world'
                   ^
SyntaxError: invalid syntax
The parser repeats the offending line and displays a little `arrow' pointing at the earliest point in the line where 
the error was detected. The error is caused by (or at least detected at) the token preceding the arrow: in the 
example, the error is detected at the keyword print, since a colon (":") is missing before it. File name and 
line number are printed so you know where to look in case the input came from a script. 
8.2 Exceptions 
Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to 
execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will 
soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, 
and result in error messages as shown here: 
>>> 10 * (1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
http://www.python.org/doc/2.3.5/tut/node10.html (1 of 7) [7/03/2005 2:34:46 PM]

8. Errors and Exceptions 
ZeroDivisionError: integer division or modulo by zero
>>> 4 + spam*3
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: cannot concatenate 'str' and 'int' objects
The last line of the error message indicates what happened. Exceptions come in different types, and the type is 
printed as part of the message: the types in the example are ZeroDivisionError, NameError and 
TypeError. The string printed as the exception type is the name of the built-in exception that occurred. This 
is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful 
convention). Standard exception names are built-in identifiers (not reserved keywords). 
The rest of the line is a detail whose interpretation depends on the exception type; its meaning is dependent on 
the exception type. 
The preceding part of the error message shows the context where the exception happened, in the form of a 
stack backtrace. In general it contains a stack backtrace listing source lines; however, it will not display lines 
read from standard input. 
The Python Library Reference lists the built-in exceptions and their meanings. 
8.3 Handling Exceptions 
It is possible to write programs that handle selected exceptions. Look at the following example, which asks the 
user for input until a valid integer has been entered, but allows the user to interrupt the program (using 
Control-C or whatever the operating system supports); note that a user-generated interruption is signalled 
by raising the KeyboardInterrupt exception. 
>>> while True:
...     try:
...         x = int(raw_input("Please enter a number: "))
...         break
...     except ValueError:
...         print "Oops! That was no valid number.  Try again..."
...
The try statement works as follows. 
G     First, the try clause (the statement(s) between the try and except keywords) is executed. 
G     If no exception occurs, the except clause is skipped and execution of the try statement is finished. 
G     If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its 
type matches the exception named after the except keyword, the rest of the try clause is skipped, the 
except clause is executed, and then execution continues after the try statement. 
http://www.python.org/doc/2.3.5/tut/node10.html (2 of 7) [7/03/2005 2:34:46 PM]

8. Errors and Exceptions 
G     If an exception occurs which does not match the exception named in the except clause, it is passed on to 
outer try statements; if no handler is found, it is an unhandled exception and execution stops with a 
message as shown above. 
A try statement may have more than one except clause, to specify handlers for different exceptions. At most 
one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not 
in other handlers of the same try statement. An except clause may name multiple exceptions as a 
parenthesized list, for example: 
... except (RuntimeError, TypeError, NameError):
...     pass
The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, 
since it is easy to mask a real programming error in this way! It can also be used to print an error message and 
then re-raise the exception (allowing a caller to handle the exception as well): 
import sys
try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError, (errno, strerror):
    print "I/O error(%s): %s" % (errno, strerror)
except ValueError:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:", sys.exc_info()[0]
    raise
The try ... except statement has an optional else clause, which, when present, must follow all except 
clauses. It is useful for code that must be executed if the try clause does not raise an exception. For example: 
for arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except IOError:
        print 'cannot open', arg
    else:
        print arg, 'has', len(f.readlines()), 'lines'
        f.close()
The use of the else clause is better than adding additional code to the try clause because it avoids 
accidentally catching an exception that wasn't raised by the code being protected by the try ... except 
statement. 
When an exception occurs, it may have an associated value, also known as the exception's argument. The 
presence and type of the argument depend on the exception type. 
The except clause may specify a variable after the exception name (or list). The variable is bound to an 
exception instance with the arguments stored in instance.args. For convenience, the exception instance 
http://www.python.org/doc/2.3.5/tut/node10.html (3 of 7) [7/03/2005 2:34:46 PM]

8. Errors and Exceptions 
defines __getitem__ and __str__ so the arguments can be accessed or printed directly without having to 
reference .args. 
>>> try:
...    raise Exception('spam', 'eggs')
... except Exception, inst:
...    print type(inst)     # the exception instance
...    print inst.args      # arguments stored in .args
...    print inst           # __str__ allows args to printed directly
...    x, y = inst          # __getitem__ allows args to be unpacked directly
...    print 'x =', x
...    print 'y =', y
...
<type 'instance'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
If an exception has an argument, it is printed as the last part (`detail') of the message for unhandled exceptions. 
Exception handlers don't just handle exceptions if they occur immediately in the try clause, but also if they 
occur inside functions that are called (even indirectly) in the try clause. For example: 
>>> def this_fails():
...     x = 1/0
... 
>>> try:
...     this_fails()
... except ZeroDivisionError, detail:
...     print 'Handling run-time error:', detail
... 
Handling run-time error: integer division or modulo
8.4 Raising Exceptions 
The raise statement allows the programmer to force a specified exception to occur. For example: 
>>> raise NameError, 'HiThere'
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError: HiThere
The first argument to raise names the exception to be raised. The optional second argument specifies the 
exception's argument. 
If you need to determine whether an exception was raised but don't intend to handle it, a simpler form of the 
raise statement allows you to re-raise the exception: 
>>> try:
...     raise NameError, 'HiThere'
http://www.python.org/doc/2.3.5/tut/node10.html (4 of 7) [7/03/2005 2:34:46 PM]

8. Errors and Exceptions 
... except NameError:
...     print 'An exception flew by!'
...     raise
...
An exception flew by!
Traceback (most recent call last):
  File "<stdin>", line 2, in ?
NameError: HiThere
8.5 User-defined Exceptions 
Programs may name their own exceptions by creating a new exception class. Exceptions should typically be 
derived from the Exception class, either directly or indirectly. For example: 
>>> class MyError(Exception):
...     def __init__(self, value):
...         self.value = value
...     def __str__(self):
...         return repr(self.value)
... 
>>> try:
...     raise MyError(2*2)
... except MyError, e:
...     print 'My exception occurred, value:', e.value
... 
My exception occurred, value: 4
>>> raise MyError, 'oops!'
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
__main__.MyError: 'oops!'
Exception classes can be defined which do anything any other class can do, but are usually kept simple, often 
only offering a number of attributes that allow information about the error to be extracted by handlers for the 
exception. When creating a module which can raise several distinct errors, a common practice is to create a 
base class for exceptions defined by that module, and subclass that to create specific exception classes for 
different error conditions: 
class Error(Exception):
    """Base class for exceptions in this module."""
    pass
class InputError(Error):
    """Exception raised for errors in the input.
    Attributes:
        expression -- input expression in which the error occurred
        message -- explanation of the error
    """
    def __init__(self, expression, message):
        self.expression = expression
        self.message = message
http://www.python.org/doc/2.3.5/tut/node10.html (5 of 7) [7/03/2005 2:34:46 PM]

8. Errors and Exceptions 
class TransitionError(Error):
    """Raised when an operation attempts a state transition that's not
    allowed.
    Attributes:
        previous -- state at beginning of transition
        next -- attempted new state
        message -- explanation of why the specific transition is not allowed
    """
    def __init__(self, previous, next, message):
        self.previous = previous
        self.next = next
        self.message = message
Most exceptions are defined with names that end in ``Error,'' similar to the naming of the standard exceptions. 
Many standard modules define their own exceptions to report errors that may occur in functions they define. 
More information on classes is presented in chapter 9, ``Classes.'' 
8.6 Defining Clean-up Actions 
The try statement has another optional clause which is intended to define clean-up actions that must be 
executed under all circumstances. For example: 
>>> try:
...     raise KeyboardInterrupt
... finally:
...     print 'Goodbye, world!'
... 
Goodbye, world!
Traceback (most recent call last):
  File "<stdin>", line 2, in ?
KeyboardInterrupt
A finally clause is executed whether or not an exception has occurred in the try clause. When an exception has 
occurred, it is re-raised after the finally clause is executed. The finally clause is also executed ``on the way out'' 
when the try statement is left via a break or return statement. 
The code in the finally clause is useful for releasing external resources (such as files or network connections), 
regardless of whether or not the use of the resource was successful. 
A try statement must either have one or more except clauses or one finally clause, but not both. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 7. Input and Output Up: Python Tutorial Next: 9. Classes 
Release 2.3.5, documentation updated on February 8, 2005. 
http://www.python.org/doc/2.3.5/tut/node10.html (6 of 7) [7/03/2005 2:34:46 PM]

8. Errors and Exceptions 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node10.html (7 of 7) [7/03/2005 2:34:46 PM]

9. Classes 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 8. Errors and Exceptions Up: Python Tutorial Next: 10. Brief Tour of 
Subsections 
G     9.1 A Word About Terminology 
G     9.2 Python Scopes and Name Spaces 
G     9.3 A First Look at Classes 
H     9.3.1 Class Definition Syntax 
H     9.3.2 Class Objects 
H     9.3.3 Instance Objects 
H     9.3.4 Method Objects 
G     9.4 Random Remarks 
G     9.5 Inheritance 
H     9.5.1 Multiple Inheritance 
G     9.6 Private Variables 
G     9.7 Odds and Ends 
G     9.8 Exceptions Are Classes Too 
G     9.9 Iterators 
G     9.10 Generators 
9. Classes 
Python's class mechanism adds classes to the language with a minimum of new syntax and semantics. 
It is a mixture of the class mechanisms found in C++ and Modula-3. As is true for modules, classes in 
Python do not put an absolute barrier between definition and user, but rather rely on the politeness of 
the user not to ``break into the definition.'' The most important features of classes are retained with full 
power, however: the class inheritance mechanism allows multiple base classes, a derived class can 
override any methods of its base class or classes, a method can call the method of a base class with the 
same name. Objects can contain an arbitrary amount of private data. 
In C++ terminology, all class members (including the data members) are public, and all member 
functions are virtual. There are no special constructors or destructors. As in Modula-3, there are no 
shorthands for referencing the object's members from its methods: the method function is declared 
with an explicit first argument representing the object, which is provided implicitly by the call. As in 
Smalltalk, classes themselves are objects, albeit in the wider sense of the word: in Python, all data 
types are objects. This provides semantics for importing and renaming. Unlike C++ and Modula-3, 
built-in types can be used as base classes for extension by the user. Also, like in C++ but unlike in 
Modula-3, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be 
redefined for class instances. 
http://www.python.org/doc/2.3.5/tut/node11.html (1 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
9.1 A Word About Terminology 
Lacking universally accepted terminology to talk about classes, I will make occasional use of 
Smalltalk and C++ terms. (I would use Modula-3 terms, since its object-oriented semantics are closer 
to those of Python than C++, but I expect that few readers have heard of it.) 
I also have to warn you that there's a terminological pitfall for object-oriented readers: the word 
``object'' in Python does not necessarily mean a class instance. Like C++ and Modula-3, and unlike 
Smalltalk, not all types in Python are classes: the basic built-in types like integers and lists are not, and 
even somewhat more exotic types like files aren't. However, all Python types share a little bit of 
common semantics that is best described by using the word object. 
Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object. 
This is known as aliasing in other languages. This is usually not appreciated on a first glance at 
Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples). 
However, aliasing has an (intended!) effect on the semantics of Python code involving mutable objects 
such as lists, dictionaries, and most types representing entities outside the program (files, windows, 
etc.). This is usually used to the benefit of the program, since aliases behave like pointers in some 
respects. For example, passing an object is cheap since only a pointer is passed by the implementation; 
and if a function modifies an object passed as an argument, the caller will see the change -- this 
eliminates the need for two different argument passing mechanisms as in Pascal. 
9.2 Python Scopes and Name Spaces 
Before introducing classes, I first have to tell you something about Python's scope rules. Class 
definitions play some neat tricks with namespaces, and you need to know how scopes and namespaces 
work to fully understand what's going on. Incidentally, knowledge about this subject is useful for any 
advanced Python programmer. 
Let's begin with some definitions. 
A namespace is a mapping from names to objects. Most namespaces are currently implemented as 
Python dictionaries, but that's normally not noticeable in any way (except for performance), and it may 
change in the future. Examples of namespaces are: the set of built-in names (functions such as abs(), 
and built-in exception names); the global names in a module; and the local names in a function 
invocation. In a sense the set of attributes of an object also form a namespace. The important thing to 
know about namespaces is that there is absolutely no relation between names in different namespaces; 
for instance, two different modules may both define a function ``maximize'' without confusion -- users 
of the modules must prefix it with the module name. 
By the way, I use the word attribute for any name following a dot -- for example, in the expression 
z.real, real is an attribute of the object z. Strictly speaking, references to names in modules are 
attribute references: in the expression modname.funcname, modname is a module object and 
http://www.python.org/doc/2.3.5/tut/node11.html (2 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
funcname is an attribute of it. In this case there happens to be a straightforward mapping between 
the module's attributes and the global names defined in the module: they share the same namespace! 
9.1 
Attributes may be read-only or writable. In the latter case, assignment to attributes is possible. Module 
attributes are writable: you can write "modname.the_answer = 42". Writable attributes may 
also be deleted with the del statement. For example, "del modname.the_answer" will remove 
the attribute the_answer from the object named by modname. 
Name spaces are created at different moments and have different lifetimes. The namespace containing 
the built-in names is created when the Python interpreter starts up, and is never deleted. The global 
namespace for a module is created when the module definition is read in; normally, module 
namespaces also last until the interpreter quits. The statements executed by the top-level invocation of 
the interpreter, either read from a script file or interactively, are considered part of a module called 
__main__, so they have their own global namespace. (The built-in names actually also live in a 
module; this is called __builtin__.) 
The local namespace for a function is created when the function is called, and deleted when the 
function returns or raises an exception that is not handled within the function. (Actually, forgetting 
would be a better way to describe what actually happens.) Of course, recursive invocations each have 
their own local namespace. 
A scope is a textual region of a Python program where a namespace is directly accessible. ``Directly 
accessible'' here means that an unqualified reference to a name attempts to find the name in the 
namespace. 
Although scopes are determined statically, they are used dynamically. At any time during execution, 
there are at least three nested scopes whose namespaces are directly accessible: the innermost scope, 
which is searched first, contains the local names; the namespaces of any enclosing functions, which 
are searched starting with the nearest enclosing scope; the middle scope, searched next, contains the 
current module's global names; and the outermost scope (searched last) is the namespace containing 
built-in names. 
If a name is declared global, then all references and assignments go directly to the middle scope 
containing the module's global names. Otherwise, all variables found outside of the innermost scope 
are read-only. 
Usually, the local scope references the local names of the (textually) current function. Outside of 
functions, the local scope references the same namespace as the global scope: the module's namespace. 
Class definitions place yet another namespace in the local scope. 
It is important to realize that scopes are determined textually: the global scope of a function defined in 
a module is that module's namespace, no matter from where or by what alias the function is called. On 
the other hand, the actual search for names is done dynamically, at run time -- however, the language 
definition is evolving towards static name resolution, at ``compile'' time, so don't rely on dynamic 
http://www.python.org/doc/2.3.5/tut/node11.html (3 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
name resolution! (In fact, local variables are already determined statically.) 
A special quirk of Python is that assignments always go into the innermost scope. Assignments do not 
copy data -- they just bind names to objects. The same is true for deletions: the statement "del x" 
removes the binding of x from the namespace referenced by the local scope. In fact, all operations that 
introduce new names use the local scope: in particular, import statements and function definitions bind 
the module or function name in the local scope. (The global statement can be used to indicate that 
particular variables live in the global scope.) 
9.3 A First Look at Classes 
Classes introduce a little bit of new syntax, three new object types, and some new semantics. 
9.3.1 Class Definition Syntax 
The simplest form of class definition looks like this: 
class ClassName:
    <statement-1>
    .
    .
    .
    <statement-N>
Class definitions, like function definitions (def statements) must be executed before they have any 
effect. (You could conceivably place a class definition in a branch of an if statement, or inside a 
function.) 
In practice, the statements inside a class definition will usually be function definitions, but other 
statements are allowed, and sometimes useful -- we'll come back to this later. The function definitions 
inside a class normally have a peculiar form of argument list, dictated by the calling conventions for 
methods -- again, this is explained later. 
When a class definition is entered, a new namespace is created, and used as the local scope -- thus, all 
assignments to local variables go into this new namespace. In particular, function definitions bind the 
name of the new function here. 
When a class definition is left normally (via the end), a class object is created. This is basically a 
wrapper around the contents of the namespace created by the class definition; we'll learn more about 
class objects in the next section. The original local scope (the one in effect just before the class 
definitions was entered) is reinstated, and the class object is bound here to the class name given in the 
class definition header (ClassName in the example). 
9.3.2 Class Objects 
http://www.python.org/doc/2.3.5/tut/node11.html (4 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
Class objects support two kinds of operations: attribute references and instantiation. 
Attribute references use the standard syntax used for all attribute references in Python: obj.name. 
Valid attribute names are all the names that were in the class's namespace when the class object was 
created. So, if the class definition looked like this: 
class MyClass:
    "A simple example class"
    i = 12345
    def f(self):
        return 'hello world'
then MyClass.i and MyClass.f are valid attribute references, returning an integer and a method 
object, respectively. Class attributes can also be assigned to, so you can change the value of 
MyClass.i by assignment. __doc__ is also a valid attribute, returning the docstring belonging to 
the class: "A simple example class". 
Class instantiation uses function notation. Just pretend that the class object is a parameterless function 
that returns a new instance of the class. For example (assuming the above class): 
x = MyClass()
creates a new instance of the class and assigns this object to the local variable x. 
The instantiation operation (``calling'' a class object) creates an empty object. Many classes like to 
create objects in a known initial state. Therefore a class may define a special method named 
__init__(), like this: 
    def __init__(self):
        self.data = []
When a class defines an __init__() method, class instantiation automatically invokes 
__init__() for the newly-created class instance. So in this example, a new, initialized instance can 
be obtained by: 
x = MyClass()
Of course, the __init__() method may have arguments for greater flexibility. In that case, 
arguments given to the class instantiation operator are passed on to __init__(). For example, 
>>> class Complex:
...     def __init__(self, realpart, imagpart):
...         self.r = realpart
...         self.i = imagpart
... 
http://www.python.org/doc/2.3.5/tut/node11.html (5 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
>>> x = Complex(3.0, -4.5)
>>> x.r, x.i
(3.0, -4.5)
9.3.3 Instance Objects 
Now what can we do with instance objects? The only operations understood by instance objects are 
attribute references. There are two kinds of valid attribute names. 
The first I'll call data attributes. These correspond to ``instance variables'' in Smalltalk, and to ``data 
members'' in C++. Data attributes need not be declared; like local variables, they spring into existence 
when they are first assigned to. For example, if x is the instance of MyClass created above, the 
following piece of code will print the value 16, without leaving a trace: 
x.counter = 1
while x.counter < 10:
    x.counter = x.counter * 2
print x.counter
del x.counter
The second kind of attribute references understood by instance objects are methods. A method is a 
function that ``belongs to'' an object. (In Python, the term method is not unique to class instances: 
other object types can have methods as well. For example, list objects have methods called append, 
insert, remove, sort, and so on. However, below, we'll use the term method exclusively to mean 
methods of class instance objects, unless explicitly stated otherwise.) 
Valid method names of an instance object depend on its class. By definition, all attributes of a class 
that are (user-defined) function objects define corresponding methods of its instances. So in our 
example, x.f is a valid method reference, since MyClass.f is a function, but x.i is not, since 
MyClass.i is not. But x.f is not the same thing as MyClass.f -- it is a method object, not a 
function object. 
9.3.4 Method Objects 
Usually, a method is called immediately: 
x.f()
In our example, this will return the string 'hello world'. However, it is not necessary to call a 
method right away: x.f is a method object, and can be stored away and called at a later time. For 
example: 
xf = x.f
while True:
    print xf()
http://www.python.org/doc/2.3.5/tut/node11.html (6 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
will continue to print "hello world" until the end of time. 
What exactly happens when a method is called? You may have noticed that x.f() was called without 
an argument above, even though the function definition for f specified an argument. What happened 
to the argument? Surely Python raises an exception when a function that requires an argument is called 
without any -- even if the argument isn't actually used... 
Actually, you may have guessed the answer: the special thing about methods is that the object is 
passed as the first argument of the function. In our example, the call x.f() is exactly equivalent to 
MyClass.f(x). In general, calling a method with a list of n arguments is equivalent to calling the 
corresponding function with an argument list that is created by inserting the method's object before the 
first argument. 
If you still don't understand how methods work, a look at the implementation can perhaps clarify 
matters. When an instance attribute is referenced that isn't a data attribute, its class is searched. If the 
name denotes a valid class attribute that is a function object, a method object is created by packing 
(pointers to) the instance object and the function object just found together in an abstract object: this is 
the method object. When the method object is called with an argument list, it is unpacked again, a new 
argument list is constructed from the instance object and the original argument list, and the function 
object is called with this new argument list. 
9.4 Random Remarks 
Data attributes override method attributes with the same name; to avoid accidental name conflicts, 
which may cause hard-to-find bugs in large programs, it is wise to use some kind of convention that 
minimizes the chance of conflicts. Possible conventions include capitalizing method names, prefixing 
data attribute names with a small unique string (perhaps just an underscore), or using verbs for 
methods and nouns for data attributes. 
Data attributes may be referenced by methods as well as by ordinary users (``clients'') of an object. In 
other words, classes are not usable to implement pure abstract data types. In fact, nothing in Python 
makes it possible to enforce data hiding -- it is all based upon convention. (On the other hand, the 
Python implementation, written in C, can completely hide implementation details and control access to 
an object if necessary; this can be used by extensions to Python written in C.) 
Clients should use data attributes with care -- clients may mess up invariants maintained by the 
methods by stamping on their data attributes. Note that clients may add data attributes of their own to 
an instance object without affecting the validity of the methods, as long as name conflicts are avoided -- 
again, a naming convention can save a lot of headaches here. 
There is no shorthand for referencing data attributes (or other methods!) from within methods. I find 
that this actually increases the readability of methods: there is no chance of confusing local variables 
and instance variables when glancing through a method. 
http://www.python.org/doc/2.3.5/tut/node11.html (7 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
Conventionally, the first argument of methods is often called self. This is nothing more than a 
convention: the name self has absolutely no special meaning to Python. (Note, however, that by not 
following the convention your code may be less readable by other Python programmers, and it is also 
conceivable that a class browser program be written which relies upon such a convention.) 
Any function object that is a class attribute defines a method for instances of that class. It is not 
necessary that the function definition is textually enclosed in the class definition: assigning a function 
object to a local variable in the class is also ok. For example: 
# Function defined outside the class
def f1(self, x, y):
    return min(x, x+y)
class C:
    f = f1
    def g(self):
        return 'hello world'
    h = g
Now f, g and h are all attributes of class C that refer to function objects, and consequently they are all 
methods of instances of C -- h being exactly equivalent to g. Note that this practice usually only serves 
to confuse the reader of a program. 
Methods may call other methods by using method attributes of the self argument: 
class Bag:
    def __init__(self):
        self.data = []
    def add(self, x):
        self.data.append(x)
    def addtwice(self, x):
        self.add(x)
        self.add(x)
Methods may reference global names in the same way as ordinary functions. The global scope 
associated with a method is the module containing the class definition. (The class itself is never used 
as a global scope!) While one rarely encounters a good reason for using global data in a method, there 
are many legitimate uses of the global scope: for one thing, functions and modules imported into the 
global scope can be used by methods, as well as functions and classes defined in it. Usually, the class 
containing the method is itself defined in this global scope, and in the next section we'll find some 
good reasons why a method would want to reference its own class! 
9.5 Inheritance 
Of course, a language feature would not be worthy of the name ``class'' without supporting inheritance. 
The syntax for a derived class definition looks as follows: 
http://www.python.org/doc/2.3.5/tut/node11.html (8 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
class DerivedClassName(BaseClassName):
    <statement-1>
    .
    .
    .
    <statement-N>
The name BaseClassName must be defined in a scope containing the derived class definition. 
Instead of a base class name, an expression is also allowed. This is useful when the base class is 
defined in another module, 
class DerivedClassName(modname.BaseClassName):
Execution of a derived class definition proceeds the same as for a base class. When the class object is 
constructed, the base class is remembered. This is used for resolving attribute references: if a requested 
attribute is not found in the class, it is searched in the base class. This rule is applied recursively if the 
base class itself is derived from some other class. 
There's nothing special about instantiation of derived classes: DerivedClassName() creates a new 
instance of the class. Method references are resolved as follows: the corresponding class attribute is 
searched, descending down the chain of base classes if necessary, and the method reference is valid if 
this yields a function object. 
Derived classes may override methods of their base classes. Because methods have no special 
privileges when calling other methods of the same object, a method of a base class that calls another 
method defined in the same base class, may in fact end up calling a method of a derived class that 
overrides it. (For C++ programmers: all methods in Python are effectively virtual.) 
An overriding method in a derived class may in fact want to extend rather than simply replace the base 
class method of the same name. There is a simple way to call the base class method directly: just call 
"BaseClassName.methodname(self, arguments)". This is occasionally useful to clients 
as well. (Note that this only works if the base class is defined or imported directly in the global scope.) 
9.5.1 Multiple Inheritance 
Python supports a limited form of multiple inheritance as well. A class definition with multiple base 
classes looks as follows: 
class DerivedClassName(Base1, Base2, Base3):
    <statement-1>
    .
    .
    .
    <statement-N>
http://www.python.org/doc/2.3.5/tut/node11.html (9 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
The only rule necessary to explain the semantics is the resolution rule used for class attribute 
references. This is depth-first, left-to-right. Thus, if an attribute is not found in 
DerivedClassName, it is searched in Base1, then (recursively) in the base classes of Base1, and 
only if it is not found there, it is searched in Base2, and so on. 
(To some people breadth first -- searching Base2 and Base3 before the base classes of Base1 -- 
looks more natural. However, this would require you to know whether a particular attribute of Base1 
is actually defined in Base1 or in one of its base classes before you can figure out the consequences 
of a name conflict with an attribute of Base2. The depth-first rule makes no differences between 
direct and inherited attributes of Base1.) 
It is clear that indiscriminate use of multiple inheritance is a maintenance nightmare, given the reliance 
in Python on conventions to avoid accidental name conflicts. A well-known problem with multiple 
inheritance is a class derived from two classes that happen to have a common base class. While it is 
easy enough to figure out what happens in this case (the instance will have a single copy of ``instance 
variables'' or data attributes used by the common base class), it is not clear that these semantics are in 
any way useful. 
9.6 Private Variables 
There is limited support for class-private identifiers. Any identifier of the form __spam (at least two 
leading underscores, at most one trailing underscore) is now textually replaced with 
_classname__spam, where classname is the current class name with leading underscore(s) 
stripped. This mangling is done without regard of the syntactic position of the identifier, so it can be 
used to define class-private instance and class variables, methods, as well as globals, and even to store 
instance variables private to this class on instances of other classes. Truncation may occur when the 
mangled name would be longer than 255 characters. Outside classes, or when the class name consists 
of only underscores, no mangling occurs. 
Name mangling is intended to give classes an easy way to define ``private'' instance variables and 
methods, without having to worry about instance variables defined by derived classes, or mucking 
with instance variables by code outside the class. Note that the mangling rules are designed mostly to 
avoid accidents; it still is possible for a determined soul to access or modify a variable that is 
considered private. This can even be useful in special circumstances, such as in the debugger, and 
that's one reason why this loophole is not closed. (Buglet: derivation of a class with the same name as 
the base class makes use of private variables of the base class possible.) 
Notice that code passed to exec, eval() or evalfile() does not consider the classname of the 
invoking class to be the current class; this is similar to the effect of the global statement, the effect 
of which is likewise restricted to code that is byte-compiled together. The same restriction applies to 
getattr(), setattr() and delattr(), as well as when referencing __dict__ directly. 
9.7 Odds and Ends 
http://www.python.org/doc/2.3.5/tut/node11.html (10 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
Sometimes it is useful to have a data type similar to the Pascal ``record'' or C ``struct'', bundling 
together a couple of named data items. An empty class definition will do nicely: 
class Employee:
    pass
john = Employee() # Create an empty employee record
# Fill the fields of the record
john.name = 'John Doe'
john.dept = 'computer lab'
john.salary = 1000
A piece of Python code that expects a particular abstract data type can often be passed a class that 
emulates the methods of that data type instead. For instance, if you have a function that formats some 
data from a file object, you can define a class with methods read() and readline() that gets the 
data from a string buffer instead, and pass it as an argument. 
Instance method objects have attributes, too: m.im_self is the object of which the method is an 
instance, and m.im_func is the function object corresponding to the method. 
9.8 Exceptions Are Classes Too 
User-defined exceptions are identified by classes as well. Using this mechanism it is possible to create 
extensible hierarchies of exceptions. 
There are two new valid (semantic) forms for the raise statement: 
raise Class, instance
raise instance
In the first form, instance must be an instance of Class or of a class derived from it. The second 
form is a shorthand for: 
raise instance.__class__, instance
A class in an except clause is compatible with an exception if it is the same class or a base class 
thereof (but not the other way around -- an except clause listing a derived class is not compatible with 
a base class). For example, the following code will print B, C, D in that order: 
class B:
    pass
class C(B):
    pass
class D(C):
http://www.python.org/doc/2.3.5/tut/node11.html (11 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
    pass
for c in [B, C, D]:
    try:
        raise c()
    except D:
        print "D"
    except C:
        print "C"
    except B:
        print "B"
Note that if the except clauses were reversed (with "except B" first), it would have printed B, B, B -- 
the first matching except clause is triggered. 
When an error message is printed for an unhandled exception which is a class, the class name is 
printed, then a colon and a space, and finally the instance converted to a string using the built-in 
function str(). 
9.9 Iterators 
By now, you've probably noticed that most container objects can be looped over using a for 
statement: 
for element in [1, 2, 3]:
    print element
for element in (1, 2, 3):
    print element
for key in {'one':1, 'two':2}:
    print key
for char in "123":
    print char
for line in open("myfile.txt"):
    print line
This style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. 
Behind the scenes, the for statement calls iter() on the container object. The function returns an 
iterator object that defines the method next() which accesses elements in the container one at a 
time. When there are no more elements, next() raises a StopIteration exception which tells 
the for loop to terminate. This example shows how it all works: 
>>> s = 'abc'
>>> it = iter(s)
>>> it
<iterator object at 0x00A1DB50>
>>> it.next()
'a'
>>> it.next()
http://www.python.org/doc/2.3.5/tut/node11.html (12 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
'b'
>>> it.next()
'c'
>>> it.next()
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in -toplevel-
    it.next()
StopIteration
Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your 
classes. Define a __iter__() method which returns an object with a next() method. If the class 
defines next(), then __iter__() can just return self: 
>>> class Reverse:
    "Iterator for looping over a sequence backwards"
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def next(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]
>>> for char in Reverse('spam'):
        print char
m
a
p
s
9.10 Generators 
Generators are a simple and powerful tool for creating iterators. They are written like regular functions 
but use the yield statement whenever they want to return data. Each time the next() is called, the 
generator resumes where it left-off (it remembers all the data values and which statement was last 
executed). An example shows that generators can be trivially easy to create: 
>>> def reverse(data):
        for index in range(len(data)-1, -1, -1):
            yield data[index]
                
>>> for char in reverse('golf'):
        print char
http://www.python.org/doc/2.3.5/tut/node11.html (13 of 14) [7/03/2005 2:53:26 PM]

9. Classes 
f
l
o
g
Anything that can be done with generators can also be done with class based iterators as described in 
the previous section. What makes generators so compact is that the __iter__() and next() 
methods are created automatically. 
Another key feature is that the local variables and execution state are automatically saved between 
calls. This made the function easier to write and much more clear than an approach using class 
variables like self.index and self.data. 
In addition to automatic method creation and saving program state, when generators terminate, they 
automatically raise StopIteration. In combination, these features make it easy to create iterators 
with no more effort than writing a regular function. 
Footnotes
... namespace!9.1
Except for one thing. Module objects have a secret read-only attribute called __dict__ which 
returns the dictionary used to implement the module's namespace; the name __dict__ is an 
attribute but not a global name. Obviously, using this violates the abstraction of namespace 
implementation, and should be restricted to things like post-mortem debuggers. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 8. Errors and Exceptions Up: Python Tutorial Next: 10. Brief Tour of 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node11.html (14 of 14) [7/03/2005 2:53:26 PM]

Contents
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Index
Previous: Front Matter Up: Python Tutorial Next: 1. Whetting Your Appetite 
Contents 
G     1. Whetting Your Appetite 
G     2. Using the Python Interpreter 
H     2.1 Invoking the Interpreter 
I     2.1.1 Argument Passing 
I     2.1.2 Interactive Mode 
H     2.2 The Interpreter and Its Environment 
I     2.2.1 Error Handling 
I     2.2.2 Executable Python Scripts 
I     2.2.3 Source Code Encoding 
I     2.2.4 The Interactive Startup File 
G     3. An Informal Introduction to Python 
H     3.1 Using Python as a Calculator 
I     3.1.1 Numbers 
I     3.1.2 Strings 
I     3.1.3 Unicode Strings 
I     3.1.4 Lists 
H     3.2 First Steps Towards Programming 
G     4. More Control Flow Tools 
H     4.1 if Statements 
H     4.2 for Statements 
H     4.3 The range() Function 
H     4.4 break and continue Statements, and else Clauses on Loops 
H     4.5 pass Statements 
H     4.6 Defining Functions 
H     4.7 More on Defining Functions 
I     4.7.1 Default Argument Values 
I     4.7.2 Keyword Arguments 
I     4.7.3 Arbitrary Argument Lists 
I     4.7.4 Unpacking Argument Lists 
I     4.7.5 Lambda Forms 
I     4.7.6 Documentation Strings 
G     5. Data Structures 
H     5.1 More on Lists 
http://www.python.org/doc/2.3.5/tut/node2.html (1 of 3) [7/03/2005 2:54:12 PM]

Contents
I     5.1.1 Using Lists as Stacks 
I     5.1.2 Using Lists as Queues 
I     5.1.3 Functional Programming Tools 
I     5.1.4 List Comprehensions 
H     5.2 The del statement 
H     5.3 Tuples and Sequences 
H     5.4 Dictionaries 
H     5.5 Looping Techniques 
H     5.6 More on Conditions 
H     5.7 Comparing Sequences and Other Types 
G     6. Modules 
H     6.1 More on Modules 
I     6.1.1 The Module Search Path 
I     6.1.2 ``Compiled'' Python files 
H     6.2 Standard Modules 
H     6.3 The dir() Function 
H     6.4 Packages 
I     6.4.1 Importing * From a Package 
I     6.4.2 Intra-package References 
I     6.4.3 Packages in Multiple Directories 
G     7. Input and Output 
H     7.1 Fancier Output Formatting 
H     7.2 Reading and Writing Files 
I     7.2.1 Methods of File Objects 
I     7.2.2 The pickle Module 
G     8. Errors and Exceptions 
H     8.1 Syntax Errors 
H     8.2 Exceptions 
H     8.3 Handling Exceptions 
H     8.4 Raising Exceptions 
H     8.5 User-defined Exceptions 
H     8.6 Defining Clean-up Actions 
G     9. Classes 
H     9.1 A Word About Terminology 
H     9.2 Python Scopes and Name Spaces 
H     9.3 A First Look at Classes 
I     9.3.1 Class Definition Syntax 
I     9.3.2 Class Objects 
I     9.3.3 Instance Objects 
I     9.3.4 Method Objects 
H     9.4 Random Remarks 
http://www.python.org/doc/2.3.5/tut/node2.html (2 of 3) [7/03/2005 2:54:12 PM]

Contents
H     9.5 Inheritance 
I     9.5.1 Multiple Inheritance 
H     9.6 Private Variables 
H     9.7 Odds and Ends 
H     9.8 Exceptions Are Classes Too 
H     9.9 Iterators 
H     9.10 Generators 
G     10. Brief Tour of the Standard Library 
H     10.1 Operating System Interface 
H     10.2 File Wildcards 
H     10.3 Command Line Arguments 
H     10.4 Error Output Redirection and Program Termination 
H     10.5 String Pattern Matching 
H     10.6 Mathematics 
H     10.7 Internet Access 
H     10.8 Dates and Times 
H     10.9 Data Compression 
H     10.10 Performance Measurement 
H     10.11 Quality Control 
H     10.12 Batteries Included 
G     11. What Now? 
G     A. Interactive Input Editing and History Substitution 
H     A.1 Line Editing 
H     A.2 History Substitution 
H     A.3 Key Bindings 
H     A.4 Commentary 
G     B. Floating Point Arithmetic: Issues and Limitations 
H     B.1 Representation Error 
G     C. History and License 
H     C.1 History of the software 
H     C.2 Terms and conditions for accessing or otherwise using Python 
G     D. Glossary 
G     Index 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Index
Previous: Front Matter Up: Python Tutorial Next: 1. Whetting Your Appetite 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node2.html (3 of 3) [7/03/2005 2:54:12 PM]

Index
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Previous: D. Glossary Up: Python Tutorial Next: About this document ... 
Index 
Symbols | _ | a | b | c | d | e | f | g | i | l | m | n | o | p | r | s | u | z
Symbols
... 
>>> 
_ (underscore)
__builtin__ (built-in module) 
__future__ 
__slots__ 
A
append() (list method) 
B
BDFL 
byte code 
C
http://www.python.org/doc/2.3.5/tut/node18.html (1 of 5) [7/03/2005 2:54:16 PM]

Index
classic class 
coercion 
compileall (standard module) 
count() (list method) 
D
descriptor 
dictionary 
docstrings, [Link] 
documentation strings, [Link] 
E
EAFP 
environment variables 
PATH, [Link] 
PYTHONPATH, [Link], [Link], [Link], 
[Link] 
environment variables (continued) 
PYTHONSTARTUP, [Link] 
extend() (list method) 
F
file object 
for statement, [Link] 
G
generator 
GIL 
global interpreter lock 
I
http://www.python.org/doc/2.3.5/tut/node18.html (2 of 5) [7/03/2005 2:54:16 PM]

Index
IDLE 
immutable 
index() (list method) 
insert() (list method) 
integer division 
interactive 
interpreted 
iterable 
iterator 
L
LBYL 
list comprehension 
M
mapping 
metaclass 
method object 
module 
search path 
mutable 
N
namespace 
nested scope 
new-style class 
O
object 
file 
method 
open() (built-in function) 
P
http://www.python.org/doc/2.3.5/tut/node18.html (3 of 5) [7/03/2005 2:54:16 PM]

Index
path 
module search 
PATH (environment variable), [Link] 
pickle (standard module) 
pop() (list method) 
Python3000 
PYTHONPATH (environment variable), [Link], 
[Link], [Link], [Link] 
PYTHONSTARTUP (environment variable), 
[Link] 
R
readline (built-in module) 
remove() (list method) 
reverse() (list method) 
rlcompleter (standard module) 
S
search 
path, module 
sequence 
sort() (list method) 
statement 
for, [Link] 
string (standard module) 
strings, documentation, [Link] 
sys (standard module) 
U
unicode() (built-in function) 
Z
Zen of Python 
http://www.python.org/doc/2.3.5/tut/node18.html (4 of 5) [7/03/2005 2:54:16 PM]

Index
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Previous: D. Glossary Up: Python Tutorial Next: About this document ... 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node18.html (5 of 5) [7/03/2005 2:54:16 PM]

1. Whetting Your Appetite 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: Contents Up: Python Tutorial Next: 2. Using the Python 
1. Whetting Your Appetite 
If you ever wrote a large shell script, you probably know this feeling: you'd love to add yet another 
feature, but it's already so slow, and so big, and so complicated; or the feature involves a system call 
or other function that is only accessible from C ...Usually the problem at hand isn't serious enough to 
warrant rewriting the script in C; perhaps the problem requires variable-length strings or other data 
types (like sorted lists of file names) that are easy in the shell but lots of work to implement in C, or 
perhaps you're not sufficiently familiar with C. 
Another situation: perhaps you have to work with several C libraries, and the usual C 
write/compile/test/re-compile cycle is too slow. You need to develop software more quickly. Possibly 
perhaps you've written a program that could use an extension language, and you don't want to design a 
language, write and debug an interpreter for it, then tie it into your application. 
In such cases, Python may be just the language for you. Python is simple to use, but it is a real 
programming language, offering much more structure and support for large programs than the shell 
has. On the other hand, it also offers much more error checking than C, and, being a very-high-level 
language, it has high-level data types built in, such as flexible arrays and dictionaries that would cost 
you days to implement efficiently in C. Because of its more general data types Python is applicable to 
a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python 
as in those languages. 
Python allows you to split up your program in modules that can be reused in other Python programs. 
It comes with a large collection of standard modules that you can use as the basis of your programs -- 
or as examples to start learning to program in Python. There are also built-in modules that provide 
things like file I/O, system calls, sockets, and even interfaces to graphical user interface toolkits like 
Tk. 
Python is an interpreted language, which can save you considerable time during program development 
because no compilation and linking is necessary. The interpreter can be used interactively, which 
makes it easy to experiment with features of the language, to write throw-away programs, or to test 
functions during bottom-up program development. It is also a handy desk calculator. 
Python allows writing very compact and readable programs. Programs written in Python are typically 
much shorter than equivalent C or C++ programs, for several reasons: 
G     the high-level data types allow you to express complex operations in a single statement; 
G     statement grouping is done by indentation instead of beginning and ending brackets; 
G     no variable or argument declarations are necessary. 
http://www.python.org/doc/2.3.5/tut/node3.html (1 of 2) [7/03/2005 2:54:19 PM]

1. Whetting Your Appetite 
Python is extensible: if you know how to program in C it is easy to add a new built-in function or 
module to the interpreter, either to perform critical operations at maximum speed, or to link Python 
programs to libraries that may only be available in binary form (such as a vendor-specific graphics 
library). Once you are really hooked, you can link the Python interpreter into an application written in 
C and use it as an extension or command language for that application. 
By the way, the language is named after the BBC show ``Monty Python's Flying Circus'' and has 
nothing to do with nasty reptiles. Making references to Monty Python skits in documentation is not 
only allowed, it is encouraged! 
Now that you are all excited about Python, you'll want to examine it in some more detail. Since the 
best way to learn a language is using it, you are invited here to do so. 
In the next chapter, the mechanics of using the interpreter are explained. This is rather mundane 
information, but essential for trying out the examples shown later. 
The rest of the tutorial introduces various features of the Python language and system through 
examples, beginning with simple expressions, statements and data types, through functions and 
modules, and finally touching upon advanced concepts like exceptions and user-defined classes. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: Contents Up: Python Tutorial Next: 2. Using the Python 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node3.html (2 of 2) [7/03/2005 2:54:19 PM]

2. Using the Python Interpreter 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 1. Whetting Your Appetite Up: Python Tutorial Next: 3. An Informal Introduction 
Subsections 
G     2.1 Invoking the Interpreter 
H     2.1.1 Argument Passing 
H     2.1.2 Interactive Mode 
G     2.2 The Interpreter and Its Environment 
H     2.2.1 Error Handling 
H     2.2.2 Executable Python Scripts 
H     2.2.3 Source Code Encoding 
H     2.2.4 The Interactive Startup File 
2. Using the Python Interpreter 
2.1 Invoking the Interpreter 
The Python interpreter is usually installed as /usr/local/bin/python on those machines where it is 
available; putting /usr/local/bin in your Unix shell's search path makes it possible to start it by typing 
the command 
python
to the shell. Since the choice of the directory where the interpreter lives is an installation option, other 
places are possible; check with your local Python guru or system administrator. (E.g., 
/usr/local/python is a popular alternative location.) 
Typing an end-of-file character (Control-D on Unix, Control-Z on Windows) at the primary 
prompt causes the interpreter to exit with a zero exit status. If that doesn't work, you can exit the 
interpreter by typing the following commands: "import sys; sys.exit()". 
The interpreter's line-editing features usually aren't very sophisticated. On Unix, whoever installed the 
interpreter may have enabled support for the GNU readline library, which adds more elaborate 
interactive editing and history features. Perhaps the quickest check to see whether command line 
editing is supported is typing Control-P to the first Python prompt you get. If it beeps, you have 
command line editing; see Appendix A for an introduction to the keys. If nothing appears to happen, 
or if P is echoed, command line editing isn't available; you'll only be able to use backspace to remove 
characters from the current line. 
http://www.python.org/doc/2.3.5/tut/node4.html (1 of 5) [7/03/2005 2:54:22 PM]

2. Using the Python Interpreter 
The interpreter operates somewhat like the Unix shell: when called with standard input connected to a 
tty device, it reads and executes commands interactively; when called with a file name argument or 
with a file as standard input, it reads and executes a script from that file. 
A second way of starting the interpreter is "python -c command [arg] ...", which executes 
the statement(s) in command, analogous to the shell's -c option. Since Python statements often contain 
spaces or other characters that are special to the shell, it is best to quote command in its entirety with 
double quotes. 
Note that there is a difference between "python file" and "python <file". In the latter case, 
input requests from the program, such as calls to input() and raw_input(), are satisfied from 
file. Since this file has already been read until the end by the parser before the program starts 
executing, the program will encounter end-of-file immediately. In the former case (which is usually 
what you want) they are satisfied from whatever file or device is connected to standard input of the 
Python interpreter. 
When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode 
afterwards. This can be done by passing -i before the script. (This does not work if the script is read 
from standard input, for the same reason as explained in the previous paragraph.) 
2.1.1 Argument Passing 
When known to the interpreter, the script name and additional arguments thereafter are passed to the 
script in the variable sys.argv, which is a list of strings. Its length is at least one; when no script 
and no arguments are given, sys.argv[0] is an empty string. When the script name is given as '-
' (meaning standard input), sys.argv[0] is set to '-'. When -c command is used, 
sys.argv[0] is set to '-c'. Options found after -c command are not consumed by the Python 
interpreter's option processing but left in sys.argv for the command to handle. 
2.1.2 Interactive Mode 
When commands are read from a tty, the interpreter is said to be in interactive mode. In this mode it 
prompts for the next command with the primary prompt, usually three greater-than signs (">>> "); 
for continuation lines it prompts with the secondary prompt, by default three dots ("... "). The 
interpreter prints a welcome message stating its version number and a copyright notice before printing 
the first prompt: 
python
Python 1.5.2b2 (#1, Feb 28 1999, 00:02:06)  [GCC 2.8.1] on sunos5
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
>>>
Continuation lines are needed when entering a multi-line construct. As an example, take a look at this 
if statement: 
http://www.python.org/doc/2.3.5/tut/node4.html (2 of 5) [7/03/2005 2:54:22 PM]

2. Using the Python Interpreter 
>>> the_world_is_flat = 1
>>> if the_world_is_flat:
...     print "Be careful not to fall off!"
... 
Be careful not to fall off!
2.2 The Interpreter and Its Environment 
2.2.1 Error Handling 
When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it 
then returns to the primary prompt; when input came from a file, it exits with a nonzero exit status 
after printing the stack trace. (Exceptions handled by an except clause in a try statement are not 
errors in this context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit; this 
applies to internal inconsistencies and some cases of running out of memory. All error messages are 
written to the standard error stream; normal output from the executed commands is written to standard 
output. 
Typing the interrupt character (usually Control-C or DEL) to the primary or secondary prompt cancels 
the input and returns to the primary prompt.2.1Typing an interrupt while a command is executing 
raises the KeyboardInterrupt exception, which may be handled by a try statement. 
2.2.2 Executable Python Scripts 
On BSD'ish Unix systems, Python scripts can be made directly executable, like shell scripts, by 
putting the line 
#! /usr/bin/env python
(assuming that the interpreter is on the user's PATH) at the beginning of the script and giving the file 
an executable mode. The "#!" must be the first two characters of the file. On some platforms, this 
first line must end with a Unix-style line ending ("\n"), not a Mac OS ("\r") or Windows ("\r\n") 
line ending. Note that the hash, or pound, character, "#", is used to start a comment in Python. 
The script can be given a executable mode, or permission, using the chmod command: 
$ chmod +x myscript.py
2.2.3 Source Code Encoding 
It is possible to use encodings different than ASCII in Python source files. The best way to do it is to 
put one more special comment line right after the #! line to define the source file encoding: 
http://www.python.org/doc/2.3.5/tut/node4.html (3 of 5) [7/03/2005 2:54:22 PM]

2. Using the Python Interpreter 
# -*- coding: iso-8859-1 -*-
With that declaration, all characters in the source file will be treated as iso-8859-1, and it will be 
possible to directly write Unicode string literals in the selected encoding. The list of possible 
encodings can be found in the Python Library Reference, in the section on codecs. 
If your editor supports saving files as UTF-8 with a UTF-8 byte order mark (aka BOM), you can use 
that instead of an encoding declaration. IDLE supports this capability if 
Options/General/Default Source Encoding/UTF-8 is set. Notice that this signature is 
not understood in older Python releases (2.2 and earlier), and also not understood by the operating 
system for #! files. 
By using UTF-8 (either through the signature or an encoding declaration), characters of most 
languages in the world can be used simultaneously in string literals and comments. Using non-ASCII 
characters in identifiers is not supported. To display all these characters properly, your editor must 
recognize that the file is UTF-8, and it must use a font that supports all the characters in the file. 
2.2.4 The Interactive Startup File 
When you use Python interactively, it is frequently handy to have some standard commands executed 
every time the interpreter is started. You can do this by setting an environment variable named 
PYTHONSTARTUP to the name of a file containing your start-up commands. This is similar to the 
.profile feature of the Unix shells. 
This file is only read in interactive sessions, not when Python reads commands from a script, and not 
when /dev/tty is given as the explicit source of commands (which otherwise behaves like an 
interactive session). It is executed in the same namespace where interactive commands are executed, 
so that objects that it defines or imports can be used without qualification in the interactive session. 
You can also change the prompts sys.ps1 and sys.ps2 in this file. 
If you want to read an additional start-up file from the current directory, you can program this in the 
global start-up file using code like "if os.path.isfile('.pythonrc.py'): 
execfile('.pythonrc.py')". If you want to use the startup file in a script, you must do this 
explicitly in the script: 
import os
filename = os.environ.get('PYTHONSTARTUP')
if filename and os.path.isfile(filename):
    execfile(filename)
http://www.python.org/doc/2.3.5/tut/node4.html (4 of 5) [7/03/2005 2:54:22 PM]

2. Using the Python Interpreter 
Footnotes
... prompt.2.1
A problem with the GNU Readline package may prevent this. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 1. Whetting Your Appetite Up: Python Tutorial Next: 3. An Informal Introduction 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node4.html (5 of 5) [7/03/2005 2:54:22 PM]

3. An Informal Introduction to Python 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 2. Using the Python Up: Python Tutorial Next: 4. More Control Flow 
Subsections 
G     3.1 Using Python as a Calculator 
H     3.1.1 Numbers 
H     3.1.2 Strings 
H     3.1.3 Unicode Strings 
H     3.1.4 Lists 
G     3.2 First Steps Towards Programming 
3. An Informal Introduction to Python 
In the following examples, input and output are distinguished by the presence or absence of prompts (">>> " and "... "): to 
repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt 
are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank 
line; this is used to end a multi-line command. 
Many of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python 
start with the hash character, "#", and extend to the end of the physical line. A comment may appear at the start of a line or 
following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. 
Some examples: 
# this is the first comment
SPAM = 1                 # and this is the second comment
                         # ... and now a third!
STRING = "# This is not a comment."
3.1 Using Python as a Calculator 
Let's try some simple Python commands. Start the interpreter and wait for the primary prompt, ">>> ". (It shouldn't take 
long.) 
3.1.1 Numbers 
The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is 
straightforward: the operators +, -, * and / work just like in most other languages (for example, Pascal or C); parentheses can 
be used for grouping. For example: 
>>> 2+2
4
>>> # This is a comment
... 2+2
4
>>> 2+2  # and a comment on the same line as code
4
>>> (50-5*6)/4
5
>>> # Integer division returns the floor:
http://www.python.org/doc/2.3.5/tut/node5.html (1 of 10) [7/03/2005 2:54:27 PM]

3. An Informal Introduction to Python 
... 7/3
2
>>> 7/-3
-3
Like in C, the equal sign ("=") is used to assign a value to a variable. The value of an assignment is not written: 
>>> width = 20
>>> height = 5*9
>>> width * height
900
A value can be assigned to several variables simultaneously: 
>>> x = y = z = 0  # Zero x, y and z
>>> x
0
>>> y
0
>>> z
0
There is full support for floating point; operators with mixed type operands convert the integer operand to floating point: 
>>> 3 * 3.75 / 1.5
7.5
>>> 7.0 / 2
3.5
Complex numbers are also supported; imaginary numbers are written with a suffix of "j" or "J". Complex numbers with a 
nonzero real component are written as "(real+imagj)", or can be created with the "complex(real, imag)" function. 
>>> 1j * 1J
(-1+0j)
>>> 1j * complex(0,1)
(-1+0j)
>>> 3+1j*3
(3+3j)
>>> (3+1j)*3
(9+3j)
>>> (1+2j)/(1+1j)
(1.5+0.5j)
Complex numbers are always represented as two floating point numbers, the real and imaginary part. To extract these parts 
from a complex number z, use z.real and z.imag. 
>>> a=1.5+0.5j
>>> a.real
1.5
>>> a.imag
0.5
The conversion functions to floating point and integer (float(), int() and long()) don't work for complex numbers -- 
there is no one correct way to convert a complex number to a real number. Use abs(z) to get its magnitude (as a float) or 
z.real to get its real part. 
>>> a=3.0+4.0j
>>> float(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
http://www.python.org/doc/2.3.5/tut/node5.html (2 of 10) [7/03/2005 2:54:27 PM]

3. An Informal Introduction to Python 
TypeError: can't convert complex to float; use abs(z)
>>> a.real
3.0
>>> a.imag
4.0
>>> abs(a)  # sqrt(a.real**2 + a.imag**2)
5.0
>>>
In interactive mode, the last printed expression is assigned to the variable _. This means that when you are using Python as a 
desk calculator, it is somewhat easier to continue calculations, for example: 
>>> tax = 12.5 / 100
>>> price = 100.50
>>> price * tax
12.5625
>>> price + _
113.0625
>>> round(_, 2)
113.06
>>>
This variable should be treated as read-only by the user. Don't explicitly assign a value to it -- you would create an independent 
local variable with the same name masking the built-in variable with its magic behavior. 
3.1.2 Strings 
Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single 
quotes or double quotes: 
>>> 'spam eggs'
'spam eggs'
>>> 'doesn\'t'
"doesn't"
>>> "doesn't"
"doesn't"
>>> '"Yes," he said.'
'"Yes," he said.'
>>> "\"Yes,\" he said."
'"Yes," he said.'
>>> '"Isn\'t," she said.'
'"Isn\'t," she said.'
String literals can span multiple lines in several ways. Continuation lines can be used, with a backslash as the last character on 
the line indicating that the next line is a logical continuation of the line: 
hello = "This is a rather long string containing\n\
several lines of text just as you would do in C.\n\
    Note that whitespace at the beginning of the line is\
 significant."
print hello
Note that newlines would still need to be embedded in the string using \n; the newline following the trailing backslash is 
discarded. This example would print the following: 
This is a rather long string containing
several lines of text just as you would do in C.
    Note that whitespace at the beginning of the line is significant.
http://www.python.org/doc/2.3.5/tut/node5.html (3 of 10) [7/03/2005 2:54:27 PM]

3. An Informal Introduction to Python 
If we make the string literal a ``raw'' string, however, the \n sequences are not converted to newlines, but the backslash at the 
end of the line, and the newline character in the source, are both included in the string as data. Thus, the example: 
hello = r"This is a rather long string containing\n\
several lines of text much as you would do in C."
print hello
would print: 
This is a rather long string containing\n\
several lines of text much as you would do in C.
Or, strings can be surrounded in a pair of matching triple-quotes: """ or '''. End of lines do not need to be escaped when 
using triple-quotes, but they will be included in the string. 
print """
Usage: thingy [OPTIONS] 
     -h                        Display this usage message
     -H hostname               Hostname to connect to
"""
produces the following output: 
Usage: thingy [OPTIONS] 
     -h                        Display this usage message
     -H hostname               Hostname to connect to
The interpreter prints the result of string operations in the same way as they are typed for input: inside quotes, and with quotes 
and other funny characters escaped by backslashes, to show the precise value. The string is enclosed in double quotes if the 
string contains a single quote and no double quotes, else it's enclosed in single quotes. (The print statement, described later, 
can be used to write strings without quotes or escapes.) 
Strings can be concatenated (glued together) with the + operator, and repeated with *: 
>>> word = 'Help' + 'A'
>>> word
'HelpA'
>>> '<' + word*5 + '>'
'<HelpAHelpAHelpAHelpAHelpA>'
Two string literals next to each other are automatically concatenated; the first line above could also have been written "word 
= 'Help' 'A'"; this only works with two literals, not with arbitrary string expressions: 
>>> 'str' 'ing'                   #  <-  This is ok
'string'
>>> 'str'.strip() + 'ing'   #  <-  This is ok
'string'
>>> 'str'.strip() 'ing'     #  <-  This is invalid
  File "<stdin>", line 1, in ?
    'str'.strip() 'ing'
                      ^
SyntaxError: invalid syntax
Strings can be subscripted (indexed); like in C, the first character of a string has subscript (index) 0. There is no separate 
character type; a character is simply a string of size one. Like in Icon, substrings can be specified with the slice notation: two 
indices separated by a colon. 
http://www.python.org/doc/2.3.5/tut/node5.html (4 of 10) [7/03/2005 2:54:27 PM]

3. An Informal Introduction to Python 
>>> word[4]
'A'
>>> word[0:2]
'He'
>>> word[2:4]
'lp'
Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the 
string being sliced. 
>>> word[:2]    # The first two characters
'He'
>>> word[2:]    # Everything except the first two characters
'lpA'
Unlike a C string, Python strings cannot be changed. Assigning to an indexed position in the string results in an error: 
>>> word[0] = 'x'
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: object doesn't support item assignment
>>> word[:1] = 'Splat'
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: object doesn't support slice assignment
However, creating a new string with the combined content is easy and efficient: 
>>> 'x' + word[1:]
'xelpA'
>>> 'Splat' + word[4]
'SplatA'
Here's a useful invariant of slice operations: s[:i] + s[i:] equals s. 
>>> word[:2] + word[2:]
'HelpA'
>>> word[:3] + word[3:]
'HelpA'
Degenerate slice indices are handled gracefully: an index that is too large is replaced by the string size, an upper bound smaller 
than the lower bound returns an empty string. 
>>> word[1:100]
'elpA'
>>> word[10:]
''
>>> word[2:1]
''
Indices may be negative numbers, to start counting from the right. For example: 
>>> word[-1]     # The last character
'A'
>>> word[-2]     # The last-but-one character
'p'
>>> word[-2:]    # The last two characters
'pA'
>>> word[:-2]    # Everything except the last two characters
'Hel'
http://www.python.org/doc/2.3.5/tut/node5.html (5 of 10) [7/03/2005 2:54:28 PM]

3. An Informal Introduction to Python 
But note that -0 is really the same as 0, so it does not count from the right! 
>>> word[-0]     # (since -0 equals 0)
'H'
Out-of-range negative slice indices are truncated, but don't try this for single-element (non-slice) indices: 
>>> word[-100:]
'HelpA'
>>> word[-10]    # error
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
IndexError: string index out of range
The best way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the 
first character numbered 0. Then the right edge of the last character of a string of n characters has index n, for example: 
 +---+---+---+---+---+ 
 | H | e | l | p | A |
 +---+---+---+---+---+ 
 0   1   2   3   4   5 
-5  -4  -3  -2  -1
The first row of numbers gives the position of the indices 0...5 in the string; the second row gives the corresponding negative 
indices. The slice from i to j consists of all characters between the edges labeled i and j, respectively. 
For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For example, the 
length of word[1:3] is 2. 
The built-in function len() returns the length of a string: 
>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34
See Also:
Sequence Types
Strings, and the Unicode strings described in the next section, are examples of sequence types, and support the 
common operations supported by such types.
String Methods
Both strings and Unicode strings support a large number of methods for basic transformations and searching.
String Formatting Operations
The formatting operations invoked when strings and Unicode strings are the left operand of the % operator are 
described in more detail here.
3.1.3 Unicode Strings 
Starting with Python 2.0 a new data type for storing text data is available to the programmer: the Unicode object. It can be used 
to store and manipulate Unicode data (see http://www.unicode.org/) and integrates well with the existing string objects 
providing auto-conversions where necessary. 
http://www.python.org/doc/2.3.5/tut/node5.html (6 of 10) [7/03/2005 2:54:28 PM]

3. An Informal Introduction to Python 
Unicode has the advantage of providing one ordinal for every character in every script used in modern and ancient texts. 
Previously, there were only 256 possible ordinals for script characters and texts were typically bound to a code page which 
mapped the ordinals to script characters. This lead to very much confusion especially with respect to internationalization 
(usually written as "i18n" -- "i" + 18 characters + "n") of software. Unicode solves these problems by defining one code 
page for all scripts. 
Creating Unicode strings in Python is just as simple as creating normal strings: 
>>> u'Hello World !'
u'Hello World !'
The small "u" in front of the quote indicates that an Unicode string is supposed to be created. If you want to include special 
characters in the string, you can do so by using the Python Unicode-Escape encoding. The following example shows how: 
>>> u'Hello\u0020World !'
u'Hello World !'
The escape sequence \u0020 indicates to insert the Unicode character with the ordinal value 0x0020 (the space character) at 
the given position. 
Other characters are interpreted by using their respective ordinal values directly as Unicode ordinals. If you have literal strings 
in the standard Latin-1 encoding that is used in many Western countries, you will find it convenient that the lower 256 
characters of Unicode are the same as the 256 characters of Latin-1. 
For experts, there is also a raw mode just like the one for normal strings. You have to prefix the opening quote with 'ur' to have 
Python use the Raw-Unicode-Escape encoding. It will only apply the above \uXXXX conversion if there is an uneven number 
of backslashes in front of the small 'u'. 
>>> ur'Hello\u0020World !'
u'Hello World !'
>>> ur'Hello\\u0020World !'
u'Hello\\\\u0020World !'
The raw mode is most useful when you have to enter lots of backslashes, as can be necessary in regular expressions. 
Apart from these standard encodings, Python provides a whole set of other ways of creating Unicode strings on the basis of a 
known encoding. 
The built-in function unicode() provides access to all registered Unicode codecs (COders and DECoders). Some of the 
more well known encodings which these codecs can convert are Latin-1, ASCII, UTF-8, and UTF-16. The latter two are 
variable-length encodings that store each Unicode character in one or more bytes. The default encoding is normally set to 
ASCII, which passes through characters in the range 0 to 127 and rejects any other characters with an error. When a Unicode 
string is printed, written to a file, or converted with str(), conversion takes place using this default encoding. 
>>> u"abc"
u'abc'
>>> str(u"abc")
'abc'
>>> u"äöü"
u'\xe4\xf6\xfc'
>>> str(u"äöü")
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-2: ordinal not in 
range(128)
To convert a Unicode string into an 8-bit string using a specific encoding, Unicode objects provide an encode() method that 
takes one argument, the name of the encoding. Lowercase names for encodings are preferred. 
http://www.python.org/doc/2.3.5/tut/node5.html (7 of 10) [7/03/2005 2:54:28 PM]

3. An Informal Introduction to Python 
>>> u"äöü".encode('utf-8')
'\xc3\xa4\xc3\xb6\xc3\xbc'
If you have data in a specific encoding and want to produce a corresponding Unicode string from it, you can use the 
unicode() function with the encoding name as the second argument. 
>>> unicode('\xc3\xa4\xc3\xb6\xc3\xbc', 'utf-8')
u'\xe4\xf6\xfc'
3.1.4 Lists 
Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can 
be written as a list of comma-separated values (items) between square brackets. List items need not all have the same type. 
>>> a = ['spam', 'eggs', 100, 1234]
>>> a
['spam', 'eggs', 100, 1234]
Like string indices, list indices start at 0, and lists can be sliced, concatenated and so on: 
>>> a[0]
'spam'
>>> a[3]
1234
>>> a[-2]
100
>>> a[1:-1]
['eggs', 100]
>>> a[:2] + ['bacon', 2*2]
['spam', 'eggs', 'bacon', 4]
>>> 3*a[:3] + ['Boe!']
['spam', 'eggs', 100, 'spam', 'eggs', 100, 'spam', 'eggs', 100, 'Boe!']
Unlike strings, which are immutable, it is possible to change individual elements of a list: 
>>> a
['spam', 'eggs', 100, 1234]
>>> a[2] = a[2] + 23
>>> a
['spam', 'eggs', 123, 1234]
Assignment to slices is also possible, and this can even change the size of the list: 
>>> # Replace some items:
... a[0:2] = [1, 12]
>>> a
[1, 12, 123, 1234]
>>> # Remove some:
... a[0:2] = []
>>> a
[123, 1234]
>>> # Insert some:
... a[1:1] = ['bletch', 'xyzzy']
>>> a
[123, 'bletch', 'xyzzy', 1234]
>>> a[:0] = a     # Insert (a copy of) itself at the beginning
>>> a
[123, 'bletch', 'xyzzy', 1234, 123, 'bletch', 'xyzzy', 1234]
http://www.python.org/doc/2.3.5/tut/node5.html (8 of 10) [7/03/2005 2:54:28 PM]

3. An Informal Introduction to Python 
The built-in function len() also applies to lists: 
>>> len(a)
8
It is possible to nest lists (create lists containing other lists), for example: 
>>> q = [2, 3]
>>> p = [1, q, 4]
>>> len(p)
3
>>> p[1]
[2, 3]
>>> p[1][0]
2
>>> p[1].append('xtra')     # See section 5.1
>>> p
[1, [2, 3, 'xtra'], 4]
>>> q
[2, 3, 'xtra']
Note that in the last example, p[1] and q really refer to the same object! We'll come back to object semantics later. 
3.2 First Steps Towards Programming 
Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an 
initial sub-sequence of the Fibonacci series as follows: 
>>> # Fibonacci series:
... # the sum of two elements defines the next
... a, b = 0, 1
>>> while b < 10:
...       print b
...       a, b = b, a+b
... 
1
1
2
3
5
8
This example introduces several new features. 
G     The first line contains a multiple assignment: the variables a and b simultaneously get the new values 0 and 1. On the 
last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated first before any of 
the assignments take place. The right-hand side expressions are evaluated from the left to the right. 
G     The while loop executes as long as the condition (here: b < 10) remains true. In Python, like in C, any non-zero 
integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a 
non-zero length is true, empty sequences are false. The test used in the example is a simple comparison. The standard 
comparison operators are written the same as in C: < (less than), > (greater than), == (equal to), <= (less than or equal 
to), >= (greater than or equal to) and != (not equal to). 
G     The body of the loop is indented: indentation is Python's way of grouping statements. Python does not (yet!) provide an 
intelligent input line editing facility, so you have to type a tab or space(s) for each indented line. In practice you will 
prepare more complicated input for Python with a text editor; most text editors have an auto-indent facility. When a 
http://www.python.org/doc/2.3.5/tut/node5.html (9 of 10) [7/03/2005 2:54:28 PM]

3. An Informal Introduction to Python 
compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser 
cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same 
amount. 
G     The print statement writes the value of the expression(s) it is given. It differs from just writing the expression you 
want to write (as we did earlier in the calculator examples) in the way it handles multiple expressions and strings. 
Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this: 
>>> i = 256*256
>>> print 'The value of i is', i
The value of i is 65536
A trailing comma avoids the newline after the output: 
>>> a, b = 0, 1
>>> while b < 1000:
...     print b,
...     a, b = b, a+b
... 
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
Note that the interpreter inserts a newline before it prints the next prompt if the last line was not completed. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 2. Using the Python Up: Python Tutorial Next: 4. More Control Flow 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node5.html (10 of 10) [7/03/2005 2:54:28 PM]

10. Brief Tour of the Standard Library 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 9. Classes Up: Python Tutorial Next: 11. What Now? 
Subsections 
G     10.1 Operating System Interface 
G     10.2 File Wildcards 
G     10.3 Command Line Arguments 
G     10.4 Error Output Redirection and Program Termination 
G     10.5 String Pattern Matching 
G     10.6 Mathematics 
G     10.7 Internet Access 
G     10.8 Dates and Times 
G     10.9 Data Compression 
G     10.10 Performance Measurement 
G     10.11 Quality Control 
G     10.12 Batteries Included 
10. Brief Tour of the Standard Library 
10.1 Operating System Interface 
The os module provides dozens of functions for interacting with the operating system: 
>>> import os
>>> os.system('time 0:02')
0
>>> os.getcwd()      # Return the current working directory
'C:\\Python24'
>>> os.chdir('/server/accesslogs')
Be sure to use the "import os" style instead of "from os import *". This will keep os.open() from 
shadowing the builtin open() function which operates much differently. 
The builtin dir() and help() functions are useful as interactive aids for working with large modules like os: 
>>> import os
>>> dir(os)
<returns a list of all module functions>
>>> help(os)
<returns an extensive manual page created from the module's docstrings>
For daily file and directory management tasks, the shutil module provides a higher level interface that is easier 
to use: 
http://www.python.org/doc/2.3.5/tut/node12.html (1 of 6) [7/03/2005 3:06:47 PM]

10. Brief Tour of the Standard Library 
>>> import shutil
>>> shutil.copyfile('data.db', 'archive.db')
>>> shutil.move('/build/executables', 'installdir')
10.2 File Wildcards 
The glob module provides a function for making file lists from directory wildcard searches: 
>>> import glob
>>> glob.glob('*.py')
['primes.py', 'random.py', 'quote.py']
10.3 Command Line Arguments 
Common utility scripts often invoke processing command line arguments. These arguments are stored in the sys 
module's argv attribute as a list. For instance the following output results from running "python demo.py 
one two three" at the command line: 
>>> import sys
>>> print sys.argv
['demo.py', 'one', 'two', 'three']
The getopt module processes sys.argv using the conventions of the Unix getopt() function. More powerful 
and flexible command line processing is provided by the optparse module. 
10.4 Error Output Redirection and Program 
Termination 
The sys module also has attributes for stdin, stdout, and stderr. The latter is useful for emitting warnings and 
error messages to make them visible even when stdout has been redirected: 
>>> sys.stderr.write('Warning, log file not found starting a new one')
Warning, log file not found starting a new one
The most direct way to terminate a script is to use "sys.exit()". 
10.5 String Pattern Matching 
The re module provides regular expression tools for advanced string processing. For complex matching and 
manipulation, regular expressions offer succinct, optimized solutions: 
>>> import re
>>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
['foot', 'fell', 'fastest']
>>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
'cat in the hat'
http://www.python.org/doc/2.3.5/tut/node12.html (2 of 6) [7/03/2005 3:06:47 PM]

10. Brief Tour of the Standard Library 
When only simple capabilities are needed, string methods are preferred because they are easier to read and debug: 
>>> 'tea for too'.replace('too', 'two')
'tea for two'
10.6 Mathematics 
The math module gives access to the underlying C library functions for floating point math: 
>>> import math
>>> math.cos(math.pi / 4.0)
0.70710678118654757
>>> math.log(1024, 2)
10.0
The random module provides tools for making random selections: 
>>> import random
>>> random.choice(['apple', 'pear', 'banana'])
'apple'
>>> random.sample(xrange(100), 10)   # sampling without replacement
[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
>>> random.random()    # random float
0.17970987693706186
>>> random.randrange(6)    # random integer chosen from range(6)
4
10.7 Internet Access 
There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest 
are urllib2 for retrieving data from urls and smtplib for sending mail: 
>>> import urllib2
>>> for line in urllib2.urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):
...     if 'EST' in line:      # look for Eastern Standard Time
...         print line
    
<BR>Nov. 25, 09:43:32 PM EST
>>> import smtplib
>>> server = smtplib.SMTP('localhost')
>>> server.sendmail('soothsayer@tmp.org', 'jceasar@tmp.org',
"""To: jceasar@tmp.org
From: soothsayer@tmp.org
Beware the Ides of March.
""")
>>> server.quit()
10.8 Dates and Times 
http://www.python.org/doc/2.3.5/tut/node12.html (3 of 6) [7/03/2005 3:06:47 PM]

10. Brief Tour of the Standard Library 
The datetime module supplies classes for manipulating dates and times in both simple and complex ways. 
While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for 
output formatting and manipulation. The module also supports objects that are time zone aware. 
# dates are easily constructed and formatted
>>> from datetime import date
>>> now = date.today()
>>> now
datetime.date(2003, 12, 2)
>>> now.strftime("%m-%d-%y or %d%b %Y is a %A on the %d day of %B")
'12-02-03 or 02Dec 2003 is a Tuesday on the 02 day of December'
# dates support calendar arithmetic
>>> birthday = date(1964, 7, 31)
>>> age = now - birthday
>>> age.days
14368
10.9 Data Compression 
Common data archiving and compression formats are directly supported by modules including: zlib, gzip, 
bz2, zipfile, and tarfile. 
>>> import zlib
>>> s = 'witch which has which witches wrist watch'
>>> len(s)
41
>>> t = zlib.compress(s)
>>> len(t)
37
>>> zlib.decompress(t)
'witch which has which witches wrist watch'
>>> zlib.crc32(t)
-1438085031
10.10 Performance Measurement 
Some Python users develop a deep interest in knowing the relative performance between different approaches to 
the same problem. Python provides a measurement tool that answers those questions immediately. 
For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional 
approach to swapping arguments. The timeit module quickly demonstrates that the traditional approach is 
faster: 
>>> from timeit import Timer
>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
0.60864915603680925
>>> Timer('a,b = b,a', 'a=1; b=2').timeit()
0.8625194857439773
http://www.python.org/doc/2.3.5/tut/node12.html (4 of 6) [7/03/2005 3:06:47 PM]

10. Brief Tour of the Standard Library 
In contrast to timeit's fine level of granularity, the profile and pstats modules provide tools for 
identifying time critical sections in larger blocks of code. 
10.11 Quality Control 
One approach for developing high quality software is to write tests for each function as it is developed and to run 
those tests frequently during the development process. 
The doctest module provides a tool for scanning a module and validating tests embedded in a program's 
docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the 
docstring. This improves the documentation by providing the user with an example and it allows the doctest 
module to make sure the code remains true to the documentation: 
def average(values):
    """Computes the arithmetic mean of a list of numbers.
    >>> print average([20, 30, 70])
    40.0
    """
    return sum(values, 0.0) / len(values)
import doctest
doctest.testmod()   # automatically validate the embedded tests
The unittest module is not as effortless as the doctest module, but it allows a more comprehensive set of 
tests to be maintained in a separate file: 
import unittest
class TestStatisticalFunctions(unittest.TestCase):
    def test_average(self):
        self.assertEqual(average([20, 30, 70]), 40.0)
        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
        self.assertRaises(ZeroDivisionError, average, [])
        self.assertRaises(TypeError, average, 20, 30, 70)
unittest.main() # Calling from the command line invokes all tests
10.12 Batteries Included 
Python has a ``batteries included'' philosophy. This is best seen through the sophisticated and robust capabilities 
of its larger packages. For example: 
* The xmlrpclib and SimpleXMLRPCServer modules make implementing remote procedure calls into an 
almost trivial task. Despite the names, no direct knowledge or handling of XML is needed. 
* The email package is a library for managing email messages, including MIME and other RFC 2822-based 
message documents. Unlike smtplib and poplib which actually send and receive messages, the email 
package has a complete toolset for building or decoding complex message structures (including attachments) and 
for implementing internet encoding and header protocols. 
http://www.python.org/doc/2.3.5/tut/node12.html (5 of 6) [7/03/2005 3:06:47 PM]

10. Brief Tour of the Standard Library 
* The xml.dom and xml.sax packages provide robust support for parsing this popular data interchange 
format. Likewise, the csv module supports direct reads and writes in a common database format. Together, these 
modules and packages greatly simplify data interchange between python applications and other tools. 
* Internationalization is supported by a number of modules including gettext, locale, and the codecs 
package. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 9. Classes Up: Python Tutorial Next: 11. What Now? 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node12.html (6 of 6) [7/03/2005 3:06:47 PM]

11. What Now? 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 10. Brief Tour of Up: Python Tutorial Next: A. Interactive Input Editing 
11. What Now? 
Reading this tutorial has probably reinforced your interest in using Python -- you should be eager to 
apply Python to solve your real-world problems. Now what should you do? 
You should read, or at least page through, the Python Library Reference, which gives complete 
(though terse) reference material about types, functions, and modules that can save you a lot of time 
when writing Python programs. The standard Python distribution includes a lot of code in both C and 
Python; there are modules to read Unix mailboxes, retrieve documents via HTTP, generate random 
numbers, parse command-line options, write CGI programs, compress data, and a lot more; skimming 
through the Library Reference will give you an idea of what's available. 
The major Python Web site is http://www.python.org/; it contains code, documentation, and pointers 
to Python-related pages around the Web. This Web site is mirrored in various places around the 
world, such as Europe, Japan, and Australia; a mirror may be faster than the main site, depending on 
your geographical location. A more informal site is http://starship.python.net/, which contains a 
bunch of Python-related personal home pages; many people have downloadable software there. Many 
more user-created Python modules can be found in the Python Package Index (PyPI). 
For Python-related questions and problem reports, you can post to the newsgroup comp.lang.python, 
or send them to the mailing list at python-list@python.org. The newsgroup and mailing list are 
gatewayed, so messages posted to one will automatically be forwarded to the other. There are around 
120 postings a day (with peaks up to several hundred), asking (and answering) questions, suggesting 
new features, and announcing new modules. Before posting, be sure to check the list of Frequently 
Asked Questions (also called the FAQ), or look for it in the Misc/ directory of the Python source 
distribution. Mailing list archives are available at http://www.python.org/pipermail/. The FAQ 
answers many of the questions that come up again and again, and may already contain the solution for 
your problem. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 10. Brief Tour of Up: Python Tutorial Next: A. Interactive Input Editing 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node13.html [7/03/2005 3:07:00 PM]

A. Interactive Input Editing and History Substitution
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 11. What Now? Up: Python Tutorial Next: B. Floating Point Arithmetic: 
Subsections 
G     A.1 Line Editing 
G     A.2 History Substitution 
G     A.3 Key Bindings 
G     A.4 Commentary 
A. Interactive Input Editing and History 
Substitution 
Some versions of the Python interpreter support editing of the current input line and history substitution, 
similar to facilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU 
Readline library, which supports Emacs-style and vi-style editing. This library has its own documentation 
which I won't duplicate here; however, the basics are easily explained. The interactive editing and history 
described here are optionally available in the Unix and CygWin versions of the interpreter. 
This chapter does not document the editing facilities of Mark Hammond's PythonWin package or the Tk-
based environment, IDLE, distributed with Python. The command line history recall which operates within 
DOS boxes on NT and some other DOS and Windows flavors is yet another beast. 
A.1 Line Editing 
If supported, input line editing is active whenever the interpreter prints a primary or secondary prompt. 
The current line can be edited using the conventional Emacs control characters. The most important of 
these are: C-A (Control-A) moves the cursor to the beginning of the line, C-E to the end, C-B moves it 
one position to the left, C-F to the right. Backspace erases the character to the left of the cursor, C-D the 
character to its right. C-K kills (erases) the rest of the line to the right of the cursor, C-Y yanks back the 
last killed string. C-underscore undoes the last change you made; it can be repeated for cumulative 
effect. 
A.2 History Substitution 
History substitution works as follows. All non-empty input lines issued are saved in a history buffer, and 
when a new prompt is given you are positioned on a new line at the bottom of this buffer. C-P moves one 
line up (back) in the history buffer, C-N moves one down. Any line in the history buffer can be edited; an 
asterisk appears in front of the prompt to mark a line as modified. Pressing the Return key passes the 
current line to the interpreter. C-R starts an incremental reverse search; C-S starts a forward search. 
http://www.python.org/doc/2.3.5/tut/node14.html (1 of 4) [7/03/2005 3:07:14 PM]

A. Interactive Input Editing and History Substitution
A.3 Key Bindings 
The key bindings and some other parameters of the Readline library can be customized by placing 
commands in an initialization file called ~/.inputrc. Key bindings have the form 
key-name: function-name
or 
"string": function-name
and options can be set with 
set option-name value
For example: 
# I prefer vi-style editing:
set editing-mode vi
# Edit using a single line:
set horizontal-scroll-mode On
# Rebind some keys:
Meta-h: backward-kill-word
"\C-u": universal-argument
"\C-x\C-r": re-read-init-file
Note that the default binding for Tab in Python is to insert a Tab character instead of Readline's default 
filename completion function. If you insist, you can override this by putting 
Tab: complete
in your ~/.inputrc. (Of course, this makes it harder to type indented continuation lines if you're 
accustomed to using Tab for that purpose.) 
Automatic completion of variable and module names is optionally available. To enable it in the 
interpreter's interactive mode, add the following to your startup file:A.1 
import rlcompleter, readline
readline.parse_and_bind('tab: complete')
This binds the Tab key to the completion function, so hitting the Tab key twice suggests completions; it 
looks at Python statement names, the current local variables, and the available module names. For dotted 
expressions such as string.a, it will evaluate the expression up to the final "." and then suggest 
completions from the attributes of the resulting object. Note that this may execute application-defined code 
if an object with a __getattr__() method is part of the expression. 
http://www.python.org/doc/2.3.5/tut/node14.html (2 of 4) [7/03/2005 3:07:14 PM]

A. Interactive Input Editing and History Substitution
A more capable startup file might look like this example. Note that this deletes the names it creates once 
they are no longer needed; this is done since the startup file is executed in the same namespace as the 
interactive commands, and removing the names avoids creating side effects in the interactive 
environments. You may find it convenient to keep some of the imported modules, such as os, which turn 
out to be needed in most sessions with the interpreter. 
# Add auto-completion and a stored history file of commands to your Python
# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is
# bound to the Esc key by default (you can change it - see readline docs).
#
# Store the file in ~/.pystartup, and set an environment variable to point
# to it:  "export PYTHONSTARTUP=/max/home/itamar/.pystartup" in bash.
#
# Note that PYTHONSTARTUP does *not* expand "~", so you have to put in the
# full path to your home directory.
import atexit
import os
import readline
import rlcompleter
historyPath = os.path.expanduser("~/.pyhistory")
def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)
if os.path.exists(historyPath):
    readline.read_history_file(historyPath)
atexit.register(save_history)
del os, atexit, readline, rlcompleter, save_history, historyPath
A.4 Commentary 
This facility is an enormous step forward compared to earlier versions of the interpreter; however, some 
wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser 
knows if an indent token is required next). The completion mechanism might use the interpreter's symbol 
table. A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful. 
Footnotes
... file:A.1
Python will execute the contents of a file identified by the PYTHONSTARTUP environment 
variable when you start an interactive interpreter. 
http://www.python.org/doc/2.3.5/tut/node14.html (3 of 4) [7/03/2005 3:07:14 PM]

A. Interactive Input Editing and History Substitution
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: 11. What Now? Up: Python Tutorial Next: B. Floating Point Arithmetic: 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node14.html (4 of 4) [7/03/2005 3:07:14 PM]

B. Floating Point Arithmetic: Issues and Limitations
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: A. Interactive Input Editing Up: Python Tutorial Next: C. History and License 
Subsections 
G     B.1 Representation Error 
B. Floating Point Arithmetic: Issues and 
Limitations 
Floating-point numbers are represented in computer hardware as base 2 (binary) fractions. For 
example, the decimal fraction 
0.125
has value 1/10 + 2/100 + 5/1000, and in the same way the binary fraction 
0.001
has value 0/2 + 0/4 + 1/8. These two fractions have identical values, the only real difference being that 
the first is written in base 10 fractional notation, and the second in base 2. 
Unfortunately, most decimal fractions cannot be represented exactly as binary fractions. A 
consequence is that, in general, the decimal floating-point numbers you enter are only approximated 
by the binary floating-point numbers actually stored in the machine. 
The problem is easier to understand at first in base 10. Consider the fraction 1/3. You can approximate 
that as a base 10 fraction: 
0.3
or, better, 
0.33
or, better, 
0.333
and so on. No matter how many digits you're willing to write down, the result will never be exactly 
http://www.python.org/doc/2.3.5/tut/node15.html (1 of 5) [7/03/2005 3:23:49 PM]

B. Floating Point Arithmetic: Issues and Limitations
1/3, but will be an increasingly better approximation to 1/3. 
In the same way, no matter how many base 2 digits you're willing to use, the decimal value 0.1 cannot 
be represented exactly as a base 2 fraction. In base 2, 1/10 is the infinitely repeating fraction 
0.0001100110011001100110011001100110011001100110011...
Stop at any finite number of bits, and you get an approximation. This is why you see things like: 
>>> 0.1
0.10000000000000001
On most machines today, that is what you'll see if you enter 0.1 at a Python prompt. You may not, 
though, because the number of bits used by the hardware to store floating-point values can vary across 
machines, and Python only prints a decimal approximation to the true decimal value of the binary 
approximation stored by the machine. On most machines, if Python were to print the true decimal 
value of the binary approximation stored for 0.1, it would have to display 
>>> 0.1
0.1000000000000000055511151231257827021181583404541015625
instead! The Python prompt (implicitly) uses the builtin repr() function to obtain a string version of 
everything it displays. For floats, repr(float) rounds the true decimal value to 17 significant digits, 
giving 
0.10000000000000001
repr(float) produces 17 significant digits because it turns out that's enough (on most machines) so 
that eval(repr(x)) == x exactly for all finite floats x, but rounding to 16 digits is not enough to 
make that true. 
Note that this is in the very nature of binary floating-point: this is not a bug in Python, it is not a bug 
in your code either, and you'll see the same kind of thing in all languages that support your hardware's 
floating-point arithmetic (although some languages may not display the difference by default, or in all 
output modes). 
Python's builtin str() function produces only 12 significant digits, and you may wish to use that 
instead. It's unusual for eval(str(x)) to reproduce x, but the output may be more pleasant to look 
at: 
>>> print str(0.1)
0.1
It's important to realize that this is, in a real sense, an illusion: the value in the machine is not exactly 
1/10, you're simply rounding the display of the true machine value. 
http://www.python.org/doc/2.3.5/tut/node15.html (2 of 5) [7/03/2005 3:23:49 PM]

B. Floating Point Arithmetic: Issues and Limitations
Other surprises follow from this one. For example, after seeing 
>>> 0.1
0.10000000000000001
you may be tempted to use the round() function to chop it back to the single digit you expect. But 
that makes no difference: 
>>> round(0.1, 1)
0.10000000000000001
The problem is that the binary floating-point value stored for "0.1" was already the best possible 
binary approximation to 1/10, so trying to round it again can't make it better: it was already as good as 
it gets. 
Another consequence is that since 0.1 is not exactly 1/10, adding 0.1 to itself 10 times may not yield 
exactly 1.0, either: 
>>> sum = 0.0
>>> for i in range(10):
...     sum += 0.1
...
>>> sum
0.99999999999999989
Binary floating-point arithmetic holds many surprises like this. The problem with "0.1" is explained in 
precise detail below, in the "Representation Error" section. See The Perils of Floating Point for a 
more complete account of other common surprises. 
As that says near the end, ``there are no easy answers.'' Still, don't be unduly wary of floating-point! 
The errors in Python float operations are inherited from the floating-point hardware, and on most 
machines are on the order of no more than 1 part in 2**53 per operation. That's more than adequate 
for most tasks, but you do need to keep in mind that it's not decimal arithmetic, and that every float 
operation can suffer a new rounding error. 
While pathological cases do exist, for most casual use of floating-point arithmetic you'll see the result 
you expect in the end if you simply round the display of your final results to the number of decimal 
digits you expect. str() usually suffices, and for finer control see the discussion of Pythons's % 
format operator: the %g, %f and %e format codes supply flexible and easy ways to round float results 
for display. 
B.1 Representation Error 
This section explains the ``0.1'' example in detail, and shows how you can perform an exact analysis 
http://www.python.org/doc/2.3.5/tut/node15.html (3 of 5) [7/03/2005 3:23:49 PM]

B. Floating Point Arithmetic: Issues and Limitations
of cases like this yourself. Basic familiarity with binary floating-point representation is assumed. 
Representation error refers to that some (most, actually) decimal fractions cannot be represented 
exactly as binary (base 2) fractions. This is the chief reason why Python (or Perl, C, C++, Java, 
Fortran, and many others) often won't display the exact decimal number you expect: 
>>> 0.1
0.10000000000000001
Why is that? 1/10 is not exactly representable as a binary fraction. Almost all machines today 
(November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats 
to IEEE-754 "double precision". 754 doubles contain 53 bits of precision, so on input the computer 
strives to convert 0.1 to the closest fraction it can of the form J/2**N where J is an integer containing 
exactly 53 bits. Rewriting 
 1 / 10 ~= J / (2**N)
as 
J ~= 2**N / 10
and recalling that J has exactly 53 bits (is >= 2**52 but < 2**53), the best value for N is 56: 
>>> 2L**52
4503599627370496L
>>> 2L**53
9007199254740992L
>>> 2L**56/10
7205759403792793L
That is, 56 is the only value for N that leaves J with exactly 53 bits. The best possible value for J is 
then that quotient rounded: 
>>> q, r = divmod(2L**56, 10)
>>> r
6L
Since the remainder is more than half of 10, the best approximation is obtained by rounding up: 
>>> q+1
7205759403792794L
Therefore the best possible approximation to 1/10 in 754 double precision is that over 2**56, or 
7205759403792794 / 72057594037927936
http://www.python.org/doc/2.3.5/tut/node15.html (4 of 5) [7/03/2005 3:23:49 PM]

B. Floating Point Arithmetic: Issues and Limitations
Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, 
the quotient would have been a little bit smaller than 1/10. But in no case can it be exactly 1/10! 
So the computer never ``sees'' 1/10: what it sees is the exact fraction given above, the best 754 double 
approximation it can get: 
>>> .1 * 2L**56
7205759403792794.0
If we multiply that fraction by 10**30, we can see the (truncated) value of its 30 most significant 
decimal digits: 
>>> 7205759403792794L * 10L**30 / 2L**56
100000000000000005551115123125L
meaning that the exact number stored in the computer is approximately equal to the decimal value 
0.100000000000000005551115123125. Rounding that to 17 significant digits gives the 
0.10000000000000001 that Python displays (well, will display on any 754-conforming platform that 
does best-possible input and output conversions in its C library -- yours may not!). 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: A. Interactive Input Editing Up: Python Tutorial Next: C. History and License 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node15.html (5 of 5) [7/03/2005 3:23:49 PM]

C. History and License
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: B. Floating Point Arithmetic: Up: Python Tutorial Next: D. Glossary 
Subsections 
G     C.1 History of the software 
G     C.2 Terms and conditions for accessing or otherwise using Python 
C. History and License 
C.1 History of the software 
Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum 
(CWI, see http://www.cwi.nl/) in the Netherlands as a successor of a language called ABC. Guido 
remains Python's principal author, although it includes many contributions from others. 
In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives 
(CNRI, see http://www.cnri.reston.va.us/) in Reston, Virginia where he released several versions of 
the software. 
In May 2000, Guido and the Python core development team moved to BeOpen.com to form the 
BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital 
Creations (now Zope Corporation; see http://www.zope.com/). In 2001, the Python Software 
Foundation (PSF, see http://www.python.org/psf/) was formed, a non-profit organization created 
specifically to own Python-related Intellectual Property. Zope Corporation is a sponsoring member of 
the PSF. 
All Python releases are Open Source (see http://www.opensource.org/ for the Open Source 
Definition). Historically, most, but not all, Python releases have also been GPL-compatible; the table 
below summarizes the various releases. 
Release
Derived from
Year
Owner
GPL compatible?
0.9.0 thru 1.2
n/a
1991-1995
CWI
yes
1.3 thru 1.5.2
1.2
1995-1999
CNRI
yes
1.6
1.5.2
2000
CNRI
no
2.0
1.6
2000
BeOpen.com
no
1.6.1
1.6
2001
CNRI
no
http://www.python.org/doc/2.3.5/tut/node16.html (1 of 6) [7/03/2005 3:24:08 PM]

C. History and License
2.1
2.0+1.6.1
2001
PSF
no
2.0.1
2.0+1.6.1
2001
PSF
yes
2.1.1
2.1+2.0.1
2001
PSF
yes
2.2
2.1.1
2001
PSF
yes
2.1.2
2.1.1
2002
PSF
yes
2.1.3
2.1.2
2002
PSF
yes
2.2.1
2.2
2002
PSF
yes
2.2.2
2.2.1
2002
PSF
yes
2.2.3
2.2.2
2002-2003
PSF
yes
2.3
2.2.2
2002-2003
PSF
yes
2.3.1
2.3
2002-2003
PSF
yes
2.3.2
2.3.1
2003
PSF
yes
2.3.3
2.3.2
2003
PSF
yes
2.3.4
2.3.3
2004
PSF
yes
2.3.5
2.3.4
2005
PSF
yes
Note: GPL-compatible doesn't mean that we're distributing Python under the GPL. All Python 
licenses, unlike the GPL, let you distribute a modified version without making your changes open 
source. The GPL-compatible licenses make it possible to combine Python with other software that is 
released under the GPL; the others don't. 
Thanks to the many outside volunteers who have worked under Guido's direction to make these 
releases possible. 
C.2 Terms and conditions for accessing or 
otherwise using Python 
PSF LICENSE AGREEMENT FOR PYTHON 2.3.5
1.  This LICENSE AGREEMENT is between the Python Software Foundation (``PSF''), and the 
Individual or Organization (``Licensee'') accessing and otherwise using Python 2.3.5 software 
in source or binary form and its associated documentation. 
2.  Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a 
nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or 
display publicly, prepare derivative works, distribute, and otherwise use Python 2.3.5 alone or 
in any derivative version, provided, however, that PSF's License Agreement and PSF's notice 
of copyright, i.e., ``Copyright © 2001-2003 Python Software Foundation; All Rights Reserved'' 
are retained in Python 2.3.5 alone or in any derivative version prepared by Licensee. 
http://www.python.org/doc/2.3.5/tut/node16.html (2 of 6) [7/03/2005 3:24:08 PM]

C. History and License
3.  In the event Licensee prepares a derivative work that is based on or incorporates Python 2.3.5 
or any part thereof, and wants to make the derivative work available to others as provided 
herein, then Licensee hereby agrees to include in any such work a brief summary of the 
changes made to Python 2.3.5. 
4.  PSF is making Python 2.3.5 available to Licensee on an ``AS IS'' basis. PSF MAKES NO 
REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF 
EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY 
REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR 
ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.3.5 WILL NOT 
INFRINGE ANY THIRD PARTY RIGHTS. 
5.  PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 
2.3.5 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS 
AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 
2.3.5, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY 
THEREOF. 
6.  This License Agreement will automatically terminate upon a material breach of its terms and 
conditions. 
7.  Nothing in this License Agreement shall be deemed to create any relationship of agency, 
partnership, or joint venture between PSF and Licensee. This License Agreement does not 
grant permission to use PSF trademarks or trade name in a trademark sense to endorse or 
promote products or services of Licensee, or any third party. 
8.  By copying, installing or otherwise using Python 2.3.5, Licensee agrees to be bound by the 
terms and conditions of this License Agreement. 
BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1
1.  This LICENSE AGREEMENT is between BeOpen.com (``BeOpen''), having an office at 160 
Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization (``Licensee'') 
accessing and otherwise using this software in source or binary form and its associated 
documentation (``the Software''). 
2.  Subject to the terms and conditions of this BeOpen Python License Agreement, BeOpen 
hereby grants Licensee a non-exclusive, royalty-free, world-wide license to reproduce, analyze, 
test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use 
the Software alone or in any derivative version, provided, however, that the BeOpen Python 
License is retained in the Software, alone or in any derivative version prepared by Licensee. 
http://www.python.org/doc/2.3.5/tut/node16.html (3 of 6) [7/03/2005 3:24:08 PM]

C. History and License
3.  BeOpen is making the Software available to Licensee on an ``AS IS'' basis. BEOPEN MAKES 
NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF 
EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY 
REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR 
ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT 
INFRINGE ANY THIRD PARTY RIGHTS. 
4.  BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE 
SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR 
LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, 
OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY 
THEREOF. 
5.  This License Agreement will automatically terminate upon a material breach of its terms and 
conditions. 
6.  This License Agreement shall be governed by and interpreted in all respects by the law of the 
State of California, excluding conflict of law provisions. Nothing in this License Agreement 
shall be deemed to create any relationship of agency, partnership, or joint venture between 
BeOpen and Licensee. This License Agreement does not grant permission to use BeOpen 
trademarks or trade names in a trademark sense to endorse or promote products or services of 
Licensee, or any third party. As an exception, the ``BeOpen Python'' logos available at 
http://www.pythonlabs.com/logos.html may be used according to the permissions granted on 
that web page. 
7.  By copying, installing or otherwise using the software, Licensee agrees to be bound by the 
terms and conditions of this License Agreement. 
CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
1.  This LICENSE AGREEMENT is between the Corporation for National Research Initiatives, 
having an office at 1895 Preston White Drive, Reston, VA 20191 (``CNRI''), and the 
Individual or Organization (``Licensee'') accessing and otherwise using Python 1.6.1 software 
in source or binary form and its associated documentation. 
2.  Subject to the terms and conditions of this License Agreement, CNRI hereby grants Licensee a 
nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or 
display publicly, prepare derivative works, distribute, and otherwise use Python 1.6.1 alone or 
in any derivative version, provided, however, that CNRI's License Agreement and CNRI's 
notice of copyright, i.e., ``Copyright © 1995-2001 Corporation for National Research 
Initiatives; All Rights Reserved'' are retained in Python 1.6.1 alone or in any derivative version 
prepared by Licensee. Alternately, in lieu of CNRI's License Agreement, Licensee may 
substitute the following text (omitting the quotes): ``Python 1.6.1 is made available subject to 
the terms and conditions in CNRI's License Agreement. This Agreement together with Python 
1.6.1 may be located on the Internet using the following unique, persistent identifier (known as 
http://www.python.org/doc/2.3.5/tut/node16.html (4 of 6) [7/03/2005 3:24:08 PM]

C. History and License
a handle): 1895.22/1013. This Agreement may also be obtained from a proxy server on the 
Internet using the following URL: http://hdl.handle.net/1895.22/1013.'' 
3.  In the event Licensee prepares a derivative work that is based on or incorporates Python 1.6.1 
or any part thereof, and wants to make the derivative work available to others as provided 
herein, then Licensee hereby agrees to include in any such work a brief summary of the 
changes made to Python 1.6.1. 
4.  CNRI is making Python 1.6.1 available to Licensee on an ``AS IS'' basis. CNRI MAKES NO 
REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF 
EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY 
REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR 
ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT 
INFRINGE ANY THIRD PARTY RIGHTS. 
5.  CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 
1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS 
AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 
1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY 
THEREOF. 
6.  This License Agreement will automatically terminate upon a material breach of its terms and 
conditions. 
7.  This License Agreement shall be governed by the federal intellectual property law of the 
United States, including without limitation the federal copyright law, and, to the extent such 
U.S. federal law does not apply, by the law of the Commonwealth of Virginia, excluding 
Virginia's conflict of law provisions. Notwithstanding the foregoing, with regard to derivative 
works based on Python 1.6.1 that incorporate non-separable material that was previously 
distributed under the GNU General Public License (GPL), the law of the Commonwealth of 
Virginia shall govern this License Agreement only as to issues arising under or with respect to 
Paragraphs 4, 5, and 7 of this License Agreement. Nothing in this License Agreement shall be 
deemed to create any relationship of agency, partnership, or joint venture between CNRI and 
Licensee. This License Agreement does not grant permission to use CNRI trademarks or trade 
name in a trademark sense to endorse or promote products or services of Licensee, or any third 
party. 
8.  By clicking on the ``ACCEPT'' button where indicated, or by copying, installing or otherwise 
using Python 1.6.1, Licensee agrees to be bound by the terms and conditions of this License 
Agreement. 
ACCEPT
CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
http://www.python.org/doc/2.3.5/tut/node16.html (5 of 6) [7/03/2005 3:24:08 PM]

C. History and License
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The Netherlands. All rights 
reserved. 
Permission to use, copy, modify, and distribute this software and its documentation for any purpose 
and without fee is hereby granted, provided that the above copyright notice appear in all copies and 
that both that copyright notice and this permission notice appear in supporting documentation, and 
that the name of Stichting Mathematisch Centrum or CWI not be used in advertising or publicity 
pertaining to distribution of the software without specific, written prior permission. 
STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD 
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE 
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: B. Floating Point Arithmetic: Up: Python Tutorial Next: D. Glossary 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node16.html (6 of 6) [7/03/2005 3:24:08 PM]

D. Glossary
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: C. History and License Up: Python Tutorial Next: Index 
D. Glossary 
>>>
The typical Python prompt of the interactive shell. Often seen for code examples that can be 
tried right away in the interpreter. 
...
The typical Python prompt of the interactive shell when entering code for an indented code 
block. 
BDFL
Benevolent Dictator For Life, a.k.a. Guido van Rossum, Python's creator. 
byte code
The internal representation of a Python program in the interpreter. The byte code is also cached 
in the .pyc and .pyo files so that executing the same file is faster the second time 
(compilation from source to byte code can be saved). This ``intermediate language'' is said to 
run on a ``virtual machine'' that calls the subroutines corresponding to each bytecode. 
classic class
Any class which does not inherit from object. See new-style class. 
coercion
Converting data from one type to another. For example, int(3.15) coerces the floating 
point number to the integer, 3. Most mathematical operations have rules for coercing their 
arguments to a common type. For instance, adding 3+4.5, causes the integer 3 to be coerced 
to be a float 3.0 before adding to 4.5 resulting in the float 7.5. 
descriptor
Any new-style object that defines the methods __get__(), __set__(), or 
__delete__(). When a class attribute is a descriptor, its special binding behavior is 
triggered upon attribute lookup. Normally, writing a.b looks up the object b in the class 
dictionary for a, but if b is a descriptor, the defined method gets called. Understanding 
descriptors is a key to a deep understanding of Python because they are the basis for many 
features including functions, methods, properties, class methods, static methods, and reference 
to super classes. 
dictionary
An associative array, where arbitrary keys are mapped to values. The use of dict much 
http://www.python.org/doc/2.3.5/tut/node17.html (1 of 5) [7/03/2005 3:24:32 PM]

D. Glossary
resembles that for list, but the keys can be any object with a __hash__() function, not 
just integers starting from zero. Called a hash in Perl. 
EAFP
Easier to ask for forgiveness than permission. This common Python coding style assumes the 
existence of valid keys or attributes and catches exceptions if the assumption proves false. This 
clean and fast style is characterized by the presence of many try and except statements. 
The technique contrasts with the LBYL style that is common in many other languages such as 
C. 
__future__
A pseudo module which programmers can use to enable new language features which are not 
compatible with the current interpreter. For example, the expression 11/4 currently evaluates 
to 2. If the module in which it is executed had enabled true division by executing: 
from __future__ import division
the expression 11/4 would evaluate to 2.75. By actually importing the __future__ 
module and evaluating its variables, you can see when a new feature was first added to the 
language and when it will become the default: 
>>> import __future__
>>> __future__.division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
generator
A function that returns an iterator. It looks like a normal function except that the yield 
keyword is used instead of return. Generator functions often contain one or more for or 
while loops that yield elements back to the caller. The function execution is stopped at the 
yield keyword (returning the result) and is resumed there when the next element is requested 
by calling the next() method of the returned iterator. 
GIL
See global interpreter lock. 
global interpreter lock
The lock used by Python threads to assure that only one thread can be run at a time. This 
simplifies Python by assuring that no two processes can access the same memory at the same 
time. Locking the entire interpreter makes it easier for the interpreter to be multi-threaded, at 
the expense of some parallelism on multi-processor machines. Efforts have been made in the 
past to create a ``free-threaded'' interpreter (one which locks shared data at a much finer 
granularity), but performance suffered in the common single-processor case. 
IDLE
An Integrated Development Environment for Python. IDLE is a basic editor and interpreter 
http://www.python.org/doc/2.3.5/tut/node17.html (2 of 5) [7/03/2005 3:24:32 PM]

D. Glossary
environment that ships with the standard distribution of Python. Good for beginners, it also 
serves as clear example code for those wanting to implement a moderately sophisticated, multi-
platform GUI application. 
immutable
A object with fixed value. Immutable objects are numbers, strings or tuples (and more). Such 
an object cannot be altered. A new object has to be created if a different value has to be stored. 
They play an important role in places where a constant hash value is needed. For example as a 
key in a dictionary. 
integer division
Mathematical division discarding any remainder. For example, the expression 11/4 currently 
evaluates to 2 in contrast to the 2.75 returned by float division. Also called floor division. 
When dividing two integers the outcome will always be another integer (having the floor 
function applied to it). However, if one of the operands is another numeric type (such as a 
float), the result will be coerced (see coercion) to a common type. For example, a integer 
divided by a float will result in a float value, possibly with a decimal fraction. Integer division 
can be forced by using the // operator instead of the / operator. See also __future__. 
interactive
Python has an interactive interpreter which means that you can try out things and directly see 
its result. Just launch python with no arguments (possibly by selecting it from your 
computer's main menu). It is a very powerful way to test out new ideas or inspect modules and 
packages (remember help(x)). 
interpreted
Python is an interpreted language, opposed to a compiled one. This means that the source files 
can be run right away without first making an executable which is then run. Interpreted 
languages typically have a shorter development/debug cycle than compiled ones. See also 
interactive. 
iterable
A container object capable of returning its members one at a time. Examples of iterables 
include all sequence types (such as list, str, and tuple) and some non-sequence types 
like dict and file and objects of any classes you define with an __iter__() or 
__getitem__() method. Iterables can be used in a for loop and in many other places 
where a sequence is needed (zip(), map(), ...). When an iterable object is passed as an 
argument to the builtin function iter(), it returns an iterator for the object. This iterator is 
good for one pass over the set of values. When using iterables, it is usually not necessary to 
call iter() or deal with iterator objects yourself. The for statement does that automatically 
for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop. 
See also iterator, sequence, and generator. 
iterator
An object representing a stream of data. Repeated calls to the iterator's next() method return 
http://www.python.org/doc/2.3.5/tut/node17.html (3 of 5) [7/03/2005 3:24:32 PM]

D. Glossary
successive items in the stream. When no more data is available a StopIteration exception 
is raised instead. At this point, the iterator object is exhausted and any further calls to its 
next() method just raise StopIteration again. Iterators are required to have an 
__iter__() method that returns the iterator object itself so every iterator is also iterable and 
may be used in most places where other iterables are accepted. One notable exception is code 
that attempts multiple iteration passes. A container object (such as a list) produces a fresh 
new iterator each time you pass it to the iter() function or use it in a for loop. Attempting 
this with an iterator will just return the same exhausted iterator object from the second iteration 
pass, making it appear like an empty container. 
list comprehension
A compact way to process all or a subset of elements in a sequence and return a list with the 
results. result = ["0x%02x" % x for x in range(256) if x % 2 == 0] 
generates a list of strings containing hex numbers (0x..) that are even and in the range from 0 to 
255. The if clause is optional. If omitted, all elements in range(256) are processed in that 
case. 
mapping
A container object (such as dict) that supports arbitrary key lookups using the special 
method __getitem__(). 
metaclass
The class of a class. Class definitions create a class name, a class dictionary, and a list of base 
classes. The metaclass is responsible for taking those three arguments and creating the class. 
Most object oriented programming languages provide a default implementation. What makes 
Python special is that it is possible to create custom metaclasses. Most users never need this 
tool, but when the need arises, metaclasses can provide powerful, elegant solutions. They have 
been used for logging attribute access, adding thread-safety, tracking object creation, 
implementing singletons, and many other tasks. 
LBYL
Look before you leap. This coding style explicitly tests for pre-conditions before making calls 
or lookups. This style contrasts with the EAFP approach and is characterized the presence of 
many if statements. 
mutable
Mutable objects can change their value but keep their id(). See also immutable. 
namespace
The place where a variable is stored. Namespaces are implemented as dictionary. There is the 
local, global and builtins namespace and the nested namespaces in objects (in methods). 
Namespaces support modularity by preventing naming conflicts. For instance, the functions 
__builtin__.open() and os.open() are distinguished by their namespaces. 
Namespaces also aid readability and maintainability by making it clear which modules 
implement a function. For instance, writing random.seed() or itertools.izip() 
http://www.python.org/doc/2.3.5/tut/node17.html (4 of 5) [7/03/2005 3:24:32 PM]

D. Glossary
makes it clear that those functions are implemented by the random and itertools modules 
respectively. 
nested scope
The ability to refer to a variable in an enclosing definition. For instance, a function defined 
inside another function can refer to variables in the outer function. Note that nested scopes 
work only for reference and not for assignment which will always write to the innermost scope. 
In contrast, local variables both read and write in the innermost scope. Likewise, global 
variables read and write to the global namespace. 
new-style class
Any class that inherits from object. This includes all built-in types like list and dict. 
Only new-style classes can use Python's newer, versatile features like __slots__, 
descriptors, properties, __getattribute__(), class methods, and static methods. 
Python3000
A mythical python release, allowed not to be backward compatible, with telepathic interface. 
__slots__
A declaration inside a new-style class that saves memory by pre-declaring space for instance 
attributes and eliminating instance dictionaries. Though popular, the technique is somewhat 
tricky to get right and is best reserved for rare cases where there are large numbers of instances 
in a memory critical application. 
sequence
An iterable which supports efficient element access using integer indices via the 
__getitem__() and __len__() special methods. Some built-in sequence types are 
list, str, tuple, and unicode. Note that dict also supports __getitem__() and 
__len__(), but is considered a mapping rather than a sequence because the lookups use 
arbitrary immutable keys rather than integers. 
Zen of Python
Listing of Python design principles and philosophies that are helpful in understanding and 
using the language. The listing can be found by typing ``import this'' at the interactive 
prompt. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: C. History and License Up: Python Tutorial Next: Index 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node17.html (5 of 5) [7/03/2005 3:24:32 PM]

About this document ...
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: Index Up: Python Tutorial 
About this document ... 
Python Tutorial, February 8, 2005, Release 2.3.5 
This document was generated using the LaTeX2HTML translator. 
LaTeX2HTML is Copyright © 1993, 1994, 1995, 1996, 1997, Nikos Drakos, Computer Based 
Learning Unit, University of Leeds, and Copyright © 1997, 1998, Ross Moore, Mathematics 
Department, Macquarie University, Sydney. 
The application of LaTeX2HTML to the Python documentation has been heavily tailored by Fred L. 
Drake, Jr. Original navigation icons were contributed by Christopher Petrilli. 
Comments and Questions
General comments and questions regarding this document should be sent by email to 
docs@python.org. If you find specific errors in this document, either in the content or the 
presentation, please report the bug at the Python Bug Tracker at SourceForge. If you are able to 
provide suggested text, either to replace existing incorrect or unclear material, or additional text to 
supplement what's already available, we'd appreciate the contribution. There's no need to worry about 
text markup; our documentation team will gladly take care of that. 
Questions regarding how to use the information in this document should be sent to the Python news 
group, comp.lang.python, or the Python mailing list (which is gated to the newsgroup and carries the 
same content). 
For any of these channels, please be sure not to send HTML email. Thanks. 
Previo
Page
Up 
One
Next 
Page
Python Tutorial
Conte
Index
Previous: Index Up: Python Tutorial 
Release 2.3.5, documentation updated on February 8, 2005. 
See About this document... for information on suggesting changes. 
http://www.python.org/doc/2.3.5/tut/node19.html [7/03/2005 3:24:54 PM]

