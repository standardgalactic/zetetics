DO PARTICLES EVOLVE?
TOMMASO BOLOGNESI
Abstract. After some reﬂection on the messages that I have found most inspiring
in Wolfram’s NKS book, ten years after its publication, in this paper I speculate on
a few, highly attractive new developments that NKS-style experimental research
might undergo, and that I have myself begun to explore in recent years. According
to these visions, the grand challenge that the emergent, localized structures of
elementary automaton 110, or similar ’particles’, must face in the next ten years
is to evolve into populations of increasingly complex individuals, up to forms of
(artiﬁcial) life, and to a fully blown biosphere.
On a more technical side, the paper illustrates some preliminary steps and re-
sults in the application of Genetic Algorithms to variants of Wolfram’s Network
Mobile Automata; the objective here is to investigate the emergent qualitative and
quantitative properties of the causal sets associated to the automata computations,
in view of their potential application as discrete models of physical spacetime.
1. Introduction
Ten years have passed since the interacting ’artiﬁcial particles’ of elementary cellu-
lar automaton n. 110 have started ﬂickering from the cover of the NKS book, sending
puzzling signals to the scientiﬁc community and the general public, and raising con-
troversy as to the role that this type of phenomena should play between recreational
mathematics and theoretical physics.
What are the most inspiring contributions from the 1197 pages of the NKS volume?
Starting in 2005, I have met several readers of the book, also due to my involvement
with various editions of the NKS Summer School. Many of them would point to
a speciﬁc chapter, but a surprisingly high number of readers would go as far as
providing exact page numbers for their favorite passages or pictures. However, if I
am to single out the thing that I found most stimulating and inﬂuential for my work,
I would indicate the very spirit and investigation attitude that pervades all of its
components.
This attitude has been sometimes compared to that of an entomologist, who pa-
tiently and carefully observes and classiﬁes the variety of shapes and phenomena
occurring in a speciﬁc corner of the universe; the diﬀerence is that the universe ex-
plored by NKS is the computational one, and the studied insects are the free, spon-
taneous computations of simple programs. Observing, naming, classifying things in
1

2
TOMMASO BOLOGNESI
the universe are the primordial cognitive activities of homo sapiens: NKS transposes
these attitudes, most directly, to the study of another universe, based on the bold
conjecture that the two universes might coincide.
And one feeling that comes with these activities is pleasure. The impressive array
of plots for the countless computational experiments carried out in [25] is indeed
permeated by the pleasure of discovery. This is tangible, for example, in the series
of plots for Elementary Cellular Automaton (ECA) 30, at pages 27-30, or in the
longer series at pages 32-38, for ECA 110, that manage to convey the excitement of
progressively disclosing the pseudo-randomness and the interacting localized particles
of the two most celebrated members of the ECA family.
Exhaustive enumeration, simulation and visual inspection of the space of sponta-
neous computations, with a clear mind, free of expectations, are fundamental exper-
imental activities in the NKS approach, and their primary objective is just to see
what happens; this is best represented by the ECA tables at pages 54-56, and is nicely
reﬂected in a reported dialogue between Richard Feynman and Stephen Wolfram:
- ’How did you know in advance that, out of 256 automata, n. 30 would behave
pseudo-randomly’?
- ’I didn’t; I ran them all’!
One experiences a progression of excitement levels, in moving from the predictabil-
ity of class 1 behaviors to the surprises found in class 4. Needless to say, precious
gems are very rare, and this makes their discovery particularly gratifying. Having
myself compiled hundreds of tables analogous to those just mentioned, for various
other models of computation, I reproduce in Figure 1, without providing details (see
[2]), one that well reﬂects the amount of inspiration that I have derived from NKS,
and the excitement that comes from spotting a gem (e.g. the plot for computation
(17, 8)) among pebbles.
The most ambitious among the NKS experimental activities and goals is sometimes
called ’universe hunting’: ﬁnding the ultimate, digital code of nature. The barrier of
computational irreducibility makes it impossible to predict the steps of an evolving,
digital universe, other than in real time, i.e., as it evolves. Hence, any computational
theory of the physical universe would fail to eﬃciently predict the evolution of the
universe, as a whole, and in full detail; but it could always be used for simulating its
infancy, in search for emergent features and entities that might have played some role
in building up our mature, 13-billion year universe, or that might have even reached
us, unchanged, across this huge time span.
So, what kind of gems might we expect to see emerge from universe hunting exper-
iments in the next ten years? Although the NKS lesson is to carry out computational
Big-Bang experiments without predeﬁned expectations, in Section 2 I provide a wish
list of phenomena whose emergence would represent a strong indication of the validity
of the approach.

DO PARTICLES EVOLVE?
3
Figure 1. Plots showing the dynamics of an ant moving on a planar
trivalent graph according to the algorithm described in [2]. The ant
behavior depends on two parameters, ranging, respectively, in 1-18
(rows) and 1-9 (columns).

4
TOMMASO BOLOGNESI
More concretely, Section 3 illustrates an application of Genetic Algorithms to
Network Mobile Automata, meant to bias the evolution of these automata and assess
their potential applicability to the discrete modeling of spacetime.
2. Particle evolution
The interest for the localized structures of ECA 110, in the context of a computation-
oriented, fundamental theory of physics, depends on two facts: (i) they are strongly
reminiscent of scattering phenomena and diagrams from particle physics; (ii) they
can be used for performing Turing-complete computations. It seems therefore natu-
ral to consider these particles as an encouraging clue for a theory that tries to relate
complexity in physics with emergence in computation, and to take them as a starting
point for developing such a theory.
More precisely, if we accept the idea of a physical universe organized as a layered
architecture of emergence, fueled by a simple computation at the bottom [7], we may
wonder whether further layers of increased complexity can be found on top of some
layer of simple (artiﬁcial) particles. Note that, when referring to ’particles’, I am not
restricting to the localized structures of cellular automata. Similar phenomena are
also observed with other models (two-dimensional Turing machines, or turmites, are
just one example [20, 21]), or in the causal sets derived from their computations [6].
In particular, the localized structures observed in a causal set can be interpreted as
trajectories across spacetime, or particle worldlines.
In the sequel I speculate on a number of possible evolved forms of artiﬁcial particle;
their appearance might contribute to the creation of an artiﬁcial universe of growing
complexity, as close as possible (if not identical!) to our universe.
2.1. Soft vs. hard particles. Consider one of the trajectories that traverse an ECA
110 diagram. It is formed by a periodic pattern of black and white cells that moves
in time (vertically), and often in space (horizontally). When it translates in space,
the localized pattern repeats every few rows, being formed, each time, by a diﬀerent
set of a few adjacent cells: the pattern moves, the cells don’t.
But in other models of computation, the elements of the memory support may
themselves move around. For example, in the Trinet Mobile Automata to be dis-
cussed in the next section, the support is a dynamic planar graph whose polygonal
faces are modiﬁed during the computation. A typical face update consists in increas-
ing or decreasing by one unit the number of sides, and in this game, faces that are
adjacent at some moment, drift apart later on. Think of a face as corresponding
to an ECA cell, and of the face size (number of sides) as corresponding to the cell
state (a bit). Then, in a computation, formed by a sequence of graph conﬁgurations,
in principle we may observe two types of particle, which, in the absence of better
names, I call ’soft’ and ’hard’:

DO PARTICLES EVOLVE?
5
Soft particles: equivalent to the ECA particles, these are persistent periodic
patterns that move around, but are formed by ever changing underlying faces;
Hard particles: these are groups of faces that persistently stick together and
move around while undergoing cyclic shape changes.
For visualizing the idea of dynamic, planar trivalent graphs, and of a face that moves
around while changing its shape, it may be useful to consider Voronoi diagrams.
By using the interactive demonstration in [22], the interested reader can actually
create, destroy, or carry around, under the mouse cursor, a face of a random Voronoi
diagram, while observing that all these operations correspond to the application of
simple graph-rewrite rules (Pachner moves).
In [4, 6] I report about the emergence of some periodic trajectories in the causets
of various models, but without relating these structures with the elements of the
underlying memory support, which is the key for discriminating between the two
types of particle. The search for soft particles, in particular, is computationally quite
costly, but being able to detect them might reveal complex interaction scenarios that,
so far, have only been observed with the (soft) particles of Cellular Automata.
2.2. Stateful particles. The outcome of the interactions between two ECA 110 par-
ticles depends on the precise phase by which they collide, as illustrated in [25] (pp.
294-295) – a circumstance that contributes to the richness of interaction scenarios
but makes it particularly hard to control these structures for speciﬁc computational
purposes. Complex interactions could also be observed among particles whose be-
havior depends on some form of internal state: the idea is to move from stateless
particles to stateful agents.
Systems of stateful entities that interact by various mechanisms – by sharing mem-
ory locations or by exchanging messages via an ether or via dedicated channels – are
pervasive in computer science. Examples include Actors [12, 1], and process calculi
such as CCS [17] and CSP [13]. Although these models have been primarily con-
ceived for providing formal foundations to concurrent programming or speciﬁcation
languages, they identify the general features of concurrency, (massive) parallelism,
interaction and communication, at such a high abstraction level that they become
applicable also to natural systems in which those features are of relevance.
The gap between the relatively simple artiﬁcial, computational particles observed
so far, and the concept of stateful agent, is huge. However, in a theory that con-
ceives physical objects and their background as made of the same fabric, in which
both are obtained from the dynamic geometry of spacetime, a useful condition for
the emergence of advanced, stateful entities would be the appearance of ’shells’ that
encapsulate small regions of that fabric, separating a small inside from a large out-
side, an active object from a (relatively) passive background. Similar to a selectively

6
TOMMASO BOLOGNESI
permeable cell membrane, this closed surface would favor the persistence of the local-
ized structure, promote some internal state stability, and regulate interactions with
the environment. 1 In [6] I identify a ﬁrst rudimentary form of this ’causet com-
partmentation’ phenomenon, and I argue that it can only occur with deterministic,
algorithmic (as opposed to stochastic) causal sets.
2.3. Self modifying code. In a review of the NKS book, appearing in the Web,
Ray Kurzweil writes:
”Ultimately, the patterns are not that complex. They’re all kind of
similar and too low-level to explain the evolution of higher levels of
intelligence.”
After much experimental evidence from [25], we accept the idea that the iteration
of simple rules can originate complex and unpredictable phenomena, but could these
include a living cell? Several layers of emergence should be required for that; can they
all originate from a ﬁxed, initial set of rules? After about ﬁve years of experience
with various formal systems, in particular with graph rewriting, I am becoming
increasingly convinced that a big step ahead could be made if we allowed the rules
themselves to take part into the evolutionary process, rather than having them ﬁxed
in advance.
Indeed, most scientists would probably look more favourably at a scenario in which
physical laws emerge as the universe unfolds from the Big Bang, rather than one that
attributes an absolute, transcendental status to those laws, placing them in Plato’s
hyperuranium. At least, this is the position expressed by eminent physicist John A.
Wheeler, with his famous concept of ’Law Without Law’, and with the idea that
”Proud unbending immutability is a mistaken ideal for physics; this
science now shares, and must forever share, the more modest mutabil-
ity of its sister sciences, biology and geology”.
The idea of a self-modifying program is, again, quite familiar in computer science.
In logic programming, for example, a program can modify itself by absorbing new
facts and rules during execution, realizing, in a way, a process of learning from expe-
rience. Note, however, that the execution of a self-modifying program is supported
by software (compiler, interpreter, operating system) and hardware that are not self-
modifying at all: this induces us to take a closer look at the idea that the program
fueling the universe from the bottom (if any) be a self-modifying piece of code.
For ﬁxing ideas, let that program be expressed as a Turing machine Y . We actually
don’t know what it formally means for Y to be self-modifying, since a Turing machine
can only access its tape, not its own state transition table. On the other hand, we
1Highly persistent structures can be observed in 2-D cellular automata, e.g. the ’iceballs’ of Ice
Nine: http://www.collidoscope.com/modernca/icenine.html

DO PARTICLES EVOLVE?
7
can simulate Y on some standard (not self-modifying!) universal Turing machine
X, and do more: we can program X so that it progressively changes the behavior
(the state transition rules) of Y as the simulated computation proceeds. In this case,
though, the role of animating the universe would be ultimately attributed to X – a
ﬁxed behavior – not to Y !
In conclusion, even if novel and increasingly complex particle types were to emerge
from Turing machines with dynamically changing behavior, such interesting cases
could as well be found by exploring the space of ’spontaneous’ computations of
standard, not self-modifying, universal Turing machines.
Does this make the idea of self-modifying rules useless? Yes, in principle; but not in
practice. The chances that a randomly chosen machine X actually implemented the
scenario of a simulated machine Y with dynamically changing rules are prohibitively
small. Thus, rather than waiting for cosmological times for this to happen, we could
more pragmatically set up NKS-style experiments in which we explicitly implement
various policies for changing the rules of the game, as the game unfolds.
2.4. Ant multiplication. At p. 486 of [25], Wolfram writes:
”At ﬁrst it may seem bizarre, but one possibility that I believe is
ultimately not too far from correct is that the universe might work not
like a cellular automaton in which all cells get updated at once, but
instead like a mobile automaton or Turing machine, in which just a
single cell gets updated at each step”.
Since in Turing machines and Mobile Automata the computation is carried out by a
control unit that walks, like a little ant, on a memory support – typically a binary
tape – we may refer to the bold idea above as the ’Touring Ant Universe (TAU)
conjecture’. Most of the computational experiments described in [2, 3, 4, 6] refer to
a form of Network Mobile Automata based on a stateless ant (to be discussed later),
and are ultimately meant to investigate the TAU conjecture.
The idea of a Cosmos run by a memoryless ant is quite appealing; if true, if would
represent a stupendously simple theory of everything. But, again, can we expect
the whole layered architecture of our universe to emerge from the tireless work of
a single ant, or should we rather think of multiple agents, with the expectation to
obtain additional complexity from their collective operation?
With experiments on Generalized Mobile Automata [25], a model in which ants
are allowed to reproduce, Wolfram has found that complex behavior is more likely
to emerge when several such agents are simultaneously active.

8
TOMMASO BOLOGNESI
On more theoretical grounds, Carl Hewitt shows that the paradigm of multiple,
concurrent agents extends the notion of computation beyond Turing machines, prov-
ing that there are eﬀective computations that can be performed by the already men-
tioned Actor model [12, 1], and not by Turing machines: Actors can implement
unbounded nondeterminism, Turing machines can’t [11].
There are therefore good reasons for exploring ’multiple-ant’ systems, in the con-
text of the computing universe conjecture. Indeed, this makes sense regardless of
whether we assume a single agent (a TAU model) or a collection of agents (inspired,
say, by the Actor model) as the ultimate, primitive mechanism operating at the
root. In the ﬁrst case, the rationale behind the experiments would be to skip the
ﬁrst phases of evolution, and to assume that they might lead to the hypothetical,
multiple-agent intermediate layer at which we decide to start the simulation.
2.5. Collectively autocatalytic systems of particles. In [15] Kauﬀman elabo-
rates the hypothesis that darwinian natural selection may not be the only source of
order in the biosphere. The other source might be self-organization: life might derive
from the spontaneous emergence of collectively autocatalytic systems of molecules. In
essence, once a suﬃciently large variety of molecules is allowed to interact and react
in a primordial soup, it is almost inevitable that a subset of them ’take power’: these
molecules are at the same time the product and the catalysts of their reactions, and
the group achieves a stationary regime representing a primitive form of self-sustaining
metabolism. The beauty of this theory is in the simplicity of the underlying mecha-
nism: the ’order for free’ in the molecule soup is directly related to the well known
phase transition that leads, in random graphs, to the formation of a giant connected
component, as studied by Erd¨os.
We see no reason why this simple, abstract mechanism from random graph theory
should not play a role also for a suﬃciently variegated population of (soft or hard,
stateless or stateful) particles, once these exhibit an ability to interact, combine,
split, and perhaps even promote such events, as enzymes do.
3. Evolving ants
The most ambitious form of computational universe conjecture suggests that a
simple program, starting from simple initial conditions, is suﬃcient for originating a
universe so complex as to host, for example, human intelligence. The huge complexity
gap between the initial seed and the ﬁnal result becomes much more tractable if
we assume the already mentioned layered architecture of emergence, in which the
emergent objects and behaviors of each layer, characterized by their own laws, provide
the primitives for the emergence of the objects, behaviors and associated laws at the
upper layer.

DO PARTICLES EVOLVE?
9
Note that the layered architecture concept can be understood to refer both to a
sequence of actual evolutionary steps in the history of the physical universe, and
to the way scientiﬁc theories reﬁne one another. Regardless of which interpretation
we choose (and they are not mutually exclusive), one way to avoid or mitigate the
diﬃculties involved with ’pure’ universe hunting – that means jumping directly to
the bottom – is to start from some intermediate level of evolution: one imagines and
explicitly introduces ad-hoc features in the investigated models, trying to anticipate
what might have emerged from yet unknown lower layers, and ﬁnds out about the
emergent phenomena that such features might trigger in the upper layers. Most
of the visions about particle evolution presented in the previous section ﬁt into this
picture: we could manage to actually obtain them as the ﬁnal outcome of a simulated
evolutionary path, starting from more elementary particles, or we could take them
as initial, hypothetical conditions, and explore their consequences.
An eﬀective way to speed-up the emergence of some speciﬁc property and to iden-
tify interesting intermediate levels of evolution, is oﬀered by Genetic Algorithms.
In my most recent experiments I have indeed started using them for identifying
Trinet Mobile Automata whose computations provide causets (spacetime instances)
of maximized dimensionality. Let us quickly survey the introduced concepts.
3.1. A ’touring ant’ model: Trinet Mobile Automata (TMA). In Trinet Mo-
bile Automata (TMA), a stateless control head, or ant, moves on a trinet, which is an
undirected trivalent graph – one in which each node has three incident, undirected
edges. The ant moves by short steps, each time applying some graph-rewrite rule
before moving to the next location. I adopt well known graph rewrite rules, namely
the 2-D Pachner moves sometimes called Expand, Contract and Exchange, that ﬁnd
application also in Loop Quantum Gravity (see, e.g., [16]). Usually the initial condi-
tion is a trinet consisting of two nodes connected by three parallel arcs, reminiscent
of the φ greek letter; this is the smallest possible three-connected graph. 2
In one TMA variant, qualiﬁed as threshold-based [2], the ant behavior is fully
determined by the parameter triple (threshold, expandCode, exchangeCode). The ant
is initially positioned on an edge of the φ-graph; it applies rule Exchange whenever
this does not create trinet faces smaller than a ﬁxed threshold (for this purpose, it
is indeed suﬃcient to monitor the two faces sharing the current edge); otherwise it
applies rule Expand. Then, depending on the applied rule, the ant moves to a next
location, which is deﬁned, relative to its current position, by parameters expandCode
and exchangeCode, respectively (see [2] for details).
The Turing machine is another touring ant model, except that the ant moves on
a tape and has an internal state.
2A connected graph is n-connected when n is the minimum number of edges one has to remove
in order to disconnect it.

10
TOMMASO BOLOGNESI
3.2. Causal sets (’causets’) and their dimensionality. The Causal Set Program
is an approach to quantum gravity suggesting that, at the smallest scales, spacetime
is best described in terms of the simple, discrete mathematical structure of causal
sets [9, 23, 24, 10].
A causal set (or ’causet’) can be conveniently represented by a directed graph with
no cycles, in which nodes represent spacetime events, the number of nodes in a sub-
graph deﬁnes the volume of a corresponding spacetime region, and the order relation
deﬁnes the causal dependencies among events (in the continuum, these relations are
usually described in terms of lightcones).
In the Causal Set Program, various probabilistic techniques have been investigated
for building causets, e.g. sprinkling [24], or transitive percolation [23]. As an alterna-
tive, in our recent work we have started exploring deterministic techniques, based on
the idea that more interesting qualitative and quantitative properties should emerge
with algorithmic causets [4, 6].
A property of great physical relevance for a causet is its dimensionality. Various
techniques are available for estimating the dimensionality of a graph [19], and often
their outcomes do not agree. Node-shell-growth analysis, used by Wolfram in [25], is
based on detecting the growth rate of the node shells at progressive distance r from
a ﬁxed node: a growth rate of the order of rk, with k ≥1 and possibly noninteger,
reﬂects a dimension k +1. In [8] we have in particular compared the Myrheim-Meyer
dimension estimation technique [24], commonly used in the Causal Set Program, with
the node-shell-growth technique, pointing out their diﬀerences in terms of outcome
and applicability.
3.3. Deriving causets from TMA computations. The objective of my recent
work [5, 4, 6, 8] has been to investigate the emergent qualitative and quantitative
properties of the causets associated with the computations of various models, in-
cluding TMA, in light of their potential applicability to the modeling of physical
spacetime. The basic idea for deriving a causal set from a generic sequential com-
putation is simple: each computation step becomes an event (node) in the causet,
and a causal link is created from event ei to event ej whenever the latter reads a
global state component that was written by the former. In concurrent models such
as Actors [12, 1], no notion of global state is available, but partial orders of events
are even more easily obtained, being essentially built into the model.
3.4. Genetic Algorithms (GA) for TMA. The GA approach, ﬁrst proposed by
John Holland in [14], is meant to identify programs that are ﬁttest for achieving some
predeﬁned goal. The approach is quite directly modeled on the darwinian mecha-
nisms of natural selection and evolution, and can be very eﬀective in solving problems
that are hard to address with traditional engineering approaches. An example of GA

DO PARTICLES EVOLVE?
11
application in the context of cellular automata, called ’majority classiﬁcation’, is pro-
vided in [18]; the uninitiated reader can ﬁnd in it a convenient, quick introduction
to the technique. Below we identify the key elements of the GA approach, while in-
stantiating them to our case of interest – that of obtaining high dimensional causets
from TMA computations.
Individual: an instance of a program, whose behavior can be fully coded by a
genome. In our application, an individual is an instance of a Trinet Mobile
Automaton.
Population, or generation: a collection of individuals. We have considered
populations of 100 mobile automata each.
Situation: a conﬁguration of the global state of the program/individual, or the
part of it which is relevant for determining the next computation step, i.e. the
reaction. Much freedom is available, and much creativity possible in conceiv-
ing TMA situations. In the above mentioned, threshold-based TMA model
[2], in which planar trinets are handled, only two situations were considered,
corresponding to whether or not at least one of the two trinet faces shar-
ing the current edge (where the ant is positioned) has less than a threshold
number of sides.
Conceiving a reduced number of situations, and restricting the range of cor-
responding ant reactions, is useful for reducing the space of model instances
to a manageable size, in view of its exhaustive exploration. But, with the GA
approach, model space size is not a big concern, since evolution will ﬁnd its
own path across that space, ignoring large portions of it, and heading towards
the regions with the ﬁttest individuals. In fact, working with a larger space
may increase the chances of ﬁnding interesting individuals. Thus, in this new
GA experiment the situation is deﬁned by the ordered triple:
(size(f1), size(f2), size(f3))
of sizes (number of edges) of the three faces incident to the current trinet
node – the node that the ant is facing. We have considered a range of 7
possibilities for face sizes: 2, 3, ..., 7, 8+, where ’8+’ refers to a face with 8
or more sides. In conclusion, the ant distinguishes among 73 = 343 possible
situations.
Reaction: the state change performed by the individual based on the current
situation. In these GA experiments with TMA I have preserved the reaction
policies of my previous experiments: the ant reacts to its current situation
by choosing and applying graph rewrite rule Expand or Exchange, and by
moving to one among 18 possible next locations in the neighborhood. In
conclusion, the ant may react to a situation in 2 ∗18 = 36 possible ways.

12
TOMMASO BOLOGNESI
Genome: a function that associates a reaction to every possible situation:
genome : Situations →Reactions
Each individual behaves according to its own genome. In light of the above
deﬁnitions, the number of possible TMA genomes, i.e. diﬀerent individuals,
is 36343, which is close to 10534 – a space size completely incompatible with
exhaustive search.
Fitness: a function that evaluates an individual’s performance with respect to
its intended goal. In light of the mentioned application to spacetime modeling,
we are interested in a ﬁtness function able to promote the production of
causets with dimension above the already observed 1-D and 2-D cases. Out
of several dimension estimation techniques, the above mentioned node-shell-
growth analysis has been chosen, for reasons of simplicity, computational
eﬃciency, and for its ability to extracts useful information also from totally
ordered causets. 3 In particular, I have focused on node-shell-growth relative
to the causet root.
Informally, the implemented ﬁtness function proceeds as follows. It at-
tempts to match an initial subsequence of the node-shell-growth data, both
by monomial a ∗xb and by exponential function c ∗dx, using Mathematica
function FindFit, where parameters a, b, c, and d are real constants, and
x is the variable node-shell size. In both cases the ﬁtting error is detected.
Driven in part by previous experiments, I have given preference to causets
with polynomial node-shell-growth. Thus, if a smaller error is found for the
exponential ﬁt, the individual is assigned a conveniently low value (-2, in
the sequel), while if the polynomial ﬁt is more accurate, a ﬁtness value is
assigned that corresponds to the obtained exponent b, with minor modiﬁca-
tions meant to promote small errors and large numbers of node shells, while
avoiding excessively small values for the multiplicative parameter a.
If, at some step, a loop edge is created in the trinet – a pathological situa-
tion in which rewrite rule application becomes problematic – the computation
is forced into a ﬁxpoint, and the trinet no longer evolves.
Mating: the process of deriving a new generation of individuals from the cur-
rent one. With generations of 100 individuals, 50 couples are selected, by
using a random distribution that favors the choice of high-ﬁtness elements.
For couple (a, b), with genome strings ga, gb, a split point is chosen, which is
an integer random variable s distributed around half the length of the genome
(i.e. 343/2). A pair of children (c, d) are obtained from the couple by spiltting
3See [6] for a discussion on the apparently degenerate case of totally ordered causets.

DO PARTICLES EVOLVE?
13
both parental genomes at point s, and by combining the ﬁrst part of ga with
the second part of gb, and vice versa.
Random mutation: the replacement of some genome elements by a random
value. In our experiment, typically each element in the genome of a new born
has a 4 percent probability of being replaced by a random value.
We are now ready for describing some of the preliminary results that have been
obtained from the application of GA’s to the evolution of ants living on trinets. In
the sequel, I shall concisely refer to the latter by the term ’GA ants’.
4. Some experiments and preliminary results
4.1. First experiment. In a ﬁrst experiment, the initial generation is formed by
100 GA ants with random genome codes; recall that these are tuples of 343 random
integers in the range [1, 36].
The ﬁtness of each ant has been computed by the
discussed comparative polynomial and exponential ﬁtting procedure, relative to a
2000-ant-step computation, yielding a 2000-node causet; 500 generations have been
produced.
Three-four generations are suﬃcient for the average ﬁtness to approach value 0
(from below), which corresponds to a 1-D node-shell-growth dimension, relative to
the causet root. This is not surprising, since the pervasive presence of rather un-
interesting 1-D polymer-like cases was already observed in other algorithmic causet
families. 4 However, in 500 generations, and several hours of simulation, no increase
of the average ﬁtness above zero could be observed. Thus, an alternative way to
stimulate the growth was explored.
4.2. Second experiment. In a second round of experiments, special individuals
have been included in the initial generation, hoping to trigger interesting evolutions.
The special behaviors I have used were obtained by previous experiments with the
threshold-based Trinet Mobile Automata mentioned above. The causets that they
originate, their (threshold, expandCode, exchangeCode) parameters, and their ﬁtness
values are illustrated in Figure 2. The choice of the two upper causets was motivated
by their relatively high ﬁtness values – these are approximately 2-D and 3-D causets,
respectively, under the chosen node-shell-growth dimension estimator. The lower case
was chosen simply because it represents one of the two exceptional pseudorandom
cases that were found in the class of threshold-based automata.
The behavior of these threshold-based ants is fully deﬁned by their three-element
codes – a much smaller genome than the 343-element genome of a GA ant. How-
ever, these automata can be imported in the more elaborate GA setting because
4In [4], for example, we show that 4084 out of 4096 elementary Turing machines yield 1-D,
polymeric causets, when their tape is initially ﬁlled with 0’s.

14
TOMMASO BOLOGNESI
Figure 2. The causets obtained from 3000-ant-step computations of
three threshold-based Trinet Mobile Automata, their codes and their
ﬁtness values.
the situations recognized on the graph by a GA ant are precisely a reﬁnement of
those relevant to threshold-based ants. A GA ant detects the sizes (up to size 8)
of three neighboring trinet faces, and reacts diﬀerently for each such triple, while a
threshold-based ant only looks at two of them, and reacts only depending on how
their sizes compare with the ﬁxed threshold (for the reﬁnement to hold, no threshold
above 8 should be considered). On the other hand, the set of possible reactions –
determining which rule to apply and where to move next – is the same in the two
cases. As a consequence, any behavior of a threshold-based ant can be expressed
by a GA ant genome, one in which many situations are regarded as equivalent and
share the same reaction.
The inclusion of just one instance of ant (6, 10, 2) in an initial set of 100 otherwise
random individuals proves insuﬃcient for triggering anything of interest: the special

DO PARTICLES EVOLVE?
15
Figure 3. Some of the causets obtained in 7 generations of threshold-
based Trinet Mobile Automata, when the initial generation is com-
posed by 10 instances of ant (6, 10, 2) (see Figure 2) and 90 random
individuals. The causets exhibit, respectively, 1, 2, 3, 4, 5 and 7 spiral-
ing ’particles’, formed by pentagonal faces in a hexagonal grid. Fitness
values are shown, relative to 1000 and (in parentheses) 10,000 ant-step
computations.
individual disappears in the second generation without leaving trace of its high ﬁt-
ness, and the subsequent evolution is equivalent to the one obtained from the totally
random initial generation.
A better result is obtained by associating 10 copies of ant (6, 10, 2) with 90 random
individuals. In this case, within the ﬁrst 7 generations several variants of the initial
’seed’ appear, as shown in Figure 3. Fitness values are also provided in that ﬁgure,
relative to 1000 and 10,000 ant-step computations. Increasing the number of ant-
steps improves the approximation to the expected ﬁtness = 1 but, given the size and
number of generations considered, letting the ants run for more than 1000-2000 steps
is quite unpractical.
4.3. Third experiment. In the third round of experiments, the random individuals
have been completely removed from the initial generation. As a ﬁrst choice, 50 copies

16
TOMMASO BOLOGNESI
Figure 4. Causets obtained from the evolution of threshold-based
Trinet Mobile Automata. The ﬁrst was obtained from an initial gen-
eration composed by 50 copies of ant (6, 10, 2) and 50 copies of ant (4,
17, 8), and was used, jointly with copies of ants (4, 17, 8) and (5, 17,
2) (see Figure 2) for obtaining the second and third. Fitness values are
shown, relative to 1000 and (in parentheses) 10,000 ant-step computa-
tions.
of ant (6, 10, 2) and 50 copies of ant (4, 17, 8) (see Figure 2) have been used in the
initial population, and the evolution of 200 generations has been simulated, taking
over 24 hours to complete.
The individuals in the ﬁnal generation are partitioned into two classes. We ﬁnd
62 elements with ﬁtness close to 0, or smaller, that correspond to the usual, unin-
teresting, polymer-like causets. The remaining 38 elements are of the type shown at
the l.h.s. of Figure 4. Subsequently, 10 instances of this newly found individual have
been used for composing a new initial generation, where 40 instances of ant (4, 17,
8), and 50 instances of ant (5, 17, 2) (see Figure 2) have been added. The latter
was chosen because it builds the causet with fastest, polynomial node-shell-growth
from the root, namely O(n2), that could be found among those derived from TMA
computations.
Three identical experiments were conducted, each computing a sequence of 100
generations of 100 individuals, each individual running for 1000 steps. Due to the
randomness involved in mating and mutations, we may expect diﬀerent results for
each simulation. Indeed, causets of a familiar type were obtained in two cases, with
relatively low ﬁtness ﬁgures. But in one case the ﬁnal generation contains individuals
that produce the causets shown in Figure 4. These causets appear as one-fold, two-
fold, and four-fold realizations of the same basic pattern, and in this respect bear
analogies with those in Figure 3. However, they achieve considerably higher ﬁtness
ﬁgures.

DO PARTICLES EVOLVE?
17
Although for applications to physics we should be in general more interested in
pseudo-random computations, or in cases exhibiting a mix of order and disorder,
inspecting regular cases, such as those in Figure 4, may reveal interesting features.
The interest for these planar and layered causets comes on the fact that, in spite of
their planarity, they achieve and even overtake the O(x2) node-shell growth rate of
a 3-D cubic lattice! Note that, although the ants work on planar trinets, and the
adopted rewrite rules preserve planarity, the derived causets need not be planar; but
in this case, they are.
This causet type was never observed among the (over 1000) cases that I have
derived from threshold-based Trinet Mobile Automata. The conclusion is that the
evolving ant, due to its rich and ﬂexible genome, has entered a region that is out
of the reach of the more primitive, threshold-based ant. On the other hand, similar
planar, layered causets with O(x2) node-shell growth from the root, were found with
other models of computation, namely with Turing machines, string rewrite systems,
and cyclic tag systems; these are described in [4], where it is also proved that all
causets from those models have to be planar.
One of the open problems of the computational universe conjecture is concerned
with the choice among various candidate models of computation, or with question-
ing the actual relevance of such a choice, given the fact that all (Turing-complete)
models are equivalent, at least in a formal sense. Causets may represent the appro-
priate abstraction for looking at these diﬀerent models, and ﬁnding commonalities
among diﬀerent causet classes, as the one just exposed, may shed further light on
the relevance or irrelevance of the above choice.
5. Further experiments and ongoing work
Further experiments with Genetic Algorithms for Trinet Mobile Automata have
been conducted, and more are under way. Most of the creativity in setting them up
is concentrated in two aspects: (i) the deﬁnition of the situation to which the ant
reacts, and (ii) the deﬁnition of the ﬁtness function. The former may take advantage
from additional structure introduced in trinets, e.g. node and/or edge labels.
For example, I have run a series of experiments with three-colored trinets, while
keeping the same ﬁtness function used in the previous experiments, meant to maxi-
mize node-shell-growth dimension from the causet root. A Tait coloring of a trivalent
graph is a labeling of its edges made with only three colors, such that at each ver-
tex the colors of the three incident edges are diﬀerent (I am are grateful to Richard
Southwell for stimulating interest in this approach). For an ant living on such a
graph, the situation can be deﬁned in terms of the color pattern that it detects
around her.

18
TOMMASO BOLOGNESI
Figure 5. The growth of the average ﬁtness for a sequence of 2000
generations, each consisting of 100 individuals. The ﬁtness is deﬁned
as in the previously described experiments, but the TMA algorithm
is now based on trinets with three-colored edges. The ant reactions
depend here on the detected color patterns.
One of the reasons for looking at three-colored trinets was to relax the trinet pla-
narity condition. Graph rewrite rule Exchange has two forms, planar and nonplanar.
In the previous experiments the ﬁrst form was always chosen. But when looking only
at edge colors, we lose control on this choice, and the trinet may soon become non
planar. Following the intuition that nonplanar trinets could achieve higher (node-
shell-growth) dimension than planar ones, and that the higher the dimension of the
support, the higher the dimension of the causet derived from computing on it, 5 one
could expect to hit relatively high ﬁtness values with this type of TMA.
Figure 5 is a plot of the average ﬁtness achieved, generation by generation, in a
sequence of 2000 of them. The ﬁtness function is the same of the previous experi-
ments. Unfortunately, the values achieved so far are relatively low; however, the plot
indicates that sudden increases in these values may take place after considerably long
stationary phases.
In another series of experiments on nonplanar Trinet Mobile Automata, the sit-
uation has been conceived based on the age of edges, that is, on their order of
appearance in the growing graph. Assume that the ant is positioned on edge e1, fac-
ing node n1, and let e2 and e3 be the other edges incident to n, where e2 is younger
than e3.
The situation is then deﬁned as the ordered pair (L1,2, L1,3) of lengths
5One can think of this increment as the contribution of the time dimension.

DO PARTICLES EVOLVE?
19
of the two shortest cycles containing, respectively, edge pair (e1, e2) and edge pair
(e1, e3). In a way, these cycle lengths are the nonplanar analogous of the polygonal
face sizes used for deﬁning the situation in planar trinets. Three cycle lengths have
been distinguished: 3 (parallel edges are excluded), 4, and 5 or higher. Thus, there
are 32 = 9 possible situations.
The reaction consists in choosing a rewrite rule in the set {Expand, Exchange-
planar, Exchange-nonplanar} and then using a numeric code in the range 1-6 to
move to one of six possible next locations, deﬁned relative to the current, oriented
ant position. Thus, there are 3 ∗6 = 18 possible reactions.
Since the genome is a function from situations to reactions, there are a total of 189
= 198,359,290,368 possible genetic codes, much less than with the previous TMA
models.
Even with this new, nonplanar trinet setting, no improvement of ﬁtness values
can be reported yet. However, the search through the generations has led, among
others, to the interesting individual illustrated in Figure 6. 6 This is the third case
of pseudorandom TMA that I have found, after the two cases described in [2]; but
it is the ﬁrst yielding a nonplanar trinet. The upper-left diagram in Figure 6 closely
resembles the ’gem’ found in Figure 1 – the thumbnail with parameters (17, 8) – and
shares with it an O(x1/2) growth rate, but only for an initial phase; subsequently,
it appears to grow roughly linear, at least as far as I could experimentally test.
The trinet produced by this computation appears completely uniform, in the sense
that all trinet nodes seem to share the same view at the node-shell-growth rate, as
illustrated by the lower-right plots.
6. Conclusions
During one of his late-evening talks at some NKS Summer School edition, Stephen
Wolfram has indicated two types of achievement that can be expected from the NKS
endeavor: breakthroughs in fundamental physics, and new insights in various ﬁelds
of technology.
In the second case, the exploration of the computational universe, intended as
the space of simple programs, may indeed help in identifying unorthodox solutions
to computing problems that would be unaccessible by traditional engineering tech-
niques; the development of a complex software system such as the Wolfram Alpha
knowledge engine, for example, seems to have beneﬁtted from this approach.
In this paper, however, we have concentrated on the ﬁrst goal: we have formulated
some visions on the desirable evolutionary steps that systems of artiﬁcial particles,
similar to those in Wolfram’s ECA 110, might take for building systems of increasing
6According to our implemented conventions for reaction coding, this individual has genetic code
{5, 7, 17, 8, 3, 3, 13, 1, 11}.

20
TOMMASO BOLOGNESI
Figure 6. The remarkable pseudo-random, 10,000-step computation
of a nonplanar Trinet Mobile Automaton.
Upper-left: sequence of
edges visited and revisited by the ant.
Upper-right:
10,000-node
causet. Lower-left: ﬁnal trinet. Lower-right: node-shell sizes at pro-
gressive distance from a trinet node, for 12 nodes selected at random
in the graph, showing the uniformity of the latter (these 12 plots are
actually based on a trinet with about 3500 nodes, larger than the one
shown, and obtained by a 80,000-step computation).
complexity, and, hopefully, increasing similarity with the physical universe; and we
have shown some applications of Genetic Algorithms to the challenging activity of
’universe hunting’.
Under the picture of a physical universe organized as a layered architecture of
emergence, ’universe hunting’ primarily refers to the simulation of computational
Big Bangs, looking at the bottom layers of the architecture in search for structures,
objects, behaviors, laws, relevant at those levels. There is no guarantee that what
we ﬁnd there has a direct counterpart in (let alone numerical correspondence with)

DO PARTICLES EVOLVE?
21
the repertoire of objects and laws from current physical theories, that are to be
probably located several layers above. But, following Einstein, we can believe that
the universe is, surprisingly, understandable; additionally, we could count on the
fact that its layers show imaginative variations of a few recurrent patterns. Thus,
in simulating the lower layers, we can hope to detect at least analogies with what
we already know about higher layers – those that we can directly explore, say, by
particle accelerators.
For qualifying as a scientiﬁc theory, any computational Big Bang conjecture will
eventually need a stringent validation in the form of an accurate numerical prediction
of some known physical constant, or of the outcome of some ’real’ experiment. After
Galileo, there is no escape from this requirement. In fact, I do not consider this event
as totally unconceivable. However, given the gap that separates, say, the ’artiﬁcial’
localized structures of some TMA computation from the mass of a ’real’ electron,
much work still remains to be done, at both ends of the gap.
In particular, we still need plenty of creative experiments for simulating, bottom
up, the the lower levels of the architecture. The fact that most of the work done
at these levels proceeds somewhat blindly, with the primary objective to see what
might possibly happen, makes it quite reasonable to call this approach ’a new kind
of science’.
Acknowledgments. I would like to thank Hector Zenil for his kind invitation to
contribute to this volume, celebrating the tenth anniversary of Wolfram’s NKS book.
References
[1] G. Agha. ACTORS: A Model of Concurrent Computation in Distributed Systems. The MIT
Press: Cambridge, MA, USA, 1990.
[2] Tommaso Bolognesi. Planar trinet dynamics with two rewrite rules. Complex Systems, 18(1):1–
41, 2008.
[3] Tommaso Bolognesi. A pseudo-random network mobile automaton with linear growth. Inf.
Process. Lett., 109(13):668–674, 2009.
[4] Tommaso Bolognesi. Causal sets from simple models of computation. Int. Journ. of Uncon-
ventional Computing, 6(6):489–524, 2010.
[5] Tommaso
Bolognesi.
Causal
sets
from
simple
models
of
computation,
April
2010.
http://arxiv.org/abs/1004.3128v1 [physics.comp-ph].
[6] Tommaso Bolognesi. Algorithmic causets. In Proceedings of DICE 2010: Space, Time, Matter.
IOP Science, 2011. Journal of Physics: Conference Series, Vol. 306, No. 1, doi:10.1088/1742-
6596/306/1/012042.
[7] Tommaso Bolognesi. Reality is ultimately digital, and its program is still undebugged, 2011.
FQXi Essay Contest 2011, http://fqxi.org/community/essay/winners/2011.1.
[8] Tommaso Bolognesi. Algorithmic causal sets for a computational spacetime. In Hector Ze-
nil, editor, A Computable Universe - Understanding Computation and Exploring Nature As
Computation. World Scientiﬁc, 2012.

22
TOMMASO BOLOGNESI
[9] Luca Bombelli, Johan Lee, David Meyer, and Rafael D. Sorkin. Space-time as a causal set.
Phys. Rev. Lett., 59(5):521–524, Aug. 1987.
[10] Fay Dowker. Causal sets and the deep structure of spacetime. In Abhay Ashtekar, editor,
100 Years of Relativity - Space-time Structure: Einstein and Beyond, pages 445–464. World
Scientiﬁc, 2005. arXiv:gr-qc/0508109v1.
[11] Carl Hewitt. What is computation?
Actor Model versus Turing’s Model. In Hector Zenil,
editor, A Computable Universe - Understanding Computation and Exploring Nature As Com-
putation. World Scientiﬁc, 2012.
[12] Carl Hewitt and Henry Baker. Laws for communicating parallel processes. Information Pro-
cessing, 1977.
[13] C. A. R. Hoare. Communicating sequential processes. Commun. ACM, 21(8):666–677, August
1978.
[14] J.H. Holland. Adaptation in Natural and Artiﬁcial Systems. University of Michigan Press, 1975.
[15] S.A. Kauﬀman. At home in the universe: the search for laws of self-organization and complex-
ity. Oxford paperbacks. Oxford University Press, 1995.
[16] Fotini Markopoulou. Dual formulation of spin network evolution, 1997. arXiv:gr-qc/9704013v1.
[17] R. Milner. Communication and concurrency. Prentice-Hall, Inc., Upper Saddle River, NJ, USA,
1989.
[18] M. Mitchell. Complexity: a guided tour. Oxford University Press, 2009.
[19] Thomas Nowotny and Manfred Requardt. Dimension Theory of Graphs and Networks. J.
Phys., A31:2447–2463, 1998. arXiv:hep-th/9707082, doi:10.1088/0305-4470/31/10/018.
[20] Ed Pegg. Turmite. In Eric W. Weisstein, editor, MathWorld–A Wolfram Web Resource.
http://mathworld.wolfram.com/Turmite.html.
[21] Ed
Pegg.
Turmites.
The
Wolfram
Demonstration
Project,
http://
demonstra-
tions.wolfram.com/Turmites/.
[22] Ed Pegg, JeﬀBryant, and Theodore W. Gray. Voronoi diagrams. The Wolfram Demonstration
Project, http://demonstrations.wolfram.com/ VoronoiDiagrams/.
[23] David P. Rideout and Raphael D. Sorkin. Classical sequential growth dynamics for causal sets.
Phys. Rev. D, 61:024002, Dec 1999. arXiv:gr-qc/9904062v3.
[24] Rafael D. Sorkin. Causal sets: Discrete gravity, Notes for the Valdivia Summer School, 2003.
arXiv:gr-qc/0309009.
[25] Stephen Wolfram. A New Kind of Science. Wolfram Media, Inc., 2002.

