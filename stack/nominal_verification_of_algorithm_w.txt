16
Nominal veriﬁcation of algorithm W
Christian Urban and Tobias Nipkow
TU M¨unchen
Abstract
The Milner-Damas typing algorithm W is one of the classic algorithms
in computer science. In this paper we describe a formalized soundness
and completeness proof for this algorithm. Our formalization is based
on names for both term and type variables, and is carried out in
Isabelle/HOL using the Nominal Datatype Package. It turns out that
in our formalization we have to deal with a number of issues that are
often overlooked in informal presentations of W.
“Alpha-conversion always bites you when you least expect it.”
A remark made by Xavier Leroy when discussing with us the
informal proof about W in his PhD thesis [7].
16.1 Introduction
Milner’s polymorphic type system for ML [8] is probably the most
inﬂuential programming language type system. The second author
learned about it from a paper by Cl´ement et al. [2]. He was immediately
taken by their view that type inference can be viewed as Prolog
execution, in particular because the Isabelle system, which he had
started to work on, was based on a similar paradigm as the Typol
language developed by Kahn and his coworkers [1]. Milner himself
had provided the explicit type inference algorithm W and proved its
soundness. Completeness was later shown by Damas and Milner [4].
Neither soundness nor completeness of W are trivial because of the
presence of the Let-construct (which is not expanded during type
From Semantics to Computer Science Essays in Honour of Gilles Kahn,
eds Yves
Bertot, G´erard Huet, Jean-Jacques L´evy and Gordon Plotkin. Published by Cambridge
University Press.
c
⃝Cambridge University Press 2009.
363
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

364
C. Urban and T. Nipkow
inference). Two machine-checked proofs for soundness and completeness
were implemented previously [5, 9]. Both of these proofs code type and
term variables using de Bruijn indices. This leads to slick proofs which,
however, require strange lemmas about arithmetic on de Bruijn terms,
not present in typical proofs done with “pencil-and-paper” (for example
[7, 13]).
Here we will describe a formalization for soundness and completeness
of W using the Nominal Datatype Package developed by Berghofer and
the ﬁrst author [14, 16]. This package is based on ideas pioneered by
Pitts et al. [11, 12] and aims to provide all necessary infrastructure for
reasoning conveniently about languages with bound variables. For this
it provides mechanisms to deal with named binders and allows one to
deﬁne datatypes modulo α-equivalence. For example, when deﬁning the
lambda-calculus with the terms
a
|
t1 t2
|
λa.t
one deﬁnes term-constructors for variables, applications and lambdas
and indicates in case of lambdas that a is bound in t. The Nominal
Datatype Package constructs then a (nominal) datatype representing
α-equivalence classes of those terms. Unlike constructions involving
de Bruijn indices, however, the α-equivalence classes in the Nominal
Datatype Package involve names. This is similar to the convention in
“pencil-and-paper” proofs where one states that one identiﬁes terms
that diﬀer only in the names of bound variables, but works with terms
in a “na¨ıve” way. However, dealing with α-equivalence classes has
some subtle consequences: some functions cannot be deﬁned anymore
and α-equivalence classes do not immediately come equipped with
a structural induction principle. Therefore the Nominal Datatype
Package provides a recursion combinator that ensures functions respect
α-equivalence classes and also provides two principles for performing
proofs by structural induction over them. The ﬁrst induction principle
looks as follows:
∀a. P (a)
∀t1 t2. P t1 ∧P t2 −→P (t1 t2)
∀a t. P t −→P (λa.t)
P t
where a property P holds for all (α-equated) lambda-terms t provided
the property holds for variables, applications and lambdas. In the
latter two cases one can as usual assume the property holds for the
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
365
immediate subterms. However, this principle is quite inconvenient in
practice, since it requires the lambda-case to be proved for all binders,
which often means one has to rename binders and establish auxiliary
lemmas concerning such renamings. In informal reasoning this renaming
is nearly always avoided by employing the variable convention for
bound variables. Therefore the Nominal Datatype Package generates
automatically the following stronger induction principle for α-equated
lambda-terms
∀a C. P C (a)
∀t1 t2 C. (∀C. P C t1) ∧(∀C. P C t2) −→P C (t1 t2)
∀a t C. a # C ∧(∀C. P C t) −→P C (λa.t)
P C t
where one only needs to prove the lambda-case for all fresh binders
(w.r.t. some suitably chosen context C). With the stronger induction
principle we can relatively easily formalize informal proofs employing
the variable convention (for more details see [15, 16]). The reason is that
the variable convention usually states which free variables the binder has
to avoid. We can achieve the same with the stronger induction principle
by instantiation C with what is informally avoided.
16.2 Terms, types and substitutions
16.2.1 Terms and types
Our terms represent λ-terms enriched with Let-expressions:
trm = Var var | App trm trm | Lam var. trm | Let var be trm in trm
where var is some inﬁnite type of term variables. This deﬁnition looks
like an ordinary recursive datatype, but its deﬁnition in Isabelle includes
the keyword nominal datatype. This means that trm is really a type
of equivalence classes of terms modulo α-conversion. The deﬁnition also
includes the information that the term-variable var in Lam var. trm
binds all free occurrences var in trm, and similarly for Let var be trm
in trm ′ that all occurrences of var are bound in trm ′. Thus we really
work with α-equivalence classes, as we have for example the equation
Lam a. Var a = Lam b. Var b, which does not hold had we deﬁned
terms as an ordinary datatype.
However, types do not contain any binders and therefore are deﬁned
as an ordinary datatype ty
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

366
C. Urban and T. Nipkow
ty = TVar tvar | ty→ty
based on some inﬁnite type tvar of type variables.
Type schemes are universally quantiﬁed types. This quantiﬁcation is
again modelled via a nominal datatype, namely
tyS = Ty ty | ∀tvar.tyS
where in the latter clause a type variable is bound in a type scheme.
With this deﬁnition we ﬁx the order of the binders, and also allow type
schemes with multiple occurrences of the same bound type variable, for
example, ∀X .∀X .Ty (TVar X ). This will require some care in the proofs
we shall give later on. Ideally one would like to quantify over a whole
set of variables in one go, as in ∀{X 1. . . X n}. ty; however, this is not
yet supported in either the nominal or any other approach to datatypes
with binders. We are not the ﬁrst to choose the representation using a
ﬁxed order for binders: it has been used in the description of W given
by Gunter [6] and also by Damas in parts of his thesis (see [3] page 66).
Our naming conventions for term variables, terms, type variables,
types and types-schemes are
a : var,
t : trm,
X : tvar,
T : ty,
S : tyS.
We use the following list notation: x::xs is the list with head x and tail
xs, xs @ ys is the concatenation of two lists, and x ∈xs means that x
occurs in the list xs. List inclusion is deﬁned by
xs ⊆ys
def
= ∀x. x ∈xs −→x ∈ys
and two lists of type variables are considered equivalent provided
xs ≈ys
def
= xs ⊆ys ∧ys ⊆xs.
16.2.2 Substitutions
We model substitutions as lists, namely Subst = (tvar × ty) list, and
reserve variables θ, σ and δ for them. Because lists are ﬁnite, one can
always ﬁnd a new type variable that does not occur in a substitution.
We will use for this concept the notion of freshness, written X #
,
from the nominal logic work [11, 16]. When modelling substitutions as
functions, one has to require ﬁniteness of their domain (the type variables
not mapped to themselves) explicitly, which complicates matters. Since
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
367
there is no free lunch, we have to deﬁne a number of concepts that would
come for free with substitutions as functions.
• Application to a type
θ(TVar X ) = lookup θ X
θ(T 1→T 2) = θ(T 1)→θ(T 2)
is deﬁned in terms of the auxiliary function lookup:
lookup [] X = TVar X
lookup ((Y , T)::θ) X = (if X = Y then T else lookup θ X )
• Application to a type scheme:
θ(Ty T) = Ty θ(T)
θ(∀X .S) = ∀X .θ(S) provided X # θ
• Substitution composition:
θ1 ◦[] = θ1
θ1 ◦((X , T)::θ2) = (X , θ1(T))::θ1 ◦θ2
• Extensional equivalence:
θ1 ≈θ2
def
= ∀X . θ1(TVar X ) = θ2(TVar X )
• Domain of a substitution:
dom [] = []
dom ((X , T)::θ) = X ::dom θ
The only technically interesting point here is the application of a substi-
tution to a type scheme. For a start, this deﬁnition is not by ordinary
structural recursion since it operates on equivalence classes. Luckily the
nominal datatype infrastructure provides a mechanism whereby one can
specify the recursion equations as above and Isabelle generates veriﬁ-
cation conditions that imply that the deﬁnition is independent of the
choice of representatives of the equivalence class. This is the case if X
does not occur freely in θ. Note, however, that substitution application
over type schemes is not a partial function, since type schemes are α-
equivalence classes and one can always rename the X away from θ.
We can easily show that substitution composition is associative, that
is θ1◦(θ2◦θ3) = (θ1◦θ2)◦θ3, and that θ1 ◦θ2( ) = θ1(θ2( )) holds for
types and type schemes. The substitution of a single type variable is
deﬁned as a special case:
( )[X: = T]
def
= [(X, T)]( )
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

368
C. Urban and T. Nipkow
16.2.3 Free type variables
Free type variables, ftv, of types and type-schemes are deﬁned as usual
ftv (TVar X ) = [X ]
ftv (Ty T) = ftv T
ftv (T 1→T 2) = ftv T 1 @ ftv T 2
ftv (∀X .S) = ftv S −[X ]
except that ftv returns a list, which may contain duplicates (in the last
clause the diﬀerence stands for removing all elements of the second list
from the ﬁrst). The reason for lists rather than sets is the following:
The typing of Let-expressions (see Section 16.3) requires a type to be
turned into a type scheme by quantifying over some free variables (see
Section 16.2.4). If the free variables are given as a list, this is just
recursion over the list. If they are given as a ﬁnite set, one faces the
problem that recursion over a set is only well-deﬁned if the order of
elements does not matter [10]. But the order of quantiﬁers does matter
in our representation of type schemes! Hence one would need to order the
set artiﬁcially, for example via HOL’s choice operator, which we prefer
to avoid.
We shall also make use of the notion of free type variables for pairs
and lists, deﬁned by the clauses
ftv (x, y) = ftv x @ ftv y
ftv [] = []
ftv (x::xs) = ftv x @ ftv xs.
For term and type variables we deﬁne ftv a
def
= [] and ftv X
def
= [X ]. The
free type variables for substitutions are therefore the free type variables
in their domain and co-domain.
16.2.4 Generalization of types and unbinding of type schemes
Types can be turned into type schemes by generalizing over a list of type
variables. This is formalized by the function gen deﬁned by
gen T [] = Ty T
gen T (X ::Xs) = ∀X .gen T Xs
In the deﬁnitions and proofs that follow, we will also need an unbinding
operation that for a type scheme, say S, provides a type T and a list
of type variables Xs such that S = gen T Xs. Since type schemes are
α-equated, we cannot expect this operation being a function from type
schemes to lists of type variables and types: the reason is that such
a function calculates with binders in a way that does not preserve α-
equivalence classes. Indeed, the Nominal Datatype Package does not
allow us to deﬁne
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
369
unbind (Ty T)= [] · T
unbind (∀X .S)= X ::(unbind S)
as it would lead to an inconsistency (because ∀X .Ty (TVar X ) can
unbind to both [X ] · (TVar X ) and [Y ] · (TVar Y )). However, we can
deﬁne the unbinding operation of a type scheme as a three-place relation
inductively deﬁned by the rules
Ty T →[] · T
S →Xs · T
∀X .S →(X ::Xs) · T
One can easily establish the following three properties for the unbinding
relations.
Lemma 16.1
(i)
∃Xs T. S →Xs · T
(ii)
gen T Xs →Xs · T
(iii)
If S →Xs · T then S = gen T Xs.
Proof The ﬁrst is by induction on the type scheme S, the second is by
induction on Xs and last is by induction over S →Xs · T.
The property from Lemma 16.1(i) demonstrates that the unbinding
relation is “total” if the last two parameters are viewed as results.
16.2.5 Instances of a type scheme
Types can be obtained as instances of type schemes by instantiating the
bound variables. This we deﬁne inductively as follows
T ≺Ty T
X # T ′
T ≺S
T[X :=T ′] ≺∀X .S
where X # T ′ stands for X not occurring in T ′. The main reason for
this slightly non-standard deﬁnition is that for ≺we can easily show
that it is preserved under substitutions, namely:
Lemma 16.2 If T ≺S then θ(T) ≺θ(S).
Proof By induction on ≺; the only interesting case is the second rule.
Since we added the side-condition X # T ′ in this rule, the Nominal
Datatype Package provides us with a strengthened induction principle
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

370
C. Urban and T. Nipkow
for ≺that has the variable convention already built in [15]. As a result
we can assume in this case that not only X # T ′ (which comes from the
rule) but also that X # θ (which comes from the variable convention).
We need to show that θ(T[X :=T ′]) ≺θ(∀X .S) holds. By the freshness
assumptions we have that the left-hand side is equal to θ(T)[X :=θ(T ′)]
and the right-hand side is equal to ∀X .θ(S). Moreover we have that X
# θ(T ′). Consequently we can apply the rule and are done.
A more standard deﬁnition for a type T being an instance of a type
scheme ∀{X 1..X n}.T ′ involves a substitution θ whose domain is
{X 1..X n} and which makes θ(T ′) equal to T. This translates in our
setting to the following deﬁnition:
T ≺′ S
def
= ∃Xs T ′ θ. S →Xs · T ′ ∧dom θ ≈Xs ∧θ(T ′) = T.
However, it is much harder to show Lemma 16.2 for the ≺′-relation:
for a start there is no convenient induction principle; also we have to
analyse how θ(S) unbinds, which means we have to rename the binders
appropriately. Nevertheless, it is relatively straightforward to show that
both relations are equivalent.
Lemma 16.3 T ≺S if and only if T ≺′ S.
To prove this lemma, we shall ﬁrst establish the two facts.
Lemma 16.4
(i)
If T ≺S then T ≺∀X .S.
(ii)
If S →Xs · T then T ≺S.
Proof
For the ﬁrst part, we choose a fresh type variable Y such that
Y # (S, T, X ). From the assumption and Lemma 16.2 we obtain
T[X :=TVar Y ] ≺S[X :=TVar Y ]. Using the fact Y # TVar X, we can
derive T[X :=TVar Y ][Y :=TVar X ] ≺∀Y .S[X :=TVar Y ] using the
rule. Because of the manner in which we have chosen Y, the left-hand
side is equal to T and the right-hand side is (alpha-)equal to ∀X .S.
Using (i) we can show by a routine induction over S →Xs · T the second
part of the lemma.
Proof For Lemma 16.3. The left-to-right direction is by induction on ≺
and quite routine. For the other direction we have to show that θ(T ′) ≺
S holds. We ﬁrst use Lemma 16.4(ii) to infer T ′ ≺S from S →Xs · T ′.
Appealing to Lemma 16.2, we can thus infer that θ(T ′) ≺θ(S) holds. By
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
371
a routine induction over S →Xs · T ′, we can show that ∀X ∈Xs. X #
S, which in turn implies that θ(S) = S since dom θ ≈Xs. Consequently
we can conclude with θ(T ′) ≺S.
16.2.6 Subsumption relation for type-schemes
A type scheme S 1 is subsumed by another type scheme S 2 provided that
S 1
S 2
def
= ∀T. T ≺S 1 −→T ≺S 2.
Damas shows in [3] (slightly adapted to our setting) that:
Lemma 16.5 If S 1 →Xs1 · T 1 and S 2 →Xs2 · T 2 then
S 1
S 2 if and only if
∃θ. dom θ ≈Xs2 ∧T 1 = θ(T 2) ∧(∀X ∈Xs1. X # S 2).
Proof The left-to-right directions is as follows: from the ﬁrst assumption
we know T 1 ≺S 1 by Lemma 16.4(ii) and thus T 1 ≺S 2. From this
we obtain a θ such that dom θ ≈Xs2 and T 1 = θ(T 2) holds. The
property ∀X ∈Xs1. X # S 2 follows from the observation that all free
type variables of S 2 are also free in T 1. The other direction follows from
the fact that if S 2 →Xs2 · T 2 and dom θ ≈Xs2 then θ(T 2) ≺S 2.
From Lemma 16.5 we can derive the following two properties of
subsumption which will be useful later on.
Lemma 16.6
(i)
If S 1
S 2 then ftv S 2 ⊆ftv S 1.
(ii)
If Xs1 ⊆Xs2 then gen T Xs1
gen T Xs2.
Proof For the ﬁrst part we obtain by Lemma 16.1(i) Xs1, T 1, Xs2 and
T 2 such that S 1 →Xs1 · T 1 and S 2 →Xs2 · T 2. We have further that
(∗) ftv S 1 ≈ftv T 1 −Xs1 and T 1 ≺S 1. From Lemma 16.5 we can infer
that ∀X ∈Xs1. X # S 2, which in turn implies that (∗∗) Xs1 ∩ftv S 2 =
∅. Using the assumption and T 1 ≺S 1 we obtain T 1 ≺S 2. By induction
on ≺we can show that ftv S 1 ⊆ftv T 1. Using (∗∗) we can infer that ftv
S 2 ⊆ftv T 1 −Xs1 and hence conclude appealing to (∗).
For the second part we have that gen T Xs1 →Xs1 · T and gen
T Xs2 →Xs2 · T using Lemma 16.1(ii). By assumption it holds that
∀X ∈Xs1. X # gen T Xs2. Taking the identity substitution, written ε,
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

372
C. Urban and T. Nipkow
which maps every X ∈Xs2 to TVar X, then dom ε ≈Xs2 and T =
ε(T). Consequently we can conclude using Lemma 16.5.
16.3 Typing
16.3.1 Typing contexts
Typing contexts are lists of (term variable, type scheme)-pairs, i.e. Ctxt
= (var × tyS) list. A typing context Γ is valid when it includes only a
single association for every term variable in Γ. We can deﬁne the notion
of validity by the two rules:
valid []
valid Γ
a # Γ
valid ((a, S)::Γ)
where we attach in the second rule the side-condition that a must be
fresh for Γ, which in case of our typing contexts is equivalent to x not
occurring in Γ. The application of a substitution θ to a typing context
is deﬁned as usual by
θ([]) = []
θ((a, S)::Γ) = (a, θ(S))::θ(Γ).
The subsumption relation is extended to typing contexts as follows:
[]
[]
S 1
S 2
Γ1
Γ2
(a, S 1)::Γ1
(a, S 2)::Γ2
16.3.2 Typing rules
Now we have all the notions in order to deﬁne the typing judgment Γ
⊢t : T :
valid Γ
(a, S) ∈Γ
T ≺S
Γ ⊢Var a : T
Γ ⊢t1 : T 1→T 2
Γ ⊢t2 : T 1
Γ ⊢App t1 t2 : T 2
a # Γ
(a, Ty T 1)::Γ ⊢t : T 2
Γ ⊢Lam a. t : T 1→T 2
a # Γ
Γ ⊢t1 : T 1
(a, close Γ T 1)::Γ ⊢t2 : T 2
Γ ⊢Let a be t1 in t2 : T 2
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
373
The complexity of this system comes from close Γ T 1 in the Let-rule,
which stands for the closure of T 1 w.r.t. Γ. This means that all free type
variables in T 1 are universally quantiﬁed, except for those that are also
free in Γ
close Γ T
def
= gen T (ftv T −ftv Γ).
The ﬁrst formulation of the above set of rules that we are familiar with
appeared in the Mini-ML paper [2] where it was proved equivalent to
the system by Damas and Milner. The Mini-ML rules are derived from
the Damas–Milner rules by incorporating the quantiﬁer rules into the
other rules (via close and ≺), thus making the system syntax-directed.
The above system is much more faithful to standard presentations in
the literature than the two previous formalizations based on de Bruijn
indices [5, 9]. In fact, it is nearly identical to standard presentations.
One exception is that we explicitly require that a pair (a,
) can only
be added to the context Γ if a does not occur in it already. In the
literature this corresponds roughly to those formalizations where the
authors assume that the a is implicitly renamed beforehand.
We have that the typing relation is preserved under substitutions and
that it is monotone under the subsumption relation:
Lemma 16.7 If
Γ ⊢t : T
then
θ(Γ) ⊢t : θ(T) .
Lemma 16.8 If
Γ1 ⊢t : T
and Γ1
Γ2 then
Γ2 ⊢t : T .
Proof
For Lemma 16.7. For this lemma we derive a strong induction
principle [15] for the typing relation that allows us in the Let-case to
assume the bound type variables, that is ftv T 1 −ftv Γ, avoid θ. Then
the variable case is as follows: we know that validity is preserved under
substitution, which implies that valid (θ(Γ)) holds; (x, S) ∈Γ implies
(x, θ(S)) ∈θ(Γ); and by Lemma 16.2 we can infer θ(T) ≺θ(S). In
the Let-case we have that ∀X ∈ftv T 1 −ftv Γ. X # θ, which implies
that θ(close Γ T) = close (θ(Γ)) (θ(T)). Consequently all cases can be
established by straightforward application of the inference rules.
Proof For Lemma 16.8. We show ﬁrst that Γ1
Γ2 implies close Γ1 T
close Γ2 T: Using Lemma 16.6(i) we show by induction that ftv Γ1 ⊆
ftv Γ2 holds; thus ftv T −ftv Γ2 ⊆ftv T −ftv Γ1. By Lemma 16.6(ii)
we obtain close Γ1 T
close Γ2 T. Lemma 16.8 is now by a routine
induction on Γ1 ⊢t : T
using in the variable case the fact that if (x,
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

374
C. Urban and T. Nipkow
S 1) ∈Γ1 and Γ1
Γ2 then there exists an S 2 such that S 1
S 2 and
(x, S 2) ∈Γ2.
The completeness proof in Section 16.5 needs the following lemma.
Lemma 16.9 close (θ(Γ)) (θ(T))
θ(close Γ T).
Proof The proof is by a ﬁddly alpha-renaming for the type scheme on
the right-hand side to move the substitution θ under the binders. Then
we appeal to Lemma 16.5.
16.4 Algorithm W
16.4.1 The rules
At this point we depart from the standard formalization: instead of
deﬁning W as a recursive function W (Γ,t) = (θ,T) which can possibly
fail, we deﬁne W as an inductive relation (V ,Γ,t) &→(V ′,θ,T) where the
lists V and V ′ contain the type variables that have been used so far by
the algorithm. With this we rigorously treat the process of issuing new
type variables and also avoid the vagueness present in some presentations
of W, which state that a fresh variable is created, but omitting the
information as to what it should be fresh for. Again, we are not the
ﬁrst to thread through the algorithm a list of type variables that need
to be avoided: for example Gunter [6] gives such rules, but does not
give a soundness nor completeness proof for these rules; Leroy [7] gives
both proofs but includes in the algorithm an inﬁnite set of available type
variables.
Our rules for W are as follows:
(a, S) ∈Γ
freshen V S T
(V ,Γ,Var a) &→(V @ ftv T,[],T)
(V ,Γ,t1) &→(V 1,θ1,T 1)
(V 1,θ1(Γ),t2) &→(V 2,θ2,T 2)
mgu θ3 (θ2(T 1)) (T 2→TVar X )
X # V 2
(V ,Γ,App t1 t2) &→(X ::V 2,θ3 ◦θ2 ◦θ1,θ3(TVar X ))
(X ::V ,(a, Ty (TVar X ))::Γ,t) &→(V ′,θ1,T 1)
a # Γ
X # (Γ, V )
(V ,Γ,Lam a. t) &→(V ′,θ1,θ1(TVar X )→T 1)
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
375
(V ,Γ,t1) &→(V 1,θ1,T 1)
a # Γ
(V 1,(a, close (θ1(Γ)) T 1)::θ1(Γ),t2) &→(V 2,θ2,T 2)
(V ,Γ,Let a be t1 in t2) &→(V 2,θ2 ◦θ1,T 2)
In the variable rule, in order to obtain the most general instance of a type
schema, also known as its generic instance, all its bound variables are
instantiated by fresh variables. This is formalized as a predicate freshen
V S T, where V stands for the type variables to be avoided and T is
the generic instance of S. Note that ftv T contains the newly introduced
type variables. The deﬁnition of freshen is inductive: type schemes are
simply unpacked:
freshen V (Ty T) T
Quantiﬁers are instantiated by new variables:
freshen V S T
Y # (V , X , S, T)
X # V
freshen V (∀X .S) (T[X :=TVar Y ])
We show that freshen is “total” if V and S are viewed as input, and
that it produces an instance for S.
Lemma 16.10
(i)
∃T. freshen V S T.
(ii)
If freshen V S T then T ≺S.
Proof The ﬁrst property is by induction on S and involving α-renamings;
the second is by induction on freshen V S T.
16.4.2 Uniﬁcation
We treat uniﬁcation as a black box and merely specify its behaviour
via a predicate mgu θ T 1 T 2 which expresses that θ is a most general
uniﬁer of T 1 and T 2. We shall rely on the following four properties of
mgu:
Proposition 16.11
(i)
If mgu θ T 1 T 2 then θ(T 1) = θ(T 2).
(ii)
If mgu θ T 1 T 2 and θ ′(T 1) = θ ′(T 2) then ∃δ. θ ′ ≈δ ◦θ.
(iii)
If mgu θ T 1 T 2 then ftv θ ⊆ftv (T 1, T 2).
(iv)
If θ(T 1) = θ(T 2) then ∃θ ′. mgu θ ′ T 1 T 2.
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

376
C. Urban and T. Nipkow
16.5 Soundness and completeness proofs
The soundness and completeness statements for W are as follows:
Theorem 16.12 (soundness)
If (V ,Γ,t) &→(V ′,θ,T) and valid Γ then
θ(Γ) ⊢t : T .
Theorem 16.13 (completeness)
If
[] ⊢t : T
then ∃V θ T ′. ([],[],t) &→(V ,θ,T ′) ∧(∃δ. T = δ(T ′)).
The proof of the ﬁrst theorem is by a strong induction over (V ,Γ,t) &→
(V ′,θ,T) using Lemma 16.7. This induction is relatively straightforward
and therefore we omit the details.
The proof of the completeness theorem is more interesting: it is by
induction on the structure of t. However, the statement needs to be
strengthened in order to succeed with the induction. The strengthened
statement is given by the following theorem.
Theorem 16.14 If σ(Γ) ⊢t : T ′ and ftv Γ ⊆V then there exist θ,
T, δ and V ′ such that
(i)
(V ,Γ,t) &→(V ′,θ,T)
(ii)
T ′ = δ(T)
(iii)
σ ′ ≈δ ◦θ inside V.
where we use the notion of two substitutions being equal over a list of
type variables. This notion is deﬁned as
θ1 ≈θ2 inside Xs
def
= ∀X ∈Xs. θ1(TVar X ) = θ2(TVar X )
This relation is reﬂexive, symmetric and transitive in the arguments θ1
and θ2. We can also show that:
Lemma 16.15
(i)
If θ1 ≈θ2 inside Xs and ftv
⊆Xs then θ1( ) = θ2( ) where
stands for types, type schemes, typing contexts and substi-
tutions.
(ii)
If X # Xs then θ ≈(X , T)::θ inside Xs.
(iii)
If θ1 ≈θ2 inside Xs and ftv θ ⊆Xs and Xs ′ ⊆Xs then θ1
◦θ ≈θ2 ◦θ inside Xs ′.
Proof The ﬁrst property holds for types, type schemes, typing contexts
and substitutions. In each case the property is shown by structural
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
377
induction. The second property is by a simple calculation. The last is by
induction on θ using (i).
Next we show that the list of used variables increases in every “recursive
call” in the algorithm and that the list of used variables indeed contains
all used variables.
Lemma 16.16
(i)
If (V ,Γ,t) &→(V ′,θ,T) then V ⊆V ′.
(ii)
If (V ,Γ,t) &→(V ′,θ,T) and ftv Γ ⊆V then ftv (Γ, θ, T) ⊆V ′.
Proof Both are by induction on the rules of W.
Now we have everything in place to establish the completeness of W.
Proof For Theorem 16.14: The proof is by strong structural induction
over t avoiding Γ and generalizing over V, σ and T.
Variable-case: By assumption we have
σ(Γ) ⊢Var x : T ′ . From
this we obtain an S such that T ′ ≺S and (i) (x, S) ∈σ(Γ). From
(i) we obtain an S ′ such that (ii) (x, S ′) ∈Γ and S = σ(S ′). By
Lemma 16.10(i) we have an T such that (iii) freshen V S ′ T. From this
and (ii) we can derive (V ,Γ,Var x) &→(V @ ftv T,[],T). Using (iii) and
T ′ ≺σ(S ′) we obtain a δ such that T ′ = δ(T) and σ ≈δ ◦[] inside V,
which concludes this case.
Lambda-case: By the variable convention we have built into the
induction principle for the typing relation, we know x # Γ, from which
we can infer that also x # σ(Γ) holds. By assumption we have σ(Γ) ⊢
Lam x. t : T ′ . Taking the last two facts together we obtain a T 1 and
T 2 such that
(i) (x, Ty T 1)::σ(Γ) ⊢t : T 2
and
(ii) T ′ = T 1→T 2.
We now choose a new type-variable X such that X # (σ, Γ, σ(Γ), V )
holds. By assumption we have ftv Γ ⊆V, which implies ftv ((x, Ty
(TVar X ))::Γ) ⊆X ::V. We also have that
(iii) (x, Ty T 1)::σ(Γ) = ((X , T 1)::σ)((x, Ty (TVar X ))::Γ)
because by condition X
# σ it holds that ((X , T 1)::σ)(Γ) =
σ(Γ)[X :=T 1] and by condition X # σ(Γ) that σ(Γ)[X :=T 1] = σ(Γ).
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

378
C. Urban and T. Nipkow
Fact (iii) allows us to apply the induction hypothesis obtaining a θ, T 1,
δ and V ′ such that
(iv)
(X ::V ,(x, Ty (TVar X ))::Γ,t) &→(V ′,θ,T)
(v)
T 2 = δ(T)
(vi)
(X , T 1)::σ ≈δ ◦θ inside X ::V .
We can conclude the Lambda-case with
(V ,Γ,Lam x. t) &→(V ′,θ,θ(TVar X )→T).
which follows from x # Γ and X # (Γ, V ). By the calculation
T ′
=
T 1→T 2
by (ii)
=
T 1→δ(T)
by (v)
=
δ ◦θ(TVar X )→δ(T)
by (vi)
we have that T ′ = δ(θ(TVar X )→T). Finally we have that σ ≈δ ◦θ
inside V because
σ
≈
(X , T 1)::σ
inside V
by X # V and Lemma 16.15(ii)
≈
δ ◦θ
inside V
by (vi)
Application-case: By assumption we have
σ(Γ) ⊢App t1 t2 : T ′ ,
from which we obtain a T ′′ such that
(i) σ(Γ) ⊢t1 : T ′′→T ′
and
(ii) σ(Γ) ⊢t2 : T ′′
holds. Using (i) and the assumption ftv Γ ⊆V, the induction hypothesis
gives us a θ, T, δ and V ′ such that
(iii)
(V ,Γ,t1) &→(V ′,θ,T)
(iv)
T ′′→T ′ = δ(T)
(v)
σ ≈δ ◦θ inside V .
From ftv Γ ⊆V and (v) we know that σ(Γ) = δ(θ(Γ)) holds. Using
Lemma 16.16(ii) and (iii) we can infer ftv (θ, Γ, T) ⊆V ′ which means
ftv (θ(Γ)) ⊆V ′ holds. In the induction hypothesis for t2 we can set Γ
to θ(Γ) and σ to δ. By using (ii) this gives us a θ ′, T ′′′, δ ′ and V ′′ such
that
(vi)
(V ′,θ(Γ),t2) &→(V ′′,θ ′,T ′′′)
(vii)
T ′′ = δ ′(T ′′′)
(viii)
δ ≈δ ′ ◦θ ′ inside V ′ .
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
379
We now choose a new type-variable X such that X # (V ′′, T ′′′, θ ′(T))
holds. By calculation we can show that the type ((X , T ′)::δ ′)(θ ′(T)) is
equal to ((X , T ′)::δ ′)(T ′′′→TVar X ).
Let-case: By the variable convention again, we know x # Γ, from which
we can infer that also x # σ(Γ) holds. By assumption we have σ(Γ) ⊢
Let x be t1 in t2 : T ′ . Taking the last two facts together we obtain a
T ′′ such that
(i) σ(Γ) ⊢t1 : T ′′
(ii) (x, close (σ(Γ)) T ′′)::σ(Γ) ⊢t2 : T ′
hold. By assumption (∗) ftv Γ ⊆V and induction hypothesis for t1, we
obtain a θ, T 1, δ and V ′ such that
(iii)
(V ,Γ,t1) &→(V ′,θ,T 1)
(iv)
T ′′ = δ(T 1)
(v)
σ ≈δ ◦θ inside V .
By the assumption (*) and (v) we have σ(Γ) = δ(θ(Γ)). Using
Lemma 16.9 and (iv) we can hence infer that
(x, close (σ(Γ)) T ′′)::σ(Γ)
δ((x, close (θ(Γ)) T 1)::θ(Γ)) .
Consequently we can use Lemma 16.8 and (ii) to infer
(vi) δ((x, close (θ(Γ)) T 1)::θ(Γ)) ⊢t2 : T ′
We can now use the induction hypothesis for t2 where we instantiate
σ with δ, and Γ with (x, close (θ(Γ)) T 1)::θ(Γ). Since from (iii), (∗)
and Lemma 16.16(ii) we have (∗∗) ftv (θ, Γ, T 1) ⊆V ′ and hence ftv
(θ(Γ)) ⊆V ′, we can show that ftv ((x, close (θ(Γ)) T 1)::θ(Γ)) ⊆V ′.
This allows us to use the induction hypothesis for t2 to obtain a θ ′, T 2,
δ ′ and V ′′ such that
(vii)
(V ′,(x, close (θ(Γ)) T 1)::θ(Γ),t2) &→(V ′′,θ ′,T 2)
(viii)
T ′ = δ ′(T 2)
(ix)
δ ≈δ ′ ◦θ ′ inside V ′ .
Using (viii) we can conclude provided we can further show that
(V ,Γ,Let x be t1 in t2) &→(V ′′,θ ′ ◦θ,T 2)
and
σ ≈δ ′ ◦θ ′ ◦θ inside V
hold. The ﬁrst follows from (iii), (vii) and the variable convention x #
Γ. The second follows using V ⊆V ′ (from (iii)) and the calculation:
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

380
C. Urban and T. Nipkow
σ
≈
δ ◦θ
inside V
by (v)
≈
δ ′ ◦θ ′ ◦θ
inside V
by (ix), (∗∗) and Lemma 16.15(iii)
This concludes the proof.
16.6 Conclusion
While the typing algorithm W is a classic algorithm implemented
numerous times, there are surprisingly few careful descriptions of
soundness and completeness proofs that can be readily used in a formal-
ization. For example in [13] a version of W is presented that leaves the
choice of fresh variables implicit and only states our Theorems 16.12
and 16.13; [6] gives a rigorous description for how to choose fresh
variables, but only presents the details for soundness and completeness
where this choice is left implicit. Two slick machine-checked proofs
for soundness and completeness were implemented previously [5, 9],
but both of these proofs code type and term variables using de Bruijn
indices. As a result they were not easily adaptable to our setting, since
they were streamlined for the representation of type schemes based on
de Bruijn indices. For example, many proofs in [9] are by induction
over the structure of type schemes, which we could not follow with our
representation involving iterated binders. Most of the inspiration for our
formalized proofs we have drawn from the treatment of soundness and
completeness given by Leroy [7]. He encodes type schemes by quantifying
over a whole set of variables in one go, and it took, surprisingly, a lot of
work to adapt his proofs to our representation where we can only bind
a single type variable in each quantiﬁcation-step.
Although the Nominal Datatype Package provides a convenient
reasoning infrastructure for α-equivalence classes, it did not provide as
much help for this formalization as one might hope. One reason is that
the package is not yet up to the task of representing general binding
structures, and thus it is not yet possible to implement type schemes
with a set of quantiﬁed type variables. Another reason is that the
algorithm W contains many subtle “low level” operations involving type
variables. This necessitates many α-renamings that had to be formalized
explicitly without much help from the nominal infrastructure. However,
we do not think that this can be avoided in any representation technique
for binders (bar de Bruijn indices) that has been put forward in various
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

Nominal veriﬁcation of algorithm W
381
theorem provers. Our formalization is part of the Nominal Datatype
Package, which can be downloaded at:
http://isabelle.in.tum.de/nominal/
Bibliography
[1]
D. Cl´ement, J. Despeyroux, T. Despeyroux, L. Hascoet and G. Kahn.
Natural semantics on the computer. In K. Fuchi and M. Nivat (eds),
Proceedings of the France-Japan AI and CS Symposium, ICOT, Japan,
pp.
49–89,
1986.
Also
Technical
Memorandum
PL-86-6
Information
Processing Society of Japan and Rapport de recherche #0416, INRIA.
[2]
D. Cl´ement, J. Despeyroux, T. Despeyroux and G. Kahn. A simple
applicative language: Mini-ML. In Proc. ACM Conf. Lisp and Functional
Programming, pp. 13–27, 1986.
[3]
L. Damas. Type Assignment in Programming Languages. PhD thesis,
University of Edinburgh, 1984.
[4]
L. Damas and R. Milner. Principal type schemes for functional programs.
In Proc. 9th ACM Symp. Principles of Programming Languages, pp. 207–
212, 1982.
[5]
C. Dubois and V. M´enissier-Morain. Certiﬁcation of a type inference
tool for ML: Damas-Milner within Coq. Journal of Automated Reasoning,
23:319–346, 1999.
[6]
C. A. Gunter. Semantics of Programming Languages. MIT Press, 1992.
[7]
X. Leroy. Polymorphic Typing of an Algorithmic Language. PhD thesis,
University Paris 7, 1992. INRIA Research Report, No 1778.
[8]
R. Milner. A theory of type polymorphism in programming. Journal of
Computer Systems Science, 17:348–375, 1978.
[9]
W. Naraschewski and T. Nipkow. Type inference veriﬁed: Algorithm W
in Isabelle/HOL. Journal of Automated Reasoning, 23:299–318, 1999.
[10]
T. Nipkow and L. C. Paulson. Proof pearl: Deﬁning functions over ﬁnite
sets. In J. Hurd (ed.) Theorem Proving in Higher Order Logics (TPHOLs
2005), volume 3603, Lecture Notes in Computer Science, pp.
385–396.
Springer-Verlag, 2005.
[11]
A. M. Pitts. Nominal logic, A ﬁrst order theory of names and binding.
Information and Computation, 186:165–193, 2003.
[12]
A. M. Pitts and M. J. Gabbay. A metalanguage for programming with
bound names modulo renaming. In Proc. of the 5th International Conference
on Mathematics of Program Construction (MPC), volume 1837, Lecture
Notes in Computer Science, pp. 230–255. Springer-Verlag, 2000.
[13]
M. Tofte. Operational Semantics and Polymorphic Type Inference. PhD
thesis. Edinburgh University, 1988.
[14]
C. Urban and S. Berghofer. A recursion combinator for nominal
datatypes implemented in Isabelle/HOL. In Proc. of the 3rd International
Joint Conference on Automated Reasoning (IJCAR), volume 4130, Lecture
Notes in Artiﬁcial Intelligence, pp. 498–512. Springer-Verlag, 2006.
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

382
C. Urban and T. Nipkow
[15]
C. Urban, S. Berghofer and M. Norrish. Barendregt’s variable convention
in rule inductions. In Proc. of the 21th International Conference on
Automated Deduction (CADE), volume 4603, Lecture Notes in Artiﬁcial
Intelligence, pp. 35–50. Springer-Verlag, 2007.
[16]
C. Urban and C. Tasson. Nominal Techniques in Isabelle/HOL. In
Proc. of the 20th International Conference on Automated Deduction
(CADE), volume 3632, Lecture Notes in Computer Science, pp. 38–53,
Springer-Verlag, 2005.
https://doi.org/10.1017/CBO9780511770524.017 Published online by Cambridge University Press

