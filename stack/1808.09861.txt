Neural Cross-Lingual Named Entity Recognition with Minimal Resources
Jiateng Xie,1 Zhilin Yang,1Graham Neubig,1
Noah A. Smith,2,3 and Jaime Carbonell1
1Language Technologies Institute, Carnegie Mellon University
2Paul G. Allen School of Computer Science & Engineering, University of Washington
3Allen Institute for Artiﬁcial Intelligence
{jiatengx,zhiliny,gneubig,jgc}@cs.cmu.edu,
nasmith@cs.washington.edu
Abstract
For languages with no annotated resources,
unsupervised transfer of natural language pro-
cessing models such as named-entity recog-
nition (NER) from resource-rich languages
would be an appealing capability. However,
differences in words and word order across
languages make it a challenging problem. To
improve mapping of lexical items across lan-
guages, we propose a method that ﬁnds trans-
lations based on bilingual word embeddings.
To improve robustness to word order differ-
ences, we propose to use self-attention, which
allows for a degree of ﬂexibility with respect
to word order.
We demonstrate that these
methods achieve state-of-the-art or competi-
tive NER performance on commonly tested
languages under a cross-lingual setting, with
much lower resource requirements than past
approaches. We also evaluate the challenges
of applying these methods to Uyghur, a low-
resource language.1
1
Introduction
Named entity recognition (NER), the task of de-
tecting and classifying named entities from text
into a few predeﬁned categories such as people, lo-
cations or organizations, has seen the state-of-the-
art greatly advanced by the introduction of neu-
ral architectures
(Collobert et al., 2011; Huang
et al., 2015; Chiu and Nichols, 2016; Lample et al.,
2016; Yang et al., 2016; Ma and Hovy, 2016; Pe-
ters et al., 2017; Liu et al., 2018; Peters et al.,
2018). However, the success of these methods is
highly dependent on a reasonably large amount of
annotated training data, and thus it remains a chal-
lenge to apply these models to languages with lim-
ited amounts of labeled data. Cross-lingual NER
attempts to address this challenge by transferring
1The source code is available at https://github.
com/thespectrewithin/cross-lingual_NER
knowledge from a high-resource source language
with abundant entity labels to a low-resource tar-
get language with few or no labels. Speciﬁcally,
in this paper we attempt to tackle the extreme sce-
nario of unsupervised transfer, where no labeled
data is available in the target language. Within
this paradigm, there are two major challenges to
tackle: how to effectively perform lexical mapping
between the languages, and how to address word
order differences.
To cope with the ﬁrst challenge of lexical map-
ping, a number of methods use parallel corpora
to project annotations between languages through
word alignment (Ehrmann et al., 2011; Kim et al.,
2012; Wang and Manning, 2014; Ni et al., 2017).
Since parallel corpora may not be always avail-
able,
Mayhew et al. (2017) proposed a “cheap
translation” approach that uses a bilingual dictio-
nary to perform word-level translation. The above
approaches provide a reasonable proxy for the
actual labeled training data, largely because the
words that participate in entities can be translated
relatively reliably given extensive parallel dictio-
naries or corpora (e.g., with 1 million word pairs
or sentences). Additionally, as a side beneﬁt of
having explicitly translated words, models can di-
rectly exploit features extracted from the surface
forms (e.g. through character-level neural feature
extractors), which has proven essential for high
accuracy in the monolingual scenario (Ma and
Hovy, 2016). However, these methods are largely
predicated on the availability of large-scale paral-
lel resources, and thus, their applicability to low-
resource languages is limited.
In contrast, it is also possible to learn lex-
ical mappings through bilingual word embed-
dings (BWE). These bilingual embeddings can
be obtained by using a small dictionary to
project two sets of embeddings into a consistent
space (Mikolov et al., 2013a; Faruqui and Dyer,
arXiv:1808.09861v2  [cs.CL]  11 Sep 2018

2014; Artetxe et al., 2016; Smith et al., 2017),
or even in an entirely unsupervised manner using
adversarial training or identical character strings
(Zhang et al., 2017; Artetxe et al., 2017; Lam-
ple et al., 2018).
Many approaches in the past
have leveraged the shared embedding space for
cross-lingual applications (Guo et al., 2015; Am-
mar et al., 2016b; Zhang et al., 2016; Fang and
Cohn, 2017), including NER (Bharadwaj et al.,
2016; Ni et al., 2017). The minimal dependency
on parallel resources makes the embedding-based
method much more suitable for low-resource lan-
guages. However, since different languages have
different linguistic properties, it is hard, if not im-
possible, to align the two embedding spaces per-
fectly (see Figure 1).
Meanwhile, because sur-
face forms are not available, character-level fea-
tures cannot be used, resulting in reduced tagging
accuracy (as demonstrated in our experiments).
To address the above issues, we propose a new
lexical mapping approach that combines the ad-
vantages of both discrete dictionary-based meth-
ods and continuous embedding-based methods.
Speciﬁcally, we ﬁrst project embeddings of dif-
ferent languages into the shared BWE space, then
learn discrete word translations by looking for
nearest neighbors in this projected space, and ﬁ-
nally train a model on the translated data. This
allows our method to inherit the beneﬁts of both
embedding-based and dictionary-based methods:
its resource requirements are low as in the former,
but it suffers less from misalignment of the em-
bedding spaces and has access to character-level
information like the latter.
Turning to differences in word ordering, to
our knowledge there are no methods that explic-
itly deal with this problem in unsupervised cross-
lingual transfer for NER. Our second contribu-
tion is a method to alleviate this issue by incor-
porating an order-invariant self-attention mech-
anism (Vaswani et al., 2017; Lin et al., 2017)
into our neural architecture.
Self-attention al-
lows re-ordering of information within a partic-
ular encoded sequence, which makes it possible
to account for word order differences between the
source and the target languages.
In our experiments, we start with models trained
in English as the source language on the CoNLL
2002 and 2003 datasets and transfer them into
Spanish, Dutch, and German as the target lan-
guages. Our approach obtains new state-of-the-
art cross-lingual results in Spanish and Dutch, and
competitive results in German, even without a
dictionary, completely removing the need for re-
sources such as Wikipedia and parallel corpora.
Next, we transfer English using the same approach
into Uyghur, a truly low-resource language. With
signiﬁcantly fewer cross-lingual resources, our ap-
proach can still perform competitively with previ-
ous best results.
2
Approach
We establish our problem setting (§2.1), then
present our methods in detail (§2.2), and provide
some additional motivation (§2.3).
2.1
Problem Setting
NER takes a sentence as the input and outputs a se-
quence of labels corresponding to the named entity
categories of the words in the sentence, such as lo-
cation, organization, person, or none. In standard
supervised NER, we are provided with a labeled
corpus of sentences in the target language along
with tags indicating which spans correspond to en-
tities of each type.
As noted in the introduction, we study the prob-
lem of unsupervised cross-lingual NER: given la-
beled training data only in a separate source lan-
guage, we aim to learn a model that is able to per-
form NER in the target language. This transfer
can be performed using a variety of resources, in-
cluding parallel corpora (T¨ackstr¨om et al., 2012;
Ni et al., 2017), Wikipedia (Nothman et al., 2013),
and large dictionaries (Ni et al., 2017; Mayhew
et al., 2017). In this work, we limit ourselves to
a setting where we have the following resources,
making us comparable to other methods such as
Mayhew et al. (2017) and Ni et al. (2017):
• Labeled training data in the source language.
• Monolingual corpora in both source and target
languages.
• A dictionary, either a small pre-existing one, or
one induced by unsupervised methods.
2.2
Method
Our method follows the process below:
1. Train separate word embeddings using mono-
lingual corpora using standard embedding train-
ing methods (§2.2.1).
2. Project word embeddings in the two languages
into a shared embedding space by optimizing

Figure 1: Example of the result of our approach on Spanish-English words not included in the dictionary (em-
beddings are reduced to 2 dimensions for visual clarity). We ﬁrst project word embeddings into a shared space,
and then use the nearest neighbors for word translation. Notice that the word pairs are not perfectly aligned in the
shared embedding space, but after word translation we obtain correct alignments.
the word embedding alignment using the given
dictionary (§2.2.2).
3. For each word in the source language training
data, translate it by ﬁnding its nearest neighbor
in the shared embedding space (§2.2.3).
4. Train an NER model using the translated words
along with the named entity tags from the En-
glish corpus (§2.2.4).
We consider each in detail.
2.2.1
Learning Monolingual Embeddings
Given text in the source and target language, we
ﬁrst independently learn word embedding matri-
ces X and Y in the source and target languages
respectively. These embeddings can be learned on
monolingual text in both languages with any of
the myriad of word embedding methods (Mikolov
et al., 2013b; Pennington et al., 2014; Bojanowski
et al., 2017).
2.2.2
Learning Bilingual Embeddings
Next, we learn a cross-lingual projection of X
and Y into a shared space. Assume we are given
a dictionary {xi, yi}D
i=1, where xi and yi denote
the embeddings of a word pair.
Let XD
=
[x1, x2, · · · , xD]⊤and YD = [y1, y2, · · · , yD]⊤
denote two embedding matrices consisting of
word pairs from the dictionary.
Following previous work (Zhang et al., 2016;
Artetxe et al., 2016; Smith et al., 2017), we opti-
mize the following objective:
min
W
d
X
i=1
∥Wxi −yi∥2 s.t. WW ⊤= I,
where W is a square parameter matrix. This ob-
jective can be further simpliﬁed as
max
W Tr(XDWY ⊤
D ) s.t. WW ⊤= I.
Here, the transformation matrix W is constrained
to be orthogonal so that the dot product similarity
of words is invariant with respect to the transfor-
mation both within and across languages.
To optimize the above objective (the Procrustes
problem), we decompose the matrix Y ⊤
D XD us-
ing singular value decomposition. Let the results
be Y ⊤
D XD = U P V ⊤, then W = UV ⊤gives
the exact solution. We deﬁne the similarity ma-
trix between X and Y to be S = Y WX⊤=
Y U(XV )⊤, where each column contains the co-
sine similarity between source word xi and all tar-
get words yi. We can then deﬁne X′ = XV and
Y ′ = Y U, which are X and Y transformed into a
shared embedding space.
To reﬁne the alignment in this shared space fur-
ther, we iteratively perform a self-learning reﬁne-
ment step k 2 times by:
1. Using the aligned embeddings to generate a new
dictionary that consists of mutual nearest neigh-
bors obtained using the same metric as intro-
duced below.
2. Solving the Procrustes problem based on the
newly generated dictionary to get a new set of
bilingual embeddings.
The bilingual embeddings at the end of the kth
step, X′
k and Y ′
k, will be used to perform trans-
lation.
2.2.3
Learning Word Translations
To learn actual word translations, we next pro-
ceed to perform nearest-neighbor search in the
2We use k = 3 in this paper.

common space. Instead of using a common dis-
tance metric such as cosine similarity, we adopt
the cross-domain similarity local scaling (CSLS)
metric (Lample et al., 2018), which is designed
to address the hubness problem common to the
shared embedding space (Dinu and Baroni, 2014).
Speciﬁcally,
CSLS(xi, yj) = 2 cos(xi, yj) −rT (xi) −rS(yj)
where rT (xi) =
1
K
P
yt∈NT (xi) cos(xi, yt) de-
notes the mean cosine similarity between xi and
its K neighbors yt.
Using this metric, we ﬁnd
translations for each source word s by selecting
target word ˆts where ˆts = arg max
t
CSLS(xs, yt).
2.2.4
Training the NER Model
Finally, we translate the entire English NER train-
ing data into the target language by taking English
sentences S = s1, s2, ..., sn and translating them
into target sentences ˆT = ˆt1, ˆt2, ..., ˆtn. The la-
bel of each English word is copied to be the la-
bel of the target word. We can then train an NER
model directly using the translated data. Notably,
because the model has access to the surface forms
of the target sentences, it can use the character se-
quences of the target language as part of its input.
During learning, all word embeddings are nor-
malized to lie on the unit ball, allowing every
training pair an equal contribution to the objective
and improving word translation accuracy (Artetxe
et al., 2016). When training the NER model, how-
ever, we do not normalize the word embeddings,
because preliminary experiments showed the orig-
inal unnormalized embeddings gave superior re-
sults. We suspect this is due to frequency infor-
mation conveyed by vector length, an important
signal for NER. (Named entities appear less fre-
quently in the monolingual corpus.)
2.3
Discussion
Figure 1 shows an example of the embeddings and
translations learned with our approach trained on
Spanish and English data from the experiments
(see §4 for more details). As shown in the ﬁgure,
there is usually a noticeable difference between
the word embeddings of a word pair in different
languages, which is inevitable because different
languages have distinct traits and different mono-
lingual data, and as a result it is intrinsically hard
to learn a perfect alignment. This indicates that
models trained directly on data using the source
A
A
A
A
A
A
A
A
O
O
B-LOC
I-LOC
Word
Embedding
Char
Embedding
Word
Bi-LSTM
CRF
Layer
flights
from
Diego
A
A
A
A
A
A
S
a
n
Char
Bi-LSTM
Masked Self-attention
Global
Context
LSTM 
Output
Figure 2: Self-attentive Bi-LSTM-CRF Model
embeddings may not generalize well to the slightly
different embeddings of the target language.
Instead of directly modeling the shared embed-
ding space (Guo et al., 2015; Zhang et al., 2016;
Fang and Cohn, 2017; Ni et al., 2017), we lever-
age the shared embedding space for word transla-
tion. As shown in Figure 1, unaligned word pairs
can still be translated correctly with our method, as
the embeddings are still closer to the correct trans-
lations than the closest incorrect one.
3
NER Model Architecture
We describe the model we use to perform NER.
We will ﬁrst describe the basic hierarchical neural
CRF tagging model (Lample et al., 2016; Ma and
Hovy, 2016; Yang et al., 2016), and introduce the
self-attention mechanism that we propose to deal
with divergence of word order.
3.1
Hierarchical Neural CRF
The hierarchical CRF model consists of three
components: a character-level neural network, ei-
ther an RNN or a CNN, that allows the model to
capture subword information, such as morpholog-
ical variations and capitalization patterns; a word-
level neural network, usually an RNN, that con-
sumes word representations and produces context

sensitive hidden representations for each word;
and a linear-chain CRF layer that models the de-
pendency between labels and performs inference.
In this paper, we closely follow the architecture
proposed by
Lample et al. (2016), and use bi-
directional LSTMs for both the character level and
word level neural networks.
Speciﬁcally, given
an input sequence of words (w1, w2, ..., wn), and
each word’s corresponding character sequence,
the model ﬁrst produces a representation for each
word, xi, by concatenating its character rep-
resentation with its word embedding.
Subse-
quently, the word representations of the input se-
quence (x1, x2, · · · , xn) are fed into a word level
Bi-LSTM, which models the contextual depen-
dency within each sentence and outputs a se-
quence of context sensitive hidden representations
(h1, h2, · · · , hn).
A CRF layer is then applied
on top of the word level LSTM and takes in as
its input the sequence of hidden representations
(h1, h2, · · · , hn), and deﬁnes the joint distribution
of all possible output label sequences. The Viterbi
algorithm is used during decoding.
3.2
Self-Attention
The training-time inputs to our model are in
essence corrupted sentences from the target lan-
guage (e.g., Spanish), which have a different or-
der from natural target sentences. We propose to
alleviate this problem by adding a self-attention
layer (Vaswani et al., 2017) on top of the word-
level Bi-LSTM. Self-attention provides each word
with a context feature vector based on all the
words of a sentence. As the context vectors are
obtained irrespective of the words’ positions in a
sentence, at test time, the model is more likely to
see vectors similar to those seen at training time,
which we posit introduces a level of ﬂexibility
with respect to the word order, and thus may al-
low for better generalization.
Let H = [h1, h2, · · · , hn]⊤be a sequence of
word-level hidden representations.
We apply a
single layer MLP on H to obtain the queries Q
and keys K = tanh(HW + b), where W ∈Rd×d
is a parameter matrix and b ∈Rd is a bias term,
with d being the hidden state size. The output of
attention layer is deﬁned as:
Ha = softmax(QK⊤) ⊙(E −I)H
= [ha
1, ha
2, ..., ha
3]⊤
where I is an identity matrix and E is an all-one
matrix.
The term (E −I) serves as an atten-
tion mask that prevents the weights from center-
ing on the word itself, as we would like to provide
each word with sentence level context. The out-
puts from the self-attention layer are then concate-
nated with the original hidden representations to
form the ﬁnal inputs to the CRF layer, which are
([h1, ha
1], [h2, ha
2], ..., [h3, ha
3]).
4
Experiments
To examine the effectiveness of both of our pro-
posed methods, we conduct four sets of experi-
ments.
First, we evaluate our model both with
and without provided dictionaries on a benchmark
NER dataset and compare with previous state-of-
the-art results.
Second, we compare our meth-
ods against a recently proposed dictionary-based
translation baseline (Mayhew et al., 2017) by di-
rectly applying our model on their translated data.3
Subsequently, we conduct an ablation study to fur-
ther understand our proposed methods.
Lastly,
we apply our methods to a truly low-resource lan-
guage, Uyghur.
4.1
Experimental Settings
We evaluate our proposed methods on the bench-
mark CoNLL 2002 and 2003 NER datasets
(Tjong Kim Sang, 2002; Tjong Kim Sang and
De Meulder, 2003), which contain 4 European lan-
guages, English, German, Dutch and Spanish. For
all experiments, we use English as the source lan-
guage and translate its training data into the target
language. We train a model on the translated data,
and test it on the target language. For each exper-
iment, we run our models 5 times using different
seeds and report the mean and standard deviation,
as suggested by Reimers and Gurevych (2017).
Word Embeddings For all languages, we use
two different embedding methods, fastText (Bo-
janowski et al., 2017) and GloVe
(Pennington
et al., 2014), to perform word-embedding based
translations and train the NER model, respectively.
For fastText, we use the publicly available em-
beddings trained on Wikipedia for all languages.
For GloVe, we use the publicly available embed-
dings pre-trained on Gigaword and Wikipedia for
English.
For Spanish, German and Dutch, we
use Spanish Gigaword and Wikipedia, German
WMT News Crawl data and Wikipedia, and Dutch
3We thank the authors of Mayhew et al. (2017) for shar-
ing their data.

Wikipedia, respectively, to train the GloVe word
embeddings. We use a vocabulary size of 100,000
for both embedding methods.
Dictionary We consider three different settings
to obtain the seed dictionary, including two meth-
ods that do not use parallel resources:
1. Use identical character strings shared between
the two vocabularies as the seed dictionary.
2. Lample et al. (2018)’s method of using adver-
sarial learning to induce a mapping that aligns
the two embedding spaces, and the mutual near-
est neighbors in the shared space will be used as
a dictionary. The learning procedure is formu-
lated as a two player game, where a discrim-
inator is trained to distinguish words from the
two embedding spaces, and a linear mapping is
trained to align the two embedding spaces and
thus fool the discriminator.
3. Use a provided dictionary. In our experiments,
we use the ones provided by Lample et al.
(2018),4 each of which contain 5,000 source
words and about 10,000 entries.
Translation We follow the general procedure
described in Section 2, and replace each word
from the English training data with its correspond-
ing word in the target language.
For out-of-
vocabulary (OOV) words, we simply keep them
as-is. We capitalize the resulting sentences fol-
lowing the pattern of the original English words.
Note that for German, simply following the En-
glish capitalization pattern does not work, because
all nouns in German are capitalized. To handle
this problem, we count the number of times each
word is capitalized in Wikipedia, and capitalize
the word if the probability is greater than 0.6.
Network Parameters For our experiments, we
set the character embedding size to be 25, char-
acter level LSTM hidden size to be 50, and word
level LSTM hidden size to be 200.
For OOV
words, we initialize an unknown embedding by
uniformly sampling from range [−
q
3
emb, +
q
3
emb],
where emb is the size of embedding, 100 in our
case. We replace each number with 0 when used
as input to the character level Bi-LSTM.
Network Training We use SGD with momen-
tum to train the NER model for 30 epochs, and
select the best model on the target language de-
velopment set. We choose the initial learning rate
4https://github.com/facebookresearch/
MUSE
to be η0 = 0.015, and update it using a learning
decay mechanism after each epoch, ηt =
η0
1+ρt,
where t is the number of completed epoch and
ρ = 0.05 is the decay rate.
We use a batch
size of 10 and evaluate the model per 150 batches
within each epoch. We apply dropout on the in-
puts to the word-level Bi-LSTM, the outputs of
the word-level Bi-LSTM, and the outputs of the
self-attention layer to prevent overﬁtting. The self-
attention dropout rate is set to 0.5 when using
our translated data, and 0.2 when using cheap-
translation data. We use 0.5 for all other dropouts.
The word embeddings are not ﬁne-tuned during
training.
4.2
Results
Table 1 presents our results on transferring from
English to three other languages, alongside results
from previous studies. Here “BWET” (bilingual
word embedding translation) denotes using the hi-
erarchical neural CRF model trained on data trans-
lated from English. As can be seen from the ta-
ble, our methods outperform previous state-of-the-
art results on Spanish and Dutch by a large mar-
gin and perform competitively on German even
without using any parallel resources. We achieve
similar results using different seed dictionaries,
and produce the best results when adding the self-
attention mechanism to our model.
Despite the good performance on Spanish and
Dutch, our model does not outperform the previ-
ous best result on German, and we speculate that
there are a few reasons. First, German has rich
morphology and contains many compound words,
making the word embeddings less reliable. Our
supervised result on German indicates the same
problem, as it is about 8 F1 points worse than
Spanish and Dutch. Second, these difﬁculties be-
come more pronounced in the cross-lingual set-
ting, leading to a noisier embedding space align-
ment, which lowers the quality of BWE-based
translation.
We believe that this is a problem
with all methods using word embeddings. In such
cases, more resource-intensive methods may be
necessary.
4.2.1
Comparison with Dictionary-Based
Translation
Table 1 also presents results of a comparison be-
tween our proposed BWE translation method and
the “cheap translation” baseline of (Mayhew et al.,
2017). The size of the dictionaries used by both

Model
Spanish
Dutch
German
Extra Resources
∗
T¨ackstr¨om et al. (2012)
59.30
58.40
40.40
parallel corpus
∗
Nothman et al. (2013)
61.0
64.00
55.80
Wikipedia
∗
Tsai et al. (2016)
60.55
61.60
48.10
Wikipedia
∗
Ni et al. (2017)
65.10
65.40
58.50
Wikipedia, parallel corpus, 5K dict.
∗†
Mayhew et al. (2017)
65.95
66.50
59.11
Wikipedia, 1M dict.
∗
Mayhew et al. (2017) (only Eng. data)
51.82
53.94
50.96
1M dict.
Our methods:
BWET (id.c.)
71.14 ± 0.60
70.24 ± 1.18
57.03 ± 0.25
–
BWET (id.c.) + self-att.
72.37 ± 0.65
70.40 ± 1.16
57.76 ± 0.12
–
BWET (adv.)
70.54 ± 0.85
70.13 ± 1.04
55.71 ± 0.47
–
BWET (adv.) + self-att.
71.03 ± 0.44
71.25 ± 0.79
56.90 ± 0.76
–
BWET
71.33 ± 1.26
69.39 ± 0.53
56.95 ± 1.20
10K dict.
BWET + self-att.
71.67 ± 0.86
70.90 ± 1.09
57.43 ± 0.95
10K dict.
∗
BWET on data from Mayhew et al. (2017)
66.53 ± 1.12
69.24 ± 0.66
55.39 ± 0.98
1M dict.
∗
BWET + self-att. on data from Mayhew et al. (2017)
66.90 ± 0.65
69.31 ± 0.49
55.98 ± 0.65
1M dict.
∗
Our supervised results
86.26 ± 0.40
86.40 ± 0.17
78.16 ± 0.45
annotated corpus
Table 1: NER F1 scores. ∗Approaches that use more resources than ours (“Wikipedia” means Wikipedia is used
not as a monolingual corpus, but to provide external knowledge).
†Approaches that use multiple languages for
transfer. “Only Eng. data” is the model used in Mayhew et al. (2017) trained on their data translated from English
without using Wikipedia and other languages. The “data from Mayhew et al. (2017)” is the same data translated
from only English they used. “Id.c.” indicates using identical character strings between the two languages as
the seed dictionary. “Adv.” indicates using adversarial training and mutual nearest neighbors to induce a seed
dictionary. Our supervised results are obtained using models trained on annotated corpus from CoNLL.
approaches are given in the right-most column.
Using our model on their translated data from En-
glish outperforms the baseline scores produced by
their models over all languages, a testament to the
strength of our neural CRF baseline. The results
produced by our model on their data indicate that
our approach is effective, as we manage to outper-
form their approaches on all three languages using
much smaller dictionaries and even without dictio-
naries. Also, we see that self-attention is effective
when applied on their data, which also does not
carry the correct word order.
4.2.2
Why Does Translation Work Better?
In this section, we study the effects of differ-
ent ways of using bilingual word embeddings and
the resulting induced translations. As we pointed
out previously, ﬁnding translations has two advan-
tages: (1) the model can be trained on the exact
points from the target embedding space, and (2)
the model has access to the target language’s orig-
inal character sequences. Here, we conduct abla-
tion studies over these two variables. Speciﬁcally,
we consider the following three variants.5
• Common space This is the most common set-
ting for using bilingual word embeddings, and
has recently been applied in NER (Ni et al.,
2017). In short, the source and target word em-
beddings are cast into a common space, namely
5In this study, we use GloVe for learning bilingual embed-
dings and word translations instead of fastText.
X′ = XV and Y ′ = Y U, and the model is
trained with the source side embedding and the
source character sequence, and directly applied
on the target side.
• Replace In this setting, we replace each original
word embedding xi with its nearest neighbor yi
in the common space but do not perform trans-
lation. This way, the model will be trained with
target word embeddings and source-side char-
acter sequences.
• Translation This is our proposed approach,
where the model is trained on both exact points
in the target space and target language character
sequences.
The three variants are compared in Table 2.
The “common space” variant performs the worst
by a large margin, conﬁrming our hypothesis that
discrepancy between the two embedding spaces
harms the model’s ability to generalize. From the
comparison between the “replace” and “transla-
tion,” we observe that having access to the target
language’s character sequence helps performance,
especially for German, perhaps due in part to its
capitalization patterns, which differ from English.
In this case, we have to lower-case all the words
for character inputs in order to prevent the model
from overﬁtting the English capitalization pattern.

Model
Spanish
Dutch
German
Common space
65.40 ± 1.22
66.15 ± 1.62
43.73 ± 0.94
Replace
68.21 ± 1.22
69.37 ± 1.33
48.59 ± 1.21
Translation
69.21 ± 0.95
69.39 ± 1.21
53.94 ± 0.66
Table 2: Comparison of different ways of using bilingual word embeddings, within our method (NER F1).
Model
Uyghur Unsequestered Set
Extra Resources
∗†
Mayhew et al. (2017)
51.32
Wikipedia, 100K dict.
∗
Mayhew et al. (2017) (only Eng. data)
27.20
Wikipedia, 100K dict.
BWET
25.73 ± 0.89
5K dict.
BWET + self-att.
26.38 ± 0.34
5K dict.
∗
BWET on data from Mayhew et al. (2017)
30.20 ± 0.98
Wikipedia, 100K dict.
∗
BWET + self-att. on data from Mayhew et al. (2017)
30.68 ± 0.45
Wikipedia, 100K dict.
∗
Combined (see text)
31.61 ± 0.46
Wikipedia, 100K dict., 5K dict.
∗
Combined + self-att.
32.09 ± 0.61
Wikipedia, 100K dict., 5K dict.
Table 3: NER F1 scores on Uyghur. ∗Approaches using language-speciﬁc features and resources (“Wikipedia”
means Wikipedia is used not as a monolingual corpus, but to provide external knowledge).
†Approaches that
transfer from multiple languages and use language-speciﬁc techniques.
4.3
Case Study: Uyghur
In this section, we directly apply our approach
to Uyghur, a truly low-resource language with
very limited monolingual and parallel resources.
We test our model on 199 annotated evaluation
documents from the DARPA LORELEI program
(the “unsequestered set”) and compare with previ-
ously reported results in the cross-lingual setting
by Mayhew et al. (2017). Similar to our previous
experiments, we transfer from English, use fast-
Text embeddings trained on Common Crawl and
Wikipedia6 and a provided dictionary to perform
translation, and use GloVe trained on a monolin-
gual corpus that has 30 million tokens to perform
NER. Results are presented in Table 3.
Our method performs competitively, consid-
ering that we use a much smaller dictionary
than Mayhew et al. (2017) and no knowledge from
Wikipedia in Uyghur. Our best results come from
a combined approach: using word embeddings to
translate words that are not covered by Mayhew
et al. (2017)’s dictionary (last line of Table 3).
Note that for the CoNLL languages,
Mayhew
et al. (2017) used Wikipedia for the Wikiﬁer fea-
tures (Tsai et al., 2016), while for Uyghur they
used it for translating named entities, which is cru-
cial for low-resource languages when some named
entities are not covered by the dictionary or the
translation is not reliable. We suspect that the un-
reliable translation of named entities is the ma-
6https://github.com/facebookresearch/
fastText/blob/master/docs/crawl-vectors.
md
jor reason why our method alone performs worse
but performs better when combined with their data
that has access to higher quality translations of
named entities.
The table omits results using adversarial learn-
ing and identical character strings, as both failed
(F1 scores around 10). We attribute these failures
to the low quality of Uyghur word embeddings and
the fact that the two languages are distant. Also,
Uyghur is mainly written in Arabic script, mak-
ing the identical character method inappropriate.
Overall, this reveals a practical challenge for mul-
tilingual embedding methods, where the underly-
ing distributions of the text in the two languages
are divergent.
5
Related Work
Cross-Lingual Learning Cross-lingual learning
approaches can be loosely classiﬁed into two
categories: annotation projection and language-
independent transfer.
Annotation projection methods create training
data by using parallel corpora to project annota-
tions from the source to the target language. Such
approaches have been applied to many tasks un-
der the cross-lingual setting, such as POS tag-
ging (Yarowsky et al., 2001; Das and Petrov, 2011;
T¨ackstr¨om et al., 2013; Fang and Cohn, 2016),
mention detection (Zitouni and Florian, 2008) and
parsing (Hwa et al., 2005; McDonald et al., 2011).
Language
independent
transfer-based
ap-
proaches build models using language indepen-
dent and delexicalized features.
For instance,

Zirikly and Hagiwara (2015) transfers word
cluster and gazetteer features through the use of
comparable copora. Tsai et al. (2016) links words
to Wikipedia entries and uses the entry category
as features to train language independent NER
models.
Recently, Ni et al. (2017) propose to
project word embeddings into a common space as
language independent features. These approaches
utilize such features by training a model on the
source language and directly applying it to the
target language.
Another way of performing language indepen-
dent transfer resorts to multi-task learning, where
a model is trained jointly across different lan-
guages by sharing parameters to allow for knowl-
edge transfer (Ammar et al., 2016a; Yang et al.,
2017; Cotterell and Duh, 2017; Lin et al., 2018).
However, such approaches usually require some
amounts of training data in the target language
for bootstrapping, which is different from our un-
supervised approach that requires no labeled re-
sources in the target language.
Bilingual Word Embeddings
There have been
two general paradigms in obtaining bilingual word
vectors besides using dictionaries: through paral-
lel corpora and through joint training. Approaches
based on parallel corpora usually learn bilingual
word embeddings that can produce similar repre-
sentations for aligned sentences
(Hermann and
Blunsom, 2014; Chandar et al., 2014).
Jointly-
trained models combine the common monolin-
gual training objective with a cross-lingual train-
ing objective that often comes from parallel corpus
(Zou et al., 2013; Gouws et al., 2015). Recently,
unsupervised approaches also have been used to
align two sets of word embeddings by learning
a mapping through adversarial learning or self-
learning (Zhang et al., 2017; Artetxe et al., 2017;
Lample et al., 2018).
6
Conclusion
In this paper, we propose two methods to tackle
the cross-lingual NER problem under the unsuper-
vised transfer setting. To address the challenge of
lexical mapping, we ﬁnd translations of words in
a shared embedding space built from a seed lex-
icon. To alleviate word order divergence across
languages, we add a self-attention mechanism to
our neural architecture. With these methods com-
bined, we are able to achieve state-of-the-art or
competitive results on commonly tested languages
under a cross-lingual setting, with lower resource
requirements than past approaches. We also eval-
uate the challenges of applying these methods to
an extremely low-resource language, Uyghur.
Acknowledgments
We thank Stephen Mayhew for sharing the data,
and Zihang Dai for meaningful discussion.
This research was sponsored by Defense Ad-
vanced Research Projects Agency Information In-
novation Ofﬁce (I2O) under the Low Resource
Languages for Emergent Incidents (LORELEI)
program, issued by DARPA/I2O under Contract
No. HR0011-15-C0114. The views and conclu-
sions contained in this document are those of the
authors and should not be interpreted as repre-
senting the ofﬁcial policies, either expressed or
implied, of the U.S. government. The U.S. gov-
ernment is authorized to reproduce and distribute
reprints for government purposes notwithstanding
any copyright notation here on.
References
Waleed Ammar, George Mulcaire, Miguel Ballesteros,
Chris Dyer, and Noah A. Smith. 2016a. Many lan-
guages, one parser. Transactions of the Association
for Computational Linguistics, 4:431–444.
Waleed Ammar, George Mulcaire, Yulia Tsvetkov,
Guillaume Lample, Chris Dyer, and Noah A. Smith.
2016b.
Massively multilingual word embeddings.
https://arxiv.org/pdf/1602.01925.
Mikel Artetxe, Gorka Labaka, and Eneko Agirre. 2016.
Learning principled bilingual mappings of word em-
beddings while preserving monolingual invariance.
In EMNLP, pages 2289–2294.
Mikel Artetxe, Gorka Labaka, and Eneko Agirre. 2017.
Learning bilingual word embeddings with (almost)
no bilingual data. In ACL, pages 451–462.
Akash Bharadwaj, David Mortensen, Chris Dyer, and
Jaime Carbonell. 2016. Phonologically aware neu-
ral model for named entity recognition in low re-
source transfer settings. In EMNLP, pages 1462–
1472.
Piotr Bojanowski, Edouard Grave, Armand Joulin, and
Tomas Mikolov. 2017. Enriching word vectors with
subword information. Transactions of the Associa-
tion for Computational Linguistics, 5:135–146.
Sarath Chandar, Stanislas Lauly, Hugo Larochelle,
Mitesh Khapra, Balaraman Ravindran, Vikas C
Raykar, and Amrita Saha. 2014.
An autoencoder
approach to learning bilingual word representations.
In NIPS, pages 1853–1861.

Jason Chiu and Eric Nichols. 2016.
Named entity
recognition with bidirectional lstm-cnns. Transac-
tions of the Association for Computational Linguis-
tics, 4:357–370.
Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011.
Natural language processing (almost) from
scratch.
Journal of Machine Learning Research,
12(Aug):2493–2537.
Ryan Cotterell and Kevin Duh. 2017.
Low-
resource named entity recognition with cross-
lingual, character-level neural conditional random
ﬁelds. In IJCNLP, pages 91–96.
Dipanjan Das and Slav Petrov. 2011.
Unsupervised
part-of-speech tagging with bilingual graph-based
projections. In ACL, pages 600–609.
Georgiana Dinu and Marco Baroni. 2014. Improving
zero-shot learning by mitigating the hubness prob-
lem. CoRR, abs/1412.6568.
Maud Ehrmann, Marco Turchi, and Ralf Steinberger.
2011.
Building a multilingual named entity-
annotated corpus using annotation projection.
In
RANLP, pages 118–124.
Meng Fang and Trevor Cohn. 2016. Learning when
to trust distant supervision: An application to low-
resource POS tagging using cross-lingual projection.
In CoNLL, pages 178–186.
Meng Fang and Trevor Cohn. 2017.
Model transfer
for tagging low-resource languages using a bilingual
dictionary. In ACL, pages 587–593.
Manaal Faruqui and Chris Dyer. 2014. Improving vec-
tor space word representations using multilingual
correlation. In ACL, pages 462–471.
Stephan Gouws, Yoshua Bengio, and Greg Corrado.
2015. Bilbowa: Fast bilingual distributed represen-
tations without word alignments. In ICML, pages
748–756.
Jiang Guo, Wanxiang Che, David Yarowsky, Haifeng
Wang, and Ting Liu. 2015.
Cross-lingual depen-
dency parsing based on distributed representations.
In ACL, volume 1, pages 1234–1244.
Karl Moritz Hermann and Phil Blunsom. 2014. Multi-
lingual models for compositional distributed seman-
tics. In ACL, pages 58–68.
Zhiheng Huang, Wei Xu, and Kai Yu. 2015.
Bidi-
rectional LSTM-CRF models for sequence tagging.
CoRR, abs/1508.01991.
Rebecca Hwa, Philip Resnik, Amy Weinberg, Clara
Cabezas, and Okan Kolak. 2005.
Bootstrapping
parsers via syntactic projection across parallel texts.
Natural language engineering, 11(3):311–325.
Sungchul Kim, Kristina Toutanova, and Hwanjo Yu.
2012. Multilingual named entity recognition using
parallel data and metadata from wikipedia. In ACL,
pages 694–702.
Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
In NAACL, pages 260–270.
Guillaume Lample, Alexis Conneau, Marc’Aurelio
Ranzato, Ludovic Denoyer, and Herv Jgou. 2018.
Word translation without parallel data. In ICLR.
Ying Lin, Shengqi Yang, Veselin Stoyanov, and Heng
Ji. 2018.
A multi-lingual multi-task architecture
for low-resource sequence labeling. In ACL, pages
799–809.
Zhouhan Lin, Minwei Feng, Cicero Nogueira dos San-
tos, Mo Yu, Bing Xiang, Bowen Zhou, and Yoshua
Bengio. 2017. A structured self-attentive sentence
embedding. In ICLR.
L. Liu, J. Shang, F. Xu, X. Ren, H. Gui, J. Peng, and
J. Han. 2018. Empower sequence labeling with task-
aware neural language model. In AAAI.
Xuezhe Ma and Eduard Hovy. 2016. End-to-end se-
quence labeling via bi-directional lstm-cnns-crf. In
ACL, pages 1064–1074.
Stephen Mayhew, Chen-Tse Tsai, and Dan Roth. 2017.
Cheap translation for cross-lingual named entity
recognition. In EMNLP, pages 2526–2535.
Ryan McDonald, Slav Petrov, and Keith Hall. 2011.
Multi-source transfer of delexicalized dependency
parsers. In EMNLP, pages 62–72.
Tomas Mikolov, Quoc V. Le, and Ilya Sutskever. 2013a.
Exploiting similarities among languages for ma-
chine translation. CoRR, abs/1309.4168.
Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In NIPS, pages 3111–3119.
Jian Ni, Georgiana Dinu, and Radu Florian. 2017.
Weakly
supervised
cross-lingual
named
entity
recognition via effective annotation and representa-
tion projection. In ACL, pages 1470–1480.
Joel Nothman, Nicky Ringland, Will Radford, Tara
Murphy, and James R Curran. 2013. Learning mul-
tilingual named entity recognition from wikipedia.
Artiﬁcial Intelligence, 194:151–175.
Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014.
Glove: Global vectors for word
representation. In EMNLP, pages 1532–1543.
Matthew Peters, Waleed Ammar, Chandra Bhagavat-
ula, and Russell Power. 2017. Semi-supervised se-
quence tagging with bidirectional language models.
In ACL, pages 1756–1765.

Matthew E. Peters, Mark Neumann, Mohit Iyyer, Matt
Gardner, Christopher Clark, Kenton Lee, and Luke
Zettlemoyer. 2018. Deep contextualized word rep-
resentations. In NAACL, pages 2227–2237.
Nils Reimers and Iryna Gurevych. 2017.
Reporting
score distributions makes a difference: Performance
study of lstm-networks for sequence tagging.
In
EMNLP, pages 338–348.
Samuel L. Smith, David H. P. Turban, Steven Hamblin,
and Nils Y. Hammerla. 2017. Ofﬂine bilingual word
vectors, orthogonal transformations and the inverted
softmax. In ICLR.
Oscar T¨ackstr¨om, Dipanjan Das, Slav Petrov, Ryan T.
McDonald, and Joakim Nivre. 2013. Token and type
constraints for cross-lingual part-of-speech tagging.
TACL, 1:1–12.
Oscar T¨ackstr¨om, Ryan McDonald, and Jakob Uszko-
reit. 2012.
Cross-lingual word clusters for direct
transfer of linguistic structure.
In NAACL, pages
477–487.
Erik F. Tjong Kim Sang. 2002.
Introduction to the
CoNLL-2002 shared task: Language-independent
named entity recognition. In CoNLL, pages 1–4.
Erik F Tjong Kim Sang and Fien De Meulder.
2003. Introduction to the CoNLL-2003 shared task:
Language-independent named entity recognition. In
CoNLL, pages 142–147.
Chen-Tse Tsai, Stephen Mayhew, and Dan Roth. 2016.
Cross-lingual named entity recognition via wikiﬁca-
tion. In CoNLL, pages 219–228.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In NIPS, pages 6000–6010.
Mengqiu Wang and Christopher D. Manning. 2014.
Cross-lingual projected expectation regularization
for weakly supervised learning. Transactions of the
Association for Computational Linguistics (TACL),
2(5):55–66.
Zhilin Yang, Ruslan Salakhutdinov, and William W.
Cohen. 2016. Multi-task cross-lingual sequence tag-
ging from scratch. CoRR, abs/1603.06270.
Zhilin Yang, Ruslan Salakhutdinov, and William W.
Cohen. 2017. Transfer learning for sequence tag-
ging with hierarchical recurrent networks.
D. Yarowsky, G. Ngai, and R. Wicentowski. 2001. In-
ducing multilingual text analysis tools via robust
projection across aligned corpora. In HLT.
Meng Zhang, Yang Liu, Huanbo Luan, and Maosong
Sun. 2017.
Adversarial training for unsupervised
bilingual lexicon induction.
In ACL, volume 1,
pages 1959–1970.
Yuan Zhang, David Gaddy, Regina Barzilay, and
Tommi S. Jaakkola. 2016. Ten pairs to tag - mul-
tilingual POS tagging via coarse mapping between
embeddings. In NAACL, pages 1307–1317.
Ayah Zirikly and Masato Hagiwara. 2015.
Cross-
lingual transfer of named entity recognizers without
parallel corpora. In ACL, pages 390–396. Associa-
tion for Computational Linguistics.
Imed Zitouni and Radu Florian. 2008. Mention detec-
tion crossing the language barrier. In EMNLP, pages
600–609.
Will Y Zou, Richard Socher, Daniel Cer, and Christo-
pher D Manning. 2013. Bilingual word embeddings
for phrase-based machine translation. In EMNLP,
pages 1393–1398.

