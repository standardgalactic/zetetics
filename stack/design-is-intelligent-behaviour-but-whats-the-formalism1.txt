(AI EDAM) (1990) 4(2), 89-98
DESIGN IS INTELLIGENT BEHAVIOUR, BUT WHAT'S THE
FORMALISM?1
TIM SMITHERS2 AND WADE TROXELL3
2 Department of Artificial Intelligence, University of Edinburgh, 5 Forrest Hill, Edinburgh EH\ 2QL, U.K. and
3 Department of Mechanical Engineering, Colorado State University, Fort Collins, CO 80523, U.S.A.
A methodology for studying and understanding the process of design, and ultimately for developing a computational theory of
design is presented. In particular, the role of formalization in such an investigation is set out. This is done by first presenting the
background to and development of computational search as a widely adopted problem solving paradigm in artificial intelligence
research. It is then suggested why computational search provides an inadequate characterization of the design process and an
alternative, that design is an exploration process is proposed. By developing certain ideas first put forward by Simon the authors
seek to explain why this view is taken and how it forms a central part of their Artificial Intelligence in Design research
programme. It is hoped to (eventually) develop a computational theory of design. The radically incomplete nature of this work
necessarily prevents the authors from answering the question posed by the title of the paper but the title does provide a good
focus for their efforts.
1. Introduction
In this paper a methodology for studying and
understanding the process of design and in particular
the role of formalization in such an investigation is
presented. This methodology is the one adopted in the
Artificial Intelligence in Design research programme
being conducted 
by the authors at 
Edinburgh
University Department of Artificial Intelligence and
Colorado State University Department of Mechanical
Engineering.
Artificial intelligence (AI) is the science concerned
with understanding intelligent behaviour and how it
can be created in the artificial. Intelligent behaviour
arises from the combination of an active agent, the
tasks that it performs, and an environment in which it
performs them successfully: intelligent behaviour is
task achieving. Design tasks are generated when an
agent determines to specify required changes to its
environment. The purpose of the design process is to
devise a specification for how the environment might
be changed to satisfy the requirements. Designing is
thus a kind of intelligent behaviour, and therefore a
valid subject of study in AI.
In the next section a methodology for studying the
Received 3 April 1990 and in revised form 2 August 1990.
1 This is a revised version of a paper first presented at the First
International Workshop on Formal Methods in Engineering Design,
Manufacturing, and Assembly, 15-17 January 1990, Colorado
Springs, Colorado, U.S.A.
0891-0604/90/020089+ 10S02.00/0
89
design process from an AI point of view, that is, as a
kind of intelligent behaviour is described. We then set
out what we think the design process is in terms of an
exploration-based model of design. This is presented
as an alternative characterization of the design process
over search-based characterizations. Following this we
explain how we see the process of developing a
computational theory of design from the model, and
suggest what such a computational theory might look
like. The paper concludes with an outline of the
experimental approach adopted in the authors' AI in
Design research.
2. A methodology for studying design
AI research, at least in the form set up by such
founding fathers as John McCarthy, Marvin Minsky,
Allen Newell and Herbert Simon, is based upon the
much older scientific tradition of developing syntactic
systems of description 
and explanation of the
phenomenal world around us. That is, AI research has
joined disciplines like physics, biology, chemistry,
computer science and others, in trying to develop a
formal understanding of its subject of study. Newton's
laws of motion are perhaps among the most familiar
examples of a formal understanding describing the
dynamics of the world we live in, and general relativity
is regarded as being a better formalization.
© 1990 Academic Press Limited
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

90
T. Smithers and W. Troxell
0 = decoding
B :encoding
>> = causality 
C = implication
FIGURE 1. 
The formalization of a material system
This tradition is essentially Platonic in origin
embodying, as it does, the ideal that form is more
important than substance. In other words, the belief
that the truth of the world is to be found in the form
of things, not in its material substance. If understand-
ing can be expressed formally, it can be effectively
manipulated, reflected upon, and communicated. In
trying to formalize understanding, any scientific
enterprise presumes two essential things about the
phenomena it seeks to understand.
• The events which characterize the phenomenon in
question are fundamentally governed by laws.
• The laws which govern these events are, at least in
part, comprehensible by the human mind.
These two assumptions, or beliefs, are what is
sometimes called Natural Law. Causality is the
collective term for the relations between the events of
presumption one above. Presumption two requires
that the relations between events can be mirrored in
corresponding relations between propositions describ-
ing these events. Such propositions are formal objects,
and relations between propositions are governed by
implications, that is, by formal inferential rules.
The modern formulation of Natural Law is simply
that causal relations between events in the world can
be brought into congruence with implication relations
in a suitable formalism (Rosen, 1987). This can be
presented in the form of a diagram (Figure 1).
Congruence 
means 
precisely 
that 
the 
diagram
commutes in the sense that A = B + C + D. We then
say that the formalism is a theory of the material
system, or equivalently, that the material system
realizes the theory of the formal system.
In AI this formal approach to understanding and
explaining things has formed the main stream of
activity. It is embodied in a hypothesis called The
Physical Symbol System Hypothesis presented by
Newell and Simon (1976). Though first stated more
than 10 years after AI got started, this hypothesis
articulates a view, almost an article of faith, shared by
most AI researchers then and now. A physical symbol
system satisfies the following three conditions (after
Clarke, 1989):
1. It contains a set of symbols, which are physical
patterns that can be combined to yield a symbolic
structure (an expression).
2. It contains many such symbolic structures and a set
of operators which can create, modify, reproduce,
and destroy them according to well-defined rules
which are coded as symbolic structures.
3. It is situated in a wider context of real world
objects and events and may be related to that
context, or environment, by encoding information
about the environment obtained from sensors into
symbols, or by symbols which designate objects,
relations, and actions in the environment.
According to the physical symbol hypothesis, 'a
physical symbol system has the necessary and
sufficient means for general intelligent action'. Newell
and Simon intend this to be a specific architectural
assertion about the nature of intelligent system. The
term 'physical' is used to emphasize that a symbol
system is a physically realizable system, and that, if
the hypothesis turns out to be true, we will be able to
see the mechanisms by which such systems work. The
mechanisms are formal manipulations of syntactic
objects, i.e., the symbol manipulations. In this sense,
AI extends the diagram in Figure 1 by hypothesizing
that 
intelligent 
systems 
are 
symbol 
processing
machines which represent and reason about their
environment and that they do this using automated
formal processes: intelligent systems work by doing
B + C + D.
Given this assumed essential role of formal systems
in intelligent behaviour, it follows naturally that any
attempt to create artificially intelligent systems should
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

Design is intelligent behaviour
91
adopt the physical realization of a Turing machine,
the digital computer, 
as its principal 
tool of
investigation. Von Neumann's machine architecture,
which forms the basis for most physical realizations of
Turing machines, provides us with the means with
which to physically 
realize the virtual 
symbol
processing machines we need. In this sense, AI is a
clearly separated enterprise from that of computing
science. For computing science, the computer and
computation are the subjects of study, whereas in AI
they are the stuff from which experimental systems are
created.
To study some kind or aspect of intelligent
behaviour, AI researchers attempt to build ex-
perimental systems which embody 
their 
formal
theories of the intelligent behaviour being studied.
These experimental systems are computer programs,
typically large ones. They are artificial, physical
symbol processing systems.
Consistent with the description of the AI research
enterprise presented above, the aim of our AI in
Design research is to develop a computational theory
of the design process viewed as a kind of intelligent
behaviour—but not necessarily as like, or the same as,
intelligent human behaviour. The methodology we
adopt in attempting to achieve this aim has three
parts. These parts involve:
1. the development of a model of the design process,
2. the development of a software system architecture
which embodies this model, and
3. the implementation of this architecture in the form
of computer 
programs which 
we can 
then
experiment with and test.
All three activities are pursued concurrently since
each depends upon and influences the others. Each is
essential to the task of constructing a successful
computational theory of design: the model forms the
basis for a formalization of the process; the system
architecture expresses the model in computationally
realizable terms and so helps us to understand how it
might be formalized; and the implemented systems
provides the means of experimentally testing and
verifying1 the model and system architecture, thus
developing a computational theory of the design
process.
It is perhaps worth saying here, that we adopt this
methodology, not because we necessarily 
think
intelligent behaviour is just symbolic computation or
even essentially symbolic in nature, but because we
think this approach, so called symbolic functionalism,
' It allows us to try to show if and in what way our model and/or
architecture does not work.
is a fruitful one to take in trying to understand the
design process. It provides a framework in which to
try to better understand the design process.
3. The design process
We next briefly present what we think the design
process is, and then present our model of it. We then
consider the question of formalizing this model and
say something about what we think a computational
theory of design might look like.
It is argued elsewhere, Smithers et al. (1989) and
Logan and Smithers (1989), that an essential part of
the design process involves discovering the structure
of the problem. It is not a process which starts with a
well-defined goal, nor is it one which starts with a
well-defined problem space. In this sense, design
problems are what Simon has called ill-structured
problems (Simon, 1973) problems which involve
continually redefining what the problem is. Simon's
quote from Reitman (1965, p. 169), is relevant here as
an illustration of this problem redefinition process, or
problem discovery process, as we call it.
One of the interesting features of many of the
problem instances • • • is that even though they
generally would be considered complex, they include
very few constraints as given. Composing a fugue is a
good example. The main initial constraint, and it is an
open constraint at that [i.e. one that is incompletely
specified—Simon's addition], is that the end product
be a fugue. All other constraints are in a sense
supplementary, generated from one transformation of
the problem to the next.
W. R. Reitman (1965)
The initial constraint, as Reitman calls it, forms an
initial requirement statement which is gradually
expanded and elaborated as the process of producing
a fugue is carried out. The design process thus
involves understanding the structure of the problem
(not just the solution). This is achieved by exploring
the space of possible designs, the problem space, to
discover its inherent structure. It is this inherent
structure which forms the basis from which additional
constraints can be identified, thus enabling an initial
requirement description to be developed in a way that
constrains the possible solutions, and not just change
them. The structure of the problem space directly
reflects the kinds of problems that can be described,
and this in turn reflects the kind of solutions that are
possible. In design tasks, the nature of the problem
involved must be discovered as well as its solution.
This process of co-discovery is not one divided into
two sequential parts: problem discovery, then solution
discovery. Discovering the nature of the problem is
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

92
T. Smilhers and W. Troxell
the means by which a solution is discovered. Or, as
Simon puts it, design is a process of analysis through
synthesis (Simon, 
1973)—which he argues is a
necessary methodology given the inherent limitations
of the cognitive processes underlying the design
process. In other words, the nature of a design task is
analysed through the synthesis of possible solutions.
This synthesis task is not driven by well specified
predefinable goals, it is necessarily open ended and
exploratory.
A model of how this exploration process is
organized is presented below. It is intended to make
explicit the knowledge process which underlies the
design process.
3.1 AN EXPLORATION MODEL OF THE DESIGN
PROCESS
In exploration problems, knowledge about the
nature and structure of the space of possible solutions
has to be obtained before goals to be searched for can
be sufficiently well-formulated. To do this exploration
an agent has to be adventurous and at times only
weakly guided. In our exploration-based model a
design task starts with the construction of an initial
requirement description R,. This R, is usually a weak
statement; it is typically incomplete in the sense that it
fails to identify some necessary aspect of a possible
solution or is ambiguous in this respect, and it may be
inconsistent in the sense that it may specify two or
more mutually exclusive properties of a solution or
conditions which must be met by one, or it may
specify 
variables 
which 
are constrained 
to 
be
dependent for technological reasons, for example.
Typically, R, is very underconstraining.
In general, it is not possible to say in what way an
R, is incomplete and inconsistent, since this is one of
the things discovered by exploration of the space of
possible designs (SPD). Incompleteness and inconsis-
tency arises from not knowing about some property or
properties of the structure of the SPD. The design
process, Ed, is one of exploring the space of possible
designs in order to discover what its local structural
properties are in regions which may yield solutions.
For human designers, this process involves not just a
collection of concurrent and serial searches but also
intuitive leaps, analytical assessments, syntheses,
simulations, 
prototype 
construction, 
decisions,
choices, skilled and experiential judgements, etc.—an
adventure which is at times only weakly guided by the
requirement description. As a result of this explora-
tion, knowledge is acquired about the nature and
structure of parts of a SPD, and thus of possible
design specifications which perhaps partially meet the
current requirement description, or which indicate
why aspects of it cannot be satisfied or which are
mutually incompatible. This is how incompleteness
and inconsistencies in R, are discovered. 
The
requirement description is then modified in a way that
resolves identified incompletenesses and inconsis-
tencies, and the exploration is continued until a point
in the design space is found that fully specifies a
design 
which 
satisfies 
the evolved 
requirement
description. The problem description is modified on
the basis of what is discovered by the foregoing
explorations. The result is a final, complete and
consistent, requirement 
description 
Rf, 
and an
associated design specification (or specifications in the
case of there being more than one), Ds, which is
consistent with it.
The Rf and Ds are different statements about the
same thing. This is why they need to be individually
and mutually consistent to be meaningful. Require-
ment descriptions are constructed in behavioural
terms from 
the vocabulary of the domain of
application; transmission speeds, loads, and reduction
ratios, in the case of a mechanical gear box, for
example. A description of what kind of behaviour is
required. The associated design specifications are
constructed in terms of the functional and structural
vocabulary of the solution domain, gear teeth, shafts,
bearings, casings, etc. This is a description of what the
specified design does and how it does it. The design
process thus involves both the construction of a
complete and consistent requirement description and
the construction of an associated design specification,
or set of design specifications. These two aspects of
design are tightly interactive in terms of the
knowledge used and generated, and in terms of
interdependencies. They therefore cannot be pursued
either separately or sequentially. It is difficult, and
often impossible, to decompose design problems and
their solutions into completely independent sub-
problems which can be pursued separately. It is the
effects of strong interactions between different parts of
a possible solution 
which makes the task of
discovering a complete and consistent requirement
description 
and its matching design description
difficult—this is what makes it a design problem.
These interactions arise from the structure of the
space of possible designs in which solutions are
embedded.
The record of the concurrent and serial searches,
leaps of intuition, analyses, syntheses, simulations,
prototype constructions, decisions, judgements, etc.
made during design consititue a history, Hd, of the
design 
process. 
Also, Hd represents 
important
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

Design is intelligent behaviour
93
DKB 
Domain knowledge base
A*dm 
Domain knowledge
rt*dn 
Design knowledge
ft, 
initial design requirement description
£"d 
Design exploration process
Wd 
Design exploration history
Rf 
Final design requirement description
D% 
Final design specification
DDD 
Design description document
Knowledge application
Knowledge generation
Knowledge transfer
FIGURE 2. An exploration-based model of design
knowledge gained as a result of carrying out a design
task. It represents a record of what parts of the design
space were explored, how, and why decisions were
made. It represents a description of the nature and
structure of the space surveyed—the paths taken, the
reasons for doing so, what it looked like on the way,
and what was learned as a result. The combination of
the design 
history, 
Hd, 
the 
final 
requirement
description, Rf, and the associated design specifica-
tion, Ds, is here referred to as the Design Description
Document (DDD)—since it represents a documentary
record of the knowledge used and generated for a
particular design task. Design, as exploration, does
not just result in the co-ordinates of some satisfactory
location in a problem space, as search does, it results
in knowledge about how a similar task might be done
better the next time—a commonly heard explanation
for designing something is so that it can be designed
better next time. This does not just mean discovering
effective search heuristics which can be used to cut
down search effort in parts of the problem space.
Though such heuristics do reflect something about the
structure of at least parts of the space, they do so only
implicitly. What Hd represents is explicit knowledge
about the structure of the parts of the space explored.
To support the exploration process, knowledge of
the domain, Kdm, is required together with knowledge
about how to design in the domain, Kdn. Domain
knowledge is used to partially define the space of
possible designs to be explored. For example, when
designing a transmission mechanism which is to have a
fixed ratio single stage reduction, a decision to use
spur gears, rather than a pulley and belt drive,
requires the application of domain knowledge about
such things as the forces developed by the meshing
gears, the optimum shape of the gear teeth, and the
wear characteristics of different surface hardnesses.
This knowledge gives shape to the structure of the
exploration space; it identifies and locates interesting
regions and important discontinuities, for example.
Design knowledge is knowledge about how the space
can be explored. This consists of design methods and
strategies, and might include, for example, knowledge
about how the system of forces set up by our meshing
gears and carried by the shafts, bearings, and gear-box
casing, is best solved. This knowledge indicates paths
through the terrain of the design space. The
combination of domain knowledge, Kdm, and design
knowledge, Kdn, 
is referred 
to as the Design
Knowledge Base (DKB). Kdm and Kdn are not
orthogonal kinds of knowledge, there is often an
important dependency relationship between domain
knowledge and design knowledge which means that
one cannot sensibly be expressed without reference to
the other. This is why they are not indicated as being
two separate, and thus independent, inputs to the
exploration process (Figure 2).
4. Towards a computational theory of design
Having presented our model of the design process,
which is intended to form the starting point from
which to develop a computational theory of design,
we will now discuss what such a theory might look
like. We start by considering what form other
computational theories in AI take.
What we mean by a computational theory of the
design process is a theory which explains the design
process in terms of computational processes and how
they must be organized in a way which can be
practically realized. In AI computational search has
become the essential kind of computational process in
theories of intelligent behaviour. This is due, in large
part, to another hypothesis by Newell and Simon, the
problem space hypothesis, (Newell and Simon, 1972).
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

94
T. Smithers and W. Troxell
The strong version of this hypothesis see Newell
(1980) states that all goal-oriented symbolic activity
occurs in a problem space. The generally accepted
dogma is that computational search in a problem
space is a completely general model for intelligent
behaviour. This idea has been pursued by Newell and
Simon and their various co-workers in a coherent
research programme stretching over many years. It
started with the General Problem Solver (GPS),
(Newell and Simon, 1963) and is currently being
further investigated using the SOAR system (Laird et
al., 1987) and BACON (Langley, 1979; Simon, 1987;
Langley et al., 1987). Both these systems completely
embrace the problem space model and the idea that
all behaviour that we think of as being intelligent can
be cast as computational search in a symbolically
defined problem space.
According to the problem space hypothesis a
problem space has two essential ingredients a set of
states and a set of operators. The states of the
problem are possible configurations in the problem to
be solved. The operators are actions that transform
one state into another.
In addition to a problem space we have a problem
instance. This is a particular problem to be solved.
Again, according to the problem space hypothesis, a
problem instance is defined by a problem space
together with an initial state and a goal state, or some
number of them. In practice, there are two ways of
defining the goal state or states. One is to define the
actual problem space configuration, an extensional
definition. The other is to define the properties it must
have or the conditions it must satisfy, an intensional
definition.
According to this model, intelligent behaviour is
engendered by a process which finds a series of
problem space operators that transform the initial
state into the (or a) goal state. In the early days of
GPS, it was thought that universally 
successful
computational search methods could be found which
would work for any particular problem. These have
come to be known as weak methods since they do not
attempt to make use of knowledge specific to the
problem instance, or its domain—they are domain
independent techniques. The relative failure of GPS
led to the development of knowledge-based tech-
niques which attempt to explicitly represent knowl-
edge about a particular problem, or type of problem,
so that it can be used by the computational search
process while trying to find a solution. It has been
found that knowledge-based search techniques are
more powerful in the sense that they find solutions
more quickly (in fewer computations), but that they
are not so generally applicable; they are not domain
independent.
Computational search can be represented by a
six-tuple [Ps, T, S, G, H, P], where: Ps is the set of
states which defines the problems space in terms of
computable structures, often denoted by nodes in a
graph. T is the set of possible transitions between
states in Ps, defined of computational operations on
states, and often denoted by arcs in the graph; 5 is a
non-empty subset of Ps containing the start state(s) of
the problem; G is a non-empty subset of Ps containing
the goal state(s) of the problem. The states in G are
defined by either (1) a measurable property or
properties of the states encountered in the search (the
value of some cost function computed for the state,
for example), or (2) a property or properties of the
path developed in the search (the length of the path,
for example); H is a set of one or more heuristics or
optimal decision procedures used to select transitions
from T at each stage of the search. In weak methods
H does not include domain knowledge, in knowledge-
based methods domain knowledge is included; P is a
possibly empty set of solution paths each defined as an
ordered list of elements of T which take a state in S to
a state in G.
By representing computational search in this way
we can see that its result is a path through a graph
from a start state to a goal state, and that for such a
path to be found both the start state(s) and the goal
state(s) must be completely defined a priori.
4.1 IS DESIGN COMPUTATIONAL SEARCH?
Computational search is almost universally used in
some form or other in symbol processing kinds of Al
systems. They form examples of what we call the
goal-directed interpretation of the problem space
hypothesis. The question for Al in Design research is,
does this goal-directed interpretation 
provide a
suitable characterization of the design process? A look
at the Al in design literature would suggest that the
answer is yes. If, that is, the decision is to be made by
a majority vote. The idea that the design process is a
search process is a very widely accepted one. To quote
but one example (chosen arbitrarily), Brown and
Chandrasekaran (1989) suggests that '• • • the design
problem can be viewed fundamentally as a search
problem in a very large space'. If this is true then for
each design problem we should expect to see a
problem space defined together with its associated
operators, an initial start state located in the problem
space, and a goal state located in the problem space.
But according to our model of the design process
described above, this cannot be done, at least not in
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

Design is intelligent behaviour
95
general. Even if we were to accept initially intensional
definitions of the problem space, start state, and goal
state, 
the 
design 
process 
must 
include 
some
mechanism for making these explicit. This requires
some kind of process where the parts of the problem
space are made explicit so that the start state
definition can be located. This is beginning to sound
like an exploration process, not a search process.
Simon (1973) in his paper on the structure of
ill-structured problems (SISP), suggests that ap-
parently well-structured problems, for which we have
search-based 
methods of solution, 
are 
in 
fact
ill-structured problems, and that those problems we
always thought were ill-structured are also amenable
to search-based solutions. In SISP, Simon talks about
the problem of interactions between a subdivided
problem and says that '• • • a good procedure will
divide the task into components that are as nearly
self-contained as possible' [our emphasis].
He goes on to describe the overall design process in
the following way:
The design process • • • can be composed from a
combination of a GPS, which at any given moment
finds itself working on some well-structured sub-
problem, with a retrieval system, which continually
modifies the problem space by evoking from
long-term memory new constraints, new subproblems,
and new generators for design alternatives.
Herbert Simon (1973)
Simon argues that the ill-structured nature of the
design process can be tackled by a combination of
serially applied GPS processes and a large 'long-term
memory' which is used to supply the GPS processes
with the appropriate problem spaces, start states, and
goal states. Simon suggests that the inevitable
interactions between these subproblems is dealt with
by appropriately organizing the various GPS proc-
esses. He says, 'Certain ways of dividing the whole
task into parts will do less violence to those
interactions than other ways of dividing it'. He thus
goes on to talk about design as 'an organizational
process'.
While Simon's analysis of ill-structured problems,
and 
design 
problems 
in 
particular, 
into 
an
orchestration of computational search processes, is
persuasive to a point, it leaves as somewhat
mysterious the nature of the all important orchestra-
tion process and the 'long-term memory' retrieval
process. How is the retrieval system working over the
contents of the long-term memory to modify problem
spaces, provide 
new 
subgoals, 
new 
alternative
generators, etc., supposed to work? What is the
computational process involved? Is the orchestration
process a search process, a meta-search process? If so,
what is its problem space, and how are its start state,
and its goal states defined?
We agree with Simon's description of the design
process as an ill-structured problem, and see some
merit in the proposal that computational search forms
an essential element of its solution, but we do not
agree that this means that the design process is
well-characterized as a big search problem, as so many
AI in Design researchers have subsequently done.
Based upon our model of the design process, we
suggest that a goal-oriented, as opposed to the
goal-directed, interpretation of the problem space
hypothesis is required, together with a recognition
that the essential nature of the design process is its
explicit exploratory nature. We see the orchestration
process as primary, and we see it is as being achieved
by an exploration of the structure of the space of
possible designs to discover possible and fruitful
combinations of subproblems. The exploration space
is not well represented in terms of possible problem
states, but in terms of the structure which divides
regions of the space of possible designs into different
combinations of subproblems. We believe that the
contents of what Simon calls the long-term memory,
and what we call the Design Knowledge Base (DKB),
must contain explicit knowledge about this structur-
ing. We further believe that this is essentially what the
expertise of a human designer constitutes. It does not
simply constitute a memory of previous design
solutions which can be reused in some way—as is
suggested by the design prototypes approaches of
Gero et al. (1987) Gero (1988), Oxman and Gero
(1988) and Gero and Rosenman (1990).
Computational exploration, the underlying process
of design, can be represented 
by a six-tuple
[Ps, T, R,_f, H, E, Ds] 
where: 
Ps is the 
space 
of
possible solutions. It is partially defined in terms of a
mixture of completely defined states which represent
solutions to previous problems, and by sets of
properties, their associated value ranges, and property
relating constraints, which denote different regions in
the solution space. This latter type of information
essentially represents the structure of the (at least
parts) of the space; T is a set of computational
operations which compute new properties 
from
existing sets of properties, thus either refining a region
description (making it more complete) or identifying a
set of properties as an inconsistent region or state
description (when incompatible properties are in-
ferred from the same set of properties); R,_f is a
partially ordered set of non-empty sets of properties
which define the required properties of a solution
state. The first set, Rh 
is the initial set of
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

96
T. Smilhers and W. Troxell
requirements, and the final set, Rf, is the final set
of requirements. In between R, and Rf is a series
of intermediate requirement sets, the current one being
referred to as Rc. The sequence of sets in R,_f is
generated dynamically as the exploration process
proceeds. H contains a set of records each of which
represents a sequence of property sets (defining a
region or possibly a state) and applied transforma-
tions. Each record thus denotes a trajectory through
Ps, and is associated with a particular sequence of sets
in R,.f. Ed is a decision procedure which takes as input
Ps, T, Rc and H and outputs a set of transformations
which result in an extension to Ds, possibly via the
creation of new versions of Rc. 
The primary
information used by this procedure is about the
structure of the space of possible solutions derived
from Ps, H, and domain knowledge about properties
of P, change across different regions; Ds is an initially
empty set of solution regions or states which possess
the properties specified by an Rc. When Ds completely
matches all the properties in the requirements list and
both form consistent sets, Ds defines a solution state.
By representing computational exploration in this
way we can clearly see that it does not depend upon
start state(s) and goal state(s) being completely
defined to begin with. Instead, an initial requirements
description, R,, is taken to be a kind of hypothesis
about the properties of a state which exists in the
space of possible solutions, Ps. The exploration
process is then one of trying to prove this hypothesis
wrong; inconsistent and/or incomplete. Each time it is
found to be inconsistent or incomplete it is modified
so as to remove the inconsistency and/or incomplete-
ness. The set (or sets) of properties in Ds which fail to
a demonstration that a Rc is wrong constitute a final
design description, and the Rc becomes Rf.
4.2 FORMALIZING THE EXPLORATION PROCESS
If, as we suggest, the design process needs to be
seen as exploration, or orchestrated searches, how
might we formalize this process? What kinds of
symbolic computational processes might be involved
in 
problem 
space 
exploration? 
Or, 
what 
is
computational exploration"? It is essentially the answer
to this question that our AI in Design research is
trying to pursue. Formalizing the exploiation process
involves trying to discover what kinds of computa-
tional processes are required to explore design
problem spaces, what kinds of 
representational
structures are required to support such computations,
and how they need to be organized and controlled in
execution. How do we do this?
In the introduction of this paper we described AI as
the science concerned with understanding intelligent
behaviour and how it can be artificially created. This
make AI an experimental science, rather than a
theoretical one. In AI research, formal descriptions
and explanations of intelligent behaviour are not
invented by philosophizing or by conducting thought
experiments (as some of AI's critics are wont to do).
They are developed by conducting real experiments.
These typically take the form of symbol processing
programs, at least of the symbolic functionalists in AI.
It is by building and testing such programs that
realizable computational processes are discovered to
engender the kinds of intelligent behaviour we are
interested in.
In AI in design research two approaches to building
these experimental programs have been developed.
The first, and the most popular one, involves building
programs which, in some sense, do design, i.e.,
programs which automate the design process. To date
such programs have only been able to do rather
simple kinds of design—some would say so simple that
they can not be called design at all. The second
approach, and the one we adopt, is to build programs
which offer intelligent support to people doing design.
We see these two approaches as being essentially
complementary, each has advantages and disadvan-
tages. The advantages of the design support system
approach is that we are able to study larger and more
complex examples of design (though still not very
large and complex). We are able to pursue our
computational experimentation while still not under-
standing much about parts of the design process. We
leave these parts up to our supported human designer.
In this way, we are able to incrementally extend the
intelligent support offered 
by our 
experimental
systems, thus enabling us to test out ideas in a
controlled way. This is not to suggest that there are
not severe difficulties and dangers in this approach;
there are. Building sufficiently effective design support
systems requires large research resources, something
it is hard to find funding for in today's climate (at least
in the U.K.). Also, by including a human designer in
our experiments we have to worry about the coupling
which must exist between the human and artificial
intelligence involved. Though this aspect of the
approach presents fundamental and difficult problems
in itself, we feel human designers provide an effective
focus for the kinds of design support system we build.
Explicitly 
addressing 
the 
problems 
involved in
effectively coupling human and AI in design provides
us with a way of testing the software system
architecture which embodies the parts of our model of
design that we are able to program. It provides a good
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

Design is intelligent behaviour
97
way of testing the effectiveness of the implementations
of this architecture, and thus the model. (See Smithers
et al., 1990) for a more extensive explanation of our
AI in Design research program.)
It is by gradually extending the computational
processes and their organization and control in system
architectures which are able to offer better support to
people doing design that we are seeking to develop
the necessary understanding of the design process to
convert our informal 
descriptive model into a
computational theory of design. This looks like it will
take many years of hard work—the design process is
not a simple thing, it is, in our view, much more
complex than just computational search.
5. Conclusions
We presented a methodology for studying and
understanding the design process and in particular the
role of formalization in such an investigation. First the
syntactic basis of symbolic functionalism in AI was
established, followed by an explanation of how the
pioneering work of Newell and Simon has led to the
development of computational search as a widely used
problem solving paradigm. We then suggested that,
despite its adoption in much AI in Design research,
this paradigm forms an inadequate characterization of
the design process. Instead, we propose a develop-
ment of some ideas presented by Simon in his
'Structure of ill structured problems' paper, to form
what we call an exploration-based model of design.
Finally, we outline our experimental approach to
developing, from this informal and descriptive model
of the design process, a computational theory of
design which provides an explanation in terms of
computational processes and how they are to be
organized and controlled. The radically incomplete
nature of this work is recognized. Although we cannot
presently answer the question posed by our title, it
provides a useful focus in understanding design as
intelligent behaviour and in developing a computa-
tional theory of design.
Acknowledgements
The AI in Design 
research 
programme 
being
conducted at the Department of Artificial Intellig-
ence, Edinburgh University, is partially funded by the
U.K. Science and Engineering Research Council
(SERC). In the past this funding has formed part of
the Alvey large scale demonstrator project Design to
Product (DtoP), other parts of which are funded by
GEC pic and Lucas Diesel Systems (a division of
Lucas Automotive Ltd.) whose active involvement in
our research through the DtoP project we gratefully
acknowledge, together with that of the other DtoP
collaborators at Leeds University Department of
Mechanical Engineering and at Loughborough Uni-
versity Department of Computing Studies, Depart-
ment of Engineering Production, and the Human
Factors in Advanced Technology Research Centre. The
research is continuing with further funding from the
SERC as part of its support for basic science research
and as part of a joint programme of collaborative
research it supports with the U.K. Department of
Trade and Industry which is co-ordinated by the
Information Engineering Directorate. Our partners in
this later project are Logica Cambridge Ltd, British
Biotechnology 
Ltd, 
and 
CamAxys 
Ltd, 
whose
involvement 
and financial commitment 
we also
gratefully acknowledge. The research conducted at
Edinburgh has involved numerous people over the
years. Their efforts, enthusiasm, support, and insight
are also gratefully acknowledged.
The research collaboration with Colorado State
University has been partially supported by the NATO
Postdoctoral Grant awarded in 1987. Any opinions,
findings, and conclusions or recommendations ex-
pressed in this publication are those of the authors
and do not necessarily reflect the views of NATO. At
Colorado State, the vision, efforts, wisdom, and
support of Gearold R. Johnson, Patrick Fitzhorn, and
C. Byron Winn are recognized and 
gratefully
appreciated, as well as the contributions of graduate
students Anne Sjostrom, Sunil Cherian and Alex
Tsariounov.
References
Brown, D C. and Chandrasekaran, B 1989. Design problem
solving knowledge structures and control strategies. Research
Notes in Artificial Intelligence. London: Pitman.
Clarke, A. 1989. Microcognition: Philosophy, Cognitive Science,
and Parallel Distributed Processing. Cambridge MA: MIT Press.
Gero, J. 1987. Prototypes: A new schema for 
knowledge-based
design, Working paper, Architectural Computing Unit, Depart-
ment of Architectural Science, University of Sydney.
Gero, J. S. & Rosenman, M. A. 1990. A conceptual framework for
knowledge-based design research at Sydney University's design
computing unit. Journal of Artificial Intelligence in Engineering,
5, 65-77.
Gero. J. S., Maher, M. L. and Zhang, W. 1988. Chunking
structural 
design 
knowledge 
as 
prototypes. 
In 
Artificial
Intelligence in Engineering: Design (Gero, J. S., Ed.) pp. 3-21.
Amsterdam: Elsevier.
Laird, J. E., Newell, A. and Rosenbloom P. S. SOAR: An
architecture for general intelligence Artificial Intelligence, 33(1),
1-64.
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

98 
T. Smithers and W. Troxell
Langley, 
P. 
1979. Rediscovering 
physics with 
BACON 
3. 
19(3), New York: Association of Computing Machinery.
Proceedings of the Sixth International Joint Conference on 
Oxman, R. and Gero, J. S. 1988. Designing by prototype re-
Artificiai Intelligence Vol 1, pp. 505-508. 
finement 
in architecture. In Artificial Intelligence in Engineer-
Langley, P., Simon, H. A., Bradshaw, G. and Zytkow, J. 1987. 
ing: Design (Gero, J 
S., Ed.), pp. 395-412, Amsterdam:
Scientific Discovery: Computational Explorations of the Creative 
Elsevier.
Process. Cambridge: MIT Press. 
Reitman, W. R. 1965. Cognition and Thought, New York: John
Logan, B. and Smithers, T. 1989. The role of prototypes in creative 
Wiley.
design. International Round Table Conference on Modelling 
Rosen, R. 1987. On the scope of syntactics in mathematics and
Creativity and Knowledge-Based Creative Design, Heron Island, 
science: the machine metaphor. Real Brains Artificial Minds
Queensland, Australia. 
(Casti, J. L. and Karlquist, A., Eds). Amsterdam: North-
Newell, A. 
1980. Reasoning, problem solving and decision 
Holland.
processes: The problem space as a fundamental category. In 
Simon, H. A. 1973. The structure of ill-structured problems
Attention and Performance VIII (Nickerson, R., Ed.). Hillsdale: 
Artificial Intelligence, 4, 181-201.
Erlbaum. 
Simon, H. A. 1979. Artificial intelligence research strategies in the
Newell, A. and Simon, H. A. 1963. GPS, a program that simulates 
light of AI models of scientific discovery. Proceedings of the Sixth
human thought. In Computers and Thought (Feigenbaum, E. and 
International Joint 
Conference 
on Artificial 
Intelligence 
2,
Fieldman, J. eds). New York: McGraw-Hill. 
1086-1094.
Newell, A. and Simon, H. A. 1972. Human Problem Solving, 
Smithers, T , Conkie, A., Doheny, J., Logan, B. and Millington,
Englewood Cliffs: Prentice-Hall. 
K. 1990. Design as intelligent behaviour: An AI in design
Newell, A. and Simon, H. A. 1976. Computer science as empirical 
research 
programme, Journal 
of 
Artificial 
Intelligence in
inquiry: Symbols and search. Communications of the ACM, 
Engineering, 5, 78-109.
Tim Smithers obtained his BSc in Aeronautical Engineering from Kingston Polytechnic,
London, in 1977, and his PhD from the Engineering Department, Cambridge University,
in 1981. He subsequently worked on the structural design of the James-Clerk Maxwell
millimeter wave telescope, and on parallel algorithms and hardware architectures for finite
element analysis and results visualization techniques. In 1984 he joined the Department of
Artificial Intelligence at Edinburgh to work on a large collaborative project called Design
to Product set up under the UK Alvey programme. In 1986 he became a lecturer in
Intelligent Robotics in the AI Department and now leads the AI in Design research
programme as well as conducting basic research into behaviour-based autonomous mobile
robots and low-level behaviour-based control techniques and architectures.
Wade O. Troxell is the Associate Director of the Manufacturing Excellence Center (MEC)
and on a tentured-track as an Assistant Professor in the Department of Mechanical
Engineering at Colorado State University located in Fort Collins, Colorado. He completed
his BS degree in 1980 in engineering science and his MS degree in 1982 in mechanical
engineering while focusing on computing engineering, robotics, and control systems. His
PhD degree in mechanical engineering was completed in 1987. His research interests are in
robot programming languages, robot control methodologies, robot program verification,
and engineering design support systems. After finishing his doctorate, he was awarded a
NATO Postdoctoral Fellowship to study in the Department of Artificial Intelligence at
Edinburgh University. Dr Troxell directs the research activities in the Manufacturing and
Robotic Systems (MARS) Laboratory and is the Division Director for Intelligent
Machines in the Center for Computer Assisted Engineering (CCAE). The primary
research focus in the MARS Laboratory is on the design and construction of robotic
systems with increasingly more autonomy in the context of their environment. The main
application of the research is mechanical assembly, robot control, and manipulation. He is
a member of a number of professional societies including AAAI, ASME, SME/RI, ACM,
IEEE/CS, NSPE, and PEC.
https://doi.org/10.1017/S0890060400002286 Published online by Cambridge University Press

