On the Road with 16 Neurons:
Mental Imagery with Bio-inspired Deep Neural Networks
Alice Plebe
Dept. of Information Engineering and Computer Science
University of Trento, Italy
alice.plebe@unitn.it
Mauro Da Lio
Dept. of Industrial Engineeringe
University of Trento, Italy
mauro.dalio@unitn.it
Abstract
This paper proposes a strategy for visual prediction in the
context of autonomous driving.
Humans, when not dis-
tracted or drunk, are still the best drivers you can currently
ﬁnd. For this reason we take inspiration from two theoreti-
cal ideas about the human mind and its neural organization.
The ﬁrst idea concerns how the brain uses a hierarchical
structure of neuron ensembles to extract abstract concepts
from visual experience and code them into compact repre-
sentations. The second idea suggests that these neural per-
ceptual representations are not neutral but functional to the
prediction of the future state of affairs in the environment.
Similarly, the prediction mechanism is not neutral but ori-
ented to the current planning of a future action. We iden-
tify within the deep learning framework two artiﬁcial coun-
terparts of the aforementioned neurocognitive theories. We
ﬁnd a correspondence between the ﬁrst theoretical idea and
the architecture of convolutional autoencoders, while we
translate the second theory into a training procedure that
learns compact representations which are not neutral but
oriented to driving tasks, from two distinct perspectives.
From a static perspective, we force groups of neural units
in the compact representations to distinctly represent spe-
ciﬁc concepts crucial to the driving task. From a dynamic
perspective, we encourage the compact representations to
be predictive of how the current road scenario will change
in the future. We successfully learn compact representa-
tions that use as few as 16 neural units for each of the two
basic driving concepts we consider: cars and lanes. We
prove the efﬁciency of our proposed perceptual representa-
tions on the SYNTHIA dataset. Our source code is available
at https://github.com/3lis/rnn vae.
1. Introduction
Road trafﬁc injuries are the leading cause of death for the
age group between 5 and 29 years [59]. In the Global status
(a)
(b)
Figure 1. (a) Our approach adopts a ﬁrst model to learn a com-
pact representation of the scenario, forcing groups of neurons to
distinctly represent two basic concepts crucial to the driving task:
cars and lanes . (b) The compact representations are used by
a second network to predict future frames.
report on road safety of 2018, the World Health Organi-
zation reported that the number of road trafﬁc deaths was
16 times larger than in war conﬂicts. This suggests that
avoidance or mitigation of harm caused by motor vehicle
accidents will be probably the most beneﬁcial outcome one
can expect from artiﬁcial intelligence and automation [15].
In fact, in the US only 2% of vehicle crashes are due to
technical failures. Among the major causes of accidents are
driver’s inattention, fast or reckless driving, illegal maneu-
vers, and tiredness [51].
Self-driving cars will be immune to all the risky factors
depending on human drivers.
The development of fully
autonomous vehicles has always be considered a coveted
achievement for the modern society. The research on this
ﬁeld has a long history that dates back to the late 70s [11],
but it became a reality – at an unusually fast pace – no longer
than a decade ago [25]. While most of the components of
1
arXiv:2003.08745v1  [cs.CV]  9 Mar 2020

a self-driving system (such as sensors) have improved at
the typical rate of technological progress without any spe-
ciﬁc crucial innovations, the impressive advances have been
mainly fueled by the emerging “deep” version of artiﬁcial
neural networks [22, 50, 32]. Since their early beginnings,
the greatest challenge for autonomous driving systems is
the perception and understanding of the road environment,
and this is precisely the most successful ﬁeld of application
of deep neural models [33, 54, 56]. Therefore, deep neu-
ral models have quickly become the method of choice for
driving scene perception [6, 4, 18, 58]. However, despite
the impressive progress, perception remains the major ob-
stacle towards fully autonomous vehicles. The core of this
issue can be identify in the narrow conception of “percep-
tion” usually assumed in autonomous driving, which lacks
the fundamental aspect of gathering knowledge about ob-
jects and events in the environment, to the point of being
able making predictions for action [35, 26].
In this respect, it might be useful to reﬂect on how hu-
mans are able to drive. When not distracted, or asleep, or
deliberately engaged in dangerous maneuvering, humans
are excellent at driving, as at many other complex and
highly specialized sensorimotor behaviors. How the brain
realizes such sensorimotor behaviors is far from being fully
understood, but there are few general neurocognitive theo-
ries trying to shed light on this. We deem it useful to borrow
two theoretical ideas, in particular, to design the perception
strategy of autonomous vehicles.
The ﬁrst neurocognitive theory we take inspiration from
concerns how sensorial information is coded into low-
dimensional representations. These perceptual representa-
tions are able to capture aspects relevant to actions, and
they allow their original content to be recreated in an ap-
proximated form during the phenomenon of mental imagery
[29, 37]. One of the ﬁrst piece of evidence of such represen-
tations was found in the work of Damasio [10], who iden-
tiﬁed neuron ensembles exhibiting a convergent structure,
where neural signals are projected onto multiple cortical re-
gions in a many-to-one fashion. Damasio later developed
a broader theory [36] identifying more sophisticated neural
structures he called convergence-divergence zones (CDZs).
In this case, the very same neuron ensembles are able to per-
form both convergent and divergent projections, depending
on the current action the brain is engaged with: the conver-
gent ﬂow is dominant during perceptual recognition, while
the divergent ﬂow occurs during mental imagery. CDZs
were recognized as a crucial component in the formation of
concepts in the brain [40]. Therefore, we believe it useful
to design a model with a similar hierarchical architecture to
learn the abstract concepts relevant to the driving context.
The second theoretical idea concerns the nature of the
neural representations in the brain. In most cases, neural
representations are not neutral but functional to the predic-
tion of the state of affairs in the future environment. Ac-
tually, the ability to predict appears to be the main goal
of intelligence [27, 20].
There is evidence for the exis-
tence of various circuits in the brain that provide prediction
from perceptual representations. In particular, two forms of
prediction – procedural and declarative – are typically ac-
knowledged in different brain structures [12]. However, one
of the most popular theories in the ﬁeld interprets the men-
tal mechanism of prediction in mathematical terms [16, 17].
This theory, called predictive brain, explains the behavior of
the brain as minimization of the free-energy, a quantity that
can be expressed in mathematical form. We will show how
this formulation can actually be adopted as loss function to
train our model.
The aim of our work is to learn conceptual representa-
tions of the driving scenario from visual information. Our
intention is to learn compact and informative representa-
tions that can be useful for a variety of downstream driv-
ing tasks. We propose a cognitive-inspired approach that
enforces the representations to be not neutral but oriented
to the driving tasks, under two distinct perspectives. From
a static perspective, we force groups of neural units in the
compact representation to distinctly represent speciﬁc con-
cepts which are crucial in the driving task. Speciﬁcally, we
use as few as 16 neurons for each of the two basic con-
cepts: cars and lanes. From a dynamic perspective, we
encourage the compact representations to be predictive of
how the current road scene would change in the future.
We achieve the conceptual representations by imple-
menting an artiﬁcial neural model that is in line with the two
aforementioned neurocognitive theories.
The term “neu-
ral” in artiﬁcial neural models by no means implies a faith-
ful replication of the computations performed by biological
neurons. On the contrary, the mathematics of deep learn-
ing bears little resemblance to the way brain works [46, 9].
However, we identify two methods within the framework
of artiﬁcial neural networks (ANNs) that appear, at least in
part, rough algorithmic counterparts of the neurocognitive
theories described above. Speciﬁcally, the CDZs may ﬁnd
a correspondence in the idea of convolutional autoencoders
[55], while the predictive brain theory resonates with the
adoption of Bayesian variational inference in combination
with autoencoders [28, 45].
This work is part of the H2020 Dreams4Cars1 project,
aimed at developing an artiﬁcial driving agent inspired by
the neurocognition of human driving [43]. In the following
section we discuss the most signiﬁcant related works. In §3
we describe the implementation of 4 different neural models
that successfully learn informative and compact representa-
tions. Lastly, Section §4 presents the results of our models
on the SYNTHIA dataset.
1www.dreams4cars.eu
2

2. Related Works
It is not uncommon for works adopting ANNs for percep-
tion in autonomous vehicles to declare virtues of a neu-
rocognitive inspiration [41, 7, 61]. Among these are im-
portant claims, but they do not transfer the speciﬁc brain
mechanisms into algorithms. To the best of our knowledge,
the two neurocognitive principles embraced by this work –
Damasio’s CDZs and Friston’s predictive brain – have not
been proposed in any work on perception for autonomous
driving. In addition, the striking similarity between the for-
mulation of brain predictivity given by Friston and the vari-
ational autoencoder algorithm seems to remain unnoticed,
with few exceptions [39].
The idea of autoencoder has been at the heart of the
“deep” turn of ANNs [23, 30, 21], and their variational ver-
sion has rapidly gained attention [60]. However, it has not
yet been widely adopted for autonomous vehicle percep-
tion. One of the most popular strategies, instead, is the end-
to-end approach, where images from a front-facing camera
are fed into a stack of convolutions followed by feedforward
layers, generating low-level commands. The ﬁrst attempt in
this direction dates before the rise of deep learning [38], and
it has been the groundwork for the later NVIDIA’s PilotNet
[3, 4]. One of the most serious drawbacks of end-to-end
systems based on static frame processing is the erratic vari-
ation of steering wheel angle within short time periods. A
potential solution is to provide temporal context in the mod-
els, combining convolutions with recurrent networks [14].
But the most appealing feature of the end-to-end strat-
egy – to dispense with internal representations – is also
the major source of its troubles. Learning the entire range
of road scenarios from steering supervision alone, with all
possible appearances of objects relevant to the drive, is not
achievable in practical settings. For this reason several more
recent proposals suggest inclusion of intermediate repre-
sentations, such as the so-called mid-to-mid strategy [2]
used in ChauffeurNet, Waimo’s autonomous driving sys-
tem. ChauffeurNet is essentially made of a convolutional
network which consumes the input data to generate an inter-
mediate representation with the format of top-down view of
the surrounding area and salient objects. In addition, Chauf-
feurNet has several higher-level networks which iteratively
predict information useful for driving. In [57] the main aim
is to overcome the object agnosticism of the end-to-end ap-
proach, the Authors propose a object-centric deep learning
system for autonomous vehicles. In their proposal there is
one convolutional neural module taking an RGB image and
producing an intermediate representation. Then, the down-
stream networks are diversiﬁed depending on a taxonomy of
objects-related structures in the intermediate representation,
which are lastly converted into discrete driving actions. An
internal representation is used also in the system by Valeo
Vision [52], constructed using a standard ResNet50 model
[19] with the top fully-connected layers removed. The fea-
ture representation is shared across a multitude of tasks rel-
evant to visual perception in automated driving such as ob-
ject detection, semantic segmentation, depth estimation. All
the downstream tasks are realized using the top parts of
standard models such as YOLO [44] for object detection
or FCN8 [34] for semantic segmentation.
None of the works reviewed so far builds the internal
representations through the idea of autoencoder. We found
just two notable exceptions in the ﬁeld of perception for au-
tonomous driving. The ﬁrst one is by comma.ai [49], in
their model the latent representation has dimension 2048
neurons, and it is obtained with a variational autoencoder
that restores the input images of 160 × 80 pixels with 4
deconvolutional layers. Once trained, the latent representa-
tions are used for predicting successor frames in time with
a recurrent neural network. The second exception is a work
by Toyota in collaboration with MIT [1], using a variational
autoencoder of dimension 25 neurons. This entire internal
representation is decoded to restore the input image of size
200 × 66 as in a standard autoencoder. In addition, one
neuron of the representation is interpreted as steering angle,
therefore an end-to-end supervision for this neuron is mixed
in the total training loss.
There are similarities between these last two approaches
and the one we present, but also fundamental differences.
The latent compact representation of Amini et al. does not
take into account the crucial time dimension of the per-
ceptual driving scenario. On the other hand, Santana and
Hotz include their internal representation in a recursive net-
work for prediction, but time dependency is not exploited
when learning the compact representation. Moreover, the
comma.ai’s model is agnostic about the meaning of the neu-
rons composing the latent representation, while Amini et
al. assign meaning to just the single neuron coding steer-
ing angles. One key strategy in our model is to encourage
the assignment of conceptual meaning to segregate groups
of neurons in the latent representation. In contexts different
from autonomous vehicles the idea is not new. For example,
[31] in human heads generation [31] proposed a latent space
with separate representations for viewpoints, lighting con-
ditions, and shape variations. Also in [62] the latent vector
is partitioned in semantic content and geometric coding.
3. The Neural Models
During the development of this work, we experimented a
number of different architectures, all sharing the common
feature of an hierarchical arrangement similar to the CDZs
in the brain, according to the strategy described in the Intro-
duction. The ﬁrst group of neural models was developed
with the aim of generating a latent representation of the
driving environment. The challenge here is to ensure the
latent space is informative enough to represent the wide va-
3

riety of driving scenarios, but keeping at the same time a
low dimensionality so that it can still be inspected and ex-
plicable.
Here we present:
• three different neural network (Net1, Net2, Net3) with
encoder–decoder architectures, adopting increasingly
sophisticated approaches to learn compressed and dis-
entangled latent representations,
• a fourth neural network (Net4) performing prediction
in time of future driving scenarios as a rudimentary
form of mental imagery, working exclusively within
the latent representation created by the three previous
models.
3.1. Net1: Variational Autoencoder
When talking about representation learning, the ﬁrst archi-
tecture that comes to mind is the autoencoder.
This is
the simplest model of the family, composed of two sub-
networks:
gΦ
: X →Z,
(1)
fΘ
: Z →X.
(2)
The ﬁrst sub-network is called encoder and computes the
compact representations z ∈Z of a high dimensional input
x ∈X. This network is determined by its set of parameters
Φ. The second sub-network is the decoder, often called the
generative network, which reconstructs high–dimensional
data x ∈X taking as input low dimensional compact rep-
resentations z ∈Z. The network is fully determined by
the set of parameters Θ. When training the autoencoder,
the parameters Θ and Φ are learned by minimizing the error
between input samples xi and the outputs f(g(xi)).
The next big improvement in the ﬁeld of representation
learning is the variational autoencoder, we refer to A for
a detailed mathematical deﬁnition. The variational autoen-
coder is able to learn a more ordered representation with
respect to the standard autoencoder. However, there is a
lot space for improvements, especially in our case where
we want to focus only on learning representations of driv-
ing scenarios. Therefore, we implemented the variational
autoencoder model mainly with the intent to be used as a
baseline for further improvements and comparison.
Table 4 shows the numbers of layers and the parameters
adopted in the ﬁnal version of the variational autoencoder
(Net1). The input of the network is a single RGB image of
256 × 256 pixels, the encoder is composed of a stack of 4
convolutions and 2 fully-connected layers, converging to a
latent space of 128 neurons. The decoder has a symmetric
structure with respect to the encoder, mapping the 128 neu-
rons back to an image of 256 × 256. The network is trained
to optimize the loss function in equation (27) in a totally
unsupervised way.
VISUAL INPUT
ENCODER
DECODER
DECODER
DECODER
RECONSTRUCTION
OF THE SCENE
CONCEPT
OF CARS
CONCEPT
OF LANES
Z
Figure 2. Architecture of our topological autoencoder (Net2),
where the green color denotes the cars concept, violet the
lanes concept.
3.2. Net2: Topological Autoencoder
As discussed in the Introduction, our brain naturally
projects sensorial information – especially visual – into
CDZs representations, including all those that constitute the
conceptual space, where neural activations represent the na-
ture of entities present in the environment that produced the
perceptual stimuli. Hence, we can take inspiration from
this theory and use the CDZs hierarchical architecture as a
“blueprint” to design a more sophisticated neural network,
able to learn representations that are not only in terms of
visual features, but also in terms of concepts. In the driv-
ing context the entire road scenario is informative, however,
from a conceptual point of view it is not immediately nec-
essary to infer categories for every entity present in a scene.
It is useful to project in conceptual space only the entities
mostly relevant to the driving task. Therefore, for simplic-
ity, in this model we choose to consider the two main con-
cepts of cars and lanes .
Fig. 2 depicts the architecture of this topological autoen-
coder (Net2), composed of one shared encoder and three
independent decoders. The choice of parameters is simi-
lar to the architecture of our variational autoencoder (Net1),
Table 5 shows the parameters of the ﬁnal model considered.
The encoder and each of the 3 decoders maintain the same
structure as before, even the overall number of neurons in
the latent space is the same, it is their inner organization that
is strongly improved. As shown in Fig. 2, the grey decoder
is the one reconstructing in the visual space – just like the
decoder of Net1 – mapping all the 128 neurons of the la-
tent vector z into an RGB image. This decoder learns to
reconstruct the input image therefore is trained in a totally
4

unsupervised way. The decoder colored in green, instead,
takes only a vector zC of 16 neurons of the latent space
and produces a matrix xC of 256 × 256 probability val-
ues. The latent vector of 16 neurons is trained to represent
the cars concept, and the output matrix can be interpreted
as a semantic segmentation of the input image, where val-
ues indicates the probability of presence of cars entities.
Similarly, the violet decoder maps only the vector zL of 16
neurons representing the lanes concepts into a probability
matrix xL for lanes entities. These two decoders require
a supervised learning: their output is converted into binary
images, by applying a threshold, and trained to minimize
the reconstruction error with semantic segmentation of the
input images.
Note that the idea of partitioning the entire latent vec-
tor into meaningful components is not new, as mentioned
in §2. But our approach is different: while we keep the
two segments zC and zL disjointed, it is the entire z that
learns representations in visual space. This way, we adhere
entirely to the CDZ theoretical idea, and explicitly encour-
age the network to pay attention to the cars and lanes
entities in the environment. We would like to highlight an-
other advantage of our approach in partitioning the latent
space, concerning the crucial issue of lack of transparency
in deep neural network. In most models no information is
available about what exactly make them arrive at their pre-
dictions [48, 42]. By assigning meaning to components of
the inner representation, the issue is mitigated.
To give a mathematical description, the overall model is
composed of 4 sub-networks:
gΦ
:
X →Z,
fΘV
:
Z →X,
fΘC
:
ZC →XC,
fΘL
:
ZL →XL,
where the subscript V denotes the visual space, and the sub-
scripts C and L refer to the cars and lanes concepts re-
spectively. For each vector z in the latent space:
z ∈Z = [zC,ez, zL] ,
(3)
Z = RNV,
ZC = RNC,
ZL = RNL,
In the ﬁrst expression, zC and zL are the two segments in-
side the latent vector z representing the cars and lanes
concepts, respectively. The segment in between, ez, encodes
the remaining generic visual features, and the entire latent
vector z is a representation in the visual space. In the ﬁnal
version of the model, we choose to have NV = 128 and
NC = NL = 16.
By calling Θ = [ΘV, ΘC, ΘL] the vector of all parame-
ters in the three decoders, the loss functions of the model is
derived from the basic equation (27). At each batch iteration
b, a random batch B ⊂D is presented, and the following
loss is computed:
L(Θ, Φ|B) = EK + EV + EC + EL
(4)
where
EK =
 1 −(1 −k0)κb
B
X
x
∆KL
 qΦ(z|x)∥pΘV(z)

, (5)
EV = −λV
B
X
x
Ez∼qΦ(z|x) [log pΘV(x|z)] ,
(6)
EC = −λC
B
X
x
EzC∼ΠC(qΦ(z|x)) [log epΘC(xC|zC)] ,
(7)
EL = −λL
B
X
x
EzL∼ΠL(qΦ(z|x)) [log epΘL(xL|zL)] .
(8)
Few observations are due for the differences between this
loss function and the basic one (27). First of all, there is a
delay in including the contribution of the Kullback-Leibler
divergence in the term EK, because initially the encoder is
unlikely to provide any meaningful probability distribution
qΦ(z|x). There is a cost factor for the KL component, set
initially at a small value k0 and gradually increased up to
1.0, with time constant κ. This strategy is called KL an-
nealing and was ﬁrst introduced in the context of variational
autoencoders for language modeling [5].
The remaining terms EV, EC, EL are errors in the recon-
struction of driving scenario and conceptual entities, and
their relative contributions are weighted by the parameters
λV, λC, λL. The purpose of these parameters is mainly to
normalize the range of the errors, which is quite different
from visual to conceptual spaces. For this reason, typically
λV ̸= λC = λL. The term EV computes the error in visual
space, using the entire latent vector z, and corresponds pre-
cisely to the second component in the basic loss (27). The
last two terms EC and EL compute the error in the con-
ceptual space and are slightly different. Only the relevant
portion of the latent vector z is considered, as indicated by
the projection operators ΠC, ΠL. In addition, a variant of
the standard cross entropy is used, indicated with the sym-
bols epΘC and epΘL, in order to account for the large unbal-
ance between the number of pixels belonging to a concept
and all the other pixels, which is typical in ordinary driving
scenes. Following the method ﬁrst introduced in the con-
text of medical image processing [53], we compensate this
asymmetry by weighing the contribution of true and false
pixels with P, the ratio of true pixels over all the pixels in
5

the dataset, computed as follows:
P =


1
NM
N
X
i
M
X
j
yi,j


1
s
,
(9)
where N is the number of pixels in an image, M is the
number of images in the training dataset. The parameter s
is used to smooth the effect of weighting by the probability
of ground truth, a value evaluated empirically as valid is 4.
3.3. Net3: Temporal Autoencoder
Our third model aims at including in the compact represen-
tation also the predictivity the future state of affairs. The
idea here is to enforce the model to learn representations
that are consistent also in the temporal dimension. By im-
posing temporal consistency, we aim at further regulariz-
ing the network latent representations (whereas longer-term
predictions will be the subject of the next Net4). Now we
combine in the latent space the distinct representations of
crucial concepts together with the ability to predict of how
such concepts will change in future driving scenarios.
Let us introduce the notation x(t) to indicate the frame t
steps ahead of frame x. Similarly, z(t) refers to the the latent
representation of the image t steps ahead to that represented
by z. Fig. 3 shows the architecture of this temporal au-
toencoder (Net3), with the ﬁnal parameters described in Ta-
ble 6. The model has substantially the same architecture of
the topological autoencoder (Net2), except for an additional
module based on a simple recursive neural network. The
training procedure is also different: at each iteration, two
subsequent frames x and x(1) are fed as input to the com-
mon encoder, which computes two latent representations z
and z(1). These two latent vectors are fed to a RNN trained
to predict the latent vector z(2) containing the representation
of the consecutive frame in the sequence. All three latent
vectors are then expanded using the same 3-decoders struc-
ture already seen in Net2, so the overall model is trained
to generate visual and segmented output images for all the
three frames x, x(1), x(2).
The novel sub-network of the model can be described by
the function:
hΨ

z, z(1)
→ez ≈z(2),
(10)
where hΨ plays the role of an autoregressive dynamic
model of order 2, and it is implemented using a basic re-
cursive neural network (RNN) [13] with time window of 2
and set of parameters Ψ. The formulation of the loss used
in training the network is similar to equation (4) with addi-
tional terms for the recursive prediction:
L(Θ, Φ, Ψ|B) = L(Θ, Φ|B)+
E′
V + E′
C + E′
L+
E′′
V + E′′
C + E′′
L
(11)
where the ﬁrst term is the same loss of equation (4), and the
expressions of the new terms are the following:
E′
V = −λ′
V
B
X
x
Ez∼qΦ(z|x(1))
h
log pΘV(x(1)|z)
i
,
(12)
E′
C = −λ′
C
B
X
x
EzC∼ΠC(qΦ(z|x(1)))
h
log epΘC(x(1)
C |zC)
i
,
(13)
E′
L = −λ′
L
B
X
x
EzL∼ΠL(qΦ(z|x(1)))
h
log epΘL(x(1)
L |zL)
i
,
(14)
E′′
V = −λ′′
V
B
X
x
Ez∼qΦ(z|x)
h
log pΘV

x(2) | hΨ

z, gΦ(x(1))
 i
,
(15)
E′′
C = −λ′′
C
B
X
x
Ez∼qΦ(z|x)
h
log epΘC

x(2)
C | ΠC

hΨ

z, gΦ(x(1))
 i
,
(16)
E′′
L = −λ′′
L
B
X
x
Ez∼qΦ(z|x)
h
log epΘL

x(2)
L | ΠL

hΨ

z, gΦ(x(1))
 i
.
(17)
The contributions of equations (12), (13), (14) is similar to
that of EV, EC, EL, i.e. the errors in the reconstruction of
the driving scenario and conceptual entities applied to the
successor of z. The predictive relevance is carried by the
errors in equations (15), (16), (17) where the 3 decoders are
applied to a latent vector resulting from the recursive sub-
network hΨ(·).
3.4. Net4: Recurrent Network
Once trained, the temporal autoencoder (Net3) can be de-
ployed in its encoding part to generate latent representations
for all the images of the dataset, and the actual prediction in
time can be implemented with a novel recursive network
that works in the latent space only. The advantage of a very
compact representation allows a much more complex recur-
sive network than the simple hΨ(·) used in Net3.
As shown in Fig.
4, the proposed recurrent network
(Net4) has a ﬁrst module composed of multiple levels of
stacked recurrent sub-networks, and a second module com-
posed of multiple parallel recurrent sub-networks, each
6

x, x(1)
RNN
z, z(1)
z(2)
x, x(1)
xL , xL
(1)
xC , xC
(1)
x(2)
xL
(2)
xC
(2)
Figure 3. Architecture of our ﬁnal temporal autoencoder (Net3), as usual the green color denotes the cars concept and violet the lanes
concept. The decoders with dashed-line border are same instances of the decoders with solid-line border.
stacked
GRU
stacked
GRU
.
.
.
parallel
GRU
parallel
GRU
.
.
.
.  .  .
z
z(1)
z(n)
z(n+1)
z(n+k)
Figure 4. Architecture of our general recurrent model (Net4), as usual the green color denotes the cars concept and violet the lanes
concept.
predicting future frames with increasing time steps ahead.
Each stacked recurrent sub-network feeds its entire output
sequence as input of the next stacked sub-network. Instead,
the parallel recurrent sub-networks yield only the last output
in time. All sub-networks of this model share the same core
architecture: we experimented the same simple RNN [13]
used for hΨ(·), Long Short-Term Memory (LSTM) [24] and
Gated Recurrent Units (GRU) [8], using the latter as ﬁnal
choice.
The mapping of the proposed recurrent model can be de-
scribed as a function rΞ : ZNI →ZNO where NI is the
number of consecutive inputs, NO is the number of predic-
tions in time, and Ξ is the set of parameters of the model.
The function rΞ(·) is used as follows:
rΞ

z, z(1), · · · , z(NI−1)
→
[ ez1,ez2, · · · ,ezNO] ≈
h
z(NI), z(NI+1), · · · , z(NI+NO)i
(18)
In the ﬁnal version of the model, we choose NI = 8 and
NO = 4, moreover we use 2 stacked GRUs and 4 parallel
GRUs, as described in Table 7.
7

Topological AE
Temporal AE
(Net2)
(Net3)
IoU car
IoU lane
IoU car
IoU lane
City
0.7834
0.6487
0.8305
0.7155
Freeway
0.7755
0.5840
0.7952
0.7490
Sunny
0.7736
0.6283
0.8077
0.6970
Dark
0.7682
0.6274
0.7943
0.7116
All frames
0.7702
0.6277
0.7992
0.7062
Table 1. IoU scores of cars and lanes classes obtained by our
autoencoders. The scores are computed over all the SYNTHIA
dataset, and are organized into 4 different categories of driving
conditions.
4. Results
4.1. Dataset
We choose to train and test our models on the SYNTHIA
benchmark [47]. The dataset offers a large collection of im-
age sequences representing various driving scenarios. It is
realized using the game engine Unity, and it is composed of
∼100k frames of urban scenes recorded from a simulated
camera on the windshield of the ego car. We allocated 70%
of the dataset to the training set, 25% to validation and 5%
to the test set.
Despite being generated in 3D computer graphics, this
dataset offers a wide variety of quite realistic illumination
and weather conditions, resulting occasionally even in very
adverse driving conditions. Each driving sequence is repli-
cated on a set of different environmental conditions includ-
ing seasons, weather and time of the day. Moreover, the ur-
ban environment is very diverse as well, ranging from driv-
ing on freeways, through tunnels, congestion, “NewYork-
like cities” and “European towns” – as the creators of the
dataset describe it.
4.2. Results of Topological and Temporal Autoen-
coders
Here we present the comparison between the results of the
topological and the temporal autoencoder (Net2 and Net3),
the ﬁnal networks were trained for 200 epochs. Table 1 dis-
plays the IoU (Intersection over Union) scores for the cars
and lanes classes, for each model. The scores are grouped
into 4 categories: driving in urban environments, driving
on freeways, driving in sunny conditions, driving with ad-
verse lighting conditions or during bad weather. The Table
includes also the general scores for all the frames in the
dataset. These scores nicely show how the temporal model
(Net3) is able to learn a more consistent latent representa-
tion, with respect to the topological model (Net2), in all the
categories of driving sequences. However, it is also evident
how the task of recognizing the cars concept always ends
up in better scores compared to the lanes concept. An
explanation of why the latter task is more difﬁcult can be
the very low ratio of pixels belonging to the class of lanes
over the entire image size, and consequently how easily the
lane markings get occluded by other elements in the scene.
We would like to stress that the purpose of our networks
is not mere segmentation of visual input. The segmenta-
tion operation is to be considered as a support task, used
to enforce the networks to learn a more robust latent space
representation, which now is explicitly taking into consider-
ation two of the concepts that are fundamental to the driving
tasks.
To visually appreciate the representation learned by the
temporal autoencoder (Net3), Fig. 5 shows the images pro-
duced by the model for 4 different input images, one for
each category of driving sequences mentioned above. We
take an input image (showed on the left of the Figure) and
make the network produce its corresponding latent repre-
sentation. The latent vector is passed to the decoders of the
network to reconstruct the initial image (output showed on
the center of the Figure), in which the class of cars con-
cepts is colored in cyan and the class of lanes concepts in
yellow. The images on the right are just displayed as a refer-
ence, they show the target images with the colored overlay
of the two classes.
To further visualize the performance of our temporal au-
toencoder (Net3), we present the result of interpolating be-
tween different latent spaces. In Fig. 6, each column shows
what happens when taking the latent representation of a ﬁrst
frame (ﬁrst row in the Figure) and linearly interpolate it with
the latent representation of a second frame (last row). We
generate 5 intermediate latent vectors, which are passed to
the decoders of the temporal autoencoder to produce novel
frames. The images are a smooth and gradual shift from the
ﬁrst input to the second, and successfully provide new plau-
sible driving scenarios never seen before by the network.
4.3. Results of Recurrent Network
Lastly, we present the results of our ﬁnal network, the re-
cursive model (Net4), trained for 100 epochs on a dataset
of latent representations computed by the temporal autoen-
coder (Net3) over the SYNTHIA frames.
Table 2 contains the IoU scores obtained by the model
in the different categories of driving sequences used before.
As described in §4.3, the network takes as input a sequence
of 8 frames and predicts the 4 subsequent frames. The Table
shows the scores for the 4 predicted frames, separated as
usual in the cars and lanes classes. It is immediate to
note the cars scores are always higher than the lanes
scores, just like we saw in Table 1. However, the cars
predictions worsen more signiﬁcantly for the distant frames,
where we can see a decay of 16%, while the lanes scores
lose only 9%. This result can be explained by the fact that,
generally, in a driving sequence the lane markings change in
a more smooth and predictable way with respect to the cars,
8

City
Freeway
Sunny
Dark
Input
Output
Target
Figure 5. Results of our temporal autoencoder (Net3) in reconstructing an image. In the ﬁrst row, the input frames belonging to different
categories of driving scenarios. In the last row, the same input frames plotted with a colored overlay showing the target cars entities in
cyan and the lanes entities in yellow. In the center row, the output of the network.
Frame 9
Frame 10
Frame 11
Frame 12
IoU car
IoU lane
IoU car
IoU lane
IoU car
IoU lane
IoU car
IoU lane
City
0.7543
0.5692
0.7173
0.5472
0.6799
0.5421
0.6381
0.5220
Freeway
0.6928
0.5197
0.6336
0.4698
0.5967
0.4487
0.5589
0.4296
Sunny
0.7223
0.5338
0.6768
0.5001
0.6661
0.4831
0.6106
0.4693
Dark
0.7000
0.5226
0.6570
0.5120
0.6130
0.5014
0.5834
0.4832
All frames
0.7078
0.5268
0.6639
0.5075
0.6315
0.4946
0.5931
0.4782
Table 2. IoU scores of cars and lanes classes obtained by our recurrent network (Net4) when predicting 4 future frames from an input
sequence of 8 frames. The scores are computed over all the SYNTHIA dataset, and are organized into 4 different categories of driving
conditions.
which can for example suddenly modify their trajectory.
Fig. 7 depicts the visual results of predictions, one for
each category of driving sequences. We include in the Fig-
ure the 4 predicted frames and their corresponding target
frames, we omit to show the 8 input frames in order to keep
the Figure easy to read. The model is able to predict an
overtake maneuver from the left as well as from the right
(“freeway” and “sunny” cases). Another interesting result
is the different kind of predictions when facing a crosswalk,
in the “city” scenario there is a car moving perpendicularly
to the lane of the ego car, so the network correctly predicts
to hold still at the cross walk. In the “dark” scenario there
are cars driving in the same direction of the ego car, there-
fore the model predicts to not stop at the crosswalk move
forward.
As a further test, we tried to replicate the phenomenon of
mental imagery using our recurrent model (Net4), i.e. the
network is called iteratively and at each iteration the output
is fed back as input of the next iteration. In our speciﬁc case
we choose to take the 1st of the 4 output vectors and use it
as the 8th input vector of the next iteration. Fig. 8 presents
the results of 9 iterations of imagery for two different sce-
Temporal
Predictivity
coherence
error
Variational AE (Net1)
0.299
0.186
Topological AE (Net2)
0.297
0.189
Temporal AE (Net3)
0.180
0.077
Table 3. Simple statistics on the latent representations learned by
our 3 autoencoder models. For both indicators, the lower the bet-
ter.
narios, along with the corresponding reference frames (the
input images are, again, omitted for practical reasons). Note
that, while the imagery process must inevitably start with all
input frames taken from the dataset, the results provided in
the Figure are obtained from forward iterations, that is when
all input vectors are computed by the network as results of
previous iterations. In both driving scenarios, it is possible
to appreciate how the model is able to predict a quite plau-
sible future from just its own representation of the world.
4.4. Latent Representations
We performed additional validations of the latent represen-
tations learned by the models with simple statistical evalu-
9

frame A
raw
frame A
segmented
frame B
segmented
frame B
raw
Figure 6. Examples of interpolation between latent representations
learned by our temporal autoencoder (Net3), for two different driv-
ing scenarios. The ﬁrst 2 rows show the ﬁrst input frame, with and
without the colored overlay highlighting the cars and lanes en-
tities. The last 2 rows show the second input frame. The 5 central
rows are the result of the linear interpolation between the latent
representations of the inputs.
ations of their ability to predict in the future, and their con-
sistency with respect to the temporal dynamics. This sort of
evaluation has been useful in the development of the mod-
els, in Table 3 we report the results obtained with the 3 ﬁnal
encoder–decoder models. The ﬁrst indicator ξ evaluates the
degree of temporal coherence by the ratio between the dif-
ference of two latent vectors that are contiguous in time, and
the variance over the entire dataset of latent Z. The evalua-
tion is done independently for each component of the latent
vector, and then averaged:
ξZ =
1
NV
NV
X
i
P
z∈Z
 zi −ζ1(zi)
2
Mυ(i)
Z
,
(19)
where zi is the i-th element of z, υ(i)
Z is the i-th element of
the variance vector of z over Z, and M is the cardinality of
Z. The ideal temporal coherence should be ξZ = 0.
The second indicator ρ is the mean square of the resid-
ual obtained when using two consecutive latent vectors to
predict one neuron of a third vector, by linear regression.
In order to make computation time acceptable, this index is
computed on a subspace Z′ ten times smaller than Z. By
calling ε(A, b) the residual of the least squares approxima-
tion of the normal equation Ax = b, ρ can be written as
follows:
ρZ′ =
1
NV
NV
X
i
ε




· · ·
· · ·
z
ζ1(z)
· · ·
· · ·


z∈Z′
,


· · ·
ζ2(zi)
· · ·


z∈Z′


(20)
As a ﬁnal visualization of the performance of our mod-
els, we present an inspection of the latent representations
learned by the topological and temporal autoencoders (Net2
and Net3), Fig. 9 and 10 respectively. In each Figure, the
ﬁrst row shows 4 images depicting the same driving sce-
nario under different lighting conditions. For each input
image, we plot the values of the 128 neurons composing
the latent encoding computed by the model, separating the
16 neurons representing the cars entities (second row of
the Figure), the 16 neurons representing the lanes enti-
ties (last row) and the remaining 96 neurons representing
generic visual features (third row). Ideally, only the generic
96 neurons should change in the 4 cases, because the input
images differ only in the lighting conditions while having
the same cars and lanes entities. Practically, the cars
and lane markings are not exactly the same in all the 4 input
images, therefore a margin of error in the latent representa-
tions is considered acceptable.
Comparing Fig. 9 and 10 it is immediately clear how
the temporal autoencoder (Net3) learns a more robust rep-
resentation, the variation in the neurons encoding the cars
and lanes concepts is minimum. Also the variation in
the general 96 neurons are very localized, the neurons ex-
hibit a similar overall distribution, and this ﬁts with the fact
that the 4 frames have the same surrounding (the trees, the
soil on the right). Conversely, the representation learned by
topological autoencoder (Net2) does not appear as consis-
tent. The cars and lanes neurons change signiﬁcantly
for each input frame, and even the other 96 visual features
do not share any particular pattern in the 4 cases.
10

Frame 9
Frame 10
Frame 11
Frame 12
City
Output
Target
Freeway
Output
Target
Sunny
Output
Target
Dark
Output
Target
Figure 7. Results of our recurrent model (Net4) in predicting 4 future frames from an input sequence of 8 frames. Odd rows show the
output of the network, even rows the corresponding target frames.
5. Conclusions
This paper presented an algorithm for perception of driv-
ing scenarios, our work takes inspiration from some prin-
ciples on how the brain of the current best drivers – hu-
mans – works. We did not have to invent anything from
scratch: the deep learning framework already offers tools
that – when used in a proper way – can implement the neu-
rocognitive theories we aim at. Speciﬁcally, we used au-
toencoders for implementing the theoretical idea of coding
perceptual concepts using the lowest possible dimension, as
in neural convergence-divergence zones. Then we followed
the theory of predictive brain by encouraging the probabilis-
tic representation learned by the autoencoder to capture in-
formation about the future.
Compared to other research on perception of driving sce-
narios based on autoencoder, our approach is unique in
combining the conventional training of the encoder by min-
imizing the loss on the decoded reconstruction of the in-
put, with the ability of the encoded representation to per-
form prediction in time. Experimenting with the SYNTHIA
11

Output
Target
Output
Target
Figure 8. Examples of mental imagery on our recurrent model (Net4), for two different driving scenarios. Odd columns show the result of
iteratively feed the predicted output of the model back as input of the next iteration. Even columns are a reference on the corresponding
frames.
dataset, we were able to converge the visual input down to
a representation of just 16 neurons for the concept of cars
and other 16 neurons for the lanes concept. With this
compact representation we achieved good performances in
predicting future frames up to 4 time steps ahead.
The system described in this paper is certainly not a com-
plete solution to perceptual understanding of driving sce-
narios, it is a strategy. In several driving contexts there are
more concepts than cars and lanes , such as pedestrians
and cyclists, not taken into account in our system. An even
more crucial task is the projection of the inner representa-
tion to more complex spaces than the visual and conceptual
ones: the space of actions. In fact, the ongoing research in
our group is in decoding the latent representation into the
two-dimensional space of affordable longitudinal and lat-
eral controls.
6. Acknowledgements
This work was developed inside the EU Horizon 2020
Dreams4Cars Research and Innovation Action, supported
by the European Commission under Grant 731593. The Au-
thors want also to thank the Deep Learning Lab at the ProM
Facility in Rovereto, Italy, for supporting this research with
12

Frame
Car
Other visual features
Lane
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
Figure 9. Visualization of the latent representation learned by our topological autoencoder (Net2). Each row shows the values of the 128
neurons of the latent representation of the image on the left. The neurons corresponding to the cars and lanes concepts are plotted
separately.
Frame
Car
Other visual features
Lane
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
-2
-1
0
1
2
Figure 10. Visualization of the latent representation learned by our temporal autoencoder (Net3). Each row shows the values of the 128
neurons of the latent representation of the image on the left. The neurons corresponding to the cars and lanes concepts are plotted
separately.
computational resources funded by Fondazione CARITRO.
13

A. Variational Inference
The variational inference framework takes up the issue of
approximating the probability distribution p(x) of a high
dimensional random variable x ∈X. This approximation
can be performed by a neural network such as that in equa-
tion (2). The neural network by itself is deterministic, but
its output distribution can be easily computed as follows:
pΘ(x|z) = N
 x|fΘ(z), σ2I

,
(21)
where N(x|µ, σ) is the Gaussian function in x, with mean
µ and standard deviation σ. Using this last equation it is
now possible to express the desired approximation of p(x):
pΘ(x) =
Z
pΘ(x, z)dz =
Z
pΘ(x|z)p(z)dz.
(22)
It is immediate to recognize that the kind of neural network
performing the function fΘ(·) is exactly the decoder part
in the autoencoder, corresponding to the divergence zone in
the CDZ neurocognitive concept. In the case when X is the
domain of images, fΘ(·) comprises a ﬁrst layer that rear-
ranges the low-dimension variable x in a two dimensional
geometry, followed by a stack of deconvolutions, up to the
ﬁnal geometry of the x images.
In equation (22) there is clearly no clue on what the dis-
tribution p(z) might be, but the idea behind variational au-
toencoder is to introduce an auxiliary distribution q from
which to sample z, and it is made by an additional neural
network. Ideally, this network should provide the posterior
probability pΘ(z|x) – which is unknown – and should be a
network like the kind of equation (1). Its probability distri-
bution is:
qΦ(z|x) = N
 z|gΦ(x), σ2I

.
(23)
While the network fΘ(·) behaves as decoder, the network
gΦ(·) corresponds to the encoder part in the autoencoder,
projecting the high-dimensional variable x into the low di-
mensional space Z. It continues to play the role of the con-
vergence zone in the CDZ idea.
The measure of how well pΘ(x) approximates p(x) for
a set of xi ∈D sampled in a dataset D is given by the
log-likelihood:
ℓ(Θ|D) =
X
xi∈D
log
Z
pΘ(xi|z)p(z)dz.
(24)
This equation cannot be solved because of the unknown
p(z), and here comes the help of the auxiliary probability
qΦ(z|x). Each term of the summation in equation (24) can
be rewritten as follows:
ℓ(Θ|x) = log
Z
pΘ(x, z)dz
= log
Z pΘ(x, z)qΦ(z|x)
qΦ(z|x)
dz
= log Ez∼qΦ(z|x)
pΘ(x, z)
qΦ(z|x)

,
(25)
where in the last passage we used the expectation operator
E[·]. Being the log function concave, we can now apply
Jensen’s inequality:
ℓ(Θ, Φ|x) = log Ez∼qΦ(z|x)
pΘ(x, z)
qΦ(z|x)

≥Ez∼qΦ(z|x) [log pΘ(x, z)] −
Ez∼qΦ(z|x) [log qΦ(z|x)] .
(26)
Since the derivation in the last equation is smaller or at least
equal to ℓ(Θ|x), it is called the variational lower bound, or
evidence lower bound (ELBO). Note that now in ℓ(Θ, Φ|x)
there is also the dependency from the parameters Φ of the
second neural network deﬁned in (23).
It is possible to rearrange further ℓ(Θ, Φ|x) in order to
have pΘ(x|z) instead of pΘ(x, z) in equation (26), more-
over, we can now introduce the loss function L(Θ, Φ|x) as
the value to be minimized in order to maximize ELBO:
L(Θ, Φ|x) = −ℓ(Θ, Φ|x)
= −
Z
qΦ(z|x) log pΘ(x, z)
qΦ(z|x) dz
= −
Z
qΦ(z|x) log pΘ(x|z)pΘ(z)
qΦ(z|x)
dz
= ∆KL
 qΦ(z|x)∥pΘ(z)

−
Ez∼qΦ(z|x) [log pΘ(x|z)] ,
(27)
where the last step uses the Kullback-Leibler divergence
∆KL. Still, this formulation seems to be intractable because
it contains the term pΘ(z), but there is a simple analytical
formulation of the Kullback-Leibler divergence in the Gaus-
sian case (see Appendix B in [28]):
∆KL

qΦ(z|x)∥p(z)

=
−1
2
Z
X
i=1
 1 + log
 σ2
i )

−µ2
j −σ2
i

,
(28)
where µi and σi are the i-th components of the mean and
variance of z given by qΦ(z|x).
14

B. Tables of Network Parameters
Encoder
convolution
7 × 7 × 16
convolution
7 × 7 × 32
convolution
5 × 5 × 32
convolution
5 × 5 × 32
dense
2048
dense
512
Latent space
128
Decoder
dense
2048
dense
4096
deconvolution
5 × 5 × 32
deconvolution
5 × 5 × 32
deconvolution
7 × 7 × 16
deconvolution
7 × 7 × 3
Total parameters
18 million
Table 4. Parameters describing the architecture of the variational autoen-
coder (Net1).
Encoder
convolution
7 × 7 × 16
convolution
7 × 7 × 32
convolution
5 × 5 × 32
convolution
5 × 5 × 32
dense
2048
dense
512
Latent space
[16, 96, 16]
Each decoder
dense
2048
dense
4096
deconvolution
5 × 5 × 32
deconvolution
5 × 5 × 32
deconvolution
7 × 7 × 16
deconvolution
7 × 7 × 3
Total parameters
35 million
Table 5. Parameters describing the architecture of the topological autoen-
coder (Net2).
Encoder
convolution
7 × 7 × 16
convolution
7 × 7 × 32
convolution
5 × 5 × 32
convolution
5 × 5 × 32
dense
2048
dense
512
Latent space
[16, 96, 16]
Recurrent layer
128 × 2 →128
Each of the 3
dense
2048
individual decoders
dense
4096
deconvolution
5 × 5 × 32
deconvolution
5 × 5 × 32
deconvolution
7 × 7 × 16
deconvolution
7 × 7 × 3
Total parameters
35 million
Table 6. Parameters describing the architecture of the temporal autoen-
coder (Net3).
Stacked recurrency
GRU
128 × 8 →128 × 8
GRU
128 × 8 →128 × 8
Parallel recurrency
GRU
128 × 8 →128
GRU
128 × 8 →128
GRU
128 × 8 →128
GRU
128 × 8 →128
Total parameters
600.000
Table 7. Parameters describing the architecture of the recurrent network
(Net4).
References
[1] Alexander Amini, Wilko Schwarting, Guy Rosman,
Brandon Araki, Sertac Karaman, and Daniela Rus.
Variational autoencoder for end-to-end control of au-
tonomous driving with novelty detection and training
de-biasing. In IEEE International Conference on In-
telligent Robots and Systems, pages 568–575, 2019.
[2] Mayank Bansal, Alex Krizhevsky, and Abhijit Ogale.
ChauffeurNet: Learning to drive by imitating the best
and synthesizing the worst. CoRR, abs/1812.03079,
2018.
[3] Mariusz
Bojarski,
Davide
Del
Testa,
Daniel
Dworakowski, Bernhard Firner, Beat Flepp, Pra-
soon Goyal, Lawrence D Jackel, Mathew Monfort,
Urs Muller, Jiakai Zhang, Xin Zhang, and Jake Zhao.
End-to-end learning for self-driving cars.
CoRR,
abs/1604.07316, 2016.
[4] Mariusz Bojarski, Philip Yeres, Anna Choromanaska,
Krzysztof Choromanski, Bernhard Firner, Lawrence
Jackel, and Urs Muller. Explaining how a deep neural
network trained with end-to-end learning steers a car.
CoRR, abs/1704.07911, 2017.
[5] Samuel R Bowman, Luke Vilnis, Oriol Vinyals, An-
drew M. Dai, Rafal Jozefowicz, and Samy Bengio.
Generating sentences from a continuous space. CoRR,
abs/1511.06349, 2015.
[6] Chenyi Chen, Ari Seff, Alain Kornhauser, and Jianx-
iong Xiao. DeepDriving: Learning affordance for di-
rect perception in autonomous driving.
In Proc. of
IEEE International Conference on Computer Vision
and Pattern Recognition, pages 2722–2730, 2015.
[7] Shitao Chen, Songyi Zhang, Jinghao Shang, Badong
Chen, and Nanning Zheng.
Brain-inspired cogni-
tive model with attention for self-driving cars. IEEE
Transactions on Cognitive and Developmental Sys-
tems, DOI 10.1109/TCDS.2017.2717451, 2017.
[8] Kyunghyun Cho, Bart van Merri¨enboer, Caglar Gul-
cehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. Learning phrase rep-
resentations using RNN encoder–decoder for statis-
tical machine translation. In Conference on Empiri-
15

cal Methods in Natural Language Processing, pages
1724–1734. Association for Computational Linguis-
tics, 2014.
[9] Bevil R. Conway. The organization and operation of
inferior temporal cortex. Annual Review of Vision Sci-
ence, 4:19.1–19.22, 2018.
[10] Antonio Damasio. Time-locked multiregional retroac-
tivation: A systems-level proposal for the neural sub-
strates of recall and recognition. Cognition, 33:25–62,
1989.
[11] Ernst Dieter Dickmanns. Vehicles capable of dynamic
vision: A new breed of technical beings?
Artiﬁcial
Intelligence, 103:49–76, 1998.
[12] Keith L. Downing.
Predictive models in the brain.
Connection Science, 21:39–74, 2009.
[13] Jeffrey L. Elman. Finding structure in time. Cognitive
Science, 14:179–221, 1990.
[14] Hesham M. Eraqi, Mohamed N. Moustafa, and Jens
Honer.
End-to-end deep learning for steering au-
tonomous vehicles considering temporal dependen-
cies. CoRR, abs/1710.03804, 2017.
[15] Janet Fleetwood.
Public health, ethics, and au-
tonomous vehicles.
American Journal of Public
Health, 107:254–280, 2017.
[16] Karl Friston.
The free-energy principle: a uniﬁed
brain theory? Nature Reviews Neuroscience, 11:127–
138, 2010.
[17] Karl Friston, Thomas Fitzgerald, Francesco Rigoli,
Philipp Schwartenbeck, and Giovanni Pezzulo. Ac-
tive inference: A process theory. Neural Computation,
29:1–49, 2017.
[18] Sorin Grigorescu, Bogdan Trasnea, Tiberiu Cocias,
and Gigel Macesanu.
A survey of deep learning
techniques for autonomous driving. Journal of Field
Robotics, doi.org/10.1002/rob.21918:1–25, 2019.
[19] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and
Jian Sun.
Deep residual learning for image recog-
nition.
In Proceedings of IEEE International Con-
ference on Computer Vision and Pattern Recognition,
pages 2818–2826, 2016.
[20] Germund Hesslow. The current status of the simula-
tion theory of cognition. Brain, 1428:71–79, 2012.
[21] Geoffrey E. Hinton, Alex Krizhevsky, and Sida D.
Wang. Transforming auto-encoders. In International
Conference on Artiﬁcial Neural Networks, pages 44–
51. Springer-Verlag, 2011.
[22] Geoffrey E. Hinton, Simon Osindero, and Yee-Whye
Teh. A fast learning algorithm for deep belief nets.
Neural Computation, 18:1527–1554, 2006.
[23] Geoffrey E. Hinton and Ruslan R. Salakhutdinov. Re-
ducing the dimensionality of data with neural net-
works. Science, 28:504–507, 2006.
[24] Sepp Hochreiter and Jurgen Schmidhuber. Long short-
term memory.
Neural Computation, 9:1735–1780,
1997.
[25] Shantanu Ingle and Madhuri Phute. Tesla autopilot:
Semi autonomous driving, an uptick for future auton-
omy. International Research Journal of Engineering
and Technology, 3:369–372, 2016.
[26] Pierre Jacob and Marc Jeannerod. Ways of Seeing –
The Scope and Limits of Visual Cognition.
Oxford
University Press, Oxford (UK), 2003.
[27] Marc Jeannerod. Neural simulation of action: A uni-
fying mechanism for motor cognition. NeuroImage,
14:S103–S109, 2001.
[28] Diederik P Kingma and Max Welling. Auto-encoding
variational bayes.
In Proceedings of International
Conference on Learning Representations, 2014.
[29] Stephen M Kosslyn. Image and Brain: the Resolution
of the Imagery Debate. MIT Press, Cambridge (MA),
1994.
[30] Alex Krizhevsky and Geoffrey E. Hinton.
Using
very deep autoencoders for content-based image re-
trieval. In European Symposium on Artiﬁcial Neural
Networks, Computational Intelligence and Machine
Learning, pages 489–494, 2011.
[31] Tejas D. Kulkarni, William F. Whitney, Pushmeet
Kohli, and Joshua B. Tenenbaum. Deep convolutional
inverse graphics network.
In Advances in Neural
Information Processing Systems, pages 2539–2547,
2015.
[32] Yann LeCun, Yoshua Bengio, and Geoffrey Hinton.
Deep learning. Nature, 521:436–444, 2015.
[33] Yann LeCun, Koray Kavukcuoglu, and Cl´ement Fara-
bet. Convolutional networks and applications in vi-
sion.
In IEEE International Symposium In Circuits
and Systems, pages 253–256, 2010.
[34] Jonathan Long, Evan Shelhamer, and Trevor Darrell.
Fully convolutional networks for semantic segmenta-
tion. In Proceedings of IEEE International Confer-
ence on Computer Vision and Pattern Recognition,
pages 3431–3440, 2015.
[35] Marsel Mesulam. From sensation to cognition. Trends
in Cognitive Sciences, 2:455–462, 1998.
[36] Kaspar Meyer and Antonio Damasio.
Convergence
and divergence in a neural architecture for recognition
and memory.
Trends in Neuroscience, 32:376–382,
2009.
16

[37] Samuel T. Moulton and Stephen M Kosslyn. Imag-
ining predictions: mental imagery as mental emula-
tion. Philosophical transactions of the Royal Society
B, 364:1273–1280, 2009.
[38] Urs Muller, Jan Ben, Eric Cosatto, Beat Flepp, and
Yann LeCun.
Off-road obstacle avoidance through
end-to-end learning. In Advances in Neural Informa-
tion Processing Systems, pages 739–746, 2006.
[39] Andr´e Ofner and Sebastian Stober. Towards bridging
human and artiﬁcial cognition: Hybrid variational pre-
dictive coding of the physical world, the body and the
brain. In Advances in Neural Information Processing
Systems, 2018.
[40] Juan Sebastian Olier, Emilia Barakova, Carlo Regaz-
zoni, and Matthias Rauterberg. Re-framing the char-
acteristics of concepts and their relation to learning
and cognition in artiﬁcial agents. Cognitive Systems
Research, 44:50–68, 2017.
[41] Michel Pasquier and Richard J. Oentaryo. Learning
to drive the human way: a step towards intelligent ve-
hicles. International Journal of Vehicle Autonomous
Systems, 6:24–47, 2008.
[42] Alice Plebe, Mauro Da Lio, and Daniele Bortoluzzi.
On reliable neural network sensorimotor control in au-
tonomous vehicles. IEEE Transactions on Intelligent
Transportation Systems, early access:1–12, 2019.
[43] Alice
Plebe,
Riccardo
Don`a,
Gastone
Pietro
Rosati Papini, and Mauro Da Lio.
Mental im-
agery for intelligent vehicles. In Proceedings of the
5th International Conference on Vehicle Technology
and Intelligent Transport Systems,
pages 43–51.
INSTICC, SciTePress, 2019.
[44] Joseph Redmon and Ali Farhadi. YOLOv3: An incre-
mental improvement. CoRR, abs/1804.02767, 2018.
[45] Danilo Jimenez Rezende, Shakir Mohamed, and Daan
Wierstra.
Stochastic backpropagation and approxi-
mate inference in deep generative models. In Eric P.
Xing and Tony Jebara, editors, Proceedings of Ma-
chine Learning Research, pages 1278–1286, 2014.
[46] Edmund Rolls. Cerebral Cortex: Principles of Oper-
ation. Oxford University Press, Oxford (UK), 2016.
[47] German Ros, Laura Sellart, Joanna Materzynska,
David Vazquez, and Antonio M. Lopez. The SYN-
THIA dataset: A large collection of synthetic images
for semantic segmentation of urban scenes. In Proc.
of IEEE International Conference on Computer Vision
and Pattern Recognition, pages 3234–3243, 2016.
[48] Wojciech Samek,
Thomas Wiegand,
and Klaus-
Robert M¨uller. Explainable artiﬁcial intelligence: Un-
derstanding, visualizing and interpreting deep learning
models. CoRR, abs/1708.08296, 2017.
[49] Eder Santana and George Hotz. Learning a driving
simulator. CoRR, abs/1608.01230, 2016.
[50] J¨urger Schmidhuber.
Deep learning in neural net-
works: An overview. Neural Networks, 61:85–117,
2015.
[51] Santokh Singh. Critical reasons for crashes investi-
gated in the National Motor Vehicle Crash Causation
Survey. Technical Report DOT HS 812 115, National
Highway Trafﬁc Safety Administration, Washington
(DC), 2015.
[52] Ganesh Sistu, Isabelle Leang, Sumanth Chennu-
pati, Stefan Milz, Senthil Yogamani, and Samir
Rawashdeh.
NeurAll:
Towards a uniﬁed model
for visual perception in automated driving.
CoRR,
abs/1902.03589, 2019.
[53] Carole H. Sudre, Wenqi Li, Tom Vercauteren, Se-
bastien Ourselin, and M. Jorge Cardoso.
Gener-
alised dice overlap as a deep learning loss function
for highly unbalanced segmentations. In Jorge Car-
doso, Tal Arbel, Gustavo Carneiro, Tanveer Syeda-
Mahmood, J Manuel R.S. Tavares, Mehdi Moradi, An-
drew Bradley, Hayit Greenspan, J Paulo Papa, Anant
Madabhushi, Jacinto C. Nascimento, Jaime S. Car-
doso, Vasileios Belagiannis, and Zhi Lu, editors, Deep
Learning in Medical Image Analysis and Multimodal
Learning for Clinical Decision Support, pages 240–
248, 2017.
[54] Christian Szegedy, Sergey Ioffe, Vincent Vanhoucke,
and Alexander A. Alemi.
Inception-v4, inception-
resnet and the impact of residual connections on learn-
ing.
In Proceedings of the Thirty-First AAAI Con-
ference on Artiﬁcial Intelligence, pages 4278–4284,
2017.
[55] Michael
Tschannen,
Mario
Lucic,
and
Olivier
Bachem. Recent advances in autoencoder-based rep-
resentation learning. In NIPS Workshop on Bayesian
Deep Learning, 2018.
[56] Ruﬁn VanRullen.
Perception science in the age of
deep neural networks. Frontiers in Psychology, 8:142,
2017.
[57] Dequan Wang, Coline Devin, Qi-Zhi Cai, Fisher Yu,
and Trevor Darrell. Deep object-centric policies for
autonomous driving. In IEEE International Confer-
ence on Robotics and Automation, pages 8853–8859,
2019.
[58] Hai Wang, Yijie Yu, Yingfeng Cai, Xiaobo Chen,
Long Chen, and Qingchao Liu. A comparative study
of state-of-the-art deep learning algorithms for vehi-
cle detection. IEEE Intelligent Transportation Systems
Magazine, 11:82–95, 2019.
[59] Global status report on road safety: summary, 2018.
17

[60] Cheng Zhang, Judith B¨utepage, Hedvig Kjellstr¨om,
and Stephan Mandt.
Advances in variational infer-
ence. IEEE Transactions on Pattern Analysis and Ma-
chine Intelligence, 41:2008–2026, 2019.
[61] Xinyu Zhang, Mo Zhou, Huaping Liu, and Amir
Hussain. A cognitively inspired system architecture
for the Mengshi cognitive vehicle. Cerebral Cortex,
doi.org/10.1007/s12559-019-09692-6:1–10, 2019.
[62] Junbo Zhao, Michael Mathieu, Ross Goroshin, and
Yann LeCun.
Stacked what-where auto-encoders.
In International Conference on Learning Representa-
tions, pages 1–12, 2016.
18

