9
Generalized ﬁnite developments
Jean-Jacques L´evy
INRIA and Microsoft Research–INRIA Joint Centre
Abstract
The Finite Development theorem (FD) is a fundamental theorem in the
theory of the syntax of the lambda-calculus. It gives sense to parallel
reductions by stating that one can contract any given set of (possibly
nested) redexes in any lambda term without looping and caring about
the order in which these redexes are contracted. This theorem can be
used to prove the Church–Rosser property, thus insuring determinism of
reductions and uniqueness of normal forms. This paper explains how to
extend the FD theorem to a ﬁnite number of creations of new redexes,
i.e. redexes which do not exist in the initial term. This generalized
theorem (gFD) also provides a proof technique to show the completeness
of various reduction strategies. Finally it gives a natural intuition to the
strong normalization property of the standard ﬁrst-order typed lambda-
calculus. The results in this article are not new, but were often mixed
with other arguments; the aim of this paper is to stress on this sole gFD
theorem.
9.1 Introduction
The basic operation of the lambda-calculus [6] is beta-reduction
(λx.A)B →A{x := B}
contracting any redex of the form (λx.A)B into its contractum A{x :=
B} where every occurrence of the free variable x in A is replaced
by B. Intuitively λx.A is a function of x producing the term A and
beta-reduction describes the passing of the argument B to the function
λx.A as in programming languages [4, 13, 22]. The lambda-calculus
From Semantics to Computer Science Essays in Honour of Gilles Kahn,
eds Yves
Bertot, G´erard Huet, Jean-Jacques L´evy and Gordon Plotkin. Published by Cambridge
University Press.
c
⃝Cambridge University Press 2009.
185
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

186
J.-J. L´evy
enjoys the Church–Rosser property, also named full conﬂuence or simply
conﬂuence, which ensures the determinacy of results for beta-reductions.
For instance if we write ∆= λx.xx and I = λx.x, then we have
M = (Ia)(Ia) ←∆(Ia) →∆a = N
and M →a(Ia) →aa ←N. The common reduct aa of M and N can
only be reached by performing two steps from M since the Ia redex is
duplicated in M. The proof of the Church–Rosser theorem relies on an
inductive argument on the length of parallel reductions starting from
a given initial term, namely reductions whose parallel steps are of the
form
M
F→M ′
simultaneously contracting a set F of redexes in M. For instance, in the
previous example, we have
M
F→aa ←N
where F is the set of the two Ia redexes in M and the usual reduction
step →is identiﬁed to the contraction of a singleton set of redexes.
The exact deﬁnition of these parallel steps is not straightforward.
Tait and Martin-Lof [3] axiomatize an anonymous parallel step as the
contraction of a given set of redexes in an inside-out way. Curry and
Feys [7] use the ﬁnite development (FD) theorem. This latter method
is more ambitious since it shows that the notion of parallel step is
consistent whatever the order in which redexes are contracted. An easy
corollary of the FD theorem is the so-called lemma of parallel moves
stating that if F1 and F2 are two sets of redexes in the lambda-term A
and if
M
F1
←A
F2
→N
there exists a lambda-term B such that
M
F′
2
→B
F′
1
←N
The proof of the lemma just considers developments of F1 ∪F2. Then
full conﬂuence of the lambda-calculus follows easily.
In this article, we look more closely to the FD theorem and want
to exhibit the property which makes it hold. Traditionally, the FD
theorem is divided into two parts. Let F be a set of redexes in a
given term M. Firstly any reduction relative to F terminates; secondly
all maximal reductions relative to F end with the same term. In the
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
187
previous statement, we say that a reduction is relative to F iﬀit only
contracts residuals of redexes of F. The FD theorem means that the
set of reductions relative to F forms a canonical system, i.e. a set of
conﬂuent ﬁnite reductions. This situation is analogous to the one of the
(ﬁrst-order or higher-order) typed lambda-calculus where the set of all
reductions from any given term also forms a canonical system. The
diﬀerence between the typed lambda-calculus and relative reductions
comes from the fact that in the latter case no redex is created. In
the untyped lambda-calculus, strong normalization is not valid since
reductions may be inﬁnite as with ∆∆where a new redex is always
created. But in the typed case, redexes may only be created in a
limited form.
The main objective of this paper is to demonstrate that if there is no
inﬁnite chain of creations of redexes, the FD theorem may be extended.
Therefore we will be able to characterize arbitrarily large canonical
subsets of the reduction graph of any lambda-term in the untyped
lambda-calculus. It will therefore enlighten strong normalization as the
impossibility of producing inﬁnite chains of redex creations.
The generalized FD theorem has been initially studied in [16]; it has
been shown for term rewriting systems using recursive path orderings
in [18]; it also holds in higher-order term rewriting, including Klop’s
CRSs, under the name Finite Family Developments in [24].
Some technique will be necessary in stating this generalized FD
theorem. The notion of residual of redexes is subtle in the lambda-
calculus since disjoint redexes may have nested residuals (this is not
happening in term rewriting systems). We will also need the notion of
permutation equivalence for reductions in order to deﬁne redex families.
In Section 9.2, we introduce Hyland–Wadsworth lambda-calculus. In
Section 9.3, we review deﬁnitions of residuals and ﬁnite developments.
In Section 9.4, we deﬁne historical redexes and redex families. In
Section 9.5, we show the generalized FD theorem and apply it to several
lambda-calculi. Section 9.6 is the conclusion.
9.2 Hyland–Wadsworth lambda-calculus
Hyland–Wadsworth’s lambda-calculus has been used for characterizing
Scott’s D∞model with B¨ohm trees. Here we use this calculus as a tool
for proving termination of the generalized FD theorem.
In this calculus, the set Λe of terms is the usual set of lambda-
terms but with every subterm equipped with an integer exponent.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

188
J.-J. L´evy
Beta-conversion increments the exponents on borders of contracta.
The rest of the calculus follows the traditional rules of the untyped
lambda-calculus. We also assume that there is a global integer constant
L which deﬁnes a lambda-calculus up-to-L, that we call in short the
hw(L)-calculus, as follows:
m, n
: : =
integer number
exponents (m, n ≥0)
U, V
: : =
xn | (UV )n | (λx.U)n
terms
((λx.U)nV )m →U{x := V[n+1]}[n+1][m]
beta-conversion
when n ≤L
xn
[m] = xp
(UV )n
[m] = (UV )p
(λx.U)n
[m] = (λx.U)p
projection
where p = ⌈m, n⌉
xn{x := W} = W[n]
(UV )n{x := W} = (U{x := W} V {x := W})n
(λy.U)n{x := W} = (λy.U{x := W})n
substitution
where p = ⌈m, n⌉is the maximum of m and n.
The calculus presented here is a slight variant of the exact rules
deﬁned by Hyland and Wadsworth which followed rules of application
in Scott’s D∞model where application decrements exponents and a
special rule exists for application of a function with a null exponent.
Here, we notice that any term is in normal form in the hw(−1) calculus.
If ∆n = (λx.(x0x0)0)n and Ωn = (∆n∆n)n, we have Ωn in normal form
when n > L and Ωn →Ωn+1 when n ≤L.
We deﬁne the degree of a redex R = ((λx.U)nV )m to be the exponent
n of its function part. We write degree(R) = n. In the up-to-L lambda-
calculus, a redex is reducible if and only if its degree is not greater than
L. Therefore by increasing the global constant L one gives more power to
the calculus and reductions may go further. The reduction graph RL(U)
starting from a given term U get larger when L increases. We have
R0(U) ⊂R1(U) · · · ⊂RL(U) ⊂RL+1(U) · · ·
Theorem 9.1 hw(L) is a conﬂuent and strongly normalizable calculus.
Proof The proof is rather easy and follows the Tait–Martin Lof technique
(for conﬂuence) [3] and van Daalen [23, 20] (for strong normalization).
Types are just replaced by integers.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
189
We also call canonical system a calculus which enjoys both conﬂuence
and strong normalization. Therefore hw(L) is a canonical system for any
L. It can also be proved that hw(∞) is also conﬂuent, but it may not
terminate as in the usual lambda-calculus.
Let the forgetful function U &→||U|| be function which associate to
every U the term ||U|| obtained by erasing all exponents in U. For a
given M, we can consider the term U0 with all exponents equal to zero
such that ||U0|| = M and we may wonder what these increasing chains
of sets RL(U0) represent. They approximate the reduction graph R(M)
of M with an increasing set of canonical calculi.
9.3 Residuals and ﬁnite developments
Beta-reduction is written →. Several steps (maybe none) of beta-
reduction are written →→. We give names ρ, σ, . . . to reductions and
we write ρ:M →→N to specify the initial and ﬁnal terms of reduction
ρ. The reduction graph of any lambda term M is written R(M). If two
reductions ρ and σ start from M, we call them coinitial. Similarly, they
are coﬁnal if they end on the same term N. Redexes may be tracked
over reductions. Let ρ ∈R(M) be the following reduction from M to N
ρ:M = M0
R1
→M1
R2
→M2 · · ·
Rn
→Mn = N
contracting redex Ri in Mi−1 at each step (1 ≤i ≤n). Let R be a redex
in M. There could be several (may be none) residuals of R in N. We
write R\ρ for the set of residuals of R in M by reduction ρ ∈R(M).
For instance, if we underline R and its residuals, we have
ρ:∆(Ix) →(Ix) (Ix)
σ:∆(Ix) →∆x
τ:∆(Ix) →(Ix)(Ix)
In the ﬁrst case, Ix is copied by reduction ρ and has two residuals; in the
second case, ∆(Ix) is modiﬁed by σ but is not copied by the contraction
of an internal redex, and there is a single residual; in the third case, there
is no residual of the contracted redex, since it disappeared. To deﬁne
residuals precisely needs some work. We can either speak of occurrences
of subterms and consider occurrences of both R and the redex contracted
R1 as in Curry and Feys [7]. An alternative method is Barendregt’s
underlining method [3]. We will refer to both methods here, and will not
deﬁne precisely residuals. Just notice that residuals depend upon the
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

190
J.-J. L´evy
reduction and that residuals of a redex may diﬀer if we consider distinct
reductions between two same terms. For instance, take I(Ix) →Ix; then
residuals are not the same if one contracts the external or internal redex.
Residuals are deﬁned in a similar way in the hw(L)-calculus, since
exponents do not modify the structure of terms. We ﬁrst notice that
residuals of a redex keep the degrees in hw(L).
Lemma 9.2 If ρ:U →→V and R = ((λx.A)nB)m is a redex in U. Let
R′ be a redex in V such that R′ ∈R\ρ, then degree(R′) = degree(R).
We consider now the hw(0)-calculus in which we can only contract
redexes of null degree. We also observe that there are only two cases for
the creation of new redexes in the lambda-calculus. We can either pass
an abstraction to the left of an application as in (λx. · · · xB · · · )(λy.A) or
we can create a redex upward as in (λx.A)BD when we have (λx.A)B →
λy.C. In both cases, in the hw(L)-calculus, we notice that the degree of
the created redex is strictly greater than the degree of the contracted
redex. This is due to the increment used in the projection rules around
the contractum in the beta-rule.
Therefore in hw(L)-calculus, when ρ:U →→V , a redex in V with null
degree is a residual of a redex in the initial term U.
We can now state the ﬁnite development theorem with the proof used
in [16].
Theorem 9.3 (Finite developments+) Let F be a set of redexes in
M, consider relative reductions which contract only residuals of redexes
in F. Then:
(i) there is no inﬁnite reduction relative to F;
(ii) the developments of F (maximal relative reductions) end all at
the same term;
(iii) let R be a redex in M (maybe not in F), then the residuals of R
are the same by all developments of F.
Proof
The proof is quite simple when using the Hyland–Wadsworth
calculus. Consider the term M0 where all subterms are equipped with
a null exponent except degrees of redexes not in F which are equipped
with degrees 2, 3, 4, etc. Then reductions relative to F are exactly the
one of M0 in hw(0), since redexes of null degree can only be residuals
of redexes in F. Now as hw(0) is a canonical system, one concludes on
items 1 and 2. Furthermore, new redexes in hw(0) can only have degree
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
191
1, and therefore redexes of degrees 2, 3, 4, etc can only be residuals of
redexes in M0 (not in F). As the normal form is unique in hw(0), the
residuals of redexes not in F are the same by any development of F.
One may notice the elegance of the previous proof since we escape
the inspection of multiple cases by working with hw(0) in which this
inspection has been done in a systematic way within the conﬂuence proof.
The third item of the FD theorem is often skipped. In fact, it is an
important clause since it shows that the notion of residual is consistent
with parallel steps. If we simultaneously contract a set F of redexes,
we can speak of residuals of redexes without specifying the order in
which redexes of F are contracted. We therefore write R\F for the set
of residuals of R by any (ﬁnite) development of F and we are also free
of writing
M
F→N
for the relation linking M to N by a development of F.
Going on with notations, when ρ:M →→N and σ:N →→P, we write ρσ
for the concatenation of these two reductions. Furthermore, we write o
for the empty reduction of length 0. Therefore we have ρo = ρ = oρ. We
also write F for the reduction consisting in a ﬁnite development of F,
and we deﬁne F1 ⊔F2 as the two-step reduction F1 ⊔F2 = F1(F2\F1).
We ﬁnally forget braces when F is a singleton {R}. We can write Rρ or
ρR or R\S or R ⊔S etc.
There are two well-known corollaries of the FD theorem which will be
useful for introducing the notion of redex history.
Lemma 9.4 (Parallel moves) Let F1 and F2 be two sets of redexes in
M. If M1
F1
←M
F2
→M2, then there is a term N such that M1
G2
→N
G1
←M2
with G1 = F1\F2 and G2 = F2\F1.
With our new notations, an alternative statement of this lemma would
be that F1 ⊔F2 and F2 ⊔F1 are coﬁnal. The proof is obvious by
considering two developments of F1 ∪F2, one starting by contracting F1
and then F2\F1, the second contracting F2 and then F1\F2 (Fig. 9.1).
The lemma of parallel moves can also be named the square lemma,
since a second corollary is the cube lemma which looks closer to
properties of residuals.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

192
J.-J. L´evy
M
F1
F2
F2\F1
F1\F2
M1
M2
N
M
F1
F2
F2\F1
F1\F2
N
F3
(a)
(b)
Fig. 9.1. (a) Parallel moves; (b) Cube lemma.
Lemma 9.5 (Cube lemma) Let F1, F2 and F3 be three sets of redexes
in M. Then F3\(F1 ⊔F2) = F3\(F2 ⊔F1).
This lemma is straightforward when we notice that F1⊔F2 and F2⊔F1
are two developments of F1 ∪F2. This argument may be extended by
permutation on F2 and F3, or F3 and F1. We therefore get a nice cube
whose each face is an application of the parallel moves lemma (Fig. 9.1).
9.4 Redex families
Redexes may be created by reductions when they are not residuals of
redexes in the initial term. The notion of redex family aims to relate
created redexes. As the reduction creating a redex interferes with its
history, we deﬁne an historical redex (hredex in short) to be a pair ⟨ρ, R⟩
when ρ:M →→N and R is a redex in N. Redexes in M with no history are
of the form ⟨o, R⟩where o is the empty reduction from M. But history
of redexes has to be consistent with permutations of reduction steps,
since the contraction of two independent redexes must be insensitive in
the creation history of a redex.
Deﬁnition 9.6 The permutation equivalence ∼on reductions in R(M)
starting from a given term M is deﬁned inductively as follows:
(i) F1 ⊔F2 ∼F2 ⊔F1
(ii) ∅∼o and o ∼∅
(iii) ρ ∼σ implies τρ ∼τσ
(iv) ρ ∼σ implies ρτ ∼στ
(v) ρ ∼σ ∼τ implies ρ ∼τ.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
193
ρ
ρ\σ
σ\ρ
σ
Fig. 9.2. ρ\σ is residual of reduction ρ by reduction σ.
Two reductions are equivalent if they diﬀer by applying the lemma
of parallel moves. A reduction step contracting an empty set of redexes
can be erased, i.e. it is equivalent to the empty reduction. Permutation
equivalence is also extended by concatenation and by transitivity.
Alternative deﬁnitions of this equivalence can be found in [25, 21].
This relation is deﬁned on parallel reductions, but it also relates
regular reductions since their elementary steps can be considered as
contracting singletons sets of redexes. In fact, the same relation can be
generated by restricting the ﬁrst case of the deﬁnition to be singleton
sets.
Residuals of reductions can also be deﬁned inductively as follows (see
Fig. 9.2).
Deﬁnition 9.7 Let ρ and σ be two reduction starting at M. The residual
ρ\σ of reduction ρ by reduction σ is inductively deﬁned by:
(i) if ρ = F and σ = G, then ρ\σ = F\G
(ii) ρ\(σ1σ2) = (ρ\σ1)\σ2
(iii) (ρ1ρ2)\σ = (ρ1\σ)(ρ2(σ\ρ1)
When ρ and σ are two coinitial reductions, we deﬁne ρ ⊔σ as for
single-step reductions by ρ ⊔σ = ρ(σ\ρ). We also write ∅k for k
steps of empty-set contractions. The following properties hold for the
permutation equivalence.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

194
J.-J. L´evy
Lemma 9.8 Let ρ and σ be two coinitial reductions (ρ, σ ∈R(M)) :
(i) ρ ⊔σ ∼σ ⊔ρ
(ii) ρ ∼σ iﬀ∀τ ∈R(M) τ\ρ = τ\σ
(iii) ρ ∼σ iﬀρ\σ = ∅k and σ\ρ = ∅ℓ
(iv) ρσ ∼ρτ iﬀσ ∼τ
Proof
The proofs use simple algebraic arguments. Clearly (i) is true
by deﬁnition. The cube lemma gives (iia) which is that ρ ∼σ implies
τ\ρ = τ\σ. Then (iia) implies (iiia) since ∅k = ρ\ρ = ρ\σ and σ\ρ =
σ\σ = ∅ℓ. Conversely, when σ\ρ = ∅ℓ, one gets ρ ∼ρ(σ\ρ) = ρ ⊔σ
since ∅ℓ∼o. Similarly σ ∼σ ⊔ρ as ρ\σ = ∅k. We get ρ ∼σ by
transitivity and applying (i). Now to prove iib, if we have τ\ρ = τ\σ
for all τ, we get ∅k = ρ\ρ = ρ\σ. Similarly for σ\ρ = ∅ℓ. Therefore
ρ ∼σ by (iii). To prove (iv), the right-to-left direction is implied by
the deﬁnition of ∼. Now let ρσ ∼ρτ, we have ρσ\ρτ = (ρσ\ρ)\τ.
But ρσ\ρ = (ρ\ρ)(σ\(ρ\ρ)) = ∅k(σ\(∅k)) = ∅kσ. Therefore ρσ\ρτ =
(∅kσ)\τ = ∅k(σ\τ). Hence ρσ\ρτ ∼σ\τ. Therefore by (iii), if ρσ ∼ρτ,
we also have σ ∼τ.
The permutation equivalence has many properties, most of them
are due to the nice symmetry of the cube lemma. An interesting fact
is that an upper semi-lattice can be constructed (or a push-out in
categorical terminology). This lattice of reductions is derived by the
following pre-ordering on coinitial reductions ρ ≤σ iﬀρτ ∼σ for some
τ. The interested reader is refer to [16, 3, 4, 11]. A permutation class of
reductions is also characterized by its unique standard reduction. The
permutation equivalence can also be viewed as the analogous of parse
trees in context-free languages where several derivations equivalent by
permutations correspond to the same parse tree. In formal grammars,
the notion of ambiguity reveals two diﬀerent parse trees corresponding
to a same terminal sentence. In the lambda-calculus, this ambiguity
often arises.
Take for instance ρ:∆∆→∆∆and σ:∆∆→∆∆→∆∆. Then ρ and
σ are coinitial and coﬁnal, but ρ ̸∼σ. Similarly o ̸∼ρ. A more complex
example is when the initial term M is I((λy.Ix)z). Then the reduction
graph of M has no lattice structure, but the corresponding ordered
structure induced by the permutation equivalence is indeed a lattice.
Furthermore, the term M contains three redexes R = I((λy.Ix)z), S =
Ix and K = (λy.Ix)z. When ρ and σ are two reductions deﬁned by
ρ:I((λy.Ix)z) →(λy.Ix)z →Ix and σ:I((λy.Ix)z) →I((λy.x)z) →Ix,
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
195
the hredex ⟨ρ, Ix⟩is a residual of ⟨o, S⟩, but ⟨σ, Ix⟩is a residual of ⟨o, R⟩.
This kind of ambiguity cannot happen in the lattice of reductions where
residuals are consistent with history, thanks to the cube lemma.
I(Ix)
x
I((λy.Ix)z)
(λy.Ix)z
I((λy.x)z)
(λy.x)z
Ix
I(Ix)
Ix
x
I((λy.Ix)z)
(λy.Ix)z
I((λy.x)z)
(λy.x)z
Ix
The interconnection between two created hredexes ⟨ρ, R⟩and ⟨σ, S⟩
is not obvious as demonstrated by the following example. Take
M = ∆(IIx) which contains two redexes ∆(IIx) and II. When the
latter is contracted, it creates the new redex Ix which may appear
in many reducts of M. One of them seems more representative,
namely the one in ∆(Ix) where his history ρ0:M →∆(Ix) is entirely
devoted to create the Ix redex. But to connect other instances of
Ix in the reduction graph of M, it is necessary to close downward
with residuals. For instance if ρ1:M →(IIx)(IIx) →(Ix)(IIx) and
ρ1:M →(IIx)(IIx) →(IIx)(Ix), in order to connect ⟨ρ1, Ix⟩and
⟨ρ2, Ix⟩, one has to link them to ⟨ρ0, Ix⟩through ⟨ρ3, R1⟩and ⟨ρ3, R2⟩
where ρ3:M →(IIx)(IIx) →(Ix)(IIx) →(Ix)(Ix) (R1 is left redex
in (Ix)(Ix) and R2 is right redex in (Ix)(Ix)). More precisely ⟨ρ1, Ix⟩
has residual ⟨ρ3, R1⟩which is residual of ⟨ρ0, Ix⟩which has ⟨ρ3, R2⟩
as residual and this last one is residual of ⟨ρ2, Ix⟩. Therefore created
redexes can be connected by a zigzag of residuals related by consistent
histories (i.e. using the permutation equivalence).
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

196
J.-J. L´evy
∆(Ix)
∆x
(
)
x( IIx
(
)(
)
(
)(
)
( Ix ( Ix
( Ix ( IIx
( I I
( I
=
∆IIx
We can now deﬁne formally the residual and family relations between
hredexes.
Deﬁnition 9.9 Let two reductions ρ and σ be coinitial. The hredex
⟨σ, S⟩is a residual of the hredex ⟨ρ, R⟩iﬀthere is a reduction τ such
that ρτ ∼σ and S ∈R\τ. We write then ⟨ρ, R⟩⩽⟨σ, S⟩.
We say that the hredexes ⟨ρ, R⟩and ⟨σ, S⟩are in the same family if
they are connected by the reﬂexive, symmetric and transitive closure of
the previous residual relation on hredexes. We then write ⟨ρ, R⟩≈⟨σ, S⟩.
Formally:
(i) ⟨ρ, R⟩≈⟨ρ, R⟩
(ii) ⟨ρ, R⟩≈⟨σ, S⟩implies ⟨σ, S⟩≈⟨ρ, R⟩
(iii) ⟨ρ, R⟩≈⟨σ, S⟩≈⟨τ, T⟩implies ⟨ρ, R⟩≈⟨τ, T⟩
(iv) ⟨ρ, R⟩⩽⟨σ, S⟩implies ⟨ρ, R⟩≈⟨σ, S⟩
We notice that the residual and family relations form, respectively,
an ordering and an equivalence. Furthermore, one can easily show that,
when ⟨ρ, R⟩⩽⟨ρ, S⟩, there is a unique reduction τ up to the permutation
equivalence such that ρτ ∼σ and S ∈R\τ (Fig. 9.3). Therefore we may
omit the speciﬁc reduction τ in the deﬁnition of residuals of hredexes.
The residual and family relations on hredexes is also compatible with
the permutation equivalence: when ρ ∼σ, one indeed has ⟨ρ, R⟩⩽⟨σ, R⟩
since ρo = ρ ∼σ and R ∈R\o. Many other properties can be shown
on redex families, one of the most striking is the connection with the
labeled lambda-calculus, see [16]. We just mention here that when ⟨ρ, R⟩
and ⟨σ, S⟩have a common residual ⟨τ, T⟩, then there is a unique redex
T0 such that the hredex ⟨ρ ⊔σ, T0⟩is a residual of ⟨ρ, R⟩and ⟨σ, S⟩. An
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
197
S
∼
ρ
σ
R
Fig. 9.3. ⟨ρ, R⟩≈⟨σ, S⟩: the hredexes ⟨ρ, R⟩and ⟨σ, S⟩belong to the same
family.
alternative way is to state that ⟨ρ, R⟩⩽⟨τ, T⟩and ⟨σ, S⟩⩽⟨τ, T⟩implies
there exists a (unique) ⟨ρ ⊔σ, T0⟩such that ⟨ρ, R⟩⩽⟨ρ ⊔σ, T0⟩⩽⟨τ, T⟩
and ⟨σ, S⟩⩽⟨ρ ⊔σ, T0⟩⩽⟨τ, T⟩.
The permutation equivalence and the family relation can also be
deﬁned in the hw(L)-lambda-calculus thanks to the two following
lemmas. We write ||ρ|| for ρ where the forgetful function is applied to
every term in reduction ρ.
Lemma 9.10 Let ρ and σ be two reductions starting from U. If ||ρ|| ∼
||σ||, we have ρ ∼σ.
Lemma 9.11 Let ρ be any reduction starting from ||U||. Then there is
L suﬃciently large and a reduction ρ′ in hw(L) such that ρ = ||ρ′||.
Proof The proof is easy since the parallel-moves lemma can be applied
in the hw(L)-lambda-calculus, since residuals keep redex degrees.
Therefore, since ρ ∼σ, we have σ\ρ = ∅n and ρ\σ = ∅m, which means
ρ and σ are also coﬁnal in the hw(L)-lambda-calculus.
For the interested reader, the labeled lambda-calculus designed
in [16] is suﬃciently precise to characterize exactly the permutation
equivalence, i.e. two reductions are equivalent iﬀthey are coinitial and
coﬁnal in the labeled lambda-calculus.
An easy corollary of this lemma is that residuals of hredexes are the
same notion in the standard lambda-calculus and in the hw(∞)-calculus.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

198
J.-J. L´evy
Therefore the notion of redex families also coincide. A last remark is
that if two redexes R and S are in the same family, their degree are the
same (since residuals keep degrees).
9.5 Generalized ﬁnite developments
The usual ﬁnite development theorem deals with redexes who are in the
initial term. Now created redexes can be taken into account with redex
families.
Theorem 9.12 (GFD) Let F be a ﬁnite set of redex families in R(M),
consider relative reductions which contract only redexes belonging to a
family in F. Then:
(i) there is no inﬁnite reduction relative to F;
(ii) the developments of F (maximal relative reductions) end all at
the same term;
(iii) if ρ and σ are two developments of F, then ρ ∼σ.
Proof
The proof is rather straightforward since the family relation
is identical in the usual lambda-calculus and in the hw(∞)-lambda-
calculus. Let U0 be the term corresponding to M with all subterms with
null exponents (||U0|| = M). Redexes in each family have same degree.
Let L be the largest degree for redexes in the ﬁnite family set F. Then a
reduction relative to F is inside the hw(L)-lambda-calculus. As hw(L)
is a canonical system, we know that these relative reductions cannot be
inﬁnite. Therefore all reductions relative to F are ﬁnite.
Now, if two reductions ρ:M →→N and σ:M →→P starting at M are
complete developments of F (i.e. maximum relative reductions to F), we
notice that ρ⊔σ and σ ⊔ρ are also reductions relative to F by deﬁnition
of the family relation. As ρ and σ are maximal, we have σ\ρ = ∅n and
ρ\σ = ∅m. Therefore ρ ∼τ. Hence we get N = P. But ρ ∼τ also means
that if τ is another reduction starting at M, we have τ\ρ = τ\σ.
Thus, the FD theorem has been extended to ﬁnite sets of families.
All developments of such a given ﬁnite set of redex families are
equivalent by permutations, and therefore the consistency of residuals
w.r.t. developments holds for the usual notion of redex residual and
for residuals of reductions. It means that if a term M can start an
inﬁnite reduction, this inﬁnite reduction contracts an inﬁnite set of
redex families. Hence a term can have an inﬁnite reduction iﬀit can
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
199
generate inﬁnitely new redex families. This can be formalized in the
following way.
Deﬁnition 9.13 We say that the hredex ⟨ρ, R⟩directly creates the hredex
⟨σ, S⟩iﬀσ ∼ρR and the contraction of R creates S. We write ⟨ρ, R⟩◀
⟨σ, S⟩.
The hredex ⟨ρ, R⟩creates ⟨σ, S⟩if they are connected by transitive
closure of direct creation and residual. We then write ⟨ρ, R⟩◁⟨σ, S⟩.
Formally:
(i) ⟨ρ, R⟩◀⟨σ, S⟩implies ⟨ρ, R⟩◁⟨σ, S⟩
(ii) ⟨ρ, R⟩⩽⟨ρ′, R′⟩◁⟨σ, S⟩implies ⟨ρ, R⟩◁⟨σ, S⟩
(iii) ⟨ρ, R⟩◁⟨σ′, S′⟩⩽⟨σ, S⟩implies ⟨ρ, R⟩◁⟨σ, S⟩
(iv) ⟨ρ, R⟩◁⟨σ, S⟩◁⟨τ, T⟩implies ⟨ρ, R⟩◁⟨τ, T⟩
So ⟨ρ, R⟩directly creates ⟨σ, S⟩if the reduction σ is equivalent by
permutations to a reduction M →→N
R→P where the ﬁrst part M →→N
is the reduction ρ and the contraction of R creates the new redex S
in P, i.e. S ̸∈S′\R for any S′ in N. By construction the notion of
creation is consistent with the equivalence ∼. One also easily checks that
the creation relation is antisymmetric, since with the hw(∞)-lambda-
calculus we know that degrees of redexes are kept invariant by residuals
and increase in case of a direct creation. So the creation relation ◁is
a strict ordering. We would like to prove that a term which does not
contain an inﬁnite chain of creations is strongly normalizable. Unfortu-
nately this property seems to need more advanced technical arguments.
We will show a broader property relying on the creation of families.
Deﬁnition 9.14 The family of the hredex ⟨ρ, R⟩creates the family of
the hredex ⟨σ, S⟩if a hredex in the family of ⟨ρ, R⟩creates a hredex in
the family of ⟨σ, S⟩. We write ⟨ρ, R⟩≪⟨σ, S⟩. Formally:
(i) ⟨ρ, R⟩◀⟨σ, S⟩implies ⟨ρ, R⟩≪⟨σ, S⟩
(ii) ⟨ρ, R⟩≈⟨ρ′, R′⟩≪⟨σ, S⟩implies ⟨ρ, R⟩≪⟨σ, S⟩
(iii) ⟨ρ, R⟩≪⟨σ′, S′⟩≈⟨σ, S⟩implies ⟨ρ, R⟩≪⟨σ, S⟩
(iv) ⟨ρ, R⟩≪⟨σ, S⟩≪⟨τ, T⟩implies ⟨ρ, R⟩≪⟨τ, T⟩
Clearly this relation with creation of families is broader than the
previous relation on creation of hredexes, since ⟨ρ, R⟩≈⟨σ, S⟩when
⟨ρ, R⟩⩽⟨σ, S⟩. It also deﬁnes a strict ordering on families with the same
argument as the one used for hredex creation. With this new ordering,
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

200
J.-J. L´evy
one can easily show that strong normalization is induced by the absence
of inﬁnite chains of family creations.
Lemma 9.15 A term without inﬁnite chains of family creations is
strongly normalizable.
Proof We consider the covering relation of the ≪ordering (i.e. ⟨ρ, R⟩≪
⟨σ, S⟩when there is no intermediate ⟨τ, T⟩between ⟨ρ, R⟩and ⟨σ, S⟩).
This relation induces a directed acyclic graph with ﬁnite number of
successors for each node. To see that the out-degree of each node is
ﬁnite, one can work by induction on the length from the roots of this
graph since for a given length n we know by the gFD theorem that we
have the strong normalization property and therefore a ﬁnite number of
redex families. Now if the total number of families (i.e. number of nodes
in the dag) is inﬁnite, we get by Koenig lemma that there is an inﬁnite
path from the roots. It means that there is an inﬁnite chain of family
creations, which is impossible by hypothesis of the lemma. So the total
number of families for the given term is ﬁnite. By the gFD theorem, we
get that this term strongly normalizes.
As corollary, we get strong normalization for the ﬁrst-order typed
lambda-calculus. In this calculus, we call degree of a redex the type of its
function part. We notice that a redex of degree α →β can only create
redexes of type α or β (this can be proved by case inspection as in the
paragraph following Lemma 9.2). Furthermore, when two redexes are in
the same family, their degrees are equal. Thus, there are no inﬁnite chains
of family creations for any term of the ﬁrst-order typed lambda-calculus.
By the previous lemma, the calculus enjoys strong normalization.
9.6 Conclusion
The generalized Finite Development (gFD) theorem shows that relative
reductions w.r.t. a ﬁnite set of redex families cannot be inﬁnite and that
all developments end with the same term.
The gFD theorem is an important tool in the understanding of strong
normalisation. It deﬁnes arbitrary large canonical systems as subgraphs
of the reduction graph of any term. In this sense, it expresses the
compactness of the lambda-calculus. It was used in [15] for proving the
completeness of inside-out reductions, i.e. for any ρ there is an inside-out
reduction σ and a (inside-out) reduction τ such that ρτ ∼σ. But we
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
201
can get completeness of many more reduction strategies with the gFD
theorem as long as the strategy consists in reordering of contractions of
redexes in the same family set.
Furthermore, it is an argument for proving strong normalization as
soon as one can prove that there is no inﬁnite chain of family creations.
With the gFD theorem, the proof of strong normalization is reduced
to the proof of the non existence of such inﬁnite chains of creations.
We took the example of the standard ﬁrst-order typed lambda-calculus,
but some eﬀort remains to be done in the understanding of higher-order
typed systems where we conjecture that such an argument must exist.
If correct, we could get illuminating proofs of strong normalization.
The gFD theorem also holds in other calculi. In fact, this theorem
is true in any calculus with some compactness property, i.e. nearly all
calculi. In the lambda-calculus, it is simple to express, but it can also be
easily stated in orthogonal term rewriting systems [11] or in combinatory
reduction systems [12]. This theorem seems also correct in calculi with
critical pairs, where permutation equivalence is more complex to deﬁne
(see [5]) since the equivalence classes may be incompatibles due to
diﬀerent choices around critical pairs. Then the permutation equivalence
is very close to event structures [14, 26].
Acknowledgements
Gilles Kahn has been a mentor in my research. He initiated me to denota-
tional semantics and Scott’s logic. Moreover he pointed out to me the
ﬁrst (interesting) papers I ever read about lambda-calculus. His constant
help and support made the results of this paper and others possible.
This article has beneﬁted from numerous comments by Jan-Willem
Klop and Paul-Andr´e Melli`es.
Bibliography
[1]
R. Amadio and P.-L. Curien. Domains and Lambda-calculi. Cambridge
University Press, 1998.
[2]
H. Barendregt. Handbook of Mathematical Logic, chapter the type free
lambda calculus. In North-Holland, 1977.
[3]
H. Barendregt. The Lambda Calculus, Its Syntax and Semantics. North-
Holland, 1984.
[4]
G. Berry and J.-J. L´evy. Minimal and optimal computations of recursive
programs. JACM, 26(1):148–175, January 1979.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

202
J.-J. L´evy
[5]
G. Boudol. Computational semantics of term rewriting systems. In
Algebraic methods in Semantics. Cambridge University Press, 1985.
[6]
A. Church. The Calculi of Lambda-Conversion. Princeton University
Press – Oxford University Press, 1941.
[7]
H. Curry and R. Feys. Combinatory Logic, volume 1. North-Holland, 1958.
[8]
H. Curry, R. Feys and J. Seldin. Combinatory Logic, volume 2. North-
Holland, 1972.
[9]
L. Damas and R. Milner. Principal type-schemes for functional programs.
In POPL, pp. 207–212, 1982.
[10]
R. Hindley. Basic Simple Type Theory. Cambridge University Press,
1997.
[11]
G. Huet and J.-J. L´evy. Computations in orthogonal rewriting systems I
and II, In Computational Logic; Essays in Honor of Alan Robinson. pp. 395–
443. The MIT Press, 1991.
[12]
J.-W. Klop. Combinatory Reduction Systems. PhD thesis. Mathematical
Centre Tracts 127, CWI, Amsterdam, 1980.
[13]
P. Landin. A correspondence between Algol 60 and Church’s lambda-
notation. CACM, 8(2):89–101, 1965.
[14]
C. Laneve. Distributive evaluations of lambda-calculus. Fundamenta
Informaticae, 20(4):333–352, 1994.
[15]
J.-J. L´evy. An algebraic interpretation of the λβ-calculus and a labeled
λ-calculus. In C. B¨ohm (ed.), Lambda-Calculus and Computer Science
Theory, volume 37 of Lecture Notes in Computer Science, pp. 147–165.
Springer, March 1975.
[16]
J.-J. L´evy. R´eductions correctes et optimales dans le lambda calcul. PhD
thesis, University of Paris 7, 1978. (in French).
[17]
J.-J. L´evy. Optimal reductions in the lambda-calculus. In To H. B.
Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism,
pp. 159–191. Academic Press, 1980.
[18]
L. Maranget. La strat´egie paresseuse. PhD thesis, University of Paris 7,
July 1992.
[19]
P.-A. Melli`es. A factorisation theorem in rewriting theory. In Proceedings
of the 7th Conference on Category Theory and Computer Science, volume
1290, Lecture Notes in Computer Science, pp. 49–68, Santa Margherita
Ligure. Springer, 1997.
[20]
R. Nederpelt, J. Geuvers and R. d. Vrijer. Selected Papers on Automath,
volume 133, Studies in Logic and the Foundations of Mathematics. North-
Holland, 1994.
[21]
V. V. Oostrom and R. D. Vrijer. Equivalence of reductions. In Terese,
Term Rewriting Systems. Cambridge University Press, March 2003.
[22]
G. Plotkin. Call-by-name, call-by-value, and the lambda-calculus.
Theoretical Computer Science, 1, 1975.
[23]
D. van Daalen. The Language Theory of Automath. PhD thesis, TUE,
1980.
[24]
V. van Oostrom. Finite family developments. In Proceedings of the 8th
International Conference on Rewriting Techniques and Applications (RTA
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

Generalized ﬁnite developments
203
’97), volume 1232, in Lecture Notes in Computer Science, pp. 308–322,
Sitges, June 1997.
[25]
V. van Oostrom and R. de Vrijer. Four equivalent equivalences of
reductions. In WRS’02, volume 70(6), ENTCS, December 2002.
[26]
G. Winskel. Event structure semantics for ccs and related languages.
Technical report, DAIMI – AARhus University, April 1983.
https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

https://doi.org/10.1017/CBO9780511770524.010 Published online by Cambridge University Press

