Labeling Gaps Between Words:
Recognizing Overlapping Mentions with Mention Separators
Aldrian Obaja Muis and Wei Lu
Singapore University of Technology and Design
{aldrian_muis,luwei}@sutd.edu.sg
Abstract
In this paper, we propose a new model
that is capable of recognizing overlapping
mentions. We introduce a novel notion of
mention separators that can be effectively
used to capture how mentions overlap with
one another. On top of a novel multigraph
representation that we introduce, we show
that efﬁcient and exact inference can still
be performed. We present some theoret-
ical analysis on the differences between
our model and a recently proposed model
for recognizing overlapping mentions, and
discuss the possible implications of the
differences. Through extensive empirical
analysis on standard datasets, we demon-
strate the effectiveness of our approach.
1
Introduction
Named entity recognition (NER), or in general
the task of recognizing entity mentions1 in a text,
has been a research topic for many years (Mc-
Callum and Li, 2003; Nadeau and Sekine, 2007;
Ratinov and Roth, 2009; Ling and Weld, 2012).
However, as noted by Finkel and Manning (2009),
many previous works ignored overlapping men-
tions, although they are quite common.
Figure
1 illustrates some examples of overlapping men-
tions adapted from existing datasets. For example,
the location mention Pennsylvania appears within
the mention of type organization a Pennsylvania
radio station. In practice, overlapping mentions
have been found in many existing datasets across
different domains (Doddington et al., 2004; Kim
et al., 2003; Suominen et al., 2013). Developing
algorithms that can effectively and efﬁciently ex-
tract overlapping mentions can be crucial for the
1As noted in (Florian et al., 2004), mention recognition
is more general than NER, where a mention can be either
named, nominal, or pronominal.
At issue is the liability of a Pennsylvania
:::::::::
GPE
radio station
::::::::::::::::::::
ORG
under the federal wiretap statute.
CAT expression directed by the IL2
::
DNA
regulatory region
:::::::::::::::
DNA
or by a multimer of the NF-AT
::::
PROT
-binding site
:::::::::::::
DNA
was lower.
Figure 1: Examples of overlapping mentions.
performance of many downstream tasks such as
relation extraction (Mintz et al., 2009; Gupta and
Andrassy, 2016), event extraction (Lu and Roth,
2012; Li et al., 2013; Nguyen et al., 2016), coref-
erence resolution (Chang et al., 2013; Lu et al.,
2016), question answering (Mollá et al., 2007),
and equation parsing (Roy et al., 2016).
Overlapping mention recognition is non-trivial,
as existing methods that model mention recogni-
tion as a sequence prediction problem – e.g., us-
ing linear-chain conditional random ﬁelds (CRF)
(Lafferty et al., 2001) – have difﬁculties in han-
dling overlapping mentions (Alex et al., 2007).
Finkel and Manning (2009) proposed to use a tree-
based constituency parsing model to handle nested
entities.2
Due to the tree structured representa-
tion used, the resulting algorithm has a time com-
plexity that is cubic in n for its inference proce-
dure with n being the number of words in the
sentence.
This effectively makes the algorithm
less scalable compared to models such as linear-
chain CRF where the complexity is linear in n.
Lu and Roth (2015) proposed an alternative ap-
proach which shows a time complexity that is lin-
ear in n. Their method differs from the conven-
2We note that nested entities are only one of the two kinds
of overlapping entities, the other kind being crossing entities,
where two entities overlap but neither is contained in another.
However, it is extremely rare, and there is only one occur-
rence of crossing entity in our datasets.

tional sequence labeling approach, in that a hyper-
graph representation was used in their model.
In this work, we make an observation that there
exists an efﬁcient model for recognizing overlap-
ping mentions while still regarding the problem
as a sequence labeling problem. As opposed to
the conventional approach where we assign labels
to natural language words, in our new approach
we assign labels to the gaps between words, mod-
eling the mention boundaries instead of model-
ing the role of words in forming mentions. Fur-
thermore, while these gap-based labels can be
modeled using conventional graphical models like
linear-chain CRFs, we also propose a novel multi-
graph representation to utilize such gap-based la-
bels efﬁciently. To the best of our knowledge, this
is the ﬁrst structured prediction model utilizing a
gap-based annotation scheme to predict overlap-
ping structures.
In this paper we make the following major con-
tributions:
• We propose a set of mention separators
which can be collectively used to deﬁne all
possible mention combinations together with
a novel multigraph representation, on top of
which efﬁcient and exact inference can be
performed.
• Theoretically, we show that unlike a recently
proposed state-of-the-art model that we com-
pare against, our model does not exhibit the
spurious structures issue in its learning pro-
cedure. On the other hand, it still maintains
the same inference time complexity as the
previous model.
• Empirically, we show that our model is able
to achieve higher F1-scores compared to pre-
vious models in multiple datasets.
We believe our proposed approach and the novel
representations can be applied in other research
problems involving predicting overlapping struc-
tures, and we hope this work can inspire further
research along such a direction.
2
Related Work
NER or mention detection is normally regarded
as a chunking task similar to base noun phrase
chunking (Kudo and Matsumoto, 2001; Shen and
Sarkar, 2005), and hence the entities or mentions
are usually represented in a similar way, using
BILOU (Beginning, Inside, Last, Outside, Unit-
length mention) or the simpler BIO annotation
scheme (Ratinov and Roth, 2009). As a chunking
task, it is commonly modeled using sequence la-
beling models, such as the linear-chain CRF (Laf-
ferty et al., 2001), which has time complexity
O(nT 2) with n being the number of words in the
sentence and T the number of mention types.
On the task of recognizing mentions that may
overlap with one another, one of the earliest works
that attempted to regard this task as a structured
prediction task was by McDonald et al. (2005).
They represented entity mentions as top-k predic-
tions with positive score from a structured multil-
abel classiﬁcation model. Their model has a time
complexity of O(n3T).
Alex et al. (2007) proposed a cascading ap-
proach using multiple linear-chain CRF models,
each handling a subset of all the possible mention
types, where the models which come later in the
pipeline have access to the predictions of the mod-
els earlier in the pipeline. This results in the time
complexity of roughly O(nT) depending on how
the pipeline was designed.
Finkel and Manning (2009) later proposed a
constituency parser to handle nested entities by
converting each sentence into a tree, and each
mention is represented as one of the subtrees.
Their model has the standard time complexity
for a constituency parser with binary grammar:
O(n3 |G|), where |G| is the size of the grammar,
which in this case is proportional to T in the best
case, and T 3 in the worst case.
They showed
that their model outperforms a semi-CRF baseline
(Sarawagi and Cohen, 2004) in terms of F1-score.
Recently, Lu and Roth (2015) proposed a
hypergraph-based model called mention hyper-
graph that is able to handle overlapping mentions
with a linear time complexity O(nT). The model
was shown to achieve competitive results com-
pared to previous models on standard datasets. As
we will be making extensive comparisons against
this previous state-of-the-art model, we will de-
scribe this approach in the next section.
3
Mention Hypergraph
In the mention hypergraph model of Lu and Roth
(2015), nodes and directed hyperedges3 are used
together to encode mentions and their combina-
tions. The following ﬁve types of nodes are used
at the position k of a sentence:
• Ak denotes all mentions starting at k or later,
3For brevity, in this paper we may also use edge to refer
to hyperedge in some discussions.

A0
A1
A2
A3
E0
E1
E2
E3
T0
T1
T2
T3
I0
I1
I2
I3
X
X
X
X
X
X
X
X
the
[human
[TCF-1]2
protein]1
A1
A2
E1
E2
T1
T2
I1
I2
I3
X
X
Figure 2: (left) An example mention hypergraph
encoding two overlapping mentions. (right) An
example of spurious structure.
• Ek denotes all mentions starting at k,
• Tk
t denotes all mentions (type t) starting at k,
• Ik
t denotes all mentions (type t) covering k,
• X denotes the end of a mention (leaf node).
Different hyperedges connecting these nodes
are used to represent how the semantics of a node
is composed from those of its child nodes.
Speciﬁcally, each Ak is connected to Ak+1 and
Ek through the hyperedge Ak →(Ak+1, Ek), de-
noting the fact that the set of mentions that start
at k or later is the union of the set of mentions
that start at k + 1 or later and the set of men-
tions that start at k.
Each Ek is connected to
Tk
1, Tk
2, . . . , Tk
T through a hyperedge, denoting
the fact that the mentions that start at k must be
one of the T types. Each Tk
t can be connected to
Ik
t through an edge (denoting there is a mention of
type t that starts at the k-th token) or to X through
another edge (denoting there are no mentions of
type t that start at the k-th token). Each Ik
t can
be connected to Ik+1
t
(denoting there is a mention
continuing to the next token), to X (denoting there
is a mention ending here), or to both (with a single
hyperedge, denoting the two cases above occur at
the same time, a case of overlapping mentions).
In this mention hypergraph, each possible men-
tion is represented as a path from a T-node to the
X-node through a sequence of I-nodes (each de-
noting the words which are part of the mention),
and the set of all mentions present in a given sen-
tence forms a hyperpath from the root node A0 to
the leaf node X. Figure 2 shows how the men-
tion hypergraph represents the two mentions in
the phrase “the human TCF-1 protein”, which are
“TCF-1” and “human TCF-1 protein”. The edges
T1 −I1 and T2 −I2 respectively denote that the
words “human” and “TCF-1” are the beginning of
a mention, and the edges from the I-nodes to the
X-node deﬁne the end of the mentions. We remark
that any mention hypergraph which encodes the
mentions in a sentence, like this example, forms a
hyperpath from the root node A0 to the leaf node
X, where a hyperpath is deﬁned as a subgraph of
a hypergraph with the property that each node has
exactly one outgoing (hyper)edge except the last
node, and the root node is connected to all nodes.
We refer the readers to Lu and Roth (2015) for
more details on the model.
3.1
Spurious Structures
Mention hypergraph is trained by maximizing the
likelihood of the training data, similar to training
a linear-chain CRF. Recall that the likelihood of
the training data can be calculated by taking the
score of the correct structures and divide it by the
normalization term, which is the total score of all
possible structures. Lu and Roth (2015) used a
dynamic programming algorithm to calculate the
normalization term. However, the normalization
term calculated this way contains additional terms,
which we call the spurious structures. This leads
to the following:
Theorem 3.1. Let Z′ be the normalization term
as calculated using forward-backward algorithm
on mention hypergraph, and let Z be the true nor-
malization term. Then we have Z′ > Z.
Due to space limitation, we provide a proof
sketch here. We refer the reader to the supplemen-
tal material for the details on spurious structures.
Proof sketch. First note that Z′ includes all possi-
ble hyperpaths, so Z′ ≥Z. Next, due to the pres-
ence of a node with multiple parents (e.g., node
I2 in Figure 2 (left)), Z′ includes the score of that
node multiple times with different children, which
results in a subgraph which is not a hyperpath. For
example, Z′ includes the score4 of the structure
shown in Figure 2 (right), where node I2 has two
children, and so it is not a hyperpath. Since Z is
the sum of all hyperpaths, this structure is not part
of Z, but it is included in Z′, so Z′ > Z.
Later we will see how this issue may affect the
model’s performance in predicting mentions.
4
Mention Separators
We now describe the mention separators which
can be used to encode overlapping mentions in a
sentence. Traditional encoding schemes that asso-
ciate labels to words, such as BIO scheme, attach
the semantics of the labels to the role of the words
4Note that structure scores exp(w·f) are always positive.

w w
w [w
w] w
w] [w
X
S
E
ES
w - w
w -[w
w]- w
w]-[w
C
CS
EC
ECS
Figure 3: An illustration of the 8 mention separa-
tors. The opening bracket ([), closing bracket (]),
and dash (-) respectively refer to S, E, and C.
in forming mentions. For example, the label B in
BIO scheme denotes the role of the word it is at-
tached to, which is the ﬁrst word of a mention.
This BIO scheme cannot be used directly to en-
code overlapping mentions, since they only en-
code whether a word is part of a mention and pos-
sibly their position in the mention. We notice that
by encoding the mention boundaries instead, we
can represent overlapping mentions. This can be
accomplished by assigning what we call mention
separators to the gaps between two words.
At each gap, we consider eight possible types
of mention separators based on the combination
of the following three cases:
1.
A mention is starting at the next word (S)
2.
A mention is ending at the previous word (E)
3.
A mention is continuing to the next word (C)
Therefore, for each token, the possible combina-
tions of cases are as follows: ECS, EC, CS, C, ES,
E, S, and X, where X means none of the three cases
applies.
For example, the separator EC means
there is a mention ending at the current token and
another mention (overlapping) continuing to the
next token. Note that there might be more than
just two mentions involved here. Figure 3 shows
an illustration of these separators, and Figure 4a
shows how they can be used to encode the exam-
ple in Figure 2.
Now we prove that the following theorem holds:
Theorem 4.1. For any combination of mentions in
a sentence, there is exactly one sequence of men-
tion separators that encodes it.
Proof. Consider the gap between any two adja-
cent words in the sentence. The combination of
mentions present in the sentence uniquely deﬁnes
what mention separator is associated with this gap.
If there is a mention starting at the next word,
then case S applies. Similarly, if there is a men-
tion ending at the previous word, case E applies.
And ﬁnally, if there is a mention covering both
words, case C applies. By combining the cases,
we get the corresponding mention separator for
this gap. In this way, each gap in the sentence has
a unique mention separator, which in turn deﬁnes
the unique sequence of mention separators.
Note that the converse of Theorem 4.1 is not
true, as multiple mention combinations might en-
code to the same sequence of mention separators.
Now we describe two ways the mention separa-
tors can be used to encode overlapping mentions.
STATE-based
The ﬁrst is by directly using
these mention separators to replace the standard
mention encoding scheme (e.g., BIO encoding)
in standard linear-chain CRF. So we assign each
mention separator to a state in a linear-chain CRF
model. Since this model encodes the gap between
words and also the gap before the ﬁrst word and
after the last word, a sentence with n words is
modeled by a sequence of n + 1 mention sepa-
rators. Since each sequence of mention separa-
tors can only encode mentions of the same type,
we support multiple types by using multiple se-
quences, one for each mention type.
EDGE-based
Now, we propose a novel way
of utilizing these mention separators.
Since
the mention separators encode the gaps between
words, it is more intuitive to assign the mention
separators to the edges of a graphical model, as
opposed to the states, as described in the previous
paragraph. To do this, we need to deﬁne the states
of the models in such a way that all possible se-
quences of mention separators are accounted for.
For this purpose we assign two states to each word
at position k:
• Ik: word at k is part of a mention,
• Ok: word at k is not part of any mentions.
Next we deﬁne the edges between the states ac-
cording to the eight possible mention separators
between adjacent words. More speciﬁcally, each
mention separator is mapped to an edge connect-
ing one state in the current position to another state
in the next position depending on whether the sep-
arator deﬁnes current and next word as part of an
mention, so in total we have eight edges between
two positions in the model. Some mention sep-
arators may connect the same two states, for ex-
ample, the ES and C separator both connect Ik to
Ik+1 since in both cases the current word and the
next word are part of a mention. In those cases,
we simply deﬁne multiple edges between the pair
of states. The resulting graph, where there can
be multiple edges between two states, is known
in graph theory literature as a multigraph5.
5In this work, the multigraph representation can also be

R
O0
O1
O2
O3
I0
I1
I2
I3
X
the
human
TCF-1
protein
X
[
-[
]-
]
X
S
CS
EC
E
R
O0
O1
O2
O3
I0
I1
I2
I3
X
the
IL2
regulatory
region
X
[
]-
-
]
X
S
EC
C
E
(a)
(b)
Figure 4: Our mention separator model with the EDGE representation encoding two phrases.
R
O0
O1
O2
O3
I0
I1
I2
I3
X
X
S
X
S
E ES
C
CS
EC
ECS
X
S
E ES
C
CS
EC
ECS
X
S
E ES
C
CS
EC
ECS
X
E
Figure 5: The full graph in EDGE-based model.
The ﬁrst I- and O-nodes in the sentence are con-
nected to the root node, and the last I- and O-
nodes are connected to the unique leaf node X.
Figure 4a shows how the EDGE-based model
encodes the two mentions “human TCF-1 protein”
and “TCF-1” in the phrase “the human TCF-1 pro-
tein”, and Figure 4b shows the encoding of the
phrase found in the second example in Figure 1.
Note how each edge maps to a distinct mention
separator visualized in the text in red.
Figure 5 shows the full graph of our EDGE-
based model, in a format similar to the trellis graph
for linear-chain CRFs in Figure 6. We remark that
the EDGE-based model can be seen as an exten-
sion of linear-chain CRFs, with additional seman-
tics attached to the edges. Also note that this graph
encodes only one mention type. To support multi-
ple types, similar to the STATE-based approach we
can use multiple chains, one for each type.
Note that the edges in our EDGE-based repre-
sentations are directed, with nodes on the left serv-
ing as parents to the nodes on the right. Such di-
rected edges will be helpful when performing in-
ference, to be discussed in the next section.
We remark that the way we utilize multigraph
in the EDGE-based model can also be applied to
the discontiguous mention model (DMM) by Muis
and Lu (2016). In fact, it can be shown that the
number of canonical structures as calculated in the
supplementary material of DMM paper matches
the number of possible paths in our multigraph-
based model, as the transition matrix in DMM
corresponds to the number of possible transitions
from one position to the next position, which is
regarded as a lattice where edges are associated with labels.
B
B
B
B
I
I
I
I
O
O
O
O
R
X
the
[human
TCF-1
protein]1
Figure 6: A linear-chain CRF model encoding a
mention in BIO scheme.
encoded in our multigraph-based model as edges
between adjacent positions. See the supplemental
material for more discussion on this.
4.1
Training, Inference and Decoding
We follow the log-linear approach to deﬁne our
model, using regularized log-likelihood in training
data D as our objective function, as follows:
LD(w)=
X
(x,y)∈D
" X
e∈y
w · f(e) −log Zw(x)
#
−λ||w||2
(1)
Here, (x, y) is a training instance consisting
of the sentence x and the correct output y, w is
the weight vector, f(e) is the feature vector de-
ﬁned over the edge e, Zw(x) is the normalization
term, and λ is the l2-regularization parameter. The
objective function is then optimized until conver-
gence using L-BFGS (Liu and Nocedal, 1989).
We note the mention hypergraph model also de-
ﬁnes the objective in a similar manner. For both
of our models, the inference is done based on a
generalized inside-outside algorithm. Both mod-
els involve directed structures, on top of which
the inference algorithm ﬁrst calculates the inside
score for each node from the leaf node to root,
and then the outside score from the root to the leaf
node, in very much the same way as how infer-
ence is done in a classic graphical model. Speciﬁ-
cally, for our EDGE-based model, the inside scores
are calculated using a bottom-up (right-to-left) dy-
namic programming procedure, where we calcu-
late the inside score at each node by summing up
the scores associated with each path connecting
the current node to one of its child nodes. Each

ACE-2004
ACE-2005
GENIA
Train (%)
Dev (%)
Test (%)
Train (%)
Dev (%)
Test (%)
Train (%)
Dev (%)
Test (%)
# sentence
6,799
829
879
7,336
958
1,047
14,836
1,855
1,855
w/ o.l.
2,685 (39)
293 (35)
373 (42)
2,686 (37)
341 (36)
330 (32)
3,199 (22)
366 (20)
448 (24)
# mentions 22,207
2,511
3,031
24,687
3,217
3,027
46,473
5,014
5,600
o.l.
10,170 (46) 1,091 (43) 1,418 (47)
9,937 (40) 1,192 (37) 1,184 (39)
8,337 (18)
915 (18) 1,217 (22)
o.l. (s)
5,431 (24)
624 (25)
780 (26)
5,044 (20)
600 (19)
638 (21)
4,613 (10)
479 (10)
634 (11)
Table 1: Statistics of the datasets used in the experiments. w/ o.l.: sentences containing overlapping
mentions; o.l.: overlapping mentions; o.l. (s): overlapping mentions with the same type.
such path score is deﬁned as the product of the in-
side score stored in that child node and the score
deﬁned over the edge connecting them. The com-
putation of the outside scores can be done in an
analogous manner from left to right. It can be ver-
iﬁed that the time complexity of this inference pro-
cedure for our model is O(nT), which is the same
as the mention hypergraph model. Note that, how-
ever, both of our models do not have the spurious
structures issue, as for any path in these models
there are no nodes with multiple incoming edges.
During decoding, we perform MAP inference
using a max-product procedure that is analogous
to how the Viterbi decoding algorithm is used in
conventional tree-structured graphical models to
ﬁnd out the highest-scoring subgraph, from which
we extract mentions through the process that we
call the interpretation process. As noted in previ-
ous section, there could be multiple mention com-
binations that encodes to the same sequence of
mention separators, which presents an ambiguity
during the interpretation process. For these am-
biguous cases, we implemented the same inter-
pretation process as that was done in the mention
hypergraph model, which is by resolving ambigu-
ous structures as nested mentions. For other cases,
there is exactly one way to interpret the structure.
For example, in Figure 4b, although there is only
one gap marked as starting position (S) and two
gaps marked as ending position (EC and E), the
interpretation is clear that the two mentions here
are “IL2” and “IL2 regulatory region”.
5
Experiments
5.1
Datasets
To assess our model’s capability in recognizing
overlapping mentions and make comparisons with
previous models, we looked at datasets where
overlapping mentions are explicitly annotated.
Following the previous work (Lu and Roth, 2015),
our main results are based on the standard ACE-
2004 and ACE-2005 datasets (Doddington et al.,
2004).
We also additionally looked at the GE-
NIA dataset (Kim et al., 2003), which was used in
the previous works (Finkel and Manning, 2009; Lu
and Roth, 2015). Furthermore, to understand the
performance of our model on datasets which do
not have overlapping mentions annotated, we also
additionally looked at the CoNLL-2003 dataset
(Tjong Kim Sang and De Meulder, 2003) where
no overlapping mentions were annotated.
For ACE datasets, we used the same splits as
used in our previous work (Lu and Roth, 2015),
published on our website6. For GENIA, we used
GENIAcorpus3.02p7 that comes with POS tags
for each word (Tateisi and Tsujii, 2004). Follow-
ing previous works (Finkel and Manning, 2009;
Lu and Roth, 2015), we ﬁrst split the last 10% of
the data as the test set. Next we used the ﬁrst 80%
and the subsequent 10% for training and develop-
ment, respectively. We made the same modiﬁca-
tions as described by Finkel and Manning (2009)
by collapsing all DNA, RNA, and protein subtypes
into DNA, RNA, and protein, keeping cell line and
cell type, and removing other mention types, re-
sulting in 5 mention types. The statistics of each
dataset are shown in Table 1. We can see overlap-
ping mentions are common in such datasets.
For more details on the dataset preprocessing,
please refer to the supplemental material.
5.2
Features
For both models (mention hypergraph and our
model) that fall under the edge-based paradigm,
we deﬁne features over the edges in the models.
Features are deﬁned as string concatenations of in-
put features – information extracted over the in-
puts (such as current word and POS tags of sur-
rounding words) and output features – structured
information extracted over the output structure.
We carefully deﬁned the input and output features
in a way that allows us to make use of the iden-
tical set of features for both our mention sepa-
rator model and the baseline mention hypergraph
6http://statnlp.org/research/ie#mention-hypergraph
7http://geniaproject.org/genia-corpus/pos-annotation

ACE-2004
ACE-2005
ACE-2004
ACE-2005
(F1 optimized)
(F1 optimized)
P
R
F1
w/s
P
R
F1
w/s
P
R
F1
P
R
F1
LCRF (single)
70.6
41.7
52.5
40.2
66.0
45.0
53.5
41.2
66.2
47.7
55.4
62.1
48.9
54.7
LCRF (multiple)
78.6
44.5
56.9
119.4
76.2
46.8
58.0
118.7
69.9
55.1
61.6
66.5
55.3
60.4
Lu and Roth (2015)
81.2
45.9
58.6
472.5
78.6
46.9
58.7
516.6
72.5
55.7
63.0
66.3
57.3
61.5
This work (STATE)
78.0
51.2
61.8
50.5
75.3
51.7
61.3
52.1
71.2
58.0
64.0
67.6
58.4
62.7
This work (EDGE)
79.5
51.1
62.2
251.5
75.5
51.7
61.3
253.3
72.7
58.0
64.5
69.1
58.1
63.1
Table 2: Main results (on ACE).
model, in order to make a proper comparison. We
also followed Lu and Roth (2015) to add the addi-
tional mention penalty feature for our model and
all baseline approaches so that we are able to tune
F1-scores on the development set. Roughly speak-
ing, the weight of this feature controls how conﬁ-
dent the model should be in predicting more men-
tions. In other words, this is a way to balance the
precision and recall of the model.
When deﬁning the input features for both our
model and the mention hypergraph model, we im-
plemented the features used by previous works in
each dataset based on the descriptions in their pa-
pers: we followed Lu and Roth (2015) for the fea-
tures used in ACE datasets, and Finkel and Man-
ning (2009) for features used in GENIA dataset.
In general, they include surrounding words, sur-
rounding POS tags, bag-of-words, Brown clusters
(for GENIA only), and orthographic features. See
the supplemental material for more details.
5.3
Experimental Setup
We trained each model in the training set, then
tuned the l2-regularization parameter based on the
development set.
For GENIA experiments, we
also tuned the number of Brown clusters.
Fol-
lowing Lu and Roth (2015), we also used each
development set to tune the mention penalty to
optimize the F1-score and report the scores on
the corresponding test sets separately.
Similar
to Finkel and Manning (2009), as another base-
line model we also trained a standard linear-chain
CRF using the BILOU scheme.
Although this
model does not support overlapping mentions, it
gives us a baseline to see the extent to which our
model’s ability to recognize overlapping mentions
can help the overall performance. There is also a
simple extension8 of this linear-chain CRF model
8We also tried a more elaborate encoding scheme based
on BIO scheme Tang et al. (2013), originally designed for
discontiguous mentions, but is supposed to be able to also
recognize overlapping mentions of the same type. However,
the result is very similar to LCRF (multiple), perhaps due to
the invalid structures issue noted by Muis and Lu (2016).
that can support overlapping mentions of differ-
ent types by considering each type separately us-
ing multiple chains, one for each type. We call
this multiple-chain variant LCRF (multiple) and
the earlier standard approach LCRF (single). In
all models, we also implement the mention penalty
feature, adapted accordingly so that increasing the
feature weight will increase the number of men-
tions predicted by the model. See supplemental
material for more details.
We implemented all models using Java, and also
made additional comparisons on running time by
running them under the same machine. In addi-
tion, we also analyzed the convergence rate for dif-
ferent models.
6
Results and Discussion
6.1
Results on ACE
Table 2 shows the results on the ACE datasets,
and these are our main results.
Following pre-
vious works (Finkel and Manning, 2009; Lu and
Roth, 2015), we report standard precision (P),
recall (R) and F1-score percentage scores. The
highest results (F1-score) and those results that are
not signiﬁcantly different from the highest results
are highlighted in bold (based on bootstrap resam-
pling test (Koehn, 2004), where p > 0.01). For
ACE datasets, we make comparisons with the two
versions of the linear-chain CRF baseline: LCRF
(single) which does not support overlapping men-
tions at all and LCRF (multiple) which does not
support overlapping mentions of the same type, as
well as our implementation of the mention hyper-
graph baseline (Lu and Roth, 2015).
From such empirical results we can see that our
proposed model using mention separators consis-
tently yields signiﬁcantly better results (p < 0.01)
than the mention hypergraph model across these
two datasets, under two setups (whether to op-
timize F1-score or not).
Speciﬁcally, when the
state-based approach is used (STATE), our ap-
proach is able to obtain a much higher recall, re-
sulting in improved F1-score.
Empirically, we

P
R
F1
w/s
LCRF (single)
77.1
63.3
69.5
81.6
LCRF (multiple)
75.9
66.1
70.6
175.8
Finkel and Manning (2009)
75.4
65.9
70.3
-
Lu and Roth (2015)
74.2
66.7
70.3
931.9
This work (STATE)
74.0
67.7
70.7
110.8
This work (EDGE)
75.4
66.8
70.8
389.2
Table 3: Results on GENIA.
found this approach was also faster than the LCRF
baseline approach in terms of the number of words
processed each second (w/s) during decoding,
which is expected, since STATE uses fewer num-
ber of tags.9 The edge-based approach (EDGE) us-
ing on our proposed multigraph representation is
able to achieve a signiﬁcant speedup in compari-
son with the state-based approach. And although
this model is still about 50% slower than the men-
tion hypergraph model10, but it yielded a signiﬁ-
cantly higher F1-score (up to 3.6 points higher on
ACE-2004 before optimizing F1-score). These re-
sults largely conﬁrm the effectiveness of our pro-
posed mention separator model as well as the use-
fulness of the multigraph representation for learn-
ing such a model.
And as expected, the LCRF baselines yields rel-
atively lower results compared to the other mod-
els, since it cannot predict overlapping mentions.11
However, such results give us some idea on how
much performance increase we can gain by prop-
erly recognizing overlapping mentions by looking
at the results of LCRF (single), which in this case
can be up to 9.7 points in F1-score in ACE-2004.
We can also see the gain from recognizing over-
lapping mentions of the same type by looking at
the results of LCRF (multiple), which can be up to
5.3 points in F1-score in ACE-2004.
6.2
Results on GENIA
Table 3 shows the results of running the models
with F1-score tuning on GENIA dataset. All mod-
els include Brown clustering features learned from
PubMed abstracts.
Besides the mention hyper-
graph baseline, we also make comparisons with
the system of Finkel and Manning (2009) that can
also support overlapping mentions.
We see that the mention hypergraph model
matches the performance of the constituency
9There are eight tags in STATE and nine in LCRF.
10Though both models have the same time complexity,
they differ by a constant factor.
11LCRF (single) cannot predict any overlapping mentions,
while LCRF (multiple) cannot predict overlapping mentions
of the same type.
%
Lu and Roth (2015)
This work (EDGE)
P
R
F1
P
R
F1
ACE-2004
O
42
72.5
52.4
60.8
72.1
55.3
62.6
Ø
58
72.5
65.0
68.6
74.1
65.5
69.5
ACE-2005
O
32
68.1
52.6
59.4
70.4
55.0
61.8
Ø
68
64.1
65.1
64.6
67.2
63.4
65.2
GENIA
O
24
76.3
60.8
67.7
76.5
60.3
67.4
Ø
76
73.1
70.7
71.9
74.8
71.3
73.0
Table 4: Results on different types of sentences.
parser-based
model
of
Finkel
and
Manning
(2009), while our models based on mention sepa-
rators yield signiﬁcantly higher scores (p < 0.05)
than all other baselines (except LCRF (multiple),
which we will discuss shortly). There are two ob-
servations worth mentioning: (1) the absolute dif-
ference of F1-scores of our models and the base-
line models in GENIA is much smaller compared
to that in ACE datasets, and (2) the LCRF (mul-
tiple) model in GENIA dataset can achieve higher
scores compared to other more complex baseline
models, although LCRF (multiple) does not sup-
port overlapping mentions of the same type. We
suspect that these two observations are due to the
small proportion of overlapping mentions in GE-
NIA (18%, as compared to >40% in ACE datasets,
see Table 1). To investigate this, we conduct a few
more sets of experiments.
6.3
Further Experiments
On different types of sentences:
As these
datasets consist of both overlapping and non-
overlapping mentions, to further understand the
model’s effectiveness in recognizing overlapping
mentions (and non-overlapping mentions), we per-
formed some additional experiments on the men-
tion hypergraph model and our model.12 Speciﬁ-
cally, we split the test data into two portions, one
that consists of only sentences that contain over-
lapping mentions (O) and those which do not (Ø).
The results are shown in Table 4.
We can see that in ACE datasets, our model
achieves higher F1-scores compared to the men-
tion hypergraph for both portions, but it achieves
slightly lower results in GENIA dataset for the
portion that contains overlapping mentions. We
believe that our model focuses more on obtaining
higher overall F1-score, and since the proportion
of the overlapping mentions in GENIA is much
smaller compared to that in ACE datasets, it fo-
12We also performed this on other models. Due to space
constraint, we do not include the results here. See the supple-
mental material for more details.

0
100
200
300
400
500
600
700
800
900
1,000
0
20
40
60
80
100
120
·103
# iterations
Obj. Value
ACE-2004
Mention Hypergraph
This work (Edge)
0
100
200
300
400
500
600
700
800
900
1,000
0
20
40
60
80
100
120
·103
# iterations
Obj. Value
GENIA
Mention Hypergraph
This work (Edge)
0
50
100
150
200
250
300
350
400
450
0
10
20
30
40
·103
# iterations
Obj. Value
CoNLL-2003
Mention Hypergraph
This work (Edge)
Figure 7: Objective vs. training iterations.
P
R
F1
w/s
LCRF (single)
84.2
83.5
83.8
148.6
LCRF (multiple)
91.5
78.2
84.3
283.4
Ratinov and Roth (2009)
-
-
83.7
-
Lu and Roth (2015)
91.1
77.0
83.5
1169.7
This work (STATE)
91.1
78.2
84.2
116.3
This work (EDGE)
91.3
78.2
84.3
554.0
Table 5: Results on CoNLL-2003.
cuses more on the non-overlapping mentions. This
is supported by the fact that the difference of F1-
score between the mention hypergraph model and
our model in GENIA is larger compared to the
difference in ACE datasets (1.1 points in GENIA,
compared to 0.9 and 0.6 points in ACE).
These results also lead to the interesting empir-
ical ﬁnding that our model appears to be able to
do well also on recognizing non-overlapping men-
tions. This motivates us to conduct the next set of
experiments.
On data without overlapping mentions:
We
also performed one additional set of experiments,
on the standard CoNLL-2003 dataset, which has
no overlapping mentions.
The results are shown in Table 5. Again we see
that our models based on mention separators out-
performs all baseline models, including the Illi-
nois NER system where external resources are
not used (Ratinov and Roth, 2009), and a linear-
chain CRF model, although the linear-chain CRF
baseline models some interactions between dis-
tinct mention types and our models do not. Such
results also suggest that modeling the interactions
between distinct mention types may not be crucial
to get a good performance in mention recognition.
This is further corroborated by the results of LCRF
(multiple), which is higher than the result of LCRF
(single) by about 0.5 points.
When comparing our model (without optimiz-
ing F1-score) against the mention hypergraph
model, we note that our model consistently yields
a higher recall. We speculate this is due to the fact
that as our model does not exhibit the issue of spu-
rious structures we discussed in Section 3.1, it is
more conﬁdent in making its predictions.
On convergence:
We also empirically analyzed
the convergence properties of the two models.
Empirically, as illustrated in Figure 7 which shows
how the objective improves when the training pro-
gresses on ACE-2004, GENIA, and CoNLL-2003,
we found that our EDGE-based model requires sig-
niﬁcantly less iterations to converge than the men-
tion hypergraph on the former two datasets which
contain overlapping mentions.
We believe it is
possible that this slower convergence is due to the
spurious structures issue in mention hypergraphs,
which causes the objective function to be more
complex to optimize. However, some further anal-
yses on the convergence issue and the impact of
different ways of exploiting features (over differ-
ent hyperedges) for the hypergraph-based models
are needed.
7
Conclusion and Future Work
We proposed the novel mention separators for
mention recognition where mentions may overlap
with one another.
We also proposed two ways
these mention separators can be utilized to en-
code overlapping mentions, where one of them
utilizes a novel multigraph-based representation.
We showed that by utilizing mention separators,
we can get better recognition results compared to
previous models, and by utilizing the multigraph
representation, we can maintain a good inference
speed, albeit still slower than the mention hyper-
graph model. We also performed theoretical anal-
ysis on the model and showed that our model does
not present the spurious structures issue associ-
ated with a previous state-of-the-art model, while
still keeping the same inference time complexity.
Future work includes further investigations on
how to apply the multigraph approach to other
structured prediction tasks, as well as applications
of the proposed model in other related NLP tasks
that involve the prediction of overlapping struc-
tures, such as equation parsing (Roy et al., 2016).
The code used in this paper is available at
http://statnlp.org/research/ie/.

Acknowledgments
We thank all the reviewers for their useful feed-
back to the earlier draft of this paper. This work is
supported by MOE Tier 1 grant SUTDT12015008.
References
Beatrice Alex, Barry Haddow, and Claire Grover. 2007.
Recognising Nested Named Entities in Biomedical
Text. In Proc. of the Workshop on BioNLP 2007,
June, pages 65–72.
Kai-Wei Chang, Rajhans Samdani, and Dan Roth.
2013.
A Constrained Latent Variable Model for
Coreference Resolution. In Proc. of EMNLP.
George Doddington, Alexis Mitchell, Mark Przybocki,
Lance Ramshaw, Stephanie Strassel, and Ralph
Weischedel. 2004. The Automatic Content Extrac-
tion (ACE) Program-Tasks, Data, and Evaluation.
LREC, 2(1):837–840.
Jenny Rose Finkel and Christopher D. Manning. 2009.
Nested Named Entity Recognition.
In Proc. of
EMNLP, page 141.
Radu Florian, Hany Hassan, Abraham Ittycheriah,
Hongyan Jing, Nanda Kambhatla, Xiaoqiang Luo,
H Nicolov, and Salim Roukos. 2004. A Statistical
Model for Multilingual Entity Detection and Track-
ing. In Proc. of HLT-NAACL.
Pankaj Gupta and Bernt Andrassy. 2016. Table Filling
Multi-Task Recurrent Neural Network for Joint En-
tity and Relation Extraction. In Proc. of COLING.
Jin-Dong Kim, Tomoko Ohta, Yuka Tateisi, and
Jun’ichi Tsujii. 2003. GENIA Corpus–A Semanti-
cally Annotated Corpus for Bio-textmining. Bioin-
formatics, 19(Suppl 1):i180–i182.
Philipp Koehn. 2004. Statistical signiﬁcance tests for
machine translation evaluation. In Proc. of EMNLP,
pages 388–395.
Taku Kudo and Yuji Matsumoto. 2001. Chunking with
Support Vector Machines. In Proc. of NAACL, vol-
ume 816, pages 1–8, Morristown, NJ, USA. Associ-
ation for Computational Linguistics.
John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional Random Fields: Prob-
abilistic Models for Segmenting and Labeling Se-
quence Data. In Proc. of ICML, pages 282–289.
Qi Li, Heng Ji, and Liang Huang. 2013. Joint Event
Extraction via Structured Prediction with Global
Features. In Proc. of ACL, pages 73–82.
Xiao Ling and Daniel S Weld. 2012. Fine-Grained En-
tity Recognition. In Proc. of AAAI.
Dong C. Liu and Jorge Nocedal. 1989. On the Limited
Memory BFGS Method for Large Scale Optimiza-
tion.
Mathematical Programming, 45(1-3):503–
528.
Jing Lu, Deepak Venugopal, Vibhav Gogate, and Vin-
cent Ng. 2016. Joint Inference for Event Corefer-
ence Resolution. In Proc. of COLING, pages 3264–
3275.
Wei Lu and Dan Roth. 2012. Automatic event extrac-
tion with structured preference modeling. In Pro-
ceedings of the 50th Annual Meeting of the Associa-
tion for Computational Linguistics (Volume 1: Long
Papers), pages 835–844, Jeju Island, Korea. Associ-
ation for Computational Linguistics.
Wei Lu and Dan Roth. 2015. Joint Mention Extrac-
tion and Classiﬁcation with Mention Hypergraphs.
In Proc. of EMNLP, pages 857–867. Association for
Computational Linguistics.
Andrew McCallum and Wei Li. 2003. Early Results for
Named Entity Recognition with Conditional Ran-
dom Fields, Feature Induction and Web-enhanced
Lexicons. In Proc. of HLT-NAACL, volume 4, pages
188–191, Morristown, NJ, USA. Association for
Computational Linguistics.
Ryan McDonald,
Koby Crammer,
and Fernando
Pereira. 2005.
Flexible Text Segmentation with
Structured Multilabel Classiﬁcation.
In Proc. of
HLT-EMNLP, October, pages 987–994, Morristown,
NJ, USA. Association for Computational Linguis-
tics.
Mike Mintz, Steven Bills, Rion Snow, and Dan Ju-
rafsky. 2009. Distant Supervision for Relation Ex-
traction without Labeled Data.
In Proc. of ACL-
IJCNLP, pages 1003–1011.
Diego Mollá, Menno Van Zaanen, and Steve Cassidy.
2007. Named Entity Recognition in Question An-
swering of Speech Data. In Proc. of the Australasian
Language Technology Workshop, pages 57–65.
Aldrian Obaja Muis and Wei Lu. 2016.
Learning
to Recognize Discontiguous Entities.
In Proc. of
EMNLP, pages 75–84, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
David Nadeau and Satoshi Sekine. 2007.
A Sur-
vey of Named Entity Recognition and Classiﬁcation.
Lingvisticae Investigationes, 30(1):3–26.
Thien Huu Nguyen, Kyunghyun Cho, and Ralph Gr-
ishman. 2016. Joint Event Extraction via Recurrent
Neural Networks. In Proc. of NAACL-HLT, pages
300–309.
Lev Ratinov and Dan Roth. 2009. Design Challenges
and Misconceptions in Named Entity Recognition.
In Proc. of CoNLL, page 147. Association for Com-
putational Linguistics.

Subhro Roy, Shyam Upadhyay, and Dan Roth. 2016.
Equation Parsing : Mapping Sentences to Grounded
Equations. In Proc. of EMNLP, pages 1088–1097,
Stroudsburg, PA, USA. Association for Computa-
tional Linguistics.
Sunita Sarawagi and William W. Cohen. 2004. Semi-
Markov Conditional Random Fields for Information
Extraction. In Proc. of NIPS, pages 1185–1192.
Hong Shen and Anoop Sarkar. 2005. Voting Between
Multiple Data Representations for Text Chunking.
In Advances in Artiﬁcial Intelligence, volume 3501,
chapter 40, pages 389–400. Springer-Verlag, Berlin,
Heidelberg.
Hanna Suominen, Sanna Salanterä, Sumithra Velupil-
lai,
Wendy
W.
Chapman,
Guergana
Savova,
Noemie Elhadad, Sameer Pradhan, Brett R. South,
Danielle L. Mowery, Gareth J. F. Jones, Johannes
Leveling, Liadh Kelly, Lorraine Goeuriot, David
Martinez, and Guido Zuccon. 2013.
Overview of
the ShARe/CLEF eHealth Evaluation Lab 2013. In
P. Forner, editor, Information Access Evaluation:
Multilinguality, Multimodality, and Visualization,
volume 8138, chapter 24, pages 212–231. Springer-
Verlag, Berlin, Heidelberg.
Buzhou Tang, Yonghui Wu, Min Jiang, Joshua C.
Denny, and Hua Xu. 2013. Recognizing and Encod-
ing Disorder Concepts in Clinical Text using Ma-
chine Learning and Vector Space. In Proc. of the
ShARe/CLEF Evaluation Lab.
Yuka Tateisi and Jun’ichi Tsujii. 2004. Part-of-Speech
Annotation of Biology Research Abstracts. In Proc.
of LREC, pages 1267–1270.
Erik F Tjong Kim Sang and Fien De Meulder.
2003.
Introduction to the CoNLL-2003 Shared
Task: Language-independent Named Entity Recog-
nition. In Proc. of HLT-NAACL, pages 142–147.

