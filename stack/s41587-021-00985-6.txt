1062
correspondence
Nature Biotechnology | VOL 39 | September 2021 | 1055–1065 | www.nature.com/naturebiotechnology
analysis to help conduct test verification 
of COVID-19 breath tests that are moving 
through the RADx pipeline. Including 
academic laboratories in this network 
opens the possibility of agile collaborative 
interactions with test developers to  
improve technologically immature tests 
to the point where they merit FDA EUA, 
clearance or approval. Such cooperative 
initiatives would not only substantially 
improve the nation’s ability to implement 
new diagnostic tests in response to the next 
pandemic or public health emergency, but 
could facilitate development of better tests 
for common chronic conditions in the 
United States, such as heart disease,  
cancer and diabetes.
What about established diagnostics 
companies? On the one hand, these firms 
did not nimbly respond to COVID-19 
with the new types of game-changing 
innovations, such as highly sensitive, 
fluorescent nanoparticle-enabled rapid 
antigen tests for home use or disposable 
point-of-care PCR test kits that were 
desperately needed for contact tracing 
programs at the very beginning of the 
pandemic. On the other hand, they do 
play important roles in the response to 
public health emergencies through their 
substantial R&D, regulatory, production 
and distribution teams and long histories 
of FDA interactions. Larger companies can 
also develop tests rapidly for distribution in 
platforms already available in laboratories 
around the country and can manufacture 
assay reagents at large scale.
One other issue we would like to raise 
is that the data packages submitted on 
diagnostic products for regulatory review 
are produced either internally or through 
subcontracts; these tests typically do not 
undergo third-party verification studies 
before they undergo FDA review. Thus, we 
propose applying the RADx test verification 
approach to assays from large companies 
and small organizations (for example, 
academic groups or medtech startups) 
alike, as it would support impartial FDA 
evaluations and could also level the playing 
field for diagnostics entities of all sizes.
The challenges the FDA faced in 
responding to the pandemic were 
herculean, particularly the need to 
balance test availability and test supply 
shortages with comprehensive performance 
characterization during an avalanche of 
submissions for EUA of molecular, antigen 
and serology tests in a short period of 
time. The RADx program has paved a 
path forward for small- and medium-sized 
diagnostics companies with innovative 
ideas and novel technologies to help meet 
public health challenges and compete in 
the marketplace. A funded network of agile 
academic or private laboratories that can 
objectively evaluate novel clinical tests, 
whether they originate from the largest 
diagnostics companies or new startups, 
can provide impartial and cost-effective 
third-party assessments of test performance 
to facilitate FDA decision making. We 
believe this test verification model could be 
used to not only verify better performing, 
more innovative and less expensive 
diagnostic tests for SARS-CoV-2, fulfilling 
the RADx vision to “speed innovation  
in the development, commercialization,  
and implementation of technologies  
for COVID-19 testing,” but also serve 
healthcare needs and shape test verification 
in the diagnostic testing landscape  
as a whole.
❐
John D. Roback1,11, Erika A. Tyburski7,10,11, 
David Alter1, Saja Asakrah1,  
Ann Chahroudi3,4, Annette Esper5,  
Sarah Farmer2, Janet Figueroa3,  
Jennifer K. Frediani6, Mark D. Gonzalez4, 
David S. Gottfried 
 7, Jeannette Guarner1, 
Nitika A. Gupta3,4, Stacy S. Heilman 
 3,  
Charles E. Hill1, Robert Jerris4, 
Russell R. Kempker 
 5, Jessica Ingersoll1, 
Joshua M. Levy 
 8, Maud Mavigner3, 
Carlos S. Moreno 
 1, Claudia R. Morris3,4, 
Eric J. Nehl9, Andrew S. Neish1, Deniz Peker1, 
Natia Saakadze1, Paulina A. Rebolledo5,9, 
Christina A. Rostad3,4, Nils Schoof3, 
Allie Suessmith3, Julie Sullivan3, 
Yun F. (Wayne) Wang1, Anna Wood 
 3,  
Miriam B. Vos3,4, Oliver Brand 
 7 ✉, 
Greg S. Martin 
 5 ✉ and  
Wilbur A. Lam 
 3,4,7,10 ✉
1Department of Pathology and Laboratory Medicine, 
Emory University School of Medicine, Atlanta, 
GA, USA. 2Center for Advanced Communications 
Policy, Georgia Institute of Technology, Atlanta, 
GA, USA. 3Department of Pediatrics, Emory 
University School of Medicine, Atlanta, GA, USA. 
4Children’s Healthcare of Atlanta, Atlanta, GA, USA. 
5Department of Medicine, Emory University School 
of Medicine, Atlanta, GA, USA. 6Nell Hodgson 
Woodruff School of Nursing, Emory University, 
Atlanta, GA, USA. 7Institute for Electronics and 
Nanotechnology, Georgia Institute of Technology, 
Atlanta, GA, USA. 8Department of Otolaryngology, 
Emory University School of Medicine, Atlanta, 
GA, USA. 9Rollins School of Public Health, Emory 
University, Atlanta, GA, USA. 10Wallace H. Coulter 
Department of Biomedical Engineering, Emory 
University and Georgia Institute of Technology, 
Atlanta, GA, USA. 11These authors contributed 
equally: John D. Roback, Erika A. Tyburski.  
✉e-mail: oliver.brand@ece.gatech.edu;  
greg.martin@emory.edu; wilbur.lam@emory.edu
Published online: 17 August 2021 
https://doi.org/10.1038/s41587-021-01047-7
References
	1.	 Anonymous. Nat. Biotechnol. 39, 391 (2021).
	2.	 Shuren, J. & Stenzel, T. N. Engl. J. Med. 383, e97.
Acknowledgements
The authors thank the FDA’s Jeffrey Shuren and Timothy 
Stenzel for their thoughtful advice and guidance, comments 
and edits on this manuscript. This work is supported by 
NIH Grants U54 EB027690 02S1, U54 EB027690 03S1, 
U54EB027690 03S2 and UL1TR002378
Competing interests
The authors declare no competing interests.
A Python-based programming language for 
high-performance computational genomics
To the Editor — The vast growth of 
next-generation sequencing data has 
provided us with a new understanding of 
many biological phenomena. As sequencing 
technologies evolve, sequencing datatypes 
(such as standard Illumina short reads, 
PacBio long reads or 10x Genomics 
barcoded reads) typically require new 
implementations of corresponding 
computational analysis techniques, 
necessitating software that is not only 
computationally efficient, but also quick to 
develop and easy to maintain so as to enable 
rapid adaptations to new kinds of data.
However, developing an efficient 
software tool requires domain expertise in 
performance engineering, computational 
modeling, and the ability to translate 

1063
correspondence
Nature Biotechnology | VOL 39 | September 2021 | 1055–1065 | www.nature.com/naturebiotechnology
FASTQ
Align
Sequencing
reads
FASTA
Reference
sequence
Index
Call & phase variants
rs123
rs291
rs334
Compare
AVID
CORA
mrsFAST
BWA-MEM
minimap2
mrsFAST
Applications
Applications
Development
Execution
Development
Development
Execution
Execution
Low-level languages
High-level languages
Seq programming language
Compiler 
(C/C++/Rust)
Compiler 
(Python/Perl/Java)
Seq compiler
General-purpose
+ biological
optimizations
.exe
.exe
.pyc
Executable 
(fast)
Bytecode 
Interpreter 
Source code 
(long & complex)
Executable 
Source code 
(short & simple)
Source code 
 (very short & simple)
 (very fast)
(slow)
General-
purpose
optimizations
Applications
Applications
HapCUT2
HapTree-X
Overview of Seq
a
Benchmark applications
c
Seq at a
glance
b
Data pre- & post-process
Applications
SplitNCigar
UMI-tools
FASTQ
BAM
FASTA
Fig. 1 | The Seq programming language. a, Conceptual comparison of Seq, Python and C++. Seq combines the high performance of C++ with the 
programming ease and clarity of Python, by virtue of domain-specific compiler optimizations that are hidden from the user. b, Example Seq code for a simple 
k-mer-based read mapper. c, Schematic of standard genomics pipeline and those state-of-the-art tools compared to Seq.
biological assumptions into algorithm and 
software optimizations1. As a result, most 
high-performance genomics software is 
highly application specific, difficult to 
understand, and difficult to maintain. 
These factors collectively have sparked 
a reproducibility crisis in the fields of 
computational biology and life sciences 
in general2–4. Ultimately, researchers in 
the field lack good tools for developing 
and updating software; one typically must 
choose between a software ecosystem that 
allows rapid development at the expense of 
performance and scalability (for example, 
Python or R) or low-level languages that 
have higher performance but are harder 
to develop and maintain (for example, C, 
C++ or Rust)5. Existing solutions that try 
to fill the void between these extremes (for 
example, Matlab or Julia) are primarily 
geared toward numerical computing rather 
than computational genomics, and the few 
attempts that have been made at simplifying 
the development of bioinformatics software 
(for example, Rust-Bio6, SeqAn7,8, BioJulia9 
or Biopython10) are based on languages that 
are either unfamiliar11, complex and hard 
to program, or too high level to attain good 
performance.
Here, we introduce Seq (Fig. 1a), a 
high-performance, Python-based, compiled 
programming language geared toward 
biology that combines the ease of use of 
high-level languages like Python or Matlab 
with the runtime performance of low-level 
languages like C or C++. Seq shares 
the syntax and semantics of the widely 
used Python language, to which it adds 
genomics-specific language constructs, 
types and optimizations invisible to the 
user. We chose Python as a base language 
because of its succinct, clear syntax and 
widespread adoption; it is one of the most 
commonly used languages in bioinformatics, 
as well as in programming in general11. 
Moreover, Seq’s first-class support for 
C and Python interoperability makes it 
easy to integrate into existing pipelines. 
Unlike compilers for more general-purpose 
languages, Seq’s compiler uses fundamental 
genomics building blocks such as sequences 

1064
correspondence
Nature Biotechnology | VOL 39 | September 2021 | 1055–1065 | www.nature.com/naturebiotechnology
and k-mers, as well as operations on 
them, such as hashing, indexing and 
alignment, to increase performance. These 
domain-specific optimizations and program 
transformations are performed automatically 
by the Seq compiler (Supplementary Fig. 5), 
and in Seq they often require just a single 
additional line of code (Fig. 1b), whereas 
implementation by hand would require 
large-scale code changes and substantial 
testing time to incorporate into existing 
tools. Many of these optimizations require 
analyzing the program as a whole and are 
thus out of reach for software libraries, 
several of which have been developed for a 
number of languages6,10,12. Thus, Seq enables 
users to write high-level, Python-type 
code without worrying about low-level 
implementation details or optimizations, 
which the compiler handles internally 
(Supplementary Notes 1, 3 and 4). Seq aims 
to fill the same role in computational biology 
as Matlab has in numerical computing by 
becoming an accessible portal to the world 
of high-performance genomics.
To demonstrate Seq’s versatility, we 
reimplemented eight popular genomics 
tools in Seq, spanning key tasks in the 
genomics analysis pipeline (Fig. 1c and 
Supplementary Note 2), such as the finding 
of super-maximal exact matches, or SMEMs 
(BWA-MEM13), genome homology table 
construction (CORA14), Hamming distance–
based all-mapping (mrsFAST15), long-read 
alignment (minimap216), single-cell data 
preprocessing (UMI-tools17), SAM/BAM 
post-processing (GATK18), global sequence 
alignment (AVID19) and haplotype phasing 
(Haptree-X20,21). We observe substantial 
runtime improvements over the original, 
hand-optimized C or C++ implementations 
while using less code than these and 
maintaining identical accuracy to them. 
Specifically, Seq achieved up to an order of 
magnitude runtime improvement in data 
pre- and postprocessing, genome index 
construction and numerical downstream 
analysis, a twofold improvement in 
FM-index querying, and up to threefold 
improvements in Smith–Waterman 
alignment and Hamming distance–based 
read mapping, with similar memory 
usages to those of the hand-optimized, 
original versions (Supplementary Fig. 1 
and Supplementary Tables 5–8). The Seq 
implementations had up to an order of 
magnitude fewer lines of code than their C 
or C++ counterparts, making them easier 
to develop and less prone to bugs22. We also 
compared Seq to several high-performance 
genomics libraries, including SeqAn, 
Rust-Bio and BioJulia, and observed 
substantial speedups in every case, with 
over an order of magnitude in some cases 
(Supplementary Tables 3 and 5).
Seq is open source and freely available 
(https://seq-lang.org) and can be tried 
online (https://seq-lang.org/demo) with no 
downloads required. The implementations 
mentioned above, as well as the experimental 
notebook, are available on GitHub (https://
github.com/seq-lang/seq-benchmarks). 
A practical Seq tutorial is also included 
in Supplementary Note 1. A preliminary 
conference version that showcased Seq and 
focused on specifics of the programming 
language itself, without genomics applications, 
appeared in OOPSLA23.
Seq combines high-performance and 
scalability with a familiar, high-level 
and easy-to-maintain programming 
interface. It is the first step toward a rich 
ecosystem providing software development 
environments, visualization tools and 
debugging support, all designed with 
the domain of bioinformatics in mind. 
By offering biologists, bioinformaticians 
and other researchers a scalable way to 
prototype, experiment and analyze large 
biological datasets through a familiar, 
high-performance language, we hope 
that Seq will act as a catalyst for scientific 
discovery and innovation.
❐
Ariya Shajii1,4, Ibrahim Numanagić1,2,4, 
Alexander T. Leighton1,3, Haley Greenyer2, 
Saman Amarasinghe 
 1 ✉ and 
Bonnie Berger 
 1,3 ✉
1Computer Science and Artificial Intelligence 
Laboratory, Massachusetts Institute of Technology, 
Cambridge, MA, USA. 2Department of Computer 
Science, University of Victoria, Victoria, British 
Columbia, Canada. 3Department of Mathematics, 
Massachusetts Institute of Technology, Cambridge, 
MA, USA. 4These authors contributed equally: Ariya 
Shajii, Ibrahim Numanagić.  
✉e-mail: saman@csail.mit.edu; bab@mit.edu
Published online: 19 July 2021 
https://doi.org/10.1038/s41587-021-00985-6
References
	1.	 Yu, Y. W., Daniels, N. M., Danko, D. C. & Berger, B. Cell Syst. 1, 
130–140 (2015).
	2.	 Peng, R. D. Science 334, 1226–1227 (2011).
	3.	 Baker, M. Nature 533, 452–454 (2016).
	4.	 Lee, R. S. & Hanage, W. P. Lancet Microbe https://doi.org/10.1016/
S2666-5247(20)30028-8 (2020).
	5.	 Perkel, J. M. Nature 588, 185–186 (2020).
	6.	 Köster, J. Bioinformatics 32, 444–446 (2016).
	7.	 Döring, A., Weese, D., Rausch, T. & Reinert, K.  
BMC Bioinformatics 9, 11 (2008).
	8.	 Reinert, K. et al. J. Biotechnol. 261, 157–168 (2017).
	9.	 Ward, B. J. BioJulia https://biojulia.net (accessed 19 November 
2020).
	10.	Cock, P. J. et al. Bioinformatics 25, 1422–1423 (2009).
	11.	Russell, P. H., Johnson, R. L., Ananthan, S., Harnke, B. & Carlson, 
N. E. PLoS One 13, e0205898 (2018).
	12.	Stajich, J. E. et al. Genome Res. 12, 1611–1618 (2002).
	13.	Li, H. Preprint at https://arxiv.org/abs/1303.3997 (2013).
	14.	Yorukoglu, D., Yu, Y. W., Peng, J. & Berger, B. Nat. Biotechnol. 34, 
374–376 (2016).
	15.	Hach, F. et al. Nucleic Acids Res. 42, W494–W500 (2014).
	16.	Li, H. Bioinformatics 34, 3094–3100 (2018).
	17.	Smith, T., Heger, A. & Sudbery, I. Genome Res. 27, 491–499 (2017).
	18.	McKenna, A. et al. Genome Res. 20, 1297–1303 (2010).
	19.	Bray, N., Dubchak, I. & Pachter, L. Genome Res. 13, 97–102 
(2003).
	20.	Berger, E. et al. Nat. Commun. 11, 4662 (2020).
	21.	Berger, E., Yorukoglu, D. & Berger, B. International Conference on 
Research in Computational Molecular Biology 28–29  
(Springer, 2015).
	22.	Abelson, H. & Sussman, G. J. Structure and Interpretation of 
Computer Programs (MIT Press, 1996).
	23.	Shajii, A., Numanagić, I., Baghdadi, R., Berger, B. & Amarasinghe, 
S. Proc. ACM Program. Lang. 3, 125:1–125:29 (2019).
Competing interests
The authors declare no competing interests.
Additional information
Supplementary information The online version 
contains supplementary material available at https://doi.
org/10.1038/s41587-021-00985-6.
Peer review information Nature Biotechnology thanks Ivan 
Costa and Judith Zaugg for their contribution to the peer 
review of this work.
Utilize existing genetic diversity before genetic 
modification in indigenous crops
To the Editor — Ethiopia is among the 
largest recipients of global food aid1, with a 
rapidly growing population and highland 
agriculture that is increasingly vulnerable 
to climate change. Despite these challenges, 
the country has made substantial progress 
in reducing food insecurity for millions of 
subsistence farmers over recent decades2. 
This progress extends to a willingness to 
engage with new biotechnologies, including 
genetic modification (GM) through 
commercial cultivation and field trials of 

