Category Theory for Scientists
(Old Version)
David I. Spivak
September 17, 2013
How can mathematics make this diagram meaningful?

2

Preface
An early version of this book was put on line in February 2013 to serve as the textbook for
my course Category Theory for Scientists taught in the spring semester of 2013 at MIT.
During that semester, students provided me with hundreds of comments and questions,
which led to a substantial improvement (and the addition of 50 pages) to the original
document.
In the summer of 2013 I signed a contract with the MIT Press to publish a new
version of this work under the title Category Theory for the Sciences. Because I am
committed to the open source development model I insisted that a version of this book,
namely the one you are reading, remain freely available online. The MIT Press version
will of course not be free.
Other than the title, there are two main diÔ¨Äerences between the present version and
the MIT Press version. The Ô¨Årst diÔ¨Äerence is that I will do a full edit with the help
of professional editors from the Press.
The second diÔ¨Äerence is that I will write up
solutions to the book‚Äôs (approximately 280) exercises; some of these will be included in
the published version, whereas the rest will be available by way of a password-protected
page, accessible only to professors who teach the subject.
3

4

Contents
1
Introduction
7
1.1
A brief history of category theory . . . . . . . . . . . . . . . . . . . . . . .
9
1.2
Intention of this book
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
1.3
What is requested from the student . . . . . . . . . . . . . . . . . . . . . .
12
1.4
Category theory references . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
1.5
Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
2
The category of sets
15
2.1
Sets and functions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
2.2
Commutative diagrams
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
2.3
Ologs
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
2.4
Products and coproducts . . . . . . . . . . . . . . . . . . . . . . . . . . . .
32
2.5
Finite limits in Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
2.6
Finite colimits in Set
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
2.7
Other notions in Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
56
3
Categories and functors, without admitting it
69
3.1
Monoids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69
3.2
Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
3.3
Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
3.4
Orders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
3.5
Databases: schemas and instances
. . . . . . . . . . . . . . . . . . . . . . 102
4
Basic category theory
113
4.1
Categories and Functors . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
4.2
Categories and functors commonly arising in mathematics . . . . . . . . . 129
4.3
Natural transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
4.4
Categories and schemas are equivalent, Cat ¬ª Sch . . . . . . . . . . . . . 165
4.5
Limits and colimits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
4.6
Other notions in Cat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
5
Categories at work
201
5.1
Adjoint functors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
5.2
Categories of functors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
5.3
Monads
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
5.4
Operads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
5

6
CONTENTS

Chapter 1
Introduction
The title page of this book contains a graphic that we reproduce here.
(1.1)
It is intended to evoke thoughts of the scientiÔ¨Åc method.
A hypothesis analyzed by a person produces a prediction, which motivates the
speciÔ¨Åcation of an experiment, which when executed results in an observation,
which analyzed by a person yields a hypothesis.
This sounds valid, and a good graphic can be exceptionally useful for leading a reader
through the story that the author wishes to tell.
Interestingly, a graphic has the power to evoke feelings of understanding, without
really meaning much. The same is true for text: it is possible to use a language such as
English to express ideas that are never made rigorous or clear. When someone says ‚ÄúI
believe in free will,‚Äù what does she believe in? We may all have some concept of what
she‚Äôs saying‚Äîsomething we can conceptually work with and discuss or argue about. But
to what extent are we all discussing the same thing, the thing she intended to convey?
Science is about agreement. When we supply a convincing argument, the result of
this convincing is agreement.
When, in an experiment, the observation matches the
hypothesis‚Äîsuccess!‚Äîthat is agreement. When my methods make sense to you, that is
7

8
CHAPTER 1. INTRODUCTION
agreement. When practice does not agree with theory, that is disagreement. Agreement
is the good stuÔ¨Äin science; it‚Äôs the high Ô¨Åves.
But it is easy to think we‚Äôre in agreement, when really we‚Äôre not.
Modeling our
thoughts on heuristics and pictures may be convenient for quick travel down the road,
but we‚Äôre liable to miss our turnoÔ¨Äat the Ô¨Årst mile. The danger is in mistaking our
convenient conceptualizations for what‚Äôs actually there. It is imperative that we have
the ability at any time to ground out in reality. What does that mean?
Data. Hard evidence. The physical world. It is here that science touches down and
heuristics evaporate. So let‚Äôs look again at the diagram on the cover. It is intended
to evoke an idea of how science is performed. Is there hard evidence and data to back
this theory up? Can we set up an experiment to Ô¨Ånd out whether science is actually
performed according to such a protocol? To do so we have to shake oÔ¨Äthe stupor evoked
by the diagram and ask the question: ‚Äúwhat does this diagram intend to communicate?‚Äù
In this course I will use a mathematical tool called ologs, or ontology logs, to give
some structure to the kinds of ideas that are often communicated in pictures like the
one on the cover. Each olog inherently oÔ¨Äers a framework in which to record data about
the subject. More precisely it encompasses a database schema, which means a system of
interconnected tables that are initially empty but into which data can be entered. For
example consider the olog below
a mass
an object of mass
m held at height h
above the ground
has as mass
o
when dropped has
as number of sec-
onds till hitting the
ground
&
has as height
in meters

a real number h
?
?
2hÀú9.8
/ a real number
This olog represents a framework in which to record data about objects held above the
ground, their mass, their height, and a comparison (the ?-mark in the middle) between
the number of seconds till they hit the ground and a certain real-valued function of their
height. We will discuss ologs in detail throughout this course.
The picture in (1.1) looks like an olog, but it does not conform to the rules that
we lay out for ologs in Section 2.3. In an olog, every arrow is intended to represent a
mathematical function. It is diÔ¨Écult to imagine a function that takes in predictions and
outputs experiments, but such a function is necessary in order for the arrow
a prediction
motivates the speciÔ¨Åcation of
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë an experiment
in (1.1) to make sense. To produce an experiment design from a prediction probably
requires an expert, and even then the expert may be motivated to specify a diÔ¨Äerent
experiment on Tuesday than he is on Monday. But perhaps our criticism has led to a
way forward: if we say that every arrow represents a function when in the context of
a speciÔ¨Åc expert who is actually doing the science at a speciÔ¨Åc time, then Figure (1.1)
begins to make sense. In fact, we will return to the Ô¨Ågure in Section 5.3 (speciÔ¨Åcally
Example 5.3.3.10), where background methodological context is discussed in earnest.

1.1. A BRIEF HISTORY OF CATEGORY THEORY
9
This course is an attempt to extol the virtues of a new branch of mathematics,
called category theory, which was invented for powerful communication of ideas between
diÔ¨Äerent Ô¨Åelds and subÔ¨Åelds within mathematics. By powerful communication of ideas I
actually mean something precise. DiÔ¨Äerent branches of mathematics can be formalized
into categories. These categories can then be connected together by functors. And the
sense in which these functors provide powerful communication of ideas is that facts and
theorems proven in one category can be transferred through a connecting functor to
yield proofs of analogous theorems in another category. A functor is like a conductor of
mathematical truth.
I believe that the language and toolset of category theory can be useful throughout
science. We build scientiÔ¨Åc understanding by developing models, and category theory is
the study of basic conceptual building blocks and how they cleanly Ô¨Åt together to make
such models. Certain structures and conceptual frameworks show up again and again in
our understanding of reality. No one would dispute that vector spaces are ubiquitous.
But so are hierarchies, symmetries, actions of agents on objects, data models, global
behavior emerging as the aggregate of local behavior, self-similarity, and the eÔ¨Äect of
methodological context.
Some ideas are so common that our use of them goes virtually undetected, such as set-
theoretic intersections. For example, when we speak of a material that is both lightweight
and ductile, we are intersecting two sets. But what is the use of even mentioning this
set-theoretic fact? The answer is that when we formalize our ideas, our understanding
is almost always clariÔ¨Åed. Our ability to communicate with others is enhanced, and the
possibility for developing new insights expands. And if we are ever to get to the point
that we can input our ideas into computers, we will need to be able to formalize these
ideas Ô¨Årst.
It is my hope that this course will oÔ¨Äer scientists a new vocabulary in which to think
and communicate, and a new pipeline to the vast array of theorems that exist and are
considered immensely powerful within mathematics. These theorems have not made their
way out into the world of science, but they are directly applicable there. Hierarchies are
partial orders, symmetries are group elements, data models are categories, agent actions
are monoid actions, local-to-global principles are sheaves, self-similarity is modeled by
operads, context can be modeled by monads.
1.1
A brief history of category theory
The paradigm shift brought on by Einstein‚Äôs theory of relativity brought on the real-
ization that there is no single perspective from which to view the world. There is no
background framework that we need to Ô¨Ånd; there are inÔ¨Ånitely many diÔ¨Äerent frame-
works and perspectives, and the real power lies in being able to translate between them.
It is in this historical context that category theory got its start. 1
Category theory was invented in the early 1940s by Samuel Eilenberg and Saunders
Mac Lane.
It was speciÔ¨Åcally designed to bridge what may appear to be two quite
diÔ¨Äerent Ô¨Åelds: topology and algebra. Topology is the study of abstract shapes such as
7-dimensional spheres; algebra is the study of abstract equations such as y2z ‚Äú x3 ¬¥xz2.
People had already created important and useful links (e.g. cohomology theory) between
these Ô¨Åelds, but Eilenberg and Mac Lane needed to precisely compare diÔ¨Äerent links with
1The following history of category theory is far too brief, and perhaps reÔ¨Çects more of the author‚Äôs
aesthetic than any kind of objective truth, whatever that may mean.
Here are some much better
references: [Kro], [Mar1], [LM].

10
CHAPTER 1. INTRODUCTION
one another. To do so they Ô¨Årst needed to boil down and extract the fundamental nature
of these two Ô¨Åelds. But the ideas they worked out amounted to a framework that Ô¨Åt not
only topology and algebra, but many other mathematical disciplines as well.
At Ô¨Årst category theory was little more than a deeply clarifying language for existing
diÔ¨Écult mathematical ideas. However, in 1957 Alexander Grothendieck used category
theory to build new mathematical machinery (new cohomology theories) that granted
unprecedented insight into the behavior of algebraic equations. Since that time, cat-
egories have been built speciÔ¨Åcally to zoom in on particular features of mathematical
subjects and study them with a level of acuity that is simply unavailable elsewhere.
Bill Lawvere saw category theory as a new foundation for all mathematical thought.
Mathematicians had been searching for foundations in the 19th century and were reason-
ably satisÔ¨Åed with set theory as the foundation. But Lawvere showed that the category
of sets is simply a category with certain nice properties, not necessarily the center of
the mathematical universe. He explained how whole algebraic theories can be viewed
as examples of a single system. He and others went on to show that higher order logic
was beautifully captured in the setting of category theory (more speciÔ¨Åcally toposes).
It is here also that Grothendieck and his school worked out major results in algebraic
geometry.
In 1980 Joachim Lambek showed that the types and programs used in computer
science form a speciÔ¨Åc kind of category. This provided a new semantics for talking about
programs, allowing people to investigate how programs combine and compose to create
other programs, without caring about the speciÔ¨Åcs of implementation. Eugenio Moggi
brought the category theoretic notion of monads into computer science to encapsulate
ideas that up to that point were considered outside the realm of such theory.
It is diÔ¨Écult to explain the clarity and beauty brought to category theory by people
like Daniel Kan and Andr¬¥e Joyal. They have each repeatedly extracted the essence of a
whole mathematical subject to reveal and formalize a stunningly simple yet extremely
powerful pattern of thinking, revolutionizing how mathematics is done.
All this time, however, category theory was consistently seen by much of the mathe-
matical community as ridiculously abstract. But in the 21st century it has Ô¨Ånally come
to Ô¨Ånd healthy respect within the larger community of pure mathematics. It is the lan-
guage of choice for graduate-level algebra and topology courses, and in my opinion will
continue to establish itself as the basic framework in which mathematics is done.
As mentioned above category theory has branched out into certain areas of science
as well. Baez and Dolan have shown its value in making sense of quantum physics, it
is well established in computer science, and it has found proponents in several other
Ô¨Åelds as well. But to my mind, we are the very beginning of its venture into scientiÔ¨Åc
methodology. Category theory was invented as a bridge and it will continue to serve in
that role.
1.2
Intention of this book
The world of applied mathematics is much smaller than the world of applicable math-
ematics. As alluded to above, this course is intended to create a bridge between the
vast array of mathematical concepts that are used daily by mathematicians to describe
all manner of phenomena that arise in our studies, and the models and frameworks of
scientiÔ¨Åc disciplines such as physics, computation, and neuroscience.
To the pure mathematician I‚Äôll try to prove that concepts such as categories, func-
tors, natural transformations, limits, colimits, functor categories, sheaves, monads, and

1.2. INTENTION OF THIS BOOK
11
operads‚Äîconcepts that are often considered too abstract for even math majors‚Äîcan
be communicated to scientists with no math background beyond linear algebra. If this
material is as teachable as I think, it means that category theory is not esoteric but
somehow well-aligned with ideas that already make sense to the scientiÔ¨Åc mind. Note,
however, that this book is example-based rather than proof-based, so it may not be
suitable as a reference for students of pure mathematics.
To the scientist I‚Äôll try to prove the claim that category theory includes a formal
treatment of conceptual structures that the scientist sees often, perhaps without realizing
that there is well-oiled mathematical machinery to be employed. We will work on the
structure of information; how data is made meaningful by its connections, both internal
and outreaching, to other data. Note, however, that this book should most certainly
not be taken as a reference on scientiÔ¨Åc matters themselves. One should assume that
any account of physics, materials science, chemistry, etc. has been oversimpliÔ¨Åed. The
intention is to give a Ô¨Çavor of how category theory may help us model scientiÔ¨Åc ideas,
not to explain these ideas in a serious way.
Data gathering is ubiquitous in science. Giant databases are currently being mined
for unknown patterns, but in fact there are many (many) known patterns that simply
have not been catalogued. Consider the well-known case of medical records. A patient‚Äôs
medical history is often known by various individual doctor-oÔ¨Éces but quite inadequately
shared between them. Sharing medical records often means faxing a hand-written note
or a Ô¨Ålled-in house-created form between oÔ¨Éces.
Similarly, in science there exists substantial expertise making brilliant connections
between concepts, but it is being conveyed in silos of English prose known as journal
articles. Every scientiÔ¨Åc journal article has a methods section, but it is almost impossible
to read a methods section and subsequently repeat the experiment‚Äîthe English language
is inadequate to precisely and concisely convey what is being done.
The Ô¨Årst thing to understand in this course is that reusable methodologies can be
formalized, and that doing so is inherently valuable. Consider the following analogy.
Suppose you want to add up the area of a region in space (or the area under a curve).
You break the region down into small squares, each of which you know has area A; then
you count the number of squares, say n, and the result is that the region has an area of
about nA. If you want a more precise and accurate result you repeat the process with
half-size squares. This methodology can be used for any area-Ô¨Ånding problem (of which
there are more than a Ô¨Årst-year calculus student generally realizes) and thus it deserves
to be formalized. But once we have formalized this methodology, it can be taken to its
limit and out comes integration by Riemann sums.
I intend to show that category theory is incredibly eÔ¨Écient as a language for exper-
imental design patterns, introducing formality while remaining Ô¨Çexible. It forms a rich
and tightly woven conceptual fabric that will allow the scientist to maneuver between
diÔ¨Äerent perspectives whenever the need arises. Once one builds that fabric for oneself,
he or she has an ability to think about models in a way that simply would not occur
without it. Moreover, putting ideas into the language of category theory forces a person
to clarify their assumptions. This is highly valuable both for the researcher and for his
or her audience.
What must be recognized in order to Ô¨Ånd value in this course is that conceptual chaos
is a major problem. Creativity demands clarity of thinking, and to think clearly about a
subject requires an organized understanding of how its pieces Ô¨Åt together. Organization
and clarity also lead to better communication with others. Academics often say they are
paid to think and understand, but that is not true. They are paid to think, understand,

12
CHAPTER 1. INTRODUCTION
and communicate their Ô¨Åndings.
Universal languages for science‚Äîlanguages such as
calculus and diÔ¨Äerential equations, matrices, or simply graphs and pie-charts‚Äîalready
exist, and they grant us a cohesiveness that makes scientiÔ¨Åc research worthwhile. In this
book I will attempt to show that category theory can be similarly useful in describing
complex scientiÔ¨Åc understandings.
1.3
What is requested from the student
I will do my best to make clear the value of category theory in science, but I am not a
scientist. To that end I am asking for your help in exploring how category theory may
be useful in your speciÔ¨Åc Ô¨Åeld.
I also want you to recognize that the value of mathematics is not generally obvious
at Ô¨Årst. A good student learning a good subject with a good teacher will see something
compelling almost immediately, but may not see how it will be useful in real life. This
will come later. I hope you will work hard to understand even without yet knowing what
its actual value in your life and research will be. Like a student of soccer is encouraged
to spend hours juggling the ball when he or she could be practicing penalty shots, it
is important to gain facility with the materials you will be using. Doing exercises is
imperative for learning mathematics.
1.4
Category theory references
I wrote this book because the available books on category theory are almost all written
for mathematicians (the rest are written for computer scientists). There is one book by
Lawvere and Schanuel, called Conceptual Mathematics [LS], that oÔ¨Äers category theory
to a wider audience, but its style is not appropriate for this course. Still, it is very well
written and clear.
The ‚Äúbible‚Äù of category theory is Categories for the working mathematician by Mac
Lane [Mac]. But as the title suggests, it was written for working mathematicians and
will be quite opaque to my target audience. However, once a person has read my book,
Mac Lane‚Äôs book may become a valuable reference.
Other good books include Steve Awodey‚Äôs book Category theory [Awo] and Barr and
Wells book Category theory for computing science, [BW]. A paper by Brown and Porter
called Category Theory: an abstract setting for analogy and comparison [BP1] is more
in line with the style of this book, only much shorter. Online, I Ô¨Ånd wikipedia and a site
called the nlab to be quite useful.
This book attempts to explain category theory by examples and exercises rather than
by theorems and proofs. I hope this approach will be valuable to the working scientist.
1.5
Acknowledgments
I would like to express my deep appreciation for the many scientists who I have worked
with over the past Ô¨Åve years. It all started with Paea LePendu who Ô¨Årst taught me about
databases when I was naively knocking on doors in the University of Oregon computer
science department. This book would never have been written if Tristan Nguyen and
Dave Balaban had not noticed my work and encouraged me to continue. Dave Balaban
and Peter Gates have been my scientiÔ¨Åc partners since the beginning, working hard to

1.5. ACKNOWLEDGMENTS
13
understand what I‚Äôm oÔ¨Äering and working just as hard to help me understand all that
I‚Äôm missing. Peter Gates has deepened my understanding of data in profound ways.
I have also been tremendously lucky to know Haynes Miller, who made it possible
for me set down at MIT, with the help of Clark Barwick and Jacob Lurie. I knew that
MIT would be the best place in the world for me to pursue this type of research, and
it has really come through. Researchers like Markus Buehler and his graduate students
Tristan Giesa and Dieter Brommer have been a pleasure to work with, and the many
materials science examples scattered throughout this book is a testament to how much
our work together has inÔ¨Çuenced my thinking.
I‚Äôd also like to thank my collaborators and conversation partners with whom I have
discussed subjects written about in this book. Other than people mentioned above, these
include Steve Awodey, Allen Brown, Adam Chlipala, Carlo Curino, Dan Dugger, Henrik
Forssell, David Gepner, Jason Gross, Bob Harper, Ralph Hutchison, Robert Kent, Jack
Morava, Scott Morrison, David Platt, Joey Perricone, Dylan Rupel, Guarav Singh, Sam
Shames, Nat Stapleton, Patrick Schultz, Ka Yu Tam, Ryan Wisnesky, Jesse Wolfson,
and Elizabeth Wood.
I would like to thank Peter Kleinhenz and Peter Gates for reading this book and
providing invaluable feedback before I began teaching the 18-S996 class at MIT in Spring
2013. In particular the cover image is a mild alteration of something Gates sent me to
help motivate the book to scientists.
I would also like to greatly thank the 18-S996
course grader Darij Grinberg, who was not only the best grader I‚Äôve had in my 14 years
of teaching, but gave me more comments than anyone else on the book itself. I‚Äôd also like
to thank the students from the 18-S996 class at MIT who helped me Ô¨Ånd typos, pointed
me to unclear explanations, and generally helped me improve the book in many ways.
Other than the people listed above, these include Aaron Brookner, Leon Dimas, Dylan
Erb, Deokhwan Kim, Taesoo Kim, Owen Lewis, Yair Shenfeld, and Adam Strandberg.
I would like to thank my teacher, Peter Ralston, who taught me to repeatedly question
the obvious. My ability to commit to a project like this one and to see it to fruition has
certainly been enhanced since studying with him.
Finally, I acknowledge my appreciation for support from the OÔ¨Éce of Naval Research
2 without which this book would not have been remotely possible. I believe that their
funding of basic research is an excellent way of ensuring that the US remains a global
leader in the years to come.
2Grant numbers: N000140910466, N000141010841, N000141310260

14
CHAPTER 1. INTRODUCTION

Chapter 2
The category of sets
The theory of sets was invented as a foundation for all of mathematics. The notion of
sets and functions serves as a basis on which to build our intuition about categories in
general. In this chapter we will give examples of sets and functions and then move on
to discuss commutative diagrams. At this point we can introduce ologs which will allow
us to use the language of category theory to speak about real world concepts. Then we
will introduce limits and colimits, and their universal properties. All of this material is
basic set theory, but it can also be taken as an investigation of our Ô¨Årst category, the
category of sets, which we call Set. We will end this chapter with some other interesting
constructions in Set that do not Ô¨Åt into the previous sections.
2.1
Sets and functions
2.1.1
Sets
In this course I‚Äôll assume you know what a set is. We can think of a set X as a collection
of things x P X, each of which is recognizable as being in X and such that for each pair
of named elements x, x1 P X we can tell if x ‚Äú x1 or not. 1 The set of pendulums is the
collection of things we agree to call pendulums, each of which is recognizable as being a
pendulum, and for any two people pointing at pendulums we can tell if they‚Äôre pointing
at the same pendulum or not.
Notation 2.1.1.1. The symbol H denotes the set with no elements. The symbol N
denotes the set of natural numbers, which we can write as
N :‚Äú t0, 1, 2, 3, 4, . . . , 877, . . .u.
The symbol Z denotes the set of integers, which contains both the natural numbers and
their negatives,
Z :‚Äú t. . . , ¬¥551, . . . , ¬¥2, ¬¥1, 0, 1, 2, . . .u.
If A and B are sets, we say that A is a subset of B, and write A ƒé B, if every element
of A is an element of B. So we have N ƒé Z. Checking the deÔ¨Ånition, one sees that
1Note that the symbol x1, read ‚Äúx-prime‚Äù, has nothing to do with calculus or derivatives. It is simply
notation that we use to name a symbol that is suggested as being somehow like x. This suggestion
of kinship between x and x1 is meant only as an aid for human cognition, and not as part of the
mathematics.
15

16
CHAPTER 2. THE CATEGORY OF SETS
Figure 2.1: A set X with 9 elements and a set Y with no elements, Y ‚Äú H.
for any set A, we have (perhaps uninteresting) subsets H ƒé A and A ƒé A. We can
use set-builder notation to denote subsets. For example the set of even integers can be
written tn P Z | n is evenu. The set of integers greater than 2 can be written in many
ways, such as
tn P Z | n ƒÖ 2u
or
tn P N | n ƒÖ 2u
or
tn P N | n ƒõ 3u.
The symbol D means ‚Äúthere exists‚Äù. So we could write the set of even integers as
tn P Z | n is evenu
‚Äú
tn P Z | Dm P Z such that 2m ‚Äú nu.
The symbol D! means ‚Äúthere exists a unique‚Äù. So the statement ‚ÄúD!x P R such that x2 ‚Äú
0‚Äù means that there is one and only one number whose square is 0. Finally, the symbol
@ means ‚Äúfor all‚Äù. So the statement ‚Äú@m P N Dn P N such that m ƒÉ n‚Äù means that for
every number there is a bigger one.
As you may have noticed, we use the colon-equals notation ‚Äú A :‚Äú XY Z ‚Äù to mean
something like ‚ÄúdeÔ¨Åne A to be XY Z‚Äù. That is, a colon-equals declaration is not denoting
a fact of nature (like 2 ` 2 ‚Äú 4), but a choice of the speaker. It just so happens that the
notation above, such as N :‚Äú t0, 1, 2, . . .u, is a widely-held choice.
Exercise 2.1.1.2. Let A ‚Äú t1, 2, 3u. What are all the subsets of A? Hint: there are 8. ‚ô¶
2.1.2
Functions
If X and Y are sets, then a function f from X to Y , denoted f : X √ë Y , is a mapping
that sends each element x P X to an element of Y , denoted fpxq P Y . We call X the
domain of the function f and we call Y the codomain of f.

2.1. SETS AND FUNCTIONS
17
(2.2)
Note that for every element x P X, there is exactly one arrow emanating from x,
but for an element y P Y , there can be several arrows pointing to y, or there can be no
arrows pointing to y.
Application 2.1.2.1. In studying the mechanics of materials, one wishes to know how a
material responds to tension. For example a rubber band responds to tension diÔ¨Äerently
than a spring does. To each material we can associate a force-extension curve, recording
how much force the material carries when extended to various lengths.
Once we Ô¨Åx
a methodology for performing experiments, Ô¨Ånding a material‚Äôs force-extension curve
would ideally constitute a function from the set of materials to the set of curves. 2
‚ô¶‚ô¶
Exercise 2.1.2.2. Here is a simpliÔ¨Åed account of how the brain receives light. The eye
contains about 100 million photoreceptor (PR) cells. Each connects to a retinal ganglion
(RG) cell. No PR cell connects to two diÔ¨Äerent RG cells, but usually many PR cells can
attach to a single RG cell.
Let PR denote the set of photoreceptor cells and let RG denote the set of retinal
ganglion cells.
a.) According to the above account, does the connection pattern constitute a function
RG √ë PR, a function PR √ë RG or neither one?
b.) Would you guess that the connection pattern that exists between other areas of the
brain are ‚Äúfunction-like‚Äù?
‚ô¶
Example 2.1.2.3. Suppose that X is a set and X1 ƒé X is a subset. Then we can consider
the function X1 √ë X given by sending every element of X1 to ‚Äúitself‚Äù as an element of
X. For example if X ‚Äú ta, b, c, d, e, fu and X1 ‚Äú tb, d, eu then X1 ƒé X and we turn that
into the function X1 √ë X given by b √û√ë b, d √û√ë d, e √û√ë e. 3
As a matter of notation, we may sometimes say something like the following: Let X
be a set and let i: X1 ƒé X be a subset. Here we are making clear that X1 is a subset of
X, but that i is the name of the associated function.
2In reality, diÔ¨Äerent samples of the same material, say samples of diÔ¨Äerent sizes or at diÔ¨Äerent
temperatures, may have diÔ¨Äerent force-extension curves. If we want to see this as a true function whose
codomain is curves it should have as domain something like the set of material samples.
3This kind of arrow, √û√ë , is read aloud as ‚Äúmaps to‚Äù. A function f : X √ë Y means a rule for assigning
to each element x P X an element fpxq P Y . We say that ‚Äúx maps to fpxq‚Äù and write x √û√ë fpxq.

18
CHAPTER 2. THE CATEGORY OF SETS
Exercise 2.1.2.4. Let f : N √ë N be the function that sends every natural number to its
square, e.g. fp6q ‚Äú 36. First Ô¨Åll in the blanks below, then answer a question.
a.) 2 √û√ë
b.) 0 √û√ë
c.) ¬¥2 √û√ë
d.) 5 √û√ë
e.) Consider the symbol √ë and the symbol √û√ë. What is the diÔ¨Äerence between how
these two symbols are used in this book?
‚ô¶
Given a function f : X √ë Y , the elements of Y that have at least one arrow pointing
to them are said to be in the image of f; that is we have
impfq :‚Äú ty P Y | Dx P X such that fpxq ‚Äú yu.
(2.3)
Exercise 2.1.2.5. If f : X √ë Y is depicted by (2.2) above, write its image, impfq as a
set.
‚ô¶
Given a function f : X √ë Y and a function g: Y √ë Z, where the codomain of f is
the same set as the domain of g (namely Y ), we say that f and g are composable
X
f
√ù√ù√ù√ë Y
g
√ù√ù√ù√ë Z.
The composition of f and g is denoted by g Àù f : X √ë Z.
Figure 2.4: Functions f : X √ë Y and g: Y √ë Z compose to a function g Àù f : X √ë Z;
just follow the arrows.
Let X and Y be sets. We write HomSetpX, Y q to denote the set of functions X √ë Y .
4 Note that two functions f, g: X √ë Y are equal if and only if for every element x P X
we have fpxq ‚Äú gpxq.
Exercise 2.1.2.6. Let A ‚Äú t1, 2, 3, 4, 5u and B ‚Äú tx, yu.
4The strange notation HomSetp¬¥, ¬¥q will make more sense later, when it is seen as part of a bigger
story.

2.1. SETS AND FUNCTIONS
19
a.) How many elements does HomSetpA, Bq have?
b.) How many elements does HomSetpB, Aq have?
‚ô¶
Exercise 2.1.2.7.
a.) Find a set A such that for all sets X there is exactly one element in HomSetpX, Aq.
Hint: draw a picture of proposed A‚Äôs and X‚Äôs.
b.) Find a set B such that for all sets X there is exactly one element in HomSetpB, Xq.
‚ô¶
For any set X, we deÔ¨Åne the identity function on X, denoted idX : X √ë X, to be
the function such that for all x P X we have idXpxq ‚Äú x.
DeÔ¨Ånition 2.1.2.8 (Isomorphism). Let X and Y be sets. A function f : X √ë Y is
called an isomorphism, denoted f : X
‚Äì
√ù√ë Y , if there exists a function g: Y √ë X such
that g Àù f ‚Äú idX and f Àù g ‚Äú idY . We also say that f is invertible and we say that g
is the inverse of f. If there exists an isomorphism X
‚Äì
√ù√ë Y we say that X and Y are
isomorphic sets and may write X ‚Äì Y .
Example 2.1.2.9. If X and Y are sets and f : X √ë Y is an isomorphism then the
analogue of Diagram 2.2 will look like a perfect matching, more often called a one-to-
one correspondence. That means that no two arrows will hit the same element of Y ,
and every element of Y will be in the image. For example, the following depicts an
isomorphism X
‚Äì
√ù√ë Y .
Application 2.1.2.10. There is an isomorphism between the set NucDNA of nucleotides
found in DNA and the set NucRNA of nucleotides found in RNA. Indeed both sets have
four elements, so there are 24 diÔ¨Äerent isomorphisms. But only one is useful. Before we
say which one it is, let us say there is also an isomorphism NucDNA ‚Äì tA, C, G, Tu and
an isomorphism NucRNA ‚Äì tA, C, G, Uu, and we will use the letters as abbreviations for
the nucleotides.
The convenient isomorphism NucDNA
‚Äì
√ù√ë NucRNA is that given by RNA transcription;
it sends
A √û√ë U, C √û√ë G, G √û√ë C, T √û√ë A.

20
CHAPTER 2. THE CATEGORY OF SETS
(See also Application 4.1.2.19.) There is also an isomorphism NucDNA
‚Äì
√ù√ë NucDNA (the
matching in the double-helix) given by
A √û√ë T, C √û√ë G, G √û√ë C, T √û√ë A.
Protein production can be modeled as a function from the set of 3-nucleotide se-
quences to the set of eukaryotic amino acids. However, it cannot be an isomorphism
because there are 43 ‚Äú 64 triplets of RNA nucleotides, but only 21 eukaryotic amino
acids.
‚ô¶‚ô¶
Exercise 2.1.2.11. Let n P N be a natural number and let X be a set with exactly n
elements.
a.) How many isomorphisms are there from X to itself?
b.) Does your formula from part a.) hold when n ‚Äú 0?
‚ô¶
Lemma 2.1.2.12. The following facts hold about isomorphism.
1. Any set A is isomorphic to itself; i.e. there exists an isomorphism A ‚Äì
√ù√ë A.
2. For any sets A and B, if A is isomorphic to B then B is isomorphic to A.
3. For any sets A, B, and C, if A is isomorphic to B and B is isomorphic to C then
A is isomorphic to C.
Proof.
1. The identity function idA : A √ë A is invertible; its inverse is idA because
idA Àù idA ‚Äú idA.
2. If f : A √ë B is invertible with inverse g: B √ë A then g is an isomorphism with
inverse f.
3. If f : A √ë B and f 1 : B √ë C are each invertible with inverses g: B √ë A and
g1 : C √ë B then the following calculations show that f 1 Àù f is invertible with
inverse g Àù g1:
pf 1 Àù fq Àù pg Àù g1q ‚Äú f 1 Àù pf Àù gq Àù g1 ‚Äú f 1 Àù idB Àù g1 ‚Äú f 1 Àù g1 ‚Äú idC
pg Àù g1q Àù pf 1 Àù fq ‚Äú g Àù pg1 Àù f 1q Àù f ‚Äú g Àù idB Àù f ‚Äú g Àù f ‚Äú idA
‚ñ°
Exercise 2.1.2.13. Let A and B be the sets drawn below:
A:=
a‚Äö
7‚Äö
Q‚Äö
B:=
r8‚Äö
‚ÄúBob‚Äù
‚Äö
‚ô£‚Äö

2.1. SETS AND FUNCTIONS
21
Note that the sets A and B are isomorphic. Supposing that f : B √ë t1, 2, 3, 4, 5u sends
‚ÄúBob‚Äù to 1, sends ‚ô£to 3, and sends r8 to 4, is there a canonical function A √ë t1, 2, 3, 4, 5u
corresponding to f? 5
‚ô¶
Exercise 2.1.2.14. Find a set A such that for any set X there is a isomorphism of sets
X ‚Äì HomSetpA, Xq.
Hint: draw a picture of proposed A‚Äôs and X‚Äôs.
‚ô¶
For any natural number n P N, deÔ¨Åne a set
n :‚Äú t1, 2, 3, . . . , nu.
(2.6)
So, in particular, 2 ‚Äú t1, 2u, 1 ‚Äú t1u, and 0 ‚Äú H.
Let A be any set. A function f : n √ë A can be written as a sequence
f ‚Äú pfp1q, fp2q, . . . , fpnqq.
Exercise 2.1.2.15.
a.) Let A ‚Äú ta, b, c, du. If f : 10 √ë A is given by pa, b, c, c, b, a, d, d, a, bq, what is fp4q?
b.) Let s: 7 √ë N be given by spiq ‚Äú i2. Write s out as a sequence.
‚ô¶
DeÔ¨Ånition 2.1.2.16. Cardinality of Ô¨Ånite sets][
Let A be a set and n P N a natural number. We say that A is has cardinality n,
denoted
|A| ‚Äú n,
if there exists an isomorphism of sets A ‚Äì n. If there exists some n P N such that A has
cardinality n then we say that A is Ô¨Ånite. Otherwise, we say that A is inÔ¨Ånite and write
|A| ƒõ 8.
Exercise 2.1.2.17.
a.) Let A ‚Äú t5, 6, 7u. What is |A|?
b.) What is |N|?
c.) What is |tn P N | n ƒè 5u|?
‚ô¶
Lemma 2.1.2.18. Let A and B be Ô¨Ånite sets. If there is an isomorphism of sets f : A √ë
B then the two sets have the same cardinality, |A| ‚Äú |B|.
Proof. Suppose f : A √ë B is an isomorphism. If there exists natural numbers m, n P
N and isomorphisms a: m
‚Äì
√ù√ë A and b: n
‚Äì
√ù√ë B then m
a¬¥1
√ù√ù√ë A
f√ù√ë B
b√ù√ë n is an
isomorphism. One can prove by induction that the sets m and n are isomorphic if and
only if m ‚Äú n.
‚ñ°
5Canonical means something like ‚Äúbest choice‚Äù, a choice that stands out as the only reasonable one.

22
CHAPTER 2. THE CATEGORY OF SETS
2.2
Commutative diagrams
At this point it is diÔ¨Écult to precisely deÔ¨Åne diagrams or commutative diagrams in
general, but we can give the heuristic idea. 6 Consider the following picture:
A
f
/
h

B
g

C
(2.7)
We say this is a diagram of sets if each of A, B, C is a set and each of f, g, h is a function.
We say this diagram commutes if g Àù f ‚Äú h. In this case we refer to it as a commutative
triangle of sets.
Application 2.2.1.1. The central dogma of molecular biology is that ‚ÄúDNA codes for
RNA codes for protein‚Äù. That is, there is a function from DNA triplets to RNA triplets
and a function from RNA triplets to amino acids. But sometimes we just want to discuss
the translation from DNA to amino acids, and this is the composite of the other two.
The commutative diagram is a picture of this fact.
‚ô¶‚ô¶
Consider the following picture:
A
f
/
h

B
g

C
i
/ D
We say this is a diagram of sets if each of A, B, C, D is a set and each of f, g, h, i is a
function. We say this diagram commutes if g Àù f ‚Äú i Àù h. In this case we refer to it as a
commutative square of sets.
Application 2.2.1.2. Given a physical system S, there may be two mathematical ap-
proaches f : S √ë A and g: S √ë B that can be applied to it. Either of those results in
a prediction of the same sort, f 1 : A √ë P and g1 : B √ë P. For example, in mechanics
we can use either Lagrangian approach or the Hamiltonian approach to predict future
states. To say that the diagram
S
/

A

B
/ P
commutes would say that these approaches give the same result.
‚ô¶‚ô¶
And so on. Note that diagram (2.7) is considered to be the same diagram as each of
6We will deÔ¨Åne commutative diagrams precisely in Section 4.5.2.

2.3. OLOGS
23
the following:
A
f
/
h

B
g

C
A
f
/
h
7
B
g
/ C
B
g

C
A
h
?
f
O
2.3
Ologs
In this course we will ground the mathematical ideas in applications whenever possible.
To that end we introduce ologs, which will serve as a bridge between mathematics and
various conceptual landscapes. The following material is taken from [SK], an introduction
to ologs.
D
an amino acid
found in dairy
is
&
A
arginine
‚úì
‚úì
has
/
is
o
is

E
an electrically-
charged side
chain
is

X
an amino acid
has
w
has
'
has
/
R
a side chain
N
an amine group
C
a carboxylic acid
(2.8)
2.3.1
Types
A type is an abstract concept, a distinction the author has made. We represent each
type as a box containing a singular indeÔ¨Ånite noun phrase. Each of the following four
boxes is a type:
a man
an automobile
a pair pa, wq, where w is
a woman and a is an au-
tomobile
a pair pa, wq where w is
a woman and a is a blue
automobile owned by w
(2.9)
Each of the four boxes in (2.9) represents a type of thing, a whole class of things,
and the label on that box is what one should call each example of that class. Thus ‚åúa
man‚åùdoes not represent a single man, but the set of men, each example of which is
called ‚Äúa man‚Äù. Similarly, the bottom right box represents an abstract type of thing,

24
CHAPTER 2. THE CATEGORY OF SETS
which probably has more than a million examples, but the label on the box indicates the
common name for each such example.
Typographical problems emerge when writing a text-box in a line of text, e.g. the
text-box a man seems out of place here, and the more in-line text-boxes there are, the
worse it gets. To remedy this, I will denote types which occur in a line of text with
corner-symbols; e.g. I will write ‚åúa man‚åùinstead of a man .
2.3.1.1
Types with compound structures
Many types have compound structures; i.e. they are composed of smaller units. Exam-
ples include
a man and
a woman
a food portion f and
a child c such that c
ate all of f
a triple pp, a, jq where p is
a paper, a is an author of
p, and j is a journal in
which p was published
(2.10)
It is good practice to declare the variables in a ‚Äúcompound type‚Äù, as I did in the last
two cases of (2.10). In other words, it is preferable to replace the Ô¨Årst box above with
something like
a man m and
a woman w
or
a pair pm, wq
where m is a man
and w is a woman
so that the variables pm, wq are clear.
Rules of good practice 2.3.1.2. A type is presented as a text box. The text in that box
should
(i) begin with the word ‚Äúa‚Äù or ‚Äúan‚Äù;
(ii) refer to a distinction made and recognizable by the olog‚Äôs author;
(iii) refer to a distinction for which instances can be documented;
(iv) declare all variables in a compound structure.
The Ô¨Årst, second, and third rules ensure that the class of things represented by
each box appears to the author as a well-deÔ¨Åned set. The fourth rule encourages good
‚Äúreadability‚Äù of arrows, as will be discussed next in Section 2.3.2.
I will not always follow the rules of good practice throughout this document.
I
think of these rules being followed ‚Äúin the background‚Äù but that I have ‚Äúnicknamed‚Äù
various boxes. So ‚åúSteve‚åùmay stand as a nickname for ‚åúa thing classiÔ¨Åed as Steve‚åù
and ‚åúarginine‚åùas a nickname for ‚åúa molecule of arginine‚åù. However, when pressed, one
should always be able to rename each type according to the rules of good practice.
2.3.2
Aspects
An aspect of a thing x is a way of viewing it, a particular way in which x can be regarded
or measured. For example, a woman can be regarded as a person; hence ‚Äúbeing a person‚Äù
is an aspect of a woman. A molecule has a molecular mass (say in daltons), so ‚Äúhaving
a molecular mass‚Äù is an aspect of a molecule. In other words, by aspect we simply mean

2.3. OLOGS
25
a function. The domain A of the function f : A √ë B is the thing we are measuring, and
the codomain is the set of possible ‚Äúanswers‚Äù or results of the measurement.
a woman
is
/ a person
(2.11)
a molecule
has as molecular mass (Da) / a positive real number
(2.12)
So for the arrow in (2.11), the domain is the set of women (a set with perhaps 3 billion
elements); the codomain is the set of persons (a set with perhaps 6 billion elements).
We can imagine drawing an arrow from each dot in the ‚Äúwoman‚Äù set to a unique dot in
the ‚Äúperson‚Äù set, just as in (2.2). No woman points to two diÔ¨Äerent people, nor to zero
people ‚Äî each woman is exactly one person ‚Äî so the rules for a function are satisÔ¨Åed.
Let us now concentrate brieÔ¨Çy on the arrow in (2.12). The domain is the set of molecules,
the codomain is the set RƒÖ0 of positive real numbers. We can imagine drawing an arrow
from each dot in the ‚Äúmolecule‚Äù set to a single dot in the ‚Äúpositive real number‚Äù set. No
molecule points to two diÔ¨Äerent masses, nor can a molecule have no mass: each molecule
has exactly one mass. Note however that two diÔ¨Äerent molecules can point to the same
mass.
2.3.2.1
Invalid aspects
I tried above to clarify what it is that makes an aspect ‚Äúvalid‚Äù, namely that it must be
a ‚Äúfunctional relationship.‚Äù In this subsection I will show two arrows which on their face
may appear to be aspects, but which on closer inspection are not functional (and hence
are not valid as aspects).
Consider the following two arrows:
a person
has / a child
(2.13*)
a mechanical pencil
uses / a piece of lead
(2.14*)
A person may have no children or may have more than one child, so the Ô¨Årst arrow is
invalid: it is not a function. Similarly, if we drew an arrow from each mechanical pencil
to each piece of lead it uses, it would not be a function.
Warning 2.3.2.2. The author of an olog has a world-view, some fragment of which is
captured in the olog. When person A examines the olog of person B, person A may or
may not ‚Äúagree with it.‚Äù For example, person B may have the following olog
a marriage
includes
&
includes
x
a man
a woman
which associates to each marriage a man and a woman. Person A may take the position
that some marriages involve two men or two women, and thus see B‚Äôs olog as ‚Äúwrong.‚Äù

26
CHAPTER 2. THE CATEGORY OF SETS
Such disputes are not ‚Äúproblems‚Äù with either A‚Äôs olog or B‚Äôs olog, they are discrepancies
between world-views. Hence, throughout this paper, a reader R may see a displayed olog
and notice a discrepancy between R‚Äôs world-view and my own, but R should not worry
that this is a problem. This is not to say that ologs need not follow rules, but instead
that the rules are enforced to ensure that an olog is structurally sound, rather than that
it ‚Äúcorrectly reÔ¨Çects reality,‚Äù whatever that may mean.
Consider the aspect ‚åúan object‚åù
has
√ù√ù√ù√ù√ë ‚åúa weight‚åù. At some point in history, this
would have been considered a valid function.
Now we know that the same object
would have a diÔ¨Äerent weight on the moon than it has on earth.
Thus as world-
views change, we often need to add more information to our olog. Even the validity
of ‚åúan object on earth‚åù
has
√ù√ù√ù√ù√ë ‚åúa weight‚åùis questionable. However to build a model
we need to choose a level of granularity and try to stay within it, or the whole model
evaporates into the nothingness of truth!
Remark 2.3.2.3. In keeping with Warning 2.3.2.2, the arrows (2.13*) and (2.14*) may
not be wrong but simply reÔ¨Çect that the author has a strange world-view or a strange
vocabulary. Maybe the author believes that every mechanical pencil uses exactly one
piece of lead. If this is so, then ‚åúa mechanical pencil‚åù
uses
√ù√ù√ë ‚åúa piece of lead‚åùis indeed
a valid aspect! Similarly, suppose the author meant to say that each person was once
a child, or that a person has an inner child. Since every person has one and only one
inner child (according to the author), the map ‚åúa person‚åùhas as inner child
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë ‚åúa child‚åùis a
valid aspect. We cannot fault the olog if the author has a view, but note that we have
changed the name of the label to make his or her intention more explicit.
2.3.2.4
Reading aspects and paths as English phrases
Each arrow (aspect) X
f√ù√ë Y can be read by Ô¨Årst reading the label on its source box
(domain of deÔ¨Ånition) X, then the label on the arrow f, and Ô¨Ånally the label on its
target box (set of values) Y . For example, the arrow
a book
has as Ô¨Årst author
/ a person
(2.15)
is read ‚Äúa book has as Ô¨Årst author a person‚Äù.
Remark 2.3.2.5. Note that the map in (2.15) is a valid aspect, but that a similarly
benign-looking map ‚åúa book‚åù
has as author
√ù√ù√ù√ù√ù√ù√ù√ù√ë ‚åúa person‚åùwould not be valid, because it
is not functional. The authors of an olog must be vigilant about this type of mistake
because it is easy to miss and it can corrupt the olog.
Sometimes the label on an arrow can be shortened or dropped altogether if it is
obvious from context. We will discuss this more in Section 2.3.3 but here is a common

2.3. OLOGS
27
example from the way I write ologs.
A
a pair px, yq where
x and y are integers
x
x
y
&
B
an integer
B
an integer
(2.16)
Neither arrow is readable by the protocol given above (e.g. ‚Äúa pair px, yq where x and
y are integers x an integer‚Äù is not an English sentence), and yet it is obvious what each
map means. For example, given p8, 11q in A, arrow x would yield 8 and arrow y would
yield 11. The label x can be thought of as a nickname for the full name ‚Äúyields, via the
value of x,‚Äù and similarly for y. I do not generally use the full name for fear that the
olog would become cluttered with text.
One can also read paths through an olog by inserting the word ‚Äúwhich‚Äù after each
intermediate box. 7 For example the following olog has two paths of length 3 (counting
arrows in a chain):
a child
is
/ a person
has as parents
/
has, as birthday
!
a pair pw, mq
where w is a
woman and m
is a man
w
/ a woman
a date
includes / a year
(2.17)
The top path is read ‚Äúa child is a person, who has as parents a pair pw, mq where w is a
woman and m is a man, which yields, via the value of w, a woman.‚Äù The reader should
read and understand the content of the bottom path, which associates to every child a
year.
2.3.2.6
Converting non-functional relationships to aspects
There are many relationships that are not functional, and these cannot be considered
aspects. Often the word ‚Äúhas‚Äù indicates a relationship ‚Äî sometimes it is functional as in
‚åúa person‚åù
has
√ù√ù√ù√ë ‚åúa stomach‚åù, and sometimes it is not, as in ‚åúa father‚åù
has
√ù√ù√ë ‚åúa child‚åù.
Obviously, a father may have more than one child. This one is easily Ô¨Åxed by realizing
that the arrow should go the other way: there is a function ‚åúa child‚åùhas
√ù√ù√ë ‚åúa father‚åù.
What about ‚åúa person‚åù
owns
√ù√ù√ù√ë ‚åúa car‚åù. Again, a person may own no cars or more
than one car, but this time a car can be owned by more than one person too. A quick Ô¨Åx
would be to replace it by ‚åúa person‚åùowns
√ù√ù√ù√ë ‚åúa set of cars‚åù. This is ok, but the relationship
between ‚åúa car‚åùand ‚åúa set of cars‚åùthen becomes an issue to deal with later. There is
7If the intended elements of an intermediate box are humans, it is polite to use ‚Äúwho‚Äù rather than
‚Äúwhich‚Äù, and other such conventions may be upheld if one so desires.

28
CHAPTER 2. THE CATEGORY OF SETS
another way to indicate such ‚Äúnon-functional‚Äù relationships. In this case it would look
like this:
a pair pp, cq where
p is a person, c is a
car, and p owns c.
p
~
c

a person
a car
This setup will ensure that everything is properly organized. In general, relationships
can involve more than two types, and the general situation looks like this
R
{


A1
A2
¬® ¬® ¬®
An
For example,
R
a sequence pp, a, jq where p
is a paper, a is an author
of p, and j is a journal in
which p was published
p
}
a

j
!
A1
a paper
A2
an author
A3
a journal
Exercise 2.3.2.7. On page 25 we indicate a so-called invalid aspect, namely
a person
has / a child
(2.13*)
Create a (valid) olog that captures the parent-child relationship; your olog should still
have boxes ‚åúa person‚åùand ‚åúa child‚åùbut may have an additional box.
‚ô¶
Rules of good practice 2.3.2.8. An aspect is presented as a labeled arrow, pointing from
a source box to a target box. The arrow text should

2.3. OLOGS
29
(i) begin with a verb;
(ii) yield an English sentence, when the source-box text followed by the arrow text
followed by the target-box text is read; and
(iii) refer to a functional relationship: each instance of the source type should give rise
to a speciÔ¨Åc instance of the target type.
2.3.3
Facts
In this section I will discuss facts, which are simply ‚Äúpath equivalences‚Äù in an olog. It is
the notion of path equivalences that make category theory so powerful.
A path in an olog is a head-to-tail sequence of arrows. That is, any path starts at
some box B0, then follows an arrow emanating from B0 (moving in the appropriate
direction), at which point it lands at another box B1, then follows any arrow emanating
from B1, etc, eventually landing at a box Bn and stopping there. The number of arrows
is the length of the path. So a path of length 1 is just an arrow, and a path of length 0
is just a box. We call B0 the source and Bn the target of the path.
Given an olog, the author may want to declare that two paths are equivalent. For
example consider the two paths from A to C in the olog
A
a person
has as parents /
has as mother
&
B
a pair pw, mq
where w is a
woman and
m is a man
‚úì
yields as w

C
a woman
(2.18)
We know as English speakers that a woman parent is called a mother, so these two paths
A √ë C should be equivalent. A more mathematical way to say this is that the triangle in
Olog (2.18) commutes. That is, path equivalences are simply commutative diagrams as
in Section 2.2. In the example above we concisely say ‚Äúa woman parent is equivalent to
a mother.‚Äù We declare this by deÔ¨Åning the diagonal map in (2.18) to be the composition
of the horizontal map and the vertical map.
I generally prefer to indicate a commutative diagram by drawing a check-mark, ‚úì,
in the region bounded by the two paths, as in Olog (2.18). Sometimes, however, one
cannot do this unambiguously on the 2-dimensional page. In such a case I will indicate
the commutative diagrams (fact) by writing an equation. For example to say that the
diagram
A
f
/
h

B
g

C
i
/ D
commutes, we could either draw a checkmark inside the square or write the equation

30
CHAPTER 2. THE CATEGORY OF SETS
A f g ¬ª A h i above it. 8 Either way, it means that ‚Äúf then g‚Äù is equivalent to ‚Äúh then
i‚Äù.
Here is another, more scientiÔ¨Åc example:
a DNA sequence
is transcribed to /
codes for
*
an RNA sequence
‚úì
is translated to

a protein
Note how this diagram gives us the established terminology for the various ways in which
DNA, RNA, and protein are related in this context.
Exercise 2.3.3.1. Create an olog for human nuclear biological families that includes the
concept of person, man, woman, parent, father, mother, and child. Make sure to label
all the arrows, and make sure each arrow indicates a valid aspect in the sense of Section
2.3.2.1. Indicate with check-marks (‚úì) the diagrams that are intended to commute. If the
2-dimensionality of the page prevents a check-mark from being unambiguous, indicate
the intended commutativity with an equation.
‚ô¶
Example 2.3.3.2 (Non-commuting diagram). In my conception of the world, the following
diagram does not commute:
a person
has as father /
lives in
#
a man
lives in

a city
(2.19)
The non-commutativity of Diagram (2.19) does not imply that, in my conception, no
person lives in the same city as his or her father. Rather it implies that, in my conception,
it is not the case that every person lives in the same city as his or her father.
Exercise 2.3.3.3. Create an olog about a scientiÔ¨Åc subject, preferably one you think
about often. The olog should have at least Ô¨Åve boxes, Ô¨Åve arrows, and one commutative
diagram.
‚ô¶
2.3.3.4
A formula for writing facts as English
Every fact consists of two paths, say P and Q, that are to be declared equivalent. The
paths P and Q will necessarily have the same source, say s, and target, say t, but their
8We deÔ¨Åned function composition on page 2.1.2, but here we‚Äôre using a diÔ¨Äerent notation. There we
would have said g Àù f ‚Äú i Àù h, which is in the backwards-seeming classical order. Category theorists
and others often prefer the diagrammatic order for writing compositions, which is f; g ‚Äú h; i. For ologs,
we follow the latter because it makes for better English sentences, and for the same reason we add the
source object to the equation, writing Afg ¬ª Ahi.

2.3. OLOGS
31
lengths may be diÔ¨Äerent, say m and n respectively. 9 We draw these paths as
P :
a0‚Äús
‚Äö
f1
/ a1‚Äö
f2 / a2‚Äö
f3 / ¬® ¬® ¬®
fm¬¥1/ am¬¥1
‚Äö
fm / am‚Äút
‚Äö
(2.20)
Q :
b0‚Äús
‚Äö
g1
/ b1‚Äö
g2
/ b2‚Äö
g3 / ¬® ¬® ¬®
gn¬¥1 / bn¬¥1
‚Äö
gn / bn‚Äút
‚Äö
Every part ‚Ñìof an olog (i.e. every box and every arrow) has an associated English phrase,
which we write as ‚Äú‚Ñì‚Äù. Using a dummy variable x we can convert a fact into English too.
The following general formula is a bit diÔ¨Écult to understand, see Example 2.3.3.5, but
here goes. The fact P ¬ª Q from (2.20) can be EnglishiÔ¨Åed as follows:
Given x, ‚Äús‚Äù, consider the following. We know that x is ‚Äús‚Äù,
(2.21)
which ‚Äúf1‚Äù ‚Äúa1‚Äù, which ‚Äúf2‚Äù ‚Äúa2‚Äù, which . . . ‚Äúfm¬¥1‚Äù ‚Äúam¬¥1‚Äù, which ‚Äúfm‚Äù ‚Äút‚Äù
that we‚Äôll call Ppxq.
We also know that x is ‚Äús‚Äù,
which ‚Äúg1‚Äù ‚Äúb1‚Äù, which ‚Äúg2‚Äù ‚Äúb2‚Äù, which . . . ‚Äúgn¬¥1‚Äù ‚Äúbn¬¥1‚Äù, which ‚Äúgn‚Äù ‚Äút‚Äù
that we‚Äôll call Qpxq.
Fact: whenever x is ‚Äús‚Äù, we will have Ppxq ‚Äú Qpxq.
Example 2.3.3.5. Consider the olog
A
a person
has
/
lives in
'
B
an address
‚úì
is in

C
a city
(2.22)
To put the fact that Diagram 2.22 commutes into English, we Ô¨Årst Englishify the two
paths: F=‚Äúa person has an address which is in a city‚Äù and G=‚Äúa person lives in a city‚Äù.
The source of both is s=‚Äúa person‚Äù and the target of both is t=‚Äúa city‚Äù. write:
Given x, a person, consider the following. We know that x is a person,
which has an address, which is in a city
that we‚Äôll call Ppxq.
We also know that x is a person,
which lives in a city
that we‚Äôll call Qpxq.
Fact: whenever x is a person, we will have Ppxq ‚Äú Qpxq.
9If the source equals the target, s ‚Äú t, then it is possible to have m ‚Äú 0 or n ‚Äú 0, and the ideas below
still make sense.

32
CHAPTER 2. THE CATEGORY OF SETS
Exercise 2.3.3.6. This olog was taken from [Sp1].
N
a phone number
has
/
C
an area code
‚úì
corresponds to

OLP
an operational land-
line phone
is assigned
7
is
/
P
a physical phone
is currently
located in
/
R
a region
(2.23)
It says that a landline phone is physically located in the region that its phone number
is assigned. Translate this fact into English using the formula from 2.21.
‚ô¶
Exercise 2.3.3.7. In the above olog (2.23), suppose that the box ‚åúan operational landline
phone‚åùis replaced with the box ‚åúan operational mobile phone‚åù. Would the diagram still
commute?
‚ô¶
2.3.3.8
Images
In this section we discuss a speciÔ¨Åc kind of fact, generated by any aspect. Recall that
every function has an image, meaning the subset of elements in the codomain that are
‚Äúhit‚Äù by the function. For example the function fpxq ‚Äú 2 Àö x: Z √ë Z has as image the
set of all even numbers.
Similarly the set of mothers arises as is the image of the ‚Äúhas as mother‚Äù function,
as shown below
P
a person
has
$
f : P √ëP
has as mother
/
P
a person
M‚Äúimpfq
a mother
is
:
‚úì
Exercise 2.3.3.9. For each of the following types, write down a function for which it is
the image, or say ‚Äúnot clearly an image type‚Äù
a.) ‚åúa book‚åù
b.) ‚åúa material that has been fabricated by a process of type T‚åù
c.) ‚åúa bicycle owner‚åù
d.) ‚åúa child‚åù
e.) ‚åúa used book‚åù
f.) ‚åúan inhabited residence‚åù
‚ô¶
2.4
Products and coproducts
In this section we introduce two concepts that are likely to be familiar, although perhaps
not by their category-theoretic names, product and coproduct. Each is an example of a

2.4. PRODUCTS AND COPRODUCTS
33
large class of ideas that exist far beyond the realm of sets.
2.4.1
Products
DeÔ¨Ånition 2.4.1.1. Let X and Y be sets. The product of X and Y , denoted X ÀÜ Y , is
deÔ¨Åned as the set of ordered pairs px, yq where x P X and y P Y . Symbolically,
X ÀÜ Y ‚Äú tpx, yq | x P X, y P Y u.
There are two natural projection functions œÄ1 : X ÀÜ Y √ë X and œÄ2 : X ÀÜ Y √ë Y .
X ÀÜ Y
œÄ2

œÄ1

X
Y
Example 2.4.1.2. [Grid of dots]
Let X ‚Äú t1, 2, 3, 4, 5, 6u and Y ‚Äú t‚ô£, ‚ô¶, ‚ô•, ‚ô†u. Then we can draw X ÀÜ Y as a 6-by-4
grid of dots, and the projections as projections
X ÀÜ Y
p1,‚ô£q
‚Äö
p2,‚ô£q
‚Äö
p3,‚ô£q
‚Äö
p4,‚ô£q
‚Äö
p5,‚ô£q
‚Äö
p6,‚ô£q
‚Äö
p1,‚ô¶q
‚Äö
p2,‚ô¶q
‚Äö
p3,‚ô¶q
‚Äö
p4,‚ô¶q
‚Äö
p5,‚ô¶q
‚Äö
p6,‚ô¶q
‚Äö
p1,‚ô•q
‚Äö
p2,‚ô•q
‚Äö
p3,‚ô•q
‚Äö
p4,‚ô•q
‚Äö
p5,‚ô•q
‚Äö
p6,‚ô•q
‚Äö
p1,‚ô†q
‚Äö
p2,‚ô†q
‚Äö
p3,‚ô†q
‚Äö
p4,‚ô†q
‚Äö
p5,‚ô†q
‚Äö
p6,‚ô†q
‚Äö
œÄ2
/
Y
‚ô£‚Äö
‚ô¶‚Äö
‚ô•‚Äö
‚ô†‚Äö
(2.24)
œÄ1

1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
6‚Äö
X
Application 2.4.1.3. A traditional (Mendelian) way to predict the genotype of oÔ¨Äspring
based on the genotype of its parents is by the use of Punnett squares. If F is the set of
possible genotypes for the female parent and M is the set of possible genotypes of the
male parent, then F ÀÜ M is drawn as a square, called a Punnett square, in which every
combination is drawn.
‚ô¶‚ô¶
Exercise 2.4.1.4. How many elements does the set ta, b, c, du ÀÜ t1, 2, 3u have?
‚ô¶

34
CHAPTER 2. THE CATEGORY OF SETS
Application 2.4.1.5. Suppose we are conducting experiments about the mechanical prop-
erties of materials, as in Application 2.1.2.1. For each material sample we will produce
multiple data points in the set ‚åúextension‚åùÀÜ ‚åúforce‚åù‚Äì R ÀÜ R.
‚ô¶‚ô¶
Remark 2.4.1.6. It is possible to take the product of more than two sets as well. For
example, if A, B, and C are sets then A ÀÜ B ÀÜ C is the set of triples,
A ÀÜ B ÀÜ C :‚Äú tpa, b, cq | a P A, b P B, c P Cu.
This kind of generality is useful in understanding multiple dimensions, e.g. what
physicists mean by 10-dimensional space. It comes under the heading of limits, which
we will see in Section 4.5.3.
Example 2.4.1.7. Let R be the set of real numbers. By R2 we mean R ÀÜ R (though see
Exercise 2.7.2.6). Similarly, for any n P N, we deÔ¨Åne Rn to be the product of n copies of
R.
According to [Pen], Aristotle seems to have conceived of space as something like
S :‚Äú R3 and of time as something like T :‚Äú R.
Spacetime, had he conceived of it,
would probably have been S ÀÜ T ‚Äì R4. He of course did not have access to this kind of
abstraction, which was probably due to Descartes.
Exercise 2.4.1.8. Let Z denote the set of integers, and let `: Z ÀÜ Z √ë Z denote the
addition function and ¬®: Z ÀÜ Z √ë Z denote the multiplication function. Which of the
following diagrams commute?
a.)
Z ÀÜ Z ÀÜ Z
pa,b,cq√û√ëpa¬®b,a¬®cq
/
pa,b,cq√û√ëpa`b,cq

Z ÀÜ Z
px,yq√û√ëx`y

Z ÀÜ Z
px,yq√û√ëxy
/ Z
b.)
Z
x√û√ëpx,0q /
idZ
'
Z ÀÜ Z
pa,bq√û√ëa¬®b

Z
c.)
Z
x√û√ëpx,1q /
idZ
'
Z ÀÜ Z
pa,bq√û√ëa¬®b

Z
‚ô¶
2.4.1.9
Universal property for products
Lemma 2.4.1.10 (Universal property for product). Let X and Y be sets. For any set
A and functions f : A √ë X and g: A √ë Y , there exists a unique function A √ë X ÀÜ Y

2.4. PRODUCTS AND COPRODUCTS
35
such that the following diagram commutes 10
X ÀÜ Y
œÄ1

œÄ2

X
‚úì
Y
‚úì
A
@f
\
@g
B
D!
O
(2.25)
We might write the unique function as
xf, gy: A √ë X ÀÜ Y.
Proof. Suppose given f, g as above. To provide a function ‚Ñì: A √ë X ÀÜ Y is equivalent
to providing an element ‚Ñìpaq P X ÀÜ Y for each a P A. We need such a function for which
œÄ1 Àù ‚Ñì‚Äú f and œÄ2 Àù ‚Ñì‚Äú g. An element of X ÀÜ Y is an ordered pair px, yq, and we can
use ‚Ñìpaq ‚Äú px, yq if and only if x ‚Äú œÄ1px, yq ‚Äú fpaq and y ‚Äú œÄ2px, yq ‚Äú gpaq. So it is
necessary and suÔ¨Écient to deÔ¨Åne
xf, gypaq :‚Äú pfpaq, gpaqq
for all a P A.
‚ñ°
Example 2.4.1.11 (Grid of dots, continued). We need to see the universal property of
products as completely intuitive. Recall that if X and Y are sets, say of cardinalities
|X| ‚Äú m and |Y | ‚Äú n respectively, then X ÀÜ Y is an m ÀÜ n grid of dots, and it comes
with two canonical projections X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y . These allow us to extract from
every grid element z P X ÀÜ Y its column œÄ1pzq P X and its row œÄ2pzq P Y .
Suppose that each person in a classroom picks an element of X and an element of
Y . Thus we have functions f : C √ë X and g: C √ë Y . But isn‚Äôt picking a column and a
row the same thing as picking an element in the grid? The two functions f and g induce
a unique function C √ë X ÀÜ Y . And how does this function C √ë X ÀÜ Y compare with
the original functions f and g? The commutative diagram (2.25) sums up the obvious
connection.
Example 2.4.1.12. Let R be the set of real numbers. The origin in R is an element of R.
As you showed in Exercise 2.1.2.14, we can view this (or any) element of R as a function
z : t,u √ë R, where t,u is any set with one element. Our function z ‚Äúpicks out the
origin‚Äù. Thus we can draw functions
t,u
z

z

R
R
10The symbol @ is read ‚Äúfor all‚Äù; the symbol D is read ‚Äúthere exists‚Äù, and the symbol D! is read ‚Äúthere
exists a unique‚Äù. So this diagram is intended to express the idea that for any functions f : A √ë X and
g : A √ë Y , there exists a unique function A √ë X ÀÜ Y for which the two triangles commute.

36
CHAPTER 2. THE CATEGORY OF SETS
The universal property for products guarantees a function t,u √ë R ÀÜ R, which will be
the origin in R2.
Remark 2.4.1.13. Given sets X, Y, and A, and functions f : A √ë X and g: A √ë Y , there
is a unique function A √ë X ÀÜ Y that commutes with f and g. We call it the induced
function A √ë X ÀÜ Y , meaning the one that arises in light of f and g.
Exercise 2.4.1.14. For every set A there is some nice relationship between the following
three sets:
HomSetpA, Xq,
HomSetpA, Y q,
and
HomSetpA, X ÀÜ Y q.
What is it?
Hint: Do not be alarmed: this problem is a bit ‚Äúrecursive‚Äù in that you‚Äôll use products
in your formula.
‚ô¶
Exercise 2.4.1.15.
a.) Let X and Y be sets. Construct the ‚Äúswap map‚Äù s: X ÀÜ Y √ë Y ÀÜ X using only
the universal property for products. If œÄ1 : X ÀÜ Y √ë X and œÄ2 : X ÀÜ Y √ë Y are the
projection functions, write s in terms of the symbols ‚ÄúœÄ1‚Äù, ‚ÄúœÄ2‚Äù, ‚Äúp , q‚Äù, and ‚Äú Àù ‚Äù.
b.) Can you prove that s is a isomorphism using only the universal property for product?
‚ô¶
Example 2.4.1.16. Suppose given sets X, X1, Y, Y 1 and functions m: X √ë X1 and n: Y √ë
Y 1. We can use the universal property of products to construct a function s: X ÀÜ Y √ë
X1 ÀÜ Y 1. Here‚Äôs how.
The universal property (Lemma 2.4.1.10) says that to get a function from any set A
to X1 ÀÜ Y 1, we need two functions, namely some f : A √ë X1 and some g: A √ë Y 1. Here
A ‚Äú X ÀÜ Y .
What we have readily available are the two projections œÄ1 : X ÀÜY √ë X and œÄ2 : X ÀÜ
Y √ë Y . But we also have m: X √ë X1 and n: Y √ë Y 1. Composing, we set f :‚Äú m Àù œÄ1
and g :‚Äú n Àù œÄ2.
X1 ÀÜ Y 1
œÄ1
1
z
œÄ1
2
#
X1
Y 1
X
m
O
Y
n
O
X ÀÜ Y
œÄ1
d
œÄ2
:
O
The dotted arrow is often called the product of m: X √ë X1 and n: Y √ë Y 1 and is
denoted simply by
m ÀÜ n: X ÀÜ Y √ë X1 ÀÜ Y 1.
2.4.1.17
Ologging products
Given two objects c, d in an olog, there is a canonical label ‚ÄúcÀÜd‚Äù for their product cÀÜd,
written in terms of the labels ‚Äúc‚Äù and ‚Äúd‚Äù. Namely,
‚Äúc ÀÜ d‚Äù :‚Äú a pair px, yq where x is ‚Äúc‚Äù and y is ‚Äúd‚Äù.

2.4. PRODUCTS AND COPRODUCTS
37
The projections c √ê c ÀÜ d √ë d can be labeled ‚Äúyields, as x,‚Äù and ‚Äúyields, as y,‚Äù respec-
tively.
Suppose that e is another object and p: e √ë c and q: e √ë d are two arrows. By
the universal property of products (Lemma 2.4.1.10), p and q induce a unique arrow
e √ë c ÀÜ d making the evident diagrams commute. This arrow can be labeled
yields, insofar as it ‚Äúp‚Äù ‚Äúc‚Äù and ‚Äúq‚Äù ‚Äúd‚Äù,
Example 2.4.1.18. Every car owner owns at least one car, but there is no obvious function
‚åúa car owner‚åù√ë ‚åúa car‚åùbecause he or she may own more than one. One good choice
would be the car that the person drives most often, which we‚Äôll call his or her primary
car. Also, given a person and a car, an economist could ask how much utility the person
would get out of the car. From all this we can put together the following olog involving
products:
O
a car owner
is

owns,
as
primary,
#
yields, insofar
as it is a person
and owns, as
primary, a car, /
‚úì
P ÀÜC
a
pair
px, yq
where
x
is
a
person and y is
a car
yields, as x,
v
yields, as y,

has as associ-
ated utility
/
V
a dollar value
P
a person
C
a car
2.4.2
Coproducts
DeÔ¨Ånition 2.4.2.1. Let X and Y be sets. The coproduct of X and Y , denoted X \ Y ,
is deÔ¨Åned as the ‚Äúdisjoint union‚Äù of X and Y , i.e. the set for which an element is either
an element of X or an element of Y . If something is an element of both X and Y then
we include both copies, and distinguish between them, in X \ Y . See Example 2.4.2.2
There are two natural inclusion functions i1 : X √ë X \ Y and i2 : Y √ë X \ Y .
X
i1

Y
i2

X \ Y
Example 2.4.2.2. The coproduct of X :‚Äú ta, b, c, du and Y :‚Äú t1, 2, 3u is
X \ Y ‚Äì ta, b, c, d, 1, 2, 3u.
The coproduct of X and itself is
X \ X ‚Äì ti1a, i1b, i1c, i1d, i2a, i2b, i2c, i2du
The names of the elements in X \ Y are not so important. What‚Äôs important are the
inclusion maps i1, i2, which ensure that we know where each element of X \ Y came
from.

38
CHAPTER 2. THE CATEGORY OF SETS
Example 2.4.2.3 (Airplane seats).
X
an economy-
class seat in
an airplane
is
 
Y
a Ô¨Årst-class
seat in an
airplane
is

X\Y
a seat in an
airplane
(2.26)
Exercise 2.4.2.4. Would you say that ‚åúa phone‚åùis the coproduct of ‚åúa cellphone‚åùand
‚åúa landline phone‚åù?
‚ô¶
Example 2.4.2.5 (Disjoint union of dots).
X \ Y
‚ô£‚Äö
1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
6‚Äö
‚ô¶‚Äö
‚ô•‚Äö
‚ô†‚Äö
i2
o
Y
‚ô£‚Äö
‚ô¶‚Äö
‚ô•‚Äö
‚ô†‚Äö
(2.27)
i1
O
1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
6‚Äö
X
2.4.2.6
Universal property for coproducts
Lemma 2.4.2.7 (Universal property for coproduct). Let X and Y be sets. For any set
A and functions f : X √ë A and g: Y √ë A, there exists a unique function X \ Y √ë A

2.4. PRODUCTS AND COPRODUCTS
39
such that the following diagram commutes
A
X
@f
B
i1

Y
@g
\
i2

X \ Y
D!
O
We might write the unique function as 11
"
f
g : X \ Y √ë A.
Proof. Suppose given f, g as above. To provide a function ‚Ñì: X \ Y √ë A is equivalent
to providing an element fpmq P A is for each m P X \ Y . We need such a function such
that ‚ÑìÀù i1 ‚Äú f and ‚ÑìÀù i2 ‚Äú g. But each element m P X \ Y is either of the form i1x or
i2y, and cannot be of both forms. So we assign
"
f
g pmq ‚Äú
#
fpxq
if m ‚Äú i1x,
gpyq
if m ‚Äú i2y.
This assignment is necessary and suÔ¨Écient to make all relevant diagrams commute.
‚ñ°
Example 2.4.2.8 (Airplane seats, continued). The universal property of coproducts says
the following. Any time we have a function X √ë A and a function Y √ë A, we get a
unique function X \ Y √ë A. For example, every economy class seat in an airplane and
every Ô¨Årst class seat in an airplane is actually in a particular airplane. Every economy
class seat has a price, as does every Ô¨Årst class seat.
A
a dollar Ô¨Ågure
X
an economy-
class seat in
an airplane
has as price
9
is
/
is in
%
X\Y
a seat in an
airplane
D!

D!
O
‚úì
‚úì
‚úì
‚úì
Y
a Ô¨Årst-class
seat in an
airplane
is
o
has as price
e
is in
y
B
an airplane
(2.28)
The universal property of coproducts formalizes the following intuitively obvious fact:
11We are about to use a two-line symbol, which is a bit unusual. In what follows a certain function
X \ Y √ë A is being denoted by the symbol
"
f
g .

40
CHAPTER 2. THE CATEGORY OF SETS
If we know how economy class seats are priced and we know how Ô¨Årst class
seats are priced, and if we know that every seat is either economy class or
Ô¨Årst class, then we automatically know how all seats are priced.
To say it another way (and using the other induced map):
If we keep track of which airplane every economy class seat is in and we
keep track of which airplane every Ô¨Årst class seat is in, and if we know that
every seat is either economy class or Ô¨Årst class, then we require no additional
tracking for any airplane seat whatsoever.
Application 2.4.2.9 (Piecewise deÔ¨Åned curves). In science, curves are often deÔ¨Åned or
considered piecewise. For example in testing the mechanical properties of a material,
we might be interested in various regions of deformation, such as elastic, plastic, or
post-fracture. These are three intervals on which the material displays diÔ¨Äerent kinds of
properties.
For real numbers a ƒÉ b P R, let ra, bs :‚Äú tx P R | a ƒè x ƒè bu denote the closed
interval. Given a function ra, bs √ë R and a function rc, ds √ë R, the universal property
of coproducts implies that they extend uniquely to a function ra, bs \ rc, ds √ë R, which
will appear as a piecewise deÔ¨Åned curve.
Often we are given a curve on ra, bs and another on rb, cs, where the two curves agree
at the point b. This situation is described by pushouts, which are mild generalizations
of coproducts; see Section 2.6.2.
‚ô¶‚ô¶
Exercise 2.4.2.10. Write the universal property for coproduct in terms of a relationship
between the following three sets:
HomSetpX, Aq,
HomSetpY, Aq,
and
HomSetpX \ Y, Aq.
‚ô¶
Example 2.4.2.11. In the following olog the types A and B are disjoint, so the coproduct
C ‚Äú A \ B is just the union.
A
a person
is
/
C‚ÄúA\B
a person or a cat
B
a cat
is
o
Example 2.4.2.12. In the following olog, A and B are not disjoint, so care must be taken
to diÔ¨Äerentiate common elements.
A
an animal
that can Ô¨Çy
labeled ‚ÄúA‚Äù is /
C‚ÄúA\B
an animal that can Ô¨Çy
(labeled ‚ÄúA‚Äù) or an
animal that can swim
(labeled ‚ÄúB‚Äù)
B
an animal that
can swim
labeled ‚ÄúB‚Äù is
o
Since ducks can both swim and Ô¨Çy, each duck is found twice in C, once labeled as a
Ô¨Çyer and once labeled as a swimmer. The types A and B are kept disjoint in C, which
justiÔ¨Åes the name ‚Äúdisjoint union.‚Äù

2.5. FINITE LIMITS IN SET
41
Exercise 2.4.2.13. Understand Example 2.4.2.12 and see if a similar idea would make
sense for particles and waves. Make an olog, and choose your wording in accordance with
Rules 2.3.1.2. How do photons, which exhibit properties of both waves and particles, Ô¨Åt
into the coproduct in your olog?
‚ô¶
Exercise 2.4.2.14. Following the section above, ‚ÄúOlogging products‚Äù page 36, come up
with a naming system for coproducts, the inclusions, and the universal maps. Try it out
by making an olog (involving coproducts) discussing the idea that both a .wav Ô¨Åle and
a .mp3 Ô¨Åle can be played on a modern computer. Be careful that your arrows are valid
in the sense of Section 2.3.2.1.
‚ô¶
2.5
Finite limits in Set
In this section we discuss what are called limits of variously-shaped diagrams of sets.
We will make all this much more precise when we discuss limits in arbitrary categories
in Section 4.5.3.
2.5.1
Pullbacks
DeÔ¨Ånition 2.5.1.1 (Pullback). Suppose given the diagram of sets and functions below.
Y
g

X
f
/ Z
(2.29)
Its Ô¨Åber product is the set
X ÀÜZ Y :‚Äú tpx, w, yq | fpxq ‚Äú w ‚Äú gpyqu.
There are obvious projections œÄ1 : X ÀÜZ Y √ë X and œÄ2 : X ÀÜZ Y √ë Y (e.g. œÄ2px, w, yq ‚Äú
y). Note that if W ‚Äú X ÀÜZ Y then the diagram
W
‚åü
œÄ2
/
œÄ1

Y
g

X
f
/ Z
(2.30)
commutes. Given the setup of Diagram 2.29 we deÔ¨Åne the pullback of X and Y over Z
to be any set W for which we have an isomorphism W
‚Äì
√ù√ë X ÀÜZ Y . The corner symbol
‚åüin Diagram 2.30 indicates that W is the pullback.
Exercise 2.5.1.2. Let X, Y, Z be as drawn and f : X √ë Z and g: Y √ë Z the indicated
functions.

42
CHAPTER 2. THE CATEGORY OF SETS
What is the pullback of the diagram X
f
√ù√ù√ù√ë Z
g
√ê√ù√ù√ù Y ?
‚ô¶
Exercise 2.5.1.3.
a.) Draw a set X with Ô¨Åve elements and a set Y with three elements.
Color each
element of X and each element of Y either red, blue, or yellow, 12 and do so in a
‚Äúrandom-looking‚Äù way. Considering your coloring of X as a function X √ë C, where
C ‚Äú tred, blue, yellowu, and similarly obtaining a function Y √ë C, draw the Ô¨Åber
product X ÀÜC Y . Make sure it is colored appropriately.
b.) The universal property for products guarantees a function X ÀÜC Y √ë X ÀÜ Y , which
I can tell you will be an injection. This means that the drawing you made of the
Ô¨Åber product can be imbedded into the 5 ÀÜ 3 grid; please draw the grid and indicate
this subset.
‚ô¶
Remark 2.5.1.4. Some may prefer to denote this Ô¨Åber product by f ÀÜZ g rather than
X ÀÜZ Y . The former is mathematically better notation, but human-readability is often
enhanced by the latter, which is also more common in the literature. We use whichever
is more convenient.
Exercise 2.5.1.5.
a.) Suppose that Y ‚Äú H; what can you say about X ÀÜZ Y ?
b.) Suppose now that Y is any set but that Z has exactly one element; what can you
say about X ÀÜZ Y ?
‚ô¶
Exercise 2.5.1.6. Let S ‚Äú R3, T ‚Äú R, and think of them as (Aristotelian) space and time,
with the origin in S ÀÜ T given by the center of mass of MIT at the time of its founding.
Let Y ‚Äú S ÀÜT and let g1 : Y √ë S be one projection and g2 : Y √ë T the other projection.
Let X ‚Äú t,u be a set with one element and let f1 : X √ë S and f2 : X √ë T be given by
the origin in both cases.
a.) What are the Ô¨Åber products W1 and W2:
W1
/

‚åü
Y
g1

X
f1
/ S
W2
/

‚åü
Y
g2

X
f2
/ T
12You can use shadings rather than coloring, if coloring would be annoying.

2.5. FINITE LIMITS IN SET
43
b.) Interpret these sets in terms of the center of mass of MIT at the time of its founding.
‚ô¶
2.5.1.7
Using pullbacks to deÔ¨Åne new ideas from old
In this section we will see that the Ô¨Åber product of a diagram can serve to deÔ¨Åne a new
concept. For example, in (2.33) we deÔ¨Åne what it means for a cellphone to have a bad
battery, in terms of the length of time for which it remains charged. By being explicit,
we reduce the chance of misunderstandings between diÔ¨Äerent groups of people. This can
be useful in situations like audits and those in which one is trying to reuse or understand
data gathered by others.
Example 2.5.1.8. Consider the following two ologs. The one on the right is the pullback
of the one on the left.
C
a loyal
customer
is

B
a wealthy
customer
is
/
D
a customer
A‚ÄúBÀÜDC
a customer
that is wealthy
and loyal
is

is
/
C
a loyal
customer
is

B
a wealthy
customer
is
/
D
a customer
(2.31)
Check from DeÔ¨Ånition 2.5.1.1 that the label, ‚Äúa customer that is wealthy and loyal‚Äù, is
fair and straightforward as a label for the Ô¨Åber product A ‚Äú B ÀÜD C, given the labels
on B, C, and D.
Remark 2.5.1.9. Note that in Diagram (2.31) the top-left box could have been (non-
canonically named) ‚åúa good customer‚åù. If it was taken to be the Ô¨Åber product, then the
author would be eÔ¨Äectively deÔ¨Åning a good customer to be one that is wealthy and loyal.
Exercise 2.5.1.10. For each of the following, an author has proposed that the diagram
on the right is a pullback. Do you think their labels are appropriate or misleading; that
is, is the label on the upper-left box reasonable given the rest of the olog, or is it suspect
in some way?
a.)
C
blue
is

B
a person
has as favorite
color
/
D
a color
A‚ÄúBÀÜDC
a person whose
favorite color is blue
is

has as favorite
color
/
C
blue
is

B
a person
has as favorite
color
/
D
a color

44
CHAPTER 2. THE CATEGORY OF SETS
b.)
C
a woman
is

B
a dog
has as owner
/
D
a person
A‚ÄúBÀÜDC
a dog whose owner
is a woman
is

has as owner
/
C
a woman
is

B
a dog
has as owner
/
D
a person
c.)
C
a piece of
furniture
has

B
a space in
our house
has
/
D
a width
A‚ÄúBÀÜDC
a good Ô¨Åt
s

f
/
C
a piece of
furniture
has

B
a space in
our house
has
/
D
a width
‚ô¶
Exercise 2.5.1.11.
a.) Consider your olog from Exercise 2.3.3.1. Are any of the commutative squares there
actually pullback squares?
b.) Now use ologs with products and pullbacks to deÔ¨Åne what a brother is and what a
sister is (again in a human biological nuclear family), in terms of types such as ‚åúan
oÔ¨Äspring of mating pair pa, bq‚åù, ‚åúa person‚åù, ‚åúa male person‚åù, ‚åúa female person‚åù, and
so on.
‚ô¶
DeÔ¨Ånition 2.5.1.12 (Preimage). Let f : X √ë Y be a function and y P Y an element.
The preimage of y under f, denoted f ¬¥1pyq, is the subset f ¬¥1pyq :‚Äú tx P X | fpxq ‚Äú yu.
If Y 1 ƒé Y is any subset, the preimage of Y 1 under f, denoted f ¬¥1pY 1q, is the subset
f ¬¥1pY 1q ‚Äú tx P X | fpxq P Y 1u.
Exercise 2.5.1.13. Let f : X √ë Y be a function and y P Y an element. Draw a pullback
diagram in which the Ô¨Åber product is isomorphic to the preimage f ¬¥1pyq.
‚ô¶
Lemma 2.5.1.14 (Universal property for pullback). Suppose given the diagram of sets
and functions as below.
Y
u

X
t
/ Z

2.5. FINITE LIMITS IN SET
45
For any set A and commutative solid arrow diagram as below (i.e. functions f : A √ë X
and g: A √ë Y such that t Àù f ‚Äú u Àù g),
X ÀÜZ Y
œÄ1

œÄ2

A
D!
O
@f
z
@g
$
X
t
$
Y
u
z
Z
(2.32)
there exists a unique arrow xf, fyZ : A √ë X ÀÜZ Y making everything commute, i.e.
f ‚Äú œÄ1 Àù xf, fyZ
and
g ‚Äú œÄ2 Àù xf, fyZ.
Exercise 2.5.1.15. Create an olog whose underlying shape is a commutative square. Now
add the Ô¨Åber product so that the shape is the same as that of Diagram (2.32). Assign
English labels to the projections œÄ1, œÄ2 and to the dotted map A
xf,fyZ
√ù√ù√ù√ù√ë X ÀÜZ Y , such
that these labels are as canonical as possible.
‚ô¶
2.5.1.16
Pasting diagrams for pullback
Consider the diagram drawn below, which includes a left-hand square, a right-hand
square, and a big rectangle.
A1
f 1
/
i

‚åü
B1
g1
/
j

‚åü
C1
k

A
f
/ B
g
/ C
The right-hand square has a corner symbol indicating that B1 ‚Äì B ÀÜC C1 is a pullback.
But the corner symbol on the left is ambiguous; it might be indicating that the left-hand
square is a pullback, or it might be indicating that the big rectangle is a pullback. It
turns out that if B1 ‚Äì B ÀÜC C1 then it is not ambiguous because the left-hand square is
a pullback if and only if the big rectangle is.
Proposition 2.5.1.17. Consider the diagram drawn below
B1
g1
/
j

‚åü
C1
k

A
f
/ B
g
/ C
where B1 ‚Äì B ÀÜC C1 is a pullback. Then there is an isomorphism A ÀÜB B1 ‚Äì A ÀÜC C1.
Said another way,
A ÀÜB pB ÀÜC C1q ‚Äì A ÀÜC C1.

46
CHAPTER 2. THE CATEGORY OF SETS
Proof. We Ô¨Årst provide a map œÜ: A ÀÜB pB ÀÜC C1q √ë A ÀÜC C1. An element of A ÀÜB
pB ÀÜC C1q is of the form pa, b, pb, c, c1qq such that fpaq ‚Äú b, gpbq ‚Äú c and kpc1q ‚Äú c. But
this implies that g Àù fpaq ‚Äú c ‚Äú kpc1q so we put œÜpa, b, pb, c, c1qq :‚Äú pa, c, c1q P A ÀÜC C1.
Now we provide a proposed inverse, œà: AÀÜC C1 √ë AÀÜB pB ÀÜC C1q. Given pa, c, c1q with
g Àù fpaq ‚Äú c ‚Äú kpc1q, let b ‚Äú fpaq and note that pb, c, c1q is an element of B ÀÜC C1. So we
can deÔ¨Åne œàpa, c, c1q ‚Äú pa, b, pb, c, c1qq. It is easy to see that œÜ and œà are inverse.
‚ñ°
Proposition 2.5.1.17 can be useful in authoring ologs.
For example, the type ‚åúa
cellphone that has a bad battery‚åùis vague, but we can lay out precisely what it means
using pullbacks:
A‚ÄìBÀÜDC
a cellphone that
has a bad battery
/

C‚ÄìDÀÜF E
a bad battery
/

E‚ÄìF ÀÜHG
less than
1 hour
/

G
between
0 and 1

B
a cellphone
has
/
D
a battery
remains
charged
for
/
F
a duration
of time
in hours
yields /
H
a range of
numbers
(2.33)
The category-theoretic fact described above says that since A ‚Äì B ÀÜD C and C ‚Äì
D ÀÜF E, it follows that A ‚Äì B ÀÜF E. That is, we can deduce the deÔ¨Ånition ‚Äúa cellphone
that has a bad battery is deÔ¨Åned as a cellphone that has a battery which remains charged
for less than one hour.‚Äù
Exercise 2.5.1.18.
a.) Create an olog that deÔ¨Ånes two people to be ‚Äúof approximately the same height‚Äù if
and only if their height diÔ¨Äerence is less than half an inch, using a pullback. Your
olog can include the box ‚åúa real number x such that ¬¥.5 ƒÉ x ƒÉ .5‚åù.
b.) In the same olog, make a box for those people whose height is approximately the
same as a person named ‚ÄúThe Virgin Mary‚Äù. You may need to use images, as in
Section 2.3.3.8.
‚ô¶
Exercise 2.5.1.19. Consider the diagram on the left below, where both squares commute.
Y 1

Y
>

X1
/ Z1
X
/
=
Z
>
W 1
/

‚åü
Y 1

W
/

‚åü
Y
>

X1
/ Z1
X
/
=
Z
>
Let W ‚Äú X ÀÜZ Y and W 1 ‚Äú X1 ÀÜZ1 Y 1, and form the diagram to the right. Use the
universal property of Ô¨Åber products to construct a map W √ë W 1 such that all squares
commute.
‚ô¶

2.5. FINITE LIMITS IN SET
47
2.5.2
Spans, experiments, and matrices
DeÔ¨Ånition 2.5.2.1. Given sets A and B, a span on A and B is a set R together with
functions f : R √ë A and g: R √ë B.
R
f

g

A
B
Application 2.5.2.2. Think of A and B as observables and R as a set of experiments
performed on these two variables. For example, let‚Äôs say T is the set of possible tem-
peratures of a gas in a Ô¨Åxed container and let‚Äôs say P is the set of possible pressures of
the gas. We perform 1000 experiments in which we change and record the temperature
and we simultaneously also record the pressure; this is a span T
f√ê√ù E
g√ù√ë P. The results
might look like this:
Experiment
ID
Temperature
Pressure
1
100
72
2
100
73
3
100
72
4
200
140
5
200
138
6
200
141
...
...
...
‚ô¶‚ô¶
DeÔ¨Ånition 2.5.2.3. Let A, B, and C be sets, and let A
f√ê√ù R
g√ù√ë B and B
f 1
√ê√ù R1
g1
√ù√ë C
be spans. Their composite span is given by the Ô¨Åber product R ÀÜB R1 as in the diagram
below:
R ÀÜB R1
 
R
f

g

R1
f 1

g1

A
B
C
Application 2.5.2.4. Let‚Äôs look back at our lab‚Äôs experiment from Application 2.5.2.2,
which resulted in a span T
f√ê√ù E
g√ù√ë P. Suppose we notice that something looks a little
wrong. The pressure should be linear in the temperature but it doesn‚Äôt appear to be.
We hypothesize that the volume of the container is increasing under pressure. We look
up this container online and see that experiments have been done to measure the volume
as the interior pressure changes. The data has generously been made available online,
which gives us a span P
f 1
√ê√ù E1
g1
√ù√ë V .
The composite of our lab‚Äôs span with the online data span yields a span T √ê E2 √ë V ,
where E2 :‚Äú E ÀÜP E1. What information does this span give us? In explaining it, one

48
CHAPTER 2. THE CATEGORY OF SETS
might say ‚Äúwhenever an experiment in our lab yielded the same pressure as one they
recorded, let‚Äôs call that a data point. Every data point has an associated temperature
(from our lab) and an associated volume (from their experiment). This is the best we
can do.‚Äù
The information we get this way might be seen by some as unscientiÔ¨Åc, but it certainly
is the kind of information people use in business and in every day life calculation‚Äîwe get
our data from multiple sources and put it together. Moreover, it is scientiÔ¨Åc in the sense
that it is reproducible. The way we obtained our T-V data is completely transparent.
‚ô¶‚ô¶
We can relate spans to matrices of natural numbers, and see a natural ‚ÄúcategoriÔ¨Åca-
tion‚Äù of matrix addition and matrix multiplication. If our spans come from experiments
as in Applications 2.5.2.2 and 2.5.2.4 the matrices involved will look like huge but sparse
matrices. Let‚Äôs go through that.
Let A and B be sets and let A √ê R √ë B be a span. By the universal property of
products, we have a unique map R
p√ù√ë A ÀÜ B.
We make a matrix of natural numbers out of this data as follows. The set of rows
is A, the set of columns is B. For elements a P A and b P B, the pa, bq-entry is the
cardinality of its preimage, |p¬¥1pa, bq|, i.e. the number of elements in R that are sent by
p to pa, bq.
Suppose we are given two pA, Bq-spans, i.e. A √ê R √ë B and A √ê R1 √ë B; we might
think of these has having the same dimensions, i.e. they are both |A| ÀÜ |B|-matrices.
We can take the disjoint union R \ R1 and by the universal property of coproducts we
have a unique span A √ê R \ R1 √ë B making the requisite diagram commute. 13 The
matrix corresponding to this new span will be the sum of the matrices corresponding to
the two previous spans out of which it was made.
Given a span A √ê R √ë B and a span B √ê S √ë C, the composite span can be formed
as in DeÔ¨Ånition 2.5.2.3. It will correspond to the usual multiplication of matrices.
Construction 2.5.2.5. Given a span A
f√ê√ù R
g√ù√ë B, one can draw a bipartite graph with
each element of A drawn as a dot on the left, each element of B drawn as a dot on the
right, and each element r P R drawn as an arrow connecting vertex fprq on the left to
vertex gprq on the right.
Exercise 2.5.2.6.
a.) Draw the bipartite graph (as in Construction 2.5.2.5) corresponding to the span
T
f√ê√ù E
g√ù√ë P in Application 2.5.2.2.
b.) Now make up your own span P
f 1
√ê√ù E1
g1
√ù√ë V and draw it. Finally, draw the composite
span below.
c.) Can you say how the composite span graph relates to the graphs of its factors?
13
R
{
#

A
R \ R1
o
/ B
R1
<
b
O

2.6. FINITE COLIMITS IN SET
49
‚ô¶
2.5.3
Equalizers and terminal objects
DeÔ¨Ånition 2.5.3.1. Suppose given two parallel arrows
X
f
/
g
/ Y.
Eqpf, gq
p
/ X
f
/
g
/ Y
(2.34)
The equalizer of f and g is the commutative diagram as to the right in (2.34), where we
deÔ¨Åne
Eqpf, gq :‚Äú tx P X | fpxq ‚Äú gpxqu
and where p is the canonical inclusion.
Example 2.5.3.2. Suppose one has designed an experiment to test a theoretical prediction.
The question becomes, ‚Äúwhen does the theory match the experiment?‚Äù The answer is
given by the equalizer of the following diagram:
an input
should, according to theory, yield /
according to experiment yields / an output
The equalizer is the set of all inputs for which the theory and the experiment yield the
same output.
Exercise 2.5.3.3. Come up with an olog that uses equalizers in a reasonably interest-
ing way. Alternatively, use an equalizer to specify those published authors who have
published exactly one paper. Hint: Ô¨Ånd a function from authors to papers; then Ô¨Ånd
another.
‚ô¶
Exercise 2.5.3.4. Find a universal property enjoyed by the equalizer of two arrows, and
present it in the style of Lemmas 2.4.1.10, 2.4.2.7, and 2.5.1.14.
‚ô¶
Exercise 2.5.3.5.
a.) A terminal set is a set S such that for every set X, there exists a unique function
X √ë S. Find a terminal set.
b.) Do you think that the notion terminal set belongs in this section (Section 2.5)? How
so?
If products, pullbacks, and equalizers are all limits, what do limits have in
common?
‚ô¶
2.6
Finite colimits in Set
This section will parallel Section 2.5‚ÄîI will introduce several types of Ô¨Ånite colimits and
hope that this gives the reader some intuition about them, without formally deÔ¨Åning
them yet. Before doing so, I must deÔ¨Åne equivalence relations and quotients.

50
CHAPTER 2. THE CATEGORY OF SETS
2.6.1
Background: equivalence relations
DeÔ¨Ånition 2.6.1.1 (Equivalence relations and equivalence classes). Let X be a set. An
equivalence relation on X is a subset R ƒé X ÀÜ X satisfying the following properties for
all x, y, z P X:
ReÔ¨Çexivity: px, xq P R;
Symmetry: px, yq P R if and only if py, xq P R; and
Transitivity: if px, yq P R and py, zq P R then px, zq P R.
If R is an equivalence relation, we often write x ‚ÄûR y, or simply x ‚Äû y, to mean px, yq P R.
For convenience we may refer to the equivalence relation by the symbol ‚Äû, saying that
‚Äû is an equivalence relation on X.
An equivalence class of ‚Äû is a subset A ƒé X such that
‚Ä¢ A is nonempty, A ‚Ä∞ H;
‚Ä¢ if x P A and x1 P A, then x ‚Äû x1; and
‚Ä¢ if x P A and x ‚Äû y, then y P A.
Suppose that ‚Äû is an equivalence relation on X. The quotient of X by ‚Äû, denoted X{ ‚Äû
is the set of equivalence classes of ‚Äû.
Example 2.6.1.2. Let Z denote the set of integers. DeÔ¨Åne a relation R ƒé Z ÀÜ Z by
R ‚Äú tpx, yq | Dn P Z such that x ` 7n ‚Äú yu.
Then R is an equivalence relation because x ` 7 Àö 0 ‚Äú x (reÔ¨Çexivity); x ` 7 Àö n ‚Äú y if and
only if y ` 7 Àö p¬¥nq ‚Äú x (symmetry); and x ` 7n ‚Äú y and y ` 7m ‚Äú z together imply
that x ` 7pm ` nq ‚Äú z (transitivity).
Exercise 2.6.1.3. Let X be the set of people on earth; deÔ¨Åne a binary relation R ƒé X ÀÜX
on X as follows. For a pair px, yq of people, say px, yq P R if x spends a lot of time thinking
about y.
a.) Is this relation reÔ¨Çexive?
b.) Is it symmetric?
c.) Is it transitive?
‚ô¶
Example 2.6.1.4 (Partitions). An equivalence relation on a set X can be thought of as a
way of partitioning X. A partition of X consists of a set I, called the set of parts, and
for every element i P I a subset Xi ƒé X such that two properties hold:
‚Ä¢ every element x P X is in some part (i.e. for all x P X there exists i P I such that
x P Xi); and
‚Ä¢ no element can be found in two diÔ¨Äerent parts (i.e. if x P Xi and x P Xj then
i ‚Äú j).

2.6. FINITE COLIMITS IN SET
51
Given a partition of X, we deÔ¨Åne an equivalence relation ‚Äû on X by saying x ‚Äû x1
if x and x1 are in the same part (i.e. if there exists i P I such that x, x1 P Xi). The
parts become the equivalence classes of this relation. Conversely, given an equivalence
relation, one makes a partition on X by taking I to be the set of equivalence classes and
for each i P I letting Xi be the elements in that equivalence class.
Exercise 2.6.1.5. Let X and B be sets and let f : X √ë B be a function. DeÔ¨Åne a subset
R ƒé X ÀÜ X by
R ‚Äú tpx, yq | fpxq ‚Äú fpyqu.
a.) Is R an equivalence relation?
b.) Are all equivalence relations on X obtainable in this way (as the Ô¨Åbers of some
function having domain X)?
c.) Does this viewpoint on equivalence classes relate to that of Example 2.6.1.4?
‚ô¶
Exercise 2.6.1.6. Take a set I of sets; i.e. suppose that for each element i P I you are
given a set Xi. For every two elements i, j P I say that i ‚Äû j if Xi and Xj are isomorphic.
Is this relation an equivalence relation on I?
‚ô¶
Lemma 2.6.1.7 (Generating equivalence relations). Let X be a set and R ƒé X ÀÜ X a
subset. There exists a relation S ƒé X ÀÜ X such that
‚Ä¢ S is an equivalence relation,
‚Ä¢ R ƒé S, and
‚Ä¢ for any equivalence relation S1 such that R ƒé S1, we have S ƒé S1.
The relation S1 will be called the equivalence relation generated by R.
Proof. Let LR be the set of all equivalence relations on X that contain R; in other words,
each element ‚ÑìP LR is an equivalence relation, ‚ÑìP X ÀÜ X. The set LR is non-empty
because X ÀÜ X ƒé X ÀÜ X is an equivalence relation.
Let S denote the set of pairs
px1, x2q P X ÀÜ X that appear in every element of LR. Note that R ƒé S by deÔ¨Ånition.
We need only show that S is an equivalence relation.
It is clearly reÔ¨Çexive, because R is. If px, yq P S then px, yq P ‚Ñìfor all ‚ÑìP LR. But
since each ‚Ñìis an equivalence relation, py, xq P ‚Ñìtoo, so py, xq P S. This shows that S
is symmetric. The proof that it is transitive is similar: if px, yq P S and py, zq P S then
they are both in each ‚Ñìwhich puts px, zq in each ‚Ñì, which puts it in S.
‚ñ°
Remark 2.6.1.8. Let X be a set and R ƒé X ÀÜ X a relation. The proof of Lemma 2.6.1.7
has the beneÔ¨Åt of working even if |X| ƒõ 8, but it has the cost that it is not very intuitive,
nor useful in practice when X is Ô¨Ånite. The intuitive way to think about the idea of
equivalence relation generated by R is as follows.
1. First add to R what is demanded by reÔ¨Çexivity, R1 :‚Äú R Y tpx, xq | x P Xu.
2. Then add to R what is demanded by symmetry, R2 :‚Äú R1 Y tpx, yq | py, xq P R1u.
3. Finally, add to R what is demanded by transitivity,
S ‚Äú R2 Y tpx, zq | px, yq P R2, and py, zq P R2u.

52
CHAPTER 2. THE CATEGORY OF SETS
Exercise 2.6.1.9. Consider the set R of real numbers. Draw the coordinate plane R ÀÜ R,
give it coordinates x and y. A binary relation on R is a subset S ƒé R ÀÜ R, which can be
drawn as a set of points in the plane.
a.) Draw the relation tpx, yq | y ‚Äú x2u.
b.) Draw the relation tpx, yq | y ƒõ x2u.
c.) Let S0 be the equivalence relation on R generated (in the sense of Lemma 2.6.1.7)
by the empty set. Draw S as a subset of the plane.
d.) Consider the equivalence relation S1 generated by tp1, 2q, p1, 3qu. Draw S1 in the
plane. Highlight the equivalence class containing p1, 2q.
e.) The reÔ¨Çexivity property and the symmetry property have pleasing visualizations in
R ÀÜ R; what are they?
f.) Is there a nice heuristic for visualizing the transitivity property?
‚ô¶
Exercise 2.6.1.10. Consider the binary relation R ‚Äú tpn, n ` 1q | n P Zu ƒé Z ÀÜ Z.
a.) What is the equivalence relation generated by R?
b.) How many equivalence classes are there?
‚ô¶
Exercise 2.6.1.11. Suppose N is a network (or graph). Let X be the nodes of the network,
and let R ƒé X ÀÜ X denote the relation such that px, yq P R iÔ¨Äthere exists an arrow
connecting x to y. 14
a.) What is the equivalence relation ‚Äû generated by R?
b.) What is the quotient X{ ‚Äû?
‚ô¶
2.6.2
Pushouts
DeÔ¨Ånition 2.6.2.1 (Pushout). Suppose given the diagram of sets and functions below:
W
f
/
g

X
Y
(2.35)
Its Ô¨Åber sum, denoted X\W Y , is deÔ¨Åned as the quotient of X\W \Y by the equivalence
relation ‚Äû generated by w ‚Äû fpwq and w ‚Äû gpwq for all w P W.
X \W Y :‚Äú pX \ W \ Y q{ ‚Äû
where @w P W, w ‚Äû fpwq
and
w ‚Äû gpwq.
14The word iÔ¨Ämeans ‚Äúif and only if‚Äù. In this case we are saying that the pair px, yq is in R if and
only if there exists an arrow connecting x and y.

2.6. FINITE COLIMITS IN SET
53
There are obvious inclusions i1 : X √ë X \W Y and i2 : Y √ë X \W Y . 15 Note that if
Z ‚Äú X \W Y then the diagram
W
g
/
f

Y
i2

X
i1
/ Z
‚åú
(2.36)
commutes. Given the setup of Diagram 2.35 we deÔ¨Åne the pushout of X and Y over W
to be any set Z for which we have an isomorphism Z
‚Äì
√ù√ë X \W Y . The corner symbol
‚åúin Diagram 2.36 indicates that Z is the pushout.
Example 2.6.2.2. Let X ‚Äú tx P R | 0 ƒè x ƒè 1u be the set of numbers between 0 and 1,
inclusive, let Y ‚Äú ty P R | 1 ƒè y ƒè 2u by the set of numbers between 1 and 2, inclusive,
and let W ‚Äú t1u. Then the pushout X
f√ê√ù W
g√ù√ë Y , where f and g are the ‚Äúobvious‚Äù
functions (1 √û√ë 1) is X \W Y ‚Äì tz P R | 0 ƒè z ƒè 2u, as expected. When we eventually
get to general colimits, one can check that the whole real line can be made by patching
together intervals in this way.
Example 2.6.2.3 (Pushout). In each example below, the diagram to the right is intended
to be a pushout of the diagram to the left. The new object, D, is the union of B and
C, but instances of A are equated to their B and C aspects. This will be discussed after
the two diagrams.
A
a cell in the
shoulder
is
/
is

C
a cell in
the arm
B
a cell in the
torso
A
a cell in the
shoulder
is
/
is

C
a cell in
the arm

B
a cell in the
torso
/
D‚ÄúB\AC
a cell in the
torso or arm
(2.37)
In the left-hand olog (2.37, the two arrows are inclusions: the author considers every cell
in the shoulder to be both in the arm and in the torso. The pushout is then just the
union, where cells in the shoulder are not double-counted.
15Note that our term inclusions is not too good, because it seems to suggest that i1 and i2 are injective
(see DeÔ¨Ånition 2.7.5.1) and this is not always the case.

54
CHAPTER 2. THE CATEGORY OF SETS
A
a college
mathematics
course
yields/
is 
C
an utterance
of the phrase
‚Äútoo hard‚Äù
B
a college
course
A
a college
mathematics
course
yields /
is

C
an utterance
of the phrase
‚Äútoo hard‚Äù

B
a college
course
/
D ‚Äú B\A C
a college course,
where every
mathematics
course is
replaced by an
utterance of the
phrase ‚Äútoo
hard‚Äù
(2.38)
In Olog (2.37), the shoulder is seen as part of the arm and part of the torso. When
taking the union of these two parts, we do not want to ‚Äúdouble-count‚Äù the shoulder (as
would be done in the coproduct B \ C, see Example 2.4.2.12). Thus we create a new
type A for cells in the shoulder, which are considered the same whether viewed as cells in
the arm or cells in the torso. In general, if one wishes to take two things and glue them
together, with A as the glue and with B and C as the two things to be glued, the union
is the pushout B \A C. (A nice image of this can be seen in the setting of topological
spaces, see Example 4.5.3.30.)
In Olog (2.38), if every mathematics course is simply ‚Äútoo hard,‚Äù then when reading
oÔ¨Äa list of courses, each math course will not be read aloud but simply read as ‚Äútoo
hard.‚Äù To form D we begin by taking the union of B and C, and then we consider
everything in A to be the same whether one looks at it as a course or as the phrase ‚Äútoo
hard.‚Äù The math courses are all blurred together as one thing. Thus we see that the
power to equate diÔ¨Äerent things can be exercised with pushouts.
Exercise 2.6.2.4. Let W, X, Y be as drawn and f : W √ë X and g: W √ë Y the indicated
functions.
The pushout of the diagram X
f
√ê√ù√ù√ù W
g
√ù√ù√ù√ë Y is a set P. Write down the cardinality
of P ‚Äì n as a natural number n P N.
‚ô¶

2.6. FINITE COLIMITS IN SET
55
Exercise 2.6.2.5. Suppose that W ‚Äú H; what can you say about X \W Z?
‚ô¶
Exercise 2.6.2.6. Let W :‚Äú N ‚Äú t0, 1, 2, . . .u denote the set of natural numbers, let X ‚Äú Z
denote the set of integers, and let Y ‚Äú t,u denote a one-element set. DeÔ¨Åne f : W √ë X
by fpwq ‚Äú ¬¥pw ` 1q, and deÔ¨Åne g: W √ë Y to be the unique map. Describe the set
X \W Y .
‚ô¶
Exercise 2.6.2.7. Let i: R ƒé X ÀÜ X be an equivalence relation (see Example 2.1.2.3
for notation). Composing with the projections œÄ1, œÄ2 : X ÀÜ X √ë X, we have two maps
œÄ1 Àù i, : R √ë X and œÄ2 Àù i: R √ë X.
a.) What is the pushout
X
œÄ1Àùi
√ê√ù√ù√ù R œÄ2Àùi
√ù√ù√ù√ë X?
b.) If i: R ƒé X ÀÜ X is not assumed to be an equivalence relation, we can still deÔ¨Åne the
pushout above. Is there a relationship between the pushout X
œÄ1Àùi
√ê√ù√ù√ù R œÄ2Àùi
√ù√ù√ù√ë X and
the equivalence relation generated by R ƒé X ÀÜ X?
‚ô¶
Lemma 2.6.2.8 (Universal property for pushout). Suppose given the diagram of sets
and functions as below.
W
u
/
t

Y
X
For any set A and commutative solid arrow diagram as below (i.e. functions f : X √ë A
and g: Y √ë A such that f Àù t ‚Äú g Àù u),
W
u
$
t
z
X
i1
 
f
$
Y
i2

g
z
A
X \W Y
D!
O
(2.39)
there exists a unique arrow
"
f
g : X \W Y √ë A making everything commute,
f ‚Äú
"
f
g Àù i1
and
g ‚Äú
"
f
g Àù i2.

56
CHAPTER 2. THE CATEGORY OF SETS
2.6.3
Other Ô¨Ånite colimits
DeÔ¨Ånition 2.6.3.1. [Coequalizer]
Suppose given two parallel arrows
X
f
/
g
/ Y.
X
f
/
g
/ Y
q
/ Coeqpf, gq
(2.40)
The coequalizer of f and g is the commutative diagram as to the right in (2.40), where
we deÔ¨Åne
Coeqpf, gq :‚Äú Y { fpxq ‚Äû gpxq
i.e. the coequalizer of f and g is the quotient of Y by the equivalence relation generated
by tpfpxq, gpxqq | x P Xu ƒé Y ÀÜ Y
Exercise 2.6.3.2. Let X ‚Äú R be the set of real numbers. What is the coequalizer of the
two maps X √ë X given by x √û√ë x and x √û√ë px ` 1q respectively?
‚ô¶
Exercise 2.6.3.3. Find a universal property enjoyed by the coequalizer of two arrows. ‚ô¶
Exercise 2.6.3.4 (Initial object). An initial set is a set S such that for every set A, there
exists a unique function S √ë A.
a.) Find an initial set.
b.) Do you think that the notion initial set belongs in this section (Section 2.6)? How
so? If coproducts, pushouts, and coequalizers are all colimits, what do colimits have
in common?
‚ô¶
2.7
Other notions in Set
In this section we discuss some left-over notions in the category of Sets.
2.7.1
Retractions
DeÔ¨Ånition 2.7.1.1. Suppose we have a function f : X √ë Y and a function g: Y √ë X
such that g Àù f ‚Äú idX. In this case we call f a retract section and we call g a retract
projection.
Exercise 2.7.1.2. Create an olog that includes sets X and Y , and functions f : X √ë Y
and g: Y √ë X such that g Àù f ‚Äú idX but such that f Àù g ‚Ä∞ idY ; that is, such that f is a
retract section but not an isomorphism.
‚ô¶
2.7.2
Currying
Currying is the idea that when a function takes many inputs, we can input them one at
a time or all at once. For example, consider the function that takes a material M and
an extension E and returns the force transmitted through the material when it is pulled
to that extension. This is a function e: ‚åúa material‚åùÀÜ ‚åúan extension‚åù√ë ‚åúa force‚åù. This
function takes two inputs at once, but it is convenient to ‚Äúcurry‚Äù the second input. Recall

2.7. OTHER NOTIONS IN SET
57
that HomSetp‚åúan extension‚åù, ‚åúa force‚åùq is the set of theoretical force-extension curves.
Currying transforms e into a function
e1 : ‚åúa material‚åù√ë HomSetp‚åúan extension‚åù, ‚åúa force‚åùq.
This is a more convenient way to package the same information.
In fact, it may be convenient to repackage this information another way. For any
extension, we may want the function that takes a material and returns how much force
it can transmit at that extension. This is a function
e2 : ‚åúan extension‚åù√ë HomSetp‚åúa material‚åù, ‚åúa force‚åùq.
Notation 2.7.2.1. Let A and B be sets. We sometimes denote the set of functions from
A to B by
BA :‚Äú HomSetpA, Bq.
(2.41)
Exercise 2.7.2.2. For a Ô¨Ånite set A, let |A| P N denote the cardinality of (number of
elements in) A. If A and B are both Ô¨Ånite (including the possibility that one or both
are empty), is it always true that |BA| ‚Äú |B||A|?
‚ô¶
Proposition 2.7.2.3 (Currying). Let A denote a set. For any sets X, Y there is a
bijection
œÜ: HomSetpX ÀÜ A, Y q ‚Äì
√ù√ë HomSetpX, Y Aq.
(2.42)
Proof. Suppose given f : X ÀÜ A √ë Y . DeÔ¨Åne œÜpfq: X √ë Y A as follows: for any x P X
let œÜpfqpxq: A √ë Y be deÔ¨Åned as follows: for any a P A, let œÜpfqpxqpaq :‚Äú fpx, aq.
We now construct the inverse, œà: HomSetpX, Y Aq √ë HomSetpX ÀÜ A, Y q. Suppose
given g: X √ë Y A. DeÔ¨Åne œàpgq: X ÀÜ A √ë Y as follows: for any pair px, aq P X ÀÜ A let
œàpgqpx, aq :‚Äú gpxqpaq.
Then for any f P HomSetpX ÀÜ A, Y q we have œà Àù œÜpfqpx, aq ‚Äú œÜpfqpxqpaq ‚Äú fpx, aq,
and for any g P HomSetpX, Y Aq we have œÜ Àù œàpgqpxqpaq ‚Äú œàpgqpx, aq ‚Äú gpxqpaq, Thus we
see that œÜ is an isomorphism as desired.
‚ñ°
Exercise 2.7.2.4. Let X ‚Äú t1, 2u, A ‚Äú ta, bu, and Y ‚Äú tx, yu.
a.) Write down three distinct elements of L :‚Äú HomSetpX ÀÜ A, Y q.
b.) Write down all the elements of M :‚Äú HomSetpA, Y q.
c.) For each of the three elements ‚ÑìP L you chose in part (a), write down the corre-
sponding function œÜp‚Ñìq: X √ë M guaranteed by Proposition 2.7.2.3.
‚ô¶
Exercise 2.7.2.5. Let A and B be sets.
We know that HomSetpA, Bq ‚Äú BA, so we
have a function idBA : HomSetpA, Bq √ë BA. Look at Proposition 2.7.2.3, making the
substitutions X ‚Äú HomSetpA, Bq, Y ‚Äú B, and A ‚Äú A. Consider the function
œÜ¬¥1 : HomSetpHomSetpA, Bq, BAq √ë HomSetpHomSetpA, Bq ÀÜ A, Bq
obtained as the inverse of (2.42).
We have a canonical element idBA in the domain
of œÜ¬¥1.
We can apply the function œÜ¬¥1 and obtain an element ev ‚Äú œÜ¬¥1pidBAq P
HomSetpHomSetpA, Bq ÀÜ A, Bq, which is itself a function,
ev: HomSetpA, Bq ÀÜ A √ë B.

58
CHAPTER 2. THE CATEGORY OF SETS
a.) Describe the function ev in terms of how it operates on elements in its domain.
b.) Why might one be tempted to denote this function by ev?
‚ô¶
If n P N is a natural number, recall from (2.6) that there is a nice set n ‚Äú t1, 2, . . . , nu.
If A is a set, we often make the abbreviation
An :‚Äú An.
(2.43)
Exercise 2.7.2.6. In Example 2.4.1.7 we said that R2 is an abbreviation for R ÀÜ R, but
in (2.43) we say that R2 is an abbreviation for R2. Use Exercise 2.1.2.14, Proposition
2.7.2.3, Exercise 2.4.2.10, and the fact that 1+1=2, to prove that these are isomorphic,
R2 ‚Äì R ÀÜ R.
(The answer to Exercise 2.1.2.14 was A ‚Äú t,u: i.e. HomSetpt,u, Xq ‚Äì X for all X.)
‚ô¶
2.7.3
Arithmetic of sets
Proposition 2.7.3.1 summarizes the properties of products, coproducts, and exponentials,
and shows them all in a familiar light, namely that of arithmetic. In fact, one can think
of the natural numbers as literally being the isomorphism classes of Ô¨Ånite sets‚Äîthat‚Äôs
what they are used for in counting. Consider the standard procedure for counting the
elements of a set S, say cows in a Ô¨Åeld: one points to an element in S and simultaneously
says ‚Äú1‚Äù, points to another element in S and simultaneously says ‚Äú2‚Äù, and so on until
Ô¨Ånished. This procedure amounts to nothing more than creating an isomorphism (one-
to-one mapping) between S and some set n.
Again, the natural numbers are the isomorphism classes of Ô¨Ånite sets. Their behavior,
i.e. the arithmetic of natural numbers, reÔ¨Çects the behavior of sets. For example the fact
that multiplication distributes over addition is a fact about grids of dots as in Example
2.4.1.2. The following proposition lays out such arithmetic properties of sets.
In this proposition, we denote the coproduct of two sets A and B by the notation
A ` B rather than A \ B. It is a reasonable notation in general, and one that is often
used.
Proposition 2.7.3.1. The following isomorphisms exist for any sets A, B, and C (except
for one caveat, see Exercise 2.7.3.2).
‚Ä¢ A ` 0 ‚Äì A
‚Ä¢ A ` B ‚Äì B ` A
‚Ä¢ pA ` Bq ` C ‚Äì A ` pB ` Cq
‚Ä¢ A ÀÜ 0 ‚Äì 0
‚Ä¢ A ÀÜ 1 ‚Äì A
‚Ä¢ A ÀÜ B ‚Äì B ÀÜ A
‚Ä¢ pA ÀÜ Bq ÀÜ C ‚Äì A ÀÜ pB ÀÜ Cq
‚Ä¢ A ÀÜ pB ` Cq ‚Äì pA ÀÜ Bq ` pA ÀÜ Cq

2.7. OTHER NOTIONS IN SET
59
‚Ä¢ A0 ‚Äì 1
‚Ä¢ A1 ‚Äì A
‚Ä¢ 0A ‚Äì 0
‚Ä¢ 1A ‚Äì 1
‚Ä¢ AB`C ‚Äì AB ÀÜ AC
‚Ä¢ pABqC ‚Äì ABÀÜC
Exercise 2.7.3.2. Everything in Proposition 2.7.3.1 is true except in one case, namely
that of
00.
In this case, we get conÔ¨Çicting answers, because for any set A, including A ‚Äú H ‚Äú 0, we
have claimed both that A0 ‚Äì 1 and that 0A ‚Äì 0.
What is the correct answer for 00, based on the deÔ¨Ånitions of 0 and 1, given in (2.6),
and of AB, given in (2.41)?
‚ô¶
Exercise 2.7.3.3. It is also true of natural numbers that if a, b P N and ab ‚Äú 0 then either
a ‚Äú 0 or b ‚Äú 0. Is the analogous statement true of all sets?
‚ô¶
Proposition 2.7.3.1 is in some sense about isomorphisms. It says that understanding
isomorphisms of sets reduces to understanding natural numbers. But note that there is
much more going on in Set than isomorphisms; in particular there are functions that
are not invertible.
In grade school you probably never saw anything that looked like this:
53 ÀÜ 3 √ù√ë 5
And yet in Exercise 2.7.2.5 we found a function ev: BA ÀÜ A √ë B that exists for any
sets A, B. This function ev is not an isomorphism so it somehow does not show up as
an equation of natural numbers. But it still has important meaning.
16 In terms of
mere number, it looks like we are being told of an important function 575 √ë 5, which is
bizarre. The issue here is precisely the one you confronted in Exercise 2.1.2.13.
Exercise 2.7.3.4. Explain why there is a canonical function 53 ÀÜ 3 √ù√ë 5 but not a
canonical function 575 √ë 5.
‚ô¶
Slogan 2.7.3.5.
‚Äú It is true that a set is isomorphic to any other set with the same number
of elements, but don‚Äôt be fooled into thinking that the study of sets reduces
to the study of numbers. Functions that are not isomorphisms cannot be
captured within the framework of numbers. ‚Äù
16Roughly, the existence of ev : 53 ÀÜ 3 √ù√ë 5 says that given a dot in a 5 ÀÜ 5 ÀÜ 5 grid of dots, and given
one of the three axes, you can tell me the coordinate of that dot along that axis.

60
CHAPTER 2. THE CATEGORY OF SETS
2.7.4
Subobjects and characteristic functions
DeÔ¨Ånition 2.7.4.1. For any set B, deÔ¨Åne the power set of B, denoted PpBq, to be the
set of subsets of B.
Exercise 2.7.4.2.
a.) How many elements does PpHq have?
b.) How many elements does Ppt,uq have?
c.) How many elements does Ppt1, 2, 3, 4, 5, 6uq have?
d.) Any idea why they may have named it ‚Äúpower set‚Äù?
‚ô¶
2.7.4.3
Simplicial complexes
DeÔ¨Ånition 2.7.4.4. Let V be a set and let PpV q be its powerset. A subset X ƒé PpV q
is called downward-closed if, for every u P X and every u1 ƒé u, we have u1 P X. We say
that X contains all atoms if for every v P V the singleton set tvu is an element of X.
A simplicial complex is a pair pV, Xq where V is a set and X ƒé PpV q is a downward-
closed subset that contains all atoms. The elements of X are called simplices (singular:
simplex). Any subset u ƒé V has a cardinality |u|, so we have a function X √ë N sending
each simplex to its cardinality. The set of simplices with cardinality n ` 1 is denoted Xn
and each element x P Xn is called an n-simplex. 17 Since X contains all atoms (subsets
of cardinality 1), we have X0 ‚Äì V , and we may also call the 0-simplices vertices. We
sometimes call the 1-simplices edges. 18
Since X0 ‚Äì V , we may denote a simplicial complex pV, Xq simply by X.
Example 2.7.4.5. Let n P N be a natural number and let V ‚Äú n ` 1. DeÔ¨Åne the n-simplex,
denoted ‚àÜn, to be the simplicial complex PpV q ƒé PpV q, i.e. the whole power set, which
indeed is downward-closed and contains all atoms.
We can draw a simplicial complex X by Ô¨Årst putting all the vertices on the page as
dots. Then for every x P X1, we see that x ‚Äú tv, v1u consists of 2 vertices, so we draw
an edge connecting v and v1. For every y P X2 we see that y ‚Äú tw, w1, w2u consists of 3
vertices, so we draw a (Ô¨Ålled-in) triangle connecting them. All three edges will be drawn
too because X is assumed to be downward closed.
Thus, the 0-simplex ‚àÜ0, the 1-simplex ‚àÜ1, the 2-simplex ‚àÜ2, and the 3-simplex ‚àÜ3
are drawn here:
0 
3 
1 
2 
0 
1 
2 
0 
1 
0 
17It is annoying at Ô¨Årst that the set of subsets with cardinality 1 is denoted X0, etc. But this is
standard convention because as we will see, Xn will be n-dimensional.
18The reason we wrote X0 ‚Äì V rather than X0 ‚Äú V is that X0 is the set of 1-element subsets of V .
So if V ‚Äú ta, b, cu then X0 ‚Äú ttau, tbu, tcuu. This is really just pedantry.

2.7. OTHER NOTIONS IN SET
61
The n-simplices for various n‚Äôs are in no way all of the simplicial complexes.
In
general a simplicial complex is a union or ‚Äúgluing together‚Äù of simplices in a prescribed
manner. For example, consider the simplicial complex X with vertices X0 ‚Äú t1, 2, 3, 4u,
edges X1 ‚Äú tt1, 2u, t2, 3u, t2, 4uu, and no higher simplices X2 ‚Äú X3 ‚Äú ¬® ¬® ¬® ‚Äú H. We
might draw X as follows:
1‚Äö
2‚Äö
3‚Äö
4‚Äö
Exercise 2.7.4.6. Let X be the following simplicial complex, so that X0 ‚Äú tA, B, . . . , Mu.
In this case X1 consists of elements like tA, Bu and tD, Ku but not tD, Ju.
Write out X2 and X3 (hint: the drawing of X indicates that X3 should have one
element).
‚ô¶
Exercise 2.7.4.7. The 2-simplex ‚àÜ2 is drawn as a Ô¨Ålled-in triangle with vertices V ‚Äú
t1, 2, 3u. There is a simplicial complex X ‚Äú B‚àÜ2 that would be drawn as an empty
triangle with the same set of vertices.
a.) Draw ‚àÜ2 and X side by side and make clear the diÔ¨Äerence.
b.) Write down the data for X as a simplicial complex. In other words what are the sets
X0, X1, X2, X3, . . .?
‚ô¶
2.7.4.8
Subobject classiÔ¨Åer
DeÔ¨Ånition 2.7.4.9. DeÔ¨Åne the subobject classiÔ¨Åer for Set, denoted ‚Ñ¶, to be the set
‚Ñ¶:‚Äú tTrue, Falseu, together with the function t,u √ë ‚Ñ¶sending the unique element to
True.

62
CHAPTER 2. THE CATEGORY OF SETS
Proposition 2.7.4.10. Let B be a set. There is an isomorphism
œÜ: HomSetpB, ‚Ñ¶q ‚Äì
√ù√ë PpBq.
Proof. Given a function f : B √ë ‚Ñ¶, let œÜpfq ‚Äú tb P B | fpbq ‚Äú Trueu ƒé B. We now
construct a function œà: PpBq √ë HomSetpB, ‚Ñ¶q to serve as the inverse of œÜ. Given a
subset B1 ƒé B, deÔ¨Åne œàpB1q: B √ë ‚Ñ¶as follows:
œàpiqpbq ‚Äú
#
True
if b P B1,
False
if b R B1.
One checks easily that œÜ and œà are mutually inverse.
‚ñ°
DeÔ¨Ånition 2.7.4.11 (Characteristic function). Given a subset B1 ƒé B, we call the
corresponding function B √ë ‚Ñ¶the characteristic function of B1 in B.
Let B be any set and let PpBq be its power set. By Proposition 2.7.4.10 there is a
bijection between PpBq and ‚Ñ¶B. Since ‚Ñ¶has cardinality 2, the cardinality of PpBq is
2|B|, which explains the correct answer to Exercise 2.7.4.2.
Exercise 2.7.4.12. Let f : A √ë ‚Ñ¶denote the characteristic function of some A1 ƒé A, and
deÔ¨Åne A2 ƒé A to be its complement, A2 :‚Äú A ¬¥ A1 (i.e. a P A2 if and only if a R A1).
a.) What is the characteristic function of A2 ƒé A?
b.) Can you phrase it in terms of some function ‚Ñ¶√ë ‚Ñ¶?
‚ô¶
2.7.5
Surjections, injections
The classical deÔ¨Ånition of injections and surjections involves elements, which we give now.
But a more robust notion involves all maps and will be given in Proposition 2.7.5.4.
DeÔ¨Ånition 2.7.5.1. Let f : X √ë Y be a function. We say that f is surjective if, for all
y P Y there exists some x P X such that fpxq ‚Äú y. We say that f is injective if, for all
x P X and all x1 P X with fpxq ‚Äú fpx1q we have x ‚Äú x1.
A function that is both injective and surjective is called bijective.
Remark 2.7.5.2. It turns out that a function that is bijective is always an isomorphism
and that all isomorphisms are bijective. We will not show that here, but it is not too
hard; see for example [Big, Theorem 5.4].
DeÔ¨Ånition 2.7.5.3 (Monomorphisms, epimorphisms). Let f : X √ë Y be a function.
We say that f is a monomorphism if for all sets A and pairs of functions g, g1 : A √ë X,
A
g
"
g1
=X
f
/ Y
if f Àù g ‚Äú f Àù g1 then g ‚Äú g1.

2.7. OTHER NOTIONS IN SET
63
We say that f is an epimorphism if for all sets B and pairs of functions h, h1 : Y √ë B,
X
f
/ Y
h
"
h1
=B
if h Àù f ‚Äú h1 Àù f then h ‚Äú h1.
Proposition 2.7.5.4. Let f : X √ë Y be a function. Then f is injective if and only if
it is a monomorphism; f is surjective if and only if it is an epimorphism.
Proof. If f is a monomorphism it is clearly injective by putting A ‚Äú t,u. Suppose that
f is injective and let g, g1 : A √ë X be functions such that f Àù g ‚Äú f Àù g1, but suppose for
contradiction that g ‚Ä∞ g1. Then there is some element a P A such gpaq ‚Ä∞ g1paq P X. But
by injectivity fpgpaqq ‚Ä∞ fpg1paqq, contradicting f Àù g ‚Äú f Àù g1.
Suppose that f : X √ë Y is an epimorphism and choose some y0 P Y (noting that if
Y is empty then the claim is vacuously true). Let h: Y √ë ‚Ñ¶denote the characteristic
function of the subset ty0u ƒé Y and let h1 : Y √ë ‚Ñ¶denote the characteristic function
of H ƒé Y ; note that hpyq ‚Äú h1pyq for all y ‚Ä∞ y0. Then since f is an epimorphism and
h ‚Ä∞ h1, we must have hÀùf ‚Ä∞ h1 Àùf, so there exists x P X with hpfpxqq ‚Ä∞ h1pfpxqq, which
implies that fpxq ‚Äú y0. This proves that f is surjective.
Finally, suppose that f is surjective, and let h, h1 : Y √ë B be functions with h Àù f ‚Äú
h1 Àù f. For any y P Y , there exists some x P X with fpxq ‚Äú y, so hpyq ‚Äú hpfpxqq ‚Äú
h1pfpxqq ‚Äú h1pyq. This proves that f is an epimorphism.
‚ñ°
Proposition 2.7.5.5. Let f : X √ë Y be a monomorphism.
Then for any function
g: A √ë Y , the top map f 1 : X ÀÜY A √ë A in the diagram
X ÀÜY A
f 1
/
g1

‚åü
A
g

X
f
/ Y
is a monomorphism.
Proof. To show that f 1 is a monomorphism, we take an arbitrary set B and two maps
m, n: B √ë X ÀÜY A such that f 1Àùm ‚Äú f 1Àùn, denote that function by p :‚Äú f 1Àùm: B √ë A.
Now let q ‚Äú g1 Àù m and r ‚Äú g1 Àù n. The diagram looks like this:
B
m
/
n
/
p
%
q
(
r
(
X ÀÜY A
f 1
/
g1

‚åü
A
g

X
f
/ Y
We have that
f Àù q ‚Äú f Àù g1 Àù m ‚Äú g Àù f 1 Àù m ‚Äú g Àù f 1 Àù n ‚Äú f Àù g1 Àù n ‚Äú f Àù r

64
CHAPTER 2. THE CATEGORY OF SETS
But we assumed that f is a monomorphism so this implies that q ‚Äú r. By the universal
property of pullbacks, Lemma 2.5.1.14, we have m ‚Äú n.
‚ñ°
Exercise 2.7.5.6. Show, in analogy to Proposition 2.7.5.5, that pushouts preserve epi-
morphisms.
‚ô¶
Example 2.7.5.7. Suppose an olog has a Ô¨Åber product square
X ÀÜZ Y
g1
/
f 1

Y
f

X
g
/ Z
such that f is intended to be an injection and g is any map. 19 In this case, there are
nice labeling systems for f 1, g1, and X ÀÜZ Y . Namely:
‚Ä¢ ‚Äúis‚Äù is an appropriate label for f 1,
‚Ä¢ the label for g is an appropriate label for g1,
‚Ä¢ (the label for X, then ‚Äúwhich‚Äù, then the label for g, then the label for Y ) is an
appropriate label for X ÀÜZ Y .
To give an explicit example,
XÀÜZY
a rib which is
made by a cow
is made by
/
is

Y
a cow
is

X
a rib
is made by
/
Z
an animal
Corollary 2.7.5.8. Let i: A √ë X be a monomorphism. Then there is a Ô¨Åber product
square of the form
A
f 1 /
i

‚åü
t,u
T rue

X
f
/ ‚Ñ¶.
(2.44)
Proof. Let X1 ƒé X denote the image of i and let f : X √ë ‚Ñ¶denote the characteristic
function of X1 ƒé X. Then it is easy to check that Diagram 2.44 is a pullback.
‚ñ°
Exercise 2.7.5.9. Consider the subobject classiÔ¨Åer ‚Ñ¶, the singleton t,u and the map
t,u T rue
√ù√ù√ù√ë ‚Ñ¶from DeÔ¨Ånition 2.7.4.9. Look at diagram 2.44 and in the spirit of Exercise
2.7.5.7, come up with a label for ‚Ñ¶, a label for t,u, and a label for True. Given a label
for X and a label for f, come up with a label for A, a label for i and a label for f 1, such
that the English smoothly Ô¨Åts the mathematics.
‚ô¶
19Of course, this diagram is symmetrical, so the same ideas hold if g is an injection and f is any map.

2.7. OTHER NOTIONS IN SET
65
2.7.6
Multisets, relative sets, and set-indexed sets
In this section we prepare ourselves for considering categories other than Set, by looking
at some categories related to Set.
2.7.6.1
Multisets
Consider the set X of words in a given document. If WCpXq is the wordcount of the
document, we will not generally have WCpXq ‚Äú |X|. The reason is that a set cannot
contain the same element more than once, so words like ‚Äúthe‚Äù might be undercounted in
|X|. A multiset is a set in which elements can be assigned a multiplicity, i.e. a number
of times they are to be counted.
But if X and Y are multisets, what is the appropriate type of mapping from X
to Y ?
Since every set is a multiset (in which each element has multiplicity 1), let‚Äôs
restrict ourselves to notions of mapping that agree with the usual one on sets. That
is, if multisets X and Y happen to be sets then our mappings X √ë Y should just be
functions.
Exercise 2.7.6.2.
a.) Come up with some notion of mapping for multisets that generalizes functions when
the notion is restricted to sets.
b.) Suppose that X ‚Äú p1, 1, 2, 3q and Y ‚Äú pa, b, b, bq, i.e. X ‚Äú t1, 2, 3u with 1 having
multiplicity 2, and Y ‚Äú ta, bu with b having multiplicity 3. What are all the maps
X √ë Y in your notion?
‚ô¶
In Chapter 4 we will be getting to the deÔ¨Ånition of category, and you can test whether
your notion of mapping in fact deÔ¨Ånes a category. Here is my deÔ¨Ånition of mapping for
multisets.
DeÔ¨Ånition 2.7.6.3. A multiset is a sequence X :‚Äú pE, B, œÄq where E and B are sets
and œÄ: E √ë B is a surjective function. We refer to E as the set of element instances
of X, we refer to B as the set of element names of X, and we refer to œÄ as the naming
function for X. Given an element name x P B, let œÄ¬¥1pxq ƒé E be the preimage; the
number of elements in œÄ¬¥1pxq is called the multiplicity of x.
Suppose that X ‚Äú pE, B, œÄq and X1 ‚Äú pE1, B1, œÄ1q are multisets. A mapping from
X to Y , denoted f : X √ë Y , consists of a pair pf1, f0q such that f1 : E √ë E1 and
f0 : B √ë B1 are functions and such that the following diagram commutes:
E
f1
/
œÄ

E1
œÄ1

B
f0
/ B1.
(2.45)
Exercise 2.7.6.4. Suppose that a pseudo-multiset is deÔ¨Åned to be almost the same as a
multiset, except that œÄ is not required to be surjective.
a.) Write down a pseudo-multiset that is not a multi-set.
b.) Describe the diÔ¨Äerence between the two notions in terms of multiplicities.

66
CHAPTER 2. THE CATEGORY OF SETS
c.) Complexity of names aside, which do you think is a more useful notion: multiset or
pseudo-multisets?
‚ô¶
Exercise 2.7.6.5. Consider the multisets described in Exercise 2.7.6.2.
a.) Write each of them in the form pE, B, œÄq, as in DeÔ¨Ånition 2.7.6.3.
b.) In terms of the same deÔ¨Ånition, what are the mappings X √ë Y ?
c.) If we remove the restriction that diagram 2.45 must commute, how many mappings
X √ë Y are there?
‚ô¶
2.7.6.6
Relative sets
Let‚Äôs continue with our ideas from multisets, but now suppose that we have a Ô¨Åxed set B
of names that we want to keep once and for all. Whenever someone discusses a set, each
element must have a name in B. And whenever someone discusses a mapping, it must
preserve the names. For example, if B is the set of English words, then every document
consists of an ordered set mapping to B (e.g. 1 √û√ë Suppose, 2 √û√ë that, 3 √û√ë we, etc.) A
mapping from document A to document B would send each word found somewhere in
A to the same word found somewhere in B. This notion is deÔ¨Åned carefully below.
DeÔ¨Ånition 2.7.6.7 (Relative set). Let B be a set. A relative set over B, or simply a
set over B, is a pair pE, œÄq such that E is a set and œÄ: E √ë B is a function. A mapping
of relative sets over B, denoted f : pE, œÄq √ë pE1, œÄ1q, is a function f : E √ë E1 such that
the triangle below commutes, i.e. œÄ ‚Äú œÄ1 Àù f,
E
f
/
œÄ

E1
œÄ1

B
Exercise 2.7.6.8. Given sets X, Y, Z and functions f : X √ë Y and g: Y √ë Z, we can
compose them to get a function X √ë Z. If B is a set, if pX, pq, pY, qq, and pZ, rq are
relative sets over B, and if f : pX, pq √ë pY, qq and g: pY, qq √ë pZ, rq are mappings, is
there a reasonable notion of composition such that we get a mapping of relative sets
pX, pq √ë pZ, rq? Hint: draw diagrams.
‚ô¶
Exercise 2.7.6.9.
a.) Let t,u denote a set with one element. What is the diÔ¨Äerence between sets over t,u
and simply sets?
b.) Describe the sets relative to H. How many are there?
‚ô¶
2.7.6.10
Indexed sets
Let A be a set. Suppose we want to assign to each element a P A a set Sa. This is called
an A-indexed set. In category theory we are always interested in the legal mappings
between two diÔ¨Äerent structures of the same sort, so we need a notion of A-indexed
mappings; we do the ‚Äúobvious thing‚Äù.

2.7. OTHER NOTIONS IN SET
67
Example 2.7.6.11. Let C be a set of classrooms. For each c P C let Pc denote the set of
people in classroom c, and let Sc denote the set of seats (chairs) in classroom c. Then P
and S are C-indexed sets. The appropriate kind of mapping between them respects the
indexes. That is, a mapping of multi-sets P √ë S should, for each classroom c P C, be a
function Pc √ë Sc.20
DeÔ¨Ånition 2.7.6.12. Let A be a set. An A-indexed set is a collection of sets Sa, one for
each element a P A; for now we denote this by pSaqaPA. If pS1
aqaPA is another A-indexed
set, a mapping of A-indexed sets from pSaqaPA to pS1
aqaPA, denoted
pfaqaPA : pSaqaPA √ë pS1
aqaPA
is a collection of functions fa : Sa √ë S1
a, one for each element a P A.
Exercise 2.7.6.13. Let t,u denote a one element set. What are t,u-indexed sets and
mappings between them?
‚ô¶
Exercise 2.7.6.14. There is a strong relationship between A-indexed sets and relative sets
over A. What is it?
‚ô¶
20If we wanted to allow people from any classroom to choose a chair from just any classroom, category
theory would tell us to reconsider P and S as sets, forgetting their indices. See Section 5.1.4.7.

68
CHAPTER 2. THE CATEGORY OF SETS

Chapter 3
Categories and functors,
without admitting it
In this chapter we begin to use our understanding of sets to build more interesting
mathematical devices, each of which organizes our understanding of a certain kind of
domain. For example, monoids organize our thoughts about agents acting on objects;
groups are monoids except restricted to only allow agents to act reversibly. We will
then study graphs, which are systems of nodes and arrows that can capture ideas like
information Ô¨Çow through a network or model connections between building blocks in a
material. We will discuss orders, which can be used to study taxonomies or hierarchies.
Finally we take a mathematical look at databases, which actually subsume everything
else in the chapter. Databases are connection patterns for structuring information.
We will see in Chapter 4 that everything we study in the present chapter is an example
of a category. So is Set, the category of sets studied in Chapter 2. One way to think of
a category is as a set of objects and a connection pattern between them; sets are objects
(ovals full of dots if you wish) connected by functions. But each set is itself a category:
the objects inside it are just disconnected! Just like a set has an interior view and an
exterior view, so will all the categories in this chapter. Each monoid is a category, but
there is also a category of monoids.
However, we will not really say the word ‚Äúcategory‚Äù much if at all in this chapter.
It seems preferable to let the ideas rise on their own accord as interesting structures in
their own right before explaining that everything in site Ô¨Åts into a single framework.
That will be the pleasant reward to come in Chapter 4.
3.1
Monoids
A common way to interpret phenomena we see around us is to say that agents are acting
on objects. For example, in a computer drawing program, the user acts on the canvas
in certain prescribed ways. Choices of actions from an available list can be performed in
sequence to transform one image into another. As another example, one might investigate
the notion that time acts on the position of hands on a clock in a prescribed way. A
Ô¨Årst rule for actions is this: the performance of a sequence of several actions is itself the
performance of an action‚Äîa more complex action, but an action nonetheless.
Mathematical objects called monoids and groups are tasked with encoding the agent‚Äôs
69

70
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
perspective in all this, i.e. what the agent can do, and what happens when diÔ¨Äerent
actions are done in succession. A monoid can be construed as a set of actions, together
with a formula that encodes how a sequence of actions is itself considered an action. A
group is the same as a monoid, except that every action is required to be reversible. In
this section we concentrate on monoids; we will get to groups in Section 3.2.
3.1.1
DeÔ¨Ånition and examples
DeÔ¨Ånition 3.1.1.1 (Monoid). A monoid is a sequence pM, e, ‚Äπq, where M is a set, e P M
is an element, and ‚Äπ: M ÀÜM √ë M is a function, such that the following conditions hold
for all m, n, p P M:
‚Ä¢ m ‚Äπ e ‚Äú m,
‚Ä¢ e ‚Äπ m ‚Äú m, and
‚Ä¢ pm ‚Äπ nq ‚Äπ p ‚Äú m ‚Äπ pn ‚Äπ pq.
We refer to e as the identity element and to ‚Äπ as the multiplication formula for the
monoid.
1 We call the Ô¨Årst two rules identity laws and the third rule the associativity
law for monoids.
Remark 3.1.1.2. To be pedantic, the conditions from DeÔ¨Ånition 3.1.1.1 should be stated
‚Ä¢ ‚Äπpm, eq ‚Äú m,
‚Ä¢ ‚Äπpe, mq ‚Äú m, and
‚Ä¢ ‚Äπp‚Äπpm, nq, pq ‚Äú ‚Äπpm, p‚Äπpn, pqq.
The way they are written in DeÔ¨Ånition 3.1.1.1 is called inÔ¨Åx notation, and we often use
inÔ¨Åx notation without mentioning it. That is, given a function ¬®: A ÀÜ B √ë C, we may
write a ¬® b rather than ¬®pa, bq.
Example 3.1.1.3 (Additive monoid of natural numbers). Let M ‚Äú N be the set of natural
numbers. Let e ‚Äú 0 and let ‚Äπ: M ÀÜ M √ë M denote addition, so that ‚Äπp4, 18q ‚Äú 22.
Then the equations m ‚Äπ 0 ‚Äú m and 0 ‚Äπ m ‚Äú m hold, and pm ‚Äπ nq ‚Äπ p ‚Äú m ‚Äπ pn ‚Äπ pq. By
assigning e and ‚Äπ in this way, we have ‚Äúgiven N the structure of a monoid‚Äù.
Remark 3.1.1.4. Sometimes we are working with a monoid pM, e, ‚Äπq, and the identity
e and multiplication ‚Äπ are somehow clear from context. In this case we might refer to
the set M as though it were the whole monoid. For example, if we were discussing the
monoid from Example 3.1.1.3, we might refer to it as N. The danger comes because sets
may have multiple monoid structures, as we see below in Exercise 3.1.1.6.
Example 3.1.1.5 (Non-monoid). If M is a set, we might call a function f : M ÀÜ M √ë M
an operation on M. For example, if M ‚Äú N is the set of natural numbers, we can consider
the operation f : N √ë N called exponentiation. For example fp2, 5q ‚Äú 2Àö2Àö2Àö2Àö2 ‚Äú 32
and fp7, 2q ‚Äú 49. This is indeed an operation, but it is not part of any monoid. For one
thing there is no possible unit. Trying the obvious choice of e ‚Äú 1, we see that a1 ‚Äú a
(good), but that 1a ‚Äú 1 (bad: we need it to be a). For another thing, this operation is
not associative because in general abc ‚Ä∞ pabqc. For example, 212 ‚Äú 2 but p21q2 ‚Äú 4.
1Although the function ‚Äπ: M ÀÜ M √ë M is called the multiplication formula, it may have nothing
to do with multiplication. It is nothing more than a formula for taking two inputs and returning an
output; calling it ‚Äúmultiplication‚Äù is suggestive of its origins, rather than prescriptive of its behavior.

3.1. MONOIDS
71
One might also attempt to consider an operation f : M ÀÜ M √ë M that, upon closer
inspection, aren‚Äôt even operations. For example, if M ‚Äú Z then exponentiation is not
even an operation. Indeed, fp2, ¬¥1q ‚Äú 2¬¥1 ‚Äú 1
2, and this is not an integer. To have a
function f : M ÀÜ M √ë M, we need that every element of the domain, in this case every
pair of integers, has an output under f. So there is no such function f.
Exercise 3.1.1.6. Let M ‚Äú N be the set of natural numbers. Taking e ‚Äú 1, come up with
a formula for ‚Äπ that gives N the structure of a monoid.
‚ô¶
Exercise 3.1.1.7. Come up with an operation on the set M ‚Äú t1, 2, 3, 4u, i.e. a legitimate
function f : M ÀÜM √ë M, such that f cannot be the multiplication formula for a monoid
on M. That is, either it is not associative, or no element of M can serve as a unit.
‚ô¶
Exercise 3.1.1.8. In both Example 3.1.1.3 and Exercise 3.1.1.6, the monoids pM, e, ‚Äπq
satisÔ¨Åed an additional rule called commutativity, namely m‚Äπn ‚Äú n‚Äπm for every m, n P M.
There is a monoid pM, e, ‚Äπq lurking in linear algebra textbooks that is not commutative;
if you have background in linear algebra try to answer this: what M, e, and ‚Äπ might I
be referring to?
‚ô¶
Exercise 3.1.1.9. Recall the notion of commutativity for monoids from Exercise 3.1.1.8.
a.) What is the smallest set M that you can give the structure of a non-commutative
monoid?
b.) What is the smallest set M that you can give the structure of a monoid?
‚ô¶
Example 3.1.1.10 (Trivial monoid). There is a monoid with only one element, M ‚Äú
pteu, e, ‚Äπq where ‚Äπ: teu ÀÜ teu √ë teu is the unique function. We call this monoid the
trivial monoid, and sometimes denote it 1.
Example 3.1.1.11. Suppose that pM, e, ‚Äπq is a monoid. Given elements m1, m2, m3, m4
there are Ô¨Åve diÔ¨Äerent ways to parenthesize the product m1 ‚Äπ m2 ‚Äπ m3 ‚Äπ m4, and the
associativity law for monoids will show them all to be the same. We have
ppm1 ‚Äπ m2q ‚Äπ m3q ‚Äπ m4 ‚Äú pm1 ‚Äπ m2q ‚Äπ pm3 ‚Äπ m4q
‚Äú pm1 ‚Äπ pm2 ‚Äπ m3qq ‚Äπ m4
‚Äú m1 ‚Äπ pm2 ‚Äπ pm3 ‚Äπ m4qq
‚Äú m1 ‚Äπ ppm2 ‚Äπ m3q ‚Äπ m4q
In fact, the product of any list of monoid elements is the same, regardless of parenthe-
sization. Therefore, we can unambiguously write m1m2m3m4m5 rather than any given
parenthesization of it. This is known as the coherence theorem and can be found in
[Mac].
3.1.1.12
Free monoids and Ô¨Ånitely presented monoids
DeÔ¨Ånition 3.1.1.13. Let X be a set. A list in X is a pair pn, fq where n P N is a natural
number (called the length of the list) and f : n √ë X is a function, where n ‚Äú t1, 2, . . . , nu.
We may denote such a list by
pn, fq ‚Äú rfp1q, fp2q, . . . , fpnqs.
The empty list is the unique list in which n ‚Äú 0; we may denote it by r s. Given an
element x P X the singleton list on x is the list rxs. Given a list L ‚Äú pn, fq and a number
i P N with i ƒè n, the ith entry of L is the element fpiq P X.

72
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Given two lists L ‚Äú pn, fq and L1 ‚Äú pn1, f 1q, deÔ¨Åne the concatenation of L and L1,
denoted L ``L1, to be the list pn ` n1, f ``f 1q, where f ``f 1 : n ` n1 √ë X is given on
i ƒè n ` n1 by
pf ``f 1qpiq :‚Äú
#
fpiq
if i ƒè n
f 1pi ¬¥ nq
if i ƒõ n ` 1
Example 3.1.1.14. Let X ‚Äú ta, b, c, . . . , zu. The following are elements of ListpXq:
ra, b, cs, rps, rp, a, a, a, ps, r s, . . .
The concatenation of ra, b, cs and rp, a, a, a, ps is ra, b, c, p, a, a, a, ps. The concatenation
of any list A with r s is just A.
DeÔ¨Ånition 3.1.1.15. Let X be a set. The free monoid generated by X is the sequence
M :‚Äú pListpXq, r s, ``q, where ListpXq is the set of lists of elements in X, where r s P
ListpXq is the empty list, and where `` is the operation of list concatenation. We refer
to X as the set of generators for the monoid M.
Exercise 3.1.1.16. Let t,u denote a one-element set.
a.) What is the free monoid generated by t,u?
b.) What is the free monoid generated by H?
‚ô¶
In the deÔ¨Ånition below, we will deÔ¨Åne a monoid M by specifying some generators
and some relations. Lists of generators provide us all the possible ways to write elements
of M. The relations allow us to have two such ways of writing the same element. The
following deÔ¨Ånition is a bit dense, so see Example 3.1.1.19 for a concrete example.
DeÔ¨Ånition 3.1.1.17 (Presented monoid). Let G be a Ô¨Ånite set, let n P N be a natural
number, 2 and for each 1 ƒè i ƒè n, let mi and m1
i be elements of ListpGq.
3
The
monoid presented by generators G and relations tpmi, m1
iq | 1 ƒè i ƒè nu is the monoid
M ‚Äú pM, e, ‚Äπq deÔ¨Åned as follows.
Let ‚Äû denote the equivalence relation on ListpGq
generated by tpxmiy ‚Äû xm1
iyq | x, y P ListpGq, 1 ƒè i ƒè nu, and deÔ¨Åne M ‚Äú ListpGq{ ‚Äû.
Let e ‚Äú r s and let a Àö b be obtained by concatenating representing lists.
Remark 3.1.1.18. Every free monoid is a presented monoid, because we can just take the
set of relations to be empty.
Example 3.1.1.19. Let G ‚Äú ta, b, c, du. Think of these as buttons that can be pressed.
The free monoid ListpGq is the set of all ways of pressing buttons, e.g. pressing a then a
then c then c then d corresponds to the list ra, a, c, c, ds. The idea of presented monoids
is that you notice that pressing ra, a, cs always gives the same result as pressing rd, ds.
You also notice that pressing rc, a, c, as is the same thing as doing nothing.
In this case, we would have m1 ‚Äú ra, a, cs, m1
1 ‚Äú rd, ds, and m2 ‚Äú rc, a, c, as, m1
2 ‚Äú r s
and relations tpm1, m1
1q, pm2, m1
2qu. Really this means that we‚Äôre equating m1 with m1
1
and m2 with m1
2, which for convenience we‚Äôll write out:
ra, a, cs ‚Äú rd, ds
and
ra, c, a, cs ‚Äú r s
2The number n P N is going to stand for the number of relations we declare.
3Each mi and m1
i are going to be made equal in the set M.

3.1. MONOIDS
73
To see how this plays out, we give an example of a calculation in M ‚Äú ListpGq{ ‚Äû.
Namely,
rb, c, b, d, d, a, c, a, a, c, ds ‚Äú rb, c, b, a, a, c, a, c, a, a, c, ds ‚Äú rb, c, b, a, a, a, c, ds
‚Äú rb, c, b, a, d, d, ds.
Application 3.1.1.20 (BuÔ¨Äer). Let G ‚Äú ta, b, c, . . . zu. Suppose we have a buÔ¨Äer of 32
characters and we want to consider the set of lists of length at most 32 to be a monoid.
We simply have to decide what happens when someone types a list of length more than
32.
One option is to say that the last character typed overwrites the 32nd entry,
ra1, a2, . . . , a31, a32, bs ‚Äû1 ra1, a2, . . . , a31, bs.
Another option is to say that any character typed after 32 entries is discarded,
ra1, a2, . . . , a31, a32, bs ‚Äû2 ra1, a2, . . . , a31, a32s.
Both of these yield Ô¨Ånitely presented monoids, generated by G. (In case it‚Äôs useful, the
number of necessary relations in both cases is 2633.)
‚ô¶‚ô¶
Exercise 3.1.1.21. Let‚Äôs consider the buÔ¨Äer concept again (see Application 3.1.1.20), but
this time only having size 3 rather than size 32. Show using DeÔ¨Ånition 3.1.1.17 that with
relations given by ‚Äû1 we indeed have ra, b, c, d, e, fs ‚Äú ra, b, fs and that with relations
given by ‚Äû2 we indeed have ra, b, c, d, e, fs ‚Äú ra, b, cs.
‚ô¶
Exercise 3.1.1.22. Let K :‚Äú tBS, a, b, c, . . . , zu, a set having 27 elements. Suppose you
want to think of BS P K as the ‚Äúbackspace key‚Äù and the elements a, b, . . . z P K as the
letter keys on a keyboard. Then the free monoid ListpKq is not quite appropriate as a
model because we want ra, b, d, BSs ‚Äú ra, bs.
a.) Choose a set of relations for which the monoid presented by generators K and the
chosen relations is appropriate to this application.
b.) Under your relations, how does rBSs compare with r s? Is that suitable?
‚ô¶
3.1.1.23
Cyclic monoids
DeÔ¨Ånition 3.1.1.24. A monoid is called cyclic if it has a presentation involving only
one generator.
Example 3.1.1.25. Let Q be a symbol; we look at some cyclic monoids generated by
tQu. With no relations the monoid would be the free monoid on one generator, and
would have underlying set tr s, rQs, rQ, Qs, rQ, Q, Qs, . . .u, with identity element r s and
multiplication given by concatenation (e.g. rQ, Q, Qs ``rQ, Qs ‚Äú rQ, Q, Q, Q, Qs). This
is just N, the additive monoid of natural numbers.
With the really strong relation rQs ‚Äû r s we would get the trivial monoid, a monoid
having only one element (see Example 3.1.1.10).
Another possibility is given in the Ô¨Årst part of Example 3.1.2.3, where the relation
Q12 ‚Äû r s is used, where Q12 is shorthand for rQ, Q, Q, Q, Q, Q, Q, Q, Q, Q, Q, Qs.

74
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 3.1.1.26. Consider the cyclic monoid with generator Q and relation Q7 ‚Äú Q4.
This monoid has seven elements, te ‚Äú Q0, Q ‚Äú Q1, Q2, Q3, Q4, Q5, Q6u, and we know
that Q6 ‚Äπ Q5 ‚Äú Q7 Àö Q4 ‚Äú Q4 Àö Q4 ‚Äú Q7 Àö Q ‚Äú Q5. One might depict this monoid as
follows
e‚Äö
/ Q‚Äö
/ Q2
‚Äö
/ Q3
‚Äö
/ Q4
‚Äö

Q6
‚Äö
A
Q5
‚Äö
o
To see the mathematical source of this intuitive depiction, see Example 5.2.1.17.
Exercise 3.1.1.27 (Classify the cyclic monoids). Classify all the cyclic monoids up to
isomorphism. That is, come up with a naming system such that every cyclic monoid can
be given a name in your system, such that no two non-isomorphic cyclic monoids have
the same name, and such that no name exists in the system unless it refers to a cyclic
monoid.
Hint: one might see a pattern in which the three monoids in Example 3.1.1.25 corre-
spond respectively to 8, 1, and 12, and then think ‚ÄúCyclic monoids can be classiÔ¨Åed by
(i.e. systematically named by elements of) the set N \ t8u.‚Äù That idea is on the right
track, but is not correct.
‚ô¶
3.1.2
Monoid actions
DeÔ¨Ånition 3.1.2.1 (Monoid action). Let pM, e, ‚Äπq be a monoid and let S be a set. An
action of pM, e, ‚Äπq on S, or simply an action of M on S or an M-action on S, is a
function
√º : M ÀÜ S √ë S
such that the following conditions hold for all m, n P M and all s P S:
‚Ä¢ e √º s ‚Äú s
‚Ä¢ m √º pn √º sq ‚Äú pm ‚Äπ nq √º s. 4
Remark 3.1.2.2. To be pedantic (and because it‚Äôs sometimes useful), we may rewrite √º
as Œ±: M ÀÜ S √ë S and restate the conditions from DeÔ¨Ånition 3.1.2.1 as
‚Ä¢ Œ±pe, sq ‚Äú s, and
‚Ä¢ Œ±pm, Œ±pn, sqq ‚Äú Œ±pm ‚Äπ n, sq.
Example 3.1.2.3. Let S ‚Äú t0, 1, 2, . . . , 11u and let N ‚Äú pN, 0, `q be the additive monoid
of natural numbers (see Example 3.1.1.3). We deÔ¨Åne a function √º: NÀÜS √ë S by taking
a pair pn, sq to the remainder that appears when n ` s is divided by 12. For example
4 √º 2 ‚Äú 6 and 8 √º 9 ‚Äú 5. This function has the structure of a monoid action because
the two rules from DeÔ¨Ånition 3.1.2.1 hold.
4 DeÔ¨Ånition 3.1.2.1 actually deÔ¨Ånes a left action of pM, e, ‚Äπq on S. A right action is like a left action
except the order of operations is somehow reversed. We will not really use right-actions in this text, but
we brieÔ¨Çy deÔ¨Åne it here for completeness. With notation as above, the only diÔ¨Äerence is in the second
condition. We replace it by the condition that for all m, n P M and all s P S we have
m √º pn √º sq ‚Äú pn ‚Äπ mq √º s

3.1. MONOIDS
75
Similarly, let T denote the set of points on a circle, elements of which are denoted by
a real number in the interval r0, 12q, i.e.
T ‚Äú tx P R | 0 ƒè x ƒÉ 12u
and let R ‚Äú pR, 0, `q denote the additive monoid of real numbers. Then there is an
action R ÀÜ T √ë T, similar to the one above (see Exercise 3.1.2.4).
One can think of this as an action of the monoid of time on the clock.
Exercise 3.1.2.4.
a.) Realize the set T :‚Äú r0, 12q ƒé R as the coequalizer of a pair of arrows R √ë R.
b.) For any x P R, realize the mapping x ¬® ¬¥: T √ë T, implied by Example 3.1.2.3, using
the universal property of coequalizers.
c.) Prove that it is an action.
‚ô¶
Exercise 3.1.2.5. Let B denote the set of buttons (or positions) of a video game controller
(other than, say ‚Äòstart‚Äô and ‚Äòselect‚Äô), and consider the free monoid ListpBq on B.
a.) What would it mean for ListpBq to act on the set of states of some game? Imagine
a video game G1 that uses the controller, but for which ListpBq would not be said to
act on the states of G1. Now imagine a simple game G for which ListpBq would be
said to act.
b.) Can you think of a state s of G, and two distinct elements ‚Ñì, ‚Ñì1 P ListpBq such that
‚Ñì√º s ‚Äú ‚Ñì1 √º s? In video game parlance, what would you call an element b P B such
that, for every state s P G, one has b √º s ‚Äú s?
c.) In video game parlance, what would you call a state s P S such that, for every
sequence of buttons ‚ÑìP ListpBq, one has ‚Ñì√º s ‚Äú s?
‚ô¶
Application 3.1.2.6. Let f : R √ë R be a diÔ¨Äerentiable function of which we want to Ô¨Ånd
roots (points x P R such that fpxq ‚Äú 0). Let x0 P R be a starting point. For any n P N
we can apply Newton‚Äôs method to xn to get
xn`1 ‚Äú xn ¬¥ fpxnq
f 1pxnq.
This is a monoid (namely N, the free monoid on one generator) acting on a set (namely
R).
However, Newton‚Äôs method can get into trouble. For example at a critical point it
causes division by 0, and sometimes it can oscillate or overshoot. In these cases we want
to perturb a bit to the left or right. To have these actions available to us, we would add
‚Äúperturb‚Äù elements to our monoid. Now we have more available actions at any point,
but at the cost of using a more complicated monoid.
When publishing an experimental Ô¨Ånding, there may be some deep methodological
questions that are not considered suitably important to mention. For example, one may
not publish the kind solution Ô¨Ånding method (e.g. Newton‚Äôs method or Runge-Kutta)
that was used, nor the set of available actions, e.g. what kinds of perturbation were used
by the researcher. However, these may actually inÔ¨Çuence the reproducibility of results.

76
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
By using a language such as that of monoid actions, we can align our data model with
our unspoken assumptions about how functions are analyzed.
‚ô¶‚ô¶
Remark 3.1.2.7. A monoid is useful for understanding how an agent acts on the set of
states of an object, but there is only one kind of action. At any point, all actions are
available. In reality it is often the case that contexts can change and diÔ¨Äerent actions
are available at diÔ¨Äerent times. For example on a computer, the commands available in
one application have no meaning in another. This will get us to categories in the next
chapter.
3.1.2.8
Monoids actions as ologs
If monoids are understood in terms of how they act on sets, then it is reasonable to think
of them in terms of ologs. In fact, the ologs associated to monoids are precisely those
ologs that have exactly one type (and possibly many arrows and commutative diagrams).
Example 3.1.2.9. In this example we show how to associate an olog to a monoid action.
Consider the monoid M generated by the set tu, d, ru, standing for ‚Äúup, down, right‚Äù,
and subject to the relations
ru, ds ‚Äû r s,
rd, us ‚Äû r s,
ru, rs ‚Äú rr, us,
and
rd, rs ‚Äú rr, ds.
We might imagine that M acts on the set of positions for a character in an old video
game. In that case the olog corresponding to this action should look something like the
following:
Given x, a character position, consider the following. We know that x is a 
character position, which when moved up results in a character position, which 
when moved down results in a character position that we‚Äôll call P(x). We also 
know that x is a character position that we‚Äôll call Q(x). Fact: whenever x is a 
character position we will have P(x)=Q(x). Summary: [up, down] = [ ] 
 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved down results in a character position, 
which when moved up results in a character position that we‚Äôll call P(x). We also 
know that x is a character position that we‚Äôll call Q(x). Fact: whenever x is a 
character position we will have P(x)=Q(x). Summary: [down, up] = [ ] 
 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved up results in a character position, which 
when moved right results in a character position that we‚Äôll call P(x). We also 
know that x is a character position, which when moved right results in a 
character position, which when moved up results in a character position that 
we‚Äôll call Q(x). Fact: whenever x is a character position we will have P(x)=Q(x). 
Summary: [up, right] = [right, up] 
 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved down results in a character position, 
which when moved right results in a character position that we‚Äôll call P(x). We 
also know that x is a character position, which when moved right results in a 
character position, which when moved down results in a character position that 
we‚Äôll call Q(x). Fact: whenever x is a character position we will have P(x)=Q(x). 
Summary: [down, right] = [right, down] 
3.1.2.10
Finite state machines
According to Wikipedia, a deterministic Ô¨Ånite state machine is a quintuple pŒ£, S, s0, Œ¥, Fq,
where
1. Œ£ is a Ô¨Ånite non-empty set of symbols, called the input alphabet,
2. S is a Ô¨Ånite, non-empty set, called the state set,
3. Œ¥: Œ£ ÀÜ S √ë S is a function, called the state-transition function, and

3.1. MONOIDS
77
4. s0 P S is an element, called the initial state,
5. F ƒé S is a subset, called the set of Ô¨Ånal states.
In this book we will not worry about the initial state and the set of Ô¨Ånal states,
concerning ourselves more with the interaction via Œ¥ of the alphabet Œ£ on the set S of
states.
Figure 3.1:
A Ô¨Ånite state machine with alphabet Œ£ ‚Äú ta, bu and state set S ‚Äú
tState 0, State 1, State 2u. If pressed, we will make State 0 the initial state and {State
2} the set of Ô¨Ånal states.
The following proposition expresses the notion of Ô¨Ånite state automata in terms of
free monoids and their actions on Ô¨Ånite sets.
Proposition 3.1.2.11. Let Œ£, S be Ô¨Ånite non-empty sets. Giving a function Œ¥: Œ£ÀÜS √ë
S is equivalent to giving an action of the free monoid ListpŒ£q on S.
Proof. By DeÔ¨Ånition 3.1.2.1, we know that function œµ: ListpŒ£q ÀÜ S √ë S constitutes an
action of the monoid ListpŒ£q on the set S if and only if, for all s P S we have œµpr s, sq ‚Äú s,
and for any two elements m, m1 P ListpŒ£q we have œµpm, œµpm1, sqq ‚Äú œµpm ‚Äπ m1, sq, where
m ‚Äπ m1 is the concatenation of lists. Let
A ‚Äú tœµ: ListpŒ£q ÀÜ S √ë S | œµ constitutes an actionu.
We need to prove that there is an isomorphism of sets
œÜ: A ‚Äì
√ù√ë HomSetpŒ£ ÀÜ S, Sq.
Given an element œµ: ListpŒ£qÀÜS √ë S in A, deÔ¨Åne œÜpœµq on an element pœÉ, sq P Œ£ÀÜS by
œÜpœµqpœÉ, sq :‚Äú œµprœÉs, sq, where rœÉs is the one-element list. We now deÔ¨Åne œà: HomSetpŒ£ ÀÜ
S, Sq √ë A.
Given an element f P HomSetpŒ£ ÀÜ S, Sq, deÔ¨Åne œàpfq: ListpŒ£q ÀÜ S √ë S on a pair
pL, sq P ListpŒ£q ÀÜ S, where L ‚Äú rœµ1, . . . , œµns as follows. By induction, if n ‚Äú 0, put
œàpfqpL, sq ‚Äú s; if n ƒõ 1, let L1 ‚Äú rœµ1, . . . , œµn¬¥1s and put œàpfqpL, sq ‚Äú œàpfqpL1, fpœµn, sqq.
One checks easily that œàpfq satisÔ¨Åes the two rules above, making it an action of ListpŒ£q
on S. It is also easy to check that œÜ and œà are mutually inverse, completing the proof.
‚ñ°

78
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
We sum up the idea of this section as follows:
Slogan 3.1.2.12.
‚Äú A Ô¨Ånite state machine is an action of a free monoid on a Ô¨Ånite set. ‚Äù
Exercise 3.1.2.13. Consider the functions œÜ and œà above.
a.) Show that for any f : Œ£ ÀÜ S √ë S, the map œàpfq: ListpŒ£q ÀÜ S √ë S constitutes an
action.
b.) Show that œÜ and œà are mutually inverse functions (i.e. œÜ Àù œà ‚Äú idHompŒ£ÀÜS,Sq and
œà Àù œÜ ‚Äú idA.)
‚ô¶
3.1.3
Monoid action tables
Let M be a monoid generated by the set G ‚Äú tg1, . . . , gmu, and with some relations,
and suppose that Œ±: M ÀÜ S √ë S is an action of M on a set S ‚Äú ts1, . . . , snu. We can
represent the action Œ± using an action table whose columns are the elements of G and
whose rows are the elements of S. In each cell prow, colq, where row P S and col P G,
we put the element Œ±pcol, rowq P S.
Example 3.1.3.1 (Action table). If Œ£ and S are the sets from Figure 3.1, the displayed
action of ListpŒ£q on S would be given by the action table
Action from 3.1
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
(3.2)
Example 3.1.3.2 (Multiplication action table). Every monoid acts on itself by its multi-
plication formula, M ÀÜM √ë M. If G is a generating set for M, we can write the elements
of G as the columns and the elements of M as rows, and call this a multiplication table.
For example, let pN, 1, Àöq denote the multiplicative monoid of natural numbers. The
multiplication table is as follows:
Multiplication of natural numbers
N
0
1
2
3
4
5
¬® ¬® ¬®
0
0
0
0
0
0
0
¬® ¬® ¬®
1
0
1
2
3
4
5
¬® ¬® ¬®
2
0
2
4
6
8
10
¬® ¬® ¬®
3
0
3
6
9
12
15
¬® ¬® ¬®
4
0
4
8
12
16
20
¬® ¬® ¬®
...
...
...
...
...
...
...
...
21
0
21
42
63
84
105
¬® ¬® ¬®
...
...
...
...
...
...
...
...
(3.3)

3.1. MONOIDS
79
Try to understand what is meant by this: ‚Äúapplying column 2 and then column 2 returns
the same thing as applying column 4.‚Äù
In the above table, we were implicitly taking every element of N as a generator (since
we had a column for every natural number).
In fact, there is a smallest generating
set for the monoid pN, 1, Àöq, so that every element of the monoid is a product of some
combination of these generators, namely the primes and 0.
Multiplication of natural numbers
N
0
2
3
5
7
11
¬® ¬® ¬®
0
0
0
0
0
0
0
¬® ¬® ¬®
1
0
2
3
5
7
11
¬® ¬® ¬®
2
0
4
6
10
14
22
¬® ¬® ¬®
3
0
6
9
15
21
33
¬® ¬® ¬®
4
0
8
12
20
28
44
¬® ¬® ¬®
...
...
...
...
...
...
...
...
21
0
42
63
105
147
231
¬® ¬® ¬®
...
...
...
...
...
...
...
...
Exercise 3.1.3.3. Let N be the additive monoid of natural numbers, let S ‚Äú t0, 1, 2, . . . , 11u,
and let ¬®: NÀÜS √ë S be the action given in Example 3.1.2.3. Using a nice small generating
set for the monoid, write out the corresponding action table.
‚ô¶
3.1.4
Monoid homomorphisms
A monoid pM, e, ‚Äπq involves a set, an identity element, and a multiplication formula. For
two monoids to be comparable, their sets, their identity elements, and their multiplication
formulas should be appropriately comparable. For example the additive monoids N and
Z should be comparable because N ƒé Z is a subset, the identity elements in both cases
are the same e ‚Äú 0, and the multiplication formulas are both integer addition.
DeÔ¨Ånition 3.1.4.1. Let M :‚Äú pM, e, ‚Äπq and M1 :‚Äú pM 1, e1, ‚Äπ1q be monoids. A monoid
homomorphism f from M to M1, denoted f : M √ë M1, is a function f : M √ë M 1
satisfying two conditions:
‚Ä¢ fpeq ‚Äú e1, and
‚Ä¢ fpm1 ‚Äπ m2q ‚Äú fpm1q ‚Äπ1 fpm2q, for all m1, m2 P M.
The set of monoid homomorphisms from M to M1 is denoted HomMonpM, M1q.
Example 3.1.4.2 (From N to Z). As stated above, the inclusion map i: N √ë Z induces a
monoid homomorphism pN, 0, `q √ë pZ, 0, `q because ip0q ‚Äú 0 and ipn1 ` n2q ‚Äú ipn1q `
ipn2q.
Let i5 : N √ë Z denote the function i5pnq ‚Äú 5 Àö n, so i5p4q ‚Äú 20. This is also a monoid
homomorphism because i5p0q ‚Äú 5Àö0 ‚Äú 0 and i5pn1`n2q ‚Äú 5Àöpn1`n2q ‚Äú 5Àön1`5Àön2 ‚Äú
i5pn1q ` i5pn2q.
Application 3.1.4.3. Let R ‚Äú ta, c, g, uu and let T ‚Äú R3, the set of triplets in R. Let
R ‚Äú ListpRq be the free monoid on R and let T ‚Äú ListpTq denote the free monoid on

80
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
T. There is a monoid homomorphism F : T √ë R given by sending t ‚Äú pr1, r2, r3q to the
list rr1, r2, r3s. 5
If A be the set of amino acids and A ‚Äú ListpAq the free monoid on A, the process
of translation gives a monoid homomorphism G: T √ë A, turning a list of RNA triplets
into a polypeptide. But how do we go from a list of RNA nucleotides to a polypeptide?
The answer is that there is no good way to do this mathematically. So what is going
wrong?
The answer is that there should not be a monoid homomorphism R √ë A because not
all sequences of nucleotides produce a polypeptide; for example if the sequence has only
two elements, it does not code for a polypeptide. There are several possible remedies to
this problem. One is to take the image of F, which is a submonoid R1 ƒé R. It is not
hard to see that there is a monoid homomorphism F 1 : R1 √ë T , and we can compose it
with G to get our desired monoid homomorphism G Àù F 1 : R1 √ë A. 6
‚ô¶‚ô¶
Example 3.1.4.4. Given any monoids M there is a unique monoid homomorphism from
M to the trivial monoid 1 (see Example 3.1.1.10). There is also a unique homomorphism
1 √ë M. These facts together have an upshot: between any two monoids M and M1 we
can always construct a homomorphism
M
!
√ù√ù√ù√ë 1
!
√ù√ù√ù√ë M1
which we call the trivial homomorphism M √ë M1. A morphism M √ë M1 that is not
trivial is called a nontrivial homomorphism.
Proposition 3.1.4.5. Let M ‚Äú pZ, 0, `q and M1 ‚Äú pN, 0, `q. The only monoid homo-
morphism f : M √ë M1 sends every element m P Z to 0 P N.
Proof. Let f : M √ë M1 be a monoid homomorphism, and let n ‚Äú fp1q and n1 ‚Äú fp¬¥1q
in N. Then we know that since 0 ‚Äú 1`p¬¥1q in Z we must have 0 ‚Äú fp0q ‚Äú fp1`p¬¥1qq ‚Äú
fp1q ` fp¬¥1q ‚Äú n ` n1 P N. But if n ƒõ 1 then this is impossible, so n ‚Äú 0. Similarly
n1 ‚Äú 0. Any element m P Z can be written m ‚Äú 1`1`¬® ¬® ¬®`1 or as m ‚Äú ¬¥1`¬¥1`¬® ¬® ¬®`¬¥1,
and it is easy to see that fp1q ` fp1q ` ¬® ¬® ¬® ` fp1q ‚Äú 0 ‚Äú fp¬¥1q ` fp¬¥1q ` ¬® ¬® ¬® ` fp¬¥1q.
Therefore, fpmq ‚Äú 0 for all m P Z.
‚ñ°
Exercise 3.1.4.6. For any m P N let im : N √ë Z be the function impnq ‚Äú m Àö n. All
such functions are monoid homomorphisms pN, 0, `q √ë pZ, 0, `q. Do any monoid homo-
morphisms pN, 0, `q √ë pZ, 0, `q not come in this way? For example, what about using
n √û√ë 5 Àö n ¬¥ 1 or n √û√ë n2, or some other function?
‚ô¶
Exercise 3.1.4.7. Let M :‚Äú pN, 0, `q be the additive monoid of natural numbers, let N ‚Äú
pRƒõ0, 0, `q be the additive monoid of nonnegative real numbers, and let P :‚Äú pRƒÖ0, 1, Àöq
be the multiplicitive monoid of positive real numbers. Can you think of any nontrivial
monoid homomorphisms of the following sorts:
M √ë N,
M √ë P,
N √ë P,
N √ë M,
P √ë N?
‚ô¶
5More
precisely,
the
monoid
homomorphism
F
sends
a
list
rt1, t2, . . . , tns
to
the
list
rr1,1, r1,2, r1,3, r2,1, r2,2, r2,3, . . . , rn,1, rn,2, rn,3s, where for each 0 ƒè i ƒè n we have ti ‚Äú pri,1, ri,2, ri,3q.
6Adding stop-codons to the mix we can handle more of R, e.g. sequences that don‚Äôt have a multiple-
of-three many nucleotides.

3.1. MONOIDS
81
3.1.4.8
Homomorphisms from free monoids
Recall that pN, 0, `q is the free monoid on one generator. It turns out that for any other
monoid M ‚Äú pM, e, ‚Äπq, the set of monoid homomorphisms N √ë M is in bijection with
the set M. This is a special case (in which G is a set with one element) of the following
proposition.
Proposition 3.1.4.9. Let G be a set, let FpGq :‚Äú pListpGq, r s, ``q be the free monoid
on G, and let M :‚Äú pM, e, ‚Äπq be any monoid. There is a natural bijection
HomMonpFpGq, Mq ‚Äì
√ù√ë HomSetpG, Mq.
Proof. We provide a function œÜ: HomMonpFpGq, Mq √ë HomSetpG, Mq and a function
œà: HomSetpG, Mq √ë HomMonpFpGq, Mq and show that they are mutually inverse. Let
us Ô¨Årst construct œÜ. Given a monoid homomorphism f : FpGq √ë M, we need to provide
œÜpfq: G √ë M. Given any g P G we deÔ¨Åne œÜpfqpgq :‚Äú fprgsq.
Now let us construct œà. Given p: G √ë M, we need to provide œàppq: ListpGq √ë M
such that œàppq is a monoid homomorphism. For a list L ‚Äú rg1, . . . , gns P ListpGq, deÔ¨Åne
œàppqpLq :‚Äú ppg1q ‚Äπ ¬® ¬® ¬® ‚Äπ ppgnq P M. In particular, œàppqpr sq ‚Äú e. It is not hard to see
that this is a monoid homomorphism. It is also easy to see that œÜ Àù œàppq ‚Äú p for all
p P HomSetpG, Mq. We show that œà Àù œÜpfq ‚Äú f for all f P HomMonpFpGq, Mq. Choose
L ‚Äú rg1, . . . , gns P ListpGq. Then
œàpœÜfqpLq ‚Äú pœÜfqpg1q ‚Äπ ¬® ¬® ¬® ‚Äπ pœÜfqpgnq ‚Äú frg1s ‚Äπ ¬® ¬® ¬® ‚Äπ frgns ‚Äú fprg1, . . . , gnsq ‚Äú fpLq.
‚ñ°
Exercise 3.1.4.10. Let G ‚Äú ta, bu, let M :‚Äú pM, e, ‚Äπq be any monoid, and let f : G √ë M
be given by fpaq ‚Äú m and fpbq ‚Äú n, where m, n P M.
If œà: HomSetpG, Mq √ë
HomMonpFpGq, Mq is the function from the proof of Proposition 3.1.4.9 and L ‚Äú
ra, a, b, a, bs, what is œàpfqpLq ?
‚ô¶
3.1.4.11
Restriction of scalars
A monoid homomorphism f : M √ë M 1 (see DeÔ¨Ånition 3.1.4.1) ensures that the elements
of M have a reasonable interpretation in M 1; they act the same way over in M 1 as
they did back home in M. If we have such a homomorphism f and we have an action
Œ±: M 1 ÀÜ S √ë S of M 1 on a set S, then we have a method for allowing M to act on S as
well. Namely, we take an element of M, send it over to M 1, and act on S. In terms of
functions, we compose Œ± with the function f ÀÜ idS : M ÀÜ S √ë M 1 ÀÜ S, to get a function
we‚Äôll denote
‚àÜfpŒ±q: M ÀÜ S √ë S.
After Proposition 3.1.4.12 we will know that ‚àÜfpŒ±q is indeed a monoid action, and we
say that it is given by restriction of scalars along f.
Proposition 3.1.4.12. Let M :‚Äú pM, e, ‚Äπq and M1 :‚Äú pM 1, e1, ‚Äπ1q be monoids, f : M √ë
M1 a monoid homomorphism, S a set, and suppose that Œ±: M 1 ÀÜ S √ë S is an action of
M1 on S. Then ‚àÜfpŒ±q: M ÀÜ S √ë S, deÔ¨Åned as above, is a monoid action as well.

82
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Proof. Refer to Remark 3.1.2.2; we assume Œ± is a monoid action and want to show that
‚àÜfpŒ±q is too. We have ‚àÜfpŒ±qpe, sq ‚Äú Œ±pfpeq, sq ‚Äú Œ±pe1, sq ‚Äú s. We also have
‚àÜfpŒ±qpm, ‚àÜfpŒ±qpn, sqq ‚Äú Œ±pfpmq, Œ±pfpnq, sqq ‚Äú Œ±pfpmq ‚Äπ1 fpnq, sq
‚Äú Œ±pfpm ‚Äπ nq, sq
‚Äú ‚àÜfpŒ±qpm ‚Äπ n, sq.
‚ñ°
Example 3.1.4.13. Let N and Z denote the additive monoids of natural numbers and
integers, respectively, and let i: N √ë Z be the inclusion, which we saw in Example
3.1.4.2 is a monoid homomorphism. There is an action Œ±: Z ÀÜ R √ë R of the monoid
Z on the set R of real numbers, given by Œ±pn, xq ‚Äú n ` x. Clearly, this action works
just as well if we restrict our scalars to N ƒé Z, allowing ourselves only to add natural
numbers to reals. The action ‚àÜiŒ±: N ÀÜ R √ë R is given on pn, xq P N ÀÜ R by ‚àÜiŒ±pn, xq ‚Äú
Œ±pipnq, xq ‚Äú Œ±pn, xq ‚Äú n ` x, just as expected.
Example 3.1.4.14. Suppose that V is a complex vector space. In particular, this means
that the monoid C of complex numbers (under multiplication) acts on the elements of V .
If i: R √ë C is the inclusion of the real line inside C, then i is a monoid homomorphism.
Restriction of scalars in the above sense turns V into a real vector space, so the name
‚Äúrestriction of scalars‚Äù is apt.
Exercise 3.1.4.15. Let N be the free monoid on one generator, let Œ£ ‚Äú ta, bu, and let
S ‚Äú tState 0, State 1, State 2u. Consider the map of monoids f : N √ë ListpŒ£q given by
sending 1 √û√ë ra, b, bs. The monoid action Œ±: ListpŒ£q ÀÜ S √ë S given in Example 3.1.3.1
can be transformed by restriction of scalars along f to an action ‚àÜfpŒ±q of N on S. Write
down its action table.
‚ô¶
3.2
Groups
Groups are monoids in which every element has an inverse. If we think of these structures
in terms of how they act on sets, the diÔ¨Äerence between groups and monoids is that the
action of every group element can be undone. One way of thinking about groups is in
terms of symmetries. For example, the rotations and reÔ¨Çections of a square form a group.
Another way to think of the diÔ¨Äerence between monoids and groups is in terms of
time. Monoids are likely useful in thinking about diÔ¨Äusion, in which time plays a role and
things cannot be undone. Groups are more likely useful in thinking about mechanics,
where actions are time-reversible.
3.2.1
DeÔ¨Ånition and examples
DeÔ¨Ånition 3.2.1.1. Let pM, e, ‚Äπq be a monoid. An element m P M is said to have an
inverse if there exists an m1 P M such that mm1 ‚Äú e and m1m ‚Äú e. A group is a monoid
pM, e, ‚Äπq in which every element m P M has an inverse.
Proposition 3.2.1.2. Suppose that M :‚Äú pM, e, ‚Äπq is a monoid and let m P M be an
element. Then m has at most one inverse. 7
7If M is a group then every element m has exactly one inverse.

3.2. GROUPS
83
Proof. Suppose that both m1 and m2 are inverses of m; we want to show that m1 ‚Äú m2.
This follows by the associative law for monoids:
m1 ‚Äú m1pmm2q ‚Äú pm1mqm2 ‚Äú m2.
‚ñ°
Example 3.2.1.3. The additive monoid pN, 0, `q is not a group because none of its ele-
ments are invertible, except for 0. However, the monoid of integers pZ, 0, `q is a group.
The monoid of clock positions from Example 3.1.1.25 is also a group. For example the
inverse of Q5 is Q7 because Q5 ‚Äπ Q7 ‚Äú e ‚Äú Q7 ‚Äπ Q5.
Example 3.2.1.4. Consider a square centered at the origin in R2. It has rotational and
mirror symmetries. There are eight of these, which we denote
te, œÅ, œÅ2, œÅ3, œÜ, œÜœÅ, œÜœÅ2, œÜœÅ3u,
where œÅ stands for 90Àù counterclockwise rotation and œÜ stands for horizontal-Ô¨Çip (across
the vertical axis). So relations include œÅ4 ‚Äú e, œÜ2 ‚Äú e, and œÅ3œÜ ‚Äú œÜœÅ.
Example 3.2.1.5. The set of 3ÀÜ3 matrices can be given the structure of a monoid, where
the identity element is the 3 ÀÜ 3 identity matrix, the multiplication is matrix multiplica-
tion. The subset of invertible matrices forms a group, called the general linear group of
dimension 3 and denoted GL3. Inside of GL3 is the so-called orthogonal group, denoted
O3, of matrices M such that M ¬¥1 ‚Äú M J. These matrices correspond to symmetries of
the sphere centered at the origin.
Another interesting group is the Euclidean group Ep3q which consists of all isometries
of R3, i.e. all functions R3 √ë R3 that preserve distances.
Application 3.2.1.6. In crystallography one is often concerned with the symmetries that
arise in the arrangement A of atoms in a molecule. To think about symmetries in terms of
groups, we Ô¨Årst deÔ¨Åne an atom-arrangement to be a Ô¨Ånite subset i: A ƒé R3. A symmetry
in this case is an isometry of R3 (see Example 3.2.1.5), say f : R3 √ë R3 such that there
exists a dotted arrow making the diagram below commute:
A
/
i 
A
i
R3
f
/ R3
That is, it‚Äôs an isometry of R3 such that each atom of A is sent to a position currently
occupied by an atom of A. It is not hard to show that the set of such isometries forms
a group, called the space group of the crystal.
‚ô¶‚ô¶
Exercise 3.2.1.7. Let S be a Ô¨Ånite set. A permutation of S is an isomorphism f : S
‚Äì
√ù√ë S.

84
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
a.) Come up with an identity, and a multiplication formula, such that the set of permu-
tations of S forms a monoid.
b.) Is it a group?
‚ô¶
Exercise 3.2.1.8. In Exercise 3.1.1.27 you classiÔ¨Åed the cyclic monoids. Which of them
are groups?
‚ô¶
DeÔ¨Ånition 3.2.1.9 (Group action). Let pG, e, ‚Äπq be a group and S a set. An action of
G on S is a function √º: G ÀÜ S √ë S such that for all s P S and g, g1 P G, we have
‚Ä¢ e √º s ‚Äú s and
‚Ä¢ g √º pg1 √º sq ‚Äú pg ‚Äπ g1q √º s.
In other words, considering G as a monoid, it is an action in the sense of DeÔ¨Ånition
3.1.2.1.
Example 3.2.1.10. When a group acts on a set, it has the character of symmetry. For
example, consider the group whose elements are angles Œ∏. This group may be denoted
Up1q and is often formalized as the unit circle in C of complex numbers z ‚Äú a ` bi
such that |z| ‚Äú a2 ` b2 ‚Äú 1. The set of such points is given the structure of a group
pUp1q, e, ‚Äπq by deÔ¨Åning the identity element to be e :‚Äú 1 ` 0i and the group law to be
complex multiplication. But for those unfamiliar with complex numbers, this is simply
angle addition where we understand that 360Àù ‚Äú 0Àù. If Œ∏1 ‚Äú 190Àù and Œ∏2 ‚Äú 278Àù, then
Œ∏1 ‚Äπ Œ∏2 ‚Äú 468Àù ‚Äú 108Àù. In the language of complex numbers, z ‚Äú eiŒ∏.
The group Up1q acts on any set that we can picture as having rotational symmetry
about a Ô¨Åxed axis, such as the earth around the north-south axis. We will deÔ¨Åne S ‚Äú
tpx, y, zq P R3 | x2 ` y2 ` z2 ‚Äú 1u, the unit sphere, and understand the rotational action
of Up1q on S.
We Ô¨Årst show that Up1q acts on R3 by Œ∏ √º px, y, zq ‚Äú px cos Œ∏ ` y sin Œ∏, ¬¥x sin Œ∏ `
y cos Œ∏, zq, or with matrix notation as
Œ∏ √º px, y, zq :‚Äú px, y, zq
¬®
Àù
cospŒ∏q
¬¥ sinpŒ∏q
0
sinpŒ∏q
cospŒ∏q
0
0
0
1
Àõ
‚Äö
Trigonometric identities ensure that this is indeed an action.

3.2. GROUPS
85
In terms of action tables, we would need inÔ¨Ånitely many columns to express this
action. Here is a sample
Action of Up1q on R3
R3
Œ∏ ‚Äú 45Àù
Œ∏ ‚Äú 90Àù
Œ∏ ‚Äú 100Àù
(0,0,0)
(0,0,0)
(0,0,0)
(0,0,0)
(1,0,0)
(.71,.71,0)
(0,1,0)
(-.17,.98,0)
(0,1,-4.2)
(-.71,.71,-4.2)
(-1,0,-4.2)
(-.98,-.17,-4.2)
(3,4,2)
(4.95,.71,2)
(-4,3,2)
(3.42,-3.65,2)
...
...
...
...
Finally, we are looking to see that the action preserves length so that if px, y, zq P S
then Œ∏ √º px, y, zq P S; this way we will have conÔ¨Årmed that Up1q indeed acts on S. The
calculation begins by assuming x2 ` y2 ` z2 ‚Äú 1 and checks
px cos Œ∏ ` y sin Œ∏q2 ` p¬¥x sin Œ∏ ` y cos Œ∏q2 ` z2 ‚Äú x2 ` y2 ` z2 ‚Äú 1.
Exercise 3.2.1.11. Let X be a set and consider the group of permutations of X (see
Exercise 3.2.1.7), which we will denote Œ£X. Find a canonical action of Œ£X on X.
‚ô¶
DeÔ¨Ånition 3.2.1.12. Let G be a group acting on a set X. For any point x P X, the
orbit of x, denoted Gx, is the set
Gx :‚Äú tx1 P X | Dg P G such that gx ‚Äú x1u.
Application 3.2.1.13. Let S be the surface of the earth, understood as a sphere, and let
G ‚Äú Up1q be the group of angles acting on S as in Example 3.2.1.10. The orbit of any
point p ‚Äú px, y, zq P S is the set of points on the same latitude line as p.
One may also consider a small band around the earth, i.e. the set A ‚Äú tpx, y, zq | 1.0 ƒè
x2 ` y2 ` z2 ƒè 1.05u. The action of Up1q √º S extends to an action Up1q √º A. The
orbits are latitude-lines-at-altitude. A simplifying assumption in climatology may be
given by assuming that Up1q acts on all currents in the atmosphere in an appropriate
sense. That way, instead of considering movement within the whole space A, we only
allow movement that behaves the same way throughout each orbit of the group action.
‚ô¶‚ô¶
Exercise 3.2.1.14.
a.) Consider the Up1q action on R3 given in Example 3.2.1.10. Describe the set of orbits
of this action.
b.) What are the orbits of the action of the permutation group Œ£t1,2,3u on the set t1, 2, 3u?
(See Exercise 3.2.1.11.)
‚ô¶
Exercise 3.2.1.15. Let G be a group and X a set on which G acts by √º: G ÀÜ X √ë X.
Is ‚Äúbeing in the same orbit‚Äù an equivalence relation on X?
‚ô¶
DeÔ¨Ånition 3.2.1.16. Let G and G1 be groups. A group homomorphism f : G √ë G1 is
deÔ¨Åned to be a monoid homomorphism G √ë G1, where G and G1 are being regarded as
monoids in accordance with DeÔ¨Ånition 3.2.1.1.

86
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
3.3
Graphs
In this course, unless otherwise speciÔ¨Åed, whenever we speak of graphs we are not talking
about curves in the plane, such as parabolas, or pictures of functions generally. We are
speaking of systems of vertices and arrows.
We will take our graphs to be directed, meaning that every arrow points from a vertex
to a vertex; rather than merely connecting vertices, arrows will have direction. If a and
b are vertices, there can be many arrows from a to b, or none at all. There can be arrows
from a to itself. Here is the formal deÔ¨Ånition in terms of sets and functions.
3.3.1
DeÔ¨Ånition and examples
DeÔ¨Ånition 3.3.1.1. A graph G consists of a sequence G :‚Äú pV, A, src, tgtq where
‚Ä¢ V is a set, called the set of vertices of G (singular:vertex),
‚Ä¢ A is a set, called the set of arrows of G,
‚Ä¢ src: A √ë V is a function, called the source function for G, and
‚Ä¢ tgt: A √ë V is a function, called the target function for G.
Given an arrow a P A we refer to srcpaq as the source vertex of a and to tgtpaq as the
target vertex of a.
To draw a graph, Ô¨Årst draw a dot for every element of V . Then for every element
a P A, draw an arrow connecting dot srcpaq to dot tgtpaq.
Example 3.3.1.2 (Graph). Here is a picture of a graph G ‚Äú pV, A, src, tgtq:
G :‚Äú
‚Äöv
f
/ ‚Äöw
h
=
g
#
‚Äöx
‚Äöy
i

j
#
‚Äöz
k
a
(3.4)
We have V ‚Äú tv, w, x, y, zu and A ‚Äú tf, g, h, i, j, ku. The source and target functions
src, tgt: A √ë V can be captured in the table to the left below:
A
src
tgt
f
v
w
g
w
x
h
w
x
i
y
y
j
y
z
k
z
y
V
v
w
x
y
z
In fact, all of the data of the graph G is captured in the two tables above‚Äîtogether they
tell us the sets A and V and the functions src and tgt.

3.3. GRAPHS
87
Example 3.3.1.3. Every olog has an underlying graph. The additional information in an
olog has to do with which pairs of paths are declared equivalent, as well as text that has
certain English-readability rules.
Exercise 3.3.1.4. a.) Draw the graph corresponding to the following tables:
A
src
tgt
f
v
w
g
v
w
h
v
w
i
x
w
j
z
w
k
z
z
V
u
v
w
x
y
z
b.) Write down two tables, as above, corresponding to the following graph:
a‚Äö
1
/ b‚Äö
2
/
3
 c‚Äö
4
_
5
/ d‚Äö
e‚Äö
f‚Äö
6
o
7
/ g‚Äö
8
B
‚ô¶
Exercise 3.3.1.5. Let A ‚Äú t1, 2, 3, 4, 5u and B ‚Äú ta, b, cu. Draw them and choose an
arbitrary function f : A √ë B and draw it.
Let A \ B be the coproduct of A and
B (DeÔ¨Ånition 2.4.2.1) and let A
i1
√ù√ë A \ B
i2
√ê√ù B be the two inclusions.
Consider
the two functions src, tgt: A √ë A \ B, where src ‚Äú i1 and tgt is the composition
A
f√ù√ë B
i2
√ù√ë A \ B. Draw the associated graph pA \ B, A, src, tgtq.
‚ô¶
Exercise 3.3.1.6.
a.) Let V be a set. Suppose we just draw the elements of V as vertices and have no
arrows between them. Is this a graph?
b.) Given V , is there any other ‚Äúcanonical‚Äù or somehow automatic non-random proce-
dure for generating a graph with those vertices?
‚ô¶
Example 3.3.1.7. Recall from Construction 2.5.2.5 the notion of bipartite graph, which
we deÔ¨Åned to be a span (i.e. pair of functions, see DeÔ¨Ånition 2.5.2.1) A
f√ê√ù R
g√ù√ë B. Now
that we have a formal deÔ¨Ånition of graph, we might hope that bipartite graphs Ô¨Åt in,
and they do. Let V ‚Äú A \ B and let i: A √ë V and j : B √ë V be the inclusions. Let
src ‚Äú i Àù f : R √ë V and let tgt ‚Äú j Àù g: R √ë V be the composites.
A
i
 
R
src
'
tgt
7
f
?
g

V
B
j
>

88
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Then pV, R, src, tgtq is a graph that would be drawn exactly as we speciÔ¨Åed the drawing
of spans in Construction 2.5.2.5.
Example 3.3.1.8. Let n P N be a natural number. The chain graph of length n, denoted
rns is the graph depicted here:
0‚Äö
/ 1‚Äö
/ ¬® ¬® ¬®
/ n‚Äö
In general rns has n arrows and n ` 1 vertices. In particular, when n ‚Äú 0 we have that
r0s is the graph consisting of a single vertex and no arrows.
Example 3.3.1.9. Let G ‚Äú pV, A, src, tgtq be a graph; we want to spread it out over
discrete time, so that each arrow does not occur within a given time-slice but instead
over a quantum unit of time.
Let N ‚Äú pN, N, n √û√ë n, n √û√ë n ` 1q be the graph depicted
0‚Äö
0
/ 1‚Äö
1
/ 2‚Äö
2
/ ¬® ¬® ¬®
When we get to limits in a category, we will understand that products can be taken in
the category of graphs (see Example 4.5.1.5), and N ÀÜ G will make sense. For now, we
construct it by hand.
Let TpGq ‚Äú pV ÀÜ N, A ÀÜ N, src1, tgt1q be a new graph, where for a P A and n P N we
have src1pa, nq :‚Äú psrcpaq, nq and tgt1pa, nq ‚Äú ptgtpaq, n ` 1q. This may be a bit much to
swallow, so try to simply understand what is being done in the following example.
Let G be the graph drawn below
a‚Äö
f

g 
b‚Äö
Then TpGq will be the graph
a0‚Äö
f0
/
g0

a1‚Äö
f1
/
g1

a2‚Äö
f2
/
g2

¬® ¬® ¬®
b0‚Äö
b1‚Äö
b2‚Äö
¬® ¬® ¬®
As you can see, f-arrows still take a‚Äôs to a‚Äôs and g-arrows still take a‚Äôs to b‚Äôs, but they
always march forward in time.
Exercise 3.3.1.10. Let G be the graph depicted below:
a‚Äö
w
%
x
:
b‚Äö
y
e
z
d
Draw (using ellipses ‚Äú¬® ¬® ¬® ‚Äù if necessary) the graph TpGq deÔ¨Åned in Example 3.3.1.9.
‚ô¶

3.3. GRAPHS
89
Exercise 3.3.1.11. Consider the inÔ¨Ånite graph G ‚Äú pV, A, src, tgtq depicted below,
...
...
...
p0, 2q
/
O
p1, 2q
/
O
p2, 2q
/
O
¬® ¬® ¬®
p0, 1q
/
O
p1, 1q
/
O
p2, 1q
/
O
¬® ¬® ¬®
p0, 0q
/
O
p1, 0q
/
O
p2, 0q
/
O
¬® ¬® ¬®
a.) Write down the sets A and V .
b.) What are the source and target function A √ë V ?
‚ô¶
Exercise 3.3.1.12. A graph is a pair of functions A √ë V . This sets up the notion of
equalizer and coequalizer (see DeÔ¨Ånitions 2.5.3.1 and 2.6.3.1).
a.) What feature of a graph is captured by the equalizer of its source and target func-
tions?
b.) What feature of a graph is captured by the coequalizer of its source and target
functions?
‚ô¶
3.3.2
Paths in a graph
We all know what a path in a graph is, especially if we understand that a path must
always follow the direction of arrows. The following deÔ¨Ånition makes this idea precise.
In particular, one can have paths of any Ô¨Ånite length n P N, even length 0 or 1. Also,
we want to be able to talk about the source vertex and target vertex of a path, as well
as concatenation of paths.
DeÔ¨Ånition 3.3.2.1. Let G ‚Äú pV, A, src, tgtq be a graph.
A path of length n in G,
denoted p P Pathpnq
G
is a head-to-tail sequence
p ‚Äú pv0
a1
√ù√ë v1
a2
√ù√ë v2
a3
√ù√ë . . . an
√ù√ù√ë vnq
(3.5)
of arrows in G, which we denote by v0a1a2 . . . an. In particular we have canonical iso-
morphisms Pathp1q
G ‚Äì A and Pathp0q
G ‚Äì V ; we refer to the path of length 0 on vertex v
as the trivial path on v and denote it simply by v. We denote by PathG the set of paths
in G,
PathG :‚Äú
ƒè
nPN
Pathpnq
G .
Every path p P PathG has a source vertex and a target vertex, and we may denote these
by src, tgt: PathG √ë V . If p is a path with srcppq ‚Äú v and tgtppq ‚Äú w, we may denote

90
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
it by p: v √ë w. Given two vertices v, w P V , we write PathGpv, wq to denote the set of
all paths p: v √ë w.
There is a concatenation operation on paths. Given a path p: v √ë w and q: w √ë x,
we deÔ¨Åne the concatenation, denoted pq: v √ë x in the obvious way. If p ‚Äú va1, a2 . . . am
and q ‚Äú wb1b2 . . . bn then pq ‚Äú va1 . . . amb1 . . . bn. In particular, if p (resp. r) is the
trivial path on vertex v (resp. vertex w) then for any path q: v √ë w, we have pq ‚Äú q
(resp. qr ‚Äú q).
Example 3.3.2.2. In Diagram (3.4), page 86, there are no paths from v to y, one path
(f) from v to w, two paths (fg and fh) from v to x, and inÔ¨Ånitely many paths
tyip1pjkqq1 ¬® ¬® ¬® ipnpjkqqn | n, p1, q1, . . . , pn, qn P Nu
from y to y. There are other paths as well, including the Ô¨Åve trivial paths.
Exercise 3.3.2.3. How many paths are there in the following graph?
1‚Äö
f
/ 2‚Äö
g
/ 3‚Äö
‚ô¶
Exercise 3.3.2.4. Let G be a graph and consider the set PathG of paths in G. Suppose
someone claimed that there is a monoid structure on the set PathG, where the multipli-
cation formula is given by concatenation of paths. Are they correct? Why or why not?
Hint: what should be the identity element?
‚ô¶
3.3.3
Graph homomorphisms
A graph pV, A, src, tgtq involves two sets and two functions. For two graphs to be com-
parable, their two sets and their two functions should be appropriately comparable.
DeÔ¨Ånition 3.3.3.1. Let G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q be graphs. A
graph homomorphism f from G to G1, denoted f : G √ë G1, consists of two functions
f0 : V √ë V 1 and f1 : A √ë A1 such that the two diagrams below commute:
A
f1
/
src

A1
src1

V
f0
/ V 1
A
f1
/
tgt

A1
tgt1

V
f0
/ V 1
(3.6)
Remark 3.3.3.2. The above conditions (3.6) may look abstruse at Ô¨Årst, but they encode
a very important idea, roughly stated ‚Äúarrows are bound to their vertices‚Äù. Under a map
of graphs G √ë G1 , one cannot Ô¨Çippantly send an arrow of G any old arrow of G1: it
must still connect the vertices it connected before. Below is an example of a mapping
that does not respect this condition: a connects 1 and 2 before, but not after:
1‚Äö
a
/ 2‚Äö
1√û√ë11,2√û√ë21,a√û√ëa1
/
11
‚Äö
21
‚Äö
a1
/ 31
‚Äö
The commutativity of the diagrams in (3.6) is exactly what is needed to ensure that
arrows are handled in the expected way by a proposed graph homomorphism.

3.3. GRAPHS
91
Example 3.3.3.3 (Graph homomorphism). Let G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q
be the graphs drawn to the left and right (respectively) below:
1‚Äö
a
/
d

c

2‚Äö
b
/ 3‚Äö
4‚Äö
5‚Äö
e
/ 6‚Äö
1 √û√ë 11, 2 √û√ë 21,
3 √û√ë 11, 4 √û√ë 41,
5 √û√ë 51, 6 √û√ë 51
/
11
‚Äö
w
/
y 
21
‚Äö
x
o
41
‚Äö
51
‚Äö
z

(3.7)
The colors indicate our choice of function f0 : V √ë V 1. Given that choice, condition (3.6)
imposes in this case that there is a unique choice of graph homomorphism f : G √ë G1.
Exercise 3.3.3.4.
a.) Where are a, b, c, d, e sent under f1 : A √ë A1 in Diagram (3.7)?
b.) Choose a couple elements of A and check that they behave as speciÔ¨Åed by Diagram
(3.6).
‚ô¶
Exercise 3.3.3.5. Let G be a graph, let n P N be a natural number, and let rns be the
chain graph of length n, as in Example 3.3.1.8. Is a path of length n in G the same thing
as a graph homomorphism rns √ë G, or are there subtle diÔ¨Äerences? More precisely, is
there always an isomorphism between the set of graph homomorphisms rns √ë G and the
set Pathpnq
G
of length-n paths in G?
‚ô¶
Exercise 3.3.3.6. Given a morphism of graphs f : G √ë G1, there an induced function
Pathpfq: PathpGq √ë PathpG1q.
a.) Is it the case that for every n P N, the function Pathpfq carries PathpnqpGq to
PathpnqpG1q, or can path lengths change in this process?
b.) Suppose that f0 and f1 are injective (meaning no two distinct vertices in G are sent
to the same vertex (respectively for arrows) under f). Does this imply that Pathpfq
is also injective (meaning no two distinct paths are sent to the same path under f)?
c.) Suppose that f0 and f1 are surjective (meaning every vertex in G1 and every arrow
in G1 is in the image of f). Does this imply that Pathpfq is also surjective? Hint: at
least one of the answers to these three questions is ‚Äúno‚Äù.
‚ô¶
Exercise 3.3.3.7. Given a graph pV, A, src, tgtq, let i: A √ë V ÀÜV be function guaranteed
by the universal property for products, as applied to src, tgt: A √ë V . One might hope
to summarize Condition (3.6) for graph homomorphisms by the commutativity of the
single square
A
f1
/
i

A1
i1

V ÀÜ V
f0ÀÜf0
/ V 1 ÀÜ V 1.
(3.8)
Is the commutativity of the diagram in (3.8) indeed equivalent to the commutativity of
the diagrams in (3.6)?
‚ô¶

92
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
3.3.3.8
Binary relations and graphs
DeÔ¨Ånition 3.3.3.9. Let X be a set. A binary relation on X is a subset R ƒé X ÀÜ X.
If X ‚Äú N is the set of integers, then the usual ƒè deÔ¨Ånes a relation on X: given
pm, nq P N ÀÜ N, we put pm, nq P R iÔ¨Äm ƒè n. As a table it might be written as to the
left
m ƒè n
m
n
0
0
0
1
1
1
0
2
1
2
2
2
0
3
...
...
n ‚Äú 5m
m
n
0
0
1
5
2
10
3
15
4
20
5
25
6
30
...
...
|n ¬¥ m| ƒè 1
m
n
0
0
0
1
1
0
1
1
1
2
2
1
2
2
...
...
(3.9)
The middle table is the relation tpm, nq P N ÀÜ N | n ‚Äú 5mu ƒé N ÀÜ N and the right-hand
table is the relation tpm, nq P N ÀÜ N | |n ¬¥ m| ƒè 1u ƒé N ÀÜ N.
Exercise 3.3.3.10. A relation on R is a subset of RÀÜR, and one can indicate such a subset
of the plane by shading. Choose an error bound œµ ƒÖ 0 and draw the relation one might
refer to as ‚Äúœµ-approximation‚Äù. To say it another way, draw the relation ‚Äúx is within œµ of
y‚Äù.
‚ô¶
Exercise 3.3.3.11 (Binary relations to graphs). a.) If R ƒé SÀÜS is a binary relation, Ô¨Ånd
a natural way to make a graph out of it, having vertices S.
b.) What is the set A of arrows?
c.) What are the source and target functions src, tgt: A √ë S?
d.) Take the left-hand table in (3.9) and consider its Ô¨Årst 7 rows (i.e. forget the
...). Draw
the corresponding graph (do you see a tetrahedron?).
e.) Do the same for the right-hand table.
‚ô¶
Exercise 3.3.3.12 (Graphs to binary relations).
a.) If pV, A, src, tgtq is a graph, Ô¨Ånd a natural way to make a binary relation R ƒé V ÀÜ V
out of it.
b.) Take the left-hand graph G from (3.7) and write out the corresponding binary relation
in table form.
‚ô¶
Exercise 3.3.3.13 (Going around the loops). a.) Given a binary relation R ƒé S ÀÜS, you
know from Exercise 3.3.3.11 how to construct a graph out of it, and from Exercise
3.3.3.12 how to make a new binary relation out of that. How does the resulting
relation compare with the original?

3.4. ORDERS
93
b.) Given a graph pV, A, src, tgtq, you know from Exercise 3.3.3.12 how to make a new
binary relation out of it, and from Exercise 3.3.3.11 how to construct a new graph
out of that. How does the resulting graph compare with the original?
‚ô¶
3.4
Orders
People usually think of certain sets as though they just are ordered, e.g. that an order is
ordained by God. For example the natural numbers just are ordered. The letters in the
alphabet just are ordered. But in fact we put orders on sets, and some are simply more
commonly used in culture. One could order the letters in the alphabet by frequency of
use and e would come before a. Given diÔ¨Äerent purposes, we can put diÔ¨Äerent orders
on the same set. For example in Exercise 4.5.1.4 we will give a diÔ¨Äerent ordering on the
natural numbers that is useful in elementary number theory.
In science, we might order the set of materials in two diÔ¨Äerent ways. In the Ô¨Årst, we
consider material A to be ‚Äúbefore‚Äù material B if A is an ingredient or part of B, so water
would be before concrete. But we could also order materials based on how electrically
conductive they are, whereby concrete would be before water. This section is about
diÔ¨Äerent kinds of orders.
3.4.1
DeÔ¨Ånitions of preorder, partial order, linear order
DeÔ¨Ånition 3.4.1.1. Let S be a set and R ƒé S ÀÜ S a binary relation on S; if ps, s1q P R
we will write s ƒè s1. Then we say that R is a preorder if, for all s, s1, s2 P S we have
ReÔ¨Çexivity: s ƒè s, and
Transitivity: if s ƒè s1 and s1 ƒè s2, then s ƒè s2.
We say that R is a partial order if it is a preorder and, in addition, for all s, s1 P S we
have
Antisymmetry: If s ƒè s1 and s1 ƒè s, then s ‚Äú s1.
We say that R is a linear order if it is a partial order and, in addition, for all s, s1 P S
we have
Comparability: Either s ƒè s1 or s1 ƒè s.
We denote such a preorder (or partial order or linear order) by pS, ƒèq.
Exercise 3.4.1.2.
a.) Decide whether the table to the left in Display (3.9) constitutes a linear order.
b.) Show that neither of the other tables are even preorders.
‚ô¶

94
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 3.4.1.3 (Partial order not linear order). We will draw an olog for playing cards.
a dia-
mond
is
"
a heart
is
|
a club
is
#
a spade
is
{
a red
card
is
)
a black
card
is
u
a 4 of di-
amonds
is

is
O
a card
a black
queen
is

is
c
a 4
is
/
a num-
bered
card
is
<
a face
card
is
a
a queen
is
o
(3.10)
We can put a binary relation on the set of boxes here by saying A ƒè B if there is a
path A √ë B. One can see immediately that this is a preorder because length=0 paths
give reÔ¨Çexivity and concatenation of paths gives transitivity. To see that it is a partial
order we only note that there are no loops. But this partial order is not a linear order
because there is no path (in either direction) between, e.g., ‚åúa 4 of diamonds‚åùand ‚åúa
black queen‚åù, so it violates the comparability condition.
Remark 3.4.1.4. Note that olog (3.10) in Example 3.4.1.3 is a good olog in the sense that
given any collection of cards (e.g. choose 45 cards at random from each of 7 decks and
throw them in a pile), they can be classiÔ¨Åed according to the boxes of (3.10) such that
every arrow indeed constitutes a function (which happens to be injective). For example
the arrow ‚åúa heart‚åù
is
√ù√ù√ù√ë ‚åúa red card‚åùis a function from the set of chosen hearts to the
set of chosen red cards.
Example 3.4.1.5 (Preorder not partial order). Every equivalence relation is a preorder
but rarely are they partial orders. For example if S ‚Äú t1, 2u and we put R ‚Äú S ÀÜS, then
this is an equivalence relation. It is a preorder but not a partial order (because 1 ƒè 2
and 2 ƒè 1, but 1 ‚Ä∞ 2, so antisymmetry fails).
Application 3.4.1.6. Classically, we think of time as linearly ordered. A nice model is
pR, ƒèq, the usual linear order on the set of real numbers. But according to the theory
of relativity, there is not actually a single order to the events in the universe. DiÔ¨Äerent
observers correctly observe diÔ¨Äerent orders on the set of events, and so in some sense on
time itself.
‚ô¶‚ô¶
Example 3.4.1.7 (Finite linear orders). Let n P N be a natural number. DeÔ¨Åne a linear
order on the set t0, 1, 2, . . . , nu in the standard way. Pictorially,
rns :‚Äú
0‚Äö
/ 1‚Äö
/ 2‚Äö
/ ¬® ¬® ¬®
/ n‚Äö
Every Ô¨Ånite linear order, i.e. linear order on a Ô¨Ånite set, is of the above form. That
is, though the labels might change, the picture would be the same. We can make this
precise when we have a notion of morphism of orders (see DeÔ¨Ånition 3.4.4.1)

3.4. ORDERS
95
Exercise 3.4.1.8. Let S ‚Äú t1, 2, 3, 4u.
a.) Find a preorder R ƒé S ÀÜ S such that the set R is as small as possible. Is it a partial
order? Is it a linear order?
b.) Find a preorder R1 ƒé S ÀÜS such that the set R1 is as large as possible. Is it a partial
order? Is it a linear order?
‚ô¶
Exercise 3.4.1.9.
a.) List all the preorder relations possible on the set t1, 2u.
b.) For any n P N, how many linear orders exist on the set t1, 2, 3, . . . , nu.
c.) Does your formula work when n ‚Äú 0?
‚ô¶
Remark 3.4.1.10. We can draw any preorder pS, ƒèq as a graph with vertices S and with
an arrow a √ë b if a ƒè b. These are precisely the graphs with the following two properties
for any vertices a, b P S:
1. there is at most one arrow a √ë b, and
2. if there is a path from a to b then there is an arrow a √ë b.
If pS, ƒèq is a partial order then the associated graph has an additional ‚Äúno loops‚Äù prop-
erty,
3. if n P N is an integer with n ƒõ 2 then there are no paths of length n that start
at a and end at a.
If pS, ƒèq is a linear order then there is an additional ‚Äúcomparability‚Äù property,
4. for any two vertices a, b there is an arrow a √ë b or an arrow b √ë a.
Given a graph G, we can create a binary relation ƒè on its set S of vertices as follows.
Say a ƒè b if there is a path in G from a to b. This relation will be reÔ¨Çexive and transitive,
so it is a preorder. If the graph satisÔ¨Åes Property 3 then the preorder will be a partial
order, and if the graph also satisÔ¨Åes Property 4 then the partial order will be a linear
order. Thus graphs give us a nice way to visualize orders.
Slogan 3.4.1.11.
‚Äú A graph generates a preorder: v ƒè w if there is a path v √ë w. This is a
great way to picture a preorder. ‚Äù
Exercise 3.4.1.12. Let G ‚Äú pV, A, src, tgtq be the graph below.
a‚Äö
/ b‚Äö
 c‚Äö
_
/ d‚Äö
e‚Äö
f‚Äö
o
/ g‚Äö
B
In the corresponding pre-order which of the following are true:

96
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
a.) a ƒè b?
b.) a ƒè c?
c.) c ƒè b?
d.) b ‚Äú c?
e.) e ƒè f?
f.) f ƒè d?
‚ô¶
Exercise 3.4.1.13.
a.) Let S ‚Äú t1, 2u. The subsets of S form a partial order; draw the associated graph.
b.) Repeat this for Q ‚Äú H, R ‚Äú t1u, and T ‚Äú t1, 2, 3u.
c.) Do you see n-dimensional cubes?
‚ô¶
DeÔ¨Ånition 3.4.1.14. Let pS, ƒèq be a preorder. A clique is a subset S1 ƒé S such that
for each a, b P S1 one has a ƒè b.
Exercise 3.4.1.15. True or false: a partial order is a preorder that has no cliques. (If
false, is there a ‚Äúnearby‚Äù true statement?)
‚ô¶
Example 3.4.1.16. Let X be a set and R ƒé X ÀÜ X a relation. For elements x, y P X
we will say there is an R-path from x to y if there exists a natural number n P N and
elements x0, x1, . . . , xn such that
1. x0 ‚Äú x,
2. xn ‚Äú y, and
3. for all i P N, if 0 ƒè i ƒè n ¬¥ 1 then pxi, xi`1q P R.
Let R denote the relation where px, yq P R if there exists an R-path from x to y. We call
R the preorder generated by R. We note some facts about R.
Containment. If px, yq P R then px, yq P R. That is R ƒé R.
ReÔ¨Çexivity . For all x P X we have px, xq P R.
Transitivity. For all x, y, z P X, if px, yq P R and py, zq P R then px, zq P R.
To check the containment claim, just use n ‚Äú 1 so x0 ‚Äú x and xn ‚Äú y. To check the
reÔ¨Çexivity claim, use n ‚Äú 0 so x0 ‚Äú x ‚Äú y and condition 3 is vacuously satisÔ¨Åed. To check
transitivitiy, suppose given R-paths x ‚Äú x0, x1, . . . , xn ‚Äú y and y ‚Äú y0, y1, . . . , yp ‚Äú z;
then x ‚Äú x0, x1, . . . xn, y1, . . . , yp ‚Äú z will be an R-path from x to z.
The point is that we can turn any relation into a preorder in a canonical way. Here
is a concrete case of the above idea.
Let X ‚Äú ta, b, c, du and suppose given the relation tpa, bq, pb, cq, pb, dq, pd, cq, pc, cqu.
This is neither reÔ¨Çexive nor transitive, so it‚Äôs not a preorder. To make it a preorder
we follow the above prescription.
Starting with R-paths of length n ‚Äú 0 we put
tpa, aq, pb, bq, pc, cq, pd, dqu into R. The R-paths of length 1 add our original elements,

3.4. ORDERS
97
tpa, bq, pb, cq, pb, dq, pd, cq, pc, cqu. We don‚Äôt mind redundancy (e.g. pc, cq), but from now
on in this example we will only write down the new elements. The R-paths of length 2
add tpa, cq, pa, dqu to R. One can check that R-paths of length 3 and above do not add
anything new to R, so we are done. The relation
R ‚Äú tpa, aq, pb, bq, pc, cq, pd, dq, pa, bq, pb, cq, pb, dq, pd, cq, pa, cq, pa, dqu
is reÔ¨Çexive and transitive, hence a preorder.
Exercise 3.4.1.17. Let X ‚Äú ta, b, c, d, e, fu and let R ‚Äú tpa, bq, pb, cq, pb, dq, pd, eq, pf, aqu.
a.) What is the preorder R generated by R?
b.) Is it a partial order?
‚ô¶
Exercise 3.4.1.18. Let X be the set of people and let R ƒé X ÀÜ X be the relation with
px, yq P R if x is the child of y. Describe the preorder generated by R.
‚ô¶
3.4.2
Meets and joins
Let X be any set. Recall from DeÔ¨Ånition 2.7.4.9 that the powerset of X, denoted PpXq is
the set of subsets of X. There is a natural order on PpXq given by the subset relationship,
as exempliÔ¨Åed in Exercise 3.4.1.13. Given two elements a, b P PpXq we can consider them
as subsets of X and take their intersection as an element of PpXq which we denote a ^ b.
We can also consider them as subsets of X and take their union as an element of PpXq
which we denote a _ b. The intersection and union operations are generalized in the
following deÔ¨Ånition.
DeÔ¨Ånition 3.4.2.1. Let pS, ƒèq be a preorder and let s, t P S be elements. A meet of s
and t is an element w P S satisfying the following universal property:
‚Ä¢ w ƒè s and w ƒè t and,
‚Ä¢ for any x P S, if x ƒè s and x ƒè t then x ƒè w.
If w is a meet of s and t, we write w ‚Äì s ^ t.
A join of s and t is an element w P S satisfying the following universal property:
‚Ä¢ s ƒè w and t ƒè w and,
‚Ä¢ for any x P S, if s ƒè x and t ƒè x then w ƒè x.
If w is a join of s and t, we write w ‚Äì s _ t.
That is, the meet of s and t is the biggest thing smaller than both, i.e. a greatest
lower bound, and the join of s and t is the smallest thing bigger than both, i.e. a least
upper bound. Note that the meet of s and t might be s or t itself. Note that s and t may
have more than one meet (or more than one join). However, any two meets of s and t
must be in the same clique, by the universal property (and the same for joins).
Exercise 3.4.2.2. Consider the partial order from Example 3.4.1.3.
a.) What is the join of ‚åúa diamond‚åùand ‚åúa heart‚åù?
b.) What is the meet of ‚åúa black card‚åùand ‚åúa queen‚åù?

98
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
c.) What is the meet of ‚åúa diamond‚åùand ‚åúa card‚åù?
‚ô¶
Not every two elements in a preorder need have a meet, nor need they have a join.
Exercise 3.4.2.3.
a.) If possible, Ô¨Ånd two elements in the partial order from Example 3.4.1.3 that do not
have a meet. 8
b.) If possible, Ô¨Ånd two elements that do not have a join (in that preorder).
‚ô¶
Exercise 3.4.2.4. As mentioned in the introduction to this section, the power set S :‚Äú
PpXq of any set X naturally has the structure of a partial order. Its elements s P S
correspond to subsets s ƒé X, and we put s ƒè t if and only if s ƒé t as subsets of X. The
meet of two elements is their intersection as subsets of X, s ^ t ‚Äú s X t, and the join of
two elements is their union as subsets of X, s _ t ‚Äú s Y t.
a.) Is it possible to put a monoid structure on the set S in which the multiplication
formula is given by meets? If so, what would the identity element be?
b.) Is it possible to put a monoid structure on the set S in which the multiplication
formula is given by joins? If so, what would the identity element be?
‚ô¶
Example 3.4.2.5 (Trees). A tree, i.e. a system of nodes and branches, all of which emanate
from a single node called the root, is a partial order, but generally not a linear order. A
tree pT, ƒèq can either be oriented toward the root (so the root is the largest element) or
away from the root (so the root is the smallest element); let‚Äôs only consider the latter.
Below is a tree, pictured as a graph. The root is labeled e.
a‚Äö
b‚Äö
/ c‚Äö
;
/
#
d‚Äö
e‚Äö
;
#
f‚Äö
g‚Äö
/
#
h‚Äö
i‚Äö
(3.11)
In a tree, every pair of elements s, t P T has a meet s ^ t (their closest mutual
ancestor). On the other hand if s and t have a join c ‚Äú s _ t then either c ‚Äú s or c ‚Äú t.
Exercise 3.4.2.6. Consider the tree drawn in (3.11).
a.) What is the meet i ^ h?
b.) What is the meet h ^ b?
c.) What is the join b _ a?
d.) What is the join b _ g?
‚ô¶
8Use the displayed preorder, not any kind of ‚Äúcompletion of what‚Äôs there‚Äù.

3.4. ORDERS
99
3.4.3
Opposite order
DeÔ¨Ånition 3.4.3.1. Let S :‚Äú pS, ƒèq be a preorder. The opposite preorder, denoted Sop
is the preorder pS, ƒèopq having the same set of elements but where s ƒèop s1 iÔ¨Äs1 ƒè s.
Example 3.4.3.2. Recall the preorder N :‚Äú pN, dividesq from Exercise 4.5.1.4. Then
N op is the set of natural numbers but where m ƒè n iÔ¨Äm is a multiple of n. So 6 ƒè 2
and 6 ƒè 3.
Exercise 3.4.3.3. Suppose that S :‚Äú pS, ƒèq is a preorder.
a.) If S is a partial order, is Sop also a partial order?
b.) If S is a linear order, is Sop a linear order?
‚ô¶
Exercise 3.4.3.4. Suppose that S :‚Äú pS, ƒèq is a preorder, and that s1, s2 P S have join t
in S. The preorder Sop has the same elements as S. Is t the join of s1 and s2 in Sop, or
is it their meet, or is it not necessarily their meet nor their join?
‚ô¶
3.4.4
Morphism of orders
An order pS, ƒèq, be it a preorder, a partial order, or a linear order, involves a set and a
binary relations. For two orders to be comparable, their sets and their relations should
be appropriately comparable.
DeÔ¨Ånition 3.4.4.1. Let S :‚Äú pS, ƒèq and S1 :‚Äú pS1, ƒè1q be preorders (respectively partial
orders or linear orders). A morphism of preorders (resp. of partial orders or of linear
orders) f from S to S1, denoted f : S √ë S1, is a function f : S √ë S1 such that, for every
pair of elements s1, s2 P S, if s1 ƒè s2 then fps1q ƒè1 fps2q.
Example 3.4.4.2. Let X and Y be sets, let f : X √ë Y be a function. Then for every
subset X1 ƒé X, its image fpX1q ƒé Y is a subset (see Section 2.1.2). Thus we have a
function F : PpXq √ë PpY q, given by taking images. This is a morphism of partial orders
pPpXq, ƒéq √ë pPpY q, ƒéq. Indeed, if a ƒé b in PpXq then fpaq ƒé fpbq in PpY q.
Application 3.4.4.3. It‚Äôs often said that ‚Äúa team is only as strong as its weakest member‚Äù.
Is this true for materials? The hypothesis that a material is only as strong as its weakest
constituent can be understood as follows.
Recall from the introduction to this section (see 3.4, page 93) that we can put several
diÔ¨Äerent orders on the set M of materials. One example there was the order given by
constituency (m ƒèC m1 if m is an ingredient or constituent of m1). Another order is
given by strength: m ƒèS m1 if m1 is stronger than m (in some Ô¨Åxed setting).
Is it true that if material m is a constituent of material m1 then the strength of
m1 is less than or equal to the strength of m?
This is the substance of our quote
above. Mathematically the question would be posed, ‚Äúis there a morphism of preorders
pM, ƒèCq √ù√ë pM, ƒèop
S q?‚Äù
‚ô¶‚ô¶
Exercise 3.4.4.4. Let X and Y be sets, let f : X √ë Y be a function. Then for every
subset Y 1 ƒé Y , its preimage f ¬¥1pY 1q ƒé X is a subset (see DeÔ¨Ånition 2.5.1.12). Thus we
have a function F : PpY q √ë PpXq, given by taking preimages. Is it a morphism of partial
orders?
‚ô¶

100
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 3.4.4.5. Let S be a set. The smallest preorder structure that can be put on
S is to say a ƒè b iÔ¨Äa ‚Äú b. This is indeed reÔ¨Çexive and transitive, and it is called the
discrete preorder on S.
The largest preorder structure that can be put on S is to say a ƒè b for all a, b P S.
This again is reÔ¨Çexive and transitive, and it is called the indiscrete preorder on S.
Exercise 3.4.4.6. Let S be a set and let pT, ƒèT q be a preorder. Let ƒèD be the discrete
preorder on S. Given a morphism of preorders pS, ƒèDq √ë pT, ƒèT q we get a function
S √ë T.
a.) Which functions S √ë T arise in this way?
b.) Given a morphism of preorders pT, ƒèT q √ë pS, ƒèDq, we get a function T √ë S. In
terms of ƒèT , which functions T √ë S arise in this way?
‚ô¶
Exercise 3.4.4.7. Let S be a set and let pT, ƒèT q be a preorder. Let ƒèI be the indiscrete
preorder on S. Given a morphism of preorders pS, ƒèIq √ë pT, ƒèT q we get a function
S √ë T.
a.) In terms of ƒèT , which functions S √ë T arise in this way?
b.) Given a morphism of preorders pT, ƒèT q √ë pS, ƒèIq, we get a function T √ë S. In
terms of ƒèT , which functions T √ë S arise in this way?
‚ô¶
3.4.5
Other applications
3.4.5.1
Biological classiÔ¨Åcation
Biological classiÔ¨Åcation is a method for dividing the set of organisms into distinct classes,
called taxa. In fact, it turns out that such a classiÔ¨Åcation, say a phylogenetic tree, can
be understood as a partial order C on the set of taxa. The typical ranking of these taxa,
including kingdom, phylum, etc., can be understood as morphism of orders f : C √ë rns,
for some n P N.
For example we may have a tree (see Example 3.4.2.5) that looks like this
Archaea
‚Äö
/ Pyrodicticum
‚Äö
Spirochetes
‚Äö
Life
‚Äö
/

?
Bacteria
‚Äö
/
5
Aquifex
‚Äö
Fungi
‚Äö
Eukaryota
‚Äö
/
5
Animals
‚Äö
/ HomoSapien
‚Äö
We also have a linear order that looks like this:
Life
‚Äö
/ Domain
‚Äö
/ Kingdom
‚Äö
/ Phylum
‚Äö
/ ¬® ¬® ¬®
/ Genus
‚Äö
/ Species
‚Äö

3.4. ORDERS
101
and the ranking system that puts Eukaryota at Domain and Hopo Sapien at Species is
an order-preserving function from the dots upstairs to the dots downstairs; that is, it is
a morphism of preorders.
Exercise 3.4.5.2. Since the phylogenetic tree is a tree, it has all meets.
a.) Determine the meet of dogs and humans.
b.) If we did not require the phylogenetic partial order to be a tree, what would it mean
if two taxa (nodes in the phylogenetic partial order), say a and b, had join c with
c ‚Ä∞ a and c ‚Ä∞ b?
‚ô¶
Exercise 3.4.5.3.
a.) In your favorite scientiÔ¨Åc realm, are there any interesting classiÔ¨Åcation systems that
are actually orders?
b.) Choose one; what would meets and joins mean in that setting?
‚ô¶
3.4.5.4
Security
Security, say of sensitive information, is based on two things: a security clearance and
‚Äúneed to know.‚Äù The former, security clearance might have levels like ‚ÄúconÔ¨Ådential‚Äù,
‚Äúsecret‚Äù, ‚Äútop secret‚Äù. But maybe we can throw in ‚Äúpresident‚Äù and some others too, like
‚Äúplebe‚Äù.
Exercise 3.4.5.5. Does it appear that security clearance is a preorder, a partial order, or
a linear order?
‚ô¶
Need-to-know is another classiÔ¨Åcation of people. For each bit of information, we do
not necessarily want everyone to know about it, even everyone of the speciÔ¨Åed clearance.
It is only disseminated to those that need to know.
Exercise 3.4.5.6. Let P be the set of all people and let I be the set of all pieces of
information known by the government. For each subset I ƒé I, let KpIq ƒé P be the set
of people that need to know every piece of information in I. Let S ‚Äú tKpIq | I ƒé Iu be
the set of all ‚Äúneed-to-know groups‚Äù, with the subset relation denoted ƒè.
a.) Is pS, ƒèq a preorder? If not, Ô¨Ånd a nearby preorder.
b.) If I1 ƒé I2 do we always have KpI1q ƒé KpI2q or KpI2q ƒé KpI1q or possibly neither?
c.) Should the preorder pS, ƒèq have all meets?
d.) Should pS, ƒèq have all joins?
‚ô¶
3.4.5.7
Spaces, e.g. geography
Consider closed curves that can be drawn in the plane R2, e.g. circles, ellipses, and
kidney-bean shaped curves. The interiors of these closed curves (not including the bound-
ary itself) are called basic open sets in R2. The good thing about such an interior U is
that any point p P U is not on the boundary, so no matter how close p is to the boundary

102
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
of U, there will always be a tiny basic open set surrounding p and completely contained
in U. In fact, the union of any collection of basic open sets still has this property. An
open set in R2 is any subset U ƒé R2 that can be formed as the union of a collection of
basic open sets.
Example 3.4.5.8. Let U ‚Äú tpx, yq P R2 | x ƒÖ 0u.
To see that U is open, deÔ¨Åne the
following sets: for any a, b P R, let Spa, bq be the square parallel to the axes, with side
length 1, where the upper left corner is pa, bq. Let S1pa, bq be the interior of Spa, bq. Then
each S1pa, bq is open, and U is the union of S1pa, bq over the collection of all a ƒÖ 0 and
all b,
U ‚Äú
ƒè
a, b P R,
a ƒÖ 0
S1pa, bq.
The idea of open sets extends to spaces beyond R2. For example, on the earth one
could deÔ¨Åne a basic open set to be the interior of any region one can ‚Äúdraw a circle
around‚Äù (with a metaphorical pen), and deÔ¨Åne open sets to be unions of basic open sets.
Exercise 3.4.5.9. Let S be the set of open subsets on earth, as deÔ¨Åned in the above
paragraph.
a.) If ƒè is the subset relation, is pS, ƒèq a preorder or a partial order?
b.) Does it have meets, does it have joins?
‚ô¶
Exercise 3.4.5.10. Let S be the set of open subsets of earth as deÔ¨Åned above. To each
open subset of earth suppose we know the range of recorded temperature throughout s
(i.e. the low and high throughout the region). Thus to each element s P S we assign an
interval Tpsq :‚Äú tx P R | a ƒè x ƒè bu. If we order the set V of intervals of R by the subset
relation, it gives a partial order on V .
a.) Does our assignment T : S √ë V amount to a morphism of orders?
b.) Does it preserve meets or joins? (Hint: it doesn‚Äôt preserve both.)
‚ô¶
Exercise 3.4.5.11.
a.) Can you think of a space relevant to your favorite area of science for which it makes
sense to assign an interval of real numbers to each open set somehow, analogously to
Exercise 3.4.5.10? For example for a sample of some material under stress, perhaps
the strain on each open set is somehow an interval?
b.) Repeat the questions from Exercise 3.4.5.10.
‚ô¶
3.5
Databases: schemas and instances
The Ô¨Årst three sections of this chapter were about classical objects from mathematics.
The present section is about databases, which are classical objects from computer science.
These are truly ‚Äúcategories and functors, without admitting it‚Äù (see Theorem 4.4.2.3).

3.5. DATABASES: SCHEMAS AND INSTANCES
103
3.5.1
What are databases?
Data, in particular the set of observations made during experiment, plays 9 a primary
role in science of any kind. To be useful data must be organized, often in a row-and-
column display called a table. Columns existing in diÔ¨Äerent tables can refer to the same
data.
A database is a collection of tables, each table T of which consists of a set of columns
and a set of rows. We roughly explain the role of tables, columns, and rows as follows.
The existence of table T suggests the existence of a Ô¨Åxed methodology for observing
objects or events of a certain type.
Each column c in T prescribes a single kind or
method of observation, so that the datum inhabiting any cell in column c refers to an
observation of that kind. Each row r in T has a Ô¨Åxed sourcing event or object, which
can be observed using the methods prescribed by the columns. The cell pr, cq refers to
the observation of kind c made on event r. All of the rows in T should refer to uniquely
identiÔ¨Åable objects or events of a single type, and the name of the table T should refer
to that type.
Example 3.5.1.1. When graphene is strained (lengthened by a factor of x ƒõ 1), it becomes
stressed (carries a force in the direction of the lengthening). The following is a made-up
set of data.
Graphene sample
ID
Source
Stress
Strain
A118-1
C Smkt
0
0
A118-2
C Smkt
0.02
20
A118-3
C Smkt
0.05
40
A118-4
AC
0.04
37
A118-5
AC
0.1
80
A118-6
C Plat
0.1
82
Supplier
ID
Full name
Phone
C Smkt
Carbon Supermarket
(541)781-6611
AC
Advanced Chemical
(410) 693-0818
C Plat
Carbon Platform
(510) 719-2857
McD
McDonard‚Äôs Burgers
(617) 244-4400
APP
Acme Pen and Paper
(617) 823-5603
(3.12)
In the Ô¨Årst table, titled ‚ÄúGraphene sample‚Äù, the rows refer to graphene samples, and
the table is so named. Each graphene sample can be observed according to the source
supplier from which it came, the strain that it was subjected to, and the stress that
it carried. These observations are the columns. In the second table, the rows refer to
suppliers of various things, and the table is so named. Each supplier can be observed
according to its full name and its phone number; these are the columns.
In the left-hand table it appears either that each graphene sample was used only
once, or that the person recording the data did not keep track of which samples were
reused. If such details become important later, the lab may want to change the layout
of the Ô¨Årst table by adding on the appropriate column. This can be accomplished using
morphisms of schemas, which will be discussed in Section 4.4.1.
9The word data is generally considered to be the plural form of the word datum. However, individual
datum elements are only useful when they are organized into structures (e.g. if one were to shuÔ¨Ñe the
cells in a spreadsheet, most would consider the data to be destroyed). It is the whole organized structure
that really houses the information; the data must be in formation in order to be useful. Thus I will use
the word data as a collective noun (akin to the word ‚Äúsand‚Äù); it bridges the divide between the individual
datum elements (akin to the grains of sand) and the data set (akin to a sand pile). In particular, I will
often use the word data as a singular noun.

104
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
3.5.1.2
Primary keys, foreign keys, and data columns
There is a bit more structure in the above tables (Example 3.12) then may Ô¨Årst meet
the eye. Each table has a primary ID column, found on the left, as well as some data
columns and some foreign key columns. The primary key column is tasked with uniquely
identifying diÔ¨Äerent rows. Each data column houses elementary data of a certain sort.
Perhaps most interesting from a structural point of view are the foreign key columns,
because they link one table to another, creating a connection pattern between tables.
Each foreign key column houses data that needs to be further unpacked. It thus refers us
to another foreign table, in particular the primary ID column of that table. In Example
3.12 the Source column was a foreign key to the Supplier table.
Here is another example, lifted from [Sp2].
Example 3.5.1.3. Consider the bookkeeping necessary to run a department store. We
keep track of a set of employees and a set of departments. For each employee e, we keep
track of
E.1 the Ô¨Årst name of e, which is a FirstNameString,
E.2 the last name of e, which is a LastNameString,
E.3 the manager of e, which is an Employee, and
E.4 the department that e works in, which is a Department.
For each department d, we keep track of
D.1 the name of d, which is a DepartmentNameString, and
D.2 the secretary of d, which is an Employee.
Above we can suppose that E.1, E.2, and D.1 are data columns (referring to names
of various sorts), and E.3, E.4, and D.2 are foreign key columns (referring to managers,
secretaries, etc.).
Display (3.13) shows how such a database might look at a particular moment in time.
Employee
ID
Ô¨Årst
last
manager
worksIn
101
David
Hilbert
103
q10
102
Bertrand
Russell
102
x02
103
Emmy
Noether
103
q10
Department
ID
name
secretary
q10
Sales
101
x02
Production
102
(3.13)
3.5.1.4
Business rules
Looking at the tables from Example 3.5.1.3, one may notice a few patterns. First, every
employee works in the same department as his or manager. Second, every department‚Äôs
secretary works in that department. Perhaps the business counts on these rules for the
way it structures itself. In that case the database should enforce those rules, i.e. it
should check that whenever the data is updated, it conforms to the rules:
Rule 1 For every employee e, the manager of e works in the same department
that e works in.

3.5. DATABASES: SCHEMAS AND INSTANCES
105
Rule 2 For every department d, the secretary of d works in department d.
(3.14)
Together, the statements E.1, E.2, E.3, E.4, D.1, and D.2 from Example 3.5.1.3 and
Rule 1 and Rule 2, constitute what we will call the schema of the database. We will
formalize this idea in Section 3.5.2.
3.5.1.5
Data columns as foreign keys
To make everything consistent, we could even say that data columns are speciÔ¨Åc kinds of
foreign keys. That is, each data column constitutes a foreign key to some non-branching
leaf table, which has no additional data.
Example 3.5.1.6. Consider again Example 3.5.1.3. Note that Ô¨Årst names and last names
had a particular type, which we all but ignored above. We could cease to ignore them
by adding three tables, as follows.
FirstNameString
ID
Alan
Alice
Bertrand
Carl
David
Emmy
...
LastNameString
ID
Arden
Hilbert
Jones
Noether
Russell
...
DepartmentNameString
ID
Marketing
Production
Sales
...
(3.15)
In combination, Displays (3.13) and (3.15) form a collection of tables with the prop-
erty that every column is either a primary key or a foreign key. The notion of data
column is now subsumed under the notion of foreign key column. Everything is either a
primary key (one per table, labeled ID) or a foreign key column (everything else).
3.5.2
Schemas
The above section may all seem intuitive or reasonable in some ways, but also a bit
diÔ¨Écult to fully grasp, perhaps. It would be nice to summarize what is happening in a
picture. Such a picture, which will basically be a graph, should capture the conceptual
layout to which the data conforms, without yet being concerned with the individual data
that may populate the tables in this instant. We proceed at Ô¨Årst by example, giving the
precise deÔ¨Ånition in DeÔ¨Ånition 3.5.2.6.
Example 3.5.2.1. In Examples 3.5.1.3 and 3.5.1.6, the conceptual layout for a department
store was given, and some example tables were shown. We were instructed to keep track
of employees, departments, and six types of data (E.1, E.2, E.3, E.4, D.1, and D.2), and
we were instructed to follow two rules (Rule 1, Rule 2). All of this is summarized in the

106
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
following picture:
C:‚Äú Schema for tables (3.13) and (3.15) conforming to (3.14)
Employee manager worksIn ¬ª Employee worksIn
Department secretary worksIn ¬ª Department
Employee
‚Äö
worksIn
/
manager

Ô¨Årst
~
last

Department
‚Äö
secretary
o
name

FirstNameString
‚Äö
LastNameString
‚Äö
DepartmentNameString
‚Äö
(3.16)
The Ô¨Åve tables from (3.13) and (3.15) are seen as Ô¨Åve vertices; this is also the number of
primary ID columns. The six foreign key columns from (3.13) and (3.15) are seen as six
arrows; each points from a table to a foreign table. The two rules from (3.14) are seen as
statements at the top of Display (3.16).We will explain path equivalences in DeÔ¨Ånition
3.5.2.3.
Exercise 3.5.2.2. Come up with a schema (consisting of dots and arrows) describing the
conceptual layout of information presented in Example 3.5.1.1.
‚ô¶
In order to deÔ¨Åne schemas, we must Ô¨Årst deÔ¨Åne the notion of schematic equivalence
relation, which is to hold on the set of paths of a graph G (see Section 3.3.2). Such
an equivalence relation (in addition to being reÔ¨Çexive, symmetric, and transitive) has
two sorts of additional properties: equivalent paths must have the same source and
target, and the composition of equivalent paths with other equivalent paths must yield
equivalent paths. Formally we have DeÔ¨Ånition 3.5.2.3.
DeÔ¨Ånition 3.5.2.3.
Let G ‚Äú pV, A, src, tgtq be a graph, and let PathG denote the set of paths in G
(see DeÔ¨Ånition 3.3.2.1). A path equivalence declaration (or PED) is an expression of the
form p ¬ª q where p, q P PathG have the same source and target, srcppq ‚Äú srcpqq and
tgtppq ‚Äú tgtpqq.
A congruence on G is a relation ¬ª on PathG that has the following properties:
1. The relation ¬ª is an equivalence relation.
2. If p ¬ª q then srcppq ‚Äú srcpqq.
3. If p ¬ª q then tgtppq ‚Äú tgtpqq.
4. Suppose p, q: b √ë c are paths, and m: a √ë b is an arrow. If p ¬ª q then mp ¬ª mq.
5. Suppose p, q: a √ë b are paths, and n: b √ë c is an arrow. If p ¬ª q then pn ¬ª qn.
Any set of path equivalence declarations (PEDs) generates a congruence. We tend
to elide the diÔ¨Äerence between a congruence and the set of PEDs that generates it.

3.5. DATABASES: SCHEMAS AND INSTANCES
107
Exercise 3.5.2.4. Consider the graph shown in (3.16), and the two declarations shown at
the top. They generate a congruence.
a.) Is it true that the following PED is an element of this congruence?
Employee manager manager worksIn
?¬ª Employee worksIn
b.) What about this one?
Employee worksIn secretary
?¬ª Employee
c.) What about this one?
Department secretary manager worksIn name
?¬ª Department name
‚ô¶
Lemma 3.5.2.5. Suppose that G is a graph and ¬ª is a congruence on G. Suppose
p ¬ª q: a √ë b and r ¬ª s: b √ë c. Then pr ¬ª qs.
Proof. The picture to have in mind is this:
‚Äö
/ ¬® ¬® ¬®
/ ‚Äö

‚Äö
/ ¬® ¬® ¬®
/ ‚Äö

a‚Äö
¬ª
A

p
%
q
9
b‚Äö
¬ª
A

r
%
s
9
c‚Äö
‚Äö
/ ¬® ¬® ¬®
/ ‚Äö
A
‚Äö
/ ¬® ¬® ¬®
/ ‚Äö
A
Applying condition (3) from DeÔ¨Ånition 3.5.2.3 to each arrow in path p, it follows by
induction that pr ¬ª ps.
Applying condition (4) to each arrow in path s, it follows
similarly that ps ¬ª qs. Because ¬ª is an equivalence relation, it follows that pr ¬ª qs.
‚ñ°
DeÔ¨Ånition 3.5.2.6. A database schema (or simply schema) C consists of a pair C :‚Äú
pG, ¬ªq where G is a graph and ¬ª is a congruence on G.
Example 3.5.2.7. The picture drawn in (3.16) has the makings of a schema. Pictured is
a graph with two PEDs; these generate a congruence, as discussed in Exercise 3.5.2.4.
A schema can be converted into a system of tables each with a primary key and some
number of foreign keys referring to other tables, as discussed in Section 3.5.1. DeÔ¨Ånition
3.5.2.6 gives a precise conceptual understanding of what a schema is, and the following
rules describe how to convert such a thing into a table layout.
Rules of good practice 3.5.2.8. Converting a schema C ‚Äú pG, ¬ªq into a table layout should
be done as follows:
(i) There should be a table for every vertex in G and if the vertex is named, the table
should have that name;
(ii) Each table should have a left-most column called ID, set apart from the other
columns by a double vertical line; and

108
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
(iii) To each arrow a in G having source vertex s :‚Äú srcpaq and target vertex t :‚Äú tgtpaq,
there should be a foreign key column a in table s, referring to table t; if the arrow
a is named, column a should have that name.
Example 3.5.2.9 (Discrete dynamical system). Consider the schema
Loop :‚Äú
s‚Äö
f

(3.17)
in which the congruence is trivial (i.e.
generated by the empty set of PEDs.)
This
schema is quite interesting. It encodes a set s and a function f : s √ë s. Such a thing
is called a discrete dynamical system. One imagines s as the set of states and, for any
state x P s, a notion of ‚Äúnext state‚Äù fpxq P s. For example
s
ID
f
A
B
B
C
C
C
D
B
E
C
F
G
G
H
H
G
...pictured...
A‚Äö
/ B‚Äö
/ C‚Äö q
D‚Äö
;
E‚Äö
;
F‚Äö
/ G‚Äö
( H‚Äö
h
(3.18)
Application 3.5.2.10. Imagine a quantum-time universe in which there are discrete time
steps. We model it as a discrete dynamical system, i.e. a table of the form (3.18). For
every possible state of the universe we include a row in the table. The state in the next
instant is recorded in the second column.
‚ô¶‚ô¶
Example 3.5.2.11 (Finite hierarchy). The schema Loop can also be used to encode hier-
archies, such as the manager relation from Examples 3.5.1.3 and 3.5.2.1,
E‚Äö
mgr

One problem with this, however, is if a schema has even one loop, then it can have in-
Ô¨Ånitely many paths (corresponding, e.g. to an employees manager‚Äôs manager‚Äôs manager‚Äôs
... manager).
Sometimes we know that in a given company that process eventually ends, a famous
example being that at Ben and Jerry‚Äôs ice cream, there were only seven levels. In that
case we know that an employee‚Äôs 8th level manager is equal to his or her 7th level
manager. This can be encoded by the PED
E mgr mgr mgr mgr mgr mgr mgr mgr ¬ª E mgr mgr mgr mgr mgr mgr mgr
or more concisely, mgr8 ‚Äú mgr7.
Exercise 3.5.2.12. Is there any nontrivial PED on Loop that holds for the data in Example
3.5.2.9? If so, what is it and how many equivalence classes of paths in Loop are there
after you impose that relation?
‚ô¶

3.5. DATABASES: SCHEMAS AND INSTANCES
109
Exercise 3.5.2.13. Let P be a chess-playing program. Given any position (including the
history of the game and choice of whose turn it is), P will make a move.
a.) Is this an example of a discrete dynamical system?
b.) How do the rules for ending the game in a win or draw play out in this model? (Look
up online how chess games end if you don‚Äôt know.)
‚ô¶
3.5.2.14
Ologging schemas
It should be clear that a database schema is nothing but an olog in disguise.
The
diÔ¨Äerence is basically the readability requirements for ologs. There is an important new
addition in this section, namely that we can Ô¨Åll out an olog with data. Conversely, we
have seen that databases are not any harder to understand than ologs are.
Example 3.5.2.15. Consider the olog
a moon
orbits
√ù√ù√ù√ù√ù√ù√ë a planet
(3.19)
We can document some instances of this relationship using the following tables:
orbits
a moon
a planet
The Moon
Earth
Phobos
Mars
Deimos
Mars
Ganymede
Jupiter
Titan
Saturn
(3.20)
Clearly, this table of instances can be updated as more moons are discovered by the
author (be it by telescope, conversation, or research).
Exercise 3.5.2.16. In fact, Example 3.5.2.15 did not follow Rules 3.5.2.8. Strictly follow-
ing those rules, copy over the data from (3.20) into tables that are in accordance with
schema (3.19).
‚ô¶
Exercise 3.5.2.17.
a.) Write down a schema, in terms of the boxes ‚åúa thing I own‚åùand ‚åúa place‚åùand one
additional arrow, that might help one remember where they decided to put ‚Äúrandom‚Äù
things.
b.) What is a good label for the arrow?
c.) Fill in some rows of the corresponding set of tables for your own case.
‚ô¶
Exercise 3.5.2.18. Consider the olog
C
a child
has
/
F
a father
has as Ô¨Årst
k
has as tallest
t

110
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
a.) What path equivalence declarations would be appropriate for this olog? You can use
f : F √ë C, t: F √ë C, and h: C √ë F if you prefer.
b.) How many PEDs are in the congruence?
‚ô¶
3.5.3
Instances
Given a database schema pG, ¬ªq, an instance of it is just a bunch of tables whose data
conform to the speciÔ¨Åed layout. These can be seen throughout the previous section, most
explicitly in the relationship between schema (3.16) and tables (3.13) and (3.15), and
between schema (3.17) and table (3.18). Below is the mathematical deÔ¨Ånition.
DeÔ¨Ånition 3.5.3.1. Let C ‚Äú pG, ¬ªq where G ‚Äú pV, A, src, tgtq.
An instance on C,
denoted pPK, FKq: C √ë Set, is deÔ¨Åned as follows: One announces some constituents
(A. primary ID part, B. foreign key part) and asserts that they conform to a law (1.
preservation of congruence). SpeciÔ¨Åcally, one announces
A. a function PK: V √ë Set; i.e. to each vertex v P V one provides a set PKpvq;10
and
B. for every arrow a P A with v ‚Äú srcpaq and w ‚Äú tgtpaq, a function FKpaq: PKpvq √ë
PKpwq. 11
One asserts that the following law holds for any vertices v, w and paths p ‚Äú va1a2 . . . am
and q ‚Äú va1
1a1
2 . . . a1
n from v to w:
1. If p ¬ª q then for all x P PKpvq, we have
FKpamq Àù ¬® ¬® ¬® Àù FKpa2q Àù FKpa1qpxq ‚Äú FKpa1
nq Àù ¬® ¬® ¬® Àù FKpa1
2q Àù FKpa1
1qpxq
in PKpwq.
Exercise 3.5.3.2. Consider the olog pictured below:
C :‚Äú
a self-email
is
/ an email
is sent by,
is sent to
4
a person
Given x, a self-email, consider the following.
We know that x is a self-email, which is an email,
which is sent by a person that we‚Äôll call Ppxq.
We also know that x is a self-email, which is an
email, which is sent to a person that we‚Äôll call Qpxq.
Fact: whenever x is a self-email, we will have Ppxq ‚Äú
Qpxq
10The elements of PKpvq will be listed as the rows of table v, or more precisely as the leftmost cells
of these rows.
11The arrow a will correspond to a column, and to each row r P PKpvq the pr, aq cell will contain the
datum FKpaqprq.

3.5. DATABASES: SCHEMAS AND INSTANCES
111
a self-email
ID
is
SEm1207
Em1207
SEm1210
Em1210
SEm1211
Em1211
an email
ID
is sent by
is sent to
Em1206
Bob
Sue
Em1207
Carl
Carl
Em1208
Sue
Martha
Em1209
Chris
Bob
Em1210
Chris
Chris
Em1211
Julia
Julia
Em1212
Martha
Chris
a person
ID
Bob
Carl
Chris
Julia
Martha
Sue
(3.21)
a.) What is the set PKp‚åúan email‚åùq?
b.) What is the set PKp‚åúa person‚åùq?
c.) What is the function FKpis sent byq: PKp‚åúan email‚åùq √ë PKp‚åúa person‚åùq?
d.) Interpret the sentences at the bottom of C as the EnglishiÔ¨Åcation of a simple path
equivalence declaration. Is it satisÔ¨Åed by the instance (3.21); that is, does law 1.
from DeÔ¨Ånition 3.5.3.1 hold?
‚ô¶
Example 3.5.3.3 (Monoid action table). In Example 3.1.2.9, we saw how a monoid M
could be captured as an olog with only one object. As a database schema, this means
there is only one table. Every generator of M would be a column of the table. The
notion of database instance for such a schema is precisely the notion of action table from
Section 3.1.3. Note that a monoid can act on itself, in which case this action table is the
monoid‚Äôs multiplication table as in Example 3.1.3.2, but it can also act on any other set
as in Example 3.1.3.1. If M acts on a set S, then the set of rows in the action table will
be S.
Exercise 3.5.3.4. Draw (as a graph) the schema for which Table 3.2 is an instance.
‚ô¶
Exercise 3.5.3.5. Suppose that M is a monoid and some instance of it is written out in
table form. It‚Äôs possible that M is a group. What evidence in an instance table for M
might suggest that M is a group?
‚ô¶
3.5.3.6
Paths through a database
Let C :‚Äú pG, ¬ªq be a schema and let pPK, FKq: C √ë Set be an instance on C. Then
for every arrow a: v √ë w in G we get a function FKpaq: PKpvq √ë PKpwq. Functions
can be composed, so in fact for every path through G we get a function. Namely, if
p ‚Äú v0a1, a2, . . . , an is a path from v0 to vn then the instance provides a function
FKppq :‚Äú FKpanq Àù ¬® ¬® ¬® FKpa2q Àù FKpa1q: PKpv0q √ë PKpvnq,
which Ô¨Årst made an appearance as part of Law 1 in DeÔ¨Ånition 3.5.3.1.
Example 3.5.3.7. Consider the department store schema from Example 3.5.2.1, and in
(3.16) the path rworksIn, secretary, lasts which points from Employee to LastNameString.
The instance will let us interpret this path as a function from the set of employees to
the set of last names; this could be a useful function to have around. The instance from
(3.13) would yield the following function

112
CHAPTER 3. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Employee
ID
Secr. name
101
Hilbert
102
Russell
103
Hilbert
Exercise 3.5.3.8. Consider the path p :‚Äú rf, fs on the Loop schema from (3.17). Using the
instance from (3.18), where PKpsq ‚Äú tA, B, C, D, E, F, G, Hu, interpret p as a function
PKpsq √ë PKpsq, and write this as a 2-column table, as above in Example 3.5.3.7.
‚ô¶
Exercise 3.5.3.9.
a.) Given an instance pPK, FKq on a schema C, and given a trivial path p (i.e. p has
length 0; it starts at some vertex but doesn‚Äôt go anywhere), what function does p
yield?
b.) What are the domain and codomain of p?
‚ô¶

Chapter 4
Basic category theory
‚Äú...We know only a very few‚Äîand, therefore, very precious‚Äîschemes whose unifying
powers cross many realms.‚Äù ‚Äì Marvin Minsky.1
Categories, or an equivalent notion, have already been secretly introduced as ologs.
One can think of a category as a graph (as in Section 3.3) in which certain paths have
been declared equivalent. (Ologs demand an extra requirement that everything in sight
be readable in natural language, and this cannot be part of the mathematical deÔ¨Ånition
of category.)
The formal deÔ¨Ånition of category is given in DeÔ¨Ånition 4.1.1.1, but it
will not be obviously the same as the ‚Äúgraph+path equivalences‚Äù notion; the latter was
given in DeÔ¨Ånition 3.5.2.6 as the deÔ¨Ånition of a schema. Once we talk about how diÔ¨Äerent
categories can be compared using functors (DeÔ¨Ånition 4.1.2.1), and how diÔ¨Äerent schemas
can be compared using schema mappings (DeÔ¨Ånition 4.4.1.2), we will prove that the two
notions are equivalent (Theorem 4.4.2.3).
4.1
Categories and Functors
In this section we give the standard deÔ¨Ånition of categories and functors. These, together
with natural transformations (Section 4.3), form the backbone of category theory. We
also give some examples.
4.1.1
Categories
In everyday speech we think of a category as a kind of thing. A category consists of a
collection of things, all of which are related in some way. In mathematics, a category
can also be construed as a collection of things and a type of relationship between pairs
of such things. For this kind of thing-relationship duo to count as a category, we need to
check two rules, which have the following Ô¨Çavor: every thing must be related to itself by
simply being itself, and if one thing is related to another and the second is related to a
third, then the Ô¨Årst is related to the third. In a category, the ‚Äúthings‚Äù are called objects
and the ‚Äúrelationships‚Äù are called morphisms.
In various places throughout this book so far we have discussed things of various
sorts, e.g. sets, monoids, graphs. In each case we discussed how such things should be
1[Min, Problems of disunity, p. 126].
113

114
CHAPTER 4. BASIC CATEGORY THEORY
appropriately compared. In each case the ‚Äúthings‚Äù will stand as the objects and the
‚Äúappropriate comparisons‚Äù will stand as the morphisms in the category.
Here is the
deÔ¨Ånition.
DeÔ¨Ånition 4.1.1.1. A category C is deÔ¨Åned as follows: One announces some constituents
(A. objects, B. morphisms, C. identities, D. compositions) and asserts that they conform
to some laws (1. identity law, 2. associativity law). SpeciÔ¨Åcally, one announces:
A. a collection ObpCq, elements of which are called objects;
B. for every pair x, y P ObpCq, a set HomCpx, yq P Set. It is called the hom-set
from x to y; its elements are called morphisms from x to y; 2
C. for every object x P ObpCq, a speciÔ¨Åed morphism denoted idx P HomCpx, xq
called the identity morphism on x; and
D. for every three objects x, y, z P ObpCq, a function
Àù: HomCpy, zq ÀÜ HomCpx, yq √ë HomCpx, zq,
called the composition formula.
Given objects x, y P ObpCq, we can denote a morphism f P HomCpx, yq by f : x √ë y; we
say that x is the domain of f and that y is the codomain of f. Given also g: y √ë z,
the composition formula is written using inÔ¨Åx notation, so g Àù f : x √ë z means Àùpg, fq P
HomCpx, zq.
One asserts that the following law holds:
1. for every x, y P ObpCq and every morphism f : x √ë y, we have
f Àù idx ‚Äú f
and
idy Àù f ‚Äú f;
and;
2. if w, x, y, z P ObpCq are any objects and f : w √ë x,
g: x √ë y,
and h: y √ë z
are any morphisms, then the two ways to compose are the same:
ph Àù gq Àù f ‚Äú h Àù pg Àù fq P HomCpw, zq.
Remark 4.1.1.2. There is perhaps much that is unfamiliar about DeÔ¨Ånition 4.1.1.1 but
there is also one thing that is strange about it. The objects ObpCq of C are said to
be a ‚Äúcollection‚Äù rather than a set. This is because we sometimes want to talk about
the category of all sets, in which every possible set is an objects, and if we try to say
that the collection of sets is itself, we run into Russell‚Äôs paradox. Modeling this was
a sticking point in the foundations of category theory, but it was eventually Ô¨Åxed by
Grothendieck‚Äôs notion of expanding universes. Roughly the idea is to choose some huge
set Œ∫ (with certain properties making it a universe), to work entirely inside of it when
possible, and to call anything in that world Œ∫-small (or just small if Œ∫ is clear from
context). When we need to look at Œ∫ itself, we choose an even bigger universe Œ∫1 and
work entirely within it.
A category in which the collection ObpCq is a set (or in the above language, a small
set) is called a small category. From here on out we will not take care of the diÔ¨Äerence,
referring to ObpCq as a set. We do not think this will do any harm to scientists using
category theory, at least not in the beginning phases of their learning.
2The reason for the notation Hom and the word hom-set is that morphisms are often called homo-
morphisms, e.g. in group theory.

4.1. CATEGORIES AND FUNCTORS
115
Example 4.1.1.3 (The category Set of sets). Chapter 2 was all about the category of sets,
denoted Set. The objects are the sets and the morphisms are the functions; we even
used the current notation, referring to the set of functions X √ë Y as HomSetpX, Y q.
The composition formula Àù is given by function composition, and for every set X, the
identity function idX : X √ë X serves as the identity morphism for X P ObpSetq. The
two laws clearly hold, so Set is indeed a category.
Example 4.1.1.4 (The category Fin of Ô¨Ånite sets). Inside the category Set is a subcategory
Fin ƒé Set, called the category of Ô¨Ånite sets. Whereas an object S P ObpSetq is a set
that can have arbitrary cardinality, we deÔ¨Åne Fin such that its objects include all (and
only) the sets S with Ô¨Ånitely many elements, i.e. |S| ‚Äú n for some natural number n P N.
Every object of Fin is an object of Set, but not vice versa.
Although Fin and Set have a diÔ¨Äerent collection of objects, their morphisms are in
some sense ‚Äúthe same‚Äù. For any two Ô¨Ånite sets S, S1 P ObpFinq, we can also think of
S, S1 P ObpSetq, and we have
HomFinpS, S1q ‚Äú HomSetpS, S1q.
That is a morphism in Fin between Ô¨Ånite sets S and S1 is simply a function f : S √ë S1.
Example 4.1.1.5 (The category Mon of monoids). We deÔ¨Åned monoids in DeÔ¨Ånition
3.1.1.1 and monoid homomorphisms in DeÔ¨Ånition 3.1.4.1. Every monoid M :‚Äú pM, e, ‚ÄπMq
has an identity homomorphism idM : M √ë M, given by the identity function idM : M √ë
M. To compose two monoid homomorphisms f : M √ë M1 and g: M1 √ë M2, we com-
pose their underlying functions f : M √ë M 1 and g: M 1 √ë M 2, and check that the result
g Àù f is a monoid homomorphism. Indeed,
g Àù fpeq ‚Äú gpe1q ‚Äú e2
g Àù fpm1 ‚ÄπM m2q ‚Äú gpfpm1q ‚ÄπM 1 fpm2qq ‚Äú g Àù fpm1q ‚ÄπM 2 g Àù fpm2q.
It is clear that the two laws hold, so Mon is a category.
Exercise 4.1.1.6 (The category Grp of groups). Suppose we set out to deÔ¨Åne a category
Grp, having groups as objects and group homomorphisms as morphisms, see DeÔ¨Ånition
3.2.1.16. Show (to the level of detail of Example 4.1.1.5) that the rest of the conditions
for Grp to be a category are satisÔ¨Åed.
‚ô¶
Exercise 4.1.1.7 (The category PrO of preorders). Suppose we set out to deÔ¨Åne a cate-
gory PrO, having preorders as objects and preorder homomorphisms as morphisms (see
DeÔ¨Ånition 3.4.4.1). Show (to the level of detail of Example 4.1.1.5 that the rest of the
conditions for PrO to be a category are satisÔ¨Åed.
‚ô¶
Example 4.1.1.8 (Non-category 1). So what‚Äôs not a category? Two things can go wrong:
either one fails to specify all the relevant constituents (A, B, C, D from DeÔ¨Ånition 4.1.1.1,
or the constituents do not obey the laws (1, 2).
Let G be the following graph,
G ‚Äú
a‚Äö
f
/ b‚Äö
g
/ c‚Äö .
Suppose we try to deÔ¨Åne a category G by faithfully recording vertices as objects and
arrows as morphisms. Will that be a category?

116
CHAPTER 4. BASIC CATEGORY THEORY
Following that scheme, we put ObpGq ‚Äú ta, b, cu. For all 9 pairs of objects we need a
hom-set. Say
HomGpa, aq ‚Äú H
HomGpa, bq ‚Äú tfu
HomGpa, cq ‚Äú H
HomGpb, aq ‚Äú H
HomGpb, bq ‚Äú H
HomGpb, cq ‚Äú tgu
HomGpc, aq ‚Äú H
HomGpc, bq ‚Äú H
HomGpc, cq ‚Äú H
If we say we are done, the listener should object that we have given neither identities
nor a composition formula. In fact, it is impossible to give identities under our scheme,
because e.g. HomGpa, aq ‚Äú H.
Suppose we Ô¨Åx that problem, adding an element to each of our ‚Äúdiagonals‚Äù so that
HomGpa, aq ‚Äú tidau,
HomGpb, bq ‚Äú tidbu,
and
HomGpc, cq ‚Äú tidcu.
What about a composition formula? We need a function HomGpa, bq ÀÜ HomGpb, cq √ë
HomGpa, cq, but the domain is nonempty and the codomain is empty; there is no such
function.
Again, we must make a change, adding an element to make
HomGpa, cq ‚Äú thu.
We would now say g Àù f ‚Äú h. Finally, this does the trick and we have a category. A
computer could check this quickly, as can someone with good intuition for categories;
for everyone else, it may be a painstaking process involving determining whether there
is a unique composition formula for each of the 27 pairs of hom-sets and whether the
associative law holds in the 81 necessary cases. Luckily this computation is ‚Äúsparse‚Äù
(lots of H‚Äôs), so it‚Äôs not as bad as it Ô¨Årst seems.
Redrawing all the morphisms as arrows, our graph has become:
G ‚Äú
a‚Äö
ida
:
f
/
h
8
b‚Äö
idb

g
/ c‚Äö
idc
d
Example 4.1.1.9 (Non-category 2). In this example, we will make a faux-category F with
one object and many morphisms. The problem here will be our composition formula.
DeÔ¨Åne F to have one object ObpFq ‚Äú t,u, and HomFp,, ,q ‚Äú N. DeÔ¨Åne id, ‚Äú 1 P
N. DeÔ¨Åne the composition formula Àù: N ÀÜ N √ë N by m Àù n ‚Äú mn. This is a perfectly
cromulent function, but it does not work right as a composition formula. Indeed, for the
identity law to hold, we would need m1 ‚Äú m ‚Äú 1m, and one side of this is false. For the
associativity law to hold, we would need pmnqp ‚Äú mpnpq, but this is also not the case.
To Ô¨Åx this problem we have to completely revamp our composition formula. It would
work to use multiplication, m Àù n ‚Äú m Àö n. Then the identity law would read 1 Àö m ‚Äú
m ‚Äú mÀö1, and that holds; and the associativity law would read pmÀönqÀöp ‚Äú mÀöpnÀöpq,
and that holds.
Example 4.1.1.10 (The category of preorders with joins). Suppose that we are only
interested in preorders pX, ƒèq for which every pair of elements has a join. We saw in
Exercise 3.4.2.3 that not all preorders have this property.
However we can create a
category C in which every object does have this property. To begin we put ObpCq ‚Äú
tpX, ƒèq P ObpPrOq | pX, ƒèq has all joinsu. But what about morphisms?

4.1. CATEGORIES AND FUNCTORS
117
One option would be to put in no morphisms (other than identities), and to just
consider this collection of objects as having no structure other than a set.
Another option would be to put in exactly the same morphisms as in PrO: for any
objects a, b P ObpCq we consider a and b as regular old preorders, and put HomCpa, bq :‚Äú
HomPrOpa, bq. The resulting category of preorders with joins is called the full subcategory
of PrO spanned by the preorders with joins.3
A third option, and the one perhaps that would jump out to a category theorist, is
to take the choice about how we deÔ¨Åne our objects as a clue to how we should deÔ¨Åne
our morphisms. Namely, if we are so interested in joins, perhaps we want joins to be
preserved under morphisms. That is, if f : pX, ƒèXq √ë pY, ƒèY q is a morphism of preorders
then for any join w ‚Äú x _ x1 in X we might want to enforce that fpwq ‚Äú fpxq _ fpx1q in
Y . Thus a third possibility for the morphisms of C would be
HomCpa, bq :‚Äú tf P HomPrOpa, bq | f preserves joinsu.
One can check easily that the identity morphisms preserve joins and that compositions of
join-preserving morphisms are join-preserving, so this version of homomorphisms makes
for a well-deÔ¨Åned category.
Example 4.1.1.11 (Category FLin of Ô¨Ånite linear orders). We have a category PrO of
preorders, and some of its objects are Ô¨Ånite (nonempty) linear orders.
Let FLin be
the full subcategory of PrO spanned by the linear orders. That is, following DeÔ¨Ånition
3.4.4.1, given linear orders X, Y , every morphism of preorders X √ë Y counts as a
morphism in FLin:
HomFLinpX, Y q ‚Äú HomPrOpX, Y q.
Exercise 4.1.1.12. Let FLin be the category of Ô¨Ånite linear orders, deÔ¨Åned in Example
4.1.1.11. For n P N, let rns be the linear order deÔ¨Åned in Example 3.4.1.7. What are the
cardinalities of the following sets:
a.) HomFLinpr0s, r3sq;
b.) HomFLinpr3s, r0sq;
c.) HomFLinpr2s, r3sq;
d.) HomFLinpr1s, rnsq?
e.) (Challenge) HomFLinprms, rnsq?
It turns out that the category FLin of linear orders is suÔ¨Éciently rich that much of al-
gebraic topology (the study of arbitrary spaces, such as Mobius strips and 7-dimensional
spheres) can be understood in its terms. See Example 4.6.1.6.
‚ô¶
Example 4.1.1.13 (Category of graphs). We deÔ¨Åned graphs in DeÔ¨Ånition 3.3.1.1 and
graph homomorphisms in DeÔ¨Ånition 3.3.3.1. To see that these are suÔ¨Écient to form a
category is considered routine to a seasoned category-theorist, so let‚Äôs see why.
Since a morphism from G ‚Äú pV, A, src, tgtq to G1 ‚Äú pV 1, A1, src1, tgt1q involves two
functions f0 : V √ë V 1 and f1 : A √ë A1, the identity and composition formulas will
simply arise from the identity and composition formulas for sets.
Associativity will
follow similarly. The only thing that needs to be checked, really, is that the composition
of two such things, each satisfying (3.6), will itself satisfy (3.6). Just for completeness,
we check that now.
3The deÔ¨Ånition of full subcategories will be given as DeÔ¨Ånition 4.6.3.1.

118
CHAPTER 4. BASIC CATEGORY THEORY
Suppose that f ‚Äú pf0, f1q: G √ë G1 and g ‚Äú pg0, g1q: G1 √ë G2 are graph homomor-
phisms, where G2 ‚Äú pV 2, A2, src2, tgt2q. Then in each diagram below
A
f1
/
src

A1
g1
/
src1

A2
src2

V
f0
/ V 1
g0
/ V 2
A
f1
/
tgt

A1
tgt1

g1
/ A2
tgt2

V
f0
/ V 1
g0
/ V 2
(4.1)
the left-hand square commutes because f is a graph homomorphism and the right-hand
square commutes because g is a graph homomorphism. Thus the whole rectangle com-
mutes, meaning that g Àù f is a graph homomorphism, as desired.
We denote the category of graphs and graph homomorphisms by Grph.
Remark 4.1.1.14. When one is struggling to understand basic deÔ¨Ånitions, notation, and
style, a phase which naturally occurs when learning new mathematics (or any new lan-
guage), the above example will probably appear long and tiring. I‚Äôd say you‚Äôve mastered
the basics when the above example really does feel straightforward. Around this time,
I imagine you‚Äôll begin to get a sense of the remarkable organisational potential of the
categorical way of thinking.
Exercise 4.1.1.15. Let F be a vector Ô¨Åeld on R2. Recall that for two points x, x1 P R2,
any curve C with endpoints x and x1, and any parameterization r: ra, bs √ë C, the line
integral
≈ü
C Fprq¬®dr returns a real number. It does not depend on r, except its orientation
(direction). Therefore, if we think of C has having an orientation, say going from x to
x1, then
≈ü
C F is a well-deÔ¨Åned real number. If C goes from x to x1, let‚Äôs suggestively
write C : x √ë x1. DeÔ¨Åne an equivalence relation ‚Äû on the set of oriented curves in R2 by
saying C ‚Äû C1 if
‚Ä¢ C and C1 start at the same point,
‚Ä¢ C and C1 end at the same point, and
‚Ä¢
≈ü
C F ‚Äú
≈ü
C1 F.
Suppose we try to make a category CF as follows. Put ObpCF q ‚Äú R2, and for every
pair of points x, x1 P R2, let HomCF px, x1q ‚Äú tC : x √ë x1u{ ‚Äû, where C : x √ë x1 is an
oriented curve and ‚Äû means ‚Äúsame line integral‚Äù, as explained above.
Is there an identity morphism and a composition formula that will make CF into a
category?
‚ô¶
4.1.1.16
Isomorphisms
In any category we have a notion of isomorphism between objects.
DeÔ¨Ånition 4.1.1.17. Let C be a category and let X, Y P ObpCq be objects. An isomor-
phism f from X to Y is a morphism f : X √ë Y in C, such that there exists a morphism
g: Y √ë X in C such that
g Àù f ‚Äú idX
and
f Àù g ‚Äú idY .
In this case we say that the morphism f is invertible and that g is the inverse of f. We
may also say that the objects X and Y are isomorphic.

4.1. CATEGORIES AND FUNCTORS
119
Example 4.1.1.18. If C ‚Äú Set is the category of sets, then the above deÔ¨Ånition coincides
precisely with the one given in DeÔ¨Ånition 2.1.2.8.
Exercise 4.1.1.19. Suppose that G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q are
graphs and that f ‚Äú pf0, f1q: G √ë G1 is a graph homomorphism (as in DeÔ¨Ånition
3.3.3.1).
a.) If f is an isomorphism in Grph, does this imply that f0 : V √ë V 1 and f1 : A √ë A1
are isomorphisms in Set?
b.) If so, why; and if not, show a counterexample (where f is an isomorphism but either
f0 or f1 is not).
‚ô¶
Exercise 4.1.1.20. Suppose that G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q are
graphs and that f ‚Äú pf0, f1q: G √ë G1 is a graph homomorphism (as in DeÔ¨Ånition
3.3.3.1).
a.) If f0 : V √ë V 1 and f1 : A √ë A1 are isomorphisms in Set, does this imply that f is
an isomorphism in Grph?
b.) If so, why; and if not, show a counterexample (where f0 and f1 are isomorphisms
but f is not).
‚ô¶
Lemma 4.1.1.21. Let C be a category and let ‚Äû be the relation on ObpCq given by saying
X ‚Äû Y iÔ¨ÄX and Y are isomorphic. Then ‚Äû is an equivalence relation.
Proof. The proof of Lemma 2.1.2.12 can be mimicked in this more general setting.
‚ñ°
4.1.1.22
Another viewpoint on categories
Here is an alternate deÔ¨Ånition of category, using the work we did in Chapter 2.
Exercise 4.1.1.23. Suppose we begin our deÔ¨Ånition of category as follows.
A category, C consists of a sequence pObpCq, HomC, dom, cod, ids, Àùq, where
1. ObpCq is a set,4
2. HomC is a set, and dom, cod: HomC √ë ObpCq are functions,
3. ids: ObpCq √ë HomC is a function, and
4See Remark 4.1.1.2.

120
CHAPTER 4. BASIC CATEGORY THEORY
4. Àù is a function as depicted in the commutative diagram below
HomC
cod
)
dom
"
HomC ÀÜObpCq HomC
‚úì
‚úì
Àù
h
/

‚åü
HomC
cod /
dom

ObpCq
HomC
cod
/
dom

ObpCq
ObpCq
(4.2)
a.) Express the fact that for any x P ObpCq the morphism idx points from x to x in
terms of the functions id, dom, cod.
b.) Express the condition that composing a morphism f with an appropriate identity
morphism yields f.
c.) Express the associativity law in these terms (Hint: Proposition 2.5.1.17 may be
useful).
‚ô¶
Example 4.1.1.24 (Partial olog for a category). Below is an olog that captures some of
the essential structures of a category.
a morphism
in C
has as codomain
)
has as domain

a pair pg, fq
of composable
morphisms
‚úì
‚úì
has as composition
d
yields
as g
/
yields as f

‚åü
a morphism
in C
has as
codomain
/
has as domain

an object of C
a morphism
in C
has as
codomain
/
has as domain

an object of C
an object of C
(4.3)
Missing from (4.3) is the notion of identity morphism (as an arrow from ‚åúan object
of C‚åùto ‚åúa morphism in C‚åù) and the associated path equivalences, as well as the identity

4.1. CATEGORIES AND FUNCTORS
121
and associativity laws. All of these can be added to the olog, at the expense of some
clutter.
Remark 4.1.1.25. Perhaps it is already clear that category theory is very interconnected.
It may feel like everything relates to everything, and this feeling may intensify as you
go on. However, the relationships between diÔ¨Äerent notions are rigorously deÔ¨Åned, and
not random. Moreover, almost everything presented in this book can be formalized in
a proof system like Coq (the most obvious exceptions being things like the readability
requirement of ologs and the modeling of scientiÔ¨Åc applications).
Whenever you feel cognitive vertigo, look to formal deÔ¨Ånitions as the ground of your
understanding.
It is good practice to make sure that the intuition you‚Äôve developed
actually ‚Äútouches down‚Äù on that ground, i.e. that your way of thinking can be built up
solidly from the foundational deÔ¨Ånitions.
4.1.2
Functors
A category C ‚Äú pObpCq, HomC, dom, cod, ids, Àùq, involves a set of objects, a set of mor-
phisms, a notion of domains and codomains, a notion of identity morphisms, and a
composition formula. For two categories to be comparable, these various components
should be appropriately comparable.
DeÔ¨Ånition 4.1.2.1. Let C and C1 be categories. A functor F from C to C1, denoted
F : C √ë C1, is deÔ¨Åned as follows: One announces some constituents (A. on-objects part,
B. on-morphisms part) and asserts that they conform to some laws (1. preservation of
identities, 2. preservation of composition). SpeciÔ¨Åcally, one announces
A. a function ObpFq: ObpCq √ë ObpC1q, which we sometimes denote simply by
F : ObpCq √ë ObpC1q; and
B. for every pair of objects c, d P ObpCq, a function
HomF pc, dq: HomCpc, dq √ë HomC1pFpcq, Fpdqq,
which we sometimes denote simply by F : HomCpc, dq √ë HomC1pFpcq, Fpdqq.
One asserts that the following laws hold:
1. Identities are preserved by F.
That is, for any object c P ObpCq, we have
Fpidcq ‚Äú idF pcq; and
2. Composition is preserved by F.
That is, for any objects b, c, d P ObpCq and
morphisms g: b √ë c and h: c √ë d, we have Fph Àù gq ‚Äú Fphq Àù Fpgq.
Example 4.1.2.2 (Monoids have underlying sets). Recall from DeÔ¨Ånition 3.1.1.1 that if
M ‚Äú pM, e, ‚Äπq is a monoid, then M is a set. And recall from DeÔ¨Ånition 3.1.4.1 that if
f : M √ë M1 is a monoid homomorphism then f : M √ë M 1 is a function. Thus we have
a functor
U : Mon √ë Set
that takes every monoid to its underlying set and every monoid homomorphism to its
underlying function.
Given two monoids M ‚Äú pM, e, ‚Äπq and M1 ‚Äú pM 1, e1, ‚Äπ1q, there may be many func-
tions from M to M 1 that do not arise from monoid homomorphisms. It is often useful to
speak of such functions. For example, one could assign to every command in one video

122
CHAPTER 4. BASIC CATEGORY THEORY
game V a command in another video game V 1, but this may not work in the ‚Äúmonoidy
way‚Äù when performing a sequence of commands. By being able to speak of M as a set,
or as M as a monoid, and understanding the relationship U between them, we can be
clear about where we stand at all times in our discussion.
Example 4.1.2.3 (Groups have underlying monoids). Recall that a group is just a monoid
pM, e, ‚Äπq with the extra property that every element m P M has an inverse m1 ‚Äπ m ‚Äú e ‚Äú
m ‚Äπ m1. Thus to every group we can assign its underlying monoid. Similarly, a group
homomorphism is just a monoid homomorphism of its underlying monoids. This means
that there is a functor
U : Grp √ë Mon
that sends every group or group homomorphism to its underlying monoid or monoid
homomorphism. That identity and composition are preserved is obvious.
Slogan 4.1.2.4.
‚Äú Out of all our available actions, some are reversable. ‚Äù
Application 4.1.2.5. Suppose you‚Äôre a scientist working with symmetries. But then sup-
pose that the symmetry breaks somewhere, or you add some extra observable which is
not reversible under the symmetry. You want to seamlessly relax the requirement that
every action be reversible without changing anything else. You want to know where you
can go, or what‚Äôs allowed. The answer is to simply pass from the category of groups (or
group actions) to the category of monoids (or monoid actions).
We can also reverse this change of perspective. Recall that in Example 3.1.2.9 we
discussed a monoid M controlling the actions of a video game character. The character
position (P) could be moved up (u), moved down (d), or moved right (r). The path
equivalences P.u.d ‚Äú P and P.d.u ‚Äú P imply that these two actions are mutually
inverse, whereas moving right has no inverse.
This, plus equivalences P.r.u ‚Äú P.u.r
and P.r.d ‚Äú P.d.r, deÔ¨Åned a monoid M.
Inside M is a submonoid G, which includes just upward and downward movement.
It has one object, just like M, i.e. ObpMq ‚Äú tPu ‚Äú ObpGq. But it has fewer morphisms.
In fact there is a monoid isomorphism G ‚Äì Z because we can assign to any movement in
G the number of ups, e.g. P.u.u.u.u.u is assigned the integer 5, P.d.d.d is assigned the
integer ¬¥3, and P.d.u.u.d.d.u is assigned the integer 0 P Z. But Z is a group, because
every integer has an inverse.
Thus we can consider G as a group G1 P ObpGrpq or as a monoid G2 P ObpMonq.
It is better to consider G as a group, because groups are more structured than monoids.
It‚Äôs as though putting G in Grp gives it more ‚Äúpotential energy‚Äù than putting it in Mon
‚Äî we can always ‚Äúdrop it down‚Äù from Grp to Mon, but not vice versa. The way to
make this precise is that we can make use of the functor U : Grp √ë Mon from Example
4.1.2.3 and Ô¨Ånd that UpG1q ‚Äú G2. But to Ô¨Ånd a functor F : Mon √ë Grp such that
FpG2q ‚Äú G1 would be much more ad hoc.
The upshot is that we can use functors to compare groups and monoids.
‚ô¶‚ô¶
Example 4.1.2.6. Recall that we have a category Set of sets and a category Fin of
Ô¨Ånite sets. We said that Fin was a subcategory of Set. In fact we can think of this
‚Äúsubcategory‚Äù relationship in terms of functors, just like we thought of the ‚Äúsubset‚Äù
relationship in terms of functions in Example 2.1.2.3.
That is, if we have a subset

4.1. CATEGORIES AND FUNCTORS
123
S ƒé S1, then every element s P S is an element of S1, so we make a function f : S √ë S1
such that fpsq ‚Äú s P S1.
To give a functor i: Fin √ë Set, we have to announce how it will work on objects
and how it will work on morphisms. We begin by announcing a function i: ObpFinq √ë
ObpSetq. But that‚Äôs easy because ObpFinq ƒé ObpSetq, so we proceed as above: ipSq ‚Äú S
for any S P ObpFinq. We also have announce, for each pair of objects S, S1 P ObpFinq,
a function
i: HomFinpS, S1q √ë HomSetpS, S1q.
But again, that‚Äôs easy because we know by deÔ¨Ånition (see Example 4.1.1.4) that these
two sets are equal, HomFinpS, S1q ‚Äú HomSetpS, S1q. Hence we can simply take i to be
the identity function on morphisms. It is easy to see that identites and compositions are
preserved by i. Therefore, we have deÔ¨Åned a functor i.
Exercise 4.1.2.7 (Forgetful functors between types of orders). A partial order is just a
preorder with a special property. A linear order is just a partial order with a special
property.
a.) Is there an ‚Äúobvious‚Äù functor FLin √ë PrO?
b.) Is there an ‚Äúobvious‚Äù functor PrO √ë FLin?
‚ô¶
Proposition 4.1.2.8 (Preorders to graphs). Let PrO be the category of preorders and
Grph be the category of graphs. There is a functor P : PrO √ë Grph such that for any
preorder X ‚Äú pX, ƒèq, the graph PpXq has vertices X.
Proof. Given a preorder X ‚Äú pX, ƒèXq, we can make a graph FpXq with vertices X
and an arrow x √ë x1 whenever x ƒèX x1, as in Remark 3.4.1.10. More precisely, the
preorder ƒèX is a relation, i.e. a subset RX ƒé X ÀÜ X, which we think of as a function
i: RX √ë X ÀÜ X. Composing with projections œÄ1, œÄ2 : X ÀÜ X √ë X gives us
srcX :‚Äú œÄ1 Àù i: RX √ë X
and
tgtX :‚Äú œÄ2 Àù i: RX √ë X.
Then we put FpXq :‚Äú pX, RX , srcX , tgtX q. This gives us a function F : ObpPrOq √ë
ObpGrphq.
Suppose now that f : X √ë Y is a preorder morphism (where Y ‚Äú pY, ƒèY q). This is a
function f : X √ë Y such that for any px, x1q P X ÀÜX, if x ƒèX x1 then fpxq ƒè fpx1q. But
that‚Äôs the same as saying that there exists a dotted arrow making the following diagram
of sets commute
RX
/

X ÀÜ X
fÀÜf

RY
/ Y ÀÜ Y
(Note that there cannot be two diÔ¨Äerent dotted arrows making that diagram commute
because RY √ë Y ÀÜ Y is a monomorphism.) Our commutative square is precisely what‚Äôs
needed for a graph homomorphism, as shown in Exercise 3.3.3.7. Thus, we have deÔ¨Åned
F on objects and on morphisms. It is clear that F preserves identity and composition.
‚ñ°
Exercise 4.1.2.9. In Proposition 4.1.2.8 we gave a functor P : PrO √ë Grph.

124
CHAPTER 4. BASIC CATEGORY THEORY
a.) Is every graph G P ObpGrphq in the image of P (or more precisely, is the function
ObpPq: ObpPrOq √ë ObpGrphq
surjective)?
b.) If so, why; if not, name a graph not in the image.
c.) Suppose that G, H P ObpGrphq are two graphs that are in the image of P. Is every
graph homomorphism f : G √ë H in the image of HomP ? In other words, does every
graph homomorphism between G and H come from a preorder homomorphism?
‚ô¶
Remark 4.1.2.10. There is a functor W : PrO √ë Set sending pX, ƒèq to X.
There
is a functor T : Grph √ë Set sending pV, A, src, tgtq to V . When we understand the
category of categories (Section 4.1.2.27), it will be clear that Proposition 4.1.2.8 can be
summarized as a commutative triangle in Cat,
PrO
P
/
W

Grph
T

Set
Exercise 4.1.2.11 (Graphs to preorders). Recall from (2.3) that every function f : A √ë
B has an image, imfpAq ƒé B.
Use this idea and Example 3.4.1.16 to construct a
functor Im: Grph √ë PrO such that for any graph G ‚Äú pV, A, src, tgtq, the preorder
has elements given by the vertices of G (i.e. we have ImpGq ‚Äú pV, ƒèGq, for some ordering
ƒèG).
‚ô¶
Exercise 4.1.2.12. What is the preorder ImpGq when G P ObpGrphq is the following
graph?
G :‚Äú
v‚Äö
f
/ w‚Äö
h
?
g
 x‚Äö
y‚Äö
i

j
 z‚Äö
k
_
‚ô¶
Exercise 4.1.2.13. Consider the functor Im: Grph √ë PrO constructed in Exercise
4.1.2.11.
a.) Is every preorder X P ObpPrOq in the image of Im (or more precisely in the image
of ObpImq: ObpGrphq √ë ObpPrOq)?
b.) If so, why; if not, name a preorder not in the image.
c.) Suppose that X, Y P ObpPrOq are two preorders that are in the image of Im. Is
every preorder morphism f : X √ë Y in the image of HomIm? In other words, does
every preorder homomorphism between X and Y come from a graph homomorphism?

4.1. CATEGORIES AND FUNCTORS
125
‚ô¶
Exercise 4.1.2.14. We have functors P : PrO √ë Grph and Im: Grph √ë PrO.
a.) What can you say about Im Àù P : PrO √ë PrO?
b.) What can you say about P Àù Im: Grph √ë Grph?
‚ô¶
Exercise 4.1.2.15. Consider the functors P : PrO √ë Grph and Im: Grph √ë PrO.
And consider the chain graph rns of length n from Example 3.3.1.8 and the linear order
rns of length n from Example 3.4.1.7. To diÔ¨Äerentiate the two, let‚Äôs rename them for
this exercise as rnsGrph P ObpGrphq and rnsPrO P ObpPrOq.
We see a similarity
between rnsGrph and rnsPrO, and we might hope that our functors help us formalize this
similarity. That is, we might hope that one of the following hold:
PprnsPrOq ‚Äì? rnsGrph
or
ImprnsGrphq ‚Äì? rnsPrO.
Do either, both, or neither of these hold?
‚ô¶
Remark 4.1.2.16. In the course announcement for 18-S996, I wrote the following:
It is often useful to focus ones study by viewing an individual thing, or a
group of things, as though it exists in isolation.
However, the ability to
rigorously change our point of view, seeing our object of study in a diÔ¨Äerent
context, often yields unexpected insights. Moreover this ability to change
perspective is indispensable for eÔ¨Äectively communicating with and learning
from others. It is the relationships between things, rather than the things
in and by themselves, that are responsible for generating the rich variety
of phenomena we observe in the physical, informational, and mathematical
worlds.
This holds at many diÔ¨Äerent levels. For example, one can study a group (in the sense of
DeÔ¨Ånition 3.2.1.1) in isolation, trying to understand its subgroups or its automorphisms,
and this is mathematically interesting. But one can also view it as a quotient of something
else, or as a subgroup of something else. One can view the group as a monoid and look
at monoid homomorphisms to or from it. One can look at the group in the context of
symmetries by seeing how it acts on sets. These changes of viewpoint are all clearly
and formally expressible within category theory. We know how the diÔ¨Äerent changes of
viewpoint compose and how they Ô¨Åt together in a larger context.
Exercise 4.1.2.17.
a.) Is the above quote also true in your scientiÔ¨Åc discipline of expertise? How so?
b.) Can you imagine a way that category theory can help catalogue the kinds of rela-
tionships or changes of viewpoint that exist in your discipline?
c.) What kinds of structures that you use often really deserve to be better formalized?
Keep this kind of question in mind for your Ô¨Ånal project.
‚ô¶
Example 4.1.2.18 (Free monoids). Let G be a set. We saw in 3.1.1.15 that ListpGq is a
monoid, called the free monoid on G. Given a function f : G √ë G1, there is an induced
function Listpfq: ListpGq √ë ListpG1q, and this preserves the identity element r s and
concatenation of lists, so Listpfq is a monoid homomorphism. It is easy to check that
List: Set √ë Mon is a functor.

126
CHAPTER 4. BASIC CATEGORY THEORY
Application 4.1.2.19. In Application 2.1.2.10 we discussed an isomorphism NucDNA ‚Äì
NucRNA given by RNA transcription. Applying the functor List we get a function
ListpNucDNAq ‚Äì
√ù√ë ListpNucRNAq,
which will send sequences of DNA nucleotides to sequences of RNA nucleotides and vice
versa. This is performed by polymerases.
‚ô¶‚ô¶
Exercise 4.1.2.20. Let G ‚Äú t1, 2, 3, 4, 5u, G1 ‚Äú ta, b, cu, and let f : G √ë G1 be given by
the sequence pa, c, b, a, cq.5 Then if L ‚Äú r1, 1, 3, 5, 4, 5, 3, 2, 4, 1s, what is ListpfqpLq?
‚ô¶
Exercise 4.1.2.21. We can rephrase our notion of functor in terms compatible with Ex-
ercise 4.1.1.23. We would begin by saying that a functor F : C √ë C1 consists of two
functions,
ObpFq: ObpCq √ë ObpC1q
and
HomF : HomC √ë HomC1,
which we call the on-objects part and the on-morphisms part, respectively. They must
follow some rules, expressed by the commutativity of the following squares in Set:
HomC
dom /
HomF

ObpCq
ObpF q

HomC1
dom / ObpC1q
HomC
cod /
HomF

ObpCq
ObpF q

HomC1
cod / ObpC1q
(4.4)
ObpCq
ObpF q

id
/ HomC
HomF

ObpC1q
id
/ HomC1
HomC ÀÜObpCq HomC
Àù
/

HomC
HomF

HomC1 ÀÜObpC1q HomC1
Àù
/ HomC1
(4.5)
Where does the (unlabeled) left-hand function in the bottom right diagram come from?
Hint: use Exercise 2.5.1.19.
Consider Diagram (4.2) and imagine it as though contained in a pane of glass. Then
imagine a parallel pane of glass involving C1 in place of C everywhere.
a.) Draw arrows from the C pane to the C1 pane, each labeled ObpFq or HomF as seems
appropriate.
b.) If F is a functor (i.e. satisÔ¨Åes (4.4) and (4.5)), do all the squares in your drawing
commute?
c.) Does the deÔ¨Ånition of functor involve anything not captured in this setup?
‚ô¶
Example 4.1.2.22 (Paths-graph). Let G ‚Äú pV, A, src, tgtq be a graph. Then for any pair of
vertices v, w P G, there is a set PathGpv, wq of paths from v to w; see DeÔ¨Ånition 3.3.2.1.
5See Exercise 2.1.2.15 in case there is any confusion with this.

4.1. CATEGORIES AND FUNCTORS
127
In fact there is a set PathG and functions src, tgt: PathG √ë V . That information is
enough to deÔ¨Åne a new graph,
PathspGq :‚Äú pV, PathG, src, tgtq.
Moreover, given a graph homomorphism f : G √ë G1, every path in G is sent under f
to a path in G1. So Paths: Grph √ë Grph is a functor.
Exercise 4.1.2.23.
a.) Consider the graph G from Example 3.3.3.3. Draw the paths-graph PathspGq for G.
b.) Repeating the above exercise for G1 from the same example would be hard, because
the path graph PathspG1q has inÔ¨Ånitely many arrows. However, the graph homomor-
phism f : G √ë G1 does induce a morphism of paths-graphs Pathspfq: PathspGq √ë
PathspG1q, and it is possible to say how that acts on the vertices and arrows of
PathspGq. Please do so.
c.) Given a graph homomorphism f : G √ë G1 and two paths p: v √ë w and q: w √ë x in
G, is it true that Pathspfq preserves the concatenation? What does that even mean?
‚ô¶
Exercise 4.1.2.24. Suppose that C and D are categories, c, c1 P ObpCq are objects, and
F : C √ë D is a functor. Suppose that c and c1 are isomorphic in C. Show that this
implies that Fpcq and Fpc1q are isomorphic in D.
‚ô¶
Example 4.1.2.25. For any graph G, we can assign its set of loops EqpGq as in Exercise
3.3.1.12. This assignment is functorial in that given a graph homomorphism G √ë G1
there is an induced function EqpGq √ë EqpG1q. Similarly, we can functorially assign the
set of connected components of the graph, CoeqpGq. In other words Eq: Grph √ë Set
and Coeq: Grph √ë Set are functors. The assignment of vertex set and arrow set are
two more functors Grph √ë Set.
Suppose you want to decide whether two graphs G and G1 are isomorphic. Supposing
that the graphs have thousands of vertices and thousands of arrows, this could take a
long time. However, the functors above, in combination with Exercise 4.1.2.24 give us
some things to try.
The Ô¨Årst thing to do is to count the number of loops of each, because these numbers
are generally small. If the number of loops in G is diÔ¨Äerent than the number of loops
in G1 then because functors preserve isomorphisms, G and G1 cannot be isomorphic.
Similarly one can count the number of connected components, again generally a small
number; if the number of components in G is diÔ¨Äerent than the number of components
in G1 then G ¬≠‚Äì G1. Similarly, one can simply count the number of vertices or the number
of arrows in G and G1. These are all isomorphism invariants.
All this is a bit like trying to decide if a number is prime by checking if it‚Äôs even, if
its digits add up to a multiple of 3, or it ends in a 5; these tests do not determine the
answer, but they oÔ¨Äer some level of discernment.
Remark 4.1.2.26. In the introduction I said that functors allow ideas in one domain to
be rigorously imported to another. Example 4.1.2.25 is a Ô¨Årst taste. Because functors
preserve isomorphisms, we can tell graphs apart by looking at them in a simpler category,
Set.
There is relatively simple theorem in Set that says that for diÔ¨Äerent natural
numbers m, n the sets m and n are never isomorphic. This theorem is transported via
our four functors to four diÔ¨Äerent theorems about telling graphs apart.

128
CHAPTER 4. BASIC CATEGORY THEORY
4.1.2.27
The category of categories
Recall from Remark 4.1.1.2 that a small category C is one in which ObpCq is a set. We
have not really been paying attention to this issue, and everything we have said so far
works whether C is small or not. In the following deÔ¨Ånition we really ought to be a little
more careful, so we are.
Proposition 4.1.2.28. There exists a category, called the category of small categories
and denoted Cat, in which the objects are the small categories and the morphisms are
the functors,
HomCatpC, Dq ‚Äú tF : C √ë D | F is a functoru.
That is, there are identity functors, functors can be composed, and the identity and
associativity laws hold.
Proof. We follow DeÔ¨Ånition 4.1.1.1. We have speciÔ¨Åed ObpCatq and HomCat already.
Given a small category C, there is an identity functor idC : C √ë C that is identity on the
set of objects and the set of morphisms. And given a functor F : C √ë D and a functor
G: D √ë E, it is easy to check that G Àù F : C √ë E, deÔ¨Åned by composition of functions
ObpGq Àù ObpFq: ObpCq √ë ObpEq and HomG Àù HomF : HomC √ë HomE (see Exercise
4.1.2.21), is a functor. For the same reasons, it is easy to show that functors obey the
identity law and the composition formula. Therefore this speciÔ¨Åcation of Cat satisÔ¨Åes
the deÔ¨Ånition of being a category.
‚ñ°
Example 4.1.2.29 (Categories have underlying graphs). Let C ‚Äú pObpCq, HomC, dom, cod, ids, Àùq
be a category (see Exercise 4.1.1.23). Then pObpCq, HomC, dom, codq is a graph, which we
will call the graph underlying C and denote by UpCq P ObpGrphq. A functor F : C √ë D
induces a graph morphism UpFq: UpCq √ë UpDq, as seen in (4.4). So we have a functor,
U : Cat √ë Grph.
Example 4.1.2.30 (Free category on a graph). In Example 4.1.2.22, we discussed a functor
Paths: Grph √ë Grph that considered all the paths in a graph G as the arrows of a
new graph PathspGq. In fact, PathspGq could be construed as a category, which we will
denote FpGq P ObpCatq and call the free category generated by G.
Here, the objects of the category FpGq are the vertices of G. For any two vertices v, v1
the hom-set HomF pGqpv, v1q is the set of paths in G from v to v1. The identity elements
are given by the trivial paths, and the composition formula is given by concatenation of
paths.
To see that F is a functor, we need to see that a graph homomorphism f : G √ë G1
induces a functor Fpfq: FpGq √ë FpG1q. But this was shown in Exercise 4.1.2.23. Thus
we have a functor
F : Grph √ë Cat
called the free category functor.
Exercise 4.1.2.31. Let G be the graph depicted
v0‚Äö
e
√ù√ù√ù√ù√ù√ë
v1‚Äö,
and let r1s P ObpCatq denote the free category on G (see Example 4.1.2.30). We call r1s
the free arrow category.

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS129
a.) What are its objects?
b.) For every pair of objects in r1s, write down the hom-set.
‚ô¶
Exercise 4.1.2.32. Let G be the graph whose vertices are all cities in the US and whose
arrows are airplane Ô¨Çights connecting cities. What idea is captured by the free category
on G?
‚ô¶
Exercise 4.1.2.33. Let F : Grph √ë Cat denote the free category functor from Example
4.1.2.30, and let U : Cat √ë Grph denote the underlying graph functor from Example
4.1.2.29. We have seen the composition U Àù F : Grph √ë Grph before; what was it
called?
‚ô¶
Exercise 4.1.2.34. Recall the graph G from Example 3.3.1.2. Let C ‚Äú FpGq be the free
category on G.
a.) What is HomCpv, xq?
b.) What is HomCpx, vq?
‚ô¶
Example 4.1.2.35 (Discrete graphs, discrete categories). There is a functor Disc: Set √ë
Grph that sends a set S to the graph
DiscpSq :‚Äú pS, H, !, !q,
where !: H √ë S is the unique function. We call DiscpSq the discrete graph on the set S.
It is clear that a function S √ë S1 induces a morphism of discrete graphs. Now applying
the free category functor F : Grph √ë Cat, we get the so-called discrete category on the
set S, which we also might call Disc: Set √ë Cat.
Exercise 4.1.2.36. Recall from (2.6) the deÔ¨Ånition of the set n for any natural number
n P N, and let Dn :‚Äú Discpnq P ObpCatq.
a.) List all the morphisms in D4.
b.) List all the functors D3 √ë D2.
‚ô¶
Exercise 4.1.2.37 (Terminal category). Let C be a category. How many functors are there
C √ë D1, where D1 :‚Äú Discp1q is the discrete category on one element?
‚ô¶
We sometimes refer to Discp1q as the terminal category (for reasons that will be made
clear in Section 4.5.3), and for simplicity denote it by 1.
Exercise 4.1.2.38. If someone said ‚ÄúOb is a functor from Cat to Set,‚Äù what might they
mean?
‚ô¶
4.2
Categories and functors commonly arising in math-
ematics
4.2.1
Monoids, groups, preorders, and graphs
We saw in Section 4.1.1 that there is a category Mon of monoids, a category Grp of
groups, a category PrO of preorders, and a category Grph of graphs. In this section we

130
CHAPTER 4. BASIC CATEGORY THEORY
show that each monoid M, each group G, and each preorder P can be considered as its
own category. If each object in Mon is a category, we might hope that each morphism
in Mon is just a functor, and this is true. The same holds for Grp and PrO. We will
deal with graphs in Section 4.2.1.20.
4.2.1.1
Monoids as categories
In Example 3.1.2.9 we said that to olog a monoid, we should use only one box. And
again in Example 3.5.3.3 we said that a monoid action could be captured by only one
table. These ideas emanated from the understanding that a monoid is perfectly modeled
as a category with one object.
Each monoid as a category with one object
Let pM, e, ‚Äπq be a monoid.
We
consider it as a category M with one object, ObpMq ‚Äú t‚ñ≤u, and
HomMp‚ñ≤, ‚ñ≤q :‚Äú M.
The identity morphism id‚ñ≤serves as the monoid identity e, and the composition formula
Àù: HomMp‚ñ≤, ‚ñ≤q ÀÜ HomMp‚ñ≤, ‚ñ≤q √ë HomMp‚ñ≤, ‚ñ≤q
is given by ‚Äπ: M ÀÜ M √ë M. The associativity and identity laws for the monoid match
precisely with the associativity and identity laws for categories.
If monoids are categories with one object, is there any categorical way of phrasing the
notion of monoid homomorphism? Suppose that M ‚Äú pM, e, ‚Äπq and M1 ‚Äú pM 1, e1, ‚Äπ1q.
We know that a monoid homomorphism is a function f : M √ë M 1 such that fpeq ‚Äú e1
and such that for every pair m0, m1 P M we have fpm0 ‚Äπ m1q ‚Äú fpm0q ‚Äπ1 fpm1q. What
is a functor M √ë M1?
Each monoid homomorphism as a functor between one-object categories
Say
that ObpMq ‚Äú t‚ñ≤u and ObpM1q ‚Äú t‚ñ≤1u; and we know that HomMp‚ñ≤, ‚ñ≤q ‚Äú M and
HomM1p‚ñ≤1, ‚ñ≤1q ‚Äú M 1. A functor F : M √ë M1 consists Ô¨Årst of a function ObpMq √ë
ObpM1q, but these sets have only one element each, so there is nothing to say on that
front. It also consists of a function HomM √ë homM1 but that is just a function M √ë M 1.
The identity and composition formulas for functors match precisely with the identity and
composition formula for monoid homomorphisms, as discussed above. Thus a monoid
homomorphism is nothing more than a functor between one-object categories.
Slogan 4.2.1.2.
‚Äú A monoid is a category G with one object. A monoid homomorphism is
just a functor between one-object categories. ‚Äù
We formalize this as the following theorem.
Theorem 4.2.1.3. There is a functor i: Mon √ë Cat with the following properties:
‚Ä¢ for every monoid M P ObpMonq, the category ipMq P ObpCatq itself has exactly
one object,
|ObpipMqq| ‚Äú 1

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS131
‚Ä¢ for every pair of monoids M, M1 P ObpMonq the function
HomMonpM, M1q ‚Äì
√ù√ë HomCatpipMq, ipM1qq,
induced by the functor i, is a bijection.
Proof. This is basically the content of the preceding paragraphs. The functor i sends a
monoid to the corresponding category with one object and i sends a monoid homomor-
phism to the corresponding functor; it is not hard to check that i preserves identities
and compositions.
‚ñ°
Theorem 4.2.1.3 situates the theory of monoids very nicely within the world of cate-
gories. But we have other ways of thinking about monoids, namely their actions on sets.
As such it would greatly strengthen the story if we could subsume monoid actions within
category theory also, and we can.
Each monoid action as a set-valued functor
Recall from DeÔ¨Ånition 3.1.2.1 that if
pM, e, ‚Äπq is a monoid, an action consists of a set S and a function √º: M ÀÜ S √ë S such
that e √º s ‚Äú s and m0 √º pm1 √º sq ‚Äú pm0 ‚Äπ m1q √º s for all s P S. How might we relate
the notion of monoid actions to the notion of functors? One idea is to try asking what
a functor F : M √ë Set is; this idea will work.
Since M has only one object, we obtain one set, S :‚Äú Fp‚ñ≤q P ObpSetq. We also
obtain a function HomF : HomMp‚ñ≤, ‚ñ≤q √ë HomSetpFp‚ñ≤q, Fp‚ñ≤qq, or more concisely, a
function
HF : M √ë HomSetpS, Sq.
By currying (see Proposition 2.7.2.3), this is the same as a function √º: M ÀÜS √ë S. The
rule that e √º s ‚Äú s becomes the rule that functors preserve identities, HomF pid‚ñ≤q ‚Äú idS.
The other rule is equivalent to the composition formula for functors.
4.2.1.4
Groups as categories
A group is just a monoid pM, e, ‚Äπq in which every element m P M is invertible, meaning
there exists some m1 P M with m ‚Äπ m1 ‚Äú e ‚Äú m1 ‚Äπ m. If a monoid is the same thing
as a category M with one object, then a group must be a category with one object
and with an additional property having to do with invertibility. The elements of M are
the morphisms of the category M, so we need a notion of invertibility for morphisms.
Luckily we have such a notion already, namely isomorphism. We have the following:
Slogan 4.2.1.5.
‚Äú A group is a category G with one object, such that every morphism in G
is an isomorphism. A group homomorphism is just a functor between such
categories. ‚Äù
Theorem 4.2.1.6. There is a functor i: Grp √ë Cat with the following properties:
‚Ä¢ for every group G P ObpGrpq, the category ipGq P ObpCatq itself has exactly one
object, and every morphism m in ipGq is an isomorphism; and

132
CHAPTER 4. BASIC CATEGORY THEORY
‚Ä¢ for every pair of groups G, G1 P ObpGrpq the function
HomGrppG, G1q ‚Äì
√ù√ë HomCatpipGq, ipG1qq,
induced by the functor i, is a bijection.
Just as with monoids, an action of some group pG, e, ‚Äπq on a set S P ObpSetq is the
same thing as a functor G √ë Set sending the unique object of G to the set S.
4.2.1.7
Monoid and group stationed at each object in a category
If a monoid is just a category with one object, we can locate monoids in any category C
by narrowing our gaze to one object in C. Similarly for groups.
Example 4.2.1.8 (Endomorphism monoid). Let C be a category and x P ObpCq an object.
Let M ‚Äú HomCpx, xq. Note that for any two elements f, g P M we have f Àù g: x √ë x
in M. Let M ‚Äú pM, idx, Àùq. It is easy to check that M is a monoid; it is called the
endomorphism monoid of x in C.
Example 4.2.1.9 (Automorphism group). Let C be a category and x P ObpCq an object.
Let G ‚Äú tf : x √ë x | f is an isomorphismu. Let G ‚Äú pG, idx, Àùq. It is easy to check that
G is a group; it is called the automorphism group of x in C.
Exercise 4.2.1.10. Let S ‚Äú t1, 2, 3, 4u P ObpSetq.
a.) What is the automorphism group of S in Set, and how many elements does this
group have?
b.) What is the endomorphism monoid of S in Set, and how many elements does this
monoid have?
c.) Recall from Example 4.1.2.3 that every group has an underlying monoid UpGq; is
the endomorphism monoid of S the underlying monoid of the automorphism group
of S?
‚ô¶
Exercise 4.2.1.11. Consider the graph G depicted below.
1‚Äö
12
,
13

2‚Äö
24

21
l
3‚Äö
34
,
31
L
4‚Äö
42
L
43
l
What is its group of automorphisms? Hint: every automorphism of G will induce an
automorphism of the set t1, 2, 3, 4u; which ones will preserve the arrows?
‚ô¶
4.2.1.12
Preorders as categories
A preorder pX, ƒèq consists of a set X and a binary relation ƒè that is reÔ¨Çexive and
transitive. We can make from pX, ƒèq P ObpPrOq a category X P ObpCatq as follows.
DeÔ¨Åne ObpXq ‚Äú X and for every two objects x, y P X deÔ¨Åne
HomX px, yq ‚Äú
#
t‚Äúx ƒè y‚Äùu
if x ƒè y
H
if x ƒô y

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS133
To clarify: if x ƒè y, we assign HomX px, yq to be the set containing only one element,
namely the string ‚Äúx ƒè y‚Äù.6 If px, yq is not in relation ƒè, then we assign HomX px, yq to
be the empty set. The composition formula
Àù: HomX px, yq ÀÜ HomX py, zq √ë HomX px, zq
(4.6)
is completely determined because either one of two possibilities occurs. One possibility
is that the left-hand side is empty (if either x ƒô y or y ƒô z; in this case there is a unique
function Àù as in (4.6). The other possibility is that the left-hand side is not empty in
case x ƒè y and y ƒè, which implies x ƒè z, so the right-hand side has exactly one element
‚Äúx ƒè z‚Äù in which case again there is a unique function Àù as in (4.6).
On the other hand, if C is a category having the property that for every pair of objects
x, y P ObpCq, the set HomCpx, yq is either empty or has one element, then we can form
a preorder out of C. Namely, take X ‚Äú ObpCq and say x ƒè y if there exists a morphism
x √ë y in C.
Exercise 4.2.1.13. We have seen that a preorder can be considered as a category P. Recall
from DeÔ¨Ånition 3.4.1.1 that a partial order is a preorder with an additional property.
Phrase the deÔ¨Åning property for partial orders in terms of isomorphisms in the category
P.
‚ô¶
Exercise 4.2.1.14. Suppose that C is a preorder (considered as a category). Let x, y P
ObpCq be objects such that x ƒè y and y ƒè x. Prove that there is an isomorphism x √ë y
in C.
‚ô¶
Example 4.2.1.15. The olog from Example 3.4.1.3 depicted a partial order, say P. In it
we have
HomPp‚åúa diamond‚åù, ‚åúa red card‚åùq ‚Äú tisu
and we have
HomPp‚åúa black queen‚åù, ‚åúa card‚åùq ‚Äì tis Àù isu;
Both of these sets contain exactly one element, the name is not important. The set
HomPp‚åúa 4‚åù, ‚åúa 4 of diamonds‚åùq ‚Äú H.
Exercise 4.2.1.16. Every linear order is a partial order with a special property. Can you
phrase this property in terms of hom-sets?
‚ô¶
Proposition 4.2.1.17. There is a functor i: PrO √ë Cat with the following properties
for every preorder pX, ƒèq:
1. the category X :‚Äú ipX, ƒèq has objects ObpXq ‚Äú X; and
2. for each pair of elements x, x1 P ObpXq the set HomX px, x1q has at most one
element.
Moreover, any category with property 2 is in the image of the functor i.
Proof. To specify a functor i: PrO √ë Cat, we need to say what it does on objects and
on morphisms. To an object pX, ƒèq in PrO, we assign the category X with objects X
and a unique morphism from x √ë x1 if x ƒè x1; this was discussed at the top of Section
4.2.1.12. To a morphism f : pX, ƒèXq √ë pY, ƒèY q of preorders, we must assign a functor
ipfq: X √ë Y. Again, to specify a functor we need to say what it does on objects and
6The name of this morphism is completely unimportant.
What matters is that HomX px, yq has
exactly one element iÔ¨Äx ƒè y.

134
CHAPTER 4. BASIC CATEGORY THEORY
morphisms of X. To an object x P ObpXq ‚Äú X, we assign the object fpxq P Y ‚Äú ObpYq.
Given a morphism f : x √ë x1 in X, we know that x ƒè x1 so by DeÔ¨Ånition 3.4.4.1 we
have that fpxq ƒè fpx1q, and we assign to f the unique morphism fpxq √ë fpx1q in Y. To
check that the rules of functors (preservation of identities and composition) are obeyed
is routine.
‚ñ°
Slogan 4.2.1.18.
‚Äú A preorder is a category in which every hom-set has either 0 elements or 1
element. A preorder morphism is just a functor between such categories. ‚Äù
Exercise 4.2.1.19. Recall the functor P : PrO √ë Grph from Proposition 4.1.2.8, the
functors F : Grph √ë Cat and U : Cat √ë Grph from Example 4.1.2.33, and the functor
i: PrO √ë Cat from Proposition 4.2.1.17.
a.) Do either of the following diagrams of categories commute?
PrO
P
/
i

?
Grph
F

Cat
PrO
P
/
i

?
Grph
Cat
U
A
b.) We also had a functor Grph √ë PrO. Does the following diagram of categories
commute?
Grph
/
F

?
PrO
i

Cat
‚ô¶
4.2.1.20
Graphs as functors
Let C denote the category depicted below
GrIn :‚Äú
Ar‚Äö
src /
tgt /
Ve‚Äö
(4.7)
Then a functor G: GrIn √ë Set is the same thing as two sets GpArq, GpVeq and two
functions Gpsrcq: GpArq √ë GpVeq and Gptgtq: GpArq √ë GpVeq. This is precisely what
is needed for a graph; see DeÔ¨Ånition 3.3.1.1. We call GrIn the graph indexing category.
Exercise 4.2.1.21. Consider the terminal category, 1, also known as the discrete category
on one element (see Exercise 4.1.2.37). Let GrIn be as in (4.7) and consider the functor
i0 : 1 √ë GrIn sending the object of 1 to the object V P ObpGrInq. If G: GrIn √ë Set
is a graph, what is the composite G Àù i0? It consists of only one set; what set is it? For
example, what set is it when G is the graph from Example 3.3.3.3.
‚ô¶

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS135
If a graph is a functor GrIn √ë Set, what is a graph homomorphism?
We will
see later in Example 4.3.1.17 that graph homomorphisms are homomorphisms between
functors, which are called natural transformations. (Natural transformations are the
highest-‚Äúlevel‚Äù structure that occurs in ordinary category theory.)
Example 4.2.1.22. Let D be the category depicted below
D :‚Äú
A‚Äö
œÅ
9
src /
tgt /
V‚Äö
(4.8)
with the following composition formula:
œÅ Àù œÅ ‚Äú idA;
src Àù œÅ ‚Äú tgt;
and
tgt Àù œÅ ‚Äú src.
The idea here is that the morphism œÅ: A √ë A reverses arrows. The PED œÅ Àù œÅ ‚Äú idA
forces the fact that the reverse of the reverse of an arrow yields the original arrow. The
PEDs src Àù œÅ ‚Äú tgt and tgt Àù œÅ ‚Äú src force the fact that when we reverse an arrow, its
source and target switch roles.
This category D is the symmetric graph indexing category. Just like any graph can
be understood as a functor GrIn √ë Set, where GrIn is the graph indexing category
displayed in (4.7), any symmetric graph can be understood as a functor D √ë Set, where
D is the category drawn above. Given a functor G: D √ë Set, we will have a set of
arrows, a set of vertices, a source operation, a target operation, and a ‚Äúreverse direction‚Äù
operation that all behave as expected.
It is customary to draw the connections in a symmetric graph as line segments rather
than arrows between vertices. However, a better heuristic is to think that each connection
between vertices consists of two arrows, one pointing in each direction.
Slogan 4.2.1.23.
‚Äú In a symmetric graph, every arrow has an equal and opposite arrow. ‚Äù
Exercise 4.2.1.24. Which of the following graphs are symmetric:
a.) The graph G from (3.4)?
b.) The graph G from Exercise 3.3.1.10?
c.) The graph G1 from (3.7)?
d.) The graph Loop from (3.17), i.e. the graph having exactly one vertex and one arrow?
e.) The graph G from Exercise 4.2.1.11?
‚ô¶
Exercise 4.2.1.25. Let GrIn be the graph indexing category shown in (4.7) and let D be
the symmetric graph indexing category displayed in (4.8).
a.) How many functors are there of the form GrIn √ë D?
b.) Is one more ‚Äúreasonable‚Äù than the others?
c.) Choose the one that seems most reasonable and call it i: GrIn √ë D. If a symmetric
graph is a functor S : D √ë Set, you can compose with i to get a functor SÀùi: GrIn √ë
Set. This is a graph; what graph is it? What has changed?
‚ô¶

136
CHAPTER 4. BASIC CATEGORY THEORY
4.2.2
Database schemas present categories
Recall from DeÔ¨Ånition 3.5.2.6 that a database schema (or schema, for short) consists of a
graph together with a certain kind of equivalence relation on its paths. In Section 4.4.1
we will deÔ¨Åne a category Sch that has schemas as objects and appropriately modiÔ¨Åed
graph homomorphisms as morphisms. In Section 4.4.2 we prove that the category of
schemas is equivalent (in the sense of DeÔ¨Ånition 4.3.4.1) to the category of categories,
Sch ¬ª Cat.
The diÔ¨Äerence between schemas and categories is like the diÔ¨Äerence between monoid
presentations, given by generators and relations as in DeÔ¨Ånition 3.1.1.17, and the monoids
themselves. The same monoid has (inÔ¨Ånitely) many diÔ¨Äerent presentations, and so it is
for categories: many diÔ¨Äerent schemas can present the same category. Computer scien-
tists may think of the schema as syntax and the category it presents as the corresponding
semantics. A schema is a compact form, and can be speciÔ¨Åed in Ô¨Ånite space and time
while generating something inÔ¨Ånite.
Slogan 4.2.2.1.
‚Äú A database schema is a category presentation. ‚Äù
We will formally show in Section 4.4.2 how to turn a schema into a category (the
category it presents). For now, it seems pedagogically better not to be so formal, because
the idea is fairly straightforward. Suppose given a schema S, which consists of a graph
G ‚Äú pV, A, src, tgtq equipped with a congruence ‚Äû (see DeÔ¨Ånition 3.5.2.3). It presents a
category C deÔ¨Åned as follows. The set of objects in C is deÔ¨Åned to be the vertices V ; the
set of morphisms in C is deÔ¨Åned to be the quotient PathspGq{ ‚Äû; and the composition
law is concatenation of paths. The path equivalences making up ‚Äû become commutative
diagrams in C.
Example 4.2.2.2. The schema Loop, depicted below, has no path equivalence declarations.
As a graph it has one vertex and one arrow.
Loop :‚Äú
s‚Äö
f

The category it generates, however, is the free monoid on one generator, N. It has one
object ‚ñ≤but a morphism f n : ‚ñ≤√ë ‚ñ≤for every natural number n P N, thought of as
‚Äúhow many times to go around the loop f‚Äù. Clearly, the schema is more compact that
the inÔ¨Ånite category it generates.
Exercise 4.2.2.3. Consider the olog from Exercise 3.5.2.18, which says that for any father
x, his Ô¨Årst child‚Äôs father is x. It is redrawn below as a schema S, and we include the
desired path equivalence declaration, F c f ‚Äú F,
F‚Äö
c
/ C‚Äö
f
_
How many morphisms are there (total) in the category generated by S?
‚ô¶
Exercise 4.2.2.4. Suppose that G is a graph and that G is the schema generated by G
with no PEDs. What is the relationship between the category generated by G and the
free category FpGq P ObpCatq as deÔ¨Åned in Example 4.1.2.30?
‚ô¶

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS137
4.2.2.5
Instances on a schema C
If schemas are like categories, what are instances? Recall that an instance I on a schema
S ‚Äú pG, ¬ªq assigns to each vertex v in G a set of rows say Ipvq P ObpSetq. And to every
arrow a: v √ë v1 in G the instance assigns a function Ipaq: Ipvq √ë Ipv1q. The rule is that
given two equivalent paths, their compositions must give the same function. Concisely,
an instance is a functor I : S √ë Set.
Example 4.2.2.6. We have now seen that a monoid is just a category M with one ob-
ject and that a monoid action is a functor M √ë Set.
Under our understanding of
database schemas as categories, M is a schema and so an action becomes an instance
of that schema. The monoid action table from Example ex:action table was simply a
manifestation of the database instance according to the Rules 3.5.2.8.
Exercise 4.2.2.7. In Section 4.2.1.20 we discuss how each graph is a functor GrIn √ë Set
for the graph indexing category depicted below:
GrIn :‚Äú
Ar‚Äö
src /
tgt /
Ve‚Äö
But now we know that if a graph is a set-valued functor then we can consider GrIn as
a database schema.
a.) How many tables, and how many columns of each should there be (if unsure, consult
Rules 3.5.2.8)?
b.) Write out the table view of graph G from Example 3.3.3.3.
‚ô¶
4.2.3
Spaces
Category theory was invented for use in algebraic topology, and in particular to discuss
natural transformations between certain functors. We will get to natural transformations
more formally in Section 4.3. For now, they are ways of relating functors. In the original
use, Eilenberg and Mac Lane were interested in functors that connect topological spaces
(shapes like spheres, etc.) to algebraic systems (groups, etc.)
For example, there is a functor that assigns to each space X its group œÄ1pXq of round-
trip voyages (starting and ending at some chosen point x P X), modulo some equivalence
relation. There is another functor that assigns to every space its group H1pX, Zq of ways
to drop some (positive or negative) number of circles on X. These two functors are
related, but they are not equal.
There is a relationship between the functor œÄ1 and the functor H1. For example
when X is the Ô¨Ågure-8 space (two circles joined at a point) the group œÄ1pXq is much
bigger than the group H1pXq. Indeed œÄ1pXq includes information about the order and
direction of loops traveled; whereas the group H1pX, Zq includes only information about
how many times one goes around each loop. However, there is a natural transformation
of functors œÄ1p¬¥q √ë H1p¬¥, Zq, called the Hurewicz transformation, which ‚Äúforgets‚Äù the
extra information and thus yields a simpliÔ¨Åcation.
Example 4.2.3.1. Given a set X, recall that PpXq denotes the set of subsets of X. A
topology on X is a choice of which subsets U P PpXq will be called open sets. The union
of any number of open sets must be considered to be an open set, and the intersection

138
CHAPTER 4. BASIC CATEGORY THEORY
of any Ô¨Ånite number of open sets must be considered open. One could say succinctly
that a topology on X is a sub-order OpenpXq ƒé PpXq that is closed under taking Ô¨Ånite
meets and inÔ¨Ånite joins.
A topological space is a pair pX, OpenpXqq, where X is a set and OpenpXq is a
topology on X. The elements of the set X are called points. A morphism of topological
spaces (also called a continuous map) is a function f : X √ë Y such that for every
V P OpenpY q the preimage f ¬¥1pV q P PpXq is actually in OpenpXq. That is, such that
there exists a dashed arrow making the diagram below commute:
OpenpY q
/

OpenpXq

PpY q
f ¬¥1
/ PpXq.
The category of topological spaces, denoted Top, is the category having objects and
morphisms as above.
Exercise 4.2.3.2.
a.) Explain how ‚Äúlooking at points‚Äù gives a functor Top √ë Set.
b.) Does ‚Äúlooking at open sets‚Äù give a functor Top √ë PrO?
‚ô¶
Example 4.2.3.3 (Continuous dynamical systems). The set R can be given a topology in
a standard way.7 But pR, 0, `q is also a monoid. Moreover, for every x P R the monoid
operation `: R ÀÜ R √ë R is continuous. 8 So we say that R :‚Äú pR, 0, `q is a topological
monoid.
Recall from Section 4.2.1.1 that a monoid action is a functor M √ë Set, where M
is a monoid. Instead imagine a functor a: R √ë Top? Since R is a category with one
object, this amounts to an object X P ObpTopq, a space. And to every real number
t P R we obtain a continuous map aptq: X √ë X. If we consider X as the set of states
of some system and R as the time line, we have captured what is called a continuous
dynamical system.
Example 4.2.3.4. Recall (see [Axl]) that a real vector space is a set X, elements of which
are called vectors, which is closed under addition and scalar multiplication. For example
R3 is a vector space. A linear transformation from X to Y is a function f : X √ë Y that
appropriately preserves addition and scalar multiplication. The category of real vector
spaces, denoted VectR, has as objects the real vector spaces and as morphisms the linear
transformations.
There is a functor VectR √ë Grp sending a vector space to its underlying group of
vectors, where the group operation is addition of vectors and the group identity is the
0-vector.
Exercise 4.2.3.5. Every vector space has vector subspaces, ordered by inclusion (the
origin is inside of any line which is inside of certain planes, etc., and all are inside of the
whole space V ). If you know about this topic, answer the following questions.
7The topology is given by saying that U ƒé R is open iÔ¨Äfor every x P U there exists œµ ƒÖ 0 such that
ty P R | |y ¬¥ x| ƒÉ œµu ƒé Uu. One says, ‚ÄúU ƒé R is open if every point in U has an epsilon-neighborhood
fully contained in U‚Äù.
8The topology on R ÀÜ R is similar; a subset U ƒé R ÀÜ R is open if every point x P U has an epsilon-
neighborhood (a disk around x of some positive radius) fully contained in U.

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS139
a.) Does a linear transformation V √ë V 1 induce a morphism of these orders? In other
words, is there a functor VectR √ë PrO?
b.) Would you guess that there is a nice functor VectR √ë Top? By a ‚Äúnice functor‚Äù I
mean one that doesn‚Äôt make people roll their eyes (for example, there is a functor
VectR √ë Top that sends every vector space to the empty space, and that‚Äôs not
really a ‚Äúnice‚Äù one. If someone asked for a functor VectR √ë Top for their birthday,
this functor would make them sad. We‚Äôre looking for a functor VectR √ë Top that
would make them happy.)
‚ô¶
4.2.3.6
Groupoids
Groupoids are like groups except a groupoid can have more than one object.
DeÔ¨Ånition 4.2.3.7. A groupoid is a category C such that every morphism is an isomor-
phism. If C and D are groupoids, a morphism of groupoids, denoted F : C √ë D, is simply
a functor. The category of groupoids is denoted Grpd.
Example 4.2.3.8. There is a functor Grpd √ë Cat, sending a groupoid to its underlying
category. There is also a functor Grp √ë Grpd sending a group to ‚Äúitself as a groupoid
with one object.‚Äù
Application 4.2.3.9. Let M be a material in some original state s0.9 Construct a category
SM whose objects are the states of M, e.g. by pulling on M in diÔ¨Äerent ways, or by
heating it up, etc. we obtain such states. Include a morphism from state s to state
s1 if there exists a physical transformation from s to s1. Physical transformations can
be performed one after another, so we can compose morphisms, and perhaps we can
agree this composition is associative. Note that there exists a morphism is : s0 √ë s for
any s. Note also that this category is a preorder because there either exists a physical
transformation or there does not. 10
The elastic deformation region of the material is the set of states s such that there
exists a morphism s √ë s0, because any such morphism will be the inverse of is : s0 √ë s.
A transformation is irreversible if there is no transformation back. If s1 is not in the
elastic deformation region, we can (inventing a term) still talk about the region that is
‚Äúelastically-equivalent‚Äù to s1. It is all the objects in SM that are isomorphic to s1. If we
consider only elastic equivalences, we are looking at a groupoid sitting inside the larger
category SM.
‚ô¶‚ô¶
Example 4.2.3.10. Alan Weinstein explains groupoids in terms of tiling patterns on a
bathroom Ô¨Çoor, see [WeA].
Example 4.2.3.11. Let I ‚Äú tx P R | 0 ƒè x ƒè 1u denote the unit interval. It can be given
a topology in a standard way, as a subset of R (see Example 4.2.3.3)
For any space X, a path in X is a continuous map I √ë X. Two paths are called
homotopic if one can be continuously deformed to the other, where the deformation
9This example may be a bit crude, in accordance with the crudeness of my understanding of materials
science.
10Someone may choose to beef this category up to include the set of physical processes between states
as the hom-set. This gives a category that is not a preorder. But there would be a functor from their
category to ours.

140
CHAPTER 4. BASIC CATEGORY THEORY
occurs completely within X. 11 One can prove that being homotopic is an equivalence
relation on paths.
Paths in X can be composed, one after the other, and the composition is associative
(up to homotopy). Moreover, for any point x P X there is a trivial path (that stays at
x). Finally every path is invertible (by traversing it backwards) up to homotopy.
This all means that to any space X P ObpTopq we can associate a groupoid, called
the fundamental groupoid of X and denoted Œ†1pXq P ObpGrpdq. The objects of Œ†1pXq
are the points of X; the morphisms in Œ†1pXq are the paths in X (up to homotopy). A
continuous map f : X √ë Y can be composed with any path I √ë X to give a path I √ë Y
and this preserves homotopy. So in fact Œ†1 : Top √ë Grpd is a functor.
Exercise 4.2.3.12. Let T denote the surface of a donut, i.e. a torus. Choose two points
p, q P T. Since Œ†1pTq is a groupoid, it is also a category. What would the hom-set
HomŒ†1pT qpp, qq represent?
‚ô¶
Exercise 4.2.3.13. Let U ƒé R2 be an open subset of the plane, and let F be an irrotational
vector Ô¨Åeld on U (i.e. one with curlpFq ‚Äú 0). Following Exercise 4.1.1.15, we have a
category CF .
If two curves C, C1 in U are homotopic then they have the same line
integral,
≈ü
C F ‚Äú
≈ü
C1 F.
We also have a category Œ†1U, given by the fundamental groupoid, as in Example
4.2.3.11. Both categories have the same objects, ObpCF q ‚Äú |U| ‚Äú ObpŒ†1Uq, the set of
points in U.
a.) Is there a functor CF √ë Œ†1U or a functor Œ†1U √ë CF that is identity on the under-
lying objects?
b.) What is CF if F is a conservative vector Ô¨Åeld?
‚ô¶
Exercise 4.2.3.14. Consider the set A of all (well-formed) arithmetic expressions in the
symbols t0, . . . , 9, `, ¬¥, Àö, p, qu. For example, here are some elements of A:
52,
52 ¬¥ 7,
50 ` 3 Àö p6 ¬¥ 2q.
We can say that an equivalence between two arithmetic expressions is a justiÔ¨Åcation that
they give the same ‚ÄúÔ¨Ånal answer‚Äù, e.g. 52`60 is equivalent to 10Àöp5`6q`p2`0q, which
is equivalent to 10Àö11`2. I‚Äôve basically described a groupoid. What are its objects and
what are its morphisms?
‚ô¶
4.2.4
Logic, set theory, and computer science
4.2.4.1
The category of propositions
Given a domain of discourse, a logical proposition is a statement that is evalued in any
model of that domain as either true or ‚Äúnot always true‚Äù. For example, in the domain
of real numbers we might have the proposition
For all real numbers x P R there exists a real number y P R such that y ƒÖ 3x.
11 Let I2 ‚Äú tpx, yq P R2 | 0 ƒè x ƒè 1 and 0 ƒè y ƒè 1u denote the square. There are two inclusions
i0, i1 : I √ë S that put the interval inside the square at the left and right sides. Two paths f0, f1 : I √ë X
are homotopic if there exists a continuous map f : I ÀÜ I √ë X such that f0 ‚Äú f Àù i0 and f1 ‚Äú f Àù i1,
I
i1
/
i0 / I ÀÜ I
f
/ X

4.2. CATEGORIES AND FUNCTORS COMMONLY ARISING IN MATHEMATICS141
We say that one logical proposition P implies another proposition Q, denoted P √± Q if,
for every model in which P is true, so is Q. There is a category Prop whose objects are
logical propositions and whose morphisms are proofs that one statement implies another.
Crudely, one might say that B holds at least as often as A if there is a morphism A √ë B
(meaning whenever A holds, so does B). So the proposition ‚Äúx ‚Ä∞ x‚Äù holds very seldom
and ‚Äúx ‚Äú x‚Äù always very often.
Example 4.2.4.2. We can repeat this idea for non-mathematical statements. Take all
possible statements that are veriÔ¨Åable by experiment as objects of a category. Given
two such statements, it may be that one implies the other (e.g. ‚Äúif the speed of light is
Ô¨Åxed then there are relativistic eÔ¨Äects‚Äù). Every statement implies itself (identity) and
implication is transitive, so we have a category.
Let‚Äôs consider diÔ¨Äerences in proofs to be irrelevant, so the category Prop becomes a
preorder: either A implies B or it does not. Then it makes sense to discuss meets and
joins. It turns out that meets are ‚Äúand‚Äôs‚Äù and joins are ‚Äúor‚Äôs‚Äù. That is, given propositions
A, B the meet A^B is deÔ¨Åned to be a proposition that holds as often as possible subject
to the constraint that it implies both A and B; the proposition ‚ÄúA holds and B holds‚Äù
Ô¨Åts the bill. Similarly, the join A _ B is given by ‚ÄúA holds or B holds‚Äù.
Exercise 4.2.4.3. Consider the set of possible laws (most likely an inÔ¨Ånite set) that can
be dictated to hold throughout a jurisdiction. Consider each law as a proposition (‚Äúsuch
and such is (dictated to be) the case‚Äù), i.e as an object of our preorder Prop. Given a
jurisdiction V , and a set of laws t‚Ñì1, ‚Ñì2, . . . , ‚Ñìnu that are dictated to hold throughout V ,
we take their meet LpV q :‚Äú ‚Ñì1 ^ ‚Ñì2 ^ ¬® ¬® ¬® ^ ‚Ñìn and consider it to be the single law of the
land V . Suppose that V is a jurisdiction and U is a sub-jurisdiction (e.g. U is a county
and V is a state); write U ƒè V . Then clearly any law dictated by the large jurisdiction
(the state) must also hold throughout the small jurisdiction (the county).
a.) What is the relation in Prop between LpUq and LpV q?
b.) Consider the preorder J on jurisdictions given by ƒè as above. Is ‚Äúthe law of the
land‚Äù a morphism of preorders J √ë Prop? To be a bit more high-brow, considering
both J and Prop to be categories (by Proposition 4.2.1.17), we have a function
L: ObpJq √ë ObpPropq; this question is asking whether L extends to a functor
J √ë Prop.12
‚ô¶
Exercise 4.2.4.4. Take again the preorder J of jurisdictions from Exercise 4.2.4.3 and the
idea that laws are propositions. But this time, let RpV q be the set of all possible laws
(not just those dictated to hold) that are in actuality being respected, i.e. followed, by
all people in V . This assigns to each jurisdiction a set.
a.) Since preorders can be considered categories, does our ‚Äúthe set of respected laws‚Äù
function R: ObpJq √ë ObpSetq extend to a functor J √ë Set?
b.) What about if instead we take the meet of all these laws and assign to each ju-
risdiction the maximal law respected throughout. Does this assignment ObpJq √ë
ObpPropq extend to a functor J √ë Prop? 12
‚ô¶
12Hint: Exercises 4.2.4.3 and 4.2.4.4 will ask similar yes/no questions and at least one of these is
correctly answered ‚Äúno‚Äù.

142
CHAPTER 4. BASIC CATEGORY THEORY
4.2.4.5
A categorical characterization of Set
The category Set of sets is fundamental in mathematics, but instead of thinking of it
as something given or somehow special, it can be shown to merely be a category with
certain properties, each of which can be phrased purely categorically. This was shown
by Lawvere [Law]. A very readable account is given in [Le2].
4.2.4.6
Categories in computer science
Computer science makes heavy use of trees, graphs, orders, lists, and monoids. We have
seen that all of these are naturally viewed in the context of category theory, though
it seems that such facts are rarely mentioned explicitly in computer science textbooks.
However, categories are also used explicitly in the theory of programming languages
(PL). Researchers in that Ô¨Åeld attempt to understand the connection between what
programs are supposed to do (their denotation) and what they actually cause to occur
(their operation). Category theory provides a useful mathematical formalism in which
to study this.
The kind of category most often considered by a PL researcher is what is known
as a Cartesian closed category or CCC, which means a category T that has products
(like A ÀÜ B in Set) and exponential objects (like BA in Set).
Set is an example
of a CCC, but there are others that are more appropriate for actual computation.
The objects in a PL person‚Äôs CCC represent the types of the language, types such
as integers, strings, floats. The morphisms represent computable functions, e.g.
length:
strings√ù√ëintegers. The products allow one to discuss pairs pa, bq where
a is of one type and b is of another type. Exponential objects allow one to consider
computable functions as things that can be input to a function (e.g. given any com-
putable function floats√ëintegers one can consistently multiply its results by 2 and
get a new computable function floats√ëintegers. We will be getting to products in
Section 4.5.1.8 and exponential objects in Section 4.3.2.
But category theory did not only oÔ¨Äer a language for thinking about programs, it
oÔ¨Äered an unexpected tool called monads. The above CCC model for types allows re-
searchers only to discuss functions, leading to the notion of functional programming
languages; however, not all things that a computer does are functions. For example,
reading input and output, changing internal state, etc. are operations that can be per-
formed that ruin the functional-ness of programs. Monads were found in 19?? by Moggi
[Mog] to provide a powerful abstraction that opens the doors to such non-functional
operations without forcing the developer to leave the category-theoretic garden of eden.
We will discuss monads in Section 5.3.
We have also seen in Section 4.2.2 that databases are well captured by the language of
categories. We will formalize this in Section 4.4. Throughout the remainder of this book
we will continue to use databases to bring clarity to concepts within standard category
theory.
4.2.5
Categories applied in science
Categories are being used throughout mathematics to relate various subjects, as well
as to draw out the essential structures within these subjects. For example, there is an
active research for ‚Äúcategorifying‚Äù classical theories like that of knots, links, and braids
[Kho]. It is similarly applied in science, to clarify complex subjects. Here are some very
brief descriptions of scientiÔ¨Åc disciplines to which category theory is applied.

4.3. NATURAL TRANSFORMATIONS
143
Quantum Ô¨Åeld theory is was categoriÔ¨Åed by Atiyah [Ati] in the late 1980‚Äôs, with much
success (at least in producing interesting mathematics). In this domain, one takes a cat-
egory in which an object is a reasonable space, called a manifold, and a morphism is a
manifold connecting two manifolds, like a cylinder connects two circles. Such connecting
manifolds are called cobordisms, and as such people refer to the category as Cob. Topo-
logical quantum Ô¨Åeld theory is the study of functors Cob √ë Vect that assign a vector
space to each manifold and a linear transformation of vector spaces to each cobordism.
Information theory 13 is the study of how to ideally compress messages so that they
can be sent quickly and accurately across a noisy channel.14 Invented in 1948 by Claude
Shannon, its main quantity of interest is the number of bits necessary to encode a piece
of information. For example, the amount of information in an English sentence can be
greatly reduced. The fact that t‚Äôs are often followed by h‚Äôs, or that e‚Äôs are much more
common than z‚Äôs, implies that letters are not being used as eÔ¨Éciently as possible. The
amount of bits necessary to encode a message is called its entropy and has been linked
to the commonly used notion of the same name in physics.
In [BFL], Baez, Fritz, and Leinster show that entropy can be captured quite cleanly
using category theory.
They make a category FinProb whose objects are Ô¨Ånite sets
equipped with a probability measure, and whose morphisms are probability preserving
functions. They characterize information loss as a way to assign numbers to such mor-
phisms, subject to certain explicit constraints. They then show that the entropy of an
object in FinProb is the amount of information lost under the unique map to the single-
ton set t,u. This approach explicates (by way of the explicit constraints for information
loss functions) the essential idea of Shannon‚Äôs information theory, allowing it to be gener-
alized to categories other than FinProb. Thus Baez and Leinster eÔ¨Äectively categoriÔ¨Åed
information theory.
Robert Rosen proposed in the 1970s that category theory could play a major role in
biology. That story is only now starting to be Ô¨Çeshed out. There is a categorical account
of evolution and memory, called Memory Evolutive Systems [EV]. There is also a paper
[BP2] by Brown and Porter with applications to neuroscience.
4.3
Natural transformations
In this section we conclude our discussion of the Big 3, by deÔ¨Åning natural transforma-
tions. Category theory was originally invented to discuss natural transformations. These
were suÔ¨Éciently conceptually challenging that they required formalization and thus the
invention of category theory. If we think of categories as domains (of discourse, interac-
tion, comparability, etc.) and of functors as transformations between diÔ¨Äerent domains,
the natural transformations compare diÔ¨Äerent transformations.
Natural transformations can seem a bit abstruse at Ô¨Årst, but hopefully some examples
and exercises will help.
13To me, the subject of ‚Äúinformation theory‚Äù is badly named. That discipline is devoted to Ô¨Ånding
ideal compression schemes for messages to be sent quickly and accurately across a noisy channel. It
deliberately does not pay any attention to what the messages mean. To my mind this should be called
compression theory or redundancy theory. Information is inherently meaningful‚Äîthat is its purpose‚Äî
any theory that is unconcerned with the meaning is not really studying information per se. The people
who decide on speed limits for roads and highways may care about human health, but a study limited
to deciding ideal speed limits should not be called ‚Äúhuman health theory‚Äù.
14Despite what was said above, Information theory has been extremely important in a diverse array
of Ô¨Åelds, including computer science [MacK], but also in neuroscience [Bar], [Lin] and physics [Eve]. I‚Äôm
not trying to denigrate the Ô¨Åeld; I am only frustrated with its name.

144
CHAPTER 4. BASIC CATEGORY THEORY
4.3.1
DeÔ¨Ånition and examples
Let‚Äôs begin with an example. There is a functor List: Set √ë Set, which sends a set
X to the set ListpXq consisting of all lists whose entries are elements of X. Given a
morphism f : X √ë Y , we can transform a list with entries in X into a list with entries
in Y by applying f to each (this was worked out in Exercise 4.1.2.20)..
It may seem a strange thing to contemplate, but there is also a functor List Àù
List: Set √ë Set that sends a set X to the set of lists of lists in X. If X ‚Äú ta, b, cu then
ListÀùListpXq contains elements like
‚Äú
ra, bs, ra, c, a, b, cs, rcs
‚Ä∞
and
‚Äú
r s
‚Ä∞
and
‚Äú
ras, r s, ra, a, as
‚Ä∞
.
We can naturally transform a list of lists into a list by concatenation. In other words,
for any set X there is a function ¬µX : List Àù ListpXq √ë ListpXq which sends our lists
above to ra, b, a, c, a, b, c, cs and r s and ra, a, a, as, respectively. In fact, even if we use a
function f : X √ë Y to convert a list of X‚Äôs into a list of Y ‚Äôs (or a list of lists of X‚Äôs into
a list of lists of Y ‚Äôs), the concatenation ‚Äúworks right‚Äù. Take a deep breath for the precise
statement couched as a slogan.
Slogan 4.3.1.1.
‚Äú Naturality works like this: Using a function f : X √ë Y to convert a list of
lists of X‚Äôs into a list of list of Y ‚Äôs and then concatenating to get a simple
list of Y ‚Äôs does the same thing as Ô¨Årst concatenating our list of lists of
X‚Äôs into a simple list of X‚Äôs and then using our function f to convert it into
a list of Y ‚Äôs. ‚Äù
Let‚Äôs make this concrete. Let X ‚Äú ta, b, cu, let Y ‚Äú t1, 2, 3u, and let f : X √ë Y
assign fpaq ‚Äú 1, fpbq ‚Äú 1, fpcq ‚Äú 2. Our naturality condition says the following for any
list of lists of X‚Äôs, in particular for
‚Äú
ra, bs, ra, c, a, b, cs, rcs
‚Ä∞
:
‚Äú
ra, bs, ra, c, a, b, cs, rcs
‚Ä∞ 
¬µX
/
_
ListÀùListpfq

ra, b, a, c, a, b, c, cs
_
Listpfq

‚Äú
r1, 1s, r1, 2, 1, 1, 2s, r2s
‚Ä∞ 
¬µY
/ r1, 1, 1, 2, 1, 1, 2, 2s
Keep these ¬µX in mind in the following deÔ¨Ånition‚Äîthey serve as the ‚Äúcomponents‚Äù
of a natural transformation List Àù List √ë List of functors C √ë D, where C ‚Äú D ‚Äú Set.
DeÔ¨Ånition 4.3.1.2. Let C and D be categories and let F : C √ë D and G: C √ë D be
functors. A natural transformation Œ± from F to G, denoted Œ±: F √ë G, is deÔ¨Åned as
follows: one announces some constituents (A. components) and asserts that they conform
to some laws (1. naturality squares). SpeciÔ¨Åcally, one announces
A. for each object c P ObpCq a morphism Œ±c : Fpcq √ë Gpcq in D, called the c-
component of Œ±.
One asserts that the following law holds:
1. For every morphism h: c √ë c1 in C, the following square, called the naturality

4.3. NATURAL TRANSFORMATIONS
145
square for h, must commute:
Fpcq
‚úì
F phq

Œ±c
/ Gpcq
Gphq

Fpc1q
Œ±c1 / Gpc1q
(4.9)
Example 4.3.1.3. Consider the categories C ‚Äì r1s and D ‚Äì r2s drawn below:
C :‚Äú
0‚Äö
p
/ 1‚Äö
D :‚Äú
A‚Äö
f
/ B‚Äö
g
/ C‚Äö .
Consider the functors F, G: r1s √ë r2s where Fp0q ‚Äú A, Fp1q ‚Äú B, Gp0q ‚Äú A, and
Gp1q ‚Äú C. The orange dots and arrows in the picture below represent the image of C
under F and G.
A 
B 
C 
f 
g 
A 
B 
C 
f 
g 
f 
g 
g‚óãf 
idA 
idB 
idC 
g‚óãf 
g‚óãf 
It turns out that there is only one possible natural transformation F √ë G; we call
it Œ± and explore its naturality square. We have drawn the components of Œ±: F √ë G in
green. These components are Œ±0 ‚Äú idA : Fp0q √ë Gp0q and Œ±1 ‚Äú g: Fp1q √ë Gp1q. The
naturality square for p: 0 √ë 1 is written twice below, once with notation following that
in (4.9) and once in local notation.
Fp0q
Œ±0 /
F ppq

Gp0q
Gppq

Fp1q
Œ±1 / Gp1q
A
idA /
f

A
gÀùf

B
g
/ C

146
CHAPTER 4. BASIC CATEGORY THEORY
It is clear that this diagram commutes, so our components Œ±0 and Œ±1 satisfy the law of
DeÔ¨Ånition 4.3.1.2, making Œ± a natural transformation.
Lemma 4.3.1.4. Let C and D be categories, let F, G: C √ë D be functors, and for every
object c P ObpCq, let Œ±c : Fpcq √ë Gpcq be a morphism in D.
Suppose given a path
c0
f1
√ù√ë c1
f2
√ù√ë ¬® ¬® ¬®
fn
√ù√ë cn such that the naturality square
Fpci¬¥1q
F pfiq

Œ±ci¬¥1 / Gpci¬¥1q
Gpfiq

Fpciq
Œ±ci
/ Gpciq
commutes for each 1 ƒè i ƒè n.
Then the naturality square for the composite p :‚Äú
fn Àù ¬® ¬® ¬® Àù f2 Àù f1 : c0 √ë cn
Fpc0q
Œ±c0 /
F ppq

Gpc0q
Gppq

Fpcnq
Œ±cn
/ Gpcnq
also commutes. In particular, the naturality square commutes for every identity mor-
phism idc.
Proof. When n ‚Äú 0 we have a path of length 0 starting at each c P ObpCq. It vacuously
satisÔ¨Åes the condition, so we need to see that its naturality square
Fpcq
Œ±c
/
F pidcq

Gpcq
Gpidcq

Fpcq
Œ±c
/ Gpcq
commutes. But this is clear because functors preserve identities.
The rest of the proof follows by induction on n. Suppose q ‚Äú fn¬¥1 Àù¬® ¬® ¬®Àùf2 Àùf1 : c0 √ë
cn¬¥1 and p ‚Äú fn Àù q and that the naturality squares for q and for fn commute; we need
only show that the naturality square for p commutes. That is, we assume the two small
squares commute below; but it follows that the large rectangle does too, completing the
proof.
Fpc0q
Œ±c0
/
F pqq

Gpc0q
Gpqq

Fpcn¬¥1q
Œ±cn¬¥1 /
F pfnq

Gpcn¬¥1q
Gpfnq

Fpcnq
Œ±cn
/ Gpcnq
‚ñ°

4.3. NATURAL TRANSFORMATIONS
147
Example 4.3.1.5. Let C ‚Äú D ‚Äú r1s be the linear order of length 1, thought of as a
category (by Proposition 4.2.1.17). There are three functors C √ë D, which we can write
as p0, 0q, p0, 1q, and p1, 1q; these are depicted left to right below.
0‚Äö 
/
f 
0‚Äö
f
0‚Äö 
/
f 
0‚Äö
f
0‚Äöz

f 
0‚Äö
f
1‚Äö
D
B
1‚Äö
1‚Äö 
/ 1‚Äö
1‚Äö 
/ 1‚Äö
These are just functors so far. What are the natural transformations say Œ±: p0, 0q √ë
p0, 1q? To specify a natural transformation, we must specify a component for each object
in C. In our case Œ±0 : 0 √ë 0 and Œ±1 : 0 √ë 1. There is only one possible choice: Œ±0 ‚Äú id0
and Œ±1 ‚Äú f. Now that we have chosen components we need to check the naturality
squares.
There are three morphisms in C, namely id0, f, id1. By Lemma 4.3.1.4, we need only
check the naturality square for f. We write it twice below, once in the abstract notation
and once in concrete notation:
Fp0q
Œ±0 /
F pfq

Gp0q
Gpfq

Fp1q
Œ±1 / Gp1q
0
id0 /
id0

0
f

0
f
/ 1
This commutes, so Œ± is indeed a natural transformation.
Exercise 4.3.1.6. With notation as in Example 4.3.1.5,
a.) how many natural transformations are there p0, 0q √ë p1, 1q?
b.) how many natural transformations are there p0, 0q √ë p0, 0q?
c.) how many natural transformations are there p0, 1q √ë p0, 0q?
d.) how many natural transformations are there p0, 1q √ë p1, 1q?
‚ô¶
Exercise 4.3.1.7. Let List: Set √ë Set be the functor sending a set X to the set ListpXq of
lists with entries in X. We saw above that there is a natural transformation ListÀùList √ë
List given by concatenation.
a.) If someone said ‚Äúsingleton lists give a natural transformation œÉ from idSet to List‚Äù,
what might they mean? That is, for a set X, what component œÉX might they be
suggesting?
b.) Do these components satisfy the necessary naturality squares for functions f : X √ë
Y ?
‚ô¶
Exercise 4.3.1.8. Let C and D be categories, and suppose that d P ObpDq is a terminal
object. Consider the functor tduC : C √ë D that sends each object c P ObpCq to d and
each morphism in C to the identity morphism idd on d.

148
CHAPTER 4. BASIC CATEGORY THEORY
a.) For any other functor F : C √ë D, how many natural transformations are there F √ë
tduC?
b.) Let D ‚Äú Set and let d ‚Äú t,u.
If C ‚Äú r1s is the linear order of length 1, and
F : C √ë Set is any functor, what does it mean to give a natural transformation
tduC √ë F?
‚ô¶
Application 4.3.1.9. In Figure 3.1 we drew a Ô¨Ånite state machine on alphabet Œ£ ‚Äú ta, bu,
and in Example 3.1.3.1 we showed the associated action table. It will be reproduced
below. Imagine this was your model for understanding the behavior of some system
when acted on by commands a and b. And suppose that a collaborator tells you that she
has a more reÔ¨Åned notion that Ô¨Åts with the same data. Her notion has 6 states rather
than 3, but it‚Äôs ‚Äúcompatible‚Äù. What might that mean?
Let‚Äôs call the original state machine X and the new model Y .
The action tables for these two machines are:
Original model X
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
Proposed model Y
ID
a
b
State 0
State 1A
State 2A
State 1A
State 2A
State 1B
State 1B
State 2B
State 1C
State 1C
State 2B
State 1B
State 2A
State 0
State 0
State 2B
State 0
State 0
How are these models compatible? Looking at the table for Y , if one removes the
distinction between States 1A, 1B, 1C and between States 2A and 2B, then one returns
with the table for X. The table for Y is more speciÔ¨Åc, but it is fully compatible with
table X. The sense in which it is compatible is precisely the sense deÔ¨Åned by there being
a natural transformation.
Recall that M ‚Äú pListpŒ£q, r s, ``q is a monoid, and that a monoid is simply a category
with one object, say ObpMq ‚Äú t‚ñ≤u (see Section 4.2.1). With Œ£ ‚Äú ta, bu, the monoid M
can be visualized as follows:
M ‚Äú
‚ñ≤‚Äö
a
:
b
d

4.3. NATURAL TRANSFORMATIONS
149
Recall also that a state machine on M is simply a functor M √ë Set. We thus have
two such functors, X and Y . A natural transformation Œ±: Y √ë X would consist of a
component Œ±m for every object m P ObpMq, such that certain diagrams commute. But
M having only one object, we need only one function Œ±‚ñ≤: Y p‚ñ≤q √ë Xp‚ñ≤q, where Y p‚ñ≤q is
the set of (6) states of Y and Xp‚ñ≤q is the set of (3) states of X.
The states of Y have been named so as to make the function Œ±‚ñ≤particularly easy to
guess.15 We need to check that two squares commute:
Y p‚ñ≤q
Œ±‚ñ≤/
Y paq

Xp‚ñ≤q
Xpaq

Y p‚ñ≤q
Œ±‚ñ≤/ Xp‚ñ≤q
Y p‚ñ≤q
Œ±‚ñ≤/
Y pbq

Xp‚ñ≤q
Xpbq

Y p‚ñ≤q
Œ±‚ñ≤/ Xp‚ñ≤q
(4.10)
This can only be checked by going through and making sure certain things match, as
speciÔ¨Åed by (4.10); we spell it out in gory detail. The columns that should match are
those whose entries are written in blue.
Naturality square for a: ‚ñ≤√ë ‚ñ≤
Y p‚ñ≤q [ID]
Y paq
Œ±‚ñ≤Àù Y paq
Œ±‚ñ≤
Xpaq Àù Œ±‚ñ≤
State 0
State 1A
State 1
State 0
State 1
State 1A
State 2A
State 2
State 1
State 2
State 1B
State 2B
State 2
State 1
State 2
State 1C
State 2B
State 2
State 1
State 2
State 2A
State 0
State 0
State 2
State 0
State 2B
State 0
State 0
State 2
State 0
(4.11)
Naturality square for b: ‚ñ≤√ë ‚ñ≤
Y p‚ñ≤q [ID]
Y pbq
Œ±‚ñ≤Àù Y pbq
Œ±‚ñ≤
Xpbq Àù Œ±‚ñ≤
State 0
State 2A
State 2
State 0
State 2
State 1A
State 1B
State 1
State 1
State 1
State 1B
State 1C
State 1
State 1
State 1
State 1C
State 1B
State 1
State 1
State 1
State 2A
State 0
State 0
State 2
State 0
State 2B
State 0
State 0
State 2
State 0
(4.12)
In reality we need to check that for every morphism in M, such as ra, a, bs, a similar
diagram commutes. But this holds automatically. For example (Ô¨Çipping the naturality
square sideways for typographical reasons)
Y p‚ñ≤q
Y paq /
Œ±‚ñ≤

Y p‚ñ≤q
Y paq /
Œ±‚ñ≤

Y p‚ñ≤q
Y pbq /
Œ±‚ñ≤

Y p‚ñ≤q
Œ±‚ñ≤

Xp‚ñ≤q
Xpaq
/ Xp‚ñ≤q
Xpaq
/ Xp‚ñ≤q
Xpbq
/ Xp‚ñ≤q
15The function Œ±‚ñ≤: Y p‚ñ≤q √ë Xp‚ñ≤q makes the following assignments: State 0 √û√ë State 0, State 1A √û√ë
State 1, State 1B √û√ë State 1, State 1C √û√ë State 1, State 2A √û√ë State 2, State 2B √û√ë State 2.

150
CHAPTER 4. BASIC CATEGORY THEORY
Since each small square above commutes (as checked by tables 4.11 and 4.12), the big
outer rectangle commutes too.
To recap, the notion of compatibility between Y and X is one that can be checked
and agreed upon by humans, but doing so it is left implicit, and it may be diÔ¨Écult to
explain to an outsider what exactly was agreed to, especially in more complex situations.
It is quite convenient to simply claim ‚Äúthere is a natural transformation from Y to X.‚Äù
‚ô¶‚ô¶
Exercise 4.3.1.10. Let F : C √ë D be a functor. Suppose someone said ‚Äúthe identity on
F is a natural transformation from F to itself.‚Äù
a.) What might they mean?
b.) If it is somehow true, what are the components of this natural transformation?
‚ô¶
Example 4.3.1.11. Let r1s P ObpCatq be the free arrow category described in Exercise
4.1.2.31 and let D be any category.
To specify a functor F : r1s √ë D requires the
speciÔ¨Åcation of two objects, Fpv1q, Fpv2q P ObpDq and a morphism Fpeq: Fpv1q √ë Fpv2q
in D. The identity and composition formulas are taken care of once that much is speciÔ¨Åed.
To recap, a functor F : r1s √ë D is the same thing as a morphism in D.
Thus, choosing two functors F, G: r1s √ë D is precisely the same thing as choosing
two morphisms in D. Let us call them f : a0 √ë a1 and g: b0 √ë b1, where to be clear we
have f ‚Äú Fpeq, a0 ‚Äú Fpv0q, a1 ‚Äú Fpv1q and g ‚Äú Gpeq, b0 ‚Äú Gpv0q, b1 ‚Äú Gpv1q.
A natural transformation Œ±: F √ë G consists of two components, h0 :‚Äú Œ±v0 : a0 √ë b0
and h1 :‚Äú Œ±v1 : a1 √ë b1, drawn as dashed lines below:
a0
h0
/
f

b0
g

a1
h1
/ b1
The condition for Œ± to be a natural transformation is that the above square commutes.
In other words, a functor r1s √ë D is an arrow in D and a natural transformation
between two such functors is just a commutative square in D.
Example 4.3.1.12. Recall that to any graph G we can associate the so-called paths-graph
PathspGq, as described in Example 4.1.2.22. This is a functor Paths: Grph √ë Grph.
There is also an identity functor idGrph : Grph √ë Grph. A natural transformation
Œ∑: idGrph √ë Paths would consist of a graph homomorphism Œ∑G : idGrphpGq √ë PathspGq
for every graph G. But idGrphpGq ‚Äú G by deÔ¨Ånition, so we need Œ∑G : G √ë PathspGq.
Recall that PathspGq has the same vertices as G and every arrow in G counts as a path
(of length 1). So there is an obvious graph homomorphism from G to PathspGq. It is
not hard to see that the necessary naturality squares commute.
Example 4.3.1.13. For any graph G we can associate the paths-graph PathspGq, and
nothing stops us from doing that twice to yield a new graph PathspPathspGqq. Let‚Äôs
think through what a path of paths in G is. It‚Äôs a head-to-tail sequence of arrows in
PathspGq, meaning a head-to-tail sequence of paths in G. These composable sequences of
paths (or ‚Äúpaths of paths‚Äù) are the individual arrows in PathspPathspGqq. (The vertices
in PathspGq and PathspPathspGqq are the same as those in G, and all source and target
functions are as expected.)

4.3. NATURAL TRANSFORMATIONS
151
Clearly, given such a sequence of paths in G, we could compose them to one big path in
G with the same endpoints. In other words, there is graph morphism ¬µG : PathspPathspGqq √ë
PathspGq, that one might call ‚Äúconcatenation‚Äù. In fact, this concatenation extends to a
natural transformation
¬µ: Paths Àù Paths √ë Paths
between functors Grph √ë Grph. In Example 4.3.1.12, we compared a graph to its
paths-graph using a natural transformation idGrph √ë Paths; here we are making a
similar kind of comparison.
Remark 4.3.1.14. In Example 4.3.1.12 we saw that there is a natural transformation
sending each graph into its paths-graph. There is a formal sense in which a category is
nothing more than a kind of reverse mapping. That is, to specify a category is the same
thing as to specify a graph G together with a graph homomorphism PathspGq √ë G. The
formalities involve monads, which we will discuss in Section 5.3.
Exercise 4.3.1.15. Let X and Y be sets, and let f : X √ë Y .
There is a functor
CX : Grph √ë Set that sends every graph to the set X and sends every morphism
of graphs to the identity morphism idX : X √ë X. This functor is called the constant
functor at X. Similarly there is a constant functor CY : Grph √ë Set.
a.) Use f to construct a natural transformation CX √ë CY .
b.) What are its components?
‚ô¶
Exercise 4.3.1.16. For any graph pV, A, src, tgtq we can extract the set of arrows or the set
of vertices. Since each morphism of graphs includes a function between their arrow sets
and a function between their vertex sets, we actually have functors Ar: Grph √ë Set
and Ve: Grph √ë Set.
a.) If someone said ‚Äútaking source vertices gives a natural transformation from Ar to
Ve‚Äù, what natural transfromation might they be referring to?
b.) What are its components?
c.) If a diÔ¨Äerent person, say from a totally diÔ¨Äerent country, were to say ‚Äútaking target
vertices also gives a natural transformation from Ar to Ve,‚Äù would they also be
correct?
‚ô¶
Example 4.3.1.17 (Graph homomorphisms are natural transformations). As discussed
above (see Diagram 4.7), there is a category GrIn for which a functor G: GrIn √ë Set
is the same thing as a graph. Namely, we have
GrIn :‚Äú
Ar‚Äö
src /
tgt /
Ve‚Äö
A natural transformation of two such functors Œ±: G √ë G1 involves two components,
Œ±Ar : GpArq √ë G1pArq and Œ±Ve : GpVeq √ë G1pVeq, and two naturality squares, one for
src and one for tgt. This is precisely the same thing as a graph homomorphism, as
deÔ¨Åned in DeÔ¨Ånition 3.3.3.1.

152
CHAPTER 4. BASIC CATEGORY THEORY
4.3.2
Vertical and horizontal composition
In this section we discuss two types of compositions for natural transformations. The
terms vertical and horizontal are used to describe them; these terms come from the
following pictures:
Œ±√≥
C
F

G
/
H
BD
Œ≤√≥
C
F1
!
Œ≥1√≥
G1
= D
F2
!
Œ≥2√≥
G2
= E
We generally use Àù to denote both kinds of composition, but if we want to be very clear we
will diÔ¨Äerentiate as follows: Œ≤ÀùŒ±: F √ë H for vertical composition, and Œ≥2ÀõŒ≥1 : F2ÀùF1 √ù√ë
G2 Àù G1 for horizontal composition. Of course, the actual arrangement of things on a
page of text does not correlate with verticality or horizontality‚Äîthese are just names.
We will deÔ¨Åne them more carefully below.
4.3.2.1
Vertical composition of natural transformations
The following proposition proves that functors and natural transformations (using ver-
tical composition) form a category.
Proposition 4.3.2.2. Let C and D be categories. There exists a category, called the
category of functors from C to D and denoted FunpC, Dq, whose objects are the functors
C √ë D and whose morphisms are the natural transformations,
HomFunpC,DqpF, Gq ‚Äú tŒ±: F √ë G | Œ± is a natural transformationu.
That is, there are identity natural transformations, natural transformations can be com-
posed, and the identity and associativity laws hold.
Proof. We showed in Exercise 4.3.1.10 that there for any functor F : C √ë D, there
is an identity natural transformation idF : F √ë F (its component at c P ObpCq is
idF pcq : Fpcq √ë Fpcq).
Given a natural transformation Œ±: F √ë G and a natural transformation Œ≤ : G √ë H,
we propose for the composite Œ≤ Àù Œ± the transformation Œ≥ : F √ë H having components
Œ≤c Àù Œ±c for every c P ObpCq. To see that Œ≥ is indeed a natural transformation, one simply
puts together naturality squares for Œ± and Œ≤ to get naturality squares for Œ≤ Àù Œ±.
The associativity and identity laws for FunpC, Dq follow from those holding for mor-
phisms in D.
‚ñ°
Notation 4.3.2.3. We sometimes denote the category FunpC, Dq by DC.
Example 4.3.2.4. Recall from Exercise 4.1.2.38 that there is a functor Ob: Cat √ë Set
sending a category to its set of objects. And recall from Example 4.1.2.35 that there
is a functor Disc: Set √ë Cat sending a set to the discrete category with that set of
objects (all morphisms in DiscpSq are identity morphisms). Let P : Cat √ë Cat be the
composition P ‚Äú Disc Àù Ob. Then P takes a category and makes a new category with
the same objects but no morphisms. It‚Äôs like crystal meth for categories.

4.3. NATURAL TRANSFORMATIONS
153
Let idCat : Cat √ë Cat be the identity functor. There is a natural transformation
i: P √ë idCat. For any category C, the component iC : PpCq √ë C is pretty easily under-
stood. It is a morphism of categories, i.e. a functor. The two categories PpCq and C
have the same set of objects, namely ObpCq, so our functor is identity on objects; and
PpCq has no non-identity morphisms, so nothing else needs be speciÔ¨Åed.
Exercise 4.3.2.5. Let C ‚Äú
A‚Äö be the category with ObpCq ‚Äú tAu, and HomCpA, Aq ‚Äú
tidAu. What is FunpC, Setq? In particular, characterize the objects and the morphisms.
‚ô¶
Exercise 4.3.2.6. Let n P N and let n be the set with n elements, considered as a discrete
category. 16 In other words, we write n to mean what should really be called Discpnq.
Describe the category Funp3, 2q.
‚ô¶
Exercise 4.3.2.7. Let 1 denote the discrete category with one object, and let C be any
category.
a.) What are the objects of Funp1, Cq?
b.) What are the morphisms of Funp1, Cq?
‚ô¶
Example 4.3.2.8. Let 1 denote the discrete category with one object (also known as the
trivial monoid). For any category C, we investigate the category D :‚Äú FunpC, 1q. Its
objects are functors C √ë 1. Such a functor F assigns to each object in C an object in 1
of which there is one; so there is no choice in what F does on objects. And there is only
one morphism in 1 so there is no choice in what F does on morphisms. The upshot is
that there is only one object in D, let‚Äôs call it F, in D, so D is a monoid. What are its
morphisms?
A morphism Œ±: F √ë F in D is a natural transformation of functors.
For every
c P ObpCq we need a component Œ±c : Fpcq √ë Fpcq, which is a morphism 1 √ë 1 in 1.
But there is only one morphism in 1, namely id1, so there is no choice about what these
components should be: they are all id1. The necessary naturality squares commute, so
Œ± is indeed a natural transformation. Thus the monoid D is the trivial monoid; that is,
FunpC, 1q ‚Äì 1 for any category C.
Exercise 4.3.2.9. Let 0 represent the discrete category on 0 objects; it has no objects and
no morphisms. Let C be any category. What is Funp0, Cq?
‚ô¶
Exercise 4.3.2.10. Let r1s denote the free arrow category as in Exercise 4.1.2.31, and
let C be the graph indexing category from (4.7).
Draw the underlying graph of the
category Funpr1s, Cq, and then specify which pairs of paths in that graph correspond to
commutative diagrams in Funpr1s, Cq.
‚ô¶
16When we have a functor, such as Disc: Set √ë Cat, we may sometimes say things like ‚ÄúLet S
be a set, considered as a category‚Äù (or in general, given a functor F : C √ë D, we may say ‚Äúconsider
c P ObpCq, taken as an object in D‚Äù). What this means is that we want to take ideas and methods
available in Cat and use them on our set S. Having our functor Disc lying around, we use it to move S
into Cat, as DiscpSq P ObpCatq, upon which we can use our intended methods. However, our human
minds get bogged down seeing DiscpSq because it is bulky (e.g. FunpDiscp3q, Discp2qq is harder to read
than Funp3, 2q). So we abuse notation and write S in place of DiscpSq. To add insult to injury, we
talk about S as though it was still a set, e.g. discussing its elements rather than its objects. This kind
of conceptual abbreviation is standard practice in mathematical discussion because it eases the mental
burden for experts, but when one says ‚ÄúLet S be an X considered as a Y ‚Äù the other may always ask,
‚ÄúHow again are you considering X‚Äôs to be Y ‚Äôs?‚Äù and expect a functor .

154
CHAPTER 4. BASIC CATEGORY THEORY
4.3.2.11
Natural isomorphisms
Let C and D be categories. We have deÔ¨Åned a category FunpC, Dq whose objects are
functors C √ë D and whose morphisms are natural transformations.
What are the
isomorphisms in this category?
Lemma 4.3.2.12. Let C and D be categories and let F, G: C √ë D be functors. A natural
transformation Œ±: F √ë G is an isomorphism in FunpC, Dq if and only if the component
Œ±c : Fpcq √ë Gpcq is an isomorphism for each object c P ObpCq. In this case Œ± is called a
natural isomorphism.
Proof. First suppose that Œ± is an isomorphism with inverse Œ≤ : G √ë F, and let Œ≤c : Gpcq √ë
Fpcq denote its c component. We know that Œ± Àù Œ≤ ‚Äú idG and Œ≤ Àù Œ± ‚Äú idF . Using the
deÔ¨Ånitions of composition and identity given in Proposition 4.3.2.2, this means that for
every c P ObpCq we have Œ±c Àù Œ≤c ‚Äú idGpcq and Œ≤c Àù Œ±c ‚Äú idF pcq; in other words Œ±c is an
isomorphism.
Second suppose that each Œ±c is an isomorphism with inverse Œ≤c : Gpcq √ë Fpcq. We
need to see that these components assemble into a natural transformation; i.e. for every
morphism h: c √ë c1 in C the right-hand square
Fpcq
‚úì
F phq

Œ±c
/ Gpcq
Gphq

Fpc1q
Œ±c1 / Gpc1q
Gpcq
?
Gphq

Œ≤c
/ Fpcq
F phq

Gpc1q
Œ≤c1
/ Fpc1q
commutes. We know that the left-hand square commutes because Œ± is a natural trans-
formation; we have labeled each square with a ? or a ‚úìaccordingly. In the following
diagram we want to show that the left-hand square commutes. We know that the middle
square commutes.
Gpcq
idGpcq
&
?
Gphq

Œ≤c
/ Fpcq
‚úì
F phq

Œ±c
/ Gpcq
?
Gphq

Œ≤c
/ Fpcq
F phq

Gpc1q
Œ≤c1
/ Fpc1q
Œ±c1
/
idF pc1q
8
Gpc1q
Œ≤c1
/ Fpc1q
To complete the proof we need only to show that Fphq Àù Œ≤c ‚Äú Œ≤c1 Àù Gphq. This can be
shown by a ‚Äúdiagram chase.‚Äù We go through it symbolically, for demonstration.
Fphq Àù Œ≤c ‚Äú Œ≤c1 Àù Œ±c1 Àù Fphq Àù Œ≤c ‚Äú Œ≤c1 Àù Gphq Àù Œ±c Àù Œ≤c ‚Äú Œ≤c1 Àù Gphq.
‚ñ°
Exercise 4.3.2.13. Recall from Application 4.3.1.9 that a Ô¨Ånite state machine on alphabet
Œ£ can be understood as a functor M √ë Set, where M ‚Äú ListpŒ£q is the free monoid

4.3. NATURAL TRANSFORMATIONS
155
generated by Œ£. In that example we also discussed how natural transformations provide
a nice language for changing state machines. Describe what kinds of changes are made
by natural isomorphisms.
‚ô¶
4.3.2.14
Horizontal composition of natural transformations
Example 4.3.2.15 (Whiskering). Suppose that M ‚Äú Listpa, bq and M1 ‚Äú Listpm, n, pq
are free monoids, and let F : M1 √ë M be given by sending rms √û√ë ras, rns √û√ë rbs, and
rps √û√ë rb, a, as. An application of this might be if the sequence rb, a, as was commonly
used in practice and one wanted to add a new button just for that sequence.
Recall Application 4.3.1.9. Let X : M √ë Set and Y : M √ë Set be the functors, and
let Œ±: Y √ë X be the natural transformation found there. We reproduce them here:
Original model X : M √ë Set
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
Proposed model Y : M √ë Set
ID
a
b
State 0
State 1A
State 2A
State 1A
State 2A
State 1B
State 1B
State 2B
State 1C
State 1C
State 2B
State 1B
State 2A
State 0
State 0
State 2B
State 0
State 0
We can compose X and Y with F as in the diagram below
M1
F
/ M
Y
(
X
6
Œ±√≥
Set
to get functors Y Àù F and X Àù F, both of type M1 √ë Set. What would these be? 17
X Àù F
ID
m
n
p
State 0
State 1
State 2
State 1
State 1
State 2
State 1
State 0
State 2
State 0
State 0
State 2
Y Àù F
ID
m
n
p
State 0
State 1A
State 2A
State 1A
State 1A
State 2A
State 1B
State 0
State 1B
State 2B
State 1C
State 0
State 1C
State 2B
State 1B
State 0
State 2A
State 0
State 0
State 2A
State 2B
State 0
State 0
State 2A
The map Œ± is what sent both State 1A and State 1B in Y to State 1 in X, and
so on. We can see that ‚Äúthe same Œ± works now:‚Äù the p column of the table respects
that mapping. But Œ± was a natural transformation Y √ë X where as we need a natural
transformation Y Àù F √ë X Àù F. This is called whiskering. It is a kind of horizontal
composition of natural transformation.
17The p-column comes from applying b then a then a, as speciÔ¨Åed above by F.

156
CHAPTER 4. BASIC CATEGORY THEORY
DeÔ¨Ånition 4.3.2.16 (Whiskering). Let B, C, D, and E be categories, let G1, G2 : C √ë D
be functors, and let Œ±: G1 √ë G2 a natural transformation. Suppose that F : B √ë C
(respectively H : D √ë E) is a functor, depicted below:
B
F
/ C
Œ±√≥
G1 "
G2
?D
¬®
Àö
Àö
Àùrespectively,
C
Œ±√≥
G1 "
G2
?D
H
/ E
Àõ
‚Äπ‚Äπ‚Äö,
Then the pre-whiskering of Œ± by F, denoted Œ± Àõ F : G1 Àù F √ë G2 Àù F (respectively, the
post-whiskering of Œ± by H, denoted H Àõ Œ±: H Àù G1 √ë H Àù G2) is deÔ¨Åned as follows.
For each b P ObpBq the component pŒ± Àõ Fqb : G1 Àù Fpbq √ë G2 Àù Fpbq is deÔ¨Åned to
be Œ±F pbq.
(Respectively, for each c P ObpCq the component pH Àõ Œ±qc : H Àù G1pcq √ë
H Àù G2pcq is deÔ¨Åned to be HpŒ±cq.) Checking that the naturality squares (in each case)
is straightforward.
The rest of this section can safely be skipped; I include it only for my own sense of
completeness.
DeÔ¨Ånition 4.3.2.17 (Horizontal composition of natural transformations). Let B, C, and
D be categories, let F1, F2 : B √ë C and G1, G2 : C √ë D be functors, and let Œ±: F1 √ë F2
and Œ≤ : G1 √ë G2 be natural transformations, as depicted below:
B
Œ±√≥
F1
!
F2
? C
Œ≤√≥
G1 "
G2
?D
By pre- and post-whiskering in one order or the other we get the following diagram
G1 Àù F1
G1ÀõŒ± /
Œ≤ÀõF1

G1 Àù F2
Œ≤ÀõF2

G2 Àù F1
G2ÀõŒ± / G2 Àù F2
It is straightforward to show that this diagram commutes, so we can take the composition
to be our deÔ¨Ånition of the horizontal composition
Œ≤ Àõ Œ±: G1 Àù F1 √ë G2 Àù F2.
Remark 4.3.2.18. Whiskering a natural transformation Œ± with a functor F is the same
thing as horizontally composing Œ± with the identity natural transformation idF . This
is true for both pre- and post- whiskering. For example in the notation of DeÔ¨Ånition
4.3.2.16 we have
Œ± Àõ F ‚Äú Œ± Àõ idF
and
H Àõ Œ± ‚Äú idH Àõ Œ±.
Remark 4.3.2.19. All of the above is somehow similar to the world of paths inside a
database schema S, as seen in DeÔ¨Ånition 3.5.2.3. Indeed, a congruence on the paths of S
is an equivalence relation that is closed under composition. The equivalence relation part
is analogous to the fact that natural transformations can be composed vertically. The
closure under composition part (Properties (3) and (4) in DeÔ¨Ånition 3.5.2.3) is analogous
to pre- and post whiskering. See also Lemma 3.5.2.5.
This is being mentioned only as a curiosity and a way for the reader to draw connec-
tions, not with any additional purpose at this time.

4.3. NATURAL TRANSFORMATIONS
157
Theorem 4.3.2.20.
Œ±1√≥
Œ≤1√≥
C
F1

F2
/
F3
BD
G1

G2
/
G3
BE
Œ±2√≥
Œ≤2√≥
Given a setup of categories, functors, and natural transformations as above, we have
pŒ≤2 Àù Œ≤1q Àõ pŒ±2 Àù Œ±1q ‚Äú pŒ≤2 Àõ Œ±2q Àù pŒ≤1 Àõ Œ±1q.
Proof. One need only observe that each square in the following diagram commutes, so
following the outer path pŒ≤2 Àù Œ≤1q Àõ pŒ±2 Àù Œ±1q yields the same morphism as following the
diagonal path ; pŒ≤2 Àõ Œ±2q Àù pŒ≤1 Àõ Œ±1q:
G1F1
G1ÀõŒ±1/
Œ≤1ÀõF1

G1F2
G1ÀõŒ±2/
Œ≤1ÀõF2

G1F3
Œ≤1ÀõF3

G2F1
G2ÀõŒ±1/
Œ≤2ÀõF1

G2F2
G2ÀõŒ±2/
Œ≤2ÀõF2

G2F3
Œ≤2ÀõF3

G3F1 G3ÀõŒ±1
/ G3F2 G3ÀõŒ±2
/ G3F3
‚ñ°
4.3.3
The category of instances on a database schema
In Section 4.2.2 we showed that schemas are presentations of categories, and we will
show in Section 4.4 that in fact the category of schemas is equivalent to the category
of categories. In this section we therefore take license to blur the distinction between
schemas and categories.
If C is a schema, i.e. a category, then as we discussed in Section 4.2.2.5, an instance
on C is a functor I : C √ë Set. But now we have a notion beyond categories and functors,
namely that of natural transformations. So we make the following deÔ¨Ånition.
DeÔ¨Ånition 4.3.3.1. Let C be a schema (or category). The category of instances on C,
denoted C‚ÄìSet, is FunpC, Setq. Its objects are C-instances (i.e. functors C √ë Setq and
its morphisms are natural transformations.
Remark 4.3.3.2. One might object to DeÔ¨Ånition 4.3.3.1 on the grounds that database
instances should not be inÔ¨Ånite. This is a reasonable perspective, so it is a pleasant fact
that the above deÔ¨Ånition can be modiÔ¨Åed easily to accomodate it. The subcategory Fin
(see Example 4.1.1.4) of Ô¨Ånite sets can be substituted for Set in DeÔ¨Ånition 4.3.3.1. One
could deÔ¨Åne the category of Ô¨Ånite instances on C as C ¬¥ Fin ‚Äú FunpC, Finq. Almost all
of the ideas in this book will make perfect sense in C ¬¥ Fin.
Natural transformations should serve as some kind of morphism between instances on
the same schema. How are we to interpret a natural transformation Œ±: I √ë J between
database instances I, J : C √ë Set?

158
CHAPTER 4. BASIC CATEGORY THEORY
Our Ô¨Årst clue comes from Application 4.3.1.9.
There we considered the case of
a monoid M, and we thought about a natural transformation between two functors
X, Y : M √ë Set, considered as diÔ¨Äerent Ô¨Ånite state machines. The notion of natural
transformation captured the idea of one model being a reÔ¨Ånement of another. This same
kind of idea works for databases with more than one table (categories with more than
one object), but the whole thing is a bit opaque. Let‚Äôs work it through slowly.
Example 4.3.3.3. Let us consider the terminal schema, 1 ‚Äì ‚ÄöGrapes . An instance is a
functor 1 √ë Set and it is easy to see that this is the same thing as just a set. A natural
transformation Œ±: I √ë J is a function from set I to set J. In the standard table view,
we might have I and J as below:
Grapes pIq
ID
Grape 1
Grape 3
Grape 4
Grapes pJq
ID
Jan1-01
Jan1-02
Jan1-03
Jan1-04
Jan3-01
Jan4-01
Jan4-02
There are 343 natural transformations I √ë J. Perhaps some of them make more sense
than others; e.g. we could hope that the numbers in I corresponded to the numbers after
the dash in J, or perhaps to what seems to be the date in January. But it could be that
the rows in J correspond to batches, and all three grapes in I are part of the Ô¨Årst batch
on Jan-1. The notion of natural transformation is a mathematical one.
Exercise 4.3.3.4. Recall the notion of set-indexed sets from DeÔ¨Ånition 2.7.6.12. Let A be
a set, and come up with a schema A such that instances on A are A-indexed sets. Is our
current notion of morphism between instances (i.e. natural transformations) well-aligned
with the above deÔ¨Ånition of ‚Äúmapping of A-indexed sets‚Äù?
‚ô¶
For a general schema (or category) C, let us think through what a morphism Œ±: I √ë J
between instances I, J : C √ë Set is. For each object c P ObpCq there is a component
Œ±c : Ipcq √ë Jpcq. This means that just like in Example 4.3.3.3, there is for each table c
a function from the rows in I‚Äôs manifestation of c to the rows in J‚Äôs manifestation of c.
So to make a natural transformation, such a function has to be speciÔ¨Åed table by table.
But then we have to contend with naturality squares, one for every arrow in C. Arrows
in C correspond to foreign key columns in the database. The naturality requirement was
already covered in Application 4.3.1.9 (and see especially how (4.10) is checked in (4.11)
and (4.12)).
Example 4.3.3.5. We saw in Section 4.2.1.20 that graphs can be regarded as functors
G √ë Set, where G ‚Äì GrIn is the ‚Äúschema for graphs‚Äù shown here:
G :‚Äú
Arrow
‚Äö
src /
tgt /
Vertex
‚Äö
A database instance I : G √ë Set on G consists of two tables. Here is an example

4.3. NATURAL TRANSFORMATIONS
159
instance:
I :‚Äú
‚Äöv
f
/ ‚Äöw
h
=
g
#
‚Äöx
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
To discuss natural transformations, we need two instances. Here is another, J : G √ë Set,
J :‚Äú
q‚Äö
i
/ r‚Äö
j
 s‚Äö
k
_
‚Ñì
/ t‚Äö
u‚Äö
Arrow pJq
ID
src
tgt
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pJq
ID
q
r
s
t
u
To give a natural transformation Œ±: I √ë J, we give two components: one for arrows
and one for vertices. We need to say where each vertex in I goes in J and we need to
say where each arrow in I goes in J. The naturality squares insist that if we specify
that g √û√ë j, for example, then we better specify thatw √û√ë r and that x √û√ë s. What a
computer is very good at, but a human is fairly slow at, is checking that a given pair of
components (arrows and vertices) really is natural.
There are 8000 ways to come up with component functions Œ±Arrow and Œ±Vertex, but
precisely four natural transformations, i.e. four graph homomorphisms, I √ë J; the other
7996 are haphazard Ô¨Çingings of arrows to arrows and vertices to vertices without any
regard to sources and targets. We brieÔ¨Çy describe the four now.
First oÔ¨Ä, nothing can be sent to u because arrows must go to arrows and u touches
no arrows. If we send v √û√ë q then f must map to i, and w must map to r, and both g
and h must map to j, and x must map to s. If we send v √û√ë r then there are two choices
for g and h. If we send v √û√ë s then there‚Äôs one way to obtain a graph morphism. If we
try to send v √û√ë? t, we fail. All of this can be seen by staring at the tables rather than
at the pictorial representations of the graphs; the human eye understands these pictures
better, but the computer understands the tables better.
Exercise 4.3.3.6. If I, J : G √ë Set are as in Example 4.3.3.5, how many natural trans-
formations are there J √ë I?
‚ô¶
Exercise 4.3.3.7. Let YA : G √ë Set denote the instance below:
Arrow pYAq
ID
src
tgt
a
v0
v1
Vertex pYAq
ID
v0
v1
Let I : G √ë Set be as in Example 4.3.3.5.
a.) How many natural transformations are there YA √ë I?
b.) With J as above, how many natural transformations are there YA √ë J?
c.) Do you have any conjecture about the way natural transformations YA √ë X behave
for arbitrary graphs X : G √ë Set?

160
CHAPTER 4. BASIC CATEGORY THEORY
‚ô¶
In terms of databases, this notion of instance morphism I √ë J is fairly benign. For
every table its a mapping from the set of rows in I‚Äôs version of the table to J‚Äôs version
of the table, such that all the foreign keys are respected. We will see that this notion of
morphism has excellent formal properties, so that projections, unions, and joins of tables
(the typical database operations) would be predicted to be ‚Äúobviously interesting‚Äù by a
category theorist who had no idea what a database was. 18
However, something is also missing from the natural transformation picture. A very
important occurrence in the world of databases is the update. Everyone can understand
this: a person makes a change in one of the tables, like changing your address from
Cambridge, MA to Hereford, UK. Most such arbitrary changes of database instance are
not ‚Äúnatural‚Äù, in that the new linking pattern is incompatible with the old.
It is interesting to consider how updates of C-instances should be understood category
theoretically. We might want a category UpdC whose objects are C-instances and whose
morphisms are updates. But then what is the composition formula? Is there a unique
morphism I √ë J whenever J can be obtained as an update on I? Because in that case,
we would be deÔ¨Åning UpdC to be the indiscrete category on the set of C-instances (see
Example 4.3.4.3).
Exercise 4.3.3.8. Research project: Can you come up with a satisfactory way to model
database updates category-theoretically? Let N be the category
rNs :‚Äú
0‚Äö
/ 1‚Äö
/ 2‚Äö
/ ¬® ¬® ¬®
representing a discrete timeline. A place to start might be to use something like the slice
category Cat{rNs where the Ô¨Åber over each object in N is a snapshot of the database in
time. Can you make this work?
‚ô¶
4.3.4
Equivalence of categories
We have a category Cat of categories, and in every category there is a notion of isomor-
phism between objects: one morphism each way, such that each round-trip composition
is the identity. An isomorphism in Cat, therefore, takes place between two categories,
say C and D: it is a functor F : C √ë D and a functor G: D √ë C such that G Àù F ‚Äú idC
and F Àù G ‚Äú idD.
It turns out that categories are often similar enough to be considered equivalent
without being isomorphic. For this reason, the notion of isomorphism is considered ‚Äútoo
strong‚Äù to be useful for categories. The feeling to a category theorist might be akin to
saying that two material samples are the same if there is an atom-by-atom matching, or
that two words are the same if they are written in the same font, of the same size, by
the same person, in the same state of mind.
As reasonable as isomorphism is as a notion in most categories, it fails to be the
‚Äúright notion‚Äù about categories. The reason is that in categories there are objects and
morphisms, whereas when we talk about categories, we have categories and functors, plus
natural transformations. These serve as mappings between mappings, and this is not
part of the structure of an ordinary category. In cases where a category C does have
such mappings between mappings, it is often a ‚Äúbetter notion‚Äù if we take that extra
18More precisely, given a functor between schemas F : C √ë D, the pullback ‚àÜF : D‚ÄìSet √ë C‚ÄìSet, its
left Œ£F and its right adjoint Œ†F constitute these important queries. See Section 5.1.4.

4.3. NATURAL TRANSFORMATIONS
161
structure into account, like we will for categories. This whole subject leads us to the
study of 2-categories (or n-categories, or 8-categories), which we do not discuss in this
book. See, for example, [Le1] for an introduction.
Regardless, our purpose now is to explain this ‚Äúgood notion‚Äù of sameness for cat-
egories, namely equivalences of categories, which appropriately take natural transfor-
mations into account. Instead of ‚Äúfunctors going both ways with round trips equal to
identity‚Äù, which is required in order to be an isomorphism of categories, equivalence of
categories demands ‚Äúfunctors going both ways with round trips isomorphic to identity‚Äù.
DeÔ¨Ånition 4.3.4.1 (Equivalence of categories). Let C and C1 be categories. A functor
F : C √ë C1 is called an equivalence of categories, and denoted F : C
¬ª
√ù√ë C1, 19 if there exists
a functor F 1 : C1 √ë C and natural isomorphisms Œ±: idC
‚Äì
√ù√ë F 1 Àù F and Œ±1 : idC1
‚Äì
√ù√ë F Àù F 1.
In this case we say that F and F 1 are mutually inverse equivalences.
Unpacking a bit, suppose we are given functors F : C √ë C1 and F 1 : C1 √ë C. We want
to know something about the roundtrips on C and on C1; we want to know the same
kind of information about each roundtrip, so let‚Äôs concentrate on the C side. We want
to know something about F 1 Àù F : C √ë C, so let‚Äôs name it i: C √ë C; we want to know
that i is a natural isomorphism. That is, for every c P ObpCq we want an isomorphism
Œ±c : c ‚Äì
√ù√ë ipcq, and we want to know that these isomorphisms are picked carefully enough
that given g: c √ë c1 in C, the choice of isomorphisms for c and c1 are compatible,
c
Œ±c /
g

ipcq
ipgq

c1
Œ±c1 / ipc1q.
To be an equivalence, the same has to hold for the other roundtrip, i1 ‚Äú F Àù F 1 : C1 √ë C1.
Exercise 4.3.4.2. Let C and C1 be categories. Suppose that F : C √ë C1 is an isomorphism
of categories.
a.) Is it an equivalence of categories?
b.) What are the components of Œ± and Œ±1 (with notation as in DeÔ¨Ånition 4.3.4.1)?
‚ô¶
Example 4.3.4.3. Let S be a set and let S ÀÜ S ƒé S ÀÜ S be the complete relation on
S, which is a preorder KS. Recall from Proposition 4.2.1.17 that we have a functor
i: PrO √ë Cat, and the resulting category ipKSq is called the indiscrete category on S;
it has objects S and a single morphism between every pair of objects. Here is a picture
of Kt1,2,3u:
1‚Äö

)

2‚Äö q
i

3‚ÄöD
A
Q
19The notation ¬ª has already been used for equivalences of paths in a schema. We do not mean to
equate these ideas; we are just reusing the symbol. Hopefully no confusion will arise.

162
CHAPTER 4. BASIC CATEGORY THEORY
It is easy check that K1, the indiscrete category on one element, is isomorphic to 1,
the discrete category on one object, also known as the terminal category (see Exercise
4.1.2.37). The category 1 consists of one object, its identity morphism, and nothing else.
The only way that KS can be isomorphic to 1 is if S has one element.
20 On the
other hand, there is an equivalence of categories
KS ¬ª 1
for every set S ‚Ä∞ H.
In fact, there are many such equivalences, one for each element of S. To see this,
let S be a nonempty set and choose an element s0 P S. For every s P S, there is a
unique isomorphism ks : s
‚Äì
√ù√ë s0 in KS. Let F : KS √ë 1 be the only possible functor
(see Exercise 4.1.2.37), and let F 1 : 1 √ë KS send the unique object in 1 to the object s0.
Note that F 1 Àù F ‚Äú id1 : 1 √ë 1 is the identity, but that F Àù F 1 : KS √ë KS sends
everything to s0. Let Œ± ‚Äú id1 and deÔ¨Åne Œ±1 : idKS √ë F Àù F 1 by Œ±1
s ‚Äú ks. Note that Œ±1
s is
an isomorphism for each s P ObpKSq, and note that Œ±1 is a natural transformation (hence
natural isomorphism) because every possible square commutes in KS. This completes
the proof, initiated in the paragraph above, that the category KS is equivalent to 1 for
every nonempty set S, and that this fact can be witnessed by any element s0 P S.
Example 4.3.4.4. Consider the category FLin, described in Example 4.1.1.11, of Ô¨Ånite
nonempty linear orders. For every natural number n P N, let rns P ObpFLinq denote the
linear order shown in Example 3.4.1.7. DeÔ¨Åne a category ‚àÜwhose objects are given by
Obp‚àÜq ‚Äú trns | n P Nu and with Hom‚àÜprms, rnsq ‚Äú HomFLinprms, rnsq. The diÔ¨Äerence
between FLin and ‚àÜis only that objects in FLin may have ‚Äúfunny labels‚Äù, e.g.
5‚Äö
/ x‚Äö
/ ‚ÄúSam‚Äù
‚Äö
whereas objects in ‚àÜall have standard labels, e.g.
0‚Äö
/ 1‚Äö
/ 2‚Äö
Clearly FLin is a much larger category, and yet feels like it is ‚Äúpretty much the same
as‚Äù ‚àÜ. Justly, they are equivalent, FLin ¬ª ‚àÜ.
The functor F 1 : ‚àÜ√ë FLin is the inclusion; the functor F : FLin √ë ‚àÜsends every
Ô¨Ånite nonempty linear order X P ObpFLinq to the object FpXq :‚Äú rns P ‚àÜ, where
ObpXq ‚Äì t0, 1, . . . , nu. For each such X there is a unique isomorphism Œ±X : X
‚Äì
√ù√ë rns,
and these Ô¨Åt together into 21 the required natural isomorphism idFLin √ë F 1 Àù F. The
other natural isomorphism Œ±1 : id‚àÜ√ë F Àù F 1 is the identity.
Exercise 4.3.4.5. Recall from DeÔ¨Ånition 2.1.2.16 that a set X is called Ô¨Ånite if there
exists a natural number n P N and an isomorphism of sets X √ë n. Let Fin denote the
category whose objects are the Ô¨Ånite sets and whose morphisms are the functions. Let
S denote the category whose objects are the sets n and whose morphisms are again the
functions. For every object X P ObpFinq there exists an isomorphism pX : X √ë n for
some unique object n P ObpSq. Find an equivalence of categories Fin ¬ª
√ù√ë S.
‚ô¶
20One way to see this is that by Exercise 4.1.2.38, we have a functor Ob: Cat √ë Set, and we know
by Exercise 4.1.2.24 that functors preserve isomorphisms, so an isomorphism between categories must
restrict to an isomorphism between their sets of objects. The only sets that are isomorphic to 1 have
one element.
21The phrase ‚Äúthese Ô¨Åt together into‚Äù is suggestive shorthand for, and thus can be replaced with, the
phrase ‚Äúthe naturality squares commute for these components, so together they constitute‚Äù.

4.3. NATURAL TRANSFORMATIONS
163
Exercise 4.3.4.6. We say that two categories C and D are equivalent if there exists an
equivalence of categories between them. Show that the relation of ‚Äúbeing equivalent‚Äù is
an equivalence relation on ObpCatq.
‚ô¶
Example 4.3.4.7. Consider the group Z2 :‚Äú pt0, 1u, 0, `q, where 1`1 ‚Äú 0. As a category,
Z2 has one object ‚ñ≤and two morphisms, namely 0, 1, such that 0 is the identity. Since
Z2 is a group, the morphism 1: ‚ñ≤√ë ‚ñ≤must have an inverse x, meaning 1 ` x ‚Äú 0, and
x ‚Äú 1 is the only solution.
The point is that the morphism 1 in Z2 is an isomorphism. Let C ‚Äú 1 be the terminal
category as in Exercise 4.1.2.37. One might accidentally believe that C is equivalent
to Z2, but this is not the case! The argument in favor of the accidental belief is that
we have unique functors F : Z2 √ë C and F 1 : C √ë Z2 (and this is true); the roundtrip
F Àù F 1 : C √ë C is the identity (and this is true); and for the roundtrip F 1 Àù F : Z2 √ë Z2
both morphisms in Z2 are isomorphisms, so any choice of morphism Œ±‚ñ≤: ‚ñ≤√ë F 1 Àù Fp‚ñ≤q
will be an isomorphism (and this is true). The problem is that no such Œ±‚ñ≤will be a
natural transformation.
When we roundtrip F 1 Àù F : Z2 √ë Z2, the image of 1: ‚ñ≤√ë ‚ñ≤is F 1 Àù Fp1q ‚Äú 0 ‚Äú id‚ñ≤.
So the naturality square for the morphism 1 looks like this:
‚ñ≤
Œ±‚ñ≤
/
1

‚ñ≤
0‚ÄúF 1ÀùF p1q

‚ñ≤
Œ±‚ñ≤
/ ‚ñ≤
where we still haven‚Äôt decided whether we want Œ±‚ñ≤to be 0 or 1. Unfortunately, neither
choice works (i.e. for neither choice will the diagram commute) because x ` 1 ‚Ä∞ x ` 0 in
Z2.
DeÔ¨Ånition 4.3.4.8 (Skeleton). Let C be a category. We saw in Lemma 4.1.1.21 that
the relation of ‚Äúbeing isomorphic‚Äù is an equivalence relation ‚Äì on ObpCq. An election in
C is a choice E of the following sort:
‚Ä¢ for each ‚Äì-equivalence class S ƒé ObpCq a choice of object sE P S, called the elected
object for S, and
‚Ä¢ for each object c P ObpCq a choice of isomorphism ic : sE √ë c and jc : c √ë sE with
ic Àù jc ‚Äú idc and jc Àù ic ‚Äú idsE, where sE is an elected object (depending on c).
Given an election E in C, there is a category called the E-elected skeleton of C, denoted
SkelEpCq, whose objects are the elected objects and whose morphisms s √ë t for any
elected objects s, t P ObpCq are given by HomSkelEpCqps, tq ‚Äú HomCps, tq. Any object
c P ObpCq is isomorphic to a unique elected object sE; we refer to sE as the elected rep-
resentative of c; we refer to the isomorphisms ic and jc as the representing isomorphisms
for c.
Proposition 4.3.4.9. Let C be a category and let E be an election in C. There is an
equivalence of categories
SkelEpCq ¬ª C.
Proof. The functor F 1 : SkelEpCq √ë C is the inclusion. The functor F : C √ë SkelEpCq
sends each object in C to its elected representative. Given objects c, c1 P ObpCq with

164
CHAPTER 4. BASIC CATEGORY THEORY
elected representatives s, t respectively, and given a morphism g: c √ë c1 in C, let ic, jc, ic1,
and jc1 be the representing isomorphisms, and deÔ¨Åne Fpgq: s √ë t to be the composite
s
ic
/ c
g
/ c1
jc1
/ t.
This is functorial because it sends the identity to the identity and FpgÀùg1q ‚Äú FpgqÀùFpg1q.
The composite F ÀùF 1 : SkelEpCq √ë SkelEpCq is the identity. For each c P ObpCq deÔ¨Åne
Œ±c : c ‚Äì
√ù√ë F 1 Àù Fpcq by Œ±c :‚Äú jc. Given g: c √ë c1 the required naturality square is shown
to the left below:
c
jc
/
g

?
s
ic
/
F 1ÀùF pgq

c
g

c1
j1
c
/ t
c1
j1
c
o
The right-hand part commutes by deÔ¨Ånition of F and F 1; i.e. j1 Àù g Àù ic ‚Äú F 1 Àù Fpgq. The
left-hand square commutes because ic Àù jc ‚Äú idc.
‚ñ°
DeÔ¨Ånition 4.3.4.10. A skeleton of C is a category S, equivalent to C, such that for any
two objects s, s1 P ObpSq, if s ‚Äì s1 then s ‚Äú s1.
Exercise 4.3.4.11. Let P be a preorder (considered as a category).
a.) If P1 is a skeleton of P, is it a partial order?
b.) Is every partial order the skeleton of some preorder?
‚ô¶
DeÔ¨Ånition 4.3.4.12 (Full and faithful functors). Let C and D be categories, and
let F : C √ë D be a functor.
For any two objects c, c1 P ObpCq, we have a function
HomF pc, c1q: HomCpc, c1q √ë HomDpFpcq, Fpc1qq guaranteed by the deÔ¨Ånition of functor.
We say that F is a full functor if HomF pc, c1q is surjective for every c, c1. We say that
F is a faithful functor if HomF pc, c1q is injective for every c, c1. We say that F is a fully
faithful functor if HomF pc, c1q is bijective for every c, c1.
Exercise 4.3.4.13. Let 1 and 2 be the discrete categories on one and two objects, respec-
tively. There is only one functor 2 √ë 1.
a.) Is it full?
b.) Is it faithful?
‚ô¶
Exercise 4.3.4.14. Let 0 denote the empty category, and let C be any category. There is
a unique functor F : 0 √ë C.
a.) For general C will F be full?
b.) For general C will F be faithful?
c.) For general C will F be an equivalence of categories?

4.4. CATEGORIES AND SCHEMAS ARE EQUIVALENT, CAT ¬ª SCH
165
‚ô¶
Proposition 4.3.4.15. Let C and C1 be categories and let F : C √ë C1 be an equivalence
of categories. Then F is fully faithful.
Proof. Suppose F is an equivalence, so we can Ô¨Ånd a functor F 1 : C1 √ë C and natural
isomorphisms Œ±: idC
‚Äì
√ù√ë F 1 Àù F and Œ±1 : idC1
‚Äì
√ù√ë F Àù F 1. We need to know that for any
objects c, d P ObpCq, the map
HomF pc, dq: HomCpc, dq √ë HomC1pFc, Fdq
is bijective. Consider the following diagram
HomCpc, dq
HomF pc,dq /
Œ±
&
HomC1pFc, Fdq
Œ±1
(
HomF 1pF c,F dq

HomCpF 1Fc, F 1Fdq
HomF pF 1F c,F 1F dq
/ HomC1pFF 1Fc, FF 1Fdq
The fact that Œ± is bijective implies that the vertical function is surjective. The fact that
Œ±1 is bijective implies that the vertical function is injective, so it is bijective. This implies
that HomF pc, dq is bijective as well.
‚ñ°
Exercise 4.3.4.16. Let Z2 be the group (as category) from Example 4.3.4.7. Are there
any fully faithful functors Z2 √ë 1?
‚ô¶
4.4
Categories and schemas are equivalent, Cat ¬ª Sch
Perhaps it is intuitively clear that schemas are somehow equivalent to categories, and in
this section we make that precise. The basic idea was already laid out in Section 4.2.2.
4.4.1
The category Sch of schemas
Recall from DeÔ¨Ånition 3.5.2.6 that a schema consists of a pair C :‚Äú pG, ¬ªq, where G ‚Äú
pV, A, src, tgtq is a graph and ¬ª is a congruence, meaning a kind of equivalence relation
on the paths in G (see DeÔ¨Ånition 3.5.2.3. If we think of a schema as being analogous to a
category, what should fulÔ¨Åll the role of functors? That is, what are to be the morphisms
in Sch?
Unfortunately, ones Ô¨Årst guess may give the wrong notion if we want an equivalence
Sch ¬ª Cat. Since objects in Sch are graphs with additional structure, one might imagine
that a morphism C √ë C1 in Sch should be a graph homomorphism (as in DeÔ¨Ånition
3.3.3.1) that preserves said structure. But graph homomorphisms require that arrows be
sent to arrows, whereas we are more interested in paths than in individual arrows‚Äîthe
arrows are merely useful for presentation.
If instead we deÔ¨Åne morphisms between schemas to be maps that send paths in C to
paths in C1, subject to the requirements that path endpoints, path concatenations, and
path equivalences are preserved, this will turn out to give the correct notion. And since

166
CHAPTER 4. BASIC CATEGORY THEORY
a path is a concatenation of its arrows, it suÔ¨Éces to give a function F from the arrows of
C to the paths of C1, which automatically takes care of the Ô¨Årst two requirements above;
we must only take care that F preserves path equivalences.
Recall from Examples 4.1.2.22 and 4.3.1.13 the paths-graph functor Paths: Grph √ë
Grph, the paths of paths functor Paths Àù Paths: Grph √ë Grph, and the natural
transformations for any graph G,
Œ∑G : G √ë PathspGq
and
¬µG : PathspPathspGqq √ë PathspGq.
(4.13)
The function Œ∑G spells out the fact that every arrow in G counts as a path in G, and the
function ¬µG spells out the fact that a head-to-tail sequence of paths (a path of paths) in
G can be concatenated to a single path in G.
Exercise 4.4.1.1. Let r2s denote the graph
0‚Äö√ë
1‚Äö√ë
2‚Äö, and let Loop denote the unique graph
having one vertex and one arrow (pictured in Diagram (3.17)).
a.) Find a graph homomorphism f : r2s √ë PathspLoopq that is injective on arrows
(i.e.
such that no two arrows in the graph r2s are sent by f to the same arrow
in PathspLoopq).
b.) The graph r2s has 6 paths, so Pathspr2sq has 6 arrows. What are the images of these
arrows under the graph homomorphism Pathspfq: Pathspr2sq √ë PathspPathspLoopqq?
‚ô¶
We are almost ready to give the deÔ¨Ånition of schema morphism, but before we do, let‚Äôs
return to our original idea. Given graphs G, G1 (underlying schemas C, C1) we originally
wanted a function from the paths in G to the paths in G1, but we realized it was more
concise to speak of a function from arrows in G to paths in G1. How do we get back
what we originally wanted from the concise version?
Given a graph homomorphism
f : G √ë PathspG1q, we use (4.13) to form the following composition, which we denote
simply by Pathsf : PathspGq √ë PathspG1q:
PathspGq
Pathspfq / PathspPathspG1qq
¬µG1
/ PathspG1q
(4.14)
This says that given a function from arrows in G to paths in G1, a path in G becomes
a path of paths in G1, which can be concatenated to a path in G1. This simply and
precisely spells out our intuition.
DeÔ¨Ånition 4.4.1.2 (Schema morphism). Let G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q
be graphs, and let C ‚Äú pG, ¬ªGq and C1 ‚Äú pG1, ¬ªG1q be schemas. A schema morphism F
from C to D, denoted F : C √ë D is a graph homomorphism 22
F : G √ë PathspG1q
that satisÔ¨Åes the following condition for any paths p and q in G:
if
p ¬ªG q
then
PathsF ppq ¬ªG1 PathsF pqq.
(4.15)
Two schema morphisms E, F : C √ë C1 are considered identical if they agree on vertices
(i.e. E0 ‚Äú F0) and if, for every arrow f in G, there is a path equivalence in G1
E1pfq ¬ªG1 F1pfq.
22By DeÔ¨Ånition 3.3.3.1, a graph homomorphism F : G √ë PathspG1q will consist of a vertex part
F0 : V √ë V 1 and an arrows part F1 : E √ë PathpG1q. See also DeÔ¨Ånition 3.3.2.1.

4.4. CATEGORIES AND SCHEMAS ARE EQUIVALENT, CAT ¬ª SCH
167
We now deÔ¨Åne the category of schemas, denoted Sch, to be the category whose objects
are schemas as in DeÔ¨Ånition 3.5.2.6 and whose morphisms are schema morphisms deÔ¨Åned
as above.
The identity morphism on schema C ‚Äú pG, ¬ªGq is the schema morphism
idC :‚Äú Œ∑G : G √ë PathspGq as deÔ¨Åned in Equation (4.13). We need only understand
how to compose schema morphisms F : C √ë C1 and F 1 : C1 √ë C2.
On objects their
composition is obvious. Given an arrow in C, it is sent to a path in C1; each arrow in that
path is sent to a path in C2. We then have a path of paths which we can concatenate
(via ¬µG2 : PathspPathspG2qq √ë PathspG2q as in 4.13) to get a path in C2 as desired.
Slogan 4.4.1.3.
‚Äú A schema morphism sends vertices to vertices, arrows to paths, and path
equivalences to path equivalences. ‚Äù
Example 4.4.1.4. Let r2s be the linear order graph of length 2, pictured to the left, and
let C denote the schema pictured to the right below:
r2s :‚Äú
0‚Äö
f1
/ 1‚Äö
f2
/ 2‚Äö
C :‚Äú
a‚Äö
g
/
i

b‚Äö
h
c‚Äö
We impose on C the path equivalence declaration rg, hs ¬ª ris and show that in this case
C and r2s are isomorphic in Sch. We have a schema morphism F : r2s √ë C sending
0 √û√ë a, 1 √û√ë b, 2 √û√ë c, and sending each arrow in r2s to an arrow in C. And we have
a schema morphism F 1 : C √ë r2s which reverses this mapping on vertices; note that
F 1 must send the arrow i in C to the path rf1, f2s in r2s, which is ok! The roundtrip
F 1 Àù F : r2s √ë r2s is identity.
The roundtrip F Àù F 1 : C √ë C may look like it‚Äôs not
the identity; indeed it sends vertices to themselves but it sends i to the path rg, hs.
But according to DeÔ¨Ånition 4.4.1.2, this schema morphism is considered identical to idC
because there is a path equivalence idCpiq ‚Äú ris ¬ª rg, hs ‚Äú F Àù F 1piq.
Exercise 4.4.1.5. Consider the schema r2s and the schema C pictured above, except where
this time we do not impose any path equivalence declarations on C, so rg, hs Ô¨Åris in our
current version of C.
a.) How many schema morphisms are there r2s √ë C that send 0 to a?
b.) How many schema morphisms are there C √ë r2s that send a to 0?
‚ô¶
Exercise 4.4.1.6. Consider the graph Loop pictured below
Loop :‚Äú
s‚Äö
f

and for any natural number n, let Ln denote the schema pLoop, ¬ªnq where ¬ªn is the
PED f n`1 ¬ª f n. This is the ‚ÄúÔ¨Ånite hierarchy‚Äù schema of Example 3.5.2.11. Let 1 denote
the graph with one vertex and no arrows; consider it as a schema.

168
CHAPTER 4. BASIC CATEGORY THEORY
a.) Is 1 isomorphic to L1 in Sch?
b.) Is it isomorphic to any (other) Ln?
‚ô¶
Exercise 4.4.1.7. Let Loop and Ln be the schemas deÔ¨Åned in Exercise 4.4.1.6.
a.) What is the cardinality of the set HomSchpL3, L5q?
b.) What is the cardinality of the set HomSchpL5, L3q? Hint: the cardinality of the set
HomSchpL4, L9q is 8.
‚ô¶
4.4.2
Proving the equivalence
Construction 4.4.2.1 (From schema to category). We will deÔ¨Åne a functor L: Sch √ë
Cat. Let C ‚Äú pG, ¬ªq be a categorical schema, where G ‚Äú pV, A, src, tgtq. DeÔ¨Åne LpCq to
be the category with ObpLpCqq ‚Äú V , and with HomLpCqpv1, v2q :‚Äú PathGpv, wq{ ¬ª, i.e.
the set of paths in G, modulo the path equivalence relation for C. The composition of
morphisms is deÔ¨Åned by concatenation of paths, and Lemma 3.5.2.5 ensures that such
composition is well-deÔ¨Åned. We have thus deÔ¨Åned L on objects of Sch.
Given a schema morphism F : C √ë C1, where C1 ‚Äú pG1, ¬ª1q, we need to produce
a functor LpFq: LpCq √ë LpC1q. The objects of LpCq and LpC1q are the vertices of G
and G1 respectively, and F provides the necessary function on objects. Diagram (4.14)
provides a function PathsF : PathspGq √ë PathspG1q will provide the requisite function
for morphisms.
A morphism in LpCq is an equivalence class of paths in C. For any representative path
p P PathspGq, we have PathsF ppq P PathspG1q, and if p ¬ª q then PathsF ppq ¬ª1 PathsF pqq
by condition 4.15. Thus PathsF indeed provides us with a function HomLpCq √ë HomLpC1q.
This deÔ¨Ånes L on morphisms in Sch.
It is clear that L preserves composition and
identities, so it is a functor.
Construction 4.4.2.2 (From category to schema). We will deÔ¨Åne a functor R: Cat √ë
Sch. Let C ‚Äú pObpCq, HomC, dom, cod, ids, Àùq be a category (see Exercise 4.1.1.23). Let
RpCq ‚Äú pG, ¬ªq where G is the graph
G ‚Äú pObpCq, HomC, dom, codq,
and with ¬ª deÔ¨Åned as the congruence generated by the following path equivalence dec-
larations: for any composable sequence of morphisms f1, f2, . . . , fn (with dompfi`1q ‚Äú
codpfiq for each 1 ƒè i ƒè n ¬¥ 1) we put
rf1, f2, . . . , fns ¬ª rfn Àù ¬® ¬® ¬® Àù f2 Àù f1s.
(4.16)
This deÔ¨Ånes R on objects of Cat.
A functor F : C √ë D induces a schema morphism RpFq: RpCq √ë RpDq, because
vertices are sent to vertices, arrows are sent to arrows (as paths of length 1), and path
equivalence is preserved by (5.14) and the fact that F preserves the composition formula.
This deÔ¨Ånes R on morphisms in Cat. It is clear that R preserves compositions, so it is
a functor.

4.5. LIMITS AND COLIMITS
169
Theorem 4.4.2.3. The functors
L: Sch
/ Cat: R
o
are mutually inverse equivalences of categories.
Sketch of proof. It is clear that there is a natural isomorphism Œ±: idCat
‚Äì
√ù√ë L Àù R; i.e.
for any category C, there is an isomorphism C ‚Äì LpRpCqq.
Before giving an isomorphism Œ≤ : idSch
‚Äì
√ù√ë R Àù L, we brieÔ¨Çy describe RpLpSqq ‚Äú:
pG1, ¬ª1q for a schema S ‚Äú pG, ¬ªq. Write G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q.
On vertices we have V ‚Äú V 1. On arrows we have A1 ‚Äú PathG{ ¬ª. The congruence ¬ª1
for RpLpSqq is imposed in (5.14). Under ¬ª1, every path of paths in G is made equivalent
to its concatenation, considered as a path of length 1 in G1.
There is a natural transformation Œ≤ : idSch √ë R Àù L whose S-component sends each
arrow in G to a certain path of length 1 in G1. We need to see that Œ≤S has an inverse.
But this is straightforward: every arrow f in R Àù LpSq is an equivalence class of paths
in S; choose any one and send f there; by DeÔ¨Ånition 4.4.1.2 any other choice will give
the identical morphism of schemas. It is easy to show that the roundtrips are identities
(again up to the notion of identity given in DeÔ¨Ånition 4.4.1.2).
‚ñ°
4.5
Limits and colimits
Limits and colimits are universal constructions, meaning they represent certain ideals of
behavior in a category. When it comes to sets that map to A and B, the pA ÀÜ Bq-grid is
ideal‚Äîit projects on to both A and B as straightforwardly as possible. When it comes
to sets that can interpret the elements of both A and B, the disjoint union A \ B is
ideal‚Äîit includes both A and B without confusion or superÔ¨Çuity. These are limits and
colimits in Set. Limits and colimits exist in other categories as well.
Limits in a preorder are meets, colimits in a preorder are joins. Limits and colimits
also exist for database instances and monoid actions, allowing us to discuss for example
the product or union of diÔ¨Äerent state machines. Limits and colimits exist for spaces,
giving rise to products and unions, as well as quotients.
Limits and colimits do not exist in every category; when C is complete with respect
to limits (or colimits), these limits always seem to mean something valuable to human
intuition. For example, when a subject has already been studied for a long time before
category theory came around, it often turns out that classically interesting constructions
in the subject correspond to limits and colimits in its categoriÔ¨Åcation C. For example
products, unions, equivalence relations, etc. are classical ideas in set theory that are
naturally captured by limits and colimits in Set.
4.5.1
Products and coproducts in a category
In Sections 2.4, we discussed products and coproducts in the category Set of sets. Now
we discuss the same notions in an arbitrary category. For both products and coproducts
we will begin with examples and then write down the general concept, but we‚Äôll work on
products Ô¨Årst.

170
CHAPTER 4. BASIC CATEGORY THEORY
4.5.1.1
Products
The product of two sets is a grid, which projects down onto each of the two sets. This
is good intuition for products in general.
Example 4.5.1.2. Given two preorders, X1 :‚Äú pX1, ƒè1q and X2 :‚Äú pX2, ƒè2q, we can take
their product and get a new preorder X1 ÀÜ X2. Both X1 and X2 have underlying sets
(namely X1 and X2), so we might hope that the underlying set of X1 ÀÜ X2 is the set
X1 ÀÜX2 of ordered pairs, and this turns out to be true. We have a notion of less-than on
X1 and we have a notion of less-than on X2; we need to construct a notion of less-than
on X1 ÀÜ X2. So, given two ordered pairs px1, x2q and px1
1, x1
2q, when should we say that
px1, x2q ƒè1,2 px1
1, x1
2q holds? The obvious guess is to say that it holds iÔ¨Äboth x1 ƒè1 x1
1
and x2 ƒè2 x1
2 hold, and this works:
X1 ÀÜ X2 :‚Äú pX1 ÀÜ X2, ƒè1,2q
Note that the projection functions X1 ÀÜ X2 √ë X1 and X1 ÀÜ X2 √ë X2 induce
morphisms of preorders. That is, if px1, x2q ƒè1,2 px1
1, x1
2q then in particular x1 ƒè x1
1. So
we have preorder morphisms
X1 ÀÜ X2


X1
X2
Exercise 4.5.1.3. Suppose that you have a partial order pS, ƒèSq on songs (so you know
some songs are preferable to others but sometimes you can‚Äôt compare). And suppose
you have a partial order pA, ƒèAq on pieces of art. You‚Äôre about to be given a pair ps, aq
including a song and a piece of art. Does the product partial order S ÀÜ A provide a
reasonable guess for your preferences on pairs?
‚ô¶
Exercise 4.5.1.4. Consider the partial order ƒè on N given by standard ‚Äúless-than-or-
equal-to‚Äù, so 5 ƒè 9 etc.
And consider another partial order, divides on N, where
a divides b if ‚Äúa goes into b evenly‚Äù, i.e. if there exists n P N such that a Àö n ‚Äú b, so
5 divides 35. If we call the product order pX, ƒ∫q :‚Äú pN, ƒèq ÀÜ pN, dividesq, which of
the following are true:
p2, 4q ƒ∫ p3, 4q?
p2, 4q ƒ∫ p3, 5q?
p2, 4q ƒ∫ p8, 0q?
p2, 4q ƒ∫ p0, 0q?
‚ô¶
Example 4.5.1.5. Given two graphs G1 ‚Äú pV1, A1, src1, tgt1q and G2 ‚Äú pV2, A2, src2, tgt2q,
we can take their product and get a new graph G1 ÀÜ G2. The vertices will be the grid
of vertices V1 ÀÜ V2, so each vertex in G1 ÀÜ G2 is labeled by a pair of vertices, one from
G1 and one from G2. When should an arrow connect pv1, v2q to pv1
1, v1
2q? Whenever we
can Ô¨Ånd an arrow in G1 connecting v1 to v1
1 and we can Ô¨Ånd an arrow in G2 connecting
v2 to v1
2. It turns out there is a simple formula for the set of arrows in G1 ÀÜ G2, namely
A1 ÀÜ A2.
Let‚Äôs write G :‚Äú G1ÀÜG2 and say G ‚Äú pV, A, src, tgtq. We now know that V ‚Äú V1ÀÜV2
and A ‚Äú A1 ÀÜ A2. What should the source and target functions A √ë V be? Given a
function src1 : A1 √ë V1 and a function src2 : A2 √ë V2, the universal property of products
in Set (Lemma 2.4.1.10 or better Example 2.4.1.16) provides a unique function
src :‚Äú src1 ÀÜ src2 : A1 ÀÜ A2 √ë V1 ÀÜ V2

4.5. LIMITS AND COLIMITS
171
Namely the source of arrow pa1, a2q will be the vertex psrc1pa1q, src2pa2qq. Similarly we
have a ready-made choice of target function tgt ‚Äú tgt1 ÀÜ tgt2. We have now deÔ¨Åned the
product graph.
Here‚Äôs a concrete example. Let I and J be as drawn below:
I :‚Äú
v‚Äö
f 
w‚Äö
g

h

x‚Äö
J :‚Äú
q‚Äö
i
/ r‚Äö
j
 s‚Äö
k
_
‚Ñì
/ t‚Äö
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
Arrow pJq
ID
src
tgt
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pJq
ID
q
r
s
t
The product I ÀÜJ drawn below has, as expected 3Àö4 ‚Äú 12 vertices and 3Àö4 ‚Äú 12 arrows:
I ÀÜ J :‚Äú
pv,qq
‚Äö
pf,iq
!
pv,rq
‚Äö
!
pv,sq
‚Äö
}
 
pv,tq
‚Äö
pw,qq
‚Äö
%
pw,rq
‚Äö
%
pw,sq
‚Äö
y
%
pw,tq
‚Äö
px,qq
‚Äö
px,rq
‚Äö
px,sq
‚Äö
px,tq
‚Äö
Arrow
pI ÀÜ Jq
ID
src
tgt
pf, iq
pv, qq
pw, rq
pf, jq
pv, rq
pw, sq
pf, kq
pv, sq
pw, rq
pf, ‚Ñìq
pv, sq
pw, tq
pg, iq
pw, qq
px, rq
pg, jq
pw, rq
px, sq
pg, kq
pw, sq
px, rq
pg, ‚Ñìq
pw, sq
px, tq
ph, iq
pw, qq
px, rq
ph, jq
pw, rq
px, sq
ph, kq
pw, sq
px, rq
ph, ‚Ñìq
pw, sq
px, tq
Vertex
pI ÀÜ Jq
ID
pv, qq
pv, rq
pv, sq
pv, tq
pw, qq
pw, rq
pw, sq
pw, tq
px, qq
px, rq
px, sq
px, tq
Here is the most important thing to notice.
Look at the Arrow table for I ÀÜ J,
and for each ordered pair, look only at the second entry in all three columns; you will
see something that matches with the Arrow table for J. Do the same for I, and again
you‚Äôll see a perfect match. These ‚Äúmatchings‚Äù are readily-visible graph homomorphisms
I ÀÜ J √ë I and I ÀÜ J √ë J in Grph.
Exercise 4.5.1.6. Let r1s ‚Äú
0‚Äö
f
√ù√ù√ë
1‚Äö be the linear order graph of length 1 and let P ‚Äú
Pathspr1sq be its paths-graph, as in Example 4.1.2.22 (so P should have three arrows
and two vertices). Draw the graph P ÀÜ P.
‚ô¶
Exercise 4.5.1.7. Recall from Example 3.5.2.9 that a discrete dynamical system (DDS)
is a set s together with a function f : s √ë s. By now it should be clear that if
Loop :‚Äú
s‚Äö
f


172
CHAPTER 4. BASIC CATEGORY THEORY
is the loop schema, then a DDS is simply an instance (a functor) I : Loop √ë Set. We
have not yet discussed products of DDS‚Äôs, but perhaps you can guess how they should
work. For example, consider the instances I, J : Loop √ë Set tabulated below:
s
(I)
ID
f
A
C
B
C
C
C
s
(J)
ID
f
x
y
y
x
z
z
a.) Make a guess and tabulate I ÀÜ J. Then draw it.23
b.) Recall the notion of natural transformations between functors (see Example 4.3.3.5),
which in the case of functors Loop √ë Set are the morphisms of instances. Do you see
clearly that there is a morphism of instances I ÀÜ J √ë I and I ÀÜ J √ë J? Just check
that if you look only at the left-hand coordinates in your I ÀÜ J, you see something
compatible with I.
‚ô¶
In every case above, what‚Äôs most important to recognize is that there are projection
maps IÀÜJ √ë I and IÀÜJ √ë J, and that the construction of IÀÜJ seems as straightforward
as possible, subject to having these projections. It is time to give the deÔ¨Ånition.
DeÔ¨Ånition 4.5.1.8. Let C be a category and let X, Y P ObpCq be objects. A span on X
and Y consists of three constituents pZ, p, qq, where Z P ObpCq is an object, and where
p: Z √ë X and q: Z √ë Y are morphisms in C.
Z
p

q

X
Y
A product of X and Y is a span X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y , 24 such that for any other span
X
p√ê√ù Z
q√ù√ë Y there exists a unique morphism tp,q : Z √ë X ÀÜ Y such that the diagram
below commutes:
X ÀÜ Y
œÄ1

œÄ2

X
Y
Z
p
\
q
B
tp,q
O
Remark 4.5.1.9. DeÔ¨Ånition 4.5.1.8 endows the product of two objects with something
known as a universal property. It says that a product of two objects X and Y maps to
23The result is not necessarily inspiring, but at least computing it is straightforward.
24The names X ÀÜ Y and œÄ1, œÄ2 are not mathematically important, they are pedagogically suggestive.

4.5. LIMITS AND COLIMITS
173
those two objects, and serves as a gateway for all who do the same. ‚ÄúNone shall map
to X and Y except through me!‚Äù This grandiose property is held by products in all the
various categories we have discussed so far. It is what I meant when I said things like
‚ÄúX ÀÜY maps to both X and Y and does so as straightforwardly as possible‚Äù. The grid of
dots obtained as the product of two sets has such a property, as was shown in Example
2.4.1.11.
Example 4.5.1.10. In Example 4.5.1.2 we discussed products of preorders. In this example
we will discuss products in an individual preorder. That is, by Proposition 4.2.1.17, there
is a functor PrO √ë Cat that realizes every preorder as a category. If P ‚Äú pP, ƒèq is
a preorder, what are products in P? Given two objects a, b P ObpPq we Ô¨Årst consider
spans on a and b, i.e. a √ê z √ë b. That would be some z such that z ƒè a and z ƒè b. The
product will be such a span a ƒõ a ÀÜ b ƒè b, but such that every other spanning object z
is less than or equal to a ÀÜ b. In other words a ÀÜ b is as big as possible subject to the
condition of being less than a and less than b. This is precisely the meet of a and b (see
DeÔ¨Ånition 3.4.2.1).
Example 4.5.1.11. Note that the product of two objects in a category C may not exist.
Let‚Äôs return to preorders to see this phenomenon.
Consider the set R2, and say that px1, y1q ƒè px2, y2q if there exists ‚Ñìƒõ 1 such that
x1‚Ñì‚Äú x2 and y1‚Ñì‚Äú y2; in other words, point p is less than point q if, in order to travel
from q to the origin along a straight line, one must pass through p along the way.
25
We have given a perfectly good partial order, but p :‚Äú p1, 0q and q :‚Äú p0, 1q do not
have a product. Indeed, it would have to be a non-zero point that was on the same
line-through-the origin as p and the same line-through-the-origin as q, of which there are
none.
Example 4.5.1.12. Note that there can be more than one product of two objects in a
category C, but that any two choices will be canonically isomorphic. Let‚Äôs return once
more to preorders to see this phenomenon.
Consider the set R2 and say that px1, y1q ƒè px2, y2q if x2
1 ` y2
1 ƒè x2
2 ` y2
2, in other
words if the former is on a smaller 0-circle (by which I mean ‚Äúcircle centered at the
origin‚Äù) than the latter is.
For any two points p, q there will be lots of points that serve as products: anything
on the smaller of their two 0-circles will suÔ¨Éce. Given any two points a, b on this smaller
circle, we will have a unique isomorphism a ‚Äì b because a ƒè b and b ƒè a and all
morphisms are unique in a preorder.
Exercise 4.5.1.13. Consider the preorder P of cards in a deck, shown in Example 3.4.1.3;
it is not the entire story of cards in a deck, but take it to be so. In other words, be like
a computer and take what‚Äôs there at face value. Consider the preorder P as a category
(by way of the functor PrO √ë Cat).
a.) For each of the following pairs, what is their product in P (if it exists)?
‚åúa diamond‚åùÀÜ ‚åúa heart‚åù?
‚åúa queen‚åùÀÜ ‚åúa black card‚åù?
‚åúa card‚åùÀÜ ‚åúa red card‚åù?
‚åúa face card‚åùÀÜ ‚åúa black card‚åù?
b.) How would these answers diÔ¨Äer if P was completed to the ‚Äúwhole story‚Äù partial order
classifying cards in a deck?
‚ô¶
25Note that p0, 0q is not related to anything else.

174
CHAPTER 4. BASIC CATEGORY THEORY
Exercise 4.5.1.14. Let X be a set, and consider it as a discrete category. Given two
objects x, y P ObpXq, under what conditions will there exist a product x ÀÜ y?
‚ô¶
Exercise 4.5.1.15. Let f : R √ë R be a function, like you would see in 6th grade (maybe
fpxq ‚Äú x ` 7). A typical thing to do is to graph f as a curve running through the plane
R2 :‚Äú R ÀÜ R. This curve can be understood as a function F : R √ë R2.
a.) Given some x P R, what are the coordinates of Fpxq P R2?
b.) Obtain F : R √ë R2 using the universal property given in DeÔ¨Ånition 4.5.1.8.
‚ô¶
Exercise 4.5.1.16. Consider the preorder pN, dividesq, discussed in Exercise 4.5.1.4,
where e.g. 5 ƒè 15 but 5 ƒô 6.
a.) What is the product of 9 and 12 in this category?
b.) Is there a standard name for products in this category?
‚ô¶
Example 4.5.1.17. All products exist in the category Cat. Given two categories C and
D, there is a product category C ÀÜ D. We have ObpC ÀÜ Dq ‚Äú ObpCq ÀÜ ObpDq and for
any two objects pc, dq and pc1, d1q, we have
HomCÀÜDppc, dq, pc1, d1qq ‚Äú HomCpc, c1q ÀÜ HomCpd, d1q.
The composition formula is ‚Äúobvious‚Äù.
Let r1s P ObpCatq denote the linear order category of length 1, drawn
r1s :‚Äú
0‚Äö
f
/ 1‚Äö
As a schema it has one arrow, but as a category it has three morphisms. So we expect
r1sÀÜr1s to have 9 morphisms, and that‚Äôs true. In fact, r1sÀÜr1s looks like a commutative
square:
p0,0q
‚Äö
id0ÀÜf
/
fÀÜid0

p0,1q
‚Äö
fÀÜid1

p1,0q
‚Äö
id1ÀÜf
/ p1,1q
‚Äö
(4.17)
We see only four morphisms here, but there are also four identities and one morphism
p0, 0q √ë p1, 1q given by composition of either direction. It is a minor miracle that the
categorical product somehow ‚Äúknows‚Äù that this square should commute; however, this is
not the mere preference of man but instead the dictate of God! By which I mean, this
follows rigorously from the deÔ¨Ånitions we already gave of Cat and products.
4.5.1.18
Coproducts
The coproduct of two sets is their disjoint union, which includes non-overlapping copies
of each of the two sets. This is good intuition for coproducts in general.

4.5. LIMITS AND COLIMITS
175
Example 4.5.1.19. Given two preorders, X1 :‚Äú pX1, ƒè1q and X2 :‚Äú pX2, ƒè2q, we can take
their coproduct and get a new preorder X1 \ X2. Both X1 and X2 have underlying sets
(namely X1 and X2), so we might hope that the underlying set of X1 ÀÜX2 is the disjoint
union X1 \ X2, and that turns out to be true. We have a notion of less-than on X1 and
we have a notion of less-than on X2.
Given an element x P X1 \ X2 and an element x1 P X1 \ X2, how can we use ƒè1 and
ƒè2 to compare x1 and x2? The relation ƒè1 only knows how to compare elements of X1
and the relation ƒè2 only knows how to compare elements of X2. But x and x1 may come
from diÔ¨Äerent homes; e.g. x P X1 and x1 P X2, in which case neither ƒè1 nor ƒè2 gives
any clue about which should be bigger.
So when should we say that x ƒè1\2 x1 holds? The obvious guess is to say that x is
less than x1 iÔ¨Äsomebody says it is; that is, if both x and x1 are from the same home and
the local ordering has x ƒè x1. To be precise, we say x ƒè1\2 x1 if and only if either one
of the following conditions hold:
‚Ä¢ x P X1 and x1 P X1 and x ƒè1 x1, or
‚Ä¢ x P X2 and x1 P X2 and x ƒè2 x1.
With ƒè1\2 so deÔ¨Åned, one checks that it is not only a preorder, but that it serves as a
coproduct of X1 and X2,
X1 \ X2 :‚Äú pX1 \ X2, ƒè1\2q.
Note that the inclusion functions X1 √ë X1\X2 and X2 √ë X1\X2 induce morphisms
of preorders. That is, if x, x1 P X1 are elements such that x ƒè1 x1 in X1 then the same
will hold in X1 \ X2. So we have preorder morphisms
X1 \ X2
X1
A
X2
]
Exercise 4.5.1.20. Suppose that you have a partial order A :‚Äú pA, ƒèAq on apples (so
you know some apples are preferable to others but sometimes you can‚Äôt compare). And
suppose you have a partial order O :‚Äú pO, ƒèOq on oranges. You‚Äôre about to be given
two pieces of fruit from a basket of apples and oranges. Is the coproduct partial order
A \ O a reasonable guess for your preferences, or does it seem biased?
‚ô¶
Example 4.5.1.21. Given two graphs G1 ‚Äú pV1, A1, src1, tgt1q and G2 ‚Äú pV2, A2, src2, tgt2q,
we can take their coproduct and get a new graph G1 \ G2. The vertices will be the dis-
joint union of vertices V1 \ V2, so each vertex in G1 \ G2 is labeled either by a vertex
in G1 or by one in G2 (and if any labels are shared, then something must be done to
diÔ¨Äerentiate them). When should an arrow connect v to v1? Whenever both are from the
same component (i.e. either v, v1 P V1 or v, v1 P V2) and we can Ô¨Ånd an arrow connecting
them in that component. It turns out there is a simple formula for the set of arrows in
G1 \ G2, namely A1 \ A2.
Let‚Äôs write G :‚Äú G1\G2 and say G ‚Äú pV, A, src, tgtq. We now know that V ‚Äú V1\V2
and A ‚Äú A1 \ A2. What should the source and target functions A √ë V be? Given
a function src1 : A1 √ë V1 and a function src2 : A2 √ë V2, the universal property of
coproducts in Set can be used to specify a unique function
src :‚Äú src1 \ src2 : A1 \ A2 √ë V1 \ V2.

176
CHAPTER 4. BASIC CATEGORY THEORY
Namely for any arrow a P A, we know either a P A1 or a P A2 (and not both), so the
source of a will be the vertex src1paq if a P A1 and src2paq if a P A2. Similarly we
have a ready-made choice of target function tgt ‚Äú tgt1 \ tgt2. We have now deÔ¨Åned the
coproduct graph.
Here‚Äôs a real example. Let I and J be as in Example 4.3.3.5, drawn below:
I :‚Äú
v‚Äö
f 
w‚Äö
g

h

x‚Äö
J :‚Äú
q‚Äö
i
/ r‚Äö
j
 s‚Äö
k
_
‚Ñì
/ t‚Äö
u‚Äö
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
Arrow pJq
ID
src
tgt
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pJq
ID
q
r
s
t
u
The coproduct I \ J drawn below has, as expected 3 ` 5 ‚Äú 8 vertices and 3 ` 4 ‚Äú 7
arrows:
I \ J :‚Äú
v‚Äö
f 
w‚Äö
g

h

q‚Äö
i
/ r‚Äö
j
 s‚Äö
k
_
‚Ñì
/ t‚Äö
x‚Äö
u‚Äö
Arrow pI \ Jq
ID
src
tgt
f
v
w
g
w
x
h
w
x
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pI \ Jq
ID
v
w
x
q
r
s
t
u
Here is the most important thing to notice. Look at the Arrow table I and notice
that there is a way to send each row to a row in I \ J, such that all the foreign keys
match. Similarly in the arrow table and the two vertex tables for J. These ‚Äúmatchings‚Äù
are readily-visible graph homomorphisms I √ë I \ J and J √ë I \ J in Grph.
Exercise 4.5.1.22. Recall from Example 3.5.2.9 that a discrete dynamical system (DDS)
is a set s together with a function f : s √ë s; if
Loop :‚Äú
s‚Äö
f

is the loop schema, then a DDS is simply an instance (a functor) I : Loop √ë Set. We
have not yet discussed coproducts of DDS‚Äôs, but perhaps you can guess how they should

4.5. LIMITS AND COLIMITS
177
work. For example, consider the instances I, J : Loop √ë Set tabulated below:
s
(I)
ID
f
A
C
B
C
C
C
s
(J)
ID
f
x
y
y
x
z
z
Make a guess and tabulate I \ J. Then draw it.
‚ô¶
In every case above (preorders, graphs, DDSs), what‚Äôs most important to recognize
is that there are inclusion maps I √ë I \ J and J √ë I \ J, and that the construction of
I \ J seems as straightforward as possible, subject to having these inclusions. It is time
to give the deÔ¨Ånition.
DeÔ¨Ånition 4.5.1.23. Let C be a category and let X, Y P ObpCq be objects. A cospan
on X and Y consists of three constituents pZ, i, jq, where Z P ObpCq is an object, and
where i: X √ë Z and j : Y √ë Z are morphisms in C.
Z
X
i
E
Y
j
X
A coproduct of X and Y is a cospan X
Œπ1
√ù√ë X \ Y
Œπ2
√ê√ù Y , 26 such that for any other
cospan X
i√ù√ë Z
j√ê√ù Y there exists a unique morphism si,j : X \ Y √ë Z such that the
diagram below commutes:
X \ Y
si,j

X
Œπ1
B
i

Y
Œπ2
\
j

Z
Remark 4.5.1.24. DeÔ¨Ånition 4.5.1.8 endows the coproduct of two objects with a universal
property. It says that a coproduct of two objects X and Y receives maps from those two
objects, and serves as a gateway for all who do the same. ‚ÄúNone shall receive maps from
X and Y except through me!‚Äù This grandiose property is held by all the coproducts we
have discussed so far. It is what I meant when I said things like ‚ÄúX \ Y receives maps
from both X and Y and does so as straightforwardly as possible‚Äù. The disjoint union
of dots obtained as the coproduct of two sets has such a property, as can be seen by
thinking about Example 2.4.2.5.
Example 4.5.1.25. By Proposition 4.2.1.17, there is a functor PrO √ë Cat that realizes
every preorder as a category. If P ‚Äú pP, ƒèq is a preorder, what are coproducts in P?
Given two objects a, b P ObpPq we Ô¨Årst consider cospans on a and b, i.e. a √ë z √ê b.
26The names X \ Y and Œπ1, Œπ2 are not mathematically important, they are pedagogically suggestive.

178
CHAPTER 4. BASIC CATEGORY THEORY
A cospan of a and b is any z such that a ƒè z and b ƒè z. The coproduct will be such a
cospan a ƒè a \ b ƒõ b, but such that every other cospanning object z is greater than or
equal to a \ b. In other words a \ b is as small as possible subject to the condition of
being bigger than a and bigger than b. This is precisely the join of a and b (see DeÔ¨Ånition
3.4.2.1).
Just as for products, the coproduct of two objects in a category C may not exist, or it
may not be unique. The non-uniqueness is much less ‚Äúbad‚Äù because given two candidate
coproducts, they will be canonically isomorphic. They may not be equal, but they are
isomorphic. But coproducts might not exist at all in certain categories. We will explore
that a bit below.
Example 4.5.1.26. Consider the set R2 and partial order from Example 4.5.1.11 where
px1, y1q ƒè px2, y2q if there exists ‚Ñìƒõ 1 such that x1‚Ñì‚Äú x2 and y1‚Ñì‚Äú y2. Again the
points p :‚Äú p1, 0q and q :‚Äú p0, 1q do not have a coproduct. Indeed, it would have to
be a non-zero point that was on the same line-through-the origin as p and the same
line-through-the-origin as q, of which there are none.
Exercise 4.5.1.27. Consider the preorder P of cards in a deck, shown in Example 3.4.1.3;
it is not the entire story of cards in a deck, but take it to be so. In other words, be like a
computer and take what‚Äôs there at face value. Consider the preorder P as a category (by
way of the functor PrO √ë Cat). For each of the following pairs, what is their coproduct
in P (if it exists)?
a.)
‚åúa diamond‚åù\‚åúa heart‚åù?
‚åúa queen‚åù\‚åúa black card‚åù?
‚åúa card‚åù\‚åúa red card‚åù?
‚åúa face card‚åù\‚åúa black card‚åù?
b.) How would these answers diÔ¨Äer if P was completed to the ‚Äúwhole story‚Äù partial order
classifying cards in a deck?
‚ô¶
Exercise 4.5.1.28. Let X be a set, and consider it as a discrete category. Given two
objects x, y P ObpXq, under what conditions will there exist a coproduct x \ y?
‚ô¶
Exercise 4.5.1.29. Consider the preorder pN, dividesq, discussed in Exercise 4.5.1.4,
where e.g. 5 ƒè 15 but 5 ƒô 6.
a.) What is the coproduct of 9 and 12 in that category?
b.) Is there a standard name for coproducts in that category?
‚ô¶
4.5.2
Diagrams in a category
We have been drawing diagrams since the beginning of the book. What is it that we
have been drawing pictures of? The answer is that we have been drawing functors.
DeÔ¨Ånition 4.5.2.1. Let C and I be categories. 27 An I-shaped diagram in C is simply
a functor d: I √ë C. In this case I is called the indexing category for the diagram.
27In fact, the indexing category I is usually assumed to be small in the sense of Remark 4.1.1.2,
meaning that its collection of objects is a set.

4.5. LIMITS AND COLIMITS
179
Suppose given an indexing category I and an I-shaped diagram X : I √ë C. One
draws this as follows. For each object in q P I, draw a dot labeled by Xpqq; if several
objects in I point to the same object in C, then several dots will be labeled the same way.
Draw the images of morphisms f : q √ë q1 in I by drawing arrows between dots Xpqq
and Xpq1q, and label each arrow by the image morphism Xpfq in C. Again, if several
morphisms in I are sent to the same morphism in C, then several arrows will be labeled
the same way. One can abbreviate this process by not drawing every morphism in I, so
long as every morphism in I is represented by a unique path in C, i.e. as long as the
drawing is suÔ¨Éciently unambiguous as a depiction of X : I √ë C.
Example 4.5.2.2. Consider the commutative diagram in Set drawn below:
N
`1 /
Àö2

N
Àö2

N
`2 / Z
(4.18)
This is the drawing of a functor d: r1s ÀÜ r1s √ë Set (see Example 4.5.1.17).
With
notation for the objects and morphisms of r1s ÀÜ r1s as shown in Diagram (4.17), we have
dp0, 0q ‚Äú dp0, 1q ‚Äú dp1, 0q ‚Äú N and dp1, 1q ‚Äú Z (for some reason..) and dpid0, fq: N √ë N
given by n √û√ë n ` 1, etc.
The fact that d is a functor means it must respect composition formulas, which implies
that Diagram (4.18) commutes. Recall from Section 2.2 that not all diagrams one can
draw will commute; one must specify that a given diagram commutes if he or she wishes
to communicate this fact. But then how is a non-commuting diagram to be understood
as a functor?
Let G P ObpGrphq denote the following graph
p0,0q
‚Äö
f
/
h 
p0,1q
‚Äö
g
p1,0q
‚Äö
i
/ p1,1q
‚Äö
Recall the free category functor F : Grph √ë Cat from Example 4.1.2.30.
The free
category FpGq P ObpCatq on G looks almost like r1s ÀÜ r1s except that since rf, gs is a
diÔ¨Äerent path in G than is rh, is, they become diÔ¨Äerent morphisms in FpGq. A functor
FpGq √ë Set might be drawn the same way that (4.18) is, but it would be a diagram
that would not be said to commute.
We call r1s ÀÜ r1s the commutative square indexing category. 28
Exercise 4.5.2.3. Consider r2s, the linear order category of length 2.
a.) Is r2s the appropriate indexing category for commutative triangles?
b.) If not, what is?
‚ô¶
28We might call what is here denoted by FpGq the noncommutative square indexing category.

180
CHAPTER 4. BASIC CATEGORY THEORY
Example 4.5.2.4. Recall that an equalizer in Set was a diagram of sets that looked like
this:
E‚Äö
f
/ A‚Äö
g1
/
g2
/
B‚Äö
(4.19)
where g1 Àùf ‚Äú g2 Àùf. What is the indexing category for such a diagram? It is the schema
(4.19) with the PED rf, g1s ¬ª rf, g2s. That is, in some sense you‚Äôre seeing the indexing
category, but the PED needs to be declared.
Exercise 4.5.2.5. Let C be a category, A P ObpCq an object, and f : A √ë A a morphism
in C. Consider the two diagrams in C drawn below:
A‚Äö
f
/ A‚Äö
f
/ A‚Äö
f
/ ¬® ¬® ¬®
A‚Äö
f
9
a.) Should these two diagrams have the same indexing category?
b.) If they should have the same indexing category, what is causing or allowing the
pictures to appear diÔ¨Äerent?
c.) If they should not have the same indexing category, what coincidence makes the two
pictures have so much in common?
‚ô¶
DeÔ¨Ånition 4.5.2.6. Let I P ObpCatq be a category. The left cone on I, denoted I≈∏, is
the category deÔ¨Åned as follows. On objects we put ObpI≈∏q ‚Äú t¬¥8u\ObpIq, and we call
the new object ¬¥8 the cone point of I≈∏. On morphisms we add a single new morphism
sb : ¬¥ 8 √ë b for every object b P ObpIq; more precisely,
HomI≈∏pa, bq ‚Äú
$
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
%
HomIpa, bq
if a, b P ObpIq
tsbu
if a ‚Äú ¬¥8, b P ObpIq
tid¬¥8u
if a ‚Äú b ‚Äú ¬¥8
H
if a P ObpIq, b ‚Äú ¬¥8.
The composition formula is in some sense obvious. To compose two morphisms both in
I, compose as dictated by I; if one has ¬¥8 as source then there will be a unique choice
of composite.
There is an obvious inclusion of categories,
I √ë I≈∏.
(4.20)
Remark 4.5.2.7. Note that the speciÔ¨Åcation of I≈∏ given in DeÔ¨Ånition 4.5.2.6 works just
as well if I is considered a schema and we are constructing a schema I≈∏: add the new
object ¬¥8 and the new arrows sb : ¬¥8 √ë b for each b P ObpIq, and for every morphism
f : b √ë b1 in I add a PED rsb1s ¬ª rsb, fs. We generally will not distinguish between
categories and schemas, since they are equivalent.
Example 4.5.2.8. For a natural number n P N, we deÔ¨Åne the n-leaf star schema, denoted
Starn, to be the category (or schema, see Remark 4.5.2.7) n≈∏, where n is the discrete

4.5. LIMITS AND COLIMITS
181
category on n objects. Below we draw Star0, Star1, Star2, and Star3.
Star0
¬¥8
‚Äö
Star1
¬¥8
‚Äö
s1

1‚Äö
Star2
¬¥8
‚Äö
s1

s2

1‚Äö
2‚Äö
Star3
¬¥8
‚Äö
s1

s2

s3

1‚Äö
2‚Äö
3‚Äö
Exercise 4.5.2.9. Let C0 :‚Äú 0 denote the empty category and for any natural number
n P N, let Cn`1 ‚Äú pCnq≈∏. Draw C4.
‚ô¶
Exercise 4.5.2.10. Let C be the graph indexing schema as in (4.7). What is C≈∏ and how
does it compare to (4.19)?
‚ô¶
DeÔ¨Ånition 4.5.2.11. Let I P ObpCatq be a category. The right cone on I, denoted I≈π,
is the category deÔ¨Åned as follows. On objects we put ObpI≈πq ‚Äú ObpIq\t8u, and we call
the new object 8 the cone point of I≈π. On morphisms we add a single new morphism
tb : b √ë 8 for every object b P ObpIq; more precisely,
HomI≈πpa, bq ‚Äú
$
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
%
HomIpa, bq
if a, b P ObpIq
ttbu
if a P ObpIq, b ‚Äú 8
tid8u
if a ‚Äú b ‚Äú 8
H
if a ‚Äú 8, b P ObpIq.
The composition formula is in some sense obvious. To compose two morphisms both in
I, compose as dictated by I; if one has 8 as target then there will be a unique choice of
composite.
There is an obvious inclusion of categories I √ë I≈π.
Exercise 4.5.2.12. Let C be the category p2≈∏q≈π, where 2 is the discrete category on two
objects. Then C is somehow square-shaped, but what category is it exactly? Looking
at Example 4.5.2.2, is C the commutative diagram indexing category r1s ÀÜ r1s, is it the
non-commutative diagram indexing category FpGq, or is it something else?
‚ô¶
4.5.3
Limits and colimits in a category
Let C be a category, let I be an indexing category (which just means that I is a category
that we‚Äôre about to use as the indexing category for a diagram), and let D: I √ë C an
I-shaped diagram (which just means a functor). It is in relation to this setup that we
can discuss the limit or colimit. In general the limit of a diagram D: I √ë C will be a I≈∏
shaped diagram lim D: I≈∏ √ë C. In the case of products I ‚Äú 2 and I≈∏ ‚Äú Star2 looks
like a span (see Example 4.5.2.8). But out of all the I≈∏-shaped diagrams, which is the
limit of D? Answer: the one with the universal ‚Äúgateway‚Äù property, see Remark 4.5.1.9.
4.5.3.1
Universal objects
DeÔ¨Ånition 4.5.3.2. Let C be a category. An object a P ObpCq is called initial if, for
all objects c P ObpCq there exists a unique morphism a √ë c, i.e. |HomCpa, cq| ‚Äú 1. An
object z P ObpCq is called terminal if, for all objects c P ObpCq there is exists a unique
morphism c √ë z, i.e. |HomCpc, zq| ‚Äú 1.

182
CHAPTER 4. BASIC CATEGORY THEORY
An object in a category is called universal if it is either initial or terminal, but we
rarely use that term in practice, preferring to be speciÔ¨Åc about whether the object is
initial or terminal. The word Ô¨Ånal is synonymous with the word terminal, but we‚Äôll try
to constantly use terminal.
Colimits will end up being deÔ¨Åned as initial things of a certain sort, and limits will
end up being deÔ¨Åned as terminal things of a certain sort. But we will get to that in
Section 4.5.3.15.
Warning 4.5.3.3. A category C may have more than one initial object; similarly a category
C may have more than one terminal object. We will see in Example 4.5.3.5 that any set
with one element, e.g. tÀöu or t,u, is a terminal object in Set. These terminal sets have
the same number of elements, but they are not the exact-same set; two sets having the
same cardinality means precisely that there exists an isomorphism between them.
In fact, Proposition 4.5.3.4 below shows that in any category C, any two terminal
objects in C are isomorphic (similarly, any two initial objects in C are isomorphic).
While there are many isomorphisms in Set between t1, 2, 3u and ta, b, cu, there is only
one isomorphism between tÀöu and ,. This is always the case for universal objects: there
is a unique isomorphism between any two terminal (respectively initial) objects in any
category.
As a result, people often speak of the initial object in C or the terminal object in C,
as though there was only one. ‚ÄúIt‚Äôs unique up to unique ismorphism!‚Äù is the justiÔ¨Åcation
for this use of the so-called deÔ¨Ånite article the rather than the indeÔ¨Ånite article a. This
is not a very misleading way of speaking, because just like the president today does not
contain exactly the same atoms as the president yesterday, the diÔ¨Äerence is unimportant.
But we still mention this as a warning: if C has a terminal object, we may speak of it as
though it were unique, calling it the terminal object, and similarly for initial objects.
We will use the deÔ¨Ånite article throughout this document, e.g. in Example 4.5.3.5
we will discuss the initial object in Set and the terminal object in Set. This is common
throughout mathematical literature as well.
Proposition 4.5.3.4. Let C be a category and let a1, a2 P ObpCq both be initial objects.
Then there is a unique isomorphism a1
‚Äì
√ù√ë a2. (Similarly, for any two terminal objects
in C there is a unique isomorphism between them.)
Proof. Suppose a1 and a2 are initial.
Since a1 is initial there is a unique morphism
f : a1 √ë a2; there is also a unique morphism a1 √ë a1, which must be ida1. Since a2 is
initial there is a unique morphism g: a2 √ë a1; there is also a unique morphism a2 √ë a2,
which must be ida2. So g Àù f ‚Äú ida1 and f Àù g ‚Äú ida2, which means that f is the desired
(unique) isomorphism.
The proof for terminal objects is appropriately ‚Äúdual‚Äù.
‚ñ°
Example 4.5.3.5. The initial object in Set is the set a for which there is always one way
to map from a to anything else. Given c P ObpSetq there is exactly one function H √ë c,
because there are no choices to be made, so the empty set H is the initial object in Set.
The terminal object in Set is the set z for which there is always one way to map to
z from anything else. Given c P ObpSetq there is exactly one function c √ë t,u, where
t,u is any set with one element, because there are no choices to be made: everything in
c must be sent to the single element in t,u. There are lots of terminal objects in Set,
and they are all isomorphic to 1.

4.5. LIMITS AND COLIMITS
183
Example 4.5.3.6. The initial object in Grph is the graph a for which there is always one
way to map from a to anything else. Given c P ObpGrphq, there is exactly one function
H √ë c, where H P Grph is the empty graph; so H is the initial object.
The terminal object in Grph is more interesting. It is Loop, the graph with one
vertex and one arrow. In fact there are inÔ¨Ånitely many terminal objects in Grph, but
all of them are isomorphic to Loop.
Exercise 4.5.3.7. Let X be a set, let PpXq be the set of subsets of X (see DeÔ¨Ånition
2.7.4.9). We can regard PpXq as a preorder under inclusion of subsets (see for example
Section 3.4.2). And we can regard preorders as categories using a functor PrO √ë Cat
(see Proposition 4.2.1.17).
a.) What is the initial object in PpXq?
b.) What is the terminal object in PpXq?
‚ô¶
Example 4.5.3.8. The initial object in the category Mon of monoids is the trivial monoid,
1. For any monoid M, a morphism of monoids 1 √ë M is a functor between 1-object
categories and these are determined by where they send morphisms. Since 1 has only
the identity morphism and functors must preserve identities, there is no choice involved
in Ô¨Ånding a monoid morphism 1 √ë M.
Similarly, the terminal object in Mon is also the trivial monoid, 1. For any monoid
M, a morphism of monoids M √ë 1 sends everything to the identity; there is no choice.
Exercise 4.5.3.9.
a.) What is the initial object in Grp, the category of groups?
b.) What is the terminal object in Grp?
‚ô¶
Example 4.5.3.10. Recall the preorder Prop of logical propositions from Section 4.2.4.1.
The initial object is a proposition that implies all others. It turns out that ‚ÄúFALSE‚Äù is
such a proposition. The proposition ‚ÄúFALSE‚Äù is like ‚Äú1 ‚Ä∞ 1‚Äù; in logical formalism it can
be shown that if ‚ÄúFALSE‚Äù is true then everything is true.
The terminal object in Prop is a proposition that is implied by all others. It turns
out that ‚ÄúTRUE‚Äù is such a proposition. In logical formalism, everything implies that
‚ÄúTRUE‚Äù is true.
Example 4.5.3.11. The discrete category 2 has no initial object and no terminal ob-
ject. The reason is that it has two objects 1, 2, but no maps from one to the other, so
Hom2p1, 2q ‚Äú Hom2p2, 1q ‚Äú H.
Exercise 4.5.3.12. Recall the divides preorder from Exercise 4.5.1.4, where 5 divides 15.
a.) Considering this preorder as a category, does it have an initial object?
b.) Does it have a terminal object?
‚ô¶
Exercise 4.5.3.13. Let M ‚Äú pListpta, buq, r s, ``q denote the free monoid on ta, bu (see
DeÔ¨Ånition 3.1.1.15), considered as a category (via Theorem 4.2.1.3).
a.) Does it have an initial object?

184
CHAPTER 4. BASIC CATEGORY THEORY
b.) Does it have a terminal object?
c.) Which monoids have initial (respectively terminal) objects?
‚ô¶
Exercise 4.5.3.14. Let S be a set and consider the indiscrete category KS P ObpCatq on
objects S (see Example 4.3.4.3).
a.) For what S does KS have an initial object?
b.) For what S does KS have a terminal object?
‚ô¶
4.5.3.15
Examples of limits
Let C be a category and let X, Y P ObpCq be objects. DeÔ¨Ånition 4.5.1.8 deÔ¨Ånes a product
of X and Y to be a span X
œÄ1
√ê√ù X ÀÜY
œÄ2
√ù√ë Y such that for every other span X
p√ê√ù Z
q√ù√ë Y
there exists a unique morphism Z √ë X ÀÜ Y making the triangles commute. It turns out
that we can enunciate this in our newly formed language of universal objects by saying
that the span X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y is itself a terminal object in the category of spans
on X and Y . Phrasing the deÔ¨Ånition of products in this way will be generalizable to
deÔ¨Åning arbitrary limits.
Construction 4.5.3.16 (Products). Let C be a category and let X1, X2 be objects. We can
consider this setup as a diagram X : 2 √ë C, where Xp1q ‚Äú X1 and Xp2q ‚Äú X2. Consider
the category 2≈∏ ‚Äú Star2, which is drawn in Example 4.5.2.8; the inclusion i: 2 √ë 2≈∏, as
in (4.20); and the category of functors Funp2≈∏, Cq. The objects in Funp2≈∏, Cq are spans
in C and the morphisms are natural transformations between them. Given a functor
S : 2≈∏ √ë C we can compose with i: 2 √ë 2≈∏ to get a functor 2 √ë C. We want that to be
X.
2
X
/
i

C
2≈∏
S
?
So we are ready to deÔ¨Åne the category of spans on X1 and X2.
DeÔ¨Åne the category of spans on X, denoted C{X, to be the category whose objects
and morphisms are as follows:
ObpC{Xq ‚Äú tS : 2≈∏ √ë C | S Àù i ‚Äú Xu
(4.21)
HomC{XpS, S1q ‚Äú tŒ±: S √ë S1 | Œ± Àù i ‚Äú idXu.
The product of X1 and X2 was deÔ¨Åned in DeÔ¨Ånition 4.5.1.8; we can now recast X1 ÀÜ X2
as the terminal object in C{X.
To bring this down to earth, an object in C{X can be pictured as a diagram in C of
the following form:
Z
p

q

X1
X2

4.5. LIMITS AND COLIMITS
185
In other words, the objects of C{X are spans, each of which we might write in-line as
X1
p√ê√ù Z
q√ù√ë X2. A morphism in C{X from object X1
p√ê√ù Z
q√ù√ë X2 to object X1
p1
√ê√ù Z1
q1
√ù√ë
X2 consists of a morphism ‚Ñì: Z √ë Z1, such that p1 Àù ‚Ñì‚Äú p and q1 Àù ‚Ñì‚Äú q. So the set of
such morphisms in C{X are all the ‚Ñì‚Äôs that make the right-hand diagram commute: 29
HomC{X
¬®
Àö
Àö
Àù
Z
p

q

X1
X2
,
Z1
p1

q1

X1
X2
Àõ
‚Äπ‚Äπ‚Äö
‚Äú
$
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
%
Z
p

q

‚Ñì

X1
X2
Z1
p1
Y
q1
E
,
/
/
/
/
/
/
/
/
/
/
/
/
.
/
/
/
/
/
/
/
/
/
/
/
/
-
(4.22)
Each object in C{X is a span on X1 and X2, and each morphism in C{X is a ‚Äúmorphism
of cone points in C making everything in sight commute‚Äù. The terminal object in C{X is
the product of X1 and X2; see DeÔ¨Ånition 4.5.1.8.
It may be strange to have a category in which the objects are spans in another
category. But once you admit this possibility, the notion of morphism between spans
is totally sensible. Or if it isn‚Äôt, then stare at (4.22) for 30 seconds and say to yourself
‚ÄúWhen in Rome..!‚Äù These are the aqueducts of category theory, and they work wonders.
Example 4.5.3.17. Consider the arbitrary 6-object category C drawn below, in which the
29To be completely pedantic, according to (4.21), the morphisms in C{X should be drawn like this:
HomC{X
¬®
Àö
Àö
Àö
Àö
Àù
Z
p

q

X1
X2
,
Z1
p1

q1

X1
X2
Àõ
‚Äπ‚Äπ‚Äπ‚Äπ‚Äö
‚Äú
$
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
%
Z
p

q

Œ±¬¥8

X1
Œ±1
X2
Œ±2
X1
X2
Z1
p1
Y
q1
E
,
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
.
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
-
But this is going a bit overboard. The point is, the set HomC{X is the set of morphisms serving the role
of Œ±¬¥8 : Z √ë Z1.

186
CHAPTER 4. BASIC CATEGORY THEORY
three diagrams that can commute do:
C :‚Äú
X1‚Äö
A‚Äö
a
2
B‚Äö
f
o
‚úì
b1
@
b2

C‚Äö
‚úì
‚úì
c1
^
c2
 g
/ D‚Äö
d1
l
d2
r
X2‚Äö
Let X : 2 √ë C be given by Xp1q ‚Äú X1 and Xp2q ‚Äú X2. Then the category of spans on
X might be drawn
C{X ‚Äì
pB,b1,b2q
‚Äö
pC,c1,c2q
‚Äö
g
/ pD,d1,d2q
‚Äö
4.5.3.18
DeÔ¨Ånition of limit
DeÔ¨Ånition 4.5.3.19. Let C be a category, let I be a category; let I≈∏ be the left cone on
I, and let i: I √ë I≈∏ be the inclusion. Suppose that X : I √ë C is an I-shaped diagram
in C. The slice category of C over X denoted C{X is the category whose objects and
morphisms are as follows:
ObpC{Xq ‚Äú tS : I≈∏ √ë C | S Àù i ‚Äú Xu
HomC{XpS, S1q ‚Äú tŒ±: S √ë S1 | Œ± Àù i ‚Äú idXu.
A limit of X, denoted limI X or lim X, is a terminal object in C{X.
Pullbacks
The relevant indexing category for pullbacks is the cospan, I ‚Äú 2≈π drawn
as to the left below:
I
0‚Äö

1‚Äö

2‚Äö
X : I √ë C
X0‚Äö

X1‚Äö
 X2‚Äö
30
A I-shaped diagram in C is a functor X : I √ë C, which we might draw as to the right
above (e.g. X0 P ObpCq).
30We use a dash box here because we‚Äôre not drawing the whole category but merely a diagram existing
inside C.

4.5. LIMITS AND COLIMITS
187
An object S in the slice category C{X is a commutative diagram S : I≈∏ √ë C over X,
which looks like the box to the left below:
S P ObpC{Xq
S¬¥8
!
}
X0‚Äö
 
X1‚Äö
~
X2‚Äö
f : S √ë S1
S¬¥8


f

S1
¬¥8
 
~
X0‚Äö
 
X1‚Äö
~
X2‚Äö
A morphism in C{X is drawn in the dashbox to the right above. A terminal object in
C{X is precisely the ‚Äúgateway‚Äù we want, i.e. the limit of X is the pullback X0 ÀÜX2 X1.
Exercise 4.5.3.20. Let I be the graph indexing category (see 4.7).
a.) What is I≈∏?
b.) Now let G: I √ë Set be the graph from Example 3.3.1.2. Give an example of an
object in Set{G.
c.) We have already given a name to the limit of G: I √ë Set; what is it?
‚ô¶
Exercise 4.5.3.21. Let C be a category and let I ‚Äú H be the empty category. There is a
unique functor X : H √ë C.
a.) What is the slice category C{X?
b.) What is the limit of X?
‚ô¶
Example 4.5.3.22. Often one wants to take the limit of some strange diagram. We have
now constructed the limit for any shape diagram. For example, if we want to take the
product of more than two, say n, objects, we could use the diagram shape I ‚Äú n whose
cone is Starn from Example 4.5.2.8.
Example 4.5.3.23. We have now deÔ¨Åned limits in any category, so we have deÔ¨Åned limits
in Cat. Let r1s denote the category depicted
0‚Äö
e
/ 1‚Äö
and let C be a category. Naming two categories is the same thing as naming a functor
X : 2 √ë Cat, so we now have such a functor. Its limit is denoted r1s ÀÜ C. It turns
out that r1s ÀÜ C looks like a ‚ÄúC-shaped prism‚Äù. It consists of two panes, front and back
say, each having the precise shape as C (same objects, same arrows, same composition),
and morphisms from the front pane to the back pane making all front-to-back squares

188
CHAPTER 4. BASIC CATEGORY THEORY
commute. For example, if C looked was the category generated by the schema to the left
below, then C ÀÜ r1s would be the category generated by the schema to the right below:
A‚Äö
f
/
g

B‚Äö
h

C‚Äö
D‚Äö
A1‚Äö
f1
/
g1 
B1‚Äö
h1

A0‚Äö
Ae
@
f0
/
g0

B0‚Äö
Be
@
h0

C1‚Äö
D1‚Äö
C0‚Äö
Ce
@
D0‚Äö
De
@
It turns out that a natural transformation Œ±: F √ë G between functors F, G: C √ë D
is the same thing as a functor C ÀÜ r1s √ë D such that the front pane is sent via F
and the back pane is sent via G. The components are captured by the front-to-back
morphisms, and the naturality is captured by the commutativity of the front-to-back
squares in C ÀÜ r1s.
Remark 4.5.3.24. Recall in Section 2.7.6.6 we described relative sets. In fact, DeÔ¨Ånition
2.7.6.7 basically deÔ¨Ånes a category of relative sets over any Ô¨Åxed set B. Let 1 denote the
discrete category on one object, and note that providing a functor 1 √ë Set is the same
as simply providing a set, so consider B : 1 √ë Set. Then the slice category Set{B, as
deÔ¨Åned in DeÔ¨Ånition 4.5.3.19 is precisely the category of relative sets over B: it has the
same objects and morphisms as was described in DeÔ¨Ånition 2.7.6.7.
4.5.3.25
DeÔ¨Ånition of colimit
The deÔ¨Ånition of colimits is appropriately ‚Äúdual‚Äù to the deÔ¨Ånition of limits.
Instead
of looking at left cones, we look at right cones; instead of being interested in terminal
objects, we are interested in initial objects.
DeÔ¨Ånition 4.5.3.26. Let C be a category, let I be a category; let I≈π be the right cone
on I, and let i: I √ë I≈π be the inclusion. Suppose that X : I √ë C is an I-shaped diagram
in C. The coslice category of C over X denoted CX{ is the category whose objects and
morphisms are as follows:
ObpCX{q ‚Äú tS : I≈π √ë C | S Àù i ‚Äú Xu
HomCX{pS, S1q ‚Äú tŒ±: S √ë S1 | Œ± Àù i ‚Äú idXu.
A colimit of X, denoted colimI X or colim X, is an initial object in CX{.

4.5. LIMITS AND COLIMITS
189
Pushouts
The relevant indexing category for pushouts is the span, I ‚Äú 2≈∏ drawn as
to the left below:
I
1‚Äö
2‚Äö
0‚Äö
\
B
X : I √ë C
X1‚Äö
X2‚Äö
X0‚Äö
^
@
An I-shaped diagram in C is a functor X : I √ë C, which we might draw as to the right
above (e.g. X0 P ObpCq).
An object S in the coslice category CX{ is a commutative diagram S : I≈π √ë C over
X, which looks like the box to the left below:
S P ObpCX{q
S8
X1‚Äö
>
X2‚Äö
`
X0‚Äö
_
?
f : S √ë S1
S1
8
S8
f
O
X1‚Äö
>
<
X2‚Äö
`
a
X0‚Äö
?
_
A morphism in CX{ is drawn in the dashbox to the right above. An initial object in CX{
is precisely the ‚Äúgateway‚Äù we want; i.e. the colimit of X is the pushout, X1 \X0 X2.
Exercise 4.5.3.27. Let I be the graph indexing category (see 4.7).
a.) What is I≈π?
b.) Now let G: I √ë Set be the graph from Example 3.3.1.2. Give an example of an
object in SetG{.
c.) We have already given a name to the colimit of G: I √ë Set; what is it?
‚ô¶
Exercise 4.5.3.28. Let C be a category and let I ‚Äú H be the empty category. There is a
unique functor X : H √ë C.
a.) What is the coslice category CX{?
b.) What is the colimit of X (assuming it exists)?
‚ô¶

190
CHAPTER 4. BASIC CATEGORY THEORY
Example 4.5.3.29 (Cone as colimit). We have now deÔ¨Åned colimits in any category, so we
have deÔ¨Åned colimits in Cat. Let C be a category and recall from Example 4.5.3.23 the
category C ÀÜ r1s. The inclusion of the front pane is a functor i0 : C √ë C ÀÜ r1s (similarly,
the inclusion of the back pane is a functor i1 : C √ë C ÀÜ r1s). Finally let t: C √ë 1 be the
unique functor to the terminal category (see Exercise 4.1.2.37). We now have a diagram
in Cat of the form
C
i0 /
t

C ÀÜ r1s
1
The colimit (i.e. the pushout) of this diagram in Cat slurps down the entire front pane
of C ÀÜ r1s to a point, and the resulting category is isomorphic to C≈∏. Figure 4.23 is a
drawing of this phenomenon.

4.5. LIMITS AND COLIMITS
191
C :‚Äú
A0‚Äö
/

B0‚Äö

C0‚Äö
D0‚Äö
i0
/
C ÀÜ r1s
A1‚Äö
/

B1‚Äö

A0‚Äö
@
/

B0‚Äö
@

C1‚Äö
D1‚Äö
C0‚Äö
@
D0‚Äö
@
t


¬¥8
‚Äö
1
/
A1‚Äö
/

B1‚Äö

¬¥8
‚Äö
?

_

C1‚Äö
D1‚Äö
C≈∏ ‚Äì pC ÀÜ r1sq \C 1
Figure 4.23: Let C be the category drawn in the upper left corner. The left cone C≈∏ on
C is obtained as a pushout in Cat. We Ô¨Årst make a prism C ÀÜ r1s, and then identify the
front pane with a point.
(Similarly, the pushout of the analogous diagram for i1 would give C≈π.)
Example 4.5.3.30. Consider the category Top of topological spaces. The (hollow) circle
is a topological space which people often denote S1 (for ‚Äú1-dimensional sphere‚Äù). The
Ô¨Ålled-in circle, also called a 2-dimensional disk, is denoted D2. The inclusion of the circle
into the disk is continuous so we have a morphism in Top of the form i: S1 √ë D2. The
terminal object in Top is the one-point space t,u, and so there is a unique morphism
t: S1 √ë t,u.
The pushout of the diagram D2
i√ê√ù S1
t√ù√ë t,u is isomorphic to the
2-dimensional sphere (the exterior of a tennis ball), S2. The reason is that we have
slurped the entire bounding circle to a point, and the category of topological spaces has
the right morphisms to ensure that the resulting space really is a sphere.

192
CHAPTER 4. BASIC CATEGORY THEORY
Application 4.5.3.31. Consider the symmetric graph Gn consisting of a chain of n vertices,
1‚Äö
2‚Äö
¬® ¬® ¬®
n‚Äö
Think of this as modeling a subway line.
There are n-many graph homomorphisms
G1 √ë Gn given by the various vertices. One can create transit maps using colimits. For
example, the colimit of the diagram to the left is the symmetric graph drawn to the right
below.
colim
¬®
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àù
G1
4
/
4

G7
G1
6
o
1

G5
G3
G1
2
O
3
/ G7
G1
2
O
5
o
Àõ
‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äö
can be drawn
‚Äö5
1‚Äö
2‚Äö
3‚Äö
4‚Äö4
5‚Äö
6‚Äö1
7‚Äö
‚Äö3
1‚Äö
2‚Äö
3‚Äö2
4‚Äö
5‚Äö2
6‚Äö
7‚Äö
‚Äö1
‚Äö3
‚ô¶‚ô¶
4.6
Other notions in Cat
In this section we discuss some leftover notions about categories. For example in Section
4.6.1 we explain a kind of duality for categories, in which arrows are Ô¨Çipped. For example
reversing the order in a preorder is an example of this duality, as is the similarity between
limits and colimits. In Section 4.6.2 we discuss the so-called Grothendieck construction
which in some sense graphs functors, and we show that it is useful for transforming
databases into the kind of format (RDF) used in scraping data oÔ¨Äwebpages. We deÔ¨Åne
a general construction for creating categories in Section 4.6.4. Finally, in Section 4.6.5
we show that precisely the same arithmetic statements that held for sets in Section 2.7.3
hold for categories.
4.6.1
Opposite categories
People used to discuss two diÔ¨Äerent kinds of functors between categories: the so-called
covariant functors and the so-called contravariant functors.
Covariant functors are
what we have been calling functors.
The reader may have come across the idea of
contravariance when considering Exercise 4.2.3.2.31
There we saw that a continuous
mapping of topological spaces f : X √ë Y does not induce a morphism of orders on
their open sets OpenpXq √ë OpenpY q; that is not required by the notion of continuity.
Instead, a morphism of topological spaces f : X √ë Y induces a morphism of orders
OpenpY q √ë OpenpXq, going backwards. So we do not have a functor Top √ë PrO
in this way, but it‚Äôs quite close. One used to say that Open is a contravariant functor
Top √ë PrO.
31Similarly, see Exercise 4.2.4.4.

4.6. OTHER NOTIONS IN CAT
193
As important and common as contravariance is, people found that keeping track of
which functors were covariant and which were contravariant was a big hassle. Luck-
ily, there is a simple work-around, which simpliÔ¨Åes everything: the notion of opposite
categories.
DeÔ¨Ånition 4.6.1.1. Let C be a category. The opposite category of C, denoted Cop, has
the same objects as C, i.e. ObpCopq ‚Äú ObpCq, and for any two objects c, c1, one deÔ¨Ånes
HomCoppc, c1q :‚Äú HomCpc1, cq.
Example 4.6.1.2. If n P N is a natural number and n the corresponding discrete category,
then nop ‚Äú n. Recall the span category I ‚Äú 2≈∏ from DeÔ¨Ånition 4.5.1.8. Its opposite is
the cospan category Iop ‚Äú 2≈π, from DeÔ¨Ånition 4.5.1.23.
Exercise 4.6.1.3. Let C be the category from Example 4.5.3.17. Draw Cop.
‚ô¶
Lemma 4.6.1.4. Let C and D be categories.
One has pCopqop ‚Äú C.
Also we have
FunpC, Dq ‚Äì FunpCop, Dopq. This implies that a functor Cop √ë D can be identiÔ¨Åed with
a functor C √ë Dop.
Proof. This follows straightforwardly from the deÔ¨Ånitions.
‚ñ°
Exercise 4.6.1.5. In Exercises 4.2.3.2, 4.2.4.3, and 4.2.4.4 there were questions about
whether a certain function ObpCq √ë ObpDq extended to a functor C √ë D. In each case,
see if the proposed function would extend to a ‚Äúcontravariant functor‚Äù i.e. to a functor
Cop √ë D.
‚ô¶
Example 4.6.1.6 (Simplicial sets). Recall from Example 4.3.4.4 the category ‚àÜof linear
orders rns. For example, r1s is the linear order 0 ƒè 1 and r2s is the linear order 0 ƒè 1 ƒè 2.
Both r1s and r2s are objects of ‚àÜ. There are 6 morphisms from r1s to r2s, which we
could denote
Hom‚àÜpr1s, r2sq ‚Äú tp0, 0q, p0, 1q, p0, 2q, p1, 1q, p1, 2q, p2, 2qu.
It may seem strange, but the category ‚àÜop turns out to be quite useful in algebraic
topology.
It is the indexing category for a combinatorial approach to the homotopy
theory of spaces. That is, we can represent something like the category of spaces and
continuous maps using the functor category sSet :‚Äú Funp‚àÜop, Setq, which is called the
category of simplicial sets.
This may seem very complicated compared to something we did earlier, namely sim-
plicial complexes. But simplicial sets have excellent formal properties that simplicial
complexes do not. We will not go further with this here, but through the work of Dan
Kan, Andr¬¥e Joyal, Jacob Lurie, and many others, simplicial sets have allowed category
theory to pierce deeply into the realm of topology and vice versa.
4.6.2
Grothendieck construction
Let C be a database schema (or category) and let J : C √ë Set be an instance. We have
been drawing this in table form, but there is another standard way of laying out the data
in J, called the resource descriptive framework or RDF. Developed for the web, RDF is a
useful format when one does not have a schema in hand, e.g. when scraping information

194
CHAPTER 4. BASIC CATEGORY THEORY
oÔ¨Äof a website, one does not know what schema will be best. In these cases, information
is stored in so-called RDF triples, which are of the form
xSubject, Predicate, Objecty
For example, one might see something like
Subject
Predicate
Object
A01
occurredOn
D13114
A01
performedBy
P44
A01
actionDescription
Told congress to raise debt ceiling
D13114
hasYear
2013
D13114
hasMonth
January
D13114
hasDay
14
P44
FirstName
Barack
P44
LastName
Obama
(4.24)
Category-theoretically, it is quite simple to convert a database instance J : C √ë Set
into an RDF triple store. To do so, we use the Grothendieck construction, which is more
aptly named the category of elements construction, deÔ¨Åned below.32
DeÔ¨Ånition 4.6.2.1. Let C be a category and let J : C √ë Set be a functor. The category
of elements of J, denoted
≈ü
C J, is deÔ¨Åned as follows:
Obp
w
C
Jq :‚Äú tpC, xq | C P ObpCq, x P JpCqu.
Hom≈ü
C JppC, xq, pC1, x1qq :‚Äú tf : C √ë C1 | Jpfqpxq ‚Äú x1u.
There is a natural functor œÄJ :
≈ü
C J √ù√ë C. It sends each object pC, xq P Obp
≈ü
C Jq to
the object C P ObpCq. And it sends each morphism f : pC, xq √ë pC1, x1q to the morphism
f : C √ë C1. We call œÄJ the projection functor.
Example 4.6.2.2. Let A be a set, and consider it as a discrete category.
We saw in
Exercise 4.3.3.4 that a functor S : A √ë Set is the same thing as an A-indexed set, as
discussed in Section 2.7.6.10. We will follow DeÔ¨Ånition 2.7.6.12 and for each a P A write
Sa :‚Äú Spaq.
What is the category of elements of a functor S : A √ë Set? The objects of
≈ü
A S are
pairs pa, sq where a P A and s P Spaq. Since A has nothing but identity morphisms,
≈ü
A S
has nothing but identity morphisms; i.e. it is the discrete category on a set. In fact that
set is the disjoint union
w
A
S ‚Äú
ƒü
aPA
Sa.
The functor œÄS :
≈ü
A S √ë A sends each element in Sa to the element a P A.
32Apparently, Alexander Grothendieck did not invent this construction, it was discussed prior to
Grothendieck‚Äôs use of it, e.g. by Mac Lane. But more to the point, the term Grothendieck construction is
not grammatically suited in the sense that both the following are awkward in English: ‚Äúthe Grothendieck
construction of J is ...‚Äù (awkward because J is not being constructed but used in a construction) and
‚Äúthe Grothendieck construct for J is...‚Äù (awkward because it just is). The term category of elements is
more descriptive and easier to use grammatically.

4.6. OTHER NOTIONS IN CAT
195
One can see this as a kind of histogram. For example, let A ‚Äú tBOS, NYC, LA, DCu and
let S : A √ë Set assign
SBOS ‚Äú tAbby, Bob, Casandrau,
SNYC ‚Äú H,
SLA ‚Äú tJohn, Jimu, and
SDC ‚Äú tAbby, Carlau.
Then the category of elements of S would look like the (discrete) category at the top:
w
A
S ‚Äú
pBOS,Abbyq
‚Äö
pBOS,Bobq
‚Äö
pLA,Johnq
‚Äö
pDC,Abbyq
‚Äö
pBOS,Casandraq
‚Äö
pLA,Jimq
‚Äö
pDC,Carlaq
‚Äö
(4.25)
œÄS

A ‚Äú
BOS
‚Äö
NYC
‚Äö
LA‚Äö
DC‚Äö
We also see that the category of elements construction has converted an A-indexed
set into a relative set over A, as in DeÔ¨Ånition 2.7.6.7.
The above example does not show at all how the Grothendieck construction trans-
forms a database instance into an RDF triple store. The reason is that our database
schema was A, a discrete category that speciÔ¨Åes no connections between data (it simply
collects the data into bins). So lets examine a more interesting database schema and
instance. This is taken from [Sp2].
Application 4.6.2.3. Consider the schema below, which we Ô¨Årst encountered in Example
3.5.2.1:
C :‚Äú
Employee manager worksIn ¬ª Employee worksIn
Department secretary worksIn ¬ª Department
Employee
‚Äö
worksIn
/
manager

Ô¨Årst
~
last

Department
‚Äö
secretary
o
name

FirstNameString
‚Äö
LastNameString
‚Äö
DepartmentNameString
‚Äö
(4.26)

196
CHAPTER 4. BASIC CATEGORY THEORY
And consider the instance J : C √ë Set, which we Ô¨Årst encountered in (3.13) and (3.15)
Employee
ID
Ô¨Årst
last
manager
worksIn
101
David
Hilbert
103
q10
102
Bertrand
Russell
102
x02
103
Emmy
Noether
103
q10
Department
ID
name
secretary
q10
Sales
101
x02
Production
102
FirstNameString
ID
Alan
Bertrand
Carl
David
Emmy
LastNameString
ID
Arden
Hilbert
Jones
Noether
Russell
DepartmentNameString
ID
Marketing
Production
Sales
The category of elements of J : C √ë Set looks like this:
w
C
J ‚Äú
101
‚Äö
Ô¨Årst

last
,
manager
A
worksIn
(
102
‚Äö
103
‚Äö
q10
‚Äö
x02
‚Äö
secretary
h
name
}
Alan
‚Äö
Hilbert
‚Äö
Production
‚Äö
Bertrand
‚Äö
Russell
‚Äö
Sales
‚Äö
David
‚Äö
Noether
‚Äö
Marketing
‚Äö
Emmy
‚Äö
Arden
‚Äö
Carl
‚Äö
Jones
‚Äö
œÄJ

(4.27)
C ‚Äú
Employee
‚Äö
worksIn
/
manager

Ô¨Årst

last

Department
‚Äö
secretary
o
name

FirstNameString
‚Äö
LastNameString
‚Äö
DepartmentNameString
‚Äö

4.6. OTHER NOTIONS IN CAT
197
In the above drawing (4.27) of
≈ü
C J, we left out 10 arrows for ease of readability, for
example, we left out an arrow
102
‚Äö
first
√ù√ù√ù√ù√ù√ù√ë
Bertrand
‚Äö
.
For the punchline, how do we see the category of elements
≈ü
C J as an RDF triple
store? For each arrow in
≈ü
C J, we take the triple consisting of the source vertex, the
arrow name, and the target vertex. So our triple store would include triples such as
x102 first Bertrandy and x101 manager 103y.
‚ô¶‚ô¶
Exercise 4.6.2.4. Come up with a schema and instance whose category of elements con-
tains (at least) the data from (4.24).
‚ô¶
Slogan 4.6.2.5.
‚Äú The Grothendieck construction takes structured, boxed-up data and Ô¨Çattens
it by throwing it all into one big space. The projection functor is then tasked
with remembering which box each datum originally came from. ‚Äù
Exercise 4.6.2.6. Recall from Section 3.1.2.10 that a Ô¨Ånite state machine is a free monoid
pListpŒ£q, r s, ``q acting on a set X. Recall also that we can consider a monoid as a
category M with one object and a monoid action as a set-valued functor F : M √ë Set,
(see Section 4.2.1.1). In the case of Figure 3.1 the monoid in question is Listpa, bq, which
can be drawn as the schema
‚ñ≤
a
99
b
e
and the functor F : M √ë Set is recorded in an action table in Example 3.1.3.1. What
is
≈ü
M F? How does it relate to the picture in Figure 3.1?
‚ô¶
4.6.3
Full subcategory
DeÔ¨Ånition 4.6.3.1. Let C be a category and let X ƒé ObpCq be a set of objects in C.
The full subcategory of C spanned by X is the category, which we denote by COb‚ÄúX, with
objects ObpCOb‚ÄúXq :‚Äú X and with morphisms HomCOb‚ÄúXpx, x1q :‚Äú HomCpx, x1q.
Example 4.6.3.2. The following are examples of full subcategories. We will name them in
the form ‚ÄúX inside of Y ‚Äù, and each time we mean that X and Y are names of categories,
the category X can be considered as a subcategory of the category Y in some sense, and
it is full. In other words, all morphisms in Y ‚Äúcount‚Äù as morphisms in X.
‚Ä¢ Finite sets inside of sets, Fin ƒé Set;
‚Ä¢ Finite sets of the form n inside of Fin;
‚Ä¢ Linear orders of the form rns inside of all Ô¨Ånite linear orders, ‚àÜƒé FLin;
‚Ä¢ Groups inside of monoids, Grp ƒé Mon;
‚Ä¢ Monoids inside of categories, Mon ƒé Cat;
‚Ä¢ Sets inside of graphs, Set ƒé Grph;
‚Ä¢ Partial orders (resp. linear orders) inside of PrO;

198
CHAPTER 4. BASIC CATEGORY THEORY
‚Ä¢ Discrete categories (resp. indiscrete categories) inside of Cat;
Remark 4.6.3.3. A subcategory C ƒé D is (up to isomorphism) just a functor i: C √ë D
that happens to be injective on objects and arrows. The subcategory is full if and only
if i is a full functor in the sense of DeÔ¨Ånition 4.3.4.12.
Example 4.6.3.4. Let C be a category, let X ƒé ObpCq be a set of objects, and let COb‚ÄúX
denote the full subcategory of C spanned by X. We can realize this as a Ô¨Åber product
of categories. Indeed, recall that for any set, we can form the indiscrete category on
that set; see Example 4.3.4.3.
In fact, we have a functor Ind: Set √ë Cat.
Thus
our function X √ë ObpCq can be converted into a functor between indiscrete categories
IndpXq √ë IndpObpCqq. There is also a functor C √ë IndpObpCqq sending each object to
itself. Then the full subcategory of C spanned by X is the Ô¨Åber product of categories,
COb‚ÄúX
/

C

IndpXq
/ IndpObpCqq
Exercise 4.6.3.5. Including all identities and all compositions, how many morphisms are
there in the full subcategory of Set spanned by the objects t0, 1, 2u? Write them out. ‚ô¶
4.6.4
Comma categories
Category theory includes a highly developed and interoperable catalogue of materials
and production techniques. One such is the comma category.
DeÔ¨Ånition 4.6.4.1. Let A, B, and C be categories and let F : A √ë C and G: B √ë C
be functors. The comma category of C morphisms from F to G, denoted pF √ìC Gq or
simply pF √ì Gq, is the category with objects
ObpF √ì Gq ‚Äú tpa, b, fq | a P ObpAq, b P ObpBq, f : Fpaq √ë Gpbq in Cu
and for any two objects pa, b, fq and pa1, b1, f 1q the set HompF √ìGqppa, b, fq, pa1, b1, f 1qq of
morphisms pa, b, fq √ù√ë pa1, b1, f 1q is
tpq, rq | q: a √ë a1 in A, r: b √ë b1 in B, such that f 1 Àù Fpqq ‚Äú Gprq Àù fu.
In pictures,
HompF √ìGqppa, b, fq, pa1, b1, f 1qq :‚Äú
$
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
%
a
q

Fpaq
‚úì
f
/
F pqq

Gpbq
Gprq

b
r

a1
Fpa1q
f 1
/ Gpb1q
b1
,
/
/
/
/
/
.
/
/
/
/
/
-
We refer to the diagram A
F√ù√ë C
G
√ê√ù B (in Cat) as the setup for the comma category
pF √ì Gq.
There is a canonical functor pF √ì Gq √ë A called left projecton, sending pa, b, fq to a,
and a canonical functor pF √ì Gq √ë B called right projection, sending pa, b, fq to b.

4.6. OTHER NOTIONS IN CAT
199
A setup A
F√ù√ë C
G
√ê√ù B is reversable; i.e. we can Ô¨Çip it to obtain B
G
√ù√ë C
F
√ê√ù A.
However, note that pF √ì Gq is diÔ¨Äerent than (i.e. almost never equivalent to) pG √ì Fq,
unless every arrow in C is an isomorphism.
Slogan 4.6.4.2.
‚Äú When two categories A, B can be interpreted in a common setting C, the
comma category integrates them by recording how to move from A to B
inside C. ‚Äù
Example 4.6.4.3. Let C be a category and I : C √ë Set a functor. In this example we
show that the comma category construction captures the notion of taking the category
of elements
≈ü
C I; see DeÔ¨Ånition 4.6.2.1.
Consider the set 1, the category Discp1q, and the functor F : Discp1q √ë Set sending
the unique object to the set 1. We use the comma category setup 1
F
√ù√ù√ù√ë Set
I
√ê√ù√ù√ù C.
There is an isomorphism of categories
≈º
C
I ‚Äì pF √ì Iq.
Indeed, an object in pF √ì Iq is a triple pa, b, fq where a P Obp1q, b P ObpCq, and
f : Fpaq √ë Ipbq is a morphism in Set. There is only one object in 1, so this reduces to
a pair pb, fq where b P ObpCq and f : t,u √ë Ipbq. The set of functions t,u √ë Ipbq is
isomorphic to Ipbq, as we saw in Exercise 2.1.2.14. So we have reduced ObpF √ì Iq to the
set of pairs pb, xq where b P ObpCq and x P Ipbq; this is Obp
≈ü
C Iq. Because there is only
one function 1 √ë 1, a morphism pb, xq √ë pb1, x1q in pF √ì Iq boils down to a morphism
r: b √ë b1 such that the diagram
1
x / Ipbq
Iprq

1
x1 / Ipb1q
commutes.
But such diagrams are in one-to-one correspondence with the diagrams
needed for morphisms in
≈ü
C I.
Exercise 4.6.4.4. Let C be a category and let c, c1 P ObpCq be objects. Consider them
as functors c, c1 : 1 √ë C, and consider the setup 1
c
√ù√ù√ù√ë C
c1
√ê√ù√ù√ù 1. What is the comma
category pc √ì c1q?
‚ô¶
4.6.5
Arithmetic of categories
In Section 2.7.3, we summarized some of the properties of products, coproducts, and
exponentials for sets, attempting to show that they lined up precisely with familiar
arithmetic properties of natural numbers. Astoundingly, we can do the same for cate-
gories.
In the following proposition, we denote the coproduct of two categories A and B by
the notation A ` B rather than A \ B. We also denote the functor category FunpA, Bq
by BA. Finally, we use 0 and 1 to refer to the discrete category on 0 and on 1 object,
respectively.

200
CHAPTER 4. BASIC CATEGORY THEORY
Proposition 4.6.5.1. The following isomorphisms exist for any small categories A, B,
and C.
‚Ä¢ A ` 0 ‚Äì A
‚Ä¢ A ` B ‚Äì B ` A
‚Ä¢ pA ` Bq ` C ‚Äì A ` pB ` Cq
‚Ä¢ A ÀÜ 0 ‚Äì 0
‚Ä¢ A ÀÜ 1 ‚Äì A
‚Ä¢ A ÀÜ B ‚Äì B ÀÜ A
‚Ä¢ pA ÀÜ Bq ÀÜ C ‚Äì A ÀÜ pB ÀÜ Cq
‚Ä¢ A ÀÜ pB ` Cq ‚Äì pA ÀÜ Bq ` pA ÀÜ Cq
‚Ä¢ A0 ‚Äì 1
‚Ä¢ A1 ‚Äì A
‚Ä¢ 0A ‚Äì 0,
if A ‚Ä∞ 0
‚Ä¢ 1A ‚Äì 1
‚Ä¢ AB`C ‚Äì AB ÀÜ AC
‚Ä¢ pABqC ‚Äì ABÀÜC
Proof. These are standard results; see [Mac].
‚ñ°

Chapter 5
Categories at work
We have now set up an understanding of the basic notions of category theory: categories,
functors, natural transformations, and universal properties. We have discussed many
sources of examples: orders, graphs, monoids, and databases. We begin this chapter with
the notion of adjoint functors (also known as adjunctions), which are like dictionaries
that translate back and forth between diÔ¨Äerent categories.
5.1
Adjoint functors
Just above, in the introduction to this chapter, I said that adjoint functors are like
dictionaries that translate back and forth between diÔ¨Äerent categories. How far can we
take that analogy?
In the common understanding of dictionaries, we assume that the two languages (say
French and English) are equally expressive, and that a good dictionary will be an even
exchange of ideas. But in category theory we often have two categories that are not
on the same conceptual level. This is most clear in the case of so-called free-forgetful
adjunctions. In Section 5.1.1 we will explore the sense in which each adjunction provides
a dictionary between two categories that are not necessarily on an equal footing, so to
speak.
5.1.1
Discussion and deÔ¨Ånition
Consider the category of monoids and the category of sets. A monoid pM, e, ‚Äπq is a set
with an identity element and a multiplication formula that is associative. A set is just
a set. A dictionary between Mon and Set should not be required to set up an even
exchange, but instead an exchange that is appropriate to the structures at hand. It will
be in the form of two functors, one we‚Äôll denote by L: Set √ë Mon, and one we‚Äôll denote
by R: Mon √ë Set. But to say what ‚Äúappropriate‚Äù means requires more work.
Let‚Äôs bring it down to earth with an analogy. A one-year-old can make repeatable
noises and an adult can make repeatable noises. One might say ‚Äúafter all, talking is noth-
ing but making repeatable noises.‚Äù But the adult‚Äôs repeatable noises are called words,
they form sentences, and these sentences can cause nuclear wars. There is something
more in adult language than there is simply in repeatable sounds. In the same vein, a
tennis match can be viewed as physics, but you won‚Äôt see the match. So we have some-
thing analogous to two categories here: ((repeated noises)) and ((meaningful words)).
201

202
CHAPTER 5. CATEGORIES AT WORK
We are looking for adjoint functors going back and forth, serving as the appropriate sort
of dictionary.
To translate baby talk into adult language we would make every repeated noise a
kind of word, thereby granting it meaning. We don‚Äôt know what a given repeated noise
should mean, but we give it a slot in our conceptual space, always pondering ‚ÄúI wonder
what she means by Konnen..‚Äù On the other hand, to translate from meaningful words to
repeatable noises is easy. We just hear the word as a repeated noise, which is how the
baby probably hears it.
Adjoint functors often come in the form of ‚Äúfree‚Äù and ‚Äúforgetful‚Äù. Here we freely
add Konnen to our conceptual space without having any idea how it adheres to the
rest of the child‚Äôs noises or feelings. But it doesn‚Äôt act like a sound to us, it acts like
a word; we don‚Äôt know what it means but we Ô¨Ågure it means something. Conversely,
the translation going the other way is ‚Äúforgetful‚Äù, forgetting the meaning of our words
and just hearing them as sounds. The baby hears our words and accepts them as mere
sounds, not knowing that there is anything extra to get.
Back to sets and monoids, the sets are like the babies from our story: they are
simple objects full of unconnected dots. The monoids are like adults, forming words and
performing actions. In the monoid, each element means something and combines with
other elements in some way. There are lots of diÔ¨Äerent sets and lots of diÔ¨Äerent monoids,
just as there are many babies and many adults, but there are patterns to the behavior
of each kind and we put them in diÔ¨Äerent categories.
Applying free functor L: Set √ë Mon to a set X makes every element x P X a word,
and these words can be strung together to form more complex words. (We discussed
the free functor in Section 3.1.1.12.) Since a set such as X carries no information about
the meaning or structure of its various elements, the free monoid FpXq does not relate
diÔ¨Äerent words in any way. To apply the forgetful functor R: Mon √ë Set to a monoid,
even a structured one, is to simply forget that its elements are anything but mere elements
of a set. It sends a monoid pM, 1, ‚Äπq to the set M.
The analogy is complete. However, this is all just ideas. Let‚Äôs give a deÔ¨Ånition, then
return to our sets, monoids, sounds, and words.
DeÔ¨Ånition 5.1.1.1. Let B and A be categories. 1 An adjunction between B and A is a
pair of functors
L: B √ë A
and
R: A √ë B
together with a natural isomorphism 2 whose component for any objects A P ObpAq and
B P ObpBq is:
Œ±B,A : HomApLpBq, Aq
‚Äì
√ù√ù√ù√ë HomBpB, RpAqq.
(5.1)
This isomorphism is called the adjunction isomorphism for the pL, Rq adjunction, and
for any morphism f : LpBq √ë A in A, we refer to Œ±B,Apfq: B √ë RpAq as the adjunct of
f. 3
1Throughout this deÔ¨Ånition, notice that B‚Äôs come before A‚Äôs, especially in (5.1), which might be
confusing. It was a stylistic choice to match with the Babies and Adults discussion above and below
this deÔ¨Ånition.
2The natural isomorphism Œ± (see Lemma 4.3.2.12) is between two functors Bop ÀÜ A √ë Set, namely
the functor pB, Aq √û√ë HomApLpBq, Aq and the functor pB, Aq √û√ë HomBpB, RpAqq.
3Conversely, for any g : B √ë RpAq in B we refer to Œ±¬¥1
B,Apgq: LpBq √ë A as the adjunct of g.

5.1. ADJOINT FUNCTORS
203
The functor L is called the left adjoint and the functor R is called the right adjoint.
We may say that L is the left adjoint of R or that R is the right adjoint of L.
4 We
often denote this setup by
L: B
/ A :R
o
Proposition 5.1.1.2. Let L: Set √ë Mon be the functor sending X P ObpSetq to the
free monoid LpXq :‚Äú pListpXq, r s, ``q, as in DeÔ¨Ånition 3.1.1.15. Let R: Mon √ë Set
be the functor sending each monoid M :‚Äú pM, 1, ‚Äπq to its underlying set RpMq :‚Äú M.
Then L is left adjoint to R.
Proof. If we can Ô¨Ånd a natural isomorphism of sets
Œ±X,M : HomMonpLpXq, Mq √ë HomSetpX, RpMqq
we will have succeeded in showing that these functors are adjoint.
Suppose given an element f P HomMonpLpXq, Mq, i.e. a monoid homomorphism
f : ListpXq √ë M (sending r s to 1 and list concatenation to ‚Äπ). Then in particular we
can apply f to the singleton list rxs for any x P X. This gives a function X √ë M by
x √û√ë fprxsq, and this is Œ±X,Mpfq: X √ë M ‚Äú RpMq. We need only to supply an inverse
Œ≤X,M : HomSetpX, RpMqq √ë HomMonpLpXq, Mq.
Suppose given an element g P HomSetpX, RpMqq, i.e. a function g: X √ë M. Then to
any list ‚Ñì‚Äú rx1, x2, . . . , xns P ListpXq we can assign Œ≤X,Mp‚Ñìq :‚Äú gpx1q‚Äπgpx2q‚Äπ¬® ¬® ¬®‚Äπgpxnq
(if ‚Ñì‚Äú r s is the empty list, assign Œ≤X,Mpr sq :‚Äú 1). We now have a function ListpXq √ë M.
It is a monoid homomorphism because it respects identity and composition. It is easy
to check that Œ≤ and Œ± are mutually inverse, completing the proof.
‚ñ°
Example 5.1.1.3. We need to ground our discussion in some concrete mathematics. In
Proposition 5.1.1.2 we provided our long-awaited adjunction between sets and monoids.
A set X gets transformed into a monoid by considering lists in X; a monoid M gets
transformed into a set by forgetting the multiplication law. So we have a functor going
one way and the other,
L: Set √ë Mon,
R: Mon √ë Set,
but an adjunction is more than that: it includes a guarantee about the relationship
between these two functors. What is the relationship between L and R? Consider an
arbitrary monoid M ‚Äú pM, 1, Àöq.
If I want to pick out 3 elements of the set M, that‚Äôs the same thing as giving a
function ta, b, cu √ë M. But that function exists in the category of sets; in fact it is
an element of HomSetpta, b, cu, Mq. But since M ‚Äú RpMq is the underlying set of our
monoid, we can view the current paragraph in the light of our adjunction Equation (5.1)
by saying it has been about the set
HomSetpta, b, cu, RpMqq.
This set classiÔ¨Åes all the ways to pick three elements out of the underlying set of our
monoid M. It was constructed completely from within the category Set.
4The left adjoint does not have to be called L, nor does the right adjoint have to be called R, of
course. This is suggestive.

204
CHAPTER 5. CATEGORIES AT WORK
Now we ask what Equation (5.1) means. The equation
HomMonpLpta, b, cuq, Mq ‚Äì HomSetpta, b, cu, RpMqq.
tells us that somehow we can answer the same question completely from within the cat-
egory of monoids. In fact it tells us how to do so, namely as HomMonpListpt1, 2, 3u, Mq.
Exercise 5.1.1.4 looks at how that should go. The answer is ‚Äúhidden‚Äù in the proof of
Proposition 5.1.1.2.
Exercise 5.1.1.4. Let X ‚Äú ta, b, cu and let M ‚Äú pN, 1, Àöq be the multiplicative monoid
of natural numbers (see Example 3.1.3.2).
Let f : X √ë N be the function given by
fpaq ‚Äú 7, fpbq ‚Äú 2, fpcq ‚Äú 2, and let Œ≤X,M : HomSetpX, RpMqq √ë HomMonpLpXq, Mq
be as in the proof of Proposition 5.1.1.2. What is Œ≤X,Mpfqprb, b, a, csq?
‚ô¶
Let us look once more at the adjunction between adults and babies.
Using the
notation of DeÔ¨Ånition 5.1.1.1 A is the ‚Äúadult category‚Äù of meaningful words and B is the
‚Äúbaby category‚Äù of repeated noises. The left adjoint turns every repeated sound into a
meaningful word (having ‚Äúfree‚Äù meaning) and the right adjoint ‚Äúforgets‚Äù the meaning of
any word and considers it merely as a sound.
At the risk of taking this simple analogy too far, let‚Äôs have a go at the heart of the
issue: how to conceive of the isomorphism (5.1) of Hom‚Äôs. Once we have freely given a
slot to each of baby‚Äôs repeated sounds, we try to Ô¨Ånd a mapping from the lexicon LpBq
of these new words to our own lexicon A of meaningful words; these are mappings in
the adult category A of the form LpBq √ë A. And (stretching it) the baby tries to Ô¨Ånd
a mapping (which we might see as emulation) from her set B of repeatable sounds to
the set RpAq of the sounds the adult seems to repeat. If there was a global system for
making these transformations that would establish (5.1) and hence the adjunction.
Note that the directionality of the adjunction makes a diÔ¨Äerence. If L: B √ë A is left
adjoint to R: A √ë B we rarely have an isomorphism HomApA, LpBqq ‚Äì HomBpRpAq, Bq.
In the case of babies and adults, we see that it would make little sense to look for a
mapping in the category of meaningful words from the adult lexicon to the wordiÔ¨Åcations
of baby-sounds, because there is unlikely to be a good candidate for most of our words.
That is, to which of our child‚Äôs repeated noises would we assign the concept ‚Äúweekday‚Äù?
Again, the above is simply an analogy, and almost certainly not formalizable. The
next example shows mathematically the point we tried to make in the previous para-
graph, that the directionality of an adjunction is not arbitrary.
Example 5.1.1.5. Let L: Set √ë Mon and R: Mon √ë Set be the free and forgetful
functors from Proposition 5.1.1.2. We know that L is left adjoint to R; however L is not
right adjoint to R. In other words, we can show that the necessary natural isomorphism
cannot exist.
Let X ‚Äú ta, bu and let M ‚Äú pt1u, 1, !q be the trivial monoid. Then the necessary
natural isomorphism would need to give us a bijection
HomMonpM, LpXqq ‚Äì? HomSetpt1u, Xq.
But the left-hand side has one element, because M is the initial object in Mon (see Ex-
ample 4.5.3.8), whereas the right-hand side has two elements. Therefore no isomorphism
can exist.
Example 5.1.1.6. Preorders have underlying sets, giving rise to a functor U : PrO √ë Set.
The functor U has both a left adjoint and a right adjoint.
The left adjoint of U is
D: Set √ë PrO, sending a set X to the discrete preorder on X (the preorder with

5.1. ADJOINT FUNCTORS
205
underlying set X, having the fewest possible ƒè‚Äôs). The right adjoint of U is I : Set √ë
PrO, sending a set X to the indiscrete preorder on X (the preorder with underlying set
X, having the most possible ƒè‚Äôs). See Example 3.4.4.5.
Exercise 5.1.1.7. Let U : Grph √ë Set denote the functor sending a graph to its under-
lying set of vertices. This functor has both a left and a right adjoint.
a.) What functor Set √ë Grph is the left adjoint of U?
b.) What functor Set √ë Grph is the right adjoint of U?
‚ô¶
Example 5.1.1.8. Here are some other adjunctions:
‚Ä¢ Ob: Cat √ë Set has a left adjoint Set √ë Cat given by the discrete category.
‚Ä¢ Ob: Cat √ë Set has a right adjoint Set √ë Cat given by the indiscrete category.
‚Ä¢ The underlying graph functor Cat √ë Grph has a left adjoint Grph √ë Cat given
by the free category.
‚Ä¢ The functor PrO √ë Grph, given by drawing edges for ƒè‚Äôs, has a left adjoint given
by existence of paths.
‚Ä¢ The forgetful functor from posets to preorders has a left adjoint given by quotient
by isomorphism relation.
‚Ä¢ Given a set A, the functor p¬¥ ÀÜ Aq: Set √ë Set has a right adjoint HompA, ¬¥q
(this was called currying in Section 2.7.2).
Exercise 5.1.1.9. Let F : C √ë D and G: D √ë C be mutually inverse equivalences of
categories (see DeÔ¨Ånition 4.3.4.1). Are they adjoint in one direction or the other?
‚ô¶
Exercise 5.1.1.10. The discrete category functor Disc: Set √ë Cat has a left adjoint
p: Cat √ë Set.
a.) For an arbitrary object X P ObpSetq and an arbitrary object C P ObpCatq, write
down the adjunction isomorphism.
b.) Let C be the free category on the graph G:
G :‚Äú
v‚Äö
f
/ w‚Äö
h
?
g
 x‚Äö
y‚Äö
i

j
 z‚Äö
k
_
and let X ‚Äú t1, 2, 3u. How many elements does the set HomSetpC, DiscpXqq have?
c.) What can you do to an arbitrary category C to make a set ppCq such that the
adjunction isomorphism holds? That is, how does the functor p behave on objects?
‚ô¶

206
CHAPTER 5. CATEGORIES AT WORK
The following proposition says that all adjoints to a given functor are isomorphic to
each other.
Proposition 5.1.1.11. Let C and D be categories, let F : C √ë D be a functor, and
let G, G1 : D √ë C also be functors. If both G and G1 are right adjoint (respectively left
adjoint) to F then there is a natural isomorphism œÜ: G √ë G1.
Proof. Suppose that both G and G1 are right adjoint to F (the case of G and G1 being
left adjoint is similarly proved). We Ô¨Årst give a formula for the components of œÜ: G √ë G1
and its inverse œà: G1 √ë G. Given an object d P ObpDq, we use c ‚Äú Gpdq to obtain two
natural isomorphisms, one from each adjunction:
HomCpGpdq, Gpdqq ‚Äì HomDpFpGpdqq, dq ‚Äì HomCpGpdq, G1pdqq.
The identity component idGpdq is then sent to some morphism Gpdq √ë G1pdq, which we
take to be œÜd. Similarly, we use c1 ‚Äú G1pdq to obtain two natural isomorphisms, one from
each adjunction:
HomCpG1pdq, G1pdqq ‚Äì HomDpFpG1pdqq, dq ‚Äì HomCpG1pdq, Gpdqq.
Again, the identity component idG1pdq is sent to some morphism G1pdq √ë Gpdq, which
we take to be œàd. The naturality of the isomorphisms implies that œÜ and œà are natural
transformations, and it is straightforward to check that they are mutually inverse.
‚ñ°
5.1.1.12
QuantiÔ¨Åers as adjoints
One of the simplest but neatest places that adjoints show up is between preimages and
the logical quantiÔ¨Åers D and @, which we Ô¨Årst discussed in Notation 2.1.1.1.
The setting
in which to discuss this is that of sets and their power preorders. That is, if X is a set
then recall from Section 3.4.2 that the power set PpXq has a natural ordering by inclusion
of subsets.
Given a function f : X √ë Y and a subset V ƒé Y the preimage is f ¬¥1pV q :‚Äú tx P
X | fpxq P V u. If V 1 ƒé V then f ¬¥1pV 1q ƒé f ¬¥1pV q, so in fact f ¬¥1 : PpY q √ë PpXq can be
considered a functor (where of course we are thinking of preorders as categories). The
quantiÔ¨Åers appear as adjoints of f ¬¥1.
Let‚Äôs begin with the left adjoint of f ¬¥1 : PpY q √ë PpXq. It is a functor Lf : PpXq √ë
PpY q. Choose an object U ƒé X in PpXq. It turns out that
LfpUq ‚Äú ty P Y | Dx P f ¬¥1pyq such that x P Uu.
And the right adjoint Rf : PpXq √ë PpY q, when applied to U is
RfpUq ‚Äú ty P Y | @x P f ¬¥1pyq, x P Uu.
In fact, the functor Lf is generally denoted Df : PpXq √ë PpY q, and Rf is generally
denoted @f : PpXq √ë PpY q.
PpXq
Df
(
@f
6 PpY q.
f ¬¥1
o
We will see in the next example why this notation is apt.

5.1. ADJOINT FUNCTORS
207
Example 5.1.1.13. In logic or computer science, the quantiÔ¨Åers D and @ are used to
ask whether any or all elements of a set have a certain property.
For example, one
may have a set of natural numbers and want to know whether any or all are even or
odd. Let Y ‚Äú teven, oddu, and let p: N √ë Y be the function that takes assigns to
each natural number its parity (even or odd). Because the elements of PpNq and PpY q
are ordered by ‚Äúinclusion of subsets‚Äù, we can construe these orders as categories (by
Proposition 4.2.1.17). That‚Äôs all old; what‚Äôs new is that we have adjunctions between
these categories
PpNq
Dp
(
@p
6 PpY q.
p¬¥1
o
Given a subset U ƒé N, i.e.
an object U P ObpPpNqq, we investigate the objects
DppUq, @ppUq. These are both subsets of teven, oddu. The set DppUq includes the el-
ement even if there exists an even number in U; it includes the element odd if there
exists an odd number in U. Similarly, the set @ppUq includes the element even if every
even number is in U and it includes odd if every odd number is in U. 5
We explain just one of these in terms of the deÔ¨Ånitions. Let V ‚Äú tevenu ƒé Y . Then
f ¬¥1pV q ƒé N is the set of even numbers, and there is a morphism f ¬¥1pV q √ë U in PpNq
if and only if U contains all the even numbers. Therefore, the adjunction isomorphism
HomPpNqpf ¬¥1pV q, Uq ‚Äì HomPpY qpV, @pUq says that V ƒé @pU, i.e. @ppUq includes the
element even if and only if U contains all the even numbers, as we said above.
Exercise 5.1.1.14. The national Scout jamboree is a gathering of Boy Scouts from troops
across the US. Let X be the set of Boy Scouts in the US, and let Y be the set of Boy
Scout troops in the US. Let t: X √ë Y be the function that assigns to each Boy Scout
his troop. Let U ƒé X be the set of Boy Scouts in attendance at this years jamboree.
What is the meaning of the objects DtU and @tU?
‚ô¶
Exercise 5.1.1.15. Let X be a set and U ƒé X a subset. Find a set Y and a function
f : X √ë Y such that DfpUq somehow tells you whether U is non-empty, and such that
@fpUq somehow tells you whether U ‚Äú X.
‚ô¶
In fact, ‚ÄúquantiÔ¨Åers as adjoints‚Äù is part of a larger story. Suppose we think of elements
of a set X as bins, or storage areas. An element of PpXq can be construed as an injection
U √£√ë X, i.e. an assignment of a bin to each element of U, with at most one element of U
in each bin. Relaxing that restriction, we may consider arbitrary sets U and assignments
U √ë X of a bin to each element u P U. Given a function f : X √ë Y , we can generalize
Df and @f to functors denoted Œ£f and Œ†f, which will parameterize disjoint unions and
products (respectively) over y P Y . This will be discussed in Section 5.1.4.
5.1.2
Universal concepts in terms of adjoints
In this section we discuss how universal concepts, i.e. initial objects and terminal objects,
colimits and limits, are easily phrased in the language of adjoint functors. We will say
that a functor F : C √ë D is a left adjoint if there exists a functor G: D √ë C such that F
is a left adjoint of G. We showed in Proposition 5.1.1.11 that if F is a left adjoint of some
functor G, then it is isomorphic to every other left adjoint of G, and G is isomorphic to
every other right adjoint of F.
5It may not be clear that by this point we have also handled the question, ‚Äúis every element of U
even?‚Äù One simply checks that odd is not an element of DpU.

208
CHAPTER 5. CATEGORIES AT WORK
Example 5.1.2.1. Let C be a category and t: C √ë 1 the unique functor to the terminal
category. Then t is a left adjoint if and only if C has a terminal object, and t is a right
adjoint if and only if C has an initial object. The proofs are dual, so let‚Äôs focus on the
Ô¨Årst.
The functor t has a right adjoint R: 1 √ë C if and only if there is an isomorphism
HomCpc, rq ‚Äì Hom1ptpcq, 1q,
where r ‚Äú Rp1q. But Hom1ptpcq, 1q has one element. Thus t has a right adjoint iÔ¨Äthere
is a unique morphism c √ë r in C. This is the deÔ¨Ånition of r being a terminal object.
When we deÔ¨Åned colimits and limits in DeÔ¨Ånitions 4.5.3.26 and 4.5.3.19 we did so for
individual I-shaped diagrams X : I √ë C. Using adjoints we can deÔ¨Åne the limit of every
I-shaped diagram in C at once.
Let t: C √ë 1 denote the unique functor to the terminal category. Given an object
c P ObpCq, consider it as a functor c: 1 √ë C. Then c Àù t: I √ë C is the constant functor
at c, sending each object in I to the same C-object c, and every morphism in I to idc.
This induces a functor that we denote by ‚àÜt : C √ë FunpI, Cq.
Suppose we want to take the colimit or limit of X. We are given an object X of
FunpI, Cq and we want back an object of C. We could hope, and it turns out to be true,
that the adjoints of ‚àÜt are the limit and colimit. Indeed let Œ£t : FunpI, Cq √ë C be the
left adjoint of ‚àÜt, and let Œ†t : FunpI, Cq √ë C be the right adjoint of ‚àÜt. Then Œ£t is the
functor that takes colimits, and Œ†t is the functor that takes limits.
We will work with a generalization of colimits and limits in Section 5.1.4. But for
now, let‚Äôs bring this down to earth with a concrete example.
Example 5.1.2.2. Let C ‚Äú Set, and let I ‚Äú 3. The category FunpI, Setq is the category
of t1, 2, 3u-indexed sets, e.g. pZ, N, Zq P ObpFunpI, Setqq is an object of it. The functor
‚àÜt : Set √ë FunpI, Setq acts as follows.
Given a set c P ObpSetq, consider it as a
functor c: 1 √ë Set, and the composite c Àù t: I √ë Set is the constant functor. That is,
‚àÜtpcq: I √ë Set is the t1, 2, 3u‚Äìindexed set pc, c, cq.
To say that ‚àÜt has a right adjoint called Œ†t : FunpI, Setq √ë Set and that it ‚Äútakes
limits‚Äù should mean that if we look through the deÔ¨Ånition of right adjoint, we will see
that the formula will somehow yield the appropriate limit. Fix a functor D: I √ë Set, so
Dp1q, Dp2q, and Dp3q are sets. The limit lim D of D is the product Dp1q ÀÜ Dp2q ÀÜ Dp3q.
For example, if D ‚Äú pZ, N, Zq then lim D ‚Äú Z ÀÜ N ÀÜ Z. How does this fact arise in the
deÔ¨Ånition of adjoint?
The deÔ¨Ånition of Œ†t being the right adjoint to ‚àÜt says that there is a natural isomor-
phism of sets,
HomFunpI,Setqp‚àÜtpcq, Dq ‚Äì HomSetpc, Œ†tpDqq.
(5.2)
The left-hand side has elements f P HomFunpI,Setqp‚àÜtpcq, Dq that look like the left below,
but having these three maps is equivalent to having the diagram to the right below:
c
fp1q

c
fp2q

c
fp3q

Dp1q
Dp2q
Dp3q
c
fp1q

fp2q

fp3q

Dp1q
Dp2q
Dp3q

5.1. ADJOINT FUNCTORS
209
The isomorphism in (5.2) says that choosing the three maps fp1q, fp2q, fp3q is the same
thing as choosing a function c √ë Œ†tpDq. But this is very close to the universal property
of limits: there is a unique map ‚Ñì: c √ë Dp1q ÀÜ Dp2q ÀÜ Dp3q, so this product serves well
as Œ†t as we have said. We‚Äôre not giving a formal proof here, but what is missing at
this point is the fact that certain diagrams have to commute. This comes down to the
naturality of the isomorphism (5.2). The map ‚Ñìinduces a naturality square
‚àÜtpcq
‚àÜtp‚Ñìq/
f

‚àÜtŒ†tD
œÄ

D
D
which says that the following diagram commutes:
c
fp1q
|
fp2q

fp3q
"
‚Ñì

Dp1q
Dp2q
Dp3q
Dp1q ÀÜ Dp2q ÀÜ Dp3q
œÄ1
b
œÄ2
O
œÄ3
<
It is not hard to show that the composition of left adjoints is a left adjoint, and the
composition of right adjoints is a right adjoint. In the following example we show how
currying (as in Sections 2.7.2 and 5.1.1.8) arises out of a certain combination of data
migration functors.
Example 5.1.2.3 (Currying via ‚àÜ, Œ£, Œ†). Let A, B, and C be sets. Consider the unique
functor a: A √ë 1 and consider B and C as functors 1
B
√ù√ù√ù√ë Set and 1
C
√ù√ù√ù√ë Set
respectively.
A
a
/ 1
B
#
C
=Set
Note that 1‚ÄìSet ‚Äì Set, and we will elide the diÔ¨Äerence. Our goal is to see currying
arise out of the adjunction between Œ£a Àù ‚àÜa and Œ†a Àù ‚àÜa, which tells us that there is an
isomorphism
HomSetpŒ£a‚àÜapBq, Cq ‚Äì HomSetpB, Œ†a‚àÜapCqq.
(5.3)
By deÔ¨Ånition, ‚àÜapBq: A √ë Set assigns to each element a P A the set B. Since Œ£A
takes disjoint unions, we have a bijection
Œ£ap‚àÜapBqq ‚Äú
Àú≈æ
aPA
B
¬∏
‚Äì A ÀÜ B.

210
CHAPTER 5. CATEGORIES AT WORK
Similarly ‚àÜapCq: A √ë Set assigns to each element a P A the set C. Since Œ†A takes
products, we have a bijection
Œ†ap‚àÜapCqq ‚Äú
Àú≈∫
aPA
C
¬∏
‚Äì CA.
The currying isomorphism HomSetpA ÀÜ B, Cq ‚Äì HomSetpB, CAq falls out of (5.3).
5.1.3
Preservation of colimits or limits
One useful fact about adjunctions is that left adjoints preserve all colimits and right
adjoints preserve all limits.
Proposition 5.1.3.1. Let L: B
/ A :R
o
be an adjunction. For any indexing cate-
gory I and functor D: I √ë B, if D has a colimit in B then there is a unique isomorphism
Lpcolim Dq ‚Äì colimpL Àù Dq.
Similarly, for any I P ObpCatq and functor D: I √ë A, if D has a limit in A then
there is a unique isomorphism
Rplim Dq ‚Äì limpR Àù Dq.
Proof. The proof is simple if one knows the Yoneda lemma (Section 5.2.1.12). I have
decided to skip it to keep the book shorter. See [Mac].
‚ñ°
Example 5.1.3.2. Since Ob: Cat √ë Set is both a left adjoint and a right adjoint, it must
preserve both limits and colimits. This means that if you want to know the set of objects
in the Ô¨Åber product of some categories, you can simply take the Ô¨Åber product of the set
of objects in those categories,
ObpA ÀÜC Bq ‚Äì ObpAq ÀÜObpCq ObpBq.
While the right-hand side might look daunting, it is just a Ô¨Åber product in Set which is
quite understandable.
This is greatly simplifying. If one thinks through what deÔ¨Ånes a limit in Cat, one
is dragged through notions of slice categories and terminal objects in them. These slice
categories are in Cat so they involve several categories and functors, and it gets hairy
or even hopeless to a beginner. Knowing that the objects are given by a simple Ô¨Åber
product makes the search for limits in Cat much simpler.
For example, if rns is the linear order category of length n then rns ÀÜ rms has nm `
n ` m ` 1 objects because rns has n ` 1 objects and rms has m ` 1 objects.
Example 5.1.3.3. The ‚Äúpath poset‚Äù functor L: Grph √ë PrO given by existence of paths
(see Exercise 4.1.2.11) is left adjoint to the functor R: PrO √ë Grph given by replacing
ƒè‚Äôs by arrows. This means that L preserves colimits. So taking the union of graphs G
and H results in a graph whose path poset LpG \ Hq is the union of the path posets of
G and H. But this is not so for products.

5.1. ADJOINT FUNCTORS
211
Let G ‚Äú H ‚Äú
a‚Äö
f
/ b‚Äö . Then LpGq ‚Äú LpHq ‚Äú r1s, the linear order of length 1.
But the product G ÀÜ H in Grph looks like the graph
pa,aq
‚Äö
 
pa,bq
‚Äö
pb,aq
‚Äö
pb,bq
‚Äö
Its preorder LpG ÀÜ Hq does not have pa, aq ƒè pa, bq, whereas this is the case in LpGq ÀÜ
LpHq.
5.1.4
Data migration
As we saw in Sections 4.2.2 and 4.2.2.5, a database schema is a category C and an instance
is a functor I : C √ë Set.
Notation 5.1.4.1. Let C be a category. Throughout this section we denote by C‚ÄìSet
the category FunpC, Setq of functors from C to Set, i.e. the category of instances on C.
In this section we discuss what happens to the resulting instances when diÔ¨Äerent
schemas are connected by a functor, say F : C √ë D. It turns out that three adjoint func-
tors emerge: ‚àÜF : D‚ÄìSet √ë C‚ÄìSet, Œ£F : C‚ÄìSet √ë D‚ÄìSet, and Œ†F : C‚ÄìSet √ë D‚ÄìSet,
where ‚àÜF is adjoint to both,
Œ£F : C‚ÄìSet
/ D‚ÄìSet :‚àÜF
o
‚àÜF : D‚ÄìSet
/ C‚ÄìSet :Œ†F .
o
It turns out that almost all the basic database operations are captured by these three
functors. For example, ‚àÜF handles the job of duplicating or deleting tables, as well as
duplicating or deleting columns in a single table. The functor Œ£F handles taking unions,
and the functor Œ†F handles joining tables together, matching columns, or selecting the
rows with certain properties (e.g. everyone whose Ô¨Årst name is Mary).
5.1.4.2
Pullback: ‚àÜ
Given a functor F : C √ë D and a functor I : D √ë Set, we can compose them to get a
functor I Àù F : C √ë Set. In other words, the presence of F provides a way to convert D-
instances into C-instances. In fact this conversion is functorial, meaning that morphisms
of D-instances are sent to morphisms of C-instances. We denote the resulting functor by
‚àÜF : D‚ÄìSet √ë C‚ÄìSet and call it pullback along F.
We have seen an example of this before in Example 4.3.2.15, where we showed how a
monoid homomorphism F : M1 √ë M could add functionality to a Ô¨Ånite state machine.
More generally, we can use pullbacks to reorganize data, copying and deleting tables and
columns.
Remark 5.1.4.3. Given a functor F : C √ë D, which we think of as a schema translation,
the functor ‚àÜF : D‚ÄìSet √ë C‚ÄìSet ‚Äúgoes the opposite way‚Äù. The reasoning is simple to
any explain (composition of functors) but something about it is often very strange to
people, at Ô¨Årst. The rough idea of this ‚Äúcontravariance‚Äù is captured by the role-reversal
in the following slogan:
Slogan 5.1.4.4.

212
CHAPTER 5. CATEGORIES AT WORK
‚Äú If I get my information from you, then your information becomes my infor-
mation. ‚Äù
Consider the following functor F : C √ë D: 6
C :‚Äú
SSN
‚Äö
First
‚Äö
T1‚Äö
F
=
!
T2‚Äö
a
}

Last
‚Äö
Salary
‚Äö
F
√ù√ù√ù√ë
SSN
‚Äö
First
‚Äö
T‚Äö
F
>
 

Last
‚Äö
Salary
‚Äö
‚Äú: D
(5.4)
Let‚Äôs spend a moment recalling how to ‚Äúread‚Äù schemas. In schema C there are leaf
tables SSN, First, Last, Salary, which represent diÔ¨Äerent kinds of basic data. More
interestingly, there are two fact tables. The Ô¨Årst is called T1 and it relates SSN, First,
and Last. The second is called T2 and it relates First, Last, and Salary.
The functor F : C √ë D relates C to a schema with a single fact table relating all four
attributes: SSN, First, Last, and Salary. We are interested in ‚àÜF : D‚ÄìSet √ë C‚ÄìSet.
Suppose given the following database instance I : D √ë Set on D:
T
ID
SSN
First
Last
Salary
XF667
115-234
Bob
Smith
$250
XF891
122-988
Sue
Smith
$300
XF221
198-877
Alice
Jones
$100
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
How do you get the instance ‚àÜF pIq: C √ë Set?
The formula was given above:
compose I with F. In terms of tables, it feels like duplicating table T as T1 and T2, but
deleting a column from each in accordance with the deÔ¨Ånition of C in (5.4). Here is the
result, ‚àÜF pIq, in table form:
6This example was taken from [Sp1], http://arxiv.org/abs/1009.1166.

5.1. ADJOINT FUNCTORS
213
T1
ID
SSN
First
Last
XF667
115-234
Bob
Smith
XF891
122-988
Sue
Smith
XF221
198-877
Alice
Jones
T2
ID
First
Last
Salary
XF221
Alice
Jones
$100
XF667
Bob
Smith
$250
XF891
Sue
Smith
$300
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
Exercise 5.1.4.5. Let C ‚Äú pG, ¬ªq be a schema. A leaf table is an object c P ObpCq with
no outgoing arrows.
a.) Write the condition of being a ‚Äúleaf table‚Äù mathematically in three diÔ¨Äerent lan-
guages: that of graphs (using symbols V, A, src, tgt), that of categories (using HomC,
etc.), and that of tables (in terms of columns, tables, rows, etc.).
b.) In the language of categories, is there a diÔ¨Äerence between a terminal object and a
leaf table? Explain.
‚ô¶
Exercise 5.1.4.6. Consider the schemas
r1s ‚Äú
0‚Äö
f
√ù√ù√ù√ë
1‚Äö
and
r2s ‚Äú
0‚Äö
g
√ù√ù√ù√ë
1‚Äö
h
√ù√ù√ù√ë
2‚Äö ,
and the functor F : r1s √ë r2s given by sending 0 √û√ë 0 and 1 √û√ë 2.
a.) How many possibilities are there for Fpfq?
b.) Now suppose I : r2s √ë Set is given by the following tables.
0
ID
g
Am
To be verb
Baltimore
Place
Carla
Person
Develop
Action verb
Edward
Person
Foolish
Adjective
Green
Adjective
1
ID
h
Action verb
Verb
Adjective
Adjective
Place
Noun
Person
Noun
To be verb
Verb
2
ID
Adjective
Noun
Verb
Write out the two tables associated to the r1s-instance ‚àÜF pIq: r1s √ë Set.
‚ô¶

214
CHAPTER 5. CATEGORIES AT WORK
5.1.4.7
Left pushforward: Œ£
Let F : C √ë D be a functor.
The functor ‚àÜF : D‚ÄìSet √ë C‚ÄìSet has a left adjoint,
Œ£F : C‚ÄìSet √ë D‚ÄìSet.
The rough idea is that Œ£F performs parameterized colimits.
Given an instance I : C √ë Set, we get an instance on D that acts as follows. For each
object d P ObpDq, the set Œ£F pIqpdq is the colimit (think, union) of some diagram back
home in C.
Left pushforwards (also known as left Kan extensions) are discussed at length in
[Sp1]; here we begin with some examples from that paper.
Example 5.1.4.8. We again use the functor F : C √ë D drawn below
C :‚Äú
SSN
‚Äö
First
‚Äö
T1‚Äö
F
=
!
T2‚Äö
a
}

Last
‚Äö
Salary
‚Äö
F
√ù√ù√ù√ë
SSN
‚Äö
First
‚Äö
T‚Äö
F
>
 

Last
‚Äö
Salary
‚Äö
‚Äú: D
(5.4)
We will be applying the left pushforward Œ£F : C‚ÄìSet √ë D‚ÄìSet to the following instance
I : C √ë Set:
T1
ID
SSN
First
Last
T1-001
115-234
Bob
Smith
T1-002
122-988
Sue
Smith
T1-003
198-877
Alice
Jones
T2
ID
First
Last
Salary
T2-001
Alice
Jones
$100
T2-002
Sam
Miller
$150
T2-004
Sue
Smith
$300
T2-010
Carl
Pratt
$200
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
The functor F : C √ë D sent both tables T1 and T2 to table T. Applying Œ£F will take
the what was in T1 and T2 and put the union in T. The result Œ£F I : D √ë Set is as
follows:

5.1. ADJOINT FUNCTORS
215
T
ID
SSN
First
Last
Salary
T1-001
115-234
Bob
Smith
T1-001.Salary
T1-002
122-988
Sue
Smith
T1-002.Salary
T1-003
198-877
Alice
Jones
T1-003.Salary
T2-001
T2-A101.SSN
Alice
Jones
$100
T2-002
T2-A102.SSN
Sam
Miller
$150
T2-004
T2-004.SSN
Sue
Smith
$300
T2-010
T2-A110.SSN
Carl
Pratt
$200
SSN
ID
115-234
118-334
122-988
198-877
342-164
T2-001.SSN
T2-002.SSN
T2-004.SSN
T2-010.SSN
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
T1-001.Salary
T1-002-Salary
T1-003-Salary
As you can see, there was no set salary information for any data coming from table
T1 nor any set SSN information for any data coming form table T2. But the deÔ¨Ånition
of adjoint, given in DeÔ¨Ånition 5.1.1.1, yielded the universal response: freely add new
variables that take the place of missing information. It turns out that this idea already
has a name in logic, Skolem variables, and a name in database theory, labeled nulls.
Exercise 5.1.4.9. Consider the functor F : 3 √ë 2 sending 1 √û√ë 1, 2 √û√ë 2, 3 √û√ë 2.
a.) Write down an instance I : 3 √ë Set.
b.) Given the description that ‚ÄúŒ£F performs a parameterized colimit‚Äù, make an educated
guess about what Œ£F pIq will be. Give your answer in the form of two sets that are
made up from the three sets you already wrote down.
‚ô¶
We now brieÔ¨Çy give the actual formula for computing left pushforwards. Suppose
that F : C √ë D is a functor and let I : C √ë Set be a set-valued functor on C. Then
Œ£F pIq: D √ë Set is deÔ¨Åned as follows. Given an object d P ObpDq we Ô¨Årst form the
comma category (see DeÔ¨Ånition 4.6.4.1) for the setup
C
F√ù√ë D
d
√ê√ù 1
and denote it by pF √ì dq. There is a canonical projection functor œÄ: pF √ì dq √ë C, which
we can compose with I : C √ë Set to obtain a functor pF √ì dq √ë Set. We are ready to
deÔ¨Åne Œ£F pIqpdq to be its colimit,
Œ£F pIqpdq :‚Äú colim
pF √ìdq I Àù œÄ.
We have deÔ¨Åned Œ£F pIq: D √ë Set on objects d P ObpDq. As for morphisms we will be
even more brief, but one can see [Sp1] for details. Given a morphism g: d √ë d1 one

216
CHAPTER 5. CATEGORIES AT WORK
notes that there is an induced functor pF √ì gq: pF √ì dq √ë pF √ì d1q and a commutative
diagram of categories:
pF √ì dq
pF √ìgq
/
œÄ

IÀùœÄ

pF √ì d1q
œÄ1
 IÀùœÄ1

C
I

Set
By the universal property of colimits, this induces the required function
colim
pF √ìdq I Àù œÄ
Œ£F pIqpgq
√ù√ù√ù√ù√ù√ù√ù√ù√ë colim
pF √ìd1q I Àù œÄ1.
5.1.4.10
Right pushforward: Œ†
Let F : C √ë D be a functor. We heard in Section 5.1.4.7 that the functor ‚àÜF : D‚ÄìSet √ë
C‚ÄìSet has a left adjoint. Here we explain that it has a right adjoint, Œ†F : C‚ÄìSet √ë D‚ÄìSet
as well. The rough idea is that Œ†F performs parameterized limits. Given an instance
I : C √ë Set, we get an instance on D that acts as follows. For each object d P ObpDq,
the set Œ†F pIqpdq is the limit (think, Ô¨Åber product) of some diagram back home in C.
Right pushforwards (also known as right Kan extensions) are discussed at length in
[Sp1]; here we begin with some examples from that paper.
Example 5.1.4.11. We once again use the functor F : C √ë D from Example 5.1.4.8. We
will apply the right pushforward Œ†F to instance I : C √ë Set from that example. 7
The instance Œ†F pIq will put data in all 5 tables in D. In T it will put pairs pt1, t2q
where t1 is a row in T1 and t2 is a row in T2 for which the Ô¨Årst and last names agree.
7To repeat for convenience,
C :‚Äú
SSN
‚Äö
First
‚Äö
T1‚Äö
F
>
 
T2‚Äö
`
~

Last
‚Äö
Salary
‚Äö
F
√ù√ù√ù√ù√ë
SSN
‚Äö
First
‚Äö
T‚Äö
G
>
 

Last
‚Äö
Salary
‚Äö
‚Äú: D
(5.4)
I : C √ë Set is
T1
ID
SSN
First
Last
T1-001
115-234
Bob
Smith
T1-002
122-988
Sue
Smith
T1-003
198-877
Alice
Jones
T2
ID
First
Last
Salary
T2-001
Alice
Jones
$100
T2-002
Sam
Miller
$150
T2-004
Sue
Smith
$300
T2-010
Carl
Pratt
$200

5.1. ADJOINT FUNCTORS
217
It will copy the leaf tables exactly, so we do not display them here; the following is the
table T for Œ†F pIq:
T
ID
SSN
First
Last
Salary
T1-002T2-A104
122-988
Sue
Smith
$300
T1-003T2-A101
198-877
Alice
Jones
$100
Looking at T1 and T2, there were only two ways to match Ô¨Årst and last names.
Exercise 5.1.4.12. Consider the functor F : 3 √ë 2 sending 1 √û√ë 1, 2 √û√ë 2, 3 √û√ë 2.
a.) Write down an instance I : 3 √ë Set.
b.) Given the description that ‚ÄúŒ†F performs a parameterized limit‚Äù, make an educated
guess about what Œ†F pIq will be. Give your answer in the form of two sets that are
made up from the three sets you already wrote down.
‚ô¶
We now brieÔ¨Çy give the actual formula for computing right pushforwards. Suppose
that F : C √ë D is a functor and let I : C √ë Set be a set-valued functor on C. Then
Œ†F pIq: D √ë Set is deÔ¨Åned as follows. Given an object d P ObpDq we Ô¨Årst form the
comma category (see DeÔ¨Ånition 4.6.4.1) for the setup
1 d√ù√ë D
F
√ê√ù C
and denote it by pd √ì Fq. There is a canonical projection functor œÄ: pd √ì Fq √ë C, which
we can compose with I : C √ë Set to obtain a functor pd √ì Fq √ë Set. We are ready to
deÔ¨Åne Œ†F pIqpdq to be its limit,
Œ†F pIqpdq :‚Äú lim
pd√ìF q I Àù œÄ.
We have deÔ¨Åned Œ†F pIq: D √ë Set on objects d P ObpDq. As for morphisms we will be
even more brief, but one can see [Sp1] for details. Given a morphism g: d √ë d1 one
notes that there is an induced functor pg √ì Fq: pd1 √ì Fq √ë pd √ì Fq and a commutative
diagram of categories:
pd1 √ì Fq
pg√ìF q
/
œÄ1

IÀùœÄ1

pd √ì Fq
œÄ

IÀùœÄ

C
I

Set
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300

218
CHAPTER 5. CATEGORIES AT WORK
By the universal property of limits, this induces the required function
lim
pd√ìF q I Àù œÄ
Œ†F pIqpgq
√ù√ù√ù√ù√ù√ù√ù√ù√ë lim
pd1√ìF q I Àù œÄ1.
5.2
Categories of functors
For any two categories C and D, 8 we discussed the category FunpC, Dq of functors and
natural transformations between them. In this section we discuss functor categories a bit
more and give some important applications within mathematics (sheaves) that extend
to the real world.
5.2.1
Set-valued functors
Let C be a category. Then we have been writing C‚ÄìSet to denote the functor category
FunpC, Setq. Here is a nice result about these categories.
Proposition 5.2.1.1. Let C be a category. The category C‚ÄìSet is closed under colimits
and limits.
Sketch of proof. Let J be an indexing category and D: J √ë C‚ÄìSet a functor. For each
object c P ObpCq, we have a functor Dc : J √ë Set deÔ¨Åned by Dcpjq ‚Äú Dpjqpcq. DeÔ¨Åne a
functor L: C √ë Set by Lpcq ‚Äú limJ Dc, and note that for each f : c √ë c1 in C there is
an induced function Lpfq: Lpcq √ë Lpc1q. One can check that L is a limit of J, because
it satisÔ¨Åes the relevant universal property.
The dual proof holds for colimits.
‚ñ°
Application 5.2.1.2. When taking in data about a scientiÔ¨Åc subject, one often Ô¨Ånds
that the way one thinks about the problem changes over time.
We understand this
phenomenon in the language of databases in terms of a series of schemas C1, C2, . . . , Cn,
perhaps indexed chronologically. The problem is that old data is held in old schemas
and we want to see it in our current understanding. The Ô¨Årst step is to transfer all the
old data to our new schema in the freest possible way, that is, making no assumptions
about how to Ô¨Åll in the new Ô¨Åelds. If one creates functors Fi : Ci √ë Ci`1 from each of
these schemas to the next, then we can push the data forward using Œ£Fi.
Doing this we will have n datasets on D :‚Äú Cn, namely one for each ‚Äúepoch of
understanding‚Äù. Since the category D‚ÄìSet has all colimits, we can take the union of
these datasets and get one. It will have many Skolem variables (see Example 5.1.4.8),
and these need to be handled in a coherent way. However, the universality of left adjoints
could be interpreted as saying that any reasonable formula for handling this old data
can be applied to our results.
‚ô¶‚ô¶
Exercise 5.2.1.3. By Proposition 5.2.1.1, the category C‚ÄìSet is closed under taking limits.
By Exercises 4.5.3.21 and 4.5.3.28, this means in particular that C‚ÄìSet has an initial
object and a terminal object.
a.) Let A P ObpC‚ÄìSetq be the initial object, considered as a functor A: C √ë Set. For
any c P ObpCq, what is the set Apcq?
8Technically C has to be small (see Remark 4.1.1.2), but as we said there, we are not worrying about
that distinction in this book.

5.2. CATEGORIES OF FUNCTORS
219
b.) Let Z P ObpC‚ÄìSetq be the terminal object, considered as a functor Z : C √ë Set. For
any c P ObpCq, what is the set Zpcq?
‚ô¶
Proposition 5.2.1.1 says that we can add or multiply database states together. In
fact, database states on C form what is called a topos which means that just about every
consideration we made for sets holds for instances on any schema. Perhaps the simplest
schema is C ‚Äú
‚Äö , on which the relevant topos is indeed Set.
But schemas can be
arbitrarily complex, and it is impressive that all of these considerations make sense in
such generality. Here is a table that makes a comparison between these domains.
Dictionary between Set and C‚ÄìSet
Concept in Set
Concept in C‚ÄìSet
Set
Object in C‚ÄìSet
Function
Morphism in C‚ÄìSet
Element
Representable functor
Empty set
Initial object
Natural numbers
Natural numbers object
Image
Image
(Co)limits
(Co)limits
Exponential objects
Exponential objects
‚ÄúFamiliar‚Äù arithmetic
‚ÄúFamiliar‚Äù arithmetic
Power sets 2X
Power objects ‚Ñ¶X
Characteristic functions
Characteristic morphisms
Surjections, injections
Epimorphisms, monomorphisms
In the above table we said that elements of a set are akin to representable functors
in C‚ÄìSet, but we have not yet deÔ¨Åned those; we do so in Section 5.2.1.6. First we brieÔ¨Çy
discuss monomorphisms and epimorphisms in general (DeÔ¨Ånition 5.2.1.4) and then in
C‚ÄìSet (Proposition 5.2.1.5).
DeÔ¨Ånition 5.2.1.4 (Monomorphism, Epimorphism). Let S be a category and let f : X √ë
Y be a morphism. We say that f is a monomorphism if it has the following property.
For all objects A P ObpSq and morphisms g, g1 : A √ë X in S,
A
g
"
g1
=X
f
/ Y
if f Àù g ‚Äú f Àù g1 then g ‚Äú g1.
We say that f : X √ë Y is an epimorphism if it has the following property. For all
objects B P ObpSq and morphisms h, h1 : Y √ë B in S,
X
f
/ Y
h
"
h1
=B
if h Àù f ‚Äú h1 Àù f then h ‚Äú h1.

220
CHAPTER 5. CATEGORIES AT WORK
In the category of sets, monomorphisms are the same as injections and epimorphisms
are the same as surjections (see Proposition 2.7.5.4). The same is true in C‚ÄìSet: one
can check ‚Äútable by table‚Äù that a morphism of instances is mono or epi.
Proposition 5.2.1.5. Let C be a category and let X, Y : C √ë Set be objects in C‚ÄìSet
and let f : X √ë Y be a morphism in C‚ÄìSet. Then f is a monomorphism (respectively an
epimorphism) if and only if, for every object c P ObpCq, the function fpcq: Xpcq √ë Y pcq
is injective (respectively surjective).
Sketch of proof. We Ô¨Årst show that if f is mono (respectively epi) then so is fpcq for all
c P ObpCq. Considering c as a functor c: 1 √ë C, this result follows from the fact that ‚àÜc
preserves limits and colimits, hence monos and epis.
We now check that if fpcq is mono for all c P ObpCq then f is mono. Suppose that
g, g1 : A √ë X are morphisms in C‚ÄìSet such that f Àù g ‚Äú f Àù g1. Then for every c we have
f Àù gpcq ‚Äú f Àù g1pcq which implies by hypothesis that gpcq ‚Äú g1pcq. But the morphisms
in C‚ÄìSet are natural transformations, and if two natural transformations g, g1 have the
same components then they are the same.
A similar argument works to show the analogous result for epimorphisms.
‚ñ°
5.2.1.6
Representable functors
Given a category C, there are certain functors C √ë Set that come with the package, one
for every object in C. So if C is a database schema, then for every table c P ObpCq there
is a certain database instance associated to it. These instances, i.e. set-valued functors,
are called representable functors, and they‚Äôll be deÔ¨Åned in DeÔ¨Ånition ??. The idea is
that if a database schema represents a conceptual layout of types (e.g. as an olog), then
each type T has an instance associated to it, standing for ‚Äúthe generic thing of type T
with all its generic attributes‚Äù.
DeÔ¨Ånition 5.2.1.7. Let C be a category and let c P ObpCq be an object. The functor
HomCpc, ¬¥q: C √ë Set, sending d P ObpCq to the set HomCpc, dq and acting similarly
on morphisms d √ë d1, is said to be represented by c.
If a functor F : C √ë Set is
isomorphic to HomCpc, ¬¥q, we say that F is a representable functor. We sometimes write
Yc :‚Äú HomCpc, ¬¥q for short.
Example 5.2.1.8. Given a category C and an object c P ObpCq, we get a representable
functor. If we think of C as a database schema and c as a table, then what does the
representable functor Yc : C √ë Set look like in terms of databases? It turns out that the
following procedure will generate it.
Begin by writing a new row, say ‚Äú,‚Äù, in the ID column of table c. For each foreign
key column f : c √ë c1, add a row in the ID column of table c1 called ‚Äúfp,q‚Äù and record
that result (i.e. ‚Äúfp,q‚Äù) in the f column of table c. Repeat as follows: for each table d,
identify all rows r that have blank cell in column g: d √ë e. Add a new row called ‚Äúgprq‚Äù
to table e and record that result in the pr, gq cell of table d.
Here is a concrete example. Let C be the following schema:
A‚Äö
f
/ B‚Äö
g1
/
g2
/
h 
C‚Äö
i
/ D‚Äö
E‚Äö

5.2. CATEGORIES OF FUNCTORS
221
Then YB : C √ë Set is the following instance
A
ID
f
B
ID
g1
g2
h
,
g1p,q
g2p,q
hp,q
C
ID
i
g1p,q
ipg1p,qq
g2p,q
ipg2p,qq
D
ID
ipg1p,qq
ipg2p,qq
E
ID
hp,q
We began with a single element in table B and followed the arrows, putting new
entries wherever they were required. One might call this the schematically implied ref-
erence spread or SIRS of the element , in table B. Notice that the table at A is empty,
because there are no morphisms B √ë A.
Representable functors Yc yield databases states that are as free as possible, subject
to having the initial row , in table c. We have seen things like this before (by the name
of Skolem variables) when studying the left pushforward Œ£. Indeed, if c P ObpCq is an
object, we can consider it as a functor c: 1 √ë C. A database instance on 1 is the same
thing as a set X. The left pushforward Œ£cpXq has the same kinds of Skolem variables.
If X ‚Äú t,u is a one element set, then we get the representable functor Œ£cpt,uq ‚Äì Yc.
Exercise 5.2.1.9. Consider the schema for graphs,
GrIn :‚Äú
Ar‚Äö
src /
tgt /
Ve‚Äö
a.) Write down the representable functor YAr : GrIn √ë Set as two tables.
b.) Write down the representable functor YVe as two tables.
‚ô¶
Exercise 5.2.1.10. Consider the loop schema
Loop :‚Äú
s‚Äö
f

.
What is the representable functor Ys : Loop √ë Set?
‚ô¶
Let B be a box in an olog, say ‚åúa person‚åù, and recall that an aspect of B is an
outgoing arrow, such as ‚åúa person‚åù
has as height in inches
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë ‚åúan integer‚åù.
The following
slogan explains representable functors in those terms.
Slogan 5.2.1.11.
‚Äú The functor represented by ‚åúa person‚åùsimply leaves a placeholder, like
xperson‚Äôs name herey or xperson‚Äôs height herey, for every aspect of ‚åúa person‚åù.
In general, there is a representable functor for every type in an olog. The
representable functor for type T simply encapsulates the most generic or
abstract example of type T, by leaving a placeholder for each of its attributes.
‚Äù

222
CHAPTER 5. CATEGORIES AT WORK
5.2.1.12
Yoneda‚Äôs lemma
One of the most powerful tools in category theory is Yoneda‚Äôs lemma. It is often consid-
ered by new students to be quite abstract, but grounding it in databases may help.
The idea is this. Suppose that I : C √ë Set is a database instance, and let c P ObpCq
be an object. Because I is a functor, we know that for every row r P Ipcq in table c a
value has been recorded in the f-column, where f : c √ë c1 is any outgoing arrow. The
value in the pr, fq-cell refers to some row in table c1. What we‚Äôre saying is that each row
in table c induces SIRS throughout the database. They may not be ‚ÄúSkolem‚Äù, or in any
sense ‚Äúfreely generated‚Äù, but they are there nonetheless. The point is that to each row
in c there is a unique mapping Yc √ë I.
Lemma 5.2.1.13 (Yoneda‚Äôs lemma, part 1.). Let C be a category, c P ObpCq an object,
and I : C √ë Set a set-valued functor. There is a natural bijection
HomC‚ÄìSetpYc, Iq
‚Äì
√ù√ù√ù√ù√ë Ipcq.
Proof. See [Mac].
‚ñ°
Example 5.2.1.14. Consider the category C drawn below:
C :‚Äú
mother Àù Ô¨ÅrstChild = idMother
Child
‚Äö
mother
/ Mother
‚Äö
Ô¨ÅrstChild
h
There are two representable functors, YChild and YMother. The latter, when written as a
database instance, will consist of a single row in each table. The former, YChild : C √ë Set
is shown here:
Child
ID
mother
,
mother(,)
Ô¨ÅrstChild(mother(,))
mother(,)
Mother
ID
Ô¨ÅrstChild
mother(,)
Ô¨ÅrstChild(mother(,))
The representable functor YChild is the freest instance possible, starting with one element
in the Child table and satisfying the constraints.
Here is another instance I : C √ë Set:
Child
ID
mother
Amy
Ms. Adams
Bob
Ms. Adams
Carl
Ms. Jones
Deb
Ms. Smith
Mother
ID
Ô¨ÅrstChild
Ms. Adams
Bob
Ms. Jones
Carl
Ms. Smith
Deb
Yoneda‚Äôs lemma (5.2.1.13) is about the set of natural transformations YChild √ë I.
Recall from DeÔ¨Ånition 4.3.1.2 that a search for natural transformations can get a bit
tedious.
Yoneda‚Äôs lemma makes the calculation quite trivial.
In our case there are
exactly four such natural transformations, and they are completely determined by where
, goes. In some sense the symbol , represents child-ness in our database.

5.2. CATEGORIES OF FUNCTORS
223
Exercise 5.2.1.15. Consider the schema C and instance I : C √ë Set from Example
5.2.1.14. Let YChild be the representable functor as above.
a.) Let Œ±: YChild √ë I be the natural transformation sending , to Amy.
What is
Œ±ChildpÔ¨ÅrstChild(motherp,qqq? 9
b.) Let Œ±: YChild √ë I be the natural transformation sending , to Bob.
What is
Œ±ChildpÔ¨ÅrstChild(motherp,qqq?
c.) Let Œ±: YChild √ë I be the natural transformation sending , to Carl.
What is
Œ±ChildpÔ¨ÅrstChild(motherp,qqq?
d.) Let Œ±: YChild √ë I be the natural transformation sending , to Deb.
What is
Œ±ChildpÔ¨ÅrstChild(motherp,qqq?
e.) Let Œ±: YChild √ë I be the natural transformation sending , to Amy.
What is
Œ±Motherpmotherp,qq?
‚ô¶
We saw in Section 5.2.1.6 that a representable functor is a mathematically-generated
database instance for an abstract thing of type T.
It creates placeholders for every
attribute that things of type T are supposed to have.
Slogan 5.2.1.16.
‚Äú Yoneda‚Äôs lemma says the following. Specifying an actual thing of type T is
the same as Ô¨Ålling in all placeholders found in the generic thing of type T. ‚Äù
Yoneda‚Äôs lemma is considered by many category theory lovers to be the most im-
portant tool in the subject. While its power is probably unclear to students whose sole
background in category theory comes from this book, Yoneda‚Äôs lemma is indeed ex-
tremely useful for reasoning. It allows us to move the notion of functor application into
the realm of morphisms between functors (i.e. morphisms in C‚ÄìSet, which are natural
transformations). This keeps everything in one place ‚Äî it‚Äôs all in the morphisms ‚Äî and
thus more interoperable.
Example 5.2.1.17. In Example 3.1.1.26, we discussed the cyclic monoid M generated by
the symbol Q and subject to the relation Q7 ‚Äú Q4. We drew a picture like this:
Q0
‚Äö
/ Q1
‚Äö
/ Q2
‚Äö
/ Q3
‚Äö
/ Q4
‚Äö

Q6
‚Äö
A
Q5
‚Äö
o
(5.5)
We are Ô¨Ånally ready to give the mathematical foundation for this picture. Since M is a
category with one object, ‚ñ≤, there is a unique representable functor (up to isomorphism)
Y :‚Äú Y‚ñ≤: M √ë Set. A functor M √ë Set can be thought of as a set with an M-action,
as discussed in Section 4.2.1.1. Here the required set is
Y p‚ñ≤q ‚Äú HomMp‚ñ≤, ‚ñ≤q ‚Äì tQ0, Q1, Q2, Q3, Q4, Q5, Q6u
9There is a lot of clutter, perhaps. Note that ‚ÄúÔ¨ÅrstChild(mother(,))‚Äù is a row in the Child table.
Assuming that the math follows the meaning, if , points to Amy, where should Ô¨ÅrstChild(Mother(,))
point?

224
CHAPTER 5. CATEGORIES AT WORK
and the action is pretty straightforward (it is called the principal action). We might say
that (5.5) is a picture of this principal action of M.
However, we can go one step further. Given a functor Y : M √ë Set, we can take
its category of elements,
≈ü
M Y as in Section 4.6.2.
The category
≈ü
M Y has objects
Y p‚ñ≤q P ObpSetq, i.e. the set of dots in (5.5), and it has a unique morphism Qi √ë Qj for
every path of length ƒè 6 from Qi to Qj in that picture.
Exercise 5.2.1.18. Let c P ObpCq be an object and let I P ObpC‚ÄìSetq be another object.
Consider c also as a functor c: 1 √ë C and recall the pullback functor ‚àÜc : C‚ÄìSet √ë Set
and its left adjoint Œ£c : Set √ë C‚ÄìSet from Section 5.1.4.
a.) What is the set ‚àÜcpIq?
b.) What is HomSetpt,u, ‚àÜcpIqq?
c.) What is HomC‚ÄìSetpŒ£cpt,uq, Iq?
d.) How does Œ£cpt,uq compare to Yc, the functor represented by c, as objects in C‚ÄìSet?
‚ô¶
Lemma 5.2.1.19 (Yoneda‚Äôs lemma, part 2). Let C be a category.
The assignment
c √û√ë Yc from Lemma 5.2.1.13 extends to a functor Y : Cop √ë C‚ÄìSet, and this functor is
fully faithful.
In particular, if c, c1 P ObpCq are objects and there is an isomorphism Yc ‚Äì Yc1 in
C‚ÄìSet, then there is an isomorphism c ‚Äì c1 in C.
Proof. See [Mac].
‚ñ°
Exercise 5.2.1.20. The distributive law for addition of natural numbers says pa`bqÀÜc ‚Äú
a ÀÜ c ` b ÀÜ c. Below we will give a proof of the distributive law, using category-theoretic
reasoning. Annotate anything in red ink with a justiÔ¨Åcation for why it is true.
Proposition 5.2.1.21. For any natural numbers a, b, c P N, the distributive law
pa ` bqc ‚Äú ac ` bc
holds.
Sketch of proof. To Ô¨Ånish, justify red stuÔ¨Ä.
Let A, B, C be Ô¨Ånite sets and let X be another Ô¨Ånite set.
HomSetppA ` Bq ÀÜ C, Xq‚ÄìHomSetpA ` B, XCq
‚ÄìHomSetpA, XCq ÀÜ HomSetpB, XCq
‚ÄìHomSetpA ÀÜ C, Xq ÀÜ HomSetpB ÀÜ C, Xq
‚ÄìHomSetppA ÀÜ Cq ` pB ÀÜ Cq, Xq.
By the appropriate application of Yoneda‚Äôs lemma, we see that there is an isomorphism
pA ` Bq ÀÜ C ‚Äì pA ÀÜ Cq ` pB ÀÜ Cq
in Fin. The result about natural numbers follows.
‚ñ°
‚ô¶

5.2. CATEGORIES OF FUNCTORS
225
5.2.1.22
The subobject classiÔ¨Åer ‚Ñ¶P ObpC‚ÄìSetq
If C is a category then the functor category C‚ÄìSet is a very nice kind of category, called
a topos. Note that when C ‚Äú 1 is the terminal category, then we have an isomorphism
C‚ÄìSet ‚Äì Set, so the category of sets is a special case of a topos. What is so interesting
about toposes (or topoi) is that they so nicely generalize many properties of Set. In this
short section we investigate only one such property, namely that C‚ÄìSet has a subobject
classiÔ¨Åer, denoted ‚Ñ¶P ObpC‚ÄìSetq. In the case C ‚Äú 1, we saw back in Section 2.7.4.9
that the subobject classiÔ¨Åer is tTrue, Falseu P ObpSetq.
As usual, we consider the matter of subobject classiÔ¨Åers by grounding the discussion
in terms of databases.
DeÔ¨Ånition 5.2.1.23. Let C be a category, let C‚ÄìSet denote its category of instances,
and let 1 P ObpC‚ÄìSetq denote the terminal object. A subobject classiÔ¨Åer for C‚ÄìSet is an
object ‚Ñ¶C P ObpC‚ÄìSetq and a morphism t: 1 √ë ‚Ñ¶C with the following property. For any
monomorphism f : X √ë Y in C‚ÄìSet, there exists a unique morphism charpfq: Y √ë ‚Ñ¶C
such that the following diagram is a pullback in C‚ÄìSet:
X
!
/
f

‚åü
1
t

Y
charpfq
/ ‚Ñ¶C
In terms of databases, what this means is that for every schema C there is some special
instance ‚Ñ¶C P ObpC‚ÄìSetq that somehow classiÔ¨Åes sub-instances. When our schema is
the terminal category, C ‚Äú 1, instances are sets and we saw in DeÔ¨Ånition 2.7.4.9 that the
subobject classiÔ¨Åer is ‚Ñ¶1 ‚Äú tTrue, Falseu. One might think that the subobject classiÔ¨Åer
for C‚ÄìSet should just consist of a two-element set table-by-table, i.e. that for every
c P ObpCq we should have ‚Ñ¶C ‚Äú? tTrue, Falseu, but this is not correct.
In fact, for any object c P ObpCq, it is easy to say what ‚Ñ¶Cpcq should be. We know
by Yoneda‚Äôs lemma (Lemma 5.2.1.13) that ‚Ñ¶Cpcq ‚Äú HomC‚ÄìSetpYc, ‚Ñ¶Cq, where Yc is the
functor represented by c. There is a bijection between HomC‚ÄìSetpYc, ‚Ñ¶Cq and the set of
sub-instances of Yc. Each morphism f : c √ë d in C induces a morphism Yf : Yd √ë Yc,
and the map ‚Ñ¶Cpfq: ‚Ñ¶Cpcq √ë ‚Ñ¶Cpdq sends a sub-instance A ƒé Yc to the pullback
Y ¬¥1
f
pAq
/

‚åü
A

Yd
Yf
/ Yc
But this is all very abstract. We now give an example of a subobject classiÔ¨Åer.
Example 5.2.1.24. Consider the category C ‚Äì r3s depicted below
C :‚Äú
‚úì
0‚Äö
after 1
/
after 2
7
after 3
$
1‚Äö
after 1
/
after 2
7
2‚Äö
after 1
/ 3‚Äö
‚úì
‚úì

226
CHAPTER 5. CATEGORIES AT WORK
To write down ‚Ñ¶C we need to understand the representable functors Yc P ObpC‚ÄìSetq,
for c ‚Äú 0, 1, 2, 3, as well as their subobjects. Here is Y0 as an instance:
Y0p0q
ID
after 1
after 2
after 3
,
after 1(,)
after 2(,)
after 3(,)
Y0p1q
ID
after 1
after 2
after 1p,q
after 2p,q
after 3p,q
Y0p2q
ID
after 1
after 2p,q
after 3p,q
Y0p3q
ID
after 3p,q
What are the sub-instances of this? There is the empty sub-instance H ƒé Y0 and the
identity sub-instance Y0 ƒé Y0. But there are three more as well. Note that if we want
to keep the , row of table 0 then we have to keep everything. But if we throw away the
, row of table 0 we can still keep the rest and get a sub-instance. If we want to keep
the after 1p,q row of table 1 then we have to keep its images in tables 2 and 3. But we
could throw away both the , row of table 0 and the after 1p,q row of table 1 and still
keep the rest. And so on. In other words, the subobjects of Y0 are in bijection with the
set ‚Ñ¶Cp0q :‚Äú tyes, in 1, in 2, in 3, neveru.
The same analysis holds for the other tables of ‚Ñ¶C. It looks like this:
‚Ñ¶Cp0q
ID
after 1
after 2
after 3
yes
yes
yes
yes
in 1
yes
yes
yes
in 2
in 1
yes
yes
in 3
in 2
in 1
yes
never
never
never
never
‚Ñ¶Cp1q
ID
after 1
after 2
yes
yes
yes
in 1
yes
yes
in 2
in 1
yes
never
never
never
‚Ñ¶Cp2q
ID
after 1
yes
yes
in 1
yes
never
never
‚Ñ¶Cp3q
ID
yes
never
The morphism 1 √ë ‚Ñ¶C picks out the yes row of every table.
Now that we have constructed ‚Ñ¶C P ObpC‚ÄìSetq, we are ready to see it in action.
What makes ‚Ñ¶C special is that for any instance X : C √ë Set, the subinstances if X
are in one-to-one correspondence with the morphisms X √ë ‚Ñ¶C. Consider the following
arbitrary instance X, where the blue rows denote a sub-instance A ƒé X.
Xp0q
ID
after 1
after 2
after 3
a1
b1
c1
d1
a2
b2
c1
d1
a3
b2
c1
d1
a4
b3
c2
d2
a5
b5
c3
d1
Xp1q
ID
after 1
after 2
b1
c1
d1
b2
c1
d1
b3
c2
d2
b4
c1
d1
b5
c3
d1
Xp2q
ID
after 1
c1
d1
c2
d2
c3
d1
Xp3q
ID
d1
d2
(5.6)

5.2. CATEGORIES OF FUNCTORS
227
This blue sub-instance A ƒé X corresponds to a map charpAq: X √ë ‚Ñ¶C. That is for
each c P ObpCq the rows in the c-table of X are sent to the rows in the c-table of ‚Ñ¶C.
The way charpAq works is as follows. For each table i and row x P Xpiq, Ô¨Ånd the Ô¨Årst
column f in which the entry is blue (i.e. fpxq P A), and send x to the corresponding
element of ‚Ñ¶Cpiq. For example, charpAqp0q sends a1 to in 2 and sends a4 to never, and
charpAqp2q sends c1 to yes and sends c2 to never.
Exercise 5.2.1.25. a.) Write out the blue subinstance A ƒé X shown in (5.6) as an in-
stance of C, i.e. as four tables.
b.) This subinstance A ƒé X corresponds to a map ‚Ñì:‚Äú charpAq: X √ë ‚Ñ¶C. For all c P
ObpCq we have a function ‚Ñìpcq: Xpcq √ë ‚Ñ¶Cpcq. With c ‚Äú 1, write out ‚Ñìp1q: Xp1q √ë
‚Ñ¶Cp1q.
‚ô¶
Exercise 5.2.1.26. Let Loop be the loop schema
Loop ‚Äú
s‚Äö
f

.
a.) What is the subobject classiÔ¨Åer ‚Ñ¶Loop P ObpLoop‚ÄìSetq?
b.) How does ‚Ñ¶Loop compare to the representable functor Ys?
‚ô¶
Exercise 5.2.1.27. Let GrIn ‚Äú
Ar‚Äö
src /
tgt /
Ve‚Äö
be the indexing category for graphs.
a.) Write down the subobject classiÔ¨Åer ‚Ñ¶GrIn P ObpGrIn‚ÄìSetq in tabular form, i.e. as
two tables.
b.) Draw ‚Ñ¶GrIn as a graph.
c.) Let G be the graph below and G1 ƒé G the blue part.
w‚Äö
f
 
g
/
h 
x‚Äö
y‚Äö
j
M
i
/ z‚Äö
Write down G P ObpGrIn‚ÄìSetq in tabular form.
d.) Write down the components of the natural transformation charpG1q: G √ë ‚Ñ¶GrIn.
‚ô¶
5.2.2
Database instances in other categories
5.2.2.1
Representations of groups
The classical mathematical subject of representation theory is the study of FunpG, Vectq
where G is a group and Vect is the category of vector spaces (over say R). Every such

228
CHAPTER 5. CATEGORIES AT WORK
functor F : G √ë Vect is called a representation of G. Since G is a category with one
object ‚ñ≤, F consists of a single vector space V ‚Äú Fp‚ñ≤q together with an action of G on
it.
We can think of this in terms of databases if we have a presentation of G in terms of
generators and relations. The schema corresponding to G has one table and this table
has a column for each generator. Giving a representation F is the same as giving an
instance on our schema, with some properties that stem from the fact that our target
category is Vect rather than Set. There are many possibilities for expressing 10 such
data.
One possibility is if we could somehow draw V , say if V is 1-, 2-, or 3-dimensional.
If so, let P be our chosen picture of V , e.g. P is the standard drawing of a Cartesian
coordinate plane. Then every column of our table would consist entirely of the picture
P instead of a set of rows. Drawing a point in the ID-column picture would result in
a point being drawn in each other column‚Äôs picture, in accordance with the G-action.
Each column would of course respect addition and scalar multiplication.
Another possibility is to use the fact that there is a functor U : Vect √ë Set, so our
instance F : G √ë Vect can be converted to an ordinary instance U Àù F : G √ë Set. We
would have an ordinary set of rows. This set would generally be inÔ¨Ånite, but it would
be structured by addition and scalar multiplication. For example, assuming V is Ô¨Ånite
dimensional, one could Ô¨Ånd a few rows that generated the rest.
A third possibility is to use monads, which allow the table to have only as many rows
as V has dimensions. This is a considerable savings of space. See Section 5.3.
5.2.2.2
Representations of quivers
Representation theory also studies representations of quivers. A quiver is just the free
category (see Example 4.1.2.30) on a graph. If P is a graph with free category P then a
representation of the quiver P is a functor F : P √ë Vect. Such a representation consists
of a vector space at every vertex of P and a linear transformation for every arrow. All of
the discussion from Section 5.2.2.1 works in this setting, except that there is more than
one table.
5.2.2.3
Other target categories
One can imagine the value of using target categories other than Set or Vect for databases.
Application 5.2.2.4. Geographic data consists of maps of the earth together with various
functions on it. For example for any point on the earth one may want to know the
average temperature recorded in the past 10 years, or the precise temperature at this
moment. Earth can be considered as a topological space, E. Similarly, temperatures
on earth reside on a continuum, say the space T of real numbers r¬¥100, 200s. Thus the
temperature record is a function E √ë T.
Other records such as precipitation, population density, elevation, etc. can all be
considered as continuous functions from E to some space. Agencies like the US Geological
Survey hold databases of such information. By modeling them on functors C √ë Top,
they may be able to employ mathematical tools such as persistent homology [WeS] to
Ô¨Ånd interesting invariants of the data.
‚ô¶‚ô¶
10We would use the term ‚Äúrepresenting‚Äù or ‚Äùpresenting‚Äù, but they are both taken in the context of
our narrative!

5.2. CATEGORIES OF FUNCTORS
229
Application 5.2.2.5. Many other scientiÔ¨Åc disciplines could use the same kind of tool. For
example, in studying the mechanics of materials, one may want to consider the material
as a topological space M and measure values such as energy as a continuous M √ë E.
Such observations could be modeled by databases with target category Top or Vect
rather than Set.
‚ô¶‚ô¶
5.2.3
Sheaves
Let X be a topological space (see Example 4.2.3.1), such as a sphere. In Section 5.2.2.3
we discussed continuous functions out of X, and their use in science (e.g. recording
temperatures on the earth as a continuous map X √ë r¬¥100, 200s). Sheaves allow us to
consider the local-global nature of such maps, taking into account reparable discrepancies
in data gathering tools.
Application 5.2.3.1. Suppose that X is the topological space corresponding to the earth;
by a region we mean an open subset U ƒé X. Suppose that we cover X with 10,000 regions
U1, U2, . . . , U10000, such that some of the regions overlap in a non-empty subregion (e.g.
perhaps U5 X U9 ‚Ä∞ Hq. For each i, j let Ui,j ‚Äú Ui X Uj.
For each region Ui ƒé X we have a temperature recording device, which gives a
function Ti : Ui √ë r¬¥100, 200s. If Ui X Uj ‚Ä∞ H then two diÔ¨Äerent recording devices
give us temperature data for the intersection Ui,j. Suppose we Ô¨Ånd that they do not give
precisely the same data, but that there is a translation formula between their results. For
example, Ti might register 3Àù warmer than Tj registers, throughout the region Ui X Uj.
A consistent system of translation formulas is called a sheaf. It does not demand a
universal ‚Äútrue‚Äù temperature function, but only a consistent translation system between
them.
‚ô¶‚ô¶
The following deÔ¨Ånitions (DeÔ¨Ånitions 5.2.3.2, 5.2.3.5) make the notion of sheaf precise,
but we must go slowly (because it will already feel quick to the novice). For every region
U, we can record the value of some function (say temperature) throughout U; although
this record might consist of a mountain of data (a temperature for each point in U!),
we think of it as one thing. That is, it is one element in the set of value-assignments
throughout U. A sheaf holds the set of possible values-assignments-throughout-U‚Äôs for
all the diÔ¨Äerent regions U, as well as how a value-assignment-throughout-U restricts to
a value-assignment-throughout-V for any subset V ƒé U.
DeÔ¨Ånition 5.2.3.2. Let X be a topological space, let OpenpXq denote its partial order
of open sets, and let OpenpXqop be the opposite category. A presheaf on X is a functor
O: OpenpXqop √ë Set. For every open set U ƒé X we refer to the set OpUq as the set
of values-assignments throughout U of O. If V ƒé U is an open subset, it corresponds to
an arrow in OpenpXq and applying the functor O yields a function called the restriction
map from U to V and denoted œÅV,U : OpUq √ë OpV q. Given a P OpUq, we may denote
œÅV,Upaq by a|V ; it is called the restriction of a to V .
The category of presheaves on X is simply OpenpXqop‚ÄìSet; see DeÔ¨Ånition 4.3.3.1.
Exercise 5.2.3.3.
a.) Come up with 4 overlapping open subsets that cover the square X :‚Äú r0, 3sÀÜr0, 3s ƒé
R2. Write down a label for each open set as well as a label for each overlap (2-fold,
3-fold, etc.); you now have labeled n open sets. For each of these open sets, draw

230
CHAPTER 5. CATEGORIES AT WORK
a dot with the appropriate label, and then draw an arrow from one dot to another
when the Ô¨Årst refers to an open subset of the second. This is a preorder; call it
OpenpXq. Now make up and write down formulas R1 : X √ë R and R2 : X √ë R with
R1 ƒè R2, expressing a range of temperatures R1ppq ƒè x ƒè R2ppq that an imaginary
experiment shows can exist at each point p in the square.
b.) Suppose we now tried to make our presheaf O: OpenpXqop √ë Set as follows. For
each of your open sets, say A, we could put
OpAq :‚Äú tf : A √ë R | R1paq ƒè fpaq ƒè R2paqu.
What are the restriction maps? Do you like the name ‚Äúvalue-assignment throughout
A‚Äù for elements of OpAq?
c.) We can now make another presheaf O1 given the same experiment. For each of your
open sets, say A, we could put
O1pAq :‚Äú tf : A √ë R | f is continuous, and R1paq ƒè fpaq ƒè R2paqu.
Are you comfortable with the idea that there is a morphism of presheaves O1 √ë O?
‚ô¶
Before we deÔ¨Åne sheaves, we need to clarify the notion of covering. Suppose that U
is a region and that V1, . . . , Vn are subregions (i.e. for each 1 ƒè i ƒè n we have Vi ƒé U).
Then we say that the Vi cover U if every point in U is in Vi for some i. Another way to
say this is that the natural function \iVi √ë U is surjective.
Example 5.2.3.4. Let X ‚Äú R be the space of real numbers, and deÔ¨Åne the following open
subsets: U ‚Äú p5, 10q, V1 ‚Äú p5, 7q, V2 ‚Äú p6, 9q, V3 ‚Äú p7, 10q. 11 Then V1, V2, V3 is a cover of
U. It has overlaps V12 ‚Äú V1 X V2 ‚Äú p6, 7q, V13 ‚Äú V1 X V3 ‚Äú H, V23 ‚Äú V2 X V3 ‚Äú p7, 9q.
Given a presheaf O: OpenpXqop √ë Set, we have sets and functions as in the following
(incomplete) diagram
OpV1q
)
OpV1 X V2q
OpUq
>
/
 
OpV2q
5
)
OpV2 X V3q
OpV3q
5
A presheaf O on X tells us what value-assignments throughout U can exist for each
U. Suppose we have a value-assignment a P OpUq throughout U and another value-
assignment a1 P OpU 1q throughout U 1, and suppose that they agree as value-assignments
throughout U X U 1, i.e. a|UXU1 ‚Äú a1|UXU1. In this case we should have a unique value-
assignment b P OpU Y U 1q throughout U Y U 1 that agrees on the U-part with a and
agrees on the U 1-part with a1; i.e. b|U ‚Äú a and b|U 1 ‚Äú a1. This is the sheaf condition.
11We use parentheses to denote open intervals of real numbers. For example p6, 9q denotes the set
tx P R | 6 ƒÉ x ƒÉ 9u.

5.2. CATEGORIES OF FUNCTORS
231
DeÔ¨Ånition 5.2.3.5. Let X be a topological space, let OpenpXq be its partial order of
open sets, and let O: OpenpXqop √ë Set be a presheaf. Given an open set U ƒé X and a
cover V1, . . . , Vn of U, the following condition is called the sheaf condition for that cover.
Sheaf condition Given a sequence a1, . . . , an where each is a value-assignment ai P
OpViq throughout Vi, suppose that for all i, j we have ai|ViXVj ‚Äú aj|ViXVj; then
there is a unique value-assignment b P OpUq such that b|Vi ‚Äú ai.
The presheaf O is called a sheaf if it satisÔ¨Åes the sheaf condition for every cover.
Example 5.2.3.6. Let X ‚Äú R and let U, V1, V2, V3 be the open cover given in Example
5.2.3.4. Given a measurement taken throughout V1, a measurement taken throughout
V2, and a measurement taken throughout V3, we have elements a1 P OpV1q, a2 P OpV2q,
and a3 P OpV3q. If they are in agreement on the overlap intervals, we can glue them to
give a measurement throughout U.
Remark 5.2.3.7. In Application 5.2.3.1, we said that sheaves would help us patch together
information from diÔ¨Äerent sources. Even if diÔ¨Äerent temperature-recording devices Ti
and Tj registered diÔ¨Äerent temperatures on an overlapping region Ui X Uj, we said they
could be patched together if there was a consistent translation system between their
results. What is actually needed is a set of isomorphisms
pi,j : Ti|Ui,j
‚Äì
√ù√ë Tj|Ui,j
that translate between them, and that these pi,j‚Äôs act in concert with one another. This
(when precisely deÔ¨Åned,) is called descent data.. The way it interacts with our deÔ¨Ånition
of sheaf given in DeÔ¨Ånitions 5.2.3.2 and 5.2.3.5 is buried in the restriction maps œÅ for the
overlaps as subsets Ui,j ƒé Ui and Ui,j ƒé Uj. We will not explain further here. One can
see [Gro].
Application 5.2.3.8. Consider outer space as a topological space X. DiÔ¨Äerent astronomers
record observations. Let C ‚Äú r390, 700s denote the set of wavelengths in the visible light
spectrum (written in nanometers). Given an open subset U ƒé X let OpUq denote the
set of functions U √ë C. The presheaf O satisÔ¨Åes the sheaf condition; this is the taken-
for-granted fact that we can patch together diÔ¨Äerent observations of space.
Below are three views of the night sky. Given a telescope position to obtain the Ô¨Årst
view, one moves the telescope right and a little down to obtain the second and one moves
it down and left to obtain the third. 12
12Image credit: NASA, ESA, Digitized Sky Survey Consortium.

232
CHAPTER 5. CATEGORIES AT WORK
These are value-assignments a1 P OpV1q, a2 P OpV2q, and a3 P OpV3q throughout subsets
V1, V2, V3 ƒé X (respectively). These subsets V1, V2, V3 cover some (strangely-shaped)
subset U ƒé X. The sheaf condition says that these three value-assignments glue together
to form a single value-assignment throughout U:

5.2. CATEGORIES OF FUNCTORS
233
‚ô¶‚ô¶
Exercise 5.2.3.9. Find an application of sheaves in your own domain of expertise.
‚ô¶
Application 5.2.3.10. Suppose we have a sheaf for temperatures on earth.
For every
region U we have a set of theoretically possible temperature-assignments throughout U.
For example we may know that if it is warm in Texas, warm in Arkansas, and warm
in Kansas, then it cannot be cold in Oklahoma. With such a sheaf O in hand, one can
use facts about the temperature in one region U to predict the temperature in another
region V .
The mathematics is as follows. Suppose given regions U, V ƒé X and a subset A ƒé
OpUq corresponding to what we know about the temperature assignment throughout U.
We take the following Ô¨Åber product
pœÅU,Xq¬¥1pAq
‚åü
/

OpXq
œÅU,X

œÅV,X / OpV q
A
/ OpUq
The image of the top map is a subset of OpV q telling us which temperature-assignments
are possible throughout V given our knowledge A about the temperature throughout U.
We can imagine the same type of prediction systems for other domains as well, such
as the energy of various parts of a material.
‚ô¶‚ô¶
Example 5.2.3.11. In Exercises 4.2.4.3 and 4.2.4.4 we discussed the idea of laws being
dictated or respected throughout a jurisdiction.
If X is earth, to every jurisdiction
U ƒé X we assign the set OpUq of laws that are dictated to hold throughout U. Given
a law on U and a law on V , we can see if they amount to the same law on U X V . For
example, on U a law might say ‚Äúno hunting near rivers‚Äù and on V a law might say ‚Äúno
hunting in public areas‚Äù. It just so happens that on U XV all public areas are near rivers
and vice versa, so the laws agree there. These laws patch together to form a single rule
about hunting that is enforced throughout the union U YV , respected by all jurisdictions
within it.

234
CHAPTER 5. CATEGORIES AT WORK
5.2.3.12
Sheaf of ologged concepts
DeÔ¨Ånition 5.2.3.5 deÔ¨Ånes what should be called a sheaf of sets. We can discuss sheaves
of groups or even sheaves of categories. Here is an application of the latter.
Recall the notion of simplicial complexes discussed in Section 2.7.4.3. They look like
this:
(5.7)
Given such a simplicial complex X, we can imagine each vertex v P X0 as an entity with
a worldview (e.g. a person) and each simplex as the common worldview shared by its
vertices. To model this, we will assign to each vertex v P X an olog Opvq, corresponding
to the worldview held by that entity, and to each simplex u P Xn, we assign an olog Opuq
corresponding to a common ground worldview.. Recall that X is a subset of PpX0q; it is
a preorder and its elements (the simplices) are ordered by inclusion. If u, v are simplices
with u ƒé v then we want a map of ologs (i.e.
a schema morphism) Opvq √ë Opuq
corresponding to how any idea that is shared among the people in v is shared among
the people in u. Thus we have a functor O: X √ë Sch (where we are forgetting the
distinction between ologs and databases for notational convenience).
To every simplicial complex (indeed every ordered set) one can associate a topological
space; in fact we have a functor Alx: PrO √ë Top, called the Alexandrov functor.
Applying AlxpXopq we have a space which we denote by X. One can visualize X as X,
but the open sets include unions of simplices. There is a unique sheaf of categories on
X that behaves like X on simplices.
How does this work in the case of our sheaf O of worldviews? For simplices such as
pAq or pCIq, the sheaf returns the olog corresponding to that person or shared worldview.
But for open sets like the union of pCIJq and pIJKq, what we get is the olog consisting
of the types shared by C, I, and J for which I and J aÔ¨Érm agreement with types shared
by I, J, and K.
Example 5.2.3.13. Imagine two groups of people G1 and G2 each making observations
about the world. Suppose that there is some overlap H ‚Äú G1 XG2. Then it may happen
that there is a conversation including G1 and G2 and both groups are talking about
something and, although using diÔ¨Äerent words, H says ‚Äúyou guys are talking about the

5.3. MONADS
235
same things, you just use diÔ¨Äerent words.‚Äù In this case there is an object-assignment
throughout G1 Y G2 that agrees with both those on G1 and those on G2.
5.2.3.14
Time
One can use sheaves to model objects in time; Goguen gave an approach to this in [Gog].
For another approach, let C be a database schema. The lifespan of information about the
world is generally Ô¨Ånite; that is, what was true yesterday is not always the case today.
Thus we can associate to each interval U of time the information that we deem to hold
throughout U. This is sometimes called the valid time of the data.
If something is the case throughout U and we have a subset V ƒé U then of course
it is the case throughout V . And the sheaf condition holds too: if some information
holds throughout U and some other information holds throughout U 1, and if these two
things restrict to the same information on the overlap U X V , then they can be glued to
information that holds throughout the union U Y V .
So we can model information-change over time by using a sheaf of C-sets on the
topological space R. One way to think of this is simply as an instance on the schema
C ÀÜ OpenpRqop. The sheaf condition is just an added property that our instances have
to obey.
Example 5.2.3.15. Consider a hospital in which babies are born. In our scenario, mothers
enter the hospital, babies are born, mothers and babies leave the hospital. Let C be the
schema
c
a baby
was birthed by
/
m
a mother
Consider the 8-hour intervals
Shift1 :‚Äú pJan 1 ¬¥ 00 : 00, Jan 1 ¬¥ 08 : 00q,
Shift2 :‚Äú pJan 1 ¬¥ 04 : 00, Jan 1 ¬¥ 12 : 00q,
Shift3 :‚Äú pJan 1 ¬¥ 8 : 00, Jan 1 ¬¥ 16 : 00q.
The nurses take shifts of 8 hours, overlapping with their predecessors by 4 hours, and they
record in the database only patients that were there throughout their shift or throughout
any overlapping shift. A mother might be in the hospital throughout shift 1, arriving
before the new year. A baby is born at 05:00 on Jan 1, and thus does not make it into
the Shift1-table, but does make it into the pShift1 X Shift2q-table. The two are there
until 17:00 on Jan 1, and so they are recorded in the Shift2 and Shift3 tables.
Whether or not this implementation of the sheaf semantics is most useful in practice
is certainly debatable. But something like this could easily be useful as a semantics, i.e.
a way of thinking about, the temporal nature of data.
5.3
Monads
Monads would probably not have been invented without category theory, but they have
been quite useful in formalizing algebra, calculating invariants of topological spaces, and
imbedding non-functional operations into functional programming languages. We will
mainly discuss monads in terms of how they can help us make modeling contexts explicit,
and in so doing allow us to simplify the language we use in the model.
Much of the following material on monads is taken from [Sp3].

236
CHAPTER 5. CATEGORIES AT WORK
5.3.1
Monads formalize context
Monads can formalize assumptions about the way one will do business throughout a
domain. For example, suppose that we want to consider functions that do not have to
return a value for all inputs. Such partial functions can be composed. Indeed, given a
partial function f : A √ë B and a partial function g: B √ë C, one gets a partial function
g Àù f : A √ë C in an obvious way.
Here we are drawing arrows as though we are talking about functions, but there is an
implicit context in which we are actually talking about partial functions. Monads allow
us to write things in the ‚Äúfunctional‚Äù way while holding the underlying context. What
makes them useful is that the notion of context we are using here is made formal.
Example 5.3.1.1 (Partial functions). Partial functions can be modeled by ordinary func-
tions, if we add a special ‚Äúno answer‚Äù element to the codomain. That is, the set of
partial functions A √ë B is in one-to-one correspondence with the set of ordinary func-
tions A √ë B \ t,u.
For example, suppose we want to model the partial function
fpxq :‚Äú
1
x2¬¥1 : R √ë R in this way, we would use the function
fpxq :‚Äú
$
‚Äô
&
‚Äô
%
1
x2¬¥1
if x ‚Ä∞ ¬¥1 and x ‚Ä∞ 1,
,
if x ‚Äú ¬¥1,
,
if x ‚Äú 1.
An ordinary function f : A √ë B can be considered a partial function because we can
compose with the inclusion
B √ë B \ t,u
(5.8)
But how do we compose two partial functions written in this way? Suppose f : A √ë
B \ t,u and g: B √ë C \ t,u are functions. First form a new function
g1 :‚Äú g \ t,u: B \ t,u √ë C \ t,u \ t,u
(5.9)
then compose to get pg1 Àù fq: A √ë C \ t,u \ t,u, and Ô¨Ånally send both ,‚Äôs to the same
element by composing with
C \ t,u \ t,u √ë C \ t,u.
(5.10)
What does this mean? Every element a P A is sent by f to either an element b P B
or ‚Äúno answer‚Äù. If it has an answer fpaq P B, this is either sent by g to an element
gpfpaqq P C or to ‚Äúno answer‚Äù. We get a partial function A √ë C by sending a to gpfpaqq
if possible or to ‚Äúno answer‚Äù if it gets stopped along the way.
This monad is sometimes called the maybe monad in computer science, because a
partial function f : A √ë B takes every element of A and either outputs just an element
of B or outputs nothing; more succinctly, it outputs a ‚Äúmaybe B‚Äù.
Application 5.3.1.2. Experiments are supposed to be performed objectively, but suppose
we imagine that changing the person who performs the experiment, say in psychology,
may change the outcome. Let A be the set of experimenters, let X be the parameter space
for the experimental variables (e.g. X ‚Äú Age ÀÜ Income) and let Y be the observation
space (e.g. Y ‚Äú propensity for violence). Then whereas we want to think of such an
experiment as telling us about a function f : X √ë Y , we may want to make some of the
context explicit by including information about who performed the experiment. That is,
we are really Ô¨Ånding a function f : X ÀÜ A √ë Y .

5.3. MONADS
237
However, it may be the case that even ascertaining someones age or income, which
is done by asking that person, is subject to who in A is doing the asking, and so we
again want to consider the experimenter as part of the equation. In this case, we can
use a monad to hide the fact that everything in sight is assumed to be inÔ¨Çuenced by
A. In other words, we want to announce once and for all our modeling context‚Äîthat
every observable is possibly inÔ¨Çuenced by the observer‚Äîso that it can recede into the
background.
We will return to this in Examples 5.3.2.6 and 5.3.3.4.
‚ô¶‚ô¶
5.3.2
DeÔ¨Ånition and examples
What aspects of Example 5.3.1.1 are really about monads, and what aspects are just
about partial functions in particular? It is a functor and a pair of natural transformations
that showed up in (5.9), (5.8), and (5.10). In this section we will give the deÔ¨Ånition and
a few examples. We will return to our story about how monads formalize context in
Section 5.3.3.
DeÔ¨Ånition 5.3.2.1 (Monad). A monad on Set is deÔ¨Åned as follows: One announces
some constituents (A. functor, B. unit map, C. multiplication map) and asserts that they
conform to some laws (1. unit laws, 2. associativity law). SpeciÔ¨Åcally, one announces
A. a functor T : Set √ë Set,
B. a natural transformation Œ∑: idSet √ë T, and
C. a natural transformation ¬µ: T Àù T √ë T
We sometimes refer to the functor T as though it were the whole monad; we call Œ∑ the
unit map and we call ¬µ the multiplication map. One asserts that the following laws hold:
1. The following diagrams of functors Set √ë Set commute:
T Àù idSet
idT ÀõŒ∑ /
‚Äú
%
T Àù T
¬µ

T
idSet Àù T
Œ∑ÀõidT /
‚Äú
%
T Àù T
¬µ

T
2. The following diagram of functors Set √ë Set commutes:
T Àù T Àù T
¬µÀõidT /
idT Àõ¬µ

T Àù T
¬µ

T Àù T
¬µ
/ T
Example 5.3.2.2 (List monad). We now go through DeÔ¨Ånition 5.3.2.1 using what is called
the List monad. The Ô¨Årst step is to give a functor List: Set √ë Set, which we did in
Example 4.1.2.18. Recall that if X ‚Äú tp, q, ru then ListpXq includes the empty list r s,
singleton lists, such as rps, and any other list of elements in X, such as rp, p, r, q, ps. Given

238
CHAPTER 5. CATEGORIES AT WORK
a function f : X √ë Y , one obtains a function Listpfq: ListpXq √ë ListpY q by entry-wise
application of f.
As a monad, the functor List comes with two natural transformations, a unit map
Œ∑ and a multiplication map ¬µ. Given a set X, the unit map Œ∑X : X √ë ListpXq returns
singleton lists as follows
X
Œ∑X
/ ListpXq
p 
/ rps
q 
/ rqs
r 
/ rrs
Given a set X, the multiplication map ¬µX : ListpListpXqq √ë ListpXq Ô¨Çattens lists of lists
as follows.
ListpListpXqq
¬µX
/ ListpXq
‚Äú
rq, p, rs, rs, rq, r, p, rs, rrs
‚Ä∞ 
/ rq, p, r, q, r, p, r, rs
The naturality of Œ∑ and ¬µ just mean that these maps work appropriately well under
term-by-term replacement by a function f : X √ë Y . Finally the three monad laws from
DeÔ¨Ånition 5.3.2.1 can be exempliÔ¨Åed as follows:
rp, q, qs  idListÀùŒ∑ / ‚Äú
rps, rqs, rqs
‚Ä∞
_
¬µ

rp, q, qs
rp, q, qs  Œ∑ÀùidList / ‚Äú
rp, q, qs
‚Ä∞
_
¬µ

rp, q, qs
‚Äù‚Äú
rp, qs, rrs
‚Ä∞
,
‚Äú
rs, rr, q, qs
‚Ä∞ƒ±  ¬µÀùidList /
_
idListÀù¬µ

‚Äú
rp, qs, rrs, rs, rr, q, qs
‚Ä∞
_
¬µ

‚Äú
rp, q, rs, rr, q, qs
‚Ä∞ 
¬µ
/ rp, q, r, r, q, qs
Exercise 5.3.2.3. Let P: Set √ë Set be the powerset functor, so that given a function
f : X √ë Y the function Ppfq: PpXq √ë PpY q is given by taking images.
a.) Make sense of the following statement: ‚Äúwith Œ∑ deÔ¨Åned by singleton subsets and with
¬µ deÔ¨Åned by union, J :‚Äú pP, Œ∑, ¬µq is a monad‚Äù.
b.) With X ‚Äú ta, bu, write down the function Œ∑X as a 2-row, 2-column table, and write
down the function ¬µX as a 16-row, 2-column table (you can stop after 5 rows if you
fully get it).
c.) Check that you believe the monad laws from DeÔ¨Ånition 5.3.2.1.

5.3. MONADS
239
‚ô¶
Example 5.3.2.4 (Partial functions as a monad). Here is the monad for partial functions.
The functor T : Set √ë Set sends a set X to the set X \ t,u. Clearly, given a function
f : X √ë Y there is an induced function f \ t,u: X \ t,u √ë Y \ t,u, so this is a
functor. The natural transformation Œ∑: id √ë T is given on a set X by the component
function
Œ∑X : X √ë X \ t,u
that includes X √£√ë X \ t,u. Finally, the natural transformation ¬µ: T Àù T √ë T is given
on a set X by the component function
¬µX : X \ t,u \ t,u √ù√ë X \ t,u
that collapses both copies of ,.
Exercise 5.3.2.5. Let E be a set, elements we will refer to as exceptions. We imagine
that a function f : X √ë Y either outputs a value or one of these exceptions, which might
be things like ‚ÄúoverÔ¨Çow!‚Äù or ‚Äúdivision by zero!‚Äù, etc. Let T : Set √ë Set be the functor
X √û√ë X\E. Follow Example 5.3.2.4 and come up with a unit map Œ∑ and a multiplication
map ¬µ for which pT, Œ∑, ¬µq is a monad.
‚ô¶
Example 5.3.2.6. Fix a set A. Let T : Set √ë Set be given by TpXq ‚Äú XA ‚Äú HomSetpA, Xq;
this is a functor. For a set X, let Œ∑X : X √ë TpXq be given by the constant function,
x √û√ë cx : A √ë X where cxpaq ‚Äú x for all a P A. To specify a function
¬µX : HomSetpA, TpXqq √ë HomSetpA, Xq,
we curry and need a function AÀÜHomSetpA, TpXqq √ë X. We have an evaluation function
(see Exercise 2.7.2.5) ev: A ÀÜ HomSetpA, TpXqq √ë TpXq, and we have an identity func-
tion idA : A √ë A, so we have a function pidAÀÜevq: AÀÜHomSetpA, TpXqq √ù√ë AÀÜTpXq.
Composing that with another evaluation function A ÀÜ HomSetpA, Xq √ë X yields our
desired ¬µX. Namely, for all b P A and f P HompA, TpXqq we have
¬µXpfqpbq ‚Äú fpbqpbq.
Remark 5.3.2.7. Monads can be deÔ¨Åned on categories other than Set. In fact, for any
category C one can take DeÔ¨Ånition 5.3.2.1 and replace every occurrence of Set with C
and obtain the deÔ¨Ånition for monads on C. We have actually seen a monad pPaths, Œ∑, ¬µq
on the category Grph of graphs before, namely in Examples 4.3.1.12 and 4.3.1.13. That
is, Paths: Grph √ë Grph, which sends a graph to its paths-graph is the functor part.
The unit map Œ∑ includes a graph into its paths-graph using the observation that every
arrow is a path of length 1. And the multiplication map ¬µ concatenates paths of paths.
The Kleisli category of this monad (see DeÔ¨Ånition 5.3.3.1) is used, e.g. in (4.14) to deÔ¨Åne
morphisms of database schemas.
5.3.3
Kleisli category of a monad
Given a monad J :‚Äú pT, Œ∑, ¬µq, we can form a new category KlspJq.
DeÔ¨Ånition 5.3.3.1. Let J ‚Äú pT, Œ∑, ¬µq be a monad on Set. Form a new category, called
the Kleisli category for J, denoted KlspJq, with sets as objects, ObpKlspJqq :‚Äú ObpSetq,
and with
HomKlspJqpX, Y q :‚Äú HomSetpX, TpY qq

240
CHAPTER 5. CATEGORIES AT WORK
for sets X, Y . The identity morphism idX : X √ë X in KlspJq is given by Œ∑: X √ë TpXq
in Set. The composition of morphisms f : X √ë Y and g: Y √ë Z in KlspJq is given as
follows. Writing them as functions, we have f : X √ë TpY q and g: Y √ë TpZq. The Ô¨Årst
step is to apply the functor T to g, giving Tpgq: TpY q √ë TpTpZqq. Then compose with
f to get Tpgq Àù f : X √ë TpTpZqq. Finally, compose with ¬µZ : TpTpZqq √ë TpZq to get
the required function X √ë TpZq. The associativity of this composition formula follows
from the associativity law for monads.
Example 5.3.3.2. Recall the monad J for partial functions, TpXq ‚Äú X \ t,u, from
Example 5.3.2.4.
The Kleisli category KlspJq has sets as objects, but a morphism
f : X √ë Y means a function X √ë Y \ t,u, i.e a partial function.
Given another
morphism g: Y √ë Z, the composition formula in KlspJq ensures that g Àù f : X √ë Z has
the appropriate behavior.
Note how this monad allows us to make explicit our assumption that all functions
are partial, and then hide it away from our notation.
Remark 5.3.3.3. For any monad J ‚Äú pT, Œ∑, ¬µq on Set, there is a functor i: Set √ë KlspJq
given as follows. On objects we have ObpKlspJqq ‚Äú ObpSetq, so take i ‚Äú idObpSetq.
Given a morphism f : X √ë Y in Set, we need a morphism ipfq: X √ë Y in KlspJq, i.e.
a function ipfq: X √ë TpY q. We assign ipfq to be the composite X
f√ù√ë Y
Œ∑√ù√ë TpY q. The
functoriality of this mapping follows from the unit law for monads.
The point is that any ordinary function (morphism in Set) has an interpretation as
a morphism in the Kleisli category of any monad. More categorically, there is a functor
Set √ë KlspJq.
Example 5.3.3.4. In this example we return to the setting laid out by Application 5.3.1.2
where we had a set A of experimenters and assumed that the person doing the experiment
may aÔ¨Äect the outcome. We use the monad J ‚Äú pT, Œ∑, ¬µq from Example 5.3.2.6 and
hope that KlspJq will conform to our understanding of how to manage the aÔ¨Äect of the
experimenter on data.
The objects of KlspJq are ordinary sets, but a map f : X √ë Y in KlspJq is a function
X √ë Y A. By currying this is the same as a function X ÀÜA √ë Y , as desired. To compose
f with g: Y √ë Z in KlspJq, we follow the formula. It turns out to be equivalent to the
following. We have a function X ÀÜ A √ë Y and a function Y ÀÜ A √ë Z. Modifying the
Ô¨Årst slightly, we have a function X ÀÜ A √ë Y ÀÜ A, by identity on A, and we can now
compose to get X ÀÜ A √ë Z.
What does this say in terms of experimenters aÔ¨Äecting data gathering? It says that
if we work within KlspJq then we will be able to assume that the experimenter is being
taken into account; all proposed functions X √ë Y are actually functions A ÀÜ X √ë Y .
The natural way to compose these experiments is that we only consider the data from
one experiment to feed into another if the experimenter is the same in both experiments.
13
Exercise 5.3.3.5. In Exercise 5.3.2.3 we discussed the power set monad J ‚Äú pP, Œ∑, ¬µq.
a.) Can you Ô¨Ånd a way to relate the morphisms in KlspJq to relations? That is, given
a morphism f : A √ë B in KlspJq, is there a natural way to associate to it a relation
R ƒé A ÀÜ B?
13This requirement seems a bit stringent, but it can be mitigated in a variety of ways. One such way
is to notice that by Remark 5.3.3.3 that we have not added any requirement, because any old way of
doing business yields a valid new way of doing business (we just say ‚Äúevery experimenter would get the
same result‚Äù). Another way would be to hand oÔ¨Äthe experiment results to another person, who could
carry it forward (see Example 5.3.3.8).

5.3. MONADS
241
b.) How does the composition formula in KlspJq relate to the composition of relations
given in DeÔ¨Ånition 2.5.2.3? 14
‚ô¶
Exercise 5.3.3.6. Let J ‚Äú pP, Œ∑, ¬µq be the power set monad. The category KlspJq is
closed under binary products, i.e.
every pair of objects A, B P ObpKlspJqq have a
product in KlspJq. What is the product of A ‚Äú t1, 2, 3u and B ‚Äú ta, bu?
‚ô¶
Exercise 5.3.3.7. Let J ‚Äú pP, Œ∑, ¬µq be the power set monad. The category KlspJq is
closed under binary coproducts, i.e. every pair of objects A, B P ObpKlspJqq have a
coproduct in KlspJq. What is the coproduct of A ‚Äú t1, 2, 3u and B ‚Äú ta, bu?
‚ô¶
Example 5.3.3.8. Let A be any preorder. We speak of A throughout this example as
though it was the linear order given by time because this is a nice case, however the
mathematics works for any A P ObpPrOq.
There is a monad J ‚Äú pT, Œ∑, ¬µq that captures the idea that a function f : X √ë Y
occurs in the context of time in the following sense: The output of f is determined not
only by the element x P X on which it is applied but also by the time at which it was
applied to x; and the output of f occurs at another time, which is not before the time
of input.
The functor part of the monad is given on X P ObpSetq by
TpXq ‚Äú tp: A √ë A ÀÜ X | if ppaq ‚Äú pa1, xq then a1 ƒõ au.
The unit Œ∑X : X √ë TpXq sends x to the function a √û√ë pa, xq. The multiplication map
¬µX : TpTpXqq √ë TpXq is roughly described as follows. If for every a P A you have a
later element a1 ƒõ a and a function p: A √ë A ÀÜ X that takes elements of A to later
elements of A and values of X, then ppa1q is a still later element of A and a value of X,
as desired.
Morphisms in the Kleisli category KlspJq can be curried to be functions f : AÀÜX √ë
A ÀÜ Y such that if fpa, xq ‚Äú pa1, yq then a1 ƒõ a.
Remark 5.3.3.9. One of the most important monads in computer science is the so-called
state monad. It is used when one wants to allow a program to mutate state variables
(e.g. in the program
if x ƒÖ 4 then x :‚Äú x ` 1 else Print ‚Äúdone‚Äù)
x is a state variable. The state monad is a special case of the monad discussed in Example
5.3.3.8. Given any set A, the usual state monad of type A is obtained by giving A the
indiscrete preorder (see Example 3.4.4.5). More explicitly it is a monad with functor
part
X √û√ë pA ÀÜ XqX,
and it will be brieÔ¨Çy discussed in Example 5.3.5.4.
Example 5.3.3.10. Here we reconsider the image from the front cover of this book, re-
produced here.
14Actually, DeÔ¨Ånition 2.5.2.3 is about composing spans, but a relation R ƒé A ÀÜ B is a kind of span,
R √ë A ÀÜ B.

242
CHAPTER 5. CATEGORIES AT WORK
It looks like an olog, and all ologs are database schemas (see Section 3.5.2.14). But
how is ‚Äúanalyzed by a person yields‚Äù a function from observations to hypotheses? The
very name belies the fact that it is an invalid aspect in the sense of Section 2.3.2.1, because
given an observation there may be more than one hypothesis yielded, corresponding to
which person is doing the observing. In fact, all of the arrows in this diagram correspond
to some hidden context involving people: the prediction is dependent on who analyzes
the hypothesis, the speciÔ¨Åcation of an experiment is dependent on who is motivated to
specify it, and experiments may result in diÔ¨Äerent observations by diÔ¨Äerent observers.
Without monads, the model of science proposed by this olog would be diÔ¨Écult to
believe in. But by choosing a monad we can make explicit (and then hide from discourse)
our implicit assumption that ‚Äúof course this is all dependent on which human is doing
the science‚Äù. The choice of monad is an additional modeling choice. Do we want to
incorporate the partial order of time? Do we want the scientist to be modiÔ¨Åed by each
function (i.e. the person is changed when analyzing an observation to yield a hypothesis)?
These are all interesting possibilities.
One reasonable choice would be to use the state monad of type A, where A is the
set of scientiÔ¨Åc models. This implies the following context: every morphism f : X √ë Y
in the Kleisli category of this monad is really a morphism f : X ÀÜ A √ë Y ÀÜ A; while
ostensibly giving a map from X to Y , it is inÔ¨Çuenced by the scientiÔ¨Åc model under which
it is performed, and its outcome yields a new scientiÔ¨Åc model.
Reading the olog in this context might look like this:
A hypothesis (in the presence of a scientiÔ¨Åc model) analyzed by a person
produces a prediction (in the presence of a scientiÔ¨Åc model), which motivates
the speciÔ¨Åcation of an experiment (in the presence of a scientiÔ¨Åc model),
which when executed results in an observation (in the presence of a scientiÔ¨Åc
model), which analyzed by a person yields a hypothesis (in the presence of a
scientiÔ¨Åc model).
The parenthetical statements can be removed if we assume them to always be around,
which can be done using the monad above.

5.3. MONADS
243
5.3.3.11
Relaxing functionality constraint for ologs
In Section 2.3.2 we said that every arrow in an olog has to be English-readable as a
sentence, and it has to correspond to a function. For example, the arrow
a person
has / a child
(5.11)
comprises an readable sentence, but does not correspond to a function because a person
may have no children or more than one child.
We‚Äôll call olog in which every arrow
corresponds to a function (the only option proposed so far in the book) a functional
olog. Requiring that ologs be functional as we have been doing, comes with advantages
and disadvantages. The main advantage is that creating a functional olog requires more
conceptual clarity about the situation, and this has beneÔ¨Åts for the olog-creator as well
as for anyone to whom he or she tries to explain the situation. The main disadvantage
is that creating a functional olog takes more time, and the olog takes up more space on
the page.
In the context of the power set monad (see Exercise 5.3.2.3), a morphism f : X √ë Y
between sets X and Y becomes a binary relation on X and Y , rather than a function,
as seen in Exercise 5.3.3.5. So in that context, the arrow in (5.11) becomes valid. An
olog in which arrows correspond to mere binary relations rather than functions might be
called a relational olog.
5.3.4
Monads in databases
In this section we discuss how to record data in the presence of a monad. The idea is quite
simple. Given a schema (category) C, an ordinary instance is a functor I : C √ë Set. But
if J ‚Äú pT, Œ∑, ¬µq is a monad, then a Kleisli J-instance on C is a functor J : C √ë KlspJq.
Such a functor associates to every object c P ObpCq a set Jpcq, and to every arrow
f : c √ë c1 in C a morphism Jpfq: Jpcq √ë Jpc1q in KlspJq. How does this look in terms
of tables?
Recall that to represent an ordinary database instance I : C √ë Set, we use a tabular
format in which every object c P ObpCq is displayed as a table including one ID column
and an additional column for every arrow emanating from c. In the ID column of table
c were elements of the set Ipcq and in the column assigned to some arrow f : c √ë c1 the
cells were elements of the set Ipc1q.
To represent a Kleisli database instance J : C √ë KlsJ is similar; we again use a
tabular format in which every object c P ObpCq is displayed as a table including one ID
column and an additional column for every arrow emanating from c. In the ID column
of table c are again elements of the set Jpcq; however in the column assigned to some
arrow f : c √ë c1 are not elements of Jpc1q but T-values in Jpc1q, i.e. elements of TpJpc1qq.
Example 5.3.4.1. Let J ‚Äú pT, Œ∑, ¬µq be the monad for partial functions, as discussed in
Example 5.3.1.1. Given any schema C, we can represent a Kleisli J-instance I : C √ë
KlspJq in tabular format. To every object c P ObpCq we‚Äôll have a set Ipcq of rows, and
given a column c √ë c1 every row will produce either a value in Ipc1q or fail to produce
a value; this is the essence of partial functions. We might denote the absence of a value
using ,.
Consider the schema indexing graphs
C :‚Äú
Arrow
‚Äö
src /
tgt /
Vertex
‚Äö

244
CHAPTER 5. CATEGORIES AT WORK
As we discussed in Section 4.2.1.20, an ordinary instance on C represents a graph.
I :‚Äú
‚Äöv
f
/ ‚Äöw
h
=
g
#
‚Äöx
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
A Kleisli J-instance on C represents graphs in which edges can fail to have a source
vertex, fail to have a target vertex, or both.
J :‚Äú
‚Äöv
i

f
/ ‚Äöw
h
=
g
#
‚Äöx
j
/
Arrow pJq
ID
src
tgt
f
v
w
g
w
x
h
w
x
i
v
,
j
,
,
Vertex pJq
ID
v
w
x
The context of these tables is that of partial functions, so we do not need a reference for
, in the vertex table. Mathematically, the morphism Jpsrcq: JpArrowq √ë JpVertexq
needs to be a function JpArrowq √ë JpVertexq \ t,u, and it is.
5.3.4.2
Probability distributions
Let r0, 1s ƒé R denote the set of real numbers between 0 and 1. Let X be a set and
p: X √ë r0, 1s a function. We say that p is a Ô¨Ånitary probability distribution on X if
there exists a Ô¨Ånite subset W ƒé X such that
√ø
wPW
ppwq ‚Äú 1,
(5.12)
and such that ppxq ƒÖ 0 if and only if x P W. Note that W is unique if it exists; we call
it the support of p and denote it Suppppq. Note also that if X is a Ô¨Ånite set then every
function p satisfying (5.12) is a Ô¨Ånitary probability distribution on X.
For any set X, let DistpXq denote the set of Ô¨Ånitary probability distributions on X. It
is easy to check that given a function f : X √ë Y one obtains a function Distpfq: DistpXq √ë
DistpY q by Distpfqpyq ‚Äú ≈ô
fpxq‚Äúy ppxq. Thus we can consider Dist: Set √ë Set as a
functor, and in fact the functor part of a monad. Its unit Œ∑: X √ë DistpXq is given by the
Kronecker delta function x √û√ë Œ¥x where Œ¥xpxq ‚Äú 1 and Œ¥xpx1q ‚Äú 0 for x1 ‚Ä∞ x. Its multipli-
cation ¬µ: DistpDistpXqq √ë DistpXq is given by weighted sum: given a Ô¨Ånitary proba-
bility distribution w: DistpXq √ë r0, 1s and x P X, put ¬µpwqpxq ‚Äú ≈ô
pPSupppwq wppqppxq.
Example 5.3.4.3 (Markov chains). Let Loop be the loop schema,
Loop :‚Äú
s‚Äö
f

as in Example 3.5.2.9. A Dist-instance on Loop is equivalent to a time-homogeneous
Markov chain. To be explicit, a functor Œ¥: Loop √ë KlsDist assigns to the unique object

5.3. MONADS
245
s P ObpLoopq a set S ‚Äú Œ¥psq, which we call the state space, and to f : s √ë s a function
Œ¥pfq: S √ë DistpSq, which sends each element x P S to some probability distribution on
elements of S. For example, the table Œ¥ on the left corresponds to the Markov matrix
M on the right below:
Œ¥ :‚Äú
s
ID
f
1
.5(1)+.5(2)
2
1(2)
3
.7(1)+.3(3)
4
.4(1)+.3(2)+.3(4)
M :‚Äú
¬®
Àö
Àö
Àù
0.5
0.5
0
0
0
1
0
0
0.7
0
0.3
0
0.4
0.3
0
0.3
Àõ
‚Äπ‚Äπ‚Äö
(5.13)
As one might hope, for any natural number n P N the map f n : S √ë DistpSq
corresponds to the matrix M n, which sends an element in S to its probable location
after n iterations of the transition map.
Application 5.3.4.4. Every star emits a spectrum of light, which can be understood as
a distribution on the electromagnetic spectrum. Given an object B on earth, diÔ¨Äerent
parts of B will absorb radiation at diÔ¨Äerent rates. Thus B produces a function from the
electromagnetic spectrum to distributions of energy absorption. In the context of the
probability distributions monad, we can record data on the schema
star
‚Äö
emits
/ wavelengths
‚Äö
absorbed by B
/ energies
‚Äö
The composition formula for Kleisli categories is the desired one: to each star we associate
the weighted sum of energy absorption rates over the set of wavelengths emitted by the
star.
‚ô¶‚ô¶
5.3.5
Monads and adjunctions
There is a strong connection between monads and adjunctions: every adjunction creates
a monad, and every monad ‚Äúcomes from‚Äù an adjunction. For example, the List monad
(Example 5.3.2.2) comes from the free-forgetful adjunction between sets and monoids
Set
F
/Mon
U
o
(see Proposition 5.1.1.2). That is, for any set X, the free monoid on X is
FpXq ‚Äú pListpXq, r s, ``q,
and the underlying set of that monoid is UpFpXqq ‚Äú ListpXq. Now it may seem like
there was no reason to use monoids at all‚Äîthe set ListpXq was needed in order to discuss
FpXq‚Äîbut it will turn out that the unit Œ∑ and multiplication ¬µ will come drop out of
the adjunction too. First, we discuss the unit and counit of an adjunction.
DeÔ¨Ånition 5.3.5.1. Let C and D be categories, and let L: C √ë D and R: D √ë C be
functors with adjunction isomorphism
Œ±c,d : HomDpLpcq, dq
‚Äì
√ù√ù√ù√ë HomCpc, Rpdqq

246
CHAPTER 5. CATEGORIES AT WORK
for any objects c P ObpCq and d P ObpDq. The unit Œ∑: idC √ë R Àù L (respectively the
counit œµ: L Àù R √ë idD) are natural transformations deÔ¨Åned as follows.
Given an object c P ObpCq, we apply Œ± to idLpcq : Lpcq √ë Lpcq to get
Œ∑c : c √ë R Àù Lpcq;
similarly given an object d P ObpDq we apply Œ±¬¥1 to idRpdq : Rpdq √ë Rpdq to get
œµd : L Àù Rpdq √ë d.
Below we will show how to use the unit and counit of any adjunction to make a
monad. We Ô¨Årst walk through the process in Example 5.3.5.2.
Example 5.3.5.2. Consider the adjunction Set
F
/Mon
U
o
between sets and monoids.
Let T ‚Äú U Àù F : Set √ë Set; this will be the functor part of our monad, and we have
T ‚Äú List. Then the unit of the adjunction, Œ∑: idSet √ë U Àù F is precisely the unit of the
monad: for any set X P ObpSetq the component Œ∑X : X √ë ListpXq is the function that
takes x P X to the singleton list rxs P ListpXq. The monad also has a multiplication
map ¬µX : TpTpXqq √ë TpXq, which amounts to Ô¨Çattening a list of lists. This function
comes about using the counit œµ, as follows
T Àù T ‚Äú U Àù F Àù U Àù F
idUÀõœµÀõidF
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë U Àù F ‚Äú T.
The general procedure for extracting a monad from an adjunction is analogous to
that shown in Example 5.3.5.2. Given any adjunction
C
L
/D
R
o
We deÔ¨Åne J ‚Äú R Àù L: C √ë C, we deÔ¨Åne Œ∑: idC √ë J to be the unit of the adjunction
(as in DeÔ¨Ånition 5.3.5.1), and we deÔ¨Åne ¬µ: J Àù J √ë J to be the natural transformation
idR Àõ œµ Àõ idL : RLRL √ë RL, obtained by applying the counit œµ: LR √ë idD.
The above procedure produces monads on arbitrary categories C, whereas our def-
inition of monad (DeÔ¨Ånition 5.3.2.1) considers only the case C ‚Äú Set. However, this
deÔ¨Ånition can be generalized to arbitrary categories C by simply replacing every occur-
rence of the string Set with the string C. Similarly, our deÔ¨Ånition of Kleisli categories
(DeÔ¨Ånition 5.3.3.1) considers only the case C ‚Äú Set, but again the generalization to
arbitrary categories C is straightforward. In Proposition 5.3.5.3, it may be helpful to
again put C ‚Äú Set if one is at all disoriented.
Proposition 5.3.5.3. Let C be a category, let pJ, Œ∑, ¬µq be a monad on C, and let K :‚Äú
KlsCpJq be the Kleisli category. Then there is an adjunction
C
L
/K
R
o
such that the monad pJ, Œ∑, ¬µq is obtained (up to isomorphism) by the above procedure.
Sketch of proof. The functor L: C √ë K was discussed in Remark 5.3.3.3. We deÔ¨Åne it
to be identity on objects (recall that ObpKq ‚Äú ObpCq). Given objects c, c1 P ObpCq the
function
HomCpc, c1q
L
√ù√ù√ù√ë HomKpc, c1q ‚Äú HomCpc, Jpc1qq

5.4. OPERADS
247
is given by f √û√ë Œ∑c1 Àùf. The fact that this is a functor (i.e. that it preserves composition)
follows from a monad axiom.
The functor R: K √ë C acts on objects by sending c P ObpKq ‚Äú ObpCq to Jpcq P
ObpCq. For objects c, c1 P ObpKq the function
HomCpc, Jpc1qq ‚Äú HomKpc, c1q
R
√ù√ù√ù√ë HomCpJpcq, Jpc1qq
is given by sending the C-morphism f : c √ë Jpc1q to the composite
Jpcq
Jpfq
√ù√ù√ù√ù√ù√ë JJpc1q
¬µc1
√ù√ù√ù√ù√ë Jpc1q.
Again, the functoriality follows from monad axioms.
We will not continue on to show that these are adjoint or that they produce the
monad pJ, Œ∑, ¬µq, but see [Mac, VI.5.1] for the remainder of the proof.
‚ñ°
Example 5.3.5.4. Let A P ObpSetq be a set, and recall the currying adjunction
Set
AÀÜ¬¥ /Set
¬¥A
o
discussed brieÔ¨Çy in Example 5.1.1.8. The corresponding monad StA is typically called
the state monad of type A in programming language theory. Given a set X, we have
StApXq ‚Äú pA ÀÜ XqA.
In the Kleisli category KlspStAq a morphism from X to Y is a function of the form
X √ë pA ÀÜ Y qA, but this can be curried to a function A ÀÜ X √ë A ÀÜ Y .
This monad is related to holding on to an internal state variable of type A. Every
morphism ostensibly from X to Y actually takes as input not only an element of X but
also the current state a P A, and it produces as output not only an element of Y but an
updated state as well.
Computer scientists in programming language theory have found monads to be very
useful ([Mog]). In much the same way, monads on Set can be useful in databases, as
discussed in Section 5.3.4. Another, totally diÔ¨Äerent way to use monads in databases is by
using a mapping between schemas to produce in each one an internal model of the other.
That is, for any functor F : C √ë D, i.e. mapping of database schemas, the adjunction
pŒ£F , ‚àÜF q produces a monad on C‚ÄìSet, and the adjunction p‚àÜF , Œ†F q produces a monad
on D‚ÄìSet. If one interprets the List monad as producing in Set an internal model of
the category Mon of monoids, one can similarly interpret the above monads on C‚ÄìSet
and D‚ÄìSet as producing internal models of each within the other.
5.4
Operads
In this section we brieÔ¨Çy introduce operads, which are generalizations of categories.
They often are useful for speaking about self-similarity of structure. For example, we
will use them to model agents made up of smaller agents, or materials made up of smaller
materials. This association with self-similarity is not really inherent in the deÔ¨Ånition,
but it tends to emerge in our thinking about many operads used in practice.
Let me begin with a warning.

248
CHAPTER 5. CATEGORIES AT WORK
Warning 5.4.0.5. My use of the term operad is not entirely standard and conÔ¨Çicts with
widespread usage. The more common term for what I am calling an operad is symmetric
colored operad or a symmetric multicategory. An operad classically is a multicategory
with one object, and a colored operad is a multicategory. The analogy is that ‚Äúoperad is
to multicategory as monoid is to category‚Äù. The term multicategory stems from the fact
that the morphisms in a multicategory have many, rather than one, input. But there
is nothing really ‚Äúmulti‚Äù about the multicategory itself, only its morphisms. Probably
the real reason though is that I Ô¨Ånd the term multicategory to be clunky and the term
operad to be sleek, clocking in at half the syllables. I apologize if my break with standard
terminology causes any confusion.
This introduction to operads is quite short. One should see [Le1] for an excellent
treatment.
5.4.1
DeÔ¨Ånition and classical examples
An operad is like a category in that it has objects, morphisms, and a composition formula,
and it follows an identity law and an associativity law.
The diÔ¨Äerence is that each
morphism has many inputs (and one output).
The description of composition in an operad is a bit heavier than it is in a category, but
the idea fairly straightforward. Here is a picture of morphisms being composed.

5.4. OPERADS
249
A 
B 
C 
S 
D 
T 
f1 
f2 
g 
X 
g ‚ö¨ (f1,f2) 
X 
A 
B 
C 
D 
the arrows above compose to give 
Note that S and T disappear from the composition, but this is analogous to the way the
middle object disappears from the composition of morphisms in a category
A
f
√ù√ù√ù√ë S
g
√ù√ù√ù√ë X
the arrows to the left compose to give
A
gÀùf
√ù√ù√ù√ù√ù√ë X
Here is the deÔ¨Ånition, which we take directly from [Sp4].
DeÔ¨Ånition 5.4.1.1. An operad O is deÔ¨Åned as follows: One announces some constituents
(A. objects, B. morphisms, C. identities, D. compositions) and asserts that they conform
to some laws (1. identity law, 2. associativity law). SpeciÔ¨Åcally,
A. one announces a collection ObpOq, each element of which is called an object of
O.
B. for each object y P ObpOq, Ô¨Ånite set n P ObpFinq, and n-indexed set of objects
x: n √ë ObpOq, one announces a set Onpx; yq P ObpSetq. Its elements are called
morphisms from x to y in O.
C. for every object x P ObpOq, one announces a speciÔ¨Åed morphism denoted idx P
O1px; xq called the identity morphism on x.
D. Let s: m √ë n be a morphism in Fin. Let z P ObpOq be an object, let y: n √ë
ObpOq be an n-indexed set of objects, and let x: m √ë ObpOq be an m-indexed
set of objects. For each element i P n, write mi :‚Äú s¬¥1piq for the pre-image of s
under i, and write xi ‚Äú x|mi : mi √ë ObpOq for the restriction of x to mi. Then

250
CHAPTER 5. CATEGORIES AT WORK
one announces a function
Àù: Onpy; zq ÀÜ
≈∫
iPn
Omipxi; ypiqq √ù√ë Ompx; zq,
(5.14)
called the composition formula.
Given an n-indexed set of objects x: n √ë ObpOq and an object y P ObpOq, we sometimes
abuse notation and denote the set of morphisms from x to y by Opx1, . . . , xn; yq. 15 We
may write HomOpx1, . . . , xn; yq, in place of Opx1, . . . , xn; yq, when convenient. We can
denote a morphism œÜ P Onpx; yq by œÜ: x √ë y or by œÜ: px1, . . . , xnq √ë y; we say that
each xi is a domain object of œÜ and that y is the codomain object of œÜ. We use inÔ¨Åx
notation for the composition formula, e.g. writing œà Àù pœÜ1, . . . , œÜnq.
One asserts that the following laws hold:
1. for every x1, . . . , xn, y P ObpOq and every morphism œÜ: px1, . . . , xnq √ë y, we
have
œÜ Àù pidx1, . . . , idxnq ‚Äú œÜ
and
idy Àù œÜ ‚Äú œÜ;
2. Let m
s√ù√ë n
t√ù√ë p be composable morphisms in Fin.
Let z P ObpOq be an
object, let y: p √ë ObpOq, x: n √ë ObpOq, and w: m √ë ObpOq respectively
be a p-indexed, n-indexed, and m-indexed set of objects. For each i P p, write
ni ‚Äú t¬¥1piq for the pre-image and xi : ni √ë ObpOq for the restriction. Similarly,
for each k P n write mk ‚Äú s¬¥1pkq and wk : mk √ë ObpOq; for each i P p, write
mi,¬¥ ‚Äú ptÀùsq¬¥1piq and wi,¬¥ : mi,¬¥ √ë ObpOq; for each j P ni, write mi,j :‚Äú s¬¥1pjq
and wi,j : mi,j √ë ObpOq. Then the diagram below commutes:
≈õ
Oppy; zq ÀÜ ≈õ
iPp Onipxi; ypiqq ÀÜ ≈õ
iPp, jPni Omi,jpwi,j; xipjqq
*
t ≈õ
Onpx; zq ÀÜ ≈õ
kPn Omkpwk; xpkqq
)
≈õ
Oppy; zq ÀÜ ≈õ
iPp Omi,¬¥pwi,¬¥; ypiqq
u
Ompw; zq
Remark 5.4.1.2. In this remark we will discuss the abuse of notation in DeÔ¨Ånition 5.4.1.1
and how it relates to an action of a symmetric group on each morphism set in our
deÔ¨Ånition of operad. We follow the notation of DeÔ¨Ånition 5.4.1.1, especially following
the use of subscripts in the composition formula.
Suppose that O is an operad, z P ObpOq is an object, y: n √ë ObpOq is an n-indexed
set of objects, and œÜ: y √ë z is a morphism.
If we linearly order n, enabling us to
write œÜ: pyp1q, . . . , yp|n|qq √ë z, then changing the linear ordering amounts to Ô¨Ånding an
isomorphism of Ô¨Ånite sets œÉ: m ‚Äì
√ù√ë n, where |m| ‚Äú |n|. Let x ‚Äú y Àù œÉ and for each i P n,
note that mi ‚Äú œÉ¬¥1ptiuq ‚Äú tœÉ¬¥1piqu, so xi ‚Äú x|œÉ¬¥1piq ‚Äú ypiq. Taking idxi P Omipxi; ypiqq
for each i P n, and using the identity law, we Ô¨Ånd that the composition formula induces
a bijection Onpy; zq ‚Äì
√ù√ë Ompx; zq, which we might denote by
œÉ: Opyp1q, yp2q, . . . , ypnq; zq ‚Äì O
`
ypœÉp1qq, ypœÉp2qq, . . . , ypœÉpnqq; z
Àò
.
15There are three abuses of notation when writing Opx1, . . . , xn; yq, which we will Ô¨Åx one by one. First,
it confuses the set n P ObpFinq with its cardinality |n| P N. But rather than writing Opx1, . . . , x|n|; yq,
it would be more consistent to write Opxp1q, . . . , xp|n|q; yq, because we have assigned subscripts another
meaning in part D. But even this notation unfoundedly suggests that the set n has been endowed with
a linear ordering, which it has not. This may be seen as a more serious abuse, but see Remark 5.4.1.2.

5.4. OPERADS
251
In other words, there is an induced group action of Autpnq on Onpx; zq, where Autpnq is
the group of permutations of an n-element set.
Throughout this book, we will permit ourselves to abuse notation and speak of mor-
phisms œÜ: px1, x2, . . . , xnq √ë y for a natural number n P N, without mentioning the
abuse inherent in choosing an order, so long as it is clear that permuting the order of
indices would not change anything up to canonical isomorphism.
Example 5.4.1.3. Let Sets denote the operad deÔ¨Åned as follows. For objects we put
ObpSetsq ‚Äú ObpSetq. For a natural number n P N and sets X1, . . . , Xn, Y , put
HomSetspX1, . . . , Xn; Y q :‚Äú HomSetpX1 ÀÜ ¬® ¬® ¬® ÀÜ Xn, Y q.
Given functions f1 : pX1,1 ÀÜ ¬® ¬® ¬® ÀÜ X1,m1q √ë Y1 through fn : pXn,1 ÀÜ ¬® ¬® ¬® ÀÜ Xn,mnq √ë Yn
and a function Y1 ÀÜ ¬® ¬® ¬® ÀÜ Yn √ë Z, the universal property provides us a unique function
of the form pX1,1 ÀÜ ¬® ¬® ¬® ÀÜ Xn,mnq √ù√ë Z, giving rise to our composition formula.
Example 5.4.1.4 (Little squares operad). An operad commonly used in mathematics is
called the little n-cubes operad. We‚Äôll focus on n ‚Äú 2 and talk about the little squares
operad O. Here the set of objects has only one element, which we denote by a square,
ObpOq ‚Äú tÀùu.
For a natural number n P N, a morphism f : pÀù, Àù, . . . , Àùq √ù√ë Àù is a
positioning of n non-overlapping squares inside of a square.
Here is a picture of a
morphism pX1, X2, X3q √ë Y , where X1 ‚Äú X2 ‚Äú X3 ‚Äú Y ‚Äú Àù.
The composition law says that given a positioning of small squares inside a large square,
and given a positioning of tiny squares inside each of those small squares, we get a
positioning of tiny squares inside a large square. A picture is shown in Figure 5.15.

252
CHAPTER 5. CATEGORIES AT WORK
Figure 5.15: Here we show a morphism pX1, X2, X3q √ë Y and morphisms pW1,1, W1,2q √ë
X1, pW2,1, W2,2, W2,3q √ë X2, and pW3,1q √ë X3, each of which is a positioning of squares
inside a square. The composition law scales and positions the squares in the ‚Äúobvious‚Äù
way.
Hopefully, what we meant by ‚Äúself-similarity‚Äù in the introduction to this section (see
page 247) is becoming clear.
Exercise 5.4.1.5. Consider an operad O like the little squares operad from Example
5.4.1.4, except with three objects: square, circle, equilateral triangle. A morphism is
again a non-overlapping positioning of shapes inside of a shape.
a.) Draw an example of a morphism f from two circles and a square to a triangle.
b.) Find three other morphisms that compose into f, and draw the composite.
‚ô¶
5.4.1.6
Operads: functors and algebras
If operads are like categories, then we can deÔ¨Åne things like functors and call them operad
functors. Before giving the deÔ¨Ånition, we give a warning.

5.4. OPERADS
253
Warning 5.4.1.7. What we call operad functors in DeÔ¨Ånition 5.4.1.8 are usually (if not
always) called operad morphisms. We thought that the terminology clash between mor-
phisms of operads and morphisms in an operad was too confusing. It is similar to what
would occur in regular category theory (e.g. Chapter 4) if we replaced the term ‚Äúfunctor‚Äù
with the term ‚Äúcategory morphism‚Äù.
DeÔ¨Ånition 5.4.1.8. Let O and O1 be operads. An operad functor from O to O1, denoted
F : O √ë O1 consists of some constituents (A. on-objects part, B. on-morphisms part)
conforming to some laws (1. preservation of identities, 2. preservation of composition),
as follows:
A. There is a function ObpFq: ObpOq √ë ObpO1q.
B. For each object y P ObpOq, Ô¨Ånite set n P ObpFinq, and n-indexed set of objects
x: n √ë ObpOq, there is a function
Fn : Onpx; yq √ë O1
npFx; Fyq.
As in B. above, we often denote ObpFq, and also each Fn, simply by F. The laws that
govern these constituents are as follows:
1. For each object x P ObpOq, the equation Fpidxq ‚Äú idF x holds.
2. Let s: m √ë n be a morphism in Fin. Let z P ObpOq be an object, let y: n √ë
ObpOq be an n-indexed set of objects, and let x: m √ë ObpOq be an m-indexed
set of objects. Then, with notation as in DeÔ¨Ånition 5.4.1.1, the following diagram
of sets commutes:
Onpy; zq ÀÜ ≈õ
iPn Omipxi; ypiqq
F
/
Àù

O1
npFy; Fzq ÀÜ ≈õ
iPn O1
mipFxi; Fypiqq
Àù

Ompx; zq
F
/ O1
mpFx; Fzq
(5.16)
We denote the category of operads and operad functors by Oprd.
Exercise 5.4.1.9. Let O denote the little squares operad from Example 5.4.1.4 and let
O1 denote the operad you constructed in Exercise 5.4.1.5.
a.) Can you come up with an operad functor O √ë O1?
b.) Is it possible to Ô¨Ånd an operad functor O1 √ë O?
‚ô¶
DeÔ¨Ånition 5.4.1.10 (Operad algebra). Let O be an operad. An algebra on O is an
operad functor A: O √ë Sets.
Remark 5.4.1.11. Every category can be construed as an operad (yes, there is a functor
Cat √ë Oprd), by simply not including non-unary morphisms. That is, given a category
C, one makes an operad O with ObpOq :‚Äú ObpCq and with
HomOpx1, . . . , xn; yq ‚Äú
#
HomCpx1, yq
if n ‚Äú 1;
H
if n ‚Ä∞ 1

254
CHAPTER 5. CATEGORIES AT WORK
Just like a schema is a category presentation, it is possible to discuss operad presentations
by generators and relations. Under this analogy, an algebra on an operad corresponds
to an instance on a schema.
5.4.2
Applications of operads and their algebras
Hierarchical structures may be well-modeled by operads.
Describing such structures
using operads and their algebras allows one to make appropriate distinctions between
diÔ¨Äerent types of thinking. For example, the allowable formations are encoded in the
operad, whereas the elements that will Ô¨Åt into those formations are encoded in the
algebra. Morphisms of algebras are high-level understandings of how elements of very
diÔ¨Äerent types (such as materials vs. numbers) can occupy the same place in the structure
and be compared. We will give examples below.
Application 5.4.2.1. Every material is composed of constituent materials, arranged in
certain patterns. (In case the material is ‚Äúpure‚Äù, we consider the material to consist
of itself as the sole constituent.) Each of these constituent materials each is itself an
arrangement of constituent materials. Thus we see a kind of self-similarity which we can
model with operads.
One material is a structured  
composite of other materials, 
each of which is a structured 
composite of other materials. 
(5.17)
For example, a tendon is made of collagen Ô¨Åbers that are assembled in series and
then in parallel, in a speciÔ¨Åc way. Each collagen Ô¨Åbre is made of collagen Ô¨Åbrils that are
again assembled in series and then in parallel, with slightly diÔ¨Äerent speciÔ¨Åcations. We
can continue down, perhaps indeÔ¨Ånitely, though our resolution fails at some point. A

5.4. OPERADS
255
collagen Ô¨Åbril is made up of tropocollagen collagen molecules, which are twisted ropes
of collagen molecules, etc.16
Here is how operads might be employed. We want the same operad to model both
actual materials, theoretical materials, and functional properties; that is we want more
than one algebra on the same operad.
The operad O should abstractly model the structure, but not the substance being
structured.
Imagine that each of the shapes (including the background ‚Äúshape‚Äù) in
Diagram (5.17) is a place-holder, saying something like ‚Äúyour material here‚Äù.
Each
morphism (that‚Äôs what (5.17) is a picture of) represents a construction of a material out
of parts. In our picture, it appears we are only concerned with the spacial arrangements,
but there is far more Ô¨Çexibility than that. Whether we want to allow for additional
details beyond spacial arrangements is the kinds of choice we make in a meeting called
‚Äúwhat operad should we use?‚Äù
‚ô¶‚ô¶
Application 5.4.2.2. Suppose we have chosen an operad O to model the structure of
materials. Each object of O might correspond to a certain quality of material, and each
morphism corresponds to an arrangement of various qualities to form a new quality. An
algebra A: O √ë Sets on O forces us to choose what substances will Ô¨Åll in for these
qualities. For every object x P ObpOq, we want a set Apxq which will be the set of
materials with that quality. For every arrangement, i.e. morphism, f : px1, . . . , xnq √ë y,
and every choice a1 P Apx1q, . . . , an P Apxnq of materials, we need to understand what
material a1 ‚Äú Apfqpa1, . . . , anq P Apyq will emerge when these materials are arranged in
accordance with f. We are really pinning ourselves down here.
But there may be more than one interesting algebra on O. Suppose that B : O √ë Sets
is an algebra of strengths rather than materials. For each object x P ObpOq, which
represents some quality, we let Bpxq be the set of possible strengths that something of
quality x can have. Then for each arrangement, i.e. morphism, f : px1, . . . , xnq √ë y,
and every choice b1 P Bpx1q, . . . , bn P Bpxnq of strengths, we need to understand what
strength b1 ‚Äú Bpfqpb1, . . . , bnq P Bpyq will emerge when these strengths are arranged in
accordance with f. Certainly an impressive achievement!
Finally, a morphism of algebras S : A √ë B would consist of a coherent system for
assigning to each material a P ApXq of a given quality x a speciÔ¨Åc strength Spaq P BpXq,
in such a way that morphisms behaved appropriately. In this language we have stated a
very precise goal for the Ô¨Åeld of material mechanics.
‚ô¶‚ô¶
Exercise 5.4.2.3. Consider again the little squares operad O from Example 5.4.1.4. Sup-
pose we wanted to use this operad to describe those photographic mosaics.
a.) Come up with an algebra P : O √ë Sets that sends the square to the set of all photos
that can be pasted into that square. What does P do on morphisms in O?
b.) Come up with an algebra C : O √ë Sets that sends each square to the set of all colors
(visible frequencies of light). In other words, CpÀùq is the set of colors, not the set of
ways to color the square. What does C do on morphisms in O. Hint: use some kind
of averaging scheme for the morphisms.
c.) Guess: if someone were to appropriately deÔ¨Åne morphisms of O-algebras (something
akin to natural transformations between functors O √ë Sets), do you think there
16Thanks to Professor Sandra Shefelbine for explaining the hierarchical nature of collagen to me. Any
errors are my own.

256
CHAPTER 5. CATEGORIES AT WORK
would some a morphism of algebras P √ë C?
‚ô¶
5.4.2.4
Wiring diagrams
Example 5.4.2.5. Here we describe an operad of relations, which we will denote by R.
The objects are sets, ObpRq ‚Äú ObpSetq. A morphism f : px1, x2, . . . , xnq √ù√ë x1 in R is
a diagram in Set of the form
R
f1
w
f2
{
¬®¬®¬®
fn

f 1
 
x1
x2
¬® ¬® ¬®
xn
x1
(5.18)
such that the induced function R √ù√ë px1 ÀÜ x2 ÀÜ ¬® ¬® ¬® ÀÜ xn ÀÜ x1q is an injection.
We use a composition formula similar to that in DeÔ¨Ånition 2.5.2.3. Namely, we form
a Ô¨Åber product
FP
"
y
≈õ
iPn Ri
w
$
S
}

≈õ
iPn
≈õ
jPmi xi,j
≈õ
iPn yi
z
One can show that the induces function FP √ù√ë
¬¥≈õ
iPn
≈õ
jPmi xi
¬Ø
ÀÜ y is an injection, so
we have a valid composition formula. Finally, the associativity and identity laws hold.
17
Application 5.4.2.6. Suppose we are trying to model life in the following way. We deÔ¨Åne
an entity as a set of phenomena, but in order to use colloquial language we say the entity
is able to experience that set of phenomena. We also want to be able to put entities
together to form a super-entity, so we have a notion of morphism f : pe1, . . . , enq √ù√ë e1
deÔ¨Åned as a relation as in (5.18). The idea is that the morphism f is a way of translating
between the phenomena that may be experienced by the sub-entities and the phenomena
that may be experienced by the super-entity.
The operad R from Example 5.4.2.5 becomes useful as a language for discussing issues
in this domain.
‚ô¶‚ô¶
Example 5.4.2.7. Let R be the operad of relations from Example 5.4.2.5. Consider the
algebra S : R √ë Sets given by Spxq ‚Äú Ppxq. Given a morphism ≈õ
i xi √ê R √ë y and
subsets x1
i ƒé xi, we have a subset ≈õ
i x1
i ƒé ≈õ
i xi. We take the Ô¨Åber product
FP
/
{
R
|

≈õ
i x1
i
/ ≈õ
i xi
y
17Technically we need to use isomorphism classes of cone points, but we don‚Äôt worry about this here.

5.4. OPERADS
257
and the image of FP √ë y is a subset of y.
Application 5.4.2.8. Following Application 5.4.2.6 we can use Example 5.4.2.7 as a model
of survival. Each entity survives only for a subset of the phenomena that it can expe-
rience. Under this interpretation, the algebra from Example 5.4.2.7 deÔ¨Ånes survival as
the survival of all parts. That is, suppose that we understand how a super-entity is
composed of sub-entities in the sense that we have a translation between the set of phe-
nomena that may be experienced across the sub-entities and the set of phenomena that
may be experienced by the super-entity. Then the super-entity will survive exactly those
phenomena which translate to phenomena for which each sub-entity desires.
Perhaps a better term than survival would be ‚Äúallowance‚Äù. A bureaucracy consists of
a set of smaller bureaucracies, each of which allows certain phenomena to pass; the whole
bureaucracy allows something to pass if and only if, when translated to the perspective
of each sub-bureaucracy, it is allowed to pass there.
‚ô¶‚ô¶
Example 5.4.2.9. In this example we discuss wiring diagrams that look like this:
E is composed of  
E1, E2, and E3 
in the following way: 
E 
E1 
E2 
E3 
The operad in question will be denoted W; it is discussed in greater detail in [Sp4]. The
objects of W are pairs pC, sq where C is a Ô¨Ånite set and v: C √ë ObpSetq is a function.
Think of such an object as a circle with C-many cables sticking out of it; each cable c is
assigned a set vpcq corresponding to the set of values that can be carried on that cable.
For example E2 ‚Äú pC, vq where |C| ‚Äú 11 and we consider v to be speciÔ¨Åed by declaring
that black wires carry Z and red wires carry tsweet, sour, salty, bitter, umamiu.
The morphisms in W will be pictures as above, formalized as follows. Given ob-
jects pC1, v1q, . . . , pCn, vnq, pD, wq, a morphism F : ppC1, v1q, . . . , pCn, vnqq √ù√ë pD, wq is

258
CHAPTER 5. CATEGORIES AT WORK
a commutative diagram of sets 18
≈Æ
iPn Ci
\ivi
%
i
/ G
x

D
j
o
w
{
ObpSetq
such that i and j are jointly surjective.
Composition of morphisms is easily understood in pictures: given wiring diagrams
inside of wiring diagrams, we can throw away the intermediary circles. In terms of sets,
we perform a pushout.
There is an operad functor W √ë S given by sending pC, vq to ≈õ
cPC vpcq. The idea is
that to an entity deÔ¨Åned as having a bunch of cables carrying variables, a phenomenon is
the same thing as a choice of value on each cable. A wiring diagram translates between
values experienced locally and values experienced globally.
Application 5.4.2.10. In cognitive neuroscience or in industrial economics, it may be that
we want to understand the behavior of an entity such as a mind, a society, or a business
in terms of its structure. Knowing the connection pattern (connectome, supply chain) of
sub-entities should help us understand how big changes are generated from small ones.
Under the functor W √ë S the algebra S √ë Sets from Application 5.4.2.8 becomes an
algebra W √ë Sets. To each entity we now associate some subset of the value-assignments
it can carry.
‚ô¶‚ô¶
Application 5.4.2.11. In [RS], Radul and Sussman discuss propagator networks. These
can presumably be understood in terms of wiring diagrams and their algebra of relations.
‚ô¶‚ô¶
18If one is concerned with cardinality issues, Ô¨Åx a cardinality Œ∫ and replace ObpSetq everywhere with
ObpSetƒÉŒ∫q.

Index
a category
Cat, 126
FLin, 115
Fin, 113, 160
Grp, 113
Grpd, 137
Grph, 115
Mon, 113
PrO, 113
Prop, 138
Sch, 165
Set, 113
Starn, 178
Top, 136
Vect, 136, 225
‚àÜ, 160, 191
C‚ÄìSet, 155
sSet, 191
GrIn, 132
terminal, 127
a functor
Disc: Set √ë Cat, 127, 150
Disc: Set √ë Grph, 127
Ind: Set √ë Cat, 196
Cat √ë Grph, 127, 202
Cat √ë Sch, 166
FLin √ë PrO, 121
Grp √ë Cat, 129
Grp √ë Grpd, 137
Grp √ë Mon, 120
Grpd √ë Cat, 137
Grph √ë Cat, 126, 202
Grph √ë PrO, 122
Grph √ë Set, 122, 149, 202
List: Set √ë Set, 142
Mon √ë Cat, 128
Mon √ë Set, 119, 199
Ob: Cat √ë Set, 127, 150, 202
Paths: Grph √ë Grph, 125, 126, 148,
164
Œ†1 : Top √ë Grpd, 138
PrO √ë Cat, 131, 132, 159, 171, 175
PrO √ë Grph, 121, 132, 202
PrO √ë Set, 122, 202
PrO √ë Top, 231
Sch √ë Cat, 166
Set √ë Mon, 123, 199
Set √ë PrO, 202
Top √ë PrOop, 136
Top √ë Set, 136
VectR √ë Grp, 136
VectR √ë PrO, 137
VectR √ë Top, 137
‚àÜ√ë FLin, 160
a group
E3, 81
GL3, 81
Up1q, 82
Œ£X, 83
a monad
Paths, 236
exceptions, 236
List, 234
maybe, 233
partial functions, 233
a schema
Loop, 170, 241
department store, 102
indexing graphs, 156
a symbol
pF √ì Gq, 196
X{ ‚Äû, 48
rns, 92
Fun, 150
HomSet, 16
HomC, 112
N, 13
Ob, 112
‚Ñ¶, 59
P, 58
259

260
INDEX
Path, 87
R, 32
Z, 13
√º, 72
Àù, 16, 112
colim, 186
Àõ, 154
H, 13
D, 14, 203
D!, 14
@, 14, 203
idX, 17
≈ü
, 192
‚Äì, 17
≈∏, 178
lim, 184
‚åü, 39
√û√ë, 15
Cop, 191
C{X, 184
CX{, 186
``, 70
≈π, 179
‚Äû, 48
¬ª, 28, 159
\, 35
ÀÜ, 31
‚åú, 51
f ¬¥1, 42
:=, 14
a warning
‚Äúset‚Äù of objects in a category, 112
diÔ¨Äerent worldviews, 23
misuse of the, 180
notation for composition, 28
operad functors, 249
operads vs. multicategories, 245
oversimpliÔ¨Åed science, 9
action
left, 72
of a group, 82
of a monoid, 72
orbit of, 83
right, 72
action table, 76
adjoint functors, 199
adjunct, 200
adjunction, 200
adjunction isomorphism, 200
analogy: babies and adults, 199
counit, 242
unit, 242
algebra
operad, 250
an operad
Sets, 248
little n-cubes, 248
little squares, 248
appropriate comparison, 77, 88, 97, 112,
119
arrow, 84
Baez, John, 8
biological classiÔ¨Åcation, 98
canonical, 18
cardinality, 19
category, 112
arithmetic of, 198
as equivalent to schema, 163
cartesian closed, 140
comma, 196
coslice, 186
discrete, 127
equivalence of, 159
free category, 126, 225
Kleisli, 236
non-example, 113, 114
of elements, 192
opposite, 191
presentation, 134
slice, 184
small, 112
underlying graph of, 126
CCCs, 140
characteristic function, 60
coequalizer, 54
colimit, 186
common ground, 231
commuting diagram, 20
component, 142
composition
classical order, 28
diagrammatic order, 28
of functions, 16
of morphisms, 112
concatenation
of lists, 70
of paths, 88

INDEX
261
cone
left, 178
right, 179
congruence, 104
context, 233
coproduct
inclusion functions, 35
coproducts, 172
of sets, 35
universal property of, 36
correspondence
one-to-one, 17
coslice, 186
cospan, 175
currying, 54
as adjunction, 202
via data migration functors, 207
data, 101
valid time, 232
data migration, 208
left pushforward Œ£, 211
pullback ‚àÜ, 209
right pushforward Œ†, 213
database
business rules, 102
category of instances on, 155
foreign key, 102
instance, 108, 135
Kleisli, 240
primary key, 102
schema, 103, 105
tables, 101
descent data, 228
diagam
commutes, 20
diagram, 176
in Set, 20
Dolan, James, 8
dynamical system
continuous, 136
discrete, 106
Eilenberg, Samuel, 7
EnglishiÔ¨Åcation, 29
EnglishiÔ¨Åication, 109
entry
in list, 69
epimorphism, 217
in Set, 60
equalizer, 47, 185
equivalence relation, 48
as partition, 48
equivalence classes, 48
generated, 49
quotient by, 48
exceptions, 236
exponentials
evaluation of, 55
exponentials
in Set, 55
Ô¨Åber product, 39
Ô¨Åber sum, 50
Ô¨Ånite state machine, 74, 195
function, 14
bijection, 60
codomain, 14
composition, 16
domain, 14
equality of, 16
identity, 17
injection, 60
inverse, 17
isomorphism, 17
surjection, 60
functor, 119
adjoint, 200
constant, 205
contravariant, 190
covariant, 190
faithful, 162
full, 162
representable, 218
gateway, 170
geography, 100, 226
graph, 84
as functor, 132
bipartite, 46
chain, 86
converting to a preorder, 93
free category on, 126, 225
homomorphism, 88
paths, 87
paths-graph, 124, 236
symmetric, 133
graph homomorphism
as functor, 156
Grothendieck, 192

262
INDEX
construction, 191
expanding universes, 112
in history, 8
group, 80
action, 82
as category, 129
homomorphism of, 83
of automorphisms, 130
groupoid, 137
fundamental, 137
of material states, 137
hierarchy, 106
hom-set, 112
iÔ¨Ä, 50
image, 16
in olog, 30
inclusion functions, 35
indexed set, 64, 65
as functor, 156
indexing category, 176
induced function, 34
inÔ¨Åx notation, 68
information theory, 141
initial object, 179
in C‚ÄìSet, 216
instance, 108, 135
Kleisli, 240
isomorphism, 116
of sets, 17
join, 95
Joyal, Andr¬¥e, 8
Kan extension
left, 211
right, 213
Kan, Daniel, 8
Kleisli category, 236
labeled null, 212
Lambek, Joachim, 8
Lawvere, William, 8
leaf table, 210
limit, 184
linear order
Ô¨Ånite, 92
list, 69, 234
as functor, 124
concatenation, 70
local-to-global, 7
Mac Lane, Saunders, 7
Markov chain, 241
materials
force extension curves, 54
force-extension curves, 15
meet, 95
Moggi, Eugenio, 8
monad, 232, 234
formalizing context, 233
Kleisli category of, 236
on Grph, 236
on Set, 234
on arbitrary category, 243
monoid, 67
action, 72
additive natural numbers, 68
as category, 128
commutative, 69
cyclic, 71
free, 70, 123
homomorphism, 77
identity element of, 68
initial, 181
inverse of an element in, 80
multiplication formula, 68
of endomorphisms, 130
olog of, 74
presented, 70
terminal, 181
trivial, 69
trivial homomorphism, 78
monomorphism, 217
in Set, 60
morphism, 112
inverse, 116
multicategory, 245
multiset, 63
natural isomorphism, 152
natural transformation, 142
as functor, 185
as reÔ¨Ånement of model, 146
for adding functionality, 153
horizontal composition of, 154
interchange, 154
vertical composition of, 150
whiskering of, 154

INDEX
263
olog, 21
as database schema, 107
aspects, 22
facts, 27
facts in English, 28
images, 30
invalid aspects, 23
path in, 27
relational, 240
rules, 22, 26, 105
sheaf of, 231
types, 21
underlying graph, 85
one-to-one correspondence, 17
open cover, 227
operad
algebra of, 250
colored, 245
morphism of, 250
orbit, 83
rotating earth, 82
order, 91
linear order, 91
morphism, 97
opposite, 97
partial order, 91
preorder, 91
tree, 96
partial function, 233
partial functions, 233
path, 87
PED, 104
permutation, 81
power set, 58
as poset, 94
preimage, 42, 203
preorder
as category, 130
clique in, 94
converting to graph, 93
discrete, 98
generated, 94
indiscrete, 98
join, 95
meet, 95
presheaf, 226
product
as grid, 31
projection functions, 31
products, 168, 170, 182
as not always existing, 171
of sets, 31
universal property of, 32
projection functions, 31
pullback, 184
of sets, 39
pushout, 186
of topological spaces, 189
RDF, 192
as category of elements, 193
relation
binary, 90
equivalence, 48
graph of, 90
relative set, 64
as slice category, 186
representable functor, 218
representation theory, 225
restriction of scalars, 79
retraction, 54
RNA transcription, 17
schema, 105
as category presentation, 134
as equivalent to category, 163
as syntax, 134
congruence, 104
fact table, 209
leaf table, 103, 209
morphism, 164
of a database, 103
Path equivalence declaration (PED),
104
schematically implied reference spread, 219
security, 99
set, 13
arithmetic of, 56
Lawvere‚Äôs description of, 140
permutation of, 81
set builder notation, 14
sheaf
condition, 228
descent data, 228
glueing, 228
sheaves, 226
simplex, 58
simplicial complex, 58, 231

264
INDEX
simplicial set, 191
skeleton, 161
Skolem, 219
Skolem variable, 212
slice, 184
space, 99, 135
topological, 135
space group, 81
span, 45
composite, 45
subcategory
full, 115, 195
subobject classiÔ¨Åer
in C‚ÄìSet, 222
in Set, 59
subset, 13
as function, 15
characteristic function of, 60
subway, 189
symmetry, 81
terminal object, 179
in C‚ÄìSet, 216
in Set, 47
topological space, 136
topology, 135
topos, 222
tree, 96
root, 96
trivial homomorphism
of monoids, 78
universal property, 170
products, 32
pullback, 184
vector Ô¨Åeld, 116, 138
conservative, 138
vector space, 136, 225
vertex, 84
wiring diagram, 254
Yoneda‚Äôs lemma, 220

Bibliography
[Ati]
Atiyah, M. (1989) ‚ÄúTopological quantum Ô¨Åeld theories‚Äù. Publications
Math¬¥ematiques de l‚ÄôIH¬¥ES 68 (68), pp. 175‚Äì186.
[Axl]
Axler, S. (1997) Linear algebra done right. Springer.
[Awo]
S. Awodey. (2010) Category theory. Second edition. Oxford Logic Guides, 52.
Oxford University Press, Oxford.
[Bar]
Bralow, H. (1961) ‚ÄúPossible principles underlying the transformation of
sensory messages‚Äù. Sensory communication, pp. 217 ‚Äì 234.
[BD]
Baez, J.C.; Dolan, J. (1995) ‚ÄúHigher-dimensional algebra and topological
quantum Ô¨Åeld theory‚Äù. Journal of mathematical physics vol 36, 6073.
[BFL]
Baez, J.C.; Fritz, T.; Leinster, T. (2011) ‚ÄúA characterization of entropy in
terms of information loss.‚Äù Entropy 13, no. 11.
[BS]
Baez, J.C.; Stay, M. (2011) ‚ÄúPhysics, topology, logic and computation: a
Rosetta Stone.‚Äù New structures for physics, 95√ê172. Lecture Notes in Phys.,
813, Springer, Heidelberg.
[BP1]
Brown, R.; Porter, T. (2006) ‚ÄúCategory Theory: an abstract setting for
analogy and comparison, In: What is Category Theory? Advanced Studies in
Mathematics and Logic, Polimetrica Publisher, Italy, pp. 257-274.
[BP2]
Brown, R.; Porter, T. (2003) ‚ÄúCategory theory and higher dimensional
algebra: potential descriptive tools in neuroscience‚Äù, Proceedings of the
International Conference on Theoretical Neurobiology, Delhi, edited by
Nandini Singh, National Brain Research Centre, Conference Proceedings 1
80-92.
[BW]
M. Barr, C. Wells. (1990) Category theory for computing science. Prentice
Hall International Series in Computer Science. Prentice Hall International,
New York.
[Big]
Biggs, N.M. (2004) Discrete mathematics. Oxford University Press, NY.
[Dia]
Diaconescu, R. (2008) Institution-independent model theory Springer.
[DI]
D¬®oring, A.; Isham, C. J. ‚ÄúA topos foundation for theories of physics. I.
Formal languages for physics.‚Äù J. Math. Phys. 49 (2008), no. 5, 053515.
265

266
BIBLIOGRAPHY
[EV]
Ehresmann, A.C.; Vanbremeersch, J.P. (2007) Memory evolutive systems;
hierarchy, emergence, cognition. Elsevier.
[Eve]
Everett III, H. (1973). ‚ÄúThe theory of the universal wave function.‚Äù In The
many-worlds interpretation of quantum mechanics (Vol. 1, p. 3).
[Gog]
Goguen, J. (1992) ‚ÄúSheaf semantics for concurrent interacting objects‚Äù
Mathematical structures in Computer Science Vol 2, pp. 159 ‚Äì 191.
[Gro]
Grothendieck, A. (1971). S¬¥eminaire de G¬¥eom¬¥etrie Alg¬¥ebrique du Bois Marie -
1960-61 - RevÀÜetements ¬¥etales et groupe fondamental - (SGA 1) (Lecture notes
in mathematics 224) (in French). Berlin; New York: Springer-Verlag.
[Kro]
Kr¬®omer, R. (2007). Tool and Object: A History and Philosophy of Category
Theory, Birkhauser.
[Lam]
Lambek, J. (1980) ‚ÄúFrom Œª-calculus to Cartesian closed categories‚Äù. In
Formalism, Academic Press, London, pp. 375 ‚Äì 402.
[Law]
Lawvere, F.W. (2005) ‚ÄúAn elementary theory of the category of sets (long
version) with commentary.‚Äù (Reprinted and expanded from Proc. Nat. Acad.
Sci. U.S.A. 52 (1964)) Repr. Theory Appl. Categ. 11, pp. 1 ‚Äì 35.
[Kho]
Khovanov, M. (2000) ‚ÄúA categoriÔ¨Åciation of the Jones polynomial‚Äù Duke
Math J..
[Le1]
Leinster, T. (2004) Higher Operads, Higher Categories. London Mathematical
Society Lecture Note Series 298, Cambridge University Press.
[Le2]
Leinster, T. (2012) ‚ÄúRethinking set theory‚Äù. ePrint available
http://arxiv.org/abs/1212.6543.
[Lin]
Linsker, R. (1988) ‚ÄúSelf-organization in a perceptual network‚Äù. Computer 21,
no. 3, pp. 105 ‚Äì 117.
[LM]
Landry, E.; Marquis, J-P., 2005, ‚ÄùCategories in Contexts: historical,
foundational, and philosophical.‚Äù Philosophia Mathematica, (3), vol. 13, no. 1,
1 ‚Äì 43.
[LS]
F.W. Lawvere, S.H. Schanuel. (2009) Conceptual mathematics. A Ô¨Årst
introduction to categories. Second edition. Cambridge University Press,
Cambridge.
[MacK]
MacKay, D.J. (2003). Information theory, inference and learning algorithms.
Cambridge university press.
[Mac]
Mac Lane, S. (1998) Categories for the working mathematician. Second
edition. Graduate Texts in Mathematics, 5. Springer-Verlag, New York.
[Mar1]
Marquis, J-P. (2009) From a Geometrical Point of View: a study in the
history and philosophy of category theory, Springer.
[Mar2]
Marquis, J-P, ‚ÄúCategory Theory‚Äù, The Stanford Encyclopedia of Philosophy
(Spring 2011 Edition), Edward N. Zalta (ed.), http:
//plato.stanford.edu/archives/spr2011/entries/category-theory

BIBLIOGRAPHY
267
[Min]
Minsky, M. The Society of Mind. Simon and Schuster, NY 1985.
[Mog]
Moggi, E. (1989) ‚ÄúA category-theoretic account of program modules.‚Äù
Category theory and computer science (Manchester, 1989), 101√ê117, Lecture
Notes in Comput. Sci., 389, Springer, Berlin.
[nLa]
nLab authors. http://ncatlab.org/nlab/show/HomePage
[Pen]
Penrose, R. (2006) The road to reality. Random house.
[RS]
Radul, A.; Sussman, G.J. (2009). ‚ÄúThe art of the propagator‚Äù. MIT Computer
science and artiÔ¨Åcial intelligence laboratory technical report.
[Sp1]
Spivak, D.I. (2012) ‚ÄúFunctorial data migration‚Äù. Information and
communication
[Sp2]
Spivak, D.I. (2012) ‚ÄúQueries and constraints via lifting problems‚Äù. Submitted
to Mathematical structures in computer science. ePrint available:
http://arxiv.org/abs/1202.2591
[Sp3]
Spivak, D.I. (2012) ‚ÄúKleisli database instances‚Äù. ePrint available:
http://arxiv.org/abs/1209.1011
[Sp4]
Spivak, D.I. (2013) ‚ÄúThe operad of wiring diagrams: Formalizing a graphical
language for databases, recursion, and plug-and-play circuits‚Äù. Available
online: http://arxiv.org/abs/1305.0297
[SGWB] Spivak D.I., Giesa T., Wood E., Buehler M.J. (2011) ‚ÄúCategory Theoretic
Analysis of Hierarchical Protein Materials and Social Networks.‚Äù PLoS ONE
6(9): e23911. doi:10.1371/journal.pone.0023911
[SK]
Spivak, D.I., Kent, R.E. (2012) ‚ÄúOlogs: A Categorical Framework for
Knowledge Representation.‚Äù PLoS ONE 7(1): e24274.
doi:10.1371/journal.pone.0024274.
[WeS]
Weinberger, S. (2011) ‚ÄúWhat is... Persistent Homology?‚Äù AMS.
[WeA]
Weinstein, A. (1996) ‚ÄúGroupoids: unifying internal and external symmetry.
Notices of the AMS Vol 43, no. 7, pp. 744 ‚Äì 752.
[Wik]
Wikipedia (multiple authors). Various articles, all linked with a
hyperreference are scattered throughout this text. All accessed December 6,
2012 ‚Äì September 17, 2013.

MIT OpenCourseWare
http://ocw.mit.edu
18.S996 Category Theory for Scientists
Spring 2013
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.

