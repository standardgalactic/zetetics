Footer
#jenkinsconf
Jenkins 101
Getting Started With Jenkins!
Lorelei McCollum
IBM Verse Test Architect

Footer
#jenkinsconf
2
●
Install
●
Build
●
Design First
●
Configuring Jenkins jobs
●
Parameterize
●
Workspace
●
Jenkins Nodes
●
Security
●
Source Control for jobs
●
Groovy
●
Plugins
Getting started with Jenkins

#jenkinsconf
Footer
3
Installing Jenkins
●Easy instructions to follow for whatever operating system 
you choose on Jenkins-CI.org
– Supports Various Linux/Unix installations as well as Windows
●https://wiki.jenkins-
ci.org/display/JENKINS/Installing+Jenkins

#jenkinsconf
Footer
4
●
What is a Jenkins “Build”?
●
Not necessarily a product build
●
Build is to a Jenkins job as a main method is to java class
Jenkins “Build”

#jenkinsconf
Footer
5
3 Main Parts to a Jenkins Job
Pre Build
Build
Post Build
●Job allows for custom configuration of all these steps via various plugins
●Need to understand the “Config” of a job before you create one
●Understand what the job can do for you!
●Plugins can contribute anywhere! They determine what actions you have

Footer
#jenkinsconf
6
Examples of Build Actions

Footer
#jenkinsconf
7
Examples of Post Build actions

#jenkinsconf
Footer
8
Design First
●
Re-Configuring jobs can be painful and tedious
●
Design jobs so they are easy to update/modify
●
What could change in your pipeline over time, think ahead!
●
Understand the Jenkins job and all the pre/post build options
●
Start/Stop/Restart pipelines from any step
●
Debugging your pipeline
●
Use source control for storing all aspects of your pipeline (Extended Choice Parameter)
●
Start small, then expand, use naming conventions (Nested View Plugin)
●
Design out your pipeline ahead of time, then implement in Jenkins

#jenkinsconf
Footer
9
Configuring Jenkins Jobs
●
Anything command line - Jenkins can execute
●
Don't hard-code things that could change (Extended Choice Parameter Plugin)
●
Security – who can build and configure (Matrix Authorization Strategy Plugin)
●
Jenkins job results (xUnit Plugin)
●
Post processing of results (Publish jUnit/xUnit results, Email-ext plugin)
●
Use the workspace to your benefit
●
Create and pass environment variables (Environment Injector Plugin)
●
There may be a better solution than using “blocking jobs”
●
How to maintain your jobs/slave nodes/pipeline?

#jenkinsconf
Footer
10
Parameterize
●
Allows Job re-use
●
Easy to maintain and update
●
Think about how often jobs could change
●
Think about your entire pipeline
●
What happens when you have a new release/version of your 
product?
●
Params change, use source control for them (Extended Choice Parameter Plugin) 
●
Can help you to scale and run more in parallel without the added 
maintenance of duplicate jobs (Multi-job Plugin)

#jenkinsconf
Footer
11
How do you get a “build” with parameters

#jenkinsconf
Footer
12
Extended Choice Parameter
Example of using properties file that is pulled from source
Jenkins job that builds your “config/param project” on a schedule to a “custom workspace”

#jenkinsconf
Footer
13
●Job Names – 
●Think about what different types of jobs you will have an see if you can adopt a naming 
convention. Spaces in job names may make remote calling of this job hard
●Parameter Names – 
●Think about how the job will be called. Spaces in your parameter names can make remote 
calling of this job hard
●Build Name – 
●Can set this to use environment variables to be easily readable by user
●Spaces can make your life harder, if you don't need them, don't use them
●You_can_use_this_style_instead and will make remote API's easier to use
Naming Conventions

#jenkinsconf
Footer
14
Jenkins Workspace
●
All Jenkins jobs have their “own” workspace on the node 
they run on
●
Artifacts get stored for a given build and copied into the 
workspace
●
Use the workspace to your benefit
●
Save job state
●
If Jenkins is restarted, jobs currently executing are lost
●
Can force jobs to use a custom workspace
●
Concurrent jobs get a “@<int> type workspace name if 
more than one are going at the same time

Footer
#jenkinsconf
15
Jenkins Nodes
●
Easy to create in Manage Jenkins
●
Term Executors refers to how many jobs can be running 
concurently on that node
●
Can choose how you want them connected to Jenkins
●
JNLP for windows works well
●
Can set up as service or use a batch file that gets called on 
startup
●
SSH works well for unix/linux
●
Can use Jenkins API or groovy to create nodes dynamically
●
Best Practice: Limit how many executors you give your master

#jenkinsconf
Footer
16
Creating a new “Dumb Node”

#jenkinsconf
Footer
17
Connecting & Usage of your new node
●
Choose your connect method
●
Choose how the slave is used by the jobs
●
If you don't specify it will default to “utilizing this node as much as possible”

#jenkinsconf
Footer
18
How do you decide which jobs go to which nodes?
●If don't have to specify, Jenkins will choose a node with executors available
●Can specify in the job itself
Choose label or node name
●Best to use naming standards and assign “labels” to your nodes to group or 
categorize them
●When you create nodes you can determine what can run on them as well

#jenkinsconf
Footer
19
Plugins for Job Node Assignment
●Various plugins allow for UI options to choose the “label” or “Node” to run 
the job against
(NodeLabel Parameter Plugin)
●Groovy script can decide as well based on user parameters
(Groovy Label Assignment Plugin )

#jenkinsconf
Footer
20
Groovy Label Assignment Plugin

#jenkinsconf
Footer
21
NodeLabel Parameter Plugin - Node

#jenkinsconf
Footer
22
NodeLabel Parameter Plugin - Label

Footer
#jenkinsconf
23
Security Of Jenkins
●
Different  ways you can lock down your Jenkins server
●
Think about who you want to have access
●
How you control your access and ensure the right people have 
access
●
Look at using groups to control access
●
JenkinsRead – can only read and see and search and login
●
JenkinsDevelopment – can create new jobs, configure jobs, 
create nodes
●
JenkinsAdmin – Administer the Jenkins server
●
Global Security trumps job based security

#jenkinsconf
Footer
24
Matrix Authorization Strategy Plugin 
– global level
●
Global trumps project based
●
Groups allow for adding/removing people easily
●
There are a lot of options, having Admins manually adding people can get tedious
●
Lock down Anonymous!
JenkinsAdmin
JenkinsDev
JenkinsRead

#jenkinsconf
Footer
25
Matrix Authorization Strategy Plugin 
– job level
●
Teams can set up their own groups to control access to their jobs
●
Makes it easy to add/remove people without updating the job itself
●
Teams own their jobs, don't need Admin to update access

Footer
#jenkinsconf
26
Source Control for Jobs
●
Can store your job config, scripts, shell scripts,batch files and artifacts your 
job needs in source and pull from source at job runtime
●
Should try not to put script code directly into the jenkins job and instead 
reference a file in the workspace
●
There are exceptions to this, when you don't need to put a script in source
●
Can use the source control integration to deploy these artifacts at build time 
to the workspace and then use them to execute your build
●
Having a “jenkins-config” allows you to track and make changes to your 
jenkins jobs!
●
Set up your jobs source code management section to pull code from this 
repository

#jenkinsconf
Footer
27
Implementing source control for jenkins job scripts
Create a jenkins job to build this source project: 
Name: Admin Update Pipeline Config

#jenkinsconf
Footer
28
Pull the scripts from source in your other 
jenkins jobs
Now to use these scripts directly from source

#jenkinsconf
Footer
29
Pulling job parameter options from source!

#jenkinsconf
Footer
30
Pull groovy scripts directly from source!
Call the scripts directly from Admin Update Pipeline Config
Groovy Postbuild runs on the master and same with the Email-ext pre-send script

Footer
#jenkinsconf
31
Groovy
●
Is an agile and dynamic language for the Java Virtual Machine
●
Is a shortened syntax, looks a lot like java, and understands java syntax
●
Jenkins jobs can execute groovy scripts  (Groovy plugin)
●
You can do a lot with your pipeline dynamically with groovy scripts
●
Groovy Script vs System Groovy Script
●
The plain "Groovy Script" is run in a forked JVM, on the slave where the 
build is run. It's the basically the same as running the "groovy" 
command and pass in the script.
●
The system groovy script, OTOH, runs inside the Jenkins master's 
JVM. Thus it will have access to all the internal objects of Jenkins, so 
you can use this to alter the state of Jenkins

#jenkinsconf
Footer
32
Some useful groovy snippets!
Most of these scripts will 
require some imports 
such as:
import jenkins.model.*
import hudson.model.*
import hudson.slaves.*
//function to poll how many jobs running on a given slave
def polljobs(node){
 
for (slave in jenkins.model.Jenkins.instance.slaves) {
  
if (slave.name.equals(node)){
 
return slave.getComputer().countBusy()
  
 
}
}
  
return -1
}
slave & slave.getComputer() has all sorts of methods you can access off it – google the javadoc!
///function for determing if a node is online
def isonline(node){
for (slave in jenkins.model.Jenkins.instance.slaves) {
 
if (slave.name.equals(node)){
return slave.getComputer().isOnline()
 
}
}
 
return false
}

#jenkinsconf
Footer
33
Groovy Snippet to restart a node
///function to restart a node
def restart(node){
for (slave in jenkins.model.Jenkins.instance.slaves) {
if (slave.name.equals(node)){
def channel = slave.getComputer().getChannel()
RemotingDiagnostics.executeGroovy( """
if (Functions.isWindows()) {
  
'shutdown /r /t 10 /c "Restarting after Jenkins test 
completed"'.execute()
} else {
"sudo reboot".execute()
}
""", channel)
  
}
  
}
}

#jenkinsconf
Footer
34
Create Reports and links for your jobs
●Can create quick links and email reports for the job that 
ran
●Use Groovy to loop through subbuilds and their artifacts 
and results and expose the data you want
●Use Groovy Postbuild plugin or Groovy system scripts

#jenkinsconf
Footer
35
Groovy Quick Links with Groovy Postbuild Plugin
def testResult = manager.build.testResultAction
if(testResult != null){
  
testResult = manager.build.testResultAction.result
def total = testResult.totalCount
 
def fail = testResult.failCount
manager.build.setDescription("${total} VPs <br> ${fail} Failures")
}
//logs the quick link on the jenkins build page
def logQuickLink(result,link,text) {
if(link != null){
if(!result.equals("SUCCESS")){
manager.createSummary("folder.gif").appendText("<h1>FAILED ${text} <a 
href=\"${link}\">Result Viewer</a></h1>", false, false, false, "red")
}
}else{
 
manager.createSummary("error.gif").appendText("<h1>${text}  No Results </h1>", 
false, false, false, "red")
 
}
}

#jenkinsconf
Footer
36
Groovy Quick Links with Groovy System Script
import org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildSummaryAction
GroovyPostbuildSummaryAction action= 
logQuickLink(buildResult,logViewerURL,shortName,listener);
if(action != null){
build.getActions().add(action);
 }
Assumes you already created a build variable and that you have a function 
similar to previous page that creates this GroovyPosbuildSummaryAction object

Footer
#jenkinsconf
37
Come see my session “Getting Groovy with 
Jenkins” to learn more about the fun groovy 
scripts you can create!

Footer
#jenkinsconf
38
PLUGINS!

#jenkinsconf
Footer
39
Build Time-out Plugin

#jenkinsconf
Footer
40
Environment Injector Plugin
●
What happens in a build step is scoped to that step
●
Not obvious how to pass environment params across build steps
●
This plugin lets you do this
●
In one build step, write out parameters or things you want to save to a 
properties file in the WORKSPACE
●
Then in the next build step use the Inject environment variables option

#jenkinsconf
Footer
41
Build-Name Setter Plugin
 
●
Operating System & Stream are build parameters to this job
●
Changes what you see in the build history!
●
Supports environment variables and parameters
●
Especially helpful for builds with parameters

#jenkinsconf
Footer
42
Multi Job Plugin
Phases are sequential whilst jobs inside each Phase are parallel
 When creating new Jenkins job you have an option to create MultiJob project.
 
This job can define in the Build section phases that contains one job or more.
● All jobs belong to one phase will be executed in parallel (if there are enough executors on the 
node)
● All jobs in phase 2 will be executed only after jobs in phase 1 are completed etc.

#jenkinsconf
Footer
43
Nested View Plugin
●
Nested Folders within a view
●
Hide views and jobs from other areas

#jenkinsconf
Footer
44
Nested View Plugin – click into a “nested folder”

#jenkinsconf
Footer
45
Email-ext plugin
●Advanced settings gives you the ability to execute some groovy code to modify 
the email based on the build that executed
●Can use environment variables in the subject and body of the email to be sent
●Set up triggers to determine when to send the email and to who

#jenkinsconf
Footer
46
Email-ext plugin

Footer
#jenkinsconf
47
Email-ext plugin
advanced  (can use a script in source too!)

#jenkinsconf
Footer
48
Useful Plugins Covered in Presentation
●Build-Name Setter Plugin 
●Conditional Build Step Plugin 
●Downstream Build View Plugin
●Environment Injector Plugin 
●Extended Choice Parameter Plugin
●Multi Job Plugin
●Groovy Plugin
●Parameterized Trigger Plugin 
●Groovy Label Assignment Plugin 
●Nested View Plugin  
●Run Condition Plugin 
●Show Build parameters Plugin 
●View Job Filters Plugin 
●Groovy PostBuild Plugin
●Junit Plugin
●Xunit Plugin
●Claim Plugin
●EnvInject Plugin
●TeamConcert Plugin
●Build User Vars Plugin
●Log Parser Plugin
●Flexible Publish Plugin
●Build-time-out Plugin 
●Copy Artifact Plugin
●NodeLabel Parameter Plugin
●Email-ext plugin

#jenkinsconf
Footer
49
Stuck? Need Help?
●
Google is your friend, especially stackoverflow
●
Jenkins book by O'Reilly
●
Forums, communities, use social platforms
●
Chances are other people have had your question and may have a solution
●
Tons of plugins out there
●
Create your own plugin, or help contribute to enhance/fix existing plugins
●
Report bugs/issues
●
Helpful Links
●
http://jenkins-ci.org/
●
http://www.cloudbees.com/jenkins

Footer
#jenkinsconf
50
Questions?

#jenkinsconf
Footer
Please Share Your Feedback
• Did you find this session valuable?
• Please share your thoughts in the 
Jenkins User Conference Mobile App.
• Find the session in the app and click 
on the feedback area.
51

