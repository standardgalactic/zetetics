See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/2663060
Chu Spaces: A Model Of Concurrency
Article · September 1994
Source: CiteSeer
CITATIONS
78
READS
989
2 authors:
Vineet Gupta
Google Inc.
66 PUBLICATIONS   2,437 CITATIONS   
SEE PROFILE
Vaughan Pratt
Stanford University
177 PUBLICATIONS   13,707 CITATIONS   
SEE PROFILE
All content following this page was uploaded by Vineet Gupta on 12 October 2014.
The user has requested enhancement of the downloaded file.

CHU
SP
A
CES:
A
MODEL
OF
CONCURRENCY
a
disser
t
a
tion
submitted
to
the
dep
ar
tment
of
computer
science
and
the
committee
on
gradua
te
studies
of
st
anf
ord
university
in
p
ar
tial
fulfillment
of
the
requirements
f
or
the
degree
of
doctor
of
philosophy
By
Vineet
Gupta
August
		

c

Cop
yrigh
t
		
b
y
Vineet
Gupta
All
Righ
ts
Reserv
ed
ii

I
certify
that
I
ha
v
e
read
this
dissertation
and
that
in
m
y
opinion
it
is
fully
adequate,
in
scop
e
and
in
qualit
y
,
as
a
dissertation
for
the
degree
of
Do
ctor
of
Philosoph
y
.
V
aughan
R.
Pratt
(Principal
Advisor)
I
certify
that
I
ha
v
e
read
this
dissertation
and
that
in
m
y
opinion
it
is
fully
adequate,
in
scop
e
and
in
qualit
y
,
as
a
dissertation
for
the
degree
of
Do
ctor
of
Philosoph
y
.
John
C.
Mitc
hell
I
certify
that
I
ha
v
e
read
this
dissertation
and
that
in
m
y
opinion
it
is
fully
adequate,
in
scop
e
and
in
qualit
y
,
as
a
dissertation
for
the
degree
of
Do
ctor
of
Philosoph
y
.
R.
J.
v
an
Glabb
eek
Appro
v
ed
for
the
Univ
ersit
y
Committee
on
Graduate
Studies:
Dean
of
Graduate
Studies
iii

Ac
kno
wledgemen
ts
A
signican
t
p
ortion
of
this
thesis
represen
ts
join
t
w
ork
with
m
y
advisor
V
aughan
Pratt,
ho
w
ev
er,
his
ideas
and
philosoph
y
p
erv
ade
eac
h
and
ev
ery
section
of
it.
He
has
b
een
instrumen
tal
in
shaping
m
y
ideas
of
concurren
t
systems
and
m
y
view
of
researc
h
in
general,
and
his
supp
ort
and
in
tellectual
guidance
ha
v
e
made
this
dissertation
p
ossible.
I
w
ould
also
lik
e
to
thank
the
mem
b
ers
of
m
y
reading
committee,
Dr.
R.
J.
v
an
Glabb
eek,
Prof.
John
Mitc
hell
and
Prof.
Mic
hael
Genesereth
for
taking
the
time
to
carefully
read
the
initial
drafts
and
pro
viding
extensiv
e
commen
ts.
Man
y
stim
ulating
discussions
with
Carolyn
Bro
wn,
Ross
Casley
,
Rob
v
an
Glabb
eek,
Radha
Jagadeesan,
Gordon
Plotkin,
Vija
y
Sarasw
at
and
Ramesh
Visw
anathan
ha
v
e
in
n
umerous
w
a
ys
con
tributed
to
the
ideas
of
this
thesis
|
I
am
indebted
to
eac
h
one
of
them.
I
gratefully
ac
kno
wledge
the
generous
nancial
supp
ort
pro
vided
b
y
Accel
P
artners
in
the
form
of
a
Cen
ter
for
T
elecomm
unications
fello
wship,
and
w
ould
lik
e
to
thank
Dr.
Dixon
Doll
and
Prof.
Dale
Harris
in
this
con
text.
Substan
tial
supp
ort
w
as
also
pro
vided
b
y
sev
eral
NSF
gran
ts
and
a
gift
from
Mitsubishi
Corp
oration.
In
a
v
ery
signican
t
w
a
y
,
this
thesis
is
a
pro
duct
of
the
condence
that
m
y
wife
Mudita
has
alw
a
ys
expressed
in
me
|
a
sp
ecial
\thank
y
ou"
to
her.
Another
sp
ecial
thank
y
ou
go
es
to
m
y
sister
Seema,
for
all
her
encouragemen
t.
And
nally
,
I
can-
not
ev
en
b
egin
to
express
m
y
gratitude
to
m
y
paren
ts,
this
thesis
is
aectionately
dedicated
to
them.
iv

Con
ten
ts
Ac
kno
wledgemen
ts
iv

In
tro
duction


Mo
dels
of
Concurrency

.
Action
based
mo
dels
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

..
P
etri
nets
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

..
Calculus
of
Comm
unicating
Systems
and
transition
graphs
:
:

..
T
races
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
0
..
Higher
dimensional
automata
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Ev
en
t
based
mo
dels
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

..
P
artially
ordered
m
ultisets
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

..
Ev
en
t
Structures
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

..
Geometric
Automata
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:


Denition
of
a
Ch
u
space

.
Relations
and
Ch
u
spaces
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Pictorial
represen
tation
of
Ch
u
spaces
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
P
artial
Distributiv
e
Lattices
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
0
.
The
logic
represen
tation
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Alternativ
e
presen
tations:
dualit
y
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
More
examples
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Ch
u's
Construction:
The
categorical
denition
:
:
:
:
:
:
:
:
:
:
:
:
:

v


The
Category
of
Ch
u
Spaces
	
.
Maps
b
et
w
een
Ch
u
Spaces
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
	
.
Dualit
y
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
The
in
ternal
Hom
functor
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:


Concurrency
Applications

.
Beha
vior
accepted
b
y
Ch
u
spaces
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Dual
view
of
a
Ch
u
space
|
Sc
hedules
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Logical
represen
tation
of
Ch
u
spaces
|
Gates
as
acceptors
:
:
:
:
:
:
	
.
Asp
ects
of
concurrency
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
0
.
Morphisms
as
sim
ulations
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Programming
an
automaton
or
a
sc
hedule
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:


Algebra
of
Ch
u
Spaces

.
Denitions
and
in
terpretation
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Iden
tities
and
Equiv
alences
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
0
.
Connection
with
linear
logic
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
	

Comparison
with
other
mo
dels

.
Ev
en
t
Structures
and
P
etri
nets
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
A
Ch
u
Seman
tics
for
CCS
and
CSP
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:


F
uture
Researc
h

Bibliograph
y

vi

List
of
Figures
.
A
P
etri
net,
and
a
few
steps
of
its
execution.
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Higher
Dimensional
Automata.
Shaded
area
represen
ts
a
surface.
:
:

.
Fiv
e
Ch
u
spaces.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
The
four
extensional
Ch
u
spaces
of
Figure
.,
dra
wn
as
partial
Bo
olean
Algebras.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
	
.
The

extensional
T
0
Ch
u
spaces
of
Figure
.
dra
wn
as
p
dlats
:
:
:
:

.
Incompleteness
of
P
oset
Structure
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
The
Ch
u
spaces
with
jAj

.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
A
Ch
u
map
in
matrix
form.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
0
.
Sc
hedules
and
Automata
for
some
concurren
t
b
eha
viors.
:
:
:
:
:
:
:

.
Automata
for
disjunctiv
e
enabling
and
p
ostp
oned
concurrency
:
:
:
:

.
Sc
hedule
and
Automaton
for
the
m
utual
exclusion
pro
cess.
:
:
:
:
:
:

.
The
sum
of
t
w
o
gates.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
	
.
The
pro
duct
of
t
w
o
gates.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
0
.
Choice
of
t
w
o
Ch
u
spaces.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
T
ensor
pro
duct
of
Ch
u
spaces.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
Prexing
a
Ch
u
space.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
P
artial
Sync
hronous
Pro
duct
of
P
and
Q.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

.
A
P
etri
net
for
p
ostp
oned
concurrency
,
and
one
whic
h
cannot
b
e
rep-
resen
ted
as
a
Ch
u
space.
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:
:

vii

Abstract
A
Ch
u
space
is
a
binary
relation
b
et
w
een
t
w
o
sets.
In
this
thesis
w
e
sho
w
that
Ch
u
spaces
form
a
non-in
terlea
ving
mo
del
of
concurrency
whic
h
extends
ev
en
t
structures
while
endo
wing
them
with
an
algebraic
structure
whose
natural
logic
is
linear
logic.
W
e
pro
vide
sev
eral
equiv
alen
t
denitions
of
Ch
u
spaces,
including
t
w
o
pictorial
represen
tations.
Ch
u
spaces
represen
t
pro
cesses
as
automata
or
sc
hedules,
and
Ch
u
dualit
y
giv
es
a
simple
w
a
y
of
con
v
erting
b
et
w
een
sc
hedules
and
automata.
W
e
sho
w
that
Ch
u
spaces
can
represen
t
v
arious
concurrency
concepts
lik
e
conict,
temp
oral
precedence
and
in
ternal
and
external
c
hoice,
and
they
distinguish
b
et
w
een
causing
and
enabling
ev
en
ts.
W
e
presen
t
a
pro
cess
algebra
for
Ch
u
spaces
including
the
standard
com
binators
lik
e
parallel
comp
osition,
sequen
tial
comp
osition,
c
hoice,
in
teraction,
restriction,
and
sho
w
that
the
v
arious
op
erational
iden
tities
b
et
w
een
these
hold
for
Ch
u
spaces.
The
solution
of
recursiv
e
domain
equations
is
p
ossible
for
most
of
these
op
erations,
giv-
ing
us
an
expressiv
e
sp
ecication
and
programming
language.
W
e
dene
a
history
preserving
equiv
alence
b
et
w
een
Ch
u
spaces,
and
sho
w
that
it
preserv
es
the
causal
structure
of
a
pro
cess.

Chapter

In
tro
duction
This
dissertation
presen
ts
a
mo
del
of
concurren
t
b
eha
vior
called
Ch
u
spaces.
W
e
prop
ose
this
mo
del
as
a
simple
y
et
eectiv
e
means
of
understanding
the
mathematics
b
ehind
concurrency
.
The
goal
of
an
y
mo
del
of
concurrency
is
to
formalize
the
notion
of
concurren
t
b
eha
vior.
Whenev
er
a
programmer
writes
a
program,
he
or
she
has
some
in
tuitiv
e
idea
of
ho
w
the
system
will
b
eha
v
e.
F
or
example,
if
one
writes
if
(a
or
b)
then
A,
then
one
has
some
notion
of
ho
w
the
system
w
ould
ev
aluate
a
or
b.
This
ma
y
or
ma
y
not
corresp
ond
to
ho
w
the
system
actually
do
es
the
ev
aluation.
The
purp
ose
of
a
mathematical
mo
del
is
to
mak
e
precise
the
in
tuitions,
so
that
there
is
no
gap
b
et
w
een
the
user's
p
ersp
ectiv
e
and
the
actual
implemen
tation.
This
gap
is
ev
en
more
apparen
t
in
concurrency
,
making
mathematical
mo
dels
absolutely
necessary
.
The
second
goal
is
to
mak
e
a
v
ailable
the
to
ols
that
mathematicians
ha
v
e
dev
elop
ed
o
v
er
the
y
ears
to
designers
and
users
of
concurren
t
systems.
This
is
clear
b
y
analogy
with
other
areas
of
computer
science,
for
example
computer
graphics,
whic
h
has
clearly
b
enetted
from
the
mathematical
mo
dels
of
geometry
|
v
ector
spaces,
metric
spaces,
top
ology
etc.
These
ha
v
e
not
only
led
to
a
formalization
of
graphics,
but
ha
v
e
also
led
to
a
v
ariet
y
of
mathematical
to
ols
for
graphics.
W
e
seek
a
similar
mo
del
for
concurren
t
b
eha
vior,
whic
h
w
ould
help
dev
elop
to
ols
useful
for
designing
and
v
erifying
concurren
t
systems
|
traditional
to
ols
for
debugging
and
sim
ulation
are
tailored
to
deterministic
sequen
tial
programs
and
are
v
ery
inadequate
for
concurren
t
programs.


CHAPTER
.
INTR
ODUCTION

Man
y
mo
dels
of
concurren
t
b
eha
vior
already
exist
|
P
etri
nets,
automata,
CCS,
ev
en
t
structures
etc.
So
wh
y
do
w
e
need
a
new
mo
del?
Our
exp
erience
with
these
mo
dels
has
sho
wn
us
that
none
of
them
are
as
w
ell
matc
hed
to
concurren
t
b
eha
vior
as
sa
y
v
ector
spaces
are
to
graphics.
W
e
will
examine
a
n
um
b
er
of
these
mo
dels
in
detail
in
the
next
c
hapter
to
sho
w
this.
In
this
dissertation
w
e
prop
ose
a
mo
del
whic
h
seems
almost
trivial
due
to
its
mathematical
simplicit
y
,
y
et
is
ric
h
enough
to
subsume
man
y
of
the
mo
dels
describ
ed
ab
o
v
e.
Cen
tral
to
the
notion
of
all
computer
systems
is
the
idea
of
a
state,
whic
h
is
a
snapshot
of
a
system
at
an
y
time.
The
other
basic
idea
is
that
systems
can
mo
v
e
from
one
state
to
another
b
y
doing
certain
actions.
W
e
tak
e
just
these
t
w
o
ideas,
and
without
imp
osing
up
on
them
an
y
additional
mathematical
structure,
use
them
to
get
a
mo
del
of
concurrency
.
So
a
system
is
mo
deled
as
a
pair
of
sets
|
the
set
of
states
it
can
b
e
in,
and
the
set
of
ev
en
ts
(o
ccurrences
of
transitions)
that
can
happ
en
during
its
execution.
The
state
of
a
system
carries
the
history
of
the
system,
namely
the
set
of
ev
en
ts
that
ha
v
e
o
ccurred
so
far.
This
is
exactly
the
denition
of
a
Ch
u
space|a
set
of
ev
en
ts,
and
a
set
of
states
eac
h
of
whic
h
con
tains
the
history
b
y
b
eing
represen
ted
as
a
set
of
ev
en
ts.
In
the
next
c
hapter
w
e
will
examine
some
mo
dels
of
concurrency
.
W
e
will
see
the
ideas
whic
h
they
con
tributed
to
Ch
u
spaces,
and
also
see
ho
w
they
fall
short
of
our
in
tuitions
for
concurren
t
b
eha
vior.
In
c
hapters

and

w
e
will
dene
Ch
u
spaces
and
presen
t
some
of
the
mathematics
b
ehind
them.
W
e
will
also
giv
e
a
summary
of
the
applications
of
Ch
u
spaces
to
mathematics,
the
details
of
these
are
giv
en
elsewhere.
In
Chapter

w
e
will
sho
w
ho
w
Ch
u
spaces
describ
e
the
b
eha
vior
of
a
pro
cess.
W
e
will
also
sho
w
ho
w
v
arious
features
of
concurren
t
b
eha
vior
can
b
e
represen
ted
in
a
Ch
u
space.
Chapter

will
describ
e
the
algebra
of
Ch
u
spaces,
giving
the
v
arious
op
erators
on
them,
and
in
terpreting
them
as
constructs
for
concurrency
.
W
e
pro
v
e
a
n
um
b
er
of
iden
tities
for
Ch
u
spaces,
sho
wing
that
these
op
erators
matc
h
our
in
tuitions
for
these
op
erators.
Chapter

will
compare
Ch
u
spaces
with
the
mo
dels
describ
ed
in
c
hapter
.
W
e
will
sho
w
that
ev
en
t
structures
and
P
etri
nets
are
generalized
b
y
Ch
u
spaces,
and
will
giv
e
a
non-in
terlea
ving
Ch
u
space
seman
tics
for
CCS
and
CSP
.
Finally
w
e
will

CHAPTER
.
INTR
ODUCTION

presen
t
some
directions
for
future
w
ork
in
this
area.
This
w
ork
originated
from
Professor
V
aughan
Pratt's
study
of
non-in
terlea
ving
mo
dels
of
concurrency
in
the
last
decade.
In
		
he
rened
his
mo
del
of
partially
ordered
m
ultisets
to
get
a
new
mo
del,
ev
en
t
spaces
[Pra	c
,
Pra	a
],
whic
h
are
partial
orders
with
all
nonempt
y
joins
and
the
empt
y
meet.
This
further
prompted
him
to
dene
a
more
general
mo
del,
partial
distributiv
e
lattices,
whic
h
are
partial
orders
for
whic
h
meet
and
join
are
partial
functions,
that
is
they
ma
y
not
b
e
dened
for
all
subsets
of
the
set
of
elemen
ts.
These
partial
functions,
^;
_
:

A
!
A
had
to
ob
ey
certain
axioms
whic
h
forced
them
to
b
eha
v
e
lik
e
meet
and
join
for
lattices,
namely
they
had
to
satisfy
the
idemp
otence,
asso
ciativit
y
,
absorption
and
distributivit
y
la
ws.
In
our
w
ork
on
partial
distributiv
e
lattices,
w
e
disco
v
ered
that
they
did
not
satisfy
the
in
v
olution
of
dualit
y
(A
??

=
A),
and
lac
k
ed
some
other
prop
erties.
W
e
found
that
w
e
had
to
k
eep
more
information
than
just
equations
of
the
form
^X
=
a
and
_Y
=
b.
W
e
disco
v
ered
that
the
most
succinct
metho
d
of
k
eeping
this
information
w
as
b
y
em
b
edding
the
set
A
in
an
underlying
distributiv
e
lattice,
giving
the
new
denition
of
partial
distributiv
e
lattices
describ
ed
in
c
hapter
.
Shortly
thereafter,
Pratt
made
the
connection
with
Ch
u's
construction,
giving
the
name
Ch
u
spaces
to
partial
distributiv
e
lattices.
In
this
thesis,
the
w
ork
in
c
hapters

{

w
as
mostly
done
join
tly
with
Prof.
Pratt,
m
y
advisor.
In
particular,
the
logical
represen
tation
and
the
gate
represen
tation
of
Ch
u
spaces
w
as
his
idea,
and
he
w
as
also
resp
onsible
for
the
ideas
b
ehind
gure
..
P
arts
of
c
hapters

and

w
ere
also
done
join
tly
,
esp
ecially
the
denitions
of
the
com
binators
for
Ch
u
spaces
and
the
em
b
edding
in
to
ev
en
t
structures.
Prof.
Pratt
wrote
the
macros
for
dra
wing
lattices
and
circuits,
whic
h
I
ha
v
e
used
extensiv
ely
,
as
w
ell
as
the
macros
for
writing
the
sym
b
ol
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(other
authors
ha
v
e
used
all
sorts
of
w
eird
com
binations
for
writing
it
in
L
a
T
E
X!).
The
w
ork
in
c
hapter

has
also
b
eneted
from
discussions
with
Dr.
R.
J.
v
an
Glabb
eek
and
Prof.
Gordon
D.
Plotkin.
Some
of
the
results
in
the
thesis
ha
v
e
b
een
published
in
[Gup	
,
GP	
].

Chapter

Mo
dels
of
Concurrency
Before
w
e
get
in
to
Ch
u
space
theory
and
applications
w
e
will
briey
review
some
mo
dels
of
concurrency
whic
h
con
tributed
ideas
to
our
mo
del.
These
include
P
etri
nets,
traces,
transition
graphs
and
CCS,
ev
en
t
structures,
geometric
automata
and
p
omsets.
All
mo
dels
of
concurrency
ha
v
e
a
concept
of
a
state,
whic
h
is
a
description
of
a
system
at
a
particular
momen
t.
They
also
ha
v
e
a
w
a
y
of
mo
ving
from
one
state
to
another
b
y
means
of
certain
transitions.
V
arious
mo
dels
represen
t
these
transitions
b
y
actions
or
events.
P
etri
nets,
transition
graphs
and
traces
are
action
based
mo
dels
b
ecause
an
y
transition
can
o
ccur
rep
eatedly
.
Ev
en
t
structures,
geometric
automata
and
p
omsets
are
ev
en
t
based
mo
dels,
where
eac
h
ev
en
t
can
o
ccur
at
most
once
during
the
execution
of
a
pro
cess.
In
order
to
represen
t
m
ultiple
o
ccurrences
of
an
action,
ev
en
t
based
mo
dels
use
lab
eling
functions,
so
eac
h
ev
en
t
can
b
e
lab
eled
with
an
action.
Ev
en
t
based
mo
dels
k
eep
around
the
en
tire
history
of
a
pro
cess,
so
there
are
no
lo
ops,
i.e.
after
mo
ving
out
from
a
state,
a
system
can
nev
er
return
to
that
state.
The
main
disadv
an
tage
of
this
is
that
pro
cesses
whic
h
can
b
e
represen
ted
b
y
small
structures
in
an
action
based
mo
del
ma
y
need
innite
structures
in
ev
en
t
based
mo
dels.
On
the
other
hand
represen
ting
eac
h
ev
en
t
explicitly
allo
ws
easy
form
ulation
of
these
mo
dels
as
categories,
whic
h
automatically
equips
them
with
a
tractable
algebraic
theory
.
Keeping
trac
k
of
eac
h
o
ccurrence
of
an
action
mak
es
the
information
con
ten
t
of
eac
h
state
v
ery
clear,
making


CHAPTER
.
MODELS
OF
CONCURRENCY

them
close
to
domain
theory
and
pro
viding
them
with
a
sc
hedule-automaton
dualit
y
.
Another
w
a
y
to
classify
these
mo
dels
is
as
in
terlea
ving
v
ersus
non-in
terlea
ving
mo
dels.
In
terlea
ving
mo
dels
ha
v
e
a
set
of
actions
whic
h
are
atomic
or
indivisible,
and
the
parallel
execution
of
t
w
o
atomic
actions
is
regarded
as
equiv
alen
t
to
executing
them
in
an
y
order.
Th
us
they
satisfy
the
la
w
:
ajjb
=
ab
t
ba

.
CCS
transition
graphs,
traces
and
geometric
automata
are
examples
of
in
terlea
ving
mo
dels.
Non-in
terlea
ving
mo
dels
do
not
pro
ject
ev
en
ts
on
to
a
linear
timescale.
In
suc
h
a
mo
del,
ajjb
means
that
there
is
no
information
ab
out
the
order
relation
b
et
w
een
a
and
b.
This
is
regarded
as
dieren
t
from
ab
t
ba,
whic
h
represen
ts
m
utual
exclusion
b
et
w
een
a
and
b.
P
etri
nets,
ev
en
t
structures
and
p
omsets
are
non-in
terlea
ving
mo
dels.
The
main
justication
for
in
terlea
ving
mo
dels
is
that
for
some
kinds
of
observ
a-
tions,
the
t
w
o
pro
cesses
ajjb
and
ab
t
ba
are
observ
ationall
y
the
same.
Besides,
this
assumption
leads
to
a
more
tractable
algebraic
theory
.
On
the
other
hand,
the
in
ter-
lea
ving
assumption
forces
some
actions
to
b
e
regarded
as
atomic,
imp
osing
a
xed
gran
ularit
y
on
the
actions.
This
ma
y
b
e
impractical,
as
one
ma
y
wish
to
view
actions
on
dieren
t
scales
dep
ending
on
the
con
text.
F
or
example,
if
a
user
w
an
ts
to
reason
ab
out
a
piece
of
soft
w
are,
the
lo
w
est
gran
ularit
y
a
v
ailable
ma
y
b
e
a
lot
bigger
than
atomic
actions,
as
the
soft
w
are
writer
ma
y
not
giv
e
details
b
elo
w
a
certain
lev
el
for
proprietary
reasons
or
for
mo
dularit
y
|
future
releases
could
implemen
t
the
same
actions
in
a
dieren
t
w
a
y
.
Th
us
non-in
terlea
ving
mo
dels
allo
w
action
r
enement,
the
splitting
up
of
an
action
in
to
sev
eral
smaller
actions.
Another
philosophical
problem
with
the
in
terlea
ving
assumption
is
that
it
imp
oses
on
the
pro
cess
a
global
clo
c
k
b
y
whic
h
all
actions
are
timed,
but
in
distributed
systems
there
is
no
suc
h
clo
c
k
as
dela
ys
caused
b
y
the
net
w
ork
and
relativit
y
ma
y
allo
w
dieren
t
observ
ers
to
see
dieren
t
temp
oral
orders
for
the
actions.
Th
us
it
do
es
not
mak
e
sense
to
sa
y
that
they
o
ccur
in
some
in
terlea
v
ed
order.

a
t
b
is
a
c
hoice
b
et
w
een
a
and
b

CHAPTER
.
MODELS
OF
CONCURRENCY

.
Action
based
mo
dels
..
P
etri
nets
P
etri
nets
are
one
of
the
oldest
mo
dels
for
mo
deling
concurren
t
b
eha
vior
[P
etb
,
P
eta
,
Rei
].
A
net
is
a
directed
bipartite
graph
|
(S;
T
;
F
),
where
S
and
T
are
the
v
ertices,
S
\
T
=
;
and
the
set
of
edges
is
F

(S

T
)
[
(T

S
).
While
there
are
v
arious
a
v
ors
of
P
etri
nets,
all
of
them
ha
v
e
some
notion
of
marking,
where
tok
ens
are
placed
on
v
arious
S
v
ertices,
and
a
transition
t

T
res
b
y
taking
some
tok
ens
from
the
sources
of
its
incoming
arcs
and
placing
some
tok
ens
on
the
targets
of
its
outgoing
arcs.
The
state
of
a
P
etri
net
is
giv
en
b
y
the
marking
at
an
y
p
oin
t
in
its
execution.
One
of
the
most
app
ealing
features
of
P
etri
nets
is
that
they
ha
v
e
a
simple
pictorial
represen
tation,
as
a
graph
with
t
w
o
kinds
of
no
des,
S
-no
des
are
dra
wn
as
circles
and
T
-no
des
as
squares.
No
w
the
tok
ens
can
b
e
represen
ted
b
y
a
n
um
b
er
on
the
S
-no
des,
and
T
-no
des
can
ha
v
e
lab
els
for
transitions.
This
represen
tation
mak
es
it
easy
to
understand
the
structure
of
a
net,
and
w
e
will
con
tin
ue
the
tradition
b
y
giving
a
pictorial
represen
tation
of
Ch
u
spaces.
The
t
w
o
common
kinds
of
P
etri
nets
are
condition-ev
en
t
nets
(C/E
nets)
and
place
transition
nets
(P/T
nets).
In
C/E
nets,
the
v
ertices
in
S
are
conditions
and
a
condition
is
true
i
there
is
a
tok
en
on
it
(there
can
b
e
at
most
one
tok
en
p
er
condition).
The
no
des
in
S
with
arcs
leading
to
a
transition
t
are
its
preconditions,
and
those
whic
h
ha
v
e
an
arc
from
t
in
to
them
are
the
p
ostconditions.
t
is
enable
d
i
all
its
preconditions
are
true
and
all
its
p
ostconditions
are
false.
Its
ring
results
in
all
its
preconditions
b
ecoming
false
and
all
the
p
ostconditions
b
ecoming
true.
A
sp
ecial
case
of
C/E
nets
is
an
o
ccurrence
net
|
an
acyclic
C/E
net
where
eac
h
S
-no
de
has
at
most
one
incoming
arc
and
at
most
one
outgoing
arc.
Notice
that
while
in
a
C/E
system
a
transition
ma
y
b
e
red
man
y
times,
in
an
o
ccurrence
net
it
ma
y
b
e
red
exactly
once,
as
is
c
haracteristic
of
ev
en
t
based
formalisms.
An
o
ccurrence
net
ma
y
b
e
formed
b
y
unrolling
a
condition
ev
en
t
system,
and
the
acyclic
nature
allo
ws
comp
osition
of
o
ccurrence
nets
more
easily
than
for
C/E
systems.
In
an
P/T
net,
eac
h
place
s

S
has
a
capacit
y
K
(s),
and
eac
h
arc
f

F
has

CHAPTER
.
MODELS
OF
CONCURRENCY

a
w
eigh
t
W
(f
).
A
marking
is
a
function
M
:
S
!
I
N
[
f!
g
giving
the
n
um
b
er
of
tok
ens
at
eac
h
place,
and
s:M
(s)

K
(s).
A
transition
t
is
enabled
if
the
source
s
of
eac
h
incoming
arc
f
has
M
(s)

W
(f
),
and
for
eac
h
outgoing
arc
f
from
t
to
s

S
,
W
(f
)
+
M
(s)

K
(s).
A
transition
res
b
y
remo
ving
the
W
(f
)
tok
ens
from
the
source
of
eac
h
incoming
arc
f
,
and
place
W
(g
)
more
tok
ens
on
the
target
of
eac
h
outgoing
arc
g
,
this
results
in
a
new
marking.
1
2
3
1
1
1
a
b
c
1
2
3
1
1
1
a
b
c
1
2
3
1
1
1
a
b
c
1
2
3
1
1
1
a
b
c
a
a,c
a,b
Figure
.:
A
P
etri
net,
and
a
few
steps
of
its
execution.
Note
that
in
P
etri
nets
where
t
w
o
or
more
transitions
are
enabled,
they
ma
y
b
oth
re
sim
ultaneously
,
so
this
is
a
non-in
terlea
ving
mo
del.
A
P
etri
net
with
its
markings
is
a
simple
con
v
enien
t
w
a
y
to
represen
t
whic
h
transitions
can
re
from
whic
h
state.
In
Ch
u
spaces
w
e
giv
e
this
relation
explicitly
,
th
us
allo
wing
Ch
u
spaces
to
mimic
an
y
P
etri
net.
The
main
problem
with
P
etri
nets
is
that
they
do
not
p
ossess
a
nice
algebra
of
op
erations
|
there
are
no
go
o
d
metho
ds
of
com
bining
P
etri
nets
using
the
standard
concurrency
op
erators
to
get
larger
P
etri
nets
|
they
lac
k
mo
dularity.
Sev
eral
ap-
proac
hes
ha
v
e
b
een
explored
to
get
an
algebra.
Safe
P
etri
nets
are
P/T
nets
where

CHAPTER
.
MODELS
OF
CONCURRENCY

the
n
um
b
er
of
tok
ens
at
an
y
place
nev
er
exceeds
one
in
an
y
reac
hable
marking,
ev
en
though
the
capacit
y
of
eac
h
place
ma
y
b
e
innite.
Algebras
of
unlab
eled
safe
P
etri
nets
ha
v
e
b
een
prop
osed
in
[LR
]
and
[Bes
].
In
[Bes],
a
P
etri
net
seman
tics
has
b
een
dened
for
the
language
COSY,
whic
h
has
c
hoice,
sequen
tial
and
parallel
comp
o-
sition
and
iteration.
Ho
w
ev
er
the
constructions
are
sp
ecic
to
nets
generated
in
this
w
a
y
.
General
denitions
are
giv
en
in
[GV],
but
the
constructions
are
somewhat
complicated.
Also
none
of
the
authors
giv
e
a
metho
d
for
doing
action
renemen
t,
whic
h
is
one
imp
ortan
t
reason
for
preferring
a
non-in
terlea
ving
seman
tics
o
v
er
an
in
terlea
ving
one.
Recen
tly
,
in
a
series
of
pap
ers
Bro
wn
and
Gurr
[BG	0,
BGdP	
]
ha
v
e
come
up
with
a
categorical
form
ulation
of
P
etri
nets,
whic
h
pro
vides
an
algebra
for
P
etri
nets.
The
category
is
based
on
Ch
u's
construction,
and
its
ob
jects
are
P
etri
nets.
The
morphisms
of
their
category
are
sim
ulations,
and
the
categorical
pro
duct
turns
out
to
b
e
sync
hronous
parallel
comp
osition.
Ho
w
ev
er
they
do
not
sho
w
ho
w
to
implemen
t
the
other
op
erations
lik
e
sequen
tial
comp
osition
or
c
hoice.
Also,
they
do
not
mak
e
m
uc
h
use
of
dualit
y
.
Other
categorical
form
ulations
of
P
etri
nets
ha
v
e
b
een
dev
elop
ed
b
y
Winsk
el
[Win
]
and
Meseguer
and
Mon
tanari
[MM	0].
..
Calculus
of
Comm
unicati
ng
Systems
and
transition
graphs
.
CCS
w
as
dev
elop
ed
as
a
result
of
Robin
Milner's
eorts
to
w
ards
dev
eloping
a
theory
of
comm
unicating
concurren
t
pro
cesses
[Mil0
,
Mil	
].
In
this
theory
pro
cesses
are
dened
b
y
algebraic
equations,
and
ev
olv
e
in
to
other
pro
cesses
b
y
doing
some
actions.
The
theory
is
describ
ed
in
detail
in
the
ab
o
v
e
references,
and
w
e
will
talk
ab
out
it
in
later
c
hapters;
here
w
e
discuss
the
prominen
t
features
of
CCS.
T
ransition
graphs.
A
mo
del
of
a
CCS
pro
cess
is
a
lab
eled
directed
graph.
Its
no
des
or
states
are
lab
eled
b
y
pro
cess
terms,
and
a
transition
is
made
from
one
no
de
to
another
along
an
edge
b
y
executing
the
action
lab
eling
the
edge.

CHAPTER
.
MODELS
OF
CONCURRENCY
	
Observ
ations
and
bisim
ulation.
T
o
an
outside
observ
er,
the
only
w
a
y
of
ob-
taining
information
is
b
y
observing
the
sequence
of
actions
executed
b
y
a
pro
cess.
Since
only
a
sequence
of
actions
can
b
e
observ
ed,
this
is
an
in
terlea
ving
mo
del.
Tw
o
pro
cesses
are
equiv
alen
t
if
they
ha
v
e
the
same
observ
ations,
formally
captured
b
y
the
notion
of
bisimulation
[P
ar]:
Let
P

!
P
0
represen
t
the
ev
olution
of
pro
cess
P
to
the
pro
cess
P
0
b
y
doing
the
action
.
Then
t
w
o
pro
cesses
P
and
Q
are
said
to
b
e
strongly
bisimilar
if
there
is
a
binary
relation
R
on
pro
cesses
suc
h
that
for
(P
;
Q)

R,
and
for
ev
ery
action
,
:
P

!
P
0
=
)
	Q
0
:[Q

!
Q
0
and
(P
0
;
Q
0
)

R].
:
Q

!
Q
0
=
)
	P
0
:[P

!
P
0
and
(P
0
;
Q
0
)

R].
This
notion
giv
es
a
nite
metho
d
to
test
whether
an
y
arbitrarily
long
observ
ations
of
one
pro
cess
can
also
b
e
made
of
another.
It
can
also
b
e
used
on
transition
graphs;
then
the
relation
is
b
et
w
een
states.
W
e
will
dene
a
bisim
ulation
b
et
w
een
Ch
u
spaces
in
c
hapter
.
Early
and
late
branc
hing.
The
bisim
ulation
notion
ab
o
v
e
mak
es
an
imp
ortan
t
distinction
b
et
w
een
pro
cesses
|
the
pro
cesses
a(b
t
c)
and
ab
t
ac
are
distinguished,
b
ecause
the
rst
can
mak
e
a
transition
on
a
and
ev
olv
e
to
b
t
c,
while
the
second
one,
after
the
a
can
ev
olv
e
to
b
or
to
c,
neither
of
whic
h
is
bisimilar
to
b
t
c.
The
distinction
is
made
b
ecause
the
rst
pro
cess
made
the
c
hoice
of
whic
h
branc
h
to
tak
e
after
doing
the
a,
while
the
second
one
made
the
c
hoice
at
the
b
eginning.
No
w
in
some
cases
it
is
p
ossible
for
the
second
pro
cess
to
deadlo
c
k
in
a
situation
when
the
rst
one
do
es
not,
b
ecause
it
can
mak
e
a
more
informed
decision.
While
automata
resp
ect
this
distinction
(the
automata
for
the
t
w
o
pro
cesses
w
ould
b
e
dieren
t),
lan-
guages
(sets
of
strings)
do
not,
and
the
languages
for
the
t
w
o
pro
cesses
are
the
same,
fab;
acg.
The
mo
del
w
e
presen
t
for
concurren
t
pro
cesses
will
mak
e
this
distinction,
as
it
has
imp
ortan
t
consequences
for
deadlo
c
k
detection.
Comm
unication.
Tw
o
pro
cesses
whic
h
are
executing
in
parallel
can
comm
uni-
cate
with
eac
h
other
b
y
means
of
certain
sp
ecial
actions.
These
actions
are
called
silen
t
actions
b
ecause
they
are
transparen
t
to
the
en
vironmen
t.
The
notion
of
strong

CHAPTER
.
MODELS
OF
CONCURRENCY
0
bisim
ulation
ab
o
v
e
is
extended
to
ignore
these
actions,
and
the
resulting
denition
is
called
w
eak
bisim
ulation.
Comm
unicating
Sequen
tial
Pro
cesses
[Hoa
]
is
another
language
whose
mo
dels
are
similar
to
those
of
CCS.
W
e
will
talk
ab
out
b
oth
of
these
in
c
hapter

in
more
detail.
..
T
races
T
races
or
languages
ha
v
e
b
een
a
p
opular
w
a
y
of
represen
ting
b
eha
vior
of
pro
cesses.
The
b
eha
vior
of
a
pro
cess
is
c
haracterized
en
tirely
b
y
the
set
of
its
observ
ations
or
traces.
This
approac
h
has
b
een
v
ery
successful
in
studying
sequen
tial
b
eha
vior,
where
the
b
eha
vior
of
an
automaton
(e.g.
a
T
uring
mac
hine)
is
iden
tied
with
the
set
of
strings
it
accepts.
It
has
b
een
extended
to
concurren
t
pro
cesses
b
y
regarding
the
parallel
execution
of
t
w
o
pro
cesses
as
the
sh
ue
of
their
languages.
T
races
can
b
e
com
bined
with
one
another
using
the
v
arious
op
erations
on
strings,
giving
a
nice
algebraic
theory
of
pro
cesses.
T
races
are
a
v
ery
simple
idea,
and
ha
v
e
receiv
ed
a
lot
of
atten
tion,
but
they
do
ignore
a
lot
of
the
structure
of
a
pro
cess.
They
do
not
distinguish
b
et
w
een
early
and
late
branc
hing,
and
form
an
in
terlea
ving
mo
del.
Since
traces
iden
tify
a
lot
of
pro
cesses,
sev
eral
v
arian
ts
of
traces,
called
decorated
traces,
ha
v
e
b
een
prop
osed
to
distinguish
pro
cesses.
In
complete
trace
seman
tics,
a
pro
cess
is
describ
ed
b
y
a
pair
of
sets|a
set
of
traces
and
a
set
of
completed
traces.
This
helps
in
distinguishing
b
et
w
een
ab
+
a
and
ab,
since
a
is
a
complete
trace
of
the
rst
but
not
of
the
second.
Another
approac
h
follo
w
ed
b
y
Bro
ok
es,
Hoare
and
Rosco
e
[BHR
]
is
to
include
failure
pairs
h
;
X
i,
where

is
a
trace,
and
X
is
a
set
of
actions,
and
the
pair
h
;
X
i
means
that
the
pro
cess
executed

,
and
after
that
when
giv
en
a
c
hoice
only
from
among
the
actions
in
X
,
could
not
do
an
ything
more.
This
allo
ws
a
distinction
b
et
w
een
a(b
t
c)
and
ab
t
ac,
whic
h
ha
v
e
the
same
traces
and
complete
traces,
but
the
second
pro
cess
has
the
failure
pair
ha;
fbgi
where
the
rst
do
es
not.
There
are
v
arious
other
decorated
trace
mo
dels,
a
detailed
accoun
t
is
giv
en
in
Rob
v
an
Glabb
eek's
PhD
thesis
[vG	0
].

CHAPTER
.
MODELS
OF
CONCURRENCY

Our
mo
del
Ch
u
spaces
will
mak
e
all
the
distinctions
that
can
b
e
made
b
y
the
dieren
t
trace
seman
tics,
and
actually
mak
es
a
few
more.
Ho
w
ev
er
it
is
p
ossible
to
dene
equiv
alence
relations
on
Ch
u
spaces,
suc
h
that
only
pro
cesses
distinguished
b
y
some
trace
seman
tics
are
distinguished|w
e
will
sho
w
some
of
these
in
c
hapter
.
..
Higher
dimensional
automata
This
mo
del
w
as
prop
osed
b
y
Pratt
in
[Pra	
]
as
a
generalization
of
automata
to
allo
w
them
to
express
non-in
terlea
ving
concurrency
.
Standard
nite
automata
are
dra
wn
as
p
oin
ts
represen
ting
states
and
directed
arcs
represen
ting
transitions.
So
all
elemen
ts
are
0
and
-dimensional
ob
jects.
Pratt
generalized
this
to
allo
w
elemen
ts
of
an
y
nite
dimension,
where
an
n-dimensional
ob
ject
stands
for
a
transition
represen
ting
the
concurren
t
o
ccurrence
of
n
actions.
Mathematical
foundations
of
this
mo
del
are
dev
elop
ed
in
detail
in
[GJ	].
Computation
ma
y
b
e
view
ed
as
a
path
through
suc
h
an
automaton.
Concurren
t
execution
of
a
and
b,
ajjb,
is
represen
ted
as
a
square
whose
surface
is
lled
in,
and
m
utual
exclusion
ab
t
ba
as
a
square
whose
in
terior
is
hollo
w,
so
one
has
to
follo
w
the
edges,
doing
one
of
a
and
b
at
a
time.
Note
that
after
doing
b
oth
a
and
b,
the
pro
cess
\forgets"
whic
h
it
did
rst,
and
this
is
go
o
d
as
k
eeping
suc
h
useless
information
is
unnecessary
.
Comm
unication
can
b
e
mo
deled
abstractly
as
ero
ding
some
of
the
in
terior
surface.
When
t
w
o
pro
cesses
sync
hronize,
they
m
ust
b
oth
b
e
at
some
xed
stage
in
their
execution
simultane
ously,
that
is
the
execution
tra
jectory
m
ust
pass
through
a
p
oin
t.
Monotonicit
y
of
computation
no
w
means
that
certain
parts
of
the
square
are
illegal.
Async
hronous
comm
unication
is
similarly
mo
deled
as
ero
ding
the
area
where
the
message
w
as
receiv
ed
b
efore
transmission.
More
comm
unication
ero
des
more
area,
in
the
extreme
case
leading
to
a
single
path
of
execution,
when
b
oth
pro
cesses
are
in
lo
c
k-step.
Pratt
calls
this
\the
ja
ws
of
comm
unication"|they
squeeze
out
the
freedom
of
action
of
a
pro
cess.
In
fact
it
is
p
ossible
to
generalize
the
concept
of
a
computation
from
a
path
to
a
set
of
paths.
As
a
rst
appro
ximation
w
e
can
tak
e
it
to
b
e
a
homotop
y
class,
i.e.

CHAPTER
.
MODELS
OF
CONCURRENCY

A
B
B
A
(a)  A || B
A
B
B
A
A
B
B
A
(c)  The jaws of communication
(b)   A || B, with a synchronization
Figure
.:
Higher
Dimensional
Automata.
Shaded
area
represen
ts
a
surface.
a
set
of
paths
where
eac
h
path
can
b
e
deformed
in
to
another
without
jumping
o
v
er
holes.
This
is
a
deterministic
computation,
since
no
c
hoices
around
holes
needed
to
b
e
made.
The
ignorance
of
the
exact
path
reects
the
observ
er's
ignorance
of
the
exact
p
osition
where
eac
h
pro
cess
is
in
a
computation,
since
suc
h
accuracy
ma
y
not
b
e
a
v
ailable
or
necessary
.
As
a
further
generalization,
w
e
could
agree
to
gloss
o
v
er
some
holes,
reecting
the
fact
that
all
c
hoices
are
not
relev
an
t
for
future
computation.
This
is
a
nondeterministic
computation.
Higher
dimensional
automata
are
rather
dicult
to
sp
ecify
,
the
sp
ecications
are
quite
long.
They
are
v
ery
biased
to
w
ards
the
automaton
side
of
computation,
forget-
ting
ab
out
sc
hedules,
and
at
the
momen
t
there
seems
to
b
e
no
easy
w
a
y
of
dualizing
an
automaton
to
get
its
sc
hedule,
the
w
a
y
w
e
can
do
with
Ch
u
spaces.
Ho
w
ev
er
they
are
able
to
con
trol
information
in
a
b
etter
w
a
y
,
allo
wing
forgetting
of
useless
information,
and
w
e
w
ould
lik
e
to
extend
Ch
u
spaces
in
this
direction.

CHAPTER
.
MODELS
OF
CONCURRENCY

.
Ev
en
t
based
mo
dels
..
P
artially
ordered
m
ultisets
P
artial
orders
are
the
simplest
non-in
terlea
ving
mo
del
of
pro
cesses|instead
of
order-
ing
ev
en
ts
linearly
as
in
a
trace,
they
are
ordered
partially
.
P
artially
ordered
m
ultisets
(p
omsets)
are
p
osets
with
a
lab
eling
function
whic
h
lab
els
ev
ery
ev
en
t
with
an
action.
Th
us
p
omsets
generalize
strings,
whic
h
are
lab
eled
traces.
P
omsets
as
a
mo
del
for
concurren
t
pro
cesses
ha
v
e
b
een
studied
in
[Gra
,
Pra
,
Pra
,
Gis
].
A
pro
cess
is
mo
deled
as
a
set
of
p
omsets,
and
a
run
executes
one
of
the
p
omsets
in
this
set.
P
omsets
can
b
e
com
bined
with
eac
h
other
with
the
op
erations
describ
ed
in
[Pra
],
while
pro
cesses
can
b
e
com
bined
using
the
familiar
op
erations
on
sets.
Alternativ
ely
,
rst
order
logic
or
temp
oral
logic
form
ulas
ma
y
b
e
used
to
sp
ecify
p
omsets,
and
the
algebraic
and
logical
sp
ecications
ma
y
b
e
freely
mixed.
P
omsets
ha
v
e
b
een
generalized
to
prossets
[GP
],
metric
pro
cess
mo
dels[Cre	
]
and
measured
sets
[Cas	
].
Our
mo
del
do
es
not
y
et
subsume
these
extensions,
though
it
do
es
subsume
p
omsets
as
originally
dened.
In
addition,
it
giv
es
a
more
uniform
treatmen
t
of
nondeterminism,
so
c
hoices
can
b
e
made
at
an
y
time
in
the
execution,
rather
than
at
the
b
eginning
as
required
b
y
p
omsets
(the
p
omset
to
b
e
executed
is
c
hosen
at
the
start
of
a
run).
In
addition,
p
omsets
emphasize
the
sc
hedule
view
of
pro
cesses,
whereas
Ch
u
spaces
can
treat
pro
cesses
as
either
sc
hedules
or
automata.
..
Ev
en
t
Structures
Ev
en
t
structures
w
ere
dev
elop
ed
in
[NPW]
as
an
attempt
to
bridge
P
etri
net
theory
and
domain
theory
.
In
a
P
etri
net,
the
state
is
giv
en
b
y
a
marking,
but
the
same
marking
can
b
e
reac
hed
after
sev
eral
dieren
t
sets
of
transitions.
Th
us
the
information
theoretic
con
ten
t
of
a
marking
is
rather
obscure.
Ev
en
t
structures
remedy
this
b
y
making
the
state
of
a
system
b
e
exactly
the
set
of
actions
that
ha
v
e
o
ccurred
so
far.
Ho
w
ev
er
in
a
P
etri
net
m
ultiple
o
ccurrences
of
the
same
action
can
o
ccur,
so
if
a
state
just
recorded
whic
h
actions
had
o
ccurred
and
some
actions
o
ccurred
man
y
times,
this
information
w
ould
b
e
forgotten.
But
since
the
purp
ose
of
a
state
is
to

CHAPTER
.
MODELS
OF
CONCURRENCY

k
eep
as
m
uc
h
information
as
p
ossible,
the
concept
of
event
or
o
ccurrence
of
an
action
w
as
in
tro
duced.
An
ev
en
t
is
an
action
whic
h
o
ccurs
at
most
once
in
an
execution.
So
a
prime
ev
en
t
structure
is
formally
dened
as
a
triple
(E
;
#;
),
where
E
is
the
set
of
ev
en
ts,
#

E

E
is
a
conict
relation,
and


E

E
is
a
partial
order.
If
t
w
o
ev
en
ts
are
in
conict,
b
oth
of
them
cannot
happ
en
in
a
single
execution.
Also,
for
the
ev
en
t
e
to
happ
en,
all
the
ev
en
ts
b
efore
it
in
the
partial
order
m
ust
ha
v
e
happ
ened.
Note
that
there
is
no
condition
whic
h
forces
t
w
o
ev
en
ts
to
o
ccur
in
some
order
if
they
are
b
oth
enabled,
so
this
is
a
non-in
terlea
ving
mo
del.
Prime
ev
en
t
structures
corresp
ond
exactly
with
o
ccurrence
nets
describ
ed
ab
o
v
e
[NPW].
They
ha
v
e
b
een
generalized
considerably|b
oth
the
conict
relation
and
the
partial
order
can
b
e
generalized,
and
w
e
shall
discuss
these
in
c
hapter
.
The
state
of
a
pro
cess
mo
deled
as
an
ev
en
t
structure
is
just
a
history
,
or
the
set
of
ev
en
ts
that
ha
v
e
o
ccurred
so
far.
The
states
can
b
e
arranged
in
to
a
partial
order
based
on
set
inclusion,
and
this
structure
is
the
conguration
structure
or
domain
corresp
onding
to
an
ev
en
t
structure.
A
conguration
structure
can
b
e
indep
enden
tly
c
haracterized
as
a
prime
algebraic
coheren
t
partial
order
[NPW],
and
ha
v
e
b
een
further
explored
in
[Dro	
].
Ch
u
spaces
are
v
ery
closely
related
to
ev
en
t
structures,
and
can
in
fact
b
e
un-
dersto
o
d
as
generalized
conguration
structures,
in
whic
h
all
the
constrain
ts
placed
b
y
ev
en
t
structures
are
remo
v
ed.
Th
us
ev
en
t
structures
will
b
e
a
sub
class
of
Ch
u
spaces.
The
ma
jor
dierence
is
in
the
maps
b
et
w
een
ev
en
t
structures
and
the
maps
b
et
w
een
Ch
u
spaces.
While
ev
en
t
structure
maps
preserv
e
consistency
of
ev
en
ts
(the
complemen
t
of
conict),
Ch
u
maps
will
preserv
e
conict.
The
category
of
ev
en
t
structures
and
their
morphisms
enables
the
denition
of
an
algebra
of
ev
en
t
structures,
with
the
basic
op
erations
partial
sync
hronous
pro
duct
and
c
hoice.
Since
conguration
structures
are
domains,
recursiv
e
domain
equations
can
b
e
solv
ed
for
them,
so
they
can
b
e
used
to
giv
e
a
seman
tics
for
CCS
and
CSP[Win
].
A
recen
t
extension
of
ev
en
t
structures
is
ev
en
t
automata
[PP	],
whic
h
generalize
conguration
structures
b
y
relaxing
some
of
the
conditions.
Th
us
an
y
ev
en
t
structure
is
represen
table
as
an
ev
en
t
automaton.
Ho
w
ev
er
this
generalization
loses
the
dualit
y

CHAPTER
.
MODELS
OF
CONCURRENCY

b
et
w
een
ev
en
t
structures
and
conguration
structures
|
there
is
no
go
o
d
c
haracter-
ization
for
the
sc
hedule
corresp
onding
to
an
ev
en
t
automaton.
This
is
xed
b
y
Ch
u
spaces,
whic
h
subsume
ev
en
t
automata,
while
pro
viding
a
sc
hedule
view
of
a
pro
cess.
..
Geometric
Automata
Geometric
automata
w
ere
constructed
b
y
J.
Guna
w
ardena
[Gun	,
Gun	
]
as
a
gen-
eralization
of
ev
en
t
structures.
They
are
based
on
a
syn
tactic
approac
h
to
causalit
y
,
rather
than
the
mo
del-theoretic
approac
hes
follo
w
ed
b
y
the
t
w
o
previous
mo
dels.
A
geometric
automaton
consists
of
a
set
of
ev
en
ts,
eac
h
of
whic
h
is
asso
ciated
with
a
condition,
a
b
o
olean
form
ula
on
the
ev
en
ts

.
Executing
an
ev
en
t
means
c
hanging
its
v
alue
from
0
to
,
and
ev
en
ts
are
executed
one
at
a
time
when
their
conditions
are
satised.
Geometric
automata
pro
vide
a
v
ery
declarativ
e
st
yle
of
programming|for
eac
h
ev
en
t
w
e
state
when
it
can
happ
en.
This
is
something
w
e
carry
o
v
er,
with
some
generalization,
to
Ch
u
spaces,
where
it
will
also
b
e
p
ossible
to
write
out
a
Ch
u
space
as
a
b
o
olean
form
ula.
Ho
w
ev
er
the
meaning
of
the
form
ulas
is
dieren
t
for
Ch
u
spaces
and
geometric
automata
|
in
a
geometric
automaton,
the
condition
of
an
ev
en
t
m
ust
b
e
true
only
at
the
time
it
is
executed,
it
can
b
ecome
false
later,
while
in
a
Ch
u
space
the
condition
is
alw
a
ys
true.
Th
us
there
are
some
geometric
automata
whose
b
eha
vior
cannot
b
e
mo
deled
b
y
Ch
u
spaces
in
a
nice
fashion,
and
vice
v
ersa.
W
e
will
talk
ab
out
this
in
c
hapter
.
Geometric
automata
are
an
in
terlea
ving
mo
del
of
concurrency
,
since
one
ev
en
t
is
executed
at
a
time.
This
is
necessary
b
ecause
if
the
conditions
of
t
w
o
ev
en
ts
are
satised
sim
ultaneously
,
doing
one
ma
y
in
v
alidate
the
condition
of
the
other.
These
are
only
some
of
the
man
y
existing
mo
dels
of
concurren
t
b
eha
vior.
W
e
will
k
eep
referring
to
them
in
the
follo
wing
c
hapters,
to
sho
w
their
relation
to
Ch
u
spaces.

There
are
some
syn
tactic
conditions
on
innitary
form
ulas,
arising
from
the
non-existence
of
a
free
Bo
olean
algebra
on
an
innite
n
um
b
er
of
generators.

Chapter

Denition
of
a
Ch
u
space
In
this
c
hapter,
w
e
formally
dene
Ch
u
spaces.
Whereas
Ch
u
spaces
w
ere
originally
dened
as
the
result
of
Ch
u's
construction
on
the
category
of
sets
and
functions,
w
e
will
giv
e
elemen
tary
denitions
and
return
to
the
categorical
denition
at
the
end
of
the
c
hapter.
.
Relations
and
Ch
u
spaces
Denition

A
Ch
u
space
is
a
binary
relation
b
et
w
een
t
w
o
sets
A
and
X
.
W
e
write
it
as
a
triple
(A;
X
;
R),
where
R
:
A

X
!

giv
es
the
binary
relation
as
a
c
haracteristic
function
of
a
subset
of
A

X
.

is
the
set
f0;
g.
W
e
do
not
imp
ose
an
y
cardinalit
y
restrictions
on
A
and
X
.
Th
us
all
argumen
ts
giv
en
b
elo
w
will
w
ork
for
all
cardinalities.
W
e
can
think
of
A
as
the
set
of
ev
en
ts
and
X
as
the
set
of
states
of
the
pro
cess
represen
ted
b
y
the
Ch
u
space.
Then
R(a;
x)
tells
us
whether
ev
en
t
a
has
o
ccurred
in
state
x.
The
ob
vious
w
a
y
to
write
out
a
Ch
u
space
explicitly
is
as
a
binary
matrix
of
dimension
jAj

jX
j,
with
eac
h
en
try
giving
the
v
alue
of
the
function
R
on
its
pair
of
co
ordinates.
W
e
will
actually
write
A
on
the
top,
and
X
on
the
side
to
corresp
ond
with
some
in
tuitions
ab
out
time
and
information.
The
follo
wing
are
examples
of
some
Ch
u
spaces,
referred
to
again
in
Figures
.
and
..
W
e
will
use
a;
b;
c;
d;
:
:
:
to
denote


CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

abcd
x
0
y
0
abcd
u
000
v
00
w
00
x
0
abcd
u
000
v
000
w
00
x
00
y
0
abc
u
00
v
00
abc
u
00
v
0
w
0
(a)
(b)
(c)
(d)
(e)
Figure
.:
Fiv
e
Ch
u
spaces.
elemen
ts
of
A,
and
u;
v
;
w
;
x;
:
:
:
for
elemen
ts
of
X
.
W
e
also
use
P
,
Q:
:
:
to
represen
t
Ch
u
spaces.
While
w
e
ha
v
e
not
y
et
assigned
an
y
formal
meanings
to
the
elemen
ts
of
X
,
viewing
them
in
dieren
t
w
a
ys
yields
some
useful
denitions.
Firstly
,
it
is
p
ossible
to
view
eac
h
elemen
t
of
X
as
a
function
from
A
to
.
Then
eac
h
ro
w
giv
es
the
v
alues
that
the
function
tak
es
on
dieren
t
elemen
ts
of
A.
No
w
in
the
extensional
view
of
functions,
t
w
o
functions
on
the
same
domain
are
considered
equal
if
they
ha
v
e
the
same
v
alue
ev
erywhere
in
the
domain.
So
w
e
dene
an
extensional
Ch
u
space
to
b
e
one
in
whic
h
if
an
y
t
w
o
functions
in
X
are
equal
extensionally
,
then
they
are
the
same
elemen
t.
In
other
w
ords,
a
Ch
u
space
is
extensional
i
it
has
no
rep
eated
ro
ws.
In
gure
.,
(a),
(b),
(d)
and
(e)
are
extensional,
while
(c)
is
not.
Op
erationally
this
means
that
t
w
o
states
in
whic
h
exactly
the
same
ev
en
ts
ha
v
e
o
ccurred
are
considered
indistinguish
abl
e.
Dually
w
e
can
dene
Ch
u
spaces
in
whic
h
no
columns
are
rep
eated.
Suc
h
Ch
u
spaces
are
called
T
0
.
This
comes
from
the
analogy
with
top
ological
spaces
[LS	
]
|
w
e
tak
e
A
to
b
e
the
set
of
p
oin
ts
of
a
space,
and
regard
elemen
ts
of
X
as
subsets
of
A,
and
the
relation
R
is
considered
to
b
e
the
mem
b
ership
relation.
Th
us
the
functions
in
the
ab
o
v
e
functional
view
of
X
are
the
c
haracteristic
functions
of
the
subsets,
whic
h
w
e
call
op
en
sets
of
the
space.
Note
that
seen
this
w
a
y
,
a
Ch
u
space
is
a
generalization
of
a
top
ological
space,
namely
one
in
whic
h
there
are
no
conditions
on
the
set
of
op
en
sets.
No
w
a
T
0
space
is
one
in
whic
h
giv
en
an
y
t
w
o
p
oin
ts,
there
is
an
op
en
set
con
taining
one
but
not
the
other.
Th
us
in
a
T
0
Ch
u
space,
for
an
y
t
w
o
columns,
there
is
a
ro
w
in
whic
h
the
columns
dier,
so
no
t
w
o
columns
are
iden
tical.
In
the
pro
cess

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

view,
this
means
that
t
w
o
ev
en
ts
whic
h
alw
a
ys
o
ccur
sim
ultaneously
are
iden
tied.
An
y
Ch
u
space
can
b
e
made
extensional
and
T
0
b
y
iden
tifying
an
y
rep
eated
ro
ws
or
columns
|
this
pro
cess
is
called
standardization.
In
the
rest
of
this
thesis,
when-
ev
er
w
e
need
a
Ch
u
space
with
an
y
of
these
prop
erties,
w
e
will
assume
that
it
is
standardized.
Tw
o
Ch
u
spaces
(A;
X
;
R)
and
(B
;
Y
;
S
)
are
said
to
b
e
isomorphic
if
A
is
isomor-
phic
to
B
,
X
is
isomorphic
to
Y
and
R
and
S
ha
v
e
the
same
v
alue
on
corresp
onding
pairs.
F
ormally
,
an
isomorphism
b
et
w
een
(A;
X
;
R)
and
(B
;
Y
;
S
)
is
a
pair
of
func-
tions
f
:
A
!
B
and
g
:
Y
!
X
suc
h
that
b
oth
f
and
g
are
bijectiv
e
and
for
all
a

A;
y

Y
,
R(a;
g
(y
))
=
S
(f
(a);
y
).
The
reason
for
g
going
from
Y
to
X
will
b
ecome
clear
in
the
next
c
hapter.
.
Pictorial
represen
tation
of
Ch
u
spaces
In
the
top
ological
represen
tation
of
an
extensional
Ch
u
space
discussed
ab
o
v
e,
w
e
sa
w
that
a
Ch
u
space
could
b
e
completely
sp
ecied
b
y
a
set
A
and
a
subset
of
its
p
o
w
er
set
X


A
.
But
a
p
o
w
er
set
is
a
complete
atomic
b
o
olean
algebra,
so
for
small
A,
w
e
can
dra
w
a
picture
of

A
as
a
Hasse
diagram,
and
can
represen
t
the
v
ertices
of

A
as
blobs
or
holes
according
to
whether
they
are
presen
t
or
absen
t
in
X
resp
ectiv
ely
.
W
e
call
this
represen
tation
the
p
artial
Bo
ole
an
A
lgebr
a
(pBA)
r
epr
esentation.
Note
that
if
A
is
innite,

A
is
a
complete
atomic
Bo
olean
Algebra,
called
a
CABA.
Completeness
means
that
arbitrary
meets
and
joins
m
ust
b
e
presen
t,
and
b
eing
atomic
means
that
ev
ery
maximal
c
hain
has
a
second
least
elemen
t.
All
nite
Bo
olean
Algebras
are
complete
and
atomic,
but
this
is
not
true
for
the
innite
ones,
for
example
the
BA
consisting
of
all
the
nite
and
conite
subsets
of
the
natural
n
um
b
ers
is
not
complete.
This
represen
tation
is
called
a
partial
Bo
olean
Algebra
b
ecause
it
ma
y
b
e
presen
ted
as
a
Bo
olean
Algebra,
in
whic
h
the
op
erations
of
_;
^
and
:
are
partial
op
erations,
along
with
some
equations.
The
underlying
CABA

A
pro
vides
a
compact
w
a
y
of
represen
ting
this
information.
It
is
also
useful
for
determining
homomorphisms,
whic
h
w
e
will
talk
ab
out
in
the
next
c
hapter.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE
	

.
.
.
.
.
.
.
.
.
.
  .
.
.
.
.
.
.
.
.
.
.
.
.

  .
.
.
.
.
.
.
.
.
.
.
.
.

y
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

x
.
.
.
.
.
.
.
.
.
.
  .
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
  
.
.
.
.
.
.
.
.
.
.
.
.
.

  .
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

  
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
  
.
.
.
.
.
.
.
.
.
.
.
.
.


  
.
.
.
.
.
.
.
.
.
.


.
.
.
.
.
.
.
.
.
.
  .
.
.
.
.
.
.
.
.
.
.
.
.

x
  .
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
  .
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
  
v
.
.
.
.
.
.
.
.
.
.
.
.
.

w
  .
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

  
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
  
u
.
.
.
.
.
.
.
.
.
.
.
.
.


  
.
.
.
.
.
.
.
.
.
.


  @
@

@
@

  @
@

  
u
@
@


v
  

  @
@

w
@
@

  @
@

v
  
u
@
@


  
:(a)
:(b)
:(d)
:(e)
Figure
.:
The
four
extensional
Ch
u
spaces
of
Figure
.,
dra
wn
as
partial
Bo
olean
Algebras.
In
the
ab
o
v
e
gure
w
e
ha
v
e
dra
wn
the
four
extensional
Ch
u
spaces
in
Figure
.
in
the
partial
b
o
olean
algebra
format.
The
notion
of
a
T
0
Ch
u
space
can
no
w
b
e
elegan
tly
stated
in
terms
of
a
lattice
theoretic
prop
ert
y:
Prop
osition
.
A
n
extensional
Chu
sp
ac
e
is
T
0
i
the
elements
of
X
(the
dots)
gener
ate

A
using
[;
\
and
:,
the
usual
op
er
ations
of
set
union,
interse
ction
and
c
omplement.
Empty
unions
and
interse
ctions
ar
e
include
d.
Pro
of:
()).
W
e
ha
v
e
to
sho
w
that
the
atoms
can
b
e
generated,
since
all
other
v
ertices
are
formed
from
these
b
y
the
_
op
eration.
Eac
h
atom
corresp
onds
to
an
elemen
t
of
the
set
A,
namely
the
singleton
set
con
taining
it.
No
w
giv
en
an
a

A,
form
the
set
q
a
=
T
fx
j
a

x

X
g
\
T
fA
 x
j
a

x

X
g.
Then
a

q
a
,
since
it
is
in
eac
h
set
x
or
A
 x
in
the
RHS.
Also,
if
b
=
a,
then
there
is
a
set
in
X
that
separates
them,
b
y
the
T
0
prop
ert
y
.
This
set
ensures
that
b

q
a
.
Th
us
the
atoms
can
b
e
generated.
(().
Giv
en
a
=
b,
the
singleton
set
con
taining
a
can
b
e
generated.
So
there
m
ust
b
e
an
elemen
t
in
X
separating
a
and
b.
Th
us
giv
en
a
partial
Bo
olean
Algebra,
it
is
easy
to
c
hec
k
if
it
is
T
0
,
b
y
making
sure
that
the
CABA
is
generated.
This
means
that
the
CABA
underlying
a
T
0
Ch
u
space
is
the
smallest
suc
h,
and
if
w
e
regard
the
underlying
CABA
as
merely
pro
viding
the
information
ab
out
meets
and
joins
and
complemen
ts,
then
this
is
the
most
economical
w
a
y
of
doing
it.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE
0
Ho
w
ev
er,
as
w
e
ha
v
e
seen
ab
o
v
e,
ev
en
v
ery
small
Ch
u
spaces
lik
e
gure
.
ab
o
v
e
can
ha
v
e
v
ery
large
partial
Bo
olean
Algebra
represen
tations.
This
leads
us
to
a
similar
but
more
economical
represen
tation,
the
partial
distributiv
e
lattice.
.
P
artial
Distributiv
e
Lattices
In
the
ab
o
v
e
section
w
e
sa
w
that
a
Ch
u
space
could
b
e
written
as
a
set
X
em
b
edded
in
a
CABA

A
,
suc
h
that
X
generated

A
.
But
this
means
that
for
ev
en
v
ery
small
Ch
u
spaces,
in
whic
h
X
ma
y
ha
v
e
only
n
elemen
ts,
the
CABA
represen
tation
can
b
e
of
size

n+
.
An
ob
vious
question
is
if
w
e
can
presen
t
the
Ch
u
space
with
less
structure
than
the
CABA

A
,
but
con
taining
the
same
information.
The
follo
wing
prop
osition
[Joh
,
p.0]
enables
us
to
answ
er
this
question
in
the
armativ
e.
It
states
that
up
to
isomorphism,
ev
ery
distributiv
e
lattice
can
b
e
uniquely
extended
to
a
CABA,
the
least
or
canonical
suc
h
CABA.
So
instead
of
dra
wing
the
whole
CABA
generated
b
y

A
,
w
e
need
dra
w
only
the
distributiv
e
lattice
generated
b
y
X
,
the
set
of
elemen
ts
of

A
generated
b
y
X
using
the
op
erations
union
and
in
tersection
(whic
h
are
meet
and
join
in
the
lattice.
In
some
cases,
this
p
ermits
up
to
an
exp
onen
tial
sa
vings
in
size.
F
or
the
innite
case,
an
additional
requiremen
t
on
the
distributiv
e
lattice
is
that
it
b
e
pr
onite.
While
this
term
ma
y
b
e
applied
to
v
arious
algebras,
and
in
fact
CABA's
can
b
e
describ
ed
as
pronite
Bo
olean
Algebras,
for
distributiv
e
lattices
there
is
a
similar
simple
c
haracterization.
A
distributiv
e
lattice
is
called
pronite
if
it
is
complete,
and
its
completely
join
prime
elemen
ts
generate
the
en
tire
lattice
b
y
joins.
A
completely
join
prime
elemen
t
x

X
is
one
suc
h
that
if
x

W
Y
;
Y

X
,
then
x

y
for
some
y

Y
.
(W
e
allo
w
innite
joins
here.)
F
or
a
distributiv
e
lattice
this
condition
is
equiv
alen
t
to
the
condition
W
fy
<
x
j
y

Lg
<
x.
Note
that
in
a
CABA
the
completely
join
prime
elemen
ts
are
exactly
the
atoms,
so
a
CABA
could
also
b
e
dened
as
a
complete
Bo
olean
Algebra
whic
h
is
generated
b
y
its
completely
join
prime
elemen
ts.
W
e
state
and
pro
v
e
the
prop
osition
in
elemen
tary
terms
for
greater
accessibilit
y
.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

Prop
osition
.
If
L
is
a
pr
onite
distributive
lattic
e,
then
ther
e
is
a
CABA
B
and
a
c
omplete
lattic
e
homomorphism
i
:
L
!
B
such
that
for
any
other
CABA
B
0
and
a
c
omplete
lattic
e
homomorphism
f
:
L
!
B
0
,
ther
e
is
a
unique
CABA
homomorphism
^
f
:
B
!
B
0
such
that
f
=
^
f

i.
Pro
of:
The
idea
is
to
iden
tify
a
subset
of
the
elemen
ts
of
L
and
tak
e
these
to
b
e
the
atoms
of
B
.
Then
L
will
em
b
ed
in
B
.
W
e
will
sho
w
that
this
em
b
edding
is
unique
up
to
isomorphism.
Let
A
b
e
the
set
of
join
prime
elemen
ts
of
L.
No
w
w
e
will
form
the
CABA

A
,
and
L
is
em
b
edded
in
this
CABA
via
i
:
L
!

A
dened
b
y
i(y
)
=
fx

A
j
x

y
g.
This
function
preserv
es
all
meets
and
joins
of
L
(the
pro
of
is
similar
to
that
of
[MMT
,
thm
.,
pg
]),
and
is
injectiv
e,
as
A
generates
L
b
y
denition.
No
w
giv
en
f
:
L
!
B
0
,
a
complete
lattice
homomorphism,
w
e
can
extend
it
to
all
of
B
b
y
dening
it
on
the
atoms
of
B
.
If
a

A,
dene
^
f
(a)
=
f
(a)
^
:
W
ff
(x)
j
x
<
a;
x

Ag.
This
is
required
as
the
atom
corresp
onding
to
a
is
exactly
a
^
:
W
fx

A
j
x
<
ag.
No
w
this
is
extended
to
a
CABA
homomorphism
^
f
:
B
!
B
0
.
f
=
^
f

i
since
this
is
true
for
the
primes
((a
^
:b)
_
b
=
a
_
b).
The
uniqueness
of
^
f
follo
ws
from
the
canonical
denition.
This
prop
osition
enables
us
to
w
ork
with
a
smaller
pictorial
represen
tation
on
the
Ch
u
Space
than
the
partial
Bo
olean
algebra.
It
also
mak
es
the
structure
of
the
Ch
u
space
a
lot
clearer,
and
from
no
w
on,
w
e
will
dra
w
only
these
pictures,
called
p
artial
distributive
lattic
es,
or
p
d
lats.
W
e
will
write
a
p
dlat
as
a
pair
(P
;
L),
where
L
is
the
lattice
generated
b
y
X
,
and
P
is
the
set
X
along
with
the
p
oset
structure
it
inherits
from
L,
as
it
is
a
subset
of
L.
W
e
need
this
p
oset
structure
for
dualit
y
reasons,
and
these
will
b
e
made
clear
in
the
next
c
hapter.
The
p
dlats
corresp
onding
to
the
Ch
u
spaces
sho
wn
ab
o
v
e
are
in
gure
..
Notice
that
these
pictures
lo
ok
quite
lik
e
automata,
as
the
dots
are
states
and
edges
are
ev
en
ts.
W
e
go
in
to
this
in
more
detail
in
Chapter
.
Prop
osition
.
giv
es
us
a
simple
algorithm
to
reco
v
er
a
Ch
u
space
from
its
p
dlat
represen
tation.
The
elemen
ts
of
X
are
the
blac
k
v
ertices
of
the
p
dlat,
while
the
elemen
ts
of
A
are
the
join-primes
of
the
underlying
lattice.
The
relation
R
is
giv
en
b
y
the

relation,
R(a;
x)
=

i
a

x
in
the
lattice.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE



x
@
@
  
v
@
@

w
  
u



  @
@

u
@
@

v
  

  @
@

w
  @
@

v
  
u
@
@

  
:(b)
:(d)
:(e)
Figure
.:
The

extensional
T
0
Ch
u
spaces
of
Figure
.
dra
wn
as
p
dlats
Of
course
w
e
w
ould
lik
e
to
con
tin
ue
the
pro
cess
ev
en
further.
One
p
ossibilit
y
is
if
w
e
just
tak
e
the
p
oset
generated
b
y
A.
Ho
w
ev
er
this
do
es
not
w
ork,
as
the
follo
wing
pair
of
Ch
u
spaces
w
ould
then
b
e
represen
ted
b
y
the
same
structure,
ev
en
though
they
are
not
isomorphic.
In
fact,
p
dlats
seem
to
b
e
the
b
est
w
e
can
do
here
as
there
is
no
extension
theorem
lik
e
theorem
.
for
other
structures.

  @
@

@
@

  @
@

  
@
@


  

  @
@

@
@

  @
@

  
@
@


  
Figure
.:
Incompleteness
of
P
oset
Structure
.
The
logic
represen
tation
While
the
pictorial
represen
tations
of
Ch
u
spaces
ab
o
v
e
are
useful
for
understanding
what
a
Ch
u
space
lo
oks
lik
e,
they
are
still
not
v
ery
compact.
An
alternativ
e
w
a
y
to
sp
ecify
a
Ch
u
space
is
via
a
form
ula,
of
innitary
prop
ositional
Bo
olean
logic.
This
represen
tation
mak
es
it
p
ossible
to
see
the
prop
erties
of
the
Ch
u
space
a
lot
more
easily
,
so
sp
ecication
of
the
Ch
u
space
is
simpler.
W
e
assign
a
b
o
olean
prop
ositional
form
ula
to
eac
h
extensional
Ch
u
space
as
fol-
lo
ws.
The
v
ariables
of
the
form
ula
will
b
e
the
elemen
ts
of
the
set
A.
F
or
eac
h
x

X
w
e
form
a
clause
V
faja

A;
R(a;
x)
=
g
^
V
f:aja

A;
R(a;
x)
=
0g.
The
dis-
junction
of
all
suc
h
clauses
then
giv
es
the
prop
osition
al
b
o
olean
form
ula.
W
e
call

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

this
the
c
omplete
disjunctive
normal
form
(abbr.
CDNF)
of
a
prop
ositional
form
ula.
Giv
en
an
y
form
ula
and
its
set
of
v
ariables,
this
form
is
unique
up
to
comm
utativit
y
,
asso
ciativit
y
and
idemp
otence
of
^
and
_.
Note
that
if
A
and
X
are
innite,
the
CDNF
w
ould
need
innitary
b
o
olean
connectiv
es.
F
or
the

extensional
T
0
Ch
u
spaces
presen
ted
ab
o
v
e,
the
b
o
olean
prop
ositional
form
ulae
are
giv
en
b
elo
w.
W
e
use
the
short
forms

a
for
the
negation
of
a
and
ab
for
a
^
b.
:(b)

a

b

cd
_

a

bcd
_

ab

cd
_

a
bcd
:(d)

a

bc
_
a

b

c
:(e)
a

b

c
_

abc
_
ab

c
Of
course
the
CDNF
form
is
not
an
ecien
t
w
a
y
to
write
out
the
prop
ositional
form
ula,
for
example
for
the
Ch
u
space
.(a),

ad
is
just
as
go
o
d
as
the
long
expression.
In
fact
this
shorter
represen
tation
mak
es
explicit
that
the
b
and
c
are
not
constrained
in
this
form
ula.
An
y
form
ula
logically
equiv
alen
t
to
the
CDNF
form
ula
is
an
equally
v
alid
represen
tation.
The
columns
of
the
matrix
are
exactly
the
satisfying
assignmen
ts
of
the
prop
osi-
tional
form
ula.
Eac
h
column
mak
es
the
clause
corresp
onding
to
its
state
true,
so
the
whole
form
ula
b
ecomes
true.
Moreo
v
er,
an
y
other
assignmen
t
diers
from
eac
h
col-
umn
on
at
least
one
v
ariable,
it
mak
es
eac
h
clause
false,
and
th
us
the
whole
form
ula
b
ecomes
false.
So
giv
en
a
prop
ositional
form
ula,
w
e
can
construct
its
Ch
u
space
as
the
set
of
all
satisfying
assignmen
ts.
The
logical
represen
tation
giv
es
another
w
a
y
of
dra
wing
Ch
u
spaces,
as
com
bina-
tional
circuits
or
gates.
The
inputs
of
a
circuit
represen
ting
(A;
X
;
R)
consist
of
the
elemen
ts
of
A,
and
it
has
one
output
whic
h
calculates
the
b
o
olean
expression
repre-
sen
ting
the
Ch
u
space.
W
e
will
see
this
in
more
detail
in
c
hapter
,
and
applications
of
the
gate
view
to
visualizing
the
Ch
u
algebra
will
b
e
discussed
in
c
hapter
.
Theory
of
a
Ch
u
space.
The
set
of
all
innitary
Bo
olean
form
ulas
that
are
consequences
of
the
logical
form
ula
of
a
Ch
u
space
is
called
the
the
ory
of
a
Ch
u
space.
W
e
will
use
the
theory
in
the
next
c
hapter
to
dene
Ch
u
morphisms
as
theory
preserving
renamings,
and
later
use
form
ulas
in
the
theory
to
represen
t
concurren
t
b
eha
vior.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

.
Alternativ
e
presen
tations:
dualit
y
In
the
denition
of
a
Ch
u
space,
A
and
X
w
ere
symmetric.
Ho
w
ev
er
in
our
presen
ta-
tion
of
a
Ch
u
space
as
a
partial
Bo
olean
Algebra,
w
e
assumed
that
X


A
.
Clearly
,
there
is
nothing
sp
ecial
ab
out
this,
and
regarding
A
as
a
subset
of

X
is
an
equally
v
alid
w
a
y
of
dra
wing
the
Ch
u
space
as
a
partial
Bo
olean
algebra,
with
the
consequen
t
restriction
to
a
partial
distributiv
e
lattice.
This
is
the
essence
of
dualit
y
for
Ch
u
spaces,
and
w
e
will
talk
ab
out
it
in
the
next
c
hapter.
In
order
to
distinguish
it
from
the
represen
tation
giv
en
earlier,
w
e
will
call
these
the
dual
pBA
or
the
dual
p
dlat
represen
tations.
Both
the
p
dlat
represen
tation
and
the
dual
p
dlat
represen
tation
will
b
e
imp
ortan
t
in
represen
ting
a
concurren
t
pro
cess
as
a
Ch
u
space.
In
the
same
w
a
y
,
w
e
can
write
logical
expressions
with
v
ariables
corresp
onding
to
the
elemen
ts
of
X
.
As
ab
o
v
e,
w
e
will
call
this
the
dual
logical
represen
tation.
.
More
examples
Ha
ving
dened
Ch
u
spaces
in
v
arious
w
a
ys,
w
e
will
no
w
giv
e
pictures
of
all
extensional
T
0
Ch
u
spaces
in
whic
h
jAj

,
up
to
isomorphism.
There
are

suc
h
Ch
u
spaces,

with
jAj
=
0,

with
jAj
=
,

with
jAj
=

and

with
jAj
=
.
The
corresp
onding
n
um
b
ers
for
jAj
=
;

are

and
0,
but
w
e
w
on't
dra
w
those!
(Note
that

and
0
are
not
p
o
w
ers
of
!)
W
e
sho
w
the
p
dlat
form
of
a
Ch
u
space,
then
giv
e
its
matrix
and
a
simple
logical
represen
tation.
All
Ch
u
spaces
with
jAj


are
sho
wn,
but
for

and
,
w
e
use
some
symmetries
to
displa
y
only
a
few,
and
the
others
can
b
e
obtained
b
y
simple
manipulation
of
the
ones
sho
wn.
Note
that
the
four
p
dlats
with
jAj
=

dier
from
eac
h
other
only
in
whether
the
top
or
b
ottom
elemen
ts
are
holes
or
dots.
In
the
dual
p
dlats,
this
means
presence
or
absence
of
spik
es,
while
in
the
matrices
it
means
presence
or
absence
of
the
constan
t
ro
ws.
In
the
logical
form,
it
is
equiv
alen
t
to
a
form
ula
b
eing
implied
b
y
 ,
the
logical
represen
tation
of
the
Ch
u
space.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

Pdlat
repn
Dual
p
dlat
repn
Logical
repn
Matrix
repn
Bottom
is
a
hole
No
spik
e
at
top
 !
W
A
no
ro
w
of
0's
T
op
is
a
hole
No
spik
e
at
b
ottom
 !
:
V
A
no
ro
w
of
's
Eac
h
of
the
ab
o
v
e
conditions
can
hold
indep
enden
tly
,
giving
rise
to
the

cases.
In
the
examples
here,
w
e
will
presen
t
only
the
Ch
u
space
in
whic
h
b
oth
of
them
hold,
cutting
do
wn
the
n
um
b
er
of
spaces
with
jAj
=
;

to

and

resp
ectiv
ely
.
Of
the

Ch
u
spaces
with
jAj
=
,

o
ccur
in
pairs,
where
the
matrix
of
one
mem
b
er
of
the
pair
is
the
bit
wise
complemen
t
of
the
other
(for
the
others,
the
complemen
t
is
an
isomorphic
matrix).
Complemen
ting
the
matrices
turns
the
p
dlats
upside
do
wn.
W
e
will
dra
w
only
one
mem
b
er
of
eac
h
pair,
further
reducing
the

to
0.
So
the

Ch
u
spaces
are
giv
en
in
Figure
..
The
dual
p
dlat
at
the
top,
and
b
elo
w
it
is
a
prop
ositiona
l
form
ula
represen
ting
the
space.
On
some
form
ulas
a
subscript
indicates
the
n
um
b
er
of
v
ariables
in
that
form
ula,
when
written
out
in
its
CDNF
form.
b
elo
w
this
to
the
left
is
the
matrix,
and
to
the
righ
t
is
the
p
dlat
represen
tation
of
the
Ch
u
space.

  @
@

@
@

  @
@

  
  @
@

b

c
  
a
@
@

  

  @
@

@
@

  @
@

  
  @
@

b

  @
@

a
@
@

  @
@

c
  
@
@

  

  @
@

@
@

  @
@

  
  @
@

@
@

  @
@

a
@
@

  @
@

b
  
c
  
@
@

  @
@

  
@
@


  
a
^
b
$
a
^
c
b
!
a
_
c


abc
w
00
x
00
y
0
z
00

  @
@

@
@

  @
@

  
@
@


  
abc
v
00
w
00
x
0
y
00
z
0

  @
@

@
@

  @
@

  
@
@


  
abc
u
00
v
00
w
0
x
00
y
0
z
0

  @
@

@
@

  @
@

  
@
@


  
Figure
.
con
tin
ued.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE





a


a

a



a


0
0
0
0

:a
a




0

0

0

0


a
x
0


x
a
x


x

a
x
0
y


y

x

b

a

  @
@

a
@
@

b
  

b

c

a

b
  @
@

a
@
@

c
  

b

  @
@

a
@
@

c
  
b
!
a


(b
!
c)
a
_
c
$
b
b
!
(a
^
c)
^(c
!
a)
ab
x
0


x

ab
x
0
y
0

  @
@

x
@
@

y
  
abc
x
00
y
0


y

x

abc
x
0
y
0

  @
@

x
@
@

y
  

abc
x
00
y
0
z
0

  @
@

y
@
@

z
  
x


  @
@

a
@
@

b
  @
@

@
@

c
  

  @
@

  @
@

b
  
a
@
@

  @
@

@
@

c
  

  @
@

  @
@

  @
@

a
@
@

b
  @
@

c
  
@
@

  

  @
@

@
@

  @
@

  
a
@
@

b

c
  
(a
_
c
!
b)
b
!
c
(a
_
c
!
b)
a
^
b
$
b
^
c
^(b
!
c)
^(b
!
a
^
c)
$
c
^
a
abc
x
00
y
0
z
0

  @
@

y
@
@

z
  @
@

@
@

x
  
abc
w
00
x
00
y
0
z
0

  @
@

y
@
@

z
  @
@

x
@
@

w
  
abc
w
00
x
0
y
00
z
0

  @
@

x
@
@

  @
@

z
  
w
@
@


y
  
abc
x
00
y
00
z
00

  @
@

@
@

  @
@

  
x
@
@

y

z
  
Figure
.:
The
Ch
u
spaces
with
jAj

.

CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

.
Ch
u's
Construction:
The
categorical
deni-
tion
Ch
u
spaces
rst
arose
as
an
instance
of
a
general
construction,
p
opularly
called
Ch
u's
construction,
describ
ed
b
y
Mic
hael
Barr
and
P
o-Hsiang
Ch
u
in
[Bar	
].
In
fact
the
name
Ch
u
spaces
w
as
suggested
to
Pratt
b
y
Mic
hael
Barr
in
an
email
message.
Ch
u's
construction
is
used
to
mak
e
-autonomous
categories
from
an
autonomous
cate-
gories.
An
autonomous
category
is
a
closed
symmetric
monoidal
category
,
while
a
-autonomous
category
is
an
autonomous
category
with
a
dualizing
ob
ject.
W
e
will
giv
e
a
v
ery
brief
outline
of
the
construction
here,
and
refer
the
reader
to
[Bar	]
for
details.
W
e
start
with
a
nitely
complete
closed
symmetric
monoidal
category
V
and
an
ob
ject
of
V
,
denoted
?.
The
-autonomous
category
constructed
from
these
is
denoted
V
?
.
Its
ob
jects
are
triplets
(V
;
V
0
;
v
)
where
V
;
V
0
are
ob
jects
of
V
,
and
v
:
V

V
0
!
?.
Its
morphisms
are
pairs
of
morphisms
from
V
,
(f
;
f
0
)
:
(V
;
V
0
;
v
)
!
(W
;
W
0
;
w
)
where
f
:
V
!
W
and
f
0
:
W
0
!
V
0
,
suc
h
that
v

(;
f
0
)
=
(f
;
)

w
.
No
w
Barr
sho
ws
that
the
category
V
?
is
a
-autonomous
category
,
whic
h
em
b
eds
V
.
The
dual
of
an
y
ob
ject
(V
;
V
0
;
v
)
is
(V
0
;
V
;
v

s),
where
s
is
the
symmetry
isomor-
phism
s(A;
B
)
:
A

B
!
B

A,
and
the
dualizing
ob
ject
is
(?;
?
?
;
l
),
where
l
is
the
ev
aluation
map.
Since
the
category
of
sets
and
functions
satises
all
the
necessary
prop
erties
for
Ch
u's
construction,
w
e
can
apply
Ch
u's
construction
to
it
with
the
t
w
o
elemen
t
set
f0;
g
as
?,
and
the
resulting
category
is
the
category
of
Ch
u
spaces.
In
[LS	
],
Lafon
t
and
Streic
her
studied
the
same
category
category
,
using
K-
v
alued
matrices
instead
of
-v
alued
ones,
so
the
relation
R
go
es
from
A

X
to
K
,
for
some
in
teger
K
.
They
called
this
category
Game
K

,
and
use
it
to
construct
a
mo
del
of
linear
logic.
They
call
these
games
as
they
view
the
elemen
ts
of
A
and
X
as
strategies
for
t
w
o
pla
y
ers,
and
R
is
then
a
pa
y
o
function,
th
us
giving
a
Ch
u
space
an
in
terpretation
as
a
v
on
Neumann-Morgenstern
game.
This
mo
del
is
also
similar
to
the
Dialectica
Categories
of
de
P
aiv
a
[dP	],
see
[LS	
].
The
morphisms
of
the
Dialectica
categories
are
a
bit
dieren
t,
there
R(a;
g
(y
))

S
(f
(a);
y
),
where
it
is

Th
us
Ch
u
spaces
are
Game


CHAPTER
.
DEFINITION
OF
A
CHU
SP
A
CE

assumed
that
0
<
.
The
dualit
y
of
Ch
u
spaces
do
es
not
hold
for
general
ob
jects,
only
for
decidable
ones,
and
the
tensor
pro
duct
is
quite
dieren
t:
(A;
X
;
R)

(B
;
Y
;
S
)
=
(A

B
;
Y
A

X
B
;
T
)
where
T
((a;
b);
(f
;
g
))
=
R(a;
g
(b))
^
S
(b;
f
(a))
for
all
a

A;
b

B
;
f
:
A
!
Y
;
g
:
B
!
X
.

Chapter

The
Category
of
Ch
u
Spaces
In
this
c
hapter
w
e
build
up
a
category
of
Ch
u
spaces.
The
ob
jects
w
ere
dened
in
the
last
c
hapter,
and
w
e
had
men
tioned
the
morphisms
also
in
the
categorical
de-
nition.
Here
w
e
will
giv
e
simple
c
haracterizations
of
the
morphisms
for
the
dieren
t
presen
tations,
and
presen
t
the
dualit
y
of
categories.
Applications
to
algebra
will
also
b
e
men
tioned.
.
Maps
b
et
w
een
Ch
u
Spaces
Giv
en
t
w
o
Ch
u
spaces
(A;
X
;
R)
and
(B
;
Y
;
S
),
a
Ch
u
transform
b
et
w
een
them
consists
of
a
pair
of
functions
f
:
A
!
B
and
g
:
Y
!
X
,
suc
h
that
the
follo
wing
equation
holds
for
an
y
a

A
and
an
y
y

Y
:
S
(f
(a);
y
)
=
R(a;
g
(y
)).
W
e
will
call
this
condition
the
adjoin
tness
condition
for
Ch
u
maps,
and
f
and
g
will
b
e
called
the
left
and
righ
t
adjoin
t
resp
ectiv
ely
.
Th
us
in
a
Ch
u
space,
the
set
A
transforms
co
v
arian
tly
,
while
X
transforms
con
tra
v
arian
tly
.
Just
as
w
e
wrote
out
a
Ch
u
space
as
a
matrix,
w
e
will
write
out
a
Ch
u
map
as
another
matrix.
A
Ch
u
map
b
et
w
een
(A;
X
;
R)
and
(B
;
Y
;
S
)
will
b
e
a
jY
j

jAj
matrix,
eac
h
of
whose
jAj
columns
are
columns
from
(B
;
Y
;
S
),
the
column
corresp
onding
to
a

A
b
eing
the
column
represen
ting
f
(a)
in
the
matrix
for
(B
;
Y
;
S
).
Dually
,
eac
h
ro
w
is
a
ro
w
from
(A;
X
;
R),
and
the
ro
w
corresp
onding
to
y

Y
is
the
ro
w
represen
ting
g
(y
)
in
the
matrix
for
(A;
X
;
R).
An
alternativ
e
w
a
y
of
sp
ecifying
the
matrix
is
to
	

CHAPTER
.
THE
CA
TEGOR
Y
OF
CHU
SP
A
CES
0
sa
y
that
the
(y
;
a)-th
en
try
is
S
(f
(a);
y
),
whic
h
is
equal
to
R(a;
g
(y
)).
Lo
oking
at
the
jY
j

jAj
matrix
as
a
Ch
u
space
(A;
Y
;
T
),
Pratt
p
oin
ts
out
that
this
Ch
u
space
is
a
factoring
of
(f
;
g
)
as
(f
;
g
)
=
(f
;
I
d)

(I
d;
g
),
where
(I
d;
g
)
:
(A;
X
;
R)
!
(A;
Y
;
T
)
and
(f
;
I
d)
:
(A;
Y
;
T
)
!
(B
;
Y
;
S
).
This
and
other
factorings
are
discussed
in
[Pra	
].
W
e
will
just
giv
e
one
example
of
a
Ch
u
map
here,
more
examples
will
come
up
later.
W
e
will
dra
w
the
space
(A;
X
;
R)
on
the
top
left,
(B
;
Y
;
S
)
on
the
b
ottom
righ
t,
and
the
matrix
for
the
morphism
on
the
b
ottom
left.
abcde
u
0000
v
000
w
000
x
0
000
000
00
u
0
00
v
0
a
0
b
0
c
0
d
0
Figure
.:
A
Ch
u
map
in
matrix
form.
This
is
the
matrix
corresp
onding
to
the
pair
(f
;
g
),
where
f
(a)
=
a
0
;
f
(b)
=
a
0
;
f
(c)
=
b
0
;
f
(d)
=
c
0
;
f
(e)
=
d
0
,
and
g
(u
0
)
=
v
;
g
(v
0
)
=
w
.
In
this
case
the
rst
Ch
u
space
w
as
extensional,
so
in
fact
f
is
uniquely
determined
b
y
the
matrix
(there
is
a
unique
o
ccurrence
of
an
y
ro
w
on
the
top
left
matrix),
and
similarly
as
the
second
Ch
u
space
w
as
T
0
,
g
is
also
uniquely
determined.
Note
that
either
of
f
or
g
uniquely
determine
the
map
matrix,
so
w
e
observ
e
that
if
(f
;
g
)
:
P
!
Q
is
a
Ch
u
map,
then
f
uniquely
determines
g
if
P
is
extensional,
and
g
uniquely
determines
f
if
Q
is
T
0
.
[Bar	].
Maps
b
et
w
een
p
dlats.
Just
as
eac
h
T
0
extensional
Ch
u
space
corresp
onds
to
a
p
dlat,
w
e
can
dene
a
p
dlat
map
b
et
w
een
t
w
o
p
dlats
whic
h
corresp
onds
to
the
Ch
u
map
b
et
w
een
the
corresp
onding
Ch
u
spaces.
Denition

Giv
en
t
w
o
p
dlats
(P
;
L)
and
(P
0
;
L
0
),
f
#
:
L
!
L
0
is
a
p
dlat
homo-
morphism
if
f
#
is
a
complete
lattice
homomorphism
and
f
#
(P
)

P
0
.
The
t
w
o
denitions
are
equiv
alen
t,
as
is
sho
wn
b
y
the
follo
wing
prop
osition:

CHAPTER
.
THE
CA
TEGOR
Y
OF
CHU
SP
A
CES

Prop
osition
.
L
et
(A;
X
;
R)
and
(B
;
Y
;
S
)
b
e
two
T
0
extensional
Chu
sp
ac
es,
and
let
(P
;
L)
and
(P
0
;
L
0
)
b
e
their
c
orr
esp
onding
dual
p
d
lat
r
epr
esentations.
Then
the
set
of
Chu
maps
fr
om
(A;
X
;
R)
to
(B
;
Y
;
S
)
is
in
-
c
orr
esp
ondenc
e
with
the
set
of
p
d
lat
maps
fr
om
(P
;
L)
to
(P
0
;
L
0
).
Pro
of:
Note
that
in
the
dual
p
dlat
represen
tation,
L
is
a
sublattice
of

X
and
L
0
is
a
sublattice
of

Y
.
No
w
if
(f
;
g
)
is
a
Ch
u
map,
then
g
:
Y
!
X
.
Dene

g
:

X
!

Y
b
y
if
a


X
,
then

g
(a)
=
fy
j
g
(y
)

ag
(Note
here
that
a
is
a
subset
of
X
).
This
is
a
CABA
homomorphism.
No
w
the
adjoin
tness
condition
stated
ab
o
v
e
means
that
g
(y
)

a
$
y

f
(a),
where
w
e
regard
A


X
and
B


Y
.
Th
us

g
(a)
=
fy
j
y

f
(a)g
=
f
(a).
No
w
dene
f
#
=

g
n
L
.
Then
f
#
(P
)

P
0
,
as
f
#
(a)
=
f
(a)

B
for
all
a

A.
No
w
since
L
0
is
generated
b
y
B
,
the
range
of
f
#
is
in
L
0
,
so
it
is
a
p
dlat
map.
(It
is
a
complete
lattice
homomorphism
as
it
is
the
restriction
of
a
CABA
map.)
Con
v
ersely
,
ev
ery
p
dlat
map
corresp
onds
to
a
Ch
u
map,
b
y
rev
ersing
all
the
implications
ab
o
v
e.
Th
us
w
e
ha
v
e
the
desired
-
corresp
ondence.
This
prop
osition
sho
ws
that
the
denition
of
a
Ch
u
map
is
a
natural
one.
This
is
further
substan
tiated
in
the
next
few
sections.
T
ransformations
b
et
w
een
logical
represen
tations.
Another
equally
simple
w
a
y
of
represen
ting
Ch
u
maps
is
as
transformations
b
et
w
een
their
logical
represen
ta-
tions.
Giv
en
the
logical
CDNF
represen
tations
 and

of
t
w
o
Ch
u
spaces,
w
e
dene
a
logical
transformation
b
et
w
een
them
to
b
e
a
map
f
:
v
ar
( )
!
v
ar
()

suc
h
that

!
f
( )
is
a
logical
tautology
(here
f
( )
is
the
form
ula
obtained
b
y
substituting
eac
h
v
ariable
a
of
 b
y
its
image
f
(a).).
This
represen
tation
means
that
ev
ery
form
ula
in
the
theory
of
the
source
(the
theory
consists
of
all
consequences
of
 )
is
mapp
ed
to
a
form
ula
in
the
theory
of
the
target
(all
consequences
of
).
So
it
is
a
logical
homomorphism
|
if
the
form
ulas
in
the
theory
are
regarded
as
the
constrain
ts
on
the
Ch
u
space,
then
a
homomorphism
should
preserv
e
all
of
them,
whic
h
is
exactly
what
it
do
es.
Prop
osition
.
Chu
maps
ar
e
in
-
c
orr
esp
ondenc
e
with
lo
gic
al
tr
ansformations.

v
ar
( )
is
the
set
of
v
ariables
in
the
form
ula
 .

CHAPTER
.
THE
CA
TEGOR
Y
OF
CHU
SP
A
CES

Pro
of:
Let
(A;
X
;
R)
and
(B
;
Y
;
S
)
b
e
t
w
o
T
0
extensional
Ch
u
spaces,
and
let
 and

b
e
their
logical
represen
tations.
If
(f
;
g
)
:
(A;
X
;
R)
!
(B
;
Y
;
S
)
is
a
Ch
u
map
then
w
e
dene
a
logical
transformation
f
via
its
rst
comp
onen
t.
No
w
consider
an
y
satisfying
assignmen
t
y

Y
for
.
Then
g
(y
)

X
,
so
it
forms
a
satisfying
assignmen
t
for
 .
Th
us
y
is
also
a
satisfying
assignmen
t
for
f
( ),
b
ecause
of
the
adjoin
tness
condition.
So

!
f
( ).
Con
v
ersely
,
giv
en
a
logical
transformation
f
,
it
determines
a
unique
map
g
:
Y
!
X
,
since
ev
ery
satisfying
assignmen
t
of

is
a
satisfying
assignmen
t
of
f
( ),
so
ev
ery
y

Y
is
mapp
ed
to
x

X
suc
h
that
f
(x)
=
y
\
f
(A).
This
sho
ws
that
the
three
forms
of
presen
ting
Ch
u
spaces
eac
h
ha
v
e
their
natural
morphisms,
whic
h
are
all
equiv
alen
t.
Ch
u
maps
also
ha
v
e
a
natural
in
terpretation
as
sim
ulations
b
et
w
een
pro
cesses,
and
w
e
will
sho
w
this
in
a
later
c
hapter.
Ch
u
spaces
and
Ch
u
maps
form
a
category
,
denoted
Ch
u.
The
iden
tit
y
map
for
an
ob
ject
is
a
pair
of
iden
tit
y
functions
on
its
rst
t
w
o
comp
onen
ts,
while
(f
;
g
)

(f
0
;
g
0
)
=
(f

f
0
;
g
0

g
).
Some
of
the
mathematical
structure
of
this
category
is
further
explored
in
[Pra	
],
where
Pratt
sho
ws
ho
w
to
em
b
ed
v
arious
categories
fully
and
faithfully
in
Ch
u.
.
Dualit
y
In
the
previous
c
hapter
w
e
had
indicated
briey
a
dualit
y
for
Ch
u
spaces.
The
Ch
u
construction
w
as
in
v
en
ted
sp
ecically
for
obtaining
self-dual
categories
from
autonomous
categories
[Bar	].
Here
for
reference,
w
e
will
restate
this
dualit
y
,
and
sho
w
ho
w
to
get
the
dual
of
a
p
dlat.
In
the
next
c
hapter
w
e
will
apply
this
dualit
y
to
transform
imp
erativ
e
programs
in
to
declarativ
e
ones
and
vice
v
ersa.
Denition

The
dual
of
(A;
X
;
R),
denoted
(A;
X
;
R)
?
,
is
dened
as
(X
;
A;
R

),
where
R

(x;
a)
=
R(a;
x).
Th
us
the
dual
of
a
Ch
u
space
written
out
as
a
matrix
is
the
transp
ose
of
this
matrix.
If
(f
;
g
)
:
(A;
X
;
R)
!
(B
;
Y
;
S
)
is
a
Ch
u
map,
then
(g
;
f
)
:
(Y
;
B
;
S

)
!
(X
;
A;
R

)
is
also
a
Ch
u
map
b
y
the
symmetry
of
the
denition,
th
us
sho
wing
that

CHAPTER
.
THE
CA
TEGOR
Y
OF
CHU
SP
A
CES

this
is
a
categorical
dualit
y
.
The
in
v
olution
P
??

=
P
for
an
y
Ch
u
space
P
follo
ws
from
the
denition.
The
dual
of
a
p
dlat
can
b
e
written
directly
as
(P
;
L)
?

=
(L
?
;
P
?
)|this
is
the
dual
p
dlat
represen
tation.
Here
L
?
is
the
set
of
all
lters
of
L
[Pri0
],
partially
ordered
b
y
set
inclusion.
(A
lter
is
an
up
w
ards
closed
subset
of
the
lattice
whic
h
is
closed
under
all
meets.)
P
?
is
the
set
of
all
up
w
ards
closed
subsets
of
P
,
and
it
forms
a
lattice
with
the
op
erations
of
set
union
and
in
tersection.
L
?
em
b
eds
in
P
?
b
y
sending
eac
h
elemen
t
a

L
?
to
a
\
P
whic
h
is
an
elemen
t
of
P
?
,
and
this
is
injectiv
e
b
ecause
P
generates
L.
In
Figure
.
for
eac
h
p
dlat
w
e
ha
v
e
giv
en
its
dual
p
dlat
ab
o
v
e
it.
Notice
that
eac
h
elemen
t
of
P
in
a
p
dlat
corresp
onds
to
a
dimension
of
the
dual
p
dlat,
th
us
as
w
e
remo
v
e
elemen
ts
from
P
,
w
e
collapse
the
dual
p
dlat
along
the
corresp
onding
dimensions.
This
connection
is
explored
in
[NPW,
p.	],
where
a
dimension
is
dened
to
b
e
an
equiv
alence
class
of
prime
in
terv
als,
and
eac
h
dimension
corresp
onds
to
an
ev
en
t.
Lemma
.
If
(P
;
L)
is
the
p
d
lat
for
the
Chu
sp
ac
e
P
,
then
(L
?
;
P
?
)
is
the
p
d
lat
c
orr
esp
onding
to
P
?
.
Pro
of:
Straigh
tforw
ard,
using
the
fact
that
L
??

=
L
and
P
??

=
P
,
where
L
?
is
dened
as
the
set
of
complete
lters
of
L,
ordered
b
y
inclusion,
and
P
?
is
dened
as
the
set
of
order
lters
of
P
,
again
ordered
b
y
inclusion
and
regarded
as
a
lattice.
.
The
in
ternal
Hom
functor
The
set
of
all
maps
b
et
w
een
t
w
o
Ch
u
spaces
P
=
(A;
X
;
R)
and
Q
=
(B
;
Y
;
S
)
can
itself
b
e
turned
in
to
a
Ch
u
space.
If
(C
;
Z
;
T
)
is
used
to
represen
t
this
Ch
u
space,
then
C
is
the
set
of
all
maps
from
P
to
Q
and
Z
=
(A

Y
),
the
cartesian
pro
duct
of
A
and
Y
.
No
w
if
(f
;
g
)

C
,
and
(a;
y
)

Z
,
then
T
((f
;
g
);
(a;
y
))
=
S
(f
(a);
y
)
=
R(a;
g
(y
)).
W
e
will
denote
(C
;
Z
;
T
)
b
y
P
 Q
.
Note
that
P
 Q
ma
y
not
b
e
extensional
ev
en
if
b
oth
P
and
Q
are
extensional.

CHAPTER
.
THE
CA
TEGOR
Y
OF
CHU
SP
A
CES

Whenev
er
extensionalit
y
is
required,
w
e
can
just
iden
tify
equal
ro
ws
b
y
standard-
ization,
making
the
whole
space
extensional.
Ho
w
ev
er
if
Q
is
T
0
,
w
e
can
sho
w
that
P
 Q
is
also
T
0
.
This
is
b
ecause
for
distinct
elemen
ts
(f
;
g
);
(f
0
;
g
0
)

C
,
there
is
some
a

A
suc
h
that
f
(a)
=
f
0
(a).
No
w
b
y
the
T
0
prop
ert
y
of
Q,
there
is
y

Y
whic
h
separates
f
(a)
and
f
0
(a).
Then
(a;
y
)
separates
(f
;
g
);
(f
0
;
g
0
).
W
e
can
no
w
pro
v
e
that
our
dualit
y
is
a
represen
table
dualit
y
,
represen
ted
b
y
the
Ch
u
space
?
=
(?
A
;
?
X
;
?
R
),
with
?
A
=
fa;
bg,
?
X
=
fg
and
?
R
(a;
)
=
0;
?
R
(b;
)
=
.
Lemma
.
If
P
=
(A;
X
;
R)
is
a
Chu
sp
ac
e,
then
P
?

=
P
 
?.
Pro
of:
Let
P
 ?
=
(B
;
Y
;
S
).
F
or
eac
h
elemen
t
x

X
,
dene
a
map
f
x
:
A
!
?
A
b
y
f
x
(a)
=
R(a;
x),
and
a
map
g
x
:
?
X
!
X
b
y
g
x
()
=
x.
No
w
(f
x
;
g
x
)
is
a
Ch
u
map,
so
for
eac
h
x

X
w
e
ha
v
e
giv
en
a
Ch
u
map.
It
is
clear
from
the
denition
of
a
Ch
u
map
that
these
are
all
the
maps
from
P
to
?.
Th
us
B

=
X
.
By
denition
of
P
 ?,
Y
=
A

fg

=
A.
No
w
R

(x;
a)
=
R(a;
x)
=
R(a;
g
x
())
=
S
((f
x
;
g
x
);
(a;
)).
Th
us
the
t
w
o
Ch
u
spaces
are
isomorphic.
This
isomorphism
is
natural
in
P
.
If
w
e
ha
v
e
a
map
h
=
(h;
k
)
:
Q
!
P
,
and
the
isomorphism
ab
o
v
e
is
denoted
b
y

P
:
P
?
!
P
 ?,
then

Q

h
?
=
(h ?)


P
.
Giv
en
an
y
x

X
,

Q

h
?
(x)
=

Q
(k
(x))
=
f
k
(x)
.
No
w
for
b

B
,
f
k
(x)
(b)
=
S
(b;
k
(x))
=
R(h(b);
x)
=
f
x
(h(b)).
This
is
exactly
(h ?)


P
(x)(b).
W
e
can
also
sho
w
this
for
the
righ
t
adjoin
t
of
the
maps,
sho
wing
that
the
isomorphism
is
natural.
W
e
ha
v
e
already
sho
wn
that
the
dualit
y
is
categorical,
giving
the
iden
tit
y
P
 Q

=
Q
?
 P
?
.
A
third
iden
tit
y
whic
h
is
rather
useful
is
P
 (Q R
)

=
Q 
(P
 R).
The
pro
of
is
straigh
tforw
ard.
The
in
ternal
hom
functor,
as
exp
ected,
is
con
tra
v
arian
t
in
the
rst
argumen
t
and
co
v
arian
t
in
the
second.
The
action
of
this
functor
on
morphisms
is
b
y
comp
osition.

Chapter

Concurrency
Applications
No
w
that
w
e
ha
v
e
established
all
the
mathematical
bac
kground
for
Ch
u
spaces,
w
e
will
lo
ok
at
their
applications
to
concurrency
in
the
next
three
c
hapters.
W
e
ha
v
e
already
giv
en
a
brief
idea
of
this
in
the
in
tro
duction,
here
w
e
pro
vide
the
details.
In
this
c
hapter
w
e
will
in
terpret
individual
Ch
u
spaces
as
pro
cesses,
lea
ving
the
algebra
of
Ch
u
spaces
to
the
next
c
hapter.
.
Beha
vior
accepted
b
y
Ch
u
spaces
W
e
ha
v
e
already
men
tioned
ho
w
to
in
terpret
a
Ch
u
space
as
a
pro
cess|a
Ch
u
space
(A;
X
;
R)
is
in
terpreted
as
the
pro
cess
whose
set
of
ev
en
ts
is
A,
the
set
of
p
ossible
states
is
X
,
and
the
ev
en
ts
that
ha
v
e
o
ccurred
in
a
state
x

X
are
giv
en
b
y
fa

A
j
R(a;
x)
=
g.
So
a
pro
cess
starts
o
in
some
state
x,
then
executes
some
ev
en
ts
to
reac
h
another
state
x
0
,
and
this
is
ho
w
execution
progresses.
Eac
h
state
k
eeps
the
en
tire
history
of
the
pro
cess,
but
do
es
not
remem
b
er
the
order
in
whic
h
the
ev
en
ts
to
ok
place.
In
the
rest
of
this
thesis,
w
e
will
write
a
Ch
u
space
as
a
pair
(A;
X
),
where
X


A
,
with
R
b
eing
implicit
as
the
mem
b
ership
relation.
When
w
e
need
to
write
the
space
explicitly
,
w
e
will
write
the
elemen
ts
of
A
as
a
set,
and
the
elemen
ts
of
X
as
a
set
of
rep
etition-free
w
ords
o
v
er
A.
So
for
example
w
e
w
ould
write
(fa;
b;
cg;
f;
a;
b;
abcg)


CHAPTER
.
CONCURRENCY
APPLICA
TIONS

for
the
Ch
u
space
abc
w
000
x
00
y
00
z

The
adjoin
tness
condition
for
maps
will
then
b
ecome
f
(a)

y
i
a

g
(y
).
The
p
dlat
represen
tation
giv
es
a
pictorial
view
of
the
pro
cess,
view
ed
as
an
au-
tomaton.
The
states
are
giv
en
b
y
the
blac
k
dots,
and
the
edges
of
the
lattice
giv
e
the
transitions.
W
e
call
the
holes
the
forbidden
states,
as
they
are
not
states
in
whic
h
the
system
can
rest.
Computation
pro
ceeds
in
the
up
w
ards
direction,
so
can
b
e
lo
ok
ed
up
on
as
a
path
in
the
automaton.
Eac
h
edge
is
lab
eled
b
y
an
ev
en
t;
the
lab
el
can
b
e
determined
b
y
lo
oking
at
the
sets
of
ev
en
ts
lab
eling
the
extremities
of
the
edge
(a
hole
can
also
b
e
lab
eled
b
y
a
set
of
ev
en
ts,
the
only
dierence
b
eing
that
that
set
is
not
a
state
in
X
).
According
to
the
execution
mo
del
giv
en
ab
o
v
e,
a
pro
cess
can
go
from
an
y
state
to
an
y
other
state
that
is
ab
o
v
e
it.
So
the
computation
path
do
es
not
necessarily
need
to
follo
w
the
arcs
of
the
lattice
|
that
w
ould
yield
an
in
terlea
ving
mo
del
for
a
Ch
u
space.
W
e
can
assume
some
of
the
b
o
xes
in
the
lattice
as
solid
b
o
xes,
just
lik
e
the
higher
dimensional
automata
discussed
in
c
hapter
.
No
w
a
computational
path
can
b
e
an
y
path
in
this
n-dimensional
space.
The
n-dimensional
b
o
xes
that
ha
v
e
all
their

n
v
ertices
colored
blac
k
are
alw
a
ys
lled
up,
other
b
o
xes
ma
y
or
ma
y
not
b
e.
In
particular,
b
o
xes
in
whic
h
the
top
v
ertex
is
missing,
and
whic
h
do
not
ha
v
e
an
y
blac
k
dot
ab
o
v
e
the
top
v
ertex
are
nev
er
lled
up,
as
they
represen
t
a
conict.
So
no
w
a
path
is
giv
en
as
a
sequence
of
states
in
the
automaton
represen
ting
the
pro
cess.
This
kind
of
seman
tics
has
also
b
een
discussed
b
efore,
and
is
called
step
seman
tics
[DDNM].
This
is
the
kind
of
seman
tics
implicit
in
P
etri
nets
[Rei,
p.0]
and
SCCS
[Mil
].
Ho
w
ev
er
notice
that
assuming
a
path
through
the
automaton
means
that
at
ev
ery
instan
t
w
e
kno
w
exactly
where
eac
h
ev
en
t
is
in
its
computation,
or
if
the
pro
cess
is
in
some
state,
that
this
state
is
exactly
kno
wn.
This
is
not
alw
a
ys
p
ossible
or
desirable|in
a
distributed
en
vironmen
t
it
is
not
p
ossible
to
kno
w
what

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

state
eac
h
comp
onen
t
of
a
system
is
in
precisely
,
nor
is
it
necessary
to
kno
w
this,
since
it
ma
y
b
e
useless
detail
(for
example
in
ajjb
w
e
don't
need
to
kno
w
ho
w
m
uc
h
of
a
and
b
ha
v
e
b
een
nished
at
an
y
time).
So
w
e
broaden
our
class
of
computations
to
one
in
whic
h
suc
h
w
e
can
abstract
a
w
a
y
from
these
details
|
w
e
tak
e
a
computation
to
b
e
a
homotopy
class
of
monotone
paths
[Pra	,
GJ	
],
that
is
a
broad
path
free
of
holes,
where
a
hole
denotes
a
c
hoice
of
whic
h
side
one
can
go
around.
A
homotop
y
class
of
monotone
paths
is
dened
as
a
set
of
monotone
paths,
eac
h
of
whic
h
can
b
e
deformed
in
to
an
y
other
smo
othly
i.e.
without
ha
ving
to
jump
o
v
er
holes.
F
ormally
,
if
L
is
the
set
of
p
oin
ts
in
the
lattice
of
the
automaton
(states,
edges
and
in
terior
p
oin
ts)
partially
ordered,
then
a
path
is
a
monotone
con
tin
uous
function
p
:
I
R
!
L.
The
a
set
of
paths
P
is
a
homotop
y
class
if
for
ev
ery
p

;
p


P
,
there
exists
a
con
tin
uous
F
:
[0;
]
!
P
suc
h
that
F
(0)
=
p

and
F
()
=
p

.
Suc
h
a
class
denotes
a
deterministic
computation
|
all
c
hoices
ha
v
e
b
een
resolv
ed.
In
practice
w
e
sometimes
w
ould
lik
e
to
ignore
some
c
hoices,
since
they
ma
y
not
b
e
relev
an
t.
F
or
example,
w
e
ma
y
not
w
an
t
to
remem
b
er
whic
h
ev
en
t
o
ccurred
rst
in
a
m
utual
exclusion
pro
cess.
Th
us
w
e
can
generalize
a
computation
to
a
path
whic
h
do
es
ha
v
e
some
small
holes.
Th
us
giv
en
a
Ch
u
space
w
e
can
informally
dene
a
b
eha
vior
to
b
e
an
y
subset
of
its
set
of
states
(the
paths
can
b
e
inferred
from
the
states
in
the
b
eha
vior).
More
precisely
,
a
b
eha
vior
of
(A;
X
)
is
another
Ch
u
space
(A;
Y
),
where
Y

X
.
The
whole
pro
cess
is
giv
en
b
y
the
disjunction
of
all
its
b
eha
viors,
somewhat
reminiscen
t
of
the
trace
mo
dels.
Lab
eling.
Un
til
no
w
w
e
ha
v
e
not
considered
the
actions
that
a
pro
cess
executes,
only
the
ev
en
ts,
whic
h
w
ere
earlier
dened
to
b
e
o
ccurrences
of
actions.
W
e
no
w
in
tro
duce
a
lab
ele
d
Chu
sp
ac
e
as
a
Ch
u
space
(A;
X
)
with
a
lab
eling
function

:
A
!
Act,
where
Act
is
a
set
of
p
ossible
actions.
W
e
will
not
insist
that
Ch
u
maps
preserv
e
lab
els,
though
w
e
will
sometimes
consider
the
class
of
Ch
u
maps
that
do
preserv
e
lab
els
i.e.

0
(f
(a))
=
(a).

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

.
Dual
view
of
a
Ch
u
space
|
Sc
hedules
In
the
ab
o
v
e
section
w
e
ha
v
e
in
terpreted
the
p
dlat
corresp
onding
to
a
Ch
u
space
as
an
automaton.
The
dual
p
dlat
of
a
Ch
u
space
pro
vides
an
alternativ
e
w
a
y
of
lo
oking
at
a
Ch
u
space,
as
a
sc
hedule
of
ev
en
ts.
The
blac
k
blobs
in
the
dual
p
dlat
are
ev
en
ts,
and
the
underlying
lattice
structure
giv
es
the
constrain
ts
b
et
w
een
the
ev
en
ts.
The
dualit
y
b
et
w
een
sc
hedules
and
automata
is
the
consequence
of
a
deep
er
dualit
y
b
et
w
een
ev
en
ts
and
states
themselv
es.
T
raditionall
y
ev
en
ts
are
regarded
as
atomic,
and
states
as
sets
of
ev
en
ts,
as
in
ev
en
t
structures
and
p
omsets.
T
aking
this
dual
view
allo
ws
us
to
consider
states
as
atomic,
and
ev
en
ts
as
sets
of
states,
with
a
state
b
elonging
to
an
ev
en
t
i
the
ev
en
t
has
o
ccurred
in
that
state.
If
w
e
are
willing
to
b
e
more
adv
en
turous
with
foundations
of
set
theory
,
w
e
ma
y
do
b
oth|
the
resulting
circularit
y
in
the
mem
b
ership
relation
can
b
e
cop
ed
with
b
y
dropping
the
F
oundation
Axiom
of
ZF
set
theory
and
replacing
it
b
y
e.g.
Aczel's
An
ti-F
oundation
Axiom.
This
results
in
states
and
ev
en
ts
b
eing
treated
on
the
same
fo
oting,
something
whic
h
has
not
b
een
done
in
previous
mo
dels.
Time
and
Information
Duality.
Pratt
[Pra	b
]
has
observ
ed
a
dualit
y
b
et
w
een
time
and
information
based
on
the
in
tuitions
b
ehind
ev
en
t-state
dualit
y
.
Ev
en
ts
are
regarded
as
instan
taneous,
o
ccurring
at
a
particular
time,
and
they
add
to
the
total
accum
ulated
information.
Dually
,
no
information
is
accum
ulated
in
a
state,
whic
h
ho
w
ev
er
adds
to
the
total
amoun
t
of
time
that
has
passed
since
the
b
eginning
of
the
pro
cess.
Th
us
w
e
can
plot
the
progress
of
a
b
eha
vior
on
a
graph
with
time
on
the
x-
axis
and
information
on
the
y-axis.
The
states
are
then
horizon
tal
line
segmen
ts,
and
the
ev
en
ts
are
v
ertical.
The
graph
is
monotonically
increasing,
as
w
e
tak
e
computation
to
b
e
monotonic.
The
graph
is
also
piecewise
horizon
tal
and
v
ertical,
but
as
the
n
um
b
er
of
ev
en
ts
gro
ws
to
innit
y
it
starts
lo
oking
lik
e
a
monotonically
increasing
curv
e.
In
gure
.
w
e
ha
v
e
dra
wn
the
p
dlats
(automata)
and
dual
p
dlats
(sc
hedules)
corresp
onding
to
some
Ch
u
spaces.
It
can
b
e
seen
that
in
the
sc
hedules,
time
is
o
wing
do
wn
w
ards,
as
opp
osed
to
the
automata,
where
time
o
ws
up
w
ards.
So
w
e
start
o
b
y
doing
ev
en
ts
at
the
top
of
the
lattice,
and
w
ork
our
w
a
y
do
wn.
The
lattice

CHAPTER
.
CONCURRENCY
APPLICA
TIONS
	
denes
the
constrain
ts
|
if
an
ev
en
t
is
b
elo
w
another
ev
en
t,
it
m
ust
b
e
done
later.
If
an
ev
en
t
is
the
join
of
t
w
o
ev
en
ts
in
the
lattice,
then
as
so
on
as
it
is
done
either
of
the
t
w
o
ev
en
ts
of
whic
h
it
is
the
join
m
ust
also
b
e
done.
This
follo
ws
from
our
denition
of
a
dual
p
dlat,
since
the
states
of
its
Ch
u
space
are
just
its
lters
in
tersected
with
its
ev
en
t
set,
so
an
y
equation
lik
e
a
_
b
=
c
m
ust
b
e
satised
in
all
states.
Dual
to
the
notion
of
a
b
eha
vior,
w
e
dene
a
pr
op
erty
of
a
Ch
u
space
(A;
X
)
to
b
e
an
y
other
Ch
u
space
(A;
Y
),
where
X

Y


A
.
F
or
example,
the
space
(fa;
b;
cg;
f;
a;
b;
abc
g)
is
a
prop
ert
y
of
the
Ch
u
space
(fa;
b;
cg;
fa;
b;
abcg).
A
Ch
u
space
is
th
us
a
conjunction
or
in
tersection
of
all
its
prop
erties.
W
e
will
represen
t
prop
erties
b
y
innitary
b
o
olean
expressions,
so
the
prop
ert
y

of
a
Ch
u
space
(A;
X
)
will
represen
t
the
Ch
u
space
(A;
Y
),
where
Y


A
is
the
set
of
all
satisfying
assignmen
ts
of

(see
c
hapter
).
The
ab
o
v
e
prop
ert
y
can
then
b
e
written
as
a
_
b

c.
No
w
if
 is
the
logical
form
ula
represen
ting
a
Ch
u
space,
then
the
Ch
u
space
has
the
prop
ert
y

i
 j
=
,
that
is
 !

is
a
v
alid
b
o
olean
form
ula.
The
set
of
all
prop
erties
of
a
Ch
u
space
is
its
theory
,
whic
h
w
as
dened
as
the
set
of
logical
consequences
of
its
logical
form
ula,
and
can
b
e
view
ed
as
the
set
of
Ch
u
spaces
with
the
same
A
but
with
Y

X
(it
has

(
A
 X
)
elemen
ts).
Since
there
is
no
w
a
y
of
telling
whether
a
p
dlat
is
in
tended
to
b
e
in
terpreted
as
a
sc
hedule
or
as
an
automaton,
w
e
will
use
an
arro
w
to
indicate
the
direction
of
time.
An
arro
w
p
oin
ting
up
w
ards
means
that
the
p
dlat
is
an
automaton,
and
a
do
wn
w
ard
arro
w
means
that
it
is
a
sc
hedule
(as
time
o
ws
do
wn
in
a
sc
hedule).
This
arro
w
also
iden
ties
whether
a
p
dlat
is
to
b
e
in
terpreted
as
a
p
dlat
or
a
dual
p
dlat.
.
Logical
represen
tation
of
Ch
u
spaces
|
Gates
as
acceptors
In
c
hapter

w
e
ga
v
e
the
logical
represen
tation
of
a
Ch
u
space
as
an
innitary
b
o
olean
form
ula,
whose
v
ariables
are
the
ev
en
ts
and
whose
satisfying
assignmen
ts
are
the
states
of
the
Ch
u
space.
The
logical
represen
tation
of
a
Ch
u
space
can
b
e
understo
o
d
b
y
letting
eac
h
v
ariable
a
stand
for
the
prop
osition
\a
has
happ
ened".
Th
us
execution

CHAPTER
.
CONCURRENCY
APPLICA
TIONS
0
of
the
pro
cess
sets
more
v
ariables
to
,
as
more
ev
en
ts
k
eep
happ
ening.
The
en
tire
form
ula
is
built
up
of
these
atomic
prop
ositions
,
and
m
ust
remain
true
at
all
times
|
that
is
the
pro
cess
m
ust
remain
in
a
state.
No
w
w
e
can
represen
t
a
Ch
u
space
as
a
Bo
olean
gate.
Its
inputs
are
the
ev
en
ts
of
the
space,
and
the
gate
computes
the
Bo
olean
form
ula
for
the
Ch
u
space,
and
has
one
output.
The
o
ccurrence
of
an
ev
en
t
can
no
w
b
e
considered
as
a
toggling
of
an
input.
Since
computation
is
monotonic,
an
input
can
b
e
toggled
from
zero
to
one
only
,
nev
er
bac
k,
so
in
a
single
run,
it
can
b
e
toggled
exactly
once,
corresp
onding
to
the
ev
en
t
taking
place.
A
b
eha
vior
is
accepted
if
the
output
alw
a
ys
sta
ys
,
that
is
the
pro
cess
is
alw
a
ys
in
an
allo
w
ed
state.
So
a
gate
is
no
w
an
acceptor
of
a
b
eha
vior,
rather
than
a
transducer
as
used
traditionall
y
[GP	
].
Gates
pro
vide
an
alternativ
e
pictorial
represen
tation
for
Ch
u
spaces,
and
are
v
ery
useful
in
understanding
the
algebra
of
Ch
u
spaces,
as
w
e
will
sho
w
in
the
next
c
hapter.
.
Asp
ects
of
concurrency
W
e
will
no
w
sho
w
some
prop
erties
that
can
b
e
used
to
represen
t
v
arious
features
of
concurren
t
b
eha
vior
in
a
pro
cess.
W
e
use
 for
the
logical
represen
tation
of
a
pro
cess,
and
b
o
olean
form
ulas
for
the
prop
erties.
T
emp
or
al
pr
e
c
e
denc
e.
F
or
an
y
t
w
o
ev
en
ts
a;
b,
if
 j
=
b
!
a,
then
no
state
con
tains
b
and
not
a.
This
means
that
b
can
b
e
executed
only
after
a
has
b
een
executed.
This
means
that
a
precedes
b
in
time,
and
the
collection
of
all
suc
h
constrain
ts
denes
a
temp
oral
order
on
the
ev
en
ts
of
G.
W
e
write
a

b
for
an
y
suc
h
pair
of
ev
en
ts.
Note
that
the
temp
oral
order
is
the
con
v
erse
of
the
logical
order,
and
this
is
the
reason
for
the
do
wn
w
ards
o
w
of
time
for
the
sc
hedule.
(W
e
alw
a
ys
ha
v
e
the
logical
order
going
up.)
W
e
cannot
express
the
prop
ert
y
a
<
b
in
our
mo
del,
since
this
is
an
async
hronous
mo
del.
According
to
our
seman
tics,
a
pro
cess
represen
ted
b
y
a
Ch
u
space
ma
y
ev
olv
e
from
an
y
state
to
an
y
other
state
ab
o
v
e
it,
so
ev
en
if
a
<
b,
it
can
in
one
transition
go
from
a
state
in
whic
h
neither
is
done
to
a
state
where
b
oth
are
done,
so
they
o
ccur
at
the
same
time.

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

?


  @
@

b
@
@

c
  
a



a

  c
@
@
b

@
@
b

  c

Sc
hedule
Automaton
?


  @
@

b
@
@

c
  

a


a

  c
@
@
b

@
@
b

  c

Sc
hedule
Automaton
(a)
Causalit
y
(b)
Enabling
?


a
  @
@

b
@
@

c
  


  c
@
@
b

w
@
@
b

v
  c

a

u
Sc
hedule
Automaton
?


a

  @
@

b
@
@

c
  


  c
@
@
b

w
@
@
b

v
  c

u
a

x
Sc
hedule
Automaton
(c)
Blind
c
hoice
(d)
Guarded
c
hoice
Figure
.:
Sc
hedules
and
Automata
for
some
concurren
t
b
eha
viors.
Conict.
If
 j
=
:(a
^
b),
then
no
state
con
tains
b
oth
a
and
b.
This
means
that
w
e
can
nev
er
execute
b
oth
a
and
b,
whic
h
is
in
terpreted
as
a
c
onict
b
et
w
een
a
and
b.
This
can
b
e
generalized
to
conict
b
et
w
een
arbitrary
n
um
b
ers
of
ev
en
ts.
While
this
notion
has
b
een
explicitly
in
tro
duced
in
ev
en
t
structures
[NPW,
Win
],
it
follo
ws
quite
naturally
from
our
denition.
It
is
illustrated
in
gure
.(c-d),
where
b
and
c
are
in
conict.
Causality
and
enabling.
If
 j
=
a
$
(b
^
c)
then
an
y
state
con
taining
b
and
c
m
ust
also
ha
v
e
a.
W
e
in
terpret
this
as
b
and
c
together
c
ause
a,
that
is,
as
so
on
as
the
ev
en
ts
b
and
c
ha
v
e
b
een
done,
the
en
vironmen
t
will
immediately
do
a.
This
can
b
e
generalized
to
an
arbitrary
form
ula
on
the
righ
t
side
of
the
implication.
Note
that
the
T
0
condition
do
es
not
allo
w
an
ev
en
t
to
b
e
caused
b
y
a
single
ev
en
t,
as
the
t
w
o
ev
en
ts
are
iden
tied.
The
ab
o
v
e
Ch
u
space
is
distinct
from
the
Ch
u
space
in
whic
h
 j
=
a
!
(b
^
c).
Then
b
and
c
just
enable
a,
whic
h
means
that
while
it
is
necessary
for
them
to
b
e
done
to
do
a,
it
is
not
sucien
t,
as
a
need
not
b
e
done
immediately
.
The
enabling
condition
(b
^
c)
can
b
e
generalized
to
an
arbitrary
condition,
including
the
singleton
ev
en
t,
when
it
b
ecomes
temp
oral
precedence.
The
dierence
b
et
w
een
these
is
lik
e
the

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

dierence
b
et
w
een
the
necessary
and
sucien
t
conditions
for
a
theorem|the
enabling
form
ula
represen
ts
the
necessary
conditions,
the
causing
form
ula
is
b
oth
necessary
and
sucien
t.
This
distinction
has
not
b
een
made
in
other
mo
dels.
An
example
of
this
dierence
is
the
dierence
b
et
w
een
t
w
o
candy
mac
hines
|
an
automatic
mac
hine
w
ould
giv
e
a
candy
immediately
after
putting
in
a
quarter
and
a
dime,
so
the
ev
en
t
of
getting
the
candy
is
caused
b
y
the
ev
en
ts
of
putting
in
a
dime
and
the
ev
en
t
of
putting
in
a
quarter.
A
man
ual
mac
hine
w
ould
enable
a
user
to
press
a
button
after
putting
in
a
quarter
and
a
dime,
and
the
mac
hine
w
ould
then
giv
e
the
candy
.
Th
us
in
the
second
case
the
user
can
w
ait
after
putting
in
the
money!
(Here
the
pushing
the
button
and
getting
the
candy
is
regarded
as
one
ev
en
t).
Nondeterminism.
Dual
to
the
ab
o
v
e
notion
is
the
notion
of
guarded
vs.
blind
c
hoice.
If
 j
=
a
$
(b
_
c),
then
as
so
on
as
a
is
done,
one
of
b
or
c
m
ust
b
e
done
immediately
.
This
means
that
an
y
information
obtained
b
y
doing
a
could
not
b
e
used
in
selecting
b
et
w
een
b
and
c,
making
this
a
blind
c
hoice.
This
is
more
clearly
visible
from
the
automaton
side
in
Figure
.(c).
The
c
hoice
b
et
w
een
states
v
and
w
has
to
b
e
made
at
the
forbidden
state
ab
o
v
e
u.
W
e
in
terpret
this
as
b
eing
made
b
y
the
en
vironmen
t,
making
this
a
nondeterministic
c
hoice
for
the
automaton.
Just
ha
ving
 j
=
(b
_
c)
!
a
w
ould
mak
e
it
a
guar
de
d
c
hoice,
whence
an
y
infor-
mation
obtained
from
a
can
b
e
used
to
mak
e
a
delib
erate
c
hoice.
On
the
automaton
side,
the
c
hoice
b
et
w
een
v
and
w
is
made
in
the
state
u,
as
 ?
j
=
u
$
v
^
w

,
and
this
state
con
tains
the
information
gathered
b
y
doing
a
to
decide
whic
h
w
a
y
to
go.
This
is
lik
e
a
conditional
branc
h
in
a
program,
where
the
ev
en
t
a
c
hec
ks
some
condition,
and
then
either
one
of
t
w
o
alternativ
es
is
c
hosen.
This
distinction
is
similar
to
the
distinction
b
et
w
een
in
ternal
and
external
non-
determinism
made
in
CSP[Hoa
],
in
b
oth
cases
the
dierence
b
eing
b
et
w
een
who
mak
es
the
c
hoice,
the
en
vironmen
t
or
the
pro
cess.
Disjunctive
Enabling.
If
 j
=
c
!
a
_
b,
then
in
order
for
c
to
happ
en,
at
least
one
of
a
or
b
m
ust
ha
v
e
happ
ened.
F
or
example,
in
a
candy
mac
hine,
inserting
either
a
dollar
bill
or

quarters
will
enable
the
mac
hine
to
supply
a
candy
bar.
This
is

 ?
is
the
dual
logical
represen
tation,
and
has
the
names
of
states
for
the
set
of
v
ariables.

CHAPTER
.
CONCURRENCY
APPLICA
TIONS



  c
@
@
a

b
@
@

  @
@

  b

@
@
a


  c



  c
@
@
a

b
@
@

  @
@

  b

@
@
a


  c

Disjunctiv
e
enabling
P
ostp
oned
concurrency
Figure
.:
Automata
for
disjunctiv
e
enabling
and
p
ostp
oned
concurrency
called
disjunctiv
e
enabling
[Win
,
Gun	
,
Gun	
].
The
dual
b
eha
vior
is
p
ostp
one
d
c
oncurr
ency,
giv
en
b
y
 j
=
a
^
b
!
c,
whereb
y
a
and
b
can
b
e
done
concurren
tly
only
after
c
is
completed.
F
or
example,
c
could
b
e
the
ev
en
t
that
mak
es
a
v
ailable
an
additional
resource,
e.g.
an
extra
pro
cessor,
whic
h
allo
ws
concurren
t
execution.
The
automata
for
pro
cesses
with
disjunctiv
e
enabling
and
p
ostp
oned
concurrency
are
giv
en
in
gure
..
The
sc
hedules
can
b
e
deriv
ed
from
the
dual
p
dlat
of
the
form
ula
b
!
c
_
a
in
gure
..
.
Morphisms
as
sim
ulations
If
w
e
in
terpret
Ch
u
spaces
as
pro
cesses,
w
e
can
in
terpret
the
morphisms
b
et
w
een
them
as
sim
ulations

.
Th
us
when
w
e
ha
v
e
a
Ch
u
map
(f
;
g
)
:
(A;
X
)
!
(B
;
Y
),
(A;
X
)
can
sim
ulate
(B
;
Y
)
via
the
sim
ulation
(f
;
g
).
By
a
sim
ulation
of
(B
;
Y
)
b
y
(A;
X
)
w
e
mean
here
a
relation
S

Y

X
b
et
w
een
states
and
a
corresp
ondence
C
b
et
w
een
computations
suc
h
that
whenev
er
y
S
x
and
y

!
y
0
,
where

is
a
set
of
actions,
then
there
exists
x
0

X
suc
h
that
y
0
S
x
0
and
x
C
()
!
x
0
.
A
computation
here
will
b
e
a
set
of
ev
en
ts,
so
C
will
b
e
a
function
from

B
to

A
.
Prop
osition
.
Every
Chu
map
(f
;
g
)
:
(A;
X
)
!
(B
;
Y
)
determines
a
simulation
of
(B
;
Y
)
by
(A;
X
).
Pro
of:
Giv
en
y

Y
;
x

X
,
dene
S

Y

X
b
y
y
S
x
i
x
=
g
(y
).
Dene
C
as
f
 
:
if


B
,
then
C
()
=
fa
j
f
(a)

g.

Bro
wn,
Gurr
and
de
P
aiv
a
[BGdP	
]
ha
v
e
done
the
same
for
their
category
of
P
etri
nets.

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

No
w
supp
ose
y

!
y
0
in
the
pro
cess
(B
;
Y
).
Then
y
0
=

[
y
(note
that
y
;
y
0

B
),
so
C
(y
0
)
=
C
(
[
y
).
No
w
a

C
(y
0
)
i
f
(a)

y
0
i
a

g
(y
0
),
b
y
the
adjoin
tness
condition
for
maps.
Th
us
C
(y
0
)
=
g
(y
0
).
(Th
us
C
is
just
an
extension
of
g
to
all
subsets
of
B
.)
Also,
a

C
(
[
y
)
i
f
(a)


[
y
i
f
(a)


or
f
(a)

y
i
a

C
()
or
a

g
(y
).
Th
us
g
(y
0
)
=
C
(
[
y
)
=
C
()
[
g
(y
),
so
g
(y
)
C
()
!
g
(y
0
).
Th
us
S
is
a
sim
ulation.
W
e
can
no
w
see
the
connection
b
et
w
een
these
sim
ulations
and
the
usual
denition
of
sim
ulations
b
et
w
een
pro
cesses
|
S
is
a
sim
ulation
b
et
w
een
pro
cesses
if
pS
q
and
p

!
p
0
then
there
exists
q
0
suc
h
that
q

!
q
0
and
p
0
S
q
0
,
where

is
a
set
or
sequence
of
actions,
not
ev
en
ts.
W
e
shall
use
maps
b
et
w
een
lab
eled
Ch
u
spaces.
Corollary
.
If
(f
;
g
)
:
(A;
X
)
!
(B
;
Y
),
and
f
is
inje
ctive
and
pr
eserves
lab
els,
and
the
lab
el
of
any
event
not
in
the
r
ange
of
f
is

,
the
silent
action,
then
(f
;
g
)
determines
a
simulation.
Pro
of:
If

:
A
!
Act
and

0
:
B
!
Act
are
the
lab
eling
functions,
and

0
(f
(a))
=
(a),
then
(C
())
=

0
(),
since
an
y
ev
en
t
in

whose
pre-image
is
not
in
C
()
is
lab
eled

.
Renemen
ts.
A
sp
ecial
class
of
sim
ulations
is
r
enements,
in
whic
h
some
ev
en
ts
of
a
pro
cess
are
rened
in
to
pro
cesses
themselv
es.
These
are
useful
in
program
build-
ing,
where
one
ma
y
start
with
a
high
lev
el
view
of
the
program,
and
then
successiv
ely
rene
it
to
get
the
en
tire
program.
As
a
programming
construct,
renemen
ts
are
rather
lik
e
pro
cedure
calls,
where
a
line
of
co
de
on
closer
insp
ection
turns
out
to
b
e
a
big
pro
cedure.
The
fact
that
w
e
ma
y
not
kno
w
the
in
ternal
structure
of
the
pro
ce-
dure
(e.g.
calling
a
library
function)
imp
oses
a
non-in
terlea
ving
seman
tics
on
us,
as
discussed
in
c
hapter
.
W
e
treat
here
the
simple
case
of
rening
ev
en
ts
b
y
conict
free
pro
cesses,
lea
ving
the
more
general
renemen
ts
to
the
next
c
hapter.
A
conict
free
pro
cess
(A;
X
)
is
one
in
whic
h
no
subset
of
A
is
in
conict
(has
meet
0),
or
equiv
alen
tly
is
one
in
whic
h

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

A

X
.
W
e
will
also
insist
up
on
the
additional
condition
that
;

X
,
so
there
is
a
unique
start
state.
Giv
en
a
Ch
u
space
(B
;
Y
)
and
an
ev
en
t
b

B
,
w
e
dene
the
renemen
t
of
b
b
y
the
conict
free
space
(C
;
Z
)
as
the
pro
cess
(A;
X
),
where
A
=
B
 fbg
[
C
,
and
X
is
dened
as
follo
ws
:
X
=
fx
j
b

x

Y
g
[fx
 fbg
[
C
j
b

x

Y
g
[fx
 fbg
[
z
j
b

x

Y
;
z

Z
;
x
 fbg

Y
g
No
w
w
e
can
sho
w
a
map
(f
;
g
)
:
(A;
X
)
!
(B
;
Y
).
f
(a)
is
a
if
a

A
 C
,
and
f
(a)
=
b
if
a

C
.
g
is
dened
via
the
adjoin
tness
condition,
and
the
fact
that
C

Z
ensures
that
(f
;
g
)
is
a
Ch
u
map.
The
in
tuition
b
ehind
the
sim
ulation
is
that
whenev
er
an
ev
en
t
other
than
b
is
executed
in
(B
;
Y
),
the
same
ev
en
t
is
executed
in
(A;
X
).
When
b
is
done,
the
whole
pro
cess
(C
;
Z
)
is
executed.
Here
w
e
ha
v
e
dened
renemen
t
of
a
single
ev
en
t.
Comp
osition
of
renemen
ts
no
w
yields
renemen
ts
of
man
y
ev
en
ts
at
a
time,
and
also
comp
ound
renemen
ts
i.e.
renemen
t
of
rening
ev
en
ts.
.
Programming
an
automaton
or
a
sc
hedule
The
t
w
o
dieren
t
w
a
ys
of
lo
oking
at
pro
cesses,
sc
hedules
and
automata,
yield
t
w
o
dieren
t
w
a
ys
of
writing
programs.
W
e
can
either
sp
ecify
a
sc
hedule
b
y
writing
out
all
the
constrain
ts
on
the
ev
en
ts,
resulting
in
a
declarativ
e
st
yle
of
programming,
or
can
sp
ecify
ho
w
the
pro
cess
ev
olv
es
from
a
state,
giving
an
imp
erativ
e
w
a
y
of
programming.
The
dualit
y
of
Ch
u
spaces
no
w
enables
us
to
con
v
ert
b
et
w
een
these
t
w
o
forms
of
programming
without
an
y
loss
of
information.
The
declarativ
e
st
yle
of
programming
allo
ws
us
to
sp
ecify
the
prop
erties
of
a
pro
cess,
the
conjunction
of
all
of
these
then
results
in
the
sp
ecication
of
the
whole
pro
cess.
F
or
example,
supp
ose
w
e
w
an
ted
to
write
a
Ch
u
space
for
a
m
utex
pro
cess
with
decision
ev
en
ts,
that
is,
w
e
ha
v
e
t
w
o
ev
en
ts
a
and
b
to
b
e
done
in
m
utual
exclusion,
along
with
a
pair
of
ev
en
ts
d
ab
and
d
ba
that
resolv
e
whic
h
is
to
b
e
done

CHAPTER
.
CONCURRENCY
APPLICA
TIONS

?

t

  u
@
@
v

  w
@
@

  @
@
x

  y
@
@

  @
@

  @
@
z

d
ab
@
@

a
@
@
  
b
@
@
  
d
ba
  
@
@

@
@
  
  
@
@

  


.
.
.
.
.
.
.
.
.
.
  .
.
.
.
.
.
.
.
.
.
.
.
.

z
  b
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
  .
.
.
.
.
.
.
.
.
.
.
.
.

y
.
.
.
.
.
.
.
.
.
.
  a

x
a
.
.
.
.
.
.
.
.
.
.
.
.
.

  .
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

  
.
.
.
.
.
.
.
.
.
.

w
.
.
.
.
.
.
.
.
.
.
  b

v
.
.
.
.
.
.
.
.
.
.
.
.
.
d
ab


  
u
.
.
.
.
.
.
.
.
.
.
d
ba

t
Figure
.:
Sc
hedule
and
Automaton
for
the
m
utual
exclusion
pro
cess.
rst.
Clearly
,
d
ab
and
d
ba
are
in
conict,
so
d
ab
^
d
ba
=
0.
Also
the
decision
is
to
b
e
made
b
efore
doing
the
ev
en
ts,
so
w
e
get
a
_
b
!
d
ab
_
d
ba
.
No
w
d
ab
means
a
should
b
e
done
b
efore
b
so
w
e
ha
v
e
d
ab
!
(b
!
a).
There
is
a
symmetric
condition
for
d
ba
,
namely
d
ba
!
(a
!
b).
Conjoining
these
four
conditions
giv
es
us
our
program.
An
alternativ
e
w
a
y
is
to
sp
ecify
ho
w
the
pro
cess
ev
olv
es.
In
the
b
eginning
nothing
is
done,
so
the
state
is
t
=
;.
Then
a
decision
is
made,
so
the
pro
cess
can
b
e
in
state
v
=
fd
ab
g
or
in
state
u
=
fd
ba
g.
F
rom
state
fd
ab
g,
it
do
es
a
and
then
b,
so
w
e
get
states
x
=
fa;
d
ab
g
and
z
=
fa;
b;
d
ab
g,
and
from
fd
ba
g
it
do
es
b
and
then
a,
so
w
e
get
states
w
=
fb;
d
ba
g
and
y
=
fa;
b;
d
ba
g.
No
w
w
e
can
dra
w
the
Ch
u
spaces
w
e
get
from
these
t
w
o
sp
ecications.
Dualit
y
enables
us
to
sho
w
that
they
result
in
the
same
pro
cess.
In
the
next
c
hapter
w
e
will
presen
t
an
algebra
of
Ch
u
spaces,
whic
h
will
giv
e
us
a
w
a
y
of
building
bigger
pro
cesses
from
smaller
ones
mo
dularly
.
So
w
e
will
b
e
able
to
sp
ecify
the
smaller
pro
cesses
using
one
of
the
metho
ds
ab
o
v
e,
and
then
com
bine
them
using
the
algebraic
op
erators,
giving
a
p
o
w
erful
sp
ecication
language
allo
wing
us
to
use
imp
erativ
e,
declarativ
e
and
algebraic
sp
ecications
in
one
coheren
t
framew
ork.
As
an
example,
w
e
will
b
e
able
to
write
the
m
utual
exclusion
of
t
w
o
pro
cesses
as
P
;
Q
t
Q
;
P
,
or
as
(d

t
d

);
(P
+
Q)
^
(d

^
W
B
!
(P
in
maximal
state))
^
(d

^
W
A
!
(Q
in
maximal
state)),
where
P
=
(A;
X
),
and
Q
=
(B
;
Y
).

Chapter

Algebra
of
Ch
u
Spaces
Ha
ving
dened
the
category
of
Ch
u
spaces
in
the
previous
c
hapters,
w
e
immediately
get
an
algebra
of
Ch
u
spaces,
as
our
category
has
pro
ducts
and
copro
ducts,
tensor
and
dualit
y
.
W
e
will
giv
e
elemen
tary
denitions
of
these
op
erations
here,
along
with
some
others,
and
sho
w
ho
w
they
can
b
e
in
terpreted
as
constructors
for
making
large
programs
out
of
smaller
ones,
giving
a
pro
cess
algebra
of
Ch
u
spaces.
W
e
will
also
sho
w
some
of
the
la
ws
that
hold
for
Ch
u
spaces
and
their
algebra,
and
sho
w
that
Ch
u
spaces
form
a
mo
del
for
linear
logic.
.
Denitions
and
in
terpretation
W
e
rst
dene
the
v
arious
constan
ts
used
in
the
rest
of
the
c
hapter.
W
e
ha
v
e
already
dened
the
constan
t
?
in
c
hapter

as
the
Ch
u
space
(fa;
bg;
ffbgg).
The
other
constan
ts
w
e
need
are
>
=
(fag;
ffg;
fagg),
0
=
(fg;
f;g)
and

=
(fag;
fg).
Note
that
?

=
>
?
and


=
0
?
.
>
is
the
elemen
tary
pro
cess
p
whic
h
do
es
one
ev
en
t,
while
0
is
the
pro
cess
whic
h
do
es
nothing.
The
categorical
op
erations
that
w
e
dene
here
are
pro
duct,
copro
duct,
and
tensor.
W
e
also
dene
sev
eral
other
op
erations
on
Ch
u
spaces
deriv
ed
from
pro
cess
algebra,
namely
c
hoice,
sequen
tial
comp
osition
and
partial
sync
hronous
pro
duct,
making
this
algebra
of
Ch
u
spaces
an
expressiv
e
sp
ecication
language.
W
e
alw
a
ys
start
with
T
0
and
extensional
Ch
u
spaces,
though
sometimes
the
constructions
giv
en
do
not
yield
T
0


CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

extensional
spaces.
This
is
resolv
ed
b
y
standardization,
that
is,
iden
tifying
an
y
equal
ro
ws
or
columns.
In
the
follo
wing
paragraphs,
w
e
will
iden
tify
pro
cesses
with
their
Ch
u
space
represen
tations.
These
op
erations
ha
v
e
b
een
presen
ted
for
t
w
o
op
erands,
and
their
generalization
to
innitely
man
y
op
erands
is
straigh
tforw
ard.
Copro
duct.
Let
P
=
(A;
X
)
and
Q
=
(B
;
Y
)
b
e
Ch
u
spaces
with
disjoin
t
ev
en
t
sets
A
and
B
.
Dene
the
Ch
u
space
(C
;
Z
)

=
(A
[
B
;
fx
[
y
j
x

X
;
y

Y
g).
Then
(C
;
Z
)
is
the
categorical
copro
duct
of
P
and
Q
,
denoted
P
+
Q.
It
has
injection
maps
(f

;
g

)
:
P
!
P
+
Q
;
f

(a)
=
a;
g

(z
)
=
z
\
A
and
(f

;
g

)
:
Q
!
P
+
Q
dened
b
y
f

(b)
=
b;
g

(z
)
=
z
\
B
.
If
(C
0
;
Z
0
)
is
another
Ch
u
space
with
maps
(f
0

;
g
0

)
:
P
!
(C
0
;
Z
0
)
and
(f
0

;
g
0

)
:
Q
!
(C
0
;
Z
0
),
then
the
unique
map
(h;
k
)
:
P
+
Q
!
(C
0
;
Z
0
)
giv
en
b
y
h(a)
=
f
0

(a);
h(b)
=
f
0

(b)
and
k
(z
0
)
=
g
0

(z
0
)
[
g
0

(z
0
)
sho
ws
the
univ
ersalit
y
of
the
copro
duct.
The
unit
of
copro
duct
is
the
constan
t
0,
as
P

=
P
+
0.
If
 and

w
ere
the
t
w
o
logical
form
ulas
represen
ting
P
and
Q
,
then
the
logical
form
ula
represen
ting
P
+
Q
is
 ^
,
as
the
v
ariables
of
 ^

are
the
union
of
the
v
ariable
sets
of
 and
,
and
its
satisfying
assignmen
ts
corresp
ond
to
a
satisfying
assignmen
t
of
 and
a
satisfying
assignmen
t
of
,
whic
h
are
exactly
the
states
of
P
+
Q
.
As
 ^

!
 and
 ^

!

are
Bo
olean
tautologies,
w
e
get
the
t
w
o
injection
maps
required
for
a
copro
duct
(from
the
logical
represen
tation
of
Ch
u
maps,
c
hapter
).
W
e
can
no
w
use
the
gate
represen
tation
of
Ch
u
spaces
to
get
the
gate
for
their
copro
duct.
If
jAj
=

and
jB
j
=
,
then
P
and
Q
are
represen
ted
b
y
gates
with

and

inputs
resp
ectiv
ely
.
The
sum
gate
giv
en
in
gure
.
is
then
the
copro
duct
gate.
Op
erationally
,
notice
that
for
the
output
of
the
sum
gate
to
b
e
,
the
outputs
of
b
oth
the
comp
onen
t
gates
m
ust
b
e
one.
This
means
that
an
y
inputs
of
P
can
b
e
toggled
indep
enden
tly
of
the
inputs
of
Q,
and
the
output
of
the
sum
will
remain

if
P
con
tin
ues
to
b
e
in
an
acceptable
state.
Th
us
this
gate
represen
ts
the
non-
comm
unicating
parallel
execution
of
the
pro
cesses
represen
ted
b
y
P
and
Q
,
since
ev
en
ts
in
eac
h
ma
y
happ
en
indep
enden
tly
of
the
other.
Pro
duct.
This
is
the
dual
to
copro
duct,
dened
as
follo
ws.
If
P
=
(A;
X
)
and
Q
=
(B
;
Y
),
then
their
pro
duct
is
P

Q

=
(A

B
;
fx

B
j
x

X
g
[
fA

y
j
y

Y
g).
This
is
the
categorical
pro
duct,
and
the
pro
jection
maps
are
(f
;
g
)
:
P

Q
!
P
,

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES
	
P
+
Q
P
Q


Figure
.:
The
sum
of
t
w
o
gates.
f
((a;
b))
=
a
and
g
(x)
=
x

B
and
a
similarly
dened
righ
t
pro
jection.
F
or
an
y
other
Ch
u
space
(C
;
Z
)
with
maps
(f
0

;
g
0

)
to
P
and
(f
0

;
g
0

)
to
Q
,
w
e
get
a
unique
map
(h;
k
)
to
P

Q
via
h(c)
=
(f
0

(c);
f
0

(c))
and
k
(x

B
)
=
g
0

(x);
k
(A

y
)
=
g
0

(y
),
sho
wing
that
this
is
the
categorical
pro
duct.
No
w
(P

Q)
?

=
P
?
+
Q
?
via
the
map
(h;
k
)
:
(P

Q)
?
!
P
?
+
Q
?
,
where
h(x

B
)
=
x;
h(A

y
)
=
y
and
k
(a
[
b)
=
(a;
b).
This
is
an
isomorphism
as
h
and
k
are
bijectiv
e,
and
is
a
Ch
u
map
as
h(x

B
)

a
[
b
,
x

a
,
a

x
,
(a;
b)

x

B
,
x

B

k
(a
[
b),
and
similarly
for
h(A

y
).
Th
us
the
iden
tit
y
for

is

:
P



=
P
.
The
circuit
for
P

Q
can
no
w
b
e
deriv
ed
from
the
denition.
Eac
h
state
comes
from
the
rst
or
the
second
set,
so
w
e
construct
circuits
for
them
and
form
their
disjunction.
In
a
state
from
the
rst
set,
the
input
(a;
b)
dep
ends
only
on
a,
so
the
inputs
corresp
onding
to
(a;
b)
m
ust
b
e
the
same
for
an
y
b

B
.
This
is
ensured
b
y
the
equiv
alence
gates
(),
whic
h
output
one
i
all
their
inputs
are
the
same.
Finally
the
gate
P
judges
whether
the
a's
form
a
state.
The
circuit
for
the
other
set
is
similar.
W
e
do
not
kno
w
a
go
o
d
op
erational
in
terpretation
for
the
pro
duct
of
t
w
o
Ch
u
spaces.
Ho
w
ev
er,
notice
that
once
a
pro
cess
is
in
a
state
from
the
rst
set
of
states,
i.e.
it
is
in
a
state
of
the
form
x

B
;
x

X
,
then
it
can
only
go
to
another
state
of
this
form
according
to
the
transition
relation
dened
b
y
subsets.
So
from
the
pro
duct
construction
w
e
can
deriv
e
another
op
eration,
whic
h
allo
ws
a
pro
cess
to
do
either
one
pro
cess
or
another,
but
not
b
oth.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES
0
P

Q
s
s
s
s
s
s
s
s
s
s
s



P




Q

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Figure
.:
The
pro
duct
of
t
w
o
gates.
Choice.
Let
P
and
Q
b
e
t
w
o
Ch
u
spaces,
eac
h
con
taining
the
ev
en
t
0
whic
h
is
not
an
elemen
t
of
an
y
state

.
No
w
consider
their
pro
duct
P

Q
,
and
delete
an
y
ev
en
ts
not
of
the
form
(a;
0)
or
(0;
b)
from
the
set
of
ev
en
ts,
and
from
eac
h
state.
Th
us
the
set
of
ev
en
ts
lo
oks
lik
e
the
disjoin
t
union
of
the
ev
en
t
sets
of
P
and
Q
,
and
eac
h
state
con
tains
only
ev
en
ts
of
the
form
(a;
0)
or
only
ev
en
ts
of
the
form
(0;
b).
So
the
resulting
pro
cess
can
do
either
the
rst
pro
cess
or
the
second,
but
not
b
oth.
Alternativ
ely
,
w
e
can
dene
the
c
hoice
of
P
=
(A;
X
)
and
Q
=
(B
;
Y
)
as
P
t
Q
=
(A
[
B
;
X
[
Y
),
where
A
and
B
are
disjoin
t.
Note
that
the
disjoin
tness
of
A
and
B
means
that
X
\
Y
=
fg
or
ffgg.
Th
us
once
w
e
do
some
ev
en
t
in
P
,
no
ev
en
ts
of
Q
can
b
e
executed,
and
vice
v
ersa.
The
circuit
in
gure
.
implemen
ts
this
denition,
b
y
forcing
all
the
inputs
of
Q
to
b
e
at
0
if
an
y
input
of
P
is
,
and
vice
v
ersa.
The
c
hoice
op
eration
is
functorial,
i.e.
if
there
is
a
morphism
from
P
to
P
',
there
is
a
morphism
from
P
t
Q
to
P
0
t
Q
|
it
is
the
same
morphism
on
P
and
iden
tit
y
on
Q.
W
e
will
sho
w
that
it
is
the
categorical
sum
for
a
dieren
t
category
on
the
Ch
u
ob
jects
in
c
hapter
.
If
X
\
Y
=
fg,
then
c
hoice
is
a
self
dual
op
eration,
i.e.
P
t
Q

=
(P
?
t
Q
?
)
?
.
The
iden
tit
y
for
c
hoice
is
the
Ch
u
space
;
=
(fg;
fg).

The
0
ev
en
t
can
b
e
added
b
y
forming
the
sum
P
+

=
(A
[
f0g;
X
).
This
adds
the
0
ev
en
t
i
it
is
not
there,
otherwise
the
t
w
o
0
ev
en
ts
are
iden
tied
b
y
the
T
0
prop
ert
y
.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

P
t
Q
s
s
Q
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
e
s
s
s
P
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
e




.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Figure
.:
Choice
of
t
w
o
Ch
u
spaces.
T
ensor.
In
c
hapter

w
e
presen
ted
the
in
ternal
homfunctor.
W
e
no
w
giv
e
an
explicit
construction
for
its
left
adjoin
t,
the
tensor
pro
duct.
If
P
=
(A;
X
)
and
Q
=
(B
;
Y
)
are
t
w
o
Ch
u
spaces,
then
their
tensor
pro
duct
P

Q

=
(A

B
;
Z
)
where
z

Z
i
z

A

B
and
b

B
:[z
b
=
fa
j
(a;
b)

z
g

X
]
and
a

A:[z
a
=
fb
j
(a;
b)

z
g

Y
].
Th
us
an
y
state
in
P

Q
ma
y
b
e
view
ed
as
a
bilinear
map

z
:
A

B
!

suc
h
that
z
(
;
b)
:
A
!

and
z
(a;
)
:
B
!

are
maps(states)
in
X
and
Y
resp
ectiv
ely
.
No
w
w
e
can
pro
v
e
the
required
adjunction:
Lemma
.
(P

Q
) R

=
P
 (Q
 R),
and
this
isomorphism
is
natur
al
in
P
,
Q,
R.
Pro
of:
W
e
rst
pro
v
e
that
P

Q

=
(P
 Q
?
)
?
,
and
will
then
sho
w
that
this
iden
tit
y
implies
the
isomorphism
ab
o
v
e.
If
P
=
(A;
X
)
and
Q
=
(B
;
Y
),
then
(P
 Q
?
)
?

=
(A

B
;
Z
),
where
Z
is
the
set
of
maps
from
(A;
X
)
to
(Y
;
B
).
Eac
h
suc
h
map
is
a
pair
of
maps
(f
;
g
)
:
(A;
X
)
!
(Y
;
B
),
so
f
:
A
!
Y
and
g
:
B
!
X
.
No
w
the
adjoin
tness
condition
allo
ws
the
iden
tication
of
these
maps
in
to
one
bilinear
map
z
:
(A

B
)
!
,
and
vice
v
ersa,
w
e
can
deriv
e

A
bilinear
map
is
a
map
on
t
w
o
argumen
ts,
suc
h
that
it
is
linear
if
one
of
them
is
held
xed.
Here,
linear
maps
are
those
whic
h
are
mem
b
ers
of
the
state
set,
with
the
states
considered
as
maps
to


CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

P

Q
s
s
Q
s
s
Q
s
s
Q


P
P



Figure
.:
T
ensor
pro
duct
of
Ch
u
spaces.
suc
h
a
pair
of
maps
from
a
bilinear
map.
So
w
e
ha
v
e
P

Q

=
(P
 
Q
?
)
?
.
No
w,
using
the
iden
tities
of
section
.,
w
e
ha
v
e
(P

Q) R

=
(P
 Q
?
)
?
 R

=
R
?
 (P
 Q
?
)

=
P
 (R
?
 Q
?
)

=
P
 (Q R
).
Naturalit
y
follo
ws
b
y
a
simple
diagram
c
hasing
and
comp
osition.
F
or
example,
if
w
e
ha
v
e
a
map
(h;
h
0
)
:
P
0
!
P
,
then
w
e
can
substitute
h(a)
for
a
in
the
isomorphism
(P

Q) 
R

=
P
 (Q
 R),
and
comp
ose
with
h
0
for
the
adjoin
t
map
to
get
the
isomorphism
(P
0

Q) R

=
P
0
 (Q R
),
sho
wing
naturalit
y
in
P
.
P

>

=
P
from
the
ab
o
v
e
lemma,
so
>
is
the
iden
tit
y
for

.
Since
eac
h
state
in
the
tensor
pro
duct
is
a
bilinear
function,
w
e
can
design
a
circuit
whic
h
for
eac
h
a

A
c
hec
ks
that
the
set
of
inputs
(a;
)
form
a
state
of
Y
,
and
vice
v
ersa
for
the
b's.
The
circuit
in
gure
.
implemen
ts
this
idea,
giving
a
circuit
for
the
tensor
pro
duct
of
P
and
Q.
Both
the
symmetry
of
this
picture
and
the
denition
sho
w
that
the
tensor
pro
duct
is
comm
utativ
e.
It
is
also
asso
ciativ
e,
as
can
b
e
established
b
y
simplifying
the
ab
o
v
e
circuit
after
plugging
in
the
circuit
for
P

Q
in
place
of
eac
h
P
b
o
x.
Op
erationally
,
tensor
represen
ts
the
in
teraction
of
t
w
o
pro
cesses,
also
kno
wn
as
ortho
currence
[Pra
,
CCMP	
].
It
represen
ts
one
pro
cess
o
wing
through
another.
F
or
example,
if
pro
cess
P
is
three
trains
running
sequen
tially
,
and
pro
cess
Q
represen
ts
t
w
o
stations
on
the
trac
k,
then
there
are



=

ev
en
ts,
corresp
onding
to
eac
h
train

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

arriving
at
eac
h
station.
F
or
eac
h
train,
the
stations
m
ust
arriv
e
in
the
same
order,
and
for
eac
h
station
the
trains
m
ust
arriv
e
in
the
same
order
to
o.
Th
us
eac
h
state
of
the
system
is
a
bilinear
com
bination
of
the
states
of
the
system,
whic
h
is
enforced
b
y
the
ab
o
v
e
circuit.
Eac
h
cop
y
of
P
ma
y
b
e
understo
o
d
as
a
guard
and
eac
h
Q
as
a
station
master,
who
v
erify
that
the
conditions
are
lo
cally
met.
An
example
of
a
system
whic
h
is
b
est
represen
ted
b
y
in
teraction
is
a
comm
unica-
tion
c
hannel.
The
c
hannel
is
a
pro
cess
with
sev
eral
states
(buers)
for
eac
h
message,
while
the
input
pro
cess
is
a
stream
of
messages.
Their
in
teraction,
or
tensor
pro
duct
then
describ
es
the
b
eha
vior
of
the
c
hannel
with
messages,
eac
h
ev
en
t
b
eing
the
plac-
ing
of
a
message
in
a
buer.
F
urther
restrictions
can
then
b
e
placed
on
this
c
hannel
to
get
the
desired
sp
ecication
of
the
c
hannel
b
eha
vior.
There
are
some
other
connectiv
es
deriv
ed
from
pro
cess
algebra
that
w
e
w
ould
lik
e
for
Ch
u
spaces.
W
e
presen
t
here
sequen
tial
comp
osition,
restriction
and
partial
sync
hronous
pro
duct,
others
ma
y
also
b
e
dened.
Sequen
tial
comp
osition.
P
;
Q
is
the
pro
cess
whic
h
p
erforms
a
pro
cess
Q
after
nishing
a
pro
cess
P
.
So
to
dene
it
w
e
need
a
notion
of
what
it
means
to
nish
a
pro
cess|w
e
will
assume
that
if
a
pro
cess
is
in
a
maximal
state
(i.e.
there
is
no
state
whic
h
is
its
sup
erset)
then
the
pro
cess
is
complete.
Note
that
this
means
that
if
a
pro
cess
go
es
on
forev
er,
i.e.
has
no
maximal
states,
then
Q
will
nev
er
b
e
done.
If
P
=
(A;
X
)
and
Q
=
(B
;
Y
),
and
A
\
B
=
;,
then
w
e
dene
P
;
Q
=
(A
[
B
;
Z
)
where
Z
=
fx

X
j
x
is
not
maximalg
[
fx
[
y
j
x
maximal
in
X
;
y

Y
g.
So
the
states
of
P
;Q
are
states
of
P
in
the
b
eginning,
and
after
P
is
done,
Q
is
started.
Since
the
pro
cess
reac
hed
a
maximal
state
of
P
b
efore
starting
Q,
no
ev
en
ts
of
P
can
b
e
executed
once
Q
has
b
egun.
0
is
the
t
w
o
sided
iden
tit
y
of
sequen
tial
comp
osition,
as
P
;
0

=
0;
P

=
P
.
This
op
eration
is
functorial
in
its
second
argumen
t,
that
is
giv
en
a
map
f
from
Q
to
Q
'
w
e
can
uniformly
nd
a
map
from
P
;Q
to
P
;Q
'|this
map
is
the
iden
tit
y
of
P
,
and
b
eha
v
es
lik
e
f
on
Q.
It
is
not
functorial
in
the
rst
argumen
t,
as
maximal
states
need
not
b
e
mapp
ed
to
maximal
states
b
y
maps,
so
the
map
induced
b
y
a
map
from
P
to
P
0
w
ould
map
some
states
in
P
0
;
Q
to
sets
of
ev
en
ts
that
are
not
states
in
P
;
Q
.
The
circuit
represen
tation
of
P
;Q
in
terms
of
the
circuits
for
P
and
Q
is
rather

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

a:P
s
s
P
a
s


.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
e
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Figure
.:
Prexing
a
Ch
u
space.
complex,
since
one
has
to
determine
the
structure
of
P
in
order
to
see
whether
a
state
is
maximal.
This
can
b
e
done
via
G.
D.
Plotkin's
result
on
circuit
denabilit
y
[Plo	c
]
:-
A
function
on
Ch
u
spaces
is
circuit
denable
i
the
n
um
b
er
of
input
lines
of
the
result
is
an
n-ary
function
of
the
n
um
b
er
of
input
lines
of
the
n
argumen
ts.
The
circuit
is
constructed
b
y
rst
determining
the
argumen
ts
via
testing,
and
then
for
those
argumen
ts,
giving
the
circuit
for
the
answ
er.
Supp
ose
the
function
had
one
argumen
t.
F
or
an
argumen
t
with
n
inputs,
there
are


n
p
ossible
v
alues
of
the
argumen
t,
so
for
eac
h
p
ossible
v
alue
w
e
test
for
equiv
alence
with
the
input
b
o
x
for
all
the
p
ossible

n
input
v
ectors
in
parallel,
b
y
making

n
copies
of
the
argumen
t
and
test
v
alue.
Since
only
one
of
these


n
equiv
alence
tests
will
giv
e
the
result
true,
w
e
can
construct
separate
circuits
for
eac
h
p
ossible
v
alue
of
the
argumen
t,
and
`and'
its
output
with
the
equiv
alence
test
result
for
that
v
alue.
The
inputs
to
these


n
circuits
come
from
outside,
and
their
outputs
are
`or'ed
together
to
get
the
output.
A
sp
ecial
case
of
sequen
tial
comp
osition
is
prexing,
as
used
in
CCS.
Here
the
pro
cess
P
is
a
cop
y
of
the
pro
cess
>,
so
it
just
do
es
a
single
ev
en
t,
and
then
con
tin
ues
doing
Q
.
By
restricting
P
to
this
simple
pro
cess,
the
complexit
y
of
iden
tifying
max-
imal
states
is
a
v
oided
b
y
CCS,
at
the
exp
ense
of
making
the
sequen
tial
comp
osition
less
p
o
w
erful.
F
or
this
restricted
op
eration
the
circuit
represen
tation
is
simple,
and
is
giv
en
in
gure..
W
e
will
denote
prexing
the
ev
en
t
a
to
the
Ch
u
space
P
b
y
a:P
.
Action
Renemen
t.
Using
the
idea
of
maximal
states
w
e
can
dene
action
renemen
t
b
y
general
Ch
u
spaces.
Recall
that
in
c
hapter

w
e
dened
the
renemen
t

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

of
an
ev
en
t
b
y
a
Ch
u
space
(A;
X
)
with
;;
A

X
.
W
e
can
generalize
this
denition
to
renemen
t
b
y
an
y
Ch
u
space:
Giv
en
a
Ch
u
space
(B
;
Y
)
and
an
ev
en
t
b

B
,
w
e
dene
the
renemen
t
of
b
b
y
(C
;
Z
)
as
the
pro
cess
(A;
X
),
where
A
=
B
 fbg
[
C
,
and
X
is
dened
as
follo
ws
:
X
=
fx
j
b

x

Y
;
x
[
fbg

Y
g
[fx
 fbg
[
z
j
b

x

Y
;
z
maximal
in
Z
g
[fx
 fbg
[
z
j
b

x

Y
;
z

Z
;
x
 fbg

Y
g
In
the
rst
clause
w
e
did
not
w
an
t
an
y
state
x
from
whic
h
some
b
could
b
e
done,
since
x
will
come
from
the
third
clause,
if
;

Z
.
If
;

Z
,
and
b
could
b
e
started
in
x,
after
renemen
t
w
e
w
an
t
the
start
states
of
(C
;
Z
)
to
b
e
merged
with
copies
of
x.
This
is
ensured
b
y
the
ab
o
v
e
denition.
In
general,
w
e
will
w
an
t
to
rene
an
action
in
a
lab
eled
Ch
u
space.
This
is
done
b
y
rening
eac
h
ev
en
t
whic
h
has
a
particular
lab
el
b
y
a
cop
y
of
the
pro
cess
(C
;
Z
);
these
copies
m
ust
b
e
distinguished
since
they
rene
dieren
t
ev
en
ts.
The
renemen
ts
can
b
e
done
successiv
ely
.
Restriction.
The
restriction
op
eration
allo
ws
us
to
remo
v
e
certain
ev
en
ts
from
a
Ch
u
space.
Giv
en
a
Ch
u
space
P
=
(A;
X
)
and
a
set
of
ev
en
ts
B

A,
w
e
dene
P
nB

=
(A
 B
;
fx

X
j
x
\
B
=
;g).
Th
us
the
ev
en
ts
in
B
are
no
longer
p
ossible,
and
in
fact
an
y
state
of
P
that
w
as
reac
hable
b
y
doing
some
ev
en
ts
of
B
is
not
a
state
an
y
more.
In
the
circuit
represen
tation,
this
means
remo
ving
the
inputs
corresp
onding
to
the
ev
en
ts
in
B
from
the
input
set,
and
forcing
them
to
0
b
y
grounding.
P
artial
Sync
hronous
Pro
duct.
The
op
eration
of
partial
sync
hronous
pro
duct
for
ev
en
t
structures
w
as
dened
b
y
Winsk
el
[Win
]
as
the
parallel
comp
osition
of
pro
cesses
P
and
Q
with
some
ev
en
ts
of
P
sync
hronizing
with
some
ev
en
ts
of
Q
.
This
denition
can
b
e
extended
to
Ch
u
spaces.
The
set
of
ev
en
ts
of
P
k
Q,
where
P
and
Q
ha
v
e
disjoin
t
ev
en
t
sets,
is
A
[
B
[
(A

B
).
Here
A
and
B
represen
t
the
unsync
hronized
ev
en
ts,
and
the
pairs
in
A

B
represen
t
the
sync
hronizations.
F
or
the
states,
naturally
w
e
do
not
w
an
t
b
oth
the
pairs
(a;
b)
and
(a;
c)
in
an
y
state,
since
that
w
ould
mean
that
a
o
ccurred
in
sync
hronization
with
b
and
then
again
with
c.
Similarly
an
unsync
hronized
ev
en
t
should
not
o
ccur
along
with
a
sync
hronization
of

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

the
same
ev
en
t.
Th
us
the
state
is
formed
b
y
taking
a
state
in
X
and
a
state
in
Y
and
forming
all
p
ossible
com
binations
b
y
pairing
some
ev
en
ts
of
X
with
some
ev
en
ts
of
Y
.
Eac
h
pair
of
states
can
yield
man
y
new
states|for
example
from
the
pair
fag
and
fb;
cg
w
e
can
get

states,
fa;
b;
cg;
f(a;
b);
cg
and
fb;
(a;
c)g.
As
an
example,
let
P
=
(fag;
f;
fagg)
and
Q
=
(fb;
cg;
f;
fbg;
fb;
cgg).
Then
the
ev
en
ts
in
P
k
Q
are
fa;
b;
c;
(a;
b);
(a;
c)g.
The
p
ossible
states
are
formed
from
pairs
of
states
as
follo
ws
:
State
of
P
State
of
Q
States
of
P
k
Q




fbg
fbg

fb;
cg
fb;
cg
fag

fag
fag
fbg
fa;
bg;
f(a;
b)g
fag
fb;
cg
fa;
b;
cg;
f(a;
b);
cg;
fb;
(a
;
c)g
The
iden
tit
y
for
partial
sync
hronous
pro
duct
is
0.
P
artial
sync
hronous
pro
duct
is
not
functorial,
for
example
there
is
a
unique
map
from
P
=
(fa

;
a

g;
ffg;
a

;
a

a

g)
to
Q
=
(fbg;
ffg;
bg),
but
there
is
no
natural
map
from
P
k
R
to
Q
k
R
,
where
R
=
(fcg;
ffg;
cg).
Ho
w
ev
er
it
is
functorial
if
w
e
restrict
ourselv
es
to
injectiv
e
maps.
In
the
rest
of
this
c
hapter,
whenev
er
w
e
talk
ab
out
partial
sync
hronous
pro
duct
as
a
functor,
w
e
will
refer
to
the
category
of
Ch
u
spaces
and
injectiv
e
maps.
The
circuit
for
P
k
Q
can
b
e
dra
wn
as
in
gure
..
W
e
use
the
sym
b
ol
#
to
denote
a
conict
b
o
x,
its
output
is

i
at
most
one
of
the
inputs
is
.
P
and
Q
eac
h
ha
v
e
t
w
o
inputs,
fa;
bg
and
fc;
dg
resp
ectiv
ely
.
P
artial
sync
hronous
pro
duct
is
used
to
dene
comm
unicating
parallel
comp
osition
as
in
CCS
or
CSP
.
All
the
sync
hronizations
that
are
not
allo
w
ed
b
y
the
language
are
restricted
a
w
a
y
.
Lab
els.
In
the
ab
o
v
e
discussion,
w
e
alw
a
ys
had
unlab
eled
Ch
u
spaces.
The
extension
to
lab
eled
Ch
u
spaces
is
as
follo
ws.
If


and


are
lab
eling
functions
for
P
and
Q
resp
ectiv
ely
,
then
the
lab
eling
function
for
P
+
Q
is
giv
en
b
y
,
where

n
A
=


and

n
B
=


.
This
is
also
true

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

P
k
Q
d
s
c
s
(bd)
s
s
s
(bc)
s
s
s
b
s
(ad)
s
s
s
(ac)
s
s
s
a
s
#
#
#
#
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Q
P




Figure
.:
P
artial
Sync
hronous
Pro
duct
of
P
and
Q.
for
the
op
erations
P
t
Q
and
P
;Q
.
In
P

Q,
ev
en
t
(a;
b)
is
lab
eled
b
y
a
pair
suc
h
that
(a;
b)
=
(

(a);


(b)).
The
restriction
op
eration
can
restrict
lab
els
instead
of
ev
en
ts,
in
whic
h
case
P
nA,
A

Act
will
b
e
implemen
ted
b
y
restricting
P
b
y
B
=
fa

A
j
(a)

Ag.
Lab
els
for
ev
en
ts
in
partial
sync
hronous
pro
duct
dep
end
on
the
desired
application.
F
or
example,
in
CCS,
w
e
w
ould
restrict
a
w
a
y
all
ev
en
ts
that
sync
hronize
ev
en
ts
with
non-complemen
tary
lab
els,
and
lab
el
the
other
pairs
b
y

.
The
singleton
ev
en
ts
are
lab
eled
as
b
efore.
W
e
can
dene
the
op
eration
of
relab
eling
on
Ch
u
spaces,
denoted
P
[f
],
where
f
:
Act
!
Act
is
a
relab
eling
function.
If
P
=
(A;
X
;
),
then
dene
P
[f
]
=
(A;
X
;
f

).
Recursion
and
the
solution
of
recursiv
e
domain
equations.
W
e
w
ould
lik
e
to
get
Ch
u
spaces
for
pro
cesses
whic
h
are
dened
recursiv
ely
.
F
or
example,
if
p
is
a
pro
cess
whic
h
do
es
a
single
ev
en
t
and
halts,
then
the
iteration
op
erator
P

can
b
e
dened
as
P

=
p
t
P
;
P

,
or
using
xed
p
oin
t
notation,
as
P

=
X
:
p
t
P
;
X
.
W
e
w
ould
lik
e
to
kno
w
when
suc
h
an
equation
has
a
solution.
W
e
will
use
the
tec
hniques
dev
elop
ed
in
[PS
]
to
obtain
the
solutions.
The

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

category
Ch
u
has
an
initial
ob
ject,
0,
with
a
unique
map
to
ev
ery
other
ob
ject,
namely
the
empt
y
map.
It
also
has
colimits
of
!
-c
hains.
In
[Bar	],
Barr
pro
v
ed
that
if
an
autonomous
category
is
bicomplete,
then
the
-autonomous
category
generated
from
it
via
Ch
u's
construction
is
also
bicomplete.
Set
is
bicomplete,
th
us
Ch
u
is
also
bicomplete,
and
from
this
it
immediately
follo
ws
that
it
has
an
initial
ob
ject
and
colimits
of
!
-c
hains,
that
is,
it
is
an
!
-complete
p
oin
ted
category
as
dened
in
[PS].
Here
w
e
giv
e
an
elemen
tary
pro
of
of
this
fact,
mainly
in
order
to
establish
notation.
An
!
-c
hain
is
a
functor
from
the
category
!
,
whose
ob
jects
are
0;
;
;
:
:
:
and
whic
h
has
a
morphism
r
mn
from
m
to
n
for
ev
ery
m

n,
and
r
mn

r
lm
=
r
ln
.
Th
us
an
!
-c
hain
is
a
collection
of
ob
jects
A
0
;
A

;
:
:
:
and
morphisms
f
mn
if
m
<
n.
(f
mm
is
the
iden
tit
y
map,
and
w
e
denote
b
y
f
m
the
map
from
A
m
to
A
m+
).
A
colimit
of
an
!
-c
hain
is
lik
e
a
least
upp
er
b
ound
for
p
osets,
namely
an
elemen
t
A,
with
maps
h
i
:
A
i
!
A
for
eac
h
i
suc
h
that
h
m
=
h
n

f
mn
for
all
m;
n.
It
is
univ
ersal,
so
if
there
is
an
y
other
ob
ject
C
and
a
set
of
maps
h
0
i
satisfying
these
prop
erties
then
there
is
a
unique
map
h
0
:
A
!
C
,
suc
h
that
h
0
i
=
h
0

h
i
.
Prop
osition
.
Ch
u
has
c
olimits
of
al
l
!
-chains.
Pro
of:
Consider
the
!
-c
hain
P
0
f
0
!
P

f

!
P

f

!
P

:
:
:
where
P
i
=
(A
i
;
X
i
)
etc,
and
the
maps
are
pairs
f
i
=
(f
i
;
g
i
).
No
w
w
e
get
the
other
maps
f
mn
=
f
n 

:
:
:
f
m
.
Dene
an
equiv
alence
relation

on
S
i
A
i
b
y
a

b
i
there
are
maps
f
mn
;
f
k
n
suc
h
that
f
mn
(a)
=
f
k
n
(b).
Let
A
b
e
the
set
of
equiv
alence
classes
of
this
relation,
with
the
equiv
alence
class
of
a
denoted
b
y
[a].
Giv
en
an
y
x

A,
dene
x
i
=
fa

A
i
j
[a]

xg.
Let
X
b
e
the
set
fx

A
j
i:x
i

X
i
g.
Then
w
e
claim
that
(A;
X
)
is
the
colimit
of
this
c
hain.
The
set
of
maps
(h
i
;
k
i
)
:
(A
i
;
X
i
)
!
(A;
X
)
is
ob
vious,
h
i
(a)
=
[a]
and
k
i
(x)
=
x
i
,
and
these
form
an
adjoin
t
pair.
No
w
if
w
e
ha
v
e
an
y
(A
0
;
X
0
)
and
a
set
of
maps
(h
0
i
;
k
0
i
)
whic
h
is
also
a
candidate
for
the
colimit,
then
w
e
can
dene
the
unique
map
(h
0
;
k
0
)
:
(A;
X
)
!
(A
0
;
X
0
)
b
y

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES
	
h
0
([a])
=
h
0
i
(a),
and
k
0
as
its
adjoin
t.
h
0
is
w
ell
dened
since
if
[a]
=
[b]
then
b
y
comm
utativit
y
requiremen
ts,
h
0
i
(a)
=
h
0
j
(a).
It
mak
es
h
0
i
=
h
0

h
i
true
for
all
i,
and
is
unique
since
if
w
e
had
an
y
other
h
00
:
(A;
X
)
!
(A
0
;
X
0
)
dieren
t
from
h
0
,
then
it
w
ould
dier
at
some
[a],
but
this
is
not
p
ossible
since
it
m
ust
b
e
equal
to
h
i
(a).
A
functor
F
is
called
!
-con
tin
uous
if
it
preserv
es
colimits
of
all
!
-c
hains.
That
is,
if
P
is
the
colimit
of
an
!
-c
hain
P
then
F
(P
)
is
the
colimit
of
the
!
-c
hain
F
(P).
Com-
p
ositions
of
!
-con
tin
uous
functors
are
con
tin
uous.
No
w
if
w
e
ha
v
e
an
!
-con
tin
uous
functor,
its
least
xed
p
oin
t
is
giv
en
as
the
colimit
of
the
!
-c
hain
0
f
0
!
F
(0)
f

!
F

(0)
f

!
F

(0)
:
:
:
Note
that
there
is
an
arro
w
from
0
to
F
(0
)
as
it
is
the
initial
ob
ject.
The
other
arro
ws
are
images
of
this
arro
w
under
F
.
If
Q
is
the
colimit,
then
so
is
F
(Q
),
th
us
the
t
w
o
are
isomorphic,
sho
wing
that
Q
is
a
solution
of
the
equation
X
=
F
(X
).
No
w
all
w
e
ha
v
e
to
do
is
sho
w
that
the
v
arious
functors
F
(X
)
=
P
+
X
;
P
t
X
;
P
;
X
;
P

X
;
X
nL
are
!
-con
tin
uous
to
b
e
able
to
get
solutions
for
recursiv
e
domain
equations
written
o
v
er
these
op
erations.
P
+
X
and
P

X
preserv
e
all
colimits,
since
they
ha
v
e
righ
t
adjoin
ts
[Mac,
p.].
So
they
are
automatically
!
-con
tin
uous.
Prop
osition
.
The
functor
F
(X
)
=
P
t
X
is
!
-c
ontinuous.
Pro
of:
Consider
the
!
-c
hain
Q
Q
0
f
0
!
Q

f

!
Q

f

!
Q

:
:
:
where
Q
i
=
(B
i
;
Y
i
).
Let
its
colimit
b
e
Q
=
(B
;
Y
).
Let
P
=
(A;
X
).
No
w
f
i
:
Q
i
!
Q
i+
,
so
the
map
f
0
i
:
P
t
Q
i
!
P
t
Q
i+
is
deriv
ed
from
f
i
b
y
letting
f
0
i
b
e
f
on
B
i
,
and
iden
tit
y
on
A.
Its
adjoin
t
map
is
similarly
the
adjoin
t
of
f
i
on
Y
i
and
iden
tit
y
on
X
.
Th
us
in
forming
the
colimit
of
the
!
-c
hain
F
(Q),
w
e
see
that
eac
h
elemen
t
of
A
forms
an
equiv
alence
class
under
the

relation
dened
ab
o
v
e,
while
the
other
classes
are
as
b
efore.
Also,
for
eac
h
x

X
,
f[a]
j
a

xg
is
a
state
in
the
colimit,
and
the
other
states
are
those
in
Y
.
Th
us
the
colimit
of
F
(Q)
is
isomorphic
to
P
t
Q
,
sho
wing
that
F
is
!
-con
tin
uous.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES
0
The
pro
ofs
that
the
op
erations
P
;
X
and
P

X
are
!
-con
tin
uous
are
v
ery
similar,
and
are
omitted.
Note
that
+;

;
t
;
k
and

are
symmetric,
so
the
X
can
b
e
either
argumen
t.
X
;
P
is
not
a
functor,
as
remark
ed
b
efore.
F
or
restriction,
F
(X
)
=
X
nL,
it
is
necessary
to
sp
ecify
what
this
means
as
a
functor,
since
if
w
e
just
c
ho
ose
L
to
b
e
some
set
of
ev
en
ts
then
isomorphic
copies
of
X
will
b
e
mapp
ed
to
dieren
t
images.
W
e
will
understand
this
to
mean
restriction
on
lab
els,
that
is
w
e
restrict
X
on
the
set
of
all
ev
en
ts
whose
lab
els
are
in
L.
Then
w
e
will
consider
lab
el
preserving
morphisms
only
,
making
this
an
!
-con
tin
uous
op
eration.
If
w
e
are
willing
to
restrict
ourselv
es
to
the
category
of
Ch
u
spaces
with
injectiv
e
Ch
u
maps
only
,
then
P
k
X
is
also
a
functor,
and
is
!
 continuous.
The
functor
F
(X
)
=
P
 X
,
where
P
=
(A;
X
)
is
nite,
is
also
!
-con
tin
uous.
On
morphisms,
this
functor
just
comp
oses
them
with
elemen
ts
of
P
 X
.
No
w
in
the
!
-c
hain
F
(Q),
t
w
o
elemen
ts
h;
h
0
are
-equiv
alen
t
i
they
are
-equiv
alen
t
on
all
elemen
ts
of
A,
i.e.
a

A;
h(a)

h
0
(a).
This
sho
ws
that
P
 Q
is
the
desired
colimit.
Th
us
w
e
can
solv
e
recursiv
e
domain
equations
for
a
v
ariet
y
of
op
erators.
No
w
w
e
can
dene
more
op
erations
b
y
using
recursion.
Here
w
e
men
tion
only
one
|
iteration,
dened
to
b
e
the
least
solution
of
F
(X
)
=
p
t
P
;
X
.
The
least
solution
to
this
equation
is
denoted
P

,
and
is
the
pro
cess
that
do
es
P
zero
or
more
times,
terminating
with
a
p
ev
en
t.
F
or
some
related
w
ork
on
solving
recursiv
e
domain
equations
for
Ch
u
spaces,
see
[Plo	b
].
.
Iden
tities
and
Equiv
alences
The
ab
o
v
e
op
erations
satisfy
a
n
um
b
er
of
iden
tities,
whic
h
are
useful
in
understanding
the
in
tuitiv
e
meaning
of
the
com
binators.
W
e
will
pro
v
e
some
of
these
in
this
section.
Prop
osition
.
(The
comm
utativ
e
and
asso
ciativ
e
la
ws)
The
op
er
ations
c
o-
pr
o
duct,
pr
o
duct,
choic
e,
tensor
pr
o
duct
and
p
artial
synchr
onous
pr
o
duct
ar
e
al
l
c
om-
mutative
and
asso
ciative
up
to
isomorphism.
The
isomorphisms
ar
e
natur
al
in
e
ach

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

c
omp
onent

.
Pro
of:
The
pro
ofs
of
these
la
ws
follo
w
immediately
from
the
denitions
of
the
op
erations.
As
an
example,
w
e
will
pro
v
e
the
comm
utativit
y
of
the
tensor
pro
duct.
Let
P
=
(A;
X
)
and
Q
=
(B
;
Y
)
b
e
t
w
o
Ch
u
spaces.
W
e
will
iden
tify
the
elemen
ts
of
X
and
Y
with
their
c
haracteristic
functions.
No
w
the
isomorphism
P

Q

=
Q

P
is
giv
en
b
y
the
Ch
u
map
(
P
Q
;

P
Q
),

P
Q
(ha;
bi)
=
hb;
ai
and

P
Q
(y
)
=
x,
where
x(ha;
bi)
=
y
(hb;
ai).
Th
us
(
P
Q
;

P
Q
)
is
an
isomorphism
b
et
w
een
P

Q
and
Q

P
.
No
w
for
it
to
b
e
natural
in
P
,
giv
en
a
map
(f
;
g
)
:
P
!
P
0
,
w
e
ha
v
e
to
sho
w
that
(I
d
Q

(f
;
g
))

(
P
Q
;

P
Q
)
=
(
P
0
Q
;

P
0
Q
)

((f
;
g
)

I
d
Q
).
F
or
the
rst
comp
onen
t,
w
e
ha
v
e
(I
d
Q

f
)


P
Q
(ha;
bi)
=
(I
d
Q

f
)(hb;
ai)
=
hb;
f
(a)i
=

P
0
Q
(hf
(a);
bi)
=
(
P
0
Q

(f

I
d
Q
))(ha;
bi)
F
or
the
adjoin
t
map,
giv
en
a
bilinear
map
h
:
B

A
0
!
,
w
e
ha
v
e
(
P
Q

(I
d
Q

g
))(h)
=
h
0
,
where
h
0
(ha;
bi)
=
h(hb;
f
(a)i).
This
is
also
what
w
e
get
as
((g

I
d
Q
)


P
0
Q
)(h),
so
the
isomorphism
is
natural
P
.
The
pro
of
that
it
is
natural
in
Q
is
similar.
Prop
osition
.
(Asso
ciativit
y
of
seq.
comp.)
P
;
(Q;
R)

=
(P
;
Q);
R,
and
this
isomorphism
is
natur
al
in
the
thir
d
ar
gument,
R.
Pro
of:
The
isomorphism
of
the
sets
of
ev
en
ts
on
the
t
w
o
sides
follo
ws
from
the
asso
ciativit
y
of
disjoin
t
set
union.
z
is
a
state
in
P
;
(Q;
R)
i
it
is
a
non-maximal
state
in
P
or
the
union
of
a
maximal
state
in
P
with
a
state
in
Q
;
R.
But
from
the
similar
condition
for
a
state
to
b
e
in
Q;
R,
w
e
get
that
a
state
is
in
P
;
(Q;
R)
i
it
is
a
non-maximal
state
in
P
or
the
union
of
a
maximal
state
in
P
with
a
non-maximal
state
in
Q
or
the
union
of
a
maximal
state
from
eac
h
of
P
and
Q,
and
a
state
in

Naturalit
y
for
comm
utativit
y
and
asso
ciativit
y
of
partial
sync
hronous
pro
duct
holds
only
in
the
category
of
Ch
u
spaces
and
injectiv
e
Ch
u
maps.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

R.
This
is
also
what
w
e
get
from
the
righ
t
hand
side,
giving
the
isomorphism.
Its
naturalit
y
follo
ws
from
set-theoretic
argumen
ts.
W
e
ha
v
e
already
giv
en
the
iden
tit
y
elemen
ts
for
eac
h
of
these
op
erations.
These
t
w
o
prop
ositions
giv
e
the
la
ws
whic
h
hold
for
expressions
ha
ving
only
one
op
erator
on
eac
h
side.
There
are
some
distributivit
y
la
ws
b
et
w
een
op
erators,
and
some
De
Morgan
la
ws.
Prop
osition
.
:
(P
+
Q)

R

=
(P

R)
+
(Q

R)
:
(P

Q
)
?

=
P
?
+
Q
?
:
(P
t
Q)
?

=
P
?
t
Q
?
Pro
of:
()
This
follo
ws
from
the
fact
that

has
a
righ
t
adjoin
t
and
th
us
preserv
es
all
colimits,
in
particular
copro
ducts.
Let
P
=
(A;
X
);
Q
=
(B
;
Y
);
R
=
(C
;
Z
).
The
isomorphism
of
the
sets
of
ev
en
ts
on
the
t
w
o
sides
follo
ws
from
the
distributivit
y
of
the
cartesian
pro
duct
of
sets
o
v
er
disjoin
t
union.
T
o
sho
w
that
the
state
sets
are
isomorphic,
let
u
b
e
a
state
in
(P
+
Q)

R.
Let
u
=
u

[
u

,
where
u

is
the
set
of
ev
en
ts
whose
rst
comp
onen
t
came
from
A,
and
u

those
whose
rst
comp
onen
t
came
from
B
.
No
w
for
an
y
c

C
;
a

A,
w
e
ha
v
e
(u

)
c
=
u
c
\
A

X
,
and
(u

)
a
=
u
a

Z
.
Th
us
u

is
a
state
of
(P

R),
and
similarly
u

is
a
state
of
(Q

R),
making
u
a
state
of
the
righ
t
side.
The
rev
erse
inclusion
can
b
e
pro
v
ed
similarly
.
The
last
t
w
o
iden
tities
w
ere
pro
v
ed
in
the
previous
section.
Note
that

do
es
not
distribute
o
v
er
t
,
b
ecause
in
(P
t
Q)

R
a
state
can
ha
v
e
comp
onen
t
states
from
either
P
or
Q,
while
in
(P

R)
t
(Q

R),
they
can
b
e
only
from
one
of
P
or
Q
.
The
follo
wing
la
ws
w
ere
inspired
b
y
Milner's
CCS
[Mil	
],
and
w
e
will
use
these
to
construct
a
Ch
u
space
mo
del
for
CCS.
They
assume
that
the
Ch
u
spaces
are
lab
eled.
Prop
osition
.
L
et
P
=
(A;
X
;
),
Q
=
(B
;
Y
;
)
and
R
b
e
Chu
sp
ac
es
and
K
;
L

Act,
and
f
;
f
0
:
Act
!
Act.
Then
the
fol
lowing
isomorphisms
hold.
:
P
nL

=
P
if
(A)
[
L
=
;

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

:
P
nK
nL

=
P
n(K
[
L)
:
P
[f
]nL

=
P
nf
 
(L)[f
]
:
P
[I
d]

=
P
:
P
[f
]

=
P
[f
0
]
if
f
n
(A)
=
f
0
n
(A)
:
P
[f
][f
0
]

=
P
[f
0

f
]
:
(P
t
Q)nL

=
P
nL
t
QnL
:
(P
t
Q)[f
]

=
P
[f
]
t
Q[f
]
	:
(P
+
Q
)nL

=
P
nL
+
Q
nL
0:
(P
+
Q
)[f
]

=
P
[f
]
+
Q
[f
]
Pro
of:
Eac
h
of
these
follo
w
from
trivial
set
theoretic
argumen
ts,
hence
the
pro
ofs
are
omitted.
Sev
eral
other
la
ws
for
the
CCS
connectiv
es
will
b
e
presen
ted
in
the
next
c
hapter.
One
la
w
that
w
e
w
ould
lik
e
to
ha
v
e
is
P
t
P

=
P
,
since
a
c
hoice
b
et
w
een
P
and
P
is
just
the
same
as
doing
P
.
Ho
w
ev
er,
since
w
e
require
the
ev
en
t
sets
in
c
hoice
to
b
e
disjoin
t,
w
e
cannot
ha
v
e
this.
T
o
o
v
ercome
this
deciency
,
w
e
prop
ose
using
history
pr
eserving
bisimulations[Dev
,
OGG
,
GG	
]
for
equiv
alence
b
et
w
een
Ch
u
spaces,
rather
than
isomorphism.
W
e
c
ho
ose
history
preserving
bisim
ulations
since
they
preserv
e
the
causalit
y
and
c
hoice
structure,
so
are
considerably
ner
than
bisim
ulations,
whic
h
iden
tify
a;
b
t
b;
a
with
a
+
b,
whic
h
is
con
trary
to
the
seman
tics
of
our
mo
del.
Ho
w
ev
er
they
are
sucien
tly
coarse
to
p
ermit
sev
eral
equiv
alences,
whic
h
w
e
shall
sho
w
no
w.
History
preserving
bisim
ulations.
Let
P
=
(A;
X
;
)
b
e
a
lab
eled
Ch
u
space.
As
dened
for
unlab
eled
spaces
in
c
hapter
,
the
history
of
a
state
x

X
is
the
lab
eled
Ch
u
space
h(x)
=
(x;
fx
0

X
j
x
0

xg;

n
x).
No
w
dene
a
history
preserving
bisim
ulation
(h.p.b.)
b
et
w
een
P
and
Q
=
(B
;
Y
;
)
as
a
relation
R

(X

Y


AB
)
suc
h
that
(x;
y
;
f
)

R
i

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

:
f
is
a
function
from
x
to
y
and
determines
a
lab
el
preserving
Ch
u
isomorphism
b
et
w
een
h(x)
and
h(y
).
:
x

x
0
implies
	y
0

Y
;
f
0
suc
h
that
y

y
0
;
(x
0
;
y
0
;
f
0
)

R;
f
0
n
x
=
f
and
(x
0
 x)
=
(y
0
 y
).
:
y

y
0
implies
	x
0

X
;
f
0
suc
h
that
x

x
0
;
(x
0
;
y
0
;
f
0
)

R;
f
0
n
x
=
f
and
(x
0
 x)
=
(y
0
 y
).
In
[JNW	
],
Jo
y
al,
Nielsen
and
Winsk
el
dene
a
strong
history
preserving
bisim
u-
lation
as
a
history
preserving
bisim
ulation
with
t
w
o
additional
prop
erties|if
(x;
y
;
f
)

R;
x
0

x,
implies
	y
0

Y
;
f
0
suc
h
that
y
0

y
;
(x
0
;
y
0
;
f
0
)

R;
f
n
x
0
=
f
0
,
and
a
sim-
ilar
condition
for
y
0

y
.
All
the
results
of
this
section
are
v
alid
for
strong
history
preserving
bisim
ulations
also.
Sa
y
P
is
equiv
alen
t
to
Q,
P

Q,
if
there
exists
an
h.p.b.
b
et
w
een
them.
W
e
will
also
write
x

x
0
if
there
is
a
triple
(x;
x
0
;
f
)
in
the
h.p.b.
W
e
rst
sho
w
that

is
a
congruence
o
v
er
sev
eral
op
erators.
Prop
osition
.
L
et
P


P

.
Then
:
P

+
Q

P

+
Q
:
P

t
Q

P

t
Q
:
P

;
Q

P

;
Q
:
Q;
P


Q;
P

:
P

k
Q

P

k
Q
:
P

nL

P

nL;
L

Act
:
P

[f
]

P

[f
];
f
:
Act
!
Act
Pro
of:
Let
P
=
(A;
X
;
);
P
0
=
(A
0
;
X
0
;

0
);
Q
=
(B
;
Y
;
).
Let
R
b
e
an
h.p.b.
b
et
w
een
P
and
P
'.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

:
F
rom
the
relation
R,
construct
the
relation
R
0
=
f(x
[
y
;
x
0
[
y
;
f
[
I
d
y
)
j
(x;
x
0
;
f
)

R;
y

Y
g.
Then
R
0
is
an
h.p.b.
b
et
w
een
P

+
Q
and
P

+
Q
.
Giv
en
an
y
triple
(x
[
y
;
x
0
[
y
;
f
[
I
d
y
)

R
0
,
f
[
I
d
y
is
an
isomorphism
b
et
w
een
h(x
[
y
)
and
h(x
0
[
y
).
Also,
if
a
transition
from
a
state
x
[
y
to
x

[
y

tak
es
place,
then
that
means
there
w
as
a
transition
from
x
to
x

p
ossible
in
P

.
So
there
is
a
triple
(x

;
x
0

;
f
0
)

R,
and
th
us
the
triple
(x

[
y

;
x
0

[
y

;
f
0
[
I
d
y

)
in
R
0
w
ould
satisfy
the
requiremen
ts.
Similarly
w
e
can
v
erify
the
third
condition,
so
P

+
Q

P

+
Q
via
R
0
.
:
Construct
the
relation
R
0
=
R
[
f(y
;
y
;
I
d
y
)
j
y

Y
g.
This
can
b
e
sho
wn
to
b
e
a
h.p.b.
b
et
w
een
P

t
Q
and
P

t
Q.
:
In
the
relation
R
note
that
maximal
states
can
only
b
e
related
to
maximal
states.
So
from
R,
construct
the
relation
R
0
=
f(x;
x
0
;
f
)
j
(x;
x
0
;
f
)

R;
x
not
maximalg
[
f(x
[
y
;
x
0
[
y
;
f
[
I
d
y
)
j
(x;
x
0
;
f
)

R;
x
maximal;
y

Y
g.
Then
R
0
can
b
e
sho
wn
to
b
e
an
h.p.b.
:
F
rom
the
relation
R
w
e
construct
R
0
=
f(y
;
y
;
I
d
y
)
j
y

Y
;
y
not
maximalg
[
f(y
[
x;
y
[
x
0
;
I
d
y
[
f
)
j
y
maximal
in
Y
;
(x;
x
0
;
f
)

Rg.
Then
R
0
is
a
h.p.b.
b
et
w
een
Q;
P

and
Q;
P

.
:
In
the
denition
of
P

k
Q
,
w
e
sa
w
that
eac
h
state
w
as
generated
b
y
a
state
x

X
and
a
state
y

Y
.
So
when
building
R
0
,
for
eac
h
triple
(x;
x
0
;
f
)

R
and
eac
h
state
z
in
P

k
Q
built
from
x,
w
e
in
tro
duce
a
triple
(z
;
z
0
;
g
)

R
0
,
where
z
0
=
ff
(a)
j
a

z
\
Ag
[
fb
j
b

z
\
B
g
[
f(f
(a);
b)
j
(a;
b)

z
g.
The
g
is
clear
from
this
denition,
and
w
e
can
sho
w
that
R
0
is
a
h.p.b.
The
last
t
w
o
cases
are
rather
trivial.
Notice
that
the
op
erators
;

w
ere
missing
from
this
theorem.
The
reason
is
that

is
not
a
congruence
for
these.
F
or

,
if
P
=
x:0,
then
P
t
P

P
,
but
if
w
e
tensor
it
with
Q
=
(c
!
a)
^
(c
!
b),
then
the
t
w
o
sides
are
not
bisimilar.
So
when
w
e
use
the

relation
for
observ
ationally
equiv
alen
t
pro
cesses,
w
e
will
ha
v
e
to
lea
v
e
out
these
t
w
o
op
erators
from
the
algebra.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

W
e
can
extend
the
equiv
alence
relation
to
equiv
alence
b
et
w
een
functors,
sa
y
F

G
if
for
all
Ch
u
spaces
P
,
F
(P
)

G(P
)
uniformly.
By
uniformly
w
e
mean
that
if
(f
;
g
)
:
P
!
Q
is
a
Ch
u
map,
then
if
the
state
y
in
F
(Q
)
is
related
to
y
0
in
G(Q)
with
the
history
isomorphism
h
0
,
then
the
state
F
(g
(y
))
in
F
(P
)
m
ust
b
e
related
to
the
state
G(g
(y
0
))
in
G(P
)
with
the
history
isomorphism
h,
with
h

F
(f
)
=
G(f
)

h
0
.
The
follo
wing
prop
osition
can
b
e
used
to
sho
w
that
equiv
alence
is
preserv
ed
under
recursiv
e
denition.
Prop
osition
.
L
et
P
and
Q
b
e
two
!
-chains
P
:
P
0
(f
0
;g
0
)
 !
P

(f

;g

)
 !
P

(f

;g

)
 !
P

:
:
:
Q
:
Q
0
(f
0
0
;g
0
0
)
 !
Q

(f
0

;g
0

)
 !
Q

(f
0

;g
0

)
 !
Q

:
:
:
and
i:P
i

Q
i
.
F
urthermor
e
let
the
e
quivalenc
e
b
e
uniform,
i.e.
if
x
i

y
i
,
then
g
i 
(x
i
)

g
0
i 
(y
i
)
and
the
f
's
c
ommute
with
the
history
isomorphisms.
Then
the
c
olimits
of
the
chain
ar
e
also
e
quivalent,
P

Q.
Pro
of:
Let
P
i
=
(A
i
;
X
i
),
and
Q
i
=
(B
i
;
Y
i
).
Also
let
P
=
(A;
X
),
and
Q
=
(B
;
Y
).
Let
x
b
e
a
state
in
the
colimit
P
.
Recall
that
x
i
=
fa

A
i
j
[a]

xg,
the
image
of
x
under
the
maps
from
P
i
to
P
.
By
denition
of
the
colimit,
x
i

X
i
.
No
w
b
y
the
adjoin
tness
condition,
w
e
can
sho
w
that
g
i 
(x
i
)
=
x
i 
,
and
the
same
for
the
y
's.
No
w
dene
the
relation
R
b
y
x

y
i
i:x
i

y
i
.
Since
the
history
isomorphisms
b
et
w
een
x
i
and
y
i
comm
ute
with
the
f
's,
w
e
can
dene
an
isomorphism
b
et
w
een
h(x)
and
h(y
).
W
e
will
sho
w
that
this
denes
an
h.p.b.
b
et
w
een
P
and
Q.
Let
x

y
.
Supp
ose
there
is
a
transition
x
!
x
0
in
P
.
This
means
that
there
m
ust
b
e
transitions
x
i
!
x
0
i
in
P
i
for
eac
h
i.
No
w
since
x
i

y
i
,
there
m
ust
b
e
at
least
one
z
i
suc
h
that
w
e
ha
v
e
the
same
transition
y
i
!
z
i
in
Q
i
.
In
fact
w
e
will
c
ho
ose
the
z
i
's
suc
h
that
g
0
i 
(z
i
)
=
z
i 
,
this
is
alw
a
ys
p
ossible.
Let
y
0
=
S
i
f[b]
j
b

z
i
g.
No
w
since
g
0
i 
(z
i
)
=
z
i 
for
all
i,
y
0
is
a
state
in
Q.
By
a
set-theoretic
argumen
t,
w
e
can
sho
w
that
w
e
ha
v
e
a
transition
y
!
y
0
,
and
since
there
are
isomorphisms
b
et
w
een
the
histories
of
z
i
and
x
0
i
,
there
is
an
isomorphism
b
et
w
een
h(x
0
)
and
h(y
0
).
The
pro
of
of
the
third
condition
is
symmetrical.
Th
us
P

Q.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

Corollary
.
Given
two
functors
F

G,
their
le
ast
xe
d
p
oints
ar
e
also
e
quivalent.
Pro
of:
Since
F

G,
the
c
hains
0
!
F
(0
)
!
F

(0)
!
:
:
:
and
0
!
G(0)
!
G

(0)
!
:
:
:
satisfy
all
the
conditions
of
the
ab
o
v
e
prop
osition
.
Th
us
the
colimits,
whic
h
are
the
least
xed
p
oin
ts
of
the
functors,
are
bisimilar.
The
equiv
alence

yields
sev
eral
in
tuitiv
ely
ob
vious
equiv
alences
b
et
w
een
Ch
u
spaces.
Prop
osition
.	
The
fol
lowing
e
quivalenc
es
hold
b
etwe
en
Chu
sp
ac
es.
:
P
t
P

P
:
(P
t
Q)
+
R

(P
+
R)
t
(Q
+
R
)
:
(P
t
Q);
R

(P
;
R)
t
(Q;
R),
wher
e
P
or
Q
have
a
non-empty
state
e
ach.
:
(P
k
Q)
+
R

(P
+
R
)
k
(Q
+
R)
Pro
of:
Let
P
=
(A;
X
;
);
Q
=
(B
;
Y
;
);
R
=
(C
;
Z
;

).
:
Since
the
ev
en
t
sets
of
the
t
w
o
copies
of
P
on
the
l.h.s.
are
not
disjoin
t
in
P
t
P
,
w
e
will
add
a
subscript
to
denote
where
they
came
from.
States
will
similarly
carry
a
sux.
No
w
dene
the
relation
R
=
f(x

;
x;
f
:
a

!
a)
j
x

X
g
[
f(x

;
x;
f
:
a

!
a)
j
x

X
g.
It
is
clear
that
f
determines
an
isomorphism
b
et
w
een
h(x

)
and
h(x).
Also,
if
a
transition
x

!
x
0

is
made
on
the
left,
then
a
similar
transition
x
!
x
0
can
b
e
made
on
the
righ
t,
satisfying
the
second
condition
of
the
denition
of
a
h.p.b.
The
third
condition
is
similarly
satised.
:
An
y
state
on
the
left
is
of
the
form
x
[
z
;
x

X
;
z

Z
or
y
[
z
;
y

Y
;
z

Z
.
Since
R
is
rep
eated
on
the
righ
t,
ev
en
ts
and
states
of
the
t
w
o
copies
ha
v
e
to
b
e
distinguished
b
y
a
subscript.
So
w
e
relate
x
[
z
to
x
[
z

,
and
y
[
z
to
y
[
z

.
This
giv
es
us
a
history
preserving
bisim
ulation
b
et
w
een
the
t
w
o
sides.
:
The
pro
of
is
similar
to
the
one
ab
o
v
e,
and
follo
ws
from
the
fact
that
an
y
maximal
state
of
P
t
Q
is
a
maximal
state
of
P
or
a
maximal
state
of
Q.
The
condition
is
needed
for
the
con
v
erse,
that
is
an
y
maximal
state
of
P
or
Q
is
a
maximal
state
of
P
t
Q.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES

:
Similar
to
the
pro
of
of
().
The
only
reason
that
these
equiv
alences
w
ere
not
isomorphisms
w
as
that
w
e
needed
the
t
w
o
comp
onen
ts
of
c
hoice
to
b
e
disjoin
t.
History
preserving
equiv
alence
tak
es
care
of
that.
The
in
tuitiv
e
reason
for
the
rst
equiv
alence
has
b
een
men
tioned
ab
o
v
e.
The
second
and
fourth
equiv
alences
hold
as
ha
ving
a
c
hoice
in
parallel
with
a
pro
cess
is
equiv
alen
t
to
making
the
c
hoice
righ
t
a
w
a
y
,
and
then
executing
the
pair
of
pro
cesses
in
parallel.
The
third
equiv
alence
holds
as
the
c
hoice
b
et
w
een
P
and
Q
m
ust
b
e
made
in
the
b
eginning
an
yw
a
y
,
so
it
do
es
not
matter
if
w
e
k
eep
one
cop
y
or
man
y
copies
of
R
afterw
ards.
As
remark
ed
ab
o
v
e,
the
main
reason
wh
y
w
e
c
hose
history
preserving
bisim
ulation
w
as
that
they
preserv
e
the
causal
structure
of
pro
cesses.
In
particular,
w
e
ha
v
e
a;
b
t
b;
a

a
+
b,
where
a;
b
denote
single
action
pro
cesses.
This
is
reected
b
y
the
fact
that
h.p.b.
equiv
alence
is
preserv
ed
under
action
renemen
t,
and
the
t
w
o
pro
cesses
ab
o
v
e
can
b
e
distinguished
b
y
action
renemen
t.
Th
us
w
e
need
a
ner
equiv
alence
than
strong
bisim
ulation
equiv
alence
etc.
Prop
osition
.0
(Action
renemen
t)
L
et
P
=
(A;
X
;
)
and
P
0
=
(A
0
;
X
0
;

0
)
b
e
two
pr
o
c
esses
with
P

P
0
.
L
et
b

Act
b
e
r
ene
d
by
the
pr
o
c
ess
Q
=
(B
;
Y
;
)
to
give
ref
P
=
(C
;
Z
;

)
and
ref
P
0
=
(C
0
;
Z
0
;

0
).
Then
ref
P

ref
P
0
.
Pro
of:
W
e
will
restate
the
denition
of
renemen
t
giv
en
earlier
in
a
form
suitable
for
rening
man
y
ev
en
ts
at
the
same
time.
Let
A
b
=
fa
i

A
j
(a
i
)
=
bg
b
e
the
set
of
ev
en
ts
lab
eled
b
in
P
.
Then
the
ev
en
ts
of
r
ef
P
are
A
 A
b
[
B

A
b
,
that
is
w
e
replace
eac
h
ev
en
t
in
A
b
,
an
a
i
,
with
a
cop
y
of
B
.
The
states
are
dened
b
y
replacing
the
a
i
's
b
y
states
of
Y
as
follo
ws|if
x

X
,
then
replace
eac
h
a
i

x
b
y
h
i

fa
i
g,
where
h
i
is
maximal
in
Y
.
Secondly
,
if
x
a
i
!
x
0
,
then
ev
ery
state
generated
from
x
in
the
rst
step
is
deleted,
and
w
e
add
a
set
of
states
generated
from
x
0
in
whic
h
all
the
other
a
i
's
are
replaced
b
y
maximal
states,
and
this
a
i
is
replaced
b
y
an
y
state
of
Y
m
ultiplied
b
y
fa
i
g.
Note
that
in
b
oth
steps
w
e
generate
a
new
state
for
eac
h
p
ossible
w
a
y
of
replacing
the
a
i
's.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES
	
Let
R
b
e
an
h.p.b.
b
et
w
een
P
and
P
0
.
Dene
a
relation
R
0
b
et
w
een
r
ef
P
and
r
ef
P
0
as
follo
ws.
If
(x;
x
0
;
f
)

R
then
since
f
is
a
lab
el
preserving
isomorphism,
b
oth
x
and
x
0
m
ust
ha
v
e
the
same
n
um
b
er
of
ev
en
ts
lab
eled
b,
and
these
ev
en
ts
are
related
b
y
f
.
No
w
if
z
is
deriv
ed
from
x
and
z
0
from
x
0
,
suc
h
that
eac
h
a
i

z
w
as
replaced
b
y
the
same
state
from
Y
as
f
(a
i
)

z
0
then
(z
;
z
0
;
f
0
)

R,
where
f
0
is
f
on
the
non-a
i
's,
and
f
0
(b;
a
i
)
=
(b;
f
(a
i
)).
No
w
w
e
can
sho
w
that
R
0
is
a
history
preserving
bisim
ulation.
Since
f
is
a
bijection
on
the
elemen
ts
of
x,
it
is
clear
that
f
0
is
a
lab
el
preserving
isomorphism
b
et
w
een
h(z
)
and
h(z
0
).
No
w
supp
ose
there
is
a
transition
z
!
z

in
r
ef
P
.
Some
of
the
ev
en
ts
in
the
transition
are
P
ev
en
ts,
others
are
from
some
copies
of
Q
.
Th
us
this
transition
can
b
e
mimic
k
ed
in
P
b
y
doing
the
same
P
ev
en
ts
and
some
a
i
's,
the
ones
that
corresp
ond
to
the
ev
en
ts
from
the
copies
of
Q
,
from
the
state
x
that
generated
z
to
a
state
x

whic
h
generated
z

.
Since
z

z
0
,
there
m
ust
b
e
x
0
suc
h
that
x

x
0
.
No
w
since
R
is
a
bisim
ulation,
w
e
m
ust
ha
v
e
an
x
0

obtained
b
y
taking
the
same
transitions
from
x
0
,
suc
h
that
x


x
0

.
No
w
from
x
0

w
e
m
ust
ha
v
e
generated
a
state
z
0

b
y
replacing
the
a
i
's
b
y
the
same
states
of
Y
as
in
z

,
and
th
us
w
e
can
sho
w
that
z


z
0

.
The
con
v
erse
condition
is
satised
similarly
,
sho
wing
that
R
0
is
an
h.p.b.
.
Connection
with
linear
logic
As
p
oin
ted
out
b
y
Barr[Bar	
],
and
also
b
y
Lafon
t
and
Streic
her[LS	],
the
category
of
Ch
u
spaces
forms
a
mo
del
for
linear
logic
dev
elop
ed
b
y
Girard
[Gir
].
W
e
ha
v
e
dened
most
of
the
linear
logic
op
erators
ab
o
v
e,
the
only
ones
that
ha
v
e
not
b
een
dened
are
P

Q

=
(P
?

Q
?
)
?
,
called
\par",
!(A;
X
)

=
(A;

A
),
and
?(A;
X
)

=
(
X
;
X
).
W
e
ha
v
e
used
a
dieren
t
notation
than
Girard,
our
notation
conrms
to
standard
categorical
terminology
.
Seely[See	]
denes
a
Girard
category
and
has
pro
v
ed
that
ev
ery
Girard
category
is
a
mo
del
of
linear
logic.
A
Girard
category
is
a
symmetric
monoidal
closed
category
with
nite
pro
ducts
and
a
comonad
!P
suc
h
that
!(P

Q)

=
!P

!Q
is
a
natural
isomorphism,
and
!

=
>.
These
conditions
can
easily
b
e
v
eried
for
Ch
u,
so
it
is
a
mo
del
of
linear
logic.

CHAPTER
.
ALGEBRA
OF
CHU
SP
A
CES
0
Th
us
w
e
can
use
linear
logic
as
a
v
erication
system
for
Ch
u
spaces.
It
do
es
need
to
b
e
extended
though,
since
it
do
es
not
ha
v
e
sev
eral
imp
ortan
t
op
erators,
lik
e
c
hoice
and
sequen
tial
comp
osition.
Completeness.
The
denition
w
e
use
for
the
truth
of
a
form
ula
is
the
one
suggested
b
y
Seely
|
A
form
ula
is
v
alid
if
for
ev
ery
instan
tiation
of
its
v
ariables,
the
set
A
is
non-empt
y
.
Ch
u
is
not
a
complete
mo
del
of
linear
logic,
as
there
are
form
ulas
whic
h
are
not
true
in
linear
logic
but
whic
h
hold
in
Ch
u.
An
example
of
suc
h
a
form
ula
is
P
 (P

P
).

Chapter

Comparison
with
other
mo
dels
In
the
previous
c
hapters
w
e
ha
v
e
presen
ted
our
mo
del,
Ch
u
spaces,
and
ha
v
e
equipp
ed
it
with
an
algebra
to
mak
e
it
a
language
for
sp
ecication
of
concurren
t
programs.
In
this
c
hapter
w
e
will
compare
v
arious
other
mo
dels
of
concurrency
,
and
see
ho
w
Ch
u
relates
to
these.
Since
Ch
u
spaces
do
not
imp
ose
man
y
constrain
ts
on
the
structure
of
the
pro
cesses
they
represen
t,
it
should
come
as
no
surprise
that
they
can
em
b
ed
a
lot
of
these
mo
dels.
The
more
in
teresting
results
are
those
whic
h
sho
w
that
the
generalit
y
do
es
not
lose
the
p
o
w
er
of
these
mo
dels.
.
Ev
en
t
Structures
and
P
etri
nets
P
etri
nets
w
ere
the
rst
of
the
mo
dels
for
concurrency
,
and
ev
en
t
structures
w
ere
dev
elop
ed
in
[NPW]
to
equip
them
with
an
algebra,
and
bridge
the
gap
b
et
w
een
automata
theory
and
domain
theory
.
Ch
u
spaces
generalize
ev
en
t
structures
b
y
re-
mo
ving
those
restrictions
on
ev
en
t
structures
whic
h
are
designed
to
mak
e
them
matc
h
closely
to
P
etri
nets.
An
ev
en
t
structure
is
dened
as
a
triple
(E
;
C
on;
`),
where
E
is
a
set
of
ev
en
ts,
C
on
is
a
non-empt
y
collection
of
nite
subsets
of
E
,
suc
h
that
X

C
on
and
Y

X
)
Y

C
on,
and
`

C
on

E
satises
X
`
e
and
X

Y

C
on
)
Y
`
e.
C
on
is
the
consistency
predicate,
giving
the
conict-free
nite
subsets
of
E
,
while
`
is
the
enabling
relation.


CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

T
o
ev
ery
ev
en
t
structure
(E
;
C
on;
`)
w
e
can
no
w
asso
ciate
a
Ch
u
space,
whose
set
of
ev
en
ts
is
E
,
and
whose
logical
form
ula
 is
deriv
ed
from
C
on
and
`.
F
or
ev
ery
nite
subset
of
E
,
X

C
on,
add
the
clause
V
X
!
0
to
the
form
ula
 .
F
or
an
ev
en
t
e,
let
X
i
`
e
b
e
the
elemen
ts
of
the
enabling
relation
with
e
on
the
righ
t
side.
F
or
eac
h
ev
en
t
e,
add
the
clause
e
!
W
i
V
X
i
to
 .
(Note
that
V
;
=

and
W
;
=
0.
a
!
0
can
b
e
written
as
:a.)
No
w
 is
the
conjunction
of
all
these
clauses.
Th
us
w
e
can
form
a
Ch
u
space
corresp
onding
to
an
ev
en
t
structure.
Ho
w
ev
er,
sev
eral
dieren
t
ev
en
t
structures
could
corresp
ond
to
the
same
Ch
u
space.
This
is
b
ecause
the
axioms
for
ev
en
t
structures
are
not
strong
enough
to
deduce
all
the
prop
erties
that
can
b
e
deduced
b
y
b
o
olean
logic.
F
or
example
in
the
ev
en
t
structure
with
E
=
fa;
b;
cg,
C
on
=

E
 fa;
b;
cg
and
c
`
a
and
other
tuples
added
according
to
the
axiom
ab
o
v
e,
it
is
clear
that
the
set
fa;
bg
is
not
a
consisten
t
set,
since
a
requires
c
and
fa;
b;
cg
is
not
consisten
t.
This
deduction
is
made
b
y
the
b
o
olean
logic,
but
not
b
y
the
ev
en
t
structure
rules.
So
t
w
o
ev
en
t
structures
whic
h
lo
ok
ed
lik
e
the
one
ab
o
v
e
except
that
one
did
not
ha
v
e
fa;
bg

C
on
w
ould
b
e
mapp
ed
to
the
same
Ch
u
space.
A
conguration
of
an
ev
en
t
structure
is
a
set
of
ev
en
ts
whic
h
could
ha
v
e
o
ccurred
in
some
execution
of
the
pro
cess
it
represen
ts.
Th
us
for
ev
ery
nite
set
of
ev
en
ts
in
a
conguration,
it
should
b
e
consisten
t,
and
secondly
,
for
eac
h
ev
en
t
e,
some
set
of
ev
en
ts
enabling
it
should
ha
v
e
o
ccurred
b
efore
it.
This
is
expressed
b
y
sa
ying
that
it
is
secured,
i.e.
there
is
a
nite
sequence
of
ev
en
ts
in
the
conguration,
e
0
;
e

;
:
:
:
;
e
n
=
e,
suc
h
that
e
0
;
:
:
:
e
i
`
e
i+
for
all
i
<
n.
The
collection
of
all
congurations
of
an
ev
en
t
structure
E
=
(E
;
C
on;
`)
is
denoted
F
(E
).
Prop
osition
.
Each
c
ongur
ation
of
an
event
structur
e
is
a
state
of
the
c
orr
e-
sp
onding
Chu
sp
ac
e.
Pro
of:
Since
ev
ery
nite
set
in
a
conguration
m
ust
b
e
consisten
t,
th
us
all
the
clauses
added
to
 b
y
C
on
are
satised.
Also,
ev
ery
ev
en
t
has
some
set
of
ev
en
ts
whic
h
enable
it
in
the
conguration,
so
all
the
clauses
due
to
`
are
also
satised,
th
us
satisfying
the
en
tire
form
ula
 .
Th
us
the
conguration
is
a
state
There
ma
y
ho
w
ev
er
b
e
some
states
that
are
not
congurations,
due
to
the
fact
that
they
are
not
secured
(ev
ery
state
m
ust
b
e
consisten
t).
F
or
example,
if
E
=

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

fa;
bg;
C
on
=

E
;
a
`
b;
b
`
a,
then
the
only
conguration
p
ossible
is
the
empt
y
one.
Ho
w
ev
er
ab
is
also
a
state
of
the
Ch
u
space.
W
e
can
eliminate
the
states
that
are
unsecured
if
w
e
wish
to.
An
alternativ
e
em
b
edding
of
(E
;
C
on;
`)
is
to
map
it
to
the
Ch
u
space
(E
;
F
(E
)).
This
is
also
called
the
Ch
u
conguration
structure
corresp
onding
to
(E
;
C
on;
`).
F
or
related
w
ork
on
em
b
edding
ev
en
t
structures
in
to
Ch
u
spaces,
see
[Plo	a
].
Th
us
the
ob
jects
of
Winsk
el's
category
of
ev
en
t
structures
can
b
e
em
b
edded
in
Ch
u,
in
suc
h
a
w
a
y
that
their
concurrency
prop
erties
are
preserv
ed.
Ho
w
ev
er
the
morphisms
of
Winsk
el's
category
are
not
the
same
as
the
ones
for
Ch
u
spaces.
Ev
en
t
morphisms
preserv
e
consistency
of
ev
en
ts,
whereas
Ch
u
morphisms
preserv
e
conict.
W
e
can
pro
vide
an
alternativ
e
category
whose
ob
jects
are
the
same
as
Ch
u,
but
whose
morphisms
are
dieren
t
|
Giv
en
(A;
X
;
R)
and
(B
;
Y
;
S
),
a
hyp
er
gr
aph
morphism
is
a
pair
of
maps
f
:
A
!
B
and
g
:
X
!
Y
,
suc
h
that
R(a;
x)
=
S
(f
(a);
g
(x))
for
all
a

A;
x

X
.
This
category
is
called
Hgr,
since
the
ob
jects
can
b
e
in
terpreted
as
h
yp
ergraphs[Ber
],
with
A
b
eing
the
v
ertices
of
the
graph,
and
X
the
set
of
h
yp
eredges.
Then
these
morphisms
corresp
ond
to
h
yp
ergraph
morphisms
[D
W0].
Notice
that
here
the
direction
of
g
is
the
same
as
that
of
f
,
so
if
X
is
in
terpreted
as
a
subset
of
the
p
o
w
er
set

A
,
then
these
morphisms
are
based
on
the
co
v
arian
t
p
o
w
erset
functor
on
sets,
whereas
Ch
u
morphisms
are
based
on
the
con
tra
v
arian
t
p
o
w
erset
functor.
F
or
Hgr
morphisms
g
(x)
=
f
(x),
where
f
(x)
=
ff
(a)
j
a

xg.
If
w
e
em
b
ed
an
ev
en
t
structure
as
a
conguration
structure,
the
sync
hronous
morphisms
of
Winsk
el
[Win
]
are
sp
ecial
cases
of
h
yp
ergraph
morphisms,
namely
those
morphisms
whic
h
are
injections
when
restricted
to
an
y
state
(x

X
:
[f
n
x
is
injectiv
e
]).
A
nite
set
X

E
is
consisten
t
i
there
is
a
conguration
x

F
(E
)
with
X

x.
Th
us
if
(f
;
g
)
is
a
h
yp
ergraph
morphism,
then
f
(X
)

g
(x),
so
f
(X
)
is
consisten
t.
Also
X
`
e
i
X
is
consisten
t
and
there
is
a
conguration
x

F
(E
)
suc
h
that
e

x

X
[
feg.
No
w
f
(X
)
is
consisten
t,
and
f
(e)

g
(x)
and
g
(x)

f
(X
[
feg).
Th
us
f
(X
)
`
f
(e).
The
main
reason
wh
y
w
e
prefer
to
use
the
category
Ch
u
rather
than
Hgr
is
that
Hgr
lac
ks
the
dualit
y
principle
w
e
sa
w
in
c
hapter
.
This
dualit
y
is
imp
ortan
t
as
it
enables
us
to
generalize
v
arious
Stone
dualities,
as
w
ell
as
con
v
ert
b
et
w
een
automata

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

and
sc
hedules.
This
cannot
b
e
done
in
Hgr.
Tw
o
of
the
op
erations
w
e
had
dened
earlier
corresp
ond
naturally
to
the
sum
and
pro
duct
op
erations
dened
on
the
category
of
ev
en
t
structures
[Win
].
Choice
corresp
onds
to
sum
of
ev
en
t
structures,
and
in
fact
is
copro
duct
in
the
category
Hgr.
P
artial
sync
hronous
pro
duct
is
the
pro
duct
of
ev
en
t
structures.
If
w
e
c
hanged
the
denition
of
morphisms
of
Hgr
to
partial
maps
(i.e.
made
f
partial
and
then
g
is
just
f
on
sets),
then
this
w
ould
b
e
pro
duct
in
the
new
category
.
Prop
osition
.
If
E

=
(E

;
C
on

;
`

)
and
E

=
(E

;
C
on

;
`

)
ar
e
two
event
structur
es,
and
P

=
(E

;
F
(E

))
and
P

=
(E

;
F
(E

))
their
Chu
c
ongur
ation
structur
es,
then
the
choic
e
P

t
P

c
orr
esp
onds
to
the
event
structur
e
E

+
E

.
Pro
of:
The
ev
en
t
set
of
E

+
E

is
the
disjoin
t
union
of
E

and
E

,
whic
h
is
the
same
as
the
ev
en
ts
of
P

t
P

.
A
subset
X

E

]
E

is
consisten
t
i
X
b
elongs
only
to
one
of
E

or
E

,
and
is
consisten
t
there.
Th
us
an
y
conguration
of
the
sum
can
consist
of
ev
en
ts
only
in
E

or
ev
en
ts
only
in
E

,
except
for
the
empt
y
conguration,
whic
h
is
common.
The
vdash
relation
is
similarly
the
union
of
the
vdash
relations
of
E

and
E

,
so
an
y
conguration
of
E

is
a
conguration
of
the
sum,
and
the
same
for
E

.
Th
us
the
c
hoice
P

t
P

is
isomorphic
to
(E

]
E

;
F
(E

)
+
F
(E

)).
The
fact
that
c
hoice
is
copro
duct
for
Hgr
can
b
e
easily
v
eried.
There
are
maps
(f
i
;
g
i
)
:
P
i
!
P

t
P

giv
en
b
y
f

(a)
=
a
and
g

(x)
=
x,
and
similarly
for
P

.
If
an
y
other
Q
has
maps
(f
0
i
;
g
0
i
)
:
P
i
!
Q
,
then
the
unique
map
from
P

t
P

!
Q
can
b
e
giv
en
b
y
the
juxtap
osition
of
the
f
0
i
's.
In
order
to
matc
h
up
partial
sync
hronous
pro
duct
exactly
with
the
pro
duct
of
ev
en
t
structures,
it
is
necessary
to
add
one
more
condition
on
the
states
|
if
a
state
x
w
as
generated
from
states
x

and
x

,
then
there
should
b
e
a
Ch
u
space
map
from
h(x

)

to
h(x),
carrying
eac
h
ev
en
t
to
the
ev
en
t
it
forms
in
the
construction,
and
a
similar
map
from
h(x

).
This
eliminates
states
lik
e
f(a;
d);
(b;
c)g
in
a:b:0
k
c:d:0
,
since
b
!
a
is
a
prop
ert
y
of
the
the
history
of
the
state
fa;
bg,
but
(b;
c)
!
(a;
d)
is
not
a
prop
ert
y
of
the
history
of
f(a;
d);
(b;
c)g.

h(x)
w
as
dened
in
the
previous
c
hapter
as
the
history
of
x
=
(x;
fy

X
j
y

xg).

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

Prop
osition
.
If
E

=
(E

;
C
on

;
`

)
and
E

=
(E

;
C
on

;
`

)
ar
e
two
event
structur
es,
and
P

=
(E

;
F
(E

))
and
P

=
(E

;
F
(E

))
their
Chu
c
ongur
ation
structur
es,
then
the
p
artial
synchr
onous
pr
o
duct
P

k
P

c
orr
esp
onds
to
the
event
structur
e
E


E

.
Pro
of:
The
ev
en
ts
of
P

k
P

clearly
corresp
ond
to
the
ev
en
ts
of
E


E

.
In
prop
osition
..
on
[Win
,
p.	]
Winsk
el
has
c
haracterized
the
congurations
of
E


E

.
These
are
those
subsets
of
the
ev
en
t
sets
suc
h
that
they
originate
from
a
conguration
of
E

and
a
conguration
of
E

,
do
not
sync
hronize
an
y
ev
en
t
of
E

with
t
w
o
dieren
t
ev
en
ts
of
E

or
vice
v
ersa,
and
t
w
o
more
conditions
ensuring
that
ev
ery
ev
en
t
is
nitely
supp
orted.
All
of
these
can
b
e
sho
wn
to
b
e
equiv
alen
t
to
the
conditions
w
e
ha
v
e
placed
on
states
of
P

k
P

.
The
pro
of
that
parallel
comp
osition
is
the
pro
duct
in
the
category
of
partial
h
yp
ergraph
morphisms
is
routine.
If
w
e
restrict
P

k
P

to
the
ev
en
ts
from
A

B
,
then
w
e
get
the
sync
hronous
pro
duct
of
P

and
P

,
and
this
is
the
pro
duct
in
the
category
Hgr.
There
is
no
univ
ersally
accepted
denition
of
sequen
tial
comp
osition
for
ev
en
t
structures.
Baeten
and
V
aandrager[BV	]
dene
sequen
tial
comp
osition,
and
our
denition
do
es
agree
with
theirs
op
erationall
y
.
They
dene
a
sp
ecial
ev
en
t,
a
p
whic
h
is
in
terpreted
as
the
last
ev
en
t
of
the
pro
cess
represen
ted
b
y
the
ev
en
t
structure.
Sequen
tial
comp
osition
E
0
;
E

is
then
dened
b
y
rening
eac
h
p
of
E
0
with
E

.
Since
an
y
state
in
whic
h
p
has
b
een
p
erformed
is
a
maximal
state,
our
denition
of
P
;
Q
mak
es
the
states
of
P
;
Q
b
e
the
congurations
of
E
0
;
E

,
except
for
an
extra
p
ev
en
t
in
some
states.
This
can
b
e
hidden
b
y
lab
eling
it
with
a

.
Th
us
Ch
u
spaces
can
mimic
the
b
eha
vior
of
ev
en
t
structures
b
y
b
eing
able
to
represen
t
an
y
concurren
t
phenomenon
that
ev
en
t
structures
can
represen
t
(mainly
conict
and
enabling),
and
can
also
b
e
com
bined
to
duplicate
the
v
arious
op
erators
that
ev
en
t
structures
p
ossess.
The
denition
of
a
Ch
u
space
is
simpler
than
the
denition
of
an
ev
en
t
structure,
and
Ch
u
spaces
can
represen
t
more
phenomena,
lik
e
causalit
y
and
nondeterminism
(c
hapter
).
In
an
ev
en
t
structure,
the
enabling
relation
is
quite
simple
|
an
ev
en
t
can
b
e

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

enabled
b
y
one
of
sev
eral
sets
of
ev
en
ts.
In
[Gun	
,
Gun	
]
Guna
w
ardena
strength-
ened
this
to
allo
w
for
more
complicated
enabling
conditions
to
get
a
new
mo
del
for
concurrency
called
causal
automata.
In
a
causal
automaton,
eac
h
ev
en
t
is
asso
ciated
with
a
nitary
b
o
olean
form
ula
o
v
er
the
set
of
ev
en
ts,
and
is
enabled
an
y
time
the
form
ula
b
ecomes
true
(where
a
literal
b
ecomes
true
whenev
er
it
has
o
ccurred
as
an
ev
en
t).
No
w
in
fact
the
consistency
predicate
is
no
longer
necessary
,
as
it
can
b
e
en-
co
ded
in
to
the
enabling
relation.
In
order
to
deal
with
innitary
enabling
form
ulae,
Guna
w
ardena
in
tro
duced
geometric
automata,
where
the
form
ulae
could
b
e
innite
with
some
restrictions.
Geometric
automata
cannot
b
e
enco
ded
b
y
Ch
u
spaces.
The
reason
is
that
in
a
geometric
automaton,
the
enabling
form
ula
m
ust
b
e
true
only
at
the
instan
t
an
ev
en
t
is
taking
place,
it
could
b
ecome
false
later.
But
in
a
Ch
u
space,
if
w
e
ha
v
e
a
!
,
then

m
ust
alw
a
ys
sta
y
true
after
a
has
o
ccurred.
Th
us
geometric
automata
can
represen
t
deadlo
c
k
b
et
w
een
t
w
o
ev
en
ts,
b
y
making
eac
h
the
enabling
form
ula
for
the
other,
but
deadlo
c
k
cannot
b
e
represen
ted
b
y
Ch
u
spaces.
Another
dierence
is
that
the
enabling
form
ula
m
ust
ha
v
e
b
ecome
true
b
efor
e
the
ev
en
t
tak
es
place,
while
in
a
Ch
u
space
it
could
b
ecome
true
at
the
same
time.
Geometric
automata
are
ho
w
ev
er
an
in
terlea
ving
mo
del
of
concurrency
.
They
cannot
represen
t
the
distinction
b
et
w
een
causalit
y
and
enabling,
and
b
et
w
een
nondeterminism
and
c
hoice.
P
etri
nets
and
Ch
u
spaces.
Ev
en
t
structures
w
ere
originally
dev
elop
ed
to
pro
vide
an
algebra
for
P
etri
nets
b
y
Nielsen,
Plotkin
and
Winsk
el
in
[NPW].
They
considered
safe
P
etri
nets,
that
is
those
in
whic
h
no
place
can
ev
er
ha
v
e
more
than
one
tok
en.
They
then
unfolded
the
net
to
remo
v
e
all
lo
ops,
resulting
in
an
o
ccurrence
net,
whic
h
is
acyclic,
so
no
transition
gets
red
more
than
once.
This
can
then
b
e
represen
ted
as
an
ev
en
t
structure.
Since
Ch
u
spaces
em
b
ed
ev
en
t
structures,
Ch
u
spaces
can
represen
t
an
y
b
eha
vior
that
safe
P
etri
nets
can
mo
del.
Winsk
el
[Win
]
giv
es
a
translation
function
from
safe
nets
to
ev
en
t
structures,
whic
h
w
e
extend
to
Ch
u
spaces.
Winsk
el
also
giv
es
a
w
a
y
of
constructing
an
o
ccurrence
net
from
a
prime
ev
en
t
structure,
but
this
is
not
p
ossible
for
Ch
u
spaces,
since
Ch
u
spaces
mo
del
b
eha
viors
whic
h
cannot
b
e
mo
deled
b
y
P
etri
nets.
F
or
example,
P
etri
nets
cannot
distinguish
b
et
w
een
causalit
y
and
enabling,

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

a
b
c
b
a
c
Figure
.:
A
P
etri
net
for
p
ostp
oned
concurrency
,
and
one
whic
h
cannot
b
e
repre-
sen
ted
as
a
Ch
u
space.
while
Ch
u
spaces
can.
Ch
u
spaces
can
mimic
the
b
eha
vior
of
some
unsafe
P
etri
nets
that
cannot
b
e
mo
deled
as
ev
en
t
structures.
An
example
of
this
is
p
ostp
oned
concurrency
(gure
.),
whic
h
can
b
e
represen
ted
b
y
an
unsafe
P
etri
net.
Ho
w
ev
er,
it
is
not
p
ossible
to
represen
t
the
b
eha
vior
of
eac
h
P
etri
net
as
a
Ch
u
space
faithfully
,
where
b
y
faithful
w
e
mean
as
a
Ch
u
space
that
is
history
preserving
bisimilar
to
the
P
etri
net.
An
example
of
suc
h
a
P
etri
net
is
giv
en
in
gure
.,
this
is
the
net
that
can
do
at
most
t
w
o
ev
en
ts
out
of
three
concurren
tly
(prop
osed
b
y
Rob
v
an
Glabb
eek).
A
more
syn
tactic
approac
h
to
represen
ting
P
etri
nets
b
y
matrices
using
the
Ch
u
construction
has
b
een
follo
w
ed
b
y
Bro
wn
and
Gurr
[BG	0].
They
mo
del
a
general

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

P
etri
net
as
a
pair
of
matrices
represen
ting
the
pre
and
p
ost
conditions.
The
mor-
phisms
m
ust
satisfy
adjoin
tness
conditions
for
b
oth
matrices,
and
are
sho
wn
to
b
e
sim
ulations
of
P
etri
nets.
.
A
Ch
u
Seman
tics
for
CCS
and
CSP
The
calculus
of
comm
unicating
systems
w
as
dev
elop
ed
b
y
Robin
Milner
as
an
al-
gebraic
means
of
sp
ecifying
concurren
t
systems.
The
atomic
pro
cesses
are
actions,
whic
h
cannot
b
e
further
sub
divided
(as
this
is
an
in
terlea
ving
mo
del).
A
pro
cess
executes
an
action
to
ev
olv
e
in
to
another
pro
cess.
Actions
are
lab
eled
from
a
set
of
lab
els
called
Act,
whic
h
has
a
set
of
lab
els
(lab
els
are
denoted
b
y
a;
b;
:
:
:
),
their
complemen
tary
lab
els
denoted
b
y

a;

b
;
:
:
:
and
a
sp
ecial
lab
el

.
Pro
cesses
can
b
e
built
up
from
other
pro
cesses
b
y
six
op
erators:
P
::=
0
j
a:P
j
P
t
P
j
P
jP
j
P
nL
j
P
[f
]
j
x:
P
The
basic
pro
cess
is
0,
whic
h
do
es
nothing.
a:P
is
called
prexing,
the
action
lab
eled
a
is
executed
and
then
the
pro
cess
b
eha
v
es
lik
e
P
.
P
t
Q
is
c
hoice,
this
pro
cess
nondeterministically
c
ho
oses
b
et
w
een
pro
cesses
P
and
Q,
and
then
con
tin
ues
doing
the
c
hosen
pro
cess.
W
e
ma
y
ha
v
e
a
c
hoice
b
et
w
een
an
innite
n
um
b
er
of
pro
cesses.
The
other
op
erators
are
parallel
comp
osition,
restriction,
relab
eling
and
recursion.
The
parallel
comp
osition
is
a
comm
unicating
parallel
comp
osition,
where
the
t
w
o
comp
onen
ts
can
either
do
their
individual
actions
indep
enden
tly
,
or
can
sim
ultaneously
do
a
pair
of
complemen
tary
actions,
whic
h
then
are
lab
eled
with
a

,
a
silen
t
action.
W
e
can
asso
ciate
a
lab
eled
Ch
u
space
with
eac
h
pro
cess.
0
is
the
Ch
u
space
0,
and
the
other
connectiv
es
are
those
describ
ed
in
c
hapter
.
P
jP
is
mo
deled
b
y
partial
sync
hronous
pro
duct,
sub
ject
to
the
condition
on
histories
sp
ecied
in
the
previous
section.
Its
singleton
ev
en
ts
are
lab
eled
as
they
w
ere
b
efore,
and
an
y
pair
of
ev
en
ts
whose
pair
of
lab
els
are
not
complemen
tary
is
remo
v
ed
b
y
restriction.
Eac
h
pair
is
then
lab
eled
b
y
a

.
The
restriction
op
erator
is
on
lab
els
rather
than
ev
en
ts.
Since
all
the
op
erators
are
con
tin
uous,
recursiv
e
denitions
are
p
ossible.
Morphisms
b
et
w
een

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS
	
these
Ch
u
spaces
are
Ch
u
maps
(f
;
g
)
in
whic
h
f
preserv
es
lab
els.
Th
us
Ch
u
spaces
form
a
mo
del
for
CCS.
This
mo
del
do
es
not
satisfy
the
in
terlea
v-
ing
la
w
|
w
e
do
not
ha
v
e
a:0
k
b:0

=
a:b:0
t
b:a:0
.
Later
w
e
will
sho
w
some
kinds
of
equiv
alences
for
whic
h
this
la
w
do
es
hold.
W
e
will
no
w
pro
v
e
a
close
connection
b
et
w
een
the
seman
tics
of
a
CCS
expression
and
its
Ch
u
space
automaton.
Prop
osition
.
Given
a
CCS
expr
ession
P
and
its
Chu
sp
ac
e
P
,
it
is
p
ossible
to
lab
el
e
ach
state
x
of
the
Chu
sp
ac
e
with
a
CCS
expr
ession
P
(x)
such
that
:
P
(;)
=
P
,
that
is
the
start
state
is
lab
ele
d
with
P
.
:
Ther
e
is
a
tr
ansition
in
the
automaton
x
e
!
x
0
i
ther
e
is
a
CCS
tr
ansition
P
(x)
(e)
!
P
(x
0
)
Pro
of:
W
e
will
sho
w
this
b
y
induction
on
the
structure
of
CCS
expressions.
:
It
holds
for
0
trivially
,
as
there
is
only
one
state
whic
h
is
lab
eled
with
0,
and
no
transitions.
:
If
P
=
a:Q,
then
the
Ch
u
space
for
a
is
(feg;
f;;
fegg;

:
e
!
a).
So
there
is
one
maximal
state
feg.
No
w
an
y
state
of
P
will
b
e
either
the
state
;
or
y
[
feg,
where
y
is
a
state
of
Q,
the
Ch
u
space
for
Q.
Lab
el
;
with
P
and
eac
h
state
y
[
feg
with
the
expression
lab
eling
y
in
Q
.
The
conditions
of
the
theorem
are
satised
b
y
the
induction
h
yp
othesis.
:
If
P
=
P

t
P

,
lab
el
the
empt
y
state
with
P
.
An
y
other
state
in
P
comes
uniquely
from
a
state
in
P

or
P

,
the
Ch
u
spaces
for
P

and
P

.
Lab
el
it
with
the
expression
with
whic
h
it
w
as
lab
eled
in
that
Ch
u
space.
No
w
there
is
a
transition
from
;
to
a
state
in
P
i
there
w
as
a
similar
transition
in
either
P

or
P

,
whic
h
are
exactly
the
p
ossible
CCS
transitions
from
P
.
:
If
P
=
P

k
P

,
eac
h
state
x
of
P
comes
from
a
state
x

of
P

and
a
state
x

of
P

.
Let
P
(x)
=
P
(x

)
k
P
(x

),
the
parallel
comp
osition
of
the
pro
cesses
lab
eling
of
the
pair
of
states.
No
w
the
state
;
is
lab
eled
with
P
,
since
it
could
arise
only
from
the
;
states
in
P

and
P

,
whic
h
b
y
the
induction
h
yp
othesis

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS
0
w
ere
lab
eled
b
y
P

and
P

resp
ectiv
ely
.
Also
if
P
(x)
=
P
(x

)
k
P
(x

)
and
there
is
a
transition
x
e
!
x
0
,
then
e
=
e

or
e

or
(e

;
e

).
Then
there
m
ust
ha
v
e
b
een
a
transition
x

e

!
x
0

or
x

e

!
x
0

or
b
oth,
b
y
lo
oking
at
the
construction
of
x
and
x
0
.
Also,
if
b
oth
o
ccurred,
the
lab
els
on
e

and
e

m
ust
b
e
complemen
tary
.
These
are
exactly
the
p
ossible
CCS
transitions
from
P
(x

)
k
P
(x

),
so
the
prop
osition
holds.
:
The
cases
P
=
P
0
nL
and
P
=
P
0
[f
]
are
trivial.
Eac
h
new
state
x
comes
from
a
state
x
0
,
and
has
the
lab
el
is
P
(x)
=
P
(x
0
)nL
or
P
(x
0
)[f
].
:
P
=
A:Q[A].
W
e
will
write
this
in
the
equational
form,
P
=
Q(P
).
No
w
b
y
induction
h
yp
othesis,
w
e
can
lab
el
the
Ch
u
spaces
for
0;
Q(0
);
Q(Q(0
));
:
:
:
.
The
maps
b
et
w
een
these
whic
h
form
these
spaces
in
to
an
!
-c
hain
tak
e
eac
h
state
lab
eled
b
y
p(Q
i
(0)),
where
p
is
an
y
pro
cess
expression
in
the
Ch
u
space
for
Q(0),
to
p(Q
i 
(0))
for
i
>
0,
and
all
the
states
in
p(0
)
to
a
state
lab
eled
0.
No
w
if
x
is
an
y
state
in
the
colimit,
lab
el
it
with
p(P
)
if
a
map
tak
es
it
to
p(Q
i
(0)),
the
comm
utativit
y
ensures
that
this
is
w
ell
dened.
Th
us
the
start
state
will
b
e
lab
eled
P
.
The
second
condition
follo
ws
as
for
eac
h
i,
the
Ch
u
space
for
Q
i
(0
)
satises
it.
This
theorem
sho
ws
that
the
Ch
u
space
for
a
CCS
expression
is
strongly
bisim-
ilar
to
the
deriv
ation
tree
for
that
expression.
It
also
sho
ws
that
there
is
a
strong
bisim
ulation
b
et
w
een
Ch
u
spaces
whic
h
represen
t
strongly
bisimilar
CCS
expressions,
th
us
sho
wing
that
if
w
e
dene
an
equiv
alence
relation
b
et
w
een
t
w
o
Ch
u
spaces
to
b
e
bisim
ulation
equiv
alence,
then
all
the
CCS
la
ws
held
under
strong
bisim
ulation
will
b
e
true
for
this
equiv
alence.
In
particular,
the
Ch
u
spaces
for
a:0
k
b:0
and
a:b:0
t
b:a:0
are
bisimilar.
The
main
dierence
b
et
w
een
the
seman
tics
of
a
CCS
expression
and
its
Ch
u
space
is
that
Ch
u
spaces
allo
w
execution
of
man
y
ev
en
ts
at
the
same
time,
whereas
CCS
allo
ws
only
one
at
a
time.
Ho
w
ev
er
strong
bisim
ulation
considers
only
one
ev
en
t
at
a
time,
whic
h
is
wh
y
this
prop
osition
holds.
W
e
ha
v
e
already
dra
wn
a
connection
b
et
w
een
sim
ulations
of
pro
cesses
and
Ch
u
morphisms
in
c
hapter
.

CHAPTER
.
COMP
ARISON
WITH
OTHER
MODELS

The
v
arious
la
ws
that
Ch
u
spaces
satisfy
ha
v
e
already
b
een
stated
in
c
hapter
.
The
la
ws
(a:Q)nL

=
0
if
a

L;
a:QnL
otherwise,
and
(a:Q)[f
]

=
f
(a):Q[f
]
are
also
v
alid.
It
can
b
e
seen
that
the
only
CCS
la
ws
that
Ch
u
spaces
do
not
satisfy
are
the
expansion
la
w,
the

-la
ws
[Mil	
]
and
the
idemp
otence
of
c
hoice.
The
last
can
b
e
remedied
b
y
using
history
preserving
bisim
ulation
as
our
notion
of
Ch
u
space
equiv
alence.
Successiv
ely
coarser
equiv
alences
enable
the
satisfaction
of
the
other
la
ws.
It
is
p
ossible
to
dene
equiv
alences
b
et
w
een
Ch
u
spaces
based
up
on
eac
h
of
the
equiv
alences
b
et
w
een
pro
cesses
[vG	0].
W
e
will
not
go
in
to
these
here.
A
Ch
u
space
seman
tics
can
similarly
b
e
giv
en
for
the
language
of
Comm
unicating
Sequen
tial
Pro
cesses
of
Hoare
[BHR,
Hoa
,
Hoa
].
Some
op
erators
of
CSP
|
prexing,
c
hoice,
renaming
and
concealmen
t
can
b
e
mo
deled
as
ab
o
v
e.
Concurrence
P
k
Q
can
b
e
mo
deled
b
y
partial
sync
hronous
pro
duct,
with
an
y
singleton
ev
en
ts
from
P
restricted
a
w
a
y
if
they
also
o
ccur
in
Q,
and
vice
v
ersa
(actions
whic
h
o
ccur
in
b
oth
pro
cesses
m
ust
sync
hronize).
Also,
an
y
paired
ev
en
t
the
lab
els
of
whose
comp
onen
ts
are
not
the
same
is
restricted
a
w
a
y
,
and
the
lab
el
of
the
other
paired
ev
en
ts
is
the
lab
el
of
either
comp
onen
t.
In
terlea
ving
is
mo
deled
b
y
sum
of
Ch
u
spaces,
as
there
is
no
comm
unication,
while
comm
unication
can
b
e
handled
with
lab
els.
Sequen
tial
comp
osition
can
b
e
done
using
our
sequen
tial
comp
osition
op
erator.
Most
of
the
standard
CSP
la
ws
hold
for
this
mo
del.
Once
again
the
seman
tics
of
CSP
is
in
terlea
ving,
but
this
mo
del
is
non-in
terlea
ving.
W
e
cannot
mo
del
nondeterministic
c
hoice
of
CSP
v
ery
w
ell,
since
CSP
c
hoice
do
es
not
resp
ect
branc
hing
time,
whereas
Ch
u
spaces
do.
If
w
e
decide
to
ignore
this
la
w,
then
nondeterministic
c
hoice
can
b
e
mo
deled
b
y
the
c
hoice
b
et
w
een


:P
t


:Q,
with
the
start
state
deleted,
and
the

lab
eled
as
silen
t
actions.
This
pro
cess
is
forced
to
start
out
in
either
P
or
Q,
so
the
c
hoice
is
nondeterministic.

Chapter

F
uture
Researc
h
W
e
indicate
sev
eral
p
ossibili
ti
es
for
researc
h
op
ened
up
b
y
our
w
ork
on
Ch
u
spaces.
Expressiv
eness
of
Ch
u
spaces.
W
e
w
ould
lik
e
to
get
a
b
etter
idea
of
the
kinds
of
concurrency
features
that
can
or
cannot
b
e
represen
ted
b
y
Ch
u
spaces.
In
particular,
w
e
w
ould
lik
e
to
understand
the
relation
of
Ch
u
spaces
with
P
etri
nets
and
other
mo
dels
b
etter,
b
y
sho
wing
whic
h
pro
cesses
represen
table
in
these
mo
dels
can
b
e
represen
ted
as
Ch
u
spaces.
In
addition,
the
notion
of
what
it
means
for
a
pro
cess
to
b
e
represen
ted
as
a
Ch
u
space
could
b
e
in
v
estigated
further.
F
or
example,
w
e
sa
y
that
a
P
etri
net
is
adequately
represen
ted
as
a
Ch
u
space
if
one
can
dene
a
history
preserving
bisim
ulation
b
et
w
een
them.
The
notion
of
whic
h
equiv
alence
to
use
is
of
course
go
v
erned
b
y
what
are
the
in
teresting
distinctions,
and
th
us
v
arious
equiv
alences
could
b
e
in
v
estigated.
In
this
thesis
w
e
did
not
in
v
estigate
the
ideas
of
fair
computations
for
Ch
u
spaces.
It
is
p
ossible
to
dene
these,
and
further
researc
h
on
the
represen
tation
of
v
arious
kinds
of
fairness
promises
to
b
e
in
teresting.
Extending
the
Algebra.
W
e
ha
v
e
presen
ted
some
of
the
p
ossible
op
erators
for
an
algebra
of
Ch
u
spaces,
these
could
b
e
augmen
ted
b
y
others.
In
addition,
while
w
e
presen
ted
a
n
um
b
er
of
iden
tities,
it
w
ould
b
e
nice
to
kno
w
all
the
p
ossible
iden
tities
b
et
w
een
Ch
u
spaces,
giv
en
b
y
a
set
of
axioms.
Logic
for
Ch
u
spaces.
While
w
e
ha
v
e
indicated
that
linear
logic
is
a
logic
for
Ch
u
spaces,
it
is
not
en
tirely
satisfactory
for
v
arious
reasons.
It
is
not
complete,
as


CHAPTER
.
FUTURE
RESEAR
CH

there
are
theorems
whic
h
are
true
for
Ch
u
spaces
whic
h
are
not
v
alid
in
linear
logic.
Th
us
w
e
can
either
dev
elop
a
logic
whic
h
w
ould
matc
h
the
logic
of
Ch
u
spaces,
or
strengthen
the
denition
of
a
Ch
u
space
theorem
to
eliminate
all
non-theorems
of
linear
logic.
Secondly
,
linear
logic
do
es
not
ha
v
e
man
y
of
the
op
erators
in
the
algebra
of
Ch
u
spaces.
So
if
w
e
wish
to
use
linear
logic
as
a
v
erication
logic,
it
m
ust
b
e
augmen
ted
to
b
e
able
to
pro
v
e
form
ulas
con
taining
these
op
erators.
Applications.
The
algebra
of
Ch
u
spaces
suggests
a
p
o
w
erful
sp
ecication
lan-
guage,
as
w
as
indicated
in
c
hapter
.
A
language
with
its
seman
tics
based
on
Ch
u
spaces
w
ould
b
e
a
v
ery
useful
to
ol,
and
should
mak
e
sp
ecication
and
v
erication
of
concurren
t
systems
a
lot
easier
|
this
is
the
goal
for
whic
h
Ch
u
spaces
w
ere
constructed.

Biblio
graph
y
[Bar	]
M.
Barr.
-Autonomous
c
ate
gories,
LNM
.
Springer-V
erlag,
		.
[Bar	]
M.
Barr.
-Autonomous
categories
and
linear
logic.
Math
Structur
es
in
Comp.
Sci.,
(),
		.
[Ber]
Claude
Berge.
Gr
aphs
and
Hyp
er
gr
aphs
(tr
ansl:
E.
Minieka).
North-
Holland,
Amsterdam,
	.
[Bes]
E.
Best.
Cosy:
its
relation
to
nets
and
csp.
In
Petri
Nets:
Applic
ations
and
R
elationships
to
Other
Mo
dels
of
Concurr
ency,
Advanc
es
in
Petri
Nets
	,
LNCS
,
Bad-Honnef,
Septem
b
er
	.
Springer-V
erlag.
[BG	0]
C.
Bro
wn
and
D.
Gurr.
A
categorical
linear
framew
ork
for
P
etri
nets.
In
J.
Mitc
hell,
editor,
L
o
gic
in
Computer
Scienc
e,
pages
0{.
IEEE
Computer
So
ciet
y
,
June
		0.
[BGdP	]
C.
Bro
wn,
D.
Gurr,
and
V.
de
P
aiv
a.
A
linear
sp
ecication
language
for
P
etri
nets.
T
ec
hnical
Rep
ort
D
AIMI
PB-,
Computer
Science
Depart-
men
t,
Aarh
us
Univ
ersit
y
,
Octob
er
		.
[BHR]
S.D.
Bro
ok
es,
C.A.R.
Hoare,
and
A.D.
Rosco
e.
A
theory
of
comm
unicat-
ing
sequen
tial
pro
cesses.
Journal
of
the
A
CM,
:0{		,
	.
[BV	]
J.C.M.
Baeten
and
F.W.
V
aandrager.
An
algebra
for
pro
cess
creation.
A
cta
Informatic
a,
	():0{,
		.
[Cas	]
Ross
Casley
.
On
the
Sp
e
cic
ation
of
Concurr
ent
Systems.
PhD
thesis,
Stanford
Univ
ersit
y
,
Jan
uary
		.


BIBLIOGRAPHY

[CCMP	]
R.T
Casley
,
R.F.
Crew,
J.
Meseguer,
and
V.R.
Pratt.
T
emp
oral
struc-
tures.
Math.
Structur
es
in
Comp.
Sci.,
():	{,
July
		.
[Cre	]
R.F.
Crew.
Metric
Pr
o
c
ess
Mo
dels.
PhD
thesis,
Stanford
Univ
ersit
y
,
Decem
b
er
		.
[DDNM]
P
.
Degano,
R.
De
Nicola,
and
U.
Mon
tanari.
A
distributed
op
erational
seman
tics
for
CCS
based
on
condition/ev
en
t
systems.
A
cta
Informatic
a,
(/):	{	,
Octob
er
	.
[Dev]
R.
Devillers.
On
the
denition
of
a
bisim
ulation
notion
based
on
partial
w
ords.
Petri
Net
Newsletter,
	:{	,
	.
[dP	]
V.
de
P
aiv
a.
The
dialectica
categories.
In
Cate
gories
in
Computer
Scienc
e
and
L
o
gic,
v
olume
	
of
Contemp
or
ary
Mathematics,
pages
{,
held
June
	,
Boulder,
Colorado,
		.
[Dro	]
M.
Droste.
Ev
en
t
structures
and
domains.
The
or
etic
al
Computer
Scienc
e,
:{,
		.
[D
W0]
W.
D
orer
and
D.A.
W
aller.
A
category-theoretical
approac
h
to
h
yp
er-
graphs.
A
r
chives
of
Mathematics,
():{	
,
	0.
[GG	]
R.J.
v
an
Glabb
eek
and
U.
Goltz.
Equiv
alence
notions
for
concurren
t
sys-
tems
and
renemen
t
of
actions.
In
A.
Kreczmar
and
G.
Mirk
o
wsk
a,
edi-
tors,
Pr
o
c.
Conf.
on
Mathematic
al
F
oundations
of
Computer
Scienc
e,
v
ol-
ume
	
of
L
e
ctur
e
Notes
in
Computer
Scienc
e,
pages
{.
Springer-
V
erlag,
		.
[Gir]
J.-Y.
Girard.
Linear
logic.
The
or
etic
al
Computer
Scienc
e,
0:{0,
	.
[Gis]
J.L.
Gisc
her.
The
equational
theory
of
p
omsets.
The
or
etic
al
Computer
Scienc
e,
:		{,
	.
[GJ	]
E.
Goubault
and
T.P
.
Jensen.
Homology
of
higher
dimensional
automata.
In
Pr
o
c.
of
CONCUR'	,
LNCS
0,
pages
{,
Ston
ybro
ok,
New
Y
ork,
August
		.
Springer-V
erlag.

BIBLIOGRAPHY

[GP]
H.
Gaifman
and
V.R.
Pratt.
P
artial
order
mo
dels
of
concurrency
and
the
computation
of
functions.
In
Pr
o
c.
nd
A
nnual
IEEE
Symp.
on
L
o
gic
in
Computer
Scienc
e,
pages
{,
Ithaca,
NY,
June
	.
[GP	]
V.
Gupta
and
V.R.
Pratt.
Gates
accept
concurren
t
b
eha
vior.
In
Pr
o
c.
th
A
nn.
IEEE
Symp.
on
F
oundations
of
Comp.
Sci.,
pages
{,
No
v
em
b
er
		.
[Gra]
J.
Grab
o
wski.
On
partial
languages.
F
undamenta
Informatic
ae,
IV.:{
	,
	.
[Gun	]
J.
Guna
w
ardena.
Geometric
logic,
causalit
y
and
ev
en
t
structures.
In
J.
C.
M.
Baeten
and
J.
F.
Gro
ote,
editors,
CONCUR'	
-
nd
Inter-
national
Confer
enc
e
on
Concurr
ency
The
ory,
pages
{0.
Springer
LNCS
,
		.
[Gun	]
J.
Guna
w
ardena.
Causal
automata.
The
or
etic
al
Computer
Scienc
e,
0:{,
		.
[Gup	]
V.
Gupta.
Concurren
t
kripk
e
structures.
In
Pr
o
c
e
e
dings
of
the
North
A
meric
an
Pr
o
c
ess
A
lgebr
a
Workshop,
Cornel
l
CS-TR-	-	,
August
		.
[GV]
R.J.
v
an
Glabb
eek
and
F.W.
V
aandrager.
P
etri
net
mo
dels
for
algebraic
theories
of
concurrency
.
In
Pr
o
c.
P
ARLE,
II,
LNCS
	,
pages
{.
Springer-V
erlag,
	.
[Hoa]
C.A.R.
Hoare.
Comm
unicating
sequen
tial
pro
cesses.
Communic
ations
of
the
A
CM,
():{
,
August
	.
[Hoa]
C.A.R.
Hoare.
Communic
ating
Se
quential
Pr
o
c
esses.
Pren
tice-Hall,
	.
[JNW	]
A.
Jo
y
al,
M.
Nielsen,
and
G.
Winsk
el.
Bisim
ulation
and
op
en
maps.
In
M.Y.V
ardi,
editor,
L
o
gic
in
Computer
Scienc
e,
pages
{.
IEEE
Computer
So
ciet
y
,
July
		.

BIBLIOGRAPHY

[Joh]
P
.T.
Johnstone.
Stone
Sp
ac
es.
Cam
bridge
Univ
ersit
y
Press,
	.
[LR]
P
.E.
Lauer
and
R.H.Campb
ell.
F
ormal
seman
tics
of
a
class
of
high-
lev
el
primitiv
es
for
co
ordinating
concurren
t
pro
cesses.
A
cta
Informatic
a,
:	{,
	.
[LS	]
Y.
Lafon
t
and
T.
Streic
her.
Games
seman
tics
for
linear
logic.
In
Pr
o
c.
th
A
nnual
IEEE
Symp.
on
L
o
gic
in
Computer
Scienc
e,
pages
{	,
Amsterdam,
July
		.
[Mac]
S.
Mac
Lane.
Cate
gories
for
the
Working
Mathematician.
Springer-
V
erlag,
	.
[Mil0]
R.
Milner.
A
Calculus
of
Communic
ating
Systems,
LNCS
	.
Springer-
V
erlag,
	0.
[Mil]
R.
Milner.
Calculi
for
sync
hron
y
and
async
hron
y
.
The
or
etic
al
Computer
Scienc
e,
:{0,
	.
[Mil	]
R.
Milner.
Communic
ation
and
Concurr
ency.
Pren
tice-Hall,
		.
[MM	0]
J.
Meseguer
and
U.
Mon
tanari.
P
etri
nets
are
monoids.
Information
and
Contr
ol,
():0{,
Octob
er
		0.
[MMT]
R.
McKenzie,
G.
McNult
y
,
and
W.
T
a
ylor.
A
lgebr
as,
L
attic
es,
V
arieties,
V
olume
I.
W
adsw
orth
&
Bro
oks/Cole,
Mon
terey
,
CA,
	.
[NPW]
M.
Nielsen,
G.
Plotkin,
and
G.
Winsk
el.
P
etri
nets,
ev
en
t
structures,
and
domains,
part
I.
The
or
etic
al
Computer
Scienc
e,
,
	.
[OGG]
E.-R.
Olderog,
U.
Goltz,
and
R.J.
v
an
Glabb
eek.
Com
bining
comp
osi-
tionalit
y
and
concurrency
,
summary
of
a
GMDw
orkshop,
K
onigswin
ter,
Marc
h
	.
Arb
eitspapiere
der
GMD
0,
Gesellsc
haft
f

ur
Mathematik
und
Daten
v
erarb
eitung,
	.

BIBLIOGRAPHY

[P
ar]
D.
P
ark.
Concurrency
and
automata
on
innite
sequences.
In
Pr
o
c.
The-
or
etic
al
Computer
Scienc
e,
LNCS
0,
pages
{.
Springer-V
erlag,
	.
[P
eta]
C.A.
P
etri.
F
undamen
tals
of
a
theory
of
async
hronous
information
o
w.
In
Pr
o
c.
IFIP
Congr
ess
,
pages
{	0,
Munic
h,
	.
North-Holland,
Amsterdam.
[P
etb]
C.A.
P
etri.
Kommunikation
mit
A
utomaten.
PhD
thesis,
Sc
hriften
des
Institutes
f

ur
Instrumen
telle
Mathematik,
	.
[Plo	a]
G.D.
Plotkin.
Notes
on
ev
en
t
structures
and
c
h
u.
Man
uscript
a
v
ailable
as
pub/gdp.dvi
b
y
anon
ymous
FTP
from
Bo
ole.Stanford.EDU,
F
ebruary
		.
[Plo	b]
G.D.
Plotkin.
Notes
on
the
c
h
u
construction
and
recursion.
Man
uscript
a
v
ailable
as
pub/gdp.dvi
b
y
anon
ymous
FTP
from
Bo
ole.Stanford.EDU,
F
ebruary
		.
[Plo	c]
G.D.
Plotkin.
P
ersonal
comm
unication.
July
		.
[PP	]
G
Mic
hele
Pinna
and
Axel
P
oigne.
On
the
nature
of
ev
en
ts.
In
Pr
o
c.
th
Symp
osium
on
Mathematic
al
F
oundations
of
Computer
Scienc
e,
LNCS
	,
		.
[Pra]
V.R.
Pratt.
On
the
comp
osition
of
pro
cesses.
In
Pr
o
c
e
e
dings
of
the
Ninth
A
nnual
A
CM
Symp
osium
on
Principles
of
Pr
o
gr
amming
L
anguages,
Jan-
uary
	.
[Pra]
V.R.
Pratt.
Mo
deling
concurrency
with
partial
orders.
Int.
J.
of
Par
al
lel
Pr
o
gr
amming,
():{,
F
ebruary
	.
[Pra	]
V.R.
Pratt.
Mo
deling
concurrency
with
geometry
.
In
Pr
o
c.
th
A
nn.
A
CM
Symp
osium
on
Principles
of
Pr
o
gr
amming
L
anguages,
pages
{
,
Jan
uary
		.

BIBLIOGRAPHY
	
[Pra	a]
V.R.
Pratt.
Arithmetic
+
logic
+
geometry
=
concurrency
.
In
Pr
o
c.
First
L
atin
A
meric
an
Symp
osium
on
The
or
etic
al
Informatics,
LNCS
,
pages
0{,
S~
ao
P
aulo,
Brazil,
April
		.
Springer-V
erlag.
[Pra	b]
V.R.
Pratt.
The
dualit
y
of
time
and
information.
In
Pr
o
c.
of
CON-
CUR'	,
LNCS
0,
pages
{,
Ston
ybro
ok,
New
Y
ork,
August
		.
Springer-V
erlag.
[Pra	c]
V.R.
Pratt.
Ev
en
t
spaces
and
their
linear
logic.
In
AMAST'	:
A
lgebr
aic
Metho
dolo
gy
and
Softwar
e
T
e
chnolo
gy,
W
orkshops
in
Computing,
pages
{,
Io
w
a
Cit
y
,
		.
Springer-V
erlag.
[Pra	]
V.R.
Pratt.
The
second
calculus
of
binary
relations.
In
Pr
o
c
e
e
dings
of
MF
CS'	,
pages
{,
Gda

nsk,
P
oland,
		.
Springer-V
erlag.
[Pri0]
H.A.
Priestley
.
Represen
tation
of
distributiv
e
lattices.
Bul
l.
L
ondon
Math.
So
c.,
:{	0,
	0.
[PS]
G.D.
Plotkin
and
M.B.
Sm
yth.
The
category-theoretic
solution
of
re-
cursiv
e
domain
equations.
SIAM
Journal
on
Computing,
():{,
	.
[Rei]
W.
Reisig.
Petri
Nets:
A
n
Intr
o
duction.
Springer-V
erlag,
	.
[See	]
R.A.G
Seely
.
Linear
logic,
-autonomous
categories
and
cofree
algebras.
In
Cate
gories
in
Computer
Scienc
e
and
L
o
gic,
v
olume
	
of
Contemp
or
ary
Mathematics,
pages
{,
held
June
	,
Boulder,
Colorado,
		.
[vG	0]
R.
v
an
Glabb
eek.
Comp
ar
ative
Concurr
ency
Semantics
and
R
enement
of
A
ctions.
PhD
thesis,
V
rije
Univ
ersiteit
te
Amsterdam,
Ma
y
		0.
[Win]
G.
Winsk
el.
Ev
en
t
structures.
In
Petri
Nets:
Applic
ations
and
R
ela-
tionships
to
Other
Mo
dels
of
Concurr
ency,
A
dvanc
es
in
Petri
Nets
	,
LNCS
,
Bad-Honnef,
Septem
b
er
	.
Springer-V
erlag.

BIBLIOGRAPHY
	0
[Win]
G.
Winsk
el.
A
category
of
lab
elled
Petri
nets
and
comp
ositional
pro
of
system.
In
Pr
o
c.
r
d
A
nnual
Symp
osium
on
L
o
gic
in
Computer
Scienc
e,
Edin
burgh,
	.
Computer
So
ciet
y
Press.
View publication stats

