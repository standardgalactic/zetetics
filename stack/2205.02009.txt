arXiv:2205.02009v4  [quant-ph]  9 Sep 2022
This work is licensed under the
Creative Commons Attribution License.
Complete ﬂow-preserving rewrite rules for MBQC patterns
with Pauli measurements
Tommy McElvanney
School of Computer Science
University of Birmingham
txm639@student.bham.ac.uk
Miriam Backens
School of Computer Science
University of Birmingham
m.backens@cs.bham.ac.uk
In the one-way model of measurement-based quantum computation (MBQC), computation proceeds
via measurements on some standard resource state. So-called ﬂow conditions ensure that the overall
computation is deterministic in a suitable sense, with Pauli ﬂow being the most general of these.
Existing work on rewriting MBQC patterns while preserving the existence of ﬂow has focused on
rewrites that reduce the number of qubits.
In this work, we show that introducing new Z-measured qubits, connected to any subset of the
existing qubits, preserves the existence of Pauli ﬂow. Furthermore, we give a unique canonical form
for stabilizer ZX-diagrams inspired by recent work of Hu & Khesin [17]. We prove that any MBQC-
like stabilizer ZX-diagram with Pauli ﬂow can be rewritten into this canonical form using only rules
which preserve the existence of Pauli ﬂow and that each of these rules can be reversed while also
preserving the existence of Pauli ﬂow. Hence we have complete graphical rewriting for MBQC-like
stabilizer ZX-diagrams with Pauli ﬂow.
1
Introduction
The one-way model of measurement-based quantum computation (MBQC) shows how to implement
quantum computations by successive adaptive single-qubit measurements on a resource state [23], largely
without using any unitary operations. This contrasts with the more commonly-used circuit model and
has applications in server-client scenarios as well as for certain quantum error-correcting codes.
An MBQC computation is given as a pattern, which speciﬁes the resource state – usually a graph state
– and a sequence of measurements of certain types [12]. As measurements are non-deterministic, future
measurements need to be adapted depending on the outcomes of past measurements to obtain an overall
deterministic computation. Yet not every pattern can be implemented deterministically. Sufﬁcient (and
in some cases necessary) criteria for determinism are given by the different kinds of ﬂow, which deﬁne
a partial order on the measured qubits and give instructions for how to adapt the future computation if a
measurement yields the undesired outcome [11, 8] (cf. Section 2.3).
In addition to the applications mentioned above, the ﬂexible structure of MBQC patterns is also
useful as a theoretical tool. For example, translations between circuits and MBQC patterns have been
used to trade off circuit depth versus qubit number [7] or to reduce the number of T-gates in a Clifford+T
circuit [20]. When translating an MBQC pattern (back) into a circuit, it is important that the pattern still
have ﬂow, as circuit extraction algorithms rely on ﬂow [11, 21, 14, 4]
This work uses the ZX-calculus, a graphical language for representing and reasoning about quantum
computations, which is convenient for representing both quantum circuits and MBQC patterns, and for
translating between the two. ZX-calculus diagrams directly corresponding to MBQC-patterns are said
to be in MBQC form. The ZX-calculus has various complete sets of rewrite rules, meaning any two
diagrams that represent the same linear map can be transformed into each other entirely graphically

2
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
[2, 18, 22]. Yet these rewrite rules do not necessarily preserve the existence of a ﬂow, nor even the
MBQC-form structure. Thus, circuit optimisation using MBQC and the ZX-calculus relies on proofs that
certain diagram rewrites do preserve both [14, 4]. Work so far has focused on rewrite rules that maintain
or reduce the number of qubits, which ﬁnd direct application in T-count optimisation [14]. Nevertheless,
it is sometimes desirable to increase the number of qubits in an MBQC pattern while preserving the
existence of ﬂow, such as for more involved optimisation strategies [25] or for obfuscation.
In this paper, we begin investigating rewrite rules that preserve the existence of ﬂow while increasing
the number of qubits. In particular, we prove that a rewrite rule that introduces a new Z-measured
qubit preserves ﬂow. Most work on ﬂow-preserving rewriting so far has been done in the context of
generalised ﬂow, also known as gﬂow [8], in either its simple [14] or extended version [4]. Yet with the
qubit introduction rule, the setting shifts to that of Pauli ﬂow [8, 24] since preserving the interpretation
of the diagram requires that the new qubit be measured in the Pauli-Z basis.
We show that adding this one new rule to the known ﬂow-preserving rewrite rules sufﬁces to get
completeness for MBQC-form diagrams within the stabilizer fragment of the ZX-calculus. To achieve
completeness, we introduce a new unique normal form for stabilizer ZX-calculus diagrams, which is
close to the MBQC form. This normal form is based on work by Hu and Khesin [17] using the stabilizer
graph notation of Elliott, Eastin and Caves [16], like the original stabilizer ZX-calculus completeness
result [2]. As the proof by Hu and Khesin is very difﬁcult to follow and contains at least one incorrect
claim, we give an alternative uniqueness proof using the language of afﬁne spaces.
The remainder of this paper is structured as follows: in Section 2, we introduce the ZX-calculus,
measurement-based quantum computing, and existing ﬂow-preserving rewrite rules. Section 3 contains
the new canonical form and its uniqueness proof. Section 4 presents the new ﬂow-preserving rewrite rule
and the completeness proof for the stabilizer MBQC-form fragment. The conclusions are in Section 5.
2
Preliminaries
In this section, we give an overview of the ZX-calculus and then use it to introduce measurement-based
quantum computing. We discuss the notion of ﬂow that will be used in this paper and some existing
rewrite rules which preserve the existence of this ﬂow.
2.1
The ZX-calculus
The ZX-calculus is a diagrammatic language for reasoning about quantum computations. We will pro-
vide a short introduction here; for a more thorough overview, see [27, 10].
A ZX-diagram consists of spiders and wires. Diagrams are read from left to right: wires entering a
diagram from the left are inputs while wires exiting the diagram on the right are outputs, like in the quan-
tum circuit model. ZX-diagrams compose in two distinct ways: horizontal composition, which involves
connecting the output wires of one diagram to the input wires of another, and vertical composition (or
the tensor product), which just involves drawing one diagram vertically above the other. The linear map
corresponding to a ZX-diagram D is denoted by JDK.
ZX-diagrams are generated by two families of spiders which may have any number of inputs or
outputs, corresponding to the Z and X bases respectively. Z-spiders are drawn as green dots and X-
spiders as red dots; with m inputs, n outputs, and using (·)⊗k to denote a k-fold tensor power, we have:
t
α
...
...
|
= |0⟩⊗n ⟨0|⊗m +eiα |1⟩⊗n ⟨1|⊗m
t
α
...
...
|
= |+⟩⊗n ⟨+|⊗m +eiα |−⟩⊗n ⟨−|⊗m

T. McElvanney & M. Backens
3
α
β
...
...
...
...
=
α +β
...
...
α
=
α
=
=
π
α
...
...
−α
...
...
=
π
π
π
α
...
...
=
=
...
...
...
...
...
...
...
...
...
...
Figure 1: A complete set of rewrite rules for the scalar-free stabilizer ZX-calculus. Each rule also holds
with the colours or the directions reversed.
Spiders with exactly one input and output are unitary, in particular J
α
K = |0⟩⟨0|+eiα |1⟩⟨1| = Zα
and J
α
K = |+⟩⟨+|+eiα |−⟩⟨−| = Xα.
Two diagrams D and D′ are said to be equivalent if JDK = zJD′K for some non-zero complex number
z. For the rest of the paper, whenever we write a diagram equality we will mean equality up to some
global scalar in this way. For treatments of the ZX-calculus which do not ignore scalars see [3] for the
stabilizer fragment, [18] for the Clifford+T fragment and [19, 22] for the full ZX-calculus.
The Hadamard gate H = |+⟩⟨0| + |−⟩⟨1| ∼= Z π
2 ◦X π
2 ◦Z π
2 will be used throughout the paper (where
∼= denotes equality up to non-zero scalar factor). It has two common syntactic sugars – a yellow square,
or a blue dotted line – with the latter only used between spiders:
π
2
π
2
π
2
=
=
The ZX-calculus is equipped with a set of rewrite rules which can be used to transform a ZX-diagram
into another diagram representing the same linear map. As this paper focuses on stabilizer quantum
mechanics, we give a rule set for the stabilizer ZX-calculus in Figure 1. Together with the deﬁnition
of
, this set of rewrite rules is complete: any two stabilizer ZX-diagrams which correspond (up to
non-zero scalar factor) to the same linear map can be rewritten into one another using these rules [2].
2.2
Measurement-based Quantum computation
Measurement-based Quantum computation (MBQC) is a particularly interesting model of quantum com-
putation with no classical analogue. In MBQC, one ﬁrst constructs a highly entangled resource state that
can be independent of the speciﬁc computation that one wants to perform (only depending on the ‘size’
of the computation) by preparing qubits in the |+⟩state and applying CZ-gates to certain pairs of qubits.
The computation then proceeds by performing single qubit measurements in a speciﬁed order. MBQC
is a universal model for quantum computation – any computation can be performed by choosing an
appropriate resource state and then performing a certain combination of measurements on said state.
Measurement-based computations are traditionally expressed as measurement patterns, which use
a sequence of commands to describe how the resource state is constructed and how the computation
proceeds [12]. As the resource states are graph states, a graphical representation of MBQC protocols can
be more intuitive; we shall therefore introduce MBQC with ZX-diagrams.
Deﬁnition 2.1 ([15]). A graph state diagram is a ZX-diagram where each vertex is a (phase-free) green
spider, each edge connecting spiders has a Hadamard gate on it, and there is a single output wire incident
on each vertex. A ZX-diagram is in graph state with local Clifford (GS-LC) form if it is a graph state up

4
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
operator
⟨+XY,α|i
⟨+XZ,α|i
⟨+YZ,α|i
⟨+X,0|i
⟨+Y,0|i
⟨+Z,0|i
⟨+X,π|i
⟨+Y,π|i
⟨+Z,π|i
diagram
α(i)
π
2
α(i)
α(i)
π
2
π
−π
2
π
Table 1: MBQC measurement effects in Dirac notation and their corresponding ZX-diagrams
to single qubit Clifford operators on the input and output wires. It is in reduced GS-LC (rGS-LC) form if
those single-qubit Clifford operators are all in the set {
kπ
2
,
± π
2
π
2
} for some k ∈Z4 and if no two
qubits with red phases in their vertex operator are connected to each other.
Deﬁnition 2.2. [4, Deﬁnitions 2.18, 2.23] A ZX-diagram is in MBQC-form if it consists of a graph state
diagram in which each vertex of the graph may furthermore be connected to an input (in addition to its
output), and a measurement effect instead of its output. A ZX-diagram is in MBQC+LC-form if it is in
MBQC-form up to single qubit Clifford operators on the input and output wires.
MBQC restricts the allowed single-qubit measurements to three planes of the Bloch sphere: those
spanned by the eigenstates of two Pauli matrices, called the XY, YZ and XZ planes. Each time a qubit u
is measured in a plane λ(u) at an angle α, one may obtain either the desired outcome, denoted ⟨+λ(u),α|,
or the undesired outcome ⟨−λ(u),α| = ⟨+λ(u),α+π|. Measurements where the angle is an integer multiple
of π
2 are Pauli measurements; the corresponding measurement type is denoted by simply X, Y, or Z. The
ZX-diagram corresponding to each (desired) measurement outcome is given in Table 1. The structure of
an MBQC protocol is formalised as follows.
Deﬁnition 2.3. A labelled open graph is a tuple Γ = (G,I,O,λ), where G = (V,E) is a simple undi-
rected graph, I ⊆V is a set of input vertices, O ⊆V is a set of output vertices, and λ : V \ O →
{X,Y,Z,XY,XZ,YZ} assigns a measurement plane or Pauli measurement to each non-output vertex.
In this paper, we consider stabilizer MBQC diagrams: MBQC-form diagrams where every non-
output qubit has a Pauli measurement applied to it, i.e. where λ : V \O →{X,Y,Z}.
2.3
Pauli ﬂow
Measurement-based computations are inherently probabilistic because measurements are probabilistic.
Computations can be made deterministic overall (up to Pauli corrections on the outputs) by tracking
which measurements result in undesired outcomes and then correcting for these by adapting future mea-
surements. A sufﬁcient (and in some cases necessary) condition for this to be possible on a given labelled
open graph is Pauli ﬂow. In the following, P(S) denotes the powerset of a set S.
Deﬁnition 2.4 ([8, Deﬁnition 5]). A labelled open graph (G,I,O,λ) has Pauli ﬂow if there exists a map
p : V \O →P(V \I) and a partial order ≺over V such that for all u ∈V \O,
1. if v ∈p(u), v ̸= u and λ(v) ̸∈{X,Y}, then u ≺v.
2. if v ∈OddG(p(u)), v ̸= u and λ(v) ̸∈{Y,Z}, then u ≺v.
3. if ¬(u ≺v), u ̸= v and λ(v) = Y, then v ∈p(u) ⇐⇒v ∈OddG(p(u)).
4. if λ(u) = XY, then u ̸∈p(u) and u ∈OddG(p(u)).
5. if λ(u) = XZ, then u ∈p(u) and u ∈OddG(p(u)).
6. if λ(u) = YZ, then u ∈p(u) and u ̸∈OddG(p(u)).
7. if λ(u) = X, then u ∈OddG(p(u)).
8. if λ(u) = Z, then u ∈p(u).
9. if λ(u) = Y then either u ∈p(u) and u ̸∈OddG(p(u)) or u ̸∈p(u) and u ∈OddG(p(u)).

T. McElvanney & M. Backens
5
Here, the partial order restricts the time order in which the qubits need to be measured. The set p(u)
denotes qubits that are modiﬁed by Pauli-X to compensate for an undesired measurement outcome on u,
OddG(p(u)) denotes the set of vertices that are modiﬁed by Pauli-Z.
Pauli ﬂow is a sufﬁcient condition for strong, stepwise and uniform determinism: this means all
branches of the computation should implement the same linear operator up to a phase, any interval of
the computation should be deterministic on its own, and the computation should be deterministic for
all choices of measurement angles that satisfy λ [8, p. 5]. Pauli ﬂow (and related ﬂow conditions)
are particularly interesting from a ZX-calculus perspective as there are polynomial-time algorithms for
extracting circuits from MBQC-form ZX-diagrams with ﬂow [14, 4, 24], while circuit extraction from
general ZX-diagrams is #P-hard [5].
2.4
Existing ﬂow-preserving rewrite rules
The basic ZX-calculus rewrite rules in Figure 1 do not generally preserve even the MBQC-form structure
of a ZX-calculus diagram. Yet there are some more complex derived rewrite rules that are known to pre-
serve both the MBQC-form structure and the existence of a ﬂow. These rules were previously considered
in the context of gﬂow [14] and extended gﬂow [4]; the Pauli-ﬂow preservation proofs are due to [24].
The simplest of these rules is Z-deletion:
Lemma 2.5 ([24, Lemma D.6]). Deleting a Z-measured vertex preserves the existence of Pauli ﬂow.
...
...
...
...
aπ
=
...
...
aπ
aπ
aπ
aπ
...
...
...
...
...
...
Other rewrite rules are based around quantum generalisations of two graph-theoretic operations.
Deﬁnition 2.6. Let G = (V,E) be a graph and u ∈V. The local complementation of G about u is
the operation which maps G to G ⋆u := (V,E a{(b,c)|(b,u),(c,u) ∈E and b ̸= c}), where a is the
symmetric difference operator given by AaB = (A ∪B) \(A ∩B). The pivot of G about the edge (u,v)
is the operation mapping G to the graph G∧uv := G⋆u⋆v⋆u.
Local complementation keeps the vertices of the graph the same but toggles some edges: for each pair
of neighbours of u, i.e. v,v′ ∈NG(u), there is an edge connecting v and v′ in G⋆u if and only if there is no
edge connecting v and v′ in G. Pivoting is a series of three local complementations, but has some special
properties which make it worth distinguishing. It interchanges the vertices u and v and complements (or
‘toggles’) the connectivity between the following three subsets of vertices [6, Section 8]:
• NG(u)\({v}∪NG(v)), the neighbours of u that are neither neighbours of v nor v itself.
• NG(v)\({u}∪NG(u)), the neighbours of v that are neither neighbours of u nor u itself.
• NG(u)∩NG(v), the common neighbours of u and v.
From the above characterisation we see that pivoting is symmetric, i.e. G∧uv = G∧vu.
Both local complementation and pivoting give rise to operations on MBQC-form diagrams which
preserve the MBQC form as well as the existence of Pauli ﬂow (after some simple merging of single-
qubit Cliffords into measurement effects, cf. [4, Section 4.2]). We illustrate the operations with examples
as they are difﬁcult to express in ZX-calculus in generality.
Lemma 2.7 ([24, Lemma D.12]). A local complementation about a vertex u preserves the existence of
Pauli ﬂow.

6
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
...
u
=
...
−π
2
π
2
π
2
π
2
u
Lemma 2.8 ([24, Lemma D.21]). A pivot about an edge (u,v) preserves the existence of Pauli ﬂow.
=
v
u
u
v
π
π
Observation 2.9. Lemmas 2.7 and 2.8 provide their own inverses since four successive local comple-
mentations about the same vertex, or two successive pivots about the same edge, leave the diagram
invariant. Two successive local complementations correspond to the π-copy rule.
While the inverse of the Z-deletion rule of Lemma 2.5 straightforwardly preserves the MBQC-form,
it is not obvious that it also preserves the existence of Pauli ﬂow. In Section 4.1, we will prove that this
is indeed the case.
3
A canonical form for stabilizer state diagrams
Stabilizer state diagrams in the ZX-calculus have a pseudo-normal form: the rGS-LC form, which arises
from the representation of a stabilizer state in terms of a graph state and local Clifford operators [2].
Here, we propose a new pseudo-normal form, based on the representation of a stabilizer state in
terms of its afﬁne support and a phase polynomial [1]. Like the rGS-LC form, this is closely related to
the stabilizer graphs of Elliott et al. [16] but it translates them into the ZX-calculus differently. The new
normal form allows (and in most cases requires) both green and red spiders, meaning it is not strictly
‘graph-like’.
Based on a recent proposal by Hu and Khesin [17], we then show how to make this new pseudo-
normal form unique, yielding a canonical form for stabilizer state diagrams in the ZX-calculus1. In the
process, we correct a ﬂaw in the uniqueness proof of Hu and Khesin, and simplify the arguments by
making use of formalisms and results from the literature about holant problems.
We ﬁrst prove some lemmas about the algebraic representation of stabilizer states which will be use-
ful in proving uniqueness of the canonical form. Next we introduce to the new pseudo-normal ‘phase
polynomial form’ and show how it corresponds to stabilizer states in phase-polynomial representation.
Finally, we deﬁne the canonical form, prove its uniqueness, and give an algorithm for rewriting dia-
grams into canonical form. Throughout this section, diagrams contain red spiders and thus are not in
MBQC+LC-form; yet by colour changing all of the red vertices and unfusing phases these can straight-
forwardly be transformed into MBQC+LC-form diagrams.
1At QCTIP 2022, we learned that an analogous result was independently derived by John van de Wetering [28].

T. McElvanney & M. Backens
7
3.1
Stabilizer states in terms of afﬁne support and phase polynomial
It has long been known [13, 26] that an n-qubit stabilizer state can be written (up to normalisation) as
∑
x∈A
il(x)(−1)q(x) |x⟩,
(1)
where A is an afﬁne subspace of Zn
2, l(x) = ∑j djxj for some ﬁxed dj ∈Z2 is a linear function computed
modulo 2, and q(x) = ∑j<k cjkxjxk + ∑j cjxj for some ﬁxed cjk,cj ∈Z2 is a quadratic function. The
functions l and q together form a phase polynomial for the state, while A determines the support.
Assuming dim(A) = n −m, the elements of the afﬁne space A are the solutions to a set of linear
equations Rx = b, where R is an m × n binary matrix of rank m (with 0 ≤m ≤n) and b ∈Zm
2 . Each
component of x is considered a variable. With respect to this linear system, the variables x1,...,xn can
be partitioned (not generally uniquely) into a set of (n −m) free variables and a set of m dependent
variables such that every assignment of values to the free variables induces exactly one assignment of
values to the dependent variables which satisﬁes all the linear equations. This follows from a standard
process of solving the system of linear equations, which also yields a linear equation in terms of the
free variables for each dependent variable. In the following, we will denote the set of indices by [n] :=
{1,2,...,n} and the free variables by a subset F ⊆[n] of the indices, and write the dependent variables
as xj = aj ⊕L
k∈F ajkxk, where aj,ajk ∈Z2 and the sum is modulo 2. If ajk = 1, we say the variable xj
depends on xk.
It will be useful to give a canonical choice of free variables, this is inspired by Hu and Khesin’s nor-
mal form for stabilizer states [17], and will lead us to an analogous normal form for stabilizer diagrams.
Deﬁnition 3.1. We call the result of the following procedure the canonical set of free variables. Start with
x1 and consider the variables in ascending order. For each j, if the value of xj is ﬁxed by the requirement
to satisfy Rx = b given values for all free variables among x1,...,xj−1 then we say that xj is dependent.
Otherwise we say that xj is free.
Lemma 3.2. Given an afﬁne space A, the canonical set F is the unique set of free variables with the
following property: if xj depends on the free variable xk, then k < j.
Proof. Let F′ be another set of free variables for A which also has the property that if xj is a dependent
variable and depends on the free variable xk, then k < j. In other words, for each j ∈[n]\F′, there is an
equation xj = aj +∑k< j ajkxk, where furthermore ajk = 0 if k /∈F′.
Now suppose for a contradiction that F ̸= F′. The two sets must have the same size |F| = |F′| =
dim(A). Thus, there must be a smallest element j ∈F such that j /∈F′. Then F′ induces an equation
xj = aj ⊕
M
k∈F′, k< j
ajkxk.
(2)
Suppose ajk = 1 only if k ∈F. Then the value of xj is ﬁxed by the free variables of lower index in F, so
j should not be free according to Deﬁnition 3.1, a contradiction.
Otherwise, there exists some k′ /∈F such that ajk′ = 1. But then by the deﬁnition of F, there exists
some equation xk′ = bk′ ⊕L
ℓ∈F, ℓ<k′ bk′ℓ. Thus we can substitute for xk′ in (2) while preserving the
property that xj only depends on variables of lower index. The process eliminates one variable which is
not in F from the decomposition and does not introduce any new variables which are not in F. Hence
repeated application will terminate, at which point we have an equation that ﬁxes xj from only variables
in F of index less than j. Again, this means j should not be in F, a contradiction.
Hence we must have F = F′.

8
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
As pointed out in the holant literature, it is possible to express the functions l and q solely in terms
of the free variables, while keeping their other properties the same [9, Deﬁnition 8]. We give a proof in
Appendix A for completeness.
Lemma 3.3. Suppose F denotes a set of free variables for the afﬁne space A, and |ψ⟩is some stabilizer
state with support on A. Then there exists a linear function l and a quadratic function q, both depending
only on the free variables, as well as a scalar λ ∈C\{0}, such that:
|ψ⟩= λ ∑
x∈A
il(x)(−1)q(x) |x⟩.
There are generally multiple ways of expressing the same state in the form of (1). Yet if we pick a
set of free variables F and require l and q to depend only on free variables, the representation becomes
unique. Moreover, we can even give a unique representation in terms of a phase polynomial (evaluated
modulo 4, rather than 2). Again, the proof is in Appendix A.
Lemma 3.4. Given an n-qubit stabilizer state |ψ⟩and a set F ⊆[n], there exists a unique polynomial
p(x) = ∑j∈F rjxj +2∑j,k∈F, j<k sjkxjxk with rj ∈Z4 and sjk ∈Z2 and scalar λ ∈C\{0} such that |ψ⟩=
λ ∑x∈A ip(x) |x⟩.
3.2
A new pseudo-normal form related to phase polynomials
In the rGS-LC form for stabilizer state diagrams, local Clifford operators on the graph state are expressed
in terms of green and red spiders. Alternatively, it is also possible to express local Clifford operators in
terms of green spiders and Hadamards (and this is what is done in the stabilizer graph formalism of [16]).
In ZX-terms, this means the allowed local Clifford operators are
kπ
2
and
aπ
, where k ∈Z4 and
a ∈Z2. As for red nodes in rGS-LC diagrams, qubits whose local Clifford operator contains an H are
not allowed to be connected to each other; therefore we can ‘push’ the Hadamards through and get the
following pseudo-normal form. It is possible to convert between the two kinds of local Clifford operators
via local complementations on the qubits that have red nodes or Hadamards.
Deﬁnition 3.5. A stabilizer ZX-calculus diagram is in phase-polynomial form if the following hold:
• Each dangling edge is connected to a unique red or green spider.
• Red spiders have phases that are 0 or π.
• Green spiders have phases that are integer multiples of π/2.
• There may be edges connecting spiders of different colours.
• Furthermore, green spiders may be connected to other green spiders via Hadamard nodes.
Observation 3.6. An rGS-LC diagram can be brought into phase-polynomial form via the following
process. First, apply local complementations to all qubits that have red nodes in their local Cliffords.
This maps
π
2
π
2
to
and
- π
2
π
2
to
π
. Then, change the colour of all spiders which
now have Hadamards as part of their vertex operators and merge adjacent spiders of the same colour.
Example 3.7. Applying this procedure to the rGS-LC diagram on the left yields the phase polynomial-
form diagram in the middle. Colour-changing each red spider and unfusing the phases leads to an equiv-
alent GS-LC form diagram which we will say is in phase-polynomial form up to colour changing the
spiders with Hadamard gates in their vertex operators.
π
2
π
2
−π
2
π
2
π
2
π
2
π
2
π
π
2
π

T. McElvanney & M. Backens
9
Diagrams in phase-polynomial form correspond directly to pairs of a state and a set of free variables
for the underlying afﬁne support. Appendix B contains an example illustrating this correspondence.
Lemma 3.8. Ignoring scaling, there is a bijection between phase-polynomial form diagrams and pairs
(|ψ⟩, F), where |ψ⟩is an n-qubit stabilizer state and F ⊆[n] indicates a set of free variables for the
afﬁne space A which is the support of |ψ⟩.
Proof. By Lemma 3.4, there exists a unique function p(x) = ∑j∈F rjxj +2∑j,k∈F, j<k sjkxjxk with rj ∈Z4
and sjk ∈Z2 such that |ψ⟩∼= ∑x∈A ip(x) |x⟩. To construct a diagram from a state and a set of free variables
from this, proceed as follows:
• For each dependent variable xk with k ∈[n] \ F, ﬁnd the unique linear expression xk = ak ⊕
L
j∈F ak jxj which satisﬁes the deﬁning linear equations Rx = b of the afﬁne space A.
• For each j ∈F, place a green spider with an output wire. The phase of this spider is rj π
2 .
• For each k ∈[n]\F, place a red spider with an output wire. The phase of this spider is ajπ.
• Draw a (plain) edge connecting the green spider j to the red spider k whenever ak j = 1.
• Draw a Hadamard edge connecting the green spiders j and j′ whenever sj j′ = 1.
Conversely, given a diagram in phase-polynomial form, construct the corresponding state as below:
• The set F of free variables consists of the indices of the green spiders.
• The afﬁne space A is deﬁned by the set of equations
n
xj = aj ⊕L
k∈N( j) xk
o
j∈[n]\F, where aj = 0
if the phase of the red spider with index j is 0, and 1 otherwise.
• For each j ∈F such that the phase of the green spider j is αj, deﬁne rj to be the value in Z4 that
is equivalent to 2αj
π mod 4.
• For each j,k ∈F with j < k, deﬁne sjk = 1 if there exists a Hadamard edge between spiders j and
k, and sjk = 0 otherwise.
Let p(x) := ∑j∈F rjxj + 2∑j,k∈F, j<k sjkxjxk, then the desired state is ∑x∈A ip(x) |x⟩. The two procedures
are inverses of each other (noting that 3π
2 ≡−π
2 mod 2π).
Suppose D is the ZX-diagram corresponding to some stabilizer state |ψ⟩according to the above
translation. Then it is straightforward to see that the support of JDK and the support of |ψ⟩are equal.
Thus, by phase-polynomial techniques, it is quick to check that JDK equals |ψ⟩up to scalar factor.
3.3
The canonical phase-polynomial diagram
Using the bijection between phase-polynomial form diagrams and pairs of a state and a set of free vari-
ables, we can now deﬁne a unique canonical diagram for any stabilizer state.
Deﬁnition 3.9. Let |ψ⟩be a stabilizer state, then its canonical diagram is the one translated from (|ψ⟩,F)
by Lemma 3.8, where F is the canonical set of free variables according to Deﬁnition 3.1.
Apart from the translation into our terminology, this differs from the normal form deﬁnition of Hu
and Khesin [17] only by reversing the order: we ask for free variables to come ﬁrst whereas they put
them last. Our uniqueness proof, making use of the properties of the afﬁne support of a stabilizer state
is shorter and simpler than that in [17]. Their uniqueness proof also contains a ﬂaw: Claim III.8 of [17]
(using very different terminology) effectively states that changing one of the free variables while keeping
the condition that the overall bit string is in A has no effect on the values of any other variables, which is
not true for dependent variables that depend on the given free variable.
Theorem 3.10. The canonical form is unique.

10
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
Proof. This follows from the uniqueness of the canonical set of free variables proved in Lemma 3.2 and
from the bijection between pairs consisting of a state and a set of free variables in Lemma 3.8.
Proposition 3.11. Every phase-polynomial form diagram can be re-written into canonical form using
only local complementation and pivoting.
Proof. Pick some order < on the spiders, say from top to bottom. We want each red spider to only be
connected to spiders that appear earlier in <. While this does not hold, repeat the following procedure:
1. Let dk be the minimal red spider under < such that there exists some green spider f j connected to
dk with dk < f j.
2. Let fh be the maximal green spider under < such that dk is connected to fh.
3. If fh has a phase of ± π
2 , perform local complementation about fh and then about dk. Otherwise,
pivot about the edge connecting fh and dk. After applying either of these equivalence transforma-
tions, fh is now red and dk is now green and the diagram is still in phase-polynomial form.
4. By maximality of fh, we have that fh is only connected to green spiders fn with fn < fh. By
minimality of dk, we have that dk is only connected to red spiders dm with dk < dm.
This procedure strictly reduces the number of connections between red spiders and green spiders that ap-
pear later in the order. Hence repeating it will eventually terminate, transforming any phase-polynomial
form diagram into canonical form.
Remark 3.12. The canonical form is unique only up to the choice of order on the qubits; different orders
may yield different ‘canonical forms’. Thus the choice of order is arbitrary (but needs to happen in
advance, independently of the diagram considered) – we have chosen top-to-bottom for simplicity.
4
Completeness
Having established a canonical form for stabilizer ZX-calculus diagrams, we now give the completeness
proof. This ﬁrst requires proving that a new rewrite rule preserves the existence of Pauli ﬂow: an inverse
to the Z-deletion rule of Lemma 2.5. While there has been a lot of previous research on rewrite rules
which reduce the number of spiders while preserving ﬂow conditions, rewrite rules which increase the
number of spiders have not been studied beyond introducing new degree-2 vertices along input or output
wires (e.g. [4, Lemma 4.1]).
4.1
Inserting new Z-measured qubits
Inserting Z-measured qubits into MBQC+LC form diagram preserves the existence of Pauli ﬂow.
Proposition 4.1. Let G = (V,E,I,O,λ) be a labelled open graph with Pauli ﬂow and let W ⊆V be
some arbitrary subset of the vertices. Then G′ = (V ′,E′,I,O,λ ′) has a Pauli ﬂow, where V ′ = V ∪{x},
E′ = E ∪{(x,w) | w ∈W} with λ ′(v) = λ(v) if v ̸= x and λ ′(x) = Z.
Proof. Let (p,≺) be a Pauli ﬂow for G and deﬁne p′ : V ′ \O →P(V ′ \I) by p′(v) := p(v) if v ̸= x and
p′(x) := {x}. For vertices from the original graph, measurement planes and correction sets remain the
same while the only change to odd neighbourhoods is that x may be added. Thus conditions 4–7 and 9
remain trivially satisﬁed. Condition 8 holds for x as x ∈p′(x), and for all other Z-measured vertices
because (p,≺) is a Pauli ﬂow.

T. McElvanney & M. Backens
11
Let ≺′ be the transitive closure of ≺∪{(x,v)|v ∈NG′(x)}. Then ≺′ is a partial order because ≺is a
partial order and we only add successors for x. Now, condition 1 of Pauli ﬂow is inherited from (p,≺)
for all u ∈V \O because u ̸∈p′(x). Condition 2 is satisﬁed for all u ∈V \O because λ(x) = Z and (p,≺)
is a Pauli ﬂow. Condition 3 is inherited because the new vertex has only successors.
4.2
Complete ﬂow-preserving rewrite rules
We are now able to assemble the main proof. In the following, we will say an MBQC+LC-form diagram
has no interior spiders if the MBQC-form part of the diagram (i.e. ignoring the local Cliffords) has no
interior vertices (V \(I ∪O) = /0). Additionally, we say an MBQC+LC-form diagram has Pauli ﬂow if
its MBQC-form part has Pauli ﬂow (analogous to gﬂow in [4, Section 4.1]).
Theorem 4.2. Given two equivalent stabilizer MBQC+LC-form diagrams D and D′ with Pauli ﬂow and
satisfying JDK ∼= JD′K, there exists a sequence of rewrite rules – each preserving the existence of Pauli
ﬂow and preserving the MBQC+LC-form – transforming D into D′.
Proof. We begin by deleting all Z-measured vertices from both diagrams, keeping track of which vertices
we delete and their set of neighbours when deleted. The resulting diagrams has Pauli ﬂow by Lemma 2.5.
After all Z-measured vertices are removed, the MBQC-form parts of the diagrams (ignoring the local
Cliffords) only have X andY measurements and are thus of the kind considered in [14]. Then, there exists
a terminating procedure (consisting of a sequence of local complementations, pivots and Z-deletions)
rewriting the two diagrams into MBQC+LC-form diagrams N and N′ which contain no interior spiders
[14, Theorem 5.4]. Since local complementation and pivoting also preserve the existence of Pauli ﬂow
(Lemmas 2.7 and 2.8), N and N′ will also have Pauli ﬂow.
As only X and Y measurements remain, they can be spider-merged and unmerged through each qubit
to become local Cliffords on the outputs, thus N and N′ are equivalent to GS-LC form diagrams. By
[2, Theorem 13], every GS-LC form diagram can be rewritten into rGS-LC form using a sequence of
local complementations, thus this step preserves Pauli ﬂow. By Observation 3.6, we can then rewrite
each diagram into phase polynomial form, again using only local complementations (along with some
operations on the local Cliffords that do not alter the ﬂow), thus preserving Pauli ﬂow. Finally, by
Proposition 3.11, we can rewrite each diagram into canonical form1. The rewrite steps use only local
complementations and pivoting, so they preserve Pauli ﬂow. The resulting diagrams are equivalent and
the canonical form is unique, so we have found a sequence of local complementations, pivots and Z-
deletions rewriting D and D′ into the same canonical form diagram C.
By Observation 2.9, local complementation and pivot can be inverted. Furthermore, Z-insert is a
Pauli-ﬂow preserving inverse to Z-delete. Thus the sequence of rewrites from D′ to C can be inverted
while still preserving Pauli-ﬂow. By rewriting D to C, then rewriting C to D′, we obtain a sequence of
ﬂow-preserving rewrite rules transforming D into D′. This completes the proof.
Example 4.3. We shall give a short example of this rewrite procedure in action. Consider the following
two MBQC+LC-form diagrams, which we will call D and D′, and which satisfy JDK ∼= JD′K by (non-ﬂow
preserving) diagram simpliﬁcation techniques.
1Up to map-state duality and colour changing vertices with Hadamard operators.

12
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
π
2
−π
2
π
2
π
π
2
π
2
π
2
π
2
−π
2
π
2
π
2
π
2
−π
2
π
2
π
2
Using the procedure from the proof of Theorem 4.2, we ﬁrst rewrite D to phase polynomial form. Perform
triple local complementations (i.e. ‘inverse local complementations’) about both the left-most and right-
most qubits in the MBQC-form part, then apply Z-deletion to these qubits. A local complementation
about the top left qubit gives us the fourth diagram, which is in rGS-LC form and in fact is equivalent
to the left-most diagram in Example 3.7 up to map-state duality. We then obtain the ﬁnal diagram by
following the procedure in Observation 3.6; note that this diagram is already in canonical form (up to
map-state duality and colour changing spiders with Hadamard gates in their vertex operators) assuming
that the input qubits have lower indices than the output qubits.
π
2
−π
2
π
2
π
π
2
π
2
π
2
π
2
−π
2
π
2
π
π
2
π
2
π
2
−π
2
π
2
π
π
2
π
2
π
2
−π
2
π
2
π
2
π
2
π
2
π
2
π
2
−π
2
=
=
=
π
2
π
=
For D′, we perform local complementation about the two interior qubits of the MBQC-form part (here
we have done this about the top qubit ﬁrst, then the bottom qubit), and Z-delete both qubits.
π
2
π
2
−π
2
π
2
π
2
=
−π
2
π
2
π
2
π
π
2
=
−π
2
π
=
−π
2
π
This ﬁnal diagram is already in phase polynomial form (up to map state duality and colour changing the
spiders with Hadamard edges in their vertex operators) without us having to go through rGS-LC form.
To rewrite this diagram into canonical form, all that remains is to pivot along the edge connecting the
bottom left qubit to the bottom right qubit, giving the following diagram:
π
2
π
We have therefore rewritten D and D′ into the same canonical form diagram. Every rule used to re-write
D and D′ to canonical form is invertible and the inverses preserve Pauli ﬂow, giving us a sequence of
ﬂow preserving rewrite rules taking D to D′.
5
Conclusions
We have presented the ﬁrst ﬂow-preserving rewrite rule that increases the number of qubits in an MBQC-
form ZX-diagram, and shown that this – together with existing rewrite rules that preserve the MBQC

T. McElvanney & M. Backens
13
form – is complete for stabilizer MBQC-form diagrams. The completeness proof goes via a new canon-
ical form. The result may ﬁnd applications in obfuscation or in more involved optimisation protocols.
Yet that is only the beginning of the investigation of ﬂow-preserving rewrite rules and in future work
we will consider more extensive sets of rewrite rules and ZX-diagrams. The recent proof that circuit
extraction from general unitary ZX-diagrams is #P-hard [5] means this line of research is particularly
important, as it allows us to explore the only family of ZX-diagrams for which a polynomial-time circuit-
extraction algorithm is currently known.
Pauli ﬂow is known not to be necessary for deterministic implementability of MBQC patterns with
all-Pauli measurements [8]; it would also be interesting to see how it can be extended and what ﬂow-
preserving rewriting would look like under the new conditions.
Acknowledgements
Thanks to Hex Miller-Bakewell for helpful comments on earlier notes about the
phase-polynomial form.
References
[1] Matthew Amy, Dmitri Maslov & Michele Mosca (2014): Polynomial-Time T-Depth Optimization of Clif-
ford+T Circuits Via Matroid Partitioning. IEEE Transactions on Computer-Aided Design of Integrated Cir-
cuits and Systems 33(10), pp. 1476–1489, doi:10.1109/TCAD.2014.2341953.
[2] Miriam
Backens
(2014):
The
ZX-calculus
is
complete
for
stabilizer
quantum
mechanics.
New Journal of Physics 16(9),
p. 093021,
doi:10.1088/1367-2630/16/9/093021.
Available at
http://dx.doi.org/10.1088/1367-2630/16/9/093021.
[3] Miriam Backens (2015):
Making the stabilizer ZX-calculus complete for scalars.
Electronic Pro-
ceedings in Theoretical Computer Science 195, p. 17–32, doi:10.4204/eptcs.195.2.
Available at
http://dx.doi.org/10.4204/EPTCS.195.2.
[4] Miriam Backens, Hector Miller-Bakewell, Giovanni de Felice, Leo Lobski & John van de Wetering (2021):
There and back again: A circuit extraction tale. Quantum 5, p. 421, doi:10.22331/q-2021-03-25-421. Avail-
able at http://dx.doi.org/10.22331/q-2021-03-25-421.
[5] Niel de Beaudrap, Aleks Kissinger & John van de Wetering (2022): Circuit Extraction for ZX-diagrams can
be #P-hard, doi:10.48550/ARXIV.2202.09194. Available at https://arxiv.org/abs/2202.09194.
[6] Andr´e Bouchet (1987): Graphic Presentations of Isotropic Systems. Journal of Combinatorial Theory, Series
B 45(1), p. 58–76, doi:10.1016/0095-8956(88)90055-X.
[7] Anne Broadbent & Elham Kasheﬁ(2009): Parallelizing quantum circuits. Theoretical Computer Science
410(26), pp. 2489–2510, doi:10.1016/j.tcs.2008.12.046.
[8] Daniel E Browne, Elham Kasheﬁ, Mehdi Mhalla & Simon Perdrix (2007): Generalized ﬂow and de-
terminism in measurement-based quantum computation.
New Journal of Physics 9(8), p. 250–250,
doi:10.1088/1367-2630/9/8/250. Available at http://dx.doi.org/10.1088/1367-2630/9/8/250.
[9] Jin-Yi Cai, Pinyan Lu & Mingji Xia (2018): Dichotomy for Real Holantˆc Problems. In: Proceedings of the
Twenty-Ninth Annual ACM-SIAM Symposium on Discrete Algorithms, Society for Industrial and Applied
Mathematics, pp. 1802–1821, doi:10.1137/1.9781611975031.118.
[10] Bob Coecke & Aleks Kissinger (2017): Picturing Quantum Processes: A First Course in Quantum Theory
and Diagrammatic Reasoning. Cambridge University Press, doi:10.1017/9781316219317.
[11] Vincent
Danos
&
Elham
Kasheﬁ
(2006):
Determinism
in
the
one-way
model.
Phys.
Rev.
A
74,
p.
052310,
doi:10.1103/PhysRevA.74.052310.
Available
at
https://link.aps.org/doi/10.1103/PhysRevA.74.052310.

14
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
[12] Vincent Danos, Elham Kasheﬁ& Prakash Panangaden (2005): Parsimonious and robust realizations of uni-
tary maps in the one-way model. Physical Review A 72(6), p. 064301, doi:10.1103/PhysRevA.72.064301.
[13] Jeroen Dehaene & Bart De Moor (2003): Clifford group, stabilizer states, and linear and quadratic
operations over GF(2).
Phys. Rev. A 68, p. 042318, doi:10.1103/PhysRevA.68.042318.
Available at
https://link.aps.org/doi/10.1103/PhysRevA.68.042318.
[14] Ross Duncan, Aleks Kissinger, Simon Perdrix & John van de Wetering (2020): Graph-theoretic Simpli-
ﬁcation of Quantum Circuits with the ZX-calculus. Quantum 4, p. 279, doi:10.22331/q-2020-06-04-279.
Available at https://doi.org/10.22331/q-2020-06-04-279.
[15] Ross Duncan & Simon Perdrix (2009): Graph States and the Necessity of Euler Decomposition. In Klaus
Ambos-Spies, Benedikt L¨owe & Wolfgang Merkle, editors: Mathematical Theory and Computational Prac-
tice, Springer Berlin Heidelberg, Berlin, Heidelberg, pp. 167–177, doi:10.1007/978-3-642-03073-4 18.
[16] Matthew B. Elliott, Bryan Eastin & Carlton M. Caves (2008): Graphical description of the action of Clifford
operators on stabilizer states. Phys. Rev. A 77, p. 042307, doi:10.1103/PhysRevA.77.042307. Available at
https://link.aps.org/doi/10.1103/PhysRevA.77.042307.
[17] Alexander Tianlin Hu & Andrey Boris Khesin (2021): Improved Graph Formalism for Quantum Circuit
Simulation, doi:10.48550/ARXIV.2109.10210. Available at https://arxiv.org/abs/2109.10210.
[18] Emmanuel Jeandel, Simon Perdrix & Renaud Vilmart (2018): A Complete Axiomatisation of the ZX-Calculus
for Clifford+T Quantum Mechanics. In: Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic
in Computer Science, LICS ’18, Association for Computing Machinery, New York, NY, USA, p. 559–568,
doi:10.1145/3209108.3209131. Available at https://doi.org/10.1145/3209108.3209131.
[19] Emmanuel Jeandel, Simon Perdrix & Renaud Vilmart (2018): Diagrammatic Reasoning beyond Clif-
ford+T Quantum Mechanics. In: Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in
Computer Science, LICS ’18, Association for Computing Machinery, New York, NY, USA, p. 569–578,
doi:10.1145/3209108.3209139. Available at https://doi.org/10.1145/3209108.3209139.
[20] Aleks Kissinger & John van de Wetering (2020): Reducing the number of non-Clifford gates in quantum
circuits. Physical Review A 102(2), p. 022406, doi:10.1103/PhysRevA.102.022406.
[21] Jisho
Miyazaki,
Michal
Hajduˇsek
&
Mio
Murao
(2015):
Analysis
of
the
trade-off
be-
tween
spatial
and
temporal
resources
for
measurement-based
quantum
computation.
Physical
Review
A
91(5),
p.
052302,
doi:10.1103/PhysRevA.91.052302.
Available
at
https://link.aps.org/doi/10.1103/PhysRevA.91.052302.
[22] Kang
Feng
Ng
&
Quanlong
Wang
(2017):
A
universal
completion
of
the
ZX-calculus,
doi:10.48550/arXiv.1706.09877. Available at http://arxiv.org/abs/1706.09877.
[23] Robert Raussendorf & Hans J. Briegel (2001): A One-Way Quantum Computer. Phys. Rev. Lett. 86, pp.
5188–5191, doi:10.1103/PhysRevLett.86.5188.
[24] Will Simmons (2021): Relating Measurement Patterns to Circuits via Pauli Flow. In Chris Heunen & Miriam
Backens, editors: Proceedings 18th International Conference on Quantum Physics and Logic, Gdansk,
Poland, and online, 7-11 June 2021, Electronic Proceedings in Theoretical Computer Science 343, Open
Publishing Association, pp. 50–101, doi:10.4204/EPTCS.343.4.
[25] Korbinian
Staudacher
(2021):
Optimization
Approaches
for
Quantum
Circuits
using
ZX-
calculus.
Master’s
thesis,
Ludwig-Maximilians-Universit¨at,
M¨unchen.
Available
at
https://www.mnm-team.org/pub/Diplomarbeiten/stau21/PDF-Version/stau21.pdf.
[26] Maarten Van Den Nest (2010): Classical Simulation of Quantum Computation, the Gottesman-Knill Theo-
rem, and Slightly Beyond. Quantum Info. Comput. 10(3), p. 258–271, doi:10.5555/2011350.2011356.
[27] John
van
de
Wetering
(2020):
ZX-calculus
for
the
working
quantum
computer
scientist,
doi:10.48550/ARXIV.2012.13966. Available at https://arxiv.org/abs/2012.13966.
[28] John van de Wetering (2022): Personal communication.

T. McElvanney & M. Backens
15
A
Algebraic proofs for the canonical form
Proof of Lemma 3.3. In (1), the functions l and q are allowed to depend on all components of the bit
string x, i.e. l(x) = L
j djxj for some ﬁxed dj ∈Z2 and q(x) = L
j<k cjkxjxk ⊕L
j cjxj for some ﬁxed
cjk,cj ∈Z2.
Given the set of free variables F, solving the deﬁning system of linear equations for A yields linear
equations xj = aj ⊕L
k∈F ajkxk for every j ∈[n]\F, where aj,ajk ∈Z2.
Now suppose dj ̸= 0 for some j /∈F. Then we can substitute
l(x) =
M
j∈[n]
djxj =


M
j∈[n]\{s}
djxj

⊕as ⊕
M
t∈F
astxt = as ⊕
M
j∈[n]\{s}
(dj ⊕as j)xj,
where we deﬁne as j = 0 if j /∈F. The as is constant and the factor ias can be absorbed into the overall
scalar λ. Since l is computed modulo 2, the new function satisﬁes the same properties as the original
one but no longer depends on xs. Furthermore, as as j = 0 for all j /∈F, this process does not introduce
any new dependencies on dependent variables.
Therefore, the substitution process strictly decreases the number of dependent variables that l de-
pends on and successive applications will eventually yield a function that depends only on free variables.
An analogous argument holds for q.
Lemma A.1. Let |ψ⟩and |φ⟩be two stabilizer states with the same support A, and let F be a set of free
variables for A. Suppose there exists λ,µ ∈C\{0} such that
|ψ⟩= λ ∑
x∈A
il(x)(−1)q(x) |x⟩
and
|φ⟩= µ ∑
x∈A
il′(x)(−1)q′(x) |x⟩
where for some dj,d′
j,cjk,cj,c′
jk,c′
j ∈Z2,
l(x) =
M
j∈F
djxj
q(x) =
M
j,k∈F, j<k
cjkxjxk ⊕
M
j
cjxj
l′(x) =
M
j∈F
d′
jxj
q′(x) =
M
j,k∈F, j<k
c′
jkxjxk ⊕
M
j
c′
jxj.
Then |ψ⟩and |φ⟩are linearly dependent if and only if for all j,k ∈F we have dj = d′
j, cjk = c′
jk, and
cj = c′
j.
Proof. The ‘if’ direction is straightforward: if dj = d′
j, cjk = c′
jk, and cj = c′
j for all j,k ∈F, then
µ |ψ⟩= λ |φ⟩.
For the ‘only if’ direction, note that l(x) = l′(x) = q(x) = q′(x) = 0 if all variables in F are assigned
0, so by rescaling such that λ = µ, we get |ψ⟩= |φ⟩if and only if they are linearly dependent.
By deﬁnition, each assignment of values to the free variables in F induces one assignment of values
to all the variables that is in A. Suppose there exists a j ∈F such that dj ̸= d′
j, wlog assume dj = 1 and
d′
j = 0 (otherwise the argument is symmetric). Let ξ be the bit string in A that has every free variable
set to 0 except the one with index j. Then ⟨ξ | ψ⟩is imaginary while ⟨ξ | φ⟩is real, so since the two
states have the same non-zero amplitude for the assignment induced by setting all free variables to 0,
they cannot be linearly dependent.
Similarly, suppose there exists j ∈F such that cj ̸= c′
j, then for the same ξ we have ⟨ξ | ψ⟩=
−⟨ξ | φ⟩, so again the two states cannot be linearly dependent.

16
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
So without loss of generality, assume that dj = d′
j and cj = c′
j for all j ∈F. Now suppose there are
j,k ∈F such that cjk ̸= c′
jk. Let ζ be the bit string induced by the assignment where xj = xk = 1 and all
other free variables are 0. Then again, ⟨ζ | ψ⟩= −⟨ζ | φ⟩so the two states cannot be linearly dependent.
Therefore, linear dependence implies that for all j,k ∈F we have dj = d′
j, cjk = c′
jk, and cj = c′
j.
Proof of Lemma 3.4. Via Lemmas 3.3 and A.1, we can uniquely write |ψ⟩= λ ∑x∈A il(x)(−1)q(x) |x⟩,
where l(x) = L
j∈F djxj and q(x) = L
j,k∈F, j<k cjkxjxk ⊕L
j cjxj with all coefﬁcients taking values in
Z2.
As y mod 2 = y2 mod 4 for all y ∈Z, we have
M
j∈F
djxj =
 
∑
j∈F
djxj
!2
mod 4 =
 
∑
j∈F
djxj +2
∑
j,k∈F, j<k
djdkxjxk
!
mod 4,
where we have used the fact that dj,xj ∈Z2 for all j and hence (djxj)2 = djxj. We can thus write
∑
x∈A
il(x)(−1)q(x) |x⟩= ∑
x∈A
ip(x) |x⟩,
where
p(x) = ∑
j∈F
djxj +2
 
∑
j,k∈F, j<k
cjkxjxk +∑
j
cjxj
!
+2
∑
j,k∈F, j<k
djdkxjxk
= ∑
j∈F
(dj +2cj)xj +2
∑
j,k∈F, j<k
(cjk +djdk)xjxk
Now, rj := (dj +2cj) ∈Z4. The coefﬁcient sjk := cjk+djdk could take value 2, but as p is in the exponent
of i and sjk is multiplied by 2, we may without loss of generality replace it with sjk := cjk ⊕djdk so that
sjk ∈Z2.
Conversely, we can ﬁnd functions l and q from p by setting dj := rj mod 2, cj := 1
2(rj −dj), and
cjk := sjk ⊕djdk. Thus, by uniqueness of l and q, the phase polynomial expression is also unique.
B
An example illustrating Lemma 3.8
Consider the following phase-polynomial form diagram from Example 3.7, where we have numbered
the qubits from top to bottom.
π
2
π
1
2
3
4
Following the procedure from Lemma 3.8, we construct the state corresponding to this diagram. The
state will be expressed as ∑x∈A ip(x) |x⟩, where p(x) = ∑j∈F rjxj +2∑j,k∈F, j<k sjkxjxk. Here, F is the set
of free variables, A is the afﬁne space on which the state has support, and p(x) is the phase polynomial
with rj ∈Z4 and sjk ∈Z2 for all j,k ∈F.
• The set F of free variables corresponding to this diagram is F = {x1,x2} since qubits 1 and 2 are
denoted by green spiders.

T. McElvanney & M. Backens
17
• The afﬁne space A is deﬁned by the following set of equations arising from the red spiders:
x3 = 1⊕x1
x4 = x1 ⊕x2
(3)
since qubit 3 has phase π (giving the constant 1 on the right-hand side) and is connected to qubit
1, while qubit 4 has phase 0 and is connected to both 1 and 2.
• For the linear terms in the phase polynomial, we get that r1 = 1 and r2 = 0 as the phase of x1 is π
2
and the phase of x2 is 0.
• For the quadratic terms in the phase polynomial, we have s12 = 1 as there is a Hadamard edge
connecting x1 and x2.
Combining these, the phase polynomial is p(x) = x1 +2x1x2. The state corresponding to the diagram is
therefore given by:
∑
x∈A
ix1+2x1x2 |x⟩= ∑
x1,x2∈Z2
ix1(−1)x1x2 |x1x2(1⊕x1)(x1 ⊕x2)⟩
= |0010⟩+|0111⟩+i|1001⟩−i|1100⟩
It is then quick to check that applying the procedure in Lemma 3.8 for constructing a diagram from a
state and a set of free variables gives back the original diagram.
Instead, we will show how to construct the diagram corresponding to the same state with a different
set of free variables F = {x2,x3}. To do this, we ﬁrst rewrite the afﬁne space and the phase polynomial
in terms of the new free variables x2 and x3, and then apply the procedure for obtaining diagrams.
Choosing x3 to be free instead of x1, we rearrange the ﬁrst equation of (3) and then substitute it into
the second to get:
x1 = 1⊕x3
x4 = 1⊕x2 ⊕x3
(4)
Substituting into the phase polynomial yields p(x) = (1 ⊕x3) + 2(1 ⊕x3)x2 where ⊕denotes addition
modulo 2. Yet we want the phase polynomial to be computed modulo 4, since i4 = 1. Now, as y mod 2 =
y2 mod 4 for all y ∈Z, and b2 = b for all b ∈Z2, this can be rewritten to:
p(x) = (1⊕x3)+2(1⊕x3)x2 = (1+x3)2 +2(1+x3)2x2 = 1+2x2 +3x3 +2x2x3
(mod 4)
We thus have r2 = 2, r3 = 3, and s23 = 1. The constant term in the phase polynomial is irrelevant since
we are ignoring global scalars. Up to scalar factor, the full state is
∑
x2,x3∈Z2
i2x2+3x3+2x2x3 |(1⊕x3)x2x3(1⊕x2 ⊕x3)⟩.
To construct the diagram corresponding to this state and set of free variables:
• We already have the equations for the dependent variables in terms of F = {x2,x3} in (4).
• Place a green spider with phase r2 π
2 = π for qubit 2 and a green spider with phase r3 π
2 = 3π
2 (or,
equivalently, −π
2 ) for qubit 3. Each of the spiders is connected to one output wire.
• Place a red spider with phase π for qubit 1 and a red spider with phase π for qubit 4 since the
equations for both x1 and x4 contain a constant term. Again, each of the spiders is connected to
one output wire.
• Variable x1 depends on x3, so draw a plain wire between the spiders for qubits 1 and 3. Variable x4
depends on both x2 and x3, so draw plain wires between the spiders for qubits 2 and 4, as well as
between 3 and 4.

18
Complete ﬂow-preserving rewrite rules for MBQC patterns with Pauli measurements
• As s23 = 1, draw a Hadamard edge connecting the green spiders corresponding to x2 and x3.
This yields the following diagram:
π
−π
2
π
π
1
2
3
4

