A Neural Transition-based Model for Nested Mention Recognition
Bailin Wang
University of Massachusetts
Amherst
bailinwang@cs.umass.edu
Wei Lu
Singapore University of Technology
and Design
luwei@sutd.edu.sg
Yu Wang and Hongxia Jin
Samsung Research America
{yu.wang1, hongxia.jin}@samsung.com
Abstract
It is common that entity mentions can con-
tain other mentions recursively. This paper in-
troduces a scalable transition-based method to
model the nested structure of mentions. We
ﬁrst map a sentence with nested mentions to
a designated forest where each mention corre-
sponds to a constituent of the forest. Our shift-
reduce based system then learns to construct
the forest structure in a bottom-up manner
through an action sequence whose maximal
length is guaranteed to be three times of the
sentence length. Based on Stack-LSTM which
is employed to efﬁciently and effectively rep-
resent the states of the system in a continuous
space, our system is further incorporated with
a character-based component to capture letter-
level patterns. Our model achieves the state-
of-the-art results on ACE datasets, showing its
effectiveness in detecting nested mentions.1
1
Introduction
There has been an increasing interest in named
entity recognition or more generally recognizing
entity mentions2 (Alex et al., 2007; Finkel and
Manning, 2009; Lu and Roth, 2015; Muis and Lu,
2017) that the nested hierarchical structure of en-
tity mentions should be taken into account to bet-
ter facilitate downstream tasks like question an-
swering (Abney et al., 2000), relation extraction
(Mintz et al., 2009; Liu et al., 2017), event extrac-
tion (Riedel and McCallum, 2011; Li et al., 2013),
and coreference resolution (Soon et al., 2001; Ng
and Cardie, 2002; Chang et al., 2013). Practically,
the mentions with nested structures frequently ex-
ist in news (Doddington et al., 2004) and biomed-
ical documents (Kim et al., 2003). For example in
1We make our implementation available at https://
github.com/berlino/nest-trans-em18.
2Mentions are deﬁned as references to entities that could
be named, nominal or pronominal (Florian et al., 2004).
Figure 1: An example sentence of nested mentions
represented in the structure of forest.
PER:Person,
ORG:Organization, GPE:Geo-Political Entity.
Figure 1, “UN Secretary General” of type Person
also contains “UN” of type Organization.
Traditional sequence labeling models such as
conditional random ﬁelds (CRF) (Lafferty et al.,
2001) do not allow hierarchical structures between
segments, making them incapable to handle such
problems. Finkel and Manning (2009) presented
a chart-based parsing approach where each sen-
tence with nested mentions is mapped to a rooted
constituent tree. The issue of using a chart-based
parser is its cubic time complexity in the number
of words in the sentence.
To achieve a scalable and effective solution
for recognizing nested mentions, we design a
transition-based system which is inspired by
the recent success of employing transition-based
methods for constituent parsing (Zhang and Clark,
2009) and named entity recognition (Lou et al.,
2017), especially when they are paired with neu-
ral networks (Watanabe and Sumita, 2015). Gen-
erally, each sentence with nested mentions is
mapped to a forest where each outermost mention
forms a tree consisting of its inner mentions. Then
our transition-based system learns to construct this
forest through a sequence of shift-reduce actions.
Figure 1 shows an example of such a forest. In
contrast, the tree structure by Finkel and Manning
(2009) further uses a root node to connect all tree
elements. Our forest representation eliminates the
root node so that the number of actions required to
arXiv:1810.01808v1  [cs.CL]  3 Oct 2018

construct it can be reduced signiﬁcantly.
Following (Dyer et al., 2015), we employ Stack-
LSTM to represent the system’s state, which con-
sists of the states of input, stack and action history,
in a continuous space incrementally.
The (par-
tially) processed nested mentions in the stack are
encoded with recursive neural networks (Socher
et al., 2013) where composition functions are used
to capture dependencies between nested mentions.
Based on the observation that letter-level patterns
such as capitalization and preﬁx can be beneﬁcial
in detecting mentions, we incorporate a character-
level LSTM to capture such morphological infor-
mation. Meanwhile, this character-level compo-
nent can also help deal with the out-of-vocabulary
problem of neural models.
We conduct exper-
iments in three standard datasets.
Our system
achieves the state-of-the-art performance on ACE
datasets and comparable performance in GENIA
dataset.
2
Related Work
Entity mention recognition with nested structures
has been explored ﬁrst with rule-based approaches
(Zhang et al., 2004; Zhou et al., 2004; Zhou,
2006) where the authors ﬁrst detected the inner-
most mentions and then relied on rule-based post-
processing methods to identify outer mentions.
McDonald et al. (2005) proposed a structured
multi-label model to represent overlapping seg-
ments in a sentence. but it came with a cubic time
complexity in the number of words. Alex et al.
(2007) proposed several ways to combine multiple
conditional random ﬁelds (CRF) (Lafferty et al.,
2001) for such tasks. Their best results were ob-
tained by cascading several CRF models in a spe-
ciﬁc order while each model is responsible for de-
tecting mentions of a particular type. However,
such an approach cannot model nested mentions
of the same type, which frequently appear.
Lu and Roth (2015) and Muis and Lu (2017)
proposed new representations of mention hyper-
graph and mention separator to model overlap-
ping mentions. However, the nested structure is
not guaranteed in such approaches since overlap-
ping structures additionally include the crossing
structures3, which rarely exist in practice (Lu and
Roth, 2015). Also, their representations did not
model the dependencies between nested mentions
3For example, in a four-word sentence ABCD, the phrase
ABC and BCD together form a crossing structure.
Initial State
[φ, 0, φ]
Final State
[S, n, A]
SHIFT
[S, i, A]
[S|w, i+1, A|SHIFT]
REDUCE-X
[S|t1t0, i, A]
[S|X, i, A|REDUCE-X]
UNARY-X
[S|t0, i, A]
[S|X, i, A|UNARY-X]
Figure 2:
Deduction rules. [S, i, A] denotes stack,
buffer front index and action history respectively.
explicitly, which may limit their performance. In
contrast, the chart-based parsing method (Finkel
and Manning, 2009) can capture the dependencies
between nested mentions with composition rules
which allow an outer entity to be inﬂuenced by its
contained entities. However, their cubic time com-
plexity makes them not scalable to large datasets.
As neural network based approaches are proven
effective in entity or mention recognition (Col-
lobert et al., 2011; Lample et al., 2016; Huang
et al., 2015; Chiu and Nichols, 2016; Ma and
Hovy, 2016), recent efforts focus on incorporating
neural components for recognizing nested men-
tions. Ju et al. (2018) dynamically stacked mul-
tiple LSTM-CRF layers (Lample et al., 2016), de-
tecting mentions in an inside-out manner until no
outer entities are extracted. Katiyar and Cardie
(2018) used recurrent neural networks to extract
features for a hypergraph which encodes all nested
mentions based on the BILOU tagging scheme.
3
Model
Speciﬁcally,
given
a
sequence
of
words
{x0, x1, . . . , xn},
the goal of our system is
to output a set of mentions where nested struc-
tures are allowed. We use the forest structure to
model the nested mentions scattered in a sentence,
as shown in Figure 1. The mapping is straightfor-
ward: each outermost mention forms a tree where
the mention is the root and its contained mentions
correspond to constituents of the tree.4
3.1
Shift-Reduce System
Our transition-based model is based on the shift-
reduce parser for constituency parsing (Watan-
4Note that words that are not contained in any mention
each forms a single-node tree.

abe and Sumita, 2015), which adopts (Zhang and
Clark, 2009; Sagae and Lavie, 2005). Generally,
our system employs a stack to store (partially) pro-
cessed nested elements. The system’s state is de-
ﬁned as [S, i, A] which denotes stack, buffer front
index and action history respectively. In each step.
an action is applied to change the system’s state.
Our system consists of three types of transition
actions, which are also summarized in Figure 2:
• SHIFT pushes the next word from buffer to
the stack.
• REDUCE-X pops the top two items t0 and
t1 from the tack and combines them as a
new tree element {X →t0t1} which is then
pushed onto the stack.
• UNARY-X pops the top item t0 from the stack
and constructs a new tree element {X →t0}
which is pushed back to the stack.
Since the shift-reduce system assumes unary
and binary branching, we binarize the trees in
each forest in a left-branching manner. For exam-
ple, if three consecutive words A, B, C are anno-
tated as Person, we convert it into a binary tree
{Person →{Person∗→A, B}, C} where
Person∗is a temporary label for Person. Hence,
the X in reduce- actions will also include such
temporary labels.
Note that since most words are not contained in
any mention, they are only shifted to the stack and
not involved in any reduce- or unary- actions. An
example sequence of transitions can be found in
Figure 3. Our shift-reduce system is different from
previous parsers in terms of the terminal state. 1)
It does not require the terminal stack to be a rooted
tree. Instead, the ﬁnal stack should be a forest con-
sisting of multiple nested elements with tree struc-
tures. 2) To conveniently determine the ending of
our transition process, we add an auxiliary symbol
$ to each sentence. Once it is pushed to the stack,
it implies that all deductions of actual words are
ﬁnished. Since we do not allow unary rules be-
tween labels like X1 →X2, the length of maxi-
mal action sequence is 3n.5
3.2
Action Constraints
To make sure that each action sequence is valid,
we need to make some hard constraints on the ac-
5In this case, each word is shifted (n) and involved in a
unary action (n). Then all elements are reduced to a single
node (n −1). The last action is to shift the symbol $.
Indonesian leaders visited him $
leaders visited him $
Buffer
Stack
Shift
Indonesian
Unary-GPE
Indonesian
GPE
leaders visited him $
Action
Shift
Indonesian
GPE
leaders
visited him $
Reduce-PER
Indonesian
GPE
leaders
PER
Shift
him $
Unary-PER
Shift
$
$
Indonesian
GPE
leaders
PER
visited
Indonesian
GPE
leaders
PER
him
visited
Indonesian
GPE
leaders
PER
him
PER
visited
Shift
visited him $
him
PER
$
Indonesian
GPE
leaders
PER
visited
Figure 3: An example sequence of transition actions
for the sentence “Indonesian leaders visited him”. $ is
the special symbol indicating the termination of transi-
tions. PER:Person, GPE:Geo-Political Entity.
tion to take. For example, reduce- action can only
be conducted when there are at least two elements
in the stack. Please see the Appendix for the full
list of restrictions. Formally, we use V(S, i, A) to
denote the valid actions given the parser state. Let
us denote the feature vector for the parser state at
time step k as pk. The distribution of actions is
computed as follows:
p(zk | pk) =
exp
 w⊤
zkpk + bzk

P
z′∈V(S,i,A) exp
 w⊤
z′pk + bz′
(1)
where wz is a column weight vector for action z,
and bz is a bias term.
3.3
Neural Transition-based Model
We use neural networks to learn the representation
of the parser state, which is pk in (1).
Representation of Words
Words are represented by concatenating three vec-
tors:
exi = [ewi, epi, cwi]
(2)
where ewi and epi denote the embeddings for i-th
word and its POS tag respectively. cwi denotes the
representation learned by a character-level model

using a bidirectional LSTM. Speciﬁcally, for char-
acter sequence s0, s1, . . . , sn in the i-th word, we
use the last hidden states of forward and back-
ward LSTM as the character-based representation
of this word, as shown below:
cwi = [−−−−→
LSTMc(s0, . . . , sn), ←−−−−
LSTMc(s0, . . . , sn)]
(3)
Representation of Parser States
Generally, the buffer and action history are en-
coded using two vanilla LSTMs (Graves and
Schmidhuber, 2005). For the stack that involves
popping out top elements, we use the Stack-LSTM
(Dyer et al., 2015) to efﬁciently encode it.
Formally, if the unprocessed word sequence in
the buffer is xi, xi+1, . . . , xn and action history se-
quence is a0, a1, . . . , ak−1, then we can compute
buffer representation bk and action history repre-
sentation ak at time step k as follows:
bk = ←−−−−−
LSTMb[exi, . . . , exn]
(4)
ak = −−−−−→
LSTMa[ea0, . . . , eak−1]
(5)
where each action is also mapped to a distributed
representation ea.6 For the state of the stack, we
also use an LSTM to encode a sequence of tree
elements. However, the top elements of the stack
are updated frequently. Stack-LSTM provides an
efﬁcient implementation that incorporates a stack-
pointer.7 Formally, the state of the stack bk at time
step k is computed as:
sk = Stack-LSTM[htm, . . . , ht0]
(6)
where hti denotes the representation of the i-th
tree element from the top, which can be computed
recursively similar to Recursive Neural Network
(Socher et al., 2013) as follows:
hparent = W⊤
u,lhchild + bu,l
(7)
hparent = W⊤
b,l[hlchild, hrchild] + bu,l
(8)
where Wu,l and Wb,l denote the weight matrices
for unary(u) and binary(b) composition with par-
ent node being label(l). Note that the composition
function is distinct for each label l. Recall that the
leaf nodes of each tree element are raw words. In-
stead of representing them with their original em-
beddings introduced in Section 3.3, we found that
6Note that LSTMb runs in a right-to-left order such that
the output can represent the contextual information of xi.
7Please refer to Dyer et al. (2015) for details.
Models
ACE04
ACE05
GENIA
w/s
Finkel and Manning (2009)
-
-
70.3
38†
Lu and Roth (2015)
62.8
62.5
70.3
454
Muis and Lu (2017)
64.5
63.1
70.8
263
Katiyar and Cardie (2018)
72.7
70.5
73.6
-
Ju et al. (2018) 8
-
72.2
74.7
-
Ours
73.3
73.0
73.9
1445
- char-level LSTM
72.3
71.9
72.1
1546
- pre-trained embeddings
71.3
71.5
72.0
1452
- dropout layer
71.7
72.0
72.7
1440
Table 1: Main results in terms of F1 score (%). w/s:
# of words decoded per second, number with † is re-
trieved from the original paper.
concatenating the buffer state in (5) are beneﬁcial
during our initial experiments. Formally, when a
word xi is shifted to the stack at time step k, its
representation is computed as:
hleaf = W⊤
leaf[exi, bk] + bleaf
(9)
Finally, the state of the system pk is the con-
catenation of the states of buffer, stack and action
history:
pk = [bk, sk, ak]
(10)
Training
We employ the greedy strategy to maximize the
log-likelihood of the local action classiﬁer in (1).
Speciﬁcally, let zik denote the k-th action for the
i-th sentence, the loss function with ℓ2 norm is:
L(θ) = −
X
i
X
k
log p(zik) + λ
2 ∥θ∥2
(11)
where λ is the ℓ2 coefﬁcient.
4
Experiments
We mainly evaluate our models on the standard
ACE-04, ACE-05 (Doddington et al., 2004), and
GENIA (Kim et al., 2003) datasets with the same
splits used by previous research efforts (Lu and
Roth, 2015; Muis and Lu, 2017). In ACE datasets,
more than 40% of the mentions form nested struc-
tures with some other mention. In GENIA, this
number is 18%. Please see Lu and Roth (2015)
for the full statistics.
4.1
Setup
Pre-trained embeddings GloVe (Pennington et al.,
2014) of dimension 100 are used to initialize the
8Note that in ACE2005, Ju et al. (2018) did their exper-
iments with a different split from Lu and Roth (2015) and
Muis and Lu (2017) which we follow as our split.

word vectors for all three datasets.9 The embed-
dings of POS tags are initialized randomly with
dimension 32. The model is trained using Adam
(Kingma and Ba, 2014) and a gradient clipping of
3.0. Early stopping is used based on the perfor-
mance of development sets. Dropout (Srivastava
et al., 2014) is used after the input layer. The ℓ2 co-
efﬁcient λ is also tuned during development pro-
cess.
4.2
Results
The main results are reported in Table 1. Our neu-
ral transition-based model achieves the best results
in ACE datasets and comparable results in GENIA
dataset in terms of F1 measure. We hypothesize
that the performance gain of our model compared
with other methods is largely due to improved per-
formance on the portions of nested mentions in
our datasets. To verify this, we design an experi-
ment to evaluate how well a system can recognize
nested mentions.
Handling Nested Mentions
The idea is that we split the test data into two
portions: sentences with and without nested men-
tions. The results of GENIA are listed in Table
2. We can observe that the margin of improve-
ment is more signiﬁcant in the portion of nested
mentions, revealing our model’s effectiveness in
handling nested mentions. This observation helps
explain why our model achieves greater improve-
ment in ACE than in GENIA in Table 1 since the
former has much more nested structures than the
latter. Moreover, Ju et al. (2018) performs bet-
ter when it comes to non-nested mentions possibly
due to the CRF they used, which globally normal-
izes each stacked layer.
Decoding Speed
Note that Lu and Roth (2015) and Muis and Lu
(2017) also feature linear-time complexity, but
with a greater constant factor.
To compare the
decoding speed, we re-implemented their model
with the same platform (PyTorch) and run them
on the same machine (CPU: Intel i5 2.7GHz). Our
model turns out to be around 3-5 times faster than
theirs, showing its scalability.
9We also additionally tried using embeddings trained on
PubMed for GENIA but the performance was comparable.
GENIA
Nested
Non-Nested
P
R
F1
P
R
F1
Lu and Roth (2015)
76.3
60.8
67.7
73.1
70.7
71.9
Muis and Lu (2017)
76.5
60.3
67.4
74.8
71.3
73.0
Ju et al. (2018)
79.4
63.6
70.6
78.5
77.5
78.0
Ours
80.3
64.6
71.6
76.8
73.9
75.3
Table 2: Results (%) on different types of sentences on
the GENIA dataset.
Ablation Study
To evaluate the contribution of neural components
including pre-trained embeddings, the character-
level LSTM and dropout layers, we test the perfor-
mances of ablated models. The results are listed
in Table 1. From the performance gap, we can
conclude that these components contribute signiﬁ-
cantly to the effectiveness of our model in all three
datasets.
5
Conclusion and Future Work
In this paper, we present a transition-based model
for nested mention recognition using a forest rep-
resentation. Coupled with Stack-LSTM for rep-
resenting the system’s state, our neural model can
capture dependencies between nested mentions ef-
ﬁciently. Moreover, the character-based compo-
nent helps capture letter-level patterns in words.
The system achieves the state-of-the-art perfor-
mance in ACE datasets.
One potential drawback of the system is the
greedy training and decoding. We believe that al-
ternatives like beam search and training with ex-
ploration (Goldberg and Nivre, 2012) could fur-
ther boost the performance. Another direction that
we plan to work on is to apply this model to rec-
ognizing overlapping and entities that involve dis-
continuous spans (Muis and Lu, 2016) which fre-
quently exist in the biomedical domain.
Acknowledgements
We would like to thank the anonymous review-
ers for their valuable comments. We also thank
Meizhi Ju for providing raw predictions and help-
ful discussions. This work was done after the ﬁrst
author visited Singapore University of Technology
and Design. This work is supported by Singapore
Ministry of Education Academic Research Fund
(AcRF) Tier 2 Project MOE2017-T2-1-156.

References
Steven Abney, Michael Collins, and Amit Singhal.
2000. Answer extraction. In Proc. of the sixth con-
ference on applied natural language processing.
Beatrice Alex, Barry Haddow, and Claire Grover. 2007.
Recognising nested named entities in biomedical
text. In Proc. of BioNLP.
Kai-Wei Chang, Rajhans Samdani, and Dan Roth.
2013. A constrained latent variable model for coref-
erence resolution. In Proc. of EMNLP.
Jason PC Chiu and Eric Nichols. 2016. Named entity
recognition with bidirectional lstm-cnns. TACL.
Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011.
Natural language processing (almost) from
scratch. JMLR.
George R Doddington, Alexis Mitchell, Mark A Przy-
bocki, Lance A Ramshaw, Stephanie Strassel, and
Ralph M Weischedel. 2004. The automatic content
extraction (ace) program-tasks, data, and evaluation.
In Proc. of LREC.
Chris Dyer, Miguel Ballesteros, Wang Ling, Austin
Matthews, and Noah A. Smith. 2015. Transition-
based dependency parsing with stack long short-
term memory. In Proc. of ACL.
Jenny Rose Finkel and Christopher D Manning. 2009.
Nested named entity recognition.
In Proc. of
EMNLP.
R. Florian,
H. Hassan,
A. Ittycheriah,
H. Jing,
N. Kambhatla, X. Luo, N. Nicolov, and S. Roukos.
2004. A statistical model for multilingual entity de-
tection and tracking. In Proc. of HLT-NAACL.
Yoav Goldberg and Joakim Nivre. 2012. A dynamic
oracle for arc-eager dependency parsing. Proceed-
ings of COLING 2012, pages 959–976.
Alex Graves and J¨urgen Schmidhuber. 2005. Frame-
wise phoneme classiﬁcation with bidirectional lstm
and other neural network architectures. Neural Net-
works.
Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirec-
tional lstm-crf models for sequence tagging. arXiv
preprint arXiv:1508.01991.
Meizhi Ju, Makoto Miwa, and Sophia Ananiadou.
2018. A neural layered model for nested named en-
tity recognition. In Proc. of NAACL-HLT.
Arzoo Katiyar and Claire Cardie. 2018. Nested named
entity recognition revisited.
In Proc. of NAACL-
HLT.
J-D Kim, Tomoko Ohta, Yuka Tateisi, and Jun’ichi
Tsujii. 2003. Genia corpus—a semantically anno-
tated corpus for bio-textmining. Bioinformatics.
Diederik Kingma and Jimmy Ba. 2014.
Adam: A
method for stochastic optimization.
In Proc. of
ICLR.
John Lafferty, Andrew McCallum, and Fernando CN
Pereira. 2001.
Conditional random ﬁelds: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proc. of ICML.
Guillaume Lample, Miguel Ballesteros, Sandeep Sub-
ramanian, Kazuya Kawakami, and Chris Dyer. 2016.
Neural architectures for named entity recognition.
In Proc. of NAACL-HLT.
Qi Li, Heng Ji, and Liang Huang. 2013. Joint event
extraction via structured prediction with global fea-
tures. In Proc. of ACL.
Liyuan Liu, Xiang Ren, Qi Zhu, Shi Zhi, Huan Gui,
Heng Ji, and Jiawei Han. 2017. Heterogeneous su-
pervision for relation extraction: A representation
learning approach. In Proc. of EMNLP.
Yinxia Lou, Yue Zhang, Tao Qian, Fei Li, Shufeng
Xiong, and Donghong Ji. 2017. A transition-based
joint model for disease named entity recognition and
normalization. Bioinformatics.
Wei Lu and Dan Roth. 2015.
Joint mention extrac-
tion and classiﬁcation with mention hypergraphs. In
Proc. of EMNLP.
Xuezhe Ma and Eduard Hovy. 2016. End-to-end se-
quence labeling via bi-directional lstm-cnns-crf. In
Proc. of ACL.
Ryan McDonald,
Koby Crammer,
and Fernando
Pereira. 2005. Flexible text segmentation with struc-
tured multilabel classiﬁcation.
In Proc. of HLT-
EMNLP.
Mike Mintz, Steven Bills, Rion Snow, and Dan Juraf-
sky. 2009. Distant supervision for relation extrac-
tion without labeled data. In Proc. of ACL-IJCNLP.
Aldrian Obaja Muis and Wei Lu. 2016. Learning to
recognize discontiguous entities. In Proceedings of
the 2016 Conference on Empirical Methods in Nat-
ural Language Processing, pages 75–84.
Aldrian Obaja Muis and Wei Lu. 2017. Labeling gaps
between words: Recognizing overlapping mentions
with mention separators. In Proc. of EMNLP.
Vincent Ng and Claire Cardie. 2002. Improving ma-
chine learning approaches to coreference resolution.
In Proc. of ACL.
Jeffrey Pennington, Richard Socher, and Christopher
Manning. 2014.
Glove: Global vectors for word
representation. In Proc. of EMNLP.
S. Riedel and A. McCallum. 2011.
Fast and robust
joint models for biomedical event extraction.
In
Proc. of EMNLP.

Kenji Sagae and Alon Lavie. 2005. A classiﬁer-based
parser with linear run-time complexity. In IWPT.
Richard Socher, Alex Perelygin, Jean Wu, Jason
Chuang, Christopher D Manning, Andrew Ng, and
Christopher Potts. 2013.
Recursive deep models
for semantic compositionality over a sentiment tree-
bank. In Proc. of EMNLP.
Wee
Meng
Soon,
Hwee
Tou
Ng,
and
Daniel
Chung Yong Lim. 2001.
A machine learning ap-
proach to coreference resolution of noun phrases.
Computational linguistics, 27(4):521–544.
Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: A simple way to prevent neural networks
from overﬁtting. JMLR.
Taro Watanabe and Eiichiro Sumita. 2015. Transition-
based neural constituent parsing. In Proc. of ACL.
Jie Zhang, Dan Shen, Guodong Zhou, Jian Su, and
Chew-Lim Tan. 2004.
Enhancing hmm-based
biomedical named entity recognition by studying
special phenomena.
Journal of Biomedical Infor-
matics, 37(6):411–422.
Yue Zhang and Stephen Clark. 2009. Transition-based
parsing of the chinese treebank using a global dis-
criminative model. In Proc. of IWPT.
Guodong Zhou. 2006. Recognizing names in biomed-
ical texts using mutual information independence
model and svm plus sigmoid. International Journal
of Medical Informatics, 75(6):456–467.
Guodong Zhou, Jie Zhang, Jian Su, Dan Shen, and
Chewlim Tan. 2004. Recognizing names in biomed-
ical texts: a machine learning approach. Bioinfor-
matics, 20(7):1178–1190.
Appendix
The action constraints are listed as follows:
• The SHIFT action is valid only when the
buffer is not empty.
• The UNARY-X actions are valid only when
the stack is not empty.
• The REDUCE-X actions are valid only when
the stack has two or more elements.
• If the top element of the stack is labeled, then
unary actions are not valid. That is, {X1 →
X2} is not allowed.
• If only one of the top two elements of the
stack is temporary, say X*, then among
all reduce actions, only REDUCE-X* and
REDUCE-X are valid.
• If the top two elements of the stack are both
temporary, then all reduce actions are not al-
lowed.
• If one of the elements in the stack is tempo-
rary, say X*, which means it is not ﬁnished,
then last terminal symbol $ cannot be shifted
until it is reduced to X.

