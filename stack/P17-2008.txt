Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 45–50
Vancouver, Canada, July 30 - August 4, 2017. c⃝2017 Association for Computational Linguistics
https://doi.org/10.18653/v1/P17-2008
Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 45–50
Vancouver, Canada, July 30 - August 4, 2017. c⃝2017 Association for Computational Linguistics
https://doi.org/10.18653/v1/P17-2008
Incorporating Uncertainty into Deep Learning for Spoken Language
Assessment
Andrey Malinin, Anton Ragni, Kate M. Knill, Mark J. F. Gales
University of Cambridge, Department of Engineering
Trumpington St, Cambridge CB2 1PZ, UK
{am969, ar527, kate.knill, mjfg}@eng.cam.ac.uk
Abstract
There is a growing demand for automatic
assessment of spoken English proﬁciency.
These systems need to handle large vari-
ations in input data owing to the wide
range of candidate skill levels and L1s, and
errors from ASR. Some candidates will
be a poor match to the training data set,
undermining the validity of the predicted
grade.
For high stakes tests it is essen-
tial for such systems not only to grade
well, but also to provide a measure of
their uncertainty in their predictions, en-
abling rejection to human graders.
Pre-
vious work examined Gaussian Process
(GP) graders which, though successful, do
not scale well with large data sets. Deep
Neural Networks (DNN) may also be used
to provide uncertainty using Monte-Carlo
Dropout (MCD). This paper proposes a
novel method to yield uncertainty and
compares it to GPs and DNNs with MCD.
The proposed approach explicitly teaches
a DNN to have low uncertainty on train-
ing data and high uncertainty on generated
artiﬁcial data. On experiments conducted
on data from the Business Language Test-
ing Service (BULATS), the proposed ap-
proach is found to outperform GPs and
DNNs with MCD in uncertainty-based re-
jection whilst achieving comparable grad-
ing performance.
1
Introduction
Systems for automatic assessment of spontaneous
spoken language proﬁciency (Fig. 1) are becom-
ing increasingly important to meet the demand for
English second language learning. Such systems
are able to provide throughput and consistency
which are unachievable with human examiners.
This is a challenging task. There is a large vari-
Audio
Grade
Feature
extraction
Speech
recogniser
Text
Features
Grader
Figure 1: Automatic Assessment System
ation in the quality of spoken English across all
proﬁciency levels. In addition, candidates of the
same skill level will have different accents, voices,
mispronunciations, and sentence construction er-
rors. All of which are heavily inﬂuenced by the
candidate’s L1 language and compounded by ASR
errors. It is therefore impossible in practice to ob-
serve all these variants in training. At test time, the
predicted grade’s validity will decrease the more
the candidate is mismatched to the data used to
train the system. For deployment of these systems
to high-stakes tests the performance on all candi-
dates needs to be consistent and highly correlated
with human graders. To achieve this it is impor-
tant that these systems can detect outlier speakers
who need to be examined by, for example, human
graders.
Previously, separate models were used to ﬁl-
ter out ”non-scorable” candidates (Yoon and Xie,
2014; Zechner et al., 2009; Higgins et al., 2011;
Xie et al., 2012). However, such models reject
candidates based on whether they can be scored at
all, rather than an automatic grader’s uncertainty 1
in its predictions. It was shown by van Dalen et al.
(2015) that Gaussian Process (GP) graders give
1Uncertainty is used in the sense of the inverse of conﬁ-
dence to be consistent with Gal and Ghahramani (2016) and
van Dalen et al. (2015).
45

state-of-the-art performance for automatic assess-
ment and yield meaningful uncertainty estimates
for rejection of candidates. There are, however,
computational constraints on training set sizes for
GPs. In contrast, Deep Neural Networks (DNNs)
are able to scale to large data sets, but lack a na-
tive measure of uncertainty. However, Gal and
Ghahramani (2016) have shown that Monte-Carlo
Dropout (MCD) can be used to derive an uncer-
tainty estimate for a DNN.
Alternatively, a Deep Density Network (DDN),
which is a Mixture Density Network (Bishop,
1994) with only one mixture component, may be
used to yield a mean and variance corresponding
to the predicted grade and the uncertainty in the
prediction. Similar to GP and DNNs with MCD,
a standard DDN provides an implicit modelling of
uncertainty in its prediction. This implicit model
may not be optimal for the task at hand. Hence,
a novel approach to explicitly model uncertainty is
proposed in which the DDN is trained in a multi-
task fashion to model a low variance real data dis-
tribution and a high variance artiﬁcial data dis-
tribution which represents candidates with unseen
characteristics.
2
Prediction Uncertainty
The principled method for dealing with uncer-
tainty in statistical modelling is the Bayesian ap-
proach, where a conditional posterior distribution
over grades, g, given inputs, x, and training data
D = {ˆg, ˆx} is computed by marginalizing over all
models:
p(g|x, D) =
∫
p(g|x, M)p(M|D)dM
(1)
where p(M|D) is a prior over a model given the
data. Given the posterior, the predictive mean and
the variance (uncertainty) can be computed using:
µg(x) =
∫
p(g|x, D)gdg
σ2
g(x) =
∫
p(g|x, D)g2dg −µ2
g(x)
(2)
(3)
2.1
Gaussian Processes
Eq.
2, 3 can be analytically solved for a class
of models called Gaussian Processes (GP) (Ras-
mussen and Williams, 2006), a powerful non-
parametric model for regression. The GP induces
a conditional posterior in the form of a normal dis-
tribution over grades g given an input x and train-
ing data D:
p(g|x; D) = N(g; µg(x|D), σ2
g(x|D))
(4)
With mean function µg(x|D) and variance func-
tion σ2
g(x|D), which is a function of the similarity
of an input x to the training data inputs ˆx, where
the similarity metric is deﬁned by a covariance
function k(., .). The nature of GP variance means
that the model is uncertain in predictions for inputs
far away from the training data, given appropriate
choice of k(., .). Unfortunately, without sparsiﬁ-
cation approaches, the computational and mem-
ory requirements of GPs become prohibitively ex-
pensive for large data sets. Furthermore, GPs are
known to scale poorly to higher dimensional fea-
tures (Rasmussen and Williams, 2006).
2.2
Monte-Carlo Dropout
Alternatively, a grader can be constructed using
Deep Neural Networks (DNNs) which have a very
ﬂexible architecture and scale well to large data
sets. DNNs, however, lack a native measure of un-
certainty. Uncertainty estimates for DNNs can be
computed using a Monte-Carlo ensemble approx-
imation to Eq. 2, 3:
ˆµg(x) = 1
N
N
∑
i=1
f(x; M(i))
ˆσ2
g(x) = 1
N
N
∑
i=1
(
f(x; M(i))
)2
−ˆµ2
g(x)
(5)
(6)
where there are N DNN models in the ensemble,
M(i) is a DNN with a particular architecture and
parameters sampled from p(M|D) using Monte
Carlo Dropout (MCD) (Srivastava et al., 2014),
and f(x; M(i)) are the DNN predictions. Recent
work by Gal and Ghahramani (2016) showed that
MCD is equivalent to approximate variational in-
ference in GPs, and can be used to yield mean-
ingful uncertainty estimates for DNNs. Further-
more, Gal and Ghahramani (2016) show that dif-
ferent choices of DNN activation functions corre-
spond to different GP covariance functions. MCD
uncertainty assumes that for inputs further from
the training data, different subnets will produce in-
creasingly differing outputs, leading to larger vari-
ances. Unfortunately, it is difﬁcult to know before-
hand which activation functions accomplish this in
practice.
46

3
Deep Density Networks
Instead of relying on a Monte Carlo approximation
to Eq. 1, a DNN can be modiﬁed to produce a
prediction of both a mean and a variance:
µg(x) = fµ(x; M)
σ2
g(x) = fσ2(x; M)
(7)
(8)
parametrising a normal distribution over grades
conditioned on the input, similar to a GP. This
architecture is a Deep Density Network (DDN),
which is a Mixture Density Network (MDN)
(Bishop, 1994) with only one mixture component.
DDNs are trained by maximizing the likelihood of
the training data. The variance of the DDN rep-
resents the natural spread of grades at a given in-
put. This is an implicit measure of uncertainty, like
GP and MCD variance, because it is learned au-
tomatically as part of the model. However, this
doesn’t enforce higher variance further away from
training points in DDNs. It is possible to explic-
Figure 2: Desired variance characteristic
itly teach a DDN to predict a high or low vari-
ance for inputs which are unlike or similar to the
training data, respectively (Fig. 2). This requires
a novel training procedure. Two normal distribu-
tions are constructed: a low-variance real (train-
ing) data distribution pD and a high-variance arti-
ﬁcial data distribution pN, which models data out-
side the real training data region. The DDN needs
to model both distributions in a multi-task (MT)
fashion. The loss function for training the DDN
with explicitly speciﬁed uncertainty is the expec-
tation over the training data of the KL divergence
between the distribution it parametrizes and both
the real and artiﬁcial data distributions:
L =
Eˆx[KL(pD||p(g|ˆx; M)] +
α · E˜x[KL(pN||p(g|˜x; M)]
(9)
where α is the multi-task weight.
The DDN with explicit uncertainty is trained in
a two stage fashion. First, a standard DDN M0
is trained, then a DDN M is instantiated using the
parameters of M0 and trained in a multi-task fash-
ion. The real data distribution pD is deﬁned by M0
(Eq. 7, 8). The artiﬁcial data distribution pN is con-
structed by generating artiﬁcial inputs ˜x and the
associated mean and variance targets µ(˜x), σ2(˜x):
pN = N(g; fµ(˜x; M0), σ2(˜x))
(10)
The predictions of M0 are used as the targets for
µ(˜x). The target variance σ2(˜x) should depend
on the similarity of ˜x to the training data. Here,
this variance is modelled by the squared normal-
ized Euclidean distance from the mean of ˆx, with
a diagonal covariance matrix, scaled by a hyper-
parameter λ. The artiﬁcial inputs ˜x need to be
different to, but related to the real data ˆx. Ide-
ally, they should represent candidates with unseen
characteristics, such as L1, accent and proﬁciency.
A simple approach to generating ˜x is to use a Fac-
tor Analysis (FA) (Murphy, 2012) model trained
on ˆx. The generative model of FA is:
˜x ∼N(W z + µ, γΨ), z ∼N(0, γI)
(11)
where W is the loading matrix, Ψ the diagonal
residual noise variance, µ the mean, all derived
from ˆx, and γ is used to control the distance of
the generated data from the real training data re-
gion. During training the artiﬁcial inputs are sam-
pled from the FA model.
4
Experimental Results
Figure 3: An example Rejection Plot
AUCRR = AUCvar
AUCmax
(12)
As previously stated, the operating scenario is
to use a model’s estimate of the uncertainty in
47

(a) GP
(b) MCD
(c) DDN
(d) DDN+MT
Figure 4: Rejection Plots for models
its prediction to reject candidates to be assessed
by human graders for high-stakes tests, maximiz-
ing the increase in performance while rejecting the
least number of candidates. The rejection process
is illustrated using a rejection plot (Fig. 3). As the
rejection fraction is increased, model predictions
are replaced with human scores in some particular
order, increasing overall correlation with human
graders. Fig. 3 has 3 curves representing differ-
ent orderings: expected random rejection, optimal
rejection and model rejection. The expected ran-
dom performance curve is a straight line from the
base predictive performance to 1.0, representing
rejection in a random order. The optimal rejec-
tion curve is constructed by rejecting predictions
in order of decreasing mean square error relative
to human graders. A rejection curve derived from
a model should sit between the random and op-
timal curves. In this work, model rejection is in
order of decreasing predicted variance.
The following metrics are used to assess and
compare models: Pearson Correlation Coefﬁcient
(PCC) with human graders, the standard perfor-
mance metric in assessment (Zechner et al., 2009;
Higgins et al., 2011); 10% rejection PCC, which
illustrates the predictive performance at a partic-
ular operating point, i.e. rejecting 10% of candi-
dates; and Area under a model’s rejection curve
(AUC) (Fig 3). However, AUC is inﬂuenced by
the base PCC of a model, making it difﬁcult to
compare the rejection performance. Thus, a metric
independent of predictive performance is needed.
The proposed metric, AUCRR (Eq. 12), is the ratio
of the areas under the actual (AUCvar) and optimal
(AUCmax) rejection curves relative to the random re-
jection curve. Ratios of 1.0 and 0.0 correspond to
perfect and random rejection, respectively.
All
experiments
were
done
using
33-
dimensional pronunciation, ﬂuency and acoustic
features derived from audio and ASR transcrip-
tions of responses to questions from the BULATS
exam (Chambers and Ingham, 2011). The ASR
system has a WER of 32% on a development
set. The training and test sets have 4300 and 224
candidates, respectively. Each candidate provided
a response to 21 questions, and the features used
are aggregated over all 21 questions into a single
feature vector. The test data was graded by expert
graders at Cambridge English.
These experts
have inter-grader PCCs in the range 0.95-0.97.
Candidates are equally distributed across CEFR
grade levels (Europe, 2001).
48

The input features where whitened by subtract-
ing the mean and dividing by the standard devia-
tion for each dimension computed on all training
speakers. The Adam optimizer (Kingma and Ba,
2015), dropout (Srivastava et al., 2014) regulariza-
tion with a dropout keep probability of 0.6 and an
exponentially decaying learning rate are used with
decay factor of 0.86 per epoch, batch size 50. All
networks have 2 hidden layers with 180 rectiﬁed
linear units (ReLU) in each layer. DNN and DDN
models were implemented in Tensorﬂow (Abadi
et al., 2015). Models were initialized using the
Xavier Initializer (Glorot and Bengio, 2010). A
validation set of 100 candidates was selected from
the training data to tune the model and hyper-
parameters. GPs were run using Scikit-Learn (Pe-
dregosa et al., 2011) using a squared exponential
covariance function.
Grader
PCC
10% Rej.
AUC
AUCRR
PCC
GP
0.876
0.897
0.942
0.233
MCD
0.879
0.892
0.937
0.040
MCDtanh
0.865
0.886
0.938
0.226
DDN
0.871
0.887
0.941
0.230
+MT
0.871
0.902
0.947
0.364
Table 1: Grading and rejection performance
The Gaussian Process grader, GP, is a com-
petitive baseline (Tab.
1).
GP variance clearly
yields uncertainty which is useful for rejection. A
DNN with ReLU activation, MCD, achieves grad-
ing performance similar to the GP. However, MCD
fails to yield an informative uncertainty for rejec-
tion, with performance barely above random. If
the tanh activation function, MCDtanh, is used in-
stead, then a DNN is able to provide a meaningful
measure of uncertainty using MCD, at the cost of
grading performance. It is likely that ReLU ac-
tivations correspond to a GP covariance function
which is not suited for rejection on this data.
The standard DDN has comparable grading per-
formance to the GP and DNNs. AUCRR of the DDN
is on par with the GP, but the 10% rejection PCC
is lower, indicating that the DDN is not as effec-
tive at rejecting the worst outlier candidates. The
approach proposed in this work, a DDN trained in
a multi-task fashion (DDN+MT), achieves signif-
icantly higher rejection performance, resulting in
the best AUCRR and 10% rejection PCC, showing
its better capability to detect outlier candidates.
Note, AUC reﬂects similar trends to AUCRR, but not
as clearly, which is demonstrated by Fig. 4. The
model was found to be insensitive to the choice
of hyper-parameters α and γ, but λ needed to be
set to produce target noise variances σ2(˜x) larger
than data variances σ2(ˆx).
5
Conclusions and Future Work
A novel method for explicitly training DDNs to
yield uncertainty estimates is proposed. A DDN
is a density estimator which is trained to model
two distributions in a multi-task fashion (1) the
low variance (uncertainty) true data distribution
and (2) a generated high variance artiﬁcial data
distribution. The model is trained by minimizing
the KL divergence between the DDN and the true
data distribution (1) and between the DDN and the
artiﬁcial data distribution (2). The DDN should
assign its prediction of low or high variance (un-
certainty) if the input is similar or dissimilar to the
true data respectively. The artiﬁcial data distribu-
tion is given by a factor analysis model trained on
the real data. During training the artiﬁcial data is
sampled from this distribution.
This method outperforms GPs and Monte-Carlo
Dropout in uncertainty based rejection for auto-
matic assessment.
However, the effect of the
nature of artiﬁcial data on rejection performance
should be further investigated and other data
generation methods, such as Variational Auto-
Encoders (Kingma and Welling, 2014), and met-
rics to assess similarity between artiﬁcial and real
training data should be examined. The proposed
approach must also be assessed on other tasks and
datasets.
Acknowledgments
This research was funded under the ALTA Insti-
tute, University of Cambridge as well as the En-
gineering and Physical Sciences Research Coun-
cil. Thanks to Cambridge English, University of
Cambridge, for support and access to the BULATS
data.
49

References
Mart´ın Abadi, Ashish Agarwal, Paul Barham, Eugene
Brevdo, Zhifeng Chen, Craig Citro, Greg S. Cor-
rado, Andy Davis, Jeffrey Dean, Matthieu Devin,
Sanjay Ghemawat, Ian Goodfellow, Andrew Harp,
Geoffrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh
Levenberg, Dan Man´e, Rajat Monga, Sherry Moore,
Derek Murray, Chris Olah, Mike Schuster, Jonathon
Shlens, Benoit Steiner, Ilya Sutskever, Kunal Tal-
war, Paul Tucker, Vincent Vanhoucke, Vijay Va-
sudevan, Fernanda Vi´egas, Oriol Vinyals, Pete
Warden, Martin Wattenberg, Martin Wicke, Yuan
Yu, and Xiaoqiang Zheng. 2015.
TensorFlow:
Large-scale machine learning on heterogeneous sys-
tems.
Software available from tensorﬂow.org.
http://tensorﬂow.org/.
C. M. Bishop. 1994. Mixture density networks. Tech-
nical Report NCRG 4288, Neural Computing Re-
search Group, Department of Computer Science, As-
ton University .
Lucy Chambers and Kate Ingham. 2011. The BULATS
online speaking test. Research Notes 43:21–25.
Council of Europe. 2001. Common European frame-
work of reference for languages: Learning, teach-
ing, assessment. Cambridge, U.K: Press Syndicate
of the University of Cambridge.
Yarin Gal and Zoubin Ghahramani. 2016. Dropout as a
Bayesian Approximation: Representing Model Un-
certainty in Deep Learning. In Proceedings of the
33rd International Conference on Machine Learn-
ing (ICML-16).
Xavier Glorot and Yoshua Bengio. 2010. Understand-
ing the difﬁculty of training deep feedforward neural
networks. In Aistats. volume 9, pages 249–256.
Derrick Higgins, Xiaoming Xi, Klaus Zechner, and
David Williamson. 2011.
A three-stage approach
to the automated scoring of spontaneous spo-
ken responses.
Computer Speech and Language
25(2):282–306.
Diederik P. Kingma and Jimmy Ba. 2015. Adam: A
Method for Stochastic Optimization.
In Proceed-
ings of the 3rd International Conference on Learn-
ing Representations (ICLR).
Diederik P. Kingma and Max Welling. 2014.
Auto-
encoding variational bayes. In Proceedings of the
2nd International Conference on Learning Repre-
sentations (ICLR).
Kevin P. Murphy. 2012. Machine Learning. The MIT
Press.
F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel,
B. Thirion, O. Grisel, M. Blondel, P. Pretten-
hofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Pas-
sos, D. Cournapeau, M. Brucher, M. Perrot, and
E. Duchesnay. 2011. Scikit-learn: Machine learning
in Python. Journal of Machine Learning Research
12:2825–2830.
Carl
Edward
Rasmussen
and
Christopher
K.
I.
Williams. 2006. Gaussian Processes for Machine
Learning. MIT Press.
Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky,
Ilya Sutskever, and Ruslan Salakhutdinov. 2014.
Dropout: a simple way to prevent neural networks
from overﬁtting. Journal of Machine Learning Re-
search 15(1):1929–1958.
Rogier C. van Dalen, Kate M. Knill, and Mark J. F.
Gales. 2015. Automatically Grading Learners’ En-
glish Using a Gaussian Process. In Proceedings of
the ISCA Workshop on Speech and Language Tech-
nology for Education (SLaTE).
Shasha Xie, Keelan Evanini, and Klaus Zechner. 2012.
Exploring Content Features for Automated Speech
Scoring. In Proceedings of the 2012 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies (NAACL-HLT).
Su-Youn Yoon and Shasha Xie. 2014.
Similarity-
Based Non-Scorable Response Detection for Auto-
mated Speech Scoring. In Proceedings of the Ninth
Workshop on Innovative Use of NLP for Building
Educational Applications.
Klaus Zechner, Derrick Higgins, Xiaoming Xi, and
David M. Williamson. 2009. Automatic scoring of
non-native spontaneous speech in tests of spoken
english.
Speech Communication 51(10):883–895.
Spoken Language Technology for Education Spoken
Language.
50

