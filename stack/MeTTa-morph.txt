MeTTa-morph
Presenters: Patrick Hammer, Peter Isaev

Design goals
➢
Speed up a MeTTa subset with a compiler
➢
Not a full MeTTa replacement!
➢
Allow conveniently calling compiled MeTTa 
functions from MeTTa interpreter

Multi-step compilation
MeTTA
Scheme
 C
Binary
1→2: Transformation with Scheme Macros
2→3: Chicken Scheme compiler
3→4: GCC/Clang C compiler

Hyperon integration
➢
Easily integrated with Hyperon API: !(extend-py! mettamorph)
➢
Allows speeding up crucial components considerably in the short-term
➢
Compilation invoked via !(compile “code”), no plumbing needed!

Timing
➢
Tail-recursive 
factorial and tuple 
element counting
➢
Range via tuple 
concatenation
➢
Non-recursive 
tuple disjoint check

Speedup
Runtime
!(factorial 30)
!(range 1 30)
!(TupleCount 
  (1 … 30))
!(StampDisjoint 
(1 … 30) (1 … 30))
MeTTa
3.919s
8.489s
15.459s
2.068s
MeTTa-morph
0.017s
0.018s
0.025s
0.020s
Speedup
227
447
616
103
➢
MeTTa-morph extension is ready to be used!
➢
Speedup factor usually in the range of hundreds!

But can it run MeTTa-NARS? YES!

Takeaways
➢
Fast execution of MeTTa is possible and demonstrated!
➢
Potential design aspects could be shared with the Rholang translation effort?
➢
Limitations are listed in the repository.
Repository: https://github.com/patham9/metta-morph

Thank you!
Presenters: Patrick Hammer, Peter Isaev

