Emergence, Complexity and Computation ECC
Recent Advances 
in the Theory and 
Application of
Fitness Landscapes
Hendrik Richter 
Andries P. Engelbrecht Editors

Emergence, Complexity and Computation
Volume 6
Series Editors
Ivan Zelinka, Technical University of Ostrava, Czech Republic
Guanrong Chen, City University of Hong Kong, Hong Kong
Andrew Adamatzky, University of the West of England, Bristol, United Kingdom
Editorial Board
Otto Rössler, Institute of Physical and Theoretical Chemistry, Tübingen, Germany
Edward Ott, University of Maryland, USA
Ajith Abraham, MirLabs, USA
Vaclav Snasel, Technical University of Ostrava, Czech Republic
Jouni Lampinen, University of Vaasa, Finland
Emilio Corchado, University of Salamanca, Spain
Hendrik Richter, HTWK Leipzig University of Applied Sciences, Germany
Martin Middendorf, University of Leipzig, Germany
Mohammed Chadli, University of Jules Verne, France
Juan C. Burguillo, University of Vigo, Spain
Sergej ˇCelikovský, Academy of Sciences of the Czech Republic, Czech Republic
Donald Davendra, Technical University of Ostrava, Czech Republic
Juan A. Rodriguez-Aguilar, IIIA-CSIC, Spain
Ana Lucia C. Bazzan, Universidade Federal do Rio Grande do Sul, Porto Alegre RS Brasil
Gheorghe P˘aun, Romanian Academy, Bucharest, Romania
Linqiang Pan, Huazhong University of Science and Technology, Wuhan, China
Ivo Vondrák, Technical University of Ostrava, Czech Republic
Andrew Ilachinski, Center for Naval Analyses, USA
For further volumes:
http://www.springer.com/series/10624

About this Series
“The Emergence, Complexity and Computation (ECC) series publishes new devel-
opments, advancements and selected topics in the ﬁelds of complexity, computation
and emergence. The series focuses on all aspects of reality-based computation ap-
proaches from an interdisciplinary point of view especially from applied sciences,
biology, physics, or Chemistry. It presents new ideas and interdisciplinary insight
on the mutual intersection of subareas of computation, complexity and emergence
and its impact and limits to any computing based on physical limits (thermodynamic
and quantum limits, Bremermann’s limit, Seth Lloyd limits...) as well as algorith-
mic limits (Gödel’s proof and its impact on calculation, algorithmic complexity,
the Chaitin’s Omega number and Kolmogorov complexity, non-traditional calcula-
tions like Turing machine process and its consequences,...) and limitations arising
in artiﬁcial intelligence ﬁeld. The topics are (but not limited to) membrane comput-
ing, DNA computing, immune computing, quantum computing, swarm computing,
analogic computing, chaos computing and computing on the edge of chaos, com-
putational aspects of dynamics of complex systems (systems with self-organization,
multiagent systems, cellular automata, artiﬁcial life,...), emergence of complex sys-
tems and its computational aspects, and agent based computation. The main aim of
this series it to discuss the above mentioned topics from an interdisciplinary point
of view and present new ideas coming from mutual intersection of classical as well
as modern methods of computation. Within the scope of the series are monographs,
lecture notes, selected contributions from specialized conferences and workshops,
special contribution from international experts, as well as selected PhD theses."

Hendrik Richter · Andries P. Engelbrecht
Editors
Recent Advances in the
Theory and Application
of Fitness Landscapes
ABC

Editors
Hendrik Richter
HTWK Leipzig University of Applied
Sciences
Faculty of Electrical Engineering
and Information Technology
Leipzig
Germany
Andries P. Engelbrecht
Department of Computer Science
University of Pretoria
Pretoria
South Africa
ISSN 2194-7287
ISSN 2194-7295
(electronic)
ISBN 978-3-642-41887-7
ISBN 978-3-642-41888-4
(eBook)
DOI 10.1007/978-3-642-41888-4
Springer Heidelberg New York Dordrecht London
c⃝Springer-Verlag Berlin Heidelberg 2014
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of
the material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations, recitation,
broadcasting, reproduction on microﬁlms or in any other physical way, and transmission or information
storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology
now known or hereafter developed. Exempted from this legal reservation are brief excerpts in connection
with reviews or scholarly analysis or material supplied speciﬁcally for the purpose of being entered
and executed on a computer system, for exclusive use by the purchaser of the work. Duplication of
this publication or parts thereof is permitted only under the provisions of the Copyright Law of the
Publisher’s location, in its current version, and permission for use must always be obtained from Springer.
Permissions for use may be obtained through RightsLink at the Copyright Clearance Center. Violations
are liable to prosecution under the respective Copyright Law.
The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication
does not imply, even in the absence of a speciﬁc statement, that such names are exempt from the relevant
protective laws and regulations and therefore free for general use.
While the advice and information in this book are believed to be true and accurate at the date of pub-
lication, neither the authors nor the editors nor the publisher can accept any legal responsibility for any
errors or omissions that may be made. The publisher makes no warranty, express or implied, with respect
to the material contained herein.
Printed on acid-free paper
Springer is part of Springer Science+Business Media (www.springer.com)

To my daughter Malena Charlotte, who was
conceived, carried, and born while this book
was being prepared – Hendrik Richter
To Anneli Carien, who came to this world
while the book was being prepared – Andries
Engelbrecht

Foreword:
Statable and Non–prestatable Fitness
Landscapes
Stuart Kauffman
It is an honor to be asked to write a foreword for this ﬁne book on recent advances in
the theory and application of ﬁtness landscapes. The topic is vast, the book a superb
review of much of its current status. My task is not to present a pr´ecis of the book
itself, but, I hope, to place its topics in an even wider context as I, with my own
limited biases, see that context.
Topic 1
The ﬁrst context is that of this book. We are confronted, typically, with a well for-
mulated continuous or discrete complex combinatorial optimization problem of a
ﬁxed ﬁtness landscape and seek a search algorithm to ﬁnd good optima or even the
global optima. Here the landscape constitutes a ﬁxed “potential function” whose
peaks or valleys are the desired solutions. Derived from this, as discussed so well
in this book, are co-evolutionary problems in which two or more landscapes are
coupled, agents on each landscape making adaptive moves and thereby deforming
the other landscape. Such systems are general dynamical systems and known to ex-
hibit, as discussed in this book, two modes of behavior, one in which the agents
reach mutually consistent local optima and the system stops changing. In the other,
as agents move, their landscapes deform even more rapidly, resulting in chaotic be-
havior, sometimes called the Red Queen effect. Between these two regimes lies a
“critical” phase transition. In general, these models are a subset of game theory in
which each agent can, typically, only change to neighboring strategies in a genet-
ically encoded strategy space. The mutually consistent local peak solution is the
generalization of pure strategy Nash equilibria from games where any move can be
made in strategy space, to those in which only neighboring moves can be made.
Past work by this author has given initial results that optimal solutions are at least
sometimes found at the critical phase transition [1]. Landscapes can occur without
and with neutrality. The statistical structure of such landscapes is a major topic of
concern, and with it, use of measures of that statistical structure, such as landscape

VIII
Stuart Kauffman
correlation lengths, Stadler et al.’s “reachability topology” (as discussed in Chapter
6 of this book) and others, to attempt to predict how hard learning or adaptation may
be on ﬁxed, or, harder, co-evolving landscapes. Beyond this, in this book are efforts
to consider time varying landscapes that may vary in stochastic or non-stochastic
ways. This latter topic will become of major concern below in this foreword. The
well known no free lunch theorem suggests that averaged over all landscapes, no
search algorithm outperforms any other algorithm. This book contains efforts noted
above to study the structure of a given landscape to choose algorithms that may be
better than average or even very good on a given landscape. The problem is stated
to be insoluble in general, but sometimes good algorithms can be found.
Topic 2
A second fundamental issue, which is outside the scope of this book, is the kinds of
problems, the kinds of systems we or, say evolution, seeks to optimize, to generate
what kinds of landscapes? Here little work, to my knowledge has been done. But it
is of fundamental importance. I present a brief conjecture that some problems are
not solvable by any local search algorithm in less than exponential time. Consider
the shortest algorithm to produce a given output on a universal computer. Let its
(unprovable)length be N. Gregory Chaitin has shown on the N dimensional Boolean
hypercubethere is on order of a single vertex that constitutes this program, where the
binary string at that vertex is the program for the computer. Chaitin then shows that if
one considers programs of length N, N +1, N +2, ..., N +C, there are in the order of
1, 2, 4,..., 2C vertices on the hypercube that satisfy the requirement to be a program
of that length that solves the problem. Now my conjecture, perhaps able to become
a theorem: Take a ﬁxed length input string and choose the single correct vertex
on the N dimensional Boolean hypercube where only that single vertex yields the
proper output on that input. Run the randomly chosen input string on the “correct”
vertex and observe the output string taken as the proper solution. Now choose the
N “one mutant neighboring points” to the “correct” vertex, and run the input string
on each of these to obtain an output string. Use normalized compression distance to
compare the correct output string and the output string of a given 1 mutant neighbor
of the correct vertex. Normalized compression distance, NCD, a universal measure
of, essentially, the mutual information between these two strings. Use 1 −NCD
as a measure of the “ﬁtness” of the program at that one mutant neighbor of the
correct vertex. Do this for all vertices on the N dimensional hypercube to obtain
a “ﬁtness landscape” of the ﬁtness of each program, encoded at each vertex, to
generate an output similar or dissimilar to the correct output. My bet is that for the
minimal length program, length N, the resulting ﬁtness landscape is random. That
is, I bet, to be proven, that the ﬁtness at neighboring vertices are random in value. It
is known that such landscapes have on the order of
2N
N+1 local optima. Thus ﬁnding
the global optimum with the correct minimal program is NP hard, requiring search
of the entire space or at least, as the space is exponential in N, a ﬁxed fraction of this
exponentially large space; hence, for large N, not solvable in less than exponential

Foreword: Statable and Non–prestatable Fitness Landscapes
IX
time. My further guess is that if one started with a redundant program, longer than
N, i.e. N +C, due to that redundancy, the ﬁtness landscape on the N +C Boolean
hypercube, it would be a correlated landscape whose correlation length increases as
C increases. My further bet is that no procedure can start with an N +C landscape
and evolve to ever smaller C approaching C = 0 to achieve the minimal program,
because as C decreases, the landscape becomes less correlated then uncorrelated.
My guess is that as C decreases, correlations on the landscape may be related such
that the evolving system is led into a region of the N dimensional space close to
the correct vertex, but on the C = 0 random landscape, no local search algorithm
is likely to ﬁnd the nearby correct solution before wandering off on the random
landscape away from the correct solution. “Likely” may be quantiﬁable.
Topic 3
This discussion sufﬁces to relate some problems, here ﬁnding the shortest algorithm
to solve a problem and the structure of the induced ﬁtness landscape. More it re-
lates to the next issue, for the above problem, in my conjecture, cannot be solved
by mutation and selection alone, and perhaps not by recombination, mutation and
selection together, for recombination does not work on random landscapes [2]. If so,
no evolutionary process in biology can evolve the shortest program. All this needs
to become a set of theorems, relating to the issue of what problems induce what
landscapes and why.
1. Do biological and economic and other evolutionary processes “tune” the very
structure of the ﬁtness landscapes upon which they evolve? This book does not
address this topic. In [1], I had a ﬁrst try at the problem, and believe I showed
a model in which, with no group selection, “organisms” co-evolving on land-
scapes and invading one another’s niches could evolve the structure of the ﬁtness
landscapes upon which they evolved. In this model, an invading species, if suc-
cessful in a new niche, carried with it the ruggedness of its own landscape. Thus
landscape ruggedness itself becomes an evolving feature of the total evolving
system, and landscape ruggedness itself can evolve. In this model, the system
evolves from Red Queen, and from the stationary Nash equilibrium regime to the
critical phase transition between the two, and, on average, the life time of species
increases and their ﬁtness increases. These results suggest that an evolutionary
process can, in fact, evolve the very structure and couplings among co-evolving
agents to the long term beneﬁt of all the currently evolving agents. This topic
remains very unexplored but is likely to be of major importance. It suggests that
biological and economic evolution are “tuning” the statistical structure of the
very problems and thus ﬁtness landscapes over which they evolve to become
more “evolvable” and “solvable”. Much remains to be learned.
2. Adaptive evolution in the biosphere and economy and elsewhere is probably
not only occurring on time deforming and stochastically time deforming land-
scapes, it is far worse: Not only can we not characterize the stochastic process by
which landscapes change, we cannot even prestate the possibility space, that is

X
Stuart Kauffman
the ever changing phase space of these evolutionary processes, hence we can nei-
ther mathematize actual evolution of the biosphere, biosphere and ecology, or the
economy or culture or law. And even if we could write down laws of motion for
this evolution, we would lack foreknowledge of the “niche” boundary conditions
and so could not integrate the equations we do not have anyway. In short, if what
I say with my colleagues, Giuseppe Longo, Mael Montevil, and myself [4, 5], is
correct after careful examination, no laws entail the evolution of the biosphere
or, a fortiori the economy or probably many aspects of life. Not only do we not
know what will happen, we do not even know what can happen. Thus we cannot
formulate a probability distribution over what “can happen” for we do not know
the sample space beforehand. Therefore we cannot formulate a stochastic model
of changing landscapes for, as we will see next, we cannot prestate the variables
that will become relevant, so we do not know the space over which to formulate
a ﬁtness landscape.
Topic 4
I discuss the fourth topic in several sections below.
1. The Non Ergodic Universe Above the Level of Atoms
Has the universe created in its 13.7 billion years all known atoms? Yes. But now
consider proteins made of 20 kinds of amino acids strung together in a linear se-
quence by peptide bonds. A typical biological protein has a length of 300 amino
acids. Consider, then, all possible proteins length 20 amino acids. There are 20200
or about 10260 such possible proteins. Now the universe has about 1080 particles.
Its fastest time scale is the Planck time scale of 10−43 seconds. Ignoring space–
like separation, if all the universe were doing in the past 13.7 billion years was
constructing, in parallel, different proteins of length 200, it would require the cur-
rent age of the universe raised to the 37th power to construct all possible proteins
of length 200 just once. This has physical meaning. At levels above the atom in
complexity, the universe is on a unique trajectory that cannot become ergodic in
the lifetimes of many universes. Thus, most complex things will never exist, so
those complex things that get to exist have a special status.
2. Kantian Wholes
Kant said that in an “organized being the parts exist for and by means of the
parts”, that is, the whole exists by means of the parts and the parts exist by means
of the whole. He was thinking of organisms.
3. Collectively Autocatalytic Peptide Sets as Minimal Kantian Wholes
Gonen Ashkenasy [6] at the Ben Gurion University, has a set of 9 peptides, each
of which catalyzes the formation of the next peptide by ligating two fragments of
that peptide, around a 9 peptide circle of peptides. The set as a whole is collec-
tively autocatalytic. Note that no peptide catalyzes its own formation; the set as a
whole collectively catalyses its own formation. As a side comment, Ashkenasy’s
results demonstrate conclusively that molecular reproduction does not depend

Foreword: Statable and Non–prestatable Fitness Landscapes
XI
upon DNA– or RNA–like template replication. Now, calling catalysis of a reac-
tion a “catalytic task”, the 9 peptide collectively autocatalytic set achieves a task
closure. All the reactions that must be catalyzed from within the set, are catalyzed
from within the set. The system is also an open thermodynamic one deriving food
from the two fragments of each peptide maintained at constant concentration.
Now note that a collectively autocatalytic set is a minimal model of a Kan-
tian Whole, the parts, peptides, exist for and by means of the whole task closure,
and the whole exists by means of the peptide parts. Note next, as an essential
side point, that given the collectively autocatalytic set, we can deﬁne the func-
tion of a part by its causal consequences that serve to maintain the collectively
autocatalytic whole; that is, catalyzing the appropriate next ligation reaction, not
wiggling water in the petri plate. So functions that are real in the universe are
a subset of the causal consequences of the parts. So Kantian wholes have parts
with some causal consequences as functions and other causal consequences as
irrelevant side effects in that environment.
4. Task Closure in an Evolving Reproducing Bacterium
A reproducing bacterium achieves a task closure that is much wider than mere
catalysis. Membranes are formed, DNA replicated, chemiosmotic pumps built
and vectored to proper membrane locations, receptors are constructed and located
in membranes all for the bacterium to reproduce.
5. The Uses or Functions of a Screw Driver Cannot be Algorithmically Enumerated
I now jump to a seemingly strange topic. Can you list all the uses of a screw
driver? Screw in a screw, open a paint can, wedge open or closed a door, stab an
assailant, prop up a piece of cardboard....The uses of a screw driver are indeﬁnite
in number. Next, the integers are orderable, 1,2,3,4,..., but are the uses of a
screw driver orderable? Say beyond its “ﬁrst use” to screw in screws? No. But
this means that there is no effective procedure, or algorithm, to list all the uses of
a screw driver. This is the famous unsolved frame problem of computer science.
6. Evolution Find Unprestatable Uses of Molecular Screw Drivers in Evolving
cells, Then Selected at the Level of the Kantian Whole Cells
In an evolving bacterium in, say a new environment, all that has to happen is that
someone or more molecular or cellular component screw drivers ﬁnd a use that
enhances the ﬁtness of the evolving cell. Then if there is heritable variation for
that new or improved use, it will be grafted into evolution by Natural Selection.
But we cannot list, hence cannot prestate the new use of the molecular screw
driver selected at the level of the Kantian whole cell. Thus, we cannot prestate
the way the very phase space, the space of possibilities, of evolution changes.
(Note that this is the arrival of the ﬁttest, never solved by the NeoDarwinian
synthesis.)

XII
Stuart Kauffman
7. The Evolution of the Biosphere is Not Mathematizable as Integrable Laws of
Motion
Since we cannot prestate the new functionality of the cellular or molecular screw
driver, we cannot prestate the way the evolving phase space of evolution changes.
Hence we cannot write down equations of motion for this evolution. Nor, since we
lack prestatement of niche boundary conditions, could we integrate those equa-
tions of motion, even if we were to have them!
This implies that the evolution of the biosphere is entailed by no law. If cor-
rect, reductionism end at the watershed of the evolution of life. In turn this im-
plies that we cannot prestate the space of possibilities that constitute the space
over which there is a prestatable ﬁtness landscape. Further, because we cannot
prestate that ever changing phase space, we do not know its sample space, so
we cannot construct a probability measure. In turn, this implies that we cannot
formulate stochastic processes for the changes in the ﬁtness landscape.
8. The Evolving Biosphere, Without Selection “Acting to Achieve It”, Persistently
Creates Its Own Future Possibilities
The last point I wish to make is beyond the subject of ﬁtness landscapes them-
selves, but one which I ﬁnd to be stunning. If true, as what I shall say appears
to be, it changes our view of the reality we live in in the evolving living world.
I need to deﬁne Darwinian Preadaptations. Were we to ask Darwin the function
of the human heart, he would respond that it is to pump blood. But we might
say hearts make heart sounds and jiggle water in the pericardial sac. Why are
these causal consequences of the heart not its function? Darwin would answer
that we have hearts because their pumping blood was of selective signiﬁcance in
our ancestors. Note that therefore, as with the peptide collectively autocatalytic
set above, the function of the heart is a subset of its causal consequences. More
Darwin is also implicitly answering the question of why a complex organ, the
heart, exists in the non-ergodic universe: Because it plays a role in sustaining
Kantian Whole organisms in existence in the non-ergodic universe.
Next, Darwin noted that a causal consequence of the heart, or other organ, of
no selective signiﬁcance in the current environment, might have selective signiﬁ-
cance in a new environment and be selected for that new functional signiﬁcance.
A new function might arise. These are called Darwinian preadaptations, or by
Gould, exaptations.
I give but one example: Some ﬁsh have an organ called a swim bladder. The
ratio of air and water in the bladder-sac determines neutral buoyancy in the water
column. Paleontologists believe that the swim bladder evolved from the lungs of
lung ﬁsh. Water got into some lung(s), now there were sacs partly ﬁlled with air
and water, poised to evolve into swim bladders. Let’s assume the paleontologists
are right.
I now ask three questions: First, did a new function come to exist in the bio-
sphere? Yes, neutral buoyancy in the water column. Note that evolution here
solves the frame problem which algorithmic computer science cannot solve. In
my understanding, the frame problem is that, e.g. for a robot in a room, one

Foreword: Statable and Non–prestatable Fitness Landscapes
XIII
provides a ﬁnite list of “affordances” for objects in the room, e.g. corner of the
room, ﬂoor electric plug, where the affordance ﬁnite list is of “is a”, “does a”,
“uses a”, “needs a”, etc. Then anything that can be deduced from this ﬁnite list
is within the frame yielded by the ﬁnite list of affordances. But uses, as in the
screw driver uses, cannot be captured by any ﬁnite list in the sense that no ef-
fective procedure can do so. We solve the frame problem as humans all the time.
We ﬁnd new uses for object and processes. An example: Engineers, the story/fact
says, were trying to invent the tractor. They needed a huge engine block, got one,
mounted it on a series of ever bigger chassis, all of which broke. Finally an en-
gineer said, “You know, the engine block itself is so big and rigid, that we can
use the engine block itself as the chassis, and hang everything else off the engine
block.” And that was the invention of the tractor and how they are made. So too
were formula racing cars. This It use of the engine block’s rigidity for a new
function, is a technological Darwinian preadaptation and could not, in general be
prestated. This is the solving of the frame problem. As I said we do it all the time,
Turing machines cannot, hence I believe human mind is not algorithmic, see my
speculative paper, Answering Descartes: Beyond Turing [3]. So too, I think the
swim bladder solves the frame problem.
Second, did the swim bladder, once it exists, alter the future evolution of the
biosphere? Yes, new species evolved with swim bladders, new proteins evolved.
And particularly important, once the swim bladder exists, a worm or bacterium
or both might evolve to live in swim bladders, so the existing swim bladder is
what I’ll call an “Empty Adjacent Possible Niche”. Thus the swim bladder, once
it exists, changes the future possible evolution of the biosphere. I return to this for
it is the main point of this last section. Third, now that you know what preadap-
tations are, can you name all possible Darwinian preadaptations, just for human
evolution in the next 4 million years? We all say NO. Why? Well, how would we
name all possible selective environments? Now that we had listed all those en-
vironments? How would we list all the features of one or several organisms that
might constitute preadaptations? We cannot. And the reason was given above,
“the uses” of a screw driver are indeﬁnite in number and unorderable, so no al-
gorithm can be an effective procedure to list them all. And if we take one use of
a screw driver, say to open a can of paint, the number of other objects/processes
that can open a can of paint is indeﬁnite and unorderable, so again, no effective
procedure or algorithm can list them. Hence our no above. Hence we not only do
not know what will happen, we do not even know what can happen.
Now return to the existing swim bladder as an “Empty Adjacent Possible
Niche” that changes the future possible evolution of the biosphere. Do we think
that natural selection acted on a population of lung ﬁsh to “craft” a well function-
ing swim bladder? Yes, of course. The swim bladder is a selected preadaptation,
“achieved” by natural selection. But do we think that natural selection “acted”
in any sense of “act” to “achieve” the swim bladder as a new Adjacent Possi-
ble Empty Niche? NO! Selection was involved in achieving a functioning swim
bladder. But selection was not evolved in creating that swim bladder AS a new
Adjacent Possible Empty Niche. Yet once that niche exists, it alters the future

XIV
Stuart Kauffman
possible evolution of the biosphere, for the worm or bacterium really might come
to evolve to live in the swim bladder.
But this means something profound: Without selection “acting” to do so, the
biosphere is persistently creating its own future possibilities! The biosphere, be-
yond selection, persistently creates what it may become. If the above two sections
are right, reductionism fails for the evolution of life and we are beyond Newton
and Schr¨odinger. If the last section is right, we are beyond even Darwin.
May this ﬁne book add to the growing discussion of all these topics.
Acknowledgements. This work is partially supported by the TEKES FOUNDATION for
my position as a Finland Distinguished Professor.
References
[1] Kauffman, S.: At Home in the Universe. Oxford University Press, New York (1995)
[2] Kauffman, S.: The Origins of Order: Self–organization and Selection in Evolution. Ox-
ford University Press, New York (1993)
[3] Kauffman, S.: Answering Descartes: Beyond Turing. In: Barry Cooper, S., Hodges, A.
(eds.) The Once and Future Turing: Computing the World. Cambridge University Press,
Cambridge (in press, 2013),
http://mitpress.mit.edu/sites/default/files/titles/
alife/0262297140chap4.pdf
[4] Longo, G., Montevil, M., Kauffman, S.: No entailing laws, but enablement in the evolu-
tion of the biosphere (2012), http://arxiv.org/abs/1201.2069
[5] Longo, G., Montevil, M., Kauffman, S.: No entailing laws, but enablement in the evo-
lution of the biosphere. In: Soule, T., Moore, J.H. (eds.) Proc. GECCO Companion, pp.
1379–1392. ACM, New York (2012)
[6] Wagner, N., Ashkenasy, G.: Symmetry and order in systems chemistry. The Journal of
Chemical Physics 130, 164907–164911 (2009)
Santa Fe, N.M. USA, March 6, 2013
Stuart Kauffman

Preface
Observing life on Earth, it is hard to ignore its overwhelming abundance, diver-
sity and beauty, its ﬁnely–tuned structures and forms, and its imaginative as well as
purposeful behaviors and functions. First and foremost this applies to all forms of
natural life, meaning the molecular, carbon– and protein–based forms of life found
on our planet. Clearly on a smaller scale but nevertheless, also instances and exam-
ples of artiﬁcial life forms created in digital computers can exhibit properties that
surprise us in their beauty and complexity. For both cases, arguable for the former
even more so than for the latter, it is as obvious as interesting to ask why life is as it
is and how it came (or comes or will come) into being. It is scientiﬁc consensus and
hence tempting to give a rather simple and in some ways self–explaining answer: by
the mechanism of Darwinian evolution. This certainly is true but simply poses other
questions. How is evolution working? How does it enable the development of life
forms? Are evolutionary developments in some ways directed, or even forced and
can be predicted within certain bounds? Or is evolution directionless, open–ended
and indeterminate with respect to possible outcomes? What role does chance and
randomness play in evolution in general? What can be realistically expected to be
the outcome of a certain period of evolutionary development? What is a meaningful
mathematization of evolutionary dynamics? What requirements and preconditions
must be fulﬁlled for the emergence of complex biological forms and behaviors, may
they be natural or artiﬁcial?
Admittedly, answering all these questions conclusively is far beyond the scope
of this book; in fact, it is beyond the current understanding in the sciences in gen-
eral. Nevertheless, we belief that the foundation for answering these questions is
an understanding of evolution as a dynamical process. This goes along with (and is
unthinkable without) describing the driving forces that enable evolutionary dynam-
ics. Addressing the dynamics of evolution is the main scope of this book, and the
approach we use is the framework of ﬁtness landscapes.
Fitness landscapes are an abstract way for describing the relationship between
the genetically possible (genotype), the actually realized (phenotype) and the sur-
vival/reproduction success (ﬁtness). Differences in the ﬁtness over genotypic space
together with the Darwinian imperative to move into the direction of increasing

XVI
Preface
ﬁtness (codiﬁed by the notion of natural and sexual selection) results into the driv-
ing forces that are behind evolutionary processes. Undeniably, evolution is a deﬁn-
ing feature of natural life. However, we take the view that evolutionary processes
are much more general than biology. In particular, the dynamical processes in evo-
lutionary computation are in their core and essence as much a manifestation of
evolution as the processes observed in biological systems. For using evolutionary
search algorithms to solve optimization problems, we are interested in basically the
same questions as above. What algorithmic performance can be expected for a given
evolutionary search algorithm and optimization problem (that is a given genotype–
to–ﬁtness map)? How will performance scale if either the algorithm’s parameters or
the setting of the optimization problem, or both, were to change? Also, answering
these questions requires understanding the underlying evolutionary dynamics and
can hence be approached by ﬁtness landscape methods.
In theoretical biology, recent experimental and numerical works involving muta-
tional evolution of molecular functions revealed far–reaching implications on pos-
sible evolutionary paths, which have renewed the interest in ﬁtness landscapes. In
computer science, studies of artiﬁcial evolution in the form of artiﬁcial life and
evolutionary computation increasingly used ﬁtness landscape methods to describe
evolutionary dynamics. Using these methods is particularly aimed at increasing our
knowledge about the working principles of the algorithm, its expected behavior as
well as some aspects of performance. Both ﬁelds, theoretical biology and evolution-
ary computation, to a certain degree experienced a renaissance in using landscape
methods with a signiﬁcant number of recent works. However, the recent progress
can be found in the literature only in a very decentralized manner. Hence, the moti-
vation to write and edit this book came from two observations: the recent advances
in understanding ﬁtness landscapes in both theoretical biology and computer science
and the lack of a book covering it. We have invited some of the leading researchers
that drove the recent advances in the ﬁeld to provide their views on various aspects
of ﬁtness landscapes.
One main aspect of the book is that research in ﬁtness landscapes has been sep-
arated into many distinct ﬁelds and would beneﬁt from some kind of uniﬁcation.
This is also to promote communication between the ﬁelds and cross–fertilization
of ideas. Consequently, we have encouraged the authors to put emphasis not only
on speciﬁc questions and methodological details, but also on fundamental questions
as to what is the inner sense and meaning of the approach, what is the background
and the underlying principles, how is it related to research around it, and where is it
going to (or could it go to). Of course, we were not aiming at compiling a tutorial or
textbook, but we advocated the chapters (in difference to usual journal or proceed-
ings papers) to be able to stand alone and to be understandable in itself by scientists
of roughly related ﬁelds not yet working on ﬁtness landscapes. In other words, if it
appeared necessary to compromise between a certain degree of redundancy between
chapters and the stand–alone ability of a chapter, we promoted the former over the
the latter.
The book has in total 20 chapters and a foreword. The chapters are not ordered
by theory and application, as the book title might suggest, but by ﬁve groups of

Preface
XVII
themes. Almost all chapters address both theoretical and application aspects. We
have divided the chapters that follow into ﬁve parts:
• Part I: Principles and perspectives
• Part II: Topology, measures and problem hardness
• Part III: Coevolution and dynamics
• Part IV: Visualization and characterization
• Part V: Outlook and afterthoughts
Part I: Principles and Perspectives
In this part, we intend to set out basic principles of and different perspectives to
ﬁtness landscapes. Chapter 1 by Hendrik Richter gives an introduction to the book
and an overview of concepts, notions and mathematical descriptions of ﬁtness land-
scapes. The chapter discusses major motivations to use landscape paradigms and
considers how topological features of the landscape give raise to evolutionary dy-
namics. It further introduces examples of computational and empirical landscapes.
Herschel Rabitz, Re–Bing Wu, Tak–San Ho, Katharine Moore Tibbetts and Xiao-
jiang Feng review in Chapter 2 recent developments in considering the landscape’s
input variables as controls. The chapter further speciﬁes three assumptions whose
satisfaction permits a general analysis of the landscape topology and demonstrates
that control landscapes may be devoid of suboptimal critical point traps. The chapter
applies this analysis to control landscapes that arise in quantum mechanics, chem-
ical and material science, and in natural and directed evolution. Takuyo Aita and
Yuzuru Husimi study in Chapter 3 evolutionary processes using the concept of the
information gaining process. As the evolutionary process can be modeled as a walk
on a ﬁtness landscape, the evolving entity collects biomolecular information. Using
this information gaining approach the chapter draws a link between evolutionary
dynamics and thermodynamics, introduces the concept of “free ﬁtness” which is
analogous to free energy, and proposes that evolution is driven in the direction in
which the free ﬁtness increases.
Part II: Topology, Measures and Problem Hardness
Non–trivial ﬁtness landscapes originate from differences in ﬁtness over genotypic
space. These differences in ﬁtness cast the landscape’s topological features, which
in turn shape possible evolutionary paths. This part is devoted to the relationships
between the landscape’s topology and the hardness of locating evolutionary paths.
Crucial links between topology and problem hardness are formed by landscape
measures which quantify the effects the topology has on search paths. Chapter 4
by Katherine M. Malan and Andries P. Engelbrecht considers metaheuristic search
algorithms and their optimization performance. It focuses on the feasibility of
predicting algorithm performance on unknown real-valued problems based on ﬁt-
ness landscape features. The chapter proposes normalized metrics for quantify-
ing algorithm performance on known problems and shows that ﬁtness landscape

XVIII
Preface
techniques are useful as a part–predictor of algorithm performance. A related but
slightly different aspect is discussed in Chapter 5 by Guanzhou Lu, Jinlong Li and
Xin Yao, which also deals with problem hardness and evolutionary search algo-
rithms. A problem hardness measure is presented in this chapter which is derived
from a theoretical difﬁculty measure widely used in complexity theory. It is shown
how the measure can be incorporated with a machine learning algorithm for pa-
rameter tuning and hence contributes to the goal of constructing better suited al-
gorithms for solving problems. In Chapter 6 by Konstantin Klemm, Jing Qin and
Peter F. Stadler another fundamental issue is addressed with considering geomet-
ric notions for describing the structure of landscapes as well as the dynamics of
local search on them. Focusing on discrete, combinatorial landscapes and empha-
sizing the complications arising from local degeneracies, the authors introduce com-
binatorial vector ﬁelds as a mathematical tool for understanding landscape features.
Also the coarse graining of landscapes is studied from two perspectives. Chapter 7
by Kristina Crona resumes with a geometrically oriented study of landscapes and
concentrates on graphs and polytopes. It introduces ﬁtness graphs for describing
coarse properties of landscapes such as mutational trajectories and the number of
peaks. Triangulations of polytopes give raise to shapes that can replace the well
established concepts of positive and negative epistasis for two mutations. Yoshiaki
Katada deals in Chapter 8 with two important topological features of landscapes:
ruggedness and neutrality. As the evolutionary dynamics on a ﬁtness landscape
with neutrality shows special characteristics, ruggedness alone might be insufﬁcient.
In the chapter, a neutrality measure called standard genetic distance is introduced,
which originates from population genetics, for measuring neutrality of ﬁtness land-
scapes. Numerical experiments are reported and demonstrate that genetic distance
is a reliable method for estimating the degree of neutrality of real-world problems.
Chapter 9 by Gabriela Ochoa, S´ebastien Verel, Fabio Daolio and Marco Tomassini
gives an overview of local optima networks (LON) which are a recently introduced
network–based model of combinatorial landscapes. The model compresses the in-
formation given by the whole search space into a smaller mathematical object and
yields a new set of metrics to characterize the structure of combinatorial landscapes.
The approach is applied to two well–known combinatorial optimization problems
and the experimental results show that the network features correlate with and even
predict the performance of heuristic search algorithms operating on these problems.
Part III: Coevolution and Dynamics
Traditionally, the structure and topology of ﬁtness landscapes are considered to be
static. This part brings together chapters that consider different approaches dealing
with dynamic landscapes, particularly dynamics that is environmental or occurs in
and is caused by coevolution. Chapter 10 by Hendrik Richter gives an overview
of landscapes whose ﬁtness values change with time. The chapter studies these
time–dependent landscapes in two contexts. One is evolutionary processes that take
place in dynamic environments and result in dynamic ﬁtness landscapes. Another is

Preface
XIX
coevolutionary processes where the ﬁtness of a given individual depends on the
ﬁtness and the genotype of other individuals in a temporal or spatial fashion and
results in codynamic landscapes. The chapter gives an overview of issues in and
problems of time–dependent ﬁtness landscapes and particularly highlights several
types of mathematical descriptions and their properties. Ricard V. Sol´e and Josep
Sardany´es focus in Chapter 11 on coevolutionary dynamics. The chapter introduces
the Red Queen hypothesis of evolution and comments on some theoretical aspects
and empirical evidence. It further reviews key issues of evolution on simple and
rugged ﬁtness landscapes and presents modeling examples of coevolution on dif-
ferent ﬁtness landscapes at different scales using examples from RNA viruses to
complex ecosystems and macroevolution. Chapter 12 by Richard A. Watson and
Marc Ebner treats another aspect of dynamic landscapes with the interactions of
evolutionary and ecological dynamics. To understand these interactions as coupled
processes leads to eco–evolutionary dynamics that can be modeled by deformable
ﬁtness landscapes. The chapter reports numerical experiments and observes that the
model of deformable landscapes can exhibit either of the two behavioral modes:
evolutionary stasis or continued evolutionary change (also known as Red Queen
dynamics). Wim Hordijk present an overview of a statistical analysis to measure
and express the correlation structure of ﬁtness landscapes in Chapter 13. The cor-
relation analysis is applied to both static and coupled ﬁtness landscapes. The ex-
perimental results presented show that the correlation analysis gives a direct and
useful link to the actual search performance of evolutionary algorithms that use a
coevolutionary approach. Chapter 14 by Krzysztof Trojanowski concludes this part
with a discussion about dynamic real–valued landscapes and methods of evaluating
the efﬁciency of (meta–)heuristic optimization algorithms operating on these land-
scapes. The chapter introduces measures for dynamic performance evaluation and
associated measurement methods, gives dynamic benchmarks and different types
for implementing changes, and considers the role of time and uncertainty originat-
ing from the measurement method.
Part IV: Visualization and Characterization
As the structure and topology of a ﬁtness landscape offers to gain insight into evo-
lutionary dynamics, it is vital to have methods and tools for visualizing and char-
acterizing landscape’s properties. The chapters in this part discuss such questions.
Chapter 15 by Ivan Zelinka, Oldrich Zmeskal and Petr Saloun is devoted to ﬁt-
ness landscapes with fractal characteristics. The main topic of this chapter is to use
elements from fractal geometry to measure attributes of fractal landscapes. These at-
tributes are taken to characterize fractal properties of basic artiﬁcial test functions as
well as cost functions of real application problems that appear in experimental chaos
control and synchronization. Daniel Ashlock, Justin Schonfeld, Wendy Ashlock and
Colin Lee describe in Chapter 16 three important tools that were recently suggested
to explore ﬁtness landscapes: agent-case embeddings, ﬁtness morphs, and nonlinear
projection. These techniques are examined using ﬁtness landscapes for a variety of

XX
Preface
discrete problems including ﬁnding self avoiding walks, ﬁnding features for DNA
sequence classiﬁcation, the Tartarus AI test problem, locating cellular automata
rules, and a novel real optimization problem connected with the Mandelbrot set.
The results show that the techniques discussed transform information about discrete
ﬁtness into real-valued spaces enabling both analysis and visualization. Another
approach to visualize ﬁtness landscapes is presented in Chapter 17 by Sebastian
Volke, Simon Bin, Dirk Zeckzer, Martin Middendorf and Gerik Scheuermann. This
approach is applied to the question of how and why changes in the design of a par-
ticle swarm optimization (PSO) algorithm inﬂuence its optimization behavior. The
visual approach discussed in the chapter combines a terrain representation of the
ﬁtness landscape topology with conﬁguration-local, time-dependent statistical mea-
sures of PSO runs and is implemented in a visualization tool called dPSO-Vis. It is
demonstrated how dPSO-Vis can be used to analyze and compare the optimization
behavior of PSO algorithms designed for solving the RNA folding problem. Bjørn
Østman and Christoph Adami ﬁnally give in Chapter 18 a concise overview of the
relationship between visualization of ﬁtness landscapes and potential predictabil-
ity of evolutionary dynamics. To know whether evolution is predominantly taking
paths that move upwards in ﬁtness and along neutral ridges, or else entails a sig-
niﬁcant number of valley crossings, there is the need to visualize these landscapes.
For instance it must be determined whether there are peaks in the landscape, where
these peaks are located with respect to one another, and whether evolutionary paths
can connect them. The chapter focuses on the predictability of evolution on rugged
genetic ﬁtness landscapes and presents numerical results to answer the question of
whether evolutionary trajectories towards the highest peak in the landscape can be
achieved via a series of valley crossings.
Part V: Outlook and Afterthoughts
The ﬁnal part of this book contains two shorter chapters devoted to the prospects
of ﬁtness landscape research. Possible future issues are discussed in Chapter 19 by
Hendrik Richter. The chapter addresses challenges to ﬁtness landscape approaches
that result from recent experimental and theoretical ﬁndings about the information
transfer in biological systems. It further sets out opportunities these results may
open up and speculates about directions that landscape research may take. Chapter
20 by Edward D. Weinberger concludes the book with afterthoughts and discusses
the past, the present and the future of the topic. In a personal reminiscence fueled
by his involvement in ﬁtness landscape research for over 20 years, he particularly
highlights the need to rethink our concepts of ﬁtness, the relevance of coevolutionary
effects and the importance of information used by biological systems. The chapter
also concludes that a main topic to be addressed by future research is to advance our
understanding of biological evolution as a dynamical process. Landscape methods,
if extended and adapted, have the potential to achieve this.

Preface
XXI
It is often said that there are more contributors to a book who should be acknowl-
edged than the people whose names appear on the cover page. This literally applies
to this book. So, our foremost thank goes to the in total 42 authors of the chap-
ters who entrusted their contributions to this book. We are also very thankful for
both the foreword and the afterthoughts. Stuart Kauffman, who moved the topic
of ﬁtness landscapes signiﬁcantly beyond the scope of evolutionary biology with
his seminal works in the late 1980s, provided a foreword that is rich in substance,
even controversial and discusses limitations of current ﬁtness landscape research as
well as points at possible directions of further development. We are equally grateful
that Edward Weinberger, who similarly and partly collaborating with Stuart Kauff-
man signiﬁcantly extended the scope of ﬁtness landscapes 20 years ago, provided
afterthoughts.
To edit and write a publication collaboratively seems to be possible even over
large distances nowadays due to communication devices such as email and chat.
This book is also proof of that. Nonetheless, we also noted that some discussion is
much more fruitful and efﬁcient face to face by visiting each other. So, we thank the
HTWK Leipzig University of Applied Sciences for providing a travel grant and the
University of Pretoria for cordial hospitality that enabled this visit. Special thanks
go to Dr. Thomas Ditzinger of Springer-Verlag for his support during the prepara-
tion of this book and to Prof. Ivan Zelinka, the series editor for the Springer Series
Emergence, Complexity and Computation (ECC), for inviting the book to this se-
ries. Also thanks to all the reviewers who have provided very valuable inputs to
improve the quality of the chapters within this book.
Last in order but clearly not in importance, our most heartfelt thanks goes to our
families and friends for their support, love, encouragement and patience.
Leipzig, Germany
Hendrik Richter
Pretoria, South Africa
Andries P. Engelbrecht

List of Contributors
Christoph Adami
Department Microbiology and Molecular Genetics & BEACON Center for the
Study of Evolution in Action, Michigan State University,
East Lansing, MI 48824, U.S.A.
e-mail: adami@msu.edu
Takuyo Aita
Graduate School of Science and Engineering,
Saitama University, Saitama 338-8570, Japan.
e-mail: taita@mail.saitama-u.ac.jp
Daniel Ashlock
Department of Mathematics and Statistics, University of Guelph,
50 Stone Rd. E, Guelph, Ontario, N1G 2R4, Canada.
e-mail: dashlock@uoguelph.ca
Wendy Ashlock
Department of Computer Science and Engineering,
York University, 4700 Keele Street, Toronto, Ontario, M3J 1P3, Canada.
e-mail: washlock@sympatico.ca
Simon Bin
Department of Computer Science, University of Leipzig,
Augustusplatz 10, 04109 Leipzig, Germany.
e-mail: sbin@informatik.uni-leipzig.de
Kristina Crona
University of California at Merced, 5200 Lake Road, Merced, CA 95343, U.S.A.
e-mail: kcrona@ucmerced.edu
Fabio Daolio
Department of Information Systems, University of Lausanne,
1015 Lausanne, Switzerland.
e-mail: fabio.daolio@unil.ch

XXIV
List of Contributors
Marc Ebner
Ernst Moritz Arndt Universit¨at Greifswald, Institut f¨ur Mathematik und Informatik,
Walther-Rathenau-Strasse 47, 17487 Greifswald, Germany.
e-mail: marc.ebner@uni-greifswald.de
Andries P. Engelbrecht
Department of Computer Science, University of Pretoria, Pretoria 0002,
South Africa.
e-mail: engel@cs.up.ac.za
Xiaojiang Feng
Kadmon Corporation, 450 East 29th Street, New York, NY 10016, U.S.A.
e-mail: fengxiaojiang@yahoo.com
Tak–San Ho
Department of Chemistry, Princeton University, Washington Road,
Princeton, NJ 08544, U.S.A.
e-mail: tsho@princeton.edu
Wim Hordijk
SmartAnalytiX.com, Lausanne, Switzerland.
e-mail: wim@WorldWideWanderings.net
Yuzuru Husimi
Innovative Research Organization, Saitama University, Saitama 338-8570, Japan.
e-mail: husimi.@mail.saitama-u.ac.jp
Yoshiaki Katada
Department of Electrical and Electronic Engineering, Setsunan University,
17-8 Ikeda-nakamachi, Neyagawa, Osaka 572-8508, Japan.
e-mail: katada@ele.setsunan.ac.jp
Stuart Kauffman
University of Vermont, 85 South Prospect Street, Burlington, VT 05405, U.S.A.
University of Pennsylvania, 3451 Walnut St, Philadelphia, PA 19104, U.S.A.
Santa Fe Institute, 1399 Hyde Park Rd., Santa Fe, NM87501, U.S.A.
e-mail: stukauffman@gmail.com
Konstantin Klemm
Bioinformatics Group, Department of Computer Science, and Interdisciplinary
Center for Bioinformatics, University of Leipzig, H¨artelstrasse 16-18, 04107
Leipzig, Germany.
e-mail: klemm@bioinf.uni-leipzig.de
Colin Lee
Department of Mathematics and Statistics, University of Guelph,
50 Stone Rd. E, Guelph, Ontario, N1G 2R4, Canada.
e-mail: clee04@uoguelph.ca

List of Contributors
XXV
Jinlong Li
Joint USTC-Birmingham Research Institute in Intelligent Computation
and Its Applications
The Nature Inspired Computation and Applications Laboratory (NICAL), School
of Computer Science and Technology, University of Science and Technology of
China, Hefei, 230027, China.
e-mail: jlli@ustc.edu.cn
Guanzhou Lu
Joint USTC-Birmingham Research Institute in Intelligent Computation
and Its Applications
The Centre of Excellence for Research in Computational Intelligence and
Applications (CERCIA), School of Computer Science, University of Birmingham,
Edgbaston, Birmingham, B15 2TT, UK
e-mail: g.lu@cs.bham.ac.uk
Katherine M. Malan
Department of Computer Science, University of Pretoria,
Pretoria 0002, South Africa.
e-mail: kmalan@cs.up.ac.za
Martin Middendorf
Department of Computer Science, University of Leipzig,
Augustusplatz 10, 04109 Leipzig, Germany.
e-mail: middendorf@informatik.uni-leipzig.de
Gabriela Ochoa
Department of Computing Science and Mathematics, School of Natural Sciences,
University of Stirling, Stirling, FK9 4LA, Scotland, UK.
e-mail: gabriela.ochoa@cs.stir.ac.uk
Bjørn Østman
Department Microbiology and Molecular Genetics & BEACON Center for the
Study of Evolution in Action, Michigan State University,
East Lansing, MI 48824, U.S.A.
e-mail: ostman@msu.edu
Jing Qin
Max Planck Institute for Mathematics in the Sciences,
Inselstraße 22, 04103 Leipzig, Germany.
e-mail: qin@bioinf.uni-leipzig.de
Herschel Rabitz
Department of Chemistry, Princeton University, Washington Road,
Princeton, NJ 08544, U.S.A.
e-mail: hrabitz@princeton.edu

XXVI
List of Contributors
Hendrik Richter
HTWK Leipzig University of Applied Sciences, Faculty of Electrical Engineering
and Information Technology, D–04251 Leipzig, Germany.
e-mail: richter@eit.htwk-leipzig.de
Petr Saloun
VSB-TUO, Faculty of Electrical Engineering and Computer Science,
17. listopadu 15, 708 33 Ostrava-Poruba, Czech Republic.
e-mail: petr.saloun@vsb.cz
Josep Sardany´es
ICREA-Complex Systems Lab, Universitat Pompeu Fabra, Parc de Recerca
Biom`edica de Barcelona (PRBB), Dr. Aiguader 88, 08003 Barcelona, Spain.
Institut de Biologia Evolutiva (CSIC-Universitat Pompeu Fabra), Passeig Mar´ıtim
de la Barceloneta 37, 08003 Barcelona, Spain.
e-mail: josep.sardanes@upf.edu
Gerik Scheuermann
Department of Computer Science, University of Leipzig,
Augustusplatz 10, 04109 Leipzig, Germany.
e-mail: scheuermann@informatik.uni-leipzig.de
Justin Schonfeld
Department of Integrative Biology and Biodiversity Institute of Ontario,
University of Guelph, 50 Stone Rd. E, Guelph, Ontario, N1G 2R4, Canada.
e-mail: jschonfe@uoguelph.ca
Ricard V. Sol´e
ICREA-Complex Systems Lab, Universitat Pompeu Fabra, Parc de Recerca
Biom`edica de Barcelona (PRBB), Dr. Aiguader 88, 08003 Barcelona, Spain.
Institut de Biologia Evolutiva (CSIC-Universitat Pompeu Fabra), Passeig Mar´ıtim
de la Barceloneta 37, 08003 Barcelona, Spain.
Santa Fe Institute, 1399 Hyde Park Road, Santa Fe NM 87501, U.S.A.
e-mail: ricard.sole@upf.edu
Peter F. Stadler
Bioinformatics Group, Department of Computer Science, and Interdisciplinary
Center for Bioinformatics, University of Leipzig, H¨artelstrasse 16-18, 04107
Leipzig, Germany.
Max Planck Institute for Mathematics in the Sciences, Inselstraße 22, 04103
Leipzig, Germany.
Fraunhofer Institut for Cell Therapy and Immunology, Perlickstraße 1, 04103
Leipzig, Germany.
Institute for Theoretical Chemistry, University of Vienna, W¨ahringerstrasse 17,
A-1090 Vienna, Austria.
Santa Fe Institute, 1399 Hyde Park Rd., Santa Fe, NM87501, U.S.A.
e-mail: studla@bioinf.uni-leipzig.de

List of Contributors
XXVII
Katharine Moore Tibbetts
Department of Chemistry, Temple University, 1901 N. 13th St.,
Philadelphia, PA 19122, U.S.A.
e-mail: katharine.moore@temple.edu
Marco Tomassini
Department of Information Systems, University of Lausanne, 1015 Lausanne,
Switzerland.
e-mail: marco.tomassini@unil.ch
Krzysztof Trojanowski
Institute of Computer Science, Polish Academy of Sciences, Jana Kazimierza 5,
01-248 Warsaw, Poland.
Cardinal Stefan Wyszy´nski University, Faculty of Mathematics and Natural
Sciences, W´oycickiego 1/3, 01-938 Warsaw, Poland.
e-mail: trojanow@ipipan.waw.pl
S´ebastien Verel
INRIA Lille - Nord Europe and University of Nice Sophia-Antipolis,
06903 Sophia Antipolis Cedex, France.
e-mail: verel@3s.unice.fr
Sebastian Volke
Department of Computer Science, University of Leipzig,
Augustusplatz 10, 04109 Leipzig, Germany.
e-mail: volke@informatik.uni-leipzig.de
Richard A. Watson
University of Southampton, School of Electronics and Computer Science, Institute
for Life Sciences, Institute for Complex Systems Simulation, Agents Interaction
and Complexity, Highﬁeld, Southampton, SO17 1BJ, UK.
e-mail: raw@ecs.soton.ac.uk
Edward D. Weinberger
Weinberger Post-Quantitative, Inc., 370 Central Park West,
#110, New York, NY 10025, U.S.A.
Department of Finance and Risk Engineering,
Polytechnic Institute of New York University,
6 Metrotech Center, Brooklyn, NY 12201, U.S.A.
e-mail: edw@wpq-inc.com
Re–Bing Wu
Department of Automation, Tsinghua University and Center for Quantum
Information Science and Technology, TNLIST,
Beijing, 100084, China.
e-mail: rbwu@tsinghua.edu.cn

XXVIII
List of Contributors
Xin Yao
Joint USTC-Birmingham Research Institute in Intelligent Computation and Its
Applications
The Centre of Excellence for Research in Computational Intelligence and
Applications (CERCIA), School of Computer Science, University of Birmingham,
Edgbaston, Birmingham, B15 2TT, UK.
e-mail: x.yao@cs.bham.ac.uk
Dirk Zeckzer
Department of Computer Science, University of Kaiserslautern, Postfach 3049,
67653 Kaiserslautern, Germany.
e-mail: zeckzer@informatik.uni-kl.de
Ivan Zelinka
VSB-TUO, Faculty of Electrical Engineering and Computer Science,
17. listopadu 15, 708 33 Ostrava-Poruba, Czech Republic.
e-mail: ivan.zelinka@vsb.cz
Oldrich Zmeskal
Faculty of Chemistry, Brno University of Technology,
Purkyˇnova 118, 612 00 Brno, Czech Republic.
e-mail: zmeskal@fch.vutbr.cz

Contents
Foreword: Statable and Non–prestatable Fitness Landscapes . . . . . . .
VII
Stuart Kauffman
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . XIV
Part I: Principles and Perspectives
1
Fitness Landscapes: From Evolutionary Biology to Evolutionary
Computation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
Hendrik Richter
1.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
1.1.1
Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.1.2
Historical Background . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.1.3
Life, Evolution, and Fitness . . . . . . . . . . . . . . . . . . . . . . . .
10
1.2
Fitness and Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
1.3
Fitness Landscapes in Evolutionary Biology . . . . . . . . . . . . . . . . . .
15
1.3.1
Topological Features of Fitness Landscapes . . . . . . . . . .
15
1.3.2
Computational and Empirical Landscapes . . . . . . . . . . . .
20
1.4
Concluding Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25
2
Fundamental Principles of Control Landscapes with Applications
to Quantum Mechanics, Chemistry and Evolution . . . . . . . . . .
33
Herschel Rabitz, Re–Bing Wu, Tak–San Ho, Katharine Moore
Tibbetts, Xiaojiang Feng
2.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34
2.2
Basic Foundations of OptiSci . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
35
2.2.1
Classical and Quantum Control Landscapes . . . . . . . . . .
35
2.2.2
General Features of Control Landscapes . . . . . . . . . . . . .
36
2.2.3
Landscape Mapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
2.2.4
Requirements for the Existence of Trap-Free
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39

XXX
Contents
2.3
Optimal Control of Quantum Dynamics (OptiQ) . . . . . . . . . . . . . .
39
2.3.1
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39
2.3.2
Basic Assumptions Regarding Quantum Control
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
40
2.3.3
Quantum Control Landscape Theory . . . . . . . . . . . . . . . .
42
2.3.4
Simulated Excursions over Quantum Control
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
44
2.3.5
Experimental Excursions over Quantum Control
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
2.3.6
Perspective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
46
2.4
Optimal Control of Chemical Synthesis and Properties
(OptiChem) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
2.4.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
2.4.2
OptiChem Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
2.4.3
Predictions of OptiChem Theory . . . . . . . . . . . . . . . . . . . .
51
2.4.4
Illustrations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52
2.4.5
Perspective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
2.5
Biological Fitness Landscapes (OptiEvo) . . . . . . . . . . . . . . . . . . . .
57
2.5.1
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
57
2.5.2
Physical Foundation of OptiEvo Theory . . . . . . . . . . . . . .
58
2.5.3
Evolutionary Fitness Landscape Analysis . . . . . . . . . . . .
59
2.5.4
Predictions and Empirical Assessments of OptiEvo
Theory in Natural Evolution . . . . . . . . . . . . . . . . . . . . . . .
60
2.5.5
Application of OptiEvo Theory to Directed
Evolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
62
2.5.6
Perspective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
2.6
Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
3
Biomolecular Information Gained through In Vitro Evolution on
a Fitness Landscape in Sequence Space . . . . . . . . . . . . . . . . .
71
Takuyo Aita, Yuzuru Husimi
3.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
72
3.1.1
Outline of In Vitro Molecular Evolution . . . . . . . . . . . . . .
72
3.1.2
In Vitro Evolution as an Information Gaining
Process . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
73
3.1.3
Basis of Thermodynamic Concepts . . . . . . . . . . . . . . . . . .
74
3.1.4
Outline of This Chapter . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
3.2
Model of In Vitro Evolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76
3.2.1
Natural Selection-Type Model . . . . . . . . . . . . . . . . . . . . . .
76
3.2.2
Artiﬁcial Selection-Type Model . . . . . . . . . . . . . . . . . . . .
76
3.3
Analogy between Evolution and Thermodynamics. . . . . . . . . . . . .
78
3.3.1
Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
78
3.3.2
Quasi-species . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
80

Contents
XXXI
3.3.3
Attractor of Fitness in the Artiﬁcial Selection-Type
Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
3.3.4
Evolutionary Boltzmann Constant and Evolutionary
Temperature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
83
3.3.5
Evolutionary Potential, Free Fitness and Evolutionary
Force . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
84
3.3.6
Fitness Flux and Einstein’s Relation-Like Formula . . . . .
85
3.4
Information Gained through In Vitro Evolution . . . . . . . . . . . . . . .
87
3.4.1
Fitness Fluctuation and Energy Fluctuation . . . . . . . . . . .
87
3.4.2
Biomolecular Information . . . . . . . . . . . . . . . . . . . . . . . . .
89
3.4.3
Information-Gain Formula . . . . . . . . . . . . . . . . . . . . . . . . .
90
3.4.4
Extent and Content of Information . . . . . . . . . . . . . . . . . .
92
3.4.5
Fitness Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
3.4.6
Pragmatic Information . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
3.5
Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
96
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97
Part II: Topology, Measures and Problem Hardness
4
Fitness Landscape Analysis for Metaheuristic Performance
Prediction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
103
Katherine M. Malan, Andries P. Engelbrecht
4.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
4.2
The Algorithm Selection Problem . . . . . . . . . . . . . . . . . . . . . . . . . . 106
4.3
Performance Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
4.3.1
Existing Approaches to Measuring Performance . . . . . . . 108
4.3.2
Proposed Performance Metrics . . . . . . . . . . . . . . . . . . . . . 109
4.3.3
Performance Metrics for PSO . . . . . . . . . . . . . . . . . . . . . . 113
4.4
Feature Extraction for Continuous Optimisation Problems . . . . . . 115
4.4.1
What Makes an Optimisation Problem Hard? . . . . . . . . . 116
4.4.2
Possible Techniques for Feature Extraction . . . . . . . . . . . 118
4.4.3
Features and Algorithm Performance . . . . . . . . . . . . . . . . 120
4.4.4
Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
4.5
Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
5
Fitness Landscapes and Problem Difﬁculty in Evolutionary
Algorithms: From Theory to Applications . . . . . . . . . . . . . . .
133
Guanzhou Lu, Jinlong Li, Xin Yao
5.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
5.2
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
5.3
Escape Probability versus Expected Runtime Time . . . . . . . . . . . . 135
5.3.1
Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
5.3.2
Derivation of the Mathematical Equation between
Escape Probability and Expected Running Time . . . . . . . 136

XXXII
Contents
5.4
Fitness-Probability Cloud . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
5.4.1
Deﬁnition of Fitness-Probability Cloud . . . . . . . . . . . . . . 138
5.4.2
Methodology for Generating fpc . . . . . . . . . . . . . . . . . . . . 139
5.4.3
Test Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
5.4.4
Experimental Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
5.5
Parameter Learning Method Using Fitness-Probability Cloud
for the Unique Input Output Sequence Problem . . . . . . . . . . . . . . . 142
5.5.1
Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
5.5.2
Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
5.5.3
fpc-Based Parameter Learning Method. . . . . . . . . . . . . . . 145
5.5.4
Experimental Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
5.5.5
Discussions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
5.6
A fpc-Based Online Adaptive Evolutionary Algorithm . . . . . . . . . 148
5.6.1
Motivation and Background . . . . . . . . . . . . . . . . . . . . . . . . 148
5.6.2
Algorithm Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
5.7
Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
6
Geometry and Coarse-Grained Representations of Landscapes . . .
153
Konstantin Klemm, Jing Qin, Peter F. Stadler
6.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
6.2
Two Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
6.3
Local Minima, Walks, and Degeneracy . . . . . . . . . . . . . . . . . . . . . . 155
6.3.1
Neighbors and Minima . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
6.3.2
Walks and Paths. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
6.3.3
Degeneracy, Plateaus, and Shelves . . . . . . . . . . . . . . . . . . 157
6.3.4
Reachability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
6.3.5
Mutual Accessibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
6.4
Basins and Saddles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
6.5
Barrier Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
6.6
Funnels. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
6.7
Landscapes as Combinatorial Vector Fields. . . . . . . . . . . . . . . . . . . 167
6.7.1
Combinatorial Vector Fields on Graphs . . . . . . . . . . . . . . 167
6.7.2
Reachability in Combinatorial Vector Fields . . . . . . . . . . 169
6.7.3
Path Probabilities. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
6.8
Coarse Graining, Macrostates, and Folding Kinetics . . . . . . . . . . . 170
6.9
Encodings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
6.10
Concluding Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
7
Polytopes, Graphs and Fitness Landscapes . . . . . . . . . . . . . . .
177
Kristina Crona
7.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
7.2
Fitness Graphs and Sign Epistasis. . . . . . . . . . . . . . . . . . . . . . . . . . . 179
7.3
Fitness Graphs and Theoretical Results . . . . . . . . . . . . . . . . . . . . . . 182
7.4
Fitness Graphs and Recombination. . . . . . . . . . . . . . . . . . . . . . . . . . 184

Contents
XXXIII
7.5
Fitness Graphs and Other Qualitative Measures . . . . . . . . . . . . . . . 186
7.6
Shapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
7.7
Shapes and Flips . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
7.8
Shapes and Polyhedral Subdivisions. . . . . . . . . . . . . . . . . . . . . . . . . 194
7.9
The 74 Generic Shapes of the Cube . . . . . . . . . . . . . . . . . . . . . . . . . 197
7.10
Shapes and Empirical Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
7.11
Shapes and Fitness Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
7.12
Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
8
Estimating the Degree of Neutrality and Ruggedness of Fitness
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
207
Yoshiaki Katada
8.1
Concept of Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
8.2
Featuring Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
8.3
Measuring Neutrality of Fitness Landscapes . . . . . . . . . . . . . . . . . . 210
8.4
Objectives in This Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
8.5
Tools for Measurements of Features of Fitness Landscapes
and Their Characteristics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
8.5.1
Measure of Ruggedness . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
8.5.2
Standard Genetic Distance . . . . . . . . . . . . . . . . . . . . . . . . . 211
8.6
Characteristics of the Tools in Tunably Neutral NK
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
8.6.1
Tunably Neutral NK Landscapes . . . . . . . . . . . . . . . . . . . . 213
8.6.2
Simulation Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
8.6.3
Simulation Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
8.6.4
Preparing for Estimating the Degree of Neutrality . . . . . 217
8.7
Procedure for Estimating the Degree of Neutrality . . . . . . . . . . . . . 220
8.8
Estimating the Degree of Neutrality of Evolutionary Robotics
Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
8.8.1
The Task and the Fitness Function . . . . . . . . . . . . . . . . . . 221
8.8.2
Simulation Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
8.8.3
Simulation Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
8.9
Summary and Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
9
Local Optima Networks: A New Model of Combinatorial Fitness
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
233
Gabriela Ochoa, S´ebastien Verel, Fabio Daolio, Marco Tomassini
9.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
9.2
The Science of Complex Networks. . . . . . . . . . . . . . . . . . . . . . . . . . 235
9.2.1
Random Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
9.2.2
Other Network Topologies . . . . . . . . . . . . . . . . . . . . . . . . . 237
9.2.3
Some Graph Statistics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
9.2.4
Weighted Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
9.2.5
Community Structure in Networks . . . . . . . . . . . . . . . . . . 242

XXXIV
Contents
9.3
Example Combinatorial Landscapes. . . . . . . . . . . . . . . . . . . . . . . . . 243
9.3.1
The NK Model. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
9.3.2
The Quadratic Assignment Problem . . . . . . . . . . . . . . . . . 244
9.4
The Local Optima Network Model . . . . . . . . . . . . . . . . . . . . . . . . . . 244
9.4.1
Deﬁnition of Nodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
9.4.2
Deﬁnition of Edges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
9.4.3
Local Optima Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
9.5
Results of the Network Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
9.5.1
The NK Model. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
9.5.2
The Quadratic Assignment Problem . . . . . . . . . . . . . . . . . 254
9.6
Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
Part III: Coevolution and Dynamics
10
Fitness Landscapes That Depend on Time . . . . . . . . . . . . . . .
265
Hendrik Richter
10.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
10.2
Dynamic Fitness Landscapes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
10.2.1
Dynamics? What Dynamics? . . . . . . . . . . . . . . . . . . . . . . . 267
10.2.2
Deﬁnition of Dynamic Fitness Landscapes . . . . . . . . . . . 270
10.2.3
Examples of Dynamic Fitness Landscapes . . . . . . . . . . . . 275
10.3
Coevolution, Codynamics and Their Fitness Landscapes. . . . . . . . 279
10.3.1
Coevolutionary Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . 279
10.3.2
Codynamic Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . 282
10.3.3
Examples of Modelling Coevolutionary Processes . . . . . 285
10.4
Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292
10.4.1
Hierarchy of Fitness Landscapes . . . . . . . . . . . . . . . . . . . . 292
10.4.2
Future Research Directions . . . . . . . . . . . . . . . . . . . . . . . . 294
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
11
Red Queen Coevolution on Fitness Landscapes . . . . . . . . . . . .
301
Ricard V. Sol´e, Josep Sardany´es
11.1
Introduction: The Red Queen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301
11.2
Red Queen on a Lattice: A Toy Model . . . . . . . . . . . . . . . . . . . . . . . 305
11.3
Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
11.3.1
Simple versus Coupled Fitness Landscapes . . . . . . . . . . . 310
11.3.2
Evolution on Rugged Fitness Landscapes . . . . . . . . . . . . 313
11.3.3
Coevolution on Rugged Fitness Landscapes . . . . . . . . . . 315
11.3.4
Red Queen Dynamics in RNA Virus . . . . . . . . . . . . . . . . . 317
11.4
Gene-for-Gene and Matching Alleles Models of Coevolution . . . . 320
11.5
Minimal Coevolutionary Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
11.5.1
Spatial Red Queen Dynamics. . . . . . . . . . . . . . . . . . . . . . . 322
11.5.2
Dynamics of Small Replicators with Matching-Allele
Interactions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325

Contents
XXXV
11.5.3
Red Queen Chaotic Attractors . . . . . . . . . . . . . . . . . . . . . . 327
11.6
Large Scale Coevolution on Complex Networks . . . . . . . . . . . . . . . 329
11.7
Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
12
Eco–Evolutionary Dynamics on Deformable Fitness
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
339
Richard A. Watson, Marc Ebner
12.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
12.2
The Red Queen Hypothesis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
12.3
A Dynamically Deforming Fitness Landscape . . . . . . . . . . . . . . . . 346
12.4
Experimental Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
12.4.1
Experiments on a One-Dimensional Landscape. . . . . . . . 350
12.4.2
Experiments on a Two-Dimensional Landscape . . . . . . . 357
12.5
Discussion and Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361
12.5.1
Stasis, Change and Improvement. . . . . . . . . . . . . . . . . . . . 361
12.5.2
Diversity and Efﬁciency . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365
13
Correlation Analysis of Coupled Fitness Landscapes . . . . . . . . .
369
Wim Hordijk
13.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369
13.2
Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370
13.2.1
The Concept of Fitness Landscapes . . . . . . . . . . . . . . . . . 370
13.2.2
The Deﬁnition of Fitness Landscapes . . . . . . . . . . . . . . . . 371
13.2.3
A Model of Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . 372
13.2.4
Coupled Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . 374
13.3
Correlation Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375
13.3.1
Time Series Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375
13.3.2
Random Walks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377
13.3.3
The Correlation Structure of Fitness Landscapes. . . . . . . 379
13.4
Correlation Analysis of Fitness Landscapes . . . . . . . . . . . . . . . . . . 379
13.4.1
Static Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . 379
13.4.2
Coupled Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . 387
13.5
Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 391
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392
14
Dynamic Real–Valued Landscapes and the Optimization
Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
395
Krzysztof Trojanowski
14.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
14.1.1
The Objective. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
14.1.2
The Algorithm Performance – Static versus Dynamic
Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
14.1.3
Outline of the Chapter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397

XXXVI
Contents
14.2
The Heuristic Algorithm Performance Measures . . . . . . . . . . . . . . 398
14.2.1
Quality of the Current Best-Found Solution . . . . . . . . . . . 399
14.2.2
Error Level . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400
14.2.3
Euclidean Distance to Optimum . . . . . . . . . . . . . . . . . . . . 402
14.2.4
Statistical Analysis of the Measurements . . . . . . . . . . . . . 402
14.2.5
Description of Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . 404
14.3
Real-Valued Dynamic Optimization Landscapes . . . . . . . . . . . . . . 406
14.3.1
Landscapes with Symmetric Components . . . . . . . . . . . . 406
14.3.2
Landscapes with Non-symmetric Components . . . . . . . . 409
14.3.3
Transformation Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . 409
14.3.4
Generalized Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . 410
14.4
Prediction of the Algorithm Answer . . . . . . . . . . . . . . . . . . . . . . . . . 413
14.4.1
Evaluation of the Algorithm’s Outcome for Random
Stopping Time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414
14.4.2
Evaluation of the Algorithm’s Outcome with Respect
to the User Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
14.4.3
Application in Practice . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
14.5
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421
Part IV: Visualization and Characterization
15
Fractal Analysis of Fitness Landscapes . . . . . . . . . . . . . . . . .
427
Ivan Zelinka, Oldrich Zmeskal, Petr Saloun
15.1
Cost Function Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
15.2
Selected Test Functions and Their Fitness Landscapes. . . . . . . . . . 428
15.3
Harmonic and Fractal Image Analysis . . . . . . . . . . . . . . . . . . . . . . . 438
15.4
Fitness Landscapes Exhibiting Fractal Structures . . . . . . . . . . . . . . 439
15.4.1
Fractal Geometry – Basics Ideas . . . . . . . . . . . . . . . . . . . . 439
15.4.2
Fractal Dimension . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
15.4.3
Fractal Fitness Landscape – How to Build It . . . . . . . . . . 441
15.5
Fractal Analysis – Selected Methods . . . . . . . . . . . . . . . . . . . . . . . . 443
15.5.1
Fractal Analysis of One- and Two-Dimensional
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
15.5.2
Fractal Analysis of Threshold Functions . . . . . . . . . . . . . 447
15.5.3
Fractal Analysis of Original (Non-threshold)
Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 451
15.6
Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 455
16
Fitness Morphs and Nonlinear Projections of Agent–Case
Embeddings to Characterize Fitness Landscapes . . . . . . . . . . .
457
Daniel Ashlock, Justin Schonfeld, Wendy Ashlock, Colin Lee
16.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 457
16.1.1
Terminology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 458
16.2
Analysis Technology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459

Contents
XXXVII
16.2.1
Nonlinear Projection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 460
16.2.2
Fitness Morphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 461
16.2.3
Agent-Case Embeddings . . . . . . . . . . . . . . . . . . . . . . . . . . 461
16.3
Self Avoiding Walks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 463
16.4
Side Effect Machines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466
16.5
Tartarus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 471
16.6
Fractal Real Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 474
16.7
Apoptotic Cellular Automata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477
16.7.1
ACEs for Cellular Automata . . . . . . . . . . . . . . . . . . . . . . . 481
16.8
Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 483
17
Visual Analysis of Discrete Particle Swarm Optimization Using
Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . .
487
Sebastian Volke, Simon Bin, Dirk Zeckzer, Martin Middendorf,
Gerik Scheuermann
17.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 487
17.2
Discrete Optimization Problems and RNA Folding . . . . . . . . . . . . 488
17.3
Particle Swarm Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489
17.3.1
SetPSO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 490
17.3.2
HelixPSO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 491
17.4
Fitness Landscape Induced by PSO Algorithms . . . . . . . . . . . . . . . 492
17.5
Visual Analysis Method: dPSO-Vis . . . . . . . . . . . . . . . . . . . . . . . . . 493
17.5.1
Topology of Discrete Fitness Landscapes . . . . . . . . . . . . . 494
17.5.2
Visualizing the Topology Using a Landscape
Metaphor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
17.5.3
Visualizing the Swarm Movement within the
Landscape . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498
17.6
Application to SetPSO and HelixPSO . . . . . . . . . . . . . . . . . . . . . . . 500
17.7
Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 506
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 506
18
Predicting Evolution and Visualizing High–Dimensional Fitness
Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
509
Bjørn Østman, Christoph Adami
18.1
Usefulness of the Metaphor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509
18.2
Visualizing Fitness Landscapes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 511
18.3
Landscape Structure and Peaks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
18.4
Landscape Structure and Prediction . . . . . . . . . . . . . . . . . . . . . . . . . 518
18.5
Future Directions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523

XXXVIII
Contents
Part V: Outlook and Afterthoughts
19
Frontiers of Fitness Landscapes: A Summary of Open
Questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
529
Hendrik Richter
19.1
Challenges and Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529
19.2
Chances and Directions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533
19.3
Summary and Outlook: Eight Open Problems. . . . . . . . . . . . . . . . . 536
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 540
20
Fitness Landscapes – 20 Years Later . . . . . . . . . . . . . . . . . .
545
Edward D. Weinberger
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 548
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549

Part I
Principles and Perspectives

Chapter 1
Fitness Landscapes: From Evolutionary Biology
to Evolutionary Computation
Hendrik Richter
Abstract. This chapter gives an introduction to the book and an overview of funda-
mental concepts, notions and mathematical descriptions of ﬁtness landscapes. Based
on a brief discussion of the origin of landscape paradigms, major motivations to use
ﬁtness landscapes are presented. It is further considered how topological features of
the landscape give raise to evolutionary dynamics. Also, examples of computational
and empirical landscapes are introduced.
1.1
Introduction
This book is concerned with recent advances in the theory and application of ﬁtness
landscapes and this chapter intends to give an overview of the fundamental con-
cepts and notions. Fitness landscapes are an abstract way to express the relationship
between the genetically possible (genotype), the actual realized traits (phenotype),
and the phenotype’s survival/reproduction success (ﬁtness). This ﬁtness is the main
driving force behind evolutionary processes, and evolution, in turn, is a deﬁning in-
gredient of life. Section 1.1.1 sets out conceptional background and motivation for
using ﬁtness landscapes in studies of natural and artiﬁcial evolutionary processes.
For understanding and appreciating the role ﬁtness landscapes play in recent ad-
vances in evolutionary biology and evolutionary computation, it might be in order
to brieﬂy look at the history of using landscape models, which is given in Section
1.1.2. This Introduction is concluded with a more detailed discussion about life, evo-
lution and ﬁtness. Section 1.2 formally introduces ﬁtness landscapes and provides
mathematical notions and concepts. Fitness landscapes originated from evolution-
ary biology. Section 1.3 overviews ﬁtness landscapes for studying how evolutionary
development proceeds and how this may offer clues about predicting evolution-
ary paths in biological systems. The three major sources that fueled this discussion
Hendrik Richter
HTWK Leipzig University of Applied Sciences,
Faculty of Electrical Engineering and Information Technology, D–04251 Leipzig, Germany
e-mail: richter@eit.htwk-leipzig.de
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
3
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_1, c⃝Springer-Verlag Berlin Heidelberg 2014

4
H. Richter
are reviewed, namely (i) geometrical intuition and conception, (ii) computational
experiments with designed models of ﬁtness landscapes, and (iii) microbiological
(microbial) experiments which give raise to empirical ﬁtness landscapes. It is also
brieﬂy described how insights from ﬁtness landscapes in evolutionary biology were
received, modiﬁed and adapted in evolutionary computation. This chapter only con-
siders ﬁtness landscapes for a single species that are constant over time. However,
changing environmentsand the coexistence of several species alter the rules for stay-
ing alive. For an introduction of dynamic ﬁtness landscapes and coevolution refer to
Chapter 10.
1.1.1
Motivation
One of the central research questions of the 21th century is how to advance our
understanding about what life is in itself and what organizational, structural and
developmental principles may be connected with it. Here, life means in the same
way the state of being alive as well as the process of exhibiting life–like properties.
Posing these questions is at least accompanied by, but rather interacts with, is partly
driven by, and partly drives, two other major trends in modern science. One is the
substantial progress in our knowledge about the biochemistry of living structures
on a molecular (microscopic) level. This starts with sequencing whole genomes and
decoding them, goes on with understanding the mechanisms of the transfer of ge-
netic information from the genome to proteins, reaches as far as the dynamics of
protein structuring and folding, and concludes with the functions a protein (or a set
of proteins) has in an organism and how this function might affect reproduction suc-
cess and longevity. Each of these topics has reached a certain degree of maturity and
is more or less solidly based, while at the same time some fundamental questions
still await to be answered. One of the main research questions within this trend is
to establish a sound theoretical understanding of how this chain of topics can be
consistently connected.
The other trend is the ubiquity of computing devices in the form of cheap, re-
liable, fast and increasingly networked digital computers. This is accompanied by
attempts to make more and more structures and processes available for mathemat-
ical and algorithmic description with the general aim to make these structures and
processes computable. This naturally applies to innate ﬁelds of scientiﬁc comput-
ing, such as physics and chemistry, but also extends (at least partially) to biolog-
ical, neuropsychological and social phenomena. This touches on the question of
what is computable in general, but also what kind of mathematical description is
most suitable for catching the essentials of what is studied, and how this description
can be obtained. It goes on with the question of what is the appropriate compu-
tational environment for the mathematical/algorithmic description of structures and
processes and how to put the description to the computational environment, and con-
cludes with designing, conducting, evaluating, visualizing and interpreting the nu-
merical (computational) experiments. Arguably, for working on detailed questions
in each of these two trends, it might be possible to take little notice of the other one.

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
5
However, some of the most intriguing and fundamental issues exist in the border
territory between both trends, most notably in computational biology and bioinfor-
matics, but also in artiﬁcial life and evolutionary computation. Life in itself can be
understood as propagation and transfer of information and hence in its core and
substance is a computational issue [1, 2, 98]. It seems to be obvious that this is
the case for all attempts to model and compute life and/or life–like behavior artiﬁ-
cially. However, this explicitly applies to all known forms of natural life, that are the
molecular, carbon– and protein–based forms of living beings on our planet.
The explanatory and predictive power of natural sciences is closely related to the
possibility of meaningful mathematization. Immanuel Kant’s famous dictum that
“any particular natural theory contains only so much true science as it contains
mathematics”1
catches the spirit of this thinking as well as gives it a pragmatic outlook at what
is (or even should be) the developmental direction of a branch of science. Partic-
ularly in physics, but also in chemistry, this became the way to proceed after the
dictum was ﬁrst uttered near the end of the 18th century. The remarkable success in
explaining and predicting natural phenomena of inanimate, non–living matter that
has set in ever since is unthinkable without the powerful mathematical penetration
we ﬁnd in physics and chemistry. The same is not exactly true for biology and the
study of living matter. It cannot be said that all ﬁelds of biology at all times openly
embraced mathematics. There has been (and still is) much argument about biol-
ogy being different from other sciences, particularly from physics and chemistry,
and therefore defying, at least partly, meaningful mathematization. Even thinkers in
biology as inﬂuential and progressive as Ernst Mayr sometimes detected in math-
ematics “a harmful inﬂuence on the development of biology” [73], p. 304. There
are several reasons for this state of affairs: for the harsh coexistence of potentials
and limitations, of promises and pitfalls that are connected with the fundamental
progress towards algorithmization, computization and mathematization in biology;
see e.g. [19, 57, 65, 106] for some recent discussion. One group of reason surely is
that biological systems exhibit an enormous amount of complexity, inhomogeneity
and diversity that seemingly deﬁes to be harnessed to fundamental, all–compassing
natural laws that can be expressed by rather simple, equation–like mathematical
descriptions [6, 92]. In physics the presence of simple balance principles such as
conservation of energy/mass or momentum enables expression of fundamental re-
lationships by equations. Frequently, these equation–like mathematical descriptions
of physical laws can be solved analytically (or meaningfully simpliﬁed to become
analytically solvable) and give raise to easily calculable and evaluable formulae for
timely evolutions. This property sometimes puzzled even the profoundest thinkers
in physics, and Eugene Wigner even went as far as to acknowledge an “unreason-
able effectiveness of mathematics” [135] in describing physical reality. Quite the
1 The original quotation is: “Ich behaupte aber, daß in jeder besonderen Naturlehre nur so
viel eigentliche Wissenschaft angetroffen werden k¨onne, als darin Mathematik anzutreffen
ist.” [50], Preface, p. XIV.

6
H. Richter
contrary seems to be true in biology. Here, complex interactions and interdepen-
dencies on and between many spatial and temporal scales are found, also between
causes and effects, structures and behaviors, forms and functions. All these facts ap-
parently hinder to set up rules and laws that apply to all instances of a well–deﬁned
group of phenomena. In biology, it seems, the occurrence of important exceptions
from an established rule is the only rule without exceptions.
A possible way out of this difﬁculty occurring in biology might be to put much
more emphasis on case–based, local algorithmization and computization as on the
forms of mathematization frequently found in physics and chemistry. This goes con-
veniently along with the aforementioned trend of computization in other branches of
science. To describe biological phenomena, it appears, an algorithmic and computa-
tional approach is frequently much more suitable than looking for a set of equations
that can explain all. Moreover, to understand the information ﬂow in biological sys-
tems and processes by making it computable appears to be a more promising option
to overcome the limitation of a theorem–and–derived–fundamental–law approach.
Studying living matter most likely will not be based on a small number of funda-
mental laws expressible by rather simple equations.
The quotation mentioned above not only gives programmatic direction for a ﬁeld
of science, but also deﬁnes an axiomatic baseline that is, once accepted, generally
agreed upon without further proof or argument. Also in the life sciences there are
basic convictions forming some foundation for the ﬁeld. One is expressed by Theo-
dosius Dobzhansky and states:
“Nothing makes sense in biology except in the light of evolution,” [24] p. 449.
Our knowledge about a biological system is only superﬁcial if its evolutionary pro-
cesses are not included and not understood; it could even be said that the degree of
understanding a biological system scales to the understanding of its evolution. So, in
consequence of the discussion above, it becomes natural to seek for a mathematical
or algorithmic or computational framework for describing evolutionary processes.
Because the topic is of considerable signiﬁcance for biological phenomena, there
are several approaches to it. One is the mathematical theory of population genet-
ics [20, 32, 64], also see [89] for a computational perspective. This theory intends
to treat the Darwinian process of inheritance, genetic drift, variation and selection
by considering allele frequency distributions. This may result in formulae that de-
scribe, for instance, the probability that an allele connected to a particular advantage
goes into ﬁxation, how long that would take, and how different rules of inheritance
would affect these processes.
Another way to describe the dynamics of evolutionary processes is ﬁtness land-
scapes. The conceptional framework of ﬁtness landscapes origins from theoretical
biology and intends to address some of the most intriguing and fundamental ques-
tions in natural and artiﬁcial evolution: what way is evolution going, to what extend
is it predictable, what can be realistically expected to be the outcome of a certain pe-
riod of evolutionary development? For approaching these questions it appears to be
useful to have a mathematical notion about how the genetically possible (genotype),
the actual existing biological instance (phenotype) and the survival/reproduction

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
7
success (ﬁtness) relate to each other. This is what a ﬁtness landscape in an abstract
way does. It offers a framework for analyzing and visualizing the relationships be-
tween genotype, phenotype and ﬁtness. Interestingly, addressing these questions by
the framework of ﬁtness landscapes is valuable and well–established practice in both
evolutionary biology and evolutionary computation. Naturally, the above mentioned
fundamental questions take slightly different forms in both ﬁelds.
1.1.2
Historical Background
Fitness landscapes were ﬁrst proposed by Sewall Wright [140] in the 1930s as a
mapping from a set of genotypes to ﬁtness. The genotypes were countable and
neighboring in such a way that genotypes next to each other can mutate from one
to another. The ﬁtness landscape framework axiomatically assumes that for every
genotype there is (or can be assigned) a ﬁtness value2,3. This ﬁtness value can be
viewed as an elevation over the genotypic space. In other words, ﬁtness is a property
of the genotype expressed as its orthogonal projection. Based on this convention, the
ﬁtness landscape metaphor becomes apparent: that of a mountainous region with
peaks, valleys, ridges and plateaus (see Figure 1.1). These topological features of
the ﬁtness landscape are critical for understanding the evolutionary dynamics that
is laid out by the landscape’s structure. Using this understanding it becomes ex-
plainable why some genotypes are more often realized as phenotypes than others
as evolutionary time goes by. Also it is explicable how likely it is that one phe-
notypic realization of a genotype origins from another. So, another important part
of the ﬁtness landscape thinking is that of evolutionary paths that are engraved on
2 Wright also advocated a second type of ﬁtness landscape that is conceptually related, but
methodologically different to the one considered in this chapter. In this second type, we
have a mapping from the allele frequency in a given population (replacing genotype)
to the population mean ﬁtness (replacing genotypic ﬁtness). It can been argued that the
population mean ﬁtness is continuous for population size going to inﬁnity. Hence, such
continuous population mean ﬁtness landscapes can be seen as ﬁlling the gaps between dis-
crete phenotypes that inevitable occur in granular (discrete) genotypic ﬁtness landscapes
because of this discreteness. Moreover, the genotypic landscape is obtained from the pop-
ulation mean landscape for population size going to unity [133]. On the other hand, there
has been substantial criticism on population mean ﬁtness landscapes, mainly on the ground
of these landscapes being an entirely geometrical concept inaccessible to computational or
empirical treatment [74]. For the same reason these landscapes are not considered further
in this chapter.
3 In the literature, next to the term ﬁtness landscape, also adaptive landscape can be found.
Both terms adaptive and ﬁtness landscape are sometimes used synonymously (for in-
stance by Wright himself [140, 142]), which may cause some confusion. More often,
they are taken to discriminate between landscapes that express relations between collective
quantities (allele or phenotype frequencies and mean ﬁtness) and landscapes that express
relations between individual quantities (genotypes, phenotypes and ﬁtness). Adaptive land-
scape refers to the former, while ﬁtness landscape refers to the latter. By this convention, a
population mean ﬁtness landscape is an adaptive landscape. According to the reasons given
in the footnote above, the term ﬁtness landscape is used and promoted in this chapter.

8
H. Richter
the landscape’s surface. These paths are taken by a succession of phenotypic real-
izations and utilize the population’s genotypic makeup from low–ﬁtness regions to
higher–ﬁtness regions.
The concept of ﬁtness landscapes introduced by Wright [140] attracted interest
particularly because it offered an approach to conceptionalize and visualize evo-
lutionary dynamics in various population genetics modes. The created diagrams
were considerably inﬂuential for thinking in an abstracted way about possible paths
evolutionary processes can follow and fostered an appropriate intuition for under-
standing evolutionary dynamics; see e.g. [85, 99, 108] for more detailed historical
remarks. However, as a conceptualization and visualization tool alone ﬁtness land-
scapes were mainly an illustration of certain settings and stages in the evolutionary
process. In other words, the landscapes were used retrospective to show how a cer-
tain known type of evolutionary dynamics could be explained. In their original form,
ﬁtness landscapes did not allow a computational approach to experiment with pos-
sible evolutionary scenarios.
A ﬁrst instance for a more computational approach to understand evolutionary
dynamics was proposed by Stuart Kauffman collaborating with Simon Levin [53]
and Edward Weinberger [54], called NK ﬁtness landscape. The NK ﬁtness land-
scape, formally introduced in Equation (1.3) in Section 1.3.2, is a computational
model where the ruggedness (or smoothness) of the landscape can be tuned by pa-
rameters, called N and K. The concept of ruggedness (or smoothness) intend to
generalize the features in the landscape metaphor. The genotypes are coded as a
string of length N over a given alphabet. Each string is attributed with a ﬁtness. Fix-
ing the way a string is built from the alphabet and establishing a distance measure
between strings deﬁne which genotypes are sitting next to each other. In addition,
K epistatic interactions modify the ﬁtness such that the ﬁtness of each string is the
sum of contributions from K other strings. This allows tuning between completely
smooth (K = 0) to most rugged (K = N −1). There exists an extensive and sophis-
ticated body of work, e.g. [26, 54, 55, 128, 131, 132], analyzing various aspects
of this landscape and providing important insight into evolutionary dynamics. In
particular, these studies have shown the importance of the landscape’s topology for
possible evolutionary pathways, and became the starting point for developing nu-
merically evaluable quantities, so called landscape measures, that can be seen as
to deﬁne some types of metric for ﬁtness landscapes. These measures quantify a
landscape by (possible a set of) numbers and allow comparison and assessment of
different types of topologies. Furthermore, the studies introduced concepts such as
modality, ruggedness, neutrality, long–path problems. These concepts characterize
different types of evolutionary scenarios. In addition, the works on NK landscapes
triggered and inspired thinking about whether such concepts would also be valuable
for understanding the working principles and behaviors of evolutionary computa-
tion methods such as genetic algorithms, evolutionary programming and evolution
strategies (see e.g. [7, 36] for a brief history of evolutionary algorithms). Referring
explicitly to the works of Kauffman and Weinberger, a ﬁrst attempt to explain the
working of a genetic algorithm using landscape analysis methods was by Bernard
Manderick and co–workers [72]. Also here much work has been done between then

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
9
Fig. 1.1 Static ﬁtness land-
scape in R2 as a moun-
tainous region with peaks,
valleys, ridges and plateaus
and now, and particularly the work of Terry Jones [46] turned out to be markedly in-
ﬂuential on applying landscape methods for analyzing, understanding and designing
evolutionary search algorithms.
It appears almost a little surprising that such a rather naive picture as a ﬁtness
landscape has meaning in evolutionary biology and evolutionary computation. Even
more so as there are conceptual similar mathematical constructs in branches of sci-
ences as illustrious as physics and chemistry [38, 110]. In this context they are called
energy landscapes. These energy landscapes occur for instance in the theory of spin
glasses [12, 79, 105, 143], in describing plastic dissipation processes in metals [81],
and surface patterns in alloys and ceramics [126]. In biochemistry the folding and
energy relaxation in proteins [82, 83, 109] and nucleic acids [8, 10, 47] can be
described by energy landscapes. Furthermore, there is a conceptually close relation-
ship to the potential energy surfaces of theoretical chemistry. The main difference
between energy landscapes and ﬁtness landscapes is that the elevation quantity in the
evolutionary context is ﬁtness, which is meant to be maximized, while the energy
that speciﬁes the elevation in energy landscapes is to be minimized. Clearly, this
simple inversion does not alter the intrinsic mathematical meaning and content, but
as the landscape metaphor originates from a geographical conceptualization it also
molds the way we perceive the potential for such an abstraction. Next to the static
topological features in the landscape this particularly applies to any form of dynam-
ics that may occur in or on the landscape. The dynamic behavior can be thought of as
that of motion on the landscape’s surface. In terms of the landscape metaphor, next
to the static mountains and valleys that characterize topology, there are lakes and
ﬂows that are the dynamic consequences of the topology and deﬁne potentials for
and actions of movement. Of course, the heuristic value of ﬁtness landscapes does
not stem from such two-dimensional images or picturing two–dimensional surfaces.
The value of the landscape metaphor is what can be mathematically derived from it.
The main motivation to employ a landscape approach is that it offers a
framework for a computational treatment. This treatment becomes geometrically

10
H. Richter
interpretable in a meaningful way for the aforementioned simple two–dimensional
case, but not for landscapes with a genotypic space with higher dimension. As any
interesting evolutionary process most likely has genotypes with more than two de-
grees of variation, this poses a serious limitation and a problem to overcome. This
is known since the beginning of employing ﬁtness landscapes to understand evolu-
tionary dynamics. No matter whether the landscapes may originate from modelling
biological processes or computational evolutionary search, the problem is present.
The tension and mixture between intuitive usefulness and apparent limitation is for
instance highlighted by Terry Jones in the aforementioned work laying out the po-
tential of landscape methods for describing computational evolutionary search, [46],
p. 45–46:
“The term ‘landscape’ has something powerfully seductive about it. The imagery it
evokes is so appealing that further thought can be completely suspended. An important
question to ask is why we would want to use such a term. The answer is presumably
that we hope to use the imagery (e.g., peaks, ridges, valleys etc.) to enhance our under-
standing of some process to develop new ideas for exploring spaces and to stimulate
questions about processes operating on these structures. All of this tends to rely rather
heavily on the simple properties that we see in physical three dimensional landscapes.
It is not clear just how many of the ideas scale up to landscapes with tens or thousands
of dimensions.”
Similar remarks can also be found in biological literature on ﬁtness landscapes,
e.g. [99]. However, to overcome the dimensionality issue is one of the major top-
ics in recent advances in the theory and application of ﬁtness landscapes. Two
major directions are employing landscape measures [94, 115] and visualization
schemes [74, 136]. Almost all chapters of this book address these topics to some
extend.
There is an extended body of literature on theoretical and applicational problems
and issues of ﬁtness landscapes in both ﬁelds, evolutionary biology and evolution-
ary computation. Particularly notable is the book by Gavrilets [41], who reviews
the state–of–the–art of a computational approach in evolutionary biology and aims
at summarizing and generalizing mathematical models that describe the dynamics
of speciation. A slightly different approach is applied by McGhee [75], who uses
graphic concepts, called theoretical morphospaces, for describing the process of
evolution. Morphospaces are geometrical spaces of both existent and non–existent
biological form.
1.1.3
Life, Evolution, and Fitness
Up to now, there is no ﬁnal scientiﬁc agreement about what exactly deﬁnes life,
and it even has been argued that attempts to deﬁne life addressing the needs from
different ﬁelds of science are all in vain [18, 17, 69]. On the other hand, there is,
in fact, also a certain amount of consensus as to what the deﬁning ingredients of
life are. Naturally, deﬁning life is inextricably intertwined with the aforementioned
task of identifying what life is and how its emergence from the physical world has

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
11
taken (or takes) place. To put it into other words, deﬁning life should be catching
the essence of understanding life. So apart from the ﬁelds of evolutionary biology
and artiﬁcial life (where ﬁtness landscapes are frequently used and hence are the
focus of this chapter – and this book), the question of deﬁning life also plays a
major role in molecular biology, synthetic biology and astrobiology. Reviewing the
different views in these ﬁelds, we generally notice three major components that are
independently necessary and jointly sufﬁcient for deﬁning life: self–reproduction,
metabolism, and evolution. Based on this understanding, a commonly used working
deﬁnition of life is [48] “a self–sustained chemical system capable of undergoing
Darwinian evolution”, which has also been adopted by the Exobiology program at
NASA. It appears to be interesting in our context that a paramount importance is put
on Darwinian evolution and its mechanism for understanding life.
Key components of this Darwinian mechanism are that each and every living
being is speciﬁed by a genetic code that codes for the individuals’ features and abil-
ities. These features and abilities determine (at least on average) the individuals’
success in survival and reproduction by the process of natural and sexual selec-
tion. To make this distinction even more clear, genetic coding is associated with the
individuals’ genotypes, the abilities and features of the individuals with the pheno-
types. For expressing the (relative) amount of success quantitatively, the concept of
ﬁtness is employed. In general, ﬁtness measures the individual’s viability as the like-
lihood to survive to the age of reproducing and actually reproduce. In other words,
the larger the reproduction success of an individual is, the higher is its ﬁtness. As
the genetic code (or at least snippets of it) is propagated to the next generation by
reproducing, features and abilities become inheritable. On average, this applies dis-
proportionately for features and abilities that enhance ﬁtness.
It should be mentioned that there is occasional criticism on the importance of
Darwinian evolution for deﬁning what life is. This has much to do with the question
of why such a deﬁnition is important and what the intended (or possible) use of the
deﬁnition is. Some of the ﬁelds of science mentioned above, namely artiﬁcial life,
synthetic biology and astrobiology, are frequently faced with the following task:
they deal with phenomena (either observed extra–terrestrially as in astrobiology, or
programmed in software, as in artiﬁcial life, or bio–chemically set up in wetware, as
in synthetic biology) and are to decide if the phenomena qualify or not as constitut-
ing life or being alive. There are several issues with including Darwinian evolution
in such a deﬁnition. A ﬁrst is in astrobiology, where an in situ search for life on an-
other celestial body is hindered by the need to ﬁnd evidence for Darwinian evolution
as it may take a considerable period of time to establish such an observation [16]. In
synthetic biology it is conceivable to have naked RNA molecular life forms, which
would conﬂate phenotype with genotype and hence violating some principles of
Darwinian evolution [49, 66]. Artiﬁcial life models with metabolic properties have
been studied that show chemical and spatio–temporal self–organization similarly
to living entities but forgo evolutionary processes in a strict sense [30, 33, 120].
However, in all these examples the absence of Darwinian evolution is caused by
operational or methodological objections, not as a result of principle considera-
tions. Hence, it is sensible to say that every realistic understanding of life should

12
H. Richter
incorporate evolution as a leading and deﬁning factor, and that thinking about life
is incomplete without evolutionary processes. Moreover, understanding the mecha-
nisms and dynamics of evolution is a necessity to explain the emergence of complex
biological systems, may they be natural or artiﬁcial.
1.2
Fitness and Fitness Landscapes
A (static) ﬁtness landscape ΛS can be expressed by [51, 119]
ΛS = (X,n, f),
(1.1)
where X is a conﬁguration space, n(x) is a neighborhood structure that assigns to ev-
ery x ∈X a set of (more or less distant) neighbors, and f(x) : X →R is a ﬁtness func-
tion that gives to every x ∈X a proprietary quantity to be interpreted as a ‘quality’
information. In other words, the conﬁguration space in connection with the neigh-
borhood structure expresses a (possibly multi–dimensional) ‘location’, while the
ﬁtness is an orthogonal projection from location, deﬁning an ‘elevation’ or ‘height’
and at the same time giving a location its most important property. Fitness is usu-
ally considered a single parameter but it seems perfectly possible to have a height
measure with several dimensions.
The origin and character of a conﬁguration space, neighborhood structure and
ﬁtness function differ, naturally, in evolutionary biology and evolutionary computa-
tion, and also in different application contexts in each of these ﬁelds. Moreover, in
the literature on ﬁtness landscapes in general, and also in the different chapters of
this book, we ﬁnd additional terms for the space over which the ﬁtness landscape
is deﬁned. Next to the term conﬁguration space, there is also genotypic space, se-
quence space, search space, or representation space. All these terms are synonymous
in that they specify how the location is set out for which the ﬁtness allocated is its
constituting property. The terms differ in the origin and meaning of the location,
and hence of the landscape itself. Conﬁguration space can be seen as the most gen-
eral term. It is made up of a ﬁnite or inﬁnite number of conﬁgurations the genetic
description of the natural or artiﬁcial biological systems can have. For natural bio-
logical systems, the genetic description is associated with the genotype, giving raise
to the genotypic space. Sequence space can often be found in discussions of the re-
lations between genotypes and ﬁtness of (micro-)biological entities whose genetic
speciﬁcation and coding is based on DNA or RNA sequences, or on strings of their
binary genomic equivalents. Search space is frequently used to underline the aspect
of evolutionary search and evolutionary optimization, and it is hence mainly found
in approaches to employ ﬁtness landscapes to understand evolutionary computation.
Representation space is often employed to characterize the situation where differ-
ent representations of the evolutionary search algorithm redeﬁne the search space
and its neighborhood structure. In this view, the representation space is imposed by
the way the search algorithm codes possible solutions. For the same conﬁguration
space, therefore, we can deﬁne several representation spaces.

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
13
In evolutionary biology, the conﬁguration space consists of the genotypes of the
biological system under study [55, 140]. The genotype characterizes the genetic
make–up of a generic individual. It comprises of the sum (or union) of all geneti-
cally possible individuals and hence is the total genetic information. The neighbor-
hood of a genotypic location is deﬁned by which other genotypes are adjacent, near,
close, accessible or reachable. Adjacency, nearness, or closeness and accessibility
or reachability in a genetic context is measured by simple one–step evolutionary
variations. These variations might be asexual, which speciﬁes a mutational neigh-
borhood, or sexual, which leads to a recombinational neighborhood.In a rather static
view, expressed by the terms adjacency, nearness, and closeness, neighborhood im-
plies which genotypes are next to each other. In a more dynamic view, expressed
by the terms accessibility and reachability, neighborhood deﬁnes which genotypes
can be explored from a given starting genotype by a possible one–step evolutionary
trajectory. In other words, the dynamic properties intrinsic to evolutionary processes
invoke a collection of possible transitions between genotypes. A succession of evo-
lutionary transitions is also known as a walk.
Depending on the evolutionary variation considered (asexual or sexual) there
may be a mutational trajectory or a recombinational trajectory. For describing muta-
tional trajectories through genotypic space, Gillespie’s strong selection/weak muta-
tion (SSWM) model [42, 133] allows a simple mathematical treatment. This model
assumes that the population is genetically monomorphic and considers that one–
step transitions between genotypes take place as occasional random point mutations.
SSWM further postulates that natural selection and genetic drift instantly lead ei-
ther to ﬁxation or elimination of the mutant genotype. As the conﬁguration space
that codes for natural biological genotypes is made up of strings over a ﬁnite al-
phabet, point mutations are ﬂips in the letters of the alphabet at single points on the
string. Hence, a mutational trajectory originates from subsequently executing one of
the several possible single point changes in the string describing the genotype. As
a consequence, the static and dynamic aspects of the genotypic space expressed by
the notion of adjacency and accessibility, respectively, reﬂect each other.
For deﬁning recombinatorial trajectories, the SSWM model is not suitable. To
begin with, the evolutionary one–step transitions are not longer necessarily random,
as the genetic material that undergoes recombination has been selected because of
the high ﬁtness of parental genotypes [133]. Also, polymorphism is required to gen-
erate recombinatorial evolutionary transitions. However, introducing polymorphism
qualitatively changes the genotypic space and particularly the character of possible
evolutionary transitions. As pointed out above, for mutational trajectories adjacency
and accessibility are equivalent concepts. For recombinatorial trajectories, it is not.
Recombination allows jumps through the genotypic space [133]. Moreover, it has
been shown that for homologous recombination (exchanged between two similar or
identical molecules of DNA) accessibility can be deﬁned topologically similar to the
adjacency of point mutation [43, 117, 118], but for non–homologous recombination
the resulting genotypic space seems to be no longer metric [111, 114]. For these
reasons, recombinatorial trajectories and hence recombinatorial ﬁtness landscapes
are an open research topic in theoretical biology. In evolutionary computation,

14
H. Richter
mutational as well as recombinatorial landscapes have been intensively studied
(see [46], but refer also to Chapter 13 of this book).
As pointed out above, the neighborhood structure is usually deﬁned by the prop-
erty of which genotypes can mutate from one to another [55] and genotypes are
coded as a string over a ﬁnite alphabet. Most faithful to biological reality is the al-
phabet A = (A,T,C,G) of the DNA space or the RNA alphabet A = (A,U,C,G).
Of course, strings using these alphabets can be recoded by using a binary alphabet
A = (0,1). This recasts the genotype as a binary genome and is also known as a
digital genome approach. By ﬁxing the length N of the string (or the number of base
pairs), we obtain the conﬁguration space X = AN. A speciﬁc position on the string
is called a locus. Each of the alternative values the locus (or several loci) can have is
an allele. An instance of such a binary conﬁguration space over the binary alphabet
is a sequence (or string)
S = (s1s2,...,si,...,sℓ),
(1.2)
which consist of ℓloci with two possible alleles (0 or 1) at each locus si.
Assigning ﬁtness to each element of the genotypic space requires additional con-
siderations. Until recently, the question of what ﬁtness a genotype actually has was
answerable only purely theoretically and also required (and still requires) deﬁning
an intermediate level between genotype and ﬁtness, i. e. the phenotypic space. The
reason for that is that it is complicated or even infeasible to assign a ﬁtness value
to the ‘microscopic’ genotype. Fitness, at least in any sensible (marco–)biological
sense, is connected to longevity and fertility and ultimately to reproduction success
of a speciﬁc individual acting in a particular environment. Such a phenotypic in-
dividual can be thought of as an instance of the generic individual speciﬁed by a
genotype. Hence, such a ﬁtness landscape ΛS is, strictly speaking, the product of
a genotype–to–phenotype–to–ﬁtness mapping and such landscapes have been the
subject of much theoretical work on evolutionary dynamics [53, 104, 127, 133].
Anyway, assigning ﬁtness to an actual biological (or even microbiological) entity
is a highly debatable matter [137]. Given the understanding that ﬁtness is the phe-
notype’s viability expressed as the fact of surviving to the age of reproduction and
actually reproducing, it can only be assigned after the life time of the individual.
Moreover, if higher ﬁtness not only means a high number of offspring, but also off-
spring that for itself survives and reproduces disproportionally successful, ﬁtness for
a given phenotypic realization can only be accredited after observing a larger time
window of (possibly overlapping) generations, while the environmental conditions
are to remain the same. In short: assigning ﬁtness is controversial. To circumvent
these debates (and equal difﬁculties of how genotype maps to phenotype), it is stan-
dard in theoretical approaches to evolutionary biology to implicitly deﬁne ﬁtness as
an axiomatic property of the landscape.
In evolutionary computation, by contrast, the conﬁguration space is made up by
the search space obtained from encoding all possible solutions of the optimization
problem. The neighborhood structure is a consequence of the search space and
hence the objects to be optimized over, but also of the genetic operators the evo-
lutionary search employs [51]. If the search space is metric (as for instance if the

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
15
search space elements are real or integer numbers, and the genetic operators act
on these numbers), then the neighborhood structure is inherent by the ordering of
numbers. If the search space is not metric (or can have several different kinds of met-
rics), the neighborhood structure needs to be deﬁned additionally. For examples, the
neighborhood structure of binary coding can be a Hamming distance of different
length, or the neighbors of tree representation are branches that differ by a (smaller
or larger) variation in the subtrees. Fitness in evolutionary computation is usually
also assigned via the associated optimization problem. As genotype codes for a pos-
sible solution, the problem’s objective function for this solution can be calculated.
This calculation may be as easy as inserting a variable into a mathematical formula,
or as complicated as providing several parameters to a complex simulation model
that in turn produces an output which needs to be evaluated. Anyway, at the end of
the process there is a single and unique value that constitutes the genotype’s ﬁtness.
If there is more than one value, they need to be aggregated (or treated as a multi–
objective optimization problem). In case the value changes by being recalculated
the ﬁtness landscape is dynamic.
1.3
Fitness Landscapes in Evolutionary Biology
As considered in the previous sections, ﬁtness landscapes are a geometrically mo-
tivated tool for discussing how the genetically possible (genotype), the actually re-
alized (biological) ‘life–form’ (phenotype) and the survival/reproduction success
(ﬁtness) relate to each other. These relations immediately suggest the question of
how an evolutionary development proceeds and hence evoke asking about the pre-
dictability of evolutionary paths. Up to most recently there were two major sources
that fueled this discussion. A ﬁrst is geometrical intuition and conception as in
Wright’s landscapes [140], a second is computational experiments with designed
models for ﬁtness landscapes as for instance with Kauffman’s NK landscapes [55];
hence both are, in essence, theoretical. Lately, a third source appeared that is empir-
ical by being based on biochemically altering biomolecular properties of organisms
(or single genes of organisms) and assigning quality information as ﬁtness to these
properties. This approach using microbiological (microbial) experiments gives raise
to empirical ﬁtness landscapes [67, 96, 121]. In this view, empirical ﬁtness land-
scapes connect molecular biology with evolutionary biology. These results have led
to a renewed interest in the framework of ﬁtness landscapes, as for the ﬁrst time
the question of the predictability of real evolutionary processes became address-
able. Clearly, these three sources interactively drive recent advances in understand-
ing ﬁtness landscapes in evolutionary biology. Nevertheless, they historically and
methodologically appeared in the given order, and are detailed in the following.
1.3.1
Topological Features of Fitness Landscapes
As discussed in the introduction, ﬁtness landscapes are a geometrically motivated
tool to visualize and evaluate how an evolving population may change over time.

16
H. Richter
The changes come into effect by one phenotypic realization of the genotype mu-
tating into another phenotypic realization4. Hence, as mentioned before, genotypic
locations in the landscape are distanced by the property that a single mutation leads
from one genotype to another genotype. We (axiomatically or empirically) add that
each genotype has a ﬁtness and observe that the changes are driven by the Darwinian
imperative to move into the direction of increasing ﬁtness, which immediately im-
poses evolutionary dynamics. Note that so far we have a purely geometrical concep-
tion of how topological features of the landscape (the hills, valley, plains and ridges
in the metaphor) result in potential for driving forces and dynamics (the lakes and
ﬂows in the landscape). By assuming that there are differences in ﬁtness over geno-
typic space, the movement goes towards an aim. This deﬁnes possible evolutionary
pathways that are directed and produces evolutionary outcomes that are more likely
than others. The question, therefore, is not whether the topology and structure of a
ﬁtness landscape is a predictor of a likely evolutionary path, for on a conceptional
level, the one deﬁnes the other. The question is whether the topology and structure
of the ﬁtness landscape at hand really matches the biological reality it supposes to
study.
An important component in addressing this question is to collect which topolog-
ical and structural features in a landscape are possible and allocate them to potential
and observed mechanisms of evolutionary dynamics. For two–dimensional land-
scapes, there are a limited number of features. Figure 1.2 gives a catalog of possible
topological features. The most basic feature is a single smooth peak as in Figure
1.2a. As discussed in Section 1.2 the landscape’s topology imposes a succession of
mutational transitions, which in turn deﬁne an evolutionary path with a correspond-
ing evolutionary process. All paths of increasing ﬁtness in Figure 1.2a go to the top.
Hence, the corresponding process is evolutionary hill climbing. Due to the simi-
larity to the same–named geographical landmark, a landscape with a single smooth
peak as in Figure 1.2a is also known as a Fuji landscape (or Mt. Fuji landscape, or
Fujiyama landscape). As a Fuji landscape consists of only one global optimum (and
no other peaks where the evolutionary path could get stuck and hence trapped), it
can also be consider as trap-free. To obtain a Fuji landscape, accessibility of possible
mutational trajectories requires that the genotype’s ﬁtness increases monotonically
with each mutation. In other words, each in a succession of mutations must be ben-
eﬁcial. It is an interesting question if this is a realistic assumption for a large group
of biological systems.
A landscape with more complicated features has more than one peak and valleys
between them. It is called a rugged landscape, as is shown in Figure 1.2b. A rugged
landscape consists of a number of peaks that can be interpreted as local or global
evolutionary optima. All peaks that are smaller than the largest one are local optima,
which can be interpreted as traps. The degree of ruggedness may vary, usually with
the number and the distribution of the peaks. An interesting question here is whether
the peaks are distributed more or less uniformly in the landscape, or whether they
rather group in distinct regions. The latter case is also known as the massif central
4 For reasons given in Section 1.2, we restrict our discussion on mutational trajectories.

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
17
(a)
(b)
(c)
(d)
(e)
(f)
Fig. 1.2 Geometrical features of ﬁtness landscapes in 2D. (a) Single smooth peak (Mt. Fuji
landscape), (b) Rugged landscape with multiple peaks, (c) Holey landscape, (d) Neutral
landscape with single narrow peak, (e) Barrier landscape, (f) Detour landscape (long path
problem).
hypothesis. While a minimum degree of ruggedness can be deﬁned as a smooth
Fuji landscape, a maximum degree of ruggedness is a landscape where the ﬁtness of
each of the neighbors of each genotype in the landscape is an independent (uncorre-
lated) realization of a random variable. This is known as the house–of–cards model
of landscapes [53, 60]. The term comes from the understanding that a mutational
transition from a functional (high–ﬁtness) genotype is comparable to pulling a card
from a house of cards, namely that the outcome is purely random. A single mutation

18
H. Richter
may malfunction the phenotypic realization of the genotype (proverbially collapse
the house of cards), and therefore eventuate in a low ﬁtness value, or it may have no
or little effect. Anyway, the result is unpredictable. Hence, ﬁtness over a genotypic
space are independent realizations of a random variable with a given distribution.
A rugged landscape also introduces a hill climbing evolutionary process, but
whether a smaller local optimum is reached or the larger global optimum depends
on the point in genotypic space where the walk starts from. All the genotypic start-
ing points that evoke evolutionary paths going uphill to a local or global optimum
form the optimum’s basin of attraction. This sensitivity of the evolutionary outcome
on starting points immediately poses a much more fundamental question. How can
a walk that is stuck on a hill escape that local optimum every again? As this ap-
parently requires a transition that loses ﬁtness, such evolutionary paths appear to
be unaccessible. The evolutionary process that may allow escaping local optima
is known as valley crossing. The problem of valley crossing is long–standing and
fundamental in evolutionary biology. It could even be said that without convincing
solutions it is difﬁcult to keep ﬁtness landscape arguments alive. There are two types
of approaches to the valley crossing problem. A ﬁrst tries to construct evolutionary
processes that circumvent the fact that natural selection does not tolerate deleteri-
ous mutations. A second group even questions if there are indeed valleys in relevant
ﬁtness landscapes that need to be crossed.
The ﬁrst group of arguments for the valley crossing problem has classical roots.
Wright’s shifting balance theory [139, 141] suggests that the needed process to
cross a valley in a ﬁtness landscape starts with an exploratory phase characterized
by random genetic drift. This leads to population subdivision with the subdivided
small populations (with small genetic variance) randomly exploring neighboring
genotypes. In other words, each of the small populations acts as a scout in genotypic
space. If they encounter superior ﬁtness peaks, they hill climb these peaks. Once es-
tablished on a peak of higher ﬁtness, migrants are send off that cause the other
subpopulations to shift, eventually collecting the whole population on the higher
peak and thus completing the valley crossing. An alternative, equally classical ex-
planation comes from Fisher [34] (also see [129] for a further discussion). Fisher
argues that valley crossing is mainly unnecessary as ecological and geological fac-
tors would dynamically change environmental conditions frequently, thus regularly
recasting the hills–and–valleys structure of the ﬁtness landscape. In other words, a
population on a local peak could simple sit and wait until the peak becomes the
starting point of an accessible uphill path to higher ﬁtness. If, on the other hand, the
local peak becomes a deep valley, this may simply lead to extinction. In this view,
any realistic ﬁtness landscape is a dynamic ﬁtness landscape.
Next to these classical solutions of the valley crossing problem, there are fur-
ther possible mechanisms. For instance, the crossing could be contrived by com-
pensatory mutations [59, 134]. The compensation happens by the co–occurring (or
consecutive occurring) of two mutations, each of which is individually deleterious
or neutral, but combined are beneﬁcial enough to bridge the valley. This process
is closely related to sign epistasis [133]. Epistasis in general refers to the effect
that the ﬁtness of a genotype after a mutational transition depends not only on the

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
19
genotypes before and after the transition, but also on the genetic context in which
this transition takes place. Sign epistasis in particular means that the genetic context
decides whether a mutation is beneﬁcial or deleterious. In other words, sign epistasis
is a property of the ﬁtness landscape and a prerequisite for the landscape’s rugged-
ness [63, 97] and hence the need for valley crossing. Compensatory mutations de-
scribe the order of mutations and hence the process by which the landscape’s rugged
features are transversed.
The second type of argument to the valley crossing problem, namely that valley
structures in ﬁtness landscapes are not frequent and therefore crossing is not neces-
sary, decomposes into two further variants. One is to show that ﬁtness landscapes
of relevant biological reality have no valleys as they are trap–free in the sense that
they resemble Fuji landscapes. There is some evidence for trap-freeness from em-
pirical ﬁtness landscapes discussed below and from other applicational ﬁelds (see
for instance Chapter 2 for further discussion). The second variant maintains that all
(or at least a large proportion of) high ﬁtness peaks are connected by ridges of equal
(or nearly equal) ﬁtness. Mutational trajectories could evolve along these ridges.
This is known as holey ﬁtness landscapes [40, 41] (see also Figure 1.2c). This
model holds that landscapes, particularity for higher dimensions, are rather holey
than rugged. This assessment relies upon three postulates. Firstly, the landscape is
mostly formed by networks of genotypes with similar high ﬁtnesses. Secondly, po-
tential lower ﬁtness regions are not targeted by mutational transitions because of the
deleterious effects these mutations would have. Thirdly, even higher ﬁtness is hardly
found in the landscape or it is difﬁcult to access, for instance because of barriers or
detours. Both types of regions apart from the network of similarity are hence hardly
traversed and therefore appear as embedded holes. There is some afﬁrmation for
holey landscapes from analytical [41] and computational [88] models, but also sub-
stantial criticism. In particular, holey landscape conjectures that for the dimension
of the landscape getting higher, more peaks are connected by ridges, thus reducing
the relative number of peaks. Computational experiments with the NK landscape
have not conﬁrmed this [84] (also see Chapter 18). Apart from these mechanisms
to accomplish valley crossings by mutational pathways, there are strong arguments
that sexual genetic variation and recombination give even more meaningful potential
to escape from local optima (see for instance [80, 130] for further discussions).
On a conceptional level, holey landscapes are closely related to neutral ﬁtness
landscapes (see Figure 1.2d). Here, almost all ﬁtness values are equal (or nearly
equal). Hence, mutational transitions happen, but have no effect in terms of change
in ﬁtness. This evolutionary process is also called neutral drift. For landscapes over
a conﬁguration space with a ﬁnite number of conﬁgurations, mutually accessible
genotypes of equal ﬁtness form a neutral network. Evolutionary dynamics takes
place by population drift along these neutral networks. If peaks deﬁne aims for
evolutionary developments, drift is seemingly aimless. However, this appears to be
an oversimpliﬁcation. Experiments with natural and artiﬁcial systems have demon-
strated that there are frequently long periods of evolutionary movement that reveal
no or little progress. On the other hand, these periods of drift are interrupted by
sporadic, sudden and substantial increases in ﬁtness. In other words, we have rare

20
H. Richter
leaps between one level of neutrality and another. Recent results both in evolution-
ary biology as well as evolutionary computation have shown that neutrality is a
common feature in ﬁtness landscapes [102, 125, 128]. On a theoretical level these
works are for instance Kimura’s neutral theory of molecular evolution [58] or Eigen
und Schuster’s works on molecular quasispecies [27, 28, 29]. Moreover, neutral-
ity plays an important role in RNA structures [101, 103], but also in evolutionary
robotics [52, 112, 113] (also see Chapters 8 and 9). Figure 1.2d not only contains a
neutral region, but also another landscape feature that makes ﬁnding the optimum
very difﬁcult: a single narrow peak with virtually no surrounding of increasing ﬁt-
ness serving as its basin of attraction. This is also called isolation or a needle–in–
the–haystack–problem.As there is no information guiding the evolutionary process,
there is no advantage compared to a purely random search.
There are further geometrical features of ﬁtness landscapes that can be seen as
obstructions to the hill climbing process. One is barriers (see Figure 1.2e). A bar-
rier encloses and separates local or global optima and prevents uphill evolutionary
paths that could connect them [35, 125]. In terms of the geometrical concepts, bar-
riers combine valleys and basins of attraction. In this sense, valleys surround peaks,
which in turn possess basins of attraction and barriers encloses these basins of at-
traction. In other words, barrier partition genotypic space in the peak’s basins of
attraction. Why this is an obstruction to hill climbing becomes understandable by
looking at Figure 1.2e. If the high peak in the center is surrounded by a circular val-
ley and another hill-like toroidal structure, this toroidal structure acts as a barrier for
the high peak for all evolutionary paths that start from outside the barrier. Of course,
some paths starting from the inner valley may be uphill walks to the high peak. On
the other hand, paths beginning from some other points in the inner valley and from
outside the barrier will climb the toroid, which is a local optimum. To now reach the
high peak is difﬁcult as it requires a valley crossing. For potential solutions to the
valley crossing problem, see the discussion above.
Another geometrical feature that hinders uphill paths is a detour landscape [95,
96], which is also known as the long path problem [45] (see Figure 1.2f). The pro-
cess of hill climbing is exacerbated by the path of increasing ﬁtness being small,
exclusive (illustrated in the graph by the Archimedean spiral in genotypic space),
and sensitive to perturbations. For a mutational trajectory, these properties of long
path problems mean that a walk has to ﬁnd a precise sequence of mutations, which
is difﬁcult or takes a considerable amount of time. In evolutionary computation,
it has been shown [39, 107] that this problem can be tackled by tailored mutation
schemes.
1.3.2
Computational and Empirical Landscapes
Figure 1.2 provides a catalog of possible topological features in ﬁtness landscapes.
These pictures as instructive as they might be, at the same time also clearly show
the limitation of geometrical conceptualization: it is bound to two dimensions. So,
the natural question to ask is if these topological features and the conclusions drawn

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
21
for evolutionary pathways and predictable outcomes will remain valid if the geno-
typic space is higher than two dimensions. From what we know now it seems that
this is not answerable as a yes–no question. It rather appears that the features are
present for all dimensions but increasing dimension may change what the features
mean. This becomes geometrically imaginable by going down in dimension and
considering one-dimensional slices through the two-dimensional genotypic space
in Figure 1.2. For instance it is straightforward to see that the concepts of single
peaks, ruggedness and neutrality have the same meaning in one-dimensional geno-
typic spaces as they have for two-dimensional landscapes. The geometrical features
imply the same transitional movements. On the other hand, ridges between high
ﬁtness peaks are not possible in one-dimensional landscapes. The same applies for
long-path problems. So, it makes sense to ask if the two-dimensional picture of a sin-
gle peaked, or hilly and rugged, or ﬂat and neutral landscape is relevant for higher
dimension. Answers to this question can not come form considering what is ge-
ometrically imaginable. We need to observe the geometry of (higher–dimensional)
computationally created landscapes and observe how empirical landscapes extracted
from biological processes with real informational (information–carrying)molecules
and processes look like.
There is a large number of publications with results from experiments with
computationally created ﬁtness landscapes. On the one hand, there are the ﬁtness
landscapes associated with optimization problems, which can be called problem–
induced landscapes. Alternatively, there are artiﬁcially designed landscapes. Par-
ticularly for combinatorial optimization, problems-induced ﬁtness landscapes have
been analyzed intensively. Examples are landscapes for the traveling salesman prob-
lem (TSP) [78, 116], graph partitioning [76], graph coloring [13], quadratic assign-
ment [23, 77], MAX-SAT [100] or the knapsack problem [122]. Although these
studies have the main focus of giving information for evolutionary solving the prob-
lem most effectively, the results also showed a large variety of landscape features
as cataloged in Figure 1.2. For instance, for the TSP it was demonstrated that the
symmetric TSP (traveling cost from point i to point j are the same as from j to i)
is rather smooth, while the asymmetric TSP is highly rugged [102, 115, 116], while
for the quadratic assignment problem we obtain a rather ﬂat landscape with a signif-
icant degree of neutrality [5, 23] (see also Chapter 9). For continuous (real-valued)
problems, similar numerical results were obtained for a wide class of benchmark
problems [14, 70] (also see Chapter 4). All these results have shown that usually the
landscape features do not appear as disjunct as in the conceptualization and often
a mix of features can be observed. This mix of features and therefore a blend of
ingredients for search hardness becomes plausible by considering the no free lunch
(NFL) theorem [21, 25, 138]. The theorem states that over all search problems, there
is no algorithm that performs better than others. If search hardness is expressed by
landscape features, then over all ﬁtness landscapes, we should have a blend of fea-
tures. Also, for problem-induced landscapes, there is no clear relation between fea-
tures and dimension. For some problems, the features become more prominent as
dimension increases, for others not. This is one reason for attempts to capture the
essence of landscape features and their interplay in so–called landscape measures,

22
H. Richter
refer to [71] for a comprehensive recent survey and outlook on open issues. Next to
these problem-induced landscapes, there are speciﬁcally designed landscapes.
Most notable and almost predominant among artiﬁcially designed computational
landscapes is Kauffman’s NK landscape [53, 54, 55] (also see [4, 84, 123, 128]
and the Chapters 9 and 18 for discussions of some recent results). The model has
two parameters, N and K. The parameter N is the string length of a string deﬁned
according to Equation (1.2) and hence sets the dimension of the genotypic space.
The parameter K describes the degree of epistatic interactions among the loci si
of the string S. The epistatic interactions are speciﬁed by setting K neighbors for
each loci si via a neighborhood function n(si,K) and deﬁning a ﬁtness contribution
fi(si,n(si,K)) for each locus si and the K neighbors. The ﬁtness f(S) of a genotype
S is calculated by
f(S) = 1
N
N−1
∑
i=0
fi(si,n(si,K)).
(1.3)
The ﬁtness contributions fi(si,n(si,K)) are deﬁned as realizations of a random
variable uniformly distributed on the interval [0,1] and hence also depend on the
neighborhood and thus on the interaction parameter K. By varying the interaction
parameter K between 0 ≤K ≤N −1, different degrees of ruggedness can be ad-
justed. It can be shown that for K = 0 we obtain a smooth single peaked Fuji like
landscape, while for K = N −1 we have maximal ruggedness as in a house–of–cards
landscape. The NK landscape can be modiﬁed to include neutrality, which is called
NKp landscapes [9]. For the NK landscape there also exists some analytic results
regarding the number of local optima [26, 56].
Another computational model of ﬁtness landscapes is the rough Mt. Fiji (RMF)
model [3, 37, 121]. This model has three parameters: a reference string S0, a drift
parameter c and a random distribution η. The ﬁtness f(S) of a genotype S is
f(S) = η(S)−c·dH(S,S0),
(1.4)
where dH(S,S0) is the Hamming distance between genotype S and reference geno-
type S0, and η(S) is a realization of the random variable η that is for each genotype
S in the landscape independent from the realizations of all the other genotypes. If we
set the drift parameter c to zero, we obtain the house–of–cards scenario, where each
ﬁtness is random and independent from and uncorrelated to the ﬁtness of neigh-
boring genotypes. We hence have maximum ruggedness. For values of c becoming
larger, we pass through different degrees of ruggedness which ﬁnally leads to a Fuji
landscape with a peak at the reference genotype S0.
A third alternative artiﬁcially designed landscape is the block model [86, 90]. It
also considers strings S deﬁned according to Equation (1.2) with length N and as-
sumes that the string is divided into B blocks of equal length μ = N
B and 1 ≤μ ≤N.
Each block epistatically interacts with other blocks and delivers a ﬁtness distribution
fi(μ), i = 1,2,...,B which is independently taken from a random variable uniformly
distributed on some ﬁnite interval. The ﬁtness f(S) of the string S is the sum of the
block ﬁtness distributions:

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
23
f(S) =
B
∑
i=1
fi(μ).
(1.5)
Similar to the NK landscape of Equation (1.3), the ﬁtness correlation between neigh-
boring strings (and hence the ruggedness) can be tuned; for the block model in
Equation (1.5) by the length μ of the blocks. For μ = 1, the landscape is maxi-
mally random and has maximum ruggedness. For μ = N, the landscape is smooth
and has a single global optimum. For intermediate values of μ, different degrees of
ruggedness can be composed. Despite the similarity between the block model and
the NK model, it has been pointed out that the block model has an interesting statis-
tical property that the NK model has not [86, 90]. Because the NK model calculates
ﬁtness as an average of N contributions, its ﬁtness distribution becomes normal due
to the central limit theorem effect. The variance of this distribution decreases as N
increases. This effect is also observable in the block model for the block number
B growing large, but much weaker than in the NK model. The landscape models
given with Equations (1.3), (1.4) and (1.5) are artiﬁcially designed to have the land-
scape features discussed in Section 1.3.1 and even allow tuning important aspects
such as ruggedness and neutrality. This gives raise to tunable ﬁtness landscapes.
Hence, these artiﬁcially designed landscapes can be used as theoretical background
and comparison for empirical studies of ﬁtness landscapes.
An empirical approach involves to carry out step–wise mutational evolution of
molecular functions. Hence, molecular evolution allows measuring the ﬁtness effect
that experimentally induced mutations have [67, 68, 96]. For instance, such exper-
iments have been done for catalytic RNA [93], viruses such as HIV-1 [62], bacte-
ria such as methylobacterium extorquens [15], β lactamase [67, 96], escherichia
coli [11, 31, 61] and escherichia coli lac [87], and fungi such as aspergillus
niger [22, 37] and saccharomyces cerevisiae [44, 63].
According to a recent survey of empirical ﬁtness landscapes by Szendro et
al. [121], studies of microbiological evolution can be categorized into three groups.
A ﬁrst group comprises of studies that focus on establishing local ruggedness of
landscapes by observing the repeatability of adaption in evolution experiments and
a second group intends to detect sign epsistais between mutations to conclude local
ruggedness. In other words, the works in these two groups of publications observe
evolutionary processes and draw conclusions regarding topological features of the
underlying ﬁtness landscape. A third group tries to evaluate the ﬁtness (or a ﬁt-
ness proxy) for all 2ℓcombinations of a small set of ℓmutations. For the ﬁtness
landscapes in the third group, qualitative measures of the landscape were calcu-
lated [121]. These qualitative measures are statistical landscape measures that show
ruggedness and epistasis and are, in principle, suitable to match empirical landscape
to landscape features. The results have shown that only a small number of the empir-
ical landscapes available now allow for some (rather preliminary) conclusions. For
instance, the landscapes of methylobacterium extorquens and β lactamase appear
rather smooth, escherichia coli lac even Fuji–like single peaked, while the land-
scapes for HIV-1, aspergillus niger and saccharomyces cerevisiae are much more
rugged. As pointed out by Szendro et al. [121], this might be caused by differing

24
H. Richter
aims in the underlying studies. Works that studied deleterious mutations tended to
obtain more rugged landscapes, while beneﬁcial mutations yielded smoother land-
scapes.
In conclusion, studies of empirical ﬁtness landscapes still only cover a small frac-
tion of the space of possibilities that the genetic coding of even very simple forms of
life such as viruses, bacteria and fungi offers. One of the reasons for difﬁculties in
mapping more extended empirical landscapes is that the ﬁtness effect of a mutation
may be subject to epistasis [91]. Epistasis refers to the fact that the ﬁtness associ-
ated with a mutation depends on the genetic context, that is the presence or absence
of other mutations. Epistasis renders generating empirical ﬁtness landscape com-
binatorially complex as the ﬁtness effect of a mutation on one locus is inﬂuenced
by the interaction of (possibly a larger number of) other loci [37]. Measuring these
effects goes to the limits of current capacities in sequencing technology. However,
extending our knowledge about empirical landscapes is not only promising, but also
mandatory for clarifying the value of ﬁtness landscape for providing a framework
to predict evolutionary paths and explain evolutionary development – general scien-
tiﬁc understanding is that the value of a theoretical framework can only be decided
by real–world experiments.
1.4
Concluding Remarks
In this chapter, fundamental concepts and notions of ﬁtness landscapes have been
studied. Based on a brief discussion of the origin of landscape paradigms, major
motivations to use ﬁtness landscapes have been presented and mathematical descrip-
tions of ﬁtness landscapes have been introduced. Fitness landscapes bring together
genotype, phenotype and ﬁtness and establish relationships between these three
quantities. Differences in ﬁtness over genotypic or phenotypic space result in non–
trivial ﬁtness landscapes featuring the peaks, valleys, ridges and plateaus known
from two–dimensional visualizations of the landscape metaphor. These topologi-
cal features, in turn, deﬁne evolutionary pathways that a succession of evolutionary
transitions (mutational or recombinatorial or otherwise) is likely to follow. Hence,
the structure and topology of a ﬁtness landscape deﬁnes potential for evolutionary
dynamics and is a predictor of evolutionary outcomes. In this chapter, it has been
discussed that establishing such predictions is interesting in evolutionary biology as
well as in evolutionary computation. Notably by using computational and empirical
landscapes, questions such as the likelihood of a particular evolutionary process (as
in evolutionary biology) or the expected performance and behavior of an evolution-
ary search algorithm (as in evolutionary computation) become addressable.
Static ﬁtness landscapes as discussed in this chapter and formally introduced by
Equation (1.1) are a rather straightforward model of the forces underlying evolution-
ary dynamics, but a necessary question is whether the model accurately describes
the relationships between genotypes, phenotypes and ﬁtness in the real world. An-
swering this question is outside the scope of this introductory chapter, which has
been focused on the implications of a given landscape. A ﬁrst issue is that at least a

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
25
considerable number of realistic ﬁtness landscapes are not static in the sense that the
relationship between genotype, phenotype and ﬁtness is constant over evolutionary
time. Part III of this book in entirely concerned with landscapes that are dynamic,
particularly refer to Chapter 10 for an introduction to and overview on dynamic ﬁt-
ness landscapes. A second issue is if the picture of ‘one genotype, one phenotype,
one ﬁtness value’ painted by the static landscape metaphor is really sufﬁcient. Re-
cent experimental and theoretical ﬁndings about information transfer in biological
systems indicate otherwise. For a discussion about the second issue and an outlook
to future questions and issues of ﬁtness landscapes refer to Chapter 19 of this book.
References
[1] Adami, C.: Information theory in molecular biology. Phys. Life Reviews 1, 3–22
(2004)
[2] Adami, C.: The use of information theory in evolutionary biology. Annals NY Acad.
Sciences 1256, 49–65 (2012)
[3] Aita, T., Husimi, Y.: Adaptive walks by the ﬁttest among ﬁnite random mutants on a
Mt. Fuji-type ﬁtness landscape. II. Effect of small non–additivity. J. Math. Biol. 41,
207–231 (2000)
[4] Aita, T.: Hierarchical distribution of ascending slopes, nearly neutral networks, high-
lands, and local optima at the dth order in an NK ﬁtness landscape. J. Theor. Biol-
ogy 254, 252–263 (2008)
[5] Angel, E., Zissimopoulos, V.: On the landscape ruggedness of the quadratic assign-
ment problem. Theor. Comp. Sci. 263, 159–172 (2001)
[6] Ao, P.: Laws in Darwinian evolution. Phys. Life Reviews 2, 117–156 (2005)
[7] B¨ack, T., Hammel, U., Schwefel, H.P.: Evolutionary computation: comments on the
history and current state. IEEE Trans. Evolut. Comput. 1, 3–17 (1997)
[8] Banavali, N.K., Roux, B.: Free energy landscape of A–DNA to B–DNA conversion in
aqueous solution. J. Amer. Chem. Soc. 127, 6866–6876 (2005)
[9] Barnett, L.: Ruggedness and neutrality - the NKp family of ﬁtness landscapes. In:
Adami, C., Belew, R.K., Kitano, H., Taylor, C. (eds.) Proc. Artiﬁcial Life VI, pp. 18–
27. MIT Press, Cambridge (1998)
[10] Baskaran, S., Stadler, P.F., Schuster, P.: Approximate scaling properties of RNA free
energy landscapes. J. Theor. Biology 181, 299–310 (1996)
[11] Beerenwinkel, N., Pachter, L., Sturmfels, B., Elena, S.F., Lenski, R.E.: Analysis of
epistatic interactions and ﬁtness landscapes using a new geometric approach. BMC
Evolutionary Biology 7, 60 (2013),
http://www.biomedcentral.com/1471-2148/7/60
(retrieved April 15, 2013)
[12] Binder, K., Young, A.P.: Spin glasses: Experimental facts, theoretical concepts, and
open questions. Rev. Mod. Phys. 58, 801–976 (1986)
[13] Bouziri, H., Mellouli, K., Talbi, E.G.: The k-coloring ﬁtness landscape. J. Comb. Op-
tim. 21, 306–329 (2011)
[14] Caama˜no, P., Bellas, F., Becerra, J.A., Duro, R.J.: Evolutionary algorithm characteriza-
tion in real parameter optimization problems. Applied Soft Computing 13, 1902–1921
(2013)
[15] Chou, H.H., Chiu, H.C., Delaney, N.F., Segr´e, D., Marx, C.J.: Diminishing re-
turns epistasis among beneﬁcial mutations decelerates adaptation. Science 332(6034),
1190–1192 (2011)

26
H. Richter
[16] Chyba, C.F., Philipps, C.B.: Europa as an abode of life. Orig. Life Evol. Biosph. 32,
47–67 (2002)
[17] Cleland, C.E.: Life without deﬁnitions. Synthese 185, 125–144 (2012)
[18] Cleland, C.E., Chyba, C.F.: Deﬁning life. Orig. Life Evol. Biosph. 32, 387–393 (2002)
[19] Cohen, J.E.: Mathematics is biology’s next microscope, only better; Biology
is mathematics’ next physics, only better. PLoS Biol. 2(12), e439 (2004),
doi:10.1371/journal.pbio.0020439
[20] Crow, J.F., Kimura, M.: Introduction to Population Genetics Theory. Blackburn Press,
Caldwell (2009)
[21] Culberson, J.C.: On the futility of blind search: An algorithmic view of “no free lunch”.
Evolut. Comput. 6, 109–127 (1998)
[22] de Visser, J.A.G.M., Park, S.C., Krug, J.: Exploring the effect of sex on empirical
ﬁtness landscapes. The American Naturalist 174, S15–S30 (2009)
[23] Daolio, F., Verel, S., Ochoa, G., Tomassini, M.: Local optima networks of the quadratic
assignment problem. In: Fogel, G., Ishibuchi, H. (eds.) Proc. Congress on Evolutionary
Computation, IEEE CEC 2010, pp. 1–8. IEEE Press, Piscataway (2010)
[24] Dobzhansky, T.: Biology, molecular and organismic. American Zoologist 4, 443–452
(1965)
[25] Droste, S., Jansen, T., Wegener, I.: Optimization with randomized search heuristics–
the (A)NFL theorem, realistic scenarios, and difﬁcult functions. Theor. Comp.
Sci. 287, 131–144 (2002)
[26] Durrett, R., Limic, V.: Rigorous results for the NK model. Ann. Probability 31, 1713–
1753 (2003)
[27] Eigen, M.: Selforganization of matter and the evolution of biological macromolecules.
Die Naturwissenschaften 58, 465–523 (1971)
[28] Eigen, M., Schuster, P.: The Hypercycle: A Principle of Natural Self-Organization.
Springer, Berlin (1979)
[29] Eigen, M., McCaskill, J., Schuster, P.: The molecular quasi-species. Adv. Chem.
Phys. 75, 149–263 (1989)
[30] Egbert, M.D., Barandiaran, X.E., Di Paolo, E.A.: Behavioral metabolution: the adap-
tive and evolutionary potential of metabolism–based chemotaxis. Artiﬁcial Life 18,
1–25 (2012)
[31] Elena, S.F., Lenski, R.E.: Test of synergistic interactions among deleterious mutations
in bacteria. Nature 390, 395–398 (1997)
[32] Ewens, W.J.: Mathematical Population Genetics. Springer, Berlin (2004)
[33] Fernando, C., Rowe, J.: The origin of autonomous agents by natural selection. Biosys-
tems 91, 355–373 (2008)
[34] Fisher, R.A.: The Genetical Theory of Natural Selection. Clarendon Press, Oxford
(1930)
[35] Flamm, C., Hofacker, I.L., Stadler, P.F., Wolﬁnger, M.T.: Barrier trees of degenerate
landscapes. Z. Phys. Chem. 216, 1–19 (2002)
[36] Fogel, D.B.: Evolutionary Computation: The Fossil Record. IEEE Press, Piscataway
(1998)
[37] Franke, J., Kl¨ozer, A., de Visser, J.A.G.M., Krug, J.: Evolutionary accessibility of
mutational pathways. PLoS Comput Biol 7(8), e1002134 (2011),
doi:10.1371/journal.ci.1002134
[38] Frauenfelder, H., Leeson, D.T.: The energy landscape in non–biological and biological
molecules. Nature Structural Biology 5, 757–759 (1998)

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
27
[39] Garnier, J., Kallel, L.: Statistical distribution of the convergence time of evolutionary
algorithms for long-path problems. IEEE Trans. Evolut. Comput. 4, 16–30 (2000)
[40] Gavrilets, S., Gravner, J.: Percolation on the ﬁtness hypercube and the evolution of
reproductive isolation. J. Theor. Biology 184, 51–64 (1997)
[41] Gavrilets, S.: Fitness Landscapes and the Origin of Species. Princeton University
Press, Princeton (2004)
[42] Gillespie, J.H.: Molecular evolution over the mutational landscape. Evolution 38,
1116–1129 (1984)
[43] Gitchoff, P., Wagner, G.P.: Recombination induced hypergraphs: a new approach to
mutation-recombination isomorphism. Complexity 2, 37–43 (1996)
[44] Hall, D.W., Agan, M., Pope, S.C.: Fitness epistasis among 6 biosynthetic loci in the
budding yeast Saccharomyces cerevisiae. Journal of Heredity 101, S75–S84 (2010)
[45] Horn, J., Goldberg, D.E., Deb, K.: Long path problems. In: Davidor, Y., M¨anner, R.,
Schwefel, H.-P. (eds.) PPSN III 1994. LNCS, vol. 866, pp. 149–158. Springer, Heidel-
berg (1994)
[46] Jones, T.: Evolutionary algorithms, ﬁtness landscape and search. PhD thesis, The Uni-
versity of New Mexico, Albuquerque (1995)
[47] Joseph, J., Schuster, G.B.: Emergent functionality of nucleobase radical cations in
duplex DNA: Prediction of reactivity using qualitative potential energy landscapes. J.
Amer. Chem. Soc. 128, 6070–6074 (2006)
[48] Joyce, G.F.: Foreword. In: Deamer, D.W., Fleischaker, G.R. (eds.) Origins of Life: The
Central Concepts, pp. xi–xii. Jones and Bartlett, Boston (1994)
[49] Joyce, G.F.: The antiquity of RNA–based evolution. Nature 418, 214–221 (2002)
[50] Kant, E.: Metaphysische Anfangsgr¨unde der Naturwissenschaft. Johann Friedrich
Hartknoch, Riga (1786)
[51] Kallel, L., Naudts, B., Reeves, C.R.: Properties of ﬁtness functions and search land-
scapes. In: Kallel, L., Naudts, B., Rogers, A. (eds.) Theoretical Aspects of Evolution-
ary Computing, pp. 177–208. Springer, Heidelberg (2001)
[52] Katada, Y., Ohkura, K.: Estimating the degree of neutrality in ﬁtness landscapes by
the Nei’s standard genetic distance – An application to evolutionary robotics. In: Yen,
G.G., Lucas, S.M., Fogel, G., Kendall, G., Salomon, R., Zhang, B.T., Coello Coello,
C.A., Runarsson, T.P. (eds.) Proc. Congress on Evolutionary Computation, IEEE CEC
2006, pp. 483–490. IEEE Press, Piscataway (2006)
[53] Kauffman, S.A., Levin, S.: Towards a general theory of adaptive walks on rugged
landscapes. J. Theor. Biology 128, 11–45 (1987)
[54] Kauffman, S.A., Weinberger, E.D.: The NK Model of rugged ﬁtness landscapes and
its application to the maturation of the immune response. J. Theor. Biology 141, 211–
2445 (1989)
[55] Kauffman, S.A.: The Origin of Order: Self–Organization and Selection in Evolution.
Oxford University Press, New York (1993)
[56] Kaul, H., Jacobson, S.: Global optima results for the Kauffman NK model. Mathemat-
ical Programming 106, 319–338 (2006)
[57] Keller, E.F.: A clash of two cultures. Nature 445, 603 (2007)
[58] Kimura, M.: The Neutral Theory of Molecular Evolution. Cambridge University Press,
Cambridge (1983)
[59] Kimura, M.: The role of compensatory neutral mutations in molecular evolution. Jour-
nal of Genetics 64, 7–19 (1985)
[60] Kingman, J.: A simple model for the balance between selection and mutation. J. Appl.
Probab. 15, 1–12 (1978)

28
H. Richter
[61] Khan, A.I., Dinh, D.M., Schneider, D., Lenski, R.E., Cooper, T.F.: Negative epistasis
between beneﬁcial mutations in an evolving bacterial population. Science 332(6034),
1193–1196 (2011)
[62] Kouyos, R.D., Leventhal, G.E., Hinkley, T., Haddad, M., Whitcomb, J.M., Petropou-
los, C.J., Bonhoeffer, S.: Exploring the complexity of the HIV-1 ﬁtness landscape.
PLoS Genet. 8(3), e1002551, doi:10.1371/journal.pgen.1002551
[63] Kvitek, D.J., Sherlock, G.: Reciprocal sign epistasis between frequently experimen-
tally evolved adaptive mutations causes a rugged ﬁtness landscape. PLoS Genet. 7(4),
e1002056 (2011), doi:10.1371/journal.pgen.1002056
[64] Hartl, D.L., Clark, A.G.: Principles of Population Genetics. Sinauer Associates, Sun-
derland (2007)
[65] van Hemmen, J.L.: Biology and mathematics: A fruitful merger of two cultures. Biol.
Cybern. 97, 1–3 (2007)
[66] Lincoln, T.A., Joyce, G.F.: Self–sustained replication of an RNA enzyme. Science 323,
1229–1232 (2009)
[67] Lobkovsky, A.E., Wolf, Y.I., Koonin, E.V.: Predictability of evolutionary tra-
jectories in ﬁtness landscapes. PLoS Comput. Biol. 7(12), e1002302 (2011),
doi:10.1371/journal.pcbi.1002302
[68] Lunzer, M., Miller, S.P., Felsheim, R., Dean, A.M.: The biochemical architecture of
an ancient adaptive landscape. Science 310(5747), 499–501 (2005)
[69] Machery, E.: Why I stopped worrying about the deﬁnition of life..and why should you
as well. Synthese 185, 145–164 (2012)
[70] Malan, K.M., Engelbrecht, A.P.: Quantifying ruggedness of continuous landscapes
using entropy. In: Tyrrell, A. (ed.) Proc. Congress on Evolutionary Computation, IEEE
CEC 2009, pp. 1440–1447. IEEE Press, Piscataway (2009)
[71] Malan, K.M., Engelbrecht, A.P.: A survey of techniques for characterising ﬁtness land-
scapes and some possible ways forward. Information Science 241, 148–163 (2013)
[72] Manderick, B., de Weger, M., Spiessens, P.: The genetic algorithm and the structure of
the ﬁtness landscape. In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the Fourth
International Conference on Genetic Algorithms, pp. 143–150. Morgan Kauffman, San
Mateo (1991)
[73] Mayr, E.: The Growth of Biological Thought: Diversity, Evolution, and Inheritance.
Belknap Press of Harvard University Press, Cambridge (1982)
[74] McCandlish, D.M.: Visualizing ﬁtness landscapes. Evolution 65, 1544–1558 (2011)
[75] McGhee, G.R.: The Geometry of Evolution Adaptive Landscapes and Theoretical
Morphospaces. Cambridge University Press, Cambridge (2006)
[76] Merz, P., Freisleben, B.: Memetic algorithms and the ﬁtness landscape of the graph
bi-partitioning problem. In: Eiben, A.E., B¨ack, T., Schoenauer, M., Schwefel, H.-P.
(eds.) PPSN V 1998. LNCS, vol. 1498, pp. 765–774. Springer, Heidelberg (1998)
[77] Merz, P., Freisleben, B.: Fitness landscape analysis and memetic algorithms for the
quadratic assignment problem. IEEE Trans. Evolut. Comp. 4, 337–352 (2000)
[78] Merz, P.: Advanced ﬁtness landscape analysis and the performance of memetic algo-
rithms. Evolut. Comput. 12, 303–325 (2004)
[79] M´ezard, M., Paresi, G., Virasoro, M.: Spin Glass Theory and Beyond. World Scientiﬁc,
Singapore (1987)
[80] Mills, R., Watson, R.A.: On crossing ﬁtness valleys with the Baldwin effect. In: Rocha,
L., Yaeger, L., Bedau, M., Floreano, D., Goldstone, R., Vespignani, A. (eds.) Proc.
Artiﬁcial Life X, pp. 493–499. MIT Press, Cambridge (2006)

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
29
[81] Ogata, S., Li, J., Yip, S.: Energy landscape of deformation twinning in bcc and fcc
metals. Phys. Rev. B 71, 224102–224112 (2005)
[82] Onuchic, J.N., Luthey Schulten, Z., Wolynes, P.G.: Theory of protein folding: The
energy landscape perspective. Ann. Rev. Phys. Chem. 48, 545–600 (1997)
[83] Onuchic, J.N., Wolynes, P.G.: Theory of protein folding. Curr. Opin. Struc. Biolog. 14,
70–75 (2004)
[84] Østman, B., Hintze, A., Adami, C.: Critical properties of complex ﬁtness landscapes.
In: Fellerman, H., D¨orr, M., Hanczyc, M.M., Ladegaard Laursen, L., Maurer, S.,
Merkle, D., Monnard, P.A., Stoy, K., Rasmussen, S. (eds.) Proc. Artiﬁcial Life XII,
pp. 126–132. MIT Press, Cambridge (2010)
[85] Orr, H.A.: The genetic theory of adaptation: a brief history. Nature Reviews Genetic 6,
119–127 (2005)
[86] Orr, H.A.: The population genetics of adaptation on correlated ﬁtness landscapes: the
block model. Evolution 60, 1113–1124 (2006)
[87] Otwinowski, J., Nemenman, I.: Genotype to phenotype mapping and the ﬁtness land-
scape of the E. coli lac promoter. arXiv preprint (2013),
http://arxiv.org/abs/1206.4209
[88] Paperin, G., Sadedin, S., Green, D., Dorin, A.: Holey ﬁtness landscapes and the main-
tenance of evolutionary diversity. In: Bullock, S., Noble, J., Watson, R.A., Bedau,
M.A. (eds.) Proc. Artiﬁcial Life XI, pp. 450–457. MIT Press, Cambridge (2008)
[89] Peng, B., Kimmel, M., Amos, C.I.: Forward–Time Population Genetics Simulations:
Methods, Implementation, and Applications. Wiley–Blackwell, Hoboken (2012)
[90] Perelson, S.A., Macken, C.A.: Protein evolution on partially correlated landscapes.
Proc. Natl. Acad. Sci. USA 92, 9657–9661 (1995)
[91] Phillips, P.C.: Epistasis–the essential role of gene interactions in the structure and evo-
lution of genetic systems. Nature Reviews Genetics 9, 855–867 (2008)
[92] Pigliucci, M., Kaplan, J.: Making Sense of Evolution: The Conceptual Foundations of
Evolutionary Biology. University of Chicago Press, Chicago (2006)
[93] Pitt, J.N., Ferr´e-D’Amar´e, A.R.: Rapid construction of empirical RNA ﬁtness land-
scapes. Science 330(6002), 376–379 (2010)
[94] Pitzer, E., Affenzeller, M.: A comprehensive survey of ﬁtness landscape analysis. In:
Fodor, J., Klempous, R., Su´arez Araujo, C.P. (eds.) Recent Advances in Intelligent
Engineering Systems. SCI, vol. 378, pp. 161–191. Springer, Heidelberg (2012)
[95] Poelwijk, F.J., Kiviet, D.J., Tans, S.J.: Evolutionary potential of a duplicated repressor-
operator pair: Simulating pathways using mutation data. PLoS Comput. Biol. 2(5), e58
(2006), doi:10.1371/journal.pcbi.0020058
[96] Poelwijk, F.J., Kiviet, D.J., Weinreich, D.M., Tans, S.J.: Empirical ﬁtness landscapes
reveal accessible evolutionary paths. Nature 445, 383–386 (2007)
[97] Poelwijk, F.J., Tˇanase-Nicola, S., Kiviet, D.J., Tans, S.J.: Reciprocal sign epistasis is a
necessary condition for multi-peaked ﬁtness landscapes. J. Theor. Biology 272, 141–
144 (2011)
[98] Polani, D.: Information: currency of life? HFSP Journal 3, 307–316 (2009)
[99] Provine, W.B.: Sewall Wright and Evolutionary Biology. University of Chicago Press,
Chicago (1986)
[100] Pr¨ugel–Bennett, A., Tayarani–Najaran, M.H.: Maximum satisﬁability: Anatomy of the
ﬁtness landscape for a hard combinatorial optimization problem. IEEE Trans. Evolut.
Comp. 16, 319–338 (2012)
[101] Reidys, C., Stadler, P.F., Schuster, P.: Generic properties of combinatory maps: neutral
networks of RNA secondary structures. Bull. Math. Biol. 59, 339–397 (1997)

30
H. Richter
[102] Reidys, C., Stadler, P.F.: Neutrality in ﬁtness landscapes. Applied Mathematics and
Computation 117, 321–350 (2001)
[103] Reidys, C.: Combinatorial Computational Biology of RNA: Pseudoknots and Neutral
Networks. Springer, Heidelberg (2011)
[104] Richter, H.: Coupled map lattices as spatio–temporal ﬁtness functions: Landscape
measures and evolutionary optimization. Physica D237, 167–186 (2008)
[105] Rodrigues, E.S., de Oliveira, P.M.C.: Spin–glass energy landscape. Jour. Stat. Phys. 74,
1265–1272 (1994)
[106] Rowbottom, D.P.: Models in biology and physics: What’s the difference? Found.
Sci. 14, 281–294 (2009)
[107] Rudolph, G.: How mutation and selection solve long-path problems in polynomial
expected time. Evolut. Comput. 4, 195–205 (1996)
[108] Ruse, M.: Are pictures really necessary? The case of Sewell Wright’s ‘adaptive land-
scapes’. In: Baigrie, B.S. (ed.) Picturing Knowledge: Historical and Philosophical
Problems Concerning the Use of Art in Science, pp. 303–337. University of Toronto
Press, Toronto (1996)
[109] Shakhnovich, E.I.: Theoretical studies of protein-folding thermodynamics and kinet-
ics. Curr. Opin. Struc. Biolog. 7, 29–40 (1997)
[110] Sherrington, D.: Landscape paradigms in physics and biology: Introduction and
overview. Physica D107, 117–121 (1997)
[111] Shpak, M., Wagner, G.P.: Asymmetry of conﬁguration space induced by unequal
crossover: implications for a mathematical theory of evolutionary innovation. Arti-
ﬁcial Life 6, 25–43 (2000)
[112] Smith, T., Husbands, P., O’Shea, M.: Neutral networks in an evolutionary robotics
search space. In: Kim, J.H., Zhang, B.T., Fogel, G., Kuscu, I. (eds.) Proc. Congress
on Evolutionary Computation, IEEE CEC 2001, pp. 136–143. IEEE Press, Piscataway
(2001)
[113] Smith, T., Husbands, P., Layzell, P., O’Shea, M.: Fitness landscapes and evolvability.
Evolut. Comput. 10, 1–34 (2002)
[114] Stadler, B.M.R., Stadler, P.F., Wagner, G.P., Fontana, W.: The topology of the possible:
Formal spaces underlying patterns of evolutionary change. J. Theor. Biology 213, 241–
274 (2001)
[115] Stadler, P.F.: Landscapes and their correlation functions. J. Math. Chem. 20, 1–45
(1996)
[116] Stadler, P.F., Schnabl, W.: The landscape of the traveling salesman problem. Phys.
Lett. A 161, 337–344 (1992)
[117] Stadler, P.F., Wagner, G.P.: The algebraic theory of recombination spaces. Evol. Com-
putation 5, 241–275 (1998)
[118] Stadler, P.F., Seitz, R., Wagner, G.P.: Population dependent Fourier decomposition of
ﬁtness landscapes over recombination spaces: evolvability of complex characters. Bull.
Math. Biol. 62, 399–428 (2000)
[119] Stadler, P.F., Stephens, C.R.: Landscapes and effective ﬁtness. Comm. Theor. Biol. 8,
389–431 (2003)
[120] Suzuki, K., Ikegami, T.: Shapes and self–movement in protocell systems. Artiﬁcial
Life 15, 59–70 (2009)
[121] Szendro, I.G., Schenk, M.F., Franke, J., Krug, J., de Visser, J.A.G.M.: Quantitative
analyses of empirical ﬁtness landscapes. Jour. Stat. Mech., P01005 (2013),
doi:dx.doi.org/10.1088/1742-5468/2013/01/P01005

1
Fitness Landscapes: From Evolutionary Biology to Evolutionary Computation
31
[122] Tavares, J., Pereira, F.B., Costa, E.: Multidimensional knapsack problem: a ﬁtness
landscape analysis. IEEE Trans. Sys. Man Cyber. B 38, 604–616 (2008)
[123] Tomassini, M., Verel, S., Ochoa, G.: Complex-network analysis of combinatorial
spaces: The NK landscape case. Phys. Rev. E 78, 066114 (2008)
[124] Trifonov, E.N.: Vocabulary of deﬁnitions of life suggests a deﬁnition. J. Biomol. Struct.
Dyn. 29, 259–266 (2011)
[125] van Nimwegen, E., Crutchﬁeld, J.P.: Metastable evolutionary dynamics: Crossing ﬁt-
ness barriers or escaping via neutral paths? Bull. Math. Biol. 62, 799–848 (2000)
[126] van Tendeloo, G., De Meulenaere, P., Schryvers, D.: Landscape roughness at an atomic
scale. Physica D107, 401–410 (1997)
[127] Vassilev, V.K., Fogarty, T.C., Miller, J.F.: Information characteristics and the structure
of landscapes. Evolut. Comput. 8, 31–60 (2000)
[128] Verel, S., Ochoa, G., Tomassini, M.: Local optima networks of NK landscapes with
neutrality. IEEE Trans. Evolut. Comput. 15, 783–797 (2011)
[129] Wade, M.J., Goodnight, C.J.: The theories of Fisher and Wright in the context of
metapopulations: When nature does many small experiments. Evolution 52, 1537–
1553 (1998)
[130] Watson, R.A., Weinreich, D.M., Wakeley, J.: Genome structure and the beneﬁt of sex.
Evolution 65, 523–536 (2011)
[131] Weinberger, E.D.: Correlated and uncorrelated ﬁtness landscapes and how to tell the
difference. Biol. Cybern. 63, 325–336 (1990)
[132] Weinberger, E.D.: Local Properties of Kaufman’s N–k model: A Tunably Rugged En-
ergy Landscape. Phys. Rev. A 44, 6399–6413 (1991)
[133] Weinreich, D.M., Watson, R.A., Chao, L.: Sign epistasis and constraint on evolution-
ary trajectories. Evolution 59, 1165–1174 (2005)
[134] Weissman, D.B., Desai, M.M., Fisher, D.S., Feldman, M.W.: The rate at which asexual
populations cross ﬁtness valleys. Theor. Pop. Biol. 75, 286–300 (2009)
[135] Wigner, E.: The unreasonable effectiveness of mathematics in the natural sciences.
Comm. Pure Appl. Mathem. 13, 1–14 (1960)
[136] Wiles, J., Tonkes, B.: Hyperspace geography: Visualizing ﬁtness landscapes beyond
4D. Artiﬁcial Life 12, 211–216 (2006)
[137] Wolf, J.B., Wade, M.J.: On the assignment of ﬁtness to parents and offspring: whose
ﬁtness is it and when does it matter? Jour. Evolut. Biol. 14, 347–356 (2001)
[138] Wolpert, D.H., Macready, W.G.: No free lunch theorems for optimization. IEEE Trans.
Evolut. Comp. 1, 67–82 (1997)
[139] Wright, S.: Evolution in Mendelian populations. Genetics 16, 97–159 (1931)
[140] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution.
In: Jones, D.F. (ed.) Proc. of the Sixth International Congress on Genetics, pp. 356–366
(1932)
[141] Wright, S.: The shifting balance theory and macroevolution. Annual Review of Genet-
ics 16, 1–19 (1982)
[142] Wright, S.: Surfaces of selective value revisited. The American Naturalist 131, 115–
123 (1988)
[143] Zhou, Q., Wong, W.H.: Energy landscape of a spin-glass model: Exploration and char-
acterization. Phys. Rev. E 13, 051117–1–13 (2009)

Chapter 2
Fundamental Principles of Control Landscapes
with Applications to Quantum Mechanics,
Chemistry and Evolution
Herschel Rabitz, Re–Bing Wu, Tak–San Ho, Katharine Moore Tibbetts,
and Xiaojiang Feng
Abstract. The concept of a landscape or response surface naturally arises in ap-
plications widely ranging over the sciences, engineering and other disciplines. A
landscape is the desired output as a function of a set of input variables, often of very
high dimension. The relationship between the features of a landscape and the input
variables is usually unknown a priori and often thought to be highly complex due
to the anticipated intricate interactions involved. This chapter reviews recent devel-
opments in the analysis of landscape topology with the input variables considered
as controls. Taking a control perspective allows for the speciﬁcation of particular
assumptions whose satisfaction permits a general analysis of the landscape topol-
ogy. Satisfaction of these conditions leads to the conclusion that control landscapes
should be devoid of suboptimal critical point traps, thereby permitting ready ex-
cursions without hindrance to the highest values of the landscape. These principles
are set out in a general framework and then speciﬁcally illustrated for applications
Herschel Rabitz · Tak–San Ho
Department of Chemistry, Princeton University,
Washington Road, Princeton, NJ 08544, U.S.A.
e-mail: {hrabitz,tsho}@princeton.edu
Re–Bing Wu
Department of Automation, Tsinghua University and Center for Quantum Information
Science and Technology, TNLIST, Beijing, 100084, China
e-mail: rbwu@tsinghua.edu.cn
Katharine Moore Tibbetts
Department of Chemistry, Temple University, 1901 N. 13th St.,
Philadelphia, PA 19122, U.S.A.
e-mail: katharine.moore@temple.edu
Xiaojiang Feng
Kadmon Corporation, 450 East 29th Street, New York, NY 10016, U.S.A.
e-mail: fengxiaojiang@yahoo.com
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
33
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_2, c⃝Springer-Verlag Berlin Heidelberg 2014

34
H. Rabitz et al.
involving control in quantum mechanics, chemical and material science, and in nat-
ural and directed evolution. Perspectives are given on the signiﬁcance of these ﬁnd-
ings and potential future directions for additional analysis of landscape principles.
2.1
Introduction
Virtually any quantitative application in the sciences and engineering may be ex-
pressed in terms of a speciﬁed set of input variables and an associated observable
system response in the laboratory or in a natural setting. A thorough understand-
ing of the landscape deﬁning such input→output relationships is of fundamental as
well as practical signiﬁcance, especially when the goal is to ﬁnd an optimal out-
put. Whether optimization or just a basic understanding of the landscape features
is the ultimate goal, it is natural to consider the landscape in a control framework.
In this fashion, a landscape can be viewed as a function of the control variables
with a prime consideration being identiﬁcation of the landscape topology. Various
application domains employ distinct terminology when treating input→output rela-
tionships. This chapter will consistently refer to the output as a landscape, which
is a map from the input control variables to the output. Following standard practice
in the literature this chapter will often refer to control landscapes, which should be
understood to mean control-dependent landscapes.
There is a vast literature on landscapes in science and engineering largely devel-
oped independently, likely with consideration that per se, the nature of the landscape
topology should be application speciﬁc. This Chapter considers recent research tak-
ing a generic perspective on landscape topology with the aim of establishing whether
a broad foundation may exist transcending any particular application. Importantly,
this research demonstrates that a general assessment may be carried out for con-
trol landscape topology upon satisfaction of three basic physical and mathematical
assumptions set out in Section 2.2. We refer to this overall analysis as Optimal con-
trol in the Sciences (OptiSci). The subsequent sections cover the speciﬁc aspects
of these general principles realized in the control of Quantum phenomena (OptiQ
in Section 2.3), Chemical and material science (OptiChem in Section 2.4) and in
natural and directed Evolution (OptiEvo in Section 2.5). Many mathematical chal-
lenges remain for the analysis of control landscapes, but the basic principles have
been set out. Extensive experimental and simulation evidence for OptiSci supports
the broad validity of the underlying assumptions and their conclusions regarding
landscape topology, and a summary of the supporting evidence for OptiSci is given
in the chapter. Sections 2.2 to 2.5 use terminology and notation particular to control
theory and each type of application. The reader is referred to the cited literature for
further mathematical and scientiﬁc details. The speciﬁc application domains treated
in this paper (except for natural evolution) are considered in the context of labora-
tory optimization. Natural evolution is an optimization process as well, but carried
out stochastically by Nature. The common landscape topological character found in
all domains of OptiSci in Sections 2.3 to 2.5 has fundamental and practical signiﬁ-
cance. Finally, concluding remarks are given in Section 2.6.

2
Fundamental Principles of Control Landscapes
35
2.2
Basic Foundations of OptiSci
Many aspects of science and engineering can be expressed in terms of cause and
effect relationships. The ﬁeld of control is motivated by the desire to exploit such
relationships and alter a system’s outcome. This work will address three classes of
control processes whose general characteristics are listed in Table 2.1:
Table 2.1 Scope of OptiSci
Domain
Control
Objective Outcome
quantum mechanics
electromagnetic ﬁeld
state transformations
(OptiQ)
chemistry & materials
reagents, processing conditions synthesis yield, properties
(OptiChem)
natural & directed evolution genes, genotypes
ﬁtness
(OptiEvo)
A control landscape is the mapping from the cause (control variables) to the ef-
fect (objective outcome). When the control and the outcome can be quantitatively
described, the landscape is speciﬁed as a function of the control variables. The con-
trol landscape can correspond to a natural process (e.g., the ﬁtness landscape in
natural evolution) or a scientiﬁc venture willfully executed (e.g., a chemical reac-
tion controlled by shaped laser pulses). Nature utilizes a stochastic search on evo-
lutionary landscapes seeking the highest ﬁtness for a species population, while in
the laboratory any of a variety of algorithms may be utilized to explore landscapes
for the best control outcome. In all cases the features of the control landscape are of
fundamental importance to understand the complexity of seeking optimization. In
the following, we will introduce the optimization over landscapes in classical and
quantum mechanical frameworks. The control landscape will be deﬁned in the so-
called kinematic and dynamic pictures based on three assumptions, which enable a
complete identiﬁcation of the topological features of the landscapes.
2.2.1
Classical and Quantum Control Landscapes
A large class of physical, chemical and biological phenomena may be expressed
as dynamical control systems. For example, a classical particle is described by its
momentum p and position q, which may be controlled by an external ﬁeld or force.
More generally, from a statistical perspective, the state of a large ensemble of iden-
tical classical systems or a single classical system driven by stochastic noises can
be described by a (nonnegative) probability distribution function ρcl over the phase
space of ω = (p,q). The positive distribution function ρcl, which is governed by a
dynamical equation (e.g., a Fokker-Planck equation [26]), can be taken as a func-
tion of the control c (in some properly deﬁned space C ). The average value of an
observable O(ω) at time T is then given by

36
H. Rabitz et al.
Jcl(c) =

Ω
O(ω)ρcl
T (ω,c)dω,
(2.1)
forming the classical control landscape. The objective is to ﬁnd a suitable optimal
control c∗that maximizes Jcl(c).
The quantum mechanical landscape description parallels that of a classical en-
semble. Suppose that the quantum system possesses N discrete levels, correspond-
ing to an N-dimensional Hilbert space H = CN. The state of an N-level quantum
system is represented by a positive, unit trace N × N density matrix [14], which
belongs to the following set
DN := {ρqm ∈CN×N, ρqm ≥0,Tr(ρqm) = 1}.
(2.2)
Driven by some control c (e.g., a tailored laser ﬁeld [25]) under the laws of quantum
mechanics (see Equations (2.7) and (2.8) in Section 2.3), the density matrix evolves
from some initial state ρqm
0
to the ﬁnal state ρqm
T (c).
Physical observables in a quantum system are represented by Hermitian operators
O on the system’s Hilbert space H . A wide range of control problems for quantum
systems can be formulated as maximization of the expectation value of a suitable
target operator O. The goal is to ﬁnd an optimal control c∗which maximizes the
expectation value ⟨O⟩T = Tr[ρqm
T O] at the ﬁnal time T. The corresponding quantum
mechanical objective landscape function Jqm is
Jqm(c) = Tr[ρqm
T (c)O].
(2.3)
A common feature shared by the classical and quantum optimal control formulations
is that the function J depends on the controls through the ﬁnal state ρT(c), either as
ρcl
T (c) or ρqm
T (c). This shared character forms the basis for the following landscape
analysis.
2.2.2
General Features of Control Landscapes
The set of admissible controls form a function space C , which, under more general
circumstances, can be any topological space (e.g., a Boolean space or a differen-
tial manifold). The control landscape is formally deﬁned as the mapping from the
control variable c ∈C to a (scalar) outcome J(c), which is a function(al) of c (see
Figure 2.1). There are circumstances where competing multiple objectives arise, but
they will not be treated here. Thus, we consider optimal controls as maximizing the
scalar quantity J.
To analyze the landscape properties, we may Taylor expand J in the neighbor-
hood of any c ∈C :
J(c+ δc) = J(c)+ ⟨∇J(c),δc⟩c + 1
2⟨δc,HJ(c)δc⟩c + O(∥δc∥3),
(2.4)

2
Fundamental Principles of Control Landscapes
37
Fig. 2.1 A schematic illustration of a control landscape with two control variables denoted as
x j and xk. The landscape can be viewed as the (two-dimensional in this case) curved surface in
the (three-dimensional) product space of the yield and the space of control parameters. The
surface forms the graph deﬁned in Equations (2.1) and (2.3). The landscape’s yield J runs
from 0.0 to the maximum value of 1.0. The various classes of extrema A-F reﬂect differing
ease of discovery and robustness properties. Adapted from [46].
where δc is a small perturbation and ⟨·,·⟩c refers to a suitable inner product in the
tangent space of C at c. A critical point at c ∈C is where the gradient ∇J(c) = dJ
dc
vanishes.
The term quadratic in δc in Equation (2.4) involves the Hessian operator HJ(c).
Most critical points can be identiﬁed as either locally maximal (when all of the Hes-
sian eigenvalues are negative), locally minimal (when all of the Hessian eigenvalues
are positive) or locally a saddle (when positive and negative Hessian eigenvalues
co-exist). For the critical points where there are either only positive, or negative, or
zero eigenvalues (i.e., a semi-deﬁnite Hessian), higher-order Taylor expansion terms
may be needed for identifying the type of the critical point) [18].
The optimization procedure can be envisaged as hiking over the landscape (see
Figure 2.1) towards the highest peak, which corresponds to a global maximum point.
An important goal of control landscape analysis is to assess whether local subop-
timal maximum points exist, which could trap a search seeking the best outcome.
Saddle points will not trap the search, but they may hinder the effort to ﬁnd an op-
timal solution. The existence of traps and saddle points can greatly affect the algo-
rithmic efﬁciency of ﬁnding an optimal solution from a neighboring initial point on
the landscape. Thus, a major goal of landscape analysis is to address the following
questions:
• How many locally maximal points exist?
• How many globally maximal points exist?
• How can knowledge of the landscape topology aid in the design of efﬁcient opti-
mization algorithms?
A full answer to all of these questions is not at hand, but much can be said now
about these issues under certain assumptions discussed below.

38
H. Rabitz et al.
2.2.3
Landscape Mapping
In physical, chemical and biological processes, the landscapes are in general difﬁcult
to analyze due to their dimensions and high nonlinearities. One can facilitate the
analysis by mapping the landscape to another space X via φ : C →X . Denote
˜J = J ◦φ as a composition such that ˜J(c) = J[φ(c)] for any c ∈C . Going from ˜J(c)
to J(φ) is a landscape mapping induced by φ : C →X .
For example, φ is referred to as the end-point map for dynamical systems dis-
cussed in OptiQ. Here ˜J(c) is called the dynamic control landscape which depends
on the system evolution, while J(φ) is the kinematic control landscape and only de-
pends on the ﬁnal state. Determining the landscape topology can be difﬁcult in the
dynamic picture, but it is frequently much simpler in the kinematic picture because
J is often linear in X and lower-dimensional. The corresponding critical points are
referred to as dynamic or kinematic.
Here we seek to extract the landscape topology of a complex dynamic control
landscape from the corresponding kinematic landscape. This analysis can be per-
formed through the linkage of the critical points in the two landscapes by the chain
rule:
d ˜J
dc =
dJ
dx | x=φ(c) , dφ
dc

= 0,
(2.5)
where dφ/dc is the Jacobian of the mapping φ at c. If x0 = φ(c0) is a critical point
of J, i.e., dJ
dx = 0 at x0, then the corresponding c0 ∈C must also be a critical point
of ˜J because Equation (2.5) implies that d ˜J
dc = 0 at c0. But, the reverse is not neces-
sarily true unless the Jacobian dφ
dc at c0 is non-singular, i.e., the rank is exactly the
dimension of X . Elements in C that make the Jacobian rank-deﬁcient are called
singular, otherwise they are referred to as regular [69].
Circumstances where regularity applies guarantees consistency between the crit-
ical conditions in the two mapped landscapes. This conclusion can be understood
from the following relationship
H ˜J(c) =
dφ
dc ,HJ(φ)dφ
dc

(2.6)
between the Hessian forms in the two pictures, where the right hand side can be
taken as a congruent transformation of HJ(φ) when both X and C are ﬁnite di-
mensional. It can be shown from linear algebra that the eigenvalues of H ˜J(c) and
HJ(φ) have identical signs (not necessarily their magnitudes) when the Jacobian dφ
dc
is full rank. This implies that the numbers of positive and negative eigenvalues are
preserved when the landscape mapping is regular at a critical point, which deter-
mines the nature of optimality to second-order. Thus, x0 = φ(c0) is a second-order
maximum (minimum or saddle) of J if and only if c0 is a second-order maximum
(minimum or saddle) of ˜J. The number of zero Hessian eigenvalues is usually dif-
ferent in the two spaces, reﬂecting the different “size” of the critical set in each
space.

2
Fundamental Principles of Control Landscapes
39
2.2.4
Requirements for the Existence of Trap-Free Landscapes
In the following application oriented sections of the paper, the mapping described
above will be used to simplify the landscape analyses. For example, in OptiQ, the
mapping from the space of control ﬁelds to the state space will be employed.
A landscape mapping from ˜J(c) to J(φ) preserves the landscape topology if and
only if the following three assumptions are satisﬁed:
Assumption (1): The system is controllable such that for every point x ∈X , there
must exist some c ∈C such that φ(c) = x. In a dynamical system, this condition
guarantees that every ﬁnal state is reachable at some sufﬁciently long time.
Assumption (2): Every critical point in φ(C ) that is mapped from C to X is regu-
lar, i.e., the Jacobian is full rank. This surjectivity condition implies that locally the
search for optimal controls can be conducted along any direction in X after being
mapped from C . This condition guarantees that every dynamic critical point must
correspond to a kinematic critical point with the same optimality type.
Assumption (3): No restrictions are placed on the control. This (strong) demand
assures full access to reachable points on the landscape.
The detailed assessment of the Assumptions (1), (2) and (3) above and landscape
analyses differs across OptiQ, OptiChem and OptiEvo. The assumptions may be
either difﬁcult or easy to satisfy in practice, depending on the application. In this
regard, the most stringent is Assumption (3), and in practice all of the assumptions
may be relaxed while still ﬁnding a favorable landscape topology consistent with
the formal analysis. The practical applications clearly demonstrate this point. Under
satisfaction of the strict assumptions above, we will prove in various ways within the
following sections that, despite the many differences in the applications, all OptiSci
landscapes are trap free, i.e., there are no local suboptima trapping extrema. This
conclusion provides strong support for interpreting the large number of observed
landscapes and successful optimization experiments in quantum control, chemistry
and biological evolution.
2.3
Optimal Control of Quantum Dynamics (OptiQ)
2.3.1
Background
Employing electromagnetic ﬁelds to control quantum dynamics is an active area of
research with many potential applications in physics, chemistry, information sci-
ence and biology [7]. Advances in ultrafast laser technology along with ﬂexible
pulse shaping capabilities [62] has enabled successful control of broad varieties of
quantum phenomena. Regardless of the particular quantum control application, a
main goal of Optimal control of Quantum dynamics (OptiQ) is to achieve the best
possible results, while also working with inevitable laboratory constraints. This per-
spective has led to performing Optimal Control Experiments (OCE) as the means
to attain the best outcomes [8].

40
H. Rabitz et al.
The underlying principle for realizing OCE grew out of extensive groundwork
from quantum Optimal Control Theory (OCT) calculations on model systems [30,
43, 56], which continues to serve as an indispensable guide to controlling phys-
ical phenomena. Any successful control in the laboratory must be able to handle
many uncertainties, including insufﬁcient knowledge about typical complex sys-
tem Hamiltonians and the practical difﬁculty of generally performing high qual-
ity numerical designs for the controls. The implementation of closed-loop learning
control [25] is a practical and effective scheme to carry out OCE under these cir-
cumstances. Such experiments started in 1997 [3, 4] and their number has steadily
grown with various applications [7]. Recent OCT and OCE developments indicate
that there may be a systematic “chemistry” associated with shaped laser pulses act-
ing as “photonic reagents”. Despite having a ﬂeeting existence, photonic reagents
can permanently alter quantum states and transform molecules and condensed phase
materials.
Quantum optimal control seeks to ﬁnd a ﬁeld ε(t), t ∈[0,T] to steer a particular
quantum system from an initial state |ψ(0)⟩= |ψi⟩(or ρ(0) in the density matrix
formulation) to some target state |ψ(T)⟩(or its density matrix analog ρ(T)), which
maximizes the expectation value ⟨ψ(T)|O|ψ(T)⟩(or Tr{ρ(T)O}) of the chosen
target observable O. The common assumption is that evolution with the free Hamil-
tonian H0 alone can not satisfactorily reach the objective. Thus, the photonic reagent
ε(t) is needed to redirect the dynamics described by the time-dependent Schr¨odinger
equation, which often has the form
ı¯h ∂
∂t |ψ(t)⟩= [H0 −με(t)]|ψ(t)⟩, |ψ(0)⟩= |ψi⟩,
(2.7)
where ı ≡√−1 and μ is the dipole moment operator.
Many OCEs involve highly complex systems with rich Hamiltonian structure that
is not known in quantitative detail. For example, the multidimensional potential en-
ergy surface V(R,r) residing in the Hamiltonian term H0 can depend on both the
nuclear coordinates R and electronic coordinates r when the applied ﬁeld simul-
taneously controls multiple atoms or electrons. The adaptive feedback OCEs auto-
matically take into consideration all of the relevant potential energy surface details
(and limits on the available lasers) for determining an optimal ﬁeld. However, these
considerations alone do not explain the observed ease in ﬁnding optimal controls
over quantum phenomena.
2.3.2
Basic Assumptions Regarding Quantum Control
Landscapes
The success in readily ﬁnding optimal controls of various quantum dynamical pro-
cesses can be understood by consideration of the quantum control landscape [21,
22, 44, 46], which is the expectation value J[ε(·)] ≡⟨ψ(T)|O|ψ(T)⟩of the ob-
servable O as a function of the control ﬁeld ε(t). In the more general case of the
density matrix, J[ε(·)] = Tr{ρ(T)O}. Extensive research has been carried out to

2
Fundamental Principles of Control Landscapes
41
understand the properties of quantum control landscapes for the manipulation of
arbitrary N-level quantum systems. Although the energy spectrum of a typical
molecule is composed of both discrete bound rotational-vibrational-electronic en-
ergy levels and continuous ionization/dissociative channels, in practice, it may be
modeled in a ﬁnite-dimensional Hilbert space. Thus, we assume that the molecule
under analysis can be adequately represented by a ﬁnite number of N energy lev-
els, for example, via proper discretization of continuum states. Despite the fact that
each molecule is uniquely characterized by its Hamiltonian H0 and dipole moment
μ, theoretical analysis shows that quantum control landscapes should have a uni-
versal quality that is only determined by the initial state |ψ(0)⟩of the molecule and
the nature of the observable operator O. This result suggests that a broad founda-
tion must be behind the ease of ﬁnding effective quantum controls, regardless of the
complexity of the quantum system. The above conclusion rests on satisfaction of
the three basic Assumptions of OptiSci in Section 2.2, expressed here in the context
of OptiQ:
(1) The quantum system is controllable [23, 47, 52, 68]: The quantum system
described by Equation (2.7) evolves on the N × N unitary matrix group U(N)
and is controllable if it can be driven from any initial state |ψi⟩to any desired
ﬁnal state |ψf ⟩in some sufﬁciently long time. This is possible if the Lie algebra
generated by the ﬁeld-free Hamiltonian H0 and the dipole moment μ via their
nested commutators coincide with the Lie algebra associated with the unitary
matrix group U(N).
(2) The control end-point map is surjective [69]: The functional derivative of the
underlying control end-point map ε(·) →|ψ(T)⟩(or ρ(T)), given the initial
state |ψ(0)⟩(or ρ(0)), is of full rank. The resultant end-point map is surjective
and the corresponding control ε(t) is regular. Surjectivity assures free move-
ment around any local end-point on the landscape.
(3) The control ﬁeld is not constrained [39, 45]: The control ﬁeld ε(t) is allowed
to have an arbitrary form to eliminate artiﬁcially introduced constraints on mov-
ing over the landscape.
The satisfaction of Assumption (1) for pure state-to-state N-level optimal control
problems implies that some control exists to reach the target state |ψf ⟩at a suitable
time T from |ψ(0)⟩= |ψi⟩at t = 0. Although exceptions to fulﬁllment of this as-
sumption can be found, mathematical and physical analysis suggests that most ﬁnite
dimensional quantum systems are likely to be controllable.
Assumption (2) requires that the rank of the functional derivative δρ(T)/δε(t)
be full. For pure state transition probability control problems, this assumption re-
quires that δρ(T)/δε(t), with ρ(T) ≡|ψ(T)⟩⟨ψ(T)|, possess a rank of 2N −2. As-
sumption (2) is equivalent to stating that a differential change in the state δρ(T) at
the ﬁnal time has a corresponding differential control δε(t) producing it. Although
this assumption could be violated by so-called singular controls, their occurrence
seems to be rare.

42
H. Rabitz et al.
Assumption (3) assures access to all electromagnetic resources. In practice, how-
ever, the controls only need to be sufﬁciently unconstrained in order to address all
the necessary transitions to create the desired ﬁnal state.
Collectively, satisfaction of the Assumptions (1), (2) and (3) provides the condi-
tions for generically assessing the topological nature of quantum control landscapes.
The conclusion of this analysis is that suboptimal local maxima forming traps should
not exist on quantum control landscapes. A trap is a local submaximal value of the
objective J[ε(·)], from which it is not possible to climb further on the landscape to a
higher value through small variations of ε(t) guided by a myopic algorithm (e.g., a
gradient based procedure). Rigorously establishing that the three assumptions above
are satisﬁed in any particular case is difﬁcult. But, it is plausible to expect that these
assumptions should be fulﬁlled, likely including Assumption (3) to a practical de-
gree, in many applications, especially as control resources become richer. Accepting
satisfaction of the assumptions, the resultant conclusion about the trap free nature
of the quantum control landscape topology can be tested in simulations and in the
laboratory.
2.3.3
Quantum Control Landscape Theory
Consider a generic observable (Hermitian operator) O, with the corresponding
N-level quantum dynamical control problem posed as follows: Find a control
ﬁeld ε(t) over period T such that the initial density matrix ρ(0), Tr{ρ(0)} = 1,
can be transformed by the corresponding propagator U(T,0) to form ρ(T) =
U(T,0)ρ(0)U†(T,0) which maximizes the expectation value ⟨O(T)⟩=Tr{ρ(T)O}.
Here the propagator U(t,0) satisﬁes the equation
ı¯h ∂
∂tU(t,0) = [H0 −με(t)]U(t,0), U(0,0) = I (identity operator).
(2.8)
The quantum control landscape [21, 22, 44, 46] is deﬁned as a functional of the
control ﬁeld ε(t) over t ∈[0,T]:
J[ε(·)] ≡⟨O(T)⟩.
(2.9)
The essential features of J[ε(·)] are its critical points where the ﬁrst-order functional
derivative (gradient) satisﬁes
δ⟨O(T)⟩
δε(t)
= 0, ∀t ∈[0,T].
(2.10)
The characterization of a critical point with the ﬁeld ε(t) is revealed by analyzing
the spectrum of the landscape curvature (Hessian), δ 2⟨O(T)⟩/δε(t′)δε(t). The crit-
ical points satisfying Equation (2.10) may correspond to global extrema (maxima or
minima) or local (suboptimal) values of J[ε(·)], which may be either traps or sad-
dles. Assessment of the latter prospects is of prime interest in OptiQ. The gradient
δ⟨O(T)⟩/δε(t) can be written as

2
Fundamental Principles of Control Landscapes
43
δ⟨O(T)⟩
δε(t)
= ı
¯hTr{[ρ(0),O(T)]μ(t)},
(2.11)
where O(T) ≡U†(T,0)OU(T,0) and μ(t) ≡U†(t,0)μU(t,0), and the Hessian of
the cost functional ⟨O(T)⟩is
δ 2⟨O(T)⟩
δε(t′)δε(t) = −1
¯h2 Tr

ρ(0),

O(T),μ(t′)

μ(t)

, t′ ≥t.
(2.12)
Here we have introduced the commutator deﬁnition [A,B] ≡AB −BA for any two
operators A and B.
Considering that all three assumptions above are satisﬁed, then μ(t) in Equation
(2.11) should be a matrix whose elements are linearly independent function of time.
Thus, the dynamic critical point criterion δ⟨O(T)⟩/δε(t) = 0 ∀t ∈[0,T] reduces
to the kinematic one [ρ(0),O(T)] = 0 [22, 69] for a speciﬁc unitary transformation
U(T,0). Given the initial density matrix ρ(0) for an N-level quantum system, a
control is called regular when the rank RN
ρ(0) of the functional derivative
δρ(T)
δε(t) = ı
¯hU(T,0){[μ(t),ρ(0)]}U†(T,0)
(2.13)
of the end-point map (deﬁned in the neighborhood of the control ﬁeld ε(·))
Eρ(0),T : ε(·) →ρ(T), ε(·) ∈L 2[0,T]
(2.14)
is of full rank, otherwise, it is called singular [69]. For pure state-to-state regular
controls, given ρ(0) = |i⟩⟨i| as the initial density matrix, δρ(T)/δε(t) is of rank
2N −2, corresponding to the case that the real and imaginary parts of the (N −1)
dipole matrix elements ⟨i|μ(t)|k⟩, 1 ≤k ̸= i ≤N, form 2N −2 independent real
functions of time t ∈[0,T].
Consider the common case that the initial density matrix describes a mixed state
of the form
ρ(0) =
N
∑
i=1
ρi|i⟩⟨i|,
N
∑
i=1
ρi = 1,
ρ1 ≥ρ2 ≥··· ≥ρN ≥0,
(2.15)
where |i⟩’s are eigenstates of H0. The rank RN
ρ(0) of δρ(T)/δε(t) is at most equal
to the dimension DN
ρ(0) of the corresponding reachable set O(ρ(0)), given the initial
density matrix ρ(0), i.e. RN
ρ(0) ≤DN
ρ(0) [69, 1]. For example, RN
ρ(0) is at most 2N −2
when ρ(0) is a pure state (e.g., ρ1 ̸= 0 and ρ2 = ··· = ρN = 0) and at most N2 −N
when ρ(0) is fully non-degenerate(i.e., ρi ̸= ρ j ̸= 0∀i ̸= j). Note that DN
ρ(0) = 2N−2
in the former case and DN
ρ(0) = N2 −N in the latter case, respectively.
At kinematic critical points, since ρ(0) and O(T) commute, we arrive at O(T) =
∑i λi(T)|i⟩⟨i|, where λ1(0) ≥··· ≥λN(0) ≥0 are eigenvalues of the initial observ-
able O, arranged in a descending order (assuming that O is positive semi-deﬁnite

44
H. Rabitz et al.
without loss of generality). The eigenvalues λ1(T),··· ,λN(T) of O(T) at the kine-
matic critical point are particular permutations of the eigenvalues λ1(0),··· ,λN(0)
prescribed by the evolution of the system under the control ﬁeld ε(t). In this fashion
the propagator U(T,0) acts as a permutation matrix that rearranges the ordering of
the eigenvalues of O at time T. Speciﬁcally, we ﬁnd that (1) U(T,0) is an N × N
identity matrix at the global maximum, (2) U(T,0) is an anti-diagonal unit matrix
that renders the permutations i →N −i+1 for all i = 1,2,··· ,N at the global mini-
mum, and (3) U(T,0) is a particular permutation matrix at each local critical point.
There are at most N! allowed critical-point values of ⟨O(T)⟩speciﬁed by [22]
⟨O(T)⟩=
N
∑
i=1
ρiλi(T),
(2.16)
where ρ1 ≥··· ≥ρN ≥0 for the eigenvalues of ρ(0), and {λi(T)} is appropriately
permuted at each critical point. From Equation (2.16), the expectation value ⟨O(T)⟩
is bounded by the relation [22, 59]
⟨O(T)⟩min =
N
∑
i=1
ρiλN−i+1(0) ≤⟨O(T)⟩≤⟨O(T)⟩max =
N
∑
i=1
ρiλi(0).
(2.17)
The topology of the control landscape at the kinematic critical points may be an-
alyzed via the corresponding Hessian, which is inherently separable (degenerate)
and possesses a ﬁnite number of non-zero eigenvalues, i.e., at most either 2N −2 or
N2 −N, depending on the dimension of the reachable set O(ρ(0)) associated with
the initial density matrix ρ(0). The Hessian with respect to the dynamic control at
the kinematic critical points is [22]
δ 2⟨O(T)⟩
δε(t′)δε(t) = −2
¯h2
N
∑
i=1
N
∑
j>i
(ρi −ρ j)(λi(T)−λ j(T))
×

ℜ⟨i|μ(t)|j⟩ℜ⟨i|μ(t′)|j⟩+ ℑ⟨i|μ(t)|j⟩ℑ⟨i|μ(t′)|j⟩

,(2.18)
where ℜand ℑ, respectively, denote the real and imaginary parts of a complex
number. Consequently, we have λi(T) −λ j(T) = λi(0) −λ j(0) ≥0 ∀i < j at the
global maximum and λi(T) −λ j(T) = λN−i+1(0) −λN−j+1(0) ≤0 ∀i < j at the
global minimum. Moreover, since the set

λi(T)−λ j(T) | 1 ≤i < j ≤N

consists
of both positive and negative numbers, all local suboptimal critical points corre-
spond to saddles (and are trap-free).
2.3.4
Simulated Excursions over Quantum Control Landscapes
Carefully performed numerical studies of controlled quantum dynamics can be valu-
able for assessing the validity of the landscape analyses based on the Assumptions
(1), (2) and (3) discussed above. Recently extensive numerical simulations have
been performed to study this matter, especially, for the control of the state-to-state

2
Fundamental Principles of Control Landscapes
45
transition probability Pi→f (T) ≡|⟨f|U(T,0)|i⟩|2 [39]. The simulation models con-
sidered from 2 to approximately 100 states. Remarkably, controlling complex quan-
tum systems appears to be no more difﬁcult than controlling simple ones, where
the level of difﬁculty is expressed in terms of the number of iterations required
to converge on the target objective. Using a gradient-based algorithm [51] these
detailed simulations involved approximately 5000 cases and all tests reached per-
fection for the objective to at least three decimal places upon paying due attention
to numerical details. Similar results were observed for optimization of the control
objective of generating a transformation U(T,0) that matches a target unitary ma-
trix W [35]. This objective may be measured by considering the ﬁdelity function
J = ||W −U(T,0)||2. In the latter study, approximately 20000 tests were performed
on quantum systems with 2 to 16 states, and each optimization converged to a ﬁ-
delity value of J ≤10−6.
Although more studies are still necessary, these results are consistent with the
three basic assumptions leading to the conclusion that quantum control landscapes
are generally expected to have a trap-free landscape topology. A key limiting fac-
tor is the requirement of Assumption (3) for free access to all essential control re-
sources. While not an issue in computer simulations, there will always be a need for
further control resources in the laboratory, especially when treating complex sys-
tems. In some cases more bandwidth and energy may sufﬁce to meet the control
needs of Assumption (3). But, even subtle resource limitations can become impor-
tant in some circumstances [40].
2.3.5
Experimental Excursions over Quantum Control
Landscapes
While thousands of carefully performed numerical simulations have successfully
reached the highest landscape values with ease, direct exploration of control land-
scapes in the laboratory has only just begun. To this end, it is important to consider
that in the laboratory many factors (e.g., noise, inhomogeneities, and, especially,
constraints on the controls) enter beyond those that arise in simulations. Such con-
straints can have important consequences by possibly imposing artiﬁcial boundaries
that limit movement over the control landscape and lead to a reduction of the at-
tainable control yield. For example, Figure 2.2 shows the laboratory data for the
quantum control landscape of a ﬁltered Second Harmonic Generation (SHG) sig-
nal [50]. The results show that the landscape is free of traps provided that constraints
are not placed on the control variables. But, the ﬁgure also shows that constrained
paths (i.e., a violation of Assumption (3)) over the landscape can produce artiﬁcial
traps.
A particularly important ﬁnding from the landscape analysis concerns the rank of
the Hessian δ 2Pi→f (T)/δε(t′)δε(t) at the top and bottom of the transition probabil-
ity landscape J[ε(·)] = Pi→f (T). The analysis [22, 44, 46] shows that there exist at
most 2N −2 routes off the top of the landscape (i.e., Pi→f (T) = 1.0) and at most two
routes up from the bottom (i.e., Pi→f (T) = 0.0) for a quantum system with N states.

46
H. Rabitz et al.
Fig. 2.2
Experimental trap-free quantum control landscape for ﬁltered second harmonic
generation signal S(a,c) as a function of quadratic and quartic chirp control ﬁeld coefﬁcients,
a and c. The key landscape topological features are preserved by this form of the control ﬁeld.
Color is used here to accentuate the landscape features, and it maps onto yield in a one-to-
one fashion. Shown are ﬁve trajectories i,··· ,v placed onto the experimental landscape after
acquiring the data. The control landscape possesses a single global optimum that may be
reached monotonically by following the curvilinear channels that slice through the landscape.
Two such curvilinear channels are indicated by the black and orange trajectories (Adopted
from Figure 4 of [50]).
At both landscape extremes the routes are speciﬁed by the associated eigenvectors of
the Hessian with non-zero eigenvalues. Importantly, the numbers of non-zero eigen-
values of the Hessian, at the top or bottom of the landscape, does not depend on the
quantitative details of the Hamiltonian, besides the need to ﬁx Assumptions (1) and
(2) of OptiQ. Although the Hessian is inﬁnite dimensional (i.e., time or frequency is
continuous), in practice it would be of ﬁnite size through digitization of the control
ﬁeld in the laboratory. An experimental test of the Hessian spectral predictions at the
top and bottom of the Pi→f (T) landscape was performed in atomic Rb vapor, and
the results were found to be fully consistent with the theoretical predictions [49].
Finally, an additional feature of practical importance is the null Hessian spectrum
at the top of the landscape, which implies an inherent degree of robustness to noise
when controlling quantum phenomena.
2.3.6
Perspective
Understanding the properties of quantum control landscapes is essential for design-
ing successful experiments and to identify promising directions for the future of
OptiQ research as well as practical applications. For example, optimal control sim-
ulations [39, 40] and experiments [49, 50] on a wide range of model quantum sys-
tems have been performed to study the quantum control landscape Hessian spectra
for the identiﬁcation of the energy levels that are dynamically involved in the pres-
ence of optimal control ﬁelds, thus revealing the corresponding control mechanisms.

2
Fundamental Principles of Control Landscapes
47
The universal trap-free quality of the quantum control landscapes, upon satisfaction
of the three basic OptiQ assumptions, provides very favorable circumstances for
maximizing physical observables. However, many additional issues remain to be
explored. For example, it is important to know how constraints on the controls enter
to limit the attainable yields and introduce landscape traps. Such traps will be “ar-
tiﬁcial” due to their constrained control resource origin, although they will appear
to be real in the associated experiment or simulation. Moreover, many experiments
achieve optimal control upon comparison of one observable value to another. Thus,
further study on the structure of control landscapes is needed for multiple observ-
ables, including in the presence of realistic laboratory constraints.
Fig. 2.3 The full prospects for OptiQ. The traditional perspective for controlling quantum
dynamics phenomena in OptiQ is to start with a molecular or material sample and search
through the photonic reagent ‘stockroom’ to ﬁnd an optimal control ﬁeld. An enhanced sce-
nario involves simultaneously searching over the chemical/material and photonic reagent
stockrooms to meet demanding objectives, as indicated above. A fully automated machine
of this type may be envisioned for this purpose.
The concept of quantum control landscape in OptiQ can be extended to explore
the full nature of candidate molecules and other systems through their total Hamil-
tonian. In this fashion the stationary part of the Hamiltonian as well as the temporal
control ﬁeld can simultaneously be considered as overall control variables with the
goal of achieving the highest possible yields. In this most general setting, we may
simultaneously search over the chemical or material stockroom along with the pho-
tonic reagent ‘stockroom’ for an effective ﬁeld ε(t) (see Figure 2.3). A ﬁnal possi-
bility is to seek control in the absence of the photonic reagents and only utilize the
chemical and material stockroom as well as processing conditions to optimize syn-
thesis yields and properties, which naturally forms the basis of OptiChem discussed
in Section 2.4.

48
H. Rabitz et al.
A long-standing interest in the ﬁeld of quantum control is the possible exis-
tence of systematic rules for identifying successful controls. In the background,
motivating this goal is the fact that chemical transformations carried out with stan-
dard reagents generally follow well-deﬁned classes of rules and mechanisms. The
prospect that analogous rules may exist for the action of photonic reagents is tanta-
lizing and would surely be related to the favorable landscape topology in OptiQ.
2.4
Optimal Control of Chemical Synthesis and Properties
(OptiChem)
2.4.1
Introduction
Common goals in chemistry include optimizing both synthesis yields and molec-
ular/material properties, which can be expressed as optimal control problems by
specifying a suitable set of variables. Although chemical synthesis and property
discovery are typically not considered in an optimal control framework, recent re-
search shows that employing optimal control concepts can help to explain why it
is surprisingly easy to optimize chemical reaction conditions and properties. In this
case, “easy” refers to the laboratory effort reﬂected in the number of independent
experiments required for the search/optimization procedure to ﬁnd optimal values
of the control variables, ignoring the often time-consuming and expensive overhead
involved in setting up experiments. This remark also applies to OptiQ and OptiEvo
laboratory efforts. In particular, widespread evidence shows that solving chemical
optimization is consistently easier than the pessimistic “curse of dimensionality”
[5] would imply. For instance, the application of genetic algorithms (GA) [20] and
other optimal search procedures shows that optimization of both synthesis yield and
properties typically may be achieved by carefully screening a small number of po-
tential combinations of variables, even for nominally highly complex systems. An
extensive review of practical synthesis and property optimizations beating the curse
of dimensionality is given in [37, 38]. The origin of these mounting successes is the
key topic addressed in this section.
In analogy to OptiQ in Section 2.3, optimization in chemistry is considered as a
search over the appropriate control landscape, deﬁned as the measurable objective
value J (e.g., the synthesis yield or property value) as a function of the variables.
This deﬁnition is more general than the commonly encountered concept of an energy
landscape, where the objective is deﬁned as minimizing the free energy or potential
energy of the system (e.g., an atomic cluster or protein). Energy landscapes con-
stitute a speciﬁc sub-class drawn from the general family of control landscapes in
chemistry because the variables are often highly constrained, for instance, the only
signiﬁcant variable freedom for protein folding is torsional motion. While energy
landscapes typically have a rugged topology [58], recent studies [37, 38] demon-
strate that control landscapes in chemistry possess a “regular” trap-free topology,
upon satisfaction of Assumptions (1), (2) and (3).

2
Fundamental Principles of Control Landscapes
49
The mathematical formulation of optimization in chemistry is that of control-
ling an open quantum system, consisting of the target system and the environment
with which it interacts [67]. The topological analysis of the resulting control land-
scape and its practical implications have recently been termed “OptiChem” the-
ory [37, 38]. The presence of a trap-free control landscape provides an organizing
principle for explaining why synthesis and property discovery is far easier than the
apparent complexity of such problems would suggest. Importantly, the landscape
analysis underlying OptiChem may be carried out with minimal assumptions about
the speciﬁc nature of the control variables employed. OptiChem theory makes gen-
eral predictions about the behavior of synthesis and property optimizations that are
widely conﬁrmed in laboratory studies [38], and also leads to speciﬁc algorithmic
suggestions on how to exploit the landscape topology to signiﬁcantly accelerate lab-
oratory optimization efforts and provide new tools for chemical property prediction.
2.4.2
OptiChem Theory
The following landscape topology analysis is based on a quantum mechanical de-
scription of an open system; a proof of landscape topology for a classical description
of an open system is presented in Section 2.5. The state of an open quantum system
may be represented by a density matrix ρ, whose properties are given in Equation
2.2. The set of all states can be identiﬁed with the set of all density matrices D.
Analysis of the control landscape topology via OptiChem theory requires the satis-
faction of three physical Assumptions, as a speciﬁc case of those set out generally
in Section 2.2.
(1) The system is controllable: The objective must be well-posed, such that the
optimal density matrix ρ⋆∈D that maximizes the objective J is a reachable
state of the quantum system.
(2) The control end-point map is surjective: A small change in a state ρ must
be associated with a corresponding small change in the control, denoted as a
vector of variables c.
(3) No signiﬁcant constraints are imposed on the control variables: The set
of variables c must be sufﬁciently ﬂexible to permit free movement on the
landscape.
Assumption (1) states that an ill-posed objective may not be reached by any values
of the variables, where an obvious example would be a target synthetic molecule
that contains an atom with an unattainable valence state. Realistic applications will
be more subtle, and the issue of designing a well-posed problem always deserves
attention. Satisfaction of Assumption (2) is difﬁcult to a priori assess, but nomi-
nally more “complex” systems may afford the added freedom needed to satisfy this
assumption. Assumption (3) may easily be violated for certain highly constrained
objectives, such as optimizing the free energy of a molecule using torsional degrees
of freedom as variables [58]. In general, full access to all possible types and values
of the relevant variables c will not be available, but the key issue for Assumption
(3) is the presence of no signiﬁcant constraints. The general question is whether

50
H. Rabitz et al.
practical optimization conditions satisfy the assumptions of OptiChem theory and
can take advantage of its features. These matters are assessed below in Section 4.4.
OptiChem theory rests on the ability to describe chemical transformations of
open systems upon satisfaction of the three assumptions above. The general transfor-
mation of an initial state ρ0 (i.e., before the chemical transformation has occurred)
to the state ρ (i.e., the state of the products after the chemical transformation) can be
represented by a function Φ such that ρ = Φ(ρ0). The transformation described by
Φ has the properties of being trace-preserving (i.e., TrΦ(ρ0) = Tr(ρ) = Tr(ρ0) = 1)
and completely positive (CP). The trace-preservation property of Φ ensures that the
sum over the probabilities of all transformation outcomes is unity. The CP require-
ment ensures satisfaction of the property ρ ≥0 under transformation of ρ0 to some
other density matrix ρ [17, 31]. Such CP, trace preserving functions Φ are called
Kraus maps, described by the matrices K. The CP and trace preservation conditions
imply certain constraints on the structure of the Kraus matrices K, which results in
the set of all possible Kraus matrices {K} being a convex set [17].
The objective J is characterized by a suitable quantum mechanical observable O
[54], such that
J = Tr[ρO],
(2.19)
where ρ is the state of the system after the chemical transformation described by
the Kraus map K. In practice, the initial state ρ0 of the system may be transformed
through alteration of the accessible control variables c = [c1, c2, ...] to specify a
landscape J(ρ)
J = J(c) = J(Kc) = Tr[ΦKc(ρ0)O].
(2.20)
In Equation (2.20), the variables c determine the ﬁtness J by acting on the system
through the matrix Kc, where the superscript indicates that the Kraus matrix depends
on the variables c. The explicit relation of Kc to the variables c will depend on the
particular system and may be complicated, but knowledge of this relationship is
not necessary to establish the landscape topology of J(c) for OptiChem theory. The
formal description of chemical transformations using the analysis below in terms of
the set of Kraus matrices {K} is general for all chemical systems and synthesis or
property optimization objectives.
Satisfaction of the assumptions implies that maximization of J is possible and
that any desired set {K} may be generated by some choice of c. Combining the
convex property of the set {K} with the inherent linear dependence of J(K) upon K
(i.e., from Equation (2.20)) shows that the resulting landscape J contains no local
minima or maxima (i.e., traps) and that connected optimal solutions of J (i.e., level
sets) may exist on the landscape [37]. This result arises naturally from considering
unconstrained convex optimization theory [6]. Importantly, the landscape topolog-
ical properties hold regardless of the particular nature of the initial density matrix
ρ0 or the chemical objective described by the observable operator O. The general
trap-free nature of the landscape can only be shown to hold when {K} is a convex
set; constraints placed on the variables c that limit the attainable Kraus matrices
could make the set {K} non-convex and thereby destroy the trap-free property of

2
Fundamental Principles of Control Landscapes
51
the control landscape and/or reduce the set of reachable optimal transformations to
isolated set(s) of Kraus matrices.
2.4.3
Predictions of OptiChem Theory
The main conclusions of OptiChem theory are that (i) the control landscape for syn-
thesis and property optimization contains no traps and (ii) the optimal regions of
the control landscape may form connected level sets. Importantly, these conclusions
hold regardless of the particular nature of the objective or variables employed, and
thus generally apply to any chemical optimization application upon satisfaction of
Assumptions (1), (2), and (3) above, in addition to the general consideration that the
objective value is always ﬁnite (i.e., the maximum synthesis yield is 100% and phys-
ical or chemical property values are generally ﬁnite). When these criteria are met,
OptiChem theory predicts the following characteristics of laboratory optimization
of chemical objectives:
(a) Trap-free landscapes readily enable “easy” optimization: The favorable
control landscape topology predicts that the search effort to ﬁnd optimal val-
ues of the variables could be less than that implied by the seeming complexity
of the tasks (e.g., based on the curse of dimensionality). In principle, an opti-
mal solution may be found by starting anywhere on the control landscape and
employing an efﬁcient search algorithm. This prediction is consistent with the
ﬁndings that chemical objectives can often be optimized in signiﬁcantly fewer
experiments than implied by the “size” of typical search spaces [38].
(b) Observed trapping indicates constrained variables: The fundamental exis-
tence of trap-free landscapes provides a framework to understand trapping be-
havior when it occurs. Importantly, the landscape J is inherently trap-free upon
satisfaction of the three assumptions, with failure to satisfy Assumption (3)
the most likely breakdown. Traps encountered for this reason are referred to
as “false”, as is typically seen in free energy landscapes [58]. Although Op-
tiChem theory cannot a priori identify the speciﬁc limitations on the variables
that cause false traps to arise on the landscape, the theory may be used to iden-
tify when the current choice of variables is insufﬁcient to meet the desired ob-
jective.
(c) Homologous molecules or materials constitute optimal level sets or mul-
tiple solutions: The possible presence of multiple optimal solutions or level
sets on the control landscape is consistent with the common existence of “ho-
mologous” chemical systems. Homologous systems constitute a set of distinct
members that possess the same chemical properties reﬂected in the value of J.
For example, a large set of chemically related solvents can produce similar high
rates of a particular alkylation reaction [70]; this set of solvents may constitute
an optimal level set or possibly a set of isolated multiple solutions. In other
cases a set of optimal material compositions, solvents, or processing conditions
might have much less obvious structural connections, yet still produce the same
observable J value.

52
H. Rabitz et al.
2.4.4
Illustrations
The degree to which the predictions (a) through (c) of OptiChem theory hold in
laboratory investigations has recently been assessed through examination of the
extensive literature reporting chemical control landscapes, with the overwhelming
ﬁnding that reported control landscapes are almost all trap-free [37, 38]. Although
these studies cannot claim to have performed an exhaustive search of the literature,
overall 142 separate control landscapes were identiﬁed, with 123 appearing trap-
free and with 19 containing traps (i.e., a clear sub-optimal maximum). In some of
the latter cases, the traps can be attributed to variable constraints explicitly discussed
by the authors; the remaining works make no mention of the presence or absence
of traps. Trap-free landscapes have been reported for the chemical synthesis and
property goals listed in Table 2.2, with the literature references given in [38]. This
collective literature demonstrates wide applicability of the predictions of OptiChem
theory to chemical synthesis and property optimization; a few illustrative studies are
summarized here.
Table 2.2 Optimization goals producing trap-free control landscapes in the chemical litera-
ture [37, 38]
type
goal
organic compounds
synthesis
polymers
material catalytic activity
luminescence intensity/frequency
color
X-ray spectral structure
material properties
mechanical constants
dielectric constants
electrical resistivity
binding between molecules/materials
oxidation potential
molecular properties
glass transition temperature
NMR and IR spectra
protein binding
Control landscapes for chemical synthesis and property objectives are readily
generated when the control variables are (quasi)-continuous, such as concentra-
tions of reagents or mole fractions of elements composing a material. The ﬁrst
illustration here considers the mole fractions of three metal components as con-
trol variables ci, i = 1, 2, 3 of a catalytic material, with each component varying
from 0 ≤ci ≤1 and subject to the constraint ∑i ci = 1. The objective was to opti-
mize the catalytic activity of the material for oxidizing isobutane to methacrolein,
isobutene, and CO2 [42]. When the elements Mo, V, and Sb were used as variables,
all catalytic oxidation landscapes were trap-free, as shown in Figure 2.4(a) through

2
Fundamental Principles of Control Landscapes
53
2.4(c). The authors comment that the active regions for formation of methacrolein
in Figure 2.4(a) and CO2 in Figure 2.4(c) consist of a “large plateau” [42], which
according to OptiChem theory would be interpreted as a level set of homologous
catalysts. Replacing Sb with Bi as a control variable causes traps to arise on the
isobutene landscape, shown in Figure 2.4(e). Furthermore, the maximal catalytic ac-
tivity on this landscape is only approximately 160% of the reference catalyst, while
the maximal activity from the Mo-V-Sb landscape is over 1200% of the reference
catalyst. This behavior indicates that the choice of Bi instead of Sb produces a sig-
niﬁcant constraint on the variables when the objective is to catalyze the formation
of isobutene, with Bi limiting the maximum objective yield and introducing traps
on the landscape.
Mo100V0Sb0
Mo0V100Sb0
Mo0V0Sb100
(a)
Mo100V0Sb0
Mo0V100Sb0
Mo0V0Sb100
(b)
0 10 20 30 40 50 60 70
0     400     800     1200
Mo100V0Sb0
Mo0V100Sb0
Mo0V0Sb100
(c)
0     100     200     300
Mo100V0Bi0
Mo0V100Bi0
Mo0V0Bi100
(d)
Mo100V0Bi0
Mo0V100Bi0
Mo0V0Bi100
(e)
0   10   20   30   40   50
0    40    80    120    160
Mo100V0Bi0
Mo0V100Bi0
Mo0V0Bi100
(f)
0     100     200     300
Fig. 2.4 Relative catalytic activity (compared to a ﬁxed reference catalyst) for oxidation of
isobutane to form (a) methacrolein, (b) isobutene, and (c) CO2 with Mo, V, and Sb as the
variables, and relative catalytic activity for oxidation of isobutane to form (d) methacrolein,
(e) isobutene, and (f) CO2 with Mo, V, and Bi as the variables. When Mo, V, and Sb are the
variables, all landscapes are trap-free, but when Bi replaces Sb, a trap appears in (e) for the
isobutene product. Reprinted from [42], c⃝2004, with permission from Elsevier
Constructing molecular property landscapes is often more difﬁcult than optimiz-
ing synthesis conditions or material properties because the variables may not be
continuous parameters such as the concentration of reagents, fractional content of
the material components, etc. In order to assess for the existence of a trap-free con-
trol landscape for such cases with discrete variables, a proper ordering O, (i.e., the
proper sequential labeling) of the variables is needed. For a family of molecules in
a “library” built around a ﬁxed molecular scaffold, the variables can be deﬁned in
terms of prescribed integer labels of the chemical moieties on each site. This proce-
dure is illustrated in Figure 2.5 with an example from [36]. The molecular scaffold
is a vinyl group, the variable moieties X and Y may take on the integer values 1
through 15 as labeled in Figure 2.5(a), and the objective “property” is spectral, con-
sisting of the 13C nuclear magnetic resonance (NMR) chemical shift of the indicated

54
H. Rabitz et al.
carbon atom. Plotting the objective property versus the original arbitrarily chosen
integer labels for X and Y will generally produce a rough or even random looking
landscape, as shown in Figure 2.5(a); such randomness is expected for any randomly
ordered landscape, irrespective of any underlying structure. As a result, this initial
random assignment of the integer variable labels can hide the true underlying reg-
ularity of the landscape if such regularity exists. Accepting that the Assumptions
of OptiChem in Section 2.4.2 are satisﬁed, a regular trap-free landscape under cor-
rect ordering of the labels for X and Y is expected, keeping in mind that there will
always be a discrete character to the landscape at some level of resolution.
scaffold
9
2
12
1
3
13
5
7
10
8
6
4
15
14
11
11
10
6
15
3
13
4
12
7
14
5
1
9
8
2
100
110
120
130
140
150
160
2
1
3
5
7
9
11
13
15
4
6
8
10
12
14
2
1
3
5
7
9
11
13
15
4
6
8
10
12
14
2
1
3
5
7
9
11
13
15
4
6
8
10
12
14
2
1
3
5
7
9
11
13
15
4
6
8
10
12
14
100
110
120
130
140
150
160
b (ppm)
b (ppm)
b (ppm)
Y
X
Initial moiety labels for X and Y
Final moiety orderings for X and Y
(a)
(b)
X
X
Y
Y
1 CH3
6 C6H5
11 i-propyl
2 CN
7 CHO
12 COOH
3 CH2OH
8 COOCH3 13 vinyl
4 Ac
9 H
14 ethyl
5 n-butyl 10 t-butyl
15 n-propyl
X
Y
X
Y
1 t-butyl
CN
9 vinyl
vinyl
2 i-propyl
H
10 H
n-propyl
3 C6H5
COOH
11 Ac
n-butyl
4 ethyl
COOCH3 12 COOCH3 ethyl
5 n-propyl CH3
13 COOH
CHO
6 n-butyl
C6H5
14 CN
i-propyl
7 CH2OH
CH2OH
15 CHO
t-butyl
8 CH3
Ac
Fig. 2.5
An illustration of the process of reordering integer labels for discrete variables to
produce smooth landscapes, in this case for the 13C NMR chemical shift of a vinyl carbon
atom. For a molecular scaffold (here a vinyl group), the moiety variables X and Y are given
arbitrary integer labels as shown in (a). Permuting the order of the labels on the rows and
columns in the landscape (a) results in a the most regular landscape in (b). The white squares
correspond to untested compounds. Adapted from [36].
Various algorithms can reorder the variable labels with the aim of producing a
control landscape that is as smooth as possible [33, 34, 55]. For the two-dimensional
case with moieties X (rows) and Y (columns), reordering involves permuting the
rows and columns in order to identify an ordering O that reveals the most reg-
ular property landscape, as exempliﬁed by going from Figure 2.5(a) to 2.5(b)

2
Fundamental Principles of Control Landscapes
55
[33, 34, 36, 55]. In these and other studies, the recovered landscapes were trap-
free. It has been shown that surfaces that inherently contain traps are generally not
transformed into trap-free surfaces under reordering [11], indicating that reordering
cannot artiﬁcially transform inherently rugged landscapes into smooth ones. The re-
ordering technique has been applied to a number of molecular property objectives
[12, 28, 33, 34, 36, 55].
An investigation on a family of drug candidate molecules demonstrated how a
search algorithm based on the reordering technique can potentially accelerate the
discovery of molecules with desired properties [34]. The molecular library con-
sisted of a common scaffold with two sites having respectively X = 93 and Y = 151
distinct moieties, where the objective was to optimize the inhibition of a protein
by suitable choices of X and Y. Inhibition values were available for 4110 of the
14,043 molecules (29%) [34]. A reordering algorithm revealed a trap-free landscape
to within experimental noise, as shown in Figure 2.6(a). This study also employed
an iterative algorithm to illustrate how to accelerate the discovery of effective com-
pounds by taking advantage of automated reordering combined with the potential
for ﬁnding trap-free control landscapes. In the ﬁrst step of the algorithm, a small
sample of approximately 100−250 randomly chosen compounds was reordered to
identify the most regular landscape. Next, an additional sample of approximately 50
compounds in the vicinity of the best inhibitors on the landscape was added to the
existing sampled compounds, and reordering was performed again with the entire
collection of available compounds to identify a new landscape. This cyclic addition
of a few compounds followed by landscape reordering was shown to signiﬁcantly
reduce the number of syntheses needed to identify the most effective compounds:
the method discovered 70 effective compounds (50% of the total number of effective
compounds in the entire library) with just 650 syntheses, far fewer than the approx-
imately 2000 syntheses needed to identify the same number of effective members
with random screening, as shown in Figure 2.6(b) [34].
2.4.5
Perspective
A generic favorable topology of control landscapes for chemical optimization has
been found to arise upon satisfaction of the three Assumptions set out in Section
2.4.2. The widespread satisfaction of the predictions of OptiChem theory evident
from the numerous landscapes reported in the literature [37, 38] indicates that the
assumptions may be expected to hold under many reasonable experimental con-
ditions and for a wide variety of optimization objectives. The existence of a trap-
free landscape topology provides an organizing principle to help understand why
even complex chemical objectives are often achieved with signiﬁcantly fewer ex-
periments than would be expected based on the apparent mathematical complexity
of these problems.
OptiChem theory potentially has important practical implications for the opti-
mization of chemical synthesis and property objectives. Recent work showing that
an iterative method can accelerate the identiﬁcation of optimal molecules or mate-
rials [34] and facilitate accurate NMR spectral peak prediction [36] represents just

56
H. Rabitz et al.
0
0
10
20
30
40
50
60
70
80
90
100
110
120
130
140
500
1000 1500 2000 2500 3000 3500 4000
Total Known Compounds
Compounds Above 70% Inhibition
20
40
60
80
20
40
60
100
120
140
80
Y
X
(a)
(b)
0
50
100
% inhibition
Fig. 2.6 (a) Optimally reordered landscape for the objective of protein binding efﬁciency
from [34]. 90% of the effective compounds (i.e., with inhibition > 70%) are in the box in
the upper left hand corner of the landscape. (b) The number of effective compounds versus
the total number of “known” compounds. The dash-dot line indicates the expected number of
effective compounds upon random sampling. The red, green, blue, and purple curves corre-
spond to initial samplings of 5%, 10%, 25%, and 50% of the available data, respectively. The
algorithm is most efﬁcient when starting with the smallest initial sampling (red), and iden-
tiﬁes half of the known effective compounds with only 650 syntheses instead of the ∼2000
expected from random sampling.
the beginning of many potential applications of OptiChem theory. Additionally, the
understanding that a well-posed chemical optimization objective should produce a
trap-free control landscape could be important for designing effective optimization
search algorithms, as well as taking advantage of well-known empirical “rules” of
chemistry [38]. The existence of a trap-free control landscape is of particular impor-
tance for interpreting cases where traps are observed on the landscape. First, land-
scape traps may imply that inadequate control resources are being employed (i.e.,
Assumption (3) is violated), as was observed in Figure 2.4(e) above and discussed
in [42, 57]. In such cases, OptiChem theory may be used to prevent the waste of ex-
perimental resources in a suboptimal portion of the available search space. Second,
individual outliers on the landscape may indicate errors in the experimental data, as
was shown in [36], where the outlier nature of the associated data points was only re-
vealed upon applying the landscape principles. Outlier points on the landscape may
also reveal previously hidden distinct physical mechanisms underlying the control
objective, as was found in a study optimizing photoluminescent quantum yield in
transition metal complexes [33]. In these cases, OptiChem theory provides a unique
method to identify when further examination of the outliers may be necessary to
determine the origins of the observed behavior.
OptiChem theory is an organizing principle that provides (a) a basis to explain
why optimization in chemistry is often easier to achieve than expected and (b) a
foundation to predict that many other well-posed control objectives, possibly includ-
ing those previously eschewed as too complex to address, may be attainable goals.

2
Fundamental Principles of Control Landscapes
57
The promising assessment from the chemical literature indicates that OptiChem the-
ory should ﬁnd many applications in chemistry, including when the target molecules
are biological, as discussed further in Section 2.5 below.
2.5
Biological Fitness Landscapes (OptiEvo)
2.5.1
Background
This section focuses on the application of OptiSci to the ﬁtness landscape topol-
ogy of biological systems. The topology of ﬁtness landscapes has been an important
topic in evolutionary biology since Sewall Wright ﬁrst introduced the concept in
1932 [66]. In most studies, a genotypic ﬁtness landscape represents the mapping
from an organism’s sequence space to its ﬁtness value. Consequently, natural evo-
lution can be viewed as an excursion over the ﬁtness landscape, whose topology is
critical for determining the outcome and dynamics of evolution.
In recent years, the practical ﬁeld of directed evolution has become important
for engineering proteins and other bio-molecules and bio-networks [2]. Similar to
the case of natural evolution, a ﬁtness landscape in directed evolution captures the
relationship between the target ﬁtness value and the sequence space for the associ-
ated genes. If the ﬁtness landscape is globally smooth and monotonic, then simple
strategies, possibly including local search algorithms, should be effective in guid-
ing mutations to reach the desired ﬁtness optimum. If the landscape topology is
“rugged” instead, then optimizing the target property can be much more difﬁcult.
Due to the large size of the genome in natural evolution (or the target genes
in directed evolution) and the exponential relationship between the total number
of possible genotypes and the genome/gene size, it has been extremely difﬁcult to
establish the topology of a full genotypic ﬁtness landscape. Since the relationship
between ﬁtness and genotype is nonlinear and highly complex, ﬁtness landscapes
should intuitively contain many local ﬁtness peaks and valleys and ﬁtness conver-
gence should rarely been seen, if at all, in the course of evolution. However, some
laboratory evolution studies have observed ﬁtness convergence in duplicate popula-
tions living in the same environment [13].
To explain this contradiction, most models reasonably assume a globally rugged
landscape and discuss how organismic populations can escape the ﬁtness val-
leys [27, 63]. The only previous model that seeks to directly deduce the topology
of ﬁtness landscapes in evolution is based on statistics [19]. This model shows that
ﬁtness peaks in high-dimensional landscapes are statistically likely to be connected
by ridges of similar height, thereby alleviating the problem of population escape
from local peaks in some cases.
Below we summarize recent work utilizing the concepts and mathematical frame-
work of OptiSci to study the topology of ﬁtness landscapes in both natural and
directed evolution, and we refer to the resultant theory as Optimal Landscapes in
Evolution (OptiEvo). In OptiEvo, an organism (or the target gene(s) in directed evo-
lution) is viewed as a large open system that interacts with its environment, where

58
H. Rabitz et al.
ﬁtness is determined by the set of all relevant nucleotides and the genotype-by-
environment interactions. Here, natural evolution corresponds to a stochastic pro-
cess that seeks the best genotypes to maximize the ﬁtness value. Counter-intuitively,
OptiEvo shows mathematically that the topology of ﬁtness landscapes inherently
should not contain local traps when a proper genetic/genomic ﬂexibility condition
is satisﬁed that captures the OptiSci assumptions in Section 2.2. We also compared
several OptiEvo predictions with results collected from laboratory evolution exper-
iments, indicating that the sufﬁcient ﬂexibility condition can be satisﬁed in many
evolutionary processes.
2.5.2
Physical Foundation of OptiEvo Theory
The topological analysis of evolution landscapes can be performed classically or
quantum-mechanically (see Sections 2.2 and 2.4). Here it is more natural to adopt a
classical treatment. In OptiEvo theory, an organism’s population with N individuals
is represented by a set of variables G = {g1,...,gN}, where gi = (n1,...,nri,...,nRi)
is an Ri-dimensional vector that deﬁnes all the variables (nucleotides, with nri being
1, 2, 3 or 4) of the i-th individual organism in the population and Ri is the genome
length of this individual. The state of a population in a constant environment is
represented by a probability distribution ρG(ω), where ω is a point (a microscopic
state) in Ω, which denotes the “state space” containing all biologically relevant
degrees of freedom for the population. As stated in Section 2.2, the ﬁtness value J
can be viewed as a characteristic physical observable of the population, which can
always be described by the expectation value of the ﬁtness function f(ω) deﬁned
over Ω [41]:
J(ρG) =

Ω
f(ω)ρG(ω)dω.
(2.21)
Note that this equation is not a model, but a truism from statistical physics, applica-
ble universally to any classical physical observable.
In an individual step of evolution, a change of the population G →G′ occurs (via
gene mutations, deletions, insertions, etc.), leading to a change of the probability
distribution ρG →ρG′ and the ﬁtness value J(ρG) →J(ρG′). From an optimization
perspective, the process of evolution aims to ﬁnd the best variable set(s) G∗to max-
imize the objective function J(ρG). In Section 2.5.3, we will show that two basic
conclusions can be drawn on the topology of such landscapes [15]: (1) The ﬁtness
function J(ρG) only has global maxima on F, the union of all possible genotypes
G; local maxima do not exist. (2) The set of optimal genotypes G∗is a connected
level set with the same ﬁtness value. Very importantly, to reach these conclusions,
no species-speciﬁc knowledge of J(ρG), Ω, f(ω), and ρG(ω) is needed beyond the
generic form in Equation (2.21).
As described in Section 2.2, three basic Assumptions need to be satisﬁed in or-
der to reach the two OptiEvo conclusions in realistic cases. These assumptions are
presented in a control framework in keeping with the other domains of OptiSci.

2
Fundamental Principles of Control Landscapes
59
Importantly, in the context of biological evolution the notion of control needs
to be understood as a mathematical formulation to assess the associated ﬁtness
landscapes.
(1) The system is controllable: Biologically, the global ﬁtness optima can be
reached by some genotype.
(2) The control end-point map is surjective: Biologically, a small change in the
population state ρG(ω) has a small corresponding change in the genotype G.
(3) The controls are fully adequate: Biologically, the physically realizable geno-
type changes G →G′ can provide sufﬁcient coverage of all important local
directions on the ﬁtness landscape J(ρG) around ρG.
In the case of biological evolution, the Assumptions (1), (2) and (3) above can be
subsumed into a “sufﬁcient ﬂexibility condition”, meaning that the genome struc-
ture, the accessible gene changes, and the genotype-to-environment interactions al-
low for sufﬁcient ﬂexibility, so that the ﬁtness landscape around J can be freely
explored. We need to emphasize that, only when this condition is combined with
the inherent topological properties of Equation (2.21), can conclusions (1) and (2)
of OptiEvo theory be reached. In particular, violation of the ﬂexibility condition,
due to inherent constraints in gene changes, can create local traps that prevent the
global ﬁtness optima from being reached. It needs to be emphasized that, upon satis-
faction of the ﬂexibility condition, the two OptiEvo conclusions above are inherent
properties of the corresponding genotypic ﬁtness landscapes and are independent of
evolution dynamics (i.e., independent of how an organism moves on a ﬁtness land-
scape). However, the rate that evolution climbs the landscape will depend on the
dynamics. Section 2.5.3 summarizes the mathematical proof leading to the above
OptiEvo conclusions (the full proof is presented in [15]), and Section 2.5.4 provides
empirical assessments of OptiEvo theory.
2.5.3
Evolutionary Fitness Landscape Analysis
Classical probability space is deﬁned by a triple (Ω,F,P), where Ω is a non-empty
set (the phase space), F is a σ-algebra of subsets of Ω, and P : F →[0,1] is a prob-
ability measure [53]. Each classical stochastic system is characterized by some set
of elementary events Ω, where any point ω ∈Ω denotes a speciﬁc microscopic state
of the system. In biological systems, such a phase space would be high dimensional
and complex. However, what counts here is the existence of the phase space rather
than its details.
Biologically measurable properties for an evolving organism’s population are
given by average values of an associated random function. If f(ω) (ω ∈Ω) is a ran-
dom function representing the ﬁtness and if the organism’s population is in a state
with probability distribution ρG(ω), then the ﬁtness value is determined by Equa-
tion (2.21) and will be maximized during the course of evolution. Genetic changes
during evolution will produce successive transformations of the genome G →G′
corresponding to a trajectory over the landscape leading to maximization of J(G).

60
H. Rabitz et al.
A probability space (Ω,F,P) should satisfy the following three axioms [29]:
A1. P(E) ≥0 for any E ∈F
(i.e., probability of any event is a non-negative number).
A2. P(/0) = 0
(here /0 denotes the empty set) and P(Ω) ≡
	
Ω
ρ(ω)dω = 1 (the assumption of
unit measure states that the probability that some event will occur is 1).
A3. For any countable sequence of pairwise disjoint events E1,E2,··· ∈F:
P(E1 ∪E2 ∪...) = P(E1)+ P(E2)+ ...
A subset X ⊂V of a linear space V is a convex set if for any x0,x1 ∈X and any
λ ∈[0,1] the point xλ := (1 −λ)x0 + λx1 is in X [61]. According to this deﬁnition,
the set PΩ is a convex subset in the linear space PR
Ω of all distributions associated
to real-valued signed measures over (Ω,F). Let P0 and P1 be any two probability
measures over Ω with associated probability distributions ρ0(ω) and ρ1(ω), and
deﬁne Pλ = λP1 + (1 −λ)P0 for any 0 ≤λ ≤1. With this deﬁnition, we can prove
that the set PΩ satisﬁes the three Axioms above and has a convex structure [15].
The ﬁtness function J(ρ) in Equation (2.21) is linear in ρ and is deﬁned on the
convex domain PΩ. Since (a) J is a concave functional and (b) a concave func-
tional does not have local maxima over a convex domain [48, 53], the two OptiEvo
conclusions in Section 2.5.2 can be proved [15].
The absence of local maxima for the objective function J(ρ) means that in a
neighborhood of any ρ there exists a direction in which the objective J(ρ) increases
through a change in the genotype G →G′. The sufﬁcient ﬂexibility condition states
that the neighborhood UG of G covers, on some coarse grained scale, all directions
in the space PΩ around ρG, particularly allowing for movement in the direction
in which J(ρ) increases. Signiﬁcant constraints on the available genotypes G (vi-
olating the sufﬁcient ﬂexibility condition), which reduce the domain of probability
distribution functions PΩ to a non-convex set, may introduce traps in the genotypic
landscapes.
2.5.4
Predictions and Empirical Assessments of OptiEvo Theory
in Natural Evolution
Since it is impossible to express the ﬁtness of an organism’s population explicitly
in terms of the genotype, we cannot a priori determine whether the sufﬁcient ﬂex-
ibility condition is satisﬁed in evolution. However, we can perform assessments by
comparing biological predictions of OptiEvo theory (assuming satisfaction of the
sufﬁcient ﬂexibility condition) with results from evolution experiments.
Four general predictions arise from OptiEvo theory upon consideration of the
sufﬁcient ﬂexibility condition:

2
Fundamental Principles of Control Landscapes
61
(a) Coexistence of global ﬁtness convergence and genotypic diversity: OptiEvo
theory implies that, given adequate time, evolution of an organism’s population in
a constant homogeneous environment should always converge to the same globally
optimal ﬁtness value.
(b) Connected global optima: The different genotypes at the top of a ﬁtness land-
scape are connected. Thus, evolving between them does not require going through
valley genotypes.
(c) Non-existence of reciprocal sign epistasis: The phenomenon of epistasis (Fig-
ure 2.7) arises when the ﬁtness effect of a mutation depends on its genetic back-
ground [63]. Certain types of epistasis can slow down the dynamics of evolution
(Figures 2.7.i and ii). According to OptiEvo theory, however, the only type of epis-
tasis that cannot exist is reciprocal sign epistasis (Figure 2.7.iii), which will create
local ﬁtness peaks/traps that prevent the global ﬁtness optima from begin reached.
(d) Condition for the existence of local sub-optimal peaks: Local sub-optimal
ﬁtness peaks or separated global maxima can exist only when the sufﬁcient ﬂexibil-
ity condition is violated, i.e., constraints in the evolutionary changes of the genome
prevent accessing important domains of the ﬁtness landscape. Statistically, such vi-
olations are more likely to occur for smaller genomes.
Below we brieﬂy compare predictions (a)–(d) of OptiEvo theory with results
obtained from laboratory evolution studies [13]. A summary of these experiments
along with a more detailed discussion of their relationship to OptiEvo theory is
presented in [15].
A classic well known laboratory evolution experiment has been running over
30,000 generations since 1988 on twelve initially identical Escherichia coli popu-
lations in identical glucose-limited minimal medium [65]. It was observed that the
ﬁtness converged to similar values, while cell morphology, physiology, mutation
rates, and gene sequence had large variations across the populations [32]. While
these results are not easily explainable by most models of ﬁtness landscapes, they
agree well with prediction (a) of OptiEvo theory. Reverse evolution experiments
also show that ancestral ﬁtness values can be recovered given sufﬁcient evolution
time [60]. In addition, compensatory mutations occur more often than back mu-
tations [10], indicating the existence of multiple evolutionary trajectories. These
results are consistent with OptiEvo theory predictions (a) and (c).
Prediction (b) of OptiEvo theory states that different optimal genotypes should be
fully connected. This prediction is supported by recent experiments on Antirrhinum
[64] species, showing that phenotypically distinct species well adapted in similar
environments may be adjacent in genotypic space.
In some evolution experiments, convergence of ﬁtness was not observed. A
well-cited experiment involved the RNA bacteriophage φ6, where two genetically
different virus populations converged to different ﬁtness maxima in the same envi-
ronment [9]. OptiEvo theory provides two possible explanations. First, the evolution
experiment (about 100 generations) may be too short to allow for convergence of the
ﬁtness value. Second, local ﬁtness optima may exist in this system due to a violation
of the ﬂexibility condition. According to prediction (d) above, the small genome of
the virus makes it more susceptible to various genetic constraints and can cause

62
H. Rabitz et al.
ab
Ab
aB
AB
Fitness
ab
Ab
aB
AB
Fitness
X
ab
Ab
aB
AB
Fitness
x
X
(i)
(ii)
(iii)
Fig. 2.7 Magnitude and sign epistasis for a two-nucleotide, two-allele system. Evolution
starts from the genotype ab and ends with AB. (i): Magnitude epistasis leads to different selec-
tion coefﬁcients for the two pathways (ab→Ab→AB and ab→aB→AB), but both pathways
are evolutionarily accessible because the ﬁtness value always increases in each evolution step.
(ii): Sign epistasis makes the pathway ab→Ab→AB inaccessible, while ab→aB→AB is still
accessible. (iii): Reciprocal sign epistasis makes both pathways inaccessible and isolates the
two genotypes ab and AB, which according to OptiEvo theory is the only type of epistasis
that cannot exist if the sufﬁcient ﬂexibility condition is satisﬁed. Adopted from Figure 1 of
[15].
some of the transformations G →G′ to be inaccessible, creating local traps in the
corresponding ﬁtness landscape.
2.5.5
Application of OptiEvo Theory to Directed Evolution
In addition to providing topological analysis of ﬁtness landscapes in natural evolu-
tion, OptiEvo theory also has important implications for strategies of directed evo-
lution of proteins, nucleic acids, and complex biological networks. This section will
summarize these implications and describe a general substituent reordering strat-
egy (whose applicability depends critically on OptiEvo’s conclusions) to facilitate
property optimization (including directed evolution) of biological systems.

2
Fundamental Principles of Control Landscapes
63
OptiEvo has two main implications for directed evolution:
(1) OptiEvo states that constraints in the mutations G →G′ may introduce local
traps in the evolution steps. In directed evolution, OptiEvo suggests that per-
forming mutations on a large number of nucleotides (corresponding to fewer
constraints) can be more effective in reaching the global ﬁtness optimum,
although possibly at the cost of slower initial ﬁtness increase.
(2) OptiEvo suggests that, if the sufﬁcient ﬂexibility condition is satisﬁed, the prop-
erty landscape will be globally regular (i.e., trap free). From an optimization
point of view, a regular property landscape will allow for local search /pat-
tern recognition / interpolation methods to efﬁciently optimize the target prop-
erty. In contrast, if the property landscape is rugged, then these tools will have
little predictive power without detailed knowledge of the structure-property
relationships.
Utilizing the second implication above, we have developed a general and easy-
to-use substituent reordering strategy for property optimization through directed
evolution of proteins and other biosystem components. The same strategy has been
employed for property optimization of chemical compounds and materials in Sec-
tion 2.4. Depending on the requirements of the applications, different algorithms
have been designed to enable optimal performance in guiding directed evolution ex-
periments. The text below will describe one such algorithm most relevant to directed
evolution of biological systems, especially proteins.
A substituent reordering algorithm was designed especially for optimization of
protein properties in focused libraries [16]; also see Section 2.4.4 for like applica-
tions to molecular discovery. The algorithm was evaluated in a proof-of-principle
study to optimize the enatioselectivity (E-value) of the expoxide hydrolase from As-
pergillus niger. To be experimentally manageable, we selected two amino acid po-
sitions from the wild-type enzyme that are known to contribute to its E-value. Each
amino acid on each protein backbone position is assigned a random but unique inte-
ger between 1 and 20, and the total number of possible mutants from the two posi-
tions is 400. We then synthesized a random subset of the 400 mutants and measured
the E-value for each of them. The property landscape for the mutants is irregular
(Figure 2.8.A) due to the random integer assignments to the amino acids and offers
no predictive power. However, using the reordering algorithm, we rearranged (per-
muted) the integer assignments and obtained a smooth property landscape, which
immediately points to the lower right corner of the reordered landscape as the region
with better mutants (Figure 2.8.B). Based on the prediction, we then synthesized
45 additional mutants, most of which were then found to be within the predicted
region with high E-values. Figure 2.8.C shows that the algorithm even identiﬁed a
laboratory error (a misplaced mutant) based on ﬁnding local landscape irregularity.
Importantly, the substituent reordering algorithm does not utilize any structure
information of the target protein; the algorithm operates to identify an optimal inte-
ger assignment to each amino acid, so that a speciﬁed landscape regularity measure
is optimized (i.e., the smoothest landscape is identiﬁed over the mutant samples). As

64
H. Rabitz et al.
Position 1
Position 2
(A)
(B)
(C)
Fig. 2.8 Optimal reordering of the E-value landscapes for an epoxide hydrolase [16]. (A)
Color heat map for the E-value landscape of 95 randomly sampled mutants plotted with a
random amino acid ordering. Each color square represents one mutant with red indicating
high E-value and blue corresponding to low E-value (see color bar on the far right). White
squares are unsampled proteins. (B) E-value landscape of the 95 mutants using the amino acid
ordering identiﬁed by the substituent reordering algorithm. The result predicts that proteins
with high E-values are most likely located in the lower right corner. The mutant at position
[16,20] (circled in red in both (A) and (B)) of the reordered landscape turned out to be the
same as the mutant at position [20,19]; the wrong protein was accidentally placed in this
position in the experiment. (C) E-value landscape for 45 newly sampled mutants, guided by
the ordering in (B). Adopted from Figure 2 of [16].
stated in Section 2.4 and demonstrated in a computational study [11], if the underly-
ing property landscape contains traps due to violation of the assumptions, it is highly
likely that even the smoothest reordered landscape will remain rugged, giving little
predictive power. Hence, the fact that the substituent reordering algorithm yielded
a smooth property landscape (within data noise) and correctly predicted the region
with the best E-values implies that the sufﬁcient ﬂexibility condition appeared to be
satisﬁed even in this highly constrained two-dimensional property landscape.
So far, the substituent reordering strategy has been applied mostly to two-
dimensional cases. To improve the performance, especially minimization of sam-
pling in higher-dimensional systems, we have recently integrated the substituent
reordering algorithm with a high-dimensional model representation (HDMR)
method [24]. HDMR decomposes nonlinear high-dimensional functions into a hi-
erarchy of lower-dimensional (but still nonlinear) functions, and substituent re-
ordering can be performed on each lower-dimensional function separately. Very
importantly, HDMR samples all the variables simultaneously (e.g., mutations are
performed on all substitution positions simultaneously) and it enables highly fa-
vorable scalability of the mutant sampling as the dimensionality of the system in-
creases [24]. The capabilities of the HDMR-reordering algorithm was illustrated in
a simulation study with high-dimensional functions [24]. The study showed that,
for a nonlinear, 20-dimensional simulated protein library with 2020 members, the
HDMR-reordering algorithm can provide reliable predictions from a very small
number of samples (∼104).

2
Fundamental Principles of Control Landscapes
65
2.5.6
Perspective
The physically-grounded and mathematically based OptiEvo theory was introduced
to analyze the general topology of ﬁtness landscapes in biological evolution [15].
OptiEvo theory views an organism’s population as an open system and natural evo-
lution as a stochastic process of ﬁtness optimization. The theory states that, when
gene changes in evolution can provide sufﬁcient ﬂexibility to adequately access lo-
cal landscape structure, then (1) genotypic ﬁtness landscapes should be free of local
traps and (2) the globally optimal genotypes are connected. The extreme complexity
of biological systems makes it impractical to perform mathematical or model-based
assessment of optiEvo theory and the sufﬁcient ﬂexibility condition. However, a
comparison of several predictions of OptiEvo with empirical evidence from labo-
ratory evolution experiments implies that the sufﬁcient ﬂexibility condition can be
satisﬁed in many evolutionary processes. Consequently, OptiEvo theory provides a
physical explanation for (a) the apparent contradiction between ﬁtness convergence
and genome complexity in many evolution processes, as well as (b) the potential
cause of local ﬁtness traps (i.e., violation of the sufﬁcient ﬂexibility condition).
OptiEvo theory also has important implications for directed evolution: (1) per-
forming mutations on a larger number of amino acid or nucleic acid positions is
more likely to alleviate the introduction of local traps in evolution, and (2) sat-
isfaction of the sufﬁcient ﬂexibility condition may allow for local search and in-
terpolation methods to effectively guide the property optimization of the target
biomolecules or bionetworks. Building on this foundation, OptiEvo lends itself to a
general substituent reordering strategy for optimizing target properties of complex
biosystems with minimal sampling effort and without requiring explicit information
about the structure-property relationships [16, 24]. In cases where gene mutations
occur at many sites in the directed evolution experiments, the order of ∼103 −104
samples may be required for reliable prediction. However, with the staggering pace
of developments in high-throughput technologies, we expect that such experiments
can be performed with reasonable overhead in the near future.
In the development of OptiEvo theory and its assessment by empirical data, we
have considered the environment as constant for an organismic population. When
the environment changes, the geometry of the ﬁtness landscape may also change,
thereby altering evolutionary dynamics. However, when the ﬂexibility condition re-
mains satisﬁed, the trap-free topology of the landscape will in turn remain according
to OptiEvo theory.
2.6
Conclusion
This chapter summarized recent advances in research exploring the topology of con-
trol landscapes. The key ﬁnding in these studies is that upon satisfaction of the
assumptions (1), (2) and (3) given in Section 2.2, a mathematical analysis can be
executed drawing general conclusions about the topology of the landscapes. In par-
ticular, under the speciﬁed criteria, then the control landscapes should be generically

66
H. Rabitz et al.
free of suboptimal trapping critical points. Considerable quantitative experimental
and simulation evidence over wide-ranging applications summarized in the chapter
demonstrates that the underlying assumptions may often be satisﬁed providing con-
ﬁrmation of the very attractive landscape topological conclusions. The implications
of these ﬁndings have fundamental as well as practical importance.
The OptiSci landscape formulation is best referred to as a “principle” rather than
a theory, despite the use of the latter word in the preceding sections. This distinction
is made, as the landscape topological conclusions naturally follow mathematically
upon satisfaction of the three key assumptions. Thus, an observed violation of the
predicted topological character in any particular application would imply that one or
more of the assumptions is not satisﬁed. This circumstance has important implica-
tions. For example, the observed violation of the predicted topology would provide
an early indication of an ill-designed experiment, which could be especially relevant
in cases of expensive or time-consuming applications. In turn, the identiﬁcation of
a particular minimal set of control variables that permit trap-free excursions over a
landscape could be viewed as specifying a “rule” for the application. In this regard,
it may be possible to consider the construction of automated apparatuses whose goal
is to identify systematic control rules for particular applications.
Although the landscape topology may be assessed generically upon satisfaction
of the key assumptions, an additional challenge is to understand how partial sat-
isfaction of the assumptions (e.g. a system could be partially controllable regard-
ing Assumption (1)) impacts the landscape topology. Such limitations can lead to
anomalous landscape features, including what may be referred to as “false traps”
when they arise from constraints being present. Some applications may not permit
overcoming the presence of practical constraints, while in other cases knowledge of
the impact of constraints may motivate the extra effort or the gathering of added re-
sources to overcome the constraints in order to reach the best performance through
an unfettered search over the landscapes. A related matter concerns the nature of
the non-topological features on the landscapes (i.e., the “twists and turns” that do
not have critical point character). Although the latter features would not inherently
stop even a local algorithm from reaching optimal locations on the landscape, they
could signiﬁcantly impact the efﬁciency of such procedures. A full analysis of non-
topological landscape features remains to be explored.
We hope that the developments reported in this chapter provide the basis for
considering the uniﬁcation of landscape studies across multiple disciplines. These
cross connections may open up new applications which were heretofore viewed as
unreachable due to the diversity of variables involved or the anticipated complexity
of the landscapes.
Acknowledgements. The authors acknowledge support from the NSF, DOE, ARO, and
DARPA. RBW acknowledges support from NSFC (No.60904034, 61134008). We are also
indebted to Ruixing Long for his invaluable comments and suggestions.

2
Fundamental Principles of Control Landscapes
67
References
[1] Altaﬁni, C.: Controllability and simultaneous controllability of isospectral bilinear con-
trol systems on complex ﬂag manifolds. Systems and Control Letters 58(3), 213–216
(2009)
[2] Arnold, F., Georgiou, G.: Directed Enzyme Evolution: Screening and Selection Meth-
ods. Humana Press, Totowa (2003)
[3] Assion, A., Baumert, T., Bergt, M., Brixner, T., Kiefer, B., Seyfried, V., Strehle, M.,
Gerber, G.: Control of chemical reactions by feedback-optimized phase-shaped fem-
tosecond laser pulses. Science 282(5390), 919–922 (1998)
[4] Bardeen, C.J., Yakovlev, V.V., Wilson, K.R., Carpenter, S.D., Weber, P.M., Warren,
W.S.: Feedback quantum control of molecular electronic population transfer. Chemi-
cal Physics Letters 280(1-2), 151–158 (1997)
[5] Bellman, R.E.: Dynamic Programming. Princeton University Press, Princeton (1957)
[6] Boyd, S.P., Vandenberghe, L.: Convex Optimization. Cambridge University Press, Cam-
bridge (2004)
[7] Brif, C., Chakrabarti, R., Rabitz, H.: Control of Quantum Phenomena, pp. 1–76. John
Wiley & Sons, Chichester (2011)
[8] Brixner, T., Gerber, G.: Quantum control of gas-phase and liquid-phase femtochemistry.
Chem. Phys. Chem. 4(5), 418–438 (2003)
[9] Burch, C., Chao, L.: Evolvability of an RNA virus is determined by its mutational neigh-
bourhood. Nature 406, 625–628 (2000)
[10] Davis, B.H., Poon, A.F.Y., Whitlock, M.C.: Compensatory mutations are repeatable
and clustered within proteins. Proc. Royal Soc. B: Biological Sciences 276, 1823–1827
(2009)
[11] DiMaggio, P.A., McAllister, S.R., Floudas, C.A., Feng, X.J., Rabinowitz, J.D., Rabitz,
H.A.: Biclustering via optimal re-ordering of data matrices in systems biology: rigorous
methods and comparative studies. BMC Bioinformatics 9, 458–1–16 (2008)
[12] Dooley, C.T., Chung, N.N., Wilkes, B.C., Schiller, P.W., Bidlack, J.M., Pasternak, G.W.,
Houghten, R.A.: An all D-amino acid opioid peptide with central analgesic activity from
a combinatorial library. Science 266, 2019–2022 (1994)
[13] Elena, S.F., Lenski, R.E.: Evolution experiments with microorganisms: the dynamics
and genetic bases of adaptation. Nat. Rev. Genetics 4, 457–469 (2003)
[14] Fano, U.: Description of states in quantum mechanics by density matrix and operator
techniques. Rev. Mod. Phys. 29, 74–93 (1957)
[15] Feng, X., Pechen, A., Jha, A., Wu, R., Rabitz, H.: Global optimality of ﬁtness land-
scapes in evolution. Chem. Sci. 3, 900–906 (2012)
[16] Feng, X., Sanchis, J., Reetz, M., Rabitz, H.: Enhancing the efﬁciency of directed evo-
lution in focused enzyme libraries by the adaptive substituent reordering algorithm.
Chemistry 18, 5646–5654 (2012)
[17] Fujiwara, A., Algoet, P.: One-to-one parametrization of quantum channels. Phys. Rev.
A 59, 3290–3294 (1999)
[18] Gabasov, R., Kirillova, F.: Higher order necessary conditions for optimality. SIAM J.
Control 10, 127–168 (1972)
[19] Gavrilets, S.: Fitness Landscapes and the Origin of Species. Princeton University Press,
Princeton (2004)
[20] Goldberg, D.E.: Genetic Algorithms in Search, Optimization, and Machine Learning.
Kluwer Academic Publishers, Boston (1989)

68
H. Rabitz et al.
[21] Ho, T.S., Dominy, J., Rabitz, H.: Landscape of unitary transformations in controlled
quantum dynamics. Phys. Rev. A 79, 013422–1–16 (2009)
[22] Ho, T.S., Rabitz, H.: Why do effective quantum controls appear easy to ﬁnd? Journal of
Photochemistry and Photobiology A: Chemistry 180(3), 226–240 (2006)
[23] Huang, G.M., Tarn, T.J., Clark, J.W.: On the controllability of quantum-mechanical
systems. Journal of Mathematical Physics 24(11), 2608–2618 (1983)
[24] Izmailov, S., Feng, X., Li, G., Rabitz, H.: A scalable algorithm for molecular property
estimation in high dimensional scaffold-based libraries. J. Math. Chem. 50, 1765–1790
(2012)
[25] Judson, R.S., Rabitz, H.: Teaching lasers to control molecules. Phys. Rev. Lett. 68,
1500–1503 (1992)
[26] Kadanoff, L.P.: Statistical Physics: Statics, Dynamics and Renormalization. World Sci-
entiﬁc, Singapore (2000)
[27] Kauffman, S., Levin, S.: Towards a general theory of adaptive walks on rugged land-
scapes. J. Theor. Biol. 128, 11–45 (1987)
[28] Kim, W., Kim, Y., Min, J., Chang, Y.T., Hecht, M.H.: A high-throughput screen for
compounds that inhibit aggregation of the Alzheimer’s peptide. ACS Chem. Biol. 1,
461–469 (2006)
[29] Kolmogorov, A.N.: Foundations of the Theory of Probability. Chelsea Pub. Co., New
York (1950)
[30] Kosloff, R., Rice, S., Gaspard, P., Tersigni, S., Tannor, D.: Wavepacket dancing: Achiev-
ing chemical selectivity by shaping light pulses. Chemical Physics 139(1), 201–220
(1989)
[31] Kraus, K.: States, Effects and Operations: Fundamental Notions of Quantum Theory.
Springer, Berlin (1983)
[32] Lenski, R.: Phenotypic and genomic evolution during a 20,000-generation experiment
with the bacterium Escherichia coli. Plant Breeding Reviews 24, 225–265 (2004)
[33] Liang, F., Feng, X., Lowry, M., Rabitz, H.: Maximal use of minimal libraries through
the adaptive substituent reordering algorithm. J. Phys. Chem. B 109, 5842–5854 (2005)
[34] McAllister, S.R., Feng, X., DiMaggio, P.A., Floudas, C.A., Rabinowitz, J.D., Rabitz,
H.A.: Descriptor-free molecular discovery in large libraries by adaptive substituent re-
ordering. Bioorg. Med. Chem. Lett. 18, 5967–5970 (2008)
[35] Moore, K.W., Chakrabarti, R., Riviello, G., Rabitz, H.: Search complexity and resource
scaling for the quantum optimal control of unitary transformations. Phys. Rev. A 83,
012326–1–15 (2011)
[36] Moore, K.W., Li, R., Pelczer, I., Rabitz, H.: NMR landscapes for chemical shift predic-
tion. J. Phys. Chem. A 136(16), 9142–9157 (2012)
[37] Moore, K.W., Pechen, A., Feng, X.J., Dominy, J., Beltrani, V., Rabitz, H.: Universal
characteristics of chemical synthesis and property optimization. Chemical Science 2,
417–424 (2011)
[38] Moore, K.W., Pechen, A., Feng, X.J., Dominy, J., Beltrani, V., Rabitz, H.: Why is
chemical synthesis and property optimization easier than expected? Phys. Chem. Chem.
Phys. 13(21), 10048–10079 (2011)
[39] Moore, K.W., Rabitz, H.: Exploring quantum control landscapes: Topology, features,
and optimization scaling. Phys. Rev. A 84, 012109–1–14 (2011)
[40] Moore, K.W., Rabitz, H.: Exploring constrained quantum control landscapes. J. Chem.
Phys. 137(13), 134113–1–16 (2012)
[41] Papoulis, A.: Expected Value; Dispersion; Moments. McGraw-Hill, New York (1984)

2
Fundamental Principles of Control Landscapes
69
[42] Paul, J.S., Jacobs, P.A., Weiss, P.W., Maier, W.F.: Combinatorial discovery of new cat-
alysts for the selective oxidation of isobutane. Appl. Catal. A: Gen. 265(2), 185–193
(2004)
[43] Peirce, A.P., Dahleh, M.A., Rabitz, H.: Optimal control of quantum-mechanical sys-
tems: Existence, numerical approximation, and applications. Phys. Rev. A 37, 4950–
4964 (1988)
[44] Rabitz, H., Ho, T.S., Hsieh, M., Kosut, R., Demiralp, M.: Topology of optimally con-
trolled quantum mechanical transition probability landscapes. Phys. Rev. A 74, 12721–
12721 (2006)
[45] Rabitz, H., Ho, T.S., Long, R., Wu, R., Brif, C.: Comment on are there traps in quantum
control landscapes?. Phys. Rev. Lett. 108, 198901–1–2 (2012)
[46] Rabitz, H., Hsieh, M., Rosenthal, C.: Quantum optimally controlled transition land-
scapes. Science 303, 1998–2001 (2004)
[47] Ramakrishna, V., Salapaka, M.V., Dahleh, M., Rabitz, H., Peirce, A.: Controllability of
molecular systems. Phys. Rev. A 51, 960–966 (1995)
[48] Rockafellar, R.T.: Convex Analysis. Princeton University Press, Princeton (1970)
[49] Roslund, J., Rabitz, H.: Phys. Rev. A. (to be submitted)
[50] Roslund, J., Rabitz, H.: Experimental quantum control landscapes: Inherent monotonic-
ity and artiﬁcial structure. Phys. Rev. A 80, 013408–1–9 (2009)
[51] Rothman, A., Ho, T.S., Rabitz, H.: Observable-preserving control of quantum dynamics
over a family of related systems. Phys. Rev. A 72, 023416–1–15 (2005)
[52] Schirmer, S.G., Fu, H., Solomon, A.I.: Complete controllability of quantum systems.
Phys. Rev. A 63, 063410–1–8 (2001)
[53] Schulz, M.: Control Theory in Physics and other Fields of Science: Concepts, Tools,
and Applications. Springer, Berlin (2006)
[54] Schwabl, F.: Quantum Mechanics. Springer, Berlin (2002)
[55] Shenvi, N., Geremia, J.M., Rabitz, H.: Substituent ordering and interpolation in molec-
ular library optimization. J. Phys. Chem. A 107, 2066–2074 (2003)
[56] Shi, S., Rabitz, H.: Quantum mechanical optimal control of physical observables in
microsystems. The Journal of Chemical Physics 92(1), 364–376 (1990)
[57] Sohn, K.S., Zeon, I.W., Chang, H., Seung, K.L., Park, H.D.: Combinatorial search for
new red phosphors of high efﬁciency at VUV excitation based on the YRO4 (R= As,
Nb, P, V) system. Chem. Mater. 14, 2140–2148 (2002)
[58] Stillinger, F., Weber, T.: Packing structures and transitions in liquids and solids. Sci-
ence 225, 983–989 (1984)
[59] Stoustrup, J., Schedletzky, O., Glaser, S.J., Griesinger, C., Nielsen, N.C., Sørensen,
O.W.: Generalized bound on quantum dynamics: Efﬁciency of unitary transformations
between non-hermitian states. Phys. Rev. Lett. 74, 2921–2924 (1995)
[60] Teotonio, H., Michael, R.R.: Reverse evolution. Evolution 55, 653–660 (2001)
[61] Valentine, F.A.: Convex Sets. McGraw-Hill, New York (1964)
[62] Weiner, A.M.: Femtosecond pulse shaping using spatial light modulators. Review of
Scientiﬁc Instruments 71(5), 1929–1960 (2000)
[63] Weinreich, D., Watson, R., Chao, L.: Sign epistasis and genetic constraint on evolution-
ary trajectories. Evol. Int. J. Org. Evol. 59, 1165–1174 (2005)
[64] Whibley, A.C., Langlade, N.B., Andalo, C., Hanna, A.I., Bangham, A., Thebaud, C.,
Coen, E.: Evolutionary paths underlying ﬂower color variation in Antirrhinum. Sci-
ence 313, 963–966 (2006)

70
H. Rabitz et al.
[65] Woods, R., Schneider, D., Winkworth, C., Riley, M., Lenski, R.: Tests of parallel molec-
ular evolution in a long-term experiment with Escherichia coli. Proc. Natl. Acad. Sci.
USA 103, 9107–9122 (2006)
[66] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution,
pp. 356–366 (1932)
[67] Wu, R., Pechen, A., Rabitz, H., Hsieh, M., Tsou, B.: Control landscapes of observable
preparation with open quantum systems. J. Math. Phys. 49, 022108–1–12 (2008)
[68] Wu, R.B., Hsieh, M.A., Rabitz, H.: Role of controllability in optimizing quantum dy-
namics. Phys. Rev. A 83, 062306–1–6 (2011)
[69] Wu, R.B., Long, R., Dominy, J., Ho, T.S., Rabitz, H.: Singularities of quantum control
landscapes. Phys. Rev. A 86, 013405–1–8 (2012)
[70] Zaugg, H.E.: Speciﬁc solvent effects in the alkylation of enolate anions. IV. kinetic order
of solvent participation. J. Am. Chem. Soc. 83, 837–840 (1961)

Chapter 3
Biomolecular Information Gained through In
Vitro Evolution on a Fitness Landscape in
Sequence Space
Takuyo Aita and Yuzuru Husimi
Abstract. Biological evolution at the molecular level is conceptually regarded as
the genetic information gaining process. Analyzing the in vitro evolution process,
which is a simpliﬁed Darwinian evolution under a well-controlled environment, we
can clarify the concept of the information gaining process. This evolution process
can be modeled as a hill-climbing or adaptive walk on a ﬁtness landscape in se-
quence space. Through the hill-climbing process, the evolving biopolymer (as the
adaptive walker) stores the following two aspects of information: one stems from the
sequences converged in sequence space and the other stems from the ﬁtness incre-
ment on the ﬁtness landscape. In Eigen’s words, the former and latter are described
as the “extent” and “content” of biological information, respectively [25]. In our
approach, these two aspects can be interpreted based on the analogy between evo-
lutionary dynamics and thermodynamics. Several studies introduced the concept of
“free ﬁtness” (which is analogous to free energy) as the Lyapunov function for evo-
lution: Free ﬁtness ≡Fitness+Temperature-like parameter×Entropy. Furthermore,
we focus on the novel quantity of Fitness divided by Temperature-like parameter,
and regard this quantity as the content of information, while we regard Entropy as
the extent of information. The quantity of Free ﬁtness divided by Temperature-like
parameter is a Lyapunov function of the evolution process, and then it should be
called “biomolecular information”, which includes both aspects of information.
Takuyo Aita
Graduate School of Science and Engineering, Saitama University, Saitama 338-8570, Japan
e-mail: taita@mail.saitama-u.ac.jp
Yuzuru Husimi
Innovative Research Organization, Saitama University, Saitama 338-8570, Japan
e-mail: husimi.@mail.saitama-u.ac.jp
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
71
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_3, c⃝Springer-Verlag Berlin Heidelberg 2014

72
T. Aita and Y. Husimi
3.1
Introduction
3.1.1
Outline of In Vitro Molecular Evolution
In vitro molecular evolution is an artiﬁcial one, conducted in a laboratory and driven
by the Darwinian mechanism. Study into this ﬁeld began with Spiegelman’s exper-
iment in 1967 [39], and has been further developed [14, 27, 29, 40, 46, 52, 54]. It is
the quest for the principle of emergence of functional biopolymers and is applied to
industry and medicine, e.g. evolutionary (or adaptive) drug design, the ﬁrst of which
was approved by the Food and Drug Administration (USA). In 2004 [55] reviewed
theoretical studies of in vitro evolution.
As an introductory section, we explain several important terms to comprehend
in vitro evolution theoretically. A quantitative measure of a molecular phenotype,
that is, a certain physicochemical property (such as enzymatic activity or afﬁnity
to a target receptor or replication rate constant) of an evolving molecule is desig-
nated as the “ﬁtness”. The conceptual space of all conceivable base- or amino acid-
sequences (=genotypes) is designated as the “sequence space” (Maynard-Smith,
1970). Each of the conceivable sequences is mapped onto their corresponding points
in the sequence space. A distance between two arbitrary points is measured with the
“Hamming distance” between the two corresponding sequences. The scalar ﬁeld
constructed by mapping the ﬁtness-value of each sequence into the corresponding
point in the sequence space is designated as the “ﬁtness landscape”1, which is re-
garded as the evolutionary attribute of the biopolymer [22, 23, 33]. When the shape
of the ﬁtness landscape is ﬁxed under a constant environment, an evolution pro-
cess of biopolymers is considered as an “adaptive walk” or “hill-climbing” on the
corresponding ﬁtness landscape in sequence space.
In vitro evolution is classiﬁed into the following two types: “natural selection
type” and “artiﬁcial selection type”. In natural selection type, the ﬁtness is the spe-
ciﬁc growth rate of evolving molecules, and the selection is driven by simultaneous
evaluation and ampliﬁcation by the molecules themselves. An example of this is
self-replicating RNA molecules in a ﬂow reactor. In artiﬁcial selection-type, the ﬁt-
ness is one of the physicochemical properties of evolving molecules (e.g. binding
free energy to a target receptor), and the selection process is conducted through a
cycle of evaluation and ampliﬁcation by the experimenter. Therefore, in vitro evolu-
tion of the artiﬁcial selection-type is also called the “directed evolution”. When we
accentuate the aspect of molecular design, in vitro evolution of both types is also
called “evolutionary molecular engineering” [24].
1 As an alternative deﬁnition, the ﬁtness landscape is deﬁned in the space of allele fre-
quency [20, 59]. The mean ﬁtness-value of each allele frequency is mapped into the corre-
sponding point in the space.

3
Biomolecular Information Gained through In Vitro Evolution
73
3.1.2
In Vitro Evolution as an Information Gaining Process
The in vitro evolution process have two parts: the “evolving system” that con-
sists of phenotype/genotype molecules as evolving entities and the “surroundings”
(or “environments”) as an experimental setup. For example, we consider a typical
case where one tries to create speciﬁc ligand molecules with high binding afﬁn-
ity to target-receptor molecules through in vitro evolution (Figure 3.1). The ligand
molecules correspond to the evolving system, while the shape of the receptor molec-
ular surface including distribution of the electric charge on it, and other experimen-
tal conditions of the solvent correspond to the surroundings. In this case, the ﬁtness
should be deﬁned as the logarithm of the association constant between the ligand
and the receptor, i.e. lnKa. Using the logarithm of the association constant means
that the ﬁtness is handled at the free-energy level. We must set and control the sur-
roundings properly for correct evaluation of the ﬁtness. The evolving biopolymers
in Figure 3.1 gain a particular sequence of information and a high ﬁtness value from
the surroundings to bind with the target-receptor molecules under given conditions.
Then, we can say that Darwinian evolution is considered as an information gaining
process from the surroundings. In order to simplify the information gaining pro-
cess and treat it physically, we focused on in vitro evolution in a well-controlled
environment as an extremely simpliﬁed process of biological evolution [25].
In this simpliﬁed system, an evolution process of a biopolymer is considered as
an “adaptive walk” or “hill-climbing” on the corresponding ﬁtness landscape in the
sequence space (Figure 3.2 right). Here, the evolving molecular system gains at least
two kinds of information originating from the converged sequences and the ﬁtness
increment of the evolving biopolymer as the adaptive walker. These two represent
two aspects of the biomolecular information, i.e. extent and content, respectively.
The two are interconnected through physicochemical properties of the biopolymer.
The interconnection may be analyzed based on the analogy between the evolution
process and thermodynamics. Actually, the picture of the adaptive walk on a ﬁtness
landscape is analogous to the conceptual view that the molecular folding process
is considered as a downhill walk on the energy landscape in conformation space
(Figure 3.2) [58]. Therefore, there have been many studies on the analogy between
evolution and thermodynamics.
Extending the interpretation of evolution by thermodynamics-like concepts, we
can clarify a view of the evolution process as an information gaining process from
the surroundings. Eigen raised a question about the “extent” and “content” of infor-
mation in biological evolution [25]. According to him, the extent of information is
related to the constrained volume of the sequence space and can be handled within
the classical information theory [48]. This is comprehended within the framework of
Shannon’s information theory. On the other hand, the content of information means
the meaning or semantic value of information, and is related to the concept of ﬁt-
ness. We must combine these two aspects of information in the same mathematical
framework.

74
T. Aita and Y. Husimi
3.1.3
Basis of Thermodynamic Concepts
Here, we discuss the basis of thermodynamic concepts that are essentially related
with the content in this chapter. First, the “universe” is divided into two parts: the
“system” and the “surroundings”. One focuses on the process including physical
and chemical changes of the system. The second law of thermodynamics states that
the system tends toward the minimal free-energy state at equilibrium. The Gibbs
free energy of the system, G, is deﬁned by G ≡H −TS, where H, T and S represent
the enthalpy, thermodynamic temperature and entropy of the system, respectively.
The “chemical potential” Gm is equivalent to the molar Gibbs free energy. Under
a constant temperature and constant external pressure, a spontaneous process of
the system gives ΔG = ΔH −TΔS ≤0. The free energy is the Lyapunov function
of the system. Furthermore, this inequality is rewritten as −ΔG/T = −ΔH/T +
ΔS ≥0, where −ΔH/T represents the thermal entropy that the system emits to the
surroundingsand −ΔG/T represents the change in total entropy of the universe. The
above inequality represents that a spontaneous process is driven in the direction in
which the total entropy of the universe increases. Thermodynamics is deeply related
with classical information theory [17, 48]. Particularly, the concept of information
is equivalent with negative entropy.
Input 
䠇 
䠉 
䠇 
䠉 
䠉 
䠇 
䠇 
䠉 
䠉 䠇 
䠉 䠇 䠇 䠇 
䠇䠉 
䠉 
䠉 
䠇 
䠇 
䠉 
䠇 䠇 
䠇 䠇 
䠉 
䠇 䠇 
䠇 䠇 
䠉 
䠉 
䠉 䠉 
䠇 䠇 
呍
呍
呍
呍
 
䠇 
䠇 
䠉 
䠉 
䠇 
Evolving system 
(initial state) 
(final state) 
pI
pH
T
,
,
the
Surroundings 
Evolving system 
Target receptor 
evo
a
evo
ln
T
K
T
W
'
 
'
Absorb! 
Output 
Discard 
呍
呍
呍
呍
 
䠇 䠇 
䠇 䠇 
䠉 
䠉 
䠉 
䠇 
呍
䠇 
䠉 
Fig. 3.1 Emergence of a speciﬁc ligand sequence with high afﬁnity to target-receptor
molecules. Through mutation and selection, the speciﬁc ligand sequence “+ −+ −+” is
found out from among all possible sequences to ﬁt the surface of the target-receptor molecules
“−+−+−”. We interpret that the speciﬁc ligand sequence absorbs the ﬁtness information
ΔW/Tevo from the surroundings, where Tevo represents the evolutionary temperature, while
Tthe represents the thermodynamic temperature. Adapted from Aita and Husimi [7].

3
Biomolecular Information Gained through In Vitro Evolution
75
3.1.4
Outline of This Chapter
In this chapter, we summarize two typical studies on the evolutionary dynamics
of in vitro evolution, which has been interpreted in terms of thermodynamics-like
concepts leading to both aspects of the information concept, its extent and its con-
tent. One is a theory for a “natural selection-type model”. That is the quasi-species
theory developed by Eigen’s group [22, 23, 25, 56]. The other is a theory of an
“artiﬁcial selection-type model”, which was developed by the authors [2, 3, 6, 7].
These studies gave a formulation for the information gaining process from the sur-
roundings. Other studies are also reviewed within the framework of the two typical
studies. In Section 3.2, we describe two different models of in vitro evolution: the
natural selection-type model and the artiﬁcial selection-type model. In Section 3.3,
the analogy between evolution and thermodynamics is described: ﬁrst we review the
previous studies related to this subject, next the results based on the two models. In
Section 3.4, the analogy is developed to the concept of information gained through
in vitro evolution.
Molecular folding 
Molecular evolution 
S
'
H
'
Surroundings 
T
H
the
'

S
'
W
'
T
W
evo
'
Energy  
landscape 
0
the
the
t
'

'

 
'

S
T
H
T
G
0
evo
evo
t
'

'
 
'
S
T
W
T
G
Fitness  
landscape 
Surroundings 
Absorb ! 
Emit ! 
Fig. 3.2 An analogy between molecular folding and molecular evolution. In molecular
folding, a folding biopolymer (e.g. protein) descends the energy landscape by emitting the
thermal entropy −ΔH/Tthe (= ΔSsur) to the surroundings. In molecular evolution, we inter-
pret that the evolving sequences climb the ﬁtness landscape by absorbing “ﬁtness informa-
tion” ΔW/Tevo (= ΔIﬁt) as the negative entropy from the surroundings, which is deﬁned in
an experimental setup. Adapted from Aita and Husimi [4, 7].

76
T. Aita and Y. Husimi
3.2
Model of In Vitro Evolution
3.2.1
Natural Selection-Type Model
Eigen proposed the quasi-species model as the natural selection-type model. This
model describes the evolutionary dynamics of the ensemble of simple self-repli-
cators in a ﬂow reactor, such as self-replicating RNA molecules [22, 23, 25]. The
genome sequence of each species of the self-replicators consists of ν sites, with
λ available symbols at each site. The number of all conceivable sequences is
n ≡λ ν. Each species (=sequence) is numbered by using a serial number s (or u)
(s,u = 1,2,··· ,n). Then, each genome sequence is mapped onto the corresponding
point in the λ-valued ν-dimensional sequence space. In the replication processes,
it is possible to replace each symbol with one of the other λ −1 symbols with a
probability of μ, that is the mutation rate μ. The mole fraction of a certain species s
at time t, denoted by xs(t), obeys the following differential equation:
dxs(t)
dt
=
n
∑
u=1
msu fu xu(t)−D(t)xs(t)
(s = 1,2,··· ,n)
(3.1)
msu ≡(1 −μ)ν−d(s,u)

μ
λ −1
d(s,u)
,
(3.2)
where fs is the ﬁtness of a species s, precisely mss fs is the replication rate constant
of s (here we neglect decomposition) and msu (for s ̸= u) is a probability of mutation
from a species u to a species s (note that ∑n
s=1msu = 1 for every u). The d(s,u) is
the Hamming distance between s and u. D(t) is the dilution rate and works to satisfy
∑n
s=1 xs(t) = 1 at every time t. Then, we can easily derive
D(t) =
n
∑
s=1
fs xs(t) = ⟨f⟩,
(3.3)
where ⟨∗⟩represents the population average of a quantity ∗. It should be noted
that the dilution rate D(t) is equal to the population average of ﬁtness, ⟨f⟩. Equa-
tions (3.1) and (3.2) mean that any species propagates cooperatively with neighbor
species in the sequence space through mutation.
3.2.2
Artiﬁcial Selection-Type Model
3.2.2.1
Fitness Landscape
The evolutionary dynamics of a ﬁnite population is dependent on local structures of
ﬁtness landscapes. We supposed the following “NK landscape” [33] in the λ-valued
ν-dimensional sequence space [3, 5]2. In this model, an arbitrary site in a sequence
interacts with other k sites. The ﬁtness W for a given sequence “A1A2 ···Aν” is
deﬁned by
2 The validity of using the NK landscape was demonstrated in [5].

3
Biomolecular Information Gained through In Vitro Evolution
77
W =
ν
∑
j=1
wj(Aj|Aj1,Aj2,··· ,Ajk),
(3.4)
where wj is the “site-ﬁtness,” i.e., a ﬁtness contribution from the jth site, and Aj
represents a particular symbol at the jth site. The value of wj is given as a function
of 1+k symbols at the jth site (Aj) and other k sites (Aj1,··· ,Ajk). The interacting
k sites { j1,··· , jk} are randomly chosen from among all of the ν −1 sites except the
jth site. Once a set of symbols {Aj1,··· ,Ajk} at these k sites is given, the value of wj
for an arbitrary symbol A j, wj(A j|Aj1,··· ,Ajk), is assigned randomly from a given
probability distribution. Here, we adopt a discrete uniform distribution in the range
[−ε,ε], where ε is a positive constant (ε > 0). Let σ2 be the variance of the uniform
distribution, then σ2 = ε2/3 for this case. On the whole, the ruggedness of the
landscape is controlled by the parameter k. In the case of k = 0, the resulting ﬁtness
landscape has a smooth surface and a single global peak. As the k-value increases,
the surface of the ﬁtness landscape becomes more rugged and many local optima
appear. We denote the ﬁtness coordinate by W. The frequency distribution of ﬁtness
over all conceivable sequences (of λ ν) is given approximately by the following
normal distribution:
Ω(W) =
λ ν
√
2πV
exp

−W2
2V

for −εν ≦W ≦εν,
(3.5)
where V is the variance of ﬁtness over all conceivable sequences in the sequence
space and given by V = σ2 ν. The average of ﬁtness over the whole sequence space
corresponds to the “foot” of the landscape, while regions where W < 0 correspond
to below sea level and are negligible for the adaptive walks that start from random
points, which are likely to be located at the foot of the landscape. Since the ﬁtness
at the global peak takes about εν, the εν corresponds to the height of the landscape
from the foot to the global peak. In this chapter, we focus on the regions from the
foot of the landscape to the global peak: 0 ≦W ≦εν.
3.2.2.2
Protocol of Adaptive Walk
In this model, the in vitro evolution process is modeled as an “adaptive walk” or
“hill-climbing” process. Suppose a single parent sequence as the walker on the ﬁt-
ness landscape, where the walker represents the evolving sequence or evolving phe-
notype/genotype molecule. The adaptive walk process is conducted by repetition of
the following mutagenesis and selection processes. Furthermore, two different se-
lection protocols are considered in parallel: one is the “sampling-screening” [2, 3, 7]
and the other is the “selective enrichment” [8].
Case 1. Sampling-screening:
First, a single parent sequence produces N mutant
sequences as offspring. In the reproduction process, d-fold point mutations occur
in each sequence randomly, that is, d (=the number of mutated sites) represents
the Hamming distance between a parent and each of its offspring. Next, the ﬁt-
ness value of each mutant is evaluated, and then the best mutant with the highest

78
T. Aita and Y. Husimi
ﬁtness among the all become a new parent in the next generation. N is the library
size of mutants to be screened in a single generation. The d is interpreted as the
step length of the walker in sequence space.
Case 2. Selective enrichment:
First, a single parent sequence produces all possi-
ble d-fold point mutants. The number of all possible d-fold point mutants derived
from a single sequence is
Nd ≡

ν
d

(λ −1)d.
(3.6)
Each of all the Nd mutants has the same occurrence frequency. Here, we assume
the population size is large enough to consider the population dynamics deter-
ministically. The resulting library is called the primary library. Subsequently,
each mutant in the primary library is ampliﬁed deterministically. The occurrence
frequency of each mutant with ﬁtness W is multiplied by the
ampliﬁcation factor = exp

 rW
kBTthe

,
(3.7)
where kB is the Boltzmann constant, Tthe represents the thermodynamic tem-
perature (Tthe = 270 ∼370[K]) and r is the number of rounds of the selective
enrichment (r = 1 ∼6). The ampliﬁcation factor (Equation (3.7)) is based on an
afﬁnity selection system such as a ligand-receptor binding system3. In this sys-
tem, W and exp(W/kBTthe) correspond to the negative binding-free energy and
association constant, respectively. Equation (3.7) (for r = 1) is also interpreted
as the Malthusian ﬁtness in biology.
Subsequently, an arbitrary mutant is randomly chosen from the resulting popula-
tion and it becomes a new parent in the next generation.
The controllable parameters N, d, Tthe and r are constant throughout the adaptive
walk. We assume d(1+k) ≪ν, where d(1+k) is the mean number of sites affected
by random d-fold point mutations. Based on the NK landscape model, after the
mutations, the d(1 + k) sites update their site-ﬁtness values.
3.3
Analogy between Evolution and Thermodynamics
3.3.1
Overview
Thermodynamic concepts connect the evolution process to information. Here, we
review studies related to the analogy between evolution and thermodynamics from
various viewpoints.
3 Here, we neglect the effects of the non-speciﬁc binding and the washing process for
simplicity.

3
Biomolecular Information Gained through In Vitro Evolution
79
Some of the previous studies introduced the concept of “free ﬁtness” that is anal-
ogous to free energy, and then proposed that evolution is driven in the direction in
which free ﬁtness increases. In their common scheme, free ﬁtness is deﬁned as
Free ﬁtness ≡Fitness+ Temperature-like parameter× Entropy,
(3.8)
where Fitness is sometimes the population average of log ﬁtness or selection co-
efﬁcient. The Temperature-like parameter is dependent on the models. For exam-
ple, concerning the natural evolution with a weak mutational effect, the theories
by Iwasa [32], Berg and L¨assig [13] and Sella and Hirsh [47] were based on the
Markovian process and detailed balance for transition probability, which means a
probability of transition from a homogeneous population occupied with a certain
species to that occupied with another species in sufﬁcient generation time. In their
scheme, the Temperature-like parameter corresponds to the inverse of the double
population size, and the Entropy is the ensemble average of the logarithm of the
occurrence frequency of each species. The special case of and inﬁnite population
corresponds to Fisher’s fundamental theorem of natural selection [28]. Recently,
Barton’s group [11, 12] extended the concept of free ﬁtness to incorporate mu-
tational effects explicitly, based on the stationary distribution of allele frequen-
cies [59]. They reviewed the studies on the relationship between statistical physics
and evolutionary biology [12]. Demetrius [18, 19] discussed the evolutionary dy-
namics of an organismic population in the “age space” in terms of the age-speciﬁc
fecundity and mortality. In his scheme, the Temperature-like parameter corresponds
to the inverse of the generation time, while the entropy is deﬁned as a measure of the
uncertainty in the age of the immediate ancestor of a randomly chosen newborn. Ao
presented the relationship between Darwinian evolution and thermodynamics from
the viewpoint of Langevin dynamics [9]. His theory describes the dynamics on po-
tential surface in “genotype frequency space”, where each coordinate axis represents
the frequency of a genotype. The concept of the free ﬁtness is a key role in this chap-
ter and will be again referred to in the natural selection-type model and the artiﬁcial
selection-type model.
Blackburne and Hirst conducted a simulation of population dynamics using sim-
ple lattice model proteins [15]. They also estimated the population using the anal-
ogy with Boltzmann distribution in thermodynamics, in which a temperature-like
parameter was empirically derived as a function of the mutation rate and selection
pressure.
Sato et al. referred to a mathematical relationship between ﬂuctuation V[X]a and
response ⟨X⟩a+Δa −⟨X⟩a in a biological system (where ⟨X⟩a and V[X]a are the av-
erage and variance of the variable X at the initial parameter value a), and demon-
strated that the relationship they found, ⟨X⟩a+Δa −⟨X⟩a ∝V[X]a × Δa, is similar to
Einstein’s relation in the ﬂuctuation-dissipation theorem in Brownian motion [43].
They conﬁrmed the relationship through an experimental observation, in which X
represents the logarithm of ﬂuorescence intensity per E. coli. cell including mutant
GFP proteins and Δa represents the synonymous mutation rate of their genes.

80
T. Aita and Y. Husimi
From the viewpoint of molecular imprinting, Pande et al. developed statistical
mechanics of protein folding and design [42], introducing the “design temperature”
Tdes, which controls the probability of the occurrence of amino acid sequences with
low energy (designed sequences) in a given canonical ensemble. They obtained a
phase diagram for model heteropolymers in a two dimensional Tdes-Tthe (Tthe is ther-
modynamic temperature) space.
3.3.2
Quasi-species
We summarized the result of the mathematical analysis of the natural selection-type
model (Equation (3.1)). In a special case of no mutations (μ = 0), Equation (3.1) is
simpliﬁed as follows:
dxs(t)
dt
= (fs −D(t))xs(t)
(s = 1,2,··· ,n),
(3.9)
with ∑n
s=1xs(t) = 1. The solution of Equation (3.9) is obtained as follows:
xs(t) =
xs(0)exp(fst)
∑n
u=1 xu(0)exp(fut)
(s = 1,2,··· ,n).
(3.10)
Let s∗be the ﬁttest species that has the maximal ﬁtness value among all n species.
In the stationary state, we observe
lim
t→∞xs(t) =
 1, if
s = s∗
0, if
s ̸= s∗
(3.11)
That is, only the ﬁttest species s∗exists in the reactor. Furthermore, according to
Equation (3.9), the ﬁrst derivative of Equation (3.3) is given by
dD(t)
dt
= ⟨f 2⟩−⟨f⟩2 ≥0,
(3.12)
where ⟨f 2⟩−⟨f⟩2 represents the population variance of ﬁtness. This means that the
dilution rate D(t)(= ⟨f⟩) is the Lyapunov function of the process. In the stationary
state,
lim
t→∞D(t) = lim
t→∞⟨f⟩= fs∗≡max{ fs}.
(3.13)
This situation is the so called “survival of the ﬁttest”. These results correspond to
Fisher’s fundamental theorem of natural selection [28].
In general cases of non-zero mutation rates (μ > 0), Equation (3.1) must be
transformed in the following manner. Considering the n × n square matrix [msu fu]
(s and u represent rows and columns, respectively), we denote the qth eigen-
value and eigenvector of this matrix by Λq and rq ≡[rq1,rq2,··· ,rqn]⊤(for q =
1,2,··· ,n), respectively, where ⊤is the transpose operation. Here, the eigenvec-
tor rq should be determined to satisfy ∑n
s=1rqs = 1. By diagonalizing the matrix
[msu fu] by the n×n square matrix R ≡[r1,r2,··· ,rn] and its inverse matrix R−1, and

3
Biomolecular Information Gained through In Vitro Evolution
81
introducing [y1(t),y2(t),··· ,yn(t)]⊤≡R−1[x1(t),x2(t),··· ,xn(t)]⊤, Equation (3.1)
is transformed to
dyq(t)
dt
= (Λq −D(t)) yq(t)
(q = 1,2,··· ,n),
(3.14)
with ∑n
q=1yq(t) = 1, where q is designated as the “quasi-species”. It is remarkable
that Equation (3.14) is the same mathematical form as Equation (3.9). Therefore,
the solution of Equation (3.14) is the same mathematical form as Equation (3.10):
yq(t) =
yq(0)exp(Λqt)
∑n
v=1 yv(0)exp(Λvt)
(q = 1,2,··· ,n).
(3.15)
It is noted that xs(t) ≥0 in Equation (3.10), while yq(t) ⪋0 in Equation (3.15).
Let q∗be the quasi-species that has the maximal eigenvalue (according to Perron-
Frobenius theorem, Λq∗> 0 and rq∗s > 0 for every s). In the stationary state, we can
observe
lim
t→∞yq(t) =

1, if
q = q∗
0, if
q ̸= q∗
(3.16)
That is, only the quasi-species q∗is realized in the reactor. The xs(t) in the stationary
state is given by
lim
t→∞xs(t) = lim
t→∞
n
∑
q=1
rqs yq(t) = rq∗s.
(3.17)
The realized eigenvector rq∗is designated as the “quasi-species distribution”, which
is caused by the mutation-selection balance. Furthermore, the dilution rate is rewrit-
ten by D(t) = ∑n
q=1Λq yq(t) = ⟨Λ⟩y, where ⟨∗⟩y ≡∑n
q=1∗× yq(t). According to
Equation (3.14), the ﬁrst derivative of D(t) is given by dD(t)/dt = ⟨Λ2⟩y −⟨Λ⟩2
y ⪋
0. This means that the dilution rate D(t)(= ⟨f⟩) is not necessarily the Lyapunov
function for the quasi-species model. In the stationary state,
lim
t→∞D(t) = lim
t→∞⟨f⟩= Λq∗≡max{Λq}.
(3.18)
That is, the population average of ﬁtness, ⟨f⟩, becomes equal to the maximal eigen-
value Λq∗.
It is important to note that the quasi-species distribution is strongly dependent on
the shape of the ﬁtness landscape ({ fs}) and mutation rate (μ). For proper land-
scapes, the quasi-species distribution shows a phase transition at several critical
points of the mutation rate. Let m be the species as the master sequence and let
⟨fs⟩s̸=m be the mean ﬁtness over all the species except m. When the mutation rate μ
exceeds a certain critical point called the “error threshold”,
μcr = ln fm −ln⟨fs⟩s̸=m
ν
(for λ = 2),
(3.19)

82
T. Aita and Y. Husimi
an “error catastrophe” or a localization-delocalization transition occurs. In the delo-
calization state, all species have the identical mole fraction.
An example of a ﬁtness landscape demonstrating a sharp localization-localization
transition is an asymmetric twin peaks consisting of a sharp high peak and a broad
low peak. When μ is very small, the quasi-species members localize at the high
peak. When μ becomes greater than some critical value (and less than the error
threshold), the quasi-species members become to localize at the broad low peak,
because the population at the broad peak is mutationally robust based on mutational
interconnectedness. The transition is very narrow for μ and shows a critical slowing
down phenomenon [30, 45]. Wilke et al called this situation the “survival of the
ﬂattest” [57].
These results can be interpreted by thermodynamics-like concepts. Mutation
causes the species to diffuse in the sequence space, while selection causes them
to converge on the local area. Therefore, the mutation rate μ corresponds to a
temperature-like parameter T. When μ = 0, the ﬁttest s∗that has the maximal ﬁtness
fs∗is realized. This is analogous to the case of T = 0 in thermodynamics, because
the thermodynamic system realizes the minimal energy state. On the other hand,
when μ > 0, the quasi-species q∗that has the maximal eigenvalue Λq∗is realized.
This is analogous to the case of the thermodynamic system realizing the minimal
free energy state. In the above mentioned asymmetric twin peak case, the localiza-
tion at the broad low peak is an analogous state to an intermediate conformation X
of a protein in the unfolding process (Native ↔X ↔Denatured). Therefore, the
eigenvalue Λq could be called the “free ﬁtness” [30].
In thermodynamics, the phase transition temperature between state A and state B
is given by Tcr = ΔH/ΔS, where ΔH and ΔS are the enthalpy change and entropy
change between A and B, respectively. In Equation (3.19), the numerator means
energy- or enthalpy-like quantity, and the denominator means entropy-like quantity
(ν = log2 2ν −log2 1). Therefore, Equation (3.19) is analogous to Tcr = ΔH/ΔS.
3.3.3
Attractor of Fitness in the Artiﬁcial Selection-Type Model
We summarized the result of the statistical analysis of the artiﬁcial selection-type
model. Denoting the ﬁtness of the walker (=parent sequence) by W, we focus on
the statistical properties of a time course of W through the hill-climbing process.
Consider that the hill-climbing starts from the foot of the landscape (W = 0). The
walker’s ﬁtness W increases exponentially and tends toward a stationary value de-
noted by W ∗, which is called the attractor. In the stationary state, the value of W
ﬂuctuates around the attractor W ∗. As a result, under extreme conditions where λ,
ν, d, N and kBTthe have large values4, the attractor W ∗is given by:
4 The conditions for Equation (3.20) are lnN ≪d(1 + k) ≪ν and 1 ≪N ≪
ν
d

(λ −1)d
(where
ν
d

(λ −1)d is the size of the “d-boundary” of any sequence). The conditions for
Equation (3.21) is kBTthe/r ≫σ

8/3. The derivations of Equation (3.20) and Equation
(3.21) are described in [5, 8].

3
Biomolecular Information Gained through In Vitro Evolution
83
W ∗= 2

V ν lnN
d(1 + k)
for sampling-screening
(3.20)
W ∗=
V
kB(Tthe/2r)
for selective enrichment.
(3.21)
V represents the variance of ﬁtness over all conceivable sequences in the sequence
space (Equation (3.5)). This stationary state is caused by the balance of the effects
of mutation, sampling and selection.
Let J be the expectation of the change in walker’s ﬁtness W after a single step of
walk. For both cases, J (= the climbing rate) is given by
J ≈−d(1 + k)
ν
(W −W∗).
(3.22)
These results are interpreted in the analogy with thermodynamics.
3.3.4
Evolutionary Boltzmann Constant and Evolutionary
Temperature
In order to interpret the evolutionary dynamics for the artiﬁcial selection-type
model, we introduce the following thermodynamics-like functions. First, we intro-
duce the “evolutionary Boltzmann constant,” kE, which is analogous to Boltzmann
constant, kB. Next, based on the global ﬁtness distribution given in Equation (3.5),
we deﬁne the “entropy” S as a function of W as follows:
S(W) ≡kE × ln Ω(W),
(3.23)
= −kEW 2
2V
+ const.
(3.24)
Following the deﬁnition of thermodynamic temperature, we deﬁne “evolutionary
temperature” Tevo as follows:
Tevo ≡−

 dS
dW

W=W ∗
−1
=
V
kEW ∗,
(3.25)
where W ∗is the attractor we deﬁned in the previous section. Then, W ∗is also given
by
W ∗=
V
kETevo
.
(3.26)
By comparing Equation (3.20) with Equation (3.26) and comparing Equation (3.21)
with Equation (3.26), we obtain

84
T. Aita and Y. Husimi
kETevo = kL ×

d
4lnN
for sampling-screening
(3.27)
kETevo = kB × Tthe
2r
for selective enrichment,
(3.28)
where kL is deﬁned as
kL ≡σ
√
1 + k
(3.29)
and designated as the “landscape constant”. The meaning of kL is the standard de-
viation of a change in ﬁtness for a unit Hamming distance. Then, kL indicates the
degree of ruggedness of the landscape.
It should be noted that, for each of the above equations, dividing the right-hand
side into kE and Tevo is not so important in the essence of this scheme and should be
done arbitrarily. However, it is clear that the former parts consist of the natural con-
stants (kL and kB) inherent in the evolving system (including the ﬁtness landscape),
while the latter parts consist of the controllable parameters (d, N, Tthe and r) in the
surroundings. Therefore, we can divide as follows:
kE ≡kL,
Tevo ≡

d
4lnN
for sampling-screening
(3.30)
kE ≡kB,
Tevo ≡Tthe
2r
for selective enrichment.
(3.31)
In Equation (3.30), the d indicates the degree of diffusion in the sequence space
by random mutation, while lnN indicates the degree of convergence of sequence
diversity by selection. Tevo is the ratio of these conﬂicting effects.
According to thermodynamics of protein folding, the most probable energy of a
canonical ensemble is given by an equation similar to Equation (3.26) (e.g. Equa-
tion (11) in Wolynes and Luthey-Schulten [58]). Therefore, we can say that kE and
Tevo are analogous to the Boltzmann constant and thermodynamic temperature of
the thermal bath, respectively. Beyond the analogy, Equation (3.31) connects the
evolutionary dynamics and thermodynamics in the simple form [42].
3.3.5
Evolutionary Potential, Free Fitness and Evolutionary
Force
We deﬁne the “evolutionary potential,” φ, which is analogous to the chemical po-
tential, as follows:
φ(W) ≡W + Tevo × S(W).
(3.32)
When the number of walkers (=parent sequences) is M, we deﬁne the “free ﬁt-
ness G”5 by G ≡φ × M [7]. By substituting Equation (3.24) into Equation (3.32),
5 In this scheme, the evolutionary potential φ plays a more signiﬁcant and essential role than
the free ﬁtness.

3
Biomolecular Information Gained through In Vitro Evolution
85
φ is rewritten as the following convex function which takes the maximal values at
W = W ∗:
φ(W) = −kETevo
2V

W −
V
kETevo
2
+ const
(3.33)
= −kETevo
2V
(W −W∗)2 + const,
(3.34)
(by using Equation (3.26)). Furthermore, the evolutionary potential φ and free ﬁt-
ness G is the Lyapunov functions of the evolution process (proof is shown in the
next section). Namely, the in vitro evolution is driven in the direction in which φ
and G increase. In addition to these quantities, we deﬁne the “evolutionary force,”
X, which is analogous to the generalized force, by
X(W) ≡
d
dW
φ(W)
Tevo
(3.35)
= −kE
V (W −W ∗).
(3.36)
Substituting Equation (3.32) into Equation (3.35), the evolutionary force X is de-
composed into the “ﬁtness force” Xﬁt and the “entropy force” Xent: X = Xﬁt + Xent,
where
Xﬁt ≡
1
Tevo
and
Xent ≡dS(W)
dW
= −kE
V W.
(3.37)
Xﬁt is caused by a selection event and pushes the walkers upward, while Xent is
caused by a mutation event and pushes the walkers downward. The mutation-
selection-random drift balance occurs when Xﬁt and Xent cancel each other out.
Based on the deﬁnition we mentioned above, we can describe the dynamics of the
adaptive walk as follows (see Figure 3.3). Driven by the evolutionary force X, the
walkers tend to achieve the stationary state with the maximal evolutionary potential
φ, in which the ﬁtness force Xﬁt and the entropy force Xent cancel each other out. The
evolutionary force X depends strongly on the evolutionary temperature Tevo. Here,
consider the walkers are located at the middle point on the landscape. If Tevo = ∞,
then W ∗lies at the foot of the landscape and a negative force (X < 0) acts on the
walkers so the walkers are pushed downward. In this case, the maximal entropy state
is realized. As Tevo becomes lower, the W ∗becomes higher up near the top of the
landscape and a positive force (X > 0) acts on the walkers so the walkers are pushed
upward. In this case, the (nearly) maximal ﬁtness state is realized. If Tevo = 0, the
walkers cannot move in the sequence space, and evolution does not occur.
3.3.6
Fitness Flux and Einstein’s Relation-Like Formula
We consider the hill-climbing rate for a single step of walk. Let ΔW be the change
in walker’s ﬁtness W after a single step of walk (top of Figure 3.4). The expectation
of ΔW is denoted by J (≡E[ΔW]). For both of the two cases (sampling-screening

86
T. Aita and Y. Husimi
S
ΦTevo, GTevo
ΦTevo, GTevo
X
X
low Tevo
high Tevo
0
Peak
W
W
W
Fitness
Thermodynamicslike functions
Fig. 3.3 Interpretation of evolutionary dynamics by thermodynamics-like concepts. The
solid line represents the entropy S, while the dashed lines represent φ/Tevo or G/Tevo, where
φ and G are the evolutionary potential and free ﬁtness, respectively. The right blue (left red)
dashed line is for the case of a low (high) evolutionary temperature Tevo. W ∗represents the
stationary point, in which φ and G take the maximum values under the given Tevo. The black
arrow represents the evolutionary force X that acts on the walker with the current ﬁtness W.
Details are described in the text. Adapted from Aita and Husimi [4, 7].
and selective enrichment), J is given by Equation (3.22). By using Equation (3.36),
Equation (3.22) is rewritten as
J ≈LX,
L = D
kE
,
(3.38)
where L is the “linear transport coefﬁcient” and D ≡k2
Ld is the “diffusion coefﬁ-
cient” of the walker’s ﬁtness W along the ﬁtness coordinate when the walker per-
forms a random walk in the sequence space6. The random walk occurs when N = 1
because of no selection pressure (Xﬁt = 0). Equation (3.38) is analogous to Einstein’s
relation in Brownian motion [26].
Sato et al. found a similar scheme to Equation (3.38) for the relationship be-
tween ﬂuctuation and response in a biological system [43]. Iguchi has tried to ex-
tend Equation (3.38) to a case of coevolving biopolymers in a similar framework of
6 Consider that all possible d-fold point mutants are generated from a parent sequence. The
variance of the probability density of the ﬁtnesses over all the mutants is approximately
given by k2
Ld (≡D).

3
Biomolecular Information Gained through In Vitro Evolution
87
the Onsager’s reciprocal relations [31]. The linear relationship shown in Equation
(3.38) is similar to Fisher’s fundamental theorem of natural selection [28], although
the theorem holds in cases of no mutational events. Yang et al. [60] experimentally
tested the theorem through in vitro evolution of Mnt repressor-binding DNA, and
obtained the correlation between evolution speed and sequence diversity.
3.4
Information Gained through In Vitro Evolution
3.4.1
Fitness Fluctuation and Energy Fluctuation
First, we discuss sampling-screening. Since exploration on a ﬁtness landscape is
done by random sampling of ﬁnite mutants from among the underlying mutant pop-
ulation, the ﬁtness change ΔW after a single step of walk is a stochastic quantity
and its probability density is described by the theory of extreme value statistics. Let
Σﬁt be the standard deviation of ΔW (Σﬁt ≡SD[ΔW]). kETevo is related with Σﬁt by
kETevo ≈Σﬁt
2
for sampling-screening.
(3.39)
W 
J
Probability density      
after a step of walk 
H
'

Change in enthalpy 
Fitness 
Evolution 
Thermo- 
dynamics 
T
H
S
the
sur
'

 
'
T
W
I
evo
fit
'
 
'
T
k
evo
E
fit
2u
 
6
E
/
,
k
D
L
X
L
J
 
u
 

W
'
6
 
fit
evo
E
5.0
T
k
T
W
I
evo
fit
'
 
'I
T
k
the
B
Fig. 3.4 (Upper) A probability density of the change in walker’s ﬁtness after a single
step of walk from a certain ﬁtness W, as for the case of the sampling-screening. J and
Σﬁt represent the expectation and standard deviation of the change, respectively. (Middle)
The ﬁtness-information change, ΔIﬁt, is the ﬁtness-change digitized by the ﬂuctuation size,
kETevo = Σﬁt/2. (Bottom) The concept of thermal entropy, ΔSsur = −ΔH/Tevo, which is the
enthalpy-change digitized by the ﬂuctuation size of thermal energy per degree of freedom,
kBTthe. Adapted from Aita and Husimi [4, 7].

88
T. Aita and Y. Husimi
fit
evo
I
T
W
'
 
'
Sha
I
S
'
 
'

Sequence space (Entropy S) 
Fitness landscape 
T
W
evo
)
0
(
S
)
(W
S
)
(
fit W
I
)
(
Sha W
I
Fig. 3.5 Schematic representation of the ﬁtness information Iﬁt and Shannon informa-
tion ISha. The circular cone represents a ﬁtness landscape schematically. The height repre-
sents the ﬁtness W divided by Tevo, while the area of the cross section represents the entropy
S(W) ≡kE ×ln Ω(W), where Ω(W) is the number of all sequences with a given ﬁtness W.
Iﬁt(W) is deﬁned as the change of W/Tevo from the foot of the landscape, while ISha(W) is
deﬁned as the negative change of S from the foot. ΔIﬁt and ΔISha are the changes of these
quantities after a single step of walk. Adapted from Aita and Husimi [4, 7].
This equation shows that kETevo is approximately equivalent to the “ﬁtness
ﬂuctuation” Σﬁt.
Next, we discuss selective enrichment. We introduce the molar energy Em of an
ensemble of the evolving molecules of Avogadro’s number at a thermodynamic tem-
perature Tthe. Suppose that all the molecules realize a canonical ensemble, in which
kBTthe is related to the “energy ﬂuctuation”. According to thermo-statistical me-
chanics theory, the standard deviation of Em, denoted by Σene (≡SD[Em]), is given
by the energy-ﬂuctuation formula 7. Using this formula combined with Equation
(3.28), we obtain
kETevo ≈Σene
r√2 f
for selective enrichment,
(3.40)
where f is the degree of freedom of the molecules of Avogadro’s number.
Then we can say that the ﬁtness ﬂuctuation (Σﬁt) originates from the events that
the evolving sequences (genotypes) move in sequence space, while the energy ﬂuc-
tuation (Σene) originates from the events that the evolving phenotypic molecules
move in physical space.
7 Σene = kBTthe ×

f /2.

3
Biomolecular Information Gained through In Vitro Evolution
89
3.4.2
Biomolecular Information
Suppose an adaptive walk from the foot of the landscape (W = 0) up to the stationary
state (W = W ∗). Here, using entropy S in Equation (3.23) and evolutionary potential
φ in Equation (3.32), we introduce the following three quantities as functions of
walker’s ﬁtness W:
Iﬁt(W) ≡W
Tevo
(3.41)
ISha(W) ≡S(0)−S(W)
(3.42)
Ibio(W) ≡φ(W)
Tevo
−φ(0)
Tevo
(3.43)
= Iﬁt(W)−ISha(W),
(3.44)
and let ΔIﬁt, ΔISha and ΔIbio be the changes in Iﬁt, ISha and Ibio, respectively, after
a single step of a walk (Figure 3.5). Since Equation (3.42) means the change in
entropy S between an initial state and a certain state with ﬁtness W (Figure 3.5), ISha
is interpreted as the “Shannon information” [48].
On the other hand, from Equation (3.39) and Equation (3.40), the meaning of
ΔIﬁt(= ΔW/Tevo) is as follows:
ΔIﬁt
kE
≈ΔW
Σﬁt
× 2
for sampling-screening
(3.45)
ΔIﬁt
kE
≈ΔW
Σene
× r

2 f
for selective enrichment.
(3.46)
As can be seen in the above equations, ΔIﬁt is the ﬁtness-change digitized by the
ﬁtness ﬂuctuation size Σﬁt or energy ﬂuctuation size Σene (in the middle of Fig-
ure 3.4). Here, the analog-to-digital conversion is realized as the signiﬁcant ﬁgures
of the ﬁtness-change observed by the walker with the observation error Σ. This is
analogous to the thermal entropy change in the surroundings, −ΔH/Tthe, when a
system emits the heat −ΔH to the surroundings (bottom of Figure 3.4) [10]. Ac-
cording to the analogy with thermodynamics, we can interpret ΔIﬁt(= ΔW/Tevo) as
the negative entropy that the evolving system absorbs from the surroundings (Fig-
ure 3.2 right). Here, the surroundings mean the experimental setup (e.g. a column of
afﬁnity-chromatography) around the biopolymer as an evolving entity (Figure 3.1).
We designate Iﬁt as the “ﬁtness information”. We can say that the evolving entity
gains the ﬁtness information from the surroundings (Figure 3.1 and 3.2).
The expectation of ΔIbio is given by
E[ΔIbio] = JX ≈LX2 ≥0.
(3.47)
Equation (3.47) proves the theorem that Ibio (or φ) is a Lyapunov function of the evo-
lution process. Therefore, we conclude that the evolution is driven in the direction in
which Ibio increases, and then we designate Ibio as the “biomolecular information”
gained through in vitro evolution.

90
T. Aita and Y. Husimi
3.4.3
Information-Gain Formula
Based on the classical concept of information [17, 48], we consider the information
gained through a single step of the selection process. We denote this information
gain by ΔIsel. ΔIsel is deﬁned by the following change in classical entropy after a
single step of walk:
ΔIsel ≡kE lnN −kEln1 = kE lnN
for sampling-screening
(3.48)
ΔIsel ≡kE
Nd
∑
s=1
−p0(s)ln p0(s)−kE
Nd
∑
s=1
−p1(s)ln p1(s)
for selective enrichment,
(3.49)
where s (s = 1 ∼Nd) represents an arbitrary mutant among all conceivable d-fold
point mutants of a parent sequence, and Nd is given by Equation (3.6). The p0(s) and
p1(s) represent the occurrence probability of the sequence s in the mutant population
before selective enrichment and that after selective enrichment, respectively, with
p0(s) = 1
Nd
and
p1(s) =
exp(rW(s)/kBTthe)
∑Nd
s=1 exp(rW(s)/kBTthe)
,
(3.50)
where W(s) is the ﬁtness of the sequence s.
Interestingly, for both cases, the Iﬁt, ISha and Ibio at the attractor W = W ∗are
related with ΔIsel by
Ibio(W ∗) = ISha(W ∗) = Iﬁt(W ∗)
2
(3.51)
=
V
2kET 2evo
≈t∗× ΔIsel,
(3.52)
where t∗represents the mean generation (or mean step number) from the foot of the
landscape up to the stationary state. Precisely, the t∗is deﬁned as a characteristic
generation that the expectation of the walker’s ﬁtness becomes equal toW ∗(1−e−2).
The t∗is approximately given by t∗≈2ν/d(1+k). Equation (3.52) is reasonable in
that Ibio in the stationary state is approximately equivalent to the sum of the informa-
tion gained by the selection process (ΔIsel) over generations (t∗) up to the stationary
state. Figure 3.6 shows the relationship among Ibio, Iﬁt, ISha and ΔIsel gained through
an adaptive walk process.
The analogy between the concepts in in vitro evolution and those in thermo-
dynamics is compiled in Table 3.1. Additionally, in Table 3.2, we show a com-
parison between the two different selection protocols: the sampling-screening and
the selective enrichment. For the description in the two tables, the protocol of the
sampling-screening is more generalized as follows: the adaptive walk is performed
by M walkers as parent sequences, which are selected as the 1st-Mth ﬁttest mutants
from among the N offspring [7].

3
Biomolecular Information Gained through In Vitro Evolution
91
Table 3.1 An analogy between thermodynamics and in vitro evolution
Thermodynamics
In vitro Evolution
Number of moles: M
Number of walkers: M
Molar energy or enthalpy: Em,Hm
Mean ﬁtness of walkers: W
Boltzmann constant: kB
Evolutionary Boltzmann constant: kE
Molar entropy: Sm ≡kB lnΩ
Walker’s entropy: S ≡kE lnΩ
Temperature: Tthe ≡∂Em/∂Sm
Evolutionary temperature: Tevo ≡−dW/dS
Chemical potential: Gm ≡Hm −Tthe Sm
Evolutionary potential: φ ≡W +Tevo S
Free energy: G ≡Gm ×M
Free ﬁtness: G ≡φ ×M
Generalized force: X ≡d(Gm/Tthe)/dx
Evolutionary force: X ≡d(φ/Tevo)/dW
Generalized ﬂux: J
Fitness ﬂux: J ≡E[ΔW]
J ≈LX
J ≈LX
Diffusion coefﬁcient: D
Diffusion coefﬁcient: D ≡k2
Ld/M
Einstein relation: L = MD/kB
L = MD/kE
Energy ﬂuctuation:
Fitness ﬂuctuationa):
Σene ≡SD[Em] ∝kBTthe
Σﬁt ≡SD[ΔW] ∝kETevo
ΔSsystem/M = ΔSm
Shannon information gain : ΔISha = −ΔS
ΔSsurroundings/M = −ΔHm/Tthe
Fitness information gain: ΔIﬁt = ΔW/Tevo
ΔSuniverse/M = −ΔGm/Tthe
Biomolecular information gain: ΔIbio = Δφ/Tevo
ΔSuniverse = ΔSsurroundings +ΔSsystem
ΔIbio = ΔIﬁt −ΔISha
a): For the case of the sampling-screening. As for the protocol of the sampling-screening,
the adaptive walk is performed by M walkers as parent sequences, which are selected as the
1st-Mth ﬁttest mutants from among the N offspring. Adapted from Aita and Husimi [4, 7].
Table 3.2 A comparison between two different selection protocols: the sampling-screening
and the selective enrichment
Selection scheme
Sampling-screeninga)
Selective enrichmentb)
Evolutionary Boltzmann constant:
Landscape constant:
Boltzmann constant:
kE
kL ≡σ
√
1+k
kB
Evolutionary temperature:
Tevo

d/4ln(N/M)
Tthe/2r
Biophysical meaningc) of
Fitness ﬂuctuation:
Energy ﬂuctuation:
kETevo
SD[ΔW]×(
√
M +1)/4
SD[E]/r√2f
ΔIsel/kE
lnN −lnM
−∑Nd
s=1 p0(s)ln p0(s)
+∑Nd
s=1 p1(s)ln p1(s)
a): Random sampling of N mutants from a mutant library and screening of the best M
mutants from among the N mutants. b): Each mutant with ﬁtness W is ampliﬁed by the
Boltzmann factor exp(rW/kBTthe), where r is the number of rounds of the selective
enrichment.

92
T. Aita and Y. Husimi
3.4.4
Extent and Content of Information
According to Eigen [25], the extent of information is related to the constrained vol-
ume of the sequence space. Therefore, we explicitly deﬁne the “extent of informa-
tion” in in vitro evolution in the following. Let ps be the probability (or frequency)
of occurrence of sequence s in a population. The entropy for this state is given by
S = −
λ ν
∑
s=1
ps log ps,
(3.53)
while the maximum entropy is given by Smax = ν logλ, which is for the case where
every sequence in the sequence space occurs with the same probability of ps =
1/λ ν. Particularly, Smax is called the “source entropy”. The extent of information is
deﬁned as
Iextent ≡Smax −S
(3.54)
(Figure 3.7) [16, 17]. Several concepts of the “amount of genetic information” [35],
“genomic complexity” [1], Rsequence [34, 44], “functional information” [53], “func-
tional sequence complexity” [21] and ISha (Equation (3.42)) can be classiﬁed to
Iextent. For example, Szostak introduced the “functional information”, which is de-
ﬁned as −log2 of the fraction of functional sequences that have ﬁtness values (ac-
tivity of a biopolymer) greater than a speciﬁed value [53]. For example, suppose
all possible RNA sequences of 470 and the fraction of functional sequences among
0
Peak
W Tevo
WTevo
ISha
I fit
Ibio
WTevo
S
WTevo
ΦTevo
S
ΦTevo
t  Isel
t  Isel
2 t  Isel
Fig. 3.6 Information gained through the adaptive walk process. The solid curve and
dashed curve represent the entropy S and φ/Tevo as functions of W/Tevo, respectively. Each
short arrow along these curves represents the expected change after a single step of the walk.
Ibio(W) ≡φ(W)/Tevo−φ(0)/Tevo. ISha(W) ≡S(0)−S(W). Iﬁt(W) ≡W/Tevo. At the attractor
W ∗, Ibio = ISha = Iﬁt/2. Adapted from Aita and Husimi [2, 8].

3
Biomolecular Information Gained through In Vitro Evolution
93
them is 10−11, the functional information in this case is 37 bit compared with 140
bit to specify a unique 70-mer sequence. He suggested the importance of the activity
- functional information relationship, which affects the evolvability of the biopoly-
mer. In terms of Iextent, [7] discussed the energetic cost and entropic cost for the most
efﬁcient search algorithm for several types of ﬁtness landscapes, and concluded that
the sum of the two costs is approximately equal to Smax = ν logλ in any cases.
On the other hand, the content of information means the “meaning (=semantic
value) of the message” and the “effectiveness (=pragmatic value) of the message”,
and it is related with the concept of ﬁtness. Weaver commented three levels of com-
munication problems: Level A (technical problem), level B (semantic problem) and
level C (effectiveness problem) [48]. He noticed that Shannon’s communication or
information theory treated only level A, which is independent of value or content of
the messages. This issue is discussed in the following two subsections.
3.4.5
Fitness Information
For adaptation and existence under given conditions, the evolving biopolymers gain
high ﬁtnesses from the surroundings. We interpret that the ﬁtness information Iﬁt
deﬁned in Equation (3.41) is a measure of the content of information. For exam-
ple, concerning the emergence of a speciﬁc ligand monomeric sequence with high
afﬁnity to target-receptor molecules (see Figure 3.1), as is mentioned in Section
3.1, the emerging ligands gain Iﬁt from the receptor under experimental conditions.
In this case, ﬁtness should be deﬁned as the natural logarithm of the association
What we know 
What we do not know 
Maximum Uncertainty 
O
Qlog
max  
S
D
O
D
D
p
p
S
¦
 

 
1
1
log
s
s
s
p
p
S
¦
 

 
Q
O
1
log
0
min  
S
Fig. 3.7 Schematic diagram representing the meaning of Shannon’s entropy in its meaning
as “extent” of information. In S1, pα is the probability of appearance of a symbol of class α
(e.g. amino acid residues); the sum is taken over all λ classes of symbols. In S, ps denotes
the probability of appearance of a certain sequence s. Here the sum has to be taken over
all λ ν possible sequences of length ν. S takes into account all possible long-range symbol
interactions. In a protein chain a given symbol might be in interaction with any other symbol
via folding of the chain. Adapted from Eigen [25].

94
T. Aita and Y. Husimi
constant between the ligand and the receptor, i.e. W ≡lnKa. The value of the con-
tent of information is quantiﬁed by dividing a ﬁtness change, Δ lnKa, by evolution-
ary temperature Tevo. For the sampling-screening, it is done by scaling Δ lnKa by
the ﬁtness ﬂuctuation for a single step of walk, SD[Δ lnKa]. By following this oper-
ation, the ﬁtness can be handled within the same level of Shannon information, as
is shown in Equation (3.44).
Similarly, the concept of ﬁtness information can be applied to the genetic-drift
model [13, 32, 47] mentioned in Section 3.3. This model is based on the strong
genetic-drift effect with weak mutational effect in a ﬁnite population. In Equation
(3.8), Fitness corresponds to the population average of the selection coefﬁcient,
⟨selection coefﬁcient⟩, and the Temperature-like parameter corresponds to the in-
verse of the double population size, 1/2N. The 1/4N is known as a critical value of
the selection coefﬁcient between selective neutrality and selective advantage [36].
That is, 1/4N ∼1/2N can be regarded as a resolving power of the selection coef-
ﬁcient. Therefore, the quantity of ⟨selection coefﬁcient⟩divided by 1/2N is similar
to the ﬁtness information mentioned above.
In vitro evolution of artiﬁcial selection-type (or directed evolution), the functional
property of the evolving biopolymers, that is, its ﬁtness is regarded as a meaning of
the message in a monomeric sequence. Thus, the ﬁtness information is a measure
of the semantic value of information (level B). The pragmatic value of informa-
tion (level C) depends on the utilization of the biopolymers by the experimenter of
directed evolution, and beyond the scope of our analysis.
On the other hand, in vitro evolution of natural selection-type, the ﬁtness is the
reproduction rate constant and the evolving biopolymers effectively reproduce by
themselves. Thus, the pragmatic value of information corresponds to the content of
information (the semantics is in a black box in this case), and the effectiveness of
the messages is measured by the results of reproduction based on the ﬁtnesses. An
example of this measure is introduced in the next subsection.
3.4.6
Pragmatic Information
Assuming that the pragmatic value of information stems from its usefulness in mak-
ing an informed decision, Weinberger proposed “pragmatic information”, which
quantiﬁes the impact of a message on the receiver’s actions [56]. His theory is based
on a communication system consisting of a “decision maker” and an “effector”.
Figure 3.8 shows a conceptual framework for pragmatic information.
Suppose that the decision maker, in some current state S , receives a set of
M messages (m = 1,2,3,··· ,M ) and chooses a message m among the set with
the probability of ϕm. Subsequently, based on the practical meaning of the chosen
message m, the effector assigns a probability value to each of the N outcomes
(o = 1,2,3,··· ,N ). The probability of an outcome o without any message is given
by qo, and the conditional probability of an outcome o with a message m is given by
Po|m. The pragmatic information of the message ensemble is deﬁned by

3
Biomolecular Information Gained through In Vitro Evolution
95
Ipra ≡
M
∑
m=1
ϕm
N
∑
o=1
Po|m log2

Po|m
qo

.
(3.55)
Therefore, the pragmatic information is the average of the relative entropy between
{Po|m} and {qo} over the message ensemble.
Weinberger demonstrated the pragmatic information is a global Lyapunov func-
tion for the quasi-species model (Section 3.2.1). Here, the environment (= setup of
the ﬂow reactor) effectively decides the ﬁtness of phenotype corresponding to each
given genotype, where a phenotype’s ﬁtness is deﬁned to be its reproduction rate.
At each time t, the environment receives “messages” about the ﬁtness of a particu-
lar replicator via the number of copies of that replicator’s genome, where the only
messages received are measurements at various times. In Equation (3.55), M = 1
and then ϕm = 1, and an outcome o corresponds to a species s. Prior to receipt of
the messages, the initial probability of selecting a species s at random from the sys-
tem is qs = xs(0). The probability of selecting a species s at subsequent time t is
Ps|m = xs(t). Then, the pragmatic information for the quasi-species model is given
by
Ipra =
n
∑
s=1
xs(t) log2

 xs(t)
xs(0)

.
(3.56)
Regardless of the arbitrary initial distribution, {xs(0)}, dIpra/dt > 0 holds for all
ﬁnite times. The pragmatic information is generated through the process of evolu-
tion for the quasi-species. In Table 3.3, we compiled the list of several aspects of
information introduced in this chapter.
Table 3.3 List of several aspects of information introduced in this chapter
Extent of information Content of information
Lyapunov
Iextent(≡Smax −S)
Semantic
Pragmatic
function
value
value
Natural selection-type
Iextent
?
Ipra
Ipra
Artiﬁcial selection-type
ISha
Iﬁt
?
Ibio(≡Iﬁt −ISha)
The motivation of establishing pragmatic information is very sound, however, we
are uncertain whether Equation (3.56) reﬂects the effects of absolute ﬁtness values
on the resulting probability distribution {xs(t)}. In evolution as the ﬁtness gaining
process, the absolute ﬁtness value that the evolving biopolymer stores seems es-
sential for its pragmatic value. For example, consider two ﬁtness landscapes with
a common shape but different absolute heights and the quasi-species on each land-
scape. We can expect that the resulting probability distribution of the quasi-species
seems to be identical with each other. However, the absolute ﬁtness values that the
quasi-species store are different from each other.

96
T. Aita and Y. Husimi
Receiver Decision 
Maker 
Effector 
Messages 
m=1,2,3,,M 
Selected 
message 
m 
Outcome 
o 
1 
2 
N 
Probability 
without  
message 
qo 
Probability 
with  
message 
Po|m 
q1 
q2 
qN 
P1|m 
P2|m 
PN|m 
Environmental noise 
呍
呍
呍
呍
 
呍
呍
呍
呍
 
呍
呍
呍
呍
 
Noise 
(in state S) 
m
M
Fig. 3.8 Conceptual framework for pragmatic information. Adapted from Weinberger [56]
and Aita Husimi [7].
3.5
Conclusion
As an analogy between in vitro evolution and thermodynamics, some studies intro-
duced the concept of “free ﬁtness” which is analogous to free energy, and then
proposed that evolution is driven in the direction in which the free ﬁtness in-
creases. Although the mathematical deﬁnition of the free ﬁtness is slightly dif-
ferent by their evolution models, in their common view, the free ﬁtness is given
as Free ﬁtness ≡Fitness + Temperature-like parameter× Entropy, where Fitness is
sometimes population average of log ﬁtness or selection coefﬁcient. Particularly, the
Temperature-like parameter is dependent on the models. For example, it is given as
a function of population size in several studies, or given as a function of popula-
tion size (library size) and mutation rate (mutation distance) in other studies. The
mathematical deﬁnition of the free ﬁtness remains to be uniﬁed.
In a thermodynamic system, a spontaneous process is driven in the direction in
which the total entropy of the universe increases. Namely, under a constant temper-
ature and constant external pressure, −ΔG/Tthe = −ΔH/Tthe + ΔS ≥0 (G: Gibbs
free energy of the system; Tthe: thermodynamic temperature; H: enthalpy of the sys-
tem; S: entropy of the system). The quantities −ΔH/Tthe and −ΔG/Tthe represent
the thermal entropy that the system emits to the surroundings and the change in total
entropy of the universe, respectively. Then, returning to in vitro evolution, we focus
on the novel quantity of Fitness divided by Temperature-like parameter, and regard
this quantity as the content of information, while we regard Entropy as the extent
of information. Namely, the evolving biopolymer stores the extent and content of
information through the evolution process (Table 3.3).
The extent of information is related to the constrained volume of the sequence
space and is deﬁned as Iextent ≡Smax −S (Equation (3.54)). This is comprehended
within the framework of the Shannon’s information theory. Therefore, we des-
ignated Iextent as the Shannon information ISha in our mathematical framework
(Equation (3.42)).

3
Biomolecular Information Gained through In Vitro Evolution
97
On the other hand, the content of information is a controversial issue. In our the-
ory based on Kauffman’s NK landscape, we introduced the “ﬁtness information” as
a measure of the content of information. The ﬁtness information Iﬁt is deﬁned by di-
viding the ﬁtness W by evolutionary temperature Tevo (Equation (3.41)). Particularly,
for the sampling-screening type, the quantity kETevo (kE ≡the “evolutionary Boltz-
mann constant”) is nearly equal to the ﬁtness ﬂuctuation for a single step of walk,
SD[ΔW] (≡the standard deviation of a ﬁtness change ΔW for a single step of walk)
(Equation (3.39)). Then, we can interpret that the ﬁtness information represents the
scaled ﬁtness by the ﬁtness ﬂuctuation SD[ΔW]. Furthermore, the “biomolecular in-
formation” Ibio is deﬁned by dividing the evolutionary potential φ (Equation (3.32))
by evolutionary temperature Tevo (Equation (3.43)), and then consists of the con-
tent (Iﬁt) and extent (ISha) of information (Equation (3.44) and Figure 3.5). Ibio is a
Lyapunov function of the in vitro evolution process (Equation (3.47)).
From the viewpoint of the effectiveness of messages (=information) on the
receiver’s actions, Weinberger introduced pragmatic information Ipra (Equation
(3.55)), which is deﬁned as the mean relative entropy between probability distri-
bution of actions without and with messages. The pragmatic information he deﬁned
for the quasi-species model is a Lyapunov function. While the motivation of estab-
lishing the pragmatic information is very sound, we can not properly evaluate the
validity of his deﬁnition (Equation (3.56)).
In addition, these concepts should be related with the dissipative structure con-
cept in nonequilibrium thermodynamics, especially, thermodynamic entropy pro-
duction in the evolving system and the surroundings (see Nicolis and Prigogine [41]
or Smith [49, 50, 51].
References
[1] Adami, C., Ofria, C., Collier, T.C.: Evolution of biological complexity. Proc. Natl. Acad.
Sci. USA 97, 4463–4468 (2000)
[2] Aita, T., Morinaga, S., Husimi, Y.: Thermodynamical interpretation of evolutionary dy-
namics on a ﬁtness landscape in an evolution reactor, I. Bull. Math. Biol. 66, 1371–1403
(2004)
[3] Aita, T., Morinaga, S., Husimi, Y.: Thermodynamical interpretation of evolutionary dy-
namics on a ﬁtness landscape in an evolution reactor, II. Bull. Math. Biol. 66, 1371–
1403 (2005)
[4] Aita, T., Husimi, Y.: An interpretation of evolutionary dynamics in in vitro molecular
evolution from thermodynamical and informational viewpoint. Seibutsu Butsuri (Bio-
physics) 46, 137–143 (2006) (in Japanese with English abstracts)
[5] Aita, T., Hayashi, Y., Toyota, H., Husimi, Y., Urabe, I., Yomo, T.: Extracting character-
istic properties of ﬁtness landscape from in vitro molecular evolution: A case study on
infectivity of fd phage to E.coli. J. Theor. Biol. 246, 538–550 (2007)
[6] Aita, T.: A trade-off relationship between energetic cost and entropic cost for in vitro
evolution. Biosystems 101, 194–199 (2010)
[7] Aita, T., Husimi, Y.: Biomolecular information gained through in vitro evolution. Bio-
phys. Rev. 2, 1–11 (2010)

98
T. Aita and Y. Husimi
[8] Aita, T., Husimi, Y.: Biophysical connection between evolutionary dynamics and ther-
modynamics in vitro evolution. in vitro 294, 122–129 (2012)
[9] Ao, P.: Emerging of stochastic dynamical equalities and steady state thermodynam-
ics from Darwinian dynamics. Communications in Theoretical Physics 49, 1073–1090
(2008)
[10] Atkins, P.W.: Physical Chemistry. Oxford University Press, Oxford (1978)
[11] Barton, N.H., Coe, J.: On the application of statistical physics to evolutionary biology.
J. Theor. Biol. 259, 317–324 (2009)
[12] Barton, N.H., de Vladar, H.P.: Statistical mechanics and the evolution of polygenic
quantitative traits. Genetics 181, 997–1011 (2009)
[13] Berg, J., Willmann, S., L¨assig, M.: Adaptive evolution of transcription factor binding
sites. BMC Evol. Biol. 4, 42-1-12 (2004)
[14] Biebricher, C.K., Eigen, M., Luce, R.: Product analysis of RNA generated de-novo by
phage Q-beta replicase. J. Mol. Biol. 148, 369–390 (1981)
[15] Blackburne, B.P., Hirst, J.D.: Population dynamics simulations of functional model pro-
teins. J. Chemical Physics 123, 154907 (2005)
[16] Brillouin, L.: Negentropy principle of information. J. of Applied Physics 24, 1152–1163
(1953)
[17] Brillouin, L.: Science and Information Theory. Academic Press, New York (1956)
[18] Demetrius, L.: Directionality principles in thermodynamics and evolution. Proc. Natl.
Acad. Sci. USA 94, 3491–3498 (1997)
[19] Demetrius, L.: Thermodynamics and evolution. J. Theor. Biol. 206, 1–16 (2000)
[20] de Vladar, H.P., Barton, N.H.: The contribution of statistical physics to evolutionary
biology. Trends Ecol. Evol. 26, 424–432 (2011)
[21] Durston, K.K., Chiu, D.K., Abel, D.L., Trevors, J.T.: Measuring the functional sequence
complexity of proteins. Theor. Biol. Med. Model. 4, 47-1-14 (2007)
[22] Eigen, M.: Self-organization of matter and the evolution of biological macromolecules.
Naturwissenschaften 58, 465–523 (1971)
[23] Eigen, M., Schuster, P.: The Hypercycle. Springer, Berlin (1979)
[24] Eigen, M., Gardiner, W.: Evolutionary Molecular Engineering Based on RNA Replica-
tion. Pure and Appl. Chem. 56, 967–978 (1984)
[25] Eigen, M.: Natural selection: a phase transition? Biophysical Chemistry 85, 101–123
(2000)
[26] Einstein, A.: ¨Uber die von der molekularkinetischen Theorie der W¨arme geforderte
Bewegung von in ruhenden Fl¨ussigkeiten suspendierten Teilchen (On the movement of
small particles suspended in stationary liquids required by the molecular-kinetic theory
of heat.). Ann. D. Phys. 17, 549–560 (1905)
[27] Ellington, A.D., Szostak, J.W.: in Vitro selection of RNA molecules that bind speciﬁc
ligands. selection of RNA molecules that bind speciﬁc ligands 346, 818–822 (1990)
[28] Fisher, R.A.: The Genetical Theory of Natural Selection. Clarendon, Oxford (1930)
[29] Husimi, Y., Nishigaki, K., Kinoshita, Y., Tanaka, T.: Cellstat-a continuous culture sys-
tem of a bacteriophage for the study of the mutation rate and the selection process of
the DNA level. Rev. Sci. Instrum. 53, 517–522 (1982)
[30] Husimi, Y.: Selective value landscape on the base sequence space and concept of free
selective value: a model of quasi-species. Viva Origino 16, 136–141 (1988) (in Japanese
with English abstracts)
[31] Iguchi, K.: Reciprocal relations in evolutionary processes. Prog. Theor. Phys. Suppl.
173, 235–242 (2008)

3
Biomolecular Information Gained through In Vitro Evolution
99
[32] Iwasa, Y.: Free ﬁtness that always increases in evolution. J. Theor. Biol. 135, 265–281
(1988)
[33] Kauffman, S.A.: The Origin of Order. Oxford University Press, Oxford (1993)
[34] Kim, J.T., Martinetz, T., Polani, D.: Bioinformatic principles underlying the information
content of transcription factor binding sites. J. Theor. Biol. 220, 529–544 (2003)
[35] Kimura, M.: Natural selection as the process of accumulating genetic information in
adaptive evolution. Genet. Res. 2, 127–140 (1961)
[36] Kimura, M.: Genetic variability maintained in a ﬁnite population due to mutational
production of neutral or nearly neutral isoalleles. Genet. Res. Camb. 11, 247–269 (1968)
[37] Maynard-Smith, J.: Natural selection and the concept of a protein space. Nature 225,
563–564 (1970)
[38] Maynard-Smith, J.: The concept of information in biology. Philos. Sci. 67, 177–194
(2000)
[39] Mills, D.R., Peterson, R.L., Spiegelman, S.: An extracellular Darwinian experiment
with a self-duplicating nucleic acid molecule. Proc. Natl. Acad. Sci. USA 58, 217–224
(1967)
[40] Nemoto, N., Miyamoto-Sato, E., Husimi, Y., Yanagawa, H.: In vitro virus: bonding of
mRNA bearing puromycin at the 3’-terminal end to the C-terminal end of its encoded
protein on the ribosome in vitro. FEBS Lett. 414, 405–408 (1997)
[41] Nicolis, G., Prigogine, I.: Self-Organization in Nonequilibrium Systems: From Dissipa-
tive Structures to Order through Fluctuations. Wiley, Chichester (1977)
[42] Pande, V.S., Grosberg, A.Y., Tanaka, T.: Statistical mechanics of simple models of pro-
tein folding and design. Biophys. J. 73, 3192–3210 (1997)
[43] Sato, K., Ito, Y., Yomo, T., Kaneko, K.: On the relation between ﬂuctuation and response
in biological systems. Proc. Natl. Acad. Sci. USA 100, 14086–14090 (2003)
[44] Schneider, T.D.: Evolution of biological information. Nucleic Acid Research 28, 2794–
2799 (2000)
[45] Schuster, P., Swetina, J.: Stationary mutant distributions and evolutionary optimization.
Bull. Math. Biol. 50, 635–660 (1988)
[46] Scott, J.K., Smith, G.P.: Searching for peptide ligands with an epitope library. Sci-
ence 249, 386–390 (1990)
[47] Sella, G., Hirsh, A.E.: The application of statistical physics to evolutionary biology.
Proc. Natl. Acad. Sci. USA 102, 9541–9546 (2005)
[48] Shannon, C.E., Weaver, W.: The Mathematical Theory of Communication. Univ. Illinois
Press, Champaign (1949)
[49] Smith, E.: Thermodynamics of natural selection I: Energy ﬂow and the limits on orga-
nization. J. Theor. Biol. 252, 185–197 (2008)
[50] Smith, E.: Thermodynamics of natural selection II: Chemical Carnot cycles. J. Theor.
Biol. 252, 198–212 (2008)
[51] Smith, E.: Thermodynamics of natural selection III: Landauer’s principle in computa-
tion and chemistry. J. Theor. Biol. 252, 213–220 (2008)
[52] Stemmer, W.P.C.: The evolution of molecular computation. Science 270, 1510 (1995)
[53] Szostak, J.W.: Functional information: Molecular messages. Nature 423, 689 (2003)
[54] Tuerk, C., Gold, L.: Systematic evolution of nucleic acids by exponential enrichment:
RNA nucleic acids to bacteriophage T4 DNA polymerase. Science 249, 505–510 (1990)
[55] Voigt, C.A., Kauffman, S., Wang, Z.G.: Rational evolutionary design: the theory of in
vitro protein evolution. Advances in Protein Chemistry 55, 79–160 (2000)
[56] Weinberger, E.D.: A theory of pragmatic information and its application to the quasi-
species model of biological evolution. Biosystems 66, 105–119 (2002)

100
T. Aita and Y. Husimi
[57] Wilke, C.O., Wang, J.L., Ofria, C., Lenski, R.E., Adami, C.: Evolution of digital or-
ganisms at high mutation rates leads to survival of the ﬂattest. Nature 412, 331–333
(2001)
[58] Wolynes, P.G., Luthey-Schulten, Z.: The energy landscape theory of protein folding.
In: Flyvbjerg, H., Hertz, J., Jensen, M.H., Mouritsen, O.G., Sneppen, K. (eds.) Physics
of Biological Systems: From Molecules to Species, pp. 61–79. Springer, Heidelberg
(1997)
[59] Wright, S.: Evolution in Mendelian populations. Genetics 16, 97–159 (1931)
[60] Yang, X., Liu, X., Lou, C., Chen, J., Ouyang, Q.: A case study of the dynamics of in
vitro DNA evolution under constant selection pressure. J. Mol. Evol. 68, 14–27 (2009)

Part II
Topology, Measures and Problem
Hardness

Chapter 4
Fitness Landscape Analysis for Metaheuristic
Performance Prediction
Katherine M. Malan and Andries P. Engelbrecht
Abstract. Metaheuristics have become popular for solving complex optimisation
problems where classical techniques are either infeasible or perform poorly. Despite
many success stories, it is well known that metaheuristics sometimes fail and that re-
searchers and practitioners frequently resort to trial and error to ﬁnd an appropriate
algorithm or setting to solve a given problem. Within the framework of the gen-
eral algorithm selection problem, this chapter addresses the feasibility of predicting
algorithm performance on unknown real-valued problems based on ﬁtness land-
scape features. Normalized metrics are proposed for quantifying algorithm perfor-
mance on known problems to generate suitable training data. Performance metrics
are tested using a standard particle swarm optimisation algorithm and are investi-
gated alongside three existing ﬁtness landscape measures. This preliminary investi-
gation highlights the need for a shift in focus away from predicting general problem
hardness towards characterising problems where each ﬁtness landscape technique
has value as a part-predictor of algorithm performance.
4.1
Introduction
Many real-world scenarios require optimisation; ﬁnding the most proﬁtable or least
expensive or most desirable solution to some problem. Traditional mathematical op-
timisation techniques, such as gradient-based techniques, use the derivative of the
objective function to determine the exact maximum or minimum point of a con-
tinuous problem. Many optimisation problems are, however, not able to be solved
using such traditional techniques. For example, multimodal problems where gra-
dient information is not sufﬁcient for ﬁnding the global optimum, problems with
discontinuous search spaces that are non-differentiable, or black-box optimisa-
tion problems where there is no objective function in mathematical form to be
Katherine M. Malan · Andries P. Engelbrecht
Department of Computer Science, University of Pretoria, Pretoria 0002, South Africa
e-mail: {kmalan,engel}@cs.up.ac.za
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
103
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_4, c⃝Springer-Verlag Berlin Heidelberg 2014

104
K.M. Malan and A.P. Engelbrecht
differentiated. For these cases, often the only feasible alternative is to use ap-
proaches that ﬁnd approximate solutions. Metaheuristics is the name given to such
approximate optimisation techniques that are general, in that they can be applied to
solve any optimisation problem.
There are many different approaches within the ﬁeld of metaheuristics. Some
metaheuristics perform local search, usually with extensions to enhance exploration
of the search space, such as simulated annealing [6, 31], iterated local search [35]
and tabu search [16, 17]. Other metaheuristics are population-based in that they
work on a collection of solutions in parallel, such as evolutionary algorithms [3],
ant colony optimisation algorithms [9] and particle swarm optimisation (PSO) algo-
rithms [30]. Many of these population-based metaheuristics are inspired by nature;
the way that nature constructs elegant solutions to problems within extremely com-
plex systems has inspired scientists to capture some of this ‘magic’ in simple forms
within algorithms and the results are often surprisingly good. Talbi [56] provides a
genealogy of metaheuristics as applied to optimisation from the 1940s to the 1990s
containing no less than 24 different kinds of algorithms. Since then many more algo-
rithms have been proposed from more bio-inspired algorithms like ﬁreﬂy [69] and
krill herd [14] algorithms to algorithms inspired by the interaction between mag-
netic particles [57] and even algorithms inspired by the way musicians improvise
(harmony search) [15]. Given this plethora of algorithms, the challenge of choosing
the most appropriate algorithm for solving a given problem can be a daunting task.
This chapter considers the subset of optimisation problems that involve real-
valued variables. More precisely, the scope of the problems under investigation is
limited to optimisation problems that are static, bound-constrained, multivariate and
continuous and it is assumed that problems are to be minimized. In general such a
problem can be deﬁned as
min f(x), f : Rn →R,x ∈S ⊆Rn
where x is an n-dimensional candidate solution vector and S deﬁnes the feasible
subregion of Rn as deﬁned by the domains of the variables within x. Considering
only continuous optimisation problems does not simplify the problem of choos-
ing an appropriate algorithm. Although some algorithms were designed for discrete
spaces, there are just as many algorithms that were designed to work in continuous
spaces. Examples include PSO [30], differential evolution [43], evolution strategies
[45, 47] and cuckoo search [70]. In addition, many metaheuristics originally de-
signed for discrete spaces have been adapted to work in continuous environments
such as real-coded genetic algorithms [24], evolutionary programming [32], ant
colony optimisation algorithms [4], estimation of distribution algorithms [1] and
scatter search [23].
Over the last few decades the focus of research in metaheuristics has been largely
on the algorithmic side. Relatively little attention has been paid to the study of the
problems. When a publication introduces a new algorithm or variation on an exist-
ing algorithm, the approach is typically to demonstrate empirically that the algo-
rithm out-performs other algorithms on a number of selected benchmark problems.

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
105
The proposers of a new algorithm will usually neglect to provide any analysis of
problems on which the proposed algorithm will perform poorly and why.
There have been some recent theoretical studies attempting to address this gap in
understanding of algorithm behaviour on problems. These include: analysing which
problems are hard for particular algorithms [7, 22]; analysing which problems re-
quire smaller population sizes in evolutionary algorithms [8]; and analysing features
of particular problems that make them hard for particular algorithms [40]. Despite
these advances in understanding,there is still little practical guidance for researchers
and practitioners. Questions such as ‘Which algorithm will most accurately solve
my problem?’ or ‘Which algorithm will most quickly produce a reasonable answer
to my problem?’ remain unanswered. The most common technique for choosing an
appropriate algorithm for a given problem is by trial and error. If there existed one
algorithm that out-performed all others in solving optimisation problems, then this
‘super-algorithm’ could be used in all cases. It is well known, however, that no such
algorithm can exist as was proved by Wolpert and Macready with their famous ‘No-
Free-Lunch’ theorems for search/optimisation [66, 67]. The emphasis is therefore
not on ﬁnding the best optimisation algorithm in general, but rather on ﬁnding the
most appropriate search process for solving a particular problem, whether this is a
particular algorithm with appropriate settings and parameters or a combination of
several different search algorithms.
The focus of this chapter is to propose a way in which the features of a problem,
based on analysis of the ﬁtness landscapes of continuous problems in particular, can
be used to predict the performance of a given metaheuristic. This is not a new prob-
lem or idea. Many have tried to predict problem hardness and many have failed,
leading to the conclusion that no satisfactory problem difﬁculty measure for search
heuristics has been found [20, 26]. In fact, trying to ﬁnd a computationally fea-
sible hardness measure is a futile exercise, since He et al. [21] have proved that
a predictive version of such a measure, i.e. that runs in polynomial-time, cannot
exist (unless P=NP or BPP1=NP). Therefore, rather than proposing yet another dif-
ﬁculty measure, this chapter proposes a framework within which existing approxi-
mate measures can be used together to solve the problem of performance prediction.
There are many proposed measures based on the analysis of ﬁtness landscapes that
show some correlation to algorithm performance. Approximating these measures on
a selection of benchmark problems and combining this data with actual algorithm
performance could form a dataset to be used with one of the many machine learning
algorithms to ﬁnd a mapping from problem features to performance.
The chapter is organised as follows: In the following section, the general algo-
rithm selection problem and related performance prediction problem are described.
Section 4.3 proposes performance metrics that are suitable for the algorithm selec-
tion framework. Section 4.4 addresses the challenge of feature extraction of con-
tinuous optimisation problems and three possible feature metrics are investigated in
terms of the link to algorithm performance. The chapter is concluded in Section 4.5.
1 BPP: bounded-error probabilistic, polynomial time [64].

106
K.M. Malan and A.P. Engelbrecht
4.2
The Algorithm Selection Problem
The general problem of selecting an effective or good or best algorithm to solve a
given problem was formulated by Rice in the 1970s [46]. One of the models de-
scribed by Rice is the model where algorithm selection is based on features of the
problem. This model has four main characteristics:
• A set of problem instances (problem space P),
• a set of algorithms for solving the problems (algorithm space A),
• measures for comparing the performance of algorithms on a particular problem
(performance measure space Y), and
• measurable characteristics of the problem instances (feature space G).
The relationship between these components is illustrated in Figure 4.1 (this diagram
is based on Rice’s Figure 3 [46] but includes an additional mapping for performance
prediction). A given algorithm a ∈A can be applied to a problem instance p to pro-
duce performance measure(s) y(a(p)). In a trial-and-error approach to ﬁnding the
best algorithm to solve a problem, this process of applying algorithms to a problem
is simply repeated until the best algorithm from a set of algorithms is found, based
on the given performance measures. The algorithm selection problem, however, in-
volves avoiding this trial-and-error approach by achieving the following:
• Feature extraction: devising a mapping from problem space to feature space, so
that any problem instance p can be characterised by features g(p); and
• Algorithm selection: devising a mapping from problem feature space to algo-
rithm space, so that a given problem p, with extracted features g(p), can be
matched to the most appropriate algorithm a, such that performance y(a(p)) is
maximised.
Figure 4.1 also illustrates the related problem of performance prediction, which in-
volves predicting the performance y(a(p)) of a given algorithm a applied to prob-
lem p based on extracted features g(p). If a solution to the algorithm selection /
performance prediction problem is found, it becomes possible to take an unseen
optimisation problem, extract its features, and from these features select the most
appropriate metaheuristic algorithm from a subset of metaheuristics for solving the
problem (the algorithm selection problem) or predict the performance of a given
metaheuristic algorithm on the problem (the performance prediction problem).
Smith-Miles [49] used Rice’s model [46] to address the algorithm selection prob-
lem for a subset of combinatorial optimisation problems, namely quadratic assign-
ment problems. In that study, 28 instances of the problem were used with three
metaheuristics (tabu search, iterated local search and min-max ant system). The fea-
tures of the problem were a combination of measures quantifying the size of the
quadratic assignment problem with ﬁtness-distance metrics based on local search
runs (requiring knowledge of the global optima). A neural network was used to
solve the problem of mapping problem features to performance measures. Although
restricted to a speciﬁc class of optimisation problems, the study by Smith-Miles
demonstrated the potential relevance of using such an approach. This chapter pro-
poses how Rice’s model [46] can be applied to continuous optimisation problems

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
107
Fig. 4.1 A framework for describing the general problems of algorithm selection and perfor-
mance prediction based on problem features (based Rice’s model [46])
and algorithms, where the features of the problem are based on the analysis of ﬁt-
ness landscapes. The features should be computable on unseen problems (without
prior knowledge of the problem, such as knowledge of the global optima).
The following are prerequisites to solving the algorithm selection problem [50]
in general:
(1) A large number of problem instances with different levels of difﬁculty;
(2) A large number of different algorithms for solving these problem instances;
(3) Metrics for evaluating the performance of algorithms; and
(4) The existence of features that can be used to suitably characterise the properties
of problems.
Items 1 and 2 are met, given the extensive range of benchmark optimisation prob-
lems in the literature and the many algorithms for solving continuous problems, as
discussed in Section 4.1. Requirement 3 is addressed in the next section and require-
ment 4 is discussed in Section 4.4.
4.3
Performance Metrics
Solving the algorithm selection problem in general requires suitable metrics for
evaluating the performance of algorithms on a given set of known problems. The
performance metrics are used to generate a data set that can be used as the basis
for ﬁnding a mapping from feature space to algorithm or performance space, as il-
lustrated in Figure 4.1. For any two problems, the metrics should distinguish the

108
K.M. Malan and A.P. Engelbrecht
relative difﬁculty of solving the problems by a given algorithm. Equally, given two
algorithms, the metrics should distinguish the relative difﬁculty of the algorithms
solving the same problem. This section reviews some existing approaches to mea-
suring performance of optimisation algorithms and then proposes the use of three
normalised metrics that can be used for quantifying the performance of algorithms
on different problems.
4.3.1
Existing Approaches to Measuring Performance
The most common way of measuring the performance of an optimisation algorithm
is in terms of the quality of the solution found in comparison to the quality of the
solution found by some other algorithm. Given sufﬁcient independent runs of both
algorithms, it is reported whether there is a statistically signiﬁcant difference in the
quality of the solutions found by the algorithms. In the case of benchmark prob-
lems with known optimal solutions, the measure of the quality is usually simply the
difference in ﬁtness value between the solution found by the algorithm and the op-
timal solution (sometimes called the ﬁtness error value). To ensure reasonably fair
comparisons between different algorithms, the ﬁtness error value is usually based
on the best or average solution found after a set number of function evaluations by
the algorithm. Using an absolute ﬁtness error value as a measure of performance is
suitable when comparing algorithms on the same problem, but cannot be used when
comparing the performance of algorithms on different problems with varying ﬁtness
ranges. For example, a mean error value of 0.8 on one problem could be regarded
as a high performance result, whereas a mean error value of 0.003 may be regarded
as a low performance result for a different problem.
Another common approach to measuring performance is to quantify the percent-
age of successful runs over a number of runs (frequently called success rate). What
constitutes a ‘successful run’ has to be properly deﬁned. Some arbitrary cutoff like
“within 10−8 of the global optimum” could be sensible in the case of a problem with
a ﬁtness range of [0,1], but would not make sense in the case of a problem with a
ﬁtness range of [0,1030] (such as with the Schwefel 2.22 benchmark function in 30
dimensions). In some cases a ﬁxed error is speciﬁed for each benchmark function
[42, 53]. For example, Suganthan et al. [53] deﬁne ﬁxed accuracy levels for each
benchmark function, such as 10−6 for F1 (Shifted Sphere Function) and 10−2 for F6
(Shifted Rosenbrock’s Function). They deﬁne a successful run as one during which
“the algorithm achieves the ﬁxed accuracy level within the Max FES for the partic-
ular dimension”[53], where Max FES speciﬁes the maximum number of function
evaluations and is deﬁned as 10000×D (the dimension of the problem). In this way,
functions with higher dimensions are given more function evaluations to reach the
ﬁxed accuracy level.
Yet another approach to measuring performance is to quantify how quickly an
algorithm is able to ﬁnd an acceptable solution. For example, the AES measure [12]
is deﬁned as the average number of evaluations to a solution, deﬁned over those runs
that reach a solution to within a given ﬁxed accuracy level.

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
109
4.3.2
Proposed Performance Metrics
This section proposes the use of three normalised algorithm performance measures.
Note that the purpose of these measures is to generate data on known problems
to be used for the training of a predictor or classiﬁer of algorithm performance
on unknown problems. The measures quantify solution quality, rate of success and
speed of reaching a solution and can be used to contrast the performance of a single
algorithm on multiple problems or multiple algorithms on the same problem. All
three measures require knowledge of the range of ﬁtness values of a problem in
order for the measures to be normalised across different problems.
4.3.2.1
Estimating Fitness Range
The range of ﬁtness values for benchmark problems is not always known. In the
case of simple functions like the Spherical function, it is obvious that the maximum
values lie on the boundaries of the search space. The range of ﬁtness values is then
simply the difference between the ﬁtness values on the boundary and the ﬁtness
of the known optimal solution. In the case of many other benchmark problems,
however, the maximum point is somewhere else in the search space. For example,
Figure 4.2 illustrates two common benchmark functions in one dimension. A simple
visual inspection of a plot of the functions in one dimension can be used to estimate
the range of ﬁtness values of the function. However, in higher dimensions it is not
as easy to estimate the ﬁtness range, as the position of the maximum point cannot
be assumed to be at the same x position as for the one dimensional version of the
function.
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
-4
-2
 0
 2
 4
f(x)
x
-500
-400
-300
-200
-100
 0
 100
 200
 300
 400
 500
-400
-200
 0
 200
 400
f(x)
x
(a) Rastrigin function
(b) Schwefel 2.26 function
Fig. 4.2 Example one-dimensional minimisation benchmark functions
A simple way of estimating the maximum ﬁtness value of a benchmark problem
is to optimise the minimisation problem as a maximisation problem using a suitable
optimisation algorithm. The result of the optimisation is the estimated maximum
ﬁtness value, called ˆf . It is important that during the maximisation, the algorithm
be conﬁned to the bounds of the search space, because many of the benchmark

110
K.M. Malan and A.P. Engelbrecht
functions (like those illustrated in Figure 4.2) continue increasing outside the bounds
of the problem domain. For a benchmark function, given an estimated maximum
ﬁtness ˆf and a known minimum ﬁtness value, f ∗, the estimated range of ﬁtness
values is then deﬁned as ˆf −f ∗.
4.3.2.2
Determining Fixed Accuracy Levels
Measures based on the success rate and speed of an optimisation algorithm are de-
pendent on deciding whether a run is successful or not. Similar to [42] and [53] the
notion of a successful run is dependent on a ﬁxed accuracy level for a function. A
function with a smaller range of ﬁtness values should have a smaller ﬁxed accuracy
level than a function with a larger ﬁtness range. However, rather than using a single
ﬁxed accuracy level for each benchmark function (as in [42, 53]), it is proposed that
a ﬁxed accuracy level is deﬁned for each function/dimension combination. If the
range of ﬁtness values of the same benchmark function increases as the dimension
increases, then the ﬁxed accuracy level should also increase. The proposed method
for determining the ﬁxed accuracy level of a given benchmark function and dimen-
sion is as follows:
(1) The estimated ﬁtness range of the problem ( ˆf −f ∗) is rounded down to the
nearest 10n (called the ﬁtness range order), where n is an integer. Rounding the
ﬁtness range down (rather than up) results in a smaller ﬁxed accuracy level and
hence higher requirement in terms of accuracy of solution.
(2) The ﬁxed accuracy level is computed as the ﬁtness range order multiplied by
10−8. The use of 10−8 is speciﬁcally chosen to align with error values in other
sources [42, 53]. The Spherical benchmark function in one dimension with do-
main [−100,100] would result in a ﬁtness range of 102. Multiplying this by
10−8 would result in a ﬁxed accuracy of 10−6, which is equal to the error value
speciﬁed for Sphere in [42] as well as the ﬁxed accuracy level speciﬁed for the
Shifted Sphere Function in [53].
Some example benchmark problems with proposed ﬁxed accuracy levels are listed
in Table 4.1. The deﬁnition of these functions is given in Table 4.2. Notice how
with some functions, such as Ackley, the ﬁxed accuracy levels stays the same as the
dimension increases, but in the case of other functions, such as Griewank, the ﬁtness
range increases with an increase in dimension, resulting in a decrease in the ﬁxed
accuracy level.
4.3.2.3
QMetric
Given a run of an optimisation algorithm on benchmark function f with resulting
best ﬁtness found f min, the distance of the best found solution from the optimal
solution is quantiﬁed as f min −f ∗. This distance is an absolute measure of ﬁtness
error, where 0 is the minimum error and corresponds with the highest possible so-
lution quality. To convert the ﬁtness error into a positive measure of quality, the

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
111
Table 4.1 Some example benchmark problems (deﬁned in Table 4.2) in different dimensions
with estimated maximum ﬁtness ( ˆf ), known minimum (f ∗), ﬁtness range order and ﬁxed
accuracy level
Function
Dimension
ˆf
f ∗
Fitness
Range Order
Fixed Accu-
racy Level
Ackley
1
22.31
0
101
10−7
Ackley
15
22.31
0
101
10−7
Ackley
30
22.31
0
101
10−7
Griewank
1
92.00
0
101
10−7
Griewank
15
1351.00
0
103
10−5
Griewank
30
2701.00
0
103
10−5
Rosenbrock
2
3905.93
0
103
10−5
Rosenbrock
15
54682.97
0
104
10−4
Rosenbrock
30
113271.86
0
105
10−3
Schwefel 2.26
1
418.98
-418.98
102
10−6
Schwefel 2.26
15
6284.74
-6284.74 104
10−4
Schwefel 2.26
30
12569.49 -12569.49 104
10−4
Table 4.2 Benchmark Functions (D is the dimension of the problem)
Function
Deﬁnition, domain and global optimum (f ∗)
Ackley
f1(x) = −20 exp

−0.2

1
D ∑D
i=1 x2
i

−exp
 1
D ∑D
i=1 cos(2πxi)

+20+e
xi ∈[−32,32],
f ∗
1 = f1(0,...,0) = 0
Griewank
f2(x) =
1
4000 ∑D
i=1 x2
i −∏D
i=1 cos

xi
√
i

+1
xi ∈[−600,600],
f ∗
2 = f2(0,...,0) = 0
Quadric
f3(x) = ∑D
i=1

∑i
j=1 x j
2
xi ∈[−100,100],
f ∗
3 = f3(0,...,0) = 0
Rana (expanded) f4(x) = ∑D
i=1 xi sin(α)cos(β)+

x(i+1)modD +1

cos(α)sin(β),
D > 1,
where
α =

|xi+1 +1−xi|
and
β =

|xi +xi+1 +1|
xi ∈[−512,512],
f ∗
4 = f4(−512,...,−512)
Rastrigin
f5(x) = ∑D
i=1

x2
i −10cos(2πxi)+10

xi ∈[−5.12,5.12],
f ∗
5 = f5(0,...,0) = 0
Rosenbrock
f6(x) = ∑D−1
i=1

100(xi+1 −x2
i )2 +(xi −1)2
,
D > 1
(generalized)
xi ∈[−2.048,2.048],
f ∗
6 = f6(1,...,1) = 0
Salomon
f7(x) = −cos

2π ∑D
i=1 x2
i

+0.1

∑D
i=1 x2
i +1
xi ∈[−100,100],
f ∗
7 = f7(0,...,0) = 0
Schwefel 2.26
f8(x) = −∑D
i=1

xi sin(

|xi|)

xi ∈[−500,500],
f ∗
8 = f8(420.9687,...,420.9687)
Spherical
f9(x) = ∑D
i=1 x2
i
xi ∈[−100,100],
f ∗
9 = f9(0,...,0) = 0
Step
f10(x) = ∑D
i=1 (⌊xi +0.5⌋)2
xi ∈[−20,20],
f ∗
10 = f10(0,...,0) = 0

112
K.M. Malan and A.P. Engelbrecht
found solution, f min, is subtracted from the estimated maximum, f ∗and scaled by
the estimated range of the problem as follows:
q =
ˆf −f min
ˆf −f ∗.
(4.1)
The normalized measure q is a value in the range [0,1] where 1 indicates the highest
quality, where the found solution exactly matches the known optimal solution and 0
indicates the worst possible quality of ﬁnding the maximum ﬁtness. In order to better
distinguish between q values closer to 1, the value of q is scaled exponentially to
produce the proposed QMetric measure as follows:
QMetric = 2q104
−1 .
(4.2)
Figure 4.3 illustrates the relationship between q and QMetric. Given a problem with
a ﬁtness range of [0,1] and a found solution of 10−8, the value of QMetric will
be 1.000 (rounded to 3 decimal places), indicating a solution quality that is within
the acceptable error margin of the global optimum. On the other hand, a solution of
10−5 would result in a q value of 0.99999 and an associated QMetric value of 0.872,
indicating a lower solution quality. Any solution with ﬁtness 0.001 and larger will
result in a QMetric value of 0 (rounded to 3 decimal places).
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0.999
 0.9992
 0.9994
 0.9996
 0.9998
 1
QMetric
q
Fig. 4.3 Function used to scale ﬁtness quality measure q to QMetric
4.3.2.4
SRate
To compare the rate of success of different algorithms on different problems, each
problem/algorithmcombination is run using a maximum number of function evalua-
tions (MaxFES) as the terminating condition. For all problems, the value of MaxFES
is set to 10000×D, where D is the dimension of the problem. A PSO algorithm with

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
113
50 particles will therefore run for a maximum of 200 iterations on a one-dimensional
problem. A run is regarded as successful if the run reaches the global optimum
(within the associated ﬁxed accuracy level) before the MaxFES of the problem are
exceeded. The success rate (SRate) is deﬁned as the number of successful runs that
reach a solution within the ﬁxed accuracy level of the global optimum divided by
the total number of runs [53]. Like the QMetric, SRate is a value in the range [0,1]
where 1 indicates the highest possible rate of success.
4.3.2.5
SSpeed
The number of function evaluations taken to reach the global optimum (within the
ﬁxed accuracy level) for a given run r is known as FESr. A proposed metric called
the success speed of a run r (SSpeedr) is deﬁned as:
SSpeedr =
 0
if the run is not successful
MaxFES−(FESr−1)
MaxFES
otherwise.
(4.3)
The metric SSpeedr is a value in the range [0,1]. The highest value for SSpeedr can
only be obtained if the global minimum is reached in the ﬁrst function evaluation
(if FESr is 1) and this would indicate the highest possible performance in terms of
speed. The success speed (SSpeed) over ns successful runs, is deﬁned as:
SSpeed =
 ∑ns
r=1 SSpeedr
ns
if ns > 0
0
if ns = 0 .
(4.4)
4.3.3
Performance Metrics for PSO
To illustrate the use of the proposed three performance metrics, Table 4.3 shows the
results of minimizing a number of benchmark functions using a traditional gbest
PSO algorithm [10]. The following parameter values were used: 50 particles, 1.496
for both the cognitive and social acceleration constants and 0.7298 for the inertia
weight [11]. All algorithms were implemented using CIlib, an open source library
and framework of computational intelligence algorithms.2 Benchmark functions and
dimensions were selected to illustrate features of the metrics. For each benchmark
function/dimension combination, 30 independent runs of the algorithm were per-
formed. The QMetric values are the means of the 30 runs and the value for MaxFES
was set at 10000 × D, or 200 × D iterations for 50 particles.
In Table 4.3, the easiest function to minimize is the simple unimodal Spheri-
cal function and this is reﬂected in the high values for all performance metrics.
The PSO algorithm achieved a QMetric mean value of 1 in dimensions 1, 15 and
30, indicating that the average of the best ﬁtness values found was of the highest
possible quality. Similarly, the SRate of 1 indicates that the algorithm found the op-
timal solution (to within the ﬁxed accuracy level) in all 30 runs. The high SSpeed
2 See http://cilib.net/

114
K.M. Malan and A.P. Engelbrecht
Table 4.3 Results of minimizing benchmark problems using a standard PSO algorithm,
based on 30 runs
Function
Dimension QMetric SRate SSpeed
Ackley
1
1.000 1.000
0.471
Ackley
15
0.933 0.933
0.855
Ackley
30
0.300 0.300
0.862
Griewank
1
1.000 1.000
0.721
Griewank
10
0.352 0.033
0.019
Griewank
15
0.691 0.100
0.910
Griewank
30
0.902 0.367
0.921
Rosenbrock
2
1.000 1.000
0.843
Rosenbrock
5
0.931 0.067
0.321
Rosenbrock
15
0.888 0.000
0.000
Rosenbrock
30
0.482 0.000
0.000
Salomon
1
1.000 1.000
0.574
Salomon
5
0.000 0.000
0.000
Schwefel 2.26
1
1.000 1.000
0.816
Schwefel 2.26
5
0.400 0.400
0.826
Schwefel 2.26
15
0.000 0.000
0.000
Spherical
1
1.000 1.000
0.845
Spherical
15
1.000 1.000
0.941
Spherical
30
1.000 1.000
0.940
values indicates that the algorithm found the solution quickly (needing relatively few
function evaluations). Recall that the SSpeed metric is a measure of how quickly
the solution is found in relation to the maximum number of function evaluations
(MaxFES), which increases with dimension (MaxFES is set at 10000× D). For ex-
ample, an SSpeed value of 0.941 for Spherical in 15 dimensions does not imply that
the solution was found in fewer iterations than for 1 dimension (with an SSpeed of
0.845), but rather that the solution was found in a smaller percentage of the maxi-
mum number of iterations allowed for that dimension.
From the results, it can be seen that the Spherical problem did not become harder
for the PSO algorithm as the dimensions increased. In contrast, the PSO algorithm
found it harder to minimize the multimodal Ackley function as the dimensions in-
creased. In 30 dimensions, the algorithm was only able to ﬁnd the optimal solution
in 9 out of the 30 runs (SRate of 0.3).
In many cases the QMetric and SRate have the same value. This indicates that the
quality of the solutions and the success rate are essentially reﬂecting the same infor-
mation. If the quality of the solution is low, it will result in a QMetric value of 0 and
this will also be reﬂected in an unsuccessful run. There are cases, however, where
the QMetric differs from the SRate measure. Consider for example the Rosenbrock
function in 15 dimensions. None of the 30 runs of the PSO algorithm found the op-
timal solution, but a QMetric value of 0.888 indicates that the best solutions found
were still of a relatively good quality (relatively close to the global optimum ﬁtness
value).

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
115
It is interesting to notice how in the case of the Griewank benchmark function, the
performance metrics are high in 1 dimension, decrease in 10 dimensions, but then
increase in 15 dimensions and increase further in 30 dimensions. This indicates that
the problem becomes easier in higher dimensions, which is a known characteristic
of the Griewank benchmark function [34].
The three normalized metrics proposed in this section make it possible to com-
pare data from different benchmarks and algorithms. The following section dis-
cusses the challenge of extracting features of problems with the aim of ﬁnding a
mapping from feature to performance space.
4.4
Feature Extraction for Continuous Optimisation Problems
Part of the challenge of solving the algorithm selection / performance prediction
problem for continuous optimisation lies in ﬁnding a set of features of problems
that can be used as the basis for mapping from feature space to algorithm perfor-
mance. Given the ﬁtness function of an optimisation problem, the aim is to develop
a problem characteriser blackbox, as illustrated in Figure 4.4, that can produce as
output a number of characteristics of the problem based on analysis of ﬁtness land-
scapes of the problem.
Fig. 4.4 A problem characteriser blackbox that can take as input a real-encoded ﬁtness func-
tion and produce as output a number of approximate characteristics of the problem, based on
analysis of ﬁtness landscapes
To be applicable to the algorithm selection problem, each technique within the
problem characteriser should have the following features:
(1) Each technique should measure characteristics that in some way correlate with
performance of algorithms. Without some correlation, a mapping from feature
space to performance space (as illustrated in Figure 4.1) will not be achievable.
(2) For the technique to be useful on unseen problems, it is assumed that there is no
information on the nature of the problem beforehand other than the ﬁtness func-
tion and the domains of the variables of the problem. For example, a technique
that requires knowledge of the global optima would not be appropriate.
(3) Each technique should be analytical and result in numerical output values to
facilitate automated analysis of generated data.

116
K.M. Malan and A.P. Engelbrecht
(4) The computational work required in executing the technique should be signiﬁ-
cantly less than the computational work required to solve the problem using a
typical search algorithm. In other words, characterising a problem should be less
computationally intensive than solving the problem with multiple algorithms
using a trial and error approach.
Although requirement 4 above states that the numerical effort of probing and char-
acterising a problem in multiple ways should be signiﬁcantly less than the numerical
effort in using a trial and error approach with multiple algorithms, one could argue
that this is not an essential feature. A trial and error approach to solving an unknown
problem has no guarantee of producing a good solution to the problem. On the other
hand, characterising a problem should lead to a deeper understanding of the problem
and better choices of algorithms and therefore have an increased chance of produc-
ing a solution of higher quality than the uninformed application of multiple search
algorithms.
The following section discusses some of the features of ﬁtness landscapes that
could contribute to problem hardness and in Section 4.4.2 three speciﬁc techniques
are described as examples of the kinds of measures that could be used to partly
characterise problems.
4.4.1
What Makes an Optimisation Problem Hard?
What are the properties or features of optimisation problems that could determine
the degree of difﬁculty in solving them? Consider the ﬁtness landscapes of simple
one-dimensional continuous problems as illustrated in Figure 4.5, where x′ is a can-
didate solution found by a search process and x∗is the global optimum solution.
A search algorithm would use information from the search space to decide how to
proceed – information such as the gradient of the ﬁtness function, or ﬁtness values
of solutions in the neighbourhood of x′, or a whole population of alternative solu-
tions with associated ﬁtness values. Whichever approach is used, a simple function
such as the one illustrated in Figure 4.5a, clearly provides good information to guide
search towards the global optimum. In contrast, the rugged landscape in Figure 4.5b
provides very little useful information to guide search towards the global optimum.
In addition, the vertical gradients in places (e.g. at point x′) make it difﬁcult for
some search algorithms, either because the gradient is not deﬁned or because the
same solution can have multiple ﬁtness values. Ruggedness clearly affects problem
difﬁculty and many studies on problem hardness have focussed on ruggedness as
the main determining factor [33, 39, 52]. The ruggedness of a ﬁtness landscape is,
however, not the only factor affecting problem hardness. Consider for example the
problem in Figure 4.5c. This landscape would not be regarded as rugged compared
with the landscape in Figure 4.5b, but presents misleading information for a local
search algorithm. Starting at position x′, a local search algorithm would typically be
guided away from the global optimum at x∗. Problems such as these that present an
algorithm with misleading information are known as deceptive problems and many
studies on problem hardness have focussed on deception as the main determining

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
117
factor [5, 18, 19, 27]. Neutrality is yet another factor that can have an inﬂuence
on problem difﬁculty [59, 60, 63, 55, 41]. This phenomenon is illustrated in Fig-
ure 4.5d, where there is a lack of information around the candidate solution x′ for
guiding search towards the global optimum.
(a) A simple smooth landscape
(b) A rugged landscape
(c) A deceptive landscape
d) A neutral landscape
Fig. 4.5 Simple one-dimensional ﬁtness landscapes to be minimised where x′ is a candidate
solution to the problem, f (x′) the ﬁtness of solution x′ and x∗the optimal solution
It is important to note that features such as ruggedness, deception or neutrality
are not features of a ﬁtness function, but rather features of a ﬁtness landscape. The
same ﬁtness function can generate many different landscapes depending on the way
in which the function is sampled or explored by a search algorithm. Consider for
example the Step benchmark function in D dimensions:
f(x) =
D
∑
i=1
(⌊xi + 0.5⌋)2 .
(4.5)
The same function in one dimension is plotted in Figure 4.6 at different resolutions,
rendering a seemingly smooth landscape in the case of Figure 4.6a and a landscape

118
K.M. Malan and A.P. Engelbrecht
with high neutrality (many ﬂat sections) in Figure 4.6b. In a similar way, a search
process that samples the Step function by taking bigger step sizes may result in a
smooth landscape, whereas a search process that samples the Step function by tak-
ing smaller steps may result in a landscape with high neutrality. This relationship
between ﬁtness functions and landscapes was highlighted by Jones [28] for combi-
natorial problems where he emphasized that different search operators on the same
problem generate different landscapes. Therefore, viewing a continuous problem at
different levels of granularity, or exploring a multi-dimensional space in different
ways, can lead to very different ﬁtness landscapes and hence potentially different
views on features such as ruggedness, deception or neutrality.
 0
 1000
 2000
 3000
 4000
 5000
 6000
 7000
 8000
 9000
 10000
-100
-50
 0
 50
 100
f(x)
x
 0
 20
 40
 60
 80
 100
-10
-5
 0
 5
 10
f(x)
x
(a) Larger domain
b) Smaller domain
Fig. 4.6 One-dimensional Step benchmark function viewed in at different resolutions ren-
dering two different ﬁtness landscapes
This section discussed three commonly used landscape features, namely rugged-
ness, deception and neutrality, as features that can affect problem hardness. This list
is not complete and there are many other features that can affect the hardness of
problems. We know, however, that a complete characterisation of any problem in
terms of hardness is computationally infeasible [21]. The aim is therefore to charac-
terise a problem using as wide a range of features as possible, while still maintaining
a relatively low computational budget.
4.4.2
Possible Techniques for Feature Extraction
There are a large number of proposed techniques for ﬁtness landscape analysis.
Many of these techniques were published in literature as problem hardness mea-
sures and for many of these, subsequent publications can be found providing evi-
dence of counter-examples for which the proposed measure of hardness does not
hold. Although many proposed techniques have therefore been ‘shot down’ as dif-
ﬁculty measures, it is proposed that some techniques can still be useful if viewed
as measures of particular problem characteristics, rather than of problem difﬁculty.
With a shift in focus away from predicting hardness, each technique has its own

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
119
place within a set of techniques for characterising problems. Three possible tech-
niques for characterising continuous optimisation problems are brieﬂy described in
this section and in the next section the features are investigated alongside perfor-
mance metrics for a PSO algorithm.
4.4.2.1
First Entropic Measure of Ruggedness
Weinberger [65] proposed using an autocorrelation method for characterising the
ruggedness of a ﬁtness landscape. His technique, and later variations [25, 39, 51],
have been widely used to characterise the ruggedness of discrete landscapes, but
have had limited success in predicting problem difﬁculty because they do not con-
sider neutrality in the landscape [13, 44, 63]. An alternative approach to analysing
the ruggedness of landscapes with respect to neutrality using information en-
tropy, called the First Entropic Measure (FEM), was proposed by Vassilev et al.
[62, 61, 63]. Based on a random walk, a sequence of three-point objects are gener-
ated. These objects are classiﬁed as rugged, smooth or neutral, based on the change
in ﬁtness values between neighbouring points. The ruggedness of the landscape is
estimated using a measure of entropy with respect to the probability distribution
of the rugged elements within the sequence. The result is a graph illustrating how
ruggedness changes with an increase in landscape neutrality. Malan and Engelbrecht
[37] proposed adaptations to this approach for continuous domains and deﬁned a
single measure of ruggedness in the range [0,1] where a higher value is indicative
of more ruggedness in the landscape. This single measure of ruggedness is referred
to as FEM.
4.4.2.2
Fitness Distance Correlation
Jones and Forrest [29] introduced ﬁtness distance correlation (FDC) as a way of
predicting the performance of a genetic algorithm on problems with known global
optima. The basic premise of FDC is that for a landscape to be easy to search, ﬁt-
ness values should increase as distance to the optimum decreases in the case of
maximisation problems and decrease as distance to the optimum decreases in the
case of minimisation problems. In continuous domains, the Euclidean metric can be
used for the calculation of distances. For FDC to be applicable as a feature extrac-
tion technique for the algorithm selection / prediction problem, it must be adapted
to be used without knowledge of the global optima. For this reason, it is proposed
that the calculation of FDC be based on a ﬁttest point from a sample in the place
of a global optimum. Instead of estimating how well or badly the problem guides
search towards the optimum, the modiﬁed FDC quantiﬁes how well or badly the
problem guides search towards a place of better ﬁtness. This is equivalent to a shift
in focus from measuring difﬁculty to measuring evolvability (the concept of evolv-
ability is described in [2, 58]). To emphasize this difference, FDC based on the
ﬁttest point from a sample is referred to as FDCe (FDC evolvability metric). More
formally, given a sample of n points, with associated ﬁtness values for each point
F = f1,..., fn, the ﬁttest point in the sample is determined. Distances D = d1,...,dn

120
K.M. Malan and A.P. Engelbrecht
are calculated from each point in the sample to the ﬁttest point in the sample. FDCe
is calculated as the covariance of F and D divided by the product of the standard
deviation of F and standard deviation of D:
FDCe = Cov(F,D)
σ(F)σ(D) .
(4.6)
The FDCe measure takes on values from –1 (perfect anti-correlation) to +1 (perfect
correlation), where low values are regarded as desirable for maximisation problems
and high values desirable for minimisation problems.
4.4.2.3
Dispersion Metric
A funnel in a landscape is a global basin shape that consists of clustered local op-
tima [54]. The Rastrigin benchmark function illustrated in Figure 4.2a is an example
of a single funnel landscape, because although the landscape is multimodal, there is
an underlying unimodal global structure. In contrast, Schwefel 2.26 in Figure 4.2b
is multi-funnelled. Multi-funnel landscapes can present problems for search, partic-
ularly in the case of algorithms that rely on local information, as they may become
trapped in sub-optimal funnels [54, 68]. A technique for estimating the presence of
funnels in a ﬁtness landscape is Lunacek and Whitley’s dispersion metric[36]. Given
a sample of points below a ﬁtness threshold, if a decrease in threshold (assuming a
minimisation problem) results in an increase in the dispersion of the points from
the sample that are below the threshold (in solution space), then this indicates the
presence of multiple funnels in the landscape. More precisely, the approach used in
this chapter to calculate the dispersion metric is as follows:
(1) Draw a uniformly random sample S of 1000 points (position vectors) from the
n-dimensional search space.
(2) Normalise the position vectors in S to produce set S′, so that the domain of the
search space is [0,1] for all n.
(3) Calculate the dispersion of set S′, disp(S′), as the average pair-wise distance
between points in S′.
(4) Determine the subset S∗of S′, such that S∗consists of the ﬁttest 10% of the
points in S′.
(5) Calculate disp(S∗) as the average pair-wise distance between points in S∗.
(6) Calculate the dispersion metric, DM = disp(S∗)−disp(S′).
The dispersion metric (referred to as DM) is a single value, where a positive value
indicates the presence of funnels.
4.4.3
Features and Algorithm Performance
This section presents values for feature metrics FEM, FDCe and DM alongside per-
formance metrics (based on a traditional PSO algorithm) for a sample of benchmark
functions and dimensions. The purpose is to show how ﬁtness landscape metrics

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
121
could be analysed alongside performance metrics. Although some preliminary ob-
servations are made regarding the predictive value of the sample metrics for PSO
performance, further investigation is needed before any general conclusions can be
drawn.
4.4.3.1
Benchmark Problems
Data was generated for each benchmark problem listed in Table 4.2 for dimensions
1, 2, 5, 15 and 30. These functions cover a range of characteristics. All functions
are multimodal, except for Spherical, Quadric and Rosenbrock for dimensions 1
to 3. (Note that although the Rosenbrock function is widely stated as unimodal, it
has been shown to be multimodal for dimensions of 4 and higher [48].) Functions
Griewank, Quadric, Rana, Rosenbrock and Salomon are non-separable. In addition
Rana and Schwefel 2.26 are multi-funnelled.
4.4.3.2
Experimental Setup
For the FEM measure, the approach described in [37] was used with the total number
of points sampled through random walks equal to 1000× D. For the FDCe calcula-
tions, uniform random samples of 500 × D were used (reduced to compensate for
the computational load of calculating the distance to the best point for each sampled
solution). The DM measure was based on uniform random samples of 1000 points
with the dispersion difference based on the 100 (10%) ﬁttest solutions from the sam-
ple. For the performance metrics a traditional gbest PSO algorithm [10] was used to
solve each problem with 50 particles, 1.496 for both the cognitive and social accel-
eration constants and 0.7298 for the inertia weight [11]. The terminating condition
was the maximum number of function evaluations and was set to 10000×D, where
D is the dimension of the problem. Note that the computational budget given to solv-
ing a problem is approximately 10 times the computational budget given to probing
the same problem to calculate the FEM and FDCe ﬁtness landscape features. The
computation of the DM metric involves calculating the pairwise distance between
100 points (the pairwise distance between the full sample of 1000 points is not part
of the computational load, as it can be pre-calculated for each dimension, since the
distances are normalised), but does not increase as the dimension increases.
4.4.3.3
Landscape Metric Results
Results are listed in Table 4.4. All ﬁtness landscape metric values are reported as
means of 30 independent runs and the standard deviations are shown in brackets.
The three landscape metrics are discussed brieﬂy in this section in terms of the
predictability and reliability of the results generated.
The FEM metric is an estimation of landscape ruggedness and is a value in the
range [0,1], where 1 indicates maximal ruggedness. Considering the values of FEM
in Table 4.4, Ackley and Salomon have the highest values, while functions like
Quadric and Rosenbrock have lower values, which is as expected. Note that the

122
K.M. Malan and A.P. Engelbrecht
Table 4.4 Benchmark functions and dimension (D) with feature metrics (FEM, DM, FDCe)
and performance metrics based on a traditional PSO algorithm
Function
D
FEM
DM
FDCe
QMetric SRate SSpeed
Ackley
1 0.876 (±0.009) -0.296 (±0.003) 0.793 (±0.008)
1.000 1.000
0.471
Ackley
2 0.854 (±0.008) -0.357 (±0.008) 0.774 (±0.010)
1.000 1.000
0.634
Ackley
5 0.865 (±0.004) -0.333 (±0.017) 0.701 (±0.025)
1.000 1.000
0.782
Ackley
15 0.870 (±0.002) -0.288 (±0.018) 0.506 (±0.025)
0.933 0.933
0.855
Ackley
30 0.870 (±0.001) -0.270 (±0.018) 0.431 (±0.018)
0.300 0.300
0.862
Griewank
1 0.786 (±0.011) -0.289 (±0.003) 0.967 (±0.002)
1.000 1.000
0.721
Griewank
2 0.665 (±0.043) -0.358 (±0.011) 0.966 (±0.007)
0.915 0.767
0.669
Griewank
5 0.479 (±0.042) -0.358 (±0.012) 0.903 (±0.034)
0.560 0.067
0.211
Griewank
15 0.348 (±0.010) -0.338 (±0.013) 0.653 (±0.024)
0.691 0.100
0.910
Griewank
30 0.292 (±0.007) -0.328 (±0.015) 0.567 (±0.027)
0.902 0.367
0.921
Quadric
1 0.464 (±0.014) -0.297 (±0.003) 0.968 (±0.002)
1.000 1.000
0.942
Quadric
2 0.505 (±0.058) -0.329 (±0.010) 0.648 (±0.012)
1.000 1.000
0.893
Quadric
5 0.447 (±0.038) -0.213 (±0.019) 0.342 (±0.030)
1.000 1.000
0.906
Quadric
15 0.368 (±0.018) -0.087 (±0.021) 0.115 (±0.013)
1.000 1.000
0.869
Quadric
30 0.320 (±0.012) -0.058 (±0.021) 0.071 (±0.010)
1.000 1.000
0.711
Rana
2 0.430 (±0.082) 0.051 (±0.014) 0.017 (±0.063)
0.187 0.000
0.000
Rana
5 0.679 (±0.011) 0.069 (±0.017) 0.012 (±0.035)
0.000 0.000
0.000
Rana
15 0.711 (±0.006) 0.044 (±0.021) 0.008 (±0.019)
0.000 0.000
0.000
Rana
30 0.741 (±0.003) 0.032 (±0.021) 0.005 (±0.011)
0.000 0.000
0.000
Rastrigin
1 0.540 (±0.012) -0.212 (±0.010) 0.708 (±0.015)
1.000 1.000
0.814
Rastrigin
2 0.588 (±0.027) -0.224 (±0.015) 0.641 (±0.062)
1.000 1.000
0.792
Rastrigin
5 0.601 (±0.012) -0.239 (±0.016) 0.499 (±0.077)
0.533 0.533
0.731
Rastrigin
15 0.601 (±0.008) -0.232 (±0.014) 0.393 (±0.042)
0.000 0.000
0.000
Rastrigin
30 0.586 (±0.005) -0.227 (±0.016) 0.358 (±0.023)
0.000 0.000
0.000
Rosenbrock
2 0.356 (±0.054) -0.220 (±0.015) 0.546 (±0.022)
1.000 1.000
0.843
Rosenbrock
5 0.467 (±0.027) -0.311 (±0.014) 0.687 (±0.063)
0.931 0.067
0.321
Rosenbrock
15 0.416 (±0.010) -0.280 (±0.014) 0.555 (±0.081)
0.888 0.000
0.000
Rosenbrock
30 0.361 (±0.007) -0.273 (±0.014) 0.477 (±0.074)
0.482 0.000
0.000
Salomon
1 0.887 (±0.008) -0.277 (±0.005) 0.971 (±0.002)
1.000 1.000
0.574
Salomon
2 0.888 (±0.005) -0.346 (±0.007) 0.960 (±0.009)
1.000 1.000
0.592
Salomon
5 0.890 (±0.004) -0.350 (±0.016) 0.872 (±0.048)
0.000 0.000
0.000
Salomon
15 0.889 (±0.002) -0.324 (±0.011) 0.627 (±0.037)
0.000 0.000
0.000
Salomon
30 0.886 (±0.001) -0.318 (±0.013) 0.534 (±0.017)
0.000 0.000
0.000
Schwefel 2.26
1 0.483 (±0.013) -0.003 (±0.030) 0.317 (±0.032)
1.000 1.000
0.816
Schwefel 2.26
2 0.539 (±0.028) 0.035 (±0.018) 0.300 (±0.057)
0.967 0.967
0.819
Schwefel 2.26
5 0.567 (±0.018) 0.038 (±0.017) 0.171 (±0.113)
0.400 0.400
0.826
Schwefel 2.26 15 0.582 (±0.010) 0.021 (±0.017) 0.080 (±0.078)
0.000 0.000
0.000
Schwefel 2.26 30 0.582 (±0.005) 0.024 (±0.022) 0.065 (±0.043)
0.000 0.000
0.000
Spherical
1 0.466 (±0.014) -0.296 (±0.002) 0.968 (±0.001)
1.000 1.000
0.845
Spherical
2 0.550 (±0.066) -0.358 (±0.010) 0.971 (±0.003)
1.000 1.000
0.890
Spherical
5 0.474 (±0.026) -0.355 (±0.011) 0.900 (±0.031)
1.000 1.000
0.916
Spherical
15 0.350 (±0.009) -0.338 (±0.010) 0.666 (±0.024)
1.000 1.000
0.941
Spherical
30 0.292 (±0.006) -0.328 (±0.014) 0.566 (±0.016)
1.000 1.000
0.940
Step
1 0.516 (±0.007) -0.293 (±0.003) 0.966 (±0.002)
1.000 1.000
0.994
Step
2 0.698 (±0.025) -0.359 (±0.010) 0.967 (±0.005)
1.000 1.000
0.988
Step
5 0.813 (±0.013) -0.357 (±0.015) 0.894 (±0.038)
1.000 1.000
0.977
Step
15 0.707 (±0.011) -0.336 (±0.011) 0.665 (±0.045)
1.000 1.000
0.972
Step
30 0.619 (±0.010) -0.330 (±0.012) 0.564 (±0.014)
0.924 0.900
0.857

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
123
FEM value for Griewank decreases as the dimension increases, which is consistent
with the explanation that Griewank becomes a ‘simpler’ function with increased
dimension [34]. However, some values of FEM are not quite as expected. For ex-
ample, Spherical in 2 dimensions has an FEM value of 0.550, which is higher than
the FEM value of Schwefel 2.26 in 2 dimensions. For many of the functions, the
standard deviation of the FEM mean is higher in 2 dimensions than in other dimen-
sions. These anomalies affect the reliability of the FEM metric and would need to
be investigated further.
The DM metric is an estimate of the presence of funnels in the ﬁtness landscape.
Negative values for DM indicate a simpler global topology, while larger values (pos-
itive values) are indicative of multi-funnels. All values for DM in Table 4.4 are neg-
ative, except for Rana and Schwefel 2.26 (above 1 dimension), which are the only
multi-funnelled benchmark functions. The metric DM therefore seems to predict
the presence of funnels fairly well. Of concern are the relatively high standard de-
viations in some cases. For example, the standard deviation of the DM measure for
Schwefel 2.26 in 1 dimension implies that the DM measure could very likely result
in a positive value for a different set of 30 runs.
The FDCe metric quantiﬁes how well distances to the ﬁttest solution in a sam-
ple are correlated with ﬁtness values. In the case of a simple smooth landscape,
like Spherical, the ﬁtness values should decrease steadily as the distance to ﬁtter
solutions decrease. FDCe is therefore a measure of evolvability for a local search
algorithm, where higher values indicate better evolvability. The values of FDCe in
Table 4.4 range from values close to 1 for Spherical in low dimensions, to as low as
0.005 for Rana in 30 dimensions. For most functions the value of FDCe decreases as
the dimension increases. This is most probably because the search space increases
exponentially and so distances can also become very large. Further investigation is
needed on whether the FDCe measure is a reasonable predictor of evolvability in
higher dimensions.
Figure 4.7 shows the FDCe values plotted against the DM values for all prob-
lems in Table 4.4. The scatterplot shows that there is a strong negative correlation
(Spearman correlation coefﬁcient value of -0.789) between the two feature metrics.
This shows that although the two metrics have different focus areas, they are captur-
ing similar information: the presence of funnels (high DM values) seems to imply
lower evolvability (low FDCe values), alternatively, lower evolvabilty could imply
the presence of funnels. Further investigation into this relationship should be done
to provide insight into the metrics and ways in which the approaches to calculating
the metrics can be improved. Figure 4.8 plots the FDCe values against the FEM
ruggedness values, showing a very weak correlation (Spearman correlation coef-
ﬁcient value of 0.169). This seems to indicate that the two metrics are capturing
different information on the problems.
4.4.3.4
Correlation to Performance Metrics
For a feature metric to be useful it should show some correlation (or anti-correlation)
to performance. However, as discussed in Section 4.4.2, no one technique can serve

124
K.M. Malan and A.P. Engelbrecht
-0.4
-0.35
-0.3
-0.25
-0.2
-0.15
-0.1
-0.05
 0
 0.05
 0.1
 0
 0.2
 0.4
 0.6
 0.8
 1
Dispersion metric
FDC evolvability measure
Fig. 4.7 A scatterplot of FDCe and associated dispersion metric (DM) values based on the
data shown in Table 4.4
 0
 0.2
 0.4
 0.6
 0.8
 1
 0
 0.2
 0.4
 0.6
 0.8
 1
FEM ruggedness measure
FDC evolvability measure
Fig. 4.8 A scatterplot of FDCe and associated FEM ruggedness values based on the data
shown in Table 4.4

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
125
as a predictor of hardness. To illustrate this, consider Figure 4.9 showing a scat-
terplot of the FDCe and associated QMetric values. Recall that for minimization
problems larger values of FDCe are indicative of higher evolvability and larger val-
ues of QMetric are indicative of better performance by the algorithm. Although the
data shows only a moderate correlation (Spearman correlation coefﬁcient value of
0.563), there does seem to be some value in FDCe as a part-predictor of perfor-
mance. On the scatterplot in Figure 4.9, one group of points on the bottom right
that show no positive correlation, correspond to the Salomon benchmark function
for dimensions 5 and higher. These points have a minimum QMetric value of 0
(indicating the algorithm’s failure), but also have relatively high FDCe values. In
the case of the Salomon function, FDCe is therefore a misleading predictor of dif-
ﬁculty. The data in Table 4.4, however, shows that the FEM ruggedness values of
Salomon are particularly high. In addition, there are other factors that could affect
difﬁculty that should be considered. For example, the Salomon function has ex-
tremely steep gradients, which could be a factor contributing to the difﬁculty for a
PSO algorithm [38].
 0
 0.2
 0.4
 0.6
 0.8
 1
 0
 0.2
 0.4
 0.6
 0.8
 1
QMetric
FDC evolvability measure
Fig. 4.9 A scatterplot of FDCe and associated QMetric values based on the data shown in
Table 4.4
The scatterplot in Figure 4.9 has a large proportion of values at the top and at the
bottom with a few points scattered in between. This is indicative of distinct groups
of problems based on success or failure of the algorithm in solving the problem.
Figure 4.10 shows a different visualisation of the link between FDCe and algorithm
performance, where the problems are plotted by dimension and the performance is
discretised into four groups:

126
K.M. Malan and A.P. Engelbrecht
• Always solved: problems with an SRate of 1, indicating that the solution was
found for all 30 runs of the PSO algorithm.
• Sometimes solved: problems with an SRate less than 1, but greater than 0, indi-
cating that the solution was found for some of the runs.
• Almost solved: problems with an SRate of 0, but a QMetric value greater than 0,
indicating that although none of the runs found the solution to within the required
ﬁxed accuracy level, a solution was sometimes found that was very close to the
optimum.
• Not solved: problems with all performance metric values equal to 0.
 0
 0.2
 0.4
 0.6
 0.8
 1
1D
2D
5D
15D
30D
FDC evolvability measure
Dimension
Always solved
Sometimes solved
Almost solved
Not solved
Fig. 4.10 Discretised performance plotted against FDCe values based on the data shown in
Table 4.4
It can be seen from Figure 4.10 that there is some value in the FDCe metric as a pre-
dictor of PSO performance. Although there are exceptions, in each dimension col-
umn the symbols tend to match the order of the symbols in the legend. For example,
consider the 2D column: with the exception of one high cross, the plus signs (always
solved) are above the cross (sometimes solved) and the square (almost solved). Sim-
ilarly, in 15D and 30D, the circles are lower down in the columns. Figure 4.11 shows
the same discretised performance values against DM values. Note that the legend is
plotted in the opposite order as in Figure 4.10, since the symbols are expected to
appear in that order if correlated with DM. Similarly to FDCe, there seems to be
some value in the dispersion metric as a predictor of PSO performance. It would
seem, however, that DM is a slightly better predictor in higher dimensions (given
the bigger gap between the circles and plus signs at high values of DM in 15 and 30
dimensions) and that FDCe is a slightly better predictor in lower dimensions.
In Figure 4.10 and 4.11 it can also be seen that all one-dimensional problems
are always solved by the PSO algorithm. The difference in the performance of the

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
127
-0.4
-0.35
-0.3
-0.25
-0.2
-0.15
-0.1
-0.05
 0
 0.05
 0.1
1D
2D
5D
15D
30D
Dispersion metric
Dimension
Not solved
Almost solved
Sometimes solved
Always solved
Fig. 4.11 Discretised performance plotted against dispersion metric (DM) values based on
the data shown in Table 4.4
algorithm on these problems is in terms of the speed with which the algorithm ﬁnds
the solution. This is captured in the SSpeed metric. It can be shown, however, that
FDCe and DM show no correlation with the SSpeed metric for the given data. The
feature metric which seems to show value in these cases is the FEM ruggedness
measure. Figure 4.12 shows the relationship between the FEM metric and SSpeed
of the subset of data entries from Table 4.4 that have a SRate value of 1. This ﬁgure
shows that in the case of problems for which the PSO algorithm was able to ﬁnd
the global minimum, the ruggedness seems to have a moderate effect on the speed
with which the PSO algorithm is able to ﬁnd the optimum (Spearman correlation
coefﬁcient value of -0.406).
4.4.4
Discussion
The previous section presented results from three techniques for characterising ﬁt-
ness landscapes alongside performance metrics of a traditional PSO algorithm. One
measure (FDCe) focussed on quantifying evolvability for local search, one focussed
on quantifying the ruggedness based on random walks and the third focussed on es-
timating the presence of funnels in the ﬁtness landscape. On their own, these mea-
sures cannot be used to predict PSO performance. Each, however, provides some
information that could form part of a complex multi-dimensional prediction prob-
lem. There are many more characteristics of problems that should be considered,
such as neutrality, steepness of gradients and evolvability in relation to particular
search operators. More work is needed in the design of suitable techniques and the
adaptation of existing techniques for quantifying these and other ﬁtness landscape
characteristics.

128
K.M. Malan and A.P. Engelbrecht
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
SSpeed
FEM ruggedness measure
Fig. 4.12 A scatterplot of the FEM ruggedness metric and associated SSpeed values for data
in Table 4.4 with SRate values of 1
What remains to be achieved in solving the performance prediction problem is
ﬁnding a mapping from feature space to performance space. Given a good data set
for training, this should be achievable using one of the many data mining techniques.
Although it is not possible to measure how good a data set is, a much wider range of
sample benchmark problems would go some of the way to achieving a better train-
ing set. This study considered one PSO algorithm. More work is also needed on
different algorithms and algorithm variations, since a good set of features for pre-
dicting PSO performance might be an inappropriate set of features for some other
algorithm. Solving the performance prediction problem for a range of different algo-
rithms would not only be useful, but could ultimately lead to a better understanding
of the behaviour of the algorithms themselves.
4.5
Conclusion
This chapter discussed the algorithm selection and performance prediction prob-
lems for metaheuristics and continuous optimisation. One of the requirements of
the model is the existence of suitable metrics for evaluating the performance of
algorithms on known problems to generate suitable data for training. New normal-
ized metrics were proposed that can be used to compare performance of algorithms
on problems with vastly different ﬁtness ranges. The model also requires suitable
metrics for characterising the features of problems. Three metrics were investigated
in relation to a traditional PSO algorithm. A number of issues were highlighted
regarding the reliability of measures and the usefulness as predictors of PSO per-
formance. The conclusion is that feature metrics have to be viewed together as a

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
129
multi-dimensional prediction problem and that a wide range of different features
are needed to properly characterise problems.
References
[1] Ahn, C.W., Ramakrishna, R.S.: On the Scalability of Real-Coded Bayesian Optimiza-
tion Algorithm. IEEE Trans. Evol. Comp. 12(3), 307–322 (2008)
[2] Altenberg, L.: The Evolution of Evolvability in Genetic Programming. In: Kinnear, K.
(ed.) Advances in Genetic Programming, pp. 47–74. MIT Press, Cambridge (1994)
[3] B¨ack, T., Fogel, D.B., Michalewicz, Z. (eds.): Handbook of Evolutionary Computation.
Oxford University Press, Bristol (1997)
[4] Bilchev, G., Parmee, I.C.: The Ant Colony Metaphor for Searching Continuous Design
Spaces. In: Fogarty, T.C. (ed.) AISB-WS 1995. LNCS, vol. 993, pp. 25–39. Springer,
Heidelberg (1995)
[5] Borenstein, Y., Poli, R.: Information Landscapes and Problem Hardness. In: GECCO
2005: Proceedings of the 2005 Conference on Genetic and Evolutionary Computation,
pp. 1425–1431. ACM Press, New York (2005)
[6] Cerny, V.: Thermodynamical Approach to the Traveling Salesman Problem: An Efﬁ-
cient Simulation Algorithm. J. Optim. Theory Appl. 45(1), 41–51 (1985)
[7] Chen, T., Tang, K., Chen, G., Yao, X.: Analysis of Computational Time of Simple Esti-
mation of Distribution Algorithms. IEEE Trans. Evol. Comp. 14(1), 1–22 (2010)
[8] Chen, T., Tang, K., Chen, G., Yao, X.: A Large Population Size Can Be Unhelpful in
Evolutionary Algorithms. Theor. Comput. Sci. 436, 54–70 (2012)
[9] Dorigo, M.: Optimization, Learning and Natural Algorithms. Ph.D. thesis, Politecnico
di Milano, Italy (1992) (in Italian)
[10] Eberhart, R., Kennedy, J.: A New Optimizer using Particle Swarm Theory. In: Proceed-
ings of the Sixth International Symposium on Micromachine and Human Science, pp.
39–43 (1995)
[11] Eberhart, R., Shi, Y.: Comparing Inertia Weights and Constriction Factors in Particle
Swarm Optimization. In: Proceedings of the IEEE Congress on Evolutionary Compu-
tation, vol. 1, pp. 84–88 (2000)
[12] Eiben, A.E., Jelasity, M.: A Critical Note on Experimental Research Methodology In
EC. In: Proceedings of the 2002 Congress on Evolutionary Computation (CEC 2002),
pp. 582–587. IEEE Press (2002)
[13] Fontana, W., Stadler, P.F., Bornberg-Bauer, E.G., Griesmacher, T., Hofacker, I.L.,
Tacker, M., Tarazona, P., Weinberger, E.D., Schuster, P.: RNA Folding and Combinatory
Landscapes. Phys. Rev. E 47, 2083–2099 (1993)
[14] Gandomi, A.H., Alavi, A.H.: Krill herd: A New Bio-inspired Optimization Algorithm.
Commun. Nonlinear Sci. Numer. Simul. 17(12), 4831–4845 (2012)
[15] Geem, Z.W., Kim, J.H., Loganathan, G.V.: A New Heuristic Optimization Algorithm:
Harmony Search. Simulation 76(2), 60–68 (2001)
[16] Glover, F.: Tabu Search – Part I. INFORMS J. Comput. 1(3), 190–206 (1989)
[17] Glover, F.: Tabu Search – Part II. INFORMS J. Comput. 2(1), 4–32 (1990)
[18] Goldberg, D.E.: Simple Genetic Algorithms and the Minimal Deceptive Problem. In:
Davis, L. (ed.) Genetic Algorithms and Simulated Annealing, ch. 6, pp. 74–88. Pitman,
London (1987)
[19] Goldberg, D.E.: Genetic Algorithms and Walsh Functions: Part II, Deception and Its
Analysis. Complex Sys. 3, 153–171 (1989)

130
K.M. Malan and A.P. Engelbrecht
[20] Guo, H., Hsu, W.H.: GA-Hardness Revisited. In: Cant´u-Paz, E., et al. (eds.) GECCO
2003. LNCS, vol. 2724, pp. 1584–1585. Springer, Heidelberg (2003)
[21] He, J., Reeves, C., Witt, C., Yao, X.: A Note on Problem Difﬁculty Measures in Black-
Box Optimization: Classiﬁcation, Realizations and Predictability. Evol. Comput. 15(4),
435–443 (2007)
[22] He, J., Yao, X.: A Study of Drift Analysis for Estimating Computation Time of Evolu-
tionary Algorithms. Nat. Comput. 3(1), 21–35 (2004)
[23] Herrera, F., Lozano, M., Molina, D.: Continuous Scatter Search: An Analysis of the
Integration of Some Combination Methods and Improvement Strategies. Eur. J. Oper.
Res. 169(2), 450–476 (2006)
[24] Herrera, F., Lozano, M., Verdegay, J.L.: Tackling Real-coded Genetic Algorithms: Op-
erators and Tools for Behavioural Analysis. Artif. Intell. Rev. 12(4), 265–319 (1998)
[25] Hordijk, W.: A Measure of Landscapes. Evol. Comput. 4(4), 335–360 (1996)
[26] Jansen, T.: On Classiﬁcations of Fitness Functions. In: Kallel, L., Naudts, B., Rogers, A.
(eds.) Theoretical Aspects of Evolutionary Computing, pp. 371–385. Springer, London
(2001)
[27] Jelasity, M., T´oth, B., Vink´o, T.: Characterizations of Trajectory Structure of Fitness
Landscapes Based on Pairwise Transition Probabilities of Solutions. In: Proceedings of
the 1999 Congress on Evolutionary Computation, CEC 1999, pp. 623–630. IEEE Press
(1999)
[28] Jones, T.: Evolutionary Algorithms, Fitness Landscapes and Search. Phd thesis, The
University of New Mexico (1995)
[29] Jones, T., Forrest, S.: Fitness Distance Correlation as a Measure of Problem Difﬁculty
for Genetic Algorithms. In: Proceedings of the Sixth International Conference on Ge-
netic Algorithms, pp. 184–192. Morgan Kaufmann (1995)
[30] Kennedy, J., Eberhart, R.: Particle Swarm Optimization. In: Proceedings of the IEEE
International Joint Conference on Neural Networks, pp. 1942–1948. IEEE Press (1995)
[31] Kirkpatrick, S., Gelatt, C.D., Vecchi, M.P.: Optimization by Simulated Annealing. Sci-
ence 220, 671–680 (1983)
[32] Lee, C.Y., Yao, X.: Evolutionary Programming using Mutations based on the Levy
Probability Distribution. IEEE Trans. Evol. Comput. 8(1), 1–13 (2004)
[33] Lipsitch, M.: Adaptation on Rugged Landscapes generated by Iterated Local Interac-
tions of Neighboring Genes. In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the
4th International Conference on Genetic Algorithms, pp. 128–135. Morgan Kaufmann,
San Diego (1991)
[34] Locatelli, M.: A Note on the Griewank Test Function. J. Glob. Optim. 25, 169–174
(2003)
[35] Lourenc¸o, H.R., Martin, O., St¨utzle, T.: Iterated Local Search. In: Glover, F., Kochen-
berger, G. (eds.) Handbook of Metaheuristics, International Series in Operations Re-
search & Management Science, vol. 57, pp. 321–353. Kluwer Academic Publishers
(2002)
[36] Lunacek, M., Whitley, D.: The Dispersion Metric and the CMA Evolution Strategy. In:
GECCO 2006: Proceedings of the 8th Annual Conference on Genetic and Evolutionary
Computation, pp. 477–484. ACM, New York (2006)
[37] Malan, K.M., Engelbrecht, A.P.: Quantifying Ruggedness of Continuous Landscapes
using Entropy. In: Proceedings of the IEEE Congress on Evolutionary Computation,
CEC 2009, pp. 1440–1447 (2009)

4
Fitness Landscape Analysis for Metaheuristic Performance Prediction
131
[38] Malan, K.M., Engelbrecht, A.P.: Steep Gradients as a Predictor of PSO Failure. In:
GECCO 2013: Proceedings of the Fifteenth International Conference on Genetic and
Evolutionary Computation Conference Companion 2013, pp. 9–10 (2013)
[39] Manderick, B., de Weger, M.K., Spiessens, P.: The Genetic Algorithm and the Struc-
ture of the Fitness Landscape. In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the
Fourth International Conference on Genetic Algorithms, pp. 143–150. Morgan Kauf-
mann (1991)
[40] Oliveto, P.S., He, J., Yao, X.: Analysis of the (1 + 1)-EA for Finding Approximate
Solutions to Vertex Cover Problems. IEEE Trans. Evol. Comp. 13(5), 1006–1029 (2009)
[41] Owen, A., Harvey, I.: Adapting Particle Swarm Optimisation for Fitness Landscapes
with Neutrality. In: IEEE Swarm Intelligence Symposium, SIS 2007, pp. 258–265
(2007)
[42] Price, K.V., Storn, R.M., Lampinen, J.A.: Appendix A.1: Unconstrained Uni-Modal
Test Functions. In: Differential Evolution A Practical Approach to Global Optimization.
Natural Computing Series, pp. 514–533. Springer, Berlin (2005)
[43] Price, K.V., Storn, R.M., Lampinen, J.A.: Differential Evolution: A Practical Approach
to Global Optimization. Natural Computing Series. Springer-Verlag New York, Inc.,
Secaucus (2005)
[44] Rand, W.M.: Controlled Observations of the Genetic Algorithm in a Changing Environ-
ment: Case Studies using the Shaky Ladder Hyperplane-deﬁned Functions. Ph.D. thesis,
University of Michigan, Ann Arbor, MI, USA, chair-Holland, John H. and Chair-Riolo,
Rick L (2005)
[45] Rechenberg, I.: Evolutionsstrategie: Optimierung technischer Systeme nach Prinzipien
der Biologischen Evolution. Frommann-Holzboog (1973)
[46] Rice, J.R.: The Algorithm Selection Problem. Adv. Comput. 15, 65–118 (1976)
[47] Schwefel, H.P.: Evolutionsstrategie und numerische Optimierung. Ph.D. thesis, Techni-
cal University of Berlin (1975)
[48] Shang, Y.W., Qiu, Y.H.: A Note on the Extended Rosenbrock Function. Evol. Com-
put. 14, 119–126 (2006)
[49] Smith-Miles, K.: Towards Insightful Algorithm Selection for Optimisation using Meta-
learning Concepts. In: IJCNN 2008: Proceedings of the IEEE Joint Conference on Neu-
ral Networks, pp. 4118–4124 (2008)
[50] Smith-Miles, K.A.: Cross-Disciplinary Perspectives on Meta-Learning for Algorithm
Selection. ACM Comput. Surv. 6, 1–6 (2008)
[51] Stadler, P.F.: Towards a Theory of Landscapes. In: Lop´ez-Pe˜na, R., Capovilla, R.,
Garc´ıa-Pelayo, R., Waelbroeck, H., Zertuche, F. (eds.) Complex Systems and Binary
Networks, vol. 461, pp. 77–163. Springer, New York (1995)
[52] Stadler, P., Schnabl, W.: The Landscape of the Travelling Salesman Problem. Phys. Lett.
A 161(4), 337–344 (1992)
[53] Suganthan, P.N., Hansen, N., Liang, J.J., Deb, K., Chen, Y.P., Auger, A., Tiwari, S.:
Problem Deﬁnitions and Evaluation Criteria for the CEC 2005 Special Session on
Real-Parameter Optimization. Tech. rep., Nanyang Technological University, Singapore
(2005)
[54] Sutton, A.M., Whitley, D., Lunacek, M., Howe, A.: PSO and Multi-funnel Landscapes:
How Cooperation might Limit Exploration. In: GECCO 2006: Proceedings of the 8th
Annual Conference on Genetic and Evolutionary Computation, pp. 75–82. ACM, New
York (2006)

132
K.M. Malan and A.P. Engelbrecht
[55] Verel, S., Collard, P., Tomassini, M., Vanneschi, L.: Neutral Fitness Landscape in the
Cellular Automata Majority Problem. In: El Yacoubi, S., Chopard, B., Bandini, S. (eds.)
ACRI 2006. LNCS, vol. 4173, pp. 258–267. Springer, Heidelberg (2006)
[56] Talbi, E.G.: Metaheuristics: From Design to Implementation. John Wiley & Sons, Inc.,
Hoboken (2009)
[57] Tayarani, M.H., Akbarzadeh-Totonchi, M.R.: Magnetic Optimization Algorithms a
New Synthesis. In: Proceedings of the IEEE Congress on Evolutionary Computation,
CEC 2008, pp. 2659–2664 (2008)
[58] Turney, P.D.: Increasing Evolvability Considered as a Large-Scale Trend in Evolution.
In: Proceedings of 1999 Genetic and Evolutionary Computation Conference Workshop
Program (GECCO 1999 Workshop on Evolvability), pp. 43–46 (1999)
[59] Vanneschi, L., Pirola, Y., Collard, P.: A quantitative study of neutrality in GP boolean
landscapes. In: GECCO 2006: Proceedings of the 8th Annual Conference on Genetic
and Evolutionary Computation, pp. 895–902. ACM, New York (2006)
[60] Vanneschi, L., Tomassini, M., Collard, P., V´erel, S., Pirola, Y., Mauri, G.: A Com-
prehensive View of Fitness Landscapes with Neutrality and Fitness Clouds. In: Ebner,
M., O’Neill, M., Ek´art, A., Vanneschi, L., Esparcia-Alc´azar, A.I. (eds.) EuroGP 2007.
LNCS, vol. 4445, pp. 241–250. Springer, Heidelberg (2007)
[61] Vassilev, V.K.: Fitness Landscapes and Search in the Evolutionary Design of Digital
Circuits. Ph.D. thesis, Napier University (2000)
[62] Vassilev, V.K., Fogarty, T.C., Miller, J.F.: Information Characteristics and the Structure
of Landscapes. Evol. Comput. 8(1), 31–60 (2000)
[63] Vassilev, V.K., Fogarty, T.C., Miller, J.F.: Smoothness, Ruggedness and Neutrality of
Fitness Landscapes: from Theory to Application. In: Ghosh, A., Tsutsui, S. (eds.) Ad-
vances in Evolutionary Computing: Theory and Applications, pp. 3–44. Springer-Verlag
New York, Inc (2003)
[64] Wegener, I.: Complexity Theory – Exploring the Limits of Efﬁcient Algorithms.
Springer, Berlin (2005)
[65] Weinberger, E.: Correlated and Uncorrelated Fitness Landscapes and How to Tell the
Difference. Biol. Cybern. 63(5), 325–336 (1990)
[66] Wolpert, D.H., Macready, W.G.: No Free Lunch Theorems for Search. Technical Report
SFI-TR-95-02-010, Santa Fe Institute (February 1995),
http://ideas.repec.org/p/wop/safiwp/95-02-010.html
(accessed: November 7, 2011)
[67] Wolpert, D.H., Macready, W.G.: No Free Lunch Theorems for Optimization. IEEE
Trans. Evol. Comput. 1(1), 67–82 (1997)
[68] Xin, B., Chen, J., Pan, F.: Problem Difﬁculty Analysis for Particle Swarm Optimization:
Deception and Modality. In: GEC 2009: Proceedings of the First ACM/SIGEVO Sum-
mit on Genetic and Evolutionary Computation, pp. 623–630. ACM, New York (2009)
[69] Yang, X.S.: Fireﬂy Algorithms for Multimodal Optimization. In: Watanabe, O., Zeug-
mann, T. (eds.) SAGA 2009. LNCS, vol. 5792, pp. 169–178. Springer, Heidelberg
(2009)
[70] Yang, X.S., Deb, S.: Cuckoo Search via L´evy Flights. In: World Congress on Nature &
Biologically Inspired Computing, NaBIC 2009, pp. 210–214 (2009)

Chapter 5
Fitness Landscapes and Problem Difﬁculty in
Evolutionary Algorithms: From Theory to
Applications
Guanzhou Lu, Jinlong Li, and Xin Yao
Abstract. Above many successes of evolutionary algorithms in solving computa-
tionally hard optimisations problems, a major challenge in practice remains how to
select/construct the best suited algorithm when solving a problem. The well-known
no free lunch theorem rules out the possibility of developing one best algorithm gen-
erally suitable for solving all problems. Within the realm of algorithm selection in
general, the problem becomes how can we characterise problem hardness with ref-
erence to evolutionary algorithms (EAs). For the ﬁrst time, this chapter rigorously
derives a problem hardness measure from a theoretical difﬁculty measure widely
used in complexity theory of EAs. Furthermore, the proposed measure is applied
to construct an ofﬂine optimisation algorithm and an online optimisation algorithm.
On one hand, the measure is incorporated with a machine learning algorithm for
parameter tuning and achieves powerful performance. On the other hand, an adap-
tive algorithm framework is proposed and shows promising results. We argue that
the proposed measure is general, yet powerful as an indicator of EA-hardness, and
contribute to the goal of constructing better suited algorithms for solving problems.
Guanzhou Lu · Xin Yao
Joint USTC-Birmingham Research Institute in Intelligent Computation and Its Applications
The Centre of Excellence for Research in Computational Intelligence and Applications
(CERCIA), School of Computer Science, University of Birmingham, Edgbaston,
Birmingham, B15 2TT, UK
e-mail: {g.lu,x.yao}@cs.bham.ac.uk
Jinlong Li
Joint USTC-Birmingham Research Institute in Intelligent Computation and Its Applications
The Nature Inspired Computation and Applications Laboratory (NICAL),
School of Computer Science and Technology,
University of Science and Technology of China, Hefei, 230027, China
e-mail: jlli@ustc.edu.cn
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
133
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_5, c⃝Springer-Verlag Berlin Heidelberg 2014

134
G. Lu, J. Li, and X. Yao
5.1
Introduction
How do we determine if a problem is difﬁcult or easy for a given search heuristic?
An answer to this question was sought after in the ﬁeld of evolutionary computation
(EC) for over a decade. As of yet, no satisfactory answer has been found.
Many practical attempts have been made to deﬁne a measure of problem difﬁculty
for evolutionary algorithms (EAs), for example ﬁtness landscape analysis, ﬁtness-
distance correlation [17], correlation length and operator correlation [27], ﬁtness
variance [33], epistasis variance [8], amongst others. All of these measures aim to
act as a useful difﬁculty measure generally suitable for all problems. However, they
do not always describe problem difﬁculty correctly and counter-examples have been
identiﬁed.
From theoretical perspectives, He et al. [13] rigorously deﬁne difﬁculty mea-
sures and propose a classiﬁcation on realisations of difﬁculty measures. Assuming
a worst-case perspective, for both approximate and exact measures, He et al. [13]
have proven that realisations of predictive measures, i.e. polynomial-time imple-
mentations, do not exist unless P = NP or BPP = NP. In other words, to ﬁnd a
useful difﬁculty measure in general is impossible. However, this does not prevent
us from developing a useful measure to estimate the difﬁculty for a broad class of
problem instances in practice.
In this chapter, for the ﬁrst time we rigorously analyse the relationship between
the escape probability and the expected running time, a difﬁculty measure widely
used in complexity theory of EAs [32]. Based on the concept of escape probability,
we develop the ﬁtness-probability cloud (f pc) and accumulated escape probability
(aep). We argue that aep is the ﬁrst practical difﬁculty measure with a solid theo-
retical basis in complexity theory of EAs.
To build upon the existing work on ﬁtness landscapes and problem difﬁculty
measures, which mostly focus on analysing characteristics of problem structure and
algorithm behaviours, we aim to directly apply the difﬁculty measure to construct
better suited algorithms for a particular class of instances. Two distinctive classes of
applications (ofﬂine and online) are identiﬁed for the proposed difﬁculty measure:
The ﬁrst is to incorporate the measure with a support vector machine (SVM) learn-
ing algorithm to automate the parameter tuning of EAs for solving the unique input
output sequence problem (UIOP). The second is to build the difﬁculty measure as
the core decision maker into an adaptive EA for online optimisations.
The remainder of this chapter is organised as follows. Section 5.2 brieﬂy re-
views previous work on ﬁtness landscapes and problem difﬁculty measures. The
theoretical results on escape probability and expected running time are presented
in Section 5.3. Section 5.4 introduces the concept of a ﬁtness-probability cloud and
accumulated escape probability. Sections 5.5 and 5.6 present the applications of the
difﬁculty measure in an ofﬂine and an online optimisation algorithm, respectively.
Finally, we conclude in Section 5.7.

5
Fitness Landscapes and Problem Difﬁculty
135
5.2
Background
For over a decade, a considerable amount of research efforts have been devoted to
the studies of problem hardness with reference to EAs. The notion of ﬁtness land-
scapes, originally proposed in [40], underlies a large body of work in the literature.
It is generally agreed that the properties associated with ﬁtness landscapes can in-
dicate problem difﬁculty. For instance, the problem difﬁculty with reference to EAs
has been described using concepts of ruggedness, neutrality [38] and information
landscapes [3].
The concept of ﬁtness landscapes provides intuitive explanations of problem
hardness, however, it does not explicitly quantify difﬁculty as a numerical measure.
Therefore, it is desirable to have one or more algebraic values to capture key charac-
teristics of ﬁtness landscapes. Along this line of consideration, a signiﬁcant contri-
bution was made by Jones [17] through the introduction of a measure called ﬁtness
distance correlation (fdc), which has been evaluated empirically on a large num-
ber of genetic algorithm (GA) and genetic programming (GP) benchmarks showing
considerable effectiveness. However, fdc still has some drawbacks with the most
severe one being that the global optima have to be known beforehand, preventing
fdc from being applied to real-world problems. This limitation has been overcome
by the introduction of the ﬁtness cloud (fc) [5] and the negative slope coefﬁcient
(nsc) [37] as a measure based on fc. Unfortunately fc also has its own weakness:
experimental analysis has shown that nsc is drastically inﬂuenced by the neighbour-
hood sample size K in generating it. In practice, nsc is unable to serve as an accurate
measure unless an appropriate K is selected [24].
5.3
Escape Probability versus Expected Runtime Time
This work aims to address the problem of developing a useful difﬁculty measure in
both theory and practice. In the context of EAs, a predictive difﬁculty measure is
thought to be useful if it can discriminate the hardness of a particular problem with
respect to different EAs, which is needed in choosing the best suited algorithm to
solve the problem. Apart from many existing practical measures mentioned above,
there exists a number of studies into problem hardness in complexity theory [32],
a widely used one being the expected running time of the algorithm on the ﬁtness
function, which is usually taken as a measure of difﬁculty of the ﬁtness function for
the algorithm.
The notion of escape probability (escape rate) was used by Merz [30] in analysing
the use of random walks to escape from the basins of attractions of current local op-
tima. In theoretical runtime analysis of EAs, He and Yao [14] proposed an analytic
way to estimate the mean ﬁrst hitting time of an absorbing Markov chain, in which
the transition probability between states were used.
Below we deﬁne the concept of the escape probability and carry out a rigorous
analysis of the relationship between the escape probability and the expected running
time. The results show that the escape probability is positively correlated with the

136
G. Lu, J. Li, and X. Yao
expected running time and therefore can, in theory, reliably indicate the problem
difﬁculty. This chapter provides the ﬁrst study of linking escape probability with the
expected running time.
5.3.1
Preliminaries
We model the evolution of an EA as a time-homogeneous Markov chain. Therefore,
the transition matrix P is the same after each step, the k−step transition probability
can be computed as the k −th power of the transition matrix Pk. Below is a list of
deﬁnitions of notations used in the derivation:
• Running time mi: On a problem instance, mi is the average time cost of an EA to
reach one of the optima when search starts from solution i, i = 1,2,...,n, where
n is the total number of solutions.
• The escape probability,pe
i = ∑pij
j,Fj>Fi
, where F is the ﬁtness function, and i, j =
1,2,...,n, pe
i , represents the probability of escaping from solution i to a strictly
better solution;
• Column sum in probability transition matrix, P, ci = ∑n
j=1 p ji, where i = 1,2,
...,n;
• Let P(k) = Pk, and c(k)
i
= ∑n
j=1 p(k)
ji , where i, j = 1,2,...,n, and k = 1,2,3,...
5.3.2
Derivation of the Mathematical Equation between Escape
Probability and Expected Running Time
Equation (5.1) below shows that mi can be computed as the runtime of the search
starting from j by mj times pij plus one, where i and j are adjacent solutions with
distance one:
mi =
n
∑
j=1
mjpij + 1,i = 1,2,...,n
(5.1)
Equation (5.1) can be rewritten as:
mi =
n
∑
j=1
(mj + 1)pij = ∑
j̸=i
(mj + 1)pij + mipii
(5.2)
The sum of mi is:

5
Fitness Landscapes and Problem Difﬁculty
137
∑
i
mi =
n
∑
i=1∑
j
(mj + 1)pij = ∑
j
n
∑
i=1
(mj + 1)pij
= ∑
j
mj
n
∑
i=1
pij +∑
j
n
∑
i=1
pij
= ∑
j
mjcj + n
(5.3)
Equation (5.4) below shows the computation of mi as a time series:
mi = 1 ∗pe
i +∑
j̸=i
mjp(1)
ij
+ 2 ∗(1 −pe
i)1pe
i +∑
j̸=i
mjp(2)
ij
+ ...
+ k ∗(1 −pe
i)k−1pe
i +∑
j̸=i
mjp(k)
ij
+ ...
(5.4)
Summing both sides of Equation (5.4) we obtain the following:
∑
i
mi = ∑
i
1/pe
i + ∑
k>0
(∑
j
mj(c(k)
j −p(k)
j j ))
= ∑
i
1/pe
i +∑
j
mj ∑
k>0
(c(k)
j −p(k)
j j )
(5.5)
By solving the system of equations formed by Equations (5.3) and (5.5):

∑i mi = ∑i 1/pe
i + ∑j mj ∑k>0(c(k)
j −p(k)
j j )
∑i mi = ∑j mjcj + n
(5.6)
The equation between escape probability and expected running time can be
obtained:
∑
i
1/pe
i −n = ∑
k>1∑
i
mi(−c(2)
i
−c(3)
i
−...−c(k)
i
+ p(1)
ii + p(2)
ii + ...+ p(k)
ii )
(5.7)
As we see from the above equation, on the left is the reciprocal sum of the escape
probabilities minus a constant n. On the right is the expected running time; the
coefﬁcients ∑k>1 ∑i mi(−c(2)
i
−c(3)
i
−...−c(k)
i
+ p(1)
ii + p(2)
ii + ...+ p(k)
ii ) constitute
for the weights of mi for computing the expected value of mi, namely, the expected
running time.
According to the relationship between escape probability and the expected run-
ning time established in Equation (5.7), the larger the reciprocal sum of the escape
probability, the larger the expected running time. In sum, we can use the escape

138
G. Lu, J. Li, and X. Yao
probability as an indication of the expected running time, as well as estimating the
expected running time based on values of escape probability.
5.4
Fitness-Probability Cloud
From the results presented in Section 5.3, the escape probability is a theoretically
reliable difﬁculty measure derived from the expected running time, a difﬁculty mea-
sure widely used in complexity theory of EAs. However, the mere deﬁnition of the
escape probability is not sufﬁcient for it to be used as an effective difﬁculty mea-
sure in practice. In this section we build on the deﬁnition of escape probability and
propose the ﬁtness-probability cloud and accumulated escape probability as the ﬁrst
difﬁculty measure with solid theoretical basis in complexity theory of EAs.
5.4.1
Deﬁnition of Fitness-Probability Cloud
5.4.1.1
Escape Probability
F = { f0, f1,..., fL
|
f0 < f1 < ··· < fL} denotes the distinctive set of all possible
ﬁtness values of the ﬁtness function. Let us partition the entire set of solutions in the
search space into L + 1 sets according to their ﬁtness values. For a solution with
ﬁtness value fi, Si denotes the average number of steps required for it to reach a
solution with better ﬁtness. The escape probability P(fi) is deﬁned as follows:
P(fi) = 1
Si
.
(5.8)
The greater the escape probability is for a particular fi, the easier it is to reach a
better ﬁtness from the corresponding ﬁtness level.
5.4.1.2
Fitness-Probability Cloud
We can extend the deﬁnition of escape probability to be on a set of ﬁtness values.
Pi denotes the average escape probability for individuals of ﬁtness value equal to or
above fi and is deﬁned as:
Pi = ∑f j∈Ci P(f j)
|Ci|
,
(5.9)
where Ci = { f j|j ≥i}. If we take into account all the Pi for a given problem, this
would be a good indication of the degree of evolvability of the problem. The ﬁtness-
probability cloud (f pc) is deﬁned as:
f pc = {(f0,P0),...,(fL,PL)}.
(5.10)

5
Fitness Landscapes and Problem Difﬁculty
139
5.4.1.3
Accumulated Escape Probability
Based on the concept of f pc, a numerical measure called accumulated escape prob-
ability (aep) is deﬁned:
aep = ∑fi∈F Pi
|F|
.
(5.11)
The aep is actually the average value of Pi across F. By deﬁnition of escape prob-
ability P(fi) and Pi, it is clear to see that aep can measure the problem hardness in
the following way: the larger the value of aep, the easier the problem is with respect
to the given EA.
5.4.2
Methodology for Generating fpc
Here we describe the methodology in generating the f pc for a given problem and an
operator. The size of the search space is exponentially large and does not allow con-
sideration of all individuals, therefore sampling is required. Since not all solutions
in the search space are equally important, it is preferred to sample the space accord-
ing to a distribution that gives higher weight to individuals of higher ﬁtness values.
In fact, this can be achieved by using a Metropolis method or any other equivalent
method [26]. In our case, we chose to use the Metropolis-Hastings sampling method
described in [36].
For each sampled point, the escape probability is estimated by computing the
proportion of potential better moves out of the entire neighbour set generated by one
application of the genetic operator. The larger the number of neighbours sample, the
more accurate the estimated escape probability would be. Hereinafter we refer to F
as the set of distinctive ﬁtness values of the sampled individuals obtained with the
Metropolis-Hastings method, and for each fi ∈F, Pi is the estimated average escape
probability computed from the sampled neighbourhood set.
5.4.3
Test Problems
5.4.3.1
Unitation Functions
Three unitation functions: OneMax, Trap, OneMix [29] are used.
Deﬁnition 5.1. Let s be a bit string of length l, the unitation u(s) of s is a function
deﬁned as: u(s) =
l
∑
i=1
si.
OneMax functions are generalisations of the unitation u(s) of a bit string s:
f(s) = d ·u(s), where d is 1.
The Trap function [9] is deﬁned as follows:

140
G. Lu, J. Li, and X. Yao
f(s) =

a
z (z−u(s)),
if
u(s) ≤z
b
l−z(u(s)−z),
otherwise
(5.12)
where a represents a local optimum and b is a global optimum, z is a slope-change
location.
The OneMix function is a mixture of the OneMax function and the ZeroMax
function, which is formally deﬁned as:
f(s) =

(1 + a)( l
2 −u(s))+ l
2,
if
g(s)
u(s),
otherwise
(5.13)
where a represents a constant above zero and g(s) is equal to 1 when u(s) is even
and u(s) < l
2.
5.4.3.2
Subset Sum Problem
The Subset Sum problem is a constrained optimisation problem. Given a set of n
items each with an associated weight w, the problem is to select a subset out of n
items, where the weighted sum is maximised and does not exceed the budget W.
Mathematically this problem is formulated as follows:
Maximise
n
∑
i=1
wixi,
(5.14)
Subject to
n
∑
i=1
wixi ≤W,
xi ∈{0,1},
W = ∑n
i=1wi
2
.
(5.15)
5.4.4
Experimental Results
Once a measure of problem hardness and the way to compute it have been chosen,
the problem remains to ﬁnd a means to validate the prediction of the measure with
respect to the problem instance and the algorithm. The easiest way is to use a perfor-
mance measure [31]. Since the optimal solution to practical problems are unknown,
we use the number of ﬁtness evaluations until a certain stopping criterion is satisﬁed
as the performance measure.
Then we evaluate the effectiveness of the ﬁtness-probability cloud and the prob-
lem hardness measure accumulated escape probability (aep) on four different test
problems: OneMax, Trap, OneMix and Subset Sum. For each test problem, four
problem instances are generated with problem size varying from 20 to 200. To ex-
perimentally conﬁrm the predictions given by the aep measure, we use the mutation-
based (μ + λ)EA (μ denotes the number of parents, λ the number of offspring) with
the following characteristics: mutation operator with ﬂip probability 1/n for each
bit (bitwise mutation), the algorithm stopped if there is no improvement after 500
ﬁtness evaluations. For each problem instance, 100 independent executions were
performed.

5
Fitness Landscapes and Problem Difﬁculty
141
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0.4
Fitness−Probability Cloud
Fitness Value
Average Escape Probability Pi
trap
onemax
subset
onemix
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
Fitness−Probability Cloud
Fitness Value
Average Escape Probability Pi
trap
onemax
subset
onemix
(a) Problem size 20
(b) Problem size 40
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
Fitness−Probability Cloud
Fitness Value
Average Escape Probability Pi
trap
onemax
subset
onemix
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
Fitness−Probability Cloud
Fitness Value
Average Escape Probability Pi
trap
onemax
subset
onemix
(c) Problem size 80
(d) Problem size 200
Fig. 5.1 Plot of Fitness-Probability Cloud for Four Test Problems of Problem Sizes 20, 40,
80 and 200
We applied the approach described in Section 5.3 to generate f pc and calculate
the value of the corresponding aep. For each problem instance, 1000 samples were
obtained using the Metropolis-Hastings sampling method. For each sampled point,
the bitwise mutation operator was used to generate 10000 neighbours in order to
estimate the escape probability. Under the above parameter settings, we generate
the ﬁtness-probability clouds for four test problems of problem sizes 20, 40, 80 and
200. The results are illustrated in Figure 5.1(a)to Figure 5.1(d), respectively. With
the ﬁtness-probability cloud generated, we can then apply the method deﬁned in
Section 5.3 to compute the accumulated escape probability (aep). We then contrast
predictions of aep to the performance from actual runs deﬁned above. For the sake
of comparison, we also compute the values of nsc [37]. If nsc = 0, the problem is
easy; if nsc < 0 the problem is difﬁcult and the value of nsc quantiﬁes this difﬁculty:
the smaller its value, the more difﬁcult the problem. The experimental results are
summarised in Table 5.1.

142
G. Lu, J. Li, and X. Yao
Table 5.1 aep Predictions vs. Actual Performance for Four Problems of Size 20, 40, 80 and
200. Column 3 to 5 are the number of ﬁtness evaluations taken by three different (μ+λ) EAs.
Problem
Problem Size (1+1) EA (3+7) EA (7+3) EA
aep
nsc
OneMax
20
641
1166
1110
0.135
0
Trap
20
627
1158
1105
0.135
0
OneMix
20
745
1375
1330
0.09
-8.1932
Subset Sum
20
548
1009
928
0.22
-1.1572
OneMax
40
821
1434
1430
0.175
-0.333
Trap
40
829
1422
1438
0.182
0
OneMix
40
1028
1776
1728
0.105 -16.3114
Subset Sum
40
533
1009
928
0.239
-6.818
OneMax
80
1267
2002
2134
0.202
-0.5
Trap
80
1273
2004
2115
0.209
-0.25
OneMix
80
1609
2608
2678
0.121 -20.4879
Subset Sum
80
547
1015
936
0.246
-7.5286
OneMax
200
2640
3848
4221
0.225
-3
Trap
200
2590
3860
4242
0.222
0
OneMix
200
3070
4724
4952
0.121
-30.175
Subset Sum
200
534
1021
945
0.252
-8.6169
In terms of the deﬁned performance measure, the relevant problem hardness of
the four test problems remains the same across problem sizes of 20, 40, 80, and 200.
Among different problems, the order of problem difﬁculty indicated by the perfor-
mance measure is: Subset Sum < OneMax ≈Trap < OneMix. If we look at the
order of problem hardness indicated by the aep measure, by deﬁnition of the aep,
the smaller the aep value, the more difﬁcult the problem is, it is clear that aep con-
sistently orders the hardness of the four test problems across all four problem sizes,
with results in qualitative agreement with the actual performance. However, the aep
is unable to quantify the magnitude of the difference in problem hardness among
those problems. In contrast to the correct predictions made by the aep measure, as
we can see from Table 1, the results given by nsc do not correspond to the actual
performance. Consequently, the nsc fails to correctly predict the relevant problem
hardness among OneMax, Trap, OneMix and Subset Sum.
5.5
Parameter Learning Method Using Fitness-Probability
Cloud for the Unique Input Output Sequence Problem
This section shows how the difﬁculty measure aep is incorporated within a machine
learning method to construct an ofﬂine algorithm for tuning EAs to solve the unique
input output sequence problem.

5
Fitness Landscapes and Problem Difﬁculty
143
5.5.1
Motivation
Finite state machines (FSMs) have been usually used to model software, communi-
cation protocols and circuits [19]. The unique input output sequence (UIOS) prob-
lem is mostly used for testing ﬁnite state machines [11, 12]. To determine whether
a given state has an UIOS or not is an NP-hard problem [19]. The UIOS problem
has been reformulated as an optimisation problem, and several EAs have been de-
veloped to tackle it [10, 11].
It is widely acknowledged that good parameter values are essential for good EA
performance, in the meantime, tuning EA parameters stands as one of the persisting
challenges in the ﬁeld of EC. Previous work revealed that 90% of the time is spent on
ﬁne-tuning algorithm parameter settings [1]. Most existing approaches for parame-
ter tuning attempt to ﬁnd one best parameter setting for an EA to solve all instances
of the same problem or at least a class of instances [2, 16, 28]. Others used problem
dependent features to characterise the problem instances and the feature selection
process relies heavily on the domain knowledge. For example, SATzilla [41] uses
48 features mostly speciﬁed to the SAT problem to construct per-instance algorithm
portfolios. A problem-independent feature represented by a behaviour sequence of
a local search procedure is used to perform instance-based automatic parameter tun-
ing [23].
The ﬁtness-probability cloud (f pc) has demonstrated to be an appropriate char-
acterisation of ﬁtness landscapes and does not require any a priori knowledge. We
incorporate the f pc within a support vector machine(SVM) learning algorithm to
automate the parameter tuning of EAs for solving the UIOS problem [22].
5.5.2
Preliminaries
Deﬁnition 5.2. (Finite State Machine). A ﬁnite state machine (FSM) is a quintuple,
M = (S,X,Y,δ,λ), where X,Y and S are ﬁnite and nonempty sets of input sym-
bols, output symbols, and states, respectively; δ : S×X −→S is the state transition
function, and λ : S× X −→Y is the output function.
Deﬁnition 5.3. (Unique Input Output Sequence). An unique input output sequence
for a given state si is an input/output sequence x/y, where x ∈X∗,y ∈Y∗,∀sj ̸= si,
λ(si,x) ̸= λ(sj,x) and λ(si,x) = y.
To generate an UIOS using an EA, candidate solutions are represented by input
strings restricted to Xn = {0,1}n, where n is the number of states of the FSM. In
general, the length of the shortest UIOS is unknown. Assume the objective is to
search for an UIOS of input string length n for state s1 in all FSM instances. The
ﬁtness function is deﬁned as a function of the state partition tree [11, 20, 21].
Deﬁnition 5.4. (UIOS ﬁtness function [20, 21]). For a FSM M with n states, the
ﬁtness function f : Xn −→N is deﬁned as f(x) := n−γM(s,x), where s is the initial
state for which we want to ﬁnd an UIOS, and γM(s,x) := |{t ∈S|λ(s,x) = λ(t,x)}|.

144
G. Lu, J. Li, and X. Yao
There are |X|n candidate solutions with n −1 different ﬁtness values. A candidate
solution x∗is a global optimum if and only if x∗produces an UIOS and f(x∗) =
n −1.
5.5.2.1
Target Algorithm and Its Parameters
The (μ + λ)−EAs described in Algorithm 1 are employed to solve the UIOP, with
three parameters to tune: population size, neighbourhood operator, and selection
operator. Their candidate settings are listed below:
• Population size: We provide 3 different (μ + λ) options: {(4 + 4),(7 + 3),(3 +
7)}.
• Neighbourhood operator Nj,(j = 1,2,...,12): There are 3 types of neighbor-
hood operators with different mutation probabilities:
– N1(x) ∼N5(x): Bit-wised mutation, ﬂip each bit with probability p = c/n,
where c ∈{0.5,1,2,n/2,n −1};
– N6(x) ∼N9(x): ﬂip c-th bits, where c = {1,2,n/2,n −1};
– N10(x) ∼N12(x): Non-uniform mutation [4], for each bit i,1 ≤i ≤n, ﬂip it
with probability χ(i) = c/(i+ 1), where c = {0.5,1,2}.
In total 12 neighbourhood operators are used, and then 12 ﬁtness-probability
clouds are generated to characterize an UIOS instance.
• Selection operator Si,(i = 1,2): Two selection schemes are considered in this
paper:
– Truncation Selection: Sort all individuals in P(k) and P(k)
m by their ﬁtness val-
ues, then select μ best individuals as the next generation P(k+1).
– Roulette Wheel Selection: Retain all the best individuals in P(k) and P(k)
m di-
rectly, and the rest of the individuals of the population are selected by roulette
wheel selection.
Algorithm 1. (μ + λ)- Evolutionary Algorithms
Choose μ initial solutions P(0) = {x(0)
1 ,x(0)
2 ,...,x(0)
μ } uniformly at random from {0,1}n
k ←−0
While termination criterion is not met P(k)
m ←−Nj(P(k)) %%mutation operator
P(k+1) ←−Si(P(k),P(k)
m )
%%selection operator
k ←−k +1
For a given UIOS instance, there are 72 different combinations of parameters that
are viewed as 72 different EA parameters settings, and our goal is to ﬁnd ‘good’
settings for a given UIOS instance. The stopping criterion used in Algorithm 1 is
satisﬁed when an UIOS has been found.

5
Fitness Landscapes and Problem Difﬁculty
145
5.5.3
fpc-Based Parameter Learning Method
The framework of selecting an EA parameter setting consists of two phases. In
brief, an EA parameter setting predictor is trained using the support vector machine
(SVM) learning algorithm at ﬁrst. In the second phase, when a new UIOS instance
is fed into the predictor, the features are generated and fed to the predictor in or-
der to ﬁnd good parameter settings for the instance. This two-phase framework is
illustrated in Figure 5.2.
Fig. 5.2 The two-phase framework in parameters tuning
5.5.3.1
First Phase: Training the Predictor
First of all, the structure of the training data is introduced and denoted by a tuple
D = (F,PC,L). In tuple D, F represents the features of a problem instance. For an
UIOS instance, the features are a vector of aep values [24]. One neighbourhood
operator produces one distinctive ﬁtness landscape as well as a ﬁtness-probability
cloud; the more neighbourhood operators applied to a problem instance, the more
features of it can be generated. This paper adopts 12 mostly used neighbourhood
operators in the literature to generate 12 ﬁtness-probability clouds for characterizing
an UIOS instance.
PC of tuple D denotes the ID of an EA parameter setting. Each problem instance
represented by its features F is solved by the target algorithm with 72 parameter
settings. The performances of these settings are measured by the number of function
evaluations. The number of function evaluations of parameter setting j on problem
instance i is denoted by Eij, j = 1,2,...,72.
L is a binary variable, L = {good, bad}. L indicates whether the parameter setting
is good or not, which is determined by a threshold value v. L is good if the number
of function evaluations is below v.

146
G. Lu, J. Li, and X. Yao
To generate training data, we randomly select some problem instances at ﬁrst.
P = {p1, p2,..., pm} denotes the set of m problem instances. For each problem in-
stance, we have a set of neighbourhoodoperators Ni,i = 1,2,...,12 to generate a set
of aep values as its features. L is then instantiated by executing EAs with different
parameter settings on the set of problem instances.
The data sets used are imbalanced and with small sample sizes. In light of these
characteristics, the choice of the machine learning algorithm becomes clear. The
support vector machine is a popular machine learning algorithm which handles
small samples well. It is therefore employed to train the predictor of good EA pa-
rameter setting of the UIOS instances.
5.5.3.2
Second Phase: Predicting Good EA Parameter Settings
When a new UIOS instance comes in, its features (aep1,aep2 ...,aep12) are gener-
ated and fed to the predictor to ﬁnd good EA parameter settings for the correspond-
ing instance.
5.5.4
Experimental Results
In order to test our framework on the UIOP, 24 UIOS instances have been generated
at random. The problem size, n, of all instances is 20. We applied the approach
described in Section 5.3 to generate the training data. In the ﬁrst phase of the training
predictor, we ran and EA with each parameter setting on each UIOS instance for 100
times and take the average number of function evaluations. The stopping criterion is
when an UIOS is found. For each UIOS instance, 72 training samples are generated
from 72 different parameter settings. In total we have 1728 samples. The 10 × 10-
fold cross validation was adopted to evaluate our method.
We are interested in ‘good’ EA parameter settings (gEAPC) for every instance,
and the best EA parameter setting having the smallest ﬁtness evaluations on an
instance was labeled ‘good’ in our experiments, the remaining 71 settings were la-
belled ‘good’ or ‘bad’ depending on the differences between their ﬁtness evaluations
and the threshold value v. We let v = pr × ¯Ei, where ¯Ei is the mean value of ﬁtness
evaluations on instance i and pr replaces v to regulate the number of gEAPC.
As shown in Table 5.2, the number of gEAPC (2nd column ‘#gEAPC’) in all
1728 samples was decreasing while we were reducing pr. For an UIOS instance
there exists at least one gEAPC, the ideal output of the predictor would be a single
best gEAPC. The number of gEAPC is inﬂuenced by the value of pr. If it is large,
almost half of the settings are labelled ‘good’. The smaller the value of pr, the less
gEAPC we will have, but the correct rate of predicting gEAPC, denoted by sg in
Table 5.1, is decreasing when pr is smaller than 0.1. Furthermore, we found out that
more and more instances have no gEAPC predicted when decreasing the value of
pr. The 4th column of Table 5.1 is ‘no’ if there existed any testing instance without
a predicted gEAPC. Table 5.1 shows that the best value of pr was 0.11 and there are
about 267 gEAPC and all instances will have at least one predicted gEAPC.

5
Fitness Landscapes and Problem Difﬁculty
147
Table 5.2 Correct rates of predicting gEAPC with different values of pr. Values of sg in 3rd
column, the average of 10 × 10 fold cross validation, is the proportion of gEAPC that have
been correctly classiﬁed.
pr
#gEAPC
sg
gEAPC found?
0.7
1180
0.500
yes
0.6
1115
0.510
yes
0.5
1007
0.709
yes
0.45
955
0.690
yes
0.4
874
0.689
yes
0.35
806
0.685
yes
0.3
716
0.726
yes
0.25
604
0.689
yes
0.2
489
0.653
yes
0.18
441
0.656
yes
0.16
391
0.709
yes
0.15
377
0.694
yes
0.14
343
0.698
yes
0.135
328
0.632
yes
0.13
326
0.687
yes
0.125
306
0.875
yes
0.12
299
0.764
yes
0.115
286
0.903
yes
0.11
267
0.933
yes
0.1
237
0.925
no
0.09
200
0.861
no
0.08
177
0.864
no
0.05
71
0.782
no
0.01
50
0.620
no
5.5.5
Discussions
EA parameters setting signiﬁcantly affects the performance of the algorithm. The
f pc-based parameter learning method is presented here. The framework is instance-
based, through which the EA can be tuned with good parameter settings for a new
problem instance based on its features characterised by ﬁtness-probability clouds.
On the UIOP the experimental results showed that by properly setting the values of
v or pr, a small set of good settings could be discriminated and for each instance
there exists at least one good parameter setting.
Future work includes to test the proposed method on a wider range of problems,
and to investigate more machine learning algorithms other than the support vector
machine when the training sample is small. Furthermore, an in-depth analysis of the
time cost of the proposed method would be carried out.

148
G. Lu, J. Li, and X. Yao
5.6
A fpc-Based Online Adaptive Evolutionary Algorithm
This section proposes to incorporate the difﬁculty measure aep with adaptive EAs
to perform online optimisation.
5.6.1
Motivation and Background
It has long been acknowledged that the choice of operator settings has a signiﬁcant
impact upon evolutionary algorithm (EA) performance. However, ﬁnding a good
choice is somewhat difﬁcult. In contrast, there is evidence, both empirical and the-
oretical, that the most effective operator settings do vary during the course of an
EA run [35]. The problem of devising such a schedule to adapt the operator set-
tings along the search progress, is almost certainly as hard as ﬁnding a good static
set of operator settings. One key problem concerns the criterion used to judge the
performance of candidate operator settings at a given point in the search process.
Looking at the literature, the problem of developing an effective adaptive algo-
rithm has long been recognised. In general, two classes of adaptation methods have
been distinguished [34]:
• Self-adaptation: the values of the operator probabilities are directly encoded in
the representation of the individual solutions.
• Adaptive Rules: the search strategy is dependent on the state of the EA run.
Self-adaptation is particularly applied for numerical optimisation. Adaptive rules
are more interesting as they can be applied to solve combinatorial optimisation prob-
lems as well. Looking at the literature it becomes clear that most of the existing
adaptive rules belong to the probability matching type [6, 15, 35, 39]. Alternative
rules include adaptive pursuit method [34] and the operator selection mechanism
using the multi-armed bandit paradigm [7].
Previous work has seen some success along the years like in [18]. However, we
have identiﬁed three major limitations of the existing approaches: First, they all
work with a static set of candidate operator settings, whilst adapting the probabili-
ties of applying them, therefore limiting the adaptivity that can be provided. Further-
more, the use of the search state information by their decision-making mechanisms
are efﬁcient but not sufﬁcient. Apart from the aforementioned, most previous mech-
anisms assume operators that produced better offspring in the past are supposed to
perform better in the future. This assumption seems to lack sufﬁcient justiﬁcation
in that past performance does not necessarily reﬂect the potential of operators to
further improve the ﬁtness quality.
5.6.2
Algorithm Description
In the proposed f pc-based adaptive evolutionary algorithm, we introduce a variable
set of candidate operator settings to allow greater adaptivity. To address other issues
mentioned above, it seems promising to introduce the difﬁculty measure into the

5
Fitness Landscapes and Problem Difﬁculty
149
algorithm, for the reason that as the search proceeds, the difﬁculty measure can
exploit the information about the evolutionary progress, and indicate the most suited
operator with respect to the local landscape. Therefore, the f pc-based adaptive rules
are very promising in navigating the adaptation correctly [25].
For the ﬁrst time, we have incorporated the problem difﬁculty measure for EAs
with the online optimisation by introducing the f pc into an adaptive evolutionary
algorithm. The proposed algorithm is illustrated in Algorithm 2.
Algorithm 2. f pc-based Online Adaptive Evolutionary Algorithm
Require: Select an initial operator op = opini from the candidate set OP
while No improvement of quality of the best solution for Ga generations do
while No improvement of quality of the best solution for Gb generations do
Apply the operator op to obtain the new population P
end while
Select a subset of operators from OP
∀op ∈OP, ∀p ∈P, compute the number of steps Kp,op required to ﬁnd an improving
move, and record the set of better solutions obtained
Compute the measure mop and update the operator op with the operator obtain the best
value of the measure. Also update the population P.
end while
5.7
Conclusion
In this chapter, for the ﬁrst time we have proven the correlation between the escape
probability and the expected running time, a difﬁculty measure widely used in com-
plexity theory of EAs. Furthermore, we have proposed the ﬁtness-probability cloud
and accumulated escape probability to implement escape probability as a difﬁculty
measure applicable in practice. Experimental results on unitation functions and the
subset sum problem showed that the proposed measure is able to discriminate the
relevant problem hardness with respect to mutation-based EAs.
More importantly, promising applications of the proposed difﬁculty measure
have been found in both ofﬂine and online optimisations. On one hand, the f pc-
based parameter learning method for UIOS has demonstrated its effectiveness
through the experiments carried out on 24 UIOS instances. On the other hand, we
have proposed the f pc-based adaptive EA with the difﬁculty measure in its core for
decision-making.
Future work includes further investigation of the correlation between the escape
probability computed theoretically and its estimations in practice on problems with
known structure. Also to analyse the time complexity of the proposed adaptive EAs.
Acknowledgements. This work was partially supported by the European Union Seventh
Framework Programme under Engineering Proprioception in Computing Systems (EPiCS)
(257906), the EU FP7-PEOPLE-2009-IRSES project under Nature Inspired Computation and
its Applications (NICaiA) (247619), and the EPSRC grant Dynamic Adaptive Automated
Software Engineering (DAASE) (No. EP/J017515/1).

150
G. Lu, J. Li, and X. Yao
References
[1] Adenso-Diaz, B., Laguna, M.: Fine-Tuning of Algorithms Using Fractional Experimen-
tal Design and Local Search. Operations Research 54(1), 99–114 (2006)
[2] Birattari, M., Stuzle, T., Paquete, L., Varrentrapp, K.: A Racing Algorithm for Con-
ﬁguring Metaheuristics. In: Proceedings of the 4th Annual Conference on Genetic and
Evolutionary Computation, GECCO 2002, pp. 11–18. Morgan Kaufmann, San Fran-
cisco (2002)
[3] Borenstein, Y., Poli, R.: Information Landscapes and Problem Hardness. In: Proceed-
ings of the 2005 Conference on Genetic and Evolutionary Computation, GECCO 2005,
pp. 1425–1431. ACM, New York (2005)
[4] Cathabard, S., Lehre, P.K., Yao, X.: Non-uniform Mutation Rates for Problems with
Unknown Solution Lengths. In: Beyer, H.G., Langdon, W.B. (eds.) Foundations of Ge-
netic Algorithms (FOGA) XI, pp. 173–180. ACM, New York (2011)
[5] Collard, P., V´erel, S., Clergue, M.: Local Search Heuristics: Fitness Cloud versus Fit-
ness Landscape. In: Proceedings of the 16th European Conference on Artiﬁcial Intelli-
gence, ECAI, pp. 973–974. IOS Press, Amsterdam (2004)
[6] Corne, D.W., Oates, M.J., Kell, D.B.: On Fitness Distributions and Expected Fit-
ness Gain of Mutation Rates in Parallel Evolutionary Algorithms. In: Guerv´os, J.J.M.,
Adamidis, P.A., Beyer, H.-G., Fern´andez-Villaca˜nas, J.-L., Schwefel, H.-P. (eds.) PPSN
VII 2002. LNCS, vol. 2439, pp. 132–141. Springer, Heidelberg (2002)
[7] DaCosta, L., Fialho, A., Schoenauer, M., Sebag, M.: Adaptive Operator Selection with
Dynamic Multi-armed Bandits. In: Proceedings of the 10th Annual Conference on Ge-
netic and Evolutionary Computation, GECCO 2008, pp. 913–920. ACM, New York
(2008)
[8] Davidor, Y.: Epistasis Variance: A Viewpoint on GA-hardness. In: Rawlins, G.J.E. (ed.)
Foundations of Genetic Algorithms (FOGA), pp. 23–35. Morgan Kaufmann, San Fran-
cisco (1991)
[9] Deb, K., Goldberg, D.E.: Analyzing Deception in Trap Functions. In: Whitley, L.D.
(ed.) Foundations of Genetic Algorithms (FOGA) II, pp. 93–108. Morgan Kaufmann,
San Francisco (1993)
[10] Derderian, K., Hierons, R.M., Harman, M., Guo, Q.: Automated Unique Input Output
Sequence Generation for Conformance Testing of FSMs. The Computer Journal 49
(2006)
[11] Guo, Q., Hierons, R.M., Harman, M., Derderian, K.: Computing Unique Input/Output
Sequences Using Genetic Algorithms. In: Petrenko, A., Ulrich, A. (eds.) FATES 2003.
LNCS, vol. 2931, pp. 164–177. Springer, Heidelberg (2004)
[12] Guo, Q., Hierons, R., Harman, M., Derderian, K.: Constructing Multiple Unique
Input/Output Sequences Using Metaheuristic Optimisation Techniques. IET Soft-
ware 152(3), 127–140 (2005)
[13] He, J., Reeves, C., Witt, C., Yao, X.: A Note on Problem Difﬁculty Measures in Black-
box Optimization: Classiﬁcation, Realizations and Predictability. Evol. Comput. 15(4),
435–443 (2007)
[14] He, J., Yao, X.: Towards an Analytic Framework for Analysing the Computation Time
of Evolutionary Algorithms. Artiﬁcial Intelligence 145, 59–97 (2003)
[15] Hong, T., Wang, H., Chen, W.: Simultaneously Applying Multiple Mutation Operators
in Genetic Algorithms. Journal of Heuristics 6, 439–455 (2000)

5
Fitness Landscapes and Problem Difﬁculty
151
[16] Hutter, F., Hoos, H.H., Leyton-brown, K., Stuetzle, T.: ParamILS: An Automatic Al-
gorithm Conﬁguration Framework. Journal of Artiﬁcial Intelligence Research 36, 267–
306 (2009)
[17] Jones, T., Forrest, S.: Fitness Distance Correlation as a Measure of Problem Difﬁculty
for Genetic Algorithms. In: Proceedings of the 6th International Conference on Genetic
Algorithms, pp. 184–192. Morgan Kaufmann, San Francisco (1995),
http://portal.acm.org/citation.cfm?id=645514.657929
[18] Jong, K.D.: Parameter Setting in EAs: a 30 Year Perspective, pp. 1–18. Springer (2007)
[19] Lee, D., Yannakakis, M.: Testing Finite-State Machines: State Identiﬁcation and Veriﬁ-
cation. IEEE Transactions on Computers 43(3), 30–320 (1994)
[20] Lehre, P.K., Yao, X.: Runtime Analysis of (1+1) EA on Computing Unique Input Out-
put Sequences. In: IEEE Congress on Evolutionary Computation, 2007, pp. 1882–1889
(2007)
[21] Lehre, P.K., Yao, X.: Crossover Can Be Constructive When Computing Unique Input
Output Sequences. In: Li, X., et al. (eds.) SEAL 2008. LNCS, vol. 5361, pp. 595–604.
Springer, Heidelberg (2008)
[22] Li, J., Lu, G., Yao, X.: Fitness Landscape-based Parameter Tuning Method for Evo-
lutionary Algorithms for Computing Unique Input Output Sequences. In: Lu, B.-L.,
Zhang, L., Kwok, J. (eds.) ICONIP 2011, Part II. LNCS, vol. 7063, pp. 453–460.
Springer, Heidelberg (2011)
[23] Lindawati, Lau, H.C., Lo, D.: Instance-Based Parameter Tuning via Search Trajectory
Similarity Clustering. In: Coello, C.A.C. (ed.) LION 5 2011. LNCS, vol. 6683, pp.
131–145. Springer, Heidelberg (2011)
[24] Lu, G., Li, J., Yao, X.: Fitness-probability Cloud and a Measure of Problem Hardness
for Evolutionary Algorithms. In: Hao, J.-K. (ed.) EvoCOP 2011. LNCS, vol. 6622, pp.
108–117. Springer, Heidelberg (2011)
[25] Lu, G., Li, J., Yao, X.: Embrace the New Trend in SBSE with Fitness-Landscape Based
Adaptive Evolutionary Algorithm. In: Fast Abstracts of the 4th Symposium on Search
Based Software Engineering (2012)
[26] Madras, N.: Lectures on Monte Carlo Methods. American Mathematical Society, Rhode
Island (2002)
[27] Manderick, B., Weger, M.K., Spiessens, P.: The Genetic Algorithm and the Structure of
the Fitness Landscape. In: ICGA 1991, pp. 143–150 (1991)
[28] Maturana, J., Lardeux, F., Saubion, F.: Autonomous Operator Management for Evolu-
tionary Algorithms. Journal of Heuristics 16, 881–909 (2010)
[29] Mengshoel, O.J., Goldberg, D.E., Wilkins, D.C.: Deceptive and Other Functions of Uni-
tation as Bayesian Networks. In: Symposium on Genetic Algorithms, SGA (1998)
[30] Merz, P.: Advanced Fitness Landscape Analysis and the Performance of Memetic Al-
gorithms. Evol. Comput. 12, 303–325 (2004)
[31] Naudts, B., Kallel, L.: A Comparison of Predictive Measures of Problem Difﬁculty in
Evolutionary Algorithms. IEEE Transactions on Evolutionary Computation 4(1), 1–15
(2000)
[32] Papadimitriou, C.H., Steiglitz, K.: Combinatorial Optimization: Algorithms and Com-
plexity. Dover, Mineola (1998)
[33] Radcliffe, N.J., Surry, P.D.: Fitness Variance of Formae and Performance Prediction.
In: Whitley, L.D., Vose, M.D. (eds.) Foundations of Genetic Algorithms (FOGA) 3, pp.
51–72 (1995)

152
G. Lu, J. Li, and X. Yao
[34] Thierens, D.: Adaptive Strategies for Operator Allocation. In: Lobo, F., Lima, C.,
Michalewicz, Z. (eds.) Parameter Setting in Evolutionary Algorithms, vol. 54, pp. 77–
90. Springer, Heidelberg (2007)
[35] Tuson, A., Ross, P.: Adapting Operator Settings in Genetic Algorithms. Evol. Com-
put. 6(2), 161–184 (1998)
[36] Vanneschi, L., Clergue, M., Collard, P., Tomassini, M., V´erel, S.: Fitness Clouds and
Problem Hardness in Genetic Programming. In: Deb, K., Tari, Z. (eds.) GECCO 2004.
LNCS, vol. 3103, pp. 690–701. Springer, Heidelberg (2004)
[37] Vanneschi, L., Tomassini, M., Collard, P., V´erel, S.: Negative Slope Coefﬁcient: A
Measure to Characterize Genetic Programming Fitness Landscapes. In: Collet, P.,
Tomassini, M., Ebner, M., Gustafson, S., Ek´art, A. (eds.) EuroGP 2006. LNCS,
vol. 3905, pp. 178–189. Springer, Heidelberg (2006)
[38] Vassilev, V.K., Fogarty, T.C., Miller, J.F.: Smoothness, Ruggedness and Neutrality of
Fitness Landscapes: from Theory to Application, pp. 3–44. Springer, New York (2003)
[39] Whitacre, J., Pham, T., Sarker, R.: Credit Assignment in Adaptive Evolutionary Al-
gorithms. In: Proceedings of the 8th Annual Conference on Genetic and Evolutionary
Computation, GECCO 2006, pp. 1353–1360. ACM, New York (2006)
[40] Wright, S.: The Roles of Mutation, Inbreeding, Crossbreeding, and Selection in Evolu-
tion. In: Proc. 6th Congr. Genetics, vol. 1, p. 365 (1932)
[41] Xu, L., Hutter, F., Hoos, H., Leyton-Brown, K.: SATzilla: Portfolio-based Algorithm
Selection for SAT. Journal of Artiﬁcial Intelligence Research 32, 565–606 (2008)

Chapter 6
Geometry and Coarse-Grained Representations
of Landscapes
Konstantin Klemm, Jing Qin, and Peter F. Stadler
Abstract. Basic geometric notions describing the structure of landscapes as well
as the dynamics of local search on them include basins, saddles, reachability and
funnels. We focus on discrete, combinatorial landscapes and emphasize the com-
plications arising from local degeneracies. Local search in such landscapes is well
described by adaptive walks, which we use to deﬁne reachability of a target from an
initial conﬁguration. Reachability introduces a topological structure on the conﬁg-
uration space. Combinatorial vector ﬁelds (CVFs) provide a more powerful mathe-
matical framework in which the subtleties of local degeneracy can be conveniently
formalized. Stochastic search dynamics has a direct representation as a probability
space over the set of CVFs with the given landscape as a Lyapunov function. This
ensemble of CVFs is amenable to the framework of standard statistical mechanics.
The implications of landscape structure on search dynamics are elucidated further
by the fact that the set of all CVFs on a landscape has a product structure, factoriz-
ing over extended plateaus (so called shelves) of the landscape. Finally, we discuss
the coarse graining of landscapes from two perspectives. Traditionally, a partition-
ing (e.g. by gradient basins) of a given landscape is used to obtain a landscape with
Konstantin Klemm · Peter F. Stadler
Bioinformatics Group, Department of Computer Science, and Interdisciplinary Center
for Bioinformatics, University of Leipzig, H¨artelstrasse 16-18, 04107 Leipzig, Germany
e-mail: klemm@bioinf.uni-leipzig.de
Jing Qin · Peter F. Stadler
Max Planck Institute for Mathematics in the Sciences,
Inselstraße 22, 04103 Leipzig, Germany
e-mail: qin@bioinf.uni-leipzig.de
Peter F. Stadler
Fraunhofer Institut for Cell Therapy and Immunology,
Perlickstraße 1, 04103 Leipzig, Germany
Institute for Theoretical Chemistry, University of Vienna,
W¨ahringerstrasse 17, A-1090 Vienna, Austria
Santa Fe Institute, 1399 Hyde Park Rd., Santa Fe, NM87501, U.S.A.
e-mail: studla@bioinf.uni-leipzig.de
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
153
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_6, c⃝Springer-Verlag Berlin Heidelberg 2014

154
K. Klemm, J. Qin, and P.F. Stadler
fewer conﬁgurations called macrostates. A reverse, and less investigated, view on
coarse graining considers ﬁner landscapes, with a larger number of conﬁgurations
than the original one and a non-injective mapping into the original conﬁguration
space. Such encodings of landscapes, when suitably deﬁned, turn out advantageous
for optimization by adaptive walks.
6.1
Introduction
Combinatorial landscape theory provides a framework for the description of the
thermodynamics and kinetics of a large class of complex systems. It has proven to
be a valuable concept in evolutionary biology, combinatorial optimization and the
physics of disordered systems.
The notion of a “ﬁtness landscape” originated in theoretical biology as a tech-
nique to visualize evolutionary adaption in 1932 [39]. The basic ingredients are a
set of discrete genetic structures, a ﬁtness function used to evaluate every possible
structure and a “mutation” function measuring the feasibility of transitions between
pairs of different structures. Due to the combined effects of mutation and selection, a
population moves uphill/downhill on the landscape, which provides evolutionary in-
formation in the form of accessibility or reachability. The rationale behind this view
of evolution on a landscape gives rise to the inception of evolutionary algorithms
for global search or solving combinatorial optimization tasks such as the traveling
salesman problem. The equivalent notion of “energy landscapes” arose in physics as
a natural description of disordered systems. In spin glasses, for instance, each spin
conﬁguration is assigned an energy describing its Hamiltonian which speciﬁes the
model [1]. In theoretical chemistry, energy landscapes are viewed as discrete mod-
els to approximate the smooth potential energy surfaces [24]. In structural biology,
energy landscapes are used to understand the folding of biopolymers such as RNAs
and proteins into their three-dimensional structures [7].
In formal terms, a (combinatorial) landscape consists of a search space or conﬁg-
uration space X = (V,T ) and a ﬁtness or energy function f : V →R that evaluates
each conﬁguration. In general, T denotes a (generalized) topological structure on
V. In this contribution we will restrict ourselves to the simplest case, namely undi-
rected ﬁnite graphs G = (V,E) as search spaces. Similarly, we will assume that the
values of f are real numbers. We refer to [9] for some insights into landscapes over
recombination spaces and to [33] for landscapes whose values are elements of a
partially ordered set. For the sake of clarity we adopt the picture of physics and in-
terpret f as an energy function. Optimization thus seeks low energy conﬁgurations
by dynamics that tends to minimize f.
In this contribution we focus on geometric and topological features of landscapes,
i.e., on properties that arise from the interplay of the structure of G with the function
f. These are of particular interest for an understanding of processes on combinato-
rial landscapes that are governed by local transitions, including in particular a wide
variety of heuristic optimization algorithms from simulated annealing to genetic al-
gorithms. Although the relationship between dynamical processes on combinatorial

6
Geometry and Coarse-Grained Representations of Landscapes
155
landscapes and geometric properties of the landscape itself has been a long-standing
research problem, we still lack a satisfactory theory [27]. Some progress has been
made, however, in the analysis of the landscape structure itself. The hierarchical
structure of local minima and the barriers between their basins of attraction plays a
crucial role in this context.
6.2
Two Examples
Before we proceed, let us brieﬂy introduce two famous examples of combinatorial
landscapes:
(A) TSP landscapes. The traveling salesman problem (TSP) is probably the most
frequently studied combinatorial optimization problem. Each potential solution to
the TSP is a cyclic permutation among n cities, each city occurs once. The conﬁg-
uration space of the TSP landscape consists of all potential solutions of TSP. Each
conﬁguration is evaluated by the value of the distance of the total route. Two po-
tential solutions are adjacent in the underlying graph of the TSP landscape if their
corresponding permutations can be transformed from each other by exchanging the
positions of two cities.
(B) RNA landscapes. The RNA landscape may serve as a prototype for biophysi-
cally interesting landscapes. An RNA sequence can be viewed as a string over the
alphabet over four bases {A,U,G,C} of length n. Given an RNA sequence s, an
RNA secondary structure is identiﬁed as a simple graph with vertex set {1,...,n},
whose edge set consists of the edges {{i,i+ 1}|1 ≤i ≤n −1}, together with a fur-
ther collection of edges Ps such that if {i, j}, {k,ℓ} ∈Ps with i < j and k < ℓthen (i)
the particular base combinations at pairing position i and j (k and ℓ) must be AU,
GU, or GC; (ii) i = k if and only if j = ℓ; (3) k ≤j implies that i < k < ℓ< j. An
edge {i, j} contained in Ps is called a base pair. Those vertices not contained in a
base pair are called unpaired. Condition (i) implies that each vertex is allowed to
belong to at most one base pair. Condition (ii) excludes the formation of crossing
base pairs, i.e. pseudoknots. For a given RNA sequence, the number of all valid sec-
ondary structures grows exponentially with the sequence length n. Its conﬁguration
space of the RNA folding landscape consists of all the valid secondary structures.
Each secondary structure is called a conﬁguration in the landscape. The energy of
a secondary structure is calculated by RNAeval in the Vienna Package [14]
based on the loop energy model [21]. Two conﬁgurations x,y are adjacent in the
underlying graph, if y can be derived from x by adding or removing a base pair in x
(see Figure 6.1(A)).
6.3
Local Minima, Walks, and Degeneracy
In this section we introduce the basic notations and concepts. Throughout, we con-
sider a landscape (G, f) on a ﬁnite, undirected, connected graph G = (V,E) with a
real-valued energy function f : V →R. We reserve calligraphic letters for systems
of subsets of V and set-valued set functions on V, i.e., maps 2V →2V.

156
K. Klemm, J. Qin, and P.F. Stadler
(
.
.
.
(
.
5.5
6.3
.
C
A
A
U
C
U
C
.
.
.
.
(
(
.
.
(
(
C
A
A
U
C
U
C
C
A
A
U
C
U
C
C
A
A
U
C
U
C
.
.
.
(
(
.
.
.
.
.
.
(
(
5.8
5.8
0
.
.
.
.
.
.
C
A
U
C
U
A
C
.
(
.
.
.
(
.
.
C
A
A
U
C
U
C
5.6
(A)
1
10
3
4
2
7
6
8
9
5
11
12
13
14
15
16
17
19
18
(B)
Fig. 6.1 Energy landscapes. (A) The conﬁguration space G = (V,E) of the RNA sequence
AACCCUU consists of six secondary structures. Two structures x,y ∈V are adjacent, {x,y} ∈
E, if x can be obtained from y by adding or removing a single base pair. The folding energy
f (x) of a conﬁguration x is displayed in the box next to the structure. (B) Three types of
walks deﬁned on the landscape: a gradient walk 1 →9 →14 →19 in which 9 is the unique
gradient neighbor of 1, an adaptive walk 1 →2 →5 →12 →15 and a hill climbing walk
15 →13 →6 →3. The vertical arrow between panels (A) and (B) points in the direction of
increasing energy.
6.3.1
Neighbors and Minima
We write N(x) = {y|{x,y} ∈E} for the graph-theoretical neighborhood of a vertex
x in G. A vertex x ∈V is a local minimum of (G, f) if f(x) ≤f(y) for all y ∈N(x).
If f(x) < f(y), we call x a strict local minimum . A vertex x is a global minimum,
also called ground state if f(x) ≤f(y) for all y ∈V. Since V is ﬁnite, a global
minimum exists for all landscapes. It is not necessarily unique, however. The set of
local minima of (G, f) is denoted by M(G, f).
A vertex y ∈N(x) with f(x) = f(y) is a neutral neighbor of x. We write
N>(x) = {y ∈N(x)|f(x) > f(y)} and N>[x] = N>(x) ∪{x} and call x a drainage
point if N>(x) ̸= /0. Otherwise, x is a local minimum. Furthermore, we set N>(W) =

z∈W N>(z) for any subset W ⊆V.
We say that y ∈N(x) is a gradient neighbor of x if f(y) = min{ f(z) : z ∈N(x)}
and f(z) < f(x). Hence x has a gradient neighbor if and only if it is not a local
minimum. In general, a conﬁguration can have more than one gradient neighbor.
For computational purposes it is desirable to deﬁne a unique gradient neighbor
for each non-minimal vertex via introducing a total order L related to the energy
function f on the vertex set V. To be precise, this total order can be interpreted as an
energy sorted list, i.e. a bijective mapping L : {1,2,...,|V|} →V such that f(L(i)) ≤
f(L(j)) for any i, j with i < j ≤|V|. Given this total order L, a conﬁguration x ∈
V \ M(G, f) is assigned the unique gradient neighbor L(i) with i = min{ j : L(j) ∈
N(x)}, being the neighbor of x appearing earliest in this list.

6
Geometry and Coarse-Grained Representations of Landscapes
157
6.3.2
Walks and Paths
An adaptive walk in (G, f) is a sequence of conﬁgurations w1,w2,...,wℓsuch that
{wi−1,wi} ∈E and f(wi−1) ≥f(wi) for all 1 < i ≤ℓ. Adaptive walks are often called
hill-climbing walks in the context of maximization: A walk is a hill-climbing walk
on (G,−f) if and only if it is an adaptive walk on (G, f). Hill climbing walks are
useful as a technical device for minimization problems in Section 6.4. A gradient
walk is an adaptive walk w1,w2,...,wℓsuch that wi is a gradient neighbor of wi−1
for 1 < i ≤ℓ. Gradient walks are often called best-improvement or steepest-descent
local search. We illustrate these three types of walks in Figure 6.1(B). A neutral
walk in (G, f) is an adaptive walk such that wi is a neutral neighbor of wi−1 for 1 <
i ≤ℓ. Note that by deﬁnition every neutral walk is also an adaptive walk. Conversely,
an adaptive walk is neutral if and only if f(w1) = f(wℓ).
A path is a walk in which no two vertices are visited twice. In particular, every
gradient walk is a path. Furthermore, we note that every walk contains a path that
is obtained by removing every part of a walk that leads from a vertex back to itself.
Since G is ﬁnite, every path is necessarily ﬁnite as well.
6.3.3
Degeneracy, Plateaus, and Shelves
Major technical complications in the analysis of discrete landscapes arise from de-
generacy, i.e., the presence of distinct vertices with the same value of f. A landscape
(G, f) is non-degenerate if f(x) = f(y) implies x = y. This condition is too strong
for most practical applications since many landscape models have symmetries that
lead to degeneracies. For instance, the tours in a TSP can start and end in any city
along the way without changing the travel cost. Figure 6.2 is an illustration of a
highly degenerate landscape.
Denote by Gf (x) the connected component of the induced subgraph with vertex
set {z ∈V|f(z) = f(x)} such that x ∈Gf (x). In the local search literature, Gf (x)
is often called a plateau or neutral network [36]. Every neutral walk with starting
conﬁguration x is by construction conﬁned to Gf (x). The relation x ∼f y deﬁned in
V by x ∼f y ⇔y ∈Gf (x) is an equivalence relation and thus Π = {Gf (x)|x ∈V} is
the set of all the equivalence classes in V. Therefore, it forms a partition of V.
A landscape is locally non-degenerate or invertible on edges if the following
three equivalent conditions are satisﬁed: (i) Gf (x) consists of a single vertex for all
x ∈V; (ii) there are no neutral walks on (G, f); (iii) f(x) = f(y) implies y /∈N(x).
Clearly, if (G, f) is non-degenerate, then it is locally non-degenerate also. But the
inverse statement is not true.
We note that strict local minima need not exist unless the landscape is locally
non-degenerate. In the general case, therefore, we have to work with non-strict local
minima and to accommodate neutral walks.
Alternatively, one may consider the locally non-degenerate quotient landscape
(G, f)/ ∼f obtained from (G, f) by contracting the plateaus Gf (x) to single ver-
tices. Since local neutrality is an important characteristic of many landscapes (as

158
K. Klemm, J. Qin, and P.F. Stadler
in the RNA example, for instance [29]), this simpliﬁcation may be misleading. We
therefore focus on the general, degenerate case in most of our discussion below.
For a detailed investigation into the structure of adaptive walks, we will need the
neutral components together with their downhill neighbors. To this end, we deﬁne
for every subgraph H of G the subgraph −→
H with vertex set V(−→
H ) = 
x∈V(H) N>[x]
and edge set E(−→
H ) = E(H) ∪

{x,y} ∈E|x ∈V(H),y ∈N>(x)

. In the particular
case that H = Gf (x), we call a graph
−−−→
Gf (x) a shelf of (G, f). For every shelf A =
−−−→
Gf (x) of (G, f) we distinguish between the ﬂat surface Aﬂat =V(Gf (x)) of the shelf,
i.e., the vertices of the plateau Gf (x), and its exit points A> = {y ∈N>(x′)|x′ ∈
V(
−−−→
Gf (x))}.
Fig. 6.2 Example of a
small highly degener-
ate landscape. Vertices
of
G
are
arranged
according to the ﬁtness
values
f (x).
Con-
nected
components
G f (x)
are
indicated
by dotted boxes. For
one of them, the corre-
sponding
shelf-graph
−−−→
G f (x) is highlighted in
gray.
f
Shelves are constructed such that their ﬂat surfaces form the partition of the ver-
tex set of G into the plateaus of (G, f) while their edge sets form a partition of the
edge set of G [31]. In locally non-degenerate landscapes, the ﬂat surfaces consist of
single points so that each shelf consists of a vertex and its downhill neighbors.
A shelf A is locally minimal if A> = /0. In this case A> ⊆M(G, f), i.e., all ver-
tices of locally minimal shelves are local minima. The converse is not true: shelves
with exit points may also contain local minima. All strict local minima, of course,
correspond to locally minimal shelves that consist of a single vertex only.
6.3.4
Reachability
The concept of adaptive walks implies a simple concept of reachability among the
vertices of G: y is reachable from x, x ⇝y, if there is an adaptive walk (and hence
an adaptive path) starting at x that contains y. If A and B are shelves, we say that B is
reachable from A if there is an x ∈A and a y ∈B so that x ⇝y. Every vertex of the
ﬂat surface of a shelf is reachable from every other vertex of the ﬂat surface. Thus,
if B is reachable from A then every x ⇝y for all x ∈A and y ∈B.

6
Geometry and Coarse-Grained Representations of Landscapes
159
Naturally, one considers the system of sets
C (x) = {y ∈V|x ⇝y}
(6.1)
on (G, f). By construction x ∈C (x) and transitivity of ⇝immediately implies that
C (y) ⊆C (x) whenever x ⇝y. Furthermore, let us consider set-wise reachability
C (W) =

x∈W
C (x)
(6.2)
so that y ∈C (W) if there is a point z ∈W such that z ⇝y. As shown in [31], the
function C : 2V →2V satisﬁes Kuratowski’s closure axioms and hence deﬁnes a
reachability topology τC on V.
Once we decide to consider the ﬁnite topological space (V,τC ) instead of the
graph G we have to clearly distinguish between graph-theoretical properties of G
and topological properties of (V,τC ). Connectedness of sets, for instance becomes a
property derived from the topology on V. It can be shown that A ⊂V is connected in
a reachability topology τC if and only if any two points x,y ∈A are connected by a
path x = x0,x1,...,xl = y such that xi ∈C (xi−1) or xi−1 ∈C (xi) [31]. For the notion
of reachability deﬁned above, however, it is easy to see that topological and graph
theoretical connectedness coincide: If u ∈C (v), there is a path in G connecting u
and v, hence the reachable sets are connected in the graph-theoretic sense. A general
result from topology ensures closures of points are topologically connected. Con-
versely, we have u ∈C (v) or v ∈C (u) for adjacent vertices in G by construction of
our notion of reachability. Thus pairs of adjacent vertices form τC -connected sets.
Note that this would no longer be true for a more restrictive deﬁnition of accessibil-
ity requiring, e.g., strictly adaptive walks or even more extremely, gradient walks.
We will brieﬂy return to this point when discussing combinatorial vector ﬁelds in
Section 6.7.
We remark that the minimal closed sets (w.r.t. set inclusion) in the reachability
topology coincide with the locally minimal shelves and hence with the connected
components of M(G, f).
Let W be a closed connected set. We say that W is a valley (w.r.t. the reacha-
bility topology τC ) if there is no connected closed set W ′ so that (i) W ⊂W ′ and
(ii) W and W ′ contain the same minimal closed sets. In other words, any closed
connected superset W ′ of a valley W contain a local minimum not contained in W.
By construction, therefore, we can characterize the valleys of f by the collection
of minimal closed sets (local minima) that they contain (see Figure 6.3). A more
detailed discussion of valleys can be found in [31].
6.3.5
Mutual Accessibility
We say that x and y are mutually accessible at level h , in symbols x ↫h ↬y, if there
is a walk P starting at x ending at y such that f(z) ≤h for all z ∈P. It is convenient
to deﬁne the sets

160
K. Klemm, J. Qin, and P.F. Stadler
Fig. 6.3 The local minima in this simple
landscape are labeled 1 through 5. Each ver-
tex of (G, f ) is annotated with the list of
reachable local minima that are reachable
from it. These labels, i.e., {1}, {2}, {3},
{4}, {5}, {1,2}, {2,3}, {4,5}, {3,4,5},
and {1,2,3,4,5} identify the valley. Ver-
tices that connect valleys are highlighted
by circles. The valleys do not form a hier-
archical structure: For instance, W{1,2} and
W{2,3} share the local minimum 2 but both
1 and 3 are contained in only one of the two
sets.
f
2
1,2
1,2
1,2,3,4,5
1,2,3,4,5
3,4,5
3
2
5
4
1,2,3,4,5
3,4,5
1,2,3,4,5
1,2
2,3
3,4,5
1
1
1
1
3
4,5
4,5
1,2,3,4,5
1,2
1,2
1,2
Bh(x) = {y ∈V|x ↫h ↬y}
(6.3)
for every h ≥f(x). Trivially, x ⇝y implies x ↫h ↬y for all h ≥f(x). Thus we
have C (y) ⊆Bh(x) for all x ∈V, y ∈Bh(x), and h ≥f(x). The sets Bh(x) are
therefore closed in the reachability topology. By construction, they are connected.
Hence there is a unique minimal valley W that contains Bh(x).
The sets Bh(x) also have an alternative interpretation: they are the τC -connected
components of the level sets Vh := {x ∈V|f(x) ≤h}, which appears to be the much
more natural deﬁnition.
6.4
Basins and Saddles
For each local minimum x ∈M(G, f) we deﬁne the gradient basin G (x) as the set of
conﬁgurations z ∈V so that the unique gradient walk with starting point in z ends in
x. Analogously, we write G (L) = 
x∈L G (x) for the gradient basin of the minimal
shelf L. We note for later reference that {G (x)|x ∈M(G, f)} forms a partition of V.
Analogously, we deﬁne the adaptive basin A (x) = {z ∈V|z ⇝x} for all local
minima x ∈M(G, f). In contrast to the gradient basins, the adaptive basins form
a covering of V that in general will not be a partition. By construction we have
x ∈G (x) ⊆A (x).
For x,y ∈M(G, f) and s ∈V, we say that s is a gradient saddle between x and y
if (i) there are neighbors s′ ∈N(s)∩G (x) and s′′ ∈N(s)∩G (y) with f(s′), f(s′′) ≤
f(s); and (ii) s is a conﬁguration with minimal energy fulﬁlling property (i). In this
case, we set the gradient saddle height GS(x,y) = f(s). We set GS(x,y) = ∞if x
and y are not connected by a gradient saddle.
A direct saddle is deﬁned analogously involving adaptive basins. We say that
s ∈V is a direct saddle point between x and y if s is an element of A (x) ∩A (y)
with minimal energy. Equivalently, s is a direct saddle between x and y if (i) x,y ∈
C (s) and (ii) there is no point s′ with f(s′) < f(s) and x,y ∈C (s′). For any two

6
Geometry and Coarse-Grained Representations of Landscapes
161
local minima we deﬁne the direct saddle height DS(x,y) = f(s) if a direct saddle s
between x and y exists. Otherwise we set DS(x,y) = ∞.
If s is a direct saddle point between two local minima, it is also a gradient sad-
dle for some, but not necessarily the same two local minima. In general we have
DS(x,y) ≤GS(x,y).
The existence of a direct saddle point s between two local minima x and y implies
that there is a path P in G from x to y so that f(v) ≤f(s) for all v ∈P. This is not
necessarily the smallest bound on the “peak” of the path, however. The saddle height
between any two vertices is the minimal value of f at which x and y are mutually
reachable, i.e.,
S(x,y) = min{h|x ↫h ↬y}
(6.4)
A conﬁguration s ∈V is a saddle point between two distinct local minima x,y ∈
M(G, f) if (i) f(s) = S(x,y) and (ii) there is a path P from x to y passing through s
so that f(s) ≥f(z) for all z ∈P. In contrast to gradient saddle points, thus, one can
always ﬁnd a saddle point since G is assumed to be connected. In the degenerate
case, it is common that the saddle point for two given local minima x and y is not
unique.
It is well known that S is an ultrametric distance measure [26], i.e., for all z
S(x,y) ≤max{S(x,z),S(y,z)} .
(6.5)
Obviously, we have S(x,y) ≤DS(x,y). We illustrate the differences between direct
saddles, saddles, and gradient saddles in Figure 6.4. We remark that computing sad-
dle heights and saddle points is a difﬁcult task in general. For landscapes of RNA
secondary structure, for instance, the problem is NP-hard [22]. An optimized path
with minimum saddle height can be obtained from the barriers [6, 8] program due
to an exhaustive enumeration of the energy landscape. We will give a more detailed
description about the paradigm of barriers in Section 6.5. In the particular case of
RNA-landscapes, most existing approaches utilize heuristics that consider only di-
rect (minimal length) paths between two conﬁgurations [25]. Direct path heuristics
perform poorly when the two structures are far apart. The algorithm Pathfinder
[19] solves this problem via constructing intermediate structures between the two
reference structures. Therefore it splits the path construction problem into sub-path
construction problems using the direct path heuristic from [10]. Their additional
constraint on the sum of the Hamming distances between the intermediate struc-
ture and the reference structures allows an adjustable exploration of the underlying
energy landscape.
The connection between direct saddles and saddles is elucidated in more detail by
the following result. Given a path P = (v0,v1,...,vℓ,vℓ+1) ∈G, if vk > vk+1 = ··· =
vl−1 < vl, then all the conﬁgurations vj ∈L for k + 1 ≤j ≤l −1 are called valley
points. Analogously, peak points are the conﬁgurations vj with k + 1 ≤j ≤l −1 if
vk < vk+1 = ··· = vl−1 > vl. A path P = (x = w0,w1,...,wℓ,wℓ+1 = y) is a zig-zag
path on (G, f) if

162
K. Klemm, J. Qin, and P.F. Stadler
s
c
a
d
b
s 2
s 1
(A)
c
a
b
s 2
s 1
s 3
(B)
saddle
saddle
direct
saddle
gradient
( C )
Fig. 6.4 (A) Saddles and direct saddles. Given a landscape in which the conﬁguration space
consists of {a,b,c,d,s1,s2,s3,s}, we have DS[a,d] = f (s) > S[a,d] = f (s1). Therefore, s and
{s1,s2,s3} is the direct saddle and the equivalent class of saddles between a and d, respec-
tively. Furthermore, there exists a relation between saddle height and direct saddle heights
given by S[a,d] = min{max{DS[a,b],DS[b,c],DS[c,d]},DS[a,d]}. (B) Direct saddles and
gradient saddles. The conﬁgurations s1 and s2 are the direct saddles between a and c, but
there does not exist any gradient saddle between a and c. (C) A set diagram of the sets of
saddles, direct saddles and gradient saddles of a given landscape.
(1) maxi f(wi) = S(x,y)
(2) If wk > wk+1 = ··· = wl−1 < wl then there is a minimal shelf L such that wj ∈L
for k + 1 ≤j ≤l −1.
(3) If wk < wk+1 = ··· = wl−1 > wl then each wj with k + 1 ≤j ≤l −1 is a direct
saddle separating the nearest valley points that the path P passed before and
after wj .
Theorem 6.1. If x,y ∈V are two conﬁgurations so that neither x ⇝y nor y ⇝x then
there is a zig-zag path connecting x and y.
Proof. By construction, x ↫S(x,y) ↬y, hence there is a path ℘from x to y whose
height does not exceed S(x,y). Consider the graph G∗= G/ ∼f derived from G by
contracting any Gf (x) ∈Π into a vertex of G∗. In the meanwhile, we obtain a path
℘∗in G∗from℘accordingly.
To prove the theorem, all we need is to ﬁrst construct a zig-zag path P∗∈G∗from
℘∗and then prove the existence of a zig-zag path P ∈G such that P∗is the resulted
graph of P after the contraction. The latter is trivial since by construction, Gf (x) is
connected for any x ∈G. Therefore the proof reduces to the construction of P∗∈G∗
from℘∗. This construction is described as follows and illustrated in Figure 6.5.
Let {vi}t
i=1 denote the valley points in ℘∗. From each valley point vi, a gradient
walk is simulated to reach some local minimum ℓi. Without loss of generality, we set
v0 = ℓ0 = x, vt+1 = ℓt+1 = y and assume that all ℓi are different conﬁgurations. In this
context, we observe that there exists a pair of hill-climbing walks from “adjacent”
local minima ℓi and ℓi+1 to some peak point of ℘∗, denoted by pi. By deﬁnition,
f(pi) ≥DS[ℓi,ℓi+1]. Depending on whether they are equivalent or not, there are two
cases. In case of f(pi) = DS[ℓi,ℓi+1], then we just substitute the pair of sections

6
Geometry and Coarse-Grained Representations of Landscapes
163
([vi, pi],[pi,vi+1]) in ℘∗into the pair of hill-climbing walks from ℓi and ℓi+1 to
pi, respectively. Otherwise, by deﬁnition, there must exist a conﬁguration di such
that f(di) = DS[ℓi,ℓi+1] < f(pi). In this case, we substitute the pair of sections
([vi, pi],[pi,vi+1]) in ℘∗into the pair of hill-climbing walks from ℓi and ℓi+1 to di,
respectively.
⊓⊔
For each saddle point s, the basin below s [8] is the set B(s) := Bf(s)(s) of con-
ﬁgurations that can be reached from s by a path along which the energy of the con-
ﬁgurations on the path never exceeds f(s). An obvious connection between basins
below saddle points and adaptive basins is the following:
B(s) ⊆

x∈B(s)∩M(G,f)
A (x)
(6.6)
The analogous result for gradient walks holds only in non-degenerate landscapes.
6.5
Barrier Trees
It is not hard to verify that for any two saddles s′ and s′′ either B(s′) ⊆B(s′′),
B(s′′) ⊆B(s′), or B(s′′)∩B(s′) = /0 is satisﬁed, i.e., the basins below saddles of a
landscape give rise to a Hasse diagram with respect to set inclusion order. Given that
the landscape is connected, this Hasse diagram can be naturally interpreted as a tree.
This barrier tree [8, 38], denoted by TB := (VB,EB) is deﬁned as follows. Its vertex
set VB comprises the set of local minima M(G, f) and the equivalence classes of
saddles with respect to the equivalent relation ∼S, i.e. s1 ∼S s2 ⇔B(s1) = B(s2).
As for the edge set EB, two vertices a and b ∈VB are adjacent if B(a) ⊊B(b) or
B(b) ⊊B(a). In this case we set B(m) := {m} if m ∈M(G, f). By construction,
local minima and the equivalent classes of saddles are the leaves and the interior
vertices in the tree, respectively.
Methods to elucidate the basin structure of landscapes by means of barrier trees
have been developed independently in different contexts. For instance, potential en-
ergy surfaces for protein folding [13, 37], molecular clusters [4] and the kinetics of
RNA landscapes [8].
The barrier tree can by computed by the program barriers [6, 8] using a
ﬂooding algorithm [30]. The program barriers takes an energy sorted list of the
K conﬁgurations as input. This list may contain either all conﬁgurations or only the
conﬁgurations below some threshold energy. The only part of barriers that relies
on the geometric properties of the conﬁguration space is the routine that generates
all neighbors of each conﬁguration in the list. Therefore, barriers has a time
complexity of O(Δ × K), where Δ denotes the maximum number of neighbors for
a conﬁguration in the landscape. To be precise, the program barriers processes
each conﬁguration on the list consecutively. It identiﬁes a local minimum when
it reads one. To identify the saddles, barriers labels each conﬁguration x by
the lowest local minimum ℓsuch that ℓ∈Bf(x)(x). Therefore, the conﬁguration s

164
K. Klemm, J. Qin, and P.F. Stadler
y
v
v
v
1
2
2
3
4
p
x
p
y
v
v
1
1
1
l
2
1
G(p)
3
2
2
2d
1
(d )
4d
p
x
l
l
p
p
3
f
G(p)
f
x
1
G(p)
f
l 1
G(
)
f
2d
l 2
3
G(p)
f
y
v
3
3
3
4
3
(d )
4d
l
p
Fig. 6.5 Construction of the path (℘→℘∗→P∗→P) in the proof of Theorem 6.1. Bold
lines in grey denote the path in G f (z), z ∈{p1,ℓ1, p3}.
processed earliest in the list K which has two neighbors labeled by different local
minima ℓ1 and ℓ2 is exactly the saddle separating ℓ1 and ℓ2.
In the same process, sets of conﬁgurations of equal energy are decomposed into
connected components. The program then checks for each component whether it is
a component of saddle points. For each local minimum ℓappearing in the barrier
tree, the program also records the number of conﬁgurations in adaptive basin A (ℓ)
as well as the associated restricted partition functions.
6.6
Funnels
The presence of a large number of non-global local minima poses a difﬁculty for
optimization, i.e., identifying movement towards global optima based on purely lo-
cal information about the landscape. Several measures quantify this difﬁculty [15]
also termed the ruggedness of a landscape. Despite being rugged, natural folding
landscapes of biopolymers (cf. the example in Section 6.2) allow for fast folding, i.e.
a Markov chain quickly hits the global minimum after a relatively short time. The
picture of a funnel [3] has been used for an arrangement of local minima and saddles
that guide dynamics towards the optimum. In the following, we present a rigorous
deﬁnition of a funnel as the set of conﬁgurations that reach the global minimum by
iterating exits from gradient basins over the lowest gradient saddle.
Intuitively, we picture a “funneled” dynamics as always taking the lowest transi-
tion to another gradient basin and thereby eventually reaching the basin of a ground
state. Let x,y ∈M(G, f), r ∈G (x) and s ∈G (y). If e = {r,s} ∈E, e is called a

6
Geometry and Coarse-Grained Representations of Landscapes
165
Fig.
6.6 Funnel
digraph
for
the
folding
landscape
of the RNA sequence xbix
(CUGCGGCUUUGGCUCUAGCC).
The funnel of the landscape
contains the local minima
F ∩M = {1,7,11,17,18,27},
node
1
being
the
unique
ground state. In the funnel
partition of the landscape,
the set containing node 2 is
the largest. This is consistent
with
the
observation
that
a large part of the folding
trajectories reach the node
2
whose
energy
lies
0.8
kcal above the energy of the
ground
state
[38].
Figure
reproduced from ref. [17].
5
17
5
9
18
7
27
19
13
6
15
12
20
25
16
23
10
4
22
26
21
1
2
8
24
11
17
transition between x and y. The height of a transition e is h(e) = max{ f(r), f(s)}.
We call Tx ⊆E the set of all transitions from x, i.e.,
Tx = {{r,s} ∈E : r ∈G (x),s /∈G (x)}
(6.7)
We deﬁne the funnel digraph with node set M(G, f) and arc set B ⊆(M(G, f))2 as
follows. An arc from x to y exists, (x,y) ∈B, if there is a transition e ∈Tx from x to
y with minimal height, i.e., h(e) ≤h(e′) for all e′ ∈Tx. Figure 6.6 shows the funnel
digraph of an RNA folding landscape.
Now if e ∈Tx of minimal height, and e is a transition from x to y, then e contains
a direct saddle s between x and y. In fact, we have
f(s) = min{S(x,z) : z ∈M(G, f)}
(6.8)
so s is a lowest saddle for x.
The funnel of the landscape is a set F ⊆V containing those local minima, from
which a directed path to a global minimum exists in (M(G, f),B). Equivalently, the
funnel may be deﬁned recursively [17] as follows:
(i) F contains all global minima.
(ii) A local minimum x ∈M belongs to the funnel F if the funnel digraph contains
an edge {x,y} ∈B with y ∈F.
Thus F ∩M is the maximal subset of M containing all global minima and fulﬁlling
for all x,y ∈M:
x /∈F ∧(x,y) ∈B ⇒y /∈F
(6.9)

166
K. Klemm, J. Qin, and P.F. Stadler
This determines which local minima belong to F. The funnel is completed by in-
cluding in F all nodes in the gradient basins of these minima.
In practice, the funnel digraph may be obtained by Algorithm 3. Analogous to
barriers, it scans the landscape from low to high energy. Each node x is assigned
the local minimum c(x) reached from x by a gradient walk, where c(x) = x in the
case that x is a local minimum itself. A loop over y ∈N−, the neighbors of x prior
in the list, checks for each {x,y} if it is a transition and potentially updates h(c(x))
and h(c(y)), the heights of the lowest exits from the gradient basins. Furthermore, if
the current height f(x) is at the height of a lowest exit from c(x) an arc from c(x) to
c(y) is included in B; analogously an arc (c(y),c(x)) is included if f(x) is the lowest
exit height from c(y).
Algorithm 3. Computes the arc set B of the funnel digraph
Require: A landscape (G = (V,E), f ) with neighborhood function N.
Require: An energy sorted list L : {1,2,...,|V|} →V.
B ←/0
for all i ∈{1,...,|V|} do
x ←L(i)
N−= N(x)∩{L(i)|i < j}
N> = {y ∈N(X) : f (x) > f (y)}
if N> = /0 then
c(x) ←x // x is a local minimum
h(x) ←+∞
else
j∗= min{j < i : L(j) ∈N−} // index of gradient neighbor of x
c(x) ←c(L(j∗))
end if
for all y ∈N−do
if c(y) ̸= c(x) then
if f (x) < h(c(y)) then
h(c(y)) ←f (x)
end if
if f (x) < h(c(x) then
h(c(x)) ←f (x)
end if
if f (x) = h(c(y)) then
B ←B∪{(c(y),c(x))}
end if
if f (x) = h(c(x)) then
B ←B∪{(c(x),c(y))}
end if
end if
end for
end for

6
Geometry and Coarse-Grained Representations of Landscapes
167
After ﬁnding the funnel F of the landscape, one may be interested in the
landscape outside the funnel. Thus the funnel may be removed and the residual
landscape analyzed the same way. Iterating this procedure leads to the funnel par-
titioning of a landscape, being a family F1,F2,...,Fk. Here F1 = F is the funnel of
the landscape itself and, for all 2 ≤i ≤k, Fi is the funnel of the landscape on the
subgraph induced by V \ i−1
j=1 Fj.
The identiﬁcation of funnels relies on identiﬁcation of the lowest saddles. For
applied studies of real landscape instances, exact computation requires enumeration
of all conﬁgurations. It is thus restricted to small instances [35]. In larger landscapes,
saddle heights and transition rates between basins may be approximated by efﬁcient
sampling methods [20].
6.7
Landscapes as Combinatorial Vector Fields
6.7.1
Combinatorial Vector Fields on Graphs
Here we consider only the special case of combinatorial vector ﬁelds on simple
undirected graphs. For the general case we refer to [11].
A combinatorial vector ﬁeld (CVF) on G is a map η : V →E ∪{∅} such that,
for all e = {x,y} ∈E, η−1(e) ∈{∅,{x},{y}}.
It is easy to show that CVFs on G are in one-to-one correspondence with the
relations P ⊂V ×V that satisﬁes
(1) (x,y) ∈P implies {x,y} ∈E (consistency with G)
(2) (x,y) ∈P and (x,z) ∈P implies y = z (uniqueness)
(3) (x,y) ∈P implies (y,x) /∈P (antisymmetry)
The correspondence is established by (x,y) ∈P if and only if η(x) = {x,y} [31].
We can therefore interpret a CVF as a subset P of directed edges so that each vertex
has at most one successor. Note that in contrast to the outgoing arc, the number of
incoming arcs is not restricted.
A vertex x ∈V is a rest point of η if η(x) = ∅, i.e., if x has no successor. The η-
trajectory of x is the sequence of vi, i ≥0, of vertices such x = v0 and (vi,vi+1) ∈P.
Thus a trajectory either ends in a rest point or it has inﬁnite lengths. In the latter case
it contains a ﬁnite directed cycle (limit cycle) that is visited inﬁnitely often. The ω-
limit ωη(x) of a vertex x is either the (unique) rest point y at which the trajectory
starting at x comes to an end, or the limit cycle in which it becomes trapped. Clearly
for all x ∈V, ωη(x) ̸= /0 and a vertex y is a rest point if and only if ωη(y) = {y}.
The chain recurrent set Rη of a combinatorial vector ﬁeld η on G is deﬁned as
Rη =

x∈V
ωη(x)
(6.10)
i.e., it consists of the rest points and limit cycles.
Let η be a combinatorial vector ﬁeld on G. A function f : V ∪E →R is a Lya-
punov function for η if

168
K. Klemm, J. Qin, and P.F. Stadler
(A)
(B)
Fig. 6.7 (A) Example of a small highly degenerate landscape. Vertices of G are arranged
according to the ﬁtness values f (x). Connected components G f (x) are indicated by dotted
boxes. For one of them, the corresponding shelf-graph
−−−→
G f (x) is highlighted in gray. A com-
binatorial vector ﬁeld η (consistent with f ) can be visualized as arrows corresponding to the
set Pη of oriented edges. (B) Combinatorial vector ﬁelds on a single shelf satisﬁed condition
(A1).
1. f(v) ≥f(e) > f(v′) if η(v) = e and e = {v,v′} and v /∈Rη.
2. f(v) = f(η(v)) = f(v′) if v ̸= v′ and v′ and v are contained in a cycle.
The basic idea of [31] is now to study adaptive walks in terms of combinato-
rial vector ﬁelds on G for which the prescribed energy function f is a Lyapunov
function. It is convenient to introduce the more general compatibility condition
(A1) η(x) = {x,y} implies f(x) ≥f(y)
and to call a function of satisfying (A1) a weak Lyapunov function for η. A variety
of additional axioms for the consistency of a CVF η on G with a given function f
on G are introduced and discussed in detail [31]. We omit these technical details
here.
From a technical point of view, the crucial result is that the set of all combinatorial
vector ﬁelds on G has a product structure: it can be written as the set product of the
sets of combinatorial vector ﬁelds on each shelf (see Figure 6.7). Since consistency
of a CVF with a given (weak) Lyapunov function also boils down to conditions that
only refer to the individual shelves separately (see [31] for the technical details). It
follows that the set CVF(G, f) of combinatorial vector ﬁelds consistent with f is
the direct product of the sets CVF(G, f|H) of combinatorial vector ﬁelds consistent
with the restriction f|H of f to the individual shelves. The importance of this result
is the observation that it is sufﬁcient to understand the admissible combinatorial
vector ﬁelds on the shelves. In particular, it implies that combinatorial vector ﬁelds
on locally non-degenerate landscapes are entirely characterized by their behavior on
the trivial shelves −−−→
N>(x).

6
Geometry and Coarse-Grained Representations of Landscapes
169
6.7.2
Reachability in Combinatorial Vector Fields
The ensemble of CVFs that have f as weak Lyaponov function together describe in a
meaningful way all possible adaptive paths on (G, f): every adaptive path alternates
between strictly downhill steps that take it from one shelf to the next and neutral
paths along which it traverses a shelf from its entry point to an exit point.
Given an ensemble of CVFs, it is natural to deﬁne reachability in a different way.
We say that y is CVF-reachable from x, x ⇝CVF y, if and only if there is a CVF
η ∈CVF(G, f) so that y is contained in a trajectory starting at x in η. By construc-
tion CVF-reachability is a reﬂexive and transitive, but in general not symmetric,
relation. Just like the adaptive walk reachability discussed earlier, it translates to a
corresponding reachability topology, a notion of connectedness, and ↫↬relation,
and corresponding concepts of saddle points.
Lemma 6.1. Let CVF consist of all CVFs for which f is a weak Lyapunov function.
Then (adaptive walk) reachability and CVF-reachability are equivalent.
Proof. Given an adaptive walk ℘connecting x to y construct a CVF η by deﬁning
all vertices not in ℘as rest points of η. Clearly, x ⇝C y and f is a weak Lyapunov
function for η. Conversely, if y lies on a trajectory t starting at x in η and f is weak
Lyapunov function for η, f is non-increasing along t and hence t is an adaptive
walk.
In large shelves, quite complex vector ﬁeld structures can be consistent with con-
dition (A1) because degenerate ﬁtness functions impose fewer constraints on the
combinatorial vector ﬁelds. In particular they admit complex recurrent sets within
individual sets. These can be restricted by a variety of conditions leading to less
inclusive ensembles of CVFs and hence more restricted notions of reachability. We
will not delve into these details here and refer to [31] for a more thorough and formal
discussion. We note, ﬁnally, that the plethora of related saddle-point-like concepts
explored in [8] differ primarily in the deﬁnition of connected level sets. It has re-
mained unexplored, however, if and how they can be related to variations in the
reachability topology.
6.7.3
Path Probabilities
An edge {x,y} in the search graph G can be weighted by a measure ωxy of its
steepness in the landscape. In energy landscapes, vertices are naturally weighted
by their Boltzmann factors exp(−β f(x)), where β is the inverse temperature. A
natural choice for the edge weights is thus ωxy = exp(β|f(x)−f(y)|). The “inverse
temperature” β tunes our emphasis on steepness and allows to interpolate between
adaptive walks and gradient walks. For β = 0, all valid transitions receive the same
weight 1. On the other hand, the steepest edges dominate in each set N>(x) for
β →∞. The edge weights carry over to a CVF ω(η) = ∏(x,y)∈η ωxy so that CVFs
with more steeper transitions have larger weight. This is formalized by introducing
the discrete probability measure p(η) := ω(η)/Z where the normalization constant
Z plays the role of a partition function on CVF(G, f).

170
K. Klemm, J. Qin, and P.F. Stadler
The product structure of CVF(G, f) implies that ω(η) is the product of weights
for η restricted to individual shelves. This implies, for instance, that the probability
p(x,y) of sampling a CVF that contains the prescribed arc (x,y) can be computed by
considering the shelf A that contains (x,y) only. Using this observation one can com-
pute recursively the probability P{x ⇝y} to draw a combinatorial vector ﬁeld that
contains an arbitrary trajectory from x to y, i.e., the probability that y is reachable
from x in CVF(G, f) as detailed in [31]:
P{x ⇝y} =
∑
z∈V(Gf (y))
˜P(x ⇝z)T ﬂat
z⇝y
˜P(x ⇝y) =
∑
u∈N>(V(Gf (x)))
Tx⇝u ˜P(u ⇝y)
Tx⇝y = ∑
w∈Dx
T ﬂat
x⇝wT >
w→y
(6.11)
Here ˜P(x ⇝y) denotes the probability of a path that starts in x and terminates in y
such that the ﬁnal step is a downward step and Tx⇝y is the conditional probability
that a path exits the shelf Ax through the vertex z ∈V(Ax)> given that it starts in
x ∈Aﬂat
x . Analogously, T ﬂat
x⇝w describes the walk from x to a drainage point w on the
plateau of Ax, and T >
w→z = ωwz/Zw with Zw = ∑z′∈N>(w) ωwz′ is the probability to
reach z given the path passes through the w.
6.8
Coarse Graining, Macrostates, and Folding Kinetics
The simplest type of kinetics on a landscape (G, f) is a Markov process on the
vertex V with transition rates rxy > 0 (for the transition from y to x) along the
edges of G that depend on the energy difference f(x) −f(y). Most commonly
the Metropolis rule rxy ∝exp(β min{0, f(y)−f(x)}) [23] or the Kawasaki rule [16]
rxy ∝exp
 1
2β(f(y)−f(x))

are used to deﬁne the rate constants rxy. Both rules have
the Boltzmann distribution exp(−β f(x))/Z as stationary distribution.
A partition P of the vertex set V induces a coarse graining of the state space G
given by the quotient graph G/P. It is not immediately clear, however, how a coarse
grained energy function on G/P should be deﬁned. In [38], a coarse graining of
the transition rates has been introduced as follows:
rXY = ∑
x∈X ∑
y∈Y
rxyP[y|Y]
(6.12)
where P[y|Y] is the probability of the process to be in state y given that it is in classY.
Assuming local equilibrium on Y, this conditional probability can be approximated
by the Boltzmann distribution, yielding the macrostate transition rates
rXY = 1
ZY ∑
x∈X ∑
y∈Y
rxy exp(−β f(y))
(6.13)

6
Geometry and Coarse-Grained Representations of Landscapes
171
where ZY = ∑y∈Y exp(−β f(y)).
In thermodynamicequilibrium, the probability to be in macrostate X is simply the
sum of the probabilities of the microstates x ∈X, i.e., [X] = ZX/Z. Thus, a natural
deﬁnition of the landscape F on G/P is the Boltzmann average
F(X) = −β ln ∑
x∈X
exp(−β f(x))
(6.14)
In this way, the thermodynamic properties are preserved.
This quotient landscape, however, does not preserve information on the saddle
points in (G, f) and hence fails to incorporate the energy barriers and the kinetic
properties associated with them. An alternative is to use either the barrier tree or
the graph consisting of the local minima and the direct saddle points between them.
In the context of the barrier trees the transition rates rXY are approximated by the
Arrhenius law [2]
r
Arrh
XY ∝exp(−β(S(x,y)−f(y)))
(6.15)
in terms of the saddle height S(x,y) between local minima x and y that determine
the macrostates X and Y. A somewhat better approximation is achieved by deﬁning
rXY via the direct saddles between x and y. A closely related concept is the inherent
structure network [5] which uses gradient saddles only.
As we have seen in the previous sections, states with large energies typically can
reach more than one local minimum by means of adaptive (downhill) walks. Thus it
does not appear to be correct to associate a point only with a single local minimum.
The issue becomes even more obvious, of course, in landscapes where gradient
walks are not unambiguously deﬁned. In [31] it has been proposed, therefore, to al-
low partial membership. More precisely, the idea is to use ∑y′∈Gf (y) P{x ⇝y} to de-
termine the fraction of x that belongs the local minimum represented by y ∈M(G, f).
This yields e.g. a (typically small) correction to the partition function of the macro
states.
6.9
Encodings
Many optimization problems have a natural landscape representation. For instance,
the landscape of the traveling salesman problem typically has the permutations of
the n cities as the node set and a neighborhood relation based on exchanging two
cities or reverting a part of the tour (cf. Section 6.2). This natural setting, however,
is not unique, and different representations, even with considerably larger node set
for the same problem instance, sometimes turn out as beneﬁcial for optimization
[18]. We use the term encoding for a reformulation of an optimization problem
by a different landscape in the following sense. Let (G, f) with G = (V,E) be a
landscape, H = (Y,K) a graph and α : Y →V an arbitrary map. Then (H,α) is
called an encoding of (G, f). We say that the encoding is complete if α(Y) = X.
The encoding is unbiased if |α−1(x)| is independent of x ∈X.

172
K. Klemm, J. Qin, and P.F. Stadler
In the context of ﬁtness landscapes for biological evolution, α has an interpreta-
tion as a genotype phenotype map [34]. The genotype space H = (Y,K) is obtained
as the set of genetic sequences Y structured by K, the pairs of sequences that differ
by a single mutation. The viability of an individual with a genetic sequence y ∈Y
depends on its phenotype α(y) ∈V, i.e., G is the phenotype space to whose elements
ﬁtness is assigned by the function f. Variation and selection work in distinct spaces
H and G, which are linked by the mapping α.
From an encoding (H,α), we obtain a landscape as (H, f ◦α). If α is unbiased,
we have |α−1(x)| = |Y|/|X| for all x ∈V. Every unbiased encoding is complete.
If the encoding is not unbiased, we would like to quantify if α preferentially maps
to low-energy solutions. The cumulative densities QV ,QY : R →[0,1] are deﬁned as
QV(η) = |{x ∈V : f(x) ≤η}|/|X|
(6.16)
QY(η) = |{y ∈Y : f ◦α(y) ≤η}|/|Y| .
(6.17)
We say that there is enrichment at level η ∈R if QY(η) > QV(η). Then, under a
random uniform selection of nodes x ∈V and y ∈Y, the probability of encountering
a node with energy below η is larger in the encoding than in the original landscape.
Example 6.1. For the traveling salesman problem (cf. Section 6.2) an encoding by
prepartitioning the set of cities is introduced in [18] as follows. For a problem in-
stance with n cities, let Y = [n]n and choose K such that x,y ∈Y are adjacent if they
differ at exactly one position. A prepartition y ∈Y assigns each city a relative posi-
tion on the tour. A tour s ∈V is compatible with y ∈Y if, for all i, j ∈[n], yi < yj
implies that city i appears earlier than city j in the tour. For each y ∈Y, the image
α(y) is obtained by greedily constructing a tour under the constraint that it is com-
patible with y. Two prepartitions y,z ∈Y are adjacent, {y,z} ∈K, if there is exactly
one index i such that yi ̸= zi. Thus H = (Y,K) is the Hamming graph H(n,n). The
encoding (Y,K,α) is complete because, for each permutation s ∈Sn, the inverse
permutation y = s−1 lies in Y and fulﬁlls α(y) = s. The coding is not unbiased for
n > 2, because |Y|/|V| = (nn)/(n!) is not a natural number. As demonstrated in [18],
a tour x ∈V of short length f(x) tends to have a larger pre-image under α than a
long tour. The enrichment is an effect of the greedy choice.
Example 6.2. Ruml. et al. [28] deﬁne and numerically analyze several encodings for
the number partitioning problem [12].
Let us now turn to the local effect of encodings, where we consider the closed
neighborhood ¯NV (x) = {x} ∪{z ∈V : {x,z} ∈E} of a node x of the original land-
scape in relation to a closed neighborhood ¯NY (y) = {y} ∪{y ∈Y : {y,z} ∈K}
for y ∈Y of the encoding. The encoding function α : Y →X is continuous if
α( ¯NY (y)) ⊆¯NV(α(y)), for all y ∈Y and anti-continuous if ¯NV(α(y)) ⊆α( ¯NY (y)).
The deﬁnition of continuous maps corresponds to the natural deﬁnition of conti-
nuity between ﬁnite pre-topological spaces. For details we refer to [32]. The inverse
condition, here termed anti-continuity, apparently has not been investigated in any
detail. Note that (anti-)continuity refers to the map between the conﬁguration spaces
only. It is independent of the ﬁtness function.

6
Geometry and Coarse-Grained Representations of Landscapes
173
The reachability topologies on Y and V, on the other hand, contain a lot of in-
formation on the ﬁtness function. Let Nr
Y(y) be the reachable neighbors of y as de-
ﬁned by adaptive walks (or the CVFs for which f is a weak Lyapunov function).
If α : Y →V is continuous then α(Nr
Y(y)) ⊆Nr
V (α(y)). Repeating this argument
for the y′ ∈Nr
Y(y) yields α(Nr
Y (Nr
Y (y))) ⊆Nr
V (Nr
V (α(y))) and, after ﬁnitely many
iterations, α(CY (y)) ⊆CV(α(y)) and thus α(CY (U)) ⊆CV(α(U)) for all U ⊆Y.
Hence α : Y →V is also a continuous map w.r.t. to the reachability topologies on
Y and V. It remains to explore whether this is also true for alternative deﬁnitions of
reachability arising from CVFs that have stronger requirements than f being a weak
Lyapunov function.
An encoding that is both continuous and anti-continuous in particular preserves
local structures. If the encoding is complete and anti-continuous, then the encoded
landscape has necessarily larger or equal-sized neighborhoods:|NY (y)| ≥|N(α(y))|.
For these encodings, we obtain statements about the existence of paths and local
minima, and bounds on saddle heights.
Lemma 6.2. Let f : X →R be an arbitrary landscape, and let α :Y →X be an anti-
continuous encoding. Then: If y ∈Y is a local minimum of the encoded landscape
(H, f ◦α), then α(y) is a local minimum on G.
Proof. We observe that f( ¯NV (α(y))) ⊆f(α( ¯NY (y))): y is a local minimum in Y if
and only if all function values z ∈f(α( ¯NY (y))) satisfy z ≤f(α(y)). Clearly, this
implies the same inequality also for the subset f( ¯NV (α(y))).
Lemma 6.3. Let P = (x1,x2,...,xl) be a path in G, and let α : X →Y be complete
and anti-continuous. Then there is a path τ = (y1,...,yl) in H such that α(yi) = xi
for all i ∈[l].
Proof. It sufﬁces to consider a single step in the path, say (x1,x2). Since α is com-
plete, there is a yi ∈Y with α(y1) = x1. Since α is anti-continuous, α(N(y1)) con-
tains all neighbors of x1, i.e., ¯NY(y1) contains in particular a vertex y2 that satisﬁes
α(y2) = x2. We simply have to repeat this argument for x2,x3,... to see that a path
in H with the desired property indeed exists.
Since saddles are deﬁned by paths of minimal height, the fact that we ﬁnd pre-
images of paths under α directly implies the following.
Corollary 6.1. Let (H,α) be a complete and anti-continuous encoding of (G, f)
and x,y ∈Y. Then the saddle height between x and y on the encoded landscape
is upper bounded by the saddle height between the mapped states on the original
landscape:
S(G,f)(α(x),α(y)) ≥S(H,f◦α)(x,y)
(6.18)
The landscape obtained from an anti-continuous and complete encoding is in a sense
smoother and easier to search than the original one, because (H, f ◦α) has fewer
local minima and lower saddles connecting the remaining basins. The cost for this
improvement is a large search space and an increased size of the local neighborhood.

174
K. Klemm, J. Qin, and P.F. Stadler
On the other hand, anti-continuity is not the only property of an encoding that
may enhance search on a landscape. Example 6.1 above and other encodings studied
in [18] are not anti-continuous. However, adaptive walks on the encoded landscape
outperform adaptive walks on the original landscape at long times.
6.10
Concluding Remarks
The theory of combinatorial landscapes has emerged as an attempt to devise suitable
mathematical structures for describing the “static” properties of landscapes as well
as their inﬂuence on the kinetic dynamics of adaptation. The static point of view
focuses on geometric properties such as basins, barriers, plateaus, CVFs, etc. As
described in Section 6.8, there exists a close relation between the static properties
and kinetic properties of combinatorial landscapes. This chapter is our attempt to
clarify various geometric concepts that have been introduced in this ﬁeld and discuss
their relations with the kinetic properties of the landscapes.
Acknowledgements. P.F.S. and K.K. acknowledge ﬁnancial support from VolkswagenS-
tiftung.
References
[1] Binder, K., Young, A.P.: Spin glasses: Experimental facts, theoretical concepts, and
open questions. Rev. Mod. Phys. 58, 801–976 (1986)
[2] Chan, H., Dill, K.: Protein folding in the landscape perspective: Chevron plots and non-
Arrhenius kinetics. Proteins: Structure, Function, and Genetics 30, 2–33 (1998)
[3] Dill, K.A., Chan, H.S.: From levinthal to pathways to funnels. Nat. Struct. Biol. 4, 10–
19 (1997)
[4] Doye, J.P., Miller, M.A., Welsh, D.J.: Evolution of the potential energy surface with
size for Lennard-Jones clusters. J. Chem. Phys. 111, 8417–8429 (1999)
[5] Doye, J.P.K.: Network topology of a potential energy landscape: A static scale-free
network. Phys. Rev. Lett. 88, 238701 (2002)
[6] Flamm, C., Fontana, W., Hofacker, I., Schuster, P.: RNA folding kinetics at elementary
step resolution. RNA 6, 325–338 (2000)
[7] Flamm, C., Hofacker, I.L.: Beyond energy minimization: Approaches to the kinetic
folding of RNA. Chemical Monthly 139, 447–457 (2008)
[8] Flamm, C., Hofacker, I.L., Stadler, P.F., Wolﬁnger, M.T.: Barrier trees of degenerate
landscapes. Z. Phys. Chem. 216, 155–173 (2002)
[9] Flamm, C., Hofacker, I.L., Stadler, B.M.R., Stadler, P.F.: Saddles and barrier in land-
scapes of generalized search operators. In: Stephens, C.R., Toussaint, M., Whitley, L.D.,
Stadler, P.F. (eds.) FOGA 2007. LNCS, vol. 4436, pp. 194–212. Springer, Heidelberg
(2007)
[10] Flamm, C., Stadler, P., Maurer-Stroh, S., Zehl, M., Hofacker, I.L.: Design of multi-
stable RNA molecules. RNA 7, 254–265 (2001)
[11] Forman, R.: Combinatorial vector ﬁelds and dynamical systems. Math. Z. 228, 629–681
(1998)

6
Geometry and Coarse-Grained Representations of Landscapes
175
[12] Garey, M., Johnson, D.: Computers and Intractability. A Guide to the Theory of NP
Completeness. Freeman, San Francisco (1979)
[13] Garstecki, P., Hoang, T.X., Cieplak, M.: Energy landscapes, supergraphs, and “folding
funnels” in spin systems. Phys. Rev. E 60, 3219–3226 (1999)
[14] Hofacker, I.L.: Vienna RNA secondary structure server. Nucl. Acids Res. 31(13), 3429–
3431 (2003)
[15] Kallel, L., Naudts, B., Reeves, C.R.: Properties of ﬁtness functions and search land-
scapes. In: Kallel, L., Naudts, B., Rogers, A. (eds.) Theoretical Aspects of Evolutionary
Computing, pp. 175–206. Springer (2001)
[16] Kawasaki, K.: Diffusion constants near the critical point for time-dependent ising mod-
els. Phys. Rev. 145, 224–230 (1966)
[17] Klemm, K., Flamm, C., Stadler, P.F.: Funnels in energy landscapes. Eur. Phys. J. B 63,
387–391 (2008)
[18] Klemm, K., Mehta, A., Stadler, P.F.: Landscape encodings enhance optimization. PLoS
One 7, e34780 (2012)
[19] Lorenz, R., Flamm, C., Hofacker, I.L.: 2D projections of RNA folding landscapes. In:
Grosse, I., Neumann, S., Posch, S., Schreiber, F., Stadler, P.F. (eds.) GCB. LNI, vol. 157,
pp. 11–20. G (2009)
[20] Mann, M., Klemm, K.: Efﬁcient exploration of discrete energy landscapes. Phys. Rev.
E 83(1), 011113 (2011)
[21] Mathews, D., Sabina, J., Zuker, M., Turner, D.H.: Expanded sequence dependence of
thermodynamic parameters improves prediction of RNA secondary structure. J. Mol.
Biol. 288, 911–940 (1999)
[22] Maˇnuch, J., Thachuk, C., Stacho, L., Condon, A.: NP-completeness of the energy bar-
rier problem without pseudoknots and temporary arcs. Natural Computing 10(1), 391–
405 (2011)
[23] Metropolis, N., Rosenbluth, A.W., Rosenbluth, M.N., Teller, A.H.: Equation of state
calculations by fast computing machines. J. Chem. Phys. 21, 1087–1092 (1953)
[24] Mezey, P.G.: Potential Energy Hypersurfaces. Elsevier, Amsterdam (1987)
[25] Morgan, S.R., Higgs, P.G.: Barrier heights between ground states in a model of RNA
secondary structure. J. Phys. A: Math. Gen. 31, 3153–3170 (1998)
[26] Rammal, R., Toulouse, G., Virasoro, M.A.: Ultrametricity for physicists. Rev. Mod.
Phys. 58, 765–788 (1986)
[27] Reidys, C.M., Stadler, P.F.: Combinatorial landscapes. SIAM Review 44, 3–54 (2002)
[28] Ruml, W., Ngo, J., Marks, J., Shieber, S.: Easily searched encodings for number parti-
tioning. J. Opt. Th. Appl. 89, 251–291 (1996)
[29] Schuster, P., Fontana, W., Stadler, P.F., Hofacker, I.L.: From sequences to shapes and
back: A case study in RNA secondary structures. Proc. Roy. Soc. Lond. B 255, 279–
284 (1994)
[30] Sibani, P., van der. Pas, R., Sch¨on, J.C.: The lid method for exhaustive exploration of
metastable states of complex systems. Computer Physics Communications 116, 17–27
(1999)
[31] Stadler, B.M.R., Stadler, P.F.: Combinatorial vector ﬁelds and the valley structure of
ﬁtness landscapes. J. Math. Biol. 61(6), 877–898 (2010)
[32] Stadler, B.M.R., Stadler, P.F., Shpak, M., Wagner, G.P.: Recombination spaces, metrics,
and pretopologies. Z. Phys. Chem. 216, 217–234 (2002)
[33] Stadler, P.F., Flamm, C.: Barrier trees on poset-valued landscapes. Genetic Prog. Evolv.
Mach. 4, 7–20 (2003)

176
K. Klemm, J. Qin, and P.F. Stadler
[34] Stadler, P.F., Stadler, B.M.R.: Genotype phenotype maps. Biological Theory 3, 268–
279 (2002); Konrad Lorenz Institute Workshop on Biological Information organized by
Werner Callebaut in 2002
[35] Tomassini, M., V´erel, S., Ochoa, G.: Complex-network analysis of combinatorial
spaces: The NK landscape case. Phys. Rev. E 78, 066114 (2008)
[36] Van Nimwegen, E., Crutchﬁeld, J.P.: Metastable evolutionary dynamics: Crossing ﬁt-
ness barriers or escaping via neutral paths? Bull. Math. Biol. 62, 799–848 (2000)
[37] Wales, D.J.: Decoding the energy landscape: extracting structure, dynamics and ther-
modynamics. Phil. Trans. R. Soc. A 370, 2877–2899 (1969)
[38] Wolﬁnger, M.T., Svrcek-Seiler, W.A., Flamm, C., Hofacker, I.L., Stadler, P.F.: Exact
folding dynamics of RNA secondary structures. J. Phys. A: Math. Gen. 37, 4731–4741
(2004)
[39] Wright, S.: The roles of mutation, inbreeding, crossbreeeding and selection in evolution.
In: Jones, D.F. (ed.) Proceedings of the Sixth International Congress on Genetics, vol.
1, vol. 1, pp. 356–366. Brooklyn Botanic Gardens, New York (1932)

Chapter 7
Polytopes, Graphs and Fitness Landscapes
Kristina Crona
Abstract. Darwinian evolution can be illustrated as an uphill walk in a landscape,
where the surface consists of genotypes, the height coordinates represent ﬁtness,
and each step corresponds to a point mutation. Epistasis, roughly deﬁned as the de-
pendence between the ﬁtness effects of mutations, is a key concept in the theory of
adaptation. Important recent approaches depend on graphs and polytopes. Fitness
graphs are useful for describing coarse properties of a landscape, such as mutational
trajectories and the number of peaks. The graphs have been used for relating global
and local properties of ﬁtness landscapes. The geometric theory of gene interaction,
or the shape theory, is the most ﬁne-scaled approach to epistasis. Shapes, deﬁned as
triangulations of polytopes for any number of loci, replace the well established con-
cepts of positive and negative epistasis for two mutations. From the shape one can
identify the ﬁttest populations, i.e., populations where allele shufﬂing (recombina-
tion) will not increase the mean ﬁtness. Shapes and graphs provide complementary
information. The approaches make no structural assumptions about the underlying
ﬁtness landscapes, which make them well suited for empirical work.
7.1
Introduction
The ﬁtness landscape was originally intended as a simple metaphor for an intuitive
understanding of adaptation [38]. Adaptation can be pictured as an uphill walk in
the ﬁtness landscape, where height represents ﬁtness and where each step is between
similar genotypes. The concept of a ﬁtness landscape has been formalized in some-
what different ways [4] and the current theory is extensive. Kaufman’s NK model
[20], block models [24, 28], as well as random (rugged or uncorrelated) ﬁtness land-
scapes [12, 19, 21, 30, 33] have been especially inﬂuential in biology. Early work in
the ﬁeld was primarily motivated by theoretical considerations, such as the relation
between global and local properties of ﬁtness landscapes. However, it may not be
Kristina Crona
University of California at Merced, 5200 Lake Road, Merced, CA 95343, U.S.A.
e-mail: kcrona@ucmerced.edu
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
177
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_7, c⃝Springer-Verlag Berlin Heidelberg 2014

178
K. Crona
clear if the classical models apply in a particular empirical context. The underlying
assumptions, such as a block structure of the ﬁtness landscape, may or may not hold.
Some recent approaches do not make any structural assumptions about the ﬁtness
landscapes. We will consider the geometric theory of gene interactions and ﬁtness
graphs. We deﬁne ﬁtness as the logarithm of the expected reproductive success.
There are different deﬁnitions of ﬁtness in the literature [25]. Epistasis means that
ﬁtness is not linear. For instance, the combination of two beneﬁcial mutations may
result in a double mutant with much higher ﬁtness, as compared to a linear expec-
tation from the ﬁtness of the wild-type, and the two single mutants. Such positive
epistasis is common for drug resistance mutations, for example antibiotic resistance
mutations [17]. It is not difﬁcult to analyze the two-loci case, but it is less obvious
how to quantify, classify and interpret epistasis for several loci.
The most ﬁne-scaled approach to gene interactions is the recently developed ge-
ometric theory [3]. The theory extends the usual concept of epistasis for two muta-
tions to any number of loci in the strict sense that all gene interactions are reﬂected.
The shapes, as deﬁned in the geometric theory, has the role of positive and negative
epistasis for two mutations.
In contrast to the sensitive shapes, a ﬁtness graph is determined by the ﬁtness
ranks of the genotypes only. Qualitative information such as if “good+good=better”
or “good+good= not good” for two single mutations are reﬂected by the ﬁtness
graphs. From the graphs one can immediately understand the coarse properties of
the landscapes, including the number of peaks. We argue that both the geometric
theory and ﬁtness graphs are well suited for empirical work. Moreover, to some
extent shapes and ﬁtness graphs provide complementary information. Shapes are
relevant for recombination and ﬁtness graphs for mutational trajectories.
In many real populations at most two alternative alleles occur at each locus, or a
biallelic assumption is a reasonable simpliﬁcation. Throughout the chapter, we will
consider biallelic L-loci populations. Let Σ = {0,1} and let ΣL denote bit strings of
length L. ΣL represents the genotype space. In particular,
Σ2 = {00,01,10,11} and Σ3 = {000,001,010,011,100,101,110,111}.
The zero-string denotes the string with zero in all L positions, and the 1-string de-
notes the string with 1 in all L positions. We deﬁne a ﬁtness landscape as a function
w : ΣL →R, which assigns a ﬁtness value to each genotype. The ﬁtness of the geno-
type g is denoted wg. The metric we consider is the Hamming distance, meaning
that the distance between two genotypes equals the number of positions where the
genotypes differ. In particular, two genotypes are adjacent, or mutational neighbors,
if they differ at exactly one position.
A walk in the ﬁtness landscape corresponds to a Darwinian process in a precise
way. Consider a monomorphic population, i.e., a population where all individuals
have the same genotype, after a recent change in the environment. Such a geno-
type is a called the wild-type. Assume that in the new environment the wild-type
no longer has optimal ﬁtness. Under the assumption of the strong-selection weak-
mutation regime (SSWM), a beneﬁcial mutation will go to ﬁxation in the population

7
Polytopes, Graphs and Fitness Landscapes
179
before the next mutation occurs. It follows that the population is monomorphic for
most of the time. The adaptation process can be described as a sequence of geno-
types, all of which became ﬁxed in the population at some point in time.
For instance, let 00 denote the wild-type, assume that the single mutants 10 an 01
have higher ﬁtness than the wild-type, and that the double mutant 11 has the highest
ﬁtness of the four genotypes. The two possible adaptation scenarios for a population
are
00 →10 →11 and 00 →01 →11.
Each scenario corresponds to an uphill walk, which ends at the genotype 11. The
example illustrates that we can think of a Darwinian process as a walk in the ﬁtness
landscape, where each step represents a beneﬁcial mutation going to ﬁxation in the
population. Adaptation is not deterministic, but ﬁtness has to increase by each step.
The described model of adaptation has been widely used and relies on approaches
developed in [15, 16, 27].
The chapter is structured as follows. The topic for Section 7.2 to 7.5 is ﬁtness
graphs, where most results depend on [6]. The topic for Section 7.6 to 7.10 is the
geometric theory of gene interactions, where most results depend on [3], and tri-
angulations of polytopes [9]. Section 7.11 compares ﬁtness graphs and shapes, as
deﬁned in the geometric theory. Section 7.12 is a discussion. For more background,
including proofs, we refer to [3, 6, 9].
7.2
Fitness Graphs and Sign Epistasis
With reference to the landscape metaphor, an adaptive step in the ﬁtness landscape
corresponds to a change in exactly one position of a string so that the ﬁtness in-
creases strictly. An adaptive walk is a sequence of adaptive steps. A peak in the
ﬁtness landscape has the property that there are no adaptive steps away from it, i.e.,
a genotype is at a peak if all mutational neighbors have lower ﬁtness as compared
to the genotype. The following concepts are central as well, in particular they are
useful for relating the number of peaks to local observations.
For L ≥2, given a string and two positions, exactly four strings can be obtained
which coincide with the original string except (at most) at the two positions. Denote
such a set of four strings
ab,Ab,aB,AB,
according to the two positions of interest, and assume that wab is minimal. Sign
epistasis means that
wAB < wAb or wAB < waB.
Reciprocal sign epistasis interactions means that
wAB < wAb and wAB < waB.
Figure 7.1 shows the four possibilities under our assumption that wab is minimal.

180
K. Crona
AB
AB
AB
AB
Ab
aB
Ab
aB
Ab
aB
Ab
aB
ab
ab
ab
ab
Fig. 7.1 The arrows point toward the more ﬁt genotype. The graphs represent no sign epista-
sis, two cases with sign epistasis but not reciprocal sign epistasis, and one case with reciprocal
sign epistasis.
Sign epistasis is by no means rare for microbes according to several studies [2,
11, 13, 17, 35, 36, 37]. In particular, sign epistasis occurs for antibiotic resistance
mutations, as well as for HIV and malaria. In fact, existing studies suggest that
absence of sign epistasis is exceptional for systems associated with drug resistance
for L ≥4.
Sign epistasis is of clinical importance for several reasons. A recent approach for
preventing and managing resistance problems takes advantage of both sign epistasis
and variable selective environments [17]. Another aspect of managing drug resis-
tance is to ﬁnd constraints for orders in which mutations accumulate from genotype
data [2, 11]. A constraint could be that a particular mutation is selected for (meaning
that that the mutation is beneﬁcial) only if a different mutation has already occurred.
The existence of constraints implies sign epistasis. Indeed, if a particular mutation
is beneﬁcial regardless of background, then it can occur before or after other mu-
tations. Moreover, sign epistasis is relevant for predictions of how populations will
adapt [37].
Fitness graphs are useful for the empirical problems mentioned, as well as for
more theoretical problems, including the relation between global and local proper-
ties of ﬁtness landscapes (see Section 7.3). If one can order a set of genotypes by
decreasing ﬁtness, one has determined the ﬁtness ranks. More ﬁne scaled informa-
tion, such as relative ﬁtness values, may not be known. A ﬁtness graph compares
the ﬁtness ranks of mutational neighbors. For simplicity, whenever we use ﬁtness
graphs we assume that ws ̸= ws′ for any two strings s and s′ which differ in one
position only.
Roughly, consider the zero-string as the starting point (possibly the wild-type),
and each non-zero position of a string as an event, i.e., that a mutation has occurred.
Under these assumptions the ﬁtness graph coincides with the Hasse-diagram of the
power set of events, except that each edge in the Hasse-diagram is replaced with an
arrow toward the string with greater ﬁtness.
For a formal deﬁnition, a ﬁtness graph is a directed graph where each node cor-
responds to a string of ΣL. The ﬁtness graphs has L + 1 levels. Each string such
that ∑si = l corresponds to a node on level l in the ﬁtness graph. In particular,
the node representing the zero-string is at the bottom, the nodes representing strings
with exactly one non-zero position, including 10···0, are one level above, the nodes

7
Polytopes, Graphs and Fitness Landscapes
181
representing strings with exactly two non-zero positions, including 110···0, are on
the next level, and the 1-string is at the top. Moreover, the nodes are ordered from
left to right according to the lexicographic order where 1 > 0 of the corresponding
strings (see e.g. Figure 7.5). A directed edge connects each pair of nodes such that
the corresponding strings differ in exactly one position. The edge is directed toward
the node representing the more ﬁt of the two genotypes.
Remark 1: Unless otherwise stated, the words “level”, “up”, “down” “above”
and “below” refer to ﬁtness graphs. In particular, notice that a higher level does
not imply greater ﬁtness.
For L ≥2, given a string and two positions, consider the four strings which coin-
cide with the original string except in (at most) the two positions. We call the strings
a type 2 system if there is reciprocal sign epistasis, a type 1 system if there is sign
epistasis, but not reciprocal sign epistasis, and a type 0 system if there is no sign
epistasis.
For interpretations of general ﬁtness graphs, it may be helpful to ﬁrst analyze the
two-loci case shape in some detail. There exist exactly 14 ﬁtness graphs for biallelic
two-loci systems (see Figure 7.2), where 4 are type 0 systems, 8 type 1 systems, and
2 type 2 systems. One veriﬁes the following result.
Remark 2: For two-loci, type 0, 1, and 2 systems have the following properties:
(1) A type 0 system can be rotated so that all arrows point up.
(2) A type 1 system differs from a cycle by exactly one arrow.
(3) A type 2 system have two nodes such that all edges are directed toward them,
and two nodes such that no edges are directed toward them.
The observations from the two-loci case should make it easy to identify type 0,
1 and 2 systems for general ﬁtness graphs. Figures 7.3 and 7.4 show ﬁtness graph
for 3-loci systems. Figure 7.3a has type 0 systems only, Figure 7.3b type 0 and 2
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
11
10
01
00
Fig. 7.2 For a ﬁtness graph, the arrows point toward the genotype of greater ﬁtness. There
exist exactly 14 ﬁtness graphs for biallelic two-loci systems, where the type 0 systems are on
the ﬁrst row, the type 1 systems on the second row, and the type 2 systems on the third row.

182
K. Crona
111
110
101
011
100
010
001
000
111
110
101
011
100
010
001
000
(a)
(b)
Fig. 7.3
A ﬁtness graph shows sign epistasis and the peaks. The graph in Figure 7.3a has
type 0 systems only. The graph in Figure 7.3b has type 0 and type 2 systems, but no type 1
systems.
111
110
101
011
100
010
001
000
111
110
101
011
100
010
001
000
(a)
(b)
Fig. 7.4 The graph in Figure 7.4a has type 0, type 1 and type 2 systems. The graph in Figure
7.4b has type 2 systems only, and the corresponding ﬁtness landscape has four peaks.
systems, Figure 7.4a type 0, 1 and 2 systems, and Figure 7.4b type 2 systems only.
Figure 7.5 shows a ﬁtness graph for a 4-loci population, where there are several type
2 systems, including 0001, 0101, 0011, 0111.
7.3
Fitness Graphs and Theoretical Results
Fitness graphs have mostly been used in empirical work [10, 13, 17, 35]. However,
we will indicate how they can be used in theoretical arguments, and mention some
results where the proofs depend on ﬁtness graphs.

7
Polytopes, Graphs and Fitness Landscapes
183
It is known that one can have 2L−1 peaks in a ﬁtness landscape [18] and this
number is an upper bound. The proof is elementary, and we will not give the details.
However, we will construct ﬁtness landscapes with the maximal number of peaks
using ﬁtness graphs.
Example 1: For any L, consider the ﬁtness graph where the edges are directed up
from level 0 to 1, down from level 1 to 2, up from level 2 to 3, and so on. The ﬁtness
graph in Figure 7.4b is an example. Notice that the graph corresponds to ﬁtness
landscapes with 4 peaks, i.e., the maximal number of peaks for L = 3. In general,
all nodes at level 1,3,5... are at peaks, and such ﬁtness graphs correspond to ﬁtness
landscapes with exactly 2L−1 peaks.
1111
1110
1101
1011
0111
1100
1010
1001
0110
0101
0011
1000
0100
0010
0001
0000
Fig. 7.5 The ﬁtness landscape has peaks at 1100, 0011 and 1111, whereas all triple mutants
(mutants on the third level) have low ﬁtness
Recent work relates global and local properties of ﬁtness landscapes [6, 31, 32].
This topic is of interest, since most empirical studies of ﬁtness landscapes concern
local properties, including sign epistasis. It has been shown that multipeaked ﬁtness
landscapes have type 2 systems [32]. The converse is not true. However, a sufﬁcient
condition for multiple peaks can be phrased in terms of type 1 and 2 systems. More
precisely, the following result was proved using ﬁtness graphs.
Result 1: Crona et al., 2013 [6]
If a ﬁtness landscape has type 2 systems and no type 1 systems, then it has multi-
ple peaks.
It follows that the landscapes corresponding to Figures 7.3b and 7.4b have multi-
ple peaks. Fitness graphs are efﬁcient for analyzing mutational trajectories. We will
state a result regarding accessible mutational trajectories from [36]. A brief proof of

184
K. Crona
the result using ﬁtness graphs was given in [6], but the original proof does not use
ﬁtness graphs.
We call the global maximum of the landscape “the ﬁtness peak”. Moreover, de-
ﬁne a general step similar to “adaptive step”, except that the ﬁtness may decrease.
A general walk, as opposed to an “adaptive walk” is a sequence of general steps. If
a general walk between two nodes has minimal length, we call it a shortest walk.
Result 2: Weinreich et al., 2005 [36]
(1) The following conditions are equivalent for a ﬁtness landscape.
(i) Each general step toward the ﬁtness peak, i.e., a step that decreases the
graph theoretical distance to the peak, is an adaptive step.
(ii) Each shortest general walk to the ﬁtness peak is an adaptive walk.
(iii) The ﬁtness landscape has no type 1 or 2 systems.
(2) If the equivalent conditions (i), (ii) and (iii) in (1.) are satisﬁed, then each adap-
tive walk to the ﬁtness peak is a shortest general walk.
A ﬁtness landscape satisfying the equivalent conditions (i)–(iii) above is referred
to as a ﬁtness landscape lacking genetic constraints on accessible mutational tra-
jectories in [36]. For L = 3, the ﬁtness graph in Figure 7.3a corresponds to this
category of landscapes. Fitness landscapes lacking genetic constraints on accessible
mutational trajectories can be represented by ﬁtness graphs where all arrows are up.
For brevity, we will refer to “all arrows up landscapes”.
It is important to notice that the concept of an all arrows up landscape is biologi-
cally meaningful. Even if a landscape is single peaked, type 1 systems may cause the
adaptation process to be slower since not all shortest general walks to the peak are
adaptive walks. However, for all arrows up landscapes, there are no local obstacles
for the adaptation process.
7.4
Fitness Graphs and Recombination
Recombination can generate new genotypes in a population. Under some circum-
stances, recombination will speed up adaptation. An early hypothesis about the pos-
sible advantage of recombination concerned double mutants of high ﬁtness, where
the corresponding single mutations are deleterious. It was suggested that recombi-
nation could generate such double mutants. In terms of ﬁtness graphs this case can
be described as a type 2 system, where the wild-type is at a ﬁtness peak. However,
the hypothesis was immediately criticized, and described as a “widespread fallacy”
by Muller [8]. The two single mutations being deleterious, it seems unlikely that
the the corresponding genotypes would appear and recombine to the double mutant.
The (current) consensus is that under most circumstances recombination will not be
of any use in the situation described, i.e., for a two-loci type-2 system, where the
wild-type is at a peak (see also [23]). However, using ﬁtness graphs we will argue
that recombination could be an advantage in somewhat related cases where L ≥3.

7
Polytopes, Graphs and Fitness Landscapes
185
The topic of recombination is involved with subtle differences between effects
on the population level and the gene level. For instance, it is theoretically possible
that recombination is beneﬁcial for a population and at the same time recombination
suppressors could be selected for (see e.g. [29] for comments and references). We do
not intend to develop new theory, or describe existing knowledge of recombination
in any detail. For an overview of the ﬁeld, we refer to Otto and Lenormand [29]. Our
goal is to point out mechanisms speciﬁc for L ≥3 loci which should be considered
for an analysis of the effect of recombination. This is justiﬁed since the ﬁeld is
dominated by work in the two-loci case, or mechanisms which can be reduced to
the two-loci case.
It has been suggested that recombination has an especially strong impact in struc-
tured populations, see e.g. [26]. A populations is structured, as opposed to well
mixed, if the genotype frequencies varies between geographic locations. In partic-
ular, if a population is subdivided into local subpopulations with some migration
between them, then recombination could be advantageous.
We will sketch a model within this framework, which we call a puddles and ﬂood
population. We mainly have microbes in mind, for example bacteria. Assume that
the local subpopulations live in puddles, and the subpopulations are homogeneous
for most of the time. Occasionally, there is a ﬂood where the contents of the local
puddles get thoroughly mixed. After a ﬂood, life proceeds as usual in the puddles
for an extended period, until the next ﬂood. Under these assumptions, genotypically
different subpopulations are likely to mix, so that recombination can generate new
genotypes.
Example 2: Consider the ﬁtness graph in Figure 7.5, and assume that 0000 is the
wild-type. Both 1100 and 0011 are at peaks, whereas the triple mutants are less
ﬁt as compared to adjacent double mutants. For a puddles and ﬂood population,
recombination of double mutants may result in 1111. In this case recombination
could speed up adaptation
Notice that in the absence of recombination, one could obtain 1111 from 1100,
only if there is a double mutation, since the triple mutants are not ﬁt.
Example 3: Consider the ﬁtness graph in Figure 7.4b. Assume that 000 is the wild-
type. From the ﬁtness graph, the single mutants 100, 010, 001 are at peaks. Under
the assumption that 111 has maximal ﬁtness, recombination could speed up adapta-
tion. However, two recombination events are necessary. For instance, recombination
of 100 and 010 could result in 110. Then recombination of 110 and 001 could result
in 111.
Notice that there is an important difference between Examples 2 and 3. For in-
stance, consider the outcome for a puddles and ﬂood population where no more than
two puddles mix at the time. Then one could obtain 1111 by recombination in Ex-
ample 2. Indeed, if an 1100 population and an 0011 population mix, recombination
could produce the 1111 genotype.
In contrast, consider Example 3 under the same restriction (no more than two
puddles mix). If say an 100 and 010 population mix, one could obtain 110 by

186
K. Crona
recombination. However, 110 is selected against so that 111 is unlikely to appear
under most circumstances. (On the other hand, if several puddles mix, one could
get a mixture of the single mutants 100, 010 and 001, and recombination could
result in 111).
Consider all arrows up ﬁtness landscapes where the 1-string has maximal ﬁtness.
Then one could obtain the 1-string from a sequence of single mutations. However,
for a puddles and ﬂood population, recombination could speed up adaptation. This
is because the process of accumulating L single mutations could be time consuming.
Example 4: For an all arrows up L-loci ﬁtness landscape where considerably more
than L puddles tend to mix during a ﬂood period, one could obtain the 1-string
already after one ﬂood period.
The examples described are theoretical constructions. It is not obvious if Exam-
ples 2 and 3, or similar cases, occur frequently enough in nature for having much of
an impact. A ﬁrst question to ask for a population, is how frequently it happens that
“good+good=not good” for single mutations. This type of problems is the topic for
the next section.
7.5
Fitness Graphs and Other Qualitative Measures
In order to determine if one has a reasonable chance to ﬁnd ﬁtness graphs of the
types described in the previous sections, the following qualitative concept [6] may
be useful.
We deﬁne B and Bp as follows. The set Bp consists of all double mutants such
that both corresponding single mutations are beneﬁcial. The set B ⊆Bp consists of
all double mutants in Bp which are more ﬁt than at least one of the corresponding
single mutants. The qualitative measure of additivity for a ﬁtness landscape is the
ratio |B|
|Bp|. Notice that |B|
|Bp| = 1 for all arrows up landscapes.
Fitness landscapes are deﬁned as additive if ﬁtness effects of mutations sum. For
example, if
w00 = 1,w10 = 1.2,w01 = 1.3,
then additive ﬁtness implies that w11 = 1.5 (since 0.5 = 0.2+0.3, so that the ﬁtness
effects of two mutations sum). Notice that ﬁtness is additive exactly if
w11 −w10 −w01 + w00 = 0.
By deﬁnition, ﬁtness is additive exactly if there is no epistasis. One may consider
all arrows up landscapes as the qualitative correspondence to additive ﬁtness land-
scapes.
Antibiotic resistance landscapes for a particular 4-loci system and 9 selective
environments were studied in [17]. More precisely, all combination of the TEM-1
mutations L21F, R164S, T265M and E240K were considered. The length of TEM-1
is 287, i.e., TEM-1 can be represented as a sequence of 287 letters in the 20-letter al-
phabet corresponding to the amino acids. The notation L21F means that the amino

7
Polytopes, Graphs and Fitness Landscapes
187
acid Leucine (L) at position 21 has been replaced by the amino acid Phenylala-
nine (F). The mutations R164S, T265M and E240K are deﬁned similarly, using the
standard notation for amino acids. The mean value of
|B|
|Bp| for the 9 selective envi-
ronments was 0.57.
In contexts where the relative ﬁtness values of genotypes are not known, qualita-
tive concepts can still be used. It is valuable to understand qualitative information for
several reasons. Fitness ranks tend to be easier to determine as compared to relative
ﬁtness, and from records of mutations one can sometimes draw conclusions about
ﬁtness ranks without making measurements. We argue that much can be learned
about ﬁtness landscape from existing records of mutations, in particular from drug
resistance mutations. However, one needs to be able to interpret qualitative infor-
mation, a theme developed in [7] with applications to antibiotic resistance, see
also [6].
The qualitative measure of additivity is coarse. If relative ﬁtness values can be
determined, one may want to consider quantitative ﬁtness differences as well. For
a quantitative measure of additivity, we refer to the concept “roughness” [1, 5].
Brieﬂy, additive ﬁtness landscapes have roughness 0, and any deviation from addi-
tivity implies that the roughness is greater than 0.
7.6
Shapes
Throughout the remainder of the chapter, we consider biallelic L-loci populations,
where we assume that all 2L genotypes occur in the populations (for a comment
regarding this simpliﬁcation, see Section 7.10), and a ﬁtness landscape
w : ΣL →R, Σ = {0,1}.
Moreover, for L = 2 and 3 we use the following orders of the genotypes (from left
to right):
00,01,10,11 and 000,001,010,011,100,101,110,111.
Most empirical studies of epistasis for several loci focus on the average curvature
(Figure 7.6) or pairwise gene interactions using ANOVA methods [3]. For beneﬁ-
cial mutations, antagonistic epistasis means that the combined effect of mutations
are less than the sum of individual effects, whereas synergistic epistasis means that
the combined effect of mutations exceeds the sum of individual effects. It has been
claimed that antagonistic epistasis dominates for beneﬁcial mutations in nature, see
e.g. [22]. Antagonistic and synergistic epistasis are deﬁned analogously for dele-
terious mutations (Figure 7.6). A motivation for the interest in average effects of
mutations is the connection to recombination. According to standard models, an-
tagonistic epistasis for beneﬁcial mutations sometimes implies an advantage for re-
combination [29].
Conventional summary statistics for epistasis have their limitations. The average
curvature may obscure a diversity of interaction types, and pairwise tests fail to dis-
cover curvature at genetic distances greater than two. The most ﬁne-scaled approach

188
K. Crona
(a)
(b)
Fig. 7.6
The number of mutations increases along the horizontal axis, and the ﬁtness in-
creases along the vertical axis. For Figure 7.6a, the mutations are beneﬁcial. The upper curve
corresponds to antagonistic epistasis, and the lower curve to synergistic epistasis. For Figure
7.6b, the mutations are deleterious. The upper curve corresponds to synergistic epistasis and
the lower curve to antagonistic epistasis.
to gene interactions is the geometric theory, introduced in [3]. The theory reveals all
the gene interactions, and it depends on triangulations of polytopes. For mathemati-
cal background we refer to [9], see also [39] for the general theory about polytopes.
The geometric approach has revealed previously unappreciated gene interactions for
HIV, Escherichia-coli and in some other cases [3, 4], and the approach is relevant
for recombination.
We will start with an informal introduction to the geometric theory, where the
main purpose is to provide an intuitive understanding and some geometric interpre-
tations. More formal descriptions are given in the next sections.
Roughly, a triangulation of a polygon is a subdivision of the polygon into tri-
angles. A triangulation of the L-cube is a subdivision of the cube into simplices
(triangles if L = 2, tetrahedra if L = 3, pentachora for L = 4, and so on). We will use
some concepts which are deﬁned in terms of populations. If one groups individuals
into classes of identical genotypes, a population can be described as the frequencies
of the genotypes. The ﬁtness of a population is deﬁned as the average ﬁtness of all
individuals.
First consider the case L = 2. Let
Δ = {(p00, p01, p10, p11) ∈[0,1]4 : p00 + p01 + p10 + p11 = 1}
denote the population simplex. A population is given as a point in Δ. The genotope
for L = 2 is the square with vertices 00,01,10,11. We denote this genotope [0,1]2,
and interpret a point v = (v1,v2) ∈[0,1]2 as the allele frequencies of the population,
where v1 denotes the frequency of 1’s at the ﬁrst locus, and v2 the frequency of 1’s
at the second locus.

7
Polytopes, Graphs and Fitness Landscapes
189
For a simple example, consider a population where half of the individuals have
genotype 00, and the other half 11. Then the allele frequency vector is (0.5,0.5).
For a population where half of the individuals have the genotype 01 and the other
half 10, the allele frequency vector is (0.5,0.5) as well. However, the average ﬁtness
may differ between the two populations.
We will analyze examples in more detail.
Example 5: Consider v = (0.4,0.8) ∈[0,1]2 and the populations p1 = (0.2,0.4,
0,0.4) ∈Δ and p2 = (0,0.6,0.2,0.2) ∈Δ. One veriﬁes that both populations have
the allele frequencies described by v; indeed, adding the contributions of 1’s for p1
and the ﬁrst locus gives 0+0.4 = 0.4, and for the second locus 0.4+0.4 = 0.8. The
contributions for p2 gives 0.2+0.2 = 0.4 for the ﬁrst locus, and 0.6+0.2 = 0.8 for
the second.
Let ρ denote a corresponding map from the population simplex Δ to the genotope
[0,1]2, where
ρ(p00, p01, p10, p11) = (p10 + p11, p01 + p11).
Then ρ maps a point of the population simplex to the allele frequencies, where
p10 + p11 equals the frequency of 1’s at the ﬁrst locus, and p01 + p11 equals the
frequency of 1’s at the second locus. Notice that ρ(p1) = ρ(p2) = v in the previous
example.
Given a ﬁtness landscape and a vector v ∈[0,1]2, a ﬁttest population p ∈Δ has
maximal ﬁtness among populations such that the allele frequencies are described by
v. Moreover, p is unique for L = 2, except in the case when ﬁtness is additive (see
also the comment after Case 2 below). For a ﬁttest population, one cannot increase
the ﬁtness by shufﬂing around alleles. The biological signiﬁcance is immediate,
since such allele shufﬂing relates to recombination.
For a geometric interpretation, the ﬁtness landscapes w (usually) induces a trian-
gulation of the genotope [0,1]2. This triangulation is the shape of the ﬁtness land-
scape. The critical property of the triangulation is that for v ∈[0,1]2, the genotypes
that occur in the ﬁttest population are the vertices of the triangle which contains v.
The corresponding result holds for any L. We will ﬁrst describe the triangulations,
and then give a geometric interpretation of shapes. As remarked, ﬁtness is additive
exactly if
w11 −w10 −w01 + w00 = 0.
For simplicity, we call the case where 11 has higher ﬁtness as compared to a linear
expectations positive epistasis, and similarly for negative epistasis.
Case 1: (positive epistasis) If
w11 −w10 −w01 + w00 > 0,
then the triangulation induced by the ﬁtness landscape has 00 −11 diagonal, mean-
ing that the triangles are {00,01,11} and {00,10,11} (Figure 7.7).

190
K. Crona
Case 2: (negative epistasis) If
w11 −w10 −w01 + w00 < 0,
then the induced triangulation of the genotope has 10 −01 diagonal meaning that
the triangles are {00,01,10} and {01,10,11} (Figure 7.7).
For positive epistasis, p1 in Example 5 is a ﬁttest population. Indeed, positive
epistasis implies that whenever one replaces 10 and 01 genotypes by 00 and 11
genotypes, the result is increased average ﬁtness of the population. However, for p1
the proportions of 00 and 11 genotypes are maximal (in the sense that one cannot
replace 10 and 01 genotypes by 00 and 11 genotypes), so that p1 has maximal ﬁtness
given the allele frequency vector v = (0.4,0.8). For positive epistasis, notice that
v = (0.4,0.8) is a point in the triangle {00,01,11} and that the genotypes of p1 are
00,01, 11. Moreover, 10 and 01 are not on the same triangle, which indicates that
one can increase ﬁtness by replacing them with other genotypes. These observations
illustrate how shapes and ﬁttest populations relate for L = 2.
For a geometric interpretation of shapes, consider the genotope [0,1]2 and the
four points above the vertices of [0,1]2, such that the height coordinates correspond
to ﬁtness. The four points are vertices of a tetrahedron (Figure 7.7). The upper sides
of the tetrahedron (marked with different patterns) project onto two triangles of
[0,1]2. The projections describe the triangulation induced by w. The left picture cor-
responds to positive epistasis, and the right to negative epistasis. This construction
should make sense, since the triangulation obtained as projections of the upper faces
of the tetrahedron has the critical property for all ﬁttest populations. More precisely,
for any v ∈[0,1]2, a ﬁttest population consists of vertices of the triangle which con-
tain v. The ﬁtness landscape almost always induces a triangulation of the genotope
[0,1]2 as described. Such a triangulation is a generic shape. The exceptional (non-
generic) case is when ﬁtness is additive.
In general, consider a biallelic L-loci system and the ﬁtness landscape w. The
genotope is the L-cube [0,1]L, where the vertices represent the genotypes. As in the
two-loci case, let Δ denote the population simplex and let ρ denote the correspond-
ing map from Δ to [0,1]L. For a ﬁxed v ∈[0,1]L, consider the linear programming
problem
max{ p ·w : ρ(p) = v}.
A solution gives the maximal population ﬁtness, i.e., the maximum of p · w, given
the allele frequency vector v (since ρ(p) = v). Consequently, ﬁnding the ﬁttest pop-
ulation translates to solving this linear programming problem.
If we let v vary, we get the following parametric linear programming problem
˜w(v) = max{ p ·w : ρ(p) = (v) for all v ∈[0,1]L}.
The domains of linearity of ˜w do almost always constitute a triangulation of the
genotope [9, Chapter 2]. The shape of the ﬁtness landscape is the triangulation of
[0,1]L induced by the ﬁtness landscape w. The geometric interpretation is analogous
to the two-loci case, so that the triangulation is obtained as the projections of the

7
Polytopes, Graphs and Fitness Landscapes
191
00
01
11
10
00
01
11
10
Fig. 7.7 The upper pictures show the triangulations of the genotopes (the squares) in Case
1 (positive epistasis) and 2 (negative epistasis). The lower left picture shows the tetrahedron
above the genotope in Case 1, where the height coordinates correspond to the ﬁtness of the
four genotypes under consideration. The projections of the upper sides of the tetrahedron
describe the triangulations. The lower right picture shows how the triangulation is induced in
Case 2.
upper faces of the polytope constructed from the ﬁtness landscape. Moreover, in
the generic case, i.e., if the shape of the ﬁtness landscape is a triangulation, the
ﬁttest population is unique for a given allele frequency vector v. More precisely, the
genotypes that occur in the ﬁttest population are the vertices of the simplex which
contains v.
For the two-loci case, the geometric theory does not contribute anything new,
since there exist only two triangulations corresponding to the two types of epistasis
in the usual sense. However, for L = 3, there are 74 generic shapes corresponding to
triangulations of the cube (see Section 7.9).
Not all triangulations can be obtained from a ﬁtness landscape. A triangulation
is regular if it is induced by some ﬁtness landscape. Figure 7.8 shows a non-regular
triangulation. This is the smallest non-regular triangulation.
In the literature, a regular triangulation is described as a triangulation which is
induced by a cost vector. Then the linear programming problem concerns minimiz-
ing the cost, and the triangulations are obtained as projections of all lower faces of

192
K. Crona
Fig. 7.8 A non-regular triangulation. This triangulation cannot be induced from a ﬁtness
landscape.
the polytope constructed from the cost vector. Since our topic is ﬁtness landscapes,
we think in terms of maximal ﬁtness rather than minimal costs.
7.7
Shapes and Flips
For L > 2, there are many possible shapes. It may seem that shapes are difﬁcult to
apply in empirical biology, due to ambiguity from measurement errors. However,
the geometric theory comes with a structure. Shapes may be similar or completely
different, and the relation between shapes can be described in a systematic way. We
start with intuitive descriptions. Brieﬂy, a ﬂip, sometimes referred to as a geometric
bistellar ﬂip, is a minimal change between triangulations. Figures 7.9, 7.10 and 7.11
Fig. 7.9 The left triangulation can be transformed into the right triangulation by a ﬂip

7
Polytopes, Graphs and Fitness Landscapes
193
show ﬂips. For the two-loci case, the two triangulations corresponding to positive
and negative epistasis differ by a ﬂip.
For an overview of how all triangulations of a polytope are related, one can con-
sider the ﬂip graph. The nodes of the graph are the triangulations, and edges connect
triangulations which differ by a ﬂip. Figure 7.12 shows the ﬂip graph of a hexagon.
The graph theoretical distance between triangulations can be considered a measure
of how closely related the triangulations are. Some caution is necessary if one is
primarily interested in regular triangulation, since a regular triangulation may be
transformed into a non-regular triangulation by a ﬂip.
Fig. 7.10 The dashed lines indicate the triangulations. The triangulations differ by a ﬂip.
Fig. 7.11 The triangulations differ by a ﬂip, and the number of triangles are different for the
two triangulations

194
K. Crona
Fig. 7.12 The ﬂip graph of a hexagon
7.8
Shapes and Polyhedral Subdivisions
Given a genotype space ΣL, consider all possible shapes induced by ﬁtness land-
scapes w : ΣL →R. We will describe how the shapes are related. Most results depend
on triangulations of polytopes. In particular, we will discuss the secondary polytope
[14], an important construction in discrete mathematics. The secondary polytope is
useful for a global understanding of shapes. We will not provide proofs, but rather
describe results and how they apply to epistasis. For a thorough treatment, including
proofs, see [9] and for the biological perspective [3]. Remark 3 in the end of Section
7.9 explains how our applications relate to the general theory about polytopes. Some
deﬁnitions below may seem technical, but the ﬁgures and intuitive descriptions from
the previous sections should help.
Throughout the section, let A ∈Rd denote a ﬁnite point set. A polytope is the
convex hull of a point set, and conv(A) denotes the convex hull of A.
Polytopes include points, line segments, triangles and tetrahedra, as well as L-
cubes and polygons. We will use some concepts expressed in terms of point sets,
although we have polytopes in mind. In particular, a triangulation of a polytope is a
triangulation of the set of its vertices, and similarly for the other concepts.
A k-simplex is the convex hull of k+1 afﬁnely independent points. In particular,
points, segments, triangles and tetrahedra are simplices.
A j-face of a k-simplex is the convex hull of a subset of j vertices.

7
Polytopes, Graphs and Fitness Landscapes
195
We will give a formal deﬁnition of triangulations and some related concepts. A
polyhedral subdivision of a point set A is a collection of polytopes C , such that
(i) If C ∈C , then each face of C belongs to C as well (closure property),
(ii) the union ∪C∈CC = conv(A) (union property),
(iii) for C ̸= C′ where C,C′ ∈C , the intersection C∩C′ does not contain any interior
points of C or C′ (intersection property).
A triangulation of A is a polyhedral subdivision such that all polytopes are sim-
plices. A reﬁnement C ′ of a polyhedral subdivision C is a polyhedral subdivision
C ′ where for each C′ ∈C ′, there exists a C ∈C , such that C′ ⊂C. A polyhedral
subdivision is an almost triangulation if it is not a triangulation, but all its proper re-
ﬁnements are triangulations. Two triangulations of the same point set are connected
by a ﬂip if they are the only two triangulations reﬁning an almost triangulation.
All these concepts are illustrated in Figures 7.9 and 7.13. Speciﬁcally, Figure 7.13
shows a polyhedral subdivision which is also an almost triangulation. Moreover, the
two possible reﬁnements are the triangulations in Figure 7.9. As mentioned, the tri-
angulations in Figure 7.9 differ by a ﬂip, so that the formal deﬁnition agrees with
the descriptions in the previous section.
Fig. 7.13 The polyhedral subdivision is an almost triangulation. The two possible reﬁne-
ments result in the two triangulations from Figure 7.9.
From the previous section, a triangulation induced by the ﬁtness landscape is
the shape of the landscape. More generally, we can describe all shapes using the
concepts deﬁned in this section. Consider again the parametric linear programming
problem where v varies:
˜w(v) = max{ p ·w : ρ(p) = (v) for all v ∈[0,1]L}.

196
K. Crona
The domains of linearity of ˜w constitute a polyhedral subdivision [9, Chapter 2] of
the genotope. The shape of a ﬁtness landscape is the polyhedral division induced
by the landscape. This subdivision is not always a triangulation. Recall from the
two-loci case that positive epistasis corresponds to u > 0 and negative epistasis to
u < 0, for
u = w00 −w01 −w10 + w11.
However, one does not obtain a triangulation if u = 0. As remarked, the ﬁtness
landscape is generic if it induces a triangulation, and the corresponding shapes are
the generic shapes.
In order to further describe the relations between shapes, we will consider mini-
mal dependence sets of points, as in the following example.
Example 6: Consider the vertices of the genotope [0,1]2. The relation
1 ·(0,0)−1 ·(0,1)−1·(1,0)+ 1·(1,1)= 0,
is an afﬁne dependence relation, since the sum of the coefﬁcients 1 −1 −1 + 1 is
zero. This set of four points is a minimal dependence set, in the sense that every
proper subset of the four points is independent. The form
w00 −w01 −w10 + w11,
corresponds to the dependence relation. Notice that the form is unique up to scaling,
i.e., multiplication by a constant.
We deﬁne a circuit as a minimal afﬁne dependence set. The corresponding forms
are called circuits as well, and they are unique up to scaling. Flips and circuits are
closely related. The circuit u corresponds to the ﬂip between the two triangulations
of the genotope in the two-loci case. More precisely, the triangulation corresponding
to positive epistasis is described by u > 0, and the ﬂip corresponds to replacing
u > 0 by u < 0. In general, a ﬂip corresponds to changing sign of a circuit, and some
examples for L = 3 are given in the next section. The next concept will be used for
deﬁning the secondary polytope, and for describing ﬂips and circuits in more detail.
For a triangulation of a polytope, we deﬁne the GKZ vector as follows: Each com-
ponent of the GKZ vector corresponds to a vertex of the polytope. The component
is the sum of the normalized volumes of all simplices containing the vertex.
In this context, it is sufﬁcient to use that the normalized volume of the L-cube
[0,1]L is n!, so that the genotope [0,1]2 in the two loci case has area 2, and the
genotope [0,1]3 in the 3-loci case has volume 6. In general, for an n-dimensional
lattice polytope, the normalized volume is deﬁned as the Euclidean volume of the
polytope multiplied by n!

7
Polytopes, Graphs and Fitness Landscapes
197
Example 7: The GKZ-vector for the triangulation of [0,1]2 in the two-loci case as-
sociated with positive epistasis is (2,1,1,2), using the order as given in the begin-
ning of Section 7.6. Indeed, both triangles have area 1 (using normalized volumes).
The vertices 00 and 11 belong to two different triangles each, whereas 10 and 01
are “sliced off”, so that each of them belong to one triangle only. Similarly, the
GKZ-vector for the triangulation associated with negative epistasis is (1,2,2,1).
The purpose with the next example is to relate circuits and GKZ vectors.
Example 8: From the previous example, the GKZ-vector for the triangulation as-
sociated with positive epistasis is (2,1,1,2), whereas the the GKZ vector for the
triangulation associated to negative epistasis is (1,2,2,1). We relate to the circuit
u = w00 −w01 −w10 +w11 the vector (1,−1,−1,1). The ﬂip between the two trian-
gulations corresponds to u, and
(2,1,1,2)−(1,2,2,1) = (1,−1,−1,1)
so that the GKZ vectors differ by the vector corresponding to the circuit associated
with the ﬂip.
See Remark 3 for some comments about the relation between GKZ vectors and
ﬂips, including references. In the next section, we will consider the relations be-
tween ﬂips and GKZ vectors for L = 3.
For a given polytope the secondary polytope is deﬁned as the the convex hull
of the GKZ vectors. The geometric classiﬁcation of ﬁtness landscapes depends on
the secondary polytope. For a genotope, the vertices of the secondary polytope
correspond to generic shapes, and its edges to ﬂips between the generic shapes.
The higher dimensional faces of the secondary polytope correspond to non-generic
shapes. Consequently, the secondary polytope represent all the shapes and their re-
lations.
Example 9: The secondary polytope for the two-loci case is a line segment, where
the vertices corresponds to the two triangulations, and the line segment to the ﬂat
shape.
7.9
The 74 Generic Shapes of the Cube
The relations between shapes, circuits and GKZ vector for the 3-cube, is analogous
to the two-loci case, as indicated in the previous section. Recall that the square has
2 generic shapes, corresponding to u > 0 and u < 0, for
u = w00 −w01 −w10 + w11.
The cube has 74 generic shapes, where a shape is determined by the following 20
circuits:

198
K. Crona
a := w000 −w010 −w100 + w110
b := w001 −w011 −w101 + w111
c := w000 −w001 −w100 + w101
d := w010 −w011 −w110 + w111
e := w000 −w001 −w010 + w011
f := w100 −w101 −w110 + w111
g := w000 −w011 −w100 + w111
h := w001 −w010 −w101 + w110
i := w000 −w010 −w101 + w111
j := w001 −w011 −w100 + w110
k := w000 −w001 −w110 + w111
l := w010 −w011 −w100 + w101
m := w001 + w010 + w100 −w111 −2w000
n := w011 + w101 + w110 −w000 −2w111
o := w010 + w100 + w111 −w001 −2w110
p := w000 + w011 + w101 −w110 −2w001
q := w001 + w100 + w111 −w010 −2w101
r := w000 + w011 + w110 −w101 −2w010
s := w000 + w101 + w110 −w011 −2w100
t := w001 + w010 + w111 −w100 −2w011
We will use the letters a −t in the list, as well as u, throughout the section.
In order to emphasize the connection to gene interactions, especially the algebraic
aspects of epistasis, we will consider the interaction space. For any L, let L be the
subspace of RΣL consisting of additive ﬁtness landscapes. The interaction space is
the vector space dual to the quotient of RΣL modulo L , or

RΣL/L
∗
.
The interaction space is spanned by the set of all circuits, where the circuits are
unique up to scaling. In the two-loci case, the interaction space is spanned by u. For
L = 3, the interaction space is spanned by the 20 circuits a −t.
The circuit sign pattern of a ﬁtness landscape consists of the sign (positive, nega-
tive or zero) of each circuit. In the two-loci case there is only one circuit and the sign
pattern is either u > 0, u < 0 or u = 0. A central result for the geometric classiﬁca-
tion is that the circuit sign pattern determines the shape of the ﬁtness landscape, but
in general the converse does not hold [3]. In particular, the signs of the 20 circuits
a −t determine the shape of the ﬁtness landscape for L = 3. In total, there are 74
generic shapes. The fact that there are 20 circuits and only 74 generic shapes reﬂects
dependence relations.

7
Polytopes, Graphs and Fitness Landscapes
199
Table 7.1 lists the shapes, where the vertices of the cube are ordered as follows
000,001,010,011,100,101,110,111.
Table 7.1 Shape numbers, GKZ vectors, inequalities and adjacent shapes
#
GKZ
inequalities
#
GKZ
circuits
1
15515115 tqom3,4,5,6
38 31355313 lgcd39,44,51,59
2
51151551 srpn7,8,9,10
39 31533513 lief38,44,53,60
3
14436114 tbde1,11,13,17
40 33155133 jgab42,45,54,61
4
14614314 qbfc1,12,14,18
41 33511533 hiab43,46,55,62
5
16414134 odfa1,15,16,19
42 35133153 jkef40,45,57,63
6
34414116 meca1,28,29,31
43 35311353 hkcd41,46,58,64
7
41163441 sacf2,20,22,26
44 51333315 giba38,39,65,68
8
41341641 raed2,21,23,27
45 53133135 gkdc40,42,66,69
9
43141461 pceb2,24,25,30
46 53311335 ikfe41,43,67,70
10 61141443 nfdb2,32,33,34
47 13356222 dbfe11,13,35,71
11 13446213 blde3,12,47,51
48 13623522 fbdc12,14,36,72
12 13624413 blfc4,11,48,53
49 16323252 fdba15,16,37,73
13 14346123 djbe3,15,47,54
50 22265331 caef20,22,35,71
14 14613423 fhbc4,16,48,55
51 22356213 ebcd11,17,38,71
15 16324143 djfa5,13,49,57
52 22532631 eacd21,23,36,72
16 16413243 fhda5,14,49,58
53 22623513 cbef12,18,39,72
17 23346114 egbd3,28,51,54
54 23256123 edab13,17,40,71
18 23613414 cibf4,29,53,55
55 23612523 cfab14,18,41,72
19 26313144 akdf5,31,57,58
56 25232361 ecab24,25,37,73
20 31264431 alcf7,21,50,59
57 26223153 adef15,19,43,73
21 31442631 aled8,20,52,60
58 26312253 afcd16,19,43,73
22 32164341 cjaf7,24,50,61
59 31265322 fadc20,26,38,71
23 32431641 ehad8,25,52,62
60 31532622 dafe21,27,39,72
24 34142361 cjeb9,22,56,63
61 32165232 fcba22,26,40,71
25 34231461 ehcb9,23,56,64
62 32521632 deba23,27,41,72
26 41164332 fgac7,32,59,61
63 35132262 bcfe24,30,42,73
27 41431632 diae8,33,60,62
64 35221362 bedc25,30,32,73
28 43324116 egca 6,17,65,66
65 52323216 ceba28,29,44,74
29 43413216 ciea6,18,65,67
66 53223126 aedc28,31,45,74
30 44131362 bkce9,34,63,64
67 53312226 acfe29,31,46,74
31 44313126 akec6,19,66,67
68 61232325 dfab32,33,44,74
32 61142334 fgdb10,26,68,69 69 62132235 bfcd32,34,45,74
33 61231434 difb10,27,68,70
70 62221335 bdef33,34,46,74
34 62131344 bkfd10,30,69,70 71 22266222 efdbca47,50,51,54,59,61
35 13355331 ljfe36,37,47,50
72 22622622 cdfbea48,52,53,55,60,62
36 13533531 lhdc35,37,48,52 73 26222262 abfdec49,56,57,58,63,64
37 15333351 jhba35,36,49,56 74 62222226 acebdf65,66,67,68,69,70
For each shape, the table gives the GKZ vector, the deﬁning inequalities, and the
adjacent shapes. In particular, for Shape 74 the notation

200
K. Crona
acebdf65,66,67,68,69,70,
in the second column means that Shape 74 is deﬁned by
a,c,e,b,d, f > 0.
and that the adjacent shapes are 65,66,67,68,69,70. Similarly, for Shape 65 the no-
tation
ceba28,29,44,74,
means that the shape is deﬁned by
c > 0,e > 0,b > 0,a < 0,
where a indicates that a < 0, and the adjacent shapes are 28, 29, 44, 74.
Each inequality of Shape 74 can be described in terms of epistasis (in the usual
sense), since each inequality keeps one locus ﬁxed. In contrast, the inequalities of
Shape 1 considers three-way interactions. The fact that m > 0, where
m = w001 + w010 + w100 −w111 −2w000
shows that the genotype 111 has lower ﬁtness as compared to a linear expectation
from the values
w001,w010,w100,w000.
This observation shows already that the geometric theory is more ﬁne-scaled as
compared to conventional approaches.
The 74 shapes fall into six categories, called the interaction types. Speciﬁcally,
the types consist of Shape 1-2, 3-10, 11-34, 35-46, 47-70 and 71-74. For pictures of
the six interaction types, see [9, Chapter 1]. Shapes of the same type differ only in
the labeling of the vertices. In particular, the shapes of the same interaction type in
the table have GKZ vectors that differ only by a permutation of the components.
As in the two-loci case, the circuits correspond to ﬂips. The letters representing
circuits are ordered according to the shapes resulting from the corresponding ﬂips.
Consider again Shape 74. In addition to the information described, the notation
acebd f65,66,67,68,69,70.
indicates how ﬂips and shapes relate in a precise way. The ﬂip corresponding to a
results in Shape 65 (the ﬁrst letter is paired with the ﬁrst number), the ﬂip corre-
sponding to c results in Shape 66, and so forth.
For an explicit description, consider Shape 74 and the ﬂip corresponding to a.
Since Shape 74 is deﬁned by
a > 0,c > 0,e > 0,b > 0,d > 0, f > 0,
the result of the ﬂip is the shape deﬁned by

7
Polytopes, Graphs and Fitness Landscapes
201
a < 0,c > 0,e > 0,b > 0,d > 0, f > 0,
which reduces to
a < 0,c > 0,e > 0,b > 0,
since the four inequalities imply that d > 0 and f > 0. Shape 65 is described by
exactly these four inequalities in the table.
The table lists GKZ vectors as well. Flips and GKZ-vectors are related, as in
the two-loci case. For instance, the GKZ vector is 62222226 for Shape 74, and
52323216 for Shape 65. The circuit a corresponds to the vector
(1,0,−1,0,−1,0,1,0),
and
(6,2,2,2,2,2,2,6)−(5,2,3,2,3,2,1,6) = (1,0,−1,0,−1,0,1,0).
(see Remark 3). For a systematic interpretation of the 20 circuits a −t listed, one
may consider the Fourier transform for the group (Z2)n [3]. Geometric interpreta-
tions of the circuits are given in the same paper.
Remark 3: We have indicated results about polytopes and triangulations of rele-
vance in evolutionary biology (see also the next section about shapes and empirical
data). We refer to De Loera et al. [9] for general background about triangulations
of polytopes, where the Chapters 4 and 5 are especially important. “Additive ﬁt-
ness landscapes”, as deﬁned here, translates to “linear evaluations” in the general
theory, and “interaction spaces” to “linear dependences”. The fact that the inter-
action space is spanned by the circuits is an aspect of Gale duality [9, Chapter 4].
The relation between GKZ vectors and ﬂips were illustrated above for the Shapes
65 and 74, and in Example 8 in the previous section. In terms of the general theory,
the interaction space equals the linear space parallel to the secondary polytope [9,
Chapter 5], and a detailed description of the relation between GKZ vectors and ﬂips
is given in the same chapter.
7.10
Shapes and Empirical Data
The described relations between circuits, ﬂips, GKZ-vectors and the secondary
polytopes hold under very general assumptions. We restricted our discussion to bial-
lelic L-loci populations in order to keep the presentation simple. For the geometric
theory of gene interactions, the genotope is deﬁned for any set of genotypes found
in a population and the shape is deﬁned accordingly [3]. In fact, the authors stress
that the genotope is never an L-cube for binary data and many loci (≥20), which
is important for complexity reasons. Empirical examples of general type [3, 4] can
be analyzed similarly to the restricted case we considered here. Empirical data can
be understood as to belong to an empirical ﬁtness landscape. For a shape analysis
of empirical data, one needs several ﬁtness measurements of each genotype due to

202
K. Crona
statistical variation. One may not ﬁnd a unique shape, but rather a set of similar
shapes which are compatible with the data.
A shape analysis of HIV ﬁtness data is given in [3]. The biallelic three-loci system
considered there is associated with HIV drug resistance. From bootstrapping, the
three dominant shapes are 2, 7 and 10. Notice that these shapes are adjacent, and
have similar GKZ vectors. Moreover, the ﬁve most dominant shapes 2, 7, 10, 26 and
32 appear as a face of the secondary polytope of the cube, and have similar GKZ
vectors as well.
Software for analyzing shapes is available, for example Polymake1.
7.11
Shapes and Fitness Graphs
A ﬁtness graph is determined by ﬁtness ranks only. The information from shapes is
incomparably more ﬁne-scaled. It is of interest to compare the two perspectives.
For the two-loci case, assume that the 11 genotype has maximal ﬁtness. Then
positive epistasis is compatible with three ﬁtness graphs (no arrows down, exactly
one arrow down, or two arrows down). On the other hand, consider the ﬁtness graphs
with all arrows up. Such a graph is compatible with positive, negative or no epistasis.
This example shows that ﬁtness graphs provide information that cannot be obtained
from the geometric classiﬁcation, and vice versa, and the same observation holds
for any L. Since L=2 is rather special, we will demonstrate that ﬁtness graphs and
shapes provide complementary information also for L = 3, where the examples are
from [6]. For more comparisons of ﬁtness graphs and shapes, also in the context of
empirical data, see the same paper.
The following all arrows up landscapes is of Shape 74,
w000 = 1,w100 = w010 = w001 = 2,w110 = w101 = w011 = 4,w111 = 7.
The landscape
w000 = 2,w100 = w010 = w001 = 1,w110 = w101 = w011 = 4,w111 = 8,
is of shape 74 as well. The corresponding ﬁtness graph has exactly 3 arrows down,
and both 000 and 111 are at peaks. It is easily seen that there exist ﬁtness landscapes
of shape 74 with other ﬁtness graphs, in addition to the two mentioned.
For each interaction type for L = 3, Table 2 gives the shape number and an ex-
ample of an all arrows up landscape of this shape.
As we have seen, ﬁtness graphs and shapes provide complementary information.
There is usually an overlap in the information as well. For instance, if all arrows
point away from a particular genotype, and if the genotype is ”sliced off” for the
shape, then one has two indications that the genotype has relatively low ﬁtness.
Fitness graphs provide information about the adaptive potential if one restricts
to single mutations. The graphs reveal coarse properties, such as sign epistasis,
1 http://www.polymake.org/doku.php

7
Polytopes, Graphs and Fitness Landscapes
203
Table 7.2 Interaction types, shape numbers and ﬁtness landscapes
w000 w100 w010 w001 w110 w101 w011 w111
Type 1, no 2: 1
2
2
2
4
4
4
5
Type 2, no 10: 1
2
2
2
6
6
6
9
Type 3, no 34: 1
2
2
2
10
6
5
12
Type 4, no 46: 1
2
5
5
8
8
8
13
Type 5, no 70: 1
2
5
5
9
9
10
15
Type 6, no 74: 1
2
2
2
4
4
4
7
mutational trajectories, and the number of peaks. It is clear that a complete anal-
ysis of recombination requires more ﬁne-scaled information as compared to what
ﬁtness graphs provide. The geometric theory, on the other hand, reveals all gene
interactions. Finding the shape of a landscape is equivalent to ﬁnding all the ﬁttest
populations, which explains why shapes are relevant for recombination.
From a more philosophical perspective, the interest in ﬁtness graphs and shapes
depends on the belief that average effects of mutations are insufﬁcient for analyzing
evolutionary dynamics.
7.12
Discussion
We have considered ﬁtness graph and the geometric theory of gene interactions.
Fitness graphs and shapes provide complementary information, and there tend to be
some overlap in the observations. Fitness graphs are useful for analyzing peaks and
other coarse properties of ﬁtness landscapes. The graphs have been used in empirical
work, and for relating global and local properties of ﬁtness landscapes.
The geometric theory extends the usual concept epistasis to any number of loci,
where shapes, as deﬁned in the geometric theory, correspond to positive and nega-
tive epistasis for two mutations. The geometric classiﬁcation is meaningful because
it comes with a structure. A particular shape can be put in a context, and compared to
other shapes. In summary, for biallelic populations where all 2L genotypes are rep-
resented, the genotope is an L-cube. The shape of a ﬁtness landscape is a polyhedral
subdivision of the genotope induced by the landscape. The generic shapes are the
triangulations of the genotope. The relation between all the generic shapes can be
described in terms of ﬂips, or minimal changes between shapes. The ﬂip graph pro-
vides an overview of the generic shapes and how they can be transformed into each
other by ﬂips. The secondary polytope encodes all shapes and their relations, where
the generic shapes correspond to vertices, and the non-generic shapes to the higher
dimensional faces. For an algebraic perspective, the interaction space is spanned by
a set of linear forms, or circuits. The shapes are determined by the sign pattern of
the circuits, and changing sign of a circuit corresponds to a ﬂip.
The geometric theory has provided new insights about gene interactions in em-
pirical studies. The theory may be considered a fundamentally new approach to

204
K. Crona
recombination. There is clearly a potential for new applications of shapes to evolu-
tionary biology, even if the geometric theory is complete.
The approaches discussed here are similar in one respect. They make no assump-
tions, or minimal assumptions, about the underlying ﬁtness landscapes. The accu-
racy of an analysis of empirical data using ﬁtness graphs or the geometric theory
does not depend on any a priori assumptions about the ﬁtness landscape. Fitness
graphs and shapes are well suited for empirical studies for that reason.
Acknowledgements. I am grateful to Francisco Santos for valuable comments.
References
[1] Aita, T., Iwakura, M., Husimi, Y.: A cross-section of the ﬁtness landscape of dihydro-
folate reductase. Protein Eng. 14, 633–638 (2001)
[2] Beerenwinkel, N., Eriksson, N., Sturmfels, B.: Conjunctive Bayesian networks.
Bernoulli 13, 893–909 (2007)
[3] Beerenwinkel, N., Pachter, L., Sturmfels, B.: Epistasis and shapes of ﬁtness landscapes.
Statistica Sinica 17, 1317–1342 (2007)
[4] Beerenwinkel, N., Pachter, L., Sturmfels, B., Elena, S.F., Lenski, R.E.: Analysis of
epistatic interactions and ﬁtness landscapes using a new geometric approach. BMC
Evolutionary Biology 7, 60–61 (2007)
[5] Carnerio, M., Hartl, D.L.: Colloquium papers: Adaptive landscapes and protein evolu-
tion. Proc. Natl. Acad. Sci USA 107(Suppl. 1), 1747–1751 (2010)
[6] Crona, K., Greene, D., Barlow, M.: The peaks and geometry of ﬁtness landscapes. J.
Theor. Biol. 317, 1–13 (2013)
[7] Crona, K., Patterson, D., Stack, K., Greene, D., Goulart, C.P., Mentar, M., Jacobs, S.J.,
Kallmann, M., Barlow, M.: Antibiotic resistance landscapes: a quantiﬁcation of theory-
data incompatibility for ﬁtness landscapes (2013),
http://arxiv.org/abs/1303.3842
[8] Crow, J.F.: H. J. Muller and the “competition hoax”. Genetics 173, 511–514 (2006)
[9] De Loera, J.A., Rambau, J., Santos, F.: Triangulations: Applications, Structures and Al-
gorithms. Algorithms and Computation in Mathematics, vol. 25. Springer, Heidelberg
(2010)
[10] De Visser, J.A.G.M., Park, S.C., Krug, J.: Exploring the effect of sex on empirical ﬁtness
landscapes. The American Naturalist 174(suppl. 1), S15–S30 (2009)
[11] Desper, R., Jiang, F., Kallioniemi, O.P., Moch, H., Papadimitriou, C.H., Sch¨affer, A.A.:
Inferring tree models for oncogenesis from comparative genome hybridization data.
Comput. Biol. 6, 37–51 (1999)
[12] Flyvbjerg, H., Lautrup, B.: Evolution in a rugged ﬁtness landscape. Phys. Rev. A 46,
6714–6723 (1992)
[13] Franke, J., Kl¨ozer, A., de Visser, J.A.G.M., Krug, J.: Evolutionary accessibility of mu-
tational pathways. PLoS Comput. Biol. 7(8), e1002134 (2011),
doi:10.1371/journal.pcbi.1002134
[14] Gelfand, I.M., Kapranov, M., Zelevinsky, A.: Discriminants, Resultants and Multidi-
mensional Determinants. Birkh¨auser, Basel (1994)
[15] Gillespie, J.H.: A simple stochastic gene substitution model. Theor. Pop. Biol. 23, 202–
215 (1983)

7
Polytopes, Graphs and Fitness Landscapes
205
[16] Gillespie, J.H.: The molecular clock be an episodic clock. Proc. Natl. Acad. Sci.
USA 81, 8009–8013 (1984)
[17] Goulart, C.P., Mentar, M., Crona, K., Jacobs, S.J., Kallmann, M., Hall, B.G., Greene, D.,
Barlow, M.: Designing antibiotic cycling strategies by determining and understanding
local adaptive landscapes. PLoS One 8(2), e56040 (2013),
doi:10.1371/journal.pone.0056040
[18] Haldane, J.B.S.: A mathematical theory of natural and artiﬁcial selection. Part VIII.
Metastable populations. Proc. Cambridge Philos. Soc. 27, 137–142 (1931)
[19] Kauffman, S.A., Levin, S.: Towards a general theory of adaptive walks on rugged land-
scapes. J. Theor. Biol. 128, 11–45 (1987)
[20] Kauffman, S.A., Weinberger, E.D.: The NK model of rugged ﬁtness landscape and its
application to maturation of the immune response. J. Theor. Biol. 141, 211–245 (1989)
[21] Kingman, J.F.C.: A simple model for the balance between selection and mutation. J.
Appl. Prob. 15, 1–12 (1978)
[22] Kryazhimskiy, S., Draghi, J.A., Plotkin, J.B.: In evolution, the sum is less than its part.
Science 332, 1160–1161 (2011)
[23] Lenski, R.E., Ofria, C., Pennock, R.T., Adami, C.: The evolutionary origin of complex
features. Nature 423, 139–144 (2003)
[24] Macken, C.A., Perelson, A.S.: Protein evolution on partially correlated landscapes.
Proc. Natl. Acad. Sci. USA 92, 9657–9661 (1995)
[25] Mani, R., Onge, R.P.S., Hartman, J.L., Giaever, G., Roth, F.P.: Deﬁning genetic interac-
tion. Proc. Natl. Acad. Sci. USA 105, 3461–3466 (2008)
[26] Martin, G., Otto, S.P., Lenormand, T.: Selection for recombination in structured popu-
lations. Genetics 172, 593–609 (2006)
[27] Maynard Smith, J.: Natural selection and the concept of protein space. Nature 225,
563–564 (1970)
[28] Orr, H.A.: The population genetics of adaptation on correlated ﬁtness landscapes: the
block model. Evolution 60, 1113–1124 (2006)
[29] Otto, S.P., Lenormand, T.: Resolving the paradox of sex and recombination. Nature
Reviews Genetics 3, 252–261 (2002)
[30] Park, S.C., Krug, J.: Evolution in random ﬁtness landscapes: The inﬁnite sites model. J.
Stat. Mech., P4014 (2008)
[31] Poelwijk, F.J., Kiviet, D.J., Weinreich, D.M., Tans, S.J.: Empirical ﬁtness landscapes
reveal accessible evolutionary paths. Nature 445, 383–386 (2007)
[32] Poelwijk, F.J., Sorin, T.N., Kiviet, D.J., Tans, S.J.: Reciprocal sign epistasis is a neces-
sary condition for multi-peaked ﬁtness landscapes. J. Theor. Biol. 272, 141–144 (2011)
[33] Rokyta, D.R., Beisel, C.J., Joyce, P.: Properties of adaptive walks on uncorrelated land-
scapes under strong selection and weak mutation. J. Theor. Biol. 243, 114–120 (2006)
[34] Segal, M.R., Barbour, J.D., Grant, R.M.: Relating HIV-1 sequence variation to replica-
tion capacity via trees and forests. Stat. Appl. Genet. Mol. Biol. 3, 2-1-20 (2004)
[35] Szendro, I.G., Schenk, M.F., Franke, J., Krug, J., de Visser, J.A.G.M.: Quantitative anal-
yses of empirical ﬁtness landscapes. J. Stat. Mech., P1005 (2013)
[36] Weinreich, D.M., Watson, R.A., Chao, L.: Sign epistasis and genetic constraint on evo-
lutionary trajectories. Evolution 59, 1165–1174 (2005)
[37] Weinreich, D.M., Delaney, N.F., Depristo, M.A., Hartl, D.L.: Darwinian evolution can
follow only very few mutational paths to ﬁtter proteins. Science 312, 111–114 (2006)
[38] Wright, S.: Evolution in Mendelian populations. Genetics 16, 97–159 (1931)
[39] Ziegler, G.: Lectures on Polytopes. Graduate Texts in Mathematics, vol. 152. Springer,
Berlin (1995)

Chapter 8
Estimating the Degree of Neutrality
and Ruggedness of Fitness Landscapes
Yoshiaki Katada
Abstract. In recent years, not only ruggedness but also neutrality has been rec-
ognized as an important feature of a ﬁtness landscape for genetic search. As it has
been reported that the evolutionary dynamics on a ﬁtness landscape with neutral-
ity is clearly different from the canonical explanations, ruggedness alone might be
inadequate describing it. Another measure, i.e., neutrality is required. This study
discusses the use of standard genetic distance, which originates from population
genetics, for measuring neutrality of ﬁtness landscapes. Firstly, several computer
simulations are conducted with a test landscape with neutrality as well as rugged-
ness in order to clarify the characteristics of standard genetic distance on it. Second,
computer simulations are conducted with an evolutionary robotics problem which
would be expected to include neutrality in its landscape in order to investigate the
validity of the proposed approach on a real-world problem. The results suggest that
genetic distance is a reliable method for estimating the degree of neutrality of real-
world problems.
8.1
Concept of Fitness Landscapes
We may consider evolution to be similar to mountain climbing. In this sense, a ﬁt-
ness landscape is what mountain geography or shape represents. The concept of
ﬁtness landscapes was ﬁrst introduced by a population geneticist, S. Wright [43]. A
ﬁtness landscape is a tuple (S, f) where S is the set of admissible solutions, f : S →R
is the ﬁtness function and R is the set of ﬁtness values. In a multidimensional space,
we can recognize neither the shape of a ﬁtness landscape nor that of a ﬁtness func-
tion. In three dimensional space, we can visually recognize a ﬁtness landscape as
a mountain with a horizontal plane representing two genes on locus and the genes’
Yoshiaki Katada
Department of Electrical and Electronic Engineering,
Setsunan University, 17-8 Ikeda-nakamachi, Neyagawa, Osaka 572-8508, Japan
e-mail: katada@ele.setsunan.ac.jp
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
207
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_8, c⃝Springer-Verlag Berlin Heidelberg 2014

208
Y. Katada
ﬁtness normal to the plane. One point on a ﬁtness landscape represents a particular
genotype and its ﬁtness value. The application of a genetic operator means a move-
ment of the point on the ﬁtness landscape and the application of selection means the
ﬁxation or elimination of those points. Thus, an evolutionary process is considered
to be the movements of the points (a population) on a ﬁtness landscape. In other
words, a sequence of pairs consisting of a genotype and its ﬁtness value obtained
during evolutionary process corresponds to footprints or a trail of evolution on the
landscape, and the application of genetic operators corresponds to one step on the
landscape (Figure 8.1).
Based on the above deﬁnition, however, a ﬁtness landscape is identiﬁed with a ﬁt-
ness function. More generally, a ﬁtness landscape is a triplet (S,N(s), f) where N(·)
is neighborhood function and N(s) is the neighborhood of s ∈S [6, 39, 40]. The rea-
son why N(s) is included in the tuple might be explained as follows: Understanding
the whole ﬁtness landscape cannot be achieved without the enumeration of admis-
sible solutions in the search space. Thus, some sampling methods are required to
outline the ﬁtness landscape. Random sampling has been rarely used. Random walk
or hill climbing algorithms have been generally used as such sampling methods
to obtain sequential solutions (neighboring solutions) according to some transition
rules1. Therefore, the ﬁtness landscape (outlined by using those sampled solutions)
depends on the neighborhood function. This is analogous to the metaphor of Si-
mon’s ant on the beach [30]: From the perspective of a small animal, the landscape
looks completely different. The step size and the way to leave its footprints are dif-
ferent from those of a big animal (Figure 8.2).
The ﬁtness landscape directly connects to the difﬁculty of a problem to be solved.
Thus, the objectives to investigate the geography of a ﬁtness landscape are as
follows:
(1) to quantify the difﬁculty of a problem to be solved by an evolutionary algo-
rithm in advance, and then to select an useful evolutionary algorithm, including
parameter tuning for it, and
(2) to analyze the performance of the search algorithm after the run.
As I have mentioned above, understanding the whole ﬁtness landscape cannot
be achieved without the enumeration of admissible solutions in the search space.
Fig. 8.1 Large footprints on
a ﬁtness landscape
1 If an evolutionary algorithm is used as such a sampling method, genetic operators, φ,
correspond to the transition rule. Thus, φ speciﬁes the neighborhood Nφ(·).

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
209
Fig. 8.2 Small footprints on
a ﬁtness landscape
Additionally, even for the same ﬁtness function, each evolutionary algorithm leaves
different footprints on the ﬁtness landscape. Therefore, the difﬁculty of a problem
has been discussed based on the geography of a ﬁtness landscape.
8.2
Featuring Fitness Landscapes
In early works of the theoretical Genetic Algorithms (GA) community, problem
difﬁculties for a GA have been discussed using the abstract terms concerning the
geography of a ﬁtness landscape: isolation, deception and multimodality. However,
there are still contentious issues with how these affect the performance of the GA
to solve optimization problems. Several counterexamples on the latter two factors
were found, showing that they are neither necessary nor sufﬁcient to make a problem
difﬁcult [7, 8, 9].
Another attempt to characterize difﬁculty has been done by measuring the fea-
ture of a ﬁtness landscape, i.e. ruggedness. In the GA community, the majority of
ﬁtness landscape descriptions have been based on ruggedness [8, 6, 18, 21, 36, 42].
Generally, the degree of ruggedness can be estimated from the average of ﬁtness
correlations between parents and offspring or the ﬁtness distance autocorrelation
function obtained by using a random walk.
In recent years, the existence of problem domains has been reported where evo-
lutionary dynamics is clearly different from the canonical explanations based on the
schema theory and the building block hypothesis [22, 26]. Those kinds of problems,
such as the evolution of neural network controllers in robotics [5, 33, 34, 35] and
on-chip electronic circuit evolution [37, 38, 39], mainly show equilibrium periods,
i.e. neutral evolution in their evolutionary dynamics. This characteristic is caused
by highly redundant mappings from genotype to phenotype or phenotype to ﬁtness
[12]. With these kinds of problems, redundancy is inevitable although it is custom-
ary among GA practitioners to deliberately avoid redundancy in the genetic coding
of artiﬁcial evolution problems. Therefore, ruggedness alone is not enough to mea-
sure the search difﬁculty if equilibrium periods seem dominant in the process of
evolution. Neutrality is required.

210
Y. Katada
8.3
Measuring Neutrality of Fitness Landscapes
To the best of our knowledge, statistical measurements with respect to neutrality
in evolutionary computation are found only in the references [32, 39, 41]. Vassilev
et al. [39] studied the structure of on-chip electronic circuit evolution landscapes.
They proposed information analysis of ﬁtness landscapes, which is deﬁned over a
time series obtained by a walk on a landscape. Their entropic measure of the time
series makes it possible to conﬁrm the existence of neutrality of a landscape and
which feature, neutrality or ruggedness, is dominant in the landscape.
Smith et al. [32] proposed a method for measuring neutrality of a landscape as
one of the ﬁtness evolvability portraits. This is deﬁned as the probability that an
offspring ﬁtness is equal to the parent ﬁtness. In their measurement, a certain dis-
tinctive difference, ε, between two ﬁtness values considered to be neutral must be
set by GA practitioners; that is, |fx −fy| ≤ε, where fx is a parent ﬁtness and fy is
the offspring ﬁtness. However, Vassilev et al. [39] have reported that the measure of
Smith et al. is very sensitive to ε. Especially in the case that the ﬁtness is evaluated
as a real value or in a noisy environment, a great inﬂuence of the value on the mea-
sure of neutrality would be predicted. For these problems, Smith proposed the use of
the neutral ﬁtness band [34] or the signiﬁcance level for the Student t-test [31] as ε.
However, no signiﬁcant difference between two ﬁtness landscapes was detected al-
though introducing such statistical neutrality [31]. This implies a difﬁculty in using
ﬁtness data for measuring neutrality.
Verel et al. [41] deﬁned a neutral neighbor of s as Nn(s) = {x ∈N(s)|f(x) = f(s)}
(according to the notation in Section 8.1) and calculated the neutral degree of a
solution as the number of its neutral neighbors. They claimed that a ﬁtness landscape
is neutral if there are many solutions with high neutral degree. However, they may
have the same problem as that of Smith et al’s method as mentioned above.
8.4
Objectives in This Work
Population geneticists have been trying to explain the change of gene frequency in
a population. That is, they have used genotype data for their explanations. Recently,
we have been motivated by this to investigate the characteristics of Nei’s standard
genetic distance [23], which is one of statistical methods for estimating gene differ-
ences between populations in population genetics, in artiﬁcial evolution [17]. The
results show some consistencies with the neutral theory [19] and the nearly neutral
theory [28, 29] in population genetics.
The remainder of this chapter introduces how genetic distance applies to estimate
the degree of neutrality of ﬁtness landscapes. In this study, we use a binary repre-
sentation for the genotype. Thus, the greatest advantage of our approach is that the
difﬁculty using ﬁtness data for measuring neutrality, which was mentioned above,
need not to be taken into account because our approach uses genotype data for mea-
suring neutrality. The chapter is organized as follows. The next section describes
Nei’s standard genetic distance. Section 8.6 applies the genetic distance to tunable

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
211
neutral landscapes and shows the characteristics of the genetic distance. Section
8.7 and 8.8 shows some guidelines for estimating the degree of neutrality of a ﬁt-
ness landscape on a real-world problem as well as investigates the validity of the
proposed approach on a robot control problem. Conclusions are given in the last
section.
8.5
Tools for Measurements of Features of Fitness Landscapes
and Their Characteristics
In this section, the tools for measuring ruggedness and neutrality are described.
Ruggedness is estimated based on Smith et al’s measurement [32] and neutrality is
based on our measurement, standard genetic distance [11, 23].
8.5.1
Measure of Ruggedness
In real-world problems, ruggedness of a ﬁtness landscape is predicted by ﬁtness
correlation [32, 42]. In this work, the measurement of Smith et al. [32] was em-
ployed for the measure of ruggedness because ﬁtness correlation can be expressed
as a scalar value using their measurement. The reason why a scalar value is needed
is described in Section 8.6.4 and Section 8.7.
Smith et al. [32] reported that ﬁtness correlation is expressed by the gradient of
the expected offspring ﬁtness versus parent ﬁtness graph. The expected offspring
ﬁtness for their parent ﬁtness k is given by
¯f (k) = ∑g∈Gk f(g)
|Gk|
(8.1)
where Gk is the set of offspring genotype from parents with the ﬁtness k over gen-
erations, g is an offspring genotype and f(·) is the ﬁtness function. It has also been
reported in [11, 32] that the gradient of the expected offspring ﬁtness versus par-
ent ﬁtness, r, increases with the decrease of ruggedness; that is, r ≃1.0 without any
epistatic linkages between genes while r ≃0.0 with maximum epistatic linkages and
that this gradient is independent of neutrality. These characteristics are illustrated in
Section 8.6.
8.5.2
Standard Genetic Distance
Genetic distance is a term from population genetics used for estimating gene dif-
ferences per locus between populations. Although there are several deﬁnitions
for genetic distance, Nei’s standard genetic distance [23] is adopted in our
method [11].

212
Y. Katada
Nei’s standard genetic distance is deﬁned for a binary coded GA as follows: Con-
sider two populations, X and Y. Let xil = nil/M and yil = nil/M be the frequencies
of the l-th alleles in X and Y, respectively (i = 1,··· ,N; N is the length of the geno-
type, l ∈{1,2} in a binary coded GA, nil is the number of the l-th allele, M is
the population size). The probability of identity of two randomly chosen genes is
jxi = x2
i1 +x2
i2 in the population X, while it is jyi = y2
i1 +y2
i2 in the population Y. The
probability of identity of a gene from X and a gene from Y is jxyi = xi1yi1 + xi2yi2.
The normalized identity of genes between X and Y with respect to a locus is
deﬁned as
Ii =
jxyi
√jxi
jyi
,
(8.2)
where Ii = 1.0 if the two populations have the same alleles in identical frequen-
cies, and Ii = 0.0 if they have no common alleles. The normalized identity of genes
between X and Y with respect to the average in all loci is deﬁned as
I =
JXY
√JX
√JY
,
(8.3)
where JX = ∑N
i=1 jxi/N, JY = ∑N
i=1 jyi/N and JXY = ∑N
i=1 jxyi/N. The genetic distance
between X and Y is deﬁned as
D = −loge I.
(8.4)
The above deﬁnition cannot be applied to the GAs directly, because it is assumed in
population genetics that a new allele always appears on a locus when a mutation oc-
curs, while “back mutations” [28] frequently occur in GAs due to the binary coding
scheme. Therefore, the accumulated genetic distance over generations is calculated
for GAs as
D(T) =
T−1
∑
t=1
Dt,t+1
(8.5)
where T is the number of the last generation and Dt,t+1 is the genetic distance be-
tween the population in the t-th and the (t +1)-th generation. In the reminder of this
chapter, for simplicity, we call D(T) in Equation (8.5) the genetic distance.
8.6
Characteristics of the Tools in Tunably Neutral NK
Landscapes
In this section, the characteristics of the tools described in the previous section are
illustrated in tunably neutral landscapes. Based on this illustration, how to use these
tools for estimating the degree of neutrality as well as ruggedness reveals.

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
213
8.6.1
Tunably Neutral NK Landscapes
Tunably neutral NK landscapes were employed as test functions in our computer
simulations. These are the extended versions of Kauffman’s NK ﬁtness landscape
model [18]. One is referred to as the NKq ﬁtness landscapes proposed by Newman
and Engelhardt [24] and the other is referred to as the NKq-p ﬁtness landscapes,
which we extended to increase the degree of neutrality in the NKq.
The NKq landscape has three parameters: N, the length of the genotype; K(< N),
the number of epistatic linkages between genes [18]; and F(≥2), the integer
that tunes the neutrality. The ﬁtness value is calculated as follows: The ﬁtness
contribution of the i-th locus, fi, is an integer generated randomly in the range
0 ≤fi < F, i = 1,··· ,N. To calculate the ﬁtness, f, of a genotype, the ﬁtness con-
tribution of each locus is averaged, and then divided by F −1, normalizing f to the
range 0.0 to 1.0. More formally,
f =
1
N(F −1)
N
∑
i=1
fi.
(8.6)
The neutrality of the landscape can be tuned by changing the value of F. The neu-
trality of the landscape is maximized when F = 2, and is effectively non-existent as
F →∞[24].
The NKq-p ﬁtness landscape is an extended form of the NKq for F = 2 in order
to increase the degree of neutrality in the NKq with its own maximum neutrality. For
the NKq-p, the ﬁtness contribution of the i-th locus, fi in Equation (8.6), is set to 0
with the probability, P (0 ≤P ≤1), following the way to involve neutrality of the
NKp ﬁtness landscape [1] proposed by Barnett. The neutrality of the landscape can
be tuned by changing the value of P as well as F. Thus, the neutrality of the land-
scape is effectively maximized when F = 2 as P →1. When P = 1, the landscape
becomes completely ﬂat because all the ﬁtness values are set to 0.
8.6.2
Simulation Conditions
The genetic distance is calculated using genotype data as described in Section 8.5.
In this study, such genotype data are obtained by applying the standard GA (SGA)
[4] to the NKq landscapes; that is, the genotype data are generated during the run
of the SGA. Computer simulations were conducted using populations of size M
by varying the landscape parameters. The SGA used standard bit mutation as the
genetic operation. The per-bit mutation rate was set to q. Crossover was not em-
ployed, following Nimwegen’s suggestion [26]. Tournament selection was adopted.
The tournament size was set to 2 because the SGA generally prefers low selec-
tion pressure. A generational model was used. Each run lasted 2,000 generations.
We conducted 50 independent runs for each NKq ﬁtness landscape2 under the
2 The NKq-p ﬁtness landscape is employed in Section 8.6.4.

214
Y. Katada
landscape parameters, N = 20, K ∈{0,2,6,12,19}, F ∈{2,3,4,6,∞3}. The results
were averaged over the 50 runs.
8.6.3
Simulation Results
8.6.3.1
Measure of Ruggedness
The gradient of the expected offspring ﬁtness versus parent ﬁtness, r, described in
Section 8.5.1 is calculated by using the method of least squares on the results of all
the runs. Figure 8.3 show rs on the NKq for F = 2. It is found, as in [32], that r
decreases with the increase of K. That is, the degree of ruggedness increases with
the increase of K. This gradient is independent of F (neutrality). We omit these
graphs because the same tendency is found for each F.
0.0
0.2
0.4
0.6
0.8
1.0
0.0
0.2
0.4
0.6
0.8
1.0
Average mutant fitness
Original fitness
K=0
K=2
K=6
K=12
K=19
Fig. 8.3 Expected offspring ﬁtness value over all parent ﬁtness values on the NKq ﬁtness
landscape for F = 2
8.6.3.2
Characteristics of Genetic Distance
a) Existence and non-existence of neutrality
The ﬁrst experiments were conducted to investigate the effect of the existence of
neutrality on the transition of the genetic distance with a small mutation rate. Fig-
ure 8.4 shows the genetic distance for K = {0,2,6,19} and F = ∞, where q was set
to 0.008 (≪1/N). They leveled off in the very early generations. This means that
the population converged to a certain point in the genotype space while the genetic
distance between the generations (Dt,t+1 in Equation (8.5)) simultaneously became
zero.
In contrast, the genetic distance for each generation for K = {0,2,6,12,19} and
F ̸= ∞(for instance, the results for F = 2 are shown in Figure 8.5) with q = 0.008
increased approximately linearly over generations in all runs. This differentiates
3 For F = ∞, the NK ﬁtness landscape [18] was employed instead of the NKq landscape as
[32], which results in practically non-existence of neutrality.

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
215
0
1
2
0
500
1000
1500
2000
Genetic distance
Generation
0
1
2
0
500
1000
1500
2000
Genetic distance
Generation
(a) K = 0
(b) K = 2
0
1
2
0
500
1000
1500
2000
Genetic distance
Generation
0
1
2
0
500
1000
1500
2000
Genetic distance
Generation
(c) K = 6
(d) K = 19
Fig. 8.4 Genetic distance at each generation with q = 0.008 and M = 50 for F = ∞in 50
runs
between the existence and the non-existence of neutrality of the ﬁtness landscape.
That is, the increase of the genetic distance over generations indicates the presence
of neutrality of the ﬁtness landscape.
In the remainder of this chapter, the gradient of the genetic distance over genera-
tions for F ̸= ∞is calculated by using the method of least squares on the results of
all the runs and referred to as α.
b) Neutrality
Figure 8.6 shows the gradient of the genetic distance over generations, α, for q =
0.008 and M = {50,100,200,400}. Notice ﬁrst that α increased with the decrease
of F for all Ks. This means that the genetic distance increases with the increase of
neutrality. Secondly, α decreased with the increase of K for all Fs. This means that
α decreased with the increase of ruggedness; that is, not only neutrality but also
ruggedness has an inﬂuence on α.
c) Varying the population size
The next experiment was conducted by varying the population size. Figure 8.7
shows α at each K for q = 0.008 and F = {2,3,4,6}. With the increase of the

216
Y. Katada
0
2
4
6
8
10
0
500
1000
1500
2000
Genetic distance
Generation
0
1
2
3
4
5
0
500
1000
1500
2000
Genetic distance
Generation
(a) K = 0
(b) K = 2
0
1
2
3
4
5
0
500
1000
1500
2000
Genetic distance
Generation
0
1
2
3
4
5
0
500
1000
1500
2000
Genetic distance
Generation
(c) K = 6
(d) K = 12
0
1
2
3
4
5
0
500
1000
1500
2000
Genetic distance
Generation
(e) K = 19
Fig. 8.5 Genetic distance at each generation with q = 0.008 and M = 50 for F = 2 in 50 runs
population size, α decreased for each K and F. Therefore, the larger the population
size becomes, the slower the population moves.
d) Varying the mutation rate
In population genetics, it is assumed that the mutation rate per locus is sufﬁciently
small as mentioned in Section 8.5.2. Thus, the experiments in the previous subsec-
tion were conducted using a small mutation rate. In the last series of experiments,
the transition of the standard genetic distance were observed by varying the muta-
tion rate from q = 0.005 to 0.010 and 0.1 with M = 50.

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
217
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
F=2
F=3
F=4
F=6
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
F=2
F=3
F=4
F=6
(a) M = 50
(b) M = 100
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
F=2
F=3
F=4
F=6
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
F=2
F=3
F=4
F=6
(c) M = 200
(d) M = 400
Fig. 8.6 Gradient of genetic distance α at each K with q = 0.008 and each M
Figure 8.8 shows the results with q = {0.005,0.006,0.007,0.008,0.009,0.010}.
In this range, α increased with the increase of the mutation rate for each K and
F. For each q, similar behaviors were observed to the results with q = 0.008 in
the previous subsections. In contrast, the results with q = 0.1 show the different
behaviors (Figure 8.9). Surprisingly, α increased with the increase of K for all Fs.
In addition to this, no signiﬁcant differences were found between the graphs of
different Fs. This implies that artiﬁcial evolution has changed into random search,
caused by the mutation rate which is larger than the error threshold [1, 25, 26].
From the above, we conﬁrmed that the standard genetic distance depends on the
mutation rate, and can be used as long as the mutation rate is sufﬁciently small
compared with the error threshold.
8.6.4
Preparing for Estimating the Degree of Neutrality
In the previous subsection, the gradients of the genetic distance over generations, α,
for K and F were examined. In addition to this, we know from the results obtained in
Section 8.6.3.1 that r decreases with increase in K; that is, the correlation decreases
with increase in K. For real-world problems, the degree of ruggedness of a ﬁtness

218
Y. Katada
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
M=50
M=100
M=200
M=400
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
M=50
M=100
M=200
M=400
(a) F = 2
(b) F = 3
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
M=50
M=100
M=200
M=400
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
M=50
M=100
M=200
M=400
(c) F = 4
(d) F = 6
Fig. 8.7 Gradient of genetic distance α at each K with q = 0.008 and each F
0.0000
0.0005
0.0010
0.0015
0.0020
0
2
4
6
8
10 12 14 16 18
α
K
F=2
F=3
F=4
F=6
Fig. 8.8 Gradient of genetic distance α with M = 50: The solid lines, from left to right,
correspond to α for F = 2 with q = {0.005,0.006,0.007,0.008,0.009,0.010}. Similarly, the
dashed lines correspond to α for F ∈{3,4,6}.
landscape can be predicted by ﬁtness correlation [32, 42], which was illustrated
on r in Section 8.6.3.1. Therefore, Figure 8.6 will be redrawn by using the same
data obtained in the previous subsection to illustrate the relationship between r and
α. Figure 8.10 shows α at each correlation, r, corresponding to each K for all Fs

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
219
0.010
0.011
0.012
0.013
0.014
0.015
0.016
0.017
0
2
4
6
8
10 12 14 16 18
α
K
F=2
F=3
F=4
F=6
Fig. 8.9 Gradient of genetic distance α with q = 0.1 and M = 50
in Figure 8.6a. It is conﬁrmed that α increased with increase in r for all Fs and
increased with decrease in F for all rs. Of course, these are consistent with the
results obtained in the previous subsection.
In addition, in order to ﬁll the empty space in Figure 8.10, the NKq-p with
F = 2 and P ∈{0.9,0.99} was introduced, where the NKq-p was described in Sec-
tion 8.6.1. Figure 8.11 shows α at each correlation, r, corresponding to each K for
all Fs and Ps in the NKq-p. As a result, a set of points (r,α) forms a curve, which
increases with the increase of the correlation when F and P are constant. A set of
curves is also found with different levels of neutrality. This demonstrates that α
would predict the increase of neutrality combined with the measure of ruggedness.
The details of the procedure of estimating the degree of neutrality is described in
Section 8.7.
0.0000
0.0005
0.0010
0.0015
0.0020
0.0
0.2
0.4
0.6
0.8
1.0
α
Correlation
F=2
F=3
F=4
F=6
Fig. 8.10 Gradient of genetic distance α as a function of the correlation (r) for F with q =
0.008 and M = 50

220
Y. Katada
0.0e+00
1.0e-03
2.0e-03
3.0e-03
4.0e-03
0.0
0.2
0.4
0.6
0.8
1.0
α
Correlation
P=0.99
P=0.9
F=2
F=3
F=4
Fig. 8.11 Gradient of genetic distance α as a function of the correlation (r) for F and P with
q = 0.008 and M = 50
8.7
Procedure for Estimating the Degree of Neutrality
In this study, r and α which are described in Section 8.5.1 and 8.5.2 are calculated
by using the method of least squares on the result of each run. Thus, the procedure
for estimating the degree of neutrality of a ﬁtness landscape on a real-world problem
can be summarized as follows:
When the mutation rate per locus is sufﬁciently small,
i) Conﬁrm the existence of neutrality of a ﬁtness landscape on a real-world prob-
lem by investigating transitions of the genetic distance over generations; and
ii) Calculate a point, (r,α), from each run on the real-world problem; and
iii) Calculate a set of r-α curves in test functions with different levels of rugged-
ness and neutrality; and
iv) By using a set of r-α curves as a baseline, judge where a point, (r,α), obtained
from the real-world problem is located on the graph of (r,α). Then estimate
indirectly the degree of neutrality of the real-world problem.
The reason why steps (iii) and (iv) are conducted is that the genetic distance is
affected by both neutrality and ruggedness as mentioned in Section 8.6. Test func-
tions, the NKq and NKq-p ﬁtness landscapes, are adopted for obtaining a set of r-α
curves. The landscape parameters of the NKp and the NKq should be decided at
step (iii) for conducting step (iv). In addition to this, the parameters of the GAs (a
mutation rate, a population size, a tournament size, etc.) for test functions should be
the same as those for a real-world problem due to the characteristics of the genetic
distance.

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
221
8.8
Estimating the Degree of Neutrality of Evolutionary
Robotics Fitness Landscapes
In this section, several computer simulations were conducted with an evolutionary
robotics problem, where it is predicted that the evolutionary robotics ﬁtness land-
scape includes neutrality, in order to investigate the validity of the proposed method
in Section 8.7.
8.8.1
The Task and the Fitness Function
The control task used in this experiment was motion pattern discrimination [13,
16], and is based on a task originally implemented by Beer [2]. The agent must
discriminate between two types of vertically falling object based on the object’s
period of horizontal oscillation; it must catch (i.e., move close to) falling objects that
have a long period whilst avoiding those with a short period (see Figure 8.12). An
array of proximity sensors allow the agent to perceive the falling objects. If an object
intersects a proximity sensor, the sensor outputs a value inversely proportional to
the distance between the object and the agent. The agent can move horizontally
along the bottom of the arena. In our experiment, the agent of diameter 30 had 7
proximity sensors of maximum range 220 uniformly distributed over a visual angle
of 45 degrees. The horizontal velocity of the agent was proportional to the sum
of the opposing horizontal forces produced by a pair of effectors. It has maximum
velocity of 8. Each falling object was circular, with diameter 30, and dropped from
the top of the arena with a vertical velocity of 4, a horizontal amplitude of 30 and an
initial horizontal offset of ±50. An object’s horizontal velocity was ±10 (12 steps
in a period) for a long period and ±30 (4 steps in a period) for a short period.
The performance measure to be maximized was as follows:
Fitness = 1000
NumTrials
∑
i=1
Hi
NumTrials
(8.7)
Fig. 8.12 Experimental
setup for the discrimination
of the motion patterns. Two
kinds of period used in the
discrimination experiments
(left) and the agent in the
arena with its array of the
proximity sensors (right).
Catch? Avoid?
Long Period
[12 Steps]
Catch
Short Period
[4 Steps]
Avoid 

222
Y. Katada
where Hi = 1 −di for a long period and Hi = di for a short period, di = 1 when
hdi > 60 and di = hdi/60 when hdi ≤60, hdi is the ﬁnal horizontal distance between
the center of the agent and the object, and NumTrials is the number of trials for an
individual (8 trials for each period).
8.8.2
Simulation Conditions
For this experiment, the agent controller was a spike response model network [20],
which is a form of Pulsed Neural Network (PNN) with 7 sensory neurons, 2 fully
interconnected motor neurons and Nh fully interconnected hidden neurons, where
Nh ∈{0,1,5,10,15}, in order to estimate and compare the features among the
ﬁtness landscapes with each Nh. The network’s connection weights and the ﬁr-
ing threshold for each neuron were genetically encoded and evolved. The total
number of parameters is equal to {20,33,105,240,425} corresponding to each
Nh. The parameters were mapped linearly with the following ranges: connection
weights ω ∈[−1.0,1.0], thresholds θ ∈[0.0,3.9]. The parameters of the neurons
and synapses were set as follows: τm = 4, τs = 10, Δax = 2 for all neurons and all
synapses in the network following the recommendations given in [3].
Computer simulations were conducted using populations of size 50. Each indi-
vidual was encoded as a binary string with 10 bits for each parameter. Therefore,
the total length of the genotype was L = {200,330,1050,2400,4250} for each Nh.
The SGA was adopted to evolve PNN parameters. The genetic operation for the
SGA was standard bit mutation. Based on the characteristics of genetic distance in
Section 8.6 and the procedure in Section 8.7, two types of mutation rate were set as
follows:
a)
q = 1/LNh=15, which is constant for each landscape, corresponding to 1/L for
the longest genotype.
b)
q = 1/L, which is varied for each landscape, following the recommendation in
the evolutionary computation community.
According to the procedures in Section 8.7, all the parameters of the SGA must
be the same among ﬁtness landscapes to compare the features. Thus, the other pa-
rameters were set as follows. Tournament selection was adopted. The tournament
size was set to 2. Each run lasted 6,000 generations. We conducted 10 independent
runs for each landscape. As the test functions, the NKq and the NKq-p landscapes
were adopted. A set of landscape parameters of the NKq and NKq-p at step (iii)
in Section 8.7 was decided in the preliminary computer simulations with the same
SGA parameters as those of the PNNs. In this experiment, they were set at the same
values as those of the NKq and the NKq-p in Section 8.6.4.
Let me explain again the reason to conduct step (iv) in these examples: In
the case of a) there are some cases in which it is not possible to estimate and

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
223
directly compare the degrees of neutrality between ﬁtness landscapes by using only
genetic distance (the details will be described in the next subsection), and in the case
of b) there is no theoretical meaning to directly compare the degrees of neutrality
between the ﬁtness landscapes of the PNNs due to the different mutation rates set
for each Nh.
8.8.3
Simulation Results
This subsection shows the results of the computer simulations conducted using the
two types of mutation rate mentioned above and discusses them.
a) q = 1/LNh=15
Figure 8.13 shows the genetic distance at each generation for Nh = 15. Approxi-
mately linear increases were observed for all runs. For other Nhs, the same transi-
tions were observed. From the results obtained in Section 8.6.3.2, this might indicate
the presence of neutrality of the ﬁtness landscape of the PNN. Thus, the gradient of
the genetic distance over generations, α, is shown by using the method of least
squares on the results of all the runs in the following parts.
Figures 8.14, 8.15 and 8.16 show the features of the ﬁtness landscape for each Nh.
Figure 8.14 plots the correlation, r, for each Nh. In this experiment, the correlation
increased with increase in Nh except for Nh = 15. That is, ruggedness decreased with
increase in Nh. In Figure 8.15, α increased with increase in Nh. When the ﬁtness
landscape for Nh = 1 was compared with that of Nh = 0, there was no signiﬁcant
differences in the correlation, but α increased much. For another instance, when the
ﬁtness landscape for Nh = 15 was compared with that of Nh = 10, the correlation
decreased, but α increased. In these cases, the increase of neutrality can be estimated
based on the results obtained in Section 8.6.3.2. Note that the increase of neutrality
cannot be estimated either when the ﬁtness landscape for Nh = 5 was compared with
that of Nh = 1 or when the ﬁtness landscape for Nh = 10 was compared with that of
Nh = 5, because the increase of α coincided with the increase of the correlation.
By using the r-α curves obtained in the NKq and NKq-p landscapes as baselines,
where F and P are constant for each curve, the degrees of neutrality of the landscape
for all Nhs were estimated indirectly (Figure 8.16). The points, (r,α), for Nh = 0 and
Nh = 1 are located between the r-α curves for P = 0.99 and P = 0.9. The point for
Nh = 1 is nearer to the curve for P = 0.99 than the point for Nh = 0. The points for
Nh = 5 and Nh = 15 are located on the curve for P = 0.9. The point for Nh = 10
is located between the the curves for P = 0.9 and F = 2. Therefore, the degrees
of neutrality of the landscape for Nh are ranked from lowest to highest as follows:
Nh = 10 →{5,15} →0 →1.
When the ﬁtness landscape for Nh = 1 was compared with that of Nh = 0 and
when the ﬁtness landscape for Nh = 15 was compared with that of Nh = 10, in-
creases in neutrality were observed. These are consistent with the results of the

224
Y. Katada
0.0
0.2
0.4
0.6
0.8
1.0
1.2
0
1000 2000 3000 4000 5000 6000
Genetic distance
Generation
Fig. 8.13 Genetic distance at each generation for the SGA with q = 1/L for Nh = 15 in 10
runs
0.80
0.85
0.90
0.95
1.00
0
1
5
10
15
Correlation
Num. of hidden neurons (Nh)
Fig. 8.14 Correlation (r) for each Nh at q = 1/LNh=15
direct comparison between the PNN landscapes mentioned above. Additionally, de-
creases in neutrality were also observed when the ﬁtness landscape for Nh = 5 was
compared with that of Nh = 1 and when the ﬁtness landscape for Nh = 10 was com-
pared with that of Nh = 5 although it was not possible to estimate these decreases
by direct comparison between the PNN landscapes.
Figure 8.17 shows the maximum ﬁtness at each generation for Nh. Except for
Nh = 1, the ﬁtness increased faster as the decrease in Nh, that is, the decrease in
the genotypic search space. The poor performance in the SGA for Nh = 1 cannot
be predicted by the comparison with Nh = 0 only on the correlation in Figure 8.14.
However, it would be predicted by the large degree of neutrality for Nh = 1 observed
in Figure 8.16.

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
225
0.00008
0.00010
0.00012
0.00014
0.00016
0
1
5
10
15
α
Num. of hidden neurons (Nh)
Fig. 8.15 Gradient of genetic distance α for each Nh at q = 1/LNh=15
0.0e+00
5.0e-05
1.0e-04
1.5e-04
2.0e-04
 0.7
 0.8
 0.9
 1.0
α
Correlation
NN
P=0.99
P=0.9
F=2
F=3
F=4
Nh=0
Nh=5
Nh=10
Nh=15
Nh=1
Fig. 8.16 Gradient of genetic distance α as a function of the correlation (r) for each Nh and
the TNKq-p at q = 1/LNh=15
500
600
700
800
900
1000
0
1000 2000 3000 4000 5000 6000
Fitness
Generation
Nh=0
Nh=5
Nh=10
Nh=15
Nh=1
Fig. 8.17 Maximum ﬁtness at q = 1/LNh=15

226
Y. Katada
0.80
0.85
0.90
0.95
1.00
0
1
5
10
15
Correlation
Num. of hidden neurons (Nh)
Fig. 8.18 Correlation (r) for each Nh at q = 1/L
0.0e+00
5.0e-04
1.0e-03
1.5e-03
2.0e-03
 0.6
 0.8
 1.0
α
Correlation
NN
P=0.99
P=0.9
F=2
F=3
F=4
0.0e+00
5.0e-04
1.0e-03
1.5e-03
2.0e-03
 0.6
 0.8
 1.0
α
Correlation
NN
P=0.99
P=0.9
F=2
F=3
F=4
(a) Nh = 0
(b) Nh = 1
0.0e+00
2.0e-04
4.0e-04
6.0e-04
8.0e-04
 0.6
 0.8
 1.0
α
Correlation
NN
P=0.99
P=0.9
F=2
F=3
F=4
0.0e+00
2.0e-04
4.0e-04
6.0e-04
8.0e-04
 0.6
 0.8
 1.0
α
Correlation
NN
P=0.99
P=0.9
F=2
F=3
F=4
(c) Nh = 5
(d) Nh = 10
0.0e+00
5.0e-05
1.0e-04
1.5e-04
2.0e-04
 0.6
 0.8
 1.0
α
Correlation
NN
P=0.99
P=0.9
F=2
F=3
F=4
(e) Nh = 15
Fig. 8.19 Gradient of genetic distance α as a function of the correlation (r) for each Nh and
the NKq and NKq-p at q = 1/L

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
227
b) q = 1/L
Figure 8.18 plots the correlation, r, for each Nh. As observed in a), the correlation
increased with increase in Nh except for Nh = 15. Because of different qs among
the landscapes, the degrees of neutrality of the landscape for all Nhs can be esti-
mated indirectly by using the r-α curves obtained in the NKq and NKq-p landscapes
(Figure 8.19). Thus, the degrees of neutrality of the landscape for Nh are ranked from
lowest to highest as follows: Nh = 10 →5 →{1,15} →0.
Figure 8.20 shows the maximum ﬁtness at each generation for Nh. The ﬁtness
increased faster as the decrease in Nh, that is, the decrease in the genotypic search
space. This can be explained as follows: In the process of evolution, no error thresh-
old effects were observed 4. This implies that the effective mutation rate at q = 1/L
would be below the error threshold under each condition [14, 15, 16]. In addition,
the degrees of ruggedness were not so high for this problem (Figure 8.18). There-
fore, the neutrality of the landscapes would not explicitly have any inﬂuence on the
performances of the SGA but the effect of the size of the genotypic search space
would be dominant.
From the viewpoint of the structure of evolutionary artiﬁcial neural networks, it
was conﬁrmed by the proposed approach that the number of hidden neurons have a
great inﬂuence on the features of the ﬁtness landscape of neural networks.
From these results, we can conclude that the proposed method can estimate and
indirectly compare the degree of neutrality of the ﬁtness landscapes by using the
features of the ﬁtness landscape of test functions as baselines.
600
700
800
900
1000
0
1000 2000 3000 4000 5000 600
Fitness
Generation
Nh=0
Nh=1
Nh=5
Nh=10
Nh=15
Fig. 8.20 Maximum ﬁtness at q = 1/L
4 Generally, an error threshold sets the upper limit for a mutation rate that will enable efﬁ-
cient search [1, 25, 26].

228
Y. Katada
8.9
Summary and Conclusions
In this chapter, I proposed the use of Nei’s standard genetic distance, which orig-
inates from population genetics, for estimating the degree of neutrality of ﬁtness
landscapes. The characteristics of genetic distance in tunably neutral NK landscapes
were investigated and the guideline was provided to apply our approach to a real-
world problem. Several computer simulations were conducted with an evolutionary
robotics problem where neutrality would be included in the ﬁtness landscape. The
results obtained in this study suggest the validity of the proposed approach. By
using this, we might expect to explain evolutionary dynamics on problems where
they have not been explained by canonical ﬁtness landscape descriptions. In a re-
cent work [10], we applied our approach to estimate features of competitive co-
evolutionary ﬁtness landscapes on a predator-prey problem in computer simulations
and investigated the Red Queen effect on the ﬁtness landscape. Those results sug-
gest that our method can track the progress of ﬁtness landscapes on competitive
co-evolutionary robotics.
In this study, I assume the use of a binary representation for the genotype. As
another research direction, we would also like to extend our approach to other rep-
resentations.
The results can be summarized from the research objectives investigating the
geography of a ﬁtness landscape presented in Section 8.1 as follows:
“to analyze the performance of the search algorithm after the run.”
• I explained the performance of the SGA using the estimates of features of the
ﬁtness landscape obtained in the experiment. However, the performance of the
SGA was not explained enough because it was based in part on conjecture.
• Generally speaking, it is still unclear what relation exists between the estimates
of features of the ﬁtness landscape and the performance of an evolutionary al-
gorithm applied to the problem.
“to quantify the difﬁculty of a problem to be solved by an evolutionary algorithm in
advance then to select an useful evolutionary algorithm, including parameter tuning
for it.”
• According to the results obtained in this study, the parameters of the extended
GA [14, 27] were tuned for the same problem used in this study. The extended
GA showed good performance on the problem [16].
• To date, a proper methodology has not been developed to select an useful evo-
lutionary algorithm or tune the parameters of an evolutionary algorithm based
on the estimates of features of the ﬁtness landscape.
These suggest future research directions, including the discussion whether another
feature of ﬁtness landscapes is needed.

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
229
References
[1] Barnett, L.: Tangled webs: Evolutionary dynamics on ﬁtness landscapes with neutral-
ity. Master’s thesis, School of Cognitive and Computing Sciences, Sussex University,
Brighton, UK (1997)
[2] Beer, R.: Toward the evolution of dynamical neural networks for minimally cognitive
behavior. In: Maes, P., Mataric, M., Meyer, J., Pollack, J., Wilson, S. (eds.) Proceedings
of From Animals to Animats 4, pp. 421–429. MIT Press, Cambridge (1996)
[3] Floreano, D., Mattiussi, C.: Evolution of spiking neural controllers for autonomous
vision-based robots. In: Gomi, T. (ed.) ER 2001. LNCS, vol. 2217, pp. 38–61. Springer,
Heidelberg (2001)
[4] Goldberg, D.: Genetic Algorithms in Search, Optimization and Machine Learning.
Addison-Wesley, Boston (1989)
[5] Harvey, I.: Artiﬁcial evolution for real problems. In: Gomi, T. (ed.) Evolutionary
Robotics: From Intelligent Robots to Artiﬁcial Life (ER 1997). AAI Books, Tokyo
(1997)
[6] Hordijk, W.: A measure of landscapes. Evolutionary Computation 4(4), 335–360 (1994)
[7] Horn, J., Goldberg, D.E.: Genetic algorithm difﬁculty and the modality of ﬁtness land-
scapes. In: Whitley, L.D., Vose, M.D. (eds.) Foundations of Genetic Algorithms 3, pp.
243–269. Morgan Kaufmann, San Francisco (1995)
[8] Jones, T., Forrest, S.: Fitness distance correlation as a measure of problem difﬁculty
for genetic algorithms. In: Eshelman, L.J. (ed.) Proceedings of the Sixth International
Conference on Genetic Algorithms, pp. 184–192. Morgan Kaufmann, San Mateo (1995)
[9] Kallel, L.: Inside GA dynamics: Ground basis for comparison. In: Eiben, A.E., B¨ack,
T., Schoenauer, M., Schwefel, H.-P., et al. (eds.) PPSN V 1998. LNCS, vol. 1498, pp.
57–66. Springer, Heidelberg (1998)
[10] Katada, Y., Handa, Y.: Tracking the red queen effect by estimating features of compet-
itive co-evolutionary ﬁtness landscapes. In: Fogel, G., et al. (eds.) Proceedings of the
2010 IEEE Congress on Evolutionary Computation (CEC 2010), pp. 4417–4424. IEEE
Press (2010)
[11] Katada, Y., Ohkura, K.: Estimating the degree of neutrality in ﬁtness landscapes by
the nei’s standard genetic distance – an application to evolutionary robotics –. In: Yen,
P.G., et al. (eds.) Proceedings of the 2006 IEEE Congress on Evolutionary Computation
(CEC 2006), pp. 1590–1597. IEEE Press (2006)
[12] Katada, Y., Ohkura, K.: Analysis on topologies of ﬁtness landscapes with both neutrality
and ruggedness based on neutral networks. In: Rothlauf, F. (ed.) Proceedings of the
2009 Genetic and Evolutionary Computation Conference (GECCO 2009), pp. 1855–
1856 (2009)
[13] Katada, Y., Ohkura, K., Ueda, K.: Artiﬁcial evolution of pulsed neural networks on the
motion pattern classiﬁcation system. In: Nakauchi, Y. (ed.) Proceedings of 2003 IEEE
International Symposium on Computational Intelligence in Robotics and Automation
(CIRA), pp. 318–323 (2003)
[14] Katada, Y., Ohkura, K., Ueda, K.: Tuning genetic algorithms for problems includ-
ing neutral networks -a more complex case: The terraced nk problem-. In: Wang, P.P.
(ed.) Proceedings of the 7th Joint Conference on Information Sciences, pp. 1661–1664
(2003)

230
Y. Katada
[15] Katada, Y., Ohkura, K., Ueda, K.: Tuning genetic algorithms for problems includ-
ing neutral networks -the simplest case: The balance beam function-. In: Wang, P.P.
(ed.) Proceedings of the 7th Joint Conference on Information Sciences, pp. 1657–1660
(2003)
[16] Katada, Y., Ohkura, K., Ueda, K.: An approach to evolutionary robotics using a genetic
algorithm with a variable mutation rate strategy. In: Yao, X., et al. (eds.) PPSN 2004.
LNCS, vol. 3242, pp. 952–961. Springer, Heidelberg (2004)
[17] Katada, Y., Ohkura, K., Ueda, K.: The nei’s standard genetic distance in artiﬁcial evo-
lution. In: Greenwood, G.W. (ed.) Proceedings of the 2004 IEEE Congress on Evolu-
tionary Computation (CEC 2004), pp. 1233–1239. IEEE Press (2004)
[18] Kauffman, S.A.: The Origins of Order: Self-Organization and Selection in Evolution.
Oxford University Press, New York (1993)
[19] Kimura, M.: The Neutral Theory of Molecular Evolution. Cambridge University Press,
New York (1983)
[20] Maass, W., Bishop, C.: Pulsed Neural Networks. MIT press (1998)
[21] Manderick, B., Weger, M.D., Spiessens, P.: The genetic algorithm and the structure of
the ﬁtness landscape. In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the Fourth
International Conference on Genetic Algorithms, pp. 143–150. Morgan Kaufmann, San
Mateo (1991)
[22] Mitchell, M., Forrest, S., Holland, J.H.: The royal road for genetic algorithms: Fitness
landscapes and GA performance. In: Varela, F.J., Bourgine, P. (eds.) Towards a Practice
of Autonomous Systems: Proceedings of the First European Conference on Artiﬁcial
Life, 1991, pp. 245–254. A Bradford Book, The MIT Press, Paris (1992)
[23] Nei, M.: Genetic distance between populations. The American Naturalist 106, 283–292
(1972)
[24] Newman, M., Engelhardt, R.: Effect of neutral selection on the evolution of molecular
species. Proc. R. Soc. London B 265, 1333–1338 (1997)
[25] van Nimwegen, E., Crutchﬁeld, J.P.: Optimizing epochal evolutionary search:
Population-size dependent theory. SFI Working Paper 9810-090 (1998)
[26] van Nimwegen, E., Crutchﬁeld, J.P., Mitchell, M.: Statistical dynamics of the royal road
genetic algorithm. Theoretical Computer Science 229(1), 41–102 (1999)
[27] Ohkura, K., Ueda, K.: Adaptation in dynamic environment by using GA with neutral
mutations. International Journal of Smart Engineering System Design 2, 17–31 (1999)
[28] Ohta, T.: The nearly neutral theory of molecular evolution. Annu. Rev. Ecol. Syst. 23,
263–286 (1992)
[29] Ohta, T.: Evolution by nearly-neutral mutations. Genetica 102/103, 83–90 (1998)
[30] Simon, H.: The Sciences of the Artiﬁcial. MIT Press, Cambridge (1969)
[31] Smith, T.: The evolvability of artiﬁcial neural networks for robot control. Ph.D. thesis,
School of Biological Sciences, University of Sussex (2002)
[32] Smith, T., Husbands, P., Layzell, P., O’Shea, M.: Fitness landscapes and evolvability.
Evolutionary Computation 10(1), 1–34 (2002)
[33] Smith, T., Husbands, P., O’Shea, M.: Neutral networks and evolvability with complex
genotype-phenotype mapping. In: Kelemen, J., Sos´ık, P. (eds.) ECAL 2001. LNCS
(LNAI), vol. 2159, pp. 272–281. Springer, Heidelberg (2001)
[34] Smith, T., Husbands, P., O’Shea, M.: Neutral networks in an evolutionary robotics
search space. In: Kim, J.H., et al. (eds.) Proceedings of the 2001 IEEE Congress on
Evolutionary Computation, CEC 2001, pp. 136–145. IEEE Press, Piscataway (2001)

8
Estimating the Degree of Neutrality and Ruggedness of Fitness Landscapes
231
[35] Smith, T., Philippides, A., Husbands, P., O’Shea, M.: Neutrality and ruggedness in robot
landscapes. In: Fogel, D., et al. (eds.) Proceedings of the 2002 Congress on Evolutionary
Computation (CEC 2002), pp. 1348–1353. IEEE Press (2002)
[36] Stadler, P.F.: Landscapes and their correlation functions. J. Math. Chem. 20, 1–45
(1996)
[37] Thompson, A.: An evolved circuit, intrinsic in silicon, entwined with physics. In:
Higuchi, T., Iwata, M., Weixin, L., et al. (eds.) ICES 1996. LNCS, vol. 1259, pp. 390–
405. Springer, Heidelberg (1997)
[38] Vassilev, V.K., Miller, J.F.: The advantages of landscape neutrality in digital circuit
evolution. In: Miller, J.F., Thompson, A., Thompson, P., Fogarty, T.C. (eds.) ICES 2000.
LNCS, vol. 1801, pp. 252–263. Springer, Heidelberg (2000)
[39] Vassilev, V.K., Miller, J.F., Fogarty, T.C.: Information characteristics and the structure
of landscapes. Evolutionary Computation 8(1), 31–60 (2000)
[40] Verel, S.: Fitness landscapes and graphs: Multimodularity, ruggedness and neutrality. In:
Rothlauf, F. (ed.) Proceedings of the 11th Annual Conference Companion on Genetic
and Evolutionary Computation Conference, Tutorial, pp. 3593–3655 (2009)
[41] Verel, S., Ochoa, G., Tomassini, M.: Local optima networks of nk landscapes with neu-
trality. IEEE Transactions on Evolutionary Computation 15(6), 783–797 (2011)
[42] Weinberger, E.D.: Correlated and uncorrelated ﬁtness landscapes and how to tell the
difference. Biological Cybernetics 63, 325–336 (1990)
[43] Wright, S.: The role of mutation, inbreeding, crossbreeding and selection in evolution.
In: Jones, D. (ed.) Proceedings of the Sixth International Congress on Genetics, vol. 1,
pp. 356–366 (1932)

Chapter 9
Local Optima Networks: A New Model
of Combinatorial Fitness Landscapes
Gabriela Ochoa, S´ebastien Verel, Fabio Daolio, and Marco Tomassini
Abstract. This chapter overviews a recently introduced network-based model of
combinatorial landscapes: Local Optima Networks (LON). The model compresses
the information given by the whole search space into a smaller mathematical ob-
ject that is a graph having as vertices the local optima and as edges the possible
weighted transitions between them. Two deﬁnitions of edges have been proposed:
basin-transition and escape-edges, which capture relevant topological features of the
underlying search spaces. This network model brings a new set of metrics to char-
acterize the structure of combinatorial landscapes, those associated with the science
of complex networks. These metrics are described, and results are presented of local
optima network extraction and analysis for two selected combinatorial landscapes:
NK landscapes and the quadratic assignment problem. Network features are found
to correlate with and even predict the performance of heuristic search algorithms
operating on these problems.
9.1
Introduction
The ﬁtness landscape metaphor appears most commonly when describing the dy-
namics of evolutionary algorithms, and its origins are attributed to the population
Gabriela Ochoa
Department of Computing Science and Mathematics, School of Natural Sciences,
University of Stirling, Stirling, FK9 4LA Scotland, UK
e-mail: gabriela.ochoa@cs.stir.ac.uk
S´ebastien Verel
INRIA Lille - Nord Europe and University of Nice Sophia-Antipolis,
06903 Sophia Antipolis Cedex, France
e-mail: verel@3s.unice.fr
Fabio Daolio · Marco Tomassini
Department of Information Systems, University of Lausanne,
1015 Lausanne, Switzerland
e-mail: {fabio.daolio,marco.tomassini}@unil.ch
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
233
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_9, c⃝Springer-Verlag Berlin Heidelberg 2014

234
G. Ochoa et al.
geneticist Sewall Wright [50]. However, the metaphor can be used for computational
search in general; the search space can be regarded as a spacial structure where each
point (candidate solution) has a height (objective function value) forming a land-
scape surface. In this scenario, the search process would be an adaptive-walk over
a landscape that can range from having many peaks of high ﬁtness boarding deep
cliffs to valleys of low ﬁtness, to being smooth, with low hills and gentle valleys.
Identifying the landscape features affecting the effectiveness of heuristic search
algorithms is relevant for both predicting their performance and improving their de-
sign. Some properties of landscapes that are known to have a strong inﬂuence on
heuristic search are the number of local optima or peaks in the landscape, the distri-
bution of the local optima in the search space, the correlation between ﬁtness values
of neighboring points in the landscape, the topology of the basins of attraction of
the local optima, and the presence of neutrality (different search points having the
same objective value). Statistical methods have been proposed to measure some of
these properties, for example, ﬁtness-distance correlation [19], distributions of so-
lutions density [37], landscape correlation functions [47], and the negative slope co-
efﬁcient [42]. These metrics work by sampling the landscape surface to provide an
approximation of its shape. An alternative view, ﬁrst introduced in chemical physics
in the study of energy landscapes [39], is to construct a network formed by the
landscape local optima (minima or maxima). In this view of energy surfaces, the
network’s vertices are energy minima and there is an edge between two minima if
the system can jump from one to the other with an energy cost of the order of the
thermal energies. Usually this “transition state” goes through a low energy barrier
such as a saddle point in the surface. The resulting graph has been referred to as an
inherent network. Recent work by Doye and coworkers and by Caﬂish and cowork-
ers [13, 14, 34] has shown the beneﬁts of this approach: it provides a synthetic view
of the energy landscape and the network can be studied using appropriate statistical
methods to characterize it in various ways [30]. For example, Doye et al. [13, 14]
found that the inherent networks of the energy landscapes of small atomic clusters
are often of the scale-free type with a power-law degree distribution function, fea-
turing a kind of single or multiple “funnel” structure. The global energy minimum
is the most highly connected node at the bottom of the funnel. This means that the
path to the global energy minimum is easy to follow starting anywhere in the en-
ergy landscape. The concept of community structure of a network, introduced ﬁrst
for social networks [30], has also been applied, showing that in some cases energy
minima split into almost separate groups or communities [27]. This effect is even
more spectacular for polypeptides [17]. This kind of information is invaluable for
understanding the dynamics induced on the energy landscape such as cluster rear-
rangements or protein folding.
The local optima networks ﬁtness landscape model, described in this chapter,
adapts the notion of the inherent network of energy surfaces to the realm of combi-
natorial (discrete) search spaces. As for energy surfaces (which exist in continuous
space), the vertices correspond to solutions that are minima or maxima of the asso-
ciated combinatorial problem, but edges are deﬁned differently. The combinatorial
counterpart considers oriented and weighted edges. In a ﬁrst version, the weights

9
Local Optima Networks
235
represent an approximation to the probability of transition between the respective
basins in a given direction [32, 33, 41, 44, 45]. This deﬁnition, although informa-
tive, produced densely connected networks and required exhaustive sampling of the
basins of attraction. A second version, escape edges was proposed in [43], which
does not require a full computation of the basins. Instead, these edges account for
the chances of escaping a local optimum after a controlled mutation (e.g. 1 or 2
bit-ﬂips in binary space) followed by hill-climbing. As a ﬁrst benchmark case in
the study of local optima networks, the well studied family of abstract landscapes,
the Kauffman’s NK model, was selected [20, 21]. In this model the ruggedness,
and hence the difﬁculty of the landscape, can be tuned from easy to hard. Two
NK models incorporating neutrality (i.e. extended regions of equal or quasi-equal
ﬁtness) were considered: the NKp (‘probabilistic’ NK) [3], and NKq (‘quantized’
NK) [29] families. Subsequently, a more complex and realistic search space was
studied. Speciﬁcally, the quadratic assignment problem (QAP) introduced by Koop-
mans and Beckmann [24], which is known to be NP-hard [38].
The local optima network model captures in detail the number and distribution of
local optima in the search space; features which are known to be of utmost impor-
tance for understanding the search difﬁculty of the corresponding landscape. This
understanding may be exploited when designing efﬁcient search algorithms. For ex-
ample, it has been observed in many combinatorial landscapes that local optima
are not randomly distributed, rather they tend to be clustered in a “central massif”
(or “big valley” if we are minimizing). This globally convex landscape structure
has been observed in the NK family of landscapes [20, 21], and in many combi-
natorial optimization problems, such as the traveling salesman problem [6], graph
bipartitioning [28], and ﬂowshop scheduling [35]. Search algorithms exploiting this
global structure have been proposed [6, 35]. For the travelling salesman problem,
the big-valley structure holds in much of the search space. However, it has been re-
cently found that the big-valley structure disappears, giving rise to multiple funnels,
around local optima that are very close to the global optimum [18]. A specialized
crossover operator has been proposed to exploit and overcome this multi-funnel
structure [49].
The analysis of local optima networks so far has shown interesting correlations
between network features and known search difﬁculty on the studied combinato-
rial problems. This chapter overviews the conception and analysis of local optima
networks. A brief account of the science of complex networks is given before de-
scribing the combinatorial landscapes, relevant deﬁnitions and methods employed.
A summary of the most relevant results of the analysis is presented, and ﬁnally, the
prospects of this research effort are discussed.
9.2
The Science of Complex Networks
The last few years have seen an increased interest in the structure of the big networks
that form part of our daily environment such as the World Wide Web, the Internet,
transportation and electrical power networks, web-based social networks such as

236
G. Ochoa et al.
Facebook, and many others. These networks have properties that are unparalleled in
simple graphs such as lattices, properties that are akin to those of complex systems
in general. In these systems, it is difﬁcult or even impossible to infer global behav-
iors given the rules that are obeyed by the system components and their interactions.
For this reason, these big networks are called complex networks and their structure
gives rise to a wide range of dynamical behaviors. Since this chapter draws heav-
ily on complex network nomenclature and methods, to make it self-contained to a
large extent, we give a brief introduction to the ﬁeld. There exist many references
on complex networks: a technical but still very readable introductory book is [12],
while [31] is a comprehensive reference.
Mathematically, networks are just graphs G(V,E) where V is the set of vertices
and E is the set of edges that join pairs of vertices. A complex network class that
enjoys a precise mathematical description is random graphs which are introduced
below. Random graphs are a useful abstraction that can sometimes be used to model
real networks or, at least, to compare with actual complex networks.
9.2.1
Random Graphs
The random-graph model was formally deﬁned by Erd¨os and R´enyi at the end of
the 1950s. In its simplest form, the model consists of N vertices joined by edges
that are placed between pairs of vertices uniformly at random. In other words, each
of the possible N(N −1)/2 edges is present with probability p and absent with
probability 1−p. The model is often referred to as GN,p to point out that, rigorously
speaking, there is no such thing as a random graph, but rather an ensemble GN,p of
equiprobable graphs.
Another closely related model of a random graph considers the family of graphs
GN,M with N vertices and exactly M edges. For 0 ≤M ≤
N
2

, there are s =
N(N−1)/2
M

graphs with M edges. If the probability of selecting any one of them
is 1/s, then the ensemble GN,M is called the family of uniform random graphs. For
M ≃pN, the two models are very similar, but we shall use GN,p in what follows.
A few simple facts are worth noting about random graphs. The average degree
¯k of a graph G is the average of all the vertex degrees in G: ¯k = (1/N)∑N
j=1kj,
where kj is the degree of vertex j. If |E| = M is the number of edges in G, then
M = (N¯k)/2, since ∑N
j=1 kj = 2M (each edge is counted twice).
The expected number of edges of a random graph belonging to GN,p is clearly
(1/2)N(N −1)p, but since each edge has two ends, the average number of edge ends
is N(N −1)p, which in turn means that the average degree of a vertex in a random
graph is
¯k = N(N −1)p
N
= (N −1)p ≃Np
(9.1)
for sufﬁciently large N.

9
Local Optima Networks
237
An important property of a connected random graph is that the average path
length, i.e the mean distance between nodes, is of the order of logN, which means
that any two nodes are only a short distance apart since logN grows very slowly
with increasing N.
9.2.2
Other Network Topologies
Random graphs are interesting objects as they obey, in a probabilistic sense, gen-
eral mathematical properties. They are also a useful model for generating problem
instances for testing network algorithms, and they are used in other ways too. But
are random graphs a useful model of the networks that permeate society? Actually,
social scientists felt qualitatively as early as the 1950s that social and professional
links and acquaintances did not follow a random structure. For example, if a person
has some relationship with two others, then the latter two are more likely to know
each other than are two arbitrary persons. This does not ﬁt the random-graph model,
however, where the likelihood that two given nodes are connected is the same in-
dependent of any other consideration. In a ground-breaking paper, Watts and Stro-
gatz [46] proposed a simple network construction algorithm that gives rise to graphs
having the following properties: the path length from any node to any other node is
short, as in random graphs; but, unlike random graphs, there is local structure in the
network. Watts and Strogatz called their networks small-world networks, a term that
has been in use for a long time in the ﬁeld of social games to indicate that there is a
small separation between any two persons in a large social network.
The discovery of these new properties was made possible by the abundance of
online network data and the computer power to analyze these data; something that
was not available to social scientists at earlier times. Many networks have been stud-
ied since, both man-made and natural: the Internet, the World Wide Web, scientiﬁc
collaboration and coauthorship networks, metabolic and neural networks, air trafﬁc,
telephone calls, e-mail exchanges, and many others [31]. Most of these studies have
conﬁrmed that, indeed, real networks are not random in the sense of random-graph
theory, and they possess a number of quite interesting properties.
Some deﬁnitions of global and local network properties that will be used in the
rest of the chapter are described below.
9.2.3
Some Graph Statistics
Drawing and visualizing a network with up to a few tens of nodes may help in
understanding its structure. However, when there are thousands of nodes, this is
no longer possible. For this reason, a number of statistics have been proposed to
describe the main features of a graph. Taken together, these statistics characterize
the nature of a network.

238
G. Ochoa et al.
Four statistics are particularly useful: the average degree, already deﬁned in Sec-
tion 9.2.1, the clustering coefﬁcient, the average path length, and the degree dis-
tribution function. We shall now brieﬂy describe these graph measures. A fuller
treatment can be found in [31].
9.2.3.1
Clustering Coefﬁcient
Here we use the following deﬁnition of clustering: consider a particular node j in a
graph, and let us assume that it has degree k, i.e. it has k edges connecting it to its k
neighboring nodes. If all k vertices in the neighborhood were completely connected
to each other, forming a clique, then the number of edges would be equal to
k
2

. The
clustering coefﬁcient Cj of node j is deﬁned as the ratio between the e edges that
actually exist between the k neighbors and the number of possible edges between
these nodes
Cj = e
k
2
 =
2e
k(k −1)
(9.2)
Thus Cj is a measure of the “cliquishness” of a neighborhood: the higher the value
of Cj, the more likely it is that two vertices that are adjacent to a third one are also
neighbors of each other.
For example, in Figure 9.1, the leftmost case has Cj = 0 since none of the links
between node j’s neighbors is present. In the middle ﬁgure, three out of the possi-
ble six links are present and thus Cj = (2 × 3)/(4 × 3) = 6/12 = 0.5, while in the
rightmost case Cj = 1 since all six links between j’s neighbors are present.
j
Cj=0
j
Cj=0.5
j
Cj=1
Fig. 9.1 In the left image the clustering coefﬁcient of node j, Cj = 0 since there are no links
among j’s neighbors. In the middle image Cj = 0.5 because three out of the possible six
edges among the neighbors of j are present. In the right image Cj = 1 as all the edges that
could be there are actually present (it is a clique).
The average clustering coefﬁcient ¯C is the average of Ci over all N vertices i ∈
V(G): ¯C = (1/N)∑N
i=1Ci. The clustering coefﬁcient of a graph G thus expresses the
degree of locality of the connections.
The clustering coefﬁcient of a random graph is simply ¯k/N ≃p = ¯C, where N is
the total number of vertices and p is the probability that there is an edge between

9
Local Optima Networks
239
any two vertices since all edges are equiprobable and uncorrelated. One thus sees
that the clustering coefﬁcient of a random graph decreases with the graph size N and
approaches 0 for N →∞. The clustering coefﬁcient of a complete graph is 1, since
each of a node’s neighbors are connected to each other by deﬁnition.
9.2.3.2
Average Path Length
The distance between two nodes i and j is deﬁned as the number of edges between
i and j. We denote the shortest path between nodes i, j ∈V(G) by lij as being the
path with the shortest distance. The average, or mean, path length ¯L of G is then
deﬁned as
¯L =
2
N(N −1)
N
∑
i=1∑
j>i
lij
(9.3)
The normalizing constant 2/N(N −1) is the inverse of the total number of pairs of
vertices. If there is no path between any two nodes, their distance is conventionally
set to ∞(note that Equation 9.3 does not hold in this case).
The mean path length gives an idea of “how long” it takes to navigate a connected
network. Random graphs and small-world networks share the property that ¯L scales
as logN and thus most vertices in these networks are connected by a short path. This
is not the case in d-dimensional regular lattice graphs, where ¯L scales as N1/d. For
instance, in a ring ¯L scales linearly with N and is inversely proportional to k, the
number of neighbors.
9.2.3.3
Degree Distribution Function
The degree distribution P(k) of an undirected graph G is a function that gives the
probability that a randomly selected vertex has degree k. P(k) can also be seen
as the fraction of vertices in the graph that have degree k. Similar deﬁnitions also
apply for the in-links and out-links of the vertices in a directed graph for which one
can deﬁne a degree distribution function for both the outgoing Pout(k) and the the
incoming Pin(k) links.
For a random graph with connection probability p, the probability P(k) that a
random node has degree k is given by
P(k) =

N −1
k

pk(1 −p)N−1−k
(9.4)
This is the number of ways in which k edges can be selected from a certain node
out of the N −1 possible edges, given that the edges can be chosen independently
of each other and have the same probability p. Thus P(k) is a binomial distribu-
tion peaked at P(¯k) ≃Np, as already found in Equation (9.1). Since this distribu-
tion has a rapidly diminishing tail, most nodes will have similar degrees. Low- and
high-degree nodes, say a few standard deviations away from the mean, have a neg-
ligible probability, since the tails fall off very rapidly. Networks having this degree

240
G. Ochoa et al.
distribution will thus be rather homogeneous as far as the connectivity is concerned.
For large N and for pN constant, the binomial distribution can be well approximated
by the Poisson distribution of mean ¯k = Np:
P(k) = e−¯k ¯kk
k!
(9.5)
Another rapidly-decaying degree distribution function that appears in model graphs
is the exponential distribution:
P(k) ∝e−k/¯k
(9.6)
This degree distribution results when nodes are progressively added to a growing
network such that a new node has the same probability of forming a link with any
of the already existing nodes. Most real networks, however, do not show this kind
of behavior. Instead, the so called scale-free networks, a model of which was ﬁrst
proposed by Barab´asis and Albert [2], seem to be closer to real life networks. In
these networks, P(k) follows a power-law distribution:
P(k) = ck−γ,
(9.7)
where c and γ are positive constants.
In scale-free networks, while most nodes have a low degree, there is a small
but non-negligible number of highly connected nodes. This structure has a pro-
found inﬂuence on the dynamics of processes taking place on those networks. It
is worth mentioning that this model has been recently criticized [8] as it turns out
that, upon close inspection, many empirical data-sets in the literature that were pre-
viously assumed to have a power-low distribution are better modeled by alternative
distributions.
Poisson, exponential, and power-law distributions are characteristic of model ran-
dom and scale-free graphs respectively. The empirical distribution functions found
for real-life graphs are seldom of this type though, because it is almost impossible to
ﬁnd such “pure” networks among ﬁnite sampled ones. However, most real networks
have degree distributions that are fat-tailed, i.e. the right part of the distribution ex-
tends to regions that would have negligible probability for a Poisson distribution; in
other words, nodes with high degree exist with non-negligible probability. Two dis-
tributions that have been useful to ﬁt real data are the power-law with exponential
cutoff and the stretched exponential. Both forms take into account that in a ﬁnite
network there must be a maximum ﬁnite degree. As an example, the following is an
exponentially-truncated power-law:
P(k) ∝k−γ exp(−k/kc),
(9.8)
where kc is a “critical connectivity”. When k approaches kc the exponential term
tends to 0 and P(k) decreases faster than a power-law due to the exponential cutoff.

9
Local Optima Networks
241
To conclude, we can say that the degree distribution function, together with the
other statistics, are a kind of rough “signature” of the type of network and can be
helpful in predicting the main aspects of the properties of the network. The reader
should be aware that there are other measures beyond those described here, such as
those that say which are the most “central” actors. Likewise, the picture has been
one of static networks: their dynamical properties, have been neglected here. A good
source for advanced material is [31].
9.2.4
Weighted Networks
Weighted networks are a useful extension of the network model. Weights w(e) are
assigned to edges e ∈E and could represent, for instance, the bandwidth of a com-
munication line, the number of passengers transported on a given air route, the dis-
tance between two metro stations, and many other real-life aspects of networks.
Here, weights represent transition probabilities among optima and their basins in
ﬁtness landscapes. We denote wij as the transition probability between local optima
i and j, which in our model is generally different than the transition from j to i,
denoted by wji (see Section 9.4.2 for more details).
Statistics for weighted networks are more or less straightforward extensions of
those used for unweighted networks. Those that will be used in the rest of the chapter
are brieﬂy outlined below. The reader is refereed to [4] for more details.
Suitable distribution functions can also be deﬁned for weighted networks. For ex-
ample, it can be of interest to know the function P(we) which indicates the frequency
of weight w among the edges e in a given weighted network. Since our networks are
directed, we use Pin(we) and Pout(we) which give the probability that any given edge
e has incoming or outgoing weight w.
9.2.4.1
Strength
The vertex strength, si, is deﬁned as si = ∑j∈V (i)−{i}wij, where the sum is over the
set V (i)−{i} of neighbors of vertex i. This metric is, therefore, a generalization of
the node’s degree giving information about the number and importance of the edges.
9.2.4.2
Weighted Clustering Coefﬁcient
The standard clustering coefﬁcient (described in Section 9.2.3) does not consider
weighted edges. We thus use the weighted clustering measure proposed by [4],
which combines the topological information with the weight distribution of the net-
work:
cw(i) =
1
si(ki −1)∑
j,h
wij + wih
2
aija jhahi
where si is the vertex strength, si = ∑j∈V (i)−{i}wij, anm = 1 if wnm > 0, anm = 0 if
wnm = 0 and ki = ∑j̸=i aij.

242
G. Ochoa et al.
This metric cw(i) counts, for each triple formed in the neighborhood of vertex i
(indicated in the equation by aija jhahi), the weight of the two participating edges of
vertex i. The normalization factor si(ki −1), ensures that the metric is in the range
[0,1]. It is customary to deﬁne Cw as the weighted clustering coefﬁcient averaged
over all vertices of the network.
9.2.4.3
Disparity
The disparity measure Y2(i), gauges the heterogeneity of the contributions of the
edges of node i to the total weight (strength):
Y2(i) = ∑
j̸=i

wij
si
2
9.2.4.4
Shortest Paths
For weighted graphs, computing the shortest paths depends on the meaning of the
edge weights. For example, if the weight represents e.g. a frequency of interaction,
an electrical load, the number of passengers transported or a probability of transi-
tion, then the higher the weight, the “nearer” the two end points. In this case the path
length between any two connected vertices is taken as the sum of the reciprocal of
the weights ∑1/wij where the sum is over all edges {ij} traversed along the path
from the start node to the end node. On the other hand, if weights represent “costs”
of some kind and the aim is to have low total cost, then the length is simply the sum
of the costs of all edges along the path and the minimal length is that of the path
with minimum cost.
In the local optima network model, we measure the shortest distance between two
nodes as the expected number of operator moves to go from one node to the other.
Given that the transition probability between two nodes i and j is given by wij, we
calculate the distance between them as dij = 1/wij. The length of a path between two
arbitrary connected nodes is, therefore, the sum of these distances along the edges
connecting them. The average path length of the whole network is the average value
of all the possible shortest paths.
9.2.5
Community Structure in Networks
A last theme in this section that we want to treat brieﬂy is the “intermediate” struc-
ture of large networks since it will play a role in the following and is an important
feature of complex networks. Model networks grown according to the Barab´asi–
Albert recipe [2] or randomly generated have little structure in the sense that there
are few or no recognizable sub-networks. That is, if one looks at a picture of the
network it appears to be rather homogeneous on a global scale.
On the contrary, many observed networks, especially those arising from so-
cial interactions, show the presence of clusters of nodes. These clusters are called

9
Local Optima Networks
243
communities. It is difﬁcult, if not impossible, to give a precise and unique math-
ematical deﬁnition of a community. An intuitive deﬁnition of a community is the
following: nodes belonging to a community are more strongly associated with each
other than they are with the rest of the network. In other words, the intra-community
connectivity is higher than the inter-community connectivity. Of course, the deﬁni-
tion is somewhat circular but in the last few years several algorithms have been
proposed for community detection. Since this task is a hard computational problem,
machine learning algorithms and heuristics have been used and in practice these
work satisfactorily.
9.3
Example Combinatorial Landscapes
9.3.1
The NK Model
The idea of an NK landscape is to have N “spins“or “loci”, each with two possible
values, 0 or 1. The model is a real stochastic function Φ deﬁned on binary strings
s ∈{0,1}N of length N, Φ : s →R+. The value of K determines how many other
gene values in the string inﬂuence a given gene si, i = 1,...,N. The value of Φ is
the average of the contributions φi of all the loci:
Φ(s) = 1
N
N
∑
i=1
φi(si,si1,...,siK)
By increasing the value of K from 0 to N −1, NK landscapes can be tuned from
smooth to rugged. For K = 0 all contributions can be optimized independently which
makes Φ a simple additive function with a single maximum. At the other extreme,
when K = N −1, the landscape becomes completely random. The probability of
any given conﬁguration being the optimum is 1/(N + 1), and the expected number
of local optima is 2N/(N + 1). Intermediate values of K interpolate between these
two extremes and have a variable degree of “epistasis”, i.e. of gene interaction [21,
22, 25].
The K variables that form the context of the ﬁtness contribution of gene si can
be chosen according to different models. The two most widely studied models are
the random neighborhood model, where the K variables are chosen randomly ac-
cording to a uniform distribution among the N −1 variables other than si, and the
adjacent neighborhood model, in which the K variables are closest to si in a total or-
dering s1,s2,...,sN (using periodic boundaries). No signiﬁcant differences between
the two models were found in terms of global properties of the respective families of
landscapes, such as mean number of local optima or autocorrelation length [21, 48].
Similarly, our preliminary studies on the characteristics of the NK landscape optima
networks did not show noticeable differences between the two neighborhood mod-
els. Therefore, the study in this chapter considers the more general random model.

244
G. Ochoa et al.
9.3.2
The Quadratic Assignment Problem
The quadratic assignment problem (QAP) is a combinatorial problem in which a set
of facilities with given ﬂows has to be assigned to a set of locations with given dis-
tances in such a way that the sum of the product of ﬂows and distances is minimized.
A solution to the QAP is generally written as a permutation π of the set {1,2,...,n}.
The cost associated with a permutation π is given by:
C(π) =
n
∑
i=1
n
∑
j=1
aijbπiπj
where n denotes the number of facilities/locations and A = {aij} and B = {bij} are
referred to as the distance and ﬂow matrices, respectively. The structure of these two
matrices characterizes the class of instances of the QAP problem.
The results presented in this chapter are based on two instance generators pro-
posed in [23]. These generators were originally devised for the multi-objective QAP,
but were adapted for the single-objective QAP and used for the local optima network
analysis in [9, 10]. In order to perform a statistical analysis of the extracted local op-
tima networks, several problem instances of the two different problem classes were
considered. The ﬁrst generator produces uniformly random instances where all ﬂows
and distances are integers sampled from uniform distributions. This leads to the kind
of problem known in literature as Tainna, where nn is the problem dimension [40].
The second generator produces ﬂow entries that are non-uniform random values.
This procedure, detailed in [23] generates random instances of type Tainnb which
have the so called “real-like” structure since they resemble the structure of QAP
problems found in practical applications.
9.4
The Local Optima Network Model
This section formally describes the local optima network model of combinatorial
landscapes. We start by deﬁning the notion of ﬁtness landscapes, and follow by
formalizing the notions of nodes and edges of the network model.
A ﬁtness landscape [36] is a triplet (S,V, f) where S is a set of potential solutions
i.e. a search space; V : S −→2S, a neighborhood structure, is a function that assigns
to every s ∈S a set of neighbors V(s), and f : S −→R is a ﬁtness function that can
be pictured as the height of the corresponding solutions.
Local optima networks have been analyzed for the two combinatorial landscapes
discussed in Section 9.3. Therefore, two search spaces or solution representations
have been studied: binary strings (NK landscapes) and permutations (QAP). For
each case, the most basic neighborhood structure is considered, as described in Ta-
ble 9.1. The single bit-ﬂip operation changes a single bit in a given binary string,
whereas the pairwise exchange operation exchanges any two positions in a permu-
tation, thus transforming it into another permutation.

9
Local Optima Networks
245
Table 9.1 Search space and neighborhood structure characteristics.
Representation Length Search space size
Neighborhood
Neighborhood size
Binary
N
2N
single bit-ﬂip
N
Permutation
N
N!
pairwise exchange
N(N −1)/2
9.4.1
Deﬁnition of Nodes
We start by describing the HillClimbing algorithm (Algorithm 4) used to determine
the local optima, and therefore deﬁne the basins of attraction. The algorithm de-
ﬁnes a mapping from the search space S to the set of locally optimal solutions S∗.
Hill climbing algorithms differ in their so-called pivot or selection rule. In best-
improvement local search, the entire neighborhood is explored and the best solu-
tion is returned, whereas in ﬁrst-improvement, a neighbor is selected uniformly at
random and is accepted if it improves on the current ﬁtness value. We consider
here a best-improvement local search heuristic (see Algorithm 4). For a compari-
son between ﬁrst and best-improvement local optima network models, the reader is
referred to [33].
This best-improvement local search (or hill-climbing) algorithm is used to deter-
mine the local optima. The neighborhoods used for each of the studied represen-
tation can be seen in Table 9.1. These local optima will represent the nodes of the
network as discussed below.
9.4.1.1
Nodes
A local optimum (LO), which is taken to be a maximum here, is a solution s∗such
that ∀s ∈V(s), f(s) ≤f(s∗).
Let us denote by h(s) the stochastic operator that associates each solution s to its
local optimum, i.e. the solution obtained after applying the best-improvement hill-
climbing algorithm (see Algorithm 4) until convergence. The size of the landscape
is ﬁnite, so we can denote by LO1, LO2, LO3 ...,LOp, the local optima. These LOs
are the vertices of the local optima network.
9.4.2
Deﬁnition of Edges
Two edge models have been considered: basin-transition and escape edges.
9.4.2.1
Basin-Transition Edges
The basin of attraction of a local optimum LOi ∈S is the set bi = {s ∈S | h(s) =
LOi}. The size of the basin of attraction of a local optimum i is the cardinality

246
G. Ochoa et al.
Algorithm 4. Best-improvement local search (hill-climbing).
Choose initial solution s ∈S
repeat
choose s
′ ∈V(s), such that f (s
′) = maxx∈V(s) f (x)
if f (s) < f (s
′) then
s ←s
′
end if
until s is a Local optimum
of bi, denoted ♯bi. Notice that for non-neutral1 ﬁtness landscapes, as are standard
NK landscapes, the basins of attraction as deﬁned above produce a partition of the
conﬁguration space S. Therefore, S = ∪i∈S∗bi and ∀i ∈S ∀j ̸= i, bi ∩b j = /0.
We can now deﬁne the weight of an edge that connects two feasible solutions in
the ﬁtness landscape.
For each pair of solutions s and s
′, p(s →s
′) is the probability to pass from s to s
′
with the given neighborhood structure. These probabilities are given below for the
two solution representations studied (see Table 9.1), with length N or size N and
considering uniform selection of random neighbors.
Binary representation:
if s
′ ∈V(s) , p(s →s
′) = 1
N and
if s
′ ̸∈V(s) , p(s →s
′) = 0.
Permutation representation: if s
′ ∈V(s) , p(s →s
′) =
1
N(N−1)/2 and
if s
′ ̸∈V(s) , p(s →s
′) = 0.
The probability ( p(s →b j) ≤1) to go from solution s ∈S to a solution belonging
to the basin b j, is:
p(s →b j) = ∑
s′∈bj
p(s →s
′)
Thus, the total probability of going from basin bi to basin b j, i.e. the weight wij
of edge eij, is the average over all s ∈bi of the transition probabilities to solutions
s
′ ∈b j :
p(bi →b j) = 1
♯bi ∑
s∈bi
p(s →b j)
9.4.2.2
Escape Edges
The escape edges are deﬁned according to a distance function d (minimal number
of moves between two solutions), and a positive integer D > 0. There is an edge eij
between LOi and LOj if a solution s exists such that d(s,LOi) ≤D and s h(s) = LOj.
The weight wij of this edge is wij = ♯{s ∈S | d(s,LOi) ≤D and h(s) = LOj}. This
1 For a deﬁnition of basins that deals with neutrality, the reader is referred to [45].

9
Local Optima Networks
247
weight can be normalized by the number of solutions, ♯{s ∈S | d(s,LOi) ≤D},
within reach at distance D.
9.4.3
Local Optima Network
The weighted local optima network Gw = (N,E) is the graph where the nodes ni ∈N
are the local optima, and there is an edge eij ∈E, with weight wij, between two
nodes ni and n j if wij > 0.
According to both deﬁnitions of edge weights, wij may be different than wji.
Thus, two weights are needed in general, and we have an oriented transition graph.
Figures 9.2 and 9.3 illustrate the alternative local optima network (LON) mod-
els. All ﬁgures correspond to a real NK landscape with N = 18, K = 2. Figure 9.2
illustrates the basin-transition edges, while Figure 9.3 the escape edges with D = 1
(left) and D = 2 (right). Notice that the basin-transition edges (Figure 9.2) produce
a densely connected network, while the escape edges (Figure 9.3) produce more
sparse networks.
●
●
●
●
●
●
●
●
Fig. 9.2 Local optima network with basin-transition edges for an NK-landscape instance
with N = 18, K = 2. The size of the nodes is proportional to the basin sizes. The nodes’ color
represent the ﬁtness values: the darker the color, the highest the ﬁtness value. The edges’
width scales with the transition probability (weight) between local optima.

248
G. Ochoa et al.
(D = 1)
(D = 2)
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
Fig. 9.3 Local optima network with escape edges (with D = 1 and D = 2) for an NK-
landscape instance with N = 18, K = 2. Since this model does not require the calculation
of the basins sizes, these are not depicted in the plots. The nodes’ color represent the ﬁtness
values: the darker the color, the highest the ﬁtness value. The edges’ width scales with the
transition probability (weight) between local optima.
9.5
Results of the Network Analysis
The purpose of this section is to give an overview of the main results of the anal-
ysis of local optima networks for the two example combinatorial landscapes: NK
landscapes (Section 9.5.1) and the quadratic assignment problem (Section 9.5.2).
For each example, the empirical set up and instances analyzed are discussed. The
values obtained from the study of basins of attraction, general network metrics and
connectivity, are reported and discussed.
9.5.1
The NK Model
For the NK model, the two deﬁnitions of edges, i.e. basin-transition and escape
edges (Section 9.4.2), are considered. Moreover, an initial study correlating network
metrics with search difﬁculty is also presented.
Results are presented for landscapes with N = 18 and varied values of K (K ∈
{2,4,6,8,10,12,14,16,17}.N = 18 represents the largest size for which an exhaus-
tive sample of the conﬁguration space was computationally feasible in our imple-
mentation. Metrics are generally calculated as averages of 30 independent instances
for each K value.

9
Local Optima Networks
249
9.5.1.1
Basins of Attraction
We start by analyzing the structure of the basins of attraction, namely, their size,
shape and ﬁtness of the corresponding local optima. These features are independent
of the network edge deﬁnition. They are, however, relevant as the time complexity
of local search heuristics is known to be linked to the size and spreading of attraction
basins [16].
The distribution of basin sizes for given N and K values is not uniform; instead
it follows a right-skewed distribution with a faster-than-exponential decay (see Fig-
ure 9.4, left, with semi-logarithmic scale). With increasing ruggedness (K values),
the distribution shifts to the left and decays faster. This suggest that as the land-
scape ruggedness increases, the basin sizes decrease. In particular, with increasing
ruggedness, the decrease of the relative size of global optimum basin is approxi-
mately exponential (Figure 9.4, Right).
0.0
0.2
0.4
0.6
0.8
1.0
cumulative distribution  P(b>B)
10
100
1000
10000
100000
size of basin B
K=2
K=4
K=6
K=10
K=17
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0.0001
0.0005
0.0010
0.0050
0.0100
0.0500
0.1000
0.5000
Normalized global optimum basin size
2
4
6
8
10
12
14
16
18
K
Fig. 9.4 Size of the basins of attraction for NK Landscapes. Left: cumulative distribution of
basin sizes for landscapes with N = 18, and selected values of K. Right: average normalized
size of the basin of the global optimum. Averages (points) and standard deviation (bars) refer
to 30 instances for each K value.
With respect to the ﬁtness of local optima and the size of their basins, a strong
positive correlation was observed. Surprisingly, the average Spearman correlation
coefﬁcient is above 0.8 for all K values. Figure 9.5 (left) provides an example for
N = 18, K = 8. This is an encouraging feature suggesting that local optima with
high ﬁtness should be easier to locate by hill-climbing. NK landscapes can thus
be imagined as mountain ranges where wider mountain basins belong to higher
peaks. But intuitions can be misleading, a striking ﬁnding is that these mountains
are hollow; for all the observed instances, the average size of the basin interior is
always less than 1% of the size of the basin itself. In other words, most solutions sit
on the basin frontier and neighboring basins are richly interconnected [41].
9.5.1.2
General Network Features
Table 9.2 reports some general features for the two network models: basin-transition
edges and escape edges (with distances (D = {1,2}); speciﬁcally, the number of

250
G. Ochoa et al.
 1
 10
 100
 1000
 10000
 0.5
 0.55
 0.6
 0.65
 0.7
 0.75
 0.8
basin of attraction size
fitness of local optima
exp.
regr. line
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0.5
0.6
0.7
0.8
0.9
1.0
Spearman correlation coefficient
2
4
6
8
10
12
14
16
18
K
●
Basins
Esc.D1
Esc.D2
Fig. 9.5 Fitness correlations for NK landscapes. Left: Basin size and the ﬁtness of its cor-
responding optima for a representative instance with N = 18,K = 8. Right: ﬁtness of an
optimum and its strength, i.e. the sum of the weights of its incoming transitions. Averages
(points) and 0.95 conﬁdence intervals (bars) are estimated by a t-test over 30 instances.
Table 9.2 General network features for NK landscapes. K = epistasis value of the cor-
responding NK landscape (N = 18); Nv = number of vertices; Dedge = density of edges
(Ne/(Nv)2 ×100%); Lopt = average shortest path to reach the global optimum (di j = 1/wi j).
Values are averages over 30 random instances, standard deviations are shown as subscripts.
K
Nv
Dedge (%)
Lopt
all
Basin-trans.
Esc.D1
Esc.D2
Basin-trans. Esc.D1
Esc.D2
2
43.027.7
74.18213.128 8.2984.716 22.7509.301
21.28.0
16.84.7
33.514.1
4
220.639.1
54.0614.413 1.4630.231 7.0660.810
41.710.5
19.25.1
53.712.4
6
748.470.2
26.3431.963 0.4690.047 3.4660.279
80.019.1
22.23.9
66.712.9
8
1668.873.5
12.7090.512 0.2280.009 2.2010.066
110.113.8
24.04.9
76.69.1
10 3147.6109.9
6.2690.244 0.1320.004 1.5310.036
152.819.3
27.35.0
90.78.4
12 5270.3103.9
3.2400.079 0.0880.001 1.1150.015
185.123.8
30.36.7 108.312.3
14 8099.6121.1
1.7740.035 0.0640.001 0.8380.009
200.216.0
38.99.6 124.78.6
16 11688.1101.3
1.0300.013 0.0510.000 0.6470.004
211.815.0
47.911.4 146.211.2
17 13801.074.1
0.8010.007 0.0470.000 0.5740.002
214.317.5
55.712.5 155.912.2
nodes (which is independent of the edges model), the relative number or density
of edges, and the average path length to the global optimum, where the distance
between two nodes i and j is given by 1/wij.
The number of local optima (Table 9.2, 2nd column) rapidly increases with the
value of K (1st column). Escape edges produce much less dense networks (3rd,
4th, and 5th columns), which conﬁrms the visual inspection of Figures 9.2 and 9.3.
For all the models, the density of edges decreases, whereas the path length to the
global optimum (6th,7th, and 8th columns) increases with increasing values of K.
Since a low density of edges and a long path length to the optimum would hinder
heuristic search, these observations conﬁrm that the network metrics capture the
search difﬁculty associated with increasing landscape ruggedness. These ﬁndings

9
Local Optima Networks
251
also suggest that the two models of edges are consistent, which is encouraging as
calculating the escape-edges is less computationally expensive.
A study of the network’s local connectivity shows differences between the two
edge models. As Figure 9.6 (left) shows, the basin-transition edges produce net-
works with higher out degree (i.e. number of transitions leaving a node). Clustering
coefﬁcients are also higher in this case (they are indeed higher than those of a ran-
dom graph), which is probably due to the higher density of basin-transition edges
(Figure 9.6, right). There is, however, a common decreasing trend for all models in
this metric with increasing K, as seen in Figure 9.6, right. The varying difference
between the two models might lie in the size of the basins of attraction. For low K
values, large basins produce high edge density and thus high clustering coefﬁcients
in the basin-transition model; whereas for large values of K, basins are so small
that the two models show a similar structure. The escape-edges reproduce the basin
topology.
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0
50
100
150
200
average out−degree
2
4
6
8
10
12
14
16
18
K
●
Basins
Esc.D1
Esc.D2
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0.2
0.4
0.6
0.8
1.0
average clustering coefficient
2
4
6
8
10
12
14
16
18
K
●
Basins
Esc.D1
Esc.D2
Fig. 9.6 Local connectivity for NK landscapes. Left: Average out-degree. Right: Average
clustering coefﬁcient. Averages (points) and 0.95 conﬁdence intervals (bars) are estimated by
a t-test over 30 random instances with N = 18.
9.5.1.3
Transitions among Local Optima
Edges weights wij can be interpreted as the expected number of moves it takes to
go from basin bi to basin b j (or from local optimum i to basin b j in the escape-edge
model). For both edge models, the weights of self-loops (wii) are an order of magni-
tude higher than wij,j̸=i. Therefore, it is more probable for a random move to remain
in the same basin than to escape from it. Self-loop probabilities are then corre-
lated with basin sizes, and display a similar exponential decrease with the landscape
ruggedness K. We analyze, therefore, in more detail the weights wij,j̸=i. Figure 9.7
(left) shows the cumulative distribution of basin-transition weights for wij,j̸=i for se-
lected values of K. The curves illustrate that low K values have longer tails, whereas
mid and high K values produce a faster decay. Figure 9.7 (right), shows the aver-
age weight out-going transition for all edge models and K values. For the escape-
edges model, the out-going weights decrease smoothly, with a slower decrease for
D = 1. The trend is different for basin-transition edges where the out-going weights

252
G. Ochoa et al.
 0.1
 1
 0.001
 0.01
 0.1
P(wij>W)
W
K=2
K=4
K=10
K=14
K=17
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0.005
0.010
0.020
0.050
0.100
0.200
0.500
average weight of out−going transitions
2
4
6
8
10
12
14
16
18
K
●
Basins
Esc.D1
Esc.D2
Fig. 9.7 Network transitions for NK landscapes. Left: Cumulative probability distribution
of the network weights wi j, j̸=i with basin-transition edges, N = 18, and selected K values.
Right: Average out-going wi j values for all edge models and K values. Averages (points) and
0.95 conﬁdence intervals (bars) are estimated by a t-test over 30 landscapes with N = 18.
0.005
0.010
0.020
0.050
0.100
0.200
average disparity Y2
1
5
10
50
500
out−degree
K=2
K=4
K=10
K=17
random
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
0.001
0.005
0.010
0.050
0.100
0.500
1.000
average disparity Y2
2
4
6
8
10
12
14
16
18
K
●
Basins
Esc.D1
Esc.D2
random
Fig. 9.8 Weight disparity for outgoing edges in NK landscapes. Left: relationship between
disparity and out-degree for the basin-transition edges, and selected values of K. Right:
relationship between disparity and landscape ruggedness (K) for the two network models.
Averages and conﬁdence intervals are estimated on the 30 analyzed instances. Dotted lines
(labeled as random) present the limit case Y2 = 1/k, where k is the node out-going degree.
decrease with increasing ruggedness but only up to K = 6, and then they increase in
value.
A relevant question is whether there are preferential directions when leaving a
particular node in the network. Speciﬁcally, whether for a given optimum i, all the
outgoing weights wij,j̸=i, are equivalent. This can be revealed by the disparity Y2
metric (discussed in Section 9.2.4), which gauges the heterogeneity of the contri-
butions of the edges of node i to its total strength si. If a dominant weight does not
exist, the value Y2 ≈1/k, were k is the node out-degree. Figure 9.8 (left) illustrates
the relationship between disparity and out-degree for basin-transition edges and se-
lected K values. The ﬁgure also shows the limit case Y2 ≈1/k (labeled as random).
For calculating this plot, the nodes’ disparity values Y2(i) were grouped and aver-
aged by node out-degree. The curves suggest that there are preferential directions
for low values of K. However, with increasing K, the transition probabilities to leave

9
Local Optima Networks
253
a given basin appear to become more uniform (i.e closer to the limit case Y2 = 1/k).
Figure 9.8 (right) shows the disparity metric for all models and K values. In all cases,
disparity values are higher than those expected in the limit case (Y2 ≈1/k, labeled as
random), indicating that preferential transitions are present. For the basin-transition
edges and the escape edges wit D = 2, disparity values get closer to the limit case
of large K values.
9.5.1.4
Search Difﬁculty and Network Metrics
While the previous sections described relevant network features, this section ex-
plores correlations between these features and the performance of local search
heuristics running on the underlying combinatorial optimization problem. The ulti-
mate goal is to have predictive models of the performance of speciﬁc search heuris-
tics when solving a given problem instance, and thus select a method according to
this predication.
Daolio et al. [11], conducted a ﬁrst study using iterated local search and the
NK family of landscapes (with escape edges, D = 2). Iterated local search is a rela-
tively simple but powerful single point heuristic. It alternates between a perturbation
stage and an improvement stage. This search principle has been rediscovered multi-
ple times, within different research communities and with different names [5]. The
term iterated local search (ILS) was proposed in [26]. Algorithm 5 outlines the
procedure.
Algorithm 5. Iterated Local Search
s0 ←GenerateInitialSolution
s∗←LocalSearch(s0)
repeat
s′ ←Perturbation(s∗)
s′∗←LocalSearch(s
′)
s∗←AcceptanceCriterion(s∗,s′∗)
until termination condition met
In our implementation, the LocalSearch stage corresponds to the best-improve-
ment hill-climber described in Section 9.4 (Algorithm 4), which stops when reach-
ing a local optimum, and uses the single bit-ﬂip move operator. The Perturbation
stage considers a stronger operator,i.e. 2-bit-ﬂip mutation. A simple greedy accep-
tance is used (i.e. only improvement moves are accepted). The search terminates
at the global optimum, which for benchmark problems is known a priori, or when
reaching a pre-set limit of ﬁtness evaluations FEmax.
As the performance criterion, we selected the expected number of function eval-
uations to reach the global optimum (success) after independent restarts. This mea-
sure accounts for both the success rate (ps ∈(0,1]) and the convergence speed [1].
The function evaluations limit was set to 1/5 of the size of the search space, i.e.
FEmax ≃5.2·104, for binary strings of length N = 18. The success rate ps and run-
ning time of successful runs Ts were estimated on 500 random restarts per instance.

254
G. Ochoa et al.
Figure 9.9 (left), shows the distribution of the expected iterated local search (ILS,
Algorithm 5) running times to success with respect to K. As expected, the running
times increase steadily with increasing K. As an example of the correlations arising
between LON features and the performance of ILS, the right plot in Figure. 9.9,
illustrates the relationship between the running time and the shortest path length to
the global optimum. A strong positive correlation is observed, suggesting that LON
features are able to capture search difﬁculty in combinatorial landscapes. Other net-
work metrics also revealed positive correlations with search performance, namely,
the average out-degree, the average disparity, and the degree of assortativity [11]. A
multiple regression analysis was also conducted using the most signiﬁcant network
metrics. The model obtained was able to predict about 85% of the variance observed
in the expected running times
●
●
●
●
●
●
●
2
4
6
8
10
12
14
16
17
6
8
10
12
14
16
log expected time to success
K
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
6
8
10
12
14
16
log expected time to success
50
100
150
average distance to the global optimum
R2=0.766
r=0.875***
Fig. 9.9 Performance of ILS on NK landscapes. Left: distribution of the expected running
times to success for different K values. Right: correlation between the expected running
times and the average shortest path to the global optimum. The regression line is dashed. The
legend gives the ratio of variance explained by the regression, R2, and the Pearson correlation
coefﬁcient, r, with the asterisks indicating its signiﬁcance level.
9.5.2
The Quadratic Assignment Problem
This section summarises the main results for the QAP. In this case, only the basin-
transition edges are considered. The study of escape-edges will be the subject of
future work. An analysis of the LON communities structure is also presented. This
was not done for the NK landscape as our analysis revealed little cluster structure of
local optima in these more random landscapes. Their search spaces seem isotropic
from the point of view of basin inter-connectivity. An initial study correlating QAP
local optima network metrics with heuristic search performance is reported else-
where [7].
Two QAP instance classes were considered: real-like and uniform instances as
described in Section 9.3.2. For the general network analysis, 30 random uniform
and 30 random real-like instances have been generated for each problem dimension
in {5,...,10}, and metrics are given as averages of these 30 independent instances.
To the speciﬁc purpose of community detection, 200 additional instances have been
produced and analyzed with size 9 for the random uniform class, and size 11 for

9
Local Optima Networks
255
the real-like instances class. Problem size 11 is the largest permitting an exhaustive
sample of the conﬁguration space. Only the basin-transition edges are studied. The
escape-edges will be the subject of future work.
9.5.2.1
Basins of Attraction
Figure 9.10 (left) shows the size of the global optimum basin of attraction (normal-
ized by the whole search space size). This value decreases exponentially with the
problem size for both instance classes. The real-like instances have larger global
optimum basins, which can be explained by their smaller local optima networks (as
discussed below). The relative size of the global optimum basin is related to the
probability of ﬁnding the best solution with a local search algorithm from a random
starting point. The exponential decrease conﬁrms that the larger the problem, the
smaller the probability for a local search algorithm to locate the global optimum.
The separation between the curves in Figure 9.10 (left) is consistent with recent
empirical results indicating that real-like instances are easier to solve than uniform
instances for heuristic search algorithms such as simulated annealing and genetic
algorithms [7].
Figure 9.10 (right), shows the correlation between the ﬁtness value of a local
optimum and the size of its basin of attraction. As with the NK landscape, there is a
strong positive correlation between the ﬁtness of a local optimum and the size of its
basin. This is an encouraging feature suggesting that local optima with high ﬁtness
should be easier to locate by stochastic local search. The correlation coefﬁcients
are generally higher for the uniform instances, which also show noticeably lower
variance. More details about QAP basins of attraction and network features can be
found in [10].
0.05
0.10
0.20
0.50
1.00
relative size of the global optimum basin
5
6
7
8
9
10
problem dimension
●
●
●
●
●
●
●
real−like
uniform
0.5
0.6
0.7
0.8
0.9
1.0
Pearson correlation coefficient
5
6
7
8
9
10
problem dimension
●
●
●
●
●
●
●
real−like
uniform
Fig. 9.10 Basins of attraction in QAP instances. Left: Normalized size of the basin of the
global optimum. Right: Pearson correlation coefﬁcient between the ﬁtness value of an opti-
mum and the logarithmic size of its basin. Averages (points) and 0.95 conﬁdence intervals
(bars) are estimated with a t-test over 30 instances for each combination of problem class and
size.

256
G. Ochoa et al.
9.5.2.2
General Network Features
Table 9.3 reports relevant features for the two classes of QAP instances and problem
sizes from 5 to 10; speciﬁcally, the number of vertices (Nv), the density of edges
(Dedge = Ne/(Nv)2), the weighted clustering coefﬁcient (Cw) and the disparity in
out-going transitions (Y2). The number of local optima grows exponentially with
the problem dimension for both instance classes. For a given problem size, how-
ever, real-like instances produce much smaller networks, i.e. they have signiﬁcantly
fewer local optima. The size difference between the two instance classes also grows
almost exponentially with the problem dimension. This is again consistent with the
empirical studies indicating that real-like instances are easier to solve by common
metaheuristics [7].
The QAP networks are notably dense, with density of edges close to one (Ta-
ble 9.3, Dedge), much more dense than than those of the NK landscapes which op-
erate on binary spaces. This is not surprising as the neighborhood size is larger for
permutation search spaces (see Table 9.1). Local optima networks are almost com-
plete graphs for QAP. Moreover, the average weighted clustering coefﬁcient Cw is
higher than what would be expected from network density alone, indicating that
the interconnected triples are more likely formed by edges with larger weight. The
studied QAP instances show very high local connectivity. The clustering coefﬁcient
decreases with the problem dimension and is higher for real-like instances.
The last row in Table 9.3 reports the disparity coefﬁcient in out-going transitions
for both classes with respect to the problem dimension. High diversity indicates
preferential transitions. The decreasing trend reﬂects that, with increasing problem
size, the out-going transition to neighbouring optima tend to become equally prob-
able. This trend is more evident for uniform instances whose LONs have higher
cardinality.
Table 9.3 General network features for QAP instances. Nv = number of vertices; Dedge =
density of edges (Ne/(Nv)2); Cw = weighted clustering coefﬁcient; Y2 = disparity in out-going
transitions. Values are averages over 30 instances with standard deviations in subscripts.
class
size
5
6
7
8
9
10
Nv
real-like
1.6670.802
2.7671.48
3.9002.25
6.1332.99
12.5675.73
25.70013.8
uniform
3.3331.27
6.8002.37 19.1007.39 51.30020.53 137.30054.84 414.133177.5
Dedge real-like 1.0000.000 0.9930.026 0.9940.030
0.9990.006
0.9920.025
0.9880.035
uniform 0.9980.007 0.9930.019 0.9690.030
0.9400.036
0.9090.035
0.8740.053
Cw
real-like 1.0000.000 0.9880.032 0.9950.024
0.9990.005
0.9950.015
0.9930.020
uniform 0.9980.008 0.9950.014 0.9820.016
0.9700.017
0.9610.015
0.9520.020
Y2
real-like 0.8880.193 0.7390.251 0.5330.270
0.3690.171
0.2210.118
0.1430.058
uniform 0.6490.271 0.2860.093 0.1360.061
0.0740.048
0.0400.013
0.0230.008

9
Local Optima Networks
257
9.5.2.3
Path Lengths
Figure 9.11 (left) displays the average shortest path length between optima and the
average shortest path length to the global optimum. Both metrics clearly increase
with problem size. Values are noticeably higher for the uniform instances, which
have a larger number of local optima than the real-like instances for the same prob-
lem dimension. The ﬁgures support that the search difﬁculty increases with the prob-
lem size and the number of local optima.
0
10
20
30
40
50
60
average path length
5
6
7
8
9
10
problem dimension
●
●
●
●
●
●
●
real−like
uniform
0
10
20
30
40
50
average distance to global optimum
5
6
7
8
9
10
problem dimension
●
●
●
●
●
●
●
real−like
uniform
Fig. 9.11 Shortest paths in QAP instances. Left: average path length. Right: average length
of the shortest paths to the global optimum. Averages (points) and 0.95 conﬁdence intervals
(bars) are estimated with a t-test over 30 instances for each combination of problem class and
size.
9.5.2.4
Clustering of Local Optima
The manner in which local optima are distributed in the conﬁguration space is rel-
evant for heuristic search. Several questions can be raised. Are they uniformly dis-
tributed, or do they cluster in some non-homogeneous way? If the latter, what is the
relation between objective function values within and among different clusters and
how easy is it to go from one to another? As discussed in Section 9.2.5, clusters or
communities in networks are groups of nodes that are strongly connected between
them and poorly connected with the rest of the graph. The topological distribution
of local optima can be directly investigated by means of community detection on
the local optima network. In [9], we conducted a community detection study on the
two classes of QAP instances. Problems of size of 11 for the real-like class and 9
for the uniform class were considered as LONs for these two cases have comparable
sizes in terms of number of vertices.
Community detection is a difﬁcult task, but today several good approximate algo-
rithms are available [15]. In [9], we used two of them: (i) a method based on greedy
modularity optimization, and (ii) a spin glass ground state-based algorithm in order

258
G. Ochoa et al.
to double check the community partition results. Figure 9.12 shows the modularity
score (Q) distribution for each algorithm/instance-class. The higher the Q score of
a partition, the crisper the community structure [15]. The plot indicates that the two
instance classes are well separated in terms of Q, regardless of the algorithm used.
rl.1
uni.1
rl.2
uni.2
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
Modularity Q
Fig. 9.12 Network modularity for QAP instances. Boxplots of the modularity score Q on the
y-axis with respect to class problem (rl stands for real-like and uni stands for random uniform)
and community detection algorithm (1 stands for fast greedy modularity optimization and 2
stands for spin glass search algorithm)
The real-like instances have signiﬁcantly more cluster structure than the uniform
instances. This can be appreciated visually in Figure 9.13 illustrating the community
structures of two particular instances. These two selected cases have the highest Q
values of their respective classes, but they represent a general trend. For the real-
like instance (Figure 9.13, right) the groups of local optima are recognizable and
form well separated clusters (encircled with dotted lines), which is also reﬂected
in the high corresponding modularity value Q = 0.79. In contrast, the LON of the
uniform instance (Figure 9.13, left) has some modularity, with a Q = 0.53, but the
communities are hard to represent graphically, and thus are not shown in the picture.
The LONs community structure is likely to have consequences on the heuristic
algorithms used to search the corresponding landscapes. According to the level of
modularity, different search strategies would be more efﬁcient. For example, we can
envision that for real-like instances, a local search algorithm may require stronger
perturbation mechanisms to escape a cluster of local optima with poor quality
solutions.

9
Local Optima Networks
259
Fig. 9.13 Visualization of network communities in QAP instances. Left: a uniform instance
of size 9. Right: a real-like instance of size. Node size is proportional to basin size, and
node color to ﬁtness (the darker, the better). Communities are highlighted in the right picture,
which was not possible in the left one.
9.6
Conclusions
A network-based model of combinatorial landscapes is described and a thorough
analysis is presented for two example combinatorial landscapes: NK landscapes
and the quadratic assignment problem. A network model requires deﬁning its nodes
and edges. Nodes are the landscape local optima obtained with a best-improvement
hill-climbing algorithm; edges are deﬁned in two alternative ways: one is based
on the transition probabilities between basins of attraction, the other on the tran-
sition (escape) probabilities from local optima. The model, therefore, compresses
the ﬁtness landscapes into a more manageable mathematical object. New features
can be measured in this model, coming from the science of complex networks such
as the degree distribution, clustering coefﬁcient, shortest path length, disparity and
community structure. Results from the studied landscapes show that local optima
networks share some features with complex networks: basin sizes are not uniformly
distributed, weight distributions are not normal, path lengths to the global optimum
can be short, clustering coefﬁcients can be high, and networks can have community
structure.
The results clearly show that the search difﬁculty on the studied landscapes,
which may be either known a priori or empirically estimated, correlate with some
fundamental LON features such as the number of nodes, size of basins, shortest
path length to the global optimum, out-degree, disparity, and degree of assortativ-
ity. Indeed, some of these metrics were used successfully to construct a statistical
predictive model of search performance. The network analysis also revealed inter-
esting topological differences on the distribution of local optima for different classes
of problem instances. These differences may lead to designing search heuristics that
can adapt and thus exploit the landscape structure.

260
G. Ochoa et al.
Local optima networks can be seen as a generic model of combinatorial land-
scapes based on deﬁning convergencepoints of simple heuristics in the search space.
In this work, the convergence points are local optima, and edges are transition prob-
abilities between these points which also reﬂect the path of a local search. From
a mathematical point of view, LONs reduce the study of the whole transition ma-
trix between solutions of a local search by a smaller transition matrix between local
optima. The search dynamic is then decomposed into two time scales: one to reach
local optima, the other to traverse between local optima. From LON graphs and their
corresponding transition matrices, it should be possible to conduct a Markov chain
analysis and thus compute running times or expected performance.
Another research direction is to use LONs for automated parameter tuning and
design of heuristic search methods. Some network metrics can be estimated with-
out knowing the global optimum beforehand. These metrics coupled with adequate
performance prediction models open up exciting possibilities. Our current analysis
requires the exhaustive enumeration of the search space; with standard sampling
methods, larger search spaces could be studied. We plan to continue working on the
afore mentioned directions and extend this analysis to other combinatorial optimiza-
tion problems.
References
[1] Auger, A., Hansen, N.: Performance evaluation of an advanced local search evolution-
ary algorithm. In: Corne, D. (ed.) Proceedings of the IEEE Congress on Evolutionary
Computation, CEC 2005, vol. 2, pp. 1777–1784. IEEE (2005)
[2] Barabasi, A.-L., Albert, R.: Emergence of scaling in random networks. Science 286,
509–512 (1999)
[3] Barnett, L.: Ruggedness and neutrality - the NKp family of ﬁtness landscapes. In:
Adami, C., Belew, R.K., Kitano, H., Taylor, C. (eds.) Proceedings of the Sixth Inter-
national Conference on Artiﬁcial Life, ALIFE VI, pp. 18–27. MIT Press (1998)
[4] Barth´elemy, M., Barrat, A., Pastor-Satorras, R., Vespignani, A.: Characterization and
modeling of weighted networks. Physica A 346, 34–43 (2005)
[5] Battiti, R., Brunato, M., Mascia, F.: Reactive Search and Intelligent Optimization. Op-
erations Research/Computer Science Interfaces Series, vol. 45. Springer (2009)
[6] Boese, K.D., Kahng, A.B., Muddu, S.: A new adaptive multi-start technique for combi-
natorial global optimizations. Operations Research Letters 16, 101–113 (1994)
[7] Chicano, F., Daolio, F., Ochoa, G., V´erel, S., Tomassini, M., Alba, E.: Local optima net-
works, landscape autocorrelation and heuristic search performance. In: Coello Coello,
C.A., Cutello, V., Deb, K., Forrest, S., Nicosia, G., Pavone, M. (eds.) PPSN 2012, Part
II. LNCS, vol. 7492, pp. 337–347. Springer, Heidelberg (2012)
[8] Clauset, A., Shalizi, C., Newman, M.: Power-law distributions in empirical data. SIAM
Review 51(4), 661–703 (2009)
[9] Daolio, F., Tomassini, M., Verel, S., Ochoa, G.: Communities of minima in local op-
tima networks of combinatorial spaces. Physica A: Statistical Mechanics and its Appli-
cations 390(9), 1684–1694 (2011)

9
Local Optima Networks
261
[10] Daolio, F., Verel, S., Ochoa, G., Tomassini, M.: Local optima networks of the quadratic
assignment problem. In: Fogel, G., et al. (eds.) Proceedings of the IEEE Congress on
Evolutionary Computation, CEC 2010, pp. 1–8. IEEE Press (2010)
[11] Daolio, F., Verel, S., Ochoa, G., Tomassini, M.: Local optima networks and the per-
formance of iterated local search. In: Soule, T., Moore, J.H. (eds.) Proceedings of the
Genetic and Evolutionary Computation Conference, GECCO 2012, pp. 369–376. ACM
(2012)
[12] Dorogotsev, S.N.: Lectures on Complex Networks. Oxford University Press, Oxford
(2010)
[13] Doye, J.P.K.: The network topology of a potential energy landscape: a static scale-free
network. Physical Review Letter 88, 238701 (2002)
[14] Doye, J.P.K., Massen, C.P.: Characterizing the network topology of the energy land-
scapes of atomic clusters. Journal of Chemical Physics 122, 84105 (2005)
[15] Fortunato, S.: Community detection in graphs. Physics Reports 486, 75–174 (2010)
[16] Garnier, J., Kallel, L.: Efﬁciency of local search with multiple local optima. SIAM
Journal on Discrete Mathematics 15(1), 122–141 (2001)
[17] Gfeller, D., De Los Rios, P., Caﬂisch, A., Rao, F.: Complex network analysis of free-
energy landscapes. Proc. Nat. Acad. Sci. USA 104(6), 1817–1822 (2007)
[18] Hains, D., Whitley, L.D., Howe, A.E.: Revisiting the big valley search space structure
in the TSP. Journal of the Operational Research Society 62(2), 305–312 (2011)
[19] Jones, T.: Evolutionary Algorithms, Fitness Landscapes and Search. PhD thesis, Uni-
versity of New Mexico, Albuquerque (1995)
[20] Kauffman, S., Levin, S.: Towards a general theory of adaptive walks on rugged land-
scapes. Journal of Theoretical Biology 128, 11–45 (1987)
[21] Kauffman, S.A.: The Origins of Order. Oxford University Press, New York (1993)
[22] Kaul, H., Jacobson, S.H.: New global optima results for the Kauffman NK model: han-
dling dependency. Mathematical Programming, Ser. B 108(2-3), 475–494 (2006)
[23] Knowles, J.D., Corne, D.W.: Instance generators and test suites for the multiobjec-
tive quadratic assignment problem. In: Fonseca, C.M., Fleming, P.J., Zitzler, E., Deb,
K., Thiele, L. (eds.) EMO 2003. LNCS, vol. 2632, pp. 295–310. Springer, Heidelberg
(2003)
[24] Koopmans, T.C., Beckmann, M.: Assignment problems and the location of economic
activities. Econometrica 25(1), 53–76 (1957)
[25] Limic, V., Pemantle, R.: More rigorous results on the Kauffman-Levin model of evolu-
tion. Annals of Probability 32, 2149 (2004)
[26] Lourenc¸o, H.R., Martin, O., St¨utzle, T.: Iterated local search. In: Glover, F., Kochen-
berger, G.A. (eds.) International Series in Operations Research & Management Science,
vol. 57, pp. 321–353. Kluwer Academic Publishers (2002)
[27] Massen, C.P., Doye, J.P.K.: Identifying communities within energy landscapes. Physical
Review E 71, 046101 (2005)
[28] Merz, P., Freisleben, B.: Memetic algorithms and the ﬁtness landscape of the graph bi-
partitioning problem. In: Eiben, A.E., B¨ack, T., Schoenauer, M., Schwefel, H.-P. (eds.)
PPSN V 1998. LNCS, vol. 1498, pp. 765–774. Springer, Heidelberg (1998)
[29] Newman, M., Engelhardt, R.: Effect of neutral selection on the evolution of molecular
species. Proc. Royal Society London B 256, 1333–1338 (1998)
[30] Newman, M.E.J.: The structure and function of complex networks. SIAM Review 45,
167–256 (2003)
[31] Newman, M.E.J.: Networks: An Introduction. Oxford University Press, Oxford (2010)

262
G. Ochoa et al.
[32] Ochoa, G., Tomassini, M., Verel, S., Darabos, C.: A study of NK landscapes’ basins and
local optima networks. In: Ryan, C., Keijzer, M. (eds.) Proceedings of the Genetic and
Evolutionary Computation Conference, GECCO 2008, pp. 555–562. ACM (2008)
[33] Ochoa, G., Verel, S., Tomassini, M.: First-improvement vs. best-improvement local op-
tima networks of nk landscapes. In: Schaefer, R., Cotta, C., Kołodziej, J., Rudolph, G.
(eds.) PPSN XI, Part I. LNCS, vol. 6238, pp. 104–113. Springer, Heidelberg (2010)
[34] Rao, F., Caﬂisch, A.: The network topology of a potential energy landscape: a static
scale-free network. Journal of Molecular Biology 342, 299–306 (2004)
[35] Reeves, C.R.: Landscapes, operators and heuristic search. Annals of Operations Re-
search 86, 473–490 (1999)
[36] Reidys, C.M., Stadler, P.F.: Combinatorial landscapes. SIAM Review 44(1), 3–54
(2002)
[37] Ros´e, H., Ebeling, W., Asselmeyer, T.: The density of states - a measure of the difﬁculty
of optimisation problems. In: Ebeling, W., Rechenberg, I., Voigt, H.-M., Schwefel, H.-P.
(eds.) PPSN IV 1996. LNCS, vol. 1141, pp. 208–217. Springer, Heidelberg (1996)
[38] Sahni, S., Gonzalez, T.: P-complete approximation problems. Journal of the ACM
(JACM) 23(3), 555–565 (1976)
[39] Stillinger, F.H.: A topographic view of supercooled liquids and glass formation. Sci-
ence 267, 1935–1939 (1995)
[40] Taillard, ´E.D.: Comparison of iterative searches for the quadratic assignment problem.
Location Science 3(2), 87–105 (1995)
[41] Tomassini, M., Verel, S., Ochoa, G.: Complex-network analysis of combinatorial
spaces: The NK landscape case. Physical Review E 78(6), 066114 (2008)
[42] Vanneschi, L., Tomassini, M., Collard, P., V´erel, S.: Negative slope coefﬁcient a mea-
sure to characterize genetic programming ﬁtness landscapes. In: Collet, P., Tomassini,
M., Ebner, M., Gustafson, S., Ek´art, A. (eds.) EuroGP 2006. LNCS, vol. 3905, pp. 178–
189. Springer, Heidelberg (2006)
[43] V´erel, S., Daolio, F., Ochoa, G., Tomassini, M.: Local optima networks with escape
edges. In: Hao, J.-K., Legrand, P., Collet, P., Monmarch´e, N., Lutton, E., Schoenauer,
M. (eds.) EA 2011. LNCS, vol. 7401, pp. 49–60. Springer, Heidelberg (2012)
[44] Verel, S., Ochoa, G., Tomassini, M.: The connectivity of NK landscapes’ basins: a net-
work analysis. In: Bullock, S., et al. (eds.) Proceedings of the Eleventh International
Conference on Artiﬁcial Life, ALIFE XI, pp. 648–655. MIT Press, Cambridge (2008)
[45] Verel, S., Ochoa, G., Tomassini, M.: Local optima networks of NK landscapes with
neutrality. IEEE Transactions on Evolutionary Computation 15(6), 783–797 (2011)
[46] Watts, D.J., Strogatz, S.H.: Collective dynamics of ‘small-world’ networks. Nature 393,
440–442 (1998)
[47] Weinberger, E.D.: Correlated and uncorrelated ﬁtness landscapes and how to tell the
difference. Biological Cybernetics 63, 325–336 (1990)
[48] Weinberger, E.D.: Local properties of Kauffman’s NK model, a tuneably rugged energy
landscape. Phys. Rev. A 44, 6399–6413 (1991)
[49] Whitley, D., Hains, D., Howe, A.E.: A hybrid genetic algorithm for the traveling
salesman problem using generalized partition crossover. In: Schaefer, R., Cotta, C.,
Kołodziej, J., Rudolph, G. (eds.) PPSN XI. LNCS, vol. 6238, pp. 566–575. Springer,
Heidelberg (2010)
[50] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution.
In: Jones, D.F. (ed.) Proceedings of the Sixth International Congress on Genetics, vol. 1,
pp. 356–366 (1932)

Part III
Coevolution and Dynamics

Chapter 10
Fitness Landscapes That Depend on Time
Hendrik Richter
Abstract. Landscapes whose ﬁtness values change with time occur in several
contexts. A ﬁrst is that the evolutionary process takes place in a dynamic envi-
ronment. Dynamics may be connected to optimization problems with changing
objective functions, or generally that conditions apart from the genetic makeup of
the population, but massively inﬂuencing the evolutionary outcome, are not con-
stant. Mathematically, such dynamic ﬁtness landscapes can be described either by
static landscapes that are externally driven to change with time, or by spatially ex-
tended dynamical systems which internally and simultaneously deﬁne topology and
dynamics of the landscape. Another setting for time–dependent ﬁtness are coevolu-
tionary processes where the ﬁtness of a given individual depends on the ﬁtness and
the genotype of other individuals in a temporal or spatial fashion. This is known
to create coupled, interactive, tunable or deformable landscapes. Such coevolution-
ary processes induce time–dependence that is population–based and produce land-
scapes that are codynamic. In this chapter we intend to give an uniﬁed overview
about issues in and problems of time–dependent ﬁtness landscapes and particularly
highlight several types of mathematical descriptions and their properties, similarities
and differences.
10.1
Introduction
For understanding evolutionary dynamics, it is useful to have a notion of how the in-
dividuals’ movements are related to, are partly controlled by, partly directed to and
partly inﬂuenced by possible paths of increasing or decreasing ﬁtness. One way to
obtain such a notion is by ﬁtness landscapes. These landscapes are an inﬂuential and
important concept in evolutionary biology and evolutionary computation, and recent
Hendrik Richter
HTWK Leipzig University of Applied Sciences,
Faculty of Electrical Engineering and Information Technology, D–04251 Leipzig, Germany
e-mail: richter@eit.htwk-leipzig.de
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
265
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_10, c⃝Springer-Verlag Berlin Heidelberg 2014

266
H. Richter
advances in their understanding are the topic of this book. A conventional view on
ﬁtness landscapes is that the ﬁtness of a given point of the landscape is not changing
its value for the time frame of consideration. A time frame of consideration may be a
run of an evolutionary search algorithm, or an interval of evolutionary development
to be observed and studied, or an analysis of the ﬁtness landscape, for instance by a
random walk on the landscape. Thus, such kind of ﬁtness landscapes are essentially
a static concept. However, if looking at the biological reality on the one hand, or the
true nature of optimization problems on the other, we notice that the static view is a
signiﬁcant restriction in understanding interesting phenomena. In biology, there are
usually several species and several individuals. They can compete or cooperate with
the aim to maximize the share they are getting from limited resources. The outcome
of competition or cooperation (or mixing both in an overall strategy) deﬁnitely in-
ﬂuences survival and reproduction processes, and hence ﬁtness in a timely fashion.
Therefore, ﬁtness of a given phenotype is affected by the actions (and therefore by
the ﬁtness) of other phenotypes for any interesting time interval. Moreover, envi-
ronmental conditions are changing frequently and hence bringing timely changes to
the ﬁtness of a given phenotypic makeup. The same is true if we consider to solve
optimization problems using methods of evolutionary computation. Here the objec-
tive function of a multitude of real–world problems is frequently affected by timely
changes, for instance in dynamic vehicle [4, 73] and network [12, 13] routing, or
job scheduling [35].
In recent years we have seen various attempts to describe, model and understand
the phenomena connected to ﬁtness that changes over time [9, 33, 52, 74]. In evo-
lutionary computation this was particularly driven by attempts to design algorithms
that perform and behave well in such dynamic environments. In evolutionary bi-
ology a main interest is in understanding the role changing conditions play in the
overall evolutionary process and in particular what role environmental changes play
in survival and reproduction success [28, 39, 69]. This chapter deals with a land-
scape view on such changing ﬁtness. In particular, we will review in which contexts
dynamic ﬁtness landscapes occur, what mathematical descriptions are suitable to
be implemented in computable models for conducting numerical experiments, and
how the descriptions reﬂect properties of the underlying dynamic structure. In the
following we will focus on landscape approaches in evolutionary computation. This
means that the landscape’s conﬁguration space is a search space usually originating
from an optimization problem and that the landscape may be populated by individ-
uals of an evolutionary search algorithm. However, almost all the discussion applies
likewise to a more biological context, where the search space is replaced by a geno-
typic space that is inhabited by phenotypic realizations.
Dynamic landscape phenomena may occur in different contexts. A ﬁrst and most
obvious is that ﬁtness is directly dependent on time and space. This leads to solving
dynamic optimization problems and dynamic ﬁtness landscapes. We will call that
explicit time– or space–dependent and will distinguish between internal dynam-
ics that is proprietary to the mathematical description of the ﬁtness landscape and
external dynamics that is generated by a separate driving system and subsequently
imprinted on the landscape. Another context is that ﬁtness of one individual depends

10
Fitness Landscapes That Depend on Time
267
on the ﬁtness or the phenotype of others. This is the case for different types of coevo-
lutionary settings and creates coupled ﬁtness landscapes [34] (also sometimes called
interacting ﬁtness landscapes). If it happens within the frame of the time considered,
we also have a situation where ﬁtness is changing with time. This time–dependence
is implicit and will be called population–based dynamics. However, although there
is a substantial amount of work on coevolutionary phenomena, see for instance [49]
and references cited there, how this creates dynamics and how the dynamics affect
the evolutionary search is rarely addressed. One attempt to make the population–
based dynamics in coevolution explicit are deformable ﬁtness landscapes [17, 19].
In the following we aim at giving a uniﬁed view about ﬁtness landscapes whose ﬁt-
ness values change with time, and in particular to relate dynamic ﬁtness landscapes
to coupled and deformable ones.
In the next section, we will brieﬂy review the current understanding of dynam-
ics in evolutionary processes. This is followed by deﬁning and discussing dynamic
ﬁtness landscapes and dynamic optimization problems. Section 10.3 deals with co-
evolutionary processes. We recall the main ideas and issues of coevolutionary mod-
els and algorithms and show how coupled and deformable ﬁtness landscapes derive
from them. In particular, we draw connections between these landscapes and the
dynamic ﬁtness landscapes considered before. In the concluding section we provide
a broader view on ﬁtness landscapes that change with time and outline potential
directions of future research.
10.2
Dynamic Fitness Landscapes
10.2.1
Dynamics? What Dynamics?
It seems to be generally acknowledged that every timely change of any given quan-
tity is connected with dynamics. This is in agreement with the word’s origin from the
ancient Greek dynamis (δ ´υναμις), which can be translated as ‘ability’, ‘capacity’,
‘potentia’ or ‘power’ for doing or moving or changing something. However, there
is some confusion as to whether dynamics is the cause, the effect or the process of
changing. In addition, the nature of the changes may differ substantially from case
to case with the result that the changes may or may not affect what we consider in a
particular study. A deﬁning factor to answer this question is how the time frame of
what is considered relates to the time frame of the changes. The relations between
these time frames can be interpreted as to deﬁne a relative speed of the changes. If
the speed of the changes is below a certain threshold, it can be neglected as it does
not inﬂuence results and outcome. Moreover, sometimes even changes of relevant
speed may not be taken into account as they are (or can be considered as) spatially,
functionally or structurally separated from the object of study. This clearly applies
to studies in natural and artiﬁcial evolution. Here, it is frequently of interest what
severity the change has in terms of ﬁtness. However, if evolutionary speed is deﬁned
as the magnitude of the derivative of the evolutionary relevant quantity with respect
to time, severe changes are tantamount to high speed dynamics.

268
H. Richter
Two types of dynamics can be distinguished. A ﬁrst is evolutionary dynamics.
Evolutionary dynamics describes how individuals of an evolutionary search algo-
rithm move in the search space as generations go by [2, 23]. As each point in a
search space has a ﬁtness value, and this ﬁtness value can be seen as proprietary to
the individual, the movement can be pictured as to happen on the ﬁtness landscape’s
surface (also see Chapter 1 of this book). This view remains valid in a more evo-
lutionary biology point of view. Evolutionary dynamics here means the movements
of phenotypic realization through the genotypic space. Most important here is that
evolutionary dynamics is expressed and counted on a generational base. This is in
line with the genetic makeup of an individual being constant during its lifetime. In
this view adaption within the lifetime of the individual such as learning, phenotypic
adaption, plasticity and polymorphism is not directly taken into account. Of course,
such traits may tune the ﬁtness of the individual, but the ability to do so is clearly
ﬁxed in the phenotype. So, in the end only genetically inheritable traits form the
base of ﬁtness, which is considered to be a unique (and therefore constant) value
for the time interval of a generation. This allows the interpretation that ﬁtness of an
individual is a single value of ‘lifetime ﬁtness’, the calculation of which is subject
to all activities within the lifetime. Considering this, it should be clearly pointed out
that evolutionary dynamics as such takes place on a static ﬁtness landscape.
Next to evolutionary dynamics, another type of timely change is of interest here,
which we call environmental dynamics. Under environmental dynamics we sub-
sume changes outside the considered individual that have inﬂuence on its ﬁtness.
That might be abiotic changes such as shifts in climate or other physical attributes
of the living space, or biotic changes such as alterations in the food and/or prey
abundance, or predator and/or parasites existence, or interaction between species or
within them. Our interest is in evaluating the effect these environmental changes
have on the ﬁtness of individuals. In other words, we study how environmental dy-
namics relates to evolutionary dynamics. Therefore, it is sensible to relate the time
scale of the environmental changes to the generational time of evolutionary dynam-
ics. As ﬁtness of an individual is a single (constant) value for each generation, there
are two consequences. A ﬁrst is that changes that occur over the lifetime of an in-
dividual should be considered as to aggregate in their effects in order to result in
a lifetime ﬁtness; a second is that the effects of environmental changes should be
counted at discrete points of time. From these thoughts it also follows that the envi-
ronmental changes are the source for the dynamics in dynamic ﬁtness landscapes.
To summarize we deﬁne a ﬁtness landscape to be dynamic if (and only if) its
ﬁtness takes different values for the same search space point over the time frame
of consideration. In our understanding there are many different values over time
(meaning clearly more than one) and the changes are scattered over the time frame.
A most obvious example for that is a ﬁtness landscape that changes frequently over
the run–time of the evolutionary search algorithm. In a more biological context this
relates to substantial environmental dynamics while studying a long series of gener-
ational evolution of a single species. This is in contrast to situations where the ﬁtness
landscape might be subject to some parameters, which can be tuned or adapted for
each time frame of consideration. This is known as tuneable ﬁtness landscape and

10
Fitness Landscapes That Depend on Time
269
almost always means that ﬁtness values of the landscape are affected, that is tuned,
but only once and before the time frame of consideration. This is particularly rel-
evant in considering NK and NKC landscapes and will be discussed below. The
time frame of consideration may be an evolutionary run, or studying an interval of
an evolutionary development, or a random walk if we design a landscape analysis.
Mathematically, this understanding implies that the ﬁtness is a variable depending
on time, as opposed to ﬁtness as a parameter to be set before a (numerical) experi-
ment.
In evolutionary computation a ﬁtness landscape is often linked to an optimization
problem. We next extend this view to a dynamical setting. We ﬁrst look at a static
optimization problem. It consists of an objective function (frequently equated with
a ﬁtness function in evolutionary computation) f(x) deﬁned over some search space
S with x ∈S. We assume that the search space is metric, or that there are some other
arrangements about which search space points are next to each other. Optimization
means to ﬁnd the lowest (or highest) value of f(x) and its coordinates among all
x ∈S:
fS = max
x∈S
f(x),
(10.1)
with the location xS = arg fS.
The static optimization problem in Equation (10.1) can be thought of as becoming
dynamic by solving it not just once, but somehow modiﬁed for a second time. For a
modiﬁed ﬁtness function f ∗(x), we may write the modiﬁed problem as
f ∗
S = max
x∈S
f ∗(x).
(10.2)
To rewrite the two static problems in Equations (10.1) and (10.2) as one dynamic
problem, we introduce the time variable k ∈N0 (which is nothing other than a count-
ing variable) and deﬁne the dynamic ﬁtness function f(x,k), where
f(x,0) = f(x),
f(x,1) = f ∗(x).
We may carry on with doing so for the next modiﬁcation of f(x) to obtain f(x,2),
and so on. Hence, a dynamic optimization problem is
fS(k) = max
x∈S
f(x,k),
∀k ≥0
(10.3)
with the solution trajectory xS(k) = arg fS(k). To deﬁne a dynamic optimization
problem in the given way suggests that there might be more than one way to deﬁne
a dynamic problem out of a series of static problems, or that we may obtain differ-
ent dynamic problems out of modifying one and the same static problem. The dis-
cussion above may also imply that the modiﬁcations alter the problem only lightly.
However, even if the modiﬁed ﬁtness function f ∗(x) is fundamentally different from
the function f(x) it is still possible to deﬁne both problems such that the one dy-
namically originates from the other. However, such a point of view is rather futile
in terms of usefulness for evolutionary computation. As both problems here have

270
H. Richter
hardly any relations to each other, the solution of one of them gives no informa-
tion employable for evolutionary solving the other more efﬁciently. The best way to
solve them both by evolutionary means is to let the algorithm run independently for
both problems. In other words, to consider a sequence of problems to be dynamic
makes most likely more sense if the problems show some alikeness and relation to
each other. A main assumption here is that similar problems are best solved with
similar algorithms. Moreover, there should be a way to utilize these relations for
equipping the evolutionary search algorithm with favorable settings. These settings
might concern parameters (for instance general parameters such as population size
or diversity management parameters such as hyper–mutation rate or random im-
migrant proportion) or genetic operators (what kind of selection, recombination or
mutation) or collectible information for equipping triggered diversity management
schemes such as memory or anticipation/prediction.
10.2.2
Deﬁnition of Dynamic Fitness Landscapes
In the last section we have shown how a series of static problems can create a dy-
namic problem. In the same way we may regard a series of static ﬁtness landscapes
as a dynamic ﬁtness landscape. Next, we will formalize this approach. A static ﬁt-
ness landscape ΛS can be deﬁned by (see e.g. [24, 68])
ΛS = (S,n, f),
(10.4)
where S is the search space with elements x ∈S, n(x) is a neighborhood function
which orders for every x ∈S a set of direct and possibly also more distant neighbors
(and hence makes the space at least measurable, if not metric), and f(x) : S →R
is the ﬁtness function giving every search space element a ﬁtness value. The search
space is either the product of a genotype–to–phenotype–to–ﬁtness mapping or con-
structed from encoding and distancing the set of all possible solutions of an opti-
mization problem. Either way it is basically the representation that the evolutionary
algorithm uses (for instance binary, integer, real, tree etc.) and the design of the ge-
netic operators that deﬁnes the search space, and also its neighborhood structure.
This is in line with the general understanding that the concept of ﬁtness landscapes
is particularly useful for studying how the evolutionary search algorithm interrelates
with the ﬁtness function [24, 67, 71]. Moreover, as shown in [23], the neighborhood
structure of a ﬁtness landscape may vary with variation of the genetic operators.
Hence, an analysis of the ﬁtness landscape can be helpful for designing genetic op-
erators as it gives insight into which design is more likely than others to belong to the
landscape easiest searchable on average [71]. If the representation is ﬁxed, for in-
stance as real numbers, then the search space frequently has a metric and the neigh-
borhood structure is inherent. The exact design and the parameters of the genetic
operators, for instance the mutation strength, deﬁne which points can be reached on
average from a given starting point in the landscape within one generation.
The geometrical interpretation that is central to the intuitive understanding of ﬁt-
ness landscapes is particularly visible if S ⊆R2 (see Figure 10.1). The interpretation

10
Fitness Landscapes That Depend on Time
271
means that a search space in connection with a neighborhood structure forms a lo-
cation (and hence makes the space measurable) and that ﬁtness can be viewed as a
height over the location. In other words, ﬁtness is a property belonging to the search
space as the space’s orthogonal projection. Therefore, search space points with high
ﬁtness appear as peaks, while low ﬁtness regions are valleys, and points with the
same ﬁtness form plateaus. Solving the corresponding optimization problem hence
means, according to Equation (10.1), to ﬁnd the highest peak fS = max
x∈S f(x) and its
location xS = arg fS. The individuals of an evolutionary algorithm used to solve the
given optimization problem can be thought of as to populate the ﬁtness landscape.
The design of the genetic operators (basically selection, recombination, and muta-
tion) is meant to organize such that they (at least in average) perform a climbing of
the hills in the ﬁtness landscape and ideally ﬁnd the highest one, even in the pres-
ence of other (but smaller) hills. With the movement, the individuals contribute to
the dynamics of the population and hence to the evolutionary dynamics. Note that
in analyzing these processes a distinction can be made between the dynamics gener-
ated by genetic variation (mutation and recombination) and the dynamics generated
by corrective guidance (selection), which is of considerable interest for ﬁne–tuning
the genetic operators.
In order to deﬁne a dynamic ﬁtness landscape, there is the need to set how the
elements in Equation (10.4) change over time. With respect to the view of a dy-
namic ﬁtness landscape that is generated by a series of static landscapes, deﬁning
dynamics means to explain how one landscape produces the temporary subsequent
one. All of the landscape’s three deﬁning ingredients (i.e. search space S, ﬁtness
function f(x), and neighborhood structure n(x)) can, at least in principle, be dynam-
ically changing. Hence, we additionally need a time set and mappings that indicate
how S, f(x) and/or n(x) evolve with time [58, 59]. Dynamic optimization problems
considered in the literature so far address all these possibilities of change to some
extend. Whereas a real alteration of the fundamental components of a search space
such as dimensionality or representation (binary, integer, discrete, real, etc.) is re-
ally rare, a change in the feasibility of individuals is another and less substantial
kind of dynamic search space and is discussed within the problem setting of dy-
namic constraints [43, 60, 61]. Next is a changing neighborhood structure which
can partially be found in the context of works on dynamic routing [4, 73]. How-
ever, most of the work so far has been devoted to time–dependent ﬁtness functions
[37, 42, 56, 62, 63, 65, 72, 78]. For these reasons, and to keep the next deﬁnition
simple, a dynamically changing search space and neighborhood structure is omitted
in the following, only the ﬁtness function is time–dependent. A deﬁnition encom-
passing all three landscape components to be dynamic can be obtained by adding
transition maps for the other quantities.
We deﬁne a dynamic ﬁtness landscape as
ΛD = (S,n,K,F,Φf ).
(10.5)
Equivalent to the static landscape of Equation (10.4) the search space S represents
all possible solutions to the optimization problem and the neighborhood function

272
H. Richter
Fig. 10.1 A static ﬁtness landscape in 2D: static peaks that may become moving peaks
n(x) gives a set of neighbors to every search space point. The time set K ⊆Z pro-
vides a scale for measuring and ordering dynamic changes; F is the set of all ﬁt-
ness functions in time k ∈K and so every f ∈F with f : S × K →R also depends
on time and gives ﬁtness values to every search space point for any k ∈K. The
transition map Φf : F × S × K →F deﬁnes how the ﬁtness function changes over
time. The map must satisfy the temporal identity and composition conditions, that is
Φf (f,x,0) = f(x,0) and Φf (f,x,k1 +k2) = Φf (Φf (f,x,k1),x,k2), ∀f ∈F, ∀x ∈S,
∀k1,k2 ∈K and the spatial boundary conditions Φf (f,xbound,k) = f(xbound,k),
∀f ∈F, ∀k ∈K where xbound is the boundary set of search space S. With these
deﬁnitions we assume that the changes in the ﬁtness landscape happen (or come
into effect) at discrete points in time and are the result of comparing the landscape
at points in time k to the following points k+1. This is in line with ﬁtness landscapes
being a tool for analyzing the behavior of evolutionary algorithms. A generation of
an evolutionary algorithm can be deﬁned as the time interval between subsequent
ﬁtness function evaluations of the whole population. In other words, a generation
indicates the time between serial and self–contained steps in the solution ﬁnding
process. As ﬁtness evaluation in an evolutionary algorithm usually takes place just
once in a generation, a difference in ﬁtness can only be noticed by the algorithm at
discrete points in time. Hence, if we model the changes by a ﬁtness landscape, the
most natural and straightforward time regime is discrete time.
An intuitive geometrical interpretation of a static ﬁtness landscape still holds to
some extend for the dynamic case. The main difference is that the hills and valleys
move within the search space and/or change their topological form. This includes
that hills grow and shrink, valleys deepen or ﬂatten, or the landscape completely or
partially turns inside out. According to Equation (10.3), the corresponding dynamic
optimization problem now reads fS(k) = max
x∈S f(x,k),∀k ≥0 which yields the tem-
porarily highest ﬁtness fS(k) and its solution trajectory xS(k) = arg fS(k),∀k ≥0.
As before the individuals of the evolutionary algorithm are meant to climb the
hills, and moreover to follow if they are moving and ﬁnd hills that dynamically
appear. Even from such a simplifying picture it becomes obvious that the stan-
dard genetic operators (selection, recombination, mutation) might not be sufﬁcient
to perform the task. Indeed, there exists a multitude of modiﬁcations to deal with

10
Fitness Landscapes That Depend on Time
273
the changes induced by a dynamic ﬁtness landscape, for instance different types of
memory [7, 60, 65], random–based diversity enhancement techniques [42, 72] or
anticipation and prediction schemes [5, 62, 66]. Equation (10.3) describes the dy-
namic optimization problem and its solutions. However, for evaluating the perfor-
mance and the behavior of an evolutionary algorithm used to deliver such solutions,
other quantities can be more interesting, meaningful and signiﬁcant. These quanti-
ties usually generalize the solution trajectory in Equation (10.3) over the run time
and/or runs of the evolutionary algorithm, may include data from the evolving popu-
lation’s ﬁtness and make them statistically evaluable. See [1, 75] but also Chapter 14
and references cited there for an overview about dynamic performance evaluation.
Above, we have argued for dynamic ﬁtness landscapes useful in evolutionary
computation to have a time regime that only allows changes at discrete points in
time. We will end this section with relaxing this kind of modelling and reviewing
the effects this has for mathematical descriptions of dynamic ﬁtness landscapes. At
ﬁrst it can be noted that the deﬁnition in Equation (10.5) is still valid and meaningful
if we consider a real value time set K = R. For not confusing the elements of the
discrete valued time set with the real one, we write t ∈R. A main consequence of
such a real valued time set is that we can mathematically describe dynamic ﬁtness
landscapes that change continuously in time. Once we have deﬁned a search space
that is metric (or at least measurable) a ﬁtness function can be deﬁned in very gen-
eral terms. Every f : S →R that maps points from the said search space to a scalar
variable can be interpreted as a ﬁtness function. Hence, deﬁning the timely change
of the function f(x,t) deﬁnes a dynamic ﬁtness function. If there are a countable
number of possible solutions xi (and it hence is a combinatorial optimization prob-
lem) the dynamics of each of the solutions can be put as depending on the ﬁtness of
the solution xi at time t as well as on the ﬁtness of the μ other solutions
d f(xi,t)
dt
= ψi

f(x1,t),..., f(xi,t),..., f(xμ,t)

.
(10.6)
With Equation (10.6) we obtain as dynamic ﬁtness landscape a lattice of (nonlinear)
ordinary differential equations (ODEs). There are a considerable number of dynamic
combinatorial optimization problems for which the timely evolution of the ﬁtness
f(xi,t) does not depend on all the μ solutions but only on solutions neighboring xi.
Hence, Equation (10.6) modiﬁes to
d f(xi,t)
dt
= ψ∗
i ( f(xi,t), f(n(xi),t))).
(10.7)
For a non–countable number of possible solutions the dynamics of the ﬁtness f(x,t)
may be expressible by a nonlinear partial differential equation (PDE). If the proper-
ties of the search space allow to deﬁne spatial derivatives, we obtain (for phenotypes
described by n–dimensional vectors) the PDE
∂f
∂t = ψ

f(x,t), ∂f
∂x1
,... ∂f
∂xn
,..., ∂2 f
∂x2
1
,...,
∂2 f
∂x1∂xn
...

.
(10.8)

274
H. Richter
With Equation (10.8), we have a description of the changing ﬁtness as a spatially
extended dynamical system. The timely evolution of ﬁtness values speciﬁed by the
PDE does not depend on all the other ﬁtness values or an explicitly assignable neigh-
borhood, but on the spatial derivatives ∂f
∂xi of ﬁrst and higher order. Geometrically
interpreted, this means the timely evolution of the ﬁtness of any search space point is
subject to differences in ﬁtness of points laying inﬁnitesimally around that point. To
express it differently, the ﬁtness evolution is a function of the curvature the ﬁtness
creates in the landscape, or how the ﬁtness deforms the landscape spatially.
It could be argued that Equations (10.6), (10.7) and (10.8) are the most basic way
of describing the timely evolution of a ﬁtness landscape as any change in nature
must be a change in physical entities whose dynamics is in continuous time. How-
ever, it is most unlikely that the equations can be directly used as computational
models because they do only in exceptional cases have an analytic formula–like
closed solution. Any computational approach therefore requires to discretize time
for Equations (10.6) and (10.7) and time as well as space for Equation (10.8). At
the end of the process there should be an iterative generation law describing how a
ﬁtness value f(x,t) evolves into f(x,t + δt), with δt being a small time increment.
For Equation (10.7) (likewise for Equation (10.6)) we thus end up with
f(xi,t + δt) = Ψi( f(xi,t), f(n(xi),t))
(10.9)
and for Equation (10.8) with
f(x,t + δt) = Ψ (f(x,t), f(x1 + δx1,t), f(x2 + δx2,t),..., f(xn + δxn,t)) (10.10)
where Ψi and Ψ are some generator mappings. With these equations we obtain a
temporal and spatial discretization employable in numerical algorithms for calcu-
lating the evolution of ﬁtness values recursively forward in time. To formalize this
computational approach we go back to the discrete time variable k and introduce
a temporal renormalization. With this, and because xi + δxi imposes a spatial dis-
cretization and can be interpreted as a neighborhood, we may rewrite and generalize
Equations (10.9) and (10.10) as
f(xi,k + 1) = φi ( f(xi,k), f(n(xi),k))
(10.11)
with φi being a generator mapping.
Note that this neighborhood n(xi) is not necessarily the same neighborhood used
in laying out and distancing the search space according to the deﬁnition in Equation
(10.5). There might be one neighborhood that deﬁnes which search space points are
next to a given point, and another neighborhood that expresses which ﬁtness values
are inﬂuencing the timely evolution of that point. With formulating Equation (10.11)
we argue that this recursive evolution law is not only indispensable in calculating
a dynamic ﬁtness landscape but also an integral part in deﬁning it. Solving Equa-
tion (10.11) yields the transition map Φf in the deﬁnition in Equation (10.5). So, no

10
Fitness Landscapes That Depend on Time
275
deﬁnition of a dynamic ﬁtness landscape is complete without giving such an equa-
tion. The next section reviews some examples of dynamic ﬁtness landscapes and
such equational descriptions are explicitly given.
10.2.3
Examples of Dynamic Fitness Landscapes
As shown in the deﬁnition given in Equation (10.4), algebraic equations can be
used to describe static ﬁtness landscapes. As further shown in Equation (10.5), for
dynamic ﬁtness landscapes we need to add a mathematical prescription for evolving
the ﬁtness values forward in time. In principle, there are two ways for doing so. A
ﬁrst is to take the algebraic description of a static ﬁtness function, select some terms
from these equations, and deﬁne how these terms depend on an additional (and
usually external deﬁned) time regime. Geometrically speaking, this means that we
deﬁne dynamics laws for how selected topological features in the landscape evolve
with time. This only implicitly results in explaining the landscape’s dynamics in the
whole. On the other hand, this also implies that we have, in fact, dynamics only
for certain elements in the landscape. By changing these elements dynamically, we
implicitly also describe how the neighborhood of the peaks behave with time. We
will call this kind of dynamics generation external.
The easiest and most obvious way for deﬁning such time–dependent landscapes
is to use a static landscape and a set of rules for changing certain features in the
landscape with time. A well–known example is the so–called moving peak bench-
mark [7, 41], which uses as ﬁtness function a static n–dimensional ﬁeld of peaks
(or cones) on a zero plane f(x) = max

0 , max
1≤i≤N[hi −si∥x−ci∥]

(see also Figure
10.1). Here, x ∈S is an element in search space S ⊂Rn, ci is the coordinate of the
i–th cone, there are N cones in total, and hi and si are the height and slope, respec-
tively, of the i–th cone. By using the discrete time variable k, we may set dynamic
sequences for coordinates c(k), heights h(k) and slopes s(k) to obtain a dynamic
ﬁtness landscape with moving peaks
f(x,k) = max

0 , max
1≤i≤N [hi(k)−si(k)∥x−ci(k)∥]

.
(10.12)
For all static landscapes f(x) we may similarly identify topological features in the
the landscape’s mathematical description and change elements of the mathemat-
ical description dynamically. There are other problems such as dynamic sphere,
dynamic Ackley, dynamic Rosenbrook etc., but also dynamic combinatorial opti-
mization problems such a dynamic knapsack, dynamic royal road or dynamic bit–
matching [70] that ﬁt into this category, see e.g [15, 44] for an overview of such
kind of dynamic problems.
If a dynamic ﬁtness landscape relies on external dynamics, the question of how
to generate dynamic sequences arises. A ﬁrst step is to select terms in the alge-
braic ﬁtness landscape description that are to change with time. For the moving
peak benchmark in Equation (10.12), these are ci(k), hi(k) and si(k). The dynamic
changes are induced by moving sequences

276
H. Richter
z = (z(0),z(1),...,z(k),z(k + 1),...)
(10.13)
that is
ci(k) = zci(k),
hi(k) = zhi(k),
si(k) = zsi(k).
(10.14)
In principle, the dynamic changes can be of three types:
• regular dynamics
• chaotic dynamics
• random dynamics.
The moving sequences z(k) can be generated according to these types. Regular
changes are usually obtained by analytic coordinate transformations, for instance
cyclic dynamics where each z(k) repeats itself after a certain period of time and
shows recurrence or translatory dynamics where the quantities ascribe a pre–deﬁned
track or tour. The period of the recurrence and the cycle width can be adjusted and
normalized so that moving sequences become comparable. For instance, cyclic dy-
namics can be generated by
zi(k) = gi(k) = sin(ωik + δi)
(10.15)
with ωi and δi appropriate frequencies and phases. Note that an analytic equation
such as Equation (10.15) enjoys the property to be not recursive. The value of z(k)
can be calculated without knowing z(k −1). This also means a ﬁtness landscape
externally driven by Equation (10.15) has strictly speaking no recursive evolution
law as given in Equation (10.11), but is knowable beforehand for any given point in
time k. It is hence completely predictable.
Chaotic changes can be generated by a discrete–time dynamical system,
z(k + 1) = g(z(k)),
(10.16)
which is recursive. Such systems are known to show chaotic behavior for certain pa-
rameter values and initial states z(0), for instance the generalized H´enon map. Refer
to [55, 56] for details of the generation process. For using these moving sequences
in numerical experiments, there might be the need for preprocessing as (depending
on the dynamical systems used) the amplitudes z(k + 1) might be not unitary. If so,
a re–normalization should take place. We get random changes if we select that each
ci(k), hi(k), si(k) for each k is an independent realization of, for example, a nor-
mally or uniformly distributed random variable. Again, the statistical properties of
the random variable should guarantee (maybe after renormalization) comparability.
In some sense, also ﬁtness landscapes externally driven by a random process have
no recursive evolution law as given in Equation (10.11). The main difference is here
that the value of z(k −1) does in no way specify the value of z(k). The evolution
of a random ﬁtness landscape is only statistically describable. A general feature
of the three types of dynamics is that regular dynamics is completely predictable,
chaotic dynamics is short–term predictable, and random dynamics unpredictable.
This property transforms to ﬁtness landscapes externally driven by these dynamics.

10
Fitness Landscapes That Depend on Time
277
A second example for external drive is the XOR-generator by Yang [77, 78]. This
generator can be used for any binary–encoded static function f(x) as follows. For
each discrete step in landscape time k, a XOR mask M(k) is incrementally calculated
by
M(k) = M(k −1)⊕T(k),
(10.17)
where “⊕” is a bitwise exclusive-or (XOR) operator (i.e., 1 ⊕1 = 0, 1 ⊕0 = 1, and
0 ⊕0 = 0) and T(k) is an intermediate binary template generated for time step k.
T(k) is generated with ρ × l (ρ ∈(0.0,1.0]) randomly selected bits set to 1 while
the remaining bits are set to 0. For the initial step k = 1, M(0) is set to a zero vector,
i.e., M(0) = 0. The static ﬁtness function f(x) ﬁnally becomes dynamic by
f(x,k) = f(x⊕M(k)).
(10.18)
The XOR generator is hence a way to externally drive a binary ﬁtness function by
the recursive law in Equation (10.17).
In a second approach to describe dynamic changes, we may formulate a gen-
eral law for the ﬁtness landscape’s time evolution that applies to all ﬁtness val-
ues in the search landscape. Hence, the speciﬁcation of the timely changes are part
of the mathematical description of the landscape. Thus, the ﬁtness of every point
f(x,k+1) may depend on the ﬁtness one time step before, f(x,k) and the (element–
wise) ﬁtness values of all of its neighbors, f(n(x),k) (see Equation (10.11)). With
such a description we have formulated a dynamic ﬁtness landscape as a spatially
extended dynamical system. To have such description means that the topology and
the dynamics of the ﬁtness landscape are generated simultaneously and by the same
equation. In other words, the dynamics here is internal to the ﬁtness landscapes.
An example for such an evolution law is ﬁtness landscapes constructed from ordi-
nary differential equations (ODE), partial differential equations (PDE) and coupled
map lattices (CML). A special property of this type of dynamic ﬁtness landscape is
that not only is time discrete but also the search space has a countable number of
elements. Such a search space characteristic corresponds strictly speaking to com-
binatorial optimization problems (see [58, 59] for further discussion).
For a two–dimensional real valued search space S, a dynamic ﬁtness landscape
can be viewed as the time evolution of the surface over a 2D plane at point x and
time t. Such a general dynamic 2D ﬁtness landscape that describes the dynamics of
the ﬁtness value f(x1,x2,t) with continuous spatial variables (x1,x2) and continuous
time t can be modelled by the parabolic PDE
∂f
∂t = a1

∂2 f
∂x2
1
+ ∂2 f
∂x2
2

−a2g1

 ∂f
∂x1
, ∂f
∂x2

+ g2(f),
(10.19)
where a1,a2 are coefﬁcients and g1,g2 are mappings. The dynamic ﬁtness land-
scape in Equation (10.19) can be interpreted as a reaction–diffusion system with
an additional nonlinear term and is a special case of the general description given
in Equation (10.8). This type of PDE has close resemblance to the Kardar–Parisi–
Zhang (KPZ) equation [27], which has been proposed to model surface growth. The

278
H. Richter
main difference is that the KPZ equation includes an explicit stochastic (Gaussian
noise) term. Recently, the KPZ equation has been intensively studied [30, 36, 40],
with the relation to coupled map lattices (CML) as a central question. Clearly, both
are models of extended dynamical systems. Also, and as mentioned before, a nu-
merical solution to a PDE always requires some kind of discretization of space and
time. An alternative strategy to a study by any of the methods for numerically solv-
ing the PDE therefore appears to consist of a study of the corresponding CML and
their mutual dynamical properties.
We will next relate the PDE–based landscape, characterized in Equation (10.19),
to a landscape based on a CML [57, 58]. It has been shown that the CML landscape
can be obtained by a spatial and temporal discretization of the PDE landscape [59].
For the CML, we lay out a lattice grid with I1×I2 equally sized cells, which builds a
2D–structure. For every discrete time step k, k = 0,1,2,..., each cell is characterized
by its height
f(x1,x2,k),
x1 = 1,2,...,I1,
x2 = 1,2,...,I2,
(10.20)
where (x1,x2) denote the spatial indices in vertical and horizontal directions, respec-
tively (refer to Figure 10.2). We interpret this height, f(x1,x2,k), as ﬁtness according
to the geometrical metaphor of a ﬁtness landscape. It is subject to changes over time,
which are described by the two–dimensional CML with nearest–neighbor coupled
interaction [10, 25]:
f(x1,x2,k + 1)=(1 −ε)g(f(x1,x2,k))+ ε
4

g(f(x1 −1,x2,k)) + g(f(x1 + 1,x2,k))
+ g(f(x1,x2 −1,k)) +g(f(x1,x2 + 1,k))

,
(10.21)
I1
x1
1
1
x2
I2
f(x1,x2,k)
Fig. 10.2 The coupled map lattice (CML) of Equation (10.21) as an example for internal
dynamics in a ﬁtness landscape

10
Fitness Landscapes That Depend on Time
279
where g(f(x1,x2,k)) is a local mapping function and ε is the diffusion coupling
strength. As local mapping function we use the logistic map,
g(f(x1,x2,k)) = α f(x1,x2,k)(1 −f(x1,x2,k)).
(10.22)
It is a nonlinear map with the parameter 0 < α < 4, which is deﬁned for the unit
interval f ∈[0,1]. For some parameter α, the map given by Equation (10.22) ex-
hibits chaotic behavior, for instance in the parameter interval α ∈[3.57,4]. The lo-
cal chaotic behavior is distributed to other areas of the lattice by coupling. So, it is
the source of spatio–temporal chaos in the extended dynamical system. Finally, we
need to set the period boundary conditions as
f(I1 + 1,x2,k) = f(1,x2,k),
f(x1,I2 + 1,k) = f(x1,1,k).
(10.23)
Initialization of the CML is done by initial heights f(x1,x2,0), being realizations
of a random variable uniformly distributed on [0,1]. The spatio–temporal behavior
of the CML depends on the lattice size I1 × I2 and two parameters, the coupling
strength ε and the nonlinear parameter α. The timely evolution of the CML given
in Equation (10.21) also provides the recursive evolution law of the dynamic ﬁtness
landscape of Equation (10.11).
The CML is known to exhibit a rich spatio–temporal behavior, including differ-
ent types of spatio–temporal periodicity and chaos, quasi–periodicity and pattern
formation. The CML is therefore an instructive example for the principle of gen-
erating high–dimensional complex spatio–temporal dynamics by using local chaos
created by a low–dimensional mechanism that is transmitted to a spatial extension
by coupling. The obtained ﬁtness landscape shows a similar complex behavior. Re-
fer to [57, 58, 59] for detailed studies.
10.3
Coevolution, Codynamics and Their Fitness Landscapes
10.3.1
Coevolutionary Dynamics
This section reviews coevolutionary algorithms and their ﬁtness landscapes. This is
done with the aim to provide background for relating coevolutionary ﬁtness land-
scapes, namely coupled and deformable landscapes, in the framework of dynamic
ﬁtness landscapes discussed in the previous section. There is an ongoing debate
about the question whether or not ﬁtness landscapes that originate from coevolu-
tionary processes could (or should) be treated as dynamic and what possible beneﬁts
(if any) such a treatment could have. In the following we will not argue strongly for
either view, but we will demonstrate that such a view is possible.
Coevolutionary algorithms differ structurally from evolutionary algorithms for
several reasons. First, there is usually more than one population. Thus, there is no
longer only one genotypic space populated by individuals of one species, but several
spaces in which the evolutionary dynamics of other species take place. In this view,

280
H. Richter
coevolution operates on the level of phenotypes. Anyway, coevolution also has an
impact on the ﬁtness landscape as a whole, that is, on the level of genotypes. For
the dynamic interdependency on this level of the landscape we will introduce the
term codynamics. Coevolution between species results in codynamics between the
respective ﬁtness landscapes. We will restrict ourselves here to coevolution between
two species (and hence the dynamic interaction, that is, codynamics, of two ﬁtness
landscapes). Systems with more than two species can, at least in principle, be treated
along the same mathematical framework.
A second reason is that the ﬁtness of the individuals of both species are inter-
dependent and as a consequence coevolution relies upon an alternative concept of
how the ﬁtness of an individual is generally deﬁned. This is the crucial element of
coevolution. There are some implementations [18] that only use a single popula-
tion to create coevolutionary effects, but these implementations as well as the ones
with multiple populations all share the following property: they use a population–
dependent ﬁtness. This ﬁtness is subject to the progress the search process itself is
making. It therefore is also called a subjective ﬁtness, as opposed to objective ﬁt-
ness in conventional evolutionary computation. As the search process is dynamic,
this necessarily results in dynamic ﬁtness. This is in contrast to ﬁtness evaluation
considered so far. For an evolutionary algorithm (and for static problems) the ﬁtness
value is a property of a search space point (or a given genotype) and is constant for
the entire run–time. So, if in the course of the evolutionary search, the same point
were to be visited again by an individual, it would yield the same ﬁtness value as in
the visit before. In other words, a reevaluation of a speciﬁc genotype always gives
the same ﬁtness value. For an evolutionary algorithm and a dynamic problem the
search space points may change their ﬁtness values but this happens because the
landscape is internally or externally changing with time. This takes place indepen-
dently from the evolutionary search process and is hence unconnected to the ﬁtness
values of the population’s individuals. There is no feedback from the evolutionary
search to the landscape.
In coevolutionary algorithms ﬁtness is assigned differently. The ﬁtness of an indi-
vidual is the result of interaction with other individuals. The individuals that serve to
interact with the one for which a ﬁtness value is to be assigned are called evaluators.
The ﬁtness of an individual at a given point in run–time therefore depends on which
individuals are actually selected to interact with, and also on the current ﬁtness of
these evaluators. As a consequence, a given point in search space (a genotype) can
have a completely different ﬁtness value if it were to be reevaluated. Therefore, a
speciﬁc genotype frequently has variable, time–dependent ﬁtness where the time–
dependence is induced explicitly by the generational search. This is because in the
reevaluation other individuals may act as evaluators and even if the same individuals
are taken a second time, they might have different ﬁtness values. Only if the eval-
uators remain the same, and their ﬁtness values do not change in the evolutionary
run, we would fall back to the situation where a genotype has a ﬁxed ﬁtness value.
This, of course, would make a pointless coevolutionary algorithm. In addition, there
are even coevolutionary algorithm implementations that deviate from the simple de-
sign principles set out above. Elevators are usually a subset of a population as an

10
Fitness Landscapes That Depend on Time
281
interaction with all the members of all possible populations, called full mixing or
complete mixing, might be time–consuming and therefore computationally expen-
sive. There are for instance implementations that vary the number of individuals
for interaction or the number of interactions with time, either depending on the
run–time of the algorithm [46] or depending on some internal states of the algo-
rithm [47]. Other implementations use an archive of past solutions to select evalu-
ators from [45, 48, 64]. All these mechanisms for calculating ﬁtness dramatically
complicate and obscure the relationship between ﬁtness and genotype in coevolu-
tionary processes. Clearly these relationships are dynamic but not in the way ﬁtness
landscapes are dynamic as discussed in the previous section.
It should be pointed out that much of the work on coevolutionary algorithms has
been centered on the question of how to select evaluators and how to set the rules of
interaction. A main difference in algorithmic design is drawn between algorithms
that have just one population (single population coevolutionary algorithm) from
which the evaluators are taken, and algorithms that have many populations (multi
population coevolutionary algorithm) with possibly complex rules as to which pop-
ulation may supply evaluators for assigning the ﬁtness of individuals of another pop-
ulation. This may include the case that some populations are only used to provide
evaluators. Another difference frequently discussed is the exact nature of the inter-
action. The main distinctive feature that is used is if the interaction is cooperative or
competitive [53, 64]. Cooperative means that the individual and the evaluators inter-
act and collaborate to solve a problem that is harder or impossible to solve by each
of them alone. The better they perform together the higher the reward and hence the
ﬁtness. This sometimes even means that the same ﬁtness is given to all cooperating
individuals. In competitive interaction the individual is rewarded for out–performing
the evaluators, which sometimes means that the ﬁtness of one individual is increased
at the expense of the others. The terms cooperative and competitive are frequently
used in computer science approaches to coevolution. In the biological and ecological
literature, see for instance [3, 8], these terms are sometimes replaced by mutualistic
coevolution and antagonistic coevolution.
Further issues occur in the case of the ﬁtness of an individual being the subject
of more than one interaction and hence consist of several partial ﬁnesses that have
to be aggregated. Another topic is relevant if there are multiple populations and
communication between them needs to be organized. The most common here is to
have a centralized clock that deﬁnes the generational time for each population and
also speciﬁes at which points in time exchange of information and interaction takes
place. We will assume this in the discussion to follow. All these questions are impor-
tant for coevolutionary search and deeply inﬂuence the behavior and performance
of such algorithms. On the other hand, they only touch on the main question of this
chapter, namely how the ﬁtness landscape describing coevolution relate to dynamics
and creates codynamics.

282
H. Richter
10.3.2
Codynamic Fitness Landscapes
Basically, in coevolution there are as many ﬁtness landscapes as there are popu-
lations. Since the focus here is on two coevolving populations, we have, in fact,
two ﬁtness landscapes. They might or might not have the same search space and
neighborhood structure according to the deﬁnition set out in Equation (10.4). Let us
assume they have (the case of unequal search spaces would not alter the following
discussion substantially), but for distinguishing them we write Sx for the one, and
Sy for the other. We now consider that the individuals of population P1(k) can take
possible values x ∈Sx and the population P2(k) may have the values y ∈Sy. So far
we are still in line with the deﬁnitions of static (see Equation (10.4)) and dynamic
(Equation (10.5)) ﬁtness landscapes as given in Section 10.2.2. However, as a con-
sequence of the coevolutionary allocation of ﬁtness values discussed above, we now
face the question of deﬁning ﬁtness values f(x) and f(y), which cannot be done by
considering the search spaces separated from each other. This only becomes possi-
ble by considering the interaction between both populations. As mentioned before,
the ﬁtness here is no longer a constant property of a point in search space; ﬁtness
is generated on–the–ﬂy by the process of coevolution. Hence, we might be able to
formulate a recursive evolution law just as in Equation (10.11).
To illustrate this fact, it is instructive to combine both
landscapes into one
shared landscape S = {Sx,Sy}. This may result in a unique (static) landscape for
simple coevolutionary scenarios and is particularly convenient if the coevolving
populations are one–dimensional. Therefore, combining the two one–dimensional
landscapes leads to a shared two–dimensional landscape. This approach has been
followed in previous research on understanding coevolutionary phenomena by ﬁt-
ness landscapes [50, 51]. We use this example to describe the dynamics in coevolv-
ing ﬁtness landscapes. Therefore, we consider the coevolution on simple functions,
for instance ridge functions as suggested in [50, 51]. The simplest function has one
ridge:
f(x,y) = n + 2min(x,y)−max(x,y)
(10.24)
with x,y ∈R and n is a parameter that sets the size and the hight of the landscape
(see Figure 10.3a). The landscape has a single maximum at f(n,n) = 2n and a ridge
diagonally from f(0,0) = n to f(n,n) that separates two planar surfaces. There are
two minima at f(0,n) = f(n,0) = 0. Equation (10.24) is the ﬁtness function for both
populations P1 and P2 and can be interpreted as the static shared ﬁtness landscape
S = {Sx,Sy} of the coevolution process.
The coevolutionary process we consider works as follows. Both populations
evolve subsequently and alternatively along the conventional evolutionary algo-
rithm’s generational process (ﬁtness evaluation followed by selection, recombina-
tion and possibly mutation); that is, population P1 starts, and after it has ﬁnished its
ﬁrst generation, P2 takes over, then P1 starts again in the second generation and so
on. The main difference to traditional evolutionary computation is how the ﬁtness of
either population is calculated, because the ﬁtness evaluation in P1 is subject to eval-
uators from P2, and vice versa. As the populations take turns in evolving, this creates
a coupling via the (time–dependent) ﬁtness values (or some quantities derived from

10
Fitness Landscapes That Depend on Time
283
them) of the respective population. As an effect, both populations coevolve, and
the landscapes show codynamics. Let us now look at how this dynamic behavior is
reﬂected in their ﬁtness landscapes.
We ﬁrst need to deﬁne how the interaction between individuals of one popula-
tion with evaluators from the other is organized, how the solution of the interaction
is calculated, and how the solution translates to (personal or collective) ﬁtness of
the individuals. These questions can be addressed by employing the framework of
interactive domains and solution concepts [49]. We here use a very simple version
of this framework, as suggested in [51]. The interactive domain to calculate the ﬁt-
ness of population P2(k) consists of the individuals in P2 interacting with population
P1 by picking the current best individual xbest(k) of P1(k). The solution concept is
as simple as just taking this value and inserting it in Equation (10.24). For P1 it
is the same but reverse, i.e. take the current best individual ybest(k −1) and insert
in Equation (10.24) to calculate the ﬁtness of population P1(k). Because the popu-
lations take turns in coevolving with population P1 starting and P2 following, this
calculation has to deal with P2 lagging behind for one generation. We resolve this
by taking a random y = yrand from population P2 in the initial generation at k = 1;
that is ybest(0) := yrand. For k = 2, we take the value ybest(1) and so on.
Interestingly, for this simple example it is still undeﬁned if the given interaction
is either cooperative or competitive. This only depends on the notion of what consti-
tutes the best individual of either population, xbest(k) and ybest(k), respectively. As
shown in [50, 51] a cooperative interaction is imposed if the task for both popula-
tions is the same, that is, both are to ﬁnd the maximum or minimum of the ﬁtness
function (10.24). A competitive interaction takes place if one population is to search
for the maximum of Equation (10.24), while the other is to ﬁnd the minimum of
Equation (10.24). Either way, we obtain the same codynamics expressed as a cou-
pled ﬁtness landscape. From the perspective of population P1 the ﬁtness landscape
is dynamic by
f(x,k) = n + 2min(x,ybest(k −1))−max(x,ybest(k −1)),
(10.25)
while from the perspective of population P2 we get
f(y,k) = n + 2min(xbest(k),y)−max(xbest(k),y).
(10.26)
From either perspective alone it appears that ﬁtness is calculated on–the–ﬂy while
the coevolutionary algorithm is running. Due to the simplicity of the example the
codynamic ﬁtness landscape can be depicted as a function of time. See Figure 10.3b
as an example of cooperative interaction. This ﬁgure can be directly derived from the
shared ﬁtness landscape in Figure 10.3a by looking from the x–axis and considering
the value for y = ybest(k) as slices of the Sx space. For the ﬁrst and the second
generation the relatively low values of ybest(k) lead to a comparably ﬂat landscape
to be searchable for population P1. Hence, the maximum ﬁtness that can be obtained
is relatively low. The theoretically possible maximum cannot be reached at all; the
dynamic ﬁtness landscape simply does not include it for these generations. After
a certain number of generations, the landscape curves up (due to better values of

284
H. Richter
0
2
4
6
8
0
2
4
6
8
0
10
20
y
x
f(x,y)
0
2
4
6
8
10
0
2
4
6
8
0
5
10
15
20
k
x
f(x,ybest(k))
(a)
(b)
Fig. 10.3 (a) The oneRidge function of Equation (10.24) for n = 8. (b) The codynamic ﬁtness
landscape f (x,k), see Equation (10.25), depending on k.
ybest(k)) and the overall maximum becomes ﬁnally accessible. It should be noted
that this ﬁgure is an illustration, and not a veriﬁable numerical result. This is the
landscape for one run, another run might produce a landscape that is similar but
different in detail.
These results could have been obtained and presented in this way due to the ex-
treme simplicity of the interaction and the solution concepts of the example. Only
so, there is this unique relationship between the codynamic ﬁtness landscapes of
Equations (10.25) and (10.26) on the one hand, and the static shared landscape of
Equation (10.24) on the other. Even if this simple example would be made more
complicated the clear–cut relationship would cease. For instance, the interaction
could use not only the current best, but past bests, or it could not only take the best,
but a group of high ﬁtness individuals including the best. The solution concept could
entail a comparison or other operations of the ﬁtness of picked individuals from P1
and P2. All these modiﬁcations would make the relationships between the cody-
namic landscape more complicated and ﬁnally question if the static shared land-
scape like the one given in Equation (10.24) can be uniquely decomposed into co-
dynamic landscapes expressed as Equations (10.25) and (10.26). However, as long
as the interaction produces a phenotypic point as a result and the solution concept
gives it a ﬁtness value that is unique and constant for the coevolutionary run, cody-
namic landscapes can be obtained from the overall landscape. Our conjecture is that
if a ﬁtness function such as Equation (10.24) is used as solution concept, the cody-
namic ﬁtness landscapes are subspaces (for instance slices) of the ﬁtness function
that obtain their dynamics by being spanned every generation. Let us for instance
again consider the example above and assume that the interaction is to pick a cer-
tain number of current best individuals from the other population, compare it with
another number of best individuals from past generations, discard some individu-
als due to their low ﬁtness and save the rest, and calculate as the solution of this
interaction the weighted average of all individuals that were saved. Surely this is
a complicated process, but it again produces a phenotypic point in the end. If the
ﬁtness is assigned by the ﬁtness function in Equation (10.24), the situation is not

10
Fitness Landscapes That Depend on Time
285
altered signiﬁcantly. No matter what the interaction yields, the result can ﬁnally be
interpreted as an individual (or a group of individuals that can be conﬂated) and that
can be inserted in a ﬁtness function such as Equation (10.24). In some way, it could
be argued that this kind of coevolution has an objective ﬁtness after all. To general-
ize, for a shared ﬁtness landscape f(x,y) and the operator interact(P1,P2,archive)
describing the interactive domain (possibly supported by an archive), we obtain the
codynamic ﬁtness landscape
f(x,k) = f(x,interact (P1(k),P2(k),archive(k)).
(10.27)
For the variable y describing the coevolution of P2, we obtain a similar mathemat-
ical description. Note that the codynamic landscape of Equation (10.27) implies a
recursive evolution law as given in Equation (10.11) if we observe the evolutionary
dynamics of the populations P1(k) and P2(k) describable by a generation transition
function just as given by Equation (10.32). In line with this view and compatible
with the external and internal drive in dynamic ﬁtness landscapes considered in
Section 10.2, codynamic ﬁtness landscapes have a population–based dynamics.
A considerable number of coevolutionary settings fall into the category for which
codynamic ﬁtness landscapes can be models by Equation (10.27). The deﬁning el-
ement is that a shared ﬁtness landscape f(x,y) serves as the solution concept. This
applies to almost all coevolutionary algorithms used to solve optimization problems
by decomposition, which have been called compositional problems [49]. Examples
of compositional problems are [20, 22, 48, 50, 51]. For these examples, there are
even ﬁrst promising attempts to measure the resulting codynamic ﬁtness landscapes
and draw useful conclusions from it [29]. However, there is also an important group
of coevolutionary problems that do not have a solution concept expressible as an
equation–like formula known analytically beforehand and generally being know-
able without doing numerical experiments. Consider for instance the case where in
the course of evaluating an individual, there are multiple interactions with other in-
dividuals from the same but also from the other population that have multiple values
attached that are aggregated to the individual’s ﬁtness. This is frequently the case
for so–called test–based problems [11, 16]. For these problems there seems to be no
static shared ﬁtness landscape f(x,y) mapping uniquely the set of all possible values
x versus all possible values y and equipping every pair with a constant ﬁtness value.
To remain with the geographical metaphor of the ﬁtness landscape, we no longer
obtain a closed landscape, that is a surface (which may be rugged or smooth), but
disjunct ﬁtness islands. All we get is a phenotypic landscape but not a genotypic one.
We conjecture that it may generally hold true that compositional problems have a
shared ﬁtness landscape, while test–based problems do not.
10.3.3
Examples of Modelling Coevolutionary Processes
A classical and well–known example of a ﬁtness landscape that has the potential
to be time–dependent, but also offers the ability to model coevolutionary couplings
between different species, are the so–called NK or NKC landscapes introduced by

286
H. Richter
Kauffman, collaborating with Levin and Johnsen [31, 32, 34], where NK and NKC
denote the tunable parameter of the landscape. These landscapes use a genotypic
coding with a string of length N over a given alphabet, where in most of the imple-
mentations the alphabet of length 2, A = {0,1} is considered. The number N gives
the number of components that are required to code for each point of the genotypic
space. For the binary alphabet we hence have for each genotype a binary string
x = x0x1 ...xi ...xN−1, where xi is the i–th bit. The parameter K in the NK ﬁtness
landscape describes the degree of epistatic interactions between the N components
of each genotype. By tuning K between 0 ≤K ≤N −1, different degrees of rugged-
ness (that relate to problem hardness) can be adjusted. The epistatic interaction is
modelled by setting K neighbors for each bit xi via a neighborhood function n(xi,K)
and deﬁning a ﬁtness contribution fi(xi,n(xi,K)) for each bit xi and the K neighbors.
In principle, there are two ways to set a neighborhood function n(xi,K). A ﬁrst is
nearest neighbor interaction, where K
2 bits on either side of xi are considered neigh-
bors. As K
2 must be an integer, this imposed a bias for odd K to the right or left hand
side, and also requires a periodic boundary condition which says that the last and
the ﬁrst bit in the string are direct neighbors. A second design is random interaction,
where the K neighbors are chosen at random (with no repetition or reciprocity) from
among the remaining N −1 bits. The example considered below demonstrates near-
est neighbor interaction with a right hand side bias. The ﬁtness of each genotype x
is deﬁned by
f(x) = 1
N
N−1
∑
i=0
fi(xi,n(xi,K)).
(10.28)
The contributions fi(xi,n(xi,K)) are taken as realizations of a random variable uni-
formly distributed on the interval [0,1] and depend on the interaction parameter
K. As an example, consider the binary alphabet and N = 4, which gives 24 = 16
genotypes in the landscape. If the Hamming distance HD between genotypes next to
each other is HD = 1, a location is obtained from genotypic space and neighborhood
structure, which results in a metric search space as illustrated in Figure 10.4. Tables
10.1 and 10.2 show the calculation of ﬁtness for x = 0110.
In order to model coevolution and coupling between different species (and
thereby obtaining a coupled ﬁtness landscape), the NK landscape is modiﬁed.
We next consider the coupling of two species. However, within the given frame-
work the methodology can be straightforwardly extended to an arbitrary number
of species. For two coevolving species, we need to deﬁne two genotypic sets,
which (as an extension of the setting above) are described by two binary strings
of length N, x = x0x1 ...xi ...xN−1 and y = y0y1 ...yi ...yN−1. Apart from the K
epistatic interactions within each genotype (called internal interactions), there are
additionally C epistatic interactions from one genotype to the other (and vice versa),
which are called external interactions. This yields the name NKC landscape. As
before, we can tune 0 ≤C ≤N −1. For describing these two types of interac-
tions we ﬁrst need to set the K internal neighbors for each bit xi and yi via (usu-
ally identical) internal neighborhood functions n(xi,K) and n(yi,K). Additionally,
C external neighbors in the other genotype need to be speciﬁed by an external

10
Fitness Landscapes That Depend on Time
287






6
























0000
0001
0011
0010
0100
0101
0111
0110
1100
1101
1111
1110
1000
1001
1011
1010
f (x)
Fig. 10.4 Layout and distancing of the NK landscape deﬁned by Equation (10.28) for N = 4
and neighborhood structure with Hamming distance HD = 1
neighborhood function n(xi,yi,C). This external neighborhood function is (usu-
ally) assumed to be symmetrical, n(xi,yi,C) = n(yi,xi,C). The effect of internal
and external interaction is combined by concatenating both neighborhood func-
tions and results in KC neighborhood functions n(xi,K,C) = n(xi,K)|n(xi,yi,C)
and n(yi,K,C) = n(yi,K)|n(yi,xi,C). Here a|b means string a concatenated with
string b. For these KC neighborhoods ﬁtness contributions fi(xi,n(xi,K,C)) and
fi(yi,n(yi,K,C)) are deﬁned as independent realizations of a uniformly distributed
random variable that superpose internal and external ﬁtness contributions. Hence,
the ﬁtness of each genotype x and y is given by
f(x) = 1
N
N−1
∑
i=0
fi(xi,n(xi,K,C))
(10.29)
and
f(y) = 1
N
N−1
∑
i=0
fi(yi,n(yi,K,C)).
(10.30)
Tables 10.3 and 10.4 give an example of calculating the ﬁtness for x = 0110 and
y = 1001.
So far, neither the NK nor the coupled NKC landscape depends on time. The ﬁt-
ness values do not change during the considered time frame, may that be a random
walk on the landscape to calculate some landscape measures or an evolutionary
run. With respect to the discussion of coevolutionary processes above, the NKC
landscapes deﬁned by the Equations (10.29) and (10.30) do not have timely inter-
actions. Of course, they are coupled via shared ﬁtness contributions fi but not dy-
namically. The NK and NKC landscapes can be made dynamic in the same way as
the landscapes considered before: by deﬁning that certain landscape features change
depending on an external source of dynamics. For the NK landscape this means that

288
H. Richter
Table 10.1 Example of the NK landscape with N = 4 and 0 ≤K ≤3 and x = 0110. The
neighborhood function n(xi,K) is nearest neighbor interaction with right hand bias, namely
n(xi,0) = xi, n(xi,1) = xixi+1, n(xi,2) = xi−1xixi+1 and n(xi,3) = xi−1xixi+1xi+2 with the
periodic boundary condition xN := x0. The ﬁtness contributions fi(K) := fi(xi,n(xi,K)) are
assigned as realizations of a random variable uniformly distributed on the interval [0,1], refer
to Table 10.2 as an example of a lookup table containing these values. We obtain the ﬁtness
function values f (0110) = 0.4 for K = 0, f (0110) = 0.5 for K = 1, f (0110) = 0.475 for
K = 2, and f (0110) = 0.55 for K = 3.
K =
0
K =
1
x
0
1
1
0
0
1
1
0
i
n(xi,0)
fi(0) n(xi,1)
fi(1)
0
0
0.5
01
0.2
1
1
0.1
11
0.4
2
1
0.7
10
0.9
3
0
0.3
00
0.5
K =
2
K =
3
x
0
1
1
0
0
1
1
0
i
n(xi,2)
fi(2) n(xi,3)
fi(3)
0
001
0.1
0011
0.6
1
011
0.5
0110
0.3
2
110
0.6
1100
0.5
3
100
0.7
1001 0.8
Table 10.2 Example of the lookup table for the NK landscape with N = 4 and K = 2, which
is of dimension N ×2K+1
n(xi,2) f0(2) f1(2) f2(2) f3(2)
000
0.6
0.3
0.5
0.1
001
0.1
0.5
0.9
0.4
011
0.8
0.5
0.1
0.3
010
0.5
0.8
0.9
0.7
100
0.6
0.3
0.2
0.7
101
0.7
0.9
0.5
0.6
111
0.1
0.7
0.2
0.6
110
0.5
0.3
0.6
0.9
f(x,k) = 1
N
N−1
∑
i=0
fi(xi,n(xi,K(k)),k).
(10.31)
Dynamic NKC landscapes can be formulated by introducing time–dependent K(k)
and/or C(k) in the models given by Equations (10.29) and (10.30). The landscape in
Equation (10.31) also shows that there are two ways for imprinting dynamics on a
NK landscape. A ﬁrst is to change the parameter K(k) (and/or C(k)); a second is to
change the ﬁtness contributions fi(k). In some ways the former implies the latter as

10
Fitness Landscapes That Depend on Time
289
a changed K(k) and C(k) entails a recasting of the lookup tables and hence changes
the ﬁtness contributions as well. The main difference between both variants is that
only changing the fi(k) but retaining the K and C somehow restricts the severity
of changes. See for instance [6, 76] for experiments with dynamic NK landscapes.
However, it should also be pointed out that dynamic NKC landscapes formulated in
a similar fashion as the dynamic NK landscape of Equation (10.31) do not directly
model coevolutionary dynamics in the sense of the discussion in Section 10.3.2.
Clearly, they are dynamically coupled (and could be interpreted as codynamics),
but how the coupling modeled here relates to the coupling via interacting popula-
tions is far from being clear. An attempt to clarify such relations are the deformable
landscape considered next.
Table 10.3 Example of the NKC landscape with N = 4, K = 1 and 1 ≤C ≤2 and x =
0110, y = 1001. The KC neighborhood functions n(xi,K,C), n(yi,K,C) are symmetric and
nearest neighbor interaction, namely n(xi,1,1) = n(xi,1)|n(xi,yi,1) = xixi+1|yi, n(xi,1,2) =
xixi+1|yiyi+1, where again the periodic boundary conditions xN := x0. yN := y0 are observed.
Here a|b means string a concatenated with string b. The ﬁtness contributions f x
i (K,C) :=
fi(xi,n(xi,K,C)) and f y
i (K,C) := fi(yi,n(yi,K,C)) are assigned as independent realizations
of a random variable uniformly distributed on the interval [0,1], refer to Table 10.4 as an
example of a lookup table containing these values. We obtain the ﬁtness function values
f x(0110) = 0.4, f y(1001) = 0.375 for K = 1, C = 1 and f x(0110) = 0.4, f y(1001) = 0.5 for
K = 1, C = 2.
K =
1
C
=
1
x
0
1
1
0
y
1
0
0
1
i
n(xi,1,1)
f x
i (1,1)
n(yi,1,1)
f y
i (1,1)
0
01|1
0.3
10|0
0.6
1
11|0
0.2
00|1
0.3
2
10|0
0.7
01|1
0.1
3
00|1 0.4
11|0 0.5
K =
1
C
=
2
x
0
1
1
0
y
1
0
0
1
i
n(xi,1,2)
f x
i (1,2)
n(yi,1,2)
f y
i (1,2)
0
01|10
0.1
10|01
0.9
1
11|00
0.5
00|11
0.5
2
10|01
0.3
01|10
0.4
3
00|11 0.7
11|00 0.2
Up to now, we have considered examples where the dynamics of the ﬁtness land-
scape is either externally deﬁned and subsequently imprinted on the landscape, or is
internal due to a mathematical description of the landscape that explicitly depends
on time. A fundamentally different way to initiate dynamics in a ﬁtness landscape is

290
H. Richter
Table 10.4
Example of the lookup table for the NKC landscape with N = 4, K = 1 and
C = 1, which is of dimension N ×2K+C+1
n(xi,1,1) f x
0(1,1) f x
1(1,1) f x
2(1,1) f x
3(1,1)
00|0
0.6
0.3
0.5
0.1
01|0
0.1
0.5
0.9
0.4
11|0
0.8
0.2
0.1
0.3
10|0
0.5
0.8
0.7
0.7
10|1
0.6
0.3
0.2
0.7
11|1
0.7
0.9
0.5
0.6
01|1
0.3
0.7
0.2
0.6
00|1
0.5
0.3
0.6
0.4
n(yi,1,1) f y
0(1,1) f y
1(1,1) f y
2(1,1) f y
3(1,1)
00|0
0.6
0.3
0.5
0.1
01|0
0.1
0.5
0.9
0.4
11|0
0.8
0.5
0.1
0.5
10|0
0.6
0.8
0.9
0.7
10|1
0.6
0.3
0.2
0.7
11|1
0.7
0.9
0.5
0.6
01|1
0.1
0.7
0.1
0.6
00|1
0.5
0.3
0.6
0.9
by the individuals of a population that inhabits it. This can be done by utilizing the
time dependence of the individuals’ ﬁtness and/or the individuals’ phenotype (that
is, a location in the search space), or by using quantities that are derived from ﬁtness
and/or location. In doing so, each individual is considered as to represent a pheno-
typic realization of a genotypic point in the landscape that changes with time. In
other words, we use the evolutionary dynamics and let it interact with the environ-
mental dynamics. Instead of individuals, also whole species that belong to a group
of species can be considered as far as they are described by a single quantity averag-
ing (or otherwise aggregating) the phenotypic variety of the species. Either way, for
describing the evolutionary dynamics of the population (or the group of species) we
need a time scale, which usually is discrete generational time. In the following we
assume that there is a linear relationship between the generational time and the land-
scape time k and to simplify even more we set this linear relationship to equality.
Nevertheless, the discussion that follows applies likewise for any unique relation-
ship between generational time and landscape time. So, we can use the landscape
time to measure generational dynamics. With this time scale we can formulate via a
generation transition function ψ (see e.g. [2], p. 64–65) how a population P(k + 1)
at generation k + 1 originates from a population P(k) at generation k:
P(k + 1) = ψ (P(k)),k ≥0.
(10.32)
These generational dynamics can now be linked to the ﬁtness landscape and also
be considered as to change the topology of the ﬁtness landscape with time. In other
words, the population adapts to the ﬁtness landscape and deforms it.
There are some motivating thoughts for such a model. A ﬁrst is that the individ-
ual (or the species) utilizes the abilities and features connected to the phenotypic
realization while at the same time interacts and competes with other individuals of
the same or other species. This in turn leads to an adaption process in the interacting
parties, diminishes the species’ ﬁtness and bulges in the ﬁtness landscape for the
given phenotypic realization. As a result, ﬁtness can only be maintained by mov-
ing in the phenotypic space, which is also called the Red Queen effect. This is a
coevolutionary process where the actions of one species interact with the ﬁtness of
another species and vice versa. If both species have separated ﬁtness landscapes they

10
Fitness Landscapes That Depend on Time
291
are coupled as for instance in the NKC model of the Equations (10.29) and (10.30).
If we describe the actions of both species with a single shared ﬁtness landscape,
we obtain a dynamically deformable landscape. A very simple way to model such a
deformation of the ﬁtness landscapes by the individuals that populate it, is to take a
static ﬁtness landscape f(x) and deduct ﬁtness at points related to the position of the
population. The most straightforward way to do so is to deform the landscape at the
points where the population is in genotypic space. With λ the number of individuals
in the population P(k) = (p1(k), p2(k),..., pλ(k)), we can deﬁne a dynamic ﬁtness
landscape that is dynamically deformed depending on the individuals’ locations as
f(x,k) = f(x)−1
λ
λ
∑
i=1
αipi(x,k),
(10.33)
where the αi are some weighting factors. However, such a description has some
serious disadvantages. It only deforms the landscape at exactly the points where the
individuals are situated from generation to generation but not their vicinity. Also,
the deforming process happens at exactly the moment when the individual arrives
at the search space point and is not depleted at any later point in time. For these
reasons it would be desirable to have some smoothening, both in the spatial and
the temporal aspect. These ideas are addressed in the deformable ﬁtness landscapes
studied by Ebner and co–workers [17, 19], see also Chapter 12 of this book. These
works consider ﬁtness landscapes that are populated by several species, but this type
of modelling could also be applied to individuals of a population. For the spatial
smoothing, each individual pi(k) of the population P(k) is surrounded by a negative
Gaussian hill −exp

−(x−P(k))TA(x−P(k))

, that bulges in the landscape. The
positive deﬁnite matrix A can be used to adjust the dilation of the spatial deforming.
The temporal smoothing is also modeled by a Gaussian function, exp

i−k−τlat
2σ2

,
which runs over a temporal counter i and assigns that for the point in landscape
time (k + τlat) the spatial negative Gaussian hill deforms the landscape maximally
and this effect phases out for smaller and larger times. The τlat is a latency to move
the effect of the deformation forward in time and σ can be used to tune the timely
deforming process. Hence, we have a time–dependent deformable ﬁtness landscape
based on a static landscape f(x) as
f(x,k) = f(x)−1
α
iend
∑
i=0
exp

−(i−k −τlat)2
2σ2

exp

−1
2(x−P(k))TA(x−P(k))

,
(10.34)
with α = σ(2π)
n+1
2 det(A)
1
2 and iend the ﬁnal run time of the landscape. With Equa-
tion (10.34) we have a dynamic ﬁtness landscape whose dynamics is population–
based as f(x,k + 1) only depends on the values of the population P(k + 1) at this
generation. This closely resembles the codynamic ﬁtness landscape deﬁned by
Equation (10.27).
This population dynamics can follow any law as set out by Equation (10.32)
and may include any genetic operator. A convenient way to generate population

292
H. Richter
dynamics for experimenting with the deformable ﬁtness landscape that is simple and
computationally inexpensive is a hill climbing process, which was used in [17, 19].
In these works three types of hill climbing dynamics were considered that led to
the following updating rules. All these updating rules use the landscape’s gradient
in order to model the effect that the population tries to escape regions where the
landscape’s ﬁtness undergoes change. The ﬁrst rule uses the sign of the landscape’s
gradient, i.e.
P(k + 1) = α sgn

∂f(x,k)
∂x

x=P(k)

·P(k),
(10.35)
where sgn is the element–wise sign operator and α a weighting factor. A second
rule sets the movement of the population proportional to the gradient, i.e.
P(k + 1) = α ∂f(x,k)
∂x

x=P(k)
·P(k)
(10.36)
and a third rule integrates the gradient over time, i.e.
P(k + 1) =

k
∑
i=1
αi
∂f(x,i)
∂x

x=P(i)

·P(k).
(10.37)
Detailed experiments with such deformable landscapes are given in Chapter 12 of
this book.
10.4
Conclusions
10.4.1
Hierarchy of Fitness Landscapes
In this chapter we have dealt with landscapes whose ﬁtness values change with
time. It was shown that such time–dependent landscapes may occur in describing
two major evolutionary processes. A ﬁrst is in treating conditions apart from the
genetic makeup of a population that change with time and massively inﬂuence the
evolutionary outcome. Most prominently, this means that ﬁtness of a phenotypic re-
alization is not constant over the time frame of consideration and creates a dynamic
environment in which the evolutionary process takes place. This leads to dynamic
ﬁtness landscapes and may imply solving a dynamic optimization problem. A sec-
ond evolutionary process deals with situations where several populations (or at least
several individuals) interact in a cooperative or competitive way and hence mutu-
ally inﬂuence ﬁtness in a timely fashion. This leads to coevolution and creates ﬁtness
landscapes for each population that are codynamic. These landscapes are coupled
via dynamic ﬁtness evaluation and repercussions from the interdependent ﬁtness
allocation can be seen as to deform the landscapes.
In the last two sections, we have studied such landscapes and have seen that
the dynamics may have three sources: internal, external and population–based. The
distinction between external, internal and population–based dynamics has, apart

10
Fitness Landscapes That Depend on Time
293
from characterizing the source of changes in the ﬁtness landscape, implications
for the speciﬁcation of the dynamics of neighboring points in the search space.
For internal dynamics, the landscape’s time evolution law of Equation (10.11) states
how the ﬁtness of all points in the search space and all their neighboring points
change with time. In other words, the changes are explained for every search space
point. With external dynamics, we only deﬁne changes of selected and character-
istic features in the landscape. Here, the changes are explicitly explained for only
a discrete subset of search space points. Their neighborhood may change too, but
according to the same time regime as the points themselves. Population–based dy-
namics extends to landscapes for each population involved that mutually inﬂuence
each other in a codynamic way. This can be interpreted as features of one landscape
that drive other landscapes externally. However, there is no separation between that
what drives and that what is driven because the process alternates between all in-
volved landscapes and the drive is not directed to selected and pre–deﬁned topolog-
ical features of the landscapes.
To put these facts into a wider context, there has been an attempt to draw a con-
nection to spatially extended systems and to establish a hierarchy of ﬁtness land-
scapes [59], which is based on a hierarchy of spatio–temporal dynamics [14, 26]
(see Table 10.5). The hierarchy comes from the different combinations of discretiz-
ing space and time in the ﬁtness landscape. For the landscape being static, the
search space can be either continuous or discrete (binary), which results in prob-
lem classes 1 and 2. If the discrete search space consists additionally of a ﬁnite
number of elements, the corresponding optimization problem is a combinatorial
one. Class 3 are discrete ﬁtness functions with discrete dynamics. These dynamics
can be external, as for instance the XOR generator [78], see Equation (10.17), or
dynamic combinatorial optimization problems such a dynamic knapsack, dynamic
royal road or dynamic bit–matching [70]. An example of internal dynamics are ﬁt-
ness landscapes constructed from coupled map lattices (CML). A class 3 problem
with population–based drive would be a combinatorial optimization problem solved
by a coevolutionary algorithm. Continuous ﬁtness functions with discrete dynamics
form class 4. Examples with external dynamics include the moving peak benchmark
deﬁned in Equation (10.12), but also other similar problems such a dynamic sphere,
Table 10.5 Hierarchy of ﬁtness landscapes; S: static, D: discrete, C: continuous; Dynamics:
N: no dynamics, I: internal, E: external, P: population–based
Class SpaceTime Possible model
Dynamics
1
D
S
Discrete ﬁtness function
N
2
C
S
Continuous ﬁtness function
N
3
D
D
Discrete ﬁtness function with discrete dynamics
I, E, P
4
C
D
Continuous ﬁtness function with discrete dynamics
E, P
5
D
C
Lattice of coupled ordinary differential equation (ODE) I
6
C
C
Partial differential equation (PDE)
I

294
H. Richter
dynamic Ackley, dynamic Rosenbrook etc. The coevolutionary problem considered
in Section 10.3.2 as well as decomposition problems with a continuous evaluation
function (see e.g. [79]) fall into class 4 with population–based dynamics. To deﬁne
internal dynamics for class 4 problems would mean to have a description as in Equa-
tion (10.11) for a non–countable number of points in the ﬁtness landscape, which
is impractical for any numerical calculation. Therefore, class 4 problems with inter-
nal dynamics do not play a role in the literature. Class 5 and 6 ﬁtness landscapes
have continuous time and discrete or continuous search spaces. Possible models for
such dynamic ﬁtness landscapes are lattices of ODEs or PDEs. The mathematical
formulation involves internal continuous–time dynamics. Such models are suitable
for formulating general ﬁtness landscapes and mainly pervade modeling and study-
ing fundamental properties of evolution, but rarely to be found in studies in evo-
lutionary computation. The reason for this might be that, as mentioned before, the
discrete population dynamics of an evolutionary algorithm is best linked to ﬁtness
landscapes with discrete time characteristics. In addition, both types of mathemati-
cal description do, at least not in general, have an analytic solution. Any numerical
calculation involves a discretization of time and/or space, for instance in numeri-
cal integrating ODEs and PDEs. Hence, both classes can, at least from a numerical
point of view, be reduced to class 3 problems. As coevolutionary algorithm drive the
codynamic landscapes by interacting populations, the resulting population–based
dynamics is always discrete–time. However, codynamics also mean that the land-
scapes for each population are dynamical slices through an overall landscape. As a
consequence, the shared static ﬁtness landscape might, for instance, be of class 2,
but the codynamic landscapes for each population are class 4.
10.4.2
Future Research Directions
Research on ﬁtness landscapes has intensiﬁed recently and those advances are the
topic of this book. Research on ﬁtness landscapes that depend on time is an even
younger ﬁeld and still a considerable step away from maturity. Therefore, it comes
as no surprise that some interesting questions remain unanswered yet. However, this
is also connected with the hope that the present study might serve as a baseline for
further development. Two directions appear to be particularly interesting. A ﬁrst is
linked to one of the major purposes of ﬁtness landscapes: to provide a notion of
how difﬁcult it is for an evolutionary search algorithm to solve a given optimization
problem. One way to accrue such knowledge is by landscape measures. For static
measures theoretical and practical considerations have let to reliable and applicable
results, see e.g. [24, 67] but also Chapters 4, 5 and 8 of this book. There are some
examples of works on measures for landscapes that depend on time [21, 29, 58, 59].
However, their main focus is on applying measures of static landscapes (that is,
measures for topological features) to the dynamic situation. This somehow masks
the effect the dynamics has on the landscape and hence on problem hardness. It
would be desirable to establish additional measures for dynamic problem hardness.
A second direction is studying landscapes of speciﬁc problems and by doing so
closing the gap between theory and application. Again, this is a path that has been

10
Fitness Landscapes That Depend on Time
295
successfully followed for static landscapes [38, 54, 71]. Hence, this approach seems
to be also promising for dynamic and codynamic landscapes.
References
[1] Alba, E., Sarasola, B.: Measuring ﬁtness degeneration in dynamic optimization prob-
lems. In: Di Chio, C., et al. (eds.) Applications of Evolutionary Computation - EvoAp-
plications 2010, pp. 572–581. Springer, Berlin (2010)
[2] B¨ack, T.: Evolutionary Algorithms in Theory and Practice: Evolution Strategies, Evolu-
tionary Programming, Genetic Algorithms. Oxford University Press, New York (1996)
[3] Bascompte, J., Jordano, P.: Plant-animal mutualistic networks: the architecture of bio-
diversity. Annu. Rev. Ecol. Evol. Syst. 38, 567–593 (2007)
[4] Bosman, P.A.N., La Poutr´e, H.: Computationally intelligent online dynamic vehicle
routing by explicit load prediction in an evolutionary algorithm. In: Runarsson, T.P.,
Beyer, H.-G., Burke, E.K., Merelo-Guerv´os, J.J., Whitley, L.D., Yao, X. (eds.) PPSN
2006. LNCS, vol. 4193, pp. 312–321. Springer, Heidelberg (2006)
[5] Bosman, P.A.N.: Learning and anticipation in online dynamic optimization. In: Yang,
S., Ong, Y.S., Jin, Y. (eds.) Evolutionary Computation in Dynamic and Uncertain Envi-
ronments, pp. 129–152. Springer, Heidelberg (2007)
[6] Brabazon, A., Silva, A., de Sousa, T.F., O’Neill, M., Matthews, R., Costa, E.: A particle
swarm model of organizational adaptation. In: Deb, K., Tari, Z. (eds.) GECCO 2004.
LNCS, vol. 3102, pp. 12–23. Springer, Heidelberg (2004)
[7] Branke, J.: Memory enhanced evolutionary algorithms for changing optimization prob-
lems. In: Angeline, P.J., Michalewicz, Z., Schoenauer, M., Yao, X., Zalzala, A. (eds.)
Proc. Congress on Evolutionary Computation, IEEE CEC 1999, pp. 1875–1882. IEEE
Press, Piscataway (1999)
[8] Buckling, A., Rainey, P.B.: Antagonistic coevolution between a bacterium and a bacte-
riophage. Proc. R. Soc. Lond. B 269, 931–936 (2002)
[9] Bull, L.: Coevolutionary species adaptation genetic algorithms: a continuing SAGA on
coupled ﬁtness landscapes. In: Capcarr`ere, M.S., Freitas, A.A., Bentley, P.J., Johnson,
C.G., Timmis, J. (eds.) ECAL 2005. LNCS (LNAI), vol. 3630, pp. 322–331. Springer,
Heidelberg (2005)
[10] Chazottes, J.R., Fernandez, B.: Dynamics of Coupled Map Lattices and of Related Spa-
tially Extended Systems. Springer, Heidelberg (2005)
[11] Chellapilla, K., Fogel, D.B.: Evolving neural networks to play checkers without relying
on expert knowledge. IEEE Trans. Neural Netw. 10, 1382–1391 (1999)
[12] Cheng, H., Yang, S.: Multi-population genetic algorithms with immigrants scheme for
dynamic shortest path routing problems in mobile ad hoc networks. In: Di Chio, C.,
et al. (eds.) EvoApplicatons 2010, Part I. LNCS, vol. 6024, pp. 562–571. Springer,
Heidelberg (2010)
[13] Cheng, H., Yang, S.: Genetic algorithms with immigrants schemes for dynamic multi-
cast problems in mobile ad hoc networks. Engineering Applications of Artiﬁcial Intel-
ligence 23, 806–819 (2010)
[14] Crutchﬁeld, J.P., Kaneko, K.: Phenomenology of spatiotemporal chaos. In: Hao, B. (ed.)
Directions in Chaos, vol. 1, pp. 272–353. World Scientiﬁc, Singapore (1987)
[15] Cruz, C., Gonzlez, J.R., Pelta, D.A.: Optimization in dynamic environments: a survey
on problems, methods and measures. Soft Computing 15, 1427–1448 (2011)

296
H. Richter
[16] de Jong, E.D., Polack, J.B.: Ideal evaluation from coevolution. Evolutionary Computa-
tion 12, 159–192 (2004)
[17] Ebner, M., Watson, R.A., Alexander, J.: Co–evolutionary dynamics on a deformable
landscape. In: Zalzala, A., Fonseca, C., Kim, J.H., Smith, A., Yao, X. (eds.) Proc.
Congress on Evolutionary Computation, IEEE CEC 2000, pp. 1284–1291. IEEE Press,
Piscataway (2000)
[18] Ebner, M.: Coevolution and the red queen effect shape virtual plants. Genetic Program-
ming and Evolvable Machines 7, 103–123 (2006)
[19] Ebner, M., Watson, R.A., Alexander, J.: Coevolutionary dynamics of interacting
species. In: Di Chio, C., et al. (eds.) EvoApplicatons 2010, Part I. LNCS, vol. 6024,
pp. 1–10. Springer, Heidelberg (2010)
[20] Goh, C.K., Tan, K.C.: A competitive–cooperative coevolutionary paradigm for dynamic
multiobjective optimization. IEEE Trans. Evolut. Comp. 13, 103–127 (2009)
[21] Hordijk, W., Kauffman, S.A.: Correlation analysis of coupled ﬁtness landscapes. Com-
plexity 10, 42–49 (2005)
[22] Jansen, T., Wiegand, R.P.: The cooperative coevolutionary (1+1) EA. Evolutionary
Computation 12, 405–434 (2004)
[23] Jones,
T.:
Evolutionary
algorithms,
ﬁtness
landscape
and
search.
PhD
thesis,
The
University
of
New
Mexico,
Albuquerque
(1995),
http://www.santafe.edu/media/workingpapers/95-05-048.pdf
(retrieved November 11, 2012)
[24] Kallel, L., Naudts, B., Reeves, C.R.: Properties of ﬁtness functions and search land-
scapes. In: Kallel, L., Naudts, B., Rogers, A. (eds.) Theoretical Aspects of Evolutionary
Computing, pp. 177–208. Springer, Heidelberg (2001)
[25] Kaneko, K.: The coupled map lattice. In: Kaneko, K. (ed.) Theory and Application of
Coupled Map Lattices, pp. 1–49. John Wiley, Chichester (1993)
[26] Kaneko, K., Tsuda, I.: Complex Systems: Chaos and Beyond. Springer, Heidelberg
(2001)
[27] Kardar, M., Parisi, G., Zhang, Y.C.: Dynamic scaling of growing interfaces. Phys. Rev.
Lett. 56, 889–892 (1986)
[28] Kashtan, N., Noor, E., Alon, U.: Varying environments can speed up evolution. Proc.
Natl. Acad Sci USA (PNAS) 104, 13711–13716 (2007)
[29] Katada, Y., Handa, Y.: Tracking the Red Queen effect by estimating features of compet-
itive co–evolutionary ﬁtness landscapes. In: Fogel, D.B. (ed.) Proc. Congress on Evolu-
tionary Computation, IEEE CEC 2010, pp. 4417–4424. IEEE Press, Piscataway (2010)
[30] Katzav, E., Cugliandolo, L.F.: From coupled map lattices to the stochastic Kardar–
Parisi–Zhang equation. Physica A371, 96–99 (2006)
[31] Kauffman, S.A., Levin, S.: Towards a general theory of adaptive walks on rugged land-
scapes. J. Theor. Biol 128, 11–45 (1987)
[32] Kauffman, S.A.: The Origin of Order: Self–Organization and Selection in Evolution.
Oxford University Press, New York (1993)
[33] Kauffman, S.A., Weinberger, E.D.: The NK Model of rugged ﬁtness landscapes and
its application to the maturation of the immune response. J. Theor. Biol. 141, 211–245
(1989)
[34] Kauffman, S.A., Johnsen, S.: Coevolution to the edge of chaos: Coupled ﬁtness land-
scapes, poised states, and coevolutionary avalanches. J. Theor. Biol. 149, 467–505
(1991)

10
Fitness Landscapes That Depend on Time
297
[35] Lin, S.C., Goodman, E.D., Punch, W.F.: A genetic algorithm approach to dynamic job
shop scheduling problems. In: B¨ack, T. (ed.) Proc. Seventh International Conference on
Genetic Algorithms, pp. 481–488. Morgan Kaufmann, San Francisco (1997)
[36] Ma, K., Jianga, J., Yanga, C.B.: Scaling behavior of roughness in the two–dimensional
Kardar–Parisi–Zhang growth. Physica 378, 194–200 (2007)
[37] Mendes, R., Mohais, A.: DynDE: Differential Evolution for dynamic optimization prob-
lems. In: Corne, D. (ed.) Proc. Congress on Evolutionary Computation, IEEE CEC
2005, pp. 2808–2815. IEEE Press, Piscataway (2005)
[38] Merz, P.: Advanced ﬁtness landscape analysis and the performance of memetic algo-
rithms. Evolutionary Computation 12, 303–325 (2004)
[39] Meyers, L.A., Bull, J.J.: Fighting change with change: adaptive variation in an uncertain
world. Trends in Ecology & Evolution 17, 551–557 (2002)
[40] Miranda, V.G., Aar˜ao Reis, F.D.A.: Numerical study of the Kardar–Parisi–Zhang equa-
tion. Phys. Rev. 77, 031134–1–6 (2008)
[41] Morrison, R.W., De Jong, K.A.: A test problem generator for non–stationary environ-
ments. In: Angeline, P.J., Michalewicz, Z., Schoenauer, M., Yao, X., Zalzala, A. (eds.)
Proc. Congress on Evolutionary Computation, IEEE CEC 1999, pp. 2047–2053. IEEE
Press, Piscataway (1999)
[42] Morrison, R.W., De Jong, K.A.: Triggered hypermutation revisited. In: Zalzala, A., et al.
(eds.) Proc. Congress on Evolutionary Computation, IEEE CEC 2000, pp. 1025–1032.
IEEE Press, Piscataway (2000)
[43] Nguyen, T.T., Yao, X.: Benchmarking and solving dynamic constrained problems. In:
Tyrrell, A. (ed.) Proc. Congress on Evolutionary Computation, IEEE CEC 2009, pp.
690–697. IEEE Press, Piscataway (2009)
[44] Nguyen, T.T., Yang, S., Branke, J.: Evolutionary dynamic optimization: A survey of the
state of the art. Swarm and Evolutionary Computation 6, 1–24 (2012)
[45] Oliehoek, F.A., de Jong, E.D., Vlassis, N.A.: The parallel Nash memory for asymmetric
games. In: Cattolico, M. (ed.) Proc. Genetic and Evolutionary Computation Conference,
GECCO 2006, pp. 337–344. ACM Press, New York (2006)
[46] Panait, L., Luke, S.: Time–dependent collaboration schemes for cooperative coevolu-
tionary algorithms. In: Potter, M.A., Wiegand, R.P. (eds.) 2005 AAAI Fall Symposium
on Coevolutionary and Coevolving Systems. AAAI Press, Palo Alto (2005)
[47] Panait, L., Luke, S.: Selecting informative actions improves cooperative multiagent
learning. In: Nakashima, H., Wellman, M.P., Weiss, G., Stone, P. (eds.) Proc. Fifth Inter-
national Joint Conference on Autonomous Agents and Multi Agent Systems (AAMAS
2006), pp. 760–766. ACM Press, New York (2006)
[48] Panait, L., Luke, S., Harrison, J.: Archive–based cooperative coevolutionary algo-
rithms. In: Cattolico, M. (ed.) Proc. Genetic and Evolutionary Computation Conference,
GECCO 2006, pp. 345–352. ACM Press, New York (2006)
[49] Popovici, E., Bucci, A., Wiegand, R.P., de Jong, E.D.: Coevolutionary principles. In:
Rozenberg, G., B¨ack, T., Kok, J.N. (eds.) Handbook of Natural Computing, pp. 987–
1033. Springer, Heidelberg (2010)
[50] Popovici, E., de Jong, K.A.: Understanding competitive co–evolutionary dynamics via
ﬁtness landscapes. In: Luke, S. (ed.) 2004 AAAI Fall Symposium on Artiﬁcial Multia-
gent Learning. AAAI Press, Palo Alto (2005)
[51] Popovici, E., de Jong, K.A.: Understanding cooperative co–evolutionary dynamics via
simple ﬁtness landscapes. In: Beyer, H.G., O’Reilly, U.M. (eds.) Proc. Genetic and Evo-
lutionary Computation Conference, GECCO 2005, pp. 507–514. Morgan Kaufmann,
San Francisco (2005)

298
H. Richter
[52] Popovici, E., de Jong, K.A.: The dynamics of the best individuals in co–evolution. Nat-
ural Computing 5, 229–255 (2006)
[53] Potter, M.A., de Jong, K.A.: Cooperative coevolution: An architecture for evolving
coadapted subcomponents. Evolutionary Computation 8, 1–29 (2000)
[54] Pr¨ugel–Bennett, A., Tayarani–Najaran, M.H.: Maximum satisﬁability: Anatomy of the
ﬁtness landscape for a hard combinatorial optimization problem. IEEE Trans. Evolut.
Comp. 16, 319–338 (2012)
[55] Richter, H.: Behavior of evolutionary algorithms in chaotically changing ﬁtness land-
scapes. In: Yao, X., et al. (eds.) PPSN 2004. LNCS, vol. 3242, pp. 111–120. Springer,
Heidelberg (2004)
[56] Richter, H.: A study of dynamic severity in chaotic ﬁtness landscapes. In: Corne, D.
(ed.) Proc. Congress on Evolutionary Computation, IEEE CEC 2005, pp. 2824–2831.
IEEE Press, Piscataway (2005)
[57] Richter, H.: Evolutionary optimization in spatio–temporal ﬁtness landscapes. In:
Runarsson, T.P., Beyer, H.-G., Burke, E.K., Merelo-Guerv´os, J.J., Whitley, L.D., Yao,
X. (eds.) PPSN 2006. LNCS, vol. 4193, pp. 1–10. Springer, Heidelberg (2006)
[58] Richter, H.: Coupled map lattices as spatio–temporal ﬁtness functions: Landscape mea-
sures and evolutionary optimization. Physica 237, 167–186 (2008)
[59] Richter, H.: Evolutionary optimization and dynamic ﬁtness landscapes: From reaction-
diffusion systems to chaotic CML. In: Zelinka, I., Celikovsky, S., Richter, H., Chen,
G. (eds.) Evolutionary Algorithms and Chaotic Systems. SCI, vol. 267, pp. 409–446.
Springer, Heidelberg (2010)
[60] Richter, H.: Memory design for constrained dynamic optimization problems. In: Di
Chio, C., et al. (eds.) EvoApplicatons 2010, Part I. LNCS, vol. 6024, pp. 552–561.
Springer, Heidelberg (2010)
[61] Richter, H., Dietel, F.: Solving dynamic constrained optimization problems with asyn-
chronous change pattern. In: Di Chio, C., et al. (eds.) EvoApplications 2011, Part I.
LNCS, vol. 6624, pp. 334–343. Springer, Heidelberg (2011)
[62] Richter, H., Yang, S.: Memory based on abstraction for dynamic ﬁtness functions.
In: Giacobini, M., et al. (eds.) EvoWorkshops 2008. LNCS, vol. 4974, pp. 596–605.
Springer, Heidelberg (2008)
[63] Richter, H., Yang, S.: Learning behavior in abstract memory schemes for dynamic op-
timization problems. Soft Computing 13, 1163–1173 (2009)
[64] Rosin, C.D., Belew, R.K.: New methods for competitive coevolution. Evolutionary
Computation 5, 1–29 (1997)
[65] Sim˜oes, A., Costa, E.: Variable–size memory evolutionary algorithm to deal with
dynamic environments. In: Giacobini, M., et al. (eds.) EvoWorkshops 2007. LNCS,
vol. 4448, pp. 617–626. Springer, Heidelberg (2007)
[66] Sim˜oes, A., Costa, E.: Evolutionary algorithms for dynamic environments: Prediction
using linear regression and Markov chains. In: Rudolph, G., Jansen, T., Lucas, S.,
Poloni, C., Beume, N. (eds.) PPSN X 2008. LNCS, vol. 5199, pp. 306–315. Springer,
Heidelberg (2008)
[67] Smith, T., Husbands, P., Layzell, P., O’Shea, M.: Fitness landscapes and evolvability.
Evolutionary Computation 10, 1–34 (2002)
[68] Stadler, P.F., Stephens, C.R.: Landscapes and effective ﬁtness. Comm. Theor. Biol. 8,
389–431 (2003)
[69] Stadler, B.M.R., Stadler, P.F., Wagner, G.P., Fontana, W.: The topology of the possible:
Formal spaces underlying patterns of evolutionary change. J. Theor. Biol. 213, 241–274
(2001)

10
Fitness Landscapes That Depend on Time
299
[70] Stanhope, S.A., Daida, J.M.: (1+1) Genetic algorithm ﬁtness dynamics in a changing
environment. In: Angeline, P.J., Michalewicz, Z., Schoenauer, M., Yao, X., Zalzala, A.
(eds.) Proc. Congress on Evolutionary Computation, IEEE CEC 1999, pp. 1851–1858.
IEEE Press, Piscataway (1999)
[71] Tavares, J., Pereira, F.B., Costa, E.: Multidimensional knapsack problem: a ﬁtness land-
scape analysis. IEEE Trans. Sys. Man Cyber. B 38, 604–616 (2008)
[72] Tin´os, R., Yang, S.: A self–organizing random immigrants genetic algorithm for dy-
namic optimization problems. Genetic Programming and Evolvable Machines 8, 255–
286 (2007)
[73] van Hemert, J., La Poutr´e, J.A.H.: Dynamic routing problems with fruitful regions:
Models and evolutionary computation. In: Yao, X., et al. (eds.) PPSN VIII 2004. LNCS,
vol. 3242, pp. 692–701. Springer, Heidelberg (2004)
[74] Watson, R.A., Pollack, J.B.: Coevolutionary dynamics in a minimal substrate. In: Spec-
tor, L., Goodman, E.D., Wu, A., Langdon, W.B., Voigt, H.M., Gen, M., Sen, S., Dorigo,
M., Pezeshk, S., Garzon, M.H., Burke, E. (eds.) Proc. Genetic and Evolutionary Com-
putation Conference, GECCO 2001, pp. 702–709. Morgan Kaufmann, San Francisco
(2001)
[75] Weicker, K.: Performance measures for dynamic environments. In: Guerv´os, J.J.M.,
Adamidis, P.A., Beyer, H.-G., Fern´andez-Villaca˜nas, J.-L., Schwefel, H.-P. (eds.) PPSN
VII 2002. LNCS, vol. 2439, pp. 64–73. Springer, Heidelberg (2002)
[76] Wilke, C.O., Martinetz, T.: Adaptive walks on time-dependent ﬁtness landscapes. Phys.
Rev. E60, 2154–2159 (1999)
[77] Yang, S.: Non–stationary problem optimization using the primal-dual genetic algorithm.
In: Sarker, R., Reynolds, R., Abbass, H., Tan, K.C., Essam, D., McKay, R., Gedeon, T.
(eds.) Proc. Congress on Evolutionary Computation, IEEE CEC 2003, pp. 2246–2253.
IEEE Press, Piscataway (2003)
[78] Yang, S., Yao, X.: Experimental study on population-based incremental learning algo-
rithms for dynamic optimization problems. Soft Computing 9, 815–834 (2005)
[79] Yang, Z., Tang, K., Yao, X.: Large scale evolutionary optimization using cooperative
coevolution. Information Science 178, 2985–2999 (2008)

Chapter 11
Red Queen Coevolution on Fitness Landscapes
Ricard V. Sol´e and Josep Sardany´es
Abstract. Species do not merely evolve, they also coevolve with other organisms.
Coevolution is a major force driving interacting species to continuously evolve ex-
ploring their ﬁtness landscapes. Coevolution involves the coupling of species ﬁt-
ness landscapes, linking species genetic changes with their inter-speciﬁc ecological
interactions. Here we ﬁrst introduce the Red Queen hypothesis of evolution com-
menting on some theoretical aspects and empirical evidences. As an introduction
to the ﬁtness landscape concept, we review key issues on evolution on simple and
rugged ﬁtness landscapes. Then we present key modeling examples of coevolution
on different ﬁtness landscapes at different scales, from RNA viruses to complex
ecosystems and macroevolution.
11.1
Introduction: The Red Queen
Coevolution pervades evolutionary change on multiple scales. It is not exaggerated
to say, changing a little the classical Dobzhansky statement, that nothing makes
sense in biology except in the light of coevolution. Darwin himself recognized this
when referring to what he called the entangled bank [9]: “It is interesting to contem-
plate an entangled bank, clothed with many plants of many kinds, with birds singing
on the bushes, with various insects ﬂitting about, and with worms crawling through
the damp earth”. Indeed, ecosystems need to be seen as collectives of interacting
Ricard V. Sol´e · Josep Sardany´es
ICREA-Complex Systems Lab, Universitat Pompeu Fabra,
Parc de Recerca Biom`edica de Barcelona (PRBB), Dr. Aiguader 88,
08003 Barcelona, Spain
Institut de Biologia Evolutiva (CSIC-Universitat Pompeu Fabra),
Passeig Mar´ıtim de la Barceloneta 37, 08003 Barcelona, Spain
e-mail: {ricard.sole,josep.sardanes}@upf.edu
Ricard V. Sol´e
Santa Fe Institute, 1399 Hyde Park Road, Santa Fe NM 87501, USA
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
301
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_11, c⃝Springer-Verlag Berlin Heidelberg 2014

302
R.V. Sol´e and J. Sardany´es
species whose evolutionary fate is necessarily intermingled in complex ways. Such
complex networks pervade ecosystems and their evolutionary dynamics [48].
The rationale of the previous statements is simple. As any species changes over
time, it inevitably triggers co-evolutionary responses in those partners directly af-
fected by their interdependencies. A prey running faster than its predator will re-
quire changes later to cope with the change. Running fast is one option, hiding in
the appropriate place another. If we move ourselves into the microcosmos of host-
pathogen interactions, including cells and viruses (or bacteria) as main examples of
coevolving players, a faster rate of change in the parasite might need a faster re-
sponse from the host. Changing attributes might be an unavoidable consequence of
entangled ecosystems and not changing might possibly be lethal. This view matches
a dynamically unstable scenario where changes keep happening all the time and, as
in Lewis Carroll’s Through the looking glass, species need – as Alice does – to con-
stantly run to remain in the same place. Such picture was early supported by Leigh
Van Valen’s work, and is known as the Red Queen hypothesis.
The Red Queen model was introduced by Leigh Van Valen in 1973 [87]. It was
conceived as a theoretical explanation for the observation that the extinction prob-
ability of a species is approximately independent of its length of existence [4, 87].
Accordingly with this view, Van Valen observed that the vast majority of taxonomic
groups analyzed displayed exponentially decaying survivorship curves. This result
implied constancy in the probability of extinction of the taxa, regardless of their
previous duration. That is, both data from the fossil record and from extant species
suggested that a given species may disappear at any time, irrespective of how long
it has already existed. This unexpected phenomenon, termed the Law of Constant
Extinction, can be formulated, in a simple way, as follows: If N(t) indicates the
number of species at a given time and we follow their presence over time (ignoring
other events) we would observe an exponential decay law, namely:
dN
dt = −δ(t)N,
where δ(t) indicates a time-dependent extinction rate. If N0 is the original number,
this differential equation is easily solved, and gives:
N(t) = N0 exp

−
 t
0 δ(t)dt
 
.
Despite the seemingly obvious assumption that δ depends on t, the surprising ob-
servation is that the observed curves ﬁt very well a constant decay rate δ, i.e., a
solution:
N(t) = N0e−δt,
where δ is the extinction probability of a species (per millions of years, Myr). This
law is essentially correct on average, despite the ﬁne-scale pattern being much more
episodic [56], as depicted in Figure 11.1(a). Here we display the surviving sets of
families found in the marine fossil record (the so called seudocohorts) through time.

11
Red Queen Coevolution on Fitness Landscapes
303
0
10
20
30
40
time (My)
1
10
100
1000
number of genera remaining
500
300
400
100
200
Millions of years ago
Percentage of families surviving
500
a
b
Fig. 11.1 Extinction and the fossil record of life. (a) Successive cohort survivorship curves
for 2,316 extinct marine families during the Phanerozoic (redrawn after [57]). Notice that,
together with an average exponential tendency to decline (which would give straight lines in
a linear-log plot), discrete and punctuated events are found in the dynamics of survivorship.
This pattern is well appreciated in (b) where we display the number of ammonoid genera
surviving over geologic time.
A roughly exponential decay can be identiﬁed, together with sharp extinction events
(see also Figure 11.1(b)).
Our intuition, guided by Darwin’s theory of natural selection, would have ex-
pected species within any group to become longer lived along time: if adaptation
improves species progressively through time, a decreasing probability of extinction
should be expected. That is, older species should last longer. However, careful anal-
ysis revealed that species of modern mammals are likely to become extinct as were
their ancestors living 200 Myr ago [4]. If evolution leads to improvement through
adaptation, why do modern mammals have the same extinction probabilities as their
ancestors? Van Valen’s interpretation is simple but counterintuitive: species do not
evolve to become any better at avoiding extinction. Van Valen suggested that a con-
stant extinction probability would arise in an always changing biotic community,
with species continually adapting to each other’s changes. The name for his conjec-
ture alludes to the Red Queen’s remark in Lewis Carroll’s Alice Through the Looking
Glass: “here, you see, it takes all the running you can do, to keep in the same place”.
Van Valen’s view of evolution is that species change just to remain in the evolution-
ary game and extinction occurs when no further changes are possible. Actually, the
Red Queen hypothesis is profoundly Darwinian, in that it puts emphasis mostly on
biotic interactions rather than on abiotic factors [29]. Van Valen further elaborated
this concept in much more detail in subsequent articles, showing that his theory was
compatible with the classic population-genetic view of species evolution [85, 86].
To test the plausibility of the Red Queen hypothesis, Maynard Smith and co-
workers (see [79] and references therein) developed a theoretical model describing
continuous (co-)evolution of species in a constant environment. Such model con-
sidered a ﬁxed number of S interacting species, deﬁning some ﬁtness measure φ,
and a maximum ﬁtness φ∗
i was supposed to exist for each species in a given ﬁxed,

304
R.V. Sol´e and J. Sardany´es
external biotic environment. At a given time, the ﬁtness φi and the maximum φ∗
i took
different values, and each species “tried” to reduce the so called lag load, deﬁned
as:
Li = φi −φ∗
i
φi
; i = 1,...,S.
If βij is the change in the lag load Li due to a change in Lj, then a mean-ﬁeld equa-
tion for the average lag load ⟨L⟩= ∑i(Li)/S can be derived. This is done by ﬁrst
separating, for each species, changes due to “microevolution of coexisting species”
from those linked with its own microevolution [79]. The entire equation for the
lag load variation in a given species is δLi = δcLi −δgLi, which simply says that
it typically increases due to changes in the other species and decreases due to mi-
croevolutionary changes in the species under consideration, i.e., δcLi is the increase
in the lag of the ith species caused by evolutionary changes in others, and δgLi is
the reduction in lag caused by changes in species i itself. This can be written in the
following way,
δLi =
S
∑
j=1
βijδgLj −δgLi,
where βij (with βii = 0) is the increase in Li due to a (unit) change in Lj. Assuming
that most species are close to their adaptive peaks, any evolutionary change in one
species will have a deleterious effect on the other species. The deterministic, time-
continuous equivalent model can be formulated with:
dLi
dt =
S
∑
j=1
βijkjLj −kiLi.
(11.1)
By taking the average in both sides of Equation (11.1), the evolution of the average
lag load is given by:
d⟨L⟩
dt
= 1
S
S
∑
i=1

S
∑
j=1
βijkjLj −kiLi
!
.
Assuming now that ki = k for all i = 1,...,S, the average lag load equation can be
written as:
d⟨L⟩
dt
= k
S
S
∑
j=1
(Ψj −1)Lj,
and it has a steady state solution if Ψj = 1 for all j = 1,...,S. In other words, if:
Γ ≡
S
∑
i=1
βij = 1;
∀j.
Otherwise, it can be shown that ⟨L⟩will decrease (increase) for Γ < 1 (Γ > 1). The
previous identity is telling us that the equilibrium state of this system is reached
through a balance between the reduction of the individual lag load of each species

11
Red Queen Coevolution on Fitness Landscapes
305
and the increases due to coevolutionary changes in the remaining partners. The main
result of this model is that evolution of species proceeds at an approximately steady
rate even in the absence of external or environmental changes [79]. At the end of this
chapter we will present a dynamic model of Red Queen dynamics where evolving
networks interactions are made explicit.
As we previously discussed, the Red Queen hypothesis provides a plausible ex-
planation of the fossil data record, but it turned to have more implications. For in-
stance, one suggested implication of the Red Queen hypothesis is that coevolving
pathogens may facilitate the persistence of outcrossing despite its costs. Specif-
ically, coevolutionary interactions between hosts and pathogens might generate
ever-changing conditions and thus favor the long-term maintenance of outcrossing
relative to self-fertilization [1] or asexual reproduction [26, 35] (see also [27] for a
review). Outcrossing (mating between different individuals) involves the introduc-
tion of unrelated genetic material into a breeding line, thus increasing genetic diver-
sity. The previous statements are supported by evidence from nature. For instance,
experimental studies on the coevolution of a nematode with a bacterial pathogen
[49] revealed that the action of parasites caused an increase of outcrossing in mixed
mating populations. Interestingly, these experiments also revealed that coevolution
with the pathogen caused extinction in populations without outcrossing, whereas
outcrossing populations persisted through reciprocal coevolution. Studies in natural
snail populations also revealed that sexual reproduction is more common when para-
sites are abundant and adapted to infect local host populations [40, 43]. Coevolution
and Red Queen dynamics were also identiﬁed for the crustacean genus Daphnia and
its parasites in pond sediments [10].
11.2
Red Queen on a Lattice: A Toy Model
Before we get into the more formal approaches taken to describe and simulate the
evolution and coevolution of species on ﬁtness landscapes, consider a simple toy
model that illustrates the basic idea behind van Valen’s metaphor. Imagine a world
where our species can move on the surface of a sphere. To makes things simpler,
consider a discretized surface, like a mesh covering the sphere1.
To simulate such a system we used the so-called cellular automata (CA) models
[32]. CA models are a common tool to investigate interacting agents in a physical
space, which, for our case, will be a surface. Each point in this mesh is a site, which
can be either empty or instead occupied by an individual of a given type. Let us start
with a simple “ecosystem” formed by a species exhibiting two phenotypic traits. Let
us indicate as Σ = {0,1} the two possible “genotypes” which can be understood as
two alleles of a given gene.
In our idealized model, 0 and 1 are the only two genotypes, each one associ-
ated with a set of parameters deﬁning the underlying phenotype. For simplicity, we
1 Speciﬁcally, we start from a lattice, whose surface has been discretized using a mesh, and
then we perform a projection of this mesh on a surface by properly deforming the initial
coordinates using a so called icosahedron-based pixelization. For details, see [80].

306
R.V. Sol´e and J. Sardany´es
Fig. 11.2 Spatial competition dynamics in a single-species model with two mutants. Starting
from a small set of occupied sites with 0 and 1 genotypes (white and black, respectively) scat-
tered on an empty (gray) landscape, we display spatial patterns for different simulation times,
T. After a few steps, local populations start to grow, but competition is still weak. Once the
two populations occupy enough space, competition starts to be effective but no global exclu-
sion occurs. Instead, the two populations coexist by expanding locally over spatial domains
that appear homogeneous. After a long time, the system is rather stable. Although structures
keep changing their boundaries, the global picture remains the same, with a spatial landscape
displaying large homogeneous patches. Here we used μ = 10−4, δH = 10−3 and rH = 0.35.
will consider completely symmetric sets. In other words, we have a neutral change
when moving from 0 to 1 and vice versa. These transitions occur proportionally to
mutation probability μ ∈[0,1].
We can use the previous system to simulate host-parasite interactions with match-
ing alleles (MA, see Section 11.4 for further details) interactions. Our CA is thus
given by a two-dimensional state space, Ω(i, j), with spatial coordinates (i, j). The
states, S, of the automaton at time t are given by S(i, j;t) ∈Σ = {Hk,Pk,E}, where
H and P denote, respectively, hosts and parasites deﬁned as 1-bit strings (i.e., with
k = 0,1). E indicates empty sites in the state space Ω.
CA models include dynamics by means of the state-transition rules, which deter-
mine the changes of the states according to the current states in a given site together
with its neighboring states. For this particular system we used the so-called Moore
neighborhood, which considers the eight nearest neighbors. The model rules are
given in the following.

11
Red Queen Coevolution on Fitness Landscapes
307
Fig. 11.3 Red Queen dynamics in host-parasite (prey-predator) coevolution. Here we have
added to the only-host system displayed in the previous ﬁgure an evolving 1-bit parasite. Par-
asites propagate through space provided they ﬁnd the same host genotype. Here two levels
need to be considered: the spatial framework (a) deﬁned by the local arrangement of indi-
viduals and the required genotypic matching. (b) Schematic diagram of the two populations
(upper and lower layers) with back and forth mutations (arrows) between genotypes and the
requirement of allele matching (vertical lines). The plots in (c) show the host populations (as
before) which now keep changing. Similar plots would be observed (although having less
dense patches) for parasites. Here we used, as before, μH = 10−4, δH = 10−3, rH = 0.35;
and μP = 10−4, δP = 0.2, and rP = 0.1.
State transition rules of the CA model for host-parasite matching allele interac-
tions with 1-bit genotypes
(1) Death: hosts and parasites decay with probabilities δH and δP respectively, accord-
ing to (recall k = 0,1):
Hk
δH
−→E,
Pk
δP
−→E.
(2) Birth of new hosts: hosts can replicate with probability rH, without and with mu-
tations, following the reactions:
Hk +E
rH(1−μH)
−−−−−−→2Hk.
Hk
rHμH
−−−→Hk +H1−k,
where μH is hosts mutation rate.
(3) Predation: Predator genotypes predate on hosts same genotype (assuming a perfect
MA interaction), with rate rP. In other words, they can reproduce only under the

308
R.V. Sol´e and J. Sardany´es
presence of the same host genotype in the neighborhood. If such condition is met,
the new reactions follow:
Pk +Hk
rP(1−μP)
−−−−−→2Pk,
Pk +Hk
rPμP
−−−→Pk +P1−k,
introducing again mutational changes proportionally to parasites mutation rate μP.
Because of the H-P interaction, hosts experience a parasite-driven mortality.
What is the dynamics of this simple model when no parasites are present? In Figure
11.2 we see an example of the time evolution of this model, starting from an initial
condition where we randomly scatter a small population of each genotype over the
sphere. The empty, available space is indicated in gray, whereas the two alternative
genotypes are shown as black and white squares. After a short transient, where both
variants expand with no special constrains, available sites become scarce and the
expanding patches grow and develop rugged boundaries. Such pattern stabilizes in
the long run, where we observe large domains of each class. This phenomenon is due
to the local exclusion of our identical competitors [71] that allows global coexistence
to occur.
The previous scenario shows that competing populations end up in a predictable
community structure with no further (global) changes. However, when an additional
component – parasites (or predators) – is added in the same system, it immediately
triggers the emergence of an unstable dynamical state. This is shown in another
example in Figure 11.3, where we again represent the host populations, now starting
with the same condition as in Figure 11.2 but adding also some randomly distributed
predators.
At any step, the spatial distribution changes rapidly and complex waves of ex-
pansion and contraction, affecting both genotypes, are observable. Sometimes, the
extinction of the parasites returns our system to the previous conditions without par-
asite (and a spatial segregation pattern). This occurs for example when the mutation
rate of the parasite is too small or its death rate too high. Sometimes, the pressure
of the parasites is so strong that they cause the extinction of the hosts and the even-
tual collapse of the whole host-parasite system. Interesting dynamics occur when
parasites are able to reliably match their preys and reproduce at a reasonable pace.
Similarly, mutation rates need to be high enough to react to depleted host popu-
lations and at the same time allow for a conservation of genetic information, thus
avoiding undesirable drift (see Section 11.5.1). In other words, intermediate rates of
parasite pressure end up in Red Queen evolution.
Here the system constantly changes as a consequence of the hide-and-run effect
induced by the parasitic species. Each time a parasite ﬁnds a suitable host sharing
the same bit, it replicates and will keep expanding provided that it ﬁnds additional
hosts in the neighborhood. The end result is a spatial pattern of propagating patches
and constantly changing distributions of the two available genotypes.

11
Red Queen Coevolution on Fitness Landscapes
309
11.3
Fitness Landscapes
Fitness landscapes are a very useful tool and an important concept in evolution-
ary biology. They are used to map, represent or visualize the relationship between
genotypes (or phenotypes) and reproductive success or ﬁtness. Fitness landscapes
were ﬁrst introduced by Sewall Wright and were then extended by other authors (see
[38, 54] and references therein). Fitness landscapes assume that each genotype has
a well-deﬁned ﬁtness value, which is represented with a height or peak in the land-
scape (see Figures 11.5 and 11.8). A landscape simply means a single-valued scalar
function, f(x), of the state or conﬁguration x of a system. The variable x typically
has very many dimensions, and thus may be often written like a multidimensional
vector, as a set of N components x = (x1,x2,...,xN). The term landscape is inspired
from the geographic landscapes in which the height h above sea level is a simple
function h = f(x1,x2), of the two-dimensional location x = (x1,x2). In the ﬁeld of
biology, ﬁtness landscapes are generically representing the ﬁtness of a given biolog-
ical entity as a function of its genotype or phenotype. As biological entity we refer
to a given organism or to a particular macromolecule or cell of that individual.
Fitness is a relative measure, since it may depend on the environment and on
other interacting organisms [54]. Fitness can be given by several properties, or by a
combination of them. For instance, we can use replication or reproduction success
as a measure of ﬁtness. Properties like infectivity, migration capacity, ability to co-
operate, among others, can also deﬁne a ﬁtness which may facilitate survival and
adaptation. As Jacob [33, 34] stated, adaptation typically progresses through small
changes involving a local search in the space of possibilities (e.g., sequences space).
The paradigm is a hill-climbing process via ﬁtter mutants which ”move” towards a
global or local optimum in the ﬁtness landscape (see Figure 11.4(A)). The hill-
climbing framework was originally proposed by Wright [90, 91], who introduced
the concept of space of possible genotypes. Under this framework, each genotype
has a given ﬁtness, which belongs to a distribution of ﬁtness values over the space of
genotypes in the ﬁtness landscape. Depending upon the distribution of ﬁtness val-
ues, the ﬁtness landscape will become more or less mountainous. The behavior of
an adapting population will depend on how rugged the ﬁtness landscape is, on the
size of the population, and on the mutation rate which moves a population from one
genotype to another in sequence space. The motion of a population over a ﬁtness
landscape also depends on whether the population reproduces asexually or sexually.
The latter reproduction involves mixing of genotypes which can involve reaching
more distant points in ﬁtness landscape, compared to asexual reproduction [38].
The ﬁtness landscape concept has been widely used in both evolutionary and
coevolutionary biology. Organisms do not merely evolve, they coevolve with other
organisms. As a difference from evolution, that can be roughly characterized as an
adaptive search on a “potential surface”, in coevolution there may typically be no
such potential surface, the process being far more complex [38]. Actually, in co-
evolutionary processes the ﬁtness landscape of one organism can deform and heave
as the other organisms make their own adaptive moves. Under this perspective, one

310
R.V. Sol´e and J. Sardany´es
can interpret coevolution as both dynamical and evolutionary processes occurring
in coupled ﬁtness landscapes (see Figures 11.3(b), 11.4, 11.5, 11.8 and 11.10(a)).
For the sake of clarity, before accounting for coevolution, we will introduce, in
Sections 11.3.1 and 11.3.2 some information about evolution on ﬁtness landscapes.
First, we will describe evolutionaryphenomenain simple ﬁtness landscapes, and also
present a theoretical body to model evolution in these types of landscapes. Then,
we will extend our explanations to more complex, rugged ﬁtness landscapes. From
Section 11.3.3 onwards (togetherwith the introduction section above)we will strictly
focus on coevolutionary phenomena. As an example of coevolution at small scales,
Section 11.3.4 includes the view of RNA virus evolution from the perspective of the
Red Queen hypothesis. The remaining sections will deal with some examples and
models in higher biological scales, from complex ecosystems to macroevolution.
11.3.1
Simple versus Coupled Fitness Landscapes
Models on evolution have considered different theoretical and computational frame-
works to characterize several levels of complexity. One of the most successful ap-
proaches to address evolutionary phenomena (as well as coevolution as we will
discuss later) on ﬁtness landscapes is given by the digital genomes approach [21].
Under this approach, using as an example the evolution of RNA genomes, we can
develop a mapping between RNA sequences (deﬁned as a chain of nucleotides in-
volving a four-letter alphabet Ω) and binary sequences, according to:
F : Ω = {U,G,A,C} −→Σ = {0,1}.
Alternatively, one can use another Boolean representation using spins instead of
bits:
F∫: Ω = {U,G,A,C} −→Σ = {+1,−1}.
Both approaches are equivalent because the mapping has the same nature. How-
ever, the spins approach exploits some advantages of considering ”up” and ”down”
conﬁgurations to describe the microscopic dynamics.
Let us deﬁne the ith string of the population, Si = (Si1,...,Siν), as digital genomes
(i.e., sequences of purines and pyrimidines only incorporating the linear information
encoded by the string) of length ν. In order to determine the functional relevance of
these sequences, we need to map them to a sequence-ﬁtness measure, which can be
deﬁned as:
f : Si ∈Σν −→f(Si).
This functional relation can be generically divided into two types: (i) the different
bits of a string play an independent role in ﬁtness; or (ii) some bits of the string inﬂu-
ence others in a nontrivial way. Case (ii) corresponds to what is known as epistasis.
Epistasis occurs when the phenotypic effect of a mutation depends on the pres-
ence of other mutations in the genome. Epistasis becomes especially important in
highly-compacted genomes that are expected to contain multifunctional proteins or
overlapping genes. In this sense, epistasis has been studied and characterized for

11
Red Queen Coevolution on Fitness Landscapes
311
RNA viruses, both experimentally and theoretically (see [18] for a review and
[64, 65]). In a more general way, epistatic interactions play an important role in evo-
lutionary genetic systems almost whenever multi locus genetics matters and plays
a central role in the evolution of genetic systems such as sex and recombination,
ploidy, genomic segmentation and modularity, genetic incompatibility and specia-
tion, mechanisms of mutational robustness, mutational load for deleterious muta-
tions through genetic drift, and the rate of adaptive evolution [12].
The digital genomes approach allows us to use an abstract, multidimensional
representation of the potential set of states accessible to a ν-bits digital genome.
This set or space is given by a sequence space in the form of a hypercube, H ν = Σν,
which can provide, at low dimensions, some intuitions about the behavior of strings
under selection-mutation pressures (see Figure 11.4). If only small mutation rates
are considered, transitions between sequences will take place only involving nearest
neighbors in sequence space, thus differing only in one bit.
In general, for a given mutation rate, μ, two sequences S and S′ will be obtained
from each other with a given probability, given by:
Wμ(S →S′) = μdH(S,S′)(1 −μ)ν−dH(S,S′),
where dH(S,S′) is the Hamming distance among the two sequences (i. e., the num-
ber of different bits), with:
dH(S,S′) =
ν
∑
i=1

1 −δSi,S′
i

,
where δi,j is Kronecker’s delta with δi,j = 1 if i = j and δi,j = 0 if i ̸= j. Here
Wμ can be interpreted in probabilistic terms: it is the probability of having exactly
dH differences between the two digital genomes. This function allows introduction
of the dynamics associated with mutations as transition probabilities. For the spin
mapping, the transition probabilities can be expressed as:
Wμ(S →S′) = N exp

−β
ν
∑
i=1
SiS′
i

,
where the β term, deﬁned as β = log(μ/(1 −μ))/2, can be interpreted in terms
of a temperature, with N being a normalization constant. Once we deﬁne the ﬁt-
ness function associated to each vertex of the hypercube, we can characterize the
dynamics.
If N(S,t) indicates the fraction of strings having a given sequence S ∈Σν at time
t, Eigen’s formulation [17] describes the population dynamics as a set of nonlinear
differential equations, given by:
dN(S,t)
dt
= ∑
S′
Wμ(S′ →S)f(S′)N(S′,t)−

∑
S′
f(S′)N(S′,t)

N(S,t)
(11.2)

312
R.V. Sol´e and J. Sardany´es
100
010
000
001
110
111
101
011
H
3
a
b
c
d
100
010
000
001
110
111
101
011
H
3
100
010
000
001
110
111
101
011
H
3
100
010
000
001
110
111
101
011
H
3
100
010
000
001
110
111
101
011
W(000        010)
W(010        000)
H
3
Genotype
Fitness
.
.
A
B
Fig. 11.4 (A) Schematic representation of a ﬁtness landscape with three peaks. Depending on
the initial condition in the genotype space, the population will evolve towards different max-
ima due to mutations which result in motions in the landscape. (B) Fitness landscapes can
also be represented in the sequences spaces (here using digital genomes). Such systems allow
deﬁning trajectories followed through string evolution. Four standard cases of 3-dimensional
sequences space (where the size of the nodes denotes each string ﬁtness value) are also dis-
played: (a) ﬂat, (b) Fujiyama, (c) Swetina-Schuster (single peak), and (d) rugged ﬁtness land-
scapes.
The ﬁrst term on the right-hand site of Equation (11.2) corresponds to positive
contributions to the abundance of S due to mutation transitions from other strings
of the sequence space. The second term includes all the reverse events leaving the
node occupied by S. Figure 11.4(B) illustrates the information described in Equa-
tion (11.2) for 3-bit strings (i.e., ν = 3). The nodes of the hypercube indicate the
population size and the three potential transitions from 000 to other strings differing
in one, two or all bits are indicated by arrows of different colors (see [18] for the
extension of the previous results to discrete dynamical systems).
Simple ﬁtness landscapes can be deﬁned from our previous deﬁnitions. Roughly,
a sequences space is a discrete space including all sequence combinations of a given
sequence, which are connected to neighboring sequences differing in one bit. This
space thus results in a set of nodes or vertices (sequences) which are connected
by single-point mutations (see Figure 11.4(a-d)). For a given sequence of length
ν, the dimension of the sequences space is given by H ν. For DNA or RNA se-
quences, the total number of nodes in the sequences space will be 4ν, which results
in an astronomic number. As we saw before, this inherent complexity can be re-
duced using digital genomes deﬁned as bit strings or as “up” and “down” spins.
The bit-strings approach allows one to simulate the processes of (co-)evolution

11
Red Queen Coevolution on Fitness Landscapes
313
and selection under different types of rules or interactions describing different pro-
cesses in biological systems. For instance, in cancer dynamics [69], in RNA viruses
[18, 41, 64, 65, 66, 68, 70], and, in the context of coevolution in matching-alleles dy-
namics (see Section 11.4), among others. As a simple, illustrative example, Figure
11.4 shows four different simple ﬁtness landscapes. The sequences space in Figure
11.4(a) is a ﬂat ﬁtness landscape, where all the sequences have the same ﬁtness f0,
according to H (Si) = f0. If the sequences space has a least ﬁt sequence (e.g., 0)
and then the ﬁtness increases at increasing number of mutations, we have the so-
called Fujiyama ﬁtness landscape, shown in Figure 11.4(b), with the ﬁtness given
by H (Si) = f0 + ∑ν
k=1 Sik (see [55] for the application of the Fujiyama landscape
to RNA viral populations). Another widely studied case is the so-called single-peak
ﬁtness landscape, which is shown in Figure 11.4(c). For this landscape, the ﬁtness
can be deﬁned as H (Si) = f0δSi,1 + f1(1−δS1,1), with f0 > f1 (see [46, 63, 68] for
some examples and applications of the single-peak ﬁtness landscape).
11.3.2
Evolution on Rugged Fitness Landscapes
The sharp, single-peak ﬁtness landscape cited at the end of the previous section
deﬁnes an extreme in a hierarchy of models introducing different levels of depen-
dencies among genes. A different approximation deals with landscapes in a much
more general way, by allowing them to display a given number of local maxima
generating a mountainous landscape. Together with the simple ﬁtness landscapes
we display a rugged ﬁtness landscape in Figure 11.4(d). For this landscape, where
each sequence has a different ﬁtness resulting in as many peaks as sequences, the ﬁt-
ness can be given by H (Si) = 1
ν ∑ν
k=1 ξik, with ξik ∈k[0,1] being a random number.
The best known model for the evolution on rugged ﬁtness landscapes is Kauffman’s
NK model [37, 38], which is also deﬁned on a hypercube. It was originally proposed
as a representation of haploid genomes involving two alleles per locus with additive
contributions to ﬁtness from different loci.
The NK model is a simple model of random epistatic interactions. In this model
N is the number of parts of a system (e.g., genes in a genotype or amino acids
in a protein). Each part makes a ﬁtness contribution which depends upon that part
as well as upon K other parts among the N. Thus, K reﬂects how richly cross-
coupled the system is indicating how many other genes inﬂuence a given gene,
i.e., the richness of epistatic interactions among the genes. Such a model, under
parameters alteration, generates a family of increasingly rugged multi peaked land-
scapes. Once again a ﬁtness function is introduced, f = f(Si1,...,Siν), and changes
in the traits are assumed to occur by means of single, one-bit steps (i.e., single-point
mutations). These single-chain events are consistent with our assumption of small
mutation rates. In this way, a given string obtained by inaccurate replication allows
to perform a random adaptive walk from a given node towards one of its ν nearest
neighbors if this leads to an increase in ﬁtness. A direct consequence of this process
is that once a local peak is reached, no further changes are allowed to occur. This is
completely different from the assumptions made above, which assume the presence

314
R.V. Sol´e and J. Sardany´es
of a preferred sequence around which other sequences have a lower ﬁtness value.
In the context of NK landscapes, a local peak is very simply deﬁned: if all nearest
neighbors in the hypercube are less-ﬁt, we have a ﬁtness local maximum.
How can we construct a system displaying a NK landscape? Kauffman suggested
a simple approach using ﬁtness tables: for each element Sij, if it is inﬂuenced by K
other elements, each element contributes in an additive way to the overall ﬁtness.
In other words, if we consider the two-locus model and assume that a given locus
i contributes to the global ﬁtness associated to S by an amount fi(S) ∈[0,1], the
global ﬁtness is given by the average value:
f(S) = 1
ν
ν
∑
i=1
fi(S).
As K grows, the ruggedness of the landscape increases, since more complex inter-
actions are allowed to occur.
An interesting feature of the NK model is that, because of its simplicity, it allows
the prediction of some evolutionary dynamical patterns. As an example, consider
that ﬁtness values are random and uncorrelated, i.e., f(Si1,...,Siν) = ξ, where ξ ∈
[0,1] is a random number with uniform distribution. This random ﬁtness landscape
has many local ﬁtness peaks. This number, ML, given as
ML(ν) =
2ν
ν + 1,
is very large, and thus our digital sequences can get trapped in a very large num-
ber of optima. To see this, consider the number of neighbors of a given node and
compute the probability that this node is a local maximum. The chance that it is the
ﬁttest among its ν neighbors and itself, given the random choice of values, is simply
P1 = 1/(ν + 1). Since there are 2ν possible strings, the fraction of those who are
local maxima is ML(ν) = 2νP1. An extension of this model can easily be introduced
by means of the so-called Fujiyama landscape (see the previous section), where a
ﬁtness function is deﬁned now as follows:
f(Si) = 1
z (1 −s)k,
with k = ν −∑ν
l=1 Sil, where z = ∑ν
j=1(1−s)j is a normalization factor. The param-
eter s weights the steepness of the peak.
Similarly, the presence of epistatic interactions can be introduced using the
sequence-dependent ﬁtness:
f(Si) = 1
2
"
1
2
dH(Si,Sn)ξ
+ 1
#
,

11
Red Queen Coevolution on Fitness Landscapes
315
where ξ > 0 deﬁnes the degree and type of epistasis (for ξ < 1 we would have
antagonistic interactions whereas ξ > 1 deﬁnes synergistic epistasis (see [18] and
references therein)).
11.3.3
Coevolution on Rugged Fitness Landscapes
The previous sections provided the reader with a broad framework that will now
be extended to the subject of coevolution. As we already focused on evolution on
rugged ﬁtness landscapes, let us start with coevolution on these landscapes (in fol-
lowing sections we will analyze coevolutionary dynamical models in simpler ﬁt-
ness landscapes). In the context of rugged ﬁtness landscapes, the NK model can
be modiﬁed to analyze evolution between many interacting species, by means of
the so-called NKC model [37]. This model introduces a new parameter, named C,
which denotes the number of couplings between different species (also represented
as strings). Now, the ﬁtness of the NK model needs to be modiﬁed in order to in-
troduce the coupling effects where each trait receives inputs from C other traits
from different species. These traits are randomly chosen between the S species of
the ecosystem. The NKC model includes three main parameters describing: (a) the
number of traits required to characterize a given species (N), (b) the number of so-
called epistatic interactions among genes in the same species (K), and (c) the number
of interactions among traits of different species (C), which introduce coevolution.
Figure 11.5 illustrates this approach for N = 3 traits of two interacting species.
In the ﬁgure, the local peaks are indicated by black circles. Each species is deﬁned
by a set of traits, which are coded by bit-strings. Such traits are connected among
the different species. In Figure 11.5(a), species 1 is not located in a local peak. As
a result of an adaptive walk, it will reach the local peak by mutation. However, as a
result of the change in species 1, species 2 is now not located in a ﬁtness peak. The
landscape of species 2 has been modiﬁed by the adaptive motion of species 1.
The NKC model was analyzed computationally by Kauffman and Johnsen [37],
and they showed that this system was dynamically very rich. They identiﬁed a
chaotic phase, where the ecosystem is always changing and species never end up
in a particular conﬁguration (i.e., species do not stop at a given local peak). As we
will discuss later, many other different models suggest that chaos can be found in
Red Queen dynamics. They also identiﬁed a frozen phase, where all species settle
down to local peaks. Interestingly, for ﬁnite systems at the boundary between the
chaotic and the frozen phase in the parameters space, small perturbations generate
a coevolutionary avalanche of changes through the system. Typically occurring at
critical states, the distribution of such avalanches was shown to follow a power-law.
Kauffman and Johnsen mapped these avalanches into extinction events, suggesting
that the number of changes in species was proportional to the extinction of less-ﬁt
variants. Such a result did not ﬁt the predictions of fossil record extinctions. How-
ever, a variation of this model by Newman and Palmer [50], which allowed changes
in the parameters, gave an exponent which agreed with fossil record data (see also
Section 11.6).

316
R.V. Sol´e and J. Sardany´es
S1
S′
1
S2
S′
2
S2
S1
1
1
0
1
1
1
S2
0
1
0
1
1
1
S′
1
S2
a
b
Fig. 11.5 Coevolutionary dynamics in the NKC model. Here only two species (S1 and S2)
are considered, each one described by N = 3 traits, which are represented in cubic sequences
spaces. Black circles in the hypercube nodes indicate the ﬁtness associated to each string, and
current states are highlighted with open circles in (a). Each bit is assumed to interact with a
number of different bits from the other string (genome) as indicated in the lower diagrams.
Once the ﬁrst species changes by climbing to a local optimum, the landscapes of both species
get modiﬁed. The second species now will be forced to change too, since it is now placed in
a low-ﬁt state and will next shift to another local peak (here indicated with a dashed circle in
(b)). If no such movement is possible, extinction can take place.
The two phases of the NKC model can be derived from simple theoretical argu-
ments setting K = N −1 [3]. It is known that a given species, in order to reach a local
ﬁtness, needs a number of walks Lw, which is on average Lw ≈ln(N). If we assume
that all species are at local peaks and one of them, named a, is perturbed (i.e., is
randomly positioned on the ﬁtness landscape), then a will start again to climb some
other local peak. If C is large enough (i.e., interactions among species are impor-
tant), the other species except a can see their landscape modiﬁed also starting to
change. Following this idea, where each adaptive walk involves a change in a given
trait, which can in turn affect other species traits, we can determine a critical con-
dition given by a combination of N and C able to trigger a chain reaction able to
percolate through the system. More concretely, the probability that a given trait in a
random species depends on species a is C/N. The critical condition is that at least
one change in a species occurs. This actually means:

11
Red Queen Coevolution on Fitness Landscapes
317
Lw
Cc
N = 1,
with Cc = N/ln(N). That is, on average, one out of C randomly chased genes is
among the Lw changed genes. In other words, when the number of traits is such that
C > Cc, interactions among different genotypes constantly modify the underlying
ﬁtness landscapes, a scenario under which coevolutionary avalanches take place.
11.3.4
Red Queen Dynamics in RNA Virus
First consider a very simple example of coupled ﬁtness landscapes and two iden-
tical populations climbing and competing on them. The Red Queen hypothesis of
evolution has been widely discussed within the context of RNA viruses [55, 70],
where the dynamics of viral populations can be interpreted as a dynamical process
of growth, competition and selection taking place in the sequence space. The ﬁtness
landscape for a virus is usually deﬁned in terms of replication, infectivity or trans-
mission rates, among others. The landscape appears as a multipeaked surface, where
the local maxima represent optimal ﬁtness values which can be reached by muta-
tion. Here, the initial condition plays an important role since depending on where
the quasispecies2 is located in the sequences space, the population will evolve by
exploring near genotypes by mutation. Competition experiments between several
clonal viral populations [8, 55] provided a good illustration of two basic principles
of evolutionary ecology: the Red Queen dynamics and the principle of competitive
exclusion.
Experimental results were carried out with two clones of Vesicular stomatitis
virus (VSV, see Figure 11.6). Such experiments involved the mixing of two clonal
populations of VSV of equal ﬁtness. Passage experiments allowing these popula-
tions to grow and compete were performed using standard virus plaque assays. More
speciﬁcally, genetically marked monoclonal antibody-resistant (MARM) clones of
equal ﬁtness to the wild-type VSV were used and their relative frequencies were
monitored along passages.
The MARM clones only differed in a single mutation with neutral affects not
changing viral ﬁtness. These experiments revealed that both competing populations
grew up showing steady increases of ﬁtness, but, at some point, one of the two pop-
ulations suddenly excluded the other one. The winner of this competition process
was not always the same (see Figure 11.6). Although the time scale of the divergence
seemed highly predictable. The simultaneous increase of ﬁtness of the two popula-
tions and their predictable divergence was suggested to be a product of the Red
Queen effect [70]. In the context of RNA viruses, newly arising mutants with higher
ﬁtness were able to outcompete lower-ﬁtness ones. At the level of viral genomes or
sequences, a favorable mutation within one quasispecies triggers evolutionary re-
sponses in the second one, forcing it to evolve. Overlapped with this evolutionary
process, and related to the dynamics, the principle of competitive exclusion is also
2 The term quasispecies is used to deﬁne the heterogeneous population of viral genomes in
RNA viruses.

318
R.V. Sol´e and J. Sardany´es

Fig. 11.6 Left: Vesicular stomatitis virus (VSV) virion which contains a negative-sense,
single-stranded RNA genome. The bullet shape is characteristic of the Rhabdoviridae family
(drawing by Ricard V. Sol´e). Right: Time changes of MARM-C:wt ratio in independent repli-
cas. (a) Shows eighteen replicas started after passage 12. (b) Displays six replicas started from
passage 14. In both panels the populations start to diverge after approximately 23 passages
(indicated with small arrows). Plots obtained from [55].
at play. This principle states that when two species are strongly competing for the
same ﬁnite resources, the ﬁtter one asymptotically outcompetes the least ﬁt.
The previous experiments were modeled by Sol´e and collaborators [70] using
different approaches. The simplest one was a bit-string model that considered a pop-
ulation of N bit-strings, named Si, with sequences: Si = S1
i S2
i ...Sν
i ; with i = 1,2,...N
and S j
i ∈{0,1}. At each time generation (passage), the algorithm repeated N times
the following rules: a random string, say Si, of the population was chosen for repli-
cation. Replication, proportional to replication probability r(Si), took place by re-
placing one of the strings of the population (also randomly chosen), say S j by a
copy of Si. Replication presented error, at a rate (per bit and replication cycle) μ.
So the probability to copy exactly the same bit was 1 −μ. The mapping between
sequence composition (genotype) and replication rate (phenotype) was done using
the Fujiyama ﬁtness landscape (see Figure 11.4(b)), involving the linear relation:
r(si) = 1
ν
ν
∑
j=1
S j
i .
As we previously explained, this ﬁtness landscape ignores epistatic interactions.
Computer simulations revealed the same behavior obtained with the experiments
with VSV. Figure 11.7 displays the outcome of the model for a population of
N = 3000 strings of length ν = 16. The populations were initialized in such a
way that the initial ﬁtness of both populations was low, also keeping equal their
mean replication rates. During the simulations, the strings were competing for the
available space (i.e., N available sites). The upper panel of Figure 11.7 shows the
total population size of each population, which was maintained roughly constant
along time. However, after approximately t ≈20 passages, one of the two popula-
tions started outcompeting the other one, that ﬁnally disappeared. Once ecological

11
Red Queen Coevolution on Fitness Landscapes
319
-
-
-
-
-
-
Fig. 11.7 (Upper) Dynamics of the bit strings model using a population with N = 3000
strings of length ν = 16 using μ = 10−3. The main plot shows the time dynamics of both
populations. The inset shows the mean ﬁtness, ⟨r⟩, also for both populations along time (see
[70]). The observed changes can be easily interpreted in terms of a parallel climbing of both
species on their Fujiyama landscapes together with ongoing competition for resources. Below
we illustrate this by means of a small, three-bit landscape. Initially both species (their popu-
lations are indicated with open circles) grow slowly and competition is weak. As they climb
up and increase their replication rates, competition become strong and symmetry breaking
occurs (see text).

320
R.V. Sol´e and J. Sardany´es
competition became tight, selection pressure became stronger and the initial paral-
lel growth in ﬁtness for both populations was no longer sustainable. This dynamical
divergence was a direct outcome of a “symmetry breaking” phenomenon which ex-
plained the VSV experiments (see [55, 70] for details).
11.4
Gene-for-Gene and Matching Alleles Models of
Coevolution
Coevolution is the change of a biological object triggered by the change of a related
object. Coevolution can occur at many biological scales: at the molecular level as
correlated mutations between amino acids in a protein [92], or at the macroscopic
scale as covarying traits between different interacting species in an environment.
In coevolution, each entity exerts selective pressures on the other, thereby affecting
each other’s evolution. This process is schematically illustrated in Figure 11.8(d).
Here we show two ﬁtness landscapes for preys and predators. Imagine preys are
viruses (or cells infected by viruses) and predators are cytotoxic lymphocytes (cells
of the immune system that kill infected cells) that act upon the activation of the
adaptive immune response. If the virus, located in the peak with the green dot is
able to mutate, visiting the highest peak, the immune system will not be able to rec-
ognize and remove it. However, if the virus moves towards the lower peak, which is
recognized by dendritic cells or macrophages, able to trigger the immune response,
virus populations with this genotype will be impaired in terms of number of par-
ticles due to the action of cytotoxic lymphocytes that will remove infected cells.
This simple example illustrates how the evolution of one of the partners inﬂuences
the evolution of the other, and vice versa, in a coevolutionary arms race. Broadly
speaking, coevolutionary interactions can be antagonistic or mutualistic. The for-
mer involve negative interactions such as predation or parasitism. The latter being
found when two or more species coevolve by means of cooperation. Coevolution
can occur for two interacting species (pairwise coevolution) or can involve a num-
ber of different species, which are evolving in responses to another set of species
(diffuse coevolution).
There are at least about six proposed forms of coevolution between species, some
involving reciprocal adaptation and others a combination of adaptation and specia-
tion [81, 82, 83]. In the context of coevolution between hosts and parasites, some
of them had a particular importance in this type of interactions. One is Ehrlich and
Ravens [16] hypothesis of how the evolution of defence and counterdefence in host-
parasite interactions may lead to the radiation of species through the process of
escape-and-radiation coevolution. The genetic basis of infection in real ecosystems
has been also represented by two major models: the so-called gene-for-gene (here-
after GFG) and matching alleles (hereafter MA) models. The GFG model is based
on data from plant-pathogen interactions, especially in the ﬁeld of crop plants [20].
Interestingly, the ﬁrst mathematical model of coevolution was explicitly based on
assumptions of a GFG interaction [47]. Later, a multitude of real examples on GFG
coevolution were identiﬁed between plants and pathogens, mainly between plants

11
Red Queen Coevolution on Fitness Landscapes
321
Fig. 11.8 Coevolutionary phenomena can be interpreted as the coupling of ﬁtness landscapes
by means of ecological interactions (dashed arrows). We show neutral sequences spaces for
predator-prey (host-parasite) species with perfect matching alleles interactions for (a) ν = 1,
(b) ν = 2 and (c) ν = 3, being ν the length of the sequences. (d) Prey’s evolutionary fate will
not only depend on its own and independent exploration of the ﬁtness landscape, but also
on predator’s evolution (indicated by the small arrows). If a given prey (green circle) moves
towards the highest peak, it will escape predator’s action increasing its ﬁtness. However, if
prey climbs to the lowest peak, and the predator mutates moving to the same peak, host’s
ﬁtness and reproductive success will diminish.
and fungi, bacteria and viruses (see [84] for a review). The GFG hypothesis states
that ”for each gene that conditions reaction in the host there is a corresponding gene
that conditions pathogenicity in the parasite” [84, 39]. The key feature of this model
is that one parasite genotype can infect all host genotypes.
As a difference, in the MA model, favored by invertebrate zoologists [23], an
exact genetic match is required for infection (Figure 11.8(a-c)). MA models underlie
most of the theory constructed to understand the effects of host-parasite coevolution
on sex and recombination [27, 30]. Parker [52] pointed out the importance of MA
models for the study of sexual reproduction,suggesting it may hamper the generality
of the Red Queen theory for sex. It has been argued that both GFG and MA models
are not totally disconnected: they are two ends of a continuum (see [2] for further
details).
In the following sections, we will introduce and review recent models and re-
sults about coevolving replicators with antagonistic interactions, mainly focusing
on MA models. These models, although being suitable to analyze coevolution at
small scales (e.g., immune system-viruses) provide good intuitions in larger scales,
such as in spatially-extended ecosystems (Section 11.5.1). In Section 11.5.2. we will
develop some theory aimed to describe the dynamics arising from MA predator-prey
interactions. Finally, we will explore large scale coevolution by means of a complex

322
R.V. Sol´e and J. Sardany´es
network model reproducing the extinction pattern found in the fossil record data
discussed in the introduction section.
11.5
Minimal Coevolutionary Systems
Coevolutionary phenomena can be studied considering minimal models. Such mod-
els can help us to understand fundamental phenomena arising from species interac-
tions and evolution. We notice that coevolution is a highly nonlinear phenomena,
since species interactions give place to nonlinear couplings that can result in very
rich and complex dynamics. In this section we will ﬁrst introduce a minimal system
of replicators with matching alleles (MA) dynamics moving, replicating and evolv-
ing on a surface. Then, we will develop a general mathematical model describing
MA interactions for haploid genotypes, assuming well-mixed populations thus ig-
noring spatial correlations. As the reader will see, the dynamics of such small and
simple systems can indeed be very complex.
11.5.1
Spatial Red Queen Dynamics
At the beginning of this chapter we have illustrated the idea of coevolution with
a very simple model simulating replicator spatial dynamics with MA interactions.
Together with such model, other approaches have focused on the same subject by
considering further complexity, such as spatial diffusion of replicators or larger se-
quences spaces. Recently, Sardany´es and Sol´e [59] explored a similar system sim-
ulating coevolution for host-parasite (prey-predator) replicators also using cellular
automata (CA) models.
The authors explored the spatio-temporal dynamics for three different host-
parasite systems considering 1-bit, 2-bits and 3-bits strings (the corresponding cou-
pled hypercubes are displayed in Figure 11.8(a-c)). Thus, one of the aims of their
work was to analyze the effects of increasing the size of the sequences space in the
spatio-temporal dynamics for MA interactions.
b
a
c
Fig. 11.9 Population equilibria for hosts (plain surfaces) and parasites (gridded surfaces)
replicators in the parameters space (rh,rp) for the spatially-extended model of coevolution
with diffusion using μh = μp = 10−2. Three different systems were analyzed, with: (a) ν = 1
bit, (b) ν = 2 bit and (c) ν = 3 bit (see [59] for further details).

11
Red Queen Coevolution on Fitness Landscapes
323
The model considered two populations of replicators given by host (prey) strings
of size ν: Si
h = (si1
h ,...,siν
h ); and by parasite (predator) strings of the same size,
Si
p = (si1
p ,...,siν
p ) with Sij
h ,Sij
p ∈{0,1} where i = 1,...,N, and N is the number
of different genotypes (N = 2ν). Both populations reproduced and evolved on a
two-dimensional space with toroidal boundary conditions. For this model we used
the so-called Von Neumann neighborhood, which considers interactions with the
four nearest neighbors. Speciﬁcally, the state-transition rules of the CA considered
self-replication with mutation, decay and spatial motion of strings. Rules imple-
mented are given below.
State transition rules of the host-parasite CA model with matching allele interac-
tions [59]
(1) Self-replication: If a host and a parasite occupy the same spatial position and have
the same sequence of bits (i.e., perfect MA), the parasite eliminates the host and
replicates, with probability rp, to a random neighbor provided it is empty. If only
the host lives in the cell, it replicates with probability rh to a neighbor cell provided
it is not occupied by another host string. Replication involves point mutations for
host and parasites, with mutation probabilities μh and μp, respectively. These rules
can be represented by the following set of reactions:
Si
h +ϑ
rh(1−μh)ν
−−−−−−→2Si
h,
(11.3)
Si
h +ϑ
rhW h
i j
−−−→Si
h +S j̸=i
h
.
(11.4)
Reactions (11.3) and (11.4) denote, respectively, error-free and erroneous host
replication.
Si
h +S j
p +ϑ
δi jrp(1−μp)ν
−−−−−−−−→2S j
p,
(11.5)
Si
h +S j
p +ϑ
δi jrpW p
jl
−−−−→S j
p +Sl̸= j
p
.
(11.6)
Similarly, reactions (11.5) and (11.6) represent, respectively, error-free and erro-
neous parasites replication, which is nonlinear due to the density-dependence of the
antagonistic interaction. The parameter δi j is again the Kronecker δ function where
δi j = 1 if i = j and 0 otherwise; and ϑ indicate some available building blocks (i.e.
mononucleotides) needed to built new strings. The terms W k
i j, with k = {h, p}, cor-
respond to the probabilities of erroneous replication for hosts (h) and parasites (p),
and are given by:
W k
i j = (1−μk)ν−dH[Sk
i ,Sk
j] · μ
dH[Sk
i ,Sk
j]
k
,
where dH[Sk
i ,Sk
j] is the Hamming distance between two sequences,
dH[Sk
i ,Sk
i ] =
ν
∑
i=1
|sk
i −sk
i |.
(11.7)
Equation (11.7) is a function returning the number of different bits when com-
paring two sequences. Such a function is also used to determine the matching
allele interaction between both host (Sh
i ) and parasite (Sp
i ) sequences, now with

324
R.V. Sol´e and J. Sardany´es
dH[Sh
i ,Sp
i ] = ∑ν
i=1 |sh
i −sp
i |, where sh
i and sp
i represent the bit value (0 or 1) in the
ith position in both strings. A perfect matching allele interaction will occur when
dH[Sh
i ,Sp
i ] = 0.
(2) Molecular decay: Host and parasite strings decay with probability δh and δp, re-
spectively, according to:
Si
h
δh
−→ϑ,
Si
p
δp
−→ϑ,
(3) Local diffusion: Host and parasite strings move, independently and randomly, to
empty neighbor cells with diffusion probabilities Dh and Dp, respectively.
To simplify the analysis, all the simulations were run with maximum diffusion con-
stants Dh = Dp = 1, also setting δh = δp = 10−2. The lattice was randomly inoculated
by either host and parasites random sequences.
As we previously mentioned, the rules were implemented for three different sys-
tems with different strings’ lengths: ν = 1 bit, ν = 2 bit, ν = 3 bit. For all three
different values of ν, the system underwent the same three types of asymptotic dy-
namics: (i) stable coexistence of hosts and parasites with sustained ﬂuctuations; (ii)
hosts survival and parasites extinction; and (iii) both hosts and parasites extinction
(i.e., coextinction). Populations’ trajectories in phase space suggested the presence
of chaotic coevolutionary dynamics [59] (see also [60]). In order to characterize
the importance of these three possible asymptotic states listed above, we built pa-
rameter spaces considering two key evolutionary parameters of hosts and parasites
coevolution: self-replication and mutation rates. Figure 11.9 illustrates the outcome
of some simulations in the parameter space (rh,rp) showing the average population
numbers for both global populations3 after some transient was removed for ν = 1
(Figure 11.9(a)); ν = 2 (Figure 11.9(b)); and ν = 3 (Figure 11.9(c)). A key result
was that the increase of the length of the replicators (i.e., increase of the size of
the sequences space) promoted stable coevolution, as shown by the reduction of
host-parasite coextinctions (Figure 11.9).
Moreover, for each of the genotype lengths we simulated three different sce-
narios, characterized by different values of hosts and parasites mutation rates. The
simulations revealed that asymmetries in mutation rates between hosts and parasites
had an important effect in the population dynamics: hosts were only able to escape
from parasites (causing parasites extinction) if they mutated much faster. Under this
condition, the scenario of host’s survival and parasites extinction was found for ex-
tremely low values of hosts’ self-replication rates. On the contrary, when μp > μh,
the region of parameters space with host and parasite extinction increased for the
three hypercubes analyzed, indicating that when parasites evolved faster than hosts
they were more efﬁcient in catching hosts thus increasing coextinction phenomena.
3 By global populations we mean the sum of all possible genotypes for a given population
i.e., hosts or parasites.

11
Red Queen Coevolution on Fitness Landscapes
325
11.5.2
Dynamics of Small Replicators with Matching-Allele
Interactions
The previous computational models considered antagonistic populations of bit-
strings replicating and mutating on a surface. The same system can be investigated
with a mathematical model by assuming no spatial correlations (i.e., inﬁnite diffu-
sion). A general model describing predator-prey matching-alleles (MA) interactions
can be formulated using a time-continuous deterministic model. Assuming a perfect
MA (see Figure 11.8 and Figure 11.10(a)), where each predator genotype can pre-
date only on its homologous prey genotype (i.e., predator genotype i predates on
prey genotype i, with i ∈{0,1}), the model is given by the following system:
˙xi = kh
i xi

1 −∑j∈H ν xj
K

−Aiξ(xi,yi)+
+ μh
i
ν

∑
< j>i
xj −xi

−εh
i xi,
(11.8)
˙yi = ξ(xi,yi)+ μ p
i
ν

∑
< j>i
yj −yi

−ε p
i yi,
(11.9)
with
ξ(xi,yi) = kp
i yixi
Ci + xi
.
(11.10)
The state variables xi and yi indicate, respectively, the concentration or population
numbers of the ith prey and of the ith predator genotype (with i = 1...2ν), which
deﬁne a ν-dimensional sequences space H ν.
Note that prey genotypes have a logistic-like growth constraint in self-replication
indicated in the ﬁrst term in parenthesis of Equation (11.8), where ∑j∈H ν xj, is the
total prey population and K the carrying capacity of the prey genotypes. The logis-
tic term involves exponential growth for small population numbers and saturation as
population values approach the carrying capacity. Moreover 1/Ai is the yield coefﬁ-
cient of prey genotype i to predator genotype i. Equation (11.10) is a Holling “type
II” functional response [6, 28], where predation rate is a saturating function of prey
density. Ci and kp are constants parameterizing the saturating functional response.
The constant kp, which describes the maximal predation rate, can also be interpreted
as the predator’s maximal self-replication or intrinsic growth rate.
Both terms ∑< j>i xj −xi, and ∑< j>i yj −yi, denote genetic diffusion by mutation
among neighboring genotypes for both prey and predator genotypes, which are pro-
portional to μh and μ p, respectively. Moreover, kh
i denotes the self-replication con-
stant (intrinsic growth rates) for prey genotypes; εh
i and ε p
i are decay rates which
can be interpreted as spontaneous hydrolysis rates as well as density-independent
death rates. If only a single genotype is present in each species, Equations (11.8)
and (11.9) are close to the well-known Rosenzweig-MacArthur model [89].

326
R.V. Sol´e and J. Sardany´es
As the reader will see, since the dimension of the dynamical system described by
the Equations (11.8) and (11.9) depends upon the length of the sequences, one may
expect different types of dynamics for different values of ν. As we will discuss in the
following sections, where we review results for ν = 1 [61] (Figure 11.10(a)) and ν =
3 [62] (Figure 11.8(c)), this is the case. The ﬁtness landscape for this predator-prey
system using ν = 1 is shown in Figure 11.10(a). Actually, this system was studied
for two different ﬁtness landscapes, given by a ﬂat or neutral ﬁtness landscape, with
kh
i ≡kh and kp
i ≡kp, ∀i (i.e., all genotypes share the same ﬁtness values) and for an
asymmetric ﬁtness landscape with kp < K p or kp > K p (i.e., one of the predator’s
genotypes has a higher ﬁtness in terms of population growth). For this latter case, a
predator with a higher ﬁtness actually means that a given genotype is more efﬁcient
in catching its preferred prey. For both scenarios we also assumed that mutation
rates for both prey and predator genotypes were equal, i.e. μh
i ≡μh and μ p
i ≡μ p,
∀i (see [61] for further details).
K
p
.
k
k
k
h
h
p
h
μ
μ
p
0 x
1 x
0 y
1 y
a
b
μ  ,
h μp
0
0.0025
0.005
0.0075
0.01
2.8
3.2
3.6
0 y
Fig. 11.10 (a) Minimal predator-prey system with matching alleles interaction (vertical
dashed lines) modeled with the Equations (11.8) and (11.9) for ν = 1. Upper and lower
marbles correspond, respectively, to predator (y) and prey (x) genotypes, which reproduce at
rates kp and kh (circular arrows), and mutate at rates μp and μh (straight arrows), respec-
tively. We show an asymmetric ﬁtness landscape for predators, with larger replication rates
for predator genotype 1 (i.e., Kp > kp). (b) Bifurcation diagram for predators with genotype
0, using mutation rates (μh and μ p are represented with thick and thin lines, respectively) as
control parameters for the neutral ﬁtness landscape (i.e., Kp = kp). At decreasing mutation
rates, the system undergoes a Hopf bifurcation resulting in a permanent oscillatory behavior
governed by a periodic orbit [61].
The analysis of the qualitative behavior of Equations (11.8) and (11.9) was
performed assuming a neutral ﬁtness landscape with εh
i = ε p
i ≡ε. This system
was shown to have three ﬁxed points, given by (x∗
i = 0,y∗
i = 0), (x∗
0,x∗
1,0,0), and
(x∗
0,x∗
1,y∗
0,y∗
1). The ﬁrst ﬁxed point, if stable, involved predator-prey extinction. The
second equilibrium involved prey survival and predator’s extinction whereas the
third ﬁxed point involved predator-prey coexistence, and thus it was the potential

11
Red Queen Coevolution on Fitness Landscapes
327
state of Red Queen dynamics. This third ﬁxed point, under symmetry conditions,
named (x∗,y∗), was given by:
x∗=
ε p
kp −ε p ,
y∗= (1 + x∗)(kh −2khx∗−εh)
kp
.
To study the stability of this ﬁxed point it was further assumed that kh = kp = 1, also
considering symmetry in decay rates, i.e., εh = ε p = ε. Under these conditions, the
ﬁxed point reads:
x∗=
ε
1 −ε ,
y∗= (1 −4ε + ε2)
(1 −ε)2
.
After some algebra, and after ﬁxing μh = μ p ≡μ, a critical mutation rate causing a
Hopf bifurcation was identiﬁed at:
μc = ε(1 −4ε + ε2)
4(1 −ε)
.
Such a bifurcation, which involves the emergence of a periodic orbit causing
sustained, periodic oscillations, was conﬁrmed by numerical simulations (Figure
11.10(b)). Interestingly, the same bifurcation was also numerically found for the ﬁt-
ness landscape with asymmetries in predator’s replication rates. Counterintuitively,
the asymmetric ﬁtness landscape revealed that the most efﬁcient predator genotypes
achieved lower population equilibria (see [61] for details). Our results identifying
periodic Red Queen dynamics were in agreement with other mathematical models
on coevolution (see [11, 13]).
11.5.3
Red Queen Chaotic Attractors
So far, we have discussed the dynamical behavior of Equations (11.8)-(11.9) for
ν = 1, which can be governed by stable ﬁxed points as well as by a periodic orbit
causing sustained and regular oscillations of the predator-prey genotypes popula-
tions. The same model, analyzed for ν = 3, revealed much richer dynamics: un-
der some parameter regions, both populations behave chaotically. Hence, similar to
what is known as diffusion-induced chaos [53], it was found that the simplest system
(with ν = 1), governed by a periodic orbit, could be governed by chaotic attractors
at increasing the number of available alleles (more available nodes in sequences
space).
It is known that dynamical systems governed by a periodic orbit can become un-
stabilized to chaos when spatial correlations and diffusion are included. Actually,

328
R.V. Sol´e and J. Sardany´es
some decades ago a great deal of attention was paid to self-organization processes
in reaction-diffusion systems, and their relevance in chemistry, physics and biology
was repeatedly stressed [24, 51, 88]. In this sense, numerical investigations of the
spatially-extended Belousov-Zhabotinsky chemical reaction showed the presence of
chaotically oscillating structures. Moreover, diffusion-induced chaos has also been
discussed in the context of spatial ecological dynamics [53]. We notice that MA
chaotic dynamics can also be interpreted from the perspective of dynamical unsta-
bilization due to diffusion in space. That is, each sequence of the sequences space
can be interpreted as a patch, and populations can diffuse between patches because
of mutation (i.e., diffusion in sequences space). Under this view, the oscillatory
behavior of variables xi and yi in Equations (11.8) and (11.9) for ν = 1, become
unstabilized to chaos for ν = 3.
a
b
c
time
Fig. 11.11 Red Queen chaotic dynamics for the Equations (11.8) and (11.9) using ν = 3. (a)
Global population time dynamics of parasites (y) and host (x). (b) Strange attractor governing
host-parasite global dynamics. In (c) we show the chaotic attractor in the parasites three-
dimensional phase space for genotypes (010y,111y,100y) (see [62]).
Figure 11.11 shows the chaotic coevolutionary dynamics for the 3-bits sequences
modeled with Equations (11.8) and (11.9). The time series in Figure 11.11(a) are
represented for the global populations of predators (y) and preys (x). In Figure
11.11(a) and (b) we show, respectively, the chaotic attractors for global host-parasite

11
Red Queen Coevolution on Fitness Landscapes
329
populations (represented in the phase space (x,y)) as well as the attractor for parasite
genotypes 010, 111, and 100 (see [62] for further details).
Our previous results suggested that Red Queen dynamics can be chaotic even for
small haploid replicator systems with MA interactions. It was previously shown that
large networks with host-parasitoid replicators can also behave chaotically. More
speciﬁcally, Kaneko and Ikegami [31, 36] characterized the so-called homeochaos in
multi-species models with antagonistic interactions and evolution. They suggested
that chaos, more than a destabilizing behavior [5], could involve stability in multi-
species ecosystems through a weak, chaotic state arising in high-dimensional dy-
namical systems. Roughly, homeochaos was suggested to suppress strong chaos
causing large ﬂuctuations that could near populations to extinction. Homeochaos is
characterized by many positive, but close to zero Lyapunov exponents (i.e., a type
of hyperchaos). Such a property of the spectrum of Lyapunov exponents involves
narrow chaotic ﬂuctuations with small amplitude, which are able to keep popula-
tion numbers far away from attractors involving extinction. The concept of home-
ochaos was later extended to low-dimensional systems, and its role was discussed
in both deterministic and stochastic host-parasitoid models with discrete time
generations [60].
Chaotic evolutionary dynamics have been found in other theoretical studies
of genetic polymorphisms under frequency-dependent selection (see for example
[19, 45, 67]). Moreover, Dercole and colleagues [11] recently showed that predator-
prey coevolutionary models governed by periodic ﬂuctuations became chaotic when
the system is embedded in a three-species food chain model by the addition of a
superpredator able to coevolve. These authors argued that over space, genetically-
driven chaos may cause evolutionary divergence of local metapopulations, even un-
der the absence of environmental change, thus promoting genetic diversity among
ecological communities over long evolutionary time.
11.6
Large Scale Coevolution on Complex Networks
Our last example deals with large-scale evolutionary dynamics. The study of large
scale coevolution was also performed in multi-species models using complex net-
works theory. A very simple model of large-scale evolution involving a set of N
interacting species can be easily deﬁned [72, 73, 74, 75]. In this model, species in-
teractions are introduced by means of a N ×N connectivity matrix W = (Wij). Evo-
lution for this system is introduced through changes in its elements. Similar to some
of the models previously presented, here the “state” of each species is described
by a binary variable Si ∈{0,1} (i = 1,2,...,N), for the i-th species, with Si = 1
or Si = 0 if the species is alive or extinct, respectively. So the whole ecosystem is
described in terms of a simple directed graph where the connections are initially
set to random values. Each species receives either positive or negative inputs from
other species. These signs indicate that the given species is favored or harmed by
the species which send the input. For instance, a negative input would correspond
to the interaction with a predator or with a parasite. Alternatively, a positive input

330
R.V. Sol´e and J. Sardany´es
would correspond to mutualism or symbiosis. Such a model, in its simplest form,
can be formulated in terms of a set of rules.
Rules of the network coevolution model (illustrated in Figure 11.12(a-d))
(1) Random changes in the connectivity matrix. At each generation, we select one
input connection for each species and assign it to a new, random value without re-
gard for the previous state of the connection. This rule introduces changes into the
web, which can be due to evolutionary responses or to environmental changes of
some sort. In other words, changes derived from coevolution among two species,
innovation at the species level and/or environmental-driven changes are lumped to-
gether within this rule.
(2) Extinction. Changes in the connectivity will eventually lead to extinctions. Extinc-
tion events are decided by computing the total sum of the inputs for each species.
This sum, if negative will involve the extinction of the species (Si = 0), and all its
connections are removed. Otherwise, nothing happens (Si = 1). Hence, the state of
the i-th species is updated following the following dynamical equation:
Si(t +1) = Φ
"
N
∑
j=1
W(i, j)
#
where Φ(z) = 1 for positive z and zero otherwise.
(3) Diversiﬁcation. A number of species can disappear due to the extinction rule, leav-
ing empty sites. These sites will be reﬁlled by diversiﬁcation: each extinct species
is replaced by a randomly chosen survivor. The replacement is made by simply
copying the connections of the survivor into the empty site.
This model shows a strongly nonlinear behavior with avalanches of extinction as
well as the correct power law distribution of extinction sizes [44, 72, 74, 78] (al-
though with an exponent typically close but higher than α = 2, see also [15]). The
outcome of the model was that both small and very large events were generated by
the same dynamical rules. Most of the times, the extinction of a given species had
no consequences for the other species. But from time to time, a given (keystone)
species with positive inputs to others disappeared. The removal of this species was
suggested to have a destabilizing effect on others, able to cause further propagation
leading to mass extinction events.
What is the origin of such extinction patterns? We ﬁrst need to see how a given
species can shift towards a negative sum of inputs. The reason is easily understood
from rule 1 above.
Since changes of links among species are random and the new values are chosen
from a uniform distribution, we can expect that, in the long term, the sum of inputs
will decay to zero. If we look at the sign of the links, so that the probability of
ﬁnding positive links, P(W +) = P[Wij > 0], and the probability of ﬁnding negative
links P(W −) = P[Wij < 0]. The time evolution of the positive links can be described
in terms of a master equation, given by
dP(W +,t)
dt
= w(W −→W +)P(W +)−w(W+ →W −)P(W −),

11
Red Queen Coevolution on Fitness Landscapes
331
where P(W +)+P(W −) = 1, starting from an initial condition P(W +,0) = P0. Since,
from the ﬁrst rule, we have w(W −→W +) = w(W + →W −) = 1/2N, the master
equation reads:
dP(W +,t)
dt
= 1
2N

1 −P(W+)

,
and an exponential decay is obtained:
P(W +,t) = 1
2

1 + (2P0 −1)e−t/N
.
As a consequence, the sum of inputs Fi = ∑jWij will also decay exponentially:
Fi(t) ∼e−t/N, predicting an exponential decay in the probabilities of survival, as ex-
pected from the Red Queen hypothesis (see the introduction section). This rule actu-
ally introduces the basic ingredients of Van Valen’s theory. All species in the system
keep changing all the time (either due to biological or environmental causes) even-
tually reaching extinction. The ultimate fate of all species is to become extinct, and
1
2
3
4
5
7
6
1
5
6
7
3
2
1
2
5
7
6
a
1
2
3
4
5
7
6
4
b
c
d
e
f
Fig. 11.12 (a-d) Rules of the evolution model exempliﬁed with a network with N = 7 nodes
and a given initial connectivity (a). Negative and positive interactions are indicated with black
and white arrows, respectively. The ﬁrst step of the model is to modify the links (b): here
different pairs of interactions are found, including mutualism, parasitism, predation and com-
petition. For this particular case, species 3 and 4 become nonviable, dying in the next step
(c). Species 6 is selected (among the survivors) and copied into the two empty sites (Rule
3). Such copies carry the links of their parent species, which will be modiﬁed again by the
ﬁrst rule in an iterative process. This set of rules generates a very complex dynamical pattern
of species evolution. In (e) we display an example of the survival curves obtained from our
model (compare with Figure 11.1). In (f) we also show the evolution of the local ﬁelds over
time. A mixture of slow and rapid changes occur, in a punctuated fashion (see [73] for further
details).

332
R.V. Sol´e and J. Sardany´es
so an exponential decay in the survival probability will be observed. Here, however,
there is no intrinsic, species-level variability (in terms of a genotype) and the fate
of a given species will be dominated by network responses and chance. Ecological-
driven phenomena are the key forces in the long run, although small-scale events are
taking place all the time. The nature of the decay turns to be exponential on aver-
age but episodic when looking at pseudocohorts (see Figure 11.1), consistently with
Raup’s analysis commented on in the introduction of this chapter (compare Figures
11.1 and 11.12).
An analytic study of the previous model is rather difﬁcult because of the random
nature of the interaction matrix. The model can, however, be simpliﬁed by mapping
the set of rules into a linear model [44, 78], giving place to a mean ﬁeld approach to
the network model.
Consider a set of N species, characterized by a single integer quantity φi (i =
1,2,...,N). This quantity will play the role of the internal ﬁeld. Each species is now
represented by this single (integer) number φi ∈{−N,−N + 1,...,−1,0,1,...,N −
1,N}, which represents the sum of inputs from other species. The dynamics consist
of three steps: (a) with probability P = 1/2, φi →φi −1, otherwise no change occurs
(this is equivalent to the randomization rule in the network model); (b) all species
with φi < φc (below a given threshold) are extinct. Here we use φc = 0 but other
choices give the same results. The number of extinct species, 0 < E < N, gives the
size of the extinction event. All E extinct species are replaced by survivors. Speciﬁ-
cally, for each extinct site (i. e. when φj < φc) we choose one of the N −E survivors
φk and update φj to φj = φk; (c) after an extinction event, a wide reorganization of
the web structure occurs [75]. In this simpliﬁed model this is introduced as a co-
herent shock. Each of the survivors are updated as φk = φk + q(E), where q(E) is a
random integer between −E and +E. This mean-ﬁeld approach deﬁnes a three-step
process. If N(φ) indicates the frequency of species having a local ﬁeld φ, we have:
N(φ,t + 1/3) = 1
2N(φ,t)+ 1
2N(φ + 1,t),
N(φ,t + 2/3) = N(φ,t + 1/3)+ N(φ,t + 1/3)∑
m
m
N −mP(m),
if φ > 0 and zero otherwise. Finally,
N(φ,t + 1) = N(φ,t + 2/3)−N(φ,t + 1/3)+ ∑
q>−φ
N(φ + q,t + 1/3)P(q).
From these equations, the full master equation for the dynamics reads:
N(φ,t + 1) = 1
2
+∞
∑
q=−∞∑
m
P(m)
2m+ 1θ(m−|q|)
"
N(φ + q,t)−N(φ + q + 1,t)
#
+1
2[N(φ,t)+ N(φ + 1,t)]∑
m
mP(m)
N −m .

11
Red Queen Coevolution on Fitness Landscapes
333
where two basic statistical distributions, which are self-consistently related, have
been used. These are:
P∗(q) = ∑
m
Pe(m)
2m+ 1θ(m−|q|),
which is an exact equation giving the probability of having a shock of size q. The
second is Pe(m), the extinction probability for an event of size m. We have a mean-
ﬁeld approximation relating both distributions:
Pe(m) = ∑
q
P∗(q)δ
q−1
∑
φ=1
N(φ)−m

.
The last equation introduces the average proﬁle N(φ), i. e. the time-averaged dis-
tribution of φ-values. For the mesoscopic regime 1 ≫q ≫N, by applying a Taylor
expansion to the master equation, i. e.
N(φ) = 1
2
+∞
∑
q=−∞∑
m
P(m)
2m+ 1

2N(φ + q)+ ∂N
∂φ

φ+q
+1
2
∂2N
∂φ2

φ+q
+...
!
+
+1
2

2N(φ)+ ∂N
∂φ

φ
+1
2
∂2N
∂φ2

φ
+...
!
∑
m
mP(m)
N −m ,
and using a continuous approximation, it is easy to see that the previous equation
reads:
1
2

dm
 m
−m
P(m)
2m

2
N(φ + q)
N(φ)
−1

+ ∂LnN
∂φ

φ+q
+...
!
+
+1
2

2 + ∂LnN
∂φ

φ
+...
! mP(m)
N −m dm = 0.
Assuming that N(φ) decays exponentially, i. e. N(φ) = exp(−cφ/N), we can in-
tegrate each part of the last equation, using N(φ + q)/N(φ) = exp(−cq/N) ≈
1 −cq/N. The ﬁrst term cancels exactly, the second gives −2c/N and the third
scales as (1 −O(1/N))N1−τ. So the previous equation leads to
−2c
N + N1−τG

1 −O

 1
N

= 0,
in order to satisfy this equality, we have τ = 2, which gives us the scaling expo-
nent for the extinction distribution. Hence, in agreement with Burlando’s analysis,
the taxonomy that emerges from this model also displays fractal behavior (with an
exponent αb ≈2).
These models, able to reproduce observed patterns, can have important implica-
tions for evolutionary theory. An intense debate over the last decades has concerned

334
R.V. Sol´e and J. Sardany´es
the basic mechanisms operating at different temporal scales. Some authors (spe-
cially in the ﬁeld of population genetics) suggested that the rules operating at small
scales (i.e., microevolutionary events) can be directly translated into the process
of macroevolution [14, 25, 42]. However, other authors like Stephen Jay Gould,
claimed that different processes are at work in evolution at different scales [22],
although no well-deﬁned mechanism for such decoupling was proposed. We no-
tice that the network organization of ecologies, changing in a coevolving landscape,
suggests a possible source of decoupling the micro- and macro scales. Moreover,
these models can also help understanding the complex dynamical behavior of large
extinctions and their aftermath [7, 58, 76, 77].
11.7
Conclusions
Coevolutionary dynamics introduces an additional layer beyond single-species evo-
lution. Coevolution pervades biology on multiple scales but its role and impact – as
illustrated by our previous examples – is rather different at each scale. In microor-
ganisms, the changes that couple diverse species (as hosts and pathogens) within
a given ecosystem are associated with many different molecular events related to
membrane receptors, production and pumping of toxins, development of aggregates
or resistance to antibiotics, to cite just a few. Arm races are known to occur and take
place on short time scales.
Coevolution occurs in other systems, including technological ones. Coevolution
between predators and prey predate at least part of the evolutionary events that trig-
gered the emergence of complex animals at the base of the Cambrian explosion. It is
likely that the so called Ediacaran fauna, dominated by simple, ﬁltering organisms
with small developmental complexity became replaced by the well known, Burgess-
Shale pattern as a consequence of predator-prey arm races. Many challenges lie
ahead in our understanding of how coevolution shaped biological complexity and
how to properly approach it from a theoretical perspective. Among other questions,
we still need to understand how to connect ecological networks and coevolving land-
scapes, how to place these landscapes in the middle of the multidimensional space
involving development, ecology and the environment, and what universal trends are
to be found in their structure and dynamics. The previous examples only provide
a glimpse of the richness and complexity arising in (co-)evolution, but they also
illustrate the power of simple models to be able to address relevant questions.
Acknowledgements. We want to thank Sergi Valverde for help in model implementation
and the other members of the Complex Systems Lab for useful discussions. This work has
been funded by the Bot´ın Foundation, by the James S. McDonnell foundation and by the
Santa Fe Institute.

11
Red Queen Coevolution on Fitness Landscapes
335
References
[1] Agrawal, A.F., Lively, C.M.: Parasites and the evolution of self-fertilization. Evolu-
tion 55(5), 869–879 (2001)
[2] Agrawal, A.F., Lively, C.M.: Infection genetics: gene-for-gene versus matching-alleles
models and all points in between. Evol. Ecol. Res. 4, 79–90 (2002)
[3] Bak, P., Flyvjerg, H., Lautrup, B.: Coevolution in a rugged ﬁtness landscape. Phys. Rev.
A 46, 6724–6730 (1992)
[4] Benton, M.J.: Red Queen hypothesis. In: Briggs, D.E.G., Growther, P.R. (eds.) Paleobi-
ology, Blackwell, Oxford (1995)
[5] Berryman, A.A., Millstein, J.A.: Are ecological systems chaotic - and if not, why not?
Trends Ecol. Evol. 4, 17–28 (1986)
[6] Case, T.J.: An Illustrated Guide to Theoretical Ecology. Oxford University Press, Ox-
ford (2000)
[7] Chen, Z.Q., Benton, M.J.: The timing and pattern of biotic recovery following the end-
Permian mass extinction. Nat. Geosci. 5, 375–383 (2012)
[8] Clarke, D.K., Duarte, E.A., Elena, S.F., Moya, A., Domingo, E., Holland, J.J.: The Red
Queen reigns in the kingdom of RNA viruses. Proc. Natl. Acad. Sci. U.S.A. 91, 4821–
4824 (1994)
[9] Darwin, C.: On the Origin of Species by Means of Natural Selection, or the Preservation
of Favoured Races in the Struggle for Life. John Murray, London (1859)
[10] Decaestecker, E., Gaba, S., Raeymaekers, J.A.M., Stoks, R., van Kerckhoven, L., Ebert,
D., de Meester, L.: Host-parasite ‘Red Queen’ dynamics archived in pond sediment.
Nature 450, 870–873 (2007)
[11] Dercole, F., Ferriere, R., Rinaldi, S.: Chaotic Red Queen coevolution in a three species
food chain. Proc. Roy. Soc. B 277, 2321–2330 (2012)
[12] de Visser, J.A.G.M., Elena, S.F.: The evolution of sex: empirical insights into the roles
of epistasis and drift. Nat. Rev. Genetics 8, 139–149 (2007)
[13] Dieckmann, U., Marrow, P., Law, R.: Evolutionary cycling in predator-prey interactions:
Population dynamics and the Red Queen. J. Theor. Biol. 176, 91–92 (1995)
[14] Dobzhansky, T.: Genetics and the Origin of Species, 3rd edn. Columbia University
Press, New York (1951)
[15] Drossel, B.: Biological evolution and statistical physics. Adv. Phys. 50, 209–295 (2001)
[16] Ehrlich, P.R., Raven, P.H.: Butterﬂies and plants: A study in coevolution. Evolution 18,
586–608 (1964)
[17] Eigen, M.: Selforganization of matter and evolution of biological macromolecules.
Naturwiss 58, 465–523 (1971)
[18] Elena, S.F., Sol´e, R.V., Sardany´es, J.: Simple genomes, complex interactions: Epistasis
in RNA virus. Chaos 20, 26106 (2010)
[19] Ferri`ere, R., Fox, G.A.: Chaos and evolution. Trends Ecol. E 10, 480–485 (1995)
[20] Flor, H.H.: The complementary genetic systems in ﬂax and ﬂax rust. Adv. Genetics 8,
29–54 (1956)
[21] Freund, H., Wolter, R.: Evolution of bit strings: some preliminary results. Complex
Systems 5, 279–298 (1991)
[22] Gould, S.J.: The Structure of Evolutionary Theory. Harvard University Press, Cam-
bridge (2003)
[23] Grosberg, R.K., Hart, M.W.: Mate selection and the evolution of highly polymorphic
self/nonself recognition genes. Science 289, 2111–2114 (2000)

336
R.V. Sol´e and J. Sardany´es
[24] Haken, H.: Advanced Synergetics. Springer Series in Synergetics. Springer, New York
(1983)
[25] Haldane, J.B.S.: The Causes of Evolution. Longmans and Green, London (1932)
[26] Hamilton, W.D.: Sex vs. non-sex vs. parasite. Oikos 35, 282–290 (1980)
[27] Hamilton, W.D., Axelrod, A., Tanese, R.: Sexual reproduction as an adaptation to resist
parasites (a review). Proc. Natl. Acad. Sci. U.S.A. 87, 3566–3573 (1990)
[28] Hastings, A., Powell, T.: Chaos in a three-species food chain. Ecology 72(3), 896–903
(1991)
[29] Hoffman, A.: Testing the Red Queen hypothesis. J. Evol. Biol. 4, 1–7 (1991)
[30] Howard, R.S., Lively, C.M.: Parasitism, mutation accumulation and the maintenance of
sex. Nature 367, 554–557 (1994)
[31] Ikegami, T., Kaneko, K.: Evolution of host-parasitoid network through homeochaotic
dynamics. Chaos 2, 397–407 (1992)
[32] Ilachinsky, A.: Cellular Automata. A Discrete Universe. World Scientiﬁc, Singapore
(2000)
[33] Jacob, F.: Evolution and tinkering. Science 196, 1161 (1977)
[34] Jacob, F.: Molecular tinkering in evolution. In: Rondall, D.S. (ed.) Evolution from
Molecules to Men. Cambridge University Press, Cambridge (1983)
[35] Jaenike, J.: An hypothesis to account for the maintenance of sex in populations. Evol.
Theor. 3, 191–194 (1978)
[36] Kaneko, K., Ikegami, T.: Homeochaos: dynamic stability of a symbiotic network with
population dynamics and evolving mutation rates. Physica D 56, 406–429 (1992)
[37] Kauffman, S.A., Johnsen, J.: Coevolution on the edge of chaos: Coupled ﬁtness land-
scapes, poised states and coevolutionary avalanches. J. Theor. Biol. 149, 467–505
(1991)
[38] Kauffman, S.A.: The Origins of Order. Oxford University Press, New York (1993)
[39] Kerr, A.: The impact of molecular genetics of plant pathology. Annu. Rev. Phy-
topathol. 25, 87–110 (1987)
[40] King, K.C., Delph, L.F., Jokela, J., Lively, C.M.: The geographic mosaic of sex and the
Red Queen. Curr. Biol. 19, 1438–1441 (2009)
[41] Lafforgue, G., Mart´ınez, F., Sardany´es, J., de la Iglesia, F., Shi-Shun, L., Qi-Wen, N.,
Sol´e, R.V., Chua, N.H., Dar´os, J.-A., Elena, S.F.: Tempo and mode of plant RNA virus
escape from RNA interference-mediated resistance. J. Virol. 85(19), 9686–9695 (2011)
[42] Li, W.H., Graur, D.: Fundamentals of Molecular Evolution. Sinauer Associates, Sun-
derland (1991)
[43] Lively, C.M.: Evidence from a New Zealand snail for the maintenance of sex by para-
sitism. Nature 328, 519–521 (1987)
[44] Manrubia, S.C., Paczuski, M.: A simple model of large-scale organization in Evolution.
Int. J. Mod. Phys. C 9, 1025–1032 (1998)
[45] May, R.M., Anderson, R.M.: Epidemiology and genetics in the coevolution of parasites
and hosts. Proc. R. Soc. Lond. B 219, 281–313 (1983)
[46] McCaskill, J.S., Altemeyer, S.: Error threshold for spatially resolved evolution in the
quasispecies model. Phys. Rev. Lett. 86, 5819 (2001)
[47] Mode, D.J.: A mathematical model for the co-evolution of obligate parasites and their
hosts. Evolution 12, 158–165 (1958)
[48] Montoya, J.M., Pim, S., Sol´e, R.V.: Ecological networks and their fragility. Nature 442,
259–264 (2006)

11
Red Queen Coevolution on Fitness Landscapes
337
[49] Morran, L.T., Schmidt, O.G., Gelarden, I.A., Parrish II, R.C., Lively, C.M.: Running
with the Red Queen: Host-parasite coevolution selects for biparental sex. Science 333,
216–218 (2011)
[50] Newman, M.E.J., Palmer, R.G.: Modeling Extinction. Oxford University Press, New
York (2003)
[51] Nicolis, G., Prigogine, I.: Self-Organization in Non-Equilibrium Systems. Wiley-
Interscience, New York (1977)
[52] Parker, M.A.: Pathogens and sex in plants. Evol. Ecol. 8, 560–584 (1994)
[53] Pascual, M.: Diffusion-induced chaos in a spatial predator-prey system. Proc. Roy. Soc.
London B 251, 1–7 (1993)
[54] Molecular evolution on rugged landscapes: proteins, RNA and the immune system. In:
Perelson, A.S., Kauffman, S. (eds.) SFI Studies in the Sciences of Complexity, vol. IX.
Addison-Wesley, Redwood (1991)
[55] Quer, J., Huerta, R., Novella, I.S., Tsimring, L., Domingo, E., Holland, J.J.: Repro-
ducible nonlinear population dynamics and critical points during replicative competi-
tions of RNA virus quasispecies. J. Mol. Biol. 264, 465–471 (1996)
[56] Raup, D.M.: Biological extinction and Earth history. Science 231, 1528–1533 (1986)
[57] Raup, D.M.: A kill curve for phanerozoic marine species. Paleobiology 17, 37–48
(1991)
[58] Roopnarine, P.D.: Extinction cascades and catastrophe in ancient food webs. Paleobiol-
ogy 32(1), 1 (2006)
[59] Sardany´es, J., Sol´e, R.V.: Chaotic stability in spatially-resovled host-parasite replica-
tors: The Red Queen on a lattice. Int. J. Bif. and Chaos 17(2), 589–606 (2007)
[60] Sardany´es, J.: Low dimensional homeochaos in coevolving host-parasotoid dimorphic
populations: Extinction thresholds under local noise. Commun. Nonlinear Sci. Numer.
Simul. 16, 3896–3903 (2011)
[61] Sardany´es, J., Sol´e, R.V.: Matching allele dynamics and coevolution in a minimal
predator-prey replicator model. Phys. Lett. A 372, 341–350 (2008)
[62] Sardany´es, J., Sol´e, R.V.: Red Queen strange attractors in host-parasite replicator gene-
for-gene coevolution. Chaos, Solitons and Fractals 32(5), 1666–1678 (2007)
[63] Sardany´es, J., Elena, S.F.: Error threshold in RNA quasispecies models with comple-
mentation. J. Theor. Biol. 265, 278–286 (2010)
[64] Sardany´es, J., Elena, S.F.: Quasispecies spatial models for RNA viruses with different
replication modes and infection strategies. PLoS One 6(9), e24884 (2011)
[65] Sardany´es, J., Sol´e, R.V., Elena, S.F.: Replication mode and landscape topology differ-
entially affect RNA virus mutational load and robustness. J. Virol. 83(23), 12579–12589
(2009)
[66] Sardany´es, J., Elena, S.F., Sol´e, R.V.: Simple quasispecies models for the survival-of-
the-ﬂattest effect: The role of space. J. Theor. Biol. 250, 560–568 (2008)
[67] Seger, J.: Evolution of exploiter-victim relationships. In: Crawley, M.J. (ed.) Natural
Enemies: the Population Biology of Predators, Parasites and Diseases, pp. 3–25. Black-
well, Oxford (1992)
[68] Sol´e, R.V., Sardany´es, J., D´ıez, J., Mas, A.: Information catastrophe in RNA viruses
through replication thresholds. J. Theor. Biol. 240, 353–359 (2006)
[69] Sol´e, R.V.: Phase transitions in unstable cancer cell populations. Europ. Phys. Jour-
nal 35(1), 117–124 (2003)
[70] Sol´e, R.V., Ferrer, R., Gonz´alez-Garc´ıa, Q.J., Domingo, E.: Red Queen dynamics, com-
petition and critical points in a model of RNA virus quasispecies. J. Theor. Biol. 198,
47–59 (1999)

338
R.V. Sol´e and J. Sardany´es
[71] Sol´e, R.V., Bascopmte, J.: Self-organization in Complex Ecosystems. Princeton Univer-
sity Press, Princeton (2006)
[72] Sol´e, R.V.: On macroevolution, extinctions and critical phenomena. Complexity 1, 40–
46 (1996)
[73] Sol´e, R.V., Bascompte, J., Manrubia, S.C.: Extinction: bad genes or weak chaos? Proc.
Roy. Soc. B 263, 161–168 (1996)
[74] Sol´e, R.V., Manrubia, S.C.: Extinction and self-organized criticality in a model of large-
scale evolution. Phys. Rev. E 51, 6250–6253 (1996)
[75] Sol´e, R.V., Manrubia, S.C.: Criticality and unpredictability in macroevolution. Phys.
Rev. E 55, 4500–4508 (1997)
[76] Sol´e, R.V., Montoya, J., Erwin, D.H.: Recovery after mass extinction: evolutionary as-
sembly in large-scale biosphere dynamics. Phil. Trans. Roy. Soc. B-Biol. Sci. 357, 697–
707 (2002)
[77] Sol´e, R.V., Salda˜na, J., Montoya, J.M., Erwin, D.H.: Simple model of recovery dynam-
ics after mass extinction. J. Theor. Biol. 267, 193–200 (2010)
[78] Sol´e, R.V., Manrubia, S.C., Mercader, J.P., Benton, M., Bak, P.: Long-range correlations
in the fossil record and the fractal nature of macroevolution. Adv. Compl. Syst. 1, 255–
266 (1998)
[79] Stenseth, N.C., Maynard Smith, J.: Coevolution in ecosystems: Red Queen evolution or
stasis? Evolution 38, 870–880 (1984)
[80] Tegmark, M.: An icosahedron-based method for pixelizing the celestial sphere. The
Astrophys. J. 470, L81–L84 (1996)
[81] Thompson, J.N.: Interaction and coevolution. Wiley, New York (1982)
[82] Thompson, J.N.: Concepts of coevolution. Trends Ecol. Evol. 4, 179–183 (1989)
[83] Thompson, J.N.: Coevolution and the evolutionary genetics of interactions among
plants and insects and pathogens. In: Burdon, J.J., Leather, S.R. (eds.) Pests, Pathogens
and Plant Communities, pp. 249–271. Blackwell, Oxford (1990)
[84] Thompson, J.N., Burdon, J.J.: Gene-for-gene coevolution between plants and parasites.
Nature 360, 121–125 (1992)
[85] Van Valen, L.: Energy and evolution. Evol. Theory 1, 179–229 (1976)
[86] Van Valen, L.: Evolution as a zero-sum game for energy. Evol. Theory 4, 129–142
(1980)
[87] Van Valen, L.: A new evolutionary law. Evol. Theory 1, 1–30 (1973)
[88] Vidal, C., Pacault, A. (eds.): Non-Equilibrium Dynamics in Chemical Systems. Springer
Series in Synergetics. Springer, New York (1984)
[89] Weltz, J.S., Levin, S.: Size and scaling of predator-prey dynamics. Ecol. Lett. 9, 548–
557 (2006)
[90] Wright, S.: Evolution in Mendelian populations. Genetics 16, 97 (1931)
[91] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution.
Proceedings of the Sixth International Congress on Genetics 1, 356 (1932)
[92] Yip, K.Y., Patel, P., Kim, P.M., Engelman, D.M., McDermott, D., Gerstein, M.: An
integrated system for studying residue coevolution in proteins. Bioinformatics 24, 290–
292 (2008)

Chapter 12
Eco–Evolutionary Dynamics on Deformable
Fitness Landscapes
Richard A. Watson and Marc Ebner
Abstract. Conventional approaches to modelling ecological dynamics often do
not include evolutionary changes in the genetic makeup of component species
and, conversely, conventional approaches to modelling evolutionary changes in the
genetic makeup of a population often do not include ecological dynamics. But re-
cently there has been considerable interest in understanding the interaction of evo-
lutionary and ecological dynamics as coupled processes. However, in the context
of complex multi-species ecosytems, especially where ecological and evolution-
ary timescales are similar, it is difﬁcult to identify general organising principles
that help us understand the structure and behaviour of complex ecosystems. Here
we introduce a simple abstraction of coevolutionary interactions in a multi-species
ecosystem. We model non-trophic ecological interactions based on a continuous but
low-dimensional trait/niche space, where the location of each species in trait space
affects the overlap of its resource utilisation with that of other species. The local de-
pletion of available resources creates, in effect, a deformable ﬁtness landscape that
governs how the evolution of one species affects the selective pressures on other
species. This enables us to study the coevolution of ecological interactions in an in-
tuitive and easily visualisable manner. We observe that this model can exhibit either
of the two behavioural modes discussed in the literature; namely, evolutionary stasis
or Red Queen dynamics, i.e., continued evolutionary change. We ﬁnd that which of
these modes is observed depends on the lag or latency between the movement of a
Richard A. Watson
University of Southampton, School of Electronics and Computer Science,
Institute for Life Sciences, Institute for Complex Systems Simulation,
Agents Interaction and Complexity, Highﬁeld, Southampton, SO17 1BJ, UK
e-mail: raw@ecs.soton.ac.uk
Marc Ebner
Ernst Moritz Arndt Universit¨at Greifswald,
Institut f¨ur Mathematik und Informatik,
Walther-Rathenau-Strasse 47, 17487 Greifswald, Germany
e-mail: marc.ebner@uni-greifswald.de
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
339
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_12, c⃝Springer-Verlag Berlin Heidelberg 2014

340
R.A. Watson and M. Ebner
species in trait space and its effect on available resources. Speciﬁcally, if ecological
change is nearly instantaneous compared to evolutionary change, stasis results; but
conversely, if evolutionary timescales are closer to ecological timescales, such that
resource depletion is not instantaneous on evolutionary timescales, then Red Queen
dynamics result. We also observe that in the stasis mode, the overall utilisation of
resources by the ecosystem is relatively efﬁcient, with diverse species utilising dif-
ferent niches, whereas in the Red Queen mode the organisation of the ecosystem
is such that species tend to clump together competing for overlapping resources.
These models thereby suggest some basic conditions that inﬂuence the organisation
of inter-species interactions and the balance of individual and collective adaptation
in ecosystems, and likewise they also suggest factors that might be useful in engi-
neering artiﬁcial coevolution.
12.1
Introduction
Conventional population genetic models of evolution generally address selection
acting on genetic changes within a single population without regard for changes
to the ecological context of that selection, and conversely, conventional ecological
models (e.g., Lotka-Volterra models) generally address changes in the abundance of
each species without regard for genetic change within each species [28, 37, 39, 42].
However, it is clear that changes in the genetic composition of a species can affect
its ﬁtness dependencies with other species (either directly, as in trophic interactions,
or by changing the overlap of resources utilised, as in non-trophic interactions) and
hence alter the ecological dynamics of an ecosystem. Reﬂexively, the selective pres-
sures acting on a population can be greatly inﬂuenced by its biotic environment and
thus ecological dynamics also shape evolutionary changes. Recently, there has been
considerable interest in the interaction of ecological and evolutionary dynamics in
an attempt to understand them as coupled ‘eco-evo’ processes [25, 28, 29]. Adaptive
dynamics models, for example, take account of the fact that the selective pressures
on a genetic variant are sensitive to ecological conditions and, conversely, that ge-
netic changes can alter ecological equilibria [25]. These models provide a simple
way to link ecological and evolutionary dynamics when the relevant timescales are
almost separated (i.e., genetic changes are assumed to occur at ecological equilib-
rium). But when ecological and evolutionary timescales are strongly overlapping, it
can still be difﬁcult to identify general principles that help us understand their in-
teraction [28, 29]. For example, when multiple species compete for a set of shared
resources, under what conditions will competitive feedback cause them to diver-
sify onto separate resources? And conversely, under what conditions will multiple
species evolve to compete for the same resources causing continued conﬂict and
inefﬁcient use of resources?
Meanwhile, conventional evolutionary computation methods utilise a single pop-
ulation and address optimisation problems corresponding to static ﬁtness land-
scapes. Cooperative coevolution [30] approaches to function optimisation utilise
multiple populations each contributing a part of a combined solution. The aim of this

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
341
approach is a form of problem decomposition where each species addresses a rel-
atively small semi-independent sub-problem and remaining dependencies between
sub-problems can be optimised by virtue of evaluation in a ‘shared domain model’
[30]. Competitive coevolution approaches to optimisation problems generally use
one population to represent solutions and another to represent problem instances
that need to be solved. For example, Hillis [17] evolved sorting networks in one
population and data sets to be sorted in the other; Juille and Pollack [19] evolved
cellular automata rule sets against parameters of the initial conditions; Reynolds
[33], Miller and Cliff [3, 4, 26], Floreano and Nolﬁ[12] and Floreano et al. [13]
evolved pursuers against evaders either in simulation or using real robots. In some
cases, competitive coevolution can lead to an arms race where each population con-
tinually challenges the other to improve, with the potential to keep the problem
population in the zone of proximal development for the solution population [43]
and also perhaps provide an open-ended adaptive pressure [44]. However, both uses
of coevolution can sometimes fail to deliver these ideals. In cooperative coevolution
the main problem is ﬁnding a way to automatically decompose the problem into
suitable sub-problems such that different populations ﬁnd diverse semi-independent
sub-problems [45]. In competitive coevolution, species may ‘disengage’, breaking
the mutual selective pressure, or evolve to exploit each others speciﬁc weaknesses
rather than evolve general solutions, or chase each other around in endless cycles
of relative improvement that fail to yield any improvement in absolute terms [44].
As is the case with natural eco-evolutionary dynamics, it can be difﬁcult to identify
general principles that help us understand when co-evolutionary dynamics will pro-
duce one type of dynamics rather than another, and, in particular, the conditions that
lead to effective co-adaptation.
In natural systems there are, of course, many speciﬁc contingencies that may af-
fect the nature of eco-evolutionary dynamics. Likewise, in any given optimisation
problem, there are many domain speciﬁc, and implementation speciﬁc, contingen-
cies that may affect the success of a coevolutionary approach. With the aim of keep-
ing a model as simple as possible but not more so, here we introduce a very simple
model of eco-evolutionary interactions that avoids case-speciﬁc details, but includes
a rich space of possible inter-species ﬁtness interactions and coevolutionary dynam-
ics in a multi-species ecosystem. Speciﬁcally, we model the mean phenotype of
each species as a point in a continuous low-dimensional (quantitative) trait space.
Each point in trait space confers the ability to utilise a particular combination of
resources in a continuous multi-dimensional resource or niche space [18, 22]. For
example, a particular size and shape of bill confers an ability to utilise a particu-
lar size of seed, and/or a tolerance to a particular temperature or humidity enables
occupation of corresponding habitats. When a species occupies a particular point
in this trait space, depletion of the resources in that corresponding niche creates
competition with species of similar genotypes. This provides a simple abstract rep-
resentation of non-trophic ecological interactions based on niche overlap or species
packing [23, 24] where the evolution and coevolution of species alters their relative
location in trait space and hence their competitive interaction coefﬁcients. This cre-
ates a simulation that captures the notion of multiple populations coevolving on a

342
R.A. Watson and M. Ebner
‘rubber sheet’ ﬁtness landscape – each species deforming the ﬁtness landscape of
the other – in a quite literal manner. The deforming implies that the ﬁtness land-
scape is dynamic. Although other abstract approaches to modelling coupled ﬁtness
landscapes have been proposed, (e.g. [20]), by examining the mean phenotype of
populations in a low-dimensional niche space (one or two dimensions), rather than
in a high dimensional genotype space, this approach has the distinct advantage that
it is straightforward to visualise the state of the entire ecosystem at a point in time.
It also allows us to investigate some speciﬁc research questions in a simple and
straightforward manner.
In particular, in the following experiments we investigate two related issues: the
type of dynamical behaviour exhibited by evolutionary change and the efﬁciency
with which an ecosystem collectively utilises available resources. For example, in
this model, what are the conditions under which ecological interactions produce an
ever-changing selective pressure that maintains species in a state of perpetual evo-
lutionary change, or conversely, conditions where species equilibrate and stabilise,
extinguishing evolutionary change? Also when multiple populations experience the
same set of available resources, multiple species might compete for the same high
quality resources, or conversely, resource competition might produce a diversifying
effect causing species to spread-out and utilise different complementary resources;
what factors inﬂuence the balance of these behaviours?
The ﬁrst of these issues is a classic question in ecology and evolution relating
to the ‘Red Queen’ hypothesis [39, 41] as discussed in the following section. The
second issue is relevant to the balance of individualistic and collective adaptation
typiﬁed by artiﬁcial competitive and cooperative coevolution, respectively. That is,
although in both competitive and cooperative coevolution selection is applied at the
individual level not at the collective level, in cooperative coevolution our interest
as engineers is nonetheless on the collective welfare of the species in the system
(the reason we do not explicitly select on collectives, biological unrealism aside, is
that to do so would forfeit the potential for problem decomposition). The desirable
dynamics of these two scenarios are therefore quite different. In competitive coevo-
lution only one species represents solutions, and improvements in the other species
are only desirable in so much as they motivate improvement in these solutions. In
this case, we aim for each population to keep the other population under continued
selective pressure, and this implies that improvement in one species confers decline
in the other (a ‘zero-sum’ evolutionary game). Conversely, in cooperative coevo-
lution a solution is represented by a whole set of species and we are interested in
essentially the opposite dynamic, where diverse species ﬁnd ways to be simultane-
ously good at different aspects of the problem. If they are successful in diversifying
appropriately, this implies an increase in collective welfare (informally, ’everyone
is better off’ and the game is therefore not zero-sum), but it also implies that in suc-
cessfully minimising competition, species ﬁnd a way to decrease the mutual conﬂict
and likewise the pressure for continued evolutionary change that they exert on one
another. These opposites of individualistic and collective adaptation thus suggest
contrasting behaviors with respect to convergence and diversiﬁcation of species, and
also a correspondence with continued evolutionary change and evolutionary stasis,

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
343
respectively. Thus the type of dynamical behaviour and the efﬁciency with which
an ecosystem collectively utilises resources seem to have interesting interactions
that we will investigate. Our goal is to isolate important factors which inﬂuence
the balance of these different outcomes. We ﬁnd that both possibilities are possible
without changing the nature of the underlying game, or the level at which selection
is applied, but merely by altering the coupling between ecological and evolutionary
timescales.
Here we utilise our previous work with one- [9] and two-dimensional ﬁtness
landscapes [10]. The basic mechanism of the coevolutionary interactions operates as
follows. In Figure 12.1 species A has already reached a local optimum while Species
B climbs towards the same local optimum due to Darwinian selection, Figure 12.1(b
& c). When two species occupy the same position, they are located in the same
niche, it is assumed that they are in direct competition with each other and hence
the ﬁtness of both of these species is decreased - which effects a depression of the
ﬁtness landscape.
A
B
B
B
A
B
A
fitness
phenotype space
3
2
1
(a)
(b)
(c)
(d)
4
Fig. 12.1 Two species are located on the same ﬁtness landscape. (a) Species A has reached a
local ﬁtness peak. (b) Species B is adapting to the same local optimum, i.e. is adapting to the
same niche. (c) Species A and B are co-located at the same ecological niche. (d) The presence
of species B in the same niche has an impact on the ﬁtness of species A. The ﬁtness of both
species is reduced.
Before describing how we apply this basic mechanism in a multi-species model,
we will brieﬂy discuss how a two-species system might result in an arms race or
Red Queen dynamics.
12.2
The Red Queen Hypothesis
A classic example of coevolutionary selective pressures is found in the predator-
prey scenario. Individuals from the predator population need to catch prey in order
to survive, and prey need to escape from predators. Such a scenario may lead to an
arms race where both sides try to out-compete their opponent [5] in terms of, say
running ability or maneuverability. Note that, usually, predator-prey models assume
instantaneous interaction between the predator and prey population. A more accu-
rate model might involve some delay between the adaptation of one population and
the effect of this evolution on the other population [11].
The idea that a particular trait may be continually changing as a result of selective
pressures even though the ﬁtness of both coevolving species remains constant over

344
R.A. Watson and M. Ebner
4
fitness
phenotype space
(a)
(b)
(c)
3
2
1
(d)
Fig. 12.2 According to the Red Queen hypothesis, the ﬁtness of coevolving species may
remain at the same level over evolutionary time even though some particular trait is evolving
in response to a selective pressure. Here, it is assumed that as the species adapts to its local
optimum, the ﬁtness landscape is deformed by the presence of that species. (a)-(c) The local
maximum in the ﬁtness landscape is effectively shifted to the right by this deformation. Thus
even though the species has been continually adapting to its local optimum it still has the
same ﬁtness over time. In other words, the species is moving through phenotype space even
though its ﬁtness remains constant.
time has been called the Red Queen hypothesis after a ﬁgure from Lewis Carroll’s
novel Through the Looking Glass [8, 34, 36, 41]. In the novel Alice and the Red
Queen have to run but apparently do not get anywhere since the ground moves
backward underneath them at an equal rate. The Red Queen explains: “Now here,
you see, it takes all the running you can do, to keep in the same place” [2].
Figure 12.2 visualizes the Red Queen effect. A species is assumed to be driven
towards a local optimum by the selective pressure. Initially, it is located on one side
of a local optimum. As the species climbs towards the top, the landscape changes.
Due to this change of the landscape, it appears as if the species has not succeeded
in climbing the hill despite being driven to follow the local adaptive gradient. Mea-
suring progress in coevolutionary scenarios can therefore be problematic [3, 21].
In open-ended evolutionary systems, e.g. self-reproducing programs [1, 7, 31, 32],
we might hope that continued evolutionary change results in continued progress or
improvement. But, it is not guaranteed that coevolutionary interactions that lead to
continued change, i.e., Red Queen dynamics, will necessarily result in continued
improvement, i.e., as implied in the term ‘arms race’. Over-specialisation and in-
transitive relationships may result in continual cycling through trait space that fails
to produce improvement in any absolute sense [44].
The conditions that lead to either Red Queen dynamics or conversely conditions
that produce a stable attractor where no further change (let alone progress) is possi-
ble, are therefore of great interest. Van Valen [41] originally suggested that species
may exhibit Red Queen dynamics, producing continuous evolutionary change, with-
out any extrinsic changes in environment.Maynard Smith [38] pointed out, however,
that Van Valen’s model depends on the assumption of a zero-sum game where an
evolutionary change in one species that improves its ﬁtness necessarily results in an
equal decrease in ﬁtness in total over all other species. Stenseth and Maynard Smith
[39] argue that Van Valen’s assumption of a zero-sum game does not necessarily
follow from the assumption of a ﬁxed amount of total resources. Their approach
separates the notions of a ﬁtness interaction between two species from the notion of

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
345
how a change in one species affects the ‘lag load’ of another species. The lag load
is a measure of how far a species is from a local adaptive peak - and the presence
of a non-zero lag load implies continued evolutionary change. Crucially, they argue
that a genetic change conferring a ﬁtness increase in one species may produce ei-
ther a net increase or a net decrease in the lag-load of all species taken together. In
other words, even with constant total resources, there are ways to utilise resources
efﬁciently and ways to utilise them inefﬁciently, and this means that the underlying
game is not zero-sum. Then, for non-zero-sum games there remains the possibility
that, for linear interactions, the resulting dynamics may be either contractive lead-
ing to stable coexistence with each species at a local peak, or divergent where some
species may lag increasingly far behind the local peak, possibly leading to extinc-
tions. However, in the case where the relationship between lag load and change in
lag load is non-linear then, as before, a Red-Queen dynamics of stable change is
possible. Intuitively, this would be the case if, when lags are small and species are
near local optima, most evolutionary changes in one species produce large increases
in the lags of others species (this follows from geometric arguments - i.e., from a
point near a local optima, most directions lead down) whereas, when lags are large
most evolutionary changes in one species produce relatively little increase in the lags
of other species. In this case, a stable but non-zero amount of total lag is expected,
thereby conferring continued evolutionary change.
As Stenseth and Maynard Smith suggest, whether a coevolutionary scenario has
the necessary conditions for Red Queen dynamics or for stasis is ultimately an
empirical matter. But here we introduce a relatively simple mechanistic model of
inter-species interactions to investigate contributing factors. In this model, different
arrangements of species utilise resources with different degrees of efﬁciency; e.g.,
in an efﬁcient arrangement, each species utilises a niche that has as little overlap
as possible with other species, whereas if all species attempt to utilise the same re-
source this is relatively inefﬁcient. The underlying evolutionary game implicit in this
model therefore has non-zero-sum properties. Our model also has the potential to
exhibit the non-linear relationship between lag load and change in lag load described
by the geometric intuition above. It therefore seems plausible that Red Queen dy-
namics might occur in accord with the arguments of Stenseth and Maynard Smith.
However, we observe that under some conditions our model nonetheless results in
evolutionary stasis - or at least, exhibits qualitatively different modes of behaviour
with very different amounts of evolutionary change. We investigate which param-
eters of the model determine these distinct modes of behaviour and we ﬁnd that
which of these modes is observed depends on the latency between the movement of
a species in trait space and its effect on available resources. Speciﬁcally, if ecologi-
cal change is nearly instantaneous compared to evolutionary change, stasis results;
but conversely, if evolutionary timescales are closer to ecological timescales, such
that ecological resource depletion is not instantaneous on evolutionary timescales,
then Red Queen dynamics result. We also observe that in the stasis mode, the overall
utilisation of resources by the ecosystem is relatively efﬁcient, with diverse species
utilising different niches, whereas in the Red Queen mode the organisation of the
ecosystem is such that species tend to clump together competing for overlapping

346
R.A. Watson and M. Ebner
resources. These models thereby suggest a link between the issues of change and
stasis discussed by Stenseth and Maynard Smith and matters of ecological diversity
and organisation. In the same way, these models also suggest some basic condi-
tions that inﬂuence the organisation of inter-species interactions and the balance
of individual and collective adaptation in ecosystems, loosely corresponding to the
opposites of cooperative and competitive approaches to artiﬁcial coevolution.
In the next section, we describe the details of our modelling approach, and the
various conditions and parameters that we investigate.
12.3
A Dynamically Deforming Fitness Landscape
We model the mean phenotype of a species as a point in an n-dimensional con-
tinuous trait space. An n-dimensional vector is used to represent the position of
each population. For example, n = 1, describes a one-dimensional ﬁtness landscape
[9] and each species is represented using a single scalar value or quantitative trait.
Natural selection moves the population mean in the direction that climbs the local
gradient in the ﬁtness landscape. Here this is modeled abstractly as a gradient ascent
or hill climbing process (see Figure 12.3) on a ﬁtness landscape [46].
This approach simpliﬁes the evolutionary dynamics of each species making it
easier to focus on the evolutionary interaction between many species and the inter-
action between evolutionary and ecological dynamics in a complex ecosystem. This
(c)
(f)
(e)
(a)
(b)
(d)
Fig. 12.3 Modeling the evolutionary process. (a), (b), and (c) show a population climbing
towards a local optimum on a one-dimensional ﬁtness landscape. (a) Initially, a population
of individuals is located on the side of an incline. (b) only highly ﬁt individuals survive (c)
the remaining individuals then produce offspring and the new population is now located at
a higher position in ﬁtness space. (d), (e), and (f) show the same population represented as
the population average. (d) a single point represents the population of individuals (e) gradient
of the ﬁtness landscape (f) the population average is moved up the incline depending on
the measured gradient. The population average is now located at a higher position in ﬁtness
space.

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
347
approach is justiﬁed on the assumption that the genetic diversity within any one
species is insigniﬁcant (at least, compared to the genetic diversity between species),
and that the distribution of genetic variation remains unimodal (speciation is ex-
cluded), as for example, under ‘strong selection weak mutation’ assumptions [14].
Intuitively, we might imagine that the exact relationship between the local ﬁtness
gradient and the rate of adaptation of the species could be important in affecting
the type of dynamics we observe in the ecosystem of multiple interacting species.
Below we deﬁne three different methods that we investigated for updating the posi-
tion of a species. In all cases the direction of change is determined by the direction
of increasing ﬁtness in each dimension of the ﬁtness landscape - but the different
methods affect the rate of evolution: 1) constant rate evolution, 2) rate of evolution
linearly proportional to ﬁtness gradient, 3) rate of evolution determined by rate of
change of ﬁtness gradient.
The ﬁrst of these, constant rate, is appropriate where evolution is mutation lim-
ited. That is, regardless of how steep the ﬁtness gradient is, the maximum rate of
evolution is limited by the availability of variation that can respond to it, and the
generation of genetic variation is unaffected by the selective pressure. Suppose that
a species is located at position x(t) at time step t. If f(x,t) denotes the height of the
ﬁtness landscape at position x at time step t, then the simple update rule would be
˙x(t) =
⎧
⎪
⎨
⎪
⎩
−1
if ∂
∂x f(x,t) < 0,
0
if ∂
∂x f(x,t) = 0,
1
if ∂
∂x f(x,t) > 0
(12.1)
where ˙x(t) is the velocity of the species. Thus, using update rule (12.1), ﬁtness only
controls the direction of movement.
In more general conditions the rate of evolution in a population will be sensi-
tive to the magnitude of the selective coefﬁcients. Our second, linearly proportional,
update method thus sets the velocity of the species proportional to the gradient of
the ﬁtness landscape in Equation (12.2). This is consistent with a conventional pop-
ulation genetic model where the rate of change is proportional to ﬁtness variance.
˙x(t) = α ∂
∂x f(x,t)
(12.2)
Here α is the factor of proportionality.
The third update model is a logical extension. Speciﬁcally, Equation (12.3) in-
tegrates the ﬁtness gradient over time such that the rate of evolution is a function
of the second differential of ﬁtness rather than the ﬁrst differential or a constant.
Hence the population responds to the gradient of the current position as well as to
the gradient of the previous time step.
˙x(t) = α

 ∂
∂x f(x,t)

+ β ˙x(t −1)
(12.3)

348
R.A. Watson and M. Ebner
A momentum term such as this is known to have interesting effects on many kinds
of dynamical systems. In an evolving population this type of dynamic could result
if recent selection altered the ability of the population to respond to subsequent
selection. For example, Pavlicev et al. [27] show that the action of past selection
can alter the evolvability of the population by increasing genetic variation in the
direction of selection.
Latency
(a)
(c)
(b)
(f)
(e)
(d)
Fig. 12.4 Deformation of the ﬁtness landscape. (a) Initially, a ﬂat ﬁtness landscape repre-
sents a uniform distribution of resources. (b) Each species placed on this landscape deforms
the landscape in its vicinity as if by depleting available resources. This is similar to the de-
formation of a rubber sheet by a point mass. (c) Natural selection moves each species up
the local ﬁtness gradient. (d) In general, the ecological depletion of resources caused by the
species is not necessarily immediate. (e) The deformation of the landscape caused by the
species thus follows the position of the species with a latency period of several time steps.
(f) As the position of the species moves away from the depression in the ﬁtness landscape,
and the deformation of the landscape responds to the position of the species, this leads to a
condition of stable evolutionary change (Red Queen dynamics).
In our model all species coexist in a shared ﬁtness landscape. The ﬁtness land-
scape represents, abstractly, the availability of resources in a continuous niche space
and the height of each point in the landscape is thus modiﬁed dynamically in re-
sponse to the location of species. Each species thus has an impact on the shape of the
ﬁtness landscape in its local vicinity. Intuitively, each species deforms the landscape
much like a point mass placed on a rubber sheet. In principle, the shape of this de-
formation reﬂects the distribution of phenotypes around the population mean. Here
we assume a Gaussian population distribution and hence a corresponding Gaussian
deformation. More generally, our model could be extended to investigate a posi-
tive effect on the ﬁtness landscape, but here we assume only negative effects as if
by competition for resources. (This negative impact on ﬁtness is similar to ﬁtness
sharing or crowding methods which are used in evolutionary algorithms to promote

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
349
diversity [15].) We assume that the shape of the population distributions and the re-
source depletion that they confer is equal for all species, but the more species that
occupy a certain point on the ﬁtness landscape the larger the deformation.
If ecological dynamics are very rapid compared to evolutionary change then the
effect of a species on its environment is effectively immediate. This assumes, in ef-
fect, that resources are always at equilibrium before the next evolutionary change
occurs. This might be appropriate when modelling physical resources such as space
or light. More generally, the ecological response of a niche to the intrusion of a
new species may not be immediate. A latent effect on local ﬁtness might be appro-
priate when modelling biotic resources (species of the lower trophic level) that are
themselves subject to nonlinear growth and decay. Rather than model the dynamic
behaviour of resources explicitly, here we simply investigate the effect of a delay or
latency term in the effect that each species has on the depression of the ﬁtness land-
scape. A latent effect takes some time steps before it becomes apparent. Hence, in
our model, we basically have two different modes. The deformation is either placed
at the same position as the species (immediate effect) or it is placed at the position
where the species was located some time steps ago (latent effect). For simplicity, we
assume the same latency value for all species/locations in trait space.
In the latent as well as the non-latent model each species climbs the local ﬁtness
gradient. However, in the latent model, it takes a certain time before a local optimum
is depressed by the presence of the species. Once this happens, the ﬁtness of the
species is no longer optimal and it needs to adapt to a new optimum. Figure 12.5
illustrates what happens if two species climb towards the same local optimum.
(a)
(b)
(f)
(e)
(c)
(d)
(h)
(g)
Fig. 12.5 (a) Two species are placed next to each other. (b) Initially, they deform the land-
scape surrounding them which causes a local optimum which is located in between the two
species. (c) Both species are climbing towards the same local optimum. (d) If the latency is
rather long, then both species are able to reach this optimum before the landscape deforms.
Once they have reached this optimum, they have to stay put. (e-f) After a while the defor-
mation caused by the exploitation of local resources follows them. This signiﬁcantly reduces
their ﬁtness. (g-h) From the bottom of the valley, they may climb up again to either side of
the valley they created.

350
R.A. Watson and M. Ebner
12.4
Experimental Results
Experiments were performed on a one-dimensional and on a two-dimensional ﬁt-
ness landscape with circular boundary conditions. We will see below that interesting
behavior emerges as we switch from a one-dimensional to a two-dimensional world.
The source code for these experiments can be downloaded from the second author’s
web page1. The experiments are also available as MPEG as well as AVI movies.
12.4.1
Experiments on a One-Dimensional Landscape
First we investigated the dynamics of competitive coevolution on a one-dimensional
landscape. We have varied the update rule, the latency period and the type of envi-
ronment used. The parameters for these experiments are shown in Table 12.1. The
different settings illustrate interesting qualitative features of the dynamics. In par-
ticular, there are three different dynamic regimes that these experiments exhibited -
static, cyclic, and races - as we shall discuss.
Table 12.1 Nine different experiments were carried out on a one-dimensional ﬁtness land-
scape. We have varied the update rule, the latency period and the type of environment. The
most important parameter determining the behavior of the species is the latency period.
Experiment Species
Update Rule
Latency Hills Observed Behavior
Figure
1
10
Equation (12.1)
0
0
cyclic (stasis)
12.7
2
10
Equation (12.1)
50
0
clumped shift
12.8
3
10
Equation (12.2)
0
0
stasis
12.9
4
10
Equation (12.2)
50
0
cyclic or arms race 12.10 & 12.11
5
10
Equation (12.3)
0
0
stasis
same as 12.9
6
10
Equation (12.3)
3
0
cyclic
12.12
7
10
Equation (12.3)
50
0
arms race
12.13
8
10
Equation (12.3)
0
25
stasis
12.14
9
10
Equation (12.3)
50
25
arms race
12.15
(a)
(b)
Fig. 12.6 (a) Flat ﬁtness landscape. (b) Non-ﬂat ﬁtness landscape with random variations.
1 http://stubber.math-inf.uni-greifswald.de/˜ebner/

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
351
106
0
20
40
102
104
Fig. 12.7 Experiment 1: The velocity is de-
termined by the sign of the environment’s
gradient (constant evolution rate). The pa-
rameters (shown in Table 12.1) lead to small
cyclic behavior. The species keep oscillate
back and forth. The species’ current velocity
is illustrated by the lines directly above the
species. The number in the upper left corner
shows the current time step.
980
0
20
40
900
940
Fig. 12.8 Experiment 2: Velocity is set ac-
cording to the sign of the landscape’s gra-
dient (proportional rate). The parameters
(shown in Table 12.1) lead to a ’clumped
shifting’ behavior.

352
R.A. Watson and M. Ebner
We have used 10 species throughout our experiments on the one-dimensional ﬁt-
ness landscape. Experiments were carried out using different environments, specif-
ically, a uniform distribution of resources creating an initially completely ﬂat land-
scape (Figure 12.6(a)) and a non-uniform distribution of resources where some
Gaussian ‘hills’ were distributed randomly over the landscape (Figure 12.6(b)).
We experiment with all three update rules and vary the latency period. We observe
that the latency period is the crucial parameter in determining the different modes
of behaviour that the ecosystem exhibits. Speciﬁcally, an arms race only results if
we have a non-zero latency period.
For Experiment 1, update rule (12.1) was used to update the direction of the
species’ evolution (with constant rate). A completely ﬂat environment and no la-
tency was used, i.e. the depletion of resources happens immediately. The resulting
behavior is shown in Figure 12.7. The species spread over the landscape and keep
moving back and forth because the best place to be is the point that is most distant
from other species at the current time. However, as soon as a species moves in the
direction the best place to be is behind it in the other direction. Basically, evolution
has come to a halt. The species no longer move over the landscape.
1080
Fig. 12.9 Experiment 3: For this experiment, we use a velocity update rule where velocity is
directly proportional to the gradient of the environment. As we can see from the small dots
located directly above each species, the species are almost stationary. As a result, no fur-
ther evolutionary change or improvement is possible and evolutionary space is only partially
explored.
When we set the latency to 50 (Experiment 2), we observe the clumped shifting
behavior as shown in Figure 12.8. First, the species climb towards a local optimum.
Then the deformation increases. Eventually several or even all of the species end up
very close together. The clump of species causes a large depression on the ﬁtness
landscape and continually moves in one direction. The entire evolutionary landscape
is explored. Note that at any point in time there are many areas of the ﬁtness land-
scape where resources are not being utilised at all (i.e., there are no species in those
locations and no depression of the landscape).
For Experiment 3 we used the update rule (12.2) to update the velocity of the
species. The parameter α was set to 10. No latency, i.e. the depletion of resources
is immediate, and a completely ﬂat environment was used. As a result, the species
spread over the entire landscape utilising all areas of niche space equally. This leads
to an almost stationary state with little movement as shown in Figure 12.9. Once
the species are spread over the entire ﬁtness landscape, no further evolution or im-
provement is possible. This can also be viewed as each species having found a niche
where they do not interfere very much with the other species.

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
353
1280
1320
1200
0
40
1240
Fig. 12.10 Experiment 4(a): Here, we use a
velocity update rule where velocity is always
equal to the gradient of the environment. The
parameters of this experiment (as shown in
Table 12.1) may lead to a cyclic behavior as
is shown here.
1140
0
20
40
1220
1180
Fig. 12.11 Experiment 4(b): The parameters
of Experiment 4 may also lead to an arms
race
For Experiment 4 we used update rule (12.2). The latency parameter was set to
50, i.e. the depletion of resources does not happen immediately. We have used a
completely ﬂat landscape/uniform environment for this experiment. Two qualita-
tively different behaviors were observed. One outcome of this experiment, a cyclic
behavior, is shown in Figure 12.10. First, the species spread out over the landscape.
Local optima are created in between two species due to the delayed impact on the ﬁt-
ness landscape. The species try to climb towards these optima. However, once they
have reached them, the depletion of resources sets in and the species are moved

354
R.A. Watson and M. Ebner
to a lower position on the ﬁtness landscape. New local optima have formed and
the species again have to climb towards these optima. This process repeats indeﬁ-
nitely. Evolution essentially has come to a halt. Depending on how the species are
distributed initially over the ﬁtness landscape, we also observed an arms race (see
Figure 12.11). This happens if several species are located very close to each other.
As they sweep over the landscape, they collect more and more species in their arms
race until eventually all species are included.
Update rule (12.2) as well as update rule (12.1) result in a rather slow movement
of the species. Update rule (12.3) results in a much faster movement of the species.
Experiment 5 is the ﬁrst to use update rule (12.3) with parameters α = 9 and β = 0.9.
No latency and an initially ﬂat landscape was used. We again observe the behavior
which was observed in Experiment 3 (see Figure 12.9). The species spread-out over
the landscape and remain almost stationary. Evolution has come to a halt.
For Experiment 6 we only changed one parameter slightly. Speciﬁcally, here a la-
tency of 3 is introduced. This leads to a cyclic behavior as is shown in Figure 12.12.
Initially, the species spread out over the entire landscape. We then observe groups of
two species which are located next to each other. Both of them try to climb towards
the local optimum located in between them. Due to the non-zero latency parameter,
the deformation follows the species with a little delay. This causes the depression of
the optimum to which they have climbed and the creation of new local optima at the
exact same position where they started out. This leads to cyclic behavior because the
species now try to climb these optima and they end up in the exact same position
where they had started. Once this state has been reached, no further improvement is
possible and the evolutionary space is only partially explored.
Experiment 7 examines a latency of 50. Here we observe an arms race between
the species. Figure 12.13 shows the results obtained for a typical run. From their
initially random distribution, two species that happen to lie on the same side of a
deformation try to climb towards the same local optimum. After a while the defor-
mation follows them. As they try to escape from the local valley, more and more
species are caught by this deformation. Eventually an arms race results in which all
species are involved.
We also experimented with a non-uniform distribution of resources creating an
initial ﬁtness landscape that is not ﬂat. For this environment, 50 Gaussian peaks are
distributed over the ﬁtness landscape and summed (Figure 12.6(b)). As before, the
landscape is then deformed by the positions of the species. This landscape was used
for Experiments 8 and 9.
Experiment 8 uses the same parameters as Experiment 5 except that the initial
ﬁtness landscape is not ﬂat. The species again spread out over the entire landscape.
Due to the fact that the latency factor was set to 0, the inﬂuence of a species on
their environment happens immediately. Hence, the non-ﬂat landscape is deformed
slightly by the species. The species nevertheless adapt to their environment and an
almost stationary state as shown in Figure 12.14 results. Once this attractor has been
reached, evolution comes to a halt. Note that the non-uniform distribution of species
matches the availability of resources in the initial ﬁtness landscape resulting in an
ecosystem organisation where no resources are left unused.

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
355
1280
1320
1200
0
40
1240
Fig. 12.12 Experiment 6: The cyclic behav-
ior shown here is the attractor of Experiment
6. The species spread out over the landscape.
Groups of two species try to climb towards
the local optimum which is located in be-
tween them. Due to the latency, the depletion
follows the species after a delay. The species
then ﬁnd themselves with low ﬁtness and
new ﬁtness gradients, but this returns them
to a position they have been to before. Once
this attractor is reached, no further improve-
ment is possible.
600
0
20
40
680
640
Fig. 12.13 Experiment 7: The parameters of
Experiment 7 (as shown in Table 12.1) lead
to an arms race

356
R.A. Watson and M. Ebner
40
0
10
20
100
30
Fig. 12.14 Experiment 8: A non-ﬂat ﬁtness
landscape was used. The shape of this ﬁtness
landscape can be seen in Figure 12.6(b). Ini-
tially, the species spread out over the ﬁtness
landscape. They try to climb towards a lo-
cal optimum avoiding the negative inﬂuence
of other species. After some time a stable at-
tractor is reached. All species become sta-
tionary. Once this has happened, no further
improvement is possible.
670
0
20
40
590
630
Fig. 12.15 Experiment 9: This experiment
uses the same parameters as Experiment 7
except that a non-ﬂat ﬁtness landscape was
used. Due to the large latency, the species
clump together setting up an arms race. The
species explore the entire ﬁtness landscape
despite the non-uniform distribution of re-
sources, but at any one point in time, many
niches are left unused.

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
357
For Experiment 9 we have increased the latency to 50. All other parameters were
exactly the same as for Experiment 7. We observe that the species ﬁrst adapt to their
environment by climbing towards a local optimum. However, once this optimum
has been reached, depletion of the resources kicks in and the species are no longer
located on the optimum. They have to adapt and climb towards a new optimum. An
arms race sets in where the entire evolutionary space is explored. The species move
over the entire landscape, i.e. all local optima are explored (Figure 12.15).
We conclude this set of experiments by noting that with latency an arms race is
possible. Without latency an arms race does not happen for any of the conditions we
tested. This is robust for all update rules, i.e. models of evolutionary rates.
12.4.2
Experiments on a Two-Dimensional Landscape
Conceivably, the results obtained with a one-dimensional landscape, although sim-
ple to simulate, might introduce special symmetries that are not representative of
trait spaces with dimensionality higher than one. Intuitively, one might put it like
this - pushing a ball up an incline with a pointed stick is much easier in a pipe
than on a plane. That is, when one species moves away from another species in a
Table 12.2 Parameter settings which were used for the experiments on the two-dimensional
landscape.
Experiment Species
Update Rule
Latency Hills Observed Behavior Figure
10
30
Equation (12.1)
0
0
shift
12.17
11
30
Equation (12.1)
50
0
continued motion
12.18
12
30
Equation (12.2)
0
0
stasis with small drift 12.19
13
30
Equation (12.2)
50
0
cyclic with drift
12.20
14
30
Equation (12.3)
0
0
stasis with drift
12.21
15
30
Equation (12.3)
3
0
cyclic with drift
12.22
16
30
Equation (12.3)
50
0
arms race
12.23
17
30
Equation (12.3)
0
100
stasis
12.25
18
30
Equation (12.3)
50
100
arms race
12.26
(a)
(b)
Fig. 12.16 (a) Flat 2D ﬁtness landscape. (b) Non-ﬂat 2D ﬁtness landscape with random vari-
ations.

358
R.A. Watson and M. Ebner
one-dimensional space, the ‘evader’ has no option but to move in exactly the same
direction as the ‘pursuer’. This might contribute to a stability in the arms race that is
somewhat artiﬁcial. In contrast, in a two-dimensional space, the direction of move-
ment of two species may diverge and one species may move ‘past’ another.
We therefore perform the same experiments on a two-dimensional landscape. In
the two-dimensional experiments it is even more difﬁcult to convey the dynamics
of the experiments using static ﬁgures than it is in previous ﬁgures using a one-
dimensional environment. The interested reader is referred to the movies or the
programs which are available for download2. Table 12.2 summarizes the parameters
that we have used for our experiments in two dimensions. Since the two-dimensional
landscape is bigger than the one dimensional landscape, we have increased the num-
ber of species to 30. Figure 12.17 shows the results for Experiment 10. Experiments
10 through 16 use a ﬂat two-dimensional ﬁtness landscape shown in Figure 12.16(a).
The results for the experiments on the two-dimensional landscape are qualitatively
similar to the results which were obtained for the one dimensional case. However,
in some cases more complex behavior results due to the fact that additional direc-
tions are available in which a species can move. For example, in Experiment 2, on
the one-dimensional ﬁtness landscape, we experienced a clumped shifting behavior
of all species. For the two-dimensional case (Experiment 11) we experience con-
tinued motion because the species are not constrained to move along a single line.
The results of Experiment 11 are shown in Figure 12.18. The results of Experiments
12 and 13 are shown in Figures 12.19 and 12.20 respectively. For Experiment 12,
we observe a resulting state of stasis as in the one-dimensional case. Experiment 13
results in a mix between cyclic behavior and continued motion.
Experiments 14 through 18 produced the most interesting behaviors. Experiment
14 resulted in a state of stasis with small drift. A snapshot of the resulting state is
shown in Figure 12.21. For Experiment 15 the latency was increased to 3. With a
latency of 3 we again observed cyclic behavior with drift (Figure 12.22). Because
of the two dimensions, the individuals also move through space. When we use a
latency of 50 (Experiment 16) we again obtain an arms race similar to the one ob-
tained in Experiment 7 on the one-dimensional ﬁtness landscape. In comparing the
two corresponding experiments (Experiment 7 and 16) in one- and two- dimensional
spaces we can see how they differ. In both environments, the species climb towards
a local optimum, and the landscape responds to the presence of these species, the lo-
cal optimum has turned into a valley. On a one-dimensional environment the species
have only two possible directions in which they can leave this local depression – left
or right. However on a two-dimensional landscape, the individuals have an inﬁnite
number of directions they can move in. In climbing out of the local depression, the
species spread-out across the rim Figure 12.24. If the separation between the species
is of sufﬁcient extent, then two separate depressions may be created each of which
may result in its own arms race further increasing the separation between them. We
expect that this possibility would be further increased in trait-spaces with higher di-
mensionality than two. It is interesting to note that our model does not involve island
2 http://stubber.math-inf.uni-greifswald.de/˜{}ebner/

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
359
1000
100
50
0
Fig. 12.17 Experiment 10: As in the one-
dimensional case one can observe a slow
synchronous shift of the species
1500
1700
1900
0
Fig. 12.18 Experiment 11: We observe con-
tinued asynchronous motion. The results
are again similar to the one-dimensional
case. The asynchronous motion results from
the increase in the number of directions a
species can move.
models or other means of artiﬁcially segregating the species, i.e. reproductive isola-
tion [16] or mate preference due to marker traits [6, 35]. Here, sympatric speciation
[40], speciation without geographic of physical isolation, is a result of the coupled
dynamics of the species [25]. However, this is nonetheless an impoverished form of
ecological diversity compared to the results of experiments without latency.
Experiment 17 and 18 use a non-ﬂat ﬁtness landscape shown in Figure 12.16(b)
with 100 Gaussian hills distributed randomly over the landscape. A latency of 0 is
used for Experiment 17. We obtain a state of stasis with oscillations which is shown

360
R.A. Watson and M. Ebner
50
100
2100
0
Fig. 12.19 Experiment 12: We again ob-
serve stasis with drift as in the one-
dimensional case
2200
2000
2100
0
Fig. 12.20 Experiment 13: We observe a
mixture between cyclic behavior and contin-
ued motion
in Figure 12.25. The species distribute over the entire landscape climbing hills as
long as it is advantageous to them and in so doing they equalize the landscape. The
ecosystem therefore arrives at an organisation of species which uses the available
resources efﬁciently. In contrast, when we use a latency of 50, we again observe
Red Queen dynamics as shown in Figure 12.26. Latency thus causes an ecosystem
organisation where resources are not used efﬁciently - the same resources are being
used by many species whilst others are not being used.

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
361
10
20
1100
0
1000
Fig. 12.21 Experiment 14:
With a latency of 0 evolu-
tion eventually stops and a
state of stasis is reached
1200
1250
1300
0
10
Fig. 12.22 Experiment 15:
A latency of 3 produces
cyclic behavior
1200
1250
1300
0
10
Fig. 12.23 Experiment 16:
With a latency of 50 we ob-
tain an arms race between
different species
2630
2660
2690
Fig. 12.24 Spontaneous speciation occurs during Experiment 16. The species spread along
the rim of the depression. This causes the creation of two separate sub-sets of species engaged
in their own arms races.
12.5
Discussion and Conclusions
12.5.1
Stasis, Change and Improvement
The investigations above have examined a model of an ecosystem where multiple
species compete for shared resources. We studied the conditions in this model that
produce Red Queen dynamics. The reasoning of Stenseth and Maynard Smith sug-
gests that such a model, having a non-zero-sum game and where the relationship
between the lag load (distance from local peaks) and the rate of increase of lag load

362
R.A. Watson and M. Ebner
10
980
1020
0
Fig. 12.25 Experiment 17: A non-ﬂat envi-
ronment and a latency of 0 was used. The
species again spread over the landscape to
avoid the negative inﬂuence of other species
and to exploit and ﬁtness advantages present
in the landscape.
10
2470
2520
0
Fig. 12.26 Experiment 18: An arms race oc-
curs. The species eventually sweep over all
local optima, but at any one point in time
their use of available resources is inefﬁcient.

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
363
is non-linear in this manner, can readily produce stable Red Queen dynamics. Our
model provides a speciﬁc mechanistic illustration of the scenario they describe and
our observations indicate that Red Queen dynamics can be readily exhibited. How-
ever, we also observe that within these conditions the same model can also produce
evolutionary stasis. We ﬁnd that the critical parameter in determining this distinction
is the latency with which evolutionary changes affect ecological resources and thus
affect other species. Speciﬁcally, if ecological changes are much more rapid than
evolutionary changes, such that the ecological response to an evolutionary change
is effectively instantaneous, then an evolutionary change in one species has (via its
effect on the ﬁtness landscape) an immediate effect on the selective pressure act-
ing on other species and evolutionary stasis is possible. However, if evolutionary
timescales are closer to ecological timescales, such that the ecological response to
an evolutionary change is not immediate, then we often observe species engaging in
Red Queen dynamics.
We investigated several other factors that may affect such dynamics; the relation-
ship between rate of evolution and the slope of the ﬁtness landscape, the dimension-
ality of the trait/niche space, and whether the intrinsic distribution of resources is
uniform or non-uniform. We ﬁnd that the relationship between latency and the Red
Queen dynamics is quite robust to these factors. However, there were some differ-
ences between one- and two-dimensional spaces and it seems plausible that higher
dimensional spaces would amplify these differences.
In the case of a uniform distribution of resources, we cannot really say that the
presence of continued evolutionary change corresponds to improvement – all parts
of the trait space have intrinsically equal value. However, it is notable that the con-
tinued evolutionary change causes species to explore the entire space. In the case of
non-uniform resource distributions, some areas of trait space are intrinsically more
valuable than others. In this case, the Red Queen dynamics are capable of pushing
species off local optima and forcing them to explore other peaks in the landscape.
There is however, no guarantee that any subsequent peak is an intrinsic improve-
ment over the previous peak – it is only a relative improvement at this point in time
because of the transient resource depletion. The relationship between continued evo-
lutionary change and an arms race that produces continued improvement therefore
remains problematic.
12.5.2
Diversity and Efﬁciency
Moving beyond the questions of change and stasis as discussed by Stenseth and
Maynard Smith, we ﬁnd that there is a strong link between these different dy-
namical outcomes and features of ecological diversity and efﬁciency. The natural
result of ecological competition is to produce a selective pressure to diversify –
to utilise resources that others are not using. But conversely, when species evolve
without competition on the same landscape the tendency is for them to follow the
same selective gradients and therefore converge on the same high ﬁtness regions.
We observe that when ecological dynamics respond rapidly to evolutionary change

364
R.A. Watson and M. Ebner
(latency= 0), species diversify onto different resources as expected. But when eco-
logical responses are delayed (latency> 0), species clump together competing for
resources in the same or strongly overlapping niches. This is not because competi-
tion has been turned off or reduced – species still use the same amount of resource
in any one timestep and the total resource available is constant – but the organisation
of that competition is different. We can make some intuitive sense of this observa-
tion. In an ecosystem of species where competition is latent the organisation of the
species with respect to one another is based on out-of-date information – based on
the locations that species occupied some evolutionary timesteps in the past. Thus,
such an ecosystem is less able to organise itself to utilise resources efﬁciently than
one where the information about the location of other species is up-to-date. In the
case of a uniform distribution of resources, the non-latent ecosystem simply spreads
out evenly over niche space. In the case of a non-uniform distribution of resources
we observe that the distribution of species is correspondingly non-uniform tending
to approximately equalise the landscape. In contrast, in the latent dynamics (given
either uniform or non-uniform resources), species positions are clumped together
leaving many resources under-utilised at any particular point in time. The non-latent
dynamics are thereby relatively efﬁcient in their collective use of resources com-
pared to the latent dynamics. Future work could plausibly quantify the efﬁciency of
the resultant resource utilisation and the relationship of these qualitative regimes to
the amount of latency.
It also makes intuitive sense that the two modes of diverse-efﬁcient organisation
and clumped-inefﬁcient organisation correspond to the two dynamical modes of sta-
sis and Red Queen dynamics, respectively. In order for a species to stop evolving,
selective gradients in all directions need to be exhausted. That can be achieved when
species are utilising all resources in a diverse manner, but when species are clumped
together that naturally leaves some resources under-utilised with non-zero ﬁtness
gradients that promote further evolutionary change. This suggests a systematic rela-
tionship between ecological organisation and diversity and evolutionary stasis that
deserves further attention.
In artiﬁcial coevolution, these two modes of behaviour correspond loosely to the
two types of coevolutionary set-up – cooperative and competitive. In the diverse or-
ganisation, the ecosystem as a whole collectively solves the problem of utilising all
available resources. This effectively decomposes the overall problem, dynamically
dividing it up into semi-independent sub-problems and avoiding a scenario where
multiple species attempt to solve the same part of the problem. But, at the same time,
this scenario fails to produce an arms race where continued evolutionary change is
observed. Conversely, in the clumped organisation, the species do engage in arms
races – each species continually pushing other species to evolve to new areas of
the trait space. This means that all species tend to cover all areas of the space, in-
cluding the highest peaks in the underlying ﬁtness landscape. But, at the same time,
in this dynamic the ecosystem as a whole fails to utilise all resources collectively.
Accordingly, we can view the non-latent dynamics as producing a cooperative co-
evolution scenario and the latent dynamics as producing a competitive coevolu-
tion scenario. The former effectively solves the problem-decomposition issue of

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
365
cooperative coevolution (although the nature of the decomposition problem here is
not difﬁcult) whereas the latter effectively solves the arms-race conditions required
for competitive coevolution (although continued improvement is a different mat-
ter). However, our observations also suggest that ﬁnding a balance of the two is
non-trivial and perhaps even intrinsically opposed. In the current models the trait
space of a species and its ﬁtness dependencies on other species have a direct rela-
tionship (i.e., based on distance). For engineering purposes, where the task being
performed (collectively or individually) is complex, the relationship between the
trait space of an individual and its frequency dependent ﬁtness effects on others will
be less straightforward. Nonetheless, further investigation could address the change-
over from the diverse-stable mode to the converged-dynamic mode as a function of
latency and whether or not the trade-off of competition and cooperation can be use-
fully controlled.
In summary, our simple evolutionary model allows us to explore the dynamics
of coevolution under various conditions. The model is simple and easy to under-
stand and the behaviour of the species can be observed in real time. Our inves-
tigations using these models illustrate some important factors which inﬂuence the
balance of evolutionary stasis and Red Queen dynamics. We ﬁnd that both outcomes
are possible without changing the nature of the underlying game, or the level at
which selection is applied, but merely by altering the coupling between ecological
and evolutionary timescales. Speciﬁcally, if ecological change is nearly instanta-
neous compared to evolutionary change, stasis results; but conversely, if evolution-
ary timescales are closer to ecological timescales, such that resource depletion is not
instantaneous on evolutionary timescales, then Red Queen dynamics result. We also
observe that in the stasis mode, the overall utilisation of resources by the ecosys-
tem is relatively efﬁcient whereas in the Red-Queen mode, the organisation of the
ecosystem is inefﬁcient as species tend to clump together competing in overlapping
niches. These models thereby suggest a link between the issues of change and stasis
discussed by Stenseth and Maynard Smith and matters of ecological diversity and
organisation. In the same way, these models also suggest some basic conditions that
inﬂuence the organisation of inter-species interactions and the balance of individual
and collective adaptation in ecosystems.
References
[1] Adami, C.: Learning and complexity in genetic auto-adaptive systems. Physica D 80,
154–170 (1995)
[2] Carrol, L.: The Complete Works. CRW Publishing Limited, London (2005)
[3] Cliff, D., Miller, G.F.: Tracking the red queen: Measurements of adaptive progress in
co-evolutionary simulations. In: Mor´an, F., Moreno, A., Merelo, J.J., Chac´on, P. (eds.)
Third European Conference on Artiﬁcial Life, pp. 200–218. Springer, Berlin (1995)
[4] Cliff, D., Miller, G.F.: Co-evolution of pursuit and evasion II: Simulation methods and
results. In: Maes, P., Mataric, M.J., Meyer, J.A., Pollack, J., Wilson, S.W. (eds.) From
Animals to Animats 4: Proceedings of the Fourth International Conference on Simula-
tion of Adaptive Behavior, pp. 506–515. The MIT Press, Cambridge (1996)

366
R.A. Watson and M. Ebner
[5] Dawkins, R., Krebs, J.R.: Arms races between and within species. Proc. R. Soc. Lond.
B 205, 489–511 (1979)
[6] Dieckmann, U., Doebeli, M.: On the origin of species by sympatric speciation. Na-
ture 400, 354–357 (1999)
[7] Ebner, M.: A three-dimensional environment for self-reproducing programs. In: Kele-
men, J., Sos´ık, P. (eds.) ECAL 2001. LNCS (LNAI), vol. 2159, pp. 306–315. Springer,
Heidelberg (2001)
[8] Ebner, M.: Coevolution and the red queen effect shape virtual plants. Genetic Program-
ming and Evolvable Machines 7(1), 103–123 (2006)
[9] Ebner, M., Watson, R.A., Alexander, J.: Co-evolutionary dynamics on a deformable
landscape. In: Zalzala, A., Fonseca, C., Kim, J.H., Smith, A., Yao, X. (eds.) Proceedings
of the 2000 Congress on Evolutionary Computation, vol. 2, pp. 1284–1291. IEEE Press,
San Diego (2000)
[10] Ebner, M., Watson, R.A., Alexander, J.: Coevolutionary dynamics of interacting
species. In: Di Chio, C., et al. (eds.) EvoApplicatons 2010, Part I. LNCS, vol. 6024,
pp. 1–10. Springer, Heidelberg (2010)
[11] Faro, J., Velasco, S.: An approximation for prey-predator models with time delay. Phys-
ica D 110, 313–322 (1997)
[12] Floreano, D., Nolﬁ, S.: God save the red queen! Competition in co-evolutionary
robotics. In: Koza, J.R., Deb, K., Dorigo, M., Fogel, D.B., Garzon, M., Iba, H., Riolo,
R.L. (eds.) Genetic Programming 1997: Proceedings of the Second International Con-
ference on Genetic Programming, July 13-16, pp. 398–406. Morgan Kaufmann Pub-
lishers, San Francisco (1997)
[13] Floreano, D., Nolﬁ, S., Mondada, F.: Competitive co-evolutionary robotics: From the-
ory to practice. In: Pfeifer, R., Blumberg, B., Meyer, J.A., Wilson, S.W. (eds.) From
Animals to Animats 5: Proceedings of the Fifth International Conference on Simulation
of Adaptive Behavior, pp. 515–524. The MIT Press, Cambridge (1998)
[14] Gillespie, J.H.: Molecular evolution over the mutational landscape. Evolution 38, 1116–
1129 (1984)
[15] Goldberg, D.E.: Genetic Algorithms in Search, Optimization, and Machine Learning.
Addison-Wesley Publishing Company, Reading (1989)
[16] Higgs, P.G., Derrida, B.: Genetic distance and species formation in evolving popula-
tions. Journal of Molecular Evolution 35, 454–465 (1992)
[17] Hillis, W.D.: Co-evolving parasites improve simulated evolution as an optimization pro-
cedure. In: Langton, C.G., Taylor, C., Farmer, J.D., Rasmussen, S. (eds.) Artiﬁcial Life
II, SFI Studies in the Sciences of Complexity, pp. 313–324. Addison-Wesley (1991)
[18] Hutchinson, G.E.: The niche: an abstractly inhabited hypervolume. In: Hutchinson, G.E.
(ed.) The Ecological Theater and the Evolutionary Play, Yale University Press, New
Haven (1965)
[19] Juille, H., Pollack, J.B.: Coevolving the ideal trainer: Application to the discovery of
cellular automata rules. In: Koza, J.R. (ed.) Proceedings of the Third Annual Conference
on Genetic Programming, University of Wisconsin, Madison, WI, pp. 519–527. Morgan
Kaufmann, San Francisco (1999)
[20] Kauffman, S.A.: The Origins of Order. Self-Organization and Selection in Evolution.
Oxford University Press, Oxford (1993)
[21] Luke, S., Wiegand, R.P.: Guaranteeing coevolutionary objective measures. In: De Jong,
K.A., Poli, R., Rowe, J.E. (eds.) Foundations of Genetic Algorithms VII, pp. 237–251.
Morgan Kaufman, San Francisco (2002)

12
Eco–Evolutionary Dynamics on Deformable Fitness Landscapes
367
[22] MacArthur, R.H.: The theory of the niche. In: Lewontin, R.C. (ed.) Population Biology
and Evolution, Syracuse University Press, Syracuse (1968)
[23] MacArthur, R.H., Levins, R.: Competition, habitat selection and character displacement
in a patchy environment. Proc. Nat. Acad. Sci. USA 51, 1207–1210 (1964)
[24] May, R.M., MacArthur, R.H.: Niche overlap as a function of environmental variability.
Proc. Nat. Acad. Sci. USA 69, 1109–1113 (1972)
[25] Metz, J.A.J., Geritz, S.A.H., Meszena, G., Jacobs, F.J.A., van Heerwaarden, J.S.: Adap-
tive dynamics: a geometrical study of the consequences of nearly faithful reproduction.
In: Strien, S.J.V., Lunel, S.M.V. (eds.) Stochastic and Spatial Structures of Dynamical
Systems, North Holland, Amsterdam, The Netherlands, pp. 183–231 (1996)
[26] Miller, G.F., Cliff, D.: Protean behavior in dynamic games: Arguments for the co-
evolution of pursuit-evasion tactics. In: Cliff, D., Husbands, P., Meyer, J., Wilson, S.W.
(eds.) From Animals to Animats III: Proceedings of the Third International Conference
on Simulation of Adaptive Behavior, pp. 411–420. The MIT Press, Cambridge (1994)
[27] Pavlicev, M., Cheverud, J.M., Wagner, G.P.: Evolution of adaptive phenotypic varia-
tion patterns by direct selection for evolvability. Proceedings of the Royal Society B:
Biological Sciences 278, 1903–1912 (2011)
[28] Pelletier, F., Garant, D., Hendry, A.P.: Eco-evolutionary dynamics. Phil. Trans. R. Soc.
B 364, 1483–1489 (2009)
[29] Post, D.M., Palkovacs, E.P.: Eco-evolutionary feedbacks in community and ecosystem
ecology: interactions between the ecological theatre and the evolutionary play. Phil.
Trans. R. Soc. B 364, 1629–1640 (2009)
[30] Potter, M.A., Couldrey, C.: A cooperative coevolutionary approach to function opti-
mization. In: Schaefer, R., Cotta, C., Kołodziej, J., Rudolph, G. (eds.) PPSN XI. LNCS,
vol. 6238, pp. 374–383. Springer, Heidelberg (2010)
[31] Ray, T.S.: Is it alive or is it GA? In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the
Fourth International Conference on Genetic Algorithms, University of California, San
Diego, pp. 527–534. Morgan Kaufmann Publishers, San Mateo (1991)
[32] Ray, T.S.: Evolution, complexity, entropy and artiﬁcial reality. Physica D 75, 239–263
(1994)
[33] Reynolds, C.W.: Competition, coevolution and the game of tag. In: Brooks, R.A., Maes,
P. (eds.) Artiﬁcial Life IV, July 6-8, pp. 59–69. The MIT Press, Cambridge (1994)
[34] Ridley, M.: The Red Queen: Sex and the Evolution of Human Nature. Penguin Books,
New York (1994)
[35] Riolo, R.L., Cohen, M.D., Axelrod, R.: Evolution of cooperation without reciprocity.
Nature 414, 441–443 (2001)
[36] Rosenzweig, M.L., Brown, J.S., Vincent, T.L.: Red queens and ESS: The coevolution
of evolutionary rates. Evolutionary Ecology 1, 59–94 (1987)
[37] Roughgarden, J.: Coevolution in ecological systems: results from “loop analysis” for
purely density-dependent evolution. In: Christiansen, F.B., Fenchel, T.M. (eds.) Mea-
suring Selection in Natural Populations, pp. 499–517. Springer, Berlin (1977)
[38] Maynard Smith, J.: A comment on the red queen. Amer. Natur. 110, 325–330 (1976)
[39] Stenseth, N.C., Maynard Smith, J.: Coevolution in ecosystems: Red queen evolution or
stasis? Evolution 38(4), 870–880 (1984)
[40] Tregenza, T., Butlin, R.K.: Speciation without isolation. Nature 400, 311–312 (1999)
[41] Van Valen, L.: A new evolutionary law. Evolutionary Theory 1, 1–30 (1973)
[42] Valentine, J.W.: Conceptual models of ecosystem evolution. In: Schopf, T.J.M. (ed.)
Models in Paleobiology, pp. 192–215. Freeman Cooper, San Francisco (1972)

368
R.A. Watson and M. Ebner
[43] Vygotsky, L.S.: Mind and Society: The Development of Higher Psychological Pro-
cesses. Harvard University Press, Cambridge (1978)
[44] Watson, R.A., Pollack, J.B.: Coevolutionary dynamics in a minimal substrate. In: Spec-
tor, L. (ed.) Proceedings of the Genetic and Evolutionary Computation Conference, pp.
702–709 (2001)
[45] Wiegand, R.P.: An Analysis of Cooperative Coevolutionary Algorithms. George Mason
University Fairfax, VA (2004)
[46] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution.
In: Jones, D.F. (ed.) Proceedings of the Sixth International Congress on Genetics, Ithaca,
NY, pp. 356–366 (1932)

Chapter 13
Correlation Analysis of Coupled Fitness
Landscapes
Wim Hordijk
Abstract. In this chapter we present an overview of a statistical analysis to measure
and express the correlation structure of ﬁtness landscapes. This correlation anal-
ysis is then applied to both static and coupled ﬁtness landscapes as generated by
the NK-model and the NKC-model, respectively. An overview of the main results
is provided, which shows that this correlation analysis can indeed be applied in a
meaningful way to coupled ﬁtness landscapes. This can provide a direct and useful
link to the actual search performance of evolutionary algorithms that use a coevolu-
tionary approach.
13.1
Introduction
Fitness landscapes are a useful metaphor in the context of evolutionary computation
to envision a population of candidate solutions as moving around on a more or less
mountainous landscape, in search of the highest peaks. This concept originated in
population genetics, but has turned into a full theory in the area of evolutionary
computation, trying to relate the structure of ﬁtness landscapes to the performance
of (evolutionary) search algorithms.
To better understand this relation, it is important to have a quantitative way of
measuring and expressing the structure of ﬁtness landscapes. Traditionally, this is
done by using a measure of the landscape’s correlation length, i.e., the largest dis-
tance at which there is still some correlation between the ﬁtness values of two
(arbitrary) points in the landscape. However, this is a rather crude summary of a
landscape’s overall structure. In this chapter, we review a more detailed measure of
ﬁtness landscapes that identiﬁes and estimates a full statistical model to express a
landscape’s correlation structure.
Wim Hordijk
SmartAnalytiX.com, Lausanne, Switzerland
e-mail: wim@WorldWideWanderings.net
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
369
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_13, c⃝Springer-Verlag Berlin Heidelberg 2014

370
W. Hordijk
In the context of evolutionary computation, where the goal is to optimize a given
objective function, the associated ﬁtness landscape is usually ﬁxed. However, in
nature, different species do not evolve in isolation but coevolve together, thus cre-
ating changing environments for each other. This idea of coevolution has also been
adopted in evolutionary computation, where for example candidate solutions coe-
volve with test cases. In this situation, the resulting ﬁtness landscape is not static,
but the landscapes of two or more coevolving populations are coupled. A move of
one population on its own landscape changes the shape of the landscape of the other
population. In this chapter, we show how the correlation analysis mentioned above
can be extended and applied to such coupled ﬁtness landscapes as well.
The remainder of the chapter is structured as follows. The next section provides
a brief review of the concept and deﬁnition of ﬁtness landscapes, and of a useful
model for studying the structure of ﬁtness landscapes known as the NK-model, and
also the NKC-model, its extension to coupled landscapes. Section 13.3 then presents
an overview of a statistical analysis to measure and express the correlation structure
of ﬁtness landscapes. It is also explained how this correlation analysis can be ap-
plied to coupled ﬁtness landscapes. The results of applying this correlation analysis
to both static and coupled ﬁtness landscapes generated by the NK(C)-model are
presented in Section 13.4. Finally, Section 13.5 summarizes the main conclusions.
13.2
Fitness Landscapes
13.2.1
The Concept of Fitness Landscapes
The concept of a ﬁtness landscape was originally introduced in population genetics
as a metaphor to envision the ﬂow of populations on a landscape with hills, valleys,
and mountain peaks [31]. The height of each point in the landscape is associated
with the ﬁtness of an individual (or sub-population) occupying that point in geno-
type space. An evolving population can now be seen as moving through this space
under the forces of genetic mutation and natural selection, trying to “ﬁnd” the high-
est peaks in the landscape.
This landscape metaphor was later adopted in evolutionary computation [1, 3, 24]
to envision (combinatorial) optimization as a search through a mountainous land-
scape, also looking for the highest peaks. In this case, the height of a point in the
landscape is the value of some objective function as evaluated on the candidate so-
lution represented by that point, where the objective function is deﬁned by a given
optimization problem. However, the ﬁtness landscape concept has gone far beyond
being a mere metaphor, and has developed into a full theory that tries to relate the
structure of a ﬁtness landscape to the performance of search and optimization algo-
rithms (see e.g. [9, 12, 13, 15, 19, 21, 25, 26, 27]).

13
Correlation Analysis of Coupled Fitness Landscapes
371
13.2.2
The Deﬁnition of Fitness Landscapes
Generally, a ﬁtness landscape is deﬁned by three components:
(1) A representation space V, where each point v ∈V represents, in some suitable
encoding, a phenotype or a candidate solution to some optimization problem.
(2) A neighborhood relation N : V →2V which induces a metric, or notion of
“closeness”, on the representation space.
(3) A ﬁtness function f : V →R which associates a ﬁtness value f with each point
v in the representation space.
The representation spaceV can, for example, consist of all possible DNA sequences,
i.e., strings over the alphabet {A,C,G,T}, where each DNA string (or genotype)
represents a possible phenotype. Or, the representation space could consist of the
possible bit strings of a given length n, i.e., V = {0,1}n. These bit strings could then
represent candidate solutions to some optimization problem. For example, given a
graph G with n nodes for which a subgraph G′ ⊂G with some optimal property
needs to be found, each possible bit string of length n naturally represents a possible
subgraph G′ (i.e., subset of nodes).
The neighborhood relation N indicates which other elements of V are direct
“neighbors” of a given point v ∈V. Thus, N maps a point in the landscape to a
subset of all possible points, i.e., those that are its neighbors. The notation 2V in-
dicates the set of all possible subsets of the elements of a set V. In the context of
evolutionary algorithms, the neighborhood relation is usually deﬁned by the “move
operator” of interest, i.e, the operator that is used to search through the represen-
tation space V. In other words, the neighborhood relation N (v) indicates which
points in V can be reached in one move (of the search algorithm) from a given point
v. In the case of bit strings as representation and point mutation as the search opera-
tor, N (v) consists of all bit strings that differ in exactly one bit from v, for example
N (000) = {001,010,100}. This automatically induces the Hamming distance as a
metric on V.
Obviously, one can deﬁne different ﬁtness landscapes on the same representation
space V by using different search operators, as expressed in the “one operator, one
landscape” claim [13, 14]. Also note that there can be probabilities associated with
the neighborhood relation. In the point mutation example above, each one of the
three neighbors of a given point v has an equal probability of being produced by the
move operator. However, if we consider a mutation operator where each bit has a
probability p of being mutated, then the neighborhood of a given point v is the entire
space V (if p > 0, there is always a small but non-zero probability that each bit is
mutated). But in this case the probabilities of different neighbors being produced are
not equal. In particular, the probability that a given neighbor w at Hamming distance
h is produced, is equal to ph(1 −p)n−h for bit strings of length n. In one proposed
variant of the ﬁtness landscape deﬁnition above, these probabilities are included as
well [13].
Finally, the ﬁtness function f can be anything from a simple mathematical func-
tion that calculates a ﬁtness value f(v) directly from a given representation v, to

372
W. Hordijk
some complicated function that ﬁrst transforms a given representation v into an as-
sociated candidate solution, and then computes a ﬁtness value based on how well
this candidate solution solves the given optimization problem (which itself could be
a complicated computation or even simulation). Unless stated otherwise, here we
assume optimization to mean maximization, i.e., a higher ﬁtness value is better. In
case of a minimization problem, we can simply take −f(v) (or perhaps 1/ f(v)) and
still consider it as a maximization problem.
13.2.3
A Model of Fitness Landscapes
In this chapter, we use a particular model of ﬁtness landscapes known as the
NK-model [18, 19, 21], which was introduced to have a tunable and problem-
independent model for constructing ﬁtness landscapes. The main parameters of the
model are N, the number of “genes” in the genotype, i.e. the length of the strings
that constitute the points in the representation space V, and K, the number of other
genes that epistatically inﬂuence a given gene, i.e., the ﬁtness contribution of each
gene is determined by the gene itself plus K other genes. We consider an alpha-
bet of size two, i.e., the representation space is V = {0,1}N, or all bit strings of
length N.
The ﬁtness of a bit string v ∈V is deﬁned as follows. Assume every bit vi (i =
1,...,N) in a bit string v is assigned a ﬁtness contribution fi. However, this ﬁtness
contribution fi does not only depend on the value (0 or 1) of the bit itself, but also on
the values of K other bits vj in the bit string (0 ≤K ≤N −1). These dependencies
are called epistatic interactions. So, the ﬁtness contribution of one bit depends on
the value of K +1 bits in total: the bit itself and K others. This gives rise to a total of
2K+1 possibilities, called neighborhood conﬁgurations. Each of these neighborhood
conﬁgurations is assigned a random value drawn from a uniform probability distri-
bution between 0.0 and 1.0. The ﬁtness contribution fi of bit vi can thus be speciﬁed
by a list of 2K+1 random values between 0.0 and 1.0. This assignment of ﬁtness
contributions is repeated for each bit vi, i = 1,...,N. So, there are N lists (one for
each bit), each with 2K+1 entries.
Having thus assigned the possible ﬁtness contributions for every bit in the string,
the ﬁtness of the entire bit string is now deﬁned as the average of the ﬁtness contri-
butions fi of all the bits, given its particular conﬁguration of bits:
f(v) = 1
N
N
∑
i=1
fi.
Table 13.1 shows an example, taken from [19], for N = 3 and K = 2 (i.e., the ﬁtness
contribution of each bit depends on all other bits).
One ﬁnal aspect of the NK-model determines how the K epistatic interactions for
each bit are chosen. Generally, this is done in one of two ways. The ﬁrst way is by
choosing them at random (without repetition or reciprocity) from among the other
N −1 bits. This is called random interactions. The second way is by choosing them
as the K neighboring bits. Thus, the K/2 bits on each side of a bit will inﬂuence the

13
Correlation Analysis of Coupled Fitness Landscapes
373
Table 13.1 An example of an instance of the NK-model for N = 3 and K = 2. The ﬁtness
contributions fi for the three bits for each of the 2K+1 = 8 neighborhood conﬁgurations are
assigned at random. The ﬁtness of the entire string is the average of the ﬁtness contributions
of the three bits.
bit
ﬁtness
total
value
contribution ﬁtness
v1 v2 v3
f1
f2
f3
f (v)
0 0 0
0.6 0.3 0.5
0.47
0 0 1
0.1 0.5 0.9
0.50
0 1 0
0.4 0.8 0.1
0.43
0 1 1
0.3 0.5 0.8
0.53
1 0 0
0.9 0.9 0.7
0.83
1 0 1
0.7 0.2 0.3
0.40
1 1 0
0.6 0.7 0.6
0.63
1 1 1
0.7 0.9 0.5
0.70
ﬁtness of this bit. This is called nearest neighbor interactions. To make this possible,
periodic boundary conditions are taken into account, i.e., the bit string is considered
circular, so the ﬁrst and the last bit are each others neighbors. Note that for K = 0
and K = N −1, there is no difference between the two types of interactions.
Landscapes resulting from the NK-model were originally constructed using point
mutation as deﬁning the neighborhood relation N . This results in a boolean hyper-
cube of dimension N. The resulting ﬁtness landscape for the example in Table 13.1
is shown in Figure 13.1. Later in this chapter, an example of an NK-landscape using
a different neighborhood relation is shown.
000
001
010
011
101
100
110
111
(0.47)
(0.50)
(0.53)
(0.70)
(0.40)
(0.83)
(0.63)
(0.43)
Fig. 13.1 The ﬁtness landscape resulting from the instance of the NK-model in Table 13.1
and using point mutation as the neighborhood relation. Fitness values are given between
parentheses.

374
W. Hordijk
By increasing the value of K from 0 to N −1, the ﬁtness landscapes resulting
from the NK-model can be tuned from “smooth” to “rugged”. When K is small,
neighboring bit strings (i.e., bit strings with a Hamming distance of one) will have
a relatively small difference in ﬁtness, as the bit that is different between the two
strings inﬂuence the ﬁtness contribution of only a small number of other bits in
either string. So, this will have a small inﬂuence on the overall ﬁtness of both strings,
and thus their ﬁtness values will be quite similar. As a consequence, the resulting
ﬁtness landscape will be relatively “smooth”.
When K is large, however, the bit that is different between two neighboring
strings will inﬂuence the ﬁtness contribution of a large number of bits in either
string. This will have a large inﬂuence on the overall ﬁtness of both strings, and
their ﬁtness values will be quite different. In the extreme case of K = N −1, the
resulting ﬁtness landscape will be completely random, since changing the value of
only one bit will change the ﬁtness contribution of every bit in the string, and the
overall ﬁtness will be completely different. Thus, for increasing values of K, the
resulting landscapes will become more and more “rugged”. This “ruggedness” of
ﬁtness landscapes can be measured and expressed more formally by using a corre-
lation analysis, as will be explained in Section 13.3 below.
13.2.4
Coupled Fitness Landscapes
In nature, species do not evolve on their own or in complete isolation. Organisms
compete and cooperate in various ways, and the ﬁtness of one individual strongly
depends on how well it is able to avoid, catch, or cooperate with another. Hence, ﬁt-
ness landscapes are not static, but change continuously. An adaptation of one species
will “deform” the ﬁtness landscape of another one. In other words, the ﬁtness land-
scapes of different species are “coupled”.
One extension of the NK-model, called the NKC-model, tries to capture this cou-
pling [19, 20]. Assume two coevolving “species”, represented by bit strings v and w,
respectively. Now, next to having K internal epistatic interactions, each bit vi in bit
string v also hasC external epistatic interactions with bit string w. In other words, the
ﬁtness contribution of a bit vi in string v depends on K other bits vj in string v and
also on C bits wj in string w; and vice versa for the ﬁtness contributions of the bits
wi in string w. These C external epistatic interactions are chosen at random for each
bit independently. This increases the possible neighborhood conﬁgurations for each
bit to 2K+C+1, each of which is again assigned a random value between 0.0 and 1.0.
This idea of coupled ﬁtness landscapes is interesting in the context of evolution-
ary computing as well, as the idea of coevolution has been incorporated in evolu-
tionary algorithms in various ways (see e.g. [7, 17, 29] for some early examples).
In fact, in some cases this has actually given rise to improvements in performance
of the search algorithm. It is therefore useful to have a tunable model of coupled
landscapes, as provided by the NKC-model, to study ﬁtness landscapes in a coevo-
lutionary setting as well. To do so, we ﬁrst introduce a statistical analysis that can
be used to measure, express, and compare the structure of ﬁtness landscapes.

13
Correlation Analysis of Coupled Fitness Landscapes
375
13.3
Correlation Structure
As mentioned earlier, the “ruggedness” of NK-landscapes can be tuned by varying
the value of K relative to N. This notion of ruggedness can be made more formal, for
example by using a statistical analysis to measure and express the correlation struc-
ture of ﬁtness landscapes. Informally, the correlation structure of a ﬁtness landscape
gives an indication of the average ﬁtness differences between neighboring points in
the landscape. More formally, it can be expressed as a function of the autocorrela-
tions and partial autocorrelations of a time series of ﬁtness values generated by a
random walk through the landscape.
13.3.1
Time Series Analysis
Different measures for the correlation structure of a ﬁtness landscape have been
proposed and used in the literature (see e.g. [22, 23, 28]). However, these measures
all come down to one single value, such as the correlation length or a related number.
In [9] we introduced a more reﬁned and expressive method based on the idea of [28]
and a statistical time series analysis known as the Box-Jenkins approach.
The Box-Jenkins approach [2] is a useful statistical method of model building
which is based on the analysis of a time series y1,y2,...,yT of observed values,
generated by a stochastic process. The purpose of the Box-Jenkins approach is to
ﬁnd an ARMA (autoregressive moving-average) model that adequately represents
this data generating process. An ARMA(p,q) model is the sum of an autoregressive
AR(p) model of order p and a moving-average MA(q) model of order q:
yt = c+ α1yt−1 + ···+ αpyt−p + εt + β1εt−1 + ···+ βqεt−q,
(13.1)
where the orders p and q and the coefﬁcients αi and βi are the model parameters
(to be estimated from the data), and the stochastic variable εt is white noise, i.e.,
E[εt] = 0 for all t and Cov(εt′,εt) = 0 for t′ ̸= t. In words, each value yt in an
ARMA(p,q) process depends on p past values and a weighted sum of q members of
a white noise series.
In economics the Box-Jenkins approach is used frequently when a model is
needed to make forecasts about future values of some (partly) stochastic variable,
for example the price of some commodity, or the index of industrial production
[6, 16]. The approach consists of three stages:
(1) Identiﬁcation, in which a choice is made for an appropriate ARMA model (i.e.,
appropriate values for p and q).
(2) Estimation, in which the parameters of the chosen model are estimated (i.e., the
coefﬁcients αi and βi).
(3) Diagnostic checking, in which the estimated model is tested for adequateness.

376
W. Hordijk
13.3.1.1
Identiﬁcation
At the identiﬁcation stage, an appropriate model within the class of ARMA mod-
els is speciﬁed on the basis of the correlogram and the partial correlogram. The
(partial) correlogram of a time series yt is a plot of the estimated (partial) autocor-
relations of the given time series.
The autocorrelation ρi of a time series yt relates the value of two points in the
time series which are i steps (or time lags) apart. Estimates ri of these autocorrela-
tions ρi are obtained from the time series as follows:
ri = ∑T−i
t=1 (yt −y)(yt+i −y)
∑T
t=1(yt −y)2
,
(13.2)
where y = 1
T ∑T
t=1 yt. For each i, −1 ≤ri ≤1. If |ri| is close to one, there is a large
amount of correlation between two values i time lags apart; if it is close to zero, then
there is hardly any correlation.
The partial autocorrelation can be interpreted as the estimated correlation be-
tween yt and yt+i after the effects of all intermediate yt’s on this correlation are
taken out. Estimates of the partial autocorrelation of order k, akk, can be found by
solving the set of simultaneous linear equations
ri =
k
∑
j=1
ak jri−j, i = 1,2,...,k
(13.3)
The choice of an appropriate ARMA model is now made on the following basis:
• If the correlogram “tapers off” (gradually decreases) to zero and the partial
correlogram suddenly “cuts off” (i.e., becomes equal to zero) after some time
lag, say p, then an appropriate model is AR(p).
• If the correlogramcuts off after some time lag, say q, and the partial correlogram
tapers off to zero, then an appropriate model is MA(q).
• If neither diagram cuts off after some time lag, but both taper off, then an ap-
propriate model is ARMA(p,q). The values of p and q have to be inferred from
the particular pattern of the two diagrams.
The cut-off point for the estimated (partial) autocorrelations is usually taken as
±2/
√
T, where 1/
√
T is the approximate standard error of these estimates. Fig-
ure 13.2 below shows an example of correlograms tapering off to zero, and Figure
13.3 shows an example of a partial correlogram cutting off after just one time lag.
13.3.1.2
Estimation
Once the appropriate model is chosen in the identiﬁcation stage, the coefﬁcients αi
and βi in Equation (13.1) are estimated. This is achieved by using the estimates of
the (partial) autocorrelations of the given time series and a non-linear least squares
or a maximum likelihood estimation method. As a measure of signiﬁcance of the
estimated parameters, a t-statistic is used, which is calculated as the estimated value

13
Correlation Analysis of Coupled Fitness Landscapes
377
of the parameter divided by its estimated standard error. An estimated parameter is
considered signiﬁcant (at a 95% conﬁdence level) if its t-statistic (in absolute value)
is larger than 2.
As a measure of “goodness of ﬁt” of the estimated model, the coefﬁcient of de-
termination R2 is used:
R2 =

∑T
t=1(yt −¯y)(ˆyt −¯y)
2
∑T
t=1(yt −¯y)2 ∑T
t=1(ˆyt −¯y)2 ,
(13.4)
where ¯y = ∑T
t=1 yt and ˆyt is the data as estimated by the model. This value is a
measure of the proportion of the total variance in the data that is accounted for
by the explanatory variables in the estimated model. A value of R2 close to one
indicates a good ﬁt, while a value close to zero means that the stochastic component
of the model plays a dominant role.
13.3.1.3
Diagnostic Checking
Before the estimated model is used, it is important to check that it is indeed an ad-
equate one. The usual test for this is to ﬁt the model on the data and calculate the
autocorrelations of the residuals (the difference between the observed values (yt) and
those predicted by the model (ˆyt)). These residuals should be white noise (i.e., un-
correlated, zero-mean variables), meaning that all residual autocorrelations should
not be signiﬁcantly different from zero. To check this, the residual autocorrelations
are compared with the same ±2/
√
T bound (as with the autocorrelations and partial
autocorrelations).
Another test is to ﬁt a slightly higher-order model and then check that the extra
parameters are not signiﬁcantly different from zero. Thus, if for example an AR(p)
model is estimated, an AR(p + 1) model can then also be estimated and the extra
parameter (αp+1) should not be signiﬁcant (i.e., its t-statistic should be smaller than
two).
In summary, the Box-Jenkins approach is a statistical time series analysis with
the purpose of ﬁnding an appropriate ARMA model that can be used to explain
the process that generated, or to predict future values of, the values of a given time
series yt. The approach is based on the estimated (partial) autocorrelations of the
time series, and the adequateness and goodness of ﬁt of the estimated model can be
assessed with several statistics (t-statistics, standard error values, and the R2 value).
13.3.2
Random Walks
In [28], the idea of using a random walk to generate a time series of ﬁtness values
to measure the correlation structure of a ﬁtness landscape was introduced. This idea
can be extended to coupled ﬁtness landscapes as well (as is described later in this
section) by introducing a parameter that represents the relative rate of evolution be-
tween two (or more) coevolving species. The basic idea of a random walk (on a static
landscape) works as follows. Start from a random point v1 in the ﬁtness landscape,

378
W. Hordijk
and evaluate and record its ﬁtness value y1 = f(v1). Next, choose a point v2 at ran-
dom from v1’s neighborhood N (v1) and move there. Evaluate and record its ﬁtness
value y2 = f(v2). Now choose a random point from v2’s neighborhood,and continue
these random moves and ﬁtness evaluations for a given number T of time steps, thus
generating a random walk through the landscape and a corresponding time series of
ﬁtness values yt, t = 1...T. More concretely, in terms of NK-landscapes based on
point-mutation as described earlier, start from a random bit string, and at each time
step ﬂip a random bit, evaluating ﬁtness values along the way.
This idea can of course be extended to any kind of move operator. For example, in
[9], the “random-mate random-child crossover” (RMRC) operator was introduced
to investigate ﬁtness landscapes based on the crossover operator used in for example
genetic algorithms [5, 8, 24]. Assuming again bit strings, as in the NK-model, the
idea is to pick, at each step, a random mate (i.e., a random bit string) to perform
one-point crossover with, and choose one of the two resulting children as the next
point for which to calculate the ﬁtness value. This process is then repeated for a
given number of steps, starting from a random initial bit string, again generating a
time series of ﬁtness values, but from a different ﬁtness landscape, i.e., one that is
deﬁned by a neighborhood relation based on the crossover operator.
Furthermore, especially with other kinds of representations, still other neigh-
borhood relations based on other move operators can be envisioned, such as PMX
crossover for permutations, or subtree prune-and-regraft (SPR) moves for tree rep-
resentations. Of course the random walk method can also still be implemented when
probabilities are associated with the neighborhood relation. In each case, the idea
of performing a random walk on the resulting landscape is the same: start from a
random point, calculate its ﬁtness, apply the chosen move operator to generate a
new point, calculate its ﬁtness, and so on.
Finally, this random walk method to generate a time series of ﬁtness values can
also be extended to coupled landscapes by introducing one additional parameter, m,
which can be interpreted as a relative rate of coevolution. Suppose that we have two
coevolving species, i.e., two coupled landscapes. A time series yt of ﬁtness values
is then generated as follows. Perform a random walk on the ﬁrst landscape just as
in the single (static) landscape case described above, and record the ﬁtness values
yt = f(vt) at each time step. However, starting from a random point in the second
landscape, move to a random neighbor in this landscape every m steps during the
random walk on the ﬁrst landscape. In other words, perform m steps of the random
walk on the ﬁrst landscape, recording the ﬁtness values, then make a random move
in the second landscape, perform m steps on the ﬁrst landscape again, continuing
to record the ﬁtness values, make a random move in the second landscape, and so
on until a given number T of steps on the ﬁrst landscape have been made (and thus
T/m steps in the second landscape). This way, random walks can be performed on
coupled landscapes, using the relative rate of coevolution m. If m = 0, the second
species does not evolve at all, and the analysis degenerates to that of a static (uncou-
pled) ﬁtness landscape (which is still useful for comparing the coevolutionary case
with). However, when m > 0, each time a random move on the second landscape
is made (every m time steps), it changes the shape of the ﬁrst landscape on which

13
Correlation Analysis of Coupled Fitness Landscapes
379
the actual times series of ﬁtness values is being generated. Note that due to the way
NKC-landscapes are deﬁned, statistically there is no difference when the roles of
the ﬁrst and second landscapes are swapped.
13.3.3
The Correlation Structure of Fitness Landscapes
Combining the two methods described above, i.e., performing a random walk on
a given ﬁtness landscape (coupled or not) to generate a time series of ﬁtness val-
ues, and then applying a time series analysis such as the Box-Jenkins approach, the
correlation structure of a landscape can be measured and expressed as a complete
ARMA model. This provides a more expressive and powerful characterization of a
landscape’s correlation structure than a single number, such as the correlation length
used in previous methods.
For example, it can be useful to have a way of predicting the ﬁtness of a next
(neighboring) point in the landscape given the ﬁtness values of some previously
visited points. As it turns out, always moving uphill as fast as possible (i.e., steepest
ascent search) in a landscape does not always lead to the best result [4, 30]. Having
an ARMA model that is able to predict the expected (average) increase in ﬁtness can
help in selecting a next point during the search that has a ﬁtness increase closer to
that as predicted by the model, thus taking advantage of the correlation structure of
the landscape. Furthermore, the value of p in the estimated ARMA model indicates
exactly how much “memory” is available in the landscape, i.e., how many steps in
the past need to be remembered to predict the next step. Finally, additional statistics
such as the R2 of the estimated model, give a clear indication of how reliable the
model’s predictions actually are.
Having a well-deﬁned and statistically robust method to analyze the correlation
structure of ﬁtness landscapes, and also a convenient and tunable model to generate
ﬁtness landscapes with varying levels of ruggedness, let us now turn to applying this
correlation analysis to ﬁtness landscapes of varying ruggedness.
13.4
Correlation Analysis of Fitness Landscapes
13.4.1
Static Fitness Landscapes
We start by investigating static, or non-coupled ﬁtness landscapes. Using the NK-
model as described in Section 13.2, landscapes of various ruggedness are con-
structed and the correlation analysis as explained in Section 13.3 is then applied
to them. The representation space of all landscapes consists of bit strings of length
N = 100, i.e., V = {0,1}100. We consider two types of neighborhood relations N to
construct the landscapes: (1) mutation and (2) crossover. With the mutation opera-
tor, a random bit in the string is ﬂipped. For crossover, we use the RMRC crossover
method as described in Section 13.3. Finally, the ﬁtness function f(v) is determined
by an instance of the NK-model for N = 100 and a given value of K. Values used
for K are 0, 2, 5, 25, 50, and 95, and both random and nearest neighbor interactions

380
W. Hordijk
are considered. Random walks of 10,000 steps are performed with the given move
operator (mutation or crossover) to generate a time series of ﬁtness values for each
landscape, on which the Box-Jenkins approach is then applied. The main results are
reviewed here. More details can be found in [9].
13.4.1.1
Mutation Landscapes
An example of an NK-landscape with mutation as the neighborhood relation was
given in Figure 13.1. Figure 13.2 shows the correlograms (i.e., the estimated auto-
correlations) for the NK-landscapes with random epistatic interactions and the var-
ious values of K. The ±2/
√
T signiﬁcance bound (±0.02 for T = 10,000) is also
shown. As the ﬁgure shows, the correlograms taper off to zero, but more quickly so
for larger values of K. The results for nearest neighbor interactions are very similar.
0
0.2
0.4
0.6
0.8
1
0
5
10
15
20
25
30
35
40
45
50
Autocorrelation
Time lag
K=0
K=2
K=5
K=25
K=50
K=95
Fig. 13.2 The correlograms for NK-landscapes based on the mutation operator and random
epistatic interactions, for various values of K
Table 13.2 The correlation lengths (largest time lag for which the estimated autocorrelation
is still signiﬁcantly different from zero) for the mutation operator for the different values of K
K random nearest
0
>50
>50
2
>50
>50
5
49
>50
25
18
14
50
5
7
95
3
1

13
Correlation Analysis of Coupled Fitness Landscapes
381
Table 13.2 gives the correlation lengths for the various landscapes. The correla-
tion length here is deﬁned as the largest time lag for which the estimated autocorre-
lation is still signiﬁcantly different from zero, i.e. is outside the ±2/
√
T signiﬁcance
bound. This correlation length decreases with increasing values of K, indicating that
the landscapes indeed become more rugged when the number of epistatic interac-
tions becomes larger.
To identify the appropriate ARMA model, Figure 13.3 shows the partial correl-
ogram (i.e., the estimated partial autocorrelations) for the landscape with random
interactions and K = 0. Note that, by deﬁnition, the ﬁrst partial autocorrelation a11
is always identical to the ﬁrst autocorrelation r1, which in this case is close to one
(the landscapes for K = 0 are highly correlated). However, clearly the correlogram
cuts off immediately after the ﬁrst time lag (i.e., all other partial autocorrelations
are within the signiﬁcance bounds), suggesting an AR(1) model. The partial correl-
ograms for the other values of K and for nearest neighbor interactions look similar.
Now that the appropriate model has been identiﬁed, its parameters can be esti-
mated for each landscape. Since the identiﬁcation stage suggests an AR(1) model
of the form
yt = c+ α1yt−1 + εt,
only the values of the parameters c (the constant) and α1 need to be estimated. In
fact, for an AR(1) process the value of the parameter α1 is simply equal to the ﬁrst
autocorrelation, i.e., r1. Table 13.3 shows the parameter estimation results (with
t-statistics between parentheses) for the various landscapes, also including the R2
(goodness-of-ﬁt) values and the variance Var(εt) of the stochastic term.
As the table shows, the estimated parameter values are all signiﬁcant (t-statistic
larger than two), and the α1 decrease linearly with K, once again indicating the in-
crease in landscape ruggedness with increasing values of K. Also, the R2 value de-
creases, and the variance of the stochastic term increases with increasing K, showing
that the model becomes less reliable with a larger stochastic component for larger
K.
Finally, to check the estimation results, Figure 13.4 shows the residual auto-
correlations for the landscape with random interactions and K = 0, together with
the ±2/
√
T signiﬁcance level. Clearly, the residual autocorrelations are within the
bounds (except for one very minor case, which is negligible). The results for other
values of K and for nearest neighbor interactions look very similar. Also, estimating
an additional parameter in the suggested model (for example α2) yields an insigniﬁ-
cant result (t-statistic smaller than two) in all cases. So, the identiﬁed and estimated
models for the mutation-based ﬁtness landscapes are adequate.
To summarize the results, it turns out that in all cases an AR(1) model is the
most appropriate for expressing the correlation structure of NK-landscapes based
on the mutation operator. This was already suggested in [28], and is thus veriﬁed
formally by the above results. So, even though this result is not too surprising, it
conﬁrms two important aspects: (1) the NK-model indeed generates landscapes with
a tunable degree of ruggedness, as intended, and (2) this ruggedness can be formally
and meaningfully described with an AR(1) model, providing more information than

382
W. Hordijk
0
0.2
0.4
0.6
0.8
1
0
5
10
15
20
25
Partial autocorrelation
Time lag
Fig. 13.3 The estimated partial autocorrelations for NK-landscapes based on the mutation
operator and random epistatic interactions
Table 13.3 The estimated parameters for the AR(1) models for mutation for the different
values of K
random interactions
nearest neighbor interactions
K
c
α1
Var(εt) R2
c
α1
Var(εt)
R2
0 0.01
0.98
0.00002 0.96
0.01
0.98
0.00002 0.96
(9.59) (518.20)
(9.94) (510.85)
2 0.02
0.97
0.00005 0.93
0.02
0.96
0.00005 0.93
(13.08) (375.48)
(13.47) (364.39)
5 0.03
0.93
0.00010 0.87
0.03
0.94
0.00010 0.88
(18.46) (261.59)
(17.55) (275.72)
25 0.13
0.74
0.00038 0.55
0.13
0.74
0.00038 0.54
(38.35) (110.91)
(38.86) (109.00)
50 0.25
0.49
0.00064 0.24
0.25
0.49
0.00063 0.24
(58.29) (56.41)
(58.40) (56.21)
95 0.45
0.07
0.00082 0.01
0.46
0.08
0.00082 0.01
(66.09)
(6.76)
(91.76)
(8.42)
just a single number such as the correlation length (which, however, can still be
derived directly from the model estimation results).
To give one example of how the AR(1) model expressing the correlation struc-
ture of NK-landscapes can be used, we compare an actual search on a given NK-
landscape with a prediction from the AR(1) model. The search algorithm used is
“random neighbor ascent hill climbing” (RNAHC) [19], where at each step a ran-
dom ﬁtter neighbor is chosen, where the neighborhood relation is based on point

13
Correlation Analysis of Coupled Fitness Landscapes
383
−0.1
−0.05
0
0.05
0.1
0
5
10
15
20
25
Residual autocorrelation
Time lag
Fig. 13.4 The estimated residual autocorrelations for NK-landscapes based on the mutation
operator and random epistatic interactions
mutation. Taking an instance of the NK-model for N = 100 and K = 25, the RNAHC
algorithm is applied for 10,000 function evaluations, starting from a random bit
string, and the best ﬁtness value found so far is recorded at each step during the
search. Next, the AR(1) model for this landscape
yt = 0.13 + 0.74yt−1+ εt, Var(εt) = 0.00038
is used to simulate this search process.
Figure 13.5 shows the results, averaged over 100 instances of the RNAHC search
and model prediction. Even though the match is not exact, partly due to some small
differences between the actual search and the model simulation, it does show the
potential predictive value the model has (beyond simply calculating a correlation
length). The predicted best ﬁtness rises at a slightly slower rate than the actual best
ﬁtness, but eventually converges almost identically.
Having veriﬁed that the correlation analysis works correctly and provides mean-
ingful results on NK-landscapes based on the mutation operator, we now turn to
landscapes deﬁned by the crossover operator.
13.4.1.2
Crossover Landscapes
An example of a ﬁtness landscape where the neighborhood relation N is deﬁned by
random-mate random-child (RMRC) crossover, and with ﬁtness values as deﬁned
by the instance of the NK-model in Table 13.1, is shown in Figure 13.6. Note that,
unlike in the boolean hypercube deﬁned by point mutation, not all points N (v) in
the neighborhood of a given point v have the same probability of being reached. In a
more elaborate model of ﬁtness landscapes, the edges in the landscape are actually

384
W. Hordijk
0.5
0.55
0.6
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
1000
2000
3000
4000
5000
6000
7000
8000
9000
10000
Fitness
Function evaluation
RNAHC
AR(1) prediction
Fig. 13.5 Comparison of an actual search (RNAHC) with an AR(1) model prediction, aver-
aged over 100 instances
000
110
101
011
010
001
100
111
(0.47)
(0.50)
(0.40)
(0.83)
(0.63)
(0.70)
(0.53)
(0.43)
Fig. 13.6 The ﬁtness landscape resulting from the instance of the NK-model in Table 13.1
and with RMRC crossover as the neighborhood relation. Fitness values are given between
parentheses.
labeled with their corresponding transition probabilities [13]. The correlograms for
the crossover landscapes for random epistatic interactions and the various values
for K are shown in Figure 13.7. As with the mutation landscapes, the correlograms
taper off to zero, although at a much faster rate. In fact, for the largest values of
K, not even the ﬁrst estimated autocorrelation r1 is signiﬁcantly different from zero
(i.e., outside the ±2/
√
T error bounds).

13
Correlation Analysis of Coupled Fitness Landscapes
385
0
0.2
0.4
0.6
0.8
1
0
1
2
3
4
5
6
7
8
9
10
Autocorrelation
Time lag
K=0
K=2
K=5
K=25
K=50
K=95
Fig. 13.7 The estimated autocorrelations for NK-landscapes based on the crossover operator
and random epistatic interactions
For the crossover landscapes, there actually is a difference between random in-
teractions and nearest neighbor interactions as used in the NK-model. Table 13.4,
which shows the correlation lengths, makes this difference clear. Whereas the cor-
relation length becomes zero for K ≥50 with random interactions, there remains a
small but positive correlation length even up to K = 95 for nearest neighbor inter-
actions. This reﬂects the fact that crossover is less disruptive (and thus more corre-
lated) for nearest neighbor interactions than it is for random interactions.
Table 13.4 The correlation lengths for the crossover operator for the different values of K
K random nearest
0
6
4
2
5
4
5
3
4
25
1
3
50
0
2
95
0
1
As with the mutation landscapes, the partial correlograms for crossover land-
scapes only have the ﬁrst value well outside the error bounds (results not shown
here), suggesting again that an AR(1) model is the most appropriate. An excep-
tion occurs for K = 50 and K = 95 with random interactions, for which even the

386
W. Hordijk
ﬁrst partial autocorrelation is not signiﬁcantly different from zero, suggesting a
purely white noise model instead. Table 13.5 shows the results of the parameter
estimations.
As expected, the values for the α1 coefﬁcients and for the R2 values decrease,
and the values for the variance of the white noise term increases with increasing K.
However, the estimation results also show a clear difference between the different
types of epistatic interactions in that the α1 coefﬁcients and the R2 values are sig-
niﬁcantly larger for nearest neighbor interactions than for random interactions for
the same value of K (except for K = 0, for which there are no epistatic interactions
at all). We can indeed conclude that nearest neighbor interactions result in a more
correlated landscape than random interactions for the crossover operator, which is
clearly and quantitatively expressed in the parameter estimates of the corresponding
AR(1) models.
As Table 13.5 shows, all parameter estimates are signiﬁcant (t-statistics larger
than two). Furthermore, as with mutation, all residual autocorrelations for all
crossover landscapes are within the error bounds, and over-estimating the models
(i.e., adding more parameters) leads to non-signiﬁcant results. Thus, the estimated
models appear adequate for the crossover landscapes.
In conclusion, the correlation analysis can clearly be extended to landscapes de-
ﬁned by any search operator of interest (or even any combination of search oper-
ators, see e.g. [9]). Overall, NK-landscapes are relatively “well-behaved” though,
in that they are isotropic, i.e., statistically they look the same everywhere (for any
given value of N and K). However, the correlation analysis can also be applied to
less isotropic landscapes, for example by restricting the random walks to subspaces
in the landscape [10]. One further useful extension, as described in the next subsec-
tion, is to apply the analysis to coupled ﬁtness landscapes.
Table 13.5 The estimated parameters for the AR(1) models for crossover for the different
values of K
random interactions
nearest neighbor interactions
K
c
α1
Var(εt) R2
c
α1
Var(εt)
R2
0 0.26
0.50 0.00034 0.25
0.23
0.50 0.00036 0.25
(57.52) (58.21)
(57.57) (57.93)
2 0.32
0.37 0.00061 0.14
0.27
0.49 0.00056 0.24
(67.56) (40.06)
(58.21) (56.62)
5 0.37
0.26 0.00073 0.07
0.27
0.46 0.00061 0.21
(76.42) (27.04)
(60.85) (51.54)
25 0.47
0.05 0.00084 0.01
0.35
0.29 0.00075 0.09
(94.56) (5.41)
(73.87) (30.56)
50 0.49
-
0.00082
-
0.43
0.15 0.00083 0.02
(97.92)
(86.14) (14.80)
95 0.50
-
0.00085
-
0.49
0.02 0.00082 0.01
(99.31)
(97.38) (2.48)

13
Correlation Analysis of Coupled Fitness Landscapes
387
13.4.2
Coupled Fitness Landscapes
As explained in Section 13.3, the correlation analysis can also be applied to coupled
ﬁtness landscapes by performing a random walk with the move operator of interest
on the ﬁrst landscape, and making a random move on the second landscape every m
steps during the random walk on the ﬁrst landscape. This way a time series of ﬁtness
values is generated while taking into account the changes to the ﬁrst landscape due
to moves in the second landscape. The Box-Jenkins approach is then applied to
this time series as before, resulting in an appropriate ARMA model to express the
correlation structure of the coupled ﬁtness landscape.
Here we use the NKC-model (Section 13.2) to generate coupled ﬁtness land-
scapes with varying degrees of ruggedness. The parameter values used are as fol-
lows: N = 100, as with the static landscape. For both K and C the values 0, 2, 10,
20 and 50 are used. We leave out larger values for these parameters, as the results
in the previous subsection on static landscapes already showed that there is hardly
any correlation on landscapes with a large number of epistatic interactions. Note
that for C = 0 the NKC-model simpliﬁes to the regular NK-model without external
couplings, but this case is included here for comparison. Finally, for m we use 1, 5,
10 and 100.
With the correlation analysis as applied to static landscapes, different (internal)
epistatic interactions and also different move operators were used, and the results
showed what differences this causes in the correlation structure of the resulting
landscapes. Here, we focus primarily on the external epistatic interactions (cou-
pling), and only consider nearest neighbor interactions for the K internal epistatic
interactions, and point mutation as the move operator. The main results, split up into
three different rates of coevolution (slow, intermediate, and fast), are reviewed here.
Full details can be found in [11].
13.4.2.1
Slow Rate of Coevolution
First consider a slow rate of coevolution, in particular m = 100. Figure 13.8 shows
the correlograms for K = 2 (left) and K = 10 (right) for the different values of C. As
with static landscapes, they taper off to zero, but a subtle and surprising effect shows
up. For K = 2, the estimated autocorrelations for C > 0 (the coupled landscapes) are
all well above those for C = 0 (the static landscape). It appears that for small values
of K, a slow rate of coevolution actually increases the correlation length of the
coupled landscapes compared to the static one. It is known from genetic algorithm
studies that using coevolution can indeed lead to a small increase in the quality of
the obtained solutions [7, 17, 29]. Perhaps the above correlation length results can
provide an explanation for this phenomenon.
As with static landscapes, the partial correlograms (results for coupled landscapes
not shown here) suggest AR(1) models for the coupled landscapes. Figure 13.9
shows the estimated values for the α1 coefﬁcient represented with a gray scale. As
this plot shows, the value of C does not have any signiﬁcant inﬂuence on the value

388
W. Hordijk
−0.1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Autocorrelation
Time lag
C=0
C=2
C=10
C=20
C=50
−0.1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Autocorrelation
Time lag
C=0
C=2
C=10
C=20
C=50
Fig. 13.8 The estimated autocorrelations for NKC-landscapes for m = 100, K = 2 (left) and
K = 10 (right), and various values of C
of these coefﬁcients. Within one column (i.e., a particular value for K), there is no
perceivable change in the gray levels.
m=100
50
20
10
2
0
C
0
2
10
20
50
K
1.0
0.5
0.0
Fig. 13.9 A gray scale plot of the estimated α1 coefﬁcients for m = 100 and different values
of K and C
13.4.2.2
Intermediate Rate of Coevolution
Next, consider an intermediate rate of coevolution, with m = 5 and m = 10. Fig-
ure 13.10 shows the correlograms for m = 10 and K = 2 (left) and K = 10 (right).
Clearly, an intermediate rate of coevolution causes the correlation lengths to de-
crease (compared to the static C = 0 case), but only signiﬁcantly so for C > K.
In other words, the internal epistatic interactions are the dominant ones, and only
when the level of external interactions exceeds that of the internal interactions does
the coupling have an inﬂuence on the correlation structure of the landscape.
Once again, AR(1) models are estimated for all cases, and Figure 13.11 shows
the values of the α1 coefﬁcients represented with a gray scale. These plots conﬁrm

13
Correlation Analysis of Coupled Fitness Landscapes
389
−0.1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Autocorrelation
Time lag
C=0
C=2
C=10
C=20
C=50
−0.1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Autocorrelation
Time lag
C=0
C=2
C=10
C=20
C=50
Fig. 13.10 The estimated autocorrelations for NKC-landscapes for m = 10, K = 2 (left) and
K = 10 (right), and various values of C
the above results that only for C > K there is an appreciable decrease in the value of
these coefﬁcients (which is best visible for m = 5).
m=5
50
20
10
2
0
C
0
2
10
20
50
K
m=10
50
20
10
2
0
C
0
2
10
20
50
K
1.0
0.5
0.0
Fig. 13.11 A gray scale plot of the estimated α1 coefﬁcients for m = 5 and m = 10 and
different values of K and C
13.4.2.3
Fast Rate of Coevolution
Finally, consider a fast rate of coevolution, in particular when the coevolving species
moves at the same rate (m = 1). Figure 13.12 shows the correlograms for m = 1 and
K = 2 (left) and K = 20 (right). The correlation length decreases signiﬁcantly and
ever more drastically for larger values of C, also for C < K. In other words, any
coupling inﬂuences the correlation structure of the landscape, regardless of the level
of internal epistasis.
Again, AR(1) models are estimated for all cases, and Figure 13.13 shows the
values of the α1 coefﬁcients represented with a gray scale. It is clear that the values
of these coefﬁcients decrease quickly with increasing C for all K.

390
W. Hordijk
−0.1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Autocorrelation
Time lag
C=0
C=2
C=10
C=20
C=50
−0.1
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Autocorrelation
Time lag
C=0
C=2
C=10
C=20
C=50
Fig. 13.12 The estimated autocorrelations for NKC-landscapes for m = 1, K = 2 (left) and
K = 20 (right), and various values of C
m=1
50
20
10
2
0
C
0
2
10
20
50
K
1.0
0.5
0.0
Fig. 13.13 A gray scale plot of the estimated α1 coefﬁcients for m = 1 and different values
of K and C
To summarize, for a slow rate of coevolution, there is no appreciable effect on
the correlation structure of coupled landscapes, except for very small values of K,
where the correlation length actually increases slightly. For an intermediate rate of
evolution, there is only an effect when C > K, in which case the correlation length
of the landscape decreases signiﬁcantly, with a minor decrease in the α1 coefﬁcients
of the corresponding AR(1) models. For a fast rate of coevolution, any level of
external coupling will have a signiﬁcant negative effect on the correlation length
and the value of α1.
13.4.2.4
Partial Autocorrelations and Coevolution
As with static NK-landscapes, for almost all coupled landscapes only the ﬁrst es-
timated partial autocorrelations are signiﬁcant, indicating that an AR(1) model is
the most appropriate. However, there are a few interesting exceptions. Figure 13.14
shows the partial autocorrelations for three different cases: (i) an NK-landscape
with K = 0, (ii) an NKC-landscape with K = 20, C = 10, and m = 5, and

13
Correlation Analysis of Coupled Fitness Landscapes
391
(iii) an NKC-landscape with K = 2, C = 50 and m = 5. In the ﬁrst two cases in-
deed only the ﬁrst partial autocorrelation is signiﬁcant (although off the scale on
this plot), and the others fall well within the error bound (indicated by the hori-
zontal dashed lines). However, for the third case (K = 2, C = 50, and m = 5), an
interesting pattern can be observed, where every ﬁfth partial autocorrelation is sig-
niﬁcantly larger than the rest, with the effect slowly tapering off for larger time lags.
This appears to reﬂect the fact that m = 5 was used in this case, i.e., the second
(coevolving) species is mutated every ﬁve time steps during the random walk on
the ﬁrst landscape. Several other low to intermediate K and high C cases show a
similar pattern. This observation seems to indicate that for highly coupled species
with low to intermediate internal epistasis, the partial autocorrelations can provide
an indication about their relative rates of evolution.
−0.05
−0.04
−0.03
−0.02
−0.01
 0
 0.01
 0.02
 0.03
 0.04
 0.05
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
Partial autocorrelation
Time lag
K=0
K=20,C=10
K=2,C=50
Fig. 13.14 The estimated partial autocorrelations for various NKC-landscapes for m = 5
13.5
Conclusions
In this chapter we have provided an overview of a statistical analysis to measure and
express the correlation structure of ﬁtness landscapes, and have shown how it can be
applied to both static and coupled landscapes. The analysis identiﬁes and estimates
an ARMA model that adequately expresses the correlation structure of a given land-
scape. Also, we have shown (at least on a static landscape) how such a model can
be used to generate predictions about an actual search on the landscape, thereby re-
lating the correlation structure of a ﬁtness landscape directly to the performance of
an (evolutionary) search algorithm on it.
The results presented here are restricted to NK-landscapes. However, elsewhere
it is shown how the correlation analysis can be applied to other types of landscapes

392
W. Hordijk
as well [10, 12]. Moreover, the results presented here show that the correlation anal-
ysis can be applied in a meaningful way to coupled ﬁtness landscapes as well. The
results clearly distinguish between different rates of coevolution (i.e., slow, interme-
diate, and fast), and in some cases the partial autocorrelations might even be able to
“recover” the exact rate (i.e., the value of m). In other cases, a slow rate of coevolu-
tion actually seems to increase the correlation length of coupled ﬁtness landscapes,
which could give an advantage to coevolutionary search algorithms (for which there
seems to be at least some evidence).
In conclusion, as with ﬁxed landscapes, the correlation analysis for coupled ﬁt-
ness landscapes generates useful results, and these results can also be directly re-
lated to the performance of search algorithms that use a coevolutionary approach.
Hopefully these methods and results will provide a constructive contribution to the
effort of constructing a true theory of ﬁtness landscapes, relating their structure to
search algorithm performance, and increasing our understanding of the (correlation)
structure of coupled ﬁtness landscapes and (co)evolutionary computation.
Acknowledgements. The author would like to thank Stuart Kauffman, Terry Jones, and Pe-
ter Stadler for stimulating discussions and fruitful collaborations on ﬁtness landscapes over
the years, and the editors of the current volume for their kind invitation to contribute this
chapter.
The C++ implementation of NK and NKC-landscapes used to perform the experiments
described in this chapter can be downloaded from the author’s website at:
www.WorldWideWanderings.net.
References
[1] B¨ack, T.: Evolutionary Algorithms in Theory and Practice: Evolution Strategies, Evo-
lutionary Programming, Genetic Algorithms. Oxford University Press (1996)
[2] Box, G.E.P., Jenkins, G.M.: Time Series Analysis, Forecasting and Control. Holden
Day (1970)
[3] Eiben, A.E., Smith, J.E.: Introduction to Evolutionary Computing. Springer (2003)
[4] Forrest, S., Mitchell, M.: Relative building-block ﬁtness and the building-block hypoth-
esis. In: Whitley, D. (ed.) Foundations of Genetic Algorithms 2, pp. 109–126. Morgan
Kaufmann (1993)
[5] Goldberg, D.E.: Genetic Algorithms in Search, Optimization and Machine Learning.
Addison-Wesley (1989)
[6] Granger, C.W.J., Newbold, P.: Forecasting Economic Time Series, 2nd edn. Academic
Press (1986)
[7] Hillis, W.D.: Co-evolving parasites improve simulated evolution as an optimization pro-
cedure. Physica D 42, 228–234 (1990)
[8] Holland, J.H.: Adaptation in Natural and Artiﬁcial Systems, 2nd edn. MIT Press (1992)
[9] Hordijk, W.: A measure of landscapes. Evolutionary Computation 4, 335–360 (1996)
[10] Hordijk, W.: Correlation analysis of the synchronizing-CA landscape. Physica D 107,
255–264 (1997)
[11] Hordijk, W., Kauffman, S.A.: Correlation analysis of coupled ﬁtness landscapes. Com-
plexity 10(6), 41–49 (2005)

13
Correlation Analysis of Coupled Fitness Landscapes
393
[12] Hordijk, W., Stadler, P.F.: Amplitute spectra of ﬁtness landscapes. Advances in Complex
Systems 1(1), 39–66 (1998)
[13] Jones, T.: Evolutionary Algorithms, Fitness Landscapes, and Search. PhD thesis, Uni-
versity of New Mexico, Albuquerque, NM, USA (1995)
[14] Jones, T.: One operator, one landscape. SFI working paper 95-02-025 (1995)
[15] Jones, T., Forrest, S.: Fitness distance correlation as a measure of problem difﬁculty
for genetic algorithms. In: Eshelman, L.J. (ed.) Proceedings of the Sixth International
Conference on Genetic Algorithms, pp. 184–192. Morgan Kaufmann (1995)
[16] Judge, G.G., Hill, R.C., Grifﬁths, W.E., Lutkepohl, H., Lee, T.C.: Introduction to the
Theory and Practice of Econometrics, 2nd edn. John Wiley & Sons (1988)
[17] Juill´e, H., Pollack, J.B.: Coevolutionary learning and the design of complex systems.
Advances in Complex Systems 2(4), 371–394 (2000)
[18] Kauffman, S.A.: Adaptation on rugged ﬁtness landscapes. In: Stein, D. (ed.) Lectures
in the Sciences of Complexity, pp. 527–618. Addison-Wesley (1989)
[19] Kauffman, S.A.: The Origins of Order. Oxford University Press (1993)
[20] Kauffman, S.A., Johnson, S.: Coevolution to the edge of chaos: Coupled ﬁtness land-
scapes, poised states, and coevolutionary avalanches. Journal of Theoretical Biol-
ogy 149, 467–505 (1991)
[21] Kauffman, S.A., Levin, S.: Towards a general theory of adaptive walks on rugged land-
scapes. Journal of Theoretical Biology 128, 11–45 (1987)
[22] Lipsitch, M.: Adaptation on rugged landscapes generated by iterated local interactions
of neighboring genes. In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the Fourth In-
ternational Conference on Genetic Algorithms, pp. 128–135. Morgan Kaufmann (1991)
[23] Manderick, B., de Weger, M., Spiessens, P.: The genetic algorithm and the structure of
the ﬁtness landscape. In: Belew, R.K., Booker, L.B. (eds.) Proceedings of the Fourth In-
ternational Conference on Genetic Algorithms, pp. 143–150. Morgan Kaufmann (1991)
[24] Mitchell, M.: An Introduction to Genetic Algorithms. MIT Press (1996)
[25] Mitchell, M., Forrest, S., Holland, J.H.: The royal road for genetic algorithms: Fitness
landscapes and GA performance. In: Varela, F.J., Bourgine, P. (eds.) Toward a Practice
of Autonomous Systems: Proceedings of the First European Conference on Artiﬁcial
Life, pp. 245–254. MIT Press (1992)
[26] Stadler, P.F.: Towards a theory of landscapes. In: Lop´ez-Pe˜na, R., Capovilla, R., Garc´ıa-
Pelayo, R., Waelbroeck, H., Zertuche, F. (eds.) Complex Systems and Binary Networks,
pp. 77–163. Springer (1995)
[27] Stadler, P.F.: Fitness landscapes. In: L¨assig, M., Valleriani, A. (eds.) Biological Evolu-
tion and Statistical Physics. Lecture Notes in Physics, pp. 183–204. Springer (2002)
[28] Weinberger, E.D.: Correlated and uncorrelated ﬁtness landscapes and how to tell the
difference. Biological Cybernetics 63, 325–336 (1990)
[29] Werfel, J., Mitchell, M., Crutchﬁeld, J.P.: Resource sharing and coevolution in evolv-
ing cellular automata. IEEE Transactions on Evolutionary Computation 4(4), 388–393
(2000)
[30] Wilson, S.W.: GA-easy does not imply steepest-ascent optimizable. In: Belew, R.K.,
Booker, L.B. (eds.) Proceedings of the Fourth International Conference on Genetic Al-
gorithms, pp. 85–89. Morgan Kaufmann (1991)
[31] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution.
In: Jones, D.F. (ed.) Proceedings of the Sixth International Congress on Genetics, vol. 1,
pp. 356–366 (1932)

Chapter 14
Dynamic Real–Valued Landscapes and the
Optimization Performance
Krzysztof Trojanowski
Abstract. A large number of heuristic optimization algorithms for dynamic opti-
mization has already been proposed. The aim of this chapter is to discuss meth-
ods of evaluating their efﬁciency. Thus, the following issues have to be considered:
(i) measures for performance and associated measurement methods, (ii) dynamic
benchmarks and different types for implementing changes, and (iii) the role of time
and uncertainty originating from the measurement method. In this chapter the issues
are discussed for the case of single-objective optimization in dynamic multimodal
ﬁtness landscapes.
14.1
Introduction
Optimization assumes that a primary problem to be solved is given and that there is
a function F which assigns values for each of the possible and feasible solutions of
the primary problem. The function F introduces an ordering relation for the set of
the solutions D. We assume that the cost of generating a solution from the set D is
negligibly small and the main aim of the optimization task is just to ﬁnd the optimal
solution in D, that is, the largest or smallest element of the order.
14.1.1
The Objective
The need for the most appropriate and advantageous solution of our problems de-
mands more and more effective searching algorithms and methods. Evaluation of
them is based on their ability to cope with real-world problems as well as artiﬁcially
Krzysztof Trojanowski
Institute of Computer Science, Polish Academy of Sciences,
Jana Kazimierza 5, 01-248 Warsaw, Poland
Cardinal Stefan Wyszy´nski University,
Faculty of Mathematics and Natural Sciences,
W´oycickiego 1/3, 01-938 Warsaw, Poland
e-mail: trojanow@ipipan.waw.pl
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
395
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_14, c⃝Springer-Verlag Berlin Heidelberg 2014

396
K. Trojanowski
generated test-cases. Experimental evaluation of the algorithm efﬁciency depends
on the difﬁculty of test-cases and the evaluation measure as well as the measure-
ment method.
In dynamic optimization the main aim is to ﬁnd such a solution from the feasible
part of the search space D which represents an optimum of a given objective func-
tion F deﬁned for the space and we assume that the function’s ﬁtness landscape1 can
change during the optimization process. In the model M [28] the dynamic environ-
ment P is deﬁned as M (P) = (D,F,C ) where all three components can change: the
domain, that is, the search space D, the objective function, that is, the ﬁtness func-
tion F and a set of constraints C the solution must satisfy. This way, we obtain quite
a large number of possibilities for the environment dynamics, however, in practice,
the model can be divided further into just six categories, since there are two classes
for ﬁtness functions and three classes for sets of constraints:
• the ﬁtness function F may or may not depend on the time variable t, and
• the set of constraints C can be: (1) empty, (2) non-empty and time independent,
and (3) non-empty and time dependent.
Changes in the search space are usually not considered.
In the further text we study just one of the cases, that is, the case where the ﬁt-
ness function can change whereas the domain is constant and the set of constraints
is empty. Precisely, we are interested in a single-objective optimization in dynamic
multimodal ﬁtness landscapes which is one of four types of uncertainty according
to a classiﬁcation proposed in [12]. In one of the remaining three types, noise is
present in the optimized function. Uncertainty of the other type is present when for
some reason (for example, high computational costs) we use approximated evalua-
tion of function values. The last type of uncertainty occurs when the main aim is to
ﬁnd a solution not only of the highest quality, but – more importantly – one whose
neighbors are equally good, that is, when the most important issue is the robustness
of the returned solution.
When we plan to compare empirically the effectiveness of selected optimization
algorithms, a number of dynamic problems is needed, that is, a benchmark genera-
tor which produces artiﬁcial multimodal test-cases of a satisfying level of difﬁculty.
In the literature, numerous dynamic benchmarks can be found which can be fur-
ther divided into two major categories [37]. Construction of the test-cases from the
ﬁrst category is based on the simple idea of switching between a number of earlier
prepared stationary problems. The second category represents a more sophisticated
approach where the ﬁtness function is deﬁned with different formulas for different
parts of its domain, that is, there is a number of component functions and each of
them can change independently according to its own dynamics. Below, just the latter
category is a subject of our particular interest.
1 The ﬁtness landscape metaphor provided by Sewall Wright in the mid-1930s was for-
mally adapted for search algorithms by Jones [14]. The metaphor allows us to express an
optimization problem as a surface constructed by the use of a search space and an evalua-
tion function but also some features of the selected search algorithm. In the landscape the
higher locations indicate the better solutions.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
397
14.1.2
The Algorithm Performance – Static versus Dynamic
Optimization
In the Case of static optimization, the quality of the algorithm usually equals the
quality of the best found solution which was obtained with respect to some compu-
tational cost constraints. The values of the best found solutions returned by different
algorithms working with the same computational cost constraints represent also the
quality of these algorithms and allow to ﬁnd the winner among them. It is necessary
to mention here that in the case of performance evaluation of heuristic algorithms
we need to take into account their stochastic nature, that is, the fact that the same
algorithm running twice for the same conﬁguring parameters and the same test-case
can return two more or less different results. Due to this the simulations are usually
repeated and the series of results undergoes statistical analysis (for example, the
mean value is returned).
In the case of dynamic optimization, the deﬁnition of a ﬁtness function is ex-
tended by one more parameter – the time. It is also assumed that no rationale is
given which would allow for anticipation of the ﬁtness landscape topology changes.
Due to this we cannot expect that solutions are deﬁned as functions where one of the
parameters represents time. Instead, we want the algorithm to move its current best
solutions through the landscape toward the global optimum efﬁciently when the ﬁt-
ness function is stable and we expect ﬂexible reaction and immediate adaptation in
the case of changes. Under these circumstances the value of the best found solution
no longer can be interpreted as a quality measure of the algorithm. Additionally, the
time is no longer tantamount to the computational cost of the optimization process
like it is in the static optimization. Now the time is closely related to change fre-
quency and we neither can estimate the length of the time interval when the changes
appear nor their frequency, strength and other features. These differences between
the properties of static and dynamic environments demand more speciﬁc evaluation
criteria of the algorithm efﬁciency for the latter case.
14.1.3
Outline of the Chapter
The chapter is organized as follows. Different types of measurements performed
during the algorithm and a discussion about what we can do with the gathered
data is given in Section 14.2. Section 14.3 presents selection of existing bench-
mark generators described in publications. In Section 14.4 the inﬂuence of the con-
strained computational resources on the expected value of the algorithm outcome
is discussed, that is, how to cope in the case where the search process can be inter-
rupted in any moment and the user requests the current best solution. Section 14.5
concludes.

398
K. Trojanowski
14.2
The Heuristic Algorithm Performance Measures
In studying properties of measures of the algorithm’s performance, we assume that
the heuristic algorithm is an iterative process where a set of steps is repeated in a
loop. Hence, the execution of the algorithm can be called a search process where
a set of initial feasible solutions of rather poor quality undergoes iterative heuris-
tic perturbations. This means that heuristic algorithms develop solutions, however,
there is no guarantee that the global optimum can be found for any ﬁnite number of
the algorithm’s iterations, that is, in any ﬁnite time2. In dynamic optimization the
time parameter is present both in the process of search and in the function which
deﬁnes dynamics of changes in the ﬁtness landscape. For the sake of uniﬁcation of
the two time parameters we need to make two assumptions. First, it is assumed that
subsequent changes appear at any number of time units and this number may or may
not be constant but in every case it must be an integer and non-zero value. Second,
it is assumed that a unit of time is equivalent to a unit of computations executed by
the algorithm.
To make comparing heuristic algorithms fair it is assumed that subsequent mea-
surements are observed between the same numbers of computation units for each
of the compared algorithms. This assumption is fundamental for the theory of al-
gorithm performance comparison. The value of an algorithm lies in its ability to
discover knowledge from known facts and to use the knowledge for further fruitful
mining in the other unknown facts. The values of solutions from the search space
are the facts. Appropriate and fast estimation of suboptimal solutions depends on
the knowledge build from the facts. The heuristic optimization resembles the game
“20 questions” where the ability to ask the right questions is very important in or-
der to get the right information and in reaching the purpose. Every request for the
evaluation of a solutions is like a request for a hint. Every algorithm can ask for
different hints, that is, ask for evaluation of different points in the search space.
The one who needs less hints for a more effective estimation is the winner. So, the
subjects of the competition between the algorithms are (a) the number of hints nec-
essary to reach the satisfying suboptimal solution and (b) the quality of the state
of knowledge after each subsequent hint. Therefore, the fair competition must be
based on the simultaneous measurement performed between the same numbers of
subsequent hints. When in experimental research the numbers of computation units
between subsequent measurements are not the same, it would be possible to manip-
ulate the algorithm parameters in a way which can lead to false conclusions about
the algorithm efﬁciency. For example, when it is assumed that just the number of
iterations between subsequent changes in the environment should be the same, this
would allow tuning of the number of ﬁtness function calls in a single iteration in
favor of one algorithm and at the expense of another.
2 This is in contrary to the formal deﬁnition of an algorithm which says that this is a ﬁnite
list of steps that lead to the result. Thus, the term method would probably be much more
appropriate in this case. Instead of this due to historical reasons we say heuristic algorithm
which means a particular instance of an optimization heuristic.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
399
The quality of an iterative algorithm is a function of its readiness to return a
valuable solution from the set D upon the user request at any time. The quality
measure can be deﬁned as:
• quality of the current best found solution x j
best, that is, the value of F(xj
best)
where j is a number of change in the landscape which occurred during the
algorithm run,
• error level, that is, the difference between the quality of the global optimum
F(x∗j) and the quality of the current best found solution F(xj
best) evaluated for
the j-th shape of the ﬁtness landscape,
• Euclidean distance between the current best found solution xj
best and the global
optimum x∗j evaluated for the j-th shape of the ﬁtness landscape.
Each of these attributes can be measured in subsequent time units of the optimization
process. Obtained series of values can be either presented as a graph or undergo
statistical analysis speciﬁc for data sets to obtain a single value which is more useful
for comparisons.
The last issue is about the identiﬁcation of changes. Usually, the author of the
benchmark knows when and how often the change appears. However, this know-
ledge does not have to be shared with the algorithm. In this case the algorithm
has to have an embedded strategy for detecting changes in the environment. There
are publications [21, 22, 24] devoted to methods of identiﬁcation of changes in the
dynamic environment during the process of search. However, in the further text we
shall assume that the optimization algorithm is informed of the change as soon as it
occurs, and no additional computational effort for its detection is needed.
14.2.1
Quality of the Current Best-Found Solution
A graph of a series of current best solution values measured in subsequent genera-
tions (or a graph of the mean values obtained from a series of experiments) is the
most intuitive way of presenting results originating from the publications devoted
to static optimization (see for example [4, 5, 6, 7, 8, 10, 11, 16, 17, 20, 32, 33]).
This graph shows the progress of the search process. However, as it was mentioned
earlier, in this case it is necessary to guarantee the same computational cost between
subsequent measurements for all compared algorithms. It is also worth noting that
in some papers graphs of the average values of all solutions or graphs of the worst
solution in the population were analyzed [7, 10, 16, 17].
However, graphs depicting current best (or mean or worst) solutions are hardly
comparable to each other. It is much easier to indicate the better algorithm when the
quality is represented by a single value. Therefore, for evaluating the algorithm’s
performance, two other measures proposed by De Jong in 1975 for static optimiza-
tion were also applied, namely ofﬂine and online performance [3, 11, 32, 33]. The
ofﬂine performance represents the best value in the current population averaged
over the entire run. This shows the efﬁciency of the algorithm during the process
of search. Morrison [18] developed this measure further: the obtained ofﬂine per-
formance is averaged over the number of experiments across the entire range of

400
K. Trojanowski
landscape dynamics. The outcome is called the collective mean ﬁtness. The latter
measure, that is, the online performance, is the average of all ﬁtness function eval-
uations of the entire run. It shows the impact of the population on the focus of the
search.
The last issue concerns the problem of comparability of best-found solution val-
ues between test-cases. Since the ﬁtness values of the optimal solutions for different
instances of testing environments usually differ from each other, the obtained values
of current best-found solutions are hardly comparable. Therefore, a normalization
of the measured values is necessary. In Weicker [34] two cases of normalization are
discussed: the ﬁrst one, where the values of the best and the worst values in the en-
tire search space are known, and the other one, where the values are unknown. The
former case is simple, since the accuracy of a solution xj for the j-th shape of the
ﬁtness landscape is just the result of normalization transformation,
acc(xj) = F(x j)−Fmin,j
Fmax,j −Fmin,j
,
(14.1)
where Fmax,j and Fmin,j represent best and worst known values for the j-th shape of
the landscape, respectively.
In the latter case a window based accuracy is proposed, which normalizes values
of the solutions respectively to the maximum and minimum values among all the
solutions which appeared in the population for a selected time window. The upper
boundary of the time window is just the present iteration and the length of the win-
dow is constant and the same for all the test-cases. The two measures can be the
basis for another optimization process parameters, like stability [34], that is, the in-
ﬂuence of the changes on the accuracy. Stability of the algorithm simply represents
the maximum difference between the values of the accuracy (or the window based
accuracy) measured in subsequent time steps.
14.2.2
Error Level
A difference between values of the current best found solution and the optimum rep-
resents another measure used for comparisons. This is particularly useful for eval-
uation of the results obtained for different instances of the dynamic environment.
The difference shows a current lack in quality as distance to the optimum and is less
sensitive to the amplitude of optimum quality levels in subsequent landscapes.
The difference between values of the current best found solution and the opti-
mum averaged over the entire run presented in [29] was one of the ﬁrst proposi-
tions. However, this approach was constrained just for steady-state algorithms, that
is, those which never lose already found best solutions but continuously improve
them in subsequent iterations. The same restriction concerned also the second mea-
sure proposed in this paper, which was a mean of a difference between the value of
the current best solution in the population of the “just before the change” genera-
tion and the optimum value averaged over the entire run. At the same time, a more
ﬂexible measure was proposed, which is called the ofﬂine error [5] and represents

14
Dynamic Real–Valued Landscapes and the Optimization Performance
401
the average deviation from the optimum of the best solution value found since the
last change in the ﬁtness landscape’s shape. After every change, the best solution
value is forgotten and the new candidate for the best solution is selected among the
current set of solutions reevaluated respectively to the new shape of the landscape.
Sample series of the algorithm outcome for a dynamic maximization problem where
the ﬁtness function changed three times every 15 generations are depicted in Fig-
ure 14.1. The series of the current best solution values registered every iteration is
represented as a dashed line. The solid line segments represent values of the opti-
mum after subsequent changes. The difference which contributes in the ofﬂine error
evaluation is represented as a distance between the dashed and the solid line. How-
ever, not in every case. In the case of deterioration of the value of the current best
solution the difference between the quality of the best-found solution since the last
change is rather taken into account. The deterioration is possible for heuristic algo-
rithms without a steady-state strategy of the solution population management. In the
ﬁgure, the total of differences measured during the experiment is represented as a
gray area. Eventually, the requested ofﬂine error value is the total of the differences
averaged over the entire run.
Ten years later, for the purpose of a special session and competition on “Evolu-
tionary Computation in Dynamic and Uncertain Environments”3 four other param-
eters were deﬁned based on the error values: the best, the worst, the mean and the
standard deviation value of ofﬂine error for a minimization problem obtained for a
series of ﬁtness function changes in repeated experiments:
Avgbest = ∑
Nexp
l=1 minj=1,...,Nch El,j
last
Nexp
,
(14.2)
Avgmean = ∑
Nexp
l=1 ∑Nch
j=1 El,j
last
Nexp ·Nch
,
(14.3)
Avgworst = ∑
Nexp
l=1 maxj=1,...,Nch El,j
last
Nexp
,
(14.4)
STD =

1
Nexp ·Nch −1
Nexp
∑
l=1
Nch
∑
j=1
(El,j
last −Avgmean)2
−1
,
(14.5)
where Nexp is the number of restarted experiments for the same control parameter
settings of the algorithm and the same test-case, Nch is a number of changes in the
ﬁtness function that appear during a single experiment run, and E j
last is the absolute
function error value.
E j
last = |F(xj
best)−F(x∗j)|.
(14.6)
3 IEEE CEC-2009, Trondheim, Norway, 2009, 18-21 May.

402
K. Trojanowski
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
 0
 10
 20
 30
 40
 50
 60
solution quality
generations
Error evaluation
fitness of the best solution in the current generation
fitness of the optimum point in the landscape
Fig. 14.1 An example series of values measured during the single experiment of continuous
optimization in the dynamic ﬁtness landscape. The dashed line represents values of the best
solutions in the subsequent iterations, the solid horizontal line segments represent values of
the optimum after subsequent changes and the gray area represents set of values summarized
and averaged over the entire experiment to be returned as an ofﬂine error value
14.2.3
Euclidean Distance to Optimum
Applications of the Euclidean distance in the algorithm performance evaluation
measures appear seldom in the literature. The distance between the current best-
found solution and the optimum was employed in [35], and the distance of the mass
center of the population to the optimum in [26]. In [30] the authors applied Eu-
clidean distance as a measure of unsatisﬁed realizations in a search space, that is,
a mean deviation of the Euclidean distance between the current best found solution
and the optimum in the selected time interval below the acceptable level.
However, the obtained minimum Euclidean distance to the optimum for the al-
gorithm effectiveness is never applied as a primary criterion because this demands
very speciﬁc properties of the search space attributes. Clearly, it must be guaranteed
that the change of value for one of the dimensions is equally important for the user
as the change for another dimension. In other words, all the solutions located on a
hypersphere surrounding an optimum has to be of the same quality. Otherwise, the
measure does not allow to differentiation between the better and the worse solution
in the search space. Due to this, the Euclidean distance to optimum should be ap-
plied as a secondary measure to adjudicate which of any two solutions is better just
in the cases where the ﬁrst measure failed.
14.2.4
Statistical Analysis of the Measurements
Due to the stochastic nature of heuristic algorithms we need to repeat the experi-
ments and statistically analyze the output data. The analysis of a series of measure-
ments is concerned with the basic problem of coping with differences between two
means obtained for two independent data series. In the case where the means are

14
Dynamic Real–Valued Landscapes and the Optimization Performance
403
similar it is necessary to verify if the differences between the means can be declared
statistically signiﬁcant. There is a number of classic signiﬁcance tests which can be
applied assuming that the sample is without biases (e.g. Student’s t-tests).
An interesting performance measure based on statistical analysis can be found
in [2]. The measure, called the dissimilarity factor, is a weighted sum of two other
factors. They are evaluated with the use of current optimum values F(x∗) and the
values of the current best found solution F(xbest) obtained for all subsequent itera-
tions of a single experiment run. The ﬁrst factor represents the effectiveness of the
algorithm which is an Euclidean distance between the values in the two series:
cdist =
(
)
)
*
Ngen
∑
n=1
(F(xn
best)−F(x∗n))2
(14.7)
The second factor represents the algorithm ability to recover after a change which
is a cross correlation value between the values in the two series:
ccorr =
∑
Ngen
n=1((F(xn
best)−mbest)× (F(x∗n)−mopt))

∑
Ngen
n=1(F(xn
best)−mbest)2 ×

∑
Ngen
n=1(F(x∗n)−mopt)2
(14.8)
where n is the number of the iteration, Ngen is a total number of iterations executed
during a single experiment run, mbest and mopt are the estimated means of F(xbest)
and F(x∗) values, respectively. The means are calculated by taking the average of
all the respective values of F(xbest) or F(x∗) measured during a single run of the
experiment. When the value of ccorr is close to 1 the series of values are very similar
which means that the algorithm recovers efﬁciently after the change, otherwise when
it is close to −1, the series are different and this means that there are some problems
with the algorithm’s recovery.
Another statistical approach to evaluation of the algorithm ability to recover af-
ter a change can be found in [1]. Here a linear regression model is applied to the
measurements performed just before the change. The slope of the regression line
represents robustness of the algorithm. To obtain this, in the ﬁrst step the values of
the accuracy [34] for each of the changes are averaged over a number of indepen-
dent runs of the experiment. In the second step a regression model is build where the
value of the standardized regression coefﬁcient β describes the algorithm efﬁciency.
In the model the set of accuracy values obtained for all the changes becomes the set
of explanatory variables whereas the approximation to the overall accuracy repre-
sents a scalar dependent variable. A positive value of β indicates that the algorithm
recovers efﬁciently, whereas a negative value means degradation of the solution
quality.

404
K. Trojanowski
14.2.5
Description of Dynamics
14.2.5.1
The Model
The model of a dynamic environment deﬁned as M (P) = (D,F,C ) implicitly as-
sumes that the dynamics can occur in any of the components in the run-time of
the algorithm. Another model which explicitly deﬁnes the presence of time and
describes the full range of changes which can occur in the environment has been
proposed by [23]. In the model a dynamic landscape is deﬁned as a quintuple,
ΛD = (S,η,Γ ,F,ϕ), where S represents the search space, η(x) deﬁnes the neigh-
borhood structure for the solutions from the search space, Γ represents measuring
and ordering scale for the changes, F is the set of ﬁtness functions f such that
f : S ×Γ →IR, that is, all the functions which deﬁne the ﬁtness landscape during
the entire time period being the subject of interest, and the last component, ϕ, is the
transition map for the ﬁtness functions from F; that is, ϕ describes how the land-
scape transforms from one shape to another. In this model the two components, Γ
and ϕ, allow for a formal deﬁnition of dynamics in F. Besides, the model classiﬁes
benchmarks respectively to the discrete or continuous nature of time and space. The
search space can be discrete or continuous whereas the time can be static, discrete
or continuous.
For dynamic optimization a number of features that differentiate dynamic prob-
lems were proposed. For example, in [29] we can ﬁnd the following two: continu-
ous or discrete nature of changes and regularity of changes. The regularity divides
changes into predictable ones, that is, regular or even cyclic and non-predictable
changes, that is, random changes. Besides, both continuous and discrete changes
can be classiﬁed further into three sub-types [30]: adiabatic changes, indirect ones,
and turbulent ones. Each type of the above mentioned dynamic features can concern
any of the benchmark parameters, for example, we can deﬁne a benchmark where
the coordinates of local optima in the landscape change randomly and continuously
whereas their heights vary cyclically and in a discrete manner.
The most in-depth analysis and classiﬁcation of dynamic ﬁtness landscape fea-
tures can be found in [23]. The features are divided into two groups: topological
and dynamical. Topological features are represented by the number of local optima,
their distribution and properties of their basins of attractions. Dynamical features
concern speed, that is, the number of changes per time interval, frequency, severity
or strength of the changes, level of graduality, and predictability.
14.2.5.2
The Time Parameter
The parameters related to the dynamics can belong both to the algorithm and the
benchmark.At the beginning of analysis we need to assume the discrete nature of the
time t just for measurement purposes. Clearly, a single time step has to be correlated
with a unit of algorithm computations. A single unit should lead the algorithm from
one state to another, that is, to the state where the algorithm’s knowledge about the
problem is at least a bit different from the state it had previously. On the other side,
this should also be one of the indivisible steps of the algorithm. A single ﬁtness

14
Dynamic Real–Valued Landscapes and the Optimization Performance
405
function call is a good candidate. Besides, it often happens that the ﬁtness function
call is truly one of the most computationally expensive and also indivisible steps of
the algorithm. When we take the ﬁtness function call as a time unit, even continuous
changes occurring between subsequent function calls become negligible from the
algorithm point of view. In this case the only important information is the state
of the ﬁtness landscape just before subsequent ﬁtness function calls. The fact is,
that in most publications the unit cost of computations is represented just by the
ﬁtness function call, that is, for example the time span of a single execution of the
loop equals the number of the calls. All the other steps in the loop are regarded as
negligible.
So, the ﬁrst parameter of the landscape dynamics is the number of the ﬁtness
function calls, that is, the length of the time interval between subsequent changes
M ≥1. The length of subsequent intervals can be regular or not: the number of calls
can be predictable (constant, or varying cyclically), or nonpredictable (chaotic or
random). This allows deﬁnition of parameters such as change frequency or maxi-
mum and minimum time span between subsequent changes. A number of changes
Nch occurring in the environment during a single experiment is also closely related
to the above mentioned change period.
14.2.5.3
The Landscape Features
Following the classiﬁcation given in [23] we divide the set of landscape features into
topological and dynamical subgroups. In other words, when talking about dynamic
environments we need two deﬁne two things: what can change in the landscape and
how does it change.
The ﬁrst parameter from the ﬁrst subgroup should be the number of the search
space dimensions Ndim as well as upper and lower boundaries deﬁned for each of
the dimensions. Changes of the search space practically redeﬁne the problem, and
in this case the search process should be started from scratch. However, this is not
a theoretical situation and one can easily imagine real-word problems where the
boundaries of the search space dimensions vary during the ongoing search process.
The number of local optima is the next one. Due to the fact that in many landscape
generators the landscape is composed of a number of component functions this pa-
rameter can be replaced by the number of components N. The two numbers do not
have to be identical because some components can be deﬁned as multimodal func-
tions. Even in the case of unimodal components identity is not guaranteed in the case
where components can overlap. Other parameters deﬁne the topological features of
the types of components. They are represented as component function parameters
and deﬁne coordinates, shape, slope and height of the landscape components. Each
of the types has its own set of parameters with respect to the function formula.
The second subgroup consists of parameters of the component transformation
mechanisms, that is, scaling, translation and rotation. These are scaling factor, trans-
lation vector and rotation matrix, respectively. Each of them has assigned a pair
of boundaries which deﬁne feasible intervals of values. There are also parameters
which deﬁne dynamics of the transformation mechanism parameters, that is, how the

406
K. Trojanowski
mechanisms are applied and how they change in time. The transformation mecha-
nisms can be applied regularly or not and the dynamics can be common for all
the components or individually deﬁned. The strength of transformation can be pre-
dictable (constant, or varying cyclically), or nonpredictable (chaotic or random). A
discussion of the example rules and their application can be found in Section 14.3.
14.3
Real-Valued Dynamic Optimization Landscapes
14.3.1
Landscapes with Symmetric Components
The ﬁrst landscapes designed for real-valued dynamic optimization were based on
a simple idea of a number of unimodal component functions deﬁned for the given
search space where each of the components occupies its part of the space. The com-
ponents represented by peaks, cones or hills (see Figure 14.2) are assembled to
create a multimodal ﬁtness landscape. Random changes in the component width,
height or coordinates were the ﬁrst types of changes tested in the landscapes.
14.3.1.1
Moving Peaks Landscape
Landscape generators were where the landscape is created using a number of com-
ponent unimodal functions [5, 19]. In the case of DF1 [19] the landscape is deﬁned
for a 2-dimensional search space and consists of a number of cone functions. In the
case of MPB (Moving Peaks Benchmark4 ) [5] the search space is ﬁve-dimensional
and the landscape consists of a number of peaks (scenario 1) or cones (scenario 2
and 3). In both approaches every i-th peak has its height hi, width wi, and coordi-
nates of its optimum point cmaxi.
The i-th peak function is deﬁned as follows:
fi(x1,··· ,xn) =
hi
1 + wi ·∑n
d=1(xd −cmaxi[d])2 ,
(14.9)
whereas the i-th cone function is:
fi(x1,··· ,xn) = hi −wi ·

n
∑
d=1
(xd −cmaxi[d])2.
(14.10)
The graphs of the two types of components are depicted in Figure 14.2.
The ﬁnal value of a solution x in the search space is evaluated as follows:
4 The name of this test-case generator contains the word Benchmark, which means just an
example test problem with often very special properties. However, in this particular case it
is justiﬁed to call this a landscape generator, because MPB generates search spaces with a
notion of adjacency, nearness and distance. Additionally, for every solution from the space
there is a ﬁtness value deﬁned that is the result of the evolutionary optimization dynamics.
Clearly, the test-cases generated with MPB have all the properties that ﬁtness landscapes
have in evolutionary computation.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
407
-9 -6 -3  0  3  6  9 -9-6-3 0 3 6 9
 0
10
20
Peak
x1
x2
-9 -6 -3  0  3  6  9 -9-6-3 0 3 6 9
-40
-20
 0
20
Cone
x1
x2
 0
 3
 6
 9
 0
 3
 6
 9
 0
20
40
60
Hill
x1
x2
Fig. 14.2 Peak, cone and hill deﬁned in 2-dimensional search space
f(x) = max
i=1,...N fi(x).
(14.11)
The i-th component movement is performed simply by change of the coordinates of
its optimum point cmaxi:
cmaxi(t) = cmaxi(t −1)+ vi(t)
(14.12)
vi(t) =
vlength
|r+ vi(t −1)|((1 −λ)r+ λvi(t −1))
(14.13)
where vlength is the maximum step length, vi(t) is the current translation vector, r is
the vector of independent random variables from the interval [0,1], and λ deﬁnes
correlation between subsequent versions of the vector v: λ = 0 means no correlation,
that is, subsequent vectors v are independent. In the case when the new coordinates
of the optimum point are out of the feasible region of the space the calculation is
repeated.
The next values of the component height and width are evaluated as follows:
hi(t) = hi(t −1)+ sh ·σ
(14.14)
wi(t) = wi(t −1)+ sw ·σ
(14.15)
where hi(t) is the new height, wi(t) is the new width, sh is the height change coefﬁ-
cient, sw is the width change coefﬁcient, and σ is a random value from [0,1].
Test-cases based on scenario 2 with λ = 0, that is, with no correlation between
subsequent versions of v are selected for experiments in the majority of published
research where the MPB generator was applied. In the test-cases subsequent local-
izations of the optimum point generate paths which have different features depend-
ing on vlength as one can see in the pictures in Figure 14.3. For every picture the ﬁrst
localization was generated randomly within the range [30,50] for both coordinates.
Particularly for larger values of vlength, that is, when the optimum point walks easily
over the entire search space the adverse phenomenon of optimum point attraction to
the border areas of the space can be observed.

408
K. Trojanowski
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0
 10  20  30  40  50  60  70  80  90  100
vlength =  1
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0
 10  20  30  40  50  60  70  80  90  100
vlength =  3
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0
 10  20  30  40  50  60  70  80  90  100
vlength =  5
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0
 10  20  30  40  50  60  70  80  90  100
vlength =  7
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0
 10  20  30  40  50  60  70  80  90  100
vlength =  10
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0
 10  20  30  40  50  60  70  80  90  100
vlength =  20
Fig. 14.3 Paths with 110 subsequent localizations of the optimum point for vlength: 1,3, 5, 7,
10 i 20 in 2-dimensional search space
14.3.1.2
Simple Test Case Generator
The simple test case generator (STCG) [29] deﬁnes a dynamic landscape in two-
dimensional search space. Construction of the landscape divides the space into a
number of subspaces just like squares in a chessboard. For every subspace Sa,b a hill
function (Figure 14.2) is deﬁned:
fa,b(x1,x2) =

αa,b(cr(a)−x1)(x1 −cl(a))(ct(b)−x2)(x2 −cb(b)) if (x1,x2) ∈Aij
0
otherwise
(14.16)
where αa,b = 16/[(cr(b) −cl(b))2(ct −cb)2], a is a column number and b is a row
number in the chessboard, cr(a) and cl(a) represent the right and left boundaries of
the a-th column, and ct(b) and cb(b) represent the top and bottom boundaries of the
b-th row.
The ﬁnal value of a solution x in the search space is evaluated as follows:
f(x,t) =
Ncol
∑
a=1
Nrow
∑
b=1
pa,b(t)· fa,b(x)
(14.17)
where Ncol and Nrow represent total numbers of columns and rows, respectively,
pa,b ∈[0, pmax] represents the height of the (a,b)-th hill in the landscape; in the
benchmark it was assumed that pmax = 100. Application of different rules for evalu-
ation of pa,b allows for generation of landscapes both with cyclic or acyclic changes.
The idea of a landscape which is build of varying but immovable components
can also be found in the multi-objective optimization-based dynamic test problems

14
Dynamic Real–Valued Landscapes and the Optimization Performance
409
generator [13]. In this approach each of the components occupies its part of the
space and is controlled by a vertical scale coefﬁcient varying within the range from
0 to 1. When the coefﬁcient equals zero the component completely disappears from
the landscape, that is, the landscape is ﬂat. In the opposite case the component par-
ticipates in the landscape with its full height. The ﬁnal value of a solution x is also
evaluated as deﬁned in Equation (14.11).
14.3.2
Landscapes with Non-symmetric Components
Unimodal functions with a symmetric graph shape allow for horizontal and vertical
scaling as well as for shifting throughout the search space. However, the rotation
of such a shape has no effect. An example of a benchmark build of component
functions with a non-symmetric shape of the landscape can be found in [38] (the
full description of this benchmark generator was published three years later in [9])
called the max-set of Gaussian landscape generator.
The unimodal component is deﬁned with the Gaussian function:
g(x) =

1
(2π)Ndim/2|Σ|1/2 exp(−1
2(x−μ)Σ−1(x−μ)T)
 
1
Ndim
(14.18)
where μ is a vector of means of size Ndim and Σ is a covariance matrix of size
Ndim×Ndim. Like in the previous approach the ﬁnal value of a solution x is evaluated
according to Equation (14.11).
Each of the components is controlled by the following three parameters: μ, Σ,
and a vertical scale coefﬁcient. This allows for the change of the asymmetric shape
of the function graph as well as its height. However, there is no possibility to move
the component to another point in the search space (like in STCG).
14.3.3
Transformation Matrices
An approach opposite to the construction of landscapes presented in previous sec-
tions can be found in [27, 15]. Previous landscapes consisted of a number of compo-
nents where variability is the source of dynamics in the landscape. In this approach
the components are constant and no change is applied to them at any time. Instead,
the source of the landscape dynamics is the variability of the coordinates which have
to be evaluated. The procedure of evaluation of a point x from the search space is
extended by one more step. Before the evaluation begins the transformed coordi-
nates of point x are generated: x′ = x·A, where A is a transformation matrix. Then,
x′ is the subject of evaluation, however, the returned value is assigned to the solution
x, that is, the unmodiﬁed vector of coordinates. After that x′ is no longer useful and
is forgotten. Such an extended procedure of evaluation is applied every ﬁtness func-
tion call. This way the ﬁtness landscape is not deﬁned just by the set of component
functions but also by the transformation matrix A. For the case where A varies in
time, a dynamic ﬁtness landscape is obtained.

410
K. Trojanowski
An example of such an approach is the Continuous Dynamic Problem Generator
(CDPG) [27]. The generator originates from the idea of the XOR generator [36, 37]
which was proposed for binary encoded problems. The idea of application of a
binary mask to the binary representation of a solution was transferred to the CDPG
approach. In CDPG the transformation matrix is applied to the real-valued vector
of solution coordinates in the search space. There are two versions of CDPG and
in both of them the solutions are rotated in the search space. In the ﬁrst one the
selected coordinates are just multiplied by -1. In the second one a rotation proce-
dure is implemented. The procedure is based on the simple idea of rotation in the
multidimensional search space by the plane deﬁned just for two dimensions [25].
For the rotation of a solution x by the d1,d2-th plane, x is multiplied by the
rotation matrix Rd1,d2(θ) where θ is the angle of rotation. An example matrix used
for rotation by the plane [3,5] in six-dimensional space looks like:
R3,5 =
⎛
⎜
⎜
⎜
⎜
⎜
⎜
⎝
1 0
0
0
0
0
0 1
0
0
0
0
0 0 cos(θ) 0 −sin(θ) 0
0 0
0
1
0
0
0 0 sin(θ) 0 cos(θ) 0
0 0
0
0
0
1
⎞
⎟
⎟
⎟
⎟
⎟
⎟
⎠
(14.19)
The construction of the matrix A starts with the deﬁnition of the list of rotation
planes r = [r1,r2,...,rNrot] and the respective angles of rotation. The vector r con-
tains a list of Nrot/2 couples of dimension numbers where each couple represents a
rotation plane: [1,2], [3,4], [5,6], ... [Nrot −1,Nrot]. Then the matrix A is obtained
as the result of multiplication of rotation matrices:
A = Rr[1],r[2](θ1,2)·Rr[3],r[4](θ3,4)···Rr[Nrot−1],r[Nrot](θNrot−1,Nrot).
(14.20)
The same rotation procedure can also be found in the dynamic rotation peak bench-
mark generator (DRPBG) [15].
14.3.4
Generalized Approach
The generalized model of a dynamic environment E is represented as a quadruple:
E = (D,I,T,S)
(14.21)
where:
D is the search space,
I
is a set of instances of component functions deﬁned for different, not necessary
disjunctive parts of D,
T is a set of transformation mechanisms applied to the component function in-
stances from I,
S is the deﬁnition of the transformation mechanism dynamics that controls the
strength of changes applied to the parameters of the component function instances.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
411
In the model every landscape consists of a number of components. The compo-
nent properties are controlled by parameters. For each of the components deﬁned
two groups of parameters are deﬁned: the parameters embedded in the component
function formula and the parameters “surrounding” the formula. A modiﬁcation of
the parameters values is implemented by the component transformation mechanism.
The mechanisms are assigned to respective parameters or sets of parameters in the
component function formula. For example, when we want to stretch the landscape
over the search space each of the solution coordinates is multiplied by a scaling
factor. For a non–uniform stretching we need to use a vector of factors containing
individual values for each of the coordinates. We call this type of modiﬁcation a hor-
izontal scaling and the factors belong to the ﬁrst group of the component parameters.
Another example is a vertical scaling where only the ﬁtness value of a solution is
multiplied by a scaling factor. This factor represents the second group of parameters.
The ﬁrst group controls horizontal translation, horizontal scaling, and rotation. For
simplicity they are called horizontal changes in the further text. The second group
of parameters controls vertical scaling and vertical translation (called respectively
vertical changes). All of the changes can be obtained by dynamic modiﬁcation of
values of respective parameters during the process of search.
Eventually, the structure of the generated test-case is a logical consequence of
the following assumptions:
(1) the ﬁtness landscape consists of a number of different component landscapes,
(2) the dynamics of each of the components can be individually controlled,
(3) a component can be deﬁned for a part or the whole of the search space, thus,
in the case of a solution covered by more than one component the value of this
solution can be the minimum, the maximum or the sum of values returned by
the covering components.
Such a view of the deﬁnition of a dynamic environment can be found in the
generalized dynamic benchmark generator (GDBP) [15]. The GDBP consists of
two benchmark generators: The dynamic rotation peak benchmark generator al-
ready mentioned above, and dynamic composition benchmark generator (DCBG).
In DCBG one can apply ﬁve types of component changes: horizontal translation,
scaling and rotation and vertical translation and scaling.
In GDBP the evaluation of a solution x is deﬁned as follows:
F(x,φ,t) =
N
∑
i=1
(wi ·(f ′
i ((x −Oi(t)+ Oiold)/λi ·Ri)+ Hi(t)))
(14.22)
where:
f ′
i (x) = C · fi(x)/|f ∗
i | is the normalized component function fi(x), where C equals
2000, and f ∗
i denotes the value of the i-th component optimum point.
φ are the landscape parameters; φ = (O,R,H), where
Oi(t) is the optimum point coordinates for the i-th component and for the time t,
Oiold is the initial optimum point coordinates for the i-th component; it is assumed
that Oiold equals 0 for all the component functions,
Ri is the rotation matrix for the i-th component; every component has its own matrix

412
K. Trojanowski
which is deﬁned once at the beginning of the experiment and remains unchanged,
Hi is the i-th value in the vector H; the value represents a height coefﬁcient for the
i-th component.
The following types of the component functions can be found in the GDBP:
Sphere, Rastrigin, Weierstrass, Griewank and Ackley (presented in Table 14.1).
Table 14.1 Component functions from the GDBP benchmark generator
name
function
domain
Sphere
f (x) = ∑n
i=1 x2
i
[-100,100]
Rastrigin
f (x) = ∑n
i=1 (x2
i −10cos(2πxi)+10)
[-5,5]
Weierstrass f (x) =
n
∑
i=1
(
kmax
∑
k=0
[ak cos(2πbk(xi +0.5))])−n
kmax
∑
k=0
[ak cos(πbk)]
a = 0.5,b = 3,kmax = 20
[-0.5,0.5]
Griewank
f (x) =
1
4000 ∑n
i=1(xi)2 −∏n
i=1cos( xi
√
i)+1
[-100,100]
Ackley
f (x) = −20exp(−0.2

1
n
n
∑
i=1
x2
i )−exp( 1
n
n
∑
i=1
cos(2πxi))+20+e
[-32,32]
Recently, yet another benchmark generator, Syringa [31], was proposed aim-
ing to be a sum of a number of existing generators. Its architecture and source code
is in accordance to the model E where the landscape consists of a number of sim-
ple, individually controlled components. In particular Syringa is able to simulate
behavior of two generators, that is, MPB and GDBG, and to create completely new
instances of the dynamic problem as well. The landscape created with Syringa
consists of a number of components of any type controlled by a number of pa-
rameters. Each of the components covers a subspace of the search space. The ﬁnal
landscape is the result of a union of a collection of components such that each of the
solutions from the search space is covered by at least one component. In the case
when the solution belongs to the intersection of a few subspaces the solution value
equals (i) the minimum (for minimization problems) or (ii) maximum (otherwise)
or (iii) this can be also a sum of the ﬁtness vales obtained from these components.
The version of Syringa presented in [31] consists of six types of component
functions: peak, cone, sphere, Rastrigin, Griewank and Ackley. Four different char-
acteristics of variability, originating from MPB and GDBG, are deﬁned and can
be applied to the component parameters: small step change (Equation (14.23)),
large step change (Equation (14.24)), and two versions of random changes: (Equa-
tion (14.25) and Equation (14.26)). The change Δ of a parameter value can be
calculated as follows:

14
Dynamic Real–Valued Landscapes and the Optimization Performance
413
Δ = α ·rand·(max−min),
(14.23)
where α = 0.04, rand = U(0,1),
Δ = (α ·sign(rand1)+ (αmax −α)·rand2)·(Dt −Dt),
(14.24)
where α = 0.04, αmax = 0.1, rand1,2 = U(0,1)
Δ = N(0,1)
(14.25)
Δ = U(rmin,rmax)
(14.26)
In the above-mentioned equations Dt and Db represent the upper and lower bound-
aries of the search space, respectively, N(0,1) is a random value obtained with
standardized normal distribution, U(0,1) is a random value obtained with uniform
distribution form the range [0,1], and [rmin,rmax] deﬁnes the feasible range of Δ
values.
14.4
Prediction of the Algorithm Answer
In dynamic optimization the raw outcome of the algorithm activity is always a se-
ries of values regardless of whether the measured value is the quality of the current
best-found solution, the error level or the Euclidean distance to the optimum. Thus,
the forms of the algorithm outcome presentation discussed in the previous section
belong to one of the two types: (1) graphs with series of values or (2) single statistic
values, for example the averaged best values obtained for each of the time inter-
vals between subsequent changes in the ﬁtness landscape, or averages of a series of
values measured in subsequent time steps. The ﬁrst form of the algorithm outcome
presentation was applied mostly in the early publications devoted to dynamic opti-
mization and quickly became replaced by the second form, that is, statistic values
which are much more useful for comparisons. The second form has many versions
which differ in the type of measured value and the frequency of measurements.
What is more important, for the second form it is always taken for granted that the
user is ready to wait for the result for the full time interval between one change in
the landscape and the next one. However this does not have to be the case in real
world situations. The fact is that in the real world there are usually two unknown
parameters we have to cope with: the time we have to the next change in the envi-
ronment and the time which the user is going to wait for the recovery of the result
after the last change. We assume that the former parameter is greater than the latter
one.
Therefore, in spite of the full access to the entire series of values measured during
simulations for each of the time intervals between subsequent changes we need to
take into account the stochastic nature of both time interval length and the user im-
patience. Particularly, we have to assume that the user can break the search process
after each time step and request the solution. The user decision concerning selection
of a time step for the break may be related with a number of circumstances, for ex-
ample, with a quality of the algorithm current outcome. However, here we assume
that the user motivation to stop the search process comes solely from outside. For

414
K. Trojanowski
example in the case of an airport where ﬂights are disrupted due to thick fog we
can use the optimization algorithm to ﬁnd the optimal sequence for departures of
delayed planes when the fog lifts. In this case the optimization can be performed as
long as possible because the more computation is performed the better solution can
be obtained. The only stopping criterion is the fog lifting which is the moment when
the current best found solution has to be provided to the airport control center.
14.4.1
Evaluation of the Algorithm’s Outcome for Random
Stopping Time
The solution request in the m-th time step, that is, a stopping time can be repre-
sented as a random variable τ(m) = m. It can take numerical values from the in-
terval [1,...,M], where M represents the maximum number of time steps between
subsequent changes in the ﬁtness landscape.
The physical implementation of the random number generator for τ can be rep-
resented as an array of M independent continuous random number generators which
generate uniformly distributed real numbers from the interval [0,1]. The user’s sin-
gle decision to request the solution at m-th time step depends on the generator in
the m-cell of the array and a threshold assigned to this generator. The m-th thresh-
old represents the probability of the user request at the m-th time step. The value
generated by the generator is compared with the threshold. When the value is above
the threshold the user is ready to wait and the optimization process continues, oth-
erwise the user requests the solution. Clearly, the higher the threshold the stronger
the impatience of the user.
The chance that the user requests the solution precisely just in the m-th time step
from the last change can be calculated as follows: Let ptrue represent the probability
that the generator in the m-cell of the array returned a value below the threshold,
that is, the user requests the solution. Then, for example, the case where the user
requested the solution just after the third time step represents the following situation:
the generator in the ﬁrst cell returned a value above the threshold, the generator in
the second cell also returned a value above the threshold but the generator in the third
cell returned a value below the threshold. Thus, the expected value of the algorithm
outcome in the m-th time step equals:
E[Δ|τ = m] = EΔ(m).
(14.27)
In our analysis it is assumed that the algorithm outcome for the given optimiza-
tion problem is already known, that is, it is deterministic. For example this is the
case when experiments have already been done and a dataset which contains the
algorithm’s entire outcome is saved. Lets have a series of outcome values for subse-
quent time steps averaged over the number of runs for the same optimization prob-
lem, the same algorithm conﬁguration, and the same starting conditions. Now we
want to evaluate an expected value of the outcome for the case where there exist
randomness originating from the user as described above. In this model the choice
of the breaking moment has nothing in common with the quality of the current

14
Dynamic Real–Valued Landscapes and the Optimization Performance
415
solution Δ(m) and depends on external conditions only. Thus, the expected value Δ
of the outcome in the m-th time step simply equals
E[Δ|τ = m] = Δ(m).
(14.28)
Of course, due to the fact that one of the time steps from [1,...,M] must be chosen
by the user (just like in the case of rolling 6-sided die where one of the numbers al-
ways must be rolled), the chances for selecting any of the time steps from [1,...,M]
equal 1:
pm =
 (1 −ptrue)m−1 · ptrue
if m < M
1 −∑N−1
m=1

(1 −ptrue)m−1 · ptrue

if m = M
(14.29)
where pm represents probability P(τ = m). In Figure 14.4 a graph with pm for ptrue ∈
{0.01,0.03,0.06,0.09} is depicted. One can see that pm decreases in every case and
the higher value of ptrue, the steeper incline of the line.
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 0
 20
 40
 60
 80
 100
pm
fitness function call number
ptrue=0.01
ptrue=0.03
ptrue=0.06
ptrue=0.09
Fig. 14.4 The subsequent values of pm for M = 100 and for ptrue ∈{0.01,0.03,0.06,0.09}
Then, the expected value Δ of the outcome for a single time interval between
subsequent changes in the environment equals:
E[Δ] =
M
∑
m=1
Δ(m)· pm
(14.30)
where Δ(m) is the value from the outcome series of data for the m-th time step.
14.4.2
Evaluation of the Algorithm’s Outcome with Respect to the
User Preferences
It is realistic to assume that thresholds for the subsequent random number genera-
tors in the array are not the same, that is, the user is ready to wait for the solution
for some time. However, the probability of his request changes in subsequent time
steps. Example threshold functions given in Table 14.2 are depicted in Figure 14.5.
For each of them, pm
true represents a different probability of the solution request by

416
K. Trojanowski
the user in the m-th step. In the graphs it is assumed that there are 50 time steps
between subsequent changes. This group of functions can be divided into two sub-
groups which represent: decreasing impatience of a user (Figure 14.5, the top row)
and increasing impatience ((Figure 14.5, the bottom row). Both types of impatience
are expressed by the threshold which changes linearly (the ﬁrst column), with ac-
celeration (the second column), or with delay (the third column).
 5
 10  15  20  25  30  35  40  45  50
a
 5
 10  15  20  25  30  35  40  45  50
b
 5
 10  15  20  25  30  35  40  45  50
c
 5
 10  15  20  25  30  35  40  45  50
d
 5
 10  15  20  25  30  35  40  45  50
e
 5
 10  15  20  25  30  35  40  45  50
f
Fig. 14.5 Graphs of of subsequent values of pm
true for six example threshold functions which
represent: decreasing (the top row) and increasing impatience of a user (the bottom row);
N = 50
Table 14.2 Example threshold functions which represent: decreasing ((a), (b) and (c)) and
increasing ((d), (e) and (f)) impatience of a user in Figure 14.5
(a)
fa(m) = 1−m/M
(b)
fb(m) =
3
1−m/M
(c)
fc(m) = (1/1000)m/M
(d)
fd(m) = m/M
(e)
fe(m) = exp((m/M)3)−exp(0)
exp(1)−exp(0)
(f)
f f (m) = ln( 3√
(m/M)+1)−ln(1)
ln(2)−ln(1)
For the case of varying threshold values the formula for the expected value Δ of
the algorithm outcome remains the same as for the case with equal thresholds of the
generators (Equation (14.30)), however, pm differs:
pm =
 
∏m−1
k=1 (1 −pk
true)

· pm
true
if m < M
1 −∑M−1
m=1

∏m−1
k=1 (1 −pk
true)

· pm
true if m = M
(14.31)
For each of the user impatience characteristics depicted in Figure 14.5 respective
graphs with subsequent values of pm for M = 50 and for M = 5000 are shown in
Figure 14.6. It is worth noting that for different values of M the graphs for the same
threshold functions differ signiﬁcantly. Particularly, for M = 5000 subsequent values
of pm obtained for threshold functions (a), (b) and (c) decrease so rapidly that the
ranges for X-axis in the graphs are trimmed just to ﬁrst 10 values in the series.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
417
1e-020
1e-015
1e-010
1e-005
 1
 5  10  15  20  25  30  35  40  45  50
a
subsequent values of pm for N=50 evaluated for respective characteristics given in Fig. 3
 1e-040
 1e-035
 1e-030
 1e-025
 1e-020
 1e-015
 1e-010
 1e-005
 1
 5  10  15  20  25  30  35  40  45  50
b
subsequent values of pm for N=50 evaluated for respective characteristics given in Fig. 3
 1e-009
 1e-008
 1e-007
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
c
subsequent values of pm for N=50 evaluated for respective characteristics given in Fig. 3
1e-020
1e-015
1e-010
1e-005
 1
 5  10  15  20  25  30  35  40  45  50
d
subsequent values of pm for N=50 evaluated for respective characteristics given in Fig. 3
 1e-007
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
e
subsequent values of pm for N=50 evaluated for respective characteristics given in Fig. 3
 1e-040
 1e-035
 1e-030
 1e-025
 1e-020
 1e-015
 1e-010
 1e-005
 1
 5  10  15  20  25  30  35  40  45  50
f
subsequent values of pm for N=50 evaluated for respective characteristics given in Fig. 3
1e-014
1e-012
1e-010
1e-008
1e-006
0.0001
 0.01
 1
 1
 2
 3
 4
 5
 6
 7
 8
 9  10
a
subsequent values of pm for N=5000 evaluated for respective characteristics given in Fig. 3
 1e-014
 1e-012
 1e-010
 1e-008
 1e-006
 0.0001
 0.01
 1
 1
 2
 3
 4
 5
 6
 7
 8
 9  10
b
subsequent values of pm for N=5000 evaluated for respective characteristics given in Fig. 3
 1e-014
 1e-012
 1e-010
 1e-008
 1e-006
 0.0001
 0.01
 1
 1
 2
 3
 4
 5
 6
 7
 8
 9  10
c
subsequent values of pm for N=5000 evaluated for respective characteristics given in Fig. 3
1e-014
1e-012
1e-010
1e-008
1e-006
0.0001
 0.01
 1
 0
 1000  2000  3000  4000  5000
d
subsequent values of pm for N=5000 evaluated for respective characteristics given in Fig. 3
 1e-014
 1e-012
 1e-010
 1e-008
 1e-006
 0.0001
 0.01
 1
 0
 1000  2000  3000  4000  5000
e
subsequent values of pm for N=5000 evaluated for respective characteristics given in Fig. 3
 1e-014
 1e-012
 1e-010
 1e-008
 1e-006
 0.0001
 0.01
 1
 0
 1000  2000  3000  4000  500
f
subsequent values of pm for N=5000 evaluated for respective characteristics given in Fig. 3
Fig. 14.6 Graphs with subsequent values of pm for N = 50 and for N = 5000 evaluated for
respective characteristics given in Figure 14.5
The graphs in Figure 14.6 were generated for pm
true varying within the range [0,1].
One can see that in every case there are a few highest values of pm which are at
least several orders of magnitude higher than the remaining values of pm present
in the sequence. This makes the threshold functions rather useless due to the fact
that the expected value of the algorithm outcome E[Δ] evaluated according to Equa-
tion (14.30) shall be dominated by few outcome values in the series, that is, just the
ones which are multiplied by the few highest values of pm. Besides, one can observe
in the graphs that for longer series the fraction of highest values of pm decreases,
that is, the peaks in the graphs are broader for M = 50 than for M = 500.
The graph of pm generated for threshold function (e) is the exception. In this case
quite a large fraction of values in the series (for M = 50 this is about a half) belongs
to the group of the largest and they differ from each other by no more than one order
of magnitude. The threshold function (e) has the following formula:
fe(m) = exp((m/M)q)−exp(0)
exp(1)−exp(0)
(14.32)

418
K. Trojanowski
 5
 10  15  20  25  30  35  40  45  50
q=1
subsequent values of ptrue for the threshold function fe(m) for N=50 for different values of q
 5
 10  15  20  25  30  35  40  45  50
q=2
subsequent values of ptrue for the threshold function fe(m) for N=50 for different values of q
 5
 10  15  20  25  30  35  40  45  50
q=3
subsequent values of ptrue for the threshold function fe(m) for N=50 for different values of q
 5
 10  15  20  25  30  35  40  45  50
q=4
subsequent values of ptrue for the threshold function fe(m) for N=50 for different values of q
 5
 10  15  20  25  30  35  40  45  50
q=5
subsequent values of ptrue for the threshold function fe(m) for N=50 for different values of q
 5
 10  15  20  25  30  35  40  45  50
q=6
subsequent values of ptrue for the threshold function fe(m) for N=50 for different values of q
1e-008
1e-007
1e-006
1e-005
0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
q=1
subsequent values of pm evaluated for the threshold function fe(m) and N=50 for different values of q
 1e-008
 1e-007
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
q=2
subsequent values of pm evaluated for the threshold function fe(m) and N=50 for different values of q
 1e-008
 1e-007
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
q=3
subsequent values of pm evaluated for the threshold function fe(m) and N=50 for different values of q
1e-008
1e-007
1e-006
1e-005
0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
q=4
subsequent values of pm evaluated for the threshold function fe(m) and N=50 for different values of q
 1e-008
 1e-007
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
q=5
subsequent values of pm evaluated for the threshold function fe(m) and N=50 for different values of q
 1e-008
 1e-007
 1e-006
 1e-005
 0.0001
 0.001
 0.01
 0.1
 1
 5  10  15  20  25  30  35  40  45  50
q=6
subsequent values of pm evaluated for the threshold function fe(m) and N=50 for different values of q
Fig. 14.7 Graphs of of subsequent values of pmtrue for the threshold function fe(m) (Equa-
tion 14.32) and respective graphs of subsequent values of pm for m ∈[1,50] and for q ∈[1,6]
where q is the parameter which controls the strength of acceleration. In the graph
presented in Figure 14.5 the value of q equals 3. Graphs for threshold functions
obtained for fe(m) where q ∈[1,6] and m ∈[1,50] as well as respective graphs with
the subsequent values of pm are presented in Figure 14.7.
The graphs in Figure 14.7 show that the parameter q controls the range of out-
come values which contribute the most to the expected value of the algorithm
outcome E[Δ]. In Figure 14.7 for q = 1 this is the range m ∈[1,21], for q = 2,
m ∈[7,33], for q = 3, m ∈[13,39], for q = 4, m ∈[19,43], for q = 5, m ∈[23,46],
and for q = 6, m ∈[26,47]. The ranges move to the right for subsequent values of q,
in accordance with differences between graphs of threshold functions obtained for
subsequent values of q.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
419
14.4.3
Application in Practice
An example application of the theory presented in previous subsections is given
below. Lets have a dataset which represent an optimization algorithm outcome gen-
erated for the time of ﬁrst three changes in the environment. The values in the series
represent the algorithm output generated after every subsequent evaluation of the
ﬁtness function, thus, in this case the single ﬁtness function call represents a sin-
gle time step. There were 5000 time steps between changes and three subsequent
changes occurred, thus, the entire series consists of 15000 numbers. At every time
step the user is allowed to stop the optimization process and request the output value.
For the given dataset evaluations were performed according to ﬁve versions of the
user characteristic: fe(m) where q ∈{1,3,6,9,12}. The graph of the data as well as
the graphs with subsequent results of multiplication pm by respective values from
the series are depicted in Figure 14.8.
 0.1
 1
 10
 100
 1000
10000
 0
 2000
 4000
 6000
 8000
 10000
 12000
 14000
fitness function call number
Output values for the first three changes in the fitness landscape
1e-014
1e-012
1e-010
1e-008
1e-006
0.0001
 0.01
 1
 0
 2000
 4000
 6000
 8000
 10000
 12000
 14000
fitness function call number
Results of multiplication pm by output values for the first three changes in the fitness landscape
q=1
q=3
q=6
q=9
q=12
Fig. 14.8 Graphs with sample output data (top graph) and with subsequent results of multi-
plication pm by respective values from the series (bottom graph)

420
K. Trojanowski
The average values for each of the three subseries equal: 124.79 for the ﬁrst
shape of the landscape, 18.76 for the second shape, and 19.88 for the third shape.
The least found values equal: 0.633 for the ﬁrst shape, 0.153 for the second shape,
and 0.174 for the third shape. Values of expected value of output value for the three
subseries are presented in Table 14.3. One can see that depending on the value of q
the expected value of output value decreases as q grows.
Table 14.3 Expected value for 3 subseries of output dataset evaluated for q ∈{1,3,6,9,12}
shape nr
q = 1
q = 3
q = 6
q = 9
q = 12
0
92.8817
19.0969
7.33602
3.79088
2.47320
1
11.1796
1.1904
0.41183
0.34034
0.31844
2
8.0305
1.1970
0.59881
0.38653
0.32193
14.5
Summary
Methods of estimation of the heuristic algorithm performance are discussed in the
chapter above. A number of existing methods of performance measurements is pre-
sented. Among them one can mention the value of the current best found solution
or its error, mean values of the population attributes (like, for example, mean val-
ues of the worst solutions in subsequent iterations), or the ability to quickly recover
the population quality after a change in the environment. The chapter also contains
a review of existing dynamic benchmark generators. The generalized model E of
the dynamic environment based on this review is also proposed. The model E is
a quadruple: (1) the search space, (2) a set of component functions, (3) a set of
transformation mechanisms and (4) a set of deﬁnitions of the mechanism dynamics.
The model covers all existing benchmarks and allows for building completely
new ones. Besides, it is also important to take into account probability of the search
process break caused by the user request for the result. The request can appear much
earlier than just before the next change.
The main conclusion arising from the review of the performance measures con-
cerns the meaning of the phrase “the algorithm performance” which varies depend-
ing on two issues: the selected measure and the nondeterministic features of the
environment as well as the nondeterministic preferences of a user. The comment on
the ﬁrst issue is simple: every measure of the algorithm performance estimates a
different feature of the algorithm activity during the process of search. The second
issue concerns the presence of uncertainty which occurs when we do not know how
much time we have to the next change in the environment and how much time the
user is going to wait for the recovery of the result after the last change. Particu-
larly in the latter case the expected value of the algorithm outcome should rather be
applied for comparisons of the performance as it has been proposed in Section 14.4.

14
Dynamic Real–Valued Landscapes and the Optimization Performance
421
References
[1] Alba, E., Sarasola, B.: Measuring ﬁtness degradation in dynamic optimization prob-
lems. In: Di Chio, C., et al. (eds.) EvoApplicatons 2010, Part I. LNCS, vol. 6024, pp.
572–581. Springer, Heidelberg (2010)
[2] Ayvaz, D., Topcuoglu, H.R., G¨urgen, F.S.: Performance evaluation of evolutionary
heuristics in dynamic environments. Appl. Intell. 37(1), 130–144 (2012)
[3] B¨ack, T.: On the behaviour of evolutionary algorithms in dynamic environments. In:
Proc. of the Fifth IEEE Conf. on Evolutionary Computation, pp. 446–451. IEEE Press
(1998)
[4] B¨ack, T., Sch¨utz, M.: Intelligent mutation rate control in canonical genetic algorithm.
In: Michalewicz, M., Ra´s, Z.W. (eds.) ISMIS 1996. LNCS, vol. 1079, pp. 158–167.
Springer, Heidelberg (1996)
[5] Branke, J.: Memory enhanced evolutionary algorithm for changing optimization prob-
lems. In: Proc. of the Congr. on Evolutionary Computation, vol. 3, pp. 1875–1882. IEEE
Press (1999)
[6] Cede˜no, W., Vemuri, V.R.: On the use of niching for dynamic landscapes. In: Proc.
of the 1997 IEEE Int. Conf. on Evolutionary Computation, pp. 361–366. IEEE Press
(1997)
[7] Cobb, H.G., Grefenstette, J.F.: Genetic algorithms for tracking changing environments.
In: Proc. of the Fifth Int. Conf. on Genetic Algorithms (ICGA 1993), pp. 523–530.
Morgan Kaufmann Publishers (1993)
[8] Dasgupta, D., McGregor, D.R.: Nonstationary function optimization using the struc-
tured genetic algorithm. In: Parallel Problem Solving from Nature 2, PPSN-II, pp. 147–
156. Elsevier (1992)
[9] Gallagher, M., Yuan, B.: A general-purpose tunable landscape generator. IEEE Trans.
Evol. Comput. 10(5), 590–603 (2006)
[10] Goldberg, D.E., Smith, R.E.: Non-stationary function optimisation using genetic algo-
rithms with dominance and diploidy. In: Proc of the 2nd Int. Conf. on Genetic Algo-
rithms and Their Applications, pp. 59–68. Lawrence Erlbaum Associates (1987)
[11] Grefenstette, J.J.: Genetic algorithms for changing environments. In: Parallel Problem
Solving from Nature 2, PPSN-II, pp. 139–146. Elsevier (1992)
[12] Jin, Y., Branke, J.: Evolutionary algorithms in uncertain environments – a survey. IEEE
Trans. Evol. Comput. 9(3), 303–317 (2005)
[13] Jin, Y., Sendhoff, B.: Constructing dynamic optimization test problems using the multi-
objective optimization concept. In: Raidl, G.R., et al. (eds.) EvoWorkshops 2004.
LNCS, vol. 3005, pp. 525–536. Springer, Heidelberg (2004)
[14] Jones, T.: Evolutionary algorithms, ﬁtness landscapes and search. Ph.D. thesis, Univer-
sity of New Mexico (1995)
[15] Li, C., Yang, S.: A generalized approach to construct benchmark problems for dy-
namic optimization. In: Li, X., et al. (eds.) SEAL 2008. LNCS, vol. 5361, pp. 391–400.
Springer, Heidelberg (2008)
[16] Mori, N., Kita, H., Nishikawa, Y.: Adaptation to a changing environment by means of
the thermodynamical genetic algorithm. In: Ebeling, W., Rechenberg, I., Voigt, H.-M.,
Schwefel, H.-P. (eds.) PPSN 1996. LNCS, vol. 1141, pp. 513–522. Springer, Heidelberg
(1996)

422
K. Trojanowski
[17] Mori, N., Kita, H., Nishikawa, Y.: Adaptation to a changing environment by means
of the feedback thermodynamical genetic algorithm. In: Eiben, A.E., B¨ack, T., Schoe-
nauer, M., Schwefel, H.-P. (eds.) PPSN 1998. LNCS, vol. 1498, pp. 149–158. Springer,
Heidelberg (1998)
[18] Morrison, R.W.: Performance measurement in dynamic environments. In: GECCO
2003: Proc. of the Bird of a Feather Workshops, Genetic and Evolutionary Computation
Conf., pp. 99–102. AAAI (2003)
[19] Morrison, R.W., De Jong, K.A.: A test problem generator for non-stationary environ-
ments. In: Proc. Congress on Evolutionary Computation, pp. 1859–1866. IEEE Press
(1999)
[20] Ng, K.P., Wong, K.C.: A new diploid scheme and dominance change mechanism for
non-stationary function optimization. In: Proc. of the Sixth Int. Conf. on Genetic Algo-
rithms, pp. 159–166. Morgan Kaufmann, San Francisco (1995)
[21] Richter, H.: Change detection in dynamic ﬁtness landscapes: An immunological ap-
proach. In: World Congress on Nature and Biologically Inspired Computing, pp. 719–
724. IEEE (2009)
[22] Richter, H.: Detecting change in dynamic ﬁtness landscapes. In: IEEE Congress on
Evolutionary Computation, pp. 1613–1620. IEEE (2009)
[23] Richter, H.: Evolutionary optimization and dynamic ﬁtness landscapes; from reaction–
diffusion systems to chaotic CML. In: Zelinka, I., Celikovsky, S., Richter, H., Chen,
G. (eds.) Evolutionary Algorithms and Chaotic Systems. SCI, vol. 267, pp. 409–446.
Springer, Heidelberg (2010)
[24] Richter, H., Dietel, F.: Change detection in dynamic ﬁtness landscapes with time-
dependent constraints. In: World Congress on Nature and Biologically Inspired Com-
puting, pp. 580–585. IEEE (2010)
[25] Salomon, R.: Reevaluating genetic algorithm performance under coordinate rotation of
benchmark functions. BioSystems 39(3), 263–278 (1996)
[26] Salomon, R., Eggenberger, P.: Adaptation on the evolutionary time scale: A working
hypothesis and basic experiments. In: Hao, J.-K., Lutton, E., Ronald, E., Schoenauer,
M., Snyers, D. (eds.) AE 1997. LNCS, vol. 1363, pp. 251–262. Springer, Heidelberg
(1998)
[27] Tin´os, R., Yang, S.: Continuous dynamic problem generators for evolutionary algo-
rithms. In: The Congress on Evolutionary Computation, pp. 236–243. IEEE (2007)
[28] Trojanowski, K., Michalewicz, Z.: Evolutionary approach to non-stationary optimisa-
tion tasks. In: Ra´s, Z.W., Skowron, A. (eds.) ISMIS 1999. LNCS, vol. 1609, Springer,
Heidelberg (1999)
[29] Trojanowski, K., Michalewicz, Z.: Searching for optima in non-stationary environ-
ments. In: Proc. of the Congress on Evolutionary Computation, vol. 3, pp. 1843–1850.
IEEE Press (1999)
[30] Trojanowski, K., Obuchowicz, A.: Measures for non-stationary optimization tasks. In:
5th ICANNGA: Artiﬁcial Neural Nets and Genetic Algorithms, pp. 244–247. Springer
(2001)
[31] Trojanowski, K., Raciborski, M., Kaczy´nski, P.: Self-adaptive differential evolution
with hybrid rules of perturbation for dynamic optimization. Journal of Telecommunica-
tions and Information Technology 4, 18–28 (2011)
[32] Vavak, F., Fogarty, T.C.: A comparative study of steady state and generational genetic al-
gorithms for use in nonstationary environments. In: Fogarty, T.C. (ed.) AISB-WS 1996.
LNCS, vol. 1143, pp. 297–304. Springer, Heidelberg (1996)

14
Dynamic Real–Valued Landscapes and the Optimization Performance
423
[33] Vavak, F., Fogarty, T.C.: Comparison of steady state and generational genetic algorithms
for use in nonstationary environments. In: Int. Conf. on Evolutionary Computation, pp.
192–195. IEEE Press (1996)
[34] Weicker, K.: Performance measures for dynamic environments. In: Guerv´os, J.J.M.,
Adamidis, P.A., Beyer, H.-G., Fern´andez-Villaca˜nas, J.-L., Schwefel, H.-P. (eds.) PPSN
2002. LNCS, vol. 2439, pp. 64–76. Springer, Heidelberg (2002)
[35] Weicker, K., Weicker, N.: On evolution strategy optimization in dynamic environments.
In: Proc. of the Congress on Evolutionary Computation, vol. 3, pp. 2039–2046. IEEE
Press (1999)
[36] Yang, S.: Non-stationary problem optimization using the primal-dual genetic algorithm.
In: The Congress on Evolutionary Computation, vol. 3, pp. 2246–2253. IEEE (2003)
[37] Yang, S., Yao, X.: Experimental study on population-based incremental learning algo-
rithms for dynamic optimization problems. Soft Comput. 9(11), 815–834 (2005)
[38] Yuan, B., Gallagher, M.: On building a principled framework for evaluating and test-
ing evolutionary algorithms: a continuous landscape generator. In: IEEE Congress on
Evolutionary Computation, pp. 451–458. IEEE (2003)

Part IV
Visualization and Characterization

Chapter 15
Fractal Analysis of Fitness Landscapes
Ivan Zelinka, Oldrich Zmeskal, and Petr Saloun
Abstract. Complex optimization problems may have ﬁtness landscapes with frac-
tal characteristics. This chapter reviews landscapes obtained from basic artiﬁcial
test functions as well as cost functions of real application problems which have the
property to be fractal. We will discuss the description, structure and complexity of
these fractal ﬁtness landscapes. A major topic of this chapter is to use elements from
fractal geometry to measure attributes of fractal landscapes. Also, structural as well
as functional properties of the landscape are discussed. The examples used in this
chapter are two–dimensional, however it is possible to extend the proposed analysis
to n dimensions.
15.1
Cost Function Landscapes
In engineering design we are generally facing complex optimization problems
whose solutions can be described as a space of possible solutions that can be vi-
sualized as a surface. This surface can be interpreted as a ﬁtness landscape. Fre-
quently, irregularities as well as high levels of complexity can be observed in such
ﬁtness landscapes. For example, for functions with a high degree of nonlinearity,
various types of complex geometrical structures can occur, see for instance Figure
15.1 (a), (c) and (e). A further level of complex geometrical structure is obtained
if the landscape’s surface has a fractal characteristics. Fractal means that the Haus-
dorff dimension of the geometrical object studied is not an integer. A fractal ﬁtness
Ivan Zelinka · Petr Saloun
VSB-TUO, Faculty of Electrical Engineering and Computer Science, 17. listopadu 15,
708 33 Ostrava-Poruba, Czech Republic
e-mail: {ivan.zelinka,petr.saloun}@vsb.cz
Oldrich Zmeskal
Faculty of Chemistry, Brno University of Technology, Purkyˇnova 118,
612 00 Brno, Czech Republic
e-mail: zmeskal@fch.vutbr.cz
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
427
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_15, c⃝Springer-Verlag Berlin Heidelberg 2014

428
I. Zelinka, O. Zmeskal, and P. Saloun
landscape, therefore, is a landscape whose “ﬁtness surface” has a real–valued di-
mension. In particular, if we consider two–dimensional projections of the “ﬁtness
surface”, its dimension must be larger than two to qualify as fractal.
While ﬁtness landscapes have been the topic of intense research, see for in-
stance [5, 18, 34] for some recent results, fractal landscapes received far less atten-
tion. The ﬁrst to notice that ﬁtness landscape may be fractal were Weinberger and
Stadler [38]. These authors discuss ﬁtness landscapes based on biological data, i.e.
on biological and biochemical measurements, that can be understood as a ﬁtness of
a particular genome. They further showed that these data can be treated as a ﬁtness
landscape and that there is a connection between the landscape’s correlation and its
self–similarity (fractalness). Fractal ﬁtness landscapes have also been observed in
application studies, for instance in evolutionary robotics [14] or dynamic optimiza-
tion [27]. A more technically oriented research can be found in Ribeiro et al. [25]. In
this paper a novel numerical procedure that can be easily implemented is considered
to evaluate the complexity of two or higher-dimensional patterns including fractal
landscapes artiﬁcially generated.
In this chapter, we will approach the topic of fractal ﬁtness landscapes from a
more general perspective. We will on the one hand show how fractal landscapes can
be artiﬁcially constructed by applying standard test functions (also called bench-
marks) used in evolutionary computation which are made fractal by combining
them with functions with known self–similarity, for instance with a version of the
Weierstrass–Mandelbrot function. On the other hand, we will consider cost func-
tions that appear in experimental chaos control and synchronization. These cost
functions give raise to cost function landscapes which also show fractal charac-
teristics for selected experimental parameters. Both types of fractal landscapes, ar-
tiﬁcially constructed and experimentally obtained, are further investigated using a
fractal image analysis.
15.2
Selected Test Functions and Their Fitness Landscapes
The landscapes used in this chapter are taken from widely–known artiﬁcial test
functions and are listed in Table 15.1. For a graphical description of some of these
functions, see Figure 15.1. Also, pseudo-fractal functions (based on the Weierstrass–
Mandelbrot function) whose complexity can vary according to suitable parameter
settings, are used (see Figures 15.9 and 15.10). Finally, we study selected cost func-
tion landscapes from experiments on deterministic chaos synchronization and con-
trol (see [29, 40], and also Figures 15.6 and 15.7).
The artiﬁcial test functions have been selected from the pool of commonly used
benchmarks. The test functions which were selected for our experiments range from
simple to very complex and irregular to demonstrate the performance and capability
of fractal analysis.
Even more complex and closer to real world problems are ﬁtness landscapes
generated by our experiments on deterministic chaos control (for classical chaos
control, see [31, 32, 40] and for CML system control, see [39]) and synchronization

15
Fractal Analysis of Fitness Landscapes
429
(a)
(b)
20
10
0
10
20
20
10
0
10
20
0.0
0.5
1.0
(c)
(d)
(e)
(f)
Fig. 15.1 3D ﬁtness landscapes (a) (c) and (e) and their 2D projection (b), (d) and (f) as used
for fractal analysis (by software HarFA) [43]: (a) Ackley function, (c) Pathological function,
(e) Rana function

430
I. Zelinka, O. Zmeskal, and P. Saloun
Table 15.1 Test functions used for constructing fractal ﬁtness landscapes
#
Name
f (x) =
1
1st De Jong’s function
n
∑
i=1
x2
i
2
Rastrigin’s function
n
∑
i=1
x2
i −10cos(2πxi)
3
Schwefel’s function
n
∑
i=1
−xi sin

|xi|

4
Griewangk’s function
1+
n
∑
i=1
x2
i
4000 −
n
∏
i=1
cos( xi
√
i)
5 Stretched V sine wave function
n−1
∑
i=1

4
(x2
i +x2
i+1)sin(50 10
(x2
i +x2
i+1))2 +1

6
Ackley’s function
n−1
∑
i=1
⎛
⎝20+e−
20
e
0.2

(x2i +x2
i+1)
2
−e0.5(cos(2πxi)+cos(2πxi+1))
⎞
⎠
7
Egg Holder
n−1
∑
i=1

−xi sin(

|xi −xi+1 −47|)−
(xi+1 +47)sin(
xi+1 +47+ xi
2
)

8
Rana’s function
n−1
∑
i=1

 xi sin(

|xi+1 +1−xi|)cos(

|xi+1 +1+xi|)+
(xi+1 +1)cos(

|xi+1 +1−xi|)sin(

|xi+1 +1+xi|)

9
Pathological test function
n−1
∑
i=1

0.5+
sin(√
100x2
i −x2
i+1)2−0.5
(1+0.001(x2
i −2xixi+1+x2
i+1)2)

(see [39]: Chapter 12). Both kinds of problems (i.e. control and synchronization) are
deﬁned as optimization on predeﬁned cost functions. In Zelinka et al. [39] several
case studies of deterministic chaos control and synchronization are described.
In general, synchronization is a dynamical process during which one system (syn-
chronized, slaved) is remote from but connected to another (synchronizing, master)
so that the synchronized system in a certain manner follows the behavior of the
master system (see Figure 15.2). Synchronization can be divided into the following
classes [7, 21, 29]:
• Identical synchronization. This synchronization may occur when two iden-
tical chaotic oscillators are mutually coupled (unidirectional or bidirectional
coupling), or when one of them drives the other, which is the case of a nu-
merical study reported in this chapter (the Lorenz - Lorenz synchronization
as deﬁned in Equation (15.1)). Basically, if {x1,y1,z1} is the set of dynamical
state variables of the master system and {x2,y2,z2} is the set of the variables
of the slave system, then both systems are synchronized if, under certain initial
conditions and t →∞, it is true that |x1 −x2| →0.
• Generalized synchronization. This differs from the previous case by the fact
that the coupled chaotic oscillators are different and that the dynamical state of
one of the oscillators is completely determined by the state of the other. This
is the case of another numerical study in this chapter (the R¨ossler - Lorenz
synchronization given in Equation (15.3) [39]).
• Phase synchronization. This is another case of synchronization which occurs
when the coupled oscillators are not totally identical and the amplitudes of the

15
Fractal Analysis of Fitness Landscapes
431
oscillator remain unsynchronized, while only the oscillator phases evolve in
synchrony. There is a geometrical interpretation of this case of synchroniza-
tion. It is possible to ﬁnd a plane in the phase space on which the projection of
the trajectories of the oscillator follows a rotation around a well-deﬁned cen-
ter. The phase is deﬁned by the angle ϕ(t), described by the segment which
is joining the center of the rotation and the projection of the trajectory point
onto the plane.
• Anticipated and lag synchronization. Let us assume that we have a synchro-
nizing system with state variables {x1,y1,z1} and a synchronized system with
state variables {x2,y2,z2}. Anticipated and lag synchronization occur if it is
true that x1(t) = x1(t +τ). This relation, in fact, says, that the dynamics of one
of the systems follows, or anticipates, the dynamics of the other and that this
dynamics is described by delay differential equations.
• Amplitude envelope synchronization. This is a kind of synchronization
which may appear between two weakly coupled chaotic oscillators. Com-
pared with another cases of synchronization, there is no correlation between
phases or amplitudes. One can observe a periodic envelope that has the same
frequency in the two systems. The magnitude of that envelope has the same
order than the difference between the average frequencies of the oscillations
of both systems. It is important to note that phase synchronization can develop
from amplitude envelope synchronization if the strength of the coupling force
between two amplitude envelope synchronized oscillators increases in time.
A rich amount of literature about synchronization exist, see for example [7, 21, 29].
Other research works are on synchronization based on time series analysis [3, 35]
and robustness of synchronized systems [28].
X1
y1
z1
X2
y2
z2
Drive / Lorenz
Response / Lorenz
Fig. 15.2 The scheme of Lorenz - Lorenz synchronization
As an example of the numerical experiments we can discuss the so–called Lorenz
- Lorenz system for synchronization:

432
I. Zelinka, O. Zmeskal, and P. Saloun
Lorenz−Lorenz synchronization
Lorenz system (master) :
˙x1(t) = −a(x1(t)−y1(t))
˙y1(t) = −x1(t)z1(t)+ bx1(t)−y1(t)
˙z1(t) = x1(t)y1(t)−cz1(t)
Lorenz system (slave) :
˙x2(t) = −a2(x2(t)−y2(t))+ d (x1(t)−x2(t))
˙y2(t) = −x2(t)z2(t)+ bx2(t)−y1(t)
˙z2(t) = x2(t)y2(t)−z2(t)
a = 10, b = 28, c = 2.66.
(15.1)
The synchronization has been done by coupling of the variables x1(t) and x2(t) via
the parameter d [39]. The difference between the variables has been calculated and
multiplied by the parameter d, see (d (x1(t)−x2(t))) in Equation (15.1). In fact, a
search for optimal parameter settings can be done depending on two parameters; i.e.
d and a2 in Equation (15.1).
The cost function of the Lorenz - Lorenz (LL) synchronization is
CVLL(a2,d) =
100

0
|x1(t)−x2(t)|+ |y1(t)−y2(t)|+ |z1(t)−z2(t)|dt.
(15.2)
A second example is synchronization between different systems. We consider the
case of a R¨ossler system connected with a Lorenz system
R¨ossler−Lorenz synchronization
R¨ossler system (master) :
˙x1(t) = −y1(t)−z1(t)
˙y1(t) = −x1(t)−y1(t)
5
˙z1(t) = (x1(t)−5.7)z1(t)+ 0.2
Lorenz system (slave) :
˙x2(t) = −a(x2(t)−y2(t))
˙y2(t) = −x2(t)z2(t)+ bx2(t)+ c(y1(t)−y2(t))
˙z2(t) = x2(t)y2(t)−z2(t)
c = 69.737
(15.3)
with a cost function of the R¨ossler - Lorenz (RL) synchronization which depends
on the parameters a and b in Equation (15.3):
CVRL(a,b) =
200

0
|(y1(t)−y2(t)|dt.
(15.4)

15
Fractal Analysis of Fitness Landscapes
433
(a)
(b)
(c)
(d)
Fig. 15.3 Fractal landscape of the synchronization cost function. (a) Cost function (15.2)
generated by Lorenz - Lorenz synchronization. The cost function value depend on the cou-
pling parameter d and the parameter a2. The value of each point on Z (labeled CV) axis is
in fact the gray difference from Figure 15.4. (b) Cost function (15.4) generated by R¨ossler -
Lorenz synchronization depending on the parameters a and b. (c) 2D projection of the cost
function in (a). (d) 2D projection of the cost function in (b).
The complexity and fractalness of the cost function landscape CVLL (see also
Equation (15.2)), depending on both parameters d and a2 is depicted in Figure 15.3a.
All parameters were varied around nominal values, as referred to in the literature. A
visual inspection of the landscape reveals a highly irregular surface which suggest
a fractal characteristic. In the fractal landscape a linear-like trend is also visible.
Thanks to this trend it can be seen that the minimum can be expected at the position
{d, a2} = {8,10}.
The cost function in Equation (15.2) has been calculated according to the distance
between the desired synchronizing system state and the actual synchronized system
state (see Figure 15.4). The cost function value is, in fact, the absolute value of
the summarization of the gray areas between the synchronizing and synchronized
system output (time series) as shown in Figure 15.4. The difference between the

434
I. Zelinka, O. Zmeskal, and P. Saloun
0
5
10
15
20
15
10
5
0
5
10
15
20
time s
x1t, x2t
Fig. 15.4 Description of the cost function calculation in Equation (15.2). For all three vari-
ables x1(t), y1(t) and z1(t) we have calculated the difference between the behavior of the
synchronizing and synchronized system (light gray area).
50
55
60
65
70
0.4
0.2
0.0
0.2
0.4
time s
x1t  x2t
(a)
(b)
Fig. 15.5 Cost function in Equation (15.4). (a) Total time series (b) Ampliﬁcation of the time
interval [50s,70s].
worst and the best behavior of x1 and x2 for the cost function in Equation (15.4)
is depicted in Figure 15.5. The biggest impact on the cost value comes from the
interval [0,7s] before the systems are well synchronized. Another anomaly is at the
position 92s, which is just a sharp peak with little impact on the cost value. An
ampliﬁcation of the middle part is depicted in Figure 15.5b.
The minimal value of the cost function guarantees the best solution. The aim of
all simulations is to ﬁnd the best solution, i.e. a solution that returns a cost value as
small as possible. The difference between an identical synchronization as accounted

15
Fractal Analysis of Fitness Landscapes
435
in Equation (15.2) and a general synchronization as in Equation (15.4) is in the
number of state variables used. In the case of Lorenz - Lorenz (Equation (15.2) it is
logical to expect that all three state variables will be synchronized perfectly, while
in the case of R¨ossler - Lorenz, we expect that only the synchronized variable, in
this case y2(t), will be synchronized in an acceptable manner. For the R¨ossler -
Lorenz system synchronization described by Equation (15.3) and the cost function
in Equation (15.4) we obtain a ﬁtness landscape as shown in Figure 15.3b. Again,
the lowest point in the ﬁtness landscape represent the best synchronization.
The numerical examples of chaos control are deﬁned in a similar way, see [29,
31, 33, 39]. The ﬁrst example is controlling of the Henon system (Equation (15.5))
xn+1 = a −x2
n + byn
yn+1 = xn
(15.5)
by a method called ETDAS (Equation (15.6)), see for example [22, 23, 33]. The
ETDAS method calculates
xn+1 = a −x2
n + byn + Fn
Fn = K((1 −R)Sn−m −xn)
Sn = xn + RSn−m
a = 6/5, b = 3/10, R = 0.32.
−Fmax ≤Fn ≤Fmax.
(15.6)
The cost function used to calculate the ﬁtness landscape is given by
CVHenon(K,Fmax) =
n
∑
i=0
|TSi −ASi|.
TSi −target state (expected state o f the system)
ASi −actual state given by the evolutionary synthesized controller
(15.7)
Two cases of control have been calculated: stabilization of chaotic dynamics at a
period-1 orbit (i.e. stabilized state), see Figure 15.6a for the resulting cost function
landscape and stabilization of chaotic dynamics at a period-6 orbit (Figure 15.6b).
In Equation (15.6), K and R are adjustable constants, Fn is the perturbation factor,
Sn−m is given by a delay equation utilizing previous states of the system with m the
period that is stabilized. The perturbation Fn may have an arbitrarily large value,
which can cause divergence of the system outside the interval Fn ∈[0,0.5] for the
Henon map. Therefore, Fn should have a value between [−Fmax, Fmax] and setting
the value of Fmax is hence another parameter to ﬁnd for the chaos control scheme in
Equation (15.6).
A more complex and harder problem of control is CML (coupled map lattices)
control, see Equation (15.8) and [29]. A typical example is a CML based on the
logistic equation, see Equation (15.9) and [4, 11, 19], which is used to simulate
the behavior of the system. The CML consists of n mutually joined cells, where
the neighboring cells i, i−1 and i+ 1 are linked via a nonlinear coupling, denoted

436
I. Zelinka, O. Zmeskal, and P. Saloun
(a)
(b)
(c)
(d)
Fig. 15.6 Cost function landscape in Equation (15.7): (a) period-1 orbit stabilization. (b)
period-6 orbit stabilization. (c) 2D projection of the cost function in (a). (d) 2D projection of
the cost function in (b).
with ε ∈[0,1]. With the discrete time variable k we get the temporal evolution of
the CML as follows:
xk+1(i) = (1 −ε)f(xk(i))+ ε
2(f(xk(i−1))+ f(xk(i+ 1)))
i = 0,1,...,n.
(15.8)
The function f(xn(i)) is an “arbitrary” discrete system. In this case study we control
mutually coupled n chaotic logistic equations,
f(xn(i)) = Axn(i)(1 −xn(i)),
(15.9)

15
Fractal Analysis of Fitness Landscapes
437
and the aim is to stabilize the whole system on predeﬁned pattern (see [29] for
classical and [39] for evolutionary control). The cost function returning the cost
value is given by
CVCML = p1 +

p2 +
30
∑
i=1
b
∑
j=a
TiS j −CMLi,j

2
TiS j −target state of CML
CMLi,j −actual state of controlled CML
p1 −number of actually selected pinning sites
p2 −100, heuristically set weight constant
{a,b} = {80,100} for T1S1 and {a,b} = {580,600} for T1S2
(15.10)
The meaning of used terms is: p1 is the number of pining sites (PS), which is the
value of control inputs (number of n possible control inputs). The term TxSy is a
description of whether the expected stabilized state is ﬂattened (no periodicity), i.e.
x = y = 1, or has periodicity in time, i.e. x > 1, or space, i.e. y > 1. The state of
the controlled CML represents the stabilized pattern after the transient state that
can have various shapes. The cost value CVCML is calculated so that in the given
range of CML iterations we compare the expected CML states and the actually
stabilized CML states under the given control. The differences were summarized
and the lowest difference has been searched for. The ﬁtness landscape, describing
various control qualities, is shown in Figure 15.7. The coordinates of the lowest
point at this ﬁtness landscape is the best control setting.
(a)
(b)
Fig. 15.7 Fitness landscape from CML chaos control problem described in Equation 15.10.
(a) 3D ﬁtness landscape. (b) 2D projection.

438
I. Zelinka, O. Zmeskal, and P. Saloun
15.3
Harmonic and Fractal Image Analysis
HarFA1 is a software package that was developed to perform harmonic and wavelet
analysis of digitized images and to calculate their fractal parameters. Harmonic anal-
ysis means 1D or 2D Fourier transform of image information. The harmonic analy-
sis is provided by using a fast Cooley - Tukey discrete Fourier transform algorithm
(DFFT). This algorithm works if the length of the dataset is N (or N ×N in 2D case),
where N is an integer power of 2. Therefore the size of the analyzed area can be set
to 32, 64, 128, 256, 512, 1024, ... pixels. The dataset can be ﬁlled by values of inten-
sity (shades of gray), hue, red, green or blue components of the color information.
The Fourier transform is presented as magnitude transfer function (MTF), phase
transfer function (PTF), and real and imaginary part of the Fourier spectrum. The
harmonic analysis can be performed either in 1D space or in 2D space. The results
can be viewed as 1D, 2D (transformed images) and 3D (2D FFT only) graphs. 1D
graph data can be stored as text ﬁles. Transformed images can be saved as bitmaps.
A new method for calculating fractal dimensions and fractal measures is based on
this harmonic analysis.
Wavelet analysis means a 1D or 2D Haar transform of the image information.
The wavelet analysis is provided by using fast algorithmic calculations. This algo-
rithm works if the length of the dataset is N (or N × N in 2D case), where N is an
integer power of 2. Therefore, the size of the analyzed area can be set to 32, 64, 128,
256, 512, 1024, ... pixels. The dataset can be ﬁlled by values of intensity (shades of
gray), hue, red, green or blue components of color information. The wavelet analy-
sis can be performed either in 1D space or in 2D space. The results can be viewed
as 1D, 2D (transformed images) and 3D (2D HT only) graphs. 1D graph data can
be stored as text ﬁles. A new method for calculating fractal dimensions and frac-
tal measures is based on this wavelet analysis. For special cases (thresholded ﬁgure
with area size equal to 1, 2, 4, 8, 16, 32, 64, 128, 256, ...), the calculated fractal
dimension is equivalent to the classical box-counting method. The fractal analysis
is a means to determine the fractal dimension and the fractal measure of an image.
The fractal dimension and the fractal measure are obtained by using a variation of
the box counting method. By this technique we can examine black and white fractal
structures which come into existence during a process called thresholding. Thresh-
olding transforms colored image objects into black and white ones. There are many
criteria which can be changed to derive many different fractal structures from one
image (e.g. one can alter the minimal value of hue to be thresholded as black, or
one can determine that black will be all pixels which fulﬁll the conditions of their
RGB channels, e.g. (87 ≤R ≤145) AND (63 ≤G ≤146) AND (77 ≤B ≤255)),
and all the other pixels become white). So one can get various fractal dimensions
and measures for one image. If one wants to characterize an image by one of its
fractal dimensions, it may be unclear which of them is appropriate. Therefore there
is the possibility to establish a fractal dimension of an image in the whole range of
1 HarFA (Harmonic and Fractal image Analyser) [42, 43] is a software package developed
at the Brno University of Technology, Czech Republic. For download and further informa-
tion, see http://www.fch.vutbr.cz/lectures/imagesci/

15
Fractal Analysis of Fitness Landscapes
439
thresholding conditions. A fractal spectrum is then obtained, where the fractal di-
mension is presented as a function of the thresholding condition (e.g. fractal dimen-
sion as a function of masked intensity (shade of gray) values).
Several ﬁltration algorithms are included (sharpening, smoothing, median and
Kuwahara ﬁltering, different kinds of derivative ﬁlters). Tools are available to sup-
press the thermal noise of the charge-coupled device (CCD) cam and for the elim-
ination of image sample illumination non-uniformity (e.g. samples prepared by
using optical microscope and CCD). Image information can be handled in four color
spaces - intensity (shades of gray), HSB/HSV (hue, saturation, brightness/value),
HLS (hue, lightness, saturation) and RGB (red, green and blue channel).
15.4
Fitness Landscapes Exhibiting Fractal Structures
15.4.1
Fractal Geometry – Basics Ideas
At the turn of the 19th and 20th century the exploration of mathematical structures
began and showed strange formations which differ considerably from the classical
geometrical ideal objects. One of the ﬁrst such structures, discovered by Karl Weier-
strass in 1872, was a continuous function that did not have a derivative at any point.
Then in 1884 Georg Cantor proposed the discontinuum - sets with nonzero dimen-
sions less than 1. After that, in 1904, Helge von Koch introduced a curve of inﬁnite
length, which encloses the ﬁnite surface (see Figure 15.8). In 1918 Gaston Julia and
Pierre Fatou described a set design called Julia sets.
(a)
(b)
Fig. 15.8 (a) Koch snowﬂake (b) Irregular fractal modeling a coast line, which is a randomly
modiﬁed Koch snowﬂake
These and other structures were received as mathematical scarecrows or mon-
sters by the mathematical public. Later it became clear that such a geometry was
able to describe some natural phenomena much better than classical geometry. The
complexity of the description is not the only attribute that differs for the two differ-
ent geometries. Another aspect is the dimension of the object. In classical geometry,
one can ﬁnd the Euclidean dimension as an integer number starting from zero. For
instance, we have a dimension of 1 (line), two dimensions (surface) and three dimen-
sions (space). The fractal geometry [16, 17] is different from traditional geometry

440
I. Zelinka, O. Zmeskal, and P. Saloun
as we can have non-integer dimensions. Such a non-integer dimension can be for-
malized as the (fractal) Hausdorff dimension, which is a real and often an irrational
number for many objects. It has been shown that the Euclidean dimension is the
limit of the fractal dimension. In other words, the fractal dimension may even be
integer, which turns out to be equal to the Euclidean dimension. Fractal objects usu-
ally show high levels of complexity (see Figure 15.8), that can often be observed in
natural forms and processes as well as in the solutions of the engineering problems,
as demonstrated in the further sections. For more about fractal geometry we refer to
[1, 16, 17, 20].
15.4.2
Fractal Dimension
It is possible to describe mathematically the degree of structuring of objects by di-
mensions in form of special numbers. Those are numbers characterizing fractals like
the Hausdorff - Besicovic (fractal) dimension [1, 20]. For fractal objects the numer-
ical value of this dimension is larger than the topological dimension, but smaller
than the Euclidean dimension. Non-fractal objects have the property that, by reduc-
ing the length scale of the object (circuit), this length goes to a limit value. This is
not the case for fractals, the length is constantly increasing. This feature is called the
Richardson effect. There are several deﬁnitions of dimensions, which in principle
can be divided into two groups:
• Metric dimensions, depending on metric properties.
• Information dimensions, depending on probabilistic properties.
An example of the group of metric dimensions is the Hausdorff-Besicovic dimen-
sion, also called Kolmogorov dimension or capacity, eventually fractal dimension.
It is expressed by the following formula:
Dk = lim
ε→0
lnN (ε)
ln
 1
ε
 = lim
ε→0
logN (ε)
log
 1
ε
 ,
(15.11)
where N(ε) is the minimum number of elementary bodies (e.g. R2 squares of side
length ε) needed to cover the considered set. This dimension reﬂects quantitatively
the degree of complexity (“structured”) of a given set. From Equation (15.11) it can
be seen that the value of the fractal dimension does not depend on the base used
for the logarithm. Information dimensions are very often used in dynamical sys-
tems as they are suitable for describing the time evolution of systems. Information
dimensions can also be applied if the time evolution of the system is stochastic,
which leads to a probabilistic description of dynamics. An example of information
dimensions is the Lyapunov dimension.

15
Fractal Analysis of Fitness Landscapes
441
Fig. 15.9 The fractal function - 1stDeJong function with added fractal function
15.4.3
Fractal Fitness Landscape – How to Build It
A class of ﬁtness landscapes exhibits fractal structures. In fact, real fractals, as de-
ﬁned, do not exist in the real world, they are only mathematical structures living
in the mathematical universe. On the other hand, we can numerically approximate
them on computers to study their properties. For this purpose we deﬁne a frac-
tal function that can been added to selected classical test function, in this case the
1stDeJong, see Table 15.1 #1. The resulting function is then an artiﬁcial fractal test
function. The complexity and fractalness of such a function can be varied by param-
eters of the fractal dimension, see Figure 15.10. This kind of test function can be
seen in two ways. In a ﬁrst it can be taken as a special mathematical object which
is inﬁnitely complex. This perspective of a fractal makes localization of its extreme
theoretically impossible. This fact stems from the principles of fractal geometry, see
for instance Mandelbrot [16], according to which self-similar or self-afﬁne struc-
tures can be observed. The exact shape of the fractal (especially in the case of self-
afﬁne fractals) is difﬁcult to predict and therefore the precise location of the global
extreme of fractal functions is impossible. From a practical point of view it can
be stated that the use of fractal test functions for today’s digital computers has its
limitations in terms of accuracy. A computer-generated ”fractal” always has a ﬁnite
complexity. Taking into account the above limitation, fractal test function can be
used. For fractal functions we chose a modiﬁcation of the Weierstrass - Mandelbrot
function [16], which is given as an inﬁnite series

442
I. Zelinka, O. Zmeskal, and P. Saloun
(a)
(b)
(c)
(d)
Fig. 15.10 1stDeJong function with added fractal function (D = 1.85). (a) Ampliﬁcation of
the fractal component A = 1; (c) A = 10; (b) and (d) 2D projection that is used to perform the
fractal analysis.
W(x) =
∞
∑
j=−∞

1 −exp

ib jx

exp(iϕj)
b(2−D)j
(15.12)
where i is the imaginary unit, b > 1 affects the optical clarity of graph complexity,
φj is an arbitrary phase angle, and D (1 < D < 2) is the fractal dimension of the
curve W. This curve, discovered by Karl Weierstrass in 1872, is the graph of a con-
tinuous function, but it has no derivative at any point. This mathematical property
also applies to the real part of the simpliﬁed function in Equation (15.12) (φj = 0):

15
Fractal Analysis of Fitness Landscapes
443
C(x) =
∞
∑
j=−∞
1 −cos

b jx

b(2−D)j
.
(15.13)
This version of the Weierstrass - Mandelbrot function is also called the Weierstrass
- Mandelbrot fractal cosine function [16]. According to [2], Equation (15.13) shows
a trend, which is inﬂuenced by parameter D. For our numerical experiments we
have set the summation over j in Equation (15.13) to the interval [−100,100] (see
Figure 15.9 and an application on the 1stDeJong function see Figure 15.10). The
boundary value of 100 was estimated heuristically. When Equation (15.13) is plotted
for different j, then after j > 50, the value for C(x) is saturated, so the value of 100
shall be enough. To get a fractal function free of any kind of trend, a variant of the
function in Equation (15.13) was designed in which the relevant trend is eliminated.
This variant is given by Equation (15.14):
C′(x) =

C(x)
C(1)|x|2−D , if
x ̸= 0
1
for x = 0 .
(15.14)
Equation (15.15) demonstrates the use of the fractal function in Equation (15.14) on
the 1stDeJong test functions:
f fract(x) =
n
∑
i=1

AC′(x)+ x2
i −1

(15.15)
with A an ampliﬁcation factor for the fractal component of the landscape. Figures
15.9 and 15.10 show the effect. The resulting complexity and fractalness of the
landscape can be controlled by parameter D in Equation (15.14). In this way we can
fractalise any kind of ﬁtness landscape.
15.5
Fractal Analysis – Selected Methods
The entropy [6, 13] of a region of size r can be determined by either radius fractal di-
mension or box counting fractal dimension. The radius method of fractal dimension
calculation is proper for spherical structures (e.g. a snowﬂake as in Figure 15.11),
the box counting can be used generally for any fractal structure. The box counting
method can be done by using a wavelet (Haar) transformation method.
The radius method (Figure 15.11b) is based on the distribution of black and white
pixels at thresholded images in deﬁned regions with radius r. The fractal dimension
[15, 17] is determined from the logarithmic dependence of the number of white
(or black) pixels on the logarithm of the radius. The fractal dimension of white
pixels gives information about the fractal character of the thresholded image of the
snowﬂake (Figure 15.11a).
The box counting method (Figure 15.11c) is based on the number of white
(partially white and black) squares with varying size of edge length ε = 1/r of
the thresholded image. The fractal dimension is determined from the logarithmic

444
I. Zelinka, O. Zmeskal, and P. Saloun
(a)
(b)
(c)
Fig. 15.11 The principle of fractal dimension calculation: (a) original image, (b) radius
method, (c) box counting method applied to thresholded image brightness component
dependence of the number of white squares (all pixels in a square are white), squares
with some white pixels, and black squares (all pixels in a square are black) on the
logarithm of the edge length. The fractal dimension calculated from the number
of white squares (DWBW) gets the information about the fractal character of the
thresholded image of the snowﬂake, the fractal dimension calculated from partially
white squares (DBW) about the interface of the snowﬂake, and the fractal dimension
calculated from the number of black squares DBBW (including the interface) about
the surrounding of the snowﬂake. This method can be used for any fractal struc-
ture found in a thresholded image. The fractal measures can be used to determine
areas of white (KWBW - include interface), black (KBBW include interface), and of
borderlines between white and black regions (KBW) [12].
The wavelet method is based on using a two-dimensional Haar transformation
[12, 36]. It is an integral transformation which is based on “square-shaped” func-
tions (called Haar wavelet, see Figure 15.12 top left). Wavelet analysis is similar to
Fourier analysis in the sense that it allows a target function over an interval to be
represented in terms of an orthonormal function basis. The principle of the wavelet
method is based on rasterization of black and white images (see Figure 15.12). Ras-
terization can be generally realized by low level ﬁltering. In the case of Haar trans-
formation it can be very simply calculated by averaging the nearest four pixels (or
squares of rasterized image). Note that by averaging all white pixels (squares), the
new square will be white, by averaging all black pixels (squares), the new square
will be black, and for all other combinations the new square will be gray scaled.
The fractal parameter calculation is the same as for the box counting method. Both
methods are identical for squares sizes: 1, 2, 4, 8, ..., pixels.

15
Fractal Analysis of Fitness Landscapes
445
Fig. 15.12 Principle of using wavelet method for determination of fractal parameters (violet
pixels are black, green pixels are white, other pixels are grayscale). Haar wavelet left upper
image.
15.5.1
Fractal Analysis of One- and Two-Dimensional
Landscapes
Fractal analysis is used to determine the fractal parameters (the fractal dimension D
and the fractal measure K) and other quantities derived from them. It can be applied
to one or more dimensional mathematical (fractal) structures using discrete experi-
mental data. Fractal parameters can be deﬁned using the area under the 1D functions
(see Figure 15.10 for the studied landscape and Figure 15.13 for results) or statistical
parameters: mean, variance (mean, standard deviation) and higher moments (skew-
ness, kurtosis). The fractal dimension also determines the entropy of the data under
analysis. We examine the fractal 1D function in Equation (15.15) which originates
from superposition of the 1stDeJong function and the fractal function in Equation
(15.14) with D = 1.85 (Figure 15.10). The results of the fractal analysis using HarFA
v.5.5 are shown in Figure 15.13. The ﬁgure shows a logarithmic dependence of the
number of squares on the size of squares (the box counting method has been used).
The slope of this dependence determines the fractal dimension, the intersection of
the size scale r = 1 gives the fractal measure. Regression lines apply for the area

446
I. Zelinka, O. Zmeskal, and P. Saloun
under the curve, including the interface (B+BW), and for the area above the curve,
including the interface (W + BW). Similarly, fractal parameters of two-dimensional
functions can be determined. The basic methods of analysis are called threshold
analysis (it determines the so-called Hausdorff dimension) and non-threshold analy-
sis (it determines the so-called information dimension). For threshold functions (the
values below a deﬁned threshold is assigned to black, the values above this thresh-
old are white) we can determine the fractal parameters depending on the size of the
threshold (Figure 15.14) and the size of black surfaces, white surfaces and interfaces
(or lengths bounding curves) for various values of thresholds, as well as other sta-
tistical parameters as for 1D functions. In Figure 15.14 we give the results for a 2D
image analysis of thresholds for the 2D 1stDeJong function (see Equation (15.15)
and Figure 15.9) depending on the value of the threshold (0-255). Figure 15.14(a)
describes the dependence of the fractal dimension. Figure 15.14(b) describes the
dependence of the fractal measure for determining parameters of black areas, in-
cluding the interface (B+ BW), white areas, including the interface (W + BW), and
the desktop interface (BW). It is obvious that the degree of fractal dimension and
fractal interface is largest for the threshold value 105, the value of the fractal dimen-
sion is 1.805, a value close to the value that was used for the calculation (D = 1.85).
Fig. 15.13 Fractal analysis of fractal 1D 1stDeJong function (15.15). WBW white squares,
BW partially white squares, BBW black squares.

15
Fractal Analysis of Fitness Landscapes
447
0 
3 
6 
9 
12 
15 
0 
0.5 
1 
1.5 
2 
2.5 
0 
50 
100 
150 
200 
250 
Entropy (-) 
Fractal dimension (-)  
threshold level 
BBW 
WBW 
BW 
(a)
0.0 
0.2 
0.4 
0.6 
0.8 
1.0 
1.2 
0 
50000 
100000 
150000 
200000 
250000 
300000 
0 
50 
100 
150 
200 
250 
Area (-) 
Fractal measure (pixels) 
threshold level 
W 
BW 
B 
(b)
Fig. 15.14 Fractal analysis of the fractal 2D 1stDeJong function in Equation (15.15). (a)
Fractal dimension and (b) fractal measure.
15.5.2
Fractal Analysis of Threshold Functions
The next example we consider is the Ackley function as presented in Table 15.1 #6,
and in Figure 15.1a. We study the landscape derived from this function (called the
original function) and also the threshold and ﬂood functions shown in Figure 15.15.
The following parameters can be determined from fractal analysis

448
I. Zelinka, O. Zmeskal, and P. Saloun
• Fractal dimension end entropy of the original function
• Fractal measure and volumes (surface) of the original function
• Fractal dimension and entropy of the cut (threshold) function
• Fractal measure and surfaces of the cut areas of the function
• Fractal dimensions and entropies of the ﬂood function
• Fractal measures and volumes (surface) of the ﬂood function
(a)
(b)
Fig. 15.15 (a) Analysis of the threshold function - Ackley (threshold level = 210); (b) Anal-
ysis of the ﬂood function - Ackley (ﬂood level = 105)
 
 
 
(a)
(b)
(c)
Fig. 15.16 Analysis of (a) original, (b) threshold and (c) ﬂood function
The threshold and ﬂood regime used in the analysis are presented in Figure 15.16.
The original function (Figure 15.16(a)) was cut for different levels and the resulting
threshold images were analyzed. The dependence of the area size and the surround-
ing curve on the threshold level is analyzed in Figure 15.16(b). From the subtraction
of the volumes of original and ﬂood functions (Figure 15.16(c)) volumes of a part
of the function can be determined. The different types of functions were analyzed.

15
Fractal Analysis of Fitness Landscapes
449
Some of these functions have Euclidean character (with an integer-valued dimen-
sion), and some have a fractal character (with a real-valued dimension) of different
complexity.
The results of the Ackley image analysis are presented in two graphs, Figures
15.17 and 15.18. Figure 15.17 depicts the dependences of all three Hausdorff fractal
dimensions (left axis) and appropriate entropies (right axis) on the threshold level
calculated for the whole image. The BBW line describes the dependence of the frac-
tal dimension of the black part of the threshold image together with the interface
(B + BW) on the threshold level. The WBW line analogically describes the depen-
dence of the fractal dimension of the white part of the threshold image together with
the interface (W +BW) on the threshold level; the BW line describes the dependence
of the fractal dimension on the interface only. The whole image is black and the
fractal dimension DBBW = 2 for low threshold levels, for high threshold levels the
whole image is white and the fractal dimension DWBW = 2. The fractal dimension
of the interface DBW has its maximum near the midpoint of the dependence (the
structure is most highly varied). The dependences of entropies for all three fractal
dimensions are calculated using the equation S0(r) = D0 lnr, where r = 512 pixels.
From the ﬁgure it is evident that the entropy of white (WBW) is highest for the zero
threshold level (probability of one black pixel at white areas is maximal), and the
entropy of black (BBW) is highest for the maximal threshold level (probability of
one white pixel at black areas is maximal). The maximal entropy for this cases is:
for r = 512 pixels and Dmax = 2 we obtain Smax = 2ln512 ∼= 12.476.
Fig. 15.17 The results of threshold analysis of the Ackley function. Dependence of all three
fractal dimensions (WBW - white surface include interface, BBW - black surface include in-
terface, and BW - interface) on the threshold level. Right axis is recalculated using Equations
(15.16) - (15.18) order q = 0, size of analyzed region r = 512 pixels.

450
I. Zelinka, O. Zmeskal, and P. Saloun
The values of the fractal measure can be used to determine area sizes. The values
of all three fractal measures KBBW,KWBW, and KBW are recalculated to the fractal
measures, KB,KW, and KBW (left axis) [12, 42]. The values are proportional to the
size of the white area SW, the black area SB and the interface area SBW (plotted at
the graph in relative units, SB + SW + SBW = 1, right axis) as deﬁned by Equations
(15.16) - (15.18). Note that this set of equations is related to threshold 2D pic-
tures. For fractal analysis we further take into account the fractal measure (KS BBW,
KS WBW, KS BW; lower index S means that K is related to the surface, see Equation
(15.16) - (15.18)) and the fractal dimension of threshold images (DWBW, DBBW,
DBW). The measures are counting for the black area (SB), the white area (SW) and
the border (SBW, this area is proportional to the boundary curve):
SB =
KS BBW −KS BW
KS BBW + KS WBW −KS BW
(15.16)
SW =
KS WBW −KS BW
KS BBW + KS WBW −KS BW
(15.17)
SBW =
KS BW
KS BBW + KS WBW −KS BW
.
(15.18)
The maximal fractal measure has a value of Kmax = KS B + KS W + KS BW = (512 ×
512) pixels.
Fig. 15.18 The results of threshold analysis of the Ackley function. Dependence of all three
fractal measures (W - white surface without interface, B - black surface without interface,
BW - surface of interface proportional to the interface length) on the threshold level. Right
axis is recalculated to relative values (B+BW +W = 1).

15
Fractal Analysis of Fitness Landscapes
451
Quite interesting is a comparison of the ﬁtness landscapes related to experiments
with deterministic chaos (see Figure 15.19 and 15.20). Both ﬁgures summarize the
results obtained from the cost function landscapes, where L1 refers to chaos con-
trol as in Equation (15.7) with period-1 illustrated in Figure 15.6(a). L2 refers to the
R¨ossler - Lorenz synchronization in Equation (15.4) illustrated in Figure 15.3(b). L3
refers to chaos control in Equation (15.7) with period-6 shown in Figure 15.6b. Fi-
nally, L4 refers to chaos control of the CML problem in Equation (15.10) shown in
Figure 15.7. The landscapes from Figures 15.6(a) and 15.6(b) have an almost iden-
tical characteristic of the fractal dimensions, while the landscape in Figure 15.3(b)
differs in the boundary areas (for small and big values of the threshold). An in-
teresting result is observable in the landscape in Figure 15.7, where there is a big
visible maximum. This ﬁtness landscape has been generated by the CML system,
so its surface is generated by a chaotic system of a different kind. This is maybe
the source of that difference and deserves further research. It is also observable that
the fractal measures are almost the same for all chaotic structures. The measure are
slowly decrease.
0 
3 
6 
9 
12 
0 
0.5 
1 
1.5 
2 
0 
50 
100 
150 
200 
250 
Entropy (-) 
Fractal dimension (-)  
threshold level 
L1 
L2 
L3 
L4 
Fig. 15.19 Dependence of fractal dimension on threshold level. Mutual comparison of ﬁtness
landscapes; L1: Chaos control in Equation (15.7), period-1, Figure 15.6(a); L2: R¨ossler -
Lorenz synchronization in Equation (15.4), Figure 15.3(b); L3: Chaos control in Equation
(15.7), period-6, Figure 15.6(b); L4: Chaos control of CML problem in Equation (15.10),
Figure 15.7.
15.5.3
Fractal Analysis of Original (Non-threshold) Functions
The information content [10], fractal dimensions [15, 16] and Shannon entropies
[30] S1(r) = D1 lnr of volumes below (including surface, marked as BBW), un-
der (including surface, marked as WBW) and of surfaces (marked as BW) can be
calculated for original functions by a procedure described in [42]. The value of the

452
I. Zelinka, O. Zmeskal, and P. Saloun
0.0 
0.2 
0.4 
0.6 
0.8 
0 
50000 
100000 
150000 
200000 
0 
50 
100 
150 
200 
250 
Area (-) 
Fractal measure (pixels) 
threshold level 
L1 
L2 
L3 
L4 
Fig. 15.20 Dependence of fractal measure on threshold level. Mutual comparison of ﬁtness
landscapes; L1: Chaos control in Equation (15.7), period-1, Figure 15.6(a); L2: R¨ossler -
Lorenz synchronization in Equation (15.4), Figure 15.3(b); L3: Chaos control in Equation
(15.7), period-6, Figure 15.6(b); L4: Chaos control of CML problem in Equation (15.10),
Figure 15.7.
dimension for an Euclidean volume is equal to 3, for an Euclidean surface it is equal
to 2. If a fractal character of volumes and surfaces occurs, fractal dimensions of vol-
umes are lower than 3, and fractal dimensions of surfaces are higher than 2. The
entropy of a fractal function depends on the size of the analyzed image, in our case
(256 × 256) pixels. As is evident from the deﬁnition of the Shannon entropy [30],
the zero value is for square (1×1) pixels and the slope of the change in entropy with
the square size is a fractal dimension.
The fractal dimensions of all analyzed surfaces are presented in Table 15.2. From
these results it is evident that some simple surface such as the 1stDeJong has Eu-
clidean character, and its fractal dimension is less than 2.1. More complex structures
such as the fractal landscapes from chaos control in Equation (15.7), period-6, Fig-
ure 15.6(b) have a dimension of the surface that is higher than 2.9.
The fractal dimensions involve information about the volumes and surfaces of
fractal functions. The fractal measures can be used for the determination of volume
and surface sizes. The values of all three fractal measures (KV BBW,KV WBW, and
KV BW) are recalculated to fractal measures (KV B,KV W, and KV BW, left axis) [12,
42]. The values are proportional to the size of volumes below VB, volumes under
VW and volumes of surfaces VBW (at graph in relative units, VB +VW +VBW = 1),
as deﬁned by Equations (15.19), (15.20) and (15.21). Note that this set of equations
is related to threshold 3D pictures (the third dimension is for example the gray
level). Again the fractal dimensions and fractal measures are calculated and this
time the volume under the surface area including the volume deﬁned levels of shade
(KV BBW) over the volume above surface (KV WBW) and volume area (KV BW, is
proportional to the surface; lower index V means that K is related to the volume

15
Fractal Analysis of Fitness Landscapes
453
in Equation (15.19) - (15.21)) is the result. From these parameters, which have the
same meaning as in the threshold pictures, the volume under the surface (VB), the
volume over the area (VW) and the volume area (VBW) are counted. The equations
therefore differ only on the left side, meaning the parameter on the right side is the
same, but in the ﬁrst case, the threshold images are taken into consideration while
in the latter case the non-threshold images are considered:
VB =
KV BBW −KV BW
KV BBW + KV WBW −KV BW
(15.19)
VW =
KV WBW −KV BW
KV BBW + KV WBW −KV BW
(15.20)
VBW =
KV BW
KV BBW + KV WBW −KV BW
.
(15.21)
The maximal fractal measure will be calculated by multiplying the size of the image
(512×512) by the number of scale levels of e.g. brightness (256) and has the value
Kmax = KV B +KV W +KV BW = (512×512×256) voxels (volume pixels) (see Ta-
ble 15.2). The fractal measures of all analyzed surfaces are presented in Table 15.2.
From these results it is evident that some simple surfaces such as 1stDeJong have
Euclidean character, and its fractal measure is very low (two orders less than more
complex fractal structures, for instance the fractal landscapes from chaos control in
Equation (15.7), period-6, Figure 15.6(b).
Table 15.2 Numerical values of fractal measure and dimension
Fractal
Fractal
Dimension Measure
1st DeJong, Table 15.1 #1
2.081
0.002
Rastrigin, Table 15.1 #2
2.227
0.004
Fractal function, Equation (15.15), A = 1, Figure 15.10a
2.344
0.007
Schwefel, Table 15.1 #3
2.347
0.009
EggHolder, Table 15.1 #7
2.432
0.013
Ackley, Table 15.1 #6
2.489
0.009
StretchedSine, Table 15.1 #5
2.533
0.028
Rana, Table 15.1 #8
2.551
0.036
Griewangk, Table 15.1 #4
2.656
0.053
Chaos control of CML problem in Equation (15.10), Figure 15.7
2.678
0.023
Fractal function, Equation (15.15), A = 10, Figure 15.10c
2.788
0.062
R¨ossler - Lorenz synchronization in Equation (15.4), Figure 15.3b
2.799
0.068
Chaos control in Equation (15.7), period-1, Figure 15.6a
2.894
0.087
Pathological, Table 15.1 #9
2.910
0.114
Chaos control in Equation (15.7), period-6, Figure 15.6b
2.940
0.091

454
I. Zelinka, O. Zmeskal, and P. Saloun
15.6
Conclusion
The research reported in this chapter focused on how fractal analysis can be used for
various ﬁtness landscapes (visualized cost functions) with different levels of com-
plexity. For the analysis we employed wavelet (modiﬁed box counting) methods for
calculating fractal parameters. Simple functions such as the Ackley function (Figure
15.1a) as well as more complex functions such as the Rana function (Figure 15.1c)
have been used. We also studied ﬁtness landscapes that originated from numerical
chaos control and chaos synchronization experiments. The last class of tested ﬁtness
landscapes was generated by means of fractal geometry, and is described in Section
15.4 and depicted in Figure 15.10.
One dimensional functions were analyzed and the results (numerically estimated
fractal parameters) were compared with the fractal parameters used for generat-
ing the fractal functions used in this analysis. It has been found that the difference
between the original parameters and their numerical estimation is very small. For
generating a fractal 1stDeJong function (see Figure 15.10), we used a fractal param-
eter D = 1.85. The result of the analysis is the fractal dimension D = 1.78. Further
analysis was carried out on threshold images. There we found a match for the func-
tion based on Equation (15.15) and depicted at Figure 15.10 for the largest fractal
interface that is very good, D = 1.805. In this chapter, this analysis is also performed
for the Ackley function.
The last analysis was carried out for 2D non-threshold functions. The result is
a comparison of fractal parameters (fractal dimension and fractal measure) for all
analyzed features. From the graphs it is clear that the smallest dimension belongs to
the function 1stDeJong (geometric features - ideal D = 2, the result of analysis of
D = 2.1 due to the boundary conditions: the ﬁnal image size, ﬁnite pixel size), the
largest contrast function (D = 2.9).
Despite the fact that interesting results have been demonstrated, observed and
conﬁrmed with the fractal theory, a few important issues still remain unanswered.
We have analyzed static ﬁtness landscapes. However, an analysis of dynamic ﬁt-
ness landscapes (i.e. changing in time) has not been done and can reveal important
clue about the internal dynamics of the system that “generates” the studied ﬁtness
landscape. Also the relation between evolutionary algorithm dynamics (during evo-
lutionary search on the ﬁtness landscape) and the fractal properties of the ﬁtness
landscape still remains unanswered and is one of our current research topics.
Acknowledgements. The following two grants are acknowledged for the ﬁnancial support
provided for this research: Grant Agency of the Czech Republic - GACR P103/13/08195S, by
the Development of human resources in research and development of latest soft computing
methods and their application in practice project, reg. no. CZ.1.07/2.3.00/20.0072 funded
by Operational Programme Education for Competitiveness, co-ﬁnanced by ESF and state
budget of the Czech Republic, partially supported by Grant of SGS No. SP2013/114, VˇSB -
Technical University of Ostrava, further by projects from the Ministry of Industry and Trade
of the Czech Republic (Grant FR-TI1/144), and from “Centre for Materials Research at FCH
BUT” No. CZ.1.05/2.1.00/01.0012 supported by ERDF.

15
Fractal Analysis of Fitness Landscapes
455
References
[1] Barnsley, M.F.: Fractals Everywhere. Academic Press Professional, San Diego (1993)
[2] Berry, M.V., Lewis, Z.V.: On the Weierstrass - Mandelbrot fractal function. Proceedings
Royal Society of London A370, 459–484 (1980)
[3] Brown, R., Rulkov, N.F., Tracy, E.R.: Modeling and synchronization chaotic system
from time-series data. Phys. Rev. E49, 3784–3800 (1994)
[4] Chen, G.: Controlling Chaos and Bifurcations in Engineering Systems. CRC Press,
Boca Raton (2000)
[5] Crona, K., Greene, D., Barlow, M.: The peaks and geometry of ﬁtness landscapes. J.
Theor. Biol. 317, 1–10 (2013)
[6] Garrido, A.: Classifying entropy measures. Symmetry 3, 487–502 (2011)
[7] Gonzalez-Miranda, J.M.: Synchronization and Control of Chaos. An introduction for
scientists and engineers. Imperial College Press, London (2004)
[8] Grassberger, P., Procaccia, I.: Characterization of strange attractors. Phys. Rev. Lett. 50,
346–349 (1983)
[9] Grassberger, P., Procaccia, I.: Estimation of the Kolmogorov entropy from a chaotic
signal. Phys. Rev. A 28, 2591–2593 (1983)
[10] Han, T.S., Kobayashi, K.: Mathematics of Information and Coding. American Mathe-
matical Society, Providence (2002)
[11] Hilborn, R.C.: Chaos and Nonlinear Dynamics. Oxford University Press, Oxford (1994)
[12] Jerabkova, P., Zmeskal, O., Haderka, J.: Fractal analysis of the images using wavelet
transformation. In: Complexus Mundi-Emergent Patterns in Nature, pp. 300–312.
World Scientiﬁc, Singapore (2006)
[13] Higashi, M., Klir, G.J.: Measures of uncertainty and information based on possibility
distributions. Int. J. General Syst. 9, 43–58 (1982)
[14] Hoshino, T., Mitsumoto, D., Nagano, T.: Fractal ﬁtness landscape and loss of robustness
in evolutionary robot navigation. Autonomous Robots 5, 199–213 (1998)
[15] Mandelbrot, B.B.: How long is the coast of britain? Statistical self-similarity and frac-
tional dimension. Science 156, 636–638 (1967), doi:10.1126/science.156.3775.636
[16] Mandelbrot, B.B.: Fractal Geometry of Nature. W. H. Freeman and Co., New York
(1983)
[17] Mandelbrot, B.B.: A fractal set is one for which the fractal (Hausdorff-Besicovitch)
dimension strictly exceeds the topological dimension. In: Fractals and Chaos. Springer,
Berlin (2004)
[18] Martin, C.H., Wainwright, P.C.: Multiple ﬁtness peaks on the adaptive landscape drive
adaptive radiation in the wild. Science 339, 208–211 (2013)
[19] May, R.: Simple mathematical model with very complicated dynamics. Nature 261,
45–67 (1976)
[20] Peitgen, H.O., J¨urgens, H., Saupe, D.: Chaos and Fractals, New Frontiers of Science.
Springer, Berlin (1992)
[21] Pikovsky, A., Rosemblum, M., Kurths, J.: Synchronization: A Universal Concept in
Nonlinear Sciences. Cambridge University Press, Cambridge (2001)
[22] Pyragas, K.: Continuous control of chaos by self-controlling feedback. Phys. Lett.
A 170, 421–427 (1992)
[23] Pyragas, K.: Control of Chaos via Extended Delay Feedback. Phys. Lett. A 206, 323–
330 (1995)
[24] Renyi, A.: Probability theory. Elsevier, Amsterdam (1970)

456
I. Zelinka, O. Zmeskal, and P. Saloun
[25] Ribeiro, H.V., Zunino, L., Lenzi, E.K., Santoro, P.A., Mendes, R.S.: Complexity-
entropy causality plane as a complexity measure for two-dimensional patterns. Plos
One 7(8) (2012), doi:10.1371/journal.pone.0040689
[26] Richardson, L.F., Ashford, O.M., Charnock, H., Drazin, P.G., Hunt, J.C.R., Smoker, P.,
Sutherland, I.: The Collected Papers of Lewis Fry Richardson, Cambridge (1993)
[27] Richter, H.: Analyzing dynamic ﬁtness landscapes of the targeting problem of chaotic
systems. In: Di Chio, C., et al. (eds.) EvoApplications 2012. LNCS, vol. 7248, pp. 83–
92. Springer, Heidelberg (2012)
[28] Rulkov, N.F., Sushchik, M.M.: Robustness of synchronized chaotic oscillations. Int. J.
Bifurc. Chaos 7, 625–643 (1997)
[29] Schuster, H.G.: Handbook of Chaos Control. Wiley-VCH, New York (1999)
[30] Shannon, C.E.: A mathematical theory of communication. Bell Syst. Tech. J. 27, 379–
423, 623–656 (1948)
[31] Senkerik, R., Zelinka, I., Navratil, E.: Optimization of feedback control of chaos by
evolutionary algorithms. In: First IFAC Conference on Analysis and Control of Chaotic
Systems, Reims, France, June 28-30 (2006)
[32] Senkerik, R., Zelinka, I.: E Navratil, Investigation on evolutionary EDTAS chaos con-
trol. In: Proc. 20th European Simulation Multiconference (ESM 2006), Germany, Bonn,
May 28-31 (2006)
[33] Senkerik, R., Davendra, D., Zelinka, I., Oplatkov´a, Z., Jasek, R.: Performance compar-
ison of differential evolution and SOMA on chaos control optimization problems. Int.
J. Bifurc. Chaos 22, 1230025–1–16 (2012)
[34] Stein, D.L., Newman, C.M.: Rugged landscapes and timescale distributions in complex
systems. In: Simos, T.E., Psihoyios, G., Tsitouras, C. (eds.) Proc. International Confer-
ence of Numerical Analysis and Applied Mathematics, ICNAAM (2012)
[35] Sushchik, M.M., Rulkov, N.F., Tsimring, L.S., Abarbanel, H.D.I.: Generalized synchro-
nization of chaos in directionally coupled chaotic systems. In: Proceedings of 1995 Intl.
Symp. on Nonlinear Theory and Appl., pp. 949–952. IEEE-Press, Piscataway (1995)
[36] Tomankova, K., Jerabkova, P., Zmeskal, O., Vesela, M., Haderka, J.: Use of the image
analysis to study growth and division of yeast cells. J. Imaging Sci. Technol. 50, 583–
589 (2006)
[37] Trochet, H.: A History of Fractal Geometry. MacTutor History of Mathematics (2009)
[38] Weinberger, E.D., Stadler, P.F.: Why some ﬁtness landscapes are fractal. J. Theor.
Biol. 163, 255–275 (1993)
[39] Zelinka, I., Celikovsky, S., Richter, H., Chen, G.: Evolutionary Algorithms and Chaotic
Systems. Springer, Germany (2010)
[40] Zelinka, I., Senkerik, R., Navratil, E.: Investigation on evolutionary optimization of
chaos control. Chaos, Solitons and Fractals 40, 111–129 (2009)
[41] Zmeskal, O., Nezadal, M., Buchnicek, M.: Fractal-Cantorian geometry, Hausdorff di-
mension and the fundamental laws of physics. Chaos, Solitons and Fractals 17, 113–119
(2003)
[42] Zmeskal, O., Nezadal, M., Buchnicek, M.: Fractal analysis of printed structures. J.
Imaging Sci. Technol. 46, 453–456 (2002)
[43] Zmeskal, O., Bzatek, T., Nezadal, M.: HarFA - Harmonic and Fractal image Analyser
(1997, 2012), http://www.fch.vutbr.cz/lectures/imagesci/

Chapter 16
Fitness Morphs and Nonlinear Projections of
Agent–Case Embeddings to Characterize Fitness
Landscapes
Daniel Ashlock, Justin Schonfeld, Wendy Ashlock, and Colin Lee
Abstract. The ﬁtness landscape of an evolutionary computation system is a set of
points deﬁned by the representation of the potential solutions with a connectivity
created by the variation operators. In real optimization, ﬁtness landscape analysis
can proﬁtably confuse this connectivity with that provided by the usual metric struc-
ture for Euclidean space (they are actually very different).In this chapter we examine
ﬁtness landscapes for a variety of discrete problems including ﬁnding self avoiding
walks, ﬁnding features for DNA sequence classiﬁcation, the Tartarus AI test prob-
lem, and locating cellular automata rules. We also examine a novel real optimization
problem connected with the Mandelbrot set. We use agent-case embeddings, ﬁtness
morphs, and nonlinear projection to explore the ﬁtness landscapes of these problems
in a series of extended examples.All of these techniques transforminformationabout
discrete ﬁtness into real-valued spaces enabling both analysis and visualization.
16.1
Introduction
With the ever expanding library of problems being tackled by evolutionary computa-
tional tools, improving our ability to understand and classify problems is becoming
more important than ever. One of the most helpful concepts available for determin-
ing how to approach a new problem with evolutionary computation is the ﬁtness
landscape.
Like many of the concepts in evolutionary computation, the idea of the ﬁtness
landscape was ﬁrst introduced in the ﬁeld of evolutionary biology [33], but the
Daniel Ashlock · Justin Schonfeld · Colin Lee
Department of Mathematics and Statistics, University of Guelph,
50 Stone Rd. E, Guelph, Ontario, Canada, N1G 2R4
e-mail: {dashlock,jschonfe,clee04}@uoguelph.ca
Wendy Ashlock
Department of Computer Science and Engineering,
York University, 4700 Keele Street Toronto, Ontario Canada, M3J 1P3
e-mail: washlock@sympatico.ca
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
457
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_16, c⃝Springer-Verlag Berlin Heidelberg 2014

458
D. Ashlock et al.
concept applies in an equally straightforward manner to evolutionary computation.
A ﬁtness landscape is simply a mapping, for a given problem, of all potential solu-
tions to ﬁtness values together with a topology created by the variation operator(s).
The language of ﬁtness landscapes is adapted from the language used to describe
physical landscapes. The term hill is used to describe a region of high ﬁtness (in
a maximization problem), valley to describe a region of low ﬁtness. Maximization
problems look for hills; minimization problems look for valleys.
Understanding the ﬁtness landscape associated with a problem or class of prob-
lems is important because it can often lead to improved performance by allowing
the researcher to match the appropriate evolutionary computation method with the
appropriate problem. Using the language of real world landscapes can often be
deceptive due to the complexity of ﬁtness landscapes encountered in evolution-
ary computation. Where a real world landscape is three dimensional, even a sim-
ple length n string gene over the alphabet {0,1} describes an n+1 dimensional
landscape.
It is important to realize that a ﬁtness landscape is actually a product of three
interacting elements: the representation (encoding) of potential solutions, the vari-
ability operators (commonly mutation and crossover), and the ﬁtness function. As
we will explore in this chapter, changing any of these three elements has the poten-
tial to dramatically alter the resulting ﬁtness landscape.
Evolutionary computation encompasses a wide variety of algorithms and ap-
proaches including genetic algorithms, genetic programming, evolutionary strate-
gies, and particle swarm optimization to name but a few. While many of these ap-
proaches share the idea of a ﬁtness landscape, the radical variation in the represen-
tation of potential solutions as well as other algorithmic details often challenges the
standard catalogue of ﬁtness landscape analysis techniques.
16.1.1
Terminology
Much of the terminology used is borrowed from evolutionary biology as well. The
encoded version of a potential solution is referred to as the genotype. The expressed
(or evaluated) version of the potential solution is the phenotype. In the case where
the genotype is equivalent to the phenotype, this is referred to as a direct encoding.
If the genotype is instead expressed in a manner which requires decoding before or
during evaluation, this is referred to as an indirect encoding.
Occasionally, when dealing with a string gene or other representation analogous
to the biological reality of genetic material, we will refer to a potential solution as a
chromosome and to the elements of that solution as genes. The position of the gene
in the chromosome is its locus.
Epistasis is a measure of the degree to which the interaction between elements of
the genotype inﬂuence the ﬁtness of the potential solution. Consider two problems:
onemax and an instance of the class of landscapes known as NK ﬁtness landscapes.
In the ﬁrst problem, onemax, each potential solution is represented as a binary string
s, and the ﬁtness of s is simply the number of 1’s in s. Thus for ﬁtness f, we have

16
Fitness Morphs and Nonlinear Projections
459
f(00111) = 3 and f(11100) = 3. On the other hand, in the case of the second prob-
lem, ﬁtness is calculated by adding together functions from {0,1} →{0,1}. These
function are applied to loci 0...N −1 together with the loci following each. For ex-
ample, let N = 5 and K = 1, and g(0,0) = 1, g(0,1) = 0, g(1,0) = 0, and g(1,1) = 1.
Then the ﬁtness f(10011) = g(1,0)+g(0,0)+g(0,1)+g(1,1) = 0+1+0+1 = 2,
while f(11100) = g(1,1)+g(1,1)+g(1,0)+g(0,0) = 1+1+0+1 = 3. Consider
these two functions. In the ﬁrst a one is good and the goodness of a particular one
is not affected by the value at any other location. In the NK-ﬁtness landscape, the
value of a one at a particular location depends strongly on the values at other loci.
Understanding the role of epistasis for a particular problem/representation/operator
set can often provide crucial insight into understanding the ﬁtness landscape de-
scribed by the set and thus determining the appropriate representation/operator pair
to tackle the problem.
The neighborhood of a solution is the set of solutions which are within one ap-
plication of the variation operator of the solution. Thus, the size of a neighborhood
is highly dependent on both the representation and the variation operator.
A mutation which has no impact on ﬁtness is referred to as a neutral mutation.
A neutral network is a set of solutions which are all connected to each other by
sequences of neutral mutations.
The remainder of the chapter is organized as follows. In Section 16.2 we will
brieﬂy describe a few standard analysis approaches as well as deﬁne the three tools
focused on in this chapter. Section 16.3 uses the self-avoiding walk problem to in-
troduce issues of representation and its impact on the character of ﬁtness landscapes.
Section 16.4 applies ﬁtness landscape analysis techniques to a type of augmented
ﬁnite state machine called a side effect machine. Section 16.5 demonstrates agent-
case embeddings on the classical AI test problem Tartarus. A unique application of
real parameter optimization is used in Section 16.6 to demonstrate the use of ﬁt-
ness morphs. Section 16.7 generalizes ﬁtness morphs for a discrete representation
encoding cellular automata rules. Finally, Section 16.8 concludes the chapter.
16.2
Analysis Technology
A great deal of research has been done concerning techniques for categorizing
ﬁtness landscapes. This includes methods for grading landscapes by their “hard-
ness” [17], measuring the “ruggedness” of a landscape [31], or treating landscapes
as network graphs [28]. As ﬁtness landscapes are often high-dimensional and difﬁ-
cult to visualize or easily grasp, it is often useful to explore a number of different
perspectives when attempting to understand them. The following lists give few of
the more commonly examined perspectives phrased for maximization problems.
Geometric Features
• Barriers – A characterization of the valleys in a landscape.
• Local Optima – A characterization of the hills, number and frequency, in a
ﬁtness landscape.

460
D. Ashlock et al.
• Neutrality - A characterization of the neutral spaces in a ﬁtness landscape.
• Ruggedness - As with a real landscape the ruggedness of a ﬁtness landscape
is a characterization of how quickly and dramatically it changes from hills to
valleys and back.
Behavioral Features
• Epistasis - Approaches for measuring the degree of epistasis in a particular ﬁt-
ness landscape.
• Evolvability - The extent to which a population of potential solutions can im-
prove their ﬁtness.
• Fitness Distance Correlation - The correlation between the ﬁtness and the dis-
tance to the global optima.
• Walks – The behavior of walks, directed or undirected (random), through a land-
scape. One of the techniques discussed heavily in this chapter, ﬁtness morphs,
is based around a particular sort of walk, the shortest path from one optimum to
another.
A more comprehensive review of each of these perspectives as well as additional
approaches can be found in [24]. In this chapter we focus on three particular tech-
niques: ﬁtness morphs, agent-case embeddings, and nonlinear projection (multi-
dimensional scaling).
16.2.1
Nonlinear Projection
A nonlinear projection (NLP) is an evolved projection of a set of points in a n-
dimensional space onto a set of points in a 2-dimensional plane [13]. It is a variant
of multidimensional scaling or ordination; a set of statistical techniques for reduc-
ing the dimensionality of high dimensional spaces while minimizing the information
loss [18]. In nonlinear projection, each potential solution is a vector of (x,y) coordi-
nates on a 2D plane. The ﬁtness of the solution is the Pearson Correlation computed
between a distance matrix on the points in the high dimensional space and a dis-
tance matrix on the vectors of (x,y) coordinates. Potential solutions are evolved by
a standard evolutionary computation algorithm until the ﬁtness converges. Nonlin-
ear projection provides a straightforward method for visualizing high dimensional
spaces in a plane where they can be easily interpreted by humans, or otherwise
analyzed.
There are many software packages available for various types of ordination.1
Among the easiest to use are those contained in the software environment R [25].
R is a special purpose language for statistics and graphics.2 R allows users to ex-
tend its functionality by adding their own functions, which then are incorporated
into packages that others can use. Two R packages contain functions useful for
1 See http://ordination.okstate.edu/software.htm for a list of ordination
software packages.
2 R is free and available for download at http://www.r-project.org

16
Fitness Morphs and Nonlinear Projections
461
ordination: MASS [30] and vegan [23]. MASS is a package designed to support
a statistics textbook, and vegan is an R package for community ecologists.
There are two types of ordination available in R. Both take as input a distance or
dissimilarity matrix. The ﬁrst is classical multidimensional scaling, also known as
principal coordinates analysis. Use the R function cmdscale for this method. It has
the feature that the dimensions in the resulting diagram are ordered so that the ﬁrst
dimension incorporates the most variability in the data, the second the next, and so
on. This means that a k+1 dimensional diagram is just a k dimensional diagram with
another dimension added. This method makes the assumption that a linear projection
of the data is optimal, and so is not always appropriate to use. It is analytical, so it
always gives the same answer given the same input.
The second type of ordination available in R is non-metric multidimensional scal-
ing. It makes no assumptions about the nature of the data, but requires a ﬁxed choice
of dimensions. The ﬁrst two dimensions of a 3-dimensional ordination diagram will
typically be different from a 2-dimensional ordination diagram built from the same
data. This method can produce different results based on different initial conﬁgura-
tions and different runtimes. The basic idea is to start with an initial conﬁguration
of the data points and then use gradient descent to maximize the goodness of ﬁt of
the distances between points with their distances in the input distance matrix. The
isoMDS function in the MASS package and the metaMDS function in the vegan
package implement this method. metaMDS incorporates isoMDS adding such fea-
tures as attempting to ﬁnd a stable solution by running the algorithm several times
with different random initial conﬁgurations and doing a ﬁnal rotation of the data so
that the ﬁrst axis reﬂects the principal source of variation as in classical multidimen-
sional scaling.
In this chapter, we use both non-linear projection created from an evolutionary
algorithm and non-linear projection using the R multidimensional scaling functions.
16.2.2
Fitness Morphs
A ﬁtness morph is a plot of the ﬁtness computed along a shortest path between two
optima. The morph provides insight into the structure of the landscape. A ﬂat ﬁtness
morph, for example, indicates the two optima are part of a neutral network. For
a real-valued optimization problem, a ﬁtness morph is relatively easy to compute
by simply traveling along a straight line between the two optima and evaluating
the ﬁtness at regular intervals. When dealing with more complex representations
computing the path between two optima can be more challenging. In Section 16.7
a method for computing the morph between the rules for two cellular automata is
given.
16.2.3
Agent-Case Embeddings
A key task in investigating ﬁtness landscapes is the location of optima. When ﬁtness
is sampled from a large number of cases, then even knowing you have an optimum

462
D. Ashlock et al.
is problematic. Cases are a general notion and can be as simple as points in a data
set being modeled or as complex as individual robot path planning problems. Agent
case embeddings (ACEs) [7] are an analysis tool based on comparative performance
of agents (typically alternative solutions) on various cases. They allow us to cluster
solutions and deduce information about the geometry of the solution space, if not
the actual geometry of the ﬁtness landscape.
ACEs are a general purpose tool for exploring the variety of solutions produced
by evolutionary algorithms, as well the geometry of the space of problems the evolv-
ing population is attempting to solve. Multiple instances of the problems solved by
the evolved agents must be available or contrivable in order to use agent-case em-
beddings. The motivating example for ACEs, predating the name, appears in [12].
Deﬁnition 16.1. Given a set A = {A1,A2,··· ,An} of n agents and a set C =
{C1,C2, ...Cm} of m cases, an agent-case embedding is a simultaneous embed-
ding of A into Rm and of C into Rn obtained in the following manner. Let fCj(Ai)
be the ﬁtness or score that agent Ai obtains on case Cj. Then the agent-case matrix
M is the n×m matrix where Mi,j = fCj(Ai). The embedding in Rm of agent Ai is the
point whose coordinates are the ith row of the matrix. The embedding in Rn of case
Cj is the point whose coordinates are the jth column of the matrix.
The agent-case matrix is a book-keeping device which contains both embeddings
of agents and cases as rows and columns respectively. If n agents and m cases are
used, then the embedding of an agent is the vector in Rm whose coordinates are the
m scores of the agent on the m cases, and the embedding of a case is the vector in
Rn whose coordinates are the scores the n agents got on the speciﬁed case.
A key property of agent-case embeddings is that they ignore genotypic differ-
ences that do not impact phenotype. Therefore, agent-case embeddings are not use-
ful when neutral genotypic differences are of interest. However, they can be used
to compare solutions evolved with different representations. The behavior of agents
on problem cases is the only information relevant for an agent-case embedding and
so phenotypically similar individuals will have similar embeddings even when they
have very different genotypes or are encoded differently.
As mentioned earlier, agent-case embeddings are only useful when a variety of
problem cases are available or contrivable. For an example where contrivance is
useful, see Section 16.7. It is worth noting that this is not a very limiting restriction,
but may require some creativity, since problem cases may be contrived in a variety
of ways. When competitive agent strategies for a game are evolved, a ﬁxed set of
opponent strategies can be used as the set of cases where the score an agent receives
playing against the case strategy is the agent-case score, this is the agent-as-case
version of agent-case embeddings [5, 6]. When evolutionary computation is used to
optimize solutions to a particular ﬁtness function, a variety of other ﬁtness functions
may be used as the set of cases. When some form of initial conditions are evaluated
as part of the ﬁtness of an evolved structure a set of alternate initial conditions may
be used as the problem cases [9]. The distance between agents in the embedding
will be based on the difference in the agents’ behavior on the problem cases; care

16
Fitness Morphs and Nonlinear Projections
463
must be taken so that the agent-case embedding derived distance between agents
and cases is relevant for the particular task.
16.3
Self Avoiding Walks
The SAW problem is a good framework for discussing ﬁtness landscapes because it
changes a great deal when we change the mutation operator or the representation or
potential solutions. It uses a string of commands to direct moves on a grid. For an
application of this problem to designing RFID tags, see [21]. Fitness is evaluated by
starting in the lower left corner of the grid and then making the moves speciﬁed by
the chromosome. The sequence of moves made is referred to as the walk. If a move
is made that would cause the walk to leave the grid, then that move is ignored. The
walk is allowed to revisit cells of the grid. Fitness is equal to the number of squares
visited when the walk is completed. An optimal walk has ﬁtness equal to the number
of squares in the grid minus one. The problem is called the self-avoiding walk prob-
lem because optimal solutions do not revisit squares; they are self-avoiding walks.
Three examples of self-avoiding walks appear in Figure 16.1.
6×4
4×4
6×4
RRUULDLUURRRDRURDDDLULD
RRRUUULLLDDRURD
URDRURDRRULURULLDLLLURR
Fig. 16.1 Examples of optimal self avoiding walks and their genes in the direct representation
We now describe three different representations for the SAW problem together
with their point mutation operators.
The direct representation is a string of appropriate length over the alphabet
{U,D, L,R}. The gene is used directly to make moves on a test grid with ﬁtness
equal to the number of grid squares visited at least once. A point mutation consists
of picking a position in the string and changing the character at that location.
The direct representation is the baseline. Most published work on the SAW prob-
lem [1, 2, 20] uses the direct representation. In [20] it was shown that the opti-
mization behavior of the SAW problem changes substantially for different problem
sizes (grid dimensions). The change in behavior is conjectured to be the result of a
change in the ratio of local to global optima in the ﬁtness landscape as the problem
size changes.
The state-conditioned representation is a string of appropriate length over the
alphabet {F,R,L}. In this case, interpretation of the walk requires state information

464
D. Ashlock et al.
of an agent performing the walk. The agent starts in the lower left corner facing
to the right. The move F instructs the agent to move forward one square. The in-
struction R instructs the agent to turn right and then move forward one square. The
instruction L similarly tells the agent to turn left and advance. The point mutation
for this representation is, except for the different alphabet, the same as that for the
direct representation.
The state-conditioned representation uses a smaller alphabet, giving it a much
smaller ﬁtness landscape, and also encodes an important piece of domain knowl-
edge: going back to the square you just came from is a wasted move. This means
that there are many local optima in the direct representation that cannot be encoded
in the state-conditioned representation. We note that any global optima of the direct
representation can be encoded in the state-conditioned representation. This means
that using the state-conditioned representation sacriﬁces only local optima.
The gene-expression representation is a string of more than the appropriate
length over the alphabet {U,D,L,R,u,d,l,r}. The representation has a parameter,
e.g. 50% or 100%, that says how much longer than the number of required moves it
is. The genetic loci beyond the minimum needed are called the excess of the repre-
sentation. Upper case letters are treated as in the direct representation, while lower
case letters are ignored (not expressed). In addition, if too many loci are expressed,
those beyond the number of grids in the SAW less one are ignored: the representa-
tion never permits “extra” moves. The point mutation for this representation picks a
random position and half the time changes the upper-lower case status of the letter
at that position. The other half of the time it generates a new character uniformly at
random.
The gene-expression representation has a far larger ﬁtness landscape than the di-
rect representation. It also encodes a larger number of phenotypes. Since a walk
encoded in the gene-expression representation can have too few moves, this repre-
sentation encodes all the full-length phenotypes from the direct representation as
well as all too-short phenotypes. The ability to change between upper and lower
case letters means that the gene-expression representation has the ability to insert
and delete characters in its phenotype.
Fitness landscapes for the three representations are examined using a stochastic
hill-climber. This search algorithm ﬁrst generates a random gene and then performs
1,000,000 hill-climbing steps. A hill-climbing step consists of mutating the gene
and retaining the mutation if it does not make the ﬁtness worse. Table 16.1 shows
the results of using the stochastic hill-climber on the 5 × 5 SAW problem using
all three representations with the mutation consisting of one, two, or three point
mutations. The hill-climber is run 1000 times for each representation and type of
mutation. The number of global optima located are recorded. The large number of
hill-climbing steps mean that the ﬁnal gene has a very high probability of being an
optimum.
Looking at Table 16.1 we see that the most efﬁcient representation, with the
smallest ﬁtness landscape and incorporating domain-speciﬁc knowledge, exhibits
the worst performance. In fact performance on the 5 × 5 SAW problem improves
with the size of the ﬁtness landscape and hence the size of the search space. This

16
Fitness Morphs and Nonlinear Projections
465
Table 16.1 Number of times in 1000 trials with a stochastic hill-climber that a global opti-
mum was located for the 5×5 SAW problem
Point
Representation
Mutations Direct State Expr. 50% Expr. 100%
1
9
1
237
271
2
701
118
947
965
3
799
571
965
973
seems backwards, but is in fact easy to explain. The factor driving performance is
the neutral networks possessed by each representation. Recall that a neutral muta-
tion is one that does not change ﬁtness and that a neutral network is the set of all
genes reachable from a given gene by a series of neutral mutations.
The state-conditioned representation wastes the fewest genetic loci because it ex-
presses all its loci and never moves back-and-forth. It thus has the smallest neutral
networks. The gene-expression representation has huge neutral networks – any mu-
tation of an unexpressed loci to another unexpressed loci is a neutral mutation. In
addition, moves beyond those permitted are not used even when they are expressed.
The larger the excess in the gene-expression representation, the more unused loci
there are and hence the more neutral mutations. For all three mutation levels, the
performance increases with the size of the neutral networks in the representation.
The second obvious pattern is that more point mutations are better, at least within
the range of the experiments performed here. The explanation can be easily under-
stood in ﬁtness landscape terms. If we ignore neutral mutations, then a gene is on a
hilltop if none of its mutants are better than it. When we use a mutation operator that
changes more loci, then the number of genes one mutation away grows combinato-
rially. The effect of increasing the number of loci changed by the mutation operator
is to merge local optima, either with one another or into global optima.
If we do not ignore neutrality, then the situation is more nuanced. Instead of
having point optima, entire neutral networks become optima. At this point the def-
inition of an optimum becomes the following. A neutral network is an optimum if
no mutant of any member of the network has higher ﬁtness. There are large neu-
tral networks that are not optima. Demonstrating they are not optima can be tricky:
there may only be a few members of the network that have mutants that are better.
If we use probabilistic mutation, which has a positive probability of modifying each
location, then, technically, there are no local optima and only one global optimum.
This is because any gene may be reached in one mutation. In this situation, different
deﬁnitions are required – one might call a gene a local optimum if the probability
of improvement is less than some positive threshold.
We conclude by reiterating that the ﬁtness landscape contains points deﬁned by
the representation and has a topology generated by the variation operators. The
SAW experiments demonstrate that choice of representation and variation operator

466
D. Ashlock et al.
can have a large impact on the character of the ﬁtness landscape and the resulting
optimization performance.
16.4
Side Effect Machines
Study of the evolution of side effect machines provides an example in which non-
linear projection and other multidimensional scaling techniques contribute to un-
derstanding the ﬁtness landscape. Side effect machines (SEMs) create features for
analysis of strings on a limited alphabet such as DNA sequences. They are a super-
set of k-mer features, features that count the number of occurrences in a string of
a particular substring of length k, for example, the number of occurrences of the 3-
mer “ATG” in a DNA sequence. They were ﬁrst introduced in [11] and later used in
[8, 14, 15, 26] for DNA sequence classiﬁcation problems. They were used in [19] to
classify words in an error correcting code and in [22] to ﬁnd DNA sequence motifs.
[16] provides a detailed analysis of their ﬁtness landscapes.
A SEM is an augmented ﬁnite state machine. A ﬁnite state machine is a basic
concept in the theory of computation that provides a mathematical model of com-
putation. For more information, consult [27] or any similar textbook. A ﬁnite state
machine consists of: a set of states, an alphabet, and a transition function. A start
state and one or more accept states are designated. A string is passed through the
machine, starting in the start state, transitioning to different states based on the tran-
sition function, and stopping when it transitions to an accept state or when the end
of the string is reached. Its output is the accept state it reached or the fact that it did
not reach an accept state. A SEM does not have accept states and augments each
state with a counter. The counter keeps track of how many times the string passed
through that state. The output of a SEM is the vector of values in the counters. Each
counter is a SEM feature. An example of a SEM is shown in Figure 16.2 along with
its representation for use in evolutionary computation.
The SEM search space is huge, growing super-exponentially with the number of
states. There are n4n n-state SEMs. This means there are, for example, 4.29 billion
4-state SEMs. Some sort of search algorithm is needed to select appropriate SEMs
for a given problem. For DNA sequence classiﬁcation problems, a genetic algo-
rithm is used, with SEM ﬁtness based on the accuracy of a classiﬁer built from the
features of the SEM using a given data set. Different classiﬁers have been tried, in-
cluding k-means, k nearest neighbor, and random forest. Note that these ﬁtness func-
tions can produce fuzzy results, varying from evaluation to evaluation of the same
SEM. The ﬁtness landscapes are multi-modal. Diverse feature sets can be obtained
by doing feature selection on the best SEMs from multiple evolutionary replicates.
SEM features generated in this way produce gray-box classiﬁers that not only solve
the classiﬁcation problem, but also give biological insight into the sequences being
classiﬁed.
The ﬁtness landscape is, of course, different for every SEM classiﬁcation prob-
lem. Visualizations of the landscapes can give insight into what type of search al-
gorithm to use, how many optima there are, and how close together the optima are.

16
Fitness Morphs and Nonlinear Projections
467
1
Y
2
3
T
T
R
R
R
C
C
G
H
0
State A C G T
0
2 3 2 0
1
3 1 3 1
2
1 1 3 1
3
3 0 3 2
Fig. 16.2 On the left is an example of a SEM. To reduce clutter transitions are labeled using
IUPAC codes, a 15-letter code to represent various combinations of DNA bases. R represents
A or G; Y represents C or T; H represents A or C or T. The start state is shown in red. On
the right is its representation for use in evolutionary computation. The SEM is stored as an
2D array with the rows representing states and the columns the DNA alphbet. The value in
position (i, j) is the state to which to transition when base j is encountered in state i.
These visualizations are a guide to how long the algorithm needs to run and the qual-
ity and diversity of features to expect. Figure 16.3 shows multi-dimensional scalings
of 500 randomly-generated 4-state SEMs as ﬁtness landscapes explored by an algo-
rithm using only mutation (no crossover) for three different DNA sequence classi-
ﬁcation problems. Details of these DNA sequence classiﬁcation problems are not
important for understanding the points made in this chapter, but interested readers
can ﬁnd them in [16]. The problem represented with blue ﬁgures is the IES problem
in that paper; the problem represented in red is the RT problem; and the problem
represented in green is the sLTR/SINE problem. The distance measure used is the
mutation distance between the SEMs, the minimum number of mutations needed
to transform one SEM into another. The points are colored based on their ﬁtness,
darker for better ﬁtness. In all these landscapes, high and low ﬁtness SEMs appear
close together. This suggests that a single mutation can cause a large change in ﬁt-
ness. From this we know not to try gradient search techniques.
The red and the green ﬁtness landscapes both have high quality optima (dots
that appear black); fewer in the green than in the red landscape. The blue landscape
has some good quality optima, but none as good as the best in the green and red
landscapes. The best optima in the red landscape are scattered throughout the space,
suggesting diversity, while those in the green landscape are more clustered.
SEM ﬁtness landscapes are rich in neutral networks. SEMs with unused states
have the same ﬁtness as other SEMs with states identical to their used states, but
different values for their unused states. A neutral network of a machine with one
unused state has 4n SEMs in it with each connected to 4n other SEMs. Figure 16.4
shows a multidimensional scaling of a part of the SEM ﬁtness landscape that in-
cludes a neutral network created by an unused state. Larger or additional neutral
networks can be created when states are technically used, but relative to a particular
data set, are in practice unused. For example in an AT-rich organism a subsequence

468
D. Ashlock et al.
Fig. 16.3 Visualizations of samples of ﬁtness landscapes based on multi-dimensional scal-
ing for three different DNA sequence classiﬁcation problems. Darker circles represent better
ﬁtness.
such as CGCGCGCGCG might never occur, so a state that could only be reached
following such a sequence would be, in practice, unused. Also, in classiﬁers often
features vary in importance. So, if a SEM contains several highly effective features,
then the values of the other features do not matter much and mutations affecting
them do not change the ﬁtness of the SEM.
It is important to point out that the features created by SEMs separated by a
large mutation distance are not necessarily qualitatively different. For example, if
you take a SEM and renumber its states, you get another SEM that produces identi-
cal features. These two SEMs are far apart in terms of mutation distance, but close
together in terms of useful behavior. For this reason, we also examine the pheno-
typic ﬁtness landscape. This is a ﬁtness landscape of SEM features created using
correlation distance. Correlation distance is one minus the absolute value of the
Pearson correlation of the features, based on their values for the data set in question.

16
Fitness Morphs and Nonlinear Projections
469
Fig. 16.4 Visualization of the SEM ﬁtness landscape based on 500 randomly selected
4-state SEMs and 50 SEMs sampled from a neutral network created by an unused state.
The random SEMs are colored based on ﬁtness values for the green problem (darker circles
represent SEMs with higher ﬁtness) and the SEMs in the neutral network are brown.
Analysis of this ﬁtness landscape also enables comparison of features generated in
various different ways, like SEM features and k-mer features, and features generated
to solve different problems.
Figure 16.5 shows the phenotypic ﬁtness landscapes for the same three DNA
sequence classiﬁcation problems as in Figure 16.3. The circles represent high ﬁtness
SEM features found using 500 replicates of a genetic algorithm on 4-state SEMs.
The diamonds represent the most effective 200 k-mer features for that problem,
where k ∈{1,2,3,4}. Examination of these phenotypic ﬁtness landscapes gives us
insight into the diversity of features found by the genetic algorithm as well as their
similarity to k-mer features.
The evolved SEM features in the red ﬁtness landscapes are similar to k-mer fea-
tures. Also, there is a large group of features on the left side of the landscape, in-
cluding both SEM features and k-mer features, that are similar to each other. The
blue ﬁtness landscape contains a more diverse collection of both SEM and k-mer
features. There are SEM features that are very different from any k-mer feature
and k-mer features that are very different from any SEM feature. The green ﬁtness
landscape shows an even greater disparity between the SEM and k-mer features.
There are clumps of SEM features, suggesting that some features are found over
and over again by the genetic algorithm. Comparison with the green ﬁtness land-
scape in Figure 16.3 suggests that these are the highest quality features being found
over and over again. If this phenotypic ﬁtness landscape corresponded instead to the
red ﬁtness landscape in Figure 16.3, which has many high ﬁtness points scattered
throughout, it would instead suggest that the genetic algorithm was not efﬁciently
searching the space.

470
D. Ashlock et al.
Fig. 16.5 Visualizations of phenotypic ﬁtness landscapes based on multi-dimensional scaling
for three different DNA sequence classiﬁcation problems. The highest ﬁtness SEM features
found by a genetic algorithm are shown as circles; k-mer features are shown as diamonds.
Figure 16.6 shows a phenotypic ﬁtness landscape for the best ﬁtness SEM fea-
tures found for each of the three DNA sequence classiﬁcation problems. To create
this ﬁgure, correlation distance was calculated using the three data sets combined.
By looking at this ﬁgure, we can tell that the blue and red problems are related,
with similar features performing well for both, while the green problem is distinct.
This could be important in the biological interpretation of the features used in the
resulting gray-box classiﬁer.
This is the type of analysis that can be done with ACEs, which are applied more
extensively to the analysis of the Tartarus problem in Section 16.5, the fractal real
optimization problem in Section 16.6 and the apoptotic cellular automata problem
in Section 16.7. In this case the SEMs represent agents and the data sets represent
cases. Figure 16.6 compares the effective agents for the three different cases.

16
Fitness Morphs and Nonlinear Projections
471
Fig. 16.6 Visualization of phenotypic ﬁtness landscape containing SEM features evolved to
solve three different DNA sequence classiﬁcation problems
Figure 16.7 shows a ﬁtness landscape containing the best ﬁtness SEM features
generated by genetic algorithms using four different ﬁtness functions for the prob-
lem represented in blue in the other ﬁgures. This shows us the impact of the choice
of ﬁtness function. The ﬁtness functions represented by the blue squares and the
yellow triangles are locating similar features. The other two ﬁtness functions are
locating a comparatively more diverse set of features, and they are locating features
signiﬁcantly different from each other.
16.5
Tartarus
The Tartarus task is useful for demonstrating the utility of ACEs. It was deﬁned in
[29]. It takes place on a 6 × 6 grid bounded by walls. Figure 16.8 shows a valid
initial state for the Tartarus task. Six blocks are placed so that they neither touch the
walls nor form a close 2 × 2 group of blocks. The robot is given 80 moves in which
it may advance, turn left, or turn right. Turning is done in place and so is always
possible. The robot can push one box ahead of it but cannot push two boxes. The
robot cannot advance through a wall nor can it push a box through a wall. After 80
moves the robot is rewarded for the number of box sides against a wall. A box in
a corner is worth two points, and a box against a wall but not in a corner is worth
one point. The maximum score for a board is thus 10. An agent-case embedding
is developed by using 100 evolved robot controllers as agents and 100 randomly
selected Tartarus boards as cases, with the agent-case score being the Tartarus score
the agent receives on the case board.
The agents evolved for this demonstration use one of the simplest representations
available, a string of 16 moves over the alphabet Forward, Left, Right. The robot

472
D. Ashlock et al.
Fig. 16.7 Visualization of phenotypic ﬁtness landscape containing SEM features evolved
using four different ﬁtness functions
Fig. 16.8 A valid starting conﬁguration for the Tartarus task
loops through the string ﬁve times to generate 80 moves. In [1] is it found that the
shorter, looped string representation yields better solutions than a full 80-character
representation. The algorithm used is a standard evolutionary algorithm with a pop-
ulation of 120 strings operated on with size four single tournament selection using
two point crossover and 1-3 mutations per new structure. The number of mutations
is selected uniformly at random and the operator replaces a character in the string
with a new one. The algorithm is run for 200 generations.
A collection of 100 runs are performed and the resulting best-of-run agents are
used to generate the ACE. Figure 16.9 replicates, for a different representation, an
observation appearing in [12]. The ACE permits us to establish that there are no

16
Fitness Morphs and Nonlinear Projections
473
“typical” Tartarus boards by plotting the distribution of the distance of embeddings
of sampled boards from the mean board embedding. The lack of boards at the mean
position means that all boards have agents that perform both well and poorly on that
board. This means that the ﬁtness landscape for the robots is shaped by a tradeoff
surface where skill at some boards is bought at the cost of skill on others.
Fig. 16.9 This histogram bins 100 cases (Tartarus board) showing the distance of their em-
beddings from the mean position of all 100 embeddings
Fig. 16.10 Nonlinear projection of an ACE for Tartarus agents categorized as having an
excess of left or right turns, or neither

474
D. Ashlock et al.
When using the string based representation, evolution is likely to select control
strategies with an excess of one type of turn, right or left. The 100 16-character
strong controllers were categorized as having less than 40% left turns (category:
right), 40%-60% left turns (category: middle), and more than 60% left turns (cate-
gory: left). The same ACE used to produce Figure 16.9 was subjected to nonlinear
projection. The result is shown in Figure 16.10.
This ﬁgure shows that relatively few robots (six) are in the middle category. Ran-
dom expectation would place twenty in this category. The spatially mixed pattern of
the robots in the left and right categories suggest that being left- or right-favoring
does not grant a particular advantage with one or another subset of the 100 Tar-
tarus boards used to generate the ACE. We expected clustering in accordance with
the left-right categories, so this result was a surprise. The distribution does exhibit
some clustering of cases, consistent with the idea that the ACE can be used to locate
optima even when evolution is using samples to estimate ﬁtness. A substantially
larger set of samples would be needed to clearly establish this.
16.6
Fractal Real Optimization
Real optimization is perhaps the best studied subjects in computational intelligence
and the ﬁtness landscapes for real optimization are the best understood. We present
a novel real optimization problem, that of locating views in the Mandelbrot set [4].
This is used to demonstrate the utility of ﬁtness morphs in analysis. A rendering of
the Mandelbrot set, showing the location of view located by optimization, appears
in Figure 16.11.
Deﬁnition 16.2. The Mandelbrot series for a complex number z is given by:
z0 = z
(16.1)
zn+1 = z2
n + z
(16.2)
Deﬁnition 16.3. The divergence number for a complex number z is the index n
of the ﬁrst member of its Mandelbrot series to have |zn| ≥2. If no such number n
exists, the divergence number is inﬁnite.
A view in the Mandelbrot set is a square in the complex plane deﬁned by three
real parameters (x,y,s). The complex number z = x + yi is the upper left corner of
the square and s is the log of the side length of the square. Several examples of views
are shown in Figure 16.12. Views are located by optimization with a novel fractal
representation [10] with a ﬁtness function based on a desired appearance mask.
The mask ﬁtness function used to locate views is deﬁned as follows. Start with
the hill-shaped function
f(x,y) =
1
x2 + y2 + 1 −3 ≤x,y,≤3
(16.3)

16
Fitness Morphs and Nonlinear Projections
475
Fig. 16.11 Positions of 1000 high ﬁtness views located in the Mandelbrot set
and extract a regularly spaced 11×11 grid of values within the square of deﬁnition.
These values form the desired appearance mask. Fitness is the mean squared error
(MSE) of these values with normalized divergence numbers for an analogous grid
of points on a view. Divergence numbers are normalized by stopping computation
of the divergence number at L = 400, if they are not smaller than that, and then
dividing the divergence number by L. The ﬁtness landscape of this ﬁtness function
is a version of the function f(z) = divergence number of z, smoothed by use of the
mask. This mask is good at locating minibrots, smaller copies of the Mandelbrot set
which appear within the set.
The views shown in Figure 16.12 are enumerated with the multi-optima Sierpin-
ski Searcher (MOSS) [3]. Figure 16.13 shows ﬁtness morphs from this space. These
morphs are graphs of the mask ﬁtness function over one-dimensional transects of
a three-dimensional space of views. The transect goes not only from one position
in the Mandelbrot set to another but also changes the depth of zoom into the set
log-linearly from the scale of the ﬁrst view to the second.
Keeping in mind that lower ﬁtness values are better, the ﬁtness morphs in Figure
16.13 show a collection of different behaviors. Morph 1 shows a large number of
intermediate optima between its endpoints; morph 2 is similar but without the spikes
of very bad ﬁtness visible in morph 1. Morph 3 shows large scale features of the
landscape including a plateau of bad ﬁtness between the values of 0.6 and 0.8 for

476
D. Ashlock et al.
Best
Worst
Fig. 16.12 The best and worst 24 minibrots located using the MOSS algorithm. These views
are from a collection of 1000 distinct optima sorted by ﬁtness.
the morphing parameter and large regions of similar ﬁtness. Morph 4 crosses the
interior of the Mandelbrot set, explaining the uniformly bad ﬁtness away from the
endpoints. Morph 5 brushes three limbs of the interior of the Mandelbrot set. Morph
6 is the most boring, displaying a low hill of inferior ﬁtness.
Each of the downward spikes in the ﬁtness morphs represents a region of the
Mandelbrot set in which there is variation in the divergence numbers. Because the
mask is searching for a view with high divergence numbers in the middle and low
divergence numbers at the edges, both views in the interior of the Mandelbrot set
and views well outside the set receive bad ﬁtness values. The ﬁtness morphs per-
mit precise location of areas with variable divergence numbers and hence complex,
interesting views.

16
Fitness Morphs and Nonlinear Projections
477
1
2
3
4
5
6
Fig. 16.13 Six example ﬁtness morphs between pairs of optima of the mask ﬁtness function
on views in the Mandelbrot set. Each morph samples the ﬁtness at 400 locations between the
optima deﬁning its endpoints.
16.7
Apoptotic Cellular Automata
Fitness morphs for a real function of real parameters are computed by performing
repeated ﬁtness evaluations along a shortest path from one optimum to another. The
cellular automata described in this section are represented as arrays of integer values
forming a lookup table for the automata’s updating rule. The “path” from one rule
to the other is not well deﬁned. In this section we will show how to create morphs
for this type of discrete representation by sampling many shortest paths between a
pair of optima. We also show how to use ACEs to visualize the ﬁtness landscape for
cellular automata. Cellular automata have three parts:

478
D. Ashlock et al.
(1) A collection of cells divided into neighborhoods of each cell,
(2) A set of states that cells can have,
(3) A rule that maps possible assignments of cell states of a neighborhood of a
given cell c to a new state for c.
The automata used here are one-dimensional, an array of 401 cells in a line that
wraps so that the ﬁrst and last cells are adjacent. The neighborhoodof each cell is the
cell itself together with the two closest neighbors to the left and right. The possible
cell states are the numbers 0-7. Updating rules are speciﬁed as lookup tables. The
value of the cell states in a neighborhood are summed, yielding a number in the
range 0-35. The lookup table is an array of 36 values in the range 0-7. The updated
value of a given cell is the value of the lookup table indexed by the sum of the cell
values in that cell’s neighborhood. The cell state 0 is deﬁned to be the dead state
and we require that updating rules map an all-zero neighborhood to 0. This prevents
spontaneous generation of living cells in a dead area.
Updating of the automata described here is synchronous. New state for all cells
are computed and then they are simultaneously updated to their new values. The
initial state of the automata consists of setting all but the three cells in the center
of the cell array to 0. The middle cells are set to (1)(2)(1). The time history of a
one-dimensional cellular automata is the sequence of cell states of the automata.
Each synchronous updating is a time step. Examples of time histories of automata
are given in Figure 16.14.
The ﬁtness function used to evolve automata rules rewards the automata for grow-
ing as much as possible so long as they die before a particular time step. Since the
death is programmed into the rule, we call such cellular automata apoptotic after the
biological term for programmed cell death.
Deﬁnition 16.4. Apoptotic ﬁtness is zero if the time history contains any living
cells after the 401st time step. If no live cells remain in the ﬁnal step, then the
ﬁtness is the number of live cells in the time history from time zero to the next to
last step. We call an updating rule apoptotic if it has a nonzero apoptotic ﬁtness.
We now describe the procedure for constructing ﬁtness morphs for CA-rules.
Each rule is a potential solution to the apoptotic rule location problem.
Deﬁnition 16.5. If σ is an order on the 36 positions in a CA-rule, then σ deﬁnes a
shortest path between any two rules as follows. One end of the path is the ﬁrst rule.
The values in this rule are changed to the values in the second rule in the order given
by σ. This is the σ-path between the rules.
If two rules differ in k positions then there are k! different σ-paths between them.
In order to get a ﬁtness morph we sample 10,000 σ-paths and compute the mean
and maximum ﬁtness at each step. All possible ﬁtness morphs for the four example
automata given in Figure 16.14 are given in Figure 16.15.
The ﬁtness morphs shown in Figure 16.15 tell us something interesting. The av-
erage ﬁtness remains well above 10.0 for all six morphs. The average ﬁtness of
1,000,000 randomly generated CA-rules is 0.0319. This means that the paths be-
tween optima are consistently well above random ﬁtness. Similarly the maximum

16
Fitness Morphs and Nonlinear Projections
479
Rules:
001022033010534107003102363635467177
030021030427406003404561252452423067
001050115010226143661066770246765362
020020006021257155005573412275426621
Fig. 16.14 Time histories for four apoptotic cellular automata. Rules and automata are dis-
played in the same order.
ﬁtness on sampled paths between optima stays well above 10,000. Taken together
these observations suggest that the high-ﬁtness rules are packed into a small part of
the space. In [7] this hypothesis is explored more carefully and it is found that the
apoptotic rules are indeed dense in a very small part of the rule space. This means
the ﬁtness landscape is a complex multi-level mesa in the middle of a very large ﬂat
plain.
It is also worth noting that many of the rules never use several of the positions
in their rule. Among 390 high-ﬁtness rules examined in detail in [9] (the standard
apoptotic data set of SADS) some used only 20 of the 36 positions. Since changing
the value of an unused position is a neutral mutation, this means that there are 816 =
2.81E14 members of the neutral network for those rules. Low ﬁtness, apoptotic rules
can easily use fewer positions in their rules giving them titanic neutral networks. In
spite of the size of these neutral networks, direct comparison of the 390 rules in

480
D. Ashlock et al.
1→2
1→3
1→4
2→3
2→4
3→4
Fig. 16.15 Six example discrete ﬁtness morphs between pairs of optima of the apoptotic
ﬁtness function for apoptotic cellular automata. Each morph is the average of 10000 sample
shortest paths. The endpoints are the rules for the automata shown in Figure 16.14.
[9] found zero duplicates. In the time since, tens of thousands of apoptotic rules
representing different optima have been located, no two of which are members of
the same neutral network. This means the ﬁtness landscape has a remarkable number
of hills.
Suppose that we characterize the neutral networks in the ﬁtness landscape as
“countries” and say that two countries share a border if a point in one can be trans-
fered into a point in another by a single application of the mutation operator. Then
what the ﬁtness morphs tell us is that the apoptotic rules form a spike rising out of
a ﬂat plain of zero ﬁtness. The spike has the structure of a complex mesa in which
there are smaller and larger ﬂat spaces with cliffs for borders. These cliffs result

16
Fitness Morphs and Nonlinear Projections
481
from the fact that ﬁtness takes on only integer values and, as looking at traces of
maximum ﬁtness over the course of evolution [9] tells us, these cliffs are often quite
high – hundreds of ﬁtness units. The complex character of the ﬁtness landscape
for apoptotic cellular automata, with its large ﬂat spaces and complex connectivity,
prompted its inclusion here.
16.7.1
ACEs for Cellular Automata
In constructing an ACE for cellular automata rules we place the rules in the role
of agents. While the rules were evolved with an initial condition of 0 save for a
(1)(2)(1) in the center of the cell array, they can be run with any boundary condition.
Given that we have 8 cell states, there are 63 initial conditions that replace (1)(2)(1)
with (a)(b)(a) where not both of a and b are 0. We treat these 63 initial conditions
as cases and construct the ACE in the usual manner, with the agent-case score being
the apoptotic ﬁtness of the agent using the initial conditions of the case. Each rule
is now mapped to a vector of 63 integer values. A nonlinear projection of this ACE
is shown in Figure 16.16.
Fig. 16.16 A nonlinear projection of the ACE for cellular automata rules. A set of 390 rules
appear in the projection. Glyph types are for thirteen experiments varying population size and
mutation from [9]. A gray outline was added to make the square of variation more visible.

482
D. Ashlock et al.
The nonlinear projection treats the rules from the SADS as points, one rule from
each of 30 replicates in each of thirteen experiments. The thirteen experiments
formed a parameter study in [9]. The main result that the NLP supports is this:
the algorithm is quite robust to the choice of population size and variation opera-
tor. This result makes sense in terms of what we know about the ﬁtness landscape
– there is relatively little gradient information and there are enormous ﬂat spaces.
This means that the high ﬁtness individuals in a population at a given time will
probably be descended from a single population member that made a large jump up
a ﬁtness cliff in the recent past. The neutral networks (ﬂat spaces) act to level the
playing ﬁeld between more and less aggressive mutation operators. Within a neutral
network, evolution engages in random walks until if ﬁnds a cliff. More aggressive
mutation operators random walk faster, but they also walk off the (more common)
downward cliffs more often.
The central distribution of points in the NLP, as well as its square shape, can
be explained by looking at individual coordinates of the ACE. There are two pairs
of sets of initial conditions for which many rules score high in one but not the
other. This creates two large sources of variation in four directions. The nonlinear
projection maps the pair variations in the two pairs of initial conditions onto two
orthogonal axes. The scatter in these two coordinates of the ACE yields the square.
The centrality comes from the fact that a majority of rules have high ﬁtness only for
the initial conditions under which they were evolved. The ACE also demonstrates
another sense in which the rules are robust. Their ﬁtness is well above the random
background for many initial conditions.
16.8
Conclusions
Fitness landscapes come in many shapes and sizes. A landscape can be as simple
as a single hill, like that provided by the onemax problem [1] or as complex as
the sampled interaction between agents and boards in Tartarus. When agents com-
pete against other agents, as in algorithms training game playing agents, we can
even achieve time-varying landscapes, an interesting topic beyond the scope of this
chapter.
The SAW problem gave us an example of a family of rugged ﬁtness landscapes
for a simple problem, solvable by hand. We also saw that changing any of the com-
ponents of the ﬁtness landscape (representation or variation operators) can have a
dramatic effect on its shape and character. This means that paying close attention
to representation and variation operators is likely to pay beneﬁts. This is a conse-
quence of the famous no free lunch theorem [32] that, among other things, implies
that using a generic optimizer is not the best strategy.
As we showed with the SEM example, it is beneﬁcial to look at both the phe-
notypic ﬁtness landscape as well as the genotypic landscape. The two may be quite
distinct and offer very different perspectives on the optimization task of interest.
Both give insight into the number and variety of optima, and the phenotypic ﬁtness
landscape provides a visual comparison with features created using other methods.

16
Fitness Morphs and Nonlinear Projections
483
Both the ﬁtness morph and the NLP methods are useful for understanding the
nature of the more opaque high dimensional landscapes. Each techniques is appli-
cable whenever you are able to calculate a distance between either the phenotypes or
genotypes of potential solutions. They provide contrasting views of the same high-
dimensional space and so using both can provide insight not otherwise available.
The cellular automata example shows it is possible to create a meaningful distance
measure even when dealing with complex discrete spaces. Here, by using initial
conditions as additional problem cases, an ACE was constructed when a natural one
was not available inside the original problem description.
When dealing with a tightly related class of problems such as Tartarus boards or
apoptotic cellular automata, examining a single instance of a problem is insufﬁcient
to understand the landscape. Approaches for understanding multiple problem cases
together, such as ACEs, are valuable. In particular ACEs permit the examination not
only of the landscape of solution but the landscape of problems. This permits us to
locate pathological instances of the problem as well as grouping similar problem
instances.
As a whole, the diverse examples in this chapter suggest a vast array of problems
for which evolutionary computation is an appropriate tool, and beyond that a vast
array of representations and variation operators unexplored potential. We are just
beginning to analyze the space of ﬁtness landscapes, and it is strange indeed.
References
[1] Ashlock, D.: Evolutionary Computation for Optimization and Modeling. Springer, New
York (2006)
[2] Ashlock, D., Bryden, K.M., Corns, S., Schonfeld, J.: An updated taxonomy of evo-
lutionary computation problems using graph-based evolutionary algorithms. In: Pro-
ceedings of IEEE Congress on Evolutionary Computation, pp. 403–410. IEEE Press,
Piscataway (2006)
[3] Ashlock, D., Bryden, K.M., Gent, S.: Multiscale feature location with a fractal rep-
resentation. Intelligent Engineering Systems Through Artiﬁcial Neural Networks 19,
173–180 (2009)
[4] Ashlock, D., Jamieson, B.: Evolutionary computation to search mandelbrot sets for aes-
thetic images. Journal of Mathematics and Art 1(3), 147–158 (2008)
[5] Ashlock, D., Kuusela, C., Rogers, N.: Hormonal systems for prisoners dilemma agents.
In: Proceedings of the 2011 Conference on Computational Intelligence in Games, pp.
63–70 (2011)
[6] Ashlock, D., Kuusela, C., Cojocaru, M.: Shopkeeper strategies in the iterated prisoner’s
dilemma. In: Proceedings of IEEE Congress on Evolutionary Computation, pp. 1063–
1070. IEEE Press, Piscataway (2011)
[7] Ashlock, D., Lee, C.: Agent-case embeddings for the analysis of evolved systems. IEEE
Transactions on Evolutionary Computation 17(2), 227–240 (2013)
[8] Ashlock, D., McEachern, A.: Ring optimization of side effect machines. Intelligent En-
gineering Systems Through Artiﬁcial Neural Networks 19, 165–172 (2009)
[9] Ashlock, D., McNicholas, S.: Fitness landscapes of evolved cellular automata. IEEE
Transactions on Evolutionary Computation 17(2), 198–212 (2013)

484
D. Ashlock et al.
[10] Ashlock, D., Schonfeld, J.: The Sierpinski representation for real optimization. In: Pro-
ceedings of IEEE Congress on Evolutionary Computation, pp. 87–94. IEEE Press, Pis-
cataway (2007)
[11] Ashlock, D., Warner, E.: Classifying synthetic and biological DNA sequences with side
effect machines. In: Proceedings of the 2008 IEEE Symposium on Computational In-
telligence in Bioinformatics and Computational Biology, pp. 22–29 (2008)
[12] Ashlock, D., Warner, E.: The geometry of tartarus ﬁtness cases. In: Proceedings of
IEEE Congress on Evolutionary Computation, pp. 1309–1316. IEEE Press, Piscataway
(2008)
[13] Ashlock, D., Schonfeld, J.: Nonlinear projection for the display of high dimensional
distance data. In: Proceedings of IEEE Congress on Evolutionary Computation, vol. 3,
pp. 2776–2783. IEEE Press, Piscataway (2005)
[14] Ashlock, W., Datta, S.: Detecting retroviruses using reading frame information and side
effect machines. In: IEEE Symposium on Computational Intelligence in Bioinformatics
and Computational Biology, pp. 1–8 (2010)
[15] Ashlock, W., Datta, S.: Distinguishing endogenous retroviral LTRs from SINE elements
using features extracted from evolved side effect machines. IEEE/ACM Transactions on
Computational Biology and Bioinformatics 9(6), 1676–1689 (2012)
[16] Ashlock, W., Datta, S.: Evolved features for DNA sequence classiﬁcation and their
ﬁtness landscapes. IEEE Transactions on Evolutionary Computation 17(2), 185–197
(2013)
[17] Borenstein, Y., Poli, R.: Decomposition of ﬁtness functions in random heuristic search.
In: Stephens, C.R., Toussaint, M., Whitley, L.D., Stadler, P.F. (eds.) FOGA 2007. LNCS,
vol. 4436, pp. 123–137. Springer, Heidelberg (2007)
[18] Borg, I., Groenen, P.: Modern Multidimensional Scaling: Theory and Applications, 2nd
edn. Springer (2005)
[19] Brown, J., Houghten, S., Ashlock, D.: Side effect machines for quaternary edit metric
decoding. In: IEEE Symposium on Computational Intelligence in Bioinformatics and
Computational Biology, pp. 1–8 (2010)
[20] Bryden, K.M., Ashlock, D.A., Corns, S., Willson, S.J.: Graph based evolutionary algo-
rithms. IEEE Transactions on Evolutionary Computation 10, 550–567 (2006)
[21] Montgomery, J., Randall, M., Lewis, A.A.: Differential evolution for rﬁd antenna de-
sign: a comparison with ant colony optimisation. In: Proceedings of the 13th Annual
Conference on Genetic and Evolutionary Computation, GECCO 2011, pp. 673–680.
ACM, New York (2011)
[22] Noori, F.A., Houghten, S.: A multi-objective genetic algorithm with side effect ma-
chines for motif discovery. In: IEEE Symposium on Computational Intelligence in
Bioinformatics and Computational Biology, pp. 1–8 (2012)
[23] Oksanen, J., Guillaume Blanchet, F., Kindt, R., Legendre, P., Minchin, P.R., O’Hara,
R.B., Simpson, G.L., Solymos, P., Stevens, M.H.H., Wagner, H.: vegan: Community
Ecology Package. R package version 2.0-1 (2011)
[24] Pitzer, E., Affenzeller, M.: A comprehensive survey on ﬁtness landscape analysis. In:
Fodor, J., Klempous, R., Su´arez Araujo, C.P. (eds.) Recent Advances in Intelligent En-
gineering Systems. SCI, vol. 378, pp. 161–191. Springer, Heidelberg (2012)
[25] R Development Core Team. R: A Language and Environment for Statistical Computing.
R Foundation for Statistical Computing, Vienna, Austria (2011)
[26] Schonfeld, J., Ashlock, D.: Classifying Cytochrome c Oxidase subunit 1 by translation
initiation mechanism using side effect machines. In: IEEE Symposium on Computa-
tional Intelligence in Bioinformatics and Computational Biology, pp. 1–7 (2010)

16
Fitness Morphs and Nonlinear Projections
485
[27] Sipser, M.: Introduction to the Theory of Computation, 2nd edn. Thomson (2006)
[28] Stadler, P.F.: Linear operators on correlated landscapes. Journal De Physique I 4, 681–
696 (1994)
[29] Teller, A.: The evolution of mental models. In: Kinnear, K. (ed.) Advances in Genetic
Programming, ch. 9. The MIT Press (1994)
[30] Venables, W.N., Ripley, B.D.: Modern Applied Statistics with S, 4th edn. Springer, New
York (2002)
[31] Weinberger, E.: Correlated and uncorrelated ﬁtness landscapes and how to tell the dif-
ference. Biological Cybernetics 63(5), 325–336 (1990)
[32] Wolpert, D.H., Macready, W.G.: No free lunch theorems for optimization. IEEE Trans-
actions on Evolutionary Computation 1(1), 67–82 (1997)
[33] Wright, S.: The roles of mutation, inbreeding, crossbreeding, and selection in evolution.
In: Proceedings of the Sixth International Congress on Genetics, pp. 355–366 (1932)

Chapter 17
Visual Analysis of Discrete Particle Swarm
Optimization Using Fitness Landscapes
Sebastian Volke, Simon Bin, Dirk Zeckzer, Martin Middendorf,
and Gerik Scheuermann
Abstract. Particle swarm optimization (PSO) is a metaheuristic where a swarm of
particles moves within a search space in order to ﬁnd an optimal solution. PSO
has been applied to continuous and combinatorial optimization problems in various
application areas. As is typical for metaheuristics, it is also not easy for PSO for
algorithm designers to understand in detail how and why changes in the design of a
PSO algorithm inﬂuence its optimization behavior. It is shown in this chapter that
a suitable visualization of the optimization process can be very helpful for under-
standing the optimization behavior of PSO algorithms. In particular, it is explained
how the visualization tool dPSO-Vis can be used to analyze the optimization be-
havior of PSO algorithms. The two example PSO algorithms that are used are the
SetPSO and the HelixPSO. Both algorithms can be used for solving the RNA sec-
ondary structure prediction problem.
17.1
Introduction
Many optimization problems that occur in science or in economical applications
can be modeled as combinatorial optimization problems. Unfortunately, it is of-
ten very hard to ﬁnd optimal solutions to such problems. Therefore different types
of heuristics are used to solve such problems. Metaheurstics, e.g., genetic algo-
rithms, ant colony optimization, and particle swarm optimization (PSO), have the
Sebastian Volke · Simon Bin · Martin Middendorf · Gerik Scheuermann
Department of Computer Science, University of Leipzig, Augustusplatz 10,
04109 Leipzig, Germany
e-mail: {volke,sbin,middendorf,
scheuermann}@informatik.uni-leipzig.de
Dirk Zeckzer
Department of Computer Science, University of Kaiserslautern, Postfach 3049,
67653 Kaiserslautern, Germany
e-mail: zeckzer@informatik.uni-kl.de
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
487
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_17, c⃝Springer-Verlag Berlin Heidelberg 2014

488
S. Volke et al.
advantage that they can be applied to different combinatorial optimization prob-
lems. A common principle that is employed by several metaheuristics is to keep
a population of good solutions and use it to create new and hopefully better solu-
tions. A metaheuristic usually has several parameters that inﬂuence its optimization
behavior, e.g., the size of the population. The best parameter values for a meta-
heuristic depend on the problem instance. A general problem with metaheuristics
is that it is very difﬁcult to analyze their optimization behavior. Thus, it is difﬁcult
to understand why some metaheuristics work better than others on certain problems
and how this is inﬂuenced by the different types of the optimization problems.
In this chapter, we show that a suitable visualization of the optimization pro-
cess can be very helpful for gaining a better understanding of metaheuristics. In
particular, we consider PSO algorithms for discrete optimization problems using
a visualization tool – called dPSO-Vis – that has been presented very recently for
such algorithms [15]. The dPSO-Vis visualization tool leverages the fact that the
movement behavior of the particles in a discrete PSO algorithm deﬁnes a ﬁtness
landscape on the set of possible solutions. The idea is then to visualize the ﬁtness
landscape topologically and show the particles within that landscape.
In this chapter, dPSO-Vis is used to visualize the optimization behavior of two
PSO algorithms, namely SetPSO [12] and HelixPSO [6, 7, 8], for solving the RNA
secondary structure prediction problem.
17.2
Discrete Optimization Problems and RNA Folding
Different types of combinatorial optimization problems occur in various application
domains, e.g., assignment problems, routing problems, subset problems, or permu-
tation problems. Often, it is possible to exploit special properties of the particular
problem to ﬁnd solutions more efﬁciently. But nevertheless, many of these problems
are NP-hard, which means that it is unlikely that an optimal solution can be found
in polynomial time [5].
Formally, a combinatorial optimization problem consists of a ﬁnite set of conﬁg-
urations X and a cost function f : X →R that assigns a real value to each conﬁg-
uration. The task is to ﬁnd an optimal solution, i.e., a conﬁguration that minimizes
the cost function (resp. maximizes the ﬁtness function). For some combinatorial
optimization problems a neighborhood relation χ ⊂X × X exists. In any case, the
heuristic algorithm has to deﬁne such a relation in order to operate. We will later use
this fact for the analysis of such algorithms. This neighborhood relation associates
each conﬁguration c ∈X with a set of neighbors N(c) = {x ∈X : (c,x) ∈χ}. Thus,
we have a conﬁguration space (X,χ). Within this space, concepts such as locality
exist, which can also be transferred to the cost function f.
In this chapter the RNA folding problem is considered as an example problem. In
this problem, an RNA molecule is given that can be described as a sequence of four
different types of nucleotides. Each type of nucleotide is characterized by one of
the bases adenine (A), guanine (G), cytosine (C), or uracil (U). The 3-dimensional
structure of an RNA molecule depends on hydrogen bonds that are formed between

17
Visual Analysis of Discrete PSO
489
some pairs of nucleotides that are not neighbors in the sequence. A hydrogen bond
can occur only between G and C, or A and U, or G and U. Two such connected
nucleotides are called a base pair. There are a few additional restrictions that a set
of base pairs has to conform to in order to be feasible (for details see, e.g., [8]).
The RNA folding problem is to ﬁnd a feasible set of base pairs, i.e., a secondary
structure, with maximum free energy (with respect to some energy model, for de-
tails see [8]). Both algorithms that are considered in this chapter use helices as the
elements that deﬁne a secondary structure where a (maximal) helix is a (maximal)
set of two or more adjacent base pairs that form a ladder-like structure. Thus, a
secondary structure is a set of helices that determines a feasible set of base pairs.
The RNA folding problem is a subset problem. For this type of combinatorial
optimization problem, a set of objects S and a conﬂict relation C ⊂S × S that lists
mutually exclusive elements of S are given. The set of conﬁgurations is the set of all
feasible subsets of S, i.e., X = { ˆS ⊂S|∀x,y ∈ˆS : (x,y) /∈C}. There is a cost value
associated with each such subset, and the task is to ﬁnd the optimal subset (i.e., one
with minimal total costs in case of minimization problems). In the case of RNA
folding, S is the set of (maximal) helices and the conﬂict relation C contains pairs
of helices that cannot occur within the same secondary structure.
Table 17.1 lists the nucleotide sequences of three example RNAs that are used
throughout this chapter. Table 17.2 additionally lists the number of helices and how
many admissible subsets are possible.
Table 17.1 RNA molecules from different species with their nucleotide sequence
Name
Sequence
Bacillus anthracis str. UCCGCAGUAGCUCAGUGGUAGAGCUAUCGGCUGUUAACCGAUC
GGUCGUAGGUUCGAGUCCUACCUGCKGAGCCA
Aeropyrum pernix
GGGCCCGUAGCUCAGCCAGGACAGAGCGCCGGCCUUCUAAGCC
GGUGGUCCCGGGUUCAAAUCCCGGCGGGCCCGCC
Toxoplasma gondii
AGCACCGUAGCUCAGUGGGAGAGUGGGGGGCUCAUAACCCCCA
GGUCCAUGGAUCGAAACCAUGCGGUGCUA
Table 17.2 RNA molecules from different species with their number of helices #H and their
number of admissible subsets of helices #A
Name
#H #A
Bacillus anthracis str. 35 1162
Aeropyrum pernix
60 7876
Toxoplasma gondii
39 1828
17.3
Particle Swarm Optimization
The particle swarm optimization (PSO) metaheuristic was introduced by Kennedy
and Eberhart [10] and was inspired by the behavior of a ﬂock of birds when search-
ing for food. Originally, PSO was used to solve continuous optimization problems

490
S. Volke et al.
but meanwhile it has also been applied to various discrete optimization problems.
The basic idea is to simulate a swarm of n particles moving within a search space
in order to ﬁnd an optimum. At each time step t, the position pi(t) of particle i is
updated:
pi(t + 1) = pi(t)+ vi(t + 1)
where vi(t) is the velocity of i. The interesting part is the velocity update of particle
i,
vi(t + 1) =ωp ·vi(t)+ ωc ·R1 ∗(yi(t)−pi(t))
1
23
4
cognitive component
+
ωs ·R2 ∗(ˆp(t)−pi(t))
1
23
4
social component
,
(17.1)
where ωp, ωc, and ωs are parameters called the inertia weight, cognitive accelera-
tion constant and social acceleration constant, respectively. R1 and R2 are vectors of
random numbers in [0,1], and ∗denotes piecewise multiplication of vectors. It can
be observed that the velocity is adjusted to stay near good positions that the particle
has found so far (personal best position (pbest) yi(t)), and to move towards the best
position that the swarm has found so far (the global best position (gbest) ˆp(t)). The
former inﬂuence is called the cognitive component of the velocity update and the
latter is called the social component. There exist many variants of PSO algorithms,
e.g., instead of using the global best solution during the velocity update, a neigh-
borhood topology can be deﬁned for the swarm and the neighborhood best position
(lbest) is used for velocity update (for more details see, e.g., [1] or [2]).
This formulation requires the optimization problem to be continuous, i.e., the
conﬁguration space needs to be an afﬁne space or a vector space. Nevertheless, PSO
algorithms have been proposed that can be applied to a discrete search space. In
the case of RNA folding problems, there are the SetPSO [12] and the HelixPSO,
proposed in [7]. Extensions and variants of HelixPSO have been investigated in
[6, 8].
17.3.1
SetPSO
SetPSO is the ﬁrst PSO algorithm for the RNA folding problem and has been pro-
posed by Neethling and Engelbrecht [12]. As other PSO algorithms for discrete
optimization problems, SetPSO differs from the standard PSO scheme that has been
described above. It searches on the set of helices of a given RNA sequence and rep-
resents secondary structures as feasible sets of helices. Hence, the current position
p(t) ∈X of a particle is characterized by its set of helices. Direction is represented
with target conﬁgurations or target solutions, usually a combination of the particle’s
pbest and lbest solution, i.e., lbest ∪pbest.
Movement of a particle is deﬁned as a change in the particle’s current set of
helices. This is done by the addition and by the removal of helices from the set

17
Visual Analysis of Discrete PSO
491
of helices that corresponds to the current position of the particle. A set O ⊂S of
helices which is removed from the particle’s position is computed from the empty
set by adding a helix with probability pI > 0 if it is neither in the pbest solution
nor in the lbest solution. A candidate set P of helices that might be added to the
particle’s position is computed from the empty set by adding each helix of the target
solution with probability pC > 0 and each helix from the set of all helices with
probability pR > 0. To avoid base pair conﬂicts, all helices in the set O are removed
before those of the set P are added (if feasible). The velocity update in SetPSO is
the computation of the sets O and P. The position update is the actual computation
of the new solution, i.e., the computation of the new subset of helices. More details
of SetPSO can be found in [12].
In this work, we use a swarm topology where all particles are connected to each
other. Thus, all particles are drawn to the globally best solution. It is not speciﬁed
whether this should be the historical or the current best solution. Later, we will refer
to the “global memory” variant of SetPSO when the historical best solution is used,
and to the “no global memory” variant when only temporally local data is used.
17.3.2
HelixPSO
Different from the SetPSO algorithms, HelixPSO uses maximal helices as the basic
elements to form a solution to the RNA folding problem. Thus, for HelixPSO, S is
the set of maximal helices. The position of a particle is represented as a permutation
of the elements of S. This permutation can be converted to a solution of the RNA
folding problem by computing a maximal feasible subset of S as follows: starting
with the ﬁrst helix of the permutation and iteratively always selecting the next fea-
sible helix. Note that different particle positions (permutations) might lead to the
same RNA structure (maximal subset of maximal helices).
Each particle i has a set of candidate target positions Ti and for each t ∈Ti a
weight w(t) > 0. The particle tries to move closer to the target positions by swapping
elements of the particle’s current permutation such that it becomes more similar to a
target permutation. The relative weight of a position in Ti determines the probability
that it is chosen as a target. Ti is initialized with a single random position of weight
1.0, i.e., a permutation that is generated randomly so that each permutation has
the same probability. After each iteration of HelixPSO, the weight of each target
position is decreased by multiplication with a parameter ρ, 0 < ρ < 1. Then the
personal best position and either the global best position or the cluster best position
(details are given later) are added to Ti with weight ωc ·R1 and ωs ·R2, respectively,
where R1 and R2 are random numbers chosen uniformly in [0,1]. The constants
ωc > 0 and ωs > 0 refer to the cognitive and to the social component, respectively.
Observe that this is very similar to the impact of pbest and gbest (or lbest) in the
standard PSO scheme.
The concern of the position update is to make a particle more similar to some
target permutation by swapping positions in its helices list. Since not every swap in
the permutation might actually change the represented RNA structure, a series of α

492
S. Volke et al.
swaps is performed. Thus, α is the ﬁrst important parameter of the algorithm. With
a probability of β > 0, a directed swap, i.e., a swap towards a target chosen from Ti,
is done, otherwise a random swap of two elements in the permutation is performed.
More details about directed swaps can be found in [8].
HelixPSO uses a swarm topology that consists of clusters of particles. Every
cluster is associated with a cluster best particle, i.e., a historical best position is not
considered, but the current best position within the cluster. For every particle except
the cluster best particle, the cluster best is used as the lbest position. The cluster best
particle uses the gbest position instead. The idea of this behavior is to have multi-
ple clusters that explore the search space more or less independently. The particles
within a cluster should stay close to each other by orienting themselves towards the
cluster best. On the other hand, the clusters should collaborate and join each other
at the exploration of known good positions in the search space. To achieve this, the
cluster best moves in the direction of the currently known global best position.
HelixPSO also contains two optimization variants: i) usage of 1-elitism and ii) a
simulated annealing based heuristic to control desirable follow-up particle positions.
1-elitism means that after each simulation step, the position of the worst particle is
reset to the global best position. In doing so, the target vector of this particle is not
affected, though. The original version of the algorithm selected follow-up positions
with a greedy strategy: the position was only accepted if it possessed better ﬁtness.
The simulated annealing-like version relaxes this constraint by allowing poorer so-
lutions depending on the temperature. At the beginning, almost every solution is
accepted, leading to a large swarm diversity. During the cooling process, the prob-
ability to allow changes for the worse is decreased and the behavior becomes more
greedy. For more details on Helix-PSO see [6, 8].
17.4
Fitness Landscape Induced by PSO Algorithms
A difﬁculty with discrete PSO algorithms is that it is not clear how to deﬁne a
suitable neighborhood relation that can be used to deﬁne a ﬁtness landscape. An
idea is to use the possible transitions between the conﬁgurations that particles can
make during the run of the PSO (following certain rules that are determined by
the algorithm) to deﬁne a neighborhood relation on the set of conﬁgurations. By
this deﬁnition a ﬁtness landscape results that allows to analyze the algorithm’s opti-
mization behavior for the given problem. But there is also a problem with this idea
since for typical discrete PSO algorithms, e.g., the PSOs that are considered in this
chapter, the particle movement contains a random component. Then it can happen
that, in principle, every conﬁguration can be reached by a particle from every other
conﬁguration within one time step.
A SetPSO particle can in principle open all helices at once and close an arbitrary
set of new helices. Even though such an incident has a very small probability, it is
possible. Similarly, considering a particle of HelixPSO, it is possible that it com-
pletely changes the resulting RNA conformation in one time step by swapping just
two elements in the permutation. In some cases, there exist very few such swaps,

17
Visual Analysis of Discrete PSO
493
making the transition from one conﬁguration to certain other ones very improbable.
But it can happen.
Consequently, if every transition that is possible for a particle results in a neigh-
borhood relation for the corresponding conﬁgurations, the neighborhood graph
would be the complete graph. This is not desirable, because the ﬁtness landscape
would be topologically trivial and the neighborhood graph would show transition
events that are very unlikely. In order to be able to properly analyze the optimiza-
tion behavior of discrete PSO algorithms, we propose to omit all edges with low
transition probabilities and to include only those edges that correspond to single
elementary operations, which are used by the particles to change their current con-
ﬁguration.
For SetPSO, the elementary operations to deﬁne a transition from one conﬁgura-
tion into another are the removal, addition, or exchange of an element of S, i.e., of
one helix. Thus, it is required for the neighborhood relation that two adjacent conﬁg-
urations differ by only one element. Since such transitions are very likely to happen,
the neighborhood graph shows the most important transitions without becoming too
cluttered.
For HelixPSO, the elementary operation is a swap of two maximal helices in
the permutation of all maximal helices. Thus, it is required for the neighborhood
relation that only one swap is necessary to transform a permutation corresponding
to one conﬁguration into a permutation corresponding to an adjacent conﬁguration.
Observe that we do not use the permutations themselves as conﬁgurations, but the
maximal sets of helices that are derived from them. In this manner, the size of the
ﬁtness landscape can be reduced drastically, in exchange to becoming much denser.
Table 17.3 shows the sizes of the resulting ﬁtness landscapes for both SetPSO and
HelixPSO for three example RNA molecules.
Table 17.3 Sizes of the example ﬁtness landscapes for SetPSO and HelixPSO. X: set of
conﬁgurations, χ: neighborhood relation, i.e., |χ| is the number of edges in the neighborhood
graph.
Name
SetPSO
HelixPSO
|X|
|χ|
|X|
|χ|
Bacillus anthracis str. 1162
15851
407
75581
Aeropyrum pernix
7876 146279 1786 1432126
Toxoplasma gondii
1828
28015
653
184888
17.5
Visual Analysis Method: dPSO-Vis
The software tool discrete Particle Swarm Optimization-Visualization (dPSO-Vis)
implements a new visualization method for discrete PSO algorithms that has been
proposed very recently by Volke et al. [15]. The method deﬁnes a ﬁtness landscape
that is associated with a discrete PSO and a corresponding optimization problem
as described above to provide a visual analysis of the optimization behavior of the

494
S. Volke et al.
PSO. The dPSO-Vis tool uses a terrain metaphor to visualize this ﬁtness landscape.
The images that can be created with dPSO-Vis can also show information about the
locations of the particles and their movement within the ﬁtness landscape.
In the following subsections, dPSO-Vis is described. At ﬁrst, the topological
methods for understanding the ﬁtness landscapes are explained. Then, the computa-
tion and visualization of the topological landscape is shown. Finally, the visualiza-
tion of the particles within the topological landscape is outlined.
17.5.1
Topology of Discrete Fitness Landscapes
Starting from the set of conﬁgurations X and the ﬁtness function f : X →R, that
are given by the optimization problem (see Section 17.2), and the neighborhood
relation χ that reﬂects the search behavior of the swarm (see Section 17.4), we have
a discrete search space (X,χ) and a discrete ﬁtness landscape (X,χ, f). Because
we consider discrete optimization problems, the search space can be represented as
a simple, undirected graph G = (V,E), where V = X and E is determined by χ. A
ﬁtness landscape can then also be described by (G, f). For the case studies in this
chapter, G is connected and called the neighborhood graph. Note that we consider
minimization problems in this chapter and that the function f assigns a cost value
(energy value) to every conﬁguration. Hence, even though we call the landscapes
ﬁtness landscapes they are actually cost landscapes and therefore low points in the
landscape correspond to good solutions, i.e., solutions with a high ﬁtness.
To represent the topology of the landscape, the barrier tree data structure can be
used. It has been proposed by Flamm et al. [4] as a result of their topological analysis
of ﬁtness landscapes (which they called energy landscapes). Using the results of this
analysis and the barrier tree for our visualization method has the advantage that it
can be applied to a wide range of optimization problems and their PSO algorithms,
even when the resulting ﬁtness landscapes are highly degenerate. The main results
from Flamm’s work are brieﬂy described in the following paragraphs.
Among the vertices of the neighborhood graph, which are of special interest here,
are the local minima. The set of local minima, M , is denoted as
M = {v ∈V : ∀w ∈N(v) : f(v) ≤f(w)} ,
where N(x) = {y ∈V : {x,y} ∈E} is the set of neighbors of x. It is useful to identify
local minima that are directly connected in G. Thus, M is deﬁned as the set of all
connected components of G[M ], i.e., the subgraph of G with vertex set M .
A central concept in Flamm’s work is the notion of cycles. A cycle of x ∈V with
f(x) ≥η at height η is the connected component of the corresponding level set
{y ∈V|f(y) ≤η} that contains x. The component is denoted with Cη(x). Addition-
ally, the open cycle C◦
η(x) is basically Cη(x) without the points that have cost η,
formally:

17
Visual Analysis of Discrete PSO
495
C◦
η(x) =
⎧
⎪
⎨
⎪
⎩

η′<η Cη′(x)
if η > f(x)
{x}
if η = f(x) and x ∈M
/0
otherwise
With a gradually increasing value of η, the corresponding cycles around the local
minima become larger and eventually merge. The cost value ηm that leads to a merge
event of two or more cycles is called the barrier between the corresponding local
minima. The reason for choosing this name is that every path connecting two such
minima contains at least one vertex with a cost value at least as high as the barrier.
Beside the barriers, i.e., the cost values, the actual vertices, where two cycles con-
tact, are of interest. These vertices are called saddle points. To formally deﬁne them,
let Pxy be the set of all graph-theoretic walks between x and y in G. Then, a saddle
point between two local minima x,y ∈M is a point s ∈V such that
(1) ∀η < f(s) : Cη(x)∩Cη(y) = /0,
(2) Cf(s)(x) = Cf(s)(y), and
(3) ∃p ∈Pxy : s ∈p and ∀m ∈M : G[C◦
f(s)(m)∩p] is connected.
Similar to local minima, it is useful to deﬁne weak equivalence classes of saddle
points. Flamm et al. considered two saddle points p and q to be weakly equivalent,
if f(p) = f(q) and Cf(p)(p) = Cf(p)(q). The set of weak equivalence classes of
saddle points is denoted with S.
Now, the barrier tree B(G, f) = (U,E) of a ﬁtness landscape can be deﬁned as
a directed tree. The vertices are the equivalence classes of local minima and saddle
points, i.e., U = M∪S. The barrier tree reﬂects the inclusion relation between the
corresponding level sets. The arc set of the barrier tree can be deﬁned as follows:
(x,y) ∈E ⊂U × U ⇐⇒Cf(x)(x) ⊃Cf(y)(y) and
∄z ∈U : Cf(x)(x) ⊃Cf(z)(z) ⊃Cf(y)(y)
(17.2)
Flamm et al. [4] gave a different deﬁnition based on paths in the neighborhood
graph, which is equivalent to the deﬁnition given here. Additionally, their work con-
tains a proof that the barrier tree is a rooted tree, given that G is connected.
The barrier tree allows to easily ﬁnd the minima within the search space and also
shows the barriers between them. This makes it especially useful for the ﬁeld of
computational biology, where it has been applied several times, e.g., [3, 9].
In order to have the barrier tree reﬂecting the whole search space, Volke et al.
[15] proposed to add the global maximum to the set of vertices and to insert an arc
from the global maximum to the root of the barrier tree. Then, every arc represents
a certain interval of the cost function (i.e., the interval between the costs of the ver-
tices that are connected by the arc) and altogether the whole cost range between
the maximum cost and minimum cost is covered by the arcs. Even though the bar-
rier tree already contains important structural information, it is useful to associate
the actual conﬁgurations of the optimization problem with the corresponding parts
of the tree to support further analysis. Volke et al. [15] deﬁned a partition of the
conﬁguration space into so called basins and associated every barrier tree arc with
one basin. Given an arc a = (v1,v2) of G, the basin B(a) is basically the connected

496
S. Volke et al.
component of f −1([f(v2), f(v1)]) that contains v2. Here f −1([f(v2), f(v1)]) is the
set of all conﬁgurations with a cost value between between f(v2) and f(v1). More
formally,
B((v1,v2)) =

C◦
f(v1)(v2)\Cf(v2)(v2)

∪v2.
(17.3)
The barrier tree itself can be computed with the ﬂooding algorithm [3, 4]. This al-
gorithm can be easily extended to also compute the partitioning of the conﬁguration
space.
17.5.2
Visualizing the Topology Using a Landscape Metaphor
An obvious approach to visually understand the topology of a ﬁtness landscape
would be a layout of the barrier tree. However, since we are interested in more than
the structure of the search space and thus need to visualize additional information, a
simple tree layout is not appropriate. One problem that has to be solved is that a goal
of a good graph layout is optimal usage of the screen space. But this goal collides
with the idea to use uncovered screen space for showing additional data.
Another approach is to generate a terrain from the barrier tree that is topologically
equivalent. This has ﬁrst been proposed by Weber et al. [16] for visualizing scalar
ﬁeld topology in scientiﬁc visualization with 3D landscapes. Oesterling et al. [13]
applied the problem to nD-point cloud data and improved visual clarity by using a
2D landscape proﬁle.
Basin
Congurations
Basin
Congurations
cost
Fig. 17.1 Starting from a barrier tree (left part) a topologically equivalent barrier landscape
(right part) is computed. The image shows, how structural properties such as minima or sad-
dles within the barrier landscape correspond to vertices in the barrier tree. Every valley in
the barrier landscape has a size proportional to the size of the associated basin. Parts of the
landscape proﬁle can be associated with respective conﬁgurations.
A similar approach is used in dPSO-Vis. The goal is to compute a 2D landscape
proﬁle, in the form of a height graph over a 1D line, that is topologically equivalent
to the ﬁtness landscape of the optimization problem and therefore has the same

17
Visual Analysis of Discrete PSO
497
barrier tree. We call such a proﬁle the barrier landscape. It contains a valley for
every leaf node of the barrier tree and nested valleys for every subtree of it. If two
subtrees are joined by an inner node, then there is a corresponding mountain pass
within the landscape proﬁle that joins the corresponding valleys. An overview of
this correspondence is shown in Figure 17.1.
To generate the barrier landscape, a simple recursive algorithm can be used. Ev-
ery part of the landscape proﬁle corresponds to an edge in the barrier tree, so that
the landscape can be constructed by traversing the tree in depth-ﬁrst or breadth-ﬁrst
order. Considering an edge e of the barrier tree, we generate the height proﬁle of
the edge itself and the subtree below it on a given horizontal interval I. We have
a maximal and a minimal cost value, i.e., the cost values of the start- respectively
the end-node of e, and a volume in terms of the size of the basin associated with
e. The part of I, which is proportional to the volume associated with e, is used to
generate the left and right slopes of e, as shown in Figure 17.2. The remaining part
of I is split between the child edges of e and used when recursively generating the
corresponding landscape parts. Between the child valleys, a saddle point has to be
inserted to preserve the topological structure.
already
generated
created equivalent
saddle point
generated
slope
to be
generated
recursively
width proportional
to size of associated
basin
Fig. 17.2 Recursive generation of the barrier landscape. The blue slopes are just being gen-
erated, as well as the saddle point between the areas for the child valleys.
The slopes are created by dPSO-Vis such that the “shape” of the search space, i.e.,
the distribution of the conﬁgurations over the cost values, is visible. The creation of
the slopes is done by starting at a height that corresponds to the maximum cost value
and that vertically drops down in general. Plateaus, i.e., short horizontal shelves,
are inserted at certain height levels that have a size according to the number of
conﬁgurations at the corresponding cost level. We use a logarithmic scaling here to
stress lower valleys that often are of low volume. The result of this process is visible
in the landscape proﬁle shown in Figure 17.3.

498
S. Volke et al.
cost
Fig. 17.3 A plot of an example barrier landscape with logarithmic scaling. The width of the
plateaus corresponds to the number of conﬁgurations at that ﬁtness level.
17.5.3
Visualizing the Swarm Movement within the Landscape
The use of visualization for analyzing the behavior of swarm algorithms for com-
binatorial optimization is not very common so far. One reason is that most existing
visualizations for swarm algorithms are for continuous spaces to plot particle tra-
jectories. But these methods usually require that the conﬁguration space is a vector
space which is not the case for discrete problems. Moreover, trajectories can not rep-
resent the random nature of the particle positions [14] and thus might not be a very
appropriate means to understand the behavior of swarm algorithms. By far the most
papers on swarm algorithms for combinatorial optimization use statistical measures
on simulation runs to analyze the optimization behavior. Examples are the quality of
the best solution found or measures of swarm diversity. Such measures can be used
to compare different algorithms but they do not give many hints about the causes of
the observed differences.
The visualization method of dPSO-Vis proposed in [15] shows time-dependent
and conﬁguration-localstatistical data about the particles at all conﬁgurations during
swarm simulation runs based on the barrier landscape. That landscape represents the
topological structure, so that direct adjacency within the barrier landscape does not
necessarily imply direct adjacency of conﬁgurations in the search space. However, it
allows linking data with interesting regions of the search space. For example, it gives
information about the basins or local minima that have been found by an algorithm.
It also shows how often the basins have been found and how long the particles stay
in different basins.

17
Visual Analysis of Discrete PSO
499
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
0.14
0.17
0.25
0.1
0.63
0.17
0.14
0.54
0.54
1.23
0.92
0.62
Conﬁgurations
Time
Statistical Data
t=0
t=1
t=2
Swarm Simulation
...
extract
statistical data
per conﬁguration
combine
information
into one
image
cost
time
Final Visualization
associated
horizontal
screen space
Conﬁguration
Basin
Conﬁgurations
cost
generate
equivalent
2D-landscape
Topology of
Conﬁguration Space
Terrain Equivalent
of Conﬁguration Space
Fig. 17.4 dPSO-Vis pipeline: From the particle swarm simulation run, statistical data is com-
puted, resulting in a time-series of different statistical measures for every conﬁguration of the
search space. From the barrier tree the barrier landscape is computed. Thus, every conﬁgura-
tion is associated with a certain horizontal interval on the screen. Reusing the vertical axis as
time-axis, the time-series for every conﬁguration is plotted whereby the measured values are
color-coded.

500
S. Volke et al.
The dPSO-Vis tool shows four different measures for every conﬁguration (mostly
time-dependent):
(1) the covering measure shows if the conﬁguration has been visited by the swarm
during the simulation,
(2) the accumulated visitor count shows how often a conﬁguration has been visited
until the current time-step,
(3) the current visitor count shows how many particles are located at a conﬁguration
at the current time-step, and
(4) the last visitor age shows how many time steps ago the conﬁguration has lastly
been visited by a particle.
When computing the barrier landscape, every conﬁguration is assigned a certain
horizontal interval on the screen. As shown in Figure 17.4, this interval and the
height of the image deﬁne a rectangle that can be used to plot the statistical data
for the respective conﬁguration. The vertical axis is reused as time-axis, so that the
position on the screen characterizes the shown data in terms of conﬁguration and
time-step. To use the screen space efﬁciently, the measured value is represented by
its color.
Two different color models are used to encode the values that vary the hue and
the luminance, respectively. The latter is used where the actual value is of interest,
e.g., when showing visitor counts, because the human visual system is well-trained
to distinguish and compare different luminance. Variation of the color tone is used,
where the focus is on qualitative differences, e.g., when contrasting “old” basins
versus “new” ones. Here, the human ability to distinguish different colors without
assigning absolute, numeric values with it, is leveraged.
Using dPSO-Vis, it is possible to comprehend both global properties of the swarm
and local behavior in the context of the search space. Thus, the algorithm designer
is able to analyze the beneﬁts and penalties of design decisions in greater detail
and more in depth than by plotting global statistical measures. In the following sec-
tion, we show how dPSO-Vis can be used to analyze and compare the optimization
behavior of PSO algorithms.
17.6
Application to SetPSO and HelixPSO
In this section, dPSO-Vis is used to visually analyze SetPSO and HelixPSO. This is
only a brief overview to show the applicability of the method, but does not sufﬁce
as an in-depth analysis. All test runs have been done with a population of size 10
over 100 iterations.
A comparison of two algorithms can be done by comparing their ﬁtness land-
scapes. Figure 17.5 shows plots of the barrier landscapes for SetPSO and HelixPSO
for the three example RNA molecules from Tables 17.1 to 17.3. There are interesting
differences visible. The landscapes of SetPSO are rather jagged and contain many
subvalleys. The most interesting valley, that contains the global minimum, is small
compared to the sizes of other deep, but non-optimal valleys (compare [17] where
it was shown that relative basin size is an important factor for the difﬁculty of a

17
Visual Analysis of Discrete PSO
501
(a) SetPSO - Aeropyrum
(b) SetPSO - Anthracis
(c) SetPSO - T. Gondii
(d) HelixPSO - Aeropyrum
(e) HelixPSO - Anthracis
(f) HelixPSO - T. Gondii
Fig. 17.5 Comparison of Barrier Landscapes of SetPSO and HelixPSO for three example
RNAs. Valley sizes are scaled logarithmically, so that smaller valleys are emphasized.
problem for PSO). This implies that SetPSO particles are prone to become locked
in undesirable parts of the search space. SetPSO parameters should be adjusted, such
that the particles can easily leave local minima and re-explore less optimal parts of
the search space. The barrier landscapes of HelixPSO contain only one valley in all
cases. There appears to be a very good overall connectivity within the HelixPSO
search space.
To further investigate this, Figure 17.6 shows the connectedness matrix between
the possible conﬁgurations for the Anthracis RNA for SetPSO and HelixPSO. These
pictures have to be interpreted carefully, because they show only the connectedness
with respect to a single basic operation as has been explained in Section 17.4. Since
SetPSO and HelixPSO use different basic operations, the ﬁgures cannot be com-
pared directly. Moreover recall, that a particle can perform several basic operations
within a time step. Nevertheless, it is quite obvious that the search space of He-
lixPSO has a much higher connectedness. A sparse neighborhood graph can be a
problem for a PSO algorithm because there might be only few paths leaving a local
minimum and it can be difﬁcult to achieve enough diversity within the swarm. But
a too high connectedness might also be a problem because it is difﬁcult for the al-
gorithm to get good hints about beneﬁcial search areas. More transition possibilities
imply higher probability to re-search certain areas multiple times and thus larger
search times. According to the ﬁgures, the ﬁrst issue could potentially become a
problem of SetPSO, whereas the latter could appear as a problem of HelixPSO.

502
S. Volke et al.
(a) SetPSO
(b) HelixPSO
Fig. 17.6 Adjacency matrices of SetPSO/HelixPSO landscapes for Anthracis RNA. A black
dot means, there is a connection between the conﬁgurations corresponding to the row and
column, respectively.
A reason for this difference is the representation of particle state within Helix-
PSO. The number of RNA secondary structures is bounded by 2n for n Helices and
might be much smaller, because of conﬂicts between the Helices. SetPSO directly
uses sets of Helices to encode particle positions. Thus, the number of SetPSO con-
ﬁgurations is also bounded by 2n. On the other hand, HelixPSO uses permutations
of the helices as internal conﬁgurations, leading to a number of n! different particle
states, that are mapped to 2n RNA conﬁgurations. This introduces a high degree
of artiﬁcial symmetry, that increases factorial with n. Therefore, it is probable that
HelixPSO landscapes always consist of a single valley, especially for large RNA
sequences.
Next, the inﬂuence of global memory on SetPSO will be considered. Figure 17.7
shows the accumulated visitor count of two example runs for the Aeropyrum RNA.
Since PSOs are inherently random, rerunning the algorithm could show different
results, but the pictures have been chosen to represent our overall ﬁndings of several
runs. It can be seen, that the two variants searched different areas of the conﬁgura-
tion space during the ﬁrst iterations. In both cases, one valley is searched intensively.
It is generally a good sign, that the algorithm explores the space around a good solu-
tion in great detail. However, without the global memory, SetPSO often just forgets
about the optimal valley, even if it ﬁnds it once or twice.
The visualization tool dPSO-Vis is very useful when investigating the inﬂuence
of different parameters on the optimization behavior of an algorithm. Finding the
best parameter values is a principle problem of metaheuristic algorithms and typ-
ically requires much testing effort. Visualization can help to largely reduce the
necessary test effort because it helps to understand why certain parameter value
combinations are good whereas others are not.
In Figure 17.8, the inﬂuence of the probabilities PI and PC on SetPSO, i.e., the
probability to add a helix to the open set and the probability to add a helix to the
closing set, respectively, are visualized for the Aeropyrum RNA.

17
Visual Analysis of Discrete PSO
503
(a) With global memory
(b) Without global memory
Fig. 17.7 Accumulated visitor count for SetPSO (PI = 0.4, PC = 0.75, PR = 0.15),
Aeropyrum-RNA
In Figures 17.8(e) and 17.8(g), the inﬂuence of parameter PI can be seen. Both
subﬁgures show the current visitor count. For a very small value of PI = 0.05, the
swarm cannot ﬁnd the conﬁgurations with a low energy and does not converge in
the ﬁrst 100 iterations. For values higher than PI = 0.4, the swarm concentrates the
search around the conﬁguration with minimum energy. This conﬁrms the ﬁndings
of Neethling and Engelbrecht [11] that the algorithm performs poorly with small PI.
A certain entropy is necessary for good results.
The inﬂuence of parameter PC on SetPSO is shown in Figures 17.8(a) to 17.8(f).
The left column shows the current visitor count and the right column shows the
covering. In accordance with Neethling’s results, the covering depictions show that
the value of PC does not inﬂuence much, whether the global optimum is found or
not. However, that does not mean that PC has no inﬂuence at all, as can be seen
in the visitor count images. For a very small value of PC = 0.05, the swarm does
not concentrate around the minimum. The covering measure in Subﬁgure 17.8(b)
shows that the areas around local minima are often slightly better covered than other
areas. But around the global minimum, there is not a particular strong concentration
of visits. This is different for higher values of PC = 0.4, where Subﬁgures 17.8(c)
and 17.8(d) clearly show a concentration of the search around the global minimum
and a convergence of the swarm.
For HelixPSO three variants – greedy strategy with 1-elitism, simulated anneal-
ing strategy with 1-elitism, and simulated annealing strategy without 1-elitism – are
compared in Figure 17.9 for the Aeropyrum RNA. The current visitor count in the
ﬁrst row of Figure 17.9 shows that both variants of HelixPSO with 1-elitism con-
verge very fast to the area around the global minimum. Also simulated annealing
HelixPSO without 1-elitism ﬁnds the area of the global minimum fast. It concen-
trates its search around the global minimum after about 70 iterations. The covering
in the second row of Figure 17.9 shows that HelixPSO with simulated annealing
but no 1-elitism has covered a much larger area of the conﬁguration space than
the other two variants. The other two variants have not searched large parts of the

504
S. Volke et al.
(a) PI = 0.40, PC = 0.05
(b) PI = 0.40, PC = 0.50
(c) PI = 0.40, PC = 0.75
(d) PI = 0.05, PC = 0.75
Fig. 17.8 SetPSO with varying entropy weight and closing probability (Aeropyrum RNA).
In the left column the current visitor count is shown and in the right column the covering.

17
Visual Analysis of Discrete PSO
505
(a) Greedy, 1-elitism
(b) SA, 1-elitism
(c) SA, no 1-elitism
(d) Greedy, 1-elitism
(e) SA, 1-elitism
(f) SA, no 1-elitism
(g) Greedy, 1-elitism
(h) SA, 1-elitism
(i) SA, no 1-elitism
Fig. 17.9 HelixPSO on Aeropyrum RNA. In the ﬁrst row the current visitor count is shown,
in the second row the covering and in the last row the last visitor age is shown.
search space but have concentrated their search very early to the areas around the
very small energy conﬁgurations.
The last visitor age measure that is shown in the bottom row of Figure 17.9 shows
a difference between the Greedy version and the simulated annealing version of
HelixPSO with 1-elitism. The Greedy version does never search outside the area
around the global minimum in the second half of the run (i.e., after 50 iterations).
This is different for the simulated annealing version, where the swarm searches in
larger areas of the conﬁguration space also in the second half of the search space.
Clearly, the annealing variant without 1-elitism does not restrict itself to the area
around the global minimum but searches all parts of the conﬁguration space dur-
ing the whole run. It can be concluded that the greedy variant might get problems
with more complicated search spaces because the swarm concentrates too fast. A
1-elitism strategy seems useful when it is necessary to ﬁnd good solutions fast.

506
S. Volke et al.
17.7
Conclusions
We have discussed the problem to visualize the optimization behavior of particle
swarm optimization (PSO) algorithms for discrete optimization problems. Typically,
it is difﬁcult to analyze the optimization behavior of such algorithms and visual-
ization might help. However, for discrete PSO algorithms it is often hard to even
characterize the locations of the swarm particles within the conﬁguration space.
Therefore, some simple visualization approaches that directly map the locations of
the particles into a 2D or 3D space are not applicable.
An interesting visual approach that combines a terrain representation of the ﬁt-
ness landscape topology with conﬁguration-local, time-dependent statistical mea-
sures of PSO runs is implemented in the visualization tool dPSO-Vis. The principle
of dPSO-Vis is to combine the conﬁguration set and the ﬁtness function of the op-
timization problem with the transition behavior of the particles of a PSO algorithm
to deﬁne a ﬁtness landscape, which represents the search behavior of the algorithm.
This ﬁtness landscape is called the barrier landscape. It was demonstrated in this
chapter how dPSO-Vis can be used to analyze and compare the optimization be-
havior of PSO algorithms. The two example PSO algorithms that have been used in
this chapter were SetPSO and HelixPSO. Both algorithms have been designed for
solving the RNA folding problem.
Acknowledgements. This work was supported by European Social Fund (ESF App.No.
100098248 and App.No.100098251) and by the DFG IRTG 1131.
References
[1] Eberhart, R.C., Kennedy, J.: Swarm Intelligence. Morgan Kaufmann, San Francisco
(2001)
[2] Engelbrecht, A.P.: Computational Intelligence: An Introduction. John Wiley and Sons,
Chichester (2002)
[3] Flamm, C., Fontana, W., Hofacker, I.L., Schuster, P.: RNA folding at elementary step
resolution. RNA 6, 325–338 (2000)
[4] Flamm, C., Hofacker, I.L., Stadler, P.F., Wolﬁnger, M.T.: Barrier trees of degenerate
landscapes. Z. Phys. Chem. 216, 1–19 (2002)
[5] Garey, M.R., Johnson, D.S.: Computers and Intractability: A Guide to the Theory of
NP-Completeness. W. H. Freeman, New York (1979)
[6] Geis, M.: Secondary Structure Prediction of Large RNAs. Ph.D. thesis, Universit¨at
Leipzig (2008)
[7] Geis, M., Middendorf, M.: A particle swarm optimizer for ﬁnding minimum free energy
RNA secondary structures. In: Proc. IEEE Swarm Intelligence Symposium, pp. 1–8
(2007)
[8] Geis, M., Middendorf, M.: Particle swarm optimization for ﬁnding RNA secondary
structures. International Journal of Intelligent Computing and Cybernetics 4, 160–186
(2011)

17
Visual Analysis of Discrete PSO
507
[9] Heine, C., Scheuermann, G., Flamm, C., Hofacker, I.L., Stadler, P.F.: Visualization of
barrier tree sequences. IEEE Transactions on Visualization and Computer Graphics 12,
781–788 (2006)
[10] Kennedy, J., Eberhart, R.: Particle swarm optimization. In: Proceedings of the Interna-
tional Conference on Neural Networks, pp. 1942–1948 (1995)
[11] Neethling, C.M.: Using SetPSO to determine RNA secondary structure. Ph.D. thesis,
University of Pretoria (2008)
[12] Neethling, M., Engelbrecht, A.: Determining RNA secondary structure using set-based
particle swarm optimization. In: Proc. IEEE Congress on Evolutionary Computation,
CEC 2006, pp. 1670 –1677 (2006)
[13] Oesterling, P., Heine, C., J¨anicke, H., Scheuermann, G., Heyer, G.: Visualization of
high-dimensional point clouds using their density distribution’s topology. IEEE Trans-
actions on Visualization and Computer Graphics 17, 1547–1559 (2011)
[14] Secrest, B.R., Lamont, G.B.: Visualizing particle swarm optimization - Gaussian parti-
cle swarm optimization. In: Proc. IEEE Swarm Intelligence Symposium, pp. 198–204
(2003)
[15] Volke, S., Middendorf, M., Hlawitschka, M., Kasten, J., Zeckzer, D., Scheuermann,
G.: dPSO-Vis: Topology-based visualization of discrete particle swarm optimization.
Computer Graphics Forum 32, 351–360 (2013)
[16] Weber, G., Bremer, P.T., Pascucci, V.: Topological landscapes: A terrain metaphor for
scientiﬁc data. IEEE Transactions on Visualization and Computer Graphics 13, 1416–
1423 (2007)
[17] Xin, B., Chen, J., Pan, F.: Problem difﬁculty analysis for particle swarm optimization:
deception and modality. In: Proceedings of the First ACM/SIGEVO Summit on Genetic
and Evolutionary Computation, pp. 623–630 (2009)

Chapter 18
Predicting Evolution and Visualizing
High–Dimensional Fitness Landscapes
Bjørn Østman and Christoph Adami
Abstract. The tempo and mode of an adaptive process is strongly determined by
the structure of the ﬁtness landscape that underlies it. In order to be able to predict
evolutionary outcomes (even on the short term), we must know more about the na-
ture of realistic ﬁtness landscapes than we do today. For example, in order to know
whether evolution is predominantly taking paths that move upwards in ﬁtness and
along neutral ridges, or else entails a signiﬁcant number of valley crossings, we need
to be able to visualize these landscapes: we must determine whether there are peaks
in the landscape, where these peaks are located with respect to one another, and
whether evolutionary paths can connect them. This is a difﬁcult task because genetic
ﬁtness landscapes (as opposed to those based on traits) are high-dimensional, and
tools for visualizing such landscapes are lacking. In this contribution, we focus on
the predictability of evolution on rugged genetic ﬁtness landscapes, and determine
that peaks in such landscapes are highly clustered: high peaks are predominantly
close to other high peaks. As a consequence, the valleys separating such peaks are
shallow and narrow, such that evolutionary trajectories towards the highest peak in
the landscape can be achieved via a series of valley crossings.
18.1
Usefulness of the Metaphor
The structure of realistic ﬁtness landscapes continues to be an active area of re-
search. When discussing the ‘metaphor’ of the ﬁtness landscape, researchers typ-
ically mean the one- or two-dimensional representation of ﬁtness as a function of
either genotype or phenotype. This is a powerful image that immediately evokes
how an evolving population may change, given population size and mutation rate:
the familiar image of a landscape with hills and valleys initially described by
Bjørn Østman · Christoph Adami
Department Microbiology and Molecular Genetics & BEACON Center for the Study
of Evolution in Action, Michigan State University, East Lansing, MI 48824, U.S.A.
e-mail: {ostman,adami}@msu.edu
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
509
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_18, c⃝Springer-Verlag Berlin Heidelberg 2014

510
B. Østman and C. Adami
Wright [16, 22, 25, 47, 52, 53] affects our intuition about evolutionary dynamics.
However, as genes or traits do not affect ﬁtness in isolation, considering the ﬁtness
contribution of only one or two genes may focus on too small a part of the ﬁt-
ness landscape to make relevant predictions about how populations actually evolve.
Instead, it is possible that many more dimensions are required to understand adap-
tation, which makes a straightforward visualization of the landscape impossible. Is
the ﬁtness landscape metaphor still instructive if many genes contribute to ﬁtness,
that is, if the ﬁtness landscape is high-dimensional? This concern has been raised
multiple times [24, 40, 46]. In particular, it has been questioned whether the peaks
separated by valleys commonly seen in one- and two-dimensional ﬁtness landscapes
exist at all in higher dimensions. An argument by Gavrilets [17, 18] states that when
the number of dimensions is very high, peaks disappear because they become con-
nected by neutral ridges. This mathematical argument was presented as a solution
to the problem of valley-crossing [16, 22, 25, 47, 53]. Indeed, the discussion about
the structure of ﬁtness landscapes is intimately linked to the dynamics of adapta-
tion. After all, Wright’s shifting balance theory [51, 52]–which suggest that peak
shifts occur via random drift during times when population sizes are small–is only
relevant if valleys actually need to be crossed. Fisher, on the other hand, ﬁgured that
landscapes change often enough that populations can simply wait on a local peak
until beneﬁcial mutations became possible [15], after which the new peak will be
climbed via a series of slightly beneﬁcial mutations. If, on the other hand, all high-
ﬁtness genotypes are actually connected by ridges of genotypes with equal ﬁtness,
populations could then readily evolve along these ridges, and thus the problem of
having to cope with deleterious mutations disappears.
However, two important arguments exist against this solution. First, even if these
ridges exist, it is not clear whether they are numerous enough that they are preferred
by an evolving population. As these ridges appear only once the ﬁtness landscape
is high-dimensional, the number of possible paths for the population to take is ex-
ponentially large. Only a very small fraction of these may be neutral ridges [18],
and when the mutation supply is sufﬁcient, it is more likely that the population
will traverse a short (i.e., single-step) as well as shallow valley, rather than taking
a longer neutral path (see results below). Secondly, when all high-ﬁtness peaks are
connected by neutral ridges as in Gavrilets′s Holey Landscape model, the high-
ﬁtness genotypes must permeate all areas of genotype space, and as a consequence
are not clustered in genotype space [18]. However, it is not at all clear whether we
should expect such a homogenous distribution of high ﬁtness peaks. Indeed, just as
Kauffman originally hypothesized [26], we have recently shown that—at least in the
NK model of epistatic ﬁtness landscapes—peaks are not evenly distributed, but that
they instead cluster so that high ﬁtness peaks are closer to each other than they are
to other low ﬁtness peaks [38]. In that work we studied sequences (haplotypes) with
N = 20 loci only, which does not meet Gavrilets’s criterion for a high-dimensional
space. However, it is possible to look for the same phenomenon in landscapes with
a much higher dimensionality, such as the landscape created by digital evolution
environments such as Avida [1, 2, 36].

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
511
As for empirical landscapes, Whitlock et al. [46] asserted that it may not be pos-
sible to conclude beyond a shadow of a doubt that complex biological ﬁtness land-
scapes are epistatic and contain multiple peaks, but that the evidence is very strong
that they do. Since that review, many more empirical landscapes have been recon-
structed, and the evidence for multiple peaks, strong epistatic interactions between
genes, and local optima continues to increase [4, 13, 21, 27, 28, 29, 31, 41]. If
biological ﬁtness landscapes contain multiple peaks, the problem of just how pop-
ulations manage to cross ﬁtness valleys is real. Besides the now standard solutions
of Fisher and of Wright, we now know that a high mutation-supply rate (product
of population size and mutation rate) enables populations to cross valleys via com-
pensatory mutations, despite the transient reduction in ﬁtness [39, 45]. The more
mutations the population incurs, the higher the level of standing genetic variation,
and the higher the chance that inferior genotypes will give rise to offspring that are
lucky enough to move closer to an adjacent peak. Of course, if the mutation-supply
rate is low, then deleterious mutations are rarely tolerated, and in the extreme case
of mutations being so rare that each mutation goes to ﬁxation before the next is
available, valleys of even moderate ﬁtness loss cannot be crossed. But many biolog-
ical systems have mutation-supply rates high enough that there are always plenty
of opportunities for organisms of lower ﬁtness to have offspring with mutations.
In fact, some populations behave like quasispecies [11, 12]: typical examples are
viruses [6] and even bacteria [9]. Such populations are characterized by extended
clouds of genotypes containing many genetic variants, and these can easily cross
valleys as the ﬁxation probability of a deleterious mutant connected to the quasis-
pecies is nonvanishing [50]. No matter how valleys are crossed during adaptation,
we can now be almost certain that ﬁtness landscapes contain distinct peaks, even
in the multidimensional space of biological organisms. Therefore, we contend that
the ﬁtness landscape metaphor, exempliﬁed by the image of hills and valleys in two
dimensions, is useful in guiding our intuitions about evolutionary dynamics. While
a high-dimensional landscape may differ quantitatively from the familiar picture of
rolling hills and valleys, we believe that the idea that there are peaks and valleys in
a biological ﬁtness landscape is unlikely to be refuted.
18.2
Visualizing Fitness Landscapes
Even though low-dimensional ﬁtness landscapes can sometimes serve as an appro-
priate visual for landscapes of higher dimensions, the use of other methods for vi-
sualizing multidimensional ﬁtness landscapes is currently a topic of much interest.
Techniques for visualization include different methods for creating two-dimensional
representations of high-dimensionalspace [33, 49]. These methods are applied when
complete knowledge of the ﬁtness of all genotypes exists. Due to the inherent multi-
dimensionality of genotypes, obtaining full information for biological systems is
not feasible. The ﬁtness landscapes of limited areas of genotype space have re-
cently been constructed for E. coli [8, 30], RNA [41], HIV-1 [32], and Aspergillus
niger [16]. This interest in reconstructing and visualizing ﬁtness landscapes stems

512
B. Østman and C. Adami
from the promise that knowledge of this function (i.e., ﬁtness) holds, namely that
in combination with population size and mutation rate, evolutionary dynamics be-
comes predictable. But what exactly does this predictability achieve? Which evo-
lutionary events can we predict? Given the stochasticity inherent in evolutionary
dynamics, does knowledge of the three core evolutionary parameters—population
size, mutation rate, and ﬁtness landscape—actually lead to testable predictions? Do
we currently know enough about ﬁtness landscapes that they can be used to make
predictions about the likely future paths?
The most obvious beneﬁt from knowing the structure of a ﬁtness landscape is
a better understanding of adaptation. For example, just knowing the topology of
the local ﬁtness landscape is enough to tell whether the population will experience
adaptation or not. If the population is already located on a ﬁtness peak, then it will
remain there provided that the local structure is such that mutation-supply rate is
too low for adjacent peaks to be reached. In the event that there are adjacent peaks
of higher ﬁtness, crossing the valleys in between would result in an adaptive relo-
cation. As mentioned above, valley-crossing is only a hindrance to adaptation when
the combination of low mutation-supply rate and deep and/or long valleys between
peaks prohibits the population from taking advantage of the potential of deleterious
mutations.
As speciation is a process intimately tied to evolutionary dynamics, it is also
impacted by the structure of the ﬁtness landscape [18]. Genetic differences underly-
ing multiple species necessarily result in those species occupying different areas of
genotype space. If these areas are not separated by valleys, then intermediate geno-
types (hybrids, in the case of sexually reproducing species) are of high ﬁtness, and
both initiation and maintenance of speciation will be less likely. A multi-peaked
landscape therefore promotes speciation [10]. Given two adjacent ﬁtness peaks, a
population in the vicinity of both can adapt to either optima. If there are no physical
or genetic barriers to competition within the population, the population will end up
on one or the other (most likely the highest of the two, but not necessarily so). How-
ever, if such barriers to competition do exist, the population may permanently split
into two, eventually leading to ecological speciation [35]. If the peaks correspond to
genomic regions or traits that directly affect reproduction, speciation will be more
likely to occur. Additionally, the more rugged the ﬁtness landscape is with respect
to traits that affect resource use and reproductive isolation, the higher the chance
that evolutionary branching will lead to speciation. Consequently, the more dimen-
sions relevant to ﬁtness that are under scrutiny, the more precisely we can predict
the evolutionary outcome with respect to speciation. Both adaptation and speciation
are thus affected by how rugged the ﬁtness landscape is. The more epistatic inter-
actions between loci, the more rugged the landscape is, and the more peaks there
are. Not only does the number of peaks matter, spatial correlations between peak
genotypes could also affect adaptation and speciation. If peaks are not evenly dis-
tributed in genotype space, but are clustered in some fashion, close proximity of
peaks can facilitate peak shifts and thereby increase the likelihood of adaptive shifts
and ecological speciation. For sexually reproducing species, speciation may require
that valleys in between peaks are deep and wide enough to cause hybrid sterility

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
513
or breakdown [44]. As we shall see below, there are reasons to believe that peak
clustering is a generic feature of multi-peaked, epistatic ﬁtness landscapes.
18.3
Landscape Structure and Peaks
Studying the large-scale structure of biological ﬁtness landscapes is difﬁcult due to
several factors. Measuring ﬁtness is not trivial and experimentally manipulating or-
ganisms to explore large areas of genotype space is an arduous task. However, some
numerical models have ﬁtness landscapes where all genotypes can be enumerated.
The NK model is such a landscape [25, 26], in which the amount of epistatic in-
teractions can be adjusted and ruggedness thereby varied in a controlled manner.
Brieﬂy, N is the number of bi-allelic loci in the genome, and K is the number of
neighboring loci that each locus interacts with. Fitness is calculated as the average
ﬁtness contribution of each locus, which in turn is taken from a table of uniform
random numbers. In a K=0 landscape loci do not interact, and as a consequence
the landscape contains only a single peak. Adaptation in such a landscape is pre-
dictable, as there is no other outcome than the population ending up on the peak
(or around it, in case of a high mutation rate). In contrast, for K = N −1, all loci
interact with all other, and the ﬁtness of neighboring genotypes are completely un-
correlated, creating a maximally rugged landscape. Both of these extremes have
been mathematically investigated, but neither have much bearing on real ﬁtness
landscapes, which are rarely non-epistatic, and never completely lacking in ﬁtness
correlations [16, 25]. The intermediate range of K, which creates varying degrees
of epistasis and ruggedness, is difﬁcult to study analytically, but lends itself easily
to computational methods [39]. Here we present several landscape measures [42]
that characterize the large-scale structure of the NK landscape, and whose speciﬁcs
in turn affect adaptation and evolutionary dynamics. In accordance with the massif
central hypothesis [26], peaks are unevenly distributed in genotype space, and tend
to form clusters. Several lines of evidence support this inference. First, deﬁning
peaks as genotypes whose one–mutant neighbors are all of lower ﬁtness, we look at
the dependence of the number of peaks on landscape dimensionality. As the dimen-
sionality of the NK model increases with the number of loci, N, the number of peaks
increases exponentially (Figure 18.1). There is thus no indication that neutral ridges
appear as the dimensionality of the NK model in increased. Looking at the spatial
distribution of peaks (genotypes for which all N mutational neighbors have a lower
ﬁtness), we found that peaks are located closer to each other than expected if they
were distributed randomly [38]. The Hamming distance between peaks is lower than
between a set of random genotypes (Figure 18.2A), where the random control dis-
places peaks by randomly assigning them new genotypes without replacement. This
correlation disappears for high K, but reappears when focusing on at the highest
peaks only (Figures 18.2B-D). Moreover, the higher the peaks are, the more likely
they are only located near each other. This can be seen from the strong association
between the ﬁtness of a randomly selected peak and the peaks in its near vicinity.
Looking at all peaks and comparing their ﬁtness to the average ﬁtness of peaks close

514
B. Østman and C. Adami
Fig. 18.1 In the NK landscape, the number of peaks increases exponentially as a function of
the number of loci. Here shown for a highly rugged landscape, K=8, and N between 21 and
30. Peaks are here deﬁned as genotypes whose N one-mutant neighbors all have lower ﬁtness.
Every datum is the average over ﬁve different landscapes, and the s.e.m. error bars in black
are smaller than the markers. To the extent that it has been investigated, there is no indication
that peaks cease to exist in multidimensional ﬁtness landscapes, contra Gavrilets [17, 18].
by (Hamming distance of 2), a very strong correlation is evident (Figure 18.3). The
strength of the correlation depends on the ruggedness of the landscape, but even
though it is weaker for K=4 than for K=2, it is evident from this analysis that peaks
are more likely to be found near peaks of a comparable rather than much different
height.
The observed effect of a strong correlation between ﬁtness of the highest peaks
(and the watering down of that correlation when the peaks of lower ﬁtness are in-
cluded in the analysis) suggests an interesting feature of multidimensional rugged
landscapes. Peaks are more likely to be located near other peaks of similar ﬁtness, so
not only is there a massif central, but there also exist clusters of peaks across the NK
genotype space. If we look only at peaks of ﬁtness above a threshold θ (Figure 18.2),
the spatial correlation in genotype space is strong, but as we lower that threshold,
more peaks appear and are spread out over more of genotype space. Additionally,
as θ is lowered, more and more peaks become connected in a network where peaks

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
515
are no further apart than a Hamming distance of two. We can observe a percola-
tion phase transition for peak networks, where peak networks change from being
disconnected to forming large networks that include nearly all peaks (Figure 18.4).
(Because a network of peaks connected by a Hamming distance of exactly two can-
not be connected to peaks separated by a Hamming distance of three, there are two
large networks in Figure 18.4, which is why less than half of all peaks are found
in the largest network.) If such rugged landscapes contain peaks in large areas of
genotype space, we may then ask just how much of genotype space the clusters of
peaks inhabit. Are peaks distributed evenly such that all points in genotype space
are equally likely to be near a peak, or are there large areas of genotype space that
are devoid of peaks? To test whether rugged landscapes contain peaks of low ﬁtness
distributed evenly in genotype space, we translated the bit-string NK genotypes into
decimal numbers in the following way. Denote the binary string by the vector s. The
corresponding decimal genotype is then
d(s) = ∑
i
si2i−1,
(18.1)
where the summation is over all indices of s. For example, the genotype 10010 is
represented by the vector s = {1,0,0,1,0}, and has the decimal genotype
d(s) = 1 × 20 + 0 × 21+ 0 × 22+ 1 × 23+ 0 × 24 = 9.
(18.2)
This formalism can easily be extended to non-binary strings, e.g., genotypes con-
sisting of more alleles. For DNA,
d(s) = ∑
i
si4i−1,
(18.3)
so for example (with A=0, T=1, C=2, G=3, reading right to left) TATA corresponds
to
d(s) = 0 × 40 + 1 × 41+ 0 × 42+ 1 × 44 = 68,
(18.4)
and the one-mutant GATA to
d(s) = 0 × 40 + 1 × 41+ 0 × 42+ 3 × 44 = 196.
(18.5)
As we can see from this example, neighboring genotypes with Hamming distance
one are not necessarily neighbors in this decimal genotype space. A genotype with
two mutations can be closer than a single-mutant, as with TCTT, which has
d(s) = 1 × 40 + 1 × 41+ 2 × 42+ 1 × 44 = 101.
(18.6)
If there were no structure to how peaks are distributed in genotype space, the dis-
tribution of peaks in decimal genotype space is expected to appear even. However,
despite the disconnect between neighboring genotypes in decimal space, plotting
peak ﬁtness as a function of the decimal genotype reveals an intriguing order not
observed among random genotypes (Figure 18.5). Peaks are irregularly distributed

516
B. Østman and C. Adami
and large areas have no peaks. These basins of attraction [14] clearly show that
peaks are not spread evenly in genotype space, but cluster together in agreement
with the analysis above (Figures 18.2 and 18.3).
The question of whether populations would be able to utilize the neutral ridges in
a Holey Landscape [17] can be investigated using a simple computational model.
We begin with a homogenous population at the same genotype having a ﬁtness of
1. The object is to ﬁnd a genotype two mutations away either through a valley or a
larger number of mutations away via a neutral ridge (Figure 18.6). Each mutation
takes the offspring to either one of two neighboring genotypes, such that they can
reach the target genotype through two mutations where the ﬁrst has ﬁtness 0.7, or
Fig. 18.2 Distributions of pairwise Hamming distances dH between all peaks (solid) and
between random control genotypes (dashed) in the NK landscape. The distributions shown are
the averages of 50 different landscapes with genomes of length N = 20. (A) K = 2 landscapes
containing an average of 98 peaks. (B) K = 4 landscapes containing an average of 720 peaks.
(C) K = 4 landscapes including only an average of 363 peaks with a ﬁtness above a threshold:
W ≥Θ = 0.60. (D) K = 4 landscapes including only an average of 95 peaks with a ﬁtness
above a threshold of Θ = 0.66. As the samples include only the highest peaks, the pairwise
distributions of K = 4 landscapes begin to resemble that of the K = 2 landscapes, suggesting
that the highest peaks do cluster in genotype space, whereas the distribution of lower peaks is
less biased. The control assigns genotypes to peaks by randomly sampling from all genotypes
without replacement. Adapted from [38].

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
517
Fig. 18.3 Mean ﬁtness of clusters of peaks as a function of peak ﬁtness. The data is ob-
tained comparing the ﬁtness of each peaks with the average ﬁtness of all other peaks within
a Hamming distance of d = 2. (A) Landscape of K = 2 with 166 peaks (black dots). All
landscapes show a strong correlation between cluster mean ﬁtness and peak ﬁtness, while the
same analysis of assigning random genotypes without replacement to the peaks (but keeping
the ﬁtness) shows no such correlation (gray dots). The random data are from ten samplings.
(B) One landscape of K = 4 with 679 peaks (black dots), and random genotypes (gray dots)
obtained by sampling four times. Adapted from [38].
through four neutral mutations with genotypes of ﬁtness 1. Results for a population
size of 100 are shown in Figure 18.7, and clearly show that if the mutation-supply
rate is not prohibitively low (as in the strong selection/weak mutation regime where
mutations go to ﬁxation individually) then populations can easily endure deleterious

518
B. Østman and C. Adami
mutations necessary to cross valleys, and will do so rather than utilizing neutral
ridges that require a larger number of neutral mutations.
18.4
Landscape Structure and Prediction
Predicting evolution is a notoriously difﬁcult task [7], and the success of such an
endeavor depends crucially on the parameters of the evolutionary process (e.g., mu-
tation rate and population size for a non-recombining population) as well as the
structure of the ﬁtness landscape. If the mutation supply rate is very low and selec-
tion is strong, predicting evolution is comparably easier because the only stochastic
component of the process lies in calculating the probability that a beneﬁcial muta-
tion (the one closest to the dominating type) achieves a sufﬁciently large clone size
so that the ﬁxation of that mutation becomes deterministic [19, 23, 37]. However,
recent evidence suggests that this limit is rarely if ever achieved in nature [5] and
that instead many beneﬁcial, neutral, and deleterious mutations exist within realistic
populations at the same time. Furthermore, selection on the deleterious mutations
appears to be weak enough that such mutations can persist in large populations
for hundreds or even thousands of generations [45] so that they can serve as step-
ping stones for further adaptive progress. In this limit, analytical methods fail to
provide closed form solutions for the probability of ﬁxation, in part because valley-
crossing now becomes an important component in predicting evolutionary paths.
It is precisely in this limit where landscape structure becomes a crucial element in
predicting evolution.
The results described above suggest not only that high ﬁtness peaks are more
likely to be found near peaks of similar ﬁtness, but they also imply that peaks of
lower ﬁtness permeate genetic space, so that it is possible to traverse the entire
genetic space via paths that connect peaks separated only by a single deleterious
mutation. While we do not suggest that such paths are more likely than those that
involve possible neutral and beneﬁcial mutations, the observation implies that the
areas of ﬁtness with high-ﬁtness peaks are accessible from anywhere in the land-
scape. The picture painted by Gavrilets is in a sense complementary, where large
neutral networks of low ﬁtness provide access to the large neutral networks of high
ﬁtness peaks. But such a picture is neither necessary to understand adaptive progress
(because even in the limit of strong mutation and weak selection deleterious muta-
tions can persist for a very long time in the population), nor is such a picture likely,
because evolutionary paths consisting only of neutral and beneﬁcial mutations are
vastly under-represented (compared to those that include valley-crossings) when
peaks are clustered. Thus, while the possibility of valley crossings makes evolution
much more difﬁcult to predict, prediction is considerably helped if the local struc-
ture of the landscape is such that high peaks are near other high peaks, and that peak
networks percolate genetic space (albeit only at low ﬁtness).

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
519
Fig. 18.4 Size of the largest network cluster in the landscape averaged over 50 landscapes for
K = 2, 4, and 6 as a function of ﬁtness threshold, Θ. Clusters consist of networks of peaks no
further than Hamming distance d = 2 from each other. Only peaks with ﬁtness above Θ are
included in each sample. The more rugged the landscapes are, the more abrupt the transition
is from small network clusters to one cluster dominating the landscape. Random genotypes
for K = 2 (solid gray line) and K = 4 (dashed gray line) show no increase in cluster size as Θ
is lowered, indicating that peaks cluster in a non-random manner. Adapted from [38].
18.5
Future Directions
While the concept and in particular the metaphor of the ﬁtness landscape now has
a long and distinguished history, we still have a lot to learn about the global and
local structure of realistic landscapes with epistasis and pleiotropy. This is certainly
true for computational models in which the ﬁtness landscape is not explicitly de-
signed, but it is particularly evident for empirical ﬁtness landscapes, which have
only recently begun to be investigated in the simplest cases. Because ﬁtness land-
scape structure remains largely unknown, the predictive power that knowledge of
that structure could bring has not yet been explored.
Here we have proposed that together with population size and mutation rate, ﬁt-
ness landscape structure is another key factor in enabling prediction of evolutionary
outcomes. Despite the natural stochasticity of the evolutionary process, to a ﬁrst
approximation the trajectories that evolving populations take can be predicted with
some degree of accuracy. The success of adaptation and the likelihood of speci-
ation can be approximated given information about the aforementioned three key

520
B. Østman and C. Adami
Fig. 18.5 Basins of attraction in the NK landscape. The bit-string genome of an NK organism
can be translated into a decimal number, and peaks are here plotted with ﬁtness as a function
of this decimal genotype. Four different landscapes for K = 2 (top row) and K = 4 and 6 (bot-
tom row) show that peaks cluster and huge voids exist with no peaks. Because neighboring
genotypes can have very different decimal genotypes, not all adjacent peaks appear close to
each other in decimal space. A single mutation at one locus can add a very high number to
the decimal genotype, and so it is not immediately clear which peaks are close to each other
in actual genotype space. Random reassignment of genotypes to peaks results in a random
distribution in decimal genotype space (gray points in K = 2 and 4). Other kinds of ﬁtness
landscapes can be visualized in a similar fashion, even when the number of alleles is higher
than two.
evolutionary parameters. Because of this prospect, various methods for visualiz-
ing critical properties of ﬁtness landscapes are of great interest. The distribution
of genotypes within populations depends not only on the supply of mutations, but
also on the local structure of the ﬁtness landscape; ﬂat landscapes result in a wider
distribution and thus a higher level of genetic variation than populations located on
a high peak with steep slopes. The amount of genetic variation in turn affects the
evolvability of the population, which is thus intimately tied to the structure of the
ﬁtness landscape.
In order to make predictions about adaptation and speciation using ﬁtness land-
scapes, several features are of particular interest. As outlined above, the spatial

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
521
Fig. 18.6 Model for com-
puting the probability that
a population will traverse a
valley rather than taking the
path of a neutral ridge. The
population starts at geno-
type S with ﬁtness 1 and
can either take the path via
genotypes n–which all have
ﬁtness 1–or go through the
valley via genotype V (with
ﬁtness 0.7). The simulation
is stopped when the ﬁrst
individual reaches the tar-
get genotype T (we record
which path the population
took to get there).
Fig. 18.7 Fraction of 100
simulations where the popu-
lation took the path through
a valley instead of a neutral
ridge. When the mutation
rate is not too low, valley-
crossings are frequent. A
population of 100 individu-
als is started with a genotype
of ﬁtness 1, and can evolve
to the target genotype by
taking a neutral path of
length 4 or by going through
a valley with ﬁtness 0.7. The
neutral ridge genotypes all
have ﬁtness 1, and travers-
ing the valley requires only
two mutations.
distribution of peaks in genotype space will affect evolutionary trajectories, so
species-speciﬁc knowledge of the local structure must be obtained. While for some
organisms it is evident that there are peaks in the local genotype or phenotype neigh-
borhood, it is unclear if this is a general feature of all landscapes. It is possible that
some or most organisms ﬁnd themselves at a peak that is prohibitively far from other
peaks. In such cases, if the landscape changes deprecating the occupied peak, the
environmental change could lead to extinction before the population can respond
adaptively. The extent of peak clustering in the local neighborhood thus anticipates
the evolutionary outcome. Given that speciation can be driven by adaptation to spe-
cialized niches represented by distinct peaks in ﬁtness landscapes [43], it follows

522
B. Østman and C. Adami
that the ruggedness of the landscape and the number of peaks and their proximity to
each other inﬂuences the likelihood of speciation. From this we can hypothesize a
correlation between landscape ruggedness and the rate of speciation. We expect that
the more rugged the landscape is, the higher the rate of speciation will be. It may be
that too much ruggedness diminishes this effect when peaks are too numerous and
close to each other, in which case valleys occupied by hybrids may not prohibit in-
terbreeding, and thus lead to a breakdown of reproductive isolation in sexual species.
In this case there would exist an optimum degree of ruggedness that maximizes the
rate of speciation. If ruggedness could be estimated, it could be compared between
clades that have different rates of speciation. Our expectation would then be that the
rate of speciation is an increasing function of ruggedness up to a point where peaks
become too numerous, leading to a breakdown in reproductive isolation. However,
we currently have no way to estimate local ﬁtness landscape ruggedness without
genotyping and measuring ﬁtness on a massive scale.
We investigated here the question of whether populations would be able to utilize
the neutral ridges in a Holey Landscape [17] using a computational model (Fig-
ure 18.6), and show that even a large reduction in ﬁtness (up to 30%) is tolerated
if the mutation rate is not very low. An important variable here is the population
size: If the population size is small, the mutation-supply rate may be so small that
neutral paths cannot reliably be found. If the population size is large, then even very
small ﬁtness differences can be detected by selection, and thus even fewer paths
are going to be neutral. It is possible that the available neutral paths in the limit of
very high-dimensional genotype space are too few and far between so that bridging
peaks along neutral ridges becomes much less likely than valley-crossing. Further
investigation into the effect of the length of the neutral pathway is also warranted.
It is now clear [39, 45] that deleterious mutations can exist and segregate in popu-
lations for extended periods of time. We also know from experiments with microbes
that populations experience beneﬁcial mutations over long periods of time. Indeed,
in over 50,000 generations of evolution in the Long Term Evolution Experiment
(LTEE) [3], populations of E. coli continue to adapt with no sign of reaching a ﬁt-
ness plateau [48]. It Is not clear whether this evidence is consistent with the Holey
Landscape model of ﬁtness landscapes, in which beneﬁcial mutations are abundant
when the population is not at the highest ﬁtness. If beneﬁcial mutations were that
easy to ﬁnd, why are beneﬁcial mutants still being found after over 50,000 gener-
ations of evolution? The evidence from the LTEE suggests, instead, that beneﬁcial
mutations are rare but continue to be available to lead to evolutionary progress.
Empirical ﬁtness landscapes may turn out to have less in common with com-
putational landscapes than we would have hoped, and it is therefore critical that
empirical landscapes are investigated in greater detail. The common approach is
to measure ﬁtness of many genotypes a couple of mutations away from the peak,
but this is unlikely to yield information about the ruggedness of the landscape.
We therefore suggest that it would be valuable to measure the ﬁtness of genotypes
that are signiﬁcantly removed from the wild-type (up to, say, 10 mutations away).
This is impossible to do exhaustively because of the very large set of mutants, but

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
523
selecting a subset to probe the ﬁtness landscape in this manner could provide infor-
mation about the ﬁtness landscape pertinent to predicting evolutionary dynamics.
Finally, we acknowledge that real biological landscapes are not static entities as
assumed in this work, but can change in both time and space. Evolutionary dy-
namics in non-static landscapes may be quite different from that of static land-
scapes [20, 34]. For example, pathogenic microbes experience changing ﬁtness
landscapes as the host continuously attempts to ﬁght off the infection, and all organ-
isms likewise may at times ﬁnd certain traits to change from being advantageous to
being sub-optimal because of environmental change. In these cases adaptation may
be reduced to simply climbing the closest peak, as the previously optimal genotype
has shifted, and the population ﬁnds itself in a position of low ﬁtness. However, it
is not known how frequently such change occurs, or how much it actually affects
the ﬁtness landscape. It may be that extreme cases of qualitative changes where
peaks shift in genotype space are rare, and that most environmental change results in
smaller deprecations of peaks, which has a less dramatic effect on evolution. It may
be that many populations ﬁnd themselves in effectively static landscapes for most
of their evolutionary history. We therefore contend that knowledge of evolution in
static ﬁtness landscapes will still be relevant for our understanding of evolutionary
dynamics.
Acknowledgements. We would like to thank Anurag Pakanati and Charles Ofria for ex-
tensive discussions on the structure of ﬁtness landscapes. This work was was supported in
part by the National Science Foundation’s Frontier in Integrative Biological Research Grant
No. FIBR-0527023 and NSF’s BEACON Center for the Study of Evolution in Action, under
Contract No. DBI-0939454. We wish to acknowledge the support of the Michigan State Uni-
versity High Performance Computing Center and the Institute for Cyber Enabled Research.
References
[1] Adami, C.: Introduction to Artiﬁcial Life. TELOS Springer Verlag, New York (1998)
[2] Adami, C.: Digital genetics: Unraveling the genetic basis of evolution. Nature Reviews
Genetics 7(2), 109–118 (2006)
[3] Barrick, J.E., Yu, D.S., Yoon, S.H., Jeong, H., Oh, T.K., Schneider, D., Lenski, R.E.,
Kim, J.F.: Genome evolution and adaptation in a long–term experiment with Escherichia
coli. Nature 461(7268), 1243–1247 (2009)
[4] Beerenwinkel, N., Pachter, L., Sturmfels, B., Elena, S.F., Lenski, R.E.: Analysis of
epistatic interactions and ﬁtness landscapes using a new geometric approach. BMC
Evolutionary Biology 7(1), 60:1–60:12 (2007)
[5] Blount, Z.D., Barrick, J.E., Davidson, C.J., Lenski, R.E.: Genomic analysis of a key
innovation in an experimental Escherichia coli population. Nature 489(7417), 513–518
(2012)
[6] Burch, C.L., Chao, L.: Evolvability of an RNA virus is determined by its mutational
neighbourhood. Nature 406(6796), 625–628 (2000)
[7] Bush, R.M.: Predicting adaptive evolution. Nature Reviews 2, 387–392 (2001)

524
B. Østman and C. Adami
[8] Chou, H., Chiu, H., Delaney, N., Segr`e, D., Marx, C.J.: Diminishing returns epistasis
among beneﬁcial mutations decelerates adaptation. Science 332, 1190–1192 (2011)
[9] Covacci, A., Rappuoli, R.: Helicobacter pylori: molecular evolution of a bacterial quasi-
species. Current Opinion in Microbiology 1, 96–102 (1998)
[10] Doebeli, M., Dieckmann, U.: Evolutionary branching and sympatric speciation caused
by different types of ecological interactions. The American Naturalist 156, S77–S101
(2000)
[11] Eigen, M.: Selforganization of matter and the evolution of biological macromolecules.
Die Naturwissenschaften 58(10), 465–523 (1971)
[12] Eigen, M., McCaskill, J., Schuster, P.: Molecular quasi–species. The Journal of Physical
Chemistry 92(24), 6881–6891 (1988)
[13] Elena, S.F., Lenski, R.E.: Test of synergistic interactions among deleterious mutations
in bacteria. Nature 390, 395–398 (1997)
[14] Ellison, G.: Basins of attraction, long–run stochastic stability, and the speed of step–
by–step evolution. Review of Economic Studies 67(1), 17–45 (2000)
[15] Fisher, R.A.: The Genetical Theory of Natural Selection. Oxford University Press, Ox-
ford (1930)
[16] Franke, J., Kl¨ozer, A., de Visser, J.A.G.M., Krug, J.: Evolutionary accessibility of mu-
tational pathways. PLoS Comput. Biol. 7(8), e1002134 (2011)
[17] Gavrilets, S.: Evolution and speciation on holey adaptive landscapes. Trends in Ecology
& Evolution 12(8), 307–312 (1997)
[18] Gavrilets, S.: Fitness Landscapes and the Origin of Species. Princeton University Press,
Princeton (2004)
[19] Gerrish, P.J., Lenski, R.E.: The fate of competing beneﬁcial mutations in an asexual
population. Genetica 102/103, 127–144 (1998)
[20] Hayden, E.J., Wagner, A.: Environmental change exposes beneﬁcial epistatic inter-
actions in a catalytic RNA. Proceedings of the Royal Society B: Biological Sci-
ences 279(1742), 3418–3425 (2012)
[21] Hinkley, T., Martins, J., Chappey, C., Haddad, M., Stawiski, E., Whitcomb, J.M.,
Petropoulos, C.J., Bonhoeffer, S.: A systems analysis of mutational effects in HIV-1
protease and reverse transcriptase. Nature Genetics 43(5), 487–489 (2011)
[22] Jain, K.: Deterministic and stochastic regimes of asexual evolution on rugged ﬁtness
landscapes. Genetics 175, 1275–1288 (2007)
[23] Johnson, T., Barton, N.H.: The effect of deleterious alleles on adaptation in asexual
organisms. Genetics 162, 395–411 (2002)
[24] Kaplan, J.: The end of the adaptive landscape metaphor? Biology & Philosophy 23(5),
625–638 (2008)
[25] Kauffman, S., Levin, S.: Towards a general theory of adaptive walks on rugged land-
scapes. Journal of Theoretical Biology 128(1), 11–45 (1987)
[26] Kauffman, S.: The Origins of Order. Oxford University Press, New York (1993)
[27] Kouyos, R.D., Leventhal, G.E., Hinkley, T., Haddad, M., Whitcomb, J.M., Petropoulos,
C.J., Bonhoeffer, S.: Exploring the complexity of the HIV-1 ﬁtness landscape. PLoS
Genetics 8(3), e1002551 (2012)
[28] Kryazhimskiy, S., Dushoff, J., Bazykin, G.A., Plotkin, J.B.: Prevalence of epistasis in
the evolution of inﬂuenza a surface proteins. PLoS Genetics 7, e1001301 (2011)
[29] Kvitek, D.J., Sherlock, G.: Reciprocal sign epistasis between frequently experimen-
tally evolved adaptive mutations causes a rugged ﬁtness landscape. PLoS Genetics 7(4),
e1002056 (2011)

18
Predicting Evolution and Visualizing High–Dimensional Fitness Landscapes
525
[30] Khan, A.I., Dinh, D.M., Schneider, D., Lenski, R.E., Cooper, T.F.: Negative epistasis
between beneﬁcial mutations in an evolving bacterial population. Science 332, 1193–
1196 (2011)
[31] Lunzer, M., Miller, S.P., Felsheim, R., Dean, A.M.: The biochemical architecture of an
ancient adaptive landscape. Science 310, 499–501 (2005)
[32] Martins, J.Z.R.: The exploration of HIV ﬁtness landscapes. Ph.D. thesis, Universiy of
Zurich (2012)
[33] McCandlish, D.: Visualizing ﬁtness landscapes. Evolution 65(6), 1544–1558 (2011)
[34] Mustonen, V., L¨assig, M.: From ﬁtness landscapes to seascapes: non-equilibrium dy-
namics of selection and adaptation. Trends in Genetics 25(3), 111–119 (2009)
[35] Nosil, P., Harmon, L.: Ecological explanations for (incomplete) speciation. Trends in
Ecology & Evolution 24(3), 145–156 (2009)
[36] Ofria, C., Wilke, C.: Avida: A software platform for research in computational evolu-
tionary biology. Artiﬁcial Life 10, 191–229 (2004)
[37] Orr, H.A.: The rate of adaptation in asexuals. Genetics 155, 961–968 (2000)
[38] Østman, B., Hintze, A., Adami, C.: Critical properties of complex ﬁtness landscapes. In:
Fellerman, H., D¨orr, M., Hanczyc, M.M., Ladegaard Laursen, L., Maurer, S., Merkle,
D., Monnard, P.A., Stoy, K., Rasmussen, S. (eds.) Proc. of the ALife XII Conference,
pp. 126–132. MIT Press (2010)
[39] Østman, B., Hintze, A., Adami, C.: Impact of epistasis and pleiotropy on evolution-
ary adaptation. Proceedings of the Royal Society B: Biological Sciences 279, 247–256
(2012)
[40] Pigliucci, M.: Adaptive landscapes, phenotypic space, and the power of metaphors. The
Quarterly Review of Biology 83(3), 283–287 (2008)
[41] Pitt, J., Ferre-D’Amare, A.: Rapid construction of empirical RNA ﬁtness landscapes.
Science 330, 376–379 (2010)
[42] Richter, H.: Coupled map lattices as spatio–temporal ﬁtness functions: Landscape mea-
sures and evolutionary optimization. Physica D 237(2), 167–186 (2008)
[43] Schluter, D.: Ecology and the origin of species. Trends in Ecology & Evolution 16(7),
372–380 (2001)
[44] Turelli, M., Barton, N.H., Coyne, J.A.: Theory and speciation. Trends in Ecology &
Evolution 16(7), 330–343 (2001)
[45] Weissman, D., Desai, M., Fisher, D.: The rate at which asexual populations cross ﬁtness
valleys. Theoretical Population Biology 75, 286–300 (2009)
[46] Whitlock, M.C., Phillips, P.C., Moore, F.B.G., Tonsor, S.J.: Multiple ﬁtness peaks and
epistasis. Annual Review of Ecology and Systematics 26, 601–629 (1995)
[47] Whitlock, M.C.: Founder effects and peak shifts without genetic drift: Adaptive peak
shifts occur easily when environments ﬂuctuate slightly. Evolution 51(4), 1044–1048
(1997)
[48] Wielgoss, S., Barrick, J.E., Tenaillon, O., Wiser, M.J., Dittmar, W.J., Cruveiller, S.,
Chane-Woon-Ming, B., M´edigue, C., Lenski, R.E., Schneider, D.: Mutation rate dy-
namics in a bacterial population reﬂect tension between adaptation and genetic load.
Proceedings of the National Academy of Sciences 110(1), 222–227 (2013)
[49] Wiles, J., Tonkes, B.: Hyperspace geography: Visualizing ﬁtness landscapes beyond 4D.
Artiﬁcial Life 12, 211–216 (2006)
[50] Wilke, C.O.: Probability of ﬁxation of an advantageous mutant in a viral quasispecies.
Genetics 163, 467–474 (2003)

526
B. Østman and C. Adami
[51] Wright, S.: Evolution in Mendelian populations. Genetics 16(2), 97–159 (1931)
[52] Wright, S.: The roles of mutation, inbreeding, crossbreeding and selection in evolution.
In: Jones, D. (ed.) Proceedings of the 6th International Congress on Genetics, vol. 1,
pp. 356–366 (1932)
[53] Wright, S.: The shifting balance theory and macroevolution. Annual Review of Genet-
ics 16, 1–19 (1982)

Part V
Outlook and Afterthoughts

Chapter 19
Frontiers of Fitness Landscapes: A Summary of
Open Questions
Hendrik Richter
Abstract. In this chapter we brieﬂy look at possible future issues in ﬁtness land-
scape research. We discuss challenges to a ﬁtness landscape approach that result
from recent experimental and theoretical ﬁndings about the information transfer in
biological systems. In addition, we set out opportunities these results may open up
and speculate about directions that landscape research may take. We summarize the
discussion by laying out eight open questions.
19.1
Challenges and Limitations
In the other chapters of this book recent advances in the theory and application
of ﬁtness landscapes are presented. These chapters review each with its own focus
and perspective the current state of understanding and also point at open problems
and possible future directions. This chapter does not aim at repeating these detailed
discussions. Accompanying these discussions, we here rather intend to focus on is-
sues and ideas that were not explicitly addressed in other chapters of this book and
give a more general summary of potential ﬁelds in future ﬁtness landscape research.
In the following, we will slightly deviate from the convention to initiate the dis-
cussion of what we wish (or need) to ﬁnd out by laying out what we actually do
know. Acknowledging that the current understanding is given in the other chapters
of this book, we will start this outlook on open questions with a concise discus-
sion about the current and fundamental limits and challenges of the ﬁtness land-
scape approach. This goes along with our conviction that reporting research without
identifying promises and possibilities as well as limitations and impossibilities is
incomplete.
Hendrik Richter
HTWK Leipzig University of Applied Sciences, Faculty of Electrical Engineering
and Information Technology, D–04251 Leipzig, Germany
e-mail: richter@eit.htwk-leipzig.de
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
529
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_19, c⃝Springer-Verlag Berlin Heidelberg 2014

530
H. Richter
Fitness landscapes are built by the relations between the genetically coded pos-
sibility (genotype), the actually realized biological system (phenotype) and the
reproduction and survival success (ﬁtness). These relations evoke genotype–to–
ﬁtness maps with imprinted potentials for evolutionary dynamics. Such maps are the
immediate result of combining the principles of Darwinian evolution with the funda-
mentals of genetics in the so–called modern synthesis. As the understanding of evo-
lutionary aspects of molecular biology has meanwhile moved signiﬁcantly beyond
the modern synthesis, the ﬁtness landscape approach needs to reassess its deﬁn-
ing ingredients: genotype and ﬁtness. Broadly speaking, there are two fundamental
questions. One is what the genotype actually codes for, the other is what ﬁtness
really signiﬁes. We intend to approach these two questions in the light of recent
ﬁndings.
Since the middle of last century we saw a deepening in the understanding of the
biochemical mechanisms of information transfer and inheritance in biological sys-
tems that led to the genetic code of molecular carbon and protein based life. Start-
ing with solving the DNA structure by Watson and Crick in 1953, this development
came to a supposed culminating point about 50 years later with a complete decod-
ing of the human genome (and genomes of other life forms as well). It seemed that
by obtaining the entire genome, the presumed building plan of the actually realized
biological system, we can have a match between the genetic code and correspond-
ing biological structures and processes. Translating these structures and processes
to abilities, traits and features and these features, traits and abilities to reproduction
and survival success would, in principle, construct complete phenotype–to–ﬁtness
maps. Generalizing all possible genetic codings would, in turn, result in genotype–
to–ﬁtness maps as employed by the ﬁtness landscape approach.
However, along the accumulation of experimental and theoretical ﬁndings came
the growing recognition that sequencing the DNA alone is not giving the insight
anticipated about the dynamical process of rendering a phenotypic realization (a
life form with prescribed features and abilities) out of a genotypic speciﬁcation (its
DNA). It rather appears that the genes coded in the DNA do not statically deﬁne
and specify phenotypic realizations themselves, but the interactions that the genes
enable and evoke are dynamically creating developmental possibilities (and proba-
bilities) for phenotypic realizations. A main argument for the interactions enabled
by the DNA (which can be seen as algorithmic processes [69]) being more impor-
tant than the DNA data themselves is the realization that the information content
of the DNA (expressible as the number of base pairs) does not correlate with the
complexity of the biological system that the DNA describes [14, 22, 23]. For in-
stance, the data stored in mammals’ genomes (including the human genome which
has about 3.2 billion base pairs) is much smaller than the genomic size of some
ﬂowering plants and amphibians. Generally we ﬁnd that mammals’ genome size
does not vary very dramatically. If we take the genome size of humans as scale,
the dolphin’s genome, for example, has 80.3% of the humans’ genome size or the
elephant’s 101.9%. Compare to this today’s largest known animal genome, which is
that of an amphibian called the marbled lung ﬁsh (protopterus aethiopicus) and is
44.3 times the length of the human genome and the currently largest known genome,

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
531
which belongs to the Japanese canopy plant (paris japonica) and is 50.7 times as
large [23, 42]. Nevertheless, it seems to be absurd to argue that these plants or am-
phibians have biological structures and behaviors 40 or 50 times as complex as that
of mammals.
The view that the DNA gives a unique speciﬁcation of phenoypic realizations is
summarized by the so–called central dogma of molecular biology [9]. The dogma
states that the ﬂow of genetic information is exclusive and unidirectional from DNA
via RNA to protein (and hence also speciﬁes the upper organizational levels of com-
plex biological systems from RNA networks and sub–cellular machinery via cells,
tissues and organs to the organism itself). There are further implications of this view.
Information–transferring and –processing functionality can be generally described
as to emerge from data plus an algorithm acting on these data (or an algorithm plus
data processed by the algorithm). As biological information transfer is central to the
understanding of evolutionary dynamics, this functionality also applies to biologi-
cal systems. Taking this view, the central dogma implies that the DNA incorporates
not only the data required to specify a protein, but also the algorithm that processes
these data and brings the protein into being. In other words, the DNA does contain
all the information that is needed to reconstruct an organism. It turned out that this
view is at least an oversimpliﬁcation [37, 38, 56, 69]. Over the last 20 years several
microbiological information–processing activities have been discovered and studied
that do not ﬁt into this view of DNA being both data and processing information and
are even outrightly forbidden according to the central dogma.
Amongst these “classically forbidden” processes the different forms of so–called
mobile genetic elements are particularly interesting [56, 57, 64, 70]. Two forms, hor-
izontal gene transfer and the effect of transposable elements (also known as trans-
posons) have impact on the understanding of genotype–to–ﬁtness maps beyond the
modern synthesis. Horizontal transfer refers to the process of transmission of genes
or genetic material from one organism to another in nonhereditary mechanisms.
Horizontal transfer complements vertical transfer which is a generational transmis-
sion of genes from parents to offspring by (sexual or asexual) reproduction. The
horizontal transmission is subsequently expressed, meaning that the exchange on
the level of the genotype also alters the phenotype of the receiving organism. It is
known since a rather long time that such an exchange of genetic material during the
life time (and hence nonhereditary) occurs in bacteria and other simple single–celled
micro–organisms [63]. Lately, it became apparent that horizontal gene transfer also
plays an important role in more complex multi–cellular organisms [5, 31, 81]. In
addition, horizontal transfer intermingles with the effect of transposons.
An established consequence of the fact that complexity of the biological sys-
tem and the information content of its DNA (as measured by the number of base
pairs) does not correlate is that the genes that actually code for proteins are only a
(more or less large, or small) fraction of the whole genome. Next to coding DNA
we have what is called non–coding DNA, sometimes (inappropriately) dubbed as
junk DNA. The DNA further consists of sequences whose elements are transpos-
able. These transposable elements are also non–coding and have the property to be
able to change position within the genome, which inspired to name them jumping

532
H. Richter
genes. Transposable elements can have the effect of causing or reversing mutations
on the DNA and also altering the genome’s size. Also, transposable elements can be
horizontally transfered [52, 64]. Moreover, there are strong hints that the horizontal
transfer of transposable elements is a major force in genome evolution and drives
the spread of genetic innovation [17, 64, 70]. In other words, nonhereditary pro-
cesses can cause moves in the genotypic space during the lifetime of a phenotypic
realization. If these moves affect reproduction and survival success, the distribution
of ﬁtness over genotypic space is no longer constant.
Apart from these classically forbidden processes, there is another complication
to the exclusive and unidirectional information ﬂow from DNA to organism which
comes into being by the role the RNA plays in this process. Meanwhile, we know
that the multitude of different RNAs is so large and their functions are so diverse
that these RNAs are sometimes playfully called as belonging to an RNA zoo [66].
The translation process from DNA via RNA to protein is highly complex. According
to the central dogma of molecular biology, the main function of RNA is to trans-
form the information stored in the DNA into proteins in a rather passive process.
The RNA is mainly seen as a carrier of coding information. Again, this appears to
be overly simplistic [15, 66, 77]. Next to the function of reading, decoding and con-
verting of information stored in the DNA, the RNAs perform a signiﬁcant number
of regulation processes, for instance to determine which genomic regions are acces-
sible, to activate or silence promoters to control the activity of genes, to switch on
and off the transcription and translation process of proteins, or to repair the genome
by compensatory mutations. These regulation processes are inﬂuenced by and inter-
act with the molecular environment in which the translation process from DNA via
RNA to protein takes place. The molecular environment, in turn, is stimulated by
the organism it belongs to and ecological processes the organism is exposed to. As
a consequence, there is a coupling between evolutionary processes on a molecular
level and ecological processes on a macroscopic level. The way the organism ex-
periences its ecological environment inﬂuences which DNA–to–protein translation
processes occur. The results of the translation processes, on the other hand, drive
phenotypicfeatures and potentially alter the organism’sabilities to cope with the eco-
logical environment. Recent experimental and theoretical results suggest that these
features of the RNAs promote the merger of evolutionary and ecological timescales
and are responsible for the rapid occurrence of evolutionary novelty in biological
systems [3, 24, 41, 53, 67]. We also refer to Chapter 12 of this book by Richard
Watson and Marc Ebner for further discussion of eco–evolutionary dynamics.
For a ﬁtness landscape view the versatile functions of RNAs and the coupling
between evolutionary and ecological processes means that the same genotype may
have different phenotypic realizations with possibly different ﬁtness values. This
also means that it may be useful to consider that ﬁtness has spatial and temporal
granularity [61]. The spatial scale (with given granularity) is in phenotypic space
and reﬂects the fact that a genotype may be polysemous and hence implies equivocal
but summable ﬁtness. The temporal scale reﬂects the interdependencies that result
from the merger of evolutionary and ecological processes in specifying a phenotype
and its ﬁtness.

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
533
To conclude the concept that the DNA uniquely speciﬁes a phenotypic realization
is at least incomplete and most likely a gross oversimpliﬁcation. This also implies
that a ﬁtness landscape approach in the simple form as sketched at the beginning of
this section is questionable. Provocatively, it could be asked if there is a genotype–
to–ﬁtness map at all. We next review how these results may open up chances for
future developments in ﬁtness landscape research.
19.2
Chances and Directions
In the last section we have discussed some recent ﬁndings about the way genetic
information is processed in the lower organizational levels of complex biological
systems. From these ﬁndings it can be concluded that neither the central dogma of
molecular biology nor the modern synthesis of evolutionary biology are sufﬁcient
theoretical frameworks for truly understanding evolutionary processes [20, 21, 56,
57]. On a more general level, these deﬁcits may also be responsible for alternatives
to a (bio–)chemistry–centeredview of evolutionary processes gaining in importance.
According to these alternatives, evolution is foremost a physical process and life is
but one manifestation of this process [12, 21]. Evolution deﬁnes life, but life is an
exempliﬁcation of evolution. To understand the physical process of evolution it is
necessary to describe its dynamics and hence to identify the driving forces that cause
this dynamics. In physics, on a fundamental level, the forces that enable dynamics
are the result of symmetry breaking [1, 6]. The same could (or even should) apply for
the forces underlying evolutionary dynamics. There are some proposes to formulate
the emergence of topological features in ﬁtness landscapes as a symmetry breaking
process, or instance for equivocal genotype–to–phenotype maps using the concept
of effective ﬁtness [61] or in describing how in evolutionary computation crossover
exploits certain search space properties [45, 48]. However, these proposes do only
start to include some of the highly complex processes that specify phenotypic re-
alizations as considered in the last section, see for example [49, 50, 51]. To extend
these ideas appears to be promising and we next brieﬂy outline the link between
symmetry breaking and ﬁtness landscapes.
From the perspective of a phenotype, several genotypes may be suitable to dy-
namically provide genotypic traits that enhance survival and reproduction success
in a given ecological environment [2]. From the perspective of a genotype, sev-
eral phenotypes might be the outcome from the way the complex transcription and
translation process of proteins interacts with environmental conditions. Moreover,
the ecological environment itself undergoes its own dynamic processes. In the ab-
sence of all environmental conditions, all genotypes may have the same survival and
reproduction ﬁtness. The genotypes can be seen as symmetric. The environmental
conditions and their dynamics set what ﬁtness means and signiﬁes; the genotypic
symmetry is broken. The symmetry breaking hence cast (or recast) a non–trivial
ﬁtness landscape and formulates the driving forces of evolutionary dynamics. This,
however, at the same time deﬁnes (or redeﬁnes) the genotype–to–phenotype map

534
H. Richter
in a complex process that has its own dynamics and is assumed to be subject
to driving forces other than pure selective pressure; see as an example protein
evolution [80]. There is evidence that changing environmental conditions may
trigger these transcription and translation processes (and hence set the genotype–
to–phenotype map) [3, 24, 67]. However, the transcription and translation processes
are not mappings of environmental dynamics in any trivial way and follow their own
developmental principles, for instance they obeys the laws of physics and chem-
istry [55, 80] and are subject to self–organization processes [27, 29, 75].
Despite all that, it remains an undisputed fact that the genes of an organism play
a deﬁning (but not the sole) role in causing biological reality and driving evolution-
ary dynamics. The recent ﬁndings discussed in the last section mainly highlight that
the genome encoded in DNA and hereditary information in general are not alone
sufﬁcient to reconstruct an organism [37, 38, 69]. Hence, we need to specify mech-
anisms other than random mutation, genetic recombination, natural selection and
drift to explain evolutionary changes. There is no doubt that whatever the evolu-
tionary variation processes are, success or failure of an evolutionary innovation is
decided by adaption to the environment. To be adapted well foremost means to have
traits and abilities to compete and/or cooperate to maximize the utilization of re-
sources, but also to cope with shifts in climate or other physical attributes of the
living space, and to react on alterations in the food and/or prey abundance, or preda-
tor and/or parasites existence. All this creates pressure that in the end is realized by
natural and sexual selection mechanisms. This is ﬁtness. Clearly, for this process
there must be a relation between the genetically possible (genotype) and ﬁtness.
However, this relation is characterized by the complex processes to render pheno-
typic traits and their effects on ﬁtness. Having rebuffed doubts about the existence of
genotype–to–ﬁtness maps, the more interesting question is what their mathematical
structures and properties are. We think that the ideas of symmetry breaking might
be helpful for approaching this question.
In a way this discussion is closely related to some of the points made by Stuart
Kauffman in his foreword of this book. Roughly summarized, he said that there
are no statable laws for describing the evolution of the biosphere, and hence all
attempts to model evolutionary dynamics, for instance by ﬁtness landscapes, are
likely to come to nothing. In some ways, we think that Kauffman’s arguments are
strong. In all likelihood, there is no underlying prestatable plan for evolution, let
alone for describing evolution spatially and temporally complete. We personally
think that having and solving such laws were to border creationism. Besides, even
if we restrict ourselves to non–living matter, we know that even if we have all the
laws of physics, and all positions and velocities of particles, we cannot predict their
future development spatially and temporally complete. There are several physical
limits that reject this Laplacian idea. However, the limitation can be partly remedied
by relaxing spatial and temporal range. Spatially and temporally local, physics and
chemistry can describe and predict processes in non–living matter rather well. It is
an interesting question to what extend this approach is transferable to evolutionary
processes.

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
535
Evolution is open–ended, evolution has no goal or solution, and evolution is not
optimum seeking in any strict mathematical sense. In such a sense, we were to have
clearly deﬁned input–output–relations between what can possibly be coded by an
information carrier genetically propagable forward in time (input) and what advan-
tages in terms of survival and reproduction success a speciﬁc coded instance has in
a given (and all possible) biospherical environments (output). Evolution as a strict
optimum seeking process would mean to ﬁnd (and hang on to) genetic speciﬁca-
tions that yield highest advantage. The discussions so far about what we know now
suggest that such input–output–relations are seemingly impossible to set up for evo-
lution of a sufﬁciently complex biosphere. Even the starting and the end point of this
input–output–relation is fuzzy. To enumerate all possible codings over a DNA string
(just to remain with what we know now) would exceed the information processing
capacity of the universe. To complicate matters even more, there are nonhereditary
mechanisms of gene transfer and the complex and only superﬁcially understood
rules for the members of the RNA zoo to read the DNA and to specify proteins
out of the reading process. This leads to a combinatorial exploding space of pos-
sibilities for how forms and functions in living entities could look like. At the end
point, the allocation of ﬁtness to living beings is a highly debatable affair for a given
biosphere. To do the same for any possible biosphere would require to specify not
only all biospheres but also the effects the biospheres have on the ﬁtness of all its
members, which again exceeds any possible information processing. Compare to
this also the discussion by Edward Weinberger in the afterthoughts of the book.
There is another argument for evolution not solving an optimization problem in
any conventional sense, which comes from the no free lunch theorem of optimiza-
tion [10, 13, 73, 79]. The theorem states that evaluated over all optimization prob-
lems, there is no algorithm that performs better than others with respect to given
evaluation criteria. In other words, averaged over all possible ﬁtness landscapes, no
mechanism ﬁnds the landscape’s peaks more effectively than all the others. If this is
so then it appears to be puzzling that in natural evolution we should only ﬁnd evolu-
tionary dynamics triggered by random mutation and natural selection (plus genetic
recombination and the other mechanisms that specify the transcription and trans-
lation of phenotypic traits). If we postulate that the biological systems observable
are evidence of success, then we imply that the search mechanism of natural evo-
lution works particularly well for the ﬁtness landscapes that pose the problem of
natural evolution. On the other hand, and with the no free lunch theorem in mind,
this means that the ﬁtness landscapes of natural evolution can only be a tiny fraction
of the prodigious variety of all possible ﬁtness landscapes that the laws of nature
could pose. According to an argument by Kauffman [30], this can only mean that
the ﬁtness landscapes that underly natural evolution must be tailored by evolution
itself. Evolution molds the ﬁtness landscapes in which the mechanisms that cause
evolutionary dynamics perform rather well. This hardly qualiﬁes as optimization in
a strict mathematical sense.
In this context, another recent contribution to the discussion on how biologi-
cal organisms deal with (possibly changing) environmental conditions is of inter-
est: the concepts of evolvability and facilitated variation. Evovability [4, 35, 68]

536
H. Richter
means the potential to generate novel features and abilities by genetic changes that
maintain survival and reproduction success in future environments. Facilitated vari-
ation [32, 40] tries to explain the basic mechanisms for purposeful phenotypic vari-
ations as the result of random genetic mutations. This is centered around the fact
that small genetic mutations might lead to substantial phenotypic changes, which is
a way to explain why small scale mutations can have a considerable impact on phe-
notype even over a small window of generations. The main statement of facilitated
variation is that organisms have intrinsic genetic and non–genetic structures and pro-
cesses allowing to generate substantial and purposeful phenotypic changes by small
scale genetic shifts. On the level of phenotypic traits we ﬁnd a substantial degree
of evolutionary reuse of functional components [57]. In other words, the landscapes
underlying natural evolution facilitate evolvability by restricting and directing the
effects a genotypic transition can have in the phenotypic space. As discussed be-
fore, there are hopes that evolutionary dynamics can be described by establishing
rules that are valid locally. Local may mean spatially and/or temporally local. This
means that evolutionary processes can be understood as to take place on a succes-
sion of (spatially and temporally local) ﬁtness landscapes. Facilitated variation, on
the other hand, implies that the succession more likely follows paths that generate
landscapes with features searchable by the mechanisms of natural evolution.
As provoking as this may sound, the recent challenges to a ﬁtness landscape ap-
proach in the simple form as deﬁned by the modern synthesis do not limit our ability
to seek for explanation of evolutionary processes. Evolution is not random and noth-
ing else [7, 8]. Quite the contrary, the results reviewed in this section show that it
may be possible to understanding evolution as a physical, information–propagating
and algorithmic process [5, 21, 69]. In the next (and ﬁnal) section, we will summa-
rize the discussion of challenges to and potential for ﬁtness landscapes methods by
listing some open problems.
19.3
Summary and Outlook: Eight Open Problems
In the previous section we have brieﬂy discussed some main approaches that re-
search into ﬁtness landscapes could follow. In doing so we have focused on is-
sues and ideas that were not discussed explicitly elsewhere in other chapters of this
book. We now summarize the discussion, seize ideas and suggestions given in other
chapters of the book, and conclude this chapter with laying out a couple of open
problems. Clearly there are more open problems connected to ﬁtness landscapes
nameable as the ones listed here. For instance, open problems connected with char-
acterizing ﬁtness landscapes by landscape measures are left aside for there is a com-
prehensive recent survey and outlook by Malan and Engelbrecht [33]. Moreover, we
would like to single out the following questions because we belief that clarifying
these questions would particularly promote the understanding of some fundamental
issues in evolutionary dynamics.

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
537
One. How do the different levels of meaning and signiﬁcance of ﬁtness interfere
with deﬁning evolutionary dynamics?
As pointed out in previous section’s discussions, the functionality and success
of phenotypic traits is judged by the adaption to environmental conditions and the
ability to cope with the selection pressure that results from it. The phenotypic traits
aggregate to individual quality [76] in surviving and reproducing, which in turn cor-
relates positively with ﬁtness. However, assigning ﬁtness to an actual biological (or
even microbiological) entity is a highly debatable matter [76, 78] (also see Section
1.2 of Chapter 1). As ﬁtness is often considered to be a scalar abstraction of mul-
tiple phenotypic traits, it can be seen as a metric on a highly complex data set. In
other words, what we call ﬁtness is most likely a proxy and the result of an abstrac-
tion, aggregation and interpretation process. Depending on the parameters of this
process, this goes along with ﬁtness that may have spatial and temporal granular-
ity [61]. All this leads to the practice of deﬁning ﬁtness as an axiomatic property of
the landscape. The question is not if this practice is suitable, because for complex
genotypic and phenotypic spaces there seems to be no sensible alternative to it. The
more interesting question is how the different levels of meaning and signiﬁcance of
ﬁtness that come with the abstraction, aggregation and interpretation process inter-
fere with deﬁning evolutionary dynamics. In this context, also the aforementioned
information ﬂow in biological systems is of interest. For instance as the question of
what biological information is needed to specify ﬁtness.
Two. How can recombinational transitions between genotypes be described in land-
scape dynamics?
An important feature of ﬁtness landscapes is that it allows to describe evolu-
tionary dynamics by transitions between genotypes. A succession of evolutionary
transitions gives raise to evolutionary trajectories. The transitions come into being
by evolutionary variation that may be asexual or sexual (or induced by mobile ge-
netic elements, see question Three). Asexual variation results in mutational trajec-
tories; sexual variation creates recombinational trajectories. Mutational trajectories
through genotypic space can be described by Gillespie’s strong selection/weak mu-
tation (SSWM) model [18, 71]. In fact, most of the results on ﬁtness landscapes
are for mutational landscapes (see for instance the discussions in Chapter 6 and 7
of this book). For recombinational transitions, results are more sparse. Although it
has been shown that for homologous recombination (exchange between two simi-
lar or identical molecules of DNA), a treatment similar to mutational landscapes is
possible [19, 59, 60]. For non–homologous recombination, however, the resulting
genotypic space seems to be no longer metric [58, 62]. Possibly, there is a need for
an alternative description of the genotypic space [16, 26]. As sexual variation of ge-
netic material is an important process in evolution, recombinatorial trajectories and
hence recombinatorial ﬁtness landscapes are an open research topic.
Three. How to include evolutionary transitions causes by mobile genetic elements,
in particular by horizontal gene transfer, in ﬁtness landscapes?

538
H. Richter
Recent ﬁndings about the way genetic information is processed in the lower or-
ganizational levels of complex biological systems (as discussed in Section 19.1)
have highlighted the importance of another type of evolutionary transition process:
those induced by mobile genetic elements, in particular by horizontal gene trans-
fer. There are some examples for describing the evolutionary dynamics that comes
with horizontal gene transfer [11, 36, 39, 47]. To some degree these works also ad-
dress implications on ﬁtness landscapes. On a more general level, the question of
including evolutionary transitions causes by mobile genetic elements, in particular
by horizontal gene transfer, in ﬁtness landscapes is unsolved.
Four. What predictions about evolutionary dynamics can be derived from a given
ﬁtness landscape?
For a landscape with a given (non–changing) structure its topological features
(the hills, valley, plains and ridges in the landscape metaphor) result in potentials for
driving forces for evolutionary dynamics (the lakes and ﬂows in the landscape). By
assuming differences in ﬁtness over genotypic space, the movement goes towards
an aim. This deﬁnes possible evolutionary pathways that are directed and produces
evolutionary outcomes that are more likely than others. This suggests that the topol-
ogy and structure of a ﬁtness landscape is a predictor of a likely evolutionary path.
On a conceptional level, the landscape deﬁnes likely paths [72]. On a practical level,
predicting an evolutionary path from a given landscape is still notoriously difﬁcult;
compare, for instance, the discussion in Chapters 4, 6 and 18. To enhance our abil-
ities to predict likely evolutionary paths for a given landscape by improved or new
algorithms and techniques remains an open topic in ﬁtness landscape research. This
question is of immense relevance in both evolutionary biology (for predicting paths
evolutionary processes are likely to take) and evolutionary computation (to predict
the optimization performance of an evolutionary search algorithm). Possibly these
abilities can even be extended to cases where the landscape’s structure is not known
beforehand. Also, it is promising to further support our abilities to predict evolu-
tionary dynamics in a ﬁtness landscape by visualization tools and methods (see for
instance [34, 74] and the discussion in Chapters 17 and 18).
Five. What value and signiﬁcance have empirical ﬁtness landscapes for understand-
ing realistic evolutionary paths?
Given the understanding that a landscape’s topology speciﬁes potential evolution-
ary paths, another interesting question is whether the topology and structure of the
ﬁtness landscape at hand really matches the biological reality it supposes to study. A
recent contribution to this question is empirical ﬁtness landscapes. Such empirical
landscapes are obtained by carrying out step–wise mutational evolution of molec-
ular functions. This implies that molecular evolution allows to measure the ﬁtness
effect that experimentally induced mutations have [28, 43, 65] (also see the discus-
sions in Chapters 1 and 18). The value and signiﬁcance of empirical landscapes is
still far from being clear. Some experiments have shown that empirical landscapes
share important topological features known from computational landscapes, while
some other experiments found not much agreement and applicability. Whether this

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
539
is due to the restriction of low dimensionality that current experimental techniques
and methods allows or points at some more fundamental problems is open. A fur-
ther issue is comparability of empirical landscapes that result from different experi-
ments. For computational landscapes there is some success in evaluating landscapes
by using landscape measures. Possibly, these measures can be modiﬁed to become
meaningful for empirical landscapes. To advance our knowledge about designing,
conducting and evaluating experiments to create and analyze empirical landscapes
is another important topic.
Six. What driving forces cast relevant ﬁtness landscapes?
In the last section we have discussed that there are strong arguments for nat-
ural evolution creating and recasting the ﬁtness landscapes in which evolutionary
dynamics takes place. This means that not only the landscape’s topology is chang-
ing continuously, but also that the basic structure of the landscape is not constant.
A possible way to describe such features might be spatially and temporarily local
landscapes. We have further discussed that on a fundamental level the driving forces
that cause evolutionary dynamics can be thought of as to be the consequence of a
symmetry breaking process. Possibly the idea of symmetry breaking discussed in
Section 19.2 can be stretched as far as to describe the transitions between spatially
and temporarily neighboring local landscapes. Locally valid landscapes can also be
understood as subspaces of a global landscape, as a kind of collapsed genotypic
space. The concepts of evolvability and facilitated variation imply that the succes-
sion of (spatially and temporally local) landscapes is not as random as it could be by
just considering the multitude of possibilities the high–dimensionality of the geno-
typic space creates. All these ideas could contribute to deepen our understanding of
the driving forces that cast relevant ﬁtness landscapes and hence cause evolutionary
dynamics.
Seven. How can the understanding of coevolution be promoted by a landscape view?
If we are not only considering an isolated species, but attempt to describe the
evolutionary dynamics of interacting populations, we end up with coevolutionary
scenarios. Coevolution also occurs as the result of the merger of evolutionary and
ecological timescales in eco–evolutionary dynamics. We refer to the discussion in
the Chapters 10, 11, 12 and 13. It is our understanding that ﬁtness landscapes are
a tool for describing the link between the driving forces of evolution and the actual
evolutionary dynamics. This view should extend to coevolution between popula-
tions. Coevolutionary ﬁtness landscapes are deformable and time–dependent (com-
pare Section 12.3 of Chapter 12). It has been suggested that the deformation of the
ﬁtness landscape that combine two populations can be understood as codynamics
between the ﬁtness landscapes of each population (see Section 10.3 of Chapter 10).
It remains open and is an open problem if and how the understanding of coevolution
can be promoted by such or another landscape view.
Eight. What mathematical properties have realistic genotype–to–ﬁtness maps?

540
H. Richter
Fitness landscapes are about the relationships between the genetically coded pos-
sibility (genotype), the actually realized biological system (phenotype) and the re-
production and survival success (ﬁtness). Recent results (as reviewed in Section
19.1) about the biochemical mechanisms of information transfer and inheritance in
biological systems suggest that these relationships are much more complicated than
initially assumed. Research of ﬁtness landscapes should meet these challenges and
clarify which consequences are connected with these ﬁndings. We think that a cen-
tral issue is the mathematical properties of the genotype–to–ﬁtness maps. For deriv-
ing these maps realistically, new approaches are needed. To look for all–compassing
laws and prestatable plans for evolution will not do. This was, for instance, impres-
sively stated in Stuart Kaufman’s foreword. Studying living matter cannot be based
on a small number of fundamental laws expressible by rather simple equations.
Thus, in want for anything else spatially and temporarily local rules in connection
with a computational approach may be more suitable. Possibly, the idea of symmetry
breaking can be utilized and approaches such the interaction–centered, signal–and–
boundary modeling as suggested by Holland [25] might also be useful. In addition,
it would be desirable to have additional input to the discussion from computational
landscapes. It has been clear for a long time that exhibiting life–like, realistic evo-
lutionary behavior requires computational models that have structures and ﬁtness
that evolve themselves [46]. Such computational models could be viewed as tar-
getless evolutionary algorithms. Dynamic and deformable ﬁtness landscapes most
likely are starting points for understanding evolving ﬁtness. How to mathematically
model landscape structures that evolve is for now far from being clear.
Currently we can observe another wave of scientiﬁc revolution in biology and a
“revival of the landscape paradigm” [54]. This implies that ﬁtness landscapes as a
method can and should incorporate the ﬁndings this revolution yields and remain an
important concept and computational tool for retrospective explanation and guiding
experimental setups. We hope that the eight questions laid out in this section will
promote discussions about interesting topics in ﬁtness landscape research. This is
related closely with the wish to stimulate further understanding of evolutionary dy-
namics and in the end maybe add another little step to answering the question of how
matter organizes (or self–organizes) into entities that are evolvable and evolving.
References
[1] Anderson, P.W.: More is different: Broken symmetry and the nature of the hierarchical
structure of science. Science 177, 393–396 (1972)
[2] Bailey, N.W.: Evolutionary models of extended phenotypes. Trends in Ecology & Evo-
lution 27, 561–569 (2012)
[3] Becks, L., Ellner, S.P., Jones, L.E., Hairston Jr., N.G.: The functional genomics of an
eco–evolutionary feedback loop: linking gene expression, trait evolution, and commu-
nity dynamics. Ecol. Lett. 15, 492–501 (2012)
[4] Borenstein, E., Meilijson, I., Ruppin, E.: The effect of phenotypic plasticity on evolution
in multipeaked ﬁtness landscapes. Jour. Evolut. Biology 19, 1555–1570 (2006)

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
541
[5] Boto, L.: Horizontal gene transfer in evolution: facts and challenges. Proc. R. Soc.
B 277, 819–827 (2010)
[6] Brading, K., Castellani, E. (eds.): Symmetries in Physics: Philosophical Reﬂections.
Cambridge University Press, Cambridge (2003)
[7] Conway Morris, S.: The predictability of evolution: glimpses into a post-Darwinian
world. Naturwissenschaften 96, 1313–1337 (2009)
[8] Conway Morris, S.: Evolution: like any other science it is predictable. Phil. Trans. R.
Soc. B 365, 133–145 (2010)
[9] Crick, F.H.C.: Central dogma of molecular biology. Nature 227, 561–563 (1970)
[10] Culberson, J.C.: On the futility of blind search: An algorithmic view of “no free lunch”.
Evolut. Comput. 6, 109–127 (1998)
[11] Deem, M.W.: Statistical mechanics of modularity and horizontal gene transfer. Annu.
Rev. Condens. Matter Phys. 4, 287–311 (2013)
[12] Drossel, B.: Biological evolution and statistical physics. Adv. Phys. 50, 209–295 (2001)
[13] Droste, S., Jansen, T., Wegener, I.: Optimization with randomized search heuristics–the
(A)NFL theorem, realistic scenarios, and difﬁcult functions. Theor. Comp. Sci. 287,
131–144 (2002)
[14] Dufresne, F., Jeffery, N.: A guided tour of large genome size in animals: what we know
and where we are heading. Chromosome Res. 19, 925–938 (2011)
[15] Eddy, S.: Non-coding RNA genes and the modern RNA world. Nat. Rev. Genet. 2,
919–929 (2001)
[16] Flamm, C., Stadler, B.M.R., Stadler, P.F.: Generalized topologies: Hypergraphs, chem-
ical reactions and biological evolution. In: Basak, S.C., Restrepo, G., Villaveces, J.L.
(eds.) Advances in Mathematical Chemistry: With Applications to Chemoinformatics,
Bioinformatics, Drug Discovery, and Predictive Toxicology, Bentham Publishers, Shar-
jah (in press, 2013), http://www.tbi.univie.ac.at/newpapers/
pdfs/TBI-p-2012-9.pdf
[17] Gilbert, C., Cordaux, R.: Horizontal transfer and evolution of prokaryote transposable
elements in eukaryotes. Genome Bio. Evol. 5, 822–832 (2013)
[18] Gillespie, J.H.: Molecular evolution over the mutational landscape. Evolution 38, 1116–
1129 (1984)
[19] Gitchoff, P., Wagner, G.P.: Recombination induced hypergraphs: a new approach to
mutation-recombination isomorphism. Complexity 2, 37–43 (1996)
[20] Goldenfeld, N., Woese, C.: Biology’s next revolution. Nature 445, 369 (2007)
[21] Goldenfeld, N., Woese, C.: Life is physics: Evolution as a collective phenomenon far
from equilibrium. Annu. Rev. Condens. Matter Phys. 2, 375–399 (2011)
[22] Gregory, T.R.: The Evolution of the Genome. Elsevier Academic Press, Burlington
(2005)
[23] Gregory, T.R.: Animal Genome Size Database, http://www.genomesize.com
(accessed May 22, 2013)
[24] Hairston Jr., N.G., Ellner, S.P., Geber, M.A., Yoshida, T., Fox, J.A.: Rapid evolution and
the convergence of ecological and evolutionary time. Ecol. Lett. 8, 1114–1127 (2005)
[25] Holland, J.H.: Signals and Boundaries: Building Blocks for Complex Adaptive Sys-
tems. MIT Press, Cambridge (2012)
[26] Huttegger, S.M., Mitteroecker, P.: Invariance and meaningfulness in phenotype spaces.
Evol. Biol. 38, 335–351 (2011)
[27] Johnson, B.R., Lam, S.K.: Self-organization, natural selection, and evolution: Cellular
hardware and genetic software. BioScience 60, 879–885 (2010)

542
H. Richter
[28] Lobkovsky, A.E., Wolf, Y.I., Koonin, E.V.: Predictability of evolutionary trajecto-
ries in ﬁtness landscapes. PLoS Comput. Biol. 7(12), e1002302 (2011), doi:10.1371/
journal.pcbi.1002302
[29] Kauffman, S.A.: The Origin of Order: Self–Organization and Selection in Evolution.
Oxford University Press, New York (1993)
[30] Kauffman, S.A.: Investigations. Oxford University Press, New York (2002)
[31] Keeling, P.J., Palmer, J.F.: Horizontal gene transfer in eukaryotic evolution. Nat. Rev.
Genet. 9, 605–618 (2008)
[32] Kirschner, M.W., Gerhart, J.C.: The Plausibility of Life: Resolving Darwin’s Dilemma.
Yale University Press, New Haven (2005)
[33] Malan, K.M., Engelbrecht, A.P.: A survey of techniques for characterising ﬁtness land-
scapes and some possible ways forward. Information Science 241, 148–163 (2013)
[34] McCandlish, D.M.: Visualizing ﬁtness landscapes. Evolution 65, 1544–1558 (2011)
[35] Meyers, L.A., Bull, J.J.: Fighting change with change: adaptive variation in an uncertain
world. Trends in Ecology & Evolution 17, 551–557 (2002)
[36] Mozhayskiy, V., Tagkopoulos, I.: Horizontal gene transfer dynamics and distribution
of ﬁtness effects during microbial in silico evolution. BMC Bioinformatics 13, S13-1–
S13-17 (2012)
[37] Noble, D.: Genes and causation. Phil. Trans. R. Soc. A 366, 3001–3015 (2008)
[38] Noble, D.: A biological relativity view of the relationships between genomes and phe-
notypes. Prog. Biophys. Mol. Biol. 111, 59–65 (2013)
[39] Park, J.M., Deem, M.W.: Phase diagrams of quasispecies theory with recombination
and horizontal gene transfer. Theor. Popul. Biol. 70, 479–485 (2006)
[40] Parter, M., Kashtan, N., Alon, U.: Facilitated variation: How evolution learns from past
environments to generalize to new environments. PLoS Comput. Biol. 4(11), e1000206
(2008), doi:10.1371/journal.pcbi.1000206
[41] Pelletier, F., Garant, D., Hendry, A.P.: Eco-evolutionary dynamics. Phil. Trans. R. Soc.
B 364, 1483–1489 (2009)
[42] Pellicer, J., Fay, M.F., Leitch, I.J.: The largest eukaryotic genome of them all? Bot. Jour.
Linnean Soc. 164, 10–15 (2010)
[43] Poelwijk, F.J., Kiviet, D.J., Weinreich, D.M., Tans, S.J.: Empirical ﬁtness landscapes
reveal accessible evolutionary paths. Nature 445, 383–386 (2007)
[44] Poli, R., Vanneschi, L., Langdon, W.B., McPhee, N.F.: Theoretical results in genetic
programming: the next ten years? Genet. Program Evolvable Mach. 11, 285–320 (2010)
[45] Pr¨ugel–Bennett, A.: Symmetry breaking in population-based optimization. IEEE Trans.
Evolut. Comp. 8, 63–79 (2004)
[46] Ray, T.S.: Is it alive or is it GA? In: Belew, R.K., Booker, L.B. (eds.) Proceedings
of the Fourth International Conference on Genetic Algorithms, pp. 527–534. Morgan
Kauffman, San Mateo (1991)
[47] Raz, Y., Tannenbaum, E.: The inﬂuence of horizontal gene transfer on the mean ﬁtness
of unicellular populations in static environments. Genetics 185, 327–337 (2010)
[48] Rogers, A., Pr¨ugel–Bennett, A., Jennings, N.R.: Phase transitions and symmetry break-
ing in genetic algorithms with crossover. Theor. Comp. Sci. 358, 121–141 (2006)
[49] Saito, N., Ishihara, S., Kaneko, K.: Evolution of genetic redundancy: The relevance
of complexity in genotype-phenotype mapping. Submitted to Europhys. Lett. (2013),
http://arxiv.org/pdf/1302.2234v1.pdf
[50] Sakata, A., Hukushima, K., Kaneko, K.: Replica symmetry breaking in an adiabatic
spin-glass model of adaptive evolution. Europhys. Lett. 99, 68004 (2012)

19
Frontiers of Fitness Landscapes: A Summary of Open Questions
543
[51] Sayama, H., Kaufman, L., Bar-Yam, Y.: Symmetry breaking and coarsening in spatially
distributed evolutionary processes including sexual reproduction and disruptive selec-
tion. Phys. Rev. E 62, 7065–7069 (2000)
[52] Schaack, S., Gilbert, C., Feschotte, C.: Promiscuous DNA: horizontal transfer of trans-
posable elements and why it matters for eukaryotic evolution. Trends in Ecology &
Evolution 25, 537–546 (2010)
[53] Schoener, T.W.: The newest synthesis: understanding the interplay of evolutionary and
ecological dynamics. Science 331, 426–429 (2011)
[54] Schuster, P.: A revival of the landscape paradigm: Large scale data harvesting provides
access to ﬁtness landscapes. Complexity 17, 6–10 (2012)
[55] Shakhnovich, E.I.: Protein folding thermodynamics and dynamics: where physics,
chemistry, and biology meet. Chem. Rev. 106, 1559–1588 (2006)
[56] Shapiro, J.A.: Revisiting the central dogma in the 21st century. N.Y. Acad. Sci. 1178,
6–28 (2009)
[57] Shapiro, J.A.: Mobile DNA and evolution in the 21st century. Mobile DNA 1, 1–14
(2010)
[58] Shpak, M., Wagner, G.P.: Asymmetry of conﬁguration space induced by unequal
crossover: implications for a mathematical theory of evolutionary innovation. Artiﬁcial
Life 6, 25–43 (2000)
[59] Stadler, P.F., Wagner, G.P.: The algebraic theory of recombination spaces. Evol. Com-
putation 5, 241–275 (1998)
[60] Stadler, P.F., Seitz, R., Wagner, G.P.: Population dependent Fourier decomposition of
ﬁtness landscapes over recombination spaces: evolvability of complex characters. Bull.
Math. Biol. 62, 399–428 (2000)
[61] Stadler, P.F., Stephens, C.R.: Landscapes and effective ﬁtness. Comm. Theor. Biol. 8,
389–431 (2003)
[62] Stadler, B.M.R., Stadler, P.F., Wagner, G.P., Fontana, W.: The topology of the possible:
Formal spaces underlying patterns of evolutionary change. J. Theor. Biology 213, 241–
274 (2001)
[63] Syvanen, M.: Cross-species gene transfer: implications for a new theory of evolution. J.
Theor. Biology 112, 333–343 (1985)
[64] Syvanen, M.: Evolutionary implications of horizontal gene transfer. Ann. Rev. Gen. 46,
341–358 (2012)
[65] Szendro, I.G., Schenk, M.F., Franke, J., Krug, J., de Visser, J.A.G.M.: Quantita-
tive analyses of empirical ﬁtness landscapes. Jour. Stat. Mech., P01005 (2013),
dx.doi.org/10.1088/1742-5468/2013/01/P01005
[66] Tanzer, A., Riester, M., Hertel, J., Bermudez-Santana, C.I., Gorodkin, J., Hofacker,
I.L., Stadler, P.F.: Evolutionary genomics of microRNAs and their relatives. In: Caetano
Anolles, G. (ed.) Evolutionary Genomics and Systems Biology, pp. 295–327. Wiley–
Blackwell, Hoboken (2010)
[67] Thompson, J.N.: Rapid evolution as an ecological process. Trends in Ecology & Evo-
lution 13, 329–332 (1989)
[68] Wagner, A.: Robustness and Evolvability in Living Systems. Princeton University Press,
Princeton (2007)
[69] Walker, S.I., Davies, P.C.W.: The algorithmic origins of life. J. Royal Society Inter-
face 10, 20120869 (2013), http://arxiv.org/abs/1207.4803
[70] Wallau, G.L., Ortiz, M.F., Loreto, E.L.S.: Horizontal transposon transfer in eukarya:
detection, bias, and perspectives. Genome Bio. Evol. 4, 801–811 (2012)

544
H. Richter
[71] Weinreich, D.M., Watson, R.A., Chao, L.: Sign epistasis and constraint on evolutionary
trajectories. Evolution 59, 1165–1174 (2005)
[72] Weinreich, D.M., Sindi, S., Watson, R.A.: Finding the boundary between evolutionary
basins of attraction, and implications for Wright’s ﬁtness landscape analogy. Jour. Stat.
Mech., P01001 (2013), doi:10.1088/1742-5468
[73] Whitley, D., Watson, J.P.: Complexity theory and the no free lunch theorem. In: Burke,
E.K., Kendall, G. (eds.) Search Methodologies: Introductory Tutorials in Optimization
and Decision Support Techniques, pp. 317–339. Springer, New York (2005)
[74] Wiles, J., Tonkes, B.: Hyperspace geography: Visualizing ﬁtness landscapes beyond 4D.
Artiﬁcial Life 12, 211–216 (2006)
[75] Wills, P.R.: Informed generation: Physical origin and biological evolution of genetic
codescript interpreters. J. Theor. Biology 257, 345–358 (2009)
[76] Wilson, A.J., Nussey, D.H.: What is individual quality? An evolutionary perspective.
Trends in Ecology & Evolution 25, 207–214 (2010)
[77] Win, M.N., Liang, J.C., Smolke, C.D.: Frameworks for programming biological func-
tion through RNA parts and devices. Chem. Biol. 16, 298–310 (2009)
[78] Wolf, J.B., Wade, M.J.: On the assignment of ﬁtness to parents and offspring: whose
ﬁtness is it and when does it matter? Jour. Evolut. Biol. 14, 347–356 (2001)
[79] Wolpert, D.H., Macready, W.G.: No free lunch theorems for optimization. IEEE Trans.
Evolut. Comp. 1, 67–82 (1997)
[80] Zeldovich, K.B., Shakhnovich, E.I.: Understanding protein evolution: from protein
physics to Darwinian selection. Annu. Rev. Phys. Chem. 59, 105–127 (2008)
[81] Zhaxybayeva, O., Ford Doolittle, W.: Lateral gene transfer. Current Biology 21, R242–
R246 (2011)

Chapter 20
Fitness Landscapes – 20 Years Later
Edward D. Weinberger
I never told Stu Kauffman this, but, when I set out to climb ﬁtness peaks with him
20 years ago as his post-doc, I was a bit suspicious that we were over-simplifying
things – at least as far as biological evolution was concerned. Biological evolution,
after all, is a dynamical process, and there are many aspects of the dynamics that are
not obvious from knowledge of the landscape alone. While my subsequent career
has been in quantitative ﬁnance, I kept thinking about these caveats, even as I was
working with those infamous sub-prime mortgage backed securities, the ones that
caused the ﬁnancial crisis.
And I wondered if we are making similar mistakes in evolutionary theory. The
textbooks deﬁne the ﬁtness of an organism as the expected number of reproduc-
tively viable offspring in a single generation. This deﬁnition has the same veneer
of exactitude, the same pretense of quantitative certainty that I often see in ﬁnance.
In ﬁnance, we have a parallel to expected number of offspring, and that is expected
return on an investment. However, investing has another dimension – entirely dis-
tinct from expected return – and that is risk. There is a big difference between an
investment for which a 5% return is guaranteed, and an investment where, half the
time, returns are 40%, but a 30% loss is equally likely! Yet both of these investments
have the same expected return of 5%. Similarly, equating ﬁtness with expected num-
bers of offspring equates steady population growth with a population growth/decline
that could lead to either huge populations or extinction. In fact, a population that is
equally likely to grow by 40% per year and shrink by 30% per year will, with cer-
tainty, eventually become extinct, as is evident from the following:
After N generations, suppose we have population growth in G of those genera-
tions, and population shrinkage in N −G of those generations. Suppose further that,
Edward D. Weinberger
Weinberger Post-Quantitative, Inc., 370 Central Park West, #110,
New York, NY 10025, U.S.A.
Department of Finance and Risk Engineering, Polytechnic Institute of New York University,
6 Metrotech Center, Brooklyn, NY 12201, U.S.A.
e-mail: edw@wpq-inc.com
H. Richter and A.P. Engelbrecht (eds.), Recent Advances in the Theory
545
and Application of Fitness Landscapes, Emergence, Complexity and Computation 6,
DOI: 10.1007/978-3-642-41888-4_20, c⃝Springer-Verlag Berlin Heidelberg 2014

546
E.D. Weinberger
if the population grows by the factor g if it grows and s if it shrinks. Then the popu-
lation will grow to gGsN−G individuals per individual in the starting population after
N generations (Note that this latter quantity is a random variable because G is.).
What are the circumstances under which gGsN−G is smaller than one? Whatever
they are, they are certainly the same as those under which Gln g
s +N lns < 0. But, by
the Strong Law of Large Numbers, G = pGN + o(N) with probability 1 as N →∞,
where pG is the probability that there is growth for a given generation. It follows
that there will be extinction with probability 1 if
pG ln g
s + lns < 0
(20.1)
(In the situation given above, pG = 1
2, g = 1.4, and s = 0.7, so pG ln g
s + lns ≈
−0.0101, thus proving my claim above.).
Finance also teaches us that no man – or company, or organism – is an is-
land. Companies have suppliers, customers, and competitors. Organisms have prey,
predators, and ecological niches. A projection of corporate earnings that ignores the
overall state of the economy and a calculation of “expected number of offspring” of
a deer that ignores whether nearby hunters have bows and arrows or deer riﬂes are
equally meaningless. Yet the above deﬁnition of ﬁtness ignores the fact that coevo-
lution can re-deﬁne the dynamics of evolutionary change to the point where ﬁtness
in a static environment is no longer relevant. Also refer to the discussions in the
Chapters 10, 11 and 12 of this book.
Perhaps the most precise possible deﬁnition of ﬁtness can be found in Eigen’s
quasi-species theory [2, 3, 4]. Given the experimentally observed sequence speciﬁc
replication of RNA macromolecules in vitro in the presence of appropriate RNA
monomers and replication enzymes, ﬁtness is simply the replication rate of a speciﬁc
sequence. Yet, even in that simple case, the ﬁttest (in the sense of fastest replicating)
sequence was not the only one that survived. Instead, sequences that were likely to
arise from copying errors of the rapid replicators were also found, even if these se-
quences were, themselves, not quite the best. In fact, depending on the details of the
replication rates of all of the sequences involved, the sequence found in the highest
concentration might not have the absolute fastest replication rate, but might, instead,
be the likely beneﬁciary of copying errors from many other sequences with slightly
faster replication rates but with fewer close mutants that also have fast replication
rates.
In settings closer to what we would generally think of as biological, the concept
of ﬁtness is even more problematic. Almost every organism interacts with the rest
of the biosphere as a prey species for some other organism or a predator of some
other organism or both. Thus, the dynamics of that organism’s population growth
and decline must also account for the population of its predator(s) and/or prey, nec-
essarily coupling the dynamics of all species involved. Even the simplest form of
this coupling, in which the growth/death rate of the ﬁrst species is proportional to
both its current population size and that of the prey/predator, is non-linear, in con-
trast with the linear growth rate implicit in any reasonable deﬁnition of ﬁtness. So,
not surprisingly, we ﬁnd all of the behaviors – stability, limit cycles, and even chaos

20
Fitness Landscapes – 20 Years Later
547
– inherent in nonlinear systems in the dynamics of actual biological populations
(The observation of the ﬁrst two kinds of dynamics in ﬁsh catches in the Adriatic
inspired the familiar Lotka-Volterra model. Less familiar to many readers may be
the recent discovery that a time series of Canadian lynx populations – well known
to defy many previous modeling attempts – is well ﬁtted by a chaotic model. See,
for example, Small and Carmel [6].).
Obviously, to the degree that actual biological populations are governed by
chaotic dynamics, ﬁtness, and thus the whole ediﬁce of Darwinian selection is called
into question. Yet the viability of the concept of ﬁtness has been demonstrated in
a host of theoretical and experimental situations, from optimization algorithms in
computer science to the emergence of antibiotic resistant bacteria. So when can we
say that ﬁtness the ability of an organism to reproduce regardless of chance ﬂuctu-
ations and populations of other organisms in its world is a meaningful concept, and
when must we admit that it is not?
One small step towards an answer to this question is suggested by the fact that
expected growth rates seem to do a better job of describing the dynamical properties
of the process than expected number of offspring per generation. Nor is this an
isolated example. As is well known to students of ﬁnance, the above population
model, a geometric random walk, converges to geometric Brownian motion in the
limit as the number of generations per time unit approaches inﬁnity. Unlike the wide
class of processes that converge to it, geometric Brownian motion is characterized
completely by specifying only the instantaneous growth rate, μ, which would be
obtained if there were no random ﬂuctuations, and the standard deviation, σ, of
percentage ﬂuctuations in the actual growth rate. The expected instantaneous growth
rate of the process is then given by μ −1
2σ2 (See, for example, [5] for details). This
last fact allows us to distinguish situations when chance ﬂuctuations are or are not
important, simply by observing whether μ ≫σ2.
Expected growth rates also allow us to determine the relevance of coevolutionary
effects, especially given the close, albeit surprising relationship between expected
growth rates and information theory (see, for example, a detailed discussion of the
relationship between the expected growth rate of an investment portfolio and infor-
mation theory in Cover and Thomas [1]). As I discuss more fully in [8], evolutionary
adaptation is the result of decisions made by nature about what kind of organisms
continue to populate the earth, and what kind of organisms become extinct, just
as price movements in the stock market are the result of the collective buying and
selling decisions of every market participant. Both kinds of decisions are informed
by what I call “pragmatic information”, the amount of information actually used in
making a decision [7, 8, 9]. Also refer to Chapter 3 for an application to biological
systems. Viewing evolution through the lens of pragmatic information offers an el-
egant resolution to the problems noted above. If the rate at which the evolutionary
decision is being made depends primarily on factors within the organism, then it is
reasonable to talk about ﬁtness. If not, not.
In the last 20 years much progress has be made in understanding ﬁtness land-
scapes underlying both natural and artiﬁcial evolutionary processes. At the same
time, further fundamental research questions opened up and may become within

548
E.D. Weinberger
reach of landscape methods. The chapters of this book reviewed and discussed both
the progress and the potential of these methods. May these ideas be received well
and contribute to further understanding of biological and artiﬁcial evolution.
References
[1] Cover, T., Thomas, J.: Elements of Information Theory. John Wiley & Sons, New York
(1991)
[2] Eigen, M.: Self-organization of matter and the evolution of biological macromolecules.
Die Naturwissenschaften 58, 465–532 (1971)
[3] Eigen, M., Schuster, P.: The Hypercycle: A Principle of Natural Self-Organization. Si-
mon and Schuster, New York (1979)
[4] Eigen, M., McCaskill, J., Schuster, P.: Molecular quasi-species. The Journal of Physical
Chemistry 92, 6881–6891 (1988)
[5] Hofbauer, J., Sygmund, S.: Dynamical Systems and the Theory of Evolution. Cambridge
University Press, Cambridge (1988)
[6] Small, M., Carmeli, C.: Re-examination of evidence for low-dimensional chaos in the
Canadian lynx data. In: Ueta, T. (ed.) Proc. 2009 International Symposium on Nonlinear
Theory and Its Applications, NOLTA 2009, pp. 651–654 (2009)
[7] Weinberger, E.D.: A theory of pragmatic
information and its application to
the quasispecies model of biological evolution. BioSystems 66, 105–119 (2013),
http://arxiv.org/abs/nlin.AO/0105030 (accessed April 10, 2013)
[8] Weinberger, E.D.: Pragmatic information and Gaian development. Mind and Matter 4,
219–234 (2013), http://arxiv.org/abs/nlin.AO/0606012 (accessed April
10, 2013)
[9] Weinberger, E.D.: Pragmatic information rates, generalizations of the Kelly criterion, and
ﬁnancial market efﬁciency (2011), http://arxiv.org/abs/0903.2243
(accessed April 10, 2013)

Index
ω-limit
167
Accumulated escape probability, aep
134,
139
Ackley function
111
Adaptive landscape
7
Additivity measure
186
Algorithm selection problem
106
Allele
14, 212, 305, 313, 513
Arms race scenario
320, 343
Attractor
chaotic
327
Autocorrelation
376
Barrier
20, 161, 459, 512
Barrier tree
163, 494
Basin
163
Basin of attraction
18, 249, 255
Benchmark
396
moving peaks
275, 406
Binary representation
246
Biological information
73, 531
Biomolecular information
73, 89
Biotic resources
349
Block model landscape
22
Catalytic activity
52
Cellular Automata
477
host-parasite model
323
Central dogma of molecular biology
531
Chain recurrent set
167
Chaos
327
Chaos control
428
CIlib framework
113
Circuit
196
Closed neighborhood
172
Clustering of local optima
257
Coarse graining
170
Codynamics
280
Coevolution
279, 302, 374
antagonistic
281
competitive
228, 281, 283
364
cooperative
281, 283, 364
mutualistic
281
Coextinction
324
Collective mean ﬁtness
400
Combinatorial ﬁtness landscape
235
Combinatorial vector ﬁeld
167
Community structure
242
Complex networks
235, 329
Conﬁguration
154
Conﬁguration space
13, 154, 246, 488
Continuous dynamic problem generator
410
Control
optimal
39
Control landscape
36
Convex set
50, 60
Correlation structure
375
Correlogram
376
Coupled ﬁtness landscape
279, 310, 374
Coupled map lattice (CML)
278, 435
Critical point
37
dynamic
38
kinematic
38
suboptimal
44
Crossover landscape
383
Cyclic behavior
353

550
Index
Deception
116
Deforming ﬁtness landscape
292, 346
latency
349
delay
349
momentum term
348
update rule
292, 347
Density matrix
36
Difﬁculty measure
134
Directed evolution
57, 62
Dispersion metric
120
Dissimilarity factor
403
Diversity
363
Drainage point
156
Dynamic environment
404
model
404
Dynamic ﬁtness landscape
18, 270, 346
deﬁnition
271
hierarchy
293
Dynamic optimization problem
269
Dynamics
267
coevolutionary
279, 334, 341
eco–evolutionary
341, 532
ecological
328, 345
environmental
18, 268, 404
evolutionary
59, 268, 302
345
red queen
317
Ecological changes
345
Efﬁciency
363
Empirical ﬁtness landscape
23, 201, 511,
538
Encoding
171
anti-continuous
172
complete
171
continuous
172
unbiased
171
Energy landscape
9
Enrichment
172
Epistasis
18, 24, 61, 178, 460
antagonistic
187
reciprocal sign
179
sign
179
synergistic
187
Escape probability
135
Euclidean distance
402
Evolution
directed
57, 62
natural
57, 60
Evolutionary changes
345
Evolutionary computation
370
Evolutionary path
7, 518
Evolutionary process
13
drift
19
hill climbing
16, 73, 157, 309, 346
valley crossing
18, 510
Evolutionary robotics
221
Evolvability
119, 138, 210, 348, 460, 520,
536
Exit points
158
Expected value
outcome
415
Facilitated variation
535
Feature extraction
115
Finite state machine (FSM)
143, 466
deﬁnition
143
First entropic measure
119
Fisher theorem of natural selection
87
Fitness convergence
57, 61
Fitness distance correlation
119, 460
Fitness evolvability portrait
210
Fitness function
12, 58, 136, 211, 269,
371, 396
ﬁtness function
115
Fitness graph
180
Fitness information
93
Fitness landscape
deﬁnition
12, 270, 371
trap-free
59
Fitness range
109
Fitness ranks
180
Fitness shapes
187
Fitness-probability cloud, fpc
134, 138
Flat surface
158
Flip
192
Fractal dimension
440
Free ﬁtness
84
Fujiyama ﬁtness landscape
16, 313
Funnel
120, 164, 165
digraph
165
partitioning
167
Gene interaction
188
Gene-for-gene model
320
Generalized dynamic benchmark generator
411
Genetic constraints
61
Genetic distance
210, 211

Index
551
Genotope
188
Genotype
59, 72
Genotype phenotype map
172
Genotypic space
12
Geometric theory of gene interaction
188
GKZ vector
196
Global minimum
156
Griewank function
111
Ground state
156
Hamiltonian
40
HelixPSO
491
Hermitian operator
42
Hessian
37, 44
Heuristic algorithm
398
Hill climbing
16, 73, 157, 245, 309, 346
Holey ﬁtness landscape
19, 510, 516
Horizontal changes
411
Horizontal gene transfer
531
Host-parasite CA model
323
Immediate effect
349
In vitro evolution
72
Information
biological
73
biomolecular
73, 89
ﬁtness
93
pragmatic
94
Landscape
population mean ﬁtness
7
adaptive
7
all arrows up
184
barrier
20, 497, 512
block model
22
combinatorial
154, 235
computational
20
control
36
deformable
292, 346
deforming
292, 346
detour
20
dynamic
270, 346
empirical
23, 201, 538
evolutionary robotics
221
fractal
428, 441
fuji
16, 313, 318
holey
19, 510, 516
house–of–cards
17
mapping
38
massif central
17, 235, 513
needle–in the–haystack
20
neutral
19, 117, 326
problem-induced
21
RNA
155
RNA virus
317
rough mt. fuji model
22
rugged
16, 57, 116
shared
282, 348
trap-free
16, 19, 39
TSP
155
tunable
23, 211
Landscape measures
8, 22
ﬁtness distance correlation
460
modality
513
ruggedness
164, 209, 375
379
Latency
291, 349
Latent effect
349
Level sets
160
Linear regression model
403
Local minimum
156
strict
156
Local optima
245
Locus
14, 188, 213, 313, 458, 513
Long path problem
20
Lyapunov exponents
329
Lyapunov function
74, 80, 95, 167
weak
168
Matching alleles model
320
Max-set of Gaussian landscape generator
409
Metaheuristics
104
Mobile genetic elements
531
Modern synthesis
530
Molecular library
55
Molecular property
53
Moving peaks benchmark
275, 406
Multi-objective optimization-based dynamic
test problems generator
409
Mutation landscape
380
Mutually accessible
159
Natural evolution
57, 60
Nearly neutral theory
210
Neighbor
gradient
156
neutral
156
Neighborhood relation
371
Neutral evolution
209

552
Index
Neutral ﬁtness landscape
19, 117, 326
Neutral network
19, 157
Neutral NK landscapes
213
Neutral theory
210
Neutrality
117, 210, 220, 460
NK landscape
8, 22, 76, 213, 243, 248,
286, 313, 372, 373, 513
NKC landscape
287, 315, 374
NKp landscape
22, 213
NKq landscape
213
No free lunch (NFL) theorem
21, 105,
482, 535
Non-degenerate
157
locally
157
Normalisation of ﬁtness
109
Normalization of the measured values
400
Nuclear magnetic resonance (NMR)
53
Observable
40
Ofﬂine error
400
Ofﬂine performance
399
Online performance
400
Optimal control
39
Optimization behavior
487
Optimization problem
combinatorial
488
discrete
488
Partial autocorrelation
376
Particle swarm optimization (PSO)
113,
487
Path
157
zig-zag
161
Performance metrics
107
Permutation
246
Permutation representation
246
Photonic reagents
40, 47
Plateau
157
Points
peak
161
valley
161
Polytope
188
Population dynamics
311
Pragmatic information
94
Predator-prey scenario
343
Probability distribution
35, 58, 59
Problem characterisation
115
Problem difﬁculties
209
Problem hardness
116
Protein engineering
57
Quadratic assignment problem (QAP)
244, 254
Quadric function
111
Quantum mechanics
35, 39
Rana function
111
Random graphs
236
Random walk
377
Rastrigin function
109, 111
Reachable
158
Reachable set
43
Red queen
chaotic attractor
327
dynamics
317
effect
290, 302, 317, 344
hypothesis
302, 344
lattice model
305
spatial
322
Redundancy
209
Reordering algorithm
63
Representation space
12, 371
Rest point
167
RNA folding problem
155, 488
Rosenbrock function
111, 121
Rosenzweig-MacArthur model
325
Rough Mt. Fuji (RMF) landscape
22
Rugged ﬁtness landscape
16, 116, 313
Ruggedness
8, 116, 119, 164, 209, 211,
379, 460
Saddle
37, 44, 161
direct
160
gradient
160
Saddle height
161
direct
161
gradient
160
Salomon function
111
Schwefel 2.26 function
109, 111
Search difﬁculty
253
Search space
12
Secondary polytope
197
Sequence space
12, 72
SetPSO
490
Shape
187, 190
Shared ﬁtness landscape
282, 348
Shelf
158
locally minimal
158
reachable
158
Shifting balance theory
18, 510

Index
553
Side effect machine (SEM)
466
Sign epistasis
18, 61, 179
Simple test case generator
408
Solution accuracy
110
Solution quality
110
Spatial red queen dynamics
322
Spherical function
111
Stasis
345, 361
Step function
111, 118
Strong selection/weak mutation (SSWM)
model
13, 178, 347, 517, 537
Success rate
112
Sufﬁcient ﬂexibility condition
59
Support vector machine (SVM)
145
Surjectivity
39, 49
Symmetry breaking
320, 533
Sympatric speciation
359
Synchronization
430
Lorenz - Lorenz
431
R¨ossler - Lorenz
432
Syringa
412
Thermodynamics
78
Time series analysis
375
Time-dependent Schr¨odinger equation
40
Topological analysis
494
Trait space
346
Transformation matrix
409
Transposable elements
531
Trap
16, 37
deﬁnition
42
Triangulation
190
User impatience characteristics
416
Valley
159
Vertical changes
411
Visualization
particle swarms
498
topology
496
Visualization tool
487
Walk
13, 157, 460
adaptive
77, 157, 179
gradient
157
hill-climbing
157
neutral
157
random
377
Window based accuracy
400
Wright’s shifting balance theory
18, 510
XOR generator
277

