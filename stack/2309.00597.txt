The QUATRO Application Suite: Quantum Computing for Models of
Human Cognition
Raghavendra Pradyumna Pothukuchi1, Leon Lufkin1†, Yu Jun Shen1†*, Alejandro Simon1†*,
Rome Thorstenson1†, Bernardo Eilert Trevisan1†*, Michael Tu1†, Mudi Yang1†*, Ben Foxman1‡,
Viswanatha Srinivas Pothukuchi2‡, Gunnar Epping4, Thi Ha Kyaw3, Bryant J Jongkees5,
Yongshan Ding1, Jerome R Busemeyer4, Jonathan D Cohen6, Abhishek Bhattacharjee1
1Yale University 2Independent 3LG Electronics Toronto AI Lab 4Indiana University 5Leiden University 6Princeton University
Abstract
Research progress in quantum computing has, thus far, fo-
cused on a narrow set of application domains. Expanding the
suite of quantum application domains is vital for the discovery
of new software toolchains and architectural abstractions. In
this work, we unlock a new class of applications ripe for quan-
tum computing research—computational cognitive modeling.
Cognitive models are critical to understanding and replicat-
ing human intelligence. Our work connects computational
cognitive models to quantum computer architectures for the
first time. We release QUATRO1, a collection of quantum com-
puting applications from cognitive models. The development
and execution of QUATRO shed light on gaps in the quantum
computing stack that need to be closed to ease programming
and drive performance. Among several contributions, we pro-
pose and study ideas pertaining to quantum cloud scheduling
(using data from gate- and annealing-based quantum comput-
ers), parallelization, and more. In the long run, we expect our
research to lay the groundwork for more versatile quantum
computer systems in the future.
1. Introduction
Quantum computers are evolving from early experimental
prototypes to more mature cloud platforms [1,2,3,4,5], but
their success now hinges on expanding their utility to more
application domains. Unfortunately, most deployed quantum
computing applications have thus far focused on select do-
mains like physics, chemistry, finance, and recently, machine
learning [6]. This presents a chicken-and-egg problem. More
general-purpose computing stacks would expand the benefits
of quantum computing to more application domains. But, the
paucity of new application domains has over-specialized quan-
tum computing software to just a few application domains.
New application domains are needed to shed light on more
general-purpose quantum computing stacks of the future.
†Equal contribution. Listed in alphabetical order of last name.
‡Equal contribution. Listed in alphabetical order of last name.
*Worked as Yale University undergraduate.
1QUATRO stands for quantum applications from cognitive modeling, and
also means four, which is the number of cognitive model types we study.
In this work, we take a step towards breaking this vicious cy-
cle of over-specialization by presenting computational cogni-
tive modeling as a new target application domain for quantum
computing. Cognitive models explain how humans process
information and make decisions, and have been foundational
to psychology, psychiatry, artificial intelligence (AI), machine
learning (ML), and even economics [7,8,9]. These models are
now adequately computationally demanding and attracting the
attention of computer systems practitioners [10], making them
a natural candidate for quantum computing research. Models
used for relational reasoning [11] and planning [12] rely on
simultaneous constraint satisfaction kernels, which are known
to be slow and scale poorly with model complexity.
Recently, cognitive scientists have also shown the prospect
of using quantum probability theory to develop a unified and
formal decision-making framework that explains human be-
havior difficult to be captured by existing classical alternatives,
like biases, effects of question framing and order etc. [8,13,14].
Rigorous psychological studies with humans have shown evi-
dence supporting the expressive power of quantum-theoretic
frameworks and their improved modeling accuracy over exist-
ing methods [8,13,14,15,16,17,18,19]. However, realizing
the full potential of these methods requires developing and
mapping larger models onto real quantum machines [8], a
hitherto unexplored study.
Ours is the first work to map cognitive models to quantum
hardware, offering a path to scale and augment them, and
enable more human-like AI. We transcend prior work [20],
which focuses only on small kernels or circuit components, to
develop QUATRO, a suite of full, computationally hard classi-
cal and quantum-theoretic models, mapped to real quantum
hardware.
Ours is also the first work to showcase algorithmic advances
to realize constructs necessitated by cognitive models. Exam-
ples include constructs like subspace projections for quantum
walks, implemented with new low-cost state-detection circuits.
Although mapping cognitive models to quantum hardware
drives the discovery of these constructs, they are broadly ap-
plicable including, e.g., quantum program assertions [21,22].
Finally, by developing bridges between the cognitive sci-
1
arXiv:2309.00597v2  [cs.CE]  8 Dec 2023

ences and quantum computing, we lay the foundations for
new research in quantum computing software toolchains, pro-
gramming languages, compiler support, control interfaces,
reorganization of the quantum cloud, and more. These re-
search questions go beyond the hardware-centric focus of
existing work (e.g., error mitigation [23, 24, 25], reliabil-
ity [26,27,28,29,30,31], circuit synthesis [32,33], and microar-
chitecture [34]). To undergird our results, we evaluate new
parallelism-aware cloud scheduling approaches on real quan-
tum systems. Our approach offers performance speedups via
parallelization and improved system throughput, representing
new axes for performance scaling in quantum clouds. Like our
newly discovered algorithmic constructs, these optimizations
are broadly useful beyond cognitive modeling.
In summary, our specific research contributions are:
1. We introduce QUATRO, end-to-end cognitive models as a
new application domain for quantum computing. QUATRO
is suitable for current and future quantum hardware.
2. We discover new circuit-level constructs on subspace pro-
jections, techniques that benefit domains beyond cognitive
modeling, with a fraction of resources over prior work.
3. We identify shortcomings and opportunities for research in-
novation in the programming stack for quantum computers.
Unlike all prior work, ours transcends low-level hardware
and addresses higher-level aspects of the quantum stack.
4. We propose and analyze new quantum cloud organization
using data from real quantum computers, showing 2.4×–
10× speedup for co-designed applications.
Overall, our work expands quantum computing into a new
high-impact application domain and sets the stage for building
versatile quantum systems that are easier and faster to use.
2. Motivation
Virtuous cycles among application domains, algorithms, and
computer systems have been central to the decades-long suc-
cess of computing. Consider, e.g., the advances in GPU and
tensor hardware that have unlocked increasingly complex deep
neural networks in the last decade [35]. Unfortunately, quan-
tum computing has yet to experience such rapid growth in
application-systems co-design. Quantum applications are con-
centrated in physics [36], chemistry [37], finance [38, 39],
machine learning [40], and optimization [41]. New appli-
cations are needed to ensure that the potential of quantum
computing is more broadly harnessed by society [6,42].
We bridge the cognitive sciences with quantum computing
as a step in enabling new families of quantum applications.
Computational cognitive models describe how humans gen-
erate decisions and behavior [43,44,45]. Such insights have
enabled breakthroughs in AI [7], ML [46,47], and behavioral
economics that resulted in multiple Nobel prizes (Simon in
1978; Kahneman in 2002). Cognitive models are being studied
today with the anticipation of identifying theoretical mecha-
nisms to explain complex human behavior, and unlock AI that
is not captured by modern deep learning [48,49].
State-of-the-art cognitive models are computationally chal-
lenging, and are a natural target for quantum computing re-
search. Models addressing fundamental human capabilities
like relational reasoning and problem-solving involve simul-
taneous constraint satisfaction, and are realized with graph
isomorphism techniques [11], combinatorial optimization and
planning [12], which are proven to be hard to scale classically.
Furthermore, there is a new class of cognitive models
that employs quantum probability as a theoretical tool to de-
scribe human decision-making. These models leverage the
richer axioms of quantum probability such as projections, non-
commutativity, and superposition, to describe complex behav-
ior that has resisted explanation from all existing classical
alternatives and/or identify parsimonious models with expo-
nentially fewer parameters [8,15]. Below are two illustrative
results.
As an example of the expressiveness of quantum cognitive
models, consider a two-stage task where individuals choose to
play or quit a gamble before each stage [50]. When the out-
come of the first stage was known—regardless of whether it is
a win or a loss, real-world data showed individuals generally
preferred to play the gamble in the second stage. However,
when the outcome was unknown, most individuals switched
and prefer to quit, which violates the classic law of total prob-
ability, and so existing models cannot explain such “irrational”
behavior.
Alternatively, a quantum cognitive model representing
decision-making as a superposition over possible outcomes,
predicts different results because of quantum interference ef-
fects that can generate classical violations of total probabil-
ity [15].
Quantum cognition models also provide lower dimensional
representations of cognition and thus greater parsimony com-
pared to classical models. Consider a strategic game involving
n players, each choosing one of K possible actions [18]. Clas-
sically representing an individual’s beliefs about the actions
of all players requires Kn joint probabilities, representing an
exponential growth in model dimension. Instead, the same
could be modeled with quantum probability using a single
K-dimensional vector space, evaluated with n different bases
representing the player’s different view points of the game.
While there could be a future classical formalism that can
match quantum cognition in expressiveness, model concise-
ness, and accuracy, quantum cognition provides some of the
best empirically-validated tools today to explain complex be-
havior [8,13,14,15,16,17,18,19,51,52,53,54]. With commer-
cial quantum computers being available, the timing is ideal to
explore the use of quantum computers for large-scale modeling
of human-level cognition.
Recently, a compilation framework, Distill [10], has been
proposed to accelerate classical cognitive models on classical
systems like multicore CPUs and GPUs. However, there is
value in exploring how computationally hard cognitive mod-
els, including quantum cognitive models, can be mapped to
2

quantum computers, which we discuss next.
2.1. Why QUATRO Applications?
Our cognitive models are full-scale applications that introduce
richer and newer constructs not found in architecture bench-
marking kernels like SuperMarq [55]. Such constructs include
Hamiltonian-based walks, absorbing boundaries requiring pro-
jections, walks on analog quantum machines, multi-eigenstate
problems, non-unitary eigensolvers, and nonlinear dynamics.
These constructs are useful beyond cognitive models, e.g., in
condensed matter physics [56], or dynamics of electron sys-
tems [57], but have received scant attention from architects.
Historically, end-to-end applications enabled computer ar-
chitects to discover innovation missed by simple benchmarks.
For example, by offering computer architects insight into dat-
acenter applications, CloudSuite [58] unearthed shortcom-
ings of CPU microarchitecture missed by simpler benchmark-
ing suites like SPEC (e.g., inefficiencies in instruction fetch).
Analogously, mapping the QUATRO applications and execut-
ing them, as we will present in Sections 4 and 6, exposed many
limitations of the quantum computing stack today inspiring
new research. We had to innovate new state-detection circuits,
nonlinear dynamics solvers, and multi-stage translators to map
these applications, and discovered architecture-algorithm co-
design opportunities like data-parallel RBM training, and par-
allel eigenstate computation to tap new axes of speedup. These
are broadly applicable and advance quantum architecture.
Finally, QUATRO presents current cognitive models, fac-
tored for implementation on quantum platforms; enabling
these to run on quantum computers promises substantial
progress in scaling them to address more complex tasks than
currently possible. It could help identify how a quantum
formulation could provide a more accurate and/or coherent ac-
count of human cognition, such as the stochasticity of decision-
making, and the effects of cognitive arousal, than has been
achieved classically [14,18]. It could also help answer how
the brain solves seemingly computationally hard tasks, and
whether mental events obey the same probability rules as phys-
ical events [18].
3. Relevant Quantum Techniques
In this section, we briefly review important quantum comput-
ing concepts relevant to the development of QUATRO. More
details can be be found in standard texts (e.g., [63,64]).
We use the Dirac (bra-ket) notation [64] (¯h = 1), where
|x⟩denotes a column vector x used to represent states, ⟨x|
is a row vector, and block letters (e.g., H) are operators. A
quantum system is described by its Hamiltonian, H. If the
system’s initial state is |ψinit⟩, then its state after time t is,
|ψnew⟩= U |ψinit⟩, where U = e−iHt is the evolution operator.
Quantum walks: Quantum walks, which describe the evolu-
tion of a particle over some states [65,66], are used in cognitive
models for decision-making [52, 53]. They capture how in-
dividuals process inputs (stimuli) to navigate their internal
preferences (states) under uncertainty to make decisions.
Quantum walks are typically implemented on gate-based
computers (also called digital quantum computers) by compil-
ing U into gates [32,67] and initializing the system to |ψinit⟩.
The term U is usually directly specified. Many specifications
are possible, with coin-walks on graphs [66] being a common
approach. Cognitive models require, however, a different ap-
proach, with walks specified by H [52,53], and their execution
on gate-based systems requires exponentiation to derive U.
Variational algorithms: Using classical and quantum com-
putation for optimization, variational algorithms are important
near-term constructs to find the eigenstates of cognitive mod-
els.
Variational quantum eigensolvers (VQEs) [68,69] and the
Quantum Approximate Optimziation Algorithm (QAOA) [70]
are two important variational algorithms that minimize cost
functions, thereby finding the lowest eigenstate (or ground
state). Cost functions can be the expectation of the Hamilto-
nian or custom-defined.
SSVQE (Subspace VQE) is a recently proposed technique
to identify eigenstates higher than the ground state [71]. These
higher states are required by quantum cognitive models [13,
14], unlike most other applications that only need the ground
state.
Similar to VQE, SSVQE uses a parameterized quantum
circuit (or ansatz) to generate candidate solutions for the op-
timization. Then, a classical optimizer evaluates the cost
function for these states, and changes the circuit parameters to
explore better states. However, SSVQE differs from VQE in
computing the cost function since it must find excited states.
We use two relevant SSVQE variants [71]. One approach
(SSVQE B) finds one excited state at a time, e.g., the kth
state using a weighted cost function. At each iteration, the
algorithm inputs k + 1 orthogonal vectors, {|ψj⟩}k
j=0, into
the ansatz (e.g., k + 1 vectors whose elements are all zeros
except for a 1 in a different position each), and obtains states
{|φj⟩}k
j=0, and their energy expectations ⟨φ j|H |φj⟩. Then, a
classical optimizer minimizes the cost function with weight w,
w⟨φk|H |φk⟩+∑k−1
j=0 ⟨φj|H |φj⟩, to obtain the kth eigenstate.
The other method (SSVQE C) also uses a weighted cost
function but finds all eigenstates up to the kth state simulta-
neously. The cost function is ∑k
j=0 w j ⟨φj|H |φ j⟩, where the
weights w j decrease in value i.e., w j < wj−1. As we will show,
the two methods have different implementation tradeoffs.
Quantum imaginary time evolution (QITE): Finding eigen-
values of cognitive models with variational algorithms requires
identifying a good ansatz and optimizer configuration. Un-
fortunately, this is hard [72]. Therefore, we also consider an
alternative approach, QITE, to obtain eigenvalues [73].
QITE works by evolving a quantum state with the time pa-
rameter as t = −iτ. Then, the state is given by e−Hτ |ψinit⟩,
which represents state decay. If τ is long, all higher energy
3

Table 1: The QUATRO applications: Selecting cognitive models for quantum implementation.
Model
Type
Purpose
Significance
Quantum methods we apply
Relevance for systems
Quantum Walk [59,60]
Quantum-
theoretic
Decision-making
(2-choice)
Accuracy, size, and flexibility ad-
vantage over classical walks
Quantum
walk
simulation
(gate-based, annealing)
Presents Hamiltonian based walks,
and with absorbing boundaries
Multi-Particle
Multi-
Well (MPMW) [13,14]
Quantum-
theoretic
Decision-making
(multi-choice)
Accuracy, size and flexibility ad-
vantage. First unified model over
many cognitive parameters
Eigensolution:
SSVQE, and
QITE (both gate-based)
Studies multi-eigenstate problem,
non-unitary algorithms
Predator-Prey [61]
Classical,
hard
Cognitive control
Captures attention, cognitive re-
source utilization and planning
Restricted Boltzmann Machine
(RBM; annealing)
Introduces computationally hard si-
multaneous constraint satisfaction,
and brain-inspired neural networks
Leaky Competing Accu-
mulator (LCA) [44,62]
Classical,
hard
Decision-making
and control
Biologically plausible model
Nonlinear dynamics (anneal-
ing)
Introduces simultaneous constraint
satisfaction with nonlinear dynamics
Y
...
...
|0…0〉 |0…1⟩ 
N
|1…0⟩ |1…1⟩ 
H=
⎣
⎢
⎢
⎢
⎢
⎢
⎢
⎡μ0…0
σ
σ
μ0…1
σ
⋱
⋱ 
⋱
σ
μ1…0
σ
σ
μ1…1⎦
⎥
⎥
⎥
⎥
⎥
⎥
⎤
(a) Quantum walk on a 1-dimensional
lattice for two alternatives. The walk
is described by Hamiltonian, H.
V=0 
V=∞ 
L
V=∞ 
e0, หϕ0ൿ 
e1, หϕ1ൿ 
e2, หϕ2ൿ 
(b) MPMW for one infinitely tall, fi-
nite width well. Its lowest three
eigenvectors are shown.
Predator
Prey
Agent
(c) Predator-Prey
screen
grid to model cognitive
control/attention.
+
x2
i2
+
x1
i1
f1( )
f2( )
1-λ 
-β 
(d) LCA
for
two
inputs.
f1(.), f2(.) are nonlinear
functions.
Figure 1: Cognitive model prototypes for which we develop quantum implementations.
components vanish, and the system decays into the ground-
state. To obtain excited states, we use the Quantum Lanczos
method that uses several QITE states with different τ val-
ues [73].
QITE belongs to the class of non-unitary algorithms that can
provide quantum speedup, but require additional steps to run
on quantum computers because the hardware is unitary [74,
75,76]. Such methods have not been studied in prior systems
research.
Quantum annealing: Cognitive models using simultaneous
constraint satisfaction [44, 77] and quantum walks can be
cast as optimization problems solved by quantum annealing.
In quantum annealing [78], the system begins in the ground
state of a simple Hamiltonian, which is slowly changed to the
Hamiltonian whose minimum is to be found. If the rate of
change is slow enough, the system ends up in the ground state
of the target Hamiltonian, giving the solution we seek [78,79,
80,81,82,83].
Quantum annealers represent analog quantum computers,
which are programmed directly with the Hamiltonian [3,78,
84, 85] unlike digital versions. This makes them attractive
for cognitive models, which are commonly specified with
the Hamiltonian, but such systems haven’t received adequate
attention in quantum computer architecture research.
Present quantum annealers take as input Ising Hamiltonians,
which are of the form H = ∑i,j ai jσziσ j
z +∑i biσi
z, where σi
z
is the Pauli Z spin operator [78] whose values can be +1 or
-1, and aij, bi are scalars and i, j refer to the qubits. General
Hamiltonians, including those in cognitive models, addition-
ally contain Pauli X (σx), Pauli Y (σy) operators. Annealing
such Hamiltonians requires manual reformulation to map the
applications to the hardware [86].
4. QUATRO: Quantum Cognitive Applications
We identify important cognitive models that can benefit from
quantum execution, and which also introduce new constructs
that have not been studied in quantum systems research. Ta-
ble 1 lists these models, the probability theory they use, sig-
nificance to cognitive science, the techniques we use to map
them to quantum hardware, and the new features they present
for systems research. We present our implementations next.
4.1. Quantum Walk
Quantum Walk captures 2-choice decision-making (e.g.,
yes/no tasks) using the biased random walk of a particle on a
1-dimensional lattice of states [59,60], as shown in Figure 1a.
The states represent an individual’s preference levels for the
choices, and the model is given by the Hamiltonian H. This
model is flexible to describe many aspects of decision-making
such as uncertainty, perspective; has better accuracy; and is
more compact than classical walks [15,52].
There are two variants of Quantum Walk [53], one where
the walk evolves over all states including the boundary states
for a fixed number of steps (called reflecting boundaries), and
another where the walk evolves only until it doesn’t reach a
boundary (called absorbing boundaries). The former repre-
4

sents decision-making responses to a prompt, and the latter
captures the first time an individual arrives at a decision.
Reflecting boundaries (gate-based): The probability of a
decision state (e.g., |d⟩= |0...0⟩) after N timesteps is given
by ||MUN |ψinit⟩||2
2, where M = |d⟩⟨d| is the measurement op-
erator [53]. Realizing this walk on a digital quantum computer
is straightforward, using the circuit construction in Figure 2a
for an example 3-qubit (8-state lattice) model.
|0⟩ 
N
U
H
H
H
U
… 
|0⟩ 
|0⟩ 
(a) Reflecting.
N–1
H
H
H
U
… 
|0⟩ 
|0⟩ 
|0⟩ 
|0⟩ 
|1⟩⟨1| 
U
|0⟩ 
… 
U
(b) Absorbing.
Figure 2: Realizing an 8-state Quantum Walk on gate-based systems.
H is the Hadamard gate.
Absorbing boundaries (gate-based): This walk evolves only
in the non-boundary states, and requires projection after each
timestep to contain its evolution. Thus, the probability for a
decision after N timesteps is given by ||MU(PU)N−1 |ψinit⟩||2
2,
where P is the projector for the non-boundary states.
Realizing this walk on existing hardware is difficult because
the hardware doesn’t support partial projections. The only ap-
proach is post-selection, i.e., running the system many times
and discarding the trials where the system was found in the
boundaries. This requires a non-disruptive, runtime mecha-
nism to identify when the system touches the boundaries.
Unfortunately, prior state-detection/checking circuits [21,
22,87] are ill-suited for our purpose. We cannot use projection-
based methods [87] since they change the state. Among alter-
natives, one approach [21] detects only certain states, such as
those with an even number of ones. In our case, a boundary
state can have any number of ones. The other, swap-based
assertions [22], can check for approximate state membership
but doubles the number of qubits to swap and restore the state.
To overcome these problems, we developed a new circuit
to detect the boundary states with only one ancilla qubit. Fig-
ure 2b shows the circuit with our proposed state detector for
an example 8-state walk. The ancilla qubit is shown at the bot-
tom. For any input state ∑7
i=0 ai |i⟩⊗|0⟩, the detector’s output
is (a0 |0⟩+a7 |7⟩)⊗|0⟩+(∑6
i=1 ai |i⟩)⊗|1⟩i.e., the ancilla is
in |1⟩if and only if the main qubits are not in the boundary
states. Therefore, post-selecting on this condition is sufficient
to measure the correct probabilities. The detector is easily
extended to larger systems and other states by varying the
CNOT and Toffoli gates. This is the first generic absorbing
boundary walk design on existing quantum computers.
Annealing walk:
Digital quantum computers are pro-
grammed with U, which requires exponentiating the H given
by the cognitive model. To avoid this expensive step, we
study Quantum Walk on analog computers like quantum an-
nealers [3]. Unfortunately, existing annealers accept only
Ising Hamiltonians [3], which have diagonal elements and can
be decomposed into pairwise Pauli-Z terms (σz). The Quan-
tum Walk Hamiltonian is not diagonal, resulting in additional
Pauli-X (σx) and Pauli-Y (σy) terms, and can have more than
two Pauli operator interactions. Therefore, we need a new
approach.
We build on prior work [86] that mapped molecular Hamil-
tonians to annealers, to map our Quantum Walk model. The
multi-stage translation we use is shown in Figure 3. We begin
by decomposing the N-qubit Quantum Walk Hamiltonian into
a sum of Pauli interactions. Next, we create a larger rN-qubit
system and map these interactions to the larger system using
new operators (e.g., X) that only use Pauli-Z operations. Fi-
nally, we convert the Pauli-Z operations in the new system to
binary variables, and quadratize them i.e., expand the Hamil-
tonian such that each term has at most two variables [88]. The
result, HB, can be annealed with existing machines, and the
original ground state can be recovered from the annealer’s
output. Increasing the value of r results in more accurate
estimates.
H=σx
1σx
2 
       + σz
1 
       + ⋯ 
 H෡= ෍X1
j,kX2
j,k + Z1
j,kI2
j,k
r
j,k=1
+⋯
Transform
 HB=αb1b2 
         +βb2b3
          +⋯ 
Quadratize
N-qubit
rN-qubit
M-qubit
Figure 3: Realizing Quantum Walk on annealing systems.
Even though the annealing version of Quantum Walk only
gives the ground state instead of full dynamics, it is still useful
for cognitive scientists. Mapping this model also highlights
the challenges in using Hamiltonian-based systems today.
4.2. Multi-Particle Multi-Well (MPMW)
The MPMW is a quantum cognitive model for multi-choice
decision-making [13,14]. It uses a 1-dimensional landscape
of potential wells, one for each choice. The well’s param-
eters like its height, width, and separation from neighbors,
correspond to the cognitive parameters of attention, internal
representation and concept similarity, respectively. Figure 1b
shows the simplest MPMW model with one infinite height
well [14]. The model uses particles with different energies,
representing an individual’s cognitive arousal, to describe how
individuals integrate information. Each particle enters the
landscape serially and its final position is measured. When
a particle falls within a well, the information towards that
choice is incremented by one bit. This process repeats until a
definitive choice is made.
The MPMW is the first formal, unified model to integrate
several cognitive parameters, and outperforms classical al-
ternatives in accuracy, model conciseness, and expressive-
ness [14].
In MPMW, the particle’s position is determined by the eigen-
states of the landscape’s Hamiltonian, and finding them is the
key computational step. We begin by deriving the Hamiltonian
from the Schrödinger equation of the particle in the landscape.
5

In this equation, we discretize the position dimension, and use
the finite difference method for the derivative to obtain the
Hamiltonian operators, whose eigenstates we then find.
We identify two approaches for eigensolving: SSVQE [71],
which is variational, and QITE/Quantum Lanczos [73], which
is not. We select these methods because they demand different
design and execution support on quantum hardware.
SSVQE: We select two variants, SSVQE B and SSVQE C
(Section 3) that present different algorithmic-implementation
tradeoffs. SSVQE B runs a simpler optimization to find one
eigenstate, but must be run multiple times to find multiple
eigenstates. Instead, SSVQE C runs a single but complex
optimization to find all eigenstates. While SSVQE C is more
algorithmically efficient, SSVQE B is embarrassingly parallel
and each instance is faster than SSVQE C. This presents a new
opportunity for speedup that could be tapped with an efficient
system architecture. This axis of parallelism is also comple-
mentary to existing methods that parallelize the expectation
calculation of Pauli operators within a variational step [89,90],
or those that parallelize runs for averaging [91].
QITE/Quantum Lanczos:
Variational algorithms like
SSVQE require selecting a suitable ansatz and optimizer,
which is generally difficult [72]. Hence, we pick an alternative
non-variational algorithm, QITE [73], for eigensolving. QITE
is in the class of non-unitary quantum algorithms [75,76,92],
which haven’t been studied in systems design. Being non-
unitary, QITE is unsupported natively on quantum computers,
which are unitary. Therefore, we follow prior work [73] to de-
termine unitary operators that result in the same state evolution
as with QITE. At each timestep, these operators are obtained
by solving a linear system of equations with Pauli-operator
expectations, which in turn, are measured from a quantum
computer.
To find the excited states, we use the Quantum Lanczos
algorithm base on QITE [73]. This approach obtains different
state vectors evolved with QITE to construct a vector subspace.
Then, it runs a classical Lanczos iteration on this subspace to
orthogonalize the states into excited eigenstates.
4.3. Predator-Prey
Predator-Prey is used to model cognitive control [61], which
governs other mental processes including decision-making.
The model describes a player playing a game shown in Fig-
ure 1c. The game has a screen grid with three entities: an
agent, which is the player’s screen icon, a prey, and a predator.
The player must move the agent to capture the prey and avoid
being caught by the predator. The model captures how the
player allocates attention to the screen icons to discern their
position and uses those perceived positions to make a move.
Identifying the optimal attention levels allocable to each
icon, and deciding movement is a simultaneous constraint
satisfaction problem. We model it with a quantum restricted
Boltzmann machine (RBM) that we propose [77], shown in
Figure 4. We choose an RBM because it aligns with the
simultaneous interactions found in the brain, and also for
its deep connection with cognitive modeling [93, 94]. Our
RBM has a visible layer with nodes for the true position of
the on-screen entities, attention, perceived positions, and the
movement direction.
Position Attention
Direction
Hidden
Perception
… 
… 
… 
… 
… 
Figure 4: Quantum RBM network for Predator-Prey.
We map our RBM to a quantum annealer since it is a good
fit for the RBM’s Ising interactions. The standard approach to
run the RBM uses 2 anneals for inference (visible to hidden,
and back) and 3 for training (+1 to update hidden nodes). We
additionally propose two new methods that benefit from dif-
ferent system architectures. One approach (RBMeff) leverages
compute-parallelism by combining updates to both hidden
and visible layers. This method is resource efficient, requir-
ing only 1 anneal for inference and 2 for training, but has
more complexity. Another approach (RBMparK) leverages
data-parallelism where we anneal for K different samples si-
multaneously. This is inspired by asynchronous ML training
algorithms [95], where the network weights are updated once
after K samples, instead of K sequential updates.
4.4. Leaky Competing Accumulator (LCA)
The LCA is a biologically inspired model for multi-choice
decision-making and cognitive control [44, 62]. Figure 1d
shows the LCA for two choices. Each choice has an accu-
mulator x(t), which integrates the values of the input i(t)
corresponding to that choice at timestep t.
The accumu-
lator loses or leaks its value (by a factor λ), and is inhib-
ited by the output of the other choice (by a factor β), i.e.,
x1(t) = i1(t)+(1−λ)·x1(t −1)−β f2(t), where f() is a non-
linear function such as a sigmoid that acts on the accumulator’s
output.
We select the LCA because it is widely used, and its mathe-
matical behavior has been well-characterized [62]. Moreover,
the LCA is a simultaneous constraint satisfaction model like
Ising models, with the additional complexity of stateful dy-
namics or memory—occurring due to the accumulator, and
nonlinearity—due to the activation function. These aspects
have been crucial in its utility as a model, but they also create
challenges in running it on existing machines.
We map the LCA to quantum annealers since they can solve
Ising problems. We first linearize f() into the format ax+b
using its Taylor expansion. Next, to obtain the value of f()
for a given value of x, we use the annealing cost function,
(fx −(ax+b))2, following prior work that used annealing for
prime factorization [96]. Minimizing this cost function would
yield fx to be ≈f(x). Then, we replace x with its previous
value (x(t −1)), and the input. This gives a cost function with
6

fx, x(t −1), and the inputs i(t). Next, we expand each vari-
able with multiple qubits to represent floating point numbers.
Finally, we quadratize the cost function before annealing.
We explored different alternatives to run the LCA over mul-
tiple timesteps. One approach is to anneal for a single timestep
at once, where the outputs from the previous timestep are used
as inputs for the next anneal. Since existing annealers do not
offer easy variable initialization, we use additional terms in
our cost function to realize it. This method has the overhead
of reading and re-initializing qubits at each step.
Another approach is to unroll the LCA dynamics for K steps,
so that one anneal would return the output for all K steps. This
amortizes the reading/initialization overheads but results in a
much larger Hamiltonian than what is reliably run on current
systems. The last approach uses the technique of Feynman’s
clock, where a new problem is formulated that includes a
timestep register along with the LCA variables [97]. This
method introduces complex variables that are unsupported
presently. As a balance, we anneal for K steps at once.
5. Experimental Setup
Platforms: We choose publicly available hardware platforms
with mature software to evalaute QUATRO. For our gate-based
applications, we use IBM systems (IBM Perth/Quito, which
have 5 superconducting transmon qubits), and for annealing,
we use D-Wave’s Advantage_system4.1 solver, which has
5, 627 qubits connected in a Pegasus graph [98].
Cognitive model parameters: QUATRO can scale to the large
sizes we target, but existing hardware cannot fit them. There-
fore, we run smaller versions. Table 2 shows the minimum
model sizes we’d like to evaluate, the actual sizes that we
could fit on hardware, and the implementation parameters.
Table 2: Model and implementation parameters.
Model parameters
Model
Ideal
mini-
mum
Actual
Implementation parameters
Quantum
Walk
100 states, 1000
walks
8 states, 1 walk
Gates. Qubits: 3 (ref), 4 (abs)
4 states, 1 walk
Annealing (r:2–9, 60% pausing)
MPMW
10 dynamic wells,
1000
positions,
10 eigenstates
1 static well, 4 po-
sitions, 3 eigen-
states
SSVQE (COBYLA/SPSA)
QITE (step size = 0.2, steps =
135)
Predator-
Prey
1000×1000
grid, 100 lev-
els, 10 icons
6×6 grid, 12
levels, 3 icons
RBM (112 node; data: 100 train,
100 test), 60% pausing
LCA
10 units, multi-
layer
2 units, 1 layer
5-step unroll, 6-bit floats, 60%
pausing
A large Quantum Walk uses >100 states, and multiple walks
to model interacting decisions. The smaller version we eval-
uate uses a single walk with 8 states for gate systems and 4
states for annealing. Annealing has fewer states since the ac-
tual number of qubits needed is much higher (≥rN; Section 4).
We pause anneals [99] to mitigate thermalization and noisy
outputs.
MPMW scales to multiple wells and well-sizes, several
eigenstates, and fine spatial resolution in the horizontal dimen-
sion. On actual hardware, we find 3 eigenstates for the simplest
MPMW model, which has one infinite-height well. In finding
eigenvalues with SSVQE, we use the SPSA optimizer [67] in
simulations as it is more accurate, but use COBYLA [67] on
actual hardware since it requires fewer executions.
Predator-Prey could scale to large screen grids, many at-
tention levels, and icons. For the smaller version we run, our
RBM has 56 visible and 56 hidden nodes. The nodes take
binary values, but their biases and the weights for the edges
can have real values. Since we do not need the perceived
positions explicitly, we use a single set of nodes for the true
and perceived positions, encoded with one-hot vectors.
The RBM is trained with contrastive divergence [100]. We
obtain training data by identifying the best decision from
an exhaustive search without lookahead. We train on 100
randomly chosen screens over 30 epochs, and use another
100 as test. While this data may seem small, evaluating it
consumed hours of anneals and thousands of dollars. We use
one-hot encoding to represent the screen grid coordinates, and
allow the agent to move one step in any of the 8 cardinal and
ordinal directions.
A large LCA model would have multiple layers, each with
several LCA units to model cognitive control and decision-
making. In our experiments, we use a single layer with 2 units.
We use 6 qubits to represent float values. Since the LCA has
multiple outputs over multiple timesteps, we quantify accuracy
using the mean local relative error, which is the average error
of a method f relative to exact LCA (f), when they run on the
same inputs i and previous values (x−1) from the method. It is
given by, avg(| f(i,x−1)−f(i,x−1)
f(i,x−1)
|).
6. Evaluation
6.1. Quantum Walk
Gate-based implementation: Figures 5 and 6 show the prob-
abilities of the states at various timesteps in the reflecting
boundary Quantum Walk using statevector simulations, and as
measured from quantum hardware (IBM Perth), respectively.
The simulations align closely with our analytical calculations,
but the results from quantum hardware deviate significantly,
especially from timestep 2. The absorbing boundaries walk,
shown in Figures 10 (simulations) and 11 (measured) is worse
affected. Much of the distribution is lost even by timestep 2.
The cause of poor hardware performance is noise from run-
ning large circuits. Figure 7 shows the gate count, depth, and
execution time of the walks. While these models use only 3 or
4 qubits, the gate depths are in the hundreds, resulting in large
noise. We also simulate the absorbing boundary walk with
1- and 2-qubit gate depolarizing noise to study its sensitivity.
Figure 8 shows the results at timestep 4 for different noise
probabilities. There is noticeable distortion (vs Figure 10e) at
7

|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(a) Timestep 0.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(b) Timestep 1.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(c) Timestep 2.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(d) Timestep 3.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(e) Timestep 4.
Figure 5: Reflecting boundary Quantum Walk with statevector simulation.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(a) Timestep 0.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(b) Timestep 1.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(c) Timestep 2.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(d) Timestep 3.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(e) Timestep 4.
Figure 6: Reflecting boundary Quantum Walk on IBM Perth.
p=0.001, suggesting significant need for fault tolerance [101],
but near-accurate result for p=0.0001, indicating promise.
Noise mitigation is vital for Quantum Walk models, even
more than building qubit capacity.
0
1
2
3
4
Timestep
0
200
400
600
800
Gate count
Reflecting
Absorbing
(a) Gate count.
0
1
2
3
4
Timestep
0
200
400
600
Gate depth
Reflecting
Absorbing
(b) Circuit depth.
0
1
2
3
4
Timestep
0
10
20
30
40
Time (s)
Reflecting
Absorbing
(c) Execution time.
Figure 7: Gate count, depth, and performance of Quantum Walk.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(a) p = 0.01
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(b) p = 0.001
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(c) p = 0.0001
Figure 8: Timestep 4 of absorbing walk with depolarizing noise.
Annealing implementation: Figure 9 shows the results for
finding the ground state of a 4-state Quantum Walk using
annealing. We show the results for both simulated annealing
(SA) and quantum annealing with pausing (QA-P). Figure 9a
shows the absolute error of the measured eigenvalue (the exact
value is -7.22). We expect the error to decrease as the qubit
repetition (r) is increased, and we find this to be true for
SA. With QA-P, however, the error increases after an initial
decrease. This is because bigger r values result in more qubits
(Figure 9b) and complex interaction, worsening noise.
2
4
6
8
10
Number of groups (r)
0
1
2
3
4
Absolute error
SA
QA-P
(a) Accuracy.
2
4
6
8
10
Number of groups (r)
0
20
40
60
80
Number of qubits
(b) Size.
2
4
6
8
10
Number of groups (r)
0
10
20
30
Time (ms)
SA
QA-P
(c) Execution time.
Figure 9: Annealing for a 4-state Quantum Walk.
Figure 9c shows the execution time of SA and QA-P. SA’s
execution time grows linearly with r while QA-P is relatively
flat. Even though the error for QA-P is higher at large r, the
trend for small r (where its accuracy is comparable to SA)
suggests that QA’s execution time can scale better.
QA suffers from noise with large Quantum Walk models.
With small models, QA’s performance scales better over SA.
There’s also an accuracy-time tradeoff to explore in anneal-
ers.
6.2. MPMW
SSVQE: Identifying a suitable ansatz for SSVQE was nontriv-
ial. We simulated 24 choices from prior work [69,72,102] to
solve for MPMW’s ground state using standard VQE, and Fig-
ure 12 shows their performance. The best choice was (Ansatz
1), which is “Circuit 14” from [72] that uses RY and controlled
RX gates. We also used circuit search methods from quantum
ML [103], but they did not perform competitively.
For optimizers, we evaluated both SPSA and COBYLA in
8

|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(a) Timestep 0.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(b) Timestep 1.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(c) Timestep 2.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(d) Timestep 3.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(e) Timestep 4.
Figure 10: Absorbing boundary Quantum Walk with statevector simulation (Total probability <1 due to projection).
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(a) Timestep 0.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(b) Timestep 1.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(c) Timestep 2.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(d) Timestep 3.
|0 |1 |2 |3 |4 |5 |6 |7
0.0
0.1
0.2
0.3
0.4
0.5
Probability
(e) Timestep 4.
Figure 11: Absorbing boundary Quantum Walk on IBM Perth (Total probability <1 due to projection).
0
2
4
6
8
10
12
14
16
18
20
22
24
Ansatz Id
0
1
2
3
4
5
Eigenvalue
Figure 12: Ansatz selection with VQE (the exact value is shown).
our simulations, and found SPSA to be better. However, SPSA
required 2–10× more circuit evaluations, which we could not
run on real hardware in reasonable time for convergence. So,
we only used COBYLA for quantum hardware.
We run the SSVQE B and SSVQE C algorithms to find
the 0th, 1st and 2nd eigenstates of MPMW, with exact values
as 1.72, 6.21, and 11.78, respectively. Figure 13 shows the
progression of SSVQE B2, which only finds the 2nd eigenstate.
The measured value (10.1) has a steady state error (14%).
Other runs (SSVQE B0/B1/C) are similar.
0
10
20
30
40
50
Iteration
0
2
4
6
8
10
12
14
16
18
Eigenvalue
0
1
2
(a) Simulated.
0
10
20
30
40
50
Iteration
0
2
4
6
8
10
12
14
16
18
Eigenvalue
0
1
2
(b) Measured.
Figure 13: Simulated and measured SSVQE B2 for MPMW.
Figure 14 shows the execution time of SSVQE. SSVQE uses
many circuit evaluations to compute the Pauli expectations,
repeated for each eigenstate, causing long execution times.
The evaluations increase with the SPSA optimizer.
B0
B1
B2
C
0
2
4
6
8
10
12
14
Time (1000s)
(a) SPSA.
B0
B1
B2
C
0.0
0.2
0.4
0.6
0.8
1.0
1.2
1.4
Time (1000s)
(b) COBYLA.
B0
B1
B2
C
0
2
4
6
8
10
Time (1000s)
(c) COBYLA
(IBM
Quito).
Figure 14: Execution time of the SSVQE algorithm for MPMW
Figure 14 also shows that each SSVQE B instance takes
lesser time than SSVQE C, which finds all eigenvalues at once.
Thus, if these multiple instances could be run in parallel, the
time to solution will be faster. Unfortunately, existing quantum
clouds do not support such execution.
Little support for ansatz and optimizer selection.
There is embarassing parallelism to be exploited in SSVQE.
QITE/Quantum Lanczos:
Figure 15 shows their perfor-
mance for MPMW. Figure 15a shows convergence of the
ground state but also significant hardware noise. Figure 15b
shows the error in the calculated eigenvalues. The ground
state error is low and is better than what SSVQE achieved.
The excited states have a steady state error due to our uni-
tary approximation, but the error is only slightly worse than
with SSVQE. Importantly, however, QITE is much faster than
SSVQE, despite being nonunitary. It required just 164.8 s in
simulations (vs 12,000 s for SSVQE C with SPSA for compa-
rable accuracy). This is because it has fewer evaluations, and
doesn’t tune an ansatz. Moreover, QITE/Quantum Lanczos do
9

not require an ansatz and optimizer search, which is hard. Un-
fortunately, these methods haven’t received adequate attention
in systems.
Non-unitary methods are competitive or better than vari-
ational ones for near-term exploration, but lack systems
support.
(a) Convergence.
(b) Accuracy of eigenstates.
Figure 15: QITE and Quantum Lanczos for MPMW.
6.3. Predator-Prey
Figure 16 shows a few sequences of moves generated by
our RBM with the three different annealing strategies (RBM,
RBMeff, and RBMpar2), and the corresponding movements
from the predator and prey. At each step, we show the de-
viation of the RBM’s move from a no-lookahead exhaustive
search.
1
2
3
4
5
6
1
2
3
4
5
6
(a) Multiple
anneals
(RBM).
1
2
3
4
5
6
1
2
3
4
5
6
(b) Sample-efficient
anneal (RBMeff).
1
2
3
4
5
6
1
2
3
4
5
6
(c) Two-sample
parallel
anneal
(RBMpar2).
Figure 16: Predator-Prey screen with different RBM strategies.
Figure 17a shows the execution time of our RBM imple-
mentations. Compared to RBM, RBMeff takes nearly 100×
longer. This is because RBMeff packs 2 passes into one an-
neal resulting in significantly complex interactions, and thus,
noise. The number of physical qubits to realize this network
is 100× higher. On the other hand, RBMpar2 is ≈2× faster.
Even though it packs the processing of 2 samples into one
anneal, the two samples are processed independently and do
not complicate qubit interactions. Thus, it only needs 2× more
qubits.
Figure 17b shows the accuracy of the RBMs with simulated
(SA) and quantum annealing (QA). RBMeff has poor accuracy
due to its complex interactions, which is more pronounced
with noise-sensitive QA. On the other hand, RBMpar2 has
comparable accuracy to RBM. Note that in training, RBMpar2
RBM
RBMeffRBMpar2
101
102
103
104
105
Time (ms)
Train
Test
(a) Timing.
RBM
RBMeff RBMpar2
0
20
40
60
80
100
Accuracy (%)
QA
SA
(b) Accuracy.
Figure 17: Predator-Prey performance.
updates the weights after 2 data samples, deviating from the
standard algorithm that updates weights after each sample.
However, this doesn’t affect the RBM’s accuracy, similar to
what has been observed in some classical ML training algo-
rithms [95]. We, thus, find a new opportunity to accelerate
quantum RBMs. But, existing quantum clouds don’t sup-
port such parallel execution, and we had to emulate it with
0-strength qubit couplings.
There is data-parallelism to be exploited with quantum
RBMs.
6.4. LCA
Figure 18 shows the two outputs of LCA ( f1, and f2) for 10
timesteps, computed with different methods: SA, QA-P, and
QA-NP (QA without pausing). We find 5 timesteps in one
anneal, requiring 60 logical qubits and 252 physical qubits.
LCA with SA is close to the exact values, with a mean local
error (Section 5) of (0.58%, 0.49%) for the two LCA outputs.
Among the QA methods, QA-NP has larger deviations due to
noise, with an error of (5.75%, 7.54%). QA-P has a better fit
with an error of (5.18%, 5.82%). Note that our error metric
does not consider the conditioning of the problem i.e., for
ill-conditioned calculations, errors are amplified over time.
Figure 18: Quantum annealing for the LCA.
For execution time, SA took 84.26 ms for one anneal with
100 reads and 1000 sweeps. For the best fidelity, QA required
175 ms QPU (quantum processing unit) time for 3500 reads
with 50 µs anneals each. With simple noise mitigation (i.e.,
pausing) QA for the LCA model achieved comparable accu-
racy to SA. However, QA also needed 3.5× more reads, and
consequently, 2× longer time. Noise mitigation and device
reliability could bridge this gap in the near term.
Exiting annealers are noisy to run LCA, but mitigation can
offer superior performance in the near-term.
10

7. Case Study: Cloud Co-design
We demonstrate research that QUATRO inspires through the
design of efficient quantum clouds that support parallelism.
Existing quantum clouds do not leverage the parallelism
found in QUATRO, e.g., in eigensolvers, or RBMs. Further-
more, we persistently encountered long scheduling delays in
our evaluation. These occur due to an inefficient cloud. Fig-
ure 19a shows the scheduling on quantum clouds today [3,104].
Users place each job into device-specific queues, where they
stay without migration until execution. This inflexibility com-
bined with the ad hoc job execution heuristics [105] results in
load imbalance across devices, and long wait times for users.
Iterative jobs like SSVQE or QITE additionally suffer a long
network round trip between quantum and classical devices for
every iteration. The present design also fails to benefit from
parallelism because when jobs like SSVQE spawn multiple
parallel instances, they are all run serially on the same device.
QPU 1
QPU 2
Job 2
Job 1
Queues
(a) Existing.
QPU 1
QPU 2
Job 2
Job 1
CPU
Batch
Standalone
(b) Proposed.
Figure 19: Reorganizing quantum cloud scheduling.
We envision a new cloud that (i) separates user and device
scheduling, (ii) runs hybrid, and not just quantum jobs, and (iii)
allows autonomous hybrid job execution with cloudlets [106].
Figure 19b shows our design. We distinguish user-facing front-
end scheduling from back-end device-specific job selection.
Users submit jobs to the front-end without selecting a spe-
cific device. Instead, they are mapped to any available device
(considering preferences and priorities), reducing imbalance
and wait times. Next, to reduce long-latency network round
trips, we propose adding cloudlets [106] with classical com-
pute (CPUs/GPUs). Cloudlets are small, geographically close
servers, that have gained prominence in mobile network sys-
tems. Users submit both quantum and hybrid tasks onto this
system, where the hybrid jobs run autonomously on respective
devices.
Existing systems lack the features (i)-(iii) above. Ama-
zon [1] allows hybrid job scheduling, but users must select a
single device. The hybrid jobs cannot also create additional
instances for other devices, which is needed for dynamic par-
allelism.
Our envisioned cloud is more aligned with the needs
of the QUATRO applications.
It enables exploiting the
embarrassing parallelism that we find in eigensolvers and
RBMs, without any hardware change or synchronization,
complementing other forms of parallelism explored in prior
work [89,90,91,107].
Figure 20a shows the normalized speedup for MPMW that
can be obtained by executing the 3 instances of SSVQE B
in parallel, or one SSVQE C instance (algorithmic multitask-
ing/parallelism) vs serially running SSVQE B (current op-
tion), even without cloudlets. Parallel execution yields ≈2.4×
speedup with no design effort. When other forms of paral-
lelism are combined, the improvements would be multiplica-
tive.
Serial Algo ParExec Par
0.0
0.4
0.8
1.2
1.6
2.0
2.4
Speedup
(a) MPMW SSVQE.
1
2
5 10 20 25 33
# of layers (K)
101
102
103
Time (ms)
Train
Test
(b) Parallel Predator-
Prey (time).
0
5 10 15 20 25 30
# of layers (K)
0
20
40
60
80
100
Accuracy (%)
Train
Test
Tmixed
(c) Parallel Predator-
Prey (accuracy).
Figure 20: Impact of a parallelism-aware quantum cloud.
For the RBM in the Predator-Prey model, Figure 20b shows
the training and testing times, and Figure 20c shows the accu-
racy when processing varying number of samples in parallel
on a system that permits such execution. We also show a
design that is trained in serial, but tested in parallel (Tmixed).
The RBM’s accuracy remains relatively unchanged up to 10-
parallel evaluations during training, but is 10× faster than
serial execution. Furthermore, testing can always run in paral-
lel without loss of accuracy. These results show the significant
benefits that a new cloud inspired from QUATRO can provide
with no change in hardware or toolchains.
8. Lessons Learnt
The design and execution of QUATRO applications required
innovation, and has also revealed new research. Table 3 orga-
nizes these findings. In addition to the discussion on organiza-
tion in section 7, we briefly discuss the rest here.
Table 3: Innovation and limitations exposed.
Algorithms
Compilers & Tools
Organization
Hardware
Exposed
limita-
tions
Few algorithms
for analog quan-
tum computers,
nonlinear
dy-
namics
Limited support for
projections, analog
quantum
comput-
ers,
non-unitary
algorithms,
ansatz
search
Poor
scheduling,
lack
of
support for
parallelism
Limited
capability,
noise
Innovation
&
discov-
ery
State-detector,
Data-parallel
RBMs,
par-
allelism
in
eigensolvers
Hamiltonian walks
on annealers
Cloud
co-
design
for
parallelism
Software (Algorithms, Compilers): Present quantum soft-
ware frameworks are heavily specialized (e.g., [108,109,110,
111]). We explored them for QUATRO but the abstractions
11

mismatch. The toolchains are also heavily focused on spe-
cific computation-styles (unitary or Ising Hamiltonians), de-
vices (gate-based or annealers) and algorithms (variational).
There is little tool support for competitive alternatives like
Hamiltonian-based quantum systems [84,85], or non-unitary
algorithms. Even popular constructs like ansatz search, or
partial projectors lack generalizable tools. This reduces pro-
grammability and restricts the applications that can be run on
quantum systems today.
We also identify new research into the asynchronous train-
ing of RBMs. Understanding the theoretical mechanisms of
this approach, and its applicability for other quantum ML net-
works would be valuable, as it did in classical computing [95].
Lastly, the new cloud design we envision also calls for new
runtime managers and quantum operating systems to provide
performance and protection.
Hardware-Software interfaces: Existing hardware exposes
device control parameters such as the pulse information re-
quired to implement gates [112], or the annealing schedules
for annealers. While this enables cross-layer co-design [113],
it also creates additional programming burden to identify the
correct settings—e.g., anneal schedules for pausing in the LCA.
This is especially hard with the limited tools available today.
Striking a balance, we propose that device control mech-
anisms be abstracted with compiler heuristics. For example,
pausing can be automated by using recent work that can gen-
erate a quick estimate [114].
Hardware: While current NISQ (noisy intermediate-scale
quantum) devices may not outperform the best classical sys-
tems, we show promising empirical results that the QUATRO
models could do so in the near future. We highlight (in Sec-
tion 6.1) that, with improved noise rate (at 10−4), we can
already start to explore quantum walk models accurately, rep-
resenting meaningful NISQ or early fault tolerant applications.
We also argue for research increasing device functionality,
complementing the present focus on noise resilience and qubit
counts. Lack of functionality, e.g., the absence of primitives
to express projections in Quantum Walk, requires users to de-
sign custom circuits and pre-/post-selection methods. This is
tedious, error-prone since quantum programming is not intu-
itive [115], and inefficient since it wastes qubits and execution
time. While capabilities towards these features exist [116],
hardware development inevitably takes long, and such features
could at least be software emulated in the interim.
9. Related Work
Quantum applications: Numerous advances [117,118,119,
120,121,122] have helped make quantum computing a reality.
However, even though there is great interest in adopting quan-
tum computing for new domains (e.g., [20, 123]), realizing
new applications has been a challenge [6,42]. Applications are
focused in only a few areas [37,39,40,41,124]. We identify
cognitive modeling as a new domain that can benefit from
quantum computing, and present a suite of real-world applica-
tions. These are full models unlike benchmark suites, which
use kernels for performance comparisons [20, 55, 125, 126].
Our work also spans analog and digital quantum computers,
which is rare.
Quantum computer architecture: Significant strides have
been made in quantum programming and compilation [32],
circuit synthesis [127, 128], noise mitigation and reliabil-
ity [26,27,28,29,30,31], and microarchitecture design [34].
Recent work [129] on exploring improving fidelity of par-
tial measurements, and improving variational algorithms for
near-term machines [130,131] can help the models we study.
One limitation of prior research is that it is heavily device-
centric [26,27,28,29,30,31,32,33,34], with only a few anal-
yses at the system level [132,133,134]. Our work on higher
level organization complements existing research. Further-
more, existing systems research and software frameworks are
almost entirely focused on gate-based systems, which are only
one type of quantum computers. Many applications, like some
of ours, are more naturally suited to Hamiltonian-based com-
puters (e.g., QuEra [3,84]). Unfortunately, the stack for these
types of systems is limited.
Ravi et al. [132,133] raised the issue of growing application
demand in the cloud, and proposed fidelity- and queuing-aware
scheduling. We consider other aspects like parallelism.
Parallelism and Scheduling: Prior work explored microar-
chitecture and circuit-level parallelism with co-location on
gate-based computers [135, 136, 137, 138, 139] and anneal-
ers [134,140] while mitigating reliability issues that arise. We
study a complementary form of embarassing parallelism ex-
posed by QUATRO, that can benefit from, but does not need
co-location. Capturing all these forms of parallelism could
enable near-term machines to be competitive for real applica-
tions.
10. Conclusion
Quantum computing can benefit many domains, but it has
been a challenge to identify new applications, and stimulate
architecture-application co-design. This work presented cogni-
tive modeling as a new application area for quantum comput-
ing. We developed QUATRO, a suite of real-world cognitive
models that can be run on existing quantum hardware. Devel-
oping QUATRO required innovation, and running them helped
us identify new research in the quantum stack, some of which
we evaluate with real data. Our work simultaneously advances
the cognitive sciences, and quantum computer architecture.
References
[1] “Amazon Braket.” [Online]. Available: https://aws.amazon.com/
braket/
[2] “Azure Quantum cloud service.” [Online]. Available:
https:
//azure.microsoft.com/en-us/products/quantum
[3] “D-Wave Leap.” [Online]. Available: https://www.dwavesys.com/
solutions-and-products/cloud-platform/
[4] “IBM Quantum.” [Online]. Available: https://quantum-computing.
ibm.com/
12

[5] “Xanadu Cloud.” [Online]. Available: https://platform.xanadu.ai/
[6] Y. Alexeev, D. Bacon, K. R. Brown, R. Calderbank, L. D. Carr,
F. T. Chong, B. DeMarco, D. Englund, E. Farhi, B. Fefferman,
A. V. Gorshkov, A. Houck, J. Kim, S. Kimmel, M. Lange,
S. Lloyd, M. D. Lukin, D. Maslov, P. Maunz, C. Monroe,
J. Preskill, M. Roetteler, M. J. Savage, and J. Thompson,
“Quantum computer systems for scientific discovery,”
PRX
Quantum, vol. 2, p. 017001, Feb 2021. [Online]. Available:
https://link.aps.org/doi/10.1103/PRXQuantum.2.017001
[7] D. Kumaran, D. Hassabis, and J. L. McClelland, “What learning
systems do intelligent agents need? complementary learning systems
theory updated,” Trends in cognitive sciences, vol. 20, no. 7, pp.
512–534, 2016.
[8] E. M. Pothos and J. R. Busemeyer, “Quantum cognition,” Annual
review of psychology, vol. 73, pp. 749–778, 2022.
[9] D. Kahneman, “Maps of bounded rationality: Psychology for be-
havioral economics,” American economic review, vol. 93, no. 5, pp.
1449–1475, 2003.
[10] J. Vesel`y, R. P. Pothukuchi, K. Joshi, S. Gupta, J. D. Cohen, and
A. Bhattacharjee, “Distill: Domain-specific compilation for cogni-
tive models,” in 2022 IEEE/ACM International Symposium on Code
Generation and Optimization (CGO).
IEEE, 2022, pp. 301–312.
[11] K. J. Holyoak, “Analogy and relational reasoning,” in The Oxford
handbook of thinking and reasoning, K. J. Holyoak and R. G. Morri-
son, Eds.
Oxford University Press, 2012, pp. 234–259.
[12] M. K. Ho, D. Abel, J. D. Cohen, M. L. Littman, and T. L. Griffiths,
“The efficiency of human cognition reflects planned information pro-
cessing,” in AAAI Conference on Artificial Intelligence, Apr. 2020.
[13] L. Rosendahl, A. S. Bizyaeva, and J. Cohen, “A novel quantum
approach to the dynamics of decision making.” in CogSci, 2020.
[14] M. L. Rosendahl, “The multi-particle multi-well (mpmw) framework:
A quantum framework incorporating attentional capture, representa-
tional generality, and arousal to perceptual choice problems,” Ph.D.
dissertation, Princeton University, 2022.
[15] J. R. Busemeyer, Z. Wang, and R. M. Shiffrin, “Bayesian model
comparison favors quantum over standard decision theory account of
dynamic inconsistency.” Decision, vol. 2, no. 1, p. 1, 2015.
[16] J. R. Busemeyer and P. D. Bruza, Quantum models of cognition and
decision.
Cambridge University Press, 2012.
[17] E. M. Pothos and J. R. Busemeyer, “Quantum principles in psychol-
ogy: The debate, the evidence, and the future,” Behavioral and Brain
Sciences, vol. 36, no. 3, pp. 310–327, 2013.
[18] P. D. Bruza, Z. Wang, and J. R. Busemeyer, “Quantum cognition: a
new theoretical approach to psychology,” Trends in cognitive sciences,
vol. 19, no. 7, pp. 383–393, 2015.
[19] G. P. Epping and J. R. Busemeyer, “Using diverging predictions from
classical and quantum models to dissociate between categorization
systems,” Journal of Mathematical Psychology, vol. 112, p. 102738,
2023.
[20] D. Widdows, J. Rani, and E. M. Pothos, “Quantum circuit
components for cognitive decision-making,” Entropy, vol. 25, no. 4,
2023. [Online]. Available: https://www.mdpi.com/1099-4300/25/4/
548
[21] J. Liu, G. T. Byrd, and H. Zhou, “Quantum circuits for dynamic
runtime assertions in quantum computation,” in Proceedings
of the Twenty-Fifth International Conference on Architectural
Support for Programming Languages and Operating Systems,
ser. ASPLOS ’20.
New York, NY, USA: Association for
Computing Machinery, 2020, p. 1017–1030. [Online]. Available:
https://doi.org/10.1145/3373376.3378488
[22] J. Liu and H. Zhou, “Systematic approaches for precise and approxi-
mate quantum state runtime assertion,” in 2021 IEEE International
Symposium on High-Performance Computer Architecture (HPCA),
2021, pp. 179–193.
[23] K. Temme, S. Bravyi, and J. M. Gambetta, “Error Mitigation for
Short-Depth Quantum Circuits,” Phys. Rev. Lett., vol. 119, no. 18, p.
180509, Nov. 2017.
[24] S. Endo, S. C. Benjamin, and Y. Li, “Practical Quantum Error Miti-
gation for Near-Future Applications,” Phys. Rev. X, vol. 8, no. 3, p.
031027, Jul. 2018.
[25] Z. Cai, R. Babbush, S. C. Benjamin, S. Endo, W. J. Huggins, Y. Li,
J. R. McClean, and T. E. O’Brien, “Quantum Error Mitigation,” arXiv,
Oct. 2022.
[26] T. Patel and D. Tiwari, “Veritas: Accurately estimating the correct
output on noisy intermediate-scale quantum computers,” in SC20:
International Conference for High Performance Computing, Network-
ing, Storage and Analysis, 2020, pp. 1–16.
[27] ——, “Qraft: Reverse your quantum circuit and know the correct
program output,” in Proceedings of the 26th ACM International
Conference on Architectural Support for Programming Languages
and Operating Systems, ser. ASPLOS ’21.
New York, NY, USA:
Association for Computing Machinery, 2021, p. 443–455. [Online].
Available: https://doi.org/10.1145/3445814.3446743
[28] S. S. Tannu and M. K. Qureshi, “Mitigating measurement errors
in quantum computers by exploiting state-dependent bias,” in
Proceedings of the 52nd Annual IEEE/ACM International Symposium
on Microarchitecture, ser. MICRO ’52.
New York, NY, USA:
Association for Computing Machinery, 2019, p. 279–290. [Online].
Available: https://doi.org/10.1145/3352460.3358265
[29] P. Murali, D. C. Mckay, M. Martonosi, and A. Javadi-Abhari,
“Software mitigation of crosstalk on noisy intermediate-scale quantum
computers,” in Proceedings of the Twenty-Fifth International
Conference on Architectural Support for Programming Languages
and Operating Systems, ser. ASPLOS ’20.
New York, NY, USA:
Association for Computing Machinery, 2020, p. 1001–1016. [Online].
Available: https://doi.org/10.1145/3373376.3378477
[30] P. Das, C. A. Pattison, S. Manne, D. M. Carmean, K. M. Svore,
M. Qureshi, and N. Delfosse, “Afs: Accurate, fast, and scalable
error-decoding for fault-tolerant quantum computers,” in 2022 IEEE
International Symposium on High-Performance Computer Architec-
ture (HPCA), 2022, pp. 259–273.
[31] Y. Suzuki, T. Sugiyama, T. Arai, W. Liao, K. Inoue, and T. Tanimoto,
“Q3de: A fault-tolerant quantum computer architecture for multi-bit
burst errors by cosmic rays,” in 2022 55th IEEE/ACM International
Symposium on Microarchitecture (MICRO), 2022, pp. 1110–1125.
[32] A. JavadiAbhari, S. Patil, D. Kudrow, J. Heckey, A. Lvov, F. T.
Chong, and M. Martonosi, “Scaffcc: A framework for compilation
and analysis of quantum computing programs,” in Proceedings of
the 11th ACM Conference on Computing Frontiers, ser. CF ’14.
New York, NY, USA: Association for Computing Machinery, 2014.
[Online]. Available: https://doi.org/10.1145/2597917.2597939
[33] W. Tang, T. Tomesh, M. Suchara, J. Larson, and M. Martonosi,
“Cutqc: using small quantum computers for large quantum circuit
evaluations,” in Proceedings of the 26th ACM International con-
ference on architectural support for programming languages and
operating systems, 2021, pp. 473–486.
[34] P. Murali, N. M. Linke, M. Martonosi, A. J. Abhari, N. H.
Nguyen, and C. H. Alderete, “Full-stack, real-system quantum
computer studies: Architectural comparisons and design insights,”
in Proceedings of the 46th International Symposium on Computer
Architecture, ser. ISCA ’19.
New York, NY, USA: Association
for Computing Machinery, 2019, p. 527–540. [Online]. Available:
https://doi.org/10.1145/3307650.3322273
[35] S. Mittal and S. Vaishay, “A survey of techniques for optimizing
deep learning on gpus,” Journal of Systems Architecture, vol. 99, p.
101635, 2019.
[36] I. M. Georgescu, S. Ashhab, and F. Nori, “Quantum simulation,” Rev.
Mod. Phys., vol. 86, no. 1, pp. 153–185, Mar. 2014.
[37] A. Aspuru-Guzik, A. D. Dutoi, P. J. Love, and M. Head-Gordon,
“Simulated Quantum Computation of Molecular Energies,” Science,
vol. 309, no. 5741, pp. 1704–1707, Sep. 2005.
[38] R. Orús, S. Mugel, and E. Lizaso, “Quantum computing for finance:
Overview and prospects,” Rev. Phys., vol. 4, p. 100028, Nov. 2019.
[39] P. Rebentrost, B. Gupt, and T. R. Bromley, “Quantum computational
finance: Monte carlo pricing of financial derivatives,” Physical Re-
view A, vol. 98, no. 2, p. 022321, 2018.
[40] J. Biamonte, P. Wittek, N. Pancotti, P. Rebentrost, N. Wiebe, and
S. Lloyd, “Quantum machine learning,” Nature, vol. 549, no. 7671,
pp. 195–202, 2017.
[41] N. Moll, P. Barkoutsos, L. S. Bishop, J. M. Chow, A. Cross, D. J. Eg-
ger, S. Filipp, A. Fuhrer, J. M. Gambetta, M. Ganzhorn, A. Kandala,
A. Mezzacapo, P. Müller, W. Riess, G. Salis, J. Smolin, I. Tavernelli,
and K. Temme, “Quantum optimization using variational algorithms
on near-term quantum devices,” Quantum Science and Technology,
vol. 3, no. 3, p. 030503, 2018.
[42] “Quantum computing: Progress and prospects,” National Academies
of Sciences, Engineering, and Medicine, 2019, National Academies
Press.
[43] R. Ratcliff, “A theory of memory retrieval,” Psychological Review,
vol. 85, no. 2, pp. 59–108, 1978.
[44] M. Usher and J. L. McClelland, “The time course of perceptual
choice: the leaky, competing accumulator model.” Psychological
review, vol. 108, no. 3, p. 550, 2001.
13

[45] S. Musslick and J. D. Cohen, “Rationalizing constraints on the capac-
ity for cognitive control,” Trends in Cognitive Sciences, vol. 25, no. 9,
pp. 757–775, 2021.
[46] A. Graves, G. Wayne, and I. Danihelka, “Neural turing machines,”
arXiv preprint arXiv:1410.5401, 2014.
[47] D. Rolnick, A. Ahuja, J. Schwarz, T. Lillicrap, and G. Wayne, “Expe-
rience replay for continual learning,” Advances in Neural Information
Processing Systems, vol. 32, 2019.
[48] T. W. Webb, I. Sinha, and J. Cohen, “Emergent symbols through bind-
ing in external memory,” in International Conference on Learning
Representations, 2020.
[49] B. M. Lake, T. D. Ullman, J. B. Tenenbaum, and S. J. Gershman,
“Building machines that learn and think like people,” Behavioral and
brain sciences, vol. 40, p. e253, 2017.
[50] A. Tversky and E. Shafir, “The disjunction effect in choice under
uncertainty,” Psychological science, vol. 3, no. 5, pp. 305–310, 1992.
[51] E. M. Pothos and J. R. Busemeyer, “Can quantum probability provide
a new direction for cognitive modeling?” Behavioral and brain
sciences, vol. 36, no. 3, pp. 255–274, 2013.
[52] P. D. Kvam, T. J. Pleskac, S. Yu, and J. R. Busemeyer, “Interference
effects of choice on confidence: Quantum characteristics of evidence
accumulation,” Proceedings of the National Academy of Sciences,
vol. 112, no. 34, pp. 10 645–10 650, 2015.
[53] J. R. Busemeyer, Z. Wang, and J. T. Townsend, “Quantum dynamics
of human decision-making,” Journal of Mathematical Psychology,
vol. 50, no. 3, pp. 220–241, 2006.
[54] J. R. Busemeyer, P. D. Kvam, and T. J. Pleskac, “Comparison of
markov versus quantum dynamical models of human decision mak-
ing,” Wiley Interdisciplinary Reviews: Cognitive Science, vol. 11,
no. 4, p. e1526, 2020.
[55] T. Tomesh, P. Gokhale, V. Omole, G. S. Ravi, K. N. Smith, J. Vis-
zlai, X.-C. Wu, N. Hardavellas, M. R. Martonosi, and F. T. Chong,
“Supermarq: A scalable quantum benchmark suite,” in 2022 IEEE In-
ternational Symposium on High-Performance Computer Architecture
(HPCA).
IEEE, 2022, pp. 587–603.
[56] A. Mallick, S. Mandal, A. Karan, and C. M. Chandrashekar, “Simu-
lating dirac hamiltonian in curved space-time by split-step quantum
walk,” Journal of Physics Communications, vol. 3, no. 1, p. 015012,
2019.
[57] T. Oka, N. Konno, R. Arita, and H. Aoki, “Breakdown of an electric-
field driven system: a mapping to a quantum walk,” Physical review
letters, vol. 94, no. 10, p. 100602, 2005.
[58] M. Ferdman, A. Adileh, O. Kocberber, S. Volos, M. Alisafaee,
D. Jevdjic, C. Kaynak, A. D. Popescu, A. Ailamaki, and B. Falsafi,
“Clearing the clouds: A study of emerging scale-out workloads on
modern hardware,” SIGPLAN Not., vol. 47, no. 4, p. 37–48, mar
2012. [Online]. Available: https://doi.org/10.1145/2248487.2150982
[59] R. Ratcliff, P. L. Smith, S. D. Brown, and G. McKoon, “Diffusion
decision model: Current issues and history,” Trends in cognitive
sciences, vol. 20, no. 4, pp. 260–281, 2016.
[60] J. R. Busemeyer, S. Gluth, J. Rieskamp, and B. M. Turner, “Cognitive
and neural bases of multi-attribute, multi-alternative, value-based
decisions,” Trends in cognitive sciences, vol. 23, no. 3, pp. 251–263,
2019.
[61] T. L. Willke, S. B. M. Yoo, M. Capot˘a, S. Musslick, B. Y. Hayden,
and J. D. Cohen, “A comparison of non-human primate and deep rein-
forcement learning agent performance in a virtual pursuit-avoidance
task,” in Reinforcement Learning and Decision Making Conference,
2019.
[62] R. Bogacz, M. Usher, J. Zhang, and J. L. McClelland, “Extending a
biologically inspired model of choice: multi-alternatives, nonlinearity
and value-based multidimensional choice,” Philosophical Transac-
tions of the Royal Society B: Biological Sciences, vol. 362, no. 1485,
pp. 1655–1670, 2007.
[63] Y. Ding and F. T. Chong, “Circuit synthesis and compilation,” in
Quantum Computer Systems: Research for Noisy Intermediate-Scale
Quantum Computers.
Springer, 2020, pp. 91–125.
[64] A. Matuschak and M. A. Nielsen, “Quantum Computing for the Very
Curious,” 2019. [Online]. Available: https://quantum.country/qcvc
[65] E. Farhi and S. Gutmann, “Quantum computation and decision trees,”
Physical Review A, vol. 58, no. 2, p. 915, 1998.
[66] S. E. Venegas-Andraca, “Quantum walks: a comprehensive review,”
Quantum Information Processing, vol. 11, no. 5, pp. 1015–1106,
2012.
[67] R. Wille, R. Van Meter, and Y. Naveh, “Ibm’s qiskit tool chain: Work-
ing with and developing for real quantum computers,” in 2019 De-
sign, Automation & Test in Europe Conference & Exhibition (DATE).
IEEE, 2019, pp. 1234–1240.
[68] A. Peruzzo, J. McClean, P. Shadbolt, M.-H. Yung, X.-Q. Zhou, P. J.
Love, A. Aspuru-Guzik, and J. L. O’Brien, “A variational eigenvalue
solver on a photonic quantum processor,” Nat. Commun., vol. 5, no.
4213, pp. 1–7, Jul. 2014.
[69] J. R. McClean, J. Romero, R. Babbush, and A. Aspuru-Guzik, “The
theory of variational hybrid quantum-classical algorithms,” New Jour-
nal of Physics, vol. 18, no. 2, p. 023023, 2016.
[70] E. Farhi, J. Goldstone, and S. Gutmann, “A quantum approximate
optimization algorithm,” arXiv preprint arXiv:1411.4028, 2014.
[71] K. M. Nakanishi, K. Mitarai, and K. Fujii, “Subspace-search vari-
ational quantum eigensolver for excited states,” Physical Review
Research, vol. 1, no. 3, p. 033062, 2019.
[72] S. Sim, P. D. Johnson, and A. Aspuru-Guzik, “Expressibility and
entangling capability of parameterized quantum circuits for hybrid
quantum-classical algorithms,” Advanced Quantum Technologies,
vol. 2, no. 12, p. 1900070, 2019.
[73] M. Motta, C. Sun, A. T. Tan, M. J. O’Rourke, E. Ye, A. J. Minnich,
F. G. Brandao, and G. K.-L. Chan, “Determining eigenstates and
thermal states on a quantum computer using quantum imaginary time
evolution,” Nature Physics, vol. 16, no. 2, pp. 205–210, 2020.
[74] S. McArdle, T. Jones, S. Endo, Y. Li, S. C. Benjamin, and X. Yuan,
“Variational ansatz-based quantum simulation of imaginary time evo-
lution,” npj Quantum Inf., vol. 5, no. 75, pp. 1–6, Sep. 2019.
[75] T. H. Kyaw, M. B. Soley, B. Allen, P. Bergold, C. Sun, V. S. Batista,
and A. Aspuru-Guzik, “Variational quantum iterative power algo-
rithms for global optimization,” arXiv, Aug. 2022.
[76] G. Saxena, A. Shalabi, and T. H. Kyaw, “Practical limitations of
quantum data propagation on noisy quantum processors,” arXiv, Jun.
2023.
[77] K. Kurowski, M. Slysz, M. Subocz, and R. Ró˙zycki, “Applying a
quantum annealing based restricted boltzmann machine for mnist
handwritten digit classification.” Computational Methods in Science
& Technology, vol. 27, no. 3, 2021.
[78] P. Hauke, H. G. Katzgraber, W. Lechner, H. Nishimori, and W. D.
Oliver, “Perspectives of quantum annealing: Methods and implemen-
tations,” Reports on Progress in Physics, vol. 83, no. 5, p. 054401,
2020.
[79] E. Farhi, J. Goldstone, S. Gutmann, and M. Sipser, “Quantum com-
putation by adiabatic evolution,” arXiv preprint quant-ph/0001106,
2000.
[80] T. H. Kyaw, Y. Li, and L.-C. Kwek, “Measurement-Based Quan-
tum Computation on Two-Body Interacting Qubits with Adiabatic
Evolution,” Phys. Rev. Lett., vol. 113, no. 18, p. 180501, Oct. 2014.
[81] T. H. Kyaw and L.-C. Kwek, “Cluster state generation in one-
dimensional Kitaev honeycomb model via shortcut to adiabaticity,”
New J. Phys., vol. 20, no. 4, p. 045007, Apr. 2018.
[82] T. H. Kyaw, S. Allende, L.-C. Kwek, and G. Romero, “Parity-
preserving light-matter system mediates effective two-body inter-
actions,” Quantum Sci. Technol., vol. 2, no. 2, p. 025007, May 2017.
[83] W. van Dam, M. Mosca, and U. Vazirani, “How powerful is adiabatic
quantum computation?” in Proceedings 42nd IEEE Symposium on
Foundations of Computer Science.
IEEE, Oct. 2001, pp. 279–287.
[84] “QuEra.” [Online]. Available: https://www.quera.com/
[85] Y. Peng, J. Young, P. Liu, and X. Wu, “Simuq: A domain-specific
language for quantum simulation with analog compilation,” arXiv
preprint arXiv:2303.02775, 2023.
[86] R. Xia, T. Bian, and S. Kais, “Electronic structure calculations and
the ising hamiltonian,” The Journal of Physical Chemistry B, vol. 122,
no. 13, pp. 3384–3395, 2017.
[87] G. Li, L. Zhou, N. Yu, Y. Ding, M. Ying, and Y. Xie, “Projection-
based runtime assertions for testing and debugging quantum pro-
grams,” Proceedings of the ACM on Programming Languages, vol. 4,
no. OOPSLA, pp. 1–29, 2020.
[88] E. Boros and P. L. Hammer, “Pseudo-boolean optimization,” Discrete
applied mathematics, vol. 123, no. 1-3, pp. 155–225, 2002.
[89] P. Gokhale, O. Angiuli, Y. Ding, K. Gui, T. Tomesh, M. Suchara,
M. Martonosi, and F. T. Chong, “Optimization of simultaneous mea-
surement for variational quantum eigensolver applications,” in 2020
IEEE International Conference on Quantum Computing and Engi-
neering (QCE), 2020, pp. 379–390.
[90] J. M. Clary, E. B. Jones, D. Vigil-Fowler, C. Chang, and P. Graf,
“Exploring the scaling limitations of the variational quantum eigen-
solver with the bond dissociation of hydride diatomic molecules,”
International Journal of Quantum Chemistry, p. e27097, 2023.
14

[91] L. Mineh and A. Montanaro, “Accelerating the variational quantum
eigensolver using parallelism,” Quantum Science and Technology,
vol. 8, no. 3, p. 035012, 2023.
[92] J. R. McClean, M. E. Kimchi-Schwartz, J. Carter, and W. A. de Jong,
“Hybrid quantum-classical hierarchy for mitigation of decoherence
and determination of excited states,” Phys. Rev. A, vol. 95, no. 4, p.
042308, Apr. 2017.
[93] P. Smolensky, “Information processing in dynamical systems: Foun-
dations of harmony theory,” 1986, department of Computer Science,
University of Colorado, Boulder.
[94] G. E. Hinton, “Learning multiple layers of representation,” Trends in
cognitive sciences, vol. 11, no. 10, pp. 428–434, 2007.
[95] B. Recht, C. Re, S. Wright, and F. Niu, “Hogwild!: A lock-free
approach to parallelizing stochastic gradient descent,” Advances in
neural information processing systems, vol. 24, 2011.
[96] S. Jiang, K. A. Britt, A. J. McCaskey, T. S. Humble, and S. Kais,
“Quantum annealing for prime factorization,” Scientific reports, vol. 8,
no. 1, p. 17667, 2018.
[97] S. A. Rahman, R. Lewis, E. Mendicelli, and S. Powell, “Su (2) lattice
gauge theory on a quantum annealer,” Physical Review D, vol. 104,
no. 3, p. 034501, 2021.
[98] “QPU-Specific
Characteristics.”
[Online].
Avail-
able:
https://docs.dwavesys.com/docs/latest/_downloads/
114d18bf1a9d2fd6fea1a16c89c30799/09-1262A-C_QPU_
Properties_Advantage_system4_1.pdf
[99] J. Marshall, D. Venturelli, I. Hen, and E. G. Rieffel, “Power of
pausing: Advancing understanding of thermalization in experimental
quantum annealers,”
Phys. Rev. Appl.,
vol. 11,
p. 044083,
Apr 2019. [Online]. Available:
https://link.aps.org/doi/10.1103/
PhysRevApplied.11.044083
[100] M. A. Carreira-Perpinan and G. Hinton, “On contrastive divergence
learning,” in International workshop on artificial intelligence and
statistics.
PMLR, 2005, pp. 33–40.
[101] E. T. Campbell, B. M. Terhal, and C. Vuillot, “Roads towards fault-
tolerant universal quantum computation,” Nature, vol. 549, no. 7671,
pp. 172–179, 2017.
[102] A. Kandala, A. Mezzacapo, K. Temme, M. Takita, M. Brink, J. M.
Chow, and J. M. Gambetta, “Hardware-efficient variational quantum
eigensolver for small molecules and quantum magnets,” nature, vol.
549, no. 7671, pp. 242–246, 2017.
[103] H. Wang, Y. Ding, J. Gu, Y. Lin, D. Z. Pan, F. T. Chong, and S. Han,
“Quantumnas: Noise-adaptive search for robust quantum circuits,” in
2022 IEEE International Symposium on High-Performance Computer
Architecture (HPCA).
IEEE, 2022, pp. 692–708.
[104] “IBM Quantum.” [Online]. Available: https://quantum-computing.
ibm.com/lab/docs/iql/manage/systems/queue
[105] “IBM Quantum.” [Online]. Available: https://qiskit.org/ecosystem/
ibm-runtime/sessions.html
[106] M. Satyanarayanan, P. Bahl, R. Caceres, and N. Davies, “The case
for vm-based cloudlets in mobile computing,” IEEE pervasive Com-
puting, vol. 8, no. 4, pp. 14–23, 2009.
[107] S. Stein, N. Wiebe, Y. Ding, P. Bo, K. Kowalski, N. Baker, J. Ang,
and A. Li, “Eqc: ensembled quantum computing for variational
quantum algorithms,” in Proceedings of the 49th Annual International
Symposium on Computer Architecture, 2022, pp. 59–71.
[108] N. H. Stair and F. A. Evangelista, “Qforte: an efficient state simulator
and quantum algorithms library for molecular electronic structure,”
arXiv preprint arXiv:2108.04413, 2021.
[109] J. R. McClean, N. C. Rubin, K. J. Sung, I. D. Kivlichan, X. Bonet-
Monroig, Y. Cao, C. Dai, E. S. Fried, C. Gidney, B. Gimby,
P. Gokhale, T. Häner, T. Hardikar, V. Havlíˇcek, O. Higgott, C. Huang,
J. Izaac, Z. Jiang, X. Liu, S. McArdle, M. Neeley, T. O’Brien,
B. O’Gorman, I. Ozfidan, M. D. Radin, J. Romero, N. P. D. Sawaya,
B. Senjean, K. Setia, S. Sim, D. S. Steiger, M. Steudtner, Q. Sun,
W. Sun, D. Wang, F. Zhang, and R. Babbush, “Openfermion: the elec-
tronic structure package for quantum computers,” Quantum Science
and Technology, vol. 5, no. 3, p. 034014, 2020.
[110] J. S. Kottmann, S. Alperin-Lea, T. Tamayo-Mendoza, A. Cervera-
Lierta, C. Lavigne, T.-C. Yen, V. Verteletskyi, P. Schleich, A. Anand,
M. Degroote, S. Chaney, M. Kesibi, N. G. Curnow, B. Solo, G. Tsil-
imigkounakis, C. Zendejas-Morales, A. F. Izmaylov, and A. Aspuru-
Guzik, “TEQUILA: a platform for rapid development of quantum
algorithms,” Quantum Sci. Technol., vol. 6, no. 2, p. 024009, Mar.
2021.
[111] X.-Z. Luo, J.-G. Liu, P. Zhang, and L. Wang, “Yao.jl: Extensible,
Efficient Framework for Quantum Algorithm Design,” Quantum,
vol. 4, p. 341, Oct. 2020.
[112] T. Alexander, N. Kanazawa, D. J. Egger, L. Capelluto, C. J. Wood,
A. Javadi-Abhari, and D. C. McKay, “Qiskit pulse: programming
quantum computers through the cloud with pulses,” Quantum Science
and Technology, vol. 5, no. 4, p. 044006, 2020.
[113] P. Gokhale, A. Javadi-Abhari, N. Earnest, Y. Shi, and F. T. Chong,
“Optimized quantum compilation for near-term algorithms with open-
pulse,” in 2020 53rd Annual IEEE/ACM International Symposium on
Microarchitecture (MICRO).
IEEE, 2020, pp. 186–200.
[114] T. Imoto, Y. Seki, Y. Matsuzaki, and S. Kawabata, “Guaranteed-
accuracy quantum annealing,” Physical Review A, vol. 106, no. 4, p.
042615, 2022.
[115] T. Kopyciuk, M. Lewandowski, and P. Kurzy´nski, “Pre-and post-
selection paradoxes in quantum walks,” New Journal of Physics,
vol. 21, no. 10, p. 103054, 2019.
[116] J. T. Monroe, “Partial measurements of quantum systems,” Ph.D.
dissertation, Washington University in St. Louis, 2021.
[117] F. Arute, K. Arya, R. Babbush, D. Bacon, J. C. Bardin, R. Barends,
R. Biswas, S. Boixo, F. G. S. L. Brandao, D. A. Buell, B. Burkett,
Y. Chen, Z. Chen, B. Chiaro, R. Collins, W. Courtney, A. Dunsworth,
E. Farhi, B. Foxen, A. Fowler, C. Gidney, M. Giustina, R. Graff,
K. Guerin, S. Habegger, M. P. Harrigan, M. J. Hartmann, A. Ho,
M. Hoffmann, T. Huang, T. S. Humble, S. V. Isakov, E. Jeffrey,
Z. Jiang, D. Kafri, K. Kechedzhi, J. Kelly, P. V. Klimov, S. Knysh,
A. Korotkov, F. Kostritsa, D. Landhuis, M. Lindmark, E. Lucero,
D. Lyakh, S. Mandrà, J. R. McClean, M. McEwen, A. Megrant,
X. Mi, K. Michielsen, M. Mohseni, J. Mutus, O. Naaman,
M. Neeley, C. Neill, M. Y. Niu, E. Ostby, A. Petukhov, J. C. Platt,
C. Quintana, E. G. Rieffel, P. Roushan, N. C. Rubin, D. Sank,
K. J. Satzinger, V. Smelyanskiy, K. J. Sung, M. D. Trevithick,
A. Vainsencher, B. Villalonga, T. White, Z. J. Yao, P. Yeh,
A. Zalcman, H. Neven, and J. M. Martinis, “Quantum supremacy
using a programmable superconducting processor,” Nature, vol.
574, no. 7779, pp. 505–510, Oct 2019. [Online]. Available:
https://doi.org/10.1038/s41586-019-1666-5
[118] H.-S. Zhong, H. Wang, Y.-H. Deng, M.-C. Chen, L.-C. Peng, Y.-H.
Luo, J. Qin, D. Wu, X. Ding, Y. Hu, P. Hu, X.-Y. Yang, W.-J. Zhang,
H. Li, Y. Li, X. Jiang, L. Gan, G. Yang, L. You, Z. Wang, L. Li, N.-L.
Liu, C.-Y. Lu, and J.-W. Pan, “Quantum computational advantage
using photons,” Science, vol. 370, no. 6523, pp. 1460–1463, Dec.
2020.
[119] Y. Wu, W.-S. Bao, S. Cao, F. Chen, M.-C. Chen, X. Chen, T.-H.
Chung, H. Deng, Y. Du, D. Fan, M. Gong, C. Guo, C. Guo, S. Guo,
L. Han, L. Hong, H.-L. Huang, Y.-H. Huo, L. Li, N. Li, S. Li, Y. Li,
F. Liang, C. Lin, J. Lin, H. Qian, D. Qiao, H. Rong, H. Su, L. Sun,
L. Wang, S. Wang, D. Wu, Y. Xu, K. Yan, W. Yang, Y. Yang, Y. Ye,
J. Yin, C. Ying, J. Yu, C. Zha, C. Zhang, H. Zhang, K. Zhang,
Y. Zhang, H. Zhao, Y. Zhao, L. Zhou, Q. Zhu, C.-Y. Lu, C.-Z. Peng,
X. Zhu, and J.-W. Pan, “Strong Quantum Computational Advantage
Using a Superconducting Quantum Processor,” Phys. Rev. Lett., vol.
127, no. 18, p. 180501, Oct. 2021.
[120] L. S. Madsen, F. Laudenbach, M. F. Askarani, F. Rortais, T. Vincent,
J. F. F. Bulmer, F. M. Miatto, L. Neuhaus, L. G. Helt, M. J. Collins,
A. E. Lita, T. Gerrits, S. W. Nam, V. D. Vaidya, M. Menotti,
I. Dhand, Z. Vernon, N. Quesada, and J. Lavoie, “Quantum
computational advantage with a programmable photonic processor,”
Nature, vol. 606, no. 7912, pp. 75–81, Jun 2022. [Online]. Available:
https://doi.org/10.1038/s41586-022-04725-x
[121] K. Bharti, A. Cervera-Lierta, T. H. Kyaw, T. Haug, S. Alperin-Lea,
A. Anand, M. Degroote, H. Heimonen, J. S. Kottmann, T. Menke,
W.-K. Mok, S. Sim, L.-C. Kwek, and A. Aspuru-Guzik, “Noisy
intermediate-scale quantum algorithms,” Rev. Mod. Phys., vol. 94,
no. 1, p. 015004, Feb. 2022.
[122] J. Zhang, T. H. Kyaw, S. Filipp, L.-C. Kwek, E. Sjöqvist, and D. Tong,
“Geometric and holonomic quantum computation,” Phys. Rep., vol.
1027, pp. 1–53, Jul. 2023.
[123] A. Fedorov and M. Gelfand, “Towards practical applications in quan-
tum computational biology,” Nature Computational Science, vol. 1,
no. 2, pp. 114–119, 2021.
[124] R. P. Feynman, “Simulating physics with computers,” International
Journal of Theoretical Physics, vol. 21, no. 6/7, 1982.
[125] T. Lubinski, S. Johri, P. Varosy, J. Coleman, L. Zhao, J. Necaise,
C. H. Baldwin, K. Mayer, and T. Proctor, “Application-oriented per-
formance benchmarks for quantum computing,” IEEE Transactions
on Quantum Engineering, 2023.
[126] J. R. Finžgar, P. Ross, L. Hölscher, J. Klepsch, and A. Luckow,
“Quark: A framework for quantum computing application benchmark-
ing,” in 2022 IEEE International Conference on Quantum Computing
and Engineering (QCE).
IEEE, 2022, pp. 226–237.
15

[127] V. Shende, S. Bullock, and I. Markov, “Synthesis of quantum-logic
circuits,” IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, vol. 25, no. 6, pp. 1000–1010, 2006.
[128] M. Amy, D. Maslov, M. Mosca, and M. Roetteler, “A meet-in-the-
middle algorithm for fast synthesis of depth-optimal quantum circuits,”
IEEE Transactions on Computer-Aided Design of Integrated Circuits
and Systems, vol. 32, no. 6, pp. 818–830, 2013.
[129] P. Das, S. Tannu, and M. Qureshi, “Jigsaw: Boosting fidelity of nisq
programs via measurement subsetting,” in MICRO-54: 54th Annual
IEEE/ACM International Symposium on Microarchitecture, 2021, pp.
937–949.
[130] G. S. Ravi, P. Gokhale, Y. Ding, W. Kirby, K. Smith, J. M. Baker,
P. J. Love, H. Hoffmann, K. R. Brown, and F. T. Chong, “Cafqa: A
classical simulation bootstrap for variational quantum algorithms,” in
Proceedings of the 28th ACM International Conference on Architec-
tural Support for Programming Languages and Operating Systems,
Volume 1, 2022, pp. 15–29.
[131] G. S. Ravi, K. Smith, J. M. Baker, T. Kannan, N. Earnest, A. Javadi-
Abhari, H. Hoffmann, and F. T. Chong, “Navigating the dynamic
noise landscape of variational quantum algorithms with qismet,” in
Proceedings of the 28th ACM International Conference on Architec-
tural Support for Programming Languages and Operating Systems,
Volume 2, 2023, pp. 515–529.
[132] G. S. Ravi, K. N. Smith, P. Murali, and F. T. Chong, “Adaptive job and
resource management for the growing quantum cloud,” in 2021 IEEE
International Conference on Quantum Computing and Engineering
(QCE).
IEEE, 2021, pp. 301–312.
[133] G. S. Ravi, K. N. Smith, P. Gokhale, and F. T. Chong, “Quantum com-
puting in the cloud: Analyzing job and machine characteristics,” in
2021 IEEE International Symposium on Workload Characterization
(IISWC).
IEEE, 2021, pp. 39–50.
[134] J. Yao, J. Wang, F. Yue, J. Xu, and Z. Shan, “Mtmc: A scheduling
framework of multi-tasking mapping on multi-chips,” 2022. [Online].
Available: https://www.researchsquare.com/article/rs-1857463/latest.
pdf
[135] M. Zhang, L. Xie, Z. Zhang, Q. Yu, G. Xi, H. Zhang, F. Liu, Y. Zheng,
Y. Zheng, and S. Zhang, “Exploiting different levels of parallelism in
the quantum control microarchitecture for superconducting qubits,”
in MICRO-54: 54th Annual IEEE/ACM International Symposium on
Microarchitecture, 2021, pp. 898–911.
[136] S. Niu and A. Todri-Sanial, “How parallel circuit execution can be
useful for nisq computing?” in 2022 Design, Automation & Test in
Europe Conference & Exhibition (DATE).
IEEE, 2022, pp. 1065–
1070.
[137] Y. Ohkura, T. Satoh, and R. Van Meter, “Simultaneous execution
of quantum circuits on current and near-future nisq systems,” IEEE
Transactions on Quantum Engineering, vol. 3, pp. 1–10, 2022.
[138] P. Das, S. S. Tannu, P. J. Nair, and M. Qureshi, “A case for multi-
programming quantum computers,” in Proceedings of the 52nd An-
nual IEEE/ACM International Symposium on Microarchitecture,
2019, pp. 291–303.
[139] L. Liu and X. Dou, “Qucloud: A new qubit mapping mechanism for
multi-programming quantum computing in cloud environment,” in
2021 IEEE International symposium on high-performance computer
architecture (HPCA).
IEEE, 2021, pp. 167–178.
[140] T. Huang, Y. Zhu, R. S. M. Goh, and T. Luo, “When quantum an-
nealing meets multitasking: Potentials, challenges and opportunities,”
Array, p. 100282, 2023.
16

