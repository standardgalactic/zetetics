Workshop track - ICLR 2017
TRAINING
A
SUBSAMPLING
MECHANISM
IN
EXPECTATION
Colin Raffel & Dieterich Lawson∗
Google Brain
craffel@gmail.com, dieterichl@google.com
ABSTRACT
We describe a mechanism for subsampling sequences and show how to compute
its expected output so that it can be trained with standard backpropagation. We
test this approach on a simple toy problem and discuss its shortcomings.
1
SUBSAMPLING SEQUENCES
Consider a mechanism which, given a sequence of vectors s = {s0, s1, . . . , sT −1}, st ∈Rd, pro-
duces a sequence of “sampling probabilities” e = {e0, e1, . . . , eT −1}, et ∈[0, 1] which denote the
probability of including st in the output sequence y = {y0, y1, . . . , yU−1}. Producing y from s and
e is encapsulated by the following pseudo-code and visualized in ﬁg. 2 (appendix):
# Initialize y as an empty sequence
y = []
for t in {0, 1, ..., T - 1}:
# Draw a random number in [0, 1] and compare to e[t]
if rand() < e[t]:
# Add s[t] to y with probability e[t]
y.append(s[t])
We call this a “subsampling mechanism”, because by construction, U ≤T, and each element of y
is drawn directly from s. The ability to subsample a sequence has various applications:
• When the input sequence s is oversampled (i.e. each element st contains much the same infor-
mation as st−1), subsampling can be an effective way of shortening the sequence without dis-
carding useful information. Using a shorter sequence can facilitate the use of recurrent network
models, which have difﬁculties with long-term dependencies (Bengio et al., 1994; Hochreiter
& Schmidhuber, 1997). Simple subsampling schemes such as choosing every other element of
s have proven effective in tasks such as speech recognition (Chan et al., 2015).
• The mechanism can be used in sequence transduction tasks where the output sequence is shorter
than the input. We contrast this approach with the commonly used Connectionist Temporal
Classiﬁcation loss (Graves et al., 2006) because subsampling actually shortens the sequence
(instead of inserting blanks) and can be inserted arbitrarily into a neural network model (in-
stead of speciﬁcally being a loss function). It also implicitly produces a monotonic alignment
between elements in s and y; such alignments have proven to be useful (Bahdanau et al., 2014).
• Applying this subsampling operation multiple times could build a hierarchy of shorter and
shorter sequences which capture structure at different scales. A similar approach was recently
shown to be effective in langauge modeling tasks (Chung et al., 2016).
Motivated by these applications, in this extended abstract we present a method for training this
subsampling mechanism in expectation, i.e. without sampling. We then test this approach on a
simple toy problem and study the resulting model’s behavior. Finally, we discuss shortcomings of
our approach and possibilities for future work.
∗Work done as members of the Google Brain Residency program
1
arXiv:1702.06914v3  [cs.LG]  8 Apr 2017

Workshop track - ICLR 2017
2
TRAINING IN EXPECTATION
We are interested in including the mechanism deﬁned in the previous section in the midst of a neural
network model. However, the sampling process used to construct y precludes the use of standard
backpropagation. A common approach to this issue is to optimize the model according to the ex-
pected (or mean-ﬁeld) output (Graves, 2016; Bahdanau et al., 2014). The following analysis shows
how to employ this approach to our proposed subsampling mechanism using a dynamic program
which analytically computes p(ym = sn).
First, observe that p(y0 = s0) = e0, i.e. the probability that the ﬁrst output is the ﬁrst entry in
the sequence is just the probability of sampling at time 0. Next, in order for y0 = s1, we need
y0 ̸= s0 so p(y0 = s1) is the probability that s0 was not sampled at time 0 and that s1 was, giving
p(y0 = s1) = e1(1 −e0). Continuing on in this way, we see that p(y0 = sn) = en
Qn−1
i=0 (1 −ei)
or, in words, the probability that the ﬁrst output element y0 is a given element in the sequence sn
is the probability that none of s0, . . . , sn−1 were sampled multiplied by the probability of sampling
sn. Second, observe that p(ym = sn) = 0 when n < m because in order for the output sequence to
be of length m, at least m −1 symbols must already have been sampled. If n < m, this relation is
violated. Finally, in order for ym = sn in general, we must have that ym−1 = sj ∈s0, . . . , sn−1 (i.e.
the previous output must be one of the states before sn), none of sj+1, . . . , sn−1 may be sampled at
time m, and sn is sampled at time m. To compute p(ym = sn), we need to sum over all of the the
possible cases ym−1 ∈{s0, . . . , sn−1}. The probability of a single case is the combined probability
that sn is sampled, that ym−1 = sj, and that none of sj+1, . . . , sn−1 are sampled at time m. We
visualize these possibilities in ﬁg. 3 (appendix). Summing over the possible j yields
p(ym = sn) = en
n−1
X
j=0

p(ym−1 = sj)
n−1
Y
i=j+1
(1 −ei)


(1)
where for convenience we deﬁne the special case Qm
i=n • = 1 when n > m. Once we com-
pute p(ym = sn), it is straightforward to ﬁnd the expected value of ym simply by computing
P
n snp(ym = sn). Note p(ym = sn) = en((1−en−1)p(ym = sn−1)/en−1+p(ym−1 = sn−1)); it
follows that each term p(ym = sn) can be computed in O(1) time by reusing the already-computed
terms p(ym = sn−1) and p(ym−1 = sn−1). The resulting dynamic program allows all the terms
p(ym = sn) to be computed in O(T 2) time.
Note that P
n p(ym = sn) ≤1 depending on the values of e, so these probabilities may not form a
valid probability distribution. Computing the expectation as-is without further normalization effec-
tively associates any additional probability to an implicit zero vector in Rd, which is the convention
we will use for the remainder of this extended abstract.
3
TOY PROBLEM EXPERIMENT
To evaluate the feasibility of this approach, we tested it on the following toy problem: Consider a
length-T sequence x of symbols [0, 1, 2] which occur with equal probability. The output is produced
as follows for t ∈{0, . . . , T −1}, beginning with an empty memory:
1. If xt is 0, don’t output anything and maintain the current memory state.
2. If xt is 1 or 2 and our memory is empty, place xt in memory and don’t output anything.
3. If xt is 1 and we have 1 in our memory, output a 0 and empty the memory.
4. If xt is 2 and we have 2 in our memory, output a 0 and empty the memory.
5. If xt is 1 and we have 2 in our memory, output a 2 and empty the memory.
6. If xt is 2 and we have 1 in our memory, output a 1 and empty the memory.
We also deﬁne special cases where if T = 1, the output is x0; if xt = 0 ∀t ∈{0, . . . , T −1},
the output is 0; and if all entries of xt are 0 except one, the output is the single nonzero entry. An
example input-output pair for this toy problem is shown in ﬁg. 4 (appendix).
2

Workshop track - ICLR 2017
We utilized the following model:
st = LSTM(xt, st−1)
(2)
et = σ(W ⊤
hest−1 + W ⊤
xext−1 + be)
(3)
yt = softmax
 
W ⊤
y
T −1
X
n=0
p(yt = sn)sn + by
!
(4)
where xt ∈R3 is the one-hot encoding of the input sequence, LSTM is a long short-term memory
RNN (Hochreiter & Schmidhuber, 1997) with state dimensionality 100, Whe ∈R100×1, Wxe ∈
R3×1, be ∈R are the weight matrices and bias scalar for computing emission probabilities, σ(·) is
the logistic sigmoid function, and Wy ∈R100×3, by ∈R3 are the weight matrix and bias vector of
the output softmax function. The p(yt = sn) terms are computed as described in section 2.
We fed minibatches of 100 sequences of randomly chosen [0, 1, 2] values, encoded as one-hot vec-
tors, to the network. The network was trained with categorical cross-entropy against analytically
computed targets using Adam with the learning hyperparameters suggested in (Kingma & Ba, 2015).
We computed the network’s accuracy on a separately generated test set that it was not trained on.
As proposed in (Zaremba & Sutskever, 2014), we found it beneﬁcial to use a simple curriculum
learning (Bengio et al., 2009) strategy where the loss was only computed for the ﬁrst T ′ elements
of the output sequence, where T ′ was uniformly sampled from the values {1, 2, . . . , T} for each
minibatch.
Figure 1: p(yt = sn) for an example test sequence of length 50. The sequence is shown on the
x-axis, with dashed vertical lines denoting where we might expect the model to emit symbols.
The y-axis shows the output sequence index. For reference, the correct output for this sequence
is {0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 0}.
For all values of T we tried (up to T = 500), the network was able to achieve > 98% accuracy
on the held-out test set after training for a modest number of minibatches (around 10,000). To get
a picture of the qualitative behavior of the model, we plot the matrix p(yt = sn) for an example
test sequence with T = 50 in ﬁg. 1. Note that emissions do not occur exactly when the model has
seen sufﬁcient input to produce them, i.e. once it sees a second nonzero input. In this particular
case, this caused the model to emit one too few symbols. To facilitate further research, we provide
a TensorFlow implementation of our approach.1
While we have shown that our model can quickly learn the desired behavior on a toy problem,
we had issues applying this approach to real-world problems, which we attribute primarily to two
factors: First, while a stated goal of the subsampling mechanism is to produce shorter sequences, the
O(T 2) complexity of computing the terms p(ym = sn) precludes its practical use on problems with
large T. Second, the use of a sigmoid in eq. (4) and the cumulative product in eq. (1) can result in
vanishing gradients in practice. The ﬁrst issue could be mitigated by greedy approximations to the
procedure outlined in section 2, for example by selecting which items in st are chosen using discrete
latent variables and training with reinforcement learning methods as has been done in recent work
(Luo et al., 2016). We hope the encouraging results and analysis presented here inspires future work
on utilizing learnable subsampling mechanisms in neural networks.
1https://github.com/craffel/subsampling_in_expectation
3

Workshop track - ICLR 2017
REFERENCES
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. arXiv preprint arXiv:1409.0473, 2014.
Yoshua Bengio, Patrice Simard, and Paolo Frasconi. Learning long-term dependencies with gradient
descent is difﬁcult. IEEE Transactions on Neural Networks, 5(2):157–166, 1994.
Yoshua Bengio, J´erˆome Louradour, Ronan Collobert, and Jason Weston. Curriculum learning. In
Proceedings of the 26th International Conference on Machine Learning, pp. 41–48, 2009.
William Chan, Navdeep Jaitly, Quoc V. Le, and Oriol Vinyals. Listen, attend and spell. arXiv
preprint arXiv:1508.01211, 2015.
Junyoung Chung, Sungjin Ahn, and Yoshua Bengio. Hierarchical multiscale recurrent neural net-
works. arXiv preprint arXiv:1609.01704, 2016.
Alex Graves.
Adaptive computation time for recurrent neural networks.
arXiv preprint
arXiv:1603.08983, 2016.
Alex Graves, Santiago Fern´andez, Faustino Gomez, and J¨urgen Schmidhuber. Connectionist tem-
poral classiﬁcation: Labelling unsegmented sequence data with recurrent neural networks. In
Proceedings of the 23rd International Conference on Machine learning, pp. 369–376, 2006.
Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term memory. Neural Computation, 9(8):
1735–1780, 1997.
Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In Proceedings
of the 3rd International Conference on Learning Representations, 2015.
Yuping Luo, Chung-Cheng Chiu, Navdeep Jaitly, and Ilya Sutskever. Learning online alignments
with continuous rewards policy gradient. arXiv preprint arXiv:1608.01281, 2016.
Wojciech Zaremba and Ilya Sutskever. Learning to execute. arXiv preprint arXiv:1410.4615, 2014.
4

Workshop track - ICLR 2017
A
FIGURES
In this appendix we provide additional ﬁgures to help illustrate some of the concepts presented in
this extended abstract.
a
.1
b
.9
c
.2
d
.3
e
.1
f
.8
s
e
y
b
f
t
t
t
Figure 2: Illustration of the subsampling process described in section 1. Each element st of s is
included in the output sequence y with probability et. In this case, the second and ﬁnal elements of
s were sampled.
s0
s1
s2
s3
s4
y0
y1
y2
y3
y4
s0
s1
s2
s3
s4
y0
y1
y2
y3
y4
s0
s1
s2
s3
s4
y0
y1
y2
y3
y4
Figure 3: Possible ways that y2 = s3: either y0 = s1, y1 = s2, y2 = s3 or y0 = s0, y1 = s1, y2 = s3
or y0 = s0, y1 = s1, y2 = s3. Equation (1) sums over these possibilities to compute p(y2 = s3).
Gray and yellow nodes nodes indicate invalid and valid input-output pairings respectively.
0
0
0
0
0
0
0
0
1
2
1
1
2
1
1
1
0
2
Figure 4: Example input (bottom) and output (top) sequence for the toy problem described in sec-
tion 3. Dashed lines indicate which values in the input sequence cause each output element.
5

