Should All Temporal Difference Learning Use Emphasis?
Xiang Gu
Department of Computer Science
Shanghai Jiao Tong University
xiang7@ualberta.ca
Sina Ghiassian
Department of Computing Science
University of Alberta
ghiassia@ualberta.ca
Richard S. Sutton
Department of Computing Science
University of Alberta
rsutton@ualberta.ca
Abstract
Emphatic Temporal Difference (ETD) learning has recently been proposed as a convergent off-policy learning method.
ETD was proposed mainly to address convergence issues of conventional Temporal Difference (TD) learning under off-
policy training but it is different from conventional TD learning even under on-policy training. A simple counterexample
provided back in 2017 pointed to a potential class of problems where ETD converges but TD diverges. In this paper, we
empirically show that ETD converges on a few other well-known on-policy experiments whereas TD either diverges or
performs poorly. We also show that ETD outperforms TD on the mountain car prediction problem. Our results, together
with a similar pattern observed under off-policy training in prior works, suggest that ETD might be a good substitute
over conventional TD.
Keywords:
On-policy learning; Emphatic Temporal Difference Learning
Acknowledgements
The authors gratefully acknowledge funding from Alberta Innovates–Technology Futures, the Natural Sciences and En-
gineering Research Council of Canada, and Google DeepMind.
arXiv:1903.00194v1  [cs.AI]  1 Mar 2019

1
Possible Advantages of Learning with Emphasis
ETD was proposed by [Mahmood et al., 2015] [Sutton et al., 2016] as a stable and efﬁcient method under off-policy train-
ing, and was later proven convergent [Yu, 2015]. It utilizes the idea of emphasis – re-weighting the states by emphasizing
the update of some and de-emphasizing others – to partially correct the updates to be under the on-policy distribution.
With this restoration in the state distribution, existing results of convergence properties for the on-policy TD learning
carries through to the off-policy case and it, therefore, makes ETD a stable learning algorithm even under off-policy
training.
Surprisingly, ETD’s on-policy version is also found to be signiﬁcantly different from the conventional TD method. Yu’s
counterexample [Ghiassian et al., 2017] highlights this difference by providing a two-state on-policy problem in which
TD diverged but ETD converged to the correct solution.
A natural question to ask at this point is if on-policy ETD outperforms on-policy TD in all cases. We have seen evidences,
the successful convergence of ETD on the Baird’s counterexample ([Sutton and Barto, 2018]) as well as several other
experiments did in ([Ghiassian et al., 2017]), that suggest ETD is a better algorithm than TD in the off-policy case. We do
not know, however, whether a similar pattern carries through to the on-policy case. In this paper, we will thus focus on
the on-policy case and test the performance of both methods empirically on several problems. We hope the results could
provide empirical evidence for further investigation of ETD.
2
On-Policy Emphatic TD(λ)
Consider the classic diagram of the agent-environment interaction in RL over a sequence of discrete time steps t =
0, 1, 2, 3, . . . . At each time step t, the agent receives some representation of the environment which we call state St ∈S
and based on that the agent chooses an action At ∈A to take. The environment in return responds with a scalar
number that we call reward Rt+1 ∈R and transitions to another state St+1 ∈S. A state-dependent discounted factor
γt = γ(St) ∈[0, 1] is used. A policy π is a mapping from states-action pairs to probabilities S × A →[0, 1] and we denote
π(a|s) as the probability of selecting action a in state s. State values vπ(s) is then deﬁned as the expected cumulative future
reward if the agent starts at s and follows policy π thereafter vπ(s) = Eπ[Rt+1 + γt+1Rt+2 + γt+1γt+2Rt+3 + . . . |St = s].
We consider the situation where linear function approximation is used. In this case, states are represented as feature
vectors xt = x(St) ∈Rd and state values are approximated by a linear function approximator ˆvπ(St, w) = wT
t xt where
wt ∈Rd is the weight vector at time t. We seek to learn a weight vector w such that ˆvπ(s, w) ≈vπ(s). In fact, all actions
can be selected by an alternative policy b. If π = b, then the training is called on-policy; Otherwise, it is called off-policy.
Emphatic TD(λ) is the extension of ETD to eligibility traces – a general mechanism that enables shifting and choosing
from Monte-Carlo and TD method while maintaining the incremental update property.
We consider the on-policy
version of Emphatic TD(λ) (ρt = 1, ∀t), which is similar yet still signiﬁcantly different to the conventional TD(λ)
algorithm 1. The algorithm can be completely described as:
wt+1 = wt + α(Rt+1 + γt+1wT
t xt+1 −wT
t xt)et
(1)
et = γtλtet−1 + Mtxt, with e−1 = 0
(2)
Mt = λti(St) + (1 −λt)Ft
(3)
Ft = γtFt−1 + i(St), with F0 = i(S0)
(4)
where α > 0 is the step size parameter, et ∈Rd is the eligibility trace at time step t, λt = λ(St) ∈[0, 1] is the generalized
state-dependent decay rate at time step t, i(St) ∈[0, ∞) is the user-speciﬁed interest on state St, Mt is the emphasis of
the update for St, and Ft is an intermediate quantity (also referred to as the follow-on trace) from which we compute Mt.
In all experiments in this paper, we applied both TD(λ) and Emphatic TD(λ) with the interest for all states set to 1.
3
Performance on Several Known On-Policy TD Counterexamples
We begin our discussion on examining the performance of on-policy Emphatic TD(λ) on several known counterexamples
on which TD(λ) is shown to either diverge or have a poor performance.
The ﬁrst counterexample is the ’spiral’ counterexample introduced by [Tsitsiklis and Van Roy, 1997] where on-policy
TD(0) can diverge when a non-linear function approximator is used. Namely, consider a simple three-state Markov Re-
ward Process (MRP) in ﬁgure 1. The probability of all transitions is 0.5 and the reward is 0 on all transitions. Discounted
factor γ ∈(0, 1) is used. The task is to evaluate the state values for these three states, whose true values are (0, 0, 0)T
1When λ = 1 (no bootstrapping), this Emphatic TD(λ) algorithm becomes identical to the conventional TD(λ) algorithm.
1

2, with a non-linear function approximator ˆv(s, w) ∈R3 parameterized by w ∈R. The explicitly form of ˆv(s, w) can be
expressed as
ˆv(s, w) = eAwˆv(s, 0),
(5)
where A =
"1 + ϵ
0.5
1.5
1.5
1 + ϵ
0.5
0.5
1.5
1 + ϵ
#
and (1, 1, 1)ˆv(s, 0) = 0.
In our experiment, we chose γ = 0.9, ϵ = 0.05, and ˆv(s, 0) = (10, 10, −20)T . We applied both TD(λ) and Emphatic TD(λ)
with constant λ being 0 to the problem. The weight w was initialized to -10 in both methods. Learning rates were picked
to be such in the right panel in ﬁgure 1. The change of estimated values and weights were then plotted in ﬁgure 1.
TD
ETD
α=7.63e-6(ETD)
α=6.10e-5(TD)
Time Steps (t)
Figure 1: The MRP (left panel); Change of estimated state values (middle panel) and weights (right panel).
One can see that the TD(0) method increases the parameter and the corresponding estimated state values spirals outward,
whereas on-policy Emphatic TD(0) method drives the weights down and the estimated state values therefore spirals
inward to the true state values (0, 0, 0)T , which is achieved when w goes down to negative inﬁnity.
The second counterexample is from [Bertsekas, 1995] where on-policy TD(λ) is shown to become progressively poor as
λ switches from 1 to 0. As shown in ﬁgure 2, consider a MRP with n states. Each state s ∈{1, 2, 3, ..., n} deterministically
transitions to the previous state s−1 with reward rs. The episode always starts at state n and terminates after transitioning
to state 0 (the terminal state). A linear function approximaor ˆv(s, w) = ws is used to approximate the state values (w ∈R).
We experimented TD(λ) and Emphatic TD(λ) with two constant λ’s (0 and 1) on two cases of the problem:
case 1: n = 50, rn = −(n −1) and rs = 1, ∀s ̸= n
case 2: n = 50, r1 = 1 and rs = 0, ∀s ̸= 1
We then ran the algorithms until both methods converged and plotted the learned state values in ﬁgure 2.
Figure 2: The MRP (left panel); Learned state values in case 1 (middle panel) and case 2 (right panel). The learning rates
are omitted because you can reproduce the same results as long as your learning rate is sufﬁciently small.
In both cases, on-policy ETD(0) has a better performance than TD(0). In case one, the performance of TD(λ) progressively
degenerates when λ switches from 1 to 0. In this designed case, the weight w that TD(0) ﬁnds is almost an negation of
that of TD(1). The on-policy ETD(0), however, does not experience this deterioration. It ﬁnds reasonably good solutions
for both λ’s. In case two, ETD(0) also ﬁnds a better asymptotic solution than TD(0), albeit it is not very satisfactory either.
The ﬁnal counterexample from [Ghiassian et al., 2017] involves learning with variable λ’s. Consider a two-state MRP as
shown in the left panel of ﬁgure 3. One state deterministically transitions to the other with zero reward. This continuing
task starts at one of the two states with equal probability. A linear function approximator ˆv(s, w) = wT x(s) is used where
2In this paper, (x, y, z) represents a length-three row vector and thus (x, y, z)T represents a length-three column vector.
2

x(s1) = (3, 1)T and x(s2) = (1, 1)T . This special counterexample has state-dependent decay rate λ(s1) = 0, λ(s2) = 1
with a constant discounted factor γ = 0.95. Obviously, true state values (0, 0)T is achieved when w = (0, 0)T .
Again, we applied both TD(λ) and Emphatic TD(λ) to this problem. Our experiment initialized w to w0 = (104, 104)T .
We set the learning rate to be such indicated in the right panel of ﬁgure 3. We plotted the change of the estimated state
values and weights in 3.
Time Steps (t)
Time Steps (t)
TD
ETD
α=9.77e-4(TD)
α=9.77e-4(ETD)
Figure 3: The MRP (left panel); Change of estimated state values (middle panel) and weights (right panel).
We can see that TD(λ) in this counterexample diverges both in the weights and the estimated values. ETD(λ), however,
pushes the weights towards zero and the estimated values converge to the true values (0, 0)T accordingly.
4
Prediction: Fixed Policy Evaluation on Mountain Car
In this section, we test our algorithms on a classic RL prediction problem – a variation of Mountain Car problem intro-
duced in [Sutton and Barto, 2018]. The state consists of two variables – position xt and velocity ˙xt. At each state, there
are three actions – full throttle forward (+1), full throttle reverse (-1) and zero throttle (0). The car moves according to a
simpliﬁed physics with a forced bound: −1.2 ≤xt+1 ≤0.5 and −0.07 ≤˙xt+1 ≤0.07. In addition, when xt+1 goes below
the left bound, it stays at -1.2 but ˙xt+1 is reset to zero; When xt+1 reaches the right bound, the goal is reached and the
episode is terminated. The reward is -1 on all time steps before reaching the goal. Each episode starts from a random
position x0 ∈[−0.6, −0.4] and zero velocity.
In our experiment, we evaluated a simple yet very effective policy π that always selects the action that is in the same
direction of the velocity At = sign( ˙xt). We recorded the estimated root-mean-square error (RMSE) at each episode as the
performance measure, which reﬂects the quality of our function approximator by computing the squared error between
the estimated state values and the true state values, weighted according to how often each state is visited by following π:
q
d
V E(w) =
s
1
|S|
X
s∈S
i(s)(vπ(s, w) −vπ(s))2 =
s
1
|S|
X
s∈S
(vπ(s, w) −vπ(s))2,
(6)
where S contained 500 states gathered by simulating π for 10,000,000 steps and randomly choosing 500 states from the
last 5,000,000. We discarded the ﬁrst half of the steps because the on-policy state distribution in episodic tasks is achieved
in the limit and it might be different in the early stage of the simulation due to the randomness of the starting position.
The true state values vπ(s) were then computed and recorded by simulating π from those 500 states individually till the
termination of the episode.
We tested our algorithms on this environment with three different λ’s – 0.0, 0.4, and 0.9. For each λ, we tested on a wide
range of different step size α’s. For each λ and α combination, we repeated the experiment for 30 trials to average out
the randomness where each trial lasted for 50,000 episodes.
After getting all the data, we chose to visualize them using the Area Under the Curve (AUC) criterion: For each trial, we
averaged over the 50,000 estimated RMSEs recorded in this trial to compute the mean RMSEs across all episodes in this
trial; We then repeated the same process for all the 30 different trials, all of which are of the same parameter setting, and
ended up with 30 mean RMSEs. Finally, we averaged over these 30 mean RMSEs to compute the ﬁnal estimated RMSE
under its corresponding method and parameters. At the same time, we also computed the standard deviation of those
30 mean RMSEs as the standard error of the ﬁnal estimated RMSE. Results are shown in ﬁgure 4.
We can see that Emphatic TD(λ) ﬁnds a ﬁxed point w that has better asymptotic performance as well as faster learning
rate when λ = 0.0. As λ goes up toward 1, the performance gap begins to decrease and both methods start to converge
to the same performance when λ reaches 1. One interesting observation is the ’bump’ of the TD(0) method – the function
approximator once learned a better weights but then it gradually degenerated and converged to a weights that is worse
– when λ = 0. This bump gradually disappears as λ increases toward 1. Emphatic TD(λ) did not experience this bounce.
Instead, it updates the weights so that the performance measure monotonically decreases. We do not know why this
occurs to TD(λ) method at the moment and a better understanding of the algorithm is required to explain it.
3

λ=0.0
λ=0.4
λ=0.9
λ=0.0
λ=0.4
λ=0.9
α=1.22e-4(ETD)
α=9.77e-4(TD)
α=3.91e-3(TD)
α=1.22e-4(ETD)
α=1.22e-4(ETD)
α=9.77e-4(TD)
TD
ETD
ETD
TD
ETD
TD
Figure 4: Results of Mountain Car prediction. The ﬁrst three ﬁgures are the comparison of the best learning curve under
three different λ’s using AUC criterion. I.e., the learning curve with the step size that gives the lowest estimated RMSE
among all tested step sizes under the same λ. The rest three ﬁgures represent the comparison of TD(λ) and ETD(λ)
methods for all tested step sizes under the same λ. Standard error are also shown at error bars but they are invisible due
to their small sizes.
5
Conclusion and Future Work
In the paper, we ﬁrst showed the on-policy Emphatic TD(λ) algorithm performs well on several known counterexamples
compared to the TD(λ) algorithm. In particular, the result on the Tsitsiklis and Von Roy’s counterexample is encouraging.
It opens the possibility of further investigating on on-policy Emphatic TD(λ) methods with non-linear function approxi-
mator, and one conjuncture can therefore be proposed that on-policy Emphatic TD(λ) methods are convergent with any
non-linear function approximator.
For the prediction experiment we did on Mountain Car environment, Emphatic TD(λ) also gives better asymptotic per-
formance as well as learning speed. We also tried to extend this to control problem by extending equation 1 to action
values and utilizing the generalized policy iteration (GPI) framework. The results, however, have several potential is-
sues and the there is so far no insight we can gain from the control experiment, so we will reserve our judgement on the
control case.
This experiment and the results on the Bertsekas’s counterexample, together with several other results in [Ghiassian et al.,
2017] and [Ghiassian et al., 2018], showed a consistent pattern of favoring Emphatic TD(λ) over conventional TD(λ) in
the on-policy case. We did not strive to ﬁnd a counterexample to challenge it. Nevertheless, they are strong suggestive
evidence for another conjecture that Emphatic TD(λ) ﬁnds a better ﬁxed point asymptotically as well as faster learning
speed, which is also our ﬁrst attempt to answer the question introduced in the ﬁrst section.
An interesting future work direction is to vary interest for different states as described in the original ETD paper. For all
of our experiments, we used uniform interests on all the states (i.e., i(s) = 1, ∀s). In fact, the introduction of interest in
ETD methods offers an additional degree of freedom to specify the ’importance’ of each state, rather than relying on the
state visitation frequency as a sole weighting. There are conceivable scenarios where one wants to evaluate states that
are less often visited more accurately.
References
A Rupam Mahmood, Huizhen Yu, Martha White, and Richard S Sutton. Emphatic temporal-difference learning. arXiv
preprint arXiv:1507.01569, 2015.
Richard S Sutton, A Rupam Mahmood, and Martha White. An emphatic approach to the problem of off-policy temporal-
difference learning. The Journal of Machine Learning Research, 17(1):2603–2631, 2016.
Huizhen Yu. On convergence of emphatic temporal-difference learning. In Conference on Learning Theory, pages 1724–
1751, 2015.
Sina Ghiassian, Banafsheh Raﬁee, and Richard S Sutton. A ﬁrst empirical study of emphatic temporal difference learning.
arXiv preprint arXiv:1705.04185, 2017.
Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. MIT press, 2018.
John N Tsitsiklis and Benjamin Van Roy. An analysis of temporal-difference learning with function approximation. IEEE
TRANSACTIONS ON AUTOMATIC CONTROL, 42(5), 1997.
Dimitri P Bertsekas. A counterexample to temporal differences learning. Neural computation, 7(2):270–279, 1995.
Sina Ghiassian, Andrew Patterson, Martha White, Richard S Sutton, and Adam White. Online off-policy prediction.
arXiv preprint arXiv:1811.02597, 2018.
4

