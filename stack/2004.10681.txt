Pseudo RGB-D for Self-Improving Monocular
SLAM and Depth Prediction
Lokender Tiwari1, Pan Ji2, Quoc-Huy Tran2, Bingbing Zhuang2, Saket Anand1,
and Manmohan Chandraker2,3
1IIIT-Delhi
2NEC Laboratories America, Inc.
3University of California, San Diego
Abstract. Classical monocular Simultaneous Localization And Mapping
(SLAM) and the recently emerging convolutional neural networks (CNNs)
for monocular depth prediction represent two largely disjoint approaches
towards building a 3D map of the surrounding environment. In this paper,
we demonstrate that the coupling of these two by leveraging the strengths
of each mitigates the others shortcomings. Speciﬁcally, we propose a
joint narrow and wide baseline based self-improving framework, where on
the one hand the CNN-predicted depth is leveraged to perform pseudo
RGB-D feature-based SLAM, leading to better accuracy and robustness
than the monocular RGB SLAM baseline. On the other hand, the bundle-
adjusted 3D scene structures and camera poses from the more principled
geometric SLAM are injected back into the depth network through novel
wide baseline losses proposed for improving the depth prediction network,
which then continues to contribute towards better pose and 3D structure
estimation in the next iteration. We emphasize that our framework only
requires
unlabeled monocular videos in both training and inference
stages, and yet is able to outperform state-of-the-art self-supervised
monocular and stereo depth prediction networks (e.g., Monodepth2) and
feature-based monocular SLAM system (i.e., ORB-SLAM). Extensive
experiments on KITTI and TUM RGB-D datasets verify the superiority
of our self-improving geometry-CNN framework.
Keywords: self-supervised learning, self-improving, single-view depth
prediction, monocular SLAM
1
Introduction
One of the most reliable cues towards 3D perception from a monocular camera
arises from camera motion that induces multiple-view geometric constraints [22]
wherein the 3D scene structure is encoded. Over the years, Simultaneous Local-
ization And Mapping (SLAM) [6,23,35] has been long studied to simultaneously
recover the 3D scene structure of the surrounding and estimate the ego-motion
of the agent. With the advent of Convolutional Neural Networks (CNNs), un-
supervised learning of single-view depth estimation [15,19,62] has emerged as a
promising alternative to the traditional geometric approaches. Such methods rely
on CNNs to extract meaningful depth cues (e.g., shading, texture, and semantics)
from a single image, yielding very promising results.
arXiv:2004.10681v3  [cs.CV]  7 Aug 2020

2
L. Tiwari et al.
Despite the general maturity of monocular geometric SLAM [10,33,9] and the
rapid advances in unsupervised monocular depth prediction approaches [32] [47]
[59] [2] [18] [40], they both still have their own limitations.
Monocular SLAM. Traditional monocular SLAM has well-known limitations
in robustness and accuracy as compared to those leveraging active depth sensors,
e.g., RGB-D SLAM [34]. This performance issue is due to the inherent scale
ambiguity of depth recovery from monocular cameras, which causes the so-called
scale drift in both the camera trajectory and 3D scene depth, and thus lowers
robustness and accuracy of conventional monocular SLAM. In addition, the
triangulation-based depth estimation employed by traditional SLAM methods is
degenerate under pure rotational camera motion [22].
Unsupervised Monocular Depth Prediction. Most of the unsupervised and
self-supervised methods [62,19,18,2] formulate single image depth estimation as
a novel-view synthesis problem, with appearance based photometric losses being
central to the training strategy. Usually, these models train two networks, one
each for pose and depth. As photometric losses largely rely on the brightness
consistency assumption, nearly all existing self-supervised approaches operate in a
narrow-baseline setting optimizing the loss over a snippet of 2-5 consecutive frames.
Consequently, models like MondoDepth2 [18], work very well for close range
points, but generate inaccurate depth estimates for points that are farther away
(e.g., see 0th iteration in Fig. 6). While it is well known that a wide-baseline yields
better depth estimates for points at larger depth, a straightforward extension
of existing CNN based approaches is inadequate for the following two reasons.
A wide baseline in a video sequence implies a larger temporal window, which
in most practical scenarios will violate the brightness consistency assumption,
rendering the photometric loss ineﬀective. Secondly, larger temporal windows
(wider baselines) would also imply more occluded regions that behave as outliers.
Unless these aspects are eﬀectively handled, training of CNN based depth and
pose networks in the wide baseline setting will lead to inaccuracies and biases.
In view of the limitations in both monocular geometric SLAM and unsuper-
vised monocular depth estimation approaches, a particularly interesting question
to ask is whether these two approaches can complement each other (see Sec. 5)
and mitigate the issues discussed above. Our work makes contributions towards
answering this question. Speciﬁcally, we propose a self-supervised, self-improving
framework of these two tasks, which is shown to improve the robustness and
accuracy on each of them.
While the performance gap between geometric SLAM and self-supervised
learning-based SLAM methods is still large, incorporating depth information
drastically improves the robustness of geometric SLAM methods (e.g., see RGB-D
SLAM vs. RGB SLAM on the KITTI Odometry leaderboard [16]). Inspired by
this success of RGB-D SLAM, we postulate the use of an unsupervised CNN-
based depth estimation model as a pseudo depth sensor, which allows us to design
our self-supervised approach, pseudo RGB-D SLAM (pRGBD-SLAM) that only
uses monocular cameras and yet achieves signiﬁcant improvements in robustness
and accuracy as compared to RGB SLAM.

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
3
Fig. 1. MonoDepth2 [18] pose network camera poses vs. pseudo RGBD-SLAM camera
poses where depth(D) is from CNN. The pose network from [18] leads to signiﬁcant
drift.
Our fusion of geometric SLAM and CNN-based monocular depth estimation
turns out to be symbiotic and this complementary nature sets the basis of our
self-improving framework. To improve the depth predictions, we make use of
two main modiﬁcations in the training strategy. First, we eschew the learning
based pose estimates in favor of geometric SLAM based estimates (an illustrative
motivation is shown in Fig. 1). Second, we make use of common tracked keypoints
from neighboring keyframes and impose a symmetric depth transfer and a
depth consistency loss on the CNN model. These adaptations are based on the
observation that both pose estimates and sparse 3D feature point estimates
from geometric SLAM are robust, as most techniques typically apply multiple
bundle adjustment iterations over wide baseline depth estimates of common
keypoints. This simple observation and the subsequent modiﬁcation is key to
our self-improving framework, which can leverage any unsupervised CNN-based
depth estimation model and a modern monocular SLAM method. In this paper,
we test our framework, with ORBSLAM [34] as the geometric SLAM method
and MonoDepth2 [18] as the CNN-based model. We show that our self-improving
framework outperforms previously proposed self-supervised approaches that
utilizes monocular, stereo, and monocular-plus-stereo cues for self-supervision
(see Tab. 1) and a strong feature based RGB-SLAM baseline (see Tab. 3). The
framework runs in a simple alternating update fashion: ﬁrst, we use depth maps
from the CNN-based depth network and run pRGBD-SLAM; second, we inject the
outputs of pRGBD-SLAM, i.e., the relative camera poses and common tracked
keypoints and keyframes to ﬁne-tune the depth network parameters to improve
the depth prediction; then, we repeat the process until we see no improvement.
Our speciﬁc contributions are summarized here:
– We propose a self-improving strategy to inject into depth prediction net-
works the supervision from SLAM outputs, which stem from more generally
applicable geometric principles.
– We introduce two wide baseline losses, i.e., the symmetric depth transfer loss
and the depth consistency loss on common tracked points, and propose a joint

4
L. Tiwari et al.
narrow and wide baseline based depth prediction learning setup, where ap-
pearance based losses are computed on narrow baselines and purely geometric
losses on wide baselines (non-consecutive temporally distant keyframes).
– Through extensive experiments on KITTI [16] and TUM RGB-D [42], our
framework is shown to outperform both monocular SLAM system (i.e.,
ORB-SLAM [33]) and the state-of-the-art unsupervised single-view depth
prediction network (i.e., Monodepth2 [18]).
2
Related Work
Monocular SLAM. Visual SLAM has a long history of research in the computer
vision community. Due to its well-understood underlying geometry, various
geometric approaches have been proposed in the literature, ranging from the
classical MonoSLAM [6], PTAM [23], DTAM [35] to the more recent LSD-
SLAM [10], ORB-SLAM [33] and DSO [9]. More recently, in view of the successful
application of deep learning in a wide variety of areas, researchers have also
started to exploit deep learning approaches for SLAM, in the hope that it can
improve certain components of geometric approaches or even serve as a complete
alternative. Our work makes further contributions along this line of research.
Monocular Depth Prediction. Inspired by the pioneering work by Eigen
et al. [8] on learning single-view depth estimation, a vast amount of learning
methods [3,28,13] emerge along this line of research. The earlier works often
require ground truth depths for fully-supervised training. However, per-pixel depth
ground truth is generally hard or prohibitively costly to obtain. Therefore, many
self-supervised methods that make use of geometric constraints as supervision
signals are proposed. Godard et al. [19], relies on the photo-consistency between
the left-right cameras of a calibrated stereo. Zhou et al. [62] learn monocular depth
prediction as well as ego-motion estimation, thereby permitting unsupervised
learning with only a monocular camera. This pipeline has inspired a large
amount of follow-up works that utilize various additional heuristics, including
3D geometric constraints on point clouds [32], direct visual odometry [47], joint
learning with optical ﬂow [59], scale consistency [2], and others [18,40,5,65].
Using Depth to Improve Monocular SLAM. Approaches [43,58,55,29] lever-
aging CNN-based depth estimates to tackle issues in monocular SLAM have
been proposed. CNN-SLAM [43] uses learned depth maps to initialize keyframes’
depth maps in LSD-SLAM [10] and reﬁnes them via a ﬁltering framework. Yin et
al. [58] use a combination of CNNs and conditional random ﬁelds to recover scale
from the depth predictions and iteratively reﬁne ego-motion and depth estimates.
DVSO [55] trains a single CNN to predict both the left and right disparity maps,
forming a virtual stereo pair. The CNN is trained with photo-consistency between
stereo images and consistency with depths estimated by Stereo DSO [49]. More
recently, CNN-SVO [29] uses depths learned from stereo images to initialize
depths of keypoints and reduce their corresponding uncertainties in SVO [11].
In contrast to our self-supervised approach, [43,58] use ground truth depths for
training depth networks while [55,29] need stereo images.

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
5
Fig. 2. Overview of Our Self-Improving Framework. It alternates between pose
reﬁnement (blue arrows; Sec. 3.1) and depth reﬁnement (red arrows; Sec. 3.2).
Using SLAM to Improve Monocular Depth Prediction. Depth estimates
from geometric SLAM have been leveraged for training monocular depth es-
timation networks in recent works [24,1]. In [1], sparse depth maps by Stereo
ORB-SLAM [34] are ﬁrst converted into dense ones via an auto-encoder, which
are then integrated into geometric constraints for training the depth network. [24]
employ depths and poses by ORB-SLAM [33] as supervision signals for training
the depth and pose networks respectively. This approach only considers ﬁve
consecutive frames, thus restricting its operation in the narrow-baseline setting.
3
Method: A Self-Improving Framework
Our self-improving framework leverages the strengths of each, the unsupervised
single-image depth estimation and the geometric SLAM approaches, to mitigate
the other’s shortcomings. On one hand, the depth network typically generates
reliable depth estimates for nearby points, which assist in improving the geometric
SLAM estimates of poses and sparse 3D points (Sec. 3.1). On the other hand,
geometric SLAM methods rely on a more holistic view of the scene to generate
robust pose estimates as well as identify persistent 3D points that are visible
across many frames, thus providing an opportunity to perform wide-baseline and
reliable sparse depth estimation. Our framework leverages these sparse, but robust
estimates to improve the noisier depth estimates of the farther scene points by
minimizing a blend of the symmetric transfer and depth consistency losses (Sec.
3.2) and the commonly used appearance based loss. In the following iteration,
this improved depth estimate further enhances the capability of geometric SLAM
and the cycle continues until the improvements become negligible. Even in the
absence of ground truth, our self-improving framework continues to produce
better pose and depth estimates.
An overview of the proposed self-improving framework is shown in in Fig. 2,
which iterates between improving poses and improving depths. Our pose reﬁne-
ment and depth reﬁnement steps are then detailed in Sec. 3.1 and 3.2 respectively.
An overview of narrow and wide baseline losses we use for improving the depth
network is shown in Fig. 3 and details are provided in Sec. 3.2.

6
L. Tiwari et al.
3.1
Pose Reﬁnement
Pseudo RGB-D for Improving Monocular SLAM. We employ a well
explored and widely used geometry-based SLAM system, i.e., the RGB-D version
of ORB-SLAM [34], to process the pseudo RGB-D data, yielding camera poses
as well as 3D map points and the associated 2D keypoints. Any other geometric
SLAM system that provides these output estimates can also be used in place of
ORB-SLAM. A trivial direct use of pseudo RGB-D data to run RGB-D ORB-
SLAM is not possible, because CNN might predict depth at a very diﬀerent scale
compared to depth measurements from real active sensors, e.g., LiDAR. Keeping
the above diﬀerence in mind, we discuss an important adaptation in order for
RGB-D ORB-SLAM to work well in our setting. We ﬁrst note that RGB-D
ORB-SLAM transforms the depth data into disparity on a virtual stereo to reuse
the framework of stereo ORB-SLAM. Speciﬁcally, considering a keypoint with 2D
coordinates (ul, vl) (i.e., ul and vl denote the horizontal and vertical coordinates
respectively) and a CNN-predicted depth dl, the corresponding 2D keypoint
coordinates (ur, vr) on the virtual rectiﬁed right view are ur = ul −fxb
dl ,
vr = vl,
where fx is the horizontal focal length and b is the virtual stereo baseline.
Adaptation. In order to have a reasonable range of disparity, we mimic the setup
of the KITTI dataset [16] by making the baseline adaptive, b = bKITTI
dKITTI
max
∗dmax,
where dmax represents the maximum CNN-predicted depth of the input sequence,
and bKITTI = 0.54 and dKITTI
max
= 80 (both in meters) are respectively the actual
stereo baseline and empirical maximum depth value of the KITTI dataset.
We also summarize the overall pipeline of RGB-D ORB-SLAM here. The 3D
map is initialized at the very ﬁrst frame of the sequence due to the availability of
depth. After that, the following main tasks are performed: i) track the camera by
matching 2D keypoints against the local map, ii) enhance the local map via local
bundle adjustment, and iii) detect and close loops for pose-graph optimization
and full bundle adjustment to improve camera poses and scene depths. As we
will show in Sec. 4.4, using pseudo RGB-D data leads to better robustness and
accuracy as compared to using only RGB data.
3.2
Depth Reﬁnement
We start from the pre-trained depth network of Monodepth2 [18], a state-of-the-
art monocular depth estimation network, and ﬁne-tune its network parameters
with the camera poses, 3D map points and the associated 2D keypoints produced
by the above pseudo RGB-D ORB-SLAM (pRGBD-SLAM). In contrast to
Monodepth2, which relies only on the narrow baseline photometric reconstruction
loss between adjacent frames for short-term consistencies, we propose wide
baseline symmetric depth transfer and sparse depth consistency losses to introduce
long-term consistencies. Our ﬁnal loss (Eq. (4)) consists of both narrow and wide
baseline losses. The narrow baseline losses, i.e., photometric and smoothness
losses, involve the current keyframe Ic and its temporally adjacent frames Ic-1 and
Ic+1, while wide baseline losses are computed on the current keyframe Ic and the
two neighboring keyframes Ik1 and Ik2 that are temporally farther than Ic-1 and

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
7
Fig. 3. Narrow and Wide Baseline Losses. Narrow baseline photometric and
smoothness losses involve keyframe Ic and temporally adjacent frames Ic-1 and Ic+1,
and wide baseline symmetric depth transfer and depth consistency losses involve
keyframe Ic and temporally farther keyframes Ik1 and Ik2. Refer to the text below for
details.
Ic+1 (see Fig. 3). Next, we introduce the notation and describe the losses in
detail.
Notation. Let X represent the set of common tracked keypoints visible in all
the three keyframes Ik1, Ic and Ik2 obtained from pRGBD-SLAM. Note that
k1 and k2 are two neighboring keyframes of the current frame c (i.e., k1 <
c < k2) in which keypoints are visible. Let pi
k1= [pi1
k1, pi2
k1], pi
c= [pi1
c , pi2
c ] and
pi
k2= [pi1
k2, pi2
k2] be the 2D coordinates of the ith common tracked keypoint in the
keyframes Ik1, Ic and Ik2 respectively, and the associated depth values obtained
from pRGBD-SLAM are represented by di
k1(SLAM), di
c(SLAM), and di
k2(SLAM) re-
spectively. The depth values corresponding to the keypoints pi
k1, pi
c and pi
k2 can
also be obtained from the depth network and are represented by di
k1(w), di
c(w),
and di
k2(w) respectively, where w stands for the depth network parameters.
Symmetric Depth Transfer Loss. Given the camera intrinsic matrix K, and
the depth value di
c(w) of the ith keypoint pi
c, the 2D coordinates of the key-
point pi
c can be back-projected to its corresponding 3D coordinates as: Xi
c(w)=
K−1[pi
c, 1]T di
c(w). Let T
SLAM
c→k1
represent the relative camera pose of frame
k1 w.r.t. frame c obtained from pRGBD-SLAM. Using T
SLAM
c→k1, we can trans-
fer the 3D point Xi
c(w) from frame c to k1 as: Xi
c→k1(w) = T
SLAM
c→k1 Xi
c(w)=
[xi
c→k1(w), yi
c→k1(w), di
c→k1(w)]T . Here, di
c→k1(w) is the transferred depth of
the ith keypoint from frame c to frame k1. Following the above procedure, we can
obtain the transferred depth di
k1→c(w) of the same ith keypoint from frame k1
to frame c. The symmetric depth transfer loss of the keypoint pi
c between frame
pair c and k1, is the sum of absolute errors (ℓ1 distance) between the transferred
network-predicted depth di
c→k1(w) and the existing network-predicted depth
di
k1(w) in the target keyframe k1, and vice-versa. Mathematically, it can be
written as:
T i
c↔k1(w)=|di
c→k1(w)−di
k1(w)|+|di
k1→c(w)−di
c(w)|.
(1)
Similarly, we can compute the symmetric depth transfer loss of the same ith
keypoint between frame pair c and k2, i.e., T i
c↔k2(w), and between k1 and k2,
i.e., T i
k1↔k2(w). We accumulate the total symmetric transfer loss between frame
c and k1 in Tc↔k1, which is the loss of all the common tracked keypoints and the
points within the patch of size 5 × 5 centered at the common tracked keypoints.

8
L. Tiwari et al.
Similarly, we compute the total symmetric depth transfer loss Tc↔k2 and Tk1↔k2
between frame pair (c, k2), and (k1, k2) respectively.
Depth Consistency Loss. The role of the depth consistency loss is to make
depth network’s prediction consistent with the reﬁned depth values obtained from
the pRGBD-SLAM. Note that depth values from pRGBD-SLAM undergo multiple
optimization over wide baselines, hence are more accurate and capture long-term
consistencies. We inject these long-term consistent depths from pRGBD-SLAM
to depth network through the depth consistency loss. The loss for the frame c
can be written as follows:
Dc =
P
i∈X |di
c(w) −di
c(SLAM)|
|X|
.
(2)
Photometric Reconstruction Loss. Denote the relative camera pose of frame
Ic-1 and Ic+1 w.r.t. current keyframe Ic obtained from pRGBD-SLAM by
T
SLAM
c-1→c and T
SLAM
c+1→c respectively. Using frame Ic+1, T
SLAM
c+1→c, network-predicted
depth map dc(w) of the keyframe Ic, and the camera intrinsic K, we can syn-
thesize the current frame Ic [18,19]. Let the synthesized frame be represented
in the functional form as: Ic+1→c(dc(w), T
SLAM
c+1→c, K). Similarly we can synthe-
size Ic-1→c(dc(w), T
SLAM
c-1→c, K) using frame Ic-1. The photometric reconstruction
error between the synthesized and the original current frame [15,19,62] is then
computed as:
Pc = pe(Ic+1→c(dc(w), T
SLAM
c+1→c, K), Ic)+pe(Ic-1→c(dc(w), T
SLAM
c-1→c, K), Ic), (3)
where we follow [19,18] to construct the photometric reconstruction error function
pe(·, ·). Additionally, we adopt the more robust per-pixel minimum error, multi-
scale strategy, auto-masking, and depth smoothness loss Sc from [18].
Our ﬁnal loss for ﬁne-tuning the depth network at the depth reﬁnement
step is the weighted sum of narrow baseline losses (i.e., photometric (Pc) and
smoothness loss (Sc)), and wide baseline losses (i.e., symmetric depth transfer
(Tc↔k1, Tc↔k2, Tk1↔k2) and depth consistency loss (Dc)):
L = αPc + βSc + γDc + µ(Tc↔k1 + Tc↔k2 + Tk1↔k2).
(4)
4
Experiments
We conduct experiments to evaluate depth reﬁnement and pose reﬁnement steps
of our self-improving framework with the state-of-the-arts in self-supervised depth
estimation and RGB-SLAM based pose estimation respectively.
4.1
Datasets and Evaluation Metrics
KITTI Dataset. Our experiments are mostly performed on the KITTI dataset [16],
which contains outdoor driving sequences for road scene understanding [41,7]. We
further split KITTI experiments into two parts: one focused on depth reﬁnement

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
9
evaluation and the other on pose reﬁnement. For depth reﬁnement evaluation we
train/ﬁne-tune the depth network using the Eigen train split [8] which contains
28 training sequences and evaluate depth prediction on the Eigen test split [8]
following the baselines [62,57,32,59,47,66,56,38,30,4]. For pose reﬁnement evalu-
ation, we train/ﬁne-tune the depth network using KITTI odometry sequences
00-08 and test on sequences 09-10 and 11-21. Note, for evaluation on sequences
09-10 we use the ground-truth trajectories provided by [16], while for evaluation
on sequences 11-21, since the ground-truth is not available we use the pseudo
ground-truth trajectories obtained by running stereo version of ORB-SLAM on
these sequences.
TUM RGB-D Dataset. For completeness and to demonstrate the capability of
our self-improving framework on indoor scenes, we evaluate on the TUM RGB-D
dataset [42], which consists of indoor sequences captained by a hand-held camera.
We choose freiburg3 sequences because only they have undistorted RGB images
and ground truth available to train/ﬁne-tune and evaluate respectively. We use 6
of 8 freiburg3 sequences for training/ﬁne-tune and the remaining 2 for evaluation.
Metrics for Pose Evaluation. For quantitative pose evaluation, we compute
the Root Mean Square Error (RMSE), Relative Translation (Rel Tr) error, and
Relative Rotation (Rel Rot) error of the predicted camera trajectory. Since
monocular SLAM systems can only recover camera poses up to a global scale,
we align the camera trajectory estimated by each method with the ground truth
one using the EVO toolbox [20]. We then use the oﬃcial evaluation code from
the KITTI Odometry benchmark to compute the Rel Tr and Rel Rot errors for
all sub-trajectories with length in {100, . . . , 800} meters.
Metrics for Depth Evaluation. For quantitative depth evaluation, we use
the standard metrics, including the Absolute Relative (Abs Rel) error, Squared
Relative (Sq Rel) error, RMSE, RMSE log, δ < 1.25 (namely a1), δ < 1.252
(namely a2), and δ < 1.253 (namely a3) as deﬁned in [8]. Again, since the
depths from monocular images can only be estimated up to scale, we align the
predicted depth map with the ground truth one using their median depth values.
Following [8] and other baselines, we also clip the depths to 80 meters.
Note. In all tables, best performances are in bold and second bests are underlined.
4.2
Implementation Details
We implement our framework based on Monodepth2 [18] and ORB-SLAM [34],
i.e., we use the depth network of Monodepth2 and the RGB-D version of ORB-
SLAM for depth reﬁnement and pose reﬁnement respectively. We would like to
emphasize, that our self-improving strategy is not speciﬁc to MonoDepth2 or
ORB-SLAM. Any other depth network that allows to incorporate SLAM outputs
and any SLAM system that can provide the desired SLAM outputs can be put
into the self-improving framework. We set the weight of the smoothness loss
term of the ﬁnal loss (Eq. (4)) β = 0.001 similar as in [18] and α,γ, and µ to 1.
The ablation study results on disabling diﬀerent loss terms can be found in Tab.
6. A single self-improving loop takes 0.6 hour on a NVIDIA TITAN Xp 8GB GPU.

10
L. Tiwari et al.
KITTI Eigen Split/Odometry Experiments. We pre-train MonoDepth2
using monocular videos of the KITTI Eigen split training set with the hyper-
parameters as suggested in MonoDepth2 [18]. We use an input/output resolution
of 640 × 192 for training/ﬁne-tuning and scale it up to the original resolution
while running pRGBD-SLAM. We use same hyperparameters as for KITTI Eigen
split to train/ﬁne-tune the depth model on KITTI Odometry train sequences
mentioned in Sec. 4.1. During a self-improving loop, we discard pose network of
MonoDepth2 and instead use camera poses from pRGBD-SLAM.
Outlier Removal. Before running a depth reﬁnement step, we run an outlier
removal step on the SLAM outputs. Speciﬁcally, we ﬁlter out outlier 3D map
points and the associated 2D keypoints that satisfy at least one of the following
conditions: i) it is observed in less than 3 keyframes, ii) its reprojection error in
the current keyframe Ic is larger than 3 pixels.
Camera Intrinsics. Monodepth2 computes the average camera intrinsics for the
KITTI dataset and uses it for the training. However, for our ﬁne-tuning of the
depth network, using the average camera intrinsics leads to inferior performance,
because we use the camera poses from pRGBD-SLAM, which runs with diﬀerent
camera intrinsics. Therefore, we use diﬀerent camera intrinsics for diﬀerent se-
quences when ﬁne-tuning the depth network.
For ﬁne-tuning the depth network pre-trained on KITTI Eigen split training
sequences, we run pRGBD-SLAM on all the training sequences, and extract
camera poses, 2D keypoints and the associated depths from keyframes. For
pRGBD-SLAM(RGB-D ORB-SLAM), we use the default setting of ORB-SLAM,
except for the adjusted b described in Sec. 3.1. The same above procedure is
followed for depth model pre-trained on KITTI Odometry training sequences.
The average number of keyframes used in a self-improving loop is ∼9K and
∼10K for KITTI Eigen split and KITTI Odometry experiments respectively.
At each depth reﬁnement step, we ﬁne-tune the depth network parameters with
1 epoch only, using learning rate 1e-6, keeping all the other hyperparameters
the same as pre-training. For both KITTI Eigen split and KITTI Odometry
experiments we report results after 5 self-improving loops.
TUM RGB-D Experiments. For TUM RGB-D, we pre-train/ﬁne-tune the
depth network on 6 freiburg3 sequences, and test on 2 freiburg3 sequences. The
average number of keyframes in a self-improving loop is ∼3.5K. We use an
input/output resolution of 480 × 320 for pre-training/ﬁne-tuning and scale it up
to the original resolution while running pRGBD-SLAM. We report results after
3 self-improving loops. Other details can be found in the supplementary material.
4.3
Monocular Depth/Depth Reﬁnement Evaluation
In the following, we evaluate the performance of our depth estimation on the
KITTI Raw Eigen split test set and TUM RGB-D frieburg3 sequences.
Results on KITTI Eigen Split Test Set. We show the depth evaluation
results on the Eigen split test set in Tab. 1. From the table, it is evident that our
reﬁned depth model (pRGBD-Reﬁned) outperforms all the competing monocular

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
11
Table 1. Depth evaluation result on KITTI Eigen split test set. M: self-supervised
monocular supervision, and S: self-supervised stereo supervision, D: depth supervision.
‘-’ means the result is not available from the paper. pRGBD-Reﬁned outperforms all the
self-supervised monocular methods and several stereo only and combined monocular
and stereo methods. Our results are after 5 self-improving loops.
Lower is better
Higher is better
Method
Train Abs Rel Sq Rel RMSE RMSE log
a1
a2
a3
self-supervised
Yang[57]
M
0.182
1.481
6.501
0.267
0.725
0.906
0.963
Mahjourian[32]
M
0.163
1.240
6.220
0.250
0.762
0.916
0.968
Klodt[24]
M
0.166
1.490
5.998
-
0.778
0.919
0.966
DDVO[47]
M
0.151
1.257
5.583
0.228
0.810
0.936
0.974
GeoNet[59]
M
0.149
1.060
5.567
0.226
0.796
0.935
0.975
DF-Net[66]
M
0.150
1.124
5.507
0.223
0.806
0.933
0.973
Ranjan[38]
M
0.148
1.149
5.464
0.226
0.815
0.935
0.973
EPC++[30]
M
0.141
1.029
5.350
0.216
0.816
0.941
0.976
Struct2depth(M)[4]
M
0.141
1.026
5.291
0.215
0.816
0.945
0.979
WBAF [61]
M
0.135
0.992
5.288
0.211
0.831
0.942
0.976
MonoDepth2-M (re-train) [18]
M
0.117
0.941
4.889
0.194
0.873
0.957
0.980
MonoDepth2-M (original) [18]
M
0.115
0.903
4.863
0.193
0.877 0.959
0.981
pRGBD-Reﬁned
M
0.113
0.793
4.655
0.188
0.874 0.960 0.983
Garg[15]
S
0.152
1.226
5.849
0.246
0.784
0.921
0.967
3Net (R50)[37]
S
0.129
0.996
5.281
0.223
0.831
0.939
0.974
Monodepth2-S[18]
S
0.109
0.873
4.960
0.209
0.864
0.948
0.975
SuperDepth [36]
S
0.112
0.875
4.958
0.207
0.852
0.947
0.977
monoResMatch [45]
S
0.111
0.867
4.714
0.199
0.864
0.954
0.979
DepthHints [52]
S
0.106
0.780
4.695
0.193
0.875 0.958 0.980
DVSO[55]
S
0.097
0.734
4.442
0.187
0.888 0.958 0.980
UnDeepVO [26]
MS
0.183
1.730
6.570
0.268
-
-
-
EPC++ [30]
MS
0.128
0.935
5.011
0.209
0.831
0.945 0.979
Monodepth2-MS[18]
MS
0.106
0.818
4.750
0.196
0.874 0.957 0.979
Eigen[8]
D
0.203
1.548
6.307
0.282
0.702
0.890
0.890
Liu[28]
D
0.201
1.584
6.471
0.273
0.680
0.898
0.967
Kuznietsov[25]
DS
0.113
0.741
4.621
0.189
0.862
0.960
0.986
SVSM FT[30]
DS
0.094
0.626
4.252
0.177
0.891
0.965
0.984
Guo[21]
DS
0.096
0.641
4.095
0.168
0.892
0.967
0.986
DORN[13]
D
0.072
0.307
2.727
0.120
0.932 0.984 0.994
(M) unsupervised methods by non-trivial margins, including MonoDepth2-M
re-trained depth model, and even surpasses the unsupervised methods with stereo
(S) training, i.e., Monodepth2-S, and combined monocular-stereo (MS) training,
i.e., MonoDepth2-MS, in most metrics. Our method also outperforms several
ground-truth depth supervised methods [8,28].
The reason is probably that the aggregated cues from multiple views with
wide baseline losses (e.g., our symmetric depth transfer, depth consistency losses)
lead to more well-posed depth recovery, and hence even higher accuracy than
learning with the pre-calibrated stereo rig with smaller baselines. Further analysis
is provided in Sec. 5. Fig. 4 shows some qualitative results, where our method
(pRGBD-Reﬁned) shows visible improvements. Refer supplementary material for
more qualitative results.
Results on TUM RGB-D Sequences. The depth evaluation results on the
two TUM frieburg3 RGB-D sequences is shown in Tab. 5. Our reﬁned depth
model (pRGBD-Reﬁned) outperforms pRGBD-Initial/Monodepth2-M in both
sequences and all metrics. Refer supplementary material for qualitative results.

12
L. Tiwari et al.
RGB
Monodepth2-S
Monodepth2-M
pRGBD-Reﬁned
Fig. 4. Qualitative depth evaluation results on KITTI Raw Eigen’s split test set.
4.4
Monocular SLAM/Pose Reﬁnement Evaluation
In this section, we evaluate pose estimation/reﬁnement on the KITTI Odometry
sequences 09 and 10, KITTI Odometry test set sequences 11-21, and two TUM
frieburg3 RGB-D sequences.
Table 2. Quantitative pose evaluation results on KITTI Odometry validation set. -
means the result is not available from the paper.
Seq. 09
Seq. 10
Method
RMSE Rel Tr Rel Rot RMSE Rel Tr Rel Rot
Supervised
DeepVO[50]
-
-
-
-
8.11
0.088
ESP-VO[51]
-
-
-
-
9.77
0.102
GFS-VO[53]
-
-
-
-
6.32
0.023
GFS-VO-RNN[53]
-
-
-
-
7.44
0.032
BeyondTracking[54]
-
-
-
-
3.94
0.017
DeepV2D[44]
79.06
8.71
0.037
48.49
12.81
0.083
Self-Supervised
SfMLearner [62]
24.31
8.28
0.031
20.87
12.20
0.030
GeoNet[59]
158.45
28.72
0.098
43.04
23.90
0.090
Depth-VO[60]
-
11.93
0.039
-
12.45
0.035
vid2depth[32]
-
-
-
-
21.54
0.125
UnDeepVO[26]
-
7.01
0.036
-
10.63
0.046
Wang et al.[48]
-
9.88
0.034
-
12.24
0.052
CC[38]
29.00
6.92
0.018
13.77
7.97
0.031
DeepMatchVO[39]
27.08
9.91
0.038
24.44
12.18
0.059
Li et al.[27]
-
8.10
0.028
-
12.90
0.032
Monodepth2-M[18]
55.47
11.47
0.032
20.46
7.73
0.034
SC-SfMLearer[2]
-
11.2
0.034
-
10.1
0.050
RGB ORB-SLAM
18.34
7.42
0.004
8.90
5.85
0.004
pRGBD-Initial
12.21
4.26
0.011
8.30
5.55
0.017
pRGBD-Reﬁned
11.97
4.20
0.010
6.35
4.40
0.016
Results on KITTI Odometry Sequences 09 and 10. We show the quanti-
tative results on seqs 09 and 10 in Tab. 2. It can be seen that our pRGBD-Initial
outperforms RGB ORB-SLAM [33] both in terms of RSME and Rel Tr. Our
pRGBD-Reﬁned further improves pRGBD-Initial in all metrics, which veriﬁes
the eﬀectiveness of our self-improving mechanism in terms of pose estimation.
The higher Rel Rot errors of our methods compared to RGB ORB-SLAM could
be due to the high uncertainty of CNN-predicted depths for far-away points,
which aﬀects our rotation estimation [22]. In addition, our methods outperform
all the competing supervised and self-supervised methods by a large margin,
except for the supervised method of [54] with lower Rel Tr than ours on sequence
10. Note that we evaluate the camera poses produced by the pose network of
Monodepth2-M [18] in Tab. 2, yielding much higher errors than ours. Fig. 5(a)
shows the camera trajectories estimated for sequence 09 by RGB ORB-SLAM, our

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
13
pRGBD-Initial, and pRGBD-Reﬁned. It is evident that, although all the methods
perform loop closure successfully, our methods generate camera trajectories that
align better with the ground truth.
Results on KITTI Odometry Test Set. The KITTI Odometry leaderboard
requires complete camera trajectories of all frames of all the sequences. Since
we keep the default setting from ORB-SLAM, causing tracking failures in a few
sequences, to facilitate quantitative evaluation on this test set (i.e., sequences
11-21), we use pseudo-ground-truth computed as mentioned in Sec. 4.1 to evaluate
all the competing methods in Tab. 3. From the results, RGB ORB-SLAM fails on
three challenging sequences due to tracking failures, whereas our pRGBD-Initial
fails on two sequences and our pRGBD-Reﬁned fails only on one sequence. Among
the sequences where all the competing methods succeed, our pRGBD-Initial re-
duces the RMSEs of RGB ORB-SLAM by a considerable margin for all sequences
except for sequence 19. After our self-improving mechanism, our pRGBD-Reﬁned
further boosts the performance, reaching the best results both in terms of RMSE
and Rel Tr. Fig. 5(b) shows qualitative comparisons on sequence 19.
Table 3. Quantitative pose evaluation results on KITTI Odometry test set. Since
the ground truth for the KITTI Odometry test set is not available we run Stereo
ORB-SLAM[34] to get the complete camera trajectories and use them as the pseudo
ground truth to evaluate. ‘X’ denotes tracking failure.
Seq
RGB ORB-SLAM
pRGBD-Initial
pRGBD-Reﬁned
RMSE Rel Tr Rel Rot RMSE Rel Tr Rel Rot RMSE Rel Tr Rel Rot
11
14.83
7.69
0.003
6.68
3.28
0.016
3.64
2.96
0.015
13
6.58
2.39
0.006
6.83
2.52
0.008
6.43
2.31
0.007
14
4.81
5.19
0.004
4.30
4.14
0.014
2.15
3.06
0.014
15
3.67
1.78
0.004
2.58
1.61
0.005
2.07
1.33
0.004
16
6.21
2.66
0.002
5.78
2.14
0.006
4.65
1.90
0.004
18
6.63
2.38
0.002
5.50
2.30
0.008
4.37
2.21
0.006
19
18.68
4.91
0.002
23.96
2.82
0.007
13.85
2.52
0.006
20
9.19
6.74
0.016
8.94
5.43
0.027
7.03
4.50
0.022
12
X
X
X
X
X
X
94.2
32.94
0.026
17
X
X
X
14.71
8.98
0.011
12.23
7.23
0.011
21
X
X
X
X
X
X
X
X
X
(a) seq 09
(b) seq 19
Fig. 5. Qualitative pose evaluation results on KITTI sequences.
Results on TUM RGB-D Sequences. Performance of pose reﬁnement step
on the two TUM RGB-D sequences is shown in Tab. 4. The result shows increased
robustness and accuracy by pRGBD-Reﬁned. In particular, RGB ORB-SLAM fails

14
L. Tiwari et al.
on walking xyz, while pRGBD-Reﬁned succeeds and achieves the best performance
on both sequences. Due to space limitation we have moved qualitative results to
supplementary material.
Table 4. Quantitative pose evaluation results on two TUM frieburg3 RGB-D sequences.
Note that RGB ORB-SLAM fail in walking xyz sequence.
RGB SLAM
pRGBD-Initial
pRGBD-Reﬁned
RMSE RlTr RlRot RMSE RlTr RlRot RMSE RlTr RlRot
W
X
X
X
0.23
0.02
0.52
0.09
0.01 0.30
L
1.72
0.02
0.32
1.40
0.01
0.34
0.39
0.01
0.33
Table 5. Quantitative depth evaluation results on two TUM frieburg3 RGB-D se-
quences. pRGBD-Reﬁned results are after 3 self-improving loops.
TUM RGBD Sequences
Lower is better
Higher is better
Method
Ab Rel Sq Rel RMSE RMSElog
a1
a2
a3
pRGBD-Initial/MonoDepth2-M
0.397
0.848
1.090
0.719
0.483
0.722
0.862
pRGBD-Reﬁned
0.307
0.341
0.743
0.655
0.522 0.766 0.873
Table 6. Ablation study on 1st self-improving loop. The best performance is in bold
.
Lower is better
Higher is better
Loss
Abs Rel Sq Rel RMSE RMSE log
a1
a2
a3
w/o Dc
0.117
0.958
4.956
0.194
0.862
0.955
0.980
w/o Tc
0.118
0.955
4.867
0.194
0.872
0.957
0.980
w/o Pc
0.117
0.942
4.855
0.194
0.873 0.958
0.980
all losses
0.117
0.931 4.809
0.192
0.873 0.958 0.981
5
Analysis of Self-Improving Loops
(a)
(b)
(c)
(d)
Fig. 6. Depth/pose evaluation metric w.r.t. self-improving loops. Depth evaluation
metrics in (a-c) are computed at diﬀerent max depth caps ranging from 30-80 meters.
In this section, we analyze the behaviour of three diﬀerent evaluation metrics
for depth estimation: Squared Relative (Sq Rel) error, RMSE error and accuracy

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
15
metric a2, as deﬁned in Sec. 4. The pose estimation is evaluated using the absolute
trajectory pose error. In Fig. 6, we use the KITTI Eigen split dataset and report
these metrics for each iteration of the self-improving loop. The evaluation metrics
corresponding to the 0th self-improving loop are of the pre-trained MonoDepth2-
M. We summarize the ﬁndings from the plots in Fig. 6 as below:
– A comparison of evaluation metrics of farther scene points (e.g.max depth
80) with nearby points (e.g.max depth 30) at the 0th self-improving loop
shows that the pre-trained MonoDepth2 performs poorly for farther scene
points compared to nearby points.
– In the subsequent self-improving loops, we can see the rate of reduction in
the Sq Rel and RMSE error is signiﬁcant for farther away points compared to
nearby points, e.g., slope of error curves in Fig. 6(b-c) corresponding to max
depth 80 is steeper than that of max depth 30. This validates our hypothesis
of including wider baseline losses that help the depth network predict more
accurate depth values for farther points. Overall, our joint narrow and wide
baseline based learning setup helps improve the depth prediction of both the
nearby and farther away points, and outperforms MonoDepth2 [18].
– The error plot in Fig. 6(d) shows a decrease in pose error with self-improving
loops and complements the improvement in depth evaluation metrics as
shown in Fig.6(a)-(c). We terminate the self-improvement loop once there is
no furhter improvement, i.e., at the 5th iteration.
6
Conclusion
In this work, we propose a self-improving framework to couple geometrical and
learning based methods for 3D perception. A win-win situation is achieved — both
the monocular SLAM and depth prediction are improved by a signiﬁcant margin
without any additional active depth sensor or ground truth label. Currently,
our self-improving framework only works in an oﬀ-line mode, so developing an
on-line real-time self-improving system remains one of our future works. Another
avenue for our future works is to move towards more challenging settings, e.g.,
uncalibrated cameras [64] or rolling shutter cameras [63].
Acknowledgement
This work was part of L. Tiwari’s internship at NEC Labs America, in San Jose. L.
Tiwari was supported by Visvesvarya Ph.D. Fellowship. L. Tiwari and S. Anand
were also supported by Infosys Center for Artiﬁcial Intelligence, IIIT-Delhi.
A
Supplementary Material
This supplementary material is organized as follows. We ﬁrst present depth
reﬁnement results on KITTI Odometry sequences in Sec. A.1. Next, we give a
comparison of our pose reﬁnement with state-of-the-art RGB SLAM approaches

16
L. Tiwari et al.
in Sec. A.2. We further evaluate pose reﬁnement on KITTI Leaderboard in Sec.
A.3. Additional implementation details and qualitative results of TUM RGB-D
experiments are included in Sec. A.4. Additional analysis of the self-improving
loop with all the 7 depth evaluation metrics is presented in Sec. A.5. Some
additional qualitative depth evaluation results of KITTI Eigen experiments and
pose evaluation results of KITTI Odometry experiments are presented in Sec.
A.6 and Sec. A.7 respectively. Finally, we provide some demo videos on KITTI
Odometry and TUM RGB-D sequences in Sec. A.8.
A.1
Depth Reﬁnement Evaluation on KITTI Odometry
We evaluate the depth reﬁnement step of our self-improving pipeline on KITTI
Odometry sequences 09 and 10. The ﬁrst block (i.e.MonoDepth2-M vs pRGBD-
Reﬁned) of the Tab. 7 shows the improved results after the depth reﬁnement
step. We also compare our method with a state-of-the-art depth reﬁnement
method DCNF [58]. Note: DCNF [58] uses ground-truth depths for pre-training
the network, while our method uses only unlabelled monocular images, and still
outperforms DCNF (see second block of the Tab. 7). The result shows that our
self-improving framework with the wide-baseline losses (i.e., symmetric depth
transfer and depth consistency losses) improves the depth prediction.
Table 7. Qualitative depth evaluation on KITTI Odometry sequences 09 and 10. M:
self-supervised monocular supervision for ﬁne-tuning. ‘-’ means the result is not available
from the paper. Our results are after 5 self-improving loops. Note: DCNF [58] uses
ground-truth depths for pre-training. Best results in each block is in bold.
Depth
Lower is better
Higher is better
Method
Train
Cap
Abs Rel Sq Rel RMSE RMSE log2
a1
a2
a3
MonoDepth2-M [18]
M
80
0.123
0.703
4.165
0.188
0.854
0.956
0.985
pRGBD-Reﬁned
M
80
0.121
0.649 3.995
0.184
0.853 0.960 0.986
DCNF [58]
M
20
0.112
-
2.047
-
-
-
-
pRGBD-Reﬁned
M
20
0.098
0.242 1.610
0.145
0.906 0.978 0.993
A.2
Comparison with State-Of-The-Art SLAM Methods
In this section, we compare our pRGBD-Initial and pRGBD-Reﬁned methods
against state-of-the-art RGB SLAM methods, i.e., Direct Sparse Odometry
(DSO) [9], Direct Sparse Odometry with Loop Closure (LDSO) [14], and Direct
Sparse Odometry in Dynamic Environments (DSOD) [31]. The results are shown
in Tab. 8. From the results, it is evident that our pRGBD-Reﬁned outperforms
all the competing methods in Absolute Trajectory Error (RMSE) and Relative
Translation (Rel Tr) Error . While the improvement in Absolute Trajectory Error
(RMSE) and Relative Translation (Rel Tr) error is substantial, the performance
in Relative Rotation (Rel Rot) is not comparable. The higher Rel Rot errors of
our method compared to other RGB ORB-SLAM methods could be due to the
high uncertainty of CNN-predicted depths for far-away points, which aﬀects our
rotation estimation [22]. However, if we compare Rel Rot error of pRGBD-Initial

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
17
with the pRGBD-Reﬁned, as depth prediction improves (see Tab. 7 MonoDepth2-
M/pRGBD-Initial vs pRGBD-Reﬁned) the Rel Rot error also improves (see Tab.
8 ).
Table 8. Comparison with state-of-the-art RGB SLAM methods on KITTI Odometry
sequences 09 and 10. Here, - means the result is not available from the original paper.
∗denotes the result is obtained from [31].
Seq. 09
Seq. 10
Method
RMSE Rel Tr Rel Rot RMSE Rel Tr Rel Rot
RGB ORB-SLAM[34] 18.34
7.42
0.004
8.90
5.85
0.004
DSO[9]
74.29
72.27∗0.002∗
16.32
80.81∗0.002∗
LDSO[14]
21.64
-
-
17.36
-
-
DSOD[31]
-
13.85
0.002
-
13.53
0.002
pRGBD-Initial
12.21
4.26
0.011
8.30
5.55
0.017
pRGBD-Reﬁned
11.97
4.20
0.010
6.35
4.40
0.016
A.3
KITTI Odometry Leaderboard Results
In the main paper, we keep the default setting from ORB-SLAM, which leads to
tracking failures of all methods in a few sequences (i.e., see Tab. 3 of the main
paper). The KITTI Odometry leaderboard requires the results of all sequences
(i.e., sequences 11-21) for evaluation. Therefore, we increase the minimum number
of inliers for adding keyframes from 100 to 500 so that our pRGBD-Reﬁned
succeeds on all sequences. We report the results of our pRGBD-Reﬁned on the
KITTI Odometry leaderboard in Tab. 9. Results show our method outperforms the
competing monocular/LiDAR-based methods both in terms of relative translation
and rotation errors.
Table 9. Quantitative pose evaluation results on KITTI Odometry leaderboard. Note
that we use the estimated trajectories from ORB-SLAM2-S [34] for global scale alignment.
The best performance is in bold.
Method
Rel Tr Rel Rot
ORB-SLAM2-S [34]
1.70
0.0028
OABA [12]
20.95
0.0135
VISO2-M [17]
11.94
0.0234
BLO [46]
9.21
0.0163
VISO2-M+GP [17,41]
7.46
0.0245
pRGBD-Reﬁned
6.24
0.0097
A.4
Experiments on TUM RGB-D Sequences
Implementation Details We pre-train/ﬁne-tune the depth network on im-
age resolution 480 × 320. For pre-training, we set the learning rate to 10−4

18
L. Tiwari et al.
initially, reduce it to 10−5 after 20 epochs, and train for 30 epochs. For ﬁne-
tuning, we extract camera poses, 2D keypoints and the associated depths from
keyframes while running RGB-D ORB-SLAM on the training sequences. We
ﬁne-tune the depth network with the ﬁxed learning rate of 10−6. We use the
following 6 sequences for pre-training/ﬁne-tuning: 1. fr3/long oﬃce household, 2.
fr3/long oﬃce household validation, 3. fr3/sitting xyz, 4. fr3/structure texture far,
5. fr3/structure texture near, 6. fr3/teddy, and the following 2 sequences for
testing: 1. fr3/walking xyz, 2. fr3/large cabinet validation. Note that these are
the only 8 sequences with provided rectiﬁed images among the entire TUM
RGB-D dataset.
Qualitative Results Fig. 7(a) and Fig. 7(b) shows qualitative pose evaluation
results on test sequences walking xyz and large cabinet validation respectively.
The results, show the increased robustness and accuracy by pRGBD-Reﬁned.
In particular, RGB ORB-SLAM fails on walking xyz, while pRGBD-Reﬁned
succeeds and achieves the best performance on both sequences. Some qualitative
depth reﬁnement results are presented in Fig. 8. It can be seen that the disparity
between the depth values of nearby and farther scene points become clearer, e.g.,
see depth around the two monitors.
(a) fr3/walking xyz
(b)fr3/large cabinet validation
Fig. 7. Qualitative pose evaluation results on TUM RGB-D sequences. Note that RGB
ORB-SLAM fails in (a).
(a) RGB
(b) pRGBD-Initial
(c) pRGBD-Reﬁned
Fig. 8. Qualitative depth evaluation results on TUM RGB-D sequences.

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
19
A.5
Additional Plots of Self-Improving Loop Analysis
In the main paper, we have shown behaviours of 3 depth evaluation metrics
named as (Sq. Rel), (RMSE) and (a2). In this section we present behaviours of
all 7 metrics and pose evaluation metrics. Our analysis in the Sec. 5 of the main
paper holds true with respect to all the 7 depth evaluation metrics.
(a)
(b)
(c)
(d)
(e)
(f)
(g)
(h)
Fig. 9. Depth/Pose evaluation metrics w.r.t. self-improving loops. (a). Absolute Relative
(Abs Rel) (lower is better) (b). Squared Relative (Sq Rel) (lower is better) (c). RMSE
(lower is better) (d). RMSE Log (lower is better), (e). a1 (higher is better), (f). a2
(higher is better), (g). a3 (higher is better) and (h) Absolute Trajectory Error (RMSE)
(lower is better). Depth evaluation metrics in (a-g) are computed at diﬀerent max depth
caps ranging from 30-80 meters.
A.6
Additional Depth Reﬁnement Qualitative Results
Fig. 10 shows some visual improvements in depth predictions of farther scene
points. Fig. 11 shows some additional qualitative results, where pRGBD-Reﬁned

20
L. Tiwari et al.
shows visible improvements at occlusion boundaries and thin objects. The reason
for the improvements is the aggregated cues from multiple views with wider
baselines (e.g., our depth transfer and depth consistency losses) lead to more
well-posed depth recovery.
RGB
Monodepth2-M
pRGBD-Reﬁned
Fig. 10. Qualitative depth evaluation results on KITTI Odometry test set. Improvement
in depth prediction of farther scene points.
RGB
MonoDepth2-M
pRGBD-Reﬁned
Fig. 11. Qualitative depth evaluation results on KITTI Raw Eigen split test set.
MonoDepth2-M: MonoDepth2 trained using monocular images,

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
21
A.7
Additional Pose Reﬁnement Qualitative Results
Some additional pose reﬁnement qualitative results are shown in Fig. 12. In all the
three sequences our pRGBD-Reﬁned aligned well with the ground-truth trajectory.
Note that both RGB ORB-SLAM and our pRGBD-Initial fail on sequence 12,
whereas our pRGBD-Reﬁned succeeds, showing the enhanced robustness by our
self-improving framework.
(a) Seq 11
(b) Seq 12
(a) Seq 15
Fig. 12. Qualitative pose evaluation results on KITTI Odometry sequences. Note that
both RGB ORB-SLAM and pRGBD-Initial fail in (b).
A.8
Demo Videos
We include example videos on sequences 11 and 19 of KITTI Odometry (i.e.,
http://tiny.cc/pRGBD KITTI 11 and http://tiny.cc/pRGBD KITTI 19
, respectively) and sequence fr3/large cabinet validation of TUM RGB-D (i.e.,
http://tiny.cc/pRGBD TUM LCV). In particular, we illustrate the im-
provements in depth prediction at frames 140, 352 of pRGBD KITTI 11, frames
1652, 3248, 3529 of pRGBD KITTI 19, and frames 153, 678 of pRGBD TUM LCV.
In addition, we highlight the failure of RGB ORB-SLAM at frame 2985 of
pRGBD KITTI 19.

22
L. Tiwari et al.
References
1. Andraghetti, L., Myriokefalitakis, P., Dovesi, P.L., Luque, B., Poggi, M., Pieropan,
A., Mattoccia, S.: Enhancing self-supervised monocular depth estimation with
traditional visual odometry. In: 3DV. pp. 424–433. IEEE (2019)
2. Bian, J.W., Li, Z., Wang, N., Zhan, H., Shen, C., Cheng, M.M., Reid, I.: Unsuper-
vised scale-consistent depth and ego-motion learning from monocular video. arXiv
preprint arXiv:1908.10553 (2019)
3. Bloesch, M., Czarnowski, J., Clark, R., Leutenegger, S., Davison, A.J.: CodeSLAM-
learning a compact, optimisable representation for dense visual slam. In: CVPR
(2018)
4. Casser, V., Pirk, S., Mahjourian, R., Angelova, A.: Depth prediction without the
sensors: Leveraging structure for unsupervised learning from monocular videos. In:
AAAI. vol. 33, pp. 8001–8008 (2019)
5. Chen, Y., Schmid, C., Sminchisescu, C.: Self-supervised learning with geometric
constraints in monocular video: Connecting ﬂow, depth, and camera. In: ICCV
(2019)
6. Davison, A.J., Reid, I.D., Molton, N.D., Stasse, O.: MonoSLAM: Real-time single
camera slam. TPAMI (6), 1052–1067 (2007)
7. Dhiman, V., Tran, Q.H., Corso, J.J., Chandraker, M.: A continuous occlusion model
for road scene understanding. In: CVPR (2016)
8. Eigen, D., Puhrsch, C., Fergus, R.: Depth map prediction from a single image using
a multi-scale deep network. In: NeurIPS. pp. 2366–2374 (2014)
9. Engel, J., Koltun, V., Cremers, D.: Direct sparse odometry. IEEE transactions on
pattern analysis and machine intelligence 40(3), 611–625 (2017)
10. Engel, J., Sch¨ops, T., Cremers, D.: LSD-SLAM: Large-scale direct monocular slam.
In: ECCV. pp. 834–849. Springer (2014)
11. Forster, C., Pizzoli, M., Scaramuzza, D.: SVO: Fast semi-direct monocular visual
odometry. In: ICRA. pp. 15–22. IEEE (2014)
12. Frost, D.P., K¨ahler, O., Murray, D.W.: Object-aware bundle adjustment for cor-
recting monocular scale drift. In: ICRA. pp. 4770–4776. IEEE (2016)
13. Fu, H., Gong, M., Wang, C., Batmanghelich, K., Tao, D.: Deep ordinal regression
network for monocular depth estimation. In: Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition. pp. 2002–2011 (2018)
14. Gao, X., Wang, R., Demmel, N., Cremers, D.: Ldso: Direct sparse odometry with
loop closure. In: 2018 IEEE/RSJ International Conference on Intelligent Robots
and Systems (IROS). pp. 2198–2204. IEEE (2018)
15. Garg, R., BG, V.K., Carneiro, G., Reid, I.: Unsupervised cnn for single view depth
estimation: Geometry to the rescue. In: ECCV. pp. 740–756. Springer (2016)
16. Geiger, A., Lenz, P., Urtasun, R.: Are we ready for autonomous driving? the kitti
vision benchmark suite. In: CVPR. pp. 3354–3361. IEEE (2012)
17. Geiger, A., Ziegler, J., Stiller, C.: Stereoscan: Dense 3d reconstruction in real-time.
In: IEEE Intelligent Vehicles Symposium (IV). pp. 963–968. Ieee (2011)
18. Godard, C., Aodha, O.M., Firman, M., Brostow, G.J.: Digging into self-supervised
monocular depth estimation. In: ICCV. pp. 3828–3838 (2019)
19. Godard, C., Mac Aodha, O., Brostow, G.J.: Unsupervised monocular depth estima-
tion with left-right consistency. In: CVPR. pp. 270–279 (2017)
20. Grupp, M.: evo: Python package for the evaluation of odometry and slam. https:
//github.com/MichaelGrupp/evo (2017)

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
23
21. Guo, X., Li, H., Yi, S., Ren, J., Wang, X.: Learning monocular depth by distilling
cross-domain stereo networks. In: Proceedings of the European Conference on
Computer Vision (ECCV). pp. 484–500 (2018)
22. Hartley, R., Zisserman, A.: Multiple view geometry in computer vision. Cambridge
university press (2003)
23. Klein, G., Murray, D.: Parallel tracking and mapping for small ar workspaces. In:
ISMAR. pp. 1–10. IEEE Computer Society (2007)
24. Klodt, M., Vedaldi, A.: Supervising the new with the old: learning sfm from sfm.
In: ECCV. pp. 698–713 (2018)
25. Kuznietsov, Y., Stuckler, J., Leibe, B.: Semi-supervised deep learning for monocular
depth map prediction. In: Proceedings of the IEEE conference on computer vision
and pattern recognition. pp. 6647–6655 (2017)
26. Li, R., Wang, S., Long, Z., Gu, D.: Undeepvo: Monocular visual odometry through
unsupervised deep learning. In: ICRA
27. Li, Y., Ushiku, Y., Harada, T.: Pose graph optimization for unsupervised monocular
visual odometry. In: ICRA (2019)
28. Liu, F., Shen, C., Lin, G., Reid, I.: Learning depth from single monocular images
using deep convolutional neural ﬁelds. IEEE transactions on pattern analysis and
machine intelligence 38(10), 2024–2039 (2015)
29. Loo, S.Y., Amiri, A.J., Mashohor, S., Tang, S.H., Zhang, H.: CNN-SVO: Improving
the mapping in semi-direct visual odometry using single-image depth prediction.
In: ICRA. pp. 5218–5223. IEEE (2019)
30. Luo, C., Yang, Z., Wang, P., Wang, Y., Xu, W., Nevatia, R., Yuille, A.: Every pixel
counts++: Joint learning of geometry and motion with 3d holistic understanding.
arXiv preprint arXiv:1810.06125 (2018)
31. Ma, P., Bai, Y., Zhu, J., Wang, C., Peng, C.: Dsod: Dso in dynamic environments.
IEEE Access 7, 178300–178309 (2019)
32. Mahjourian, R., Wicke, M., Angelova, A.: Unsupervised learning of depth and
ego-motion from monocular video using 3d geometric constraints. In: CVPR. pp.
5667–5675 (2018)
33. Mur-Artal, R., Montiel, J.M.M., Tardos, J.D.: ORB-SLAM: a versatile and accurate
monocular slam system. IEEE transactions on robotics 31(5), 1147–1163 (2015)
34. Mur-Artal, R., Tard´os, J.D.: ORB-SLAM2: An open-source slam system for monoc-
ular, stereo, and rgb-d cameras. IEEE Transactions on Robotics 33(5), 1255–1262
(2017)
35. Newcombe, R.A., Lovegrove, S.J., Davison, A.J.: DTAM: Dense tracking and
mapping in real-time. In: ICCV. pp. 2320–2327. IEEE (2011)
36. Pillai, S., Ambru¸s, R., Gaidon, A.: Superdepth: Self-supervised, super-resolved
monocular depth estimation. In: ICRA. pp. 9250–9256. IEEE (2019)
37. Poggi, M., Tosi, F., Mattoccia, S.: Learning monocular depth estimation with
unsupervised trinocular assumptions. In: 3DV. pp. 324–333. IEEE (2018)
38. Ranjan, A., Jampani, V., Balles, L., Kim, K., Sun, D., Wulﬀ, J., Black, M.J.:
Competitive collaboration: Joint unsupervised learning of depth, camera motion,
optical ﬂow and motion segmentation. In: CVPR (2019)
39. Shen, T., Luo, Z., Zhou, L., Deng, H., Zhang, R., Fang, T., Quan, L.: Beyond
photometric loss for self-supervised ego-motion estimation. In: ICRA (2019)
40. Sheng, L., Xu, D., Ouyang, W., Wang, X.: Unsupervised collaborative learning of
keyframe detection and visual odometry towards monocular deep slam. In: ICCV
(October 2019)
41. Song, S., Chandraker, M.: Robust scale estimation in real-time monocular sfm for
autonomous driving. In: CVPR. pp. 1566–1573 (2014)

24
L. Tiwari et al.
42. Sturm, J., Engelhard, N., Endres, F., Burgard, W., Cremers, D.: A benchmark for
the evaluation of rgb-d slam systems. In: IROS. pp. 573–580. IEEE (2012)
43. Tateno, K., Tombari, F., Laina, I., Navab, N.: CNN-SLAM: Real-time dense monoc-
ular slam with learned depth prediction. In: CVPR. pp. 6243–6252 (2017)
44. Teed, Z., Deng, J.: DeepV2D: Video to depth with diﬀerentiable structure from
motion. arXiv preprint arXiv:1812.04605 (2018)
45. Tosi, F., Aleotti, F., Poggi, M., Mattoccia, S.: Learning monocular depth estimation
infusing traditional stereo knowledge. In: CVPR (2019)
46. Velas, M., Spanel, M., Hradis, M., Herout, A.: Cnn for imu assisted odometry
estimation using velodyne lidar. In: IEEE International Conference on Autonomous
Robot Systems and Competitions (ICARSC). pp. 71–77. IEEE (2018)
47. Wang, C., Miguel Buenaposada, J., Zhu, R., Lucey, S.: Learning depth from
monocular videos using direct methods. In: CVPR. pp. 2022–2030 (2018)
48. Wang, R., Pizer, S.M., Frahm, J.M.: Recurrent neural network for (un-) supervised
learning of monocular video visual odometry and depth. In: CVPR (2019)
49. Wang, R., Schworer, M., Cremers, D.: Stereo DSO: Large-scale direct sparse visual
odometry with stereo cameras. In: ICCV. pp. 3903–3911 (2017)
50. Wang, S., Clark, R., Wen, H., Trigoni, N.: Deepvo: Towards end-to-end visual
odometry with deep recurrent convolutional neural networks. In: ICRA. pp. 2043–
2050. IEEE (2017)
51. Wang, S., Clark, R., Wen, H., Trigoni, N.: End-to-end, sequence-to-sequence prob-
abilistic visual odometry through deep neural networks. IJRR 37(4-5), 513–542
(2018)
52. Watson, J., Firman, M., Brostow, G.J., Turmukhambetov, D.: Self-supervised
monocular depth hints. In: ICCV (2019)
53. Xue, F., Wang, Q., Wang, X., Dong, W., Wang, J., Zha, H.: Guided feature selection
for deep visual odometry. In: ACCV (2018)
54. Xue, F., Wang, X., Li, S., Wang, Q., Wang, J., Zha, H.: Beyond tracking: Selecting
memory and reﬁning poses for deep visual odometry. In: CVPR (2019)
55. Yang, N., Wang, R., Stuckler, J., Cremers, D.: Deep virtual stereo odometry:
Leveraging deep depth prediction for monocular direct sparse odometry. In: ECCV.
pp. 817–833 (2018)
56. Yang, Z., Wang, P., Wang, Y., Xu, W., Nevatia, R.: Lego: Learning edge with
geometry all at once by watching videos. In: CVPR. pp. 225–234 (2018)
57. Yang, Z., Wang, P., Xu, W., Zhao, L., Nevatia, R.: Unsupervised learning of
geometry with edge-aware depth-normal consistency. In: AAAI (2018)
58. Yin, X., Wang, X., Du, X., Chen, Q.: Scale recovery for monocular visual odometry
using depth estimated with deep convolutional neural ﬁelds. In: ICCV. pp. 5870–
5878 (2017)
59. Yin, Z., Shi, J.: GeoNet: Unsupervised learning of dense depth, optical ﬂow and
camera pose. In: CVPR. pp. 1983–1992 (2018)
60. Zhan, H., Garg, R., Saroj Weerasekera, C., Li, K., Agarwal, H., Reid, I.: Unsu-
pervised learning of monocular depth estimation and visual odometry with deep
feature reconstruction. In: CVPR (2018)
61. Zhou, L., Kaess, M.: Windowed bundle adjustment framework for unsupervised
learning of monocular depth estimation with u-net extension and clip loss. IEEE
Robotics and Automation Letters 5(2), 3283–3290 (2020)
62. Zhou, T., Brown, M., Snavely, N., Lowe, D.G.: Unsupervised learning of depth and
ego-motion from video. In: CVPR. pp. 1851–1858 (2017)
63. Zhuang, B., Tran, Q.H., Ji, P., Cheong, L.F., Chandraker, M.: Learning structure-
and-motion-aware rolling shutter correction. In: CVPR (2019)

Pseudo RGB-D for Self-Improving Monocular SLAM and Depth Prediction
25
64. Zhuang, B., Tran, Q.H., Lee, G.H., Cheong, L.F., Chandraker, M.: Degeneracy in
self-calibration revisited and a deep learning solution for uncalibrated slam. In:
IROS (2019)
65. Zou, Y., Ji, P., Tran, Q.H., Huang, J.B., Chandraker, M.: Learning monocular
visual odometry via self-supervised long-term modeling. In: ECCV (2020)
66. Zou, Y., Luo, Z., Huang, J.B.: DF-Net: Unsupervised joint learning of depth and
ﬂow using cross-task consistency. In: ECCV (2018)

