The Indian Chefs Process
Patrick Dallaire1
Luca Ambrogioni2
Ludovic Trottier1
Umut Güçlü2
Max Hinne2
Philippe Giguère1
Brahim Chaib-Draa1
Marcel van Gerven2
Francois Laviolette1
1Université Laval
2Radboud University
Abstract
This paper introduces the Indian Chefs Pro-
cess (ICP), a Bayesian nonparametric prior
on the joint space of inﬁnite directed acyclic
graphs (DAGs) and orders that generalizes
Indian Buﬀet Processes. As our construction
shows, the proposed distribution relies on a la-
tent Beta Process controlling both the orders
and outgoing connection probabilities of the
nodes, and yields a probability distribution on
sparse inﬁnite graphs. The main advantage
of the ICP over previously proposed Bayesian
nonparametric priors for DAG structures is its
greater ﬂexibility. To the best of our knowl-
edge, the ICP is the ﬁrst Bayesian nonpara-
metric model supporting every possible DAG.
We demonstrate the usefulness of the ICP on
learning the structure of deep generative sig-
moid networks as well as convolutional neural
networks.
1
Introduction
In machine learning and statistics, the directed acyclic
graph (DAG) is a common modelling choice for express-
ing relationships between objects. Prime examples of
DAG-based graphical models include Bayesian net-
works, feed-forward neural networks, causal networks,
deep belief networks, dynamic Bayesian networks and
hidden Markov models, to name a few. Learning the un-
known structure of these models presents a signiﬁcant
learning challenge, a task that is often avoided by ﬁxing
the structure to a large and hopefully suﬃciently ex-
pressive model. Structure learning is a model selection
problem in which ones estimates the underlying graph-
ical structure of the model. Over the years, researchers
have explored a great variety of approaches to this
problem [13, 23, 2, 15, 17, 18, 24], from frequentist to
Bayesian, and some using pure heuristic-based search,
but the vast majority is limited to ﬁnite parametric
models.
Bayesian nonparametric learning methods are appeal-
ing alternatives to their parametric counterparts, be-
cause they oﬀer more ﬂexibility when dealing with
generative models of unknown dimensionality [10]. In-
stead of looking for speciﬁc ﬁnite-dimensional models,
the idea is rather to deﬁne probability measures on
inﬁnite-dimensional spaces and then infer the ﬁnite sub-
set of active dimensions explaining the data. Over the
past years, there has been extensive work on construct-
ing ﬂexible Bayesian nonparametric models for various
types of graphical models, allowing complex hidden
structures to be learned from data. For instance, [12]
developed a model for inﬁnite latent conditional ran-
dom ﬁelds while [11] proposed an inﬁnite mixture of
fully observable ﬁnite-dimensional Bayesian networks.
In the case of time series, [3] developed the inﬁnite
hidden Markov random ﬁeld model and [5] proposed
an inﬁnite dynamic Bayesian network with factored
hidden states. Another interesting model is the in-
ﬁnite factorial dynamical model of [25] representing
the hidden dynamics of a system with inﬁnitely many
independent hidden Markov models.
The problem of learning networks containing hidden
structures with Bayesian nonparametric methods has
also received attention. The cascading Indian Buﬀet
Process (CIBP) of [1] is a Bayesian nonparametric prior
over inﬁnitely deep and inﬁnitely broad layered net-
work structures. However, the CIBP does not allow
connections from non-adjacent layers, yielding a re-
stricted prior over inﬁnite DAGs. The extended CIBP
(ECIBP) is an extension of the previous model which
seeks to correct this limitation and support a larger
set of DAG structures [4]. However, the ECIBP has
some drawbacks: the observable nodes are conﬁned to
a unique layer placed at the bottom of the network,
which prevents learning the order of the nodes or have
observable inputs. An immediate consequence of this
is the impossibility for an observable unit to be the
parent of any hidden unit or any other observable unit,
which considerably restricts the support of the prior
over DAGs and make their application to deep learning
very problematic.
In the context of deep learning, structure learning is
arXiv:2001.10657v1  [cs.LG]  29 Jan 2020

often part of the optimization. Recently, [26] proposed
a method that enforces the model to dynamically learn
more compact structures by imposing sparsity through
regularization. While sparsity is obviously an interest-
ing property for large DAG-based models, their method
ignores the epistemic uncertainty about the structure.
Structure learning for probabilistic graphical models
can also be applied in deep learning. For instance, [22]
have demonstrated that deep network structures can be
learned throught the use of Bayesian network structure
learning strategies. To our knowledge, no Bayesian
nonparametric structure learning methods have been
applied to deep learning models.
This paper introduces the Indian Chefs Process (ICP),
a new Bayesian nonparametric prior for general DAG-
based structure learning, which can equally be applied
to perform Bayesian inference in probabilistic graphical
models and deep learning. The proposed distribution
has a support containing all possible DAGs, admits
hidden and observable units, is layerless and enforces
sparsity. We present its construction in Section 2 and
describe a learning method based on Markov Chain
Monte Carlo in Section 3. In Section 4, we use the ICP
as a prior in two Bayesian structure learning experi-
ments: in the ﬁrst, we compute the posterior distribu-
tion on the structure and parameters of a deep gener-
ative sigmoid networks and in the second we perform
structure learning in convolutional neural networks.
2
Bayesian nonparametric directed
acylic graphs
In this section, we construct the probability distribution
over DAGs and orders by adopting the methodology
followed by [8]. We ﬁrst deﬁne a distribution over ﬁnite-
dimensional structures, while the ﬁnal distribution is
obtained by evaluating it as the structure size grows
to inﬁnity.
Let G = (V, Z) be a DAG where V = {1, . . . , K} is the
set of nodes and Z ∈{0, 1}K×K is the adjacency matrix.
We introduce an ordering θ on the nodes so that the
direction of an edge is determined by comparing the
order value of each node. A connection Zki = 1 is
only allowed when θk > θi, meaning that higher order
nodes are parents and lower order nodes are children.
Notice that this constraint is stronger than acyclicity
since all (Z, θ) combinations respecting the order value
constraint are guaranteed to be acyclic, but an acyclic
graph can violate the ordering constraint.
We assume that both the adjacency matrix Z and the
ordering θ are random variables and develop a Bayesian
framework reﬂecting our uncertainty. Accordingly, we
assign a popularity parameter πk and an order value
θk, called reputation, to every node k in G based on
the following model:
θk ∼U(0, 1)
(1)
πk | α, γ, φ, K ∼Beta
αγ
K + φI(k ∈O), α −αγ
K

(2)
Zki | πk, θk, θi ∼Bernoulli (πkI(θk > θi)) .
(3)
Here, I denotes the indicator function, U(a, b) denotes
the uniform distribution on interval [a, b] and O ⊆V
is the set of observed nodes. In this model, the pop-
ularities reﬂected by π control the outgoing connec-
tion probability of the nodes, while respecting the to-
tal order imposed by θ.
Moreover, the Beta prior
parametrization in Eq. (2) is motivated by the Beta
Process construction of [21], where Eq. (1) becomes the
base distribution, and is convenient when evaluating
the limit in Section 2.1. Also, α and γ correspond to
the usual parameters deﬁning a Beta Process and the
purpose of the new parameter φ is to control the pop-
ularity of the observable nodes and ensure a non-zero
connection probability when required.
Under this model, the conditional probability of the
adjacency matrix Z given the popularities π = {πk}K
k=1
and order values θ = {θk}K
k=1 is:
p(Z | π, θ) =
K
Y
k=1
K
Y
i=1
p(Zki | πk, θk, θi) .
(4)
The adjacency matrix Z may contain connections for
nodes that are not of interest, i.e. nodes that are not
ancestors of any observable nodes. Formally, we deﬁne
A ⊆V as the set of active nodes, which contains all
observable nodes O and the ones having a directed
path ending at an observable node.
When solely considering connections from A to A, i.e.
the adjacency submatrix ZAA of the A-induced sub-
graph of G, Eq. (4) simpliﬁes to:
p(ZAA | π, ↓, θ) =
Y
k∈A
πmk
k
(1 −πk)↓k−mk ,
(5)
where mk = P
i∈A Zki denotes the number of out-
going connections from node k to any active nodes,
↓k= P
j∈A I(θj < θk) denotes the number of active
nodes having an order value strictly lower than θk
and ↓= {↓k}K
k=1. At this point, we marginalize out
the popularity vector π in Eq. (5) with respect to the
prior, by using the conjugacy of the Beta and Binomial

distributions, and we get:
p(ZAA | α, γ,φ, ↓, θ) =
Y
k∈H
[ αγ
K ]mk[α −αγ
K ]↓k−mk
α↓k
(6)
Y
k∈O
[ αγ
K + φ]mk[α −αγ
K ]↓k−mk
[α + φ]↓k
,
where xn = x(x + 1) . . . (x + n −1) is the Pochhammer
symbol denoting the rising factorial and H = A \ O is
the set of active hidden nodes.
The set of active nodes A contains all observable nodes
as well as their ancestors, which means there exists
a part of the graph G that is disconnected from A.
Let us denote by I = V \ A the set of inactive nodes.
Considering that the A-induced subgraph is eﬀectively
maximal, then this subgraph must be properly isolated
by some envelope of no-connections ZIA containing
only zeros. The joint probability of submatrices ZAA
and ZIA is:
p(ZAA,ZIA | α, γ, φ, ↓, θ) =
p(ZAA | α, γ, φ, ↓, θ) ·
Y
k∈I
[α −αγ
K ]↓k
α↓k
(7)
where the number of negative Bernoulli trials ↓k de-
pends on θk itself and θA. Notice that since the sub-
matrices ZAI and ZII contain uninteresting and unob-
served binary events, they are trivially marginalized
out of p(Z).
One way to simplify Eq. (7) is to marginalize out the
order values θI of the inactive nodes with respect to
(1).
To do so, we ﬁrst sort the active node orders
ascendingly in vector θ↗
A and augment it with the
extrema θ↗
0 = 0 and θ↗
K++1 = 1, where we introduce
K+ = |A| to denote the number of active nodes. We
slightly abuse notation here since these extrema do
not refer to any nodes and are only used to compute
interval lengths. This provides us with all relevant
interval boundaries, including the absolute boundaries
implied by Eq. (1). We refer to the jth smallest value
of this vector as θ↗
j . Based on the previous notation,
the probability for an inactive node to lie between two
active nodes is simply θ↗
j+1 −θ↗
j . Using this notation,
we have the following marginal probability:
p(Z↗
AA, ZIA, θ↗
A | α, γ, φ) =
(K −D)K+−D
K+!


K+
X
j=0
(θ↗
j+1 −θ↗
j )[α(1 −γ
K )]j
αj


K−
Y
k∈H
[ αγ
K ]mk[α −αγ
K ]↓k−mk
α↓k
(8)
Y
k∈O
[ αγ
K + φ]mk[α −αγ
K ]↓k−mk
[α + φ]↓k
,
where K−= |I| denotes the number of inactive nodes
and xn = x(x −1) . . . (x −n + 1) symbolizes the falling
factorial. Due to the exchangeability of our model,
the joint probability on both the adjacency matrix
and active order values can cause problems regarding
the index k of the nodes. One way to simplify this
is to reorder the adjacency matrix according to θ↗
A ,
which we denote Z↗
AA.
By using this many-to-one
transformation, we obtain a probability distribution
on an equivalence class of DAGs that is analog to the
lof function used by [8]. The number of permutation
mapping to this sorted representation is accounted for
by the normalization constant (K −D)K+−D(K+!)−1.
2.1
From Finite to Inﬁnite DAGs
An elegant way to construct Bayesian nonparametric
models is to consider the inﬁnite limit of ﬁnite para-
metric Bayesian models [20]. Following this idea, we
revisit the model of Section 2 so that G now contains
inﬁnitely many nodes. To this end, we evaluate the
limit as K →∞of Eq. (8), yielding the following
probability distribution:
p(Z↗
AA, ZIA, θ↗
A |α, γ, φ, O) =
1
K+! exp

−αγ
K+
X
j=1
(θ↗
j+1 −θ↗
j )

ψ(α + j) −ψ(α)



Y
k∈H
αγ
(mk −1)!
(α+ ↓k −mk)mk
Y
k∈O
φmkα↓k−mk
[α + φ]↓k
,
(9)
where ψ is the digamma function. Eq. (9) is the pro-
posed marginal probability distribution on the joint
space of inﬁnite DAGs and continuous orders. The
Indian Chefs Process1 is a stochastic process for gener-
ating random DAGs from (9), making it an equivalent
representative of this distribution.
1Described in the supplementary material along with
some properties of the distribution. This content is not
necessary to reproduce the experimental results.

2.2
The Indian Chefs Process
Now that we have the marginal probability distribu-
tion (9), we want to draw random active subgraphs
from it. This section introduces the Indian chefs process
(ICP), a stochastic process serving this purpose. In the
ICP metaphor, chefs draw inspiration from other chefs,
based on their popularity and reputation, to create
the menu of their respective restaurant. This creates
inspiration maps representable with directed acyclic
graphs. ICP deﬁnes two types of chefs: 1) star chefs
(corresponding to observable variables) which are intro-
duced iteratively and 2) regular chefs (corresponding
to hidden variables) which appear only when another
chef selects them as a source of inspiration.
The ICP starts with an empty inspiration map as its
initial state. The inﬁnitely many chefs can be thought
of as lying on a unit interval of reputations. Every
chef has a fraction of the inﬁnitely many chefs above
him and this fraction is determined by the chef’s own
reputation.
The general procedure at iteration t is to introduce
a new star chef, denoted i, within a fully speciﬁed
map of inspiration representing the connections of the
previously processed chefs. The very ﬁrst step is to
draw a reputation value from θi ∼U(0, 1) to determine
the position of the star chef in the reputation interval.
Once chef i is added, sampling the new inspiration
connections is done in three steps.
Backward proposal
Step one consists in proposing
star chef i as an inspiration to all the ↓i chefs having
a lower reputation than chef i. To this end, we can
ﬁrst sample the total number of inspiration connections
with:
qi ∼Binomial

↓i,
φ
α + φ

,
(10)
and then uniformly pick one of the
 ↓i
qi

possible conﬁg-
urations of inspiration connections.
Selecting existing chefs
In step two, chef i consid-
ers any already introduced chefs of higher reputation.
The probability for candidate chef k to become an
inspiration for i is:
Zki ∼Bernoulli

mk + φI(k ∈star chefs)
α+ ↓k −1 + φI(k ∈star chefs)

,
(11)
where ↓k includes the currently processed chef i.
Selecting new chefs
The third step allows chef i to
consider completely new regular chefs as inspirations
in every single interval above i. The number of new
regular chefs Knew
j
to add in the jth reputation interval
above i follows probability distribution:
Knew
j
∼Poisson
 
(θ↗
j+1 −θ↗
j )αγ
α+ ↓j −1
!
,
(12)
where the new regular chefs are independently assigned
a random reputation drawn from U(θ↗
j , θ↗
j+1). The reg-
ular chefs introduced during this step will be processed
one by one using step two and three. Once all newly
introduced regular chefs have been processed, the next
iteration t + 1 can begin with step one, a step reserved
to star chefs only.
2.3
Some properties of the distribution
To better understand the eﬀect of the hyperparameters
on the graph properties, we performed an empirical
study of some relations between the hyperparameters,
the expected number of active nodes E[K+|α, γ] and
the expected number of active edges E[E+|α, γ], where
E+ is the number of elements in ZAA. Figure 1(a)
depicts level curves of E[K+|α, γ] for the case of only
1 observable placed at θk = 0. The ﬁgure shows that
several combinations of α and γ leads to the same
expected number of active nodes. Notice that ﬁxing
one hyperparameter, either α or γ, and selecting the
expected number of nodes, one can retrieve the second
hyperparameter that matches the relationship. We used
this fact in the construction of Figure 1(b) where the
unshown parameter γ could be calculated. In Figure
1(b), we illustrate the eﬀect of α on E[E+|α, γ] which
essentially shows that smaller values of α increase the
graph density.
When using Bayesian nonparametric models, we are
actually assuming that the generative model of the data
is inﬁnite-dimensional and that only a ﬁnite subset of
the parameters are involved in producing a ﬁnite set of
data. The eﬀective number of parameters explaining
the data corresponds to the model complexity and usu-
ally scales logarithmically with respect to the sample
size. Unlike most Bayesian nonparametric models, the
ICP prior scales according to the number of observed
nodes added to the network. In Figure 1, we show how
the expected number of active hidden nodes increases
as function of the number of observable nodes.
2.4
Connection to the Indian Buﬀet Process
There exists a close connection between the Indian
Chefs Process (ICP) and the Indian Buﬀet Process
(IBP). In fact, our model can be seen as a generalization
of the IBP. Firstly, all realizations of the IBP receive a
positive probability under the ICP. Secondly, the two-
parameter IBP [9] is recovered, at least conceptually,
when altering the prior on order values (see Eq. (1)) so

that all observed nodes are set to reputation θ = 0 and
all hidden nodes are set to reputation θ = 1. This way,
connections are prohibited between hidden nodes and
between observable nodes, while hidden-to-observable
connections are still permitted.
3
Structure Learning
In this section, we present a Markov Chain Monte Carlo
(MCMC) algorithm approximating the exact ICP prior
distribution with samples. We propose a reversible
jump MCMC algorithm producing random walks on
Eq. (9) [7]. This algorithm works in three phases: the
ﬁrst resamples graph connections without adding or
removing any nodes, the second phase is a birth-death
process on nodes and the third one only involves the
order.
The algorithm itself uses the notion of singleton and
orphan nodes.
A node is a singleton when it only
has a unique active child. Thus, removing its unique
connection would disconnect the node from the active
subgraph. Moreover, a node is said to be an orphan if
it does not have any parents.
Within model moves on adjacency matrix:
We
begin by uniformly selecting a node i from the active
subgraph.
Here, the set of parents to consider for
i comprises all non-singleton active nodes having an
order value greater than θi. This set includes both
current parents and candidate parents. Then, for each
parent k, we Gibbs sample the connections using the
following conditional probability:
p(Z↗
ki = 1|Z
↗¬ki
AA
, θA) =
m¬i
k + φI(k ∈O)
α+ ↓k −1 + φI(k ∈O) ,
(13)
where m¬i
k
is the number of outgoing connections of
node k excluding connections going to node i and
Z
↗¬ki
AA
has element ki removed. Also, all connections
not respecting the order are prohibited and therefore
have an occurrence probability of 0, along with (trans-
dimentional) singleton parent moves.
Trans-dimensional moves on adjacency matrix:
We begin with a random uniform selection of node
i in the active subgraph and, with equal probability,
propose either a birth or a death move.
In the birth case, we activate node k by connecting it to
node i. Its order θk is determined by uniformly selecting
an insertion interval above θi. Assuming node i is also
the ith element in θ↗
A , we have ↑i= K+ −i+1 possible
intervals, including zero-length intervals. Let us assume
that j and j + 1 are the two nodes between which k is
to be inserted. Then, we obtain the candidate order
value of the new node by sampling θk ∼U(θ↗
j , θ↗
j+1).
The Metropolis-Hastings acceptance ratio here is:
abirth = min
(
1,p(Z′↗
A′A′, Z′
I′A′, θ′↗
A′|α, γ, φ, O)
p(Z↗
AA, ZIA, θ↗
A |α, γ, φ, O)
·
(θ↗
j+1 −θ↗
j )(↑i +1)K+
K∗
i + 1
)
,
(14)
where K∗
i is the number of singleton-orphan parents
of i and ↑i= P
j∈A I(θj > θi) is the number of active
nodes above i.
In the death case, we uniformly select one of the K∗
i
singleton-orphan parents of i if K∗
i > 0 and simply do
nothing in case there exists no such node. Let k be the
parent to disconnect and consequently deactivate. The
Metropolis-Hastings acceptance ratio for this move is:
adeath = min
(
1,p(Z′↗
A′A′, Z′
I′A′, θ′↗
A′|α, γ, φ, O)
p(Z↗
AA, ZIA, θ↗
A |α, γ, φ, O)
·
K∗
i
(θ↗
j+1 −θ↗
j )(K+ −1) ↑i
)
.
(15)
If accepted, node k is removed from the active sub-
graph.
Moves on order values:
We re-sample the order
value of randomly picked node i. This operation is
done by ﬁnding the lowest order valued parent of i
along with its highest order valued children, which
we respectively denote l and h. Next, the candidate
order value is sampled according to θi ∼U(θl, θh) and
accepted with Metropolis-Hasting acceptance ratio:
aorder = min
(
1, p(Z↗
AA, ZIA, θ′↗
A |α, γ, φ, O)
p(Z↗
AA, ZIA, θ↗
A |α, γ, φ, O)
)
,
(16)
which proposes a new total order θ respecting the
partial order imposed by the rest of the DAG.
4
Experiments
The ICP distribution (9) can be used as a prior to
learn the structure of any DAG-based model involv-
ing hidden units. In particular, one can introduce a
priori knowledge about the structure by ﬁxing the or-
der values of some observed units. Feedforward neural
networks, for instance, can be modelled by imposing
θk = 1 for all input units and θk = 0 for the output
units. On the other hand, generative models can be
designed by placing all observed units at θk = 0, pre-
venting interconnections between them and forcing the
above generative units to explain the data. In section

0
1
2
3
4
5
1
2
3
4
5
6
7
8
γ
α
K+ = 2
K+ = 4
K+ = 5
K+ = 3
(a)
0
1
2
3
4
5
0
5
10
15
expected number of connections
α
K+ = 2
K+ = 5
K+ = 4
K+ = 3
(b)
2
4
6
8
10
0.5
1
1.5
2
2.5
3
number of observed variables
number of hidden variables
α = 0.5
α = 1.0
α = 1.5
α = 2.0
(c)
Figure 1: Empirical study of hyperpameters. Figure (a) shows the expected number of active nodes as a function
of α and γ. Figure (b) shows that once we know the expected K+ from α and γ, we can ﬁnd the expected number
of connections. Figure (c) shows the inﬂuence of α (with γ = 1) on the complexity (number of hidden nodes) as
function of the number of observable nodes.
4.1, we use the ICP as a prior to learn the structures
of a generative neural network by approximating the
full posterior for 9 datasets. In section 4.2, we use the
ICP to learn the structure of a convolutional neural
network (CNN) in a Bayesian learning framework.
4.1
Bayesian nonparametric generative
sigmoid network
The network used in this section is the Nonlinear Gaus-
sian Belief Network (NLGBN) [6], which is basically
a generative sigmoid network. In this model, the out-
put of a unit ui depends on a weighted sum of its
parents, where Wki represents the weight of parent
unit uk, Zki indicates whether uk is a parent of ui and
bi is a bias. The weighted sum is then corrupted by
a zero mean Gaussian noise of precision ρi, so that
ai ∼N(bi + P
k ZkiWkiuk, 1/ρi). The noisy preactiva-
tion ai is then passed through a sigmoid nonlinearity,
producing the output value ui. It turns out that the
density function of this random output ui can be rep-
resented in closed-form, a property used to form the
likelihood function given the data. An ICP prior is
placed on the structure represented by Z along with pri-
ors γ ∼Gamma(0.5, 0.5), 1/α ∼Gamma(0.5, 0.5) and
φ ∼Gamma(0.5, 0.5). To complete the prior on param-
eters, we specify ρk ∼Gamma(0.5, 0.5), bk ∼N(0, 1)
and Wki ∼N(0, 1).
The inference is done with MCMC where structure
operator are given in 3 and we refer to [1] for the pa-
rameter and activation operators. The Markov chain
explores the space of structures by creating and de-
stroying edge and nodes, which means that posterior
samples are of varying size and shape, while remaining
inﬁnitely layered due to θk ∈[0, 1]. We also simulate
the random activations uk and add them into the chain
state.
This experiment aims at reproducing the generative
process of synthetic data sources. In the learning phase,
we simulate the posterior distribution conditioned on
2000 training points. Fantasy data from the posterior
are generated by ﬁrst sampling a model from set of
posterior network samples and then one point is gen-
erated from the selected model. Figure 2 shows 2000
test samples from the true distribution along with the
samples generated from the posterior accounting for
the model uncertainty.
Next, we compare the ICP (with observables at θk = 0)
against other Bayesian nonparametric approaches: The
Cascading Indian Buﬀet Process [1] and the Extended
CIBP [4]. The inference for these models was done
with an MCMC algorithm similar to the one used for
the ICP and we used similar priors for the parameters
to ensure a fair comparison. The comparison metric
used in this experiments is the Hellinger distance (HD),
a function quantifying the similarity between two prob-
ability densities.
Table 1 shows the HD’s between
fantasy datasets generated and groundtruth.
4.2
Bayesian nonparametric convolutional
neural networks
So far, we introduced the ICP as a prior on the space of
directed acyclic graphs. In this section we will use this
formalism in order to construct a prior on the space of
convolutional neural architectures. The fundamental
building blocks of (2D) convolutional networks are
tensors T whose entries encode the presence of local
features in the input image. A convolutional neural
network can be described as a sequence of convolution
operators acting on these tensors followed by entry-wise
nonlinearity f.
In our nonparametric model, a convolutional network is
constructed from a directed acyclic graph. Each node
of the graph represents a tensor T (i). The entries of
this tensor are given by the following:
T (i) = ReLu


X
k∈Parents(i)
W (ki) ⋆T (k)

.
(17)

−2
−1
0
1
2
1.5
−1
0.5
0
0.5
1
1.5
(a) groundtruth
−2
−1
0
1
2
1.5
−1
0.5
0
0.5
1
1.5
(b) fantasy
−3
−2
−1
0
1
2
3
−3
−2
−1
0
1
2
3
(c) groundtruth
−3
−2
−1
0
1
2
3
−3
−2
−1
0
1
2
3
(d) fantasy
−2
−1
0
1
2
1.5
−1
0.5
0
0.5
1
1.5
(e) groundtruth
−2
−1
0
1
2
1.5
−1
0.5
0
0.5
1
1.5
(f) fantasy
Figure 2: Resulting fantasy data generated from the posterior on 3 toy datasets.
Table 1: Hellinger distance between the fantasy data from posterior models and the test set. Dimensionality of
the data is in parenthesis. The baseline shows the distance between the training and test sets, representing the
best achievable distance since the two come from the true source.
Data set
Ring (2)
Two Moons (2)
Pinwheel (2)
Geyser (2)
Iris (4)
Yeast (8)
Abalone (9)
Cloud (10)
Wine (12)
ICP
0.0402
0.0342
0.0547
0.0734
0.2666
0.3817
0.1379
0.1495
0.3629
CIBP
0.0493
0.0469
0.0692
0.1246
0.2667
0.4056
0.1502
0.1713
0.4079
ECIBP
0.0419
0.0450
0.0685
0.1171
0.2632
0.3840
0.1470
0.1501
0.3855
Baseline
0.0312
0.0138
0.0436
0.0234
0.1930
0.3059
0.1079
0.1299
0.3387
where W (ki) is a tensor of convolutional weights and ⋆is
the discrete convolution operator. In most hand-crafted
architectures, the spatial dimensions of the tensor are
course-grained as the depth increases while the number
of channels (each representing a local feature of the
input) increases. In the ICP, the depth of a node i is
represented by its popularity θi. In order to encode
the change of shape in the nonparametric prior, we set
the number of channels to be a function of θ:
Nc(θ) = 2⌊Nbins(1−θ))⌋+ N0 ,
(18)
where Nbins is the number of diﬀerent possible tensor
shapes and N0 is the number of channels of the lowest
layers. Similarly, the number of pixels is given by:
Np(θ) = 2−⌊Nbins(1−θ))⌋M ,
(19)
where M is the number of pixels in the original image.
The shape of the weight tensors W (ki) is determined
by the shape of parent and child tensor.
In a classiﬁcation problem, the nonparametric convolu-
tional network is connected to the data through two
observed nodes. The input node X stores the input
images and we set θX = 1. On the other hand, for the
output node we set θY = 0, and have it receive input
through fully connected layers:
Y = SoftMax


X
k∈Parents(Y )

X
a,b,c
V (k)
a
T (k)
abc



, (20)
where V (k) is a tensor of weights. During sampling
of a connection Zki in the directed acyclic graph, the
log acceptance ratio needs to be summed to the log
marginal-likelihood ratio:
log alk = log p(y | DAG, X)−log p(y | DAGproposal, X) .
(21)
In this paper, we use a point estimate of the log model
evidence:
p(y | DAG, x) ≈p(y | DAG, { ˆW (ki)}, x) ,
(22)
where
ˆW (jk)
are
the
parameters
of
the
net-
work optimized using Adam (alpha=0.1, beta1=0.9,
beta2=0.999, eps=1e-08, eta=1.0) [14].
We performed architecture sampling on the MNIST
dataset. For computational reasons, we restricted the
dataset to the ﬁrst three classes (1,2 and 3). We sam-
pled the DAGs using the MCMC sampler introduced
in section 3 with prior parameters α = 1, γ = 20 and
φ = 5. For each sampled DAG, we trained the induced
convolutional architecture until convergence (540 iter-
ations, batch size equal to 100). The number of bins
in the partition of the range of the popularity was ﬁve
and the number of channels of the ﬁrst convolutional
layer was four. We ran 15 independent Markov chains
in order to sample from multiple modes. Each chain
consisted of 300 accepted samples. After sampling, all
chains were merged, resulting in a total of 4500 sampled
architectures.
Figure 3A shows accuracy and descriptive statistics of
the sampled convolutional architectures. In all these
statistics, we only considered nodes that receive input
from the input node (directly or indirectly) as the re-
maining nodes do not contribute to the forward pass
of the network. The network width is quantiﬁed as
the total number of directed paths between input and
output nodes, while depth is quantiﬁed as the maxi-
mal directed path length. The sampler reaches a wide
range of diﬀerent architectures, whose number of layers
range from three to ﬁfteen, and whose average degree
range from one to four. Some examples of architectures
are shown in Figure 3C. Interestingly, the correlation
between the number of nodes, degree, width and depth

0.6
1.0
0.8
0
15
5
10
4
1
2
7.5
2.5
5.0
0
20
10
0.6
1.0
0.8
0
15
5
10
4
1
2
7.5
2.5
5.0
0.6
1.0
0.8
0
15
5
10
4
1
2
0.6
1.0
0.8
0
15
5
10
0.6
1.0
0.8
A
B
0.6
1.0
0.8
0.6
1.0
0.8
0.6
1.0
0.8
0.6
1.0
0.8
C
Reputation
Mean
Std
Min
Max
input
output
1
2
3
4
7
5
6
output
input
1
2
input
output
1
Accuracy
#Nodes
Avg. Degree
Depth
Width
Width
Depth
Avg. Degree
#Nodes
Accuracy
Figure 3: Statistics of the sampled convolutional ar-
chitectures. A) Histograms and bivariate density plots
of test set accuracy, number of nodes, average degree
width and depth. The three colored crosses denote
the statistics of the three visualized networks. B) His-
togram of the mean, standard deviation, min and max
of the popularity values.
and accuracy is very low. Most likely, this is due to
the simple nature of the MNIST task. The ensemble
accuracy (0.95), obtained by averaging the label prob-
abilities over all samples, is higher that the average
accuracy (0.91), but lower that the maximum accu-
racy (0.99). Figure 3B shows the histograms of mean,
standard deviation, minimum and maximum of the
popularity values in the networks.
5
Conclusion and Future Work
This paper introduces the Indian Chefs Process (ICP),
a Bayesian nonparametric distribution on the joint
space of inﬁnite directed acyclic graphs and orders.
The model allows for a novel way of learning the struc-
ture of deep learning models. As a proof-of-concept,
we have demonstrated how the ICP can be used to
learn the architecture of convolutional deep networks
trained on the MNIST data set. However. for more
realistic applications, several eﬃciency improvements
are required. Firstly, the inference procedure over the
model parameters could be performed using stochastic
Hamiltonian MCMC [16]. This removes the need to
fully train the network for every sampled DAG. An-
other possible improvement is to add deep learning
speciﬁc sampling moves. For example, it is possible to
include a increase-depth move that replaces a connec-
tion with a path comprised by two connections and a
latent node. Future applications of the ICP may ex-
tend beyond deep learning architectures. For example,
the ICP may serve as a basis for nonparametric causal
inference, where a DAG structure is learned when the
exact number of relevant variables is not known a pri-
ori, or when certain relevant input variables are not
observed [19].
References
[1] R. P. Adams, H. M. Wallach, and Z. Ghahramani.
Learning the structure of deep sparse graphical
models. In Proceedings of the 13th International
Conference on Artiﬁcial Intelligence and Statistics,
2010.
[2] S. Banerjee and S. Ghosal. Bayesian structure
learning in graphical models. Journal of Multi-
variate Analysis, 136:147–162, 2015.
[3] S. P. Chatzis and G. Tsechpenakis. The inﬁnite
hidden Markov random ﬁeld model. Neural Net-
works, IEEE Transactions on, 21(6):1004–1014,
2010.
[4] P. Dallaire, P. Giguere, and B. Chaib-draa. Learn-
ing the structure of probabilistic graphical models
with an extended cascading Indian buﬀet process.
In Twenty-Eighth AAAI Conference on Artiﬁcial
Intelligence, 2014.
[5] F. Doshi, D. Wingate, J. Tenenbaum, and N. Roy.
Inﬁnite dynamic Bayesian networks. In Proceed-
ings of the 28th International Conference on Ma-
chine Learning (ICML-11), pages 913–920, 2011.
[6] B. J. Frey. Continuous sigmoidal belief networks
trained using slice sampling. In Advances in Neural
Information Processing Systems 9, pages 452–458.
MIT Press, 1997.
[7] P. J. Green and D. I. Hastie. Reversible jump
MCMC. Genetics, 155(3):1391–1403, 2009.
[8] T. Griﬃths and Z. Ghahramani. Inﬁnite latent
feature models and the indian buﬀet process. Ad-
vances in neural information processing systems,
18:475, 2006.
[9] T. L. Griﬃths and Z. Ghahramani. The indian
buﬀet process: An introduction and review. The
Journal of Machine Learning Research, 12:1185–
1224, 2011.
[10] N. Hjort, C. Holmes, P. Muller, and S. Walker. An
invitation to bayesian nonparametrics. Bayesian
Nonparametrics, 28:1, 2009.

[11] K. Ickstadt, B. Bornkamp, M. Grzegorczyk,
J. Wieczorek, M. R. Sheriﬀ, H. E. Grecco, and
E. Zamir. Nonparametric Bayesian Networks. Ox-
ford University Press, 2010.
[12] Y. Jiang and A. Saxena. Inﬁnite latent conditional
random ﬁelds. In Proceedings of the IEEE Interna-
tional Conference on Computer Vision Workshops,
pages 262–266, 2013.
[13] M. I. Jordan. Learning in graphical models, vol-
ume 89. Springer Science & Business Media, 1998.
[14] D. P. Kingma and J. Ba.
Adam:
A method
for stochastic optimization.
arXiv preprint
arXiv:1412.6980, 2014.
[15] T.-Y. Kwok and D.-Y. Yeung. Constructive algo-
rithms for structure learning in feedforward neural
networks for regression problems. IEEE transac-
tions on neural networks, 8(3):630–645, 1997.
[16] Y.-A. Ma, T. Chen, and E. Fox.
A complete
recipe for stochastic gradient MCMC. In Advances
in Neural Information Processing Systems, pages
2917–2925, 2015.
[17] V. Mansinghka, C. Kemp, T. Griﬃths, and
J. Tenenbaum. Structured priors for structure
learning. arXiv preprint arXiv:1206.6852, 2012.
[18] A. Mohammadi, E. C. Wit, et al. Bayesian struc-
ture learning in sparse gaussian graphical models.
Bayesian Analysis, 10(1):109–138, 2015.
[19] K. Mohan, J. Pearl, and J. Tian. Graphical models
for inference with missing data. In C. J. C. Burges,
L. Bottou, M. Welling, Z. Ghahramani, and K. Q.
Weinberger, editors, Advances in Neural Infor-
mation Processing Systems 26, pages 1277–1285.
Curran Associates, Inc., 2013.
[20] P. Orbanz and Y. W. Teh. Bayesian nonparametric
models.
In Encyclopedia of Machine Learning,
pages 81–89. Springer, 2010.
[21] J. Paisley. Machine Learning with Dirichlet and
Beta Process Priors: Theory and Applications.
PhD thesis, Duke University, Durham, North Car-
olina, 2010.
[22] R. Y. Rohekar, S. Nisimov, Y. Gurwicz, G. Koren,
and G. Novik. Constructing deep neural networks
by bayesian network structure learning. In Ad-
vances in Neural Information Processing Systems,
pages 3047–3058, 2018.
[23] M. Schmidt, A. Niculescu-Mizil, K. Murphy,
et al. Learning graphical model structure using
l1-regularization paths. In AAAI, volume 7, pages
1278–1283, 2007.
[24] D. G. R. Tervo, J. B. Tenenbaum, and S. J. Gersh-
man. Toward the neural implementation of struc-
ture learning. Current opinion in neurobiology,
37:99–105, 2016.
[25] I. Valera, F. Ruiz, L. Svensson, and F. Perez-Cruz.
Inﬁnite factorial dynamical model. In Advances
in Neural Information Processing Systems, pages
1657–1665, 2015.
[26] W. Wen, C. Wu, Y. Wang, Y. Chen, and H. Li.
Learning structured sparsity in deep neural net-
works. In Advances in neural information process-
ing systems, pages 2074–2082, 2016.

