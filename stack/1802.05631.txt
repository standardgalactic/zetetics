Direct Estimation of Differences in Causal Graphs
Yuhao Wang
Lab for Information & Decision Systems
and Institute for Data, Systems and Society
Massachusetts Institute of Technology
Cambridge, MA 02139
yuhaow@mit.edu
Chandler Squires
Lab for Information & Decision Systems
and Institute for Data, Systems and Society
Massachusetts Institute of Technology
Cambridge, MA 02139
csquires@mit.edu
Anastasiya Belyaeva
Lab for Information & Decision Systems
and Institute for Data, Systems and Society
Massachusetts Institute of Technology
Cambridge, MA 02139
belyaeva@mit.edu
Caroline Uhler
Lab for Information & Decision Systems
and Institute for Data, Systems and Society
Massachusetts Institute of Technology
Cambridge, MA 02139
cuhler@mit.edu
Abstract
We consider the problem of estimating the differences between two causal directed
acyclic graph (DAG) models with a shared topological order given i.i.d. samples
from each model. This is of interest for example in genomics, where changes in
the structure or edge weights of the underlying causal graphs reﬂect alterations in
the gene regulatory networks. We here provide the ﬁrst provably consistent method
for directly estimating the differences in a pair of causal DAGs without separately
learning two possibly large and dense DAG models and computing their difference.
Our two-step algorithm ﬁrst uses invariance tests between regression coefﬁcients
of the two data sets to estimate the skeleton of the difference graph and then orients
some of the edges using invariance tests between regression residual variances. We
demonstrate the properties of our method through a simulation study and apply
it to the analysis of gene expression data from ovarian cancer and during T-cell
activation.
1
Introduction
Directed acyclic graph (DAG) models, also known as Bayesian networks, are widely used to model
causal relationships in complex systems. Learning the causal DAG from observations on the nodes is
an important problem across disciplines [10, 30, 36, 42]. A variety of causal inference algorithms
based on observational data have been developed, including the prominent PC [42] and GES [24]
algorithms, among others [41, 44]. However, these methods require strong assumptions [45]; in
particular, theoretical analysis of the PC [16] and GES [27, 46] algorithms have shown that these
methods are usually not consistent in the high-dimensional setting, i.e. when the number of nodes is
of the same order or exceeds the number of samples, unless highly restrictive assumptions on the
sparsity and/or the maximum degree of the underlying DAG are made.
The presence of high degree hub nodes is a well-known feature of many networks [2, 3], thereby
limiting the direct applicability of causal inference algorithms. However, in many applications,
the end goal is not to recover the full causal DAG but to detect changes in the causal relations
between two related networks. For example, in the analysis of EEG signals it is of interest to detect
neurons or different brain regions that interact differently when the subject is performing different
activities [37]; in biological pathways genes may control different sets of target genes under different
Preprint. Work in progress.
arXiv:1802.05631v3  [stat.ME]  7 Nov 2018

cellular contexts or disease states [13, 33]. Due to recent technological advances that allow the
collection of large-scale EEG or single-cell gene expression data sets in different contexts there is
a growing need for methods that can accurately identify differences in the underlying regulatory
networks and thereby provide key insights into the underlying system [13, 33]. The limitations of
causal inference algorithms for accurately learning large causal networks with hub nodes and the
fact that the difference of two related networks is often sparse call for methods that directly learn the
difference of two causal networks without having to estimate each network separately.
The complimentary problem to learning the difference of two DAG models is the problem of inferring
the causal structure that is invariant across different environments. Algorithms for this problem have
been developed in recent literature [11, 32, 48]. However, note that the difference DAG can only be
inferred from the invariant causal structure if the two DAGs are known. The problem of learning the
difference between two networks has been considered previously in the undirected setting [20, 21, 49].
However, the undirected setting is often insufﬁcient: only a causal (i.e., directed) network provides
insights into the effects of interventions such as knocking out a particular gene. In this paper we
provide to our knowledge the ﬁrst provably consistent method for directly inferring the differences
between pairs of causal DAG models that does not require learning each model separately.
The remainder of this paper is structured as follows: In Section 2, we set up the notation and review
related work. In Section 3, we present our algorithm for directly estimating the difference of causal
relationships and in Section 4, we provide consistency guarantees for our algorithm. In Section 5,
we evaluate the performance of our algorithm on both simulated and real datasets including gene
expression data from ovarian cancer and T cell activation.
2
Preliminaries and Related Work
Let G = ([p], A) be a DAG with node set [p] := {1, · · · , p} and arrow set A. Without loss of
generality we label the nodes such that if i →j in G then i < j (also known as topological ordering).
To each node i we associate a random variable Xi and let P be a joint distribution over the random
vector X = (X1, · · · , Xp)T . In this paper, we consider the setting where the causal DAG model is
given by a linear structural equation model (SEM) with Gaussian noise, i.e.,
X = BT X + ϵ
where B (the autoregressive matrix) is strictly upper triangular consisting of the edge weights of G,
i.e., Bij ̸= 0 if and only if i →j in G, and the noise ϵ ∼N(0, Ω) with Ω:= diag(σ2
1, · · · , σ2
p), i.e.,
there are no latent confounders. Denoting by Σ the covariance matrix of X and by Θ its inverse (i.e.,
the precision matrix), a short computation yields Θ = (I −B)Ω−1(I −B)T , and hence
Θij = −σ−2
j Bij +
X
k>j
σ−2
k BikBjk, ∀i ̸= j
and
Θii = σ−2
i
+
X
j>i
σ−2
j B2
ij, ∀i ∈[p].
(1)
This shows that the support of Θ is given by the moral graph of G, obtained by adding an edge
between pairs of nodes that have a common child and removing all edge orientations. By the causal
Markov assumption, which we assume throughout, the missing edges in the moral graph encode a
subset of the conditional independence (CI) relations implied by a DAG model on G; the complete set
of CI relations is given by the d-separations that hold in G [18][Section 3.2.2]; i.e., Xi ⊥⊥Xj | XS
in P whenever nodes i and j are d-separated in G given a set S ⊆[p] \ {i, j}. The faithfulness
assumption is the assertion that all CI relations entailed by P are implied by d-separation in G.
A standard approach for causal inference is to ﬁrst infer CI relations from the observations on the
nodes of G and then to use the CI relations to learn the DAG structure. However, several DAGs can
encode the same CI relations and therefore, G can only be identiﬁed up to an equivalence class of
DAGs, known as the Markov equivalence class (MEC) of G, which we denote by [G]. In [47], the
author gave a graphical characterization of the members of [G]; namely, two DAGs are in the same
MEC if and only if they have the same skeleton (i.e., underlying undirected graph) and the same
v-structures (i.e., induced subgraphs of the form i →j ←k). [G] can be represented combinatorially
by a partially directed graph with skeleton G and an arrow for those edges in G that have the same
orientation in all members of [G]. This is known as the CP-DAG (or essential graph) of G [1].
Various algorithms have been developed for learning the MEC of G given observational data on the
nodes, most notably the prominent GES [24] and PC algorithms [42]. While GES is a score-based
2

approach that greedily optimizes a score such as the BIC (Bayesian Information Criterion) over the
space of MECs, the PC algorithm views causal inference as a constraint satisfaction problem with the
constraints being the CI relations. In a two-stage approach, the PC algorithm ﬁrst learns the skeleton
of the underlying DAG and then determines the v-structures, both from the inferred CI relations.
GES and the PC algorithms are provably consistent, meaning they output the correct MEC given an
inﬁnite amount of data, under the faithfulness assumption. Unfortunately, this assumption is very
sensitive to hypothesis testing errors for inferring CI relations from data and violations are frequent
especially in non-sparse graphs [45]. If the noise variables in a linear SEM with additive noise are
non-Gaussian, the full causal DAG can be identiﬁed (as opposed to just its MEC) [39], for example
using the prominent LiNGAM algorithm [39]. Non-Gaussianity and sparsity of the underlying graph
in the high-dimensional setting are crucial for consistency of LiNGAM.
In this paper, we develop a two-stage approach, similar to the PC algorithm, for directly learning
the difference between two linear SEMs with additive Gaussian noise on the DAGs G and H. Note
that naive algorithms that separately estimate [G] and [H] and take their differences can only identify
edges that appeared/disappeared and cannot identify changes in edge weights (since the DAGs are
not identiﬁable). Our algorithm overcomes this limitation. In addition, we show in Section 4 that
instead of requiring the restrictive faithfulness assumption on both DAGs G and H, consistency of
our algorithm only requires assumptions on the (usually) smaller and sparser network of differences.
Let P(1) and P(2) be a pair of linear SEMs with Gaussian noise deﬁned by (B(1), ϵ(1)) and (B(2), ϵ(2)).
Throughout, we make the simplifying assumption that both B(1) and B(2) are strictly upper triangular,
i.e., that the underlying DAGs G(1) and G(2) share the same topological order. This assumption
is reasonable for example in applications to genomics, since genetic interactions may appear or
disappear, change edge weights, but generally do not change directions. For example, in biological
pathways an upstream gene does not generally become a downstream gene in different conditions.
Hence B(1) −B(2) is also strictly upper triangular and we deﬁne the difference-DAG (D-DAG) of the
two models by ∆:= ([p], A∆) with i →j ∈A∆if and only if B(1)
ij ̸= B(2)
ij ; i.e., an edge i →j in
∆represents a change in the causal effect of i on j, including changes in the presence/absence of
an effect as well as changes in edge weight. Given i.i.d. samples from P(1) and P(2), our goal is to
infer ∆. Just like estimating a single causal DAG model, the D-DAG ∆is in general not completely
identiﬁable, in which case we wish to identify the skeleton ¯∆as well as a subset of arrows ˜A∆.
A simpler task is learning differences of undirected graphical models. Let Θ(1) and Θ(2) denote
the precision matrices corresponding to P(1) and P(2). The support of Θ(k) consists of the edges in
the undirected graph (UG) models corresponding to P(k). We deﬁne the difference-UG (D-UG) by
∆Θ := ([p], E∆Θ), with i −j ∈E∆Θ if and only if Θ(1)
ij
̸= Θ(2)
ij for i ̸= j. Two recent methods
that directly learn the difference of two UG models are KLIEP [21] and DPM [49]; for a review and
comparison of these methods see [20]. These methods can be used as a ﬁrst step towards estimating
the D-DAG ∆: under genericity assumptions, the formulae for Θij in (1) imply that if B(1)
ij ̸= B(2)
ij
then Θ(1)
ij ̸= Θ(2)
ij . Hence, the skeleton of ∆is a subgraph of ∆Θ, i.e., ¯∆⊆∆Θ. In the following
section we present our algorithm showing how to obtain ¯∆and determine some of the edge directions
in ∆. We end this section with a piece of notation needed for introducing our algorithm; we deﬁne
the set of changed nodes to be SΘ :=

i | ∃j ∈[p] such that Θ(1)
i,j ̸= Θ(2)
i,j
	
.
3
Difference Causal Inference Algorithm
In Algorithm 1 we present our Difference Causal Inference (DCI) algorithm for directly learning
the difference between two linear SEMs with additive Gaussian noise given i.i.d. samples from each
model. Our algorithm consists of a two-step approach similar to the PC algorithm. The ﬁrst step,
Algorithm 1 Difference Causal Inference (DCI) algorithm
Input: Sample data ˆX(1), ˆX(2).
Output: Estimated skeleton ¯∆and arrows ˜AΘ of the D-DAG ∆.
Estimate the D-UG ∆Θ and SΘ; use Algorithm 2 to estimate ¯∆; use Algorithm 3 to estimate ˜A∆.
3

Algorithm 2 Estimating skeleton of the D-DAG
Input: Sample data ˆX(1), ˆX(2), estimated D-UG ∆Θ, estimated set of changed nodes SΘ.
Output: Estimated skeleton ¯∆.
Set ¯∆:= ∆Θ;
for each edge i −j in ¯∆do
If ∃S ⊆SΘ \{i, j} such that β(k)
i,j|S is invariant across k = {1, 2}, delete i−j in ¯∆and continue
to the next edge. Otherwise, continue.
end for
Algorithm 3 Directing edges in the D-DAG
Input: Sample data ˆX(1), ˆX(2), estimated set of changed nodes SΘ, estimated skeleton ¯∆.
Output: Estimated set of arrows ˜A∆.
Set ˜A∆:= ∅;
for each node j incident to at least one undirected edge in ¯∆do
If ∃S ⊆SΘ \ {j} such that σ(k)
j|S is invariant across k = {1, 2}, add i →j to ˜A∆for all i ∈S,
and add j →i to ˜A∆for all i ̸∈S and continue to the next node. Otherwise, continue.
end for
Orient as many undirected edges as possible via graph traversal using the following rule:
Orient i −j into i →j whenever there is a chain i →ℓ1 →· · · →ℓt →j.
described in Algorithm 2, estimates the skeleton of the D-DAG by removing edges one-by-one.
Algorithm 2 takes ∆Θ and SΘ as input. In the high-dimensional setting, KLIEP can be used to
estimate ∆Θ and SΘ. For completeness, in the Supplementary Material we also provide a constraint-
based method that consistently estimates ∆Θ and SΘ in the low-dimensional setting for general
additive noise models. Finally, ∆Θ can also simply be chosen to be the complete graph with SΘ = [p].
These different initiations of Algorithm 2 are compared via simulations in Section 5. The second step
of DCI, described in Algorithm 3, infers some of the edge directions in the D-DAG. While the PC
algorithm uses CI tests based on the partial correlations for inferring the skeleton and for determining
edge orientations, DCI tests the invariance of certain regression coefﬁcients across the two data sets
in the ﬁrst step and the invariance of certain regression residual variances in the second step. These
are similar to the regression invariances used in [11] and are introduced in the following deﬁnitions.
Deﬁnition 3.1. Given i, j ∈[p] and S ⊆[p] \ {i, j}, let M := {i} ∪S and let β(k)
M be the best
linear predictor of X(k)
j
given X(k)
M , i.e., the minimizer of E[(X(k)
j
−(β(k)
M )T X(k)
M )2]. We deﬁne the
regression coefﬁcient β(k)
i,j|S to be the entry in β(k)
M corresponding to i.
Deﬁnition 3.2. For j ∈[p] and S ⊆[p] \ {j}, we deﬁne (σ(k)
j|S)2 to be the variance of the regression
residual when regressing X(k)
j
onto the random vector X(k)
S .
Note that in general β(k)
i,j|S ̸= β(k)
j,i|S. Each entry in B(k) can be interpreted as a regression coefﬁcient,
namely B(k)
ij
= β(k)
i,j|(Pa(k)(j)\{i}), where Pa(k)(j) denotes the parents of node j in G(k). Thus, when
B(1)
ij
= B(2)
ij , then there exists a set S such that β(k)
i,j|S stays invariant across k = {1, 2}. This
motivates using invariances between regression coefﬁcients to determine the skeleton of the D-DAG.
For orienting edges, observe that when σ(k)
j
stays invariant across two conditions, σ(k)
j|S would also
stay invariant if S is chosen such that S = Pa(1)(j) ∪Pa(2)(j). This motivates using invariances of
residual variances to discover the parents of node j and assign orientations afterwards. Similar to [11]
we use hypothesis tests based on the F-test for testing the invariance between regression coefﬁcients
and residual variances. See the Supplementary Material for details regarding the construction of
these hypothesis tests, the derivation of their asymptotic distribution, and an example outlining the
difference of this approach to [11] for invariant structure learning.
4

Example 3.3. We end this section with a 4-node example showing how the DCI algorithm works.
Let B(1) and B(2) be the autoregressive matrices deﬁned by the edge weights of G(1) and G(2) and
let the noise variances satisfy the following invariances:
G(1)
1
2
3
4
0.5
0.5
0.5
1
G(2)
1
2
3
4
1
1
0.8
0.5
σ(1)
1
̸= σ(2)
1 ,
σ(1)
3
= σ(2)
3 ,
σ(1)
2
= σ(2)
2 ,
σ(1)
4
̸= σ(2)
4 ;
=⇒
DCI output:
1
2
3
4
Initiating Algorithm 2 with ∆Θ being the complete graph and SΘ = [4], the output of the DCI
algorithm is shown above.
4
Consistency of DCI
The DCI algorithm is consistent if it outputs a partially oriented graph ˆ∆that has the same skeleton as
the true D-DAG and whose oriented edges are all correctly oriented. Just as methods for estimating a
single DAG require assumptions on the underlying model (e.g. the faithfulness assumption) to ensure
consistency, our method for estimating the D-DAG requires assumptions on relationships between
the two underlying models. To deﬁne these assumptions it is helpful to view (σ(k)
j
)j∈[p] and the
non-zero entries (B(k)
ij )(i,j)∈A(k) as variables or indeterminates and each entry of Θ(k) as a rational
function, i.e., a fraction of two polynomials in the variables B(k)
ij and σ(k)
j
as deﬁned in (1). Using
Schur complements one can then similarly express β(k)
v,w|S and (σ(k)
w|S)2 as a rational function in the
entries of Θ(k) and hence as a rational function in the variables (B(k)
ij )(i,j)∈A(k) and (σ(k)
j
)j∈[p]. The
exact formulae are given in the Supplementary Material.
Clearly, if B(1)
ij = B(2)
ij ∀(i, j) and σ(1)
j
= σ(2)
j
∀j ∈[p], then β(1)
v,w|S = β(2)
v,w|S and σ(1)
w|S = σ(2)
w|S for
all v, w, S. For consistency of the DCI algorithm we assume that the converse is true as well, namely
that differences in Bij and σj in the two distributions are not “cancelled out” by changes in other
variables and result in differences in the regression coefﬁcients and regression residual variances. This
allows us to deduce invariance patterns of the autoregressive matrix B(k) from invariance patterns of
the regression coefﬁcients and residual variances, and hence differences of the two causal DAGs.1
Assumption 4.1. For any choice of i, j ∈SΘ, if B(1)
ij ̸= B(2)
ij then for all S ⊆SΘ\{i, j} it holds that
β(1)
i,j|S ̸= β(2)
i,j|S and β(1)
j,i|S ̸= β(2)
j,i|S.
Assumption 4.2. For any choice of i, j ∈SΘ it holds that
1. if B(1)
ij ̸= B(2)
ij , then ∀S ⊆SΘ \ {i, j}, σ(1)
j|S ̸= σ(2)
j|S
and
σ(1)
i|S∪{j} ̸= σ(2)
i|S∪{j}.
2. if σ(1)
j
̸= σ(2)
j , then σ(1)
j|S ̸= σ(2)
j|S for all S ⊆SΘ \ {j}.
Assumption 4.1 ensures that the skeleton of the D-DAG is inferred correctly, whereas Assumption 4.2
ensures that the arrows returned by the DCI algorithm are oriented correctly. These assumptions
are the equivalent of the adjacency-faithfulness and orientation-faithfulness assumptions that ensure
consistency of the PC algorithm for estimating the MEC of a causal DAG [35].
We now provide our main results, namely consistency of the DCI algorithm. For simplicity we here
discuss the consistency guarantees when Algorithm 2 is initialized with ∆Θ being the complete graph
and SΘ = [p]. However, in practice we recommend initialization using KLIEP (see also Section 5) to
avoid performing an unnecessarily large number of conditional independence tests. The consistency
guarantees for such an initialization including a method for learning the D-DAG in general additive
noise models (that are not necessarily Gaussian) is provided in the Supplementary Material.
1This is similar to the faithfulness assumption in the Gaussian setting, where partial correlations are used
for CI testing; the partial correlations are rational functions in the variables B(k)
ij
and σ(k)
j
and the faithfulness
assumption asserts that if a partial correlation ρij|S is zero then the corresponding rational function is identically
equal to zero and hence Bij = 0 [19].
5

Theorem 4.3. Given Assumption 4.1, Algorithm 2 is consistent in estimating the skeleton of the
D-DAG ∆.
The proof is given in the Supplementary Material. The main ingredient is showing that if B(1)
ij = B(2)
ij ,
then there exists a conditioning set S ⊆SΘ \ {i, j} such that β(1)
i,j|S = β(2)
i,j|S, namely the parents of
node j in both DAGs excluding node i. Next, we provide consistency guarantees for Algorithm 3.
Theorem 4.4. Given Assumption 4.2, all arrows ˜A∆output by Algorithm 3 are correctly oriented.
In particular, if σ(k)
i
is invariant across k = {1, 2}, then all edges adjacent to i are oriented.
Similar to the proof of Theorem 4.3, the proof follows by interpreting the rational functions corre-
sponding to regression residual variances in terms of d-connecting paths in G(k) and is given in the
Supplementary Material. It is important to note that as a direct corollary to Theorem 4.4 we obtain
sufﬁcient conditions for full identiﬁability of the D-DAG (i.e., all arrows) using the DCI algorithm.
Corollary 4.5. Given Assumptions 4.1 and 4.2, and assuming that the error variances are the same
across the two distributions, i.e. Ω(1) = Ω(2), the DCI algorithm outputs the D-DAG ∆.
In addition, we conjecture that Algorithm 3 is complete, i.e., that it directs all edges that are identiﬁable
in the D-DAG. We end this section with two remarks, namely regarding the sample complexity of the
DCI algorithm and an evaluation of how restrictive Assumptions 4.1 and 4.2 are.
Remark 4.6 (Sample complexity of DCI). For constraint-based methods such as the PC or DCI
algorithms, the sample complexity is determined by the number of hypothesis tests performed by
the algorithm [16]. In the high-dimensional setting, the number of hypothesis tests performed by
the PC algorithm scales as O(ps), where p is the number of nodes and s is the maximum degree
of the DAG, thereby implying severe restrictions on the sparsity of the DAG given a reasonable
sample size. Meanwhile, the number of hypothesis tests performed by the DCI algorithm scales as
O(|∆Θ|2|SΘ|−1) and hence does not depend on the degree of the two DAGs. Therefore, even if the
two DAGs G(1) and G(2) are high-dimensional and highly connected, the DCI algorithm is consistent
and has a better sample complexity (as compared to estimating two DAGs separately) as long as the
differences between G(1) and G(2) are sparse, i.e., |SΘ| is small compared to p and s.
Remark 4.7 (Strength of Assumptions 4.1 and 4.2). Since faithfulness, a standard assumption for
consistency of causal inference algorithms to estimate an MEC, is known to be restrictive [45], it is of
interest to compare Assumptions 4.1 and 4.2 to the faithfulness assumption of P(k) with respect to G(k)
for k ∈{1, 2}. In the Supplementary Material we provide examples showing that Assumptions 4.1
and 4.2 do not imply the faithfulness assumption on the two distributions and vice-versa. However, in
the ﬁnite sample regime we conjecture Assumptions 4.1 and 4.2 to be weaker than the faithfulness
assumption: violations of faithfulness as well as of Assumptions 4.1 and 4.2 correspond to points
that are close to conditional independence hypersurfaces [45]. The number of these hypersurfaces
(and hence the number of violations) increases in s for the faithfulness assumption and in SΘ for
Assumptions 4.1 and 4.2. Hence if the two DAGs G(1) and G(2) are large and complex while having a
sparse difference, then SΘ << s. See the Supplementary Material for more details.
5
Evaluation
In this section, we compare our DCI algorithm with PC and GES on both synthetic and real data. The
code utilized for the following experiments can be found at https://github.com/csquires/dci.
5.1
Synthetic data
We analyze the performance of our algorithm in both, the low- and high-dimensional setting. For
both settings we generated 100 realizations of pairs of upper-triangular SEMs (B(1), ϵ(1)) and
(B(2), ϵ(2)). For B(1), the graphical structure was generated using an Erdös-Renyi model with
expected neighbourhood size s, on p nodes and n samples. The edge weights were uniformly drawn
from [−1, −0.25] ∪[0.25, 1] to ensure that they were bounded away from zero. B(2) was then
generated from B(1) by adding and removing edges with probability 0.1, i.e.,
B(2)
ij
i.i.d.
∼Ber(0.9) · B(1)
ij if B(1)
ij ̸=0,
B(2)
ij
i.i.d.
∼Ber(0.1) · Unif([−1, −.25] ∪[.25, 1]) if B(1)
ij =0
6

(a) skeleton
(b) skeleton & orientation
(c) changed variances
Figure 1: Proportion of consistently estimated D-DAGs for 100 realizations per setting with p = 10
nodes and sample size n. Figures (a) and (b) show the proportion of consistently estimated D-DAGs
when considering just the skeleton ( ¯∆) and both skeleton and edge orientations (∆), respectively; α is
the signiﬁcance level used for the hypothesis tests in the algorithms. Figure (c) shows the proportion
of consistent estimates with respect to the number of changes in internal node variances v.
Note that while the DCI algorithm is able to identify changes in edge weights, we only generated
DAG models that differ by edge insertions and deletions. This is to provide a fair comparison to
the naive approach, where we separately estimate the two DAGs G(1) and G(2) and then take their
difference, since this approach can only identify insertions and deletions of edges.
In Figure 1 we analyzed how the performance of the DCI algorithm changes over different choices of
signiﬁcance levels α. The simulations were performed on graphs with p = 10 nodes, neighborhood
size of s = 3 and sample size n ∈{103, 104}. For Figure 1 (a) and (b) we set ϵ(1), ϵ(2) ∼N(0, 1p),
which by Corollary 4.5 ensures that the D-DAG ∆is fully identiﬁable. We compared the performance
of DCI to the naive approach, where we separately estimated the two DAGs G(1) and G(2) and then
took their difference. For separate estimation we used the prominent PC and GES algorithms tailored
to the Gaussian setting. Since KLIEP requires an additional tuning parameter, to understand how α
inﬂuences the performance of the DCI algorithm, we here only analyzed initializations in the fully
connected graph (DCI-FC) and using the constraint-based method described in the Supplementary
Material (DCI-C). Both initializations provide a provably consistent algorithm. Figure 1 (a) and (b)
show the proportion of consistently estimated D-DAGs by just considering the skeleton ( ¯∆) and
both skeleton and orientations (∆), respectively. For PC and GES, we considered the set of edges
that appeared in one estimated skeleton but disappeared in the other as the estimated skeleton of the
D-DAG ¯∆. In determining orientations, we considered the arrows that were directed in one estimated
CP-DAG but disappeared in the other as the estimated set of directed arrows. Since the main purpose
of this low-dimensional simulation study is to validate our theoretical ﬁndings, we used the exact
recovery rate as evaluation criterion. In line with our theoretical ﬁndings, both variants of the DCI
algorithm outperformed taking differences after separate estimation. Figure 1 (a) and (b) also show
that the PC algorithm outperformed GES, which is unexpected given previous results showing that
GES usually has a higher exact recovery rate than the PC algorithm for estimating a single DAG. This
is due to the fact that while the PC algorithm usually estimates less DAGs correctly, the incorrectly
7

(a) D-DAG skeleton ¯∆
(b) D-DAG ∆
(c) T-cell activation
Figure 2: High-dimensional evaluation of the DCI algorithm in both simulation and real data; (a)−(b)
are the ROC curves for estimating the D-DAG ∆and its skeleton ¯∆with p = 100 nodes, expected
neighbourhood size s = 10, n = 300 samples, and 5% change between DAGs; (c) shows the
estimated D-DAG between gene expression data from naive and activated T cells.
estimated DAGs tend to look more similar to the true model than the incorrect estimates of GES (as
also reported in [41]) and can still lead to a correct estimate of the D-DAG.
In Figure 1 (c) we analyzed the effect of changes in the noise variances on estimation performance.
We set ϵ(1) ∼N(0, 1p), while for ϵ(2) we randomly picked v nodes and uniformly sampled their
variances from [1.25, 2]. We used α = .05 as signiﬁcance level based on the evaluation from Figure 1.
In line with Theorem 4.4, as we increase the number of nodes i such that ϵ(1)
i
̸= ϵ(2)
i , the number
of edges whose orientations can be determined decreases. This is because Algorithm 3 can only
determine an edge’s orientation when the variance of at least one of its nodes is invariant. Moreover,
Figure 1 (c) shows that the accuracy of Algorithm 2 is not impacted by changes in the noise variances.
Finally, Figure 2 (a) - (b) show the performance (using ROC curves) of the DCI algorithm in the
high-dimensional setting when initiated using KLIEP (DCI-K) and DCI-C. The simulations were
performed on graphs with p = 100 nodes, expected neighborhood size of s = 10, sample size
n = 300, and ϵ(1), ϵ(2) ∼N(0, 1p). B(2) was derived from B(1) so that the total number of changes
was 5% of the total number of edges in B(1), with an equal amount of insertions and deletions.
Figure 2 (a) - (b) show that both DCI-C and DCI-K perform similarly well and outperform separate
estimation using GES and the PC algorithm. The respective plots for 10% change between B(1) and
B(2) are given in the Supplementary Material.
5.2
Real data analysis
Ovarian cancer. We tested our method on an ovarian cancer data set [43] that contains two groups
of patients with different survival rates and was previously analyzed using the DPM algorithm in
the undirected setting [49]. We followed the analysis of [49] and applied the DCI algorithm to gene
expression data from the apoptosis and TGF-β pathways. In the apoptosis pathway we identiﬁed two
hub nodes: BIRC3, also discovered by DPM, is an inhibitor of apoptosis [14] and one of the main
disregulated genes in ovarian cancer [15]; PRKAR2B, not identiﬁed by DPM, has been shown to
be important in disease progression in ovarian cancer cells [4] and an important regulatory unit for
cancer cell growth [5]. In addition, the RII-β protein encoded by PRKAR2B has been considered as
a therapeutic target for cancer therapy [6, 26], thereby conﬁrming the relevance of our ﬁndings. With
respect to the TGF-β pathway, the DCI method identiﬁed THBS2 and COMP as hub nodes. Both of
these genes have been implicated in resistance to chemotherapy in epithelial ovarian cancer [23] and
were also recovered by DPM. Overall, the D-UG discovered by DPM is comparable to the D-DAG
found by our method. More details on this analysis are given in the Supplementary Material.
T cell activation. To demonstrate the relevance of our method for current genomics applications, we
applied DCI to single-cell gene expression data of naive and activated T cells in order to study the
pathways involved during the immune response to a pathogen. We analyzed data from 377 activated
and 298 naive T cells obtained by [40] using the recent drop-seq technology. From the previously
identiﬁed differentially expressed genes between naive and activated T cells [38], we selected all
genes that had a fold expression change above 10, resulting in 60 genes for further analysis.
8

We initiated DCI using KLIEP, thresholding the edge weights at 0.005, and ran DCI for different
tuning parameters and with cross-validation to obtain the ﬁnal DCI output shown in Figure 2 (c) using
stability selection as described in [25]. The genes with highest out-degree, and hence of interest for
future interventional experiments, are GZMB and UHRF1. Interestingly, GZMB is known to induce
cytotoxicity, important for attacking and killing the invading pathogens. Furthermore, this gene has
been reported as the most differentially expressed gene during T cell activation [12, 31]. UHRF1 has
been shown to be critical for T cell maturation and proliferation through knockout experiments [7, 28].
Interestingly, the UHRF1 protein is a transcription factor, i.e. it binds to DNA sequences and regulates
the expression of other genes, thereby conﬁrming its role as an important causal regulator. Learning
a D-DAG as opposed to a D-UG is crucial for prioritizing interventional experiments. In addition,
the difference UG for this application would not only have been more dense, but it would also have
resulted in additional hub nodes such as FABP5, KLRC1, and ASNS, which based on the current
biological literature seem secondary to T cell activation (FABP5 is involved in lipid binding, KLRC1
has a role in natural killer cells but not in T cells, and ASNS is an asparagine synthetase gene). The
difference DAGs learned by separately applying the GES and PC algorithms on naive and activated T
cell data sets as well as on the ovarian cancer data sets are included in the Supplementary Material
for comparison.
6
Discussion
We presented an algorithm for directly estimating the difference between two causal DAG models
given i.i.d. samples from each model. To our knowledge this is the ﬁrst such algorithm and is of
particular interest for learning differences between related networks, where each network might
be large and complex, while the difference is sparse. We provided consistency guarantees for our
algorithm and showed on synthetic and real data that it outperforms the naive approach of separately
estimating two DAG models and taking their difference. While our proofs were for the setting with
no latent variables, they extend to the setting where the edge weights and noise terms of all latent
variables remain invariant across the two DAGs. We applied our algorithm to gene expression data in
bulk and from single cells, showing that DCI is able to identify biologically relevant genes for ovarian
cancer and T-cell activation. This purports DCI as a promising method for identifying intervention
targets that are causal for a particular phenotype for subsequent experimental validation. A more
careful analysis with respect to the D-DAGs discovered by our DCI algorithm is needed to reveal its
impact for scientiﬁc discovery.
In order to make DCI scale to networks with thousands of nodes, an important challenge is to
reduce the number of hypothesis tests. As mentioned in Remark 4.6, currently the time complexity
(given by the number of hypothesis tests) of DCI scales exponentially with respect to the size of SΘ.
The PC algorithm overcomes this problem by dynamically updating the list of CI tests given the
current estimate of the graph. It is an open problem whether one can similarly reduce the number of
hypothesis tests for DCI. Another challenge is to relax Assumptions 4.1 and 4.2. Furthermore, in
many applications (e.g., when comparing normal to disease states), there is an imbalance of data/prior
knowledge for the two models and it is of interest to develop methods that can make use of this for
learning the differences between the two models.
Finally, as described in Section 2, DCI is preferable to separate estimation methods like PC and GES
since it can infer not only edges that appear or disappear, but also edges with changed edge weights.
However, unlike separate estimation methods, DCI relies on the assumption that the two DAGs share
a topological order. Developing methods to directly estimate the difference of two DAGs that do not
share a topological order is of great interest for future work.
Acknowledgements
Yuhao Wang was supported by ONR (N00014-17-1-2147), NSF (DMS-1651995) and the MIT-IBM
Watson AI Lab. Anastasiya Belyaeva was supported by an NSF Graduate Research Fellowship
(1122374) and the Abdul Latif Jameel World Water and Food Security Lab (J-WAFS) at MIT.
Caroline Uhler was partially supported by ONR (N00014-17-1-2147), NSF (DMS-1651995), and a
Sloan Fellowship.
9

References
[1] S. A. Andersson, D. Madigan, and M. D. Perlman. A characterization of markov equivalence
classes for acyclic digraphs. The Annals of Statistics, 25(2):505–541, 1997.
[2] A.-L. Barabási, N. Gulbahce, and J. Loscalzo. Network medicine: a network-based approach to
human disease. Nature Reviews Genetics, 12(1):56–68, 2011.
[3] A.-L. Barabási and Z. N. Oltvai. Network biology: understanding the cell’s functional organiza-
tion. Nature Reviews Genetics, 5(2):101–113, 2004.
[4] C. Cheadle, M. Nesterova, T. Watkins, K. C. Barnes, J. C. Hall, A. Rosen, K. G. Becker, and Y. S.
Cho-Chung. Regulatory subunits of PKA deﬁne an axis of cellular proliferation/differentiation
in ovarian cancer cells. BMC Medical Genomics, 1(1):43, 2008.
[5] F. Chiaradonna, C. Balestrieri, D. Gaglio, and M. Vanoni. RAS and PKA pathways in cancer:
new insight from transcriptional analysis. Frontiers in Bioscience, 13:5257–5278, 2008.
[6] Y. S. Cho-Chung. Antisense oligonucleotide inhibition of serine/threonine kinases: an innovative
approach to cancer treatment. Pharmacology & Therapeutics, 82(2):437–449, 1999.
[7] Y. Cui, X. Chen, J. Zhang, X. Sun, H. Liu, L. Bai, C. Xu, and X. Liu. Uhrf1 Controls iNKT Cell
Survival and Differentiation through the Akt-mTOR Axis. Cell Reports, 15(2):256–263, 2016.
[8] J. Draisma, S. Sullivant, and K. Talaska. Positivity for gaussian graphical models. Advances in
Applied Mathematics, 50(5):661–674, 2013.
[9] M. Drton and M. D. Perlman. Multiple testing and error control in gaussian graphical model
selection. Statistical Science, pages 430–449, 2007.
[10] N. Friedman, M. Linial, I. Nachman, and D. Pe’er. Using bayesian networks to analyze
expression data. Journal of Computational Biology, 7(3-4):601–620, 2000.
[11] A. Ghassami, S. Salehkaleybar, N. Kiyavash, and K. Zhang. Learning causal structures using
regression invariance. In Advances in Neural Information Processing Systems, pages 3015–3025,
2017.
[12] L. A. Hatton. Molecular Mechanisms Regulating CD8+ T Cell Granzyme and Perforin Gene
Expression. PhD thesis, University of Melbourne, 2013.
[13] N. J. Hudson, A. Reverter, and B. P. Dalrymple. A differential wiring analysis of expression
data correctly identiﬁes the gene containing the causal mutation. PLoS Computational Biology,
5(5):e1000382, 2009.
[14] R.W. Johnstone, A.J. Frew, and M.J. Smyth. The TRAIL apoptotic pathway in cancer onset,
progression and therapy. Nature Reviews Cancer, 8(10):782–798, 2008.
[15] J. Jönsson, K. Bartuma, M. Dominguez-Valentin, K. Harbst, Z. Ketabi, S. Malander, M. Jönsson,
A. Carneiro, A. Måsbäck, G. Jönsson, and M. Nilbert. Distinct gene expression proﬁles in
ovarian cancer linked to Lynch syndrome. Familial Cancer, 13:537–545, 2014.
[16] M. Kalisch and P. Bühlmann. Estimating high-dimensional directed acyclic graphs with the
pc-algorithm. Journal of Machine Learning Research, 8(Mar):613–636, 2007.
[17] M. Kanehisa, S. Goto, Y. Sato, M. Furumichi, and T. Mao. KEGG for integration and in-
terpretation of large-scale molecular data sets. Nucleic Acids Research, 40(D1):D109–D114,
2011.
[18] S. L Lauritzen. Graphical Models, volume 17. Clarendon Press, 1996.
[19] S. Lin, C. Uhler, B. Sturmfels, and P. Bühlmann. Hypersurfaces and their singularities in partial
correlation testing. Foundations of Computational Mathematics, 14(5):1079–1116, 2014.
[20] S. Liu, K. Fukumizu, and T. Suzuki. Learning sparse structural changes in high-dimensional
markov networks. Behaviormetrika, 44(1):265–286, 2017.
[21] S. Liu, J. A. Quinn, M. U. Gutmann, T. Suzuki, and M. Sugiyama. Direct learning of sparse
changes in markov networks by density ratio estimation. Neural Computation, 26(6):1169–1197,
2014.
[22] Helmut Lütkepohl. New introduction to multiple time series analysis. Springer Science &
Business Media, 2005.
10

[23] S. Marchini, R. Fruscio, L. Clivio, L. Beltrame, L. Porcu, I. F. Nerini, D. Cavalieri, G. Chiorino,
G. Cattoretti, C. Mangioni, R. Milani, V. Torri, C. Romualdi, A. Zambelli, M. Romano, M. Sig-
norelli, S. di Giandomenico, and M D’Incalci. Resistance to platinum-based chemotherapy is
associated with epithelial to mesenchymal transition in epithelial ovarian cancer. European
Journal of Cancer, 49(2):520–530, 2013.
[24] C. Meek. Graphical Models: Selecting Causal and Statistical Models. PhD thesis, Carnegie
Mellon University, 1997.
[25] N. Meinshausen and P. Bühlmann. Stability selection. Journal of the Royal Statistical Society.
Series B: Statistical Methodology, 72(4):417–473, 2010.
[26] T. Mikalsen, N. Gerits, and U. Moens. Inhibitors of signal transduction protein kinases as
targets for cancer therapy. Biotechnology Annual Review, 12:153–223, 2006.
[27] P. Nandy, A. Hauser, and M. H. Maathuis. High-dimensional consistency in score-based and
hybrid structure learning, 2015. To appear in Annals of Statistics.
[28] Y. Obata, Y. Furusawa, T.A. Endo, J. Sharif, D. Takahashi, K. Atarashi, M. Nakayama, S. On-
awa, Y. Fujimura, M. Takahashi, T. Ikawa, T. Otsubo, Y.I. Kawamura, T. Dohi, S. Tajima,
H. Masumoto, O. Ohara, K. Honda, S. Hori, H. Ohno, H. Koseki, and K. Hase. The epigenetic
regulator Uhrf1 facilitates the proliferation and maturation of colonic regulatory T cells. Nature
Immunology, 15(6):571–579, 2014.
[29] H. Ogata, S. Goto, K. Sato, W. Fujibuchi, H. Bono, and M. Kanehisa. KEGG: Kyoto encyclope-
dia of genes and genomes. Nucleic Acids Research, 27(1):29–34, 1999.
[30] J. Pearl. Causality: Models, Reasoning, and Inference. Cambridge University Press, 2000.
[31] A. Peixoto, C. Evaristo, I. Munitic, M. Monteiro, A. Charbit, B. Rocha, and H. Veiga-Fernandes.
CD8 single-cell gene coexpression reveals three different effector types present at distinct
phases of the immune response. The Journal of Experimental Medicine, 204(5):1193–1205,
2007.
[32] J. Peters, P. Bühlmann, and N. Meinshausen. Causal inference by using invariant prediction:
identiﬁcation and conﬁdence intervals. Journal of the Royal Statistical Society: Series B
(Statistical Methodology), 78(5):947–1012, 2016.
[33] J. E. Pimanda, K. Ottersbach, K. Knezevic, S. Kinston, W. Y. Chan, N. K. Wilson, J. Landry,
A. D Wood, A. Kolb-Kokocinski, A. R. Green, D. Tannahill, G. Lacaud, V. Kouskoff, and
B. Göttgens. Gata2, Fli1, and Scl form a recursively wired gene-regulatory circuit during early
hematopoietic development. Proceedings of the National Academy of Sciences, 104(45):17692–
17697, 2007.
[34] M. Pourahmadi. Covariance estimation: The glm and regularization perspectives. Statistical
Science, pages 369–387, 2011.
[35] J. Ramsey, P. Spirtes, and J. Zhang. Adjacency-faithfulness and conservative causal inference.
In Proceedings of the Twenty-Second Conference on Uncertainty in Artiﬁcial Intelligence, pages
401–408. AUAI Press, 2006.
[36] J. M. Robins and B. Hernan, Miguel. A.and Brumback. Marginal structural models and causal
inference in epidemiology, 2000.
[37] S. Sanei and J. A. Chambers. EEG Signal Processing. John Wiley & Sons, 2013.
[38] S. Sarkar, V. Kalia, W.N. Haining, B.T. Konieczny, S. Subramaniam, and R. Ahmed. Functional
and genomic proﬁling of effector CD8 T cell subsets with distinct memory fates. The Journal
of Experimental Medicine, 205(3):625–640, 2008.
[39] S. Shimizu, P. O. Hoyer, A. Hyvärinen, and A. Kerminen. A linear non-gaussian acyclic model
for causal discovery. Journal of Machine Learning Research, 7(Oct):2003–2030, 2006.
[40] M. Singer, C. Wang, L. Cong, N.D. Marjanovic, M.S. Kowalczyk, H. Zhang, J. Nyman,
K. Sakuishi, S. Kurtulus, D. Gennert, J. Xia, J.Y.H. Kwon, J. Nevin, R.H. Herbst, I. Yanai,
O. Rozenblatt-Rosen, V.K. Kuchroo, A. Regev, and A.C. Anderson. A Distinct Gene Module for
Dysfunction Uncoupled from Activation in Tumor-Inﬁltrating T Cells. Cell, 166(6):1500–1511,
2016.
[41] L. Solus, Y. Wang, L. Matejovicova, and C. Uhler. Consistency guarantees for permutation-based
causal inference algorithms, 2017.
11

[42] P. Spirtes, C. N. Glymour, and R. Scheines. Causation, Prediction, and Search. MIT press,
2000.
[43] R. W. Tothill, A. V. Tinker, J. George, R. Brown, S. B. Fox, S. Lade, D. S. Johnson, M. K.
Trivett, D. Etemadmoghadam, B. Locandro, N. Traﬁcante, S. Fereday, J. A. Hung, Y. Chiew,
I. Haviv, Australian Ovarian Cancer Study Group, D. Gertig, A. deFazio, and D. D.L. Bowtell.
Novel molecular subtypes of serous and endometrioid ovarian cancer linked to clinical outcome.
Clinical Cancer Research, 14(16):5198–5208, 2008.
[44] I. Tsamardinos, L. E. Brown, and C. F. Aliferis. The max-min hill-climbing bayesian network
structure learning algorithm. Machine Learning, 65(1):31–78, 2006.
[45] C. Uhler, G. Raskutti, P. Bühlmann, and B. Yu. Geometry of the faithfulness assumption in
causal inference. The Annals of Statistics, pages 436–463, 2013.
[46] S. Van de Geer and P. Bühlmann. ℓ0-penalized maximum likelihood for sparse directed acyclic
graphs. The Annals of Statistics, 41(2):536–567, 2013.
[47] T. Verma and J. Pearl. Equivalence and synthesis of causal models. In Proceedings of the Sixth
Annual Conference on Uncertainty in Artiﬁcial Intelligence, pages 255–270. Elsevier Science
Inc., 1990.
[48] K. Zhang, B. Huang, J. Zhang, C. Glymour, and B. Schölkopf. Causal discovery from non-
stationary/heterogeneous data: Skeleton estimation and orientation determination. In IJCAI:
Proceedings of the Conference, volume 2017, page 1347. NIH Public Access, 2017.
[49] S. D. Zhao, T. T. Cai, and H. Li. Direct estimation of differential networks. Biometrika,
101(2):253–268, 2014.
12

A
Hypothesis testing framework
In this section, we provide the details regarding the hypothesis tests that we used for testing the
following two null hypotheses:
Hi,j|S
0
: β(1)
i,j|S = β(2)
i,j|S
and
Hj|S
0
: σ(1)
j|S = σ(2)
j|S.
As in [11], we used hypothesis tests based on the F-test for testing for invariance between regression
coefﬁcients and residual variances. For testing Hi,j|S
0
: β(1)
i,j|S = β(2)
i,j|S we used the test statistic
ˆT:= (ˆβ(1)
i,j|S −ˆβ(2)
i,j|S)2 ·
 (ˆσ(1)
j|M)2(n1ˆΣ(1)
M,M)−1+(ˆσ(2)
j|M)2(n2 ˆΣ(2)
M,M)−1−1
iMiM
where ˆβ(k)
i,j|S is the empirical estimate of β(k)
i,j|S obtained by ordinary least squares, (ˆσ(k)
j|M)2 is an
unbiased estimator of the regression residual variance (σ(k)
j|M)2, ˆΣ(k)
M,M is the sample covariance
matrix of the random vector X(k)
M with M = {i} ∪S, and iM denotes the index in M corresponding
to the element i. In [22][Section 3.6], the author shows that under the null hypothesis the asymptotic
distribution of ˆT can be approximated by the F-distribution F(1, n1 + n2 −2|S| −2). The basic
explanation is that, for M := S ∪{i}, let β(k)
M be the best linear predictor when regressing X(k)
j
onto
X(k)
M , i.e., our estimator is X(k)
j
= (β(k)
M )T X(k)
M + ˜ϵ(k)
j . Let β be the vector
β :=
"
β(1)
M
β(2)
M
#
,
and let C ∈R2|M| have CiM = 1 and C|M|+iM = −1 and all other entries as zero. Then the
null hypothesis Hi,j|S
0
can be written as: CT β = 0. It follows from Proposition 3.5 of [22], on
the asymptotic distribution of the Wald statistic, that ˆT converges in distribution to χ2(1), i.e., a
χ2-distribution with 1 degree of freedom.
However, the F-distribution F(1, n1 + n2 −2|S| −2) is a better approximation for the distribution
of ˆT, as outlined in Section 3.6 of [22]. A brief justiﬁcation is in order. First, we know that the
convergence is the same: for an F-distribution F(1, d), as d →∞, we have F(1, d)
d→χ2(1).
Additionally, F(1, d) and ˆT both have a fatter tail than χ2(1). Together, these facts suggest the
choice of a F-distribution F(1, d) with d →∞as n1, n2 →∞. For the second parameter d, we used
d = n1 + n2 −2|S| −2, the total degrees of freedom of the unbiased estimators of the two regression
residual variances, i.e., (ˆσ(1)
j|M)2 and (ˆσ(2)
j|M)2.
Similarly, for testing Hj|S
0
, we used the test statistic
ˆF := (ˆσ(1)
j|S)2/(ˆσ(2)
j|S)2.
Under the null hypothesis, ˆF is a ratio of two χ2-distributed random variables and hence ˆF follows
an F-distribution, namely F(n1 −|S| −1, n2 −|S| −1).
B
Comparison to related work on invariant causal structure learning
The complimentary problem to learning the difference of two DAG models is the problem of inferring
the causal structure that is invariant across different environments. Algorithms for this problem have
been developed in recent literature [11, 32, 48]. Since the hypothesis testing framework in [11] is
similar to our approach, we here provide an example to explain the differences between the two
approaches and in particular to show that a new approach is needed in order to obtain a consistent
method for learning the difference DAG.
Recall that when we have access to data from a pair of DAGs, the algorithms in [11] make use of the
following two sets that are estimated from the data. The ﬁrst is the regression invariance set:
R :=
n
(j, S) : β(1)
S (j) = β(2)
S (j)
o
,
13

where β(k)
S (j) corresponds to the best linear predictor when regressing X(k)
j
onto X(k)
S . The second
is I, the set of variables whose internal noise variances have been changed across the two DAGs:
I :=
n
j : ∀S ⊆[p] \ {j}, E(X(1)
j
−(β(1)
S (j))T X(1)
S )2 ̸= E(X(2)
j
−(β(2)
S (j))T X(2)
S )2o
.
The output of the algorithms in [11] is fully determined by the invariant elements given in R and I.
In particular, Algorithm 1 in [11] estimates the invariant causal structure by considering all elements
in R and I, while Algorithm 2 in [11] is a more efﬁcient constraint-based algorithm that considers
only a subset of the elements in R.
Example B.1. Figure B.1 shows two cases where the underlying D-DAGs are different but in both
cases [11] would produce the same sets R and I that are used to assign edge orientations. In (a)
we consider two fully connected linear SEMs (B(1), ϵ(1)) and (B(2), ϵ(2)) where the edge weights
of all edges change across the two DAGs. The variances of the internal noise terms for nodes 1
and 3 change while the variance of the internal noise term of node 2 stays the same. In (b) we
instead consider two fully connected linear SEMs (B(1), ϵ(1)) and (B(2), ϵ(2)) where B(1)
12 ̸= B(2)
12
and B(1)
23 ̸= B(2)
23 . Moreover, the variances of the internal noise terms of nodes 1 and 3 change
across k = {1, 2} while the variance of node 2 stays the same. It can be easily shown that in both
cases R = ∅and I = {1, 3}. Since both (a) and (b) correspond to exactly the same R and I, by
simply using the output from [11], we cannot distinguish whether the data is generated from the
pair of DAGs given in (a) or the pair of DAGs given in (b). In fact, since for these examples R is
empty, [11] will not uncover any edge orientations consistent with the underlying DAGs G(1) or G(2).
On the other hand, our algorithm is able to distinguish these two cases as well as discover the edge
orientations of the underlying D-DAGs, as shown in Figure B.1 (c).
C
Theoretical analysis
C.1
Preliminaries: Schur complement
In this section, we describe how to use Schur complements to express β(k)
i,j|S and (σ(k)
j|S)2 as rational
functions in the variables (B(k)
ij )(i,j)∈A(k) and (σ(k)
j
)j∈[p]. This will be used for the proofs of
Theorems 4.3 and 4.4 in the following sections.
For a subset of nodes M ⊆[p], let XM denote the random vector spanned by the random variables
Xi for all i ∈M. Let ¬M denote the complement of M with respect to the full set of nodes, i.e.,
¬M := [p] \ M. The inverse covariance matrix of the random vector XM, i.e., (ΣM,M)−1, can be
G(1)
1
2
3
G(2)
1
2
3
(a)
G(1)
1
2
3
G(2)
1
2
3
(b)
DCI output in (a)
1
2
3
DCI output in (b)
1
2
3
(c)
Figure B.1: (a) - (b): Example of two DAG pairs where the corresponding D-DAGs are different
but the application of algorithms 1 and 2 from [11] would result in the same sets R and I. The
red edges correspond to the edges that have different edge weights across the two DAGs, the black
edges correspond to the edges that have the same edge weights across the two DAGs. The red nodes
correspond to the nodes that have different internal noise variances across the two DAGs and the
black nodes correspond to the nodes that have unchanged internal noise variances. (c): D-DAGs
output by the DCI algorithm when data is generated from (a) and (b), respectively.
14

obtained from Θ by taking the Schur complement:
ΘM := (ΣM,M)−1
= ΘM,M −ΘM,¬M(Θ¬M,¬M)−1Θ¬M,M.
Note that here ΘM does not represent the submatrix of Θ with set of row and column indices in M,
i.e., ΘM,M, but rather the Schur complement. For any two indices i, j ∈M, let iM, jM ∈[|M|]
denote the row/column indices of matrix ΘM associated to i and j, then the (iM, jM)-th entry of
matrix ΘM can be written as:
(ΘM)iMjM = Θij −Θi,¬M(Θ¬M,¬M)−1Θ¬M,j.
In [8, 19, 45] the authors also give a combinatorial characterization of the Schur complement.
Following their characterization, the value of (ΘM)iMjM is determined by the parameters of the
d-connecting paths from node i to j given M \ {i, j}. In this case, the entry (Θ(k)
M )iMjM would be
invariant for k = {1, 2} if the parameters along the d-connecting paths are all the same. Finally, by
applying the result of [34], β(k)
i,j|S and (σ(k)
j|S)2 can be written as:
β(k)
i,j|S = −(Θ(k)
M )iMjM
(Θ(k)
M )jMjM
where
M = S ∪{i, j},
(σ(k)
j|S)2 =

(Θ(k)
M )jMjM
−1
where
M = S ∪{j}.
(S.2)
Combining Eq. (S.2) with the formula for the Schur complement, one can easily see that β(k)
i,j|S and
(σ(k)
j|S)2 can be expressed as rational functions in the variables (B(k)
ij )(i,j)∈A(k) and (σ(k)
j
)j∈[p].
C.2
Proof of Theorem 4.3
In this Section we provide the consistency proofs of Theorem 4.3 when Algorithm 2 is initialized in
the difference-UG. The proof of Theorem 4.3 when Algorithm 2 is initialized in the complete graph
follows easily from the proofs in this section. To complete the proof, one also needs the following
assumption:
Assumption C.1 (Difference-precision-matrix-faithfulness assumption). For any choices of i, j ∈[p],
it holds that
1. If B(1)
ij
̸= B(2)
ij , then Θ(1)
ij ̸= Θ(2)
ij , and for any ℓwith directed path i →j ←ℓin either
G(1) or G(2), ℓ∈SΘ.
2. If σ(1)
j
̸= σ(2)
j , then Θ(1)
jj ̸= Θ(2)
jj , and ∀i ∈Pa(1)(j) ∪Pa(2)(j), i ∈SΘ.
Note that Assumption C.1 is not a necessary assumption for the consistency of Algorithm 2, since one
can simply take ∆Θ as the fully connected graph on p nodes and SΘ = [p] as input. The same holds
for the proof of Theorem 4.4. The strength of Assumption C.1 is further analyzed in Remark C.5.
To prove Theorem 4.3, we need to make use of the following two lemmas:
Lemma C.2. Given Θ(1) and Θ(2), if Θ(1)
ij
= Θ(2)
ij , then (Θ(1)
M )iMjM = (Θ(2)
M )iMjM for M =
SΘ ∪{i, j}.
Proof. By Schur complement, we have that (Θ(k)
M )iMjM = Θ(k)
ij −Θ(k)
i,¬M(Θ(k)
¬M,¬M)−1Θ(k)
¬M,j. By
the deﬁnition of SΘ, Θ(1)
M,¬M = Θ(2)
M,¬M and Θ(1)
¬M,¬M = Θ(2)
¬M,¬M.
Lemma C.3. Given two linear SEMs (B(1), ϵ(1)) and (B(2), ϵ(2)) and denoting the precision preci-
sion matrix of the random vector X(k)
1:j by Θ∗(k), then under Assumption C.1 we have SΘ∗⊆SΘ.
Proof. Since B(k) is strictly upper triangular, the marginal distribution of the random vector X(k)
1:j
follows a new SEM,
X(k)
1:j = (B(k)
1:j,1:j)T X(k)
1:j + ϵ(k)
1:j ,
15

where B(k)
1:j,1:j is the submatrix of B(k) with the ﬁrst j rows and j columns, and ϵ(k)
1:j is the random
vector with the ﬁrst j random variables of ϵ(k). It can then be shown that the (i, ℓ)-th entry of the new
precision matrix Θ∗is given by:
Θ∗(k)
iℓ
= −(σ(k)
ℓ
)−2B(k)
iℓ+
X
ℓ<m≤j
(σ(k)
m )−2B(k)
im B(k)
ℓm.
It is then a short exercise to show that Θ∗(1)
iℓ
̸= Θ∗(2)
iℓ
only if at least one of the following two
statements hold:
1. B(1)
iℓ̸= B(2)
iℓor σ(1)
ℓ
̸= σ(2)
ℓ;
2. There exists at least one of ℓ< m ≤j with i →m ←ℓin either G(1) or G(2) such that
B(1)
im ̸= B(2)
im or B(1)
ℓm ̸= B(2)
ℓm or σ(1)
m ̸= σ(2)
m .
By applying Assumption C.1, we have that Θ∗(1)
iℓ
̸= Θ∗(2)
iℓ
⇒i, ℓ∈SΘ.
The diagonal entries of the precision matrix are given by:
Θ∗(k)
ii
= (σ(k)
i
)−2 +
X
i<m≤j
(σ(k)
m )−2B(k)
im .
Clearly, Θ∗(1)
ii
̸= Θ∗(2)
ii
only if at least one of the following statements hold:
1. σ(1)
i
̸= σ(2)
i
;
2. B(1)
im ̸= B(2)
im or σ(1)
m ̸= σ(2)
m for at least one of the descendents of i in either G(1) or G(2)
with i < m ≤j.
By applying Assumption C.1 we have that Θ∗(1)
ii
̸= Θ∗(2)
ii
⇒i ∈SΘ.
Lemma C.4. Given two linear SEMs (B(1), ϵ(1)) and (B(2), ϵ(2)), then under Assumption 4.1,
B(1)
ij = B(2)
ij if and only if
∃S ⊆SΘ \ {i, j} s.t. β(1)
i,j|S = β(2)
i,j|S or β(1)
j,i|S = β(2)
j,i|S.
Proof. We show the “if” direction by proving the contrapositive, i.e. if B(1)
ij ̸= B(2)
ij , then
∀S ⊆SΘ \ {i, j}, β(1)
i,j|S ̸= β(2)
i,j|S and β(1)
j,i|S ̸= β(2)
j,i|S.
(S.3)
This follows directly from Assumption 4.1.
Now, we prove the “only if” direction, i.e., if B(1)
ij = B(2)
ij , then
∃S ⊆SΘ \ {i, j} s.t. β(1)
i,j|S = β(2)
i,j|S or β(1)
j,i|S = β(2)
j,i|S.
We divide the proof into two cases: σ(1)
j
= σ(2)
j , and σ(1)
j
̸= σ(2)
j .
Case 1 σ(1)
j
= σ(2)
j
Consider the precision matrix Θ∗(k) of the random vector X(k)
1:j . In this case, we prove that choosing
the conditioning set S = SΘ∗\ {i, j} implies regression invariance. This is a valid choice for S,
since it is a subset of SΘ \ {i, j} by Lemma C.3.
We will ﬁrst show that Θ∗(1)
ij
= Θ∗(2)
ij
and Θ∗(1)
jj
= Θ∗(2)
jj . According to the new SEM of the marginal
distribution of the random vector X(k)
1:j , i.e.,
X(k)
1:j = (B(k)
1:j,1:j)T X(k)
1:j + ϵ(k)
1:j ,
16

it is easy to conclude that node j no longer has any descendants in the marginal SEM. We therefore
have that
Θ∗(k)
ij
= −(σ(k)
j
)−2B(k)
ij
and
Θ∗(k)
jj
= (σ(k)
j
)−2.
Since B(1)
ij = B(2)
ij and σ(1)
j
= σ(2)
j , then
Θ∗(1)
ij
= Θ∗(2)
ij
and
Θ∗(1)
jj
= Θ∗(2)
jj .
(S.4)
By choosing M := S ∪{i, j} and denoting M ∗:= [j] \ M, recall that the entries of Θ(k)
M can be
written as
(Θ(k)
M )iMjM = Θ∗(k)
ij
−Θ∗(k)
i,M ∗(Θ∗(k)
M ∗,M ∗)−1Θ∗(k)
M ∗,j.
Now by invoking Lemma C.2 and Eq. (S.4), we obtain that (Θ(1)
M )iMjM = (Θ(2)
M )iMjM and
(Θ(1)
M )jMjM = (Θ(2)
M )jMjM . Finally, using Eq. (S.2), we obtain β(1)
i,j|S = β(2)
i,j|S.
Case 2 σ(1)
j
̸= σ(2)
j
In this case, we prove that regressing on all of the parents of j in both DAGs, i.e., choosing the
conditioning set as S = Pa(1)(j) ∪Pa(2)(j) \ {i}, implies regression invariance. This is a valid
choice for S, i.e. S ⊆SΘ \ {i, j}, since Assumption C.1 ensures that if σ(1)
j
̸= σ(2)
j
then ℓ∈SΘ for
all ℓ∈Pa(k)(j).
Let M := S ∪{i}. By regressing X(k)
j
onto X(k)
M , we get the regression coefﬁcient as
X(k)
j
= (β(k)
M )T X(k)
M + ˜ϵ(k)
j .
Let (β(k)
M )ℓM denote the ℓM-th entry of β(k)
M . By the Markov property, when regressing X(k)
j
onto
X(k)
M where Pa(k)(j) ⊆M ⊆[j −1], it is guaranteed that (β(k)
M )ℓM = B(k)
ℓj if ℓ∈Pa(k)(j) and
(β(k)
M )ℓM = 0 otherwise. Therefore, we have that β(k)
i,j|S = (β(k)
M )iM = B(k)
ij , which completes the
proof.
We now show how the proof of Theorem 4.3 follows from this lemma.
Proof. By applying Assumption C.1 we have that ¯∆⊆∆Θ. Then the proof of Theorem 4.3 follows
trivially from Lemma C.4, since Lemma C.4 shows that an edge i −j is deleted during testing the
invariance of regression coefﬁcients if and only if i −j ̸∈¯∆.
We end this section with a remark about the strength of Assumption C.1.
Remark C.5 (Strength of Assumption C.1). To analyze the strength of Assumption C.1, consider
instead the following stronger assumption:
Assumption D.1’ For any choices of i, j ∈[p], it holds that
1. If B(1)
ij ̸= B(2)
ij , then Θ(1)
ij ̸= Θ(2)
ij , and Θ(1)
iℓ̸= Θ(2)
iℓfor any ℓwith directed path i →j ←ℓ
in either G(1) or G(2).
2. If σ(1)
j
̸= σ(2)
j , then Θ(1)
jj ̸= Θ(2)
jj , and Θ(1)
ii ̸= Θ(2)
ii ∀i ∈Pa(1)(j) ∪Pa(2)(j).
Assumption D.1’ is a strictly stronger assumption than Assumption C.1, i.e., Assumption C.1 is
satisﬁed whenever Assumption D.1’ is satisﬁed. We expect Assumption D.1’ to be much weaker
than Assumptions 4.1 and 4.2 in the ﬁnite sample regime, and therefore the same also holds for
Assumption C.1. This is because the number of hypersurfaces violating Assumption D.1’ scales at
most as O(p4), which is a much smaller number as compared to Assumptions 4.1 and 4.2 that scale
as O(|∆Θ|2|SΘ|−1).
17

C.3
Proof of Theorem 4.4
In this section, we provide a proof of Theorem 4.4 when Algorithm 3 is initialized in the difference-
UG.
Lemma C.6. For all nodes j incident to at least one edge in ¯∆, σ(1)
j
= σ(2)
j
if and only if
∃S ⊆SΘ \ {i, j} s.t. σ(1)
j|S = σ(2)
j|S.
Proof. Proving the “if” direction is equivalent to showing that, if σ(1)
j
̸= σ(2)
j , then
∀S ⊆SΘ \ {j}, σ(1)
j|S ̸= σ(2)
j|S.
(S.5)
This follows directly from Assumption 4.2.
To prove the “only if” direction, consider again the marginal distribution of X(k)
1:j . Since σ(1)
j
= σ(2)
j ,
we have that Θ∗(1)
jj
= Θ∗(2)
jj . Let M := SΘ∗∪{j} and let S := M \ {j}, since (σ(k)
j|S)2 =
((Θ(k)
M )jMjM )−1 and (Θ(1)
M )jMjM = (Θ(2)
M )jMjM by using Lemma C.2, we have that σ(1)
j|S = σ(2)
j|S.
Lemma C.7. ∀i −j ∈¯∆such that σ(1)
j
= σ(2)
j
it holds that,
1. if i →j ∈∆, then i ∈S for all S s.t. σ(1)
j|S = σ(2)
j|S.
2. if j →i ∈∆, then i ̸∈S for all S s.t. σ(1)
j|S = σ(2)
j|S.
Proof. We prove both statements by contradiction. For B(1)
ij ̸= B(2)
ij , suppose there exists a S such
that σ(1)
j|S = σ(2)
j|S while i ̸∈S. This contradicts Assumption 4.2.
Similarly, in the second statement for B(1)
ji
̸= B(2)
ji , suppose there exists S such that σ(1)
j|S∪{i} =
σ(2)
j|S∪{i}. This also contradicts Assumption 4.2.
We now show how the proof of Theorem 4.4 follows from this lemma.
Proof. By Lemma C.6, there exists S such that σ(1)
j|S = σ(2)
j|S if and only if σ(1)
j
= σ(2)
j . Therefore, all
the nodes where the internal noise variance is unchanged will be chosen by Algorithm 3. In addition,
it also follows from Lemma C.7 that for any i →j ∈∆, i ∈S and for any j →i ∈∆, i ̸∈S. This
proves that for any node i where σ(k)
i
is invariant, all edges adjacent to i are oriented and that all
edges oriented before the last step of Algorithm 3 are correctly oriented.
It remains to show that all edges oriented in the last step of Algorithm 3 are correct. This easily follows
from the acyclicity property of the underlying graphs and from the fact that all edge orientations
before the last step are correct.
D
Examples for Remark 4.7
Since our assumptions are closely related to the faithfulness assumption, it is interesting to compare the
entailment relationship between our assumptions, i.e., Assumptions 4.1 and 4.2, and the faithfulness
assumption. In this section, we give the following two counterexamples to show that our assumptions
and the faithfulness assumption do not imply one another.
Example D.1. We give a 3-node example that satisﬁes Assumptions 4.1 and 4.2 but does not
satisfy the faithfulness assumption. Consider two linear SEMs (B(1), ϵ(1)) and (B(2), ϵ(2)) with
ϵ(k)
j
∼N(0, 1) ∀j, k and where B(1) and B(2) are the autoregressive matrices deﬁned as shown
in Figure D.1. Clearly, P(1) does not satisfy the faithfulness assumption with respect to G(1) since
nodes 1 and 3 are d-connected given ∅, but X(1)
1
⊥⊥X(1)
3 . However, it is a short exercise to show
18

G(1)
1
2
3
0.5
-0.25
0.5
G(2)
1
2
3
0.5
0.1
0.5
Figure D.1: Example of two linear SEMs that satisfy Assumpitons 4.1 and 4.2 but do not satisfy the
faithfulness assumption. The autoregressive matrices B(1) and B(2) are shown as edge weights in
G(1) and G(2). We assume that all noise terms are standard normal random variables.
that for all choices of S, i.e. ∅and {2}, we have β(1)
1,3|S ̸= β(2)
1,3|S, β(1)
3,1|S ̸= β(2)
3,1|S, σ(1)
3|S ̸= σ(2)
3|S and
σ(1)
1|S∪{3} ̸= σ(2)
1|S∪{3}. Therefore, this example satisﬁes Assumptions 4.1 and 4.2.
Example D.2. We give a 3-node example that satisﬁes the faithfulness assumption but does not satisfy
Assumption 4.1. Consider two linear SEMs where all ϵ(k)
j
are standard normal random variables
and B(1) and B(2) are deﬁned as shown in Figure D.2. Although B(1)
13 ̸= B(2)
13 , by choosing S = ∅,
we still have that β(1)
1,3|S = β(2)
1,3|S = 0.5. Therefore, although both SEMs satisfy the faithfulness
assumption, the pair does not satisfy Assumption 4.1.
Next, we give an example explaining the hypersurfaces that correspond to the set of parameters
violating our assumptions versus the faithfulness assumption. This example shows that the number
of hypersurfaces corresponding to violations of the faithfulness assumption is much higher than the
number of hypersurfaces corresponding to violations of our assumptions, which implies that the
faithfulness assumption is more restrictive in the ﬁnite sample regime.
Example D.3. We give a 3-node example to provide intuition for why the number of hypersurfaces
violating the faithfulness assumption is usually much higher than the number of hypersurfaces
violating our assumptions. Consider the two fully connected linear SEMs (B(1), ϵ(1)) and (B(2), ϵ(2))
shown in Figure D.3. In this example, B(1)
12 ̸= B(2)
12 while the noise variances and all other edge
weights are not changed across the two DAGs.
If we think of each parameter B(k)
ij
or σ(k)
j
not as a parameter but rather as an indeterminate, the set
of parameters that violate the faithfulness assumption and our assumptions correspond to a system
of polynomial equations in the following 7 indeterminates: (B(1)
12 , B(2)
12 , B13, B23, σ1, σ2, σ3). Note
that here we use a single indeterminate B13 to encode both the parameters B(1)
13 and B(2)
13 since they
have the same value. The set of parameters that violate the faithfulness assumption are given by the
G(1)
1
2
3
0.5
0.25
0.5
G(2)
1
2
3
0.5
0.1
0.8
Figure D.2: Example of two linear SEMs that satisfy the faithfulness assumption but do not satisfy
Assumption 4.1. The autoregressive matrices B(1) and B(2) are shown as edge weights in G(1) and
G(2). We assume that all noise terms are standard normal random variables.
19

G(1)
1
2
3
G(2)
1
2
3
Figure D.3: Example of two fully connected linear SEMs. The red edges correspond to the edges that
have different edge weights across the two DAGs, the black edges correspond to the edges that have
the same edge weights across the two DAGs. The variances of internal noise terms remain the same
for both DAGs.
following 11 polynomial equations and hence correspond to a collection of 11 hypersurfaces:
cov(X(1)
1 , X(1)
2 ) :
B(1)
12 σ2
1 = 0,
cov(X(1)
1 , X(1)
3 ) :
B13σ2
1 + B(1)
12 B23σ2
1 = 0,
cov(X(1)
2 , X(1)
3 ) :
(B(1)
12 )2B23σ2
1 + B(1)
12 B13σ2
1 + B23σ2
2 = 0,
cov(X(1)
1 , X(1)
2
| X(1)
3 ) :
−
B13B23σ2
1σ2
2 −B(1)
12 σ2
1σ2
3
(B13 + B(1)
12 B23)2σ2
1 + B2
23σ2
2 + σ2
3
= 0,
cov(X(1)
1 , X(1)
3
| X(1)
2 ) :
B13σ2
1σ2
2
(B(1)
12 )2σ2
1 + σ2
2
= 0,
cov(X(1)
2 , X(1)
3
| X(1)
1 ) :
B23σ2
2 = 0,
cov(X(2)
1 , X(2)
2 ) :
B(2)
12 σ2
1 = 0,
cov(X(2)
1 , X(2)
3 ) :
B13σ2
1 + B(2)
12 B23σ2
1 = 0,
cov(X(2)
2 , X(2)
3 ) :
(B(2)
12 )2B23σ2
1 + B(2)
12 B13σ2
1 + B23σ2
2 = 0,
cov(X(2)
1 , X(2)
2
| X(2)
3 ) :
−
B13B23σ2
1σ2
2 −B(2)
12 σ2
1σ2
3
(B13 + B(2)
12 B23)2σ2
1 + B2
23σ2
2 + σ2
3
= 0,
cov(X(2)
1 , X(2)
3
| X(2)
2 ) :
B13σ2
1σ2
2
(B(2)
12 )2σ2
1 + σ2
2
= 0.
To get a better sense of how the hypersurfaces of these polynomials are distributed in the parameter
space, Figure D.4 visualizes the ﬁrst 6 hypersurfaces. This ﬁgure was directly adopted from Figure 2
of [45]. On the other hand, the polynomials of the parameters violating our assumptions are as
Figure D.4: Parameter values corresponding to unfaithful distributions in Example D.3; the ﬁrst
three ﬁgures are the hypersurfaces corresponding to cov(X1, X2) = 0, cov(X1, X2 | X3) = 0 and
cov(X1, X3) = 0 respectively when setting σi = 1 for visualization in 3d; the last ﬁgure shows the
hypersurfaces of the ﬁrst 6 polynomials with σi = 1. Figure adopted from [45, Figure 2])
20

follows:
β(1)
1,2|∅−β(2)
1,2|∅:
B(1)
12 −B(2)
12 = 0,
β(1)
2,1|∅−β(2)
2,1|∅:
B(1)
12 σ2
1
(B(1)
12 )2σ2
1 + σ2
2
−
B(2)
12 σ2
1
(B(2)
12 )2σ2
1 + σ2
2
= 0,
(σ(1)
2|∅)2 −(σ(2)
2|∅)2 :
(B(1)
12 )2σ2
1 −(B(2)
12 )2σ2
1 = 0,
(σ(1)
1|{2})2 −(σ(2)
1|{2})2 :
1
(B(1)
12 )2σ−2
2
+ σ−2
1
−
1
(B(2)
12 )2σ−2
2
+ σ−2
1
= 0.
Clearly, the number of polynomials that violate Assumptions 4.1 and 4.2 is much smaller as compared
to those of the faithfulness assumption. HAs a consequence our assumption is weaker than the
faithfulness assumption in the ﬁnite sample regime (where violations correspond to points that are
close to any of the hypersurfaces).
E
Constraint-based method for estimating the difference-UG
In this section, we present a constraint-based method for estimating the difference-UG model in linear
SEMs with general additive noise, i.e., where the noise is not necessarily Gaussian. Our constraint-
based method is built on performing a hypothesis test on each (i, j)-th entry and then ﬁnding the
set of (i, j)-th entries where Θ(1)
ij ̸= Θ(2)
ij . The test for invariance of diagonal entries, i.e., Θ(k)
ii , is
equivalent to the hypothesis test Hi|[p]\{i}
0
as discussed in Section 3, since (σ(k)
i|[p]\{i})2 = (Θ(k)
ii )−1.
For the non-diagonal entries, since the non-zero pattern of Θ(k)
ij is the same as the non-zero pattern of
the partial correlation coefﬁcients, i.e., ρ(k)
ij|[p]\{i,j}, we ﬁrst ﬁnd the set of non-diagonal entries that
are different between Θ(1) and Θ(2) by doing partial correlation tests for each distribution and then
comparing the non-zero patterns. After that, for each entry (i, j) that is estimated to be non-zero in
both Θ(1) and Θ(2), we use the test statistic:
ˆQ :=

ˆΘ(1)
ij −ˆΘ(2)
ij
2
·
 ˆΘ(1)
ii ˆΘ(1)
jj +(ˆΘ(1)
ij )2
n1
+
ˆΘ(2)
ii ˆΘ(2)
jj +(ˆΘ(2)
ij )2
n2
!−1
and test if it ﬁts the F-distribution with parameters F(1, n1 + n2 −2p + 2). If this is the case,
we conclude that this particular entry (i, j) is invariant between the two precision matrices. The
consistency guarantees of Hi|[p]\{i}
0
and partial correlation tests follow trivially from previous results.
For ˆQ, it follows from Proposition 3 of [9] on the asymptotic normal distribution of the empirical
precision matrix ˆΘ that if the null hypothesis is true, then ˆQ converges in distribution to χ2(1) as
n1, n2 →∞.
F
Additional high-dimensional evaluation
High-dimensional setting: 10% changes. We present the results of increasing the number of
changes between the two DAGs, and hence the size of SΘ. We used the same simulation parameters
as for Figure 2, i.e. p = 100 nodes, a neighbourhood size of s = 10, and sample size n = 300,
except that the total number of changes was 10% of the number of edges in B(1), rather than 5%. As
shown in Figure F.1, both initializations of the DCI algorithm still outperform separate estimation
by GES and the PC algorithm. However, because the underlying DAGs have maintained constant
sparsity while the difference-DAG has become more dense, the gains in performance by using the
DCI algorithm have slightly diminished, as expected by our theoretical analysis.
G
Real data analysis - ovarian cancer
We tested our method on an ovarian cancer data set [43]. This data set consists of the gene expression
data of patients with ovarian cancer. The patients are divided into six subtypes (C1-C6). The C1
21

(a) difference-DAG skeleton ¯∆
(b) difference-DAG ∆
Figure F.1: ROC curves for estimating the difference-DAG ∆and its skeleton ¯∆with p = 100 nodes,
expected neighbourhood size s = 10, n = 300 samples, and 10% percent change between DAGs.
subtype was characterized by differential expression of genes associated with stromal and immune
cell types and is associated with shorter survival rates. In this experiment, we divide the subjects
into two groups, group 1 with n1 = 78 subjects containing patients with C1 subtype, and group 2
with n2 = 113 subjects containing patients with C2-C6 subtypes. In this work, we focused on two
pathways from the KEGG database [17, 29], the apoptosis pathway containing 87 genes, and the
TGF-β pathway with 82 genes.
We compared our results to those obtained by the DPM method [49], which infers the difference in
the undirected setting. As input to Algorithm 2, we took SΘ to be all of the nodes in the output of the
DPM algorithm and took ∆Θ to be the fully connected graph on SΘ. We then learned the difference
DAG using Algorithm 3. The ﬁnal set of edges over different tuning parameters was chosen using
stability selection as proposed in [25] and is shown in Figure G.1. This procedure identiﬁed two hub
nodes in the apoptosis pathway: BIRC3 and PRKAR2B. BIRC3 has been shown to be an inhibitor of
apoptosis [14] and is one of the top disregulated genes in ovarian cancer [15]. This gene has also been
recovered by the DPM method as one of the hub nodes. While BIRC3 has high in-degree, hub gene
PRKAR2B has high out-degree, making it a better candidate for possible interventions in ovarian
cancer since knocking out a gene with high out-degree will have widespread downstream effects on
the target genes. Indeed, PRKAR2B is a known important regulatory unit for cancer cell growth [5]
and the RII-β protein encoded by PRKAR2B has already been studied as a therapeutic target for
cancer therapy [26, 6]. In addition, PRKAR2B has also been shown to play an important role in
disease progression in ovarian cancer cells [4]. Since the DPM method does not infer directionality, it
is not possible to tell which of the hub genes might be a better interventional target. This is remedied
by our method and its impact for identifying possible therapeutic targets in real data is showcased by
ﬁnding an already known drug target for cancer.
(a) Apoptosis pathway
(b) TGF-β pathway
Figure G.1: Estimate of the difference DAG between the two groups for the apoptosis and TGF-β
pathways. The black lines represent the edges discovered by both our method and DPM, the red lines
represent the edges discovered only by our method, and the grey lines represent the undirected edges
discovered only by DPM.
22

(a) apoptosis, PC
(b)TGF-β, GES
(c) TGF-β, PC
Figure G.2: Estimate of the difference DAG between the two groups for the apoptosis and TGF-β
pathways using the PC and GES algorithms.
For the TGF-β pathway, our analysis identiﬁed THBS2 and COMP as hub nodes. Both of these genes
have been implicated in resistance to chemotherapy in epithelial ovarian cancer [23], conﬁrming the
importance of our ﬁndings. These nodes were also recovered by DPM.
Overall, the undirected graph discovered by DPM is similar to the DAG found by our method. The
disparity in the TGF-β pathway between the difference UG model ∆Θ and the difference DAG model
∆can be explained by the fact that the edge between COMP−BMP7 in ∆Θ can be accounted for
by the two edges BMP7→ID1 and COMP→ID1 in ∆. Though these edges might represent the true
regulatory pathways, the sparsity-inducing penalty in the DPM algorithm could remove them while
leaving the edge between COMP and BMP7. This disparity between the two algorithms highlights the
importance of replacing correlative reasoning with causal reasoning, and accentuates the signiﬁcance
of our contribution.
We also applied the GES and PC algorithms on the ovarian cancer data set. We considered the set of
edges that appeared in one estimated skeleton but disappeared in the other as the estimated skeleton
of the D-DAG ¯∆. In determining orientations, we considered the arrows that were directed in one
estimated CP-DAG but disappeared in the other as the estimated set of directed arrows. Figure G.2
shows the results by applying the PC algorithm on the apoptosis and TGF-β pathway and the results
by applying GES on the TGF-β pathway. Here we omitted GES results on the apoptosis pathway
since GES algorithm did not discover any differences on the apoptosis pathway. Figure G.2 shows
that PC and GES cannot discover any hub nodes.
(a) GES
(b) PC
Figure G.3: Estimate of the difference DAG between naive and activated T cells using the PC and
GES algorithms.
23

H
Real data analysis - T cell activation
We compare DCI with the GES and PC algorithms on the T cell activation data set. Figure G.3 (a)
shows the results of applying GES to naive and activated data sets separately and calculating the
difference. Figure G.3 (b) shows the estimated results of applying PC to the T cell data set.
24

