Answer Set Solving in Practice
Martin Gebser and Torsten Schaub
University of Potsdam
torsten@cs.uni-potsdam.de
Potassco Slide Packages are licensed under a Creative Commons Attribution 3.0 Unported License.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
1 / 52

Rough Roadmap
1 Introduction
2 Language
3 Modeling
4 Grounding
5 Foundations
6 Solving
7 Systems
8 Applications
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
2 / 52

Resources
Course material
http://www.cs.uni-potsdam.de/wv/lehre
http://moodle.cs.uni-potsdam.de
http://potassco.sourceforge.net/teaching.html
Systems
clasp
http://potassco.sourceforge.net
dlv
http://www.dlvsystem.com
smodels
http://www.tcs.hut.fi/Software/smodels
gringo
http://potassco.sourceforge.net
lparse
http://www.tcs.hut.fi/Software/smodels
clingo
http://potassco.sourceforge.net
iclingo
http://potassco.sourceforge.net
oclingo
http://potassco.sourceforge.net
asparagus
http://asparagus.cs.uni-potsdam.de
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
3 / 52

The Potassco Book
1.
Motivation
2.
Introduction
3.
Basic modeling
4.
Grounding
5.
Characterizations
6.
Solving
7.
Systems
8.
Advanced modeling
9.
Conclusions
Answer Set Solving in Practice
Martin Gebser, Roland Kaminski, Benjamin Kaufmann, and Torsten Schaub
University of Potsdam
SYNTHESIS LECTURES ON SAMPLE SERIES #1
C
M
&
cLaypool
Morgan
publishers
&
Resources
http://potassco.sourceforge.net/book.html
http://potassco.sourceforge.net/teaching.html
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
4 / 52

Literature
Books [4], [29], [53]
Surveys [50], [2], [39], [21], [11]
Articles [41], [42], [6], [61], [54], [49], [40], etc.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
5 / 52

Basic Modeling: Overview
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
6 / 52

Modeling and Interpreting
Problem
Logic Program
Solution
Stable Models
?
-
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
7 / 52

Modeling
For solving a problem class C for a problem instance I,
encode
1 the problem instance I as a set PI of facts and
2 the problem class C as a set PC of rules
such that the solutions to C for I can be (polynomially) extracted
from the stable models of PI ∪PC
PI is (still) called problem instance
PC is often called the problem encoding
An encoding PC is uniform, if it can be used to solve all its
problem instances
That is, PC encodes the solutions to C for any set PI of facts
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
8 / 52

Modeling
For solving a problem class C for a problem instance I,
encode
1 the problem instance I as a set PI of facts and
2 the problem class C as a set PC of rules
such that the solutions to C for I can be (polynomially) extracted
from the stable models of PI ∪PC
PI is (still) called problem instance
PC is often called the problem encoding
An encoding PC is uniform, if it can be used to solve all its
problem instances
That is, PC encodes the solutions to C for any set PI of facts
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
8 / 52

Modeling
For solving a problem class C for a problem instance I,
encode
1 the problem instance I as a set PI of facts and
2 the problem class C as a set PC of rules
such that the solutions to C for I can be (polynomially) extracted
from the stable models of PI ∪PC
PI is (still) called problem instance
PC is often called the problem encoding
An encoding PC is uniform, if it can be used to solve all its
problem instances
That is, PC encodes the solutions to C for any set PI of facts
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
8 / 52

ASP solving process
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
9 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
6
Elaborating
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
10 / 52

ASP solving process
A case-study: Graph coloring
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
11 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
1
2
3
4
5
6
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
facts formed by predicates node/1 and edge/2
1
2
3
4
5
6
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
facts formed by predicates node/1 and edge/2
facts formed by predicate col/1
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
facts formed by predicates node/1 and edge/2
facts formed by predicate col/1
Problem class Assign each node one color such that no two nodes
connected by an edge have the same color
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
Graph coloring
Problem instance A graph consisting of nodes and edges
facts formed by predicates node/1 and edge/2
facts formed by predicate col/1
Problem class Assign each node one color such that no two nodes
connected by an edge have the same color
In other words,
1 Each node has a unique color
2 Two connected nodes must not have the same color
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
12 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
13 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
Graph coloring
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
color.lp
node(1..6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).































Problem
instance
1 { color(X,C) : col(C) } 1 :- node(X).
:- edge(X,Y), color(X,C), color(Y,C).



Problem
encoding
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
14 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
15 / 52

ASP solving process
Graph coloring: Grounding
$ gringo --text color.lp
node(1).
node(2).
node(3).
node(4).
node(5).
node(6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).
1 {color(1,r), color(1,b), color(1,g)} 1.
1 {color(2,r), color(2,b), color(2,g)} 1.
1 {color(3,r), color(3,b), color(3,g)} 1.
1 {color(4,r), color(4,b), color(4,g)} 1.
1 {color(5,r), color(5,b), color(5,g)} 1.
1 {color(6,r), color(6,b), color(6,g)} 1.
:- color(1,r), color(2,r).
:- color(2,g), color(5,g).
...
:- color(6,r), color(2,r).
:- color(1,b), color(2,b).
:- color(2,r), color(6,r).
:- color(6,b), color(2,b).
:- color(1,g), color(2,g).
:- color(2,b), color(6,b).
:- color(6,g), color(2,g).
:- color(1,r), color(3,r).
:- color(2,g), color(6,g).
:- color(6,r), color(3,r).
:- color(1,b), color(3,b).
:- color(3,r), color(1,r).
:- color(6,b), color(3,b).
:- color(1,g), color(3,g).
:- color(3,b), color(1,b).
:- color(6,g), color(3,g).
:- color(1,r), color(4,r).
:- color(3,g), color(1,g).
:- color(6,r), color(5,r).
:- color(1,b), color(4,b).
:- color(3,r), color(4,r).
:- color(6,b), color(5,b).
:- color(1,g), color(4,g).
:- color(3,b), color(4,b).
:- color(6,g), color(5,g).
:- color(2,r), color(4,r).
:- color(3,g), color(4,g).
:- color(2,b), color(4,b).
:- color(3,r), color(5,r).
:- color(2,g), color(4,g).
:- color(3,b), color(5,b).
:- color(2,r), color(5,r).
:- color(3,g), color(5,g).
l
(2 b)
l
(5 b)
l
(4
)
l
(1
)
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
16 / 52

ASP solving process
Graph coloring: Grounding
$ gringo --text color.lp
node(1).
node(2).
node(3).
node(4).
node(5).
node(6).
edge(1,2).
edge(1,3).
edge(1,4).
edge(2,4).
edge(2,5).
edge(2,6).
edge(3,1).
edge(3,4).
edge(3,5).
edge(4,1).
edge(4,2).
edge(5,3).
edge(5,4).
edge(5,6).
edge(6,2).
edge(6,3).
edge(6,5).
col(r).
col(b).
col(g).
1 {color(1,r), color(1,b), color(1,g)} 1.
1 {color(2,r), color(2,b), color(2,g)} 1.
1 {color(3,r), color(3,b), color(3,g)} 1.
1 {color(4,r), color(4,b), color(4,g)} 1.
1 {color(5,r), color(5,b), color(5,g)} 1.
1 {color(6,r), color(6,b), color(6,g)} 1.
:- color(1,r), color(2,r).
:- color(2,g), color(5,g).
...
:- color(6,r), color(2,r).
:- color(1,b), color(2,b).
:- color(2,r), color(6,r).
:- color(6,b), color(2,b).
:- color(1,g), color(2,g).
:- color(2,b), color(6,b).
:- color(6,g), color(2,g).
:- color(1,r), color(3,r).
:- color(2,g), color(6,g).
:- color(6,r), color(3,r).
:- color(1,b), color(3,b).
:- color(3,r), color(1,r).
:- color(6,b), color(3,b).
:- color(1,g), color(3,g).
:- color(3,b), color(1,b).
:- color(6,g), color(3,g).
:- color(1,r), color(4,r).
:- color(3,g), color(1,g).
:- color(6,r), color(5,r).
:- color(1,b), color(4,b).
:- color(3,r), color(4,r).
:- color(6,b), color(5,b).
:- color(1,g), color(4,g).
:- color(3,b), color(4,b).
:- color(6,g), color(5,g).
:- color(2,r), color(4,r).
:- color(3,g), color(4,g).
:- color(2,b), color(4,b).
:- color(3,r), color(5,r).
:- color(2,g), color(4,g).
:- color(3,b), color(5,b).
:- color(2,r), color(5,r).
:- color(3,g), color(5,g).
l
(2 b)
l
(5 b)
l
(4
)
l
(1
)
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
16 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
17 / 52

ASP solving process
Graph coloring: Solving
$ gringo color.lp | clasp 0
clasp version 2.1.0
Reading from stdin
Solving...
Answer: 1
edge(1,2) ... col(r) ... node(1) ... color(6,b) color(5,g) color(4,b) color(3,r) color(2,r) color(1,g)
Answer: 2
edge(1,2) ... col(r) ... node(1) ... color(6,r) color(5,g) color(4,r) color(3,b) color(2,b) color(1,g)
Answer: 3
edge(1,2) ... col(r) ... node(1) ... color(6,g) color(5,b) color(4,g) color(3,r) color(2,r) color(1,b)
Answer: 4
edge(1,2) ... col(r) ... node(1) ... color(6,r) color(5,b) color(4,r) color(3,g) color(2,g) color(1,b)
Answer: 5
edge(1,2) ... col(r) ... node(1) ... color(6,g) color(5,r) color(4,g) color(3,b) color(2,b) color(1,r)
Answer: 6
edge(1,2) ... col(r) ... node(1) ... color(6,b) color(5,r) color(4,b) color(3,g) color(2,g) color(1,r)
SATISFIABLE
Models
: 6
Time
: 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time
: 0.000s
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
18 / 52

ASP solving process
Graph coloring: Solving
$ gringo color.lp | clasp 0
clasp version 2.1.0
Reading from stdin
Solving...
Answer: 1
edge(1,2) ... col(r) ... node(1) ... color(6,b) color(5,g) color(4,b) color(3,r) color(2,r) color(1,g)
Answer: 2
edge(1,2) ... col(r) ... node(1) ... color(6,r) color(5,g) color(4,r) color(3,b) color(2,b) color(1,g)
Answer: 3
edge(1,2) ... col(r) ... node(1) ... color(6,g) color(5,b) color(4,g) color(3,r) color(2,r) color(1,b)
Answer: 4
edge(1,2) ... col(r) ... node(1) ... color(6,r) color(5,b) color(4,r) color(3,g) color(2,g) color(1,b)
Answer: 5
edge(1,2) ... col(r) ... node(1) ... color(6,g) color(5,r) color(4,g) color(3,b) color(2,b) color(1,r)
Answer: 6
edge(1,2) ... col(r) ... node(1) ... color(6,b) color(5,r) color(4,b) color(3,g) color(2,g) color(1,r)
SATISFIABLE
Models
: 6
Time
: 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time
: 0.000s
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
18 / 52

ASP solving process
ASP solving process
Problem
Logic
Program
Grounder
Solver
Stable
Models
Solution
-
-
-
?
6
Modeling
Interpreting
Solving
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
19 / 52

ASP solving process
A coloring
Answer: 6
edge(1,2) ... col(r) ... node(1) ...
\
color(6,b) color(5,r) color(4,b) color(3,g) color(2,g) color(1,r)
1
2
3
4
5
6
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
20 / 52

ASP solving process
A coloring
Answer: 6
edge(1,2) ... col(r) ... node(1) ...
\
color(6,b) color(5,r) color(4,b) color(3,g) color(2,g) color(1,r)
1
2
3
4
5
6
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
20 / 52

Methodology
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
21 / 52

Methodology
Basic methodology
Methodology
Generate and Test
(or: Guess and Check)
Generator Generate potential stable model candidates
(typically through non-deterministic constructs)
Tester Eliminate invalid candidates
(typically through integrity constraints)
Nutshell
Logic program = Data + Generator + Tester ( + Optimizer)
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
22 / 52

Methodology
Basic methodology
Methodology
Generate and Test
(or: Guess and Check)
Generator Generate potential stable model candidates
(typically through non-deterministic constructs)
Tester Eliminate invalid candidates
(typically through integrity constraints)
Nutshell
Logic program = Data + Generator + Tester ( + Optimizer)
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
22 / 52

Methodology
Satisﬁability
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
23 / 52

Methodology
Satisﬁability
Satisﬁability testing
Problem Instance: A propositional formula φ in CNF
Problem Class: Is there an assignment of propositional variables to
true and false such that a given formula φ is true
Example: Consider formula
(a ∨¬b) ∧(¬a ∨b)
Logic Program:
Generator
Tester
Stable models
{ a, b }
←
←
∼a, b
←
a, ∼b
X1
=
{a, b}
X2
=
{}
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
24 / 52

Methodology
Satisﬁability
Satisﬁability testing
Problem Instance: A propositional formula φ in CNF
Problem Class: Is there an assignment of propositional variables to
true and false such that a given formula φ is true
Example: Consider formula
(a ∨¬b) ∧(¬a ∨b)
Logic Program:
Generator
Tester
Stable models
{ a, b }
←
←
∼a, b
←
a, ∼b
X1
=
{a, b}
X2
=
{}
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
24 / 52

Methodology
Satisﬁability
Satisﬁability testing
Problem Instance: A propositional formula φ in CNF
Problem Class: Is there an assignment of propositional variables to
true and false such that a given formula φ is true
Example: Consider formula
(a ∨¬b) ∧(¬a ∨b)
Logic Program:
Generator
Tester
Stable models
{ a, b }
←
←
∼a, b
←
a, ∼b
X1
=
{a, b}
X2
=
{}
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
24 / 52

Methodology
Satisﬁability
Satisﬁability testing
Problem Instance: A propositional formula φ in CNF
Problem Class: Is there an assignment of propositional variables to
true and false such that a given formula φ is true
Example: Consider formula
(a ∨¬b) ∧(¬a ∨b)
Logic Program:
Generator
Tester
Stable models
{ a, b }
←
←
∼a, b
←
a, ∼b
X1
=
{a, b}
X2
=
{}
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
24 / 52

Methodology
Satisﬁability
Satisﬁability testing
Problem Instance: A propositional formula φ in CNF
Problem Class: Is there an assignment of propositional variables to
true and false such that a given formula φ is true
Example: Consider formula
(a ∨¬b) ∧(¬a ∨b)
Logic Program:
Generator
Tester
Stable models
{ a, b }
←
←
∼a, b
←
a, ∼b
X1
=
{a, b}
X2
=
{}
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
24 / 52

Methodology
Queens
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
25 / 52

Methodology
Queens
The n-Queens Problem
5 Z0Z0Z
4 0Z0Z0
3 Z0Z0Z
2 0Z0Z0
1 Z0Z0Z
1
2
3
4
5
Place n queens on an n × n
chess board
Queens must not attack one
another
Q Q Q
Q Q
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
26 / 52

Methodology
Queens
Deﬁning the Field
queens.lp
row(1..n).
col(1..n).
Create ﬁle queens.lp
Deﬁne the ﬁeld
n rows
n columns
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
27 / 52

Methodology
Queens
Deﬁning the Field
Running . . .
$ gringo queens.lp --const n=5 | clasp
Answer: 1
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5)
SATISFIABLE
Models
: 1
Time
: 0.000
Prepare
: 0.000
Prepro.
: 0.000
Solving
: 0.000
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
28 / 52

Methodology
Queens
Placing some Queens
queens.lp
row(1..n).
col(1..n).
{ queen(I,J) : row(I) : col(J) }.
Guess a solution candidate
by placing some queens on the board
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
29 / 52

Methodology
Queens
Placing some Queens
Running . . .
$ gringo queens.lp --const n=5 | clasp 3
Answer: 1
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5)
Answer: 2
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5) queen(1,1)
Answer: 3
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5) queen(2,1)
SATISFIABLE
Models
: 3+
...
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
30 / 52

Methodology
Queens
Placing some Queens: Answer 1
Answer 1
5 Z0Z0Z
4 0Z0Z0
3 Z0Z0Z
2 0Z0Z0
1 Z0Z0Z
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
31 / 52

Methodology
Queens
Placing some Queens: Answer 2
Answer 2
5 Z0Z0Z
4 0Z0Z0
3 Z0Z0Z
2 0Z0Z0
1 L0Z0Z
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
32 / 52

Methodology
Queens
Placing some Queens: Answer 3
Answer 3
5 Z0Z0Z
4 0Z0Z0
3 Z0Z0Z
2 QZ0Z0
1 Z0Z0Z
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
33 / 52

Methodology
Queens
Placing n Queens
queens.lp
row(1..n).
col(1..n).
{ queen(I,J) : row(I) : col(J) }.
:- not n { queen(I,J) } n.
Place exactly n queens on the board
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
34 / 52

Methodology
Queens
Placing n Queens
Running . . .
$ gringo queens.lp --const n=5 | clasp 2
Answer: 1
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5) \
queen(5,1) queen(4,1) queen(3,1) \
queen(2,1) queen(1,1)
Answer: 2
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5) \
queen(1,2) queen(4,1) queen(3,1) \
queen(2,1) queen(1,1)
...
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
35 / 52

Methodology
Queens
Placing n Queens: Answer 1
Answer 1
5 L0Z0Z
4 QZ0Z0
3 L0Z0Z
2 QZ0Z0
1 L0Z0Z
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
36 / 52

Methodology
Queens
Placing n Queens: Answer 2
Answer 2
5 Z0Z0Z
4 QZ0Z0
3 L0Z0Z
2 QZ0Z0
1 LQZ0Z
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
37 / 52

Methodology
Queens
Horizontal and Vertical Attack
queens.lp
row(1..n).
col(1..n).
{ queen(I,J) : row(I) : col(J) }.
:- not n { queen(I,J) } n.
:- queen(I,J), queen(I,JJ), J != JJ.
:- queen(I,J), queen(II,J), I != II.
Forbid horizontal attacks
Forbid vertical attacks
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
38 / 52

Methodology
Queens
Horizontal and Vertical Attack
queens.lp
row(1..n).
col(1..n).
{ queen(I,J) : row(I) : col(J) }.
:- not n { queen(I,J) } n.
:- queen(I,J), queen(I,JJ), J != JJ.
:- queen(I,J), queen(II,J), I != II.
Forbid horizontal attacks
Forbid vertical attacks
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
38 / 52

Methodology
Queens
Horizontal and Vertical Attack
Running . . .
$ gringo queens.lp --const n=5 | clasp
Answer: 1
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5) \
queen(5,5) queen(4,4) queen(3,3) \
queen(2,2) queen(1,1)
...
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
39 / 52

Methodology
Queens
Horizontal and Vertical Attack: Answer 1
Answer 1
5 Z0Z0L
4 0Z0L0
3 Z0L0Z
2 0L0Z0
1 L0Z0Z
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
40 / 52

Methodology
Queens
Diagonal Attack
queens.lp
row(1..n).
col(1..n).
{ queen(I,J) : row(I) : col(J) }.
:- not n { queen(I,J) } n.
:- queen(I,J), queen(I,JJ), J != JJ.
:- queen(I,J), queen(II,J), I != II.
:- queen(I,J), queen(II,JJ), (I,J) != (II,JJ), I-J == II-JJ.
:- queen(I,J), queen(II,JJ), (I,J) != (II,JJ), I+J == II+JJ.
Forbid diagonal attacks
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
41 / 52

Methodology
Queens
Diagonal Attack
Running . . .
$ gringo queens.lp --const n=5 | clasp
Answer: 1
row(1) row(2) row(3) row(4) row(5) \
col(1) col(2) col(3) col(4) col(5) \
queen(4,5) queen(1,4) queen(3,3) queen(5,2) queen(2,1)
SATISFIABLE
Models
: 1+
Time
: 0.000
Prepare
: 0.000
Prepro.
: 0.000
Solving
: 0.000
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
42 / 52

Methodology
Queens
Diagonal Attack: Answer 1
Answer 1
5 ZQZ0Z
4 0Z0ZQ
3 Z0L0Z
2 QZ0Z0
1 Z0ZQZ
1
2
3
4
5
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
43 / 52

Methodology
Queens
Optimizing
queens-opt.lp
1 { queen(I,1..n) } 1 :- I = 1..n.
1 { queen(1..n,J) } 1 :- J = 1..n.
:- 2 { queen(D-J,J) }, D = 2..2*n.
:- 2 { queen(D+J,J) }, D = 1-n..n-1.
Encoding can be optimized
Much faster to solve
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
44 / 52

Methodology
Queens
And sometimes it rocks
$ clingo -c n=5000 queens-opt-diag.lp --config=jumpy -q --stats=3
clingo version 4.1.0
Solving...
SATISFIABLE
Models
: 1+
Time
: 3758.143s (Solving: 1905.22s 1st Model: 1896.20s Unsat: 0.00s)
CPU Time
: 3758.320s
Choices
: 288594554
Conflicts
: 3442
(Analyzed: 3442)
Restarts
: 17
(Average: 202.47 Last: 3442)
Model-Level
: 7594728.0
Problems
: 1
(Average Length: 0.00 Splits: 0)
Lemmas
: 3442
(Deleted: 0)
Binary
: 0
(Ratio:
0.00%)
Ternary
: 0
(Ratio:
0.00%)
Conflict
: 3442
(Average Length: 229056.5 Ratio: 100.00%)
Loop
: 0
(Average Length:
0.0 Ratio:
0.00%)
Other
: 0
(Average Length:
0.0 Ratio:
0.00%)
Atoms
: 75084857 (Original: 75069989 Auxiliary: 14868)
Rules
: 100129956 (1: 50059992/100090100 2: 39990/29856 3: 10000/10000)
Bodies
: 25090103
Equivalences : 125029999 (Atom=Atom: 50009999 Body=Body: 0 Other: 75020000)
Tight
: Yes
Variables
: 25024868 (Eliminated: 11781 Frozen: 25000000)
Constraints
: 66664
(Binary: 35.6% Ternary:
0.0% Other: 64.4%)
Backjumps
: 3442
(Average: 681.19 Max: 169512 Sum: 2344658)
Executed
: 3442
(Average: 681.19 Max: 169512 Sum: 2344658 Ratio: 100.00%)
Bounded
: 0
(Average:
0.00 Max:
0 Sum:
0 Ratio:
0.00%)
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
45 / 52

Methodology
Traveling Salesperson
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
46 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
node(1..6).
edge(1,2;3;4).
edge(2,4;5;6).
edge(3,1;4;5).
edge(4,1;2).
edge(5,3;4;6).
edge(6,2;3;5).
cost(1,2,2).
cost(1,3,3).
cost(1,4,1).
cost(2,4,2).
cost(2,5,2).
cost(2,6,4).
cost(3,1,3).
cost(3,4,2).
cost(3,5,2).
cost(4,1,1).
cost(4,2,2).
cost(5,3,2).
cost(5,4,2).
cost(5,6,1).
cost(6,2,4).
cost(6,3,3).
cost(6,5,1).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
47 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
node(1..6).
edge(1,2;3;4).
edge(2,4;5;6).
edge(3,1;4;5).
edge(4,1;2).
edge(5,3;4;6).
edge(6,2;3;5).
cost(1,2,2).
cost(1,3,3).
cost(1,4,1).
cost(2,4,2).
cost(2,5,2).
cost(2,6,4).
cost(3,1,3).
cost(3,4,2).
cost(3,5,2).
cost(4,1,1).
cost(4,2,2).
cost(5,3,2).
cost(5,4,2).
cost(5,6,1).
cost(6,2,4).
cost(6,3,3).
cost(6,5,1).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
47 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
node(1..6).
edge(1,2;3;4).
edge(2,4;5;6).
edge(3,1;4;5).
edge(4,1;2).
edge(5,3;4;6).
edge(6,2;3;5).
cost(1,2,2).
cost(1,3,3).
cost(1,4,1).
cost(2,4,2).
cost(2,5,2).
cost(2,6,4).
cost(3,1,3).
cost(3,4,2).
cost(3,5,2).
cost(4,1,1).
cost(4,2,2).
cost(5,3,2).
cost(5,4,2).
cost(5,6,1).
cost(6,2,4).
cost(6,3,3).
cost(6,5,1).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
47 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(X).
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(Y).
reached(Y) :- cycle(1,Y).
reached(Y) :- cycle(X,Y), reached(X).
:- node(Y), not reached(Y).
#minimize [ cycle(X,Y) = C : cost(X,Y,C) ].
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
48 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(X).
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(Y).
reached(Y) :- cycle(1,Y).
reached(Y) :- cycle(X,Y), reached(X).
:- node(Y), not reached(Y).
#minimize [ cycle(X,Y) = C : cost(X,Y,C) ].
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
48 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(X).
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(Y).
reached(Y) :- cycle(1,Y).
reached(Y) :- cycle(X,Y), reached(X).
:- node(Y), not reached(Y).
#minimize [ cycle(X,Y) = C : cost(X,Y,C) ].
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
48 / 52

Methodology
Traveling Salesperson
Traveling Salesperson
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(X).
1 { cycle(X,Y) : edge(X,Y) } 1 :- node(Y).
reached(Y) :- cycle(1,Y).
reached(Y) :- cycle(X,Y), reached(X).
:- node(Y), not reached(Y).
#minimize [ cycle(X,Y) = C : cost(X,Y,C) ].
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
48 / 52

Methodology
Reviewer Assignment
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
49 / 52

Methodology
Reviewer Assignment
Reviewer Assignment
by Ilkka Niemel¨a
reviewer(r1). paper(p1). classA(r1,p1). classB(r1,p2). coi(r1,p3).
reviewer(r2). paper(p2). classA(r1,p3). classB(r1,p4). coi(r1,p6).
...
3 { assigned(P,R) : reviewer(R) } 3 :-
paper(P).
:- assigned(P,R), coi(R,P).
:- assigned(P,R), not classA(R,P), not classB(R,P).
:- not 6 { assigned(P,R) : paper(P) } 9, reviewer(R).
assignedB(P,R) :-
classB(R,P), assigned(P,R).
:- 3 { assignedB(P,R) : paper(P) }, reviewer(R).
#minimize { assignedB(P,R) : paper(P) : reviewer(R) }.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
50 / 52

Methodology
Reviewer Assignment
Reviewer Assignment
by Ilkka Niemel¨a
reviewer(r1). paper(p1). classA(r1,p1). classB(r1,p2). coi(r1,p3).
reviewer(r2). paper(p2). classA(r1,p3). classB(r1,p4). coi(r1,p6).
...
3 { assigned(P,R) : reviewer(R) } 3 :-
paper(P).
:- assigned(P,R), coi(R,P).
:- assigned(P,R), not classA(R,P), not classB(R,P).
:- not 6 { assigned(P,R) : paper(P) } 9, reviewer(R).
assignedB(P,R) :-
classB(R,P), assigned(P,R).
:- 3 { assignedB(P,R) : paper(P) }, reviewer(R).
#minimize { assignedB(P,R) : paper(P) : reviewer(R) }.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
50 / 52

Methodology
Reviewer Assignment
Reviewer Assignment
by Ilkka Niemel¨a
reviewer(r1). paper(p1). classA(r1,p1). classB(r1,p2). coi(r1,p3).
reviewer(r2). paper(p2). classA(r1,p3). classB(r1,p4). coi(r1,p6).
...
3 { assigned(P,R) : reviewer(R) } 3 :-
paper(P).
:- assigned(P,R), coi(R,P).
:- assigned(P,R), not classA(R,P), not classB(R,P).
:- not 6 { assigned(P,R) : paper(P) } 9, reviewer(R).
assignedB(P,R) :-
classB(R,P), assigned(P,R).
:- 3 { assignedB(P,R) : paper(P) }, reviewer(R).
#minimize { assignedB(P,R) : paper(P) : reviewer(R) }.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
50 / 52

Methodology
Reviewer Assignment
Reviewer Assignment
by Ilkka Niemel¨a
reviewer(r1). paper(p1). classA(r1,p1). classB(r1,p2). coi(r1,p3).
reviewer(r2). paper(p2). classA(r1,p3). classB(r1,p4). coi(r1,p6).
...
3 { assigned(P,R) : reviewer(R) } 3 :-
paper(P).
:- assigned(P,R), coi(R,P).
:- assigned(P,R), not classA(R,P), not classB(R,P).
:- not 6 { assigned(P,R) : paper(P) } 9, reviewer(R).
assignedB(P,R) :-
classB(R,P), assigned(P,R).
:- 3 { assignedB(P,R) : paper(P) }, reviewer(R).
#minimize { assignedB(P,R) : paper(P) : reviewer(R) }.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
50 / 52

Methodology
Reviewer Assignment
Reviewer Assignment
by Ilkka Niemel¨a
reviewer(r1). paper(p1). classA(r1,p1). classB(r1,p2). coi(r1,p3).
reviewer(r2). paper(p2). classA(r1,p3). classB(r1,p4). coi(r1,p6).
...
3 { assigned(P,R) : reviewer(R) } 3 :-
paper(P).
:- assigned(P,R), coi(R,P).
:- assigned(P,R), not classA(R,P), not classB(R,P).
:- not 6 { assigned(P,R) : paper(P) } 9, reviewer(R).
assignedB(P,R) :-
classB(R,P), assigned(P,R).
:- 3 { assignedB(P,R) : paper(P) }, reviewer(R).
#minimize { assignedB(P,R) : paper(P) : reviewer(R) }.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
50 / 52

Methodology
Planning
Outline
1 ASP solving process
2 Methodology
Satisﬁability
Queens
Traveling Salesperson
Reviewer Assignment
Planning
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
51 / 52

Methodology
Planning
Simplistic STRIPS Planning
time(1..k).
lasttime(T) :- time(T), not time(T+1).
fluent(p).
action(a).
action(b).
init(p).
fluent(q).
pre(a,p).
pre(b,q).
fluent(r).
add(a,q).
add(b,r).
query(r).
del(a,p).
del(b,q).
holds(P,0) :- init(P).
1 { occ(A,T) : action(A) } 1 :- time(T).
:- occ(A,T), pre(A,F), not holds(F,T-1).
holds(F,T) :- holds(F,T-1), not nolds(F,T), time(T).
holds(F,T) :- occ(A,T), add(A,F).
nolds(F,T) :- occ(A,T), del(A,F).
:- query(F), not holds(F,T), lasttime(T).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Methodology
Planning
Simplistic STRIPS Planning
time(1..k).
lasttime(T) :- time(T), not time(T+1).
fluent(p).
action(a).
action(b).
init(p).
fluent(q).
pre(a,p).
pre(b,q).
fluent(r).
add(a,q).
add(b,r).
query(r).
del(a,p).
del(b,q).
holds(P,0) :- init(P).
1 { occ(A,T) : action(A) } 1 :- time(T).
:- occ(A,T), pre(A,F), not holds(F,T-1).
holds(F,T) :- holds(F,T-1), not nolds(F,T), time(T).
holds(F,T) :- occ(A,T), add(A,F).
nolds(F,T) :- occ(A,T), del(A,F).
:- query(F), not holds(F,T), lasttime(T).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Methodology
Planning
Simplistic STRIPS Planning
time(1..k).
lasttime(T) :- time(T), not time(T+1).
fluent(p).
action(a).
action(b).
init(p).
fluent(q).
pre(a,p).
pre(b,q).
fluent(r).
add(a,q).
add(b,r).
query(r).
del(a,p).
del(b,q).
holds(P,0) :- init(P).
1 { occ(A,T) : action(A) } 1 :- time(T).
:- occ(A,T), pre(A,F), not holds(F,T-1).
holds(F,T) :- holds(F,T-1), not nolds(F,T), time(T).
holds(F,T) :- occ(A,T), add(A,F).
nolds(F,T) :- occ(A,T), del(A,F).
:- query(F), not holds(F,T), lasttime(T).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Methodology
Planning
Simplistic STRIPS Planning
time(1..k).
lasttime(T) :- time(T), not time(T+1).
fluent(p).
action(a).
action(b).
init(p).
fluent(q).
pre(a,p).
pre(b,q).
fluent(r).
add(a,q).
add(b,r).
query(r).
del(a,p).
del(b,q).
holds(P,0) :- init(P).
1 { occ(A,T) : action(A) } 1 :- time(T).
:- occ(A,T), pre(A,F), not holds(F,T-1).
holds(F,T) :- holds(F,T-1), not nolds(F,T), time(T).
holds(F,T) :- occ(A,T), add(A,F).
nolds(F,T) :- occ(A,T), del(A,F).
:- query(F), not holds(F,T), lasttime(T).
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[1]
C. Anger, M. Gebser, T. Linke, A. Neumann, and T. Schaub.
The nomore++ approach to answer set solving.
In G. Sutcliﬀe and A. Voronkov, editors, Proceedings of the Twelfth
International Conference on Logic for Programming, Artiﬁcial
Intelligence, and Reasoning (LPAR’05), volume 3835 of Lecture
Notes in Artiﬁcial Intelligence, pages 95–109. Springer-Verlag, 2005.
[2]
C. Anger, K. Konczak, T. Linke, and T. Schaub.
A glimpse of answer set programming.
K¨unstliche Intelligenz, 19(1):12–17, 2005.
[3]
Y. Babovich and V. Lifschitz.
Computing answer sets using program completion.
Unpublished draft, 2003.
[4]
C. Baral.
Knowledge Representation, Reasoning and Declarative Problem
Solving.
Cambridge University Press, 2003.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[5]
C. Baral, G. Brewka, and J. Schlipf, editors.
Proceedings of the Ninth International Conference on Logic
Programming and Nonmonotonic Reasoning (LPNMR’07), volume
4483 of Lecture Notes in Artiﬁcial Intelligence. Springer-Verlag, 2007.
[6]
C. Baral and M. Gelfond.
Logic programming and knowledge representation.
Journal of Logic Programming, 12:1–80, 1994.
[7]
S. Baselice, P. Bonatti, and M. Gelfond.
Towards an integration of answer set and constraint solving.
In M. Gabbrielli and G. Gupta, editors, Proceedings of the
Twenty-ﬁrst International Conference on Logic Programming
(ICLP’05), volume 3668 of Lecture Notes in Computer Science, pages
52–66. Springer-Verlag, 2005.
[8]
A. Biere.
Adaptive restart strategies for conﬂict driven SAT solvers.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

In H. Kleine B¨uning and X. Zhao, editors, Proceedings of the
Eleventh International Conference on Theory and Applications of
Satisﬁability Testing (SAT’08), volume 4996 of Lecture Notes in
Computer Science, pages 28–33. Springer-Verlag, 2008.
[9]
A. Biere.
PicoSAT essentials.
Journal on Satisﬁability, Boolean Modeling and Computation,
4:75–97, 2008.
[10] A. Biere, M. Heule, H. van Maaren, and T. Walsh, editors.
Handbook of Satisﬁability, volume 185 of Frontiers in Artiﬁcial
Intelligence and Applications.
IOS Press, 2009.
[11] G. Brewka, T. Eiter, and M. Truszczy´nski.
Answer set programming at a glance.
Communications of the ACM, 54(12):92–103, 2011.
[12] K. Clark.
Negation as failure.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

In H. Gallaire and J. Minker, editors, Logic and Data Bases, pages
293–322. Plenum Press, 1978.
[13] M. D’Agostino, D. Gabbay, R. H¨ahnle, and J. Posegga, editors.
Handbook of Tableau Methods.
Kluwer Academic Publishers, 1999.
[14] E. Dantsin, T. Eiter, G. Gottlob, and A. Voronkov.
Complexity and expressive power of logic programming.
In Proceedings of the Twelfth Annual IEEE Conference on
Computational Complexity (CCC’97), pages 82–101. IEEE Computer
Society Press, 1997.
[15] M. Davis, G. Logemann, and D. Loveland.
A machine program for theorem-proving.
Communications of the ACM, 5:394–397, 1962.
[16] M. Davis and H. Putnam.
A computing procedure for quantiﬁcation theory.
Journal of the ACM, 7:201–215, 1960.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[17] C. Drescher, M. Gebser, T. Grote, B. Kaufmann, A. K¨onig,
M. Ostrowski, and T. Schaub.
Conﬂict-driven disjunctive answer set solving.
In G. Brewka and J. Lang, editors, Proceedings of the Eleventh
International Conference on Principles of Knowledge Representation
and Reasoning (KR’08), pages 422–432. AAAI Press, 2008.
[18] C. Drescher, M. Gebser, B. Kaufmann, and T. Schaub.
Heuristics in conﬂict resolution.
In M. Pagnucco and M. Thielscher, editors, Proceedings of the
Twelfth International Workshop on Nonmonotonic Reasoning
(NMR’08), number UNSW-CSE-TR-0819 in School of Computer
Science and Engineering, The University of New South Wales,
Technical Report Series, pages 141–149, 2008.
[19] N. E´en and N. S¨orensson.
An extensible SAT-solver.
In E. Giunchiglia and A. Tacchella, editors, Proceedings of the Sixth
International Conference on Theory and Applications of Satisﬁability
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Testing (SAT’03), volume 2919 of Lecture Notes in Computer
Science, pages 502–518. Springer-Verlag, 2004.
[20] T. Eiter and G. Gottlob.
On the computational cost of disjunctive logic programming:
Propositional case.
Annals of Mathematics and Artiﬁcial Intelligence, 15(3-4):289–323,
1995.
[21] T. Eiter, G. Ianni, and T. Krennwallner.
Answer Set Programming: A Primer.
In S. Tessaris, E. Franconi, T. Eiter, C. Gutierrez, S. Handschuh,
M. Rousset, and R. Schmidt, editors, Fifth International Reasoning
Web Summer School (RW’09), volume 5689 of Lecture Notes in
Computer Science, pages 40–110. Springer-Verlag, 2009.
[22] F. Fages.
Consistency of Clark’s completion and the existence of stable models.
Journal of Methods of Logic in Computer Science, 1:51–60, 1994.
[23] P. Ferraris.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Answer sets for propositional theories.
In C. Baral, G. Greco, N. Leone, and G. Terracina, editors,
Proceedings of the Eighth International Conference on Logic
Programming and Nonmonotonic Reasoning (LPNMR’05), volume
3662 of Lecture Notes in Artiﬁcial Intelligence, pages 119–131.
Springer-Verlag, 2005.
[24] P. Ferraris and V. Lifschitz.
Mathematical foundations of answer set programming.
In S. Art¨emov, H. Barringer, A. d’Avila Garcez, L. Lamb, and
J. Woods, editors, We Will Show Them! Essays in Honour of Dov
Gabbay, volume 1, pages 615–664. College Publications, 2005.
[25] M. Fitting.
A Kripke-Kleene semantics for logic programs.
Journal of Logic Programming, 2(4):295–312, 1985.
[26] M. Gebser, R. Kaminski, B. Kaufmann, M. Ostrowski, T. Schaub,
and S. Thiele.
A user’s guide to gringo, clasp, clingo, and iclingo.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[27] M. Gebser, R. Kaminski, B. Kaufmann, M. Ostrowski, T. Schaub,
and S. Thiele.
Engineering an incremental ASP solver.
In M. Garcia de la Banda and E. Pontelli, editors, Proceedings of the
Twenty-fourth International Conference on Logic Programming
(ICLP’08), volume 5366 of Lecture Notes in Computer Science, pages
190–205. Springer-Verlag, 2008.
[28] M. Gebser, R. Kaminski, B. Kaufmann, and T. Schaub.
On the implementation of weight constraint rules in conﬂict-driven
ASP solvers.
In Hill and Warren [44], pages 250–264.
[29] M. Gebser, R. Kaminski, B. Kaufmann, and T. Schaub.
Answer Set Solving in Practice.
Synthesis Lectures on Artiﬁcial Intelligence and Machine Learning.
Morgan and Claypool Publishers, 2012.
[30] M. Gebser, B. Kaufmann, A. Neumann, and T. Schaub.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

clasp: A conﬂict-driven answer set solver.
In Baral et al. [5], pages 260–265.
[31] M. Gebser, B. Kaufmann, A. Neumann, and T. Schaub.
Conﬂict-driven answer set enumeration.
In Baral et al. [5], pages 136–148.
[32] M. Gebser, B. Kaufmann, A. Neumann, and T. Schaub.
Conﬂict-driven answer set solving.
In Veloso [68], pages 386–392.
[33] M. Gebser, B. Kaufmann, A. Neumann, and T. Schaub.
Advanced preprocessing for answer set solving.
In M. Ghallab, C. Spyropoulos, N. Fakotakis, and N. Avouris, editors,
Proceedings of the Eighteenth European Conference on Artiﬁcial
Intelligence (ECAI’08), pages 15–19. IOS Press, 2008.
[34] M. Gebser, B. Kaufmann, and T. Schaub.
The conﬂict-driven answer set solver clasp: Progress report.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

In E. Erdem, F. Lin, and T. Schaub, editors, Proceedings of the
Tenth International Conference on Logic Programming and
Nonmonotonic Reasoning (LPNMR’09), volume 5753 of Lecture
Notes in Artiﬁcial Intelligence, pages 509–514. Springer-Verlag, 2009.
[35] M. Gebser, B. Kaufmann, and T. Schaub.
Solution enumeration for projected Boolean search problems.
In W. van Hoeve and J. Hooker, editors, Proceedings of the Sixth
International Conference on Integration of AI and OR Techniques in
Constraint Programming for Combinatorial Optimization Problems
(CPAIOR’09), volume 5547 of Lecture Notes in Computer Science,
pages 71–86. Springer-Verlag, 2009.
[36] M. Gebser, M. Ostrowski, and T. Schaub.
Constraint answer set solving.
In Hill and Warren [44], pages 235–249.
[37] M. Gebser and T. Schaub.
Tableau calculi for answer set programming.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

In S. Etalle and M. Truszczy´nski, editors, Proceedings of the
Twenty-second International Conference on Logic Programming
(ICLP’06), volume 4079 of Lecture Notes in Computer Science, pages
11–25. Springer-Verlag, 2006.
[38] M. Gebser and T. Schaub.
Generic tableaux for answer set programming.
In V. Dahl and I. Niemel¨a, editors, Proceedings of the Twenty-third
International Conference on Logic Programming (ICLP’07), volume
4670 of Lecture Notes in Computer Science, pages 119–133.
Springer-Verlag, 2007.
[39] M. Gelfond.
Answer sets.
In V. Lifschitz, F. van Harmelen, and B. Porter, editors, Handbook of
Knowledge Representation, chapter 7, pages 285–316. Elsevier
Science, 2008.
[40] M. Gelfond and N. Leone.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Logic programming and knowledge representation — the A-Prolog
perspective.
Artiﬁcial Intelligence, 138(1-2):3–38, 2002.
[41] M. Gelfond and V. Lifschitz.
The stable model semantics for logic programming.
In R. Kowalski and K. Bowen, editors, Proceedings of the Fifth
International Conference and Symposium of Logic Programming
(ICLP’88), pages 1070–1080. MIT Press, 1988.
[42] M. Gelfond and V. Lifschitz.
Logic programs with classical negation.
In D. Warren and P. Szeredi, editors, Proceedings of the Seventh
International Conference on Logic Programming (ICLP’90), pages
579–597. MIT Press, 1990.
[43] E. Giunchiglia, Y. Lierler, and M. Maratea.
Answer set programming based on propositional satisﬁability.
Journal of Automated Reasoning, 36(4):345–377, 2006.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[44] P. Hill and D. Warren, editors.
Proceedings of the Twenty-ﬁfth International Conference on Logic
Programming (ICLP’09), volume 5649 of Lecture Notes in Computer
Science. Springer-Verlag, 2009.
[45] J. Huang.
The eﬀect of restarts on the eﬃciency of clause learning.
In Veloso [68], pages 2318–2323.
[46] K. Konczak, T. Linke, and T. Schaub.
Graphs and colorings for answer set programming.
Theory and Practice of Logic Programming, 6(1-2):61–106, 2006.
[47] J. Lee.
A model-theoretic counterpart of loop formulas.
In L. Kaelbling and A. Saﬃotti, editors, Proceedings of the
Nineteenth International Joint Conference on Artiﬁcial Intelligence
(IJCAI’05), pages 503–508. Professional Book Center, 2005.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[48] N. Leone, G. Pfeifer, W. Faber, T. Eiter, G. Gottlob, S. Perri, and
F. Scarcello.
The DLV system for knowledge representation and reasoning.
ACM Transactions on Computational Logic, 7(3):499–562, 2006.
[49] V. Lifschitz.
Answer set programming and plan generation.
Artiﬁcial Intelligence, 138(1-2):39–54, 2002.
[50] V. Lifschitz.
Introduction to answer set programming.
Unpublished draft, 2004.
[51] V. Lifschitz and A. Razborov.
Why are there so many loop formulas?
ACM Transactions on Computational Logic, 7(2):261–268, 2006.
[52] F. Lin and Y. Zhao.
ASSAT: computing answer sets of a logic program by SAT solvers.
Artiﬁcial Intelligence, 157(1-2):115–137, 2004.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[53] V. Marek and M. Truszczy´nski.
Nonmonotonic logic: context-dependent reasoning.
Artiﬁcal Intelligence. Springer-Verlag, 1993.
[54] V. Marek and M. Truszczy´nski.
Stable models and an alternative logic programming paradigm.
In K. Apt, V. Marek, M. Truszczy´nski, and D. Warren, editors, The
Logic Programming Paradigm: a 25-Year Perspective, pages 375–398.
Springer-Verlag, 1999.
[55] J. Marques-Silva, I. Lynce, and S. Malik.
Conﬂict-driven clause learning SAT solvers.
In Biere et al. [10], chapter 4, pages 131–153.
[56] J. Marques-Silva and K. Sakallah.
GRASP: A search algorithm for propositional satisﬁability.
IEEE Transactions on Computers, 48(5):506–521, 1999.
[57] V. Mellarkod and M. Gelfond.
Integrating answer set reasoning with constraint solving techniques.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

In J. Garrigue and M. Hermenegildo, editors, Proceedings of the
Ninth International Symposium on Functional and Logic
Programming (FLOPS’08), volume 4989 of Lecture Notes in
Computer Science, pages 15–31. Springer-Verlag, 2008.
[58] V. Mellarkod, M. Gelfond, and Y. Zhang.
Integrating answer set programming and constraint logic
programming.
Annals of Mathematics and Artiﬁcial Intelligence, 53(1-4):251–287,
2008.
[59] D. Mitchell.
A SAT solver primer.
Bulletin of the European Association for Theoretical Computer
Science, 85:112–133, 2005.
[60] M. Moskewicz, C. Madigan, Y. Zhao, L. Zhang, and S. Malik.
Chaﬀ: Engineering an eﬃcient SAT solver.
In Proceedings of the Thirty-eighth Conference on Design
Automation (DAC’01), pages 530–535. ACM Press, 2001.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

[61] I. Niemel¨a.
Logic programs with stable model semantics as a constraint
programming paradigm.
Annals of Mathematics and Artiﬁcial Intelligence, 25(3-4):241–273,
1999.
[62] R. Nieuwenhuis, A. Oliveras, and C. Tinelli.
Solving SAT and SAT modulo theories: From an abstract
Davis-Putnam-Logemann-Loveland procedure to DPLL(T).
Journal of the ACM, 53(6):937–977, 2006.
[63] K. Pipatsrisawat and A. Darwiche.
A lightweight component caching scheme for satisﬁability solvers.
In J. Marques-Silva and K. Sakallah, editors, Proceedings of the
Tenth International Conference on Theory and Applications of
Satisﬁability Testing (SAT’07), volume 4501 of Lecture Notes in
Computer Science, pages 294–299. Springer-Verlag, 2007.
[64] L. Ryan.
Eﬃcient algorithms for clause-learning SAT solvers.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

Master’s thesis, Simon Fraser University, 2004.
[65] P. Simons, I. Niemel¨a, and T. Soininen.
Extending and implementing the stable model semantics.
Artiﬁcial Intelligence, 138(1-2):181–234, 2002.
[66] T. Syrj¨anen.
Lparse 1.0 user’s manual.
[67] A. Van Gelder, K. Ross, and J. Schlipf.
The well-founded semantics for general logic programs.
Journal of the ACM, 38(3):620–650, 1991.
[68] M. Veloso, editor.
Proceedings of the Twentieth International Joint Conference on
Artiﬁcial Intelligence (IJCAI’07). AAAI/MIT Press, 2007.
[69] L. Zhang, C. Madigan, M. Moskewicz, and S. Malik.
Eﬃcient conﬂict driven learning in a Boolean satisﬁability solver.
In Proceedings of the International Conference on Computer-Aided
Design (ICCAD’01), pages 279–285. ACM Press, 2001.
M. Gebser and T. Schaub (KRR@UP)
Answer Set Solving in Practice
July 13, 2013
52 / 52

