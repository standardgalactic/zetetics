4 Soundness and completeness
Is there a relationship between the concept of truth and the concept of proof ? In the
previous chapter we investigated what it means for a structure to satisfy a first-order
formula and then we discussed deductions of first-order formulas. In this chapter we
will establish two consequential relationships between satisfaction and deduction. The
first relationship is called the soundness theorem, which implies that every first-order
formula that is deducible, from the logical axioms alone, is logically valid. The second
relationship, the completeness theorem, shows that every first-order formula that is log-
ically valid is deducible.
4.1 The soundness theorem
The soundness theorem asserts that “deductions preserve truth,” that is, if Γ is a set of
well-formed formulas (wffs) and each wff in Γ holds in a structure, then any wff that is
deducible from Γ will also hold in this structure. The goal of this section is to prove the
soundness theorem.
Theorem (Soundness). Let Γ be a set of formulas. If Γ ⊢φ, then Γ 󳀀󳨐φ.
The soundness theorem shows that if a formula φ is deducible from a set of wffs Γ,
then the set Γ logically implies φ (see Definition 3.2.15). Therefore, deductions produce
valid conclusions, that is, these deduced conclusions will hold in every structure in
which the assumptions hold. This confirms why proof in mathematics is so important.
Before we present the proof of this theorem, we need to state and prove some technical
lemmas.
4.1.1 Technical lemmas
Our first two technical lemmas are used to prove that all the logical axioms are logically
valid, that is, every logical axiom is true in every structure. Recall that for a wff α, we
defined the wff αx
t in Definition 3.3.13 so that αx
t is the result of “replacing the variable x
in α with the term t,” with one exception (item 4 of Definition 3.3.13). Now, given a term τ,
let us define τx
t to be the term obtained by replacing the variable x in τ with the term t
(see Exercise 11 on page 65). Also recall that, given an assignment s, sx|d is the function
which is exactly like s except for one thing: at the variable x it assumes the value d,
that is,
sx|d(v) = {s(v),
if v
̸= x,
d,
if v = x.
https://doi.org/10.1515/9783110782073-004

120
౪
4 Soundness and completeness
Given an assignment s, we will show in our next lemma that the value of s(τx
t ) can be
obtained by using the assignment sx|s(t).
Lemma 4.1.1. Let A be a structure and let s be an assignment. For terms τ, t and variable
x we have s(τx
t ) = sx|s(t)(τ).
Proof. Let A be a structure, s an assignment, t a term, and x a variable. We shall prove
that s(τx
t ) = sx|s(t)(τ) by induction on terms τ.
Base step: Let c and v be a constant and a variable, respectively, of the language ℒ.
Clearly, cx
t = c, so s(cx
t ) = cA = sx|s(t)(c) by Definition 3.2.4. If v
̸= x, then vx
t = v, so
s(vx
t ) = s(v) = sx|s(t)(v). If v = x, then xx
t = t, so s(xx
t ) = s(t) = sx|s(t)(x).
Inductive step: Let f be an n-place function symbol in ℒand let τ1, . . . , τn be terms. As-
sume the induction hypothesis
For each i ≤n we have s(τi
x
t ) = sx|s(t)(τi).
(IH)
We must prove that the same holds for the term fτ1 ⋅⋅⋅τn. Thus,
s((fτ1 ⋅⋅⋅τn)x
t ) = s(f τ1
x
t ⋅⋅⋅τn
x
t )
Exercise 11(2), page 65,
= f A(s(τ1
x
t ), . . . , s(τn
x
t ))
by Theorem 3.2.5(3),
= f A(sx|s(t)(τ1), . . . , sx|s(t)(τn))
by (IH),
= sx|s(t)(fτ1 ⋅⋅⋅τn)
by Theorem 3.2.5(3).
Lemma 4.1.2 (Substitution). If the term t is substitutable for the variable x in the wff φ,
then for every structure A and every assignment s, we have
A 󳀀󳨐φx
t [s]
iff
A 󳀀󳨐φ[sx|s(t)].
Proof. Let A be an arbitrary structure. We shall prove the following statement by induc-
tion on wffs: If t is substitutable for x in φ, then
A 󳀀󳨐φx
t [s]
iff
A 󳀀󳨐φ[sx|s(t)] for all assignments s.
Base step: Let Pτ1 ⋅⋅⋅τn be an atomic formula. Let s be an assignment. We note that
(⋆) (Pτ1 ⋅⋅⋅τn)x
t = Pτ1
x
t ⋅⋅⋅τn
x
t . Thus,
A 󳀀󳨐(Pτ1 ⋅⋅⋅τn)x
t [s]
iff
A 󳀀󳨐𝒫τ1
x
t ⋅⋅⋅τn
x
t [s]
by (⋆),
iff
⟨s(τ1
x
t ), . . . , s(τn
x
t )⟩∈PA
by Definition 3.2.6(2),
iff
⟨sx|s(t)(τ1), . . . , sx|s(t)(τn)⟩∈PA
by Lemma 4.1.1,
iff
A 󳀀󳨐Pτ1 ⋅⋅⋅τn[sx|s(t)]
by Definition 3.2.6(2).
Inductive step: Let α and β be arbitrary wffs. Assume the induction hypothesis

4.1 The soundness theorem
౪
121
if t is substitutable for x in α, then A 󳀀󳨐αx
t [s] iff A 󳀀󳨐α[sx|s(t)],
if t is substitutable for x in β, then A 󳀀󳨐βx
t [s] iff A 󳀀󳨐β[sx|s(t)]
(IH)
for all assignments s. We must prove that the same holds for each of the following:
(¬α), (α →β), ∀vα.
Case (¬α): Let s be an assignment and let t be substitutable for x in (¬α). It follows that
t is substitutable for x in α (see Definition 3.3.15) and that (¬α)x
t = ¬αx
t . Hence
A 󳀀󳨐(¬α)x
t [s]
iff
A
̸󳀀󳨐αx
t [s]
by Definition 3.2.6(3),
iff
A
̸󳀀󳨐α[sx|s(t)]
by (IH),
iff
A 󳀀󳨐(¬α)[sx|s(t)]
by Definition 3.2.6(3).
Case (α →β): Let s be an assignment and let t be substitutable for x in (α →β). Thus, t
is substitutable for x in α and in β, and (α →β)x
t = (αx
t →βx
t ). Hence
A 󳀀󳨐(α →β)x
t [s]
iff
A 󳀀󳨐αx
t [s] implies A 󳀀󳨐βx
t [s]
by Definition 3.2.6(4),
iff
A 󳀀󳨐α[sx|s(t)] implies A 󳀀󳨐β[sx|s(t)]
by (IH),
iff
A 󳀀󳨐(α →β)[sx|s(t)]
by Definition 3.2.6(4).
Case ∀vα: Let s be an assignment and t be substitutable for x in ∀vα. By Definition 3.3.15,
either (a) x does not occur free in (∀vα) or (b) v does not occur in t and t is substitutable
for x in α.
(a) Suppose x does not occur free in ∀vα. Thus, (󳵳) (∀vα)x
t = ∀vα. Also, it follows that
s and sx|s(t) agree on the free variables in ∀vα. Thus, by Theorem 3.2.11 we have
A 󳀀󳨐∀vα[s] if and only if A 󳀀󳨐∀vα[sx|s(t)]. So, by (󳵳), A 󳀀󳨐(∀vα)x
t [s] if and only if
A 󳀀󳨐∀vα[sx|s(t)].
(b) Assume v does not occur in t and t is substitutable for x in α. By Definition 3.3.13, we
have
(∀vα)x
t = {∀vα,
if x = v,
∀vαx
t ,
if x
̸= v.
If x = v, then x does not occur free in ∀vα, and this is just case (a) above. If x
̸= v,
then (∀vα)x
t = ∀vαx
t . Therefore, letting A be the domain of A, we have
A 󳀀󳨐(∀vα)x
t [s]
iff
for every d ∈A, A 󳀀󳨐αx
t [sv|d]
by Definition 3.2.6(5),
iff
for every d ∈A, A 󳀀󳨐φ[sv|d,x|s(t)]
by (IH),
iff
A 󳀀󳨐∀vα[sx|s(t)]
by Definition 3.2.6(5).
This completes the proof of the substitution lemma.

122
౪
4 Soundness and completeness
Recall that an alphabetic variant of wff φ is obtained by replacing some, none, or all
of the quantified variables of φ with different variables (see page 114). Lemma 4.1.2 and
Theorem 3.3.61 imply the following observation.
Corollary 4.1.3. Let t be a term, x a variable, and φ a wff. There is an alphabetic variant φ
of φ such that
φ ⊢φ, φ ⊢φ, t is substitutable for x in φ,
and for every structure A and every assignment s, we have
A 󳀀󳨐φx
t [s]
iff
A 󳀀󳨐φ[sx|s(t)].
Lemma 4.1.4. Every logical axiom is logically valid.
Proof. By Exercise 14 on page 89, we know that any generalization of a logically valid
formula is also logically valid. Therefore, we only need to prove the logical validity of
the axioms described in the six groups of Logical Axioms 3.3.17. Let A be a structure and
let s be an assignment. We shall show that A 󳀀󳨐φ[s] for every φ that belongs to one of
the six categories in Logical Axioms 3.3.17.
1.
Suppose φ is a tautology. Exercise 2(b) on page 116 (where Γ = ⌀) implies that 󳀀󳨐φ,
and therefore A 󳀀󳨐φ[s].
2.
Assume that φ has the form ∀xα →αx
t , where t is substitutable for x in α. We must
show that A 󳀀󳨐(∀xα →αx
t )[s]. So, assume that A 󳀀󳨐∀xα[s]. We conclude that A 󳀀󳨐
α[sx|s(t)]. The substitution lemma (Lemma 4.1.2) implies that A 󳀀󳨐αx
t [s]. Therefore,
A 󳀀󳨐(∀xα →αx
t )[s].
3.
Let φ have the form ∀x(α →β) →(∀xα →∀xβ). To show that
A 󳀀󳨐(∀x(α →β) →(∀xα →∀xβ))[s],
assume that A 󳀀󳨐∀x(α →β)[s] and A 󳀀󳨐∀xα[s]. Exercise 12 on page 89 implies that
A 󳀀󳨐∀xβ[s].
4.
Let φ be of the form α →∀xα, where x does not occur free in α. To show that A 󳀀󳨐
(α →∀xα)[s], assume A 󳀀󳨐α[s]. Thus, A 󳀀󳨐∀xα[s] by Exercise 13 on page 89.
5.
Suppose φ has the form x ̇= x. We must show that A 󳀀󳨐(x ̇= x)[s]. This follows imme-
diately from Definition 3.2.6(1), the definition of satisfaction.
6.
Assume that φ has the form x
̇= y →(α →αx
y), where α is an atomic formula. We
must show that
A 󳀀󳨐(x ̇= y →(α →αx
y))[s].
To affirm this, assume that A 󳀀󳨐(x ̇=y)[s]. Thus, s(x) = s(y). By Exercise 11 on page 88,
we have A 󳀀󳨐α[s] iff A 󳀀󳨐αx
y[s]. It thus follows that A 󳀀󳨐(x ̇= y →(α →αx
y))[s].

4.1 The soundness theorem
౪
123
4.1.2 Proof of the soundness theorem
Theorem 4.1.5 (Soundness). Let Γ be a set of formulas. If Γ ⊢φ, then Γ 󳀀󳨐φ.
Proof. Assume that Γ ⊢φ. Let ⟨α1, α2, . . . , αn⟩be a deduction from the set Γ of wffs, where
αn = φ. We shall prove the following statement: For all k ≤n, Γ 󳀀󳨐αk. We shall use strong
induction on the natural number variable k.
Base step: Let k = 1. We must show that Γ 󳀀󳨐α1. Since α1 is the first item in the deduction,
either (a) α1 ∈Γ or (b) α1 is a logical axiom. If α1 ∈Γ, then clearly we have Γ 󳀀󳨐α1. If α1 is
a logical axiom, then Lemma 4.1.4 implies that Γ 󳀀󳨐α1.
Inductive step: Let k ≤n. Assume the strong induction hypothesis
Γ 󳀀󳨐αi
for all i < k.
(SIH)
We must show that Γ 󳀀󳨐αk. Since αk is in the deduction, either (a) αk ∈Γ, or (b) αk is
a logical axiom, or (c) αk is obtained by modus ponens from an αi and αj = (αi →αk),
where i, j < k. If (a) or (b) hold, then we can conclude that Γ 󳀀󳨐αk just as in the base
step. So, suppose that (c) holds. By the strong induction hypothesis (SIH), we conclude
that Γ 󳀀󳨐αi and Γ 󳀀󳨐(αi →αk). It now follows that Γ 󳀀󳨐αk.
Corollary 4.1.6. Let Γ be a set of formulas. If Γ
̸󳀀󳨐φ, then Γ ⊬φ.
Corollary 4.1.7. Let φ be a wff. If ⊢φ, then 󳀀󳨐φ.
Corollary 4.1.8. If ⊢(φ ↔ψ), then the wffs φ and ψ are logically equivalent.
Proof. Assume ⊢(φ ↔ψ). By the soundness theorem, we conclude that 󳀀󳨐(φ ↔ψ).
Exercise 9(b) on page 88 implies that φ and ψ are logically equivalent.
Recalling Theorem 3.3.61, a wff φ is an alphabetic variant of φ when φ differs from
φ only in the choice of quantified variables. For example, ∀x∀wPxw is an alphabetic
variant of ∀x∀zPxz.
Corollary 4.1.9. Suppose that φ is an alphabetic variant of φ. Then φ and φ are logically
equivalent.
Proof. Let φ be an alphabetic variant of φ. It follows from Theorem 3.3.61 that φ ⊢φ and
φ ⊢φ. By the soundness theorem, we have φ 󳀀󳨐φ and φ 󳀀󳨐φ′. Therefore, φ and φ are
logically equivalent.
Definition 4.1.10. A set of wffs Γ is satisfiable if for some structure A and some assign-
ment s we have A 󳀀󳨐φ[s] for all φ ∈Γ.
Corollary 4.1.11. If Γ is satisfiable, then Γ is consistent.
Proof. Assume that Γ is satisfiable. We will show that Γ is consistent. Suppose, for a con-
tradiction, that there is a wff β such that Γ ⊢β and Γ ⊢¬β. Since Γ is satisfiable, let A

124
౪
4 Soundness and completeness
be a structure and let s be an assignment that satisfies every wff in Γ. The soundness
theorem now implies that A 󳀀󳨐β[s] and A
̸󳀀󳨐β[s], which is a contradiction.
Exercises 4.1.
1. Let c be a constant symbol and let α be a wff. So c is substitutable for x in α. Let A
be a structure and let s be an assignment. Let s(c) = d. Show that
A 󳀀󳨐αx
c[s]
iff
A 󳀀󳨐α[sx|d].
Conclude that if A 󳀀󳨐αx
c[s], then A 󳀀󳨐∃xα[s].
2. Let c be a constant symbol, let Γ be a set of wffs, and let ψ be a wff. Suppose that
Γ 󳀀󳨐ψx
c. Using Exercise 1, show that Γ 󳀀󳨐∃xψ.
*3. Let t be a term that is substitutable for x in the wff φ. Show that {φx
t , x ̇= t} 󳀀󳨐φ.
4. Show that Px ⊬∀xPx. Conclude that {Px, ¬∀xPx} is consistent.
5. Let Γ = {¬∀v1Pv1, Pv2, Pv3, Pv4, . . . }. Is Γ is consistent?
6. A set of wffs Γ is said to be independent if for every wff φ ∈Γ, Γ \ {φ} ⊬φ. Suppose
that for every φ ∈Γ, the set of wffs (Γ \ {φ}) ∪{¬φ} is satisfiable. Show that Γ is
independent.
7. Let ℒ= { ̇=} and let α be the sentence ∃x∀y(y ̇= x). Show that ⊬α and ⊬¬α.
4.2 The completeness theorem
The completeness theorem is the converse of the soundness theorem, but it is a much
deeper result. Given a set Γ of wffs, the completeness theorem shows that if Γ logically
implies a formula, then that formula is deducible from Γ. The completeness theorem
and its proof first appeared in the 1930 doctoral dissertation of Kurt Gödel. The proof of
the completeness theorem presented below is due to Leon Henkin.
Theorem (Completeness). Let Γ be a set of first-order formulas and let φ be a wff.
(a) If Γ 󳀀󳨐φ, then Γ ⊢φ.
(b) If Γ is consistent, then Γ is satisfiable.
The basic idea behind the proof of (b) is as follows: Given that Γ is consistent, we
first construct a set of wffs Δ such that:
(1) for each wff φ and variable x, the wff ∃xφ →φx
c is in Δ for a constant symbol c;
(2) Γ ⊆Δ;
(3) Δ is consistent;
(4) for every wff α, either α ∈Δ or (¬α) ∈Δ.
We shall then use Δ to build a structure that satisfies Γ. Before we present the proof of
the completeness theorem, we need to state and prove some technical lemmas that will

4.2 The completeness theorem
౪
125
allow us to complete the above steps (1)–(4). In the proof of the completeness theorem,
we will then focus on the construction of the structure that satisfies Γ.
4.2.1 Technical lemmas
On page 2 we discussed indexed sets, that is, sets of the form {xi : i ∈I}, where I is an
unspecified set. Such notation will be used in this section.
Definition 4.2.1. Let ℒbe a first-order language. Let ℒ′ = ℒ∪{ci : i ∈I}, where each
ci is a new constant symbol that does not appear in ℒand ci
̸= cj whenever i, j ∈I are
distinct. Then ℒ′ is an extension of ℒby new constants.
Lemma 4.2.2 (Adding constants). Suppose Γ is a consistent set of wffs in a language ℒ. Let
ℒ′ be an extension of ℒby new constants. Then Γ remains a consistent set of wffs in the
extended language ℒ′.
Proof. Assume that Γ is a consistent set of wffs in the language ℒ. Suppose, for a con-
tradiction, that Γ is an inconsistent set of wffs in the language ℒ′. Therefore, there is
an ℒ′-formula φ such that Γ ⊢φ and Γ ⊢¬φ, where the deductions take place in the
language ℒ′. Let ⟨α1, α2, . . . , φ⟩be an ℒ′-deduction of φ and let ⟨β1, β2, . . . , ¬φ⟩be an ℒ′-
deduction of ¬φ. Since these two deductions are finite, there is only a finite number of
the new constant symbols that appear in these deductions. Suppose that the finite list
c1, . . . , cn contains all of the new constant symbols that appear in these deductions. The
proof of Theorem 3.3.56 implies that there are variables y1, . . . , yn that do not appear in
the two deductions ⟨α1, α2, . . . , φ⟩and ⟨β1, β2, . . . , ¬φ⟩such that the replacement of each
new constant symbol ci in the deductions with the variable yi results in ℒ-deductions
⟨α′
1, α′
2, . . . , φ′⟩and ⟨β′
1, β′
2, . . . , ¬φ′⟩from Γ. We conclude that Γ is inconsistent in ℒ. This
contradiction completes the proof.
In our next lemma, we will be adding constants to ℒthat act as “witnesses.” They
are called Henkin constants and will allow us to construct a structure in which each
existential formula that holds in the structure can be verified by a witness among the
new constants. Recall that ∃vα is an abbreviation of ¬∀v¬α.
Lemma 4.2.3 (Ensuring witnesses). Let ℒbe a first-order language and let Γ be a consis-
tent set of wffs in the language ℒ. Let ℒ′ = ℒ∪{c′
i : i ∈I} be an extension of ℒby new
constants where ℒand I have the same cardinality. Then there is a set Θ of wffs in the
language ℒ′ such that:
(1) Γ ⊆Θ;
(2) for every ℒ′-wff φ and every variable x, the wff ∃xφ →φx
c is in Θ for some new con-
stant symbol c;
(3) Θ is consistent in ℒ′.

126
౪
4 Soundness and completeness
Before we present the proof, we make a comment. Let S = {c′
1, c′
2, c′
3, . . . } be an in-
finite set of new constant symbols. Given a finite subset A of S we shall be referring to
the “first new constant symbol c not in A”. This will mean that c = c′
k, where k is the
smallest k such that c′
k ∉A. For example, if A = {c′
1, c′
2, c′
3, c′
6}, then c = c′
4 is the first new
constant symbol not in A.
Proof. Let ℒbe a countable first-order language and let ℒ′ = ℒ∪{c′
1, c′
2, c′
3, . . . } be an
extension of ℒby new constants. Consider the set
P = {⟨φ, v⟩: φ is an ℒ′-wff and v is a variable of the language}.
Theorem 1.1.30 (on page 12) implies that the set of all wffs in the language ℒ′ is a count-
able set, because the set of all wffs is a subset of the set of all finite sequences of symbols
in the countable language ℒ′. From this it follows that the set P of pairs is also a count-
able set. Thus, let
⟨φ1, x1⟩, ⟨φ2, x2⟩, ⟨φ3, x3⟩, . . . , ⟨φn, xn⟩, . . .
(4.1)
be a fixed enumeration of all the pairs in P. Let θ1 be the wff
∃x1φ1 →φ1
x1
c1,
where c1 is the first new constant symbol not occurring in φ1. In general, let us define
(by recursion on ℕ) θn to be the wff
∃xnφn →(φn)xn
cn,
where cn is the first new constant symbol not occurring in φn or in θk for all k < n. Let
Θ = Γ ∪{θ1, θ2, . . . , θn, . . . }.
Clearly Γ satisfies conditions (1) and (2) of the statement of this lemma. We thus need to
show that Θ satisfies condition (3), that is, we must show that Θ is consistent.
Suppose, for a contradiction, that Θ is inconsistent. Theorem 3.3.38 implies that a
finite subset of Θ is inconsistent. Thus, there is a natural number m such that
Γ ∪{θ1, θ2, . . . , θm+1}
is inconsistent. Assume that m is the least such m. Since Γ is consistent, we must have
m ≥0. By the reductio ad absurdum corollary (Corollary 3.3.37), it follows that
Γ ∪{θ1, θ2, . . . , θm} ⊢¬θm+1.
That is,

4.2 The completeness theorem
౪
127
Γ ∪{θ1, θ2, . . . , θm} ⊢¬(∃xφ →φx
c)
for some φ, x, c. As ¬(∃xφ →φx
c) →∃xφ and ¬(∃xφ →φx
c) →¬φx
c are tautologies, rule T
(Theorem 3.3.31) implies that
Γ ∪{θ1, θ2, . . . , θm} ⊢∃xφ,
(⋆)
Γ ∪{θ1, θ2, . . . , θm} ⊢¬φx
c.
(⋆⋆)
Since the constant symbol c occurs neither in φ nor in any formula in Γ∪{θ1, θ2, . . . , θm},
Corollary 3.3.58 with (⋆⋆) implies that
Γ ∪{θ1, θ2, . . . , θm} ⊢∀x¬φ.
However, (⋆) implies (after removing the abbreviation) that
Γ ∪{θ1, θ2, . . . , θm} ⊢¬∀x¬φ.
So, Γ ∪{θ1, θ2, . . . , θm} is inconsistent. This contradicts the leastness of m if m > 0, and
contradicts the consistency of Γ if m = 0.
Remark 4.2.4. The proof of Lemma 4.2.3 assumes that the language ℒis countable. The
lemma still holds for uncountable languages by a modification of this proof, which re-
quires knowledge of cardinal numbers. Suppose that ℒand I both have cardinality κ,
where κ is an uncountable cardinal. We can presume that I = κ. In the above proof,
replace (4.1) with the sequence of pairs
⟨φγ, xγ⟩γ∈κ
indexed by the ordinals γ ∈κ. For each γ ∈κ, define (by recursion) θγ to be the wff
∃xγφγ →(φγ)xγ
cγ,
where cγ is the first new constant symbol not occurring in φγ or in θη for all η ∈γ. It
then follows that Θ = Γ ∪{θη : η ∈κ} is consistent.
Let Θ be as in Lemma 4.2.3. Our next result will allow us to extend Θ to a maximal
consistent set of wffs.
Lemma 4.2.5 (Going to the max). Let ℒbe a first-order language and suppose that Θ is a
consistent set of wffs in the language ℒ. Then there is a set Δ of wffs in the language ℒsuch
that:
(1) Θ ⊆Δ;
(2) Δ is consistent;
(3) for every wff φ, either φ ∈Δ or (¬φ) ∈Δ but not both;
(4) for every wff φ, if Δ ⊢φ, then φ ∈Δ.

128
౪
4 Soundness and completeness
Proof. Let ℒbe a countable first-order language. Theorem 1.1.30 (on page 12) implies that
the set of all wffs is a countable set, because the set of all wffs is a subset of the set of all
finite sequences of symbols in the language ℒ. Thus, let
δ1, δ2, δ3, . . . , δn, . . .
(4.2)
be a fixed enumeration of all the wffs in the language ℒ. Define by recursion on ℕthe
following sets:
(i)
Δ0 = Θ
(ii) Δn+1 = {Δn ∪{δn+1},
if Δn ∪{δn+1} is consistent,
Δn ∪{¬δn+1},
otherwise.
We shall now establish four claims.
Claim 1. For all n ∈ℕ, Δn is consistent.
Proof of Claim 1. We shall use induction on n.
Base step: Let n = 0. Then Δ0 = Θ, which is consistent by assumption.
Inductive step: Let n ∈ℕbe arbitrary. Assume the induction hypothesis
Δn is consistent.
(IH)
We will prove that Δn+1 is consistent. Suppose, for a contradiction, that Δn+1 is not consis-
tent. Thus, it follows from the above definition (ii) of Δn+1 that Δn ∪{δn+1} is inconsistent
and Δn∪{¬δn+1} is inconsistent. By the reductio ad absurdum corollary (Corollary 3.3.37),
it follows that
Δn ⊢¬δn+1,
Δn ⊢δn+1.
Thus, Δn is inconsistent, contradicting the induction hypothesis (IH).
(Claim 1)
Let Δ = ⋃n∈ℕΔn. Clearly, Θ ⊆Δ (as Θ = Δ0), and (󳵳) Δn ⊆Δn+1 for all n ∈ℕ.
Claim 2. The set Δ is consistent.
Proof of Claim 2. Suppose, to the contrary, that Δ is inconsistent. By Theorem 3.3.38 there
is a finite subset Π of Δ that is inconsistent. Since Π ⊆Δ = ⋃n∈ℕΔn and Π is finite, it
follows, from (󳵳), that Π ⊆Δn for some n. Hence, Δn must be inconsistent, contradicting
Claim 1.
(Claim 2)
Claim 3. For every wff α, either α ∈Δ or (¬α) ∈Δ, but not both.
Proof of Claim 3. Let α be any wff. Since (4.2) lists all of the wffs, there is an n ∈ℕsuch
that α = αn. So either αn ∈Δn or (¬αn) ∈Δn by (ii) above. Since Δn ⊆Δ, it follows that

4.2 The completeness theorem
౪
129
α ∈Δ or (¬α) ∈Δ. If α ∈Δ and (¬α) ∈Δ, then Δ would be inconsistent, contradicting
Claim 2. Hence, we cannot have α ∈Δ and (¬α) ∈Δ.
(Claim 3)
Claim 4. For every wff φ, if Δ ⊢φ, then φ ∈Δ.
Proof of Claim 4. Let α be any wff. Assume that Δ ⊢φ. To prove that φ ∈Δ, suppose
to the contrary that φ ∉Δ. By Claim 3, we see that ¬φ ∈Δ. Thus, Δ ⊢¬φ. Hence, Δ is
inconsistent, contradicting Claim 2.
(Claim 4)
Therefore, Δ satisfies conditions (1)–(4) stated in the lemma.
(Lemma)
Remark 4.2.6. The proof of Lemma 4.2.5 assumes that the language ℒis countable. How-
ever, Lemma 4.2.5 also holds when ℒis uncountable. In this case, one can obtain the set
Δ by applying Zorn’s lemma (Lemma 1.1.36).
4.2.2 Proof of the completeness theorem
Given a consistent set of ℒ-wffs Γ, the upcoming proof of the completeness theorem con-
structs a structure A and an assignment s. It is then shown that A 󳀀󳨐α[s] for all α ∈Γ. To
do this, one first lets ℒ′ be an extension of ℒby adding infinitely many new constants.
The structure A is then constructed, surprisingly, by using the terms of ℒ′.
Definition 4.2.7. Let ℒbe a language. For each wff α, let n(α) be the number of places
at which connectives and quantifier symbols appear in α.
For example, let α be the wff ∀v(Pv →¬Qt). Then n(α) = 3 and n(Qt) = 0. Now let
α be any wff. For any variable x and term t, note that the resulting substitution αx
t does
not add any connectives and quantifier symbols to α. In fact, n(α) = n(αx
t ).
Theorem 4.2.8 (Completeness). Let Γ be a set of ℒ-wffs and let φ be an ℒ-wff.
(a) If Γ 󳀀󳨐φ, then Γ ⊢φ.
(b) If Γ is consistent, then Γ is satisfiable.
Proof. We only provide a proof of (b), as (b) implies (a) (see Exercise 2). So, let Γ be
a consistent set of formulas in a language ℒ. We must prove that Γ is satisfiable, that
is, we must identify a structure and an assignment that satisfies every wff φ in Γ. Let
ℒ′ = ℒ∪{ci : i ∈I} be an extension of ℒby new constants where ℒand I have the same
cardinality. By the “adding constants” Lemma 4.2.2, we know that Γ remains consistent
in the language ℒ′. By the “ensuring witnesses” Lemma 4.2.3, we know that there is a set
Θ of wffs in the language ℒ′ such that
(1) Γ ⊆Θ;
(2) for every ℒ′-wff φ and every variable x, the wff ∃xφ →φx
c is in Θ for some new
constant symbol c;
(3) Θ is consistent in ℒ′.

130
౪
4 Soundness and completeness
By the “going to the max” Lemma 4.2.5, there is a set Δ of ℒ′-wffs such that:
(4) Θ ⊆Δ;
(5) Δ is consistent;
(6) for every wff φ, either φ ∈Δ or (¬φ) ∈Δ, but not both;
(7) for every wff φ, if Δ ⊢φ, then φ ∈Δ.
We will now construct a structure. There are two cases to consider. The first case is when
the language ℒdoes not contain the equality symbol
̇=. The second case is when the
language does contain ̇=.
Case 1: The language ℒdoes not contain the equality symbol
Note that Γ ⊆Θ ⊆Δ. We shall now use the set Δ to construct a structure A for the
language ℒ′ as follows:
(a) Let A, the domain of A, be the set of all terms in the language ℒ′.
(b) For each n-place predicate symbol P define PA by
⟨t1, t2, . . . , tn⟩∈PA
iff
the atomic formula Pt1t2 ⋅⋅⋅tn belongs to Δ.
(c) For each n-place function symbol f define f A by
f A(t1, t2, . . . , tn) = ft1t2 ⋅⋅⋅tn.
(d) For each constant symbol c define cA by cA = c.
Now define an assignment s by
s(v) = {v,
if v is a variable,
c,
if v is a constant symbol c.
(󳵳)
Note that s: 𝒯→𝒯, where 𝒯consists of the variables and constant symbols of ℒ′ and
𝒯is the set of all the terms of ℒ′. Also note that A = 𝒯.
Claim 1. For all terms t, we have s(t) = t.
Proof. One can prove this by using induction on terms using (󳵳).
(Claim 1)
Claim 2. For every wff φ, we have A 󳀀󳨐φ[s] if and only if φ ∈Δ.
Proof. Let A and s be defined as above. We shall prove the following statement by strong
induction on the natural number k:
For all ℒ′-wffs φ, if n(φ) = k, then A 󳀀󳨐φ[s] iff φ ∈Δ.
Base step: Let k = 0. If n(φ) = 0, then φ = Pt1 ⋅⋅⋅tn for some atomic formula. Thus,

4.2 The completeness theorem
౪
131
A 󳀀󳨐Pt1 ⋅⋅⋅tn[s]
iff
⟨s(t1), . . . , s(tn)⟩∈PA
by Definition 3.2.6(2),
iff
⟨t1, . . . , tn⟩∈PA
by Claim 1,
iff
Pt1t2 ⋅⋅⋅tn ∈Δ
by (b), above.
Inductive step: Let k > 0. Assume the strong induction hypothesis:
For all ℒ′-wffs φ, if n(φ) < k, then
A 󳀀󳨐φ[s]
iff
φ ∈Δ.
(IH)
Let θ be an ℒ′-wff such that n(θ) = k. We must prove that A 󳀀󳨐θ[s] iff θ ∈Δ. Since k > 0,
θ must have one of the following forms:
(¬α), (α →β), ∀vα,
where n(α) < k and n(β) < k. Thus, the induction hypothesis applies to α and β.
Case (¬α): We show that A 󳀀󳨐(¬α)[s] iff (¬α) ∈Δ as follows:
A 󳀀󳨐(¬α)[s]
iff
A
̸󳀀󳨐α[s]
by Definition 3.2.6(3),
iff
α ∉Δ
by (IH),
iff
¬α ∈Δ
by (6), above.
Case (α →β): We show that A 󳀀󳨐(α →β)[s] iff (α →β) ∈Δ as follows:
A 󳀀󳨐(α →β)[s]
iff
if A 󳀀󳨐α[s], then A 󳀀󳨐β[s]
by Definition 3.2.6(4),
iff
if α ∈Δ, then β ∈Δ
by (IH),
iff
(α →β) ∈Δ
by Exercise 1.
Case ∀vα: We must show that A 󳀀󳨐∀vα[s] iff ∀vα ∈Δ.
(⇒). Assume that A 󳀀󳨐∀vα[s], that is, assume that A 󳀀󳨐α[sv|t], for all t ∈A (by
Definition 3.2.6(5) and as A = 𝒯). Thus, in particular, we have
A 󳀀󳨐α[sv|c], for all constant symbols c ∈A.
(4.3)
We shall prove that ∀vα ∈Δ. Suppose, for a contradiction, that ∀vα ∉Δ. By (6) we infer
that ¬∀vα ∈Δ. By Exercise 27 on page 118, we have ⊢¬∀vα →¬∀v¬¬α. Thus, Δ ⊢∃v¬α
(using the abbreviation). So, by (2), (4), and (7), we conclude that
¬αv
c ∈Δ
for some constant symbol c.
(4.4)
As n(αv
c) = n(α) < k, the induction hypothesis (IH) and (4.4) imply that A 󳀀󳨐¬αv
c[s]. Thus,
A 󳀀󳨐¬α[sv|s(c)] by Lemma 4.1.2. As s(c) = c by Claim 1, we conclude that A 󳀀󳨐¬α[sv|c] and
this contradicts (4.3). Therefore, ∀vα ∈Δ.

132
౪
4 Soundness and completeness
(⇐). Assume that ∀vα ∈Δ. We will show that A 󳀀󳨐∀vα[s], that is, we will show that
A 󳀀󳨐α[sv|t], for all t ∈A. To do this, let t ∈A. Corollary 4.1.3 implies that there is a wff α
such that n(α) = n(α), α ⊢α, α ⊢α, t is substitutable for v in α, and
A 󳀀󳨐αv
t [s]
iff
A 󳀀󳨐α[sv|t],
(4.5)
as s(t) = t by Claim 1. We now show that A 󳀀󳨐α[sv|t]. Since α ⊢α, Lemma 3.3.60 implies
that ∀vα ⊢∀vα. As ∀vα ∈Δ, we conclude that ∀vα ∈Δ by (7). Because t is substitutable
for v in α, we see that ∀vα →αv
t is a logical axiom. Hence, Δ ⊢αv
t so αv
t ∈Δ. Since
n(αv
t ) = n(α) < k, the induction hypothesis (IH) implies that A 󳀀󳨐αv
t [s]. By (4.5), we
conclude that A 󳀀󳨐α[sv|t]. Since α ⊢α, the soundness theorem (Theorem 4.1.5) implies
that A 󳀀󳨐α[sv|t]. Therefore, A 󳀀󳨐∀vα[s].
(Claim 2)
Thus, the structure A and the assignment s satisfy every formula in Δ and, because
Γ ⊆Δ, A and s satisfy every formula in Γ. Recall, however, that A is a structure for
the language ℒ′. By restricting the structure A to the language ℒ(that is, by removing
the interpretations of new constant symbols from A), we shall then have our desired
structure for the language ℒ.
Case 2: The language ℒdoes contain the equality symbol
Recall that Γ ⊆Θ ⊆Δ. By ignoring the equality symbol, we can construct the struc-
ture A just as was done in case 1. Thus, the domain of the structure A is the set A of all
the terms of the language ℒ′. We can now use A to build a new structure whose domain
is a set of equivalence classes of A, also called a quotient structure.
Before we construct our new structure, we first define an equivalence relation on
the set A of terms. For any t, τ ∈A, define the relation t ∼τ as follows:
τ ∼t
iff
(τ ̇= t) ∈Δ.
(4.6)
One can now prove that ∼is a symmetric relation on A as follows. Assume that t1 ∼t2.
Then (t1 ̇= t2) ∈Δ, and thus Δ ⊢t1 ̇= t2. Using Logical Axiom 2, Theorem 3.3.54(2) implies
that Δ ⊢t2
̇= t1, and thus (t2
̇= t1) ∈Δ. So t2 ∼t1. Similar reasoning will confirm the
following claim.
Claim 3. Let ∼be the relation on A defined by (4.6). Then:
(i)
∼is an equivalence relation on A;
(ii) for all terms t1, t2 and τ1, τ2, if t1 ∼τ1 and t2 ∼τ2, then
Pt1t2 ∈Δ
iff
Pτ1τ2 ∈Δ,
where P is a 2-place predicate symbol, and similarly for n-place predicate symbols;
(iii) for all terms t1, t2 and τ1, τ2, if t1 ∼τ1 and t2 ∼τ2, then ft1t2 ∼fτ1τ2, where f is a 2-place
function symbol, and similarly for n-place function symbols.

4.2 The completeness theorem
౪
133
Proof Sketch. Note that for all τ, t ∈A, we have
τ ∼t
iff
(τ ̇= t) ∈Δ
iff
Δ ⊢τ ̇= t.
One proves items (i), (ii), and (iii) as follows:
(i)
To show that ∼is an equivalence relation on A, one uses items (1), (2), and (3) of
Theorem 3.3.54 and Logical Axiom 2.
(ii) One applies (4) of Theorem 3.3.54 to show that for all terms t1, t2 and τ1, τ2, if t1 ∼τ1
and t2 ∼τ2, then
Pt1t2 ∈Δ
iff
Pτ1τ2 ∈Δ,
where P is a 2-place predicate symbol, and similarly, for n-place predicate symbols.
(iii) One employs (5) of Theorem 3.3.54 to show that for all terms t1, t2 and τ1, τ2, if t1 ∼τ1
and t2 ∼τ2, then ft1t2 ∼fτ1τ2, where f is a 2-place function symbol, and similarly for
n-place function symbols.
(Claim 3)
Since ℒcontains equality, we use the set Δ, together with the equivalence relation
∼, to construct a structure B for the language ℒ′ (see Section 1.1.2) as follows:
(a) Let the domain of B be B = A/∼= {[t] : t ∈A}, the set of all equivalence classes.
(b) For each n-place predicate symbol P, define PB by
⟨[t1], [t2], . . . , [tn]⟩∈PB
iff
the atomic formula Pt1t2 ⋅⋅⋅tn belongs to Δ.
(c) For each n-place function symbol f , define f B by
f B([t1], [t2], . . . , [tn]) = [ft1t2 ⋅⋅⋅tn].
(d) For each constant symbol c, define cB by cB = [c].
Claim 3 implies that every PB and f B are “compatible” with ∼. Thus, each PB and f B
is “well-defined.” Now define an assignment s by
s(v) = {[v],
if v is a variable,
[c],
if v is a constant symbol c.
(4.7)
Using Claim 3, the proofs of the following two claims are very similar to the proofs of
the corresponding Claims 1 and 2 in case 1. For the proof of Claim 5 below, in the “base
step” one must include the atomic formula t1 ̇= t2 for terms t1 and t2.
Claim 4. For all terms t, we have s(t) = [t].
Claim 5. For every wff φ, we have B 󳀀󳨐φ[s] if and only if φ ∈Δ.

134
౪
4 Soundness and completeness
As before, after restricting the structure B to the language ℒ, we have our desired struc-
ture in the language ℒand an assignment that satisfies every wff φ in Γ.
(Theorem)
So, given a consistent set of formulas Γ, it has a model. The early attempts to prove
Euclid’s parallel postulate by contradiction would have benefited from the knowledge of
the completeness theorem. An historical remark: Girolamo Saccheri tried to prove the
parallel postulate by reductio ad absurdum, that is, he denied the parallel postulate and
assumed the other axioms of geometry, hoping to derive a contradiction. This failed at-
tempt could make one wonder if the negation of the parallel postulate is consistent with
the other axioms. In any case, Saccheri made no attempt to find a model of geometry
in which the parallel postulate is false. He had no idea that the result of his investiga-
tions were theorems about non-Euclidean geometry. Saccheri gave up his study of the
negation of the parallel postulate and, as a result, was not credited with the discovery
of non-Euclidean geometry.
The soundness theorem (Theorem 4.1.5) and the completeness theorem (Theo-
rem 4.2.8) clearly imply the following equivalence.
Corollary 4.2.9. Let Γ be a set of formulas. Then Γ ⊢φ if and only if Γ 󳀀󳨐φ.
4.2.3 The compactness theorem
The next theorem is the key result that led the logician Abraham Robinson to discover
nonstandard analysis. Nonstandard analysis revives the notion of an “infinitesimal”—a
number that is infinitely small yet greater than zero (see Section 4.3.1). New theorems
in analysis, functional analysis, and other areas of mathematics have been discovered
as a result of Robinson’s work. Apparently, mathematical logic is an applicable branch
of mathematics.
Theorem 4.2.10 (Compactness theorem). Let Γ be a set of wffs and let φ be a wff.
(a) If Γ 󳀀󳨐φ, then for some finite Γ0 ⊆Γ, we have Γ0 󳀀󳨐φ.
(b) If every finite subset of Γ is satisfiable, then Γ is satisfiable.
Proof. Let Γ be a set of formulas.
(a) Assume that Γ 󳀀󳨐φ. The completeness theorem thus implies that Γ ⊢φ. Since de-
ductions are finite, there is a finite subset Γ0 ⊆Γ such that Γ0 ⊢φ. Thus, by the
soundness theorem, we conclude that Γ0 󳀀󳨐φ.
(b) Assume that every finite subset of Γ is satisfiable. Thus, every finite subset of Γ is
consistent by Corollary 4.1.11. Hence, by Exercise 24 on page 118, Γ is consistent. So
Γ is satisfiable by part (b) of the completeness theorem (Theorem 4.2.8).
The following definition is presented here for some of the exercises.

4.2 The completeness theorem
౪
135
Definition 4.2.11. A set of formulas Σ is maximally consistent if Σ is consistent but Σ∪{φ}
is inconsistent for any φ ∉Σ.
Exercises 4.2.
*1. Let α, β, and Δ be as in the proof of Theorem 4.2.8. Show that
if α ∈Δ, then β ∈Δ
iff
(α →β) ∈Δ.
*2. In Theorem 4.2.8, show that (b) implies (a).
3. Let Γ be a set of ℒ-wffs and let φ be a logically valid wff. Show that Γ ⊢φ.
4. Let Γ be a set of ℒ-wffs, let A be an ℒ-structure with domain A, and let V be the set
of variables in ℒ. We write A 󳀀󳨐∗Γ to mean that A 󳀀󳨐φ[s] for every assignment
s: V →A and for every φ ∈Γ. Now let Γ and Σ be sets of ℒ-wffs. Suppose that for
every ℒ-structure A, we have
A 󳀀󳨐∗Γ
iff
A 󳀀󳨐∗Σ.
Show that
for all wffs φ, Γ ⊢φ
iff
Σ ⊢φ.
5. Let A be a structure and let s be an assignment. Prove that Σ = {φ : A 󳀀󳨐φ[s]} is
maximally consistent.
6. Let Σ be a maximally consistent set of formulas. Prove that if φ is a formula and
Σ ⊢φ, then φ ∈Σ.
*7. Let t be a term that is substitutable for x in the wff φ. Show that {φx
t , x ̇= t} ⊢φ.
8. Suppose that Σ is a maximally consistent set of formulas and φ is a formula. Prove
that ¬φ ∈Σ if and only if φ ∉Σ.
9. Let Γ be a set of sentences in a language ℒ. Suppose that for every ℒ-structure A,
there is a sentence σ ∈Γ such that A 󳀀󳨐σ. Using the compactness theorem, show
that there must be a finite number of sentences σ1, σ2, . . . , σn in Γ such that the
sentence σ1 ∨σ2 ∨⋅⋅⋅∨σn is logically valid.
10. Let Γ be a set of sentences in a language ℒ. Suppose that Γ is finitely satisfiable. Let
φ be a wff. Show that either Γ ∪{φ} or Γ ∪{¬φ} is finitely satisfiable.
11. Let Σ0 ⊆Σ1 ⊆Σ2 ⊆Σ3 ⊆⋅⋅⋅be sets of wffs where each Σi is finitely satisfiable.
Show that ⋃i∈ℕΣi is finitely satisfiable. Conclude that there is a structure A and an
assignment s such that A 󳀀󳨐φ[s] for all φ ∈⋃i∈ℕΣi.
12. Let c be a constant symbol that does not appear in the wffs φ, ψ, or in any wff in Γ.
Suppose that Γ; ψx
c 󳀀󳨐φ. Show that Γ; ∃xψ 󳀀󳨐φ.
13. Let Γ be a set of ℒ-wffs and let ℒ′ be an extension of ℒby new constants. Show that
for every ℒ-wff φ, if there is a deduction of φ from Γ in the language ℒ′, then there
is a deduction of φ from Γ in the language ℒ.

136
౪
4 Soundness and completeness
Exercise Notes: For Exercise 1, ¬(α →β) →α and ¬(α →β) →¬β are tautologies. For
Exercise 2, see Exercise 25 on page 118. For Exercise 7, see Exercise 3 on page 124. For
Exercise 12, see Theorem 3.3.56.
4.3 Applications
In this section, we will present some applications of the soundness, completeness, and
compactness theorems. We first give an application of the compactness theorem. Recall
that the compactness theorem implies that if every finite subset of a set of sentences Σ
has a model, then Σ also has a model.
Theorem 4.3.1. Let Σ be a set of sentences in the language ℒ. If Σ has arbitrarily large
finite models, then Σ has an infinite model.
Before we prove this theorem, we discuss the idea behind the proof. One first identi-
fies an infinite set Γ of sentences which describes the desired properties. Then one shows
that every finite subset of Γ has a model. The compactness theorem then implies that Γ
has a model and this model will have all of the desired properties.
Proof of Theorem 4.3.1. Let Σ be a set of sentences. Suppose that Σ has arbitrarily large
finite models. Let us assume that the language contains the equality symbol ̇=. For each
k ≥2, let λk be an ℒ-sentence that asserts “there are at least k things;” for example,
λ3 = ∃v1∃v2∃v3(v1
̸̇= v2 ∧v1
̸̇= v3 ∧v2
̸̇= v3)
asserts “there are at least three things.” We show that Γ = Σ ∪{λ2, λ3, . . . } has a model.
Let Π ⊆Γ be finite. We can write Π = Π0 ∪Π1, where Π0 ⊆Σ and Π1 ⊆{λ2, λ3, . . . }. Since
Π1 is finite, it has the form
Π1 = {λi1, . . . , λik},
where k ∈ℕ.
Let n = max{i1, . . . , ik}. Thus, n is the largest natural number so that λn ∈Π1. By our
assumption, there is a model A of Σ with at least n elements. Thus, A 󳀀󳨐λn and hence,
A 󳀀󳨐Π1. Since Π0 ⊆Σ, A satisfies all of the sentences in Π0. It now follows that A must
also satisfy all of the sentences in Π. So every finite subset of Γ has a model and thus, by
the compactness theorem (Theorem 4.2.10), Γ has a model B. Since Σ ⊆Γ and B 󳀀󳨐λk
for all k ≥2, it follows that B is an infinite model of Σ.
If the language does not contain the equality symbol ̇=, then one can add it to the
language ℒand then argue as above to get the model B of Σ. Then we remove ̇=B from
B to get an infinite ℒ-model of Σ.

4.3 Applications
౪
137
4.3.1 Nonstandard models
In mathematical logic, a nonstandard model is a structure that is a proper elementary
extension of a standard model.
Definition 4.3.2. Let A and B be ℒ-structures, where A is a substructure of B. Then B
is said to be an elementary extension of A, denoted by A ≺B, if and only if for every
assignment s: 𝒯→A and every ℒ-formula φ, we have
A 󳀀󳨐φ[s]
iff
B 󳀀󳨐φ[s],
where 𝒯is the set of all the variables and constants in ℒand A is the domain of A.
Consider the language ℒ= { ̇<, ̇0, ̇S, ̇+, ̇×, ̇E, ̇=} and the ℒ-structure
𝒩= ⟨ℕ; 0, S, <, +, ×, E⟩,
where ̇0𝒩= 0, ̇S𝒩= S (successor function), ̇<𝒩= < (the usual “less than” relation),
and ̇+𝒩= +, ̇×𝒩= ×, ̇E𝒩= E are the usual operations of addition, multiplication, and
exponentiation, respectively. The structure 𝒩is called the standard model of arithmetic
because it is a number system that is commonly used in mathematics and its domain is
the set of the standard natural numbers
ℕ= {0, 1, 2, 3, 4, . . . }.
A nonstandard model of arithmetic is one that contains nonstandard numbers. Using
the compactness theorem, we can construct a nonstandard model of arithmetic.
Let Γ = Th(𝒩) (see Definition 3.2.31) and let ℒ′ = ℒ∪{c} be an extension of ℒby one
new constant symbol. Let Σ be the following infinite set of atomic ℒ′-formulas
Σ = { ̇0 ̇< c,
̇S ̇0 ̇< c, ̇S ̇S ̇0 ̇< c, . . . , ̇Sn ̇0 ̇< c, . . . },
where ̇Sn ̇0 denotes the term
n times
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
̇S ̇S ⋅⋅⋅̇S ̇0. Note that ( ̇Sn ̇0)𝒩= n for each natural number n ≥
1. Let Π ⊆Γ ∪Σ be finite. Let Π = Π0 ∪Π1, where Π0 ⊆Γ and Π1 ⊆Σ. Since 𝒩󳀀󳨐Π0,
we just need to interpret c so that we can use 𝒩to get a model of Π1 as well. Since Π1 is
finite, it has the form
Π1 = { ̇Sn1 ̇0 ̇< c, . . . , ̇Sni ̇0 ̇< c},
where i ∈ℕ.
Let k = max{n1, . . . , ni} + 1. Thus, ( ̇Sn1 ̇0)𝒩< k, …, ( ̇Sni ̇0)𝒩< k. Therefore, the structure
𝒩k = ⟨ℕ; 0, S, <, +, ×, E, k⟩,
where c𝒩k = k,

138
౪
4 Soundness and completeness
is a model of Π1 and thus it is a model of Π, because 𝒩k 󳀀󳨐Π0. By the compactness
theorem (Theorem 4.2.10), Γ ∪Σ has a model
ℳ= ⟨M; ̇0ℳ, ̇Sℳ, ̇<ℳ, ̇+ℳ, ̇×ℳ, ̇Eℳ, cℳ⟩.
Now let ℳbe the following restriction of ℳto the original language ℒ, that is, let
ℳ= ⟨M; ̇0ℳ, ̇Sℳ, ̇<ℳ, ̇+ℳ, ̇×ℳ, ̇Eℳ⟩.
Thus, ℳis a model of Th(𝒩). As every n ∈ℕcan be identified with ( ̇Sn ̇0)ℳ, we can
view ℕas being a subset of M. However, since ℳcontains the “infinite” number cℳ,
it follows that ℳand 𝒩are not isomorphic. Nevertheless, Exercise 19(b) on page 89
implies that 𝒩and ℳare elementarily equivalent. Moreover, one can show that ℳis
a proper elementary extension of the standard model 𝒩(see Definition 4.3.2).
The standard ordered field of real numbers is the structure ⟨ℝ; +, ×, <, 0, 1⟩for the
language ℒ= { ̇+, ̇×, ̇<, ̇0, ̇1, ̇=}, where ̇+, ̇× are two 2-place function symbols, ̇< is a 2-place
relation symbol, ̇0, ̇1 are constant symbols, and
̇= is the equality symbol. We will now
discuss how to construct a nonstandard “real” field. Let
ℒ′ = { ̇+, ̇×, ̇<, ̇0, ̇1, ̇=} ∪{cr : r ∈ℝ},
where cr is a constant symbol for each real number r. Consider the ℒ-structure
ℛ= ⟨ℝ; +, ×, <, 0, 1, {cℛ
r : r ∈ℝ}⟩,
where cℛ
r = r for each r ∈ℝ. For each n ≥2, let n denote the ℒ′-term
n times
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
̇1 ̇+ ̇1 ̇+ ⋅⋅⋅̇+ ̇1. Thus,
nℛ= n for all n ≥2. Now let Γ = Th(ℛ) and let ℒ∗= ℒ′ ∪{c} be an extension of ℒ′ by the
one new constant symbol c. Let Σ be the following infinite set of atomic ℒ∗-formulas:
Σ = {2 ̇< c, 3 ̇< c, 4 ̇< c, . . . , n ̇< c, . . . }.
Let Π ⊆Γ ∪Σ be finite. Let Π = Π0 ∪Π1, where Π0 ⊆Γ and Π1 ⊆Σ. Since ℛ󳀀󳨐Π0, we just
need to interpret c so that we can use ℛto get a model of Π1 as well. Since Π1 is finite, it
has the form
Π1 = {n1 ̇< c, . . . , ni ̇< c},
where i ∈ℕ.
Let n = max{n1, . . . , ni}. Thus, n is the largest natural number so that (n ̇< c) ∈Π1. Let
k = n + 1. Thus, the structure
ℛk = ⟨ℝ; +, ×, <, 0, 1, {cℛ
r : r ∈ℝ}, k⟩,
where cℛk = k,

4.3 Applications
౪
139
is a model of Π1 and therefore it is a model of Π, because ℛk 󳀀󳨐Π0. By the compactness
theorem (Theorem 4.2.10), Γ ∪Σ has a model
ℳ= ⟨M; ̇+ℳ, ̇×ℳ, ̇<ℳ, ̇0ℳ, ̇1ℳ, {cℳ
r
: r ∈ℝ}, cℳ⟩.
Since ℳis a model of Th(ℛ), it follows that ℳis an ordered field that contains the
“infinite” number cℳ. Moreover, ℳcontains infinitesimals. Since ℳ󳀀󳨐( ̇0 ̇< n ̇< c) for
all n ≥2, it follows that ℳ󳀀󳨐( ̇0 ̇< 1
c ̇< 1
n) for all n ≥2, where 1
c and 1
n denote the inverses,
respectively, of c and n in ℳ. Hence, the inverse of cℳin ℳis an infinitesimal. Now
let ℳbe the restriction of ℳto the original language ℒ, namely,
ℳ= ⟨M; ̇+ℳ, ̇×ℳ, ̇<ℳ, ̇0ℳ, ̇1ℳ⟩.
Clearly, ℳis also an ordered field and cℳ∈M. As every r ∈ℝcan be identified with
cℳ
r , we can view ℝas being a subset of M. Moreover, ℳcontains infinite numbers
and infinitesimals. It thus follows that ℛand ℳand are not isomorphic; but ℛand ℳ
are elementarily equivalent. Moreover, one can show that ℳis a proper elementary
extension of the standard model ⟨ℝ; +, ×, <, 0, 1⟩.
In this section we have shown that there is a structure that contains all the natural
numbers and satisfies all of the first-order sentences that hold in the standard model 𝒩,
but this new structure also includes infinite numbers. Thus, we have constructed a new
number system.
We have also shown that there exists a structure that contains all the real numbers
and satisfies all of the first-order sentences that hold in the ordered field of real numbers.
However, this structure contains infinitely large and infinitely small numbers. Again, we
have constructed a new system of numbers.
4.3.2 Löwenheim–Skolem theorems
Suppose that a set of wffs Γ in a countable language has an uncountable model. Thus, Γ is
satisfiable. Does Γ have a countable model? This question will be addressed by our next
theorem. Leopold Löwenheim and Thoralf Skolem were two mathematicians who asked
such questions and, as a result, established theorems on the existence and cardinality
of structures.
Theorem 4.3.3 (Löwenheim–Skolem). Let Γ be a satisfiable set of wffs in a countable lan-
guage ℒ. Then there is a countable model A that satisfies Γ.
Proof. Let Γ be a satisfiable set of formulas in a countable language ℒ. First, we shall
assume that ℒdoes not contain equality. Recall the proof of the completeness theorem
(Theorem 4.2.8) in this case. In the proof, as ℒis countable, we considered the extension
ℒ′ = ℒ∪{c1, c2, c3, . . . }, where the ci’s are new constant symbols. It thus follows that ℒ′

140
౪
4 Soundness and completeness
is countable. Consequently, the set of terms of the language ℒ′ is countable. Now, in the
proof of case 1 of Theorem 4.2.8 we constructed a model A of Γ consisting of the terms
in the language ℒ′. Therefore, A is a countable model satisfying Γ.
Suppose that the language ℒdoes contain equality. Under case 2 in the proof of The-
orem 4.2.8, we constructed a model B of Γ consisting of equivalence classes of the terms
in the language ℒ′. Since the set of these equivalence classes cannot have more elements
than the set of terms in the language ℒ′, it follows that the model B is a countable model
of Γ.
Corollary 4.3.4. Let A be an uncountable structure for a countable language. Then there
is a countable structure B such that A ≡B.
Proof. Let Γ = Th(A). Theorem 4.3.3 implies that there exists a countable structure B
that satisfies Γ. Exercise 19 on page 89 implies that A ≡B.
The proof of the above theorem adapts to establish our next result, which is referred
to as the downward Löwenheim–Skolem theorem. The remainder of this section assumes
familiarity with cardinal numbers.
Theorem 4.3.5 (Löwenheim–Skolem). Let Γ be a satisfiable set of wffs, where ℒhas cardi-
nality κ. Then there is a model A of cardinality ≤κ that satisfies Γ.
The following theorem is called the upward Löwenheim–Skolem theorem.
Theorem 4.3.6 (Tarski). Let ℒbe of cardinality λ and let Γ be a set of ℒ-wffs. If an infinite
structure satisfies Γ, then for every cardinal κ ≥λ, there is a structure B of cardinality κ
that satisfies Γ.
Proof. Let ℒbe of cardinality λ and let Γ be a set of ℒ-wffs. Assume that Γ is satisfiable
in an infinite structure A with domain A. Let κ ≥λ and let ℒ′ = ℒ∪{ci : i ∈κ} be an
extension of ℒby new constant symbols. It follows that ℒ′ has cardinality κ. Let
Σ = {ci
̸̇= cj : i, j ∈κ are distinct}.
We now show that Γ ∪Σ is finitely satisfiable. Let Π ⊆Γ ∪Σ be finite. Let Π = Π0 ∪Π1,
where Π0 ⊆Γ and Π1 ⊆Σ. Clearly A satisfies Π0, and Π1 is finite. Let ci1, . . . cin be a finite
list of all the new constant symbols that appear in Π1. Since A is infinite, we can assign
the distinct constant symbols in ci1, . . . cin to distinct elements ai1, . . . ain in A. Now extend
A by adding cA
i1 = ai1, . . . cA
in = ain to A and get a structure that satisfies Π. Therefore,
Γ ∪Σ is finitely satisfiable. By Theorem 4.3.5, there is a structure B of cardinality ≤κ
that satisfies Γ ∪Σ. Since any model of Σ must have cardinality ≥κ, we conclude that B
has cardinality κ.
Corollary 4.3.7. Let A be an infinite structure for a countable language ℒ. Then for every
infinite cardinal κ, there is a structure B of cardinality κ such that A ≡B.

4.3 Applications
౪
141
Proof. Let Γ = Th(A) and let κ be an infinite cardinal. As ℒis countable, it has cardinality
≤κ. Thus, by Theorem 4.3.6, there is a structure B of cardinality κ that satisfies Γ. By
Exercise 19 on page 89, A ≡B.
4.3.3 Theories
A theory is a set of sentences in a language which contains all the sentences that are
logically implied by the set.
Definition 4.3.8. Let T be a set of sentences of a language. Then T is said to be a theory
if and only if T is closed under logical implication, that is, for any sentence σ of the
language,
if T 󳀀󳨐σ,
then σ ∈T.
A theory T is said to be complete if for every sentence φ, either φ ∈T or ¬φ ∈T.
Let A be a structure. Recalling Definition 3.2.31, Th(A) is the set of all sentences φ
such that A 󳀀󳨐φ. It thus follows that Th(A) is a complete theory. The proof of the next
result is established in Exercise 1.
Theorem 4.3.9. Let T be a theory in a language ℒ. Then T is complete if and only if for all
ℒ-structures A and B, if A 󳀀󳨐T and B 󳀀󳨐T, then A ≡B.
Theorem 4.3.9 provides a method for determining whether or not a theory is com-
plete. We will present another such method that depends on the next definition. As you
may recall, ℵ0 is the cardinality of any countable infinite set.
Definition 4.3.10. Let T be a theory in a language ℒand let κ ≥ℵ0 be a cardinal. Then
T is κ-categorical if all models of T having cardinality κ are isomorphic.
In 1954, Jerzy Łoś and Robert L. Vaught independently proved our next theorem.
Theorem 4.3.11 (Łoś–Vaught test). Let T be a theory in a countable language. If T has no
finite models and is κ-categorical for some cardinal κ ≥ℵ0, then T is complete.
Proof. Let κ ≥ℵ0 be a cardinal and let T be a theory in a countable language. Assume
that T is κ-categorical and has no finite models. We shall apply Theorem 4.3.9. Let A
and B be models of T. Because T has no finite models, A and B must be infinite. Corol-
lary 4.3.7 implies that there are structures A′ and B′ of cardinality κ such that A′ ≡A
and B′ ≡B. Since T is κ-categorical, we conclude that A ≡A′ ≅B′ ≡B. Theorem 3.2.39
now implies that A ≡B. Thus, by Theorem 4.3.9, T is complete.
Definition 4.3.12. Let 𝒦be a class of structures of a given language. We define the theory
of 𝒦, denoted as Th(𝒦), to be the set of sentences defined by

142
౪
4 Soundness and completeness
Th(𝒦) = {φ : φ is a sentence such that A 󳀀󳨐φ for all A ∈𝒦}.
(4.8)
Theorem 4.3.13. Let 𝒦be a class of structures of a given language. Then Th(𝒦) is a theory.
Moreover, Th(𝒦) is a complete theory if and only if for all structures A, B ∈𝒦, we have
A ≡B.
Proof. Let σ be a sentence of the language. Assume that Th(𝒦) 󳀀󳨐σ. We must prove that
σ ∈Th(𝒦). In order to prove that σ ∈Th(𝒦), we must show that A 󳀀󳨐σ for all A ∈𝒦. To
do this, let A ∈𝒦. Since A ∈𝒦, it follows from (4.8) that A 󳀀󳨐φ for all φ ∈Th(𝒦). Because
Th(𝒦) 󳀀󳨐σ, it now follows that A 󳀀󳨐σ. Thus, Th(𝒦) is a theory. For the remainder of the
proof, see Exercise 2.
For example, let ℒ= {e, ∗, ̇=} be the language of groups (Example 3.1.2). So, if 𝒢is
the class of all groups, then the theory Th(𝒢) is the set of all ℒ-sentences that are true in
all groups. Since some groups are Abelian and others are not, it follows that Th(𝒢) is not
complete.
Let Σ be a set of sentences in a language ℒ. Recalling Definition 3.2.25, Mod(Σ) is
the class of all ℒ-structures A such that A 󳀀󳨐φ for all φ ∈Σ. Thus, by Definition 4.3.12,
Th(Mod(Σ)) is the set of all ℒ-sentences that are true in all models of Σ, that is, φ ∈
Th(Mod(Σ)) if and only if Σ 󳀀󳨐φ.
Definition 4.3.14. Let Σ be a set of sentences in a language ℒ. The consequences of Σ,
denoted by Cn(Σ), are the set
Cn(Σ) = {φ : φ is a sentence and Σ 󳀀󳨐φ}.
Of course, Cn(Σ) = Th(Mod(Σ)) and Cn(Σ) is a theory. One can confirm that Σ is a
theory if and only if Cn(Σ) = Σ (see Exercise 3). For a single sentence φ, we write Cn(φ)
for Cn({φ}).
Definition 4.3.15. A theory T is finitely axiomatizable if T = Cn(Σ) for some finite set Σ
of sentences.
We will apply the compactness theorem in the proof of the following result.
Theorem 4.3.16. Let Σ be a set of sentences. If Cn(Σ) is finitely axiomatizable, then there
is a finite set Σ0 ⊆Σ such that Cn(Σ0) = Cn(Σ).
Proof. Let Σ be a set of sentences such that Cn(Σ) is finitely axiomatizable. So there is a
finite set Π = {α1, α2, . . . , αn} of sentences such that (󳵳) Cn(Σ) = Cn(Π). Let
φ = α1 ∧α2 ∧⋅⋅⋅∧αn.
It follows that Cn(Π) = Cn(φ). Thus, by (󳵳), Cn(φ) = Cn(Σ), and therefore Σ 󳀀󳨐φ. The
compactness theorem (Theorem 4.2.10(a)) implies that there is a finite Σ0 ⊆Σ such that
Σ0 󳀀󳨐φ. Since Σ0 󳀀󳨐φ and Σ0 ⊆Σ, Exercise 7 implies that

4.3 Applications
౪
143
Cn(φ) ⊆Cn(Σ0) ⊆Cn(Σ).
Since Cn(φ) = Cn(Σ), we conclude that Cn(Σ0) = Cn(Σ).
We now give an example of a finitely axiomatizable theory. Let ℒ= { ̇<, ̇=} and let Ψ
be the set consisting of the following axioms for a dense linear order without endpoints:
1.
Asymmetry:
∀x∀y(x ̇< y →y
̸̇< x)
2.
Trichotomy:
∀x∀y(x ̇< y ∨x ̇= y ∨y ̇< x)
3.
Transitivity:
∀x∀y∀z(x ̇< y →y ̇< z →x ̇< z)
4.
Density:
∀x∀y(x ̇< y →∃z(x ̇< z ̇< y))
5.
No endpoints:
∀x∃y∃z(y ̇< x ̇< z).
The theory Cn(Ψ) is called the theory of dense linear orders without endpoints. Let 𝒬=
⟨ℚ; <⟩and ℛ= ⟨ℝ; <⟩, where ℚis the set of rational numbers, ℝis the set of real num-
bers, and < is the usual “less than” relation on ℚand ℝ. Clearly, 𝒬󳀀󳨐Ψ and ℛ󳀀󳨐Ψ.
These two structures are not isomorphic because ℚis countable and ℝis uncountable
(see [3]); nevertheless, are the structures 𝒬and ℛelementarily equivalent? The follow-
ing theorem is due to Georg Cantor, and its proof appears below.
Theorem 4.3.17. Let ℒ= { ̇<, ̇=} and let Ψ be the set of axioms for a dense linear order
without endpoints. Any two countable models of Ψ are isomorphic.
Before proving Theorem 4.3.17, we need to make several preparatory remarks. First
of all, Exercise 10 shows that any model of Ψ must be infinite. Let A and B be countable
models of Ψ with the respective domains A = {a1, a2, . . . } and B = {b1, b2, . . . }. Let <
denote ̇<A and let ≺denote ̇<B. Let n ≥1 and
A′ = {a′
1, a′
2, . . . , a′
n} ⊆A
and
B′ = {b′
1, b′
2, . . . , b′
n} ⊆B
be such that
a′
1 < a′
2 < ⋅⋅⋅< a′
i < a′
i+1 < ⋅⋅⋅< a′
n,
b′
1 ≺b′
2 ≺⋅⋅⋅≺b′
i ≺b′
i+1 ≺⋅⋅⋅≺b′
n.
Let a ∈A \ A′ and b ∈B \ B′. We will say that b has the same relationship to B′ as a does
to A′ when the following items hold:
(1) if a′
i < a < a′
i+1, then b′
i ≺b ≺b′
i+1, whenever 1 ≤i < n;
(2) if a < a′
1, then b ≺b′
1, and if a′
n < a, then b′
n ≺b.
Since A and B are models of Ψ, it follows that for all a ∈A \ A′, there is a b ∈B \ B′ such
that a and b satisfy (1) and (2). Inversely, we shall say that a has the same relationship to
A′ as b does to B′, when the following items hold:
(3) if b′
i ≺b ≺b′
i+1, then a′
i < a < a′
i+1, whenever 1 ≤i < n;
(4) if b ≺b′
1, then a < a′
1, and if b′
n ≺b, then a′
n < a.

144
౪
4 Soundness and completeness
It also follows that for all b ∈B \ B′, there exists an a ∈A \ A′ such that a and b satisfy (3)
and (4). We will say that h′: A′ →B′ is a partial isomorphism if h′ is a bijection such that
x < y
if and only if
h′(x) ≺h′(y), for all x, y ∈A′.
Finally, let X = {x1, x2, x3, . . . }. For any nonempty X′ ⊆X, we will say that x is the “least”
element in X′ if x = xn and n is the least natural number such that xn ∈X′.
Proof of Theorem 4.3.17. Let A and B be two countable models of Ψ with respective do-
mains A = {a1, a2, . . . } and B = {b1, b2, . . . }. Let < denote ̇<A and let ≺denote ̇<B. We will
construct an isomorphism h: A →B by recursion on the natural numbers.
Base step: Let A1 = {a1} and B1 = {b1}. Define h1: A1 →B1 by h1(a1) = b1. The function h1
is vacuously a partial isomorphism.
Inductive step: Let n ≥1. Assume that An, Bn, and hn: An →Bn have been defined such
that An ⊆A and Bn ⊆B, where An and Bn have n elements, and hn: An →Bn is a partial
isomorphism. If n is odd, then let a be the “least” element in a ∈A\An. Now let b ∈B\Bn
be so that b has the same relationship to Bn as a does to An. If n is even, then let b be the
“least” element in b ∈B \ Bn. Now let a ∈A \ An be so that a has the same relationship to
An as b does to Bn. Let An+1 = An ∪{a}, Bn+1 = Bn ∪{b}, and define hn+1: An+1 →Bn+1 by
hn+1(v) = {hn(v),
if v ∈An,
b,
if v = a.
(4.9)
Clearly, hn+1 is a partial isomorphism.
One can now show that A = ⋃n≥1 An, B = ⋃n≥1 Bn, and that h = ⋃n≥1 hn is an isomor-
phism between A and B.
The method used in the above proof is referred to as Cantor’s back-and-forth method.
Corollary 4.3.18. The theory Cn(Ψ) is complete and the structures 𝒬= ⟨ℚ; <⟩and ℛ=
⟨ℝ; <⟩are elementarily equivalent.
Proof. Theorem 4.3.17 implies Cn(Ψ) is ℵ0-categorical. Theorems 4.3.17 and 4.3.11 imply
that Cn(Ψ) is a complete theory. So by Theorem 4.3.9, 𝒬and ℛare elementarily equiva-
lent.
Since 𝒬󳀀󳨐Ψ, Corollary 4.3.18 and Exercise 5 imply that Th(𝒬) = Cn(Ψ). Therefore,
Th(𝒬) is finitely axiomatizable. The same holds for Th(ℛ).
Corollary 4.3.19. Let ℒ= { ̇<, ̇=} and 𝒬= ⟨ℚ; <⟩. Then for every ℒ-sentence φ, we have
𝒬󳀀󳨐φ if and only if Ψ ⊢φ.
Proof. Let φ be an ℒ-sentence. Since Th(𝒬) = Cn(Ψ), we conclude that 𝒬󳀀󳨐φ if and only
if Ψ 󳀀󳨐φ. Corollary 4.2.9 implies that 𝒬󳀀󳨐φ if and only if Ψ ⊢φ.

4.3 Applications
౪
145
4.3.4 Prenex normal form
We establish a result that follows (indirectly) from the soundness theorem (Theo-
rem 4.1.5). Given a wff α with quantifiers, is it the case that α is logically equivalent
to a wff φ where all of the quantifiers in φ appear at the beginning of φ? In this section,
we prove that this is the case. First we present a formal definition.
Definition 4.3.20. A prenex formula is a wff that has the form
Q1x1Q2x2 ⋅⋅⋅Qnxnβ,
where each Qi is ∀or ∃and β is quantifier-free.
For example, the formula
∀x∃y∀z(Pxy →Qyz)
is a prenex formula.
Corollary 4.1.8 and Propositions 3.3.41–3.3.45 imply the following theorem, which
concerns quantifier manipulation and logical equivalence. This theorem presents
“rules” that can be applied to transform any wff into an equivalent formula that is
in prenex form. In fact, we will use these “rules” to prove that every formula is logically
equivalent to a prenex formula. However, in order to apply these “rules,” one may have
to first apply Theorem 3.3.61 (on alphabetic variants).
Theorem 4.3.21. The following six logical equivalences identify valid operations that in-
volve quantifier manipulation:
1.
¬∃xα 󳀀󳨐
󳀀󳨐
∀x¬α,
2.
¬∀xα 󳀀󳨐
󳀀󳨐
∃x¬α,
3.
(α →∀xβ) 󳀀󳨐
󳀀󳨐
∀x(α →β) if x is not free in α,
4.
(α →∃xβ) 󳀀󳨐
󳀀󳨐
∃x(α →β) if x is not free in α,
5.
(∀xα →β) 󳀀󳨐
󳀀󳨐
∃x(α →β) if x is not free in β,
6.
(∃xα →β) 󳀀󳨐
󳀀󳨐
∀x(α →β) if x is not free in β.
Theorem 4.3.22. Every wff is logically equivalent to a prenex formula.
Proof. We prove the following statement by induction on wffs: For all wffs φ, there exists
a prenex formula ψ such that φ 󳀀󳨐
󳀀󳨐
ψ.
Base step: Let ϕ = Pt1t2 ⋅⋅⋅tn be an atomic formula. Since ϕ has no quantifiers, ϕ is
already a prenex formula and it is logically equivalent to itself.
Inductive step: Let α and β be arbitrary wffs. Assume the induction hypothesis
α 󳀀󳨐
󳀀󳨐
Q1x1Q2x2 ⋅⋅⋅Qnxnγ,
β 󳀀󳨐
󳀀󳨐
Q′
1y1Q′
2y2 ⋅⋅⋅Q′
kykθ,
(IH)

146
౪
4 Soundness and completeness
where γ and θ are quantifier-free and Qi and Q′
i are quantifiers. We must prove that the
same holds for each of the following:
(¬α), (α →β), ∀vα.
Case (¬α): From (IH), by repeatedly applying Theorem 4.3.21(1)(2), we obtain
¬α 󳀀󳨐
󳀀󳨐
¬Q1x1Q2x2 ⋅⋅⋅Qnxnγ 󳀀󳨐
󳀀󳨐
̂Q1x1̂Q2x2 ⋅⋅⋅̂Qnxn¬γ,
where ̂∀= ∃and ̂∃= ∀. Since ¬γ is quantifier-free, we see that ¬α is logically equivalent
to a prenex formula.
Case (α →β): After applying Theorem 3.3.61 (if necessary), we can be assured that the
variables x1, . . . , xn, y1, . . . yk in (IH) are all distinct, that none of the variables x1, . . . , xn
occur free in θ, and that none of the variables y1, . . . , yk occur free in γ. From (IH), by
repeatedly applying Theorem 4.3.21(3)–(6), we obtain
(α →β) 󳀀󳨐
󳀀󳨐
̂Q1x1̂Q2x2 ⋅⋅⋅̂QnxnQ′
1y1Q′
2y2 ⋅⋅⋅Q′
kyk(γ →θ).
As (γ →θ) is quantifier-free, (α →β) is logically equivalent to a prenex formula.
Case ∀vα : From (IH), we conclude that
∀vα 󳀀󳨐
󳀀󳨐
∀vQ1x1Q2x2 ⋅⋅⋅Qnxnγ,
and this completes the proof.
Exercises 4.3.
*1. Prove Theorem 4.3.9.
*2. Let 𝒦be a class of structures of a given language. Prove that Th(𝒦) is a complete
theory if and only if for all structures A, B ∈𝒦, we have A ≡B.
*3. Let Σ be a set of sentences in a language ℒ. Prove that Σ is a theory if and only if
Cn(Σ) = Σ.
4. Let Σ be a set of sentences in a language ℒand let A be an ℒ-structure. Show that
if A 󳀀󳨐Σ, then A 󳀀󳨐Cn(Σ).
*5. Let Σ be a set of sentences in a language ℒand let A be an ℒ-structure. Suppose that
Cn(Σ) is a complete theory and A 󳀀󳨐Σ. Show that Th(A) = Cn(Σ).
6. Let Σ be a set of sentences in a language ℒand let A be an ℒ-structure such that
Th(A) = Cn(Σ). Show that A 󳀀󳨐φ if and only if Σ ⊢φ, for every ℒ-sentence φ. Now
show that for any ℒ-sentence φ, either Σ ⊢φ or Σ ⊢¬φ, but not both.
*7. Let Σ1 and Σ2 be sets of sentences in a language ℒ.
(a) Suppose that Σ1 ⊆Σ2. Show that Cn(Σ1) ⊆Cn(Σ2).
(b) Suppose that Σ1 󳀀󳨐α for all α ∈Σ2. Show that Cn(Σ2) ⊆Cn(Σ1).
8. Let Σ1, Σ2, Σ be sets of ℒ-sentences and let 𝒦1, 𝒦2, 𝒦be classes of ℒ-structures.
(a) Show that if Σ1 ⊆Σ2, then Mod(Σ2) ⊆Mod(Σ1).

4.3 Applications
౪
147
(b) Show that Σ ⊆Th(Mod(Σ)).
(c) Show that if 𝒦1 ⊆𝒦2, then Th(𝒦2) ⊆Th(𝒦1).
(d) Show that 𝒦⊆Mod(Th(𝒦)).
(e) Using (a), (b), and (d), show that Mod(Σ) = Mod(Th(Mod(Σ))).
(f) Using (b), (c), and (d), show that Th(𝒦) = Th(Mod(Th(𝒦))).
9. Find prenex formulas that are logically equivalent to the following:
(a) (∃xPx →∀xQx),
(b) ¬(∃xPx →∃xQx),
(c) ∀v(∀xPxv →∀xQvx).
*10. Let ℒ= { ̇<, ̇=} and let Ψ be the set of ℒ-sentences given on page 143. Show that Ψ
has no finite models.
11. Let A = {a1, a2, . . . } and let ⋃n≥1 An be as in the proof of Theorem 4.3.17. From the
proof, we have A1 ⊆A2 ⊆⋅⋅⋅and ⋃n≥1 An ⊆A. Prove that A ⊆⋃n≥1 An.
12. Let A and B be as in the proof of Theorem 4.3.17. Complete this proof by showing
that A = ⋃n≥1 An, B = ⋃n≥1 Bn, and that h = ⋃n≥1 hn is an isomorphism between A
and B.
13. Let ℒ= { ̇<}, where ̇< is a 2-place relation symbol. Consider the ℒ-structure 𝒩=
⟨ℕ; <⟩, where < is the usual ordering. Show that there is a model ℳwith domain
M that is elementarily equivalent to 𝒩such that there is a sequence ⟨ai : i ∈ℕ⟩of
elements in M such that ℳ󳀀󳨐(ai+1 ̇< ai), for all i ∈ℕ.
14. Suppose that the sentence φ is true in all infinite models of a theory T. Show that
there is a natural number k ≥1 such that φ is true in all models of T whose domain
has at least k many elements.
Exercise Notes: For Exercise 11, use proof by contradiction. Let k > 1 be the least such
that ak ∈A and ak is not in ⋃n≥1 An. Thus, {a1, a2, . . . , ak−1} ⊆⋃n≥1 An. It follows that
{a1, a2, . . . , ak−1} ⊆An for some odd n (why?). Derive a contradiction. For Exercise 13, let
ℒ′ = ℒ∪{c1, c2, c3, . . . }, where the ci’s are new constant symbols. For each k ≥1, let λk
be the sentence
ck < ck−1 ∧ck−1 < ck−2 ∧⋅⋅⋅∧c1 < c0.
Apply the compactness theorem. For Exercise 14, assume, for a contradiction, that for
all k ≥2 there is a model A of T such that A 󳀀󳨐¬σ and A has at least k elements. Review
the proof (and its notation) of Theorem 4.3.1. Show that from this assumption there is a
model of T ∪{¬σ} ∪{λ2, λ3, . . . }.

