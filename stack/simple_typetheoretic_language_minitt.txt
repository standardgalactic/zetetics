6
A simple type-theoretic language: Mini-TT
Thierry Coquand
Chalmers University of Technology and G¨oteborg University
Yoshiki Kinoshita
National Institute of Advanced Industrial Science
and Technology (AIST), Japan
Bengt Nordstr¨om
Chalmers University of Technology and G¨oteborg University
Makoto Takeyama
National Institute of Advanced Industrial Science and
Technology (AIST), Japan
Abstract
This paper presents a formal description of a small functional language
with dependent types. The language contains data types, mutual
recursive/inductive deﬁnitions and a universe of small types. The
syntax, semantics and type system is speciﬁed in such a way that the
implementation of a parser, interpreter and type checker is straight-
forward. The main diﬃculty is to design the conversion algorithm in
such a way that it works for open expressions. The paper ends with a
complete implementation in Haskell (around 400 lines of code).
6.1 Introduction
We are going to describe a small language with dependent types, its
syntax, operational semantics and type system. This is in the spirit
of the paper “A simple applicative language: Mini-ML” by Cl´ement,
Despeyroux, and Kahn [5], where they explain a small functional
language. From them we have borrowed the idea of using patterns
instead of variables in abstractions and let-bindings. It gives an elegant
way to express mutually recursive deﬁnitions. We also share with them
the view that a programming language should not only be formally
speciﬁed, but it should also be possible to reason about the correctness
of its implementation. There should be a small step from the formal
From Semantics to Computer Science Essays in Honour of Gilles Kahn,
eds Yves
Bertot, G´erard Huet, Jean-Jacques L´evy and Gordon Plotkin. Published by Cambridge
University Press.
c
⃝Cambridge University Press 2009.
139
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

140
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
operational semantics to an interpreter and also between the speciﬁ-
cation of the type system to a type checker.
Our type checking algorithm reduces the problem to checking convert-
ibility of terms.1 A central feature of our Mini-TT presentation is that
we compute normal forms of open terms for convertibility checking.
A major problem has been to deﬁne the computation of normal
forms in such a way that checking convertibility can be reduced to
checking syntactic identity of the normal forms. This is done in two
steps: ﬁrst evaluating an expression to its value and then applying a
readback function taking the value to a normal expression. Values are
representations of expressions in weak head normal form. There are
connections between our work and the work of B. Gregoire and X.
Leroy on compilation of strong reductions [10, 9]. As in their work, our
approach for conversion is based on weak reductions on open terms,
complemented by a recursive “read back” procedure.
Two main diﬀerences with this work are the following. First, there
is the use of patterns mentioned above to encode mutual recursive
deﬁnitions and our representation of data types as labelled sums. These
two features allow us to represent some inductive recursive deﬁnitions
in a natural way. Second, our way of comparing functions deﬁned by
case is less reﬁned than the one in [10]. Although less reﬁned, we think
that our approach is simpler to implement at a machine level. The
programming language associated to type theory is usually presented as
λ-calculus extended with some primitive constants (constructors) and
constants implicitly deﬁned by pattern-matching equations [13]. Our
simple treatment is actually more faithful to this usual presentation
than structural equality. It also has the advantage that our syntax is
very close to the one of an ordinary functional programming language,
with arbitrary mutual recursive deﬁnitions.
Our approach should also allow us to apply the results of [4, 7]. This
should provide a modular and semantical suﬃcient condition ensuring
strong normalization and hence decidability of our type-checking
algorithm.
This paper is organized as follows. In Section 6.2, the syntax of
Mini-TT is given, as well as some syntactic sugar. Some programming
examples, such as booleans and natural numbers, are given in Section
6.3. Section 6.4 introduces values and the evaluation function that sends
1 Conversely, the convertibility of two terms t, u of type A can be reduced to the
problem of whether the term λT.λx.x has type ΠT:A →U. T t →T u.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
141
expressions
M, N, A, B
: : =
λ p . M | x | M N | Π p:A . B | U |
M, N | M.1 | M.2 | Σ p:A . B |
0 | T |
c M | fun S | Sum S |
D; M
patterns
p
: : =
x | p, p |
choices
S
: : =
() | (c M, S)
declarations
D
: : =
p:A = M | rec p:A = M
syntactic sugar
A →B
=
Π :A . B
A × B
=
Σ :A . B
c A | S
=
(c, A), S
c →M | S
=
(c, M), S
Fig. 6.1. Syntax of Mini-TT.
expressions to values. Our semantics is not based on a reduction relation
between expressions. Intuitively, a value represents an expression in
weak head normal form and the evaluation function implements the
weak head reduction. Section 6.5 deﬁnes normal expressions and the
readback function that sends a value to a normal expression. We check
the convertibility of expressions by ﬁrst evaluating them to values,
then applying the readback function, and ﬁnally checking for syntactic
identity. Typing rules are presented in Section 6.6, metamathematical
remarks in Section 6.7 and Section 6.8 discusses variations possibly
applied to mini-TT as given here. Finally Section 6.9 concludes the
paper. In the Appendix, we attach a Haskell code which checks the
typing relation, i.e. given two expressions, it checks whether the latter
is a type expression and the former has the latter as its type.
6.2 Syntax
A brief summary of the syntax can be found in Figure 6.1.
In this presentation of the language, we are using patterns to introduce
variables. An abstraction of the form λ (x, y) . e is an abstraction of two
variables x and y, so (λ (x, y) . e) u reduces to e[x: = u.1, y: = u.2] while
an abstraction of the form λ
. e is an abstraction of no variables, so
(λ . e) u reduces to e.
A program is an expression of type T, usually just a list of declarations.
A declaration is a deﬁnition of a constant with its type. We will ﬁrst
explain the syntax of the declarations, then continue to describe the
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

142
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
various ways of forming expressions associated with each type-forming
operation (unit type, dependent product, labelled sum and universe).
Declarations: recursive and explicit deﬁnitions There are two
kinds of deﬁnitions, let expression p:A = M; N, and letrec expression
rec p:A = M; N. Use of patterns is not strictly necessary but simpliﬁes
the deﬁnition of mutually recursive deﬁnitions.
We allow deﬁnitions of non-terminating functions. This is essential
if Mini-TT is going to be a core language for programming. Non-
terminating functions are essential for interactive programs. Of course,
it causes problems for type checking to be terminating, so we assume
that termination is checked in a separate phase.
Unit type The unit type T has the unit element 0.
Dependent
product,
lambda
abstraction,
application The
dependent product type Π p:A . B is the type of functions taking an
object M in the type A to an object in the type B (where B may
depend on M). Lambda abstractions are written λ p.M and application
M N. It is possible to use the notation A →B as syntactic sugar for
Π :A . B.
Dependent sum, pairs and projections The dependent sum Σ p:A.
B is the type of pairs M, N, where M ∈A, N ∈B[M/p]. The projections
are written M.1 and M.2. It is possible to use the notaton A × B as
syntactic sugar for Σ :A . B.
Labelled sum, constructor application and case An inductive set
is regarded as a labelled sum Sum(c1 A1, . . . , cn An), which contains
objects of the form ci E, where E is an object in Ai. We will also write
this as Sum(c1 A1 | · · · | cn An). It is possible to skip the type Ai in the
case that it is the unit type T. For instance, the type of Boolean values
can be written as Sum (true | false) instead of Sum (true T | false T).
The case-analysis function has the shape fun(c1 M1, . . . , cn Mn). It is
a function which when applied to an object of the form ci N is equal
to Mi N. The choice ci (λ p . Mi) is written ci p →Mi and the choice
ci (λ . Mi) is written ci →Mi.
Universe The type of small types is written U. The objects in this are
types not built up using U.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
143
6.3 Examples of programs
Here are some examples of programs (a list of declarations D1; · · · ; Dn)
that we can write in Mini-TT. The generic identity function will be
represented by the program
id:Π A:U . A →A = λ A . λ x . x
A simple example is the data type of Booleans and the corresponding
elimination function
Bool
: U = Sum (true | false)
elimBool : Π C:Bool →U . C false →C true →Π b:Bool . C b
= λ C . λ h0 . λ h1 . fun (true →h1 | false →h0)
The type of natural numbers is represented as a recursively deﬁned
labelled sum
rec Nat:U = Sum (zero | succ Nat)
Similarly, the type of lists is described by
rec List :U →U = λ A . Sum (nil | cons A × List A)
The elimination function of the type of natural numbers is the
recursively deﬁned function
rec natrec : Π C:Nat →U . C zero →(Π n:Nat . C n →C(succ n)) →
Π n:Nat . C n
= λ C . λ a . λ g . fun (zero →a | succ n1 →g n1 (natrec C a g n1))
If we work in this fragment, and we do not introduce new deﬁnitions
using rec, Sum and fun, we obtain a faithful representation of the
corresponding fragment of type theory described in Chapter 20 of [12].
In Mini-TT, we can directly introduce other recursive functions on
natural numbers, even if they can be deﬁned without recursion using
natrec. A simple example is the addition function
rec add : Nat →Nat →Nat
= λ x . fun (zero →x | succ y1 →succ (add x y1))
A more complex example is provided by the decidable equality
function
rec eqNat : Nat →Nat →Bool
= fun ( zero
→fun (zero →true | succ y →false)
| succ x →fun (zero →false | succ y →eqNat x y))
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

144
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
values
u, v, t
: : =
[k] | λf | Π t g | U |
u, v | 0 | Σ t g | 1 |
c v | fun s | Sum s
neutral values (accumulators)
k
: : =
xn | k v | k.1 | k.2 | s k
function closures
f, g
: : =
⟨λp.M, ρ⟩| f ◦c
choice closures
s
: : =
⟨S, ρ⟩
environments
ρ
: : =
() | ρ, p = v | ρ, D
Fig. 6.2. Values.
Our representation of this function corresponds to the system of pattern-
matching equations
eqNat zero
zero = true,
eqNat zero
(succ y) = false,
eqNat (succ x) zero = false,
eqNat (succ x) (succ y) = eqNat x y,
compiled using two auxiliary functions
eqNat zero
= f,
f zero = true,
f (succ y) = false,
eqNat (succ x) = g x,
g x zero = false,
g x (succ y) = eqNat x y
The last example is the inductive-recursive deﬁnition [8] of a
universe containing a code of the type of natural numbers and the
dependent product formation, deﬁned in a mutual recursive way with
its corresponding decoding function:
rec (V, T) :
Σ X:U . X →U
= ( Sum (nat | pi (Σ x:V . T x →V)),
fun (nat →Nat | pi (x, f) →Π y:T x . T (f y))) ;
6.4 Operational semantics
In order to deﬁne the semantics of the language, it is necessary to ﬁrst
deﬁne the set of values (Fig. 6.2).
6.4.1 Values
A value represents an open expression in weak head normal form.
It is either a neutral value [k] which represents an expression whose
computation stopped because of an attempt to compute a variable, or
a canonical value, the form of which makes clear the head construction
of an expression: λ-abstraction λf, Π-abstraction Π t g, etc.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
145
The neutral value xn is a primitive (not deﬁned) constant which is
used to represent the value of a free variable. It is a constant about
which we know nothing. It is called a generic value in [6].
Other neutral values are built up from evaluation contexts in which
attempts are made to compute neutral values. For instance, we obtain
the neutral value k v when trying to evaluate an application and the value
of the function is the neutral value k and the argument is v. Similarly,
the neutral values k.1 and k.2 are the results of trying to project from
a neutral value k. The neutral value ⟨S, ρ⟩k is the result of trying to
apply a choice function fun S to a neutral value k in an environment ρ.
Neutral values are called accumulators by Gr´egoire and Leroy [10].
6.4.2 Value operations
There is a small set of functions deﬁned on values. They are in general
not deﬁned for all arguments, e.g. the projections are not deﬁned for
functions. This does not lead to problems since the operations are only
applied when evaluating well typed expressions.
There is a function which instantiates a function closure to a value. It
is deﬁned by:
inst⟨λp.M, ρ⟩v
=
⇓M(ρ, p = v)
inst(f ◦c) v
=
inst f(c v)
Application app u v of values is deﬁned using instantiation. Notice how
a neutral value is built up in the case that the function is a neutral value:
app(λf) v
=
inst f v
app(fun⟨S, ρ⟩)(ci v)
=
app(JMiKρ) v
where S = (c1 →M1 | · · · | cn →Mn)
app(fun s)[k]
=
[s k]
app[k] v
=
[k v]
The projection function for pairs of values follows the same pattern:
(u, v).1
=
u
[k].1
=
[k.1]
(u, v).2
=
v
[k].2
=
[k.2]
The function to look up the value ρ(x) of a variable x in an
environment ρ is only deﬁned for ρ in which x is deﬁned. Type checking
guarantees that this is the case.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

146
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
⇓λ p . Mρ
=
⟨λp.M, ρ⟩
⇓xρ
=
ρ(x)
⇓M Nρ
=
app(⇓Mρ)(⇓Nρ)
⇓Π p:A . Bρ
=
Π (⇓Aρ) ⟨λp.B, ρ⟩
⇓Uρ
=
U
⇓D; Mρ
=
⇓M(ρ, D)
⇓M, Nρ
=
(⇓Mρ, ⇓Nρ)
⇓0ρ
=
0
⇓M.1ρ
=
(⇓Mρ).1
⇓M.2ρ
=
(⇓Mρ).2
⇓Σ p:A . Bρ
=
Σ (⇓Aρ) ⟨λp.B, ρ⟩
⇓Tρ
=
1
⇓c Mρ
=
c (⇓Mρ)
⇓fun Sρ
=
fun⟨S, ρ⟩
⇓Sum Sρ
=
Sum⟨S, ρ⟩
Fig. 6.3. Semantics of Mini-TT.
If x is in p,
(ρ, p = v)(x)
=
projp
x(v)
(ρ, p:A = M)(x)
=
projp
x(⇓Mρ)
(ρ, rec p:A = M)(x)
=
projp
x(⇓M(ρ, rec p:A = M))
If x is not in p,
(ρ, p = v)(x)
=
ρ(x)
(ρ, D)(x)
=
ρ(x)
The notation projp
x(v) is well-deﬁned under the precondition that x is in
p.
projx
x(v)
=
v
proj(p1,p2)
x
(v)
=
projp1
x (v.1)
if x is in p1,
proj(p1,p2)
x
(v)
=
projp2
x (v.2)
if x is in p2
6.4.3 Semantics
In Figure 6.3 we give the semantics of Mini-TT by equations of the form
⇓Mρ = v, meaning that the expression M evaluates to the value v in
the environment ρ.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
147
E
: : =
λ xi . E | Π xi:E1 . E2 | U | [K]
E1, E2 | 0 | Σ xi:E1 . E2 | T
c E | fun⟨S, α⟩| Sum⟨S, α⟩
K
: : =
xi | KE | K.1 | K.2 | ⟨S, α⟩K
α
: : =
() | (α, p = E) | (α, D)
Fig. 6.4. Normal expressions.
Ri(λf)
=
λ xi . Ri+1(inst f[xi])
Ri(u, v)
=
(Ri u, Ri v)
Ri 0
=
0
Ri(c v)
=
c (Ri v)
Ri(fun⟨S, ρ⟩)
=
fun⟨S, Ri ρ⟩
Ri(Sum⟨S, ρ⟩)
=
Sum⟨S, Ri ρ⟩
Ri U
=
U
Ri 1
=
T
Ri(Π t g)
=
Π xi:Ri t . Ri+1(inst g[xi])
Ri(Σ t g)
=
Σ xi:Ri t . Ri+1(inst g[xi])
Ri[k]
=
[Ri k]
Ri xj
=
xj
Ri(k v)
=
(Ri k)(Ri v)
Ri(k.1)
=
(Ri k).1
Ri(k.2)
=
(Ri k).2
Ri(⟨S, ρ⟩k)
=
⟨S, Ri ρ⟩(Ri k)
Ri(ρ, p = v)
=
Ri ρ, p = Ri v
Ri(ρ, D)
=
Ri ρ, D
Ri()
=
()
Fig. 6.5. The readback notation.
6.5 Normal expressions and readback
The readback function Ri takes a value to a normal expression (Fig. 6.4).
The purpose of Ri is to facilitate convertibility checking. Notice
that normal expressions are ﬁrst-order objects, and have a decidable
(syntactic) equality. Two convertible values are mapped to the same
normal expression (i.e. identical, including choice of bound variables).
This is similar to [10].
We overload the notation Ri(−) (i ∈N) for three cases (Fig. 6.5):
the readback of a value Ri v is a normal expression E, that of a neutral
value Ri k is a neutral expression K, and that of an environment Ri ρ is
a normal environment α.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

148
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
6.6 Typing rules
Typing context A typing context consists of an environment ρ and a
type environment Γ:
Γ:: = () | Γ, x:t
The lookup operation Γ(x) is expressed not as a function but as
an inductive predicate since it may fail and signals incorrectness of
expression being type checked.
(Γ, x:t)(x) →t
Γ(x) →t
(Γ, y:t′)(x) →t
y ̸= x
That Γ is updated by binding p:t = v to Γ′ is written Γ ⊢p:t = v ⇒Γ′.
It decomposes the pattern binding to bindings of simple variables while
checking that the shape of p ﬁts the type t. The bound value v is needed
to compute the type of subpatterns of p.
Γ ⊢x:t = v ⇒Γ, x:t
Γ ⊢:t = v ⇒Γ
Γ ⊢p1:t1 = v.1 ⇒Γ1
Γ1 ⊢p2: inst g(v.1) = v.2 ⇒Γ2
Γ ⊢(p1, p2):Σ t1 g = v ⇒Γ2
6.6.1 Overview
There are four forms of judgements.
checkD
ρ, Γ ⊢l D ⇒Γ′
D is a correct declaration and extends Γ to Γ′.
checkT
ρ, Γ ⊢l A
A is a correct type expression.
check
ρ, Γ ⊢l M ⇐t
M is a correct expression of the given type t.
checkI
ρ, Γ ⊢l M ⇒t
M is a correct expression and its type is
inferred to be t.
The inference rules are syntax directed and constitute a standard
bidirectional type-checking (semi-)algorithm. It is an important property
of the checking algorithm that ⇓Mρ is never computed without ﬁrst
checking that M is well-formed.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
149
checkD: check that a declaration is correct
ρ, Γ ⊢l A
ρ, Γ ⊢l M ⇐t
Γ ⊢p:t =⇓Mρ ⇒Γ1
ρ, Γ ⊢l p:A = M ⇒Γ1
(t =⇓Aρ)
ρ, Γ ⊢l A
Γ ⊢p:t = [xl] ⇒Γ1
(ρ, p = [xl]), Γ1 ⊢l+1 M ⇐t
Γ ⊢p:t = v ⇒Γ2
ρ, Γ ⊢l rec p:A = M ⇒Γ2
 t = ⇓Aρ,
v = ⇓M(ρ, rec p:A = M)

The rule for a let binding is as expected. We check that A is a type,
M is an expression of that type, and extend Γ while checking that p
ﬁts the type. In the rule for a letrec binding, the body M is checked
in a temporarily extended context, in which p is bound to a generic
value. This means that while checking M, recursively deﬁned identiﬁers
are treated as fresh constants about which we assume nothing but
their typing. Once M is checked, Γ is extended using the ‘real’ value
⇓M(ρ, rec p:A = M) for p.
checkT: check that something is a type
ρ, Γ ⊢l U
ρ, Γ ⊢l A
Γ ⊢p: ⇓Aρ = [xl] ⇒Γ1
(ρ, p = [xl]), Γ1 ⊢l+1 B
ρ, Γ ⊢l Π p:A . B
ρ, Γ ⊢l A
Γ ⊢p: ⇓Aρ = [xl] ⇒Γ1
(ρ, p = [xl]), Γ1 ⊢l+1 B
ρ, Γ ⊢l Σ p:A . B
ρ, Γ ⊢l A ⇐U
ρ, Γ ⊢l A
(if other rules are not applicable)
If A is expected to be a type but not any of U, Π, or Σ, then it must be
a small type of type U (the last rule).
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

150
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
check: check that an expression has a given type
Γ ⊢p:t = [xl] ⇒Γ1
(ρ, p = [xl]), Γ1 ⊢l+1 M ⇐inst g [xl]
ρ, Γ ⊢l λ p . M ⇐Π t g
ρ, Γ ⊢l M ⇐t
ρ, Γ ⊢l N ⇐inst g(⇓Mρ)
ρ, Γ ⊢l (M, N) ⇐Σ t g
ρ, Γ ⊢l M ⇐JAiKν
ρ, Γ ⊢l ci M ⇐Sum⟨c1 A1 | · · · | cn An, ν⟩
ρ, Γ ⊢l M1 ⇐Π (JA1Kν) (g ◦c1)
· · ·
ρ, Γ ⊢l Mn ⇐Π (JAnKν) (g ◦cn)
ρ, Γ ⊢l fun(c1 →M1 | · · · | cn →Mn) ⇐
Π (Sum⟨c1:A1 | · · · | cn:An, ν⟩) g
ρ, Γ ⊢l D ⇒Γ1
(ρ, D), Γ1 ⊢l M ⇐t
ρ, Γ ⊢l D; M ⇐t
ρ, Γ ⊢l 0 ⇐1
ρ, Γ ⊢l T ⇐U
ρ, Γ ⊢l A ⇐U
Γ ⊢p: ⇓Aρ = [xl] ⇒Γ1
(ρ, p = [xl]), Γ1 ⊢l+1 B ⇐U
ρ, Γ ⊢l Π p:A . B ⇐U
ρ, Γ ⊢l A ⇐U
Γ ⊢p: ⇓Aρ = [xl] ⇒Γ1
(ρ, p = [xl]), Γ1 ⊢l+1 B ⇐U
ρ, Γ ⊢l Σ p:A . B ⇐U
ρ, Γ ⊢l A1 ⇐U
· · ·
ρ, Γ ⊢l An ⇐U
ρ, Γ ⊢l Sum(c1 A1 | · · · | cn An) ⇐U
ρ, Γ ⊢l M ⇒t′
Rl t = Rl t′
ρ, Γ ⊢l M ⇐t
(if other rules are not applicable)
This deals with expressions in canonical forms (weak head normal
forms). For an expression in a non-canonical form, the last rule infers
its type and checks that the inferred type is equal to the expected one.
This is the single place where type checking uses conversion checking.
In the rule for a case-analysis function, it must be checked against
a Π type whose domain is a Sum type. For simplicity, we require the
constructors in case branches to match exactly the constructors listed
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
151
in the Sum type, including the order. From the right-hand side of the
equation
app(Jfun(c1 →M1 | · · · | cn →Mn)Kρ)(ci v) = app(JMiKρ) v
we expect the branch expression Mi to have a Π type with the domain
JAiKν. The closure g◦ci in the codomain part is what is needed to make
both sides of the equation to have the same type, namely inst g(ci v).
The rules for Π, Σ, T, and Sum here make the universe U to be directly
closed under those operations, unlike the type Set of Logical Framework.
checkI: infer the type of an expression
Γ(x) →t
ρ, Γ ⊢l x ⇒t
ρ, Γ ⊢l M ⇒Π t g
ρ, Γ ⊢l N ⇐t
ρ, Γ ⊢l M N ⇒inst g(⇓Nρ)
ρ, Γ ⊢l M ⇒Σ t g
ρ, Γ ⊢l M.1 ⇒t
ρ, Γ ⊢l M ⇒Σ t g
ρ, Γ ⊢l M.2 ⇒inst g((⇓Mρ).1)
We check and infer types of expressions in non-canonical forms here.
6.7 Metamathematical remarks
As we explained in the introduction, the work [4, 7] should provide a
general semantical condition ensuring termination of type-checking: it is
enough that the strict denotational semantics of the program is ̸=⊥. As
in [4, 7], one can ensure this by proving totality of the program. In turn,
there are suﬃcient purely syntactical criteria ensuring totality. One such
criteria is, for instance, size-change termination [11, 15].
6.8 Variations
NBE and η-conversion We can adopt the typed NBE algorithm by
Abel, Dybjer, and Coquand [2] for our evaluation to obtain the version of
Mini-TT with η-conversion. There are two points to modify our presen-
tation of Mini-TT. First, when type checking under a binder, we extend
a context not by a generic value [xl] (l = |ρ|) but by its reﬂected form
↑t [xl], where t is the type of the generic value. Second, when we compare
the expected type t and the inferred type t′ in the last of check, we
compare the readbacks of their redeﬁned form Ri ⇓t and Ri ⇓t′. These
modiﬁcations make the comparison to be between η-long normal forms,
thus making Mini-TT a language type checked with η-conversion.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

152
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
Higher order values A function closures f is a ﬁrst-order represen-
tation of a semantic function from values to values. We do not need to
“look inside” it (cf. [10]). This can be made clear by replacing closures
with these semantic functions themselves, thus making values higher
order. Then, closure instantiation and constructions are replaced by the
following.
inst f v
=
f v
⟨λp.M, ρ⟩
=
(v &→⇓M(ρ, p = v))
f ◦c
=
(v &→f(c v))
6.9 Conclusion
We have presented a dependently typed language Mini-TT with its
semantics and type checking rules. Mini-TT has dependent products,
dependent sums and unit type, labelled sums, recursive deﬁnitions, and
pattern abstractions and bindings.
Mini-TT is a step towards a simple and deﬁnitive core language for the
proof-assistant Agda [3] based on versions of Martin-L¨of Type Theory.
To make development of large proofs and programs feasible, the full
language must support various advanced features such as incomplete
terms with meta-variables and synthesis of implicit arguments. Directly
giving semantics to them and justifying its complex implementation
is diﬃcult. Our approach is to translate the full language to a well-
understood simple core language. We would have a simple theory and
implementation of the core language, with respect to which a full-ﬂedged
proof assistant is speciﬁed, implemented, and tested.
Our future work is towards that goal. This includes a strong normal-
ization theorem for Mini-TT using the denotational semantics of [4,
7], non-uniform inductive families of types, universe hierarchy, proven
correct compilation to abstract machine code as in [10], etc.
Bibliography
[1]
M. Abadi, L. Cardelli, P.-L. Curien and J.-J. L´evy. Explicit substi-
tutions. In Conference Record of the Seventeenth Annual ACM Symposium
on Principles of Programming Languages, San Francisco, California,
pp. 31–46. ACM, 1990.
[2]
A. Abel, K. Aehlig and P. Dybjer. Normalization by evaluation for
Martin-L¨of type theory with one universe. Electronic Notes in Theoretical
Computer Science, 173:17–39, 2007.
[3]
Agda homepage. http://unit.aist.go.jp/cvs/Agda/.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
153
[4]
U. Berger. Strong normalization for applied lambda calculi. Logical
Methods in Computer Science, 1(2), 2005.
[5]
D. Cl´ement, J. Despeyroux, T. Despeyroux and G. Kahn. A simple
applicative language: Mini-ML. In LISP and Functional Programming,
pp. 13–27, 1986.
[6]
T. Coquand. An algorithm for type-checking dependent types. Science of
Computer Programming, 26(1–3):167–177, 1996.
[7]
T. Coquand and A. Spiwack. A proof of strong normalisation using
domain theory. In LICS, pp. 307–316. IEEE Computer Society, 2006.
[8]
P. Dybjer. A general formulation of simultaneous inductive-recursive
deﬁnitions in type theory. Journal of Symbolic Logic, 65(2):525–549, 2000.
[9]
B. Gr´egoire. Compilation des termes de preuves: un (nouveau) mariage
entre Coq et Ocaml. Th´ese de doctorat, sp´ecialit´e informatique, Universit´e
Paris 7, ´Ecole Polytechnique, France, December 2003.
[10]
B. Gr´egoire and X. Leroy. A compiled implementation of strong
reduction. In International Conference on Functional Programming 2002,
pp. 235–246. ACM Press, 2002.
[11]
C. S. Lee, N. D. Jones and A. M. Ben-Amram. The size-change principle
for program termination. In Conference Record of the Twenty-eighth Annual
ACM Symposium on Principles of Programming Languages, volume 28 of
ACM SIGPLAN Notices, pp. 81–92. ACM Press, January 2001.
[12]
B. Nordstr¨om, K. Petersson and J. M. Smith. Programming in Martin-
L¨of’s Type Theory, volume 7, Monographs on Computer Science. Oxford
University Press, 1990.
[13]
B. Nordstr¨om, K. Petersson, and J. M. Smith. Martin-L¨of’s type theory.
In S. Abramsky, D. M. Gabbay and T. S. E. Maibaum, (eds), Handbook of
Logic in Computer Science, volume 5. Oxford Science Publications, 2000.
[14]
M. Pellauer, M. Forsberg and A. Ranta. BNF Converter Multilingual
Front-end
Generation
from
Labelled
BNF
Grammars.
Technical
Report
2004-09,
Department
of
Computing
Science,
Chalmers
University of Technology and G¨oteborg University, 2004. available from
http://www.cs.chalmers.se/˜markus/BNFC/.
[15]
D. Wahlstedt. Dependent Type Theory with Parameterized First-Order
Data Types and Well-Founded Recursion. PhD thesis, Chalmers University
of Technology, 2007.
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

154
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
Appendix: Implementation
The inference rules are directly translated to Haskell using a simple error
monad G a. The Haskell typing of the routines that corresponds to the
four forms of judgements are:
data G a = Success a | Fail Name
instance
Monad G
where
(Success x) >>= k
=
k x
Fail s
>>= k
=
Fail s
return
=
Success
fail
=
Fail
checkD :: Int -> Rho -> Gamma -> Decl -> G Gamma
checkT :: Int -> Rho -> Gamma -> Exp -> G ()
check
:: Int -> Rho -> Gamma -> Exp -> TVal -> G ()
checkI :: Int -> Rho -> Gamma -> Exp -> G TVal
If these routines return without producing error messages, then there
are derivations that conclude corresponding judgements. The clause for
the application rule of checkI judgement is
ρ, Γ ⊢l M ⇒Π t g
ρ, Γ ⊢l N ⇐t
ρ, Γ ⊢l M N ⇒inst g(⇓Nρ)
checkI k rho gma (EApp e1 e2) =
do t1 <- checkI k rho gma e1
(t, g) <- extPiG t1
check k rho gma e2 t
return (g * eval e2 rho)
where
extPiG (Pi t g) = return (t, g)
extPiG u
= fail ("extPiG " ++ showVal u)
The implementation supposes a parser function. One can either
write a parser directly in Haskell, or use the BNF Converter compiler
construction tool [14]. From a description of concrete syntax in a
labelled BNF grammar, BNFC generates modules for the data type for
abstract syntax trees, a parser, and a pretty printer.
The implementation can be obtained from http://www.cs.chalmers.
se/Cs/Research/Logic/Mini-TT/
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
155
-----------------------------------------
-- Main module
-----------------------------------------
module Main where
import Prelude hiding ((*))
----------------------------------------------------------
-- Expressions
-----------------------------------------------------------
type Name = String
data Exp =
ELam Patt Exp
| ESet
| EPi Patt Exp Exp
| ESig Patt Exp Exp
| EOne
| Eunit
| EPair Exp Exp
| ECon Name Exp
| ESum Branch
| EFun Branch
| EFst Exp
| ESnd Exp
| EApp Exp Exp
| EVar Name
| EVoid
| EDec Decl Exp
deriving (Eq,Ord,Show)
data Decl =
Def Patt Exp Exp
| Drec Patt Exp Exp
deriving (Eq,Ord,Show)
data Patt =
PPair Patt Patt
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

156
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
| Punit
| PVar Name
deriving (Eq,Ord,Show)
type Branch = [(Name,Exp)]
-----------------------------------------------------------
-- Values
-----------------------------------------------------------
data Val =
Lam Clos
|
Pair Val Val
|
Con Name Val
|
Unit
|
Set
|
Pi
Val Clos
|
Sig Val Clos
|
One
|
Fun SClos
|
Sum SClos
|
Nt Neut
deriving Show
data Neut = Gen
Int
| App
Neut Val
| Fst
Neut
| Snd
Neut
| NtFun SClos Neut
deriving Show
type SClos = (Branch, Rho)
-- Function closures
data Clos = Cl Patt Exp Rho | ClCmp Clos Name
deriving Show
-- instantiation of a closure by a value
(*) :: Clos -> Val -> Val
(Cl p e rho) * v = eval e (UpVar rho p v)
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
157
(ClCmp f c ) * v = f * Con c v
mkCl :: Patt -> Exp -> Rho -> Clos
mkCl p e rho = Cl p e rho
clCmp :: Clos -> Name -> Clos
clCmp g c
= ClCmp g c
get s [] = error ("get " ++ show s)
get s ((s1,u):us) | s == s1 = u
get s ((s1,u):us)
= get s us
app :: Val -> Val -> Val
app (Lam f)
v
= f * v
app (Fun (ces, rho)) (Con c v)
=
app (eval (get c es) rho) v
app (Fun s)
(Nt k)
= Nt(NtFun s k)
app (Nt k)
m
= Nt(App k m)
app w u = error "app "
vfst :: Val -> Val
vfst (Pair u1 _) = u1
vfst (Nt k)
= Nt(Fst k)
vfst w = error "vfst "
vsnd :: Val -> Val
vsnd (Pair _ u2) = u2
vsnd (Nt k)
= Nt(Snd k)
vsnd w =
error "vsnd "
---------------------------------------------
-- Environment
---------------------------------------------
data Rho = RNil | UpVar Rho Patt Val | UpDec Rho Decl
deriving Show
getRho :: Rho -> Name -> Val
getRho (UpVar rho p v) x | x ‘inPat‘ p = patProj p x v
| otherwise
= getRho rho x
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

158
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
getRho (UpDec rho (Def
p _ e)) x
| x ‘inPat‘ p = patProj p x (eval e rho)
| otherwise
= getRho rho x
getRho rho0@(UpDec rho (Drec p _ e)) x
| x ‘inPat‘ p = patProj p x (eval e rho0)
| otherwise
= getRho rho x
getRho RNil _ = error "getRho"
inPat :: Name -> Patt -> Bool
inPat x (PVar y)
= x == y
inPat x (PPair p1 p2) = inPat x p1 || inPat x p2
inPat _ Punit
= False
patProj :: Patt -> Name -> Val -> Val
patProj (PVar y)
x v | x == y
= v
patProj (PPair p1 p2) x v | x ‘inPat‘ p1 = patProj p1 x (vfst v)
| x ‘inPat‘ p2 = patProj p2 x (vsnd v)
patProj _ _ _ = error "patProj"
lRho :: Rho -> Int
lRho RNil
= 0
lRho (UpVar rho _ _) = lRho rho + 1
lRho (UpDec rho _
) = lRho rho
eval :: Exp -> Rho -> Val
eval e0 rho = case e0 of
ESet
-> Set
EDec d e
-> eval e (UpDec rho d)
ELam p e
-> Lam $ mkCl p e rho
EPi
p a b
-> Pi
(eval a rho) $ mkCl p b rho
ESig p a b
-> Sig (eval a rho) $ mkCl p b rho
EOne
-> One
Eunit
-> Unit
EFst e
-> vfst (eval e rho)
ESnd e
-> vsnd (eval e rho)
EApp e1 e2
-> app (eval e1 rho) (eval e2 rho)
EVar x
-> getRho rho x
EPair e1 e2
-> Pair
(eval e1 rho) (eval e2 rho)
ECon c e1
-> Con c (eval e1 rho)
ESum cas
-> Sum (cas, rho)
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
159
EFun ces
-> Fun (ces, rho)
e -> error $ "eval: " ++ show e
-----------------------------------------------------------
-- Normal forms
-----------------------------------------------------------
data NExp =
NLam Int NExp
|
NPair NExp NExp
|
NCon Name NExp
|
NUnit
|
NSet
|
NPi NExp Int NExp
|
NSig NExp Int NExp
|
NOne
|
NFun NSClos
|
NSum NSClos
|
NNt NNeut
deriving (Eq,Show)
data NNeut = NGen Int
| NApp NNeut NExp
| NFst NNeut
| NSnd
NNeut
| NNtFun NSClos NNeut
deriving (Eq,Show)
type NSClos = (Branch, NRho)
data NRho = NRNil | NUpVar NRho Patt NExp | NUpDec NRho Decl
deriving (Eq,Show)
-------------------------------------------
-- Readback functions
-------------------------------------------
rbV :: Int -> Val
-> NExp
rbV k v0 = case v0 of
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

160
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
Lam f
-> NLam k (rbV (k+1) (f * genV k))
Pair u v
-> NPair (rbV k u) (rbV k v)
Con
c v
-> NCon
c (rbV k v)
Unit
-> NUnit
Set
-> NSet
Pi
t g
-> NPi (rbV k t) k (rbV (k+1) (g * genV k))
Sig t g
-> NSig (rbV k t) k (rbV (k+1) (g * genV k))
One
-> NOne
Fun (s,rho)
-> NFun (s,rbRho k rho)
Sum (s,rho) -> NSum (s,rbRho k rho)
Nt l
-> NNt (rbN k l)
rbN :: Int -> Neut -> NNeut
rbN i k0 = case k0 of
Gen j
-> NGen j
App k m -> NApp (rbN i k) (rbV i m)
Fst k
-> NFst (rbN i k)
Snd k
-> NSnd (rbN i k)
NtFun (s,rho) k -> NNtFun (s,rbRho i rho) (rbN i k)
rbRho :: Int -> Rho -> NRho
rbRho _ RNil = NRNil
rbRho i (UpVar rho p v) = NUpVar (rbRho i rho) p (rbV i v)
rbRho i (UpDec rho d
) = NUpDec (rbRho i rho) d
------------------------------------------------
-- Error monad and type environment
------------------------------------------------
data G a = Success a | Fail Name
instance
Monad G
where
(Success x) >>= k
=
k x
Fail s
>>= k
=
Fail s
return
=
Success
fail
=
Fail
type Gamma = [(Name, Val)]
lookupG :: (Show a, Eq a) => a -> [(a,b)] -> G b
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
161
lookupG s [] = fail ("lookupG " ++ show s)-- should never occur
lookupG s ((s1,u):us) | s == s1 = return u
lookupG s ((s1,u):us)
= lookupG s us
-- Updating type environment
Gamma |- p : t = u => Gamma’
upG :: Gamma -> Patt -> Val -> Val -> G Gamma
upG gma Punit
_
_ = return gma
upG gma (PVar x)
t
_ = return $ (x,t):gma
upG gma (PPair p1 p2) (Sig t g) v =
do gma1 <- upG gma p1 t (vfst v)
upG gma1 p2 (g * vfst v) (vsnd v)
upG _
p
_
_ =
fail $ "upG: p = " ++
show p
-------------------------------------------------
-- Type checking rules
-------------------------------------------------
genV :: Int -> Val
genV k = Nt (Gen k)
checkT :: Int -> Rho -> Gamma -> Exp
-> G ()
check
:: Int -> Rho -> Gamma -> Exp
-> Val -> G ()
checkI :: Int -> Rho -> Gamma -> Exp
-> G Val
checkD :: Int -> Rho -> Gamma -> Decl -> G Gamma
checkT k rho gma e0 =
case e0 of
EPi
p a b -> do checkT k rho gma a
gma1 <- upG gma p (eval a rho) (genV k)
checkT (k+1) (UpVar rho p (genV k)) gma1 b
ESig p a b -> checkT k rho gma (EPi p a b)
ESet
-> return ()
a
-> check k rho gma a Set
check k rho gma e0 t0 =
case (e0, t0) of
(ELam p e
, Pi
t g )->
do let gen = genV k
gma1 <- upG gma p t gen
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

162
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
check (k+1) (UpVar rho p gen) gma1 e (g * gen)
(EPair e1 e2, Sig t g )->
do check k rho gma e1 t
check k rho gma e2 (g * eval e1 rho)
(ECon c e
, Sum (cas,rho1))->
do a <- lookupG c cas
check k rho gma e (eval a rho1)
(EFun ces, Pi (Sum (cas, rho1)) g) ->
if map fst ces == map fst cas
then sequence_ [check k rho gma e (Pi (eval a rho1)
| ((c,e), (_,a)) <- zip ces cas]
else fail "case branches does not match the data type"
(Eunit
, One)-> return ()
(EOne
, Set)-> return ()
(EPi
p a b , Set)->
do check k rho gma a Set
let gen = genV k
gma1 <- upG gma p (eval a rho) gen
check (k+1) (UpVar rho p gen) gma1 b Set
(ESig p a b , Set)-> check k rho gma (EPi p a b) Set
(ESum cas, Set)
->
sequence_ [check k rho gma a Set | (_,a) <- cas]
(EDec d e
, t
)-> do gma1 <- checkD k rho gma d
check k (UpDec rho d) gma1 e t
(e
, t
)-> do t1 <- checkI k rho gma e
eqNf k t t1
where
eqNf :: Int -> Val -> Val -> G ()
eqNf i m1 m2
| e1 == e2
= return ()
| otherwise = fail $ "eqNf: " ++ show e1 ++ "=/=" ++ show e2
where e1 = rbV i m1
e2 = rbV i m2
checkI k rho gma e0 =
case e0 of
EVar x
-> lookupG x gma
EApp e1 e2 -> do t1 <- checkI k rho gma e1
(t, g) <- extPiG t1
check k rho gma e2 t
(clCmp g c))
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

A simple type-theoretic language: Mini-TT
163
return (g * eval e2 rho)
EFst e
-> do t <- checkI k rho gma e
(a,_) <- extSigG t
return a
ESnd e
-> do t <- checkI k rho gma e
(_, g) <- extSigG t
return (g * vfst (eval e rho))
e
-> fail ("checkI: " ++ show e)
where
extPiG :: Val -> G (Val, Clos)
extPiG (Pi t g) = return (t, g)
extPiG u
= fail ("extPiG " ++ showVal u)
extSigG :: Val -> G (Val, Clos)
extSigG (Sig t g) = return (t, g)
extSigG u
= fail ("extSigG " ++ showVal u)
showVal u = show (rbV 0 u)
checkD k rho gma d@(Def
p a e) = do
checkT k rho gma a
let t = eval a rho
check k rho gma e t
upG gma p t (eval e rho)
checkD k rho gma d@(Drec p a e) = do
checkT k rho gma a
let t
= eval a rho
gen = genV k
gma1 <- upG gma p t gen
check (k+1) (UpVar rho p gen) gma1 e t
let v = eval e (UpDec rho d)
upG gma p t v
------------------------------------------------------
-- Main checking routines
------------------------------------------------------
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

164
T. Coquand, Y. Kinoshita, B. Nordstr¨om and M. Takeyama
-- The input is checked as an expression of type One.
checkMain :: Exp -> G ()
checkMain e = check 0 RNil [] e One
-- checking a string input
checkStr :: String -> IO()
checkStr s =
case parseExp $ myLex s of -- parsing using routines
Fail msg -> putStrLn $ "Parse error: " ++ msg
Success
(e,_)
->
case checkMain e of
Fail
msg’ ->
putStrLn ("type-checking failed:\n" ++ msg’)
Success _
->
putStrLn ("type-checking succeded.")
-- checking the content of a file.
checkFile :: String -> IO()
checkFile file = checkStr =<< readFile file
https://doi.org/10.1017/CBO9780511770524.007 Published online by Cambridge University Press

