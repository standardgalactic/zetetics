Dictionary compression
The compression techniques we have seen so far replace individual symbols
with a variable length codewords. In dictionary compression, variable length
substrings are replaced by short, possibly even ﬁxed length codewords.
Compression is achieved by replacing long strings with shorter codewords.
The general scheme is as follows:
• The dictionary D is a collection of strings, often called phrases. For
completeness, the dictionary includes all single symbols.
• The text T is parsed into a sequence of phrases:
T = T1T2 . . . Tz, Ti ∈D.
The sequence is called a parsing or a factorization of T with respect to
D.
• The text is encoded by replacing each phrase Ti with a code that acts
as a pointer to the dictionary.
72

Here is a simple static dictionary encoding for English text:
• The dictionary consists of some set of English words plus individual
symbols.
• Compute the frequencies of the words in some corpus of English texts.
Compute the frequencies of symbols in the corpus from which the
dictionary words have been removed.
• Number the words and symbols in descending order of their frequencies.
• To encode a text, replace each dictionary word and each symbol that
does not belong to a word with its corresponding number. Encode the
sequence of number using γ coding.
73

Lempel-Ziv compression
In 1977 and 1978, Abraham Lempel and Jacob Ziv published two adaptive
dictionary compression algorithms that soon became to dominate practical
text compression. Numerous variants have been published and implemented,
and they are still the most commonly used algorithms in general purpose
compression tools.
The common feature of the two algorithms and all their variants is that the
dictionary consists of substrings of the already processed part of the text.
This means that the dictionary adapts to the text.
The two algorithms are known as LZ77 and LZ78, and most related
methods can be categorized as a variant of one or the other. The primary
diﬀerence is the encoding of the phrases:
• LZ77 uses direct pointers to the preceding text.
• LZ78 uses pointers to a separate dictionary.
74

LF78
The original LZ78 encoding works as follows:
• The dictionary consists of phrases numbered from 0 upwards:
D = {Z0, Z1, Z2, . . .}. Each new phrase inserted to the dictionary gets the
next free number. Initially, the only phrase is the empty string Z0 = ϵ.
• Suppose we have so far computed the parsing T1 . . . Tj−1 for T[0 . . . i) and
the next phrase Tj starts at position i. Let Zk ∈D be the longest phrase
in the dictionary that is a preﬁx of T[i . . . n −1). The next phrase is
Tj = Zj = T[i . . . i + |Zk|] = Zkti+|Zk|, and it is inserted to the dictionary.
• The phrase Tj is encoded as the pair ⟨k, ti+|Zk|⟩. Using ﬁxed length
codes, the pair needs ⌈log(j + 1)⌉+ ⌈log σ⌉bits.
Example 2.7: Let T = badadadabaab.
index
0
1
2
3
4
5
6
7
phrase
ϵ
b
a
d
ad
ada
ba
ab
encoding
⟨0, b⟩
⟨0, a⟩
⟨0, d⟩
⟨2, d⟩
⟨4, a⟩
⟨1, a⟩
⟨2, b⟩
code length
0+2
1+2
2+2
2+2
3+2
3+2
3+2
75

LZW
LZW is simple optimization of LZ78 used, e.g., in the unix tool compress.
• Initially, the dictionary D contains all individual symbols:
D = {Z1, . . . , Zσ}.
• Suppose the next phrase Tj starts at position i. Let Zk ∈D be the
longest phrase in the dictionary that is a preﬁx of T[i..n). Now the next
text phrase is Tj = Zk and the phrase added to the dictionary is
Zσ+j = Tjti+|Tj|.
• The phrase Tj is encoded with the index k requiring ⌈log(σ + j −1)⌉bits.
Omitting the symbol codes saves space in practice, even though the index
codes can be longer and the phrases can be shorter.
Example 2.8: Let T = badadadabaab.
text phrase
b
a
d
ad
ada
ba
a
b
encoding
2
1
4
6
8
5
1
2
code length
2
3
3
3
3
4
4
4
dictionary phrase
a
b
c
d
ba
ad
da
ada
adab
baa
ab
index
1
2
3
4
5
6
7
8
9
10
11
76

There is a tricky detail in decoding LZW:
• In order to insert the phrase Zσ+j = Tjti+|Tj| into the dictionary, the
decoder needs to know the symbol ti+|Tj|. For the encoder this is not a
problem, but the decoder only knows that ti+|Tj| is the ﬁrst symbol of
the next phrase Tj+1. Thus the insertion is delayed until the next
phrase has been decoded.
• The encoder inserts Zσ+j to the dictionary without a delay and has the
option of choosing Tj+1 = Zσ+j. If this happens, the decoder is faced
with a reference to a phrase that is not yet in the dictionary! However,
in this case the decoder knows that the unknown symbol ti+|Tj| is the
ﬁrst symbol of Zσ+j, which is the same as the ﬁrst symbol of Tj. Given
ti+|Tj| the decoder can set Zσ+j = Tjti+|Tj|, insert it into the dictionary,
and decode Tj+1 normally.
The phrase Tj+1 = Zσ+j is problematic because it is self-referencial.
Example 2.9: In Example 2.8, the phrase T5 = Z8 = ada is self-referential.
77

