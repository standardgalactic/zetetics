
Regular Expression
	



Regular Expression
	

SECOND EDITION

BeijingÂ¥ Cambridge
Â¥ FarnhamÂ¥ KÂšlnÂ¥ ParisÂ¥ Sebastopol
Â¥ TaipeiÂ¥ Tokyo

Regular Expression Pocket Reference, Second Edition
	

	



      
	 
	 
  ! " # #

$%&&â€™()

* +,
   
	
â€™()

* +,%-. /0 1
 
&-2
â€™()

3 	, 	,  
	 

3 
	â€™
  
  
 
3

4
5#33 , ,	, 6
	 
 
 37485&&89&&8


Editor:â€™ 3
Production Editor:
	3 *	:
Copyeditor:. ("3
Indexer:! ; /<
Cover Designer:
= *3
Interior Designer:
< #	 
Printing History:
		7#"
!	
7
,"
1	

 /   1	

 /  
    â€™()

 
  
 3 â€™()

* +,



 

	

3 0
 

    3 â€™()

* +,
*  	3 	 ,	 

	
 	,   ,
 3    3  >      
 â€™()

* +,0  0   3 ,
 3
  ,  
, 
!  
â€œ    3   	 *,3 +, *, + "?

  1"     3   *,   9* 
  3 * 
"+,
>
, 	    
	
    	  	3  
    3  
 3 	
3	3 , 
+@19%79-&$9-%29%
+@19%7&899-&$9-%29
AB

v
Contents
About This Book
 1
Introduction to Regexes and Pattern Matching
 3
Regex Metacharacters, Modes, and Constructs
Unicode Support
 13
Regular Expression Cookbook
 13
Recipes
 14
Perl 5.8
 16
Supported Metacharacters
 17
Regular Expression Operators
 2
Unicode Support
 23
Examples
 24
Other Resources
 25
Java (java.util.regex)
 26
Supported Metacharacters
 26
Regular Expression Classes and Interfaces
Unicode Support
 35
Examples
 36
Other Resources
 38

vi
|
Contents
.NET and C#
 38
Supported Metacharacters
 38
Regular Expression Classes and Interfaces
Unicode Support
 47
Examples
 47
Other Resources
 49
PHP
 50
Supported Metacharacters
 50
Pattern-Matching Functions
 54
Examples
 56
Other Resources
 58
Python
 58
Supported Metacharacters
 58
re Module Objects and Functions
 6
Unicode Support
 64
Examples
 65
Other Resources
 66
RUBY
 66
Supported Metacharacters
 67
Object-Oriented Interface
 70
Unicode Support
 75
Examples
 75
JavaScript
 77
Supported Metacharacters
 77
Pattern-Matching Methods and Objects
 
Examples
 82
Other Resources
 83

Contents |
vii
PCRE
 83
Supported Metacharacters
 84
PCRE API
 89
Unicode Support
 92
Examples
 92
Other Resources
 96
Apache Web Server
 96
Supported Metacharacters
 96
RewriteRule
 99
Matching Directives
 102
Examples
 102
vi Editor
 103
Supported Metacharacters
 103
Pattern Matching
 106
Examples
 108
Other Resources
 108
Shell Tools
 109
Supported Metacharacters
 109
Other Resources
 114
Index
115


1
Regular Expression Pock
Reference
)	
  ?    
 	  	     
3 	
  ?     	  3 ,3
?
 ,9 9
 ,       
    ?   
0

93
  	
  ?   ,
	  3  39
3 
 	    0

    3  , 
 	 
  
,        ,33 9
 

   3   C	,  ,,    ?  
 93 ,     3 	
   

 	     	 ,   
 	 	
 9?
0
 3
 ,       ,  )	  
 , 0  ,33 	
  ?    

	 ?
 	 
About This Book
    0   
 	,  	
 
?   , ,    
,	, 	  	
  ?    
 
,33 ,
    3 ,  3  ,9
          ?  	  
	 	
 ? 	3
3 
 3
3  ,      
 !  D
1"   E )	  )" /  , 0

 !  , 




2
|
Regular Expression Pocket Reference
Conventions Used in This Book
 

0  , 
 ,   	  
7

F  3  0 3  3  3  
F)G
Constant width
F    
	 ,  3     ?
 	

 


Constant width italic
F  ?   	
  
 , 0 	9	

 
	
Constant width bold
F  ? 3
  ,33    ?  
	

 

	
Acknowledgments
! " # #
(
	 
	 
4â€™()

5
   0  	
  ? >
 0 +

  
        ,   ,,
     , 
	 
	

  " 4*)"5  ?  ,	 
	
 ? ? ,,
1     G *	 0 ?,

  0
	 3 	 0  	 	    ,  9
   0      ?,

  
 

 
 â€™ 3    @	, 3  , 
   
 3  	  0      
,	   H

 
I , *   
 	   ,, 
 0 3 ! #
 

/ J
  #
 â€™
 @ +  < 0 K  .  )
/, * =	,
 3 

0 ,	
 "
 < 
G ) 
 ), @0  ", "    @  *



Introduction to Regexes and Pattern Matching
|
3
Introduction to Regexes and Pattern
Matching

	 
   ,   ,3  
3 
 ,  ,   , 
 3 ,  ,  3 9
C	,

3 
,  ,
3 ,
3


 

  ,  ,  C	,
 ,  ,      	,   C	  
, 
   ,  ,  
  H)? * ,  ,
*   	,I 0  3 ,33 3 , 9
 ,   3 C	,   	
  ? 0

G  , 
    
 
     ?  	9
 3 ,  ,   ,	
  3
3  
	
 ?
 	
,    ,  ?   
, 43 ,5   	
  ?  	

,    ,  ?  
	  	

L	 ,  ,  	
  3 3 ,   0
	
37
1.  
4
353 ,0
)	
  ?    
   	    
  ,  ,   , 0   
  
    	
  ?    3 , 
	4*)"%28M%2&5
2.   C	  
N	  , 0 3  3 3 ,  
      C	   3  3 ,  
3  3   
  
  
    3 ?9
3	3 
    ,    	,,  
3 ,  ,   	 ,  ,   

9 3 ,  , 

  , , 4 *)"
%-%M%-5
)	
  ?    ,    
    0 ,
   7 <3, #
	3  4<#5   13, # 	3 

4
|
Regular Expression Pocket Reference
41#5 <#     	 
 , 3     	   
1# 	,   , 	 
 	    C	 9
 +  1# 0
    0 7   
  
â€™+O
 	
<# ,3   , ,  ,   	   
	
  ?   ,   

 3 , 
 ,  , ,  ,  ? 3   3 ,
 <#      â€™   
 	
 
33 0 <#      
  3 9
C	,   > 3       
 
  4
foo|foobar5 3 ,  
  

,  	
 1 % ,    3    H


33 ,0I4*)"%--M%-$5
!"# 	
  
 1#  ,3   , 
3  
?   	    ,  
0  , 0 0    ? +  
  
    , ,   3 ,

   #    C	   
,     3 , 3 ?P 09
     
     
	   3 , 
 	          
 
 

  
1#

	

 
  0  ,     
   
C	 

  
 3 , 3        

 
    	,,	
 3 ,   	
 E% , 
  3    H  
3 3 ,   
C	   

0I4*)"%-M%-25
$%&# 	
â€™+O 1# " 0 3
 
    
 1#
0  ?,7  â€™+O   
0  , 

   
3 3 , # ? 3
   
9
 
cat|category
0	

3 ,

	

0
H, I 0 
      
 
4H, I5 3 ,       
    
 
4*)"%-M%-25

Introduction to Regexes and Pattern Matching
|
5
Regex Metacharacters, Modes, and Constructs
 3 ,  ,   3 C	, 0  9
 3   
 
   	
  ? ,	,
   3 ,33  ? /0  ?     
9
 
 3
3 
Character representations
*  3
3   ,	   , 9
 , 3 ,	
	4*)"%%-M%%85
â€™"
* 3
3    ,,    
alert backspace escape character form feed newline
carriage
return
horizontal
tab  
vertical
tab
,  , # ? 3

\n       
0
 ,  , 0,  		 

 G# 4% , 
5 	
,  33  ) 4%- , 
5    9
  3 	
 3  3
3  	
\b
 3  
backspace   0 	  4
0  H0I ,  ,    0 ,  ,5
#  3
3 
\b 3 
backspace   , 9
 , ,
  4   
 ,  ,  3 ,  
5 0	 
0
$(
\num
)  ,  , ,   09  9
 , 
 	3 # ? 3

\015\012 3 ,  
++)6G#C	,
)"*"(
\xnum+\x{num}+\unum+\Unum
) ,  , ,  ? ,3 
 	39
 #	9   
  ? 	3 ,   
   F, ,  , # ? 3

\x0D\x0A
3 , ++)6G#C	,
â€™(
\cchar
  ++ ,
 ,  , , 0
 
	 
         
0  	   	, 
charQ3 3
3     
 
0, 

6
|
Regular Expression Pocket Reference
  # ? 3

\cH 3 , 
9/  
++ , ,,  ,
Character classes and class-like constructs
â€™ 
  	  ,    ,  ,  , 9
 , ,
  3 ,  
 ,  ,   	    
0,  ,4*)"%%8M%85
#(
[...]"
[^...]
  , ,
 
[...]     ,  , ,
 
[^...]  

0 	  
  ,  ,   	   
 0   3 ,  ,  , ,
   
0  3 , 
,  , 
- 4 5 ,      ,  ,
# ? 3

[a-z] 3 ,   
0,  ++ 

 ,
	      
  ,  ,  
 
, 
 (",
.-
F	 

 3 ,   ,  , ?,  0
 /09
  3 , 3 		 

 ,   ,     
 
 3 , 0
 +  ,  , ,
  
3 ,:	 
â€™"(
\w+\d+\s+\W+\D+\S
33
     0 ,  ,
    , ,  , ,
   0 ,  , 
  

 ++  
 	3, ,  , 
	  	9
, /0  
   
 	3, ,  ,
	
  
 
, 
  F,  
 	3, 
  3
3   
0,    4
\s5
3 ,  ,  , 3  ,
 P 	,  4
\S5
3 ,  ,  ,  3  ,
  # ? 3

\d
3 ,  
  ,  ,    		 

 C	 9


[0-9]
$%&(
[:alnum:]
â€™+O   
 ,  , ,
    ,   	

 0 	
  ? ,  , ,
  4
 
 %5    ? 3

[:lower:] > 0  
[[:lower:]]C	 

[a-z]++
, 


Introduction to Regexes and Pattern Matching
|
7
*"++".(
\p{prop}+\P{prop}
 F,     ,
   ,  ,  
    ,	
   
   ,  ?
0  
,

   ,  ,(  , 9
 ,, 	,     
   	3 4  
 5
%   3  0 	,   /0 G  
/ 
/
     ,  ,   F, , 9
 , 3  3 3
3  C	   F,
  ? 0
Is  In # ? 3

\p{Ll}
3 , 
0,  
    F,9	 
 9
	 	, 
a Î±
*".	(
\X
* ,  F,   ,  , 

0   
	3  F,9,3 ,  ,    
  
\P{M}\p{M} # ? 3

\X 3 ,
Ã¨;  
0

 0,  ,
e'
!. 0 $%&
Class
Meaning
Alnum
Letters and digits.
Alpha
Letters.
Blank
Space or tab only.
Cntrl
Control characters.
Digit
Decimal digits.
Graph
Printing characters, excluding space.
Lower
Lowercase letters.
Print
Printing characters, including space.
Punct
Printing characters, excluding letters and digits.
Space
Whitespace.
Upper
Uppercase letters.
Xdigit
Hexadecimal digits.

8
|
Regular Expression Pocket Reference
!. 1 %""*"
Property
Meaning
\p{L}
Letters.
\p{Ll}
Lowercase letters.
\p{Lm}
Modifier letters.
\p{Lo}
Letters, other. These have no case, and are not considered
modifiers.
\p{Lt}
Titlecase letters.
\p{Lu}
Uppercase letters.
\p{C}
Control codes and characters not in other categories.
\p{Cc}
ASCII and Latin-1 control characters.
\p{Cf}
Nonvisible formatting characters.
\p{Cn}
Unassigned code points.
\p{Co}
Private use, such as company logos.
\p{Cs}
Surrogates.
\p{M}
Marks meant to combine with base characters, such as accen
marks.
\p{Mc}
Modification characters that take up their own space. Examp
include Ã’vowel signs.Ã“
\p{Me}
Marksthatencloseothercharacters,suchascircles,squares,an
diamonds.
\p{Mn}
Characters that modify other characters, such as accents and
umlauts.
\p{N}
Numeric characters.
\p{Nd}
Decimal digits in various scripts.
\p{Nl}
Letters that represent numbers, such as Roman numerals.
\p{No}
Superscripts, symbols, or nondigit characters representing
numbers.
\p{P}
Punctuation.
\p{Pc}
Connecting punctuation, such as an underscore.
\p{Pd}
Dashes and hyphens.
\p{Pe}
Closing punctuation complementing
\p{Ps}.
\p{Pi}
Initial punctuation, such as opening quotes.

Introduction to Regexes and Pattern Matching
|
9
Anchors and zero-width assertions
,   HJ90  I 3 ,   
	4*)"%8M%25
%2	(
^+\A
* ,       ?   , +
3	

 3
^ 3 ,     0
 3
3
3  	
\A 0, 3 , 
   
?
"2	(
$+\Z+\z
$ 3 ,        + 3	

 3
$
3 ,    0
 > 	
\Z 3 ,
         9 09

  
  3 , 3 3 3
3 
 
 
\z 0, 3 , 
     
 
0

\p{Pf}
Final punctuation, such as closing quotes.
\p{Po}
Other punctuation marks.
\p{Ps}
Opening punctuation, such as opening parentheses.
\p{S}
Symbols.
\p{Sc}
Currency.
\p{Sk}
Combining characters represented as individual characters.
\p{Sm}
Math symbols.
\p{So}
Other symbols.
\p{Z}
Separating characters with no visual representation.
\p{Zl}
Line separators.
\p{Zp}
Paragraph separators.
\p{Zs}
Space characters.
!. 1 %""*","-
Property
Meaning

10
|
Regular Expression Pocket Reference
%(
\G
+   3 ,
\G 3 ,   0 
	 3 ,  â€™      
   
3 ,
3"."(
\b+\B+\<+\>
> 	  3 ,  , 3 ,  
,  0  
0 ,  ,  ?   0 ,  ,
\b 
,  0 	  
,   
\B  ,  
909	  
,  3 3
3  9
    3 C	,   9   990
	 
\< 
\>
4"(
(?=...)+(?!...)
4."(
(?<=...)+(?<!...)
4" 
3 ,  
,    ? 0
 	  0	
 3 , 4
  5 0	
 
3 , 4  
  5 0	
    3 ,9
 4
5  0	
     3 ,
4  
5 # ? 3

foo(?=bar) 3 ,
foo  foobar 	 
food +3
3   
3

 ,	,  	  0  9
3

Comments and mode modiÃžers
* 3 ,  0  	
  ? 
 	
 ?4*)"%%M%%%-M%$5
"(
m
     
^  
$  3 , ?  09

0	
%	5"(
s
     
. 45  3 ,  

 ,  ,
,
	0
0	
â€™5"(
i
 
 
,  , 


Introduction to Regexes and Pattern Matching
|
11
5	"(
x


0  0 ,   ,33 0  	
 
?  0 ,   ,33 4  0
#   ?      
5     
	
 ?
""(
(?i)+(?-i)+(?mod:...)
F	 

 3 3 3    0  	
 
? 0
(?mod)  	 3     
 ,	 	?P
(?-mod)  	 3  
    ,	 	?P  
(Rmod7...) 
	 3    0  ,
    ,

  # ? 3

use (?i:perl) 3 ,
use
perl use Perl use PeRl,
â€™(
(?#...)"
#
+ 9 , 3
# ,        
 
 ,33 > 	  ,33  
(?#...)
,   3  0   	
  ?
 
  3 # ? 3

.{0,80}(?#Field limit
is 80 chars)  

0 	  3    	 0 	
0
.{0,80}
45(
\Q...\E
",  3 ,  , 0
\Q  
\E # ? 3

\Q(.*)\E 3 
\(\.\*\)
Grouping, capturing, conditionals, and control
 , ,  ?  	 	  , 	9
 	3 , , 
 	3 ,   C	  
	33 	 3 ,4*)"%M%25
â€™	"		(
(...)"
\1+\2+
  3 0 	,7 	   , 	9
 ? 3 ,   	  0   
, 	  
  	  	     	39
  ,	     3  

+  ,,     
 
  	3 , ,  
  
     3 3 , 0
\1 \2 , 

12
|
Regular Expression Pocket Reference
, 	
?

3 
  
 

 
 
3 ,

3
3 9,,3#? 3

\b(\w+)\b
\s+\1\b3 ,	
, 0	, 
the the
6	5(
(?:...)
.	  	? 
   
   C	 9
 	   , 	  	3 ,   		
 
,,   	 
 # ? 3

(?:foobar) 3 ,
foobar	 3 , , 		
#"(
(?<name>...)
3 , 	   	 0 , 	 ? 
 
, 
name # ? 3

Subject:(?<subject>.*)
, 	  ? 

0
Subject7   , 	 	
 , , 3
subject
 		(
(?>...)
? 3 , 0  	    , ,
    
    3 ,  
	 # ? 3

(?>[ab]*)\w\w3 ,
aabbcc	
aabbaa
 (
...|...


0  
 	?    
 (

0 ,, 33 , 	 	?  

     	    ,, 


	 0  	 0   
  	
\b(foo|bar)\b
3 ,0
foo bar
â€™"(
(?(if)then |else)

if  3
3 9 	  

   
,   , 	 	?   
 	

then  
else      	
  ?  9
 + 
if    	 
then   
 â€™0
else   
 # ? 3

(<)?foo(?(1)>|bar) 3 ,
<foo> 0

 
foobar
6"(
*+++?+{num+num }
  C	  3 0 3  3  ,9
	, 3    
   3  3 ,   3 
3   
 	 0

  , ,    	 3 ,
 ,    	,,    

 3 , #
? 3

(ab)+3 , 


ababababab

Regular Expression Cookbook
|
13
47(
*?++?+??+{num+num }?
G J C	  ,
 0 3  3  ,	, 3 
  
 /0 	
  C	  
 3  3 ,   0 3   
 # ? 3

(an)+?3 ,

an banana
(
*+++++?++{num+num }+
 C	    
  C	  ?,
   H
, I  3 ,  

0 
   ,9
 ,    	  	3 , # ? 3

(ab)++ab0

3 ,
ababababab
Unicode Support

*"
,  ,   	C	 	3  
,  ,   

  0
( 
 	  @, 	   
 
	3  
 ,  , F, C	 3  
     ,  , 3 	
  ?
3
3  0

  	  F, ,  ,
, 	  ?, %  ++ ,  , @ , 	
 F, ,  ,   0   
  3 ,  
9
 
   F, ,  ,  , 	 ,
	
,  , ,
     ,	,   ,  , 9
 , 3  

 F,9	 
 	  # ? 3

\w
33 ,
Ã¨; 0

 
e
Regular Expression Cookbook
 , ,  3
   ,33 	
 
?   L	 3     :	 3  3
	
" , ?    0      
3 ,           3 ,  	 , 
    0   :	3 	 3    3  
	0	, 
 0

7
/pattern/mode
s/pattern/replacement/mode

14
|
Regular Expression Pocket Reference
Recipes
Removing leading and trailing whitespace
s/^\s+//
s/\s+$//
* ,7S
foo barSSfooS
13 ,7
"foo bar"
Numbers from 0 to 999999
/^\d{1,6}$/
* ,7
42 678234
13 ,7
10,000
Valid HTML Hex code
/^#([a-fA-F0-9]){3}(([a-fA-F0-9]){3})?$/
* ,7
#fff #1a1 #996633
13 ,7
#ff FFFFFF
U.S. Social Security number
/^\d{3}-\d{2}-\d{4}$/
* ,7
078-05-1120
13 ,7
078051120 1234-12-12
U.S. zip code
/^\d{5}(-\d{4})?$/
* ,7
94941-3232 10024
13 ,7
949413232
U.S. currency
/^\$\(d{1,3}(\,\d{3})*|\d+)(\.\d{2})?$/
* ,7
$20 $15,000.01
13 ,7
$1.001 $.99

Regular Expression Cookbook
|
15
Match date: MM/DD/YYYY HH:MM:SS
/^\d\d\/\d\d\/\d\d\d\d \d\d:\d\d:\d\d$/
* ,7
04/30/1978 20:45:38
13 ,7
4/30/1978 20:45:38 4/30/78
Leading pathname
/^.*\//
* ,7
/usr/local/bin/apachectl
13 ,7
C:\\System\foo.exe
4*)"%&M%&5
Dotted Quad IP address
/^(\d|[01]?\d\d|2[0-4]\d|25[0-5])\.(\d|[01]?\d\d|2[0-4]
\d|25[0-5])\.
(\d|[01]?\d\d|2[0-4]\d|25[0-5])\.(\d|[01]?\d\d|2[0-4]
\d|25[0-5])$/
* ,7
127.0.0.1 224.22.5.110
13 ,7
127.1
4*)"%8M%8&5
MAC address
/^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$/
* ,7
01:23:45:67:89:ab
13 ,7
01:23:45 0123456789ab
Email
/^[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z_+])*@([0-9a-zA-Z][-\w]*
[0-9a-zA-Z]\.)+[a-zA-Z]{2,9}$/
* ,7


5+
tony@mail.
example.museum
13 ,7
.@example.com 5
 
4*)"5

16
|
Regular Expression Pocket Reference
 HTTP URL
/(https?):\/\/([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+
[a-zA-Z]{2,9})
(:\d{1,4})?([-\w\/#~:.?+=&%@~]*)/
* ,7
(22
 http://foo.com:8080/bar.html
13 ,7
(22
 (222
Perl 5.8

   ,   	
 9?   ,9
	,    	 0 3      , 0

  
 	    
 1# 3 ,  #  
?
     	
    1#   H+9
	,)?  * ,I
 , , 
  -8  	3  0  9
	 0

  	,  
 -%P    , 
 
 8 F,  	 0 	,  -$ 	 
  
J 	
 -8 *   	 0  
-2 
 
Supported Metacharacters

 	  3 ,  ,   3 C	, 
 
 
  	  
   
  3  	 ?  9
   , 3 ,  ,  H)? * ,  ,
* 	,I
!. 8 
Sequence
Meaning
\a
Alert (bell).
\b
Backspace; supported only in character class (outside of
character class matches a word boundary).
\e
Esc character,
x1B.
\n
Newline;
x0A on Unix and Windows,
x0D on Mac OS 9.
\r
Carriage return;
x0D on Unix and Windows,
x0A on Mac OS 9.

Perl 5.8 |
17
\f
Form feed,
x0C.
\t
Horizontal tab,
x09.
\octal
Character specified by a two- or three-digit octal code.
\xhex
Character specified by a one- or two-digit hexadecimal code
\x{hex}
Character specified by any hexadecimal code.
\cchar
Named control character.
\N{name}
A named character specified in theUnicode standardor listed i
PATH_TO_PERLLIB/unicode/Names.txt; requires
use
charnames ':full'.
!. 9 "5
Class
Meaning
[...]
A single character listed, or contained in a listed range.
[^...]
A single character not listed, and not contained within a liste
range.
[:class:]
POSIX-style character class valid only within a regex charac
class.
.
Any character except newline (unless single-line mode,
/s).
\C
One byte; however, this may corrupt a Unicode character
stream.
\X
Base character, followed by any number of Unicode combin
characters.
\w
Word character,
\p{IsWord}.
\W
Nonword character,
\P{IsWord}.
\d
Digit character,
\p{IsDigit}.
\D
Nondigit character,
\P{IsDigit}.
\s
Whitespace character,
\p{IsSpace}.
\S
Nonwhitespace character,
\P{IsSpace}.
\p{prop}
Character contained by given Unicode property, script, or bl
\P{prop}
Character not contained by given Unicode property, script, o
block.
!. 8 ,"-
Sequence
Meaning

18
|
Regular Expression Pocket Reference
!. : "75;"
Sequence
Meaning
^
Start of string, or, in multiline match mode (
/m), the position
after any newline.
\A
Start of search string, in all match modes.
$
Endofsearchstringorthepointbeforeastring-endingnewline
or, in multiline match mode (
/m), the position before any
newline.
\Z
Endofstring,orthepointbeforeastring-endingnewline,inany
match mode.
\z
End of string, in any match mode.
\G
Beginning of current search.
\b
Word boundary.
\B
Not-word-boundary.
(?=...)
Positive lookahead.
(?!...)
Negative lookahead.
(?<=...)
Positive lookbehind; fixed-length only.
(?<!...)
Negative lookbehind; fixed-length only.
!. < """
Modifier
Meaning
/i
Case-insensitive matching.
/m
^ and$ match next to embedded
\n.
/s
Dot (.) matches newline.
/x
Ignore whitespace, and allow comments (
#) in pattern.
/o
Compile pattern only once.
(?mode)
Turn listed modes (one or more of
xsmi) on for the rest of the
subexpression.
(?-mode)
Turn listed modes (one or more of
xsmi) off for the rest of the
subexpression.
(?mode:...)
Turn listed modes (one or more of
xsmi) on within
parentheses.
(?-mode:...)
Turn listed modes (one or more of
xsmi) off within
parentheses.

Perl 5.8 |
19
(?#...)
Treat substring as a comment.
#...
Treat rest of line as a comment in
/x mode.
\u
Force next character to uppercase.
\l
Force next character to lowercase.
\U
Force all following characters to uppercase.
\L
Force all following characters to lowercase.
\Q
Quote all following regex metacharacters.
\E
End a span started with
\U,\L, or\Q.
!. = 		+	+"+
"
Sequence
Meaning
(...)
Groupsubpatternandcapturesubmatchinto
\1,\2,...and$1,
$2,....
\n
Contains text matched by the
nth capture group.
(?:...)
Groups subpattern, but does not capture submatch.
(?>...)
Atomic grouping.
...|...
Try subpatterns in alternation.
*
Match 0 or more times.
+
Match 1 or more times.
?
Match 1 or 0 times.
{n}
Match exactly
n times.
{n,}
Match at least
n times.
{x,y}
Match at least
x times, but no more than
y times.
*?
Match 0 or more times, but as few times as possible.
+?
Match 1 or more times, but as few times as possible.
??
Match 0 or 1 times, but as few times as possible.
{n,}?
Match at least
n times, but as few times as possible.
{x,y}?
Match at least
x times, and no more than
y times, but as few
times as possible.
!. < ""","-
Modifier
Meaning

20
|
Regular Expression Pocket Reference
(?(COND)...|
...)
Match with if-then-else pattern, where
COND is an integer
referring to  a backreference, or a lookaround assertion.
(?(COND)...)
Match with if-then pattern.
(?{CODE})
Execute embedded Perl code.
(??{CODE})
Match regex from embedded Perl code.
!. > #;:0?
Modifier
Meaning
(?<name>...)or
(?'name'...)
Named capture group.
\k<name> or
\k'name'
Backreference to named capture group.
%+
Hash reference to the leftmost capture of a given name,
$+{foo}.
%-
Hash reference to an array of all captures of a given name,
$-{foo}[0].
\g{n} or\gn
Back reference to the
nth capture.
\g{-n} or\g-n
Relative backreference to the
nth previous capture.
(?n)
Recurse into the
nth capture buffer.
(?&NAME)
Recurse into the named capture buffer.
(?R)
Recursively call the entire expression.
(?(DEFINE)...)
Define a subexpression that can be recursed into.
(*FAIL)
Fail submatch, and force the engine to backtrack.
(*ACCEPT)
Force engine to accept the match, even if there is more patter
to check.
(*PRUNE)
Cause the match to fail from the current starting position.
(*MARK:name)
Marksandnamesthecurrentpositioninthestring.Theposition
is available in
$REGMARK.
(*SKIP:name)
Reject all matches up to the point where the named
MARK was
executed.
(*THEN)
When backtracked into, skip to the next alternation.
!. = 		+	+"+
","-
Sequence
Meaning

Perl 5.8 |
21
Regular Expression Operators

   	
9 	
  ?  
qr//
m//  
s///   0

   
split 	, " ,  
 ,,  	
  ?       	 	
   

  ,3

)	
  ?    
3 0  0 

 
	
	
, 
,
 
 
 	3,
9
0 ,,  ,/ 3? 3
7
qr#...#       m!...!        m{...}
s|...|...|    s[...][...]   s<...>/.../
 3 , 
3  
  4
/.../5 ( C	  

 
m7
/.../      #same as m/.../
F  
 C	    
3 	 
 
   
    ,	,
\N{name} \u \l \U \L \Q  
\E 13 

    
      
	
 ?
qr// (Quote Regex)
qr/PATTERN/ismxo
N	   ,3

PATTERN    	
  ?  	
 
	 3   	   
    3 ,  		 
  3   	
  ?     
 
 
3 ,34
 ,5
/ismxo 
,
(*COMMIT)
When backtracked into, cause the match to fail outright.
/p
Modemodifierthatenablesthe
${^PREMATCH},${MATCH},
and ${^POSTMATCH} variables.
\K
Exclude previously matched text from the final match.
!. > #;:0?,"-
Modifier
Meaning

22
|
Regular Expression Pocket Reference
m// (Matching)
m/PATTERN/imsxocg
* ,
PATTERN    	  + 
 ,? 	  
 
	 3 ,  , 	    

(1)   
	,,	
 3 , 
( )    
 3 , + , 
  ,?
	
1  	,, 
""   
	
/imsxo    
 3
3
/cg    
 3 , 3
/g  , 
  ,?
, 	  3 ,    3     	 3 , +

 ,?  
/g 3 , 	  

 3 ,   

 , 	
	 3  

 3 ,   

/g 3 , 0

   3 ,
        	
  3 ,  
,3
/cg3
s/// (Substitution)
s/PATTERN/REPLACEMENT/egimosx
* ,
PATTERN   	    
 ,  3 , ? 0
REPLACEMENT 	  	3  	,,
/imosx  
 
 3 3
/g 		  

 ,,	, 
PATTERN
" ,
/e, 	  
	 
REPLACEMENT 
,
split
split /PATTERN/, EXPR, LIMIT
split /PATTERN/, EXPR
split /PATTERN/
split
)	  
  	 		 3 , 
PATTERN  EXPR
+ LIMIT  ,
	  
 ,  	 		 
 LIMIT 3 ,     	3   3 ,   
	
m  	 0   
  
3 4
split m{PATTERN}5 
3 , 3   3 3  
m{}  
 & 
   9
3 ,  


Perl 5.8 |
23
Unicode Support

  	
9 	  F,  ,
	 	

	
\w \d \s 
\b3 C	,
 

0 ,	, ,  ,	 
, 
 
use
locale  7 , 9 4
i5 3
\L \l \U \u \w
 
\W

 	     F,  4  
 5
  0

   
9,, ,3  4  
 %5
,    3     
Is ? 	  
C	  @
, C	  
In ? 
   
,  3
,
,0 , 3
!. @ 5.
Variable
Meaning
$1, $2, ...
Captured submatches.
@-
$-[0]: offset of start of match.
$-[n]: offset of start of
$n.
@+
$+[0]: offset of end of match.
$+[n]: offset of end of
$n.
$+
Last parenthesized match.
$'
Text before match. Causes all regular expressions to be slow
Same assubstr($input, 0, $-[0]).
$&
Textofmatch.Causesallregularexpressionstobeslower.Sam
assubstr($input, $-[0], $+[0] - $-[0]).
$`
Text after match. Causes all regular expressions to be slower
Same assubstr($input, $+[0]).
$^N
Text of most recently closed capturing parentheses.
$*
If true,/m is assumed for all matches without a
/s.
$^R
The result value of the most recently executed code construc
within a pattern match.

24
|
Regular Expression Pocket Reference
Examples
!. 0? *"
Property
Equivalent
IsASCII
[\x00-\x7f]
IsAlnum
[\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}]
IsAlpha
[\p{Ll}\p{Lu}\p{Lt}\p{Lo}]
IsCntrl
\p{C}
IsDigit
\p{Nd}
IsGraph
[^\p{C}\p{Space}]
IsLower
\p{Ll}
IsPrint
\P{C}
IsPunct
\p{P}
IsSpace
[\t\n\f\r\p{Z}]
IsUppper
[\p{Lu}\p{Lt}]
IsWord
[_\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}]
IsXDigit
[0-9a-fA-F]
 0 %
# Find Spider-Man, Spiderman, SPIDER-MAN, etc.
my $dailybugle = "Spider-Man Menaces City!";
if ($dailybugle =~ m/spider[- ]?man/i) { do_something( ); }
 1 +	+"
# Match dates formatted like MM/DD/YYYY, MM-DD-YY,...
my $date  = "12/30/1969";
my $regex = qr!^(\d\d)[-/](\d\d)[-/](\d\d(?:\d\d)?)$!;
if ($date =~ $regex) {
  print "Day=  ", $1,
        " Month=", $2,
        " Year= ", $3;
}

Perl 5.8 |
25
Other Resources
T 		 
  G  > 

   
 4â€™()

5  
  
,
T 	 
	 +
 "  !
" # #
 4â€™()

5 ,   
  
 	
 
? 8M$2
T perlre   
, ,	3   0 3

	
 8 %.
# Convert <br> to <br /> for XHTML compliance
my $text = "Hello World! <br>";
$text =~ s#<br>#<br />#ig;
 9 )".
# urlify - turn URLs into HTML links
$text = "Check the web site, http://www.oreilly.com/catalog/
regexppr.";
$text =~
    s{
      \b                         # start at word boundary
      (                          # capture to $1
       (https?|telnet|gopher|file|wais|ftp) :
                                 # resource and colon
       [\w/#~:.?+=&%@!\-] +?     # one or more valid
                                 # characters
                                 # but take as little as
                                 # possible
      )
      (?=                        # lookahead
        [.:?\-] *                #  for possible punctuation
        (?: [^\w/#~:.?+=&%@!\-]  #  invalid character
          | $ )                  #  or end of string
      )
     }{<a href="$1">$1</a>}igox;

26
|
Regular Expression Pocket Reference
Java (java.util.regex)
!  %2 	, 	
  ? 0 	(
java.
util.regex  ,  
	    ,3  , 
  
 
  	   !   	(  0   9
  	(  ,  	    
 1# 3 , 
#   ?
     	
     
 1#
  H+	,  )?     * ,I
,,	
 ?!  %- %$
Supported Metacharacters
java.util.regex 	  3 ,  ,   3 9
C	, 
   
 %% 	  
 %- # ? 
   , 3 ,  ,  H)? * ,  ,
* 	,I
!. 00 A
Sequence
Meaning
\a
Alert (bell).
\b
Backspace, \
x08, supported only in character class.
\e
Esc character, \
x1B.
\n
Newline, \
x0A.
\r
Carriage return, \
x0D.
\f
Form feed, \
x0C.
\t
Horizontal tab, \
x09.
\0octal
Character specified by a one-, two-, or three-digit octal
code.
\xhex
Character specified by a two-digit hexadecimal code.
\uhex
Unicode character specified by a four-digit hexadecima
code.
\cchar
Named control character.

Java (java.util.regex)|
27
!. 01 A"5
Class
Meaning
[...]
A single character listed or contained in a listed range.
[^...]
A single character not liste and not contained within a
listed range.
.
Any character, except a line terminator (unless
DOTALL
mode).
\w
Word character,
[a-zA-Z0-9_].
\W
Nonword character,
[^a-zA-Z0-9_].
\d
Digit,[0-9].
\D
Nondigit,
[^0-9].
\s
Whitespace character,
[ \t\n\f\r\x0B].
\S
Nonwhitespace character,
[^ \t\n\f\r\x0B].
\p{prop}
Character contained by given POSIX character class,
Unicode property, or Unicode block.
\P{prop}
Character not contained by given POSIX character clas
Unicode property, or Unicode block.
!. 08 A"75;"
Sequence
Meaning
^
Start of string, or the point after any newline if in
MULTILINE mode.
\A
Beginning of string, in any match mode.
$
End of string, or the point before any newline if in
MULTILINE mode.
\Z
End of string, but before any final line terminator, in an
match mode.
\z
End of string, in any match mode.
\b
Word boundary.
\B
Not-word-boundary.
\G
Beginning of current search.

28
|
Regular Expression Pocket Reference
(?=...)
Positive lookahead.
(?!...)
Negative lookahead.
(?<=...)
Positive lookbehind.
(?<!...)
Negative lookbehind.
!. 09 A"""
Modifier/sequence
Mode character
Meaning
Pattern.UNIX_LINES
d
Treat\n as the only line
terminator.
Pattern.DOTALL
s
Dot (.) matches any character,
including a line terminator.
Pattern.MULTILINE
m
^and$matchnexttoembedded
line terminators.
Pattern.COMMENTS
x
Ignore whitespace, and allow
embedded comments starting
with#.
Pattern.CASE_
INSENSITIVE
i
Case-insensitive match for ASCII
characters.
Pattern.UNICODE_
CASE
u
Case-insensitive match for
Unicode characters.
Pattern.CANON_EQ
Unicode Ã’canonical equivalenceÃ“
mode, where characters, or
sequencesofabasecharacterand
combining characters with
identical visual representations,
are treated as equals.
(?mode)
Turnlistedmodes(oneormoreof
idmsux) on for the rest of the
subexpression.
(?-mode)
Turnlistedmodes(oneormoreof
idmsux) off for the rest of the
subexpression.
(?mode:...)
Turnlistedmodes(oneormoreof
idmsux) on within parentheses.
!. 08 A"75;","-
Sequence
Meaning

Java (java.util.regex)|
29
(?-mode:...)
Turnlistedmodes(oneormoreof
idmsux) off within parentheses.
#...
Treat rest of line as a comment in
/x mode.
!. 0: A		+	+"+
"
Sequence
Meaning
(...)
Group subpattern and capture submatch into
\1,\2,...
and$1,$2,....
\n
Contains text matched by the
nth capture group.
$n
In a replacement string, contains text matched by the
nth capture group.
(?:...)
Groups subpattern, but does not capture submatch.
(?>...)
Atomic grouping.
...|...
Try subpatterns in alternation.
*
Match 0 or more times.
+
Match 1 or more times.
?
Match 1 or 0 times.
{n}
Match exactly
n times.
{n,}
Match at least
n times.
{x,y}
Match at least
x times, but no more than
y times.
*?
Match 0 or more times, but as few times as possible.
+?
Match 1 or more times, but as few times as possible.
??
Match 0 or 1 times, but as few times as possible.
{n,}?
Match at least
n times, but as few times as possible.
{x,y}?
Matchatleast
xtimes,nomorethan
ytimes,andasfew
times as possible.
*+
Match 0 or more times, and never backtrack.
++
Match 1 or more times, and never backtrack.
!. 09 A""","-
Modifier/sequence
Mode character
Meaning

30
|
Regular Expression Pocket Reference
Regular Expression Classes and Interfaces
)	
  ? 	,   ,   0 3  ,
 
java.util.regex.Pattern
 
java.util.regex.MatcherP
 
?,
java.util.regex.PatternSyntaxExceptionP    
 ,
CharSequence  

 
String ,
  3
9
3 
CharSequence  ,    ,  9
3 , 3
Pattern :,   ,3
 	
 
?   ,    
   
CharSequence 
Matcher    	
 :,   ,     3 ,,	9
,   
Pattern  
    4   :,
3
3
CharSequence5
@ ,
   	
  ?
String 
 
   
,  
\n 40
5 ,3
\\n 0 	   !  
String
 
 	  	
 ?
java.lang.String
Description
* 3 ,
Methods
boolean matches(String regex)
)		
regex3 ,
String
String[ ] split(String regex)
)	        	 		 3 , 
regex
?+
Match 0 or 1 times, and never backtrack.
{n}+
Match at least
n times, and never backtrack.
{n,}+
Match at least
n times, and never backtrack.
{x,y}+
Match at least
x times, no more than
y times, and never
backtrack.
!. 0: A		+	+"+
","-
Sequence
Meaning

Java (java.util.regex)|
31
String [ ] split(String regex, int limit)
)	        	 		  
limit-1
3 ,
regex
String replaceFirst(String regex, String replacement)
)
 ,	3 ,
regex0
replacement
String replaceAll(String regex, String replacement)
)
 , 

	3 ,
regex0
replacement
java.util.regex.Pattern
Description
*
 	
 ? 
Methods
static Pattern compile(String regex)
	, 
Pattern:,3
regex
static Pattern compile(String regex, int flags)
	,  0
Pattern :, 	 
regex    â€™)(
393, 
flags
int flags( )
)	
Pattern(33
Matcher matcher(CharSequence input)
	,  
Matcher :,   0

 3 , 
Pattern
  
input
static boolean matches(String regex, CharSequence input)
)		
regex3 ,
input
String pattern( )
)		
 ?	, 
Pattern
static String quote(String text)
",   ?    	
  ?   0

 
3 ,
 


String[ ] split(CharSequence input)
)	        	 		 3 ,  
Pattern input
String[ ] split(CharSequence input, int limit)
)	        	 		  
limit
3 , 
regex

32
|
Regular Expression Pocket Reference
java.util.regex.Matcher
Description
*
   	
 	
  ?   3 ,    
3 ,	

Methods
Matcher appendReplacement(StringBuffer sb, String replacement)
	,3 , 
replacement sb
StringBuffer appendTail(StringBuffer sb)
	

03 ,
sb
int end( )
+?,  , 3 ,
int end(int group)
+?,  , ?, 	
group
boolean find( )
#?3 ,	
boolean find(int start)
#?3 , ,  ,
start
String group( )
?3 ,
Pattern
String group(int group)
?, 	, 		
group
int groupCount( )
1	3, 		
Pattern
boolean hasAnchoringBounds( )
)	 	  
Matcher 	  , 	   
 ,   3 ,     	   :	  
   
boolean hasTransparentBounds( )
	  
Matcher 	    	    
 	
  ,   	  ,	  , 	 < 	

 

boolean hitEnd( )
	   
  3 ,  3  ,    
 	 + ,      ,    3 	
3  	
 
3 ,

Java (java.util.regex)|
33
boolean lookingAt( )
	 3 , 	
boolean matches( )
)		
Pattern3 ,	
Pattern pattern( )
)	
Pattern:,	
Matcher
static String quoteReplacement(String string)
", , 
,  , 
	 	
 ,3
Matcher region(int start, int end)
)	  3 ,   	 		 3 ,   
0
start ,  ,  
end ,  , 3  9

int regionStart( )
)	  ,< 	
J
int regionEnd( )
)	       ,  < 	
  

 
String replaceAll(String replacement)
)
 ,3 ,0
replacement
String replaceFirst(String replacement)
)
 ,3 ,0
replacement
boolean requireEnd( )
)	 	   	,,   
  3 , 
   
  	 + ,      ,    3 	
3  , 	  
3 ,
Matcher reset( )
)  3 ,     ? 3 ,      9
	
Matcher reset(CharSequence input)
)3 ,00
input
int start( )
+?,  ,3 ,
int start(int group)
+?,  ,3 ,, 		
group
MatchResult toMatchResult( )
)	 
MatchResult:,3,3 ,
String toString( )
)	  3 ,	

34
|
Regular Expression Pocket Reference
Matcher useAnchorBounds(boolean b)
+ 	  
Matcher  	  , 	     ,
  3 ,          ,	
 , 	           
 ,< 	
	
Matcher usePattern(Pattern p)
)
 , 
Matcher(   	      3 ,
 
Matcher useTransparentBounds(boolean b)
+ 	  
Matcher  	    	   

 	   ,   	   ,	  ,
	< 	
 

java.util.regex.PatternSyntaxException
Description
0,   ? 	
 ? 
Methods
PatternSyntaxException(String desc, String regex, int index)
	,  ,,
 
String getDescription( )
)	,
int getIndex( )
)	?
String getMessage( )
)	  3	

  3  ,   ,9
 ? 	
  ?     ,  
0 
String getPattern( )
)	  	
  ?     0 
?,
java.lang.CharSequence
Description
<    ,   9
  ,,    	
  ?9
 3  
 C	,,  ,

Java (java.util.regex)|
35
Methods
char charAt(int index)
)	,  , J9 
index
int length( )
)		3,  ,C	,
CharSequence subSequence(int start, int end)
)	  	C	, ,
	 
start ?  
?,
	
end?
String toString( )
)	 
String C	,
Unicode Support
  ,  	 F, 2  
	
\w \W \d \D \s
 
\S 	 
 ++ L	 ,  	  C	 
 F9
, 
\p{L} \P{L} \p{Nd} \P{Nd} \p{Z}  
\P{Z}
 0 	  C	,Q
\b  
\BQ 	 
F,
# 	 F,    
,   
 
  ,  	 
     3 	,
  \p{Lu}   
\p{Lowercase_Letter} @
,  3 C	

In ?   	 
   3 3 0	  ,
 	,  ? 3

\p{InGreekExtended} 
\p{In_
Greek_Extended} \p{In Greek Extended}
Examples
 : %
import java.util.regex.*;
// Find Spider-Man, Spiderman, SPIDER-MAN, etc.
public class StringRegexTest {
  public static void main(String[] args) throws Exception {
    String dailyBugle = "Spider-Man Menaces City!";
    //regex must match entire string

36
|
Regular Expression Pocket Reference
    String regex = "(?i).*spider[- ]?man.*";
    if (dailyBugle.matches(regex)) {
      System.out.println("Matched: " + dailyBugle);
    }
  }
}
 < "	
// Match dates formatted like MM/DD/YYYY, MM-DD-YY,...
import java.util.regex.*;
public class MatchTest {
  public static void main(String[] args) throws Exception {
    String date = "12/30/1969";
    Pattern p =
      Pattern.compile("^(\\d\\d)[-/](\\d\\d)[-/](\\d\\d(?:\\d\
\d)?)$");
    Matcher m = p.matcher(date);
    if (m.find( )) {
      String month = m.group(1);
      String day   = m.group(2);
      String year  = m.group(3);
      System.out.printf("Found %s-%s-%s\n", year, month, day);
    }
  }
}
 = %.
// Example -. Simple substitution
// Convert <br> to <br /> for XHTML compliance
import java.util.regex.*;
public class SimpleSubstitutionTest {
  public static void main(String[] args) {
    String text = "Hello world. <br>";
 : %,"-

Java (java.util.regex)|
37
    Pattern p = Pattern.compile("<br>", Pattern.CASE_
INSENSITIVE);
    Matcher m = p.matcher(text);
    String result = m.replaceAll("<br />");
    System.out.println(result);
  }
}
 > )".
// urlify - turn URLs into HTML links
import java.util.regex.*;
public class Urlify {
  public static void main (String[  ] args) throws Exception {
   String text = "Check the web site, http://www.oreilly.com/
catalog/regexppr.";
   String regex =
        "\\b                         # start at word\n"
     +  "                            # boundary\n"
     +  "(                           # capture to $1\n"
     +  "(https?|telnet|gopher|file|wais|ftp) : \n"
     +  "                            # resource and colon\n"
     +  "[\\w/\\#~:.?+=&%@!\\-] +?   # one or more valid\n"
     +  "                            # characters\n"
     +  "                            # but take as little\n"
     +  "                            # as possible\n"
     +  ")\n"
     +  "(?=                         # lookahead\n"
     +  "[.:?\\-] *                  # for possible punc\n"
     +  "(?: [^\\w/\\#~:.?+=&%@!\\-] # invalid character\n"
     +  "| $ )                       # or end of string\n"
     +  ")";
    Pattern p = Pattern.compile(regex,
        Pattern.CASE_INSENSITIVE + Pattern.COMMENTS);
    Matcher m = p.matcher(text);
    String result = m.replaceAll("<a href=\"$1\">$1</a>");
    System.out.println(result);
  }
}
 = %.,"-

38
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Reference
|
Regular Expression Pocket Refere
|
Regular Expression Pocket Ref
|
Regular Expression Pocket R
|
Regular Expression Pock
|
Regular Expression Po
|
Regular Expression
|
Regular Express
|
Regular Expr
|
Regular E
|
Regula
|
Reg
|
R|





.NET and C#|
43
E(  0   ?
@""  

0  	
  ?9
 0	 , 3 ,
 
Regex
 ,
   
  ,   	
  ?  
  3 ,  
  , 3  

0   
3 ,0	,  
RegExp:,
Methods
public Regex(string pattern)
public Regex(string pattern+RegexOptions options)
)	  	
  ? :,   
pattern  
0 
33
options
public static void CompileToAssembly(RegexCompilationInfo[ ]
regexinfos+System.Reflection.AssemblyName assemblyname)
public static void CompileToAssembly(RegexCompilationInfo[ ]
regexinfos+System.Reflection.AssemblyName assemblyname)
public static void CompileToAssembly(RegexCompilationInfo[ ]
regexinfos+
System.Reflection.AssemblyName
assemblyname+
System.Reflection.Emit.CustomAttributeBuilder[ ] attributes)
public static void CompileToAssembly(RegexCompilationInfo[ ]
regexinfos+
System.Reflection.AssemblyName
assemblyname+
System.Reflection.Emit.CustomAttributeBuilder[
]
attributes+
string resourceFile)
3
   3
Regex :,     3
 
regexinfos    ,  	
  ?  ,
	
  3
 
 3 
assemblyname    
attributes
  	    3

resourceFile    3
 >	,
,
	 3

public static string Escape(string str)
)	   0  

 	
  ? 3 ,  ,
	,  ,4
#5 0 ,, 

44
|
Regular Expression Pocket Reference
public static bool IsMatch(string input+string pattern)
public
static
bool
IsMatch(string
input+ string
pattern+
RegexOptions options)
public bool IsMatch(string input)
public bool IsMatch(string input+int startat)
)	  	,,   
 3 ,     	 
input  ,    3 C	  	
 
?
pattern

options
  3
 

0

 
 3 3 4â€™)( 5 
startat
  3      
input   
3 ,
public static Match Match(string input+string pattern)
public
static
Match
Match(string
input+ string
pattern+
RegExpOptions options)
public Match Match(string input)
public Match Match(string input+int startat)
public Match Match(string input+int startat+int length)
3  
 3 ,     	 
input  
	 3   	  3 ,   
Match :,  ,
   3 C	  	
  ?
pattern 
options   3  

0   
 3
3 4â€™)( 5 
startat  
length   39
         	3  ,  ,
  33 ,,

public
static
MatchCollection
Matches(string
input+ string
pattern)
public
static
MatchCollection
Matches(string
input+ string
pattern+RegExpOptions options)
public MatchCollection Matches(string input)
public MatchCollection Matches(string input+int startat)
#  

 3 ,   	 
input   	 3 9
  	  3 ,   
MatchCollection :,  ,
   3 C	  	
  ?
pattern 
options   3  

0   
 3
3 4â€™)( 5 
startat   3   
 
input33 ,

.NET and C#|
45
public
static
string
Replace(string
input+
pattern+
MatchEvaluator evaluator)
public
static
string
Replace(string
input+
pattern+
MatchEvaluator evaluator+RegexOptions options)
public
static
string
Replace(string
input+ pattern+ string
replacement)
public
static
string
Replace(string
input+ pattern+ string
replacement+RegexOptions options)
public string Replace(string input+MatchEvaluator evaluator)
public string Replace(string input+ MatchEvaluator evaluator+
int count)
public string Replace(string input+ MatchEvaluator evaluator+
int count+int startat)
public string Replace(string input+string replacement)
public string Replace(string input+string replacement+int count)
public string Replace(string input+ string replacement+ int
count+int startat)
)	    0,  , 3 , 
input  
 , 0
  
	   
replacement    , 

   
MatchEvaluator :,  
replacement ,  , 
 ,,, 	?0
$n ${name} ?

options   3  

0   
 3 3
4â€™)( 5 
count   3 
3  	3 

 ,3 
startat   3     9

input 
 ,3
public static string[ ] Split(string input+string pattern)
public static string[ ] Split(string input+ string pattern+
RegexOptions options)
public static string[ ] Split(string input)
public static string[ ] Split(string input+int count)
public static string[ ] Split(string input+ int count+ int
startat)
)	          	 3 ,   ?
  + ,  3  
count    	
L	, ,  
input0
startat

46
|
Regular Expression Pocket Reference





























































vi Editor |
107
Substitution
:[addr1[,addr2]]s/pattern/replacement/[cgp]
)
 ,  ? 3 , 
pattern 0
replacement  

       +         ,	

  	 " ,   3    
 	3   	
 
? +
addr1  	
 		     

	3 4   3 , 
5   ,	 	
   
 
   
 ,  4 3 ,5 
addr2     

 	3    ,	 0,   ,  


0 

Substitution options
Address shortcuts
Option
Meaning
C
Prompt before each substitution.
g
Replace all matches on a line.
p
Print line after substitution.
Address
Meaning
.
Current line.
$
Last line in file.
%
Entire file.
't
Positiont.
/...[/]
Next line matched by pattern.
?...[?]
Previous line matched by pattern.
\/
Next line matched by the last search.
\?
Previous line matched by the last search.
\&
Next line where the last substitution pattern matched.

108 |
Regular Expression Pocket Reference
Examples
Other Resources
T 4	   "
 ? "  G G 3  

 ) 4â€™()

5   	  
   
	
 
 ,

T (22;;;	22
  â€™
 )    
0
I
	
 ? ?
 8: %
Find spider-man, Spider-Man, Spider Man
/[Ss]pider[- ][Mm]an
 8< %I
Find spider-man, Spider-Man, Spider Man, spiderman, SPIDER-
MAN, etc.
:set ic
/spider[- ]\=man
 8= %.
Globally convert <br> to <br /> for XHTML compliance.
:set ic
: % s/<br>/<br \/>/g
 8> %.I
Globally convert <br> to <br /> for XHTML compliance.
: % s/<br>/<br \/>/ig
 8@ )".I
Urlify: Turn URLs into HTML links
: % s/\(https\=:\/\/[a-z_.\\w\/\\#~:?+=&;%@!-]*\)/< a href="
\1">\1<\/a>/ic

Shell Tools|
109
Shell Tools
;
 "   
	
   
    F? 

 
 
? ,
;
	  <# 3 , 
	
0, 0  <#   1# 3 ,  
 0,  	    	  
"
	   1#
 #   ?
     	
   
H+	,)?  * ,I
 , , .1F
	
2   3   ,9
 
  ?P .1F
"   
  , 
,33 P   .1F
;
%   33 
 	  
?,
Supported Metacharacters
;
 	
  
" 	  3 ,  ,   3 9
C	, 
   
 $% 	  
 $- # ? 
   , 3 ,  ,  H)? * ,  ,
* 	,I
!. <0 %
Sequence
Meaning
Tool
\a
Alert (bell).
awk, sed
\b
Backspace;supportedonly
in character class.
awk
\f
Form feed.
awk, sed
\n
Newline (line feed).
awk, sed
\r
Carriage return.
awk, sed
\t
Horizontal tab.
awk, sed
\v
Vertical tab.
awk, sed
\ooctal
A character specified by a
one-, two-, or three-digit
octal code.
sed

110 |
Regular Expression Pocket Reference
\octal
A character specified by a
one-, two-, or three-digit
octal code.
awk
\xhex
A character specified by a
two-digit hexadecimal
code.
awk, sed
\ddecimal
A character specified by a
one, two, or three decimal
code.
awk, sed
\cchar
A named control character
(e.g.,\cC is Control-C).
awk, sed
\b
Backspace.
awk
\metacharacter
Escape the metacharacter,
so that it literally
represents itself.
awk, sed, egrep










