PyArmadillo: a streamlined linear algebra library for Python
Jason Rumengan †‡, Terry Yue Zhuo ⋄, Conrad Sanderson †∗
† Data61/CSIRO, Australia
‡ Queensland University of Technology, Australia
⋄University of New South Wales, Australia
∗Grifﬁth University, Australia
Abstract
While the Python language has extension frameworks such as NumPy and SciPy for providing functionality
involving numerical arrays and scientiﬁc computing, these frameworks can be cumbersome to use in
contrast to the well-established Matlab language.
The issues include: a focus on operations involving
multi-dimensional arrays rather than matrices, nested organisation of functions which increases code verbosity
(leading to reduced user productivity), and syntax that signiﬁcantly differs from Matlab. To address these
shortcomings, we propose PyArmadillo, a streamlined linear algebra library for Python, with an emphasis
on ease of use. PyArmadillo aims to provide a high-level syntax and functionality deliberately similar to
Matlab/Octave, allowing mathematical operations to be expressed in a familiar and natural manner. Objects
for matrices and cubes are provided, as well as over 200 associated functions for manipulating data stored
in the objects. Integer, ﬂoating point and complex numbers are supported. Various matrix factorisations are
provided through integration with LAPACK, or one of its high performance drop-in replacements such as
Intel MKL or OpenBLAS. PyArmadillo is open-source software, distributed under the Apache 2.0 license;
it can be obtained at https://pyarma.sourceforge.io or via the Python Package Index in precompiled form.
Background
Matlab is often considered to be the de facto standard for experimentation and prototyping involving numerical
linear algebra, particularly in educational settings [9]. This stems from its ease of use, allowing mathematical
expressions to be written in a concise and natural manner, especially in comparison to directly using low-level
libraries such as LAPACK [2]. However, Matlab is proprietary and has license-based restrictions on use. This
in turn may impose signiﬁcant ﬁnancial costs dependent on the maximum number of allowed users, and/or
application area (eg. industry, academia), and/or proprietary add-on toolboxes. Furthermore, due to its focus
on prototyping and linear algebra, Matlab is less suitable for the development of general programs and/or
integration into larger systems. Octave, an open-source analog of Matlab, ameliorates the licensing costs and
restrictions associated with Matlab. However, Octave still shares the remaining downsides and may not be
fully compatible with Matlab; its associated add-on toolboxes tend to be less developed than their proprietary
counterparts.
Recently the Python language has gained traction for scientiﬁc computing through add-on frameworks such
as NumPy [5] and SciPy [13].
In contrast to Matlab, Python is suitable for general programming and is
available under a permissive open-source license. However, for scientists and engineers looking to transition
from Matlab to Python, the programming interface provided by the NumPy and SciPy frameworks tends
to be verbose and cumbersome to use in comparison to Matlab. From a linear algebra point of view, these
frameworks have issues which include: (i) a focus on operations involving multi-dimensional arrays rather
than matrices, (ii) nested organisation of functions which increases code verbosity (which in turn can lead to
reduced user productivity), and (iii) syntax that notably differs from Matlab.
With the aim to facilitate the transition from Matlab to the Python ecosystem, we have devised and
implemented the PyArmadillo library, which addresses the above issues. Speciﬁcally, PyArmadillo primarily
focuses on linear algebra (operations on matrices), has all functions accessible in one ﬂat structure, and
provides an API that closely follows Matlab wherever possible.
arXiv:2104.11120v2  [cs.MS]  28 Apr 2021

Functionality
PyArmadillo provides matrix objects for several distinct element types: integers, single- and double-precision
ﬂoating point numbers, as well as complex numbers. In addition to matrices, PyArmadillo also has support
for cubes (3 dimensional arrays), where each cube can be treated as an ordered set of matrices. PyArmadillo
matrices and cubes are convertible to/from NumPy arrays, allowing users to tap into the wider Python data
science ecosystem, including plotting tools such as Matplotlib [6].
Over 200 functions are provided for manipulating data stored in the objects, covering the following areas:
fundamental arithmetic operations, contiguous and non-contiguous submatrix views, diagonal views,
element-wise functions, scalar/vector/matrix valued functions of matrices, statistics, signal processing,
storage of matrices in ﬁles, matrix decompositions/factorisations, matrix inverses, and equation solvers.
An overview of the available functionality in PyArmadillo (as of version 0.500) is given in Tables 1 to 8. Table 1
brieﬂy describes the member functions and variables of the main matrix class; Table 2 lists the main subset of
overloaded Python operators; Table 3 outlines matrix decompositions and equation solvers; Table 4 overviews
functions for generating vectors with various sequences; Table 5 lists the main forms of general functions of
matrices; Table 6 lists various element-wise functions of matrices; Table 7 summarises the set of functions and
classes focused on statistics; Table 8 lists functions speciﬁc to signal and image processing. Lastly, Table 9
provides examples of Matlab/Octave syntax and conceptually corresponding PyArmadillo syntax. See the
online documentation at https://pyarma.sourceforge.io/docs.html for more details.
Figure 1 shows a short example program that demonstrates the streamlined nature of PyArmadillo syntax and
draws comparison with NumPy syntax. To generate a matrix with all elements set to one, PyArmadillo simply
requires ones(m, n), where m and n indicate the number of rows and columns, respectively. In contrast, NumPy
requires the use of double brackets in ones((m, n)), which is non-intuitive and notably differs from Matlab.
To generate a matrix ﬁlled with values from a uniform random distribution, PyArmadillo has the randu(m,n)
function. In comparison, NumPy uses np.random.rand(m, n), which shows the nested organisation of functions,
and reveals an inconsistency in the speciﬁcation of the matrix size: use of single brackets versus double
brackets. To multiply two matrices, PyArmadillo uses the standard * operator, as per Matlab. In contrast,
NumPy uses the non-intuitive @ character for matrix multiplication, and uses the * operator for element-wise
multiplication, which in turn demonstrates a focus on arrays rather than matrices.
# PyArmadillo example
import pyarma as pa
A = pa.ones(4, 5)
B = pa.randu(4, 5)
C = A * B.t()
C.print()
# corresponding NumPy code
import numpy as np
A = np.ones((4,5))
B = np.random.rand(4, 5)
C = A @ B.T
print(C)
Figure 1: A short example program using PyArmadillo, and corresponding NumPy implementation.
Implementation
PyArmadillo relies on Armadillo [10, 11] for the underlying C++ implementation of matrix objects and
associated functions, as well as on pybind11 [8] for interfacing C++ and Python. Due to its expressiveness
and relatively straightforward use, pybind11 was selected over other interfacing approaches such as
Boost.Python [1] and manually writing C++ extensions for Python. Armadillo was selected due to its API
having close similarity to Matlab, as well as being battle-tested in the context of RcppArmadillo, a widely used
bridge between the R language and C++ [4]. In turn, Armadillo interfaces with low-level routines in BLAS
and LAPACK [2], where BLAS is used for matrix multiplication, and LAPACK is used for various matrix
decompositions/factorisations and equation solvers. As the low-level routines in BLAS and LAPACK are
considered as a de facto standard for numerical linear algebra, it is possible to use high performance drop-in
replacements such as Intel MKL [7] and OpenBLAS [14]. PyArmadillo is open-source software available under
the permissive Apache License 2.0 [3], making it useful in both open-source and proprietary (closed-source)
contexts [12].

Table 1: Subset of member functions and variables of the mat class, the main matrix object in PyArmadillo.
Function/Variable
Description
.n rows
number of rows (read only)
.n cols
number of columns (read only)
.n elem
total number of elements (read only)
[i]
access the i-th element, assuming a column-by-column layout
[r, c]
access the element at row r and column c
.in range(i)
test whether the i-th element can be accessed
.in range(r, c)
test whether the element at row r and column c can be accessed
.reset()
set the number of elements to zero
.copy size(A)
set the size to be the same as matrix A
.set size(n rows, n cols)
change size to speciﬁed dimensions, without preserving data (fast)
.reshape(n rows, n cols)
change size to speciﬁed dimensions, with elements copied column-wise (slow)
.resize(n rows, n cols)
change size to speciﬁed dimensions, while preserving elements & their layout (slow)
.ones(n rows, n cols)
set all elements to one, optionally ﬁrst resizing to speciﬁed dimensions
.zeros(n rows, n cols)
as above, but set all elements to zero
.randu(n rows, n cols)
as above, but set elements to uniformly distributed random values in [0,1] interval
.randn(n rows, n cols)
as above, but use a Gaussian/normal distribution with µ = 0 and σ = 1
.ﬁll(k)
set all elements to be equal to k
.for each(lambda val : ...)
for each element, pass its value to a lambda function
.is empty()
test whether there are no elements
.is ﬁnite()
test whether all elements are ﬁnite
.is square()
test whether the matrix is square
.is vec()
test whether the matrix is a vector
.is sorted()
test whether the matrix is sorted
.has inf()
test whether any element is ±∞
.has nan()
test whether any element is not-a-number
iter(A)
iterator of matrix A
iterator(A, i, j)
iterator of matrix A from the i-th element to the j-th
col iter(A, i, j)
iterator of matrix A from the i-th column to the j-th
row iter(A, i, j)
iterator of matrix A from the i-th row to the j-th
.print(header)
print elements, with an optional text header
.save(name, format)
store matrix in the speciﬁed ﬁle, optionally specifying storage format
.load(name, format)
retrieve matrix from the speciﬁed ﬁle, optionally specifying format
[diag, k]
read/write access to k-th diagonal
[i, :]
read/write access to row i
[:, i]
read/write access to column i
[a:b, :]
read/write access to submatrix, spanning from row a to row b
[:, c:d]
read/write access to submatrix, spanning from column c to column d
[a:b, c:d]
read/write access to submatrix spanning rows a to b and columns c to d
[p, q, size(A)]
read/write access to submatrix starting at row p and col q with size same as matrix A
[vector of row indices, :]
read/write access to rows corresponding to the speciﬁed indices
[:, vector of col indices]
read/write access to columns corresponding to the speciﬁed indices
[vector of indices]
read/write access to matrix elements corresponding to the speciﬁed indices
.swap rows(p, q)
swap the contents of speciﬁed rows
.swap cols(p, q)
swap the contents of speciﬁed columns
.insert rows(row, X)
insert a copy of X at the speciﬁed row
.insert cols(col, X)
insert a copy of X at the speciﬁed column
.shed rows(ﬁrst row, last row)
remove the speciﬁed range of rows
.shed cols(ﬁrst col, last col)
remove the speciﬁed range of columns
.min()
return minimum value
.max()
return maximum value
.index min()
return index of minimum value
.index max()
return index of maximum value

Table 2: Subset of matrix operations involving overloaded Python operators.
Operation
Description
A −k
subtract scalar k from all elements in matrix A
k −A
subtract each element in matrix A from scalar k
A + k,
k + A
add scalar k to all elements in matrix A
A ∗k,
k ∗A
multiply matrix A by scalar k
A + B
add matrices A and B
A −B
subtract matrix B from A
A ∗B
matrix multiplication of A and B
A @ B
element-wise multiplication of matrices A and B
A / B
element-wise division of matrix A by matrix B
A == B
element-wise equality evaluation between matrices A and B
[caveat: use approx equal() to test whether all corresponding elements are approximately equal]
A != B
element-wise non-equality evaluation between matrices A and B
A >= B
element-wise evaluation whether elements in matrix A are greater-than-or-equal to elements in B
A <= B
element-wise evaluation whether elements in matrix A are less-than-or-equal to elements in B
A >
B
element-wise evaluation whether elements in matrix A are greater than elements in B
A <
B
element-wise evaluation whether elements in matrix A are less than elements in B
Table 3: Subset of functions for matrix decompositions, factorisations, inverses and equation solvers.
Function
Description
chol(X)
Cholesky decomposition of symmetric positive-deﬁnite matrix X
eig sym(X)
eigen decomposition of a symmetric/hermitian matrix X
eig gen(X)
eigen decomposition of a general (non-symmetric/non-hermitian) square matrix X
eig pair(A, B)
eigen decomposition for pair of general square matrices A and B
inv(X)
inverse of a square matrix X
inv sympd(X)
inverse of symmetric positive deﬁnite matrix X
lu(L, U, P, X)
lower-upper decomposition of X, such that PX = LU and X = P’LU
null(X)
orthonormal basis of the null space of matrix X
orth(X)
orthonormal basis of the range space of matrix X
pinv(X)
Moore-Penrose pseudo-inverse of a non-square matrix X
qr(Q, R, X)
QR decomposition of X, such that QR = X
qr econ(Q, R, X)
economical QR decomposition
qz(AA, BB, Q, Z, A, B)
generalised Schur decomposition for pair of general square matrices A and B
schur(X)
Schur decomposition of square matrix X
solve(A, B)
solve a system of linear equations AX = B, where X is unknown
svd(X)
singular value decomposition of X
svd econ(X)
economical singular value decomposition of X
syl(X)
Sylvester equation solver
Table 4: Subset of functions for generating vectors and matrices, showing their main form.
Function
Description
linspace(start, end, n)
vector with n elements, linearly spaced from start up to (and including) end
logspace(A, B, n)
vector with n elements, logarithmically spaced from 10A up to (and including) 10B
regspace(start, ∆, end)
vector with regularly spaced elements: [ start, (start + ∆), (start + 2∆), ..., (start + M∆) ],
where M = ﬂoor((end - start)/∆), so that (start + M∆) ≤end
randperm(n, m)
vector with m elements, with random integers sampled without replacement from 0 to n-1
randu(n rows, n cols)
matrix with random values from a uniform distribution in the [0,1] interval
randn(n rows, n cols)
matrix with random values from a normal/Gaussian distribution with µ = 0 and σ = 1
zeros(n rows, n cols)
matrix with all elements set to zero
ones(n rows, n cols)
matrix with all elements set to one

Table 5: Subset of general functions of matrices, showing their main form.
For functions with the dim
argument, dim = 0 indicates traverse across rows (ie. operate on all elements in a column), while dim = 1 indicates
traverse across columns (ie. operate on all elements in a row); by default dim = 0.
Function
Description
abs(A)
obtain element-wise magnitude of each element of matrix A
accu(A)
accumulate (sum) all elements of matrix A into a scalar
all(A,dim)
return a vector indicating whether all elements in each column or row of A are non-zero
any(A,dim)
return a vector indicating whether any element in each column or row of A is non-zero
approx equal(A, B, met, tol)
return a bool indicating whether all corresponding elements in A and B are approx. equal
as scalar(expression)
evaluate an expression that results in a 1×1 matrix, then convert the result to a pure scalar
clamp(A, min, max)
create a copy of matrix A with each element clamped to be between min and max
cond(A)
condition number of matrix A (the ratio of the largest singular value to the smallest)
conj(C)
complex conjugate of complex matrix C
cross(A, B)
cross product of A and B, assuming they are 3 dimensional vectors
cumprod(A, dim)
cumulative product of elements in each column or row of matrix A
cumsum(A, dim)
cumulative sum of elements in each column or row of matrix A
det(A)
determinant of square matrix A
diagmat(A, k)
interpret matrix A as a diagonal matrix (elements not on k-th diagonal are treated as zero)
diagvec(A, k)
extract the k-th diagonal from matrix A (default: k = 0)
diff(A, k, dim)
differences between elements in each column or each row of A; k = number of recursions
dot(A,B)
dot product of A and B, assuming they are vectors with equal number of elements
eps(A)
distance of each element of A to next largest representable ﬂoating point number
expmat(A)
matrix exponential of square matrix A
ﬁnd(A)
ﬁnd indices of non-zero elements of A; ﬁnd(A > k) ﬁnds indices of elements greater than k
ﬂiplr(A)
copy A with the order of the columns reversed
ﬂipud(A)
copy A with the order of the rows reversed
imag(C)
extract the imaginary part of complex matrix C
ind2sub(size(A), index)
convert a linear index (or vector of indices) to subscript notation, using the size of matrix A
inplace trans(A)
in-place / in-situ transpose of matrix A
join rows(A, B)
append each row of B to its respective row of A
join cols(A, B)
append each column of B to its respective column of A
kron(A, B)
Kronecker tensor product of A and B
log det(x, sign, A)
log determinant of square matrix A, such that the determinant is exp(x)*sign
logmat(A)
complex matrix logarithm of square matrix A
min(A, dim)
ﬁnd the minimum in each column or row of matrix A
max(A, dim)
ﬁnd the maximum in each column or row of matrix A
nonzeros(A)
return a column vector containing the non-zero values of matrix A
norm(A,p)
p-norm of matrix A, with p = 1, 2, · · ·, or p = “-inf”, “inf”, “fro”
normalise(A, p, dim)
return the normalised version of A, with each column or row normalised to unit p-norm
prod(A, dim)
product of elements in each column or row of matrix A
rank(A)
rank of matrix A
rcond(A)
estimate the reciprocal of the condition number of square matrix A
real(C)
extract the real part of complex matrix C
repmat(A, p, q)
replicate matrix A in a block-like fashion, resulting in p by q blocks of matrix A
reshape(A, r, c)
create matrix with r rows and c columns by copying elements from A column-wise
resize(A, r, c)
create matrix with r rows and c columns by copying elements and their layout from A
shift(A, n, dim)
copy matrix A with the elements shifted by n positions in each column or row
shufﬂe(A, dim)
copy matrix A with elements shufﬂed in each column or row
size(A)
obtain the dimensions of matrix A
sort(A, direction, dim)
copy A with elements sorted (in ascending or descending direction) in each column or row
sort index(A, direction)
generate a vector of indices describing the sorted order of the elements in matrix A
sqrtmat(A)
complex square root of square matrix A
sum(A, dim)
sum of elements in each column or row of matrix A
sub2ind(size(A), row, col)
convert subscript notation (row,col) to a linear index, using the size of matrix A
symmatu(A) / symmatl(A)
generate symmetric matrix from square matrix A
strans(C)
simple matrix transpose of complex matrix C, without taking the conjugate
trans(A)
transpose of matrix A (for complex matrices, conjugate is taken); use A.t() for shorter form
trace(A)
sum of the elements on the main diagonal of matrix A
trapz(A, B, dim)
trapezoidal integral of B with respect to spacing in A, in each column or row of B
trimatu(A) / trimatl(A)
generate triangular matrix from square matrix A
unique(A)
return the unique elements of A, sorted in ascending order
vectorise(A, dim)
generate a column or row vector from matrix A

Table 6: Element-wise functions: matrix B is produced by applying a function to each element of matrix A.
Function
Description
exp(A)
base-e exponential: ex
exp2(A)
base-2 exponential: 2x
exp10(A)
base-10 exponential: 10x
trunc exp(A)
base-e exponential, truncated to avoid ∞
log(A)
natural log: loge(x)
log2(A)
base-2 log: log2(x)
log10(A)
base-10 log: log10(x)
trunc log(A)
natural log, truncated to avoid ±∞
pow(A, p)
raise to the power of p: xp
square(A)
square: x2
sqrt(A)
square root: √x
ﬂoor(A)
largest integral value that is not greater than the input value
ceil(A)
smallest integral value that is not less than the input value
round(A)
round to nearest integer, with halfway cases rounded away from zero
trunc(A)
round to nearest integer, towards zero
erf(A)
error function
erfc(A)
complementary error function
lgamma(A)
natural log of the gamma function
sign(A)
signum function; for each element a in A, the corresponding element b in B is:
b =
( −1
if
a < 0
0
if
a = 0
+1
if
a > 0
trig(A)
trignometric function, where trig is one of:
cos, acos, cosh, acosh, sin, asin, sinh, asinh, tan, atan, tanh, atanh
Table 7: Subset of functions for statistics, showing their main form. For functions with the dim argument,
dim = 0 indicates traverse across rows (ie. operate on all elements in a column), while dim = 1 indicates traverse
across columns (ie. operate on all elements in a row); by default dim = 0.
Function/Class
Description
cor(A, B)
generate matrix of correlation coefﬁcients between variables in A and B
cov(A, B)
generate matrix of covariances between variables in A and B
hist(A, centers, dim)
generate matrix of histogram counts for each column or row of A, using given bin centers
histc(A, edges, dim)
generate matrix of histogram counts for each column or row of A, using given bin edges
kmeans(means, A, k, ...)
cluster column vectors in matrix A into k disjoint sets, storing the set centers in means
princomp(A)
principal component analysis of matrix A
running stat
class for running statistics of a continuously sampled one dimensional signal
running stat vec
class for running statistics of a continuously sampled multi-dimensional signal
mean(A, dim)
ﬁnd the mean in each column or row of matrix A
median(A, dim)
ﬁnd the median in each column or row of matrix A
stddev(A, norm type, dim)
ﬁnd the standard deviation in each column or row of A, using speciﬁed normalisation
var(A, norm type, dim)
ﬁnd the variance in each column or row of matrix A, using speciﬁed normalisation
Table 8: Subset of functions for signal and image processing, showing their main form.
Function/Class
Description
conv(A, B)
1D convolution of vectors A and B
conv2(A, B)
2D convolution of matrices A and B
fft(A, n)
fast Fourier transform of vector A, with transform length n
ifft(C, n)
inverse fast Fourier transform of complex vector C, with transform length n
fft2(A, rows, cols)
fast Fourier transform of matrix A, with transform size of rows and cols
ifft2(C, rows, cols)
inverse fast Fourier transform of complex matrix C, with transform size of rows and cols
interp1(X, Y, XI, YI)
given a 1D function speciﬁed in vectors X (locations) and Y (values),
generate vector YI containing interpolated values at given locations XI
interp2(X, Y, Z, XI, YI, ZI)
given a 2D function speciﬁed by matrix Z with coordinates given by vectors X and Y,
generate matrix ZI containing interpolated values at coordinates given by vectors XI and YI

Table 9: Examples of Matlab/Octave syntax and conceptually corresponding PyArmadillo syntax. Note that
for submatrix access the exact conversion from Matlab/Octave to PyArmadillo syntax will require taking into
account that indexing starts at 0.
Matlab & Octave
PyArmadillo
Notes
A(1, 1)
A[0, 0]
indexing in PyArmadillo starts at 0, following Python convention
A(k, k)
A[k-1, k-1]
size(A,1)
A.n rows
member variables are read only
size(A,2)
A.n cols
size(Q,3)
Q.n slices
Q is a cube (3D array)
numel(A)
A.n elem
.n elem indicates the total number of elements
A(:, k)
A[:, k]
read/write access to a speciﬁc column
A(k, :)
A[k, :]
read/write access to a speciﬁc row
A(:, p:q)
A[:, p:q]
read/write access to a submatrix spanning the speciﬁed cols
A(p:q, :)
A[p:q, :]
read/write access to a submatrix spanning the speciﬁed rows
A(p:q, r:s)
A[p:q, r:s]
Q(p:q, r:s, t:u)
Q[p:q, r:s, t:u]
Q is a cube (3D array)
Q(:, :, k)
Q[:, :, k]
access one slice
Q(:, :, k)
Q[single slice, k]
access one slice, with the slice provided as a matrix
A ′
A.t() or trans(A)
transpose (for complex matrices the conjugate is taken)
A.′
A.st() or strans(A)
simple transpose (for complex matrices the conjugate is not taken)
A = zeros(size(A))
A.zeros()
set all elements to zero
A = ones(size(A))
A.ones()
set all elements to one
A = zeros(k)
A = zeros(k, k)
create a matrix with elements set to zero
A = ones(k)
A = ones(k, k)
create a matrix with elements set to one
C = complex(A,B)
C = cx mat(A,B)
construct a complex matrix from two real matrices
A ∗B
A ∗B
∗indicates matrix multiplication
A .∗B
A @ B
@ indicates element-wise multiplication
A ./ B
A / B
/ indicates element-wise division
A \ B
solve(A,B)
solve a system of linear equations
A = A + 1
A += 1
A = A −1
A −= 1
A = [ 1 2;
A = mat([ [ 1, 2 ],
3 4; ]
[ 3, 4 ] ])
X = [ A B ]
X = join rows(A,B)
X = [ A; B ]
X = join cols(A,B)
A
A.print(“A:”)
print the entire contents of A
save -ascii ‘A.txt’ A
A.save(“A.txt”, raw ascii)
Matlab/Octave matrices saved as ascii text are readable
load -ascii ‘A.txt’
A.load(“A.txt”, raw ascii)
by PyArmadillo (and vice-versa)
A = rand(2,3)
A = randu(2,3)
randu generates uniformly distributed random numbers
B = randn(4,5)
B = randn(4,5)

Acknowledgements
We would like to thank our colleagues at Data61/CSIRO (Dan Pagendam, Dan Gladish, Andrew Bolt, Piotr Szul) for
providing feedback and initial testing.
References
[1] D. Abrahams and R. W. Grosse-Kunstleve. Building hybrid systems with Boost.Python. C/C++ Users Journal, 21(7),
2003.
[2] E. Anderson, Z. Bai, C. Bischof, S. Blackford, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling,
A. McKenney, and D. Sorensen. LAPACK Users’ Guide. SIAM, 1999.
[3] Apache Software Foundation. Apache license 2.0, 2004. http://www.apache.org/licenses/LICENSE-2.0.
[4] D. Eddelbuettel and C. Sanderson.
RcppArmadillo: Accelerating R with high-performance C++ linear algebra.
Computational Statistics & Data Analysis, 71:1054–1063, 2014.
[5] C. R. Harris, K. J. Millman, S. J. van der Walt, R. Gommers, P. Virtanen, D. Cournapeau, E. Wieser, et al. Array
programming with NumPy. Nature, 585:357–362, 2020.
[6] J. D. Hunter. Matplotlib: A 2D graphics environment. Computing in Science & Engineering, 9(3):90–95, 2007.
[7] Intel. Math Kernel Library (MKL), 2016. http://software.intel.com/en-us/intel-mkl/.
[8] W. Jakob, J. Rhinelander, and D. Moldovan.
pybind11 – seamless operability between C++11 and Python, 2017.
https://github.com/pybind/pybind11.
[9] S. Linge and H. P. Langtangen. Programming for Computations - MATLAB/Octave. Springer, 2016.
[10] C. Sanderson and R. Curtin. Armadillo: a template-based C++ library for linear algebra. Journal of Open Source
Software, 1:26, 2016.
[11] C. Sanderson and R. Curtin. An adaptive solver for systems of linear equations. In International Conference on Signal
Processing and Communication Systems, 2020. DOI: 10.1109/ICSPCS50536.2020.9309998.
[12] A. St. Laurent. Understanding Open Source and Free Software Licensing. O’Reilly Media, 2008.
[13] P. Virtanen, R. Gommers, T. E. Oliphant, M. Haberland, T. Reddy, D. Cournapeau, E. Burovski, et al.
SciPy 1.0:
fundamental algorithms for scientiﬁc computing in Python. Nature Methods, 17:261–272, 2020.
[14] Z. Xianyi, W. Qian, and W. Saar. OpenBLAS: An optimized BLAS library, 2016. http://www.openblas.net/.

