Compsci 201
Recursion, DNA-Link Preview
2/28/2020
Compsci 201, Spring 2020
1
Susan Rodger
February 28, 2020

Announcements
• Exam 1 – Ask for Regrade in Gradescope by March 1
• Regrades assignments
• if you pushed to github but did not resubmit in 
gradescope, fill out regrade form and we can look 
at your github if you have not modified it!
• Assignment P3 last chance today on time
• Assignment P4 out today with a Part1 and Part2
• Part 1 due March 5, Part 2 due March 19
• APT 4 due Tuesday!
• APT Quiz 1 – now on regular APT page
• Not for credit, but finish if you didn’t
2/28/2020
Compsci 201, Spring 2020
2

N is for …
• new
• Allocating memory from the heap
• null
• Value when nothing has been allocated
2/28/2020
Compsci 201, Spring 2020
3

PFtLFiF
• Introduction to Recursion
• Canonical problem-solving/programming tool
• Useful for lists, trees, and when structure is self-
referential (algorithmic too, not today)
• Review linked lists in context of P4: DNA-link
• You can work with a partner from your 
Discussion section 
• Choose next week, run code, finish after break
2/28/2020
Compsci 201, Spring 2020
4

Modify and Return linked list
• If we pass a pointer to first node and ..
• Want to "remove first"
• We must return a pointer to modified list
• void change(ListNode first)
• Call change(list)
• first = first.next
• list not changed after call
2/28/2020
Compsci 201, Spring 2020
5
first

Modify and Return linked list
• If we pass a pointer to first node and ..
• Want to "remove first"
• We must return a pointer to modified list
• void change(ListNode first)
• Call change(list)
• first = first.next
• list not changed after call
2/28/2020
Compsci 201, Spring 2020
6
first
X

What does pass-by-value mean?
• Java passes parameters by value 
• Pass a copy of the variable
• A copy of list1 is passed
2/28/2020
Compsci 201, Spring 2020
7

Idiom: pass-and-return
• Change the list passed in, return the list.
• Assign in the call, e.g. x = changeUp(x)
2/28/2020
Compsci 201, Spring 2020
8
Thing xx = new Thing();
change(xx);
// can xx be different after call?
// can write xx.mutate()
// cannot assign to xx in change
xx = changeUp(xx);

Idiom: pass-and-return
• Change the list passed in, return the list.
• Assign in the call, e.g. x = changeUp(x)
2/28/2020
Compsci 201, Spring 2020
9
Thing xx = new Thing();
change(xx);
// can xx be different after call?
// can write xx.mutate()
// cannot assign to xx in change
xx = changeUp(xx);
X

Invariants
• Class level: true before each method executes
• Established at construction
• Re-established by each method
• Loop level: true before each loop guard evaluation
• Established before first iteration of loop
• Re-established after each loop iteration
• Reason formally and informally about code
2/28/2020
Compsci 201, Spring 2020
10

WOTO
http://bit.ly/201spring20-0226-2
2/28/2020
Compsci 201, Spring 2020
11

Google (DYM): Recursion
• What is the Internet?
• A network of networks ….
• What is PageRank?
• What’s a good website link?
2/28/2020
Compsci 201, Spring 2020
12
public int calc(int n){
return n*calc(n-1);
}

Self Reference and Recursion
• Does a Node reference itself?
• No, there’s a .next field, but …
• Does a recursive method call itself?
• No, calls clones of itself 
• Careful, could make “infinite” number of calls …
• What’s in a folder?
• Files and other folders. Is that self-referential?
2/28/2020
Compsci 201, Spring 2020
13

Google recursion 
Did you mean …?
• Those software engineers …
• Did you mean invented by Noam Shazeer, Duke 
1998: Math and Compsci
2/28/2020
Compsci 201, Spring 2020
14

Noam Shazeer, Duke 2008
•
https://www.newyorker.com/magazine/2018/12/10/the-friendship-that-made-google-huge
• Compsci 201 alum, passionate about problem-
solving
2/28/2020
Compsci 201, Spring 2020
15

When to use recursion
• The structure of the problem lends itself …
• Folders/Directories contain …
• Nodes in a linked list contain …
• The algorithmic structure lends itself …
• Sorting algorithms as we’ll see …
• Factorial? Just say no …
2/28/2020
Compsci 201, Spring 2020
16

Size of a linked list
• You've seen a loop to do this
• Goal: try to understand why this is correct
• We'll use example from arithmetic too
• Vocabulary with both structure and algorithm
2/28/2020
Compsci 201, Spring 2020
17

Vocabulary
• All recursive code has a base case
• A simple case where no recursion necessary
• Example in linked list? null, no recursion
• sometimes one node case too
• Base case always identified with an if statement.
2/28/2020
Compsci 201, Spring 2020
18

Understanding Recursion
• Visualize: RecDemo.java
• The base case anchors the recursion
https://coursework.cs.duke.edu/201spring20/classcode/blob/master/src/RecDemo.java
• There's no loop! Why?
• Sequence of recursive calls
• Stacked up until base returns
• The recursive call "decreases"
• Must get toward base case
2/28/2020
Compsci 201, Spring 2020
19

RecDemo.java
2/28/2020
Compsci 201, Spring 2020
20

RecDemo.java – rest of it
2/28/2020
Compsci 201, Spring 2020
21

About to count # nodes in list
• Call create(4) finished, call count(list)
• What does list point to? list.next?
2/28/2020
Compsci 201, Spring 2020
22

First recursive call made
• Each method on the stack/pile of methods has its 
own local state: what does list reference?
• Node 3 in doit/first call, node 2 in recursive call
2/28/2020
Compsci 201, Spring 2020
23

Second recursive call made
• Three calls of count made: where is active call?
• Parameter list points at 1, what happens?
2/28/2020
Compsci 201, Spring 2020
24

What do we see?
2/28/2020
Compsci 201, Spring 2020
25
• Each method invocation 
has its own state: 
parameter, local 
variables, line number
• Goal: trust recursion
• Trust is hard
• Debugging on trust? 
Not so easy

Last call: base case reached
• The active call has list == null
• Base case reached! Return 0
• Where is this value returned?
• To the call: the stack frame "above"
• Addition happens back up call-chain 
2/28/2020
Compsci 201, Spring 2020
26

How did recursion work?
• Structure of a linked list is essential
• For a non-null list, # nodes is: count me, and 
recursively count the rest, add together
• Recursion in general: process one case, one 
number, one node. Make a recursive call, use 
result.
• Code must use return value of recursive call
• For lists? Deal with one node only in code
2/28/2020
Compsci 201, Spring 2020
27

How do you calculate N!
• Multiply 1 x 2 x 3 x … x N
2/28/2020
Compsci 201, Spring 2020
28
public int fact(int n){
int prod = 1;
for(int k=2; k <= n; k++){
prod *= k;
}
return prod;
}

Recursive Terminology
• Recursive methods must have a base case
• Simple to do, don’t need “help”
• Recursive calls make progress toward base case
• Some measure gets smaller, toward base case
• What’s n!
• It’s n * (n-1)!
• What’s the base case? 1! Is 1 (or 0! Is 1)
2/28/2020
Compsci 201, Spring 2020
29

Don’t do this! 
• int x = fact(4);
• return 4*fact(3)
• The call of fact(3) calls a “clone” or “copy”
• Doesn’t call “itself”, is re-entrant code
2/28/2020
Compsci 201, Spring 2020
30
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=4

Don’t do this 2 
• int x = fact(4);
• return 4*fact(3)
2/28/2020
Compsci 201, Spring 2020
31
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=4
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=3

Don’t do this 3 
• int x = fact(4);
• return 4*fact(3)
• return 3 * fact(2)
2/28/2020
Compsci 201, Spring 2020
32
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=4
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=3
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=2

Don’t do this 3 
• int x = fact(4);
• return 4*fact(3)
• return 3 * fact(2)
• When n is 2 …?
• return 2 * fact(1)
2/28/2020
Compsci 201, Spring 2020
33
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=4
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=3
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=2

Base Case Reached
• return 2*fact(1)
• Evaluates to 2*1
• Return to call of fact(1)
2/28/2020
Compsci 201, Spring 2020
34
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=4
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=3
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=2
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=1

Base Case Reached
• int x = fact(4)
• n = 1 returns 1
• n = 2 returns 2
• n = 3 returns 6
• n = 4 returns 24
2/28/2020
Compsci 201, Spring 2020
35
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=4
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=3
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=2
public int fact(int n){
if (n == 1) return 1;
return n*fact(n-1);
}
n=1
Fact(1) is 1
Fact(2) is 2
Fact(3) is 6
x is now 24

WOTO
http://bit.ly/201spring20-0228-1
2/28/2020
Compsci 201, Spring 2020
36

From Links to …
2/28/2020
Compsci 201, Spring 2020
37
• What is the P4: DNA/LinkStrand assignment about?
• Why do we study linked lists
• How do you work in a group? 
• Two people from the same Discussion section
Kary Mullis

From PCR to linked lists
• Polymerase Chain Reaction
• Make copies of a specific DNA segment
• Recombinant DNA
• Insert DNA using restriction enzymes
• Loosely forms basis for DNA/Linked assignment
• Big gains in efficiency using Linked Lists
• Compare to array of chars, e.g. Strings
2/28/2020
Compsci 201, Spring 2020
38

But first! Let's look at strings…
• See StringPlay.java
•
https://coursework.cs.duke.edu/201spring20/classcode/blob/master/src/St
ringPlay.java
• Runtime of stringConcat(“hello”,N)
• Depends on size of ret: 5, 10, 15, … 5*N
• 5(1 + 2 + … + N) which is O(N2)
2/28/2020
Compsci 201, Spring 2020
39
public String stringConcat(String s, int reps) {
String ret = "";
for(int k=0; k < reps; k++) {
ret += s;
}
return ret;
}

StringBuilder Examined
• Just say no to quadratic, use StringBuilder
• String is immutable, StringBuilder is not
• Runtime of builderConcat(“hello”,N)
• 5 + 5 + 5 + … + 5 a total of N times: O(N)
2/28/2020
Compsci 201, Spring 2020
40
public String builderConcat(String s, int reps) {
StringBuilder ret = new StringBuilder();
for(int k=0; k < reps; k++) {
ret.append(s);
}
return ret.toString();
}

Summary of Concatenation
• Using s + t for two strings
• Takes time s.length() + t.length() 
• Makes a new string, doesn't change s or t
• Using StringBuilder is more efficient
• Time for s.append(t) is t.length()
• Why? Just add t.length() characters to s –
backed by array in s
2/28/2020
Compsci 201, Spring 2020
41

Output from StringPlay
• Which is O(N) and which is O(N2)
size string size builder
50000  0.169. 50000 0.000
100000 0.314 100000 0.000
150000 0.533 150000 0.001
200000 0.784 200000 0.001
250000 1.341 250000 0.001
300000 1.769 300000 0.002
350000 2.496 350000 0.001
400000 3.326 400000 0.001
450000 4.371 450000 0.001
500000 5.437 500000 0.001
2/28/2020
Compsci 201, Spring 2020
42

WOTO
http://bit.ly/201spring20-0228-2
2/28/2020
Compsci 201, Spring 2020
43

danah boyd
Dr. danah boyd is a Senior Researcher at 
Microsoft Research, … a Visiting Professor 
at NYU, …Her work examines everyday 
practices involving social media, with 
specific attention to youth engagement, 
privacy, and risky behaviors. She recently 
wrote Engaging the Ethics of Data Science 
in Practice; coauthored Isomorphism 
through algorithms: Institutional 
Dependencies in the case of Facebook
2/28/2020
Compsci 201, Spring 2020
44
"Building new connections is a critical part of building a new 
economy. The American education system, as flawed as it is, is 
great for the creative class because of the way it mixes up 
networks."

DNA Cut and Splice
• Find enzyme like ‘gat’
• Replace with splicee like ‘gggtttaaa’
• Strings and StringBuilder for creating new strings
• Complexity of “hello” + “world”, or A+B
• String: A + B, StringBuilder: B
2/28/2020
Compsci 201, Spring 2020
45

What do linked lists get us?
• Faster run-time, much better use of memory
• We splice in constant time? Re-use strings
• Same as previous slide: sequential char view
2/28/2020
Compsci 201, Spring 2020
46

linked list improvement: memory
• Suppose we have B "gat" (blue), in strand size N
• Inserting size S "gggtttaaa" (green) splicees
• For String/StringBuilder: memory: B*S (+ N)
• For LinkedList: memory: S (re-use green!) (+ N)
2/28/2020
Compsci 201, Spring 2020
47

linked list improvement: time
• Suppose we have B "gat" (blue), in strand size N
• Inserting size S "gggtttaaa" (green) splicees
• For String: time: B2S + N, builder: BS + N
• For LinkedList: B + N
2/28/2020
Compsci 201, Spring 2020
48

Theory and Practice
• The JVM can sometimes optimize your code
• Don’t optimize what you don’t have to …
• http://www.pellegrino.link/2015/08/22/string-
concatenation-with-java-8.html
• Timings with System.nanoTime() are suspect
• Other things going on in computer
• JVM can go into garbage-collection mode
• Other considerations
2/28/2020
Compsci 201, Spring 2020
49

Thoughts on Exam 1
• Exam 1 – 80 points 
2/28/2020
Compsci 201, Spring 2020
50

Survey on Exam 1
2/28/2020
Compsci 201, Spring 2020
51

How much time studying? 
2/28/2020
Compsci 201, Spring 2020
52

Thoughts Before Exam 1
2/28/2020
Compsci 201, Spring 2020
53
1 is confident I would fail in a big way
5 is  confident I'd get close to 100 percent

Thoughts on Leaving Exam 1
1 - think I did very, very poorly -- the exam did not go well at all
5 - think I did very well, came away confident I'll get close to a 90% or better
2/28/2020
Compsci 201, Spring 2020
54

Was Exam 1 Fair?
2/28/2020
Compsci 201, Spring 2020
55

Big-Oh Questions
• Need to explain every line
• We will do big-Oh almost every day
• The more you do the better you will get at these
2/28/2020
Compsci 201, Spring 2020
56

Storage Question
• Class has state – four items define an object
• Int mySize
• Int myCapacity
• String[] myItems
• HashSet<String> myUniqueItems
• Methods should update state appropriately
• Lot of points, but broken into small parts
2/28/2020
Compsci 201, Spring 2020
57

Exam 1 Takeaways
• First, understand everything you missed
• Get a blank sheet of paper, can you now write 
the code.
• Need to do this before moving on
• Exam and solutions are on the Old Tests page
• Come in for office hours – go over your exam, 
concepts you are not solid on
• Go on nights when an assignment/APT not due
• Free four hours a night office hours
2/28/2020
Compsci 201, Spring 2020
58

More Exam 1 Takeaways
• Midterm grades – most will pull up your grade with 
other things
• A range – 119
• B range – 135
• C range – 30
• Help
• Understand what you missed
• Consulting/Office hours – it is free!
• Peer Tutoring Center – group tutoring
2/28/2020
Compsci 201, Spring 2020
59

Want to read more on topics?
• Free online textbooks from OpenDSA
• http://lti.cs.vt.edu/OpenDSA/Books/CS2
• http://lti.cs.vt.edu/OpenDSA/Books/CS3
• Topics
• We cover some topics from both books such as 
Linked lists and more!
2/28/2020
Compsci 201, Spring 2020
60

