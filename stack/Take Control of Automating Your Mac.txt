
Take Control of Automating Your
Mac (1.0)
Joe Kissell
This book is for sale at http://leanpub.com/tco-automating-your-mac
This version was published on 2014-06-25
*   *   *   *   *
*   *   *   *   *
© 2014 alt concepts inc.
ISBN for EPUB version: 9781615424368
ISBN for MOBI version: 9781615424368

Table of Contents
Read Me First
Updates and More
Basics
Introduction
Automation Quick Start
Develop an Automator’s Mindset
Learn the Basic Principle of Automation
Learn What You Can Automate
Look for Automation Opportunities
Pick the Right Tools
Use Builtin Automation Features
Find Files Faster with Finder Tags
Use OS X’s Builtin Keyboard Shortcuts
Create Your Own OS X Keyboard Shortcuts
Use OS X Text Substitutions and Transformations
Control Your Mac with Speakable Items
Keep Tabs on Important Activities with Notifications

Log In to Your Mac Automatically
Open Items Automatically on Login
Sleep, Wake, and Shut Down on a Schedule
Update Apple and Mac App Store Software Automatically
Update Non-Mac App Store Software Automatically
Work with Rulebased Searches
Create and Use Smart Containers
Automate Your Input Devices
Use Trackpad and Magic Mouse Gestures
Save Clicks with Thirdparty Input Devices
Program an Input Device with USB Overdrive
Learn about Other Special Input Devices
Automate Text Expansion
Use OS X’s Text Replacement
Use a Thirdparty Text Expansion Utility
Automate the Finder
Use the Spotlight Menu as a Launcher
Use a Thirdparty Launcher
Organize Files with Hazel
Supercharge Your Clipboard

Learn What a Clipboard Utility Can Do
Use a Macro or Launcher Utility
Use an OS X Clipboard Utility
Automate Individual Apps
Automate Microsoft Office
Automate Nisus Writer Pro
Discover Other Internally Scriptable Apps
Automate Email
Use Serverbased Rules
Automate Apple Mail
Automate Outlook Email with Rules
Automate Other Email Apps
Automate the Web
Log In Faster with iCloud Keychain and Safari Autofill
Automate Web Logins with a Password Manager
Automate Cloud Services
Discover Other Web Automation Options
Automate Backup and Syncing
Run Backups Automatically with Time Machine
Create Handsoff Versioned Backups

Schedule Bootable Duplicates
Automate Mac-to-Mac Syncing
Use OS X Automation Technologies
Use Services for Systemwide Shortcuts
Understand Automator
Get to Know AppleScript
Script the Command Line with Shell Scripts
Use a Macro Utility
Control Your Mac with Keyboard Maestro
Use Another Macro Utility
About This Book
Ebook Extras
About the Author
About the Publisher
Copyright and Fine Print
Featured Titles
Keyboard Maestro Coupon
LaunchBar Coupon
Hazel Coupon
Nisus Writer Pro Coupon

TextExpander Coupon
TextSoap Coupon
TypeIt4Me Coupon
Typinator Coupon

Read Me First
Welcome to Take Control of Automating Your Mac, version 1.0, published in
June 2014 by TidBITS Publishing Inc. This book was written by Joe Kissell and
edited by Scholle McFarland.
This book explores many ways to work faster, increase your efficiency, and have
more fun using your Mac by automating common activities. Many of these
techniques require no extra software, and nearly all of them are suitable for
ordinary users without special technical skills.
If you want to share this ebook with a friend, we ask that you do so as you would
with a physical book: “lend” it for a quick look, but ask your friend to buy a
copy for careful reading or reference. Discounted classroom and Mac user group
copies are available.
Copyright © 2014, alt concepts inc. All rights reserved.
Updates and More
You can access extras related to this ebook on the Web (use the link in Ebook
Extras, near the end; it’s available only to purchasers). On the ebook’s Take
Control Extras page, you can:
Download any available new version of the ebook for free, or buy any
subsequent edition at a discount.
Download various formats, including PDF, EPUB, and Mobipocket. (Learn
about reading on mobile devices on our Device Advice page.)
Read the ebook’s blog. You may find new tips or information, links to
author interviews, and update plans for the ebook.

If you bought this ebook from the Take Control Web site, it has been added to
your account, where you can download it in other formats and access any future
updates. However, if you bought this ebook elsewhere, you can add it to your
account manually; see Ebook Extras.
Basics
Here are a few fundamentals that will help you read this ebook:
Links: All blue text in this ebook is hot, meaning you can click (or tap) it,
just like a link on the Web. If you click a link that takes you to a different
part of the ebook, you can return quickly to where you were if your ebook
reader offers a “back” feature. For example, if you use iBooks to read the
EPUB version of this ebook, you can click the “Back to” link at the lower
left. Or, if you use Preview on the Mac to read the PDF version of this
ebook, you can choose Go > Back or press Command-[.
Menus: Where I describe choosing a command from a menu in the menu
bar, I use an abbreviated description that puts the name of the menu ahead
of the command. For example, at the end of the previous paragraph, “Go >
Back” means “choose the Back command from the Go menu.”
Contextual menus: To describe opening a contextual menu, I usually tell
you to right-click (or Control-click) an item on the screen, such as a file
icon in the Finder. If your mouse, trackpad, or other pointing device offers
another means of opening a contextual menu, you should feel free to use the
method you prefer.
System Preferences: I sometimes discuss settings in System Preferences
that you may want to adjust. To open System Preferences, click its icon in
the Dock or choose System Preferences from the Apple  menu. When the
System Preferences window opens, click the icon of the pane whose
settings you want to change, and perhaps subviews within that pane. For
example, I may say, “go to System Preferences > Keyboard > Shortcuts >
Services” to mean “open System Preferences, click Keyboard to display the

Keyboard pane, click the Shortcuts button at the top, and then click
Services in the list on the left.”
Application preference: I sometimes refer to preferences in an application
that you may want to adjust. Don’t confuse an application’s preferences
with the system-wide settings found in System Preferences. To access an
application’s preferences, choose Application Name > Preferences. For
example, in the program Mail, you would choose Mail > Preferences.
Path syntax: I occasionally use a path to show the location of a file or
folder in your file system. For example, OS X stores most utilities, such as
Terminal, in the Utilities subfolder of the Applications folder. The path to
Terminal is: ApplicationsUtilities/Terminal.
The slash at the beginning of the path tells you to start from the root level of
the disk. Some paths begin with ~ (tilde), which is a shortcut for the user’s
home directory. For example, if a person with the username joe wants to
install fonts that only he can access, he would install the fonts in his
~/Library/Fonts folder, which is just another way of writing
Usersjoe/Library/Fonts.
User Library: The library folder mentioned in the previous paragraph,
~/Library, is normally invisible. To see it, hold down the Option key
and choose Go > Library in the Finder.
Mac OS X versions: I frequently mention features specific to a particular
version of Mac OS X, which Apple usually refers to by their “big cat” or
“California” code names:
Yosemite: 10.10 (expected in late 2014)
Mavericks: 10.9
Mountain Lion: 10.8
Lion: 10.7

Snow Leopard: 10.6
To find out which version of Mac OS X your Mac is running, choose Apple  >
About This Mac.
Coming in Yosemite: I use notes like this to call attention to changes Apple has announced
for Yosemite.

Introduction
If you’ll forgive the cliché, life is too short. I have long-term goals and dreams
that need my attention. And every single day, I have work to do, a family to take
care of, books to read, and TV shows to watch. I don’t have time to waste on
tedious tasks that my expensive, modern Mac is perfectly capable of doing for
me.
This book is about taking back your time by automating your Mac, which
sounds like a fancy and high-tech undertaking. But in fact, all I mean by
“automating” is finding shortcuts—ways to do the same thing, only more
quickly and easily, with fewer manual steps. That might be as simple as learning
a keyboard shortcut for a common command, or scheduling a task to run at a
certain time. You can do more advanced things, too, like using macro utilities or
writing AppleScripts, but you may be surprised to find that some of the most
powerful and effective automation techniques require the least effort and skill to
set up. In many cases, you won’t even need extra software.
I want to emphasize that you do not have to be a programmer or computer geek
to do most of this stuff. I do mention a few techniques that require above-
average technical chops, but I’ve written this book for ordinary—smart but non-
technical—readers. On the other hand, if you are a computer geek, I hope you’ll
find some ideas here that you can use to make your work even more efficient
than it already was.
Tip: If you are interested in learning about programming but don’t know where to start, try
Hour of Code.
Let me share a personal story. There’s a certain bookkeeping task that used to
take me about 5 minutes a day (I’ll say more about it in Control Your Mac with
Keyboard Maestro). After doing this a few hundred times, I decided that I

couldn’t stand it any longer. So I spent a full day working up a very snazzy
macro that combined Keyboard Maestro with AppleScript to do the whole task
without any intervention at all.
Now, you may be thinking, “That’s madness! What kind of idiot would spend a
whole day automating something that takes just 5 minutes?” Well, this idiot did
it to save time. If I spent 8 hours perfecting my macro, that’s equivalent to 5
minutes a day for about 3 months. Which means that after 3 months of using the
macro, I get 5 extra minutes every single day to spend with my kids—more than
30 hours over the course of a year. All of a sudden, that sounds pretty smart!
That’s an extreme example—rarely would I spend so much time automating a
single task—but it nicely illustrates my objective. I invest a bit of up-front setup
time to shave off a few seconds here, a few minutes there, from tasks that I
perform over and over. My work becomes less frustrating, and I’m freed up to
concentrate on more interesting and creative tasks. Whether I get more work
done in the same amount of time or the same amount of work done in less time,
the result is the same—higher productivity and greater happiness.
Many of the topics I discuss are deep, and I can only scratch the surface in a
book like this. For example, my colleague Matt Neuburg wrote a 592-page book
on AppleScript, but I spend less than a chapter on it. Other Take Control authors
have written about LaunchBar and TextExpander, which I cover only briefly.
And I (or someone) could write hundreds of pages about Keyboard Maestro,
Visual Basic for Applications, Nisus Writer Pro macros, and numerous other
topics. Automation is a virtually endless subject, but I’m sure you don’t want to
read thousands of pages about it!
Instead, I want to do just three things with this book:
Show you lots of tools and techniques for automating your Mac.
Offer concrete examples you can use as is or adapt to your needs.
Inspire you with extensive lists of further possibilities.

All the techniques in this book work with OS X 10.9 Mavericks. Many also
work with older versions of Mac OS X—perhaps with minor modifications. I
haven’t spelled out those differences or compatibility issues, but in general, the
older your version of Mac OS X, the less likely you’ll find that everything works
as described.

Automation Quick Start
There are dozens, if not hundreds, of ways to automate your Mac. This book
explores many of the most interesting options. Feel free to dip in wherever you
like and jump around to techniques that interest you; however, I suggest that you
first read the Introduction and Develop an Automator’s Mindset. And, if you’re
interested in ways of automating your Mac that require no extra software, pay
special attention to the second chapter, Use Builtin Automation Features.
Automation 101:
Strategy: Learn what you can automate and figure out where you can save
time and effort in Develop an Automator’s Mindset.
Builtin features: Discover the many ways you can make your Mac more
efficient using nothing more than what Apple supplies in OS X; see Use
Builtin Automation Features.
Tip: At this point, you can explore any of the specific automation categories in the next group
of chapters, or skip ahead to Learn about higherlevel automation tools such as Automator,
AppleScript, and Keyboard Maestro.
Discover what you can automate:
Input devices: Get the most out of your mouse, trackball, trackpad, or
other input device; see Automate Your Input Devices.
Text expansion: Insert commonly used words, phrases, variables, and even
elaborate fill-in-the-blanks reports just by typing a few characters; see
Automate Text Expansion.
Finder: Launch apps, open files and folders, play music, look up
definitions, perform calculations, and much more with just a few

keystrokes; see Automate the Finder.
Clipboard: Cut, copy, and paste like a pro using multiple clipboards,
clipboard histories, and tools to manipulate what’s on your clipboard; see
Supercharge Your Clipboard.
Apps: Use the capabilities built into major apps like Word, Excel, Nisus
Writer Pro, and FileMaker Pro to automate repetitive or complex actions;
see Automate Individual Apps.
Email: Eliminate spam, file messages instantly, send out automatic replies,
and more as you Automate Email.
Cloud services: Connect cloud services to each other, create agents that
watch the Web for information that interests you, and even control your
Mac remotely; see Automate the Web.
Backup and sync: Keep your data safely backed up—and, if you like, in
sync across multiple Macs; see Automate Backup and Syncing.
Learn about higherlevel automation tools:
Apple automation technologies: Get to know Apple’s heavier-duty
automation tools—services, Automator, AppleScript, and shell scripts—in
Use OS X Automation Technologies.
Macro utilities: Create sequences of steps you can replay with a click or a
keystroke to do nearly anything you could do yourself with a mouse and
keyboard; see Use a Macro Utility.

Develop an Automator’s Mindset
I think of myself as a relatively lazy person. I mean, yes, this is my 45th Take
Control book in less than 11 years. And yes, I’ve written numerous other books,
too, not to mention hundreds of articles for Macworld and TidBITS. And sure, I
run a company and speak all over the world and have a wife and two young kids.
Apart from those minor exceptions and maybe a dozen others, I’m pretty much a
layabout.
But, there’s more than one way to think about laziness. When it comes to your
Mac, a good form of laziness is not wanting to spend unnecessary time doing
something that’s tedious or repetitive. A bad form of laziness is not bothering to
figure out how to save yourself that effort later on.
I frequently interrupt my work to spend a half hour figuring out how best to
automate a task that might take me a minute to do manually. But if I save a
minute several times every day, that half hour pays for itself in no time. And
from then on, I’m more efficient and happier. Even if a certain automation
technique saves only a second or two, those seconds add up in a big way over
time.
Note: To get a visual sense of how much time you might save over the long run, see the xkcd
comic Is It Worth the Time?.
But saving time isn’t the only reason to automate activities on your Mac. You’ll
also make your work more consistent and accurate. Automation can prevent
small errors that would otherwise trip you up, and save you the annoyance of
looking up forgotten details.
As you read about automation methods, I want you to accept the fact that you’ll
have to spend (not “waste”) time learning, experimenting, and setting things up,
and that this work is going to be a temporary drag on your productivity. Don’t

g
g
p
y
g
y
p
y
worry about it. The end result will make you much more productive. Bear in
mind, too, that the effort-to-reward ratio is least favorable at the beginning, as
you’re getting to know the tools and techniques. But as you gain experience,
you’ll find that smaller amounts of effort produce greater rewards.
Your biggest challenge may be figuring out what you can automate and how.
That’s what I want to address in the remainder of this chapter.
Learn the Basic Principle of Automation
I alluded to this in the Introduction, but I want to make sure it’s clear:
For the purposes of this book, automation means finding shortcuts—easier ways
to do the same things you’re already doing regularly.
I use such a broad and inclusive definition because I want you to get in the habit
of looking for easier ways to do things on your Mac without the psychological
barrier of thinking that automation is some intensely technical process only a
computer geek could grasp.
You probably wouldn’t have bought this book if you weren’t already interested
in the value of simple labor-saving shortcuts: if there’s something you do
frequently that requires three clicks and you can come up with a way to do it
with one click instead, you’ve saved yourself some effort. Or maybe you have a
regular task that normally requires a dozen keystrokes and you can do it with a
single menu command instead.
Once you feel confident finding shortcuts like these, you can work your way up
to the more conventional sense of automation—setting up your Mac to perform
complex sequences of useful tasks without any intervention. These could be
tasks you would do any way, or they could be tasks that would be too
complicated, time-consuming, or onerous to bother doing by hand—tasks such
as sorting your incoming email, monitoring sales figures, or moving files
between disks or machines.

Keep in mind, however, that since it takes some time to set up any automation
task, automation saves time only when the activity in question happens over and
over again. Suppose an app has a deeply nested menu command, like Tools >
Format > Paragraph > Style > Quote Level > Increase, and it’s a pain to find it
and select it. You could assign it a keyboard shortcut, but if it’s a command you
use only on a rare occasion, there’s no point. It would take more effort to set up
(and remember) the shortcut than to search for the command manually. On the
other hand, if this is a command you use several times every day, it’s certainly
worth your effort to find a quicker way.
Learn What You Can Automate
Think for a moment about the differences between tasks that can be described in
purely mechanical (or objective) terms compared to tasks that require human
intelligence (or subjectivity). Here are a few examples to illustrate what I mean.
Mechanical tasks:
Select all the black pixels in an image
Find all capitalized words in italics
Type a predefined chunk of text
Fill out a Web form with my contact information
Click your pointer at a spot 50 pixels from the left edge and 120 pixels from
the top edge of the frontmost window
Subjective or creative tasks:
Select all the flowers in an image
Find all allusions to LOST
Compose a poem
Fill out a Web form with your opinions on survey questions

Click your pointer on the photo of the most appetizing pastry
Broadly speaking, mechanical tasks are the ones that most readily lend
themselves to automation. While writing this book, I used automation for things
like expanding abbreviations, applying styles, creating bookmarks, inserting
cross-references, and modifying URLs. None of my automation tools or tricks
helped me figure out what to write, however.
Your own work undoubtedly includes a mixture of mechanical and subjective or
creative tasks. The more you automate mechanical tasks, the better you’ll be able
to focus on the creative part of your work.
Crucially, you can automate such tasks (and sequences of tasks) even in cases
where variables are involved or decisions are required—automation need not be
blind. For example, you might have a macro (a structured series of automated
actions) that looks at the text on a certain Web page and, depending on what that
text is, takes one of three actions in response. You might have a command that
runs automatically—but only on rainy days, or only if there are fewer than five
messages in your email Inbox. You might even have your Mac prompt you to
make a decision manually, or fill in some information, before proceeding with an
automation task.
When trying to determine whether a task is ripe for automation, I like to ask
myself whether it’s something I could explain to my mother how to do, over the
phone. My mom is both intelligent and computer-literate, although she’s not a
technophile. I could say, “Mom, go to this page in your browser. Now look at
the second line from the top. Does it have a number that’s greater than 100?
Then open this spreadsheet, click in the first empty cell in the second column,
and type that number into that cell.” On the other hand, I would not tell my
mother, “Give descriptive names to these 100 technical documents I just
scanned,” because although she might give it her best shot, chances are close to
nil that she and I would choose similar names—and I’d have a hard time finding
a particular document.
L
k f
A t
ti
O
t
iti

Look for Automation Opportunities
Now it’s time for you to start making a list. You can use a text file, the Notes
app on your iPad, or even (gasp!) a piece of paper, but do start making a list of
tasks you might want to automate right now.
As you use your Mac, pay attention to activities that are largely mechanical in
nature, that you perform more than a few times per day, and that require more
than a single click, keystroke, or menu command. Jot down what those activities
are, and as you read this book, look for appropriate ways to automate each task.
Even if you know for sure that you want to automate something, it’s not always
convenient to drop everything and do so at the moment you realize it. Having a
list helps you remember what to come back to when you do have time.
In particular, I suggest concentrating on situations in which you might be able to
click less, type faster, or use keyboard shortcuts.
Click Less
Although it’s not a perfect measurement of complexity, it’s a convenient way to
think about the effort needed to perform common tasks: How many clicks does it
take?
If you click the Finder icon in your Dock to switch to the Finder, click File >
New to open a new window, click the name of another Mac in the sidebar, and
then click Share Screen to share the screen, that’s four clicks.
All things being equal, fewer clicks take less effort than more clicks, so if you
can find ways of reducing multiple clicks to a single click (or perhaps to a
keyboard combination), you’ll save effort.
Write it down: When you notice yourself performing a task two or more times a
day, count and write down how many clicks it takes to complete it, remembering
that one click equals a press and release. (Moving the pointer to a menu
command and dragging add complexity too, but for the sake of this little
experiment, you can ignore those mouse movements.) If an activity also requires

keystrokes (such as entering a username, or searching for a word), count those
too—we’ll come back to extra keystrokes in a moment. Any repetitive activity
that requires more than two clicks could potentially be shortened. The reason for
counting your clicks is so you can roughly prioritize which tasks may bring you
the most gains once automated.
What to do: Pretty much any form of automation that I discuss in this book has
the potential to eliminate clicks. A few areas that might especially apply,
however, are these:
If you spend too much time launching applications and opening files, read
Automate the Finder
If you want to copy and paste multiple items quickly, start with
Supercharge Your Clipboard
To automate your mouse, trackpad, or other input device, read Automate
Your Input Devices
If you want to switch applications with your voice, try Control Your Mac
with Speakable Items, or find other options for quickly getting in and out of
apps in Automate the Finder
Type Faster
If you don’t already know how to touch-type (that is, type with all ten fingers,
without looking at the keys), learning to do so will probably save you more time
and increase your efficiency more than anything else in this book. You can find
numerous free or inexpensive apps to help you learn, such as Mavis Beacon
Teaches Typing.
But if you’re already a touch typist, you can increase your typing speed and
accuracy even further. For example, I frequently write about a product called
DEVONthink Pro Office, but I never type out all 21 characters of that name. I
type dtpo and my Mac expands that automatically into the full name. That not
only saves time, it ensures I get all the capitalization right. I do the same thing

with frequently typed names, addresses, phone numbers, URLs, dates, and other
phrases—especially those that I use more than a few times a day.
Write it down: Consider all the email messages and documents you wrote in the
last 24 hours, and see if you can pick out long names, phrases, and other text you
used repeatedly, such as a company name, chemical name, or address. Make a
note of them.
What to do: Set up shortcuts for yourself to Automate Text Expansion using OS
X’s built-in tools or a third-party utility.
Use Keyboard Shortcuts
One premise underlying many of the automation techniques in this book is:
Using the keyboard has the potential to be considerably faster than using a
mouse (or other pointing device).
To the extent that this is true, it would seem logical to learn (or create) as many
keyboard shortcuts as possible. But I wouldn’t go so far as to say that keyboard
shortcuts are always or even usually faster than using a pointing device. (For a
fascinating glimpse into research Apple did in this area in the late 1980s, read
Bruce “Tog” Tognazzini’s articles “Keyboard vs. The Mouse,” part 1, part 2,
and part 3.) And let’s not forget the mental effort required to learn and recall all
those shortcuts!
Keyboard shortcuts are likely to be superior in certain situations:
Cases where you’ve memorized a keyboard shortcut so fully that its
application is a matter of muscle memory—as is often the case with the
most common shortcuts such as Command-C for Copy, Command-X for
Cut, Command-V for Paste, CommandS for Save, Command-W for Close,
and Command-Q for Quit
Editing operations in which you can perform a keyboard shortcut with one
hand while selecting text or other elements using your mouse or other

pointing device with the other hand
Activities that require multiple mouse clicks (refer back to Click Less)
Activities that require navigating submenus or searching for a menu
command whose location is unknown
Repetitive activities (for example, applying a certain menu command to a
dozen different objects, one after the other)
Actions to which you can assign a mnemonic, multi-key shortcut sequence,
such as Command-P-D-F for Save as PDF (see Use MultiKey Shortcuts in
Microsoft Word and Use MultiKey Shortcuts in Nisus Writer Pro)
Furthermore, if you are a touch-typist and your work involves mostly typing (in
which case there’s a frequent time penalty for moving one hand from the
keyboard to the pointing device and back), you’re likely to see greater efficiency
improvements from using keyboard shortcuts than if you’re a hunt-and-peck
typist or if your work involves more mousing than typing.
Write it down: Make a note of tasks you perform several times a day that
require searching for menu commands, as well as those you repeat two or more
times in a row.
What to do: In some cases, you can learn their existing shortcuts (see Use OS
X’s Builtin Keyboard Shortcuts), but if they don’t have shortcuts—or you don’t
like the built-in shortcuts—you can assign keyboard shortcuts to them (see
Create Your Own OS X Keyboard Shortcuts and Use a Macro Utility).
Consider Routine Tasks
I may have given you the impression that automation is best suited for tasks you perform
many times a day. It’s true that the more often you perform a task, the more you’ll benefit from
automating it. But you might also want to consider automating tasks you perform less
frequently—say, once a week, once a month, or once a quarter.
Do you have to prepare a monthly expense report? A quarterly summary of customer support
email messages? An annual chart of sales statistics? It may be worth the effort to figure out
h
h
k
ll (
i
f h
)

how to automate those tasks as well (or portions of them, anyway).
You may not be able to predict how long it will take you to create the workflow, script, or
macro needed for such a task, but in general, I like to see my automation efforts amortized
within a few months. For example, if a quarterly task takes an hour to do manually, and I can
automate it with an hour’s work, I’ll see that time savings the next quarter. Spending an entire
day automating an annual task that would otherwise take only 15 minutes makes much less
sense—it could take the rest of your career to recoup that lost time.
Set Yourself Up for Success
I have one last suggestion on the topic of looking for automation opportunities.
Imagine you’re shopping for an optical character recognition (OCR) program, a
word processor, a photo manager, or a digital audio workstation app. You’ve
narrowed your choices down to two or three candidates. Which should you buy?
All things being equal, I’d pick the one with the most or best automation
capabilities, whether they’re built in (a macro language, let’s say) or externally
driven (for example, with extensive AppleScript support).
Although most apps can be automated by brute force, as it were—having a
macro utility fake a click at certain coordinates in a window, for instance—that
kind of automation is difficult and error-prone. Apps that expose their functions
directly to tools like Automator, AppleScript, and LaunchBar make automation
much easier. That’s why I talk glowingly about the automation possibilities in
Microsoft Word, Nisus Writer Pro, DEVONthink Pro Office, and 1Password.
They go out of their way to make it easy for other apps to communicate with
them.
You may also need to request some adjustments to the way other people send
you data in order to facilitate automation. For example, data you receive in a
highly structured form, such as a spreadsheet, database, or XML file, lends itself
well to automation because it’s easy to instruct a computer to look in a certain
field, cell, or key for a piece of data. Receiving data as a free-form PDF or Word
file complicates automation, because you first have to automate the task of
locating just the needle you need in a fairly large haystack.

These are just a couple of examples, but my main point is to keep automation in
mind as you make decisions about the apps you use and the ways you send and
receive information. Even if you don’t use those capabilities now, you may
appreciate them in the future.
Make Friends with Metadata
Metadata is “data about data”—for example, a song’s data is the music you hear, but
metadata includes the song’s title, composer, performer, album art, and so on—as well as its
star rating, if you gave it one in iTunes, and any comments that you’ve added to its
description. Similarly, files can have metadata such as tags and comments; photos can have
titles, ratings, and location information; and email messages can be marked as sent, read, or
junk.
If you get in the habit of adding metadata where it’s appropriate, you’ll make automation that
much easier later on. For example, if you always mark your favorite songs with 4 or 5 stars,
then it’s easy to make playlists that include only your favorites. Tag your files, and then it’s
easy to use those tags to make smart folders. Mark your favorite photos, and then it’s easy to
find them at the end of the year when generating a holiday card or to show only your favorites
to your friends at your college reunion.
Without question, adding metadata, after the fact, to hundreds or thousands of existing items
is an extraordinary time sink that is seldom worth the effort. But adding it to new items as you
go can open up interesting automation possibilities in the future.
Pick the Right Tools
I talk about tons of different techniques, features, and apps in this book. I use
most of them myself. But I don’t expect you to go out and buy every app I
mention here, or even one of each type of app. I don’t expect you to spend the
time learning Automator and AppleScript and Keyboard Maestro and Nisus
Writer Pro macros and so on. You’re welcome to do that if it sounds like fun
(it’s fun for me!), but for most people, that’s would be unreasonable and
incredibly boring.
Instead, I suggest you read through this book with the idea of picking out just the
handful of techniques and apps that give you the biggest bang for your buck (or
your time). The answer will be different for each person; it’ll depend on how
f

you use your Mac and what your biggest sources of annoyance are.
I asked myself: If I could pick only one automation tool from this book, which
one would it be? For me, that tool would be Keyboard Maestro (see Control
Your Mac with Keyboard Maestro), because it’s so versatile. It may not be the
best launcher or the best clipboard utility or the best text-expansion tool, but it
does a respectable job at all those tasks—in addition to its crucial core features
of creating macros and letting you assign keyboard shortcuts to commands.
Don’t get me wrong: I’d miss LaunchBar, TextExpander, Nisus Writer Pro
macros, and AppleScript every single day. So, for me, the right answer is to use
a bunch of tools, each for specific purposes. But as you’re getting started in
automation, learning one tool (or a few tools) more deeply is better than learning
many tools only slightly.
Finally, I should caution you not to buy automation apps just because they sound
cool, or because you hope to think up problems for them to solve. That’s like
going to the hardware store and buying a tool without having anything you need
to use it for. (Which, I admit, I’m prone to do, but I don’t recommend.) Start
with the problems you want to solve, and then find an app or technique that can
solve them.

Use Builtin Automation Features
Although it may not be apparent at first glance, OS X contains dozens of built-in
automation features, just waiting for you to make use of them. In fact, later in
this book, I’ll discuss numerous ways to take advantage of built-in features, such
as:
Use Trackpad and Magic Mouse Gestures
Use OS X’s Text Replacement
Use the Spotlight Menu as a Launcher
Use OS X Automation Technologies (Services, Automator, AppleScript,
and shell scripts)
Manage Incoming Apple Mail with Rules
Search Faster with Smart Mailboxes
Log In Faster with iCloud Keychain and Safari Autofill
Run Backups Automatically with Time Machine
But in this chapter, I want to introduce you to a core set of built-in automation
capabilities that don’t fit logically within another topic—or that don’t go as far
as the more capable third-party tools that I discuss later in this book. Most of
these involve things you can do in the Finder or in System Preferences, and
they’re among the easiest ways to start automating your Mac.
Find Files Faster with Finder Tags
Mavericks added tags to the Finder. A tag is a text label you create yourself—a
word or phrase that tells you something about what’s in a file. For example, you
might use the word recipe as a tag and apply it to any document that contains

a recipe. That would enable you to quickly locate recipes later, even if none of
them contain the actual word “recipe” in their title or contents.
Any file can have more than one tag. So you might apply the tags recipe,
dessert, French, and vegetarian to your recipe for crème brûlée. Other
files would have different combinations of tags, and as you search by tags, only
those that match the combination you specify would show up.
You can use tags instead of, or in addition to, hierarchical filing in nested
folders. You might have tax-related documents scattered in dozens of folders on
your disk, but if they’re all tagged with tax info, you can instantly see them
all in one place. (The Finder also allows you to associate a color with your text
labels to make them easier to identify quickly.)
If you apply tags to files you create or download, that makes it quicker and
easier for you to find them later—either manually or as part of a smart folder
(see Create and Use Smart Containers). Ergo: a shortcut!
To apply a tag:
1. Select one or more files in the Finder.
2. Choose File > Tags, and then, in the popover that appears (see Figure 1),
do one of the following:
To add a new tag, type a word or phrase. Press Return; this creates the
tag and applies it to the file(s).
To add an existing tag that isn’t one of the default options, start typing
its name. OS X will attempt to autocomplete the name with matches
from your existing list, and you can also use the Up or Down Arrow
keys to select the right one. Then press Return.
To add one of the default tags (or a tag you’ve manually added as a
favorite, as described ahead), choose a dot from the bottom of the File

menu (hover over a dot to see the tag’s name). Repeat as desired to
add more tags.
Figure 1: Use this popover to add tags to a file.
Tip: In lieu of using the File menu, you can click the Action 
 menu in the toolbar of a
Finder window, which also contains a Tags item and the default tags, or right-click (or Control-
click) a file and choose Tags or a default tag from the contextual menu.
Tip: You can also apply tags as you save files by typing or selecting tags in the Tags field of
the Save dialog. And, in some apps (such as Preview), you can click a document’s title and
apply tags to that document in a popover that appears.
To manage tags:
1. Choose Finder > Preferences > Tags (Figure 2).

Figure 2: Tags can be reordered, renamed, and shown or hidden in
the Finder sidebar or menu by making adjustments in this window.
2. You can now do any of the following:
Edit a tag’s name: Double-click it and type a new name.
Change a tag’s color: Click the colored dot to its left and choose a
new color from the pop-up menu.
Show a tag in the sidebar of Finder windows: Select its checkbox.
Change the order in which tags appear in the sidebar: Drag them
to a new location.
Assign a color to a custom tag: Click the (initially white) dot to the
left of the tag’s name and choose one of the eight possible colors from
the pop-up menu.
Add favorite tags to the default list (the row of colored dots at the
bottom): Drag a tag to that area.

Delete a tag: Right-click (or Control-click) it and choose Delete Tag
“Tag Name” from the contextual menu.
To find tagged files:
Sidebar: Select a tag in the sidebar of any Finder window to see all the
files with that tag.
Find: Type a tag name in the search field at the top of any Finder window
and then select the tag name from the pop-up list to find all files with that
tag. You can add multiple tags to your search, with or without other text or
attributes, to look for files with all those tags (or attributes).
Smart folder: To save the search as a smart folder, do a find as in the last
point, but then click Save. Give the saved search a name and, for quicker
access, select Add to Sidebar. Click Save. Then you can select that sidebar
item at any time to display all items with the selected tag(s).
Use OS X’s Builtin Keyboard Shortcuts
Every app that comes with OS X, including the Finder, has keyboard shortcuts
for common commands.
Menu Shortcuts
The best-known type of keyboard shortcut performs a menu command. You can
see the shortcuts right on the menus (Figure 3).

Figure 3: Examples of menu commands with predefined keyboard
shortcuts.
The symbols represent modifier keys:
⌘ means Command
⌥ means Option
^ means Control
⇧ means Shift
So, if you see a command labeled ^⌘T (File > Add to Sidebar in the Finder),
that means hold down both the Control key and the Command key and press T.
The easiest way to learn what keyboard shortcuts are available for menu
commands is to take a look at the menus as you use them. Although every app
has its own set of shortcuts, most apps are consistent in their use of a number of
common shortcuts, such as:
⌘A for Select All

⌘B for Bold
⌘C for Copy
⌘D for Duplicate
⌘F for Find
⌘I for Italic
⌘N for New
⌘O for Open
⌘P for Print
⌘Q for Quit
⌘S for Save
⌘U for Underline
⌘V for Paste
⌘W for Close
⌘X for Cut
⌘Z for Undo
⌘, for Preferences
Return to click the default (highlighted) button in any dialog
⌘. or Esc to cancel the current action
Every Mac user should know these common shortcuts cold, because they’re
useful in nearly every app.
Tip: Try pressing the Option key while displaying a menu. In many cases, the commands
(and their associated shortcuts) change to reveal hidden options. (This also works with other
modifier keys, such as Shift and Control, but those are used less frequently.)

For many more common shortcuts, see Apple’s OS X keyboard shortcuts page.
In addition, you should know a couple of general principles about menu
commands. These are not hard-and-fast rules, but they’re overall trends worth
being aware of:
Adding Shift to a shortcut often reverses its meaning. For example, press
Command-Tab to switch to the next open application, or Command-Shift-
Tab to switch to the previous application. Or, in the Finder, while
Command-Z is Undo, Command-Shift-Z is Redo.
Adding Option to a shortcut often applies the command to a broader scope.
For example, in the Finder, Command-M is Minimize (to minimize an open
Finder window), while Command-Option-M is Minimize All (as in
minimize all Finder windows). In TextEdit, Command-W is Close (a
document), while Command-Option-W is Close All (open documents).
Adding multiple modifiers to a shortcut often means “the same thing, but
with different options.” For example, Command-V is Paste, but in most
apps, Command-Option-Shift-V (or sometimes just Command-Shift-V) is
Paste as Plain Text. Similarly, Command-Shift-S is often Duplicate (that is,
save the entire document as a duplicate) whereas Command-Option-Shift-S
is Save As (that is, save the entire document with a different name).
Text Editing Shortcuts
Besides shortcuts for menu commands, OS X has many built-in shortcuts for
working with text. Here are a few you should know:
Arrow keys: Move the insertion point in the direction of the arrow.
Option-Left Arrow or Option-Right Arrow: Move the insertion point left
or right by a word.

Command-Left Arrow or Command-Right Arrow: Move the insertion
point to the beginning or end of the current line.
Option-Up Arrow or Option-Down Arrow: Move the insertion point to
the beginning or end of the current paragraph.
Command-Up Arrow or Command-Down Arrow: Move the insertion
point to the top or bottom of the document.
Shift plus any of the above: Select the text from here to the destination.
For example, Option-Shift-Right Arrow selects the next word; Command-
Shift-Left Arrow selects to the beginning of the line.
Spend an hour or so practicing these shortcuts and you’ll be able to do much of
your text editing without reaching for a mouse or other pointing device.
Create Your Own OS X Keyboard Shortcuts
If a menu command in one of the apps you use doesn’t already have a keyboard
shortcut—or if it does, but you want to change it to something different—follow
these steps to create your own:
1. Go to System Preferences > Keyboard > Shortcuts > App Shortcuts.
2. Click the plus 
 button.
3. In the dialog that appears (Figure 4), select the app you want the shortcut to
work with from the pop-up Application menu. (If you don’t see it listed
there, choose Other, navigate to the application, and click Add.) If you want
your shortcut to work in all applications (or in, say, the pop-up PDF menu
that appears in the Print dialog of all your apps), choose All Applications
from the pop-up menu.

Figure 4: Specify the application, menu command, and keyboard
shortcut in this dialog.
Note: Unfortunately, you can’t assign keyboard shortcuts to commands on menu extras,
such as the Wi-Fi 
 menu or the Bluetooth  menu. To create keyboard shortcuts for
those commands, you’ll have to Use a Macro Utility.
4. Enter the menu command (not the name of the menu itself) for which you
want to specify a shortcut in the Menu Title field.
You must get everything—including capitalization, punctuation, and spaces
—exactly correct. If what you type here doesn’t precisely match what’s on
the menu, it won’t work. One exception: If you see an ellipsis (…) at the
end of a command, you can type either the single ellipsis character (Option-
;) or three periods. Either way works.
5. Click in the Keyboard Shortcut field and press the key combination you
want to use. (If another command previously used the shortcut you enter,
your new shortcut will override it.)
6. Click Add.
The new shortcut should immediately appear next to the menu command in the
app—even if the app is still running—and can be used right away.

Note: You may occasionally run across an app with a nonstandard way of implementing
menus, in which case custom keyboard shortcuts don’t work—they don’t show up on the
menu, and pressing the shortcut has no effect. (Adobe Photoshop Elements is one culprit I’m
aware of.) In such cases, your best bet is to Use a Macro Utility, such as Keyboard Maestro,
to assign the shortcut.
Sometimes an app has two or more menu commands with the same name,
located on different menus or submenus. For example, in Mail, you can find
Format > Quote Level > Increase as well as Format > Indentation > Increase.
Likewise, the mailbox names on the Message > Move to and Message > Copy to
submenus are the same. So if you specify only the menu command name (like
Increase), it may not connect to the right command.
To address this problem, instead of entering just the menu command name, enter
the full path through all the submenus, with -> (that is, a hyphen followed by a
greater-than sign)—and no spaces—between each step, like so: Format-
>Quote Level->Increase. This ensures that the shortcut goes only with
the menu command you specify.
Tip: Some apps also have built-in mechanisms for creating keyboard shortcuts. You can use
whichever method you prefer, but an app may give you more control over its own commands
—for example, Nisus Writer Pro lets you assign sequences of keystrokes as shortcuts (see
Use MultiKey Shortcuts in Nisus Writer Pro).
If you’re uncertain what keyboard shortcuts might be useful, here are some ideas
to get you started:
If you frequently assign tags to files (see Find Files Faster with Finder
Tags), you may want to assign a keyboard shortcut to the Finder’s File >
Tags… command. Command-T, Command-Shift-T, and Command-Option-
T are already used by other menu commands, but you can reassign any of
them to Tags… if you like.
How about an All Applications keyboard shortcut to open System
Preferences (found with a trailing ellipsis […]—on the Apple  menu)?

Lots of apps have Check for Updates… commands (usually on the
application menu—the one bearing the application’s name), but that
command almost never has a keyboard shortcut. If you use that command
frequently, it might benefit from an All Applications shortcut.
Your keyboard may have keys you rarely if ever press (F13–F15, anyone?),
and they can be put to good use. Most of these keys have preassigned
shortcuts, which you can see by looking through the various categories of
System Preferences > Keyboard > Shortcuts, but if you think a key can
serve you better by performing a different action, you should feel
completely free to change it.
Tip: If you’re having trouble remembering all the keyboard shortcuts for your various apps
(either built-in shortcuts or those you created), try the KeyCue utility, which pops up a context-
sensitive list of shortcuts whenever you press the Command key.
Use OS X Text Substitutions and
Transformations
If you look at the Edit menu in TextEdit, Mail, Messages, Safari, and numerous
other applications that include text editing features, you’ll see a Substitutions
submenu and a Transformations submenu. These two submenus contain
shortcuts for manipulating text. You don’t have to do anything to make them
appear (and you can’t add the commands in apps that don’t natively support
them), but I think everyone should know about them, because they’re often
useful—yet overlooked.
Substitutions
As you work with text in supported apps, OS X can automatically change certain
attributes in order to make your text more readable and useful. When an item on
the Edit > Substitutions submenu is checked, it means that substitution is
enabled for that app (only) until you deselect it. (Choose a menu command again
to toggle it.)

Substitution options are as follows:
Smart Copy/Paste: If you double-click a word to select it, and then copy
and paste it, a space is added before and/or after if necessary to separate it
from the adjacent text. Similarly, if you double-click a word to select it and
then press Delete, extra spaces are removed. (Smart copy/paste does not
occur if you manually drag to select the word.)
Smart Quotes: As you type, this feature converts straight quotation marks
and apostrophe (" ') into curly quotation marks and apostrophes (“” ‘’).
Smart Dashes: As you type, this feature converts two consecutive hyphens
(--) into an em dash (—).
Smart Links: As you type, this feature converts URLs (including strings
OS X interprets as URLs, even if they don’t start with a scheme such as
http or https) into clickable links.
Data Detectors: This feature intelligently identifies strings of text that
match patterns like street addresses, dates (even vaguely stated dates, like
“next Tuesday” or “breakfast tomorrow”), phone numbers, and flight
numbers—and then lets you do appropriate things with them like add an
entry to Contacts, schedule an event in Calendar, look up a location in
Maps, track a flight, and so on.
With Data Detectors enabled, if you see a chunk of text that looks like one
of the kinds of data I just mentioned, move your pointer over it. If Data
Detectors considers it to be an appropriate kind of data, a dotted box will
appear around it, with a downward pointing triangle on the right. Click the
triangle  to display either a contextual menu with one or more options, or
a popover with additional controls, depending on the type of data.
Text Replacement: As you type, this feature replaces abbreviations with
user-specified words or phrases—or corrects misspellings. (This feature is
important enough that I talk about it separately; see Use OS X’s Text
Replacement.)

Show Substitutions: Select this command to display the Substitutions
window (Figure 5), in which you can change any of your settings for the
current app (selecting or deselecting the checkboxes has the same effect as
selecting the corresponding menu command) or apply substitutions
retroactively.
 You’ll notice that
for smart quotes, smart dashes, smart links, and text replacement, I
mentioned earlier in the list that substitutions occur as you type. In other
words, if you open a document that already contains straight quotation
marks, double hyphens, or plain-text links, OS X does not convert them
automatically. If you want to make such conversions after the fact, open the
Substitutions window, select the desired checkboxes, and click Replace All
(to affect the entire document) or select a portion of the text and click
Replace in Selection.
Transformations
The Transformation submenu contains three commands that change the case of
the selected text:
Make Upper Case: Converts all lowercase letters to their uppercase
equivalents
Make Lower Case: Converts all uppercase letters to their lowercase
equivalents
Capitalize: Converts the first letter of each word in the selected text to
uppercase (regardless of whether that would constitute proper “title case”)

Tip: Do you find yourself changing substitution settings or using transformations frequently?
Why not add a keyboard shortcut to the relevant commands? See Create Your Own OS X
Keyboard Shortcuts.
Control Your Mac with Speakable Items
Macs have had built-in speech recognition for a long time. Although this was
cool when it first appeared in the mid-1990s, I’m sorry to say that Apple has
paid little attention to this feature over the years, and it doesn’t work especially
well. Perhaps a future version of OS X will include Siri’s much more advanced
capabilities, but for now, it’s possible to get at least basic voice control with
Speakable Items. And for the purpose of this book, the interesting point is that
you can create your own voice commands to open documents and apps, run
scripts, press keys, and do other custom activities—that is, your voice can trigger
shortcuts, just like a menu command or keyboard shortcut.
Coming in Yosemite: I have it on good authority that in Yosemite, what we now know as
Speakable Items will change in ways readers of this book are likely to appreciate and benefit
from. Unfortunately, I can’t say more at present, but stay tuned!
To use Speakable Items:
1. Go to System Preferences > Accessibility > Speakable Items > Settings.
2. Select the On radio button. A floating window appears (Figure 6).

Figure 6: This window shows the current status of Speakable Items.
3. Hold down the Esc key and speak a command or query, such as “What time
is it?” or “Switch to Finder.”
If you’re lucky, what you expect will happen! (And, if you’re done playing with
this feature and you want to get rid of that floating window, go back to System
Preferences > Accessibility > Speakable Items > Settings and select the Off radio
button.)
OS X comes with many speakable commands for built-in applications, and some
third-party applications add their own commands. To see what it’s possible to
say, press and hold Esc to activate Speakable Items and say, “Show me what to
say.” A floating window appears with a list of all possible commands. Although
that list is quite long—and Speakable Items does understand some small variants
in phrasing—it doesn’t come close to the plain-English comprehension
capabilities of Siri.
However, you can add your own items to this list! Apple provides simple
instructions to do so on the page OS X Mountain Lion: Create spoken
commands (which also applies to Mavericks). You might use this, for example,
to speak commands like these:
Say, “Computer, surf!” to run an AppleScript (see Get to Know
AppleScript) that opens all your favorite Web sites in Safari tabs.
Say, “Computer, boilerplate” to insert a predefined reply into an email
message you’re composing.
Say, “Computer, fix this!” to trigger a keystroke that runs a Nisus Writer
Pro macro (see Create Macros in Nisus Writer Pro) to correct formatting
issues in your current document.
If you like, you can eliminate the need to press Esc and instead use a trigger
word. For example, if you preface each command with “Computer…” that can
alert Speakable Items that the next thing you say should be interpreted as a
d T d
hi
S
P f
A
ibili
S
k bl

command. To do this, go to System Preferences > Accessibility > Speakable
Items > Listening Key. Select Listen Continuously with Keyword, optionally
enter a different name (yes, you can call your computer “Cindy” if you want to),
and choose an item from the Keyword Is pop-up menu to specify whether the
keyword is optional, required before every command, or required only 15 or 30
seconds after the last command.
To learn more about Speakable Items, read the Apple support article OS X
Mountain Lion: Create spoken commands (which still applies to Mavericks).
You can also create your own speakable items using Automator; for instructions,
see SpeakableWorkflows at Mac OS X Automation.
Tip: Speakable Items is only for performing commands, but Mavericks also includes a
Dictation feature, which transcribes what you speak into editable text. To learn more, read the
Apple support article Mac Basics: Dictation lets you speak text instead of typing.
Keep Tabs on Important Activities with
Notifications
If you’ve used Mavericks (or its predecessor, Mountain Lion) for any period of
time, you’ve undoubtedly seen the system-wide Notifications feature, which puts
little messages in the upper-right corner of your screen to tell you about things
like new email messages, Twitter mentions, and birthdays.
Although they may sometimes seem more like time-wasters than time-savers,
notifications can become useful automation tools when you tailor them to your
needs, using them to reveal important information that would otherwise require
significant digging.
First, the basics. To determine what the system does when an app sends a
notification:
1. Go to System Preferences > Notifications (Figure 7).

Figure 7: Set system-wide notifications for each app in the
Notifications pane of System Preferences.
2. Select an app in the list on the left.
3. Click None, Banners, or Alerts to set what type of notification (if any)
should appear when the app needs to notify you of something. Banners
appear and then fade away automatically after a few seconds, whereas
Alerts stay on screen until you dismiss them.
4. Select Show Notifications on Lock Screen if you want to display
notifications for that app when your Mac’s screen is locked and requires a
password (configure the screen lock in System Preferences > Security &
Privacy > General).
5. Set any other options, which vary from app to app, to meet your needs. For
example, you can determine whether a notification from Mail includes a
preview of the messages.
6. To set the maximum number of notifications for this app that can
accumulate in Notification Center—the global list of alerts that appears

when you click the list 
 icon in the upper-right corner of your screen—
choose 1, 5, 10, or 20 Recent Items from the Show in Notification Center
pop-up menu. Or, to prevent notifications from appearing in Notification
Center at all, uncheck the box here.
7. If you want to prevent Notification Center from listing the number of
outstanding notifications on the app’s Dock icon, uncheck Badge App Icon.
8. If you want to prevent Notification Center from playing a sound when a
notification occurs from this app, uncheck Play Sound for Notifications.
Changes take place immediately.
Having set up those system-wide preferences, you need to visit each individual
app’s preferences to determine which events or conditions trigger a notification.
That’s where the real power comes in.
Every app is different, but let me give you some ideas about uses for
notifications that may not be immediately obvious:
Mail: You can set Mail’s preferences to trigger a notification whenever a
new message arrives in your Inbox, any mailbox, or a particular smart
mailbox; or when you receive a message from a sender you’ve designated
as a VIP, or from anyone in your Contacts list. You can even have a rule
trigger a notification according to any criteria you choose (see Manage
Incoming Apple Mail with Rules).
AppleScript and Automator: If you use either of these tools to automate
your Mac (see Use OS X Automation Technologies), you can include a
command to display a notification when any desired condition exists. (In
AppleScript, it’s display notification [text]; in Automator,
use the Display Notification action.) For example, you might have an
AppleScript Folder Action display an alert when someone adds a file to a
shared folder. For more details, see the System Notifications Support page
at Mac OS X Automation.

Macros: Keyboard Maestro (see Control Your Mac with Keyboard
Maestro) can trigger a notification as a step in any macro—which means
you have almost unlimited control over what conditions result in a
notification. For example, you might have a macro that runs every hour to
check for certain text on a Web page, and it could display a banner if the
text exists.
Log In to Your Mac Automatically
When you first set up a new Mac, part of the process involves creating an
administrator account for yourself as the owner. If you stick with the default
settings, OS X logs you in automatically with that account whenever you turn on
or restart your Mac.
The alternative is to select or enter your username and then type your account
password. And that’s a safer approach, because it means that if your Mac were
lost or stolen, or if someone else got access to it, there’d be at least a modest
barrier between any other user and your data. However, if you’re confident
enough in your Mac’s physical security to enable automatic login and it’s
currently disabled, you can turn it back on as follows:
1. Go to System Preferences > Security & Privacy > General.
2. Click the lock  icon and enter your password.
3. If Disable Automatic Login is selected, deselect it. (If it’s already
deselected, you’re done.)
Note: If FileVault (OS X’s full-disk encryption capability) is enabled, automatic login isn’t
permitted, so the Disable Automatic Login control does not appear.
4. Choose your username from the Automatically Log In As pop-up menu and
enter your password.
5. Click OK.

The next time you turn on or restart your Mac, it logs you in automatically and
you’ve just saved yourself a bit of time every day.
Open Items Automatically on Login
Why waste time every morning opening up Mail, Safari, and whatever other
apps or documents you always use? Instead, set them to open automatically so
you’ll be good to go.
You log in—either explicitly (by entering your username and password) or
implicitly (using Automatic Login, described just previously)—when you turn
on or restart your Mac, or when one user logs out (Apple  > Log Out Username)
and another logs in. Whenever that happens, OS X can open apps, folders, or
documents for you.
To configure any item currently in your Dock to open on Login, click and hold
on its Dock icon and choose Options > Open at Login from the contextual menu.
To configure other items to open on login:
1. Go to System Preferences > Users & Groups > Login Items.
2. Drag any item (application, file, folder, server, etc.) from the Finder to the
list. Alternatively, click the plus 
 button, navigate to the item you want to
open, and click Add.
3. To hide any app (that is, to achieve the same effect as opening the app and
choosing Hide App Name from the application menu), select its Hide
checkbox.
The next time you log in, the specified items open automatically. (To remove an
item from this list, select it and click the minus 
 button.)
Sleep, Wake, and Shut Down on a Schedule

You can shut down your Mac or put it to sleep manually whenever you want by
using commands on the Apple  menu, but you can also configure your Mac to
shut down, sleep, or wake on a schedule. The main reason to bother with this is
to save electricity. Even though modern Macs don’t use very much, it does add
up over time. Once you’ve got this set up, your Mac will be ready and waiting
for you when you arrive to work in the morning.
To configure automatic shutdown, sleep, and wake settings:
1. Go to System Preferences > Energy Saver.
2. If your Mac is a laptop, click either Battery or Power Adapter to configure
its behavior with that power source (and then repeat the process with the
other source).
3. To schedule automatic sleep after an idle period, drag the Computer Sleep
slider to the desired time period (or Never, to never sleep automatically).
You can independently adjust Display Sleep, if you like. (Depending on
your Mac model, your options may be slightly different here.)
4. To spin down any internal or external hard disks (not applicable to SSDs),
select Put Hard Disks to Sleep When Possible.
5. Click Schedule, and then:
To schedule automatic startup (if your Mac is shut down at the
scheduled time) or wake (if it’s asleep), check Start Up or Wake. Then
choose a day or range from the pop-up menu (such as Every Day,
Weekdays, or Thursday) and enter a time.
To schedule automatic sleep, restart, or shutdown on a fixed schedule,
select the second checkbox, choose Sleep, Restart, or Shut Down from
the pop-up menu, and again set the desired day(s) and time.
Your Mac then sleeps, shuts down, and/or wakes according to your new settings.

Tip: When you shut down or restart your Mac manually, make sure Reopen Windows When
Logging Back In is selected in the dialog that appears, in order to return your Mac to its
previous state without your having to manually open apps, documents, and windows. On the
other hand, if you’ve been annoyed that windows you no longer want keep appearing when
you restart, this is the setting to disable.
Schedule Any Activity on Your Mac
OS X includes three built-in tools that can schedule activities such as launching apps or
running scripts to occur whenever you like:
Launch daemons and agents: A background process called launchd interpret
specially formatted text files stored in various folders in order to start other processes,
called daemons or agents. Depending on the files’ contents, apps or scripts can run on a
fixed or recurring schedule, on demand as needed, or all the time (reopening
automatically if quit). Setting up these actions by hand isn’t very easy (see Apple’s
developer guide Creating Launch Daemons and Agents), but you can use a graphical
tool such as Lingon or LaunchControl to make the process much simpler.
Cron: Like all Unix variants, OS X includes a tool called cron that lets users schedule
activities. It’s less flexible than using a daemon or service, but also easier to set up. A
tool called Cronnix makes the process simpler than fussing around on the command line.
At: Another command-line utility, at is designed to run a command in the future—but
only once, not on a repeating schedule. It’s disabled by default, but you can enable it and
use it if you want; for instructions, see Developer Coach.
Update Apple and Mac App Store Software
Automatically
In Mavericks, all updates to Apple software (including OS X itself, built-in
software such as Safari and QuickTime, and optional purchases such as iPhoto
and Pages), are delivered through the Mac App Store app. And, of course, you
can update all the third-party apps you’ve purchased from the App Store at the
same time.
To check for updates manually, you open the App Store app and click the
Updates button on the toolbar. (As a shortcut, choose Apple  > Software

Update.) Then, to update a single application, click the Update button next to it.
(In some cases, Apple groups multiple software updates together; click the More
link to see details on each one.) To update all the listed applications at once,
click Update All. Enter your Apple ID and password if prompted to do so, and
click Sign In. The App Store downloads and installs the updates.
But this is a book about automation, so we’re more interested in how to make
this happen automatically! You can have Software Update merely inform you of
future updates or download (and optionally install) them as soon as they appear.
Because software updates often fix crucial bugs and add important features, I
like to learn about them as soon as possible. And, because I install almost every
update, it saves time to let OS X download updates automatically in the
background. I don’t necessarily install updates as soon as they appear, because I
might be busy with things that can’t be interrupted—and I want to know when
something might be about to change—but some people may choose to do so as
the fastest and most hands-off method. Still others never want to be interrupted
with alerts about new software and dislike the idea of anything downloading
behind their backs, or they need to keep an eye on a bandwidth usage cap. You
can decide where you stand and set up your Mac accordingly.
To configure App Store updates, follow these steps:
1. Open the App Store pane of System Preferences.
2. Select or deselect (as you prefer) the Automatically Check for Updates
checkbox to enable or disable automatic checking. If it’s selected, you can
also select any or all of:
Download Newly Available Updates in the Background, which not
only notifies you of updates but downloads them for you so you can
install them without further waiting
Install App Updates, which installs updates to nonessential apps (that
is, those that don’t fall into the next category) automatically in the

background
Install System Data Files and Security Updates, which automatically
(without prompting you) installs essential updates—but only after
they’ve been available in the Mac App Store for 3 days
3. If you’re signed in to the Mac App Store, you can also check or uncheck
Automatically Download Apps Purchased on Other Macs, which does
exactly what it says.
From now on, your App Store software updates according to your settings
without you doing a thing.
Tip: If your Mac supports Power Nap (see OS X: About Power Nap) and you enable it in the
Energy Saver pane of System Preferences, your Mac also downloads updates from the App
Store when it’s asleep—as long as it’s plugged in to AC power.
Update Non-Mac App Store Software
Automatically
Software that doesn’t come from the App Store must use a separate update
mechanism. Happily, most modern applications contain some sort of update
feature. Unhappily, they don’t all work the same way. Some check for updates
every time they’re launched, or on a fixed schedule, while others check only on
demand; of those that do check automatically, not all have this feature turned on
initially. Some programs can download and install new versions of themselves
automatically, while others download a disk image and expect you to open it and
run the installer yourself; still others do nothing but open a Web page with links
to updates you can download manually.
In an ideal world, updates would require no intervention other than a click or
two to confirm that you’re aware of, and approve of, the installation; everything
else would happen automagically. Because many applications still lack that level
of automation, though, you may have to perform some extra steps.

For now, do the following. Whenever you download and install a new app that
doesn’t come from the App Store, check its preferences to see whether there’s an
Automatically Check for Updates (or similar) feature. If so, be sure to turn it on!
If you can choose how often to check, choose the most frequent option. You
might also do the same for your most frequently used apps the next time you
open them.
Tip: Don’t just check stand-alone apps for an Automatically Check for Updates feature; also
look for this option in preference panes, status menus, Mail plug-ins, and other such software.
The wording of the command may vary, but such commands (Figure 8) usually appear in the
application menu, the Help menu, or the Preferences window.
Figure 8: In some applications, such as Transmit (left), the Check
for Updates command appears in the application menu—the one
with the same name as the application. In others, such as Excel
(right), it appears in the Help menu. Wording may also differ between
apps.
Work with Rulebased Searches
When you put together a rule-based search—whether it’s a smart folder in the
Finder or a smart playlist in iTunes—you let your Mac do the tedious work of
identifying items (files, messages, songs, and so on) that are of interest to you.
This saves you the time and effort of manually looking through many potential
matches for just the right thing. Define the search once, and even if it’s
extremely complex, you can repeat it whenever you want with just one click—a
classic automation shortcut.

Advanced searches in the Finder, rules in Mail, smart playlists in iTunes, and
numerous other environments—including some in third-party apps such as Hazel
(see Organize Files with Hazel) and DEVONthink—use a nearly identical
interface for finding things based on a series of conditions. Once you’ve learned
how to construct one of these rule-based searches in one place, you can recycle
that knowledge, with minor variations, in lots of different places, many of which
I cover in the next topic (Create and Use Smart Containers).
Before we begin, let me clarify some basic concepts:
Condition: A condition (sometimes called a criterion) is any piece of
information used to identify an item you’re searching for—a word in a
filename, a modification date, the sender of an email message, and so on.
Multiple conditions: A search can have more than one condition, which
can be used together or individually.
For example, I can search for all files that both (a) contain the word “book”
and (b) were modified within the last week, in which case files that have
one of those attributes but not the other wouldn’t show up in such a search.
This is known as an All search, because all the conditions must match. Or I
can search for files that either contain the word “book” or were modified
with the last week, which would match a much larger number of files. This
is known as an Any search, because matching any one of the conditions is
enough for a positive result.
Nested conditions: Most rule-based search environments (sadly, not Mail’s
rules) have a hidden capability to simulate Boolean (AND/OR/NOT) logic
by grouping conditions in Any, All, and None categories. For example, I
can search for files that contain Any of Jack or Jill, or All (i.e., both) of
Cindy and Sandy, but None of Thomas. In other words, written in Boolean
notation it would look like (Jack OR Jill) OR (Cindy AND Sandy) AND
NOT Thomas. You can use this technique to devise highly detailed and
specific searches.
I’ll
th Fi d
t ill
t t h
t
t
l b
d
h
b

I’ll use the Finder to illustrate how to set up a rule-based search; remember, you
follow the same steps wherever you use this technique.
To perform a rule-based search in the Finder:
1. Open any Finder window and press Command-F (for Find). The insertion
point jumps to the Search field in the upper-right corner.
2. Type some text in that field, such as book. The window begins filling with
all the files on your Mac containing that text. Press Return to search for the
text you’ve entered in the contents of any file, or select a narrower category
(such as “Name matches: book”) from the pop-up menu that appears.
Your search now has its first condition, such as “must contain the text
book,” but you can change that later.
3. Optionally change the search scope by clicking a folder name, This Mac,
All, or another term on the left side of the search bar.
4. Click the round plus  button next to the Save button (below the Search
field). A new row appears (Figure 9).
Figure 9: When you click the plus button, a new condition row
appears.
5. From the leftmost pop-up menu in this new row, choose an attribute to
search for, such as Kind, Name, or Contents.
Depending on what attribute you choose, the rest of the row may change.
For example, if the attribute is Kind, then the only thing left in the row is a
single pop-up menu you can use to pick a kind. But if you choose
[Created Date], you see additional pop-up menus and/or fields
(Figure 10), where you can specify, for example, is [Within Last]
[12] [Days]. With each choice you make, the rest of the row adjusts
accordingly. For example, if you chose [Created Date] followed by
is [exactly], then the remainder of the row changes to show only a

date field where you can enter a single, specific date. Use the pop-up menus
and fields to specify your entire condition as you wish.
Figure 10: As you change search attributes, the rest of the row
adjusts.
Tip: In Finder searches, you can add many attributes to that leftmost pop-up menu. To
learn more, read my Macworld article Six quick Spotlight tips (warning: video plays
automatically).
6. To add a second condition that will narrow the search, click the plus 
button at the right of the current condition and repeat Step 4.
Note: In most apps that use search rules like this, a pop-up menu with Any, All, and
sometimes None appears above the conditions either all the time (or as soon as you add a
second condition). In the absence of an explicit menu, assume it’s an All search—that is, all
conditions must be satisfied for an item to match.
7. To add a nested condition or group of conditions with its own
Any/All/None specification, hold down the Option key and click the ellipsis
 button, which replaces the plus button. A new section (Figure 11)
appears.
Figure 11: When you hold down Option and click the ellipsis button,
your search options expand considerably.
Choose Any, All, or None from the pop-up menu, fill in the condition just
as in Step 5, and optionally add more conditions as in Step 6. Repeat this
step (at any level of the rule) to add still more nested conditions.
8. Recall from Step 2 that in Finder searches, whatever you initially typed into
the Search field remains part of the search. If you want to remove it (to

search only for the detailed conditions you added later), select the text in
the Search box and press Delete.
That may seem like a lot of steps, but most of them are optional—and once
you’ve done a few searches this way, the process will seem both quick and
obvious. With this technique under your belt, you can now move on to create
smart containers.
Note: When you construct rules in Mail (see Manage Incoming Apple Mail with Rules), Hazel
(see Organize Files with Hazel), and other such apps, the search conditions are only part of
the equation—you then go through a similar procedure to specify what action(s) should occur
when an item matches.
Create and Use Smart Containers
The Finder has smart folders. iTunes has smart playlists. Mail has smart
mailboxes. iPhoto has smart albums. Contacts has smart groups. I refer to all
these (and similar constructions in other apps) collectively as smart containers.
Although they may look like folders or mailboxes or whatever, they’re really just
saved searches. You construct search rules as described previously, click a
button to save the search, and give it a name. Then…hey, presto! Select that
smart container whenever you want to display an up-to-date list of all the items
that currently match your search.
Here’s a quick overview of how to create and use smart containers in several
popular apps:
Smart folders (Finder): Choose File > New Smart Folder (Command-
Option-N), or simply create a search rule as described in the previous topic.
When you’re finished, click the Save button in the search bar. Give the
smart folder a name, choose a location (the default is ~/Library/Saved
Searches), and for maximum convenience, also check Add to Sidebar.
Click Save. Thereafter, select that item in a Finder window’s sidebar (or
open it wherever you saved it) to show currently matching items.

Smart playlists (iTunes): In iTunes, choose File > New > Smart Playlist
(Command-Option-N). Fill out the desired conditions, and optionally select
the checkboxes to limit the playlist to a certain number of tracks, match
only checked items, or use live updating.
(I recommend live updating, by the way; without it, the smart playlist will
always show whatever it happens to match at the time you created it, unless
you manually update it by right-clicking or Control-clicking the smart
playlist and choosing Update Smart Playlist from the contextual menu.
However, live updating may make iTunes slower to respond; if so, you’ll
have to decide which annoyance you’d rather endure.) To view and play the
items in that playlist, select Playlists (if the sidebar isn’t already visible)
and then select the smart playlist.
Smart mailboxes (Mail): In Mail, choose Mailbox > New Smart Mailbox.
Fill in the conditions you want to use, bearing in mind that Mail does not
support nested Any/All/None conditions. Optionally select Include
Messages from Trash or Include Messages from Sent, as you prefer. Give
the smart mailbox a name and click OK. Smart mailboxes appear in their
own category in Mail’s sidebar—if it’s not visible, choose View > Show
Mailbox List.
Smart albums (iPhoto): In iPhoto, choose File > New Smart Album. Fill
in the your conditions, name the smart album, and click OK. Smart albums
appear in the Albums portion of iPhoto’s sidebar. To view all of the photos
in a smart album, select it.
Smart groups (Contacts): In Contacts, choose File > New Smart Group
(Command-Option-N). Fill in the conditions that you want to use, name the
smart group, and click OK. Smart groups appear with your other groups (if
any) in the sidebar. To view all the contacts in a smart group, select it.
Note: To edit an existing smart playlist, mailbox, album, or group, right-click (or Control-click)
it and choose Edit Smart Container Type from the contextual menu.

If you’re still not sure how a smart container might serve as a useful shortcut,
consider these ideas:
A smart folder that shows all the files created or modified in the preceding
calendar year that also have the tag tax info, regardless of the files’
locations. Handy for tax time!
A smart mailbox that shows you all the messages you sent or received in
the last month that mention a certain family member, regardless of where
those messages are filed.
A smart playlist in iTunes that includes all purchased music tracks that you
haven’t yet listened to at least five times. Make sure you get to know all
your newly purchased music!
A smart group in Contacts that contains all the other parents of kids in the
same class as your child. You can do this by having a smart group [Note]
[Contains] [school] and then putting the word “school” in the Note
field of each parent’s contact. As the class composition changes, you can
add or remove “school” from records, and the smart group updates
automatically.

Automate Your Input Devices
We’ve talked about your keyboard already, and we return to it in several future
chapters. But I want to take a moment to talk about other input devices, such as
the one you use to move your pointer, as well as game controllers and other
special-use input devices.
Remember when every Mac came with a one-button mouse? Now multitouch
trackpads and Magic Mice (with no visible buttons) are de rigueur, but it’s still
easy to find third-party mice, trackballs, and other input devices with numerous
configurable buttons, wheels, and other controls. Even Apple’s minimalist
pointing devices can be configured to do special things with gestures and
combinations of modifier keys and clicks.
Every extra button or control on an input device can be put to some good use.
Although you need not use anything other than a simple keyboard and a pointing
device with a single button, you may—depending on your needs, tasks, and
disposition—find it easier and quicker to do certain tasks via a dedicated button
or knob than with an obscure menu command or keyboard shortcut.
Would you indulge me in a brief story?
I used to manage software development for Kensington, a computer accessories
company. One of our products was a four-button trackball called Expert Mouse
(or, in some variants, Turbo Mouse). I shared a large office called the Mouse
Lab with three other people—Cris, Debra, and Don. One afternoon when we all
should have been busy with more productive tasks, we made up a game that,
while goofy, illustrates the kind of thing you can do with a bit of clever
automation and a few extra buttons on your input device.
We each started by making rules in Outlook (our email program) to play unique
sounds whenever we received an email message from one another. For example,
h
I
i
d
f
D
Zi
! b
h
D b

when I received a message from Don, my computer went Zing! but when Debra
sent me a message, it went Pop! Everyone had a custom sound for each other
person in the room.
Next, we configured MouseWorks (the software, since superseded by
TrackballWorks, used to control our trackballs) so that each of the three extra
buttons—besides the one used for a regular click—sent one of the others a blank
email message.
Is your head spinning yet? Well, here’s the result of our labors. I click button #2
on my trackball and Don’s computer makes a Crack! sound. Don clicks button
#3 on his trackball and Debra’s computer makes a Ping! sound. Cris clicks
button #4 on his trackball and my computer makes an Oof! sound. And so on. So
we spent half the day zapping each other with our trackball buttons. You had to
be there, I guess, but it was hilarious, like a virtual pillow fight.
That’s not a useful example of automating input devices, I admit. But perhaps it
will inspire you to think up customizations that will make you more productive.
Use Trackpad and Magic Mouse Gestures
If you have a Mac laptop with a built-in trackpad, or a stand-alone Magic
Trackpad, you have at your disposal a device that supports not just moving the
pointer and clicking, but also scrolling, switching apps, displaying contextual
menus, zooming, and numerous other actions by way of gestures such as
swiping, pinching, and tapping (with one or more fingers). Apple’s Magic
Mouse also has a multitouch-capable top surface with support for many (but not
quite all) of the same actions.
You must configure your trackpad or mouse with the gestures you want to use—
that’s the easy part. The harder part is training your fingers to perform these
gestures until they become second nature.
To set up your multitouch trackpad or Magic Mouse:

1. Open the Trackpad (Figure 12) or Mouse pane of System Preferences,
depending on which device you’re using.
Figure 12: The Trackpad pane of System Preferences has
numerous options for configuring taps and gestures.
2. In each view (Point & Click, More Gestures, and—for trackpads only—
Scroll & Zoom), hover over a gesture to display a video demonstrating how
it works.
3. To enable a gesture, select its checkbox.
4. Some gestures have multiple options—use the pop-up menu under the
gesture name to specify your preference. For example, in the More Gestures
view of the Trackpad pane, the Swipe Between Full-Screen Apps gesture
can be performed by swiping left or right with either three fingers or four
fingers.
5. Practice the gestures you’ve just configured! You may find it helpful to
create a little cheat sheet with the gestures and settings you’ve chosen (e.g.,
“4 L/R to switch apps”) until you’ve memorized them.
As you use gestures, you’ll find them increasingly natural—and it will drive you

crazy to use a Mac with different settings!
Unfortunately, Apple offers no way to assign custom actions to trackpad and
mouse gestures—you can’t, say, swipe three fingers diagonally to run a script.
So, the point of enabling and using these gestures isn’t to do new things, but to
do existing things more easily—with practice, you may find that if your fingers
are already on the trackpad, it’s quicker to zoom by pinching than by dragging a
slider; it’s easier to scroll by dragging two fingers than by clicking arrow
buttons; and so on.
Save Clicks with Thirdparty Input Devices
In Apple’s design aesthetic for pointing devices, even a single visible button is
considered excessive. But some people like having lots of buttons, and if you
find it easier to remember “click the second button from the left” than “swipe
down with three fingers” do perform a particular action, a third-party device
might be just what you need.
During the time I worked at Kensington, we had a trackball model (Turbo
Mouse Pro) with 11 buttons and a trackpad (WebRacer) with 22 buttons—all
programmable! Those particular models have been discontinued, but companies
like Kensington, Logitech, and Microsoft still sell mouse and trackball models
with multiple buttons that you can customize to meet your needs. In some cases
you can also customize scroll wheels and other controls.
An obvious use for an extra button is to perform a double-click. (Recall that, all
things being equal, less clicking is preferable.) If you have your hand on your
pointing device most of the time anyway, perhaps a finger naturally falls on an
“extra” button that can serve this purpose. You might also use buttons for
frequent operations such as Undo, Cut, Copy, Paste, switching apps, and so on.
Most third-party input devices come with software that lets you customize the
controls. Kensington trackballs come with TrackballWorks, Logitech pointing
devices come with Logitech Control Center, and Microsoft mice…somehow,

even in 2014, include software only for Windows. But no matter, you can still
customize them with a third-party utility called USB Overdrive, discussed next.
Other actions you can potentially assign to mouse buttons include:
Right-clicking, Control-clicking, or clicking with other virtual modifier
keys
Triple-clicking
Drag lock (drag without holding down a button)
Opening apps, documents, URLs, and AppleScripts
Sending keystrokes (as if you’d typed keys on a keyboard)
Navigating forward/back in a Web browser
Controlling your system’s volume, brightness, and other settings
Simulating previous/next/pause/play commands in iTunes
Program an Input Device with USB Overdrive
Many fine input devices come only with Windows software (or in some cases,
no software at all), but thanks to a piece of shareware called USB Overdrive,
Mac users can fully configure nearly any USB mouse, trackball, keyboard,
gamepad, joystick, or other HID (human interface device) product—as well as
most Bluetooth pointing devices. The app functions in much the same way as
TrackballWorks and Logitech Control Center—pick a device, pick a button, pick
an action for that button; repeat as needed.
If you were so inclined, you could get, say, a Logitech Extreme 3D Pro joystick
and program each of its 12 buttons, each of the 8 directions on its hat switch, the
throttle control, the joystick directions, and the twist rudder control to do
something different on your Mac. Of course, the obvious use would be to
program all the controls to work in a game such as a flight simulator, but I’m

just saying…if you wanted each button to send a different person a blank email
message that resulted in a sound playing on their computer, you could.
Griffin PowerMate
The PowerMate is a large, shiny knob with a glowing blue base and a USB cable. It’s about
as simple as an input device can get. And yet, with the included software, you can program it
to do an astonishing array of tasks. Twisting the knob left or right, or pressing down on it
(either a short press or a long press)—with or without modifier keys—can trigger keystrokes,
change your Mac’s volume, launch AppleScripts, open apps, and perform tons of other
actions.
And, those actions can vary according to the frontmost app. So you might use the PowerMate
as a volume control (when twisting) or a mute toggle (with the button) while in iTunes, but use
it to go to previous/next pages in your Web browser and scrub left or right in GarageBand.
Not only that, but you can configure the blue light in the base to alert you to various conditions
on your Mac—on/off, brightness level, and pulse speed can all mean something different.
Learn about Other Special Input Devices
I’ve mentioned multi-button mice and trackballs, programmable trackpads, extra
keyboard keys, gamepads and joysticks, and the Griffin PowerMate as examples
of user-configurable input devices. In addition, just about any other USB or
Bluetooth input device can be connected to your Mac, and if it doesn’t happen to
come with its own software, you can likely use USB Overdrive to program its
actions.
A few examples of the many special-purpose devices that you might consider
are:
The Ergodex DX1 lets you arrange 25 individual keys in any pattern you
like on a tablet-like surface to create a customized keyboard or special-use
controller.
The iGrip Ergonomic Keyboard looks more like a game controller than a
keyboard, and indeed it can serve in either capacity (and as a pointing
device).

The Leap Motion controller is an infrared sensor that detects the positions
of your hands and fingers in the air and lets you perform nearly any action
with a gesture. Guess which gesture I’ve assigned to Force Quit.
Pageflip pedals let you turn the page of sheet music (forward or backward)
when viewing it on a screen rather than on paper.
RollerMouse products use a horizontal bar, positioned in front of your
keyboard, that both rolls around its axis and slides back and forth to move
your pointer. They also feature buttons for left-, right-, and double-click,
plus Copy and Paste.
Piano-style keyboards connected directly to a USB port or via a MIDI
interface can be used not only for playing music, but also for triggering
other actions depending on the key(s) pressed.
X-keys input devices from P.I. Engineering include crazy keyboard-and
keypad-like button arrays, with or without an analog joystick or jog &
shuttle control, foot pedals, and other switches.

Automate Text Expansion
Even if you’re a great typist, you can save time and increase your accuracy with
software that watches what you type and dynamically replaces abbreviations
you’ve previously specified with longer chunks of text. (And if you’re not a
great typist, such software can increase your effective typing speed!)
I mentioned earlier that whenever I type dtpo, my Mac automatically expands
that into DEVONthink Pro Office. That’s just one of dozens of abbreviations I
use in my own work. I also use TCo to produce Take Control of, syp to produce
System Preferences, and so on. The longer and more complex the text in
question, the more useful automatic text expansion becomes.
Text expansion isn’t just for names and short phrases. You can use it for
addresses, phone numbers, URLs, boilerplate text for common email replies,
HTML code snippets, and so on. Depending on which software you use for text
expansion, your snippets might also include styles (such as bold and italic),
graphics, the current date or time, variables, AppleScripts or shell scripts, the
contents of the clipboard, and more.
The great thing about text expansion is that you don’t have to do anything
special to use it—you simply type. You don’t need modifier keys like Command
or Control, and you don’t need to hunt for menu commands. And it can be used
nearly anywhere.
One catch, however, is that you must be careful when choosing abbreviations—
since text expands as you type, you might end up making a lame mistake if
you’re not paying attention. For example, I thought I’d use km as an abbreviation
for Keyboard Maestro, but then I tried typing a distance in kilometers and got a
surprising result! So be sure to use abbreviations that will never occur on their
own, or even as part of another word. One technique many people use to solve
this problem is to double the first or last letter, as in kmm for Keyboard Maestro.

Note: Although I say “text expansion,” the very same feature can be used for simple
replacements, even if the replacement isn’t longer. For example, if you frequently mistype
“the” as “teh,” you could use text expansion to replace the latter with the former—or you can
correct “MacWorld” to “Macworld” and “PhotoShop” to “Photoshop.”
Use OS X’s Text Replacement
OS X includes its own rather rudimentary textexpansion capability, known as
text replacement.
To configure text replacement:
1. Go to System Preferences > Keyboard > Text (Figure 13).
Figure 13: Set up OS X text replacements here.
2. Click the plus 
 button.
3. Type the text you want to type in the left-hand (Replace) field, and then
type the text you want to end up with in the right-hand (With) field.

Tip: Although replacement text can’t include a Return character, you can type Option-
Return to include a line break.
4. Press Return.
Repeat these steps as many times as you like to add further abbreviations.
Once configured, text replacement is seamless: you type one of your
abbreviations, and as soon as you press a trigger key—Space, Tab, or Return, or
a punctuation character—the abbreviation is replaced with the text you’ve
specified. Abbreviations are not case-sensitive, so if you set up myurl to
expand into http://www.myurl.com/, then that will happen even if you type
MyURL.
And, your abbreviations even sync across your Macs and iOS devices if they’re
all signed in to the same iCloud account and Documents & Data is selected in
the iCloud pane of System Preferences.
Although text replacement works well enough for what it is, this feature has
numerous limitations:
It doesn’t work in all apps; the only way to know where it does work is to
look for the Edit > Substitutions > Text Replacement menu command,
make sure it’s selected, and try out your abbreviations. (For example, it
doesn’t work in BBEdit, Nisus Writer Pro, or Word—but the latter two
have their own built-in textexpansion features.)
If your replacement text is longer than about 25 characters or uses the
Option-Return trick for multiple lines, the text will be cut off in the
Keyboard preference pane—you won’t be able to read it.
You can’t configure the trigger characters that cause abbreviations to
expand.
You can’t include styled text, graphics, variables, or other such niceties.

So, if you like the idea of text expansion but find OS X’s built-in feature too
limited, it’s time for a more powerful, third-party tool.
Use a Thirdparty Text Expansion Utility
For vastly more power and flexibility when it comes to text expansion, turn to a
third-party utility. At the moment, I’m aware of four main contenders for OS X
that are under active development: aText, TextExpander, Typinator, and
TypeIt4Me.
These four tools share many features in common beyond mere text replacement
—for example, all of them can:
Insert the current date or time (or any portion of it, such as “Tuesday”)
Respect case when expanding abbreviations
Insert snippets that include styled text and graphics
Ignore certain apps where you don’t want text expansion to occur
Include the contents of the clipboard in the expanded text
Perform simple calculations on numbers and dates, including variables
Reposition the insertion point to any arbitrary location after expanding text
Use abbreviations to trigger AppleScripts
Sync clippings and abbreviations via Dropbox
These four utilities are much more alike than different, and most users should be
equally content with any of them. I will, however, point out a few distinguishing
characteristics:
aText: aText strikes me as having the least-polished interface of the four
utilities—it doesn’t even include online help or any other documentation—
but what it lacks in looks it makes up for in an extensive feature set. Among

other things, snippets can include editable fields, and can launch shell
scripts as well as AppleScripts. aText is also the least expensive option, at
$5.
TextExpander: Like aText, TextExpander has editable fields for fill-in-
the-blanks snippets. It also includes some spiffy predefined shortcuts, such
as one that uses AppleScript to shorten any URL on your clipboard with a
service such as bitly.com or is.gd. And, there’s even an iOS version
(TextExpander touch), which can sync snippets with the Mac version.
TextExpander also has the distinction of being the only item in this list with
its very own Take Control book—Michael Cohen’s Take Control of
TextExpander! And we’ve included a coupon at the end of the book for a
30-percent discount on TextExpander.
Typinator: Typinator, from the developer of KeyCue (discussed earlier) is
right up there on the feature comparison checklist, including fill-in-the-
blanks snippets, date and time calculations, and scripting support, among
dozens of other capabilities. You can download a free AppleScript snippet
that performs currency conversions—a neat trick. As of version 6,
Typinator also supports regular expressions, which means that expansions
can be triggered with user-defined patterns, not just fixed abbreviations—
and the replacements can also be pattern-based. However, unlike the other
apps in this list, Typinator doesn’t let you define which delimiters trigger
expansion—abbreviations can expand either as soon as you’re finished
typing them or at word boundaries, but you can’t specify which characters
signal the end of a word. And unlike TextExpander and TypeIt4Me, it
currently has no iOS counterpart. At the end of this book, there is a 30-
percent-off coupon for Typinator.
TypeIt4Me: TypeIt4Me has been around the longest—since way back in
1989! As a result, it feels a bit dated in spots. For example, its fill-in-the-
blanks feature, called AutoCue, pauses expansion of a snippet, with text
selected, while you enter the content you want, and then continues when
you press Tab. That’s clunkier than a simple dialog with fields for entering

all the values at once, but it gets the job done. On the other hand, it can use
Apple’s spelling dictionaries (in multiple languages) for autocorrect. It also
has an iOS counterpart (TypeIt4Me Touch), but that hasn’t been updated in
a while. The developer informs me that updates to both the OS X and iOS
versions are in the works, however. And, you can save 30 percent on
TypeIt4Me with the coupon at the end of this book.
What I use: I was a TypeIt4Me user for a long time, but while I still like it, I now prefer
TextExpander. It receives more frequent updates and I find its user interface more appealing.
aText looks great too, but not great enough for me to switch from TextExpander.
The more time you spend working with a textexpansion tool, the more ideas
you’ll come up with for putting it to good use. Here are a few I haven’t
mentioned already:
Enter special characters without remembering how to type them. For
example, eurosymbol could “expand” to €, while rightarrow could
produce → and thumbsup could give you the  emoji.
Enter several paragraphs of greeked text (which is usually, in fact, based on
Latin) such as “Lorem ipsum…” with a quick abbreviation, such as
lipsum.
Type your Twitter handle, with or without an embedded, clickable link,
with an abbreviation such as @tw.
Replace your email program’s signatures with custom signature snippets
that appear wherever and whenever you need them.
Just to show you how this works, let me walk you through the steps of creating
and using an abbreviation in TextExpander:
1. Open the TextExpander app.
2. Click the New Snippet button.

3. In the Content area, type the text you want to end up with, such as
supercalifragilisticexpialidocious.
4. In the abbreviation field, type the abbreviation you want to use, such as
scfl. (Be sure not to reuse an abbreviation you used in System
Preferences > Keyboard > Text.)
5. Close the TextExpander window.
6. Now open an app where you can type text—for instance, TextEdit or Mail.
7. Type your abbreviation scfl and then a space or other punctuation. With a
“pop” sound, your abbreviation disappears and is replaced with
“supercalifragilisticexpialidocious.”
Clean Up Your Text with TextSoap
Text expansion is handy, no doubt about it, but sometimes your text needs help of another
kind. For example, do you often find extra spaces or return characters, duplicate lines, or text
in the wrong case? Do you find URLs or dates in the wrong format, styled text that should be
in HTML or Markdown instead, or other annoying errors? An app called TextSoap can solve
these and thousands of other problems, often with one click. (We’ve even included a coupon
at the end of the book so you can buy it at a 20-percent discount.)
Where a built-in solution isn’t quite what you need, you can make your own with a
combination of regular expressions (a powerful pattern-matching system) and styles, and you
can even build elaborate multi-step macros to manipulate text any which way. In that sense,
it’s somewhat like a subset of Nisus Writer Pro (see Automate Nisus Writer Pro)—the
Find/Replace capability and a portion of the macro language, but without all the other word-
processing features. Anyone who works extensively with text is bound to find many uses for
such a tool.

Automate the Finder
The Finder is a special app that runs all the time and lets you navigate all the
files, folders, and apps on your Mac. You use the Finder to organize, tag, and
locate files; connect to other devices on your network; mount and unmount
servers and external drives; and perform numerous other activities that involve
files, folders, and volumes.
The Finder is also the main place people go to open apps that don’t appear in the
Dock. When you want to launch an application, you might open a Finder
window, click Applications in the sidebar, scroll to the app you want, and
double-click it. Similarly, if you want to open a document in its default app, you
might dig through any number of nested folders in the Finder and then double-
click that document.
Since you use the Finder so much, it offers prime opportunities for automation.
For example, it’s possible to launch apps and open documents without clicking
and scrolling through any windows. In a second or less, while keeping both
hands on the keyboard, you can open an app or document without even knowing
where it’s located.
In this chapter, I discuss how to get started automating the Finder using OS X’s
built-in Spotlight tool, and then I move on to more powerful third-party utilities
that let you do even more.
Use the Spotlight Menu as a Launcher
You probably know about the system-wide Spotlight  menu on the right side of
your menu bar. Click the magnifying glass icon and start typing; OS X lists files,
folders, and other items on your Mac that match your search characters (Figure
14).

Figure 14: Type in the Spotlight search field and OS X displays
matching items.
Coming in Yosemite: Spotlight in Yosemite will gain an entirely new user interface that
makes it look much more like Alfred or LaunchBar (discussed later in this chapter). It will also
sport numerous new features, such as built-in Web searches and maps.
When it comes to finding files, Spotlight has a great many features—so many, in
fact, that there’s a whole book about them (Sharon Zardetto’s Take Control of
Spotlight for Finding Anything on Your Mac). Spotlight isn’t perfect, by any
means, but once you get the hang of it, it’s a pretty good way to find stuff.

It’s also an excellent way to launch apps (and open files). Plus, you can use it
without ever reaching for a mouse or other pointing device.
Here’s how you can use Spotlight as a launcher:
1. Press Command-Space to display the Spotlight search field.
2. Type the first two or three letters of an app’s name (for example, sa for
Safari, co for Contacts). If an app’s name has multiple words, you can type
the first letter of each (such as ka for Keychain Access); you can also type
InterCapped letters, as in bc for BusyCal.
Wait a moment while Spotlight searches. As it finds matching items, it lists
apps at the top.
3. If the app you want to launch is highlighted as the top hit, press Return to
launch it. If it’s not the top hit, you can either continue typing (to narrow
down the name further and increase the probability that the app you want
will percolate to the top of the list) or press the Down Arrow key until the
app you want is highlighted. Then press Return.
The app opens. This works regardless of where the app is located on your Mac.
You can use the same technique to open documents, iTunes tracks, records in
Contacts, items from your Safari history, and so on. You can also use it to look
up words in the dictionary and to perform Web searches.
The problem with all these other types of matches is that they’ll be further down
on the list, likely requiring quite a few arrow presses to get to them. (You can
customize the order of various categories in System Preferences > Spotlight >
Search Results.) Also, the list won’t show you all possible matches, and you may
have difficulty picking out just the item you want based on the menu entry.
Even if you restrict yourself to opening apps from the keyboard with this
method, Spotlight tends to be kind of slow. And because its results change over a
period of several seconds, it often takes that long to be sure that the thing you

want will still be highlighted when you press Return. So you can’t blindly type
in a few characters and trust that the right thing will open.
But with a bit of extra software, all these problems can magically disappear—
and you can gain significant new capabilities.
Use a Thirdparty Launcher
If your goal is simply to launch apps and open an occasional document with the
keyboard, then the Spotlight menu might be adequate. But wouldn’t it be even
better if you could that same Command-Space shortcut (or another one of your
choosing) as a system-wide trigger to perform dozens of other common actions,
too? If so, you’re the type of person who can use a third-party launcher.
Here are the sorts of things a third-party launcher can do that the Spotlight menu
can’t:
Learn your preferences as you use it, so that your most frequently used
items automatically bubble to the top of the list (and therefore require fewer
keystrokes)
Display matching items instantly
Browse your iTunes library for music by song, artist, composer, album,
genre, or playlist—and control iTunes playback
Perform actions other than opening items—for example, sending the items
via Mail or Messages, compressing files in the Finder, moving them to
another location, or adding tags
Show you specific details (such as phone number or address) from any
record in Contacts
Add calendar events using only the keyboard
Look up login items from the password utility 1Password

Perform simple math calculations
Mac users have four excellent choices in launchers: Alfred, Butler, LaunchBar,
and QuickSilver. Each of these utilities approaches the task a bit differently from
the rest, offering its own unique features and user interface. And each of them
has a ton of vocal supporters who insist that their favorite launcher is far superior
to all the others. I have my own preference, but I acknowledge that all four have
merits, and I won’t think (much) less of you if you choose a different launcher.
Note: Keyboard Maestro (see Control Your Mac with Keyboard Maestro) also has an app
launcher that you can activate with a user-defined keystroke, but I don’t include it in this list
because it’s less powerful and less convenient to use than stand-alone launchers—and it
doesn’t learn your preferences as you use it.
The typical way you use a launcher is much like the way you use the Spotlight
menu from the keyboard. Press Control-Space (or whichever hot key you’ve
selected) to open a window or other widget, and then begin typing.
In most cases—after a bit of training—the launcher matches whatever it was you
were looking for with only one or two characters. Then, press Return to open
that thing. For example, to open Mail, I press Command-Space, M, and Return.
Of course, that’s just the sequence for the basic task of opening an app or file;
you might type different characters, or use a different hot key or string of
commands, to perform additional actions.
Note: Although Spotlight uses Command-Space by default, if you’d prefer to use that shortcut
for a third-party launcher, you can change what Spotlight uses (for example, to Control-
Space) by going to System Preferences > Keyboard > Shortcuts > Spotlight.
Here’s a brief rundown of the four major Mac launcher utilities.
LaunchBar
I’ve used LaunchBar since 2002, and even though I’ve tried all the other
launchers (more than once), I always come back to LaunchBar because it just

feels right to me. It works the way I think (or vice-versa). Version 6, released in
June 2014, makes it even better. And, you can save 20 percent on LaunchBar
with the coupon at the end of this book.
You activate LaunchBar with a hot key—it’s Command-Space by default (which
I prefer, so I changed Spotlight to be Control-Space). Start typing (the name of
an app, file, contact, or whatever) and, when the right item is selected (Figure
15), press Return to open it. You don’t have to type the first letters of the name
exactly—for example, I type nw for Nisus Writer Pro and cp for CrashPlan. If
you type an abbreviation and then select something other than LaunchBar’s top
pick, it remembers that, and as you use it, it molds its suggestions to your actual
usage.
Figure 15: After activating LaunchBar with Command-Space (or a
custom keystroke), type a letter or two (M in this case) to see
matching apps and other items.
LaunchBar has many other talents, too. If you press the hot key and then start
typing numbers, LaunchBar assumes you want to perform a calculation, and lets
you do so without any other preliminaries. You can also use a feature called
Instant Send to do interesting things with selected files or folders—for example,
email them, open them with a non-default app, or run an AppleScript on them. I

use LaunchBar for looking up contact phone numbers, tracks in iTunes, and
1Password login items, among many other things.
Tip: To learn about LaunchBar’s five superpowers and much more, read Kirk McElhearn’s
book Take Control of LaunchBar.
Alfred
When you press Alfred’s hot key (Option-Space by default), a large floating
window appears. Start typing the name of an app, file, or other content, and
Alfred displays matches immediately. You can also type keywords to perform
commands such as restarting your Mac or hiding the current app. Alfred has
hundreds of features and nearly every aspect of the app is highly customizable.
Although Alfred itself is free, some of its most interesting features require a
purchase of the optional Powerpack (£17), which—among other things—adds
iTunes controls, access to Contacts, email searching, 1Password integration, a
clipboard history, and workflows (which combine Alfred features with system
commands and scripts to form vaguely macro-like tools; see Use Another Macro
Utility).
Butler
Butler pops up a floating window when you press its hot key (Control-Space by
default), and as you start typing, the results initially look much like those in the
Spotlight menu. However, unlike Spotlight, Butler can learn your favorite apps,
files, and other items as you use it. You can also trigger Butler from a menu, a
hot corner, or a user-defined abbreviation. Butler offers the usual range of
launcher actions—opening files and applications, searching the Web, running
AppleScripts, controlling iTunes, and so on. It also includes a clipboard history
(see Use a Macro or Launcher Utility).
Unfortunately, although Butler has lots of capabilities, I find its user interface
nearly inscrutable, and its included documentation isn’t much help either.
Perhaps it was just designed for someone who approaches software differently

than I do, but it seemed to require too much thought and effort to decode its
features, problems I didn’t experience with any of the other launchers I tried.
Quicksilver
Quicksilver is a free (donations accepted), slick, and highly modular launcher. It
includes just a few built-in features, but you can add any of dozens of free
plugins to enhance the app with additional capabilities. Some of these plugins
provide controls for specific apps (Apple Mail, Evernote, Google Chrome,
iPhoto, iTunes, Safari, and others) while others add lower-level features (such as
image and text manipulation, access to the windows and menus of open apps,
calculations, a clipboard history, and text manipulation).
You bring up the Quicksilver display by pressing a hot key (Control-Space by
default), and then start typing to find items to launch. You can also assign hot
keys to many other actions, such as iTunes controls. With the right plugins, you
can also trigger actions with mouse actions, trackpad gestures, or system events
(such as an application quitting or a file being compressed).
Organize Files with Hazel
You’re probably familiar with the way email rules work (whether or not you use
them yourself; see Automate Email). When a message comes in, your email
program checks to see if the conditions in your first rule match. If so, it performs
the actions associated with that rule (such as filing the message in a mailbox,
deleting it, or replying to it); if not, it moves on to the next rule.
A clever utility called Hazel does the same thing, except for files in the Finder
rather than for email messages. You can save 20 percent on Hazel with the
coupon at the end of this book.
In the Hazel pane of System Preferences, you select a folder and then set up one
or more rules for it (Figure 16). Rules can look for conditions such as how
recently a file was created or modified, its name, its size, tags, and other
attributes. When it finds a match, Hazel can perform one or more actions such as

applying a tag, moving or copying the file into another folder, deleting the file,
compressing or decompressing it, importing it into iTunes or iPhoto (for music
and photos, respectively), displaying a notification, or running an AppleScript or
shell script.
Figure 16: Rules in Hazel look and act much like rules in Mail—
except they target files rather than email messages.
Hazel rules have a similar effect as AppleScript folder actions. (If you’re not
familiar with them, flip ahead to Use AppleScript Folder Actions.) Hazel rules
require no coding, so they’re far simpler to use.
Hazel can also keep your Trash from overflowing with old and/or large files,
help you completely remove all traces of apps you delete, and remove duplicate
files.
I’ll admit, however, that the first time I heard about Hazel, I thought all its
automation features were appalling rather than exciting. I was afraid that it
would move things around without my knowledge, with the result being that I’d
lose (or at least lose track of) things rather than have a tidier Mac. I mean, I put
files in particular places for a reason, and I didn’t want some smart-alecky app

making up its own mind about where things should go.
But the thing is, Hazel does only what you expressly ask it to do. And if it makes
you more comfortable, it can alert you when it moves or deletes something so
that there are never any surprises.
Here are some examples of what Hazel can do for you:
Keep your Downloads folder clean. If you haven’t manually removed a
downloaded file after a week or so, Hazel can archive or delete it based on
rules you’ve set up.
Look for music files that appear in your Dropbox folder and then add them
to iTunes. It can delete the (now redundant) originals, too.
Keep your Desktop clutter-free by moving files into project-specific folders
if they’ve been on your Desktop for a few weeks without being opened.
Alert you when a shared folder changes (say, for a project you’re working
on with someone else).
Add photos from Dropbox to iPhoto.
It’s easy to get carried away with a tool like this, but I prefer to think of it as a
way to automate a few specific file-management tasks that would otherwise
require my time and attention.

Supercharge Your Clipboard
Cut, copy, paste. You’ve probably done those things thousands of times without
even thinking about your clipboard, the temporary storage space OS X uses to
hold whatever you’ve cut or copied. OS X’s built-in clipboard is boring, but
numerous utilities can supplement or replace it with powerful new capabilities
that will save you time and effort.
With one of these utilities installed, you’ll never again have to worry about your
Mac crashing right after you’ve cut or copied something but before you paste it.
You’ll also be able to see and use things you copied to your clipboard hours or
days ago; change the clipboard contents between the time you copy it and the
time you paste it; and more.
Learn What a Clipboard Utility Can Do
You might think you can do just fine without a clipboard utility, but remember:
people used to think that about cars and microwave ovens, too! Here are some of
the groovy tricks you’ll be able to perform:
Access your clipboard history: By default, every time you cut or copy
something to the clipboard, whatever was there before disappears. By
contrast, every utility mentioned in this chapter maintains a clipboard
history, which is to say you can view a list of dozens or hundreds of
previous clipboard items and paste any of them at will. (I especially like
using a keyboard shortcut, such as Command-Control-V, to paste the just-
previous item from my clipboard history—that way, I can easily copy two
different things and then paste them both consecutively.)
Juggle multiple clipboards: What if you had not just a single clipboard
(with a historical record of its contents) but two, five, or a dozen clipboards
—each with its own history? If you need to copy multiple sets of things and

refer to them by name or category, multiple clipboards may be just the
thing.
Store and reuse clippings: Normally, your Mac’s clipboard is cleared
when you shut down or restart. Most clipboard utilities preserve not only
your current clipboard but also your clipboard history across restarts. Some
even let you manually save and name clippings for future reuse.
Edit a clipboard’s contents: Say you’ve copied something you intend to
paste multiple times—but you find an error in the copied text. Some
clipboard utilities let you edit what’s on the clipboard before you paste it, so
that every pasted copy will be correct.
Filter a clipboard’s contents: Perhaps you’ve copied styled text but want
to paste it as plain text. Or maybe you want to do something far more
elaborate—perform find/replace operations or mathematical calculations on
the copied text, add to it or trim it, change its case, or manipulate it in some
other way. All this is possible with a utility that can filter a clipboard’s
contents.
Sync clipboards: At least one clipboard utility, PTHPasteboard Pro, can
sync all your clipboard contents between Macs.
Still can’t quite imagine how you’d use a clipboard utility? Let me give you
some concrete examples of how I do:
Copy the title of an article on the Web, copy its URL, and then paste the
two in sequence without having to switch back to a browser
Cut paragraphs or bullet points from several different locations in a book,
and then paste them all together at a new spot
Copy the URL for a product at Amazon and paste it with my affiliate link
baked right in
Copy raw HTML code but paste it with Markdown formatting, or vice-
versa

Copy a large chunk of text and paste it with any duplicate lines removed
The last three items in this list are examples of filtering, which saves a
tremendous amount of tedious work.
Use a Macro or Launcher Utility
You may already have a utility on your Mac that includes many or all of the
clipboard enhancements you’d like—macro utilities such as Keyboard Maestro
and launcher utilities such as LaunchBar often have such capabilities.
I’m all in favor of multipurpose tools, and if one of these meets your needs, that
may be the best solution for you. On the other hand, if you need extra features
(or don’t have a suitable macro or launcher utility), I’ll tell you about several
stand-alone clipboard tools ahead in Use an OS X Clipboard Utility.
Keyboard Maestro
I talk about Keyboard Maestro’s macro capabilities later, in Control Your Mac
with Keyboard Maestro; there’s also a coupon at the end of the book for a 20-
percent discount. For now, I want to mention its clipboard capabilities:
Multiple, named clipboards
A history for your primary clipboard (Figure 17)
Filtering the contents of any keyboard while pasting it, according to rules
you set up
Optionally pasting plain text, even if you copied styled text
Access to persistent clippings that you can see and use even after restarting
your Mac
User-definable hot keys for working with clipboards

Figure 17: Keyboard Maestro’s clipboard switcher and history
window.
Note: Keyboard Maestro, like many of the utilities in this book, uses the term hot key (or
hotkey) as a synonym for keyboard shortcuts.
All this is extremely cool, and it’s about 95 percent of what I need from a
clipboard utility. Keyboard Maestro does not, however, let me manually edit a
clipboard, nor does it offer a way to sync clipboards across Macs (although it
can send a clipboard from one Mac to another). If it could do those two things, I
wouldn’t need another tool.
Launcher Utilities
In the previous chapter, I told you how to Use a Thirdparty Launcher to do
things like opening applications, playing tunes, and performing calculations. All
the launchers I mentioned—LaunchBar, Alfred (with the optional Powerpack),
Butler, and QuickSilver—also keep clipboard histories, so you can copy multiple
things and then paste earlier clippings. But, they also offer some other clipboard
features worth mentioning.
L
hB
d Alf d
b th
t
li
i g
l i t
t
li
i g

LaunchBar and Alfred can both paste a clipping as plain text, preserve clippings
when you restart your Mac, and merge whatever you’re copying with what’s
already on the clipboard. In addition, Alfred lets you name your clippings. Butler
refers to clipboards by their technical name, “pasteboards,” and offers persistent
clippings, named clippings, and user-definable hot keys for working with
clipboard contents.
Unfortunately, none of the launcher apps can filter clipboard contents, which I
think is one of the most useful clipboard capabilities.
Use an OS X Clipboard Utility
If you don’t use a launcher like LaunchBar—or if you do, but crave even more
clipboard power—you have a bunch of options. I’ll start with my personal
favorite and then move on to other choices.
PTHPasteboard Pro
I put PTHPasteboard Pro in a category by itself because it has, by far, the largest
and most elaborate feature set of any stand-alone clipboard utility.
Although Keyboard Maestro can do most of the same things (and is easier to
use, for the most part), PTHPasteboard Pro has one unique feature that I find
incredibly valuable: it can sync clipboards—including histories—across Macs.
So, if I happen to copy a series of five text snippets on my MacBook Pro and
then move over to my iMac, I can still see, edit, and paste them there.
PTHPasteboard Pro installs as a pane in System Preferences (see Figure 18).

Figure 18: PTHPasteboard Pro has seriously customizable
preferences.
Here’s a quick rundown of its features:
Display your clipboard history in a menu (Figure 19) or floating palette,
such that you can click any item to paste it. The clipboard history is also
searchable.

Figure 19: This floating palette shows my clipboard history—the last
100 items (if I scroll) that I’ve copied to my clipboard.
Choose the number of items or total size of clippings to be stored in its
history and whether they’re preserved after a restart.
Set apps (such as password utilities) that PTHPasteboard will ignore when
you copy something from them.
Create custom clipboards (called pasteboards, as in Butler) to hold
clippings you intend to reuse over time. Custom clipboard contents are
editable, unlike those on your main clipboard.
Paste as plain text—globally or one item at a time.
Configure the app’s menus and windows extensively.
Create filters that you can apply when pasting any (current or historical)
clipboard item; the filters can include multiple steps, pattern matching via
regular expressions, and dozens of built-in conversions such as changing

case, altering line ending, and switching between straight and curly
quotation marks.
Assign hot keys to any action.
For all its power, PTHPasteboard Pro is not especially attractive or user-friendly;
I’ve found myself scratching my head over numerous features that aren’t spelled
out clearly in the online help. And I often find that after making changes, I have
to stop and restart the app (in the General view of its preference pane) before the
changes take effect. Even so, the combination of powerful filters, a highly
configurable history, and syncing across Macs makes it worth it for me.
Other Thirdparty Clipboard Utilities
I’ve said that PTHPasteboard Pro is powerful but not necessarily pretty. If you’d
like something a bit more elegant and polished, and are willing to forgo syncing,
there are many other clipboard utilities to choose from. All of these offer
clipboard histories; beyond that, their features vary tremendously, so I’ll refer
you to their respective Web pages for details:
Clipboard Evolved
ClipMenu
CopyPaste Pro
CuteClips
iClipboard

Automate Individual Apps
In the previous chapter, I told you about system-wide automation technologies
built into OS X. Although these technologies (particularly AppleScript and
Automator) can also automate the actions of individual apps, there’s often a
better—or, at least, more thorough—way of doing that within an app itself.
That’s the topic of this chapter: using apps’ built-in automation capabilities.
Due to the breadth and depth of in-app automation features, I can only provide
an overview, basic instructions, and a few examples. You’ll be able to
accomplish some basic tasks and discover how to learn more.
I begin with Microsoft Office, partly because of its popularity and partly because
of its extensive built-in programming language. I then move to Nisus Writer Pro,
the very app I’m using to type these words, to illustrate a few different forms of
automation that should be useful to anyone who works with words. Then I
briefly discuss Google Apps Script, a macro language for Google Apps, and list
the automation capabilities of several other popular apps.
Tip: If you want to automate Apple’s iWork apps (Pages, Numbers, Keynote), you’ll need to
use either AppleScript or Automator. You can learn more about AppleScript for iWork at
Automating iWork with AppleScript, part of the Mac OS X Automation site.
Automate Microsoft Office
Microsoft Office—which on the Mac comprises Word, Excel, PowerPoint,
Outlook, and OneNote as its main components—is one of the world’s best-
known software packages. Microsoft long ago added a programming language to
the suite called Visual Basic for Applications (VBA), which enables users to
write macros that automate Office apps, optionally embed those macros in
documents, and run them (with some limitations) on either OS X or Windows.
Microsoft removed VBA from Office 2008 for Mac, but brought it back again in

Microsoft removed VBA from Office 2008 for Mac, but brought it back again in
Office 2011. Presumably, VBA will be in future versions too. (Microsoft Office
also has excellent AppleScript support, which is an alternative way to
accomplish many of the same tasks.)
Note: In Office 2011 for Mac, only Word, Excel, and PowerPoint support VBA.
What can you do with an Office macro? The sky’s the limit, but here are a few
simple examples, any of which could be done with a single click or keystroke:
Perform a frequently used find-and-replace operation
Format spreadsheet cells according to their contents
Number all the instances of a certain phrase in a document
Reformat a table
Remove all the hyperlinks in a workbook
Change all the tab stops in the current paragraph style
Merge cells from two columns into a third column
Resize all the graphics in a document
If you use Office extensively—and especially if you share documents with
Windows users—it might be worth the effort to learn a bit of VBA since (unlike
AppleScript) its macros work on both Windows PCs and Macs. But let me be
frank: it’s not great for beginners. VBA was designed for programmers, not for
ordinary users. It won’t do you any good beyond Office apps, and unlike
AppleScript, VBA would never be called “English-like.” If you don’t know
much about programming already, there’s a significant learning curve.
However, there’s a sneaky way to get your foot in the door—to write a VBA
macro without knowing any VBA at all. Office lets you record macros—that is,
turn on recording, do some stuff while Office watches, and then turn off

recording. Office then attempts to make a VBA macro out of whatever you just
did, which you can then replay at will. Sometimes these macros work fine as is;
sometimes they require fiddling; and sometimes you’re out of luck.
So, my advice if you want to automate an Office app is to try recording a macro
first. If that doesn’t work (and you can’t easily see how to fix it), move on to
Automator. If Automator won’t do what you need either, try either AppleScript
(if you need more control) or Keyboard Maestro (if you want a simpler
interface). Write your own VBA macro from scratch only if no other tool does
the trick.
Record Macros in Microsoft Office Apps
Let’s walk through the process of recording and then playing back a simple
macro. (I’ll use Word for this example, but the process is virtually identical in
Excel and PowerPoint.)
1. Open a new, blank document in Word. (It doesn’t have to be blank, but it’s
easier that way for this example.)
2. Choose Tools > Macro > Record New Macro.
3. In the dialog that appears (Figure 20), give your new macro a name (like
Test) and click OK.
Figure 20: In this dialog, you define a new macro before you begin
recording it.

Tip: If you want to assign a keyboard shortcut to your macro now, you can. Before you click
OK in this dialog, click Keyboard, press the desired keyboard shortcut, and click OK. But
you can also Assign a Keyboard Shortcut to a VBA Macro later.
4. Now perform some actions—click buttons, choose menu commands, run a
Find/Replace, or whatever you like. For the purpose of this exercise, I
suggest doing the following:
a. Type the word First, press Tab, type Second, and press Return.
b. Type Third, press Tab, type Fourth, and press Return.
c. Press Command-Shift-Up Arrow to select the second paragraph.
d. Press Command-B to turn the selected text bold.
e. Press Shift-Up Arrow to add the previous paragraph to the selection.
f. Select Table > Convert > Convert Text to Table and click OK.
g. Press Down Arrow to move the insertion point below the table.
5. Choose Tools > Macro > Stop Recording.
That’s it; you’ve recorded a macro. In theory, you can replay the exact actions
you took again, at any time, in any document. So let’s try.
To play back your macro:
1. Choose Tools > Macro > Macros.
2. Select the macro you just recorded (it will likely be selected by default).
3. Click Run.
If everything is working correctly, your document will get two more table rows
that look exactly like the two that were already there.
Curious to know what your macro looks like in VBA? Choose Tools > Macro >
Macros, select your macro, and click Edit. You see something like Figure 21,

along with other windows that you can ignore for now.
Figure 21: Here’s what the macro we just recorded looks like in
Visual Basic.
Beautiful, isn’t it? No, of course not, but if you look carefully, you can probably
make out approximately what the commands do. If you were so inclined, you
could edit the macro right here—for example, substitute different words in the
Selection.TypeText Text: lines. Then, to get out of the editor, choose
File > Close and Return to Microsoft Word (Command-Q, just like Quit).
Make VBA Macros Easier to Find
Going through Tools > Macro > Macros and a separate window whenever you
want to run a macro is a drag. Fortunately, you don’t have to. You can assign a
keyboard shortcut to your macro, put it on a menu, or both.
Assign a Keyboard Shortcut to a VBA Macro
In Word or Excel (but not PowerPoint), you can assign a keyboard shortcut to
your macro:
1. Choose Tools > Customize Keyboard.
2. In the Categories list on the left, select Macros.

3. In the Commands list on the right, select the macro you want to assign a
keystroke to.
4. Click in the Press New Keyboard Shortcut field.
5. Press the key combination you want to use. (See the sidebar Use MultiKey
Shortcuts in Microsoft Word, below, for a special tip.)
6. Click Assign.
7. Click OK to dismiss the window.
From now on, you can activate your macro with that keyboard shortcut.
Use MultiKey Shortcuts in Microsoft Word
A little-known and useful fact about Word (which does not apply to Excel or PowerPoint, by
the way) is that keyboard shortcuts can include sequences—to a point.
For example, you could assign Control-P,B to insert a page break (Insert > Break > Page
Break). The way this would work is that you’d press Control-P, and as long as the next key
you pressed within 5 seconds was a B, you’d get a page break. If you pressed any other key,
or no key at all, during those 5 seconds, nothing would happen.
You’ll notice that I used Control in my example, not Command. That’s because all single
alphabetic Command-key shortcuts are pre-assigned, and even though you can create your
own shortcuts that override them, sequences are ignored in such cases. For example, if I
assigned Command-P,B to Page Break, it would have to override Command-P for Print—but
then, as soon as I pressed Command-P (and without waiting for the B), the page break would
be inserted. I know, weird.
So that’s one limitation. Another is that sequences can have at most two characters (plus
modifiers)—you can’t assign Control-P,B,J to a Peanut Butter & Jelly macro. Still, two-key
sequences starting with Control are useful mnemonic aids.
To set one up, follow the directions above, but type the sequence (such as Control-P,
followed by B) in Step 5. Word shows sequences with a comma (Control-P,B), but you won’t
actually type the comma.
Nisus Writer Pro offers vastly more flexibility in assigning multi-key shortcuts. See Use
MultiKey Shortcuts in Nisus Writer Pro.
Add a VBA Macro to a Menu

Office apps don’t make it excessively easy to put your own macros on menus so
you can run them with one click—but it can be done:
1. Go to View > Toolbars > Customize Toolbars and Menus > Commands.
2. In the Categories list on the left, select Macros.
3. In the Commands list on the right, select the macro you want to put on a
menu and drag it to the small toolbar under your main menu bar that has the
names of all the menus on it (File, Edit, and so on). Keep holding the button
down until you’ve reached the exact spot on a menu or submenu where you
want the command to go, and then release the button.
4. The macro may have an excessively long, clunky name like
Normal.NewMacros.PastePlainText. To give it a more readable
name, click on the name of the menu (again, on that small toolbar) where
you put the command, and then right-click (or Control-click) the command
name and choose Properties from the contextual menu. Type a new name
and click OK.
5. Click OK to close the Customize Toolbars and Menus window.
Your new macro command should be on the menu (the real menu) where you
placed it.
You can even add your own menu (and name it Macros, for instance), by
following the above procedure but selecting New Menu at the bottom of the
Categories list and then dragging the New Menu command to the desired spot in
the toolbar.
Run an Existing VBA Macro
We’ve already been using VBA, but now I want to switch gears slightly to show
you how to use a macro someone else wrote—for example, something you find
on a Web page.
For this example I’ll use a macro I wrote years ago to paste whatever’s on the

For this example, I ll use a macro I wrote years ago to paste whatever s on the
clipboard as plain text, so that it assumes the style of the surrounding text. If you
were to do this manually, the process would be: Choose Edit > Paste Special,
select Unformatted Text, and click OK. A macro can reduce all that to one click
or keystroke!
To use a macro someone else has written:
1. Choose Tools > Macro > Macros.
2. Type a new macro name (we’ll use PastePlainText) and click Create.
3. In the window that opens, you’ll see a placeholder template for your new
macro, like so:
Sub PastePlainText()
 '
 ' PTT Macro
 '
 '
 End Sub
4. Paste or type the following in the blank space before the End Sub line:
Selection.PasteSpecial Link:=False, 
 DataType:=wdPasteText, Placement:=wdInLine, 
 DisplayAsIcon:=False
5. Your final macro should look like this:
Sub PastePlainText()
 '
 ' PTT Macro
 '
 '
     Selection.PasteSpecial Link:=False, 
     DataType:=wdPasteText, Placement:=wdInLine, 

     DisplayAsIcon:=False
 End Sub
6. If you like, you can remove the lines starting with an apostrophe; those are
comment lines that don’t affect the macro’s function.
Your macro is now ready to run. You can run it using Tools > Macro > Macros,
assign a keyboard shortcut to your macro (such as Command-Shift-V) following
the instructions in Assign a Keyboard Shortcut to a VBA Macro, or put it on a
menu (see Add a VBA Macro to a Menu).
Note: I said I “wrote” this macro years ago, but, in fact, I cheated—I recorded myself following
the steps I spelled out a moment ago, and this macro is what I got!
Find Sample VBA Macros
You should be able to turn up all sorts of VBA macros with a few Web searches.
Here are a few resources to get you started:
Excel Macro Examples & Free Downloads at Chandoo.org
VBA Code Excel Examples at Analysistabs
Word: Sample Macros, VBA Codes at MSDN Blogs
Learn More about VBA
To get help writing and editing VBA macros, try these sites:
The Office 2011 for Mac Create, run, edit, or delete a macro page
The Office 2011 for Mac Getting Started with VBA in Office for Mac 2011
page
The Visual Basic for Applications (VBA) macros page (mainly oriented
toward Windows, but mostly applies to Mac too
A
Ni
W i
P

Automate Nisus Writer Pro
Nisus Writer Pro is a powerful yet easy-to-use word processor. Wait, did I call it
a word processor? That’s like saying El Capitan is a rock—it’s a bit of an
understatement! Nisus Writer Pro is much more than a word processor; I like to
think of it as a Programmable Everything Tool. I explain my history with Nisus
(the product and the company) and why I’m so enamored of this app in my
Macworld article Tools of the trade: Why I prefer Nisus Writer. For anyone who
works with words, it’s an extraordinarily flexible tool—and capable enough that
Take Control Books has left behind both Word and Pages and now creates
ebooks (including this one) exclusively in Nisus Writer Pro. With the coupon at
the end of this book, you can buy Nisus Writer Pro at a 20-percent discount.
One of the reasons I like Nisus Writer Pro so much is that it’s chock full of
automation features that make my writing faster and more efficient. In this
chapter I want to look at three of them: macros, multi-key shortcuts, and
automatic numbers and cross-references.
Run Macros in Nisus Writer Pro
As in other apps, macros in Nisus Writer Pro let you perform a single action, or a
list of actions, with a menu command or keyboard shortcut. But Nisus Writer
Pro macros can do much more than run sequences of commands; they can
interact with files and folders on your Mac, ask for user input, make decisions
based on complex logic, and access many capabilities in the app that don’t
appear anywhere in the visible user interface. In other words, by writing macros,
you can create entirely new features.
Nisus Writer Pro includes over 50 preinstalled macros on the Macro menu (or its
submenus). Choose any macro name to run it. Some macros assume you have
text selected first; if you try to run a macro and it won’t work in the current
context, it’ll either beep or display an error message.
Here are a few you might try:

Macro > Calculation > Mortgage Calculator: Fill in the blanks to
calculate your monthly payment.
Macro > Document > Create Word Frequency List: This creates a new
document listing every word in the existing document (or selection) along
with a count of how many times it appeared.
Macro > Editing > Quote Selection: Select some text and run this macro
to put quotation marks around it.
Take Control authors and editors have lots of specialized macros that aid in our
workflow, such as:
Converting documents that use our standard set of styles into Markdown
formatting, which we then use to create EPUB and Mobipocket editions of
our books
Inserting or formatting tips and notes
Turning selected text into a cross-reference to a bookmark elsewhere in the
document
Checking for common errors, such as graphics with problematic names or
extra spaces between words
If you’d like to find more macros you can install and run yourself, visit Nisus
Software’s Nisus Writer Pro Macros forum. (That’s also a good place to find tips
on writing your own macros.)
Create Macros in Nisus Writer Pro
To make your own macro in Nisus Writer Pro, follow these steps:
1. Choose Macro > New Macro. A new window (which looks just like a
regular document window) opens.
2. Type or paste the text of your macro. For illustration purposes, try this:

prompt "Hello, world!"
3. Choose Macro > Save as Macro. Give your macro a name (such as Hello)
and choose a location. The ideal place to save it is
~/Library/Application Support/Nisus Writer
Pro/Macros, because that’s the default location for macros and any
macros that you save there will automatically appear on the Macro menu; if
you save it anywhere else, you’ll have to go through extra steps (which I
don’t cover here). The macro appears on your Macro menu automatically.
Now, to run your macro, choose its name from the Macro menu: Macro > Hello
(or whatever you named it). You should see a little dialog with the text “Hello,
world!” Click OK to dismiss it.
If you want to view or edit a macro that’s already in the Macro menu, the easiest
way to do so is to hold down the Command key while choosing the macro from
the menu—instead of running, it opens in a new window. You can edit it there;
after you save it, choosing the macro name from the Macro menu in the normal
way runs your updated version.
Tip: You can, of course, assign keyboard shortcuts to macros too. I cover that just ahead, in
Use MultiKey Shortcuts in Nisus Writer Pro.
I gave you a one-line example macro, but what else can you put in a macro? I’m
glad you asked. Let me begin with the easiest approach to writing your own
macros.
Simple Macros
First, the bad news: unlike Microsoft Office, Nisus Writer Pro has no recording
capability—it can’t watch what you do and make a macro out of that for you.
But now, the good news: it’s way easier to write macros for Nisus Writer Pro
than for Word!
How easy? For the simplest things, like running menu commands, you just type
a command (as it appears on a menu) on a line by itself If the command

a command (as it appears on a menu) on a line by itself. If the command
includes an ellipsis (…), you can leave that off.
So, here’s a macro that turns the selected text bold, makes it 18 points, and then
copies it to the clipboard:
bold
18
copy
And that’s a complete macro, by the way—no brackets, declarations, funky
names, or obscure codes. Case doesn’t matter. (Spelling does matter!) Great,
right?
Tip: When trying the macros from this book in Nisus Writer Pro, either retype them or paste
them by choosing Edit > Paste > Paste Text Only (Command-Shift-V). If you paste styled text
into a macro, you might encounter inscrutable error messages.
A macro can do lots of things that aren’t merely menu commands, too. Want it
to type the text “Hello, world!”? Do it like this:
type text "Hello world!"
Find all instances of the word Apple?
find all "Apple"
Set the line height to exactly 17 points?
set fixed line height 17
You can construct a macro with dozens or hundreds of commands like this, one
after the other, and it will execute them all with a single click.
I gave find all "Apple" as an example, but one of the most useful things
you can do with a macro is automate more elaborate find-and-replace procedures
—or a series of them. Nisus Writer Pro, like a few other apps mentioned in this

book, lets you use a pattern-matching system known as regular expressions for
finding and replacing text. (It can take those expressions even further by
applying styles to portions of the expressions—a highly unusual feature.)
Any type of find or replace operation can go in a macro. For example, this macro
line finds any sequence of two or more return characters and replaces it with
one:
find and replace '\\n\\n+', '\\n', 'Ea'
Note: The letters E and a at the end tell the macro to perform the find and replace with two
special options—using regular expressions, or PowerFind Pro, as Nisus Writer Pro calls them
(E), and replacing all the occurrences in the document (a).
This one finds any sequence of two capitalized words and underlines just the
first one:
find and replace '([A-Z][a-z]+)( [A-Z][a-z]+)',
'\\1\\2', 'Ea-iU'
Note: The -i at the end means “case-sensitive search”; the U means “attribute-sensitive
replacement.”
Complex Macros
It’s easy to make a macro that executes a series of simple commands, but you
may want to do fancier things. You may want to use variables, arrays, objects,
functions, loops, if/then/else conditionals, mathematical functions, string
manipulation, and other sorts of things you’d normally find in a “real”
programming language. All that, and much more, is well within the purview of
Nisus Writer Pro macros too!
I’ve written many of these complex macros that involve serious programming,
and while I can say confidently that it’s not nearly as bad as working in VBA or

even AppleScript, it’s different. And the way you construct the commands and
routines to do these nifty things is far from obvious.
Unfortunately, there’s not room here for me to get into the finer points of the
language. You can get some guidance from the Nisus Writer Pro macro
reference—choose Help > Macro Language Reference in Nisus Writer. That
document contains all (well, nearly all) of the commands in the language, and a
number of examples. But candidly, it wasn’t written for the layperson. The
macro language itself isn’t unduly complicated, but the documentation makes it
seem harder than it is. Someone ought to write a better guide. Maybe one day,
somebody will.
In the meantime, I recommend the same thing for learning Nisus Writer Pro
macros as I recommend elsewhere in this book for VBA and AppleScript: start
with things other people have written (including the 50+ macros included with
Nisus Writer Pro), try modifying them a little bit, and once you get the hang of
that, start exploring new commands and features.
Use MultiKey Shortcuts in Nisus Writer Pro
Nisus Writer Pro lets you assign a keyboard shortcut to any command, including
macros you create yourself. That isn’t unusual. What is unusual, and extremely
cool, is that you’re not limited to modifier keys and a single character (like
Command-P or Command-Option-Shift-I). You can do all that, but you can also
have keyboard shortcuts that are sequences of keys.
For example, there’s a menu command that capitalizes the first letter of each
selected word: Edit > Convert > To Capitalized. You could assign Command-
Control-Shift-C to it, but that’s hard to remember. What’s easy to remember is
Command-C-A-P. That is, hold down Command while typing C, and then A,
and then P. Cool, no?
Multi-key shortcuts are much easier to remember, because you can build in more
mnemonic clues. How about:

Save As: CommandS-A
Save As PDF: Command-P-D-F
Replace and Find: Command-R-F
Page Break: Command-P-B
12 (font size): Command-1-2
I’m sure you get the idea. Here’s how you set up a shortcut:
1. Go to Nisus Writer Pro > Preferences > Menu Keys (Figure 22).
2. In the Menu column, select the menu where the command is found.
Figure 22: Set up keyboard shortcuts here.
3. In the second column, select the command (or, if it’s not on the top level of
the menu, navigate in the submenus until you can select it).
4. Click in the field on the rightmost pane.
5. Press the keyboard combination or sequence you want to use. You can have
shortcuts with as many characters as you like—Command-C-A-P-I-T-A-L-
I-Z-E is valid. But realistically, that’s awkward to type—I recommend
keeping sequences to two or three characters, not counting modifiers.

All shortcuts must include Command, but you can optionally include Shift,
Option, and/or Control key modifiers too. Any of these that you hold down
while entering your shortcut are selected, but you can also select or deselect
Shift, Option, or Control later to add or remove them as part of the shortcut.
6. Click Set.
7. Repeat with any additional shortcuts you want to define. When you’re
done, click the red Close button. (Do not press Command-W, because Nisus
Writer Pro will think you’re trying to assign that shortcut to the current
command!)
Keyboard shortcuts are available immediately.
Use Automatic Numbers and Crossreferences in Nisus
Writer Pro
The final Nisus Writer Pro automation tool I want to mention is actually a
combination of two features—automatic numbers and cross-references. I’ve
used both dozens of times in this book. Let me tell you why they’re cool.
Nisus Writer Pro can automatically number almost anything that you like—
pages, sections, lists (such as the seven steps just above), figure numbers (as
seen throughout this book), tables, and the like. These numbers are variables that
update themselves automatically. So, if I’m creating a list that has six items
(numbered 1–6) and I press Return to create a seventh item, it’s numbered 7
automatically; if I insert, remove, or reorder part of the list, all the numbers
update themselves. Similarly, if I use automatic numbering for figures, I can
freely add, delete, or rearrange figures without ever worrying that the figure
numbers in the captions will be out of order.
That part is useful but not terribly unusual; most word processors can do
something of the sort. Where it gets cool is cross-references to the automatic
numbers. For instance, I might have a graphic that’s labeled “Figure 12,” and
near it I say, “see Figure 12.” I want that reference to update itself automatically
if later in the development of the book that graphic turns out to be Figure 15

if, later in the development of the book, that graphic turns out to be Figure 15
instead. So instead of just typing the reference, I insert a cross-reference to the
text of that automatic number. As the figure number itself changes, so does the
textual cross-reference!
Note: Nisus Writer Pro can do this trick with lots of things, not just with automatic numbers.
Any time text in one part of a document changes, cross-references to that text elsewhere can
update themselves. (That’s what we’ve done with all the links in this book to other topics—if I
should happen to rename a heading, the text of the link updates too.)
Editor’s Note: We’ve been using figure numbering and cross-references in Nisus Writer Pro
for about a year here at Take Control books, and one aspect of them that we’ve found quite
refreshing (compared to our earlier tools) is that they’ve been reliable, even in 150+ page
documents with lots of change tracking.
A full explanation of how to use automatic numbering and cross-references in
Nisus Writer Pro would take many pages, so I’ll walk you through just one
example:
1. Begin by creating a new list style, just for figure numbers. In a Nisus Writer
Pro document, choose Format > Lists > Edit List Styles.
2. Click the plus 
 button at the bottom and choose List Style from the pop-
up menu. Name it Figures, leave the Kind set to Numbered, and click
Create.
3. In the sample text area on the right side of the window, select Level 1.
Then, in the Lists palette (if you don’t see it, choose Window > Palettes >
List), click in the Before Text field and type Figure followed by a space.
In the After Text field, type a colon (:) followed by another space (Figure
23).

Figure 23: Your list style definition should look something like this.
4. Choose View > Page View to return to editing your document.
5. Insert a graphic (or just type some text, pretending that it’s a graphic)
followed by Return. Type a caption in the paragraph beneath that line, such
as This is the caption.
6. With your insertion point still in the caption paragraph, choose Format >
Lists > Figures to apply the Figures list style. In so doing, the caption will
be preceded by “Figure 1: ”.
7. Repeat Steps 5 and 6 a few times, so you that have three or four numbered
figures. (Note that if you press Return at the end of a list paragraph, Nisus
Writer Pro assumes you want that next paragraph to be in list style too. You
can override this by choosing Format > Lists > Use None, or by applying a
paragraph style, such as Normal.)
8. Somewhere else in your document, in an ordinary paragraph, type See and
a space. Choose Insert > Cross Reference. Make sure the Insert Reference
To pop-up menu says List Item, the Display Text pop-up menu says List
Item Number, and the two checkboxes are deselected. Select Figure 2 in the
list and click Insert.
Your text should now say “See Figure 2”.

Your text should now say See Figure 2 .
9. Now make a change to your document so that Figure 2’s number changes—
for example, remove the caption for Figure 1, or add another captioned
figure before Figure 2.
You should see that the caption’s figure number updates itself, and the reference
to that caption in the text updates itself to match!
Note: What I just presented was a distinctly oversimplified version of what we do for Take
Control books, but it should demonstrate the basic principles.
Discover Other Internally Scriptable Apps
You’ve seen that Microsoft Office and Nisus Writer Pro have built-in scripting
languages, in addition to being controllable by AppleScript and external macro
utilities. But you may be wondering: is that it? Are there no other Mac apps that
have internal macro or automation features?
Indeed there are others! Here are a few prominent examples:
BBEdit: This splendid plain-text editor, which is designed mainly for
programmers and Web designers but has also found a following among
authors, has a couple groovy automation features. Text factories are
sequences of actions (such as find-and-replace–based on regular
expressions, natch; sorting lines; changing case; and running shell scripts or
AppleScripts) that you can save and run repeatedly with a couple of clicks.
BBEdit also has a Text > Apply Text Filter submenu, which lists not only
your text factories but also individual Automator workflows, AppleScripts,
and shell scripts that can process and modify your text.
FileMaker Pro: This consumer-friendly relational database from Apple
subsidiary FileMaker Inc. is deeply scriptable. You can use its own
extensive built-in scripting language, AppleScript, or the two in
combination to take nearly any action when a button is pressed, a menu

command is selected, or any of half a dozen other triggers occurs. Scripts
can include complex logic, mathematical calculations, and numerous types
of data manipulation.
Google Drive Apps: This Web-based productivity suite includes free apps
for editing for documents (Google Docs—somewhat like Word),
spreadsheets (Google Sheets—somewhat like Excel), and presentations
(Google Slides—somewhat like PowerPoint). Lots of people do their day-
to-day document editing with Google Drive Apps in a browser. To
automate tasks in Google Drive Apps, you use a scripting language called
Google Apps Script. It’s based on JavaScript, and basically amounts to
VBA for Google Apps. But it’s even better than VBA in that it can add
custom menus, dialogs, and sidebars to Google Drive Apps, interact with
other Google services (such as AdSense and Google Drive), and quite a bit
more.
Panorama: Another, even older database app, Panorama was designed for
speed and flexibility. In much the same way that Nisus Writer Pro is a
programmable word processor, Panorama is a programmable database—in
fact, it’s a complete development environment. You can control every
aspect of its operation and create enormously complex applications using
programs or scripts written in Perl, Ruby, Python, PHP, or AppleScript, as
well as shell scripts.
Logic Pro X: Apple’s professional audio recording software lets you create
multitrack recordings of real and virtual instruments and vocals, add effects,
and mix audio every which way. It can memorize all your changes in real
time—adjustments to volume, panning, equalization, effect levels, and
other parameters for each individual track—and repeat those changes every
time you record or play back your music.

Automate Email
Probably 90 percent of the time I spend using my Mac involves one of three
apps: a word processor (I am an author, after all), a Web browser, and an email
client. I send and receive large quantities of email, and I use email far more
frequently than phone calls or instant messaging—maybe even more than
speaking. It’s my main means of communication.
Because my incoming and outgoing email volume is so high, I can’t bear to
spend any more time or effort than is absolutely necessary on filing or searching
for messages. So I’ve thought long and hard about how to automate as much of
that process as possible—while still ensuring that important messages never slip
through the cracks.
One of my key strategies is to use rules (sometimes referred to as filters) to
process messages as they come in. Each rule looks for certain conditions (criteria
such as a sender, subject, or words in the message body), and then takes one or
more actions whenever a match is found. For example, the rule might move the
message into a certain mailbox, send an automatic reply, or delete the message.
If you’re trying to keep your Inbox under control, rules are one of the most
powerful tools available. Because I presort my email with rules, tons of
messages that don’t require immediate attention never reach my Inbox at all;
instead, they’re safely shunted to other mailboxes where I can review them at my
convenience. Creating a good set of rules requires a bit of thought and effort, but
once you’ve done that, those rules operate invisibly in the background.
Rules are a very powerful organizational aid, but making them is just one aspect
of automating email. You may also want to simplify the manual filing of
messages that aren’t picked up by rules, add plugins that automate various other
email actions, or use smart mailboxes as search shortcuts. I cover all those
activities in this chapter.

Use Serverbased Rules
Rules can operate either in your email client (such as Apple Mail) or directly on
your incoming mail server. The huge advantage to server-based rules is that they
can presort messages before you see them, even if your Mac email client isn’t
running. That greatly reduces the amount of mail you need to deal with on your
iPhone or iPad.
I recommend starting with server-based rules if possible and then using rules in
your email client for the actions you can’t accomplish on the server, like running
user-defined AppleScripts on matching messages or moving messages to
mailboxes in other accounts.
Check with your email provider to see whether it offers server-side rules or
filters, and if so, what the procedure is to configure them. Here’s how to get
started with iCloud and Gmail:
iCloud: Log in to your account at iCloud.com. Click Mail, and then click
the gear  icon in the lower-left corner and choose Rules from the pop-up
menu. Click Add a Rule to configure your first rule.
Gmail: Log in to your Gmail account (using this link or whichever URL
you normally use for a Google Apps account with a custom domain). From
the gear 
 pop-up menu at the top of the page, choose Settings, and then
click Filters. Click Create a New Filter to begin setting up a custom filter.
Although the details vary from one provider to the next, rules always contain one
or more conditions (things to search for) and then, when there’s a match,
perform one or more actions. For example, look for any message from a certain
address (say, a company’s PR department) and file it in a Newsletters mailbox.
If your email provider doesn’t offer server-based rules, or if its conditions or
actions don’t meet your needs, you can move on to rules in your email client. If
Mail is your preferred client, that’s just one of the ways you can automate your
email.

Tip: A service called SaneBox will, for a monthly fee, perform an automated analysis of your
incoming messages, determine what’s likely to be less important to you, and move it out of
your Inbox (providing only a brief summary). It can do other tricks too, such as providing
server-based rules—even if your email provider doesn’t offer them—and automatically
moving attachments to cloud storage such as Dropbox. Although SaneBox doesn’t fit my
model of email management, many people find it immensely helpful.
Automate Apple Mail
Apple Mail is my email client of choice, and as I mentioned, I go to great lengths
to automate my email. In this chapter, I’ll cover my three main techniques: using
rules to presort my messages, using plugins to file and otherwise work with them
once they’re in my Inbox, and using smart mailboxes for searching. This
information largely comes from my book Take Control of Apple Mail, which
contains far more detail—not just about automation but also about using email
more effectively, troubleshooting problems, and becoming a better
correspondent.
Manage Incoming Apple Mail with Rules
Whether or not you use server-based rules, you might want to set up rules within
Mail. They work essentially the same way—sorting, deleting, replying to, or
otherwise processing incoming messages. But they can do a few things server-
based rules can’t do (such as moving a message to a different account and
running an AppleScript). And, if you can’t use server-based rules, Mail’s rules
are the best way to manage the flow of incoming messages.
Tip: For help writing an AppleScript that will be used in a Mail rule, open AppleScript Editor
(in ApplicationsUtilities) and choose File > New from Template > Mail > Mail Rule
Action. That’ll open a template with example code to get you started.
Create a Rule
To create a basic rule, follow these steps:

1. Go to Mail > Preferences > Rules and click Add Rule.
A dialog appears showing the condition(s) the rule checks for and the
action(s) Mail takes if the conditions match (Figure 24).
Figure 24: Use this dialog to specify the condition(s) and action(s)
for your Mail rule.
2. Enter a name for the rule in the Description field.
3. Create a condition. Start by choosing something from the left-hand pop-up
menu in this area. Depending on what you choose, you may now see a
second pop-up menu, a text field, or both. Here are some examples of a
completed condition:
[From] [Contains] apple.com
 [Subject] [Begins with] Take Control
 [Date Sent] [Is Less Than] 3 days old
 [Message Content] [Does not contain] Mavericks
4. From the provided pop-up menus, choose the action you want the rule to
perform on a message if (and only if) it matches the condition you just
specified. (Just ahead I explain how to handle rules that include multiple
actions.) Here are some examples:
[Move Message] to mailbox: [Filed]
 [Set Color of Message] [of background] [Blue]
 [Reply to Message]
 [Mark as Read]

If you use a rule to move a message, choose your target mailbox carefully.
In general, unless you mean to specifically archive the message to a local
mailbox, you’ll want to move it to a server-based mailbox—most likely in
the same account—so the message will be available on all your iOS devices
and other Macs.
5. Click OK.
An alert appears, asking if you want to apply your rules (including the one
you just created) to messages in selected mailboxes.
6. Click Apply or Don’t Apply, as you prefer. I generally suggest clicking
Don’t Apply, because applying new rules to messages in open mailboxes
can have unexpected and potentially unpleasant results.
7. If you’re finished creating rules, close the Preferences window.
Your new rule now checks all incoming messages for matches and performs the
actions on them that you set.
Rule Examples
One of the most common uses for rules is to process repetitive messages. If you
find yourself filing, flagging, or deleting a certain type of message at least once a
week, you can save time and effort by setting up a rule to do it for you.
Examples are mailing lists, utility bills, bank statements, newsletters, travel
discount offers, and jokes forwarded by friends or family members.
Here are a few rules I use:
TidBITS issues:
If Any of the following conditions are met:
[From] [Contains] editors@tidbits.com
Perform the following actions:

[Move Message] to mailbox: [Lists]
Any public Apple mailing list:
If Any of the following conditions are met:
[From] [Contains] @lists.apple.com
[Cc] [Contains] @lists.apple.com
Perform the following actions:
[Move Message] to mailbox: [Lists]
Feedback about this book:
If Any of the following conditions are met:
[Subject] [Is] Take Control of Automating Your Mac
Perform the following actions:
[Move Message] to mailbox: [Take Control Feedback]
Tip: To ensure that a message matched by a given rule isn’t also processed by other rules,
add the Stop Evaluating Rules action as the final action for any rule. Doing this improves
Mail’s performance and avoids potential rule conflicts.
Mavericks’ Mail applies rules automatically to messages as they are delivered to
your Inbox. Sounds about right, but there is a hitch. Mail does not apply rules to
messages that arrive in other mailboxes, even if the messages are unread. That
means if you have a server-based rule that moves certain messages to your
Family mailbox, those messages bypass your Inbox and therefore don’t get
processed by Mail’s rules.
You can manually apply rules to selected messages, wherever they reside, by
choosing Message > Apply Rules. For example, you might want Mail to use

rules to re-sort messages that were moved into the wrong mailbox by the server.
However, note that that command applies all your rules, not just a specific rule.
If you want more control over after-the-fact rules, try the Mail Act-On plug-in.
Automate Apple Mail with Plugins
Dozens of third-party Mail plugins let you give the program new features, enable
significant new customization options, and even zap unwanted features. For
example, plugins can stop spam, encrypt email messages, offer advanced
message filing options, change the way attachments are handled, modify Mail’s
method of quoting text in replies, and much more.
I won’t try to catalog all the available Mail plugins here, but allow me to refer
you to a Macworld article I wrote about My nine must-have plugins for Apple
Mail, and lists that other people have compiled and maintain: Maximizing Mail:
Add-ons for Mac OS X’s Mail app at Macworld, and Apple Mail Plugins and
Tools.
However, I do want to put in a plug (so to speak) for a few plugins that I find
especially helpful for automating Mail above and beyond what rules do. These
plugins allow me to act on messages in my Inbox and save time when
composing or replying:
Mail Act-On is a multipurpose tool that adds numerous new features, but
the one I like best is its clever approach to filing messages. Mail’s built-in
rules run automatically when messages are received, but Mail Act-On adds
another layer of rules that run on demand, via keyboard shortcuts—or when
a message is sent. You can even combine multiple rules into a single
keyboard shortcut.
For example, I can select a message and press my user-defined keyboard
shortcut that means “do the right thing with this message,” and it will move
the message into Mailbox A if it’s from person A, B, or C, but put it into
Mailbox B if it’s from person X, Y, or Z. It’s extremely clever, and that’s
only one tiny example of what Mail Act-On can do.

Note: Although Mail Act-On is my personal pick for filing messages from the keyboard, other
plugins that do similar things and have their own loyal fans include MsgFiler and MailHub.
SpamSieve: If you get too much spam in your Inbox even after server-side
filtering, SpamSieve is the best tool, by far, for separating the wheat from
the chaff.
CargoLifter: Big attachments are a pain for both senders and receivers.
CargoLifter lets Mail use Dropbox (or a similar service) to store the files.
Recipients get a link to the original file.
QuoteFix: If you don’t like the way Mail quotes text in replies, this plugin
lets you customize quoting to your specifications. For example, you can
more easily put quoted text first and your reply after (so your recipient
needn’t jump around in the message to understand the context).
Tip: Mail lets you define signatures that appear at the bottom of each message (see Mail >
Preferences > Signatures). Although Mail provides a decent level of customization, it doesn’t
approach what you can get if you Use a Thirdparty Text Expansion Utility instead.
Search Faster with Smart Mailboxes
Back in Create and Use Smart Containers, I explained what smart mailboxes are
(basically, saved searches) and how to create them. If you click a smart mailbox
icon, it should initially display exactly the same messages as the search you used
to create it. As you receive and delete messages that meet your criteria, the list
will change.
Here are my favorite suggestions for making smart mailboxes:
Show all correspondence with a specific person or group: Choose Any
from the pop-up menu at the top. Add two conditions, [From] and [Any
Recipient], both of which include the other person’s email address. (To
show conversations with more than one person, create a new Contacts
group with all the names you want to include, and instead of [From],

choose [Sender Is a Member of Group] [some-Address-
Book-group]. Then add [Any Recipient] conditions for each
person in the group individually.)
Make sure you select Include Messages from Sent to pick up your messages
to this person. For even better results, choose View > Organize by
Conversation to display all your exchanges in a threaded conversation.
Display recent unread messages: If you use rules to move messages into
different mailboxes, you might enjoy seeing all your unread messages—
wherever they may be—in a single place. If you like, limit these to
messages received in the last day (or few days).
Locate attachments in Sent mail: If you often send photos or other large
attachments, their copies in your Sent mailbox can take up a lot of space,
and you probably have the originals. Make a smart mailbox with two
conditions: [Contains Attachments] and [Message is in
Mailbox] [Sent]. From time to time, check this mailbox; to remove
attachments from these messages, select them and choose Message >
Remove Attachments.
What to do if All and Any aren’t smart enough: If you use the
[Message is in Mailbox] condition, the contents of one smart
mailbox can depend on another smart mailbox. This is handy when you
have so complex a set of conditions that Any and All are too limited. For
example, you might have one smart mailbox that lists messages from any
(“Any”) of several friends, and another that lists messages that are both in
the first smart mailbox and (“All”) marked as high priority.
Look for group members: Use the [Sender is a Member of
Group] option to search for messages from people in one of your Contacts
groups. And yes, you can even refer to smart groups, so that as your
contacts’ information changes, the contents of the smart mailbox track the
automatic changes in smart group contents.
Automate Outlook Email with Rules

Automate Outlook Email with Rules
Whatever you may think of Microsoft in general or Office in particular,
Microsoft Outlook for Mac is a highly capable email client with extensive
automation capabilities. You can create rules much like those in Apple Mail, but
with a few key differences:
Each incoming account type (Exchange, POP, and IMAP) has its own
distinct rules.
You can also create rules that apply to outgoing messages. (In Mail that
requires a third-party plug-in).
In addition to rules that match Any and All conditions, you can specify
negative matches—“Unless any conditions are met” and “Unless all
conditions are met.”
The conditions and actions available are somewhat different from Mail’s,
but the most crucial one, in my opinion, is that while Outlook’s rules can
match any header or metadata, they can’t search the message body on
incoming IMAP messages—only on messages coming from POP and
Exchange accounts.
To create a rule in Outlook:
1. Choose Tools > Rules.
2. Select an account type in the list on the left.
3. Click the plus 
 button.
4. Enter the desired condition(s) and action(s), give the rule a name, and click
OK.
The rule begins working immediately.
Automate Other Email Apps
I’
f
d h
M il
d O tl
k b
f th i
l it
B t l t
f

I’ve focused here on Mail and Outlook because of their popularity. But lots of
other Mac email clients contain rules and/or other automation features, too,
including:
Airmail
Inky
MailMate
Mail Pilot
Postbox
Thunderbird
I refer you to the apps’ documentation to discover how to use their respective
automation features.

Automate the Web
You might not think of Web browsing as an activity that requires automation.
You follow links, you read articles, watch cat videos, maybe make the
occasional purchase, but that’s all inherently manual, right? After all, I don’t
want my Mac to read Facebook posts for me or play games behind my back.
But in fact, the Web offers numerous opportunities for shortcuts and
simplification. For example, every time you’re asked to supply a username and
password, a credit card number, or a mailing address, your Mac can do that for
you—no typing (or memorizing) required.
Here’s another example: you keep checking a certain Web page—or maybe a
specific portion of a page—for changes. Maybe you’re waiting for an
announcement, a sale, or a product update, or maybe you’re looking for news
stories about your neighborhood. Repeatedly checking a page for changes
(whether once a day or several times a minute) is exactly the sort of labor-saving
task computers are good at.
And then, looking more generally at cloud services that just happen to have a
Web presence, there are tons of opportunities for connecting things. Perhaps you
always want to post photos to Facebook after they appear in a particular shared
Dropbox folder. Or you want to save links from your favorite tweets to
Instapaper. Or you want to see an alert in the evening if tomorrow’s weather
forecast calls for rain. All sorts of things that can occur in one cloud service can
trigger events in other cloud services—an area ripe for automation.
Log In Faster with iCloud Keychain and Safari
Autofill
Let’s begin with an easy way to automate filling out all those pesky Web forms,
without the need for any extra software.

y
Note: This topic is adapted from my book Take Control of iCloud.
The Mac version of Safari (like nearly all Web browsers) can automatically fill
in your contact information (name, address, phone number, and so on), as well
as usernames and passwords, on Web forms. Safari uses OS X’s system-wide
keychain mechanism to securely store the portions of this data that aren’t already
in your Contacts app.
iCloud Keychain, a feature introduced in Mavericks and iOS 7, extends this
capability. It lets you sync a keychain across your Apple devices securely via the
cloud. The biggest benefit is that Safari for iOS can now autofill usernames and
passwords that you stored in a keychain on your Mac (and vice-versa). But that’s
not all, iCloud Keychain also includes:
A strong password generator built into Safari (on both platforms)
The capability to store, sync, and enter credit card information (except the
CVV number from the back of the card) in Web forms
Support for multiple sets of credentials per site
A new way to view and remove passwords within Safari
In addition, if you turn on iCloud Keychain, it will automatically sync the
settings for the accounts listed in the Internet Accounts pane of System
Preferences on your Mac (including email accounts, Twitter, Facebook, and
LinkedIn) amongst your other Macs. This account syncing does not extend to
iOS devices.
Enable and Configure iCloud Keychain
The short version of setting up iCloud Keychain is: go to System Preferences >
iCloud, select the Keychain checkbox, and enter your Apple ID password.
Repeat on your other devices. However, unlike most iCloud features, flipping a
single switch isn’t all there is to it here; the initial setup process is actually more

involved. Also, the steps you follow with whichever device you set up first will
be different from the steps for setting up all subsequent devices.
If you haven’t already set up iCloud Keychain—or if you suspect you might
have less-than-optimal settings—I encourage you to read my Macworld article
How to use iCloud Keychain, which spells out the steps and options in detail.
Once you’ve got everything set up and your keychain is syncing between
devices, you can start using data (and adding to it) in Safari. (So far, iCloud
Keychain works in Safari but not in any third-party browsers, although that
could change in the future.) The behavior is similar on OS X and iOS.
Enable iCloud Keychain Features in Safari
First, make sure Safari is set up to use all of iCloud Keychain’s features.
On a Mac, open Safari and then choose Safari > Preferences. Click AutoFill, and
make sure the checkboxes are selected for each type of data you want to autofill
—the two options relevant to iCloud Keychain are User Names and Passwords
and Credit Cards. (While you’re at it, you might also want to enable Using Info
from My Contacts Card and Other Forms. Even though that data isn’t stored in
iCloud Keychain, it’s useful to be able to autofill it.)
On an iOS device, tap Settings > Safari > Passwords & AutoFill, and turn on
Names and Passwords and Credit Cards.
Autofill Passwords
When you load a page for which you’ve already stored credentials in your
iCloud Keychain, Safari fills in the Username and Password fields for you—all
you need to do is click or tap Login (or a similar button). If you’ve stored more
than one set of credentials for a site—for example, if you have two different
accounts for Google or Twitter—you can click or tap in the Username field to
display a pop-up menu (Figure 25) with your logins; choose the one you want to
fill in your credentials.

Figure 25: If you have multiple credentials for a site, click or tap in
the Username field to display a pop-up menu and then choose one.
Some Web sites deliberately block browsers and password managers from
saving passwords you enter there, in a misguided attempt at greater security.
Earlier versions of Safari had a preference that, when enabled, forced Safari to
override some of these blocks, but as of 10.9.2 Mavericks, that preference no
longer exists—it’s entirely up to Safari whether to accept or attempt to bypass
any site’s restrictions. And guess what? One notable site where iCloud Keychain
can’t autofill your password is…icloud.com! That seems like an awful oversight,
and I hope Apple changes it soon.
Store New Passwords
If you arrive at a login page for which iCloud Keychain does not yet contain
your credentials, enter them manually (or with a third-party password manager)
and log in. Safari should then display a prompt asking if you want to save the
password in your iCloud Keychain. Click Save Password to store your
credentials for that site.
If you already have credentials stored for the site and you want to store an
additional username/password combination, first delete the credentials Safari has
autofilled. Then enter the new credentials, log in, and click Save Password when
prompted.
Generate a Random Password

When you’re asked to register on a Web site and create a new password, iCloud
Keychain can generate one for you and store it all in one step. First, make sure
the Password field is completely empty. Then click or tap in it to display a
random password (Figure 26). Click or tap the password to fill it in (if there’s a
Repeat Password field, Safari fills the password there too). Safari also saves your
credentials for the site without any additional steps.
Figure 26: Click or tap in a blank Password field to see a suggested
random password.
Store and Enter Credit Card Numbers
Credit cards work much like passwords—if you type or paste a credit card
number into a blank field (along with its expiration date) and submit the form,
Safari prompts you to save the credit card number in your iCloud Keychain.
(Remember, it doesn’t save or store the CVV number from the back of your
credit card.)
When it’s time to fill in a stored credit card number, click or tap in the Credit
Card Number field and choose the desired credit card from the pop-up menu.
Autofill Other Data

I mentioned that you might want to enable Safari’s two other autofill features in
Safari > Preferences > Autofill. The first, Using Info from My Contacts Card,
populates form fields with your contact information when appropriate. The
second, Other Forms, does the same thing for anything you’ve previously filled
in on a form that isn’t part of your credentials, credit card, or contact information
—that might include preferences, survey questions, or nearly anything else.
As you browse the Web, if Other Forms is selected, Safari remembers
everything you enter in a form field.
Later, if you want to fill that in on the same site—or if you want to fill in your
contact information—you have two choices:
Choose Edit > AutoFill Form (Command-Shift-A).
Start typing your contact information in any form field. When Safari sees
that it matches the corresponding information from your card in Contacts, it
pops up a little card icon labeled “AutoFill your contact info.” Click this
icon or press the Down Arrow key to select it, and then click AutoFill (or
press Return) to fill in the rest of the form.
Automate Web Logins with a Password Manager
Although the combination of Safari and iCloud Keychain can simplify entering
most form data, you might want to consider (instead or in addition) a third-party
password manager. Why would you pay for something that’s built into OS X and
iOS? Well, third-party tools can do several important things that iCloud
Keychain can’t:
Work on older versions of Mac OS X, as well as non-Apple platforms
(Android, Windows, Linux)
Generate stronger random passwords to your exact specifications (length,
case, numbers, special characters, and so on)

Autofill credentials in other OS X browsers (Google Chrome, Firefox, Web
Aviator)
Store and fill in multiple sets of contact data (such as home and work)
Fill in your credit cards’ CVV numbers, so you don’t have to dig them out
of your wallet every time you make a Web purchase
Store a broader range of information types, including software licenses,
passports, memberships, and reward programs
Provide a friendlier interface for viewing and editing data than Apple’s
awful Keychain Access utility
For all these reasons, although I use and appreciate iCloud Keychain, I rely more
heavily on a password manager called 1Password. It syncs all my data amongst
my Macs and iOS devices, as well as Windows and Android devices. It has lots
of useful organizational features. And, it gives me a greater feeling of control
over my passwords than iCloud Keychain does. When I get to a Web page that
asks for my credentials, I simply press the default keyboard shortcut Command-
\, and 1Password fills them in and submits the form. Piece of cake.
In fact, I like 1Password so much I wrote a book about it: Take Control of
1Password. If you choose to use 1Password, you may find that book helpful in
getting up to speed.
However, 1Password is not by any means the only game in town. Other third-
party password managers that have most of the same features (and thus, the same
advantages over iCloud Keychain) include Dashlane, LastPass, and RoboForm.
I’ve tried them all and would happily recommend any of them.
Tip: To learn more about password security generally—including what crucial steps you
should take beyond simply using a password manager—see my book Take Control of Your
Passwords.
Automate More Web Activities

Automate More Web Activities
If you want to automate a series of operations on Web pages, such as logging in, filling in
forms, and performing searches, you can use either Keyboard Maestro (see Control Your
Mac with Keyboard Maestro) or a scriptable browser called Fake. I used Fake for a while but
switched to Keyboard Maestro when it added controls for Chrome and Safari. As I write this,
Fake hasn’t been updated in over a year.
Automate Cloud Services
Hundreds of apps, sites, services, and other products proclaim their connections
to the cloud, even though it’s often unclear what “cloud” means or what its
benefits are. A consequence of this cloud craze is that you can end up with
dozens of accounts with cloud services that partially overlap in capabilities. Yet
for the most part, these services don’t communicate with each other. The result
is that you may end up spending a lot of time taking a file, photo, or piece of
information from one cloud service and moving or posting it to another service.
Luckily, a few sites have emerged whose entire purpose is to connect cloud
services for you, automating the cloud so that useful things happen in one
service when something happens in another.
Let me give you some concrete examples of how multiple cloud services can be
connected and automated:
Add something to the Reminders app (in OS X or iOS) and it’s copied to an
Evernote checklist.
When someone tags you in a Facebook photo, download that photo to your
Dropbox.
Post an Instagram photo and have it automatically sent to Twitter too.
Save all your incoming email attachments to your OneDrive.
Send a thank-you note by email whenever someone endorses you on
LinkedIn.
Got the idea? Let’s look at three sites that let you do those sorts of things

Got the idea? Let s look at three sites that let you do those sorts of things.
Tip: I wrote this little (not so little) book called Take Control of the Cloud, which undertakes
the ambitious task of making sense of the cloud. If you find the many competing and
overlapping cloud services overwhelming, this book will help you sort out what you need.
IFTTT
IFTTT (for If This, Then That) is the best-known and most popular site in this
category. The name describes the concept: you create two-part “recipes” that
say: If this happens (in one cloud service), then do that (in a second service).
These formulations are a bit like email rules, except that there’s always exactly
one condition and one action—simple.
What services can you connect? Why, there are well over 100 of them, which
IFTTT refers to as “channels,” covering almost every major cloud storage
platform (Box, Dropbox, Google Drive, OneDrive…), social network
(Facebook, LinkedIn, Twitter, Foursquare…), and photo site (Flickr, Instagram,
500px…), plus iOS data (contacts, location, notifications, photos, reminders),
email, blog platforms, news sites, and even things like the date, time, and
weather. The list is growing all the time.
IFTTT is free. After signing up for an account, you activate whichever channels
you’re interested in by signing in to the relevant accounts. Then you can choose
from any of tens of thousands of prebuilt recipes, or concoct your own as
follows:
1. Click Create.
2. Click the word this.
3. Click a trigger channel—where you look for the new piece of data that will
kick off the recipe.
4. Fill in any necessary information (the options vary by channel). For
example, if your trigger channel is Facebook, you click one or more links to

specify what particular activity in your Facebook account you want to use
(such as “You are tagged in a photo”). click Create Trigger.
5. Now click the word that.
6. Click an action channel—where the information from the trigger channel
will be sent.
7. Once again, specify any details necessary to complete the action, such as
whether you want to download a photo or have its URL added to a text file.
8. Click Create Action.
9. Finally, click Create Recipe.
That’s it! Your recipe now runs by itself, automatically taking the action you
specified when the trigger occurs.
Tip: For a great example of using IFTTT with iOS notifications (via iCloud), read Ben Waldie’s
Macworld article Power tools: Make events on your Mac trigger iOS notifications.
Zapier
Like IFTTT, Zapier combines a single trigger and a single action into an
automated tool, called a Zap. Also like IFTTT, there are thousands of prebuilt
Zaps to choose from, or you can create your own using any of over 250 cloud
services. Careful readers will notice that “over 250” is a much larger number
than IFTTT’s “over 100.” However, many of Zapier’s options are either obscure
or available only with premium (paid) subscriptions.
Speaking of which: Zapier is free for up to 5 Zaps, 100 tasks per month, and 15-
minute intervals between Zaps. If you want more Zaps, more tasks per month,
and/or more-frequent Zaps—as well as those extra cloud services available only
to paid subscribers—you’ll have to pony up anywhere from $15 to $99 per
month.
Those numbers, and the names of the premium services (Amazon S3,

GoToMeeting, Salesforce, ZOHO CRM, and so on), reflect Zapier’s business
focus. Likewise, the use cases detailed on Zapier’s site are all about customer
support, marketing, operations, and sales—not the sorts of things most ordinary
consumers care about.
All that to say: Zapier is plenty powerful, but even though it has some nifty
features that IFTTT lacks, I find it less approachable, and less applicable to my
personal needs, than IFTTT.
Wappwolf Automator
A company called Wappwolf offers three nearly identical services: Automator
for Dropbox, Automator for Google Drive, and Automator for Box. In each case,
you set up actions that watch particular folders in a cloud storage service, and
when something is added to one of those folders, any of a few dozen actions can
occur, such as:
Converting a document to PDF
Uploading a graphic to Facebook
Sending a tweet
Resizing a graphic
Emailing a file
Uploading a file to a different cloud service
So, it’s along the same lines as the other services I’ve covered here, except that
it’s less flexible on the trigger end—only making a change to a folder synced to
the cloud can prompt an action. Basic plans are free, with some limits; you can
remove most of the limits for a small monthly fee.
Discover Other Web Automation Options
Connecting cloud services is fantastically useful, but sometimes you may need
something a bit simpler and more elegant For example you might want to

something a bit simpler and more elegant. For example, you might want to
monitor the Web (as a whole) for new pages on a topic of interest, or monitor a
specific page for changes.
Monitor the Web with Google Alerts
The Web changes continuously, so Google is constantly updating its massive
index of the Web to provide up-to-date search results. As a result, a search you
perform one day may yield completely different results than it did yesterday. If
you’d like to stay on top of a given subject, you can use the free Google Alerts
service to perform an automated search every day (or even more frequently, if
you like) and send you any new results by email or a customized RSS feed.
To use Google Alerts, you fill out a form (Figure 27) with your search query
(just as if you were doing a regular Google search) and a few other pieces of
information—most crucially, your email address (or choose Feed from the
Deliver To pop-up menu to create an RSS feed). The current results of your
query appear on the right. Click Create Alert, and you’re done—you’ll get the
results automatically.
Figure 27: Create a Google Alert by filling out this form.
You can go back to the Google Alerts page whenever you like and click Manage
Alerts to add, remove, or modify alerts.

Ideas for Google Alerts:
Google yourself and find out when people are talking about you.
Follow rumors about hypothetical new Apple devices.
Get the latest news on treatments for a medical condition a loved one is
experiencing.
Search for discounts and deals on products you’re interested in.
Keep tabs on your competition.
Yahoo Pipes
Yahoo Pipes is a free service that lets you fetch information from RSS feeds and other
sources, filter it, sort it, and manipulate it in a variety of other ways, with a new RSS feed as
the output.
You create pipes by dragging modules from a list onto a canvas, filling in some blanks, and
drawing lines to connect the doohickeys together. In that way, it’s much like Automator,
except that all this happens in a Web browser, and it’s strictly for processing Web/RSS
content.
Pipes won’t replace a service like IFTTT or Google Alerts, but it may be a good option for
passively monitoring topics of interest—or creating your own customized, composite RSS
feeds.
Use a Cloud Service to Monitor a Web Site for Changes
In the online appendixes to my book about backing up your Mac, I have tables
listing the features of many backup apps and cloud services. This information
changes all the time, though. One of the ways I keep that information (more or
less) up to date is by monitoring the pages that list release notes or other version
information for each of dozens of apps. When one of the pages changes, I check
to see if the change is relevant to my table, and if so, I update the table
accordingly.
Needless to say, I don’t manually check dozens of Web pages for changes every
day! Instead I use a free service that checks for me and sends me an email if any

day! Instead, I use a free service that checks for me and sends me an email if any
of my monitored pages has changed since the last time it checked.
I’ve used two such services—WatchThatPage, which is has a kind of awkward
and old-fashioned interface, but gets the job done; and ChangeDetection.com,
which is more modern and customizable. (For example, it can send change
notices via a custom RSS feed, much like Google Alerts, and it can look for
specific text that is added or removed.) Either way, the process is dead simple:
sign up for a free account, enter a URL, and click a button to start monitoring it.
Tip: If you do use a service like this, do yourself a favor and set up a rule in your favorite
email client (see Automate Email) to file all those change reports into a special mailbox. They
tend to accumulate over time!
Other reasons to monitor Web sites for changes:
Watch for schedule changes, special events, and other announcements from
your child’s school.
Find out the second any new Take Control book is published—even if
you’re not on our mailing list!
Learn about new products or price drops in the Apple Store.
Get updates on your favorite crowdfunding projects from Kickstarter,
Indiegogo, and the like.

Automate Backup and Syncing
Anyone who has followed my writing for Macworld, TidBITS, or Take Control
over the last decade is undoubtedly aware of my passionate insistence on good
backups. I’ve written several books and lots of articles on the topic (including
Take Control of Backing Up Your Mac), and I preach about the importance of
backups at every opportunity.
In this book, I’m not going to try to convince you to back up your Mac; I’ll take
for granted that you already know that’s a good idea. Instead, I want to focus on
automating backups. Believe it or not, there are still people who back up
important files by dragging them to another disk once a day. Still others use
backup software to do the job, but they back up only when they remember to run
that software.
My feeling is that if you don’t have hands-off backups, you’re doing it wrong.
Backups should happen all by themselves—whether once a week or multiple
times an hour—without any intervention. Not only does it require extra effort to
launch a backup app and click a button, it’s an interruption—one you might put
off if you’re too busy, or forget about at a crucial moment right before losing
data!
In this chapter, I talk about three backup scenarios—using Time Machine, using
a third-party tool that creates versioned backups, and creating bootable
duplicates. You may not use all of these methods, but whichever one(s) you use,
they should be automated.
I also talk briefly about automating syncing files between Macs. Although that
doesn’t count as backup in my book, many of the same assumptions apply—and
you may even be able to use the same software for both backups and syncing.
Run Backups Automatically with Time Machine

Run Backups Automatically with Time Machine
Time Machine is the backup capability that Apple built into OS X. It’s not
necessarily the best backup tool, but it’s reasonably good. Most importantly, it’s
extremely easy to set up, making it the path of least resistance for many users.
Time Machine ordinarily runs once an hour, backing up whatever has changed
or been added since the previous hourly run. This happens in the background,
with barely any visible clue. So, if you’ve set up Time Machine already, and
you’ve kept the default options, there’s nothing more to see here—move along
to the next topic.
If you haven’t already set up Time Machine and would like to—or if you
configured it but turned off automatic backups—keep reading.
Configure Time Machine
To activate Time Machine, all you need to do is tell it what destination to use:
1. Open the Time Machine pane of System Preferences.
2. Click Select Backup Disk.
A dialog appears (Figure 28), listing all volumes eligible to be a destination
disk (including external hard drives and Time Capsules) and the amount of
free space on each.

Figure 28: Available local and network volumes appear in this
window; select the one you want to use and click Use Disk.
3. Select a volume, and click Use Disk. (If you’re using a Time Capsule for
the very first time, select Set Up Other Time Capsule, click Open AirPort
Utility, and follow the instructions.)
In the Time Machine preference pane, the master switch automatically moves
from Off to On, and a timer begins a 2-minute countdown before your first
backup begins. (You may prefer to turn it off until you’ve excluded files from
Time Machine, which I talk about next.)
At any point, you can flip that switch On or Off. When it’s off, that means only
that Time Machine doesn’t run automatically; you can still run it manually, at
any time, by clicking and holding (or right-clicking) on the Time Machine Dock
icon and choosing Back Up Now, or by choosing Back Up Now from the Time
Machine 
 menu in the main menu bar. (If you don’t see the Time Machine 
menu, you can enable it with the Show Time Machine in Menu Bar checkbox in
the Time Machine system preference pane.) You can turn off Time Machine
temporarily if need be, but please don’t leave it off. Remember, backups are
most valuable when they’re automatic!
During each of Time Machine’s hourly runs, it backs up only the files that have
changed since its previous run (except files you’ve excluded, as I discuss next).

If an application stores its data as a package (that is, a folder that looks like a file
in the Finder), Time Machine backs up only changed items within the package.
(Among many others, iPhoto, GarageBand, and DEVONthink use packages for
their data.) However, be aware that Time Machine won’t back up iPhoto or
Aperture while the application is running.
Restore Data with Time Machine
Once you have Time Machine set up and running, it normally does its thing
silently in the background, without intruding on your work. And you can
continue ignoring it until the time comes when you need to restore something—a
missing file or folder, or a previous version of a file you still have.
If you notice that a file or folder is missing, or that you’ve accidentally changed
it and need an older version, follow these steps to retrieve an item from your
Time Machine backup:
1. In the Finder, make sure the window that contains the item you want to
restore (or the one that used to contain it, if it’s been deleted) is frontmost—
you can verify this by clicking anywhere in the window.
2. Click the Time Machine icon in the Dock or choose Enter Time Machine
from the Time Machine 
 menu.
The frontmost window moves to the center of the screen, and the screen’s
background changes to the starry “time warp” display, with copies of the
window receding into the background (Figure 29).

Figure 29: Go “back in time” to a previous version of your data.
3. To locate the file or folder you want, do one of the following:
Near the bottom right corner of the screen, click the back arrow (the
one pointing toward the center of the screen, or backward in time).
Time Machine zooms back to the most recent backup in which that
window’s contents were different. Keep clicking to continue zooming
back through previous versions of that window; click the forward
arrow to move forward in time.
Use the controls along the right edge of the screen to jump to a
particular backup. As you hover over the small horizontal lines, they
zoom in to display the date and (for recent backups) time of the
corresponding backup. Click any of these lines to jump right to that
version of the window. As you zoom backward or forward in time, the
date and time of the backup you’re currently viewing is shown at the
bottom of the screen in the middle.
4. Once you’ve selected the item you want to restore, decide whether you
want to restore it to its original location or somewhere else:
To restore to the original location, click the Restore button in the lower
right of the screen. Time Machine immediately restores the selected
item, and returns you to the Finder. (Time Machine may prompt you to
enter an administrator password.) You can use this procedure even if

you want to restore an older version of a file but keep the current
version. After you click Restore and the Finder reappears, you’ll see
an alert asking whether you want to replace the existing file, keep both
copies, or keep the original (thus canceling the restoration).
To restore to a different location from the original, right-click (or
Control-click) the item and choose Restore “File Name” To from the
contextual menu, navigate to the desired destination, and click Choose.
If you decide against restoring any files, instead click the Cancel
button in the lower left corner of the screen or press Esc.
Tip: For more details, including how to restore an entire disk with Time Machine and how to
restore data from within apps such as Contacts and Mail, see my book Take Control of
Backing Up Your Mac.
Create Handsoff Versioned Backups
Whether or not you use Time Machine, you may use another product to create
versioned backups (that is, backups that store multiple versions of each file).
Dozens of apps can do this, including apps that back up data to the cloud, apps
that back up data to local devices, and apps that do both.
In any case, I simply want to emphasize that if you use any such app, you should
be certain it’s configured to perform backups without any manual effort.
Some apps back up files as soon as they change, or at least within an hour or so
—these include Backblaze, CrashPlan, DollyDrive, GoodSync, Memeo
Premium Backup for Mac, NTI Shadow, Syncovery Professional Edition,
Synchronize Pro X, and Synk. As long as that’s the case—and you haven’t
disabled automatic backups—you should be in good shape.
But many backup apps, especially those that have been around for many years,
run only on a schedule that you determine. Some apps can run as often as once
per minute; others can run no more frequently than once per day. Apps that
require scheduling include ChronoSync, Prosoft Data Backup, Intego Personal

equ e sc edu
g
c ude C
o oSy c,
oso t Data Bac up,
tego
e so a
Backup X6, and QRecall, among others.
Note: Retrospect Desktop normally runs on a schedule, but it can be set to run whenever
client machines are available using its Proactive Backup feature.
Follow the instructions that came with your backup app to schedule backups.
You can choose what frequency works best for you, which should take into
account how actively you modify files and how much of an impact the backup
app has on your system when it runs. For me, once an hour is too infrequent, but
even if you use your Mac only casually, I suggest scheduling backups to run at
least once a day.
What I use: Because I write so much about backups, I have more backups than I need, so I
wouldn’t necessarily tell you to do what I do. But I use a combination of Time Machine,
CrashPlan, and DollyDrive (with both local and cloud destinations) for versioned backups,
plus several cloud syncing services that store multiple versions of certain files.
Schedule Bootable Duplicates
Along with versioned backups, bootable duplicates are a key pillar of a complete
backup plan. They let you get back to work quickly in the event of a hard drive
failure, give you a useful troubleshooting tool, and make upgrading to a new
version of OS X safer.
You can’t make a bootable duplicate by copying files in the Finder; you need a
special utility. Lots of programs can do this, but I want to talk about two—
SuperDuper and Carbon Copy Cloner—that focus on just this one task but do it
easily, effectively, and on a schedule (I recommend once a week at the very least
—once a day is even better).
Set Ownership on the Destination Volume
Before setting up your backup software to create a bootable duplicate, check to
see that the destination volume does not ignore ownership; if it does, your

duplicate will not be bootable. To check this, select the destination volume’s
icon in the Finder and choose File > Get Info. In the Sharing & Permissions
portion of the window, make sure the checkbox labeled Ignore Ownership On
This Volume is deselected.
Create a Duplicate with SuperDuper
SuperDuper has a well-deserved reputation for its ease of use and reliability. The
software costs $27.95; a free version lets you create duplicates but not update
them incrementally.
To create a duplicate with SuperDuper, follow these steps:
1. Launch SuperDuper.
2. You’ll see two pop-up menus at the top of the window that appears (Figure
30); choose the source (your internal disk) from the one on the left and the
destination (the disk or partition set aside for duplicates on your external
disk) from the one on the right.
Figure 30: The SuperDuper window asks you for just a few pieces of
information, and explains what will happen in plain English.
3. From the Using pop-up menu, choose Backup - All Files.

4. Click Options. In the General view, from the During Copy pop-up menu,
choose Smart Update Destination from Source. Click OK.
5. To schedule this duplicate to occur on a schedule, click Schedule. Select the
day(s), week(s), and time to run the schedule—I recommend at least one
day per week but preferably once a day, at a time when you aren’t actively
using the Mac. Click OK.
Immediately or on the schedule you selected, SuperDuper duplicates your
internal drive to your external drive.
Create a Duplicate with Carbon Copy Cloner
Carbon Copy Cloner was one of the first tools available for creating a bootable
duplicate of an OS X volume, and it has undergone numerous revisions since
then. It was once freeware, but now costs $39.95.
Although it was originally designed only for creating bootable duplicates,
Carbon Copy Cloner has gradually added more features; it now also optionally
creates versioned backups. In fact, in the course of creating a bootable duplicate,
it can move any outdated or deleted files safely aside on the destination disk—
meaning the duplicate actually contains extra data, but that’s fine because the
archived versions of old files won’t prevent booting or normal operation. Carbon
Copy Cloner now has several other safety features too, which can protect you
from the consequences of accidental file deletion.
In the instructions that follow, I deliberately avoid most of these safety features,
and instead show you how to create a standard, run-of-the-mill duplicate that’s a
true clone of the source volume. Consult the documentation that comes with
Carbon Copy Cloner to learn about other ways of using the software to back up
your disk.
To create a duplicate with Carbon Copy Cloner, follow these steps:
1. Launch Carbon Copy Cloner.

2. In Carbon Copy Cloner (Figure 31), Choose your internal disk from the
Source pop-up menu on the left and the disk or partition set aside for
duplicates on your external disk from the Destination pop-up menu on the
right.
Figure 31: Unlike SuperDuper, Carbon Copy Cloner labels its plain-
English explanation ”What is going to happen” instead of “What’s
going to happen?”. Completely different.
3. From the Handling of Data Already on the Destination pop-up menu,
choose Delete Anything That Doesn’t Exist on the Source.
4. Click Clone, enter your administrator password, and click OK to make an
immediate duplicate. Then wait—it’ll take a while.
After the initial duplicate is finished, continue with the following steps to
set up a scheduled update:
5. Click Schedule This Task. Select when you want the task to run; I suggest
choosing On a Weekly Basis (if not more frequent) from the Run This Task
pop-up menu, and selecting a day and time when your Mac won’t be busy.

6. Click Save; you can then quit Carbon Copy Cloner.
At the scheduled times, Carbon Copy Cloner updates your duplicate.
What I use: I use Carbon Copy Cloner for bootable duplicates, and I have it scheduled to
update my duplicate twice a day (although I’m tempted to make it four times a day). Because
it updates so frequently, relatively little changes between runs, so it’s pretty fast.
Automate Mac-to-Mac Syncing
Do you use two or more Macs regularly? If not, skip ahead to the next chapter.
But if you do, you may find it useful to keep some or all of the data in sync
between Macs. I can say from experience that it’s far better to automate this
process than to do it manually!
I suggest thinking through two main questions:
First, is it desirable (or even possible) to keep all your personal files in sync
between two Macs?
If you have a Mac Pro with 4 TB of storage and a MacBook Air with 128 GB,
the answer is clearly no. Even if all your Macs have enough space for all your
files, you may not need or want to have all of them everywhere. So, if the
answer to this question is no, you’ll have to figure out which subset of files to
keep in sync. All things being equal, it’s easiest if you can segregate all those
files into a single folder or a small number of folders.
You’ll notice, by the way, that I said personal files. You should never, ever try
to sync all files between two Macs—in particular, stay far away from the top-
level /System, /Library, and /Application folders, as well as any
hidden folders. Attempting to sync any of those can lead to serious data
corruption, including an inability to boot your Mac. So whatever you choose to
sync, make sure it’s not part of OS X itself.

Second, is it desirable (or even possible) to use a cloud service to sync files
between your Macs?
I’ll use Dropbox as an example. If it turned out that you had 80 GB of data you
wanted to keep in sync between two (or more) Macs, you could purchase 100
GB of storage from Dropbox for $99 a year. Install Dropbox on your Macs,
make sure all the files you want to sync are in your Dropbox folder, wait for that
initial upload to finish, and…you’re done. You never have to run sync software
or take any other manual action; file changes propagate almost instantly. As a
bonus, the files in your Dropbox are also available on your mobile devices, and
can be shared easily with others.
What’s true of Dropbox is also true of numerous competing services—Amazon
Cloud Drive, Bitcasa, Box, Google Drive, Microsoft OneDrive, SpiderOak,
SugarSync, and many more. They each have their own features, benefits, and
pricing, and you may prefer one over the others for any number of reasons. But
they all can perform the essential task of syncing the contents of one or more
folders across Macs, automatically.
Coming in Yosemite: Along with the release of Yosemite and iOS 8 in late 2014, Apple
plans to introduce iCloud Drive, which will give iCloud inexpensive, Dropbox-like file storage
for any file on any device and will make iCloud a real competitor to the services I just listed.
Tip: You’ll find tons of useful information about Dropbox in my book Take Control of Dropbox.
Of course, you may not want to sync files via the cloud, due to privacy concerns,
cost issues, available bandwidth, or the sheer volume of data. If that’s the case,
you might want to consider sync software such as:
BitTorrent Sync: Although the BitTorrent file sharing protocol has been
around for a long time, BitTorrent Sync is a relatively new app that
functions much like Dropbox, but without the cloud storage. You tell it
which folders you want to sync on each of your Macs, and syncing happens

quickly, in the background, whenever files change. An iOS app is available
too. And, BitTorrent Sync is free!
ChronoSync: This powerful and flexible app can sync files between folders,
volumes, or Macs in almost any way you can think of—one-way,
bidirectionally, with or without filters, and so on. (For Mac-to-Mac syncing,
you may want the add-on ChronoAgent app on one of the Macs.) You can
set up syncing to happen as frequently as once a minute.
Synk: Synk Standard and Synk Pro are also highly capable sync tools, and
unlike ChronoSync, they run continuously without an explicit schedule,
updating files whenever they change. Synk Pro also offers N-way
synchronization (where you can sync three or more Macs to each other in a
single operation). I used Synk for years, but it has become increasingly
flaky and hasn’t been updated since 2011, so I’m hesitant to trust it until I
see evidence that the developer is paying attention to it.
What I use: I use BitTorrent Sync to keep a few of my key folders (~/Documents,
~/Desktop, and ~/Downloads) in sync between my two main Macs. I also use several
cloud-based syncing services, most notably Dropbox, to make a subset of my files—
especially those I need to share with other people—available across platforms.

Use OS X Automation Technologies
In this chapter, I want to talk about a particular subset of technologies that go
considerably deeper than things like keyboard shortcuts or text expansion. The
four topics I cover here—Automator, AppleScript, services, and shell scripts—
aren’t so much tools as platforms built into OS X you can use to create your own
tools. As such, they’re more complex, but also far more powerful.
Coming in Yosemite: Starting in OS X 10.10, you’ll be able to use JavaScript, as well as
AppleScript, to control your Mac’s apps.
I’ve arranged the topics in this chapter in order of what I consider least to most
intimidating. Services are plug-ins that add features for working with text,
graphics, and more to almost any app. Automator lets you construct multi-step
operations called workflows using graphical building blocks rather than code.
AppleScript is a language you can use to write programs that do all sorts of
useful tasks on your Mac—but it’s a step or two up from Automator in
difficulty. And shell scripts run in the Terminal command-line utility,
performing tasks using OS X’s Unix underpinnings.
Worried that this all sounds too complicated? Don’t be. I want to make sure you
understand this crucial concept up front:
You can use a service, Automator workflow, AppleScript, or shell script without
knowing how to create one.
In fact, that’s precisely what I recommend. For each of the technologies in this
chapter, I suggest the following process:
1. Learn how to locate, install, and use scripts/tools written by other people.

2. Once you’re comfortable using them, try modifying them slightly. That’s
one of the easiest ways to learn how they work while also customizing them
to better meet your needs.
3. When you have time to tinker, start to create your own scripts/tools, using
the resources I recommend (and with other people’s work as a guide).
Use Services for Systemwide Shortcuts
In OS X, a service is a special, context-sensitive program that can operate almost
anywhere. You can find services on the Services submenu of the application
menu (that is, the menu with the current application’s name). Or, right-click (or
Control-click) something and choose a service from the very bottom of the
contextual menu. (Services appear on a Services submenu of the contextual
menu if more than four of them are active and applicable to whatever you
selected.)
If you look at this menu in different apps, and with different things selected,
you’ll notice that your choices change. For example, you’ll see one set of
commands when you select a file in the Finder, a different set when you select
text in Mail, and yet another set when you have a graphic open in Preview.
That’s because each service is designed to operate only on certain kinds of data,
or in certain contexts. The idea is to show you only the commands that are
relevant to what you’re currently doing.
Services, like Automator workflows and AppleScripts (discussed later in this
chapter), can perform complex tasks for you with only one click. So they’re
fantastic automation tools that every Mac user should be aware of. As we’ll see
in a moment, you can use a combination of built-in services, third-party services,
and services you create yourself to automate a wide variety of activities.
Before you do anything else, you should configure the services on your Mac to
your taste. Not all the services installed on your Mac are necessarily active (only
active services appear in the Services submenu); you can enable or disable
services as you wish. In addition, you can assign a keyboard shortcut to any

y
y
g
y
y
service to avoid hunting for it in a hard-to-reach submenu.
To set up Services on your Mac:
1. Go to System Preferences > Keyboard > Shortcuts > Services (Figure 32).
Figure 32: Enable, disable, or add keyboard shortcuts to services
here.
2. Select the checkbox next to any service you want to enable; deselect those
you want to disable. (Remember, selected services appear in the Services
submenu only when the context—the app and data type—are appropriate.)
3. To add a keyboard shortcut to a service that doesn’t have one, click the
light gray word None to the right of the service name and click Add
Shortcut. Or, to change an existing shortcut, double-click it.
4. Press the new key combination you want to use for the service. (To remove
a shortcut, select it and press Delete.)
Ordinarily, changes to the Services menu happen immediately, so you can try

out your newly activated service or shortcut right away.
Find and Use Services
OS X includes lots of built-in services, which you can explore simply by
selecting various kinds of things (text, files, images, URLs) and then looking at
the Application > Services submenu. For example, you can select a word and
choose Look Up in Dictionary from the Services submenu to open the
Dictionary app with that word’s definition showing, or select a graphic in the
Finder and choose Set Desktop Picture to make it your Desktop picture without
having to open System Preferences > Desktop & Screen Saver > Desktop and
adding it there manually. In addition, some apps install their own services.
Beyond what comes with OS X and the apps you already have, there are a great
many free services you can download that are extremely useful. For instance:
The Download Services page at Mac OS X Automation has dozens of
services for images, email, movies, PDFs, Web browsing, and other
contexts.
DEVONtechnologies’ Needful Things page includes three services:
BlueService (for sending text to a Bluetooth device), CalcService (for
performing calculations on text selections), and my favorite, WordService
(which includes numerous commands for reformatting and manipulating
text).
Markdown Service Tools from Brett Terpstra help you format text using the
popular Markdown syntax.
Matt Sephton’s Services page has a variety of useful services.
Waffle Software makes a tool called ThisService that helps developers
create their own services. A number of developers who use that tool have
submitted their own services to Waffle’s site, where you can freely
download them. Note, however, that not all of these work under Mavericks.

Once you’ve downloaded a service, move or copy it into LibraryServices
(to make it available to all users) or ~LibraryServices (to make it available
only to you). Then go back to System Preferences > Keyboard > Shortcuts >
Preferences to enable the specific commands you want to use and assign or
change keyboard shortcuts.
But wait, there’s more! You can create your very own service, without any
programming at all, using Automator, which I discuss next. (For instructions, see
the sidebar Create Your Own Service).
Tip: To learn more about services, visit the Services portion of the Mac OS X Automation site.
Understand Automator
Automator is an easy-to-use technology, included as part of OS X, for bundling
actions into sequences known as workflows. If programming (even the simplified
version in AppleScript) gives you the willies, Automator is nothing to fear. You
don’t have to learn a new language or write in code—just drag things into a list,
fill in some blanks, and check some boxes.
Note: Although it’s often lumped together with AppleScript (which I discuss later in this
chapter), Automator is a completely independent technology that just happens to be capable
of many of the same things.
For example, a workflow can:
Convert text files and graphics into an ebook in EPUB format
Create a graphic from a word or phrase
Import all the images from a Web page into iPhoto
Create and mount a new disk image
Convert a movie file to a size and format suitable for your iPhone or iPad

Create an audio file with a synthesized voice reading the contents of a text
file
Add a 1-pixel gray border around any graphic (that’s how we put the
borders on most of the graphics in Take Control books!)
Workflows are made from building blocks called actions. Automator itself
includes many actions, as do a number of the apps bundled with OS X (such as
Calendar, Contacts, Mail, iTunes, and Preview). Just as a third-party app may or
may not include AppleScript support, some apps come with their own
Automator actions and some don’t. A few third-party apps with good Automator
support are BBEdit, DEVONagent Pro, DEVONthink Pro Office, LaunchBar,
Microsoft Office 2011, Pixelmator, and Transmit. In addition, actions can
optionally contain instructions written in numerous programming and scripting
languages, including AppleScript, Perl, Python, and Ruby, and shell scripts.
I’ll show you how to make a simple Automator workflow. Then I’ll tell you
about some of your other options, where to find existing workflows that you can
use as-is or modify to meet your needs, and how to learn more about Automator.
Tip: If you’re unsure whether Automator or AppleScript is the best tool for a certain
automation task, my advice is to try Automator first, because it’s so much easier to use. If you
get stuck, you can fall back on AppleScript (possibly even including the necessary
AppleScript code as part of your Automator workflow).
Create a Simple Automator Workflow
For an easy (yet somewhat fancy) introduction, we’ll create a workflow that asks
you to type some text, and then speaks it back to you.
Follow these steps:
1. Open Automator (in /Applications).
2. Click New Document.

3. In the dialog that appears, select Workflow (the default) as the document
type and click Choose. Your window should now look something like
Figure 33.
Figure 33: An empty Automator workflow window.
4. If you don’t see a Library list in a sidebar on the left, click Show Library on
the toolbar.
The Library is the list of available actions. You can click a category or app
name to see its available actions, or type a search term into the Search field
to find matching actions.
5. Type text into the Search field to show only text-related actions in the
second column.
6. Locate the Ask for Text action in the second column, and drag it into the
workflow area on the right (Figure 34).
As the name suggests, this action will display a dialog that asks you to enter
text.

Figure 34: The Ask for Text action, ready to be filled in.
7. Fill in the question you want the dialog to ask, such as What would you
like me to say? and, if you like, fill in a default answer, such as
Beep. Select the Require an Answer checkbox to ensure that some text
must be entered (so that the workflow always does something).
8. Return to the second column, find the Speak Text action, and drag it below
the Ask for Text action (Figure 35).
You’ll notice that the two actions join together to show that the output of
the first one (whatever you type into the dialog) is fed as input into the
second one.
Figure 35: Two actions joined into a workflow.
9. If you like, choose a different voice from the Voice pop-up menu.
Your workflow is now ready. To run it, click the Run  button on the toolbar.
You should see a dialog asking you what you want it to say. Accept the default
answer or supply a new one, click OK, and your Mac will speak that text.

That’s the general idea of workflows. Usually, one action produces some sort of
output (a file, a URL, text, or whatever) and feeds that to the next action, which
does something with it and passes it along to another action—and so on. The
final action provides the result in the form you’re looking for (a modified file,
information in a dialog, an open Web page, or what-have-you).
To reuse a workflow, save it (choose File > Save, choose a name and location,
and click Save); you can then double-click it to reopen it in Automator. Or you
can save it as an app (same procedure, but choose Application from the File
Format menu in the Save dialog), and you get a stand-alone, double-clickable
Automator app. (For other ways to package a workflow, see the sidebar
Automator Workflow Types.)
Find and Run Sample Workflows
Automator workflows you find online usually work unmodified on your Mac—
you double-click them and, depending on how they were saved, you either run
them in Automator or they run as apps. (If you want to edit an Automator app,
drop it onto the Automator icon.)
Try some of the sample workflows at these sites:
Linked: A Collection of 70+ Automator Actions, Workflows and Tutorials
at MacStories
15 Automator and AppleScripts You Can’t Live Without at MacLife
10 Awesome Uses for Automator Explained at Tuts+
Tip: If a workflow doesn’t function on your Mac, it may have been configured to look for a file
or folder in a location that doesn’t exist on your Mac. You should be able to change the
relevant action(s) to point to valid locations.
You may find workflows that almost do what you want them to do. Feel free to
experiment by changing options within actions, or by swapping out one action
for another. Unlike AppleScript, Automator makes it simple to tinker without

worrying that you’ll make a syntax error or have no idea what command to use
—your only building blocks are the actions you see in the list.
Automator Workflow Types
When you create a new workflow, a dialog asks you to choose a document type. Here’s what
the options mean:
Workflow: An ordinary workflow that runs only in the Automator app.
Application: A stand-alone, double-clickable app (which can also function as a droplet
that operates on items you drop onto it).
Service: A program that’s available anywhere on your Mac but that operates only on
certain kinds of data. (See Use Services for Systemwide Shortcuts, earlier in this chapter,
and the sidebar Create Your Own Service, just ahead.)
Print Plugin: Also known as a PDF workflow, this is a command that appears in the pop-
up menu at the bottom of Print dialogs—that is, instead of sending a file directly to your
printer, you can send it to an Automator workflow as a PDF.
Folder Action: A workflow that operates on the contents of a specific folder when those
contents change. This is similar to an AppleScript folder action (see Use AppleScript
Folder Actions).
Calendar Alarm: When you set an alarm in Calendar, your choices are normally
Message, Message with Sound, Email, or Open File. This workflow type gives you
another option—trigger a workflow at the alarm time.
Image Capture Plugin: The Image Capture app accepts input from scanners and digital
cameras. With a workflow of this type, whatever comes in via Image Capture can be
processed by Automator.
If you choose the wrong type when you created a workflow, you can change it; choose File >
Convert To, select a different type, and click Choose. Make any needed adjustments and
save the new workflow.
Learn More about Automator
If you want to learn much more about working with Automator:
For a quick and interesting tutorial, start with Apple’s Mac Basics:
Automator page.

See the Automator portion of the Mac OS X Automation site.
Read Neil North’s Automator for Mac OS X: Tutorial and Examples.
Create Your Own Service
Services help you automate common tasks, but what about uncommon tasks—things you’d
like a service to do, but for which you can’t find a prebuilt solution? Even if you’re not a
programmer, you can create your own service with Automator!
To create a service, open Automator and create a new workflow (see Create a Simple
Automator Workflow), but instead of selecting Workflow as the document type, select Service.
When you do so, a few new options appear at the top of your workflow; fill them in to specify
how and where your service will work:
Service Receives Selected: From this pop-up menu, choose the type of data that must
be selected for the service to appear; the service then receives the selected data as
input. For example, choose Text, Dates, Files or Folders, Images, or Web Content. (To
create a service that requires no input at all, choose No Input.)
In: Use this pop-up menu to choose whether your service should be available in Any
Application, or only in a specific application.
Input Is: For certain data types only, you can use this pop-up menu to determine
whether the service acts on the Entire Selection or only the relevant portion of it—for
example, Only Addresses, Only URLs, or Only Dates.
Output Replaces Selected Text: For Text and Rich Text selections only, check this box
if you want the service to replace whatever’s selected after it runs. For example, if you
select a word and run a service that translates it into another language, you may want the
translated word to replace the original.
Then build your workflow as usual, save it, and give it a name; Automator automatically stores
it in ~LibraryServices.
Get to Know AppleScript
Whereas Automator lets you construct a workflow visually by dragging and
dropping actions into a list, AppleScript is a scripting language—a type of
simplified programming language that runs only in a specific environment (in
this case, OS X). That means AppleScripts can run only on a Mac, and because
your Mac must interpret the commands in the script as it runs, an AppleScript

won’t have the high performance of a conventional Mac app. Even so,
AppleScripts can look and act like ordinary Mac apps. You may already be using
some apps that were written in AppleScript without even realizing it!
AppleScript has been around since way back in 1992, and it’s become popular
among people who like to tinker but wouldn’t consider themselves
programmers, because it’s built into OS X and is a lot easier to work with than a
big, complicated language like Objective-C. AppleScript is often referred to as
“English-like,” which is a generous description at best, but if you don’t know
much about programming, you can probably make more sense of AppleScript
code than, say, Java.
Coming in Yosemite: With OS X 10.10, you’ll be able to choose either AppleScript or
JavaScript when writing scripts. That’ll make scripting easier for people who already know
JavaScript. Perhaps one day, you’ll be able to do the same with Apple’s new Swift language.
Write a Simple AppleScript
In a moment, I’ll give you some examples of what you can do with AppleScript
(see Learn What AppleScript Can Do). But first—before I lose the attention of
people who think programming is Just Too Scary—I’m going to show you how
to write a complete AppleScript program with exactly one English word. Here
we go:
1. Open AppleScript Editor (in ApplicationsUtilities).
Coming in Yosemite: AppleScript Editor will be renamed Script Editor, since it’ll support
more than just AppleScript.
2. In the window that appears, click New Document. A blank window opens.
3. Type the word beep (Figure 36). Your script is now complete!

Figure 36: Here’s your first complete AppleScript!
4. Click the green Run  button.
Two things should happen. First, you’ll hear your system alert sound. That was
your program running—congratulations! Second, you’ll notice that the word
beep changed its appearance from a purple, monospaced font to a bold, blue,
proportional font. That’s because when you try to run an AppleScript, the script
editor first compiles it, a process that checks to make sure it’s properly written. If
it is, it formats the entire script in an easier-to-read fashion (which will be more
apparent with a longer script).
Now that you’ve written and run an AppleScript, you can follow the same steps
to run scripts other people have written—simply type (or copy and paste) the
scripts into AppleScript Editor and click the Run  button. We’ll come back to
this idea in a bit, but for now, I merely want to point out that using AppleScript
can be as simple as that.
Learn What AppleScript Can Do

The simplest way to think about what AppleScript can do is that it provides an
alternative means of performing common actions in OS X and in many apps. For
example, you can open or quit an app using menu commands or the keyboard;
AppleScript can also open or quit apps as part of a script. You can rename a file
in the Finder; an AppleScript can do that too. You can open a word processor, do
a search for a certain word, highlight the entire paragraph it appears in, make it
bold, copy it, switch to another app, and paste it—or let AppleScript do all that
for you with one click.
It’s that last type of activity—combining strings of actions that involve multiple
apps—where AppleScript especially shines. AppleScript is also good at
repetitive tasks (say, renaming dozens of files or fetching a long list of items
from one place and copying them to another place) that would otherwise be
tedious. And it gives you access to features on your Mac that aren’t normally
exposed. For example, you just wrote a script that plays a beep, and although
that happens when there’s an error, there’s no button or menu command that lets
you manually trigger a beep. (AppleScript can trigger lots of actions that are far
more interesting and useful than a beep!)
More importantly, an AppleScript can include logic that enables it to make
decisions as it runs—either on its own, or with your input. It can use
programming constructs such as variables, if-then conditions, and loops, and it
can also tie into numerous other automation tools (such as TextExpander,
LaunchBar, and Keyboard Maestro, all discussed elsewhere in this book).
Fine, you may say, but what exactly can AppleScript do?
Well, if you want to know every built-in command and option, with detailed
background and examples, check out Apple’s massive Introduction to
AppleScript Language Guide. It’s written mainly for developers, but it’s
reasonably clear, and well worth consulting.
But that tells you only about AppleScript itself. To find out what you can do
with AppleScript in a particular app, you’ll need to look elsewhere.

Every app that supports AppleScript, including the Finder, contains a dictionary
of all the nouns and verbs AppleScript can use to control it. For example, the
Calendar app’s dictionary contains verbs like create calendar and
switch view; and nouns like calendar, sound alarm, attendee, and
event. To see what’s in any app’s dictionary, drag that app onto the
AppleScript Editor icon. You’ll see something like Figure 37. Look through the
terms and read some of the definitions to see what sorts of things AppleScript
can do in that app.
Figure 37: A portion of the AppleScript dictionary for Calendar.
Unfortunately, not all apps support AppleScript, and of those that do, some of
them have rather meager dictionaries (meaning you can’t do very much with
them). But there are enough deeply scriptable apps out there to enable you to
accomplish a great deal with AppleScript.
I could fill many pages with examples of tasks an AppleScript could perform,
but here are just a few:
Find and remove duplicate messages in Mail, events in Calendar, or records
in Contacts
Combine multiple PDFs into a single file
Apply proper title case to the names of all your tracks in iTunes

Rotate, resize, or change the format of images
Download all the MP3 files linked from a Web page
Rename all the files in a folder with a different extension
Count the number of email messages in a certain mailbox
I’ll give even more examples as the chapter goes on.
Find and Run Example AppleScripts
Here are three simple scripts to try. To use one, copy and paste (or retype) it into
AppleScript Editor and click the Run  button.
Tell me how many files and folders are on my Desktop:
tell application "Finder"
   set theFolder to (path to desktop) as string
   set theCount to number of items in folder
theFolder
   display dialog (theCount)
end tell
Speak the current date:
set theDate to current date
set theYear to year of theDate
set theMonth to month of theDate
set theDay to day of theDate
set niceDate to theMonth & " " & theDay & ", " &
theYear as text
say niceDate
Resize the frontmost Safari window:
tell application "Safari"
   activate
   if front window exists then
set bounds of front window to {0
0
1000

       set bounds of front window to {0, 0, 1000,
600}
   else
       display dialog ("Safari has no open windows.")
   end if
end tell
A quick Web search should turn up thousands of additional AppleScripts you
can use—and I refer you to some additional sources ahead, in Learn More about
AppleScript.
You can also find a bunch of sample scripts already on your Mac, in the
LibraryScripts folder. You’ll notice that those scripts—and perhaps many
of those you find online—aren’t just text; they’re AppleScript files. One way to
use them is to double-click the file (which opens them in AppleScript Editor)
and then click the Run  button. But that’s not the only way!
Another way to access an AppleScript saved as a file is to choose its name from
the AppleScript  menu (Figure 38). Don’t see it? Open AppleScript Editor, go
to AppleScript Editor > Preferences > General, and select the Show Script Menu
in Menu Bar checkbox. By default, that shows all the scripts in
LibraryScripts as well as ~LibraryScripts, so you can add to the
menu by placing your scripts in one of those folders (or a subfolder).

Figure 38: The optional AppleScript menu displays both built-in and
user-supplied scripts, letting you run them with one click (and without
opening AppleScript Editor).
To save any of your own scripts (including those you created using the sample
code just previously) as files, choose File > Save, choose a name and location,
and leave the File Format pop-up menu set to its default choice of Script. Then
click Save.
Save an AppleScript in Other Formats
Besides saving AppleScripts as files (using the Script option in the Save dialog), you can save
them as Applications, which look and act like apps. These run by themselves, without opening
AppleScript Editor, when you double-click them in the Finder. (Applications can also behave
as droplets, acting on whatever files or folders you drop onto them.)
Another option is Script Bundle, which is just like an application except that it can also contain
extra resources the script may need (such as graphics or sounds).
Finally, you can choose Text to save the script as plain text.
Tip: Besides running an AppleScript in AppleScript Editor, from the AppleScript  menu, or as
a stand-alone app, you can also trigger AppleScripts using many of the other utilities
discussed in this book, such as Keyboard Maestro, LaunchBar, and TextExpander.
Edit an Existing AppleScript

Edit an Existing AppleScript
One of the easiest ways to learn AppleScript is to start with a script someone
else has written, make a modification or two, and see what happens. If you like
the results, make further changes, add a few new lines, or combine portions of
multiple scripts. Once you have some experience fiddling with other people’s
code, you’ll feel more comfortable creating scripts of your own from scratch.
You might start, for example, with the Resize the frontmost Safari window script
from a few pages back. Try replacing Safari with the name of another app.
Or, try changing this line:
set bounds of front window to {0, 0, 1000, 600}
Those numbers refer, respectively, to the window’s distance (in pixels) from the
left edge of the screen; distance from the menu bar; width; and height. By
changing those values, you can both resize and reposition the window.
Then try playing with the front window term. What if Safari has two
windows open? Can you guess how to resize the back window? (It’s exactly
what you think.) Then try changing the text of the dialog that appears if Safari
has no windows open. And so on.
By the way, although I don’t have space to get into details about AppleScript, I
do want to mention one oddity. You may have noticed that a couple of my
example scripts started with tell application "App Name" on a line
by itself, and concluded with an end tell line, with everything else indented
in between. These are examples of tell blocks, a ubiquitous construction in
AppleScript. With a handful of exceptions (that is, commands interpreted by
AppleScript itself rather than sent to an app), nearly everything you do in
AppleScript involves telling some object (an app, a window, a paragraph) to do
something.
Tell blocks can be nested explicitly:
tell application "MyApp"
tell front window

   tell front window
       do something
   end tell
end tell
Or they can be combined like so:
tell front window of application "MyApp" to do
something
Either way, if something isn’t working the way you expect, the first thing you
should ask yourself is whether you’re telling the right entity to do something.
GUI Scripting
Sometimes you need an AppleScript to do something that an app provides no direct access to
in an AppleScript dictionary. You may be able to work around this with GUI scripting, which
instructs AppleScript to simulate mouse clicks, button presses, menu commands, and the like
—”playing” the user interface. It’s not foolproof, but it can solve otherwise intractable
problems. For details, read the page Graphic User Interface (GUI) Scripting, at Mac OS X
Automation.
Use AppleScript Folder Actions
A folder action is an AppleScript that runs automatically when something
happens to a specified folder—for example, you open or close it, or add files to
it. In my book Take Control of Your Paperless Office, I described a situation in
which your scanner saves PDF files to a certain folder—but what you want is for
your OCR software to open the PDFs, recognize the text in them, save them as
searchable PDFs, and then close them. No problem: attach one of my spiffy
folder action scripts to the folder where your scans are saved, and all that can
happen automatically.
Not just any old AppleScript can be a folder action; it must be written specially
for that purpose. (For details, see the Folder Actions Reference page on Apple’s
Developer site.)
I
dditi
b f
f ld
ti
i t
t
bl th
t

In addition, before you can use folder action scripts, you must enable the system-
wide Folder Actions capability if you haven’t previously done so, and attach a
particular script to the folder where your incoming scans are stored:
1. Make sure whatever script you want to use is stored in the
LibraryScripts/Folder Action Scripts folder or in
~LibraryScripts/Folder Action Scripts.
2. Right-click (Control-click) the folder you want to attach the script to, and
from the contextual menu that appears, choose Folder Actions Setup (if you
don’t see it at the top level of the contextual menu, look on the Services
submenu). Folder Actions Setup opens.
3. In the dialog that appears, select the script you want to use. (Although you
can attach multiple AppleScripts to a single folder, I don’t recommend it.
Pick a single script, and if need be, you can return to this dialog and change
it later.)
4. Make sure Enable Folder Actions is checked at the top of the Folder
Actions Setup window. Your window should look something like Figure
39.
Figure 39: You’re looking for approximately this end result (folder
and script names may differ) after configuring Folder Actions.
5. Quit Folder Actions Setup.
Now, to use your folder action, drop a new file in the folder (or take whatever
other action(s) the script supports, such as changing or removing files). The
script should run automatically.

p
y
Tip: An alternative way to get much the same effect as a folder action is to set up a rule in
Hazel (see Organize Files with Hazel).
Here are a few further examples of things you could do with an AppleScript
folder action:
Get an alert when someone puts a new file in a shared folder. (I do this to
learn when I have a new monthly royalty statement, which my publisher
puts in a shared Dropbox folder.)
Rename all the files to follow a particular format or convention.
Upload the files to a Web server.
Move files to other folders on your Mac depending on file type, name, or
other characteristics.
Learn More about AppleScript
I’ve barely scratched the surface of what you can do with AppleScript. If you
want to learn more, allow me to recommend a few useful references:
Apple’s official Introduction to AppleScript Language Guide
The AppleScript portion of the excellent Mac OS X Automation site
MacScripter.net, an extensive discussion forum where anyone (regardless
of skill level) can offer or receive help with AppleScript
Matt Neuburg’s book AppleScript: The Definitive Guide
AppleScript 1-2-3, by Sal Soghoian and Bill Cheeseman
A Wave of Automation at Mac OS X Automation, which covers automation
features added in Mavericks (including AppleScript libraries)

Note: If you happen to know a little bit about Objective-C and Cocoa, you can use a
technology called AppleScript/Objective-C (or AppleScriptObjC), introduced in 10.7 Lion, to
access Cocoa frameworks from AppleScript. You can learn more about it on the Resources
for AppleScriptObjC page, at Mac OS X Automation.
Script the Command Line with Shell Scripts
As you may know, OS X is based on Unix, and as such, there’s a whole layer of
functionality most users never see. But you can access a long list of hidden files
and useful tools in the text-based world of the command line.
A command-line interface is a way of giving instructions to a computer and
getting results back. You type a command (a word or other sequence of
characters) and press Return or Enter. The computer then processes that
command and displays the result (often in a list or other chunk of text). In most
cases, all your input and output remains on the screen, scrolling up as more
appears. But only one line—usually the last line of text in the window, and
usually designated by a blinking cursor—is the actual command line, the one
where commands appear when you type them.
You access the command line on a Mac using the Terminal utility (found in
ApplicationsUtilities). When you open Terminal, it runs a special
program called a shell, which interprets the commands you type and delivers the
text-based output. OS X comes with several different shells, but that detail is
unimportant for our purposes.
What is important is that shells are programmable. You can put a series of shell
commands in a text file and, without any special fuss, run it as a program. Shell
scripts can automate nearly any activity you can perform on the command line.
Although some scripts are fabulously complex, running many thousands of lines,
we’re concerned here with simpler tasks you can automate.
If you happen to be the sort of person who genuinely likes working in a
command-line interface, you’ll probably want to have lots of scripts that
simplify the process for you But even if you’re entirely happy remaining in OS

simplify the process for you. But even if you re entirely happy remaining in OS
X’s graphical interface, shell scripts can be your friends. They can modify files
and folders, perform system functions, and do other sorts of tricks that are
difficult or impossible to perform in other ways (such as using AppleScript or
Automator). In fact, some of my favorite AppleScripts, Automator actions, and
Keyboard Maestro macros rely heavily on embedded shell scripts.
Here are a few things shell scripts can do for you:
Rename large numbers of files at once
Modify hidden preferences for OS X and its apps
Unhide the ~/Library folder in Mountain Lion and later
Securely delete specific files or folders without first moving them to the
Trash
Force background processes to quit without requiring the use of the
Activity Monitor utility
Load or unload daemons and agents (see Schedule Any Activity on Your
Mac)
Ordinarily, you create and run shell scripts in the Terminal utility (as I show you
next). However, as I mentioned, many of the other utilities I cover in this book
can run shell scripts too.
Tip: If you’d like to know all about the command line—how to get around, run programs, edit
files, and (of course) work with shell scripts, pick up my book Take Control of the Mac
Command Line with Terminal.
Create Your Own Shell Script
I want to give you a tiny taste of creating your own shell scripts. As with the
other topics in this chapter, I’m not going to teach you anything about
programming as such, just the mechanics of creating and using a simple shell

script. I want you to have enough familiarity with the process that you can
successfully reproduce and run shell scripts you may run across in magazines, in
books, or on Web sites.
You can create and run a shell script in six easy steps.
Step 1: Open Terminal
Open the Terminal utility (in ApplicationsUtilities). You’ll be
presented with a mostly blank window. That’s where all the magic happens.
Step 2: Start with an Empty Text File
Scripts are plain text files, so you should begin by creating one in a text editor.
You can make a shell script in TextEdit, BBEdit, or even Word, but that requires
extra steps. So I suggest using a simple command-line text editor called nano.
For the purpose of demonstration, we’ll name the script test.sh. (The .sh
extension isn’t mandatory, but it can help you keep track of which files are
scripts.) Before you create this file, I suggest typing cd (change directory)
followed by Return to ensure that you’re in your home directory. (You can put
scripts anywhere you want, but for now, this is a convenient location.)
That done, type nano test.sh and press Return.
The nano text editor opens with a blank file.
Step 3: Type In the Script
A script can be anything from a single one-word command to thousands of lines
of complex logic. Let’s start with a very simple, five-line script. Type this:
#!/bin/bash
echo "Hello! The current date and time is:"
date
echo "And the current directory is:"
pwd

The first line tells the script which shell program to use (in this case, bash). The
two echo commands simply put text on the screen. The date command
displays the date (surprise!), and the pwd (print working directory) command
displays your current directory. So, this script displays four lines of text, two of
which are static (the echo lines) and two of which are variable.
Step 4: Close and Save the File
To save the file, press Control-O and press Return to confirm the file name.
Then press Control-X to exit nano.
Step 5: Enable Execute Permission
The only slightly tricky thing about running scripts—and the step people forget
most often—is adding execute (run) permission to the file. To do this, enter
chmod u+x test.sh.
Step 6: Run the Script
That’s it! To run the script, type ./test.sh and press Return. The window
should display something like this:
Hello! The current date and time is:
Wed Jun 1 19:58:21 PDT 2014
And the current directory is:
Usersjk
For fun, try switching to a different folder. For example, type
cd LibraryPreferences
and press Return to move to the LibraryPreferences folder. Now run the
script again by typing ~/test.sh and pressing Return. You’ll see that it
shows your new location.
Tip: Any time you need to put a new script on your system, follow these same steps (although
the script name and location may vary).

Try Another Script
Here’s another script you may find useful. It changes the extension on all files in
a folder (for example, from .JPG to .jpeg)—something that’s not easy to do
in the Finder or on the command line.
Repeat the preceding set of directions, with two differences. First, in Step 2, use
a different file name when you open nano:
nano br.sh
(That is, br for batch rename.) Then, in Step 3, type the following code instead:
#!/bin/bash
for f in $3/*.$1; do
   base=`basename $f .$1`
   mv "$f" "$3/$base.$2"
done
Note: The third line of this script makes use of the backtick (`) character, which is called a
grave accent when placed over a vowel. It’s on the same key as the tilde (~), and should not
be confused with the apostrophe (‘) or the backslash (\).
To run this script, enter ./br.sh followed by the old extension, the new
extension, and the folder in which to make the change—in that order. For
example, to change all the files in ~/Documents with the extension .JPG to
end in .jpeg, enter this:
./br.sh JPG jpeg ~/Documents
Tip: To learn more about shell scripting, read Apple’s Shell Scripting Primer.
Shell Scripts Outside the Shell
But wait! Isn’t renaming documents the sort of thing you might want to do
frequently, without having to mess around in Terminal? Absolutely. So that’s the
sort of script that you might want to put in a launcher (like LaunchBar) a text-

sort of script that you might want to put in a launcher (like LaunchBar), a text-
expansion tool (like TextExpander), or a macro utility (like Keyboard Maestro),
so that you can execute it with just a keystroke or click.
The problem with this particular example script is that it doesn’t run on its own;
it asks for three arguments (or parameters)—namely, the “before” extension, the
“after” extension, and the folder in which to change the files. So, without
modifications, it wouldn’t work embedded in another tool.
There are many ways to work around this problem, and I’ll show you one
example later, in Control Your Mac with Keyboard Maestro.

Use a Macro Utility
Earlier, in Use OS X Automation Technologies, I discussed AppleScript and
Automator, two tools that can control numerous other apps and tie multiple
actions together into easy-t0-run shortcuts. Both of those technologies are
powerful, free, and included with OS X. But AppleScript’s learning curve
precludes casual use, while it’s limited by the capabilities various apps choose to
expose. Automator is far easier for a beginner to use, but it, too, has a fairly
constrained palette of capabilities—and not all the tasks you might wish to
automate fit its “workflow” mold. Meanwhile, apps like Excel and Nisus Writer
Pro have fantastic automation capabilities built in, but they’re largely confined to
activities within those apps.
So we come to a category of automation tools that—at the risk of overstating my
case—transcends these limitations. If you just want to get the job done—not
necessarily in the most programmatically elegant way but in a fast, reliable, and
flexible way—you want a macro utility. It’s the sort of tool I reach for most
often for general-purpose automation tasks.
Like other kinds of tools covered in this book, the idea of a macro utility is
straightforward. You pick an action, or a series of actions, from a list; these form
the macro’s task. Then you pick one or more events to trigger that action—a
keyboard shortcut, a button click, a change in network settings, or whatnot.
That’s it: you have a macro.
What’s interesting about the utilities discussed in this chapter is that the lists of
potential actions they offer as building blocks for macros are quite long and
diverse. Some of these actions, similar to AppleScript verbs and Automator
actions, directly control a particular app (iTunes, Safari, the Finder) or send
instructions to OS X (shut down, change display brightness, switch users).
Others manipulate behind-the-scenes resources (clipboards, variables, strings) or
manage the flow of steps (if/then/else conditionals, loops, subroutines). Still

g
p (
,
p ,
)
others “play” the visible interface, simulating button presses, menu commands,
keystrokes, and mouse movements.
Put all this together and you have a toolkit that—with a bit of cleverness and
patient testing—can automate almost any repetitive Mac task that doesn’t require
creativity or human intuition. Just a handful of examples, all of which can be
done with a single click or keystroke:
Remap keys on your keyboard to perform different functions
Show the screen of a shared Mac
Force a “stuck” Trash to empty
Add keyboard shortcuts to menu commands in apps that don’t support OS
X’s built-in shortcuts
Create an ad hoc Wi-Fi network
Open an entire set of apps and documents
Resize and reposition all your windows so they don’t overlap
Modify text or formatting according to predefined patterns
Email the URL of the Web page you’re currently viewing to someone else
Rotate, flip, resize, or crop all the images in a folder
Having thus sung the praises of macro utilities generally, I must level with you.
For all practical purposes, we’re talking about one utility: Keyboard Maestro.
Sure, I’ll mention a few others (in Use Another Macro Utility), and I don’t mean
to diss them, but the main shortcoming of competitors like iKey and QuicKeys is
that they aren’t being actively maintained or developed. They have excellent
features, but they lack the latest bells and whistles, and don’t engender
confidence that they’ll still work in tomorrow’s version of OS X. If you want a
great macro utility—and trust me, you do—Keyboard Maestro is where it’s at.

Control Your Mac with Keyboard Maestro
I’ve already given you a taste of what Keyboard Maestro can do, so let me show
you what it looks like, walk you through creating a couple of macros, and
explore some of its options and little-known features.
Create a Macro
When you open the Keyboard Maestro (Figure 40), you’ll see a three-pane
Editor interface. On the left is a list of groups, which you can use to organize
your macros however you like; this includes the All Macros smart group. In the
middle is the list of all the macros in the current group. And on the right is the
contents of the currently selected macro (or a blank shell of a macro, if you’ve
just created it). To create an empty macro, click the plus  button at the bottom
of the Macros list.
Figure 40: The Keyboard Maestro editor with a new, blank macro
ready to be customized.
Within the macro pane (Figure 41), you see two areas: the trigger(s) (top) and
the action(s) (bottom). You can configure these two items in any order. A trigger
is what you do to make the macro run—a keystroke, a menu command, or a
system event, say. (More about triggers in a moment.) The action(s) are what
happen when the trigger occurs.

Figure 41: The macro pane includes trigger and action areas.
Macro #1: Open Login Items
For the sake of illustration, we’ll start by making a macro with a single, simple
trigger and a sequence of three actions. When you run this macro, it will display
the Users & Groups pane of System Preferences, with the Login Items list
showing. (Ordinarily, you’d have to open System Preferences, click Users &
Groups, and then, unless Login Items had been selected the previous time you
viewed that pane, click Login Items. So, we’re replacing three clicks with one
keyboard shortcut.)
Follow these steps:
1. If you haven’t already done so, launch Keyboard Maestro, select a group
(doesn’t matter which one), and click the plus  button at the bottom of the
Macros list to create a new, blank macro.
2. Give your macro a name—replace Untitled Macro at the top with Open
Login Items.
3. Click New Trigger to display a pop-up menu from which you can choose
any of 16 trigger types. Choose Hot Key Trigger (the first item) from this
menu to use a keyboard shortcut as the trigger.

4. You’ll notice that the Type field under the text “This hot key” is already
selected. So press the keyboard shortcut you want to use to trigger this
macro. It can be anything you like, but I suggest choosing something
obscure that isn’t already being used for something else, like Command-
Option-Control-L.
Note: A macro can have more than one trigger, and you can change your trigger(s) at any
time.
5. Click New Action to display a new pane (which covers the two leftmost
columns of the window) with a list of all possible actions, grouped by
category (Figure 42).

Figure 42: Keyboard Maestro’s actions are grouped by category.
6. The first action is to open the User & Groups pane of System Preferences.
To do this, click Open in the Categories list and then drag Open a System
Preference Pane to the “No Action” label on the right (or just double-click
the action). If Users & Groups isn’t already shown next to “Open
preference pane,” choose it from the pop-up menu.
7. When you launch System Preferences, it may take a second or two to open,
and we want to wait until it’s running to switch to the Login Items view.
So, select Control Flow in the Categories list and then drag the Pause Until
action underneath the Open Users & Groups Preference Pane action Click

action underneath the Open Users & Groups Preference Pane action. Click
New Condition and choose Front Window Condition from the pop-up
menu. Then, from the Front Application pop-up menu, choose System
Preferences (if it’s not already there, click More at the bottom to expand the
list). Leave the last pop-up menu set to Exists.
8. Now we need to switch to the Login Items view (in case that’s not what the
window is currently set to).
Click Interface Control in the Categories list, and add the Press a Button
action to the end of your action list. Replace the text OK with Login
Items. At this point, the macro should look like Figure 43.
Figure 43: The final Open Login Items macro, in edit mode.

9. Click the Edit button at the bottom to deselect it. Once you’re no longer in
edit mode, the macro should look like Figure 44.
Figure 44: The final Open Login Items macro.
Note: The macro will work fine even if you don’t leave edit mode, but doing so keeps you
from making accidental changes to your macro.
We’re ready to rock! Press Command-Option-Control-L (or whichever
combination you chose). System Preferences should open to the Users & Groups
pane, with the Login Items view visible.
Macro #2: Change Extensions
Back in Script the Command Line with Shell Scripts, I showed you a simple
shell script that changes the extensions of all the files in a folder from .JPG to
.jpeg. But I also said that the design of that script made it unsuitable for
embedding in a launcher or macro utility.
Let me now show you one way to get the same result with Keyboard Maestro—
without ever leaving the Finder, and with a little help from the command line.
Follow these steps:
1. Create a new macro (as you did in Macro #1: Open Login Items) and give it
the name Change Extensions.

2. Click New Trigger and click Status Menu Trigger from the pop-up menu.
(This is just for variety, and so I can show you how the status menu works.
Feel free to use other triggers instead or in addition.)
3. Click New Action to display the Categories and Actions lists.
4. Click Notifications in the Categories list, and then add the action Prompt
for User Input as your first action. Fill it in with the following options:
Title: Change Extensions
Prompt: This macro renames all selected files
that have the "From" extension to have the "To"
extension (e.g., JPG -> jpeg).
Variables and Default Values: Click plus  and then fill in From for
the first variable name, JPG for its value; click plus  again and fill in
To for the second variable name and jpeg for its value. (Leave the
remaining settings as is.)
5. Click Control Flow in the Categories list and add For Each as the second
action. In the For Each field, enter filePath. Click plus  and then
choose The Finder’s Selection Collection from the pop-up menu. (Leave
the Fix Finder Selection Bug option checked.)
6. Click Execute in the Categories list and drag Execute a Shell Script to the
No Action field (under “execute the following actions”). (In other words,
you’re embedding one action inside another.)
7. In the Execute Shell Script action, make sure the first pop-up menu says
Execute Text Script. Then type or paste the following into the text field
exactly as shown here (including spaces):
base=`basename "$KMVAR_filePath" .$KMVAR_From`
 ext="${KMVAR_filePath##*.}"
 path=`dirname "$KMVAR_filePath"`
 if [ $ext == $KMVAR_From ]
 then

 mv "$KMVAR_filePath" "$path/$base.$KMVAR_To"
 fi
You’ll notice a few passing similarities to the shell script back in Script the
Command Line with Shell Scripts, but also quite a few differences.
8. Double-check to see that the macro looks like Figure 45.

Figure 45: The Change Extensions macro should look like this when
it’s completely filled in.
9. Optional but recommended: click the Edit button at the bottom to deselect
it.
Now you can run the macro, but first you’ll need a folder somewhere with a few
JPEG graphics in it. I suggest creating a test folder with duplicate images in it

J
G g ap cs
t.
suggest c eat g a test o de w t dup cate
ages
t
just so you don’t accidentally mess up your important photos if something goes
wrong.
Since we’ll be modifying the extension, which is hidden by default in OS X,
display all extensions temporarily in the Finder by going to Finder > Preferences
> Advanced and selecting Show All Filename Extensions. (You can turn this off
later, if you like.) Give some or all of your JPEGs the extension .JPG.
One last thing before we run the macro: if Keyboard Maestro’s status  or 
menu isn’t already visible in your Mac’s menu bar, switch back to Keyboard
Maestro, go to Keyboard Maestro > Preferences > General and make sure
Display Status Menu is set to either Alphabetically, By Group, or Hierarchically
(i.e., not Never).
Now select all the files in your test folder. (Or at least, select a bunch of files,
some of which have the .JPG extension.) Then choose Change Extensions from
the Keyboard Maestro status  or 
 menu. You should see the dialog (which
you created!) shown in Figure 46.
Figure 46: This dialog should appear when you run your macro.
Leave the options at their defaults and click OK. The extensions on selected files
that were previously .JPG should change to .jpeg. (Feel free to run the macro
as often as you like, with different From and To settings and different files
selected to see how it works.)
Record a Macro

If you read Automate Microsoft Office, you may recall that in Office apps, you
can record a macro. In other words, Office will watch you while you perform
activities, and then make them into a macro. You can play this macro back later,
no coding required. Keyboard Maestro offers a similar feature. It won’t always
produce results as reliable as creating your own macro from scratch—and not
every kind of macro can be recorded—but it’s a simple way to ease into macro
construction or get unstuck if you’re stuck.
To record a macro:
1. Create a new macro, just as in the earlier examples, and give it a name and
trigger.
2. Instead of filling in actions, click the Record button at the very bottom of
the window. A little 5-second countdown timer appears on screen (Figure
47).
Figure 47: This floating window appears when you record a macro.
The countdown timer (left) gives way to the icon on right when it
reaches zero.
3. Once the timer has counted down to zero and the icon says Recording, do
stuff. Whatever you like. Switch apps, type text, apply formatting, choose
menu commands, click buttons, anything. You know, stuff.
4. Click the floating Recording icon to stop recording and examine your new
macro in Keyboard Maestro.

5. Optional but recommended: click Edit to leave edit mode.
Now try running your macro. If the macro doesn’t work as expected—which is
likely—go back and click Edit to return to edit mode and see if you can modify
some of the actions to do what you want them to do. You may also need to add
Pause or Pause Until actions to force the macro to wait for your Mac to catch up
with it at certain points.
Learn about Keyboard Maestro Actions
I’ve shown you a handful of actions in the course of walking you through the
sample macros. There are many, many more of them. You can learn about
actions by looking at the Keyboard Maestro documentation, or by trying them
out. I’d like to point out just a few actions and categories that I find particularly
interesting:
Activate Clipboard History Switcher (Switchers category): I mentioned
in Use a Macro or Launcher Utility that Keyboard Maestro is also an
excellent clipboard utility, featuring its own clipboard history. This action
displays a floating window with that history.
Filter Clipboard (Clipboard category): On the clipboard theme, this
action can make a wide variety of changes to the contents of your clipboard
—remove styles, change case, perform a calculation, count words, and
more.
Google Chrome Control category, Safari Control category: Thanks to
the actions in these categories, you can automate nearly anything in Google
Chrome or Safari—you can open a Web page, fill in and submit a form,
click buttons, create new tabs, execute JavaScripts, and more.
Execute category: If your macro needs capabilities that Keyboard
Maestro’s built-in actions don’t provide, you can use the actions in this
category to run a shell script (as we did in Macro #2: Change Extensions),
an AppleScript, or an Automator workflow as part of your macro. (You can
also apply a BBEdit text factory—look in the Clipboard category.)

Find Image on Screen (Image category): This blew my mind when I first
saw it. Keyboard Maestro can identify an area on your screen matching an
image (perhaps a cropped screenshot) that you supply, and having found
that portion of your screen, it can highlight it, move the mouse to it, or take
other actions.
Alternatively, a macro can choose to do something or not based on whether
an arbitrary portion of your screen matches an image. As just one example
of why this is interesting, a blind reader wrote to tell me he uses this
feature, in conjunction with AppleScript, to speak the status of an icon on
his screen (enabled or disabled) that he’d have no other way to determine
because it’s unavailable to VoiceOver. I think that’s incredibly cool. To
learn more about using this action, read How to Assign a Hotkey to Almost
Anything by Patrick Welker.
Tip: Keyboard Maestro itself is VoiceOver-accessible, opening its capabilities to those with
limited sight. You can also use Keyboard Maestro’s Speak Text macro to create macros that
deliver status reports verbally.
Variables category: We used two variables in Macro #2: Change
Extensions to pass the contents of fields in a dialog to a shell script. There
are countless other ways to use variables, but what I find most valuable is
that they’re able to take information created or discovered by one action
and reuse them in another action, later in the macro.
Learn about Keyboard Maestro Triggers
Just as Keyboard Maestro has lots of groovy actions, it has a crazy array of
triggers. We’ve seen keyboard shortcuts and commands on the Keyboard
Maestro status menu, but there are 14 other options too. I’m not going to
enumerate all of them here—you can read all about them in the Keyboard
Maestro documentation—but I want to call out a few that I think are especially
noteworthy:

Typed String Trigger: Unlike a keyboard shortcut, which uses a
combination of keys pressed at once (typically with modifiers such as
Command, Control, Option, and/or Shift), a typed string trigger is a
sequence of keys you type without a modifier. In Automate Text
Expansion, we saw how software can turn a typed abbreviation into a
longer chunk of text. This is the same idea, except that typing an
abbreviation runs a macro (and optionally deletes those characters you just
typed). For example, I could type an abbreviation that fills in some
predefined text, selects the entire current paragraph, and copies it to the
clipboard—all in one operation.
Time Trigger: Have your macro run on a timer! This trigger lets you select
the time and day(s) of the week you want it to run.
MIDI Trigger: If you have a piano-style MIDI keyboard (or any other
MIDI instrument) connected to your Mac, you can trigger a Keyboard
Maestro macro when you play a particular note. (Incidentally, there are also
MIDI actions to send note on, note off, and control change messages.)
Macro Palette Trigger: This floating palette normally takes the form of a
small icon (which you can position anywhere on your screen), but mouse
over it, and it displays a list of macros that you can trigger with a single
click (Figure 48).
Figure 48: The macro palette is normally unobtrusive (left), but when
you mouse over it, it expands to show macros you can activate with
a click (right).

Wireless Network Trigger: You can trigger a macro by connecting to, or
disconnecting from, a certain Wi-Fi network.
Every Minute Counts
I’d like to wrap up this section on Keyboard Maestro by going back to a story I
mentioned in the Introduction.
For years, I’ve kept track of my income as a freelance author on a daily basis—
it’s the only way I can stay on top of my budget given the ups and downs of the
publishing business. It used to be that every single day, I’d check to see how
many copies of each of my Take Control books I’d sold the previous day (by
counting email receipts). Then I’d check that day’s earnings from Google
AdSense and Amazon affiliate links on my Web sites. Finally, I’d enter all this
information into a spreadsheet.
That whole process took me about 5 minutes a day, and I couldn’t stand it. After
doing this hundreds of times, I finally got fed up and decided I’d figure out once
and for all how to automate it. I spent a full day creating an elaborate Keyboard
Maestro macro that, in combination with some AppleScript code I’d previously
written, did all that for me—all on a recurring schedule, so it now requires zero
clicks, zero keystrokes, and zero minutes. I now get to save 5 minutes a day—or
30 hours a year—and I cherish every moment of it.
Use Another Macro Utility
Keyboard Maestro isn’t the only macro utility for OS X, but it’s an excellent one
—and it’s the only one (as far as I can tell) that’s receiving active development
attention. But, because I know people will ask, I do want to say a few words
about other Mac macro utilities:
iKey: Although not in the same league as Keyboard Maestro, iKey is a fine
little macro utility. It has a reasonably thorough list of triggers and actions,
and can dispatch many repetitive tasks with ease. (And, it has Take Control

cred: Adam Engst wrote Take Control of iKey 2, which is slightly outdated,
but still useful.)
iKey doesn’t include logic, as such. For example, it can wait for certain app
or window states before moving on with the next step in a macro, but it
can’t make if/then/else decisions, process variables, perform loops, search
for text patterns, or evaluate complex conditions as Keyboard Maestro can.
And its interface is odd—it strikes me as being backwards from the way
most macro utilities approach triggers and actions. As I write this, iKey’s
last update was on October 31, 2011, which is a long time in Internet years.
Although it works (with a bit of coaxing) under Mavericks, it doesn’t
appear to be in active development, which makes me reluctant to
recommend it.
QuicKeys: Back in the day (that is, before 2010 or so), QuicKeys was the
biggest, baddest, most powerful macro tool for Macs. I absolutely loved it
—I found it both easier to use and more flexible than the Keyboard Maestro
of that era, and was hard-pressed to come up with any automation task it
couldn’t perform. Unfortunately, the company that owns it, Startly
Technologies, encountered a series of misfortunes—not the least of which
was the unexpected death of the lead QuicKeys developer. As a result,
QuicKeys has been in a state of suspended animation.
The software hasn’t been updated since December 17, 2009. For reference,
those were the days of 10.6 Snow Leopard; 10.7 Lion came out in July
2011. Although QuicKeys is still for sale and still sort of, mostly works
with Mavericks (see extra steps required here), it doesn’t take advantage of
any recently added OS X technologies, and has nontrivial bugs. Since it was
never updated for Lion, Mountain Lion, or Mavericks, I have to assume the
current version (4.0.7) is the last one we’ll ever see. It may work (sort of,
mostly) for a long time or it may break with 10.10 Yosemite, but despite its
power, I can’t feel good about relying on an app that’s barely on life
support. If the app should come back to life, I’ll be more than happy to
update this section of the book accordingly!

Alfred: Alfred, which I discussed in Use a Thirdparty Launcher, has a
feature called workflows that’s available only if you purchase the optional
Powerpack. Workflows connect a trigger (such as pressing Alfred’s hot
key) and/or an input (such as a keyword or a filter) with an action (such as
opening a file or URL, or running a shell script or AppleScript) and an
optional output (such as a notification or putting something on the
clipboard). So, in a limited sense, those sequences of actions are macro-
like. But any logic they contain comes only from the embedded script(s), so
Alfred’s main contribution is a way to trigger that behavior.
That’s not to say Alfred workflows aren’t extremely useful—they are. With
a few keystrokes in Alfred, you can create a new note or search in Evernote,
perform a search on multiple Web sites at once, or open a selected image in
a browser instead of Preview. But Alfred workflows are much more limited
than Automator workflows, and more limited still than Keyboard Maestro
macros.

About This Book
Thank you for purchasing this Take Control book. We hope you find it both
useful and enjoyable to read. We welcome your comments.
Ebook Extras
You can access extras related to this ebook on the Web. Once you’re on the
ebook’s Take Control Extras page, you can:
Download any available new version of the ebook for free, or buy a
subsequent edition at a discount.
Download various formats, including PDF, EPUB, and Mobipocket. (Learn
about reading on mobile devices on our Device Advice page.)
Read postings to the ebook’s blog. These may include new information and
tips, as well as links to author interviews. At the top of the blog, you can
also see any update plans for the ebook.
If you bought this ebook from the Take Control Web site, it has been
automatically added to your account, where you can download it in other
formats and access any future updates. However, if you bought this ebook
elsewhere, you can add it to your account manually:
If you already have a Take Control account, log in to your account, and
then click the “access extras…” link above.
If you don’t have a Take Control account, first make one by following the
directions that appear when you click the “access extras…” link above.
Then, once you are logged in to your new account, add your ebook by
clicking the “access extras…” link a second time.

Note: If you try these directions and find that your device is incompatible with the Take
Control Web site, contact us.
About the Author
 
Joe Kissell is a Senior Editor of TidBITS, a Web site and email newsletter about
Apple and the Internet, and the author of numerous books about technology,
including Take Control of Your Passwords, Take Control of Dropbox, and Take
Control of the Cloud. He frequently speaks at technology-focused conferences
such as Macworld/iWorld, on MacMania cruises, at user group events, and on
live video broadcasts.
He is also a Senior Contributor to Macworld, was the winner of a 2009 Neal
award for Best How-to Article, and has appeared on the MacTech 25 list (the 25
people voted most influential in the Macintosh community) since 2007. Joe has
worked in the Mac software industry since the early 1990s, including positions
managing software development for Nisus Software and Kensington Technology
Group.
When not writing or speaking, Joe likes to travel, walk, cook, eat, and dream (in
both senses of the word). He lives in San Diego with his wife, Morgen Jahnke;
their sons, Soren and Devin; and their cat, Zora. To contact Joe about this book,
send him email and please include Take Control of Automating
Your Mac in the subject.

Shameless Plug
Although I currently write and speak about technology as my day job, I have a
great many other interests. To find out what I’m up to, visit JoeKissell.com or
sign up for joeMail, my free, low-volume, no-spam mailing list. You can also
follow me on Twitter (@joekissell).
Acknowledgements
It was great to work with Scholle McFarland again, who edited many of my
Macworld articles over the years and who brought that same sharp eye and deep
understanding of the Mac to this book. I also appreciated the helpful feedback of
all the technical reviewers—especially Peter N Lewis and Greg Scown.
About the Publisher
 

 
Publishers Adam and Tonya Engst have been creating Apple-related content
since they started the online newsletter TidBITS in 1990. In TidBITS, you can
find the latest Apple news, plus read reviews, opinions, and more.
Adam and Tonya are known in the Apple world as writers, editors, and speakers.
They are also parents to Tristan, who has reached the age where he can read,
understand, and find mistakes in the Take Control series.
Credits
Publisher: Adam Engst
Editor in Chief: Tonya Engst
Editor: Scholle McFarland
Cover design: Sam Schick of Neversink
Logo design: Geoff Allen of FUN is OK
Thank you to Joe for agreeing to write this ebook, and thanks to Scholle for
editing her first ever Take Control title. And, thanks to the many readers who
asked that we write about automation and to everyone who helped with the tech
review. Finally, thanks to the developers who provided the nice collection of
coupons at the end of this book!

Copyright and Fine Print
Take Control of Automating Your Mac
ISBN: 978-1-61542-436-8
Copyright © 2014, alt concepts inc. All rights reserved.
TidBITS Publishing Inc.
50 Hickory Road
Ithaca, NY 14850 USA
Take Control electronic books help readers regain a measure of control in an
oftentimes out-of-control universe. Take Control ebooks also streamline the
publication process so that information about quickly changing technical topics
can be published while it’s still relevant and accurate.
This electronic book doesn’t use copy protection because copy protection makes
life harder for everyone. So we ask a favor of our readers. If you want to share
your copy of this ebook with a friend, please do so as you would a physical
book, meaning that if your friend uses it regularly, he or she should buy a copy.
Your support makes it possible for future Take Control ebooks to hit the Internet
long before you’d find the same information in a printed book. Plus, if you buy
the ebook, you’re entitled to any free updates that become available.
You have our permission to make a single print copy of this ebook for personal
use. Please reference this page if a print service refuses to print the ebook for
copyright reasons.
Although the author and TidBITS Publishing Inc. have made a reasonable effort
to ensure the accuracy of the information herein, they assume no responsibility
for errors or omissions. The information in this ebook is distributed “As Is,”
without warranty of any kind. Neither TidBITS Publishing Inc. nor the author
shall be liable to any person or entity for any special, indirect, incidental, or
i l d
i
l di
i h
li i
i
l
l
fi

consequential damages, including without limitation lost revenues or lost profits,
that may result (or that are alleged to result) from the use of these materials. In
other words, use this information at your own risk.
Many of the designations used to distinguish products and services are claimed
as trademarks or service marks. Any trademarks, service marks, product names,
or named features that appear in this title are assumed to be the property of their
respective owners. All product names and services are used in an editorial
fashion only, with no intention of infringement of the trademark. No such use, or
the use of any trade name, is meant to convey endorsement or other affiliation
with this title.
This title is an independent publication and has not been authorized, sponsored,
or otherwise approved by Apple Inc. Because of the nature of this title, it uses
terms that are the trademarks or that are the registered trademarks of Apple Inc.;
you can view a complete list of the trademarks and of the registered trademarks
of Apple Inc.

Featured Titles
Click any book title below or visit our Web catalog to add more ebooks to your
Take Control collection!
Take Control of 1Password (Joe Kissell): Slowed down by entering passwords
repeatedly? Learn how to let 1Password do the heavy lifting.
Take Control of Backing Up Your Mac (Joe Kissell): Set up a rock-solid backup
strategy so that you can restore quickly and completely, no matter what
catastrophe arises.
Take Control of Getting Started with DEVONthink 2 (Joe Kissell): Store,
organize, and locate your PDFs, paper documents, email messages, and scribbled
notes with DEVONthink 2.
Take Control of iTunes 11: The FAQ (Kirk McElhearn): Wrap iTunes around
your little finger and enjoy your media more.
Take Control of LaunchBar (Kirk McElhearn): See the comic to learn how
LaunchBar can help you control your Mac from the keyboard, and then read this
ebook to master LaunchBar.
Take Control of Spotlight for Finding Anything on Your Mac (Sharon Zardetto):
Whether by mouse or menu, or by typing a complex query, you’ll learn how to
find your files, contacts, images, and much more.
Take Control of TextExpander (Michael E. Cohen): Whether you want to type
faster or you already use TextExpander but want to harness its power more fully,
let Michael lead you to typing nirvana.
Take Control of Your Apple Wi-Fi Network (Glenn Fleishman): Make your
AirPort network fly—get help with replacing an old base station, extending a

network, security, adding peripherals, and more.
Take Control of Your Paperless Office (Joe Kissell): With your Mac, scanner,
and this ebook in hand, you’ll finally clear the chaos of an office overflowing
with paper.

Keyboard Maestro Coupon
To save 20%, visit the Keyboard Maestro Web site and be sure to input the
coupon code TCOAYM as you check out.

LaunchBar Coupon
To save 20%, go the Objective Development Shop page, add LaunchBar to the
cart, and enter DT-4460-7113 in the Discounts field.

Hazel Coupon
To save 20% on Hazel, visit the Noodlesoft Store page to see the discount
pricing, enter how many copies you want, and check out.

Nisus Writer Pro Coupon
To save 20% on Nisus Writer Pro, visit the Nisus Software Take Control
Readers page and click the appropriate Buy button.

TextExpander Coupon
To save 30%, open the Smile cart to see the coupon code already applied to
various TextExpander purchase options.

TextSoap Coupon
To save 20% on TextSoap, visit the Unmarked Software Store page, click one of
the Buy buttons, and enter TCAYM1414 in the Coupon Code field.

TypeIt4Me Coupon
To save 30% on TypeIt4Me, visit the Ettore Software coupon page and click
Buy Now.

Typinator Coupon
To save 30%, open the Ergonis Store page and then select Typinator to open the
Ergonis cart with the discount applied.

