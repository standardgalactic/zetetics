arXiv:2004.04243v1  [cs.CL]  8 Apr 2020
Error-correction and extraction in request dialogs
Stefan Constantin
stefan.constantin@kit.edu
Karlsruhe Institute of Technology
Alex Waibel
waibel@kit.edu
Karlsruhe Institute of Technology
Abstract
We propose a component that gets a request and a correction and
outputs a corrected request. To get this corrected request, the entities in
the correction phrase replace their corresponding entities in the request.
In addition, the proposed component outputs these pairs of corresponding
reparandum and repair entity. These entity pairs can be used, for example,
for learning in a life-long learning component of a dialog system to reduce
the need for correction in future dialogs.
For the approach described in this work, we ﬁne-tune BERT for se-
quence labeling.
We created a dataset to evaluate our component; for
which we got an accuracy of 93.28 %. An accuracy of 88.58 % has been
achieved for out-of-domain data. This accuracy shows that the proposed
component is learning the concept of corrections and can be developed to
be used as an upstream component to avoid the need for collecting data
for request corrections for every new domain.
1
Introduction
Errors and ambiguities are diﬃcult to avoid in a dialog. Corrections allow to
recover from errors and to disambiguate ambiguities. For example, a household
robot gets the request Put the cleaned knives into the cutlery drawer, but the
robot does not know which one of the drawers is the cutlery drawer. It can
choose one of the drawers and puts the knives there. If its choice is wrong,
the user must correct the robot, e. g. No, into the drawer right of the sink.
Alternatively, the robot can ask which one of the drawers is the cutlery drawer.
The clariﬁcation response of the human, e. g. It’s the drawer right of the sink,
is also a correction because the response disambiguates the ambiguity. Another
type of correction occurs when the user changes their mind, e. g. I changed my
mind, the forks.
All these correction types can be processed in the same manner and therefore
we propose a component that gets a request and a correction and outputs a
corrected request. To get this corrected request, the entities in the correction
phrase replace their corresponding entities in the request. The request Put the
cleaned knives into the cutlery drawer with its correction No, into the drawer
right of the sink is converted to Put the cleaned knives into the drawer right
1

of the sink. Such a component has two advantages compared to handling the
corrections in the actual dialog component.
First, it reduces the amount of
required training data for the actual dialog component because corrections will
not need to be learned if there is an open-domain correction component. Second,
this kind of correction component can be extended so that it outputs the pairs of
reparandum and repair entity. In our example there is one pair: cutlery drawer
and drawer right of the sink. These entity pairs can be used, for example, for
learning in a life-long learning component of a dialog system to reduce the need
for correction in future dialogs, e. g. the robot can learn which one of the drawers
is the cutlery drawer.
2
Related Work
The task of request correction is related to the task of disﬂuency removal. In
disﬂuency removal, there are the reparandum (which entity should be replaced),
the interruption point (where the correction begins), the interregnum (which
phrase is the signal phrase for the correction), and the repair phrase (the correct
entity) [5].
In Figure 1, a disﬂuent utterance annotated with this terminology is de-
picted.
knives in the
drawer
| {z }
reparandum
|{z}
interruption point
uh
|{z}
interregnum
sink
|{z}
repair
Figure 1: disﬂuent utterance annotated with repair terminology
A lot of work has been conducted for disﬂuency removal [1, 3, 4, 6]. In all
these works, it is assumed that it is enough to delete tokens of the disﬂuent
utterance to get a ﬂuent utterance. A disﬂuent utterance with the copy and
delete labels is depicted in Figure 2.
knives
in
the
drawer
uh
sink
C
C
C
D
D
C
Figure 2: disﬂuent utterance labeled with copy and delete labels
However, in the task of corrections, long-distance replacements can occur.
Such a long-distance replacement is depicted in Figure 3.
knives
| {z }
reparandum
in the drawer
|{z}
interruption point
no
|{z}
interregnum
forks
| {z }
repair
Figure 3: request and correction phrase annotated with repair terminology
2

3
Dataset
We created a dataset with requests and corresponding corrections. Outputs
of the system like error actions and clariﬁcation questions are not part of the
dataset. The training dataset is in the domain of a kitchen robot. For the ﬁrst
version of the dataset, we focused on the task of bringing a speciﬁed object to
a speciﬁed location and cooking a speciﬁed recipe.
We collected 20 utterances and correspondingly 20 correction responses from
each of the seven participants for the task of bringing a speciﬁed object to a
speciﬁed location. For the task of cooking a speciﬁed recipe, we collected 10
utterances and correspondingly 10 correction responses from each of the seven
participants. Examples of the collected data are the request Put the cleaned
knives into the cutlery drawer, the correction of the robot’s wrong action No,
into the drawer right of the sink, the clariﬁcation It’s the drawer right of the
sink, or the user’s change of mind I changed my mind, the forks. Correction
responses were collected to correct or clarify the object, the location, the object
and the location, or the recipe.
The collected data was used as inspiration to build templates that try to
cover the natural language variety. To increase this variety, we added synonyms,
new objects, new locations, and new recipes to the collected data. Example
templates are depicted in Figure 4. We created 15 templates for the requests and
45 templates for the correction responses and got 74 309 request and correction
pairs.
example request templates:
can you put the object into the location
the location is the place where you put the object
example correction templates:
no the other object than in the request template into the other location than in
the request template
i meant the other location than in the request template
Figure 4: example templates
The dataset has two targets. The ﬁrst target is the corrected request, while
the second target is the pairs of reparandum and repair entity.
In our validation and testing dataset, the following four abilities: handling of
unknown entities, unknown templates, unknown entities and templates, out-of-
domain templates and entities are tested. For testing the handling of unknown
entities, we used the templates of the training dataset and replaced all entities
with entities not occurring in the training dataset. In order to test the gener-
alization in regard to the variety of natural language, we replaced all templates
of the training dataset with unknown templates with the same semantic. To
3

combine both described tests, we used only unknown entities and templates. To
test whether the trained model can be used for other domains or tasks without
retraining, we used the new tasks of buying a product and attaching a speciﬁc
object to a speciﬁc location. There are 400 request and correction pairs for
validation and 1727 pairs for testing. In Table 1, the numbers of pairs for the
individual tests are depicted.
validation
test
unknown entities
100
205
unknown templates
100
606
unknown entities and templates
100
584
out-of-domain entities and templates
100
332
sum
400
1727
Table 1: validation and test dataset sizes
4
Model
For the correction and extraction, we used a sequence labeling approach. We
labeled every word token either with the token C (copy), D (delete), R1 (entity
1 potentially to be replaced), R2 (entity 2 potentially to be replaced), S1 (entity
to replace entity 1), or S2 (entity to replace entity 2). For the correction target,
we used the S1 and S2 labeled entities to replace the R1 and R2 labeled entities,
respectively. For the extraction target, the output is the pairs R1 and S1 as well
as R2 and S2. In Figure 5, an example request and correction pair is labeled
and both targets are given.
request || correction
cook
rice
for
me
no
curry
rice
labels
C
R1
C
C
D
S1
S1
corrected request
cook curry rice for me
pairs of reparandum
and repair entity
rice →curry rice
Figure 5: sequence labeling approach
For the sequence labeling, we ﬁne-tuned the cased BERT base model (12
Transformer blocks, hidden size of 768, 12 self-attention heads, and 110M pa-
rameters) [2] with a Named Entity Recognition tool1.
We ﬁne-tuned three
epochs with a starting ﬁne-tuning learning rate of 2e−5.
5
Evaluation
We evaluated our architecture with the metric accuracy. A request and correc-
tion pair was correctly converted if both targets, the corrected request and the
1https://github.com/kyzhouhzau/BERT-NER
4

pairs of reparandum and repair entity were equal to their references.
The results for the datasets are depicted in Table 2.
validation
test
unknown entities
100 %
98.54 %
unknown templates
97 %
97.03 %
unknown entities and templates
91 %
90.24 %
out-of-domain entities and templates
82 %
88.55 %
all together
92.50 %
93.28 %
Table 2: evaluation results (metric accuracy both targets correct)
The replacement of trained entities with unknown entities or trained tem-
plates with unknown templates does not cause problems for the trained model.
We still got an accuracy of 98.54 % or 97.03 %, respectively. The combination
of both, reduced the performance to 90.24 %. We got an accuracy of 88.35 %
for out-of-domain entities and templates.
6
Conclusions and Further Work
The proposed component that can convert a request and a correction into a
correct request, and can extract the pairs of reparandum and repair entity,
shows high potential.
An accuracy of 88.58 % has been achieved for out-of-
domain data. This accuracy shows that the proposed component is learning
the concept of corrections and can be developed to be used as an upstream
component to avoid the need for collecting data for request corrections for every
new domain. In addition, the extraction of the pairs of reperandum and repair
entity can be used for learning in a life-long learning component of a dialog
system to reduce the need for correction in future dialogs.
In future work, the training dataset can be extended by new tasks which
will enable the model to learn the concept of corrections even better and to
get a better out-of-domain performance. Another research topic could be the
classiﬁcation of correction types to give this information the life-long learning
component.
7
Acknowledgement
The project on which this report is based was funded by the Federal Ministry of
Education and Research (BMBF) of Germany under the number 01IS18040A.
The authors are responsible for the content of this publication.
We thank Leonard B¨armann, Thanh-Le Ha, Teresa Herrmann, Tuan-Nam
Nguyen, Ngoc-Quan Pham, Felix Schneider, and Franziska Vogel for participat-
ing in the data collection.
5

References
[1] Eunah Cho, Jan Niehues, and Alex Waibel. Machine translation of multi-
party meetings: Segmentation and disﬂuency removal strategies. In Proceed-
ings of the 11th International Workshop on Spoken Language Translation,
2014.
[2] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova.
BERT: Pre-training of deep bidirectional transformers for language under-
standing.
In Proceedings of the 2019 Conference of the North American
Chapter of the Association for Computational Linguistics (NACL), 2019.
[3] Qianqian Dong, Feng Wanga, Zhen Yang, Wei Chenand Shuang Xu, and
Bo Xu.
Adapting translation models for transcript disﬂuency detection.
In Proceedings of the Thirty-Third Conference on Artiﬁcial Intelligence
(AAAI), 2019.
[4] Paria Jamshid Lou, Peter Anderson, and Mark Johnson.
Disﬂuency de-
tection using auto-correlational neural networks.
In Proceedings of the
2018 Conference on Empirical Methods in Natural Language Processing
(EMNLP), 2018.
[5] Elizabeth Ellen Shriberg. Preliminaries to a Theory of Speech Disﬂuencies.
PhD thesis, University of California, 1994.
[6] Shaolei Wang, Wanxiang Che, and Ting Liu. A neural attention model for
disﬂuency detection. In Proceedings of the 26th International Conference on
Computational Linguistic (COLING), 2016.
6

